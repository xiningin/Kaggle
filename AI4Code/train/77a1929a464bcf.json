{"cell_type":{"dbada67b":"code","bc0e264d":"code","5e5065c5":"code","3e9d23ca":"code","1d85e502":"code","9e1026bf":"code","eb1d45b2":"code","3739dab6":"code","f2bb009b":"code","e93018b9":"code","0dd87742":"code","c4997923":"code","21490db5":"code","ea1cad29":"code","2e98c8c7":"code","0f4b80c6":"code","5f33e273":"code","17c27e0f":"code","0b4a7711":"code","1dc73382":"code","a9a7edb0":"code","db80588d":"code","cb6a0323":"code","d563a90d":"code","f93958fb":"code","629a704b":"markdown"},"source":{"dbada67b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bc0e264d":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport codecs as cd\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.metrics import log_loss, confusion_matrix\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split # \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u306b\u95a2\u3059\u308b\u95a2\u6570\nfrom sklearn.model_selection import KFold # \u4ea4\u5dee\u691c\u8a3c\u6cd5\u306b\u95a2\u3059\u308b\u95a2\u6570\nfrom sklearn.metrics import mean_absolute_error # \u56de\u5e30\u554f\u984c\u306b\u304a\u3051\u308b\u6027\u80fd\u8a55\u4fa1\u306b\u95a2\u3059\u308b\u95a2\u6570","5e5065c5":"#\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u78ba\u8a8d\ndata = pd.read_csv(\"\/kaggle\/input\/kickstarter-projects\/ks-projects-201801.csv\", header = 0)\nprint(data.shape)\ndata.head()","3e9d23ca":"#\u4e88\u6e2c\u306b\u4f7f\u3048\u306a\u3044\u30c7\u30fc\u30bf\u306e\u524a\u9664\u3000\n#\u30ab\u30c6\u30b4\u30ea\u30fc\u306f\u30e1\u30a4\u30f3\u30ab\u30c6\u30b4\u30ea\u30fc\u304c\u3042\u308b\u305f\u3081\u524a\u9664\u3000\u30b4\u30fc\u30eb\u306fusd\u30b4\u30fc\u30eb\u304c\u3042\u308b\u305f\u3081\u524a\u9664\ndrop_elements = ['usd_pledged_real','usd pledged','pledged','backers','ID','name','goal','category']\ndata2 = data.drop(drop_elements, axis = 1)\ndata2.head()","1d85e502":"#\u7d71\u8a08\u5024\u3092\u8868\u793a\ndisplay(data2.describe())\n#\u6b20\u640d\u5024\u304c\u3042\u308b\u884c\u6570\ndisplay(data2.isnull().sum())\n#\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\ndisplay(data2.dtypes)","9e1026bf":"#DAY2\u3067\u8ffd\u52a0\n#usd_goal_real\u306e\u8abf\u6574\n#histogram\nsns.distplot(data2['usd_goal_real']);","eb1d45b2":"#usd_goal_real\u306e\u8abf\u6574   \u5bfe\u6570\u3092\u3068\u308b\ndata2['usd_goal_real'] = np.log(data2['usd_goal_real'] )\nsns.distplot(data2['usd_goal_real']);\n\n","3739dab6":"#state\u306e\u8981\u7d20\u306e\u500b\u6570\ndata2['state'].value_counts()","f2bb009b":"#\u65e5\u6642\u306b\u5909\u63db,\u671f\u9593\u3092\u8ffd\u52a0\ndata2['deadline'] = pd.to_datetime(data2['deadline'], errors = 'coerce')\ndata2['launched'] = pd.to_datetime(data2['launched'], errors = 'coerce')\ndata2['period'] = (data2['deadline'] - data2['launched']).dt.days\ndata2 = data2.drop(['deadline', 'launched'], axis=1)\n#histogram\nsns.distplot(data2['period']);\ndisplay(data2.describe())","e93018b9":"#DAY2\u3067\u8ffd\u52a0\n#period\u306e\u5916\u308c\u5024\u3092\u524a\u9664\ndata2 = data2[ (data2['period'] < 1000)]\ndata2 = data2[ (data2['period'] > 1)]\n#usd_goal_real\t\u306e\u5916\u308c\u5024\u3092\u524a\u9664\ndata2 = data2[ (data2['usd_goal_real'] > 1)]\n#histogram\nsns.distplot(data2['period']);\ndisplay(data2.describe())\n\n","0dd87742":"#\u4e26\u3073\u66ff\u3048\ndata2 = data2.iloc[:,[2,4,5,0,1,3]]\ndata2.head()","c4997923":"#DAY3\u3067\u8ffd\u52a0\n#\u65b0\u305f\u306a\u8aac\u660e\u5909\u6570\ndata2['Goal\/Period'] = np.log(data2['usd_goal_real']\/data2['period'])\ndata2.head()\ndisplay(data2.describe())\nsns.distplot(data2['Goal\/Period']);","21490db5":"#\u7d50\u679c\u306e\u78ba\u8a8d\ndata2['state'].unique()","ea1cad29":"#\u6210\u529f\u3068\u5931\u6557\u306e\u307f\u62bd\u51fa\ndata2 = data2[(data2['state'] == 'successful') | (data2['state'] == 'failed')]\ndata2['state'].unique()","2e98c8c7":"#\u30c0\u30df\u30fc\ncate_dummy = pd.get_dummies(data2['main_category'])\ndata2 = pd.concat([data2.drop(['main_category'],axis=1),cate_dummy],axis=1)\ncurr_dummy = pd.get_dummies(data2['currency'])\ndata2 = pd.concat([data2.drop(['currency'],axis=1),curr_dummy],axis=1)\n#\u56fd\u306f\u901a\u8ca8\u304c\u3042\u308b\u305f\u3081\u524a\u9664\ndata2 = data2.drop(['country'], axis=1)\nprint(data2.shape)","0f4b80c6":"#\u76ee\u7684\u5909\u6570\u3068\u8aac\u660e\u5909\u6570\ny = data2['state'].map({'successful': 1, 'failed': 0})\nX = data2.drop('state', axis=1)\n#DAY2\u3067\u8ffd\u52a0 \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5  test30%\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) \ndisplay(X_train.describe())\ndisplay(X_test.describe())\ndisplay(y_train.describe())\ndisplay(y_test.describe())","5f33e273":"#DAY2\u3067\u8ffd\u52a0\n#usd_goal_real\u3068period\u3092\u6b63\u898f\u5316\n# \u6b63\u898f\u5316\nX_train[\"N_usd_goal_real\"] = (X_train[\"usd_goal_real\"] - X_train[\"usd_goal_real\"].min()) \/ (X_train[\"usd_goal_real\"].max() - X_train[\"usd_goal_real\"].min())\nX_test[\"N_usd_goal_real\"] = (X_test[\"usd_goal_real\"] - X_train[\"usd_goal_real\"].min()) \/ (X_train[\"usd_goal_real\"].max() - X_train[\"usd_goal_real\"].min())\nX_train[\"N_period\"] = (X_train[\"period\"] - X_train[\"period\"].min()) \/ (X_train[\"period\"].max() - X_train[\"period\"].min())\nX_test[\"N_period\"] = (X_test[\"period\"] - X_train[\"period\"].min()) \/ (X_train[\"period\"].max() - X_train[\"period\"].min())\nX_train = X_train.drop('period', axis=1)\nX_test = X_test.drop('period', axis=1)\nX_train = X_train.drop('usd_goal_real', axis=1)\nX_test = X_test.drop('usd_goal_real', axis=1)\n\ndisplay(X_train.describe())\ndisplay(X_test.describe())\n","17c27e0f":"#\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3067\u5b66\u7fd2\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nlr = LogisticRegression() \nlr.fit(X_train, y_train)","0b4a7711":"# \u5b66\u7fd2\u3057\u305f\u7d50\u679c\u3092\u4f7f\u3063\u3066\u8aac\u660e\u5909\u6570\u3092\u5165\u529b\u3057\u3066\u4e88\u6e2c\ny_est = lr.predict(X_test)\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n \n# \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u51fa\u529b\nplt.hist(y_est)\n\n","1dc73382":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nprint(\"accuracy_score :{:.2}  \".format( accuracy_score(y_test, y_est)))\nprint(\"precision_score :{:.2}  \".format( precision_score(y_test, y_est)))\nprint(\"recall_score :{:.2}  \".format( recall_score(y_test, y_est)))\nprint(\"f1_score:{:.2}  \".format( f1_score(y_test, y_est) ))\n\n#DAY3\u3067\u8ffd\u52a0\n#\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u8aa4\u5dee\u306e\u78ba\u8a8d\ny_estrain = lr.predict(X_train)\nprint(\"Train_accuracy_score :{:.2}  \".format( accuracy_score(y_train, y_estrain)))\nprint(\"Train_precision_score :{:.2}  \".format( precision_score(y_train, y_estrain)))\nprint(\"Train_recall_score :{:.2}  \".format( recall_score(y_train, y_estrain)))\nprint(\"Train_f1_score:{:.2}  \".format( f1_score(y_train, y_estrain)))\n \n","a9a7edb0":"#DAY2\u3067\u8ffd\u52a0\n#\u6b63\u5247\u5316\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nlr2 = LogisticRegression(C=0.001, penalty='l1')\nlr2.fit(X_train, y_train)","db80588d":"\ny_est2 = lr2.predict(X_test)\nprint(\"accuracy_score :{:.2}  \".format( accuracy_score(y_test, y_est2)))\nprint(\"precision_score :{:.2}  \".format( precision_score(y_test, y_est2)))\nprint(\"recall_score :{:.2}  \".format( recall_score(y_test, y_est2)))\nprint(\"f1_score:{:.2}  \".format( f1_score(y_test, y_est2) ))\n\n#DAY3\u3067\u8ffd\u52a0\n#\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u8aa4\u5dee\u306e\u78ba\u8a8d\ny_estrain2 = lr2.predict(X_train)\nprint(\"Train_accuracy_score :{:.2}  \".format( accuracy_score(y_train, y_estrain2)))\nprint(\"Train_precision_score :{:.2}  \".format( precision_score(y_train, y_estrain2)))\nprint(\"Train_recall_score :{:.2}  \".format( recall_score(y_train, y_estrain2)))\nprint(\"Train_f1_score:{:.2}  \".format( f1_score(y_train, y_estrain2)))\n ","cb6a0323":"#DAY2\u3067\u8ffd\u52a0\n#\u6b63\u5247\u5316\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nlr3 = LogisticRegression(C=0.001, penalty='l2')\nlr3.fit(X_train, y_train)","d563a90d":"y_est3 = lr3.predict(X_test)\nprint(\"accuracy_score :{:.2}  \".format( accuracy_score(y_test, y_est3)))\nprint(\"precision_score :{:.2}  \".format( precision_score(y_test, y_est3)))\nprint(\"recall_score :{:.2}  \".format( recall_score(y_test, y_est3)))\nprint(\"f1_score:{:.2}  \".format( f1_score(y_test, y_est3) ))\n\n#DAY3\u3067\u8ffd\u52a0\n#\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u8aa4\u5dee\u306e\u78ba\u8a8d\ny_estrain3 = lr3.predict(X_train)\nprint(\"Train_accuracy_score :{:.2}  \".format( accuracy_score(y_train, y_estrain3)))\nprint(\"Train_precision_score :{:.2}  \".format( precision_score(y_train, y_estrain3)))\nprint(\"Train_recall_score :{:.2}  \".format( recall_score(y_train, y_estrain3)))\nprint(\"Train_f1_score:{:.2}  \".format( f1_score(y_train, y_estrain3)))","f93958fb":"#DAY3\u3067\u8ffd\u52a0\n#random forest\nfrom sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier(n_estimators=30, max_depth=50, criterion=\"gini\",\n                                                 min_samples_leaf=3, min_samples_split=2, random_state=1234)\nclf.fit(X_train, y_train)\n#print(\"score=\", clf.score(X_train, y_train))\n\ny_est4 = clf.predict(X_test)\nprint(\"accuracy_score :{:.2}  \".format( accuracy_score(y_test, y_est4)))\nprint(\"precision_score :{:.2}  \".format( precision_score(y_test, y_est4)))\nprint(\"recall_score :{:.2}  \".format( recall_score(y_test, y_est4)))\nprint(\"f1_score:{:.2}  \".format( f1_score(y_test, y_est4) ))\n\n#\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u8aa4\u5dee\u306e\u78ba\u8a8d\ny_estrain4 =  clf.predict(X_train)\nprint(\"Train_accuracy_score :{:.2}  \".format( accuracy_score(y_train, y_estrain4)))\nprint(\"Train_precision_score :{:.2}  \".format( precision_score(y_train, y_estrain4)))\nprint(\"Train_recall_score :{:.2}  \".format( recall_score(y_train, y_estrain4)))\nprint(\"Train_f1_score:{:.2}  \".format( f1_score(y_train, y_estrain4)))","629a704b":"> "}}