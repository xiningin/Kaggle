{"cell_type":{"5f42e4ae":"code","eb63a16e":"code","918dc81a":"code","af4dda36":"code","8cd8288e":"code","bbd7e755":"code","a69e3ebc":"code","b3260200":"code","c1133f82":"code","74fef92e":"code","2382dc29":"code","5e5858f8":"code","edb96018":"code","09ea377f":"code","abfafaf3":"code","798e5c03":"code","00a46252":"code","2168f5a8":"code","db6cac46":"code","9e5727c6":"code","8957663e":"code","9981e051":"code","849db4e9":"code","c3751abb":"code","440ccfc3":"code","3eb61567":"code","8e944b80":"code","fb694515":"code","5570b130":"code","d0b9c201":"code","b7a80765":"code","5fa1a7ef":"code","28942ce2":"markdown","85eca1fd":"markdown","c8c0dddc":"markdown","5ff1aa6c":"markdown","2508904d":"markdown","e402face":"markdown","65f2c435":"markdown","f8511b3c":"markdown","37dc0ac4":"markdown","0339da7d":"markdown","d5f6070c":"markdown","f9f3b589":"markdown","8aace450":"markdown","270cfca3":"markdown"},"source":{"5f42e4ae":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","eb63a16e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","918dc81a":"train_data = pd.read_csv(\"\/kaggle\/input\/sf-crime\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/sf-crime\/test.csv\")","af4dda36":"train_data.head()","8cd8288e":"print (train_data.isnull().sum())\nprint (test_data.isnull().sum())","bbd7e755":"train_data.info()","a69e3ebc":"train_data = train_data.drop([\"Descript\", \"Resolution\"], axis = 1)","b3260200":"def transformDataset(dataset):\n    dataset['Dates'] = pd.to_datetime(dataset['Dates'])\n    \n    dataset['Date'] = dataset['Dates'].dt.date\n    \n    dataset['n_days'] = (dataset['Date'] - dataset['Date'].min()).apply(lambda x: x.days)\n    \n    dataset['Year'] = dataset['Dates'].dt.year\n    dataset['DayOfWeek'] = dataset['Dates'].dt.dayofweek # OVERWRITE\n    dataset['WeekOfYear'] = dataset['Dates'].dt.weekofyear\n    dataset['Month'] = dataset['Dates'].dt.month\n    \n    dataset['Hour'] = dataset['Dates'].dt.hour\n    \n    dataset['Block'] = dataset['Address'].str.contains('block', case=False)\n    dataset['Block'] = dataset['Block'].map(lambda x: 1 if  x == True else 0)\n\n    \n    dataset = dataset.drop('Dates', 1)\n    dataset = dataset.drop('Date', 1)\n    dataset = dataset.drop('Address', 1)\n    \n    dataset = pd.get_dummies(data=dataset, columns=[ 'PdDistrict'], drop_first = True)\n    return dataset\n    ","c1133f82":"train_data = transformDataset(train_data)","74fef92e":"test_data  = transformDataset(test_data)","2382dc29":"train_data.head()","5e5858f8":"sns.pairplot(train_data[[\"X\", \"Y\"]])","edb96018":"sns.boxplot(train_data[[\"Y\"]])","09ea377f":"train_data = train_data[train_data[\"Y\"] < 80]\nsns.distplot(train_data[[\"X\"]])","abfafaf3":"fig, ax = plt.subplots(figsize=(9.2, 10))\nplt.barh(train_data[\"Category\"].unique(),train_data[\"Category\"].value_counts())","798e5c03":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ntrain_data[\"Category\"] = le.fit_transform(train_data[\"Category\"])\n","00a46252":"X = train_data.drop(\"Category\",axis=1).values\ny = train_data[\"Category\"].values","2168f5a8":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.10)","db6cac46":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier()\ndtree.fit(X_train,y_train)","9e5727c6":"predictions = dtree.predict(X_test)\n","8957663e":"from sklearn.metrics import classification_report,confusion_matrix\n\ncm = confusion_matrix(y_test,predictions)\nfig, ax = plt.subplots(figsize=(20, 20))\nsns.heatmap(cm, annot=False, ax = ax); #annot=True to annotate cells\nax.set_xlabel('Predicted labels');ax.set_ylabel('True labels'); \nax.set_title('Confusion Matrix'); ","9981e051":"print (classification_report(y_test,predictions))","849db4e9":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=40,min_samples_split=100 )\nrfc.fit(X_train, y_train)","c3751abb":"rfc_pred = rfc.predict(X_test)\nprint (classification_report(y_test,rfc_pred))","440ccfc3":"n_features = X.shape[1]\nplt.barh(range(n_features),rfc.feature_importances_)\nplt.yticks(np.arange(n_features),train_data.columns[1:])","3eb61567":"keys = le.classes_\nvalues = le.transform(le.classes_)\nkeys","8e944b80":"dictionary = dict(zip(keys, values))\nprint(dictionary)","fb694515":"test_data.head()","5570b130":"test_data = test_data.drop('Id', 1)","d0b9c201":"y_pred_proba = rfc.predict_proba(test_data)\ny_pred_proba","b7a80765":"result = pd.DataFrame(y_pred_proba, columns=keys)\nresult.head()","5fa1a7ef":"result.to_csv(path_or_buf=\"rfc_predict_4.csv\",index=True, index_label = 'Id')","28942ce2":"# Training Test Split","85eca1fd":"# Prediction and Evaluation\n\n* a prediction on a new data point is made by checking wich region of the partition of the feature space the point lies in and then predicting the majority target (or the single target of pure leaves)\n","c8c0dddc":"# X and y","5ff1aa6c":"### Missing Values","2508904d":"## Target","e402face":"# The Task\n\n* Dates - timestamp of the crime incident\n* DayOfWeek - the day of the week\n* PdDistrict - name of the Police Department District\n* Resolution - how the crime incident was resolved (only in train.csv)\n* Address - the approximate street address of the crime incident\n* X - Longitude\n* Y - Latitude\n\n#### Target\n\n* Category - category of the crime incident (only in train.csv). This is the target variable you are going to predict.\n* Descript - detailed description of the crime incident (only in train.csv)","65f2c435":"# Submission","f8511b3c":"* for each prediction there is a vector of 39 probabilities","37dc0ac4":"### Feature importances","0339da7d":"### Features Selection and Engineering\n\n* Dates transform and columns creation\n* Drop not used columns\n* Create Dummies for categorical features\n* From the \u2018Dates\u2019 field, we extracted the Day, the Month, the Year, the Hour, the Minute, the Weekday, and the number of days since the first day in the data.\n* From the \u2018Address\u2019 field we extracted if the incident has taken place in a crossroad or on a building block.","d5f6070c":"# Outliers","f9f3b589":"# Model","8aace450":"### Type of data","270cfca3":"# Random Forest"}}