{"cell_type":{"ec01bc07":"code","411e7bc5":"code","d14aafa7":"code","0ca7bf8d":"code","f507cc76":"code","1941d146":"code","c822107f":"code","4154cdcf":"code","13306422":"code","a8641c7a":"code","57105d7c":"code","8ebb9174":"code","ec6e46de":"code","d3bc8123":"markdown","b041ef72":"markdown","23c2bb26":"markdown","a581eaa1":"markdown","d8283b41":"markdown","e05998cb":"markdown"},"source":{"ec01bc07":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","411e7bc5":"import matplotlib.pyplot as plt\nimport seaborn as sns \n\n%matplotlib inline","d14aafa7":"friends=pd.read_csv('\/kaggle\/input\/friends-series-dataset\/friends_episodes_v2.csv')","0ca7bf8d":"friends.head()","f507cc76":"friends.describe()","1941d146":"friends.columns","c822107f":"friends.info()\n","4154cdcf":"from nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ns=SentimentIntensityAnalyzer()","13306422":"friends['neg'] = friends['Summary'].apply(lambda x:s.polarity_scores(x)['neg'])\nfriends['neu'] = friends['Summary'].apply(lambda x:s.polarity_scores(x)['neu'])\nfriends['pos'] = friends['Summary'].apply(lambda x:s.polarity_scores(x)['pos'])\nfriends['compound'] = friends['Summary'].apply(lambda x:s.polarity_scores(x)['compound'])","a8641c7a":"friends.head()","57105d7c":"friends.loc[friends['compound'] > 0.2, 'sent']= 'negative'\nfriends.loc[(friends['compound'] <= 0.2) & (friends['compound'] >= -0.2), 'sent'] = 'neutral'  \nfriends.loc[friends['compound'] < -0.2, 'sent']= 'positive'","8ebb9174":"friends","ec6e46de":"sns.countplot(x='Stars', data=friends, hue='sent')","d3bc8123":"**Creating 3 coloumns of the polarity score of summary.**","b041ef72":"[](http:\/\/)","23c2bb26":"**Importing Sentiment Analyzer **","a581eaa1":"# **This is basically my first notebook as well as project. In this notebook, I have tried to show whether an episode was negative, positive or neutral. i have done this using Sentiment Analyzer of NLTK library. This notebook also shows count of episodes according to the rating and whter the episodes were negative, positive or neutral.**","d8283b41":"**Plotting the episodes according the stars and showing the sentiment of the episodes**","e05998cb":"**Creating another columns showing the sentiment (positive,negative or neutral) of the episode according to their polarity score.**"}}