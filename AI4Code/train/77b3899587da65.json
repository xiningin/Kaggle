{"cell_type":{"1f31298c":"code","65f44fa0":"code","9df897db":"code","dc9e7282":"code","1b1cb587":"code","a48ab0ed":"code","5a7d3c84":"code","05aa4bfa":"code","5eaf95ec":"code","07ba8d8f":"code","1371905d":"code","96cc76cc":"code","70f41168":"code","c87f6c6d":"code","9f4064ca":"code","3002da31":"code","5675a313":"code","9006ef01":"code","0c61a8e1":"code","32ac8a35":"code","42e3b92b":"code","1324fb54":"code","1dc982af":"code","49383127":"code","fc04d685":"code","71b38a01":"code","87c543fe":"code","f85ab022":"code","899f6717":"code","02cae6f2":"code","d74f8911":"code","5269bef6":"code","e0fb6fd7":"code","87aac05a":"code","6c1912e0":"code","e7b6f072":"code","fd92fe98":"code","33a9aef6":"markdown","71f23888":"markdown","07ccecce":"markdown","97320c9f":"markdown","23eb818d":"markdown","c3f6d817":"markdown","95693186":"markdown","6963a3e4":"markdown","8e2cdcfb":"markdown","6add61e3":"markdown","214d1bb2":"markdown","2e0a14f8":"markdown","9a624bcd":"markdown","1330bdfa":"markdown","edf971e2":"markdown","109fd594":"markdown","60e3dfb6":"markdown","b20a07ac":"markdown","19ccbdc3":"markdown","f08adbdb":"markdown","62914765":"markdown","8f47676d":"markdown"},"source":{"1f31298c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65f44fa0":"import pandas as pd\nimport numpy as np\n%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nimport seaborn as sns\nimport re\nimport string\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem import SnowballStemmer,WordNetLemmatizer\nfrom string import punctuation\nfrom wordcloud import WordCloud\nfrom nltk.tokenize import TweetTokenizer\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn import preprocessing, decomposition, model_selection, metrics, pipeline\nfrom sklearn.linear_model import LogisticRegressionCV\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import MultinomialNB","9df897db":"#INPUT DATA\ntrain = pd.read_csv(\"..\/input\/movie-review-sentiment-analysis-kernels-only\/train.tsv.zip\",sep=\"\\t\")\ntest = pd.read_csv(\"..\/input\/movie-review-sentiment-analysis-kernels-only\/test.tsv.zip\",sep=\"\\t\")\nsub = pd.read_csv(\"..\/input\/movie-review-sentiment-analysis-kernels-only\/sampleSubmission.csv\")","dc9e7282":"train.head()","1b1cb587":"test.head()","a48ab0ed":"#Count Of Tweets\nsns.countplot(train['Sentiment'],palette='rocket_r')\nplt.title(\"No of Tweet Sentiments\")","5a7d3c84":"fig,ax = plt.subplots(figsize=(15,5))\nplt.subplot(1,2,1)\nsns.distplot(train.groupby('SentenceId')['PhraseId'].count())\nplt.title(\"Avg Phrases Per Sentence in Train\")\nplt.subplot(1,2,2)\nsns.distplot(test.groupby('SentenceId')['PhraseId'].count())\nplt.title(\"Avg Phrases Per Sentence in Test\")\n\nprint(\"Avg Phrases Per Sentence in Train: \",round(train.groupby('SentenceId')['PhraseId'].count().mean()))\nprint(\"Avg Phrases Per Sentence in Test: \",round(test.groupby('SentenceId')['PhraseId'].count().mean()))","05aa4bfa":"fig,ax = plt.subplots(figsize=(22,5))\nfig.suptitle(\"Avg Words In Phrases\",fontsize=16)\n\nplt.subplot(1,5,1)\nsns.distplot(train[train['Sentiment']==0]['Phrase'].str.split().apply(lambda x:len(x)))\nplt.title(\"Sentiment 0\")\nprint(\"Avg Words in Phrases with Sentiment 0: \",round(train[train['Sentiment']==0]['Phrase'].str.split().apply(lambda x:len(x)).mean()))\n\nplt.subplot(1,5,2)\nsns.distplot(train[train['Sentiment']==1]['Phrase'].str.split().apply(lambda x:len(x)))\nplt.title(\"Sentiment 1\")\nprint(\"Avg Words in Phrases with Sentiment 1: \",round(train[train['Sentiment']==1]['Phrase'].str.split().apply(lambda x:len(x)).mean()))\n\nplt.subplot(1,5,3)\nsns.distplot(train[train['Sentiment']==2]['Phrase'].str.split().apply(lambda x:len(x)))\nplt.title(\"Sentiment 2\")\nprint(\"Avg Words in Phrases with Sentiment 2: \",round(train[train['Sentiment']==2]['Phrase'].str.split().apply(lambda x:len(x)).mean()))\n\nplt.subplot(1,5,4)\nsns.distplot(train[train['Sentiment']==3]['Phrase'].str.split().apply(lambda x:len(x)))\nplt.title(\"Sentiment 3\")\nprint(\"Avg Words in Phrases with Sentiment 3: \",round(train[train['Sentiment']==3]['Phrase'].str.split().apply(lambda x:len(x)).mean()))\n\nplt.subplot(1,5,5)\nsns.distplot(train[train['Sentiment']==4]['Phrase'].str.split().apply(lambda x:len(x)))\nplt.title(\"Sentiment 4\")\nprint(\"Avg Words in Phrases with Sentiment 4: \",round(train[train['Sentiment']==4]['Phrase'].str.split().apply(lambda x:len(x)).mean()))","5eaf95ec":"#Avg Characters in Phrases\nfig,ax = plt.subplots(figsize=(22,5))\nfig.suptitle(\"Avg Characters In Phrases\",fontsize=16)\n\nplt.subplot(1,5,1)\nsns.distplot(train[train['Sentiment']==0]['Phrase'].str.len())\nplt.title(\"Sentiment 0\")\nprint(\"Avg Characters in Phrases with Sentiment 0: \",round(train[train['Sentiment']==0]['Phrase'].str.len().mean()))\n\nplt.subplot(1,5,2)\nsns.distplot(train[train['Sentiment']==1]['Phrase'].str.len())\nplt.title(\"Sentiment 1\")\nprint(\"Avg Characters in Phrases with Sentiment 1: \",round(train[train['Sentiment']==1]['Phrase'].str.len().mean()))\n\nplt.subplot(1,5,3)\nsns.distplot(train[train['Sentiment']==2]['Phrase'].str.len())\nplt.title(\"Sentiment 2\")\nprint(\"Avg Characters in Phrases with Sentiment 2: \",round(train[train['Sentiment']==2]['Phrase'].str.len().mean()))\n\nplt.subplot(1,5,4)\nsns.distplot(train[train['Sentiment']==3]['Phrase'].str.len())\nplt.title(\"Sentiment 3\")\nprint(\"Avg Characters in Phrases with Sentiment 3: \",round(train[train['Sentiment']==3]['Phrase'].str.len().mean()))\n\nplt.subplot(1,5,5)\nsns.distplot(train[train['Sentiment']==4]['Phrase'].str.len())\nplt.title(\"Sentiment 4\")\nprint(\"Avg Characters in Phrases with Sentiment 4: \",round(train[train['Sentiment']==4]['Phrase'].str.len().mean()))","07ba8d8f":"#Checking datatypes,no. of elements and empty data columns\ntrain.dtypes\ntrain.shape","1371905d":"train.info() #No null entry in training dataset","96cc76cc":"test.info()","70f41168":"train.columns","c87f6c6d":"# Sentiments vs Pharses Count\nsenti_phrase=train.groupby(['Sentiment'])['PhraseId'].count().sort_values(ascending=False)\nprint(\"Phrases count wr.t various Sentiments:\\n \",senti_phrase)","9f4064ca":"# Sentiment label-vs-Sentences\nsenti_sentence=train.groupby(['Sentiment'])['SentenceId'].nunique().sort_values(ascending=False)\nsenti_sentence","3002da31":"# Plotting relationship between Sentiment labels vs Sentences and Pharses used\nsns.set_style(\"darkgrid\")\nsns.set_context(\"talk\")\nplt.figure(figsize=(15,10))\n\nx=senti_phrase.index\ny=senti_phrase.values\n\nplt.subplot(2,1,1)\nplt.bar(x,y,color='c')\nplt.title('Sentiment vs Phrases Used')\n\nx1=senti_sentence.index\ny1=senti_sentence.values\n\nplt.subplot(2,1,2)\nplt.bar(x1,y1,color='y')\nplt.title('Sentiment vs Sentences')","5675a313":"from wordcloud import WordCloud, STOPWORDS","9006ef01":"corpus = ' '.join(train['Phrase'])\ncorpus = corpus.replace('.', '. ')\nwordcloud= WordCloud(stopwords=STOPWORDS,background_color='white', width=2400,height=2000,).generate(corpus)\nplt.figure(figsize=(15,20))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","0c61a8e1":"#WordCloud\nfig,ax = plt.subplots(figsize=(20,40))\nplt.axis('off')\n\nplt.subplot(5,1,1)\ntext = \" \".join(train[train['Sentiment']==0]['Phrase'])\ntext = text.replace('.', '. ')\nwordcloud = WordCloud(stopwords=STOPWORDS, max_font_size = None,background_color='white',width=1000,height=1000).generate(text)\nplt.title(\"WordCloud for Sentiment 0\")\nplt.axis('off')\nplt.imshow(wordcloud)\n\nplt.subplot(5,1,2)\ntext = \" \".join(train[train['Sentiment']==1]['Phrase'])\ntext = text.replace('.', '. ')\nwordcloud = WordCloud(stopwords=STOPWORDS, max_font_size = None,background_color='white',width=1000,height=1000).generate(text)\nplt.title(\"WordCloud for Sentiment 1\")\nplt.axis('off')\nplt.imshow(wordcloud)\n\nplt.subplot(5,1,3)\ntext = \" \".join(train[train['Sentiment']==2]['Phrase'])\ntext = text.replace('.', '. ')\nwordcloud = WordCloud(stopwords=STOPWORDS, max_font_size = None,background_color='white',width=1000,height=1000).generate(text)\nplt.title(\"WordCloud for Sentiment 2\")\nplt.axis('off')\nplt.imshow(wordcloud)\n\nplt.subplot(5,1,4)\ntext = \" \".join(train[train['Sentiment']==3]['Phrase'])\ntext = text.replace('.', '. ')\nwordcloud = WordCloud(stopwords=STOPWORDS, max_font_size = None,background_color='white',width=1000,height=1000).generate(text)\nplt.title(\"WordCloud for Sentiment 3\")\nplt.axis('off')\nplt.imshow(wordcloud)\n\nplt.subplot(5,1,5)\ntext = \" \".join(train[train['Sentiment']==4]['Phrase'])\ntext = text.replace('.', '. ')\nwordcloud = WordCloud(stopwords=STOPWORDS, max_font_size = None,background_color='white',width=1000,height=1000).generate(text)\nplt.title(\"WordCloud for Sentiment 4\")\nplt.axis('off')\nplt.imshow(wordcloud)","32ac8a35":"from sklearn.feature_extraction.stop_words import ENGLISH_STOP_WORDS\nStopwords = list(ENGLISH_STOP_WORDS)\nStopwords.extend(['movie','movies','film','nt','rrb','lrb',\n                      'make','work','like','story','time','little',])","42e3b92b":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom nltk.tokenize import TweetTokenizer\n\ntokenizer = TweetTokenizer()\n\nvectorizer = TfidfVectorizer(ngram_range=(1, 3), tokenizer=tokenizer.tokenize,  stop_words=Stopwords)\nfull_text = list(train['Phrase'].values) + list(test['Phrase'].values)\n#full_text\n\nvectorizer.fit(full_text)\ntrain_vectorized = vectorizer.transform(train['Phrase'])\ntest_vectorized = vectorizer.transform(test['Phrase'])","1324fb54":"np.shape(train_vectorized)","1dc982af":"X = train_vectorized\ny = train.Sentiment.values\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import classification_report\nimport time\n\n# create a stratified split of the data and a 80\/20 split.\nxtrain, xvalid, ytrain, yvalid = train_test_split(X, y, stratify=y, test_size=0.2, shuffle=True)","49383127":"ml_default_performance_metrics_df = pd.DataFrame(columns=['accuracy','F1-score','training-time'], index=['LinearSVC', 'BernoulliNB', 'MultinomialNB'])","fc04d685":"from sklearn.svm import LinearSVC\n\nstart_time = time.time()\n    \nprint()\nprint(\"Evaluation of LinearSVC, multi_class='ovr', with train-test split:\")\n\nclf_LinearSVC = LinearSVC(multi_class='ovr')\nclf_LinearSVC.fit(xtrain, ytrain)\npredictions = clf_LinearSVC.predict(xvalid)\nprint(classification_report(yvalid, predictions))\n\nprint()\nprint(\"accuracy_score\", accuracy_score(yvalid, predictions))\n\nprint()\nprint(\"Weighted Averaged validation metrics\")\nprint(\"precision_score\", precision_score(yvalid, predictions, average='weighted'))\nprint(\"recall_score\", recall_score(yvalid, predictions, average='weighted'))\nprint(\"f1_score\", f1_score(yvalid, predictions, average='weighted'))\n\n\nml_default_performance_metrics_df.loc['LinearSVC']['training-time'] = time.time() - start_time\nml_default_performance_metrics_df.loc['LinearSVC']['accuracy'] = accuracy_score(yvalid, predictions)\nml_default_performance_metrics_df.loc['LinearSVC']['F1-score'] = f1_score(yvalid, predictions, average='weighted')\n\nprint()\nfrom sklearn.metrics import confusion_matrix\nimport scikitplot as skplt\nsns.set(rc={'figure.figsize':(8,8)})\nskplt.metrics.plot_confusion_matrix(yvalid, predictions)\n\nprint()\nprint(\"elapsed time in seconds: \", time.time() - start_time)\nprint()","71b38a01":"from sklearn.naive_bayes import BernoulliNB\n\nstart_time = time.time()\n    \nprint()\nprint(\"Evaluation of BernoulliNB with train-test split:\")\n\nclf_BernoulliNB = BernoulliNB()\nclf_BernoulliNB.fit(xtrain, ytrain)\npredictions = clf_BernoulliNB.predict(xvalid)\nprint(classification_report(yvalid, predictions))\n\nprint()\nprint(\"accuracy_score\", accuracy_score(yvalid, predictions))\n\nprint()\nprint(\"Weighted Averaged validation metrics\")\nprint(\"precision_score\", precision_score(yvalid, predictions, average='weighted'))\nprint(\"recall_score\", recall_score(yvalid, predictions, average='weighted'))\nprint(\"f1_score\", f1_score(yvalid, predictions, average='weighted'))\n\n\nml_default_performance_metrics_df.loc['BernoulliNB']['training-time'] = time.time() - start_time\nml_default_performance_metrics_df.loc['BernoulliNB']['accuracy'] = accuracy_score(yvalid, predictions)\nml_default_performance_metrics_df.loc['BernoulliNB']['F1-score'] = f1_score(yvalid, predictions, average='weighted')\n\nprint()\nfrom sklearn.metrics import confusion_matrix\nimport scikitplot as skplt\nsns.set(rc={'figure.figsize':(8,8)})\nskplt.metrics.plot_confusion_matrix(yvalid, predictions)\n\nprint()\nprint(\"elapsed time in seconds: \", time.time() - start_time)\nprint()","87c543fe":"from sklearn.naive_bayes import MultinomialNB\n\nstart_time = time.time()\n    \nprint()\nprint(\"Evaluation of MultinomialNB with train-test split:\")\n\nclf_MultinomialNB = MultinomialNB()\nclf_MultinomialNB.fit(xtrain, ytrain)\npredictions = clf_MultinomialNB.predict(xvalid)\nprint(classification_report(yvalid, predictions))\n\nprint()\nprint(\"accuracy_score\", accuracy_score(yvalid, predictions))\n\nprint()\nprint(\"Weighted Averaged validation metrics\")\nprint(\"precision_score\", precision_score(yvalid, predictions, average='weighted'))\nprint(\"recall_score\", recall_score(yvalid, predictions, average='weighted'))\nprint(\"f1_score\", f1_score(yvalid, predictions, average='weighted'))\n\n\nml_default_performance_metrics_df.loc['MultinomialNB']['training-time'] = time.time() - start_time\nml_default_performance_metrics_df.loc['MultinomialNB']['accuracy'] = accuracy_score(yvalid, predictions)\nml_default_performance_metrics_df.loc['MultinomialNB']['F1-score'] = f1_score(yvalid, predictions, average='weighted')\n\nprint()\nfrom sklearn.metrics import confusion_matrix\nimport scikitplot as skplt\nsns.set(rc={'figure.figsize':(8,8)})\nskplt.metrics.plot_confusion_matrix(yvalid, predictions)\n\nprint()\nprint(\"elapsed time in seconds: \", time.time() - start_time)\nprint()","f85ab022":"ml_default_performance_metrics_df.sort_values(by=\"accuracy\", ascending=False)","899f6717":"sns.set(rc={'figure.figsize':(15.27,6.27)})\nml_default_performance_metrics_df.sort_values(by=\"accuracy\", ascending=False).accuracy.plot(kind=\"bar\")","02cae6f2":"ml_default_performance_metrics_df.sort_values(by=\"F1-score\", ascending=True)","d74f8911":"sns.set(rc={'figure.figsize':(15.27,6.27)})\nml_default_performance_metrics_df.sort_values(by=\"F1-score\", ascending=False)[\"F1-score\"].plot(kind=\"bar\")","5269bef6":"ml_default_performance_metrics_df.sort_values(by=\"training-time\", ascending=True)","e0fb6fd7":"sns.set(rc={'figure.figsize':(15.27,6.27)})\nml_default_performance_metrics_df.sort_values(by=\"training-time\", ascending=True)[\"training-time\"].plot(kind=\"bar\")","87aac05a":"features = vectorizer.fit_transform(train.Phrase).toarray()\nlabels = train.Sentiment\nfeatures.shape","6c1912e0":"features_test = vectorizer.transform(test.Phrase)\nfeatures_test.shape","e7b6f072":"model = clf_LinearSVC\nmodel.fit(features, labels)\npred = model.predict(features_test)\nsubmission = test\nsubmission['sentiment']=pred\nsubmission.drop(['SentenceId', 'Phrase'], axis=1, inplace=True)\n","fd92fe98":"submission","33a9aef6":"# Import Packages","71f23888":"# Multiclass Sentiment Analysis","07ccecce":"**Performa berdasarkan F1-Score**","97320c9f":"**TF-IDF and uncleaned dataset**","23eb818d":"**Jumlah Ulasan**","c3f6d817":"**LINEAR SVC**","95693186":"**Rataan Char (Huruf) dalam Kata\/Frasa**","6963a3e4":"This means the movies with Neutral Sentiment types(i.e Sentiment label-2) had highest number pf phrase sentences and Sentiment label-0 i.e Negative sentiments had minimum number of sentences used.","8e2cdcfb":"# Data Analysis and Visualization","6add61e3":"**Dimensi data train setelah dilakukan TF-IDF Vectorizer**","214d1bb2":"> **Rara-rata Kata\/Frasa per Kalimat**","2e0a14f8":"**MultinomialNB**","9a624bcd":"# Preparing Data","1330bdfa":"Label sentiment\n\n0 - negative\n\n1 - somewhat negative\n\n2 - neutral\n\n3 - somewhat positive\n\n4 - positive","edf971e2":"# Submission","109fd594":"#  Exploratory Data","60e3dfb6":"**Performa berdasarkan Waktu Latih**","b20a07ac":"**Top words used in whole phrases records**\nMost frequently used Words in Phrases","19ccbdc3":"**Jumlah Kata dalam Kalimat**","f08adbdb":"**Performa berdasarkan Akurasi**","62914765":"**BernoulliNB**","8f47676d":"# TF-IDF Implementation"}}