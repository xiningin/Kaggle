{"cell_type":{"05bb6bd6":"code","53a58209":"code","ea477efa":"code","e2ead6a7":"code","ef9a9341":"code","279e5d77":"code","d8ae3176":"code","842feba6":"code","47cadf19":"code","a17b2b7b":"code","8c842399":"code","ac571d16":"code","95f26e71":"code","7de4725a":"code","8ca31872":"code","2e428a1c":"code","6192c178":"code","40f27ae4":"code","8b62367f":"code","7c1dc48e":"code","1dee7709":"code","4ce6e19c":"code","e845b4ea":"code","73dea945":"code","4ffc8ddf":"code","9715cd5d":"markdown","6e456c5f":"markdown","ad7f434b":"markdown","894e6ba9":"markdown","2453cbcc":"markdown","d07adbb6":"markdown","2690a28b":"markdown","d2f4d0ae":"markdown","baa8a229":"markdown","656c4eae":"markdown","a48b1da6":"markdown","4693cf68":"markdown","a5d13e49":"markdown","255813aa":"markdown","a14c1abd":"markdown","5031a2cc":"markdown"},"source":{"05bb6bd6":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud, STOPWORDS\nfrom PIL import Image\n\nfrom scipy.stats import shapiro\nfrom scipy.stats import skew, norm\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        pass\n        #print(os.path.join(dirname, filename))\n\n","53a58209":"# Define a function to plot word cloud\ndef plot_cloud(wordcloud):\n    # Set figure size\n    plt.figure(figsize=(15, 12))\n    # Display image\n    plt.imshow(wordcloud) \n    # No axis details\n    plt.axis(\"off\");\n    \n\n# normality test\ndef shapiro_wilk(data):\n    columns = df.columns\n    int_columns = []\n    normality_column_name = []\n    normality_statistic = []\n    normality_result = []\n    for column_type in columns:\n        if df[column_type].dtypes == \"int64\" or df[column_type].dtypes == \"float64\":\n            int_columns.append(column_type)\n    for column in int_columns:\n        stat, p = shapiro(data[column])\n        statistic = ('Statistics=%.5f, p=%.5f' % (stat, p))\n        #print('Statistics=%.3f, p=%.3f' % (stat, p))\n        # interpret\n        alpha = 0.05\n        if p > alpha:\n            normality_column_name.append(column)\n            normality_statistic.append(statistic)\n            normality_result.append(\"Sample looks Gaussian\")\n                    \n        else:\n            normality_column_name.append(column)\n            normality_statistic.append(statistic)\n            normality_result.append(\"Sample does not look Gaussian\")\n        \n    normality_column_name = pd.DataFrame(normality_column_name, columns =['Column Name'])\n    normality_statistic = pd.DataFrame(normality_statistic, columns =['Statistic']) \n    normality_result = pd.DataFrame(normality_result, columns =['Result']) \n\n\n    result = pd.concat([normality_column_name, normality_statistic, normality_result], axis=1, sort=False)\n    \n    return result","ea477efa":"# import data\ndf = pd.read_csv(\"\/kaggle\/input\/bristol-airbnb-data\/listings (2).csv\")","e2ead6a7":"\ndf.head()","ef9a9341":"\ndf.drop([\"id\", \"host_id\",\"neighbourhood_group\", \"latitude\", \"longitude\", ], axis = 1, inplace = True)","279e5d77":"df.columns","d8ae3176":"df.groupby(\"neighbourhood\").mean()[\"price\"]","842feba6":"# neighborhood_and_room_type effect on price\nneighborhood_and_room_type = df.groupby([\"neighbourhood\",\"room_type\"], sort = True)[\"price\"].mean()\nneighborhood_and_room_type = pd.DataFrame(neighborhood_and_room_type)","47cadf19":"neighborhood_and_room_type.sort_values(by='price', ascending=False).head(15)\n    ","a17b2b7b":"neighborhood_and_room_type.sort_values(by='price', ascending=False).tail(15)\n","8c842399":"pd.set_option('display.max_row', None)\nneighborhood_and_room_type","ac571d16":"pd.reset_option(\"display.max_rows\",)","95f26e71":"neighborhood_and_room_type","7de4725a":"room_type_and_minimum_nights = df.groupby([\"room_type\"])[\"minimum_nights\"].mean().astype(int)\nroom_type_and_minimum_nights\n","8ca31872":"room_type_and_availability_365 = df.groupby([\"room_type\"])[\"availability_365\"].mean().astype(int)\nroom_type_and_availability_365","2e428a1c":"top_rated_hosts = df.groupby([\"host_name\"], sort = True)[\"number_of_reviews\"].mean().sort_values()\ntop_rated_hosts = pd.DataFrame(top_rated_hosts).reset_index()\ntop_rated_hosts","6192c178":"\n# get a host name based on how many times it's been reviews\nhost_name = []\nfor i, host in enumerate(top_rated_hosts[\"host_name\"]):\n    for j in range(top_rated_hosts[\"number_of_reviews\"][i].astype(int)):\n        name = host   \n        host_name.append(name)\n\nhost_name = \"  \".join(map(str, host_name))\n\n# Import image to np.array\nmask = np.array(Image.open('..\/input\/masks\/user.png'))\nwordcloud = WordCloud(width = 1000, height = 750, random_state=42, background_color='black', \n                      colormap='Set2', collocations=False, stopwords = STOPWORDS, mask=mask).generate(host_name)\n\n# Plot\nplot_cloud(wordcloud)","40f27ae4":"top_rated_hostel_description = df.groupby([\"name\"], sort = True)[\"number_of_reviews\"].mean().sort_values()\ntop_rated_hostel_description = pd.DataFrame(top_rated_hostel_description).reset_index()\ntop_rated_hostel_description","8b62367f":"\n# get a hostel description based on how many times it's been reviews\nhostel_description = []\nfor i, hostel in enumerate(top_rated_hostel_description[\"name\"]):\n    for j in range(top_rated_hostel_description[\"number_of_reviews\"][i].astype(int)):\n        hostel_descrip = hostel   \n        hostel_description.append(hostel_descrip)\n\nhostel_description = \"  \".join(map(str, hostel_description))\n\n# Import image to np.array\nmask = np.array(Image.open('..\/input\/masks\/star.png'))\nwordcloud = WordCloud(width = 1000, height = 750, random_state=42, background_color='black', \n                      colormap='Set2', collocations=False, stopwords = STOPWORDS, mask=mask).generate(hostel_description)\n\n# Plot\nplot_cloud(wordcloud)","7c1dc48e":"plt.figure(figsize=(10,7))\nsns.histplot(data=df, x=\"price\", kde=True)\nplt.title(\"Price Histogram Graph\")\nplt.show()","1dee7709":"plt.figure(figsize=(10,7))\nsns.histplot(data=df, x=\"reviews_per_month\", kde=True)\nplt.title(\"reviews per month Histogram Graph\")\nplt.show()","4ce6e19c":"shapiro_wilk(df)","e845b4ea":"df_normalize = df.copy()","73dea945":"df_normalize[\"price\"] = np.log1p(df_normalize[\"price\"])\n","4ffc8ddf":"sns.set_style(\"white\")\nsns.set_color_codes(palette='deep')\nf, ax = plt.subplots(figsize=(8, 7))\n#Check the new distribution \nsns.distplot(df_normalize['price'] , fit=norm, color=\"b\");\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(df_normalize['price'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nax.xaxis.grid(False)\nax.set(ylabel=\"Frequency\")\nax.set(xlabel=\"SalePrice\")\nax.set(title=\"SalePrice distribution\")\nsns.despine(trim=True, left=True)\n\nplt.show()\n\n# Lavanya Shukla","9715cd5d":"How many nights can you stay at least according to the room types?","6e456c5f":"**Normalize the data**","ad7f434b":"## Normality Test","894e6ba9":"Top rated host name and their graph","2453cbcc":"I wonder your thoughts about the notebook","d07adbb6":"## Exploratory Data Analysis","2690a28b":"## EDA","d2f4d0ae":"## Functions","baa8a229":"How many days of the year are available according to room types","656c4eae":"## Graphs","a48b1da6":"**Histogram graph**","4693cf68":"drop unnecessary columns","a5d13e49":"**Wordcloud**","255813aa":"Average price by neighborhood","a14c1abd":"quick rewiew at data","5031a2cc":"Top rated hostel description and their graph"}}