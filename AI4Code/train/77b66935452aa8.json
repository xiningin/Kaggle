{"cell_type":{"ddb1627b":"code","5816a691":"code","71ddc6ae":"code","5bb92743":"code","536d8353":"code","2a485b6e":"code","3cbe28cb":"code","deaae8cf":"code","48e3a504":"code","ddbf5d87":"code","fa3951e5":"code","bbd1fcfc":"code","b61a8c77":"code","2deb3558":"code","1ca55eb4":"code","5b1afde3":"code","e0afd882":"code","28e6f1d9":"code","121518a8":"markdown","1abb661f":"markdown","c778a9a2":"markdown"},"source":{"ddb1627b":"import sys\n!cp ..\/input\/rapids\/rapids.0.16.0 \/opt\/conda\/envs\/rapids.tar.gz\n!cd \/opt\/conda\/envs\/ && tar -xzvf rapids.tar.gz > \/dev\/null\nsys.path=[\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\/site-packages\"]+sys.path\nsys.path=[\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\"]+sys.path\nsys.path=[\"\/opt\/conda\/envs\/rapids\/lib\"]+sys.path \n!cp \/opt\/conda\/envs\/rapids\/lib\/libxgboost.so \/opt\/conda\/lib\/","5816a691":"import warnings; warnings.filterwarnings('ignore')\nimport pandas as pd,numpy as np,tensorflow as tf\nimport os,pylab as pl,cudf,cuml\nfrom sklearn.metrics import accuracy_score,hamming_loss\nfrom sklearn.metrics import classification_report\nfrom sklearn.ensemble import RandomForestClassifier as sRFC\nfrom cuml.ensemble import RandomForestClassifier as cRFC\nfrom sklearn import svm\nfrom sklearn.neighbors import KNeighborsClassifier as sKNC\nfrom cuml.neighbors import KNeighborsClassifier as cKNC\nfrom sklearn.neural_network import MLPClassifier\nimport tensorflow.keras.preprocessing.image as tkimg\nfpath='..\/input\/tomato-cultivars\/'","71ddc6ae":"def images2array(files_path,img_size,grayscale=False):\n    files_list=sorted(os.listdir(files_path))\n    n,img_array=len(files_list),[]\n    for i in range(n):\n        if i%round(.1*n)==0:\n            print('=>',end='',flush=True)\n        img_path=files_path+files_list[i]\n        if grayscale:\n            img=tkimg.load_img(\n                img_path,grayscale=grayscale)\n        else:\n            img=tkimg.load_img(\n                img_path,target_size=(img_size,img_size))\n        img=tkimg.img_to_array(img)\n        img=np.expand_dims(img,axis=0)\/255\n        img_array.append(img)\n    return np.array(np.vstack(img_array),dtype='float32')","5bb92743":"names=['Kumato','Beefsteak','Tigerella',\n       'Roma','Japanese Black Trifele',\n       'Yellow Pear','Sun Gold','Green Zebra',\n       'Cherokee Purple','Oxheart','Blue Berries',\n       'San Marzano','Banana Legs',\n       'German Orange Strawberry','Supersweet 100']\nflist=sorted(os.listdir(fpath))\nlabels=np.array(\n    [int(el[:2]) for el in flist],dtype='int32')-1\nimg_size=160\nimages=images2array(fpath,img_size)\nN=labels.shape[0]; n=int(.2*N)\nshuffle_ids=np.arange(N)\nnp.random.RandomState(12).shuffle(shuffle_ids)\nimages,labels=images[shuffle_ids],labels[shuffle_ids]\nx_test,x_train=images[:n],images[n:]\ny_test,y_train=labels[:n],labels[n:]","536d8353":"pd.DataFrame([[x_train.shape,x_test.shape],\n              [x_train.dtype,x_test.dtype],\n              [y_train.shape,y_test.shape],\n              [y_train.dtype,y_test.dtype]],               \n             columns=['train','test'])","2a485b6e":"k=np.random.randint(40)\nprint('Label: ',y_test[k],\n      names[y_test[k]])\npl.figure(figsize=(3,3))\npl.imshow((x_test[k]));","3cbe28cb":"x_train=x_train.reshape(-1,img_size**2*3)\ny_train=y_train.reshape(-1,1)\nx_test=x_test.reshape(-1,img_size**2*3)\ny_test=y_test.reshape(-1,1)","deaae8cf":"def classifier_fit_score(classifier,x_train,x_test,y_train,y_test):\n    classifier.fit(x_train,y_train)     \n    y_clf_train=classifier.predict(x_train)\n    y_clf_test=classifier.predict(x_test)        \n    acc_clf_train=round(accuracy_score(y_train,y_clf_train),4)\n    acc_clf_test=round(accuracy_score(y_test,y_clf_test),4) \n    loss_clf_train=round(hamming_loss(y_train,y_clf_train),4)\n    loss_clf_test=round(hamming_loss(y_test,y_clf_test),4)  \n    return [y_clf_train,y_clf_test,acc_clf_train,acc_clf_test,\n            loss_clf_train,loss_clf_test]","48e3a504":"[y_srfc_train,y_srfc_test,acc_srfc_train,\n acc_srfc_test,loss_srfc_train,loss_srfc_test]=\\\nclassifier_fit_score(sRFC(),x_train,x_test,y_train,y_test)\nprint(classification_report(y_test,y_srfc_test))","ddbf5d87":"#[y_crfc_train,y_crfc_test,acc_crfc_train,\n# acc_crfc_test,loss_crfc_train,loss_crfc_test]=\\\n#classifier_fit_score(cRFC(),x_train,x_test,y_train,y_test)\n#print(classification_report(y_test,y_crfc_test))","fa3951e5":"[y_lsvc_train,y_lsvc_test,acc_lsvc_train,\n acc_lsvc_test,loss_lsvc_train,loss_lsvc_test]=\\\nclassifier_fit_score(svm.LinearSVC(),\n                     x_train,x_test,y_train,y_test)\nprint(classification_report(y_test,y_lsvc_test))","bbd1fcfc":"pl.figure(figsize=(10,5)); t=50; x=range(t)\npl.scatter(x,y_test[:t],marker='*',s=400,\n           color='#ff355e',label='Real data')\npl.scatter(x,y_srfc_test[:t],marker='v',\n           s=100,color='darkorange',label='Random Forest')\npl.scatter(x,y_lsvc_test[:t],marker='s',s=50,\n           color='darkred',label='SVM LinearSVC')\npl.xlabel('Observations'); pl.ylabel('Targets') \npl.title('Classifiers. Test Results')\npl.legend(loc=2,fontsize=10); pl.show()","b61a8c77":"[y_sknc_train,y_sknc_test,acc_sknc_train,\n acc_sknc_test,loss_sknc_train,loss_sknc_test]=\\\nclassifier_fit_score(sKNC(),x_train,x_test,y_train,y_test)\nprint(classification_report(y_test,y_sknc_test))","2deb3558":"[y_cknc_train,y_cknc_test,acc_cknc_train,\n acc_cknc_test,loss_cknc_train,loss_cknc_test]=\\\nclassifier_fit_score(cKNC(),x_train,x_test,y_train,y_test)\nprint(classification_report(y_test,y_cknc_test))","1ca55eb4":"mlpc=MLPClassifier(hidden_layer_sizes=(512,),\n                   max_iter=60,solver='sgd',\n                   verbose=1,random_state=1,\n                   learning_rate_init=.005)\n[y_mlpc_train,y_mlpc_test,acc_mlpc_train,\n acc_mlpc_test,loss_mlpc_train,loss_mlpc_test]=\\\nclassifier_fit_score(mlpc,x_train,x_test,y_train,y_test)","5b1afde3":"print(classification_report(y_test,y_mlpc_test))","e0afd882":"pl.figure(figsize=(10,5)); t=50; x=range(t)\npl.scatter(x,y_test[:t],marker='*',s=400,\n           color='#ff355e',label='Real data')\npl.scatter(x,y_sknc_test[:t],marker='v',\n           s=100,color='darkorange',label='KNeighbors')\npl.scatter(x,y_mlpc_test[:t],marker='s',s=50,\n           color='darkred',label='MLP')\npl.xlabel('Observations'); pl.ylabel('Targets') \npl.title('Classifiers. Test Results')\npl.legend(loc=2,fontsize=10); pl.show()","28e6f1d9":"acc_train=[acc_srfc_train,acc_lsvc_train,\n           acc_sknc_train,acc_mlpc_train]\nacc_test=[acc_srfc_test,acc_lsvc_test,\n          acc_sknc_test,acc_mlpc_test]\nloss_train=[loss_srfc_train,loss_lsvc_train,\n            loss_sknc_train,loss_mlpc_train]\nloss_test=[loss_srfc_test,loss_lsvc_test,\n           loss_sknc_test,loss_mlpc_test]\ncols=['Random Forest','SVM LinearSVC',\n      'KNeighbors','MLP']\npd.DataFrame([acc_train,acc_test,\n              loss_train,loss_test],\n            index=['accuracy train','accuracy test',\n                   'loss train','loss test'],\n            columns=cols)","121518a8":"## Sklearn Classifiers","1abb661f":"## Code Modules & Functions","c778a9a2":"## Data"}}