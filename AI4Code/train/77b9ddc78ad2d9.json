{"cell_type":{"d78e8c40":"code","1b1f7221":"code","61371528":"code","3beff749":"code","40670444":"code","e4d038cf":"code","2bfd4d94":"code","26ac8c51":"code","95f2b7ad":"code","70e98a65":"code","bd4b9121":"markdown"},"source":{"d78e8c40":"# The input files are Sheet_1 & Sheet_2.\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\/deepnlp\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","1b1f7221":"df1 = pd.read_csv('..\/input\/deepnlp\/Sheet_1.csv', encoding='latin-1')\ndf1 = df1.drop([\"Unnamed: 3\", \"Unnamed: 4\", \"Unnamed: 5\", \"Unnamed: 6\",\"Unnamed: 7\"], axis = 1)\ndf1 = df1.rename(columns={\"v1\":\"class\", \"v2\":\"Responses\"})\n\ndf1.head()","61371528":"df2 = pd.read_csv('..\/input\/deepnlp\/Sheet_1.csv', encoding='latin-1')\ndf2 = df2.drop([\"Unnamed: 3\", \"Unnamed: 4\", \"Unnamed: 5\", \"Unnamed: 6\",\"Unnamed: 7\"], axis = 1)\ndf2 = df2.rename(columns={\"v1\":\"class\", \"v2\":\"Responses\"})\n\ndf2.head()","3beff749":"print (df1[\"class\"].value_counts())\nprint (df2[\"class\"].value_counts())","40670444":"import nltk\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nimport pandas as pd\nfrom sklearn.metrics import accuracy_score\nimport pickle\nfrom sklearn.model_selection import train_test_split\n\nstopWords = set(nltk.corpus.stopwords.words('english'))\n\nvect = TfidfVectorizer(sublinear_tf=True, encoding='utf-8',\n                                 decode_error='ignore',stop_words=stopWords)","e4d038cf":"output_dict = {\n    0:\"not_flagged\",\n    1:\"flagged\"}","2bfd4d94":"combined_df  = pd.concat([df1,df2])\ncombined_df.head()","26ac8c51":"X_train, X_test, y_train, y_test = train_test_split(combined_df[\"response_text\"], combined_df[\"class\"], test_size=0.33, random_state=42)","95f2b7ad":"xTrain = X_train\nyTrain = y_train\n\ntfidf = vect.fit(xTrain.values.astype('U'))\nxTrainvect = vect.fit_transform(xTrain)\nyTrainvect = yTrain\n\nxTestvect = vect.transform(X_test)\nyTestvect = y_test\n\nmodel = MultinomialNB(alpha=0.01, fit_prior=True)\nmodel.fit(xTrainvect, yTrainvect)\n\nypred = model.predict(xTestvect)\nscore = accuracy_score(yTestvect, ypred)\nprint (\"Accuracy: \",score)","70e98a65":"test = \"i cant think of one really...i think i may hav \"\nnew_pred = model.predict(vect.transform([test]))\nprint(new_pred)","bd4b9121":" **Classify text using SKlearn**"}}