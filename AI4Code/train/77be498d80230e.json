{"cell_type":{"be018fa3":"code","d452591b":"code","b96d8887":"code","94e6be76":"code","942fcdd3":"code","c78cefb6":"code","00b2ed67":"code","4a422f62":"code","ef071a5d":"code","815c8deb":"code","d0462c52":"code","8524ecd4":"code","0642ca1c":"code","490813ba":"code","ce98e451":"code","2da409ae":"code","bf987c56":"code","6dba3eae":"code","fdaf3e5a":"code","8c32deee":"code","54678104":"code","602ebbf4":"code","0cf94b52":"code","5de6c737":"code","82e779e9":"code","8e852976":"code","33c5ba1d":"code","eb71c46f":"code","c83c92fc":"markdown","e3f4adac":"markdown","7d87352d":"markdown","72a3e212":"markdown","c1f4016e":"markdown","135b017a":"markdown","bbabbb2e":"markdown","764e8371":"markdown"},"source":{"be018fa3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d452591b":"# keras module for building LSTM \nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Embedding, LSTM, Dense, Dropout\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.callbacks import EarlyStopping\nfrom keras.models import Sequential\nimport keras.utils as ku \n\n# set seeds for reproducability\nimport string, os \n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b96d8887":"# Checking out one dataset\n\ntesting_ar = pd.read_csv('..\/input\/nyt-comments\/ArticlesApril2017.csv')\ntesting_ar.head()","94e6be76":"# Checking out the comments\ntesting_cm = pd.read_csv('..\/input\/nyt-comments\/CommentsApril2017.csv')\ntesting_cm.head()","942fcdd3":"# File path for first file:\n# ..\/input\/nyt-comments\/ArticlesApril2017.csv\n# Some of the headlines have - Unknown as a null value\n# We will extract all headlines\nworking_dir = '..\/input\/nyt-comments\/'\nheadlines = []\n\nfor filename in os.listdir(working_dir):\n    if 'Articles' in filename:\n        article_df = pd.read_csv(working_dir + filename)\n        headlines.extend(list(article_df.headline.values))\n\nheadlines = [x for x in headlines if x!=\"Unknown\"]","c78cefb6":"len(headlines)","00b2ed67":"sample = headlines[:10]\nsample","4a422f62":"# Basic iteration over each headline\n[x for x in sample]","ef071a5d":"# Nested comprehesion for iteration over each element\n[y for x in sample[0] for y in x]","815c8deb":"def cleaning(data):\n    cleaned = \"\".join(x for x in data if x not in string.punctuation).lower()\n    cleaned = cleaned.encode(\"utf8\").decode(\"ascii\", \"ignore\")\n    return cleaned\n\ncleaned_l = [cleaning(x) for x in headlines]\ncleaned_l[:10]","d0462c52":"sample = cleaned_l[:2]\nsample","8524ecd4":"tk = Tokenizer()\ntk.fit_on_texts(sample)\ntk.word_index","0642ca1c":"tk.texts_to_sequences([sample[0]])","490813ba":"tk.word_index","ce98e451":"len(tk.word_index)","2da409ae":"sample = cleaned_l[:5]\nsample","bf987c56":"for line in sample:\n    print(line[0])","6dba3eae":"tk = Tokenizer()\n\ndef text_tokens(data):\n    tk.fit_on_texts(data)\n    # Our vocabulary size will be +1 due to incorporation of padding, which is treated like another word\n    total_vocab = len(tk.word_index)+1\n    input_sequences=[]\n    \n    for record in data:\n        # This will give a 2D array, the first element will be the token list\n        token_list = tk.texts_to_sequences([record])[0]\n        for i in range(1, len(token_list)):\n            # Append first two elements, then 3, then 4, then 5\n            n_gram = token_list[:i+1]\n            input_sequences.append(n_gram)\n    return input_sequences, total_vocab","fdaf3e5a":"inp_seq, vocab_size = text_tokens(cleaned_l)\ninp_seq[:10]","8c32deee":"s = pd.Series(inp_seq)","54678104":"max_length = np.max(s.apply(lambda x: len(x)))\nmax_length","602ebbf4":"def padding(inp):\n    max_seq_len = max_length\n    inp_seq = np.array(pad_sequences(inp, maxlen=max_seq_len, padding='pre'))\n    features, target = inp_seq[:, :-1], inp_seq[:, -1]\n    target = ku.to_categorical(target, num_classes=vocab_size)\n    return features, target, max_seq_len\n\nfeatures, target, max_seq_len = padding(inp_seq)","0cf94b52":"features.shape","5de6c737":"target.shape","82e779e9":"model=Sequential()\n# We define max length - 1 as now our features have one column less (used as target label)\nmodel.add(Embedding(vocab_size, 10, input_length=max_seq_len-1))\nmodel.add(LSTM(100))\nmodel.add(Dropout(0.1))\nmodel.add(Dense(vocab_size, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam')\n\nmodel.summary()","8e852976":"model.fit(features, target, epochs=100, verbose=5)","33c5ba1d":"def predictions(seed_text, next_words, model, max_seq):\n    for _ in range(next_words):\n        # Conver the seed text into tokens\n        token_list = tk.texts_to_sequences([seed_text])[0]\n        # Pad the seed text with seq-1 (as we only have features)\n        token_list = pad_sequences([token_list], maxlen=max_seq-1, padding='pre')\n        # Predict the class of the next word\n        predicted = model.predict_classes(token_list, verbose=0)\n        \n        outputs = \"\"\n        # Iterate over the dictionary, to get the word\n        for word, index in tk.word_index.items():\n            if index==predicted:\n                output_word = word\n                break\n        # Add the word in the seed text, for the next prediction\n        seed_text = seed_text+\" \"+output_word\n    return seed_text.title()","eb71c46f":"print (predictions(\"united states\", 5, model, max_seq_len))\nprint (predictions(\"preident trump\", 4, model, max_seq_len))\nprint (predictions(\"donald trump\", 4, model, max_seq_len))\nprint (predictions(\"india and china\", 4, model, max_seq_len))\nprint (predictions(\"new york\", 4, model, max_seq_len))\nprint (predictions(\"science and technology\", 5, model, max_seq_len))","c83c92fc":"We can see that the word_index does not have 0, which is reserved for padding","e3f4adac":"Now, we proceed to create a uniform length of all the input vectors, that can be passed in the input layer of our LSTM model. We will also separate out the predictor features from the target labels.\n\n* The features will be all values from the start, till the 2nd last value\n* The target will be the final value in the given sequence","7d87352d":"<h2>Tokenization using Keras<\/h2>","72a3e212":"<h1>Introduction<\/h1>\n\nThrough this notebook, we will tackle one of the core fields of Recurrent neural networks i.e. Language modeling. It is a core problem for a variety of tasks such as text-to-speech, conversational systems (chat-bots), text summarization and much more. A language model can work on a variety of levels:\n\n* Character level\n* N-gram level\n* Word level\n* Sentence level\n* Paragraph level\n\nWe will be creating our own language model for generating text, with the help of RNNs.","c1f4016e":"<h2>Prediction function<\/h2>","135b017a":"All the words and their indices will be stored in a dictionary which you can access it using tokenizer.word_index. Therefore, you can find the number of the unique words based on the number of elements in this dictionary:\n\n`num_words = len(tokenizer.word_index) + 1`\n\nThat + 1 is because of reserving padding (i.e. index zero).","bbabbb2e":"<h2>Text cleaning<\/h2>","764e8371":"<h2>Padding sequences to obtain complete data<\/h2>"}}