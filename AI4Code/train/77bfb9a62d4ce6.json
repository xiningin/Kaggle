{"cell_type":{"89054063":"code","817cc7b9":"code","1fb582e3":"code","aa4c882e":"code","c070b9e9":"code","42a6f74a":"code","1428f33f":"code","cbb974b1":"code","09c891e5":"code","209ad2dd":"code","11913e08":"code","6b041eed":"code","7569cff4":"code","19c3a6fa":"code","b0913819":"code","e1866709":"code","6f299cca":"code","c050e65b":"code","c7eafbd3":"code","8f2cf39b":"code","47e63d2d":"code","efb6719f":"code","4c3f90bc":"code","424d681c":"code","2499e2d4":"code","aabd71f6":"markdown","4454439a":"markdown","7428dd64":"markdown","5510cf4a":"markdown","8edb383a":"markdown","494cdafb":"markdown","fe0c26b0":"markdown","d086345b":"markdown","8bd3cae7":"markdown","09d82878":"markdown","60adbb7f":"markdown","35f061fc":"markdown","c4f9c8c3":"markdown","f7e29f47":"markdown","2fd2e030":"markdown","1e49faa4":"markdown","39140031":"markdown","bd56e884":"markdown"},"source":{"89054063":"!pip install jovian --upgrade -q","817cc7b9":"import jovian","1fb582e3":"jovian.commit(project='numpy-array-operations')","aa4c882e":"import matplotlib.pyplot as plt\nimport numpy as np","c070b9e9":"# Example 1 - working (change this)\na = np.array([[1, np.nan], [3, 4]])\nnp.nanmean(a)\n","42a6f74a":"# Example 2 - working\nnp.nanmean(a, axis=1, )","1428f33f":"# Example 3 - breaking (to illustrate when it breaks)\nnp.nanmean(a, axis=3)","cbb974b1":"jovian.commit()","09c891e5":"# Example 1 - working\na = [1, 2, 3, 4, 5]\nnp.pad(a, (2, 3), 'constant', constant_values=(4, 6))","209ad2dd":"# Example 2 - working\nnp.pad(a, (2, 3), 'edge')","11913e08":"# Example 3 - breaking (to illustrate when it breaks)\nnp.pad(, ( 3), 'edge')","6b041eed":"jovian.commit(project='ass2')","7569cff4":"# Example 1 - working\nA = np.array([[1,-2j],[2j,5]])\nA","19c3a6fa":"# Example 2 - working\nL = np.linalg.cholesky(A)\nL","b0913819":"# Example 3 - breaking (to illustrate when it breaks)\nL= np.linalg.cholesky()\nL","e1866709":"jovian.commit()","6f299cca":"# Example 1 - working\nnp.fft.fft(np.exp(2j * np.pi * np.arange(8) \/ 8))","c050e65b":"# Example 2 - working\nimport matplotlib.pyplot as plt\nt = np.arange(256)\nsp = np.fft.fft(np.sin(t))\nfreq = np.fft.fftfreq(t.shape[-1])\nplt.plot(freq, sp.real, freq, sp.imag)","c7eafbd3":"# Example 3 - breaking (to illustrate when it breaks)\nnp.fft.fft(np.exp(2j * np.pi * np.arange(8) \/ 0))","8f2cf39b":"jovian.commit()","47e63d2d":"# Example 1 - working\na = np.array([[3,1], [1,2]])\nb = np.array([9,8])\nx = np.linalg.solve(a, b)\nx","efb6719f":"# Example 2 - working\nnp.allclose(np.dot(a, x), b)","4c3f90bc":"# Example 3 - breaking (to illustrate when it breaks)\nnp.allclose(np.dot(a, x))","424d681c":"jovian.commit()","2499e2d4":"jovian.commit(project='ass2')","aabd71f6":"## Reference Links\nProvide links to your references and other interesting articles about Numpy arrays:\n* Numpy official tutorial : https:\/\/numpy.org\/doc\/stable\/user\/quickstart.html\n* ...","4454439a":"## Function 2 - .pad\nPad an array.\n\nParameters\narrayarray_like of rank N\nThe array to pad.\n\npad_width{sequence, array_like, int}","7428dd64":"Explanation about example","5510cf4a":"# Assignment 2 - Numpy Array Operations\n\n\n### Numpy for Statistics\n\nThis Notebook contains some cool Numpy functions which are important for performing Statistical operations in numpy\n","8edb383a":"Explanation about example","494cdafb":"Explanation about example (why it breaks and how to fix it) : div by 0 ","fe0c26b0":"Explanation about example (why it breaks and how to fix it): not giving the array name and leaving it blank","d086345b":"Explanation about example (why it breaks and how to fix it) : do not give the required argument\n","8bd3cae7":"Explanation about example : ","09d82878":"## Function 4 - numpy.fft.fft(a, n=None, axis=-1, norm=None)[source]\nCompute the one-dimensional discrete Fourier Transform.\n\nThis function computes the one-dimensional n-point discrete Fourier Transform (DFT) with the efficient Fast Fourier Transform (FFT) algorithm [CT].\n\nParameters\naarray_like\nInput array, can be complex.\n\nnint, optional\nLength of the transformed axis of the output. If n is smaller than the length of the input, the input is cropped. If it is larger, the input is padded with zeros. If n is not given, the length of the input along the axis specified by axis is used.\n\naxisint, optional\nAxis over which to compute the FFT. If not given, the last axis is used.\n\nnorm{None, \u201cortho\u201d}, optional\nNew in version 1.10.0.\n\nNormalization mode (see numpy.fft). Default is None.\n\nReturns\noutcomplex ndarray\nThe truncated or zero-padded input, transformed along the axis indicated by axis, or the last one if axis is not specified.\n\nRaises\nIndexError\nif axes is larger than the last axis of a.","60adbb7f":"## Expanding the scope\n ### all the averages and variances in statistics work exactly in the same manner like the above function  \n1. median()    --------      median\n2. average()   --------      average\n3. mean()     -------       arithmetic mean \n4. std()            --------- standard deviation\n5. var()             --------variance\n6. nanmean()        ------- ignores nan in mean calculation\n7. nanmedian()      ------- ignores nan in median calculation\n8. nanstd()          -------ignores nan in standard deviation calculation\n9. nanvar()          -------ignores nan in variance calculation\n","35f061fc":"## Function 3 - numpy.linalg.cholesky\n\nReturn the Cholesky decomposition, L * L.H, of the square matrix a, where L is lower-triangular and .H is the conjugate transpose operator (which is the ordinary transpose if a is real-valued). a must be Hermitian (symmetric if real-valued) and positive-definite. No checking is performed to verify whether a is Hermitian or not. In addition, only the lower-triangular and diagonal elements of a are used. Only L is actually returned.\n\nParameters\na(\u2026, M, M) array_like\nHermitian (symmetric if all elements are real), positive-definite input matrix.\n\nReturns\nL(\u2026, M, M) array_like\nUpper or lower-triangular Cholesky factor of a. Returns a matrix object if a is a matrix object.\n\nRaises\nLinAlgError\nIf the decomposition fails, for example, if a is not positive-definite.\n\nAdd some explanations","c4f9c8c3":"Explanation about example (why it breaks and how to fix it) \nThe dimentions were given out of range hence it could not proceed ","f7e29f47":"## Function 1 - numpy.nanmean (Averages and Variances)\n\n**Syntax**: numpy.nanmean(a, axis=None, dtype=None, out=None, keepdims=<no value>)\n    \n**USe Case**: Compute the arithmetic mean along the specified axis, ignoring NaNs.\n    \n**Parameters**: a: (array)\n                        Array containing numbers whose mean is desired. If a is not an array, a conversion is attempted.\n\n            axis: (int, tuple of int, None)\n                        Axis or axes along which the means are computed. The default is to compute the mean of the flattened array.\n\n            dtype: (data-type)\n                        Type to use in computing the mean. For integer inputs, the default is float64; for inexact inputs, it is the same as the input dtype.\n\n            out: (ndarray)\n                        Alternate output array in which to place the result. The default is None; if provided, it must have the same shape as the expected output, but the type will be cast if necessary. See ufuncs-output-type for more details.\n\n            keepdims: (bool)\n                        If set to true dimentions are kept same ","2fd2e030":"## Function 5 -numpy.linalg.solve\n\nSolve a linear matrix equation, or system of linear scalar equations.\n\nComputes the \u201cexact\u201d solution, x, of the well-determined, i.e., full rank, linear matrix equation ax = b.\n\nParameters\na(\u2026, M, M) array_like\nCoefficient matrix.\n\nb{(\u2026, M,), (\u2026, M, K)}, array_like\nOrdinate or \u201cdependent variable\u201d values.\n\nReturns\nx{(\u2026, M,), (\u2026, M, K)} ndarray\nSolution to the system a x = b. Returned shape is identical to b.\n\nRaises\nLinAlgError\nIf a is singular or not square.","1e49faa4":"Explanation about example","39140031":"Explanation about example (why it breaks and how to fix it) : given a argument and 1 not given \n","bd56e884":"Let's begin by importing Numpy and listing out the functions covered in this notebook."}}