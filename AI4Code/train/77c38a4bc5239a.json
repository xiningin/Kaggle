{"cell_type":{"70d0aad5":"code","50f28737":"code","eb9b321f":"code","0a70b606":"code","53cab0ed":"code","eb7b4740":"code","92f2d3c4":"code","0ad06392":"code","d49e26c9":"code","4b8da94e":"code","e4767ec0":"code","6fbc5832":"code","798684ca":"code","ac76fb3a":"code","1729853e":"code","face53c5":"code","91a902cf":"code","782ba72d":"code","1c2f64c2":"code","0ee054aa":"code","3d09dc8a":"code","c6abf5fd":"code","2c1386bd":"code","2f942800":"code","942b4833":"markdown","833c66cf":"markdown","4a928ad4":"markdown","3c7609c8":"markdown","b09279da":"markdown","ca35033a":"markdown","0c65c414":"markdown","066e3ec9":"markdown"},"source":{"70d0aad5":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets, transforms, models\nfrom torchvision.utils import make_grid\n\nfrom PIL import Image\nfrom IPython.display import display\nimport cv2\n\n\nimport glob\nimport os\nimport random\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","50f28737":"def seed_everything(seed=1234):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\nseed_everything(42)\n","eb9b321f":"# path directories\nPATH = '..\/input\/pokemon-generation-one\/dataset\/'\nlabels = np.array(list(os.walk(PATH))[0][1]) #collecting the folder names of the datasets\nnp.random.shuffle(labels) #folders are sorted so it's necessary to shuffle as we might not use all of the pokemons to train.","0a70b606":"import torchvision.models as models\n\n# define VGG16 model\nVGG16 = models.vgg16(pretrained=True)\nRESNET50 = models.resnet50(pretrained=True)\n\n# check if CUDA is available\nuse_cuda = torch.cuda.is_available()\n\n\n\n","53cab0ed":"#!pip install split-folders\n#import splitfolders\n#splitfolders.ratio(\"..\/input\/pokemon-generation-one\", output=\"..\/output\/pokedata\", seed=42, ratio=(.7, .2, .1), group_prefix=None) \n","eb7b4740":"labels = labels[39:59] #selecting random pokemons to train","92f2d3c4":"labels","0ad06392":"name = {x:y for (x,y) in enumerate(labels)}\nidx = {y:x for (x,y) in enumerate(labels)}","d49e26c9":"X = []\ny = []\n\nfor label in labels:\n    path = PATH + label + '\/'\n    images = np.array([cv2.resize(cv2.imread(img), (224,224), interpolation = cv2.INTER_AREA) for img in glob.glob(path + '*.jpg')])\n    if(len(images) > 0):\n        for i in images:\n            y.append(idx[label])\n        X.append(images)\n    \nX = np.array(X)\nX = np.concatenate(X)\n\nX = X.astype('uint8')","4b8da94e":"print(type(X[0][0][0][0]))","e4767ec0":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.2, random_state = 42)","6fbc5832":"transform = transforms.Compose([\n    transforms.ToPILImage(),\n    transforms.Resize((240, 240)),\n    transforms.ToTensor(),\n    transforms.Normalize([0.485, 0.456, 0.406],\n                        [0.229, 0.224, 0.225])\n])","798684ca":"class PokemonDataset(torch.utils.data.Dataset):\n    'Characterizes a dataset for PyTorch'\n    def __init__(self, X, y, transform):\n        'Initialization'\n        self.X = X\n        self.transform = transform\n        self.y = y\n\n    def __len__(self):\n        'Denotes the total number of samples'\n        return len(self.X)\n\n    def __getitem__(self, index):\n        if self.y is not None:\n            return self.transform(self.X[index]), self.y[index]\n        else:\n            return self.transform(self.X[index])\n        \n    ","ac76fb3a":"train_df = PokemonDataset(X_train, y_train, transform)\ntest_df = PokemonDataset(X_test, y_test, transform)","1729853e":"batch_size = 20\n\ntrain_loader = torch.utils.data.DataLoader(train_df, batch_size=batch_size)\ntest_loader = torch.utils.data.DataLoader(test_df, batch_size=batch_size)","face53c5":"import matplotlib.pyplot as plt\n%matplotlib inline\n    \n# obtain one batch of training images\ndataiter = iter(train_loader)\nimages, labels = dataiter.next()\nplt.imshow(np.transpose(images[11].numpy(), (1, 2, 0)))\n","91a902cf":"print(VGG16)","782ba72d":"print(VGG16.classifier[6].in_features) \nprint(VGG16.classifier[6].out_features) ","1c2f64c2":"# Freeze training for all \"features\" layers\nfor param in VGG16.features.parameters():\n    param.requires_grad = False\n    ","0ee054aa":"import torch.nn as nn\n\nn_inputs = VGG16.classifier[6].in_features\n\n# add last linear layer (n_inputs -> 20 pokemon classes)\n# new layers automatically have requires_grad = True\nlast_layer = nn.Linear(n_inputs, 20)\n\nVGG16.classifier[6] = last_layer\n\n# move model to GPU if CUDA is available\nif use_cuda:\n    VGG16 = VGG16.cuda()\n    RESNET50 = RESNET50.cuda()\n\n# check to see that your last layer produces the expected number of outputs\nprint(VGG16.classifier[6].out_features)\n#print(vgg16)","3d09dc8a":"import torch.optim as optim\n\n# specify loss function (categorical cross-entropy)\ncriterion = nn.CrossEntropyLoss()\n\n# specify optimizer (stochastic gradient descent) and learning rate = 0.001\noptimizer = optim.SGD(VGG16.classifier.parameters(), lr=0.01)","c6abf5fd":"n_epochs = 2\n\nfor epoch in range(1, n_epochs+1):\n\n    # keep track of training and validation loss\n    train_loss = 0.0\n    \n    ###################\n    # train the model #\n    ###################\n    # model by default is set to train\n    for batch_i, (data, target) in enumerate(train_loader):\n        # move tensors to GPU if CUDA is available\n        if use_cuda:\n            data, target = data.cuda(), target.cuda()\n        # clear the gradients of all optimized variables\n        optimizer.zero_grad()\n        # forward pass: compute predicted outputs by passing inputs to the model\n        output = VGG16(data)\n        # calculate the batch loss\n        loss = criterion(output, target)\n        # backward pass: compute gradient of the loss with respect to model parameters\n        loss.backward()\n        # perform a single optimization step (parameter update)\n        optimizer.step()\n        # update training loss \n        train_loss += loss.item()\n        \n        if batch_i % 20 == 19:    # print training loss every specified number of mini-batches\n            print('Epoch %d, Batch %d loss: %.16f' %\n                  (epoch, batch_i + 1, train_loss \/ 20))\n            train_loss = 0.0","2c1386bd":"from torch.autograd import Variable\ntotal = 0\ncorrect = 0\nfor data in test_loader:\n    images, labels = data\n    if use_cuda:\n        images, labels = images.cuda(), labels.cuda()\n    images = Variable(images)\n    labels = Variable(labels)\n    outputs = VGG16(images)\n    _, predicted = torch.max(outputs.data, 1)\n    total += labels.size(0)\n    predicted = predicted.cpu().detach().numpy().astype('int8')\n    labels = labels.cpu().detach().numpy().astype('int8')\n    correct +=(predicted == labels).sum().item()","2f942800":"print(\"accuracy = \",correct\/total)","942b4833":"We will be using this function mostly everywhere to run our experiments deterministically. Random functions of Numpy and Pandas will behave deterministically after this. To learn more about Deterministic Neural Networks please check out [this notebook ](https:\/\/www.kaggle.com\/bminixhofer\/deterministic-neural-networks-using-pytorch) ","833c66cf":"Do you want to know about the reason behind 42? Look [Here](https:\/\/en.wikipedia.org\/wiki\/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#Answer_to_the_Ultimate_Question_of_Life.2C_the_Universe_and_Everything_.2842.29)   :p \n\n","4a928ad4":"# Models\n","3c7609c8":"# Imports\nAt first we need to import the libraries. It is considered as standard imports.\n\n","b09279da":"Here we will add images and labels in a list respective to each image","ca35033a":"Now we will map the serial number and pokemon name as well as pokemon name and serial number to ease the access of serial numbers and pokemon name.","0c65c414":"# Data Preprocess and Load","066e3ec9":"# Result"}}