{"cell_type":{"94baf408":"code","db718144":"code","f316092f":"code","b09f45c8":"code","b54f67d9":"code","62333b72":"code","9a3e606b":"code","6bf261cc":"code","ed5b24f1":"code","bdb06f70":"code","a30da720":"code","b22f4e37":"code","33e22a14":"code","91e23844":"code","946eb459":"code","8d1ee879":"code","837e1a27":"code","71233ccf":"code","21eea88f":"code","ac2164c4":"markdown","ac9961da":"markdown","a949070d":"markdown","3898e2a1":"markdown","20ea55c1":"markdown","c08b6845":"markdown","6e2e1f58":"markdown"},"source":{"94baf408":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","db718144":"from collections import defaultdict\nfrom gensim.models import Word2Vec","f316092f":"user_course_train = pd.read_csv('\/kaggle\/input\/otus-rec-sys\/user_course_train.csv')\ncourse = pd.read_csv('\/kaggle\/input\/otus-rec-sys\/course.csv', sep=';')\nassessment_train = pd.read_csv('\/kaggle\/input\/otus-rec-sys\/assessment_train.csv')","b09f45c8":"assesments = defaultdict(list)\nfor _, row in assessment_train.iterrows():\n    try:\n        assesments[int(row['user_id'])].append(int(row['course_id']))\n    except:\n        print(\"error\")\n        print(row)\nassesments[188]","b54f67d9":"courses_for_user = defaultdict(list)\nfor _, row in user_course_train.iterrows():\n    courses_for_user[int(row['user_id'])].append(int(row['course_id']))\ncourses_for_user[81]","62333b72":"old_users = list(user_course_train.user_id)\nold_users = [int(x) for x in old_users]\nassessment_users = list(assessment_train.user_id)\nassessment_users = [int(x) for x in assessment_users]","9a3e606b":"def is_new_user(user_id):\n    if user_id in old_users:\n        return False\n    if user_id in assessment_users:\n        return False\n    return True\n\nprint(is_new_user(13534457))\nprint(is_new_user(287))\nprint(is_new_user(81))","6bf261cc":"def is_assesment_user(user_id):\n    if user_id in old_users:\n        return False\n    if user_id in assessment_users:\n        return True\n    return False\n\nprint(is_assesment_user(13534457))\nprint(is_assesment_user(287))\nprint(is_assesment_user(81))","ed5b24f1":"def is_old_user(user_id):\n    if user_id in old_users:\n        return True\n    return False\n\nprint(is_old_user(13534457))\nprint(is_old_user(287))\nprint(is_old_user(81))","bdb06f70":"w2v_model = Word2Vec(\n    min_count=10,\n    window=2,\n    vector_size=300,\n    negative=10,\n    alpha=0.03,\n    min_alpha=0.0007,\n    sample=6e-5,\n    sg=0)","a30da720":"courses_as_words = list(courses_for_user.values())\ncourses_as_words[0]","b22f4e37":"w2v_model.build_vocab(courses_as_words)","33e22a14":"w2v_model.train(courses_as_words, total_examples=w2v_model.corpus_count, epochs=30, report_delay=1)","91e23844":"prediction = w2v_model.predict_output_word(courses_as_words[0], topn=3)\n' '.join([str(x[0]) for x in prediction])","946eb459":"with open('\/kaggle\/input\/otus-rec-sys\/test_ids.txt') as f:\n    ids = [int(line) for line in f.readlines()]\nprint(ids[:10])","8d1ee879":"enabled = list(course[course['visible'] == 1].id)\nenabled = [int(x) for x in enabled]","837e1a27":"def predict(user_id):\n    popular = [7, 1, 15]\n    if is_new_user(user_id):\n        return ' '.join([str(x) for x in popular])\n    else:\n        result = list(set(assesments[user_id]) - set(courses_for_user[user_id]))\n        if is_old_user(user_id):\n            prediction = w2v_model.predict_output_word(courses_for_user[user_id], topn=3)\n            if prediction: result += [x[0] for x in prediction]\n        else:\n            prediction = w2v_model.predict_output_word(assesments[user_id], topn=3)\n            if prediction: result += [x[0] for x in prediction]\n        result = [c for c in result if c in enabled]\n        result = [c for c in result if c not in courses_for_user[user_id]]\n        result += popular\n        result = result[:3]\n        return ' '.join([str(x) for x in result])\n    print(\"bad row\")\n    return ' '.join([str(x) for x in popular])","71233ccf":"submission = pd.DataFrame(columns=['Id', 'Predicted'])\nfor user_id in ids:\n    submission = submission.append({\n        'Id': user_id,\n        'Predicted': predict(user_id)\n    }, ignore_index=True)\nsubmission.head()","21eea88f":"submission.to_csv('submission_word2vec.csv', index=False)","ac2164c4":"# \u0414\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u043e\u0433\u043d\u043e\u0437","ac9961da":"# \u041e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c","a949070d":"# Word2Vec\n\u042d\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u044f \u0445\u043e\u0442\u0435\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u0432\u043e\u0435\u0433\u043e \u043b\u0438\u0447\u043d\u043e\u0433\u043e \u0431\u0435\u0439\u0437\u043b\u0430\u0439\u043d\u0430, \u043d\u043e \u043f\u043e\u043a\u0430 \u0440\u0430\u0437\u0431\u0438\u0440\u0430\u043b\u0441\u044f \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438 \u0432 \u0438\u0445 \u0447\u0442\u0435\u043d\u0438\u0438, \u0440\u0435\u0448\u0438\u043b \u0437\u0430\u0431\u0438\u0442\u044c \u043d\u0430 \u044d\u0442\u043e\u0442 \u043f\u043e\u0434\u0445\u043e\u0434 \u0438 \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0447\u0435\u043c\u0443-\u0442\u043e \u043f\u043e\u0441\u0435\u0440\u044c\u0451\u0437\u043d\u0435\u0435.  \n\u0425\u043e\u0442\u044f \u043c\u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u044d\u0442\u043e\u0442 \u043f\u043e\u0434\u0445\u043e\u0434 \u0437\u0430 \u0441\u0432\u043e\u044e \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u0443.  \n\u042f \u0434\u043e\u0434\u0435\u043b\u0430\u043b \u044d\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043f\u043e\u0437\u0436\u0435.  \nPrivate Score 0.26331  \nPublic Score 0.32951  \n\n\u0418\u0434\u0435\u044f:  \n\u041d\u043e\u043c\u0435\u0440\u0430 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u043a\u0443\u0440\u0441\u043e\u0432 - \u044d\u0442\u043e \u0441\u043b\u043e\u0432\u0430.  \n\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u0443\u0440\u0441\u043e\u0432, \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c - \u044d\u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0430 (\u0442\u0435\u043a\u0441\u0442).  \n\u041d\u0430 \u044d\u0442\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u043e\u0431\u0443\u0447\u0430\u0435\u043c word2vec.  \n\u0417\u0430\u0442\u0435\u043c \u0434\u043b\u044f \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 (\u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u043a\u0443\u0440\u0441\u043e\u0432 \u0438\u043b\u0438 \u0442\u0435\u0441\u0442\u043e\u0432) \u043c\u043e\u0436\u0435\u043c \u043d\u0430\u0439\u0442\u0438 \u0441\u043b\u043e\u0432\u043e (\u043d\u043e\u043c\u0435\u0440 \u043a\u0443\u0440\u0441\u0430), \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0432\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u044d\u0442\u043e\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442.  ","3898e2a1":"\u041c\u044b \u043c\u043e\u043b\u043e\u0434\u0446\u044b.","20ea55c1":"\u042f \u043d\u0435 \u043f\u044b\u0442\u0430\u043b\u0441\u044f \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0442\u044c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u043b, \u0447\u0442\u043e \u043d\u0430 \u044d\u0442\u043e \u043d\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u0414\u0443\u043c\u0430\u044e, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0441\u0442\u0438\u0447\u044c \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430, \u0435\u0441\u043b\u0438 \u0437\u0430\u043c\u043e\u0440\u043e\u0447\u0438\u0442\u044c\u0441\u044f. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0437\u0434\u0435\u0441\u044c \u043e\u043a\u043e\u043b\u043e\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435.  ","c08b6845":"# \u041f\u0440\u043e\u0447\u0438\u0442\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435","6e2e1f58":"# \u041d\u0430\u0443\u0447\u0438\u043c\u0441\u044f \u043e\u0442\u043b\u0438\u0447\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043e\u0442 \u0441\u0442\u0430\u0440\u044b\u0445"}}