{"cell_type":{"4d214dc7":"code","5a995d94":"code","33b20888":"code","6ddb09b9":"code","b5960d89":"code","19186225":"code","6e4dd2c9":"code","c52ec52f":"code","816d371f":"code","78357c9f":"code","a883b54e":"code","686f053a":"markdown","9e5307f4":"markdown","65c34d77":"markdown"},"source":{"4d214dc7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom PIL import Image\n\nimport os\n\nprint(\"Setup Complete.\")","5a995d94":"def load_data(path):\n    data = []\n    for (dir, _, filenames) in os.walk(path):\n        for filename in filenames:\n            image = np.array(Image.open(dir+filename).convert('L').resize((256,256))).flatten()\n            data.append(image)\n    \n    return data","33b20888":"path = '\/kaggle\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/'\n\nnormal_train    = load_data(path + 'train\/NORMAL\/')\npneumonia_train = load_data(path + 'train\/PNEUMONIA\/')\nnormal_test     = load_data(path + 'test\/NORMAL\/')\npneumonia_test  = load_data(path + 'test\/PNEUMONIA\/')","6ddb09b9":"# Merge both cases into an array\nX_train = normal_train + pneumonia_train\nX_test  = normal_test  + pneumonia_test\n\n# Generate outcomes for them\ny_train = [0] * len(normal_train) + [1] * len(pneumonia_train)\ny_test  = [0] * len(normal_test)  + [1] * len(pneumonia_test)","b5960d89":"def draw_data(img, outcome):\n    outcome = 'Positive' if outcome else 'Negative'\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(np.reshape(img, (256, 256)))\n    plt.text(0, 250, outcome, color = 'w')\n    ","19186225":"draw_data(X_train[0], y_train[0])","6e4dd2c9":"draw_data(X_train[80], y_train[80])","c52ec52f":"from sklearn.neural_network import MLPClassifier\n\nmodel = MLPClassifier(hidden_layer_sizes=(128,64,32),max_iter=500)\nmodel.fit(X_train,y_train)","816d371f":"y_pred = model.predict(X_test)","78357c9f":"from sklearn.metrics import plot_confusion_matrix\nplot_confusion_matrix(model, X_test, y_test)","a883b54e":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","686f053a":"### **Training model**","9e5307f4":"### **Some samples**","65c34d77":"### **Loading the data**"}}