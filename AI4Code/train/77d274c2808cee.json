{"cell_type":{"c0d2cc09":"code","9b7c674b":"code","c6090cd6":"code","8389eae6":"code","c2d25b2d":"code","61c4be3e":"code","c1cef19e":"code","0280fd4c":"code","f5409679":"code","613f31c7":"code","e72d9111":"code","86301639":"code","e3aaeade":"code","073c2acb":"code","a7af9d87":"code","7983e44c":"code","2b91180a":"code","71a135c0":"code","505e42b0":"code","19681cdb":"code","b101c6ec":"code","5440cfad":"code","76a3f9f0":"code","44284f7f":"code","06744607":"code","25a65344":"code","f9e1bfe6":"code","646eb336":"code","95cb9c9a":"code","39b1706a":"code","fc90f007":"code","8779518b":"code","d9709a6e":"code","860bc0e6":"code","0f3e393d":"code","7ead5799":"code","d2699060":"code","33ea74fb":"code","892dbcfc":"code","eabcbe26":"code","676a28cc":"code","568bc17a":"code","abe63a1e":"code","b485cb81":"code","eb696c81":"code","a11ec8e6":"code","620a855b":"code","b115ef49":"code","01999815":"code","8128743d":"markdown","6f5c682c":"markdown","d3e23c2e":"markdown","6643b543":"markdown","e8c95693":"markdown","120615c0":"markdown","29859bdb":"markdown"},"source":{"c0d2cc09":"import numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","9b7c674b":"df = pd.read_csv('..\/input\/mobile-price-classification\/train.csv')","c6090cd6":"df.head()","8389eae6":"df.describe()","c2d25b2d":"# show the count and type of each colum\ndf.info()","61c4be3e":"# show if the data have any null values in it\ndf.isnull().sum()","c1cef19e":"# show every value in each column\nfor uniqu in df.columns:\n    print(f\"{uniqu:15}{df[uniqu].unique()}\\n\")","0280fd4c":"# show if the data is balanced or not with pie chart\nplt.pie(df['price_range'].value_counts().values,labels=df['price_range'].unique(),autopct='%1.1f%%')\nplt.title('price_range')\n#plt.ylabel('wifi')\nplt.show()","f5409679":"# show if the data is balanced or not with count plot\nsns.countplot('price_range',data=df)","613f31c7":"### We didn't use scatter plot because the data is categorical so we can use pie chart or bar chart or swarn plot\ndef newcircle(data,lab,title,fig=1):\n    plt.subplot(1,4,fig)\n    plt.pie(data.value_counts(),labels=lab,autopct='%1.1f%%')\n    plt.title(title)","e72d9111":"# how the touch screen availability in each category \nplt.figure(figsize=(15,15))\nnewcircle(df.loc[df['price_range']==3,'touch_screen'],['support touch screen','Not support touch screen'],'price_range',1)\nnewcircle(df.loc[df['price_range']==2,'touch_screen'],['support touch screen','Not support touch screen'],'price_range',2)\nnewcircle(df.loc[df['price_range']==1,'touch_screen'],['support touch screen','Not support touch screen'],'price_range',3)\nnewcircle(df.loc[df['price_range']==0,'touch_screen'],['support touch screen','Not support touch screen'],'price_range',4)","86301639":"df[['touch_screen','price_range']].groupby(['price_range']).mean()","e3aaeade":"## Point plot to show relaction between ram and price\nsns.pointplot(y=\"ram\", x=\"price_range\", data=df)","073c2acb":"plt.figure(figsize=(20,20))\nnewcircle(df.loc[df['price_range']==0,'n_cores'],df['n_cores'].unique(),'price_range vs cores')","a7af9d87":"# how many cell phone support 3G\nplt.figure(figsize=(20,20))\nnewcircle(df['three_g'],['support 3G','Not support 3G'],'3G')","7983e44c":"sns.countplot('three_g',data=df)","2b91180a":"X=df.drop('price_range',axis=1)","71a135c0":"y=df['price_range']\n","505e42b0":"from sklearn.model_selection import train_test_split","19681cdb":"X_train, X_tes, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=101)\n","b101c6ec":"from sklearn.pipeline import Pipeline","5440cfad":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC","76a3f9f0":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report","44284f7f":"from sklearn.ensemble import RandomForestClassifier","06744607":"pipe3 = Pipeline( [(\"RF\", RandomForestClassifier())])","25a65344":"pipe3.fit(X_train, y_train)","f9e1bfe6":"print(\"Test score: {:.2f}\".format(pipe3.score(X_tes, y_test)))","646eb336":"pr = pipe3.predict(X_tes)","95cb9c9a":"print(classification_report(y_test,pr))","39b1706a":"print(\"Train set score: {:.2f}\".format(pipe3.score(X_train, y_train)))","fc90f007":"from sklearn.linear_model import LogisticRegression","8779518b":"pipe2 = Pipeline( [(\"scaler\", MinMaxScaler()),(\"lR\", LogisticRegression(C=100))])","d9709a6e":"pipe2.fit(X_train, y_train)","860bc0e6":"print(\"Test score: {:.2f}\".format(pipe2.score(X_tes, y_test)))","0f3e393d":"pr = pipe2.predict(X_tes)","7ead5799":"print(classification_report(y_test,pr))","d2699060":"parameters = {'svm__kernel':('linear', 'rbf'), 'svm__C':[0.001, 0.01, 0.1, 1, 10, 100],'svm__gamma': [0.001, 0.01, 0.1, 1, 10, 100]}","33ea74fb":"svc = SVC()\npipe = Pipeline( [(\"svm\", svc)])","892dbcfc":"grid = GridSearchCV(pipe, param_grid=parameters,cv=5)\ngrid.fit(X_train, y_train)\nprint(\"Best cross-validation accuracy: {:.2f}\".format(grid.best_score_))\nprint(\"Test set score: {:.2f}\".format(grid.score(X_tes, y_test)))\nprint(\"Best parameters: {}\".format(grid.best_params_))","eabcbe26":"print(\"Train set score: {:.2f}\".format(grid.score(X_train, y_train)))","676a28cc":"print(classification_report(y_test,grid.predict(X_tes)))","568bc17a":"test_data = pd.read_csv('..\/input\/mobile-price-classification\/test.csv')","abe63a1e":"test_data.head()","b485cb81":"test_data.drop('id',axis=1,inplace=True)","eb696c81":"test_data.head()","a11ec8e6":"predicted_price=grid.predict(test_data)\n","620a855b":"predicted_price","b115ef49":"test_data['price_range']=predicted_price","01999815":"test_data.head()","8128743d":"# uising RandomForestClassifier model and show what is the overfitting","6f5c682c":"# Using LogisticRegression with scale the data  by using the pipeline ","d3e23c2e":"## Using SVM model with tuning the parameter and cross validation using GridSearchCV ","6643b543":"# Data Exploration ","e8c95693":"# Apply the SVM model on the Test data ","120615c0":"# Machine learning model","29859bdb":"# Data visualization  "}}