{"cell_type":{"5b92b51c":"code","364fac22":"code","87477d04":"code","31dd6b63":"code","c2befb02":"code","6f2a58ad":"code","9ecb22d5":"code","ff632d75":"code","33ee1864":"code","80eedab4":"code","362646d1":"code","cc517ac5":"code","cf383ef9":"code","3fab811f":"code","351434f9":"code","6ef0eb52":"code","1fedfe4f":"code","497df6f3":"code","469edb5b":"code","376dd22a":"code","ca3ce910":"code","5daf980a":"code","619dbcc3":"code","adb99019":"code","dc659aee":"code","020700e5":"code","d58e42aa":"code","f167ae26":"code","4f93e823":"code","491a4acd":"markdown","555c3e73":"markdown","48d66df6":"markdown","bc89214a":"markdown","774d43dd":"markdown","454df7eb":"markdown","49bf678b":"markdown","77403394":"markdown","18f8b186":"markdown","1fe4cd19":"markdown","d012d5d8":"markdown","b6ba91bf":"markdown","47d0e857":"markdown"},"source":{"5b92b51c":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","364fac22":"from fastai import *\nfrom fastai.vision import *\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport scipy as sp\nfrom functools import partial\nfrom sklearn import metrics\nfrom collections import Counter\nfrom fastai.callbacks import *\n\nimport PIL\nimport cv2","87477d04":"# Set seed for all\ndef seed_everything(seed=1358):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n\nseed_everything()","31dd6b63":"def crop_image1(img,tol=7):\n    # img is image data\n    # tol  is tolerance\n        \n    mask = img>tol\n    return img[np.ix_(mask.any(1),mask.any(0))]\n\ndef crop_image_from_gray(img,tol=7):\n    if img.ndim ==2:\n        mask = img>tol\n        return img[np.ix_(mask.any(1),mask.any(0))]\n    elif img.ndim==3:\n        gray_img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n        mask = gray_img>tol\n        \n        check_shape = img[:,:,0][np.ix_(mask.any(1),mask.any(0))].shape[0]\n        if (check_shape == 0): # image is too dark so that we crop out everything,\n            return img # return original image\n        else:\n            img1=img[:,:,0][np.ix_(mask.any(1),mask.any(0))]\n            img2=img[:,:,1][np.ix_(mask.any(1),mask.any(0))]\n            img3=img[:,:,2][np.ix_(mask.any(1),mask.any(0))]\n    #         print(img1.shape,img2.shape,img3.shape)\n            img = np.stack([img1,img2,img3],axis=-1)\n    #         print(img.shape)\n        return img\n\ndef load_ben_color(path, sigmaX=10):\n    image = cv2.imread(path)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image = crop_image_from_gray(image)\n    image = cv2.resize(image, (IMG_SIZE, IMG_SIZE))\n    image=cv2.addWeighted ( image,4, cv2.GaussianBlur( image , (0,0) , sigmaX) ,-4 ,128)\n        \n    return image","c2befb02":"PATH = Path('..\/input\/aptos2019-blindness-detection')","6f2a58ad":"df = pd.read_csv(PATH\/'train.csv')\ndf.head()","9ecb22d5":"!ls ..\/input\/resnet50\/","ff632d75":"# copy pretrained weights for resnet50 to the folder fastai will search by default\nPath('\/tmp\/.cache\/torch\/checkpoints\/').mkdir(exist_ok=True, parents=True)\n!cp '..\/input\/resnet50\/resnet50.pth' '\/tmp\/.cache\/torch\/checkpoints\/resnet50-19c8e357.pth'","33ee1864":"df.diagnosis.value_counts() ","80eedab4":"IMG_SIZE = 512\n\ndef _load_format(path, convert_mode, after_open)->Image:\n    image = cv2.imread(path)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image = crop_image_from_gray(image)\n    image = cv2.resize(image, (IMG_SIZE, IMG_SIZE))\n    image=cv2.addWeighted ( image,4, cv2.GaussianBlur( image , (0,0), 10) ,-4 ,128)\n                    \n    return Image(pil2tensor(image, np.float32).div_(255)) #return fastai Image format\n\nvision.data.open_image = _load_format\n    \nsrc = (\n    ImageList.from_df(df,PATH,folder='train_images',suffix='.png')\n        .split_by_rand_pct(0.2, seed=42)\n        .label_from_df(cols='diagnosis',label_cls=FloatList)    \n    )\nsrc","362646d1":"tfms = get_transforms(do_flip=True, flip_vert=True, max_rotate=0.10, max_zoom=1.3, max_warp=0.0, max_lighting=0.2)","cc517ac5":"data = (\n    src.transform(tfms,size=128)\n    .databunch()\n    .normalize(imagenet_stats)\n)\ndata","cf383ef9":"# Definition of Quadratic Kappa\nfrom sklearn.metrics import cohen_kappa_score\ndef quadratic_kappa(y_hat, y):\n    return torch.tensor(cohen_kappa_score(torch.round(y_hat), y, weights='quadratic'),device='cuda:0')\n\nlearn = cnn_learner(data, base_arch=models.resnet50 ,metrics=[quadratic_kappa],model_dir='\/kaggle',pretrained=True)","3fab811f":"# Find a good learning rate\nlearn.lr_find()\nlearn.recorder.plot()","351434f9":"lr = 1e-2\nlearn.fit_one_cycle(3, lr)","6ef0eb52":"# progressive resizing\nlearn.data = data = (\n    src.transform(tfms,size=224)\n    .databunch()\n    .normalize(imagenet_stats)\n)\nlearn.lr_find()\nlearn.recorder.plot()","1fedfe4f":"lr = 1e-2\nlearn.fit_one_cycle(5, lr)","497df6f3":"learn.unfreeze()\n\nlearn.lr_find()\nlearn.recorder.plot()","469edb5b":"learn.fit_one_cycle(5, slice(1e-6,1e-3))","376dd22a":"valid_preds = learn.get_preds(ds_type=DatasetType.Valid)","ca3ce910":"class OptimizedRounder(object):\n    def __init__(self):\n        self.coef_ = 0\n\n    def _kappa_loss(self, coef, X, y):\n        X_p = np.copy(X)\n        for i, pred in enumerate(X_p):\n            if pred < coef[0]:\n                X_p[i] = 0\n            elif pred >= coef[0] and pred < coef[1]:\n                X_p[i] = 1\n            elif pred >= coef[1] and pred < coef[2]:\n                X_p[i] = 2\n            elif pred >= coef[2] and pred < coef[3]:\n                X_p[i] = 3\n            else:\n                X_p[i] = 4\n\n        ll = metrics.cohen_kappa_score(y, X_p, weights='quadratic')\n        return -ll\n\n    def fit(self, X, y):\n        loss_partial = partial(self._kappa_loss, X=X, y=y)\n        initial_coef = [0.5, 1.5, 2.5, 3.5]\n        self.coef_ = sp.optimize.minimize(loss_partial, initial_coef, method='nelder-mead')\n        print(-loss_partial(self.coef_['x']))\n\n    def predict(self, X, coef):\n        X_p = np.copy(X)\n        for i, pred in enumerate(X_p):\n            if pred < coef[0]:\n                X_p[i] = 0\n            elif pred >= coef[0] and pred < coef[1]:\n                X_p[i] = 1\n            elif pred >= coef[1] and pred < coef[2]:\n                X_p[i] = 2\n            elif pred >= coef[2] and pred < coef[3]:\n                X_p[i] = 3\n            else:\n                X_p[i] = 4\n        return X_p\n\n    def coefficients(self):\n        return self.coef_['x']","5daf980a":"optR = OptimizedRounder()\noptR.fit(valid_preds[0],valid_preds[1])","619dbcc3":"coefficients = optR.coefficients()\nprint(coefficients)","adb99019":"# test_df = pd.read_csv(PATH\/'test.csv')\n# test_df.head()\nsample_df = pd.read_csv(PATH\/'sample_submission.csv')\nsample_df.head()","dc659aee":"learn.data.add_test(ImageList.from_df(sample_df,PATH,folder='test_images',suffix='.png'))","020700e5":"preds,y = learn.get_preds(DatasetType.Test)\n","d58e42aa":"test_predictions = optR.predict(preds, coefficients)","f167ae26":"sample_df.diagnosis = test_predictions.astype(int)\nsample_df.head()","4f93e823":"sample_df.to_csv('submission.csv',index=False)","491a4acd":"This part is taken from @abhishek great kernel: https:\/\/www.kaggle.com\/abhishek\/optimizer-for-quadratic-weighted-kappa","555c3e73":"# Ben's Preprocessing Functions","48d66df6":"So our train set is definitely imbalanced, majority of images are normal (without illness).","bc89214a":"These functions are taken from famous kernel https:\/\/www.kaggle.com\/ratthachat\/aptos-updatedv14-preprocessing-ben-s-cropping. Below I am showing how they can be applied for fast.ai pipeline. ","774d43dd":"\n\n# Predictions","454df7eb":"Now switching to 224x224 size which is usually used for ResNet 50:","49bf678b":"Let's train with small image size first to get some rough approximation","77403394":"# Data","18f8b186":"# Libraries import","1fe4cd19":"# Metric Optimization","d012d5d8":"Initially I forked from this [kernel](https:\/\/www.kaggle.com\/khursani8\/fast-ai-starter-resnet34), changed architecture to ResNet 50, added augmentation and did some initial tuning of parameters like learning rate.","b6ba91bf":"In later versions I plugged in OptimizedRounder class and Ben's processing functions.","47d0e857":"# Model"}}