{"cell_type":{"85b861e2":"code","9e4fe128":"code","6eb8fb74":"code","4dbae9eb":"code","e6e3cb30":"code","db1b3393":"code","7267a2b9":"code","fe629e09":"code","bf4440aa":"code","24b5d3b1":"code","7a31ab56":"code","08c40ade":"code","383686fa":"code","944578ea":"code","e24182ab":"code","e7c2be5c":"code","ca0eb66f":"code","e19a944d":"code","d0bf98ec":"code","99519e58":"code","00dd43c5":"code","2b7a3e0c":"code","b17e4495":"code","6c318a7f":"code","4aaddfee":"code","c6da8658":"code","2eb2d233":"code","236487da":"code","bb52dcb6":"code","d2c27787":"code","5f8d4cbc":"code","0c383096":"code","78e77cc2":"code","88fb3665":"code","55e53a9d":"code","dcbfe0b9":"code","c780f226":"code","e596eb02":"markdown","2b63c502":"markdown","0502c026":"markdown","dd613925":"markdown","25cc3583":"markdown","39e36b10":"markdown","87768bcd":"markdown","bfef2967":"markdown","8ae42ecf":"markdown","8048dd3a":"markdown"},"source":{"85b861e2":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMSERUSEhIVFhUWGBYYFhgXFxsdFhgVGBcZFxUVGBYYIikgHxslHhcXITEhJikrLi4uFx8zODMsOCgtLisBCgoKDg0OGxAQGzAlHyUuMC0tLS0wNS0tLS0vLS4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAKgBLAMBEQACEQEDEQH\/xAAbAAEAAQUBAAAAAAAAAAAAAAAABAEDBQYHAv\/EAE8QAAEDAgMDBgcMBwYFBQAAAAEAAhEDEgQhMQVBUQYTIjJhcQdicpGhscEUFRYXIzRCU1SB0eEzUnOSorLwJIKT0uLxJUNkpPI1Y3Sjwv\/EABoBAQADAQEBAAAAAAAAAAAAAAABAgUEAwb\/xAA2EQACAQICCAUDAwQCAwAAAAAAAQIDEQQSExQhMTJRcaEFM0FhwWKB8BUi0TRSkbFC8SNy4f\/aAAwDAQACEQMRAD8A3trRGi+RlJ3e03oxVito4KM0uZbKhaOCZpcxlQtHBM0uYyoWjgmaXMZULRwTNLmMqMjsdol2Q0HtXbgpNuRx4tKyMnYOA8y0bnCWqFWm+bbTaYOW\/T2HzKWmt4Ljg0a2jvhQrsFbBwHmUbQQqAfz9QOtsAaWiM+l\/wCJ84V21lI9SbYOA8yqSLBwHmS4MbtjalOhSqVIa402zboT2TCpCrCVRU820mcZKGe2w1D4ymfZP\/sH+Vd2qP8AuOTWVyLh8IrPsv8AH\/oU6o\/7iNa9jyPCQz7Kcsut\/oTVH\/cNZ9ivxjs+y\/x\/6E1R\/wBxOs+xUeEZn2X+P\/QmqP8AuI1r2PXxht+y\/wAY\/wAqao\/7hrXsPjDb9l\/jH+VNUf8AcNa9jOcmOUTcYagFGywNOoM3T2DgvCtRdNLaetKrne4z9g4DzLyuewsHAeZLgWDgPMlwLBwHmS4Fg4DzJcCwcB5kuBYOA8yi4LeIYLHZDQ7uxVqP9j6MvT4l1NftHBYmaXM18qFo4JmlzGVC0cEzS5jKhaOCZpcxlQtHBM0uYyoWjgmaXMZUTcEOie\/2Ba\/h7bpvr8Iz8Uv3roQm6LIlxM0I7iqqSEAQBAEBkdjau7h7V3YHfI48ZuRkatMOBBmDwJB84zWicB4w+GZTkMaGzrA1Utt7xZEbabZEEAtOsiV10WnHYeckSMHVuaF5V4Wdy0XfYeK+0KbHhjnAOPHTsBOgK8lCTV0TclKpIQGB5T4dlPD1q8SWtLrT1TmJBHaubUYVKua7T5ntrUoQta6OU7UxGHe0OpU3U3z0mz0IjUff3LUwlPE0241ZZl6P1M6vOhNXpqz9eRm+Q2zKeIxBZVZe0UnuAuLekC2Mwe0rtk7LYeFOKctpu3wNw32L\/uHfiqZ2e+iiPgbhvsf\/AHDvxUZ2TookPbXJTDU8NXqDDWOZTc5rudc7pDTKVKk7lZ04pM5s1pJAAkkgAdpMBekpKKbZzRTk7Il4vZVak299OGggE3NOpgaFcdHxDD1pqEJbToqYOrTjmkthtngt6+I7qfremL3InC72dBXEtx2BAEBHx2Op0WX1XtY3iTv4Abz2BTGLk7IhyUd5g28t8GTHOO7yx0eqfQvfVqnI8tYgZunjqbqfOse1zIyIOR7O9ctWWiTcj3prO9h52fijUBJbEFc2FxEqqeZWPatSVNpJl\/EdR3kn1LoqcD6M86fGuprywzYCAIAgCAICZguqe\/2BbHh\/lvr8Iz8XxroQm6LJlxM747iqqSEAQBAEBkdjau7h7V3YHfI48ZuRknuABJMACSeAGq0TgLDMfSOlRn7wU5WLl5wDhuI84Uxm4O6DSZ5r1Axpdw3bydAB2kwEu5sjcW6OFFkPAcXG53ldndkB3BHLbsJsR9k0Lb7XONOYYCZiOsQeBOnd2qZyv1ISMiqEmF5Z\/MMR+zPrC9aPmIpV4GcTWmjNN48Gnzt37Gp62qs9x60eM6BS27hyy8YmnlOrh9HXoarl0qfqamq1U7ODPHwnw3R+Xpy\/Qk5DvjT74UKpBepOpV9ryvYRNp7VZiMBjHMM2CownjAycOwr1pVFN7DwxdCdFWkt6ucloddnls\/mHBetfy5dGZ9LjXUy21MRUdScHOcR0TndH6Zzd4G5o83FZGEpQjWTil+K\/M0MRUnKm1J\/lybyI20zCuql7XG4Mi2NxdMyRxC7cbKyiR4bhZ13LLbYbV8N6P1dT+H8eKz9KjW\/S6vNFfhvQ+rq+Zv3b+9TpUP0urzQ+G9D6ur5m\/jwTSJj9Lq80ajWqVNp420EhudoP0KY7P1jl954BbFKKpwPnJ3nNq5tNfkBhwGsBqXunpTpaJLiDlEkDIbx3qVNnroYms8nqr8HjhQqGWl4Y4fRl2TKgHHMecryxNGFWKk1tRWjUlTll5nUlnnceMR1HeSfUqVOB9GWp8a6mvLDNgIAgCAIAgJmC6p7\/YFseH+W+vwjPxfGuhCbosmXEzvjuKqpIQBAEAQGR2Nq7uHtXdgd8jjxm5E7G0i+m5rYBcCBOmfFaSdnc4GWKd7WhppNcAAMnjcI0cArNpu9yC9g6ZbTaCIMZjgSZIy71V7WSj1VY14g8Z1ggjQgjer5JR2kXTLFSnViwOBByu0e0b8hkTGhyVE1vG0lMaAAAIAEAcANEe0k9KAYXln8wxH7M+sL1o+ZEpV4GcTWmZpm9h7ddg6vOsa1xLS2HAxBgnQ9iNXLQk4u6Mv8P\/8ApML\/AIZ\/FeeigdGt1eb\/AMj4f\/8ASYX\/AAz+KaGHIa3V5v8AyUxHLl9WlUotoUGNqNLXWNIMHKddVaMIrcec685q0jWiF6HgLQosibsy2wNl1a5eKTbrQ2cwImY17iuDHptRNrwXEQoynnfIzHwVxf1X8Te\/j\/RWbo5H0H6jh+fYfBXF\/VfxN3ff2pklyI\/UMPz7D4KYv6r+Jvdx7VOSS2kPH4dq1+xF5LY\/3BjiK4LRDqdTfbJBDstRIH3Fbq\/dBWPjE8lRnUX7XwrW88a9K23W8HLXIDf6VSzOjMjmLsQcftQPYDaajCOIp046R4SG+lWm8kHc5081TYdTWUaJbxHUd5J9SpU4H0Zanxrqa8sM2AgCAIAgCAmYLqnv9gWx4f5b6\/CM\/F8a6EJuiyZcTO+O4qqkhAEAQBAZHY2ru4e1d2B3yOPGbkZRaJwEHbG0m4ekaj5iYECekdJHBG0t560aMq0ssd5gcJyxp838pdfJiGiI3TmM00tJS9jr\/S69vT\/JaZyjoEi41IkOyH0gZE5r3li6bVkUXhNf2\/yZbBcp6FWo2m2+5xgS3LSdZ7FyKaYq4CrTg5ytZGbXocYQgibVwIr0X0XEgPbaSNR3SrRlldyJRzKxqXxaUPr638H4Lo1uXI59WjzLh8HND66p5mfgp1uXIarHmU+Lih9bU8zPwTW5chqy5j4uKH1tTzM\/BNblyGrLmVHg5oD\/AJ1TzN\/BRrcuQ1VczS8ds5rKj2Bx6LnN6UTkYzjKV5vHzT3GzS8CpThGTk9qJnJ7YbMRWFNznAWky2JERmbt34hTHHybtY8sX4PSo086kzoPJ3k3TwZeWPe68NBujK2YiB2qKtZ1N5n0qShuM2vE9QgCA1Dwg7KpupCvaRUBa24aWnc8b+zvXpDEOl7ovSwUcTPI3Y557k8YL3\/UIW3HqvAKl+JW+50zkHs2nTw4qNab3zc47wCYDeDctOIXhOu6u1nlUwscPUcE7mzLzKFvEdR3kn1KlTgfRl6fGuprywzYCAIAgCAICZguqe\/2BbHh\/lvr8Iz8XxroQm6LJlxM747iqqSEAQBAEBkdjau7h7V3YHfI48ZuRlFonAR9oYNlam6m8S1w+8cCO0I1sL06kqclKO85btDAvw9V1J+o6p3ObuIXLKNmfU4etGtTU4lhVPY3bkbsWwc\/UHScOgDuafpd59XevenG21mD4jis70cNy3+5ta9TLCAIAgCAIAgChko5JtT9NVjS98W5t6x0J3LmlvPq8P5UeiMnyK+dtn9V0XZZxujf7JVqe85vEvI+50hdB84EAQBAa5y7+a7pvbHHf1Rv\/BedXcaPhnnroznufjeheB9CdJ5G\/NGaaumNZuOvb+S6IcJ814h\/UP8APQziucRbxHUd5J9SpU4H0Zenxrqa8sM2AgCAIAgCAmYLqnv9gWx4f5b6\/CM\/F8a6EJuiyZcTO+O4qqkhAEAQBAZHY2ru4e1d2B3yOPGbkZRaJwBAar4QMODRY8Nl4eACNbSDI7pAXlVaS2s0\/C5tVWvSxq+xcLdXpNe02lwukGI7V4KUbrajWxNTLRk4vbY6iF2HyxVAEAQBAEAQBAFDByTa\/wCnqzrzj9cj1jqBouaW8+sw\/lR6IyfIj52I\/Vdpnw1nQdvcr095y+J+R9zpC9z50IAgCA13l181OvXbuy13ncvOruNDwzz10ZzvLs868D6I6XyO+aU9fpbvGOnEdq6IcJ8zj\/6iX56GbVzjLeI6jvJPqVKnA+jL0+NdTXlhmwEAQBAEAQEzBdU9\/sC2PD\/LfX4Rn4vjXQhN0WTLiZ3x3FVUkIAgCAIDI7G1d3D2ruwO+Rx4zci3yq2s7C4Z1ZjWuIc0Q6Y6RjctWlBTnZmZVnljc0n4y6\/1FLzu\/FdWqR5nhrMuRZxfLerWtJpUxE6F39blz1\/C4VrXk0elHHzpXsjwOVtT6tnnK514FTTups9n4rUezKjIfGJW+pped34rR1SPM49ZlyHxh1vqaXnd+KapHmxrMuQ+MOt9TS87vxTVI8xrUuQ+MOt9TS87vxTVI82NZlyMnyb5Y1cTiG0XUmNDg4yC6cmk7+5edXDqEbpnpTruUrG6LkOkIAhJRQDku1f09Xy3+N9I\/SOveuaW8+rw\/lR6IyfIn523yXdn+\/d9+5Xp7zl8T8j7nSF7nzoQBAEBrvLv5r\/fbv8AZv8A6K86vCaHhnn\/AGZzuf6heB9EdK5G\/NGd7t8\/SO7d3fiuiHCfNY\/z5fnoZxXOIt4jqO8k+pUqcD6MvT411NeWGbAQBAEAQBATMF1T3+wLY8P8t9fhGfi+NdCE3RZMuJnfHcVVSQgCAIAgMjsbV3cPau7A75HHjNyMX4SfmD\/Lp\/zLYw\/mGViOA5CtE4SVRGQVkQdRwHIegygDVYalQwM3EC5xiBGgE968XN3OqNGKW003lfsL3HXsaSWOFzJ11gjt3edekXc8KkMrMbszAur1W0manedGgauMbgpbsikY5nY6BhOR+FaLXNqVXDrEBxg6wbCGg56Ak5dq8nNndHC\/tu+5gOVHJZtJnP4ck0x1mmZbnBOeYgxIOlw1VozueFag6ZjuR2LZSxbKlR1rQHyc97SBp3rzxLtTZOEpyqVVGKuzfTyww9rj0pBgNjNwnrDcB3rJzo3V4dWzJcy58LcNcBebYm60wD+rETKZ0U\/T6+W9ilLlLTqtimYqSei4Z2g68OC5sVXdOneG+5fUJwl\/5FsMZ8M259I5f+2VaNDxBq9kcjr4RbLs13FbQwTnuc41AXEkgNcBnnkIUPCY7kjth4vTjFRTdl7E7k9jsMK00C41A09cGIyk5714V44vDxzzStuLa7DF\/wDju+fI6Iw5DuC0ottJszGrM9KSAgCA1DwhY8BjKI6zjceIaMh5z6ivOo\/Q1fC6Lc3U5GiXHivI3ToXIHHh9A0srqZ87XZg+eR5l603sPn\/ABOk41c\/ozaF6GaW8R1HeSfUqVOB9GXp8a6mvLDNgIAgCAIAgJmC6p7\/AGBbHh\/lvr8Iz8XxroQm6LJlxM747iqqSEAQBAEBkdjau7h7V3YHfI48ZuRi\/CT8wf5dP+ZbGH8wysRwHIVonCSaXVUog6bsnwiUuaaMQx\/ONAktALXECJEkQSvNwZ0RrK2007lVt44ytzltrWi1jd4EySe0n2L0irHjOWZkfYm1n4WpzjGsc6I6YJAzBkQRnkjVyIyyu6M5huX+JY0NDKMDi10knMk9LUnP71XIj2niZSldkbG8sq9VtRrqdKKoh0NdrBbcOl1oOvihFBJ3IlXlKKizX6HWXhjPJZ2+Df1cfv8A6MlvHcsP0PtDzuPf7VIMrye\/T\/3D6wuTGeV9znxPAa1tG\/nDExJiOMr6ynfJHoj4Gds76s8YymTblLozj+uMq5VGU5GUnDEyQR8m\/wBbVj+N\/wBN918ml4X5\/wBv4Ox09B3D1KkOFHtLiZ6VioQFHOAEnQaoSck25jjXrvqEGCYaD+qMmj+uK8HtZ9RhYRpUlG\/Ugf17VFme+aPMy3JjaBoYhj87D0X+Sd\/3GD9ymOxnLjacatJq+1bUdVXufMlvEdR3kn1KlTgfRl6fGuprywzYCAIAgCAICZguqe\/2BbHh\/lvr8Iz8XxroQm6LJlxM747iqqSEAQBAEBkdjau7h7V3YHfI48ZuRi\/CT8wf5dP+ZbGH8wysRwHIVonCSqOisiGOcCEHoFAVQBAZHB7Dr1aL69Nk02XXOuaItFxyJnQqMyLKDauiDQ6y5sZ5LNLwb+rj9zJbx3LE9D7Q87j3+1AZXk984\/uH1hcmM8v7nPieA1SrinBzhO867s19XS4I9EfBVF+99WSqji1stBJMZnt4q7kk0n6kRpyknJblv9jK8n8TZUBcM4tMadI5H0LF8XVSVPI9283\/AAqhRnF1IXUlsa9H7o63T0HcPUkOFHNLez0rFQgPFWoGgucQGgSSTAAGpJOgS1wYDbjMPXc0uxVNltMl4lpmhUfSfcDItk02Q\/PraZhXjdehDZCo7LwrWFr8XTPNw9zgWNik7C+5mTnlLC1128xkAQBbNK+4j7mW2e+jhmVBUxFMuDwajiWsDXOaGsaWybZawZE55lUd5bkTuMyqklvEdR3kn1KlTgfRl6fGuprywzYCAIAgCAICZguqe\/2BbHh\/lvr8Iz8XxroQm6LJlxM747iqqSEAQBAEBkdjau7h7V3YHfI48ZuRi\/CT8wf5dP8AmWxh\/MMrEcByFaJwkql1VKILUZaf1CAvU9PvPrUkHpAEBvXJTGU27MxTHVWtcedhhc0F00gBAOZk5Lzktp702lBo1fk5s73RiG0rrbg7OJ0aTp9y88Ur0mj1wFbQ11O195tZ5FVbXG9twMNG5zf1idx7FjaJn0\/6rByWzZ6lz4Dvut50WxJdbmHT1bZ07ZU6J3Kfqqy3y7S5guTT6Hyr3Auzba0TlORu+7SN648bTapfcmWPjVeRLZzNaqciahJPODMk9R28rtj4woxS0b2IxZeGttvOiY3kxUA6wOWlpC863iiqpfsaa9TswOG1eUs7TjJWaIFbAPoEXMInME5gx2qkq8q6\/czZwlHD04tUdlzp2xtoNr0mvb3OG9rhqCuqDujAxFGVKo4yJyseB4q1A1pc4hrWgkkmAAMySToFIIT9qYZ4LefpGWF\/Xb+jzBfE9UQc+wpZkXRrtTZWGbB92sbzTKVcXWQDTZRY2u6XZ0y2izo5dYmcxHqpPkQUGx8LTZVpuxjLRRdTIdZNPnm0Wmo7PeadMtECLt8iIzPkLEra9HDVHVH+66VN3ydxlhDZp1qeYJzuZWdHC0HPMKItr0DsZobSw9Ntpr0wGObSMvGT7QQw+NbBjhmqWbJuS8R1Hdx9S86nA+jPSnxLqa8sM2AgCAIAgCAmYLqnv9gWx4f5b6\/CM\/F8a6EJuiyZcTO+O4qqkhAEAQBAZHY2ru4e1d2B3yOPGbkQeX2EfVwT2UmOe4upm1okwHZ5LXoNKd2ZdaLcbI5h8G8Z9lrfuFd+lhzOLRy5EilydxcfNqv7hU6WHMaOXI9fB7F\/Zqv7hTSw5kaKfIfB7F\/Zqv7hTSw5jRT5D4PYv7NV\/cKaWHMaKfIfB7F\/Zqv7hTSw5jRz5D4PYv7NV\/cKaWHMnRz5Gc5F7HxFPGU31KFRrQHyXNIGbCBmvGvUi4WTPSjCSndo6Ws87ggCAKLAJYEPa2zm4imabu8He124hQ43Vj2oVnRnniaHs7F1MDiC14MTD27nN3OHrHmXhF5GbtWnDGUVKO\/0Og4XGU6gmm9rhrkR6RuXQmnuPn505wdpKx52jhBWpPpEkB7S2RqJGonJWTs7lGYrCcmmsqXmqXS59RwLQAatQVGuf2Niq4W9gM8budyMp4ZyVYAW844tNMsi0dY0GYc1J8im3o6TJTSCxWryZBqc4KzgQbqfRBDXHmryf1geZbkdJOekNJsIylhvI1rWtays8Bgc2n0Wm0VGubVmesSHGOHap0gyknHcmGVGvaKjmB5MwAei6h7ne3PeWybtx46Kqm0TYzVcdB3kn1LxqcEujPSnxLqa8sM2AgCAIAgCAmYLqnv9gWx4f5b6\/CM\/F8a6EJuiyZcTO+O4qqkhAEAQBAZHY2ru4e1d2B3yOPGbkZRaJwhLAIQEJCAIAgCAIAhAQBAEAQBAaj4QKAspvtzuLS7siQD5ivGqjW8KnaUo32W3Hg8nDRbTr4Z7nPFpcMoc0xNsbuzgmS21DXlVcqdZWW23sbivYyQgCAIAgCAt4jqO8k+pUqcD6MvT411NeWGbAQBAEAQBATMF1T3+wLY8P8t9fhGfi+NdCE3RZMuJnfHcVVSQgCAIAgJODxXNzlMxvXvQraJvZe541qWkS2kn318T0\/kunXvp7nhqfv2Hvr4np\/JNe+nuNT9+w99fE9P5Jr309xqfv2Hvr4np\/JNe+nuNT9+w99fE9P5Jr309xqfv2KDbAmLRMTF2cHQxHYU176e41P37Hr318T0\/kmvfT3Gp\/V2PI2vnFuY16Xm3Jr309xqfv2K++vien8k176e41P37D318T0\/kmvfT3Gp+\/Ye+vien8k176e41P37D318T0\/kmvfT3Gp+\/Ye+vien8k176e41P37D318T0\/kmvfT3Gp+\/Ye+vien8k176e41P37FrFYxlRpY+kHNOoJ\/LVQ8bfY49y0MNKEs0ZbTxgMQ2iwU2NNomAXzE7gSNEWNsrZe5NXDupLNJ7ehI99fE9P5Kde+nuU1P37D318T0\/kmvfT3Gp+\/Ye+vien8k176e41P37D318T0\/kmvfT3Gp+\/Ye+vien8k176e41P37D318T0\/kmvfT3Gp+\/YpU2nIIt1BGvH7lWWNzJrL3JjhLNO5jlwnYEAQBAEAQEzBdU9\/sC2PD\/AC31+EZ+L410ITdFky4md8dxVVJCAIAgCAIAgCAIAgCAwvKLYrq9r6TyyqyQDJEtP0SRmM170aqhskrovCVt5h8PsXaDjbUxJY3eRUJMdgH4r3dWgtqiWzw9EZDb2K97cE6pSaHlrmTzhJLi5waXOIzn8FShDWK2WWzocuIquEcxprPCbindXDUzGsXmO+Fovwukt8n2OFY2b9DKcm\/CPz1ZtHEUmsvIa17CYDjkA4HicpnevHEeG5IOUHe3oelLGZpWkjoMLJO8s4x7m03lgl4a4tHFwBtEd6tBJySe4rJtJ2NW5LbW2lVr24vCilSscbgwjpiLRJce3zLuxNHDQhelK7v+ehzUalaUrTVkbcs86wgCAqgNX5W7Tx9GowYPDiq0tJcS0mHTkMnDcu3C0sPOLdWVn+exzV6lWLWRXM3sWtVfh6b67LKrmgvbEWu3iJPrXNWjGM2oO69D2puTinLeTF5lwgCAIAgCAIAgCAIAgJmC6p7\/AGBbHh\/lvr8Iz8XxroQm6LJlxM747iqqSEAQBAEAQBAEAQBAEBrPLfZzqzac4wYWk0uNR1xBdIFo6wB36n7l24OooN\/szP0ObEQzJfusjmPKGhh6Jb7lxtSu7O85gDgWvGvp71tUJVJp6SCS\/PQzqijHglc2CvtGpX2C91V5e5tZrA49YtD2ESd5ziexcipxhjUoq2y\/Znu5uWG28zG8h9uHBUsVXFLnAOYa4XWxcagDpg5TA+9e2MoaeUIXtv8Ag88PV0alK3L5IvJ\/Z1XHY4VGshprc7UcB0GC+8gHjuA1V69SFCjlb22sub2WK04Sq1Lpetz3y2x9Vm0cRbVqC17SAHOgQxh6sxruUYOnF4eN0t3yya85Kq7M2jk7sDG0BiMTiXg85hqsg1HGoHkBzScoGh0OS4sRiKNTLTprdJemw6KVKpG8peqMN4LMVUdjgHVHuHNVMnOcRMszgldHiUIqjdL1XyeWDk3U2v0LO3NvYraGM9z0XuawvLKbGuLWkAkXvIzOQJ7BuV6OHpYelnkttrt\/wVqVZ1Z5Uzxt3YeM2ZzdUYgw4wHU3OEOibXNORETrOiUa9HFXi4\/5FSlUo2dzY9qbffitiOrEltVr2MeWEjpCo3MRpIIMdq5KeHVLGKPpZtf4PedVzw+b1NQ2Bgcbjr6FKq6wQ999RwaDmGycyd8DTIrvr1KNC05LbuVkc1ONSp+1My3hB56h7jpOqODm4cNfY91pc0wTOU6aleGByTzyS2ZvVHpic0cqv6HQ+RTy7Z+GLiSTSbJJknvJWTjElXmlzO\/Du9KJmlzHsEAQBAEAQBAEAQBAEBMwXVPf7Atjw\/y31+EZ+L410ITdFky4md8dxVVJCAIAgCAIAgCAIAgCA474VaNYYwveHc0WNFInqDLpNnQOuknvC+h8McNFZb\/AF5mTjFLSXe70I2224R2ApVcJQez5bm3vfBe8ikXOzBPRkjh3K9HTKu41JX2XsvTaVqZHTTgvX4J2GH\/AACr\/wDIH81NeUv65f8Ar\/Jdf0z6\/wAE\/wADzenipH0aWvfUXl4ruh9\/gvgd8vsdOaIyGSxTSOHctB\/xSv8AtGfyMX02E\/po9H\/tmNX859Tsu2\/m1f8AZVP5CvnaPmR6o1qnA+hyjwUD+3j9jU9bFu+J+R918mZg\/M+xY2xsyvszGiu1hLG1C+m+CWFpnoOI0MEj0q1KrTxNHI3ttZr1K1ISo1M1ivKTlXV2nzdGnQgNddawl7nPiBoBAAJ86YfCRwt5OX+dhNWvKtZJfJsG09iuwmwn06n6Rz2PeBuLqjAG\/cAPSuWnXVbGqS3Wa7HtOm6eHs9568DgyxPfS\/8A2o8W\/wCH3+CcD\/yIXhgH9oofsnfzr08K8uXUpjuJG88h\/wD0\/C\/smrMxnnz6nZhvKj0M2uY9wgCAIAgCAIAgCAIAgJmC6p7\/AGBbHh\/lvr8Iz8XxroQm6LJlxM747iqqSEAQBAEBD2vjjRpXhocbqbYJIHTqNZJIBOV06bl6U4Z5W6\/6KTllVzH4\/bzqQbLGEljnxe4TDg0MZLM3Gd9ufnXpCgpX2+tv+9p5yqtF9u2DztZha0NokyZcXkCk2oSG22\/SiLtyrov2p+r\/AJtz+CdJta5Fqvtp9NhdUpNE0Kldga+cqYaXMcS3I9NuYka8BNlRUnZP1S\/yNI0tq9Ll7ae1jSvAYCWmgM3EA888skw0nKJ0M9irClmtt59iZ1LdjxW20WOpBzBFRj3FwcYa4ENYIc0GHEgTlBIEGVKo3Ts9xDq2tc9HHVHOpNFKmW1WX9J5kABhcLbCD18s925Rkik3d3X5zJzNtK28k1KxbU5qmxslheJNrZDmtgwD+tr2KqV1mbJbs7JGP9+nijRqOp0wazoAvcQBzb3ySKcz0IgDfqvTQrM0nu\/nqU0jyp23nurtyyo6m6n1aAqgtPWcSRzQBAM5CCdZOQhQqN4pp+tv\/pOks7W9Lnlu3HRQJphoqspOJc823VCAabX22lwmYdbdIA3xOhX7tu6\/b1\/Nw0r2bN5fwW0n1XVGtYzoOqNEudJLHlknoQAYnIkhVlTUUm3y7\/cmM3Jsv7KxT6rL3sa3NwAa4u6rnNMy0fqqtSKi7Jkwk2rsx2z+UXOjDfJQ6uXB4u\/RBrSQZjpT0Y0yM7l6zoZc23d3KRq3ts3lX8oIsml0X0TUm7IPzspkRo61wu42iM0VDft3Ow0vsXMTtXmmuLKAcQaPRaQC4VczGWoEwN54KFTzNXfPsHUtuXI9jbF8CmGm5z4c50M5tjGvNQkDx25duqjRW3\/j5E6S+4kU9pNGHOIfaGtY57rXBzYbMlrxkRkYPoGio6bz5EXU1lzMsbP2wKrKLrWzUe+m614c1jmNqF0OA6QmnkcsiCrTpZW1y2\/5t\/JWNTMl7lcZtUsc8BrLaZY1xfUDCXPAdayRE2kHMiSY7UjSul7+1w6lnsKVNrOBLrBzQrNok3G+5zxSuDYiA9wETpJ7EVJbr7bX+f8AQ0j322XsRafKMk1fk2\/JtxLoDyXf2d5Z0gWgC6MoJhXeH3bd9u6+Cqrb9nPsT3Y2r7oZSFNlr2Ofde64NaabXC2yJ+Uyz3LzyRyOV\/b\/AH7+xbPLMlYs4bbrH2AAXOFQkTm3mwezOYVnRav9u5CqplnAcoedOGHNQa4feLv0TmtcbdOlJY8A5ZNlTOhlzbd3cRq3ts3mcXOewQBAEAQBATMF1T3+wLY8P8t9fhGfi+NdCE3RZMuJnfHcVVSQgCAIAgLdeg14AcJAc1w8pjg5py4EBSpNbiGk95bxOCZUuvbNzHUzmc2O6wy9eqtGbju6kOKe88s2ewPc8XS8y4XusJtDJLJt0aN25HUdkiMivcs09i0hIhzmmm6la57nNFN0SwAnIZDTgOAizrS73+5CpxPR2RTLS03m5zHFxqPvmmQWQ+ZAEaDt4lRpZXv8cxo42seq2y6T2lrw5wLHUyXPcXWOIJF0zMgQdRAhFUknddSXTi1Zns0qbDTkhtgLGS7cQ0ECTn1WqLydxaKsXuYF4qR0g0tnxSQSI7wFW7tYtZXuR37MpllNkOApmWWvc0tNpb1gZ0cR96uqkrt8yrgrJci3W2dRL2F4l4LC255uJpXWHM5xe6eM5oqk0nbd\/JDhG+0odl0ZazMWNptDA90FjCTTDmzmAQddYOqnST2v89xkiX8NgG03FzbxcXOIvcWXPdc4hhMCSSdN6rKbkrMlQSd0e2tZSZEhjASZcYEuJJzPaSo2yfuTsiiNhNkUGFr6bNObtIcSPk2Gmw6\/quI7cpV5VZvY3+PaVVOK2oVNkUHsNMslpYKZFx6k3DMGQZzB1RVZp397jRxasXX4OkDJAHUdmT\/yuqdd3+6rnl+e5OWJZZsii0BrQWG99Rtr3Bwe7r2mZiDFugEZZBW0s3tfQjRx3F9mzqYpikGmwEGC5xMh9+biZPSzMnPequpLNm9ScitY8Vtl03G4hwN\/OS17mm\/m+bmWkfRyhSqkl\/rvcOEWecRsik+br8w1roe4XhvVvg5kcdTvlI1ZLcQ6cWenbMpl95DusHltxsNQRDyyYnIHvAOuaaSVrE6NXuHbLpERbkRWGp0ruvrDXec+zdCaSX+u24aOP57kj3O29r46TWuYDwa4tJEd7G+ZVzO1icqvcttwNMBoDcmBwbmcg4Q71qc8iMiLOH2RRY4PayHAtIMnVtM0m6n9VzhHEk65qXVm1Zv8vcKnFO5OXmXCAIAgCAICZguqe\/2BbHh\/lvr8Iz8XxroQWuEarKlF3ew7YyVitw4qMsuRbMhcOKZZchmQuHFMsuQzIXDimWXIZkLhxTLLkMyFw4pllyGZC4cUyy5DMhcOKZZchmQuHFMsuQzIXDimWXIZkLhxTLLkMyIG0tnNrFpLotkaAyDrroe1ekJSh6HnNKXqUxWy2PqCoXugAAtB6LgJmd+fQ\/wx2yjOSja35+f7DjFu9yL7wNtjn6l0zfIumJ4R+k+U78tMlfSyvw\/n\/Wwro48\/z82krE7Ma+OmWw0sFsA2lrmgT2Xb5zA0zmkZSXoWcU\/UtjYlPKTP3AZRVEN4ACs4ADSAraSfL82fwRkjz\/PxnmnsRot+VebXF0kiSTE594cf77uyDqSf\/EjIuZ7p7HYL4e6HsFOJyADWtyGn0Z73O4qHObts3O5OSO3aVq7Ja57n3ulz2P1kAtmBBy35cEU5JWsHCN73DdkUxaLj0Yt0yIORHb29pTPPkMkeZHo7CFjmvqHpXCWEtMOY1kuIPScbZM5EnOVZ1JXTSIUFazZdqbGbD4qGXuc43ZjpGSI9HcAFCqS2bCci5l73tb0BeYYHAaZXQcuBEQCNASFXNLbs3k5VzI52DTIALzlMRAiWuHRG7Mh3lNBVtLPkV0ceZmLhxXjllyPXMuZS4cUyy5E5kLhxTLLkMyFw4pllyGZC4cUyy5DMhcOKZZchmQuHFMsuQzIXDimWXIZkLhxTLLkMyFw4pllyGZC4cUyy5DMhcOKZZchmRNwR6J7\/AGBa\/h6apvr8Iz8U\/wB66H\/\/2Q==',width=400,height=400)","9e4fe128":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns #visualization\nimport matplotlib.pyplot as plt #visualization\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\nimport squarify\nplt.style.use('fivethirtyeight')\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6eb8fb74":"!pip install squarify","4dbae9eb":"data = pd.read_csv('..\/input\/hackathon\/task_2-BCG_strain_per_country-8Nov2020.csv', encoding='ISO-8859-2')\ndata.head()","e6e3cb30":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom wordcloud import WordCloud\n\nplt.rcParams['figure.figsize'] = (15, 15)\nwordcloud = WordCloud(background_color = 'white', width = 1200,  height = 1200, max_words = 100).generate(str(data[\"BCG Atlas: BCG Strain\"]))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('BCG Atlas: BCG Strain',fontsize = 20)\nplt.show()","db1b3393":"# looking at the frequency of Mandatory BCG Strain 2015-2020\n\nplt.rcParams['figure.figsize'] = (18, 10)\ncolor = plt.cm.copper(np.linspace(0, 1, 40))\ndata[\"mandatory_bcg_strain_2015-2020\"].value_counts().head(50).plot.bar(color = color)\nplt.title('Mandatory BCG Strain 2015-2020', fontsize = 20)\nplt.xticks(rotation = 90 )\nplt.grid()\nplt.show()","7267a2b9":"# looking at the frequency of BCG Strain\n\nplt.rcParams['figure.figsize'] = (18, 10)\ncolor = plt.cm.rainbow(np.linspace(0, 1, 40))\ndata[\"BCG Atlas: BCG Strain\"].value_counts().head(50).plot.bar(color = color)\nplt.title('BCG Strain', fontsize = 20)\nplt.xticks(rotation = 90 )\nplt.grid()\nplt.show()","fe629e09":"y = data[\"BCG Atlas: BCG Strain\"].value_counts().head(50).to_frame()\ny.index\ny.head()","bf4440aa":"# plotting a tree map\n\nplt.rcParams['figure.figsize'] = (20, 20)\ncolor = plt.cm.cool(np.linspace(0, 1,10))\nsquarify.plot(sizes = y.values, label = y.index, alpha=.8, color = color)\nplt.title('Tree Map of BCG Strain')\nplt.axis('off')\nplt.show()","24b5d3b1":"data['strain'] = 'Strain'\nstrain = data.truncate(before = -1, after = 15)","7a31ab56":"data.head()","08c40ade":"import networkx as nx\n\nstrain = nx.from_pandas_edgelist(strain, source = 'strain', target = \"BCG Atlas: BCG Strain\", edge_attr = True)","383686fa":"import warnings\nwarnings.filterwarnings('ignore')\n\nplt.rcParams['figure.figsize'] = (20, 20)\npos = nx.spring_layout(strain)\ncolor = plt.cm.Wistia(np.linspace(0, 15, 1))\nnx.draw_networkx_nodes(strain, pos, node_size = 15000, node_color = color)\nnx.draw_networkx_edges(strain, pos, width = 3, alpha = 0.6, edge_color = 'black')\nnx.draw_networkx_labels(strain, pos, font_size = 20, font_family = 'sans-serif')\nplt.axis('off')\nplt.grid()\nplt.title('BCG Strain', fontsize = 40)\nplt.show()","944578ea":"data['timing'] = 'Timing'\ntiming = data.truncate(before = -1, after = 15)\ntiming = nx.from_pandas_edgelist(timing, source = 'strain', target = \"BCG Atlas: Timing of 1st BCG?\", edge_attr = True)","e24182ab":"data.head()","e7c2be5c":"import warnings\nwarnings.filterwarnings('ignore')\n\nplt.rcParams['figure.figsize'] = (20, 20)\npos = nx.spring_layout(timing)\ncolor = plt.cm.Blues(np.linspace(0, 15, 1))\nnx.draw_networkx_nodes(timing, pos, node_size = 15000, node_color = color)\nnx.draw_networkx_edges(timing, pos, width = 3, alpha = 0.6, edge_color = 'brown')\nnx.draw_networkx_labels(timing, pos, font_size = 20, font_family = 'sans-serif')\nplt.axis('off')\nplt.grid()\nplt.title('BCG Time to Vaccinate', fontsize = 40)\nplt.show()","ca0eb66f":"data['mandatory'] = 'Mandatory'\ntiming = data.truncate(before = -1, after = 10)\ntiming = nx.from_pandas_edgelist(timing, source = 'strain', target = \"mandatory_bcg_strain_2015-2020\", edge_attr = True)","e19a944d":"import warnings\nwarnings.filterwarnings('ignore')\n\nplt.rcParams['figure.figsize'] = (20, 20)\npos = nx.spring_layout(timing)\ncolor = plt.cm.Reds(np.linspace(0, 15, 1))\nnx.draw_networkx_nodes(timing, pos, node_size = 15000, node_color = color)\nnx.draw_networkx_edges(timing, pos, width = 3, alpha = 0.6, edge_color = 'pink')\nnx.draw_networkx_labels(timing, pos, font_size = 20, font_family = 'sans-serif')\nplt.axis('off')\nplt.grid()\nplt.title('Mandatory BCG Strain 2015-2020  ', fontsize = 40)\nplt.show()","d0bf98ec":"data['mandatory2'] = 'Mandatory2'\ntiming = data.truncate(before = -1, after = 10)\ntiming = nx.from_pandas_edgelist(timing, source = 'strain', target = \"mandatory_bcg_strain_1950-1960\", edge_attr = True)","99519e58":"import warnings\nwarnings.filterwarnings('ignore')\n\nplt.rcParams['figure.figsize'] = (20, 20)\npos = nx.spring_layout(timing)\ncolor = plt.cm.Reds(np.linspace(0, 15, 1))\nnx.draw_networkx_nodes(timing, pos, node_size = 15000, node_color = color)\nnx.draw_networkx_edges(timing, pos, width = 3, alpha = 0.6, edge_color = 'green')\nnx.draw_networkx_labels(timing, pos, font_size = 20, font_family = 'sans-serif')\nplt.axis('off')\nplt.grid()\nplt.title('Mandatory BCG Strain 1950-1960', fontsize = 40)\nplt.show()","00dd43c5":"# making each customers shopping items an identical list\ntrans = []\nfor i in range(0, 7501):\n    trans.append([str(data.values[i,j]) for j in range(0, 20)])\n\n# conveting it into an numpy array\ntrans = np.array(trans)\n\n# checking the shape of the array\nprint(trans.shape)","2b7a3e0c":"print(trans)","b17e4495":"import pandas as pd\nfrom mlxtend.preprocessing import TransactionEncoder\n\nte = TransactionEncoder()\ndata = te.fit_transform(trans)\ndata = pd.DataFrame(data, columns = te.columns_)\n\n# getting the shape of the data\ndata.shape","6c318a7f":"data.head()","4aaddfee":"data.columns","c6da8658":"data.info()","2eb2d233":"data.columns.values","236487da":"import warnings\nwarnings.filterwarnings('ignore')\n\n\n\ndata = data.loc[:, ['\\t2018: Revaccination of children 7 years and older with negative TST test discontinued ',\n       '\\tAt birth (3-5 days)',\n       '\\tCurrent national BCG vaccination policy for all',\n       '        99% in 2019',\n       '        Current national BCG vaccination policy for all',\n       '0_1_years_old', '1925', '1927', '1927, 1946, 1980s, 1986, 1990',\n       '1927, 1968, 1994, 2006',\n       \n       'ZA', 'ZM', 'ZW', 'Zambia', 'Zimbabwe',\n       'https:\/\/docs.google.com\/spreadsheets\/d\/1fINJWmJ8mA6TIi4oW5Y8cyPG4XzNdS8XSybfimg-49U\/edit#gid=0',\n       'https:\/\/docs.google.com\/spreadsheets\/d\/1y9kGMqyl0AGAH7fzwNNrTsUU0cRaKApEOk4a5vbcOds\/edit#gid=0',\n       'mid 1950s', 'nan', '~ 2000']]\n\n# checking the shape\ndata.shape","bb52dcb6":"# let's check the columns\n\ndata.columns","d2c27787":"# getting the head of the data\n\ndata.head()","5f8d4cbc":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxISEBUSEhIWFRUXFRcVFRcVFRYXFRUVFRUXFhUVFRUYHiggGBolHRYVITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGxAQGy0dHyUtLS0tLSsrLy0tLS8rLS0tLS0tLS0tLS0rLS0tLS0tLS0rLS0tLS0rLS0tLS0tLS0tLf\/AABEIAKgBKwMBEQACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAAAAQIDBAUGBwj\/xABMEAACAQIDBAQJCQUGAwkAAAABAhEAAwQSIQUTIjEGFEFRMlJhc4GSk9HSFSMzQlRxkbGyB0NTcrM0Y2ShwvBiosEWJCVEgoO0w9P\/xAAaAQEAAwEBAQAAAAAAAAAAAAAAAQIEAwUG\/8QAOBEAAgECAwYEAwUJAQEAAAAAAAECAxEEE1ESITEyQWEFFHGRgaHBIjNisdEGFRZCUlOS4fBDI\/\/aAAwDAQACEQMRAD8A7zIfJXhHp3FyGpJuJkNBcMp7qgXQmU0FxcpoLhlNSRtChTUi4oU1JG0LlP8AuaEXFCn\/AHNSLihTUi4oFCLhFTYXFy0FwipFwy1NhcMtCLhloLhloLhlpYXDLUWJuGWguJlqBtCEVBNxCKC40rUC40rQm4FagXGlKixNxClQTc5rpHi7lu5cCOVAwjXBEaOLoAblzg1rw9OMknJfzfQyV6sotpO32fmRttG8blqxIF4b0OPq3Iss1q5\/KSJ8hBFTkws5dN3w37yM+d1H+b8924XZuIuKwW8cQLhtswW6LW7ZljNkyconlPI0nTjJfZta\/S9xCpKPNe9utrfIlG1sMTlF0m4YUat9LmYFSnPsXs7TXZ4V9VuOPmVx2t5We9cfE3FBv5QLJAtC1lXOgLZ8+vPu8tcdiEaae6+\/idsycqjW+27gatu4GuEcZhyogHII7z2+msltxs39S9uhVCbmpVjmWsJhQ4YsxAEDlMzy0\/Cu9Gippts5VKmwTdQTxn9k\/urt5aOr9jlnvQOoJ4z+yf3U8tHV+wz3oHUE8Z\/ZP7qeWjq\/YZ70DqKeM\/sn91R5WOr9hnvQOop4z+yf3VPlo6v2Ge9BRgU8Z\/ZP7qeWjq\/YZ70DqSeM\/sn91T5eOr9hnvQXqSeM\/sn91PLx1fsRnPQOpJ4z+yf3VORHV+wznoHU08Z\/ZP7qZEdX7DOegdTTvf2T+6mRHV+wznoHU0739k\/uqciOr9hnPQOpp3v7J\/dTJjq\/YZz0Dqad7+yf3UyY6v2Gc9Bepp3v7J\/dTJj39hndhOpp3v7J\/dTJj39hndg6mne\/sn91MmOr9hm9g6mne\/sn91MmOr9hm9g6mne\/sn91MmOr9hnPQOpp3v7J\/dTJjq\/YZzDqSd7+yf3UyY6v2Gcw6kne\/sn91MiOr9hnMTqSeM\/sn91RkR1fsM56B1FPGf2T+6mRHV+xOc9BOoJ4z+yf3U8vHV+wz3oJ8np3v7J\/dUeXjq\/YZ70D5Ot+M\/sn91PLx1fsM96CfJtvxn9k\/up5aOr9hnvQT5Mt+M\/sn91R5aOr9ifMPQqYro3h7hJcOSUNs\/N3NUJzFdPKKvGjs8JP2KSqKXFFDFbCLXAxsZioZUc7wcLAqQRk7QeWvM0VGyaUnb0Dqpu7iR2OjS2rha3YPg5QzG6WAOWVGYNAnNyiYFWlT2lZyfsRGai7qIq9HPrFGzZicvGVIKwTmySCeR5ggGanZbVtp+xW8b32R42Q6tcuLaAZlBaXdS27WAeJOyQNB\/0rlKgnGzb3djrGt9q6XErjZqZs4zKZlgGMEnnmHI1iv0Nu07WLBsjy1UguTUlTR2d4Dfz2v1ituG5X6ozV+KNit5nCgCgCgCgCgCgOaxHSjLtJcJuwbULbe9PgYm4j3bVmPLbSZ73TvoDLxnTe5bxV21GHYW8Xbwy2d4wxVwXFtE3Laahgu8OkAQh1FAFrptc6wUIw7DrzYMWVuN1rKLpti9u9QVHhHkAATNAWrPSu9dbc2rVvfNi8XYTOzC2trBvla68asfB4REluYFARbQ6XX7Ia1dSwl9MRYtM7O3VzaxCsyXpMMvgMCp5FTqdDQEmB6Xu6Iclpv+\/pgzctOz2biumc3LLQJicpGoBB1NAXOmHSc4LdZbYuElrl4SZt4S1l394RzK51gdtAX8NtUvjruFhcqYezeDAmWN17qkd0RbB9NAZVjpJduvnRsLZw++eyhxFxhdv7p93da2oICjMCB4ROhMTQBe2\/i3GJvYazZazh3uW8tx2F2+1n6bIQMtuDKjNMkawKAz9q9OyjsbZwwtjCWcUgxFxrdy9vt5Fu3E8XAByOrCgNXDbbxN976WbdtDaGHYC9nnLes7xlYLyYGB+NAZmG6Y3lwuDxeJGHt2sVdtLILjdJcs3rrF2YxMogHZqfJQCbT6dnd4x8ILOIFhsIlohyVuPirm7YMy9x7qAs3OmubFYCzZQMmJVXus0hrQu27j2lA8Y7i8CDyyUA7a3Sl7ePbCC5hLUJZZDiGcNda8XGVAp1jKPWFASbQ6S37WJOCFhTfuOpwp4t09g\/S3Lh+qbcNKzxSkeFoBNtPpQbWPtYbdg2zkW\/dmN1cv5xhkj\/AIjbI8mZO+gKa9Ncl\/H271sBcMrNZKklrwtqmdY8YNctCB\/EFAULfTi+beFNwYTDteTFNcN+4y2kbC3ltZFeeZzHXyUBtdHekz4q5YU2d2LuD6yQSSytvRbgSBKkagwDBFAV9odKHTHvhBdwlrLucgvs4uXWvDkgB1MwPSKA62gCgCgCgKW0eR81d\/0VyqfRlo8yOamvHPQCaAsZhUizNHZpGRv57X6xW3Dcr9UZcRxRs1vM4UAUBnDbNrXNKxHMTMl1EZSe221AKu2rGpzwAYkg6yJ0\/A\/hQDrm1bYyRLBwSGWIgOiTqQTrcXkD+VAXqA5W90Fw7rcZmJxD3jf6xHGlwOHt5VmIUKqgdwoDY2XsZLN3EXQczX729JKiVO7t28qnnEWwfSaAzbXRC2lwXUuMt4Yq9iRcCicuIabthh9a2Rp6AeYoBB0RVeK1fe3dGJxGJS4FU5TiWLXLTIdHQz5DoDIigAdEVY57t5rt04i1iLjsqgPuVK27QQaJbAJ01OpOs0A+x0TRES0l1hatYpcTZtwItgZibKn+HLEjumOUUBJj+ieHxGIuX8Su+zWlsojeDbQZi+WDqWLaz4o7qAqYLoldssr2sa6sMPawxLWrbl0sNcNsnN9aLhB74oCLGdBw6taXEsthr4xBtG2jFLm9W+26uHiRWdZI15kCBQFrF9FmY31tYu5Zs4hma9bVUJzOIuG1cIm3m7eepJEGgExvQvD3DcMlc1mxZtZQM1g4Zna1ctsdcwL\/AHcPlNAaOztkbu7fum4Xe+LQfhCgG1b3cgDv5xQFTD9FkWxgrG8YjBujoYE3N3auWgGHZpcJ07qAbtHool177m4y798I5AAhTg7guKB35iNaAiwvQyzbui4tx5GMOLAMECbVy2LI7rY3txh5WNAWMXsC4cVcxNnFG01xLdtl3Vu4ItZ8pGbkeM\/5UBHi+iaXLj32ut1g3Ee1eAGawLWiWrY8SC+YHwt409kAV8Z0Fw90YhrhLX79w3N\/EPaYBRa3YmIQIsT3UA+70MtPdF17jFutjFmAAGO7tqbR70LWrbx3qKAl2d0Tt2rlly5fcjEgBlWD1q8t5ie7KVgeSgLG0tiXLmJXE2sSbLiybJAto4Kl888XIyBQEL9H7wv3L9vFlGuLaVxubbAm0pUMM3KZJgUB0FAFAFAFAUto8j5q7+aVyq\/RlocyOakd9eOejYJoLCb2oLWNXY7SjectfrFbsLyv1RkxXFG9XoGUKABQGSt68CQcOpEiIETLPxTrELknSZnsigFXGNmRThsuZo1I0jWeWukns5eUUBYuM4giyJDx2HhgnMI5SQPxoCfCuxXjABk8pAInhMHXlHpnsoCagCgCgG3bgVSzGAAST3ACSaALbSJgj7+dAVNq4s2kzCOZmQToEZjoCPFrD4hip4akpwSbbS39y0I3ZjL0qTxhOXNG6ckAKHMw3MKQa8V+M41f+UdOb4HXLjqOfpQgJBdQRzBtXAZzi3Grc8xA9NQvGsa7WpR3\/i7X\/IZcdRP+03NiVCDLxG2+uYFpjNoMuusUXjmKa3U430uMqOpIeka5wmdcxj92+mZxbEnNpxMB6ao\/HcYouToqy7+r+gyo6mxs7EG4hLRIZl0kCAdDqTX0Hh+KlisPGtJWb6fFo5TVnYs1sKhQBQCM0CaAgwWJzqs6MVBZRPCSASNe7MKAzU6QoZByAhVZg1yCocArPD5RXzs\/2gjF\/dSe9rp0O2V3HDbyTGa1Pdvh8NVf7RJK+TMZXcDt5IBm1BBI+d5gTJHDryP4U\/iON7ZM\/kMnuNs7fVgDwDNmyzdjMEJBYcPLSfTVqn7QwhJxypO1r8OquFSepL8srmyfN5vF3vFqJGmXurn\/ABLDZ2smdvgMnuXcFit4CYghipEzyAMzA769zBYqOKoRrRVk9fWxzlHZdixWoqFAFAFAUdqeC3mbv+iuVX6MtDmRx5evGPUsKHoRYloSbGw\/Afzlr9YrdheV+qMeK4o6CvQMoUBV2hdZVGTQlgNfuJ\/6Vh8SxMsNhpVYcUWgruxzvy7iRkm3GYISTOVcy3mIJ3cyDaQcv3g8k+AvGsS27Nbr\/wAumz+Lv8jrlolxG276uoysQwsyIXNb3m+zFuEiBu1HZzOtVpeN4qcJO8U030dnb4kunFMS30huMJFq\/HbNtB9Vn5Ht4SI7yB20l4tjo7nKn8+y+oy49y7gdovdDHjXKxWGVRMAGRpqNfz7qy1\/2gx1JpNQd1fcn+pKpRZobOvs2fMZyvlGkaZEbWPKxr6nwvFTxOFhVqbm78OzaOM4qMrIt16BQKAa6BgQQCCCCDqCDoQRQCW7QWY7f9+\/8aAq7TtBt2DMbzsJH7u52iqzo06y2aiUloznVk4xutxn4nZ6hreRTBfK5zXDC5HI+tyzBR6a4vwzCf2o+xmWIqf1EOz9nkki8muRJIZwCxLZwOIyuinmeZovDMJ\/aj7B4ip0kyYbNtG8wKmMiHw355m15+SpXhuE4ZcfYZ9S3Eiw+ywb7lrZCjRGLmTMSQQ8gffz8nIv3dhbbOXG3oHXnbmNTZFsKjKOQuPEknt7zrXWFKFJbEFZLojVTk5RTZeqxcKAKAKAANZoDibWyldAzO0sqE6INVVQp8HmAAJr5p4Kmpbr9fmekqUWiC1aEKqhgua6i\/RgA2WaJ4JEshPk0qX4dTbu2+nXtb8iuxElwWyrbJbuKXEoGEhJAYFoaV1jMefKTSWDhvV2WVKLVwwmzAyjM7nI91VnJy3jDXh19NJ4KltNrra\/wSIjSTRX2ThUuO9xXfmgkXFcMVzZSQU8ITzMjlBMVNTA09nZf\/X+gjTi951nR8EW3BJY71tTEnRecAV7GBpRpUIwhwV\/zZjrK02jUrWcgoAoAoChtXwW8zd\/0Vyq\/RlocyONyny14x6woX76FWW8tCDX2KOB\/OWv1it2F5X6ox4nijer0DMFAU9poGVQwBBcaESOTdhrnVScd5So7RObvYG79Xc83g5bPghrnPh8IKbURoCDmntzbENPkZtphawXzh0thsuGJOW3DIb1\/MPBjMU8WNRpTYjbh8idpls4M725CWioThDLbgPplPCubL4Uzy7JnhjYhbh8iu07cSbZuCG6XepaZ9cxVVKnUwQQo7I7KhwhoQ5u\/E0NkoF3oUADe8gIH0VrsFa6SSgrGqk7xRfrodAoAoAoCtjedv8An\/8AruVaHE41+QobXBISHC8bc8xzfM3exCCY8KJHgcwYrozFErbAUAvlu7wcI5MsMGuZjkbwdeGBpwURaZfX6dvNr+p6Ff5StgwOs3TvJOVZTKwgSYaSSG7Rppp2UJfA0Nm+C\/nH\/OuUuJuo8iLdQdAoAoAoAFAczg\/o0\/kX8hXiy5metHgjM3d4kzITNdLxuzmXO+UZSJ1TJxT6OZrp9kp9o08GG3aZ4DZFzRyzZRmiPLNc5cdx0XAj2d4Ledu\/1Wq0+Pt+RWPAZs9bwL71pEjJOWRpxA5QARPI6c+QjWJW6CN+pt7C8B\/Ot+S16eH+7R59f7xmlXY5BQBQBQFHangt5m7\/AKK5Vfoy0OZHGknvrxj1BM576CxoxUkGpskcDectfrFbcLyv1RjxPFG5XoGYKAq7Q5L\/ADj9LVSpynOrys4zc4USC1\/MCoeRanMUbdTAjUTAGkABuEAVx3mfeWTYtMwBNzJFheSSWe9iUyvoQFzNrlgdnLSo6C+4v3bVtr16d4SbTK0BMgVgkgaeEdIz89eYGkb7Fd9h2AxttFtoN4QzOAWA4WFzKUc8l4jlUDugcqNBo1tmc7vnR\/RtVop8qNVLkRBjEutcDJvEgZSMttgdSZ1fTs5RPbOkXOhHurxENnfW2dUtgcAhtBc1zHXyUBYtX3tpbQ2r1wjJbLfNk9im40vy7TzP30BoUBldIsQ1tEZYnedvlt3K0YaCnOzPI8bxM8PhXUp8bo5raG2XO7zQeMxA1+iuT98jMI8tb5Yamj5Kj41i533pWWncrbG2y8uQmQmJDST4dzmW1knM09ueqww8JdGjrivF8VStaUZfD07l0bZu70mV8Bez\/iareWp7Rx\/fmKytrdxtw7DLG1bguu0AGF4tTIMkgA6LqOzvosNC7Qn45ilTjJNO991uFvidL0bvF7JY8zcuTHkYivNrxUajSPtPCq86+EhUnxd\/zZqVyPRIbmFVjJmfI7j\/ACBoCG\/sy06lGDEMIPzlwaHyhpFAXANKABQHM4P6NP5F\/IV40uZnrR5UYb27W8UG4C4e868BlvnLsqWHZJdSIPg6Qa63duBzsjawCgWrYDZgEUBvGAUQ3p51xlxOq4DdneC3nbv9VqtPj7fkVjwKuxrdsG7kaTmUMMhQKQunCe0gg6QO4CTKbe64glvOi2F4D+db8lr0sP8Ado8+v94zSrscgoAoAoCjtPk3mbv+iuVX6MtDmRyRSvGPUuJkoLl2KsUNTZXgN5y1+sVtwvK\/VGTEcUbdbzOFAU9puFVSxAAcSSYA0PaapU5TnU5TkxtUa\/8Ad7SwWAByNKsGzGUMCAFkfWzQOWvDZM+ySfKgV5UW5NuysRwjK+IIMDwB4J7SsjQ1OzuGzuL1rHWjiLinc5SvhjLLCEkOxMNMmAJ0TWNAa2ditnYtrewwyw1nhnLqnDPPL3eiosyLMubJcNvSpBBu6EGQfmrQ0IrTT5TXS5UX6udAoAoAoCptAeAcpYB5ICljGRxMDykVaLszjXhtxta5nbQuOQotI44jmO6Og3b5Tqvj7v8A3NdNvuZFhfwr5EWy3ujMLyOdFyndRJl5kKO7J6Ziin3EsKukUWQw3pbdPGRR9E3MMxPZ5RTb7jy262yvkRWGub5yyObcDIN1yaTJEKDBEc+Uds6NvuHhVblXsaWzFIRpUrLuQCIME6GDyrlJ3ZtpR2YJcC3UHQKAKAKAKAy7exFUAC9dgAAfRchp\/DrO8LBu53WImir\/ANl7f8W94TMNbUBmYvMbuCQzEiQYJqfLwIz5FixsFUVUW7dAUBQPmtABA\/d1Dw0GSsRNBZ2EqggXrupZv3XNmLH933k0eGgwsRNDbHR22klbt0ExOtsmByGqaASYHITR4aD4hYiaNDA4QWlKhmaWLEtEyY8UAdndXaEVFWRylJyd2Oxt\/d2nuBS2RGbKJlsoJgQDzjuNWKmIek0c7aj\/AN0j9VsUBNhuk1pz4LacyhS4B6LbFv8AKgNm1cDKGUyCAQR2giQaAp7S5HzV3\/RXKr9GWhzI5afJXjHpB6KA59enuDJgG6T2AW2JPoFafLTOGdEvYT9o2Bthlc3Qc1toNppgMCdPuFaaFNwTT7HCrJTs0dp0c29axtk3rObJnZBmEElYkx2DWtadzlY1akgKAKAKAKAKAKAKAKAKAKAKAKAKAKAKAKAKAKAKAKAKAKAhxGKRIzGJ5QGMxHcPKPxrhXxNLDx2qslFdyUm+BH8oW+9vZ3PhrJ++MD\/AHYlsuWgfKFvvb2dz4afvjA\/3Y+4y5aCNtK0IliJZVEo4GZ2CqJK9pIHpq9LxPCVZKEKibZDhJdC3W8qMvBsrZCA0HKWEgNGhIBEieyRQGTZwmIiDm5mc2JbU9rSlrQEzAkQOxeQAZf2ALpG9FtoMrvBcxDI0Rmtm8xVG8uWgNjDWAiKi+CqhROphQAJPboKA4LG\/tNwBzAm6rBLiEbsmGJUDUGPqmuM\/tcNGWSs7mE\/TrCCJ3gkSJtsJHeO8Vg8tM2Z8AHTzB+Nc9mffUeWmTnROe\/Z\/ibdreXWtNcYMqnKucqrDhJXnlkGYnXL2xXp7G2rJ2PPqVNhptXH9PcWl3DIzW2S7bdbeZ1yl2yTcAHMjkSdBJXnNFTcFvdyI1VOTsrHefsUf\/w0j+\/ufklWRdne3roUSe0qvfqzBR\/mRUkD6AortRSSArH7sn5ZpryKvjmDpScZSaaduDOipyaHfKA\/hv8A8nxVy\/iHAf1\/JjKkJ8oD+G\/\/ACfFU\/xDgP6\/kxlSG2tqq0wjmCR9TmDB+tVpeP4KPGXfgxlSH\/KA\/hv\/AMnxVX+IsB\/X8mMqRPhcQLiB1mDynnzjX8K9inUjUgpx4PeUasS1cgKAjv3goGkkkKAO0n\/ZPooByNPd5dZg91Ac\/iduXkZ\/mmYK7KMiEyAeyTHkmedfL4jxjEQrShFwVm1vv379jsoK1xPl26BJs3B4P7uTDCeQPZMR36VwfjeKvZOn116fEnLiRjpBeMHdMBDGGtwzZVJhRPPl\/n99WfjWJS4we9a23\/EZcRz9InDIu7uS39ywjgV41PPiIjvU8qrHxrGNN\/8Az3frbX\/rjLibmzr5e2GaJlgY0HC7KPyr6bB1pVqEKkuLSZxkrOxZrSQFAFAFAFARXr2UqIksSAPuEkk9g0oDM24hc2goJ1LcBWeC5bYiSw55cp17a8zxTB1cTTUaVrpvj6NaPUlVI098jmsPstrICPduhVWyuU3EUQrWlUfS6B90yx\/ePz1nyKvg2Lm77ME9746p\/h7\/ACJWKp9x93DGybYa9cXJlc57qSwVVDE5r3bu2MkHm3lmH4JimpbUae+\/X1\/D0uPNU+lwGybto2Wc3XK3rK5nKnR8RhgT9IdZtzy1LH760YfwnE060ZtRUU09z0v+FakeZhLcrndV9GQFAFAFAKKA+btgpbOPc3FLBWuuFGpYq0wo7TGYgd4qiV9xNR2VzrekG0rGIw11GtsJRryMUKhFCqMxLAa5gYImSY+8qM4Xcmc8+EmlFM8rW5UHa56en7OwhzJi7it3qoB\/ENWLzb0NDoLUaP2atfYvcxVxiCiAlQYDNECToBJMDStFKrtq5wnDYPSehHRz5PwxsZ8\/zjOGiDDBdCO\/StCKM3rtsMAGEwQRzGo5HSpIDD2QgCiY8vPUzQHCbRwhZzdIZcqusnJly7y2x5uOE7kSO3NXyc8HWVaVkmnJvi\/xduK2t3obFTbimIMOAS5L\/NhQxNxODKtggsTc00sk6\/xm7zOd4DENWSik\/wDfbv8AJFstkWHwhcAK7OFJJCshENu+0XJn5tuIkznYd89HgqybezHel1fS\/bvw7IhU2ybCYd8lpQjDc3DyyQwVhoFzwPBjtiTFc5eHVdqTdntK3F7uPbeSqbIcJZd3RlfeKgVSVZCQU3RERdIDFUMk9lw6QavLw+psSWzFN\/Xa7d9y7IhU2ztOjzThrZiNDp3cR00r6nCU3ToQg+iSMk+ZmhWgqFAIygiCAR5dRQCW0CzA5mfSf9x6KA4nHbCZnLhLfFfaZyywa42nLny\/zr0oVaSgk18j4bFeF4ueJqTT3O9t5m4vYhFpWD2IJbjzIM3FoFIWCeS\/ee8ikqtO278hR8KxKqNyW7or8PmXbvR1s1oG3b1J5BYPAfJV86ju3fIzLwjHWkr8eH2u4tvYB3rLFo8K8HBKkTmMR3Mn+XeKZ1G\/+iH4RjstJcbvftelvqdX0ctZMMiwBlziBy0uMNK82o05to+5wUJU8PCMuKSuaNUNQUAUAUAUAjIDzAP3ifzoCneQB7YHLLc7SeZQmSdTV4cTPiOUzseLQuXC7NDJZDAKxy\/OPkMiYBJI5aZZNXMyvbcVukYta7y66E2nCjd57Y4HJfLl4mADGJmB2TqYjfoaG1hFtB\/f4bmZ\/wDM2u086iXAmlzmvXI9AKAKAKAUUB5Piv2UqpNzrbh4uXeBAIYMCMpmfrc\/JXKX2S6d3Yx9odDr10ZHxdxl7iqgaciQDr6ayeb7Hfy61K6fs3WPp29Qe+nm+w8uej1jNJqbJHA3nLX6xWzC8r9UZcRxRuV6BmCgAUByWNUGy0mOZnX6rSJA1I05dteTL7x+p6cfu16Eee1N4rcgnVzA4SoyEiRDQVIPPURUb9xO7eR7FsopfI+YaCIII4rjGQRpxOw7xkgmRSo31EEuhbwPJ\/OXP1Gqy6Fo9SHYyoFOS4bmoJYgBjwjKToNCIiBEctKmd+pELWOg6P\/ANmt\/cf1NXq0+RHm1OZmhVyhXv460jqjuqswLKCYkLAYz6RQDreKtsYV1J7gwJoCagOKx21bgaIELiGymOUO4k\/eJHpr04YeDhFvqfDYrxfFQxNWEUrRv00M\/aG1bhtANa0zMxC54U55z+XXikjTupKhBK9hR8WxM6jjtLtu4\/MvPte7mtaKIJgZeXARHOr+Wp7jMvG8XaW5buz1CztS6LztlAJVeLjIbmMoBMLGUaDxvLU+Wp3IfjmLy0917vdb07nTdH7hbDIx5kuT95uNXl1ElNpH3OBqSqYeE5cWkaNUNRQvYxHFy1FyRKN8zfiSoPCwUZhDDVT6dKAqJbIAAvXoH9xeEjLljQADWTIE0AbhTcW4WuEhbSk9Xu5ibRuGc0aZt5BHdI7aA0eur3XPY3vgoCzQFTFfSp\/K\/wCaVeHEz4jlMvHXLa3LpZGbgsi4FyxBuOEPMGQcxOvKOdXMyvYr9I7lqSty3dPzTEOhIUGHCgEnJvfCyz2kUYje24v7VjdJliN\/hYjlHWbURHZUS4E0uc2K5HoBQBQBQBQFLaXI+au\/mlcqv0ZaHMjmCK8c9EKgD5qSbGrsg8DectfrFbcLyv1RkxPFG5XoGYKABQHJY1QbLSYGpmCYIaRoNTqBp215MvvX6npx+7RV3llDfY3bgIUvcZlMoqltUbJxKCGAHEPx1O7tuJ3K4\/Ytm2pbdsSIWAViFJdgRyEFnfkAAAB2CoqN9RBLoWsDyfzlz9RqsuhaPUh2Nu8rC27vDcZuLD5sqnilVJOUrqZ7uyKmd+pELW3HQdH\/AOzW\/uP6mr1afIjzanMzQq5QKAKAKAyL5IVYIHzpnWJGdtAfvg\/cDXZcDzppbbMvEXX6ukYgZsxJYOdYILKDlnlI15ZgZ0FAkr8DWvjjszBMtJHIndtrUlLLeNw7HrFwG4CABCBpI0GpWNPQfra9kQTZW4FvZP0Q\/muf1Xrk+J6FPlRcqC4UAUAUAUAUBUxX0lv+V\/zSrw4mfEcpjbWxmS48IpOS0OIEhpN5lESFEFObEDiOugBszPFXRX6SXwBxWrbTZfMSDIBt3CYuCCE0glZPHJyjUyyIo1drmbaH+\/w3Pn\/abVRLgTS5zXrkegFAFAFAFAUtpcj5q7+aVyq\/RlocyOYJrxj0rBNBYeakk1NkeA3nLX6xW3C8r9UY8TxRu16BmACgFFAcjjQNy2aY1IiCcweVgHtmK8mX3j9T04\/doqC5YTrP0gKgvdknMQS8FdZHgtHLQCNIp9p2G7eSbGW3mc25khSZKnQtcacykgku12ddDNRO\/UmFuhawPJ\/OXP1Gqy6Fo9SHZBtw+QODmGfeSWnIsTJ55cuh179amd91yI26HQdH\/wCzW\/uP6mr1afIjzZ8zNCrlAoAoAigMPFX0AWSJ3xjijKczie\/XVf8A1V1XAwTT2mZOJxCdWSbRADNpnclAG0cltY5NxcomJ0oEt5s3L6ZrMFQJOkjT5ttKkpbiMw+ITrNzhAhQN4WaDopyqGGX1e7tJMBbcaGyD8yCPGuf1Hrk+Jvp8qLlQXCgCgCgCgCgKmK+lT+V\/wA0q8OJnxHKZG1MReFxhbBnJbykIG8Le5ixgkKCqcg3PlrIuzNFKxFt6\/fUErqm5YsBbkFsrEsQymQIXgkEzGtGIpGhtc\/NpIj5\/Df\/ACbVRLgTS5zXrkegFAFAFAFAUto8j5q7+aVyq\/RlocyOYrxj0woAoDW2N4DectfrFbsLyv1RjxPFG9XoGY5rpQbjXVSPmhbLOPCJ4oY7rMu8CrqdSRI4TmkAdFhkCooBkBQAe8AQDQGPidgF1Zd8QCZHzakjXMNSeYMfhWd4eLltHdYiSjYjHRqCx3plhB4TyJJheLh1JOka1Hlo6jzEtAwvRrdlit48UTKA8izcyZJLO5JJOrGjw0XxYWIkiW1sJlBi\/wA2LfRjmxk9tPKwZPmZDMJ0d3S5UvEL2DKSB92ZjFHhoviyFiJLgjV2fhd1bW3ObKIkiJ1J5emtEVZWOLd3csVJAUAUAUAw2l8UfgKAN0vij8BQBul8UfgKAN0vij8BQD1HdQBQBQBQBQBQBQFLHNDo0MRDg5UZoJyRIUHuNWi7M414uUdxibVu3mNwWheHAmQi1dADfO5iQQJg7oxI0HbqDZyOEaT6oj21cvniti\/paIhLd4DPlaSIAl5KxKkaaxRsKk9DRx90uqKEuE77Dk\/NXQIXEW2YyV0AAJ17qNqxNOnJTvY265mwKAKAKAKApbS5HzV380rlV+jLQ5kcvNeMemJNAT7upK3NTZSwjfz2v1ituF5X6oy4jijbr0DMQ4rCpdXLcUOsgwwkSDIoCagCgCgKi4yc3IQXUAniJTMPB7AcrEa8hUPgDnj0hKkh7lwQBqFtQWLBAuqDUk\/dHbXxz8V8Qk\/sbPt0434mjYgC9JVMxdvEDmd0kDgt3DMp2LdQn7yOYIqH4p4ouOx\/za11TJ2IDrvSNFBJvXBDlIyW5lQSdMk8lPPXyaiUfFPFG0ko71f\/ALeRsQL3RzajX2uyWKrAXOEBlb1+0xGQcjugRNe94Via1aEnWabVuHdJ\/U5Tik9xuV6pQKAKAgxeLW2FLTBYLPYs9rHsHl7yB20AxdoWpAzamNIYeEYWZGgJIHpoBMJj1uMVAYEZjrGoVzbaIJ7V7e8eWALdAQ4uyXXKCBxI2omQrqxESOcR6aAzttXriWwSdQ5jIWXMBaY6w0+EDpPYK8jxmtUp0o5ctluSV\/W50ppN7zn8Nt9mhcj58qSBiLkZm3c+XKN5zjmrCO\/56pWxkd+e7b+i\/Xj+qOqUdBX6QZQCyXRMmBeuFvo7dxQq82JFwA8gCp15TWNbGyb2a73emrW\/2+NybRXQfZ2szunhBSGbS+5zZReBC6gFeBTOmp5UeLxcFJOq2\/The3z3jZjoNbpEotG4c8hS2UX7hnKXDBWJExk1PLiFMzxB1FBVn+m5P533ehFoW4GzsHFm48yYyuI3jXFJS4FzIx5jnrAr2vA61abqKrNyta1+l+xzqpK1jcr6A5BQBQBQBQBQBQBQBQFLaPI+au\/mlcqn0ZaHMjmslePY9K4oSliLlqPLUlS\/s\/wD\/Pa\/qCtuG5X6ozV+KNit5nCgCgCgCgI8QoykxqFaPJpQHJ4jB21kEuxW2juQuHEB30JLKI1tlsxOmTvryP3Bhk7qU\/8AL\/Rx83PRDbtm1bsLei4EdQSN3hgVBVFAYFROiosCZCjsAqH+z+Ge\/an\/AJer01b9wsXUvayG4vCWUuPaK3CQued3YCuwR2yISmrZc+ncx7Jq37hw6fNP\/L\/QWLm10NjYGGVL13I2ZWt2XmEEl3xDEjIANSZnvJrbhcDTwkdmDbvq79i8Krqb2blaS5XdLsmHQCdJtsTHZJ3gn8KATJe\/iW\/ZN\/8ApQDXsXDEtaMGRNljB7x85QEaYFhy3A5crBHKI\/edkD8KAfbw1xZytZWecWSJ1J1i5rqT+NAF21iCBlu2gcykzZYyoYZh9LzIkA9k+igLlAZXSFZS3ObS5PCzKdLVztUg+ismMhGdO0knv6negry3nK4DFs7wXkC0HYC7fBDFEbtuEsOJuQMQNSTFebLB0EuRey\/Q1JJkTY25uC4fiF0pmN27uyoXNmUb6CTyHHz5wZUT5Ohe2wvZEWVi5a42WTcEXio+cvDQ4dnGhcwRmg+UGnlqKvaC4aLUnZTExx+eSzmJDjiVrt6SpkHUuB2coYnXkBNRDDUktpQW7siXGN7G5se0FvnVj80fCd2+uvLMTFbcBThBS2Ul6KxnxMUrWN2vQMoUAUAUAUAUAUAUAUBTx\/b5q5+duuVX6MtHmRz5FePY9AUCguSxUkF\/Z44D\/Pa\/qCtuG5X6ozV+KNeK3mcWKASKAIoAigEdJBHeI\/GgMa\/sFnMtcUjKixumAO7YujSLgOYEmNe2rbTOOTEff2KzqFd0IAI1S5qpjMrHeyymBIMgxrTaYyIobithtcJJuKGKkZhbbhJUpnVTcK58pIzRMacqbTCoJF3A4E22ZmYNKIgCplAFsuRpmPjn8BUN3Lwgo8C5FQXCKAWKASKAIoAigCKAIoCHFYRbgAcEwcwgspBgiZUg8iahxT3MlNrgVk2LYUBQjADQAXLoAA5ADNpVcuGiLZktWO+R7Pit7W78VMuGiGZLUjGw8OOSHmW+kueEZBbwuep18tMuGiG3LUf8kWfFb2t34qZcNEMyepNhcBbtmVUgkRJZ20mY4iYqYxUeCKuTfFlmKsQJFAEUAsUAkUARQCxQBFAJFAU8f2+aufmlcqv0ZaPFGDXkG8SgJJqCSW3jTbVhuxcmNCe70GtFGsoXTVzlUp7RW+WW+wr66\/DXfzMNDjkMcNrt9iT11+CnmYaDIYo2s32JPXHwU8zDQZDFG1W+xp64+CnmYaDIYvym32O364+CnmIaDIY4bSP2S364+CnmIaDIYvyifslv1x8FPMQ0GQxflA\/ZbfrD4KnPhoMnuL18\/ZbfrD4KZ8NBksUY4\/ZbfrD4anPhoRksXrp+zW\/WHw0z4aDJYdc\/w1v1h8NM6GgyWL1z\/DW\/WHw1OdHQZLF65\/hrfrD4aZ0dBksOtn7Nb\/EfDTOjoMlh1r\/DW\/WHw0zo6DJYda\/w1v8AEfDTOjoMli9a\/wANb\/EfDTOjoMlidaP2a3+I+GmdHQZLDrR+zW\/WHw0zo6DJYdbP2a36w+Gozo6DJYdbP2a36w+GmdHQZPcTrZ+zW\/WHw0zoaDJYnXD9lt+sPhpnw0GSHXT9lt+sPhqM+GhOSNOOP2W36w+GmfDQZIhx5+yW\/WHwUz4aDJEO0T9kt+sPgp5iGgyGN+Uz9kt+sPgqPMQ0GQxp2q32NPWHwU8xDQZDEO1m+xp6w+CnmYaDIYh2w32JPWHwU8zDQZD1GnbTfYk9YfBTzENBkMfa2uWlerLbkEZgw7fuUVEsTGzSRaNB3I6wmkKAkoAoApYBQBQCUAtSQwqQKKkC1JUWgFqQLUgWpIFFAFSBaAKkC0AooAqAFAFAFQAioJEoBtQBDUAQ0JG1BIhqAJVSRKWA2KASgA0sBKAJoD\/\/2Q==',width=400,height=400)","0c383096":"from mlxtend.frequent_patterns import apriori\n\n#Now, let us return the items and itemsets with at least 5% support:\napriori(data, min_support = 0.01, use_colnames = True)","78e77cc2":"frequent_itemsets = apriori(data, min_support = 0.05, use_colnames=True)\nfrequent_itemsets['length'] = frequent_itemsets['itemsets'].apply(lambda x: len(x))\nfrequent_itemsets","88fb3665":"# getting th item sets with length = 2 and support more han 10%\n\nfrequent_itemsets[ (frequent_itemsets['length'] == 2) &\n                   (frequent_itemsets['support'] >= 0.01) ]","55e53a9d":"# getting th item sets with length = 1 and support more han 10%\n\nfrequent_itemsets[ (frequent_itemsets['length'] == 1) &\n                   (frequent_itemsets['support'] >= 0.01) ]","dcbfe0b9":"frequent_itemsets[ frequent_itemsets['itemsets'] == {'nan'} ]","c780f226":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Mar\u00edlia Prata, @mpwolke Was here' )","e596eb02":"#Using Transaction encoder","2b63c502":"#It's messy, though resizing to 30\/30 didn't help.","0502c026":"#Association Mining","dd613925":"By Roshan Sharma\n\n#Applying Apriori\n\nHow does Apriori Algorithm Work ?\n\nA key concept in Apriori algorithm is the anti-monotonicity of the support measure. It assumes that all subsets of a frequent itemset must be frequent similarly, for any infrequent itemset, all its supersets must be infrequent too.\n\nStep 1: Create a frequency table of all the items that occur in all the transactions.\n\nStep 2: We know that only those elements are significant for which the support is greater than or equal to the threshold support.\n\nStep 3: The next step is to make all the possible pairs of the significant items keeping in mind that the order doesn\u2019t matter, i.e., AB is same as BA.\n\nStep 4: We will now count the occurrences of each pair in all the transactions.\n\nStep 5: Again only those itemsets are significant which cross the support threshold\n\nStep 6: Now let\u2019s say we would like to look for a set of three items that are purchased together. We will use the itemsets found in step 5 and create a set of 3 items.","25cc3583":"#All script by Roshan Sharma  https:\/\/www.kaggle.com\/roshansharma\/market-basket-analysis\n\nI don't know why his page is 404 error. Just in case, Jayant Mathur forked his work. Then you'll be able to see the whole\nwork.\nhttps:\/\/www.kaggle.com\/jayantmathur\/market-basket-analysis\/notebook?select=Market_Basket_Optimisation.csv","39e36b10":"#Selecting and Filtering the Results\n\nThe advantage of working with pandas DataFrames is that we can use its convenient features to filter the results. For instance, let's assume we are only interested in itemsets of length 2 that have a support of at least 80 percent. First, we create the frequent itemsets via apriori and add a new column that stores the length of each itemset","87768bcd":"#IndexError: index 185 is out of bounds for axis 0 with size 185.  Therefore I hid the output.","bfef2967":"Image softwaretestinghelp.com","8ae42ecf":"#Since I got Nan (I didn't remove any) I couldn't choose others itemsets to check, Mining or whatever. Maybe next time.","8048dd3a":"#Data Preprocessing"}}