{"cell_type":{"3ac34071":"code","a199dedd":"code","9a688375":"code","96e4bb1e":"code","3490b947":"code","adf639c0":"code","fd4f1a7b":"code","dc48958f":"code","2a894b0a":"code","1460b5bc":"code","d2d54727":"code","830cd41c":"code","8a9e04bb":"markdown","1cf26d26":"markdown","ae559777":"markdown","6726b2c8":"markdown","42005087":"markdown","b2255a1e":"markdown"},"source":{"3ac34071":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport sqlite3\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a199dedd":"df = pd.read_csv('..\/input\/board-games\/bgg_dataset.csv',delimiter=';', encoding='ISO-8859-2')\ndf.head()","9a688375":"## Read all the columns of the files\n\nprint('The columns of the bgg table are:',df.columns.to_list())\nprint('\\n')","96e4bb1e":"#Code by Arwinth SSS https:\/\/www.kaggle.com\/arvinthsss\/2021-tokyo-olympics-dive-deep-in-sql\n\n## Let's Rename the titles to simple forms as it will simplify query writing\n\n## For Simplicity let's do the rename for only applicable columns (where reading titles need simplification) \n\n\ndf_bgg_dataset_SQL = df.rename(columns = {'\u010f\u0165\u017cID': 'ID', 'Name': 'name', 'Year Published': 'year', 'Min Players': 'minplayers', 'Max Players': 'maxplayers', 'Play Time': 'time', 'Min Age': 'minage', 'Users Rated': 'users', 'Rating Average': 'rating', 'BGG Rank': 'bggrank', 'Complexity Average': 'complexity', 'Owned Users': 'owned', 'Mechanics': 'mechanics', 'Domains': 'domains',\n                              }, inplace = False)\n\n#df_teams_SQL = df_teams # no change required\n\n#df_athletes_SQL = df_athletes # no change required\n\n#df_coaches_SQL = df_coaches # no change required\n\n#df_medals_SQL = df_medals.rename(columns = {'Team\/NOC': 'Teamnoc',\n                            #  }, inplace = False)","3490b947":"#Code by Arwinth SSS https:\/\/www.kaggle.com\/arvinthsss\/2021-tokyo-olympics-dive-deep-in-sql\n\n# import sqlalchemy and create a sqlite engine\nfrom sqlalchemy import create_engine\nengine = create_engine('sqlite:\/\/', echo=False)\n\n# export the dataframe as a table 'playstore' to the sqlite engine\ndf_bgg_dataset_SQL.to_sql(\"bgg_dataset\", con =engine)\n#df_teams_SQL.to_sql(\"Teams\", con =engine)\n#df_athletes_SQL.to_sql(\"Athletes\", con =engine)\n#df_coaches_SQL.to_sql(\"Coaches\", con =engine)\n#df_medals_SQL.to_sql(\"Medals\", con =engine)","adf639c0":"#Code by Arwinth SSS https:\/\/www.kaggle.com\/arvinthsss\/2021-tokyo-olympics-dive-deep-in-sql\n\n##  Test the Query\n\nsql='''\n\nSelect * from bgg_dataset\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","fd4f1a7b":"#Code by Arwinth SSS https:\/\/www.kaggle.com\/arvinthsss\/2021-tokyo-olympics-dive-deep-in-sql\n\n##  Query 1: - Avg count of participants across all disciplines\n\nsql='''\n\nSelect\ndomains,\ntime as PlayTime\nfrom bgg_dataset\ngroup by domains\norder by PlayTime desc\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","dc48958f":"#Code by Arwinth SSS https:\/\/www.kaggle.com\/arvinthsss\/2021-tokyo-olympics-dive-deep-in-sql\n\n##  Query 2: - Most Medals won by each country, top 3 ranks\n\nsql='''\n\nselect *\nfrom bgg_dataset\norder by year desc\nlimit 3\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","2a894b0a":"#Code by Arwinth SSS https:\/\/www.kaggle.com\/arvinthsss\/2021-tokyo-olympics-dive-deep-in-sql\n\n##  Query 3: - Most Bronze,silver and gold\n\nsql='''\n\nselect 'Most minage  :- ' || domains as minage  from bgg_dataset\nunion all\nselect 'Most maxplayers :- ' || domains as maxplayers  from bgg_dataset\nunion all\nselect 'Most minplayers  :- ' || domains as minplayers  from bgg_dataset\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","1460b5bc":"#Code by Arwinth SSS https:\/\/www.kaggle.com\/arvinthsss\/2021-tokyo-olympics-dive-deep-in-sql\n\n##  Query 4: - Particpants at across countries\n\nsql='''\nselect * from (\nselect count(name) as complexity,mechanics\nfrom bgg_dataset\ngroup by mechanics) a\norder by a.complexity desc\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","d2d54727":"#Code by Arwinth SSS https:\/\/www.kaggle.com\/arvinthsss\/2021-tokyo-olympics-dive-deep-in-sql\n\n#Save for a next time since it works with many files (athletes\/EntriesGender\/medals)\n\n##  Query 5: - Numbers Table, count of various events\n#sql='''\n#select 'Count of Events :- '|| count(distinct discipline) as Number from athletes\n#union all\n#select 'Count of Countries :- '|| count(distinct noc) as Number from athletes\n#union all\n#select 'Total Female Athletes :- '|| sum(female) as Number from EntriesGender\n#union all\n#select 'Total Male Athletes :- '|| sum(male) as Number from EntriesGender\n#union all\n#select 'Total Athletes :- '|| sum(total) as Number from EntriesGender\n#union all\n#select 'Total Gold :- '|| sum(gold) as Number from medals\n#union all\n#select 'Total Silver :- '|| sum(silver) as Number from medals\n#union all\n#select 'Total Bronze :- '|| sum(bronze) as Number from medals\n#union all\n#select 'Total Medals :- '|| sum(total) as Number from medals\n\n\n#''';\n\n    \n#df_sql = pd.read_sql_query(sql,con=engine)\n#df_sql.head(10)","830cd41c":"#Code by Arwinth SSS https:\/\/www.kaggle.com\/arvinthsss\/2021-tokyo-olympics-dive-deep-in-sql\n\n##  Query 6: - Coaches produced by the countries\n\nsql='''\nselect * from (\nselect count(name) as users,domains from bgg_dataset\ngroup by domains) a\norder by a.users desc\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","8a9e04bb":"#Thanks Arwinth SSS  for your SQLITE3 https:\/\/www.kaggle.com\/arvinthsss\/2021-tokyo-olympics-dive-deep-in-sql\n\nCode by Arwinth SSS: https:\/\/www.kaggle.com\/arvinthsss\/2021-tokyo-olympics-dive-deep-in-sql","1cf26d26":"#Above: No error, but it's wrong what I made.","ae559777":"#It was domains as minage as from bgg_dataset. I removed the 2nd as and it worked. The original code was made for medals (gold\/silver\/bronze). Maybe I'm pushing to hard to make it work. And it didn't work. No error, but it's wrong.","6726b2c8":"https:\/\/www.kaggle.com\/arvinthsss\/2021-tokyo-olympics-dive-deep-in-sql","42005087":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcTSO465ninJ-s_xbZtBwJF3KGyrdco4mammtQ&usqp=CAU)br.ccm.net","b2255a1e":"#Delimiter semi-colon is required to read the csv perfectly."}}