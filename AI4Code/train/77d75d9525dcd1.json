{"cell_type":{"35cd947c":"code","2a7764d4":"code","8fd007bc":"code","71b8b1bd":"code","456da3cc":"code","04f54b24":"code","fa21016a":"code","a4ba3da4":"code","03407156":"markdown","288348a0":"markdown","056ccfe5":"markdown","93cc2b60":"markdown","1fd0b0db":"markdown","c80e3ba8":"markdown"},"source":{"35cd947c":"\n**Let us import some python libraries to get data loaded and basic visualations sketced out","2a7764d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib\nfrom matplotlib import pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n         \n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\ndata_path=\"\/kaggle\/input\/covid-data-for-may-2020\/ny_dept_of_health\/new-york-state-statewide-covid-19-testing.csv\"\n#print(data_path)\n","8fd007bc":"df_ny_statewide = pd.read_csv(data_path)\ndf_ny_statewide.head()\n\n\nnum_of_counties = df_ny_statewide.county.unique()\nprint(\"Let's find out the counties in NY state\")\nprint(num_of_counties)\n\ndf_ny_statewide.sort_values(['county','test_date'],axis=0, ascending=['True','False'],inplace=True)\ndf_ny_statewide['date'] = pd.to_datetime(df_ny_statewide['test_date']).dt.strftime('%y-%m-%d')","71b8b1bd":"df_ny_statewide.reset_index()\ndf_ny_grp = df_ny_statewide.groupby(['county'])\nsev_ct = []\n\nfor i in num_of_counties:\n    t_Df=df_ny_grp.get_group(i)['cumulative_number_of_positives']\n    if t_Df.iloc[-1]>=100 and t_Df.iloc[-1] < 200:\n        sev_ct.append(\"100-199\")\n    elif t_Df.iloc[-1]>=200 and t_Df.iloc[-1] < 500:\n        sev_ct.append(\"200-499\")\n    elif t_Df.iloc[-1]>=500 and t_Df.iloc[-1] < 1000:\n        sev_ct.append(\"500-999\")    \n    elif t_Df.iloc[-1]>=1000 and t_Df.iloc[-1] < 5000:\n        sev_ct.append(\"1000-4999\")\n    elif t_Df.iloc[-1]>=5000 and t_Df.iloc[-1] < 10000:\n        sev_ct.append(\"5000-9999\")\n    elif t_Df.iloc[-1]>=10000 and t_Df.iloc[-1] < 15000:\n        sev_ct.append(\"10000-14999\")\n    elif t_Df.iloc[-1]>=15000 and t_Df.iloc[-1] < 25000:\n        sev_ct.append(\"15000-24999\")\n    elif t_Df.iloc[-1]>=25000 and t_Df.iloc[-1] < 35000:\n        sev_ct.append(\"25000-34999\")\n    elif t_Df.iloc[-1]>=35000 and t_Df.iloc[-1] < 45000:\n        sev_ct.append(\"35000-44999\") \n    elif t_Df.iloc[-1]>=45000 and t_Df.iloc[-1] < 55000:\n        sev_ct.append(\"45000-54999\") \n    elif t_Df.iloc[-1]>=55000 and t_Df.iloc[-1] < 64999:\n        sev_ct.append(\"55000-64999\") \n    elif t_Df.iloc[-1]>=65000 and t_Df.iloc[-1] < 74999:\n        sev_ct.append(\"65000-74999\")     \n    else:\n        sev_ct.append(\"> 75000\")\n        \nmetrics_col = ['County','Total_Positive_Cases']\n\ndf2 = pd.DataFrame(columns = metrics_col)\ndf2['County'] = num_of_counties\n\nfor i in range(len(num_of_counties)):\n    df2['Total_Positive_Cases'].loc[i] = sev_ct[i]\n\n   \nax = sns.countplot(x=\"Total_Positive_Cases\",data=df2)\nax.set(xlabel = \" Range of Positive Cases\", ylabel = \"Number of Counties\")\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',\n    fontsize='medium'  \n) \n\nplt.title(\"May 2020 Distribution of Positive cases for all NY counties\")\nplt.show()\n\n\nprint(\"Postive Cases   Number of NY Counties\")\nprint(df2['Total_Positive_Cases'].value_counts())        ","456da3cc":"print(df2.loc[df2['Total_Positive_Cases'] == '> 75000'])\ndf3 = df2.loc[df2['Total_Positive_Cases'] == '> 75000',['County']]\ncty_list = df3['County'].values.tolist()","04f54b24":"for i in cty_list[:10]:\n        df3 = df_ny_grp.get_group(i)\n        fig = plt.figure(figsize=(24,6))\n        ct_name = \"May 2020 New Cases Every Day for County \" + str(i)\n        plt.title(ct_name)\n        sns.set(font_scale=1)\n        \n        ax = sns.lineplot(x='date',y='new_positives',data=df3)\n        ax.set(xlabel = \"Date\", ylabel = \"New Positives Every Day\")\n        plt.xticks(\n            rotation=45, \n            horizontalalignment='right',\n            fontweight='light',\n            fontsize='medium'  \n        )\n        plt.show()","fa21016a":"data_path=\"\/kaggle\/input\/covid-data-for-may-2020\/worldometer\/worldometer-confirmed-cases-and-deaths-by-country-territory-or-conveyance.csv\"\n\ndf_mobility_tr1 = pd.read_csv(data_path)\n\ndf_mobility_tr1.dropna()\n\n#delete last 8 rows as we do not need totals for our processing\ndf_mobility_tr1 = df_mobility_tr1[:-8]\n#print(df_mobility_tr1.head())\n\ndf_mobility_tr2 = df_mobility_tr1.iloc[:,[0,1,2,3,4,5,6]]\n\n#print(df_mobility_tr2.tail())\n\ndf_mobility_tr2.set_index(\"country\",inplace=True)\n","a4ba3da4":"#specific counteries of interest\ncty_list = ['India','North America','China','Europe', 'South America']\n\ndf_mobility_tr = df_mobility_tr2.loc[['India','North America','China','Europe', 'South America']]\ndf_ctry = df_mobility_tr.iloc[:,0]\n\n\ndef func(pct, allvals):\n    absolute = int(pct\/100.*np.sum(allvals))\n    return \"{:.1f}%\".format(pct)\n\ndf_ctry_data = df_mobility_tr.iloc[:,[0,5,4,2]]\nfor i in range(len(cty_list)):\n    df1 = df_mobility_tr.iloc[:,[5,4,2]]\n    col_list = df1.columns.values.tolist()\n    df1_cty = df1.iloc[i]\n    #Display the graph for nations\n    fig, ax = plt.subplots(figsize=(6,3))\n    wedges, texts, autotexts = ax.pie(df1_cty, autopct=lambda pct: func(pct, df1_cty))\n                                      #textprops=dict(color=\"w\"))\n\n    ax.legend(wedges, col_list,\n                  title=\"Details\",\n                  loc=\"center left\",\n                  bbox_to_anchor=(1, 0, 0.5, 1))\n\n    title = \"May 2020 Country \" + cty_list[i]\n    ax.set_title(title)\n    plt.show()","03407156":"****Let's take a sneak peak at the world on how the COVID new cases , postive cases and death rates were in the month of May","288348a0":"****Let's list the counties in NY where the total positive cases are greater than 75000 in the month of May","056ccfe5":"****Let's look at NY counties and view the density of the spread","93cc2b60":"# The goal of this notebook is to present top level data visualizations of covid data present primarily from UNCOVER covid data and few interesting deeper insights ","1fd0b0db":"Let's view daily trends  of few counties in New York State. We see that almost all counties have high new cases in April 1st, 2nd and 3 rd week. Below are charts for some counties.","c80e3ba8":"We read data from the world data. We need to clean up some last few rows and select few specific columns from the data set such as Postive Cases, Deaths and Total cases along with country name."}}