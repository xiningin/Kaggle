{"cell_type":{"37817077":"code","6835390f":"code","338a2364":"code","6edf4720":"code","14ef0d5b":"markdown"},"source":{"37817077":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom IPython.core.display import HTML\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nINPUT_DIR = '..\/input\/'\nCOLS_TO_SHOW = 150\n\ndef h(content):\n    display(HTML(content))\n\ndef timehist1(col):\n    N = 8000 if col in ['TransactionAmt'] else 9999999999999999 # clip trans amount for better view\n    tr[tr['isFraud'] == 0].set_index('TransactionDT')[col].clip(0, N).plot(style='.', title='Hist ' + col, figsize=(15, 3))\n    tr[tr['isFraud'] == 1].set_index('TransactionDT')[col].clip(0, N).plot(style='.', title='Hist ' + col, figsize=(15, 3))\n    te.set_index('TransactionDT')[col].clip(0, N).plot(style='.', title=col + ' values over time (blue=no-fraud, orange=fraud, green=test)', figsize=(15, 3))\n    plt.show()\n    \ndef _desc(data, col, label):\n    d0 = data.describe().reset_index()\n    d0.columns = [col, label]\n    return d0.append({col:'unique values', label:data.unique().shape[0]}, ignore_index=True) \\\n             .append({col:'NaNs', label:data.isnull().sum()}, ignore_index=True) \\\n             .append({col:'NaNs share', label:np.round(data.isnull().sum() \/ data.shape[0], 4)}, ignore_index=True) \\\n    \ndef desc1(col):\n    d0 = _desc(tr[col], col, 'Train')\n    d1 = _desc(tr.loc[tr['isFraud'] == 1, col], col, 'Train fraud')\n    d2 = _desc(tr.loc[tr['isFraud'] == 0, col], col, 'Train Not fraud')\n    d3 = _desc(te[col], col, 'Test')\n    n_public = int(te.shape[0] * 0.2)\n    d4 = _desc(te.loc[:n_public, col], col, 'Test public')\n    d5 = _desc(te.loc[n_public:, col], col, 'Test private')\n    dd = d0.merge(d1).merge(d2).merge(d3).merge(d4).merge(d5)\n    display(dd)\n    \n    if col not in ['TransactionID']:\n        h('<b>Most popular values (NaN = -999):<\/b>')\n        N = 10\n        d0 = tr[['isFraud',col]].fillna(-999).groupby(col)['isFraud'].agg(['size','mean','sum']).reset_index().sort_values('size', ascending=False).reset_index(drop=True)\n        d1 = te[['TransactionID',col]].fillna(-999).groupby(col)['TransactionID'].count().reset_index()\n        dd = d0.merge(d1, how='left', on=col).head(N)\n        dd = dd.rename({'size':'Count in train (desc)','mean':'Mean target','sum':'Sum target','TransactionID':'Count in test'}, axis=1)\n        display(dd)\n\n        h('<b>Biggest fraud sum values in train (NaN = -999):<\/b>')\n        dd = d0.sort_values('sum', ascending=False).reset_index(drop=True).head(N).merge(d1, how='left', on=col)\n        dd = dd.rename({'size':'Count in train','mean':'Mean target','sum':'Sum target (desc)','TransactionID':'Count in test'}, axis=1)\n        display(dd)\n\ndef hist1(col):\n    plt.figure(figsize=(15, 3))\n    plt.subplot(121)\n    plt.hist(tr[col], bins=70);\n    plt.title('Train histogram: ' + col);\n    plt.subplot(122)\n    plt.hist(te[col], bins=70);\n    plt.title('Test histogram: ' + col);\n    plt.show()\n\ndef corr1(col):\n    N = None #10000\n    num_vars = [f for f in tr.columns if tr[f].dtype != 'object']\n    trx = tr.head(N) if N is not None else tr.copy()\n    corrs = trx[num_vars].corrwith(trx[col]).reset_index().sort_values(0, ascending=False).reset_index(drop=True).rename({'index':'Column',0:'Correlation with ' + col}, axis=1)\n    h('<b>Most correlated values with ' + col + ':<\/b>')\n    trx = pd.concat([corrs.head(6), corrs.dropna().tail(5)])\n    def linkx(val):\n        return '<a href=\"#c_{}\">{}<\/a>'.format(val, val) if val in included_cols else val\n    trx['Column'] = trx['Column'].apply(linkx)\n    h(trx.to_html(escape=False))\n    \ndef numeric(col):\n    timehist1(col)\n    hist1(col)\n    desc1(col)\n    corr1(col) \n    \ndef categorical(col):\n    desc1(col)\n\ndef proc(col):\n    if col not in ['isFraud','TransactionDT']:\n        h('<h3 id=\"c_' + col + '\">' + col + '<\/h3>' + '<a style=\"font-size:11px\" href=\"#home\">(Jump to top)<\/a>')\n        categorical(col) if tr[col].dtype == 'object' else numeric(col)\n        \ntr = pd.read_csv(INPUT_DIR + 'train_transaction.csv')\nte = pd.read_csv(INPUT_DIR + 'test_transaction.csv')\ntrid = pd.read_csv(INPUT_DIR + 'train_identity.csv')\nteid = pd.read_csv(INPUT_DIR + 'test_identity.csv')\n\nincluded_cols = list(tr.columns.values[:COLS_TO_SHOW])\nsplit_on = ['TransactionID','card1','addr1','C1','D1','M1','V1']\nh('<b>Links to column info:<\/b> ' + ', '.join([('<li>' if col in split_on else '') + '<a href=\"#c_' + col + '\">' + col + '<\/a>' for col in included_cols]))\nh('Train transactions shape: <b>' + str(tr.shape) + '<\/b>, identity <b>' + str(trid.shape) + '<\/b>' + \n  '<br>Test transactions shape: <b>' + str(te.shape) + '<\/b>, identity <b>' + str(teid.shape) + '<\/b>')\nh('Train transactions preview:')\ndisplay(tr.head(10))","6835390f":"COL = 'TransactionDT'\nh('<h2 id=\"c_' + COL + '\">' + COL + '<\/h2>' + '<a style=\"font-size:11px\" href=\"#home\">(Jump to top)<\/a>')\n\nte['TransactionDT'].plot(kind='hist', figsize=(15, 5), label='test', bins=200, title='Train and Test TransactionDT distribution')\ntr['TransactionDT'].plot(kind='hist', label='train', bins=200)\nplt.legend()\nplt.show()\ntr['TransactionDT'].plot(kind='hist', figsize=(15, 5), label='train', bins=200, title='Train and Test public\/private TransactionDT distribution')\nn_public = int(te.shape[0] * 0.2)\nte.loc[:n_public, 'TransactionDT'].plot(kind='hist', label='test public', bins=40)\nte.loc[n_public:, 'TransactionDT'].plot(kind='hist', label='test private', bins=160)\nplt.legend()\nplt.show()\ncorr1(COL)","338a2364":"COL = 'isFraud'\nh('<h2 id=\"c_' + COL + '\">' + COL + '<\/h2>' + '<a style=\"font-size:11px\" href=\"#home\">(Jump to top)<\/a>')\nh('This is target column.')\ntrx = tr['isFraud'].value_counts().reset_index().rename({'index':'Value','isFraud':'Count'}, axis=1)\ntrx['Share'] = np.round(trx['Count'] \/ trx['Count'].sum(), 6)\ndisplay(trx)\ncorr1(COL)","6edf4720":"for col in list(tr.columns.values[:COLS_TO_SHOW]):\n    proc(col)","14ef0d5b":"<a id=\"home\"><\/a>\n# IEEE Fraud Detection transactions columns reference"}}