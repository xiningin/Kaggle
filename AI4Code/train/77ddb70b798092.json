{"cell_type":{"c75c7347":"code","ac58a9f4":"code","e503d608":"code","459e83db":"code","7b103730":"code","0f142dd4":"code","58044f8d":"code","aa68cebe":"code","d2823587":"code","6e22c4ba":"code","bd773d26":"code","3f71a595":"code","7ddc87c9":"code","d4c8bb34":"code","1a6327c1":"code","dfc33ea8":"code","9fc7554b":"code","e2cc206d":"code","d4a0a994":"code","b28d20ca":"code","980ba120":"code","8ced24ee":"code","e96bbe07":"code","877f9b55":"code","f25e64b2":"code","38624f31":"code","c265e2a8":"code","0106ffe8":"code","07be2bac":"code","f8fe0f1d":"code","c05b3cb7":"code","5a6277a6":"code","e5222ca9":"code","da08e39d":"code","f76b93ff":"code","fb0e83b8":"code","ebd7020f":"code","4d2bc639":"code","e3581306":"code","68b7f40c":"code","48d8e534":"code","c9e1e43d":"code","6e0f0698":"code","3dde68e1":"code","ed4d42a8":"code","8e5e68b7":"code","03ff526b":"code","8fed2737":"code","a54bbe49":"code","5f0ea8a2":"code","d21c466b":"code","1e29e8e1":"code","05330f3f":"code","63c082d0":"code","d4126022":"code","597853f7":"code","be70a3d7":"code","d1dec1aa":"code","4a43960a":"code","c50e9a66":"code","452b7f53":"code","4ea2ccd4":"code","c4800036":"code","d74e9301":"code","666439e1":"code","bf318a31":"code","cb355bd1":"code","edb726da":"code","46ded01b":"code","fa1fb46e":"code","543698ff":"code","46f8e92c":"code","8bd461fa":"code","8be49e81":"code","91d79d21":"code","c63ffcf8":"code","4b0575d0":"code","c2ef0af4":"code","b3ed11f9":"code","bd4d068f":"code","de6c5fbf":"code","e9208bd9":"code","4b90f3f8":"code","2e898c33":"code","1cccc929":"code","b658aa36":"code","a93e1df2":"code","3d55238c":"code","4df4b5f9":"code","8d26a51f":"code","d6ba9d04":"code","b386aeeb":"code","a49b1b87":"code","b7904e3e":"code","0142ad46":"code","8a2bee62":"code","421a341c":"code","b4bb44f3":"code","167e8c7b":"code","ad3cca7e":"code","c20b1d2e":"code","66d5de55":"code","f2c16010":"code","fa855ffb":"code","47036b23":"code","e95a7a12":"code","8700dee3":"code","9a73ae04":"code","99748093":"code","242727f0":"code","7998b9bd":"code","97ca5e7b":"code","30b0e233":"code","821df9ee":"code","ea31121d":"markdown","d0c42d95":"markdown","b99c74fd":"markdown","e9f4affb":"markdown","92645c33":"markdown","4632aa8a":"markdown","462d72c3":"markdown","b81cc76a":"markdown","69a60bbc":"markdown","c58d5d33":"markdown","97847c87":"markdown","9cb0a62b":"markdown","5dbd4853":"markdown","50a7405e":"markdown","c748d4aa":"markdown","5e01649d":"markdown","ab8313cd":"markdown","50232553":"markdown","55d68b75":"markdown","3b75ce9a":"markdown","992f4a5d":"markdown","2c84f44b":"markdown","b43556ee":"markdown","148a6f0d":"markdown","faad5823":"markdown","f5d917d1":"markdown"},"source":{"c75c7347":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport graphviz\nfrom scipy.stats import boxcox\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nimport statsmodels.stats.api as sms\nimport statsmodels.formula.api as smf\nimport statsmodels.graphics.tsaplots as smgt\nfrom statsmodels.stats import stattools\nfrom sklearn.preprocessing import StandardScaler,Normalizer,LabelEncoder,PolynomialFeatures,MinMaxScaler\nfrom sklearn.model_selection import train_test_split,cross_val_score, GridSearchCV,StratifiedKFold,learning_curve,KFold,RandomizedSearchCV\nfrom sklearn.linear_model import LinearRegression,Lasso,Ridge,ElasticNet,SGDRegressor\nfrom sklearn.tree import DecisionTreeRegressor,export_graphviz\nfrom sklearn.svm import LinearSVR\nfrom sklearn.feature_selection import SelectFromModel, RFE,SelectPercentile,f_regression,VarianceThreshold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error,mean_absolute_error\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nimport umap\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings(\"ignore\")","ac58a9f4":"def calculate_vif(X):\n    X['intercept'] = 1\n    vif = pd.DataFrame()\n    vif[\"VIF Factor\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n    vif[\"features\"] = X.columns\n    vif['VIF Factor'] = round(vif['VIF Factor'],2)\n    vif = vif[vif['features'] != 'intercept']\n    vif.sort_values('VIF Factor',ascending=False,inplace=True)\n    return vif","e503d608":"def scale_data(X):\n    return pd.DataFrame(StandardScaler().fit_transform(X),columns = X.columns.values)","459e83db":"def make_data(n_points, err = 1.0, random_state = 42):\n    rnd_gen = np.random.RandomState(random_state)\n    X = rnd_gen.rand(n_points, 1) ** 2\n    y = 10 - 1. \/ (X.ravel() + 0.1)\n    if err > 0:\n        y += err * rnd_gen.randn(n_points)\n    return X, np.abs(y)","7b103730":"def set_poly_feature(X,y,degree,plot_type = 'reg'):\n    poly = PolynomialFeatures(degree = degree)\n    X_poly = poly.fit_transform(X)\n    lr = LinearRegression()\n    lr.fit(X_poly,y)\n    y_pred = lr.predict(X_poly)\n    if plot_type == 'reg':\n        sns.regplot(x='X',y='y',data = dftemp,fit_reg=False)\n        sns.lineplot(dftemp['X'],y_pred,c = 'r',lw = 1,label = 'degree ' + str(degree))\n        plt.legend(loc='upper left')\n    else:\n        residuals = y_pred - y\n        sns.scatterplot(x = y_pred,y = residuals)\n        plt.axhline(y = 0, c = 'r', lw = 1)\n        plt.title('Residual for degree ' + str(degree))","0f142dd4":"def plot_residuals(y_pred,residuals):\n    print(\"Durbin-Watson test statistics is \" + str(round(stattools.durbin_watson(residuals),2)))\n    fig,ax = plt.subplots(1,3,figsize=(18,4))\n    sns.scatterplot(x = y_pred,y = residuals,ax = ax[0])\n    ax[0].axhline(y=0, c='r', lw=1)\n    stats.probplot(residuals, plot = ax[1])\n    smgt.plot_acf(residuals,ax = ax[2])\n    plt.show()","58044f8d":"def print_reg_result(estimator,X,y,y_pred):\n    mse = round(mean_squared_error(y, y_pred),2)\n    print(\"Mean Square Error (MSE): \", mse)\n\n    rmse = round(np.sqrt(mse),2)\n    print(\"Root Mean Square Error (RMSE):\", rmse)\n\n    mae = round(mean_absolute_error(y,y_pred),2)\n    print(\"Mean Absolute Error :\", mae)\n\n    r_sq = round(estimator.score(X, y),2)\n    print('R-square         :', r_sq)\n    \n    adj_r_sq = round(1 - (1 - r_sq) * (len(y) - 1) \/ (len(y_pred) - X.shape[1] - 1),2)\n    print('R-square adj.    :',adj_r_sq)","aa68cebe":"dfdata = pd.read_csv(\"..\/input\/melbourne-housing-market\/Melbourne_housing_FULL.csv\")\ndfdata.columns = dfdata.columns.str.lower()\ndfdata.head()","d2823587":"dfdata.describe().T","6e22c4ba":"print(\"Data : \",dfdata.shape)\nprint(\"Duplicate rows : \",dfdata[dfdata.duplicated()].shape)\ndfdata.drop_duplicates(inplace = True)\nprint(\"After drop duplicates : \",dfdata.shape)\n","bd773d26":"dfdata.info()","3f71a595":"dfdata.isnull().sum()","7ddc87c9":"dfdata[dfdata['distance'].isnull() == True]","d4c8bb34":"dfdata.drop(dfdata[dfdata['distance'].isnull() == True].index,axis=0,inplace=True)\ndfdata.shape","1a6327c1":"dfdata[dfdata['bedroom2'].isnull() == True][['rooms','price','landsize','car']].describe().T","dfc33ea8":"pd.crosstab(dfdata['bedroom2'],dfdata['rooms'])\n","9fc7554b":"sns.countplot(dfdata[dfdata['bedroom2'].isnull() == True]['rooms'])\nplt.show()","e2cc206d":"dfdata['bedroom2'].fillna(dfdata['rooms'],inplace=True)\ndfdata.isnull().sum()","d4a0a994":"pd.crosstab(dfdata['bathroom'],dfdata['rooms'])","b28d20ca":"dftemp = dfdata.groupby(['rooms'],as_index=False)['bathroom'].median()\nindices = dfdata[dfdata['bathroom'].isnull() == True].index\ndfdata.loc[indices,'bathroom'] = dfdata.loc[indices,'rooms'].apply(lambda x : dftemp[dftemp['rooms']==x]['bathroom'].values[0])\ndfdata.isnull().sum()","980ba120":"dfdata[dfdata['bathroom'] == 'Nan']","8ced24ee":"def fill_via_suburb(colname):\n    indices = dfdata[dfdata[colname].isnull() == True].index\n    dfdata.loc[indices,colname] = dfdata.loc[indices,'suburb'].map(lambda x: dfdata[dfdata['suburb'] == x][colname].mode()[0])\n\nfill_via_suburb('councilarea')\nfill_via_suburb('regionname')\nfill_via_suburb('propertycount')\ndfdata.isnull().sum()","e96bbe07":"dfdata.drop(['car','landsize','buildingarea','yearbuilt','lattitude','longtitude'],axis=1,inplace=True)\ndfdata.isnull().sum()","877f9b55":"dfdata.dropna(subset = {'price'},inplace = True)\ndfdata.describe()","f25e64b2":"dfdata['price_log'] = np.log1p(dfdata['price'])\nfig,ax = plt.subplots(2,3,figsize = (24,8))\nsns.distplot(dfdata['price'], ax = ax[0][0])\nsns.boxplot(dfdata['price'],ax = ax[0][1])\nstats.probplot(dfdata['price'],plot = ax[0][2])\nsns.distplot(dfdata['price_log'], ax = ax[1][0])\nsns.boxplot(dfdata['price_log'],ax = ax[1][1])\nstats.probplot(dfdata['price_log'],plot = ax[1][2])\nplt.show()","38624f31":"dfdata[dfdata['price'] < 150000].head()","c265e2a8":"dfdata[dfdata['price'] > 7000000]","0106ffe8":"dfdata.columns","07be2bac":"dfdata['rooms'] = dfdata['rooms'].astype('str')\nfig,ax = plt.subplots(1,2,figsize=(18,4))\nsns.boxplot(data = dfdata,x='rooms',y='price',ax=ax[0])\nsns.countplot(data = dfdata,x='rooms',ax=ax[1])\nplt.show()","f8fe0f1d":"dftemp = dfdata['rooms'].value_counts().reset_index()\nindices = dfdata[dfdata['rooms'].isin(dftemp[dftemp['rooms'] < 1000]['index'].values)].index\ndfdata.loc[indices,'rooms'] = 'other'\nprint(\"Number of unique rooms : \",dfdata['rooms'].nunique())","c05b3cb7":"dfdata['rooms'] = dfdata['rooms'].astype('str')\nfig,ax = plt.subplots(1,2,figsize=(18,4))\nsns.boxplot(data = dfdata,x='rooms',y='price',ax=ax[0])\nsns.countplot(data = dfdata,x='rooms',ax=ax[1])\nplt.show()","5a6277a6":"dfdata['bedroom2'] = dfdata['bedroom2'].astype('str')\nfig,ax = plt.subplots(1,2,figsize=(18,4))\nsns.boxplot(data = dfdata,x='bedroom2',y='price',ax=ax[0])\nsns.countplot(data = dfdata,x='bedroom2',ax=ax[1])\nplt.show()","e5222ca9":"dftemp = dfdata['bedroom2'].value_counts().reset_index()\nindices = dfdata[dfdata['bedroom2'].isin(dftemp[dftemp['bedroom2'] < 1000]['index'].values)].index\ndfdata.loc[indices,'bedroom2'] = 'other'\nprint(\"Number of unique bedroom2 : \",dfdata['bedroom2'].nunique())","da08e39d":"dfdata['bedroom2'] = dfdata['bedroom2'].astype('str')\nfig,ax = plt.subplots(1,2,figsize=(18,4))\nsns.boxplot(data = dfdata,x='bedroom2',y='price',ax=ax[0])\nsns.countplot(data = dfdata,x='bedroom2',ax=ax[1])\nplt.show()","f76b93ff":"dfdata['bathroom'] = dfdata['bathroom'].astype('str')\nfig,ax = plt.subplots(1,2,figsize=(18,4))\nsns.boxplot(data = dfdata,x='bathroom',y='price',ax=ax[0])\nsns.countplot(data = dfdata,x='bathroom',ax=ax[1])\nplt.show()","fb0e83b8":"dftemp = dfdata['bathroom'].value_counts().reset_index()\nindices = dfdata[dfdata['bathroom'].isin(dftemp[dftemp['bathroom'] < 1000]['index'].values)].index\ndfdata.loc[indices,'bathroom'] = 'other'\nprint(\"Number of unique bathroom : \",dfdata['bathroom'].nunique())","ebd7020f":"dfdata['bathroom'] = dfdata['bathroom'].astype('str')\nfig,ax = plt.subplots(1,2,figsize=(18,4))\nsns.boxplot(data = dfdata,x='bathroom',y='price',ax=ax[0])\nsns.countplot(data = dfdata,x='bathroom',ax=ax[1])\nplt.show()","4d2bc639":"dfdata['street'] = dfdata['address'].apply(lambda x: str(x).split(' ')[1])\ndfdata['suburb_street'] = dfdata['suburb'] + '_' + dfdata['street']\nprint(\"Number of unique suburb : \",dfdata['suburb'].nunique())\nprint(\"Number of unique address : \",dfdata['address'].nunique())\nprint(\"Number of unique street : \",dfdata['street'].nunique())\nprint(\"Number of unique suburb_street : \",dfdata['suburb_street'].nunique())\nprint(\"Number of unique postcode : \",dfdata['postcode'].nunique())\nprint(\"Number of unique type : \",dfdata['type'].nunique())\nprint(\"Number of unique method : \",dfdata['method'].nunique())\nprint(\"Number of unique sellerg : \",dfdata['sellerg'].nunique())\nprint(\"Number of unique councilarea : \",dfdata['councilarea'].nunique())\nprint(\"Number of unique regionname : \",dfdata['regionname'].nunique())","e3581306":"dfdata['suburb_street_mean'] = dfdata.groupby('suburb_street')['price'].transform('mean')\ndfdata['suburb_mean'] = dfdata.groupby('suburb')['price'].transform('mean')\nfig,ax = plt.subplots(1,2,figsize=(18,4))\nsns.distplot(dfdata['suburb_street_mean'],ax = ax[0])\nsns.distplot(dfdata['suburb_mean'],ax = ax[1])\nplt.show()","68b7f40c":"dftemp = dfdata.groupby('suburb')['postcode'].nunique()\ndftemp[dftemp != 1]","48d8e534":"fig,ax = plt.subplots(1,4,figsize=(18,4))\nsns.boxplot(data = dfdata,x='type',y='price',ax=ax[0])\nsns.countplot(data = dfdata,x='type',ax=ax[1])\nsns.boxplot(data = dfdata,x='method',y='price',ax=ax[2])\nsns.countplot(data = dfdata,x='method',ax=ax[3])\nplt.show()","c9e1e43d":"dftemp = dfdata['sellerg'].value_counts().reset_index()\nprint(dftemp[['sellerg']].describe().T)\nplt.figure(figsize=(18,4))\nsns.countplot(dftemp['sellerg'])\nplt.xticks(rotation=90)\nplt.show()\n","6e0f0698":"indices = dfdata[dfdata['sellerg'].isin(dftemp[dftemp['sellerg'] < 10]['index'].values)].index\ndfdata.loc[indices,'sellerg'] = 'other'\nprint(\"Number of unique sellerg : \",dfdata['sellerg'].nunique())\ndfdata['sellerg_mean'] = dfdata.groupby('sellerg')['price'].transform('mean')","3dde68e1":"fig,ax=plt.subplots(1,2,figsize=(18,4))\nsns.countplot(x='regionname',data = dfdata,ax=ax[0])\nax[0].set_xticklabels(ax[0].get_xticklabels(),rotation=45)\nsns.boxplot(x='regionname',y='price', data = dfdata, ax = ax[1])\nax[1].set_xticklabels(ax[1].get_xticklabels(),rotation=45)\nplt.show()","ed4d42a8":"dfdata['regionname_mean'] = dfdata.groupby('regionname')['price'].transform('mean')","8e5e68b7":"fig,ax=plt.subplots(2,1,figsize=(18,8))\nsns.countplot(x='councilarea',data = dfdata,ax=ax[0])\nax[0].set_xticklabels(ax[0].get_xticklabels(),rotation=45)\nsns.boxplot(x='councilarea',y='price', data = dfdata, ax = ax[1])\nax[1].set_xticklabels(ax[1].get_xticklabels(),rotation=45)\nplt.show()","03ff526b":"dfdata['councilarea_mean'] = dfdata.groupby('councilarea')['price'].transform('mean')","8fed2737":"dfdata['date'] = pd.to_datetime(dfdata['date'])\ndfdata['year'] = dfdata['date'].dt.year\ndfdata['month'] = dfdata['date'].dt.month\ndfdata['dayofweek'] = dfdata['date'].dt.dayofweek\ndfdata['week'] = dfdata['date'].dt.week\ndfdata['day'] = dfdata['date'].dt.day","a54bbe49":"plt.figure(figsize=(18,5))\nsns.lineplot(x='date',y='price',data = dfdata)\nplt.show()","5f0ea8a2":"fig,ax = plt.subplots(1,4,figsize=(18,5))\nsns.countplot(x='month',data = dfdata,ax=ax[0])\nsns.boxplot(x='month',y='price',data = dfdata,ax=ax[1])\nsns.countplot(x='dayofweek',data = dfdata,ax=ax[2])\nsns.boxplot(x='dayofweek',y='price',data = dfdata,ax=ax[3])\nplt.show()\n","d21c466b":"dfdata['issaturday'] = np.where(dfdata['dayofweek'] == 5,'1','0')","1e29e8e1":"fig,ax = plt.subplots(1,2,figsize=(18,5))\nsns.countplot(x='week',data = dfdata,ax=ax[0])\nsns.boxplot(x='week',y='price',data = dfdata,ax=ax[1])\nplt.show()","05330f3f":"fig,ax = plt.subplots(1,2,figsize=(18,5))\nsns.countplot(x='year',data = dfdata,ax=ax[0])\nsns.boxplot(x='year',y='price',data = dfdata,ax=ax[1])\nplt.show()","63c082d0":"fig,ax = plt.subplots(1,2,figsize=(18,5))\nsns.countplot(x='day',data = dfdata,ax=ax[0])\nsns.boxplot(x='day',y='price',data = dfdata,ax=ax[1])\nplt.show()","d4126022":"drop_list = ['suburb','address','postcode','street','year','day','dayofweek','date','week']\ndfdata.drop(drop_list,inplace=True,axis=1)\ndfdata['month'] = dfdata['month'].astype('str')","597853f7":"dfdata.columns","be70a3d7":"fig,ax = plt.subplots(1,4,figsize=(18,4))\nsns.distplot(dfdata['distance'],ax=ax[0])\nsns.distplot(dfdata['propertycount'],ax=ax[1])\nsns.distplot(dfdata['suburb_street_mean'],ax=ax[2])\nsns.distplot(dfdata['suburb_mean'],ax=ax[3])\nplt.show()","d1dec1aa":"fig,ax = plt.subplots(1,3,figsize=(18,4))\nsns.distplot(dfdata['sellerg_mean'],ax=ax[0])\nsns.distplot(dfdata['regionname_mean'],ax=ax[1])\nsns.distplot(dfdata['councilarea_mean'],ax=ax[2])\nplt.show()","4a43960a":"numeric_features = list(dfdata.columns[dfdata.dtypes != 'object'].values)\nprint(\"Numeric features :\" ,numeric_features)\nnumeric_features.remove('price')\nnumeric_features.remove('price_log')\ncategoric_features = list(dfdata.columns[dfdata.dtypes == 'object'].values)\nprint(\"Categoric features :\" ,categoric_features)","c50e9a66":"calculate_vif(dfdata[numeric_features])","452b7f53":"le = LabelEncoder()\nfor feature in categoric_features:\n    colname = 'le_' + feature\n    dfdata[colname] = le.fit_transform(dfdata[feature])\n\nencoded_features = ['le_' + x for x in categoric_features]","4ea2ccd4":"calculate_vif(dfdata[encoded_features])","c4800036":"corr_matrix = np.corrcoef(dfdata[numeric_features],rowvar=False)\ncorr_matrix = dfdata[numeric_features].corr()\nsns.heatmap(corr_matrix,annot=True,fmt='.1g')\nplt.show()","d74e9301":"numeric_features.remove('suburb_street_mean')\nnumeric_features.remove('regionname_mean')\nnumeric_features.remove('suburb_mean')\ncorr_matrix = np.corrcoef(dfdata[numeric_features],rowvar=False)\ncorr_matrix = dfdata[numeric_features].corr()\nsns.heatmap(corr_matrix,annot=True,fmt='.1g')\nplt.show()","666439e1":"corr_matrix = np.corrcoef(dfdata[encoded_features],rowvar=False)\ncorr_matrix = dfdata[encoded_features].corr()\nplt.figure(figsize=(12,8))\nsns.heatmap(corr_matrix,annot=True,fmt='.1g')\nplt.show()","bf318a31":"categoric_features.remove('bedroom2')\nencoded_features = ['le_' + x for x in categoric_features]\ncorr_matrix = np.corrcoef(dfdata[encoded_features],rowvar=False)\ncorr_matrix = dfdata[encoded_features].corr()\nplt.figure(figsize=(12,8))\nsns.heatmap(corr_matrix,annot=True,fmt='.1g')\nplt.show()","cb355bd1":"calculate_vif(dfdata[numeric_features + encoded_features])","edb726da":"corr_matrix = np.corrcoef(dfdata[numeric_features + encoded_features],rowvar=False)\ncorr_matrix = dfdata[numeric_features + encoded_features].corr()\nplt.figure(figsize=(12,8))\nsns.heatmap(corr_matrix,annot=True,fmt='.1g')\nplt.show()","46ded01b":"dfdata.drop(['bedroom2','suburb_street_mean','regionname_mean','suburb_mean'],axis=1,inplace=True)\ndfdata.columns","fa1fb46e":"print(\"Numeric features :\" ,numeric_features)\nprint(\"Categoric features :\" ,categoric_features)","543698ff":"col_list = ['price'] + numeric_features\nsns.pairplot(dfdata[col_list],kind='scatter',diag_kind='kde')\nplt.show()","46f8e92c":"col_list = ['price'] + encoded_features\nsns.pairplot(dfdata[col_list],kind='scatter',diag_kind='hist')\nplt.show()","8bd461fa":"X = dfdata[numeric_features]\ny = dfdata['price_log']","8be49e81":"lr = LinearRegression()\nlr.fit(X,y)\ny_pred = lr.predict(X)\nresiduals = y - y_pred\nprint(round(lr.intercept_,2),np.round(lr.coef_,2))\nprint_reg_result(lr,X,y,y_pred)\nplot_residuals(y_pred,residuals)","91d79d21":"X = scale_data(dfdata[numeric_features])\nlr = LinearRegression()\nlr.fit(X,y)\ny_pred = lr.predict(X)\nresiduals = y - y_pred\nprint(round(lr.intercept_,2),np.round(lr.coef_,2))\nprint_reg_result(lr,X,y,y_pred)\nplot_residuals(y_pred,residuals)","c63ffcf8":"model = smf.ols('price_log ~ distance + propertycount + sellerg_mean + councilarea_mean ', data = dfdata)\nfitted = model.fit()\nprint(fitted.summary())","4b0575d0":"N = 200 #number of points\nX, y = make_data(200)\ndftemp = pd.DataFrame({'X':X.ravel(), 'y':y})\nprint(dftemp.shape)\ndftemp.head()","c2ef0af4":"lr = LinearRegression()\nlr.fit(X,y)\ny_pred = lr.predict(X)\nprint(round(lr.intercept_,2),np.round(lr.coef_,2))\nprint_reg_result(lr,X,y,y_pred)\n","b3ed11f9":"residuals = y - y_pred\nfig,ax=plt.subplots(1,2,figsize=(18,4))\nsns.scatterplot(x = y_pred,y = residuals,ax = ax[0])\nax[0].axhline(y = 0, c = 'r', lw = 1)\nax[0].set(title='Residual Plot')\nsns.regplot(x='X',y='y',data = dftemp,fit_reg=False, ax = ax[1])\nsns.lineplot(dftemp['X'],y_pred,c = 'r',lw = 1,ax = ax[1])\nax[1].set(title='Regression Plot')\nplt.show()","bd4d068f":"fig,ax = plt.subplots(1,4,figsize=(18,4))\nplt.subplot(141)\nset_poly_feature(X,y,2)\nplt.subplot(142)\nset_poly_feature(X,y,10)\nplt.subplot(143)\nset_poly_feature(X,y,30)\nplt.subplot(144)\nset_poly_feature(X,y,50)\nplt.show()","de6c5fbf":"fig,ax = plt.subplots(1,4,figsize=(18,4))\nplt.subplot(141)\nset_poly_feature(X,y,2,'res')\nplt.subplot(142)\nset_poly_feature(X,y,10,'res')\nplt.subplot(143)\nset_poly_feature(X,y,30,'res')\nplt.subplot(144)\nset_poly_feature(X,y,50,'res')\nplt.show()","e9208bd9":"score = []\nrmse = []\nfor degree in range(1,20,2):\n    X_poly = PolynomialFeatures(degree = degree).fit_transform(X)\n    lr = LinearRegression()\n    lr.fit(X_poly,y)\n    y_pred = lr.predict(X_poly)\n    score.append(lr.score(X_poly,y))\n    rmse.append(np.sqrt(mean_squared_error(y,y_pred)))\nplt.plot(score,c = 'b')\nplt.plot(rmse,c='r')\nplt.xticks(range(len(rmse)),range(1,20,2))\nplt.show()","4b90f3f8":"X_poly = PolynomialFeatures(degree = 8).fit_transform(X)\nlr = LinearRegression()\nlr.fit(X_poly,y)\ny_pred = lr.predict(X_poly)\nresiduals = y - y_pred\nprint(round(lr.intercept_,2),np.round(lr.coef_,2))\nprint_reg_result(lr,X_poly,y,y_pred)\nplot_residuals(y_pred,residuals)","2e898c33":"X = scale_data(dfdata[numeric_features + encoded_features])\ny = dfdata['price_log']","1cccc929":"lr = LinearRegression()\nlr.fit(X,y)\ny_pred = lr.predict(X)\nresiduals = y - y_pred\nprint(round(lr.intercept_,2),np.round(lr.coef_,2))\nprint_reg_result(lr,X,y,y_pred)\nplot_residuals(y_pred,residuals)","b658aa36":"n_zero_coefs = []\nscore = []\nalpha_list = [10,1,0.5,0.1,0.05,0.01,0.001]\nfor alpha in alpha_list:\n    lasso = Lasso(alpha = alpha)\n    lasso.fit(X,y)\n    coef = np.round(lasso.coef_,4)\n    n_zero_coefs.append(len(coef[coef == 0]))\n    score.append(round(lasso.score(X,y),2))\n    \npd.DataFrame(zip(alpha_list,n_zero_coefs,score),columns = ['alpha','zero_coef','score'])","a93e1df2":"lasso = Lasso(alpha = 0.01)\nlasso.fit(X,y)\ny_pred = lasso.predict(X)\nresiduals = y - y_pred\nprint(round(lasso.intercept_,2),np.round(lasso.coef_,2))\nprint_reg_result(lasso,X,y,y_pred)\nplot_residuals(y_pred,residuals)","3d55238c":"n_zero_coefs = []\nscore = []\nalpha_list = [100,10,1,0.1,0.01,0.001]\nfor alpha in alpha_list:\n    ridge = Ridge(alpha = alpha)\n    ridge.fit(X,y)\n    coef = np.round(ridge.coef_,4)\n    n_zero_coefs.append(coef.max())\n    score.append(round(ridge.score(X,y),2))\n    \npd.DataFrame(zip(alpha_list,n_zero_coefs,score),columns = ['alpha','zero_coef','score'])","4df4b5f9":"ridge = Ridge(alpha = 1000)\nridge.fit(X,y)\ny_pred = ridge.predict(X)\nprint(round(ridge.intercept_,2),np.round(ridge.coef_,2))\nprint_reg_result(ridge,X,y,y_pred)\nplot_residuals(y_pred,residuals)","8d26a51f":"elastic = ElasticNet(alpha = 0.1, l1_ratio=0.1)\nelastic.fit(X,y)\ny_pred = elastic.predict(X)\nprint(round(elastic.intercept_,2),np.round(elastic.coef_,2))\nprint_reg_result(elastic,X,y,y_pred)\nplot_residuals(y_pred,residuals)","d6ba9d04":"dftemp = pd.DataFrame(zip(X.columns.values,np.abs(lr.coef_),np.abs(lasso.coef_),np.abs(ridge.coef_),np.abs(elastic.coef_)),columns = ['feature','lr_coef','lasso_coef','ridge_coef','elastic_coef'])\nplt.figure(figsize=(18,5))\nplt.plot(dftemp['lr_coef'],label = 'lr',c = 'r')\nplt.plot(dftemp['lasso_coef'],label='lasso',c='g')\nplt.plot(dftemp['ridge_coef'],label='ridge',c='b')\nplt.plot(dftemp['elastic_coef'],label='elastic',c='y')\nplt.legend(loc='best')\nplt.xticks(range(X.shape[1]), X.columns.values,rotation = 45)\nplt.show()\ndftemp","b386aeeb":"p_values = np.round(f_regression(X, y)[1],4)\ndftemp = pd.DataFrame(zip(X.columns.values,p_values),columns = ['feature','pval'])\ndftemp.sort_values('pval',ascending=False)","a49b1b87":"vt_filter = VarianceThreshold(threshold=0.1)\nvt_filter.fit(X)\ndrop_list = [column for column in X.columns if column not in X.columns[vt_filter.get_support()]]\nprint(drop_list)","b7904e3e":"model_dict = {'lr':lr,'lasso':lasso,'elastic':elastic}\nfor key,value in model_dict.items():\n    rfe = RFE(value).fit(X,y)\n    dftemp[key] = rfe.ranking_\ndftemp","0142ad46":"features = numeric_features + encoded_features\nfeatures.remove('le_sellerg')\nfeatures.remove('le_councilarea')\nfeatures.remove('le_month')\nfeatures.remove('propertycount')\nfeatures.remove('le_suburb_street')\nprint(features)\nnumeric_features = ['distance', 'sellerg_mean', 'councilarea_mean']\ncategoric_features = ['rooms', 'type', 'method', 'bathroom', 'regionname', 'issaturday']","8a2bee62":"X = dfdata[features]\nlr = LinearRegression()\nlr.fit(X,y)\ny_pred = lr.predict(X)\nresiduals = y - y_pred\nprint(round(lr.intercept_,2),np.round(lr.coef_,2))\nprint_reg_result(lr,X,y,y_pred)\nplot_residuals(y_pred,residuals)","421a341c":"n_unique = []\nfor feature in categoric_features:\n    n_unique.append(dfdata[feature].nunique())\ndftemp = pd.DataFrame(zip(categoric_features,n_unique),columns = ['feature','n_unique'])\ndftemp.sort_values('n_unique',ascending=False)","b4bb44f3":"X = dfdata[numeric_features]\nX_encoded = pd.get_dummies(dfdata[categoric_features],drop_first = True)\nX = pd.concat([X,X_encoded],axis=1)\nprint(X.shape)","167e8c7b":"X = scale_data(X)\nlr = LinearRegression()\nlr.fit(X,y)\ny_pred = lr.predict(X)\nresiduals = y - y_pred\nprint(round(lr.intercept_,2),np.round(lr.coef_,2))\nprint_reg_result(lr,X,y,y_pred)\nplot_residuals(y_pred,residuals)","ad3cca7e":"X = scale_data(X)\ndt = DecisionTreeRegressor(max_depth = 8,min_samples_split=10).fit(X,y)\ny_pred = dt.predict(X)\nresiduals = y - y_pred\nprint_reg_result(dt,X,y,y_pred)\nplot_residuals(y_pred,residuals)","c20b1d2e":"X = scale_data(X)\nsgd = SGDRegressor(alpha = 0.01)\nsgd.fit(X,y)\ny_pred = sgd.predict(X)\nresiduals = y - y_pred\nprint(np.round(sgd.intercept_,2),np.round(sgd.coef_,2))\nprint_reg_result(sgd,X,y,y_pred)\nplot_residuals(y_pred,residuals)","66d5de55":"X = dfdata[numeric_features + encoded_features]\ny = dfdata['price_log']","f2c16010":"X_train,X_test,y_train,y_test = train_test_split(X,y)\nscaler = StandardScaler().fit(X_train)\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)\ncv_results = np.round(100 * cross_val_score(sgd,X_train_scaled,y_train,cv = 5),1)\nprint(\"Cross validation score : \",cv_results)\nprint(\"Mean cross val score : \", round(np.mean(cv_results),1))\n\nkfold = KFold(n_splits = 5,shuffle = True)\ncv_results = np.round(100 * cross_val_score(sgd,X_train_scaled,y_train,cv = kfold),1)\nprint(\"Cross validation score : \",cv_results)\nprint(\"Mean cross val score : \", round(np.mean(cv_results),1))","fa855ffb":"X_train,X_test,y_train,y_test = train_test_split(X,y)\nX_train,X_validation,y_train,y_validation = train_test_split(X_train,y_train)\nscaler = StandardScaler().fit(X_train)\nX_train_scaled = scaler.transform(X_train)\nX_validation_scaled = scaler.transform(X_validation)\nX_test_scaled = scaler.transform(X_test)","47036b23":"values = [100,10,1,0.1,0.01,0.001]\nbest_score = 0\nfor alpha in values:\n    for ratio in values:\n        elastic = ElasticNet(alpha=alpha,l1_ratio=ratio).fit(X_train_scaled,y_train)\n        score = elastic.score(X_validation_scaled,y_validation)\n        if best_score < score:\n            best_score = score\n            best_params = {'alpha':alpha,'l1_ratio': ratio}\nprint(\"Best Score : \",round(best_score,2))\nprint(\"Best Parameters : \",best_params)","e95a7a12":"elastic = ElasticNet(**best_params)\nelastic.fit(X_train_scaled, y_train)\ny_pred = elastic.predict(X_test_scaled)\nprint(round(elastic.intercept_,2),np.round(elastic.coef_,2))\nprint_reg_result(elastic,X_test_scaled,y_test,y_pred)","8700dee3":"dt_overfit = DecisionTreeRegressor().fit(X_train_scaled,y_train)\nprint(\"Overfit prediction : \",round(100 * dt_overfit.score(X_train_scaled,y_train),1))\ndt = DecisionTreeRegressor(max_depth = 8,min_samples_split=10).fit(X_train_scaled,y_train)\nprint(\"Normal prediction : \",round(100 * dt.score(X_train_scaled,y_train),1))\n","9a73ae04":"train_size,train_scores,test_scores = learning_curve(dt,X_train_scaled,y_train,train_sizes = np.linspace(0.05,1,20))\ntrain_scores_mean = np.mean(train_scores,axis=1)\ntest_scores_mean = np.mean(test_scores,axis=1)\n\ntrain_size_overfit,train_scores_overfit,test_scores_overfit = learning_curve(dt_overfit,X_train_scaled,y_train,train_sizes = np.linspace(0.05,1,20))\ntrain_scores_overfit_mean = np.mean(train_scores_overfit,axis=1)\ntest_scores_overfit_mean = np.mean(test_scores_overfit,axis=1)\n\nfig,ax = plt.subplots(1,2,figsize=(18,5))\nsns.lineplot(x=train_size,y=train_scores_mean,c='r',label='train',ax=ax[0])\nsns.lineplot(x=train_size,y=test_scores_mean,c='b',label='test',ax=ax[0])\nax[0].legend(loc='best')\nsns.lineplot(x=train_size_overfit,y=train_scores_overfit_mean,c='r',label='train',ax=ax[1])\nsns.lineplot(x=train_size_overfit,y=test_scores_overfit_mean,c='b',label='test',ax=ax[1])\nax[1].legend(loc='best')\nplt.show()","99748093":"alpha_list = [100, 10, 1, 0.1, 0.01]\nl1_ratio_list =  [0.1, 0.01, 0.05, 0.001]\nparam_grid = {'alpha': alpha_list, 'l1_ratio' : l1_ratio_list}\nestimator = ElasticNet(random_state = 12)","242727f0":"grid_search = GridSearchCV(estimator,param_grid,cv = 5)\ngrid_search.fit(X_train_scaled,y_train)\n\nprint(\"Grid Search Result : \", round(100 * grid_search.score(X_validation_scaled,y_validation),1))\nprint(\"Grid Search Best Parameters : \", grid_search.best_params_)\nprint(\"Grid Search Best Score : \", round(100 * grid_search.best_score_,1))\nprint(\"Grid Search Best Estimator : \", grid_search.best_estimator_)","7998b9bd":"df_result = pd.DataFrame(grid_search.cv_results_)\nprint(df_result.shape)\ndf_result[['param_alpha','param_l1_ratio','mean_test_score']].head(10)","97ca5e7b":"mean_scores = np.round(100 * np.array(df_result['mean_test_score']).reshape(len(alpha_list),len(l1_ratio_list)),2)\nsns.heatmap(mean_scores,annot = True,fmt = '2.1f')\nplt.xticks(range(len(l1_ratio_list)),l1_ratio_list,rotation = 45)\nplt.yticks(range(len(alpha_list)),alpha_list,rotation = 90)\nplt.show()","30b0e233":"randomized_search = RandomizedSearchCV(estimator,param_grid,cv = 5,n_iter = 10)\nrandomized_search.fit(X_train_scaled,y_train)\n\nprint(\"Randomized Search Result : \", round(100 * randomized_search.score(X_validation_scaled,y_validation),1))\nprint(\"Randomized Search Best Parameters : \", randomized_search.best_params_)\nprint(\"Randomized Search Best Score : \", round(100 * randomized_search.best_score_,1))\nprint(\"Randomized Search Best Estimator : \", randomized_search.best_estimator_)","821df9ee":"df_result = pd.DataFrame(randomized_search.cv_results_)\nprint(df_result.shape)\ndf_result[['param_alpha','param_l1_ratio','mean_test_score']].head(10)","ea31121d":"# Grid Search\n- Randomized Search for high number of parameters","d0c42d95":"# MultiCollinearity Test","b99c74fd":"# Validation and Learning Curves\n- Cross Validation\n    - Kfold Cross Validation and shuffling of data\n    - Leave One Out Cross Validation\n    - Stratified Cross Validation\n    - Group KFold Cross Validation\n- Validation\n    - Test, train and validation sets\n    - Validation set is used for parameter tuning\n- Learning Curves\n    - Check overfitting via via iteratively increasing train data size\n    - Train and test scores should merge as data size increases\n    - Decide on data size and model hyperparameters","e9f4affb":"# Stochastic Gradient Descent\n- Used in deep learning\n- In case of high volume of data, use batch or mini batch algorithms\n- alpha is learning rate\n- descending learning rates","92645c33":"## RFE Feature Selection","4632aa8a":"# Lasso Regression\n- L1 Regularization to decrease coefficient quantity\n- Alpha 0 means normal linear regresssion\n- As alpha increases, number of zero coefficients increases\n- Hypertuning for alpha values as 0.1, 0.01 etc. not as 0.01, 0.02\n- Can be used for feature elimination","462d72c3":"# Target Feature","b81cc76a":"# Functions and Imports","69a60bbc":"# Categorical Features","c58d5d33":"# Linear Regression\n- Assumptions\n    - Bias vs Variance trade off\n    - Handling of outlier data points\n    - Linearity between response & predictor features\n    - No perfect multicollinearity between the predictors (via VIF Factor or correlation)\n    - Zero mean of the residuals and Homoscedasticity (constant variance)\n    - Normality of residuals\n    - No autocorrelation of residuals\n\n- Performance Measures\n    - R2 increases whenever a new feature is added to the model.\n    - R2_adj increases whenever an improving feature is added to the model.\n    - High R2 doesn't mean good fit\n- Exceptions\n    - Use Lars Regression for high dimensional data","97847c87":"## Correlation Analysis","9cb0a62b":"# Scatter Test","5dbd4853":"# Ridge Regression\n- L2 Regularized Regression\n- Alpha 0 means normal linear regresssion\n- As alpha increases, number of zero coefficients increases\n- Hypertuning for alpha values as 0.1, 0.01 etc. not as 0.01, 0.02","50a7405e":"# Continuous Features","c748d4aa":"## Learning Curve","5e01649d":"# Feature Selection","ab8313cd":"## Univariate F-Regression Test","50232553":"# Residual Plots<br>\n- Find heteroscedasticity\n- Use of Polynomial Features or Data Transformation\n- Do not expect perfect distribution in real life","55d68b75":"**Suburb:** Suburb\n\n**Address:** Address\n\n**Rooms:** Number of rooms\n\n**Price:** Price in Australian dollars\n\n**Method:**\n- S - property sold;\n- SP - property sold prior;\n- PI - property passed in;\n- PN - sold prior not disclosed;\n- SN - sold not disclosed;\n- NB - no bid;\n- VB - vendor bid;\n- W - withdrawn prior to auction;\n- SA - sold after auction;\n- SS - sold after auction price not disclosed.\n- N\/A - price or highest bid not available.\n\n**Type:**\n- br - bedroom(s);\n- h - house,cottage,villa, semi,terrace;\n- u - unit, duplex;\n- t - townhouse;\n- dev site - development site;\n- o res - other residential.\n\n**SellerG:** Real Estate Agent\n\n**Date:** Date sold\n\n**Distance:** Distance from CBD in Kilometres\n\n**Regionname:** General Region (West, North West, North, North east \u2026etc)\n\n**Propertycount:** Number of properties that exist in the suburb.\n\n**Bedroom2 :** Scraped # of Bedrooms (from different source)\n\n**Bathroom:** Number of Bathrooms\n\n**Car:** Number of carspots\n\n**Landsize:** Land Size in Metres\n\n**BuildingArea:** Building Size in Metres\n\n**YearBuilt:** Year the house was built\n\n**CouncilArea:** Governing council for the area","3b75ce9a":"# ElasticNet\n- L1 and L2 Regularization\n- Combination of Lasso and Ridge","992f4a5d":"## Validation","2c84f44b":"# Decision Tree Regression\n- Split tree via information gain\n- Simple trees are better, use pruning parameters\n- Cant predict new data","b43556ee":"## VIF Analysis<br>\n- Variance Inflation Analysis : Run regression and find collinearity of features\n- 1     : not correlated.\n- (1-5) : moderately correlated.\n- (>5)  : highly correlated.","148a6f0d":"<img src=\"https:\/\/miro.medium.com\/max\/1000\/0*ZppAJQdr9FnrnrGG.jpg\" width=\"600\" height=\"600\" align=\"left\">","faad5823":"# Get Data","f5d917d1":"# Missing Values"}}