{"cell_type":{"9980a6cf":"code","5d2fc9cf":"code","151537d3":"code","3fc35301":"code","07a60198":"code","9542b219":"code","6880fcb9":"code","4c0ac057":"code","d79e465a":"code","515d2b61":"code","c96c7a36":"code","3b7c00bf":"code","90e846ba":"code","0bb19b12":"code","474a5c10":"code","22f64f4f":"code","d7d10b8e":"code","4dc46812":"code","88021485":"code","fcfe6fe1":"code","035bab51":"code","50de1728":"code","8112652a":"code","797e2c12":"code","135ed4d7":"markdown","e251ce4a":"markdown","c8de476d":"markdown","00a4a15e":"markdown","d23ccc47":"markdown"},"source":{"9980a6cf":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom plotly.offline import iplot\nimport plotly.graph_objects as go\nimport random\nimport os\nimport numpy as np\nimport pandas as pd \nimport cv2\nimport os\nfrom matplotlib import style\nimport seaborn as sns\nfrom skimage import img_as_float, img_as_uint, img_as_int\nfrom skimage.feature import greycomatrix, greycoprops\nimport xgboost as xgb\nfrom xgboost import plot_importance\nfrom sklearn.model_selection import GridSearchCV\nfrom xgboost import XGBClassifier\nfrom tqdm import tqdm_notebook as tqdm\nfrom sklearn.preprocessing import StandardScaler\nprint(os.listdir(\"..\/input\"))\n","5d2fc9cf":"train = pd.read_csv('..\/input\/train.csv')\ntrain['defect'] = train['EncodedPixels'].notnull()\ntrain['ClassId'] = train['ImageId_ClassId'].str[-1:]\ntrain['ImageId'] = train['ImageId_ClassId'].str[:-2]\ntrain = train[['ImageId','ClassId','defect','EncodedPixels']]\ntrain['EncodedPixels']=train['EncodedPixels'].fillna(0)\ntrain.head()","151537d3":"def mask2rle(img):\n    tmp = np.rot90( np.flipud( img ), k=3 )\n    rle = []\n    lastColor = 0;\n    startpos = 0\n    endpos = 0\n\n    tmp = tmp.reshape(-1,1)   \n    for i in range( len(tmp) ):\n        if (lastColor==0) and tmp[i]>0:\n            startpos = i\n            lastColor = 1\n        elif (lastColor==1)and(tmp[i]==0):\n            endpos = i-1\n            lastColor = 0\n            rle.append( str(startpos)+' '+str(endpos-startpos+1) )\n    return \" \".join(rle)\n\ndef rle2mask(rle, imgshape):\n    width = imgshape[0]\n    height= imgshape[1]\n    \n    mask= np.zeros( width*height ).astype(np.uint8)\n    \n    array = np.asarray([int(x) for x in rle.split()])\n    starts = array[0::2]\n    lengths = array[1::2]\n\n    current_position = 0\n    for index, start in enumerate(starts):\n        mask[int(start):int(start+lengths[index])] = 1\n        current_position += lengths[index]\n        \n    return np.flipud( np.rot90( mask.reshape(height, width), k=1 ) )\n\ndef rle2mask_eda(mask_rle, shape=(1600,256)):\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (width,height) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(shape).T","3fc35301":"columns = 2\nrows = 10\nfig = plt.figure(figsize=(20,columns*rows+2))\nfor i in range(1,columns*rows+1):\n    fn = train['ImageId'].iloc[i]\n    c = train['ClassId'].iloc[i]\n    fig.add_subplot(rows, columns, i).set_title(fn+\"  ClassId=\"+c)\n    img = cv2.imread( '..\/input\/train_images\/'+fn )\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    mask = rle2mask_eda(train.loc[train['EncodedPixels']!=0,'EncodedPixels'].iloc[i])\n    img[mask==1,0] = 255\n    plt.imshow(img)\nplt.show()","07a60198":"columns = 2\nrows = 10\nfig = plt.figure(figsize=(20,columns*rows+2))\nfor i in range(1,columns*rows+1):\n    fn = train['ImageId'].iloc[i]\n    c = train['ClassId'].iloc[i]\n    fig.add_subplot(rows, columns, i).set_title(fn+\"  ClassId=\"+c)\n    img = cv2.imread( '..\/input\/train_images\/'+fn )\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    mask = rle2mask_eda(train.loc[train['EncodedPixels']!=0,'EncodedPixels'].iloc[i])\n    img[mask==1] = 255\n    plt.imshow(img)","9542b219":"train_path =  '..\/input\/train_images\/'\ntest_path =  '..\/input\/test_images\/'","6880fcb9":"def GLCM(img_list, img_path):\n    \n    glcm_data = np.zeros((len(img_list), 80))\n    for i, fn in tqdm(enumerate(img_list), total=len(img_list)):\n        glcm_ = np.zeros(80)\n        img = cv2.imread( img_path+fn )\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n        image = img_as_uint(img)\n        image =  image.astype(np.uint8)\n        glcm = greycomatrix(image, [1, 2, 3, 4], [0, np.pi\/8,np.pi\/4, 3*np.pi\/8], 256, symmetric=True, normed=True)\n        glcm_[:16]   = greycoprops(glcm, 'contrast').ravel()\n        glcm_[16:32] = greycoprops(glcm, 'dissimilarity').ravel()\n        glcm_[32:48] = greycoprops(glcm, 'homogeneity').ravel()\n        glcm_[48:64] = greycoprops(glcm, 'energy').ravel()\n        glcm_[64:80] = greycoprops(glcm, 'ASM').ravel()\n        glcm_data[i,:] = glcm_\n    \n    return pd.DataFrame(glcm_data)","4c0ac057":"images = list(train.ImageId.unique())\ndefected_steal_images = list(train[train.defect]['ImageId'].unique())\nnon_defected_steal_images = list(set(images)-set(defected_steal_images))","d79e465a":"print(f'Number of unique images       :{len(train.ImageId.unique())}')\nprint(f'Number of non defected images :{len(defected_steal_images)}')\nprint(f'Number of defected images     :{len(non_defected_steal_images)}')","515d2b61":"glcm_data_normal = GLCM(non_defected_steal_images, train_path)","c96c7a36":"defected = train[train.defect]\neachG = defected.groupby(['ClassId'])\ntype1 = eachG.get_group('1')\ntype2 = eachG.get_group('2')\ntype3 = eachG.get_group('3')\ntype4 = eachG.get_group('4')\ntype1 = type1[type1.defect].reset_index(drop=True)\ntype2 = type2[type2.defect].reset_index(drop=True)\ntype3 = type3[type3.defect].reset_index(drop=True)\ntype4 = type4[type4.defect].reset_index(drop=True)","3b7c00bf":"type1_defected_img = list(type1.ImageId.unique())\ntype2_defected_img = list(type2.ImageId.unique())\ntype3_defected_img = list(type3.ImageId.unique())\ntype4_defected_img = list(type4.ImageId.unique())","90e846ba":"glcm_data_type_1 = GLCM(type1_defected_img, train_path)","0bb19b12":"glcm_data_type_2 = GLCM(type2_defected_img, train_path)","474a5c10":"glcm_data_type_3 = GLCM(type3_defected_img, train_path)","22f64f4f":"glcm_data_type_4 = GLCM(type4_defected_img, train_path)","d7d10b8e":"glcm_data_type_1['classId'] = 1\nglcm_data_type_2['classId'] = 2\nglcm_data_type_3['classId'] = 3\nglcm_data_type_4['classId'] = 4\nglcm_data_normal['classId'] = 0\nglcm_df = pd.concat([glcm_data_normal, glcm_data_type_1, glcm_data_type_2, \n                     glcm_data_type_3, glcm_data_type_4]).sample(frac=1, \n                     random_state=1365).reset_index(drop=True)\ncols = glcm_df.iloc[:,:-1].columns\nsc = StandardScaler()\nglcm_df.iloc[:,:-1] = pd.DataFrame(sc.fit_transform(glcm_df.iloc[:,:-1]), columns=cols)\nglcm_df.head()","4dc46812":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=list(range(1,81)), y=glcm_data_normal.iloc[:,:-1].values.mean(axis=0),\n                    mode='lines+markers',\n                    name='Normal Images'))\nfig.add_trace(go.Scatter(x=list(range(1,81)), y=glcm_data_type_1.iloc[:,:-1].values.mean(axis=0),\n                    mode='lines+markers',\n                    name='Type 1 Defect'))\nfig.add_trace(go.Scatter(x=list(range(1,81)), y=glcm_data_type_2.iloc[:,:-1].values.mean(axis=0),\n                    mode='lines+markers',\n                    name='Type 2 Defect'))\nfig.add_trace(go.Scatter(x=list(range(1,81)), y=glcm_data_type_3.iloc[:,:-1].values.mean(axis=0),\n                    mode='lines+markers',\n                    name='Type 3 Defect'))\nfig.add_trace(go.Scatter(x=list(range(1,81)), y=glcm_data_type_4.iloc[:,:-1].values.mean(axis=0),\n                    mode='lines+markers',\n                    name='Type 4 Defect'))\nfig.update_layout(title='GLCM Features For Steal Surface',\n                   xaxis_title='Average of GLCM Features For Normal and Defected Steel')\n\nfig.show()","88021485":"parameters = {'n_estimators': [200,400], \n              'max_depth': [15, 25],\n              'learning_rate' : [0.05], \n              'subsample' : [0.8]\n             }","fcfe6fe1":"y_train = glcm_df.pop('classId')\nX_train = glcm_df\n\nclf = xgb.XGBClassifier(objective='multi:softmax')\ngrid_search = GridSearchCV(estimator=clf, param_grid=parameters, cv=5, n_jobs=-1 , verbose = 0)\ngrid_search.fit(X_train , y_train)\nprint(\"Best score: %0.5f\" % grid_search.best_score_)\nprint(\"Best parameters set:\")\nbest_parameters=grid_search.best_estimator_.get_params()\nfor param_name in sorted(parameters.keys()):\n    print(\"\\t%s: %r\" % (param_name, best_parameters[param_name]))\nprint(\"Best Score\")","035bab51":"glcm_data_normal['classId'] = 0\nglcm_data_type_1['classId'] = 1\nglcm_data_type_2['classId'] = 1\nglcm_data_type_3['classId'] = 1\nglcm_data_type_4['classId'] = 1","50de1728":"glcm_df = pd.concat([glcm_data_normal, glcm_data_type_1, glcm_data_type_2, glcm_data_type_3, glcm_data_type_4]).sample(frac=1, random_state=1365).reset_index(drop=True)\nglcm_df.head()","8112652a":"y_train = glcm_df.pop('classId')\nX_train = glcm_df\n\nclf = xgb.XGBClassifier()\ngrid_search = GridSearchCV(estimator=clf, param_grid=parameters, cv=5, n_jobs=-1 , verbose = 0)","797e2c12":"grid_search.fit(X_train , y_train)\nprint(\"Best score: %0.5f\" % grid_search.best_score_)\nprint(\"Best parameters set:\")\nbest_parameters=grid_search.best_estimator_.get_params()\nfor param_name in sorted(parameters.keys()):\n    print(\"\\t%s: %r\" % (param_name, best_parameters[param_name]))\nprint(\"Best Score\")","135ed4d7":"As stated in the Competitions Data Page the problem has two dimentions : 'In this competition you will be predicting the **location** and **type of defects** found in steel manufacturing'. This kernel mainly tries to answer the second part.\n\nIn this kernel I am using GLCM Texture Features to differentiate between Normal and \nDefected Steel Images and also between different Defect Types. \n\nThis method can be used for identifying type of defect after segmentation which can be thought of as a solution for second part of the problem. (First part being predicting the surface of the defect and second part as type of defect)\n\n**For more information about GLCM you can refer to \n**\n[https:\/\/prism.ucalgary.ca\/handle\/1880\/51900](http:\/\/https:\/\/prism.ucalgary.ca\/handle\/1880\/51900)\n\n**The idea behind this kernel if from\n**\n[https:\/\/software.intel.com\/en-us\/articles\/use-machine-learning-to-detect-defects-on-the-steel-surface](https:\/\/software.intel.com\/en-us\/articles\/use-machine-learning-to-detect-defects-on-the-steel-surface)\n\nWith the same feature set as the original research without any special hyperparameter tuning the model can reach 90% accuracy for identifying defected steel images and 85% accuracy for differentiating between various defect types. Increasing GLCM features (adding more points, angles and Correlation Feature) will improve the accuracy but with limited kernel time a better solution is improving speed and feature selection for current features. ","e251ce4a":"**First we try to identify Defect type****","c8de476d":"**1 Channel Images with mask**","00a4a15e":"**And this part is for identifying any type of defect**","d23ccc47":"**3 Channel Images with mask**"}}