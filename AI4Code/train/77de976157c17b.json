{"cell_type":{"2838650b":"code","467a3071":"code","60056fee":"code","004636a2":"code","d336450b":"code","1f845718":"code","59a85618":"code","76d546c1":"code","918584d4":"code","f41b9ff5":"code","13c117d6":"code","f68dd179":"code","ee462712":"code","2be94560":"code","d998732c":"code","b791447c":"code","8de2126f":"code","56aa68c3":"markdown","38cb38c1":"markdown","9bcbe024":"markdown","6d7ba658":"markdown","938ccdca":"markdown","70c09425":"markdown","bc635caa":"markdown","7b290717":"markdown"},"source":{"2838650b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","467a3071":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV","60056fee":"df = pd.read_csv('..\/input\/social-network-ads\/Social_Network_Ads.csv')\ndf.head()","004636a2":"df.shape","d336450b":"df.columns","1f845718":"df.drop(columns=['User ID', 'Gender'],axis=1,inplace=True)","59a85618":"X = df.iloc[:,:-1].values\ny = df.iloc[:,-1].values","76d546c1":"X[:10]","918584d4":"y[:10]","f41b9ff5":"y = y.reshape(len(y),1)","13c117d6":"y[:10]","f68dd179":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","ee462712":"sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","2be94560":"classifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)","d998732c":"y_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","b791447c":"accuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))","8de2126f":"parameters = [{'C': [0.25, 0.5, 0.75, 1], 'kernel': ['linear']},\n              {'C': [0.25, 0.5, 0.75, 1], 'kernel': ['rbf'], 'gamma': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]}]\ngrid_search = GridSearchCV(estimator = classifier,\n                           param_grid = parameters,\n                           scoring = 'accuracy',\n                           cv = 10,\n                           n_jobs = -1)\ngrid_search.fit(X_train, y_train)\nbest_accuracy = grid_search.best_score_\nbest_parameters = grid_search.best_params_\nprint(\"Best Accuracy: {:.2f} %\".format(best_accuracy*100))\nprint(\"Best Parameters:\", best_parameters)","56aa68c3":"## Splitting the dataset into the Training set and Test set","38cb38c1":"## Feature Scaling","9bcbe024":"# Import the libraries","6d7ba658":"## Applying Grid Search to find the best model and the best parameters","938ccdca":"## Applying k-Fold Cross Validation","70c09425":"# Importing the dataset","bc635caa":"## Making the Confusion Matrix","7b290717":"## Training the Kernel SVM model on the Training set"}}