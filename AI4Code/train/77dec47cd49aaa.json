{"cell_type":{"80c8dfbf":"code","1b9b8ee4":"code","cc77df6a":"code","77192161":"code","002f9bb9":"code","fb9b225c":"code","6601d67a":"code","cb27d819":"code","a92fbd31":"code","057c0163":"code","c8d13ff9":"code","79e7e745":"code","d94a75a3":"markdown","14085584":"markdown","043d3866":"markdown","5ba93453":"markdown","3b12ef47":"markdown","1e9daf95":"markdown","f41cb237":"markdown","f98ffbe9":"markdown"},"source":{"80c8dfbf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1b9b8ee4":"train_data = pd.read_csv('\/kaggle\/input\/santander-customer-transaction-prediction\/train.csv')\ntrain_data.head()","cc77df6a":"test_data=pd.read_csv('\/kaggle\/input\/santander-customer-transaction-prediction\/test.csv')\ntest_data.head()","77192161":"test_x=test_data.copy().drop(columns=['ID_code'])\ntest_x.head()","002f9bb9":"train_y=train_data['target']\ntrain_x=train_data.copy().drop(columns=['target','ID_code'])\ntrain_x.head()","fb9b225c":"from sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier\nclf1 = tree.DecisionTreeClassifier()\nclf1_={\"clf\":clf1,\"name\":\"Decision tree\"}\nclf2 = RandomForestClassifier(n_estimators=10)\nclf2_={\"clf\":clf2,\"name\":\"Random forest\"}\nclf3= AdaBoostClassifier(n_estimators=100)\nclf3_={\"clf\":clf3,\"name\":\"Ada boost\"}\n#from sklearn import svm\n#clf2= svm.SVC(kernel='rbf')\n#clf2_={\"clf\":clf2,\"name\":\"Support vector machine\"}\nclfs=[clf1_,clf2_,clf3_]","6601d67a":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import classification_report,roc_auc_score\n\nskf = StratifiedKFold(n_splits=2,random_state=5)\nskf.get_n_splits(train_x,train_y)\nbest_auc_avg=0\nfor clf_ in clfs:\n    print(clf_[\"name\"])\n    clf=clf_[\"clf\"]\n    aucList=[]\n    for train_index, test_index in skf.split(train_x, train_y):\n        X_train_split, X_test_split = train_x.iloc[train_index], train_x.iloc[test_index]\n        y_train_split, y_test_split = train_y[train_index], train_y[test_index]\n        positive=np.sum(y_train_split==1)\n        print(\"Split size {} train samples, {} positive\".format(X_train_split.shape, positive))\n        clf.fit(X_train_split,y_train_split)\n        y_pred_split=clf.predict(X_test_split)\n        print(classification_report(y_test_split,y_pred_split))\n        auc_score=roc_auc_score(y_test_split,y_pred_split)\n        print(\"Roc AUC:{}\".format(auc_score))\n        aucList.append(auc_score)\n    auc=np.asarray(aucList)\n    print(auc.shape)\n    print(auc)\n    auc_avg=np.mean(auc)\n    print(\"ROC AUC AVG:{}\".format(auc_avg))\n    if(auc_avg>best_auc_avg):\n        best_clf_=clf_\n        best_auc_avg=auc_avg\n        \nprint(\"Best classifier was {}\".format(best_clf_[\"name\"]))\n    ","cb27d819":"print(best_clf_[\"name\"])\nclf=best_clf_[\"clf\"]","a92fbd31":"import lightgbm as lgb\nparams = {}\nparams['learning_rate'] = 0.003\nparams['boosting_type'] = 'gbdt'\nparams['objective'] = 'binary'\nparams['metric'] = 'auc'\nparams['sub_feature'] = 0.5\nparams['num_leaves'] = 10\nparams['min_data'] = 50\nparams['max_depth'] = 10\nparams['verbosity'] = 1","057c0163":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import classification_report,roc_auc_score\n\nskf = StratifiedKFold(n_splits=2,random_state=5)\nskf.get_n_splits(train_x,train_y)\nclf_={\"clf\":None,\"name\":\"LightGbm\"}\nprint(clf_[\"name\"])\naucList=[]\npredictions = np.zeros(len(test_x))\ntrain_predictions = np.zeros(len(train_x))\nfor train_index, test_index in skf.split(train_x, train_y):\n    X_train_split, X_test_split = train_x.iloc[train_index], train_x.iloc[test_index]\n    y_train_split, y_test_split = train_y[train_index], train_y[test_index]\n    d_train = lgb.Dataset(X_train_split, label=y_train_split)\n    d_test=lgb.Dataset(X_test_split, label=y_test_split)\n    positive=np.sum(y_train_split==1)\n    print(\"Split size {} train samples, {} positive\".format(X_train_split.shape, positive))\n    clf = lgb.train(params, d_train, 5000,verbose_eval=500,early_stopping_rounds=100,valid_sets=[d_train,d_test])\n    y_pred_split=clf.predict(X_test_split,num_iteration=clf.best_iteration)\n    #print(classification_report(y_test_split,y_pred_split))\n    auc_score=roc_auc_score(y_test_split,y_pred_split)\n    print(\"Roc AUC:{}\".format(auc_score))\n    aucList.append(auc_score)\n    # Combine predictions from all folds and average\n    predictions += clf.predict(test_x, num_iteration=clf.best_iteration) \/ skf.n_splits\n    train_predictions +=clf.predict(train_x, num_iteration=clf.best_iteration) \/ skf.n_splits\nauc=np.asarray(aucList)\nprint(auc.shape)\nprint(auc)\nauc_avg=np.mean(auc)\nprint(\"ROC AUC AVG:{}\".format(auc_avg))\nauc_combined=roc_auc_score(train_y,train_predictions)\nprint(\"ROC AUC Combined:{}\".format(auc_combined))\n\nif(auc_combined>best_auc_avg):\n    best_clf_=clf_\n    best_auc_avg=auc_combined\n        \nprint(\"Best classifier was {}\".format(best_clf_[\"name\"]))","c8d13ff9":"test_y=predictions","79e7e745":"sub_df=pd.DataFrame({\"ID_code\":test_data[\"ID_code\"].values})\nsub_df[\"target\"]=test_y\nsub_df.to_csv(\"submission.csv\",index=False)","d94a75a3":"## Validation\n1. Split the data to k-fold train and test sets\n2. Train the classifier\n3. Calculate classification metrics from test set\n\nThis is done for each of the classifiers chosen.","14085584":"## Creating the classifiers","043d3866":"# Loading the data","5ba93453":"# Prediction and validation","3b12ef47":"### \"Classic\" classifiers","1e9daf95":"# Transforming data","f41cb237":"# Submission","f98ffbe9":"### LightGBM classifier"}}