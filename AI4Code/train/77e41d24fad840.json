{"cell_type":{"909b3a5e":"code","d51bec36":"code","4718f8a3":"code","9ba6a6b2":"code","82e415e4":"code","2b35dcfb":"code","a1b3cddc":"code","54a0c4d3":"code","794e4f66":"code","64f3a657":"code","e8a544fd":"code","21a1d8d1":"code","935a1d84":"code","cc257747":"code","0bc31313":"code","f8e32601":"code","fb9854fe":"code","7c70acd9":"code","c5c78549":"code","cb4a4544":"code","2c76a403":"code","f3fb7f59":"code","07c6b163":"code","9253f170":"code","02663a72":"code","cb43ab2d":"code","4d385aa3":"code","b81f0e3a":"code","ea40a62d":"code","0f9fa5c8":"code","7e2031c6":"code","c5e3a510":"code","31e13ce6":"code","9b44549f":"code","112cf974":"code","57ff012c":"code","8ff6f18f":"code","28eecf7c":"code","eda020c2":"code","3425b822":"code","90690e3f":"code","27317d76":"code","f7d0bcd7":"code","af74c99b":"code","10445578":"code","8c93b068":"code","cf31f01d":"code","1edec5d6":"code","da97ff2f":"code","db146d1f":"code","96492c25":"code","0d7219bf":"code","e9e981d6":"code","de90f864":"code","dd6958aa":"code","96f733c4":"code","3f7f3296":"code","c51d6bfe":"code","ae5b1df6":"code","2bc44896":"code","6017eefe":"code","e1d78cf9":"code","02f65d7b":"markdown","76be5cc6":"markdown","7965cb32":"markdown","f79d5ec1":"markdown","21464ef6":"markdown","0abe0473":"markdown","33190c66":"markdown","156eefb6":"markdown","61472336":"markdown","a5cf6d67":"markdown","a202b02b":"markdown"},"source":{"909b3a5e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d51bec36":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","4718f8a3":"#checking the head of data\n\ndata_train=pd.read_csv('..\/input\/titanic\/train.csv')\ndata_test=pd.read_csv('..\/input\/titanic\/train.csv')","9ba6a6b2":"#checking the head of the train set\ndata_train.head(10)","82e415e4":"#EDA FOR THE TRAINING DATA\ndata_train.describe().T","2b35dcfb":"data_train.info()","a1b3cddc":"data_train.isnull().sum()","54a0c4d3":"data_train.info()","794e4f66":"data_train['Pclass'].value_counts()","64f3a657":"data_train['Embarked'].value_counts()","e8a544fd":"#the target variable is Survived \n#this is not a balanced dataset clearly visible here\ndata_train['Survived'].value_counts()","21a1d8d1":"sns.pairplot(data_train)","935a1d84":"sns.countplot(data_train['Survived'],hue=data_train['Sex'],palette=\"Dark2\")","cc257747":"sns.countplot(data_train['Survived'],hue=data_train['Pclass'])","0bc31313":"sns.countplot(data_train['Survived'],hue=data_train['Embarked'],palette=\"Set3\")","f8e32601":"sns.countplot(x=data_train['Survived'],data=data_train['Embarked'],palette=\"Set3\")","fb9854fe":"sns.countplot(x=data_train['Survived'],data=data_train['Pclass'])","7c70acd9":"sns.countplot(x=data_train['Survived'],data=data_train['Sex'],palette=\"Dark2\")","c5c78549":"sns.distplot(data_train['Age'],bins=30)","cb4a4544":"sns.scatterplot(x=data_train['Age'],y=data_train['PassengerId'],hue=data_train['Sex'])","2c76a403":"sns.scatterplot(x=data_train['Age'],y=data_train['PassengerId'],hue=data_train['SibSp'])","f3fb7f59":"sns.countplot(data_train['Survived'],hue=data_train['SibSp'],palette=\"Dark2\")","07c6b163":"data=data_train.groupby(['Pclass'])\ndata.median()","9253f170":"def myage(cols):\n    Age=cols[0]\n    Pclass=cols[1]\n    if Pclass==1:\n        return(38)\n    if Pclass==2:\n        return(29)\n    if Pclass==3:\n        return(25)\n    ","02663a72":"data_train['Age']=data_train[['Age','Pclass']].apply(myage,axis=1)","cb43ab2d":"data_train.info()","4d385aa3":"data_train.drop(['Cabin'],axis=1,inplace=True)\n#dropping cabin","b81f0e3a":"data_train['Embarked'].isnull().sum()","ea40a62d":"data_train.dropna(inplace=False)","0f9fa5c8":"sex = pd.get_dummies(data_train['Sex'],drop_first=True)\nembark = pd.get_dummies(data_train['Embarked'],drop_first=True)","7e2031c6":"data_train.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)","c5e3a510":"data_train = pd.concat([data_train,sex,embark],axis=1)","31e13ce6":"#checking correlation\nsns.heatmap(data_train.iloc[:, 0:6].corr(),annot=True)\nplt.show()","9b44549f":"#Linear Regression\n\nX = data_train.drop('Survived', axis=1)\n\n# Copy target into the y dataframe. \ny = data_train[['Survived']]","112cf974":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30 , random_state=1)","57ff012c":"regression_model = LinearRegression()\nregression_model.fit(X_train, y_train)","8ff6f18f":"for idx, col_name in enumerate(X_train.columns):\n    print(\"The coefficient for {} is {}\".format(col_name, regression_model.coef_[0][idx]))","28eecf7c":"intercept = regression_model.intercept_[0]\n\nprint(\"The intercept for our model is {}\".format(intercept))","eda020c2":"regression_model.score(X_train, y_train)","3425b822":"#using stats model for checking the parameters\ndata_train = pd.concat([X_train, y_train], axis=1)\ndata_test=pd.concat([X_train,y_train],axis=1)\ndata_train.head()","90690e3f":"data_test = pd.concat([X_test, y_test], axis=1)\ndata_test=pd.concat([X_test,y_test],axis=1)\ndata_test.head()","27317d76":"y_pred = lm1.predict(data_test)","f7d0bcd7":"data_train.columns","af74c99b":"expr= 'Survived ~ PassengerId + Pclass + Age+SibSp +Parch + Fare + male + Q + S'","10445578":"import statsmodels.formula.api as smf\nlm1 = smf.ols(formula= expr, data = data_train).fit()\nlm1.params","8c93b068":"print(lm1.summary())","cf31f01d":"from sklearn.preprocessing import StandardScaler","1edec5d6":"sc = StandardScaler()","da97ff2f":"x_train = sc.fit_transform(X_train)\nx_test=sc.fit_transform(X_test)","db146d1f":"x_train","96492c25":"from sklearn.neural_network import MLPClassifier\nclf = MLPClassifier(hidden_layer_sizes=200, max_iter=5000,\n                     solver='sgd', verbose=True,  random_state=21,tol=0.001)","0d7219bf":"clf.fit(x_train, y_train)","e9e981d6":"y_pred = clf.predict(x_train)","de90f864":"from sklearn.metrics import confusion_matrix,classification_report","dd6958aa":"confusion_matrix(y_train,y_pred)","96f733c4":"clf.score(x_train,y_train)","3f7f3296":"print(classification_report(y_train, y_pred))","c51d6bfe":"probs = clf.predict_proba(x_train)\nprobs = probs[:, 1]\nfrom sklearn.metrics import roc_auc_score\nauc = roc_auc_score(y_train, probs)\nprint('AUC: %.3f' % auc)\nfrom sklearn.metrics import roc_curve\nfpr, tpr, thresholds = roc_curve(y_train, probs)\nplt.plot([0, 1], [0, 1], linestyle='--')\nplt.plot(fpr, tpr, marker='.')\nplt.show()","ae5b1df6":"clf.fit(x_test, y_test)","2bc44896":"y_pred_test = clf.predict(x_test)","6017eefe":"print(classification_report(y_test, y_pred_test))","e1d78cf9":"probs = clf.predict_proba(x_test)\nprobs = probs[:, 1]\nfrom sklearn.metrics import roc_auc_score\nauc = roc_auc_score(y_test, probs)\nprint('AUC: %.3f' % auc)\nfrom sklearn.metrics import roc_curve\nfpr, tpr, thresholds = roc_curve(y_test, probs)\nplt.plot([0, 1], [0, 1], linestyle='--')\nplt.plot(fpr, tpr, marker='.')\nplt.show()","02f65d7b":"**Visulaizations for various columns**","76be5cc6":"Missing Value treatment is required for Age variable.","7965cb32":"**We can replace the age with the median values**","f79d5ec1":"The Columns Age and Embarked need the Missing value treatment.","21464ef6":"We would be required to change the data type of Embarked ,Ticket, Sex and Age.","0abe0473":"It visible there are clusters in Pclass we can do clustering for this .","33190c66":"The objective of this code is to get started with the following:\n1)EDA\n2)Data cleaning\n3)Missing field imputation\n4)Trying ANN and Linear regression","156eefb6":"Scaling the training and testing set.\n","61472336":"**Getting dummy values for Embark,Sex and dropping Name**","a5cf6d67":"#since the linear regression model is not that accurate trying ANN once .\n","a202b02b":"Calculating the AUC score ,plotting the ROC curve for the training and then test data."}}