{"cell_type":{"990dbf2e":"code","91061836":"code","67c70726":"code","318e505d":"code","4da26f6f":"code","5af0d830":"code","82a51b23":"code","0c4f31d0":"code","b3071cac":"code","aed1e18e":"code","52962847":"code","7467064d":"code","a01b2ee6":"code","190dc006":"code","5a5303a9":"code","fdfe7aa5":"code","3a890b15":"code","41b2814b":"code","736c8377":"code","6fb39742":"code","8cc58edb":"code","3910efbe":"code","4044d1d3":"code","d75b7123":"code","34046c52":"code","9f47bda9":"code","3923cbdc":"code","3a50ade3":"code","3349c996":"code","154b5ddf":"code","ca0cd93a":"code","c622cf34":"code","06e2fe40":"code","dd4f86e1":"markdown","c21d2413":"markdown","9c62ec99":"markdown","1ed7060a":"markdown","fd16eb8b":"markdown","2b7897bb":"markdown","ea746fd9":"markdown","72b76cca":"markdown","23a183c9":"markdown","c6cf6d1e":"markdown","27ee55ba":"markdown","3ed77624":"markdown","86c97c10":"markdown","31b055ed":"markdown","57aa52e7":"markdown","6daac00b":"markdown","e4588704":"markdown","73afe10b":"markdown"},"source":{"990dbf2e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","91061836":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nimport plotly\nimport plotly.express as px\nimport plotly.graph_objects as go","67c70726":"df=pd.read_csv(\"..\/input\/students-performance-in-exams\/StudentsPerformance.csv\")","318e505d":"df.head()","4da26f6f":"df.columns","5af0d830":"df.describe()","82a51b23":"df.info()","0c4f31d0":"df.isnull().sum()","b3071cac":"df[\"gender\"].unique().tolist()","aed1e18e":"df[\"parental level of education\"].unique().tolist()","52962847":"df[\"test preparation course\"].unique().tolist()","7467064d":"overall_percent=((df[\"math score\"]+df[\"writing score\"]+df[\"reading score\"])\/300)*100\ndf[\"Overall percentage\"]=round(overall_percent,2)\ndf[\"Overall percentage\"]","a01b2ee6":"df.head()","190dc006":"def mathprfm(score):\n    if score <= 33 :\n        return \"Poor\"\n    elif score < 75 and score > 33:\n        return \"Average\"\n    elif score >= 75:\n        return \"Excellent\"\ndf[\"Math Performance\"]=df[\"math score\"].apply(mathprfm)    ","5a5303a9":"def readingprfm(score):\n    if score <= 33 :\n        return \"Poor\"\n    elif score < 75 and score > 33:\n        return \"Average\"\n    elif score >= 75:\n        return \"Excellent\"\ndf[\"Reading Performance\"]=df[\"reading score\"].apply(readingprfm)    ","fdfe7aa5":"def writingprfm(score):\n    if score <= 33 :\n        return \"Poor\"\n    elif score < 75 and score > 33:\n        return \"Average\"\n    elif score >= 75:\n        return \"Excellent\"\ndf[\"Writing Performance\"]=df[\"writing score\"].apply(writingprfm)    ","3a890b15":"df.head()","41b2814b":"def mathstatus(prfm):\n    if prfm==\"Average\" or prfm==\"Excellent\":\n        return 1\n    elif prfm==\"Poor\":\n        return 0  \ndf[\"Math status\"]=df[\"Math Performance\"].apply(mathstatus)\ndf[\"Math status\"].value_counts()","736c8377":"def readingstatus(prfm):\n    if prfm==\"Average\" or prfm==\"Excellent\":\n        return 1\n    elif prfm==\"Poor\":\n        return 0   \ndf[\"Reading status\"]=df[\"Reading Performance\"].apply(readingstatus)\ndf[\"Reading status\"].value_counts()","6fb39742":"def writingstatus(prfm):\n    if prfm==\"Average\" or prfm==\"Excellent\":\n        return 1\n    elif prfm==\"Poor\":\n        return 0   \ndf[\"Writing status\"]=df[\"Reading Performance\"].apply(readingstatus)\ndf[\"Writing status\"].value_counts()","8cc58edb":"sb.heatmap(df.corr(), annot = True, vmin=-1, vmax=1, center= 0,\n            cmap= 'Blues_r', linewidths=3, linecolor='black')","3910efbe":"df.head()","4044d1d3":"df[\"math score\"].hist()","d75b7123":"df[\"writing score\"].hist()","34046c52":"df[\"reading score\"].hist()","9f47bda9":"values=df[\"gender\"].value_counts().tolist()\nlabels=df[\"gender\"].value_counts().index\nfig=px.pie(df,values=values,names=labels)\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","3923cbdc":"values=df[\"race\/ethnicity\"].value_counts().tolist()\nlabels=df[\"race\/ethnicity\"].value_counts().index\nfig=px.pie(df,values=values,names=labels)\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","3a50ade3":"countplt, ax = plt.subplots(figsize = (10,5))\nax=sb.countplot(x=\"parental level of education\",data=df,palette=\"Reds\")","3349c996":"table = pd.pivot_table(df,\n                       index=['gender'],\n                       columns = ['parental level of education'],\n                       aggfunc={'Overall percentage':np.sum}\n                      )\ntable.plot(kind='bar',figsize = (20,15))","154b5ddf":"table = pd.pivot_table(df,\n                       index=['gender'],\n                       columns = ['test preparation course'],\n                       aggfunc={'Overall percentage':np.sum}\n                      )\ntable.plot(kind='bar',figsize = (5,5))","ca0cd93a":"table = pd.pivot_table(df,\n                       index=['Math Performance'],\n                       columns = ['gender'],\n                       aggfunc={'math score':np.sum}\n                      )\ntable.plot(kind='bar',figsize = (5,5))","c622cf34":"sb.barplot(x=\"Reading Performance\", y=\"Overall percentage\", hue=\"gender\", data=df)\n","06e2fe40":"sb.violinplot(x=\"Writing Performance\", y=\"Overall percentage\", hue=\"gender\",data=df);","dd4f86e1":"##  Visulaisation under Race\/Ethnicity wise","c21d2413":"From this we come to know that Females whose parenatl level of eduaction is 'some college' got more percentage than who belongs to 'masters degree'. Similarly in Males whose parental level of education is 'associates degree' got more percentage that who belongs to 'masters degree'.","9c62ec99":"# DATA EXTRACTION","1ed7060a":"## Subject wise performance according to gender ","fd16eb8b":"Most of the students got 65-75 marks in Reading.","2b7897bb":"### Making another 3 columns for subject wise performance  ","ea746fd9":"Most of the students got 60-70 marks in Maths.","72b76cca":"# DATA VISULAISATION","23a183c9":"## Visualisation under Parental Level of Education wise","c6cf6d1e":"Most of the students got 65-80 marks in Writing.","27ee55ba":"# LOADING THE LIBRARY","3ed77624":"# ANALYSING THE DATA","86c97c10":"# DATA CLEANING","31b055ed":"### Making another column to calculate the overall percentage","57aa52e7":"From this we come to know that in Femlales whose test preperation course was 'none' got more percentage. Also in Males whose test preparation course was 'completed' got more percentage.","6daac00b":"### To analysis how many students pass or fail in each subject ","e4588704":"# STUDY THE DATA","73afe10b":"## Visulaisation under Gender wise "}}