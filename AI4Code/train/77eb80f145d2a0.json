{"cell_type":{"355eb81d":"code","01aed720":"code","15f205b3":"code","6c3a1a1f":"code","212c8e51":"code","d7888dc7":"code","9d00ba47":"code","e38c8112":"code","ba046a2e":"code","dc4423de":"code","02457093":"code","d7daa0de":"code","f05d6a4a":"code","2145923a":"code","45a363a9":"code","73bfcec8":"code","b7bede6a":"code","5b23709b":"markdown"},"source":{"355eb81d":"#Import necessary libraries\/functions\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestRegressor \nfrom sklearn.metrics import mean_absolute_error","01aed720":"#Load the data\n\n#read train.csv and store it in 'X'\nX=pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv',index_col='Id')\n#read test.csv and store it in 'X_test'\nX_test=pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv',index_col='Id')","15f205b3":"#Examine the data\n\nprint(X.shape)\nprint(X.columns)\nprint(X.head(n=5))","6c3a1a1f":"#Seperate the target variable \n\n#drop rows with missing target values from 'X'\nX.dropna(axis=0,subset=['SalePrice'],inplace=True)\n\n#Store target in 'y' and drop the target column from 'X'\ny=X.SalePrice\nX.drop(['SalePrice'],axis=1,inplace=True)\nprint(y)","212c8e51":"#Extract numerical and categorical columns\n\n#print categorical column labels with cardinality\nfor i in X.columns:\n    if X[i].dtype==\"object\":\n        print(i,X[i].nunique(),sep=' ')","d7888dc7":"#Extract numerical and categorical columns\n\n#Divide columns in 3 parts: categorical_columns, numerical_columns and columns_to_drop\ncategorical_columns=[]\nnumerical_columns=[]\ncolumns_to_drop=[]\n\nfor i in X.columns:\n    if X[i].nunique()<15 and X[i].dtype==\"object\":\n        categorical_columns.append(i)\n    elif X[i].nunique()>=15 and X[i].dtype==\"object\":\n        columns_to_drop.append(i)\n    elif X[i].dtype in [\"int64\",\"float64\"]:\n        numerical_columns.append(i)\n        \nprint(categorical_columns)\nprint(columns_to_drop)\nprint(numerical_columns)","9d00ba47":"#Extract numerical and categorical columns \n\n#drop 'columns_to_drop' from 'X' and 'X_test'\nX=X.drop(columns_to_drop,axis=1)\nX_test=X_test.drop(columns_to_drop,axis=1)","e38c8112":"#Impute missing data \n\n#optional\n#print column labels with number of missing cells in that corresponding column\n\n#for X dataset\nmissing_columns=X.isnull().sum()\nprint(\"X dataset\")\nprint(missing_columns[missing_columns>0])\n\nprint()\n\n#for X_test\nmissing_columns_test=X_test.isnull().sum()\nprint(\"For X_test set\")\nprint(missing_columns_test[missing_columns_test>0])","ba046a2e":"#Impute missing data\n\n#impute numerical_columns\nnumerical_imputer=SimpleImputer()\n\n#for X\nfor i in numerical_columns:\n    current_column=np.array(X[i]).reshape(-1,1)\n    updated_column=numerical_imputer.fit_transform(current_column)\n    X[i]=updated_column\n\n#for X_test\nfor i in numerical_columns:\n    current_column=np.array(X_test[i]).reshape(-1,1)\n    updated_column=numerical_imputer.fit_transform(current_column)\n    X_test[i]=updated_column","dc4423de":"#Impute missing data\n\n#impute categorical_columns\ncategorical_imputer=SimpleImputer(strategy=\"most_frequent\")\n\n#for X\nfor i in categorical_columns:\n    current_column=np.array(X[i]).reshape(-1,1)\n    updated_column=categorical_imputer.fit_transform(current_column)\n    X[i]=updated_column\n\n#for X_test\nfor i in categorical_columns:\n    current_column=np.array(X_test[i]).reshape(-1,1)\n    updated_column=categorical_imputer.fit_transform(current_column)\n    X_test[i]=updated_column","02457093":"#Impute missing data \n\n#optional\n#print column labels with number of missing cells in that corresponding column\n\n#for X dataset\nmissing_columns=X.isnull().sum()\nprint(\"X dataset\")\nprint(missing_columns[missing_columns>0])\n\nprint()\n\n#for X_test\nmissing_columns_test=X_test.isnull().sum()\nprint(\"For X_test set\")\nprint(missing_columns_test[missing_columns_test>0])\n\n#after imputation, there would be no columns with missing data","d7daa0de":"#Encode categorical columns \n\n#STEPS:\n#get one-hot encoded columns for X and X_test (using fit_transform\/transform)\n#give names to one-hot encoded columns (using get_feature_names)\n#drop categorical columns from X and X_test (using drop)\n#oh encoding removes index, add back index (using .index)\n#add one-hot encoded columns to X and X_test (using pd.concat)\n\nohencoder=OneHotEncoder(handle_unknown='ignore',sparse=False)\n\n#for X\nohe_X=pd.DataFrame(ohencoder.fit_transform(X[categorical_columns]))\nohe_X.columns=ohencoder.get_feature_names(categorical_columns)\nX.drop(categorical_columns,axis=1,inplace=True)\nohe_X.index=X.index\nX=pd.concat([X,ohe_X],axis=1)\n\n#for X_test\nohe_X_test=pd.DataFrame(ohencoder.transform(X_test[categorical_columns]))\nohe_X_test.columns=ohencoder.get_feature_names(categorical_columns)\nX_test.drop(categorical_columns,axis=1,inplace=True)\nohe_X_test.index=X_test.index\nX_test=pd.concat([X_test,ohe_X_test],axis=1)","f05d6a4a":"#Split Dataset in train and validation set\n\nX_train,X_valid,y_train,y_valid=train_test_split(X,y,train_size=0.8,test_size=0.2)","2145923a":"#Define the model\n\nmodel=RandomForestRegressor()","45a363a9":"#Fit the model\n\nmodel.fit(X_train,y_train)","73bfcec8":"#Predict and Evaluate on validation set\n\npreds_valid=model.predict(X_valid)\nscore_valid=mean_absolute_error(y_valid,preds_valid)\nprint(\"MAE: \",score_valid)","b7bede6a":"#Generate Test Prediction\n\npreds_test=model.predict(X_test)\nsubmission=pd.DataFrame({'Id':X_test.index,'SalePrice':preds_test})\nsubmission.to_csv('submission.csv',index=False)","5b23709b":"For explanation of each step, please refer to my [Medium Article](https:\/\/nisargkapkar.medium.com\/training-your-first-machine-learning-model-with-sklearn-e03d5de3bfba?source=friends_link&sk=61de09376ddecc6ea8014805738f2ec9)!\n\nUse this Notebook in association with the above Article! "}}