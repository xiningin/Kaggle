{"cell_type":{"447861b4":"code","2dc476eb":"code","0c469f17":"code","ed3054af":"code","fe03ee4f":"code","345e7203":"code","655cfea3":"code","cb7a3914":"code","e503bd76":"code","7b810ae1":"code","4967d36d":"code","6543a167":"code","9a838af2":"code","27a32cb0":"code","2b65f47d":"code","1dd08522":"code","a03ecfbc":"code","71b52698":"code","a73027fc":"markdown","c096ce8a":"markdown"},"source":{"447861b4":"import warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.datasets import load_boston\nfrom sklearn import preprocessing\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom prettytable import PrettyTable\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn import preprocessing\nfrom sklearn.metrics import mean_squared_error\nfrom numpy import random\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_boston\nimport os\nfrom matplotlib import cm\nfrom matplotlib.ticker import LinearLocator, FormatStrFormatter\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.utils import resample\nfrom sklearn.metrics import r2_score\nimport timeit\nprint(\"DONE\")","2dc476eb":"!pip install neurokit2","0c469f17":"import neurokit2 as nk\nfrom scipy.io import loadmat\nimport wfdb\n\n# This function loads ECG recordings and meta data given a specific recording number\ndef load_challenge_data(filename):\n    x = loadmat(filename)\n    data = np.asarray(x['val'], dtype=np.float64)\n    new_file = filename.replace('.mat','.hea')\n    input_header_file = os.path.join(new_file)\n    with open(input_header_file,'r') as f:\n        header_data=f.readlines()\n    return data, header_data","ed3054af":"# This piece of code searches through all data, in 1 out of the 2 ECG databases, after patients with LVH diagnose. \n#Then the second heartbeat in every record is added to a new list and interpolated to a 12 x 500 matrix \n\nfrom scipy import interpolate\nlvh_data = []\nstarttime = timeit.default_timer()\nprint(\"The start time is :\",starttime)\nfor i in sorted(os.listdir(\"\/kaggle\/input\/china-12lead-ecg-challenge-database\/Training_2\/\")):\n    if i.endswith(\".mat\"):\n        data, header_data = load_challenge_data(\"\/kaggle\/input\/china-12lead-ecg-challenge-database\/Training_2\/\"+i)\n        diagnose = header_data[15][5:-1]\n        diagnose = diagnose.split(\",\")\n        diagnose = np.asarray(diagnose)\n        if pd.Series('164873001').isin(diagnose).any():\n            _, rpeaks = nk.ecg_peaks(data[1], sampling_rate=int(header_data[0].split(\" \")[2]))\n            split_num = int(((np.diff(rpeaks['ECG_R_Peaks'])[0]+np.diff(rpeaks['ECG_R_Peaks'])[1])\/2)\/2)\n            data = data\/int(header_data[1].split(\" \")[2].split(\"\/\")[0])\n            ecg3d_lvh=[]\n            for i in range(data.shape[0]):\n                ecg3d_lvh.append(data[i][rpeaks['ECG_R_Peaks'][1]-split_num:rpeaks['ECG_R_Peaks'][1]+split_num])\n            ecg3d_lvh = np.asarray(ecg3d_lvh)\n            x=np.arange(ecg3d_lvh.shape[1])\n            y=np.arange(ecg3d_lvh.shape[0])\n            #x,y = np.meshgrid(x, y)\n            f = interpolate.interp2d(x, y, ecg3d_lvh, kind='cubic')\n            xnew = np.linspace(0,len(x),500)\n            ynew = np.arange(len(y))\n            #xnew,ynew = np.meshgrid(xnew, ynew)\n            znew = f(xnew, ynew)\n            lvh_data.append(znew)\n            print(\"Time after adding first patient data is :\", timeit.default_timer() - starttime)\n            print(len(lvh_data))\n        else:\n            pass\nlvh_data = np.asarray(lvh_data)","fe03ee4f":"# This piece of code searches through all data, in 1 out of the 2 ECG databases, after patients with normal sinus rythm. \n#Then the second heartbeat in every record is added to a new list and interpolated to a 12 x 500 matrix \n\nnorm_data = []\nstarttime = timeit.default_timer()\nfor i in sorted(os.listdir(\"\/kaggle\/input\/china-physiological-signal-challenge-in-2018\/Training_WFDB\/\")):\n    if i.endswith(\".mat\"):\n        data, header_data = load_challenge_data(\"\/kaggle\/input\/china-physiological-signal-challenge-in-2018\/Training_WFDB\/\"+i)\n        diagnose = header_data[15][5:-1]\n        diagnose = diagnose.split(\",\")\n        diagnose = np.asarray(diagnose)\n        if pd.Series('426783006').isin(diagnose).any():\n            _, rpeaks = nk.ecg_peaks(data[1], sampling_rate=int(header_data[0].split(\" \")[2]))\n            split_num = int(((np.diff(rpeaks['ECG_R_Peaks'])[0]+np.diff(rpeaks['ECG_R_Peaks'])[1])\/2)\/2)\n            data = data\/int(header_data[1].split(\" \")[2].split(\"\/\")[0])\n            ecg3d_norm=[]\n            for i in range(data.shape[0]):\n                ecg3d_norm.append(data[i][rpeaks['ECG_R_Peaks'][1]-split_num:rpeaks['ECG_R_Peaks'][1]+split_num])\n            ecg3d_norm = np.asarray(ecg3d_norm)\n            x=np.arange(ecg3d_norm.shape[1])\n            y=np.arange(ecg3d_norm.shape[0])\n            #x,y = np.meshgrid(x, y)\n            f = interpolate.interp2d(x, y, ecg3d_norm, kind='cubic')\n            xnew = np.linspace(0,len(x),500)\n            ynew = np.arange(len(y))\n            #xnew,ynew = np.meshgrid(xnew, ynew)\n            znew = f(xnew, ynew)\n            norm_data.append(znew)\n            print(\"Time after adding first patient data is :\", timeit.default_timer() - starttime)\n            print(len(norm_data))\n        else:\n            pass\nnorm_data = np.asarray(norm_data)","345e7203":"z = np.mean(norm_data[:100],axis=0)\nx = np.arange(500)\ny = np.arange(12)\nx,y=np.meshgrid(x,y)","655cfea3":"fig = plt.figure(figsize=(32,12))\nax = fig.gca(projection ='3d')\nsurf = ax.plot_surface(x,y,z,cmap=cm.bone, linewidth = 0, antialiased=False)\nax.zaxis.set_major_locator(LinearLocator(10))\nax.view_init(20, 75)\nax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))\nfig.colorbar(surf,shrink=0.5, aspect=5)\nfig.show()","cb7a3914":"def make_design_matrix(x,y,n):\n    x = x.ravel()\n    y = y.ravel()\n    if len(x) != len(y):\n        print(\"x and y needs to have the same length!\")\n        \n    X = np.ones(len(x)).reshape(len(x),1)\n    for i in range(n):\n        if i == 0:\n            X_temp = np.hstack(((x**(i+1)).reshape(len(x),1) , (y**(i+1)).reshape(len(y),1)))\n            X = np.concatenate((X,X_temp),axis=1)\n        else:\n            X_temp = np.hstack(((x**(i+1)).reshape(len(x),1) , (y**(i+1)).reshape(len(y),1),((x**i) * (y**i)).reshape(len(y),1) ))\n            X = np.concatenate((X,X_temp),axis=1)\n\n    return X","e503bd76":"def predict(x,y,n,beta):\n    pred = beta[0]\n    for i in range(n):\n        if i == 0:\n            pred = pred + beta[1] * x + beta[2] * y\n        else:\n            pred = pred + beta[i*3] *(x**(i+1)) + beta[(i*3)+1]*(y**(i+1)) + beta[(i*3)+2]*((x**i) * (y**i))\n    return pred","7b810ae1":"# This function calculates beta for OLS\ndef calc_beta(X,y):\n    beta=np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)\n    return beta","4967d36d":"\nz = np.mean(norm_data[:100],axis=0)\nx = np.arange(500)\ny = np.arange(12)\nx,y=np.meshgrid(x,y)\n\n\npolynomial = 50\n\nx_and_y=np.hstack((x.ravel().reshape(x.ravel().shape[0],1),y.ravel().reshape(y.ravel().shape[0],1)))\nscaler = StandardScaler()\nscaler.fit(x_and_y)\nx_and_y_scaled = scaler.transform(x_and_y)\n\n\n\n\nfor poly in range(polynomial):\n\n\n\n    X_train = make_design_matrix(x_and_y_scaled.T[0],x_and_y_scaled.T[1],poly+1)\n    beta = calc_beta(X_train, z.ravel())\n    pred=predict(x_and_y_scaled.T[0],x_and_y_scaled.T[1],poly+1,beta)\n\n\n\n\n    \n    print('Polynomial degree:', poly+1)\n    print('Error:', mean_squared_error(z.ravel(),pred))\n    print(\"R2-scores:\",r2_score(z.ravel(),pred))\n        \n    #X_plot_scaled = scaler.transform(X)    \n    z_pred_for_plot = predict(x_and_y_scaled.T[0],x_and_y_scaled.T[1],poly+1,beta)\n    fig = plt.figure(figsize=(32,12))\n    ax = fig.gca(projection ='3d')\n    surf = ax.plot_surface(x,y,z_pred_for_plot.reshape(x.shape[0],x.shape[1]),cmap=cm.bone, linewidth = 0, antialiased=False)\n    ax.zaxis.set_major_locator(LinearLocator(10))\n    ax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))\n    fig.colorbar(surf,shrink=0.5, aspect=5)\n    ax.view_init(20, 75)\n    fig.suptitle(\"A {} degree polynomial fit of Franke function using OLS and K-fold crossval\".format(poly+1) ,fontsize=\"40\", color = \"black\")\n    fig.show()","6543a167":"X_train = make_design_matrix(x_and_y_scaled.T[0],x_and_y_scaled.T[1],21)\nbeta = calc_beta(X_train, z.ravel())\nz_pred_for_plot = predict(x_and_y_scaled.T[0],x_and_y_scaled.T[1],21,beta)\nfig = plt.figure(figsize=(32,12))\nax = fig.gca(projection ='3d')\nsurf = ax.plot_surface(x,y,z_pred_for_plot.reshape(x.shape[0],x.shape[1]),cmap=cm.bone, linewidth = 0, antialiased=False)\nax.zaxis.set_major_locator(LinearLocator(10))\nax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))\nfig.colorbar(surf,shrink=0.5, aspect=5)\nax.view_init(20, 75)\nfig.suptitle(\"A {} degree polynomial fit of Franke function using OLS and K-fold crossval\".format(21) ,fontsize=\"40\", color = \"black\")\nfig.show()","9a838af2":"for i in range(10):\n    print(1\/(10**(i+1) ))","27a32cb0":"1\/(10*2)","2b65f47d":"def learning_schedule(start_lr,t):\n    lr = start_lr\/(10**(t+1))\n    return lr","1dd08522":"z = np.mean(norm_data[:100],axis=0)\nx = np.arange(500)\ny = np.arange(12)\nx,y=np.meshgrid(x,y)\nx_and_y=np.hstack((x.ravel().reshape(x.ravel().shape[0],1),y.ravel().reshape(y.ravel().shape[0],1)))\n\niterations =int(6000\/100)\npolynoials=13\nnumber_of_epochs = int(100\/10)\n\nbest_mse = 0\nprev_mse = 1\nbest_epoch = 0\nbest_poly = 0\nbest_iter = 0\n\n\n\nscaler = StandardScaler()\nscaler.fit(x_and_y)\nx_and_y_scaled = scaler.transform(x_and_y)\n\nfor pol in range(polynoials):\n    for j in range(iterations):\n        for k in range(number_of_epochs):\n            n_iter = (j+1)*100\n            X=make_design_matrix(x_and_y_scaled.T[0],x_and_y_scaled.T[1],pol)\n            theta = np.random.randn(X.shape[1],1)\n            n_epochs = j *10\n            for epoch in range(n_epochs):\n                for i in range(n_iter):\n                    epoch = epoch\n                    random_index = np.random.randint(n_iter)\n                    xi = X[random_index:random_index+1]\n                    zi = z.ravel()[random_index:random_index+1]\n                    gradients = 2.0\/m * xi.T @ ((xi @ theta)-zi)\n                    eta = learning_schedule(1,i+n_iter*epoch)\n                    theta = theta - eta*gradients\n                    #print(\"learning rate:\",eta)\n                    \n            ypredict = X.dot(theta)\n\n            if (mean_squared_error(z.ravel(),ypredict) < prev_mse):\n                prev_mse = mean_squared_error(z.ravel(),ypredict)\n                best_mse = mean_squared_error(z.ravel(),ypredict)\n                best_poly = pol\n                best_iter = n_iter\n                best_epoch = epoch\n                print(\"MSE:\",mean_squared_error(z.ravel(),ypredict))\n                print(\"R2-score:\",r2_score(z.ravel(),ypredict))","a03ecfbc":"X=make_design_matrix(x,y,best_poly)\ntheta = np.random.randn(X.shape[1],1)\nfor epoch in range(best_epoch):\n    for i in range(best_iter):\n        random_index = np.random.randint(n_iter)\n        xi = X[random_index:random_index+1]\n        zi = z.ravel()[random_index:random_index+1]\n        gradients = 2.0 * xi.T @ ((xi @ theta)-zi)\n        eta = learning_schedule(1,i+best_iter*epoch)\n        theta = theta - eta*gradients\nprint(\"theta from own sdg\")\nprint(theta)\nypredict = X.dot(theta)","71b52698":"print(\"MSE:\",mean_squared_error(z.ravel(),ypredict))\nprint(\"R2-score:\",r2_score(z.ravel(),ypredict))\nfig = plt.figure(figsize=(32,12))\nax = fig.gca(projection ='3d')\nsurf = ax.plot_surface(x,y,ypredict.reshape(x.shape[0],y.shape[1]),cmap=cm.bone, linewidth = 0, antialiased=False)\nax.zaxis.set_major_locator(LinearLocator(10))\nax.view_init(20, 75)\nax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))\nfig.colorbar(surf,shrink=0.5, aspect=5)\nfig.show()","a73027fc":"# Using SGD","c096ce8a":"## Make OLS functions"}}