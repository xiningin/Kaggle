{"cell_type":{"e12874b5":"code","4ec68c45":"code","8fefde96":"code","98730959":"code","bc32253f":"code","4b1e89cc":"code","5d0c86be":"code","38a83a37":"code","0dd1dda1":"code","dfbdb677":"code","ee9ca7d9":"code","86a9999b":"code","535329e1":"code","5f9d02ea":"code","8991ad10":"code","d6089331":"code","4c9a1600":"code","5b2996cc":"code","df8cd81a":"code","3a1b85e6":"code","2b2db1ed":"code","933239a8":"code","ce626d29":"code","4102aa29":"code","8d137866":"code","2f984a4b":"code","9536d67a":"code","97595c92":"code","9e43e8c0":"code","85a4a616":"code","7f5ed48e":"code","52b16b14":"code","d1713566":"code","b1eb87d8":"code","518a2748":"markdown","cb35eec7":"markdown","548a480c":"markdown","b181157e":"markdown","856ca753":"markdown"},"source":{"e12874b5":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nfrom sklearn import preprocessing\nfrom sklearn import metrics\nfrom sklearn.preprocessing import MinMaxScaler\n\n%matplotlib inline\n\ntrain_df = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv')\n\ndisplay(train_df.info())\ndisplay(test_df.info())\n\ndisplay(train_df.head())\ndisplay(test_df.head())\n\ndisplay(train_df.isnull().sum())","4ec68c45":"train_df[~train_df['Province_State'].isnull()]['Country_Region'].value_counts()","8fefde96":"train_df[train_df['Province_State'].isnull()]['Country_Region'].value_counts()","98730959":"train_df['Date'].describe()","bc32253f":"test_df['Date'].min()","4b1e89cc":"test_df['Date'].describe()","5d0c86be":"show_cum = train_df.groupby(by='Country_Region')[['ConfirmedCases','Fatalities']].max().reset_index()\nplt.figure(figsize=(20,10))\n#sns.set()\nsns.barplot(x='ConfirmedCases',y='Country_Region',data=show_cum[show_cum['ConfirmedCases'] != 0].sort_values(by='ConfirmedCases',ascending=False).head(30))","38a83a37":"plt.figure(figsize=(20,10))\nsns.barplot(x='Fatalities',y='Country_Region',data=show_cum[show_cum['Fatalities'] != 0].sort_values(by='Fatalities',ascending=False).head(30))","0dd1dda1":"days_df = train_df['Date'].apply(lambda dt: datetime.datetime.strptime(dt, '%Y-%m-%d') - datetime.datetime.strptime('2020-01-21', '%Y-%m-%d')).apply(lambda x : str(x).split()[0]).astype(int)\n\ntrain_df['Days'] = days_df\ntrain_df.drop(['Date','Id'],axis=1,inplace=True)\n\ntrain_df.fillna('0',inplace=True)","dfbdb677":"days_df = test_df['Date'].apply(lambda dt: datetime.datetime.strptime(dt, '%Y-%m-%d') - datetime.datetime.strptime('2020-01-21', '%Y-%m-%d')).apply(lambda x : str(x).split()[0]).astype(int)\n\ntest_df['Days'] = days_df\nafter_use = test_df.copy()\ntest_df.drop(['Date','ForecastId'],axis=1,inplace=True)\n\ntest_df.fillna('10101',inplace=True)","ee9ca7d9":"# enc = preprocessing.OneHotEncoder()\n# enc.fit(train_df[['Province_State','Country_Region']])\n# enc_cntry_pvstate = enc.transform(train_df[['Province_State','Country_Region']]).toarray()\n# #display(enc_cntry_pvstate)","86a9999b":"# enc_test = preprocessing.OneHotEncoder()\n# enc_test.fit(test_df[['Province_State','Country_Region']])\n# enc_cntry_pvstate_test = enc_test.transform(test_df[['Province_State','Country_Region']]).toarray()\n# #display(enc_cntry_pvstate)","535329e1":"enc = preprocessing.OrdinalEncoder()\nenc.fit(train_df[['Province_State','Country_Region']])\nenc_cntry_pvstate = enc.transform(train_df[['Province_State','Country_Region']])#.toarray()\n#display(enc_cntry_pvstate)","5f9d02ea":"enc_test = preprocessing.OrdinalEncoder()\nenc_test.fit(test_df[['Province_State','Country_Region']])\nenc_cntry_pvstate_test = enc_test.transform(test_df[['Province_State','Country_Region']])#.toarray()\n#display(enc_cntry_pvstate)","8991ad10":"train_df.drop(['Province_State','Country_Region'],axis=1,inplace=True)\n\ntrain_df['Province_State'] = enc_cntry_pvstate[:,0]\ntrain_df['Country_Region'] = enc_cntry_pvstate[:,1]\n\ndisplay(train_df.tail())\ndisplay(train_df.describe())\n\ntrain_label_cc = train_df['ConfirmedCases'].to_numpy()\ntrain_label_fa = train_df['Fatalities'].to_numpy()\n\n#normed_train_data = preprocessing.normalize(ncc)\ntrain_data_cc = train_df[['Days','Province_State','Country_Region']]\ntrain_data_fa = train_df[['Days','Province_State','Country_Region','ConfirmedCases']]\n\nplt.figure(figsize=(12,8))\ndisplay(sns.distplot(train_label_cc,bins=100))\n\nscaler = MinMaxScaler()\ntrain_data_cc = scaler.fit_transform(train_data_cc)\n#X_test = scaler.transform(X_test)","d6089331":"test_df.drop(['Province_State','Country_Region'],axis=1,inplace=True)\n\ntest_df['Province_State'] = enc_cntry_pvstate_test[:,0]\ntest_df['Country_Region'] = enc_cntry_pvstate_test[:,1]\n\n#normed_train_data = preprocessing.normalize(ncc)\ntest_data_cc = test_df[['Days','Province_State','Country_Region']]\ntest_data_cc = scaler.transform(test_data_cc)","4c9a1600":"import tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nprint(tf.__version__)","5b2996cc":"# def build_model(cc_input_size):\n#   model = keras.Sequential([\n#     layers.Dense(128, activation='relu', input_shape=cc_input_size),\n#     layers.Dropout(0.2),\n#     layers.Dense(64, activation='relu'),\n#     layers.Dropout(0.2),\n#     layers.Dense(32, activation='relu'),\n#     layers.Dropout(0.2),\n#     layers.Dense(16, activation='relu'),\n#     layers.Dropout(0.2),\n#     layers.Dense(8, activation='relu'),\n#     layers.Dropout(0.2),\n#     layers.Dense(8, activation='relu'),\n#     layers.Dropout(0.2),\n#     layers.Dense(4, activation='relu'),\n#     layers.Dropout(0.2),\n#     layers.Dense(2, activation='relu'),\n#     layers.Dense(1)\n#   ])\n\n#   #optimizer = tf.keras.optimizers.RMSprop(0.001)\n#   optimizer = tf.keras.optimizers.Adam()\n\n#   model.compile(loss='mse',\n#                 optimizer=optimizer,\n#                 metrics=['mae', 'mse'])\n#   return model","df8cd81a":"# def add_layers(num_of_ly):\n#     for i in range():\n#         layers.Dense(64, activation='relu'),\n#     layers.Dropout(0.2),","3a1b85e6":"def build_model(cc_input_size):\n  model = keras.Sequential([\n    layers.Dense(512, activation='relu', input_shape=cc_input_size),\n    layers.Dropout(0.5),\n    layers.Dense(512, activation='relu'),\n    layers.Dropout(0.5),\n#     layers.Dense(512, activation='relu'),\n#     layers.Dropout(0.2),\n#     layers.Dense(512, activation='relu'),\n#     layers.Dropout(0.2),\n#     layers.Dense(512, activation='relu'),\n#     layers.Dropout(0.2),\n    layers.Dense(1)\n  ])\n\n  #optimizer = tf.keras.optimizers.RMSprop(0.001)\n  optimizer = tf.keras.optimizers.Adam()\n\n  model.compile(loss='mse',\n                optimizer=optimizer,\n                metrics=['mae', 'mse'])\n  return model","2b2db1ed":"cc_input_size = [3]\nmodel_cc = build_model(cc_input_size)\n\nEPOCHS = 250\n\ncallback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=3)\nhistory = model_cc.fit(\n  train_data_cc, train_label_cc,\n  epochs=EPOCHS, batch_size=16, callbacks=[callback],verbose=2)\n\nhist = pd.DataFrame(history.history)\nhist['epoch'] = history.epoch\ndisplay(hist.tail())","933239a8":"hist[['mae']].plot()\nplt.ylabel('Confirmaed Cases \/ Infected ')","ce626d29":"hist[['mse']].plot()\nplt.ylabel('Confirmaed Cases \/ Infected ')","4102aa29":"# Train Fatality Model\n\ncc_input_size = [4]\nmodel_fa = build_model(cc_input_size)\n\nEPOCHS = 250\n\ncallback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=3)\n\nhistory = model_fa.fit(\n  train_data_fa, train_label_fa,\n  epochs=EPOCHS, validation_split = 0.3, batch_size=16,callbacks=[callback],verbose=2)\n\nhist = pd.DataFrame(history.history)\nhist['epoch'] = history.epoch\ndisplay(hist.tail())","8d137866":"hist[['mae']].plot()\nplt.ylabel('Confirmaed Cases \/ Infected ')","2f984a4b":"hist[['mse']].plot()\nplt.ylabel('Confirmaed Cases \/ Infected ')","9536d67a":"# model.save('saved_model\/my_model')\n\n# new_model = tf.keras.models.load_model('saved_model\/my_model')\n\n# # Check its architecture\n# new_model.summary()","97595c92":"# test_predictions_cc = {}\n# i = 0\n\n# for ids in after_use['ForecastId'].to_list():\n#     tmp = pd.DataFrame(test_data_cc.iloc[i]).transpose()\n#     test_predictions_cc[ids] = model_cc.predict(tmp)\n#     i +=1","9e43e8c0":"test_predictions_cc = model_cc.predict(test_data_cc)","85a4a616":"#Fatality\ntest_data_fa = test_df[['Days','Province_State','Country_Region']]\n#,'ConfirmedCases'\ntest_data_fa['ConfirmedCases'] = test_predictions_cc\n\nnormed_test_data = test_data_fa\n\ntest_predictions = model_fa.predict(normed_test_data)","7f5ed48e":"submit_df = pd.DataFrame()\nsubmit_df['ForecastId'] = after_use['ForecastId']\nsubmit_df['ConfirmedCases'] = pd.DataFrame(test_predictions_cc)\nsubmit_df['ConfirmedCases'] = submit_df['ConfirmedCases'].astype(int)\nsubmit_df['Fatalities'] = pd.DataFrame(test_predictions)\nsubmit_df['Fatalities'] = submit_df['Fatalities'].astype(int)\n#submit_df.info()\nsubmit_df.to_csv('submission.csv',index=False)","52b16b14":"submit_df.head()","d1713566":"submit_df.describe().transpose()","b1eb87d8":"model_cc.save('saved_model\/model_cc')\nmodel_cc.save('saved_model\/model_fa')","518a2748":"# EDA","cb35eec7":"# Deep Learning - time series - ANN","548a480c":"## Following Country having Province State","b181157e":"# Prediction","856ca753":"# Pre-process Data for DNN"}}