{"cell_type":{"e639839c":"code","04a2ba31":"code","625d6239":"code","fb041fe6":"code","c2797d06":"code","e7fc14b0":"code","ed57351e":"code","86ac1218":"code","ccd52cd4":"code","639fac76":"code","33fc3e08":"code","952c81a9":"code","76a654b8":"code","35d6a09d":"code","18541ee3":"code","c9ad2eff":"code","4c531307":"code","1c123652":"code","b66af9d0":"code","189f96b7":"code","886a2e1b":"code","0c5a5f8b":"code","3f67cf8b":"code","dfb9b23e":"code","79cbac26":"code","d4434474":"code","34ff8e82":"code","9a39cc11":"code","75a15061":"code","0fbd5ca5":"code","47951eab":"code","372cdac6":"code","ef2e7440":"code","f57087b1":"code","f5da72ea":"code","3c7afbfc":"code","079c4430":"code","95940024":"code","9832ac5c":"code","d1995365":"code","1dc5fb1c":"code","7e65bcbe":"code","1bdc82b3":"code","44141274":"code","ad102a1d":"code","ea3ca072":"code","b529cc56":"code","78978b59":"code","51c7f0f7":"code","828b3d5b":"code","0d82c912":"code","c8333727":"code","6142b77e":"code","cbcc1d7c":"code","430e78a8":"code","63e3d4b8":"code","5bacf68c":"code","16f88a68":"code","541a4ca0":"code","99cd5a76":"code","3bbbb5cd":"code","ac7f4bf9":"code","7b3dc89c":"code","e90ac00b":"code","fd1e8ee6":"code","158c5280":"code","c3ce4484":"code","8d506814":"code","8c88bdee":"code","f675bea0":"code","a5f299a7":"code","e34ee346":"code","07cc0ed5":"code","9880338c":"code","8610407b":"code","52d88a16":"code","75d4223b":"code","a88e3589":"code","7fc3efb5":"code","8e27bd0b":"code","61366f28":"code","0f19cf22":"code","fb513542":"code","a470ae22":"code","421a039d":"code","01239355":"code","c5c22e0e":"code","bbe1f71b":"code","b13cd601":"code","8dbac215":"code","6b174371":"code","24f9e755":"code","f0d37036":"markdown","dd76c00f":"markdown","c809b9c0":"markdown","92969356":"markdown","a69f30bd":"markdown","22294a17":"markdown","60779970":"markdown","e7014d95":"markdown","c1ef4abb":"markdown","73c6562f":"markdown","a4174226":"markdown","fc0fea16":"markdown","535aba9d":"markdown","3ab1c40a":"markdown","f47dd05e":"markdown","a9793729":"markdown","155308a9":"markdown","b3d716f9":"markdown","d5455c7a":"markdown","62916567":"markdown","a76a9058":"markdown","0f4d5e8e":"markdown","cb006968":"markdown","4e870291":"markdown","1d5c2b13":"markdown","e1b824c7":"markdown","bb9eeff7":"markdown","acb4891e":"markdown","5ef95e5b":"markdown","e244078f":"markdown","ab5f56e3":"markdown","5c5e6935":"markdown","21120d66":"markdown","a396052e":"markdown","fdb4bf42":"markdown","5236ad67":"markdown","41ebe85e":"markdown","f0a99dd2":"markdown","547cce4d":"markdown","cad4e23e":"markdown"},"source":{"e639839c":"import pandas as pd\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nimport statistics \nimport random\nimport numpy as np\nimport operator\nimport matplotlib\nmatplotlib.use(\"Agg\")\nfrom matplotlib.animation import FFMpegWriter\nfrom IPython.display import Video, Image","04a2ba31":"week1=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/week1.csv\")\nweek2=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/week2.csv\")\nweek3=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/week3.csv\")\nweek4=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/week4.csv\")\nweek5=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/week5.csv\")\nweek6=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/week6.csv\")\nweek7=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/week7.csv\")\nweek8=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/week8.csv\")\nweek9=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/week9.csv\")\nweek10=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/week10.csv\")\nweek11=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/week11.csv\")\nweek12=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/week12.csv\")\nweek13=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/week13.csv\")\nweek14=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/week14.csv\")\nweek15=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/week15.csv\")\nweek16=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/week16.csv\")\nweek17=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/week17.csv\")","625d6239":"games=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/games.csv\")\ngames.head(100)","fb041fe6":"players=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/players.csv\")\nplayers.head(100)","c2797d06":"players.head()","e7fc14b0":"plays=pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/plays.csv') \nplays.head()","ed57351e":"import io\nimport re\nimport os\n#from os import startfile\nimport os.path as path\nimport requests\nfrom glob import glob # for combining several CSV files\nimport altair as alt\nfrom math import radians","86ac1218":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport datetime\nimport re\nimport plotly.express as px\nimport seaborn as sns","ccd52cd4":"# Importing the required libraries.\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom numpy import loadtxt\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objects as go\nimport plotly.express as px","639fac76":"import pandas as pd\nimport numpy as np\nimport pandas_profiling as pdp\nfrom pandas_profiling import ProfileReport\n\n# Visualisation profiling\n\nfrom PIL import Image\nimport scipy.misc\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib.patches as patches\nfrom matplotlib import animation,rc\nfrom matplotlib import animation\nfrom matplotlib.animation import FFMpegWriter\nimport matplotlib.animation as animation\nimport seaborn as sns\nimport dateutil\nimport plotly.tools as tls\nimport plotly.graph_objs as go","33fc3e08":"playernull=players.isnull().sum()\nplayernull","952c81a9":"gamesnull=games.isnull().sum()\ngamesnull","76a654b8":"playnull=plays.isnull().sum()\nplaynull","35d6a09d":"allweek = [week1, week2,week3,week4,week5,week6, week7,week8,week9,week10,week11, week12,week13,week14,week15,week16,week17]\nweek=pd.concat(allweek)","18541ee3":"weeknull=week1.isnull().sum()\nweeknull","c9ad2eff":"week[\"position\"].fillna(\"null\", inplace = True) \nweek[\"nflId\"].fillna(\"null\", inplace = True) \nweek[\"o\"].fillna(\"0\", inplace = True) \nweek[\"a\"].fillna(\"0\", inplace = True) \nweek[\"dir\"].fillna(\"0\", inplace = True) \nweek[\"jerseyNumber\"].fillna(\"0\", inplace = True)\nweek[\"s\"].fillna(\"0\", inplace = True) \nweek[\"dis\"].fillna(\"0\", inplace = True) ","4c531307":"weekroute = week.groupby('route').size().reset_index(name='count_of_each_route')\nweekroute","1c123652":"week['route'] = week['route'].replace(np.nan,\"GO\")\nweek","b66af9d0":"week.groupby(week['displayName']).mean()","189f96b7":"weeknull=week.isnull().sum()\nweeknull","886a2e1b":"week.drop(['frameId','jerseyNumber'],axis=1,inplace=True)\nweek.head()","0c5a5f8b":"plays.drop(['playDescription','gameClock'] ,axis = 1, inplace = True) ","3f67cf8b":"fill_backward =plays.personnelD.fillna(method='ffill') \nbackward_index = plays.index[(plays.personnelD!= fill_backward)]\nbackward_rows = sorted(list({ind for b in backward_index for ind in [b-1,b]}))\nplays.personnelD.iloc[backward_rows] = plays.personnelD.iloc[backward_rows].fillna(method='ffill')","dfb9b23e":"fill_backward =plays.defendersInTheBox  .fillna(method='ffill') \nbackward_index = plays.index[(plays.defendersInTheBox  != fill_backward)]\nbackward_rows = sorted(list({ind for b in backward_index for ind in [b-1,b]}))\nplays.defendersInTheBox  .iloc[backward_rows] = plays.defendersInTheBox  .iloc[backward_rows].fillna(method='ffill')","79cbac26":"fill_backward =plays.numberOfPassRushers.fillna(method='ffill') \nbackward_index = plays.index[(plays.numberOfPassRushers!= fill_backward)]\nbackward_rows = sorted(list({ind for b in backward_index for ind in [b-1,b]}))\nplays.numberOfPassRushers.iloc[backward_rows] = plays.numberOfPassRushers.iloc[backward_rows].fillna(method='ffill')","d4434474":"fill_backward =plays.preSnapVisitorScore.fillna(method='ffill') \nbackward_index = plays.index[(plays.preSnapVisitorScore!= fill_backward)]\nbackward_rows = sorted(list({ind for b in backward_index for ind in [b-1,b]}))\nplays.preSnapVisitorScore.iloc[backward_rows] = plays.preSnapVisitorScore.iloc[backward_rows].fillna(method='ffill')","34ff8e82":"fill_backward =plays.passResult.fillna(method='ffill') \nbackward_index = plays.index[(plays.passResult!= fill_backward)]\nbackward_rows = sorted(list({ind for b in backward_index for ind in [b-1,b]}))\nplays.passResult.iloc[backward_rows] = plays.passResult.iloc[backward_rows].fillna(method='ffill')","9a39cc11":"fill_backward =plays.absoluteYardlineNumber.fillna(method='ffill') \nbackward_index = plays.index[(plays.absoluteYardlineNumber!= fill_backward)]\nbackward_rows = sorted(list({ind for b in backward_index for ind in [b-1,b]}))\nplays.absoluteYardlineNumber.iloc[backward_rows] = plays.absoluteYardlineNumber.iloc[backward_rows].fillna(method='ffill')","75a15061":"fill_backward =plays.preSnapHomeScore.fillna(method='ffill') \nbackward_index = plays.index[(plays.preSnapHomeScore!= fill_backward)]\nbackward_rows = sorted(list({ind for b in backward_index for ind in [b-1,b]}))\nplays.preSnapHomeScore.iloc[backward_rows] = plays.preSnapHomeScore.iloc[backward_rows].fillna(method='ffill')","0fbd5ca5":"fill_backward =plays.personnelO.fillna(method='ffill') \nbackward_index = plays.index[(plays.personnelO!= fill_backward)]\nbackward_rows = sorted(list({ind for b in backward_index for ind in [b-1,b]}))\nplays.personnelO.iloc[backward_rows] = plays.personnelO.iloc[backward_rows].fillna(method='ffill')","47951eab":"fill_backward =plays.offenseFormation.fillna(method='ffill') \nbackward_index = plays.index[(plays.offenseFormation != fill_backward)]\nbackward_rows = sorted(list({ind for b in backward_index for ind in [b-1,b]}))\nplays.offenseFormation.iloc[backward_rows] = plays.offenseFormation.iloc[backward_rows].fillna(method='ffill')","372cdac6":"fill_backward =plays.yardlineSide.fillna(method='ffill') \nbackward_index = plays.index[(plays.yardlineSide != fill_backward)]\nbackward_rows = sorted(list({ind for b in backward_index for ind in [b-1,b]}))\nplays.yardlineSide.iloc[backward_rows] = plays.yardlineSide.iloc[backward_rows].fillna(method='ffill')","ef2e7440":"fill_backward =plays.typeDropback.fillna(method='ffill') \nbackward_index = plays.index[(plays.typeDropback  != fill_backward)]\nbackward_rows = sorted(list({ind for b in backward_index for ind in [b-1,b]}))\nplays.typeDropback.iloc[backward_rows] = plays.typeDropback.iloc[backward_rows].fillna(method='ffill')","f57087b1":"playnull=plays.isnull().sum()\nplaynull","f5da72ea":"# Function to convert height of players from feet to inches.\n# Input parameter for the function is the value of height attribute from player dataframe.\ndef feettoinch(players):\n    if re.search('[0-9]-[0-9]',players):\n        num=players.split('-')\n        ans=(int(num[0])*12)+int(num[1])\n        return ans\n    else:\n        return players\n\n# Calling the function feettoinch.\nplayers[\"height\"]=players[\"height\"].apply(feettoinch)\n\n# Display the dataframe after changes.\nplayers.head(10)","3c7afbfc":"# Function to extract age from birthDate.\n# Input parameter for the function is the value of birthDate attribute from player dataframe.\ndef from_dob_to_age(born):\n    today = datetime.date.today()\n    return float(today.year - born.year - ((today.month, today.day) < (born.month, born.day)))\n\n# Calling the function from_dob_to_age.\nplayers['birthDate'] = pd.to_datetime(players.birthDate) # Converting string type of birthDate into type date.\nplayers['age']=players['birthDate'].apply(from_dob_to_age)\n\n# Age column is added to the player dataframe\nplayers.head()","079c4430":"# Function to categorize players into offensive, defensive and special teams based on their position.\n# 1 : Offensive\n# 2 : Defensive\n# 3 : Special\ndef assignTeam(pos):\n    offensive=['WR','HB','FB','QB','TE','RB']\n    defensive=['CB','SS','MLB','OLB','FS','DE','LB','ILB','DB','S','NT','DT']\n    special=['P','LS','K']\n    if pos in offensive:\n        return 1\n    if pos in defensive:\n        return 2\n    if pos in special:\n        return 3  \n\n# Calling the function with input paramter to be the value of position attribute from player dataframe.\nplayers[\"team\"]=players[\"position\"].apply(assignTeam)\n\n# A new column team is added to the dataframe.\nplayers.head(10)","95940024":"week[\"date\"] = week.time.apply(lambda x: x.split(\"T\")[0])\nweek.head()","9832ac5c":"week[\"time\"] = week.time.apply(lambda x: x.split(\"T\")[0])\nweek.head()","d1995365":"#Numbers of games in every date\ngraph1 = games['gameDate'].value_counts().reset_index()\ngraph1.columns = ['date', 'games']\ngraph1 = graph1.sort_values('games')\nfig = px.bar(\n    graph1, \n    y='date', \n    x=\"games\", \n    orientation='h', \n    title='Date and number of games on that date', \n    height=900, \n    width=900\n)\n#autolabel(rects, horizontal=True, percentageLabel=True)\n#plt.tight_layout()\nfig.show()\nplt.savefig(\"graph.png\")\n#plt.close(fig)\n#Image(\"graph.png\") ","1dc5fb1c":"#Numbers of games in every time\ngraph2 = games['gameTimeEastern'].value_counts().reset_index()\ngraph2.columns = ['time', 'games']\ngraph2 = graph2.sort_values('games')\nfig = px.bar(\n    graph2, \n    y='time', \n    x=\"games\", \n    orientation='v', \n    title='For each and every time the number of games played', \n    height=400, \n    width=800\n)\nfig.show()\nplt.savefig(\"graph2.png\")\n","7e65bcbe":"#Number of games every week\ngraph3 = games['week'].value_counts().reset_index()\ngraph3.columns = ['week', 'games']\ngraph3 = graph3.sort_values('games')\ngraph3['week'] = graph3['week'].astype(str) + '-'\nfig = px.bar(\n    graph3, \n    y='week', \n    x=\"games\", \n    orientation='h', \n    title='Number of games played every week', \n    height=600, \n    width=700\n)\nfig.show()\nplt.savefig(\"graph3.png\")\n#plt.close(fig)\n#Image(\"graph3.png\") ","1bdc82b3":"players['position'].value_counts()","44141274":"#Top positions by no of players\n#Graph4\nplt.rcParams[\"figure.figsize\"] = (20,10)\n\nsns.barplot(x = players.position.value_counts().index, y=players.position.value_counts().values)\nplt.xticks(rotation=45)\nplt.xlabel('Position count of players')\nsns.despine()\nplt.savefig(\"graph4.png\")\n#plt.close(fig)\n#Image(\"graph4.png\") ","ad102a1d":"#Number of plays every quarter\ngraph5 = plays['quarter'].value_counts().reset_index()\ngraph5.columns = ['quarter', 'plays']\ngraph5 = graph5.sort_values('plays')\nfig = px.pie(\n    graph5, \n    names='quarter', \n    values=\"plays\",  \n    title='Number of plays of every quarter',\n    height=500,\n    width=800\n)\nfig.show()\nplt.savefig(\"graph5.png\")","ea3ca072":"#Number of plays for every yards to go category \ngraph6 = plays['yardsToGo'].value_counts().reset_index()\ngraph6.columns = ['yardsToGo', 'plays']\ngraph6['yardsToGo'] = graph6['yardsToGo'].astype(str) + '-'\ngraph6 = graph6.sort_values('plays')\nfig = px.bar(\n    graph6, \n    y='yardsToGo', \n    x=\"plays\", \n    orientation='h', \n    title='Number of plays for every yards to go category',\n    height=800,\n    width=800\n)\nfig.show()\nplt.savefig(\"graph6.jpg\")\n#Image(\"graph6.jpg\")","b529cc56":"#No of plays for every team\ngraph7 = plays['possessionTeam'].value_counts().reset_index()\ngraph7.columns = ['team', 'plays']\ngraph7 = graph7.sort_values('plays')\nfig = px.bar(\n    graph7, \n    y='team', \n    x=\"plays\", \n    orientation='h', \n    title='Number of plays every team has played',\n    height=800,\n    width=800\n)\nfig.show()\nplt.savefig(\"graph7.png\")","78978b59":"#Number of plays for every defenders in the box\ngraph8 = plays['defendersInTheBox'].value_counts().reset_index()\ngraph8.columns = ['defendersInTheBox', 'plays']\ngraph8 = graph8.sort_values('plays')\nfig = px.bar(\n    graph8, \n    x='defendersInTheBox', \n    y=\"plays\",  \n    title='Number of plays for every number of defenders in the box',\n    height=500,\n    width=800\n)\nfig.show()\nplt.savefig(\"graph8.png\")","51c7f0f7":"#Number of plays for every passrushers \ngraph9 = plays['numberOfPassRushers'].value_counts().reset_index()\ngraph9.columns = ['numberOfPassRushers', 'plays']\ngraph9 = graph9.sort_values('plays')\nfig = px.bar(\n    graph9, \n    x='numberOfPassRushers', \n    y=\"plays\",  \n    title='Number of plays for every number of pass rushers present in the play',\n    height=500,\n    width=800\n)\nfig.show()\nplt.savefig(\"graph9.png\")","828b3d5b":"#Number of plays for every dropbacks \ngraph10 = plays['typeDropback'].value_counts().reset_index()\ngraph10.columns = ['typeDropback','plays']\ngraph10 = graph10.sort_values('plays')\nfig = px.pie(\n    graph10, \n    names='typeDropback', \n    values=\"plays\",  \n    title='Number of plays for every Dropback type',\n    height=500,\n    width=800\n)\nfig.show()\nplt.savefig(\"graph10.png\")","0d82c912":"fig = px.histogram(\n    plays, \n    x=\"playResult\",\n    width=800,\n    height=500,\n    nbins=50,\n    title='Play result distribution'\n)\nfig.show()\nplt.savefig(\"graph11.png\")","c8333727":"play_Type = plays['playType'].value_counts()  [:50]\nplt.figure(figsize=(6,4))\nsns.barplot(play_Type.index, play_Type.values, alpha=0.8)\nplt.ylabel('Number of playType', fontsize=12)\nplt.xlabel('playType', fontsize=9)\nplt.xticks(rotation=90)\nplt.show();\nplt.savefig(\"graph12.png\")","6142b77e":"week1_players = week1[['nflId', 'displayName', 'gameId']]","cbcc1d7c":"display_players = players[['nflId', 'displayName']]","430e78a8":"# merge 2 Dataframe \"df_players\" and \"df_team\"\nnamecount = pd.concat([display_players, week1_players],ignore_index=True)\nnamecount","63e3d4b8":"# combine 2 colums \"displayName\" & \"gameId\" then sort players desending regarding to total number of games played. \nsortgame = week1_players.groupby('displayName')['gameId'].count().reset_index().sort_values( by = 'gameId', ascending = False )","5bacf68c":"fig, ax1 = plt.subplots (1,figsize = (10,12))\n\n# figure \"a\" represent number of top players palaying a max. number of games. \na = sns.barplot (x = sortgame.gameId, y = sortgame.displayName[:30], ax = ax1 , \n                 linewidth = 1 ,alpha = 0.7, palette = 'Blues_r')\n\n# create loop to count number of max. games player by each player.\nfor i,j in enumerate(sortgame.gameId[:30]): \n        ax1.text(.05,i+0.15,j,weight = \"bold\", size = 15)\n\na.set_title(\"Total Number of Games played by the top 30 players Distribution\" , weight = 'bold', size = 16)\na.set_xlabel('Total Games Count', size = 15)\na.set_ylabel('Top 20 Player Vs. Games Distribution', size = 14)\nplt.xticks([0, 5, 10, 15, 20, 25, 30, 35],\n           ['0','5','10','15','20','25','30', '35'])\nplt.show();\nplt.savefig(\"graph13.png\")","16f88a68":"weekgame = week.groupby('gameId').size().reset_index(name='count_of_each_gameId')\nweekgame","541a4ca0":"offform = pd.DataFrame(plays.personnelO.value_counts())\noffform.index.name = 'OffensiveFormation'\noffform.columns=['Play Count']\noffform[:15].style.set_caption('Different Offensive Formation')","99cd5a76":"defform = pd.DataFrame(plays.personnelD.value_counts())\ndefform.index.name = 'DefensiveFormation'\ndefform.columns=['Play Count']\ndefform[:15].style.set_caption('Diffferent Defensive formation')","3bbbb5cd":"from plotly.subplots import make_subplots\n\nheight = players.height.value_counts()\ntrace1 = go.Bar(\n    x=height.index,\n    y=height.values,\n    marker=dict(\n        color=height.values,\n        colorscale = 'BrBg',\n        reversescale = False\n    ),\n)\n\nweight = players.weight.value_counts().head(10)\n\ntrace2 = go.Bar(\n    x=weight.index,\n    y=weight.values,\n    orientation='v',\n    marker=dict(\n        color=weight.values,\n        colorscale = 'BrBg',\n        reversescale = False\n    ),\n)\nfig = make_subplots(rows=1, cols=2, subplot_titles=('height', 'weight'))\nfig.append_trace(trace1, 1,1)\nfig.append_trace(trace2, 1,2)\n\n\nfig['layout'].update(showlegend=False, template ='plotly_white') \npy.iplot(fig, filename=\"weight\")\n\nplt.savefig(\"graph14.png\")","ac7f4bf9":"isDefensivePI = plays.isDefensivePI.value_counts()\n\ntrace = go.Bar(\n    x=isDefensivePI.index,\n    y=isDefensivePI.values,\n    marker=dict(\n        color=isDefensivePI.values,\n        colorscale = 'BrBg',\n        reversescale = False\n    ),\n)\n\nlayout = go.Layout(\n    title='isDefensivePI',\n    template=\"plotly_white\",\n)\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"isDefensivePI\")\nplt.savefig(\"graph15.png\")","7b3dc89c":"players.groupby('position').weight.max().plot(kind='bar', figsize=(18,6), color={'saddlebrown'})\nplt.title('The max weight by position', fontsize=16, fontweight='bold')\nplt.xlabel('position',fontsize=14)\nplt.ylabel('weight',fontsize=14)\nplt.xticks(rotation=45)\nplt.show()\nplt.savefig(\"graph16.png\")","e90ac00b":"players.groupby('position').age.max().plot(kind='bar', figsize=(18,6), color={'darkblue'})\nplt.title('The max height by position', fontsize=16, fontweight='bold')\nplt.xlabel('position',fontsize=14)\nplt.ylabel('age',fontsize=14)\nplt.xticks(rotation=45)\nplt.show()\nplt.savefig(\"graph17.png\")","fd1e8ee6":"plays.groupby('offenseFormation').offensePlayResult.mean().plot(kind='bar',figsize=(9,6))\nplt.xticks(rotation=45)\nplt.xlabel('offenseFormation', fontsize=14)\nplt.ylabel('offensePlayResult',fontsize=14)\nplt.title('The mean Yards gained by offense formation', fontsize=16, fontweight='bold')\nplt.show()\nplt.savefig(\"graph18.png\")","158c5280":"# combine 3 colums \"possessionTeam\", \"passResult\" & \"playId\" then sort team positions desending regarding number of players achieve pass attempts result\ndf_postion_pass_player_sort = plays.groupby(['possessionTeam', 'passResult'])['playId'].count().reset_index().sort_values( by = 'playId', ascending = False )\ndf_complete_postion_pass_player_sort = df_postion_pass_player_sort.query('passResult == \"C\"')","c3ce4484":"# combine 2 colums \"possessionTeam\" & \"playId\" then sort Teams desending regarding number of players \ndf_postion_player_sort = plays.groupby('possessionTeam')['playId'].count().reset_index().sort_values( by = 'playId', ascending = False )\n\n\ndf_complete_postion_pass_player_percentage = df_complete_postion_pass_player_sort.copy()\ndf_complete_postion_pass_player_percentage = df_complete_postion_pass_player_percentage.merge(df_postion_player_sort, how = 'left', on=['possessionTeam'])\ndf_complete_postion_pass_player_percentage = df_complete_postion_pass_player_percentage.rename(columns = {'playId_y' :'total_playId', 'playId_x' : 'complete_pass_playId'})\ndf_complete_postion_pass_player_percentage['complete_pass_%'] = (df_complete_postion_pass_player_percentage.complete_pass_playId \n                                                                 \/ df_complete_postion_pass_player_percentage.total_playId) * 100","8d506814":"fig, ax1 = plt.subplots (1,figsize = (15,10))\n\n# figure \"a\" represent number of players acheive pass attempts result in all teams.\na = sns.barplot (x = df_complete_postion_pass_player_percentage['complete_pass_%'], y = df_complete_postion_pass_player_percentage.possessionTeam, \n                 ax = ax1 , linewidth = 1 ,alpha = 0.7, palette = 'tab10')\n\n# create loop to count number of players players acheive pass attempts % in each teams.\nfor i,j in enumerate(df_complete_postion_pass_player_percentage['complete_pass_%']):\n        ax1.text(.01,i+0.1,'{:0.2f} %'.format(j),weight = \"bold\", size = 10)\n             \n# create loop to count number of players in each college\na.set_title(\"Percentage of Players Completing the pass attempt Vs. Positions Team Distribution\" , weight = 'bold', size = 10)\na.set_xlabel('Percentage of Player Completing the pass attempts', size = 10)\na.set_ylabel('Positions Team', size = 15)\nplt.xticks([0, 10, 20, 30, 40, 50, 60, 70],['0%','10%','20%','30%','40%','50%','60%', '70%'])\nplt.show();\nplt.savefig(\"graph19.png\")","8c88bdee":"displayName = week.displayName.value_counts()\n\ntrace = go.Bar(\n    y=displayName.index[::-1],\n    x=displayName.values[::-1],\n    orientation='h',\n    marker=dict(\n        color=displayName.values[::-1],\n        colorscale = 'RdBu',\n        reversescale = True\n    ),\n)\n\nlayout = go.Layout(\n    title='Most frequently occured players in tracking data  ',\n    template=\"plotly_white\",\n)\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"displayName\")\nplt.savefig(\"graph20.png\")","f675bea0":"def find_dist(df, col_name):\n    \n    # Checking the frequency of games in relation to the column values\n    dist = df[col_name].value_counts().reset_index()\n    \n    # Renaming the columns\n    dist.columns = [col_name, 'frequency']\n        \n    # Sorting the DataFrame based on the column values\n    sorted_dist = dist.sort_values(col_name, ascending=True).set_index(col_name)\n\n    # Plotting a bar plot\n    sorted_dist.plot(kind='bar', figsize=(20,4))\n\n    # Return a boolean indicating the function was successfully executed\n    return True","a5f299a7":"find_dist(players,'age')\nplt.savefig(\"graph21.png\")","e34ee346":"# Visualizing Pass Result using Seaborn\nplt.figure(figsize=(10,5))\ngraph = sns.countplot(x='passResult',data=plays)\n\nfor p in graph.patches:\n    height = p.get_height()\n    graph.text(p.get_x()+p.get_width()\/2., height + 0.3,height ,ha=\"center\")\n    \nplt.show()\nplt.savefig(\"graph22.png\")","07cc0ed5":"football=week1[week1['displayName'] == 'Football']","9880338c":"football.drop(['s','a','dis','o','dir','nflId','position'],axis=1,inplace=True)","8610407b":"football.set_index(['gameId','playId'],inplace=True)","52d88a16":"football.head()","75d4223b":"players_week1=week1[week1['displayName'] != 'Football']","a88e3589":"players_week1.set_index(['gameId','playId'],inplace=True)","7fc3efb5":"players_week1.drop(['s','a','dis','o','dir'],axis=1,inplace=True)","8e27bd0b":"trialfootball=football.loc[2018090600,75]","61366f28":"trialplayers=players_week1.loc[2018090600,75]","0f19cf22":"trialfootball.info()","fb513542":"trialplayers.head()","a470ae22":"trial=trialplayers[[\"displayName\",\"x\",\"y\",\"position\"]]\ntrial.reset_index(inplace=True)","421a039d":"trial.drop(['gameId','playId'],axis=1,inplace=True)","01239355":"triallast = trial.drop_duplicates('displayName', keep='last')","c5c22e0e":"trialfirst = trial.drop_duplicates('displayName', keep='first')","bbe1f71b":"plt.rcParams[\"figure.figsize\"] = (15, 15)","b13cd601":"ax=plt.gca\nfx=list(trialfirst[\"x\"])\nfy=list(trialfirst[\"y\"])\nlx=list(triallast[\"x\"])\nly=list(triallast[\"y\"])\nname=list(triallast[\"displayName\"])\npos=list(trialfirst[\"position\"])\nfor i, txt in enumerate(name):\n    plt.annotate(txt, (fx[i], fy[i]),color='maroon')\nfor i, txt in enumerate(pos):\n    plt.annotate(txt, (lx[i], ly[i]),color='blue')\nplt.scatter(trialplayers[\"x\"],trialplayers[\"y\"],color=\"green\",label='Players')\nplt.scatter(trialfootball[\"x\"],trialfootball[\"y\"],color=\"black\",label='Football')\nplt.savefig(\"graph23.png\")","8dbac215":"def animated(df):\n    fig = px.scatter(\n        df, \n        x='x', y='y',  text='position', color='team', animation_frame='playId', animation_group='position',\n        range_x=[-6, 128], range_y=[-13, 62],\n        hover_data=['displayName', 'jerseyNumber', 's', 'a', 'dis', 'o'])\n    fig.update_traces(textposition='top center', marker_size=10)\n    fig.update_layout(paper_bgcolor='darkgreen', plot_bgcolor='darkgreen', font_color='white')\n    \n    return fig","6b174371":"game=week4.gameId.unique()\n\nsingle = week4.query(\"gameId=='2018093003'\")","24f9e755":"#writer = FFMpegWriter(fps=10)\n\ntime_slice =  game[0:1000:5]  # Change here\ndf_slice = week4[week4.gameId.isin(time_slice)]\nfig = animated(df_slice)\nfig.layout.updatemenus[0].buttons[0].args[1]['frame']['duration'] = 500\nfig.layout.updatemenus[0].buttons[0].args[1]['transition']['duration'] = 300\nfig.show()\n\n#plt.savevideo(\"graph15.mp4\")","f0d37036":"The Defense in the box was constructed to stop dominant players and force secondary players to step up and beat you. It works best against a team where the dominant player is a perimeter player who is trying to score from open shots and dribble penetration. If you\u2019re going against an opponent with one main scorer and no outside shooting threats then this defense has a great chance to be successful. By the graph we can infer that the more defense in the box and we get the play result","dd76c00f":"Dropping back to pass is a passing style employed in American football in which the quarterback initially takes a three-step drop, backpedaling into the pocket to make a pass. It is the most common way of passing the ball in gridiron football.here we can infer that traditional dropback is the most used for passing a ball and traditional is the good method to successfully pass the ball.","c809b9c0":"# Data preprocessing","92969356":"### Combining all the weeks ","a69f30bd":"* Feature Scaling","22294a17":"**Tracking data(week)**\n\n* Each of the 17 week[week].csv files contain player tracking data from all passing plays during Week [week] of the 2018 regular season. Nearly all plays from each [gameId] are included; certain plays or games with insufficient data are dropped. Each team and player plays no more than 1 game in a given week.\n\n* time: Time stamp of play (time, yyyy-mm-dd, hh:mm:ss)\n\n* x: Player position along the long axis of the field, 0 - 120 yards. See Figure 1 below. (numeric)\n\n* y: Player position along the short axis of the field, 0 - 53.3 yards. See Figure 1 below. (numeric)\n\n* s: Speed in yards\/second (numeric)\n\n* a: Acceleration in yards\/second^2 (numeric)\n\n* dis: Distance traveled from prior time point, in yards (numeric)\n\n* o: Player orientation (deg), 0 - 360 degrees (numeric)\n\n* dir: Angle of player motion (deg), 0 - 360 degrees (numeric)\n\n* event: Tagged play details, including moment of ball snap, pass release, pass catch, tackle, etc (text)\n\n* nflId: Player identification number, unique across players (numeric)\n\n* displayName: Player name (text)\n\n* jerseyNumber: Jersey number of player (numeric)\n\n* position: Player position group (text)\n\n* team: Team (away or home) of corresponding player (text)\n\n* frameId: Frame identifier for each play, starting at 1 (numeric)\n\n* gameId: Game identifier, unique (numeric)\n\n* playId: Play identifier, not unique across games (numeric)\n\n* playDirection: Direction that the offense is moving (text, left or right)\n\n* route: Route ran by offensive player (text)","60779970":"### Week data has considerable missing values hence filling all the values with either 0 null or maximum frequent value since the value missing was where the displayName was given as football ","e7014d95":"\u2192 By this we can see that most of the time the players are the Wide receiver  who is a ball-receiver in gridiron football and we also get to know that more wide receivers than more points can be earned.","c1ef4abb":"The sum of all yards gained by a player who is in possession of the ball during a play. All-purpose yardage includes rushing and receiving yards gained on offense.The number of yards gained by the offensive team advancing the ball from the line of scrimmage.","73c6562f":"As a point of reference, in general there are ~ 150 total plays in a game historically. In our case, we are ONLY examining passing plays by the teams, and thus on a per game basis, the play count will be less.\n\nIn 2018, the Raiders were based out of Oakland and thus the designation OAK as a reference in our datasets, but later they will move to Las Vegas and be known as LV\nCareful: There are two Los Angeles teams (Los Angeles Chargers known as LAC, and Los Angeles Rams known as LA)\n\nREAD: In a regular season, each team should play a total of 16 games. This means there should be a total of 256 games played in the NFL season. (i.e. each of the league's 32 teams play a 16-game schedule, with one bye week for each team).\n\nIt appears there are only 253 games in our dataset, which means 3 games are missing\n\nWhy is this important ? Because this means we are missing the data for 3 games, which represents 6 individual teams will have slightly lower offensive stats, defensive stats, etc. This is approximately a 6.25 % difference, and something to very much keep in mind.\n\nThe actual teams missing that data: SEA, DEN, KC, LAC, MIN, SF !\n\nThe 2018 NFL season was the 99th season of the National Football League (NFL). The 2017 defending Super Bowl champions were the Philadelphia Eagles. In the 2018 season, the AFC Champion New England Patriots and the NFC Champion Los Angeles Rams battled in the Superbowl, with the Patriots defeating the Rams 13\u20133 for their sixth Super Bowl championship and their third title in five years.\n","a4174226":"# NFL BIG DATA BOWL 2021\n","fc0fea16":"Dropping unnecessary attributes","535aba9d":"## Tracking players movement ","3ab1c40a":"# Explorative Data Analysis ","f47dd05e":"Here we can infer which team has played how many games on the day and which will also help to decide the best team based on the team that has played the more games.(Each team played sixteen regular season games over seventeen weeks. During the season, on a rotating basis, each team would have the weekend off. As a result, opening weekend was moved up to Labor Day weekend. ) ","a9793729":"Rushing is charging across the line of scrimmage towards the quarterback or kicker in the effort to stop or \"sack\" them.A pass rush can be effective even if it does not sack the quarterback if it forces the passer to get rid of the ball before he wanted to, resulting in an incomplete pass or interception.so in graph we can infer when there are many play rushers then there are many incomplete pass or interception.","155308a9":"* Reading plays data ","b3d716f9":"**Plays**\n\n* gameId: Game identifier, unique (numeric)\n* playId: Play identifier, not unique across games (numeric)\n* playDescription: Description of play (text)\n* quarter: Game quarter (numeric)\n* down: Down (numeric)\n* yardsToGo: Distance needed for a first down (numeric)\n* possessionTeam: Team on offense (text)\n* playType: Outcome of dropback: sack or pass (text)\n* yardlineSide: 3-letter team code corresponding to line-of-scrimmage (text)\n* yardlineNumber: Yard line at line-of-scrimmage (numeric)\n* offenseFormation: Formation used by possession team (text)\n* personnelO: Personnel used by offensive team (text)\n* defendersInTheBox: Number of defenders in close proximity to line-of-scrimmage (numeric)\n* numberOfPassRushers: Number of pass rushers (numeric)\n* personnelD: Personnel used by defensive team (text)\n* typeDropback: Dropback categorization of quarterback (text)\n* preSnapHomeScore: Home score prior to the play (numeric)\n* preSnapVisitorScore: Visiting team score prior to the play (numeric)\n* gameClock: Time on clock of play (MM:SS)\n* absoluteYardlineNumber: Distance from end zone for possession team (numeric)\n* penaltyCodes: NFL categorization of the penalties that ocurred on the play. For purposes of this contest, the most important penalties are Defensive Pass Interference (DPI), Offensive Pass Interference (OPI), Illegal Contact (ICT), and Defensive Holding (DH). Multiple penalties on a play are separated by a ; (text)\n* penaltyJerseyNumber: Jersey number and team code of the player commiting each penalty. Multiple penalties on a play are separated by a ; (text)\n* passResult: Outcome of the passing play (C: Complete pass, I: Incomplete pass, S: Quarterback sack, IN: Intercepted pass, text)\n* offensePlayResult: Yards gained by the offense, excluding penalty yardage (numeric)\n* playResult: Net yards gained by the offense, including penalty yardage (numeric)\n* epa: Expected points added on the play, relative to the offensive team. Expected points is a metric that estimates the average of every next scoring outcome given the play's down, distance, yardline, and time remaining (numeric)\n* isDefensivePI: An indicator variable for whether or not a DPI penalty ocurred on a given play (TRUE\/FALSE)","d5455c7a":"* Backward filling for plays dataset","62916567":"Here we can infer which team has played how many games on the day and which will also help to decide the best team based on the team that has played the more games.(Each team played sixteen regular season games over seventeen weeks. During the season, on a rotating basis, each team would have the weekend off. As a result, opening weekend was moved up to Labor Day weekend. ) ","a76a9058":"Playresult is the score of the team at the end of the play.In the graph we can see the increase in playresult with each increase in the play. ","0f4d5e8e":"# NFL TEAMS\n![image.png](attachment:image.png)\n\n","cb006968":"The team with the highest plays played will be the leading team in  the game and here we can see that PIT is the highest plays played team with 738 plays","4e870291":"* Label encoding","1d5c2b13":"There will be 4 quarters in the game each of 15 minutes. Here we infer  how many plays are played in each quarter ","e1b824c7":"Games dataset and player dataset does not have any missing values hence there was no such data cleaning to be done in these two files","bb9eeff7":"### Player data does not have any missing fields ","acb4891e":"players\n\nnflId: Player identification number, unique across players (numeric)\n\nheight: Player height (text)\n\nweight: Player weight (numeric)\n\nbirthDate: Date of birth (YYYY-MM-DD)\n\ncollegeName: Player college (text)\n\nposition: Player position (text)\n\ndisplayName: Player name (text)","5ef95e5b":"* Reading week tracking data ","e244078f":"## Complete data cleaning done for all the datasets  ","ab5f56e3":"Number of college-level football teams in the United States: 774\n\nNumber of Division I college-level football teams in the United States: 130\n\nNumber of college-level football players: 73,557\n\nNumber of college-level football players that are NFL draft eligible: 16,346\n\nNumber of high school level football players: 1,036,842\n\nThat is not a typo. There are over 1 million high schoolers playing football right now.\n\nFootball is the most popular sport in America (a country with a population of over 327 million)\n\nIF you are a statistical anomaly physically, you may be able to get into the NFL via the path of attending a Division II college (maybe), but most likely it will be via Division I.\n\nProbability of getting into a Division I college football program from high school: 2.8%\n\nProbability of getting into the NFL from college football program: 1.6%\n\nTotal number of college players drafted into the NFL last year: 256","5c5e6935":"# Dataset\n1. Game data: The games.csv contains the teams playing in each game. The key variable is gameId.\n1. Player data: The players.csv file contains player-level information from players that participated in any of the tracking data files. The key variable is nflId.\n1. Play data: The plays.csv file contains play-level information from each game. The key variables are gameId and playId.\n1. Tracking data: Files week[week].csv contain player tracking data from all games in week [week]. The key variables are gameId, playId, and nflId. There are 17 weeks to a typical NFL Regular Season, and thus 17 data frames with player tracking data are provided.","21120d66":"Game\n\ngameId: Game identifier, unique (numeric)\n\ngameDate: Game Date (time, mm\/dd\/yyyy)\n\ngameTimeEastern: Start time of game (time, HH:MM:SS, EST)\n\nhomeTeamAbbr: Home team three-letter code (text)\n\nvisitorTeamAbbr: Visiting team three-letter code (text)\n\nweek: Week of game (numeric)","a396052e":"### Games data does not have any missing fields ","fdb4bf42":"If you turn on an American football game on a Sunday afternoon, you will see a real variety of physical appearances among the players. It is, in a way, a bit like Rugby; there are positions dependent on strength and power, and others dependent on speed. American football is a more exaggerated version of this.Take, for example, Trindon Holliday and Terrence Cody. Holliday is a wide receiver and kick returner for the Denver Broncos. He is only 5 feet 5 inches tall, and when he stands on the field he truly looks like a boy among men.","5236ad67":"### Data processing of missing values in plays dataframe ","41ebe85e":"* Reading games data ","f0a99dd2":"* Importing necessary libraries ","547cce4d":"**Background**\n![image.png](attachment:image.png)\n\n\nThe NFL has again released their Kaggle competition, this year known as the NFL Big Data Bowl 2021, using NextGen Stats data.\n\nEvery NFL player on the field (both on offense and defense) during active plays is tracked in terms of the capturing of their real-time location data, speed and acceleration\n\nSensors throughout the stadium track radio frequency identification (RFID) tags placed within the players' shoulder-pads, charting movements in a highly accurate manner\n\nThe actual football is also tracked as an independent entity, opening up intriguing possibilities for analysis...\n\nAll real-time data is processed entirely on an advanced machine learning based Amazon Web Services (AWS) infrastructure. Data is streamed towards the NFL stats page. FYI, Data Scientists call this a pipeline.\n\nRFID tags: Designed by Zebra Technologies (official on-field player-tracking technology partner of the NFL), they consist of an integrated circuit (IC) attached to an antenna typically a small coil of wires plus some protective packaging as determined by the application requirements. They are active in this case and not passive.\n\nThese real-time stats on players create a deeper fan experience and the NFL should be complimented on their choice to push the boundaries of analytics\n","cad4e23e":"* Reading players data"}}