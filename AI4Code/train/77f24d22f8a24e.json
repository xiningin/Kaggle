{"cell_type":{"fb0acabe":"code","60e3d3c8":"code","24a2eb4e":"code","efdb9eeb":"code","d12a33ac":"code","630184af":"code","b72cc45e":"code","a060de19":"code","dc31b594":"code","2bbdf6fb":"code","c5f4ef35":"code","6fe434c6":"code","6664963e":"code","436052cf":"code","3a66c2ac":"markdown","1ec61dd5":"markdown"},"source":{"fb0acabe":"import numpy as np \nimport pandas as pd \nimport nltk\nfrom nltk.corpus import stopwords\nimport string\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","60e3d3c8":"data = pd.read_csv(\"\/kaggle\/input\/product-comments-dataset\/data.csv\",sep=\",\",encoding ='utf-8')","24a2eb4e":"data['Duygu'].value_counts()","efdb9eeb":"# Get equal data from both statement for better results\n\ndata_n=data[data.Duygu==0]\ndata_negative=data_n.iloc[:230]\n\ndata_p=data[data.Duygu==1]\ndata_positive=data_p.iloc[:230]","d12a33ac":"# Concat datasets\ndataset=pd.concat([data_positive,data_negative])","630184af":"# split dataset\nx = dataset['Yorum'].copy()\ny = dataset['Duygu'].values.reshape(-1,1)","b72cc45e":"WPT = nltk.WordPunctTokenizer()\nstop_word_list = nltk.corpus.stopwords.words('turkish')\nprint(stop_word_list)","a060de19":"# function for remove stopwords and punctuations\ndef text_preprocess(text):\n    text = text.translate(str.maketrans('', '', string.punctuation))\n    text = [word for word in text.split() if word.lower() not in stop_word_list]\n    return \" \".join(text)\n\nx = x.apply(text_preprocess)\n","dc31b594":"# train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2, random_state = 42)","2bbdf6fb":"# frequency of words appearing in a document is converted to a matrix\nfrom sklearn.feature_extraction.text import CountVectorizer\nvect = CountVectorizer(encoding ='utf-8').fit(x_train) # fit and transform\nx_train_vectorized = vect.transform(x_train)","c5f4ef35":"# import LogisticRegression\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()","6fe434c6":"# fitting model\nlr.fit(x_train_vectorized, y_train)\n","6664963e":"# prediction\npredictions = lr.predict(vect.transform(x_test))","436052cf":"# accuracy \nfrom sklearn.metrics import roc_auc_score\nprint('AUC: ', roc_auc_score(y_test, predictions))","3a66c2ac":"## Conclusion\n* accuracy:  0.8390070921985816 ","1ec61dd5":"## Introduction\n* Predict comments is positive or negative  with Logistic Regression algorithm\n* Calculate reliability -- Accuracy"}}