{"cell_type":{"0bb9c55e":"code","d32c3d0d":"code","d6610216":"code","21067308":"code","3eafe4d7":"code","87b916db":"code","69e6c007":"code","71bb8255":"code","b0872669":"code","08883178":"code","a43adad4":"code","9adf53d0":"code","f849577b":"code","46429be0":"code","452dafc2":"code","2a478fd9":"code","45406464":"code","d8c9946a":"code","3cb8b13f":"code","abc1c978":"code","e5b510f5":"code","3c72e5c5":"code","cd1d7813":"code","8b8f22f0":"markdown","5196bf37":"markdown","8002e863":"markdown","17abb6d0":"markdown","c29b35d2":"markdown","29824ff9":"markdown","1ad3da1e":"markdown","3e42c5be":"markdown"},"source":{"0bb9c55e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d32c3d0d":"import numpy as np \nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom tensorflow import keras","d6610216":"train = pd.read_csv('\/kaggle\/input\/sign-language-mnist\/sign_mnist_train\/sign_mnist_train.csv')\ntest = pd.read_csv('\/kaggle\/input\/sign-language-mnist\/sign_mnist_test\/sign_mnist_test.csv')","21067308":"train.head()","3eafe4d7":"test.head()","87b916db":"# first column is the label column, separate it\ntrain_labels = train['label']\ntest_labels = test['label']\ntrain.drop('label', axis = 1, inplace = True)\ntest.drop('label', axis = 1, inplace = True)","69e6c007":"train_labels.head()","71bb8255":"train.head()","b0872669":"X = train.values\nX_test = test.values","08883178":"y = train_labels.values\ny_test = test_labels.values","a43adad4":"from sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(X,y, test_size = 0.2, random_state = 42)","9adf53d0":"X_train.shape","f849577b":"X_valid.shape","46429be0":"fig, ax = plt.subplots(5,5, figsize = (15,10))\n\nfor i in range(5):\n    for j in range(5):\n        r = np.random.randint(len(X_train))\n        ax[i,j].imshow(X_train[r].reshape(28, 28), cmap = 'gray')\n        ax[i,j].axis('off')\n        plt.tight_layout()    ","452dafc2":"X_train = X_train.reshape(-1,28,28,1)\nX_test = X_test.reshape(-1,28,28,1)\nX_valid = X_valid.reshape(-1,28,28,1)\n","2a478fd9":"from keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale = 1. \/ 255, \n                                   rotation_range = 40, \n                                   width_shift_range = 0.2, \n                                   height_shift_range = 0.2, \n                                   shear_range = 0.2, \n                                   zoom_range = 0.2, \n                                   fill_mode = 'nearest')\n\nvalid_datagen = ImageDataGenerator(rescale = 1. \/255)\ntest_datagen = ImageDataGenerator(rescale = 1. \/255)","45406464":"from sklearn.preprocessing import LabelBinarizer\nbinarizer = LabelBinarizer()","d8c9946a":"y_train = binarizer.fit_transform(y_train)\ny_valid = binarizer.fit_transform(y_valid)\ny_test = binarizer.fit_transform(y_test)","3cb8b13f":"model = keras.models.Sequential([\n    keras.layers.Conv2D(64, (3,3), padding = 'same', activation = 'relu', input_shape = (28,28,1)),\n    keras.layers.BatchNormalization(),\n    keras.layers.MaxPooling2D((2,2)),\n    keras.layers.Dropout(0.2),\n    keras.layers.Conv2D(64, (3,3),padding = 'same', activation = 'relu'),\n    keras.layers.BatchNormalization(),\n    keras.layers.MaxPooling2D((2,2)),\n    keras.layers.Dropout(0.2),\n    keras.layers.Flatten(),\n    keras.layers.Dense(512, activation = 'relu'),\n    keras.layers.Dense(24, activation = 'softmax')\n])\n\nmodel.summary()\n\nmodel.compile(optimizer = 'Adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])","abc1c978":"history = model.fit(train_datagen.flow(X_train,y_train, batch_size = 128), \n          epochs = 20, \n          steps_per_epoch = len(X_train) \/\/ 128, \n          validation_data = valid_datagen.flow(X_valid,y_valid, batch_size = 32),\n          validation_steps = len(X_valid) \/\/ 32 , \n        callbacks = [keras.callbacks.EarlyStopping(patience = 2)])","e5b510f5":"## Plot the history of our model\n\n# Get the different results\nacc = history.history[\"accuracy\"]\nval_acc = history.history[\"val_accuracy\"]\nloss = history.history[\"loss\"]\nval_loss = history.history[\"val_loss\"]\n\nepochs = range(len(acc))\n\n# Plot the training and validation accuracy per epoch\nplt.plot(epochs, acc)\nplt.plot(epochs, val_acc)\nplt.title(\"Training and validation accuracy\")\nplt.figure()\n\n# Plot the training and validation loss per epoch\nplt.plot(epochs, loss)\nplt.plot(epochs, val_loss)\nplt.title(\"Training and validation loss\")\nplt.figure()","3c72e5c5":"y_test.shape","cd1d7813":"# Evalulate on test data\nmodel.evaluate(test_datagen.flow(X_test, y_test))","8b8f22f0":"# Randomly Visualize the Image","5196bf37":"# Convert dataframe into array","8002e863":"# Split training data into training and validation","17abb6d0":"# Reshape pixels back into 28x28 arrays","c29b35d2":"# Import data","29824ff9":"# Import libraries","1ad3da1e":"# Applying model","3e42c5be":"# Separate label and pixel's value from train and test data"}}