{"cell_type":{"dd03e115":"code","8faba571":"code","0ff26f5c":"code","c575386f":"code","8529277e":"code","b71aa29b":"code","1b993329":"code","f9b9325f":"code","7c3f010f":"code","138e1dca":"code","f8097b8c":"code","5297868a":"code","a6b40a73":"code","ca8138e9":"code","261c2d00":"code","91545580":"code","56747a57":"code","b5a2dc0a":"code","8f803778":"code","0605acaf":"code","4480f0b7":"code","7eb8f77c":"code","4598384f":"code","23b53a21":"markdown","beb9e1e6":"markdown","b30523b6":"markdown"},"source":{"dd03e115":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Visualisation Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\n# Date & Time\nfrom datetime import date, datetime, timedelta\n\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n%matplotlib inline\n\n# plt.style.use('ggplot')\n# sns.set(style=\"whitegrid\")\nplt.style.use('fivethirtyeight')\nfont = {\n    'weight' : 'bold',\n    'size'   : 13\n}\nplt.rc('font', **font)","8faba571":"url = '..\/input\/moroccocoronavirus\/corona_morocco.csv'\ndata = pd.read_csv(url, header='infer')\ndata.head()","0ff26f5c":"data.tail()","c575386f":"data.info()\n# data.get_dtype_counts()","8529277e":"data[\"Date\"] = pd.to_datetime(data['Date'], dayfirst=True)\ndata[\"Date\"].dtype","b71aa29b":"## Selecting rows with history data\n\ndata = data[data[\"Date\"] <= pd.Timestamp(date.today())]\ndata.tail()","1b993329":"# Feature Engineering\ndata[\"Tested\"] = data[\"Confirmed\"] + data[\"Excluded\"]\ndata['Active'] = data['Confirmed'] - (data['Deaths'] + data['Recovered'])","f9b9325f":"## Replace Missing Data\ndata.fillna(method='ffill', inplace=True)\ndata.fillna(value=0, inplace=True)","7c3f010f":"title = \"Covid-19 Morocco\"\n\ndef lineplot(data, cols):\n    \"\"\"\n    Line plot a list of variables with respect to date\n    \"\"\"\n    f, ax = plt.subplots(1,1, figsize=(20, 8))\n    for col in cols:\n            g = sns.lineplot(x=\"Date\", y=col, data=data, label=col)\n    plt.xlabel('Date')\n    plt.ylabel(f'Total Cumulative {title} cases')\n    plt.title(f'Total Cumulative {title} cases')\n    plt.xticks(rotation=45)\n    plt.show();\n\nlineplot(data, ['Confirmed', 'Recovered', 'Deaths'])","138e1dca":"## Plot of Confirmed, Tested, Excluded Cases\nlineplot(data, ['Confirmed', 'Tested', 'Excluded'])","f8097b8c":"## Plot of recovered and Death cases (Death Rate is critical)\nlineplot(data, ['Recovered', 'Deaths'])","5297868a":"## Plot of Active Cases\nlineplot(data, ['Active'])","a6b40a73":"## Todays histogram of cases by region\ndef plot_cases_by_region(DATE):\n    dictionary = data[data.Date == DATE].to_dict(orient='records')[0]\n\n    # Remove non-region keys\n    entriesToRemove = ['Date', 'Confirmed', 'Tested', 'Excluded', 'Active', 'Deaths', 'Recovered']\n    for k in entriesToRemove:\n        dictionary.pop(k, None)\n\n    ## Histogram of total cases by region\n    ax = pd.Series(dictionary).plot(kind='bar', figsize=(20,8), title=f\"Total Cases by region {DATE}\")\n    ax.set_xlabel(\"Region\")\n    ax.set_ylabel(\"Total Cases\")\n    plt.xticks(rotation=45)\n    plt.grid()\n    plt.show();","ca8138e9":"DATE = data.loc[10,:]['Date'].date()\nplot_cases_by_region(DATE)","261c2d00":"yesterday = date.today() - timedelta(days=1)\nplot_cases_by_region(yesterday)","91545580":"today = date.today()\nplot_cases_by_region(today)","56747a57":"REGIONS= ['Beni Mellal-Khenifra', 'Casablanca-Settat', 'Draa-Tafilalet',\n          'Dakhla-Oued Ed-Dahab', 'Fes-Meknes', 'Guelmim-Oued Noun',\n          'Laayoune-Sakia El Hamra', 'Marrakesh-Safi', 'Oriental',\n          'Rabat-Sale-Kenitra', 'Souss-Massa', 'Tanger-Tetouan-Al Hoceima']\n\ncustom_palette = sns.color_palette(\"Paired\", 12)","b5a2dc0a":"plt.figure(figsize=(20, 8))\nfor i, col in enumerate(REGIONS):\n    sns.lineplot(x='Date', y=col, data = data.iloc[17:], label=col, linewidth=2.5, color=custom_palette[i])\n\nplt.title(f'Total Cumulative cases in each region of Morocco')\nplt.xlabel(\"Date\")\nplt.ylabel(\"Total Cases\")\nplt.xticks(rotation=45)\nplt.grid()\nplt.legend();","8f803778":"TodayData = data[data[\"Date\"] == yesterday]\n\n# Calculate Proportions\nTodayData[REGIONS] = TodayData[REGIONS]\/ TodayData['Confirmed'].tolist()[0]\n\n# Plot Distribution of Confirmed Cases\nfig, ax = plt.subplots(1,1)\nfig.set_size_inches(12,12)\nTodayData[REGIONS].iloc[0, :].plot(kind='pie', ax=ax, autopct='%1.1f%%', startangle=81)\nax.set_ylabel('')\nax.set_xlabel('');","0605acaf":"# x = np.array(list(data.columns)[4:])\n# y = np.array(TodayData.iloc[:,4:])[0]\n# colors = ['yellowgreen','red','gold','lightskyblue','white','lightcoral','blue','pink', 'darkgreen','yellow','grey','violet','magenta','cyan']\n# porcent = 100. * y \/ y.sum()\n\n# plt.figure(figsize=(18, 10))\n# patches, texts = plt.pie(y, colors=colors, startangle=90, radius=1.2)\n# labels = ['{0} - {1:1.2f} %'.format(i,j) for i,j in zip(x, porcent)]\n\n# sort_legend = True\n# if sort_legend:\n#     patches, labels, dummy =  zip(*sorted(zip(patches, labels, y), key=lambda x: x[2], reverse=True))\n\n# plt.legend(patches, labels, loc='left center', bbox_to_anchor=(-0.1, 1.), fontsize=8)\n# plt.savefig('piechart.png', bbox_inches='tight');","4480f0b7":"import folium \nimport webbrowser\n\ndef MapTweetLocations(DATE):\n\n    # Select Row\n    row = data[data.Date == DATE]\n    row = row[REGIONS].iloc[row.shape[0]-1,:]\n    \n    # Make Data as Dataframe\n    df = {\n        'latitude': [32.320296, 33.590000, 31.932124, 23.692847, 34.037120, 28.986355, 27.158507, 31.630000, 34.680000, 34.020000, 30.421440, 35.783621],\n        'longitude': [-6.380926, -7.610000, -4.424149, -15.938255, -5.002964, -10.057375, -13.207878, -8.000000, -1.910000, -6.830000, -9.583039, -5.809643],\n        'Region': row.index.to_list(),\n        'Ncases': list(row.values)\n    }\n    df = pd.DataFrame.from_dict(df)\n\n    # Create Map\n    fig = folium.Figure(width=800, height=500)\n    latitude, longitude = 29.852972, -12.763558\n    CovidMap = folium.Map(location=[latitude, longitude], zoom_start=5)\n    \n    # Add Title\n    title_html = f' <h3 align=\"center\" style=\"font-size:20px\"><b>Map of Covid-19 Cases in Morocco Regions By {DATE}<\/b><\/h3>'\n    CovidMap.get_root().html.add_child(folium.Element(title_html))\n    \n    for lat, lon, Region, Ncases in zip(df['latitude'], df['longitude'], df['Region'], df['Ncases']):\n        folium.CircleMarker(\n            [lat, lon],\n            radius=.1 * Ncases\/\/50,\n            popup = ('Region: ' + str(Region).capitalize() + '<br>'\n                     'Cases: ' + str(Ncases) + '<br>'),\n            color='red',\n            fill_color = \"red\",\n            fill=True,\n            fill_opacity=0.7\n            ).add_to(CovidMap)\n        \n    fig.add_child(CovidMap)\n    return fig\n    \nDATE = date.today() - timedelta(days=15)\nMapTweetLocations(DATE)","7eb8f77c":"DATE = date.today() - timedelta(days=2)\nMapTweetLocations(DATE)","4598384f":"# Regions with most new cases","23b53a21":"## References:\n* https:\/\/towardsdatascience.com\/data-visualization-with-python-folium-maps-a74231de9ef7\n* \n","beb9e1e6":"# -> To be continued ...","b30523b6":"## Covid19 in Morocco - Data Analysis\n\n![image.png](attachment:image.png)"}}