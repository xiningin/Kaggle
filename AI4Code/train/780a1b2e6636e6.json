{"cell_type":{"b8981d61":"code","20731709":"code","ab1e2ea9":"code","61505632":"code","6f131568":"code","56d8df52":"code","7215af62":"code","a25e7932":"code","4adfc862":"code","5af9ba41":"code","87ecd3bf":"code","7d11b1b0":"code","df4fc09b":"code","be38738a":"code","199439fa":"code","f382c149":"code","4bcd366d":"code","3cd41abc":"code","7a06cfff":"markdown","63ab3d28":"markdown"},"source":{"b8981d61":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","20731709":"train_features = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_features.csv\")\ntest_features = pd.read_csv(\"\/kaggle\/input\/lish-moa\/test_features.csv\")\ntrain_targets_scored = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_targets_scored.csv\")\ntrain_targets_nonscored = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_targets_nonscored.csv\")\nsample_submission = pd.read_csv(\"\/kaggle\/input\/lish-moa\/sample_submission.csv\")","ab1e2ea9":"train_features.head()","61505632":"train_targets_scored.head()","6f131568":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\ndescription = train_features.drop(columns=['cp_time']).describe().T.reset_index()","56d8df52":"def scatter_description(description, x, step=9):\n    plt.figure(figsize=(10,20))\n    ax = sns.scatterplot(x=x, y='index', data=description)\n    N = len(description)\n    ax.set_yticks(np.arange(0, N, step))\n    ax.set_yticklabels(description['index'].values[::step], fontsize=12)\n    ax.set_ylabel('index', fontsize=16)\n    ax.set_xlabel(x, fontsize=16)\n    ax.secondary_xaxis('top', functions=(lambda x: x, lambda x: x));","7215af62":"scatter_description(description, x='mean')","a25e7932":"scatter_description(description, x='std')","4adfc862":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import BayesianRidge\nfrom sklearn.base import clone\nfrom sklearn.preprocessing import OneHotEncoder\nfrom tqdm import tqdm\n\nclass MultitargetEnsemble():\n    def __init__(self,\n                 categorical_columns=[\"cp_type\", \"cp_time\", \"cp_dose\"],\n                 drop_columns=['sig_id'],\n                 base_model_g=ElasticNet(), \n                 base_model_c=BayesianRidge(),\n                 voting_strategy=\"mean\",\n                 clip_to_zero_low_level=0):\n        \n        self.categorical_columns = categorical_columns\n        self.drop_columns=drop_columns\n        self.base_model_g = base_model_g\n        self.base_model_c = base_model_c\n        self.clip_to_zero_low_level = clip_to_zero_low_level\n        \n        if voting_strategy == 'min':\n            self.voting_strategy = np.min\n        elif voting_strategy == 'max':\n            self.voting_strategy = np.max\n        elif voting_strategy == 'mean':\n            self.voting_strategy = np.mean\n        else:\n            raise NotImplementedError\n        \n    def _preprocess_features(self, features, sort=False):\n        train_categorical = features[self.categorical_columns]\n        train_features = features.drop(columns=self.categorical_columns)\n        if sort:\n            train_features = train_features.sort_values(by='sig_id')\n        train_features = train_features.drop(columns=['sig_id'])\n        \n        features_columns = train_features.columns\n        \n        g_columns = [col for col in features_columns if 'g' in col]\n        self.g_columns = g_columns\n        \n        c_columns = [col for col in features_columns if 'c' in col]\n        self.c_columns = c_columns\n        \n        \n\n        train_g = train_features[g_columns]\n        train_c = train_features[c_columns]\n        \n        ohe = OneHotEncoder(categories='auto')\n        categorical_OHE = ohe.fit_transform(train_categorical).toarray()\n        \n        TRAIN_g = pd.concat([train_g, pd.DataFrame(categorical_OHE)], axis=1)\n        TRAIN_c = pd.concat([train_c, pd.DataFrame(categorical_OHE)], axis=1)\n        return TRAIN_g, TRAIN_c\n\n    def fit(self, features, target, metric=mean_squared_error):\n        TRAIN_g, TRAIN_c = self._preprocess_features(features, sort=True)\n        TRAIN_g, TRAIN_c = np.array(TRAIN_g), np.array(TRAIN_c)\n        target = target.sort_values(by='sig_id').drop(columns=['sig_id'])\n        \n        self.g_models = []\n        self.c_models = []\n        self.target_columns = target.columns\n        clip_target = lambda x: np.clip(x, 0., 1.)\n        metrics_history = {'Columns':target.columns, 'G model':[], \"C model\":[], \"Total\":[]}\n        for col in tqdm(target.columns):\n            y = np.array(target[col])\n            g_estimator_i = clone(self.base_model_g)\n            g_estimator_i.fit(TRAIN_g, y)\n            g_prediction = g_estimator_i.predict(TRAIN_g)\n            \n            self.g_models.append(g_estimator_i)\n            \n            c_estimator_i = clone(self.base_model_c)\n            c_estimator_i.fit(TRAIN_c, y)\n            c_prediction = c_estimator_i.predict(TRAIN_c)\n            self.c_models.append(c_estimator_i)\n\n            total_prediction = self.voting_strategy(np.vstack([g_prediction, c_prediction]), axis=0)\n            metrics_history['G model'].append(metric(y, clip_target(g_prediction)))\n            metrics_history['C model'].append(metric(y, clip_target(c_prediction)))\n            total_prediction = clip_target(total_prediction)\n            total_prediction[total_prediction < self.clip_to_zero_low_level] = 0.\n            metrics_history['Total'].append(metric(y, total_prediction))\n        metrics_history = pd.DataFrame.from_dict(metrics_history)\n        return self, metrics_history\n    \n    def predict(self, features, hack_columns=None):\n        \n        prediction = {'sig_id': features['sig_id'].values}\n        features_g, features_c = self._preprocess_features(features)\n        \n        features_g, features_c = np.array(features_g), np.array(features_c)\n        for i in range(len(self.g_models)):\n            g_prediction = self.g_models[i].predict(features_g)\n            \n            c_prediction = self.c_models[i].predict(features_c)\n            total = self.voting_strategy(np.vstack([g_prediction, c_prediction]), axis=0) \n            total[total < self.clip_to_zero_low_level] = 0.\n            prediction[self.target_columns[i]] = total\n        return pd.DataFrame.from_dict(prediction)","5af9ba41":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = MultitargetEnsemble(base_model_g=RandomForestClassifier())\n_, train_history = model.fit(train_features, train_targets_scored)","87ecd3bf":"import seaborn as sns\n\ndef plot_metric(train_history, model=\"G model\", top_k=20, step=1):\n    fig, ax = plt.subplots(figsize=(10, 10), tight_layout=True)\n    indexes = np.argsort(train_history[model])\n    N = len(train_history['Columns'][:top_k])\n    columns_names = train_history['Columns'][indexes]\n    \n    ax.barh(columns_names[:top_k], train_history[model][indexes][-top_k:])\n    ax.set_yticks(np.arange(N-1, 0, -step)[:top_k])\n    ax.set_yticklabels(columns_names[::-step][:top_k], fontsize=12)\n    ax.secondary_xaxis('top', functions=(lambda x: x, lambda x: x))\n    ax.set_xlabel(\"MSE on target\", fontsize=14)\n    ax.set_ylabel(\"target\", fontsize=14);","7d11b1b0":"plot_metric(train_history)","df4fc09b":"plot_metric(train_history, \"C model\")","be38738a":"plot_metric(train_history, \"Total\")","199439fa":"submission = model.predict(test_features)\nsubmission.head()","f382c149":"submission.to_csv(\"submission.csv\", index=None)","4bcd366d":"target_description = train_targets_scored.describe()\ntarget_description","3cd41abc":"scatter_description(target_description.T.reset_index(), x='mean', step=2)","7a06cfff":"## Try to make ensemble of ensembles)","63ab3d28":"**EDA addition**"}}