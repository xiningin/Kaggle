{"cell_type":{"1b982de2":"code","4c7e06ab":"code","d46b4d84":"code","e3bea803":"code","bfe96657":"code","ee93e81b":"code","05a54262":"code","6571f84f":"code","5912b8d2":"code","238a37ca":"code","58aad3f5":"code","7ead9966":"code","88086af0":"code","81b12e83":"code","c450cf31":"code","ca2a7d76":"code","368f3457":"code","292349c4":"code","dbb83316":"code","9f08c5cd":"code","84b8bc68":"code","01064d55":"code","aa478027":"code","712a79d6":"code","d558190c":"code","b8fa3f93":"code","4a737797":"code","e28e5fd7":"code","007b2813":"code","16633424":"code","3773861d":"code","a138ef6e":"code","2b985b47":"code","3be92458":"code","515e1fa8":"code","47de1235":"code","4c622d2c":"code","23add06f":"code","a39af4b6":"markdown","b14767f7":"markdown","f3a87b6b":"markdown","c2ad0677":"markdown","f61d44d9":"markdown","1fca0de8":"markdown","1bdf841a":"markdown","4f74844d":"markdown","561ba7ca":"markdown","62c4b216":"markdown","d7a80df8":"markdown"},"source":{"1b982de2":"# import library and data\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import OneHotEncoder, MinMaxScaler, StandardScaler, PowerTransformer, LabelEncoder\nfrom sklearn.model_selection import cross_val_score, train_test_split, GridSearchCV\nfrom sklearn.metrics import f1_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n\ndf = pd.read_csv('..\/input\/adult-census-income\/adult.csv', engine='python')\ndf.head()","4c7e06ab":"df.info()","d46b4d84":"# check distribution of numeric features\ndf.describe()","e3bea803":"# check unique values\nfor col in df.columns:\n    print('{0} : {1}'.format(col, df[col].unique()))","bfe96657":"# check if the education and education num is consistent\nprint(np.shape(df['education'].unique()))\nprint(np.shape(df['education.num'].unique()))","ee93e81b":"# since education num column matches the education column perfectly, so drop the education column\ndf.drop(['education'], axis=1, inplace=True)","05a54262":"# count ? values for workclass, occupation, country\nprint('workclass with ?: ', np.sum(df['workclass'] == '?'))\nprint('occupation with ?: ', np.sum(df['occupation'] == '?'))\nprint('native.country with ?: ', np.sum(df['native.country'] == '?'))\n\n# count 0 values for capital gain and loss\nprint('gain with 0: ', np.sum(df['capital.gain'] == 0))\nprint('loss with 0: ', np.sum(df['capital.loss'] == 0))","6571f84f":"# Transform numeric features except for the hours into logarithmic scale\nnumeric_cols = ['age', 'fnlwgt', 'capital.gain', 'capital.loss', 'hours.per.week']\nfor col in numeric_cols[:-1]:\n    print('Skewness before transformation %s: %.4f'%(col, df[col].skew()))\n    if 0 in list(df[col]):\n        df[col] = np.log1p(df[col])\n    else:\n        df[col] = np.log(df[col])\n        \n    print('Skewness after transformation %s: %.4f'%(col, df[col].skew()))\n    print('=============================')","5912b8d2":"# Label Encoding for categorical features\ncat_features = ['workclass', 'occupation', 'marital.status', 'occupation', \n                'relationship', 'race', 'sex', 'native.country', 'income']\nfor cat_col in cat_features:\n    le = LabelEncoder()\n    df[cat_col] = le.fit_transform(df[cat_col])","238a37ca":"df.head()","58aad3f5":"# standard scaling\nfor num_cols in numeric_cols:\n    std = StandardScaler()\n    df[num_cols] = std.fit_transform(df[[num_cols]]).flatten()","7ead9966":"df.head()","88086af0":"# train_test_split\nX = df.drop(['income'], axis=1)\ny = df['income']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, \n                                                    shuffle=True, random_state=42, stratify=y)\n\nprint(np.shape(X_train))\nprint(np.shape(X_test))\nprint(np.shape(y_train))\nprint(np.shape(y_test))","81b12e83":"# model selection\nrf = RandomForestClassifier()\ngbc = GradientBoostingClassifier()\ndt = DecisionTreeClassifier()\n\n# Validation set\ntrain_x, val_x, train_y, val_y = train_test_split(X_train, y_train, shuffle=True, test_size=0.2, stratify=y_train)\n\nmodels = [rf, gbc, dt]\nfor model in models:\n    model.fit(train_x, train_y)\n    val_pred = model.predict(val_x)\n    accuracy = np.sum(val_pred == val_y) \/ val_y.shape[0]\n    f1 = f1_score(val_y, val_pred)\n    name = model.__class__.__name__\n    print('Model %s - Accuracy: %.4f, F1: %.4f'%(name, accuracy, f1))","c450cf31":"gbc.fit(X_train, y_train)\n\ny_pred = gbc.predict(X_test)\naccuracy = np.sum(y_test == y_pred) \/ y_test.shape[0]\nf1 = f1_score(y_test, y_pred)\n\nprint('Accuracy: %.4f, F1 score: %.4f'%(accuracy, f1))","ca2a7d76":"# # \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\n# import pandas as pd\n# import numpy as np\n# from sklearn.model_selection import train_test_split\n\n# def exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n#     if id_name == \"\":\n#         df = df.reset_index().rename(columns={\"index\": \"id\"})\n#         id_name = 'id'\n#     else:\n#         id_name = id_name\n    \n#     if null_name != \"\":\n#         df[df == null_name] = np.nan\n    \n#     X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n#     y_train = X_train[[id_name, target]]\n#     X_train = X_train.drop(columns=[id_name, target])\n#     y_test = X_test[[id_name, target]]\n#     X_test = X_test.drop(columns=[id_name, target])\n#     return X_train, X_test, y_train, y_test \n    \n# df = pd.read_csv(\"..\/input\/adult-census-income\/adult.csv\")\n# X_train, X_test, y_train, y_test = exam_data_load(df, target='income', null_name='?')\n\n# X_train.shape, X_test.shape, y_train.shape, y_test.shape","368f3457":"# \uc2dc\ud5d8\ud658\uacbd\uc5d0\uc11c\ub294 \uc544\ub798\uc640 \uac19\uc774 \uc81c\uacf5\ub428\n# import pandas as pd\n# X_test = pd.read_csv(\"data\/X_test.csv\")\n# X_train = pd.read_csv(\"data\/X_train.csv\")\n# y_train = pd.read_csv(\"data\/y_train.csv\")","292349c4":"# import pandas as pd\n# import numpy as np","dbb83316":"# # \ub370\uc774\ud130 \ud06c\uae30 \ud655\uc778\n# X_train.shape, X_test.shape, y_train.shape, y_test.shape","9f08c5cd":"# # \ub370\uc774\ud130 \ud655\uc778\n# X_train.head()","84b8bc68":"# # \ud0c0\uac9f \uc218 \ud655\uc778\n# y_train['income'].value_counts()","01064d55":"# # type\ud655\uc778\n# X_train.info()","aa478027":"# # \ud53c\ucc98 \uad6c\ubd84\n# # Numeric features\n# numeric_features = [\n#                     'age',\n#                     'fnlwgt', \n#                     'education.num',\n#                     'capital.gain', \n#                     'capital.loss', \n#                     'hours.per.week',                     \n#                    ]\n\n# # Categorical features\n# cat_features = [\n#                  'workclass',              \n#                  'education',            \n#                  'marital.status', \n#                  'occupation', \n#                  'relationship', \n#                  'race', \n#                  'sex',\n#                  'native.country'\n# ]","712a79d6":"# X_train[numeric_features].describe()","d558190c":"# X_train[cat_features].describe()","b8fa3f93":"# X_train.isnull().sum()","4a737797":"# X_test.isnull().sum()","e28e5fd7":"# X_train['workclass'].value_counts()","007b2813":"# X_train['occupation'].value_counts()","16633424":"# X_train['native.country'].value_counts()","3773861d":"# def data_fillna(df):\n#     df['workclass'] = df['workclass'].fillna(df['workclass'].mode()[0])\n#     df['occupation'] = df['occupation'].fillna(\"null\")\n#     df['native.country'] = df[\"native.country\"].fillna(df['native.country'].mode()[0])\n#     return df\n\n# X_train = data_fillna(X_train)\n# X_test = data_fillna(X_test)\n\n# X_train.isnull().sum()","a138ef6e":"# # \ub77c\ubca8\uc778\ucf54\ub529\n# from sklearn.preprocessing import LabelEncoder\n\n# all_df = pd.concat([X_train.assign(ind=\"train\"), X_test.assign(ind=\"test\")])\n# le = LabelEncoder()\n# all_df[cat_features] = all_df[cat_features].apply(le.fit_transform)\n\n# X_train = all_df[all_df['ind'] == 'train']\n# X_train = X_train.drop('ind',axis=1)\n# X_train\n\n# X_test = all_df[all_df['ind'] == 'test']\n# X_test = X_test.drop('ind',axis=1)\n# X_test","2b985b47":"# # \uc2a4\ucf00\uc77c\ub9c1\n# from sklearn.preprocessing import MinMaxScaler\n\n# scaler = MinMaxScaler()\n# X_train[numeric_features] = scaler.fit_transform(X_train[numeric_features])\n# X_test[numeric_features] = scaler.transform(X_test[numeric_features])\n# X_train","3be92458":"# # target\uac12 \ubcc0\uacbd\n# y = (y_train['income'] != '<=50K').astype(int)\n# y[:5]","515e1fa8":"# # \ud559\uc2b5\uc6a9 \ub370\uc774\ud130\uc640 \uac80\uc99d\uc6a9 \ub370\uc774\ud130\ub85c \uad6c\ubd84\n# from sklearn.model_selection import train_test_split\n# X_tr, X_val, y_tr, y_val = train_test_split(X_train, y, test_size=0.15, random_state=2021)\n# X_tr.shape, X_val.shape, y_tr.shape, y_val.shape","47de1235":"# from sklearn.tree import DecisionTreeClassifier\n# from sklearn.metrics import accuracy_score\n\n# model = DecisionTreeClassifier(random_state = 2022)\n# model.fit(X_tr, y_tr)\n# pred = model.predict(X_val)\n# print('accuracy score:', (accuracy_score(y_val, pred)))","4c622d2c":"# from sklearn.ensemble import RandomForestClassifier\n\n# model = RandomForestClassifier(random_state = 2022)\n# model.fit(X_tr, y_tr)\n# pred = model.predict(X_val)\n# print('accuracy score:', (accuracy_score(y_val, pred)))","23add06f":"# y_test = (y_test['income'] != '<=50K').astype(int)\n# pred = model.predict(X_test)\n\n# from sklearn.metrics import accuracy_score\n# print('accuracy score:', (accuracy_score(y_test, pred)))","a39af4b6":"## \ucc44\uc810 (\uc218\ud5d8\uc790\ub294 \ud655\uc778 \ubd88\uac00)","b14767f7":"## \uacb0\uce21\uce58 \ucc98\ub9ac","f3a87b6b":"## \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30","c2ad0677":"## \ubaa8\ub378 & \ud3c9\uac00","f61d44d9":"# \uc131\uc778 \uc778\uad6c\uc870\uc0ac \uc18c\ub4dd \uc608\uce21\n\n- age: \ub098\uc774\n- workclass: \uace0\uc6a9 \ud615\ud0dc\n- fnlwgt: \uc0ac\ub78c\uc758 \ub300\ud45c\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac00\uc911\uce58(final weight)\n- education: \uad50\uc721 \uc218\uc900\n- education.num: \uad50\uc721 \uc218\uc900 \uc218\uce58\n- marital.status: \uacb0\ud63c \uc0c1\ud0dc\n- occupation: \uc5c5\uc885\n- relationship: \uac00\uc871 \uad00\uacc4\n- race: \uc778\uc885\n- sex: \uc131\ubcc4\n- capital.gain: \uc591\ub3c4 \uc18c\ub4dd\n- capital.loss: \uc591\ub3c4 \uc190\uc2e4\n- hours.per.week: \uc8fc\ub2f9 \uadfc\ubb34 \uc2dc\uac04\n- native.country: \uad6d\uc801\n- income: \uc218\uc775 (\uc608\uce21\ud574\uc57c \ud558\ub294 \uac12)","1fca0de8":"- \uacb0\uce21\uce58\ub294 \ucd5c\ube48\uac12\uacfc \ucc28\uc774\uac00 \ud06c\uba74 \ucd5c\ube48\uac12\uc73c\ub85c \uac12\uc774 \ube44\uc2b7\ud558\uba74 \ubcc4\ub3c4\uc758 \uac12\uc73c\ub85c \ub300\uccb4\ud568","1bdf841a":"# \uc0ac\uc6a9\uc790 \ucf54\ub529","4f74844d":"## \ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1","561ba7ca":"## \uac80\uc99d\uc6a9 \ub370\uc774\ud130 \ubd84\ub9ac","62c4b216":"## EDA","d7a80df8":"## \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30(\uc0dd\ub7b5)"}}