{"cell_type":{"baa9a443":"code","f6a640d4":"code","1f06d6c9":"code","13e100ed":"code","13e19e97":"code","d65a2122":"code","666f66ea":"code","e9dde29a":"code","a9d1376a":"code","b2b74395":"code","43fbf12f":"code","ae79057a":"code","4fd4b940":"code","939eb58a":"code","78f68cba":"code","8e218eda":"code","1dd1d685":"code","8c524449":"code","93fb589e":"code","263d54f3":"code","e612d784":"code","0affda03":"code","9137d45c":"code","9b9afc0b":"code","0feca6d1":"code","38ab2f03":"code","8e28e7a7":"code","62812fd5":"code","c6b4faad":"code","32d6e801":"code","3cad9db0":"code","dc8a54ff":"markdown","8992f52e":"markdown","02043381":"markdown","c2b3d88f":"markdown","6423ba72":"markdown","cc607ce6":"markdown","1bdbcf5c":"markdown","0a71abf6":"markdown","742cea1d":"markdown","96d66bb0":"markdown","acbcca69":"markdown"},"source":{"baa9a443":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f6a640d4":"# Importing Data\nreviews = pd.read_csv('\/kaggle\/input\/trainings\/restaurant_reviews.csv')","1f06d6c9":"# Checking Data Format\nreviews.head(5)","13e100ed":"# Basic Data Cleaning\nreviews['text_temp'] = reviews['text'].str.split().str[1:].apply(' '.join) \nreviews['text_clean'] = reviews['text_temp'].str.lower().str.replace('[^a-z\\s]', '')","13e19e97":"# Checking Data Format\nreviews['text_clean']","d65a2122":"# Creating docs and adding column to \"reviews\" df\nimport nltk\nfrom nltk.stem import PorterStemmer\nstemmer = PorterStemmer()\nstopwords = nltk.corpus.stopwords.words('english')\nstopwords.remove('not')\nreviews_docs = []\nfor doc in reviews['text_clean']:\n    temp = [stemmer.stem(word) for word in doc.split(' ') if word not in stopwords]\n    reviews_doc = ' '.join(temp)\n    reviews_docs.append(reviews_doc)\nlen(reviews_docs)\nreviews['docs'] = np.array(reviews_docs)","666f66ea":"# Checking Data Format\nreviews['docs']","e9dde29a":"# Splitting docs\nwords = []\nfor doc in reviews['text_clean']:\n    word = doc.split(' ')\n    words.extend(word)\ntext = \" \".join(x for x in words)","a9d1376a":"# Imports\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud","b2b74395":"# Creating WordCloud\nplt.figure(figsize=[12,12])\nword_cloud = WordCloud(background_color = 'white').generate(text)\nplt.imshow(word_cloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.title('Wordcloud')\nplt.show()","43fbf12f":"# Imports\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer","ae79057a":"# Creating DTM with bigrams\nvectorizer = TfidfVectorizer(min_df=5, ngram_range=(2,2)).fit(reviews['docs'])\nuniq_terms = vectorizer.get_feature_names()","4fd4b940":"# Transforming docs\ndtm = vectorizer.transform(reviews['docs'])\ndf_dtm = pd.DataFrame(dtm.toarray(), columns=uniq_terms)\n","939eb58a":"# Checking Data format\ndf_dtm.head()","78f68cba":"# Creating Bar Chart\ndf_dtm.sum().sort_values(ascending=False).head(10)[::-1].plot.barh()","8e218eda":"# Imports\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer","1dd1d685":"# Applying Sentiment Analysis\nanalyzer = SentimentIntensityAnalyzer()\nreviews['sentence_polarity'] = reviews['docs'].apply(\n    lambda v: analyzer.polarity_scores(v)['compound'] )\nreviews['sentiment_vader'] = reviews['sentence_polarity'].apply(\n    lambda v: 'positive' if v>0 else 'negative' )\n","8c524449":"# Checking Value Counts\nprint(\"Number of positives and negaives:\")\nreviews['sentiment_vader'].value_counts().to_frame()","93fb589e":"# Creating Positive Word Cloud\npos_words = []\nfor doc in reviews.loc[reviews['sentiment_vader'] == 'positive', 'docs']:\n    word = doc.split(' ')\n    pos_words.extend(word)\n\ntext_pos = \" \".join(x for x in pos_words)\nplt.figure(figsize=[12,12])\nword_cloud = WordCloud(background_color = 'white').generate(text_pos)\nplt.imshow(word_cloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.title('Positive Wordcloud')\nplt.show()","263d54f3":"# Creating Negative Word Cloud\nneg_words = []\nfor doc in reviews.loc[reviews['sentiment_vader'] == 'negative', 'docs']:\n    word = doc.split(' ')\n    neg_words.extend(word)\n\ntext_neg = \" \".join(x for x in neg_words)\nplt.figure(figsize=[12,12])\nword_cloud = WordCloud(background_color = 'white').generate(text_neg)\nplt.imshow(word_cloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.title('Positive Wordcloud')\nplt.show()","e612d784":"# Imports\nfrom gensim.corpora import Dictionary","0affda03":"# Adding ids to word\nid2word = Dictionary(reviews['docs'].str.split(' '))","9137d45c":"# Creating Document of words\ndoc_bow = [id2word.doc2bow(doc) for doc in reviews['docs'].str.split(' ')]","9b9afc0b":"# Imports\nfrom gensim.models.ldamodel import LdaModel","0feca6d1":"# Creating Model with 4 topics\nmodel = LdaModel(corpus=doc_bow,\n                id2word=id2word,\n                random_state=1,\n                num_topics=4)","38ab2f03":"# Sample plot for 1 column\n# pd.DataFrame(model.get_topic_terms(0)).plot.barh()V","8e28e7a7":"# Bar Chart with their each topics and their high probable terms\nfor i in range(0,4): \n    words=[]\n    freq=[]\n    plt.figure()\n    for j in model.get_topic_terms(i):\n        words+=[id2word[j[0]]]\n        freq+=[j[1]]\n    df = pd.DataFrame({'word': words, 'Probability':freq})\n    df.plot.barh(x='word', y='Probability')","62812fd5":"model.get_topic_terms(0)\nmodel.print_topics()","c6b4faad":"topic_new = []\ntopic_new = pd.DataFrame(model.get_topic_terms(0), columns={'term', 'weight'})","32d6e801":"# Checking Topics\ntopic_new","3cad9db0":"### Thank You for your time.\nBy Rushabh Jaiswal (F04696)","dc8a54ff":"#### using `model.get_document_topics()` identify topic for each document and store the topic number in a new column","8992f52e":"## Basic text cleaning and create it as new columns.","02043381":"## Apply sentiment analysis using vader library. Identify total number of postive and negative words","c2b3d88f":"#### Create a wordcloud using reviews which are positive.","6423ba72":"## Create a wordcloud with most frequent words.","cc607ce6":"# Plotting Bar Chart \npd.DataFrame(model.get_topic_terms(0)).plot.barh()","1bdbcf5c":"#### using `model.get_topic_terms()` plot bar chart for each topic with high probable terms","0a71abf6":"## Apply topic modeling (num_topics=4) and do the following","742cea1d":"#### Create another wordcloud using reviews which are negative","96d66bb0":"## Use \"\/kaggle\/input\/trainings\/restaurant_reviews.csv\" file for the following exercises.","acbcca69":"## Create Document Term Matrix and plot top 10 bigrams using a bar chart."}}