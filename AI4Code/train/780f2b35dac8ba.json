{"cell_type":{"123a68d2":"code","1e68cacb":"code","194d0986":"code","b7fa399b":"code","7d031e2f":"code","cd438812":"code","4d77104a":"code","be3446c7":"code","4d26d45b":"code","baecde88":"code","33d7e214":"code","e6eb9900":"code","15a74e60":"code","2a93a969":"code","fcc16fee":"code","a3848029":"code","ee63277e":"code","dad6a329":"code","dcab2f2b":"code","f73edb18":"code","5066cbf4":"code","3fb3b8fa":"code","1bf53163":"code","8d4a66fb":"code","3af176af":"code","3b339351":"code","a20fae42":"code","0d8d5324":"code","c8033418":"markdown","1dccc254":"markdown","724cfbe9":"markdown","76c00c63":"markdown","796976d5":"markdown","61cd8df3":"markdown","b24a0360":"markdown","756f5835":"markdown","45b1bd31":"markdown","7ff6cdf2":"markdown","337212ec":"markdown","693ce3e4":"markdown"},"source":{"123a68d2":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport colorsys\nimport seaborn as sns\nimport warnings\nfrom datetime import datetime\n%matplotlib inline\nwarnings.simplefilter(\"ignore\")","1e68cacb":"Boston_15 = pd.read_csv('..\/input\/marathon_results_2015.csv', sep=',')\nBoston_16 = pd.read_csv('..\/input\/marathon_results_2016.csv', sep=',')\nBoston_17 = pd.read_csv('..\/input\/marathon_results_2017.csv', sep=',')\n# The total dataset:\nBoston_15_to_17 = pd.concat([Boston_15, Boston_16, Boston_17], ignore_index=True, sort=False).set_index('Name')\nBoston_15_to_17.head()","194d0986":"#Checking the existence of the null values in the dataset\nBoston_15_to_17.isnull().sum(axis=0)","b7fa399b":"Boston_15_to_17.columns","7d031e2f":"Boston = Boston_15_to_17.drop(['Pace','Unnamed: 0','Bib', 'Gender','Unnamed: 9', 'Division', 'State', 'Citizen','Proj Time','City', 'Unnamed: 8','5K','15K', '10K', '25K', '20K', 'Half', '30K', '35K', '40K', 'Overall'], axis='columns')\nBoston.head()","cd438812":"#Checking the existence of the null values in the dataset\nBoston.isnull().sum(axis=0)","4d77104a":"# Changing the str columns to time form \nBoston['Official Time'] = pd.to_timedelta(Boston['Official Time'])\n# Transforming the time in minutes:\nBoston['Official Time'] = Boston['Official Time'].astype('m8[m]').astype(np.int32)","be3446c7":"Boston.info()","4d26d45b":"Boston.describe()","baecde88":"print('The oldest person finishing the Boston Marathon 2015-2017 was {} years old.\\nThe youngest person was {} years old.'.format(Boston['Age'].max(), Boston['Age'].min()))","33d7e214":"plt.figure(figsize=(8,6))\nhage = sns.distplot(Boston.Age, color='g')\nhage.set_xlabel('Ages',fontdict= {'size':14})\nhage.set_ylabel(u'Distribution',fontdict= {'size':14})\nhage.set_title(u'Distribution of finishers for Ages',fontsize=18)\nplt.show()\nwarnings.simplefilter(\"ignore\")","e6eb9900":"plt.figure(figsize=(20,10))\nagecont = sns.countplot('Age',data=Boston, palette=sns.color_palette(\"RdPu\", n_colors=len(Boston['Age'].value_counts())))\nagecont.set_title('Ages Counting', fontsize=18)\nagecont.set_xlabel('Ages', fontdict= {'size':16})\nagecont.set_ylabel('Total of People', fontdict= {'size':16})\nplt.show()","15a74e60":"plt.figure(figsize=(25,25))\nd = sns.countplot(x='Age', hue='M\/F', data=Boston, palette={'F':'r','M':'b'}, saturation=0.6)\nd.set_title('Number of Finishers for Age and Gender', fontsize=25)\nd.set_xlabel('Ages',fontdict={'size':20})\nd.set_ylabel('Number of Finishers',fontdict={'size':20})\nd.legend(fontsize=16)\nplt.show()","2a93a969":"plt.figure(figsize=(6,6))\nl = Boston['M\/F'].value_counts().index\nplt.pie(Boston['M\/F'].value_counts(), colors =['b','r'], startangle = 90, autopct='%.2f', textprops=dict(color=\"w\"))\n#plt.axes().set_aspect('equal','datalim')\nplt.legend(l, loc='upper right')\nplt.title(\"Gender\",fontsize=18)\nplt.show()","fcc16fee":"Boston_1 = Boston.copy()\nbins = [17, 34, 39, 44, 49, 54, 59, 64, 69, 74, 79, 90]\nBoston_1['Ranges'] = pd.cut(Boston_1['Age'],bins,labels=[\"18-34\", \"35-39\", \"40-44\", \"45-49\", \"50-54\", \"55-59\", \"60-64\",\n                                          \"65-69\", \"70-74\", \"75-79\", \"< 80\"]) \n\nBoston_2 = pd.crosstab(Boston_1.Ranges,Boston_1['M\/F']).apply(lambda r: (r\/r.sum()) * 100 , axis=1)\n\nax1 = Boston_2.plot(kind = \"bar\", stacked = True, color = ['r','b'], figsize=(9,6),\n                      fontsize=12, position=0.5)\nax1.get_legend_handles_labels\nax1.legend(bbox_to_anchor = (1.3, 1))\nax1.set_xlabel('Age Ranges', fontdict={'size':14})\nax1.set_ylabel('Percentages (%)', fontdict={'size':14})\nax1.set_title('Gender Finishers x Age Ranges', fontsize=18)\nplt.show()","a3848029":"FM_mean = Boston.groupby('M\/F').mean()\nFM_mean","ee63277e":"print('The average age of the female finishers in Boston is {:.2f} years old.'.format(FM_mean['Age'][0]))\nprint('The average age of the male finishers in Boston is {:.2f} years old.'.format(FM_mean['Age'][1]))\nprint('The average finishing time of the female finishers in Boston is {:.2f} hours.'.format(FM_mean['Official Time'][0] \/ 60))\nprint('The average finishing time of the male finishers in Boston is {:.2f} hours.'.format(FM_mean['Official Time'][1] \/ 60))","dad6a329":"plt.figure(figsize=(12,10))\nBoston_copy = Boston.copy()\nBoston_copy = Boston_copy[Boston_copy['Age'].isin(range(0,85))]\n\nx = Boston_copy.Age\ny = Boston_copy['Official Time']\n\n\nplt.plot(x, y, '.')\nplt.xlabel(\"Age\", fontsize=16)\nplt.ylabel(\"Official Time (min)\",fontsize=16)\nplt.title(\"Official Time for Age\",fontsize=20)\nplt.show()","dcab2f2b":"# The mean of official time for the set of Age \nmean_age_time = Boston.groupby('Age').mean().set_index(np.arange(67))\nmean_age_time['Age'] = mean_age_time.index \nmean_age_time.head()","f73edb18":"# The median of official time for the set of Age \nmedian_age_time = Boston.groupby('Age').median().set_index(np.arange(67))\nmedian_age_time['Age'] = median_age_time.index \nmedian_age_time.head()","5066cbf4":"# Plotting the results\n\nplt.figure(figsize=(12,10))\n\nx = mean_age_time['Age']\ny = mean_age_time['Official Time']\n\nplt.plot(x, y, '.')\n\nxx = median_age_time['Age']\nyy = median_age_time['Official Time']\n\n\nplt.plot(xx, yy, '.', color = 'r')\n\n\nplt.xlabel(\"Age\", fontsize=16)\nplt.ylabel(\"Official Time (min)\",fontsize=16)\nplt.title(\"Official Time for Age\",fontsize=20)\nplt.legend(['Mean', 'Median'])\nplt.show()","3fb3b8fa":"from sklearn.linear_model import Ridge\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import train_test_split\nwarnings.simplefilter(\"ignore\", category=FutureWarning)","1bf53163":"# Defining the dependent and independent variables \nX = mean_age_time.drop(['Official Time'], axis=1)\nY = mean_age_time['Official Time']","8d4a66fb":"# Separeting the dataset in training and test datasets:\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.33, random_state = 42)\nprint(X_train.shape, X_test.shape, Y_train.shape, Y_test.shape)","3af176af":"# Constructing the model \nmodel = make_pipeline(PolynomialFeatures(degree=2), Ridge())\nmodel","3b339351":"# Training the model with the training variables:\nmodel.fit(X_train, Y_train)","a20fae42":"# We show to the model the unknown test variables, in order to predict the results. \n# Then we can compare to the respective Y_test dependent variable, and check the error of the model. \npred_test = model.predict(X_test)","0d8d5324":"# Plotting the error of the model:\nplt.figure(figsize=(8,6))\n#plt.scatter(pred_training, pred_training - Y_training, c = 'b', alpha = 0.5)\nplt.scatter(pred_test,  pred_test - Y_test, c = 'g', alpha = 0.5)\nplt.title(u\"The Model Error Function\", fontsize=15)\nplt.show()","c8033418":"# Data Analysis of the Boston Marathon 2015-2017","1dccc254":"# Distribution of finishers based on Ages","724cfbe9":"# Number of Finishers for Age","76c00c63":"As we can see from the plot above, using the total datas of the dataset, Boston, it is difficult to find a relation between age and performance.\n\nThen, we will consider the mean and median of the official time for each age.","796976d5":"Since the difference between the test data predicted by the model and the data that we expected to obtain are mostly close to zero, it can be said that the model considered revalues a good prediction of time by age of each athlete.","61cd8df3":"Therefore, we can observe that a polynomial approximation (such as a quadratic, cubic polinomials) seems to be the better way to relate Age and Official time. ","b24a0360":"The Boston Marathon finishers are mostly in the 35-50 age range.","756f5835":"The plots above show a significant female participation in the Boston Marathon. In particular, we can observe that up to the age of 38 the female participation is greater than the male participation. After this age the scenario reverses and the male participation overcomes the female participation. Around the age of 35 is the age that many women are preparing to get pregnant, this decline in participation can perhaps be explained by this.","45b1bd31":"# Age x Performance","7ff6cdf2":"# Dataset of the 2015-2017 Boston Marathon","337212ec":"# Gender Distribuition","693ce3e4":"# Predicting the Official Time"}}