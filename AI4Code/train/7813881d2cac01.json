{"cell_type":{"4c1ce42d":"code","302db299":"code","6b62a029":"code","730a409f":"code","a75bc5f4":"code","65b5345f":"code","88900cd5":"code","77f67372":"markdown","d58e1e25":"markdown","8d710d7c":"markdown","bceef03d":"markdown","c01d4a26":"markdown","1e8cad80":"markdown"},"source":{"4c1ce42d":"# libs\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom catboost import CatBoostRegressor","302db299":"# data\ndf_data = pd.read_csv('\/kaggle\/input\/petfinder-pawpularity-score\/train.csv')\ndf_cat_or_dog = pd.read_csv('\/kaggle\/input\/pawpularity-cat-or-dog\/cat_class.csv')\n\n# merge cat classifications\ndf_data = df_data.merge(df_cat_or_dog)\ndf_data['class'] = np.where(df_data['is_cat'] == 1, 'cat', 'dog')\ndel df_cat_or_dog\n\ndf_data[:1]","6b62a029":"# plot\nfig, ax = plt.subplots(figsize=(12, 4))\nsns.countplot(x='class', data=df_data)\nax.set_title(str(round(df_data['is_cat'].mean() * 100, 1)) + '% are cats.')\nplt.show()","730a409f":"# plot\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(20,5))\n\n# graph\nsns.kdeplot(df_data['Pawpularity'][(df_data['class'] == 'dog')], color='b', label='dog', ax=ax[0])\nsns.kdeplot(df_data['Pawpularity'][(df_data['class'] == 'cat')], color='r', label='cat', ax=ax[0])\nsns.violinplot(data=df_data, y='Pawpularity', x='class', ax=ax[1])\n\n# avgs\navg_dog = round(df_data['Pawpularity'][(df_data['class'] == 'dog')].mean(), 1)\navg_cat = round(df_data['Pawpularity'][(df_data['class'] == 'cat')].mean(), 1)\n\n# annotage\nax[0].set_title('avg pawpularity for cats: ' + str(avg_cat) + '%, dogs: ' + str(avg_dog) + '%.')\nax[0].legend(loc=\"upper left\")\nplt.show()","a75bc5f4":"# split data\ndf_train, df_test = train_test_split(df_data, test_size=0.3, random_state=42)\nprint ('train:', df_train.shape)\nprint ('test:', df_test.shape)\n\n# vars\ny_target = 'Pawpularity'\nx_cols = ['Eyes','Face','Near','Action','Accessory','Group','Collage','Human','Occlusion','Info','Blur']\nx_cols_class = ['Eyes','Face','Near','Action','Accessory','Group','Collage','Human','Occlusion','Info','Blur','is_cat'] # with class","65b5345f":"# train without classifications.\nmodel = CatBoostRegressor(iterations=100000, verbose=False, eval_metric='RMSE')\nmodel.fit(df_train[x_cols], df_train[y_target], eval_set=[(df_test[x_cols], df_test[y_target])], early_stopping_rounds=10)\nprint ('baseline: ', np.sqrt(mean_squared_error(df_test[y_target], model.predict(df_test[x_cols]))))","88900cd5":"# train with classifications.\nmodel = CatBoostRegressor(iterations=100000, verbose=False, eval_metric='RMSE')\nmodel.fit(df_train[x_cols_class], df_train[y_target], eval_set=[(df_test[x_cols_class], df_test[y_target])], early_stopping_rounds=10)\nprint ('with classifications: ', np.sqrt(mean_squared_error(df_test[y_target], model.predict(df_test[x_cols_class]))))","77f67372":"you can see straight away, dogs get a more favorable pawpularity!","d58e1e25":"## counts.","8d710d7c":"## prediction.","bceef03d":"a slight performance improvement including the classifications (which is everything on the leaderboard).\n\nnext steps:\n- predict the classifications.\n- include within the pawpularity prediction.\n- build an image model.","c01d4a26":"# note:\n- there may be some miss-classifications, if you spot any - let me know and i will correct the dataset.\n- if you use the classifications, tag me in your projects (im interested to see what you come up with).\n- spoiler: there is a difference in the pawpularity between cats vs dogs.","1e8cad80":"## pawpularity \/ distribution."}}