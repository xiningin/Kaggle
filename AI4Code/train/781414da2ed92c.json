{"cell_type":{"462d662a":"code","97a63efb":"code","8c18c028":"code","8878202d":"code","1787adc7":"code","9692bfc7":"code","d81bc00a":"code","34583b9d":"markdown","bea3466f":"markdown","8a328838":"markdown","8b0d99d7":"markdown","f4e149c8":"markdown","8d069af9":"markdown","7d26aaa5":"markdown"},"source":{"462d662a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","97a63efb":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\n# from sklearn.preprocessing import ","8c18c028":"X_train = pd.read_csv('\/kaggle\/input\/ecommerce-shipping-data-competition-form\/X_train.csv')\nX_test = pd.read_csv('\/kaggle\/input\/ecommerce-shipping-data-competition-form\/X_test.csv')\ny_train = pd.read_csv('\/kaggle\/input\/ecommerce-shipping-data-competition-form\/y_train.csv')\ny_test = pd.read_csv('\/kaggle\/input\/ecommerce-shipping-data-competition-form\/test_label\/y_test.csv')","8878202d":"# \ub370\uc774\ud130 \ud615\ud0dc \ud655\uc778\nprint(X_train.info())\nprint('===================================================================================')\n\n# \uc218\uce58\ud615 \ubcc0\uc218 \uac12 \uac1c\uc694 \ud655\uc778\nprint(X_train.describe())\nprint('===================================================================================')\n\n# String \ubcc0\uc218 unique \uac12 \ud655\uc778 \nprint('Warehouse_block: ', X_train.Warehouse_block.unique())\nprint('Mode_of_Shipment: ', X_train.Mode_of_Shipment.unique())\nprint('Customer_care_calls: ', X_train.Customer_care_calls.unique())\nprint('Product_importance: ', X_train.Product_importance.unique())\nprint('Gender: ', X_train.Gender.unique())\nprint('===================================================================================')\n\n# Customer_care_calls \ubcc0\uc218\uc758 \uacbd\uc6b0 $7\uc744 7\ub85c \ubcc0\ud658\ud574\uc11c \uc218\uce58\ud615 \ubcc0\uc218\ub85c \uc0ac\uc6a9\nX_train.Customer_care_calls =  X_train.Customer_care_calls.replace('$7', 7).astype(int)\nprint('(\uc7ac\ud655\uc778)Customer_care_calls: ', X_train.Customer_care_calls.unique())\n\nX_test.Customer_care_calls =  X_test.Customer_care_calls.replace('$7', 7).astype(int)\n","1787adc7":"# \uacb0\uce21\uce58 \ud655\uc778\nprint('\ud2b8\ub808\uc774\ub2dd \ub370\uc774\ud130 \uacb0\uce21\uce58 \uac1c\uc218: ', X_train.isnull().sum().sum())\nprint('(\ucc38\uace0)\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uacb0\uce21\uce58 \uac1c\uc218: ', X_test.isnull().sum().sum())","9692bfc7":"le_w = LabelEncoder()\nle_m = LabelEncoder()\nle_p = LabelEncoder()\nle_g = LabelEncoder()\n\nX_train['Warehouse_block'] = le_w.fit_transform(X_train['Warehouse_block'])\nX_train['Mode_of_Shipment'] = le_m.fit_transform(X_train['Mode_of_Shipment'])\nX_train['Product_importance'] = le_p.fit_transform(X_train['Product_importance'])\nX_train['Gender'] = le_g.fit_transform(X_train['Gender'])\n\n\nX_test['Warehouse_block'] = le_w.transform(X_test['Warehouse_block'])\nX_test['Mode_of_Shipment'] = le_m.transform(X_test['Mode_of_Shipment'])\nX_test['Product_importance'] = le_p.transform(X_test['Product_importance'])\nX_test['Gender'] = le_g.transform(X_test['Gender'])\n\nprint('Warehouse_block: ', X_train.Warehouse_block.unique())\nprint('Mode_of_Shipment: ', X_train.Mode_of_Shipment.unique())\nprint('Product_importance: ', X_train.Product_importance.unique())\nprint('Gender: ', X_train.Gender.unique())","d81bc00a":"rf_clf = RandomForestClassifier(random_state=1)\n\nrf_clf.fit(X_train.drop(['ID'], axis=1), y_train['Reached.on.Time_Y.N'])\n\npred = ","34583b9d":"#### \uacb0\uce21\uce58 \ucc98\ub9ac","bea3466f":"#### \ub370\uc774\ud130 \uac1c\uc694","8a328838":"#### \uba85\ubaa9\ud615 \ubcc0\uc218 \uc218\uce58\ud654","8b0d99d7":"## \ubaa8\ub378\ub9c1","f4e149c8":"### \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","8d069af9":"### \ud328\ud0a4\uc9c0 \ubd88\ub7ec\uc624\uae30","7d26aaa5":"## \ub370\uc774\ud130 \uc804\ucc98\ub9ac"}}