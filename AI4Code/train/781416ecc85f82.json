{"cell_type":{"9c222cef":"code","f68bbb91":"code","85adc7f6":"code","f2e996e1":"code","9a997b82":"code","97c70133":"code","19daa4e5":"code","6c25908a":"code","05b11c7d":"code","5baac6cd":"code","b18fb1e1":"code","21987359":"code","01bcad76":"code","311a4633":"code","2c6aa106":"code","f328c728":"markdown","9187af05":"markdown","606d160b":"markdown","e2b1ed5c":"markdown","275d114d":"markdown","ede3dc2c":"markdown","6e6e8e11":"markdown"},"source":{"9c222cef":"import pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.dummy import DummyClassifier\n\nfrom itertools import product","f68bbb91":"df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-dec-2021\/train.csv', index_col='Id').reset_index(drop=True)\n\nclass5_index = None\nfor index, val in enumerate(df['Cover_Type']):\n    if val == 5:\n        class5_index = index\n\ndf = df.drop([class5_index])\n\nX = df.drop(['Cover_Type'], axis=1)\ny = df['Cover_Type']","85adc7f6":"X = X.drop(['Soil_Type7', 'Soil_Type15'], axis=1)\nnumerical = []\ncategorical = []\nfor col in X.columns:\n    if X[col].nunique() <= 2:\n        categorical.append(col)\n    else:\n        numerical.append(col)\n        \ngaussian_features = ['Elevation', 'Hillshade_3pm']\nfor feature in gaussian_features:\n    numerical.remove(feature)","f2e996e1":"X_train, X_val, y_train, y_val = train_test_split(\n    X,\n    y,\n    test_size=0.2,\n    random_state=42,\n    stratify=y\n)","9a997b82":"X_test = pd.read_csv('\/kaggle\/input\/tabular-playground-series-dec-2021\/test.csv', index_col='Id')\nX_test = X_test.drop(['Soil_Type7', 'Soil_Type15'], axis=1)","97c70133":"def create_new_pipeline(params):\n    numerical_gaussian_transformer = SimpleImputer(strategy='mean')\n    numerical_transformer = SimpleImputer(strategy='median')\n    categorical_transformer = SimpleImputer(strategy='most_frequent')\n\n    preprocessor = ColumnTransformer(\n    transformers=[\n        ('gaussian', numerical_gaussian_transformer, gaussian_features),\n        ('numerical', numerical_transformer, numerical),\n        ('categorical', categorical_transformer, categorical)\n    ])\n\n    scaler = StandardScaler()\n\n    model = DummyClassifier(\n        random_state=42,\n        **params\n    )\n\n    pipeline = Pipeline(\n    steps=[\n           ('preprocessor', preprocessor),\n           ('scaler', scaler),\n           ('model', model)\n          ]\n    )\n\n    return pipeline","19daa4e5":"search_space = {\n    'strategy': ['stratified', 'most_frequent', 'prior', 'uniform']\n}","6c25908a":"max_score = 0\nbest_params = {}\n\nfor val in product(*search_space.values()):\n    params = {}\n    for i, param in enumerate(search_space.keys()):\n        params[param] = val[i]\n    print(params)\n\n    clf = create_new_pipeline(params)\n\n    clf.fit(X_train, y_train)\n\n    score = clf.score(X_val, y_val)\n    if score > max_score:\n        max_score = score\n        best_params = params\n        print(f'Best score: {score}')","05b11c7d":"best_params","5baac6cd":"max_score","b18fb1e1":"clf = create_new_pipeline(best_params)","21987359":"clf.fit(X, y)","01bcad76":"clf.score(X, y)","311a4633":"submission = pd.DataFrame(\n    {'Id': X_test.index,\n     'Cover_Type': clf.predict(X_test)}\n)\n\nsubmission","2c6aa106":"submission.to_csv('submission.csv', index=False)","f328c728":"# Preparing data","9187af05":"# Hyperparameter Tuning","606d160b":"# Training Final Model","e2b1ed5c":"In this notebook I will create a boilerplate code for the competition. I will use the insights gained from the [EDA](https:\/\/www.kaggle.com\/aniketsharma00411\/tpsdec21-exploratory-data-analysis\/) here.\n\nMy other notebooks:\n - [Exploratory Data Analysis](https:\/\/www.kaggle.com\/aniketsharma00411\/tpsdec21-exploratory-data-analysis\/)\n - [Sample Submission](https:\/\/www.kaggle.com\/aniketsharma00411\/tpsdec21-sample-submission\/)","275d114d":"# Making Predictions","ede3dc2c":"# Creating a Pipeline","6e6e8e11":"# Initialization"}}