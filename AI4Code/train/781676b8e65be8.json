{"cell_type":{"5a6478e6":"code","f5d79f6e":"code","06f43d91":"code","e85be90d":"code","082b2df7":"code","ca66dd52":"code","985e5d58":"code","ce6c5f90":"code","2c00cbb3":"code","5db1f05c":"code","64147990":"code","f18b7bc3":"code","3f6e2de7":"code","f7016966":"code","abec5810":"code","37b02a02":"code","01eb7ec5":"code","fbede658":"code","c861334a":"code","cbdaee17":"code","2514a708":"code","5fea3645":"code","b40221f9":"code","89403c1c":"code","ebaad575":"code","4eca0fa8":"code","48df11ad":"code","57d7911d":"code","2ecb6688":"code","cf1c90da":"code","d5ac7273":"code","ebe20e17":"markdown","f4a6f0d3":"markdown","9cebe22c":"markdown","3a22dcbd":"markdown","d41d3a26":"markdown","b7a6734e":"markdown","0f81880d":"markdown","07b9869b":"markdown","c0e4d119":"markdown","2419df63":"markdown"},"source":{"5a6478e6":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","f5d79f6e":"df=pd.read_csv('..\/input\/advertising-dataset\/advertising.csv')\ndf.head()","06f43d91":"df.isnull().sum()","e85be90d":"df.describe()","082b2df7":"df.shape","ca66dd52":"df.dtypes","985e5d58":"df.corr()","ce6c5f90":"import seaborn as sns\nfrom matplotlib import pyplot as plt","2c00cbb3":"plt.title(\"Mutual information with respect to features\")\n\nplt.xlabel('Sales')\nplt.ylabel('TV Radio and Newspaper')\n\nplt.hist(df)\nplt.show()","5db1f05c":"sns.pairplot(df, x_vars=['TV','Radio','Newspaper'], y_vars='Sales', height=7, aspect=0.7, kind='reg')\nplt.show()","64147990":"plt.figure(figsize=(12,8))\nsns.heatmap(df.corr(),annot=True)\n\nplt.show()","f18b7bc3":"X=df.drop('Sales',axis=1)\ny=df['Sales']","3f6e2de7":"X","f7016966":"# check the type and shape of X\nprint(type(X))\nprint(X.shape)","abec5810":"Y = df.Sales\nY.head()","37b02a02":"print(type(Y))\nprint(Y.shape)","01eb7ec5":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score","fbede658":"X_train, X_test, y_train, y_test = train_test_split(X, Y,test_size=0.25, random_state=1)","c861334a":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","cbdaee17":"from sklearn.linear_model import LinearRegression","2514a708":"lin_reg=LinearRegression()","5fea3645":"lin_reg.fit(X_train,y_train)","b40221f9":"cv_linear = cross_val_score(estimator = lin_reg, X = X_train, y = y_train, cv = 9)\n\ny_pred_linear_train = lin_reg.predict(X_train)\nr2_score_linear_train = r2_score(y_train, y_pred_linear_train)\n\ny_pred_linear_test = lin_reg.predict(X_test)\nr2_score_linear_test = r2_score(y_test, y_pred_linear_test)\n\nrmse_linear = (np.sqrt(mean_squared_error(y_test, y_pred_linear_test)))\nprint(\"CV: \", cv_linear.mean())\nprint('R2_score (train): ', r2_score_linear_train)\nprint('R2_score (test): ', r2_score_linear_test)\nprint(\"RMSE: \", rmse_linear)","89403c1c":"from sklearn.preprocessing import PolynomialFeatures","ebaad575":"poly_reg = PolynomialFeatures(degree = 2)","4eca0fa8":"X_poly = poly_reg.fit_transform(X_train)\npoly_reg.fit(X_poly, y_train)\nregressor_poly2 = LinearRegression()\nregressor_poly2.fit(X_poly, y_train)","48df11ad":"cv_poly2 = cross_val_score(estimator = regressor_poly2, X = X_train, y = y_train, cv = 9)\n\ny_pred_poly2_train = regressor_poly2.predict(poly_reg.fit_transform(X_train))\nr2_score_poly2_train = r2_score(y_train, y_pred_poly2_train)\n\ny_pred_poly2_test = regressor_poly2.predict(poly_reg.fit_transform(X_test))\nr2_score_poly2_test = r2_score(y_test, y_pred_poly2_test)\n\nrmse_poly2 = (np.sqrt(mean_squared_error(y_test, y_pred_poly2_test)))\nprint('CV: ', cv_poly2.mean())\nprint('R2_score (train): ', r2_score_poly2_train)\nprint('R2_score (test): ', r2_score_poly2_test)\nprint(\"RMSE: \", rmse_poly2)","57d7911d":"models = [('Linear Regression', rmse_linear, r2_score_linear_train, r2_score_linear_test, cv_linear.mean()),\n          ('Polynomial Regression ', rmse_poly2, r2_score_poly2_train, r2_score_poly2_test, cv_poly2.mean()),\n         ]   ","2ecb6688":"predict = pd.DataFrame(data = models, columns=['Model', 'RMSE', 'R2_Score(training)', 'R2_Score(test)','Cross-Validation'])\npredict","cf1c90da":"f, axes = plt.subplots(2,1, figsize=(8,8))\npredict.sort_values(by=['R2_Score(training)'], ascending=False, inplace=True)\nsns.barplot(x='R2_Score(training)', y='Model', data = predict, ax = axes[0])\naxes[0].set_xlabel('R2 Score (Training)', size=10)\naxes[0].set_ylabel('Model')\naxes[0].set_xlim(0,1.0)\npredict.sort_values(by=['R2_Score(test)'], ascending=False, inplace=True)\nsns.barplot(x='R2_Score(test)', y='Model', data = predict, ax = axes[1])\naxes[1].set_xlabel('R2 Score (Test)', size=10)\naxes[1].set_ylabel('Model')\naxes[1].set_xlim(0,1.0)\nplt.show()","d5ac7273":"predict.sort_values(by=['RMSE'], ascending=False, inplace=True)\nf, axe = plt.subplots(1,1, figsize=(6,6))\nsns.barplot(x='Model', y='RMSE', data=predict, ax = axe)\naxe.set_xlabel('Model', size=16)\naxe.set_ylabel('RMSE', size=16)\n\nplt.show()","ebe20e17":"# Exploring Relationships between Predictors and Response EDA","f4a6f0d3":"# Compare two Regressions Results","9cebe22c":"# Now Visualization","3a22dcbd":"# Now Visulaization for Best Model","d41d3a26":"# Now drop Sales Columns","b7a6734e":"# Now built Linear Reg","0f81880d":"# Now Train Test Split","07b9869b":"# Now Fit PolyNomialRegression","c0e4d119":"# Now Import PolyNomialRegression\n","2419df63":"# Now Fit the model"}}