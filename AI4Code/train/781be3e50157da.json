{"cell_type":{"c4dfcfd5":"code","c176bbc7":"code","e8650350":"code","22d34461":"code","644067b5":"code","ce203441":"code","6d82dd3b":"code","e624fa9d":"code","df5b50b8":"markdown","741024a5":"markdown","0f417338":"markdown"},"source":{"c4dfcfd5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c176bbc7":"url='https:\/\/raw.githubusercontent.com\/imamanmehrotra\/Datasets\/main\/income2_kmeans.csv'","e8650350":"df=pd.read_csv(url)\nprint(df.shape)\ndf.head()","22d34461":"from sklearn.cluster import DBSCAN\nimport  matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nfrom collections import Counter","644067b5":"X=df[['Annual Income','Spending_Score']]","ce203441":"dbs=DBSCAN(eps=8,min_samples=4, metric='euclidean') #Denotes the epsilon value(radius value for the cluster) and the Minimum Points.\nmodel=dbs.fit(df[['Annual Income','Spending_Score']])\ny_pred=model.labels_\ny_pred\ndf['Cluster_Number']=y_pred\ndf['Cluster_Number'].replace(-1,'Outlier', inplace=True)","6d82dd3b":"print('There are',len(df['Cluster_Number'].unique()),'different Clusters and their Counts are mentioned and shown below \\n')\n\nprint(Counter(df['Cluster_Number']))\npx.histogram(df['Cluster_Number'],color=df.Cluster_Number)","e624fa9d":"px.scatter(data_frame=df,x='Annual Income',y='Spending_Score', color='Cluster_Number')","df5b50b8":"## So from DBSCAN implementation, we have got 8 Unique Clusters. Let's vizualize them:","741024a5":"## Let's import the required Libraries","0f417338":"# We can play around with Epsilon value and Min_Samples Value(Min points) and cluster the data according to our usecase. We can also use the manhattan distance for calculation, if that evaluates the cluster better"}}