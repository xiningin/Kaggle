{"cell_type":{"8bc511f8":"code","66c55167":"code","37d03ec1":"code","926368ea":"code","808cf80e":"code","eaa01638":"code","9d938dd0":"code","7254b890":"code","33191b15":"code","4aa75284":"code","9d93fe2a":"code","3ee2e4e4":"code","757b2ed2":"code","642d90f7":"code","374cbe69":"code","02cf7ae0":"code","429b1006":"markdown","c45e9b5f":"markdown","74786cc1":"markdown","4eb5311e":"markdown","41f9cfbe":"markdown","d2ae20b8":"markdown","485ff4d0":"markdown","74d17482":"markdown","5b2610df":"markdown","27740ab7":"markdown"},"source":{"8bc511f8":"import numpy as np\nimport pandas as pd","66c55167":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","37d03ec1":"drop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)","926368ea":"train.head()","808cf80e":"train.columns","eaa01638":"def getColumnsExceptOneColumn(df,col):\n    return train.loc[:, train.columns != col].columns.tolist()","9d938dd0":"target_col = \"Survived\"\ny = train[target_col]\n\nfeatures = getColumnsExceptOneColumn(train,target_col)\n\n\nX = train[features]\nX_test = test[features]","7254b890":"str_list = [] # empty list to contain columns with strings\nnum_list = []\nfor colname, colvalue in X.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)","33191b15":"str_list","4aa75284":"num_list","9d93fe2a":"from sklearn.ensemble import BaggingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\nbag_clf = BaggingClassifier(\n    DecisionTreeClassifier(), n_estimators=2000,\n    max_samples=100,  oob_score=True,bootstrap=True, random_state=42)","3ee2e4e4":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\n\nfrom sklearn.model_selection import train_test_split\n\nnumeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())])\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, num_list),\n        ('cat', categorical_transformer, str_list)])\nclf = Pipeline(steps=[('preprocessor', preprocessor),(\"model\", bag_clf)])\nclf.fit(X, y)","757b2ed2":"bag_clf.oob_score_","642d90f7":"from sklearn import datasets, linear_model\nfrom sklearn.model_selection import cross_val_score\n\nrestul_val = cross_val_score(clf, X, y, cv=5)\nrestul_val","374cbe69":"predictions = clf.predict(X_test)","02cf7ae0":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = predictions\nsubmission.to_csv('submission.csv', index=False)","429b1006":"# Delete Columns","c45e9b5f":"# Load Data","74786cc1":"# Bagging Model ","4eb5311e":"# Auto Pipeline \n## 1.1 number (n\/a data process + scaling)\n## 1.2 category (n\/a data process + onehot encoding)\n## 2 estimator fit ","41f9cfbe":"# Submission","d2ae20b8":"# Set Train data and target \/ Set Test data","485ff4d0":"# predict test data","74d17482":"# Devide Column ","5b2610df":"# oob score","27740ab7":"# evaluate train data "}}