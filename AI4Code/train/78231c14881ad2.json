{"cell_type":{"40afd0e6":"code","b2370a76":"code","f5906d52":"code","dc1c939b":"code","84f8ac5e":"code","8d321b07":"code","ff94ef6e":"code","0cd3e068":"code","93e4eb33":"code","f56e2e0e":"code","708cbac9":"code","c17f76a0":"code","0ed7df0f":"code","bb413ae1":"code","eba1ed82":"code","546603e5":"markdown","f4244d81":"markdown","7173f35e":"markdown","6e814efc":"markdown","07467d49":"markdown","8898bab2":"markdown","1d24b8f6":"markdown","6ca351bf":"markdown","ea346a4b":"markdown","cc7cf16e":"markdown"},"source":{"40afd0e6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","b2370a76":"csvData = pd.read_csv(\"..\/input\/kc_house_data.csv\")\ncsvData.head()","f5906d52":"csvData.dtypes","dc1c939b":"data = csvData.loc[:,[\"bedrooms\",\"bathrooms\",\"sqft_living\",\"floors\",\"yr_built\"]]\nlabel = csvData[\"price\"]\nprint(data.shape)","84f8ac5e":"from sklearn.model_selection import train_test_split\ntrainSet, validateSet, trainLabel, validateLabel = train_test_split(data, label, test_size=1\/3, random_state = 0)\nprint(trainSet.shape, validateSet.shape, trainLabel.shape, validateLabel.shape)\n","8d321b07":"plt.scatter(data[\"sqft_living\"], label)\nplt.xlabel(\"sqft\")\nplt.ylabel(\"price\")\nplt.show()","ff94ef6e":"data[\"sqft_living\"].hist()\nplt.show()","0cd3e068":"from sklearn.linear_model import LinearRegression\nclassifier = LinearRegression()\nclassifier.fit(trainSet, trainLabel)","93e4eb33":"#print(list(zip(trainSet.columns, np.transpose(classifier.coef_))))\n\npd.DataFrame(list(zip(trainSet.columns, np.transpose(classifier.coef_))))","f56e2e0e":"classifier.intercept_","708cbac9":"#\u4e00\u4e2a\u623f\u5b50\uff0c3\u4e2a\u5367\u5ba4\uff0c2\u4e2a\u536b\u751f\u95f4\uff0c2500sqft\uff0c2\u5c42\u697c\uff0c\u9884\u6d4b\u623f\u4ef7\nfloor1 = classifier.predict([[1,1,1200,1,1987]])\nfloor2 = classifier.predict([[1,1,1200,2,1987]])\nprint(floor1 - floor2)","c17f76a0":"predictions = classifier.predict(trainSet)\n\nprint( ((trainLabel - predictions)* (trainLabel - predictions)).sum()\/len(trainSet) )\nprint( ((trainLabel - predictions)**2).sum()\/len(trainSet) )\n\npd.DataFrame({\"Predictions\":predictions, \"Real\":trainLabel.values}).head()","0ed7df0f":"(abs(predictions-trainLabel)\/trainLabel).sum() \/ len(trainLabel)","bb413ae1":"predtest = classifier.predict(validateSet)\n((predtest-validateLabel)**2).sum() \/ len(validateSet)","eba1ed82":"(abs(predtest-validateLabel)\/validateLabel).sum() \/ len(validateLabel)","546603e5":"\u8bad\u7ec3\u96c6\u4e0a\u7684\u5747\u65b9\u5deeMSE","f4244d81":"\u83b7\u5f972:1\u7684\u8bad\u7ec3\uff1a\u6d4b\u8bd5\u6570\u636e\u6bd4\u4f8b","7173f35e":"\u5e73\u5747\u76f8\u5bf9\u8bef\u5dee","6e814efc":"\u89c2\u5bdf\u751f\u6d3b\u9762\u79ef\u5206\u5e03","07467d49":"\u7528xtrain\u548cytrain\u8bad\u7ec3\u6a21\u578b","8898bab2":"\u89c2\u5bdf\u623f\u4ef7\u548c\u751f\u6d3b\u9762\u79ef\u7684\u5173\u7cfb","1d24b8f6":"\u8bad\u7ec3\u96c6\u5408\u4e0a\u7684MSE","6ca351bf":"\u83b7\u5f97\u81ea\u53d8\u91cfX\u548c\u56e0\u53d8\u91cfY","ea346a4b":"# Linear Regression\u9884\u6d4b\u623f\u4ef7","cc7cf16e":"\u4ece..\/input\/kc_house_data.csv\u6587\u4ef6\u4e2d\u8bfb\u5165\u6570\u636e"}}