{"cell_type":{"46d4b15f":"code","12a9c6ec":"code","e3660399":"code","8a0e25f5":"code","f84c312e":"code","abfb4909":"code","b1d0b47e":"code","3da20dbc":"code","e2cf007c":"code","73c112b7":"code","4bf25536":"code","8e903256":"code","71965944":"code","463a49ee":"code","f6f55415":"code","db297e3e":"code","ddca40a8":"code","a3397d9f":"code","971a50f9":"code","c6f84c4e":"code","ced51893":"code","9f1dc8b2":"code","30ec74b7":"code","fa565c4c":"code","f111fa33":"code","3364a839":"code","1a3822db":"code","7fa52e74":"code","17705eec":"code","06ca4923":"markdown","8b47824d":"markdown","8b56ba48":"markdown","df26291b":"markdown","5df4c66f":"markdown","24c384ed":"markdown","0eb7b2db":"markdown","92c708b6":"markdown","84a06140":"markdown","9e798fed":"markdown","4d0ff6d6":"markdown","25ed0eb3":"markdown","051626e7":"markdown","dc58e55c":"markdown","5d15bc30":"markdown","491f39ff":"markdown","44b14a64":"markdown","2b216121":"markdown","f4f70ff0":"markdown","b9bb5aae":"markdown","45d2633e":"markdown"},"source":{"46d4b15f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","12a9c6ec":"df_train=pd.read_csv('\/kaggle\/input\/av-healthcare-analytics-ii\/healthcare\/train_data.csv')\ndf_test=pd.read_csv('\/kaggle\/input\/av-healthcare-analytics-ii\/healthcare\/test_data.csv')","e3660399":"print(df_train.dtypes)","8a0e25f5":"df_train=df_train.drop(columns=['case_id','patientid'])\ny_submit_1=df_test['case_id'].values # storing for final submission\ndf_test=df_test.drop(columns=['case_id','patientid'])","f84c312e":"df_train.describe()","abfb4909":"df_test.describe()","b1d0b47e":"print(df_train.isna().sum())","3da20dbc":"print(df_test.isna().sum())","e2cf007c":"print(df_train['Bed Grade'].unique())\n\nprint(df_train['City_Code_Patient'].unique())","73c112b7":"df_train['Bed Grade']=df_train['Bed Grade'].replace(np.nan,2)\ndf_test['Bed Grade']=df_test['Bed Grade'].replace(np.nan,2)\n\ndf_train['City_Code_Patient']=df_train['City_Code_Patient'].replace(np.nan,7)\ndf_test['City_Code_Patient']=df_test['City_Code_Patient'].replace(np.nan,7)","4bf25536":"print(df_train.isna().sum())\nprint(df_test.isna().sum())","8e903256":"import plotly.express as px\nfig = px.histogram(df_train, x=\"Hospital_code\")\nfig.show()","71965944":"import plotly.express as px\nfig = px.histogram(df_test, x=\"Hospital_code\")\nfig.show()","463a49ee":"import plotly.express as px\nfig = px.histogram(df_train, x=\"Hospital_type_code\").update_xaxes(categoryorder=\"total descending\")\nfig.show()","f6f55415":"import plotly.express as px\nfig = px.histogram(df_test, x=\"Hospital_type_code\").update_xaxes(categoryorder=\"total descending\")\nfig.show()","db297e3e":"import plotly.express as px\nfig = px.histogram(df_train, x=\"Hospital_region_code\").update_xaxes(categoryorder=\"total descending\")\nfig.show()\n\nimport plotly.express as px\nfig = px.histogram(df_test, x=\"Hospital_region_code\").update_xaxes(categoryorder=\"total descending\")\nfig.show()","ddca40a8":"import plotly.express as px\nfig = px.histogram(df_train, x=\"Department\").update_xaxes(categoryorder=\"total descending\")\nfig.show()\n\nimport plotly.express as px\nfig = px.histogram(df_test, x=\"Department\").update_xaxes(categoryorder=\"total descending\")\nfig.show()","a3397d9f":"import plotly.express as px\nfig = px.histogram(df_train, x=\"Ward_Type\").update_xaxes(categoryorder=\"total descending\")\nfig.show()\n\nimport plotly.express as px\nfig = px.histogram(df_test, x=\"Ward_Type\").update_xaxes(categoryorder=\"total descending\")\nfig.show()","971a50f9":"import plotly.express as px\nfig = px.histogram(df_train, x=\"Type of Admission\").update_xaxes(categoryorder=\"total descending\").update_xaxes(categoryorder=\"total descending\")\nfig.show()\n\nimport plotly.express as px\nfig = px.histogram(df_test, x=\"Type of Admission\").update_xaxes(categoryorder=\"total descending\")\nfig.show()","c6f84c4e":"import plotly.express as px\nfig = px.histogram(df_train, x=\"Severity of Illness\").update_xaxes(categoryorder=\"total descending\")\nfig.show()\n\nimport plotly.express as px\nfig = px.histogram(df_test, x=\"Severity of Illness\").update_xaxes(categoryorder=\"total descending\")\nfig.show()","ced51893":"import plotly.express as px\nfig = px.histogram(df_train, x=\"Age\").update_xaxes(categoryorder=\"total descending\")\nfig.show()\n\nimport plotly.express as px\nfig = px.histogram(df_test, x=\"Age\").update_xaxes(categoryorder=\"total descending\")\nfig.show()","9f1dc8b2":"import plotly.express as px\nfig = px.histogram(df_train, x=\"Stay\").update_xaxes(categoryorder=\"total descending\")\nfig.show()","30ec74b7":"import seaborn as sns\nsns.set(style=\"white\")\n\ng=sns.barplot(y=\"Stay\", x=\"Admission_Deposit\", data=df_train,order=['0-10','11-20','21-30','31-40','41-50','51-60','61-70','71-80','81-90','91-100','More than 100 Days'])\n","fa565c4c":"import seaborn as sns\nsns.set(style=\"white\")\n\ng=sns.barplot(y=\"Stay\", x=\"Visitors with Patient\", data=df_train,order=['0-10','11-20','21-30','31-40','41-50','51-60','61-70','71-80','81-90','91-100','More than 100 Days'])\n","f111fa33":"df_train[\"Stay\"].unique()","3364a839":"df_train[\"Age\"].unique()","1a3822db":"y_val=df_train.groupby(['Age','Stay']).count().reset_index()","7fa52e74":"y_val['count']=y_val['Hospital_code']","17705eec":"import plotly.express as px\ndf = px.data.gapminder()\n\nfig = px.scatter(y_val, x=\"Age\", y=\"Stay\",\n      size=\"count\")\nfig.show()","06ca4923":"Inference: Hospital code 26 having highest count in both Train and Test data","8b47824d":"# **Data type of Feature Columns**","8b56ba48":"* Hospital Code","df26291b":"**Inference** :\n\n* Case_Id and Patient_Id can be removed from dataset\n* Bed Grade and City_Code_Patient are float but it can be taken as int\n* All the object type features need to be label encoded later for training models","5df4c66f":"Replacing Nan values by mean","24c384ed":"* Severity of Illness","0eb7b2db":"* Hospital Type Code","92c708b6":"# **Univariate Analysis**","84a06140":"* Stay (Target Variable)","9e798fed":"Let us visualize the features against the Target variable","4d0ff6d6":"# **Bivariate analysis of target with feature columns**","25ed0eb3":"* Hospital Region Distribution","051626e7":"* Age","dc58e55c":"* Department Distribution","5d15bc30":"# **List of Feature Columns**\n\n* **Case_Id** : Storing Unique ids with respect to cases\n* **Hospital_Code** : Unique Code for Hospitals in which particular case is being investigated\n* **Hospital_type_code** : Unique Code for Type of Hospitals\n* **Hospital_region_code** : Region of Hospitals\n* **Available Extra Rooms in Hospital** : No. of extra rooms available\n* **Department** : Department overlooking the case\n* **Ward_Type** : Unique code for ward type\n* **Ward_Facility_Code** : Unique code for ward facility\n* **Bed Grade** : Condition for Bed in Hospital\n* **Patient_Id** : Patient id undergoing current case\n* **City_Code_Patient** : City code for the patient\n* **Type_of_Admission** : Admission type registered by hospital\n* **Severity of illness** : severity recorded at time of admission\n* **Visitors with Patient** : No. of visitors with patient\n* **Age** : Age of the patient\n* **Admission_Deposit** : Deposit at admission time\n* **Stay** : Target Variable Stay which depicts no. of days the patient stayed at hospital\n\n\n**Using Test Data we need to predict the no. of days patient will stay at hospital**","491f39ff":"# **Calculating no. of empty data**","44b14a64":"**Inference:** Understandably, more visitors determine more serious cases and in the situation the patient needs his\/her beloved for some motivation. This trend is so true","2b216121":"* Type of Admission","f4f70ff0":"**Inference**: Much of the data lies for patients Aging between (31-40) and their days of Stay being between (21-30) days","b9bb5aae":"* Ward Type","45d2633e":"**Inference**: When the Admission Deposit tends to high values, patients are discharged early probably. \\\nSigns of corruption? Not at all good."}}