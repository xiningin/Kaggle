{"cell_type":{"a5f32b2f":"code","9b4a8784":"code","47d72157":"code","3f5413d1":"code","6dd296d6":"code","19d6fa51":"code","f50ade73":"code","a81309d1":"code","fa42b361":"code","6d109331":"code","c76a5dc8":"code","45320d60":"code","f030e861":"code","2151ddea":"code","fb56f156":"code","88f65663":"code","d6b8fdaa":"code","c717e8ae":"code","b6636d30":"code","eb343d58":"code","5a9d11b8":"code","cb9c03e6":"code","8f5a2b3e":"code","33bfd654":"code","28952c49":"code","75da3fff":"code","4e0c6877":"code","437899e2":"code","a34d33c5":"code","bf6c57de":"code","60551875":"code","afb6fa14":"code","03e04d5c":"code","726e0ed5":"code","91371af5":"code","54b7c529":"code","c9736e97":"code","95180043":"code","294d20e6":"code","55ec0584":"code","f439d78d":"code","bc8f3841":"code","5e5faaf1":"code","4f2d67f5":"code","117e49a1":"code","6ae08c7e":"code","dbb9873d":"markdown","19c66cfb":"markdown","bb83fa9e":"markdown","c140cba0":"markdown","8562bcbe":"markdown","b70fe653":"markdown","bb0f05fb":"markdown","1dc9fc07":"markdown","bdd3401e":"markdown","bd2eada0":"markdown","6488883e":"markdown","9fbb76bd":"markdown","6fe6c7a1":"markdown","9a3f19fc":"markdown","a59c43e4":"markdown"},"source":{"a5f32b2f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b4a8784":"import numpy as np\nimport pandas as pd\n\nfrom matplotlib import pyplot as plt\nimport seaborn as sns \nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import Dense, Conv2D, Activation, MaxPool2D, Flatten, Dropout, BatchNormalization\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.callbacks import ModelCheckpoint","47d72157":"Face_data=pd.read_csv('..\/input\/age-gender-and-ethnicity-face-data-csv\/age_gender.csv')\ndf=Face_data.copy()\ndf.head(2)","3f5413d1":"df.info()","6dd296d6":"df.shape","19d6fa51":"df.isnull().values.any()","f50ade73":"df.isnull().sum()","a81309d1":"df.describe().T","fa42b361":"df[df.duplicated() == True]","6d109331":"fig = go.Figure(data=[go.Histogram(x=df['age'],  # To get Horizontal plot ,change axis \n                                  marker_color=\"Bisque\",\n                      xbins=dict(\n                      start=0, #start range of bin\n                      end=120,  #end range of bin\n                      size=10    #size of bin\n                      ))])\nfig.update_layout(title=\"Distribution Of Age\",xaxis_title=\"Age\",yaxis_title=\"Counts\",title_x=0.5)\nfig.show()","c76a5dc8":"df_age=df['age'].value_counts().reset_index().rename(columns={'index':'age','age':'Count'})\n\nfig = go.Figure(go.Bar(\n    x=df_age['age'],y=df_age['Count'],\n    marker={'color': df_age['Count'], \n    'colorscale': 'Viridis'},  \n    text=df_age['Count'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Age Of Distribution',xaxis_title=\"Age\",yaxis_title=\" Count \",title_x=0.5)\nfig.show()","45320d60":"fig = go.Figure()\nfig.add_trace(go.Box(\n    y=df['age'],\n    boxmean='sd',\n    name=\"Age\",\n    jitter=0.3,\n    pointpos=-1.8,\n    boxpoints='outliers', # represent outliers points\n    marker_color='rgb(7,40,89)',\n    line_color='rgb(7,40,89)'\n))\nfig.update_layout(title_text='Age Of Distribution',xaxis_title=\"Age\",yaxis_title=\"Age Count \",title_x=0.5)\nfig.show()","f030e861":"plt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize'] = (15, 5)\nsns.distplot(df['age'], color = 'cyan')\nplt.title('Distribution of Age', fontsize = 20)\nplt.show()","2151ddea":"print(\"Avg Age: \" + str(df[\"age\"].mean()))\nprint(\"Max Age: \" + str(df[\"age\"].max()))\nprint(\"Min Age: \" + str(df[\"age\"].min()))\nprint(\"Median Age: \" + str(df[\"age\"].median()))\n","fb56f156":"\ndf_ethnicity=df['ethnicity'].value_counts().reset_index().rename(columns={'index':'ethnicity','ethnicity':'count'}).sort_values('count',ascending=\"False\")\n\nfig = go.Figure(go.Bar(y=df_ethnicity['ethnicity'], x=df_ethnicity['count'], # Need to revert x and y axis\n                      orientation=\"h\")) # default orentation value is \"v\" - vertical ,we need to change it as orientation=\"h\"\nfig.update_layout(title_text=' Ethnicity  Frequency ',xaxis_title=\"Count\",yaxis_title=\"Ethnicity\",title_x=0.5)\nfig.show()","88f65663":"df_ethnicity=df['ethnicity'].value_counts().to_frame().reset_index().rename(columns={'index':'ethnicity','ethnicity':'count'})\n\ncolors=['cyan','royalblue','blue','darkblue',\"darkcyan\"]\nfig = go.Figure([go.Pie(labels=df_ethnicity['ethnicity'], values=df_ethnicity['count'])])\nfig.update_traces(hoverinfo='label+percent', textinfo='percent+value', textfont_size=15,\n                 marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.update_layout(title=\"Ethnicity Distribution\",title_x=0.5)\nfig.show()","d6b8fdaa":"df_gender=df['gender'].value_counts().to_frame().reset_index().rename(columns={'index':'gender','gender':'count'})\n\n\nfig = go.Figure([go.Pie(labels=df_gender['gender'], values=df_gender['count'])])\n\nfig.update_traces(hoverinfo='label+percent', textinfo='value+percent', textfont_size=12,insidetextorientation='radial')\n\nfig.update_layout(title=\"Gender Count\",title_x=0.5)\nfig.show()","c717e8ae":"ax = sns.countplot(x=\"gender\", data=df)\nplt.ylabel('Count')\nplt.xlabel('Gender')\nplt.title('Gender Count');","b6636d30":"df_rece_gender=df.groupby(by =['gender','ethnicity'])['img_name'].count().to_frame().reset_index().rename(columns={'ethnicity':'Ethnicity','img_name':'Count'})\n\ndf_rece_gender['gender']=df_rece_gender['gender'].astype('category')\n\n\n\n\nfig = px.bar(df_rece_gender, x=\"Ethnicity\", y=\"Count\",color=\"gender\",barmode=\"group\",\n             \n             )\nfig.update_layout(title_text='Ethnicity with Gender',title_x=0.5)\nfig.show()","eb343d58":"df_pixels = df.pixels.str.split(\" \").tolist() \ndf_pixels = pd.DataFrame(df_pixels, dtype=int)\ndf_images = df_pixels.values\ndf_images = df_images.astype(np.float)\n\nprint(df_images.shape)","5a9d11b8":"def show(img):\n    show_image = img.reshape(48,48)\n    \n    plt.axis('off')\n    plt.imshow(show_image, cmap='gray')","cb9c03e6":"show(df_images[1000])","8f5a2b3e":"plt.figure(0, figsize=(12,6))\nfor i in range(1,13):\n  plt.subplot(3, 4, i)\n  plt.axis('off')\n\n  image = df_images[i+i*2].reshape(48,48)\n  plt.imshow(image, cmap='gray')\n\nplt.tight_layout()\nplt.show()","33bfd654":"df_pixels = df.pixels.str.split(\" \").tolist() \ndf_pixels = pd.DataFrame(df_pixels, dtype=int)\ndf_images = df_pixels.values\ndf_images = df_images.astype(np.float)\n","28952c49":"y=df['ethnicity']\ny.head()","75da3fff":"clas_number=y.unique()\nclas_number=len(clas_number)\nclas_number","4e0c6877":"X=df_images\n\n#normalizing pixels data\nX=X\/255\n","437899e2":"X_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=35\n)","a34d33c5":"X_train = X_train.reshape(-1, 48, 48, 1)\nX_test = X_test.reshape(-1, 48, 48, 1)","bf6c57de":"print('X_Train:', X_train.shape)\nprint('X_Test:', X_test.shape)","60551875":"print('y_Train:', y_train.shape)\nprint('y_Test:', y_test.shape)","afb6fa14":"model = Sequential()\n\n#1. LAYER\n\nmodel.add(Conv2D(32, 3, data_format=\"channels_last\", kernel_initializer=\"he_normal\", input_shape=(48,48,1)))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\n\n#2. LAYER\n\nmodel.add(Conv2D(64, 3))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=2))\n\n\n### 3. LAYER\nmodel.add(Conv2D(32, 3))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=2))\n \n\n### Full Connection layer\nmodel.add(Flatten())\nmodel.add(Dense(64))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.4))\n\n### Out Layer\n\nmodel.add(Dense(5))\nmodel.add(Activation('softmax')) \n\nmodel.compile(optimizer='rmsprop',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\nmodel.summary()\n\n\n\n\n","03e04d5c":"epochs = 20\nbatchSize =100","726e0ed5":"checkpoint = ModelCheckpoint(filepath='model_ethnicity.h5', monitor=\"val_accuracy\", save_best_only=True, verbose=1)","91371af5":"hist = model.fit(X_train, y_train,\n                 epochs=epochs,\n                 shuffle=True,\n                 batch_size=batchSize,\n                 validation_data=(X_test, y_test),\n                 callbacks=[checkpoint],\n                 verbose=2)","54b7c529":"plt.figure(figsize=(14,3))\nplt.subplot(1, 2, 1)\nplt.suptitle('Traning', fontsize=10)\nplt.ylabel('Loss', fontsize=16)\nplt.plot(hist.history['loss'], color ='r', label='Training Loss')\nplt.plot(hist.history['val_loss'], color ='b', label='Validation Loss')\nplt.legend(loc='upper right')\n\n\nplt.subplot(1, 2, 2)\nplt.ylabel('Accuracy', fontsize=16)\nplt.plot(hist.history['accuracy'], color ='g', label='Training Accuracy')\nplt.plot(hist.history['val_accuracy'], color ='m', label='Validation Accuracy')\nplt.legend(loc='lower right')\n\nplt.show()\n","c9736e97":"loss, acc = model.evaluate(X_test,y_test,verbose=0)\nprint('Test loss: {}'.format(loss))\nprint('Test Accuracy: {}'.format(acc))","95180043":"y = df['gender']\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.22, random_state=35\n)","294d20e6":"X_train = X_train.reshape(-1, 48, 48, 1)\nX_test = X_test.reshape(-1, 48, 48, 1)","55ec0584":"print('X_Train:', X_train.shape)\nprint('X_Test:', X_test.shape)","f439d78d":"print('y_Train:', y_train.shape)\nprint('y_Test:', y_test.shape)","bc8f3841":"model = Sequential()\n\n#1. LAYER\n\nmodel.add(Conv2D(32, 3, kernel_initializer=\"he_normal\", input_shape=(48,48,1)))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\n\n#2. LAYER\n\nmodel.add(Conv2D(64, 3))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=2))\n\n\n### 3. LAYER\nmodel.add(Conv2D(32, 3))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=2))\n \n\n### Full Connection layer\nmodel.add(Flatten())\nmodel.add(Dense(128))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.4))\n\n### Out Layer\n\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid')) \n\nmodel.compile(optimizer='sgd',\n              loss=tf.keras.losses.BinaryCrossentropy(),\n              metrics=['accuracy'])\n\nmodel.summary()\n","5e5faaf1":"checkpoint = ModelCheckpoint(filepath='modelgender.h5', monitor=\"val_accuracy\", save_best_only=True, verbose=1)","4f2d67f5":"hist = model.fit(X_train, y_train,\n                 epochs=epochs,\n                 shuffle=True,\n                 batch_size=batchSize,\n                 validation_data=(X_test, y_test),\n                 callbacks=[checkpoint],\n                 verbose=2)","117e49a1":"plt.figure(figsize=(14,3))\nplt.subplot(1, 2, 1)\nplt.suptitle('Traning', fontsize=10)\nplt.ylabel('Loss', fontsize=16)\nplt.plot(hist.history['loss'], color ='r', label='Training Loss')\nplt.plot(hist.history['val_loss'], color ='b', label='Validation Loss')\nplt.legend(loc='upper right')\n\n\nplt.subplot(1, 2, 2)\nplt.ylabel('Accuracy', fontsize=16)\nplt.plot(hist.history['accuracy'], color ='g', label='Training Accuracy')\nplt.plot(hist.history['val_accuracy'], color ='m', label='Validation Accuracy')\nplt.legend(loc='lower right')\n\nplt.show()","6ae08c7e":"loss, acc = model.evaluate(X_test,y_test,verbose=0)\nprint('Test loss: {}'.format(loss))\nprint('Test Accuracy: {}'.format(acc))","dbb9873d":"# <a id='1'> 1. Importing Libraries and Dataset<\/a>","19c66cfb":"# Table of contents\n- <a href='#0'>  Dataset Introduction <\/a> \n- <a href='#1'>1. Importing Libraries and Dataset <\/a> \n- <a href='#2'>2. Data Analysis <\/a> \n- <a  href='#3'>3.Distribution Of Age <\/a> \n- <a href='#4'>4. Ethnicity Frequency  <\/a> \n- <a href='#5'>5. Gender <\/a>\n- <a href='#6'>6. Sample Images <\/a>\n- <a href='#7'>7.Ethnicity Model <\/a>\n- <a href='#8'>8.Gender Model <\/a>\n- <a href='#9'>9.EndNote <\/a>","bb83fa9e":"* More work coming...(Age Mdoel)","c140cba0":" # <a id='2'> 2.Data Analysis <\/a>","8562bcbe":"# <a id='6'> 6.Sample Images  <\/a>","b70fe653":"## Model","bb0f05fb":"# <a id='5'> 5.Gender  <\/a>","1dc9fc07":"# <a id='3'> 3.Distribution Of Age<\/a>","bdd3401e":"<font size=\"+2\" color=\"LIGHTSEAGREEN\"><b>My Other Kernels<\/b><\/font><br>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/lego-transfer-cnn-classification\" class=\"btn btn-primary\" style=\"color:white;\">Lego Transfer-CNN Classification<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/book-review-ratings-data-analysis-visualization\" class=\"btn btn-primary\" style=\"color:white;\">Book Review Ratings Analysis & Visualization<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/insurance-prediction-lgbm-gbm-xgboost-eda\" class=\"btn btn-primary\" style=\"color:white;\">Insurance Prediction- LGBM,GBM,XGBoost EDA<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/fish-market-data-visualisation-machine-learning\" class=\"btn btn-primary\" style=\"color:white;\">Fish Market Data Visualisation & Machine Learning<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/seabron-plotly-for-beginners\" class=\"btn btn-primary\" style=\"color:white;\">Seabron & Plotly For Beginners<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/basketball-players-stats-data-visualisation\" class=\"btn btn-primary\" style=\"color:white;\">Basketball Players Stats Data Visualisation<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/women-s-football-results-visualization\" class=\"btn btn-primary\" style=\"color:white;\">Women's Football Results Visualization<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/us-police-shootings-data-visualisation\" class=\"btn btn-primary\" style=\"color:white;\">Us Police Shootings Data Visualisation<\/a>\n","bd2eada0":"# <a id='0'> Dataset Introduction <\/a>\n\n\nAge=Age of the person in the image <br>\nEthnicity=Specifies the ethnicity of the person <br>\nGender=Gender of the person <br>\n0=Male   1=Female <br>\nPixels=Array to String of the image pixels <br>\n\n![](https:\/\/media.giphy.com\/media\/26BRNLvVCOmcR3S80\/giphy.gif)","6488883e":"# <a id='4'> 4.Ethnicity  Frequency<\/a>","9fbb76bd":"## Model","6fe6c7a1":"## <a id='9'> <font color=\"LIGHTSEAGREEN\" size=+2.5><b>End Note<\/b><\/font> <\/a>\n\nI hope you enjoyed my kernel.If you like this notebook, an Upvote would be great ! :)\n\nI am new with data science. Please comments me your feedbacks to help me improve myself.\n\nThanks for your time","9a3f19fc":"# <a id='7'> 7.Ethnicity Model  <\/a>","a59c43e4":"# <a id='8'> 8.Gender  Model  <\/a>"}}