{"cell_type":{"a9f6856e":"code","4471598b":"code","159bb644":"code","f07d9478":"code","2e0d9ac6":"code","2e4aa9a7":"code","71cbf46c":"code","d6ac42c3":"code","f388d821":"code","ba58af8d":"code","338031c5":"code","48dcac40":"code","993119f9":"code","3115a747":"code","44591708":"code","dcdcd0d0":"code","c93e084e":"code","ee7ebd7c":"code","b6bb2fa5":"code","62dd50fd":"code","de4d9a75":"code","49dc54e5":"code","b535fa37":"code","b2afa460":"code","999df36e":"code","029cfc33":"code","58959289":"code","bbb8c4aa":"code","3e55c967":"code","b6fc4f97":"code","e00e6005":"code","69748e2c":"code","06e00e61":"code","799ee96c":"code","6006e017":"code","37ab94a2":"code","21f7ea12":"code","26f5c2b3":"code","e4b6f549":"code","3bf5e213":"code","fd6d346c":"code","2b074082":"code","287cf90d":"code","640fafbd":"markdown","19bedff4":"markdown","261b3c6d":"markdown","544a9e6f":"markdown","80987568":"markdown","a73bdeb5":"markdown"},"source":{"a9f6856e":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport seaborn as sns\nimport ast\nfrom sklearn.cluster import KMeans\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot, plot\ninit_notebook_mode(connected=True)\nimport timeit\n\n\nimport os\n\n\nfiles_wanted = ['movies_metadata.csv']\nfile_paths = list()\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n     for filename in filenames:\n            if filename in files_wanted:\n                file_paths.append(str(dirname + \"\/\" + filename))\nmeta_df = pd.read_csv(file_paths[0], low_memory=False)","4471598b":"meta_df.head()","159bb644":"#Sat\u0131r ve s\u00fctun say\u0131s\u0131 bilgilerini verir\nmeta_df.shape","f07d9478":"print(meta_df.dtypes,\"\\n\")","2e0d9ac6":"missing_values_count = meta_df.isnull().sum()\n\nprint(missing_values_count)","2e4aa9a7":"total_cells = np.product(meta_df.shape)\ntotal_missing = missing_values_count.sum()\n\n#kay\u0131p verilerin t\u00fcm verilere g\u00f6re y\u00fczdesi\npercent_missing = (total_missing\/total_cells) * 100\nprint(\"%\",percent_missing)","71cbf46c":"meta_df.drop(['belongs_to_collection', 'homepage', 'tagline', 'poster_path', 'overview', 'imdb_id', 'spoken_languages'], inplace=True, axis=1)\n\ncolumn_changes = ['production_companies', 'production_countries', 'genres']\n\njson_shrinker_dict = dict({'production_companies': list(), 'production_countries': list(), 'genres': list()})\n\nmeta_df.dropna(inplace=True)","d6ac42c3":"missing_values_count = meta_df.isnull().sum()\n\nprint(missing_values_count)","f388d821":"meta_df.sample(5)","ba58af8d":"import ast","338031c5":"for col in column_changes:\n    if col == 'production_companies':\n        for i in meta_df[col]:\n            i = ast.literal_eval(i)\n            if len(i) < 1:\n                json_shrinker_dict['production_companies'].append(None)\n\n            for element in i:\n                json_shrinker_dict['production_companies'].append(element['name'])\n                break\n    elif col == 'production_countries':\n        for i in meta_df[col]:\n            i = ast.literal_eval(i)\n            if len(i) < 1:\n                json_shrinker_dict['production_countries'].append(None)\n            for element in i:\n                json_shrinker_dict['production_countries'].append(element['iso_3166_1'])\n                break\n    else:\n        for i in meta_df[col]:\n            i = ast.literal_eval(i)\n            if len(i) < 1:\n                json_shrinker_dict['genres'].append(None)\n\n            for element in i:\n                json_shrinker_dict['genres'].append(element['name'])\n                break\n\nfor i in column_changes:\n    meta_df[i] = json_shrinker_dict[i]\n\nmeta_df.dropna(inplace=True)\n\nmeta_df['budget'] = meta_df['budget'].astype(int)","48dcac40":"meta_df.head()","993119f9":"meta_df.describe()","3115a747":"meta_df['release_date'] = pd.to_datetime(meta_df['release_date'], errors='coerce')\nmeta_df['year'] = meta_df['release_date'].dt.year","44591708":"meta_df.year.value_counts(dropna = False).sort_index().plot(kind='barh', color = 'lightsteelblue', figsize=(20,25))","dcdcd0d0":"#meta_df.year.value_counts(dropna = False).sort_index().plot(kind='barh', color = 'lightsteelblue', figsize=(20,25))","c93e084e":"cmap = sns.diverging_palette(230, 20, as_cmap=True)\n\ncorrelations = meta_df.corr()\nf, ax = plt.subplots(figsize=(10,6))\nsns.heatmap(correlations, annot= True, cmap=cmap, linewidth=.5)","ee7ebd7c":"meta_df.hist(bins=30,figsize=(15,8),color='g')","b6bb2fa5":"import plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot, plot\ninit_notebook_mode(connected=True)","62dd50fd":"fig = px.scatter(meta_df, x='budget', y='revenue', hover_data=['title'], color='genres', width=800, height=800)\nfig.update_layout(\n    title='The Relationship between Budget and Revenue',\n    xaxis_title='Budget',\n    yaxis_title='Revenue',\n    font=dict(\n        size=16\n    )\n)\niplot(fig)","de4d9a75":"genre_budget_df = meta_df.groupby(['genres'])['budget'].sum()\n\nfig = go.Figure([\n    go.Bar(\n        x=genre_budget_df.index,\n        y=genre_budget_df.values,\n        text=genre_budget_df.values,\n        textposition='auto',\n        marker_color=['#94447f',\n                      '#5796ef',\n                      '#8a59c0',\n                      '#288abf',\n                      '#0ab78d',\n                      '#4ed993',\n                      '#7d3970',\n                      '#b3dc67',\n                      '#dc560a',\n                      '#0079fe',\n                      '#98d3a8',\n                      '#d5105a',\n                      '#d04dcf',\n                      '#58c7a2',\n                      '#7bf1f8',\n                      '#244155',\n                      '#587b77',\n                      '#c64ac2',\n                      '#5e805d',\n                      '#ebab95']\n    )])\n\nfig.update_layout(\n    title='Her Film T\u00fcr\u00fc \u0130\u00e7in Film B\u00fct\u00e7elerinin Toplam\u0131',\n    xaxis_title='Genre',\n    yaxis_title='Toplam B\u00fct\u00e7e',\n    width=800,\n    height=1000,\n    font=dict(\n        size=16\n    )\n)\n\nfig.layout.template = 'seaborn'\n\niplot(fig)","49dc54e5":"fig = px.scatter(meta_df, x='budget', y='runtime', hover_data=['title'], color='genres', width=800, height=800)\nfig.update_layout(\n    title='The Relationship between Budget and Movie Runtime',\n    xaxis_title='Budget',\n    yaxis_title='Runtime',\n    font=dict(\n        size=16\n    )\n)\n\niplot(fig)","b535fa37":"fig = go.Figure(go.Box(\n    y=meta_df['vote_count']\n    \n))\n\nfig.update_layout(\n    title='Vote Count Distribution',\n    yaxis_title='Vote Count',\n    width=800,\n    height=800\n)\n\niplot(fig)","b2afa460":"meta_df = meta_df[meta_df['vote_count'] >= meta_df['vote_count'].quantile(.75)]\nfig = go.Figure(go.Box(\n    y=meta_df['vote_count']\n))\n\nfig.update_layout(\n    title='Vote Count Distribution',\n    yaxis_title='Vote Count',\n    width=800,\n    height=800\n)\n\niplot(fig)","999df36e":"from sklearn.cluster import KMeans\nfrom sklearn.preprocessing import MinMaxScaler","029cfc33":"scalar = MinMaxScaler()\n\nscaled_df = meta_df[['budget', 'popularity', 'revenue', 'runtime', 'vote_average', 'vote_count']]\n\n\n\n\nsmaller_df = scaled_df.copy()\n\nhier_df = scaled_df.copy()\n\nscaled = scalar.fit_transform(meta_df[['budget', 'popularity', 'revenue', 'runtime', 'vote_average', 'vote_count']])\n\n\n\nscaled_df = pd.DataFrame(scaled, index=scaled_df.index, columns=scaled_df.columns)\n\nhier_df = pd.DataFrame(scaled, index=hier_df.index, columns=hier_df.columns)\n\nscaled_df.head()","58959289":"def apply_kmeans(df, clusters):\n    kmeans = KMeans(n_clusters=clusters, random_state=0)\n    cluster_labels = kmeans.fit(df).labels_\n    string_labels = [\"c{}\".format(i) for i in cluster_labels]\n    df['cluster_label'] = cluster_labels\n    df['cluster_string'] = string_labels\n\n    return df","bbb8c4aa":"def param_tune(df):\n    scores = {'clusters': list(), 'score': list()}\n    for cluster_num in range(1,31):\n        scores['clusters'].append(cluster_num)\n        scores['score'].append(KMeans(n_clusters=cluster_num, random_state=0).fit(df).score(df))\n\n    scores_df = pd.DataFrame(scores)\n\n    fig = go.Figure(go.Scatter(\n        x=scores_df['clusters'],\n        y=scores_df['score']\n    ))\n\n    fig.update_layout(\n        xaxis_title='Cluster',\n        yaxis_title='Score',\n        title='Elbow Metodu Sonucu',\n        height=800,\n        width=800\n    )\n\n    fig.show()\n\n    return 9","3e55c967":"clusters = param_tune(scaled_df)\n\nscaled_df = apply_kmeans(scaled_df, clusters)","b6fc4f97":"elapsed_time = timeit.timeit(KMeans, number=100)\/100\nprint(elapsed_time)","e00e6005":"smaller_df = smaller_df.join(scaled_df[['cluster_label', 'cluster_string']])\nsmaller_df = smaller_df.join(meta_df[['title', 'genres']])\n\n\nsmaller_df.head()","69748e2c":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style","06e00e61":"style.use('seaborn-poster')\nfig, ax = plt.subplots(1,1)\ncluster_comb = smaller_df.groupby(['cluster_label'])['title'].count()\nsns.barplot(y=cluster_comb.index, x=cluster_comb.values, orient='h', palette=\"Spectral\",\n            edgecolor='black', linewidth=1)\nplt.ylabel(\"Cluster\", fontsize=18)\nplt.xlabel(\"Records\", fontsize=18)\nplt.title(\"Her K\u00fcmedeki Kay\u0131t Say\u0131s\u0131\", fontsize=20)\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nplt.show()","799ee96c":"fig = px.scatter_matrix(smaller_df, dimensions=['budget', 'popularity', 'revenue', 'runtime', 'vote_average', 'vote_count'],\n                        color='cluster_string', hover_data=['title', 'genres'])\nfig.update_layout(\n    title='KMeans Cluster Scatter Matrix',\n    height=1000,\n    width=800\n)\n\niplot(fig)","6006e017":"fig = px.scatter(smaller_df, x='vote_average', y='popularity', color='cluster_string', hover_data=['title', 'genres'],width=800, height=800)\nfig.update_layout(\n    title='vote_average ve  popularity aras\u0131 ili\u015fki',\n    xaxis_title='vote',\n    yaxis_title='popi',\n    font=dict(\n        size=16\n    )\n)\niplot(fig)\nplt.show()","37ab94a2":"clusters = list(smaller_df['cluster_label'].unique())\ncluster_dict = dict()\n\ncluster_count = 0\nfor col in range(3):\n    for row in range(3):\n        cluster_df = smaller_df[smaller_df.cluster_label == clusters[cluster_count]]\n        cluster_dict[\"{},{}\".format(str(col), str(row))] = cluster_df['genres'].value_counts()\n        cluster_count += 1\n\ncluster_count = 0\n\nfig, axs = plt.subplots(3, 3, figsize=(15,15))\n\nfor col in range(3):\n    for row in range(3):\n        coord = \"{},{}\".format(str(col), str(row))\n\n        sns.barplot(y=cluster_dict[coord].index, x=cluster_dict[coord].values, orient='h',\n                    palette={'Drama': '#94447f',\n                             'Action': '#5796ef',\n                             'Adventure': '#8a59c0',\n                             'Comedy': '#288abf',\n                             'Crime': '#0ab78d',\n                             'Thriller': '#4ed993',\n                             'Fantasy': '#7d3970',\n                             'Horror': '#b3dc67',\n                             'Science Fiction': '#dc560a',\n                             'Animation': '#0079fe',\n                             'Romance': '#98d3a8',\n                             'Mystery': '#d5105a',\n                             'Family': '#d04dcf',\n                             'War': '#58c7a2',\n                             'History': '#7bf1f8',\n                             'Western': '#244155',\n                             'TV Movie': '#587b77',\n                             'Music': '#c64ac2',\n                             'Documentary': '#5e805d'}, edgecolor='black', linewidth=0.9, ax=axs[col][row])\n\n        title = \"Cluster {}'s Genre Distribution\".format(cluster_count)\n        axs[col][row].set_title(title, fontsize=15, fontweight='bold')\n        cluster_count += 1\nplt.tight_layout()\nplt.show()","21f7ea12":"import scipy.cluster.hierarchy as sch","26f5c2b3":"meta_df.head()","e4b6f549":"\n\ndendrogram = sch.dendrogram(sch.linkage(hier_df, method = \"ward\"))\nplt.title('Dendrogram')\nplt.xlabel('a')\nplt.ylabel('b')\nplt.show()","3bf5e213":"from sklearn.cluster import AgglomerativeClustering \nhc = AgglomerativeClustering(n_clusters = 4, affinity = 'euclidean', linkage ='ward')\n\n\n    \n\n\n\nelapsed_time = timeit.timeit(AgglomerativeClustering, number=100)\/100\nprint(elapsed_time)","fd6d346c":"y_hc=hc.fit_predict(hier_df)","2b074082":"hier_df = hier_df.join(scaled_df[['cluster_label', 'cluster_string']])\n\n\n\nhier_df.head()","287cf90d":"fig = px.scatter_matrix(hier_df, dimensions=['budget', 'popularity', 'revenue', 'runtime', 'vote_average', 'vote_count'],\n                         color='cluster_string'\n                       )\nfig.update_layout(\n    title='Hierarchical Cluster Scatter Matrix',\n    height=1000,\n    width=800\n)\n\niplot(fig)\n","640fafbd":"# Hierarchical Clustering","19bedff4":"# Verilerin \u0130ncelenmesi","261b3c6d":"# Veri Temizleme (Data Cleaning)","544a9e6f":"# K-MEANS Clustering","80987568":"# Veri Setine K\u0131sa Bir Bak\u0131\u015f","a73bdeb5":"# Hayri Mert Karasakal\n# 170202032\nSunum Dosyas\u0131: [Google Slides Veri Madencili\u011fine Giri\u015f](https:\/\/docs.google.com\/presentation\/d\/1Y6QsbjiTXSsw42U5Df0kEVqgxNL0Gu0DMW_b4uzTfMs\/edit?usp=sharing)\n"}}