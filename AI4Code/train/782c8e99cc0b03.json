{"cell_type":{"812a24ff":"code","a8b11175":"code","ce8783b4":"code","96c87f0a":"code","aa0fd571":"code","a86d120a":"code","831399f9":"code","817ebda3":"code","fcd44b8a":"code","d3bf0b5b":"code","87bd3fbf":"code","7a8e59eb":"code","1a90dc95":"code","47faaa72":"code","7aefdd93":"code","b76b03f9":"code","cfcf9d15":"code","03158aa9":"code","3091023f":"code","51c7d005":"code","f0ea0f2b":"markdown"},"source":{"812a24ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a8b11175":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","ce8783b4":"# \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u5909\u63db\n\ntrain['Sex'][train['Sex'] == 'male'] = 0\ntrain['Sex'][train['Sex'] == 'female'] = 1\ntest['Sex'][test['Sex'] == 'male'] = 0\ntest['Sex'][test['Sex'] == 'female'] = 1","96c87f0a":"# Ticket\u3092\u308f\u304b\u308a\u3084\u3059\u3044\u5024\u306b\u5909\u63db\n\nTicket_id_train = []\nfor v in train['Ticket'].values:\n    for index, v_unique in enumerate(train['Ticket'].unique()):\n        if v == v_unique:\n            Ticket_id_train.append(index)\n            break\ntrain['Ticket'] = Ticket_id_train        ","aa0fd571":"Ticket_id_test = []\nfor v in test['Ticket'].values:\n    for index, v_unique in enumerate(test['Ticket'].unique()):\n        if v == v_unique:\n            Ticket_id_test.append(index)\n            break\ntest['Ticket'] = Ticket_id_test","a86d120a":"import keras\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Model\nfrom keras.layers import Dense,Flatten,Activation,Input,Dropout\nfrom keras.optimizers import Adam\nfrom keras.layers.advanced_activations import ReLU\nfrom keras.losses import binary_crossentropy\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nimport tensorflow as tf","831399f9":"# keras\u306e\u5b66\u7fd2\u306e\u518d\u73fe\n\nnp.random.seed(7)\ntf.random.set_seed(7)\n","817ebda3":"train_x = train[['Pclass','Sex','Ticket']].values\ntrain_x = train_x.astype('float')\ntrain_y = train['Survived'].values\n\ntrain_x,val_x,train_y,val_y = train_test_split(train_x,train_y,test_size=0.2)","fcd44b8a":"print(train_x.shape,val_x.shape,train_y.shape,val_y.shape)","d3bf0b5b":"def load_model():\n    input = Input(shape=(3,))\n    h = Dense(12)(input)\n    h = ReLU()(h)\n    h = Dropout(0.2)(h)\n    h = Dense(9)(h)\n    h = ReLU()(h)\n    output = Dense(1,activation='sigmoid')(h)\n    model = Model(inputs=input,outputs=output)\n    return model\n\nmodel = load_model()","87bd3fbf":"train_x","7a8e59eb":"#Ticket\u3060\u3051scale\u304c\u5927\u304d\u3044\u306e\u3067\u6a19\u6e96\u5316\u3059\u308b\n\nscaler = StandardScaler()\ntrain_x = scaler.fit_transform(train_x)\nval_x = scaler.transform(val_x)","1a90dc95":"train_x","47faaa72":"model.compile(loss=binary_crossentropy,optimizer=Adam(lr=0.001),metrics=['accuracy'])","7aefdd93":"history = model.fit(train_x,train_y,batch_size=36,epochs=100,validation_data=(val_x,val_y))","b76b03f9":"\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='upper left')\nplt.show()\n\n# plot training & validation loss value\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='upper left')\nplt.show()","cfcf9d15":"test_feature = test[['Pclass','Sex','Ticket']].values\ntest_feature = test_feature.astype('float')\n\ntest_feature = scaler.transform(test_feature)","03158aa9":"test_feature","3091023f":"test['Survived'] = model.predict(test_feature)\ntest['Survived'] =test['Survived'].apply(lambda x: round(x,0)).astype('int')\n\nsolution = test[['PassengerId', 'Survived']]","51c7d005":"# solution.to_csv(\"keras_baseline.csv\", index=False)","f0ea0f2b":"## NN model"}}