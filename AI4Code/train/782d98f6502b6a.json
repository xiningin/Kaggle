{"cell_type":{"db991a56":"code","46ed24b4":"code","cd13dd25":"code","2d0939c9":"code","d719ad53":"code","abb5cc1c":"code","7acbf126":"code","6e375195":"code","9746545e":"code","698c4c32":"code","4450e5d3":"code","0b3ac39f":"code","3f2c7ecc":"code","6bd20335":"markdown","862a94e3":"markdown","830fa275":"markdown"},"source":{"db991a56":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","46ed24b4":"import pandas as pd\nimport numpy as np\nimport sklearn\nimport random\nimport math\nimport sys\n\nvalid_count = 200\n\ndef train_valid_split(df):\n    random.seed(42)\n    indexes = list(range(len(df)))\n    random.shuffle(indexes)\n    train = df.iloc[indexes[:-valid_count]]\n    valid = df.iloc[indexes[-valid_count:]]\n    return train, valid\n\ndef rmse_metric(predicted, actual):\n    error = sum((b - a) ** 2 for a,b in zip(actual, predicted))\n    n = len(actual)\n    rmse = math.sqrt(error * 1.0 \/ n)\n    return rmse","cd13dd25":"dpath = '\/kaggle\/input\/commonlitreadabilityprize'\ntrain_path = f'{dpath}\/train.csv'\ntest_path = f'{dpath}\/test.csv'","2d0939c9":"# Reading data\ndf = pd.read_csv(train_path)\ndf_train, df_valid = train_valid_split(df)\ndf_test = pd.read_csv(test_path)\nlen(df_train), len(df_valid), len(df_test)","d719ad53":"df_train.head()","abb5cc1c":"# converting it into tfidf vector\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ntfidf = TfidfVectorizer(max_features=10000, stop_words='english')\n\n# Input\nX_train = tfidf.fit_transform(df_train['excerpt'])\nX_test = tfidf.transform(df_test['excerpt'])\nX_valid = tfidf.transform(df_valid['excerpt'])\n\n# Target\ny_train = df_train['target'].values\ny_valid = df_valid['target'].values\n\nX_train.shape, X_test.shape, X_valid.shape","7acbf126":"list(tfidf.vocabulary_.items())[:100]","6e375195":"import sklearn.linear_model as lm","9746545e":"def linear_regression(X_train, y_train, X_valid, y_valid):\n    models = {\n        'lr': lm.LinearRegression(),\n        'ridge': lm.Ridge(alpha=0.1, normalize=True),\n        'sgd': lm.SGDRegressor(),\n        'elasticNet': lm.ElasticNet(alpha=0.1, l1_ratio=0.7, normalize=True),\n        'lasso': lm.Lasso(alpha=0.3, normalize=True)\n        # 'baysianRidge': lm.BayesianRidge()\n    }\n    \n    min_error_model = None\n    min_error = sys.float_info.max\n    name = None\n    for model, model_obj in models.items():\n        \n        if model != 'baysianRidge':\n            model_obj.fit(X_train, y_train)\n        else:\n            model_obj.fit(X_train.toarray(), y_train)\n\n        # Validate\n        pred = model_obj.predict(X_valid)\n\n        # RMSE Score\n        score = rmse_metric(pred, y_valid)\n        print(f'model: {model}, validation error: {score}')\n        \n        # update model\n        if min_error_model is None or min_error > score:\n            min_error_model = model_obj\n            min_error = score\n            name = model\n        \n    return name, min_error_model, min_error","698c4c32":"name, model, error = linear_regression(X_train, y_train, X_valid, y_valid)\nprint('-'*10)\nprint(f'min error model: {name}, error: {error}')","4450e5d3":"# Predict and submit score on test data\npred = model.predict(X_test)\npred","0b3ac39f":"df_test['target'] = pred\ndf_test","3f2c7ecc":"submission = df_test[['id', 'target']]\nsubmission.to_csv(\"submission.csv\", index=False)","6bd20335":"## Submisssion","862a94e3":"## Model","830fa275":"## Data"}}