{"cell_type":{"c91d63c5":"code","b6ac8aec":"code","6e0eccd8":"code","fbec29e8":"code","aff9be0b":"code","f5b02058":"code","6e8a84c8":"code","25393611":"markdown","ae6d169c":"markdown","fc3063f2":"markdown"},"source":{"c91d63c5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nimport xgboost as xgb\nimport lightgbm as lgb","b6ac8aec":"train = pd.read_csv('..\/input\/ct-datasets\/final_train (1).csv')\ntest = pd.read_csv('..\/input\/ct-datasets\/final_test (1).csv')\n\ny = train['target']\ntrain = train.iloc[:, :-1]\n\nremaining_test = pd.read_csv('..\/input\/test-ctr\/fake_test.csv')[['ID_code']]\nremaining_test['target'] = 0\n\ntest_index = test.ID_code\ntest = test.drop('ID_code', axis=1)","6e0eccd8":"lgb_params = {\n\"objective\" : \"binary\",\n\"metric\" : \"auc\",\n\"boosting\": 'gbdt',\n\"max_depth\" : 1,\n\"num_leaves\" : 13,\n\"learning_rate\" : 0.03,\n\"bagging_freq\": 5,\n\"bagging_fraction\" : 0.4,\n\"feature_fraction\" : 0.05,\n\"min_data_in_leaf\": 80,\n\"min_sum_hessian_in_leaf\": 10,\n\"tree_learner\": \"serial\",\n\"boost_from_average\": \"false\",\n\"bagging_seed\" : 42,\n\"verbosity\" : 1,\n\"seed\": 42\n}","fbec29e8":"folds = StratifiedKFold(n_splits=5, shuffle=True, random_state=44000)\noof = np.zeros(len(train))\npredictions = np.zeros(len(test))\n\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(train.values, y.values)):\n    print(\"Fold {}\".format(fold_))\n    trn_data = lgb.Dataset(train.iloc[trn_idx], label=y.iloc[trn_idx])\n    val_data = lgb.Dataset(train.iloc[val_idx], label=y.iloc[val_idx])\n\n    num_round = 15000\n    clf = lgb.train(lgb_params, trn_data, num_round, valid_sets = [trn_data, val_data],\n                    verbose_eval=1000, early_stopping_rounds = 200)\n    oof[val_idx] = clf.predict(train.iloc[val_idx], num_iteration=clf.best_iteration)\n    \n    predictions += clf.predict(test, num_iteration=clf.best_iteration) \/ folds.n_splits\n\nprint(\"CV score: {:<8.5f}\".format(roc_auc_score(y, oof)))","aff9be0b":"sub_file = pd.read_csv('\/kaggle\/input\/santander-customer-transaction-prediction\/sample_submission.csv')","f5b02058":"# Our predictions for the real data\nsub = pd.DataFrame()\nsub['ID_code'] = test_index\nsub['target'] = predictions\n\n\nfinal_sub = pd.merge(sub_file, sub, on='ID_code', how='left')[['ID_code', 'target_y']]\nfinal_sub = final_sub.fillna(0).rename(columns={'target_y': 'target'})\nfinal_sub","6e8a84c8":"final_sub.to_csv('Finalsub.csv', index=False)","25393611":"## Training the LGBM model","ae6d169c":"---\n# MODELING\n---\n\nLink to the feature engineering part : [Feature Engineering - Customer Transaction Santander](https:\/\/www.kaggle.com\/jamesngoa\/santander-ctp-feature-engineering)\n\nEDA : [EDA - Customer Transaction Santander](https:\/\/www.kaggle.com\/jamesngoa\/eda-customer-transaction)","fc3063f2":"## Submission"}}