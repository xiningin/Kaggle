{"cell_type":{"d0650e2a":"code","dc76b2ed":"code","4e4589df":"code","005dfdba":"code","84c757d9":"code","2d1da92a":"code","2dfeaf01":"code","e38c6d6f":"code","d3ed77cd":"code","626cd773":"code","23e60c7c":"code","fc6104e3":"code","f3d80b2a":"code","d960ed0e":"code","34b68ff1":"code","397f8512":"code","56360a28":"code","1de43fa6":"code","464efd48":"code","359cd388":"code","760dbf88":"code","75b9bdf9":"code","8f2a44cd":"code","9af00f43":"code","9c1f3035":"code","3c0704fe":"code","e3e5c262":"code","90dc42d8":"code","ced04ac9":"markdown","5af144f7":"markdown","a5c3a824":"markdown","02ffc353":"markdown","3c1f2b12":"markdown","d69dceef":"markdown","59ffc88b":"markdown","124bd0e4":"markdown","dd5f80a3":"markdown","091c4817":"markdown"},"source":{"d0650e2a":"!pip install numpy pandas faiss-gpu torch transformers sentence_transformers rouge --quiet","dc76b2ed":"!pip install rouge-score","4e4589df":"import re\nimport numpy as np\nimport pandas as pd\nimport faiss\nimport torch\nfrom torch.utils.data import DataLoader\nfrom transformers import BartTokenizer, BartForConditionalGeneration, T5ForConditionalGeneration, T5Tokenizer\nfrom sentence_transformers import SentenceTransformer\nfrom rouge import Rouge\nfrom rouge_score import rouge_scorer \nfrom matplotlib import pyplot as plt","005dfdba":"movies = pd.read_csv('\/kaggle\/input\/wikipedia-movie-plots-with-plot-summaries\/wiki_movie_plots_deduped_with_summaries.csv')\nmovies.head()","84c757d9":"def preprocess_text(text, max_words=1024):\n    text = text.split()[:max_words]\n    text = ' '.join(text)\n    regex = re.compile(r'[\\n\\r\\t]')\n    text = regex.sub(\" \", text)\n    text = re.sub(' +', ' ', text).strip()\n    \n    return text","2d1da92a":"movies['Plot'] = movies['Plot'].apply(preprocess_text)\nmovies['PlotSummary'] = movies['PlotSummary'].apply(preprocess_text)","2dfeaf01":"movies_in_1995 = movies[movies['Release Year'] == 1995]\nmovies_in_1995.head()","e38c6d6f":"movies_in_1995.shape","d3ed77cd":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\nprint(device)","626cd773":"plots = []\nfor i in movies_in_1995.Plot:\n    try:\n        k = i.split(\" \")\n        if 400 > len(k) > 300:\n            plots.append(i)    \n    except:\n        continue","23e60c7c":"movies_in_1995 = movies_in_1995[movies_in_1995[\"Plot\"].isin(plots)]\n# movies_in_1995 = movies_in_1995[movies_in_1995[\"PlotSummary\"].isin(plots_summary)]","fc6104e3":"movies_in_1995.shape","f3d80b2a":"plot_list = movies_in_1995.Plot.tolist()\n\ndef split_list(lst, batch):\n    for i in range(0, len(lst), batch):\n        yield lst[i:i + batch]\n        \nbatch = 32\nbatches = list(split_list(plot_list, batch))","d960ed0e":"model1 = BartForConditionalGeneration.from_pretrained('sshleifer\/distilbart-cnn-12-3')\nmodel1.to(device)\nmodel1.eval()\ntokenizer1 = BartTokenizer.from_pretrained('sshleifer\/distilbart-cnn-12-3')","34b68ff1":"all_summaries1 = []\nfor batch in batches:\n    with torch.no_grad():\n        inputs = tokenizer1(batch, \n                           max_length=1024,\n                           padding=True,\n                           truncation=True,\n                           return_tensors='pt')\n        \n        summary_ids = model1.generate(inputs['input_ids'].to(device), max_length=128, early_stopping=True).to('cpu')\n        \n        all_summaries1 += [txt.strip() for txt in tokenizer1.batch_decode(summary_ids, skip_special_tokens=True, clean_up_tokenization_spaces=True)]\n        del inputs, summary_ids\n        torch.cuda.empty_cache()\n        \nmovies_in_1995['Plot Summary (Bart)'] = all_summaries1","397f8512":"model2 = T5ForConditionalGeneration.from_pretrained('t5-small')\nmodel2.to(device)\nmodel2.eval()\ntokenizer2 = T5Tokenizer.from_pretrained('t5-small')","56360a28":"all_summaries2 = []\nfor batch in batches:\n    with torch.no_grad():\n        inputs = tokenizer2(batch, \n                           max_length=1024,\n                           padding=True,\n                           truncation=True,\n                           return_tensors='pt')\n        \n        summary_ids = model2.generate(inputs['input_ids'].to(device), max_length=128, early_stopping=True).to('cpu')\n        \n        all_summaries2 += [txt.strip() for txt in tokenizer2.batch_decode(summary_ids, skip_special_tokens=True, clean_up_tokenization_spaces=True)]\n        del inputs, summary_ids\n        torch.cuda.empty_cache()\n        \nmovies_in_1995['Plot Summary (T5)'] = all_summaries2","1de43fa6":"movies_in_1995.to_csv('wiki_movie_plots_deduped_summarized.csv', index=False)","464efd48":"pd.set_option(\"max_colwidth\", None)\nmovies_in_1995[['Plot']]","359cd388":"pd.set_option(\"max_colwidth\", None)\nmovies_in_1995[['Plot Summary (Bart)', 'Plot Summary (T5)']]","760dbf88":"r = Rouge()\nprint(r)\nevaluation1 = r.get_scores(movies_in_1995[['PlotSummary'][0]], movies_in_1995[['Plot Summary (T5)'][0]])\n\ndf_evaluation1 = pd.DataFrame(evaluation1)\ndf_evaluation1","75b9bdf9":"r1 = Rouge()\nevaluation2 = r1.get_scores(movies_in_1995[['PlotSummary'][0]], movies_in_1995[['Plot Summary (Bart)'][0]])\n\ndf_evaluation2 = pd.DataFrame(evaluation2)\ndf_evaluation2","8f2a44cd":"movies_in_1995[['Plot Summary (Bart)', 'Plot Summary (T5)','PlotSummary']]","9af00f43":"scorer_rouge1 = rouge_scorer.RougeScorer(['rouge1'])\nhyp1 = movies_in_1995[['PlotSummary'][0]]\nref1 = movies_in_1995[['Plot Summary (T5)'][0]]\nrouge1_results1 = {'precision': [], 'recall': [], 'fmeasure': []}\n\nfor (h, r) in zip(hyp1, ref1):\n    score = scorer_rouge1.score(h, r)\n    precision, recall, fmeasure = score['rouge1']\n    \n    rouge1_results1['precision'].append(precision)\n    rouge1_results1['recall'].append(recall)\n    rouge1_results1['fmeasure'].append(fmeasure)\n    \n\n\nscorer_rouge2 = rouge_scorer.RougeScorer(['rouge2'])\nhyp1 = movies_in_1995[['PlotSummary'][0]]\nref1 = movies_in_1995[['Plot Summary (T5)'][0]]\nrouge2_results1 = {'precision': [], 'recall': [], 'fmeasure': []}\n\nfor (h, r) in zip(hyp1, ref1):\n    score = scorer_rouge2.score(h, r)\n    precision, recall, fmeasure = score['rouge2']\n    \n    rouge2_results1['precision'].append(precision)\n    rouge2_results1['recall'].append(recall)\n    rouge2_results1['fmeasure'].append(fmeasure)\n    \n\n\nscorer_rougeL = rouge_scorer.RougeScorer(['rougeL'])\nhyp1 = movies_in_1995[['PlotSummary'][0]]\nref1 = movies_in_1995[['Plot Summary (T5)'][0]]\nrougeL_results1 = {'precision': [], 'recall': [], 'fmeasure': []}\n\nfor (h, r) in zip(hyp1, ref1):\n    score = scorer_rougeL.score(h, r)\n    precision, recall, fmeasure = score['rougeL']\n    \n    rougeL_results1['precision'].append(precision)\n    rougeL_results1['recall'].append(recall)\n    rougeL_results1['fmeasure'].append(fmeasure)","9c1f3035":"rouge_result_T5 = []\n\n# rouge-1\nprint(\"Rouge-1\")\nrouge1_results1['precision'] = np.array(rouge1_results1['precision'])\nrouge1_results_precision_avg1 = float(sum(rouge1_results1['precision'])\/rouge1_results1['precision'].shape)\nrouge_result_T5.append(rouge1_results_precision_avg1)\nprint('precision: ', rouge1_results_precision_avg1)\n\nrouge1_results1['recall'] = np.array(rouge1_results1['recall'])\nrouge1_results_recall_avg1 = float(sum(rouge1_results1['recall'])\/rouge1_results1['recall'].shape)\nrouge_result_T5.append(rouge1_results_recall_avg1)\nprint('recall: ', rouge1_results_recall_avg1)\n\nrouge1_results1['fmeasure'] = np.array(rouge1_results1['fmeasure'])\nrouge1_results_fmeasure_avg1 = float(sum(rouge1_results1['fmeasure'])\/rouge1_results1['fmeasure'].shape)\nrouge_result_T5.append(rouge1_results_fmeasure_avg1)\nprint('fmeasure: ', rouge1_results_fmeasure_avg1, '\\n')\n\n\n# rouge-2\nprint(\"Rouge-2\")\nrouge2_results1['precision'] = np.array(rouge2_results1['precision'])\nrouge2_results_precision_avg1 = float(sum(rouge2_results1['precision'])\/rouge2_results1['precision'].shape)\nrouge_result_T5.append(rouge2_results_precision_avg1)\nprint('precision: ', rouge2_results_precision_avg1)\n\nrouge2_results1['recall'] = np.array(rouge2_results1['recall'])\nrouge2_results_recall_avg1 = float(sum(rouge2_results1['recall'])\/rouge2_results1['recall'].shape)\nrouge_result_T5.append(rouge2_results_recall_avg1)\nprint('recall: ', rouge2_results_recall_avg1)\n\nrouge2_results1['fmeasure'] = np.array(rouge2_results1['fmeasure'])\nrouge2_results_fmeasure_avg1 = float(sum(rouge2_results1['fmeasure'])\/rouge2_results1['fmeasure'].shape)\nrouge_result_T5.append(rouge2_results_fmeasure_avg1)\nprint('fmeasure: ', rouge2_results_fmeasure_avg1,'\\n')\n\n\n# rouge-L\nprint(\"Rouge-L\")\nrougeL_results1['precision'] = np.array(rougeL_results1['precision'])\nrougeL_results_precision_avg1 = float(sum(rougeL_results1['precision'])\/rougeL_results1['precision'].shape)\nrouge_result_T5.append(rougeL_results_precision_avg1)\nprint('precision: ', rougeL_results_precision_avg1)\n\nrougeL_results1['recall'] = np.array(rougeL_results1['recall'])\nrougeL_results_recall_avg1 = float(sum(rougeL_results1['recall'])\/rougeL_results1['recall'].shape)\nrouge_result_T5.append(rougeL_results_recall_avg1)\nprint('recall: ', rougeL_results_recall_avg1)\n\nrougeL_results1['fmeasure'] = np.array(rougeL_results1['fmeasure'])\nrougeL_results_fmeasure_avg1 = float(sum(rougeL_results1['fmeasure'])\/rougeL_results1['fmeasure'].shape)\nrouge_result_T5.append(rougeL_results_fmeasure_avg1)\nprint('fmeasure: ', rougeL_results_fmeasure_avg1)","3c0704fe":"scorer_rouge1 = rouge_scorer.RougeScorer(['rouge1'])\nhyp1 = movies_in_1995[['PlotSummary'][0]]\nref1 = movies_in_1995[['Plot Summary (Bart)'][0]]\nrouge1_results2 = {'precision': [], 'recall': [], 'fmeasure': []}\n\nfor (h, r) in zip(hyp1, ref1):\n    score = scorer_rouge1.score(h, r)\n    precision, recall, fmeasure = score['rouge1']\n    \n    rouge1_results2['precision'].append(precision)\n    rouge1_results2['recall'].append(recall)\n    rouge1_results2['fmeasure'].append(fmeasure)\n    \n\n\nscorer_rouge2 = rouge_scorer.RougeScorer(['rouge2'])\nhyp1 = movies_in_1995[['PlotSummary'][0]]\nref1 = movies_in_1995[['Plot Summary (Bart)'][0]]\nrouge2_results2 = {'precision': [], 'recall': [], 'fmeasure': []}\n\nfor (h, r) in zip(hyp1, ref1):\n    score = scorer_rouge2.score(h, r)\n    precision, recall, fmeasure = score['rouge2']\n    \n    rouge2_results2['precision'].append(precision)\n    rouge2_results2['recall'].append(recall)\n    rouge2_results2['fmeasure'].append(fmeasure)\n\n    \n    \nscorer_rougeL = rouge_scorer.RougeScorer(['rougeL'])\nhyp1 = movies_in_1995[['PlotSummary'][0]]\nref1 = movies_in_1995[['Plot Summary (Bart)'][0]]\nrougeL_results2 = {'precision': [], 'recall': [], 'fmeasure': []}\n\nfor (h, r) in zip(hyp1, ref1):\n    score = scorer_rougeL.score(h, r)\n    precision, recall, fmeasure = score['rougeL']\n    \n    rougeL_results2['precision'].append(precision)\n    rougeL_results2['recall'].append(recall)\n    rougeL_results2['fmeasure'].append(fmeasure)","e3e5c262":"rouge_result_BART = []\n\n# rouge-1\nprint(\"Rouge-1\")\nrouge1_results2['precision'] = np.array(rouge1_results2['precision'])\nrouge1_results_precision_avg2 = float(sum(rouge1_results2['precision'])\/rouge1_results2['precision'].shape)\nrouge_result_BART.append(rouge1_results_precision_avg2)\nprint('precision: ', rouge1_results_precision_avg2)\n\nrouge1_results2['recall'] = np.array(rouge1_results2['recall'])\nrouge1_results_recall_avg2 = float(sum(rouge1_results2['recall'])\/rouge1_results2['recall'].shape)\nrouge_result_BART.append(rouge1_results_recall_avg2)\nprint('recall: ', rouge1_results_recall_avg2)\n\nrouge1_results2['fmeasure'] = np.array(rouge1_results2['fmeasure'])\nrouge1_results_fmeasure_avg2 = float(sum(rouge1_results2['fmeasure'])\/rouge1_results2['fmeasure'].shape)\nrouge_result_BART.append(rouge1_results_fmeasure_avg2)\nprint('fmeasure: ', rouge1_results_fmeasure_avg2, '\\n')\n\n\n# rouge-2\nprint(\"Rouge-2\")\nrouge2_results2['precision'] = np.array(rouge2_results2['precision'])\nrouge2_results_precision_avg2 = float(sum(rouge2_results2['precision'])\/rouge2_results2['precision'].shape)\nrouge_result_BART.append(rouge2_results_precision_avg2)\nprint('precision: ', rouge2_results_precision_avg2)\n\nrouge2_results2['recall'] = np.array(rouge2_results2['recall'])\nrouge2_results_recall_avg2 = float(sum(rouge2_results2['recall'])\/rouge2_results2['recall'].shape)\nrouge_result_BART.append(rouge2_results_recall_avg2)\nprint('recall: ', rouge2_results_recall_avg2)\n\nrouge2_results2['fmeasure'] = np.array(rouge2_results2['fmeasure'])\nrouge2_results_fmeasure_avg2 = float(sum(rouge2_results2['fmeasure'])\/rouge2_results2['fmeasure'].shape)\nrouge_result_BART.append(rouge2_results_fmeasure_avg2)\nprint('fmeasure: ', rouge2_results_fmeasure_avg2,'\\n')\n\n\n# rouge-L\nprint(\"Rouge-L\")\nrougeL_results2['precision'] = np.array(rougeL_results2['precision'])\nrougeL_results_precision_avg2 = float(sum(rougeL_results2['precision'])\/rougeL_results2['precision'].shape)\nrouge_result_BART.append(rougeL_results_precision_avg2)\nprint('precision: ', rougeL_results_precision_avg2)\n\nrougeL_results2['recall'] = np.array(rougeL_results2['recall'])\nrougeL_results_recall_avg2 = float(sum(rougeL_results2['recall'])\/rougeL_results2['recall'].shape)\nrouge_result_BART.append(rougeL_results_recall_avg2)\nprint('recall: ', rougeL_results_recall_avg2)\n\nrougeL_results2['fmeasure'] = np.array(rougeL_results2['fmeasure'])\nrougeL_results_fmeasure_avg2 = float(sum(rougeL_results2['fmeasure'])\/rougeL_results2['fmeasure'].shape)\nrouge_result_BART.append(rougeL_results_fmeasure_avg2)\nprint('fmeasure: ', rougeL_results_fmeasure_avg2)","90dc42d8":"labels = ['rouge-1_p', 'rouge-1_r', 'rouge-1_f', 'rouge-2_p', 'rouge-2_r', 'rouge-2_f', 'rouge-L_p', 'rouge-L_r', 'rouge-L_f',]\n\nx = np.arange(9) \n\nwidth = 0.40\n\nplt.figure(figsize=(10, 10))\nplt.bar(x-0.2, rouge_result_T5, width)\nplt.bar(x, rouge_result_BART, width)\nplt.xticks(x, labels)\nplt.xlabel(\"Rouge\")\nplt.ylabel(\"Rouge Score\")\nplt.legend([\"T5\", \"BART\"])\nplt.show()","ced04ac9":"### Bart Model","5af144f7":"### Reading the dataset using pandas .read_csv() function.","a5c3a824":"### Checking the Rouge Score between the PlotSummary given by the dataset and generated by our model.","02ffc353":"### Narrowing the data with plots with the length of 300 - 400 words.","3c1f2b12":"### Preprocess the text with first splitting the sentence into seperate words and set a maximum number of 1024 words. ","d69dceef":"### Installing and importing all the libraries needed.","59ffc88b":"### T5 Model","124bd0e4":"### We have 488 movies in total now.","dd5f80a3":"### Now we have only 37 movies.","091c4817":"### Due to the large number of dataset, we have selected only movies from the year 1995 to get the summaries of."}}