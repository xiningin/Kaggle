{"cell_type":{"98c660ec":"code","b3eebb93":"code","e32e6031":"code","9aa6d3b0":"code","f56ed48c":"code","b8db9a25":"code","0c5dfd47":"code","973a89de":"code","751b1dd6":"code","2e13acb4":"code","19596902":"code","eea502d8":"code","a7a09b67":"code","924ed042":"code","b03af4f6":"code","2628f61d":"code","f4e63861":"code","7828d42a":"code","c0a744da":"code","5cb45fc5":"code","6ad0204d":"code","f5a86d15":"code","88fb5b29":"code","1aef03ba":"code","bd0105e4":"code","e1f05daa":"code","d5b5972a":"code","8e138cf0":"code","0fe93698":"code","72d7589b":"code","22a8325b":"code","2dbc0660":"code","260df748":"code","fb5f2200":"code","5099aba2":"code","145641ae":"code","9c6573cd":"markdown","4a486096":"markdown","a676ce8a":"markdown","4d090134":"markdown","3bd726ef":"markdown","e7ad8583":"markdown","e72f66f9":"markdown","ac3a9870":"markdown","33169c7a":"markdown","e40d7730":"markdown","4d13fd79":"markdown","b2500f54":"markdown","8292d6cb":"markdown","b6b3bb29":"markdown","62813ce5":"markdown","6abe6d4d":"markdown","976a965b":"markdown","483852e8":"markdown","8d10007e":"markdown","9b8518c4":"markdown","85a8472b":"markdown","162a6751":"markdown","ac0aa617":"markdown","40c64dd6":"markdown","8fa14447":"markdown","2bed6e2d":"markdown","fcbfc641":"markdown","0a1d92f2":"markdown","4153daab":"markdown","890d4e45":"markdown"},"source":{"98c660ec":"#!pip install plotly\n\n!pip install plotly==5.5.0","b3eebb93":"import os\nimport gc\nimport copy\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold ,RepeatedKFold\nfrom sklearn.metrics import mean_squared_error\nimport lightgbm as lgb\n\nimport matplotlib.pyplot as plt\nplt.rcParams.update({'font.size': 18})\nplt.style.use('ggplot')\nimport seaborn as sns\nfrom scipy import stats\n\nimport shap\n\nfrom sklearn.preprocessing import StandardScaler\n\nimport optuna.integration.lightgbm as lgbm\nimport optuna\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport wandb\nimport seaborn as sns\n\nplt.style.use('default')","e32e6031":"import plotly.graph_objects as go","9aa6d3b0":"#plotly color\ndef get_colorpalette(colorpalette, n_colors):\n    palette = sns.color_palette(\n        colorpalette, n_colors)\n    rgb = ['rgb({},{},{})'.format(*[x*256 for x in rgb])\n           for rgb in palette]\n    return rgb\n\nn_legends = 12\n\ncolors = get_colorpalette('hls', n_legends)","f56ed48c":"pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 100)\n","b8db9a25":"TRAIN_PATH = \"..\/input\/widsdatathon2022\/train.csv\"\nTEST_PATH = \"..\/input\/widsdatathon2022\/test.csv\"\nTARGET = \"site_eui\"\n\ntrain = pd.read_csv(TRAIN_PATH)\ntest = pd.read_csv(TEST_PATH)\n\n","0c5dfd47":"train.head()","973a89de":"num_col=train.describe().columns\n\nlist_a=[]\nfor col in num_col:\n    list_a.append({'col':col,'num':len(train[col].value_counts())})\nlist_a_=pd.DataFrame(list_a)\n\ntrain.describe()","751b1dd6":"obj_col=train.describe(include='O').columns\n\nlist_o=[]\nfor col in obj_col:\n    list_o.append({'col':col,'num':len(train[col].value_counts())})\nlist_o_=pd.DataFrame(list_o)\n\ntrain.describe(include='O')","2e13acb4":"\ndata_=train[TARGET].value_counts().sort_index()\ndata = go.Scatter(x=data_.index.tolist(), y=data_.values.tolist(),mode='lines',marker={'color':colors[0]})\n\nlayout = go.Layout(showlegend=False, xaxis=dict(title=TARGET),yaxis=dict(title='volume'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=TARGET+'=Target')\nfig.show()","19596902":"len(train.columns)","eea502d8":"\ncol='Year_Factor'\ndata_=train[col].value_counts().sort_index()\n\ndata = go.Bar(x=data_.index.tolist(), y=data_.values.tolist(),marker={'color':colors[1]})\n    \nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),\n                      yaxis=dict(title='volume'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col)\nfig.show()\n\nmean_=[]\nindex_=train[col].value_counts().sort_index().index.tolist()\nfor i in index_:\n        mean_.append(train[train[col]==i]['site_eui'].mean())\n\ndata = go.Bar(x=index_, y=mean_,marker={'color':colors[2]})\n    \nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),\n                      yaxis=dict(title='site_eui'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col+' vs mean of Target')\nfig.show()\n","a7a09b67":"\ncol='State_Factor'\ndata_=train[col].value_counts().sort_index()\n\ndata = go.Bar(x=data_.index.tolist(), y=data_.values.tolist(),marker={'color':colors[1]})\n\n    \nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),\n                      yaxis=dict(title='volume'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col)\nfig.show()\n\n\nmean_=[]\nindex_=train[col].value_counts().sort_index().index.tolist()\nfor i in index_:\n        mean_.append(train[train[col]==i]['site_eui'].mean())\n\ndata = go.Bar(x=index_, y=mean_,marker={'color':colors[2]})\n    \nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),\n                      yaxis=dict(title='site_eui'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col+' vs mean of Target')\nfig.show()","924ed042":"col='floor_area'\ndata_=train[col].value_counts().sort_index()\ndata = go.Scatter(x=data_.index.tolist(), y=data_.values.tolist(),mode='lines',marker={'color':colors[3]})\n\nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),yaxis=dict(title='volume'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col)\nfig.show()\n\n\n\n\nmean_=[]\ndata_=train[col].value_counts().sort_index()\n\nindex_=data_.index.tolist()\nfor i in index_:\n        mean_.append(train[train[col]==i]['site_eui'].mean())\n        \n        \ndata = go.Scatter(x=index_, y=mean_,marker={'color':colors[5]})\n\nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),yaxis=dict(title='site_eui'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col+' vs Target')\nfig.show()","b03af4f6":"\ncol='building_class'\ndata_=train[col].value_counts().sort_index()\n\ndata = go.Bar(x=data_.index.tolist(), y=data_.values.tolist(),marker={'color':colors[1]})\n    \nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),\n                      yaxis=dict(title='volume'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col)\nfig.show()\n\n\n\nmean_=[]\nindex_=train[col].value_counts().sort_index().index.tolist()\nfor i in index_:\n        mean_.append(train[train[col]==i]['site_eui'].mean())\n\ndata = go.Bar(x=index_, y=mean_,marker={'color':colors[2]})\n    \nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),\n                      yaxis=dict(title='site_eui'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col+' vs Target')\nfig.show()","2628f61d":"\ncol='facility_type'\ndata_=train[col].value_counts().sort_index()\n\ndata = go.Bar(x=data_.index.tolist(), y=data_.values.tolist(),marker={'color':colors[1]})\n    \nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),\n                      yaxis=dict(title='volume'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col)\nfig.show()\n\n\n\n\nmean_=[]\nindex_=train[col].value_counts().sort_index().index.tolist()\nfor i in index_:\n        mean_.append(train[train[col]==i]['site_eui'].mean())\n\ndata = go.Bar(x=index_, y=mean_,marker={'color':colors[2]})\n    \nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),\n                      yaxis=dict(title='site_eui'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col+' vs Target')\nfig.show()","f4e63861":"col='year_built'\ndata_=train[col].value_counts().sort_index()\n\ndata_=data_[1600:]\n\ndata = go.Bar(x=data_.index.tolist(), y=data_.values.tolist(),marker={'color':colors[1]})\n    \nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),\n                      yaxis=dict(title='volume'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col)\nfig.show()\n\n\n\nmean_=[]\nindex_=data_.index\n\nfor i in index_:\n        mean_.append(train[train[col]==i]['site_eui'].mean())\n\ndata = go.Bar(x=index_, y=mean_,marker={'color':colors[2]})\n    \nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),\n                      yaxis=dict(title='site_eui'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col+' vs Target')\nfig.show()","7828d42a":"col='energy_star_rating'\ndata_=train[col].value_counts().sort_index()\n\ndata = go.Bar(x=data_.index.tolist(), y=data_.values.tolist(),marker={'color':colors[1]})\n    \nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),\n                      yaxis=dict(title='volume'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col)\nfig.show()\n\n\n\nmean_=[]\nindex_=data_.index\n\nfor i in index_:\n        mean_.append(train[train[col]==i]['site_eui'].mean())\n\ndata = go.Bar(x=index_, y=mean_,marker={'color':colors[2]})\n    \nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),\n                      yaxis=dict(title='site_eui'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col+' vs Target')\nfig.show()","c0a744da":"col='ELEVATION'\ndata_=train[col].value_counts().sort_index()\ndata = go.Scatter(x=data_.index.tolist(), y=data_.values.tolist(),mode='lines',marker={'color':colors[3]})\n\nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),yaxis=dict(title='volume'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col)\nfig.show()\n\n\nmean_=[]\ndata_=train[col].value_counts().sort_index()\n\nindex_=data_.index.tolist()\nfor i in index_:\n        mean_.append(train[train[col]==i]['site_eui'].mean())\n        \n        \ndata = go.Scatter(x=index_, y=mean_,marker={'color':colors[5]})\n\nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),yaxis=dict(title='site_eui'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col+' vs Target')\nfig.show()","5cb45fc5":"col='january_min_temp'\ndata_=train[col].value_counts().sort_index()\n\ndata = go.Bar(x=data_.index.tolist(), y=data_.values.tolist(),marker={'color':colors[1]})\n    \nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),\n                      yaxis=dict(title='volume'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col)\nfig.show()\n\n\n\n\nmean_=[]\nindex_=data_.index\n\nfor i in index_:\n        mean_.append(train[train[col]==i]['site_eui'].mean())\n\ndata = go.Bar(x=index_, y=mean_,marker={'color':colors[2]})\n    \nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),\n                      yaxis=dict(title='site_eui'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col+' vs Target')\nfig.show()","6ad0204d":"col='january_max_temp'\ndata_=train[col].value_counts().sort_index()\n\ndata = go.Bar(x=data_.index.tolist(), y=data_.values.tolist(),marker={'color':colors[1]})\n    \nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),\n                      yaxis=dict(title='volume'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col)\nfig.show()\n\n\n\nmean_=[]\nindex_=data_.index\n\nfor i in index_:\n        mean_.append(train[train[col]==i]['site_eui'].mean())\n\ndata = go.Bar(x=index_, y=mean_,marker={'color':colors[2]})\n    \nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),\n                      yaxis=dict(title='site_eui'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col+' vs Target')\nfig.show()","f5a86d15":"col='july_min_temp'\ndata_=train[col].value_counts().sort_index()\n\ndata = go.Bar(x=data_.index.tolist(), y=data_.values.tolist(),marker={'color':colors[1]})\n    \nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),\n                      yaxis=dict(title='volume'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col)\nfig.show()\n\n\n\nmean_=[]\nindex_=data_.index\n\nfor i in index_:\n        mean_.append(train[train[col]==i]['site_eui'].mean())\n\ndata = go.Bar(x=index_, y=mean_,marker={'color':colors[2]})\n    \nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),\n                      yaxis=dict(title='site_eui'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col+' vs Target')\nfig.show()","88fb5b29":"col='july_max_temp'\ndata_=train[col].value_counts().sort_index()\n\ndata = go.Bar(x=data_.index.tolist(), y=data_.values.tolist(),marker={'color':colors[1]})\n    \nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),\n                      yaxis=dict(title='volume'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col)\nfig.show()\n\n\n\nmean_=[]\nindex_=data_.index\n\nfor i in index_:\n        mean_.append(train[train[col]==i]['site_eui'].mean())\n\ndata = go.Bar(x=index_, y=mean_,marker={'color':colors[2]})\n    \nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),\n                      yaxis=dict(title='site_eui'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col+' vs Target')\nfig.show()","1aef03ba":"train.columns","bd0105e4":"col='cooling_degree_days'\ndata_=train[col].value_counts().sort_index()\ndata = go.Scatter(x=data_.index.tolist(), y=data_.values.tolist(),mode='lines',marker={'color':colors[3]})\n\nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),yaxis=dict(title='volume'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col)\nfig.show()\n\n\nmean_=[]\ndata_=train[col].value_counts().sort_index()\n\nindex_=data_.index.tolist()\nfor i in index_:\n        mean_.append(train[train[col]==i]['site_eui'].mean())\n        \n        \ndata = go.Scatter(x=index_, y=mean_,marker={'color':colors[5]})\n\nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),yaxis=dict(title='site_eui'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col+' vs Target')\nfig.show()","e1f05daa":"col='heating_degree_days'\ndata_=train[col].value_counts().sort_index()\ndata = go.Scatter(x=data_.index.tolist(), y=data_.values.tolist(),mode='lines',marker={'color':colors[3]})\n\nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),yaxis=dict(title='volume'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col)\nfig.show()\n\n\nmean_=[]\ndata_=train[col].value_counts().sort_index()\n\nindex_=data_.index.tolist()\nfor i in index_:\n        mean_.append(train[train[col]==i]['site_eui'].mean())\n        \n        \ndata = go.Scatter(x=index_, y=mean_,marker={'color':colors[5]})\n\nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),yaxis=dict(title='site_eui'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col+' vs Target')\nfig.show()","d5b5972a":"col='precipitation_inches'\ndata_=train[col].value_counts().sort_index()\ndata = go.Scatter(x=data_.index.tolist(), y=data_.values.tolist(),mode='lines',marker={'color':colors[3]})\n\nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),yaxis=dict(title='volume'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col)\nfig.show()\n\n\nmean_=[]\ndata_=train[col].value_counts().sort_index()\n\nindex_=data_.index.tolist()\nfor i in index_:\n        mean_.append(train[train[col]==i]['site_eui'].mean())\n        \n        \ndata = go.Scatter(x=index_, y=mean_,marker={'color':colors[5]})\n\nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),yaxis=dict(title='site_eui'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col+' vs Target')\nfig.show()","8e138cf0":"col='snowfall_inches'\ndata_=train[col].value_counts().sort_index()\ndata = go.Scatter(x=data_.index.tolist(), y=data_.values.tolist(),mode='lines',marker={'color':colors[3]})\n\nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),yaxis=dict(title='volume'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col)\nfig.show()\n\n\nmean_=[]\ndata_=train[col].value_counts().sort_index()\n\nindex_=data_.index.tolist()\nfor i in index_:\n        mean_.append(train[train[col]==i]['site_eui'].mean())\n        \n        \ndata = go.Scatter(x=index_, y=mean_,marker={'color':colors[5]})\n\nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),yaxis=dict(title='site_eui'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col+' vs Target')\nfig.show()","0fe93698":"col='snowdepth_inches'\ndata_=train[col].value_counts().sort_index()\ndata = go.Scatter(x=data_.index.tolist(), y=data_.values.tolist(),mode='lines',marker={'color':colors[3]})\n\nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),yaxis=dict(title='volume'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col)\nfig.show()\n\n\nmean_=[]\ndata_=train[col].value_counts().sort_index()\n\nindex_=data_.index.tolist()\nfor i in index_:\n        mean_.append(train[train[col]==i]['site_eui'].mean())\n        \n        \ndata = go.Scatter(x=index_, y=mean_,marker={'color':colors[5]})\n\nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),yaxis=dict(title='site_eui'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col+' vs Target')\nfig.show()","72d7589b":"col='avg_temp'\ndata_=train[col].value_counts().sort_index()\ndata = go.Scatter(x=data_.index.tolist(), y=data_.values.tolist(),mode='lines',marker={'color':colors[3]})\n\nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),yaxis=dict(title='volume'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col)\nfig.show()\n\n\nmean_=[]\ndata_=train[col].value_counts().sort_index()\n\nindex_=data_.index.tolist()\nfor i in index_:\n        mean_.append(train[train[col]==i]['site_eui'].mean())\n        \n        \ndata = go.Scatter(x=index_, y=mean_,marker={'color':colors[5]})\n\nlayout = go.Layout(showlegend=False, xaxis=dict(title=col),yaxis=dict(title='site_eui'))\nfig = go.Figure(data, layout)\nfig.update_layout(title=col+' vs Target')\nfig.show()","22a8325b":"test.describe()","2dbc0660":"test.describe(include='O')","260df748":"pd.set_option('display.max_rows', 100)\nprint('length of train=',len(train))\nnull_train=train.isnull().sum()\nnull_train[null_train!=0]","fb5f2200":"print('length of test=',len(test))\nnull_test=test.isnull().sum()\nnull_test[null_train!=0]","5099aba2":"train.drop(['days_with_fog','max_wind_speed','direction_peak_wind_speed','direction_max_wind_speed'],axis=1,inplace=True)","145641ae":"train","9c6573cd":"Columns\n\n* id: building id\n* Year_Factor: anonymized year in which the weather and energy usage factors were observed\n* State_Factor: anonymized state in which the building is located\n* building_class: building classification\n* facility_type: building usage type\n* floor_area: floor area (in square feet) of the building\n* year_built: year in which the building was constructed\n* energy_star_rating: the energy star rating of the building\n* ELEVATION: elevation of the building location\n* january_min_temp: minimum temperature in January (in Fahrenheit) at the location of the building\n* january_avg_temp: average temperature in January (in Fahrenheit) at the location of the building\n* january_max_temp: maximum temperature in January (in Fahrenheit) at the location of the building\n* cooling_degree_days: cooling degree day for a given day is the number of degrees where the daily * average temperature exceeds 65 degrees Fahrenheit. Each month is summed to produce an annual total at the location of the building.\n* heating_degree_days: heating degree day for a given day is the number of degrees where the daily average temperature falls under 65 degrees Fahrenheit. Each month is summed to produce an annual total at the location of the building.\n* precipitation_inches: annual precipitation in inches at the location of the building\n* snowfall_inches: annual snowfall in inches at the location of the building\n* snowdepth_inches: annual snow depth in inches at the location of the building\n* avg_temp: average temperature over a year at the location of the building\n* days_below_30F: total number of days below 30 degrees Fahrenheit at the location of the building\n* days_below_20F: total number of days below 20 degrees Fahrenheit at the location of the building\n* days_below_10F: total number of days below 10 degrees Fahrenheit at the location of the building\n* days_below_0F: total number of days below 0 degrees Fahrenheit at the location of the building\n* days_above_80F: total number of days above 80 degrees Fahrenheit at the location of the building\n* days_above_90F: total number of days above 90 degrees Fahrenheit at the location of the building\n* days_above_100F: total number of days above 100 degrees Fahrenheit at the location of the building\n* days_above_110F: total number of days above 110 degrees Fahrenheit at the location of the building\n* direction_max_wind_speed: wind direction for maximum wind speed at the location of the building. * Given in 360-degree compass point directions (e.g. 360 = north, 180 = south, etc.).\n* direction_peak_wind_speed: wind direction for peak wind gust speed at the location of the building. Given in 360-degree compass point directions (e.g. 360 = north, 180 = south, etc.).\n* max_wind_speed: maximum wind speed at the location of the building\n* days_with_fog: number of days with fog at the location of the building\n\n\n* `id\uff1a`\u5efa\u7269ID\n\n* `Year_Factor\uff1a`\u5929\u5019\u3068\u30a8\u30cd\u30eb\u30ae\u30fc\u4f7f\u7528\u91cf\u306e\u8981\u56e0\u304c\u89b3\u6e2c\u3055\u308c\u305f\u3001\u533f\u540d\u5316\u3055\u308c\u305f\u5e74\n\n* `State_Factor\uff1a`\u5efa\u7269\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u533f\u540d\u5316\u3055\u308c\u305f\u72b6\u614b\n\n* `building_class\uff1a`\u5efa\u7269\u306e\u5206\u985e\n\n* `facility_type\uff1a`\u5efa\u7269\u306e\u4f7f\u7528\u30bf\u30a4\u30d7\n\n* `floor_area\uff1a`\u5efa\u7269\u306e\u5e8a\u9762\u7a4d\uff08\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\uff09\n\n* `year_built\uff1a`\u5efa\u7269\u304c\u5efa\u8a2d\u3055\u308c\u305f\u5e74\n\n* `energy_star_rating\uff1a`\u5efa\u7269\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u30b9\u30bf\u30fc\u8a55\u4fa1\n\n* `ELEVATION\uff1a`\u5efa\u7269\u306e\u5834\u6240\u306e\u6a19\u9ad8\n\n\n* `cooling_degree_days\uff1a`\u7279\u5b9a\u306e\u65e5\u306e\u51b7\u623f\u5ea6\u65e5\u306f\u30011\u65e5\u306e\u5e73\u5747\u6c17\u6e29\u304c\u83ef\u6c0f65\u5ea6\u3092\u8d85\u3048\u308b\u5ea6\u6570\u3067\u3059\u3002\u6bce\u6708\u5408\u8a08\u3055\u308c\u3001\u5efa\u7269\u306e\u5834\u6240\u3067\u306e\u5e74\u9593\u5408\u8a08\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n* `Heating_degree_days\uff1a`\u7279\u5b9a\u306e\u65e5\u306e\u6696\u623f\u5ea6\u65e5\u306f\u30011\u65e5\u306e\u5e73\u5747\u6c17\u6e29\u304c\u83ef\u6c0f65\u5ea6\u3092\u4e0b\u56de\u308b\u5ea6\u6570\u3067\u3059\u3002\u6bce\u6708\u5408\u8a08\u3055\u308c\u3001\u5efa\u7269\u306e\u5834\u6240\u3067\u306e\u5e74\u9593\u5408\u8a08\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n* `precipitation_inches\uff1a`\u5efa\u7269\u306e\u5834\u6240\u3067\u306e\u5e74\u9593\u964d\u6c34\u91cf\uff08\u30a4\u30f3\u30c1\uff09\n\n* `snowfall_inches\uff1a`\u5efa\u7269\u306e\u5834\u6240\u3067\u306e\u5e74\u9593\u964d\u96ea\u91cf\uff08\u30a4\u30f3\u30c1\uff09\n\n* `snowdepth_inches\uff1a`\u5efa\u7269\u306e\u5834\u6240\u3067\u306e\u5e74\u9593\u7a4d\u96ea\u6df1\uff08\u30a4\u30f3\u30c1\uff09\n\n* `avg_temp\uff1a`\u5efa\u7269\u306e\u5834\u6240\u3067\u306e1\u5e74\u9593\u306e\u5e73\u5747\u6c17\u6e29\n\n* `days_below_30F\uff1a`\u5efa\u7269\u306e\u5834\u6240\u3067\u83ef\u6c0f30\u5ea6\u672a\u6e80\u306e\u5408\u8a08\u65e5\u6570\n\n* `days_below_20F\uff1a`\u5efa\u7269\u306e\u5834\u6240\u3067\u83ef\u6c0f20\u5ea6\u672a\u6e80\u306e\u5408\u8a08\u65e5\u6570\n\n* `days_below_10F\uff1a`\u5efa\u7269\u306e\u5834\u6240\u3067\u83ef\u6c0f10\u5ea6\u672a\u6e80\u306e\u5408\u8a08\u65e5\u6570\n\n* `days_below_0F\uff1a`\u5efa\u7269\u306e\u5834\u6240\u3067\u83ef\u6c0f0\u5ea6\u672a\u6e80\u306e\u5408\u8a08\u65e5\u6570\n\n* `days_above_80F\uff1a`\u5efa\u7269\u306e\u5834\u6240\u3067\u83ef\u6c0f80\u5ea6\u3092\u8d85\u3048\u308b\u65e5\u6570\u306e\u5408\u8a08\n\n* `days_above_90F\uff1a`\u5efa\u7269\u306e\u5834\u6240\u3067\u83ef\u6c0f90\u5ea6\u3092\u8d85\u3048\u308b\u65e5\u6570\u306e\u5408\u8a08\n\n* `days_above_100F\uff1a`\u5efa\u7269\u306e\u5834\u6240\u3067\u83ef\u6c0f100\u5ea6\u3092\u8d85\u3048\u308b\u65e5\u6570\u306e\u5408\u8a08\n\n* `days_above_110F\uff1a`\u5efa\u7269\u306e\u5834\u6240\u3067\u83ef\u6c0f110\u5ea6\u3092\u8d85\u3048\u308b\u65e5\u6570\u306e\u5408\u8a08\n\n* `direction_max_wind_speed\uff1a`\u5efa\u7269\u306e\u5834\u6240\u3067\u306e\u6700\u5927\u98a8\u901f\u306e\u98a8\u5411\u3002 360\u5ea6\u306e\u30b3\u30f3\u30d1\u30b9\u30dd\u30a4\u30f3\u30c8\u306e\u65b9\u5411\u3067\u6307\u5b9a\u3055\u308c\u307e\u3059\uff08\u305f\u3068\u3048\u3070\u3001360 =\u5317\u3001180 =\u5357\u306a\u3069\uff09\u3002\n\n* `direction_peak_wind_speed\uff1a`\u5efa\u7269\u306e\u5834\u6240\u3067\u306e\u7a81\u98a8\u306e\u30d4\u30fc\u30af\u901f\u5ea6\u306e\u98a8\u5411\u3002 360\u5ea6\u306e\u30b3\u30f3\u30d1\u30b9\u30dd\u30a4\u30f3\u30c8\u306e\u65b9\u5411\u3067\u6307\u5b9a\u3055\u308c\u307e\u3059\uff08\u305f\u3068\u3048\u3070\u3001360 =\u5317\u3001180 =\u5357\u306a\u3069\uff09\u3002\n\n* `max_wind_speed\uff1a`\u5efa\u7269\u306e\u5834\u6240\u3067\u306e\u6700\u5927\u98a8\u901f\n\n* `days_with_fog\uff1a`\u5efa\u7269\u306e\u5834\u6240\u3067\u9727\u304c\u767a\u751f\u3057\u305f\u65e5\u6570\n\n* `site_eui\uff1a`EUI\u306e\u89b3\u6e2c\u5024(\u30a8\u30cd\u30eb\u30ae\u30fc\u6d88\u8cbb\u91cf).\u30b3\u30f3\u30c6\u30b9\u30c8\u306e\u76ee\u6a19\n\n\n##### min_temp&avg_temp&max_temp of January to December\n* `january_min_temp\uff1a` 1\u6708\u306e\u6700\u4f4e\u6c17\u6e29\uff08\u83ef\u6c0f\uff09\u5efa\u7269\u306e\u5834\u6240\n\n* `january_avg_temp\uff1a`\u5efa\u7269\u306e\u5834\u6240\u3067\u306e1\u6708\u306e\u5e73\u5747\u6c17\u6e29\uff08\u83ef\u6c0f\uff09\n\n* `january_max_temp\uff1a` 1\u6708\u306e\u6700\u9ad8\u6c17\u6e29\uff08\u83ef\u6c0f\uff09\u5efa\u7269\u306e\u5834\u6240\n\n\nReflection:[WiDS2022 LGBM Starter[W & B]](https:\/\/www.kaggle.com\/usharengaraju\/wids2022-lgbm-starter-w-b)\n","4a486096":"## building_class\n* building classification\n* \u5efa\u7269\u306e\u5206\u985e","a676ce8a":"## avg_temp\n\n* average temperature over a year at the location of the building\n\n* \u5efa\u7269\u306e\u5834\u6240\u3067\u306e1\u5e74\u9593\u306e\u5e73\u5747\u6c17\u6e29","4d090134":"We can see the target was higher when the temperature was lower in January.\nThen I try to see same data of July.\n\n1\u6708\u306e\u6c17\u6e29\u304c\u4f4e\u3044\u307b\u3069target\u304c\u9ad8\u304b\u3063\u305f\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u3067\u306f7\u6708\u306e\u540c\u3058\u30c7\u30fc\u30bf\u3092\u898b\u3066\u898b\u307e\u3059\u3002\n","3bd726ef":"## State_Factor\n\n","e7ad8583":"### Year_Factor\n\n* anonymized year in which the weather and energy usage factors were observed\n* \u5929\u5019\u3068\u30a8\u30cd\u30eb\u30ae\u30fc\u4f7f\u7528\u91cf\u306e\u8981\u56e0\u304c\u89b3\u6e2c\u3055\u308c\u305f\u3001\u533f\u540d\u5316\u3055\u308c\u305f\u5e74","e72f66f9":"## year_built\n* year in which the building was constructed\n* \u5efa\u7269\u304c\u5efa\u8a2d\u3055\u308c\u305f\u5e74","ac3a9870":"## precipitation_inches","33169c7a":"I'm continuing to write this notebook.","e40d7730":"# Train ","4d13fd79":"The rates of missingdata of test are more than that of train.\nEspecially, 'days_with_fog'\u3001 'max_wind_speed'\u3001 'direction_peak_wind_speed'\u3001 'direction_max_wind_speed' are almost missing so we should delete the 4 columns.\n\n\u30c6\u30b9\u30c8\u306e\u6b20\u843d\u30c7\u30fc\u30bf\u306e\u5272\u5408\u306ftrain\u306e\u305d\u308c\u3088\u308a\u3082\u591a\u3044\u3067\u3059\u3002 \n\n\u7279\u306b\u3001\u300cdays_with_fog\u300d\u3001\u300cmax_wind_speed\u300d\u3001\u300cdirection_peak_wind_speed\u300d\u3001\u300cdirection_max_wind_speed\u300d\u304c\u307b\u3068\u3093\u3069\u6b20\u843d\u3057\u3066\u3044\u308b\u305f\u3081\u30014\u5217\u3092\u524a\u9664\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n","b2500f54":"This feature may have inverse correlation with Target.\n\n\u3053\u306e\u6a5f\u80fd\u306f\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u9006\u76f8\u95a2\u95a2\u4fc2\u304c\u3042\u308a\u307e\u3059\u3002","8292d6cb":"## ELEVATION\n* elevation of the building location\n* \u5efa\u7269\u306e\u5834\u6240\u306e\u6a19\u9ad8","b6b3bb29":"# About Features","62813ce5":"* annual precipitation in inches at the location of the building.\n* \u5efa\u7269\u306e\u5834\u6240\u3067\u306e\u5e74\u9593\u964d\u6c34\u91cf\uff08\u30a4\u30f3\u30c1\uff09","6abe6d4d":"There are so many null in the columns that are 'days_with_fog','max_wind_speed','direction_peak_wind_speed','direction_max_wind_spee'.There are missingdata in the half of the data.\n\n\u300cdays_with_fog\u300d\u3001\u300cmax_wind_speed\u300d\u3001\u300cdirection_peak_wind_speed\u300d\u3001\u300cdirection_max_wind_speed\u300d\u306e\u5217\u306b\u975e\u5e38\u306b\u591a\u304f\u306enull\u304c\u3042\u308a\u3001\u30c7\u30fc\u30bf\u306e\u534a\u5206\u306b\u6b20\u843d\u3057\u3066\u3044\u308b\u3002","976a965b":"It may be correlation between heating_degree_days and target.\n\u3053\u308c\u306f\u3001heating_degree_days\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u9593\u306e\u76f8\u95a2\u95a2\u4fc2\u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002","483852e8":"## cooling_degree_days\/heating_degree_days","8d10007e":"* floor area (in square feet) of the building\n* \u5efa\u7269\u306e\u5e8a\u9762\u7a4d\uff08\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\uff09","9b8518c4":"##  energy_star_rating\n\n* the energy star rating of the building\n* \u5efa\u7269\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u30b9\u30bf\u30fc\u8a55\u4fa1\n","85a8472b":"## facility_type\n* building usage type\n* \u5efa\u7269\u306e\u4f7f\u7528\u30bf\u30a4\u30d7","162a6751":"* test.csv- the test dataset where we withhold the observed values of the Site EUI for each row. \n\n* test.csv-\u5404\u884c\u306e\u30b5\u30a4\u30c8EUI\u306e\u89b3\u6e2c\u5024(target)\u3092\u5f15\u3044\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3002\n","ac0aa617":"We can see the tendency of the target was little different each seasons.\n\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u50be\u5411\u306f\u5b63\u7bc0\u3054\u3068\u306b\u5c11\u3057\u7570\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002 ","40c64dd6":"## snowfall_inches\/snowdepth_inches\n\n* snowfall_inches: annual snowfall in inches at the location of the building\n* snowdepth_inches: annual snow depth in inches at the location of the building\n\n\n* snowfall_inches\uff1a\u5efa\u7269\u306e\u5834\u6240\u3067\u306e\u5e74\u9593\u964d\u96ea\u91cf\uff08\u30a4\u30f3\u30c1\uff09\n* snowdepth_inches\uff1a\u5efa\u7269\u306e\u5834\u6240\u3067\u306e\u5e74\u9593\u7a4d\u96ea\u6df1\uff08\u30a4\u30f3\u30c1\uff09","8fa14447":"# Missing data","2bed6e2d":"### floor_area","fcbfc641":"# test","0a1d92f2":"## Target\n\nThe goal of this competition is to predict the energy consumption using building characteristics and climate and weather variables.\n\nSimply\u3000says. you have to predict 'site_eui' of train datasets.\n\n\u3053\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u306e\u76ee\u6a19\u306f\u3001\u5efa\u7269\u306e\u7279\u6027\u3068\u6c17\u5019\u304a\u3088\u3073\u6c17\u8c61\u5909\u6570\u3092\u4f7f\u7528\u3057\u3066\u30a8\u30cd\u30eb\u30ae\u30fc\u6d88\u8cbb\u91cf\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\ntrain\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u300csite_eui\u300d\u3092\u4e88\u6e2c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002","4153daab":"### minimum\u3000temperature\u3000& average temperature & max temperature\n* minimum\u3000temperature\u3000& average temperature & max temperature in January to December.\n* 1\u6708\u304b\u308912\u6708\u6700\u4f4e\u6c17\u6e29\u3068\u5e73\u5747\u6c17\u6e29\u3068\u6700\u9ad8\u6c17\u6e29","890d4e45":"* anonymized state in which the building is located\n* \u5efa\u7269\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u533f\u540d\u5316\u3055\u308c\u305f\u72b6\u614b"}}