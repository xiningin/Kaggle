{"cell_type":{"5086ba1b":"code","7191cdfb":"code","41bab437":"code","6b5c25a2":"code","ef6732c8":"code","0bdaeeae":"code","063b3652":"code","8ce7e632":"code","f7b096ec":"code","8e6f514f":"code","24a9ce8f":"code","83818617":"code","c327852c":"code","8b082e09":"code","a4748c22":"code","e15890d5":"code","bfe399fa":"code","44ca83fe":"code","a33ad714":"code","c25d2641":"code","32ec793c":"code","4ed6c9dc":"code","d03635a3":"code","6b61b9ac":"code","79345122":"code","da304326":"code","6ce74c39":"code","46a83f39":"code","a58dfbd8":"code","14b026e8":"code","bae6a98f":"markdown","b5cd746a":"markdown","931addf6":"markdown","814a8ddb":"markdown","648a07fa":"markdown","aa8c12d0":"markdown","ded72b08":"markdown","8bf161a1":"markdown","64d6e53a":"markdown","06173ac7":"markdown","064cca62":"markdown","b79e1220":"markdown","ad61e5a7":"markdown","5fd52d58":"markdown","5240c8d2":"markdown","e0994cda":"markdown","da1abb59":"markdown","63e2d00c":"markdown","ab003e92":"markdown","b5e08fd3":"markdown"},"source":{"5086ba1b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport statsmodels.api as sm\nimport pandas_datareader\nimport datetime\nimport pandas_datareader.data as web","7191cdfb":"start= datetime.datetime(2015,1,1)\nend= datetime.datetime.today()\n\n#another way to set up dates:\n#start = pd.to_datetime('2015-01-01')\n#end = pd.to_datetime('2020-01-01')","41bab437":"aapl = web.DataReader('AAPL', 'yahoo', start, end)\nibm = web.DataReader('IBM', 'yahoo', start, end)\namzn = web.DataReader('AMZN', 'yahoo', start, end)\n\n#Alternative way to download portfolio data:\n#aapl = quandl.get('WIKI\/AAPL.11',start_date=start,end_date=end)\n\naapl.head()","6b5c25a2":"aapl.info()","ef6732c8":"aapl = aapl[['Adj Close']]\nibm = ibm[['Adj Close']]\namzn = amzn[['Adj Close']]","0bdaeeae":"aapl.head()","063b3652":"for stock_df in (aapl, ibm, amzn):\n    stock_df['Normed Return'] = stock_df['Adj Close']\/ stock_df.iloc[0]['Adj Close']","8ce7e632":"for stock_df, allo in zip((aapl, ibm,amzn),[0.2,0.3,0.5]):\n    stock_df['Allocation'] = stock_df['Normed Return']*allo","f7b096ec":"for stock_df in (aapl, ibm, amzn):\n    stock_df['Position Amount']= stock_df['Allocation']*500000","8e6f514f":"total_pos_vals = [aapl['Position Amount'], ibm['Position Amount'], amzn['Position Amount']]\nportf_vals = pd.concat(total_pos_vals, axis = 1)\nportf_vals.columns = ['Apple Pos', 'IBM Pos', 'Amazon Pos']\nportf_vals['Total Pos'] = portf_vals.sum(axis=1)\nportf_vals['Total Pos'].plot(figsize = (10,6))","24a9ce8f":"portf_vals['2019-01-01':].drop('Total Pos', axis = 1).plot(figsize=(10,6));","83818617":"portf_vals['Daily Return'] = portf_vals['Total Pos'].pct_change(1)\nportf_vals.dropna(inplace = True)\nprint('Daily Return Average: ',portf_vals['Daily Return'].mean())\nprint('Daily Return Standard Deviation: ',portf_vals['Daily Return'].std())","c327852c":"portf_vals['Daily Return'].plot(kind = 'hist', bins=100, figsize = (6,8), color = 'green')\nportf_vals['Daily Return'].plot(kind = 'kde', figsize = (8,6), color = 'R');","8b082e09":"cumulative_return = 100*(portf_vals['Total Pos'][-1]\/portf_vals['Total Pos'][0]-1)\nprint('Cumulative return: ', cumulative_return)","a4748c22":"SR = portf_vals['Daily Return'].mean()\/portf_vals['Daily Return'].std()\nprint('Sharpe Ration = ', SR)","e15890d5":"#Annual Sharpe Ratio:\nASR = (252**0.5) * SR\nprint('Annualized Sharpe Ratio = ', ASR)","bfe399fa":"stocks = pd.concat([aapl['Adj Close'], ibm['Adj Close'], amzn['Adj Close']], axis = 1)\nstocks.columns = ['Apple', 'IBM', 'Amazon']\nstocks.head()","44ca83fe":"stocks.pct_change(1).mean()","a33ad714":"stocks.pct_change(1).corr()","c25d2641":"log_returns = np.log(stocks\/stocks.shift(1))\nlog_returns.hist(bins = 100, figsize = (12,8), color = 'g')\nplt.tight_layout()","32ec793c":"log_returns.cov()*252","4ed6c9dc":"np.random.seed(101)\nprint(stocks.columns)\n\nweights = np.array(np.random.random(3))\n\nprint('Random Weights: ')\nprint(weights)\n\n#However, their sum must be equal to 100\nprint('Rebalance')\nweights = weights\/np.sum(weights)\nprint(weights)","d03635a3":"exp_ret = np.sum((log_returns.mean() * weights) * 252)\nprint('Expected Portfolio Return: ',exp_ret)","6b61b9ac":"exp_vol = np.sqrt(np.dot(weights.T,np.dot(log_returns.cov() * 252, weights)))\nprint('Expected Volatility: ', exp_vol)","79345122":"SR = exp_ret\/exp_vol\nprint('Sharpe Ratio: ', SR)","da304326":"num_ports = 5000\nall_weights = np.zeros((num_ports,len(stocks.columns)))\nret_arr = np.zeros(num_ports)\nvol_arr = np.zeros(num_ports)\nsharpe_arr = np.zeros(num_ports)\n\nfor ind in range(num_ports):\n    weights = np.array(np.random.random(3))\n    weights = weights \/ np.sum(weights)\n    all_weights[ind,:] = weights\n    ret_arr[ind] = np.sum((log_returns.mean() * weights) *252)\n    vol_arr[ind] = np.sqrt(np.dot(weights.T, np.dot(log_returns.cov() * 252, weights)))\n    sharpe_arr[ind] = ret_arr[ind]\/vol_arr[ind]","6ce74c39":"sharpe_arr.max()","46a83f39":"sharpe_arr.argmax()","a58dfbd8":"all_weights[sharpe_arr.argmax(),:]","14b026e8":"plt.figure(figsize = (12,8))\nplt.scatter(vol_arr,ret_arr,c=sharpe_arr,cmap='Spectral')\nplt.colorbar(label='Sharpe Ratio')\nplt.xlabel('Volatility')\nplt.ylabel('Return')\n\n# Add red dot for max SR\nmax_sr_ret = ret_arr[sharpe_arr.argmax()]\nmax_sr_vol = vol_arr[sharpe_arr.argmax()]\nplt.scatter(max_sr_vol,max_sr_ret,c='red',s=50,edgecolors='black');","bae6a98f":"## Portfolio Statistics","b5cd746a":"## Portfolio Value:","931addf6":"To calculate Mean Daily Return:","814a8ddb":"20% to Apple, 30% to IBM and 50% to Amazon stocks. And assume that the initial investment was 500,000.","648a07fa":"To look at the distribution, let's take a look at a histogram and a KDE plot:","aa8c12d0":"Here is the optimal allocation for our portfolio","ded72b08":"Expected Return:","8bf161a1":"Index location for the best allocation:","64d6e53a":"Covarience of the columns:","06173ac7":"## Sharpe Ration","064cca62":"To calculate correlation between stocks:","b79e1220":"## Sharpe Ration for One Portfolio","ad61e5a7":"I hope you find this kernel useful and your UPVOTES would be highly appreciated","5fd52d58":"Let's plot the data:","5240c8d2":"Expected Volatility or Expected ","e0994cda":"# Choosing an optimal portfolio allocation.","da1abb59":"The Sharpe Ratio:","63e2d00c":"## Allocation: ","ab003e92":"Now let's allocate our securities in a most optimal way:","b5e08fd3":"So our Optimal Sharpe Ration is 1.36 and Optimal Portfolio Allocation is 27.9% for Aplle, 0.2% for IBM, and 71.8% for Amazon. So, I would conclude to substitute IMB shares to something more profitable."}}