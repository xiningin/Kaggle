{"cell_type":{"b40bfebf":"code","595ddda5":"code","880a59a0":"code","5cc18577":"code","96a27c62":"code","5c53258b":"code","d40b10b4":"code","ce7b2fea":"code","f4efde57":"code","2de994df":"code","ee29f15d":"code","783c9803":"code","4125c215":"code","03cb1800":"code","27e0f575":"code","b600557c":"code","3b038175":"code","8745f374":"code","ed542da0":"code","7c60257b":"code","d6f10ad6":"code","85371812":"code","8157f64e":"code","e413f891":"code","ed93ce9c":"code","1e765ad2":"code","7579108e":"code","bc2a45ab":"code","ba9c12bc":"code","50d8c969":"code","f5bfe58f":"code","333d2f5c":"code","3e3a6070":"code","3fc664ea":"code","445ca973":"code","f36bdf7b":"code","818a1d98":"code","d667efb6":"code","43d159c1":"code","baca730f":"code","da02039b":"code","6c051b7f":"code","0eca2432":"code","1805b464":"code","d085b9bc":"code","94995113":"code","e3c7adaa":"code","11b13aae":"code","847fd134":"code","06a49d1e":"code","91183528":"code","feb4398c":"code","3306207a":"code","31b17a8c":"code","180fe7c4":"code","12a79ee7":"code","09fb9a1d":"code","19e219d6":"code","9ac19945":"code","5bd95b5d":"code","7c062614":"code","4f40ab94":"code","8ca26dae":"code","04e66d92":"code","3b709c19":"code","08ac105c":"code","4e9780c2":"code","1b03510f":"code","8ffcb6d6":"code","ad9a4cfe":"code","34a9469b":"code","4555811f":"code","7a68e6c3":"code","8c173305":"code","a7a8b3c9":"code","dcd46aee":"code","97dec0b0":"code","531283b1":"code","ffaf6515":"code","b47672be":"code","ad08284b":"code","d78511dc":"code","113fa9b2":"code","087c1fe1":"code","35642475":"code","36ebba26":"code","53d6679c":"code","6e2833ca":"code","0bc18ab5":"code","be5aecfd":"code","982c2868":"code","d238b6e1":"code","93e63a5f":"code","7523b9d2":"code","eabc3064":"code","cd5ed9a2":"code","d77f5c3b":"code","be60dc10":"code","4d4d91d6":"code","5e581269":"code","24fc09b1":"code","b84d1a38":"code","9157c462":"code","6d57adcc":"code","5aed5c83":"code","148095fb":"code","4c180da0":"code","888bd850":"code","5d580ce0":"code","756b057a":"code","e9d2a6af":"code","9ef3b697":"code","a651201d":"code","11834340":"code","4213b374":"code","0942225a":"code","1a8dd445":"code","461a48fa":"code","552205cd":"code","7f103ea2":"code","ac982eec":"code","335e14cb":"code","6c3f3dc3":"code","4bc78d3a":"code","738be6b9":"code","f1e92659":"code","fceb803c":"code","82fd0ca8":"code","a16574c3":"code","63d781d3":"code","0cf308cf":"code","8ceb3b65":"code","06845909":"code","34e1b790":"code","f8d79f6a":"code","b16bcfd6":"code","ea3ca7ce":"code","c2fedf1c":"code","e0fbd70e":"code","6afe5b02":"code","e15d665f":"code","6456246a":"code","b08c9862":"code","f0f238f8":"code","deb6f51e":"code","af2ce202":"code","9465489c":"code","fb7f77c8":"code","22c7c61e":"code","0831610b":"code","62430a9e":"code","bedd98d2":"code","249a9bd0":"code","20ab86db":"code","2ede6ab6":"markdown","cbbac863":"markdown","2cc1ac62":"markdown","9b5db845":"markdown","f5796f74":"markdown","295d7f06":"markdown","34b7bbaa":"markdown","9c8b7923":"markdown","2489b875":"markdown","018d4027":"markdown","31b44834":"markdown","be48b708":"markdown","f5562c7c":"markdown","39ab9e19":"markdown","348a0c06":"markdown","2bb3cec0":"markdown","d3e8d1d3":"markdown","20627286":"markdown","d9d196e3":"markdown","e8655dca":"markdown","3ad4350e":"markdown","e6b789d9":"markdown","df6f250b":"markdown","e61788e3":"markdown","31f223e1":"markdown","af24f8a7":"markdown","c090924e":"markdown","26092612":"markdown","cbe3afa8":"markdown","4108048e":"markdown","1892b2f7":"markdown","06445bdd":"markdown","fee61da3":"markdown","3fd3e1e7":"markdown","5a39235c":"markdown","bb1025d4":"markdown","8c3336a2":"markdown","a1efc1e2":"markdown","c265fdb7":"markdown","45a7db68":"markdown","370d4aeb":"markdown","dc9ff636":"markdown","1784856f":"markdown","961536fe":"markdown","f0f869ca":"markdown","b6484e10":"markdown","9ef64c9c":"markdown","5b30c910":"markdown","e90c8dc2":"markdown","97ac3c34":"markdown","32d7a7d5":"markdown","4d33fb2d":"markdown","7760f2d4":"markdown","763bbe53":"markdown","ad27a524":"markdown","a14ccf65":"markdown","31d28831":"markdown","dabd633f":"markdown","1223b31f":"markdown","2d58db76":"markdown","3aa638aa":"markdown","12fd6a2a":"markdown","991f8ba9":"markdown","84fe25eb":"markdown","fd22e9af":"markdown","ce8a48c5":"markdown","1bc9ca5d":"markdown","79f4d335":"markdown","c5a15800":"markdown","2d317de1":"markdown","8b368a9b":"markdown","2e5e3665":"markdown","2ae86118":"markdown","bb6d600a":"markdown","c7f2c175":"markdown","eb9ce8c1":"markdown","ee968abc":"markdown","5724e1dd":"markdown","0b67d884":"markdown","26c0bf46":"markdown","a2d060c1":"markdown","2b999f96":"markdown","250b033e":"markdown","319019af":"markdown","7ba9f25b":"markdown","3217be74":"markdown","84e3c642":"markdown","92d82bfa":"markdown","284135b4":"markdown","8d456f62":"markdown","fcf3087a":"markdown","c37983c8":"markdown","18db1a72":"markdown","1f87e660":"markdown","24aaa5fc":"markdown","58f493f0":"markdown","f3a2a714":"markdown","8603fe36":"markdown","068d1d33":"markdown","32982f5e":"markdown","a5c1f328":"markdown","0545dd94":"markdown","f0a7dd9d":"markdown","1f21b855":"markdown","a1aa0ed9":"markdown","4139c647":"markdown"},"source":{"b40bfebf":"# \uae30\ubcf8 \ub370\uc774\ud130 \uc815\ub9ac \ubc0f \ucc98\ub9ac\nimport numpy as np\nimport pandas as pd\n\n# \uc2dc\uac01\ud654\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nplt.style.use('seaborn-whitegrid')\nimport missingno\n\n# \uc804\ucc98\ub9ac \ubc0f \uba38\uc2e0 \ub7ec\ub2dd \uc54c\uace0\ub9ac\uc998\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import VotingClassifier\n\n# \ubaa8\ub378 \ud29c\ub2dd \ubc0f \ud3c9\uac00\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn import model_selection\n\n# \uacbd\uace0 \uc81c\uac70 (\ud310\ub2e4\uc2a4\uac00 \uc5d0\ub7ec \uba54\uc138\uc9c0\ub97c \uc790\uc8fc \ub9cc\ub4e4\uc5b4 \ub0b4\uae30 \ub54c\ubb38\uc5d0 \uc774\ub97c \uc77c\ub2e8 \ubb34\uc2dc\ud558\ub3c4\ub85d \uc124\uc815\ud569\ub2c8\ub2e4.)\nimport sys\nimport warnings\n\nimport warnings\nwarnings.filterwarnings('ignore')","595ddda5":"# \uc774 \uac83\uc774 \ucc98\uc74c\ud558\ub294 \uc0ac\ub78c\uc5d0\uac8c \uc608\uc0c1\ubcf4\ub2e4 \uc5b4\ub824\uc6b8 \uc218 \uc788\ub294\ub370 \ubcf5\uc0ac\ud55c \uac83\uc5d0\uc11c \ub370\uc774\ud130\uac00 \uc804\ub2ec\uc774 \uc798 \uc548 \ub418\uc5c8\ub2e4\uba74 \"+Add Data\" \ub204\ub974\uc2dc\uace0 'Competition Data'\uc5d0\uc11c \"Titanic Data\" \ubd88\ub7ec\uc628 \ud6c4 \ud30c\uc77c\uc744 \ucc0d\uc5b4\uc11c \uacbd\ub85c \uc8fc\uc18c \ud655\uc778\ud574\uc57c \ud568 \ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\n\n# \uc774\uc81c csv file\ub4e4 (test & train)\uc740 \ub370\uc774\ud130 \ud504\ub808\uc784\uc774 \ub418\uc5c8\uc2b5\ub2c8\ub2e4.","880a59a0":"train.head(n=3)","5cc18577":"train.tail()","96a27c62":"train.describe(include='all')","5c53258b":"train.dtypes","d40b10b4":"train.info()","ce7b2fea":"train.columns","f4efde57":"train.columns[3], train.columns[3:5]","2de994df":"train[5:20]","ee29f15d":"train.shape","783c9803":"# \ubcd1\ud569 \uc900\ube44\nntrain = train.shape[0]\nntest = test.shape[0]\n\n# \uc544\ub798\ub294 \ub530\ub85c \uc798 \ubaa8\uc154 \ub461\ub2c8\ub2e4.\ny_train = train['Survived'].values\npassId = test['PassengerId']\n\n# \ubcd1\ud568 \ud30c\uc77c \ub9cc\ub4e4\uae30\ndata = pd.concat((train, test))\n\n# \ub370\uc774\ud130 \ud589\uacfc \uc5f4\uc758 \ud06c\uae30\ub294\nprint(\"data size is: {}\".format(data.shape))","4125c215":"train['Survived'].value_counts()","03cb1800":"missingno.matrix(data, figsize = (15,8))","27e0f575":"data.isnull().sum() #\ube44\uc5b4 \uc788\ub294 \uac12\ub4e4\uc744 \uccb4\ud06c\ud574 \ubcf8\ub2e4.","b600557c":"data.Age.isnull().any()","3b038175":"data.columns","8745f374":"train.head()","ed542da0":"# Co-relation \ub9e4\ud2b8\ub9ad\uc2a4\ncorr = data.corr()\n# \ub9c8\uc2a4\ud06c \uc14b\uc5c5\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n# \uadf8\ub798\ud504 \uc14b\uc5c5\nplt.figure(figsize=(14, 8))\n# \uadf8\ub798\ud504 \ud0c0\uc774\ud2c0\nplt.title('Overall Correlation of Titanic Features', fontsize=18)\n#  Co-relation \ub9e4\ud2b8\ub9ad\uc2a4 \ub7f0\uce6d\nsns.heatmap(corr, mask=mask, annot=False,cmap='RdYlGn', linewidths=0.2, annot_kws={'size':20})\nplt.show()","7c60257b":"fig = plt.figure(figsize=(10,2))\nsns.countplot(y='Survived', data=train)\nprint(train.Survived.value_counts())","d6f10ad6":"f,ax=plt.subplots(1, 2, figsize=(15, 6))\ntrain['Survived'].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.1f%%', ax=ax[0], shadow=True)\nax[0].set_title('Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived',data=train, ax=ax[1])\nax[1].set_title('Survived')\nplt.show()","85371812":"def piecount(col):\n    f, ax = plt.subplots(1, 2, figsize=(15, 6))\n    train[col].value_counts().plot.pie(explode=[0.1 for i in range(train[col].nunique())], autopct='%1.1f%%', ax=ax[0], shadow=True)\n    ax[0].set_title(col)\n    ax[0].set_ylabel('')\n    sns.countplot(col, data=train, ax=ax[1])\n    ax[1].set_title(col)\n    plt.show()\n\npiecount('Survived')","8157f64e":"train.groupby(['Pclass','Survived'])['Survived'].count()","e413f891":"pd.crosstab(train.Pclass, train.Survived, margins=True).style.background_gradient(cmap='summer_r')","ed93ce9c":"f, ax = plt.subplots(1, 2, figsize=(12, 6))\ntrain[['Pclass','Survived']].groupby(['Pclass']).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived per Pcalss')\nsns.countplot('Pclass', hue='Survived', data=train, ax=ax[1])\nax[1].set_title('Pcalss Survived vs Not Survived')\nplt.show()","1e765ad2":"piecount(\"Pclass\")","7579108e":"data.Name.value_counts()","bc2a45ab":"temp = data.copy()\ntemp['Initial'] = 0\ntemp['Initial'] = data.Name.str.extract('([A-Za-z]+)\\.')","ba9c12bc":"temp['Initial'].value_counts()","50d8c969":"pd.crosstab(temp.Initial, temp.Sex).T.style.background_gradient(cmap='summer_r')","f5bfe58f":"def survpct(col):\n    return temp.groupby(col)['Survived'].mean()\n\nsurvpct('Initial')","333d2f5c":"temp['LastName'] = data.Name.str.extract('([A-Za-z]+)')","3e3a6070":"pd.crosstab(temp.LastName, temp.Survived).T.style.background_gradient(cmap='summer_r')","3fc664ea":"temp.loc[temp['Initial'] == 'Dona']","445ca973":"temp.loc[temp['Initial'] == 'Dona', 'Initial'] = 'Mrs'","f36bdf7b":"pd.crosstab(temp.Initial, temp.Survived).T.style.background_gradient(cmap='summer_r')","818a1d98":"temp['NumName'] = temp['LastName'].factorize()[0]","d667efb6":"pd.crosstab(temp.NumName, temp.Survived).T.style.background_gradient(cmap='summer_r')","43d159c1":"temp.loc[temp['LastName'] == 'Ali']","baca730f":"train[['Sex','Survived']].groupby(['Sex']).mean()","da02039b":"def bag(col, target, title, title1):\n    f,ax=plt.subplots(1,2,figsize=(12,5))\n    train.groupby([col])[target].mean().plot(kind='bar', ax=ax[0])\n    ax[0].set_title(title)\n    sns.countplot(col, hue=target, data=train, ax=ax[1])\n    ax[1].set_title(title1)\n    plt.show()\n\nbag('Sex','Survived','Survived per Sex','Sex Survived vs Not Survived')","6c051b7f":"pd.crosstab([train.Sex, train.Survived],train.Pclass,margins=True).style.background_gradient(cmap='summer_r')","0eca2432":"print('Oldest Passenger was', data['Age'].max(), 'Years')\nprint('Youngest Passenger was', data['Age'].min(), 'Years')\nprint('Average Age on the ship was', int(data['Age'].mean()), 'Years')","1805b464":"sns.swarmplot(x=train['Survived'], y=train['Age'])\nplt.xlabel(\"Survived\")\nplt.ylabel(\"Age\")\nplt.show()","d085b9bc":"f, ax = plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\", \"Age\", hue=\"Survived\", data=train, split=True, ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0, 110, 10))\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=train, split=True, ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0, 110, 10))\nplt.show()","94995113":"temp.groupby('Initial').agg({'Age': ['mean', 'count']}) #\uc774\ub2c8\uc15c \ubcc4 \ud3c9\uade0 \uc5f0\ub839 \uccb4\ud06c","e3c7adaa":"# \uc774\ub2c8\uc15c \ubcc4 \ud3c9\uade0 \uc5f0\ub839\uc744 \ube48\uac12\uc5d0 \ub123\uc5b4 \ubd05\ub2c8\ub2e4.\n\ntemp = temp.reset_index(drop=True)\n\ntemp['Age'] = temp.groupby('Initial')['Age'].apply(lambda x: x.fillna(x.mean()))\n\ntemp[31:50]","11b13aae":"temp['Initial'].replace(['Capt', 'Col', 'Countess', 'Don', 'Dona' , 'Dr', 'Jonkheer', 'Lady', 'Major', 'Master',  'Miss'  ,'Mlle', 'Mme', 'Mr', 'Mrs', 'Ms', 'Rev', 'Sir'], ['Sacrificed', 'Respected', 'Nobles', 'Mr', 'Mrs', 'Respected', 'Mr', 'Nobles', 'Respected', 'Kids', 'Miss', 'Nobles', 'Nobles', 'Mr', 'Mrs', 'Nobles', 'Sacrificed', 'Nobles'],inplace=True)\ntemp['Initial'].replace(['Kids', 'Miss', 'Mr', 'Mrs', 'Nobles', 'Respected', 'Sacrificed'], [4, 4, 2, 5, 6, 3, 1], inplace=True)","847fd134":"temp['Age_Range'] = pd.qcut(temp['Age'], 10)","06a49d1e":"survpct('Age_Range')","91183528":"temp['Agroup'] = 0\n\ntemp.loc[temp['Age'] < 1.0, 'Agroup'] = 1\ntemp.loc[(temp['Age'] >=1.0) & (temp['Age'] <= 3.0), 'Agroup'] = 2\ntemp.loc[(temp['Age'] > 3.0) & (temp['Age'] < 11.0), 'Agroup'] = 7\ntemp.loc[(temp['Age'] >= 11.0) & (temp['Age'] < 15.0), 'Agroup'] = 13\ntemp.loc[(temp['Age'] >= 15.0) & (temp['Age'] < 18.0), 'Agroup'] = 16\ntemp.loc[(temp['Age'] >= 18.0) & (temp['Age'] <=  20.0), 'Agroup'] = 18\ntemp.loc[(temp['Age'] > 20.0) & (temp['Age'] <= 22.0), 'Agroup'] = 21\ntemp.loc[(temp['Age'] > 22.0) & (temp['Age'] <= 26.0), 'Agroup'] = 24\ntemp.loc[(temp['Age'] > 26.0) & (temp['Age'] <= 30.0), 'Agroup'] = 28\ntemp.loc[(temp['Age'] > 30.0) & (temp['Age'] <= 32.0), 'Agroup'] = 31\ntemp.loc[(temp['Age'] > 32.0) & (temp['Age'] <= 34.0), 'Agroup'] = 33\ntemp.loc[(temp['Age'] > 34.0) & (temp['Age'] <= 38.0), 'Agroup'] = 36\ntemp.loc[(temp['Age'] > 38.0) & (temp['Age'] <= 52.0), 'Agroup'] = 45\ntemp.loc[(temp['Age'] > 52.0) & (temp['Age'] <= 75.0), 'Agroup'] = 60\ntemp.loc[temp['Age'] > 75.0, 'Agroup'] = 78","feb4398c":"temp.head()","3306207a":"temp.loc[(temp['Sex'] == 'male'), 'Sex'] = 1\ntemp.loc[(temp['Sex'] == 'female'), 'Sex'] = 2\ntemp.loc[(temp['Age'] < 1), 'Sex'] = 3","31b17a8c":"survpct('Sex')","180fe7c4":"temp.loc[(temp['SibSp'] == 0) & (temp['Parch'] == 0), 'Alone'] = 1","12a79ee7":"temp['Family'] = temp['Parch'] + temp['SibSp'] + 1","09fb9a1d":"temp.head(n=10)","19e219d6":"survpct('Family')","9ac19945":"bag('Parch', 'Survived', 'Survived per Parch', 'Parch Survived vs Not Survived')","5bd95b5d":"pd.crosstab([temp.Family, temp.Survived], temp.Pclass, margins=True).style.background_gradient(cmap='summer_r')","7c062614":"temp.Ticket.head()","4f40ab94":"temp.Ticket.isnull().any()","8ca26dae":"temp['Initick'] = temp.Ticket.str.extract('^([A-Za-z0-9]+)')\n\ntemp = temp.reset_index(drop=True)  # \ubcf5\uc0ac\ud55c \ud56d\ubaa9\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub2e4\ubcf4\uba74 'ValueError: cannot reindex from a duplicate axis` \uc694\ub7f0 \uc5d0\ub7ec\uac00 \ub098\uc624\ub294 \uacbd\uc6b0\uac00 \ub9ce\uc740\ub370 \uc774\ub7f0 \uac83\uc740 \uc694 \ucf54\ub4dc\ub85c \ub9ac\uc14b\uc744 \ud55c \ubc88 \ud574\uc8fc\uba74 \ub429\ub2c8\ub2e4.\n\ntemp.head()","04e66d92":"temp['Initick'] = temp.Ticket.str.extract('^([A-Za-z]+)')","3b709c19":"temp.head()","08ac105c":"temp['NumTicket'] = temp['Initick'].factorize()[0]","4e9780c2":"temp.head(n=15)","1b03510f":"temp.groupby('NumTicket')['Survived'].mean().to_frame().plot(kind='hist')\nplt.title('Distribution of survival rate for different tickets');","8ffcb6d6":"print('Highest Fare was:', temp['Fare'].max())\nprint('Lowest Fare was:', temp['Fare'].min())\nprint('Average Fare was:', temp['Fare'].mean())","ad9a4cfe":"f,ax=plt.subplots(1, 3, figsize=(20, 6))\nsns.distplot(train[train['Pclass'] == 1].Fare,ax=ax[0])\nax[0].set_title('Fares in Pclass 1')\nsns.distplot(train[train['Pclass'] == 2].Fare,ax=ax[1])\nax[1].set_title('Fares in Pclass 2')\nsns.distplot(train[train['Pclass'] == 3].Fare,ax=ax[2])\nax[2].set_title('Fares in Pclass 3')\nplt.show()","34a9469b":"def groupmean(a,b):\n    return temp.groupby([a])[b].mean().to_frame().style.background_gradient(cmap='summer_r')\n\ntemp['Fare_Range'] = pd.qcut(train['Fare'], 10)\ngroupmean('Fare_Range', 'Fare')","4555811f":"temp['Fgroup'] = 0\n\ntemp.loc[temp['Fare'] <= 0,'Fgroup'] = 0\ntemp.loc[(temp['Fare'] > 0) & (temp['Fare'] <= 7.125), 'Fgroup'] = 1\ntemp.loc[(temp['Fare'] > 7.125) & (temp['Fare'] <= 7.9), 'Fgroup'] = 2\ntemp.loc[(temp['Fare'] > 7.9) & (temp['Fare'] <= 8.03), 'Fgroup'] = 3\ntemp.loc[(temp['Fare'] > 8.03) & (temp['Fare'] < 10.5), 'Fgroup'] = 4\ntemp.loc[(temp['Fare'] >= 10.5) & (temp['Fare'] < 23.0), 'Fgroup'] = 5\ntemp.loc[(temp['Fare'] >= 23.0) & (temp['Fare'] <= 27.8), 'Fgroup'] = 6\ntemp.loc[(temp['Fare'] > 27.8) & (temp['Fare'] <= 51.0), 'Fgroup'] = 7\ntemp.loc[(temp['Fare'] > 51.0) & (temp['Fare'] <= 73.5), 'Fgroup'] = 8\ntemp.loc[temp['Fare'] > 73.5, 'Fgroup'] = 9\n\ntemp.head()","7a68e6c3":"temp.Cabin.value_counts().head(10)","8c173305":"temp.Cabin.isnull().sum()","a7a8b3c9":"temp['Inicab'] = 0\ntemp['Inicab'] = temp['Cabin'].str.extract('^([A-Za-z]+)')\ntemp.loc[((temp['Cabin'].isnull()) & (temp['Pclass'].values == 1)), 'Inicab'] = 'X'\ntemp.loc[((temp['Cabin'].isnull()) & (temp['Pclass'].values == 2)), 'Inicab'] = 'Y'\ntemp.loc[((temp['Cabin'].isnull()) & (temp['Pclass'].values == 3)), 'Inicab'] = 'Z'\n    \ntemp.head()","dcd46aee":"temp['Inicab'] = temp['Inicab'].factorize()[0]\n    \ntemp[11:20]","97dec0b0":"pd.crosstab([temp.Embarked, temp.Pclass], [temp.Sex, temp.Survived], margins=True).style.background_gradient(cmap='summer_r')","531283b1":"sns.factorplot('Embarked', 'Survived', data=temp)\nfig = plt.gcf()\nfig.set_size_inches(5, 3)\nplt.show()","ffaf6515":"f,ax=plt.subplots(2,2,figsize=(20,15))\nsns.countplot('Embarked', data=temp, ax=ax[0,0])\nax[0,0].set_title('No. Of Passengers Boarded')\nsns.countplot('Embarked', hue='Sex', data=temp, ax=ax[0,1])\nax[0,1].set_title('Male-Female Split for Embarked')\nsns.countplot('Embarked', hue='Survived', data=temp, ax=ax[1,0])\nax[1,0].set_title('Embarked vs Survived')\nsns.countplot('Embarked', hue='Pclass', data=temp, ax=ax[1,1])\nax[1,1].set_title('Embarked vs Pclass')\nplt.subplots_adjust(wspace=0.2,hspace=0.5)\nplt.show()","b47672be":"temp.loc[(temp.Embarked.isnull())]","ad08284b":"temp.loc[(temp.Ticket == '113572')]","d78511dc":"temp.sort_values(['Ticket'], ascending = True)[55:70]","113fa9b2":"temp.loc[(temp.Embarked.isnull()), 'Embarked'] = 'S'","087c1fe1":"temp.loc[(temp.Embarked.isnull())]","35642475":"temp['Embarked'] = temp['Embarked'].factorize()[0]\n    \ntemp[11:20]","36ebba26":"survpct('Initial')","53d6679c":"survpct('Pclass')","6e2833ca":"survpct('Sex')","0bc18ab5":"survpct('Age').head()","be5aecfd":"survpct('Fgroup')","982c2868":"temp['Priority'] = 0\ntemp.loc[(temp['Initial'] == 6), 'Priority'] = 1\ntemp.loc[(temp['Pclass'] == 1) & (temp['Sex'] == 2), 'Priority'] = 2\ntemp.loc[(temp['Age'] < 1), 'Priority'] = 3\ntemp.loc[(temp['Pclass'] == 1) & (temp['Age'] <= 17), 'Priority'] = 4\ntemp.loc[(temp['Pclass'] == 2) & (temp['Age'] <= 17), 'Priority'] = 5\ntemp.loc[(temp['Pclass'] == 2) & (temp['Sex'] == 2), 'Priority'] = 6\ntemp.loc[(temp['Fgroup'] == 9), 'Priority'] = 7","d238b6e1":"survpct('Priority')","93e63a5f":"temp.Priority.value_counts()","7523b9d2":"survpct('Family')","eabc3064":"survpct('Fgroup')","cd5ed9a2":"temp['FH'] = 0\ntemp.loc[(temp['Sex'] == 1), 'FH'] = 0\ntemp.loc[(temp['Sex'] == 2), 'FH'] = 1\ntemp.loc[(temp['Sex'] == 2) & (temp['Family'] == 2), 'FH'] = 2\ntemp.loc[(temp['Sex'] == 2) & (temp['Family'] == 3), 'FH'] = 3\ntemp.loc[(temp['Sex'] == 2) & (temp['Family'] == 4), 'FH'] = 4\ntemp.loc[(temp['Sex'] == 2) & (temp['Family'] == 1) & (temp['Pclass'] == 1), 'FH'] = 5\ntemp.loc[(temp['Sex'] == 2) & (temp['Family'] == 1) & (temp['Pclass'] == 2), 'FH'] = 6\ntemp.loc[(temp['Sex'] == 2) & (temp['Fgroup'] == 3), 'FH'] = 7\ntemp.loc[(temp['Sex'] == 2) & (temp['Fgroup'] >= 5), 'FH'] = 8","d77f5c3b":"survpct('FH')","be60dc10":"temp.FH.value_counts()","4d4d91d6":"temp['MH'] = 0\ntemp.loc[(temp['Sex'] == 2), 'MH'] = 0\ntemp.loc[(temp['Sex'] == 1), 'MH'] = 1\ntemp.loc[(temp['Sex'] == 1) & (temp['Family'] == 2), 'MH'] = 2\ntemp.loc[(temp['Sex'] == 1) & (temp['Family'] == 3), 'MH'] = 3\ntemp.loc[(temp['Sex'] == 1) & (temp['Family'] == 4), 'MH'] = 4\ntemp.loc[(temp['Sex'] == 1) & (temp['Family'] == 1) & (temp['Pclass'] == 1), 'MH'] = 5\ntemp.loc[(temp['Sex'] == 1) & (temp['Family'] == 1) & (temp['Pclass'] == 2), 'MH'] = 6\ntemp.loc[(temp['Sex'] == 1) & (temp['Fgroup'] == 3), 'MH'] = 7\ntemp.loc[(temp['Sex'] == 1) & (temp['Fgroup'] >= 5), 'MH'] = 8","5e581269":"survpct('MH')","24fc09b1":"temp.MH.value_counts()","b84d1a38":"temp['FL'] = 0\ntemp.loc[(temp['Sex'] == 1), 'FL'] = 0\ntemp.loc[(temp['Sex'] == 2) & (temp['Fgroup'] < 5), 'FL'] = 1\ntemp.loc[(temp['Sex'] == 2) & (temp['Fgroup'] != 3), 'FL'] = 2\ntemp.loc[(temp['Sex'] == 2) & (temp['FH'] == 1), 'FL'] = 3\ntemp.loc[(temp['Sex'] == 2) & (temp['Family'] < 2), 'FL'] = 4\ntemp.loc[(temp['Sex'] == 2) & (temp['Family'] > 4), 'FL'] = 5\ntemp.loc[(temp['Sex'] == 2) & (temp['Family'] == 1) & (temp['Pclass'] == 3), 'FL'] = 6","9157c462":"survpct('FL')","6d57adcc":"temp.FL.value_counts()","5aed5c83":"temp['ML'] = 0\ntemp.loc[(temp['Sex'] == 2), 'ML'] = 0\ntemp.loc[(temp['Sex'] == 1) & (temp['Fgroup'] < 5), 'ML'] = 1\ntemp.loc[(temp['Sex'] == 1) & (temp['Fgroup'] != 3), 'ML'] = 2\ntemp.loc[(temp['Sex'] == 1) & (temp['MH'] <7), 'ML'] = 3\ntemp.loc[(temp['Sex'] == 1) & (temp['Family'] < 2), 'ML'] = 4\ntemp.loc[(temp['Sex'] == 1) & (temp['Family'] > 4), 'ML'] = 5\ntemp.loc[(temp['Sex'] == 1) & (temp['Family'] == 1) & (temp['Pclass'] == 3), 'ML'] = 6","148095fb":"survpct('ML')","4c180da0":"temp.ML.value_counts()","888bd850":"temp['F1'] = temp['Priority']\ntemp['F2'] = temp['FH']\ntemp['F3'] = temp['MH']\ntemp['F4'] = temp['FL']\ntemp['F5'] = temp['ML']\ntemp['F6'] = temp['Initial']\ntemp['F7'] = temp['Fgroup']\ntemp['F8'] = temp['NumName']\ntemp['F9'] = temp['NumTicket']\ntemp['F10'] = temp['Family']\ntemp['F11'] = temp['Embarked']\ntemp['F12'] = temp['Sex']\ntemp['F13'] = temp['Pclass']","5d580ce0":"from sklearn.preprocessing import OneHotEncoder, LabelEncoder","756b057a":"dfl = pd.DataFrame() # for label encoding","e9d2a6af":"good_columns = ['F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13']\ndfl[good_columns] = temp[good_columns]","9ef3b697":"dfl.head()","a651201d":"dfh = dfl.copy()","11834340":"dfl_enc = dfl.apply(LabelEncoder().fit_transform)\n                          \ndfl_enc.head()","4213b374":"one_hot_cols = dfh.columns.tolist()\ndfh_enc = pd.get_dummies(dfh, columns=one_hot_cols)\n\ndfh_enc.head()","0942225a":"train = dfh_enc[:ntrain]\ntest = dfh_enc[ntrain:]","1a8dd445":"X_test = test\nX_train = train","461a48fa":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","552205cd":"ran = RandomForestClassifier(random_state=1)\nknn = KNeighborsClassifier()\nlog = LogisticRegression()\nxgb = XGBClassifier()\ngbc = GradientBoostingClassifier()\nsvc = SVC(probability=True)\next = ExtraTreesClassifier()\nada = AdaBoostClassifier()\ngnb = GaussianNB()\ngpc = GaussianProcessClassifier()\nbag = BaggingClassifier()\n\n# \ub9ac\uc2a4\ud2b8 \uc900\ube44\nmodels = [ran, knn, log, xgb, gbc, svc, ext, ada, gnb, gpc, bag]         \nmodel_names = ['Random Forest', 'K Nearest Neighbour', 'Logistic Regression', 'XGBoost', 'Gradient Boosting', 'SVC', 'Extra Trees', 'AdaBoost', 'Gaussian Naive Bayes', 'Gaussian Process', 'Bagging Classifier']\nscores = {}\n\n# \uc774\uc5b4\uc11c \uc5f0\uc18d\uc801\uc73c\ub85c \ubaa8\ub378\uc744 \ud559\uc2b5 \uc2dc\ud0a4\uace0 \uad50\ucc28 \uac80\uc99d\ud569\ub2c8\ub2e4.\nfor ind, mod in enumerate(models):\n    mod.fit(X_train, y_train)\n    acc = cross_val_score(mod, X_train, y_train, scoring = \"accuracy\", cv = 10)\n    scores[model_names[ind]] = acc","7f103ea2":"# \uacb0\uacfc \ud14c\uc774\ube14\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\nresults = pd.DataFrame(scores).T\nresults['mean'] = results.mean(1)\n\nresult_df = results.sort_values(by='mean', ascending=False)#.reset_index()\nresult_df.head(11)","ac982eec":"result_df = result_df.drop(['mean'], axis=1)\nsns.boxplot(data=result_df.T, orient='h')\nplt.title('Machine Learning Algorithm Accuracy Score \\n')\nplt.xlabel('Accuracy Score (%)');","335e14cb":"# \uc911\uc694\ub3c4\ub97c \ubcf4\ub294 \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\ndef importance_plotting(data, xlabel, ylabel, title, n=20):\n    sns.set(style=\"whitegrid\")\n    ax = data.tail(n).plot(kind='barh')\n    \n    ax.set(title=title, xlabel=xlabel, ylabel=ylabel)\n    ax.xaxis.grid(False)\n    ax.yaxis.grid(True)\n    plt.show()","6c3f3dc3":"# \ub370\uc774\ud130 \ud504\ub808\uc784\uc5d0 \ud56d\ubaa9 \uc911\uc694\ub3c4\ub97c \ub123\uc2b5\ub2c8\ub2e4.\nfi = {'Features':train.columns.tolist(), 'Importance':xgb.feature_importances_}\nimportance = pd.DataFrame(fi, index=fi['Features']).sort_values('Importance', ascending=True)","4bc78d3a":"# \uadf8\ub798\ud504 \uc81c\ubaa9\ntitle = 'Top 20 most important features in predicting survival on the Titanic: XGB'\n\n# \uadf8\ub798\ud504 \uadf8\ub9ac\uae30\nimportance_plotting(importance, 'Importance', 'Features', title, 20)","738be6b9":"# \uc911\uc694\ub3c4\ub97c \ub370\uc774\ud130\ud504\ub808\uc784\uc5d0 \ub123\uc2b5\ub2c8\ub2e4. Logistic regression\uc5d0\uc11c\ub294 \uc911\uc694\ub3c4\ubcf4\ub2e4 coefficients\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \n# \uc544\ub798\ub294 Features\ub77c\ub294 \uc5f4\uc5d0 \ud2b8\ub808\uc778\uc758 \uc5f4\ub4e4\uc758 \uc774\ub984\uc744 \ub9ac\uc2a4\ud2b8\ub85c \ub9cc\ub4e4\uc5b4\uc11c \ub123\uace0 Importance\uc5d0\ub294 Logistic regression\uc5d0\ub294 coefficient\ub97c \ubc14\uafb8\uc5b4 \ub123\uc5b4\ub77c\ub294 \ub118\ud30c\uc774 \uba85\ub839\uc785\ub2c8\ub2e4.(\uc989 \uac00\ub85c\ub97c \uc138\ub85c\ub85c)\nfi = {'Features':train.columns.tolist(), 'Importance':np.transpose(log.coef_[0])}\nimportance = pd.DataFrame(fi, index=fi['Features']).sort_values('Importance', ascending=True)\n# \uadf8\ub798\ud504 \ud0c0\uc774\ud2c0\ntitle = 'Top 20 important features in predicting survival on the Titanic: Logistic Regression'\n\n# \uadf8\ub798\ud504 \uadf8\ub9ac\uae30\nimportance_plotting(importance, 'Importance', 'Features', title, 20)","f1e92659":"# 5\uac00\uc9c0 \ubaa8\ub378\uc5d0 \ub300\ud55c \ud56d\ubaa9 \uc911\uc694\ub3c4 \uc5bb\uae30\ngbc_imp = pd.DataFrame({'Feature':train.columns, 'gbc importance':gbc.feature_importances_})\nxgb_imp = pd.DataFrame({'Feature':train.columns, 'xgb importance':xgb.feature_importances_})\nran_imp = pd.DataFrame({'Feature':train.columns, 'ran importance':ran.feature_importances_})\next_imp = pd.DataFrame({'Feature':train.columns, 'ext importance':ext.feature_importances_})\nada_imp = pd.DataFrame({'Feature':train.columns, 'ada importance':ada.feature_importances_})\n\n# \uc774\ub97c \ud558\ub098\uc758 \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c\nimportances = gbc_imp.merge(xgb_imp, on='Feature').merge(ran_imp, on='Feature').merge(ext_imp, on='Feature').merge(ada_imp, on='Feature')\n\n# \ud56d\ubaa9\ub2f9 \ud3c9\uade0 \uc911\uc694\ub3c4\nimportances['Average'] = importances.mean(axis=1)\n\n# \ub7ad\ud0b9 \uc815\ud558\uae30\nimportances = importances.sort_values(by='Average', ascending=False).reset_index(drop=True)","fceb803c":"# \uc911\uc694\ub3c4\ub97c \ub2e4\uc2dc \ub370\uc774\ud130 \ud504\ub808\uc784\uc5d0 \ub123\uae30\nfi = {'Features':importances['Feature'], 'Importance':importances['Average']}\nimportance = pd.DataFrame(fi).set_index('Features').sort_values('Importance', ascending=True)\n\n# \uadf8\ub798\ud504 \ud0c0\uc774\ud2c0\ntitle = 'Top 20 important features in predicting survival on the Titanic: 5 model average'\n\n# \uadf8\ub798\ud504 \ubcf4\uae30\nimportance_plotting(importance, 'Importance', 'Features', title, 20)","82fd0ca8":"importance1 = importance[-381:]\n\nimportance1[371:381]","a16574c3":"# \uc601\uc591\uac00 \uc788\ub294 380\uac1c\ub9cc \ub123\uae30\nmylist = list(importance1.index)","63d781d3":"train1 = pd.DataFrame()\ntest1 = pd.DataFrame()\n\nfor i in mylist:\n    train1[i] = train[i]\n    test1[i]= test[i]\n    \ntrain1.head()","0cf308cf":"train = train1\ntest = test1\n\n# \ubaa8\ub378\uc758 \ubcc0\uc218\ub97c \ub2e4\uc2dc \uc815\uc758\ud558\uace0\nX_train = train\nX_test = test\n\n# \ubc14\uafc9\ub2c8\ub2e4.\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","8ceb3b65":"ran = RandomForestClassifier(random_state=1)\nknn = KNeighborsClassifier()\nlog = LogisticRegression()\nxgb = XGBClassifier(random_state=1)\ngbc = GradientBoostingClassifier(random_state=1)\nsvc = SVC(probability=True)\next = ExtraTreesClassifier(random_state=1)\nada = AdaBoostClassifier(random_state=1)\ngnb = GaussianNB()\ngpc = GaussianProcessClassifier()\nbag = BaggingClassifier(random_state=1)\n\n# \ub9ac\uc2a4\ud2b8 \uc900\ube44\nmodels = [ran, knn, log, xgb, gbc, svc, ext, ada, gnb, gpc, bag]         \nmodel_names = ['Random Forest', 'K Nearest Neighbour', 'Logistic Regression', 'XGBoost', 'Gradient Boosting', 'SVC', 'Extra Trees', 'AdaBoost', 'Gaussian Naive Bayes', 'Gaussian Process', 'Bagging Classifier']\nscores2 = {}\n\n# \ud559\uc2b5 \ubc0f \uad50\ucc28 \uac80\uc99d\nfor ind, mod in enumerate(models):\n    mod.fit(X_train, y_train)\n    acc = cross_val_score(mod, X_train, y_train, scoring = \"accuracy\", cv = 10)\n    scores2[model_names[ind]] = acc","06845909":"# \uacb0\uacfc \ud14c\uc774\ube14\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\nresults = pd.DataFrame(scores2).T\nresults['mean'] = results.mean(1)\n\nresult_df = results.sort_values(by='mean', ascending=False)#.reset_index()\nresult_df.head(11)\nresult_df = result_df.drop(['mean'], axis=1)\nsns.boxplot(data=result_df.T, orient='h')\nplt.title('Machine Learning Algorithm Accuracy Score \\n')\nplt.xlabel('Accuracy Score (%)');","34e1b790":"# \ud30c\ub77c\ubbf8\ud130 \uc11c\uce58\nCs = [0.01, 0.1, 1, 5, 10, 15, 20, 50]\ngammas = [0.001, 0.01, 0.1]\n\n# \ud30c\ub77c\ubbf8\ud130 \uadf8\ub9ac\ub4dc \uc14b\ud305\nhyperparams = {'C': Cs, 'gamma' : gammas}\n\n# \uad50\ucc28\uac80\uc99d\ngd=GridSearchCV(estimator = SVC(probability=True), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\", n_jobs=-1)\n\n# \ubaa8\ub378 fiting \ubc0f \uacb0\uacfc\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_params_)","f8d79f6a":"learning_rate = [0.01, 0.05, 0.1, 0.2, 0.5]\nn_estimators = [100, 1000, 2000]\nmax_depth = [3, 5, 10, 15]\n\nhyperparams = {'learning_rate': learning_rate, 'n_estimators': n_estimators}\n\ngd=GridSearchCV(estimator = GradientBoostingClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\", n_jobs=-1)\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_params_)","b16bcfd6":"penalty = ['l1', 'l2']\nC = np.logspace(0, 4, 10)\n\nhyperparams = {'penalty': penalty, 'C': C}\n\ngd=GridSearchCV(estimator = LogisticRegression(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\", n_jobs=-1)\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_params_)","ea3ca7ce":"learning_rate = [0.001, 0.005, 0.01, 0.05, 0.1, 0.2]\nn_estimators = [10, 50, 100, 250, 500, 1000]\n\nhyperparams = {'learning_rate': learning_rate, 'n_estimators': n_estimators}\n\ngd=GridSearchCV(estimator = XGBClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\", n_jobs=-1)\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_params_)","c2fedf1c":"max_depth = [3, 4, 5, 6, 7, 8, 9, 10]\nmin_child_weight = [1, 2, 3, 4, 5, 6]\n\nhyperparams = {'max_depth': max_depth, 'min_child_weight': min_child_weight}\n\ngd=GridSearchCV(estimator = XGBClassifier(learning_rate=0.2, n_estimators=10), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\", n_jobs=-1)\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_params_)","e0fbd70e":"gamma = [i*0.1 for i in range(0,5)]\n\nhyperparams = {'gamma': gamma}\n\ngd=GridSearchCV(estimator = XGBClassifier(learning_rate=0.2, n_estimators=10, max_depth=6, \n                                          min_child_weight=1), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\", n_jobs=-1)\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_params_)","6afe5b02":"subsample = [0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1]\ncolsample_bytree = [0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1]\n    \nhyperparams = {'subsample': subsample, 'colsample_bytree': colsample_bytree}\n\ngd=GridSearchCV(estimator = XGBClassifier(learning_rate=0.2, n_estimators=10, max_depth=6, \n                                          min_child_weight=1, gamma=0), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\", n_jobs=-1)\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_params_)","e15d665f":"reg_alpha = [1e-5, 1e-2, 0.1, 1, 100]\n    \nhyperparams = {'reg_alpha': reg_alpha}\n\ngd=GridSearchCV(estimator = XGBClassifier(learning_rate=0.2, n_estimators=10, max_depth=6, \n                                          min_child_weight=1, gamma=0, subsample=1, colsample_bytree=1),\n                                         param_grid = hyperparams, verbose=True, cv=5, scoring = \"accuracy\", n_jobs=-1)\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_params_)","6456246a":"n_restarts_optimizer = [0, 1, 2, 3]\nmax_iter_predict = [1, 2, 5, 10, 20, 35, 50, 100]\nwarm_start = [True, False]\n\nhyperparams = {'n_restarts_optimizer': n_restarts_optimizer, 'max_iter_predict': max_iter_predict, 'warm_start': warm_start}\n\ngd=GridSearchCV(estimator = GaussianProcessClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\", n_jobs=-1)\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_params_)","b08c9862":"n_estimators = [10, 100, 200, 500]\nlearning_rate = [0.001, 0.01, 0.1, 0.5, 1, 1.5, 2]\n\nhyperparams = {'n_estimators': n_estimators, 'learning_rate': learning_rate}\n\ngd=GridSearchCV(estimator = AdaBoostClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\", n_jobs=-1)\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_params_)","f0f238f8":"n_neighbors = [1, 2, 3, 4, 5]\nalgorithm = ['auto']\nweights = ['uniform', 'distance']\nleaf_size = [1, 2, 3, 4, 5, 10]\n\nhyperparams = {'algorithm': algorithm, 'weights': weights, 'leaf_size': leaf_size, \n               'n_neighbors': n_neighbors}\n\ngd=GridSearchCV(estimator = KNeighborsClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\", n_jobs=-1)\n\n# Fitting model and return results\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_params_)","deb6f51e":"n_estimators = [10, 50, 100, 200]\nmax_depth = [3, None]\nmax_features = [0.1, 0.2, 0.5, 0.8]\nmin_samples_split = [2, 6]\nmin_samples_leaf = [2, 6]\n\nhyperparams = {'n_estimators': n_estimators, 'max_depth': max_depth, 'max_features': max_features,\n               'min_samples_split': min_samples_split, 'min_samples_leaf': min_samples_leaf}\n\ngd=GridSearchCV(estimator = RandomForestClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\", n_jobs=-1)\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_params_)","af2ce202":"n_estimators = [10, 25, 50, 75, 100]\nmax_depth = [3, None]\nmax_features = [0.1, 0.2, 0.5, 0.8]\nmin_samples_split = [2, 10]\nmin_samples_leaf = [2, 10]\n\nhyperparams = {'n_estimators': n_estimators, 'max_depth': max_depth, 'max_features': max_features,\n               'min_samples_split': min_samples_split, 'min_samples_leaf': min_samples_leaf}\n\ngd=GridSearchCV(estimator = ExtraTreesClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\", n_jobs=-1)\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_params_)","9465489c":"n_estimators = [10, 50, 75, 100, 200]\nmax_samples = [0.1, 0.2, 0.5, 0.8, 1.0]\nmax_features = [0.1, 0.2, 0.5, 0.8, 1.0]\n\nhyperparams = {'n_estimators': n_estimators, 'max_samples': max_samples, 'max_features': max_features}\n\ngd=GridSearchCV(estimator = BaggingClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\", n_jobs=-1)\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_params_)","fb7f77c8":"# \ud29c\ub2dd \ubaa8\ub378 \uc2dc\uc791\n# sample\uc744 split\ud558\ub294 \uac83\uc740 \uc804\uccb4\ub370\uc774\ud130 80%\ub97c \ud2b8\ub808\uc778\uc14b\uc5d0 20%\ub294 \ud14c\uc2a4\ud2b8\uc14b\uc5d0 \uc90c  \nran = RandomForestClassifier(max_depth=None, max_features=0.1, min_samples_leaf=2, min_samples_split=2, n_estimators=50, random_state=1)\n\nknn = KNeighborsClassifier(leaf_size=1, n_neighbors=4, weights='distance')\n\nlog = LogisticRegression(C=2.7825594022071245, penalty='l2')\n\nxgb = XGBClassifier(learning_rate=0.1, n_estimators=10, max_depth=7, \n                                          min_child_weight=5, gamma=0, subsample=1, colsample_bytree=1, reg_alpha=1e-05)\n\ngbc = GradientBoostingClassifier(learning_rate=0.1, max_depth=3, n_estimators=1000)\n\nsvc = SVC(probability=True, gamma=0.001, C=5)\n\next = ExtraTreesClassifier(max_depth=None, max_features=0.2, min_samples_leaf=10, min_samples_split=2, n_estimators=100, random_state=1)\n\nada = AdaBoostClassifier(learning_rate=0.5, n_estimators=500, random_state=1)\n\ngpc = GaussianProcessClassifier(max_iter_predict=1, n_restarts_optimizer=0, warm_start=True)\n\nbag = BaggingClassifier(max_features=1.0, max_samples=1.0, n_estimators=75, random_state=1)\n\n# \ub9ac\uc2a4\ud2b8\nmodels = [ran, knn, log, xgb, gbc, svc, ext, ada, gnb, gpc, bag]         \nmodel_names = ['Random Forest', 'K Nearest Neighbour', 'Logistic Regression', 'XGBoost', 'Gradient Boosting', 'SVC', 'Extra Trees', 'AdaBoost', 'Gaussian Naive Bayes', 'Gaussian Process', 'Bagging Classifier']\nscores3 = {}\n\n# Sequentially fit and cross validate all models\nfor ind, mod in enumerate(models):\n    mod.fit(X_train, y_train)\n    acc = cross_val_score(mod, X_train, y_train, scoring = \"accuracy\", cv = 10)\n    scores3[model_names[ind]] = acc","22c7c61e":"results = pd.DataFrame(scores).T\nresults['mean'] = results.mean(1)\nresult_df = results.sort_values(by='mean', ascending=False)\nresult_df.head(11)\n\n\nresult_df = result_df.drop(['mean'], axis=1)\nsns.boxplot(data=result_df.T, orient='h')\nplt.title('Machine Learning Algorithm Accuracy Score \\n')\nplt.xlabel('Accuracy Score (%)');","0831610b":"#\ud29c\ub2dd\ud55c \ud30c\ub77c\ubbf8\ud130\ub85c \ud558\ub4dc\ubcf4\ud305\ngrid_hard = VotingClassifier(estimators = [('Random Forest', ran), \n                                           ('Logistic Regression', log),\n                                           ('XGBoost', xgb),\n                                           ('Gradient Boosting', gbc),\n                                           ('Extra Trees', ext),\n                                           ('AdaBoost', ada),\n                                           ('Gaussian Process', gpc),\n                                           ('SVC', svc),\n                                           ('K Nearest Neighbour', knn),\n                                           ('Bagging Classifier', bag)], voting = 'hard')\n\ngrid_hard_cv = model_selection.cross_validate(grid_hard, X_train, y_train, cv=10)\ngrid_hard.fit(X_train, y_train)\n\nprint(\"Hard voting on test set score mean: {:.2f}\". format(grid_hard_cv['test_score'].mean() * 100))","62430a9e":"grid_soft = VotingClassifier(estimators = [('Random Forest', ran), \n                                           ('Logistic Regression', log),\n                                           ('XGBoost', xgb),\n                                           ('Gradient Boosting', gbc),\n                                           ('Extra Trees', ext),\n                                           ('AdaBoost', ada),\n                                           ('Gaussian Process', gpc),\n                                           ('SVC', svc),\n                                           ('K Nearest Neighbour', knn),\n                                           ('Bagging Classifier', bag)], voting = 'soft')\n\ngrid_soft_cv = model_selection.cross_validate(grid_soft, X_train, y_train, cv=10)\ngrid_soft.fit(X_train, y_train)\n\nprint(\"Soft voting on test set score mean: {:.2f}\". format(grid_soft_cv['test_score'].mean() * 100))","bedd98d2":"# Final predictions2\npredictions = grid_hard.predict(X_test)\n\nsubmission = pd.concat([pd.DataFrame(passId), pd.DataFrame(predictions)], axis = 'columns')\n\nsubmission.columns = [\"PassengerId\", \"Survived\"]\nsubmission.to_csv('titanic_submission1.csv', header = True, index = False)","249a9bd0":"# Final predictions\npredictions = grid_soft.predict(X_test)\n\nsubmission = pd.concat([pd.DataFrame(passId), pd.DataFrame(predictions)], axis = 'columns')\n\nsubmission.columns = [\"PassengerId\", \"Survived\"]\nsubmission.to_csv('titanic_submission2.csv', header = True, index = False)","20ab86db":"# And we finally make a submission \uadf8\ub9ac\uace0 \uc81c\ucd9c \ud569\ub2c8\ub2e4.\n# Please make sure you \"commit\" (It take a few minutes) \/ commit\ubc84\ud134\uc744 \ub204\ub974\uc2dc\ub294 \uac83\uc744 \uc78a\uc9c0 \ub9c8\uc138\uc694 (\uba87 \ubd84 \uac78\ub9bd\ub2c8\ub2e4)\n# And then you will see the submission file on the top right hand side at Data>Output>Kaggle\/working \/ \uadf8\ub7fc \uc6b0\uce21 \uc0c1\ub2e8 \ub370\uc774\ud130 \uc544\uc6c3\ud48b\uc5d0\uc11c \uc81c\ucd9c\uc6a9 \uacb0\uacfc\ubb3c\uc774 \ub098\uc62c \uac83\uc785\ub2c8\ub2e4.","2ede6ab6":"<a id = \"part9\"><\/a>\n## Part 9: \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\n[Go to the Table of Contents](#table_of_contents)\n\n### SVC\n* Scikit-Learn\uc5d0\uc11c\ub294 3\uac00\uc9c0 \ubaa8\ud615 \ucd5c\uc801\ud654 \ub3c4\uad6c\ub97c \uc9c0\uc6d0\ud558\ub294\ub370 validation_curve\/ GridSearchCV\/ ParameterGrid\uc774\ub2e4\n* fit \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\uba74 grid search\uac00 \uc790\ub3d9\uc73c\ub85c \uc5ec\ub7ec\uac1c\uc758 \ub0b4\ubd80 \ubaa8\ud615\uc744 \uc0dd\uc131\ud558\uace0 \uc774\ub97c \ubaa8\ub450 \uc2e4\ud589\uc2dc\ucf1c\uc11c \ucd5c\uc801 \ud30c\ub77c\ubbf8\ud130\ub97c \ucc3e\ub294\ub2e4.\n\n* bestscore\ub294 \ucd5c\uace0 \uc810\uc218\uc774\uace0 best estimator\ub294 \ucd5c\uace0 \uc810\uc218\ub97c \ub0b8 \ud30c\ub77c\ubbf8\ud130\ub97c \uac00\uc9c4 \ubaa8\ud615\n* c\uac12\uacfc gamma\uac12\uc740 10\uc758 \ubc30\uc218\ub85c \uc77c\ubc18\uc801\uc73c\ub85c \ud55c\ub2e4.\n* \uac10\ub9c8 \ub9e4\uac1c \ubcc0\uc218\ub294 \ub2e8\uc77c \ud559\uc2b5 \uc608\uc81c\uc758 \uc601\ud5a5\uc774 \ub3c4\ub2ec\ud558\ub294 \uc815\ub3c4\ub97c \uc815\uc758\ud558\uba70 \ub0ae\uc740 \uac12\uc740 'far'\ub97c, \ub192\uc740 \uac12\uc740 'close'\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uac10\ub9c8 \ub9e4\uac1c \ubcc0\uc218\ub294 \uc11c\ud3ec\ud2b8 \ubca1\ud130\ub85c \ubaa8\ub378\uc5d0 \uc758\ud574 \uc120\ud0dd\ub41c \uc0d8\ud50c\uc758 \uc601\ud5a5 \ubc18\uacbd\uc758 \uc5ed\uc73c\ub85c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* C \ub9e4\uac1c \ubcc0\uc218\ub294 \uc758\uc0ac \uacb0\uc815 \ud45c\uba74\uc758 \ub2e8\uc21c\uc131\uc5d0 \ub300\ud55c \ud6c8\ub828 \uc608\uc81c\uc758 \uc624 \ubd84\ub958\ub97c \uc81c\uac70\ud569\ub2c8\ub2e4. C\uac00 \ub0ae\uc744\uc218\ub85d \uacb0\uc815 \ud45c\uba74\uc774 \ub9e4\ub044\ub7fd\uace0 \ub192\uc740 C\ub294 \ubaa8\ub378\uc774 \ub354 \ub9ce\uc740 \uc0d8\ud50c\uc744 \uc11c\ud3ec\ud2b8 \ubca1\ud130\ub85c \uc790\uc720\ub86d\uac8c \uc120\ud0dd\ud560 \uc218 \uc788\ub3c4\ub85d\ud558\uc5ec \ubaa8\ub4e0 \ud559\uc2b5 \uc608\uc81c\ub97c \uc62c\ubc14\ub974\uac8c \ubd84\ub958\ud558\ub294 \uac83\uc744 \ubaa9\ud45c\ub85c\ud569\ub2c8\ub2e4.\n* Verbose\ub294 \ubd88\ub9ac\uc548 \uac12\uc73c\ub85c True\ub85c \ub123\uc73c\uba74 \uaf2c\uce58 \uaf2c\uce58 \ub2e4 \uc54c\ub824\uc8fc\ub294\ub370, \ub300\uc2e0 \uc2dc\uac04\uc774 \uc880 \ub354 \uc624\ub798 \uac78\ub9bd\ub2c8\ub2e4.\n* cv =5\ub294 5 fold\ub85c \uad50\ucc28 \uac80\uc99d\ud55c\ub2e4\ub294 \ub73b\uc785\ub2c8\ub2e4.","cbbac863":"<a id = \"part2\"><\/a>\n## Part 2:  \ud30c\uc77c \ubcd1\ud569\n[Go to the Table of Contents](#table_of_contents)\n\n* ntrain\uacfc ntest\uc758 shape\uc744 \ud655\ubcf4\ud574\ub193\uc2b5\ub2c8\ub2e4. (\ubcd1\ud569 \ud55c \uac83\uc744 \ub098\uc911\uc5d0 \ub2e4\uc2dc \uac08\ub77c \ub193\uae30 \uc704\ud55c \uc900\ube44)\n* y_train\uc740 \uc54c\ub824\uc9c4 \uacb0\uacfc \uac12\uc774\ub2c8 \ub530\ub85c \ubaa8\uc154 \ub193\uace0\n* \ud14c\uc2a4\ud2b8\uc758 \uc2b9\uac1d \uc544\uc774\ub514\ub294 \ub098\uc911\uc5d0 \ucd5c\uc885 \uacb0\uacfc\uc5d0 \ub123\uc744 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 \ub530\ub85c \ub5bc\uc5b4 \ub193\uc2b5\ub2c8\ub2e4.\n* train\uacfc test\ub97c \ubcd1\ud569\ud558\uc5ec data \ub780 \ud30c\uc77c\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. \ubb38\uc790\ub85c \ub41c \uac83\uc744 \uc22b\uc790\ub85c \ubc14\uafbc\ub2e4\ub4e0\uac00. \uc22b\uc790\ub97c \uc778\ud130\ubc1c \ubcc4\ub85c \uadf8\ub8f9\ud654 \ud55c\ub2e4\ub4e0\uac00 \ud560 \ub54c \ud55c\uaebc\ubc88\uc5d0 \ud558\uae30 \uc704\ud574 \ud569\ud574 \ub193\uc2b5\ub2c8\ub2e4.","2cc1ac62":"* \uadf8\ub9ac\uace0 Initial \ubcc4 \ud3c9\uade0 \uc5f0\ub839\uc744 \ubcf4\uace0 Age\uc5d0 \uc801\uc6a9 \uc2dc\ud0a4\ub294 \uac83\uc774 \uc88b\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","9b5db845":"\ud2b8\ub808\uc778 \ub370\uc774\ud130\uc5d0 \uc788\ub294 \uc778\uc6d0 \uc911 342\uba85\uc774 \uc0b4\uc544\ub0a8\uace0 549\uba85\uc774 \uc0ac\ub9dd\ud588\ub2e4\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.","f5796f74":"<a id = \"part4\"><\/a>\n## Part 4: \ub370\uc774\ud130 \ud0d0\uad6c (Exploratory Data Analysis)\n[Go to the Table of Contents](#table_of_contents)\n\n* train\ud30c\uc77c \uc21c\uc11c\ub300\ub85c \ub370\uc774\ud130 \ud30c\uc77c\uc758 \uc5f4\ub4e4\uc744 \ubd05\ub2c8\ub2e4.","295d7f06":"* \uc774\uc81c \ub2e4\uc74c \ub2e8\uacc4\ub85c \uac11\ub2c8\ub2e4.","34b7bbaa":"`info()` \ub294 `dtypes` \uc758 \uc880  \ub354 \ubc1c\uc804\ub41c \uac1c\ub150\uc73c\ub85c \ub370\uc774\ud130 \ud0c0\uc785\ubfd0\ub9cc \uc544\ub2c8\ub77c \ube48\uce78\uc774 \uc544\ub2cc \uac2f\uc218\uae4c\uc9c0 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.\n\n[describe \ud559\uc2b5](https:\/\/www.w3resource.com\/pandas\/dataframe\/dataframe-describe.php)\n","9c8b7923":"\ud55c \ud589 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc5ec\ub7ec\ud589\uc744 \uc778\ub371\uc2f1 \ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.","2489b875":"* Priority - (1) Nobles (2) Women in Pclass 1  (3) Babies under 1 (4) Kids under 17 in Pclass 1 & 2  (5) Women in Pclass 2 (6) Higher Fare","018d4027":"* [\ud788\ud2b8\ub9f5](https:\/\/seaborn.pydata.org\/generated\/seaborn.heatmap.html) \n\n* [\ud310\ub2e4\uc2a4 \ucf54\ub9b4\ub808\uc774\uc158 \ub9e4\ud2b8\ub9ad\uc2a4](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.corr.html)  \n\n* [\uc528\ubcf8 \ucf5c\ub9b4\ub808\uc774\uc158 \ud788\ud2b8\ub9f5](https:\/\/seaborn.pydata.org\/generated\/seaborn.heatmap.html)\n","31b44834":"<a id = \"part13\"><\/a>\n## Part 13: \uc81c\ucd9c\n[Go to the Table of Contents](#table_of_contents)","be48b708":"* 1\ub4f1\uae09 \uac1d\uc2e4\uc758 \uc0ac\ub78c\ub4e4\uc740 \uc0dd\uc874\uc790\uac00 \ub354 \ub9ce\uace0, 2\ub4f1\uae09\uc740 \uc0dd\uc874\uc790\uc5d0 \ube44\ud574 \uc0ac\ub9dd\uc790\uac00 \uc870\uae08 \ub354 \ub9ce\uc73c\ub098, 3\ub4f1\uae09\uc740 \uc0ac\ub9dd\uc790\uac00 3\ubc30 \uc774\uc0c1 \ub9ce\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","f5562c7c":"#### \"Embarked\" \ubd84\uc11d","39ab9e19":"<a id = \"part5\"><\/a>\n## Part 5: Feature Engineering\n[Go to the Table of Contents](#table_of_contents)","348a0c06":"\uc704 \ub3c4\ud45c\ub294 \ube48 \uac12\uc744 \uc9c1\uad00\uc801\uc73c\ub85c \ubcfc \uc218 \uc788\uac8c \ud569\ub2c8\ub2e4.\n\uc544\ub798 \ucabd `Survived`\uac00 \ube44\uc5b4 \uc788\ub294\ub370 \uc774 \uac83\uc740 \ud14c\uc2a4\ud2b8\uc5d0 \uc6b0\ub9ac\uac00 \ub2f5\uc73c\ub85c \uc608\uce21\ud574\uc57c \ud558\ub294 \ubd80\ubd84\uc774\ub77c\uc11c \uadf8\ub807 \uc2b5\ub2c8\ub2e4.","2bb3cec0":"* \ub450 \uc0ac\ub78c\uc758 \ud2f0\ucf13 \ubc88\ud638\uac00 \uac19\uc2b5\ub2c8\ub2e4.\n* \ud639\uc2dc \uac19\uc740 \ud2f0\ucf13 \ubc88\ud638\uac00 \uc788\ub294 \ub2e4\ub978 \uc0ac\ub78c\uc774 \uc788\ub294\uc9c0 \ubd05\ub2c8\ub2e4.","d3e8d1d3":"* \ubc30\uc5d0 \uc788\ub358 \ub0a8\uc790\uc758 \uc218\ub294 \uc5ec\uc790\uc758 \uc218\ubcf4\ub2e4 \ud6e8\uc52c \ub9ce\uc2b5\ub2c8\ub2e4. \uc5ec\uc804\ud788 \uc0dd\uc874 \uc5ec\uc131 \uc218\ub294 \ub0a8\uc131 \uc218\uc758 \uac70\uc758 \ub450 \ubc30\uc785\ub2c8\ub2e4. \uc120\ubc15 \uc5ec\uc131\uc758 \uc0dd\uc874\uc728\uc740 \uc57d 75 % \uc778 \ubc18\uba74 \ub0a8\uc131\uc758 \uc0dd\uc874\uc728\uc740 \uc57d 18-19 %\uc785\ub2c8\ub2e4.\n \n* \uc774 \uac83\uc740 \ub0a8\uc131\/\uc5ec\uc131\uc744 1,2\ub85c \ub098\ub204\uba74 \ub420 \uac83 \uac19\uc740 \ubed4\ud574 \ubcf4\uc774\ub294 \uac83\uc774\uc9c0\ub9cc \uc880 \ub354 \uc0c8\ubd84\ud654\ud558\uba74 \uc88b\uc544 \ubcf4\uc785\ub2c8\ub2e4.\n* \uc608\ub97c \ub4e4\uc5b4 \uc544\uae30\ub4e4\uc740 \uc544\uae30\uc774\uc9c0, \ub0a8\uc790\uc778\uc9c0 \uc5ec\uc790\uc778\uc9c0 \uad6c\uba85\ubcf4\ud2b8 \ud0dc\uc6b8 \ub54c \uc548 \ubb3c\uc5b4 \ubcfc \uac83\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.\n* \uc624\ud788\ub824 (\ubd88\ud589\ud558\uac8c\ub3c4) \uadc0\uc871 \uc544\uae30\uc778\uc9c0 \uc11c\ubbfc\uc758 \uc544\uae30\uc778\uc9c0\ub294 \ud589\uacfc\ubd88\ud589\uc744 \uac00\ub97c \uc218 \uc788\uc2b5\ub2c8\ub2e4 \u3160\u3160\n* \uc0dd\uc874 Pclass\ubcc4\ub85c \uc131\ubcc4\uc744 \ubd05\ub2c8\ub2e4.","20627286":"* \ub2e4\uc2dc \ub9d0\uc500 \ub4dc\ub824\uc11c \ub808\uc774\ube14 \uc778\ucf54\ub529\uc740 \uc904\uc744 \uc138\uc6cc\uc11c \ubc88\ud638\ub97c \ubd80\uc5ec\ud558\ub294 \uac83\uc774\uace0, \uc6d0\ud56b\uc778\ucf54\ub529\uc740 \uae34\uac00 \uc544\ub2cc\uac00 \ub450 \uac00\uc9c0\uc785\ub2c8\ub2e4.\n\n* \uc608\ub97c\ub4e4\uc5b4 \ub098\uc774\ubcc4\ub85c \uc904\uc744 \uc138\uc6cc \ub108\ub294 5\ubc88, \ub108\ub294 6\ubc88\uc774\ub7f0\uc2dd\uc774 \ub808\uc774\ube14 \uc778\ucf54\ub529\uc774\uace0\n\n* 16\uc0b4\uc774\uc57c? 1, 16\uc0b4 \uc544\ub0d0 0 ..\uadf8 \ub2e4\uc74c 17\uc0b4\uc774\uc57c? 1 17\uc0b4 \uc544\ub0d0 0 ..\uc774\ub7f0 \uc2dd\uc774\ub77c \uc5f4\uc758 \uc218\uac00 \ubb34\uc9c0\ud558\uac8c \ub298\uc5b4\ub0a9\ub2c8\ub2e4.","d9d196e3":"### Gaussian Process","e8655dca":"<a id = \"part1\"><\/a>\n## Part 1: \ub370\uc774\ud130 \uc900\ube44 \ubc0f \ubaa8\ub4c8 \uc784\ud3ec\ud2b8\n[Go to the Table of Contents](#table_of_contents)","3ad4350e":"`head()`\uccab 5\ud589\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.","e6b789d9":"`dtypes` \ubaa8\ub4e0 \uc5f4\uc758 \ub370\uc774\ud130 \uc885\ub958\ub97c \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.","df6f250b":"### Age \ubd84\uc11d\n \n* Age\ub294 Continuous\ud55c \uac12\uc785\ub2c8\ub2e4.\n* \ube48\uce78\uc774 \ub9ce\uc544\uc11c \ube48\uce78\ucc98\ub9ac\uac00 \uacb0\uc815\uc801\uc778 \uc5ed\ud560\uc744 \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n \n* Age\uc758 \ucd5c\ub300, \ucd5c\uc18c, \uc911\uac04\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","e61788e3":"* \ube48\uce78\uc774 \ubb34\ucc99 \ub9ce\uc2b5\ub2c8\ub2e4.\n* Cabin\uc5d0 \ube44\uc5b4 \uc788\ub294 \uac83\uc774 \ub9ce\uc544 \uc774\ub97c \ub2e4\ub978 \ubd84\ub958\ub85c \uc77c\ub2e8 \uc7a1\uace0 \uae30\uc874 \uac83\uc740 \uc774\ub2c8\uc15c\ub85c \ubd84\ub958\ud569\ub2c8\ub2e4.\n* \ube48 \uac83\uc740 X\ub85c \uad6c\ubd84\ud558\ub824\ub294\ub370 \uc774 \ub610\ud55c 1,2,3 Pclass\uc640 \uc5f0\ub3d9\ub420 \uac83 \uac19\uc73c\ub2c8 \ube44\uc5b4\uc788\uace0 1\ub4f1\uae09\uc740 X, 2\ub4f1\uae09\uc740 Y, 3\ub4f1\uae09\uc740 Z\ub85c \ud558\uaca0\uc2b5\ub2c8\ub2e4.","31f223e1":"* \ubb38\uc790\ub97c \uc22b\uc790\ub85c \ubc14\uafb8\ub294 \uac83\ub3c4 Feature Engineering\uc758 \uc77c\ubd80\uc774\ub098 \uc704\uc5d0\uc11c \ub300\ubd80\ubd84 \ub2e4 \ud588\uc2b5\ub2c8\ub2e4.","af24f8a7":"0 and below -> 0\n\n7.125 and below-> 5.0\n\n7.9 and below-> 7.5\n\n8.03 or less-> 8.0\n\nLess than 10.5-> 9.5\n\nLess than 23-> 16.0\n\n27.8 and below-> 25.5\n\n51 and below-> 38\n\n73.5 and below-> 62\n\nOver 73.5-> 100","c090924e":"### \"Fare\" \ubd84\uc11d","26092612":"`describe()` \uac01 \uc5f4\uc758 \ud1b5\uacc4\uc801\uc778 \uba74\uc744 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4. \n\n\uae30\ubcf8\uc740 \uc5f0\uc18d\ub41c \uac12\uc744 \uac00\uc9c4 \uc5f4\ub9cc \ubcf4\uc5ec\uc8fc\ub098 `include='all'\ub85c \uc138\ud305\ud558\uba74 \ubaa8\ub450 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.","cbe3afa8":"### \ud56d\ubaa9 \ucd94\uac00\ud558\uae30\n\n* \uc704\uc5d0 \ucd94\uac00 \ud56d\ubaa9\uc744 \uba87 \uac1c \ub9cc\ub4e4\uc5b4 \ubcf4\uc558\uc2b5\ub2c8\ub2e4.\n\n* \uadf8\ub798\ub3c4 \uba87 \uac1c \ub354 \ub9cc\ub4e4\uc5b4 \ubcfc\uae4c\uc694? \n\n* 5\uac1c \uc815\ub3c4 \ub9cc\ub4e4\uc5b4 \ubd05\ub2c8\ub2e4.\n\n* Priority - Nobles, Women in Pclass 1 & 2, Babies under 1, Kids under 17 in Pclass 1 & 2, higher fare, Women in Pclass 3 and so on\n* FH - Female Higher Survival Group\n* MH - Male Higher Survival Group\n* FL - Female Lower Surival Group\n* ML - Male Lower Survival Group","4108048e":"* Age\ub294 \uadf8\ub8f9\ud654 \uc2dc\ud0a4\uba74 \uc88b\uc73c\ub098 \ud559\uc2b5\uc744 \uc704\ud574\uc11c \uadf8\ub0e5 \ub193\uc544\ub450\uace0, \uadf8\ub8f9\ud654 \uc5f0\uc2b5\uc740 Fare\ub85c \ud558\uaca0\uc2b5\ub2c8\ub2e4.","1892b2f7":"`tail()` \ub9c8\uc9c0\ub9c9 5\ud589\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.","06445bdd":"<a id = \"part10\"><\/a>\n## Part 10: \ubaa8\ub378 \uc7ac \ud2b8\ub808\uc774\ub2dd\n[Go to the Table of Contents](#table_of_contents)","fee61da3":"# Titanic Challenge","3fd3e1e7":"### Features \ud56d\ubaa9\n\n#### \ud56d\ubaa9\uc758 \uc885\ub958 \n\n* \ubc94\uc8fc\ud615 \ud56d\ubaa9 (Categorical Features)\n\n\ubc94\uc8fc\ud615 \ud56d\ubaa9\uc740 \ubc95\uc8fc\ud615 \ubcc0\uc218\ub85c \ub41c \ud56d\ubaa9\uc73c\ub85c \ubc94\uc8fc\ud615 \ubcc0\uc218\ub294 \ub458 \uc774\uc0c1\uc758 \uacb0\uacfc \uc694\uc18c\uac00 \uc788\ub294 \ubcc0\uc218\uc774\uba70 \ud574\ub2f9 \uae30\ub2a5\uc758 \uac01 \uac12\uc744 \ubc94\uc8fc\ubcc4\ub85c \ubd84\ub958 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n\n\uc608\ub97c \ub4e4\uc5b4 \uc131\ubcc4\uc740 \ub450 \uac00\uc9c0 \ubc94\uc8fc (\ub0a8\uc131\uacfc \uc5ec\uc131)\uc758 \ubc94\uc8fc \ud615 \ubcc0\uc218\uc785\ub2c8\ub2e4. \n\n\uc774\uc0b0\ud615 \ubcc0\uc218(discrete variable) = \ubc94\uc8fc\ud615 \ubcc0\uc218 (categorical variable) \uc758 \ud558\ub098\ub85c \uba85\ubaa9 \ubcc0\uc218 norminal variable \ub77c\uace0\ub3c4\ud569\ub2c8\ub2e4.\n\n\ub370\uc774\ud130 \uc14b\uc5d0\uc11c \uba85\ubaa9 \ud56d\ubaa9 : Sex, Embark \uc774\uba70 \uc6b0\ub9ac\ub294 Name, Ticket \ub4f1\uc744 \uc774\ub85c \ubcc0\ud658\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \n\n\n* Ordinal Variable :\n\n\uc21c\uc704 \ubcc0\uc218\ub294 \ubc94\uc8fc \ud615\uc758 \ud558\ub098\uc9c0\ub9cc \uadf8 \ucc28\uc774\uc810\uc740 \uac12 \uc0ac\uc774\uc758 \uc0c1\ub300 \uc21c\uc11c(=\uc11c\uc5f4) \ub610\ub294 \uc815\ub82c\uc774 \uac00\ub2a5\ud558\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4.\n\n\ub370\uc774\ud130 \uc14b\uc5d0\uc11c \uc21c\uc704 \ud56d\ubaa9 : PClass \uc774\uba70 \uc6b0\ub9ac\ub294 Cabin\uc744 \uc774 \ubc94\uc8fc\ub85c \ubcc0\ud658\ud574\uc11c \uc0ac\uc6a9\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n\n\n* \uc5f0\uc18d\ud615 \ud56d\ubaa9 (Continuous Features):\n\n\uc11c\ub85c \uc5f0\uc18d\ub41c \uac12\uc744 \uac00\uc9c4 \ubcc0\uc218\ub97c \uac00\uc9c4 \ud56d\ubaa9\uc774\uba70 \uc5ec\uae30\uc5d0\uc11c \uc6b0\ub9ac\ub294 \uc5f0\ub839\uc744 \ub300\ud45c\uc801\uc778 \uac83\uc73c\ub85c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\nAge, SipSp, Parch, Fare\ub294 interval variable\ub85c \ub9cc\ub4e4\uc5b4 \uc774\uc5d0 \uc801\uc6a9\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n\n \n\n* \uc544\ub798\uc758 \ud56d\ubaa9\uc5d0\uc11c \uc5f4\uc758 \uc774\ub984\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n          Variable          \uc815\uc758                Key\n\n          survival          \uc0dd\uc874 \uc5ec\ubd80            0 = No, 1 = Yes\n\n          pclass            \uc120\uc2e4 \ub4f1\uae09            1 = 1st, 2 = 2nd, 3 = 3rd\n\n          sex               \uc131\ubcc4    \n\n          Age               \ub098\uc774  \n\n          sibsp             \ud615\uc7ac \uc790\ub9e4\uc758 \uc218\/ \ubc30\uc6b0\uc790 \ub4f1\uc774 \uc2b9\uc120\ud55c \uacbd\uc6b0 \uc218    \n\n          parch             \ubd80\ubaa8\ub098 \uc790\uc2dd\uacfc \uac19\uc774 \ud0c4 \uacbd\uc6b0 \uc218   \n\n          ticket            \ud45c \ubc88\ud638    \n\n          fare              \uc694\uae08\n\n          cabin             \uc120\uc2e4 \ubc88\ud638   \n\n          embarked          \uc2b9\uc120\ud55c \ud56d\uad6c         C = Cherbourg, Q = Queenstown, S = Southampton","5a39235c":"* \uc704\uc5d0 \ub9cc\ub4e0 \ud568\uc218\ub97c \ud55c \ubc88 \uc368 \uba39\uc5b4 \ubcfc\uae4c\uc694?","bb1025d4":"* \uc55e \ub4a4\ub85c \ubaa8\ub450 S\uc774\uace0 Pclass\ub3c4 \ubaa8\ub450 1\uc778 \uac83\uc73c\ub85c \ubd10\uc11c S\uc77c \uac00\ub2a5\uc131\uc774 \ud07d\ub2c8\ub2e4.","8c3336a2":"* Pclass1\uc758 \uc2b9\uac1d \uc694\uae08\uc5d0\ub294 \ud070 \ubd84\ud3ec\uac00\uc788\ub294 \uac83\uc73c\ub85c \ubcf4\uc774\uba70 \ubd88\uc5f0\uc18d \uac12\uc73c\ub85c \ubcc0\ud658 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* Fare\ub97c \uadf8\ub8f9\uc73c\ub85c \ub098\ub204\uc5b4 \ub193\uaca0\uc2b5\ub2c8\ub2e4.\n* qcut\uc744 \ud65c\uc6a9\ud558\uba74 \uc6d0\ud558\ub294 \uc870\uac01\uc73c\ub85c \ub370\uc774\ud130\ub97c \ub098\ub204\uc5b4 \uc90d\ub2c8\ub2e4.\n* cut\uc640 qcut\uc758 \ucc28\uc774","a1efc1e2":"#### Family or Alone?\n* \"SibSp\" + \"Parch\" \ubd84\uc11d\n \n* SibSp - \uc774 \ud56d\ubaa9\uc740 \ud0d1\uc2b9\uc790\uac00 \ud63c\uc790\uc778\uc9c0 \ub610\ub294 \uac00\uc871\uacfc \ud568\uaed8 \uc788\ub294\uc9c0\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.\n* *Sibling = \ud615\uc81c, \uc790\ub9e4, \uc758\ubd93 \ud615\uc81c, \uc774\ubcf5 \ub204\uc774\n \n* Spouse = \ub0a8\ud3b8, \uc544\ub0b4\n \n* Parch\ub294 \ubd80\ubaa8\uc640 \ud568\uaed8 \ud0d4\ub294\uc9c0\ub97c \ubd05\ub2c8\ub2e4.\n \n* \uc774 \uadf8\ub8f9 \ub458\uc744 'Alone\"\uadf8\ub8f9\uacfc \"Family'\uadf8\ub8f9\uc73c\ub85c \ub098\ub215\ub2c8\ub2e4.","c265fdb7":"* \uc0ac\ud68c\ub294 \ubd88\uacf5\ud3c9 \ud588\uc73c\ub098 \ucd5c\uc18c\ud55c \ub0a8\uc790\ub4e4\uc758 \uc2e0\uc0ac\ub3c4\ub294 \uc788\uc5c8\ub2e4\uace0 \ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","45a7db68":"* %\ub294 3\ub4f1\uce78\uc774 \ubc18\uc774 \ub118\uc73c\ub098 \uc704\uc758 \uadf8\ub798\ud504\uc5d0\uc11c \uc0dd\uc874\uc790\ub294 1\ub4f1\uc11d\uc774 \uac00\uc7a5 \ub9ce\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \uac01 \ud074\ub798\uc2a4 \ub2f9 \uc0dd\uc874\ub960\uc744 \ubcfc\uae4c\uc694?","370d4aeb":"### CSV to DF\n\n* csv\ub97c \uc784\ud3ec\ud2b8\ud558\uc5ec \ub370\uc774\ud130\uc14b\uc774 \ud310\ub2e4\uc2a4 \ub370\uc774\ud130\ud504\ub808\uc784\uc774 \ub418\ub3c4\ub85d \ud569\ub2c8\ub2e4.","dc9ff636":"\uc774\ub97c \uc131\ubcc4\ub85c \ubd05\ub2c8\ub2e4.","1784856f":"* \"Surived\" \ubd84\uc11d\n\n\ud55c \uc5f4\uc529 \uac80\ud1a0\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\nSurvived - Key: (0 - Not Survived, 1- Survived)\n\nSurvived\ub294 \uc22b\uc790\ub85c \uac12\uc744 \uc8fc\uc9c0\ub9cc Categorical Variable\uc778 \uc148\uc785\ub2c8\ub2e4.\n\n\uc8fd\ub358\uc9c0 \uc0b4\ub358\uc9c0 \ub458 \uc911 \ud558\ub098\uc758 \uac12\uc744 \uc90d\ub2c8\ub2e4.\n\ncountplot\uc744 \uadf8\ub824 \ubd05\ub2c8\ub2e4.\n\n\uc0ac\uc774\uc988\ub294 \uac00\ub85c 10\uc778\uce58 \uc138\ub85c 2\uc778\uce58\n\n\uc0dd\uc874 \uc5ec\ubd80 0\uacfc 1\uc758 \uc22b\uc790\ub97c \uc138\uc5b4 \ubcf8 \ud6c4 \uadf8\ub9bc\uc744 \uadf8\ub9ac\ub3c4\ub85d \uba85\ub839\uc744 \ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n\npyplot(plt)\uc758 figure\ub77c\ub294 \uba54\uc18c\ub4dc\ub97c \uc368\uc11c \uadf8\ub9bc\ud310\uc758 \ud06c\uae30\ub97c \uc815\ud558\uace0, seaborn\uc758 \uce74\uc6b4\ud2b8\ud50c\ub86f\uc744 \uadf8\ub9ac\ub77c\ub294 \uac83\uc785\ub2c8\ub2e4.","961536fe":"### XGB Step 2.","f0f869ca":"<a id = \"part11\"><\/a>\n## Part 11: \ub9c8\uc9c0\ub9c9 \ubcf4\ud305\n[Go to the Table of Contents](#table_of_contents)","b6484e10":"[Regex \uacf5\ubd80](https:\/\/en.wikipedia.org\/wiki\/Regular_expression)\n\n* \uc548\uc804\uc744 \uc704\ud574 \uce74\ud53c\ub97c \ud558\ub098 \ub9cc\ub4e4\uc5b4\uc11c \uc0c8\ub85c\uc6b4 \ud56d\ubaa9\uc744 \ub9cc\ub4e4\uc5b4 \ubd05\ub2c8\ub2e4.","9ef64c9c":"Miss\ub098 Mr\ub4f1\uc740 \ub9ce\uc73c\ub098 \uc775\uc219\ud558\uc9c0 \uc54a\uc740 \uba87 \uac1c\uac00 \ubcf4\uc785\ub2c8\ub2e4.","5b30c910":"![](https:\/\/i.imgur.com\/rRFchA8.png)","e90c8dc2":"<a id = \"part8\"><\/a>\n## Part 8: \uc911\uc694\ub3c4\uc5d0 \ub530\ub77c \ubaa8\ub378 \uc7ac \uc124\uc815\n[Go to the Table of Contents](#table_of_contents)","97ac3c34":"\ub2e8\uc21c\ud788 \uc5f0\uc2b5\uc73c\ub85c, \ud55c \ubc88 \uc6d0\ud558\ub294 \uceec\ub7fc\ub9cc \uc778\ub371\uc2f1\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\uc778\ub371\uc2f1\uc5d0 \ub300\ud574 \ub354 \uacf5\ubd80\ud558\uace0 \uc2f6\uc73c\uc2dc\ub2e4\uba74 \uc544\ub798 \ub9c1\ud06c\ub97c \ud074\ub9ad\ud558\uc5ec \uacf5\ubd80\ud574 \ubcf4\uc138\uc694.\n\n[w3schools \ub118\ud30c\uc774 \uc5b4\ub808\uc774 \uc778\ub371\uc2f1](https:\/\/www.w3schools.com\/python\/numpy_array_indexing.asp)\n\n[Joshua CHoi\ub2d8\uc758 \ud30c\uc774\uc36c \uc778\ub371\uc2f1](https:\/\/joshua-mobile-choi-1756.trinket.io\/python-3-4#\/tasks\/task-4-string-indexing)\n\n[Joshua Choi\ub2d8\uc758 \ud30c\uc774\uc36c \ub9ac\uc2a4\ud2b8 \uc778\ub371\uc2f1](https:\/\/joshua-mobile-choi-1756.trinket.io\/python-3-4#\/tasks\/task-15-list-methods)","32d7a7d5":"### \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \ubcf4\ub294 \ub2e4\uc591\ud55c \ubc29\ubc95","4d33fb2d":"### Logistic Regression\n* Penalty - L1 \uc744 \uc0ac\uc6a9\ud558\ub294 \ud68c\uadc0 \ubaa8\ub378\uc744 Lasso Regression\uc774\ub77c\uace0\ud558\uace0 L2\ub97c \uc0ac\uc6a9\ud558\ub294 \ubaa8\ub378\uc744 Ridge Regression\uc774\ub77c\uace0\ud569\ub2c8\ub2e4. \uc774 \ub458\uc758 \uc8fc\uc694 \ucc28\uc774\uc810\uc740 \ud398\ub110\ud2f0\uc785\ub2c8\ub2e4. \ub9bf\uc9c0 \ud68c\uadc0\ub294 \uc190\uc2e4 \ud568\uc218\uc5d0 \ud398\ub110\ud2f0 \ud56d\uc73c\ub85c \uacc4\uc218\uc758 \"\uc81c\uacf1 \ud06c\uae30\"\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4. L2-norm\uc774 \uc624\ucc28\ub97c \uc81c\uacf1\ud558\uae30 \ub54c\ubb38\uc5d0 (\uc624\ub958> 1 \uc778 \uacbd\uc6b0 \ub85c\ud2b8\uac00 \uc99d\uac00 \ud568) \ubaa8\ub378\uc740 L1-norm\ubcf4\ub2e4 \ud6e8\uc52c \ud070 \uc624\ucc28 (e vs e ^ 2)\ub97c \ubcf4\uac8c\ub418\ubbc0\ub85c \ud6e8\uc52c \ub354 \ubbfc\uac10\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc624\ub958\ub97c \ucd5c\uc18c\ud654\ud558\uae30 \uc704\ud574 \ubaa8\ub378\uc744 \uc870\uc815\ud574\uc90d\ub2c8\ub2e4.\n* C\ub294 estimator \uc785\ub2c8\ub2e4. logspace 1\ucc28\uc6d0 10\uac1c \ubc30\uc5f4\ub85c 0\uc5d0\uc11c 4\uae4c\uc9c0\ub97c estimator\ub85c \ub193\uc740 \uac83\uc785\ub2c8\ub2e4.","7760f2d4":"* \ub098\uc774\ub85c \ucd94\uce21\ud574\uc11c Mrs.\ub85c \ub123\uc2b5\ub2c8\ub2e4.\n* \uacb0\uce21\uce58\ub97c \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95\uc740 \ub9ce\uc73c\ub098 \uc774\ub807\uac8c \ud558\ub098\uc77c \uacbd\uc6b0\uc5d0\ub294 \uac00\uc7a5 \uc801\uc808\ud55c \ucd94\uce21\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub123\ub294 \uac83\ub3c4 \uad1c\ucc2e\uc2b5\ub2c8\ub2e4.\n\nlocate method \ud559\uc2b5 : https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.loc.html\n","763bbe53":"### XGB Step 3.","ad27a524":"<a id = \"part3\"><\/a>\n## Part 3: \ud30c\uc77c \ud0d0\uc0c9\n[Go to the Table of Contents](#table_of_contents)","a14ccf65":"[\ud568\uc218 \ub9cc\ub4e4\uae30 \uacf5\ubd80](https:\/\/trinket.io\/joshua-mobile-choi-1756\/courses\/python-3-4#\/tasks\/task-20-making-functions)\n\n[\ud30c\ub77c\ubbf8\ud130\uc640 \uc544\uaddc\uba3c\ud2b8 \uacf5\ubd80](https:\/\/trinket.io\/joshua-mobile-choi-1756\/courses\/python-3-4#\/tasks\/task-21-parameters-and-arguments)\n\n* \"Pclass\" \ubd84\uc11d\n\n* Pclass\ub294 \uac12\uc774 \uc22b\uc790\uc774\ub098 \uc11c\uc5f4\uc774 \uc815\ud574\uc9c4 Ordinal Feature\uc774\ub2e4.\n* Key:1 = 1st, 2= 2nd, 3 = 3rd\n* \uac01 \ud074\ub798\uc2a4 \ub2f9 \uc0dd\uc874\uc790\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","31d28831":"#### \ud30c\uc774\uc36c\uc758 \ud504\ub9b0\ud2b8\ubb38\uacfc \ud3ec\ub9f7\uc5d0 \ub300\ud574 \ubcf4\uc2dc\ub824\uba74 \uc544\ub798 \ub9c1\ud06c\ub97c \ud074\ub9ad\ud558\uc138\uc694.\n\n[\ud504\ub9b0\ud2b8\ubb38](https:\/\/joshua-mobile-choi-1756.trinket.io\/python-3-4#\/tasks\/task-1-print-statement)\n\n[\ud3ec\ub9f7\ud305](https:\/\/joshua-mobile-choi-1756.trinket.io\/python-3-4#\/tasks\/task-11-string-format)","dabd633f":"* \ubd88\ud589\ud788\ub3c4 \uc0ac\ub9dd\uc790\uac00 \ud6e8\uc52c \ub9ce\uc544 \ubcf4\uc785\ub2c8\ub2e4.\n* \uc804\uccb4 \uc0ac\ub9dd\uc790 \ube44\uc728\uc744 \uc880 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n* \ud30c\uc774\uadf8\ub798\ud504\ub791 \uce74\uc6b4\ud2b8 \ud50c\ub86f\uc744 \uc11c\ube0c\ud50c\ub86f\uc73c\ub85c \uadf8\ub9bd\ub2c8\ub2e4.\n* \ud589\uc740 \ud558\ub098 \uc5f4\uc740 2\uac1c\uc758 \uc11c\ube0c \ud50c\ub86f\uc785\ub2c8\ub2e4. \uc0ac\uc774\uc988\ub294 \uac00\ub85c 15\uc778\uce58 \uc138\ub85c 6\uc778\uce58\n* 'Survived'\uc758 \uac12\uc744 \uce74\uc6b4\ud2b8\ud574\uc11c \ud30c\uc774\ud50c\ub86f\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n* explode\ub294 \ud3ed\ubc1c\ud558\ub294 \uac83\uc774\ub2c8\uae4c 1\uc774\uba74 \ud280\uc5b4 \ub098\uac00\ub294 \uac83\uc778\ub370 0\uc744 \uc8fc\uba74 \ubd84\ub9ac\ub9cc \ub418\uace0 \ub3cc\ucd9c\uc740 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\uc5b4\uc11c 0, 1\uc778 \uac83\uc740 \uccab \ubc88\uc9f8 \uac83\uc740 \uc544\ub2c8\uace0 \ub450\ubc88 \uc9f8 \uac83\uc740 \ubd84\ub9ac\ub41c\ub2e4\ub294 \uc758\ubbf8\ub85c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n* autopercent\ub294 1.1\uc774 \ud45c\ud604\ud558\ub294 \ubd80\ubd84\uc740 \uc18c\uc218\uc810 \ud55c \uc790\ub9ac\uae4c\uc9c0 \ubcf4\uc5ec \uc8fc\ub77c\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. \ub4a4\uc5d0 \uc810 \uc774\ud558\uac00 4\uba74 \ub458 \ub2e4 \uc18c\uc218\uc810 4\uc790\ub9ac\uc218 \uae4c\uc9c0 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.\n* ax[0]\uc740 \uccab\ubc88\uc9f8 \uce78\uc785\ub2c8\ub2e4.\n* set_title \uba54\uc18c\ub4dc\ub294 \uc11c\ube0c \ud50c\ub86f\uc758 \uc81c\ubaa9\uc744 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.","1223b31f":"* \uc774\ub984\uc740 \uc5b8\ub73b \ubcf4\uc544\uc11c \uac10\uc774 \uc548 \uc635\ub2c8\ub2e4. \uc911\uac04\uc5d0 \uc788\ub294 Mr. \uac19\uc740 \ud638\uce6d\uc744 \ubcfc\uae4c\uc694.\n* ['Initial']\uc774\ub780 \uc5f4\uc744 \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc11c \uc5ec\uae30\uc5d0 Name\uc5d0\uc11c \ucd94\ucd9c\ud55c Regular Expression\uc744 \ub123\uc2b5\ub2c8\ub2e4.\n* \uc544\ub798\uc5d0\uc11c str.extract('([A-Za-z]+).')\ubd80\ubd84\uc740 str\uc5d0\uc11c \ub300\ubb38\uc790 A~Z, \uc18c\ubb38\uc790 a~z \uc911\uc5d0 . \uba85\ub839\uc744 \ud1b5\ud574 .\uc73c\ub85c \ub05d\ub098\ub294 \ubd80\ubd84\uc744 \ucd94\ucd9c\ud574 \ub0b4\ub294 \uac83\uc785\ub2c8\ub2e4.\n* ('^([A-Za-z]+)')\uc73c\ub85c \ud558\uba74 \ucc98\uc74c\uc5d0 \ub098\uc624\ub294 \ubb38\uc790 \ub369\uc5b4\ub9ac\uac00 \ub420 \uac83\uc774\uace0 +\ub97c \ube7c\uba74 \uccab \uc2a4\ud3a0\ub9c1 \ud55c\uce90\ub9ad\ud130\ub9cc \ucd94\ucd9c\ud569\ub2c8\ub2e4.","2d58db76":"* \uc704\uc758 \uac83\uc744 \uc544\ub798\uc640 \uac19\uc774 \ud568\uc218\ub85c \ub9cc\ub4e4\uaca0\uc2b5\ub2c8\ub2e4. (\ubb3c\ub860 \uc790\uc8fc \uc4f0\uc774\uc9c0\ub294 \uc54a\uaca0\uc9c0\ub9cc \uc5f0\uc2b5\uc774\ub2c8)","3aa638aa":"### XGBoost Step 1.","12fd6a2a":"<a id = \"part6\"><\/a>\n## Part 6: \ub9c8\uc9c0\ub9c9 \ud56d\ubaa9 \uacb0\uc815\n[Go to the Table of Contents](#table_of_contents)","991f8ba9":"### Gradient Boosting Classifier\n* learning_rate\ub294 \uac01 \ud2b8\ub9ac\uc758 \uae30\uc5ec\ub97c \uc904\uc774\ub294 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4.\n* n_estimator\ub294 \uac01 \uacbd\uc6b0\uc758 \ud2b8\ub9ac \uc22b\uc790\uc785\ub2c8\ub2e4.","84fe25eb":"### Random Forest.","fd22e9af":"* \uac00\uc7a5 \ube44\uc2b7\ud55c \ubc88\ud638\ub97c \ucc3e\uc544 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","ce8a48c5":"* \ud30c\uc77c \uac01 \uc5f4\uc758 \uc0c1\uad00 \uad00\uacc4\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\nCo-relation \ub9e4\ud2b8\ub9ad\uc2a4\ub294 seaborn\uc5d0\uc11c \ubcc0\uc218 \uac04 \uc0c1\uad00 \uacc4\uc218\ub97c \ubcf4\uc5ec\uc8fc\ub294 \ud45c\uc785\ub2c8\ub2e4. \ud45c\uc758 \uac01 \uc140\uc740 \ub450 \ubcc0\uc218 \uac04\uc758 \uc0c1\uad00 \uad00\uacc4\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. \uc0c1\uad00 \ub9e4\ud2b8\ub9ad\uc2a4\ub294 \uace0\uae09 \ubd84\uc11d\uc5d0 \ub300\ud55c \uc785\ub825 \ubc0f \uace0\uae09 \ubd84\uc11d\uc5d0 \ub300\ud55c \uc9c4\ub2e8\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc694\uc57d\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \n\n\ucc38\uace0: https:\/\/seaborn.pydata.org\/examples\/many_pairwise_correlations.html\n\n\uc544\ub798 \ub9c8\uc2a4\ud06c \uc14b\uc5c5\uc740 0\ub85c \ud589\ub82c\uc744 \uc0c1\uad00 \ud589\ub82c\uacfc \uac19\uc740 \ubaa8\uc591\uc73c\ub85c \ub9cc\ub4e0 \ud6c4 \uc5ec\uae30\uc5d0 \ubd88\ub9ac\uc548 \uac12\uc744 \ub123\uace0 \uc774\ub97c \ub2e4\uc2dc True\ub9cc \ub9cc\ub4ed\ub2c8\ub2e4.\n\ntriu \ub294 \uc6b0\uce21 \uc0c1\ub2e8 \uc0bc\uac01\ud589\ub82c\uc744 \uc758\ubbf8\n\nannot= True\ub294 \uac01 \uc140\uc5d0 \uc22b\uc790\ub97c \ud45c\uc2dc\ud558\ub77c\ub294 \uac83\uc774\uace0, False\ub294 \ud558\uc9c0 \ub9d0\ub77c\ub294 \uac83\uc774\uad6c\uc694\n\n\uc774\uc5b4\uc11c \uc774\ub97c heatmap\uc73c\ub85c \ub7f0\uce6d\ud569\ub2c8\ub2e4.","1bc9ca5d":"### XGB Step 4","79f4d335":"<a id = \"part12\"><\/a>\n## Part 12: \ub9c8\uc9c0\ub9c9 \ubaa8\ub378 \uc608\uce21\n[Go to the Table of Contents](#table_of_contents)","c5a15800":"<a id = \"table_of_contents\"><\/a>\n## Table of contents\n\n[Part 1: \ub370\uc774\ud130 \uc900\ube44 \ubc0f \ubaa8\ub4c8 \uc784\ud3ec\ud2b8](#part1)\t\t\t\n[Part 2: \ud30c\uc77c \ubcd1\ud569](#part2)\t\t\t\n[Part 3: \ud30c\uc77c \ud0d0\uc0c9](#part3)\t\t\t\n[Part 4: \ub370\uc774\ud130 \ud0d0\uad6c (Exploratory Data Analysis)](#part4)\t\t\t\n[Part 5: Feature Engineering](#part5)\t\n\n[Part 6: \ub9c8\uc9c0\ub9c9 \ud56d\ubaa9 \uacb0\uc815](#part6)\t\t\t\n[Part 7: \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378 \ub9cc\ub4e4\uae30](#part7)\t\t\t\n[Part 8: \uc911\uc694\ub3c4\uc5d0 \ub530\ub77c \ubaa8\ub378 \uc7ac \uc124\uc815 ](#part8)\t\t\t\n[Part 9: \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd](#part9)\t\t\t\n[Part 10: \ubaa8\ub378 \uc7ac \ud2b8\ub808\uc774\ub2dd](#part10)\t\t\t\n\n[Part 11: \ub9c8\uc9c0\ub9c9 \ubcf4\ud305](#part11)\t\n[Part 12: \ub9c8\uc9c0\ub9c9 \ubaa8\ub378 \uc608\uce21](#part12)   \n[Part 13: \uc81c\ucd9c](#part13)","2d317de1":"`columns`\uc740 \ub370\uc774\ud130 \ud504\ub808\uc784\uc758 \uc5f4\uc758 \uc81c\ubaa9\ub4e4\uc744 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.","8b368a9b":"### Extra Trees","2e5e3665":"### \"Name\" \ubd84\uc11d\n* \uc774\ub984\uc740 \uac70\uc758 \ubaa8\ub450 \ub2e4\ub97c \uac00\ub2a5\uc131\uc774 \ud07d\ub2c8\ub2e4. Family Name, First Name, Middle Name and even Dr. Capt, master and so on \ubaa8\ub450 \uac10\uc548\ud558\uba74...\n* \ubd84\ub958\ub97c \ud55c \ubc88 \ud574 \ubd05\ub2c8\ub2e4.\n* \ub9ac\uc2a4\ud2b8\ub97c \ud55c \ubc88 \uc8fc \uc6b1 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","2ae86118":"### \"Sex\" \ubd84\uc11d\n\n* \ud568\uc218\ub97c \ub9cc\ub4e4\uc5b4\uc11c train\ud30c\uc77c\uc744 \ubcf4\uc9c0\uc694","bb6d600a":"* \ud06c\ub85c\uc2a4 \ud0ed\uc740 \ub2e4\uc2dc \uc2dd\uad6c \ub9ce\uc740 \ucabd\uc740 Pclass3\uc5d0 \uc788\uc74c\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.\n \n* \uc5ec\uae30\uc5d0\uc11c\ub3c4 \uacb0\uacfc\ub294 \ub9e4\uc6b0 \ube44\uc2b7\ud569\ub2c8\ub2e4. \ubd80\ubaa8\uc640 \ud568\uaed8 \ud0d1\uc2b9 \ud55c \uc2b9\uac1d\uc740 \uc0dd\uc874 \uac00\ub2a5\uc131\uc774 \ub354 \ub192\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc22b\uc790\uac00 \uc62c\ub77c \uac08\uc218\ub85d \uc904\uc5b4 \ub4ed\ub2c8\ub2e4.\n \n* \uc0dd\uc874 \uac00\ub2a5\uc131\uc740 \ubc30\uc5d0 1-3 \uba85\uc758 \ubd80\ubaa8\uac00\uc788\ub294 \ub204\uad70\uac00\uc5d0\uac8c \uc88b\uc2b5\ub2c8\ub2e4. \ud63c\uc790 \ub610\ud55c \uc0dd\uc874 \uac00\ub2a5\uc131\uc774 \ub0ae\uc740 \uac83\uc73c\ub85c \ud310\uba85\ub418\uace0 \uac00\uc871\uc774 4 \uba85\uc774\uc0c1 \uc788\uc73c\uba74 \uc0dd\uc874 \uac00\ub2a5\uc131\uc774 \uc904\uc5b4 \ub4ed\ub2c8\ub2e4. \uc774\ub294 \uc18c\uc218\uc758 \uac00\uc871\ub4e4\uc774 \uc788\ub294 \uadc0\uc871\uce35\uc774 \uc0dd\uc874\ud558\uace0, \ud63c\uc790\uac00 \ub9ce\uc740 \uc80a\uc740 \uc774\ub4e4\uc740 \uc591\ubcf4\ub97c \ud560 \uc218 \ubc16\uc5d0 \uc5c6\uace0, \uac00\uc871\uc774 \ub9ce\uc740 \uc0ac\ub78c\ub4e4(\ud2b9\ud788 \uadc0\uc871\uc774 \uc544\ub2cc 3\ub4f1\uce78 \uc0ac\ub78c\ub4e4)\uc740 \uc804\uc6d0\uc774 \ud0c0\uc9c0 \ubabb \ud558\uba74 \uc5b4\ub290 \ub204\uad6c\ub3c4 \ud0c8 \uc218\uac00 \uc5c6\ub294 \ube44\uadf9\uc801\uc778 \ub2f9\uc2dc \uc0c1\ud669\uc744 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.","c7f2c175":"\uc774 \ud29c\ud1a0\ub9ac\uc5bc\uc740 \uce90\uae00\uc5d0 \ucc98\uc74c \ub3c4\uc804\ud558\ub294 \ubd84\ub4e4\uc744 \uc704\ud55c \uac83\uc785\ub2c8\ub2e4. \ucee4\ub110\ubd80\ubb38 \uc138\uacc41\uc704\uc778 \uc548\ub4dc\ub808\uc774 \ub8e9\uc57c\ub128\ucf54\uc758 \ub178\ud2b8\ubd81\uc5d0 \ud55c\uae00\ub85c\uc124\uba85\uc744 \ucd94\uac00\ub85c \ubd99\uc778 \uac83\uc785\ub2c8\ub2e4. \n\uc774 \ub178\ud2b8\uc758 \uacb0\uacfc\ub294 \uc791\uc131 \ud604\uc7ac Top 4% \uacb0\uacfc\ub97c \ubcf4\uc785\ub2c8\ub2e4. (\ub79c\ub364\uc774 \ub418\ub294 \ubd80\ubd84\uc774 \uc788\uc5b4\uc11c \uacb0\uacfc\uac00 \uc57d\uac04\uc529 \ub2e4\ub974\uac8c \ub098\uc624\uae34 \ud569\ub2c8\ub2e4\ub9cc \uc5ec\ub7ec\ubc88 \ud558\uc2dc\uba74 4% \uc120\uae4c\uc9c0 \uc62c\ub77c\uac11\ub2c8\ub2e4.)\nKaggle\uc5d0 \ucc98\uc74c\uc73c\ub85c \ub85c\uadf8\uc778\ud558\ub294 \uac83\uc740 \uc26c\uc6b4 \uacb0\uc815\uc774 \uc544\ub2d9\ub2c8\ub2e4. \ub0b4\uac00 \ubb34\uc2a8 \uba38\uc2e0\ub7ec\ub2dd\uc744? \uc774\ub7f0 \uc0dd\uac01\uc744 \ud558\uc2e4 \uc218 \ub3c4 \uc788\uaca0\uc2b5\ub2c8\ub2e4. \n\uce90\uae00\uc740 \ub300\ud68c\ub85c\uc11c\ub3c4 \uc758\ubbf8\uac00 \uc788\uaca0\uc73c\ub098 \ubc30\uc6c0\uc758 \ud130\uc785\ub2c8\ub2e4. \uc774\ub7f0 \ub370\uc774\ud130\ub97c \ucd08\ubcf4\uc790\uac00 \uc5b4\ub514\uc11c \uad6c\ud558\uba70 \uc5b4\ub5bb\uac8c \ub2e4\ub978 \uc0ac\ub78c\ub4e4\uc774 \uc77c\ud55c \uac83\uc744 \ud1b5\ud574 \uc774\ub9ac \uc27d\uac8c \ubc30\uc6b0\uaca0\uc2b5\ub2c8\uae4c? \n\uc774 \ud29c\ud1a0\ub9ac\uc5bc\uc774 \ub05d\ub0a0 \ub54c \uc988\uc74c\uc5d0\ub294 Kaggle\uc758 \uc628\ub77c\uc778 \ucf54\ub529 \ud658\uacbd\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud55c \uc774\ud574\ub97c \uc5bb\uac8c\ub418\uba70 \uadf8 \uc640\uc911\uc5d0 \uba38\uc2e0\ub7ec\ub2dd \ud559\uc2b5 \ubaa8\ub378\uc744 \ud559\uc2b5\ud558\uac8c\ub429\ub2c8\ub2e4.\n\n\uc6b0\uce21 \uc0c1\ub2e8\uc5d0 Copy & Edit\uc744 \ub20c\ub7ec\uc11c \ubcf5\uc0ac.","eb9ce8c1":"### Adaboost.","ee968abc":"* \ud2f0\ucf13\uc5d0\uc11c \uc601\ubb38\uc788\ub294 \uac83\uacfc \uc22b\uc790\ub9cc \uc788\ub294 \uac83\uc744 \ub530\ubd05\ub2c8\ub2e4.","5724e1dd":"#### \"Ticket\"\ubd84\uc11d\n* Ticket\uc758 \ud615\ud0dc\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","0b67d884":"\uc0c8\ub85c\uc6b4 Data Frame\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.","26c0bf46":"* Last name \uc740 \uc804\ubd80 \uc22b\uc790\ub85c \ubc14\uafc9\ub2c8\ub2e4.","a2d060c1":"\uc5f4 \uc774\ub984\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","2b999f96":"* \uc0dd\uc874\ub960\ub85c \ubd05\ub2c8\ub2e4.\n\n* \uc0dd\uc874\uc728 \ud568\uc218\ub97c \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","250b033e":"### Bagging Classifier","319019af":"* \uc704\ub97c \ubcf4\uace0 sex\ub97c \ub0a8,\ub140, 1\uc138 \uc774\ud558 Baby\ub85c \ub098\ub204\uaca0\uc2b5\ub2c8\ub2e4. 1,2,3\ubc88\uc744 \uc8fc\uc9c0\uc624","7ba9f25b":"* Fare\ub97c \uadf8\ub8f9\ud654 \uc2dc\ud0b5\ub2c8\ub2e4. Fgroup\uc774\ub77c\uace0 \uc774\ub984 \uc9d3\uaca0\uc2b5\ub2c8\ub2e4.","3217be74":"\uad6c\uae00 \ucf5c\ub7a9\uc5d0\uc11c \uc0ac\uc6a9\ud558\uc2e4 \ub54c\ub294 \ucef4\ud4e8\ud130\uc5d0 \ud30c\uc77c\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ud55c \ud6c4 \uc544\ub798 \ucf54\ub4dc\ub97c \uc785\ub825\ud558\uba74 \ubd88\ub7ec\uc62c \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4.\n\n    from google.colab import files\n    uploaded = files.upload()\n\n\uadf8\ub7f0 \ub2e4\uc74c \uc544\ub798 \ucf54\ub4dc\ub97c \ud1b5\ud574\uc11c csv\ub97c \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c \ubc14\uafc0 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4.\n\n    import io\n    test = pd.read_csv(io.BytesIO(uploaded['test.csv']))\n    train = pd.read_csv(io.BytesIO(uploaded['train.csv']))","84e3c642":"* [\ub9ac\uc2a4\ud2b8 \ud559\uc2b5](https:\/\/trinket.io\/joshua-mobile-choi-1756\/courses\/python-3-4#\/tasks\/task-14-list)\n* [\ub515\uc1fc\ub108\ub9ac \ud559\uc2b5](https:\/\/trinket.io\/joshua-mobile-choi-1756\/courses\/python-3-4#\/tasks\/task-16-dictionary)","92d82bfa":"#### \uad00\ucc30 :\n\n1) Pclass\uc5d0 \ub530\ub77c \uc5b4\ub9b0\uc774 \uc218\uac00 \uc99d\uac00\ud558\uace0 10 \uc138 \ubbf8\ub9cc\uc758 \uc5b4\ub9b0\uc774 (\uc989, \uc5b4\ub9b0\uc774)\uc758 \uc0dd\uc874\uc728\uc740 Pclass\uc5d0 \uc0c1\uad00\uc5c6\uc774 \uc591\ud638\ud574 \ubcf4\uc785\ub2c8\ub2e4.\n\n2) Pclass1\uc5d0\uc11c 20-50\uc138\uc758 Passeneger\uc758 \uc0dd\uc874 \uac00\ub2a5\uc131\uc740 \ub192\uace0 \uc5ec\uc131\uc5d0\uac8c\ub294 \ub354 \uc88b\uc2b5\ub2c8\ub2e4.\n\n3) \ub0a8\uc131\uc758 \uacbd\uc6b0 \uc0dd\uc874 \ud655\ub960\uc740 \ub098\uc774\uac00 \uc99d\uac00\ud568\uc5d0 \ub530\ub77c \uac10\uc18c\ud569\ub2c8\ub2e4.\n\n\n\uc6b0\uc120 age\uc758 \ube48\uce78 \ubd80\ud130 \ud574\uacb0 \ud569\ub2c8\ub2e4.\n\n\uc55e\uc5d0\uc11c \uc0b4\ud3b4\ubcf8 \uac83\ucc98\ub7fc Age \ud56d\ubaa9\uc5d0\ub294 177 null \uac12\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c NaN \uac12\uc744 \ub300\uccb4\ud558\uae30 \uc704\ud574 \ub370\uc774\ud130 \uc9d1\ud569\uc758 \ud3c9\uade0 \uc218\uba85\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uadf8\ub7ec\ub098 \ubb38\uc81c\ub294 \ud3c9\uade0 \uc5f0\ub839\uc774 29 \uc138\ub97c 4\uc138 \uc544\uc774\uc5d0\uac8c \ud560\ub2f9 \ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uc2b9\uac1d\uc774 \uc5b4\ub5a4 \uc5f0\ub839\ub300\uc5d0 \uc788\ub294\uc9c0 \uc54c \uc218\uc788\ub294 \ubc29\ubc95\uc774 \uc788\uc744\uae4c\uc694? \uc774\ub984\uc5d0\uc11c \ud78c\ud2b8\ub97c \ucc3e\uc544 \ubd05\ub2c8\ub2e4.","284135b4":"* \uc790, \uc774\uc81c \uba38\uc2e0 \ub7ec\ub2dd \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uc9c0\uc694.\n* \uc6b0\uc120 \uc778\ucf54\ub529\ud55c \ud30c\uc77c\uc744 train\uacfc test\ub85c \uc544\uae4c \uad6c\ubd84\ud574 \ub193\uc740 \ud589\uc73c\ub85c \ucabc\uac2d\ub2c8\ub2e4","8d456f62":"* \uc774\uc81c \uc6b0\ub9ac\ub294 Initial\uc5d0\uc11c Mr.\ub4f1\uc758 \ud638\uce6d\uc744 \ubf51\uc544\ub0b4\uc5c8\uace0, \uc131\uc744 \ubf51\uc544\ub0b4\uc5c8\uc2b5\ub2c8\ub2e4.\n\n* \uba38\uc2e0\uc774 \uc54c\ud30c\ubcb3\ubcf4\ub2e4\ub294 \uc22b\uc790\ub97c \uc88b\uc544 \ud558\ubbc0\ub85c \uc22b\uc790\ub85c \ubc14\uafc9\ub2c8\ub2e4.\n\n* \uc544, \uadf8\ub7ec\uae30 \uc804\uc5d0 Dona\ub97c \ucc98\ub9ac\ud574\uc57c\uc9c0\uc694.","fcf3087a":"* \ub3c4\ubb34\uc9c0 \uac10\uc774 \uc548 \uc7a1\ud788\ub294 \ubc30\uc5f4\uc785\ub2c8\ub2e4.\n* \ube48\uce78\uc774 \uc5c6\ub294\uc9c0 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","c37983c8":"### \"Cabin\" \ubd84\uc11d\n* cabin \uc758 \uc704\uce58\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9c0\ub294 \uac83\uc774 \uc788\ub294\uc9c0 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","18db1a72":"* \ub450\uac1c\uc758 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130 \ud504\ub808\uc784\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. \ud558\ub098\ub294 \ub808\uc774\ube14 \uc778\ucf54\ub529 \ub2e4\ub978 \ud558\ub098\ub294 \uc6d0\ud56b \uc778\ucf54\ub529 (\ub458\uc774 \uaf2d \ud544\uc694\ud55c \uac83\uc774 \uc544\ub2c8\ub77c \uc5f0\uc2b5\uc774\ub098 \ub450 \uac00\uc9c0 \ubc29 \ubc95 \ubaa8\ub450 \uc0ac\uc6a9\ud574\ubd04)","1f87e660":"### XGB Step 5","24aaa5fc":"* test \uc5d0 \uc788\ub294 Dona\uc758 \ub098\uc774\ub97c \ubcf4\uace0 \uc5b4\ub514\uc5d0 \ub123\uc744\uc9c0 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Ms. \ub294 \ud604\ub300\ucc98\ub7fc Miss + Mrs\ub97c \ud569\uce5c \ub9d0\uc774 \uc544\ub2c8\ub77c \ub2f9\uc2dc\uc5d0\ub294 \uadc0\uc871\ubbf8\ub9dd\uc778\uc744 \uc758\ubbf8\ud558\ub294 \uac83\uc774 \uc5c8\uc2b5\ub2c8\ub2e4. Mlle\ub098 Mme\ub4f1\ub3c4 \ub9c8\ub4dc\ubaa8\uc544\uc824\uacfc \ub9c8\ub2f4\uc758 \uc904\uc778\ub9d0\uc77c \uacbd\uc6b0\uc77c \uac83\uc785\ub2c8\ub2e4. \uadc0\uc871 \uc5ec\uc131\ub4e4\ub85c \ubcf4\uc544\uc57c\uaca0\uc8e0.","58f493f0":"* \uc2b9\uc120 \uc7a5\uc18c \ubcc4\ub85c \uc0dd\uc874 \ud655\ub960","f3a2a714":"* \uc0dd\uc874 \uc22b\uc790\ub85c \ubd05\ub2c8\ub2e4.","8603fe36":"[\ub78c\ub2e4\ud568\uc218 \uacf5\ubd80](https:\/\/trinket.io\/joshua-mobile-choi-1756\/courses\/python-3-4#\/tasks\/task-34-lambda)\n\n[\ub78c\ub2e4\ud568\uc218 \uba54\uc18c\ub4dc](https:\/\/trinket.io\/joshua-mobile-choi-1756\/courses\/python-3-4#\/tasks\/task-35-lambda-and-functions)\n\n* \uc774\uc81c Initial\uc744 \uc880 \uc815\ub9ac\ud569\ub2c8\ub2e4.","068d1d33":"### \uc911\uc694 \ub9c1\ud06c\n\n[\uad6c\uae00 \ucf5c\ub7a9](https:\/\/colab.research.google.com\/) \n\n[\uae43\ud5d9\ube0c](https:\/\/github.com)\n\n### \ucd08\ubcf4\uc790\uc774\uc2e4 \uacbd\uc6b0\ub294 \uc544\ub798 \ub9c1\ud06c \uc911 \ubcf8\uc778\uc5d0\uac8c \ub9de\ub294 \uac83\uc744 \ubbf8\ub9ac \uacf5\ubd80\ud574 \ubcf4\ub294 \uac83\ub3c4 \ub3c4\uc6c0\uc774 \ub429\ub2c8\ub2e4.\n\n[edx\uc758 \ud30c\uc774\uc36c \uae30\ucd08\uc218\uc5c5](https:\/\/learn.edx.org\/topic-python\/?g_acctid=926-195-8061&g_campaign=gs-nonbrand-topic-python&g_campaignid=1535528542&g_adgroupid=58645176415&g_adid=405031374941&g_keyword=learn%20python%20online%20tutorial&g_keywordid=kwd-357260176984&g_network=g?utm_source=adwords&utm_campaign=1535528542&utm_medium=58645176415&utm_term=learn%20python%20online%20tutorial&gclid=CjwKCAjwwYP2BRBGEiwAkoBpAu6FTNidm90CEM1AJQGDn_mvW_bDMJSkWuWk6DnUJCrCXnG0-vW_aBoC8GwQAvD_BwE)\n\n[\ud30c\uc774\uc36c org\uc5d0 \ub098\uc624\ub294 \ud30c\uc774\uc36c \uae30\ucd08\uc218\uc5c5](https:\/\/docs.python.org\/3\/tutorial\/)\n\n[w3schools \ud30c\uc774\uc36c \uae30\ucd08\uc218\uc5c5](https:\/\/www.w3schools.com\/python\/)\n\n[Joshua Choi\ub2d8\uc758 \ud30c\uc774\uc36c \uae30\ucd08 \ubb38\ubc95 \uc5f0\uc2b5](https:\/\/joshua-mobile-choi-1756.trinket.io\/python-3-4#\/tasks\/task-1-print-statement)\n\n[Joshua Choi\ub2d8\uc758 \ud0c0\uc774\ud0c0\ub2c9 \ud310\ub2e4\uc2a4 101 \uc0ac\uc6a9 \uc608](https:\/\/www.kaggle.com\/joshuajhchoi\/101-pandas-tips-for-beginners-titanic-en-kr)\n\n[Joshua Choi\ub2d8\uc758 \ud0c0\uc774\ud0c0\ub2c9 \uc2dc\uac01\ud654 101 \uc0ac\uc6a9 \uc608](https:\/\/www.kaggle.com\/joshuajhchoi\/101-data-visualization-tips-for-titanic-beginners)\n\n[Seaborn\uc5f0\uc2b5](https:\/\/seaborn.pydata.org\/tutorial\/aesthetics.html)","32982f5e":"[Kaggle \ud398\uc774\uc9c0\uc5d0\uc11c \ud0c0\uc774\ud0c0\ub2c9 \uc5f4 \uc774\ub984 \ubcf4\uae30 (\ud574\ub2f9 \ud398\uc774\uc9c0 \uc911\uac04\uc5d0 Dictionary \ubcf4\uc2dc\uba74 \ub428)](https:\/\/www.kaggle.com\/c\/titanic\/data)","a5c1f328":"<a id = \"part7\"><\/a>\n## Part 7:  \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378 \ub9cc\ub4e4\uae30\n[Go to the Table of Contents](#table_of_contents)","0545dd94":"* \ub300\ud45c\uc801\uc778 \uc778\ucf54\ub529\uc5d0 Label Encoding\uc774 \uc788\ub294\ub370 \uc774\ub294 \uac01 \ud56d\ubaa9\uc758 \uac12\uc744 \uc11c\uc5f4\ud654 \uc2dc\ucf1c \uc8fc~\uc6b1 \uc904\uc138\uc6b4 \uac83\uc774\ub77c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n* \uadf8 \uc678\uc5d0 \uc790\uc8fc\uc4f0\ub294 One Hot Encoding \uac19\uc740 \uacbd\uc6b0 \uc5f4 \ub0b4\uc5d0\uc11c\uc758 \ud56d\ubaa9\uc744 \ub098\ub204\uc5b4\uc11c (\uc5f4\uc774 \uc8fc~\uc6b1 \ub298\uc5b4\ub098\uba70) \uc774\ub97c 0\uc774\ub0d0 1\uc774\ub0d0\ub85c \uad6c\ubd84\ud574 \ub193\uc740 \uac83\uc785\ub2c8\ub2e4.","f0a7dd9d":"`shape` \uc740 \ud589\uc758 \uac2f\uc218\uc640 \uc5f4\uc758 \uac2f\uc218\ub97c \ubcf4\uc5ec \uc90d\ub2c8\ub2e4","1f21b855":"1) \ud3ec\ud2b8 C\uc758 \uc0dd\uc874 \uac00\ub2a5\uc131\uc740 0.55 \uc815\ub3c4\uc774\uba70 S\ub294 \uac00\uc7a5 \ub0ae\uc2b5\ub2c8\ub2e4.S\uc5d0\uc11c \ud0d1\uc2b9 \ucd5c\ub300. \ub300\ub2e4\uc218\ub294 Pclass3\n\n2) C\uc758 \uc2b9\uac1d\ub4e4\uc740 \ub9ce\uc740 \ube44\uc728\uc774 \uc0b4\uc544\ub0a8\uc558\uc2b5\ub2c8\ub2e4. \uadf8 \uc774\uc720\ub294 Pclass1 \ubc0f Pclass2 \uc2b9\uac1d\uc774 \ub9ce\uc544\uc11c \uc77c \uac83\uc785\ub2c8\ub2e4\n\n3) Embark S\ub294 \ub300\ubd80\ubd84\uc758 \ubd80\uc790\ub4e4\uc774 \ud0d1\uc2b9\ud55c \ud56d\uad6c\uc9c0\ub9cc \uc0dd\uc874 \uac00\ub2a5\uc131\uc740 \ub0ae\uc2b5\ub2c8\ub2e4. Pclass3\uc758 \uc2b9\uac1d\ub3c4 \ub9ce\uc558\uc2b5\ub2c8\ub2e4.\n\n4) \ud3ec\ud2b8 Q\ub294 \uc2b9\uac1d\uc758 \uac70\uc758 95 %\uac00 Pclass3\n\n* \ube48\uce78\uc774 \ub450\uac1c \uc788\ub294\ub370 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","a1aa0ed9":"* \ubcf4\uc2dc\ub2e4\uc2dc\ud53c \uac19\uc740 Last name\uc5d0 \uac19\uc740 \ubc88\ud638\uac00 \uc4f0\uc5ec\uc84c\ub2e4.\n\n* \ub05d\uc5d0 [0]\uc740 \ub77c\ubca8\ub9cc \ubcf4\uace0 \ubc88\ud638\ub97c \ubd99\uc774\ub294 \uac83\uc73c\ub85c \uc815\ub9d0 unique\ud55c \uac83\uc774\ub780 \uac83\uc740 \uc548 \ubcf8\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4.\n \n* \uc790 \uc774\uc81c \uc774\ub984\uc744 \uc758\ubbf8\ud558\ub294 \uc911\uc694\ud55c \uc694\uc18c \ub450 \uac1c\ub97c \uc22b\uc790\ub85c \ubc14\uafb8\uc5c8\uc73c\ub2c8 \ub2e4\uc74c\uc73c\ub85c \uac11\ub2c8\ub2e4.","4139c647":"### KNN"}}