{"cell_type":{"c71f4687":"code","ffc531c5":"code","679f23ad":"code","3d3fb664":"code","00bf61b2":"code","489b350a":"code","d66b04e9":"code","c67997f3":"code","38a76b86":"code","7f439996":"code","4119993a":"code","2e236701":"code","e8a65f33":"code","f49827f1":"code","be0a4a22":"code","d66f2208":"code","23d9b7a5":"code","4e304516":"code","d21850d1":"code","21668424":"code","740594bc":"code","dd0b39da":"code","b5009412":"code","2f8a62fe":"code","05d3d34e":"code","f5b9ee9e":"code","18be9577":"code","84bb294e":"code","31159e32":"markdown","d5b0d7e3":"markdown","9b05e68e":"markdown","d71021d6":"markdown","d214c87a":"markdown"},"source":{"c71f4687":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ffc531c5":"import seaborn as sns\nimport matplotlib.pyplot as plt","679f23ad":"df = pd.read_csv('..\/input\/employee-attrition\/WA_Fn-UseC_-HR-Employee-Attrition.csv')\ndf.head()","3d3fb664":"df.shape","00bf61b2":"df.describe()","489b350a":"df.isnull().sum()","d66b04e9":"attrition_count = pd.DataFrame(df['Attrition'].value_counts())\nattrition_count","c67997f3":"plt.pie(attrition_count['Attrition'] , labels = ['No' , 'Yes'] , explode = (0.2,0))","38a76b86":"sns.countplot(df['Attrition'])","7f439996":"df.drop(['EmployeeCount' , 'EmployeeNumber'] , axis = 1)","4119993a":"attrition_dummies = pd.get_dummies(df['Attrition'])\nattrition_dummies.head()","2e236701":"df = pd.concat([df, attrition_dummies] , axis = 1)\ndf.head()","e8a65f33":"df = df.drop(['Attrition' , 'No'] , axis = 1)\ndf.head()","f49827f1":"sns.barplot(x = 'Gender' , y = 'Yes', data = df)","be0a4a22":"sns.barplot(x = 'Department', y = 'Yes', data = df)","d66f2208":"sns.barplot(x = 'BusinessTravel', y = 'Yes', data = df)","23d9b7a5":"plt.figure(figsize = (10,6))\nsns.heatmap(df.corr())","4e304516":"df = df.drop(['Age' , 'JobLevel'], axis = 1)","d21850d1":"from sklearn.preprocessing import LabelEncoder\nfor column in df.columns:\n    if df[column].dtype==np.number:\n        continue\n    else:\n        df[column]=LabelEncoder().fit_transform(df[column])","21668424":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)","740594bc":"x  = df.drop(['Yes'], axis = 1)\ny = df['Yes']","dd0b39da":"x_train, x_test , y_train, y_test = train_test_split(x,y, test_size = 0.3, random_state = 0)","b5009412":"x_train.head()","2f8a62fe":"rf.fit(x_train, y_train)","05d3d34e":"rf.score(x_train, y_train)","f5b9ee9e":"pred = rf.predict(x_test)","18be9577":"from sklearn.metrics import accuracy_score","84bb294e":"accuracy_score(y_test, pred)","31159e32":"# **Accuracy for Tested Data = 85.26 %**","d5b0d7e3":"# **Data Preprocessing**\nConverting String columns into integers","9b05e68e":"# **Model Building**","d71021d6":"# **Predicting for x_test**","d214c87a":"# **Data Analysis and Visualisation**"}}