{"cell_type":{"1c725b3a":"code","63dec615":"code","93f6420a":"code","f6dbdf2c":"code","867d094f":"code","bf58a835":"code","3bf1a712":"code","94f3b5a1":"code","f131a873":"code","3b30a994":"code","5142f667":"code","dd0d1c1c":"code","dd208bff":"code","713f18e5":"code","5d83b125":"code","45a27093":"code","a09d88b6":"code","1a68386b":"code","a25cdf07":"code","0009461c":"code","8d48c5ed":"code","4932d582":"code","62a758ca":"code","5a9cba3e":"code","3c932426":"code","6f6cfd72":"code","8e5bbdca":"code","6dddeb6c":"code","ad21bed2":"code","a0a33048":"code","6db838fa":"markdown","5cab91e3":"markdown"},"source":{"1c725b3a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","63dec615":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n","93f6420a":"#indl\u00e6s datas\u00e6t\ndf = pd.read_csv('\/kaggle\/input\/demand-forecasting-kernels-only\/train.csv', index_col='date', parse_dates=True)","f6dbdf2c":"#kig p\u00e5 det\ndf.head()","867d094f":"sales_a = df[df.store == 2]","bf58a835":"sales_a = sales_a[sales_a.item == 1]","3bf1a712":"sales = sales_a['sales']","94f3b5a1":"sales","f131a873":"#plot data\nsales.plot(grid=True)","3b30a994":"\nfrom statsmodels.tsa.stattools import adfuller\n# Run Dicky-Fuller test\nresult = adfuller(sales)\n\n# Print test statistic\nprint(result[0])\n\n# Print p-value\nprint(result[1])","5142f667":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n# Create figure\nfig, (ax1, ax2) = plt.subplots(2,1, figsize=(12,8))\n \n# Plot the ACF of savings on ax1\nplot_acf(sales, zero=False, ax=ax1, lags=10)\n\n# Plot the PACF of savings on ax2\nplot_pacf(sales, zero=False, ax=ax2, lags=10)\n\nplt.show()","dd0d1c1c":"import warnings\nwarnings.simplefilter(action='ignore', category=Warning)","dd208bff":"# Create empty list to store search results\norder_aic_bic=[]\n\n# Loop over p values from 0-2\nfor p in range(3):\n  # Loop over q values from 0-2\n    for q in range(3):\n        try:\n            # create and fit ARMA(p,q) model\n            model = SARIMAX(sales, order=(p,0,q), seasonal_order=(1,1,0,7))\n            results = model.fit()\n            \n\n            # Append order and results tuple\n            order_aic_bic.append((p,q, results.aic, results.bic))\n            print(p,q,results.aic, results.bic)\n            \n        except:\n            print(p, q, None, None)","713f18e5":"from statsmodels.tsa.statespace.sarimax import SARIMAX\n# Create and fit model\nmodel = SARIMAX(sales, order=(2,0,1), trend='c')\nresults = model.fit()\n\n# Create the 4 diagostics plots\nresults.plot_diagnostics()\nplt.show()\n\n# Print summary\nprint(results.summary())","5d83b125":"# Import seasonal decompose\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\n# Perform additive decomposition\ndecomp = seasonal_decompose(sales, \n                            freq=7)\n\n# Plot decomposition\ndecomp.plot()\nplt.show()","45a27093":"# Take the first and seasonal differences and drop NaNs\nsales_diff = sales.diff().diff(7).dropna()","a09d88b6":"# Create the figure \nfig, (ax1, ax2) = plt.subplots(2,1,figsize=(8,6))\n\n# Plot the ACF on ax1\nplot_acf(sales_diff, zero=False, ax=ax1, lags=6)\n\n# Plot the PACF on ax2\nplot_pacf(sales_diff, zero=False, ax=ax2, lags=6)\n\nplt.show()","1a68386b":"# Make list of lags\nlags = [7, 14, 21, 28, 35]\n\n# Create the figure \nfig, (ax1, ax2) = plt.subplots(2,1,figsize=(8,6))\n\n# Plot the ACF on ax1\nplot_acf(sales_diff, ax=ax1, lags=lags, zero=False)\n\n# Plot the PACF on ax2\nplot_pacf(sales_diff, ax=ax2, lags=lags, zero=False)\n\nplt.show()","a25cdf07":"#!pip install pmdarima\n","0009461c":"import pmdarima as pm","8d48c5ed":"# Create auto_arima model\nmodel1 = pm.auto_arima(sales,\n                      seasonal=True, m=7,\n                      d=0, D=1, \n                 \t  max_p=2, max_q=2,\n                      trace=True,\n                      error_action='ignore',\n                      suppress_warnings=True)\n                       \n# Print model summary\nprint(model1.summary())","4932d582":"# Import model class\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\n\n# Create model object\nmodel = SARIMAX(sales, \n                order=(2,0,2), \n                seasonal_order=(2,1,1,7), \n                trend='c')\n# Fit model\nresults = model.fit()","62a758ca":"# Plot common diagnostics\nresults.plot_diagnostics()\nplt.show()","5a9cba3e":"# Create forecast object\nforecast_object = results.get_forecast(steps=90)\n\n# Extract prediction mean\nmean = forecast_object.predicted_mean\n\n# Extract the confidence intervals\nconf_int = forecast_object.conf_int()\n\n# Extract the forecast dates\ndates = mean.index","3c932426":"plt.figure()\n\n# Plot past CO2 levels\nplt.plot(sales.index, sales, label='past')\n\n# Plot the prediction means as line\nplt.plot(dates, mean, label='predicted')\n\n# Shade between the confidence intervals\nplt.fill_between(dates, conf_int.iloc[:,0], conf_int.iloc[:,1], alpha=0.2)\n\n# Plot legend and show figure\nplt.legend()\nplt.show()","6f6cfd72":"# Print last predicted mean\nprint(mean.iloc[-1])\n\n# Print last confidence interval\nprint(conf_int.iloc[-1])","8e5bbdca":"mean","6dddeb6c":"## Validating Forecast\npred = results.get_prediction(start=pd.to_datetime('2017-01-01'), dynamic=False)\npred_ci = pred.conf_int()\nax = sales['2014':].plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 7))\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.2)\nax.set_xlabel('Date')\nax.set_ylabel('Sales')\nplt.legend()","ad21bed2":"y_forecasted = pred.predicted_mean\ny_truth = sales['2017-01-01':]\nmse = ((y_forecasted - y_truth) ** 2).mean()\nprint('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))\n#The MSE is a measure of the quality of an estimator\u200a\u2014\u200ait is always non-negative, \n#and the smaller the MSE, the closer we are to finding the line of best fit.","a0a33048":"pred_uc = results.get_forecast(steps=100)\npred_ci = pred_uc.conf_int()\nax = sales.plot(label='observed', figsize=(14, 7))\npred_uc.predicted_mean.plot(ax=ax, label='Forecast')\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.25)\nax.set_xlabel('Date')\nax.set_ylabel('Sales')\nplt.legend()","6db838fa":"V\u00e6lg kun en enkelt butik","5cab91e3":"Tag kun salgstallene"}}