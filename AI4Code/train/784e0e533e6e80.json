{"cell_type":{"99953593":"code","cd1705b3":"code","8ee01307":"code","58fc354b":"code","a9870c6b":"code","0caf82f5":"code","0773dfb7":"code","1cab6e4d":"code","32910977":"code","7400c229":"code","cf4e38e1":"code","82e75465":"code","af563d68":"code","f844d77e":"code","86fec313":"code","90c0a739":"code","bf8ff65e":"code","834bba11":"code","9813bd51":"code","452f6b35":"code","2bb51909":"code","2fcc253e":"code","abd6b8fb":"code","8c0657d3":"code","40da4580":"code","8fe75b0e":"code","7a80dfcb":"code","a07fdfd0":"code","37609059":"code","891be369":"code","7f2a977a":"code","bcbf371d":"code","8536f7ab":"code","af253c18":"code","b03afc32":"code","7dc9856c":"code","cccf866b":"code","db646673":"code","23f13f6a":"code","1e794f18":"code","ef187b74":"code","7edab1c9":"code","9fde7d3f":"code","c5c9ac08":"code","b589da5b":"code","a5551026":"code","3bd5e0bd":"code","a1df43e9":"code","a7a10b39":"code","a3dc90dd":"code","8016737c":"code","ed675acc":"code","af435197":"code","f01795d3":"code","9192e2f4":"code","9ed3fac5":"code","ec8cb4b4":"code","24a59a6f":"code","511f8ca7":"code","7b6ac4b7":"code","721d2df7":"code","6e0b84b3":"code","b3158b73":"markdown","0c28c7f8":"markdown","01b1656c":"markdown","4e807bf2":"markdown","45a1b1f7":"markdown","1cc681bb":"markdown","2d0aeb77":"markdown","27c5a33a":"markdown","89d929a8":"markdown","1cdf06b5":"markdown","b9748f42":"markdown","857883a4":"markdown","da5f8da1":"markdown","828e8559":"markdown","d3f6a491":"markdown","f45a42eb":"markdown","0deab27b":"markdown","ee9c1804":"markdown","29cec3ca":"markdown","190bfcdc":"markdown","c9e009aa":"markdown"},"source":{"99953593":"import numpy as np\nimport pandas as pd\nimport os\nfrom scipy.misc import imread, imresize\nimport datetime\nimport os\nfrom zipfile import ZipFile\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom PIL import Image\n\n# Supress Warnings\nimport warnings\nwarnings.filterwarnings('ignore')","cd1705b3":"np.random.seed(30)\nimport random as rn\nrn.seed(30)\nfrom keras import backend as K\nimport tensorflow as tf\ntf.set_random_seed(30)","8ee01307":"#Load Data\n\ntrain_doc = np.random.permutation(open('Project_data\/train.csv').readlines())\nval_doc = np.random.permutation(open('Project_data\/val.csv').readlines())\n# batch_size = #experiment with the batch size","58fc354b":"directory = \"\/mnt\/disks\/user\/project\/PROJECT\/Project_data\/train\"\nchildDirectories = next(os.walk(directory))[1]\ndf_train = pd.DataFrame(childDirectories,columns =['Names'])\ndf_train = df_train[\"Names\"].str.split(\"_\", n = 6, expand = True)\ndf_train = df_train.drop(df_train.columns[[0, 1, 2, 3, 4, 5]], axis=1)\ndf_train[6].value_counts()","a9870c6b":"directory = \"\/mnt\/disks\/user\/project\/PROJECT\/Project_data\/val\"\nchildDirectories = next(os.walk(directory))[1]\ndf_val = pd.DataFrame(childDirectories,columns =['Names'])\ndf_val = df_val[\"Names\"].str.split(\"_\", n = 6, expand = True)\ndf_val = df_val.drop(df_val.columns[[0, 1, 2, 3, 4, 5]], axis=1)\ndf_val[6].value_counts()","0caf82f5":"plt.figure(figsize=(16,6))\nplt.subplot(1,2,1)\nimg = imread('Project_data\/train\/WIN_20180907_15_35_09_Pro_Right Swipe_new\/WIN_20180907_15_35_09_Pro_00012.png')\nplt.imshow(img)\n\nplt.subplot(1,2,2)\nimg1 = imresize(img,(120,120))\nplt.imshow(img1)","0773dfb7":"plt.figure(figsize=(16,6))\nplt.subplot(1,2,1)\nimg2 = imread('Project_data\/train\/WIN_20180926_18_07_05_Pro_Right_Swipe_new\/WIN_20180926_18_07_05_Pro_00009.png')\nplt.imshow(img2)\n\nplt.subplot(1,2,2)\nimg_2 = imresize(img2,(120,120))\nplt.imshow(img_2)","1cab6e4d":"batch_size = 10\nx = 30 # # x is the number of images\ny = 120 # width of the image\nz = 120 # height of the image\nclasses = 5 #5 gestures \nchannel = 3 #RGB","32910977":"def generator(source_path, folder_list, batch_size):\n    print( 'Source path = ', source_path, '; batch size =', batch_size)\n    img_idx = [x for x in range(0,x)] #create a list of image numbers you want to use for a particular video\n    while True:\n        t = np.random.permutation(folder_list)\n        num_batches = len(folder_list)\/\/batch_size # calculate the number of batches\n        for batch in range(num_batches): # we iterate over the number of batches\n            batch_data = np.zeros((batch_size,x,y,z,channel)) # x is the number of images you use for each video, (y,z) is the final size of the input images and 3 is the number of channels RGB\n            batch_labels = np.zeros((batch_size,classes)) # batch_labels is the one hot representation of the output\n            for folder in range(batch_size): # iterate over the batch_size\n                imgs = os.listdir(source_path+'\/'+ t[folder + (batch*batch_size)].split(';')[0]) # read all the images in the folder\n                for idx,item in enumerate(img_idx): #  Iterate iver the frames\/images of a folder to read them in\n                    image = imread(source_path+'\/'+ t[folder + (batch*batch_size)].strip().split(';')[0]+'\/'+imgs[item]).astype(np.float32)\n                    \n                    #crop the images and resize them. Note that the images are of 2 different shape \n                    #and the conv3D will throw error if the inputs in a batch have different shapes\n                    temp = imresize(image,(y,z))\n                    temp = temp\/127.5-1 #Normalize data\n                    \n                    batch_data[folder,idx,:,:,0] = (temp[:,:,0])#normalise and feed in the image\n                    batch_data[folder,idx,:,:,1] = (temp[:,:,1])#normalise and feed in the image\n                    batch_data[folder,idx,:,:,2] = (temp[:,:,2])#normalise and feed in the image\n                    \n                batch_labels[folder, int(t[folder + (batch*batch_size)].strip().split(';')[2])] = 1\n            yield batch_data, batch_labels #you yield the batch_data and the batch_labels, remember what does yield do\n\n        \n        # write the code for the remaining data points which are left after full batches\n\n        if (len(folder_list) != batch_size*num_batches):\n            print(\"Batch: \",num_batches+1,\"Index:\", batch_size)\n            batch_size = len(folder_list) - (batch_size*num_batches)\n            batch_data = np.zeros((batch_size,x,y,z,channel)) # x is the number of images you use for each video, (y,z) is the final size of the input images and 3 is the number of channels RGB\n            batch_labels = np.zeros((batch_size,classes)) # batch_labels is the one hot representation of the output\n            for folder in range(batch_size): # iterate over the batch_size\n                imgs = os.listdir(source_path+'\/'+ t[folder + (batch*batch_size)].split(';')[0]) # read all the images in the folder\n                for idx,item in enumerate(img_idx): #  Iterate iver the frames\/images of a folder to read them in\n                    image = imread(source_path+'\/'+ t[folder + (batch*batch_size)].strip().split(';')[0]+'\/'+imgs[item]).astype(np.float32)\n                    \n                    #crop the images and resize them. Note that the images are of 2 different shape \n                    #and the conv3D will throw error if the inputs in a batch have different shapes\n                    temp = imresize(image,(y,z))\n                    temp = temp\/127.5-1 #Normalize data\n                    \n                    batch_data[folder,idx,:,:,0] = (temp[:,:,0])\n                    batch_data[folder,idx,:,:,1] = (temp[:,:,1])\n                    batch_data[folder,idx,:,:,2] = (temp[:,:,2])\n                   \n                batch_labels[folder, int(t[folder + (batch*batch_size)].strip().split(';')[2])] = 1\n            yield batch_data, batch_labels","7400c229":"def plot(history):\n    fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15,4))\n    axes[0].plot(history.history['loss'])   \n    axes[0].plot(history.history['val_loss'])\n    axes[0].legend(['loss','val_loss'])\n    plt.ylabel('Loss')\n    plt.xlabel('Epoch')\n    \n\n\n    axes[1].plot(history.history['categorical_accuracy'])   \n    axes[1].plot(history.history['val_categorical_accuracy'])\n    axes[1].legend(['categorical_accuracy','val_categorical_accuracy'])\n    plt.ylabel('Accuracy')\n    plt.xlabel('Epoch')\n    \n    plt.show()","cf4e38e1":"curr_dt_time = datetime.datetime.now()\ntrain_path = 'Project_data\/train'\nval_path = 'Project_data\/val'\nnum_train_sequences = len(train_doc)\nprint('# training sequences =', num_train_sequences)\nnum_val_sequences = len(val_doc)\nprint('# validation sequences =', num_val_sequences)\nnum_epochs = 30 # choose the number of epochs\nprint ('# epochs =', num_epochs)","82e75465":"import keras\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, GRU, Flatten, TimeDistributed, Flatten, BatchNormalization, Activation\nfrom keras.layers.convolutional import Conv3D, MaxPooling3D\nfrom keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\nfrom keras import optimizers\nfrom keras.layers import Dropout\nfrom keras.losses import categorical_crossentropy\nfrom keras.optimizers import Adam\n\n#write your model here\n\n# Model 1\n# One input and output layer\n# 4 Convolutional and max pooling layers to obtain the most important\/informatic features\n# 2 Dense layers followed by dropout\n\nmodel_1 = Sequential()\n\nmodel_1.add(Conv3D(8,kernel_size=(3,3,3), input_shape=(x,y,z,channel), padding='same'))\nmodel_1.add(BatchNormalization())\nmodel_1.add(Activation('relu'))\nmodel_1.add(MaxPooling3D(pool_size=(2,2,2)))\n\n\nmodel_1.add(Conv3D(16,kernel_size=(3,3,3), padding='same'))\nmodel_1.add(BatchNormalization())\nmodel_1.add(Activation('relu'))\nmodel_1.add(MaxPooling3D(pool_size=(2,2,2)))\n\n\nmodel_1.add(Conv3D(32,kernel_size=(3,3,3), padding='same'))\nmodel_1.add(BatchNormalization())\nmodel_1.add(Activation('relu'))\nmodel_1.add(MaxPooling3D(pool_size=(2,2,2)))\n\n\nmodel_1.add(Conv3D(64,kernel_size=(3,3,3), padding='same'))\nmodel_1.add(BatchNormalization())\nmodel_1.add(Activation('relu'))\nmodel_1.add(MaxPooling3D(pool_size=(2,2,2)))\n\n\n#Flatten Layers\nmodel_1.add(Flatten())\nmodel_1.add(Dense(1000, activation='relu'))\nmodel_1.add(Dropout(0.5))\n\nmodel_1.add(Dense(500, activation='relu'))\nmodel_1.add(Dropout(0.5))\n\n#softmax layer\nmodel_1.add(Dense(5, activation='softmax'))","af563d68":"optimiser = optimizers.Adam(lr=0.0001) #write your optimizer\nmodel_1.compile(optimizer=optimiser, loss='categorical_crossentropy', metrics=['categorical_accuracy'])\nprint (model_1.summary())","f844d77e":"train_generator = generator(train_path, train_doc, batch_size)\nval_generator = generator(val_path, val_doc, batch_size)","86fec313":"model_name = 'model_init' + '_' + str(curr_dt_time).replace(' ','').replace(':','_') + '\/'\n    \nif not os.path.exists(model_name):\n    os.mkdir(model_name)\n        \nfilepath = model_name + 'model-{epoch:05d}-{loss:.5f}-{categorical_accuracy:.5f}-{val_loss:.5f}-{val_categorical_accuracy:.5f}.h5'\n\ncheckpoint = ModelCheckpoint(filepath, monitor='val_loss', verbose=1, save_best_only=False, save_weights_only=False, mode='auto', period=1)\n\nLR = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=2, cooldown=1, verbose=1) # write the REducelronplateau code here\ncallbacks_list = [checkpoint, LR]","90c0a739":"if (num_train_sequences%batch_size) == 0:\n    steps_per_epoch = int(num_train_sequences\/batch_size)\nelse:\n    steps_per_epoch = (num_train_sequences\/\/batch_size) + 1\n\nif (num_val_sequences%batch_size) == 0:\n    validation_steps = int(num_val_sequences\/batch_size)\nelse:\n    validation_steps = (num_val_sequences\/\/batch_size) + 1","bf8ff65e":"history1 = model_1.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                    callbacks=callbacks_list, validation_data=val_generator, \n                    validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","834bba11":"plot(history1)","9813bd51":"batch_size = 10\nnum_epochs = 50\n\ntrain_generator = generator(train_path, train_doc, batch_size)\nval_generator = generator(val_path, val_doc, batch_size)\n\noptimiser = optimizers.Adam(lr=0.0001) #write your optimizer\nmodel_1.compile(optimizer=optimiser, loss='categorical_crossentropy', metrics=['categorical_accuracy'])\nprint(model_1.summary())","452f6b35":"history1_1 = model_1.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                    callbacks=callbacks_list, validation_data=val_generator, \n                    validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","2bb51909":"plot(history1_1)","2fcc253e":"batch_size = 30\nnum_epochs = 50\n\ntrain_generator = generator(train_path, train_doc, batch_size)\nval_generator = generator(val_path, val_doc, batch_size)\n\noptimiser = optimizers.Adam(lr=0.0001) #write your optimizer\nmodel_1.compile(optimizer=optimiser, loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n\nhistory1_2 = model_1.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                    callbacks=callbacks_list, validation_data=val_generator, \n                    validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","abd6b8fb":"plot(history1_2)","8c0657d3":"batch_size = 50\nnum_epochs = 15\n\ntrain_generator = generator(train_path, train_doc, batch_size)\nval_generator = generator(val_path, val_doc, batch_size)\n\noptimiser = optimizers.Adam(lr=0.0001) #write your optimizer\nmodel_1.compile(optimizer=optimiser, loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n\nhistory1_3 = model_1.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                    callbacks=callbacks_list, validation_data=val_generator, \n                    validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","40da4580":"plot(history1_3)","8fe75b0e":"from keras import regularizers\n# Model 2\n# One input and output layer\n# 4 Convolutional and max pooling layers to obtain the most important\/informatic features\n# 2 Dense layers followed by dropout\n# Dropout after each covolutional layer and \n\nbatch_size = 20\nnum_epochs = 15\nx = 30 # # x is the number of images\ny = 120 # width of the image\nz = 120 # height of the image\nclasses = 5 #5 gestures \nchannel = 3 #RGB\n\nmodel_2 = Sequential()\n\nmodel_2.add(Conv3D(8,kernel_size=(3,3,3), input_shape=(x,y,z,channel), padding='same'))\nmodel_2.add(Activation('relu'))\nmodel_2.add(BatchNormalization())\nmodel_2.add(MaxPooling3D(pool_size=(2,2,2)))\nmodel_2.add(Dropout(0.25))\n\nmodel_2.add(Conv3D(16,kernel_size=(3,3,3), padding='same'))\nmodel_2.add(Activation('relu'))\nmodel_2.add(BatchNormalization())\nmodel_2.add(MaxPooling3D(pool_size=(2,2,2)))\nmodel_2.add(Dropout(0.25))\n\nmodel_2.add(Conv3D(32,kernel_size=(3,3,3), padding='same'))\nmodel_2.add(Activation('relu'))\nmodel_2.add(BatchNormalization())\nmodel_2.add(MaxPooling3D(pool_size=(2,2,2)))\nmodel_2.add(Dropout(0.25))\n\nmodel_2.add(Conv3D(64,kernel_size=(3,3,3), padding='same'))\nmodel_2.add(Activation('relu'))\nmodel_2.add(BatchNormalization())\nmodel_2.add(MaxPooling3D(pool_size=(2,2,2)))\nmodel_2.add(Dropout(0.25))\n\n#Flatten Layers\nmodel_2.add(Flatten())\nmodel_2.add(Dense(1000, activation='relu'))\nmodel_2.add(Dropout(0.5))\n\nmodel_2.add(Dense(500, activation='relu'))\nmodel_2.add(Dropout(0.5))\n\n#softmax layer\nmodel_2.add(Dense(5, activation='softmax'))","7a80dfcb":"train_generator2 = generator(train_path, train_doc, batch_size)\nval_generator2 = generator(val_path, val_doc, batch_size)\n\noptimiser = optimizers.Adam(lr=0.0001) #write your optimizer\nmodel_2.compile(optimizer=optimiser, loss='categorical_crossentropy', metrics=['categorical_accuracy'])\nprint(model_2.summary())","a07fdfd0":"history2 = model_2.fit_generator(train_generator2, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                    callbacks=callbacks_list, validation_data=val_generator2, \n                    validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","37609059":"plot(history2)","891be369":"def generator_1(source_path, folder_list, batch_size):\n    print( 'Source path = ', source_path, '; batch size =', batch_size)\n    img_idx = [x for x in range(0,x)] #create a list of image numbers you want to use for a particular video\n    while True:\n        t = np.random.permutation(folder_list)\n        num_batches = len(folder_list)\/\/batch_size # calculate the number of batches\n        for batch in range(num_batches): # we iterate over the number of batches\n            batch_data = np.zeros((batch_size,x,y,z,channel)) # x is the number of images you use for each video, (y,z) is the final size of the input images and 3 is the number of channels RGB\n            batch_labels = np.zeros((batch_size,classes)) # batch_labels is the one hot representation of the output\n            for folder in range(batch_size): # iterate over the batch_size\n                imgs = os.listdir(source_path+'\/'+ t[folder + (batch*batch_size)].split(';')[0]) # read all the images in the folder\n                for idx,item in enumerate(img_idx): #  Iterate iver the frames\/images of a folder to read them in\n                    image = imread(source_path+'\/'+ t[folder + (batch*batch_size)].strip().split(';')[0]+'\/'+imgs[item]).astype(np.float32)\n                    \n                    #crop the images and resize them. Note that the images are of 2 different shape \n                    #and the conv3D will throw error if the inputs in a batch have different shapes\n                    temp = imresize(image,(y,z))\n                    \n                    batch_data[folder,idx,:,:,0] = (temp[:,:,0])\/255 #normalise and feed in the image\n                    batch_data[folder,idx,:,:,1] = (temp[:,:,1])\/255 #normalise and feed in the image\n                    batch_data[folder,idx,:,:,2] = (temp[:,:,2])\/255 #normalise and feed in the image\n                    \n                batch_labels[folder, int(t[folder + (batch*batch_size)].strip().split(';')[2])] = 1\n            yield batch_data, batch_labels #you yield the batch_data and the batch_labels, remember what does yield do\n\n        \n        # write the code for the remaining data points which are left after full batches\n\n        if (len(folder_list) != batch_size*num_batches):\n            print(\"Batch: \",num_batches+1,\"Index:\", batch_size)\n            batch_size = len(folder_list) - (batch_size*num_batches)\n            batch_data = np.zeros((batch_size,x,y,z,channel)) # x is the number of images you use for each video, (y,z) is the final size of the input images and 3 is the number of channels RGB\n            batch_labels = np.zeros((batch_size,classes)) # batch_labels is the one hot representation of the output\n            for folder in range(batch_size): # iterate over the batch_size\n                imgs = os.listdir(source_path+'\/'+ t[folder + (batch*batch_size)].split(';')[0]) # read all the images in the folder\n                for idx,item in enumerate(img_idx): #  Iterate iver the frames\/images of a folder to read them in\n                    image = imread(source_path+'\/'+ t[folder + (batch*batch_size)].strip().split(';')[0]+'\/'+imgs[item]).astype(np.float32)\n                    \n                    #crop the images and resize them. Note that the images are of 2 different shape \n                    #and the conv3D will throw error if the inputs in a batch have different shapes\n                    temp = imresize(image,(y,z))\n                    \n                    batch_data[folder,idx,:,:,0] = (temp[:,:,0])\/255\n                    batch_data[folder,idx,:,:,1] = (temp[:,:,1])\/255\n                    batch_data[folder,idx,:,:,2] = (temp[:,:,2])\/255\n                   \n                batch_labels[folder, int(t[folder + (batch*batch_size)].strip().split(';')[2])] = 1\n            yield batch_data, batch_labels","7f2a977a":"from keras import regularizers\n# Model 3\n# One input and output layer\n# 4 Convolutional and max pooling layers to obtain the most important\/informatic features\n# 2 Dense layers followed by dropout\n# Dropout after each covolutional layer and \n# Filter size (2x2x2)\n\nbatch_size = 30\nnum_epochs = 30\n\nmodel_3 = Sequential()\n\nmodel_3.add(Conv3D(16,kernel_size=(2,2,2), input_shape=(x,y,z,channel), padding='same'))\nmodel_3.add(Activation('relu'))\nmodel_3.add(BatchNormalization())\nmodel_3.add(MaxPooling3D(pool_size=(2,2,2)))\n\nmodel_3.add(Conv3D(32,kernel_size=(2,2,2), padding='same'))\nmodel_3.add(Activation('relu'))\nmodel_3.add(BatchNormalization())\nmodel_3.add(MaxPooling3D(pool_size=(2,2,2)))\n\n\nmodel_3.add(Conv3D(64,kernel_size=(2,2,2), padding='same'))\nmodel_3.add(Activation('relu'))\nmodel_3.add(BatchNormalization())\nmodel_3.add(MaxPooling3D(pool_size=(2,2,2)))\n\n\nmodel_3.add(Conv3D(128,kernel_size=(2,2,2), padding='same'))\nmodel_3.add(Activation('relu'))\nmodel_3.add(BatchNormalization())\nmodel_3.add(MaxPooling3D(pool_size=(2,2,2)))\n\n\n#Flatten Layers\nmodel_3.add(Flatten())\nmodel_3.add(Dense(64, activation='relu'))\nmodel_3.add(Dropout(0.5))\n\nmodel_3.add(Dense(64, activation='relu'))\nmodel_3.add(Dropout(0.5))\n\n#softmax layer\nmodel_3.add(Dense(5, activation='softmax'))\n","bcbf371d":"train_generator3 = generator_1(train_path, train_doc, batch_size)\nval_generator3 = generator_1(val_path, val_doc, batch_size)\n\noptimiser = optimizers.Adam(lr=0.0002) #write your optimizer\nmodel_3.compile(optimizer=optimiser, loss='categorical_crossentropy', metrics=['categorical_accuracy'])\nprint(model_3.summary())","8536f7ab":"history3 = model_3.fit_generator(train_generator3, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                    callbacks=callbacks_list, validation_data=val_generator3, \n                    validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","af253c18":"plot(history3)","b03afc32":"batch_size = 30\nnum_epochs = 35\nx = 30 # # x is the number of images\ny = 160 # width of the image\nz = 160 # height of the image\nclasses = 5 #5 gestures \nchannel = 3 #RGB","7dc9856c":"def generator_2(source_path, folder_list, batch_size):\n    print( 'Source path = ', source_path, '; batch size =', batch_size)\n    img_idx = [x for x in range(0,x)] #create a list of image numbers you want to use for a particular video\n    while True:\n        t = np.random.permutation(folder_list)\n        num_batches = len(folder_list)\/\/batch_size # calculate the number of batches\n        for batch in range(num_batches): # we iterate over the number of batches\n            batch_data = np.zeros((batch_size,x,y,z,channel)) # x is the number of images you use for each video, (y,z) is the final size of the input images and 3 is the number of channels RGB\n            batch_labels = np.zeros((batch_size,classes)) # batch_labels is the one hot representation of the output\n            for folder in range(batch_size): # iterate over the batch_size\n                imgs = os.listdir(source_path+'\/'+ t[folder + (batch*batch_size)].split(';')[0]) # read all the images in the folder\n                for idx,item in enumerate(img_idx): #  Iterate iver the frames\/images of a folder to read them in\n                    image = imread(source_path+'\/'+ t[folder + (batch*batch_size)].strip().split(';')[0]+'\/'+imgs[item]).astype(np.float32)\n                    \n                    #crop the images and resize them. Note that the images are of 2 different shape \n                    #and the conv3D will throw error if the inputs in a batch have different shapes\n                    temp = imresize(image,(y,z))\n                    temp = temp\/127.5-1 #Normalize data\n                    \n                    batch_data[folder,idx,:,:,0] = (temp[:,:,0]) #normalise and feed in the image\n                    batch_data[folder,idx,:,:,1] = (temp[:,:,1]) #normalise and feed in the image\n                    batch_data[folder,idx,:,:,2] = (temp[:,:,2]) #normalise and feed in the image\n                    \n                batch_labels[folder, int(t[folder + (batch*batch_size)].strip().split(';')[2])] = 1\n            yield batch_data, batch_labels #you yield the batch_data and the batch_labels, remember what does yield do\n\n        \n        # write the code for the remaining data points which are left after full batches\n\n        if (len(folder_list) != batch_size*num_batches):\n            print(\"Batch: \",num_batches+1,\"Index:\", batch_size)\n            batch_size = len(folder_list) - (batch_size*num_batches)\n            batch_data = np.zeros((batch_size,x,y,z,channel)) # x is the number of images you use for each video, (y,z) is the final size of the input images and 3 is the number of channels RGB\n            batch_labels = np.zeros((batch_size,classes)) # batch_labels is the one hot representation of the output\n            for folder in range(batch_size): # iterate over the batch_size\n                imgs = os.listdir(source_path+'\/'+ t[folder + (batch*batch_size)].split(';')[0]) # read all the images in the folder\n                for idx,item in enumerate(img_idx): #  Iterate iver the frames\/images of a folder to read them in\n                    image = imread(source_path+'\/'+ t[folder + (batch*batch_size)].strip().split(';')[0]+'\/'+imgs[item]).astype(np.float32)\n                    \n                    #crop the images and resize them. Note that the images are of 2 different shape \n                    #and the conv3D will throw error if the inputs in a batch have different shapes\n                    temp = imresize(image,(y,z))\n                    temp = temp\/127.5-1 #Normalize data\n                    \n                    batch_data[folder,idx,:,:,0] = (temp[:,:,0])\n                    batch_data[folder,idx,:,:,1] = (temp[:,:,1])\n                    batch_data[folder,idx,:,:,2] = (temp[:,:,2])\n                   \n                batch_labels[folder, int(t[folder + (batch*batch_size)].strip().split(';')[2])] = 1\n            yield batch_data, batch_labels","cccf866b":"# Model 4\n\n\nmodel_4 = Sequential()\n\nmodel_4.add(Conv3D(16,kernel_size=(3,3,3), input_shape=(x,y,z,channel), padding='same'))\nmodel_4.add(Activation('relu'))\nmodel_4.add(BatchNormalization())\nmodel_4.add(MaxPooling3D(pool_size=(2,2,2)))\n\nmodel_4.add(Conv3D(32,kernel_size=(3,3,3), padding='same'))\nmodel_4.add(Activation('relu'))\nmodel_4.add(BatchNormalization())\nmodel_4.add(MaxPooling3D(pool_size=(2,2,2)))\n\n\nmodel_4.add(Conv3D(64,kernel_size=(3,3,3), padding='same'))\nmodel_4.add(Activation('relu'))\nmodel_4.add(BatchNormalization())\nmodel_4.add(MaxPooling3D(pool_size=(2,2,2)))\n\n\nmodel_4.add(Conv3D(128,kernel_size=(3,3,3), padding='same'))\nmodel_4.add(Activation('relu'))\nmodel_4.add(BatchNormalization())\nmodel_4.add(MaxPooling3D(pool_size=(2,2,2)))\n\n\n#Flatten Layers\nmodel_4.add(Flatten())\nmodel_4.add(Dense(64, activation='relu'))\nmodel_4.add(Dropout(0.5))\n\nmodel_4.add(Dense(64, activation='relu'))\nmodel_4.add(Dropout(0.5))\n\n#softmax layer\nmodel_4.add(Dense(5, activation='softmax'))\n","db646673":"train_generator4 = generator_2(train_path, train_doc, batch_size)\nval_generator4 = generator_2(val_path, val_doc, batch_size)\n\noptimiser = optimizers.Adam(lr=0.0002) #write your optimizer\nmodel_4.compile(optimizer=optimiser, loss='categorical_crossentropy', metrics=['categorical_accuracy'])\nprint(model_4.summary())","23f13f6a":"history4 = model_4.fit_generator(train_generator4, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                    callbacks=callbacks_list, validation_data=val_generator4, \n                    validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","1e794f18":"plot(history4)","ef187b74":"batch_size = 30\nnum_epochs = 15\nx = 30 # # x is the number of images\ny = 120 # width of the image\nz = 120 # height of the image\nclasses = 5 #5 gestures \nchannel = 3 #RGB","7edab1c9":"from keras.layers.convolutional import Conv2D, MaxPooling2D\nfrom keras.layers.recurrent import LSTM\n\nmodel_5 = Sequential()\nmodel_5.add(TimeDistributed(Conv2D(16, (3,3), padding='same', activation='relu'),input_shape=(x,y,z,channel)))\nmodel_5.add(TimeDistributed(BatchNormalization()))\nmodel_5.add(TimeDistributed(MaxPooling2D((2,2))))\n\nmodel_5.add(TimeDistributed(Conv2D(32, (3, 3), padding='same', activation='relu')))\nmodel_5.add(TimeDistributed(BatchNormalization()))\nmodel_5.add(TimeDistributed(MaxPooling2D((2, 2))))\n\nmodel_5.add(TimeDistributed(Conv2D(64, (3, 3),padding='same', activation='relu')))\nmodel_5.add(TimeDistributed(BatchNormalization()))\nmodel_5.add(TimeDistributed(MaxPooling2D((2, 2))))\n\nmodel_5.add(TimeDistributed(Conv2D(128, (3, 3), padding='same',\tactivation='relu')))\nmodel_5.add(TimeDistributed(BatchNormalization()))\nmodel_5.add(TimeDistributed(MaxPooling2D((2, 2))))\n\nmodel_5.add(TimeDistributed(Conv2D(256, (3, 3), padding='same',\tactivation='relu')))\nmodel_5.add(TimeDistributed(BatchNormalization()))\nmodel_5.add(TimeDistributed(MaxPooling2D((2, 2))))\n\nmodel_5.add(TimeDistributed(Flatten()))\nmodel_5.add(LSTM(1024))\n\nmodel_5.add(Dense(512,activation='relu'))\nmodel_5.add(Dropout(0.25))\n\nmodel_5.add(Dense(5, activation='softmax'))\nmodel_5.add(Dropout(0.25))\n","9fde7d3f":"train_generator5 = generator(train_path, train_doc, batch_size)\nval_generator5 = generator(val_path, val_doc, batch_size)\n\noptimiser = optimizers.Adam(lr=0.0002) #write your optimizer\nmodel_5.compile(optimizer=optimiser, loss='categorical_crossentropy', metrics=['categorical_accuracy'])\nprint(model_5.summary())","c5c9ac08":"history5 = model_5.fit_generator(train_generator5, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                    callbacks=callbacks_list, validation_data=val_generator5, \n                    validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","b589da5b":"plot(history5)","a5551026":"batch_size = 10\nnum_epochs = 20\n\noptimiser = optimizers.Adam(lr=0.0001) #write your optimizer\nmodel_5.compile(optimizer=optimiser, loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n\nhistory5_1 = model_5.fit_generator(train_generator5, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                    callbacks=callbacks_list, validation_data=val_generator5, \n                    validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","3bd5e0bd":"plot(history5_1)","a1df43e9":"batch_size = 10\nnum_epochs = 20\nx = 30 # # x is the number of images\ny = 120 # width of the image\nz = 120 # height of the image\nclasses = 5 #5 gestures \nchannel = 3 #RGB","a7a10b39":"from keras.applications import mobilenet\npretrained_mobilenet = mobilenet.MobileNet(weights='imagenet', include_top=False)\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\nfrom keras.layers.recurrent import LSTM","a3dc90dd":"model_6 = Sequential()\nmodel_6.add(TimeDistributed(pretrained_mobilenet,input_shape=(x,y,z,channel)))\n\nmodel_6.add(TimeDistributed(BatchNormalization()))\nmodel_6.add(TimeDistributed(MaxPooling2D((2, 2))))\nmodel_6.add(TimeDistributed(Flatten()))\n\nmodel_6.add(GRU(128))\nmodel_6.add(Dropout(0.25))\n\nmodel_6.add(Dense(128,activation='relu'))\nmodel_6.add(Dropout(0.25))\n\nmodel_6.add(Dense(5, activation='softmax'))","8016737c":"train_generator6 = generator(train_path, train_doc, batch_size)\nval_generator6 = generator(val_path, val_doc, batch_size)\n\noptimiser = optimizers.Adam(lr=0.0001) #write your optimizer\nmodel_6.compile(optimizer=optimiser, loss='categorical_crossentropy', metrics=['categorical_accuracy'])\nprint(model_6.summary())","ed675acc":"history6 = model_6.fit_generator(train_generator6, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                    callbacks=callbacks_list, validation_data=val_generator6, \n                    validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","af435197":"plot(history6)","f01795d3":"batch_size = 10\nnum_epochs = 25\nx = 30 # # x is the number of images\ny = 120 # width of the image\nz = 120 # height of the image\nclasses = 5 #5 gestures \nchannel = 3 #RGB\n\n\nmodel_61 = Sequential()\nmodel_61.add(TimeDistributed(pretrained_mobilenet,input_shape=(x,y,z,channel)))\n\nmodel_61.add(TimeDistributed(BatchNormalization()))\nmodel_61.add(TimeDistributed(MaxPooling2D((2, 2))))\nmodel_61.add(TimeDistributed(Flatten()))\n\nmodel_61.add(GRU(256))\nmodel_61.add(Dropout(0.3))\n\nmodel_61.add(Dense(256,activation='relu'))\nmodel_61.add(Dropout(0.3))\n\nmodel_61.add(Dense(5, activation='softmax'))","9192e2f4":"train_generator61 = generator(train_path, train_doc, batch_size)\nval_generator61 = generator(val_path, val_doc, batch_size)\n\noptimiser = optimizers.Adam(lr=0.0001) #write your optimizer\nmodel_61.compile(optimizer=optimiser, loss='categorical_crossentropy', metrics=['categorical_accuracy'])\nprint(model_61.summary())","9ed3fac5":"history61 = model_61.fit_generator(train_generator6, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                    callbacks=callbacks_list, validation_data=val_generator6, \n                    validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","ec8cb4b4":"plot(history61)","24a59a6f":"batch_size = 10\nnum_epochs = 20\nx = 30 # # x is the number of images\ny = 120 # width of the image\nz = 120 # height of the image\nclasses = 5 #5 gestures \nchannel = 3 #RGB","511f8ca7":"from keras.layers.convolutional import Conv2D, MaxPooling2D\nfrom keras.layers.recurrent import LSTM\n\nmodel_7 = Sequential()\nmodel_7.add(TimeDistributed(Conv2D(16, (3,3), padding='same', activation='relu'),input_shape=(x,y,z,channel)))\nmodel_7.add(TimeDistributed(BatchNormalization()))\nmodel_7.add(TimeDistributed(MaxPooling2D((2, 2))))\n\nmodel_7.add(TimeDistributed(Conv2D(32, (3, 3), padding='same', activation='relu')))\nmodel_7.add(TimeDistributed(BatchNormalization()))\nmodel_7.add(TimeDistributed(MaxPooling2D((2, 2))))\n\nmodel_7.add(TimeDistributed(Conv2D(64, (3, 3),padding='same', activation='relu')))\nmodel_7.add(TimeDistributed(BatchNormalization()))\nmodel_7.add(TimeDistributed(MaxPooling2D((2, 2))))\n\nmodel_7.add(TimeDistributed(Conv2D(128, (3, 3), padding='same',activation='relu')))\nmodel_7.add(TimeDistributed(BatchNormalization()))\nmodel_7.add(TimeDistributed(MaxPooling2D((2, 2))))\n\nmodel_7.add(TimeDistributed(Flatten()))\nmodel_7.add(LSTM(1024))\n\nmodel_7.add(Dense(512,activation='relu'))\nmodel_7.add(Dropout(0.25))\n\nmodel_7.add(Dense(5, activation='softmax'))\nmodel_7.add(Dropout(0.25))\n","7b6ac4b7":"train_generator7 = generator(train_path, train_doc, batch_size)\nval_generator7 = generator(val_path, val_doc, batch_size)\n\noptimiser = optimizers.Adam(lr=0.0001) #write your optimizer\nmodel_7.compile(optimizer=optimiser, loss='categorical_crossentropy', metrics=['categorical_accuracy'])\nprint(model_7.summary())","721d2df7":"history7 = model_7.fit_generator(train_generator5, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                    callbacks=callbacks_list, validation_data=val_generator5, \n                    validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","6e0b84b3":"plot(history7)","b3158b73":"### Model 1.3 - Layers=4, BS = 50, Epoch = 25","0c28c7f8":"### Model 4 - Layers=4, BS = 30, Epoch = 30, filter 3x3, image size = 160x160","01b1656c":"Now that you have written the model, the next step is to `compile` the model. When you print the `summary` of the model, you'll see the total number of parameters you have to train.","4e807bf2":"### Model 1.1 - Layers=4, BS = 10, Epoch = 50","45a1b1f7":"### Model 7: CNN2D + GRU","1cc681bb":"Note here that a video is represented above in the generator as (number of images, height, width, number of channels). Take this into consideration while creating the model architecture.","2d0aeb77":"### Model 5 CNN+LSTM","27c5a33a":"## Generator\nThis is one of the most important part of the code. The overall structure of the generator has been given. In the generator, you are going to preprocess the images as you have images of 2 different dimensions as well as create a batch of video frames. You have to experiment with `img_idx`, `y`,`z` and normalization such that you get high accuracy.\n\n## Image Normalization Reference:\nhttps:\/\/datascience.stackexchange.com\/questions\/26881\/data-preprocessing-should-we-normalise-images-pixel-wise","89d929a8":"The `steps_per_epoch` and `validation_steps` are used by `fit_generator` to decide the number of next() calls it need to make.","1cdf06b5":"### Model 1.2 - Layers=4, BS = 30, Epoch = 25","b9748f42":"We set the random seed so that the results don't vary drastically.","857883a4":"In this block, you read the folder names for training and validation. You also set the `batch_size` here. Note that you set the batch size in such a way that you are able to use the GPU in full capacity. You keep increasing the batch size until the machine throws an error.","da5f8da1":"### Model 1 - Layers=4, BS = 10, Epoch = 10","828e8559":"Let us create the `train_generator` and the `val_generator` which will be used in `.fit_generator`.","d3f6a491":"Let us now fit the model. This will start training the model and with the help of the checkpoints, you'll be able to save the model at the end of each epoch.","f45a42eb":"# Gesture Recognition\nIn this project\/notebook, you are going to build a 3D Conv model that will be able to predict the 5 gestures correctly. Please import the following libraries to get started.","0deab27b":"### Model 5_1 BS=10","ee9c1804":"## Model\nHere you make the model using different functionalities that Keras provides. Remember to use `Conv3D` and `MaxPooling3D` and not `Conv2D` and `Maxpooling2D` for a 3D convolution model. You would want to use `TimeDistributed` while building a Conv2D + RNN model. Also remember that the last layer is the softmax. Design the network in such a way that the model is able to give good accuracy on the least number of parameters so that it can fit in the memory of the webcam.","29cec3ca":"### Model 6 Transfer Learning","190bfcdc":"### Model 2 - Layers=4, BS = 20, Epoch = 15, Dropout","c9e009aa":"### Model 3 - Layers=4, BS = 30, Epoch = 30, filter 2x2"}}