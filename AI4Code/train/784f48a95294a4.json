{"cell_type":{"03715e06":"code","cd95b799":"code","2e1881f9":"code","29b25a37":"code","3abf11c3":"code","49cd7247":"code","43e0521c":"code","05b8c805":"code","22fe9b25":"code","6bfd2dc5":"code","612d1ffd":"code","7216e873":"code","fa00b54f":"markdown"},"source":{"03715e06":"import gc\nimport os\n\nimport numpy as np\nimport pandas as pd\nimport pytorch_lightning as pl\nimport torch\nfrom tqdm.auto import tqdm\n\nfrom shopee_datasets import ShopeeDataModule\nfrom shopee_models import ShopeeNet\nfrom shopee_utils import seed_everything","cd95b799":"for path, dir, files in os.walk(\"..\/input\/train-notebook\/checkpoints\/\"):\n    ckpt_path = os.path.join(path, files[0])","2e1881f9":"debug = False  # debug mode requires Internet connection","29b25a37":"PATH_TO_CKPT = ckpt_path\nTOKENIZER_PATH = \"..\/input\/train-notebook\/tokenizer\/\"\nTRANSFORMER_PATH = \"..\/input\/train-notebook\/transformer\/\"\nCSV_TEST = \"..\/input\/shopee-product-matching\/test.csv\"\nCSV_SUBMISSION = \"..\/input\/shopee-product-matching\/sample_submission.csv\"\nIMAGES_TEST = \"..\/input\/shopee-product-matching\/test_images\"\nN_SPLITS = 5\nNUM_WORKERS = 4\nTEST_BATCH_SIZE = 32\nSEED = 23\nTOKENIZER_MAX_LEN = 10\nN_BATCH = 10\nSIM_THRESH = 0.65\n\nif debug:\n    CSV_TEST = \"..\/input\/shopee-product-matching\/train.csv\"\n    TOKENIZER_PATH = \".\/\"","3abf11c3":"seed_everything(SEED)","49cd7247":"dm = ShopeeDataModule(\n        path_to_csv = CSV_TEST,\n        path_to_images = IMAGES_TEST,\n        n_splits = N_SPLITS,\n        random_state = SEED,\n        batch_size = TEST_BATCH_SIZE,\n        tokenizer_max_len = TOKENIZER_MAX_LEN,\n        num_workers = NUM_WORKERS,\n        tokenizer_path = TOKENIZER_PATH,\n)\n\nif debug:\n    dm.setup(\"train\")\nelse:\n    dm.setup(\"test\")","43e0521c":"model = ShopeeNet.load_from_checkpoint(\n    PATH_TO_CKPT, \n    transformer_path=TRANSFORMER_PATH, \n    test_mode=not debug,\n)","05b8c805":"if debug:\n    dataloader = dm.val_dataloader()\nelse:\n    dataloader = dm.test_dataloader()\n\ntrainer = pl.Trainer(\n    gpus=1 if torch.cuda.is_available() else None,\n)\n\nprediction_list = []\n\nwith torch.no_grad():\n    for i, batch in enumerate(tqdm(dataloader)):\n        if debug:\n            a, b, _ = batch\n            output = model(a, b)\n        else:\n            output = model.predict(batch, i)\n        prediction_list.append(output.detach().cpu())\n    \nfeats = torch.cat(prediction_list).cpu().numpy()","22fe9b25":"del model\ngc.collect()\nif torch.cuda.is_available():\n    torch.cuda.empty_cache() \n\nif debug:\n    test = dm.data.iloc[:len(feats), :]\nelse:\n    test = dm.data\ndel dm\ngc.collect()","6bfd2dc5":"def combine_for_sub(row):\n    x = np.concatenate([row[\"preds_phash\"], row[\"preds_bert\"]])\n    return \" \".join(np.unique(x))","612d1ffd":"tmp = test.groupby(\"image_phash\").posting_id.agg(\"unique\").to_dict()\ntest[\"preds_phash\"] = test.image_phash.map(tmp)","7216e873":"n, _ = feats.shape\nbs = n \/\/ 10\n\nif n != 3:\n    if torch.cuda.is_available():\n        feats = torch.tensor(feats).cuda()\n    else:\n        feats = torch.tensor(feats)\n    \n    batches = []\n    for i in range(N_BATCH):\n        left = bs * i\n        right = bs * (i + 1)\n        if i == N_BATCH - 1:\n            right = n\n        batches.append(feats[left:right, :])\n\n    matches = []\n    for batch in tqdm(batches):\n        if torch.cuda.is_available():\n            batch = batch.cuda()\n        selection = ((batch @ feats.T) > SIM_THRESH).cpu().numpy()\n        for row in selection:\n            matches.append(test.iloc[row][\"posting_id\"].tolist())\n    \n    test[\"preds_bert\"] = matches\n    test[\"matches\"] = test.apply(combine_for_sub, axis=1)\n    \n    submission = pd.read_csv(CSV_SUBMISSION)\n    submission[\"matches\"] = test[\"matches\"]\n    submission.to_csv(\"submission.csv\", index=False)\n\n# don't do anything during commit\nelse:\n    submission = pd.read_csv(CSV_SUBMISSION)\n    submission.to_csv(\"submission.csv\", index=False)","fa00b54f":"# Summary\nThis notebook demonstrates the use of **Pytorch Lightning** with most utility functions moved to the utility scripts to keep the notebook clean.\n\nMost of the code is based on and inspired by the following notebooks:\n* https:\/\/www.kaggle.com\/tanulsingh077\/metric-learning-pipeline-only-text-sbert\n* https:\/\/www.kaggle.com\/underwearfitting\/pytorch-densenet-arcface-validation-training\/notebook\n\n**Training notebook**:<br>\nhttps:\/\/www.kaggle.com\/kcostya\/ride-the-lightning-training\/"}}