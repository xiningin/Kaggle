{"cell_type":{"19e42b61":"code","f56f1934":"code","bd4c3bbb":"code","93d67352":"code","72081cce":"code","5e2b46bd":"code","40e0cafc":"code","dfbf1caf":"code","851b4993":"code","61e54a23":"code","88b1446e":"code","b00aeff2":"code","8133db78":"code","4d5e326b":"markdown","88772e03":"markdown","21045862":"markdown","accb035c":"markdown","bc148bc6":"markdown","94627ca3":"markdown","87dbcce0":"markdown","5431587c":"markdown","f09c986b":"markdown","1d52740c":"markdown","bc62f46a":"markdown","01e00369":"markdown","aea9fb85":"markdown","1650b525":"markdown","233d3a4a":"markdown","a8b55997":"markdown","08deac56":"markdown","1a713ba7":"markdown","ca198220":"markdown","cff5cf01":"markdown","900fea84":"markdown","a7f0242f":"markdown","1d281b8b":"markdown","e66a99a6":"markdown","6b9d29fc":"markdown","7e40fb28":"markdown","01f4810d":"markdown","a5d557ee":"markdown"},"source":{"19e42b61":"#Importing the basic librarires\n\nimport math\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom datetime import datetime as dt\nfrom IPython.display import display\n\nfrom statsmodels.tsa.stattools import adfuller, acf, pacf\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom pandas.tseries.offsets import DateOffset\n\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [15,8]\n\nimport warnings \nwarnings.filterwarnings('ignore')","f56f1934":"#Importing the dataset\n\ndf = pd.read_csv('..\/input\/bitcoin-prices-dataset\/Bitcoin.csv', usecols=['Date','Adj Close'])\ndf.columns = ['Date','Price']\nvariable='Price'\ndf.loc[:,'Date'] = pd.to_datetime(df['Date'])\ndf.set_index('Date', inplace=True)\noriginal_df = df.copy(deep=True)\ndisplay(df.head())\n\nprint('\\n\\033[1mInference:\\033[0m The Datset consists of {} features & {} samples.'.format(df.shape[1], df.shape[0]))","bd4c3bbb":"#Plotting Timeseries\n\ndf.plot()\nplt.grid()\nplt.show()","93d67352":"#Stationary Check\n\ndef Staionarity_Check(ts):\n    plt.plot(ts, label='Original')\n    plt.plot(ts.rolling(window=52, center=False).mean(), label='Rolling Mean')\n    plt.plot(ts.rolling(window=52, center=False).std(), label='Rolling Std')\n    plt.grid()\n    plt.legend()\n    plt.show()\n    \n    adf = adfuller(ts, autolag='AIC')\n    padf = pd.Series(adf[:4], index=['T Statistic','P-Value','#Lags Used','#Observations Used'])\n    for k,v in adf[4].items():\n        padf['Critical value {}'.format(k)]=v\n    print(padf)\n    \nStaionarity_Check(df[variable])","72081cce":"#Decomposing using moving average\n\ntsl = np.log(df)\nma = tsl.rolling(window=2).mean()\nms = tsl.rolling(window=2).std()\n\nplt.plot(ma, c='r')#, center=False)\nplt.plot(ms, c='g')\nplt.plot(tsl)\nplt.grid()\nplt.show()","5e2b46bd":"# Stationarity Check for Decomposed Time Series\n\ntsl - np.log(df)\nma = tsl.rolling(window=2, center=False).mean()\n\ntslma = tsl - ma\ntslma = tslma.dropna()\nStaionarity_Check(tslma)","40e0cafc":"#Auto Correlation Fuction #q\n\nplt.plot(np.arange(acf(tslma, nlags=10,fft=True).shape[0]),acf(tslma, nlags=10, fft=True))\nplt.axhline(y=0, linestyle='--', c='gray')\nplt.axhline(y=-7.96\/np.sqrt(len(tslma)), linestyle='--',c='gray')\nplt.axhline(y=7.96\/np.sqrt(len(tslma)), linestyle='--',c='gray')\n\nplt.title('Auto Correlation Fuction')\nplt.grid()\nplt.show()","dfbf1caf":"#Partial Auto Correlation Fuction #p\n\nplt.plot(np.arange(pacf(tslma, nlags=10).shape[0]),pacf(tslma, nlags=10))\nplt.axhline(y=0, linestyle='--', c='gray')\nplt.axhline(y=-7.96\/np.sqrt(len(tslma)), linestyle='--',c='gray')\nplt.axhline(y=7.96\/np.sqrt(len(tslma)), linestyle='--',c='gray')\n\nplt.title('Partial Auto Correlation Fuction')\nplt.grid()\nplt.show()","851b4993":"#Building ARIMA Model\n\nArima = ARIMA(tslma, order=(1,2,2))\nAr = Arima.fit()\n# plt.plot(tslma, label=['Original'])\n# plt.plot(Ar.fittedvalues,c='r', label=['Forecast'])\n# plt.legend()\n# plt.grid()\n\nAr.summary()","61e54a23":"# Forecasting future predictions\n\nfuture_dates=[df.index[-1]+ DateOffset(days=x)for x in range(0,1)]\nfuture_datest_df=pd.DataFrame(index=future_dates[1:],columns=df.columns)\nfuture_datest_df.tail()\n\nfuture_df=pd.concat([df,future_datest_df])\nfuture_df.shape","88b1446e":"Ar.predict(start =2500, end = 2600, dynamic= True)","b00aeff2":"# Forecasting future predictions\n\nfuture_dates=[df.index[-1]+ DateOffset(months=x)for x in range(0,24)]\nfuture_datest_df=pd.DataFrame(index=future_dates[1:],columns=df.columns)\nfuture_datest_df.tail()\n\nfuture_df=pd.concat([df,future_datest_df])\n\nfuture_df['Price'] += Ar.predict(start =0, end = 2683, dynamic= True)\n\nplt.plot(future_df[variable][:-260], label=['Original'])\nplt.plot((future_df['Price'][-260:]+(1.08*ma.mean()[0])), label=['Forecast'])\nplt.grid()\nplt.legend()\nplt.show()","8133db78":"#<<<------------------------------------- THE END ----------------------------------------------->>>","4d5e326b":"<center><img src=\"https:\/\/raw.githubusercontent.com\/Masterx-AI\/Project_Bitcoin_Prices_Forecast\/main\/bitcoin.jpg\" style=\"width: 700px;\"\/>","88772e03":"---","21045862":"---","accb035c":"**Inference:** Since the test statistic is higher than the critical value, & the rolling mean is not constant over time, therefore the null hypothesis cannot be rejected. This implies that the time-series is non-staionary!\nLet us fix this by decomposing using moving average...","bc148bc6":"1. Visualize the time series - Check for trend, seasonality, or random patterns.\n2. Stationarize the series using decomposition or differencing techniques.\n3. Plot ACF\/PACF and find (p,d,q) parameters.\n4. Building the forecasting model - can be AR, MA, ARMA or ARIMA.\n5. Making Predictions using the Forecasting Model","94627ca3":"**Inference**: Now the test staistic can be observed to be less that 5% critical value, hence the nullhypothsis can be rejected. Indicating that the time series is stationary & we can use it to create our ARIMA Model. But before that, let us find the parameters - `p` & `q` required by the model, by plotting Auto-Correlation Function & Partial Auto-Correlation Function.","87dbcce0":"---","5431587c":"## <center>5. Forecasting","f09c986b":"**Inference:** The Arima Model fits well on the time-series data with nearly perfect p-values. Let us now forcast the future data with the help of the trained ARIMA Model.","1d52740c":"**Inference:** It's clear from the plot that there is an uptrend in the volumne of Passengers, with some seasonality. Let us perform stationarity check using visual (rolling mean & std) & statistical tests ( Dicky-Fooler's Test) to confirm the same.","bc62f46a":"---","01e00369":"**Inference:** The ACF Curve passes throught the upper confidence value when the lag value is between 5 & 6, hence the optimal value of `q` can be either 5 or 6.","aea9fb85":"### Description:\n\nBitcoin is the longest running and most well known cryptocurrency, first released as open source in 2009 by the anonymous Satoshi Nakamoto. Bitcoin serves as a decentralized medium of digital exchange, with transactions verified and recorded in a public distributed ledger (the blockchain) without the need for a trusted record keeping authority or central intermediary. Transaction blocks contain a SHA-256 cryptographic hash of previous transaction blocks, and are thus \"chained\" together, serving as an immutable record of all transactions that have ever occurred. As with any currency\/commodity on the market, bitcoin trading and financial instruments soon followed public adoption of bitcoin and continue to grow. Included here is historical bitcoin market data at 1-min intervals for select bitcoin exchanges where trading takes place. Happy (data) mining!\n\n### Acknowledgements\nThe dataset is referred from Kaggle\n\n### Objectives:\n- Understand the Dataset & cleanup (if required).\n- Perform the necessary checks like stationarity & DF on the Dataset.\n- Build a forcasting model to forecast prices of BitCoin.","1650b525":"---","233d3a4a":"---","a8b55997":"## <center>4. Model Building","08deac56":"---","1a713ba7":"**Inference:** The PACF Curve drops to 0 when the lag value is between 1 & 2, hence the optimal value of `p` can be either 1 or 2.","ca198220":"**Inference:**<br>\nThe model's forecast seems to be precise as it captures most of the sesonality & possible trends in the time-series data.\n","cff5cf01":"---","900fea84":"## <center>2. Stationarize the Series","a7f0242f":"## <center> Project Outcomes & Conclusions","1d281b8b":"## <center> Stractegic Plan of Action:","e66a99a6":"## <center>1. Visualizing the Time Series","6b9d29fc":"# <center> \u2605 AI \/ ML Project - Bitcoin Prices Forecast \u2605\n#### <center> ***Domain: Cryptocurrency***","7e40fb28":"---","01f4810d":"## <center>3. Plotting ACF \/ PACF","a5d557ee":"### Here are some of the key outcomes of the project:\n- The Bitcoin Price Time-Series Dataset was quiet small, with just 2683 samples.\n- It was clear from the visuals that the time-series dataset had an upward trend & some seasonality.\n- The same was confirmed with help of visual (rolling mean & std) & statistical (Dicky-Fuller Test) stionarity checks.\n- The time-series was subject to Decomposition in order to stationarize the outputs.\n- Futher ACF & PACF curves were plotted to extract the values of p & q, as it is required for the ARIMA Model.\n- The Forecasting Model was then built with the time-series data, by feeding the optimal p,q,d values.\n- Finally, the model was used to forecast the time-series of the bitcoin prices, into the future."}}