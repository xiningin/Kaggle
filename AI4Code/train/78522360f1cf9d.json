{"cell_type":{"08d5fbd3":"code","d88af1ae":"code","ba49921e":"code","317114a0":"code","a0397c61":"code","6159e570":"code","2669e164":"code","a6fd26ec":"code","7c0db9e4":"code","ba368b0f":"code","c5ef943a":"code","222bc694":"code","a91df08e":"code","11add71d":"code","c795c50c":"code","6d523c1c":"code","9bd91dd1":"code","e70b5f7a":"code","0952946a":"code","f05e6cce":"code","729cf5b1":"code","f5056c3a":"code","68e8d43f":"code","8c5aee71":"code","221a9bf9":"code","67a5b901":"code","49de4230":"code","94cde2c5":"code","8f7901ac":"code","4f7d03ee":"code","5d29b230":"code","5fafb47e":"code","03efb667":"code","21ca6993":"code","9f616084":"code","7b02ee56":"code","dfe0066b":"code","2a4f1d86":"code","743c50b6":"code","45fad6e4":"code","81c8ca8b":"code","a0ea8113":"code","fa118152":"code","05b26ccd":"code","3f13a8cb":"code","e72f94fe":"code","2ae406ee":"code","72df79f5":"code","6925c724":"code","60e6ca9e":"code","3333bdfc":"code","b1612916":"code","8a7e94f5":"code","abd75359":"code","d94c3237":"code","6c7894c4":"code","28c991ec":"code","5c817252":"code","e19bdf30":"code","0e9f62cd":"code","b8422db2":"markdown","fad586ce":"markdown","10d74432":"markdown","37ce962c":"markdown","c9676133":"markdown","ef35bc84":"markdown","b75bbffd":"markdown","78fb6d2f":"markdown","d410bbec":"markdown","91086201":"markdown","abe3b998":"markdown","9ca81cd6":"markdown","b1c400c6":"markdown","e9b4e9cf":"markdown","81ed0423":"markdown","3e2ef29b":"markdown","5930c13e":"markdown","41d9808e":"markdown","391ada3a":"markdown","e7318aef":"markdown","d4538fb6":"markdown","d06d8d9b":"markdown"},"source":{"08d5fbd3":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt","d88af1ae":"df = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","ba49921e":"df.info()","317114a0":"df['age'] = pd.cut(df['age'] ,3,labels=[\"mid-young\", \"old\", \"very-old\"])","a0397c61":"df['age'].value_counts().plot(kind='pie', shadow=True, autopct='%.0f%%')","6159e570":"df['anaemia'].value_counts().plot(kind='pie', shadow=True, autopct='%.0f%%')","2669e164":"smoke_sex = df.groupby(['smoking', 'sex']).count()['age']","a6fd26ec":"smoke_sex.plot(kind='barh', grid=True)","7c0db9e4":"df.pivot_table(index='sex', columns='smoking', values='DEATH_EVENT', aggfunc='size')","ba368b0f":"df.groupby(['anaemia', 'diabetes']).size()","c5ef943a":"ana_dia_sm = df.pivot_table(index=['anaemia','diabetes','smoking'], aggfunc='size')\nana_dia_sm.plot(kind='barh', grid=True, color='brown')","222bc694":"from sklearn.preprocessing import LabelEncoder, StandardScaler\n# use LabelEncoder to put label \n# use standardscaler for scale the data that important for Ridge , Svm and Sgd","a91df08e":"label_en = LabelEncoder()\nstandard = StandardScaler()\ndf['age'] = label_en.fit_transform(df['age'])\ndf.drop('time', axis='columns', inplace=True)","11add71d":"df","c795c50c":"df['creatinine_phosphokinase'] \/= 7861\ndf['serum_sodium'] \/= 148\ndf['platelets'] \/= 850000.0","6d523c1c":"df['ejection_fraction'] \/= 80 \ndf['serum_creatinine'] \/= 9.4","9bd91dd1":"df['creatinine_phosphokinase'] = standard.fit_transform(df['creatinine_phosphokinase'].values.reshape(-1, 1))\ndf['serum_sodium']= standard.fit_transform(df['serum_sodium'].values.reshape(-1, 1))\ndf['platelets'] = standard.fit_transform(df['platelets'].values.reshape(-1, 1))\n","e70b5f7a":"df","0952946a":"from sklearn.model_selection import train_test_split, GridSearchCV","f05e6cce":"x = df.iloc[:, :-1]\ny = df.iloc[:, -1]\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)","729cf5b1":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score","f5056c3a":"from sklearn.svm import SVC\n\nparam_grid = [\n  {'C': [1, 10, 50, 100, 200, 250], 'kernel': ['linear']},\n  {'C': [1, 10, 50, 100, 200], 'gamma': [10 , 1, 0.01, 0.001, 0.0001], 'kernel': ['rbf']},\n ]","68e8d43f":"clf_svm = SVC()\ngrid_clf = GridSearchCV(clf_svm, param_grid)\ngrid_clf.fit(x_train, y_train)\ngrid_clf.best_params_","8c5aee71":"predict_svm = grid_clf.predict(x_test)","221a9bf9":"print(classification_report(y_test, predict_svm))","67a5b901":"confusion_matrix(y_test.values, predict_svm)","49de4230":"from sklearn.linear_model import SGDClassifier","94cde2c5":"clf_sgd = SGDClassifier(penalty='l2', max_iter=62)\n\nclf_sgd.fit(x_train, y_train)\n\npredict_sgd = clf_sgd.predict(x_test)","8f7901ac":"print(classification_report(y_test, predict_sgd))","4f7d03ee":"confusion_matrix(y_test, predict_sgd)","5d29b230":"from sklearn.tree import DecisionTreeClassifier","5fafb47e":"clf_tree = DecisionTreeClassifier(max_depth=8,criterion='entropy')\nclf_tree.fit(x_train, y_train)\npredict_tree = clf_tree.predict(x_test)","03efb667":"print(classification_report(y_test, predict_tree))","21ca6993":"confusion_matrix(y_test, predict_tree)","9f616084":"from sklearn.decomposition import PCA","7b02ee56":"from sklearn.ensemble import RandomForestClassifier\n\nclf_random = RandomForestClassifier(random_state=200, max_depth=10)","dfe0066b":"clf_random.fit(x_train, y_train)\npredict_random = clf_random.predict(x_test)\nprint(classification_report(y_test, predict_random))\nconfusion_matrix(y_test, predict_random)","2a4f1d86":"from sklearn.ensemble import GradientBoostingClassifier\ngbc = GradientBoostingClassifier(max_depth=3)","743c50b6":"gbc.fit(x_train, y_train)","45fad6e4":"predict_gbc = gbc.predict(x_test)","81c8ca8b":"confusion_matrix(y_test, predict_gbc)","a0ea8113":"print(classification_report(y_test, predict_gbc))\n","fa118152":"from sklearn.metrics import roc_curve\nfrom sklearn.model_selection import cross_val_predict","05b26ccd":"def plot_curve(fpr, tpr, label=None):\n    plt.plot(fpr, tpr, linewidth=2, label=label)\n    plt.plot([0,1],[0,1], 'k--')","3f13a8cb":"y_score_tree = cross_val_predict(clf_tree, x_train, y_train)\nfpr_tree, tpr_tree , threshold_tree = roc_curve(y_train, y_score_tree)","e72f94fe":"y_score_random = cross_val_predict(clf_random, x_train, y_train)\nfpr_random, tpr_random , threshold_random = roc_curve(y_train, y_score_random)","2ae406ee":"y_score_svm = cross_val_predict(clf_svm, x_train, y_train)\nfpr_svm, tpr_svm , threshold_svm = roc_curve(y_train, y_score_svm)","72df79f5":"y_score_sgd = cross_val_predict(clf_sgd, x_train, y_train)\nfpr_sgd, tpr_sgd , threshold_sgd = roc_curve(y_train, y_score_sgd)","6925c724":"y_score_gbc = cross_val_predict(gbc, x_train, y_train)\nfpr_gbc, tpr_gbc , threshold_gbc = roc_curve(y_train, y_score_gbc)","60e6ca9e":"plot_curve(fpr_svm, tpr_svm, label='svm')\nplot_curve(fpr_random, tpr_random, label='randomForest')\nplot_curve(fpr_tree, tpr_tree, label='tree')\nplot_curve(fpr_sgd, tpr_sgd, label='sgd')\nplot_curve(fpr_gbc, tpr_gbc, label='gbc')\n\nplt.legend()\nplt.show()\n","3333bdfc":"random_acc = accuracy_score(y_test,predict_random)\nrandom_acc","b1612916":"gbc_acc = accuracy_score(y_test,predict_gbc)\ngbc_acc","8a7e94f5":"sgd_acc = accuracy_score(y_test,predict_sgd)\nsgd_acc","abd75359":"svm_acc = accuracy_score(y_test,predict_svm)\nsvm_acc","d94c3237":"tree_acc = accuracy_score(y_test,predict_tree)\ntree_acc","6c7894c4":"tree_acc = pd.Series(tree_acc)","28c991ec":"score = {'Decision_tree': tree_acc, \n         'Svm': svm_acc,\n         'Sgd': sgd_acc,\n          'RandomForest': random_acc,\n           'GradienBoost': gbc_acc }","5c817252":"df = pd.DataFrame(data=score)","e19bdf30":"df.index.name = 'score'","0e9f62cd":"a = df.plot(kind='bar', figsize=(8, 5), ylabel='Accuracy')\n","b8422db2":"# DecisionTree Classifier:","fad586ce":"* let's try another task that's help us to underestand how many pepole has both anaemia and diabetes","10d74432":"# ROC Curve:","37ce962c":"# Scale The Data:","c9676133":"# it's look like better:","ef35bc84":"## looks great but as much as we need look at the Platelets it's varient value let's scale it ","b75bbffd":"* that's interesting now let's see how many dead if they will smoke ","78fb6d2f":"* lets look at the persent of people has anaemia  \n* you can use this plot for smoke and diabetes column jusr change  it this value df['?'] ","d410bbec":"# now try to do some interesting task like PCA with save 95% of Our data\n* pca = PCA(n_components = 0.95)\n* pca = PCA(n_components = 2)\n* x_2d = pd.DataFrame(pca.fit_transform(x))","91086201":"* 98 people no anaemia and diabetes great\n* 72 people does not have anoemia but has diabetes \n* 76 people has anoemia and does not have diabetes\n* 53 people has both anoemia and diabetes","abe3b998":"# GradientBoosting:","9ca81cd6":"* ready for clean the data and put label ? ","b1c400c6":"**we dont have any null value**\n* if you look at the age column see max is 97 we try to convert it into 3 class 1) mid-young 2) old 3) very-old you can change the  name of class **","e9b4e9cf":"# Normalize The data :","81ed0423":"**Confuction matrix**\n* True Positive:\n\nInterpretation: You predicted positive and it\u2019s true.\n\n\n* True Negative:\n\nInterpretation: You predicted negative and it\u2019s true.\n\n\n* False Positive: (Type 1 Error)\n\nInterpretation: You predicted positive and it\u2019s false.\n\n\n* False Negative: (Type 2 Error)\n\nInterpretation: You predicted negative and it\u2019s false.\n","3e2ef29b":"* lets see which sex is more try to smoke men or women befor see the result guess which one?","5930c13e":"# *important lets use GridsearchCV to find best param for our model* ","41d9808e":"## *SUPPORT VECTOR MACHINE*","391ada3a":"# Split The Data:","e7318aef":"* now see the pesent of each class we have in our dataframe ","d4538fb6":"# SGD Classifier:","d06d8d9b":"# Random Foreset"}}