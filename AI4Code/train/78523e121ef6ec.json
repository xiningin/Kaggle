{"cell_type":{"8b201fa3":"code","bcc47e89":"code","d62814d1":"code","727d1220":"code","76734569":"code","f446566b":"code","5750f8d5":"code","7350d8e7":"code","2ed64934":"code","f57aa39d":"code","2813c39a":"code","539e4c0b":"code","ff04c055":"code","79d3563f":"code","0318affd":"code","a99713c7":"code","fe7e29cd":"code","cb71471d":"code","bef7acc9":"code","821e97f1":"code","4c0ac5dc":"code","08b5c674":"code","1469360e":"code","7cdde93b":"code","626135fa":"code","a19f1de6":"code","50fa31ee":"code","1b4d359f":"code","fe5ba68e":"code","41e28ab6":"code","94e4cf20":"code","7fddecf8":"code","e6e46bbc":"markdown","aa3c3968":"markdown","631965d2":"markdown","bce51a38":"markdown","519646b8":"markdown","771841c4":"markdown","f971038d":"markdown","85bdcafb":"markdown","e51fd691":"markdown","60b151a6":"markdown","1bd33fee":"markdown","4cf5a6f1":"markdown","f6d779fb":"markdown","7d3511fa":"markdown","4cccf19f":"markdown","9e85ceed":"markdown","62b43056":"markdown","a4a49117":"markdown","e0692958":"markdown","ad3e5993":"markdown","9a234c63":"markdown","5115a11a":"markdown","d18da935":"markdown","9a1df498":"markdown","b7bacdb4":"markdown","50d0b01a":"markdown","9eca34a0":"markdown","2a9d2e2e":"markdown","d2020914":"markdown","331b70bf":"markdown","1d86ecf4":"markdown","02d80603":"markdown","ef85dfd0":"markdown","b448e683":"markdown","c6875778":"markdown","c2cbeb47":"markdown","62775821":"markdown","b3e7ab8a":"markdown","ec52b27f":"markdown","6c546505":"markdown","934634cb":"markdown"},"source":{"8b201fa3":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","bcc47e89":"data = pd.read_csv(r'\/kaggle\/input\/airline-passenger-traffic\/airline-passenger-traffic(1).csv')\ndata.columns = ['Month','Passengers']\ndata['Month'] = pd.to_datetime(data['Month'], format='%Y-%m')\ndata = data.set_index('Month')\ndata.head()","d62814d1":"data.plot(figsize=(20, 4))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic')\nplt.show(block=False)","727d1220":"data = data.assign(Passengers_Mean_Imputation=data.Passengers.fillna(data.Passengers.mean()))\ndata[['Passengers_Mean_Imputation']].plot(figsize=(20, 4))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic: Mean imputation')\nplt.show(block=False)","76734569":"data = data.assign(Passengers_Linear_Interpolation=data.Passengers.interpolate(method='linear'))\ndata[['Passengers_Linear_Interpolation']].plot(figsize=(20, 4))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic: Linear interpolation')\nplt.show(block=False)","f446566b":"data['Passengers'] = data['Passengers_Linear_Interpolation']\ndata.drop(columns=['Passengers_Mean_Imputation','Passengers_Linear_Interpolation'],inplace=True)\ndata.head()","5750f8d5":"import seaborn as sns\nfig = plt.subplots(figsize=(20, 5))\nax = sns.boxplot(x=data['Passengers'],whis=1.5)","7350d8e7":"fig = data.Passengers.hist(figsize = (20,5))","2ed64934":"from pylab import rcParams\nimport statsmodels.api as sm\nrcParams['figure.figsize'] = 20,24\ndecomposition = sm.tsa.seasonal_decompose(data.Passengers, model='additive') # additive seasonal index\nfig = decomposition.plot()\nplt.show()","f57aa39d":"decomposition = sm.tsa.seasonal_decompose(data.Passengers, model='multiplicative') # multiplicative seasonal index\nfig = decomposition.plot()\nplt.show()","2813c39a":"train_len = 120\ntrain = data[0:train_len] # first 120 months as training set\ntest = data[train_len:] # last 24 months as out-of-time test set","539e4c0b":"y_hat_naive = test.copy()\ny_hat_naive['naive_forecast'] = train['Passengers'][train_len-1]","ff04c055":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_naive['naive_forecast'], label='Naive forecast')\nplt.legend(loc='best')\nplt.title('Naive Method')\nplt.show()","79d3563f":"from sklearn.metrics import mean_squared_error\nrmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_naive['naive_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_naive['naive_forecast'])\/test['Passengers'])*100,2)\n\nresults = pd.DataFrame({'Method':['Naive method'], 'MAPE': [mape], 'RMSE': [rmse]})\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","0318affd":"y_hat_avg = test.copy()\ny_hat_avg['avg_forecast'] = train['Passengers'].mean()","a99713c7":"plt.figure(figsize=(20,4))\nplt.grid()\nplt.plot(train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_avg['avg_forecast'], label='Simple average forecast')\nplt.legend(loc='best')\nplt.title('Simple Average Method')\nplt.show()","fe7e29cd":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_avg['avg_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_avg['avg_forecast'])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Simple average method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","cb71471d":"y_hat_sma = data.copy()\nma_window = 12\ny_hat_sma['sma_forecast'] = data['Passengers'].rolling(ma_window).mean()\ny_hat_sma['sma_forecast'][train_len:] = y_hat_sma['sma_forecast'][train_len-1]","bef7acc9":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_sma['sma_forecast'], label='Simple moving average forecast')\nplt.legend(loc='best')\nplt.title('Simple Moving Average Method')\nplt.show()","821e97f1":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_sma['sma_forecast'][train_len:])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_sma['sma_forecast'][train_len:])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Simple moving average forecast'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","4c0ac5dc":"from statsmodels.tsa.holtwinters import SimpleExpSmoothing\nmodel = SimpleExpSmoothing(train['Passengers'])\nmodel_fit = model.fit(smoothing_level=0.2,optimized=False)\nmodel_fit.params\ny_hat_ses = test.copy()\ny_hat_ses['ses_forecast'] = model_fit.forecast(24)","08b5c674":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_ses['ses_forecast'], label='Simple exponential smoothing forecast')\nplt.legend(loc='best')\nplt.title('Simple Exponential Smoothing Method')\nplt.show()","1469360e":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_ses['ses_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_ses['ses_forecast'])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Simple exponential smoothing forecast'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults","7cdde93b":"from statsmodels.tsa.holtwinters import ExponentialSmoothing\nmodel = ExponentialSmoothing(np.asarray(train['Passengers']) ,seasonal_periods=12 ,trend='additive', seasonal=None)\nmodel_fit = model.fit(smoothing_level=0.2, smoothing_slope=0.01, optimized=False)\nprint(model_fit.params)\ny_hat_holt = test.copy()\ny_hat_holt['holt_forecast'] = model_fit.forecast(len(test))","626135fa":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot( train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_holt['holt_forecast'], label='Holt\\'s exponential smoothing forecast')\nplt.legend(loc='best')\nplt.title('Holt\\'s Exponential Smoothing Method')\nplt.show()","a19f1de6":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_holt['holt_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_holt['holt_forecast'])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Holt\\'s exponential smoothing method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","50fa31ee":"y_hat_hwa = test.copy()\nmodel = ExponentialSmoothing(np.asarray(train['Passengers']) ,seasonal_periods=12 ,trend='add', seasonal='add')\nmodel_fit = model.fit(optimized=True)\nprint(model_fit.params)\ny_hat_hwa['hw_forecast'] = model_fit.forecast(23)","1b4d359f":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot( train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_hwa['hw_forecast'], label='Holt Winters\\'s additive forecast')\nplt.legend(loc='best')\nplt.title('Holt Winters\\' Additive Method')\nplt.show()","fe5ba68e":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_hwa['hw_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_hwa['hw_forecast'])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Holt Winters\\' additive method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","41e28ab6":"y_hat_hwm = test.copy()\nmodel = ExponentialSmoothing(np.asarray(train['Passengers']) ,seasonal_periods=12 ,trend='add', seasonal='mul')\nmodel_fit = model.fit(optimized=True)\nprint(model_fit.params)\ny_hat_hwm['hw_forecast'] = model_fit.forecast(23)","94e4cf20":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot( train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_hwm['hw_forecast'], label='Holt Winters\\'s mulitplicative forecast')\nplt.legend(loc='best')\nplt.title('Holt Winters\\' Mulitplicative Method')\nplt.show()","7fddecf8":"rmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_hwm['hw_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_hwm['hw_forecast'])\/test['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Holt Winters\\' multiplicative method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","e6e46bbc":"### Histogram plot","aa3c3968":"### Plot train, test and forecast","631965d2":"### Calculate RMSE and MAPE","bce51a38":"### Calculate RMSE and MAPE","519646b8":"# Time series forecasting","771841c4":"### Plot train, test and forecast","f971038d":"### Calculate RSME and MAPE","85bdcafb":"## 6. Holt Winters' additive method with trend and seasonality","e51fd691":"## Import required packages","60b151a6":"## 2. Simple average method","1bd33fee":"### Plot train, test and forecast","4cf5a6f1":"### Linear interpolation","f6d779fb":"## 4. Simple exponential smoothing","7d3511fa":"### Calculate RMSE and MAPE","4cccf19f":"## Import time series data: Airline passenger traffic","9e85ceed":"### Additive seasonal decomposition","62b43056":"As part of suggestion, We recommend to use **Holt Winters' multiplicative method** for accurate prediction for time series as it has least RMSE among all. \t","a4a49117":"### Calculate RMSE and MAPE","e0692958":"### Calculate RMSE and MAPE","ad3e5993":"# Simple time series methods","9a234c63":"### Plot train, test and forecast","5115a11a":"### Box plot and interquartile range","d18da935":"### Use linear interpolation to impute missing values","9a1df498":"# Time series analysis","b7bacdb4":"### Mean imputation","50d0b01a":"## Missing value treatment","9eca34a0":"## 5. Holt's method with trend","2a9d2e2e":"### Split time series data into training and test set","d2020914":"## 3.  Simple moving average method","331b70bf":"## Plot time series data","1d86ecf4":"## 7. Holt Winter's multiplicative method with trend and seasonality","02d80603":"## 1.  Naive method","ef85dfd0":"### Calculate RMSE and MAPE","b448e683":"# Build and evaluate time series forecast","c6875778":"# Exponential smoothing methods","c2cbeb47":"### Multiplicative seasonal decomposition","62775821":"## Time series Decomposition","b3e7ab8a":"### Plot train, test and forecast","ec52b27f":"### Plot train, test and forecast","6c546505":"### Plot train, test and forecast","934634cb":"## Outlier detection"}}