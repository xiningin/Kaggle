{"cell_type":{"0af48a54":"code","1061b10c":"code","0146b09a":"code","3fe7c5b4":"code","1209f6de":"code","1a7d651b":"code","348f88b5":"code","42ba62cf":"code","f61d3850":"code","6bc2b848":"code","eb0a11cd":"code","73cf9561":"code","f8ad71dc":"code","ad41577e":"code","f8db9efb":"code","ef8ecabc":"code","40b3ba3e":"code","9698529f":"code","1ea84d82":"code","379e2520":"code","87407061":"code","e8b3c96e":"code","b7ad8d47":"code","f05e4308":"code","b546795a":"code","1ae837a5":"code","f35e6d67":"code","a161d036":"code","df4c7df6":"code","b12e7ba4":"markdown","4d751fb5":"markdown","69faf664":"markdown","0d529940":"markdown"},"source":{"0af48a54":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1061b10c":"titanic_train_filepath= '..\/input\/titanic\/train.csv'\ntitanic_test_filepath='..\/input\/titanic\/test.csv'\ndf_train=pd.read_csv(titanic_train_filepath, index_col='PassengerId')","0146b09a":"df_train","3fe7c5b4":"df_train.columns","1209f6de":"df_train.isna().sum()","1a7d651b":"df_train.Embarked.value_counts()","348f88b5":"df_train.Embarked.fillna('S', inplace=True)\ndf_train.Embarked.value_counts()","42ba62cf":"df_train['Age'].fillna(df_train['Age'].mean(), inplace=True)\ndf_train.Age.isna().sum()","f61d3850":"df_train.isna().sum()","6bc2b848":"df_train.drop(['Name','Ticket','Cabin'], axis=1, inplace=True)\n","eb0a11cd":"df_train.shape","73cf9561":"from sklearn.preprocessing import LabelEncoder\n\nlebeled_Sex = LabelEncoder()\nlabeled_Embarked = LabelEncoder()\n\ndf_train['Sex'] = lebeled_Sex.fit_transform(df_train['Sex'])\ndf_train['Embarked'] = labeled_Embarked.fit_transform(df_train['Embarked'])","f8ad71dc":"y = df_train.Survived\nX = df_train.drop(['Survived'], axis=1)\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, random_state=0)","ad41577e":"para = list(range(100, 1001, 100))\nprint(para)","f8db9efb":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, accuracy_score, f1_score\nresults = {}\nfor n in para:\n    print('para=', n)\n    model = RandomForestClassifier(n_estimators=n)\n    model.fit(X_train, y_train)\n    preds = model.predict(X_valid)\n    accu = accuracy_score(y_true=y_valid, y_pred=preds)\n    f1 = f1_score(y_true=y_valid, y_pred=preds, average='micro')\n    print(classification_report(y_true=y_valid, y_pred=preds))\n    print('--------------------------')\n    results[n] = f1","ef8ecabc":"import matplotlib.pylab as plt\n\n# sorted by key, return a list of tuples\nlists = sorted(results.items()) \np, a = zip(*lists) # unpack a list of pairs into two tuples\nplt.plot(p, a)\nplt.show()","40b3ba3e":"best_para = max(results, key=results.get)\nprint('best para', best_para)\nprint('value', results[best_para])","9698529f":"df_test = pd.read_csv('..\/input\/titanic\/test.csv', index_col='PassengerId')\ndf_test","1ea84d82":"df_test.isna().sum()","379e2520":"df_test['Age'].fillna(df_train['Age'].mean(), inplace=True)\ndf_test.Age.isna().sum()","87407061":"df_test['Fare'].fillna(df_train['Fare'].mean(), inplace=True)\ndf_test.Fare.isna().sum()","e8b3c96e":"df_test.isna().sum()","b7ad8d47":"df_test.drop(['Name','Ticket','Cabin'], axis=1, inplace=True)\nprint(df_test.shape)","f05e4308":"from sklearn.preprocessing import LabelEncoder\n\ndf_test['Sex'] = lebeled_Sex.transform(df_test['Sex'])\ndf_test['Embarked'] = labeled_Embarked.transform(df_test['Embarked'])","b546795a":"final_model = RandomForestClassifier(n_estimators=best_para)\nfinal_model.fit(X, y)","1ae837a5":"preds = final_model.predict(df_test)\n","f35e6d67":"df_sub = pd.DataFrame(data={\n    'PassengerId': df_test.index,\n    'Survived': preds\n})","a161d036":"df_sub.Survived.value_counts()","df4c7df6":"df_sub.to_csv('submission.csv', index=False)","b12e7ba4":"# hyper-parameters tuning","4d751fb5":"# Data Pre-processing","69faf664":"# Test the Final Model","0d529940":"# Data Exploreing"}}