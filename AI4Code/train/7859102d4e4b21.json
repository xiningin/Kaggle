{"cell_type":{"f7fac35b":"code","5a520311":"code","660bf2d6":"code","be7c420e":"code","1978885c":"code","2896c6c9":"code","f573531e":"code","1452ea71":"code","b8d7ec36":"code","5db96972":"code","107dac50":"code","9df7968e":"code","1bd0ba21":"code","8e6f72f8":"code","f7b33c9c":"code","40719e5c":"code","30fd90d5":"code","5e5c01b7":"code","fe2385e1":"code","ed35652c":"code","615ba9c4":"code","ee7b7920":"code","1528f8b4":"code","a0c8c112":"code","c5b5f77f":"code","4d3a3ca4":"code","b846f692":"code","0d3d831a":"code","e992f3e9":"code","6f299a6c":"code","77eef6c1":"markdown","adc86348":"markdown","a86c1eaa":"markdown","5884080f":"markdown","ffb51e11":"markdown","8fe5fbfe":"markdown"},"source":{"f7fac35b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport random\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\n\nfrom matplotlib import pyplot as plt\n\nfrom fastai import *\nfrom fastai.tabular import *\nfrom fastai.basic_data import DataBunch\nfrom tqdm import tqdm_notebook\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n%reload_ext autoreload\n%autoreload 2","5a520311":"indir = '..\/input'","660bf2d6":"df = pd.read_csv(os.path.join(indir, 'train.csv'))\ndf.describe()","be7c420e":"test_df = pd.read_csv(os.path.join(indir, 'test.csv')).set_index('ID_code')\ntest_df.describe()","1978885c":"# get the features list\nfeatures = [feature for feature in df.columns if 'var' in feature]\nlen(features)","2896c6c9":"augmented_features = ['min', 'mean', 'max', 'median', 'std', 'abs_mean', 'abs_median', 'abs_std', 'skew', 'kurt', 'sq_kurt']","f573531e":"def augment_df(df):\n    for feature in features:\n        df[f'sq_{feature}'] = df[feature]**2\n        df[f'repo_{feature}'] = df[feature].apply(lambda x: 0 if x==0 else 1\/x)\n        df[f'repo_sq_{feature}'] = df[f'sq_{feature}'].apply(lambda x: 0 if x==0 else 1\/x)\n    \n    df['min'] = df[features].min(axis=1)\n    df['mean'] = df[features].mean(axis=1)\n    df['max'] = df[features].max(axis=1)\n    df['median'] = df[features].median(axis=1)\n    df['std'] = df[features].std(axis=1)\n    df['var'] = df[features].var(axis=1)\n    df['abs_mean'] = df[features].abs().mean(axis=1)\n    df['abs_median'] = df[features].abs().median(axis=1)\n    df['abs_std'] = df[features].abs().std(axis=1)\n    df['skew'] = df[features].skew(axis=1)\n    df['kurt'] = df[features].kurt(axis=1)\n    \n    df['sq_kurt'] = df[[f'sq_{feature}' for feature in features]].kurt(axis=1)\n    ","1452ea71":"%%time\naugment_df(df)\ndf.head()","b8d7ec36":"%%time\naugment_df(test_df)\ntest_df.head()","5db96972":"features = features + [f'sq_{feature}' for feature in features] + [f'repo_{feature}' for feature in features] + [f'repo_sq_{feature}' for feature in features]\nlen(features) ","107dac50":"random.seed(2019)\nvalid_idx = random.sample(list(df.index.values), int(len(df)*0.05) )","9df7968e":"# verify that positive sample distribution in validation set is similar to that of the whole data\ndf.iloc[valid_idx].target.sum() \/ len(valid_idx) , df.target.sum() \/ len(df)","1bd0ba21":"class roc(Callback):\n    '''\n    ROC_AUC metric callback for fastai. Compute ROC score over each batch and returns the average over batches.\n    TO DO: rolling average\n    '''\n    def on_epoch_begin(self, **kwargs):\n        self.total = 0\n        self.batch_count = 0\n    \n    def on_batch_end(self, last_output, last_target, **kwargs):\n        preds = F.softmax(last_output, dim=1)\n        # roc_auc_score does not work on batches which does not contain both classes.\n        try:\n            roc_score = roc_auc_score(to_np(last_target), to_np(preds[:,1]))\n            self.total += roc_score\n            self.batch_count += 1\n        except:\n            pass\n    \n    def on_epoch_end(self, num_batch, **kwargs):\n        self.metric = self.total\/self.batch_count","8e6f72f8":"BATCH_SIZE = 2048","f7b33c9c":"def get_data_learner(train_df, train_features, valid_idx, \n                     lr=0.02, epochs=1, layers=[256], ps=[0.2], name='learner'):\n    data = TabularDataBunch.from_df(path='.', df=train_df, \n                                    dep_var='target', \n                                    valid_idx=valid_idx, \n                                    cat_names=[], \n                                    cont_names=train_features, \n                                    bs=BATCH_SIZE,\n                                    procs=[Normalize],\n                                    test_df=test_df)\n    learner = tabular_learner(data, layers=layers, ps=ps, metrics=[accuracy, roc()], use_bn=True)\n    return learner, data","40719e5c":"learner, data = get_data_learner(df, features + augmented_features, valid_idx)","30fd90d5":"learner.fit_one_cycle(1, 1e-2)","5e5c01b7":"learner.lr_find()\nlearner.recorder.plot()","fe2385e1":"learner.fit_one_cycle(3, 1e-3)","ed35652c":"learner.lr_find()\nlearner.recorder.plot()","615ba9c4":"learner.fit_one_cycle(5, 1e-5)","ee7b7920":"learner.lr_find()\nlearner.recorder.plot()","1528f8b4":"learner.fit_one_cycle(1, 1e-5)","a0c8c112":"learner.lr_find()\nlearner.recorder.plot()","c5b5f77f":"learner.fit_one_cycle(1, 1e-6)","4d3a3ca4":"# roc_auc_score on validation set\nvalid_predictions = np.squeeze(to_np(learner.get_preds()[0]))[:, 1]\naverage_valid_predicts = valid_predictions\nvalid_auc_score = roc_auc_score(df.iloc[valid_idx].target, average_valid_predicts); valid_auc_score","b846f692":"from sklearn.metrics import roc_curve\n\nfpr, tpr, _ = roc_curve(y_true=df.iloc[valid_idx].target,y_score=average_valid_predicts)\nplt.figure(figsize=(9,9))\nplt.plot(fpr, tpr)\nplt.show()","0d3d831a":"predictions = np.squeeze(to_np(learner.get_preds(DatasetType.Test)[0]))[:,1]\ntest_df['target'] = predictions","e992f3e9":"test_df[['target']].to_csv(f'submission_fastai.csv')","6f299a6c":"test_df[['target']].head()","77eef6c1":"## Data Load and Exploration","adc86348":"Split training data into train and validation sets","a86c1eaa":"## Test and Submit","5884080f":"## FastAI Tabular Learner\nWe start off with the default learner from FastAI","ffb51e11":"Some more features","8fe5fbfe":"### visualize validation roc"}}