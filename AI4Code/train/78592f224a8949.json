{"cell_type":{"197cf553":"code","b3f713b0":"code","477c48a0":"code","516c706a":"code","f3edc97c":"code","e5b8505c":"code","58eb7a5d":"code","b367787f":"code","4fbbc1eb":"code","b699f949":"code","ccf0d385":"code","d4d778f6":"markdown","42a73cd0":"markdown","84b1945d":"markdown","917659c4":"markdown","2e9b09dc":"markdown","fc9456dd":"markdown","eae57083":"markdown","982c7a0a":"markdown","3ba3f252":"markdown","8289ec4c":"markdown","7bcf677b":"markdown"},"source":{"197cf553":"# Basic\nimport pandas as pd\n\n# Sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import linear_model\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\n# Plot and Graphs\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport json","b3f713b0":"df_original = pd.read_csv('..\/input\/predict-test-scores-of-students\/test_scores.csv')\ndf_original.head()","477c48a0":"df_adjusted = df_original.copy()","516c706a":"df_train, df_test = train_test_split(df_adjusted, test_size=0.2)\n\ndf_train1 = df_train.copy()\ndf_test1 = df_test.copy()","f3edc97c":"textColumns = ['school','school_setting','school_type','classroom','teaching_method','gender','lunch']\nmapping = {}\n\nfor col in textColumns:\n  distinctValues = json.loads(df_train1.groupby(col)['posttest'].mean().to_json())\n\n  df_train1[col] = df_train1[col].map(distinctValues)\n  df_test1[col] = df_test1[col].map(distinctValues)\n  mapping[col]=distinctValues\n\nprint(mapping)","e5b8505c":"df_train1.head()","58eb7a5d":"sns.barplot(x=\"school\", y=\"posttest\", data=df_train1)","b367787f":"dfX = df_train1[['school','school_setting','school_type','classroom','teaching_method','n_student','gender','lunch','pretest']]\ndfy = df_train1.loc[:,'posttest':'posttest'].copy()\n\ndfX.head()","4fbbc1eb":"regr = linear_model.LinearRegression()\nregr.fit(dfX, dfy)","b699f949":"dfK = df_test1[['school','school_setting','school_type','classroom','teaching_method','n_student','gender','lunch','pretest']]\ndfl = df_test1.loc[:,'posttest':'posttest'].copy()\n\nprint(\"Accurace: %.2f\"%(regr.score(dfK,dfl)*100))\nprint(\"Coefficients: \")\nregr.coef_","ccf0d385":"predicted_values = regr.predict(dfK)\n\ndfp = pd.DataFrame(data=predicted_values, index=dfl.index, columns=['predicted'])\n\nmydf = pd.concat([dfl, dfp], axis=1).sort_values(by=['posttest'])\n\nplt.plot(mydf['posttest'], mydf['predicted'], label = 'Predicted');\nplt.plot(mydf['posttest'], mydf['posttest'], label = 'Reference');\nplt.xlabel('Score')\nplt.ylabel('Score')\nplt.title('Visual error of predict data')\nplt.legend()","d4d778f6":"## Teste do modelo\nSeparar o DF de teste, nos DF de dados e resultado.","42a73cd0":"# Prepara\u00e7\u00e3o dos Dados","84b1945d":"Normalizar as colunas n\u00e3o num\u00e9ricas que ser\u00e3o relevantes no processo de identifica\u00e7\u00e3o de padr\u00f5es. Para isso ser\u00e1 utilizado o valor m\u00e9dio do posttest por cada uma das categorias (Valores distintos das colunas de texto). Por quest\u00f5es de teste, usaremos somente os dados do DF de treino e usaremos esta mesma m\u00e9trica para o DF de teste (o modelo s\u00f3 se baseia em dados de treino).","917659c4":"# Load Data","2e9b09dc":"Copiar o modelo inicial para n\u00e3o perde-lo.","fc9456dd":"Exibir Valores que foram preditos.","eae57083":"## Treinamento\nSeparar o DF de treino, nos DF de dados e resultado (Aproveitar e remover a coluna de id do aluno, pois n\u00e3o \u00e9 mais necess\u00e1ria).","982c7a0a":"# Regress\u00e3o Linear","3ba3f252":"# Import of Librarys","8289ec4c":"Iniciar o treino do modelo usando regress\u00e3o linear.","7bcf677b":"Dividir a base de dados, disponibilizando uma base para treinamento do modelo estat\u00edstico e outra base de dados para confer\u00eancia do modelo treinado."}}