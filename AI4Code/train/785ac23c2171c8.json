{"cell_type":{"02f1d607":"code","22dff851":"code","40ba5a2a":"code","d9609046":"code","de2a6d89":"code","49c8a334":"code","567dc1fd":"code","c3b3953d":"code","0a1deaf8":"code","0a679614":"code","bbe7cea8":"code","6903fae3":"code","a2450841":"code","fcf59bce":"code","8b30402d":"code","fe21237a":"code","73a80871":"code","3da14c96":"code","cef8f5ed":"code","25f2d4b0":"code","de526db6":"code","ec2f80f1":"code","55c9f840":"code","ce103633":"code","c8a324af":"code","c257a7ad":"code","15be9e86":"code","ced819d0":"code","7a3300a0":"code","d93182ce":"code","6b91a492":"code","bd3370d8":"code","143fc444":"code","91829c58":"code","da3e92a0":"code","7e0f0d85":"code","799751b9":"code","01eae1c0":"code","5e979fd3":"code","f23149f2":"code","5e1e6bad":"code","00f4b1ae":"markdown","76131034":"markdown","c38a2e6d":"markdown","4690dbd9":"markdown","692dd135":"markdown","5f15ca7a":"markdown","a435d450":"markdown","e0ea05c1":"markdown"},"source":{"02f1d607":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","22dff851":"df = pd.read_csv('\/kaggle\/input\/delhi-house-price-prediction\/MagicBricks.csv')","40ba5a2a":"df.head()","d9609046":"df.isnull().sum()","de2a6d89":"import seaborn as sns\nsns.heatmap(df.isnull())","49c8a334":"df.head(50)","567dc1fd":"df.shape","c3b3953d":"df = df[df.loc[:]!=0].dropna()\ndf.isnull().any(axis=0)","0a1deaf8":"df.shape","0a679614":"import seaborn as sns\nsns.heatmap(df.isnull())","bbe7cea8":"sns.heatmap(df.corr())","6903fae3":"#list of numerical values\nnumerical_features = [feature for feature in df.columns if df[feature].dtypes != 'O']\n\nprint('number of numerical variables', len(numerical_features))\nprint('total features ',len(df.columns))\n\ndf[numerical_features].head()","a2450841":"import numpy as np\nimport matplotlib.pyplot as plt\n","fcf59bce":"plt.scatter(df['Area'],df['Price'])\nplt.xlabel('Area')\nplt.ylabel('Price')","8b30402d":"plt.scatter(df['Per_Sqft'],df['Price'])","fe21237a":"df['Area'].hist(bins=25)","73a80871":"df['Per_Sqft'].hist(bins=25)","3da14c96":"df['Area'] = np.log(df['Area'])\ndf['Per_Sqft'] = np.log(df['Per_Sqft'])","cef8f5ed":"df['Area'].hist(bins=25)","25f2d4b0":"df['Per_Sqft'].hist(bins=25)","de526db6":"data = df.copy()\ndata.groupby(df['BHK'])['Price'].median().plot.bar()\nplt.xlabel('BHK')\nplt.ylabel(' price(in  tenlakhs)')\n","ec2f80f1":"data = df.copy()\ndata.groupby(df['Bathroom'])['Price'].median().plot.bar()\nplt.xlabel('Number of Bathroms')\nplt.ylabel(' price(in ten lakhs)')","55c9f840":"data = df.copy()\ndata.groupby(df['Parking'])['Price'].median().plot.bar()\nplt.xlabel('Number of Parking')\nplt.ylabel(' price(in ten lakhs)')","ce103633":"categorical_features = [feature for feature in df.columns if df[feature].dtypes=='O']","c8a324af":"df[categorical_features].head()","c257a7ad":"df['Furnishing'].value_counts()","15be9e86":"df['Status'].value_counts()","ced819d0":"df['Transaction'].value_counts()","7a3300a0":"df['Type'].value_counts()","d93182ce":"df['Locality'].value_counts()","6b91a492":"df = df.drop('Locality',axis = 1)","bd3370d8":"df.head()","143fc444":"df = pd.get_dummies(df)","91829c58":"df.head()","da3e92a0":"x = df[['Area', 'BHK', 'Bathroom', 'Parking', 'Per_Sqft',\n       'Furnishing_Furnished', 'Furnishing_Semi-Furnished',\n       'Furnishing_Unfurnished', 'Status_Almost_ready', 'Status_Ready_to_move',\n       'Transaction_New_Property', 'Transaction_Resale', 'Type_Apartment',\n       'Type_Builder_Floor']]\ny = df['Price']","7e0f0d85":"from sklearn.model_selection import train_test_split\nx_train , x_test , y_train ,y_test = train_test_split(x,y,test_size = 0.2,random_state=101)","799751b9":"from sklearn.linear_model import LinearRegression\nlinear = LinearRegression()\nlinear.fit(x_train,y_train)\nprint(linear.score(x_test,y_test))","01eae1c0":"from sklearn.tree import DecisionTreeRegressor\ntree = DecisionTreeRegressor()\ntree.fit(x_train,y_train)\nprint(tree.score(x_test,y_test))","5e979fd3":"from sklearn.ensemble import RandomForestRegressor\nforest = RandomForestRegressor()\nforest.fit(x_train,y_train)\nprint(forest.score(x_test,y_test))","f23149f2":"from sklearn.ensemble import GradientBoostingRegressor\ngrad = GradientBoostingRegressor()\ngrad.fit(x_train,y_train)\nprint(grad.score(x_test,y_test))","5e1e6bad":"import xgboost\nfrom xgboost import XGBRegressor\nxboost = XGBRegressor()\nxboost.fit(x_train,y_train)\nprint(xboost.score(x_test,y_test))","00f4b1ae":"# EDA","76131034":"LINEAR REGRESSION","c38a2e6d":"# MODEL","4690dbd9":"# DISCRETE FEATURES","692dd135":"# NUMERICAL FEATURES","5f15ca7a":"how continous features are distributed","a435d450":"both are not uniformly distributed so we would convert into a lograthmic scale to convert into Gaussian scale","e0ea05c1":"# FEATURE ENGINEERING"}}