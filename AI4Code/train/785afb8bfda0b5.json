{"cell_type":{"3c349f4e":"code","2441121e":"code","0be11d79":"code","b6afc961":"code","9f2fb80f":"code","d494e228":"code","0253b9a5":"code","ba73c8a3":"code","60beebd9":"code","4a78f101":"code","41b9e396":"code","1cad26bb":"code","00de7083":"code","0edafecd":"code","1a34f827":"code","9405dcd6":"code","bb999fcd":"code","2c17aa3b":"code","03b48628":"code","3718345f":"code","27816a65":"markdown","260d66a9":"markdown"},"source":{"3c349f4e":"!pip uninstall -y kaggle\n!pip install --upgrade pip\n!pip install kaggle==1.5.6\n\nfrom google.colab import files\nfiles.upload()","2441121e":"!mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\/\n!ls -lha kaggle.json\n\n!chmod 600 ~\/.kaggle\/kaggle.json\n!ls -lha kaggle.json","0be11d79":"!kaggle competitions download -c projectmosquito","b6afc961":"!unzip projectmosquito.zip","9f2fb80f":"import torch\nimport torchvision.datasets as data\nimport torchvision.transforms as transforms\nimport random\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn import preprocessing\nScaler = preprocessing.StandardScaler()","d494e228":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(777)\ntorch.manual_seed(777)\nif device == 'cuda':\n  torch.cuda.manual_seed_all(777)","0253b9a5":"train_data=pd.read_csv('train.csv')\ntrain_data","ba73c8a3":"test_data=pd.read_csv('test.csv')\ntest_data","60beebd9":"train_data[\"year\"]=train_data[\"year\"]%10000\/100\ntest_data[\"year\"]=test_data[\"year\"]%10000\/100\n\nx_train_data = train_data.loc[:,[i for i in train_data.keys()[:-1]]]\ny_train_data = train_data[train_data.keys()[-1]]\n\nx_train_data=np.array(x_train_data)\ny_train_data=np.array(y_train_data)\nx_train_data = Scaler.fit_transform(x_train_data)\n\nx_train_data=torch.FloatTensor(x_train_data)\ny_train_data=torch.FloatTensor(y_train_data)","4a78f101":"train_dataset = torch.utils.data.TensorDataset(x_train_data, y_train_data)","41b9e396":"# \ud559\uc2b5 \ud30c\ub77c\ubbf8\ud130 \uc124\uc815\nlearning_rate = 0.005\ntraining_epochs = 100\nbatch_size = 1","1cad26bb":"data_loader = torch.utils.data.DataLoader(dataset=train_dataset,\n                                          batch_size=batch_size,\n                                          shuffle=True,\n                                          drop_last=True)","00de7083":"linear1 = torch.nn.Linear(4,128,bias=True)\nlinear2 = torch.nn.Linear(128,128,bias=True)\nlinear7 = torch.nn.Linear(128,1,bias=True)\nrelu = torch.nn.ReLU()\n\ntorch.nn.init.xavier_uniform_(linear1.weight)\ntorch.nn.init.xavier_uniform_(linear2.weight)\ntorch.nn.init.kaiming_uniform_(linear7.weight)\n\nmodel = torch.nn.Sequential(linear1,relu,\n                            linear2,relu, \n                            linear7).to(device)\n","0edafecd":"loss = torch.nn.MSELoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate) ","1a34f827":"total_batch = len(data_loader)\n\nfor epoch in range(training_epochs+1):\n    avg_cost = 0\n\n    for X, Y in data_loader:\n\n        X = X.to(device)\n        Y = Y.to(device)\n\n        optimizer.zero_grad()\n        hypothesis = model(X)\n\n        cost = loss(hypothesis, Y)\n        cost.backward()\n        optimizer.step()\n\n        avg_cost += cost \/ total_batch\n\n    if epoch%10==0:\n      print('Epoch:', '%04d' % (epoch), 'cost =', '{:.9f}'.format(avg_cost))\n\nprint('Learning finished')","9405dcd6":"# Test the model using test sets\nwith torch.no_grad():\n  model.eval()\n\n  x_test_data=test_data.loc[:,[i for i in test_data.keys()[:]]]\n  x_test_data=np.array(x_test_data)\n  x_test_data = Scaler.transform(x_test_data)\n  x_test_data=torch.from_numpy(x_test_data).float().to(device)\n\n  prediction = model(x_test_data)","bb999fcd":"correct_prediction = prediction.cpu().numpy().reshape(-1,1)","2c17aa3b":"submit=pd.read_csv('submit_sample.csv')\nsubmit","03b48628":"for i in range(len(correct_prediction)):\n  submit['Expected'][i]=correct_prediction[i].item()\n\nsubmit","3718345f":"submit.to_csv('18011762.csv',index=False,header=True)\n\n! kaggle competitions submit -c projectmosquito -f 18011762.csv -m \"18011762\"","27816a65":"# \ubaa8\ub378 \uc124\uacc4 \ubc29\uc2dd\n1. DNN\n2. layer, ReLU -> layer 3\uac1c\n3. xavier\ub85c \ucd08\uae30\ud654","260d66a9":"# \uae30\uc874 1\ub4f1 \ucf54\ub4dc\uc640\uc758 \ucc28\uc774\uc810\n1. learning rate: 1e-3 \uc5d0\uc11c 0.005 \ub85c \ubc14\uafc8.\n2. epochs:  80 \uc5d0\uc11c 100 \uc73c\ub85c \ubc14\uafc8.\n3. layer: 2\uac1c \uc5d0\uc11c 3\uac1c \ub85c \ubc14\uafc8.\n4. init: kaiming \uc5d0\uc11c xavier \ub85c \ubc14\uafc8."}}