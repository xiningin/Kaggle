{"cell_type":{"bac5000f":"code","d34c0ca8":"code","42b9de2e":"code","1febd44d":"code","70c124fe":"code","d95ddceb":"code","8d7876b4":"code","c0b01bf9":"code","85d9b5be":"code","a0fedd9e":"code","4097119a":"code","876a95ce":"code","d9a90a80":"code","010a4e4e":"code","76768dbb":"code","cde477f9":"code","9e4e9a74":"code","c4310205":"code","cf569b05":"code","e185dd87":"code","16674947":"code","d80cc1eb":"code","6a2f5ff4":"code","064e2e24":"code","12d6b25b":"code","cce0efbc":"code","d4fa67cc":"code","43bae651":"code","60409d40":"code","385cd7bb":"code","8390cb2f":"code","3b342759":"code","db76f13c":"code","0a2768c2":"code","8aca312d":"code","35a04bef":"code","ecdc4ab7":"code","a3898dd0":"code","ed6c22cc":"code","4e69a5b1":"code","fb601ded":"code","771082ee":"code","a32d9080":"code","3c9435f9":"code","a365ec61":"code","9d3e9a66":"code","e1542f39":"code","d36917ad":"code","38a69543":"code","321e8a96":"code","c1f34596":"code","1191ca3a":"code","711d1865":"code","ff45d936":"code","12978b7b":"code","56665899":"code","77613332":"code","176d0dc2":"code","56d428c4":"code","e1bd341c":"code","6581aab6":"code","7d5a6544":"code","7334d795":"code","9ec26ead":"code","76dc50ab":"code","b11b7f23":"code","5c7b9078":"code","1b5b04bc":"code","537aad63":"code","d45ad244":"code","29178a6c":"code","bbd91cb7":"code","8eec1b66":"code","7699822d":"code","68d52cde":"code","bb7ae62a":"code","134ba8e6":"code","8eb5811b":"code","4a0d31c9":"code","7fba42b9":"code","e00dcff6":"code","cfc33a13":"code","20adc7ec":"code","f21fdf1a":"code","8567eb18":"code","15fe6476":"code","56c35863":"code","e890939a":"code","56aa4a8e":"code","90c69655":"code","0890334b":"code","802290d6":"code","becd3b38":"code","8d138a3c":"code","9a897546":"code","4b818285":"code","0e865309":"code","2fcf1faf":"code","e77b4d55":"code","43f1506c":"code","71c2ac46":"code","804d17fb":"code","3b61e101":"code","7c6b7374":"code","48157802":"code","2f3f8b37":"code","b8ae200d":"code","12be6b95":"code","1be2ea02":"code","6d32bbad":"code","040494e7":"code","26e2b1c7":"code","04a6a953":"code","76b58be0":"code","59f869f9":"code","7b34008b":"code","79b5db28":"code","52b6b5f2":"code","4e709fa6":"code","933f531b":"code","efc09a61":"code","86c86bbb":"markdown","7b91e46a":"markdown","095171c2":"markdown","f9b162cf":"markdown","0c830405":"markdown","6596b906":"markdown","d41a29dd":"markdown","2bc966d5":"markdown","533bc8b4":"markdown","e5a75541":"markdown","ec217467":"markdown","de45ca68":"markdown","41ef1f2b":"markdown","961abb30":"markdown","d3c13fc8":"markdown","fad4d15b":"markdown","11561082":"markdown","080b10a6":"markdown","853372b5":"markdown","098c4bcb":"markdown","85ed44db":"markdown","02da1561":"markdown","92283d64":"markdown","dbb5543c":"markdown","5df59d55":"markdown","3f2af201":"markdown","79fa3565":"markdown","1de34fdd":"markdown","16f951db":"markdown","f6fef146":"markdown","ca505ae0":"markdown","1012460f":"markdown","f9d271d8":"markdown","97d8b45d":"markdown","d8f973b9":"markdown","bd77b7ba":"markdown","9f7760bb":"markdown","3a4f6d56":"markdown","fa666e57":"markdown","6a7d1d00":"markdown","011bdcbf":"markdown","5129b912":"markdown","e4b9ccbb":"markdown","2e0a164f":"markdown","df396a9e":"markdown","a054d651":"markdown","1a9c8e42":"markdown","665b8a1e":"markdown","0252f3c6":"markdown","f269ef47":"markdown","36e5def6":"markdown","d706e961":"markdown","3bb45257":"markdown","73fc59c6":"markdown","f99dde35":"markdown","7577c8df":"markdown","7f7f99f7":"markdown","087c11bb":"markdown","afbb8490":"markdown","1992241d":"markdown"},"source":{"bac5000f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport datetime as datetime\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n%matplotlib inline","d34c0ca8":"solar01 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv')\nsensor01 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv')\nsolar02 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv')\nsensor02 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv')","42b9de2e":"solar01.head()","1febd44d":"solar02.head()","70c124fe":"print(\"Solar Generation Plant 1's info\")\nsolar01.info()\nprint('\\n')\nprint(\"Solar Generation Plant 2's info\")\nsolar02.info()","d95ddceb":"print('Plant 1')\nsolar01.isnull().sum()","8d7876b4":"print('Plant 2')\nsolar02.isnull().sum()","c0b01bf9":"print ('Plant 1 has '+ str(solar01['SOURCE_KEY'].nunique()) + ' inverters')\nprint ('Plant 2 has '+ str(solar02['SOURCE_KEY'].nunique()) + ' inverters')","85d9b5be":"print('Plant 1')\nsolar01.groupby('SOURCE_KEY').count()","a0fedd9e":"print('Plant 2')\nsolar02.groupby('SOURCE_KEY').count()","4097119a":"sensor01.head()","876a95ce":"sensor02.head()","d9a90a80":"print(\"Sensor 1's info\")\nsensor01.info()\nprint('\\n')\nprint(\"Sensor 2's info\")\nsensor02.info()","010a4e4e":"print('Sensor 1 has '+str(sensor01['SOURCE_KEY'].nunique())+' source key')\nprint('Sensor 2 has '+str(sensor02['SOURCE_KEY'].nunique())+' source key')","76768dbb":"print('Sensor 1')\nsensor01.isnull().sum()","cde477f9":"print('Sensor 2')\nsensor01.isnull().sum()","9e4e9a74":"print('Sensor 1')\nsensor01.count()","c4310205":"print('Sensor 2')\nsensor02.count()","cf569b05":"print('the total should be '+ str(34*24*4)+' rows')","e185dd87":"solar01.columns = solar01.columns.str.lower()\nsolar02.columns = solar02.columns.str.lower()\nsolar01.drop('plant_id', axis=1, inplace=True)\nsolar02.drop('plant_id', axis=1, inplace=True)","16674947":"solar01['date_time'] = pd.to_datetime(solar01['date_time'],format ='%d-%m-%Y %H:%M')\nsolar02['date_time'] = pd.to_datetime(solar02['date_time'],format ='%Y-%m-%d %H:%M:%S')\nsolar01['date'] = solar01['date_time'].dt.date\nsolar01['time'] = solar01['date_time'].dt.time\nsolar02['date'] = solar02['date_time'].dt.date\nsolar02['time'] = solar02['date_time'].dt.time","d80cc1eb":"solar01_inverter_id = solar01['source_key'].unique()\nsolar02_inverter_id = solar02['source_key'].unique()\nsolar01['source_key'] = solar01['source_key'].apply(lambda x :  int(np.where(solar01_inverter_id == x)[0]))\nsolar02['source_key'] = solar02['source_key'].apply(lambda x :  int(np.where(solar02_inverter_id == x)[0]))","6a2f5ff4":"solar01.head()","064e2e24":"solar02.head()","12d6b25b":"solar01[(solar01['source_key']==0) & (solar01['date_time'].between('2020-05-15','2020-05-21'))]","cce0efbc":"data = solar01[(solar01['source_key']==0) & (solar01['date_time'].between('2020-05-15','2020-05-21'))]\ndata['time'] = data['time'].astype(str)\ng = sns.relplot(\n        data=data,\n        x='time',\n        y='dc_power',\n        row='date',\n        kind='line',\n        height=2,\n        aspect=6)\n\ng.set(xlim=('00:00:00', '23:45:00'), xticks=['00:00:00','06:00:00','12:00:00','18:00:00','23:45:00'])","d4fa67cc":"data = solar01[(solar01['source_key']==0) & (solar01['date_time'].between('2020-05-15','2020-05-21'))]\ndata['time'] = data['time'].astype(str)\ng = sns.relplot(\n        data=data,\n        x='time',\n        y='dc_power',\n        row='date',\n        kind='scatter',\n        height=2,\n        aspect=6\n        )\n    \ng.set(xlim=('00:00:00', '23:45:00'), xticks=['00:00:00','06:00:00','12:00:00','18:00:00','23:45:00'])","43bae651":"data = solar01[(solar01['source_key']==0) & (solar01['date_time'].between('2020-05-15','2020-05-21'))]\ndata['time'] = data['time'].astype(str)\ng = sns.relplot(\n        data=data,\n        x='time',\n        y='daily_yield',\n        row='date',\n        kind='scatter',\n        height=2,\n        aspect=6\n        )\n\ng.set(xlim=('00:00:00', '23:45:00'), xticks=['00:00:00','06:00:00','12:00:00','18:00:00','23:45:00'])","60409d40":"data = solar01[(solar01['source_key']==0) & (solar01['date_time'].between('2020-05-15','2020-05-21'))]\ndata['date_time'] = data['date_time'].astype(str)\ng = sns.relplot(\n        data=data,\n        x='date_time',\n        y='total_yield',\n        kind='scatter',\n        height=6,\n        aspect=2\n        )\n\ng.set(xlim=('2020-05-15 00:00:00', '2020-05-21 00:00:00'), xticks=['2020-05-15 00:00:00','2020-05-17 00:00:00','2020-05-19 00:00:00','2020-05-21 00:00:00'])","385cd7bb":"fulltime = pd.date_range(start='2020-05-15 00:00',end='2020-06-17 23:45' , freq='15T')\nfulltime = pd.DataFrame({'date_time':fulltime})\nfulltime","8390cb2f":"solar01_inv_0 = solar01[solar01['source_key']==0].reset_index(drop=True)","3b342759":"solar01_inv_0 = pd.merge(fulltime, solar01_inv_0, how='outer')\nsolar01_inv_0","db76f13c":"solar01_inv_0.index = solar01_inv_0['date_time']\nsolar01_inv_0.drop('date_time', axis=1, inplace=True)","0a2768c2":"sns.heatmap(solar01_inv_0.isnull())","8aca312d":"solar01_inv_0['date'] = solar01_inv_0.index.date\nsolar01_inv_0['time'] = solar01_inv_0.index.time\nsolar01_inv_0['source_key'] = 0","35a04bef":"solar01_inv_0.isnull().sum()","ecdc4ab7":"early_morning = solar01_inv_0.between_time('00:00:00','05:45:00')\nafternoon     = solar01_inv_0.between_time('06:00:00','18:30:00')\nnight         = solar01_inv_0.between_time('18:45:00','23:45:00')","a3898dd0":"early_morning['dc_power'].fillna(value=0, inplace=True)\nearly_morning['ac_power'].fillna(value=0, inplace=True)\nearly_morning['daily_yield'].fillna(value =0, inplace=True)","ed6c22cc":"night['dc_power'].fillna(value=0, inplace=True)\nnight['ac_power'].fillna(value=0, inplace=True)\nnight['daily_yield'].fillna(method='ffill', inplace=True)","4e69a5b1":"solar01_inv_0 = pd.concat([early_morning,afternoon, night])\nsolar01_inv_0 = solar01_inv_0.sort_index()","fb601ded":"data = solar01_inv_0\ndata['time'] = data['time'].astype(str)\nsns.set(font_scale =1.5)\n\ng = sns.relplot(\n        data=data,\n        x='time',\n        y='dc_power',\n        col='date',\n        kind='scatter',\n        height=2,\n        aspect=3,\n        col_wrap=3\n        )\n\ng.set(xlim=('00:00:00', '23:45:00'), xticks=['00:00:00','06:00:00','12:00:00','18:00:00','23:45:00'])","771082ee":"data = solar01_inv_0\ndata['time'] = data['time'].astype(str)\nsns.set(font_scale =1.5)\n\ng = sns.relplot(\n        data=data,\n        x='time',\n        y='daily_yield',\n        col='date',\n        kind='scatter',\n        height=2,\n        aspect=3,\n        col_wrap=3\n        )\n\ng.set(xlim=('00:00:00', '23:45:00'), xticks=['00:00:00','06:00:00','12:00:00','18:00:00','23:45:00'])","a32d9080":"solar01_inv_0.isnull().sum()","3c9435f9":"solar01_inv_0[['ac_power','dc_power','daily_yield']] = solar01_inv_0[['ac_power','dc_power','daily_yield']].interpolate(method='time')","a365ec61":"data = solar01_inv_0\ndata['time'] = data['time'].astype(str)\nsns.set(font_scale =1.5)\n\ng = sns.relplot(\n        data=data,\n        x='time',\n        y='dc_power',\n        col='date',\n        kind='scatter',\n        height=2,\n        aspect=3,\n        col_wrap=3\n        )\n\ng.set(xlim=('00:00:00', '23:45:00'), xticks=['00:00:00','06:00:00','12:00:00','18:00:00','23:45:00'])","9d3e9a66":"data = solar01_inv_0\ndata['time'] = data['time'].astype(str)\nsns.set(font_scale =1.5)\n\ng = sns.relplot(\n        data=data,\n        x='time',\n        y='daily_yield',\n        col='date',\n        kind='scatter',\n        height=2,\n        aspect=3,\n        col_wrap=3\n        )\n\ng.set(xlim=('00:00:00', '23:45:00'), xticks=['00:00:00','06:00:00','12:00:00','18:00:00','23:45:00'])","e1542f39":"solar01_inv_0.isnull().sum()","d36917ad":"solar01_inv_0['total_yield'] = solar01_inv_0['total_yield'].interpolate(method='time')","38a69543":"data = solar01_inv_0\ndata.index = data.index.astype(str)\n\nf, ax =plt.subplots(figsize=(12,8))\nax = sns.lineplot(x=data.index, \n                  y='total_yield',\n                  data = data\n                 )\n\nax.set(xlim=('2020-05-15 00:00:00','2020-06-17 00:00:00'),xticks=['2020-05-15 00:00:00','2020-06-17 00:00:00'])","321e8a96":"solar01_inv_0.isnull().sum()","c1f34596":"solar01_inv = [0]*22\n\ndef data_filling(inverter_id):\n    #create dataframe based on inverter id.\n    solar01_inv[inverter_id] = solar01[solar01['source_key']==inverter_id].reset_index(drop=True)\n    \n    #add full timestamp to dataframe.\n    solar01_inv[inverter_id] = pd.merge(fulltime, solar01_inv[inverter_id], how='outer')\n    \n    #fill na with fix values.\n    solar01_inv[inverter_id]['date'] = solar01_inv[inverter_id]['date_time'].dt.date\n    solar01_inv[inverter_id]['time'] = solar01_inv[inverter_id]['date_time'].dt.time\n    solar01_inv[inverter_id]['source_key'] = inverter_id\n    \n    #convert column date time as index.\n    solar01_inv[inverter_id].index = solar01_inv[inverter_id]['date_time']\n    solar01_inv[inverter_id].drop('date_time', axis=1, inplace=True)\n    \n    #divide dateframe into 3 group.\n    early_morning = solar01_inv[inverter_id].between_time('00:00:00','05:45:00')\n    afternoon     = solar01_inv[inverter_id].between_time('06:00:00','18:30:00')\n    night         = solar01_inv[inverter_id].between_time('18:45:00','23:45:00')\n    \n    #fill na values on early_morning group with zero.\n    early_morning['dc_power'].fillna(value=0, inplace=True)\n    early_morning['ac_power'].fillna(value=0, inplace=True)\n    early_morning['daily_yield'].fillna(value =0, inplace=True)\n    \n    #fill na values on night group with zero and fflill method for daily_yield.\n    night['dc_power'].fillna(value=0, inplace=True)\n    night['ac_power'].fillna(value=0, inplace=True)\n    night['daily_yield'].fillna(method='ffill', inplace=True)\n    \n    #join them together again and sort index, so we get sorted timeline.\n    solar01_inv[inverter_id] = pd.concat([early_morning,afternoon, night])\n    solar01_inv[inverter_id] = solar01_inv[inverter_id].sort_index()\n    \n    #fill others na with interpolate function that use method time\n    solar01_inv[inverter_id]['dc_power'] = solar01_inv[inverter_id]['dc_power'].interpolate(method='time')\n    solar01_inv[inverter_id]['ac_power'] = solar01_inv[inverter_id]['ac_power'].interpolate(method='time')\n    solar01_inv[inverter_id]['daily_yield'] = solar01_inv[inverter_id]['daily_yield'].interpolate(method='time')\n    solar01_inv[inverter_id]['total_yield'] = solar01_inv[inverter_id]['total_yield'].interpolate(method='time')\n    \nfor i in range (22):\n    data_filling(i)","1191ca3a":"solar01 = pd.concat(solar01_inv)","711d1865":"solar02_inv = [0]*22\n\n\ndef data_filling(inverter_id):\n    #create dataframe based on inverter id.\n    solar02_inv[inverter_id] = solar02[solar02['source_key']==inverter_id].reset_index(drop=True)\n    \n    #add full timestamp to dataframe.\n    solar02_inv[inverter_id] = pd.merge(fulltime, solar02_inv[inverter_id], how='outer')\n    \n    #fill na with fix values.\n    solar02_inv[inverter_id]['date'] = solar02_inv[inverter_id]['date_time'].dt.date\n    solar02_inv[inverter_id]['time'] = solar02_inv[inverter_id]['date_time'].dt.time\n    solar02_inv[inverter_id]['source_key'] = inverter_id\n    \n    #convert column date time as index.\n    solar02_inv[inverter_id].index = solar02_inv[inverter_id]['date_time']\n    solar02_inv[inverter_id].drop('date_time', axis=1, inplace=True)\n    \n    #divide dateframe into 3 group.\n    early_morning = solar02_inv[inverter_id].between_time('00:00:00','05:45:00')\n    afternoon     = solar02_inv[inverter_id].between_time('06:00:00','18:30:00')\n    night         = solar02_inv[inverter_id].between_time('18:45:00','23:45:00')\n    \n    #fill na values on early_morning group with zero.\n    early_morning['dc_power'].fillna(value=0, inplace=True)\n    early_morning['ac_power'].fillna(value=0, inplace=True)\n    early_morning['daily_yield'].fillna(value =0, inplace=True)\n    \n    #fill na values on night group with zero and fflill method for daily_yield.\n    night['dc_power'].fillna(value=0, inplace=True)\n    night['ac_power'].fillna(value=0, inplace=True)\n    night['daily_yield'].fillna(method='ffill', inplace=True)\n    \n    #join them together again and sort index, so we get sorted timeline.\n    solar02_inv[inverter_id] = pd.concat([early_morning,afternoon, night])\n    solar02_inv[inverter_id] = solar02_inv[inverter_id].sort_index()\n    \n    #fill others na with interpolate function that use method time\n    solar02_inv[inverter_id]['dc_power'] = solar02_inv[inverter_id]['dc_power'].interpolate(method='time')\n    solar02_inv[inverter_id]['ac_power'] = solar02_inv[inverter_id]['ac_power'].interpolate(method='time')\n    solar02_inv[inverter_id]['daily_yield'] = solar02_inv[inverter_id]['daily_yield'].interpolate(method='time')\n    solar02_inv[inverter_id]['total_yield'] = solar02_inv[inverter_id]['total_yield'].interpolate(method='time')\n    \nfor i in range (22):\n    data_filling(i)","ff45d936":"solar02 = pd.concat(solar02_inv)","12978b7b":"sensor01.columns = sensor01.columns.str.lower()\nsensor02.columns = sensor02.columns.str.lower()\nsensor01.drop(['plant_id','source_key'], axis=1, inplace=True)\nsensor02.drop(['plant_id','source_key'], axis=1, inplace=True)","56665899":"sensor01['date_time'] = pd.to_datetime(sensor01['date_time'],format ='%Y-%m-%d %H:%M:%S')\nsensor02['date_time'] = pd.to_datetime(sensor02['date_time'],format ='%Y-%m-%d %H:%M:%S')\nsensor01['date'] = sensor01['date_time'].dt.date\nsensor01['time'] = sensor01['date_time'].dt.time\nsensor02['date'] = sensor02['date_time'].dt.date\nsensor02['time'] = sensor02['date_time'].dt.time","77613332":"sensor01.head()","176d0dc2":"sensor02.head()","56d428c4":"data = sensor01\ndata['time'] = data['time'].astype(str)\nsns.set(font_scale =1.5)\ng = sns.relplot(data=data,\n            x='time',\n            y='ambient_temperature',\n            col='date',\n            kind='scatter',\n            height=3,\n            aspect=3,\n            col_wrap=3\n               )\ng.set(xlim=('00:00:00', '23:45:00'), xticks=['00:00:00','06:00:00','12:00:00','18:00:00','23:45:00'])","e1bd341c":"data = sensor01\ndata['time'] = data['time'].astype(str)\nsns.set(font_scale =1.5)\ng = sns.relplot(data=data,\n            x='time',\n            y='module_temperature',\n            col='date',\n            kind='scatter',\n            height=3,\n            aspect=3,\n            col_wrap=3)\ng.set(xlim=('00:00:00', '23:45:00'), xticks=['00:00:00','06:00:00','12:00:00','18:00:00','23:45:00'])","6581aab6":"data = sensor01\ndata['time'] = data['time'].astype(str)\nsns.set(font_scale =1.5)\ng = sns.relplot(data=data,\n            x='time',\n            y='irradiation',\n            col='date',\n            kind='scatter',\n            height=3,\n            aspect=3,\n            col_wrap=3)\ng.set(xlim=('00:00:00', '23:45:00'), xticks=['00:00:00','06:00:00','12:00:00','18:00:00','23:45:00'])","7d5a6544":"sensor01 = pd.merge(fulltime, sensor01, how='outer')\nsensor02 = pd.merge(fulltime, sensor02, how='outer')\nsensor01.index = sensor01['date_time']\nsensor02.index = sensor02['date_time']","7334d795":"sns.heatmap(sensor01.isnull())","9ec26ead":"sensor01['date'] = sensor01.index.date\nsensor01['time'] = sensor01.index.time\nsensor02['date'] = sensor02.index.date\nsensor02['time'] = sensor02.index.time","76dc50ab":"sensor01[['ambient_temperature','module_temperature', 'irradiation']] = sensor01[['ambient_temperature','module_temperature', 'irradiation']].interpolate(method='time')\nsensor02[['ambient_temperature','module_temperature', 'irradiation']] = sensor02[['ambient_temperature','module_temperature', 'irradiation']].interpolate(method='time')","b11b7f23":"data = sensor01\ndata['time'] = data['time'].astype(str)\nsns.set(font_scale =1.5)\ng = sns.relplot(data=data,\n            x='time',\n            y='module_temperature',\n            col='date',\n            kind='scatter',\n            height=3,\n            aspect=3,\n            col_wrap=3)\ng.set(xlim=('00:00:00', '23:45:00'), xticks=['00:00:00','06:00:00','12:00:00','18:00:00','23:45:00'])","5c7b9078":"solar01_with_sensor01_inv= [0]*22\nsolar02_with_sensor02_inv= [0]*22\n\nfor i in range(22):\n    solar01_with_sensor01_inv[i] = pd.concat([solar01_inv[i],sensor01.drop(['date','time'], axis=1)], axis=1)\n    \n\nfor i in range(22):\n    solar02_with_sensor02_inv[i] = pd.concat([solar02_inv[i],sensor02.drop(['date','time'], axis=1)], axis=1)","1b5b04bc":"solar01_with_sensor01 = pd.concat(solar01_with_sensor01_inv)\nsolar02_with_sensor02 = pd.concat(solar02_with_sensor02_inv)","537aad63":"solar01_with_sensor01.head()","d45ad244":"solar02_with_sensor02.head()","29178a6c":"solar01_with_sensor01['plant_ID'] = '1'\nsolar02_with_sensor02['plant_ID'] = '2'","bbd91cb7":"full_data = pd.concat([solar01_with_sensor01, solar02_with_sensor02], ignore_index=True)","8eec1b66":"full_data","7699822d":"data1=solar01.groupby(['source_key']).sum().reset_index()\ndata1['source_key'] = data1['source_key'].apply(lambda x: solar01_inverter_id[x])\ndata2=solar02.groupby(['source_key']).sum().reset_index()\ndata2['source_key'] = data2['source_key'].apply(lambda x: solar02_inverter_id[x])\n\nspecs = [[{'type':'domain'}, {'type':'domain'}]]\nfig = make_subplots(rows=1, cols=2, specs=specs)\n\npull_factor = [0]*22\npull_factor[7] = 0.05\n\nfig.add_trace(go.Pie(labels='P1 '+ data1['source_key'], \n                     values=data1['dc_power'], \n                     name='Plant 1', \n                     title='Plant 1',\n                     titlefont=dict(\n                                     size=25\n                                   ),\n                     hovertemplate=\"%{label} <br \/>generates %{value:,.0f} kW\",\n                     marker_colors = px.colors.qualitative.Dark24,\n                     legendgroup = 'Plant 1',\n                    ), 1, 1)\n\nfig.add_trace(go.Pie(labels='P2 '+ data2['source_key'], \n                     values=data2['dc_power'], \n                     name='Plant 2', \n                     title='Plant 2',\n                     titlefont=dict(\n                                     size=25\n                                   ),\n                     hovertemplate=\"%{label} <br \/>generates %{value:,.0f} kW\",\n                     marker_colors = px.colors.qualitative.Light24,   \n                     legendgroup = 'Plant 2',\n                     pull =pull_factor,\n                    ), 1, 2)\n\nfig.update_traces(hole=.4)\n\nfig.update_layout(\n    title_text=\"DC Power Generation of each Inverter\"\n)\n\nfig.show()","68d52cde":"data=solar01.groupby(['source_key','date']).sum().reset_index()\ndata['source_key'] = data['source_key'].apply(lambda x: solar01_inverter_id[x])\n\nfig=px.bar( \n    data_frame = data,\n    x = data['date'],\n    y = data['dc_power'],\n    color = 'source_key',\n    color_discrete_sequence = px.colors.qualitative.Dark24,\n    hover_data = {'date':True,\n                  'source_key':True,\n                  'dc_power':':,.0f',\n                 },\n    opacity = 0.8,\n    labels={'date':'date',\n            'dc_power':'DC Power Generated (kW)',\n            'source_key':'Inverter ID'\n           },\n    title='DC Power Generated in Plant 1 based on date',\n    height = 650\n)\n\nfig.show()","bb7ae62a":"data=solar02.groupby(['source_key','date']).sum().reset_index()\ndata['source_key'] = data['source_key'].apply(lambda x: solar02_inverter_id[x])\n\nfig=px.bar( \n    data_frame = data,\n    x = data['date'],\n    y = data['dc_power'],\n    color = 'source_key',\n    color_discrete_sequence = px.colors.qualitative.Light24,\n    hover_data = {'date':True,\n                  'source_key':True,\n                  'dc_power':':,.0f',\n                 },\n    opacity = 0.8,\n    labels={'date':'date',\n            'dc_power':'DC Power Generated (kW)',\n            'source_key':'Inverter ID'},\n    title='DC Power Generated in Plant 2 based on date',\n    height = 650\n)\n\n\nfig.show()","134ba8e6":"data1=solar01.groupby(['source_key']).sum().reset_index()\ndata1['source_key'] = data1['source_key'].apply(lambda x: solar01_inverter_id[x])\ndata2=solar02.groupby(['source_key']).sum().reset_index()\ndata2['source_key'] = data2['source_key'].apply(lambda x: solar02_inverter_id[x])\n\nspecs = [[{'type':'domain'}, {'type':'domain'}]]\nfig = make_subplots(rows=1, cols=2, specs=specs)\n\npull_factor = [0]*22\npull_factor[7] = 0.05\n\nfig.add_trace(go.Pie(labels='P1 '+ data1['source_key'], \n                     values=data1['ac_power'], \n                     name='Plant 1', \n                     title='Plant 1',\n                     titlefont=dict(\n                                     size=25\n                                   ),\n                     hovertemplate=\"%{label} <br \/>generates %{value:,.0f} kW\",\n                     marker_colors = px.colors.qualitative.Dark24,\n                     legendgroup = 'Plant 1',\n                    ), 1, 1)\n\nfig.add_trace(go.Pie(labels='P2 '+ data2['source_key'], \n                     values=data2['ac_power'], \n                     name='Plant 2', \n                     title='Plant 2',\n                     titlefont=dict(\n                                     size=25\n                                   ),\n                     hovertemplate=\"%{label} <br \/>generates %{value:,.0f} kW\",\n                     marker_colors = px.colors.qualitative.Light24,   \n                     legendgroup = 'Plant 2',\n                     pull =pull_factor,\n                    ), 1, 2)\n\nfig.update_traces(hole=.4)\n\nfig.update_layout(\n    title_text=\"AC Power Generation of each Inverter\"\n)\n\n\nfig.show()","8eb5811b":"data=solar01.groupby(['source_key','date']).sum().reset_index()\ndata['source_key'] = data['source_key'].apply(lambda x: solar01_inverter_id[x])\n\nfig=px.bar( \n    data_frame = data,\n    x = data['date'],\n    y = data['ac_power'],\n    color = 'source_key',\n    color_discrete_sequence = px.colors.qualitative.Dark24,\n    hover_data = {'date':True,\n                  'source_key':True,\n                  'ac_power':':,.0f',\n                 },\n    opacity = 0.8,\n    labels={'date':'date',\n            'ac_power':'AC Power Generated (kW)',\n            'source_key':'Inverter ID'},\n    title='AC Power Generated in Plant 1 based on date',\n    height = 650\n)\n\n\nfig.show()","4a0d31c9":"data=solar02.groupby(['source_key','date']).sum().reset_index()\ndata['source_key'] = data['source_key'].apply(lambda x: solar02_inverter_id[x])\n\nfig=px.bar( \n    data_frame = data,\n    x = data['date'],\n    y = data['ac_power'],\n    color = 'source_key',\n    color_discrete_sequence = px.colors.qualitative.Light24,\n    hover_data = {'date':True,\n                  'source_key':True,\n                  'ac_power':':,.0f',\n                 },\n    opacity = 0.8,\n    labels={'date':'date',\n            'ac_power':'AC Power Generated (kW)',\n            'source_key':'Inverter ID'},\n    title='AC Power Generated in Plant 2 based on date',\n    height = 650\n)\n\n\nfig.show()","7fba42b9":"data1=solar01\ndata2=solar02\n\nfig = go.Figure()\n\nfig.add_trace(go.Scattergl(x=data1['time'], \n                         y=data1['dc_power'],\n                         mode='markers',\n                         marker=dict(\n                             size=4,\n                             color= data1['dc_power'],\n                             cauto=True,\n                             colorscale ='Oryel',\n                             opacity=0.3\n                         ),\n                         name='Plant 1 DC power'))\n\nfig.add_trace(go.Scatter(x=data1['time'], \n                         y=data1.groupby('time').mean()['dc_power'],\n                         mode='lines',\n                             line=dict(\n                             color='DarkGray',\n                             width=3\n                         ),\n                         name='Plant 1 Mean'))\n\nfig.add_trace(go.Scattergl(x=data2['time'], \n                         y=data2['dc_power'],\n                         mode='markers',\n                         marker=dict(\n                             size=4,\n                             color= data2['dc_power'],\n                             cauto=True,\n                             colorscale ='Blugrn',\n                             opacity=0.3\n                         ),\n                         name='Plant 2 DC power'))\n\nfig.add_trace(go.Scatter(x=data2['time'], \n                         y=data2.groupby('time').mean()['dc_power'],\n                         mode='lines',\n                             line=dict(\n                             color='DarkOliveGreen',\n                             width=3\n                         ),\n                         name='Plant 2 Mean'))\n\nfig.update_layout(title= 'DC Power Generation by time',\n                  height = 600)\nfig.show()","e00dcff6":"data1=solar01\ndata2=solar02\n\nfig = go.Figure()\n\nfig.add_trace(go.Scattergl(x=data1['time'], \n                         y=data1['ac_power'],\n                         mode='markers',\n                         marker=dict(\n                             size=4,\n                             color= data1['ac_power'],\n                             cauto=True,\n                             colorscale ='Oryel',\n                             opacity=0.3\n                         ),\n                         name='Plant 1 AC power'))\n\nfig.add_trace(go.Scatter(x=data1['time'], \n                         y=data1.groupby('time').mean()['ac_power'],\n                         mode='lines',\n                             line=dict(\n                             color='DarkGray',\n                             width=3\n                         ),\n                         name='Plant 1 Mean'))\n\nfig.add_trace(go.Scattergl(x=data2['time'], \n                         y=data2['ac_power'],\n                         mode='markers',\n                         marker=dict(\n                             size=4,\n                             color= data2['ac_power'],\n                             cauto=True,\n                             colorscale ='Blugrn',\n                             opacity=0.3\n                         ),\n                         name='Plant 2 AC power'))\n\nfig.add_trace(go.Scatter(x=data2['time'], \n                         y=data2.groupby('time').mean()['ac_power'],\n                         mode='lines',\n                             line=dict(\n                             color='DarkOliveGreen',\n                             width=3\n                         ),\n                         name='Plant 2 Mean'))\n\nfig.update_layout(title= 'AC Power Generation by time',\n                  height = 600)\nfig.show()","cfc33a13":"plt.figure(figsize=(10,8))\nsns.heatmap(solar01_with_sensor01.corr(), annot=True)","20adc7ec":"plt.figure(figsize=(10,8))\nsns.heatmap(solar02_with_sensor02.corr(), annot=True)","f21fdf1a":"data = full_data.groupby(['plant_ID','date','time']).mean().reset_index()\ndata = data.drop(['date','time'], axis=1)\nsns.relplot(data=data, \n            x=\"ambient_temperature\", \n            y=\"module_temperature\", \n            hue='irradiation',\n            size='irradiation',\n            sizes=(50,200),\n            palette='gist_heat',\n            height=12,\n            col='plant_ID'\n           )\n","8567eb18":"data = full_data.groupby(['plant_ID','date','time']).mean().reset_index()\ndata = data.drop(['date','time'], axis=1)\nsns.relplot(data=data, \n            x=\"irradiation\", \n            y=\"dc_power\", \n            hue='ac_power',\n            size='irradiation',\n            sizes=(50,200),\n            palette='gist_heat',\n            height=12,\n            col='plant_ID'\n           )","15fe6476":"sensor01","56c35863":"solar01_with_sensor01.drop('date_time', axis=1, inplace =True)","e890939a":"plant01 = solar01_with_sensor01.groupby('date_time').mean()[['dc_power','ambient_temperature','module_temperature','irradiation']]","56aa4a8e":"plant01","90c69655":"plant01.plot(subplots=True,figsize=(18,8))","0890334b":"import tensorflow as tf\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.preprocessing import sequence\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Bidirectional, LSTM, Dropout, Reshape\nfrom tensorflow.keras.callbacks import EarlyStopping","802290d6":"fft = tf.signal.rfft(plant01['dc_power'])\nf_per_dataset = np.arange(0, len(fft))\n\nn_samples_h = len(plant01['dc_power'])\nminutes_per_day = 4*24\nday_per_dataset = n_samples_h\/(minutes_per_day)\n\nf_per_year = f_per_dataset\/day_per_dataset\nplt.figure(figsize=(20,6))\nplt.step(f_per_year, np.abs(fft))\nplt.xscale('log')\nplt.ylim(0, 8000000)\nplt.xlim([0.1, max(plt.xlim())])\nplt.xticks([1,2,24,  4*24], labels=['1\/day', 'half day','1\/hour','1\/15min'])\n_ = plt.xlabel('Frequency (log scale)')","becd3b38":"plant01 = plant01.reset_index()","8d138a3c":"plant01.describe().transpose()","9a897546":"date_time = pd.to_datetime(plant01.pop('date_time'), format='%d.%m.%Y %H:%M:%S')\ntimestamp_s = date_time.map(datetime.datetime.timestamp)\ntimestamp_s","4b818285":"half_day = 12*60*60\nday = (2)*half_day\n\nplant01['half_day_sin'] = np.sin(timestamp_s * (2 * np.pi \/ half_day))\nplant01['half_day_cos'] = np.cos(timestamp_s * (2 * np.pi \/ half_day))\nplant01['day_sin'] = np.sin(timestamp_s * (2 * np.pi \/ day))\nplant01['day_cos'] = np.cos(timestamp_s * (2 * np.pi \/ day))","0e865309":"plt.plot(np.array(plant01['day_sin'])[:24*4])\nplt.plot(np.array(plant01['half_day_sin'])[:24*4])\nplt.xlabel('Time [15m]')\nplt.title('Time of day signal')","2fcf1faf":"num_features = plant01.shape[1]\nplant01","e77b4d55":"scaler = MinMaxScaler()\nx_df = scaler.fit_transform(plant01)\ny_df = plant01.values","43f1506c":"x_df[0:5]","71c2ac46":"y_df[0:5]","804d17fb":"def create_dataset(x_df, y_df, time_steps=1):\n    train_len = int(0.8*len(x_df))\n    val_len = int(0.2*len(x_df))\n    \n    #train data\n    x_train, y_train =[],[]\n    for i in range(train_len - (2*time_steps)):\n        value_in_x = x_df[i : (i + time_steps)]\n        x_train.append(value_in_x)\n        value_in_y = y_df[(i + time_steps) : (i + 2*time_steps)]\n        y_train.append(value_in_y)\n    \n    #val data  \n    x_val, y_val =[],[]\n    for i in range(val_len - (2*time_steps)):\n        value_in_x = x_df[(train_len - time_steps + i) : (train_len + i)]\n        x_val.append(value_in_x)\n        value_in_y = y_df[(train_len + i):(train_len + time_steps + i)]\n        y_val.append(value_in_y)\n        \n    #test data\n    x_pred =[]\n    value_in_x = x_df[(-time_steps):]\n    x_pred.append(value_in_x)\n    \n    return np.array(x_train), np.array(y_train), np.array(x_val), np.array(y_val), np.array(x_pred)","3b61e101":"TIME_STEPS = 4*24 #24 hours x 4 x 15mins\nx_train, y_train, x_val, y_val, x_pred = create_dataset(x_df, y_df, time_steps=TIME_STEPS)","7c6b7374":"print('x train : '+str(x_train.shape))\nprint('y train : '+str(y_train.shape))\nprint('x val   : '+str(x_val.shape))\nprint('y val   : '+str(y_val.shape))\nprint('x pred  : '+str(x_pred.shape))","48157802":"class FeedBack(tf.keras.Model):\n  def __init__(self, units, out_steps):\n    super().__init__()\n    self.out_steps = out_steps\n    self.units = units\n    self.lstm_cell = tf.keras.layers.LSTMCell(units)\n    # Also wrap the LSTMCell in an RNN to simplify the `warmup` method.\n    self.lstm_rnn = tf.keras.layers.RNN(self.lstm_cell, return_state=True)\n    self.dense = tf.keras.layers.Dense(num_features)","2f3f8b37":"feedback_model = FeedBack(units=96, out_steps=96)","b8ae200d":"def warmup(self, inputs):\n  # inputs.shape => (batch, time, features)\n  # x.shape => (batch, lstm_units)\n  x, *state = self.lstm_rnn(inputs)\n\n  # predictions.shape => (batch, features)\n  prediction = self.dense(x)\n  return prediction, state\n\nFeedBack.warmup = warmup","12be6b95":"def call(self, inputs, training=None):\n  # Use a TensorArray to capture dynamically unrolled outputs.\n  predictions = []\n  # Initialize the lstm state\n  prediction, state = self.warmup(inputs)\n\n  # Insert the first prediction\n  predictions.append(prediction)\n\n  # Run the rest of the prediction steps\n  for n in range(1, self.out_steps):\n    # Use the last prediction as input.\n    x = prediction\n    # Execute one lstm step.\n    x, state = self.lstm_cell(x, states=state,\n                              training=training)\n    # Convert the lstm output to a prediction.\n    prediction = self.dense(x)\n    # Add the prediction to the output\n    predictions.append(prediction)\n\n  # predictions.shape => (time, batch, features)\n  predictions = tf.stack(predictions)\n  # predictions.shape => (batch, time, features)\n  predictions = tf.transpose(predictions, [1, 0, 2])\n  return predictions\n\nFeedBack.call = call","1be2ea02":"model = Sequential()\nmodel.add(\n    LSTM(\n        units=32,\n        #input_shape=(X_train.shape[1], X_train.shape[2]),\n        return_sequences=False,\n    )\n)\n\nmodel.add(Dropout(rate=0.2))\nmodel.add(Dense(TIME_STEPS*num_features, kernel_initializer=tf.initializers.zeros))\nmodel.add(Reshape([TIME_STEPS, num_features]))\n#model.add(Dense(units=8))","6d32bbad":"model.compile(loss='mean_squared_error', optimizer ='adam')","040494e7":"early_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=20)","26e2b1c7":"history = model.fit(\n    x_train, y_train,\n    verbose=2,\n    epochs=4000,\n    batch_size = 32,\n    validation_data=(x_val,y_val),\n    shuffle=False,\n    callbacks=[early_stop]\n)","04a6a953":"y_pred = model.predict(x_pred)","76b58be0":"scaler.inverse_transform(y_pred)","59f869f9":"y_pred.shape","7b34008b":"y_pred[0][:,0].shape","79b5db28":"y_df","52b6b5f2":"y_df[-96:,0].shape","4e709fa6":"plt.figure(figsize=(16,8))\n\nplt.plot(y_pred[0][:,0], marker='.', color='blue')\nplt.plot(y_df[-96:,0], marker='.', color='red')","933f531b":"sensor02.head()","efc09a61":"data = full_data.groupby(['plant_ID','date','time']).mean().reset_index()\ndata = data.drop(['date','time'], axis=1)\nsns.relplot(data=data, \n            x=\"ambient_temperature\", \n            y=\"module_temperature\", \n            hue='irradiation',\n            size='irradiation',\n            sizes=(50,200),\n            palette='gist_heat',\n            height=12,\n            col='plant_ID'\n           )\n","86c86bbb":"but this time we just use interpolate func with time method to fill all missing data.","7b91e46a":"We can combine sensor data with solar generation data.","095171c2":"There is no missing data! Yes!\n<br>\nWait, we aren't done yet. This only 1 source key. We must do these step for another 21 source key.\n<br>\nRelax, I already made funct all these step, so we just call that func 21 times more.","f9b162cf":"For plant 2, on 2020-05-15 is the date to produce the most DC Power. (666.6 MW)","0c830405":"Remember our conclusion before?\n<br>\ndc_power, ac_power and daily_yield value is always 0 before 05:45.","6596b906":"Actually I make another dataframe that combine both of those dataframe as one.\n<br>\nWe call it full data.","d41a29dd":"So we have dc_power, ac_power, daily_yield and total_yield that contains missing value.\n<br>\nwe will divided this dataframe into 3 group:\n<br>\n  early_morning (data from 00:00:00 until 05:45:00)\n<br>\n  afternoon     (data from 06:00:00 until 18:30:00)\n<br>\n  night         (data from 18:45:00 until 23:45:00)","2bc966d5":"Now we try to fill data that source key is 0.","533bc8b4":"We join with variable fulltime and change index into datetime","e5a75541":"Next, Sensor data.<br>\nChange date_time format","ec217467":"Next is AC Power\n<br>\nAt Plant 1, each inverter contribute to AC power production equally. (901.1 MW)\n<br>\nBut at Plant 2, inverter Mx2yZCDsyf6DPfv is the one who contributes the most. (909.7 MW) ","de45ca68":"# Data Cleaning","41ef1f2b":"Change datetime format and create date and time column.","961abb30":"How many inverter in plant 1 and plant 2?","d3c13fc8":"Next, Let's see correlation among those varibles.\n<br>\nFirst, Plant 1.","fad4d15b":"# Visualization","11561082":"At plant 1, DC power can be generated almost 13.35 MW on 11:30\n<br>\nBut at plant 2, only 1.4 MW on 13:15","080b10a6":"At plant 1, DC power can be generated almost 1.30 MW on 11:30\n<br>\nAt plant 2, 1.3 MW on 13:15","853372b5":"As we can see from those sample, we can conclude 2 things.\n<br>\nFirst, from 00:00 to 05:45 dc_power always zero (0).\n<br>\nSecond, after 18:30 until midnight dc_power always zero (0) too.\n<br>\nthose condition also same with ac_power.\n<br>\nWe can use those to fill missing data, like on date 2020-05-16.","098c4bcb":"Also don't forget with data from plant 2\n<br>\nwe just copy paste those line of funtion change solar01 into solar02.","85ed44db":"Now we going to use date_time column as index","02da1561":"Replace temporary source key with simple value.\n<br>\nAlso keep them in variable.","92283d64":"And then merge them with variable fulltime","dbb5543c":"Check data for each inverter","5df59d55":"We still have dc_power, ac_power and daily_yield 's missing value.\n<br>\nI use interpolate function with time method. this function is guessing data by the time.\n<br>\nCheck plot at date 2020-05-20.","3f2af201":"Now we have:\n<br>\nsolar01 : all solar generation data in plant 1\n<br>\nsolar01 : all solar generation data in plant 2\n<br>\nsensor01 : all sensor data in plant 1\n<br>\nsensor02 : all sensor data in plant 1\n<br>\nsolar01_inv : solar generation data for each inverter in plant 1\n<br>\nsolar02_inv : solar generation data for each inverter in plant 2\n<br>\nfull_data : all solar generation and sensor data in both plant","79fa3565":"Now we have array of dataframe solar01_inv with index of array is source_key.\n<br>\nsolar01_inv[5] that means dataframe with source_key is 5\n<br>\nwe can join all them into 1 dataframe.","1de34fdd":"Check missing values","16f951db":"How many source key in sensor data?","f6fef146":"![](https:\/\/assets.newatlas.com\/dims4\/default\/9d6cc41\/2147483647\/strip\/true\/crop\/7360x4907+0+3\/resize\/1200x800!\/quality\/90\/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Farchive%2Fbacteria-powered-solar-cell-1.jpg)","ca505ae0":"> Import all data","1012460f":"For plant 1, on 2020-05-25 is the date to produce the most AC Power. (729.6 MW)","f9d271d8":"look at date 2020-05-26, because there are value 0(valid data) we can't fill it with last value on night.","97d8b45d":"As we can see DC power and irradiation has biggest correlation (0.97 on plant 1, 0.75).\nLet's plot how irradiation's value correlation with ambient and module temperature.","d8f973b9":"Check Plant 1 and Plant 2 generation data","bd77b7ba":"Based on graph.\n<br>\nEven ambient temperature is increasing, irradiation is not always increase.\n<br>\nfor module temperature, that's quite significant.","9f7760bb":"That's all. Thank you for looking my notebook.\n<br>\nNext, I will to predict.\n<br>\nIf you think this notebook is useful, please upvote.\n<br>\nand also you can commend too.\n<br>","3a4f6d56":"There is different format for DATE_TIME column and the type is object, not datetime64.\n<br>\nCheck missing values.","fa666e57":"after 18:45, dc_power and ac power also 0\n<br>\nfor daily_yield,i use method ffill that means fill na values with values before that row.","6a7d1d00":"Plant 2's correlation","011bdcbf":"First, let's investigate which inverter is most contribute to power production.","5129b912":"Check Sensor 1 and Sensor 2 data.","e4b9ccbb":"Fill missing value  in date and time by extracting from date_time index.\n<br>\nFill source key by 0, because we focus on source key=0 now.","2e0a164f":"now we see the result","df396a9e":"Next, We try to sampling data from source_key = 0 from 2020-05-15 until 2020-05-20 at plant 1.\n<br>\nFor learning something that can be useful to fill the missing data.","a054d651":"Task for solar data:<br>\n1. Change format of datetime column as datetime64 <br>\n2. Replace temporary source key with simple value <br>\n3. Complete the missing data. <br>\n<br>\nTask for sensor data:<br>\n1. Change format of datetime column as datetime64 <br>\n2. Complete the missing data.","1a9c8e42":"Now we are going to fill those missing data.\n<br>\nFirst we create datetime from 2020-05-15 to 2020-06-17 with freq 15mins.\n<br>\nThen we called it fulltime.","665b8a1e":"Let's plot  DC Power vs irradiation.","0252f3c6":"Plotting missing value.","f269ef47":"For plant 2, on 2020-05-15 is the date to produce the most DC Power. (651.4 MW)","36e5def6":"Next we investigate daily_yield. We also have 2 conclusion here.\n<br>\nFirst, from 00:00 until 05:45 daily_yield is zero (0).\n<br>\nSecond,after 18:30 until midnight daily_yield's value is the same as at 18.15.\n<br> \nthis makes sense, because without dc_power or ac_power daily_yield will not increase.\n<br>\nI saw a little mistake, sometimes at 00:00 daily_yield's value is not zero. We can fix them.","d706e961":"For plant 1, on 2020-05-25 is the date to produce the most DC Power. (7.4 GW)","3bb45257":"Wait a minute.\n<br>\nIf this is data for 34 days with freq : 15mins.\n<br>\nThat's should be 34days x 24hours x 4 = 3264 rows for each inverter.","73fc59c6":"As we can see, the more irradiation's value increases, DC Power will increase.\n<br>\nBut there are some data, DC Power is 0. \n<br>\nAlso Plant 1's DC Power production is better than Plant 2's ","f99dde35":"Check missing value","7577c8df":"Last, total yield. We also can use interpolate too.","7f7f99f7":"After we combine early morning, afternoon, and night.\n<br>\nwe can't fillna in afternoon, we have another trick for that.","087c11bb":"Seems nothing is missing.\n<br>\nBUt when we used scatterplot, we can see the missing data.","afbb8490":"# Quick Data Analysis","1992241d":"Based on 2 pie charts.\n<br>\nAt Plant 1, each inverter contribute to DC power production equally. (9,2 GW)\n<br>\nBut at Plant 2, inverter Mx2yZCDsyf6DPfv is the one who contributes the most. (930.5 MW) "}}