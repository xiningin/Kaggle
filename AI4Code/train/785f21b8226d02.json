{"cell_type":{"81bd49c8":"code","56b54785":"code","c338a32c":"code","3e26a784":"code","57caeaba":"code","f69a67a5":"code","48caabd5":"code","c7369f26":"code","10a6de3c":"code","2aeff9ae":"code","db9bef18":"code","98c966c8":"code","3cc96abc":"code","95714bf2":"code","1e13a2ff":"code","cb7532f1":"code","11169cf9":"code","6c6e17cf":"code","ea23a20d":"code","c154ffc1":"code","c1054491":"code","5cec8458":"code","610d7209":"code","fd2fde9a":"code","fa0d1c0e":"code","04c4b5db":"code","9bc90d69":"code","c7838f2e":"code","a0e3bcef":"code","628c31be":"code","b1dedfab":"code","07fd0ac0":"code","2286b367":"code","97217791":"code","a70f5622":"code","740cb30f":"code","c3e2085a":"code","37605655":"code","24dfd21f":"code","85556e13":"code","d52ef066":"code","e3808f52":"code","c010571f":"code","97a0f46e":"code","cab04791":"code","957e780f":"code","9aaf0e91":"code","cf0d5a30":"code","7640ddea":"code","28686d79":"code","d8edf945":"code","7a1413e9":"code","4e001fa9":"code","13ebd991":"code","f1aa278f":"code","93930c8e":"code","b0e16fbb":"code","740ebefb":"code","53c57abe":"code","ce0508a3":"code","ff8aec95":"code","33e08f48":"code","31438f6d":"code","08a0470c":"code","e8946ff0":"code","670f716f":"code","d432ae57":"code","700815a5":"code","e07baa97":"code","0d9b7d4b":"code","7f1188e8":"code","82cea5fa":"code","40d66919":"code","88f846c0":"code","52ba47e2":"code","f856283b":"code","54205fc8":"code","96125cbf":"code","0f950c74":"code","d295085c":"code","449e63c5":"code","a0ec5a66":"code","e9b1ff02":"code","8359121a":"code","f9cbe4ed":"code","4699d778":"code","f8576c63":"code","54d79a1a":"code","3cce172c":"code","4e7962c4":"code","114d05c3":"code","525455aa":"code","1d2318e4":"code","70cc0195":"code","31b94017":"code","419657ae":"code","58a0102b":"code","dcb14cd6":"code","e78d9c85":"code","264509b0":"code","3d08baed":"code","65535da8":"code","f1b78807":"code","9fc53715":"code","44b2802a":"code","31beab1a":"code","854548ec":"code","e8e08c62":"code","81d5ed7f":"code","3ee9d86d":"code","9f9a0535":"code","221678c6":"code","46e42fd3":"code","34584061":"code","289e6ffe":"code","27f45aa3":"code","59106278":"code","82deb594":"code","eb379988":"code","624c9e09":"code","141153c6":"code","d72a94d9":"code","2aa2e388":"code","8c2e9469":"code","6ce37ebe":"code","bfa3ea81":"code","dabaebbb":"code","06cbc2a1":"code","a62e9c4a":"code","6f374704":"code","4f6af925":"code","f119483c":"code","8001f024":"code","9a5eab0e":"code","73c1fd78":"code","3f6cf7ef":"code","dac90149":"code","f1747481":"code","03d5b648":"code","ff2c1f86":"code","97f66ac3":"code","1cf17204":"code","1ae2c5e8":"code","2cbc6432":"code","7b34dc21":"code","49f776b5":"code","cda03356":"code","4e181e59":"code","123ea480":"code","ef1a1988":"code","d6d81fe4":"code","2b9b2d82":"code","8adfe1db":"code","91442004":"code","f32d508e":"code","6c6310f9":"code","e5723a09":"code","7dba6107":"code","bdadd25e":"code","3e7dd487":"code","8e9bb2aa":"code","b94e23c0":"code","5d4aa30f":"code","9e53a339":"code","89218d8c":"code","3fbaa117":"code","c398086d":"code","fa20a9f7":"code","ef2dd6b6":"code","5eb99c06":"code","a72ea31b":"code","f18236ac":"code","a0091b56":"code","37111b20":"code","d25fe903":"code","21488c5b":"code","e9401f6d":"code","f60d4270":"code","6ef0f1d8":"code","5be06dd0":"code","9614b571":"code","7724939a":"code","15d2e056":"code","42c28b17":"code","340f30a3":"code","53fa2423":"code","3685871e":"code","b6ce33bc":"code","fe26c611":"code","dd1d1a3e":"code","6a27ea1c":"code","39c6deb3":"code","34c93e94":"code","bfd8f4c8":"code","2ea28c8e":"code","26ee61fd":"code","d13e9e29":"code","dde94f89":"code","e948fc81":"code","e7f76307":"code","fccd23fa":"code","6dd2b4a5":"code","4161b9fe":"code","833c4f60":"code","169028f0":"code","441dcbce":"code","94f01ae8":"code","9daf6769":"code","f4722b7b":"code","aeae92f9":"code","3cb0d63d":"code","4de71285":"code","338d10ce":"code","19dd6743":"code","99a3147c":"code","4852446d":"code","2e7184f1":"code","747ec505":"code","ce8c951b":"code","daf138fd":"code","af1c173c":"code","9e9ae1c5":"code","e348b7f0":"code","0da79486":"code","d52ac089":"code","fb6ba3c3":"code","366ea114":"code","3e3d5c8d":"code","e1b808ee":"code","6b27a203":"code","b6892def":"code","faa2df7f":"code","a3f3f356":"code","cdd5df8f":"code","272d049f":"code","90fa2ffa":"code","cce77914":"code","6f76dd38":"code","8af6d462":"code","50bb2420":"code","c81517c5":"code","fa29dbc3":"code","40e2a179":"code","9959189a":"code","e7170ec3":"code","4a9753ce":"code","e1ee7494":"code","4e0bb1ec":"code","83994df2":"code","908c7cc7":"code","9f87cf07":"code","bf911a8a":"code","d808092f":"code","a5ccd24c":"code","cf89a301":"code","24652936":"code","441aeaab":"code","47c7661f":"code","4fb41391":"code","10a0ed60":"code","d9baf97b":"code","c8cf93e8":"code","f68cc8ee":"code","2c168e97":"code","5958e7d9":"code","3f343282":"code","9fa7080e":"code","989454b9":"code","9c78dce3":"code","a39c3b5b":"code","59a86c02":"code","ef027137":"code","9f10fc65":"code","c581bc26":"code","f4f51063":"code","d9ab50a5":"code","66118a7d":"code","fe56a97c":"code","6578a1ad":"code","67743f65":"code","5f48a510":"code","151574fc":"code","571cafd8":"code","09fa3a7f":"code","255b3eb0":"code","c29866af":"code","e92971cf":"code","349d0b9a":"code","f48279c3":"code","5b41448e":"code","0485cd8b":"code","52e4a36e":"code","5729942b":"code","ede58281":"code","1713076c":"code","5f6ebc41":"code","af2fd425":"code","c1be1395":"code","93a587df":"code","ea993b79":"code","f6b09b59":"code","81c700f8":"code","2b38183b":"code","9fdea0c8":"code","e59a6269":"code","7b63dba1":"code","17c15bf4":"code","b651eb75":"code","34d5defd":"code","1d2da5cf":"code","3989def0":"code","26459619":"code","f3f39e3b":"code","9f6d0b69":"code","a9b5d087":"code","e18e558a":"code","642fa00c":"code","40343da5":"code","32b0242e":"code","764fb14c":"code","22b48fcb":"code","7a0e2042":"code","3b3c1029":"code","0d0eeab2":"code","5271994e":"code","7d13d671":"code","f7127577":"code","beaf78fb":"code","ba35742d":"code","84d66268":"code","37826799":"code","ba1180b8":"code","fb4d6f05":"code","86276d13":"code","16f8b5f1":"code","835f89a5":"code","03da1e27":"code","7bf63033":"code","ffdf6ccd":"code","3b8bf806":"code","74137d65":"code","e0fdd9a2":"code","03c6d250":"code","514c59a2":"code","d341cb87":"code","083be5f7":"code","a821f5ef":"code","2a7dfde5":"code","afc06011":"code","57875e9f":"code","101cd1de":"code","16576963":"code","c8d3aae7":"code","9f57f36c":"code","5f4d4fba":"code","cf80453c":"code","a9c73cef":"code","a9e73306":"code","5d8b7618":"code","2b2b4b08":"code","41988447":"code","1b58a758":"code","e317e942":"code","71aa391d":"code","b9b22f6e":"code","f56625bc":"code","c4393a6b":"code","d268dc19":"code","42511799":"code","8b0d2bda":"code","d2d3961c":"code","76bdbfae":"code","20a89a68":"code","faaec214":"code","3f90883f":"code","24963285":"code","cafa9366":"code","b0836c9e":"code","fb97b948":"code","39a0264a":"code","d40e968f":"code","69bb61d0":"code","4cf6691c":"code","1ae8a14b":"code","5af08c94":"code","f16b2478":"code","d6a20254":"code","e52d2807":"code","421f6416":"code","18d97798":"code","65dbb508":"code","9a4c8601":"code","0abbf4d7":"code","e0a5619d":"code","faecb54c":"code","3fc1221d":"code","d8dbaa6a":"code","9c9b68aa":"code","b878f415":"code","5baf7f71":"code","e8d848cc":"code","6fb196c7":"code","623cac33":"code","f2365efb":"code","24d3e22e":"code","2fea1c71":"code","ffcc1c98":"code","5bc94c95":"code","da305662":"code","541516ca":"code","88e04908":"code","6629b003":"code","4e610e91":"code","5238e0d0":"code","461f7301":"code","cb3ea620":"code","e4562540":"code","c793f0f7":"code","2a2d573b":"code","861ecdfe":"code","924a213d":"code","7a000314":"code","61032adb":"code","2eb3d727":"code","caf16c72":"code","5dab9399":"code","efba67c0":"code","65cdefc8":"code","57433e5e":"code","c6129c43":"code","23bf309c":"code","37234ef7":"code","5c951508":"code","6484a969":"code","716728b3":"code","26bf0dcf":"code","87e77163":"code","a7245538":"code","b47cf960":"code","689036dc":"code","cef26e0c":"code","83cb289a":"code","d5b082ee":"code","30e525b2":"code","1964e2c0":"code","06304ca8":"code","a2881479":"code","5e545fd4":"code","71025b1d":"code","8ce2f2b2":"code","7cb95348":"code","5cb04347":"code","c33f71af":"code","b081a194":"code","039e9f5f":"code","2a10a7c4":"code","e5489e63":"code","9dfcd77c":"code","16ead8cc":"code","31976598":"code","9867ae8a":"code","0cf2112f":"code","820baa21":"code","ad66b0d4":"code","5d9f6eb9":"code","3a416170":"code","849a8bd1":"code","b4775987":"code","65645908":"code","8cf4ac83":"code","be92a04f":"code","db77147d":"code","9ac0366e":"code","a6d458b9":"code","c994e575":"code","963f2611":"code","daa270d0":"code","f7527235":"code","26db05ae":"code","d6b50ab9":"code","0f2bafe7":"code","55b93eb0":"code","64bef3c4":"code","9949f3a9":"code","35c1e9f7":"code","d73bf020":"code","73441282":"code","64928af7":"code","643762d4":"code","7a1dbe6d":"code","6f8d5ee8":"code","40578fdd":"code","fa5de160":"code","9b14a61c":"code","71c53860":"code","4c6966b8":"code","0f720d87":"code","0e12fbec":"code","697b174a":"code","f08665f9":"code","62084b92":"code","3c3ef9c7":"code","10f20ad8":"code","05719422":"code","1f1f47f9":"code","3d2b53a5":"code","dc73e9a8":"code","a591d9bf":"code","9463b0d1":"code","77f7c256":"code","bf7ef3dc":"code","e5deb079":"code","ca5b0a5c":"code","071ab593":"code","876a8ba3":"code","622c78dd":"code","2e85128c":"code","56ef1b20":"code","6f306e73":"code","83d62416":"code","8c1a06ae":"code","d4100188":"code","36551b66":"code","cfe011f3":"code","76fdfe21":"code","91426337":"code","183b622e":"code","054373cd":"code","d2151b06":"code","c4d6382f":"code","4cff1ba6":"code","a1e79f1f":"code","3c3fb6e8":"code","283ba2df":"code","fc86ba8d":"code","68e85414":"code","b8113372":"code","cbd6bab0":"code","e62f4196":"code","57dd4914":"code","ce6b5bcf":"code","6805f01f":"code","62d70c33":"code","de1c9c87":"code","e59b7962":"code","571cac22":"code","d76ba50f":"code","6552b838":"code","ed4f9d62":"code","05d3ddd7":"code","4b8c9790":"code","1ecff6ca":"code","54fcb01f":"code","549c34fd":"code","ad6dbf6b":"code","524cc35a":"code","cd0a9223":"code","9bd15858":"code","041dc610":"code","6873e4a5":"code","5ba7d995":"code","bd0cc493":"code","2adfd4ed":"code","46d43b28":"code","aa08002c":"code","1d9b3851":"code","98d52b0f":"code","02e54406":"code","82bc448f":"code","58487d8e":"code","7883d9b1":"code","fdca1ab3":"code","7b47dd27":"code","85970cc5":"code","5511cb04":"code","ccb25bd2":"code","81586e26":"code","241daabe":"code","4a00a2d9":"code","b937489a":"code","8ae25bcc":"code","db42dc76":"code","9ed7e7e1":"code","1de2590f":"code","a889ca1e":"code","0c7afe97":"code","f6c8671a":"code","ae550444":"code","4d6084d4":"code","307dcdf0":"code","2a211fda":"code","b55cda0e":"code","2518cafb":"code","1a941296":"code","ec42cc28":"code","0db1a810":"code","831265f7":"code","b6aba605":"code","766ca3bb":"code","ed13741f":"code","1e8e4d5d":"code","3c00c45c":"code","237c2d92":"code","36b4179a":"code","0d282a10":"code","b6bc237b":"code","85c36432":"code","ba1213bd":"code","e0af897b":"code","87328f50":"code","4cabca14":"code","b3964111":"code","a40bfcf1":"code","9cd1b187":"code","f33c71a4":"code","74f40632":"code","4fefd5da":"code","0e846c80":"code","83d04fe6":"code","1e23caa2":"code","19d5e4cd":"code","5ee648d9":"code","67e05011":"code","dbe320ba":"code","f3cb3031":"code","be14c5bc":"code","9f559733":"code","ffb64cc8":"code","ae8f5702":"code","f283efb0":"code","83a8fefe":"code","5bad2787":"code","9f2950c1":"code","de037648":"code","542b4f3f":"code","ebbde3f1":"code","e659b1ad":"code","2807fd07":"code","80228d7c":"code","0bbb3995":"code","52d0f63d":"code","db4e94c5":"code","44b8b717":"code","4238814f":"code","58e1f30c":"code","d9810f01":"code","026ea870":"code","3d330fe6":"code","1ddce64c":"code","378567a3":"code","1764cd0f":"code","c5390dc7":"code","8892f92e":"code","897d3f0a":"code","c0dc6fe1":"code","ae319db3":"code","078e1961":"code","751ed4c2":"code","8bbc69f4":"code","8511ecba":"code","ca647147":"code","38b7cb86":"code","845629b9":"code","e3cea476":"code","c0d10e70":"code","89d9428c":"code","4b22209c":"code","bc5ace03":"code","aeeef733":"code","405b4f43":"code","46b764d8":"code","a738a218":"code","486be12e":"code","04da610a":"code","ddda16b5":"code","9f0b6d27":"code","7986cf21":"code","5b39daf7":"code","ad584bdb":"code","6ff67b05":"code","282fabd0":"code","89187c47":"code","30f219af":"code","bd2e8684":"code","cea98e57":"code","29adfb49":"code","fafa1532":"code","76abf941":"code","667ea589":"code","fd9b2a39":"code","83c31c7d":"code","64dcdc66":"code","1c2e0462":"code","45faddd7":"code","4a82938e":"code","0efef03c":"code","c14b9d98":"code","d7015909":"code","4a8d81ed":"code","fa848cc7":"code","074595ea":"code","3932b7e2":"code","0285525d":"code","b44644c0":"code","26d53b17":"code","f09d895b":"code","392b7c75":"code","51da1043":"code","e2291da9":"code","045395f4":"code","edd25d22":"code","aae98cc7":"markdown","bd5ee16d":"markdown","6da12b6b":"markdown","efb60993":"markdown","9287e777":"markdown","344b0ec5":"markdown","74d49f1f":"markdown","7c79b23d":"markdown","ba51aa8e":"markdown","d6ddd888":"markdown","8248df70":"markdown","c00d3144":"markdown","2ff1bd14":"markdown","32bbecbc":"markdown","2ceeb591":"markdown","925c1517":"markdown","2b217169":"markdown","a45529f0":"markdown","b3bcecc1":"markdown","b943bc00":"markdown","9407c1e4":"markdown","ece950df":"markdown","df1584d8":"markdown","cffb400c":"markdown","6d8dcd14":"markdown","1659e74a":"markdown","45301bb4":"markdown","4931fe76":"markdown","00206965":"markdown","eac79c74":"markdown","28992fbf":"markdown","fc4b0ce3":"markdown","e6f6bf47":"markdown","b9f0a8fa":"markdown","f675a8f6":"markdown","14335bfe":"markdown","f8fa2661":"markdown","cf293e45":"markdown","804b59ea":"markdown","38d9cc2a":"markdown","66da6686":"markdown","22883a41":"markdown","4462250a":"markdown","b1d20087":"markdown"},"source":{"81bd49c8":"import matplotlib.pyplot as plt\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom scipy import stats\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn import tree\n#from dtreeplt import dtreeplt\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nimport seaborn as sns\nfrom sklearn.decomposition import PCA\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.utils import plot_model\n#from sklearn.preprocessing import StandardScaler\n#from keras.utils import plot_model\n#from IPython.display import Image\n#from graphviz import *","56b54785":"data = pd.read_csv('..\/input\/mobile-price-classification\/train.csv')","c338a32c":"data.head(5)","3e26a784":"data.shape","57caeaba":"data.columns","f69a67a5":"# train = data.iloc[ :1600]\n# test = data.iloc[1600:]\ntrain = data.sample(frac=0.8, random_state=5)\ntest = data.loc[~data.index.isin(train.index),:]","48caabd5":"train.sample(5)","c7369f26":"train.head(5)","10a6de3c":"train.shape","2aeff9ae":"test.sample(5)","db9bef18":"test.shape","98c966c8":"train.isnull().sum()","3cc96abc":"train.describe()","95714bf2":"sns_plot = sns.pairplot(train,hue='price_range')\nsns_plot.savefig(\"pairplot_raw.png\", format='png')\nsns_plot","1e13a2ff":"train['px_total'] = train['px_height'] * train['px_width']\ntrain['3&4g'] = train['three_g'] * train['four_g']\ntrain['sc_total'] = train['sc_w']*train['sc_h']\ntrain['volume'] = train['sc_w']*train['sc_h'] * train['m_dep']\n\ntrain['battry'] = train['battery_power'] * train['talk_time']\ntrain['battry'] = train['battry'].round(2)\n                         \ntrain['battry_per_talk'] = train['battery_power'] \/ train['talk_time']\ntrain['battry_per_talk'] = train['battry_per_talk'].round(2)\n                                  \ntrain['cal'] = train['clock_speed'] * train['ram']\ntrain['cal'] = train['cal'].round(2)\n                                  \ntrain['ram_per_clock'] = train['ram'] \/ train['clock_speed']\ntrain['ram_per_clock'] = train['ram_per_clock'].round(2)\n                                  \ntrain['clock_per_ram'] = train['clock_speed'] \/ train['ram'] \ntrain['clock_per_ram'] = train['clock_per_ram'].round(5)\n                                  \ntrain['memory_per_ram'] = train['int_memory'] \/ train['ram'] \ntrain['memory_per_ram'] = train['memory_per_ram'].round(5)\n                                  \ntrain['ram_per_memory'] = train['ram'] \/ train['int_memory'] \ntrain['ram_per_memory'] = train['ram_per_memory'].round(2)                               ","cb7532f1":"train.sample(5)","11169cf9":"sns_plot = sns.pairplot(train,hue='price_range')\nsns_plot.savefig(\"pairplot_add_feature.png\", format='png')\nsns_plot","6c6e17cf":"test['px_total'] = test['px_height'] * test['px_width']\ntest['3&4g'] = test['three_g'] * test['four_g']\ntest['sc_total'] = test['sc_w']*test['sc_h']\ntest['volume'] = test['sc_w']*test['sc_h'] * test['m_dep']\n\ntest['battry'] = test['battery_power'] * test['talk_time']\ntest['battry'] = test['battry'].round(2)\n                         \ntest['battry_per_talk'] = test['battery_power'] \/ test['talk_time']\ntest['battry_per_talk'] = test['battry_per_talk'].round(2)\n                                  \ntest['cal'] = test['clock_speed'] * test['ram']\ntest['cal'] = test['cal'].round(2)\n                                  \ntest['ram_per_clock'] = test['ram'] \/ test['clock_speed']\ntest['ram_per_clock'] = test['ram_per_clock'].round(2)\n                                  \ntest['clock_per_ram'] = test['clock_speed'] \/ test['ram'] \ntest['clock_per_ram'] = test['clock_per_ram'].round(5)\n                                  \ntest['memory_per_ram'] = test['int_memory'] \/ test['ram'] \ntest['memory_per_ram'] = test['memory_per_ram'].round(5)\n                                  \ntest['ram_per_memory'] = test['ram'] \/ test['int_memory'] \ntest['ram_per_memory'] = test['ram_per_memory'].round(2)       ","ea23a20d":"train.columns","c154ffc1":"train =train[['battery_power', 'blue', 'clock_speed', 'dual_sim', 'fc', 'four_g',\n       'int_memory', 'm_dep', 'mobile_wt', 'n_cores', 'pc', 'px_height',\n       'px_width', 'ram', 'sc_h', 'sc_w', 'talk_time', 'three_g',\n       'touch_screen', 'wifi','px_total', '3&4g', 'sc_total',\n       'volume','battry','battry_per_talk','cal','ram_per_clock','clock_per_ram',\n       'memory_per_ram','ram_per_memory','price_range']] \n\ntest = test[['battery_power', 'blue', 'clock_speed', 'dual_sim', 'fc', 'four_g',\n       'int_memory', 'm_dep', 'mobile_wt', 'n_cores', 'pc', 'px_height',\n       'px_width', 'ram', 'sc_h', 'sc_w', 'talk_time', 'three_g',\n       'touch_screen', 'wifi','px_total', '3&4g', 'sc_total',\n       'volume','battry','battry_per_talk','cal','ram_per_clock','clock_per_ram',\n       'memory_per_ram','ram_per_memory','price_range']]","c1054491":"train.columns","5cec8458":"len(train.columns)","610d7209":"train.head(5)","fd2fde9a":"sns.countplot(x='price_range',data=train)","fa0d1c0e":"plt.figure(figsize=(15,8))\nsns.violinplot(\"price_range\", \"battery_power\", data=train)","04c4b5db":"plt.figure(figsize=(15,8))\nsns.boxplot(\"price_range\", \"battery_power\", data=train)","9bc90d69":"plt.figure(figsize=(15,8))\nsns.violinplot(\"price_range\", \"ram\", data=train)","c7838f2e":"plt.figure(figsize=(15,8))\nsns.boxplot(\"price_range\", \"ram\", data=train)","a0e3bcef":"fstat, pval = stats.f_oneway(*[train.ram[data.price_range == s]\nfor s in train.price_range.unique()])\nprint(\"Oneway Anova ram ~ price_range F=%.2f, p-value=%E\" % (fstat, pval))","628c31be":"plt.figure(figsize=(20,15))\ncorrelation_matrix = train.corr().round(2)\nsns.heatmap(data=correlation_matrix ,center=0 , linewidths=.7, annot=True)","b1dedfab":"pca = PCA(n_components=10)","07fd0ac0":"pca.fit(train.iloc[:,:20])","2286b367":"# principalComponentsTrain = pca.fit_transform(train.iloc[:,:20])\n# principalComponentsTrain","97217791":"pca_train10 = pd.DataFrame()\npca_train10 = pd.DataFrame(data = pca.transform(train.iloc[:,:20]), columns =['pca1','pca2','pca3','pca4','pca5','pca6','pca7'\n                                                               ,'pca8','pca9','pca10'])\npca_train10 = pca_train10.merge(train.iloc[:,31:], left_index=True, right_index=True)","a70f5622":"pca_train10.sample(5)","740cb30f":"# principalComponentsTest = pca.fit_transform(test.iloc[:,:20])\n# principalComponentsTest","c3e2085a":"pca_test10 = pd.DataFrame()\npca_test10 = pd.DataFrame(data = pca.transform(test.iloc[:,:20]), columns =['pca1','pca2','pca3','pca4','pca5','pca6','pca7'\n                                                               ,'pca8','pca9','pca10'])\npca_test10 = pca_test10.merge(test.iloc[:,31:], left_index=True, right_index=True)","37605655":"pca_test10.sample(5)","24dfd21f":"sns_plot = sns.pairplot(pca_train10,hue='price_range')\nsns_plot.savefig(\"pairplot_pca10.png\", format='png')\nsns_plot","85556e13":"pca = PCA(n_components=15)","d52ef066":"pca.fit(train.iloc[:,:20])","e3808f52":"# principalComponents = pca.fit_transform(train.iloc[:,:20])\n# principalComponents","c010571f":"pca_train15 = pd.DataFrame(data = pca.transform(train.iloc[:,:20]), columns =['pca1','pca2','pca3','pca4','pca5','pca6','pca7'\n                                                               ,'pca8','pca9','pca10','pca11','pca12','pca13'\n                                                                ,'pca14','pca15'])\npca_train15 = pca_train15.merge(train.iloc[:,31:], left_index=True, right_index=True)","97a0f46e":"pca_train15.sample(5)","cab04791":"# principalComponentsTest = pca.fit_transform(test.iloc[:,:20])\n# principalComponentsTest","957e780f":"pca_test15 = pd.DataFrame()\npca_test15 = pd.DataFrame(data =  pca.transform(test.iloc[:,:20]), columns =['pca1','pca2','pca3','pca4','pca5','pca6','pca7'\n                                                               ,'pca8','pca9','pca10','pca11','pca12','pca13'\n                                                                   ,'pca14','pca15'])\npca_test15 = pca_test15.merge(test.iloc[:,31:], left_index=True, right_index=True)","9aaf0e91":"pca_test15.sample(5)","cf0d5a30":"sns_plot = sns.pairplot(pca_train15,hue='price_range')\nsns_plot.savefig(\"pairplot_pca15.png\", format='png')\nsns_plot","7640ddea":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,13], train.iloc[:,31:], \n                                                    test_size=0.3, random_state=0)","28686d79":"X_train = pd.DataFrame(X_train,columns=['ram'])\nX_train.head(5)","d8edf945":"X_test = pd.DataFrame(X_test,columns=['ram'])","7a1413e9":"y_train = pd.DataFrame(y_train,columns=['price_range'])\ny_train.head(5)","4e001fa9":"y_test = pd.DataFrame(y_test,columns=['price_range'])","13ebd991":"model = LogisticRegression(multi_class='auto')\nmodel.fit(X_train, y_train)","f1aa278f":"y_test = y_test.reset_index(drop=True)\ny_test.head(5)","93930c8e":"y_pred = model.predict(X_test)","b0e16fbb":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","740ebefb":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","53c57abe":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","ce0508a3":"print(classification_report(y_test, y_pred))","ff8aec95":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","33e08f48":"x_test = pd.DataFrame(test.iloc[:,13],columns=['ram'])\nx_test.head(5)","31438f6d":"y_pred = model.predict(x_test)","08a0470c":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","e8946ff0":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","670f716f":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","d432ae57":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","700815a5":"print(classification_report(y_test, y_pred))","e07baa97":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","0d9b7d4b":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:20], train.iloc[:,31:], test_size=0.3, random_state=0)","7f1188e8":"X_train.head(5)","82cea5fa":"len(X_train)","40d66919":"y_train.head(5)","88f846c0":"len(y_train)","52ba47e2":"model = LogisticRegression(multi_class='auto')\nmodel.fit(X_train, y_train)","f856283b":"y_test.head(5)","54205fc8":"y_test = y_test.reset_index(drop=True)\ny_test.head(5)","96125cbf":"y_pred = model.predict(X_test)","0f950c74":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","d295085c":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","449e63c5":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","a0ec5a66":"print(classification_report(y_test, y_pred))","e9b1ff02":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","8359121a":"test.iloc[:,:20].head(5)","f9cbe4ed":"y_pred = model.predict(test.iloc[:,:20])","4699d778":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","f8576c63":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","54d79a1a":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","3cce172c":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","4e7962c4":"print(classification_report(y_test, y_pred))","114d05c3":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","525455aa":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:31], train.iloc[:,31:],\n                                                    test_size=0.3, random_state=0)","1d2318e4":"X_train.head(5)","70cc0195":"y_train.head(5)","31b94017":"model = LogisticRegression(multi_class='auto')\nmodel.fit(X_train, y_train)","419657ae":"y_test = y_test.reset_index(drop=True)\ny_test.head(5)","58a0102b":"y_pred = model.predict(X_test)","dcb14cd6":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","e78d9c85":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","264509b0":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","3d08baed":"print(classification_report(y_test, y_pred))","65535da8":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","f1b78807":"y_pred = model.predict(test.iloc[:,:31])","9fc53715":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","44b2802a":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","31beab1a":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","854548ec":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","e8e08c62":"print(classification_report(y_test, y_pred))","81d5ed7f":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","3ee9d86d":"X_train, X_test, y_train, y_test = train_test_split(pca_train10.iloc[:,:10], pca_train10.iloc[:,10:],\n                                                    test_size=0.3, random_state=0)","9f9a0535":"X_train.head(5)","221678c6":"y_train.head(5)","46e42fd3":"model = LogisticRegression(multi_class='auto')\nmodel.fit(X_train, y_train)","34584061":"y_test = y_test.reset_index(drop=True)\ny_test.head(5)","289e6ffe":"y_pred = model.predict(X_test)","27f45aa3":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","59106278":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","82deb594":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","eb379988":"print(classification_report(y_test, y_pred))","624c9e09":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","141153c6":"y_pred = model.predict(pca_test10.iloc[:,:10])","d72a94d9":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","2aa2e388":"y_test = pca_test10.iloc[:,10:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","8c2e9469":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","6ce37ebe":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","bfa3ea81":"print(classification_report(y_test, y_pred))","dabaebbb":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","06cbc2a1":"X_train, X_test, y_train, y_test = train_test_split(pca_train15.iloc[:,:15], pca_train15.iloc[:,15:],\n                                                    test_size=0.3, random_state=0)","a62e9c4a":"X_train.head(5)","6f374704":"y_train.head(5)","4f6af925":"model = LogisticRegression(multi_class='auto')","f119483c":"model.fit(X_train, y_train)","8001f024":"y_test = y_test.reset_index(drop=True)\ny_test.head(5)","9a5eab0e":"y_pred = model.predict(X_test)","73c1fd78":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","3f6cf7ef":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","dac90149":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","f1747481":"print(classification_report(y_test, y_pred))","03d5b648":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","ff2c1f86":"y_pred = model.predict(pca_test15.iloc[:,:15])","97f66ac3":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","1cf17204":"y_test = pca_test15.iloc[:,15:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","1ae2c5e8":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","2cbc6432":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","7b34dc21":"print(classification_report(y_test, y_pred))","49f776b5":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","cda03356":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,13], train.iloc[:,31:], \n                                                    test_size=0.3, random_state=0)","4e181e59":"X_train = pd.DataFrame(X_train,columns=['ram'])\nX_train.head(5)","123ea480":"X_test = pd.DataFrame(X_test,columns=['ram'])","ef1a1988":"y_train = pd.DataFrame(y_train,columns=['price_range'])\ny_train.head(5)","d6d81fe4":"y_test = pd.DataFrame(y_test,columns=['price_range'])","2b9b2d82":"y_test = y_test.reset_index(drop=True)\ny_test.head(5)","8adfe1db":"gnb = GaussianNB()\ngnb.fit(X_train, y_train)","91442004":"y_pred = gnb.predict(X_test)","f32d508e":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","6c6310f9":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","e5723a09":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","7dba6107":"print(classification_report(y_test, y_pred))","bdadd25e":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","3e7dd487":"x_train = test.iloc[:,13]\nx_train = pd.DataFrame(x_train,columns=['ram'])\nx_train.sample(5)","8e9bb2aa":"y_pred = gnb.predict(x_train)","b94e23c0":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","5d4aa30f":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","9e53a339":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","89218d8c":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","3fbaa117":"print(classification_report(y_test, y_pred))","c398086d":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","fa20a9f7":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:20], train.iloc[:,31:], test_size=0.3, random_state=0)","ef2dd6b6":"X_train.head(5)","5eb99c06":"y_test = y_test.reset_index(drop=True)\ny_test.head(5)","a72ea31b":"gnb = GaussianNB()\ngnb.fit(X_train, y_train)","f18236ac":"y_pred = gnb.predict(X_test)","a0091b56":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","37111b20":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","d25fe903":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","21488c5b":"print(classification_report(y_test, y_pred))","e9401f6d":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","f60d4270":"x_train = test.iloc[:,:20]\nx_train.sample(5)","6ef0f1d8":"y_pred = gnb.predict(x_train)","5be06dd0":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","9614b571":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","7724939a":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","15d2e056":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","42c28b17":"print(classification_report(y_test, y_pred))","340f30a3":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","53fa2423":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:31], train.iloc[:,31:], test_size=0.3, random_state=0)","3685871e":"X_train.head(5)","b6ce33bc":"y_test = y_test.reset_index(drop=True)\ny_test.head(5)","fe26c611":"gnb = GaussianNB()\ngnb.fit(X_train, y_train)","dd1d1a3e":"y_pred = gnb.predict(X_test)","6a27ea1c":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","39c6deb3":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","34c93e94":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","bfd8f4c8":"print(classification_report(y_test, y_pred))","2ea28c8e":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","26ee61fd":"x_train = test.iloc[:,:31]\nx_train.sample(5)","d13e9e29":"y_pred = gnb.predict(x_train)","dde94f89":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","e948fc81":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","e7f76307":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","fccd23fa":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","6dd2b4a5":"print(classification_report(y_test, y_pred))","4161b9fe":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","833c4f60":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:20], train.iloc[:,31:], test_size=0.3, random_state=0)","169028f0":"y_test = y_test.reset_index(drop=True)\ny_test.head(5)","441dcbce":"knn = KNeighborsClassifier(n_neighbors=5, metric='euclidean')\nknn.fit(X_train, y_train)","94f01ae8":"y_pred = knn.predict(X_test)","9daf6769":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","f4722b7b":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","aeae92f9":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","3cb0d63d":"print(classification_report(y_test, y_pred))","4de71285":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","338d10ce":"x_train = test.iloc[:,:20]\nx_train.sample(5)","19dd6743":"y_pred = knn.predict(x_train)","99a3147c":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","4852446d":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","2e7184f1":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","747ec505":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","ce8c951b":"print(classification_report(y_test, y_pred))","daf138fd":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","af1c173c":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:20], train.iloc[:,31:], test_size=0.3, random_state=0)","9e9ae1c5":"y_test = y_test.reset_index(drop=True)\ny_test.head(5)","e348b7f0":"knn = KNeighborsClassifier(n_neighbors=10, metric='euclidean')\nknn.fit(X_train, y_train)","0da79486":"y_pred = knn.predict(X_test)","d52ac089":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","fb6ba3c3":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","366ea114":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","3e3d5c8d":"print(classification_report(y_test, y_pred))","e1b808ee":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","6b27a203":"x_train = test.iloc[:,:20]\nx_train.sample(5)","b6892def":"y_pred = knn.predict(x_train)","faa2df7f":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","a3f3f356":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","cdd5df8f":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","272d049f":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","90fa2ffa":"print(classification_report(y_test, y_pred))","cce77914":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","6f76dd38":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:31], train.iloc[:,31:], test_size=0.3, random_state=0)","8af6d462":"y_test = y_test.reset_index(drop=True)\ny_test.head(5)","50bb2420":"knn = KNeighborsClassifier(n_neighbors=5, metric='euclidean')\nknn.fit(X_train, y_train)","c81517c5":"y_pred = knn.predict(X_test)","fa29dbc3":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","40e2a179":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","9959189a":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","e7170ec3":"print(classification_report(y_test, y_pred))","4a9753ce":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","e1ee7494":"x_train = test.iloc[:,:31]\nx_train.sample(5)","4e0bb1ec":"y_pred = knn.predict(x_train)","83994df2":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","908c7cc7":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","9f87cf07":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","bf911a8a":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","d808092f":"print(classification_report(y_test, y_pred))","a5ccd24c":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","cf89a301":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:31], train.iloc[:,31:], test_size=0.3, random_state=0)","24652936":"y_test = y_test.reset_index(drop=True)\ny_test.head(5)","441aeaab":"knn = KNeighborsClassifier(n_neighbors=10, metric='euclidean')\nknn.fit(X_train, y_train)","47c7661f":"y_pred = knn.predict(X_test)","4fb41391":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","10a0ed60":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","d9baf97b":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","c8cf93e8":"print(classification_report(y_test, y_pred))","f68cc8ee":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","2c168e97":"x_train = test.iloc[:,:31]\nx_train.sample(5)","5958e7d9":"y_pred = knn.predict(x_train)","3f343282":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","9fa7080e":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","989454b9":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","9c78dce3":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","a39c3b5b":"print(classification_report(y_test, y_pred))","59a86c02":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","ef027137":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:20], train.iloc[:,31:], test_size=0.3, random_state=0)","9f10fc65":"y_test = y_test.reset_index(drop=True)\ny_test.head(5)","c581bc26":"svm_linear = SVC(kernel='linear',cache_size = 15)\nsvm_linear.fit(X_train, y_train)","f4f51063":"y_pred = svm_linear.predict(X_test)","d9ab50a5":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","66118a7d":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","fe56a97c":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","6578a1ad":"print(classification_report(y_test, y_pred))","67743f65":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","5f48a510":"x_train = test.iloc[:,:20]\nx_train.sample(5)","151574fc":"y_pred = svm_linear.predict(x_train)","571cafd8":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","09fa3a7f":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","255b3eb0":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","c29866af":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","e92971cf":"print(classification_report(y_test, y_pred))","349d0b9a":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","f48279c3":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:20], train.iloc[:,31:], test_size=0.3, random_state=0)","5b41448e":"y_test = y_test.reset_index(drop=True)\ny_test.head(5)","0485cd8b":"svm_polynomial = SVC(kernel='poly',cache_size = 15)\nsvm_polynomial.fit(X_train, y_train)","52e4a36e":"y_pred = svm_polynomial.predict(X_test)","5729942b":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","ede58281":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","1713076c":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","5f6ebc41":"print(classification_report(y_test, y_pred))","af2fd425":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","c1be1395":"x_train = test.iloc[:,:20]\nx_train.sample(5)","93a587df":"y_pred = svm_polynomial.predict(x_train)","ea993b79":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","f6b09b59":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","81c700f8":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","2b38183b":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","9fdea0c8":"print(classification_report(y_test, y_pred))","e59a6269":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","7b63dba1":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:20], train.iloc[:,31:], test_size=0.3, random_state=0)","17c15bf4":"y_test = y_test.reset_index(drop=True)\ny_test.head(5)","b651eb75":"DT = tree.DecisionTreeClassifier(min_samples_leaf= 10)\nDT.fit(X_train, y_train)","34d5defd":"# %matplotlib inline\n# plt.figure(figsize=(50,25))\n# dtree = dtreeplt(model=DT,\n#     feature_names=train.iloc[:,:20].columns,\n#     target_names=['0','1','2','3'], X=train.iloc[:,:20], y=train.iloc[:,31:], eval=True)\n# fig = dtree.view()\n# fig.savefig('dtree_20feature_leaf_size_10.pdf')  ","1d2da5cf":"y_pred = DT.predict(X_test)","3989def0":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)\n","26459619":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","f3f39e3b":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","9f6d0b69":"print(classification_report(y_test, y_pred))","a9b5d087":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","e18e558a":"x_train = test.iloc[:,:20]\nx_train.sample(5)","642fa00c":"y_pred = DT.predict(x_train)","40343da5":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","32b0242e":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","764fb14c":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","22b48fcb":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","7a0e2042":"print(classification_report(y_test, y_pred))","3b3c1029":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","0d0eeab2":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:20], train.iloc[:,31:], test_size=0.3, random_state=0)","5271994e":"y_test = y_test.reset_index(drop=True)\ny_test.head(5)","7d13d671":"DT = tree.DecisionTreeClassifier()\nDT.fit(X_train, y_train)","f7127577":"# tree.plot_tree(DT, filled=True) ","beaf78fb":"# %matplotlib inline\n# import matplotlib.pyplot as plt\n\n# fig = DT.fit(X_train, y_train)\n# tree.plot_tree(fig,filled=True)\n# plt.figure(figsize=(50,1))\n# plt.show()","ba35742d":"# %matplotlib inline\n# plt.figure(figsize=(50,25))\n# dtree = dtreeplt(model=DT,\n#     feature_names=train.iloc[:,:20].columns,\n#     target_names=['0','1','2','3'], X=train.iloc[:,:20], y=train.iloc[:,31:], eval=True)\n# fig = dtree.view()\n# fig.savefig('dtree_20feature_gini.pdf')  ","84d66268":"y_pred = DT.predict(X_test)","37826799":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","ba1180b8":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","fb4d6f05":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","86276d13":"print(classification_report(y_test, y_pred))","16f8b5f1":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","835f89a5":"x_train = test.iloc[:,:20]\nx_train.sample(5)","03da1e27":"y_pred = DT.predict(x_train)","7bf63033":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","ffdf6ccd":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","3b8bf806":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","74137d65":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","e0fdd9a2":"print(classification_report(y_test, y_pred))","03c6d250":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","514c59a2":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:20], train.iloc[:,31:], test_size=0.3, random_state=0)","d341cb87":"y_test = y_test.reset_index(drop=True)\ny_test.head(5)","083be5f7":"DT = tree.DecisionTreeClassifier(criterion = 'entropy')\nDT.fit(X_train, y_train)","a821f5ef":"# %matplotlib inline\n# plt.figure(figsize=(50,25))\n# dtree = dtreeplt(model=DT,\n#     feature_names=train.iloc[:,:20].columns,\n#     target_names=['0','1','2','3'], X=train.iloc[:,:20], y=train.iloc[:,24:], eval=True)\n# fig = dtree.view()\n# fig.savefig('dtree_20feature_entropy.pdf')  ","2a7dfde5":"y_pred = DT.predict(X_test)","afc06011":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","57875e9f":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","101cd1de":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","16576963":"print(classification_report(y_test, y_pred))","c8d3aae7":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","9f57f36c":"x_train = test.iloc[:,:20]\nx_train.sample(5)","5f4d4fba":"y_pred = DT.predict(x_train)","cf80453c":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","a9c73cef":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","a9e73306":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","5d8b7618":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","2b2b4b08":"print(classification_report(y_test, y_pred))","41988447":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","1b58a758":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:31], train.iloc[:,31:], test_size=0.3, random_state=0)","e317e942":"y_test = y_test.reset_index(drop=True)\ny_test.head(5)","71aa391d":"DT = tree.DecisionTreeClassifier()\nDT.fit(X_train, y_train)","b9b22f6e":"# %matplotlib inline\n# plt.figure(figsize=(50,25))\n# dtree = dtreeplt(model=DT,\n#     feature_names=train.iloc[:,:31].columns,\n#     target_names=['0','1','2','3'], X=train.iloc[:,:31], y=train.iloc[:,31:], eval=True)\n# fig = dtree.view()\n# fig.savefig('dtree_31feature.pdf')  ","f56625bc":"y_pred = DT.predict(X_test)","c4393a6b":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","d268dc19":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","42511799":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","8b0d2bda":"print(classification_report(y_test, y_pred))","d2d3961c":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","76bdbfae":"x_train = test.iloc[:,:31]\nx_train.sample(5)","20a89a68":"y_pred = DT.predict(x_train)","faaec214":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","3f90883f":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","24963285":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","cafa9366":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","b0836c9e":"print(classification_report(y_test, y_pred))","fb97b948":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","39a0264a":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:20], train.iloc[:,31:], test_size=0.3, random_state=0)","d40e968f":"y_test = y_test.reset_index(drop=True)\ny_test.head(5)","69bb61d0":"rf = RandomForestRegressor(n_estimators = 1000, random_state = 42)","4cf6691c":"rf.fit(X_train, y_train)","1ae8a14b":"y_pred = rf.predict(X_test)","5af08c94":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","f16b2478":"y_pred.describe()","d6a20254":"for i in range(len(y_pred)):\n    if 0 <= y_pred['y_pred'][i]<=0.5:\n        y_pred['y_pred'][i] = 0\n    elif 0.5 <= y_pred['y_pred'][i] <= 1.5:\n        y_pred['y_pred'][i] = 1\n    elif 1.5 <= y_pred['y_pred'][i] <= 2.5:\n        y_pred['y_pred'][i] = 2\n    elif 2.5 <= y_pred['y_pred'][i]:\n        y_pred['y_pred'][i] = 3","e52d2807":"y_pred.head(5)","421f6416":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","18d97798":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","65dbb508":"print(classification_report(y_test, y_pred))","9a4c8601":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","0abbf4d7":"x_train = test.iloc[:,:20]\nx_train.sample(5)","e0a5619d":"y_pred = rf.predict(x_train)","faecb54c":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","3fc1221d":"for i in range(len(y_pred)):\n    if 0 <= y_pred['y_pred'][i]<=0.5:\n        y_pred['y_pred'][i] = 0\n    elif 0.5 <= y_pred['y_pred'][i] <= 1.5:\n        y_pred['y_pred'][i] = 1\n    elif 1.5 <= y_pred['y_pred'][i] <= 2.5:\n        y_pred['y_pred'][i] = 2\n    elif 2.5 <= y_pred['y_pred'][i]:\n        y_pred['y_pred'][i] = 3","d8dbaa6a":"y_pred.head(5)","9c9b68aa":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","b878f415":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","5baf7f71":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","e8d848cc":"print(classification_report(y_test, y_pred))","6fb196c7":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","623cac33":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:31], train.iloc[:,31:], test_size=0.3, random_state=0)","f2365efb":"y_test = y_test.reset_index(drop=True)\ny_test.head(5)","24d3e22e":"rf = RandomForestRegressor(n_estimators = 1000, random_state = 42)","2fea1c71":"rf.fit(X_train, y_train)","ffcc1c98":"y_pred = rf.predict(X_test)","5bc94c95":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","da305662":"for i in range(len(y_pred)):\n    if 0 <= y_pred['y_pred'][i]<=0.5:\n        y_pred['y_pred'][i] = 0\n    elif 0.5 <= y_pred['y_pred'][i] <= 1.5:\n        y_pred['y_pred'][i] = 1\n    elif 1.5 <= y_pred['y_pred'][i] <= 2.5:\n        y_pred['y_pred'][i] = 2\n    elif 2.5 <= y_pred['y_pred'][i]:\n        y_pred['y_pred'][i] = 3","541516ca":"y_pred.head(5)","88e04908":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","6629b003":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","4e610e91":"print(classification_report(y_test, y_pred))","5238e0d0":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","461f7301":"x_train = test.iloc[:,:31]\nx_train.sample(5)","cb3ea620":"y_pred = rf.predict(x_train)","e4562540":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","c793f0f7":"for i in range(len(y_pred)):\n    if 0 <= y_pred['y_pred'][i]<=0.5:\n        y_pred['y_pred'][i] = 0\n    elif 0.5 <= y_pred['y_pred'][i] <= 1.5:\n        y_pred['y_pred'][i] = 1\n    elif 1.5 <= y_pred['y_pred'][i] <= 2.5:\n        y_pred['y_pred'][i] = 2\n    elif 2.5 <= y_pred['y_pred'][i]:\n        y_pred['y_pred'][i] = 3","2a2d573b":"y_pred.head(5)","861ecdfe":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","924a213d":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","7a000314":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","61032adb":"print(classification_report(y_test, y_pred))","2eb3d727":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","caf16c72":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:20], train.iloc[:,31:], test_size=0.3, random_state=0)","5dab9399":"X_train.sample(5)","efba67c0":"y_train.sample(5)","65cdefc8":"model = Sequential()\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal', input_dim=20))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(1, activation='linear', kernel_initializer='random_normal'))","57433e5e":"model.compile(loss='mean_squared_error', optimizer='Adam', metrics=['accuracy'])","c6129c43":"print(model.summary())","23bf309c":"#plot_model(model, show_shapes=True, show_layer_names=True, to_file='model.png')\n#Image(retina=True, filename='model.png')\n\nplot_model(model, to_file='NN1.png')","37234ef7":"history = model.fit(X_train, y_train, epochs=2000, batch_size=10)","5c951508":"# plt.plot(history.history['acc'])\n# #plt.plot(history.history['val_acc'])\n# plt.title('Model accuracy')\n# plt.ylabel('Accuracy')\n# plt.xlabel('Epoch')\n# plt.legend(['Train', 'Test'], loc='upper left')\n# plt.show()","6484a969":"# Plot training & validation loss values\nplt.plot(history.history['loss'])\n#plt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","716728b3":"y_pred = model.predict(X_test)","26bf0dcf":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","87e77163":"y_pred = y_pred.round(0)\ny_pred.head(5)","a7245538":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","b47cf960":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","689036dc":"print(classification_report(y_test, y_pred))","cef26e0c":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","83cb289a":"x_train = test.iloc[:,:20]\nx_train.sample(5)","d5b082ee":"y_pred = model.predict(x_train)","30e525b2":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","1964e2c0":"y_pred = y_pred.round(0)\ny_pred.head(5)","06304ca8":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","a2881479":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","5e545fd4":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","71025b1d":"print(classification_report(y_test, y_pred))","8ce2f2b2":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","7cb95348":"train.head(5)","5cb04347":"train['class0'] = 0\ntrain['class1'] = 0\ntrain['class2'] = 0\ntrain['class3'] = 0\ntest['class0'] = 0\ntest['class1'] = 0\ntest['class2'] = 0\ntest['class3'] = 0","c33f71af":"train.head(5)","b081a194":"train.loc[train['price_range'] == 0, 'class0'] = 1\ntrain.loc[train['price_range'] == 1, 'class1'] = 1\ntrain.loc[train['price_range'] == 2, 'class2'] = 1\ntrain.loc[train['price_range'] == 3, 'class3'] = 1","039e9f5f":"train.head(5)","2a10a7c4":"test.loc[test['price_range'] == 0, 'class0'] = 1\ntest.loc[test['price_range'] == 1, 'class1'] = 1\ntest.loc[test['price_range'] == 2, 'class2'] = 1\ntest.loc[test['price_range'] == 3, 'class3'] = 1","e5489e63":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:20], train.iloc[:,32:],\n                                                    test_size=0.3, random_state=0)","9dfcd77c":"X_train.head(5)","16ead8cc":"y_train.head(5)","31976598":"y_test.head(5)","9867ae8a":"model = Sequential()\nmodel.add(Dense(20, activation='sigmoid', kernel_initializer='random_normal', input_dim=20))\nmodel.add(Dense(20, activation='relu', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='relu', kernel_initializer='random_normal'))\nmodel.add(Dense(4, activation='softmax', kernel_initializer='random_normal'))","0cf2112f":"model.compile(loss='mean_squared_error', optimizer='Adam', metrics=['accuracy'])","820baa21":"print(model.summary())","ad66b0d4":"plot_model(model, to_file='NN2.png')","5d9f6eb9":"history = model.fit(X_train, y_train, epochs=5000, batch_size=15)","3a416170":"plt.plot(history.history['accuracy'])\n#plt.plot(history.history['val_acc'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","849a8bd1":"# Plot training & validation loss values\nplt.plot(history.history['loss'])\n#plt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","b4775987":"y_pred = model.predict(X_test)\ny_pred","65645908":"y_pred = pd.DataFrame(y_pred,columns=['0','1','2','3'])\ny_pred.head(5)","8cf4ac83":"y_pred['y_pred'] = 0","be92a04f":"y_pred['max_value'] = y_pred.max(axis=1)","db77147d":"y_pred.head(5)","9ac0366e":"y_pred.columns","a6d458b9":"for i in range(len(y_pred)):\n    for j in range(0,4):\n        if y_pred[str(j)][i] == y_pred['max_value'][i]:\n            y_pred['y_pred'][i] = j           ","c994e575":"y_pred.head(5)","963f2611":"y_pred = y_pred[['y_pred']]","daa270d0":"y_test['price_range'] = 0","f7527235":"y_test = y_test.reset_index(drop=True)","26db05ae":"y_test.head(5)","d6b50ab9":"for i in range(len(y_test)):\n    if y_test['class0'][i] == 1:\n        y_test['price_range'][i] = 0\n    elif y_test['class1'][i] == 1:\n        y_test['price_range'][i] = 1\n    elif y_test['class2'][i] == 1:\n        y_test['price_range'][i] = 2\n    elif y_test['class3'][i] == 1:\n        y_test['price_range'][i] = 3","0f2bafe7":"y_test = y_test[[\"price_range\"]]","55b93eb0":"y_test.head(5)","64bef3c4":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","9949f3a9":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","35c1e9f7":"print(classification_report(y_test, y_pred))","d73bf020":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","73441282":"test.head(5)","64928af7":"X_test = test.iloc[:,:20]\nX_test.sample(5)","643762d4":"y_pred = model.predict(X_test)\ny_pred","7a1dbe6d":"y_pred = pd.DataFrame(y_pred,columns=['0','1','2','3'])\ny_pred.head(5)","6f8d5ee8":"y_pred['y_pred'] = 0","40578fdd":"y_pred['max_value'] = y_pred.max(axis=1)","fa5de160":"y_pred.head(5)","9b14a61c":"for i in range(len(y_pred)):\n    for j in range(0,4):\n        if y_pred[str(j)][i] == y_pred['max_value'][i]:\n            y_pred['y_pred'][i] = j   ","71c53860":"y_pred.head(5)","4c6966b8":"y_pred = y_pred[['y_pred']]","0f720d87":"y_test = test.iloc[:,32:]","0e12fbec":"y_test['price_range'] = 0","697b174a":"y_test.head(5)","f08665f9":"y_test = y_test.reset_index(drop=True)","62084b92":"for i in range(len(y_test)):\n    if y_test['class0'][i] == 1:\n        y_test['price_range'][i] = 0\n    elif y_test['class1'][i] == 1:\n        y_test['price_range'][i] = 1\n    elif y_test['class2'][i] == 1:\n        y_test['price_range'][i] = 2\n    elif y_test['class3'][i] == 1:\n        y_test['price_range'][i] = 3","3c3ef9c7":"y_test = y_test[[\"price_range\"]]","10f20ad8":"y_test.head(5)","05719422":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","1f1f47f9":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","3d2b53a5":"print(classification_report(y_test, y_pred))","dc73e9a8":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","a591d9bf":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:20], train.iloc[:,31:],\n                                                    test_size=0.3, random_state=0)","9463b0d1":"X_train.sample(5)","77f7c256":"y_train.sample(5)","bf7ef3dc":"model = Sequential()\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal', input_dim=20))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(1, activation='linear', kernel_initializer='random_normal'))","e5deb079":"model.compile(loss='mean_squared_error', optimizer='Adam', metrics=['accuracy'])","ca5b0a5c":"print(model.summary())","071ab593":"plot_model(model, to_file='NN3.png')","876a8ba3":"history = model.fit(X_train, y_train, epochs=500, batch_size=10)","622c78dd":"plt.plot(history.history['acc'])\n#plt.plot(history.history['val_acc'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","2e85128c":"# Plot training & validation loss values\nplt.plot(history.history['loss'])\n#plt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","56ef1b20":"y_pred = model.predict(X_test)","6f306e73":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","83d62416":"y_pred = y_pred.round(0)\ny_pred.head(5)","8c1a06ae":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","d4100188":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","36551b66":"print(classification_report(y_test, y_pred))","cfe011f3":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","76fdfe21":"x_train = test.iloc[:,:20]\nx_train.sample(5)","91426337":"y_pred = model.predict(x_train)","183b622e":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","054373cd":"y_pred = y_pred.round(0)\ny_pred.head(5)","d2151b06":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","c4d6382f":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","4cff1ba6":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","a1e79f1f":"print(classification_report(y_test, y_pred))","3c3fb6e8":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","283ba2df":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:20], train.iloc[:,31:],\n                                                    test_size=0.3, random_state=0)","fc86ba8d":"X_train.sample(5)","68e85414":"y_train.sample(5)","b8113372":"model = Sequential()\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal', input_dim=20))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(1, activation='linear', kernel_initializer='random_normal'))","cbd6bab0":"model.compile(loss='mean_squared_error', optimizer='Adam', metrics=['accuracy'])","e62f4196":"print(model.summary())","57dd4914":"plot_model(model, to_file='NN4.png')","ce6b5bcf":"history = model.fit(X_train, y_train, epochs=500, batch_size=10)","6805f01f":"plt.plot(history.history['acc'])\n#plt.plot(history.history['val_acc'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","62d70c33":"# Plot training & validation loss values\nplt.plot(history.history['loss'])\n#plt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","de1c9c87":"y_pred = model.predict(X_test)","e59b7962":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","571cac22":"y_pred = y_pred.round(0)\ny_pred.head(5)","d76ba50f":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","6552b838":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","ed4f9d62":"print(classification_report(y_test, y_pred))","05d3ddd7":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","4b8c9790":"x_train = test.iloc[:,:20]\nx_train.sample(5)","1ecff6ca":"y_pred = model.predict(x_train)","54fcb01f":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","549c34fd":"y_pred = y_pred.round(0)\ny_pred.head(5)","ad6dbf6b":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","524cc35a":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","cd0a9223":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","9bd15858":"print(classification_report(y_test, y_pred))","041dc610":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","6873e4a5":"X_train, X_test, y_train, y_test = train_test_split(pca_train10.iloc[:,:10], pca_train10.iloc[:,10:],\n                                                    test_size=0.3, random_state=0)","5ba7d995":"X_train.sample(5)","bd0cc493":"y_train.sample(5)","2adfd4ed":"model = Sequential()\nmodel.add(Dense(10, activation='linear', kernel_initializer='random_normal', input_dim=10))\nmodel.add(Dense(10, activation='relu', kernel_initializer='random_normal'))\nmodel.add(Dense(10, activation='relu', kernel_initializer='random_normal'))\nmodel.add(Dense(10, activation='relu', kernel_initializer='random_normal'))\nmodel.add(Dense(10, activation='relu', kernel_initializer='random_normal'))\nmodel.add(Dense(10, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(10, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(10, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(10, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(10, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(1, activation='linear', kernel_initializer='random_normal'))","46d43b28":"model.compile(loss='mean_squared_error', optimizer='Adam', metrics=['accuracy'])","aa08002c":"print(model.summary())","1d9b3851":"plot_model(model, to_file='NN5.png')","98d52b0f":"history = model.fit(X_train, y_train, epochs=5000, batch_size=15)","02e54406":"plt.plot(history.history['acc'])\n#plt.plot(history.history['val_acc'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","82bc448f":"# Plot training & validation loss values\nplt.plot(history.history['loss'])\n#plt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","58487d8e":"y_pred = model.predict(X_test)","7883d9b1":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","fdca1ab3":"y_pred = y_pred.round(0)\ny_pred.head(5)","7b47dd27":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","85970cc5":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","5511cb04":"print(classification_report(y_test, y_pred))","ccb25bd2":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","81586e26":"y_pred = model.predict(pca_test10.iloc[:,:10])","241daabe":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","4a00a2d9":"y_pred = y_pred.round(0)\ny_pred.head(5)","b937489a":"y_test = pca_test10.iloc[:,10:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","8ae25bcc":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","db42dc76":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","9ed7e7e1":"print(classification_report(y_test, y_pred))","1de2590f":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","a889ca1e":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:20], train.iloc[:,31:],\n                                                    test_size=0.3, random_state=0)","0c7afe97":"X_train.sample(5)","f6c8671a":"y_train.sample(5)","ae550444":"model = Sequential()\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal', input_dim=20))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(1, activation='linear', kernel_initializer='random_normal'))","4d6084d4":"model.compile(loss='mean_squared_error', optimizer='Adam', metrics=['accuracy'])","307dcdf0":"print(model.summary())","2a211fda":"plot_model(model, to_file='NN6.png')","b55cda0e":"history = model.fit(X_train, y_train, epochs=500, batch_size=10)","2518cafb":"plt.plot(history.history['acc'])\n#plt.plot(history.history['val_acc'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","1a941296":"# Plot training & validation loss values\nplt.plot(history.history['loss'])\n#plt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","ec42cc28":"y_pred = model.predict(X_test)","0db1a810":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","831265f7":"y_pred = y_pred.round(0)\ny_pred.head(5)","b6aba605":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","766ca3bb":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","ed13741f":"print(classification_report(y_test, y_pred))","1e8e4d5d":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","3c00c45c":"x_train = test.iloc[:,:20]\nx_train.sample(5)","237c2d92":"y_pred = model.predict(x_train)","36b4179a":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","0d282a10":"y_pred = y_pred.round(0)\ny_pred.head(5)","b6bc237b":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","85c36432":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","ba1213bd":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","e0af897b":"print(classification_report(y_test, y_pred))","87328f50":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","4cabca14":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:31], train.iloc[:,31:],\n                                                    test_size=0.3, random_state=0)","b3964111":"X_train.sample(5)","a40bfcf1":"y_train.sample(5)","9cd1b187":"model = Sequential()\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal', input_dim=31))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(1, activation='linear', kernel_initializer='random_normal'))","f33c71a4":"model.compile(loss='mean_squared_error', optimizer='Adam', metrics=['accuracy'])","74f40632":"print(model.summary())","4fefd5da":"plot_model(model, to_file='NN7.png')","0e846c80":"history = model.fit(X_train, y_train, epochs=500, batch_size=10)","83d04fe6":"plt.plot(history.history['acc'])\n#plt.plot(history.history['val_acc'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","1e23caa2":"# Plot training & validation loss values\nplt.plot(history.history['loss'])\n#plt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","19d5e4cd":"y_pred = model.predict(X_test)","5ee648d9":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","67e05011":"y_pred = y_pred.round(0)\ny_pred.head(5)","dbe320ba":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","f3cb3031":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","be14c5bc":"print(classification_report(y_test, y_pred))","9f559733":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","ffb64cc8":"x_train = test.iloc[:,:31]\nx_train.sample(5)","ae8f5702":"y_pred = model.predict(x_train)","f283efb0":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","83a8fefe":"y_pred = y_pred.round(0)\ny_pred.head(5)","5bad2787":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","9f2950c1":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","de037648":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","542b4f3f":"print(classification_report(y_test, y_pred))","ebbde3f1":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","e659b1ad":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:31], train.iloc[:,31:],\n                                                    test_size=0.3, random_state=0)","2807fd07":"X_train.sample(5)","80228d7c":"model = Sequential()\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal', input_dim=31))\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(1, activation='linear', kernel_initializer='random_normal'))","0bbb3995":"model.compile(loss='mean_squared_error', optimizer='Adam', metrics=['accuracy'])","52d0f63d":"print(model.summary())","db4e94c5":"plot_model(model, to_file='NN8.png')","44b8b717":"history = model.fit(X_train, y_train, epochs=500, batch_size=10)","4238814f":"plt.plot(history.history['acc'])\n#plt.plot(history.history['val_acc'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","58e1f30c":"# Plot training & validation loss values\nplt.plot(history.history['loss'])\n#plt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","d9810f01":"y_pred = model.predict(X_test)","026ea870":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","3d330fe6":"y_pred = y_pred.round(0)\ny_pred.head(5)","1ddce64c":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","378567a3":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","1764cd0f":"print(classification_report(y_test, y_pred))","c5390dc7":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","8892f92e":"x_train = test.iloc[:,:31]\nx_train.sample(5)","897d3f0a":"y_pred = model.predict(x_train)","c0dc6fe1":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","ae319db3":"y_pred = y_pred.round(0)\ny_pred.head(5)","078e1961":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","751ed4c2":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","8bbc69f4":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","8511ecba":"print(classification_report(y_test, y_pred))","ca647147":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","38b7cb86":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:31], train.iloc[:,31:],\n                                                    test_size=0.3, random_state=0)","845629b9":"X_train.sample(5)","e3cea476":"model = Sequential()\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal', input_dim=31))\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(20, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(1, activation='linear', kernel_initializer='random_normal'))","c0d10e70":"model.compile(loss='mean_squared_error', optimizer='Adam', metrics=['accuracy'])","89d9428c":"print(model.summary())","4b22209c":"plot_model(model, to_file='NN9.png')","bc5ace03":"history = model.fit(X_train, y_train, epochs=500, batch_size=10)","aeeef733":"plt.plot(history.history['acc'])\n#plt.plot(history.history['val_acc'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","405b4f43":"# Plot training & validation loss values\nplt.plot(history.history['loss'])\n#plt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","46b764d8":"y_pred = model.predict(X_test)","a738a218":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","486be12e":"y_pred = y_pred.round(0)\ny_pred.head(5)","04da610a":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","ddda16b5":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","9f0b6d27":"print(classification_report(y_test, y_pred))","7986cf21":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","5b39daf7":"x_train = test.iloc[:,:31]\nx_train.sample(5)","ad584bdb":"y_pred = model.predict(x_train)","6ff67b05":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","282fabd0":"y_pred = y_pred.round(0)\ny_pred.head(5)","89187c47":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","30f219af":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","bd2e8684":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","cea98e57":"print(classification_report(y_test, y_pred))","29adfb49":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","fafa1532":"X_train, X_test, y_train, y_test = train_test_split(train.iloc[:,:31], train.iloc[:,31:],\n                                                    test_size=0.3, random_state=0)","76abf941":"X_train.sample(5)","667ea589":"model = Sequential()\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal', input_dim=31))\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(31, activation='linear', kernel_initializer='random_normal'))\nmodel.add(Dense(1, activation='linear', kernel_initializer='random_normal'))","fd9b2a39":"model.compile(loss='mean_squared_error', optimizer='Adam', metrics=['accuracy'])","83c31c7d":"print(model.summary())","64dcdc66":"plot_model(model, to_file='NN10.png')","1c2e0462":"history = model.fit(X_train, y_train, epochs=1000, batch_size=10)","45faddd7":"plt.plot(history.history['acc'])\n#plt.plot(history.history['val_acc'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","4a82938e":"# Plot training & validation loss values\nplt.plot(history.history['loss'])\n#plt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","0efef03c":"y_pred = model.predict(X_test)","c14b9d98":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","d7015909":"y_pred = y_pred.round(0)\ny_pred.head(5)","4a8d81ed":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","fa848cc7":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","074595ea":"print(classification_report(y_test, y_pred))","3932b7e2":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","0285525d":"x_train = test.iloc[:,:31]\nx_train.sample(5)","b44644c0":"y_pred = model.predict(x_train)","26d53b17":"y_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","f09d895b":"y_pred = y_pred.round(0)\ny_pred.head(5)","392b7c75":"y_test = test.iloc[:,31:]\ny_test = y_test.reset_index(drop=True)\ny_test.head(5)","51da1043":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.sample(5)","e2291da9":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","045395f4":"print(classification_report(y_test, y_pred))","edd25d22":"count_misclassified = (common.price_range != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","aae98cc7":"### Naive Bayes with all parameters and price_range(with new features)\n<a id=\"nbapf\"><\/a>","bd5ee16d":"## PCA","6da12b6b":"## Neural Network(3 hidden layer, 500 epochs, with new features)","efb60993":"### Decision Tree with all parameters and price_range(without new features & entropy method)\n<a id= \"dter\"><\/a>","9287e777":"### KNN with all parameters and price_range(without new features & no-neighbors = 10)\n<a id=\"knnapr10\"><\/a>","344b0ec5":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#EDA\" data-toc-modified-id=\"EDA-0\"><span class=\"toc-item-num\">0&nbsp;&nbsp;<\/span>EDA<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#simple-Feature-enginering\" data-toc-modified-id=\"simple-Feature-enginering-0.1\"><span class=\"toc-item-num\">0.1&nbsp;&nbsp;<\/span>simple Feature enginering<\/a><\/span><\/li><li><span><a href=\"#PCA\" data-toc-modified-id=\"PCA-0.2\"><span class=\"toc-item-num\">0.2&nbsp;&nbsp;<\/span>PCA<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Classic-methods\" data-toc-modified-id=\"Classic-methods-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Classic methods<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Logestic-regerrision\" data-toc-modified-id=\"Logestic-regerrision-1.1\"><span class=\"toc-item-num\">1.1&nbsp;&nbsp;<\/span>Logestic regerrision<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Logestic-regerrision-ram-and-price_range\" data-toc-modified-id=\"Logestic-regerrision-ram-and-price_range-1.1.1\"><span class=\"toc-item-num\">1.1.1&nbsp;&nbsp;<\/span>Logestic regerrision ram and price_range<\/a><\/span><\/li><li><span><a href=\"#Logestic-regression-all-parameters-and-price_range(without-new-features)\" data-toc-modified-id=\"Logestic-regression-all-parameters-and-price_range(without-new-features)-1.1.2\"><span class=\"toc-item-num\">1.1.2&nbsp;&nbsp;<\/span>Logestic regression all parameters and price_range(without new features)<\/a><\/span><\/li><li><span><a href=\"#Logestic-regression-all-parameters-and-price_range(with-new-features)\" data-toc-modified-id=\"Logestic-regression-all-parameters-and-price_range(with-new-features)-1.1.3\"><span class=\"toc-item-num\">1.1.3&nbsp;&nbsp;<\/span>Logestic regression all parameters and price_range(with new features)<\/a><\/span><\/li><li><span><a href=\"#Logestic-regression-all-parameters-and-price_range(PCA-,-size-=-10)\" data-toc-modified-id=\"Logestic-regression-all-parameters-and-price_range(PCA-,-size-=-10)-1.1.4\"><span class=\"toc-item-num\">1.1.4&nbsp;&nbsp;<\/span>Logestic regression all parameters and price_range(PCA , size = 10)<\/a><\/span><\/li><li><span><a href=\"#Logestic-regression-all-parameters-and-price_range(PCA-,-size-=-15)\" data-toc-modified-id=\"Logestic-regression-all-parameters-and-price_range(PCA-,-size-=-15)-1.1.5\"><span class=\"toc-item-num\">1.1.5&nbsp;&nbsp;<\/span>Logestic regression all parameters and price_range(PCA , size = 15)<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Naive-Bayes\" data-toc-modified-id=\"Naive-Bayes-1.2\"><span class=\"toc-item-num\">1.2&nbsp;&nbsp;<\/span>Naive Bayes<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Naive-Bayes-ram-and-price_range\" data-toc-modified-id=\"Naive-Bayes-ram-and-price_range-1.2.1\"><span class=\"toc-item-num\">1.2.1&nbsp;&nbsp;<\/span>Naive Bayes ram and price_range<\/a><\/span><\/li><li><span><a href=\"#Naive-Bayes-with-all-parameters-and-price_range(without-new-features)\" data-toc-modified-id=\"Naive-Bayes-with-all-parameters-and-price_range(without-new-features)-1.2.2\"><span class=\"toc-item-num\">1.2.2&nbsp;&nbsp;<\/span>Naive Bayes with all parameters and price_range(without new features)<\/a><\/span><\/li><li><span><a href=\"#Naive-Bayes-with-all-parameters-and-price_range(with-new-features)\" data-toc-modified-id=\"Naive-Bayes-with-all-parameters-and-price_range(with-new-features)-1.2.3\"><span class=\"toc-item-num\">1.2.3&nbsp;&nbsp;<\/span>Naive Bayes with all parameters and price_range(with new features)<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#KNN\" data-toc-modified-id=\"KNN-1.3\"><span class=\"toc-item-num\">1.3&nbsp;&nbsp;<\/span>KNN<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#KNN-with-all-parameters-and-price_range(without-new-features-&amp;-no-neighbors-=-5)\" data-toc-modified-id=\"KNN-with-all-parameters-and-price_range(without-new-features-&amp;-no-neighbors-=-5)-1.3.1\"><span class=\"toc-item-num\">1.3.1&nbsp;&nbsp;<\/span>KNN with all parameters and price_range(without new features &amp; no-neighbors = 5)<\/a><\/span><\/li><li><span><a href=\"#KNN-with-all-parameters-and-price_range(without-new-features-&amp;-no-neighbors-=-10)\" data-toc-modified-id=\"KNN-with-all-parameters-and-price_range(without-new-features-&amp;-no-neighbors-=-10)-1.3.2\"><span class=\"toc-item-num\">1.3.2&nbsp;&nbsp;<\/span>KNN with all parameters and price_range(without new features &amp; no-neighbors = 10)<\/a><\/span><\/li><li><span><a href=\"#KNN-with-all-parameters-and-price_range(with-new-features-&amp;-no-neighbors-=-5)\" data-toc-modified-id=\"KNN-with-all-parameters-and-price_range(with-new-features-&amp;-no-neighbors-=-5)-1.3.3\"><span class=\"toc-item-num\">1.3.3&nbsp;&nbsp;<\/span>KNN with all parameters and price_range(with new features &amp; no-neighbors = 5)<\/a><\/span><\/li><li><span><a href=\"#KNN-with-all-parameters-and-price_range(with-new-features-&amp;-no-neighbors-=-10)\" data-toc-modified-id=\"KNN-with-all-parameters-and-price_range(with-new-features-&amp;-no-neighbors-=-10)-1.3.4\"><span class=\"toc-item-num\">1.3.4&nbsp;&nbsp;<\/span>KNN with all parameters and price_range(with new features &amp; no-neighbors = 10)<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#SVM\" data-toc-modified-id=\"SVM-1.4\"><span class=\"toc-item-num\">1.4&nbsp;&nbsp;<\/span>SVM<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#SVM-with-all-parameters-and-price_range(without-new-features-&amp;-kernel-=-linear)\" data-toc-modified-id=\"SVM-with-all-parameters-and-price_range(without-new-features-&amp;-kernel-=-linear)-1.4.1\"><span class=\"toc-item-num\">1.4.1&nbsp;&nbsp;<\/span>SVM with all parameters and price_range(without new features &amp; kernel = linear)<\/a><\/span><\/li><li><span><a href=\"#SVM-with-all-parameters-and-price_range(without-new-features-&amp;-kernel-=-polynomial)\" data-toc-modified-id=\"SVM-with-all-parameters-and-price_range(without-new-features-&amp;-kernel-=-polynomial)-1.4.2\"><span class=\"toc-item-num\">1.4.2&nbsp;&nbsp;<\/span>SVM with all parameters and price_range(without new features &amp; kernel = polynomial)<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Decision-Tree\" data-toc-modified-id=\"Decision-Tree-1.5\"><span class=\"toc-item-num\">1.5&nbsp;&nbsp;<\/span>Decision Tree<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Decision-Tree-with-all-parameters-and-price_range(without-new-features-&amp;-min-leaf-size-=-10)\" data-toc-modified-id=\"Decision-Tree-with-all-parameters-and-price_range(without-new-features-&amp;-min-leaf-size-=-10)-1.5.1\"><span class=\"toc-item-num\">1.5.1&nbsp;&nbsp;<\/span>Decision Tree with all parameters and price_range(without new features &amp; min leaf size = 10)<\/a><\/span><\/li><li><span><a href=\"#Decision-Tree-with-all-parameters-and-price_range(without-new-features-&amp;-gini-method)\" data-toc-modified-id=\"Decision-Tree-with-all-parameters-and-price_range(without-new-features-&amp;-gini-method)-1.5.2\"><span class=\"toc-item-num\">1.5.2&nbsp;&nbsp;<\/span>Decision Tree with all parameters and price_range(without new features &amp; gini method)<\/a><\/span><\/li><li><span><a href=\"#Decision-Tree-with-all-parameters-and-price_range(without-new-features-&amp;-entropy-method)\" data-toc-modified-id=\"Decision-Tree-with-all-parameters-and-price_range(without-new-features-&amp;-entropy-method)-1.5.3\"><span class=\"toc-item-num\">1.5.3&nbsp;&nbsp;<\/span>Decision Tree with all parameters and price_range(without new features &amp; entropy method)<\/a><\/span><\/li><li><span><a href=\"#Decision-Tree-with-all-parameters-and-price_range(with-new-features-&amp;-gini-method)\" data-toc-modified-id=\"Decision-Tree-with-all-parameters-and-price_range(with-new-features-&amp;-gini-method)-1.5.4\"><span class=\"toc-item-num\">1.5.4&nbsp;&nbsp;<\/span>Decision Tree with all parameters and price_range(with new features &amp; gini method)<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Random-Forest\" data-toc-modified-id=\"Random-Forest-1.6\"><span class=\"toc-item-num\">1.6&nbsp;&nbsp;<\/span>Random Forest<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Random-Forest-with-all-parameters-and-price_range(without-new-features)\" data-toc-modified-id=\"Random-Forest-with-all-parameters-and-price_range(without-new-features)-1.6.1\"><span class=\"toc-item-num\">1.6.1&nbsp;&nbsp;<\/span>Random Forest with all parameters and price_range(without new features)<\/a><\/span><\/li><li><span><a href=\"#Random-Forest-with-all-parameters-and-price_range(with-new-features)\" data-toc-modified-id=\"Random-Forest-with-all-parameters-and-price_range(with-new-features)-1.6.2\"><span class=\"toc-item-num\">1.6.2&nbsp;&nbsp;<\/span>Random Forest with all parameters and price_range(with new features)<\/a><\/span><\/li><\/ul><\/li><\/ul><\/li><li><span><a href=\"#Neural-Network\" data-toc-modified-id=\"Neural-Network-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Neural Network<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Neural-Network(3-hidden-layer,-2000-epochs,-without-new-features)\" data-toc-modified-id=\"Neural-Network(3-hidden-layer,-2000-epochs,-without-new-features)-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;<\/span>Neural Network(3 hidden layer, 2000 epochs, without new features)<\/a><\/span><\/li><li><span><a href=\"#Neural-Network(3-hidden-layer,-5000-epochs,-4output-,-without-new-features)\" data-toc-modified-id=\"Neural-Network(3-hidden-layer,-5000-epochs,-4output-,-without-new-features)-2.2\"><span class=\"toc-item-num\">2.2&nbsp;&nbsp;<\/span>Neural Network(3 hidden layer, 5000 epochs, 4output , without new features)<\/a><\/span><\/li><li><span><a href=\"#Neural-Network(5-hidden-layer,-500-epochs,-without-new-features)\" data-toc-modified-id=\"Neural-Network(5-hidden-layer,-500-epochs,-without-new-features)-2.3\"><span class=\"toc-item-num\">2.3&nbsp;&nbsp;<\/span>Neural Network(5 hidden layer, 500 epochs, without new features)<\/a><\/span><\/li><li><span><a href=\"#Neural-Network(10-hidden-layer,-500-epochs,-without-new-features)\" data-toc-modified-id=\"Neural-Network(10-hidden-layer,-500-epochs,-without-new-features)-2.4\"><span class=\"toc-item-num\">2.4&nbsp;&nbsp;<\/span>Neural Network(10 hidden layer, 500 epochs, without new features)<\/a><\/span><\/li><li><span><a href=\"#Neural-Network(10-hidden-layer,-5000-epochs,-PCA-10,-without-new-features)\" data-toc-modified-id=\"Neural-Network(10-hidden-layer,-5000-epochs,-PCA-10,-without-new-features)-2.5\"><span class=\"toc-item-num\">2.5&nbsp;&nbsp;<\/span>Neural Network(10 hidden layer, 5000 epochs, PCA-10, without new features)<\/a><\/span><\/li><li><span><a href=\"#Neural-Network(15-hidden-layer,-500-epochs,-without-new-features)\" data-toc-modified-id=\"Neural-Network(15-hidden-layer,-500-epochs,-without-new-features)-2.6\"><span class=\"toc-item-num\">2.6&nbsp;&nbsp;<\/span>Neural Network(15 hidden layer, 500 epochs, without new features)<\/a><\/span><\/li><li><span><a href=\"#Neural-Network(3-hidden-layer,-500-epochs,-with-new-features)\" data-toc-modified-id=\"Neural-Network(3-hidden-layer,-500-epochs,-with-new-features)-2.7\"><span class=\"toc-item-num\">2.7&nbsp;&nbsp;<\/span>Neural Network(3 hidden layer, 500 epochs, with new features)<\/a><\/span><\/li><li><span><a href=\"#Neural-Network(5-hidden-layer,-500-epochs,-with-new-features)\" data-toc-modified-id=\"Neural-Network(5-hidden-layer,-500-epochs,-with-new-features)-2.8\"><span class=\"toc-item-num\">2.8&nbsp;&nbsp;<\/span>Neural Network(5 hidden layer, 500 epochs, with new features)<\/a><\/span><\/li><li><span><a href=\"#Neural-Network(10-hidden-layer,-500-epochs,-with-new-features)\" data-toc-modified-id=\"Neural-Network(10-hidden-layer,-500-epochs,-with-new-features)-2.9\"><span class=\"toc-item-num\">2.9&nbsp;&nbsp;<\/span>Neural Network(10 hidden layer, 500 epochs, with new features)<\/a><\/span><\/li><li><span><a href=\"#Neural-Network(15-hidden-layer,-1000-epochs,-with-new-features)\" data-toc-modified-id=\"Neural-Network(15-hidden-layer,-1000-epochs,-with-new-features)-2.10\"><span class=\"toc-item-num\">2.10&nbsp;&nbsp;<\/span>Neural Network(15 hidden layer, 1000 epochs, with new features)<\/a><\/span><\/li><\/ul><\/li><\/ul><\/div>","74d49f1f":"### Random Forest with all parameters and price_range(without new features)\n<a id=\"rfapr\"><\/a>","7c79b23d":"## simple Feature enginering\n<a id = \"fe\" ><\/a>","ba51aa8e":"### KNN with all parameters and price_range(with new features & no-neighbors = 10)\n<a id =\"knnapf10\"><\/a>","d6ddd888":"### KNN with all parameters and price_range(with new features & no-neighbors = 5)\n<a id =\"knnapf5\"><\/a>","8248df70":"Add feature\n\n$$px_{total} = px_{height} * px_{width}$$\n\n$$3\\&4g = three_g * four_g $$\n\n$$sc_{total} = sc_w * sc_h$$ \n\n$$volume = sc_w * sc_h * m_{dep} $$\n\n$$battry = battery_{power} * talk-time$$\n\n$$battry-per-talk = \\frac{battery_{power}}{talk-time}$$\n\n$$cal = clock-speed * ram $$\n\n$$ram per clock = \\frac{ram}{clock-speed} $$\n\n$$clock-per-ram = \\frac{clock-speed}{ram}$$\n\n$$memory-per-ram = \\frac{memory}{ram} $$\n\n$$ram-per-memory = \\frac{ram}{memory} $$","c00d3144":"### SVM with all parameters and price_range(without new features & kernel = linear)\n<a id =\"svmaplr\"><\/a>","2ff1bd14":"### Logestic regression all parameters and price_range(with new features) \n<a id=\"lrapf\"><\/a>","32bbecbc":"### Logestic regerrision ram and price_range\n<a id=\"lrrp\"><\/a>","2ceeb591":"## Neural Network(10 hidden layer, 500 epochs, without new features)","925c1517":"### Logestic regression all parameters and price_range(PCA , size = 10) ","2b217169":"### Decision Tree with all parameters and price_range(without new features & min leaf size = 10)\n<a id=\"dtlr10\"><\/a>","a45529f0":"### Random Forest with all parameters and price_range(with new features)\n<a id=\"rfapf\"><\/a>","b3bcecc1":"the output is vector size 4 if data belong to class i coloum i = 1","b943bc00":"### Logestic regression all parameters and price_range(without new features)\n<a id = \"lrapr\"><\/a>","9407c1e4":"## Naive Bayes\n<a id = \"nb\" ><\/a>","ece950df":"#  EDA \n<a id = \"eda\" ><\/a>","df1584d8":"## Random Forest\n<a id=\"rf\"><\/a>","cffb400c":"## Neural Network(3 hidden layer, 2000 epochs, without new features)","6d8dcd14":"### SVM with all parameters and price_range(without new features & kernel = polynomial)\n<a id =\"svmappr\"><\/a>\n\ndont use new features","1659e74a":"## SVM\n<a id=\"svm\"><\/a>","45301bb4":"## Neural Network(5 hidden layer, 500 epochs, without new features)","4931fe76":"### Decision Tree with all parameters and price_range(without new features & gini method)\n<a id =\"dtgr\"><\/a>","00206965":"## Neural Network(10 hidden layer, 500 epochs, with new features)","eac79c74":"## Neural Network(5 hidden layer, 500 epochs, with new features)","28992fbf":"## Decision Tree \n<a id=\"dt\"><\/a>","fc4b0ce3":"## Neural Network(10 hidden layer, 5000 epochs, PCA-10, without new features)","e6f6bf47":"## Neural Network(15 hidden layer, 500 epochs, without new features)","b9f0a8fa":"# Neural Network","f675a8f6":"### KNN with all parameters and price_range(without new features & no-neighbors = 5)\n<a id = \"knnapr5\"><\/a>","14335bfe":"# Classic methods\n<a id = \"classic\" ><\/a>","f8fa2661":"### Decision Tree with all parameters and price_range(with new features & gini method)\n<a id= \"dtgf\"><\/a>","cf293e45":"### Naive Bayes with all parameters and price_range(without new features)\n<a id=\"nbapr\"><\/a>","804b59ea":"## KNN\n<a id=\"knn\"><\/a>","38d9cc2a":"## Neural Network(15 hidden layer, 1000 epochs, with new features)","66da6686":"### Logestic regression all parameters and price_range(PCA , size = 15) ","22883a41":"## Logestic regerrision\n<a id = \"lr\" ><\/a>","4462250a":"## Neural Network(3 hidden layer, 5000 epochs, 4output , without new features)","b1d20087":"### Naive Bayes ram and price_range"}}