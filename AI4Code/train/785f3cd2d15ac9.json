{"cell_type":{"26924812":"code","f34f00d9":"code","bb5baf15":"code","38583744":"code","992f9444":"code","69994ac5":"code","81d4ad8a":"code","de6d1696":"code","109e6a65":"code","dfa15a66":"code","96cd9d6c":"code","294e997f":"code","c780d44e":"code","a418baf8":"code","e4333b07":"code","f9463e21":"code","547788f8":"code","99dbc287":"code","0ccda504":"code","a146e3ec":"code","c42d6756":"code","a8beb3eb":"code","b35b4d59":"code","05c94229":"code","ae113800":"code","6d1a1453":"code","de953ab3":"code","24a6bd7f":"code","25fd15c0":"code","e52039de":"code","2570c04a":"code","81095674":"code","c74e2828":"code","bd0288ae":"code","4eda43c0":"code","5516111c":"code","13846a3a":"code","d529238f":"code","d2f75e7a":"code","f48f5073":"code","c8801fc9":"code","a1811747":"code","ebbf4724":"code","da5ca58e":"code","d35a6ec9":"code","f107c529":"code","a62192ba":"code","1f2703de":"code","c86ca3b9":"code","39789f59":"code","bbf7bde1":"markdown","a49f9a0c":"markdown","4da9869d":"markdown","75cd6ab2":"markdown","95c9093a":"markdown","453afd50":"markdown","c2b29ff8":"markdown","c539fb4f":"markdown","847803d3":"markdown","28f7905f":"markdown"},"source":{"26924812":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f34f00d9":"#Import the libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#Import Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\n\n#Import Scaler\nfrom sklearn.preprocessing import StandardScaler","bb5baf15":"#read the data\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain.head()","38583744":"#wrting a function to inspect the data inspection\ndef data_inv(df):\n    print('Number of Persons: ',df.shape[0])\n    print('dataset variables: ',df.shape[1])\n    print('-'*20)\n    print('dateset columns: \\n')\n    print(df.columns)\n    print('-'*20)\n    print('data-type of each column: \\n')\n    print(df.dtypes)\n    print('-'*20)\n    print('missing rows in each column: \\n')\n    c=df.isnull().sum()\n    print(c[c>0])\n    print('-'*20)\n    print('Missing vaules %age vise:\\n')\n    print((100*(df.isnull().sum()\/len(df.index))))\n    print('-'*20)\n    print('Pictorial Representation:')\n    plt.figure(figsize=(8,6))\n    sns.heatmap(df.isnull(), yticklabels=False,cbar=False, cmap='viridis')\n    plt.show()   \ndata_inv(train)","992f9444":"#inspecting the test data\ndata_inv(test)","69994ac5":"# Analysing the Target variable to check if the data is balanced\nsns.set_style('whitegrid')\nsns.countplot(x='Survived', data = train)\nplt.show()","81d4ad8a":"plt.figure(figsize=(12,12))\n# Analying the Pclass\nplt.subplot(2,3,1)\nsns.countplot(x='Pclass', data = train)\n\n\n#Analysing the sex\nplt.subplot(2,3,2)\nsns.countplot(x='Sex', data = train)\n\n\n#Analysing the SibSP\nplt.subplot(2,3,3)\nsns.countplot(x='Pclass', data = train)\nplt.show()\n\nplt.figure(figsize=(12,12))\n#Analysing the Parch\nplt.subplot(2,3,4)\nsns.countplot(x='Parch', data = train)\n#Analysing the Embarkment\nplt.subplot(2,3,5)\nsns.countplot(x='Embarked', data = train)\n#analysing the SibSp\nplt.subplot(2,3,6)\nsns.countplot(x='SibSp', data = train)\nplt.show()","de6d1696":"#checking the Survived \n\n# Writing the function for ploting the Categorical variable Vs the Traget Variable\ndef plotting(x):\n    survived = train[train['Survived'] == 1][x].value_counts()\n    not_survived = train[train['Survived'] == 0][x].value_counts()\n    df = pd.DataFrame([survived,not_survived])\n    df.index = ['Survived','not_survived']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","109e6a65":"plotting('Pclass')","dfa15a66":"plotting('Sex')","96cd9d6c":"plotting('SibSp')","294e997f":"plotting('Parch')","c780d44e":"plotting('Embarked')","a418baf8":"#cabin has a lot of missing values in both the test & train data so dropping those\ntrain.drop('Cabin', axis=1, inplace=True)\ntest.drop('Cabin', axis=1, inplace=True)","e4333b07":"# To handle the age, Extarcting the title (mr,mrs etc) from names col for age imputattion\ntrain_test_df = [test, train]\n\nfor data in train_test_df:\n    data['Tittle'] = data['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","f9463e21":"train.groupby(\"Tittle\")[\"Age\"].mean()","547788f8":"# fill missing age with median age for each title (Mr, Mrs, Miss, Others)\ntrain[\"Age\"].fillna(train.groupby(\"Tittle\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Tittle\")[\"Age\"].transform(\"median\"), inplace=True)","99dbc287":"#checking the ,missing value in train data\ndata_inv(train)","0ccda504":"train.dropna(inplace=True)\ndata_inv(train)","a146e3ec":"#checking for missing values in test data\ndata_inv(test)","c42d6756":"test.Age.fillna(test.Age.mean(), inplace=True)\ntest.Fare.fillna(test.Fare.mean(), inplace=True)","a8beb3eb":"train.info()","b35b4d59":"train.head()","05c94229":"train.drop(['Name', 'Ticket', 'Tittle'], axis =1, inplace=True)","ae113800":"train.head()","6d1a1453":"train_categorical = train.select_dtypes(include='object')\ntrain_categorical.head()","de953ab3":"train_categorical_dummies = pd.get_dummies(train_categorical,drop_first=True)\ntrain_categorical_dummies.head()","24a6bd7f":"train =  train.drop(train_categorical,axis=1)\ntrain.shape","25fd15c0":"#concatenate\ntrain = pd.concat([train, train_categorical_dummies], axis =1)\ntrain.head()","e52039de":"test.head()","2570c04a":"#run from above\ntest.drop(['Name', 'Ticket', 'Tittle'], axis =1, inplace=True)\ntest_categorical = test.select_dtypes(include='object')\ntest_categorical.head()","81095674":"test.shape","c74e2828":"test_categorical_dummies = pd.get_dummies(test_categorical,drop_first=True)\ntest_categorical_dummies.head()\n","bd0288ae":"test =  test.drop(test_categorical,axis=1)\ntrain.shape","4eda43c0":"#concatenate\ntest = pd.concat([test, test_categorical_dummies], axis =1)\ntest.head()","5516111c":"train.head()","13846a3a":"test.head()","d529238f":"#Define X & y\nX_train = train.drop(['Survived'], axis = 1)\ny_train = train['Survived']\n","d2f75e7a":"X_train.head()","f48f5073":"test.head()","c8801fc9":"scaler = StandardScaler()\nX_train[['Age', 'Fare']] = scaler.fit_transform(X_train[['Age', 'Fare']])\nX_train.head()","a1811747":"X_test = test","ebbf4724":"X_test.head()","da5ca58e":"X_test[['Age', 'Fare']] = scaler.transform(X_test[['Age', 'Fare']])","d35a6ec9":"X_test.isnull().sum()","f107c529":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","a62192ba":"X_train.info()","1f2703de":"predictions = logmodel.predict(X_test)","c86ca3b9":"predictions","39789f59":"output = pd.DataFrame({\n                    'PassengerId': test.PassengerId,\n                    'Survived' : predictions\n})\n\noutput.to_csv('my_submission_logisticregression.csv', index=False)\nprint(\"Your submission was successfully saved!\")","bbf7bde1":"## Exploratory data analysis\n_In this process we'll try to check the independent variable with respect to dependent variable_","a49f9a0c":"# Data Preparation\n\n> In this section, we do some data prepration techniques & drop the variable which will not help in the model building","4da9869d":"## The Categorical Features are as follows\n\n  - Pclass\n  - Sex\n  - SibSp ( # of siblings and spouse)\n  - Parch ( # of parents and children)\n  - Embarked\n  - Cabin","75cd6ab2":"![titanic.jpg](attachment:titanic.jpg)\n\n\n# Titanic Prediction.\n\nThis was my first attempt on a kaggle competition, this kernal is very very basic & uses Logistic Regression,the following steps were done in the following:\n\n- Reading & Understanding the data.\n- Exploratory data analysis.\n- Missing value treatment.\n- Finally Model building.","95c9093a":"> Age, Cabin & Embarked, has missing values so we will check the same in a while.","453afd50":"## Mising Value Treatment\n\n> Cabin variable has a lot of missing values, so dropping the same from both the test & train dataframes","c2b29ff8":"# Model Building\n## Logistic Regression","c539fb4f":"> Age also has missing values, so to handle the age ,missing values, I am fetching the title of the name & based on the title, I'll try to impute the age.","847803d3":"## Data Inspection","28f7905f":"> Now I have imputed the missing values & go ahead & check the data again."}}