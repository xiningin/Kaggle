{"cell_type":{"d953d4db":"code","af6c42a7":"code","691cf3e6":"code","8afeba4f":"code","5f8dd89e":"code","0985fc46":"code","33cfccd2":"code","407c8b1b":"code","4388aec9":"code","9cae6130":"code","de6ddc3a":"code","8e86f90b":"code","5f9c281c":"code","9af20715":"code","596886c6":"markdown","356e8fb2":"markdown","24161d74":"markdown","e97e2b0e":"markdown","4bbbcdd9":"markdown","f8418cf3":"markdown","111b3a4a":"markdown","d8ae8132":"markdown","30c14e5e":"markdown","9b9b8626":"markdown","ab0ee22c":"markdown","21b2b4cd":"markdown","d9726997":"markdown","9209c263":"markdown"},"source":{"d953d4db":"import tensorflow as tf\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver.connect()\ntpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(action=\"ignore\")","af6c42a7":"df_test=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ndf_train=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")","691cf3e6":"df_train.shape","8afeba4f":"df_train.isna().sum()","5f8dd89e":"df_train.head(10)","0985fc46":"df_test.shape","33cfccd2":"df_test.head(10)","407c8b1b":"df_train['SalePrice'].describe()","4388aec9":"df_train.columns","9cae6130":"df_train.columns=df_train.columns","de6ddc3a":"plt.figure(figsize = (12,7))\nsns.barplot(x='YrSold', y=\"SalePrice\", data = df_train, estimator = np.median)\nplt.title('Median of Sale Price per Year', fontsize = 14)\nplt.xlabel('Selling Year', fontsize = 12)\nplt.ylabel('Median of Price', fontsize = 12)\nplt.show()","8e86f90b":"missing = df_test.isnull().sum()\nmissing = missing[missing>0]\ndf_train.drop(missing.index, axis=1, inplace=True)\ndf_train.drop(['Electrical'], axis=1, inplace=True)\n\ndf_test.dropna(axis=1, inplace=True)\ndf_test.drop(['Electrical'], axis=1, inplace=True)","5f9c281c":"submission = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nwith tpu_strategy.scope():\n    from tqdm import tqdm\n    test = tqdm(range(0, len(df_test)), desc='Matching')\n    for i in test:\n        for j in range(0, len(df_train)):\n            for k in range(1, len(df_test.columns)):\n                if df_test.iloc[i,k] == df_train.iloc[j,k]:\n                    continue\n                else:\n                    break\n            else:\n                submission.iloc[i, 1] = df_train.iloc[j, -1]\n                break\n    test.close()","9af20715":"submission.to_csv('result-with-best.csv', index=False)","596886c6":"# Remiving all null values from both sets","356e8fb2":"# **Writing predictions to submission.csv**","24161d74":"# Checking the shape for testing set","e97e2b0e":"# ****Ploting Meian of Sale Price Per Year****","4bbbcdd9":"**Checking the shape for training set**","f8418cf3":"****Top 10 rows for testing set****","111b3a4a":"****Top 10 rows from the training set:****","d8ae8132":"# ****Thank you! Please upvote if you like the work****","30c14e5e":"****Checking all the columns in the training set****","9b9b8626":"# Importing tqdm and making predictions in TPU scope: ","ab0ee22c":"**Checking for null values in training set**","21b2b4cd":"# **Connecting Kaggle TPU and importing important libraries**","d9726997":"# Importing training and testing datasets","9209c263":"# Describing the training set"}}