{"cell_type":{"dca919d5":"code","44cea32b":"code","e10c498e":"code","c354e213":"code","b8f1d78e":"code","eccb65d8":"code","11cfe622":"code","aeac71bc":"code","521ab54a":"code","3758807c":"code","1e93472f":"code","2bf9c5bf":"code","5cb66c2f":"code","26e0c987":"code","5963f239":"code","d14e54bf":"code","22d1cbdb":"code","1903355e":"code","53ecf016":"code","d1fcf465":"code","cd125a2b":"code","54151266":"code","16ce5a55":"code","436fa51e":"code","5c72741f":"code","b83da88f":"code","4485ab90":"code","e31fb89a":"code","5754b08d":"code","86586f73":"code","28408866":"code","7bb88861":"code","85e6c8cd":"code","d022ab72":"code","3b6938bc":"code","8aa5d501":"code","04ca3f9c":"code","ccdda974":"code","0703d23d":"code","75ecfdd0":"code","6063271b":"code","24e01311":"code","eb9de3ec":"code","37082bf4":"code","1556d212":"code","12057bbd":"code","a88d377d":"code","1b9b33c0":"code","7427cf94":"code","4e2eebc1":"markdown","4004bf47":"markdown","183af71c":"markdown","c0045156":"markdown","a873d671":"markdown","9afb3221":"markdown","b3df5e13":"markdown","644d6bf6":"markdown","32cf7404":"markdown","c75d6d1c":"markdown","c543b42c":"markdown","961fd913":"markdown","1ed89c93":"markdown","d8487c37":"markdown","8019f402":"markdown","0a44a36a":"markdown","5739ed97":"markdown","4db06a0e":"markdown","f1510d54":"markdown","904ccd0a":"markdown","fa3f466d":"markdown","302780dc":"markdown","74597396":"markdown","55713c73":"markdown","b8aad251":"markdown","c8330aa3":"markdown","553c0209":"markdown","bcc9f976":"markdown","31b97f15":"markdown","8a8e24bc":"markdown","db6b719b":"markdown","cc9e3f56":"markdown","4aa22052":"markdown","a4390878":"markdown","b247cc1f":"markdown","a82ea1fa":"markdown","4ee597a5":"markdown","d4031288":"markdown","eca63d0b":"markdown"},"source":{"dca919d5":"import numpy as np\nimport pandas as pd\nimport string\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette\n\n%matplotlib inline\n\nfrom plotly import tools, subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport warnings\nwarnings.filterwarnings(\"ignore\")","44cea32b":"ls ..\/input\/quora-insincere-questions-classification","e10c498e":"from zipfile import ZipFile \n!unzip ..\/input\/quora-insincere-questions-classification\/embeddings","c354e213":"!ls \/kaggle\/working\/","b8f1d78e":"train_path = \"..\/input\/quora-insincere-questions-classification\/train.csv\"\ntest_path = \"..\/input\/quora-insincere-questions-classification\/test.csv\"\ntrain_data = pd.read_csv(train_path)\ntest_data = pd.read_csv(test_path)","eccb65d8":"print(f\"There are {train_data.shape[0]} Rows and {train_data.shape[1]} Columns inside train data\")\nprint(f\"There are {train_data.shape[0]} questions in total in the training dataset\")\nprint(f\"There are {test_data.shape[0]} Rows and {test_data.shape[1]} Columns inside test data\")\nprint(f\"There are {test_data.shape[0]} questions in total in the test dataset\")","11cfe622":"train_data.info()","aeac71bc":"test_data.info()","521ab54a":"target_count = train_data['target'].value_counts()\nprint(target_count)","3758807c":"target_count = train_data['target'].value_counts()\n\nbarchart_data = go.Bar(\n    x=target_count.index,\n    y=target_count.values,\n    marker=dict(\n        color=target_count.values,\n        colorscale = 'Picnic',\n        reversescale = True\n    ),\n)\n\nlayout = go.Layout(\n    title='Target Count',\n    font=dict(size=18)\n)\n\ndata = [barchart_data]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"TargetCount\")\n\n","1e93472f":"# target distribution\nlabels = (np.array(target_count.index))\nsizes = (np.array((target_count \/ target_count.sum())*100))\n\npiechart_trace = go.Pie(labels=labels, values=sizes)\nlayout = go.Layout(\n    title='Target distribution',\n    font=dict(size=18),\n    width=600,\n    height=600,\n)\ndata = [piechart_trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"target_distribution\")","2bf9c5bf":"# Word Cloud for all training questions\nfrom wordcloud import WordCloud, STOPWORDS\n\n# custom function for plotting the word cloud\ndef plot_wordcloud(text, mask=None, max_words=200, max_font_size=100, figure_size=(24.0,16.0), \n                   title = None, title_size=40, image_color=False):\n    stopwords = set(STOPWORDS)\n    more_stopwords = {'one', 'br', 'Po', 'th', 'sayi', 'fo', 'Unknown'}\n    stopwords = stopwords.union(more_stopwords)\n\n    wordcloud = WordCloud(background_color='black',\n                    stopwords = stopwords,\n                    max_words = max_words,\n                    max_font_size = max_font_size, \n                    random_state = 42,\n                    width=800, \n                    height=400,\n                    mask = mask)\n    wordcloud.generate(str(text))\n    \n    plt.figure(figsize=figure_size)\n    \n    plt.imshow(wordcloud);\n    plt.title(title, fontdict={'size': title_size, 'color': 'black', \n                                  'verticalalignment': 'bottom'})\n    plt.axis('off');\n    plt.tight_layout()  \n    \nplot_wordcloud(train_data[\"question_text\"], title=\"Word Cloud of Questions\")","5cb66c2f":"# Word cloud for sincere questions Before Data Preprocessing\nplot_wordcloud(train_data[train_data[\"target\"] == 0][\"question_text\"], title=\"Word Cloud of Sincere Questions\")","26e0c987":"# Word cloud for insincere questions before  Data Preprocessing\nplot_wordcloud(train_data[train_data[\"target\"] == 1][\"question_text\"], title=\"Word Cloud of Insincere Questions\")","5963f239":"from collections import defaultdict\n# Separate the sincere questions from training dataset\ntrain_sincere_data = train_data[train_data[\"target\"] == 0]\ntrain_insincere_data = train_data[train_data[\"target\"] == 1]\n\n# Next step is generating barchart for both the classes\ndef generate_ngrams(text, n_gram=1):\n    token = [token for token in text.lower().split(\" \") if token != \"\" if token not in STOPWORDS]\n    ngrams = zip(*[token[i:] for i in range(n_gram)])\n    return [\" \".join(ngram) for ngram in ngrams]\n\n# custom function for horizontal bar chart\ndef horizontal_bar_chart(df, color):\n    trace = go.Bar(\n        y=df[\"word\"].values[::-1],\n        x=df[\"wordcount\"].values[::-1],\n        showlegend=False,\n        orientation = 'h',\n        marker=dict(\n            color=color,\n        ),\n    )\n    return trace\n\n# Bar chart for frequent words sincere questions\nsincere_dict = defaultdict(int)\nfor text in train_sincere_data[\"question_text\"]:\n    for word in generate_ngrams(text):\n        sincere_dict[word] += 1\n        \nsincere_dict_sorted = pd.DataFrame(sorted(sincere_dict.items(), key=lambda x: x[1])[::-1])\nsincere_dict_sorted.columns = [\"word\", \"wordcount\"]\ntrace_sincere = horizontal_bar_chart(sincere_dict_sorted.head(50), 'red')\n\n# Bar chart for frequent words insincere questions\ninsincere_dict = defaultdict(int)\nfor text in train_insincere_data[\"question_text\"]:\n    for word in generate_ngrams(text):\n        insincere_dict[word] += 1\ninsincere_dict_sorted = pd.DataFrame(sorted(insincere_dict.items(), key=lambda x: x[1])[::-1])\ninsincere_dict_sorted.columns = [\"word\", \"wordcount\"]\ntrace_insincere = horizontal_bar_chart(insincere_dict_sorted.head(50), 'red')\n\n# Creating two subplots\nfig = subplots.make_subplots(rows=1, cols=2, vertical_spacing=0.04,\n                          subplot_titles=[\"Frequent words of sincere questions\", \n                                          \"Frequent words of insincere questions\"])\nfig.append_trace(trace_sincere, 1, 1)\nfig.append_trace(trace_insincere, 1, 2)\nfig['layout'].update(height=1200, width=900, paper_bgcolor='rgb(233,233,233)', title=\"Word Count Plots\")\npy.iplot(fig, filename='word-plots')","d14e54bf":"# Bar chart for frequent words sincere questions\nsincere_dict = defaultdict(int)\nfor text in train_sincere_data[\"question_text\"]:\n    for word in generate_ngrams(text, 2):\n        sincere_dict[word] += 1\n        \nsincere_dict_sorted = pd.DataFrame(sorted(sincere_dict.items(), key=lambda x: x[1])[::-1])\nsincere_dict_sorted.columns = [\"word\", \"wordcount\"]\ntrace_sincere = horizontal_bar_chart(sincere_dict_sorted.head(50), 'blue')\n\n# Bar chart for frequent words insincere questions\ninsincere_dict = defaultdict(int)\nfor text in train_insincere_data[\"question_text\"]:\n    for word in generate_ngrams(text, 2):\n        insincere_dict[word] += 1\ninsincere_dict_sorted = pd.DataFrame(sorted(insincere_dict.items(), key=lambda x: x[1])[::-1])\ninsincere_dict_sorted.columns = [\"word\", \"wordcount\"]\ntrace_insincere = horizontal_bar_chart(insincere_dict_sorted.head(50), 'blue')\n\n# Creating two subplots\nfig = subplots.make_subplots(rows=1, cols=2, vertical_spacing=0.04,\n                          subplot_titles=[\"Frequent words of sincere questions\", \n                                          \"Frequent words of insincere questions\"])\nfig.append_trace(trace_sincere, 1, 1)\nfig.append_trace(trace_insincere, 1, 2)\nfig['layout'].update(height=1200, width=900, paper_bgcolor='rgb(233,233,233)', title=\"Word Count Plots\")\npy.iplot(fig, filename='word-plots')","22d1cbdb":"# Bar chart for frequent words sincere questions\nsincere_dict = defaultdict(int)\nfor text in train_sincere_data[\"question_text\"]:\n    for word in generate_ngrams(text, 3):\n        sincere_dict[word] += 1\n        \nsincere_dict_sorted = pd.DataFrame(sorted(sincere_dict.items(), key=lambda x: x[1])[::-1])\nsincere_dict_sorted.columns = [\"word\", \"wordcount\"]\ntrace_sincere = horizontal_bar_chart(sincere_dict_sorted.head(50), 'green')\n\n# Bar chart for frequent words insincere questions\ninsincere_dict = defaultdict(int)\nfor text in train_insincere_data[\"question_text\"]:\n    for word in generate_ngrams(text, 3):\n        insincere_dict[word] += 1\ninsincere_dict_sorted = pd.DataFrame(sorted(insincere_dict.items(), key=lambda x: x[1])[::-1])\ninsincere_dict_sorted.columns = [\"word\", \"wordcount\"]\ntrace_insincere = horizontal_bar_chart(insincere_dict_sorted.head(50), 'green')\n\n# Creating two subplots\nfig = subplots.make_subplots(rows=1, cols=2, vertical_spacing=0.04, horizontal_spacing=0.2,\n                          subplot_titles=[\"Frequent words of sincere questions\", \n                                          \"Frequent words of insincere questions\"])\nfig.append_trace(trace_sincere, 1, 1)\nfig.append_trace(trace_insincere, 1, 2)\nfig['layout'].update(height=1200, width=900, paper_bgcolor='rgb(233,233,233)', title=\"Word Count Plots\")\npy.iplot(fig, filename='word-plots')","1903355e":"# Number of words in the text\ntrain_data[\"num_words\"] = train_data[\"question_text\"].apply(lambda x: len(str(x).split()))\ntest_data[\"num_words\"] = test_data[\"question_text\"].apply(lambda x: len(str(x).split()))\n\n# Number of unique words in the text\ntrain_data[\"num_unique_words\"] = train_data[\"question_text\"].apply(lambda x: len(set(str(x).split())))\ntest_data[\"num_unique_words\"] = test_data[\"question_text\"].apply(lambda x: len(set(str(x).split())))\n\n# Number of characters in the text\ntrain_data[\"num_chars\"] = train_data[\"question_text\"].apply(lambda x: len(str(x)))\ntest_data[\"num_chars\"] = test_data[\"question_text\"].apply(lambda x: len(str(x)))\n\n# Number of stopwords in the text\ntrain_data[\"num_stopwords\"] = train_data[\"question_text\"].apply(lambda x: len([w for w in str(x).lower().split() if w in STOPWORDS]))\ntest_data[\"num_stopwords\"] = test_data[\"question_text\"].apply(lambda x: len([w for w in str(x).lower().split() if w in STOPWORDS]))\n\n# Number of punctuations in the text\ntrain_data[\"num_punctuations\"] = train_data['question_text'].apply(lambda x: len([c for c in str(x) if c in string.punctuation]) )\ntest_data[\"num_punctuations\"] = test_data['question_text'].apply(lambda x: len([c for c in str(x) if c in string.punctuation]) )\n\n# Number of title case words in the text\ntrain_data[\"num_words_upper\"] = train_data[\"question_text\"].apply(lambda x: len([w for w in str(x).split() if w.isupper()]))\ntest_data[\"num_words_upper\"] = test_data[\"question_text\"].apply(lambda x: len([w for w in str(x).split() if w.isupper()]))\n\n# Number of title case words in the text\ntrain_data[\"num_words_title\"] = train_data[\"question_text\"].apply(lambda x: len([w for w in str(x).split() if w.istitle()]))\ntest_data[\"num_words_title\"] = test_data[\"question_text\"].apply(lambda x: len([w for w in str(x).split() if w.istitle()]))\n\n# Average length of the words in the text\ntrain_data[\"mean_word_len\"] = train_data[\"question_text\"].apply(lambda x: np.mean([len(w) for w in str(x).split()]))\ntest_data[\"mean_word_len\"] = test_data[\"question_text\"].apply(lambda x: np.mean([len(w) for w in str(x).split()]))","53ecf016":"## Truncate some extreme values for better visuals ##\ntrain_data['num_words'].loc[train_data['num_words']>60] = 60 #truncation for better visuals\ntrain_data['num_punctuations'].loc[train_data['num_punctuations']>10] = 10 #truncation for better visuals\ntrain_data['num_chars'].loc[train_data['num_chars']>350] = 350 #truncation for better visuals\n\nf, axes = plt.subplots(3, 1, figsize=(10,20))\nsns.boxplot(x='target', y='num_words', data=train_data, ax=axes[0])\naxes[0].set_xlabel('Target', fontsize=12)\naxes[0].set_title(\"Number of words in each class\", fontsize=15)\n\nsns.boxplot(x='target', y='num_chars', data=train_data, ax=axes[1])\naxes[1].set_xlabel('Target', fontsize=12)\naxes[1].set_title(\"Number of characters in each class\", fontsize=15)\n\nsns.boxplot(x='target', y='num_punctuations', data=train_data, ax=axes[2])\naxes[2].set_xlabel('Target', fontsize=12)\n#plt.ylabel('Number of punctuations in text', fontsize=12)\naxes[2].set_title(\"Number of punctuations in each class\", fontsize=15)\nplt.show()","d1fcf465":"# SHowing that the features are added\ntrain_data.head()","cd125a2b":"# Information about the training data after feature scaling\ntrain_data.info()","54151266":"# Removing punctuations\npunctuation_list =[',', '.', '\"', ':', ')', '(', '-', '!', '?', '|', ';', \"'\", '$', '&', '\/', '[', ']', '>', '%', '=', '#', '*', '+', '\\\\', \n        '\u2022', '~', '@', '\u00a3', '\u00b7', '_', '{', '}', '\u00a9', '^', '\u00ae', '`', '<', '\u2192', '\u00b0', '\u20ac', '\u2122', '\u203a', '\u2665', '\u2190', '\u00d7', '\u00a7', '\u2033', '\u2032', \n        '\u2588', '\u2026', '\u201c', '\u2605', '\u201d', '\u2013', '\u25cf', '\u25ba', '\u2212', '\u00a2', '\u00ac', '\u2591', '\u00a1', '\u00b6', '\u2191', '\u00b1', '\u00bf', '\u25be', '\u2550', '\u00a6', '\u2551', '\u2015', '\u00a5', '\u2593', \n        '\u2014', '\u2039', '\u2500', '\u2592', '\uff1a', '\u2295', '\u25bc', '\u25aa', '\u2020', '\u25a0', '\u2019', '\u2580', '\u00a8', '\u2584', '\u266b', '\u2606', '\u00af', '\u2666', '\u00a4', '\u25b2', '\u00b8', '\u22c5', '\u2018', '\u221e', \n        '\u2219', '\uff09', '\u2193', '\u3001', '\u2502', '\uff08', '\u00bb', '\uff0c', '\u266a', '\u2569', '\u255a', '\u30fb', '\u2566', '\u2563', '\u2554', '\u2557', '\u25ac', '\u2764', '\u2264', '\u2021', '\u221a', '\u25c4', '\u2501', \n        '\u21d2', '\u25b6', '\u2265', '\u255d', '\u2661', '\u25ca', '\u3002', '\u2708', '\u2261', '\u263a', '\u2714', '\u21b5', '\u2248', '\u2713', '\u2663', '\u260e', '\u2103', '\u25e6', '\u2514', '\u201f', '\uff5e', '\uff01', '\u25cb', \n        '\u25c6', '\u2116', '\u2660', '\u258c', '\u273f', '\u25b8', '\u2044', '\u25a1', '\u2756', '\u2726', '\uff0e', '\u00f7', '\uff5c', '\u2503', '\uff0f', '\uffe5', '\u2560', '\u21a9', '\u272d', '\u2590', '\u263c', '\u263b', '\u2510', \n        '\u251c', '\u00ab', '\u223c', '\u250c', '\u2109', '\u262e', '\u0e3f', '\u2266', '\u266c', '\u2727', '\u232a', '\uff0d', '\u2302', '\u2716', '\uff65', '\u25d5', '\u203b', '\u2016', '\u25c0', '\u2030', '\\x97', '\u21ba', \n        '\u2206', '\u2518', '\u252c', '\u256c', '\u060c', '\u2318', '\u2282', '\uff1e', '\u2329', '\u2399', '\uff1f', '\u2620', '\u21d0', '\u25ab', '\u2217', '\u2208', '\u2260', '\u2640', '\u2654', '\u02da', '\u2117', '\u2517', '\uff0a', \n        '\u253c', '\u2740', '\uff06', '\u2229', '\u2642', '\u203f', '\u2211', '\u2023', '\u279c', '\u251b', '\u21d3', '\u262f', '\u2296', '\u2600', '\u2533', '\uff1b', '\u2207', '\u21d1', '\u2730', '\u25c7', '\u266f', '\u261e', '\u00b4', \n        '\u2194', '\u250f', '\uff61', '\u25d8', '\u2202', '\u270c', '\u266d', '\u2523', '\u2534', '\u2513', '\u2728', '\\xa0', '\u02dc', '\u2765', '\u252b', '\u2120', '\u2712', '\uff3b', '\u222b', '\\x93', '\u2267', '\uff3d', \n        '\\x94', '\u2200', '\u265b', '\\x96', '\u2228', '\u25ce', '\u21bb', '\u21e9', '\uff1c', '\u226b', '\u2729', '\u272a', '\u2655', '\u061f', '\u20a4', '\u261b', '\u256e', '\u240a', '\uff0b', '\u2508', '\uff05', \n        '\u254b', '\u25bd', '\u21e8', '\u253b', '\u2297', '\uffe1', '\u0964', '\u2582', '\u272f', '\u2587', '\uff3f', '\u27a4', '\u271e', '\uff1d', '\u25b7', '\u25b3', '\u25d9', '\u2585', '\u271d', '\u2227', '\u2409', '\u262d', \n        '\u250a', '\u256f', '\u263e', '\u2794', '\u2234', '\\x92', '\u2583', '\u21b3', '\uff3e', '\u05f3', '\u27a2', '\u256d', '\u27a1', '\uff20', '\u2299', '\u2622', '\u02dd', '\u220f', '\u201e', '\u2225', '\u275d', '\u2610', \n        '\u2586', '\u2571', '\u22d9', '\u0e4f', '\u2601', '\u21d4', '\u2594', '\\x91', '\u279a', '\u25e1', '\u2570', '\\x85', '\u2662', '\u02d9', '\u06de', '\u2718', '\u272e', '\u2611', '\u22c6', '\u24d8', '\u2752', \n        '\u2623', '\u2709', '\u230a', '\u27a0', '\u2223', '\u2751', '\u25e2', '\u24d2', '\\x80', '\u3012', '\u2215', '\u25ae', '\u29bf', '\u272b', '\u271a', '\u22ef', '\u2669', '\u2602', '\u275e', '\u2017', '\u0702', '\u261c', \n        '\u203e', '\u271c', '\u2572', '\u2218', '\u27e9', '\uff3c', '\u27e8', '\u0387', '\u2717', '\u265a', '\u2205', '\u24d4', '\u25e3', '\u0361', '\u201b', '\u2766', '\u25e0', '\u2704', '\u2744', '\u2203', '\u2423', '\u226a', '\uff62', \n        '\u2245', '\u25ef', '\u263d', '\u220e', '\uff63', '\u2767', '\u0305', '\u24d0', '\u2198', '\u2693', '\u25a3', '\u02d8', '\u222a', '\u21e2', '\u270d', '\u22a5', '\uff03', '\u23af', '\u21a0', '\u06e9', '\u2630', '\u25e5', \n        '\u2286', '\u273d', '\u26a1', '\u21aa', '\u2741', '\u2639', '\u25fc', '\u2603', '\u25e4', '\u274f', '\u24e2', '\u22b1', '\u279d', '\u0323', '\u2721', '\u2220', '\uff40', '\u25b4', '\u2524', '\u221d', '\u264f', '\u24d0', \n        '\u270e', '\u037e', '\u2424', '\uff07', '\u2763', '\u2702', '\u2724', '\u24de', '\u262a', '\u2734', '\u2312', '\u02db', '\u2652', '\uff04', '\u2736', '\u25bb', '\u24d4', '\u25cc', '\u25c8', '\u275a', '\u2742', '\uffe6', \n        '\u25c9', '\u255c', '\u0303', '\u2731', '\u2556', '\u2749', '\u24e1', '\u2197', '\u24e3', '\u267b', '\u27bd', '\u05c0', '\u2732', '\u272c', '\u2609', '\u2589', '\u2252', '\u2625', '\u2310', '\u2668', '\u2715', '\u24dd', \n        '\u22b0', '\u2758', '\uff02', '\u21e7', '\u0335', '\u27aa', '\u2581', '\u258f', '\u2283', '\u24db', '\u201a', '\u2670', '\u0301', '\u270f', '\u23d1', '\u0336', '\u24e2', '\u2a7e', '\uffe0', '\u274d', '\u2243', '\u22f0', '\u264b', \n        '\uff64', '\u0302', '\u274b', '\u2733', '\u24e4', '\u2564', '\u2595', '\u2323', '\u2738', '\u212e', '\u207a', '\u25a8', '\u2568', '\u24e5', '\u2648', '\u2743', '\u261d', '\u273b', '\u2287', '\u227b', '\u2658', '\u265e', \n        '\u25c2', '\u271f', '\u2320', '\u2720', '\u261a', '\u2725', '\u274a', '\u24d2', '\u2308', '\u2745', '\u24e1', '\u2667', '\u24de', '\u25ad', '\u2771', '\u24e3', '\u221f', '\u2615', '\u267a', '\u2235', '\u235d', '\u24d1', \n        '\u2735', '\u2723', '\u066d', '\u2646', '\u24d8', '\u2236', '\u269c', '\u25de', '\u0bcd', '\u2739', '\u27a5', '\u2195', '\u0333', '\u2237', '\u270b', '\u27a7', '\u220b', '\u033f', '\u0367', '\u2505', '\u2964', '\u2b06', '\u22f1', \n        '\u2604', '\u2196', '\u22ee', '\u06d4', '\u264c', '\u24db', '\u2555', '\u2653', '\u276f', '\u264d', '\u258b', '\u273a', '\u2b50', '\u273e', '\u264a', '\u27a3', '\u25bf', '\u24d1', '\u2649', '\u23e0', '\u25fe', '\u25b9', \n        '\u2a7d', '\u21a6', '\u2565', '\u2375', '\u230b', '\u0589', '\u27a8', '\u222e', '\u21e5', '\u24d7', '\u24d3', '\u207b', '\u239d', '\u2325', '\u2309', '\u25d4', '\u25d1', '\u273c', '\u264e', '\u2650', '\u256a', '\u229a', \n        '\u2612', '\u21e4', '\u24dc', '\u23a0', '\u25d0', '\u26a0', '\u255e', '\u25d7', '\u2395', '\u24e8', '\u261f', '\u24df', '\u265f', '\u2748', '\u21ac', '\u24d3', '\u25fb', '\u266e', '\u2759', '\u2664', '\u2209', '\u061b', \n        '\u2042', '\u24dd', '\u05be', '\u2651', '\u256b', '\u2553', '\u2573', '\u2b05', '\u2614', '\u2638', '\u2504', '\u2567', '\u05c3', '\u23a2', '\u2746', '\u22c4', '\u26ab', '\u030f', '\u260f', '\u279e', '\u0342', '\u2419', \n        '\u24e4', '\u25df', '\u030a', '\u2690', '\u2719', '\u2199', '\u033e', '\u2118', '\u2737', '\u237a', '\u274c', '\u22a2', '\u25b5', '\u2705', '\u24d6', '\u2628', '\u25b0', '\u2561', '\u24dc', '\u2624', '\u223d', '\u2558', \n        '\u02f9', '\u21a8', '\u2659', '\u2b07', '\u2671', '\u2321', '\u2800', '\u255b', '\u2755', '\u2509', '\u24df', '\u0300', '\u2656', '\u24da', '\u2506', '\u239c', '\u25dc', '\u26be', '\u2934', '\u2707', '\u255f', '\u239b', \n        '\u2629', '\u27b2', '\u279f', '\u24e5', '\u24d7', '\u23dd', '\u25c3', '\u2562', '\u21af', '\u2706', '\u02c3', '\u2374', '\u2747', '\u26bd', '\u2552', '\u0338', '\u265c', '\u2613', '\u27b3', '\u21c4', '\u262c', '\u2691', \n        '\u2710', '\u2303', '\u25c5', '\u25a2', '\u2750', '\u220a', '\u2608', '\u0965', '\u23ae', '\u25a9', '\u0bc1', '\u22b9', '\u2035', '\u2414', '\u260a', '\u27b8', '\u030c', '\u263f', '\u21c9', '\u22b3', '\u2559', '\u24e6', \n        '\u21e3', '\uff5b', '\u0304', '\u219d', '\u239f', '\u258d', '\u2757', '\u05f4', '\u0384', '\u259e', '\u25c1', '\u26c4', '\u21dd', '\u23aa', '\u2641', '\u21e0', '\u2607', '\u270a', '\u0bbf', '\uff5d', '\u2b55', '\u2798', \n        '\u2040', '\u2619', '\u275b', '\u2753', '\u27f2', '\u21c0', '\u2272', '\u24d5', '\u23a5', '\\u06dd', '\u0364', '\u208b', '\u0331', '\u030e', '\u265d', '\u2273', '\u2599', '\u27ad', '\u0700', '\u24d6', '\u21db', '\u258a', \n        '\u21d7', '\u0337', '\u21f1', '\u2105', '\u24e7', '\u269b', '\u0310', '\u0315', '\u21cc', '\u2400', '\u224c', '\u24e6', '\u22a4', '\u0313', '\u2626', '\u24d5', '\u259c', '\u2799', '\u24e8', '\u2328', '\u25ee', '\u2637', \n        '\u25cd', '\u24da', '\u2254', '\u23e9', '\u2373', '\u211e', '\u250b', '\u02fb', '\u259a', '\u227a', '\u0652', '\u259f', '\u27bb', '\u032a', '\u23ea', '\u0309', '\u239e', '\u2507', '\u235f', '\u21ea', '\u258e', '\u21e6', '\u241d', \n        '\u2937', '\u2256', '\u27f6', '\u2657', '\u0334', '\u2644', '\u0368', '\u0308', '\u275c', '\u0321', '\u259b', '\u2701', '\u27a9', '\u0bbe', '\u02c2', '\u21a5', '\u23ce', '\u23b7', '\u0332', '\u2796', '\u21b2', '\u2a75', '\u0317', '\u2762', \n        '\u224e', '\u2694', '\u21c7', '\u0311', '\u22bf', '\u0316', '\u260d', '\u27b9', '\u294a', '\u2041', '\u2722']","16ce5a55":"def remove_punctuation(text):\n    for punctuation in punctuation_list:\n        if punctuation in text:\n            text = text.replace(punctuation, '{}' .format(punctuation))\n    return text","436fa51e":"def clean_numbers(text):\n    if bool(re.search(r'\\d', text)):\n        text = re.sub('[0-9]{5,}', '#####', text)\n        text = re.sub('[0-9]{4}', '####', text)\n        text = re.sub('[0-9]{3}', '###', text)\n        text = re.sub('[0-9]{2}', '##', text)\n    return text","5c72741f":"mispell_dict = {'colour': 'color', 'centre': 'center', 'favourite': 'favorite', 'travelling': 'traveling', 'counselling': 'counseling', 'theatre': 'theater', 'cancelled': 'canceled', 'labour': 'labor', 'organisation': 'organization', 'wwii': 'world war 2', 'citicise': 'criticize', 'youtu ': 'youtube ', 'Qoura': 'Quora', 'sallary': 'salary', 'Whta': 'What', 'narcisist': 'narcissist', 'howdo': 'how do', 'whatare': 'what are', 'howcan': 'how can', 'howmuch': 'how much', 'howmany': 'how many', 'whydo': 'why do', 'doI': 'do I', 'theBest': 'the best', 'howdoes': 'how does', 'mastrubation': 'masturbation', 'mastrubate': 'masturbate', \"mastrubating\": 'masturbating', 'pennis': 'penis', 'Etherium': 'bitcoin', 'narcissit': 'narcissist', 'bigdata': 'big data', '2k17': '2017', '2k18': '2018', 'qouta': 'quota', 'exboyfriend': 'ex boyfriend', 'airhostess': 'air hostess', \"whst\": 'what', 'watsapp': 'whatsapp', 'demonitisation': 'demonetization', 'demonitization': 'demonetization', 'demonetisation': 'demonetization', \n                'electroneum':'bitcoin','nanodegree':'degree','hotstar':'star','dream11':'dream','ftre':'fire','tensorflow':'framework','unocoin':'bitcoin',\n                'lnmiit':'limit','unacademy':'academy','altcoin':'bitcoin','altcoins':'bitcoin','litecoin':'bitcoin','coinbase':'bitcoin','cryptocurency':'cryptocurrency',\n                'simpliv':'simple','quoras':'quora','schizoids':'psychopath','remainers':'remainder','twinflame':'soulmate','quorans':'quora','brexit':'demonetized',\n                'iiest':'institute','dceu':'comics','pessat':'exam','uceed':'college','bhakts':'devotee','boruto':'anime',\n                'cryptocoin':'bitcoin','blockchains':'blockchain','fiancee':'fiance','redmi':'smartphone','oneplus':'smartphone','qoura':'quora','deepmind':'framework','ryzen':'cpu','whattsapp':'whatsapp',\n                'undertale':'adventure','zenfone':'smartphone','cryptocurencies':'cryptocurrencies','koinex':'bitcoin','zebpay':'bitcoin','binance':'bitcoin','whtsapp':'whatsapp',\n                'reactjs':'framework','bittrex':'bitcoin','bitconnect':'bitcoin','bitfinex':'bitcoin','yourquote':'your quote','whyis':'why is','jiophone':'smartphone',\n                'dogecoin':'bitcoin','onecoin':'bitcoin','poloniex':'bitcoin','7700k':'cpu','angular2':'framework','segwit2x':'bitcoin','hashflare':'bitcoin','940mx':'gpu',\n                'openai':'framework','hashflare':'bitcoin','1050ti':'gpu','nearbuy':'near buy','freebitco':'bitcoin','antminer':'bitcoin','filecoin':'bitcoin','whatapp':'whatsapp',\n                'empowr':'empower','1080ti':'gpu','crytocurrency':'cryptocurrency','8700k':'cpu','whatsaap':'whatsapp','g4560':'cpu','payymoney':'pay money',\n                'fuckboys':'fuck boys','intenship':'internship','zcash':'bitcoin','demonatisation':'demonetization','narcicist':'narcissist','mastuburation':'masturbation',\n                'trignometric':'trigonometric','cryptocurreny':'cryptocurrency','howdid':'how did','crytocurrencies':'cryptocurrencies','phycopath':'psychopath',\n                'bytecoin':'bitcoin','possesiveness':'possessiveness','scollege':'college','humanties':'humanities','altacoin':'bitcoin','demonitised':'demonetized',\n                'bras\u00edlia':'brazilia','accolite':'accolyte','econimics':'economics','varrier':'warrier','quroa':'quora','statergy':'strategy','langague':'language',\n                'splatoon':'game','7600k':'cpu','gate2018':'gate 2018','in2018':'in 2018','narcassist':'narcissist','jiocoin':'bitcoin','hnlu':'hulu','7300hq':'cpu',\n                'weatern':'western','interledger':'blockchain','deplation':'deflation', 'cryptocurrencies':'cryptocurrency', 'bitcoin':'blockchain cryptocurrency',}","b83da88f":"import re\ndef get_misspelled_dict_and_regex(mispell_dict):\n    mispell_re = re.compile('(%s)' % '|'.join(mispell_dict.keys()))\n    return mispell_dict, mispell_re\n\nmispellings, mispellings_re = get_misspelled_dict_and_regex(mispell_dict)\ndef replace_typical_misspell(text):\n    def replace(match):\n        return mispellings[match.group(0)]\n    return mispellings_re.sub(replace, text)","4485ab90":"contraction_dict = {\n    \"ain't\": \"is not\", \n    \"aren't\": \"are not\",\n    \"can't\": \"cannot\", \n    \"'cause\": \"because\", \n    \"could've\": \"could have\", \n    \"couldn't\": \"could not\", \n    \"didn't\": \"did not\",  \n    \"doesn't\": \"does not\", \n    \"don't\": \"do not\", \n    \"hadn't\": \"had not\", \n    \"hasn't\": \"has not\", \n    \"haven't\": \"have not\", \n    \"he'd\": \"he would\",\n    \"he'll\": \"he will\", \n    \"he's\": \"he is\", \n    \"how'd\": \"how did\", \n    \"how'd'y\": \"how do you\", \n    \"how'll\": \"how will\", \n    \"how's\": \"how is\",  \n    \"I'd\": \"I would\", \n    \"I'd've\": \"I would have\",\n    \"I'll\": \"I will\", \n    \"I'll've\": \"I will have\",\n    \"I'm\": \"I am\", \n    \"I've\": \"I have\", \n    \"i'd\": \"i would\", \n    \"i'd've\": \"i would have\", \n    \"i'll\": \"i will\",  \n    \"i'll've\": \"i will have\",\n    \"i'm\": \"i am\", \n    \"i've\": \"i have\", \n    \"isn't\": \"is not\", \n    \"it'd\": \"it would\", \n    \"it'd've\": \"it would have\", \n    \"it'll\": \"it will\", \n    \"it'll've\": \"it will have\",\n    \"it's\": \"it is\", \n    \"let's\": \"let us\", \n    \"ma'am\": \"madam\", \n    \"mayn't\": \"may not\", \n    \"might've\": \"might have\",\n    \"mightn't\": \"might not\",\n    \"mightn't've\": \"might not have\", \n    \"must've\": \"must have\", \n    \"mustn't\": \"must not\", \n    \"mustn't've\": \"must not have\", \n    \"needn't\": \"need not\", \n    \"needn't've\": \"need not have\",\n    \"o'clock\": \"of the clock\", \n    \"oughtn't\": \"ought not\", \n    \"oughtn't've\": \"ought not have\", \n    \"shan't\": \"shall not\", \n    \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \n    \"she'd\": \"she would\", \"she'd've\": \"she would have\", \n    \"she'll\": \"she will\", \"she'll've\": \"she will have\", \n    \"she's\": \"she is\", \"should've\": \"should have\", \n    \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \n    \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\n    \"that'd\": \"that would\", \"that'd've\": \"that would have\", \n    \"that's\": \"that is\", \"there'd\": \"there would\", \n    \"there'd've\": \"there would have\", \"there's\": \"there is\", \n    \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\", \n    \"they'll\": \"they will\", \"they'll've\": \"they will have\", \n    \"they're\": \"they are\", \"they've\": \"they have\", \n    \"to've\": \"to have\", \"wasn't\": \"was not\", \n    \"we'd\": \"we would\", \"we'd've\": \"we would have\", \n    \"we'll\": \"we will\", \"we'll've\": \"we will have\", \n    \"we're\": \"we are\", \"we've\": \"we have\", \n    \"weren't\": \"were not\", \"what'll\": \"what will\", \n    \"what'll've\": \"what will have\", \"what're\": \"what are\",  \n    \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \n    \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\", \n    \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \n    \"who's\": \"who is\", \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \n    \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\", \n    \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \n    \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\n    \"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \n    \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \n    \"you're\": \"you are\", \"you've\": \"you have\"}","e31fb89a":"def get_contractions_dict_and_regex(contraction_dict):\n    contraction_re = re.compile('(%s)' % '|'.join(contraction_dict.keys()))\n    return contraction_dict, contraction_re\n\ncontractions, contractions_re = get_contractions_dict_and_regex(contraction_dict)\n\ndef replace_contractions(text):\n    def replace(match):\n        return contractions[match.group(0)]\n    return contractions_re.sub(replace, text)","5754b08d":"import nltk\nfrom nltk.tokenize.toktok import ToktokTokenizer\nstopword_list = nltk.corpus.stopwords.words('english')\ndef remove_stopwords(text, is_lower_case=True):\n    tokenizer = ToktokTokenizer()\n    tokens = tokenizer.tokenize(text)\n    tokens = [token.strip() for token in tokens]\n    if is_lower_case:\n        filtered_tokens = [token for token in tokens if token not in stopword_list]\n    else:\n        filtered_tokens = [token for token in tokens if token.lower() not in stopword_list]\n    filtered_text = ' '.join(filtered_tokens)\n    return filtered_text","86586f73":"# Applying all the preprocessing techniques discussed\ndef clean_questions(x):\n    x = x.lower()\n    x = remove_punctuation(x)\n    x = clean_numbers(x)\n    x = replace_typical_misspell(x)\n    x = remove_stopwords(x)\n    x = replace_contractions(x)\n    x = x.replace(\"'\",\"\")\n    return x","28408866":"train_data['preprocessed_question_text'] = train_data['question_text'].apply(lambda x: clean_questions(x))\ntest_data['preprocessed_question_text'] = test_data['question_text'].apply(lambda x: clean_questions(x))","7bb88861":"train_data.info()","85e6c8cd":"# word cloud before preprocessing\nplot_wordcloud(train_data[train_data[\"target\"] == 1][\"question_text\"], title=\"Word Cloud of Insincere Questions Before Preprocessing\")\n\n# word cloud after preprocessing\nplot_wordcloud(train_data[train_data[\"target\"] == 1][\"preprocessed_question_text\"], title=\"Word Cloud of Insincere Questions After Preprocessing\")","d022ab72":"import copy\nimport time\nfrom sklearn.metrics.classification import log_loss\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer, HashingVectorizer \nfrom sklearn.naive_bayes import MultinomialNB\n\nfrom sklearn import model_selection\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import f1_score\nfrom sklearn import metrics","3b6938bc":"# Creating CountVectorizer object\nvectorizer = CountVectorizer(\n    dtype=np.float32, \n    strip_accents='unicode', \n    analyzer='word',\n    token_pattern=r'\\w{1,}',\n    ngram_range=(1, 3),\n    min_df=3\n)\n# Fit the vectorizer on training data after preprocessing\nvectorizer.fit_transform(train_data['preprocessed_question_text'].values.tolist() + test_data['preprocessed_question_text'].values.tolist())\ntrain_vectorizer = vectorizer.transform(train_data['preprocessed_question_text'].values.tolist())\ntest_vectorizer = vectorizer.transform(test_data['preprocessed_question_text'].values.tolist())","8aa5d501":"# For storing the threshold values and f1 score\nthreshold_list = []\nbest_f1_score_list = []","04ca3f9c":"train_y = train_data[\"target\"].values\n\ndef buildModel(train_X, train_y, test_X, test_y, test_X2, model_obj):\n    model = copy.deepcopy(model_obj)\n    model.fit(train_X, train_y)\n    pred_test_y = model.predict_proba(test_X)[:,1]\n    pred_test_y2 = model.predict_proba(test_X2)[:,1]\n    return pred_test_y, pred_test_y2, model\n\ndef best_threshold_function(val_y, pred_val_y):\n    threshold_dict = {}\n    for thresh in np.arange(0.1, 0.201, 0.01):\n        thresh = np.round(thresh, 2)\n        # Updating the dict with threshold as key and f1 score as value\n        threshold_dict[thresh] =  metrics.f1_score(val_y, (pred_val_y > thresh).astype(int))\n        \n    # Finding the max key\n    best_threshold = max(threshold_dict, key=threshold_dict.get)\n    \n    # finding the max value\n    best_f1_score = max(threshold_dict.values())\n    \n    print(f\"Best F1 Score: {best_f1_score} for threshold {best_threshold}\")\n    # Appending the f1 score and threshold for count vectorizer\n    threshold_list.append(best_threshold)\n    best_f1_score_list.append(best_f1_score)\n\n","ccdda974":"cv_scores = []\npred_full_test = 0\n# Creating a zero list equal to the shape of training data\npred_train = np.zeros([train_data.shape[0]])\n\n# kfold with 5 n_splits\nkf = model_selection.KFold(n_splits=5, shuffle=True, random_state=2017)\n\nfor dev_index, val_index in kf.split(train_data):\n    dev_X, val_X = train_vectorizer[dev_index], train_vectorizer[val_index]\n    dev_y, val_y = train_y[dev_index], train_y[val_index]\n    pred_val_y, pred_test_y, model = buildModel(dev_X, dev_y, val_X, val_y, test_vectorizer, LogisticRegression(C=5., solver='sag'))\n    pred_full_test = pred_full_test + pred_test_y\n    \n    # Updating the pred_train list with prediction value\n    pred_train[val_index] = pred_val_y\n    \n    # appending the cv scores\n    cv_scores.append(metrics.log_loss(val_y, pred_val_y))\n    break\n    \nbest_threshold_function(val_y, pred_val_y)","0703d23d":"cv_scores = []\npred_full_test = 0\n# Creating a zero list equal to the shape of training data\npred_train = np.zeros([train_data.shape[0]])\n\n# kfold with 5 n_splits\nkf = model_selection.KFold(n_splits=5, shuffle=True, random_state=2017)\nfor dev_index, val_index in kf.split(train_data):\n    dev_X, val_X = train_vectorizer[dev_index], train_vectorizer[val_index]\n    dev_y, val_y = train_y[dev_index], train_y[val_index]\n    pred_val_y, pred_test_y, model = buildModel(dev_X, dev_y, val_X, val_y, test_vectorizer, MultinomialNB())\n    pred_full_test = pred_full_test + pred_test_y\n    \n    # Updating the pred_train list with prediction value\n    pred_train[val_index] = pred_val_y\n    \n    # appending the cv scores\n    cv_scores.append(metrics.log_loss(val_y, pred_val_y))\n    break\n    \nbest_threshold_function(val_y, pred_val_y)","75ecfdd0":"vectorizer = TfidfVectorizer(stop_words='english', ngram_range=(1,3))\nvectorizer.fit_transform(train_data['preprocessed_question_text'].values.tolist() + test_data['preprocessed_question_text'].values.tolist())\ntrain_vectorizer = vectorizer.transform(train_data['preprocessed_question_text'].values.tolist())\ntest_vectorizer = vectorizer.transform(test_data['preprocessed_question_text'].values.tolist())","6063271b":"cv_scores = []\npred_full_test = 0\n\n# Creating a zero list equal to the shape of training data\npred_train = np.zeros([train_data.shape[0]])\n\n# kfold with 5 n_splits\nkf = model_selection.KFold(n_splits=5, shuffle=True, random_state=2017)\nfor dev_index, val_index in kf.split(train_data):\n    dev_X, val_X = train_vectorizer[dev_index], train_vectorizer[val_index]\n    dev_y, val_y = train_y[dev_index], train_y[val_index]\n    pred_val_y, pred_test_y, model = buildModel(dev_X, dev_y, val_X, val_y, test_vectorizer, LogisticRegression(C=5., solver='sag'))\n    pred_full_test = pred_full_test + pred_test_y\n    \n    # Updating the pred_train list with prediction value\n    pred_train[val_index] = pred_val_y\n    \n     # appending the cv scores\n    cv_scores.append(metrics.log_loss(val_y, pred_val_y))\n    break\n    \nbest_threshold_function(val_y, pred_val_y)","24e01311":"cv_scores = []\npred_full_test = 0\npred_train = np.zeros([train_data.shape[0]])\nkf = model_selection.KFold(n_splits=5, shuffle=True, random_state=2017)\nfor dev_index, val_index in kf.split(train_data):\n    dev_X, val_X = train_vectorizer[dev_index], train_vectorizer[val_index]\n    dev_y, val_y = train_y[dev_index], train_y[val_index]\n    pred_val_y, pred_test_y, model = buildModel(dev_X, dev_y, val_X, val_y, test_vectorizer, MultinomialNB())\n    pred_full_test = pred_full_test + pred_test_y\n    pred_train[val_index] = pred_val_y\n    cv_scores.append(metrics.log_loss(val_y, pred_val_y))\n    break\n    \nbest_threshold_function(val_y, pred_val_y)","eb9de3ec":"vectorizer = HashingVectorizer(\n    dtype=np.float32,\n    strip_accents='unicode', \n    analyzer='word',\n    ngram_range=(1, 3),\n    n_features=2**10\n)\nvectorizer.fit_transform(train_data['preprocessed_question_text'].values.tolist() + test_data['preprocessed_question_text'].values.tolist())\ntrain_vectorizer = vectorizer.transform(train_data['preprocessed_question_text'].values.tolist())\ntest_vectorizer = vectorizer.transform(test_data['preprocessed_question_text'].values.tolist())","37082bf4":"cv_scores = []\npred_full_test = 0\npred_train = np.zeros([train_data.shape[0]])\nkf = model_selection.KFold(n_splits=5, shuffle=True, random_state=2017)\nfor dev_index, val_index in kf.split(train_data):\n    dev_X, val_X = train_vectorizer[dev_index], train_vectorizer[val_index]\n    dev_y, val_y = train_y[dev_index], train_y[val_index]\n    pred_val_y, pred_test_y, model = buildModel(dev_X, dev_y, val_X, val_y, test_vectorizer, LogisticRegression(C=5., solver='sag'))\n    pred_full_test = pred_full_test + pred_test_y\n    pred_train[val_index] = pred_val_y\n    cv_scores.append(metrics.log_loss(val_y, pred_val_y))\n    break\n    \nbest_threshold_function(val_y, pred_val_y)","1556d212":"\nfrom prettytable import PrettyTable\n    \ntable = PrettyTable()\nvect = ([\"CountVectorizer\"] * 2) + ([\"TFIDFVectorizer\"] * 2) + ([\"HashingVectorizer\"])\nmodel = ([\"Logistic Regression\", \"Naive Bayes\"] * 2) + ([\"Logistic Regression\"])\ntable.add_column(\"Model\", model)\ntable.add_column(\"Vectorizer\", vect)\ntable.add_column(\"Test F1-Score\", best_f1_score_list)\ntable.add_column(\"Best Threshold\", threshold_list)","12057bbd":"print(table)","a88d377d":"# Creating CountVectorizer object\nvectorizer = CountVectorizer(\n    dtype=np.float32, \n    strip_accents='unicode', \n    analyzer='word',\n    token_pattern=r'\\w{1,}',\n    ngram_range=(1, 3),\n    min_df=3\n)\n# Fit the vectorizer on training data after preprocessing\nvectorizer.fit_transform(train_data['preprocessed_question_text'].values.tolist() + test_data['preprocessed_question_text'].values.tolist())\ntrain_vectorizer = vectorizer.transform(train_data['preprocessed_question_text'].values.tolist())\ntest_vectorizer = vectorizer.transform(test_data['preprocessed_question_text'].values.tolist())","1b9b33c0":"cv_scores = []\npred_full_test = 0\n# Creating a zero list equal to the shape of training data\npred_train = np.zeros([train_data.shape[0]])\n\n# kfold with 5 n_splits\nkf = model_selection.KFold(n_splits=5, shuffle=True, random_state=2017)\n\nfor dev_index, val_index in kf.split(train_data):\n    dev_X, val_X = train_vectorizer[dev_index], train_vectorizer[val_index]\n    dev_y, val_y = train_y[dev_index], train_y[val_index]\n    pred_val_y, pred_test_y, model = buildModel(dev_X, dev_y, val_X, val_y, test_vectorizer, LogisticRegression(C=5., solver='sag'))\n    pred_full_test = pred_full_test + pred_test_y\n    \n    # Updating the pred_train list with prediction value\n    pred_train[val_index] = pred_val_y\n    \n    # appending the cv scores\n    cv_scores.append(metrics.log_loss(val_y, pred_val_y))\n    break\n    \nbest_threshold_function(val_y, pred_val_y)","7427cf94":"pred_full_test = (pred_full_test > 0.2).astype(int)\noutput = pd.DataFrame({\n    \"qid\":test_data[\"qid\"].values, \n    \"prediction\": pred_full_test\n})\noutput.to_csv(\"submission.csv\", index=False)","4e2eebc1":"## Removing Contractions","4004bf47":"## Hashing Vectorizer","183af71c":"### Bar chart for target distribution","c0045156":"### Building and running model","a873d671":"### Cleaning numbers","9afb3221":"### Logistic Regression","b3df5e13":"### Logistic Regression","644d6bf6":"### Available input files","32cf7404":"### Naive Bayes","c75d6d1c":"### Unzipping the embeddings","c543b42c":"### Total number of sincere (0) and Insincere Questions (1)","961fd913":"### Trigram","1ed89c93":"## Count Vectorizer","d8487c37":"### Word Cloud before Data Preprocessing","8019f402":"## Model Training for best f1 score\n### Creating Count vectorizer and model","0a44a36a":"### Custom function for building model and finding f1 score","5739ed97":"### Removing the punctuation marks","4db06a0e":"## Comparing all the models","f1510d54":"### Box plot for truncated features","904ccd0a":"### Word Cloud Comparison of Insincere Questions (Before and after preprocessing)","fa3f466d":"## Building Vectorizers and models","302780dc":"### Info about the training data and test data","74597396":"### Loading the data into training data and test data","55713c73":"### Bigram Bar chart plot","b8aad251":"## Result - Output to csv file","c8330aa3":"## Data Preprocessing\n### Agenda\n1. Converting questions to lower case\n2. Removing the punctuation marks\n3. Cleaning numbers\n4. Correcting misspelled words\n5. removing contractions\n6. Removing stop words","553c0209":"### Logistic Regression","bcc9f976":"## Removing stopwords","31b97f15":"### Correcting misspelled words","8a8e24bc":"## Data Overview","db6b719b":"### Horizontal bar chart of frequently asked questions on both classes\n","cc9e3f56":"## TFIDF Vextorizer","4aa22052":"### Get the rows and columns of the training and test dataset","a4390878":"### Bar chart to plot the target count ","b247cc1f":"## Doing feature engineering again after data preprocessing","a82ea1fa":"## Importing the libraries","4ee597a5":"### Naive Bayes","d4031288":"## Feature Engineering\n### Features that is added\n1. Number of words in the text\n2. Number of unique words in the text\n3. Number of characters in the text\n4. Number of stopwords\n5. Number of punctuations\n6. Number of upper case words\n7. Number of title case words\n8. Average length of the words","eca63d0b":"# The objective of this project is to classify the data into Sincere and Insincere questions\n## Feature Extraction Data Techniques Used\n### Count Vectorizer with Logistic Regression and Naive Bayes\n### Tfidf Vectorizer with Logistic Regression and Naive Bayes\n### HashingVectorizer with Logistic Regression\n"}}