{"cell_type":{"a5187084":"code","18a07dc2":"code","342fe430":"code","2a640132":"code","10ba0c7e":"code","d68dbb9c":"code","a1fa0389":"code","3e0b4349":"code","84936590":"code","1df1d34e":"code","6ba9898a":"code","8f7342b9":"code","4aac4d3e":"code","33951efe":"code","34dc15a2":"code","636f12a3":"code","cbec9d68":"code","8357f8c4":"code","962c2571":"code","e96eb50a":"code","39bdee56":"code","a36f1244":"code","ea903668":"code","a5818a2c":"code","078b0426":"code","40a75fc1":"code","e8ff44be":"code","0ecf961f":"code","843fe3d7":"code","c5185394":"code","a4afd059":"code","288bb51d":"code","805adbbb":"code","55a278a1":"code","56ce4f0b":"code","d8059c13":"code","e87791cc":"code","793239d1":"code","cf419184":"code","c962ebcb":"code","e1b99af0":"markdown","2c53aa48":"markdown","ff0479de":"markdown","e8cba063":"markdown","270e16a1":"markdown","4df4535f":"markdown"},"source":{"a5187084":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport unicodedata\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","18a07dc2":"df = pd.read_csv('..\/input\/cusersmarildownloadsblackcsv\/black.csv', delimiter=';', encoding = \"latin1\", low_memory=False)\ndf.head()","342fe430":"print(f'Number of rows: {df.shape[0]}\\nNumber of columns: {df.shape[1]}')","2a640132":"list(df.isnull().mean())","10ba0c7e":"df = df.iloc[:, :12]\ndf.head(20)","d68dbb9c":"df.info()","a1fa0389":"df.isnull().mean()*100","3e0b4349":"#drop all na values\ndf.dropna(how='any', axis=0, inplace=True)\n#print new shape of the data\nprint(f'Number of rows: {df.shape[0]}\\nNumber of columns: {df.shape[1]}')","84936590":"#change columns types\ndf[['nome', 'uf', 'censo', 'geom']] = df[['nome', 'uf', 'censo', 'geom']].astype(str)","1df1d34e":"#drop cordinates rows\na = df[df['censo'].map(len) > 5]\ndf = df.drop(a.index)\ndf.reset_index(drop=True, inplace=True)\ndf.head()","6ba9898a":"#print thew new shape\nprint(f'Number of rows: {df.shape[0]}\\nNumber of columns: {df.shape[1]}')","8f7342b9":"#change uf and name to ascii character\ndf['uf'].value_counts()","4aac4d3e":"#this lambda expression has been copy from this stackoverflow page\n#https:\/\/stackoverflow.com\/questions\/49891778\/conversion-utf-to-ascii-in-python-with-pandas-dataframe\ndf['nome'] = df['nome'].apply(lambda val: unicodedata.normalize('NFKD', val).encode('ascii', 'ignore').decode())\ndf['uf'] = df['uf'].apply(lambda val: unicodedata.normalize('NFKD', val).encode('ascii', 'ignore').decode())\ndf['uf'].value_counts()","33951efe":"df['uf'].nunique()","34dc15a2":"#Brazil don't have 34 uf, we have 26(and DISTRITO FEDERAL)\ndf['uf'] = df['uf'].str.upper()\ndf['nome'] = df['nome'].str.upper()\ndf['uf'].nunique()","636f12a3":"#almost there\nprint(df['uf'].unique())\ndf['uf'].replace({'PIAUA': 'PIAUI', 'PARAABA':'PARAIBA'}, inplace=True)\nprint(df['uf'].nunique())","cbec9d68":"#create a new colum with region of the State.\nSUL = ['SANTA CATARINA', 'RIO GRANDE DO SUL', 'PARANA']\nSUDESTE = ['MINAS GERAIS', 'RIO DE JANEIRO', 'SAO PAULO', 'ESPIRITO SANTO']\nCENTRO_OESTE = ['DISTRITO FEDERAL', 'GOIAS', 'MATO GROSSO', 'MATO GROSSO DO SUL' ]\nNORDESTE = ['ALAGOAS', 'BAHIA', 'CEARA', 'MARANHAO', 'PARAIBA', 'PERNAMBUCO', 'PIAUI', 'RIO GRANDE DO NORTE', 'SERGIPE']\nNORTE = ['ACRE', 'AMAPA', 'AMAZONAS', 'PARA', 'RONDANIA', 'RORAIMA', 'TOCANTINS']","8357f8c4":"def regiao(row):\n    if row in SUL:\n        return 'SUL'\n    if row in SUDESTE:\n        return 'SUDESTE'\n    if row in CENTRO_OESTE:\n        return 'CENTRO_OESTE'\n    if row in NORDESTE:\n        return 'NORDESTE'\n    if row in NORTE:\n        return 'NORTE'","962c2571":"df['regiao'] = df['uf'].apply(regiao)\ndf.head()","e96eb50a":"#change the type of columns and fixing per_pessoas_pretas column\ndf[['pop_tot', 'pessoas_pretas']] = df[['pop_tot', 'pessoas_pretas']].astype(float)\ndf['per_pessoas_pretas'] = round(df['pessoas_pretas'] \/ df['pop_tot']*100, 2)\ndf.head()","39bdee56":"df['geom'].head()","a36f1244":"#using regex to remove string character and replace parentheses \ndf['geom'] = df['geom'].str.replace(r\"[a-zA-Z]\", '').str.replace(\"(\", '')\ndf.head()","ea903668":"#making lon and lat columns\ndf[['del1', 'lon', 'lat', 'del2']] = df['geom'].str.split(' ', 3, expand=True)\ndf.head()","a5818a2c":"#chacing type to float\ndf['lat'] = df['lat'].str.replace(',', '')\ndf[['lat', 'lon']] = df[['lat', 'lon']].astype(float)","078b0426":"#drop columns\ndf = df.drop(['fid', 'gid', 'descricao', 'legenda', 'classe', 'geom', 'del1', 'del2'], axis=1)\ndf.head()","40a75fc1":"ax = df.groupby('uf')['per_pessoas_pretas'].max().sort_values(ascending=True).plot(kind='barh', figsize=(12,8),\n                                                                                   title='Maximo % de pessoas negras por Estado')\nplt.xlabel('% pessoas pretas')\nplt.ylabel('Estado')\nplt.show()","e8ff44be":"ax = df.groupby('uf')['per_pessoas_pretas'].mean().sort_values(ascending=True).plot(kind='barh', figsize=(12,8),\n                                                                                   title='Media % pessoas negras por Estado')\nplt.xlabel('% pessoas pretas')\nplt.ylabel('Estado')\nplt.show()","0ecf961f":"ax = df.groupby('uf')['per_pessoas_pretas'].min().sort_values(ascending=True).plot(kind='barh', figsize=(12,8), \n                                                                                  title='Minimo % pessoas negras por Estado')\nplt.xlabel('% pessoas pretas')\nplt.ylabel('Estado')\nplt.show()","843fe3d7":"ax = df.groupby('regiao')['per_pessoas_pretas'].mean().plot(kind='barh', figsize=(12,8),\n                                                           title='Media % pessoas negras por Regiao')\nplt.xlabel('% pessoas pretas')\nplt.ylabel('Regiao')\nplt.show()","c5185394":"ax = df.groupby('regiao')['per_pessoas_pretas'].min().plot(kind='barh', figsize=(12,8),\n                                                          title='Minima % de pessoas negras por regiao')\nplt.xlabel('% pessoas pretas')\nplt.ylabel('Regiao')\nplt.show()","a4afd059":"ax = df.groupby('regiao')['pop_tot', 'pessoas_pretas'].sum().plot(kind='bar', rot=45, figsize=(12,6), logy=True,\n                                                                 title='Populacao Total x Pessoas Pretas')\nplt.xlabel('Regiao')\nplt.ylabel('Log Scale Populacao')\nplt.show()","288bb51d":"ax = df.groupby('uf')['pop_tot', 'pessoas_pretas'].sum().plot(kind='barh', figsize=(14,8),\n                                                                 title='Populacao Total x Pessoas Pretas', logx=True, linewidth=3)\nplt.xlabel('Log Scale Populacao')\nplt.ylabel('Regiao')\nplt.show()","805adbbb":"ax = df.groupby('uf')['per_pessoas_pretas'].mean().sort_values(ascending=True).plot(kind='barh', figsize=(20,6), \n                                                                                    title='Media % pessoas negras por estado')\nplt.xlabel('% pessoas pretas')\nplt.ylabel('Estado')\nplt.show()","55a278a1":"g = sns.lmplot(x=\"lon\", y=\"lat\", data=df,\n           fit_reg=False, scatter_kws={\"s\": 30}, hue='regiao', height=10)\nplt.title('MAPA BRASIL')\nplt.show()","56ce4f0b":"plt.figure(figsize=(20,12))\ng = sns.scatterplot(x='lon', y='lat', data=df, hue='uf')\ng.legend(loc='center left', bbox_to_anchor=(1.25, 0.5), ncol=1);","d8059c13":"df.groupby('regiao')['per_pessoas_pretas'].min()","e87791cc":"df.groupby('regiao')['per_pessoas_pretas'].max()","793239d1":"df[(df['regiao'] == 'NORDESTE') & (df['per_pessoas_pretas'] == 50.65)]","cf419184":"df[(df['regiao'] == 'SUL') & (df['per_pessoas_pretas'] == 0)]","c962ebcb":"plt.figure(figsize=(20,12))\ng = sns.scatterplot(x='lon', y='lat', data=df, hue='uf')\ng.legend(loc='center left', bbox_to_anchor=(1.25, 0.5), ncol=1);\n#this annotate has been copy from this stackoverflow page\n#https:\/\/stackoverflow.com\/questions\/39147492\/annotate-seaborn-factorplot\nplt.annotate('Ant\u00f4nio Cardoso', xy=(-39.134271, -12.283881), xytext=(-39.134271, -12.283881),\n             arrowprops=dict(facecolor='red', shrink=0.05, headwidth=8))\nplt.annotate('Cunhata\u00ed', xy=(-53.097716, -26.925436), xytext=(-53.097716, -26.925436),\n             arrowprops=dict(facecolor='red', shrink=0.05, headwidth=8))\nplt.show()","e1b99af0":"### Checking for null values.","2c53aa48":"## Plotting Region with lowest and highest % of black people","ff0479de":"### Thank you [Mar\u00edlia Prata](https:\/\/www.kaggle.com\/mpwolke) for this dataset and for anyone who see this!!! :)","e8cba063":"# Plotting","270e16a1":"### All the columns named \"Unnamed\", have more than 95% of null values so we will drop then.","4df4535f":"## Clean the data.\n* All columns are strings\n* Columns named \"uf and \"nome\", need to chance to ascii character.\n* Columns named \"fid, gid, descricao, legenda and classe\", don't seem to be useful so I will drop those columns.\n* Fix colum \"per_pessoas_pretas\"\n* Make colum \"geom\" into two columns latitude and longitude\n* Create a new column with the region of 'UF' ex:Bahia: Nordeste, Sao Paulo: Sudeste...\n* Some rows are only coordinates, so I will drop them as well."}}