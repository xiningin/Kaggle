{"cell_type":{"4f013ec6":"code","425ad7a5":"code","10e2294a":"code","ff87642b":"code","06830472":"code","76d961c5":"code","342b6e5f":"code","370cd6bd":"code","dddd116b":"code","80d45f06":"code","4c33092d":"code","c9271f34":"code","a6246b4f":"code","4258cb00":"code","586a5117":"code","ff2d0e50":"code","4f59ee22":"markdown"},"source":{"4f013ec6":"import numpy as np\nimport pandas as pd","425ad7a5":"import random\nimport gc\nfrom sklearn.preprocessing import RobustScaler,StandardScaler\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn import metrics\nfrom lightgbm import LGBMClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_curve,RocCurveDisplay,ConfusionMatrixDisplay,confusion_matrix,roc_auc_score,accuracy_score\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom sklearn import preprocessing\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","10e2294a":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-nov-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-nov-2021\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/tabular-playground-series-nov-2021\/sample_submission.csv')\n\ny = train['target']\n\n# Delete column id\ntrain.drop('id', axis=1, inplace=True)\ntest.drop('id', axis=1, inplace=True)\n","ff87642b":"train.head()","06830472":"test.head()","76d961c5":"cols = ['f'+str(i) for i in range(100)]","342b6e5f":"# plot the first 24 features \n#i = 1\n#plt.figure()\n#fig, ax = plt.subplots(6, 4,figsize=(20, 22))\n#for feature in cols[:24]:\n#    plt.subplot(6, 4,i)\n#    sns.histplot(train[feature],color=\"blue\", kde=True,bins=100, label='train_'+feature)\n#    sns.histplot(test[feature],color=\"olive\", kde=True,bins=100, label='test_'+feature)\n#    plt.xlabel(feature, fontsize=9); plt.legend()\n#    i += 1\n#plt.show()","370cd6bd":"#sns.catplot(x=\"target\", kind=\"count\", palette=\"ch:.25\", data=train)","dddd116b":"## Target distibution\n#pie, ax = plt.subplots(figsize=[18,8])\n#train.groupby('target').size().plot(kind='pie',autopct='%.1f',ax=ax,title='Target distibution')","80d45f06":"# apply standard scaler to the data\nscaler = StandardScaler()\ntrain[cols] = scaler.fit_transform(train[cols])\ntest[cols] = scaler.transform(test[cols])","4c33092d":"preds = np.zeros(test.shape[0])\nkf = StratifiedKFold(n_splits = 10,random_state = 4042,shuffle = True)\n\nauc=[]  \nacc=[]\nn=0\n\nfor trn_idx, test_idx in kf.split(train[cols],y):\n    X_tr,X_val = train[cols].iloc[trn_idx],train[cols].iloc[test_idx]\n    y_tr,y_val = y.iloc[trn_idx],y.iloc[test_idx]\n    \n    model = LogisticRegression(solver='saga', penalty='l1', max_iter=200, C=0.5)\n    model.fit(X_tr,y_tr)\n    preds += model.predict_proba(test[cols])[:,1]\/kf.n_splits\n    \n    auc.append(roc_auc_score(y_val, model.predict_proba(X_val)[:, 1]))\n    acc.append(accuracy_score(y_val, model.predict(X_val)))\n\n    print(f\"fold: {n+1} , accuracy: {round(acc[n]*100,3)} , auc: {round(auc[n]*100,3)}\")\n    n+=1  ","c9271f34":"print(f\"the mean AUC is : {round(np.mean(auc)*100,2)} while the mean Accuracy is : {round(np.mean(acc)*100,2)} \")","a6246b4f":"feature_importance = abs(model.coef_[0])\nfeature_importance = 100.0 * (feature_importance \/ feature_importance.max())\nsorted_idx = np.argsort(feature_importance)[:30]\npos = np.arange(sorted_idx.shape[0]) + .5\n\nfeatfig = plt.figure()\nfeatax = featfig.add_subplot(1, 1, 1)\nfeatax.barh(pos, feature_importance[sorted_idx], align='center')\nfeatax.set_yticks(pos)\nfeatax.set_yticklabels(np.array(train.columns)[sorted_idx], fontsize=14)\nfeatax.set_xlabel('Relative Feature Importance')","4258cb00":"# Plot of confusion matrix for the last fold\ncm = confusion_matrix(model.predict(X_val),y_val)\ncm_display = ConfusionMatrixDisplay(cm).plot()","586a5117":"y_pred_proba = model.predict_proba(X_val)[:, 1]\nfpr, tpr, _ = metrics.roc_curve(y_val,  y_pred_proba)\nauc = metrics.roc_auc_score(y_val, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data, auc for fold 10=\"+str(round(auc*100,2)))\nplt.legend(loc=4)\nplt.show()","ff2d0e50":"sub['target']=preds\nsub.to_csv('submission.csv', index=False)","4f59ee22":"# Modeling"}}