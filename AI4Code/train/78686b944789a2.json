{"cell_type":{"a71d65a6":"code","2e90b85f":"code","6426d3d0":"code","67f2695d":"code","980a6a07":"code","aff99015":"code","812c01bf":"code","a6633d9c":"code","2fd080b4":"code","5d506855":"code","8e802931":"code","06054039":"code","94f38d50":"markdown","55edc106":"markdown","d6b0789e":"markdown","5a8e4b01":"markdown","88728569":"markdown","e6a8aafc":"markdown","7db7e142":"markdown","f7923e61":"markdown","bf229d6d":"markdown"},"source":{"a71d65a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2e90b85f":"train = pd.read_csv('\/kaggle\/input\/sejongai-hashrate\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/sejongai-hashrate\/test.csv')\nsample = pd.read_csv('\/kaggle\/input\/sejongai-hashrate\/submit_sample.csv')","6426d3d0":"import numpy as np\nimport pandas as pd\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport random\nfrom sklearn.preprocessing import StandardScaler\n\ndevice ='cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(777)\ntorch.manual_seed(777)\nif device == 'cuda' :\n  torch.cuda.manual_seed_all(777)\n\ndevice","67f2695d":"train","980a6a07":"x_train = train.iloc[:,2:-1]\nx_test = test.iloc[:,2:]\ny_train = train.iloc[:,-1]\n\n\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)\n\nx_train = torch.FloatTensor(x_train).to(device)\nx_test = torch.FloatTensor(x_test).to(device)\ny_train = torch.FloatTensor(y_train).reshape(-1,1).to(device)","aff99015":"# train data\nprint(x_train[:5])\nprint(x_train.shape)\nprint(y_train[:5])\nprint(y_train.shape)\n\n# test data\nprint(x_test[:3])","812c01bf":"class NN(torch.nn.Module):\n    def __init__(self):\n        super(NN,self).__init__()\n        \n        self.linear1 = nn.Linear(6,512,bias=True)\n        self.linear2 = nn.Linear(512,256,bias=True)\n        self.linear3 = nn.Linear(256,64,bias=True)\n        self.linear4 = nn.Linear(64,1,bias=True)\n        self.relu = nn.ReLU()\n\n        \n    def forward(self,x):\n        out = self.linear1(x)\n        out = self.relu(out)\n        out = self.linear2(out)\n        out = self.relu(out)\n        out = self.linear3(out)\n        out = self.relu(out)\n        out = self.linear4(out)\n        return out\n\nmodel = NN().to(device)\nmodel","a6633d9c":"optimizer = optim.Adam(model.parameters(), lr=0.001)\nloss = nn.MSELoss().to(device)\n\nepochs = 5000","2fd080b4":"model.train()\nfor epoch in range(epochs+1) : \n    avg_cost = 0\n    model.train()\n\n    hypothesis = model(x_train) \n    cost = loss(hypothesis,y_train) \n    \n    optimizer.zero_grad() \n    cost.backward()\n    optimizer.step() \n    \n    if epoch%100==0:\n        print('Epoch : {}, Cost : {}'.format(epoch, cost.item()))","5d506855":"model.eval()\nwith torch.no_grad():\n    y_pred = model(x_test)","8e802931":"sample['hash-rate'] = y_pred.cpu().numpy()\nsample.to_csv('submit_sample.csv',index=False)","06054039":"sample","94f38d50":"* train data","55edc106":"## \uc608\uce21 \uac12 \ub3c4\ucd9c \ubc0f \uc81c\ucd9c","d6b0789e":"## \ubaa8\ub4c8 \uc784\ud3ec\ud2b8 \ubc0f GPU \uc0ac\uc6a9","5a8e4b01":"* # \ubaa8\ub378 \ud559\uc2b5","88728569":"* ## \ubaa8\ub378 \uc815\uc758","e6a8aafc":"* ## \ub370\uc774\ud130 \ub85c\ub4dc","7db7e142":"* ## \ud559\uc2b5 \ud30c\ub77c\ubbf8\ud130 \uc124\uc815","f7923e61":"* ## \ub370\uc774\ud130 \ud30c\uc2f1","bf229d6d":"* ## \ub370\uc774\ud130 \ud655\uc778"}}