{"cell_type":{"57c72905":"code","6977f017":"code","06826fd1":"code","4e797b4c":"code","2ed34a54":"code","fd76aa23":"code","c8d46ebd":"code","470786bf":"code","313a444d":"code","304cfad5":"code","297a7927":"code","7b113557":"code","7269505f":"markdown"},"source":{"57c72905":"!pip install ..\/input\/segmentation-models\/image_classifiers-1.0.0b1\/image_classifiers-1.0.0b1\n!pip install ..\/input\/segmentation-models\/efficientnet-1.0.0b3\/efficientnet-1.0.0b3\n!pip install ..\/input\/segmentation-models\/segmentation_models\/segmentation_models","6977f017":"from efficientnet.keras import *\nimport segmentation_models as sm\nimport cv2\nimport numpy as np \n\nimport pandas as pd\nfrom tqdm import tqdm_notebook\nimport tensorflow as tf\n\nimport keras\nfrom keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras import backend as K\nfrom keras import Input\nfrom keras.models import Model\nfrom keras.utils import *\nfrom keras.layers import *\n\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow import set_random_seed\nimport matplotlib.pyplot as plt\n\nset_random_seed(2)\nnp.random.seed(0)\n\nimport os\nimport gc\nimport random\n\nfrom classification_models.keras import Classifiers","06826fd1":"print(os.listdir('..\/input'))","4e797b4c":"IMG_SIZE = (256, 1600, 3)\nCLF_IMG_SIZE = (128, 800, 3)\nclf_model = 'resnet34'\nunet_encoder = 'resnet34'","2ed34a54":"M, preprocess_input = Classifiers.get(clf_model) \nbase_clf = M(input_shape=CLF_IMG_SIZE, weights=None, include_top=False)\nx = base_clf.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(4, activation='sigmoid', kernel_initializer='he_normal')(x)\nclf = Model(inputs=base_clf.input, outputs=x)\n\nclf.load_weights('..\/input\/severstal-clf\/resnet34_clf_fold_4.h5')","fd76aa23":"unet = sm.Unet(unet_encoder, input_shape=IMG_SIZE, classes=5, activation='softmax', encoder_weights=None)\nunet.load_weights('..\/input\/unet-resnet34-severstal\/unet_resnet34_fold_1_mixup_full_size.h5')","c8d46ebd":"def rle_encoding(mask):\n    \n    pixels = mask.T.flatten()\n    pixels = np.concatenate([[0], pixels,[0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    if len(runs) % 2:\n        runs = np.append(runs,len(pixels))\n    runs[1::2] -= runs[0::2]\n    \n    return ' '.join(str(x) for x in runs)","470786bf":"load_dir = '..\/input\/severstal-steel-defect-detection\/test_images\/'\ntest_fns = os.listdir(load_dir)\nd = { 'x': test_fns}\ndf = pd.DataFrame(data=d)","313a444d":"ctf_loader = ImageDataGenerator(rescale=1\/255.)\nunet_loader = ImageDataGenerator(rescale=1\/255.)\nclf_loader = ctf_loader.flow_from_dataframe(df, directory=load_dir, x_col='x', target_size=(128, 800), shuffle=False, class_mode=None, batch_size=8)\nunet_loader = unet_loader.flow_from_dataframe(df, directory=load_dir, x_col='x', target_size=(256, 1600), shuffle=False, class_mode=None, batch_size=8)","304cfad5":"%%time\nImageId_ClassId = []\nEncodedPixels = []\nit = 0\nfor i in range(len(clf_loader)):\n    has_defect = clf.predict(next(clf_loader))\n    masks = unet.predict(next(unet_loader))\n    for j in range(len(has_defect)):\n        hd = has_defect[j].flatten()\n        mask = masks[j]\n        mask = np.argmax(mask, axis=-1)\n        mask = keras.utils.to_categorical(mask, num_classes=5, dtype='uint8')\n        tmp = np.asarray([ test_fns[it] +'_'+str(id) for id in range(1,5) ])\n        it += 1\n        for idx in range(1, 5):\n            ImageId_ClassId.append(tmp[idx - 1])\n            if hd[idx - 1] > 0.5:\n                EncodedPixels.append(rle_encoding(mask[:,:,idx]))\n            else:\n                EncodedPixels.append('')","297a7927":"sub = { 'ImageId_ClassId': ImageId_ClassId, 'EncodedPixels': EncodedPixels}\nsub = pd.DataFrame(data=sub)\nsub.head(10)\n\nsub_sample = pd.read_csv('..\/input\/severstal-steel-defect-detection\/sample_submission.csv')\nsub_sample = sub_sample.drop(['EncodedPixels'], axis = 1)\n\nsubmission = sub_sample.merge(sub, on = ['ImageId_ClassId'])\nsubmission.head(10)","7b113557":"submission.to_csv('submission.csv', index = False)","7269505f":"<a href='submission.csv'>Download<\/a>"}}