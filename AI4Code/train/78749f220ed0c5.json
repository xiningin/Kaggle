{"cell_type":{"3481d7a4":"code","1ce16d79":"code","a99c0243":"code","c4fe5037":"code","1609db3c":"code","56189523":"code","9d1042a7":"code","ac8f2274":"code","b6120458":"code","c92d5a58":"code","a4e48b69":"code","9d396c88":"code","034eca12":"code","274e24f4":"code","0045ca3a":"code","983bae8d":"code","c498c216":"code","2f8b0512":"code","315671f3":"code","296bb68f":"code","5ee3daba":"code","7fb1a804":"code","51800d3c":"code","002eb571":"code","c62e898f":"code","05c1178d":"code","712508c1":"code","29d098ed":"code","9806f809":"code","ebe375ed":"code","91c09709":"code","55a55101":"code","4a592583":"code","549fef11":"code","78dbc582":"code","b46a8a50":"code","f548c84c":"code","b454be82":"code","3a6c0d95":"code","42dbc124":"code","99b5d5e6":"code","92797a8b":"code","cc579e77":"code","1a0ac7fb":"code","94ed0261":"code","76e11ae0":"code","f3cdc424":"code","911dfb4a":"code","1c0ae09e":"code","fe2ed77a":"code","15eb42e7":"code","7e25e705":"code","096511a7":"code","f3ead511":"code","1dcfb277":"code","5f20db3e":"code","22dee209":"code","be470424":"code","cda6881b":"code","8d8dae75":"code","a95bd467":"code","eaf13a6c":"code","3a840d98":"code","b90610a4":"code","4a247613":"code","e0439b3e":"code","dc1c30e6":"code","67ae3102":"code","2997d44f":"code","2beda99d":"code","abef2f84":"code","ea1b65af":"code","ccb0c8d7":"code","0067b76a":"code","cd97e352":"code","0773676e":"code","7876792c":"code","213e6202":"code","d65b9ae3":"code","c67826a6":"code","7ba05da7":"code","1903674a":"code","a3ff81d8":"code","8c9fbec5":"code","1338d91f":"code","faebdd8a":"code","a889aa25":"code","a2d2f394":"code","15d2d999":"code","5386a777":"code","6a4aa797":"code","ff06c87b":"code","4d6194be":"code","dc6e66e0":"code","57e8ffe1":"code","400a7d27":"code","ea12d381":"code","76d45e2d":"code","80f5926f":"code","7599b093":"code","1cd3a117":"code","5ef60373":"code","c1476e35":"code","24ea1bb4":"code","ee600ac8":"code","74a8dca6":"code","4f201ee7":"markdown","0c99b0e8":"markdown","43a2c046":"markdown","f22d44ac":"markdown","d3200003":"markdown","ebde1ec0":"markdown","23967b4c":"markdown","31b5fae6":"markdown","93ca6610":"markdown","a891dc84":"markdown","3959c676":"markdown","f30ebb84":"markdown","5f830be0":"markdown","d8f2652e":"markdown","7e5e6992":"markdown","6ad78747":"markdown","f519c8b4":"markdown","6782736a":"markdown","0b3be552":"markdown","d6023a4d":"markdown","8cee3457":"markdown"},"source":{"3481d7a4":"import warnings\nwarnings.filterwarnings('ignore')\nfrom IPython.display import clear_output\nclass Output:\n    def clear(self):\n        clear_output()\noutput = Output()\nimport gc\nimport os\ndef plot(d,t='area'):\n  if t =='area':\n    return pd.DataFrame(d).sort_index().plot.area()\n  if t =='line':\n    return pd.DataFrame(d).sort_index().plot.line()\n  if t =='hist':\n    return pd.DataFrame(d).sort_index().plot.hist()\n  if t =='bar':\n    return pd.DataFrame(d).sort_index().plot.bar()\n\ndef transpose(d,l=100):\n  x = pd.DataFrame(d)\n  return x.head(l).transpose()","1ce16d79":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(rc={\"figure.figsize\": (10, 2)})\nimport gc","a99c0243":"_path = '\/kaggle\/input\/competitive-data-science-predict-future-sales\/'\nitem_categories =  pd.read_csv(_path+'\/item_categories.csv')\nitems =  pd.read_csv(_path+'\/items.csv')\nsales_train =  pd.read_csv(_path+'\/sales_train.csv')\nsubmission =  pd.read_csv(_path+'\/sample_submission.csv')\nshops =  pd.read_csv(_path+'\/shops.csv')\ntest =  pd.read_csv(_path+'\/test.csv')","c4fe5037":"!pip install -U textblob\nfrom textblob import TextBlob\nfor i in range(len(shops)):\n  text = shops.loc[i,\"shop_name\"]\n  hi_blob = TextBlob(text)\n  text_pt = hi_blob.translate(to='pt',from_lang='ru')\n  shops.loc[i,\"shop_name\"] =str(text_pt)\noutput.clear()","1609db3c":"#item_categories =  pd.read_csv('.\/items.csv')\nfor i in range(len(item_categories)):\n  text = item_categories.loc[i,\"item_category_name\"]\n  hi_blob = TextBlob(u''+text)\n  text_pt = hi_blob.translate(to='pt')\n  item_categories.loc[i,\"item_category_name\"] =str(text_pt)\noutput.clear()","56189523":"d = items.drop_duplicates()\nprint(\"duplicate rows removed\\t\",len(items)-len(d))","9d1042a7":"shops.describe().transpose()","ac8f2274":"#https:\/\/aaaanchakure.medium.com\/data-visualization-a6dccf643fbb\nshops.shop_id.plot.line()\nplt.show()","b6120458":"import urllib.request\nimport codecs\nfrom bs4 import BeautifulSoup\nwiki = 'https:\/\/pt.wikipedia.org\/wiki\/Lista_de_cidades_da_R%C3%BAssia_por_popula%C3%A7%C3%A3o'\npage = urllib.request.urlopen(wiki)\nsoup = BeautifulSoup(page, 'html5lib')\ntable = soup.find('table', attrs={'class': 'wikitable'})\ncities = []\ntds = [row for row in table.findAll('tr')]\nfor td in tds:\n  if len(td.findAll(\"td\"))==4:\n    cities.append([td.findAll(\"td\")[1].find(\"a\").text.strip().upper(),\n                 td.findAll(\"td\")[2].find(\"a\").text.strip().upper(),\n                 td.findAll(\"td\")[3].find(\"i\").text.replace('\\xa0','').strip()])\n#print(rows)\n","c92d5a58":"!pip install fuzzywuzzy\n!pip install python-Levenshtein\noutput.clear()","a4e48b69":"from fuzzywuzzy import fuzz \nfrom fuzzywuzzy import process \nimport re\ndef fn_city(n):\n  n if n.find('\"')==-1 else n[0:n.find('\"')].strip()\n  n = re.sub('[^A-Za-z]+', ' ', n).strip().upper()\n  n = n.replace(\"CENTRO\",\"\")\n  n = n.replace(\"CENTRAL\",\"\")\n  n = n.replace(\"COMERCIAL\",\"\")\n  n = n.replace(\"COMERCIO\",\"\")\n  n = n.replace(\"CENTRAL\",\"\")\n  n = n.replace(\"N \",\"\")\n  n = n.replace(\"DE \",\"\")\n  n = n.replace(\"MEGA \",\"\")\n  n = n.replace(\"COMPLEXO E \",\"\")\n  if n.find(\"SPB\")>=0:\n    n = \"Distrito Federal do Noroeste\"\n  else:\n    if n.find(\"UFA\")>=0:\n      n = \"Bascortost\u00e3o\"\n    else:\n      if n.find(\"MOSC\")>=0:\n        n = \"distrito federal central\"\n      else:\n        n = n.split(' ')[0]\n        c = [m[1] for m in cities]\n        n, s= process.extractBests(n, c)[0]  \n  return n\nshops[\"shop_shortname\"] = shops.shop_name.transform(lambda n:fn_city(n))\n\nshops[\"shop_city\"] = \"\"\nshops[\"shop_district\"]=\"\"\nshops[\"shop_population\"]=0\n\nquery = list(shops.shop_shortname.value_counts().index)\noutput.clear()\nfor q in query:\n  print(q.lower())\n  r, i = process.extractBests(q, cities)[0]\n  shops.loc[(shops.shop_shortname==q),\"shop_city\"] = r[0]\n  shops.loc[(shops.shop_shortname==q),\"shop_district\"]= r[1]\n  shops.loc[(shops.shop_shortname==q),\"shop_population\"]= int(r[2])","9d396c88":"transpose(shops.shop_city.sort_values())","034eca12":"shops[\"shop_category\"] = shops.shop_name.str.split(\" \").map( lambda x: x[1].replace(\"(\",\"\").replace(\",\",\"\").replace(\".\",\"\").replace('\\\"','').upper()[0:1] )\ncats = list(shops.shop_category.value_counts().index)\nshops.loc[(shops.shop_category.isin(cats[3:])),\"shop_category\"]='O'\ntranspose(shops.shop_category.value_counts())","274e24f4":"cols = [ 'shop_id', 'shop_city', 'shop_district',  'shop_category']\nshops = shops[cols]\nshops.shop_district = shops.shop_district.astype('category')\nshops.shop_district = shops.shop_district.cat.codes\nshops.shop_category = shops.shop_category.astype('category')\nshops.shop_category = shops.shop_category.cat.codes\nshops.shop_city = shops.shop_city.astype('category')\nshops.shop_city = shops.shop_city.cat.codes\nshops.head()","0045ca3a":"shops.shop_city.sort_index().plot.hist()\nplt.show()","983bae8d":"item_categories.head(1)","c498c216":"item_categories.describe().transpose()","2f8b0512":"item_categories[\"item_category_type\"] =  item_categories.item_category_name+'- '\nitem_categories[\"item_category_type\"] = item_categories.item_category_type.transform(lambda c: c.split(\"-\")[0].strip().upper() if c.find(\" \")==-1 else c.split(\" \")[0].strip().upper()  )\nitem_categories[\"item_category_type\"] = item_categories.item_category_type.transform(lambda c: c if c.find(\"-\")==-1 else c.split(\"-\")[0].strip().upper()  )\ncategories = (item_categories[\"item_category_type\"].value_counts().index)\nitem_categories.loc[(item_categories.item_category_type.isin(categories[8:])),\"item_category_type\"]='OUTROS'\ntranspose(item_categories.item_category_type.value_counts())","315671f3":"item_categories = item_categories[['item_category_id','item_category_type']]\nitem_categories.item_category_type = item_categories.item_category_type.astype('category')\nitem_categories.item_category_type = item_categories.item_category_type.cat.codes\nitem_categories.head(1)","296bb68f":"item_categories.item_category_type.sort_index().plot.hist()\nplt.show()","5ee3daba":"items.head(1)","7fb1a804":"items.describe().transpose()","51800d3c":"items.item_category_id.sort_index().plot.hist()\nplt.show()","002eb571":"items_categories = items.merge(item_categories,how='left',left_on='item_category_id', right_on='item_category_id')","c62e898f":"items_categories.describe().transpose()","05c1178d":"items_categories = items_categories[[\"item_id\",\"item_category_id\",\"item_category_type\"]]\nitems_categories.reset_index(drop=True, inplace=True)\nitems_categories.head(1)","712508c1":"items_categories.item_category_type.sort_index().plot.hist()\nplt.show()","29d098ed":"sales_train.head(1)","9806f809":"sales_train.describe().transpose()","ebe375ed":"fig, (ax1, ax2) = plt.subplots(1, 2)\nsales_train.item_price.sort_index().plot.hist(ax=ax1)\nax1.set_xlabel(\"item_price\")\nsales_train.item_cnt_day.sort_index().plot.hist(ax=ax2)\nax2.set_xlabel(\"item_cnt_day\")\nplt.show()","91c09709":"sales = sales_train.copy()\nsales = items.merge(sales,how='right',left_on='item_id', right_on='item_id')\nlen(sales),len(sales_train),len(items)","55a55101":"sales.head(1)","4a592583":"sales = items_categories.merge(sales,how='right',on=[\"item_id\",\"item_category_id\"])\nlen(sales),len(sales_train),len(items_categories)","549fef11":"#sales.drop(columns=['item_name_x','item_name_y'],inplace=True)\nsales.reset_index(drop=True,inplace=True)\nsales.head(1)","78dbc582":"sales.date_block_num.sort_index().plot.hist()","b46a8a50":"import time\nts = time.time()\nsales.date  = pd.to_datetime(sales.date,errors='coerce')\nyears = (sales.date.dt.year.value_counts().index)\nmonths= (sales.date.dt.month.value_counts().index)\nyears\nsequence = 0\nfor i,y in enumerate(years.sort_values()):\n  for m in months.sort_values():\n    if y==2013 and m ==1:\n      sales.loc[(sales.date.dt.year==y)&(sales.date.dt.month==m),\"date_block_num\"]=0\n    else:\n      sequence+=1\n      sales.loc[(sales.date.dt.year==y)&(sales.date.dt.month==m),\"date_block_num\"]=sequence\ngc.collect()\ntime.time() - ts","f548c84c":"sales.date_block_num.sort_index().plot.hist()","b454be82":"sales[\"dayofweek\"]= sales.date.dt.dayofweek\nsales[\"weekday\"]= sales.date.dt.weekday\nsales[\"quarter\"]= sales.date.dt.quarter\nsales[\"week\"]= sales.date.dt.week\nsales[\"month\"]= sales.date.dt.month\n#sales[\"year\"]= sales.date.dt.year\nsales[\"weekofyear\"]= sales.date.dt.weekofyear\nsales.head()","3a6c0d95":"transpose(sales.item_price.describe())","42dbc124":"sales = sales[(sales.item_price <107980)]\nsales = sales[(sales.item_price >0)]","99b5d5e6":"transpose(sales.item_price.describe())","92797a8b":"transpose(sales.item_cnt_day.describe())","cc579e77":"sales = sales[(sales.item_cnt_day <22)]\n#sales = sales[(sales.item_cnt_day >)]\ntranspose(sales.item_cnt_day.describe())","1a0ac7fb":"fig, (ax1, ax2) = plt.subplots(1, 2)\nsales.date_block_num.sort_index().plot.hist(ax=ax1)\nax1.set_xlabel(\"item_price\")\nsales.item_cnt_day.sort_index().plot.hist(ax=ax2)\nax2.set_xlabel(\"item_cnt_day\")\nplt.show()","94ed0261":"#print(\"#1\",len(sales))\n#sales = sales[(sales.item_price >0)]\n#print(\"#2\",len(sales))\n#sales = sales[(sales.item_cnt_day >0)]\nsales.reset_index(drop=True, inplace=True)\nprint(\"#3\",len(sales))","76e11ae0":"gc.collect()","f3cdc424":"sales.pivot_table(index=[\"shop_id\"],values=[\"item_cnt_day\"], aggfunc='sum')","911dfb4a":"sales.pivot_table(index=[\"shop_id\"],columns=[\"date_block_num\"],values=[\"item_cnt_day\"], aggfunc=['sum','mean'],fill_value=0,margins=True)\n","1c0ae09e":"pd.pivot_table(sales,index=[\"date_block_num\",\"shop_id\",\"item_category_id\"],values=[\"item_cnt_day\"],aggfunc=[\"sum\",\"mean\"])","fe2ed77a":"pd.pivot_table(sales,index=[\"date_block_num\",\"shop_id\",\"item_category_id\",\"item_id\"],values=[\"item_cnt_day\"],aggfunc=[\"sum\",\"mean\"])","15eb42e7":"pd.pivot_table(sales,index=[\"date_block_num\",\"shop_id\",\"item_category_id\",\"item_id\"],values=[\"item_cnt_day\"],aggfunc=[\"sum\",\"mean\"])","7e25e705":"sales.head(1)","096511a7":"pd.pivot_table(sales,index=[\"date_block_num\",\"month\"],values=[\"item_cnt_day\"],aggfunc=[\"sum\"]).head()","f3ead511":"if True:\n  sales = sales[sales.item_price >=1]\n\n  test.loc[test.shop_id == 0, 'shop_id'] = 57\n  test.loc[test.shop_id == 0, 'shop_id'] = 57\n  test.loc[test.shop_id == 1, 'shop_id'] = 57\n  test.loc[test.shop_id == 1, 'shop_id'] = 57\n  test.loc[test.shop_id == 58, 'shop_id'] = 57\n  test.loc[test.shop_id == 58, 'shop_id'] = 57\n  test.loc[test.shop_id == 18, 'shop_id'] = 17\n  test.loc[test.shop_id == 18, 'shop_id'] = 17\n  test.loc[test.shop_id == 30, 'shop_id'] = 31\n  test.loc[test.shop_id == 30, 'shop_id'] = 31\n  test.loc[test.shop_id == 40, 'shop_id'] = 41\n  test.loc[test.shop_id == 40, 'shop_id'] = 41\n  test.loc[test.shop_id == 39, 'shop_id'] = 41\n  test.loc[test.shop_id == 39, 'shop_id'] = 41\n  test.loc[test.shop_id == 10, 'shop_id'] = 11\n  test.loc[test.shop_id == 10, 'shop_id'] = 11\n  test.loc[test.shop_id == 52, 'shop_id'] = 53\n  test.loc[test.shop_id == 52, 'shop_id'] = 53\n  test.loc[test.shop_id == 6, 'shop_id'] = 8\n  test.loc[test.shop_id == 6, 'shop_id'] = 8\n  test.loc[test.shop_id == 7, 'shop_id'] = 8\n  test.loc[test.shop_id == 7, 'shop_id'] = 8\n\n  sales.loc[sales_train.shop_id == 0, 'shop_id'] = 57\n  sales.loc[sales_train.shop_id == 0, 'shop_id'] = 57\n  sales.loc[sales_train.shop_id == 1, 'shop_id'] = 57\n  sales.loc[sales_train.shop_id == 1, 'shop_id'] = 57\n  sales.loc[sales_train.shop_id == 58, 'shop_id'] = 57\n  sales.loc[sales_train.shop_id == 58, 'shop_id'] = 57\n  sales.loc[sales_train.shop_id == 18, 'shop_id'] = 17\n  sales.loc[sales_train.shop_id == 18, 'shop_id'] = 17\n  sales.loc[sales_train.shop_id == 30, 'shop_id'] = 31\n  sales.loc[sales_train.shop_id == 30, 'shop_id'] = 31\n  sales.loc[sales_train.shop_id == 40, 'shop_id'] = 41\n  sales.loc[sales_train.shop_id == 40, 'shop_id'] = 41\n  sales.loc[sales_train.shop_id == 39, 'shop_id'] = 41\n  sales.loc[sales_train.shop_id == 39, 'shop_id'] = 41\n  sales.loc[sales_train.shop_id == 10, 'shop_id'] = 11\n  sales.loc[sales_train.shop_id == 10, 'shop_id'] = 11\n  sales.loc[sales_train.shop_id == 52, 'shop_id'] = 53\n  sales.loc[sales_train.shop_id == 52, 'shop_id'] = 53\n  sales.loc[sales_train.shop_id == 6, 'shop_id'] = 8\n  sales.loc[sales_train.shop_id == 6, 'shop_id'] = 8\n  sales.loc[sales_train.shop_id == 7, 'shop_id'] = 8\n  sales.loc[sales_train.shop_id == 7, 'shop_id'] = 8\n\n  sales = sales[(sales.item_price < 100000)]\n  sales = sales[sales.item_cnt_day < 1001]\n\n\npd.pivot_table(sales,index=[\"shop_id\"],values=[\"item_price\"],aggfunc=['mean','max','min',len]).head()","1dcfb277":"#sales = sales[sales.item_price >=1]\npd.pivot_table(sales,index=[\"shop_id\"],values=[\"item_cnt_day\"],aggfunc=['mean','max','min','count']).head()","5f20db3e":"sales.head(1)","22dee209":"sales_pivot = sales.pivot_table(\n    index=['shop_id', 'item_id','item_category_id','item_category_type'],\n    values=['item_cnt_day'],\n    columns=['date_block_num'],\n    fill_value=0,\n    aggfunc=['sum']\n).reset_index()\n\nsales_pivot.head(2)\n","be470424":"(31\/9)#sales_pivot.head(1)\n","cda6881b":"sales_pivot.describe()","8d8dae75":"sales.columns","a95bd467":"train = sales.copy()\nkeys= ['shop_id', 'item_id','item_category_id','item_category_type']","eaf13a6c":"train = train.merge(sales_pivot, how='left', on=keys).fillna(0)\ntrain.reset_index(drop=True,inplace=True)\nlen(train)\n","3a840d98":"len(train)","b90610a4":"test.head(1)","4a247613":"data = test.copy()\ndata = items.merge(data,how='right',left_on='item_id', right_on='item_id', sort=False)\ndata = items_categories.merge(data,how='right',on=[\"item_id\",\"item_category_id\"] ,sort=False)\ndata.sort_values(by=\"ID\", ascending=True, inplace=True)\ndata = data[['shop_id', 'item_id','item_category_id','item_category_type']]\ndata.reset_index(drop=True,inplace=True)\n","e0439b3e":"data.head()","dc1c30e6":"train.drop_duplicates(inplace=True, keep=False)\ntrain.reset_index(drop=True,inplace=True)\ntrain.head(1)","67ae3102":"gc.collect()","2997d44f":"train.drop_duplicates(inplace=True)\ntrain.rename_axis(inplace=True)","2beda99d":"len(train),len(sales),len(data)","abef2f84":"train.head(1)","ea1b65af":"columns = ['item_id',   'item_category_id', 'item_category_type',\n                'item_name',                    'date_block_num',\n                  'shop_id',         'item_price',       'item_cnt_day',\n                'dayofweek',            'weekday',            'quarter',\n                     'week',              'month',         'weekofyear']","ccb0c8d7":"data = data.merge(sales_pivot, how='left', on=keys).fillna(0)\n#data.reset_index(drop=True,inplace=True)\nlen(data)","0067b76a":"train.to_pickle('.\/a.pkl')\ndata.to_pickle('.\/b.pkl')\nshops.to_pickle('.\/c.pkl')\nsales_pivot.to_pickle('.\/d.pkl')\ngc.collect()","cd97e352":"import pandas as pd\nimport numpy as np\nimport gc\ntrain = pd.read_pickle('.\/a.pkl')\ndata= pd.read_pickle('.\/b.pkl')\nshops= pd.read_pickle('.\/c.pkl')\n#sales_pivot= pd.read_pickle('.\/d.pkl')","0773676e":"gc.collect()","7876792c":"data.head(1)","213e6202":"gc.collect()","d65b9ae3":"print(data.item_id.head(10).values)\nprint(test.item_id.head(10).values)","c67826a6":"len(data),len(train),len(sales)\n","7ba05da7":"columns = data.columns","1903674a":"data_train = train[columns].copy()\ndata_train = data_train.merge(shops,how='left',left_on='shop_id', right_on='shop_id')\ndata_train.head()","a3ff81d8":"data = data.merge(shops,how='left',left_on='shop_id', right_on='shop_id')\ndata.head()","8c9fbec5":"data_train.shape,data.shape","1338d91f":"gc.collect()","faebdd8a":"data.shape,data_train.shape","a889aa25":"columns = [                   'shop_id',                    'item_id',\n                 'item_category_id',         'item_category_type',\n                        'shop_city',              'shop_district',\n                    'shop_category',\n ('sum', 'item_cnt_day', 0),  ('sum', 'item_cnt_day', 1),\n        ('sum', 'item_cnt_day', 2),  ('sum', 'item_cnt_day', 3),\n        ('sum', 'item_cnt_day', 4),  ('sum', 'item_cnt_day', 5),\n        ('sum', 'item_cnt_day', 6),  ('sum', 'item_cnt_day', 7),\n        ('sum', 'item_cnt_day', 8),  ('sum', 'item_cnt_day', 9),\n       ('sum', 'item_cnt_day', 10), ('sum', 'item_cnt_day', 11),\n       ('sum', 'item_cnt_day', 12), ('sum', 'item_cnt_day', 13),\n       ('sum', 'item_cnt_day', 14), ('sum', 'item_cnt_day', 15),\n       ('sum', 'item_cnt_day', 16), ('sum', 'item_cnt_day', 17),\n       ('sum', 'item_cnt_day', 18), ('sum', 'item_cnt_day', 19),\n       ('sum', 'item_cnt_day', 20), ('sum', 'item_cnt_day', 21),\n       ('sum', 'item_cnt_day', 22), ('sum', 'item_cnt_day', 23),\n       ('sum', 'item_cnt_day', 24), ('sum', 'item_cnt_day', 25),\n       ('sum', 'item_cnt_day', 26), ('sum', 'item_cnt_day', 27),\n       ('sum', 'item_cnt_day', 28), ('sum', 'item_cnt_day', 29),\n       ('sum', 'item_cnt_day', 30), ('sum', 'item_cnt_day', 31),\n       ('sum', 'item_cnt_day', 32), ('sum', 'item_cnt_day', 33),\n       ('sum', 'item_cnt_day', 34), ('sum', 'item_cnt_day', 35)]","a2d2f394":"#data.columns","15d2d999":"data_train = data_train[columns]\ndata = data[columns]","5386a777":"len(data.values[:,:-2]),len(data.values[:, -2:-1]),len(data.values[:,1:-1])","6a4aa797":"len(data_train.values[:,:-2]),len(data_train.values[:, -2:-1]),len(data_train.values[:,1:-1])","ff06c87b":"x, y = data_train.values[:,:-2], data_train.values[:, -2:-1].ravel()\ny = y.clip(0,20)\nxtest = data.values[:,:-2]\n","4d6194be":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nxtrain, xvalid, ytrain, yvalid = train_test_split(x, y,stratify=y, test_size=0.3)","dc6e66e0":"print(\"xtrain:\\t\",len(xtrain),\"\\t\",xtrain.shape)\nprint(\"ytrain:\\t\",len(ytrain),\"\\t\",ytrain.shape)\nprint(\"xvalid:\\t\",len(xvalid),\"\\t\",xvalid.shape)\nprint(\"yvalid:\\t\",len(yvalid),\"\\t\",yvalid.shape)\nprint(\"\\nxtest:\\t\",len(xtest),\"\\t\",xtest.shape)\n","57e8ffe1":"scaler = StandardScaler()\n#scaler.fit(xtrain)\n#xtrain=scaler.transform(xtrain)\n#xvalid=scaler.transform(xvalid)\n#xtest=scaler.transform(xtest)","400a7d27":"xtest[0,:5],xtrain[0,:5],xvalid[0,:5]","ea12d381":"gc.collect()","76d45e2d":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau,LearningRateScheduler\nimport os\nimport math\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nkeras.backend.clear_session()\n\nxtrain = np.reshape(xtrain, (xtrain.shape[0],xtrain.shape[1], 1))\nxvalid = np.reshape(xvalid, (xvalid.shape[0],xvalid.shape[1], 1))\n\n\ndef learning_rate_scheduler(self,epoch=0):\n  lr = 1e-2\n  print(' Learning rate: ', lr,' - epoch: ',epoch)\n  return lr\nbatch_size = 512\nunit = int(xtrain.shape[1])\nmodel = keras.Sequential()\nmodel.add(keras.layers.LSTM(unit, return_sequences=True, input_shape=(xtrain.shape[1], 1)))\nmodel.add(keras.layers.Dropout(0.2))\nmodel.add(keras.layers.LSTM(unit, return_sequences=True))\nmodel.add(keras.layers.Dropout(0.3))\nmodel.add(keras.layers.LSTM(unit))\nmodel.add(keras.layers.Dense(1))\ntrain_size = xtrain.shape[0]\nmodel.compile(optimizer='RMSprop', loss='mse', metrics=[tf.keras.metrics.RootMeanSquaredError(name='root_mean_squared_error', dtype=None)])\n\nlr_scheduler = LearningRateScheduler(learning_rate_scheduler)\nlr_reducer = ReduceLROnPlateau(factor=np.sqrt(0.1),\n                            cooldown=1,\n                            patience=2,\n                            min_lr=0.5e-2)\ncallbacks = [ lr_scheduler, lr_reducer]\n\ngc.collect()\n","80f5926f":"steps_per_epoch =  math.ceil(train_size \/ batch_size )\nhistory = model.fit(xtrain, ytrain,  \n                            epochs=5, verbose=1, \n                            steps_per_epoch=steps_per_epoch, \n                            batch_size=batch_size, \n                            validation_data=(xvalid, yvalid),\n                            callbacks=callbacks)","7599b093":"name=\"FRANCKE\"\nepochs = list(range(1,(np.array(history.history['root_mean_squared_error']).shape[0])+1))\nplt.clf()\nfig = plt.figure(figsize=(15, 2))\nax = fig.add_subplot(121)\nax2 = fig.add_subplot(122)\nax.set_title(name+' - RMSE')\nax.plot(epochs,history.history['root_mean_squared_error'], \"r.-\")\nax.plot(epochs,history.history['val_root_mean_squared_error'], \"c.-\")\nax.legend(('RMSE','VAL RMSE'),fontsize=15)\nax.set_xlabel(\"Epochs\")\nax.grid(True)\n\nax2.set_title(name+' - LOSS')\nax2.plot(epochs,history.history['loss'], \"r.-\")\nax2.plot(epochs,history.history['val_loss'], \"c.-\")\nax2.legend(('LOSS','VAL LOSS'),fontsize=15)\nax2.set_xlabel(\"Epochs\")\nax2.grid(True)\nplt.show()\n","1cd3a117":"from sklearn.metrics import mean_squared_error\nypred = model.predict(xvalid)","5ef60373":"print('MSE =', mean_squared_error(yvalid, ypred, squared=False))\nprint('RMSE =', mean_squared_error(yvalid, ypred, squared=True))","c1476e35":"x = np.reshape(xtest, (xtest.shape[0],xtest.shape[1], 1))\npreds = model.predict(x)","24ea1bb4":"ids = pd.read_csv(_path+'\/test.csv')\nsubmission = pd.DataFrame({\n    \"ID\": ids.index, \n    \"item_cnt_month\": preds.reshape(-1).clip(0,20)\n})\n#https:\/\/pbpython.com\/pandas-pivot-table-explained.html\nsubmission.head(10)","ee600ac8":"min(preds.reshape(-1)), np.median(preds.reshape(-1))","74a8dca6":"submission.to_csv('francke_peixoto.csv', index=False)\n","4f201ee7":"Voc\u00ea recebe dados hist\u00f3ricos de vendas di\u00e1rios. A tarefa \u00e9 prever a quantidade total de produtos vendidos em cada loja para o conjunto de teste. Observe que a lista de lojas e produtos muda ligeiramente a cada m\u00eas. Criar um modelo robusto que possa lidar com tais situa\u00e7\u00f5es \u00e9 parte do desafio.\n\n**Descri\u00e7\u00f5es de arquivo**\n> * **sales_train.csv** - o conjunto de treinamento. Dados hist\u00f3ricos di\u00e1rios de janeiro de 2013 a outubro de 2015.\n> * **test.csv** - o conjunto de teste. Voc\u00ea precisa prever as vendas dessas lojas e produtos para novembro de 2015.\n> * **sample_submission.csv** - um arquivo de envio de amostra no formato correto.\n> * **items.csv** - informa\u00e7\u00f5es complementares sobre os itens \/ produtos.\n> * **item_categories.csv**  - informa\u00e7\u00f5es complementares sobre as categorias de itens.\n> * **shops.csv** - informa\u00e7\u00f5es complementares sobre as lojas.\n\n**Campos de dados**\n> * **ID  - um Id que representa uma tupla (Loja, Item) dentro do conjunto de teste\n> * **shop_id** - identificador \u00fanico de uma loja\n> * **item_id** - identificador \u00fanico de um produto\n> * **item_category_id** - identificador \u00fanico da categoria do item\n> * **item_cnt_day** - n\u00famero de produtos vendidos. **Voc\u00ea est\u00e1 prevendo um valor mensal desta medida**  \ud83d\udca5\n> * **item_price** - pre\u00e7o atual de um item\n> * **data**  - data no formato dd \/ mm \/ aaaa\n> * **date_block_num** - um n\u00famero de m\u00eas consecutivo, usado por conveni\u00eancia. Janeiro de 2013 \u00e9 0, fevereiro de 2013 \u00e9 1, ..., outubro de 2015 \u00e9 33\n> * **item_name**  - nome do item\n> * **shop_name** - nome da loja\n> * **item_category_name** - nome da categoria do item","0c99b0e8":"##### Traduzindo dados...","43a2c046":">* **Limites de envio**: No m\u00e1ximo 5 inscri\u00e7\u00f5es por dia.\n\n[Submissions](https:\/\/www.kaggle.com\/c\/competitive-data-science-predict-future-sales\/submissions)","f22d44ac":"##### Descri\u00e7\u00e3o\nEste desafio serve como projeto final para o curso Coursera \"Como ganhar um concurso de ci\u00eancia de dados\" .\n\nNesta competi\u00e7\u00e3o, voc\u00ea trabalhar\u00e1 com um conjunto de dados de s\u00e9rie temporal desafiador que consiste em dados di\u00e1rios de vendas, gentilmente cedidos por uma das **maiores empresas de software da russa** - a **1C Company** . \n\nPedimos que voc\u00ea preveja as vendas totais de cada produto e loja no pr\u00f3ximo m\u00eas. Ao resolver esta competi\u00e7\u00e3o, voc\u00ea poder\u00e1 aplicar e aprimorar suas habilidades em ci\u00eancia de dados.","d3200003":"##### Setup","ebde1ec0":"**sales_train**","23967b4c":"##### Regras","31b5fae6":"#### Feature Engineering","93ca6610":"##### Analysis","a891dc84":"<p><img alt=\"Colaboratory logo\" height=\"99px\" \nsrc='https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcTpw-4GbEpC5PiordgozbjH7ILPI-X6NU_d7Q&usqp=CAU'\nalign=\"left\" hspace=\"10px\" vspace=\"0px\" ><\/p>\n<h1>Prever Vendas Futuras \n<p>Projeto final para o curso Coursera \"Como ganhar um concurso de ci\u00eancia de dados\"<\/p>\n<\/h1>\n<hr \/>\n<a href=\"https:\/\/www.kaggle.com\/c\/competitive-data-science-predict-future-sales\/rules\">Kaggle<\/a>\n","3959c676":"**items_categories**","f30ebb84":"#### O Desafio","5f830be0":"###### **Pivot Table**","d8f2652e":"**items**","7e5e6992":"**item_categories**","6ad78747":"###### Overview","f519c8b4":"**sales**","6782736a":"> **shops**","0b3be552":"\n<p><img alt=\"Colaboratory logo\" height=\"49px\" \nsrc='https:\/\/static.1c.ru\/images\/logo.png'\nalign=\"left\" hspace=\"10px\" vspace=\"0px\" ><\/p>\n<h1> 1C COMPANY\n<\/h1>\nFundada em 1991, a 1C Company \u00e9 especializada em desenvolvimento, distribui\u00e7\u00e3o, publica\u00e7\u00e3o e suporte de software para o mercado de massa. \n <a href=\"https:\/\/1c.ru\/eng\/title.htm\">site daa empresa<\/a>","d6023a4d":"##### Dados","8cee3457":"#### Analises"}}