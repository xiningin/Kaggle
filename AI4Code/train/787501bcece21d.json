{"cell_type":{"622d56c3":"code","67e2d734":"code","1a63abba":"code","0efed441":"code","2f9b3e78":"code","1e21c7a4":"code","d463d80c":"code","62806ab0":"code","1c7a5d42":"code","3d4c6fab":"code","e71cfd36":"code","193619e8":"code","d8f34e47":"code","d4918179":"code","c7a53733":"code","8f45a914":"code","cd576560":"code","4c2c2301":"code","162597b0":"code","74836a58":"code","70512b93":"code","30a7eea7":"markdown","0f6f57ee":"markdown","8ce83ee5":"markdown","36830da1":"markdown"},"source":{"622d56c3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67e2d734":"# Import Libraries\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.neural_network import MLPClassifier\n\nfrom sklearn.metrics import confusion_matrix,accuracy_score,classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_score,recall_score\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Suppressing Warnings\nimport warnings\nwarnings.filterwarnings('ignore')","1a63abba":"# Load and show the dataset\ndf = pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin\/breast-cancer-wisconsin.data')\nprint(\"Shape of the data:\", df.shape)\ndf.head()","0efed441":"# Obtain data information\ndf.info()","2f9b3e78":"# Check the \"Bare Nuclei\" values\ndf['Bare Nuclei'].value_counts()","1e21c7a4":"# Convert \"?\" to the mode(=1)\ndf['Bare Nuclei'] = df['Bare Nuclei'].str.replace('?', '1')\ndf['Bare Nuclei'].value_counts()","d463d80c":"# Convert the data type to int\ndf['Bare Nuclei'] = df['Bare Nuclei'].astype(int)\ndf.info()","62806ab0":"# Count the class value\ndf['class'].value_counts()","1c7a5d42":"# Check the relation between features and class\nplt.figure()\nsns.pairplot(df.drop(\"code number\", axis=1), hue = \"class\", height=2, palette={2:'red',4:'blue'}, markers=[\"o\", \"D\"])\nplt.show()","3d4c6fab":"# Do the same by boxplots\nplt.figure()\ndf.drop(\"code number\", axis=1).boxplot(by=\"class\", figsize=(15, 10))\nplt.show()","e71cfd36":"# Split data into X and y\nX = df.drop(['code number','class'], axis=1)\ny = df['class']","193619e8":"# Check the correlation between features\ncorr = X.corr()\nplt.figure(figsize=(8,6))\nsns.heatmap(corr,\n            xticklabels=corr.columns,\n            yticklabels=corr.columns,annot=True)","d8f34e47":"# Train test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)","d4918179":"# Normalization\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","c7a53733":"# Create a model dictionary\nmodels = {\"Logistic Regression\": LogisticRegression(),\n          \"K-Nearest Neighbors\": KNeighborsClassifier(),\n          \"Support Vector Machine\": SVC(probability=True),\n          \"Decision Tree\": DecisionTreeClassifier(),\n          \"Random Forest\": RandomForestClassifier(),\n          \"Ada Boost\": AdaBoostClassifier(),\n          \"XGBoost\": XGBClassifier(),\n          \"LightGBM\": LGBMClassifier(),\n          \"CatBoost\": CatBoostClassifier(verbose=0),\n          \"Neural Network\": MLPClassifier()\n         }","8f45a914":"# Fit the models\nfor name, model in models.items():\n    model.fit(X_train, y_train)","cd576560":"# Accuracy\nprint(\"Accuracy\")\nfor name, model in models.items():\n    print(name + \": {:.3f}\".format(accuracy_score(y_test, model.predict(X_test))))","4c2c2301":"# Precision\nprint(\"Precision\")\nfor name, model in models.items():\n    print(name + \": {:.3f}\".format(precision_score(y_test, model.predict(X_test), pos_label=2)))","162597b0":"# Recall\nprint(\"Recall\")\nfor name, model in models.items():\n    print(name + \": {:.3f}\".format(recall_score(y_test, model.predict(X_test), pos_label=2)))","74836a58":"# F1-score\nprint(\"F1-Score\")\nfor name, model in models.items():\n    print(name + \": {:.3f}\".format(2*\n                                   ((recall_score(y_test, model.predict(X_test), pos_label=2))\n                                   *\n                                   (precision_score(y_test, model.predict(X_test), pos_label=2)))\n                                   \/\n                                   ((precision_score(y_test, model.predict(X_test), pos_label=2))\n                                    +(recall_score(y_test, model.predict(X_test), pos_label=2))\n                                    )))","70512b93":"# AUC Score\nprint(\"AUC Score\")\nfor name, model in models.items():\n    print(name + \": {:.3f}\".format(roc_auc_score(y_test,model.predict_proba(X_test)[:,1])))","30a7eea7":"The following models:\n- Logistic Regression\n- KNN\n- SVM\n- Decision Tree\n- Random Forest\n- AdaBoost\n- XGBoost\n- LightGBM\n- CatBoost\n- Neural Network","0f6f57ee":"# Binary Classification with Machine Learning Models","8ce83ee5":"- There are no missing values. So we don't need to do imputation\n- The column \"class\" should be the label.\n- The column \"code numer\" should be dropped.\n- We need to convert \"Bare Nuclei\" into numeric.","36830da1":"All models perform well, but for AUC, KNN is the best."}}