{"cell_type":{"10d34c67":"code","e3ad4150":"code","edb5768d":"code","8ddf9714":"code","5fadc680":"code","65a11f50":"code","872be448":"code","50cd9ee6":"code","f20c94d7":"code","40f4dc8f":"code","46ba596c":"code","f0408bcf":"code","cec0c360":"code","49a21769":"code","f4a17893":"code","52db9deb":"code","2d926919":"code","92d0f8af":"code","502a44ae":"code","1aa10125":"code","c6e59086":"code","47ab9896":"code","e918f410":"code","f52118cf":"code","acb6c0de":"code","bd135445":"code","394c8d33":"code","15b0ce0a":"code","cf7be3ef":"code","c7cdfa6e":"code","df45165b":"code","babd8cb6":"code","b55d5926":"code","95f302c7":"code","5fa161da":"code","86b60c63":"code","85dcbeb8":"code","9564df7f":"code","f1c4f8ff":"code","b6a063ff":"code","16be466b":"code","f97f87ad":"code","e0c873ad":"code","d73faddb":"code","af6cb4c3":"code","6128471b":"code","92b2254b":"code","756767e0":"code","44409f2f":"code","4b1bc030":"code","e8f683ae":"code","86b16f4e":"code","18db13e2":"code","5603b6fc":"code","5492d6e4":"code","435662d7":"code","13dc529a":"code","b64a79c3":"code","45e67904":"code","e1620e0e":"code","1f4028f8":"code","6cbbe0f9":"code","1cd79e20":"code","3057c9db":"markdown","ab377e63":"markdown","9defd08b":"markdown","15afbb8d":"markdown","c44aba09":"markdown","855c3387":"markdown","a261b02b":"markdown","be569f41":"markdown","4b6d9164":"markdown","2475abb3":"markdown","ad7bbf22":"markdown","4f4fe41c":"markdown","d45b476d":"markdown","f3092d51":"markdown","4b5faeac":"markdown","c24145a9":"markdown","9a8dfdaf":"markdown"},"source":{"10d34c67":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport missingno as msno\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom tpot import TPOTClassifier","e3ad4150":"# Read the data\ndf = pd.read_csv('..\/input\/diabetes-data-set\/diabetes.csv')","edb5768d":"# Load the data\ndf.head()","8ddf9714":"# number of rows and columns of the data\ndf.shape # 768 rows and 9 columns","5fadc680":"df.tail()","65a11f50":"df.info()","872be448":"df.describe()","50cd9ee6":"df.isnull().sum()","f20c94d7":"df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0, np.NaN)","40f4dc8f":"df.isnull().sum()","46ba596c":"# using missingno library to visualize the data with neglecting the missing values\nmsno.bar(df);","f0408bcf":"df[df.Glucose.notnull()]","cec0c360":"df[['Glucose', 'Outcome']].groupby(['Outcome'])[['Glucose']].median().reset_index()","49a21769":"# The missing values will be filled with the median values of each variable.\ndef median_target(var):   \n    temp = df[df[var].notnull()] # Assign the not NAN values of specific column to the variable temp\n    temp = temp[[var, 'Outcome']].groupby(['Outcome'])[[var]].median().reset_index() # groupby outcome and calculate the median for each outcome\n    return temp","f4a17893":"median_target('Glucose')","52db9deb":"median_target('BMI')","2d926919":"median_target('Insulin')","92d0f8af":"# The values to be given for incomplete observations are given the median value of people who are not sick and the median values of people who are sick.\ncolumns = df.columns\ncolumns = columns.drop(\"Outcome\")\nfor col in columns:\n    \n    df.loc[(df['Outcome'] == 0 ) & (df[col].isnull()), col] = median_target(col)[col][0]\n    df.loc[(df['Outcome'] == 1 ) & (df[col].isnull()), col] = median_target(col)[col][1]","502a44ae":"df.isnull().sum()","1aa10125":"# example for more understanding the rule\nQ1 = df[\"Glucose\"].quantile(0.25)\nQ3 = df[\"Glucose\"].quantile(0.75)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\n\nprint(f\"Q1 = {Q1}\\nQ3 = {Q3}\\nIQR = {IQR}\\nlower = {lower}\\nupper = {upper}\")\nprint(f\"\\n\\nConclusion: Any value not in this range (lower and upper) = {lower, upper} can be removed as an outlier\")","c6e59086":"#looping on all the features to see which feature has an outliers\n#but with this rule we will take Q1 = 5% and Q3 = 95%\nfor feature in df:\n    Q1 = df[feature].quantile(0.05)\n    Q3 = df[feature].quantile(0.95)\n    IQR = Q3 - Q1\n    lower = Q1 - 1.5*IQR\n    upper = Q3 + 1.5*IQR\n    \n    if df[(df[feature] > upper)].any(axis=None) and df[(df[feature] < lower)].any(axis=None):\n        print(feature,\"yes\")\n    else:\n        print(feature, \"no\")","47ab9896":"df2 = df.copy()\ndf2.Outcome = df2.Outcome.apply(lambda x:'Healthy' if x == 0 else 'Sick')\ndf2.head()","e918f410":"df2.nunique()","f52118cf":"df2.Outcome.value_counts()","acb6c0de":"plt.figure(figsize=(18,12))\n\nplt.subplot(2,2,1)\nsns.countplot(x='Outcome', data=df)\n\nplt.subplot(2,2,2)\nno_dib = df[df.Outcome == 0].count()[0]\ndib = df[df.Outcome == 1].count()[0]\nplt.title('Distrbution of the Diabetes in the data', {'fontsize' : 20})\nplt.pie([no_dib, dib], labels=['No Diabetes', 'Diabetes'], autopct=\"%.2f%%\", explode=[0.01,0.01], colors=['cyan', 'orange'])\nplt.show()","bd135445":"df2.Pregnancies.value_counts()","394c8d33":"plt.figure(figsize=(22,12))\norder = df2.groupby('Pregnancies').count().sort_values(by='Outcome', ascending=False).index\nplt.subplot(2,2,1)\nsns.countplot(x='Pregnancies', data=df2, order=order);\n\nplt.subplot(2,2,3)\ndf[\"Age\"].hist(edgecolor = \"black\");","15b0ce0a":"plt.figure(figsize=(16,12))\n\nplt.subplot(2,2,1)\nsns.violinplot(x='Outcome', y='BMI', data=df2, palette='ocean')\n\nplt.subplot(2,2,2)\nsns.violinplot(x='Outcome', y='Insulin', data=df2, palette='summer')\n\nplt.subplot(2,2,3)\nsns.violinplot(x='Outcome', y='BloodPressure', data=df2, palette='autumn')\n\nplt.subplot(2,2,4)\nsns.violinplot(x='Outcome', y='Glucose', data=df2, palette='spring');","cf7be3ef":"plt.figure(figsize=(16,12))\n\nplt.subplot(2,2,1)\nsns.barplot(x='Outcome', y='Age', data=df2)\n\nplt.subplot(2,2,2)\nsns.barplot(x='Outcome', y='Pregnancies', data=df2)","c7cdfa6e":"# According to BMI, some ranges were determined and categorical variables were assigned.\n\nNewBMI = pd.Series([\"Underweight\", \"Normal\", \"Overweight\", \"Obesity 1\", \"Obesity 2\", \"Obesity 3\"], dtype = \"category\")\n\ndf2[\"NewBMI\"] = NewBMI\n\ndf2.loc[df[\"BMI\"] < 18.5, \"NewBMI\"] = NewBMI[0]\n\ndf2.loc[(df[\"BMI\"] > 18.5) & (df[\"BMI\"] <= 24.9), \"NewBMI\"] = NewBMI[1]\ndf2.loc[(df[\"BMI\"] > 24.9) & (df[\"BMI\"] <= 29.9), \"NewBMI\"] = NewBMI[2]\ndf2.loc[(df[\"BMI\"] > 29.9) & (df[\"BMI\"] <= 34.9), \"NewBMI\"] = NewBMI[3]\ndf2.loc[(df[\"BMI\"] > 34.9) & (df[\"BMI\"] <= 39.9), \"NewBMI\"] = NewBMI[4]\ndf2.loc[df[\"BMI\"] > 39.9 ,\"NewBMI\"] = NewBMI[5]\n\ndf2.head()","df45165b":"df2.NewBMI.value_counts()","babd8cb6":"plt.figure(figsize=(25,25))\n\nplt.subplot(2,2,1)\norder = df2.groupby('NewBMI').count().sort_values(by='Outcome', ascending=False).index\nsns.countplot(x='NewBMI', data=df2, order=order)\n\nplt.subplot(2,2,2)\nUnder_wei = df2.NewBMI[df2.NewBMI == 'Underweight'].count()\nnormal = df2.NewBMI[df2.NewBMI == 'Normal'].count()\nover_weight = df2.NewBMI[df2.NewBMI == 'Overweight'].count()\nobesity_1 = df2.NewBMI[df2.NewBMI == 'Obesity 1'].count()\nobesity_2 = df2.NewBMI[df2.NewBMI == 'Obesity 2'].count()\nobesity_3 = df2.NewBMI[df2.NewBMI == 'Obesity 3'].count()\nweights = [Under_wei, normal, over_weight, obesity_1, obesity_2, obesity_3]\nlabels = ['Under Weight', 'Normal', 'Over Weight', 'Obesity 1', 'Obesity 2', 'Obesity 3']\nplt.pie(weights, labels=labels, autopct=\"%.2f%%\", shadow=True);\nmy_circle = plt.Circle( (0,0), 0.4, color='white')\nplt.gcf().gca().add_artist(my_circle)\nplt.legend()\nplt.show()","b55d5926":"plt.figure(figsize=(20,10))\nsns.countplot(x='NewBMI', hue='Outcome', data=df2)","95f302c7":"def set_insulin(row):\n    if row[\"Insulin\"] >= 16 and row[\"Insulin\"] <= 166:\n        return \"Normal\"\n    else:\n        return \"Abnormal\"   ","5fa161da":"df2[\"NewInsulinScore\"] = df2.apply(set_insulin, axis=1)","86b60c63":"df2.head()","85dcbeb8":"df2.NewInsulinScore.value_counts()","9564df7f":"plt.figure(figsize=(15,15))\n\nplt.subplot(2,2,1)\nsns.countplot(x='NewInsulinScore', data=df2);\n\nplt.subplot(2,2,2)\nnormal = df2.NewInsulinScore[df2.NewInsulinScore == 'Normal'].count()\nabnormal = df2.NewInsulinScore[df2.NewInsulinScore == 'Abnormal'].count()\nplt.pie([normal, abnormal], labels=['Normal', 'Abnormal'], autopct='%.2f%%', explode = [0.01,0.01], shadow=True)\nplt.legend()\nplt.show()","f1c4f8ff":"plt.figure(figsize=(8,6))\nsns.countplot(x='NewInsulinScore', hue='Outcome', data=df2);","b6a063ff":"# Some intervals were determined according to the glucose variable and these were assigned categorical variables.\nNewGlucose = pd.Series([\"Low\", \"Normal\", \"Overweight\", \"Secret\", \"High\"], dtype = \"category\")\ndf2[\"NewGlucose\"] = NewGlucose\ndf2.loc[df2[\"Glucose\"] <= 70, \"NewGlucose\"] = NewGlucose[0]\ndf2.loc[(df2[\"Glucose\"] > 70) & (df2[\"Glucose\"] <= 99), \"NewGlucose\"] = NewGlucose[1]\ndf2.loc[(df2[\"Glucose\"] > 99) & (df2[\"Glucose\"] <= 126), \"NewGlucose\"] = NewGlucose[2]\ndf2.loc[df2[\"Glucose\"] > 126 ,\"NewGlucose\"] = NewGlucose[3]","16be466b":"df2.NewGlucose.value_counts()","f97f87ad":"plt.figure(figsize=(20,20))\n\nplt.subplot(2,2,1)\nsns.countplot(x='NewGlucose', data=df2);\n\nplt.subplot(2,2,2)\nlow = df2.NewGlucose[df2.NewGlucose == 'Low'].count()\nnormal = df2.NewGlucose[df2.NewGlucose == 'Normal'].count()\nover_wei = df2.NewGlucose[df2.NewGlucose == 'Overweight'].count()\nsecret = df2.NewGlucose[df2.NewGlucose == 'Secret'].count()\nweight = [low, normal, over_wei, secret]\nlabels = ['Low', 'Normal', 'OverWeight', 'Secret']\nplt.pie(weight, labels=labels, autopct=\"%.2f%%\", shadow=True, explode=[0.01,0.01,0.01,0.01]);\nmy_circle = plt.Circle( (0,0), 0.4, color='white')\nplt.gcf().gca().add_artist(my_circle)\nplt.legend()\nplt.show()","e0c873ad":"plt.figure(figsize=(10,5))\nsns.countplot(x='NewGlucose', hue='Outcome', data=df2);","d73faddb":"plt.figure(figsize=(16,8))\nplt.subplot(2,2,1)\nsns.boxplot(x='Insulin', data=df)\n\nplt.subplot(2,2,2)\nsns.boxplot(x='Glucose', data=df)\n\nplt.subplot(2,2,3)\nsns.boxplot(x='BloodPressure', data=df)\n\nplt.subplot(2,2,4)\nsns.boxplot(x='BMI', data=df);","af6cb4c3":"df2 = pd.get_dummies(df2, columns =[\"NewBMI\",\"NewInsulinScore\", \"NewGlucose\"], drop_first = True)","6128471b":"df2.head()","92b2254b":"categorical_df = df2[['NewBMI_Obesity 1','NewBMI_Obesity 2', 'NewBMI_Obesity 3', 'NewBMI_Overweight','NewBMI_Underweight',\n                     'NewInsulinScore_Normal','NewGlucose_Low','NewGlucose_Normal', 'NewGlucose_Overweight', 'NewGlucose_Secret']]","756767e0":"X = df2.drop([\"Outcome\",'NewBMI_Obesity 1','NewBMI_Obesity 2', 'NewBMI_Obesity 3', 'NewBMI_Overweight','NewBMI_Underweight',\n                     'NewInsulinScore_Normal','NewGlucose_Low','NewGlucose_Normal', 'NewGlucose_Overweight', 'NewGlucose_Secret'], axis = 1)\ny = df2.Outcome\ncols = X.columns\nindex = X.index","44409f2f":"X.head()","4b1bc030":"transformer = RobustScaler().fit(X)\nX = transformer.transform(X)\nX = pd.DataFrame(X, columns = cols, index = index)","e8f683ae":"X.head()","86b16f4e":"X = pd.concat([X, categorical_df], axis = 1)","18db13e2":"X.head()","5603b6fc":"df2 = df2.Outcome.apply(lambda x: 0 if x == 'Healthy' else 1)","5492d6e4":"y = df2","435662d7":"y.head()","13dc529a":"X_train, X_test, y_train, y_test = train_test_split(X,y , test_size=0.25)","b64a79c3":"model = TPOTClassifier(generations=5, population_size=200, verbosity=2, cv = 10)\nmodel.fit(X_train, y_train)","45e67904":"model.score(X_test, y_test)","e1620e0e":"y_pred = model.predict(X_test)","1f4028f8":"cm = confusion_matrix(y_test, y_pred)\ncm","6cbbe0f9":"print(classification_report(y_test, y_pred))","1cd79e20":"plt.figure(figsize=(8,5))\nsns.heatmap(cm, annot=True, fmt='d')","3057c9db":"It seems that when these features are increasingly increasingly an opportunity for diabetes","ab377e63":"a brief description: <br>\nIQR score The rule of thumb is that anything not in the range of\u00a0(Q1 - 1.5\u00a0IQR) and (Q3 + 1.5\u00a0IQR)\u00a0is an outlier, and can be removed.","9defd08b":"convert those 0's values in these 5 columns to determine how many missing values in each feature in our data","15afbb8d":"**detect outliers with IQR score rule**\n","c44aba09":"**Data PreProcessing**","855c3387":"**Scalling the features**","a261b02b":"Obesity 1 has the majority in the data which the BMI between 29.9 and 34.9","be569f41":"data is numric","4b6d9164":"So we have no outliers to remove","2475abb3":"**One hot Encoder**","ad7bbf22":"all the Underweights is healthy (BMI less than 18.5)<br>\nNormal Weights are healthy except limited number which are sick<br>\nit seems that when the weight increase so you are more likely to have diabetes","4f4fe41c":"We have 65% healthy pepole and 35% Sick pepole in the data","d45b476d":"**Exploring the data**","f3092d51":"When the Glucose is Secret then you are more likely to have diabetes","4b5faeac":"Q1 is = 25% percintile value of the data<br>\nQ3 is = 75% Percintile value of the data<br>\nIQR = Q3 - Q1","c24145a9":"**Assign Feature and Target Variables**","9a8dfdaf":"- the min value in  5 columns = 0 (Glucose, BloodPressure, Skin Thickness, Insulin, BMI) which will be considered as null values<br>\n- In skin Thickness and Insulin Column less than or equal 25% of the data are null values\n- look at the maximum Insulin Value = 846 wich is too high u will never find a person with this insulin value (outlier)<br>\nall this an errors in data collection"}}