{"cell_type":{"0194db12":"code","a58c6f5d":"code","7c4101b7":"code","b343b01d":"code","6be69ae6":"code","865dd9f6":"code","554dceb4":"code","6101e0f6":"code","8589dba8":"code","4a18300c":"code","6957a4e6":"code","81aecd34":"code","03990c40":"code","4a779a23":"code","802ddfbe":"code","0ce45b0c":"code","5556ac20":"code","5c31a209":"code","29a52eb8":"code","bf7b88d1":"code","f7680e8c":"code","2a805b60":"code","44f66eae":"code","e06c5a3a":"code","89ad0864":"code","a5d7ddda":"code","4abc2788":"markdown","6436272d":"markdown","33ccdbb7":"markdown","4a2ca771":"markdown","9a113ee2":"markdown","174afbcc":"markdown","323b9fd1":"markdown","bd630a11":"markdown"},"source":{"0194db12":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n#Ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a58c6f5d":"df = pd.read_csv('..\/input\/indian-gallantry-awards\/ashokachakra.csv', encoding='utf8')\npd.set_option('display.max_columns', None)\ndf.head()","7c4101b7":"df1 = pd.read_csv('..\/input\/indian-gallantry-awards\/pvc.csv', encoding='utf8')\npd.set_option('display.max_columns', None)\ndf1.head()","b343b01d":"df2 = pd.read_csv('..\/input\/indian-gallantry-awards\/kc.csv', encoding='utf8')\npd.set_option('display.max_columns', None)\ndf2.head()","6be69ae6":"df2 = pd.read_csv('..\/input\/indian-gallantry-awards\/mahavirchakra.csv', encoding='utf8')\npd.set_option('display.max_columns', None)\ndf2.head()","865dd9f6":"df.isnull().sum()","554dceb4":"df[\"Service\"].value_counts()","6101e0f6":"# Could be any column: No, only numeric data.\ndf['Year'].plot()\nplt.title('Ashokachakra Years', fontsize=20);","8589dba8":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/parts-of-speech\nplt.figure(figsize=(10,5))\nsns.countplot(y=\"Rank\",data=df,\n             facecolor=(0,0,0,0),linewidth=5,\n             edgecolor=sns.color_palette(\"cividis\"))\nplt.title('Ashokachakra Ranks',\n         fontsize=15);","4a18300c":"##Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\nfrom wordcloud import WordCloud\nfrom wordcloud import STOPWORDS\nstopwords = set(STOPWORDS)\nwordcloud = WordCloud(background_color = 'red',\n                      height =2000,\n                      width = 2000\n                     ).generate(str(df[\"Name\"]))\nplt.rcParams['figure.figsize'] = (12,12)\nplt.axis(\"off\")\nplt.imshow(wordcloud)\nplt.title(\"Ashokachakra Names\")\nplt.show()","6957a4e6":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/parts-of-speech\nplt.figure(figsize=(10,5))\nsns.countplot(y=\"Service\",data=df,\n             facecolor=(0,0,0,0),linewidth=5,\n             edgecolor=sns.color_palette(\"copper\"))\nplt.title('Ashokachakra Services',\n         fontsize=15);","81aecd34":"#Code by Baekhakjeon https:\/\/www.kaggle.com\/baekhakjeon\/explorer-tabular-playground-series-apr-2021\n\nplt.figure(figsize = (10, 5), dpi = 100)\nax = sns.countplot(x='Year', hue='Posthumously', palette= 'Purples', data=df)\n\n# Display values on the plot\nfor p in ax.patches:\n    ax.annotate(text=p.get_height(), xy=(p.get_x()+0.2, p.get_height()+1000), horizontalalignment='center', verticalalignment='top', color='black', size=10)\n\nplt.title(\"Posthumously by Year \", fontsize=20)    \nplt.xlabel('Year', fontsize=15)\nplt.ylabel('Counts', fontsize=15)\n#plt.legend(['Not Extinct', 'Extinct'], fontsize=15)\nplt.xticks(rotation=45)\nplt.show()","03990c40":"# Lets first handle numerical features with nan value\nnumerical_nan = [feature for feature in df.columns if df[feature].isna().sum()>1 and df[feature].dtypes!='O']\nnumerical_nan","4a779a23":"## Replacing the numerical Missing Values\n\nfor feature in numerical_nan:\n    ## We will replace by using median since there are outliers\n    median_value=df[feature].median()\n    \n    df[feature].fillna(median_value,inplace=True)\n    \ndf[numerical_nan].isnull().sum()","802ddfbe":"from sklearn.preprocessing import LabelEncoder\n\n#fill in mean for floats\nfor c in df.columns:\n    if df[c].dtype=='float16' or  df[c].dtype=='float32' or  df[c].dtype=='float64':\n        df[c].fillna(df[c].mean())\n\n#fill in -999 for categoricals\ndf = df.fillna(-999)\n# Label Encoding\nfor f in df.columns:\n    if df[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[f].values))\n        df[f] = lbl.transform(list(df[f].values))\n        \nprint('Labelling done.')","0ce45b0c":"# Prepare the data\nX = df.drop('Posthumously', axis=1)\ny = df['Posthumously'].copy()\n\nX.head()","5556ac20":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=42)\nX_train.shape, X_test.shape","5c31a209":"from sklearn.tree import DecisionTreeClassifier\n\ndt = DecisionTreeClassifier(max_depth=3)\ndt.fit(X_train, y_train)","29a52eb8":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\n# pip users\n!pip install pydotplus\n!pip install six\n\nfrom IPython.display import Image\nfrom six import StringIO\nfrom sklearn.tree import export_graphviz\nimport pydotplus, graphviz\n\ndot_data = StringIO()\n\nexport_graphviz(dt, out_file=dot_data, filled=True, rounded=True, feature_names=X.columns, \n                )\n\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())\nImage(graph.create_png())","bf7b88d1":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\ny_train_pred = dt.predict(X_train)\ny_test_pred = dt.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\nprint(\"Train set performance\")\nprint(accuracy_score(y_train, y_train_pred))\nconfusion_matrix(y_train, y_train_pred)","f7680e8c":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\nprint(\"Test set performance\")\nprint(accuracy_score(y_test, y_test_pred))\nconfusion_matrix(y_test, y_test_pred)","2a805b60":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\ndef get_dt_graph(dt_classifier):\n    dot_data = StringIO()\n\n    export_graphviz(dt_classifier, out_file=dot_data, filled=True, rounded=True, feature_names=X.columns, \n                )\n    \n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())\n    \n    return graph","44f66eae":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\ndef evaluate_model(dt_classifier):\n    y_train_pred = dt_classifier.predict(X_train)\n    y_test_pred = dt_classifier.predict(X_test)\n    \n    print(\"Train set performance\")\n    print(accuracy_score(y_train, y_train_pred))\n    print(confusion_matrix(y_train, y_train_pred))\n    print(\"-\"*50)\n    print(\"Test set performance\")\n    print(accuracy_score(y_test, y_test_pred))\n    print(confusion_matrix(y_test, y_test_pred))","e06c5a3a":"evaluate_model(dt)","89ad0864":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\ngph = get_dt_graph(dt)\nImage(gph.create_png())","a5d7ddda":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\ndt_default = DecisionTreeClassifier(random_state=42)\ndt_default.fit(X_train, y_train)","4abc2788":"#Building the decision tree","6436272d":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcQ6LWZDYzOpLeRSniXL6GTQBPPQW5iPpZ60vA&usqp=CAU)youtube.com","33ccdbb7":"<center style=\"font-family:verdana;\"><h1 style=\"font-size:200%; padding: 10px; background: #006400;\"><b style=\"color:#FF4500;\">Ashoka Chakra<\/b><\/h1><\/center>\n\n\"The Ashoka Chakra is a depiction of the Dharmachakra; a wheel represented with 24 spokes in Buddhism. It is called so because it appears on a number of edicts of Ashoka, most prominent among which is the Lion Capital of Ashoka. The most visible use of the Ashoka Chakra today is at the centre of the Flag of India (adopted on 22 July 1947), where it is rendered in a navy blue colour on a white background, replacing the symbol of charkha (spinning wheel) of the pre-independence versions of the flag.\"\n\nhttps:\/\/en.wikipedia.org\/wiki\/Ashoka_Chakra","4a2ca771":"#Acknowledgement\n\nSiddharth Kashyap https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n","9a113ee2":"#Helper functions to evaluate the model performance and create the graph for DT","174afbcc":"#Decision tree without any hyper-parameter setting","323b9fd1":"#Evaluating the model performance on the test set","bd630a11":"#Model Building"}}