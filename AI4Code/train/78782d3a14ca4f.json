{"cell_type":{"04014c4b":"code","cbb26e59":"code","246e3a4c":"code","fbeb8276":"code","4852d28f":"code","f352f899":"code","e76df209":"code","4f602198":"code","6eb2061c":"code","7bdaa6b3":"code","f5d00bb5":"code","ba2158fd":"code","0ac26885":"code","c3e07bca":"code","0dc65cc5":"code","b4985773":"code","4419b2d8":"code","60288802":"code","9361ecb8":"code","7ace2ebc":"code","ba579d93":"code","9b65de9d":"code","5556fdfa":"markdown","e5473fa7":"markdown","36ac6819":"markdown","5a743c58":"markdown","7129e867":"markdown"},"source":{"04014c4b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cbb26e59":"medical_insurance_dataset = pd.read_csv('\/kaggle\/input\/insurance\/insurance.csv')\nmedical_insurance_dataset.head()","246e3a4c":"medical_insurance_dataset.describe()","fbeb8276":"medical_insurance_dataset.isnull().sum()","4852d28f":"sns.heatmap(medical_insurance_dataset.corr(), annot=True)","f352f899":"X_insurance = medical_insurance_dataset.iloc[:,0:6].values\nX_insurance","e76df209":"y_insurance = medical_insurance_dataset.iloc[:,6].values\ny_insurance","4f602198":"from sklearn.preprocessing import LabelEncoder","6eb2061c":"label_encoder_sex = LabelEncoder()\nlabel_encoder_smoker = LabelEncoder()\nlabel_encoder_region = LabelEncoder()","7bdaa6b3":"X_insurance[:,1] = label_encoder_sex.fit_transform(X_insurance[:,1])\nX_insurance[:,4] = label_encoder_smoker.fit_transform(X_insurance[:,4])\nX_insurance[:,5] = label_encoder_region.fit_transform(X_insurance[:,5])\n\nX_insurance","f5d00bb5":"from sklearn.model_selection import train_test_split","ba2158fd":"X_insurance_train, X_insurance_test, y_insurance_train, y_insurance_test = train_test_split(X_insurance, y_insurance, test_size = 0.25, random_state = 0)","0ac26885":"X_insurance_train.shape,  y_insurance_train.shape","c3e07bca":"X_insurance_test.shape,  y_insurance_test.shape","0dc65cc5":"from sklearn.ensemble import RandomForestRegressor","b4985773":"insurance_rd_regressor = RandomForestRegressor(n_estimators=100)","4419b2d8":"insurance_rd_regressor.fit(X_insurance_train,y_insurance_train)","60288802":"insurance_rd_regressor.score(X_insurance_train,y_insurance_train)","9361ecb8":"insurance_rd_regressor.score(X_insurance_test,y_insurance_test)","7ace2ebc":"insurance_rd_regressor.score(X_insurance_test,y_insurance_test)","ba579d93":"predictions = insurance_rd_regressor.predict(X_insurance_test)","9b65de9d":"from sklearn.metrics import mean_absolute_error\nmean_absolute_error(y_insurance_test, predictions)","5556fdfa":"# Importing Dataset","e5473fa7":"# Random Forest Regressor","36ac6819":"# X and y","5a743c58":"# Encoding Labels","7129e867":"# Train and Test"}}