{"cell_type":{"e29af492":"code","8b24e8c0":"code","1f5605c1":"code","0f9aaaff":"code","e11cd577":"code","0ff2a8d3":"code","8aa4ae75":"code","c4153de9":"code","701debc5":"code","760a8802":"code","8b31c8e9":"code","ed2596dd":"code","6eaf4355":"code","9ab086de":"code","19696553":"code","297a649a":"code","831707ca":"code","413de216":"code","4ac78c37":"code","22000706":"code","d006bea2":"code","2dfb5445":"code","e6f087b1":"code","30132e76":"code","eac3c73a":"code","5a3ef79e":"code","7ed36990":"code","09f55fd8":"code","c53e5b61":"code","fed9c19e":"code","f36a8d8b":"code","3add7514":"code","4a22700c":"code","511a0c6a":"code","7815bb65":"code","a1469b59":"code","a86edc08":"code","52b1763d":"code","60dbcac0":"code","7c757f06":"code","d3704f74":"markdown","cd4863db":"markdown","3587382b":"markdown"},"source":{"e29af492":"#importing required modules \nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","8b24e8c0":"df=pd.read_csv(\"\/kaggle\/input\/supermarket-sales\/supermarket_sales - Sheet1.csv\")","1f5605c1":"df.head()#visualizing first five records ","0f9aaaff":"df.info()","e11cd577":"df.describe()","0ff2a8d3":"#changing column name \ndf.rename(columns={\"cogs\":\"Cost_of_goods_sold\"},inplace=True)","8aa4ae75":"#changing data type for some variables like date and time\ndf[\"Date\"]=pd.to_datetime(df.Date)\ndf[\"Time\"]=pd.to_datetime(df.Time)","c4153de9":"df.columns","701debc5":"#Drop variables which are unnecessary\ndf.drop([\"Invoice ID\"],axis=1,inplace=True)","760a8802":"#separating the categorical and numerical column names \ncategorical=[x for x in df.columns if df[x].dtype==\"O\"]\nprint(categorical)\nnumerical=[x for x in df.columns if x not in categorical]\nprint(numerical)","8b31c8e9":"for i in numerical:\n  if i == \"Date\" or i==\"Time\":\n    continue\n  plt.title(i)\n  sns.boxplot(x=df[i])\n  plt.show()","ed2596dd":"# calculating interquartile range and removing outliers \noutliers_array=[\"Cost_of_goods_sold\",\"Tax 5%\"]\nfor i in outliers_array:\n  q25, q75 = np.percentile(df[i], 25), np.percentile(df[i], 75)\n  iqr = q75 - q25\n  cut_off=iqr*1.5\n  lower, upper = q25 - cut_off, q75 + cut_off\n  df=df[(df[i]>=lower)&(df[i]<=upper)]","6eaf4355":"df.shape","9ab086de":"#visualizing the plots again\nfor i in numerical:\n  if i == \"Date\" or i==\"Time\":\n    continue\n  plt.title(i)\n  sns.boxplot(x=df[i])\n  plt.show()","19696553":"#lets plot the categorical values \nfor i in categorical:\n  plt.title(i)\n  sns.countplot(x=df[i])\n  plt.xticks(rotation=45)\n  plt.show()\n  ","297a649a":"#plotting numerical variables \nfor i in numerical:\n  if i == \"Date\" or i==\"Time\":\n    continue\n  plt.title(i)\n  df[i].plot(kind=\"hist\")\n  plt.show()","831707ca":"#Imputing missing values \ndf.isna().sum()","413de216":"#filling null values with some suitable values \n#either we can remove null values as we have very less no of values or we can fill them with the mean (in this case according to the graph of this variable)\ndf[\"Unit price\"].fillna(np.mean(df[\"Unit price\"]),inplace=True)","4ac78c37":"df.isna().sum()","22000706":"#lets check for duplicate values \ndf.duplicated().sum() #we found a duplicate record lets see it","d006bea2":"df[df.duplicated()==True] #visualizing the duplicated values ","2dfb5445":"# removing duplicates \ndf.drop_duplicates(inplace=True)","e6f087b1":"df.duplicated().sum()#cross checking ","30132e76":"df.shape","eac3c73a":"df.head()","5a3ef79e":"#lets find the total cost of items with tax\ndf[\"total\"]=df[\"Unit price\"]*df[\"Quantity\"]+df[\"Tax 5%\"]","7ed36990":"df.head()","09f55fd8":"#lets find the gross margin\ndf[\"gross_margin\"]=df.total-df['Cost_of_goods_sold']","c53e5b61":"df.groupby([\"Customer type\"])[\"gross_margin\"].agg(\"sum\") #getting approx same amount of profits from both customer types ","fed9c19e":"df.groupby([\"Gender\"])[\"gross_margin\"].agg(\"sum\") #getting approx same amount of profits from both male and female","f36a8d8b":"df.groupby([\"Gender\",\"Customer type\"],sort=True)[\"gross_margin\"].agg(\"sum\").unstack()","3add7514":"df.groupby([\"Gender\"])[\"Customer type\"].agg(\"value_counts\").unstack().plot(kind=\"bar\")#females are having more memberships than males ","4a22700c":"df.groupby([\"City\"])[\"gross_margin\"].agg(\"sum\").plot(kind=\"bar\") #naypyitaw is generating high profits compared to other cities ","511a0c6a":"df.groupby([\"City\",\"Customer type\",\"Gender\"])[\"gross_margin\"].agg(\"sum\").unstack()","7815bb65":"df.groupby([\"City\",\"Customer type\",\"Gender\"])[\"gross_margin\"].agg(\"sum\").unstack().plot(kind=\"bar\")","a1469b59":"\ndf.groupby([\"City\",\"Gender\",\"Product line\"])[\"gross_margin\"].agg(\"sum\").unstack().plot(kind=\"bar\",figsize=(15,10))\n","a86edc08":"#manual encoding \ndf['Gender'].replace({\"Male\":1,\"Female\":0},inplace=True)","52b1763d":"df.head() #first 5 records ","60dbcac0":"#high profits generating product lines respective to the type of customers \npd.pivot_table(df,columns=[\"City\",\"Gender\"],aggfunc=\"sum\",values=\"gross_margin\",index=[\"Product line\"]).idxmax().unstack()","7c757f06":"#minimum profits or less profits generating product lines with types of customers \npd.pivot_table(df,columns=[\"City\",\"Gender\"],aggfunc=\"sum\",values=\"gross_margin\",index=[\"Product line\"]).idxmin().unstack()","d3704f74":"Feature Engineering","cd4863db":"Each and every categorical variable is perfectely balanced\n","3587382b":"> Profits are high in naypyitaw city with females and in mandalay with males both having membership and vice versa in case of inversing genders having low profits \n> Profits have no much difference with the gender having no membership"}}