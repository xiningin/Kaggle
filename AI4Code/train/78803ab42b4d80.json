{"cell_type":{"2e36cb04":"code","4da8a26d":"code","cf807160":"code","eb790f99":"code","163d3a77":"code","d7455eb5":"code","5e50f445":"code","301bf1da":"code","e3639c1a":"code","dd3a082f":"code","d67f10f8":"code","4a7d96c7":"code","0ab2754a":"code","258eec92":"code","4470f646":"code","78a914d5":"code","d2ad8f74":"code","92798496":"code","48eefb02":"code","7bd3dc8c":"code","f3caf6a8":"code","2c84385d":"code","f64459ad":"code","64c0fbb3":"code","604dc20d":"code","b5562d0b":"code","c7b5cc84":"code","87cffcd5":"code","4a99bf69":"code","5513b85d":"code","fd9f6446":"code","da9d5121":"code","c2da8cdb":"code","62a4f4a4":"code","045b7ddc":"code","bac820ce":"markdown","75677433":"markdown","5f73fa45":"markdown","622e3c71":"markdown","a8beaed7":"markdown","9850ef31":"markdown","a11ae2e7":"markdown","f07fe7e2":"markdown","765f0ef3":"markdown","1fa944fc":"markdown","a8990edb":"markdown","f31140e9":"markdown","deff6399":"markdown","f00e184e":"markdown","70076c98":"markdown","6361b2f9":"markdown","c3ffc6a9":"markdown","9d19e9cc":"markdown","f14e740f":"markdown","0e00524b":"markdown","81fb90da":"markdown","a6c4e67a":"markdown","903ed631":"markdown","3db05a49":"markdown","be348671":"markdown","974a089f":"markdown","433ab985":"markdown","c62c3ed3":"markdown","1ea40337":"markdown","200347e6":"markdown","c0428d6a":"markdown","d587df43":"markdown","4b93b688":"markdown","dbc46846":"markdown","7b57f9b4":"markdown","50dba2a1":"markdown","6c3b0add":"markdown","072d722e":"markdown","a11a16d9":"markdown","2b033c1f":"markdown","c1f1e937":"markdown","a347cc91":"markdown","c62eb8b7":"markdown","194fc452":"markdown","e4078acf":"markdown","bf09172c":"markdown","d37ccfe4":"markdown","c255750e":"markdown","d4cd58a8":"markdown","32bc0056":"markdown","2cf92b6b":"markdown","c8742653":"markdown","f9f9f38e":"markdown","54e9c26a":"markdown"},"source":{"2e36cb04":"import os\nimport re\nimport random\nimport warnings\nimport operator\nimport itertools\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport lightgbm as lgb\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\n\nfrom plotly import tools\nfrom collections import Counter\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom plotly.offline import init_notebook_mode, iplot\n\nsns.set_style('darkgrid')\nwarnings.filterwarnings(\"ignore\")\n\nseed = 2019\nrandom.seed(seed)\nos.environ['PYTHONHASHSEED'] = str(seed)\nnp.random.seed(seed)\n\nquestions_only = pd.read_csv('\/kaggle\/input\/kaggle-survey-2019\/questions_only.csv')\nmultiple_choice_responses = pd.read_csv('\/kaggle\/input\/kaggle-survey-2019\/multiple_choice_responses.csv', low_memory=False)\nheader = multiple_choice_responses.iloc[0]\nmultiple_choice_responses.drop(0, inplace=True)","4da8a26d":"kept_questions = [f'Q{i}' for i in range(1, 9)] + ['Q11','Q15', 'Q23']\n\nwith pd.option_context('display.max_colwidth', 10000):\n    display(questions_only[kept_questions].T)","cf807160":"plt.figure(figsize=(10, 6))\nsplot = sns.countplot(~multiple_choice_responses['Q10'].isna())\nfor p in splot.patches:\n    splot.annotate(format(p.get_height() \/ len(multiple_choice_responses) * 100, '.1f') + '%', (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center', xytext=(0, 10), textcoords='offset points')\nplt.title(f\"Income is Provided\", size=15)\nplt.ylim((0, 13500))\nplt.xticks([0, 1], ['No', 'Yes'], fontsize=14)\nplt.show()\n\nmultiple_choice_responses = multiple_choice_responses[~multiple_choice_responses['Q10'].isna()]","eb790f99":"order = ['$0-999', '1,000-1,999', '2,000-2,999', '3,000-3,999', '4,000-4,999', '5,000-7,499', '7,500-9,999',\n         '10,000-14,999',  '15,000-19,999', '20,000-24,999', '25,000-29,999', '30,000-39,999', \n         '40,000-49,999', '50,000-59,999', '60,000-69,999', '70,000-79,999', '80,000-89,999', '90,000-99,999',\n        '100,000-124,999', '125,000-149,999', '150,000-199,999', '200,000-249,999', '250,000-299,999', '300,000-500,000']\n\nplt.figure(figsize=(15, 12))\nsplot = sns.countplot(y=multiple_choice_responses['Q10'].fillna('unknown'), order=order)\nfor p in splot.patches:\n    splot.annotate(format(p.get_width() \/ len(multiple_choice_responses) * 100, '.1f') + '%', (p.get_width() * 1.01, p.get_y() + p.get_height() \/ 2),\n                   ha='center', va='center', xytext=(15, 0), textcoords='offset points')\n    \nplt.title(questions_only['Q10'][0], size=15)\nplt.xlim(0, 1650)\nplt.yticks(fontsize=12)\nplt.show()","163d3a77":"multiple_choice_responses = multiple_choice_responses[multiple_choice_responses['Q10'] != '> $500,000']\n\nsalaries = [500]\nfor salary_str in order[1:-1]:\n    salary_str = re.sub(',', '', salary_str).split('-')\n    salaries.append(int(np.mean([int(salary_str[0]), int(salary_str[1])])) \/\/ 100 * 100)\nsalaries.append(500000)\n\nsalary_map = dict(zip(order, salaries))\n\nmultiple_choice_responses['salaries'] = multiple_choice_responses['Q10'].map(salary_map)\nmultiple_choice_responses['salaries_clipped'] = np.clip(multiple_choice_responses['salaries'].values, 0,  200000)","d7455eb5":"order = ['18-21', '22-24', '25-29', '30-34', '35-39', '40-44', '45-49','50-54', '55-59', '60-69', '70+']\n\nplt.figure(figsize=(15, 5))\nsplot = sns.countplot(multiple_choice_responses['Q1'], order=order)\nfor p in splot.patches:\n    splot.annotate(format(p.get_height() \/ len(multiple_choice_responses) * 100, '.1f') + '%', (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center', xytext=(0, 10), textcoords='offset points')\nplt.title(questions_only['Q1'][0], size=15)\nplt.ylim(0, 3400)\nplt.xticks(fontsize=12)\nplt.show()","5e50f445":"order = ['18-21', '22-24', '25-29', '30-34', '35-39', '40-44', '45-49','50-54', '55-59', '60-69', '70+']\n\nplt.figure(figsize=(15, 8))\nsns.boxplot(x=multiple_choice_responses['Q1'], y=multiple_choice_responses['salaries'], order=order)\nplt.title('Age & Salary', size=15)\nplt.xticks(fontsize=12)\nplt.show()","301bf1da":"multiple_choice_responses = multiple_choice_responses[~((multiple_choice_responses['salaries'] >= 150000) & (multiple_choice_responses['Q1'] == '18-21'))]\nmultiple_choice_responses = multiple_choice_responses[~((multiple_choice_responses['salaries'] >= 200000) & (multiple_choice_responses['Q1'] == '22-24'))]\nmultiple_choice_responses = multiple_choice_responses[~((multiple_choice_responses['salaries'] >= 300000) & (multiple_choice_responses['Q1'] == '25-29'))]\nmultiple_choice_responses = multiple_choice_responses[~((multiple_choice_responses['salaries'] >= 350000) & (multiple_choice_responses['Q1'] == '30-34'))]","e3639c1a":"order = ['< 1 years','1-2 years', '2-3 years', '3-4 years', '4-5 years', '5-10 years','10-15 years', '20+ years']\n\nplt.figure(figsize=(15, 12))\nplt.subplot(2, 1, 1)\nsplot = sns.countplot(y=multiple_choice_responses['Q23'], order=order)\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_width() \/ len(multiple_choice_responses) * 100, '.1f') + '%', (p.get_width() * 1.01, p.get_y() + p.get_height() \/ 2),\n                   ha='center', va='center', xytext=(15, 0), textcoords='offset points')\n    \nplt.title(questions_only['Q23'][0], size=15)\nplt.yticks(fontsize=12)\n\norder = ['I have never written code', '< 1 years', '1-2 years', '3-5 years', '5-10 years','10-20 years', '20+ years']\n\n\nplt.subplot(2, 1, 2)\nsplot = sns.countplot(y=multiple_choice_responses['Q15'], order=order)\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_width() \/ len(multiple_choice_responses) * 100, '.1f') + '%', (p.get_width() * 1.01, p.get_y() + p.get_height() \/ 2),\n                   ha='center', va='center', xytext=(15, 0), textcoords='offset points')\n    \nplt.yticks(fontsize=12)\nplt.title(questions_only['Q15'][0], size=15)\nplt.show()","dd3a082f":"order = ['< 1 years','1-2 years', '2-3 years', '3-4 years', '4-5 years', '5-10 years','10-15 years', '20+ years']\n\nplt.figure(figsize=(15, 15))\nplt.subplot(2, 1, 1)\nsns.boxplot(y=multiple_choice_responses['Q23'], x=multiple_choice_responses['salaries_clipped'], order=order)\nplt.yticks(fontsize=12)\nplt.title('ML Experience & Salary', size=15)\n\n\norder = ['I have never written code', '< 1 years', '1-2 years', '3-5 years', '5-10 years','10-20 years', '20+ years']\n\nplt.subplot(2, 1, 2)\nsns.boxplot(y=multiple_choice_responses['Q15'], x=multiple_choice_responses['salaries_clipped'], order=order)\nplt.title('Data Analysis Experience & Salary', size=15)\nplt.yticks(fontsize=12)\nplt.show()","d67f10f8":"plt.figure(figsize=(15, 5))\nsplot = sns.countplot(multiple_choice_responses['Q2'])\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_height() \/ len(multiple_choice_responses) * 100, '.1f') + '%', (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center', xytext=(0, 10), textcoords='offset points')\n    \nplt.title(questions_only['Q2'][0].split('-')[0], size=15)\nplt.ylim(0, 11500)\nplt.xticks(fontsize=12)\nplt.show()","4a7d96c7":"sns.catplot(y='Q2', x='salaries_clipped', kind=\"boxen\", data=multiple_choice_responses, height=5, aspect=15\/5)\nplt.title('Gender & Salary', size=15)\nplt.yticks(fontsize=12)\nplt.show()","0ab2754a":"mean_salaries = multiple_choice_responses[['salaries', 'Q2']].groupby('Q2').mean()\nmean_salaries.columns = mean_salaries.columns.get_level_values(0)\nmean_salaries = mean_salaries.rename(columns={'salaries' : 'Average Salary'})\nmean_salaries.head(2)","258eec92":"print(f\"The ratio of Female over Male salary is {40536\/49815 * 100 :.0f}%\")","4470f646":"country_count = multiple_choice_responses[['Q3', 'salaries']].groupby('Q3').count().reset_index()\ncountry_count['salaries_mean'] = multiple_choice_responses[['Q3', 'salaries']].groupby('Q3').mean()['salaries'].values \/\/ 1000 * 1000\n\n# Taken from https:\/\/www.kaggle.com\/artgor\/russia-usa-india-and-other-countries\/\ncountry_code = pd.read_csv('..\/input\/plotly-country-code-mapping\/2014_world_gdp_with_codes.csv')\n\ncountry_count.loc[country_count['Q3'] == 'United States of America', 'Q3'] = 'United States'\ncountry_count.loc[country_count['Q3'] == 'United Kingdom of Great Britain and Northern Ireland', 'Q3'] = 'United Kingdom'\ncountry_count.loc[country_count['Q3'] == 'South Korea', 'Q3'] = '\"Korea, South\"'\ncountry_count.loc[country_count['Q3'] == 'Viet Nam', 'Q3'] = 'Vietnam'\ncountry_count.loc[country_count['Q3'] == 'Iran, Islamic Republic of...', 'Q3'] = 'Iran'\ncountry_count.loc[country_count['Q3'] == 'Hong Kong (S.A.R.)', 'Q3'] = 'Hong Kong'\ncountry_count.loc[country_count['Q3'] == 'Republic of Korea', 'Q3'] = '\"Korea, North\"'\n\ncountry_count = pd.merge(country_count, country_code, left_on='Q3', right_on='COUNTRY')","78a914d5":"data = [dict(type='choropleth',\n             locations=country_count['CODE'],\n             z=country_count['salaries'],\n             text=country_count['Q3'],\n             colorscale='Viridis',\n             autocolorscale=False,\n             reversescale=True,\n             marker = dict(line=dict(color='rgb(180,180,180)', width=0.5)),\n             colorbar = dict(autotick=False, title='Responders'),)\n       ]\n\nlayout = dict(\n    title = 'Responders by Country',\n    geo = dict(showframe=False, showcoastlines=True, projection=dict(type='Mercator'))\n)\n\nfig = dict( data=data, layout=layout )\niplot( fig, validate=False, filename='d3-world-map' )","d2ad8f74":"data = [dict(type='choropleth',\n             locations=country_count['CODE'],\n             z=country_count['salaries_mean'],\n             text=country_count['Q3'],\n             colorscale='Viridis',\n             autocolorscale=False,\n             reversescale=True,\n             marker = dict(line=dict(color='rgb(180,180,180)', width=0.5)),\n             colorbar = dict(autotick=False, title='Responders'),)\n       ]\n\nlayout = dict(\n    title = 'Average Salary (USD) by Country',\n    geo = dict(showframe=False, showcoastlines=True, projection=dict(type='Mercator'))\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig, validate=False, filename='d3-world-map')","92798496":"order = ['No formal education past high school', 'Some college\/university study without earning a bachelor\u2019s degree', 'Professional degree', \n         'Bachelor\u2019s degree', 'Master\u2019s degree', 'Doctoral degree', 'I prefer not to answer']\n\nshorter = ['No formal education past high school', 'Some college\/university study', 'Professional degree', 'Bachelor\u2019s degree',  \n           'Master\u2019s degree', 'Doctoral degree', 'I prefer not to answer']\n\nplt.figure(figsize=(15, 7))\nsplot = sns.countplot(y=multiple_choice_responses['Q4'], order=order)\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_width() \/ len(multiple_choice_responses) * 100, '.1f') + '%', (p.get_width() * 1.01, p.get_y() + p.get_height() \/ 2),\n                   ha='center', va='center', xytext=(15, 0), textcoords='offset points')\n    \nplt.title(questions_only['Q4'][0], size=15)\nplt.yticks(range(len(order)), shorter, fontsize=12)\nplt.show()","48eefb02":"plt.figure(figsize=(15, 7))\nsns.boxplot(y=multiple_choice_responses['Q4'], x=multiple_choice_responses['salaries_clipped'], order=order)\nplt.yticks(range(len(order)), shorter)\nplt.title('Education & Salary', size=15)\nplt.yticks(fontsize=12)\nplt.show()","7bd3dc8c":"order = list(np.array(sorted(Counter(multiple_choice_responses['Q5']).items(), key=operator.itemgetter(1)))[:, 0][::-1])\norder.remove('Other')\norder.append('Other')\n\nplt.figure(figsize=(15, 8))\nsplot = sns.countplot(y=multiple_choice_responses['Q5'], order=order)\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_width() \/ len(multiple_choice_responses) * 100, '.1f') + '%', (p.get_width() * 1.01, p.get_y() + p.get_height() \/ 2),\n                   ha='center', va='center', xytext=(15, 0), textcoords='offset points')\n    \nplt.yticks(fontsize=12)\nplt.title(questions_only['Q5'][0].split(':')[0], size=15)\nplt.show()","f3caf6a8":"plt.figure(figsize=(15, 8))\nsns.boxplot(y=multiple_choice_responses['Q5'], x=multiple_choice_responses['salaries_clipped'], order=order)\nplt.title('Role & Salary', size=15)\nplt.yticks(fontsize=12)\nplt.show()","2c84385d":"plt.figure(figsize=(15, 6))\nsplot = sns.countplot(multiple_choice_responses['Q5'], hue=multiple_choice_responses['Q4'], order=['Data Scientist', 'Research Scientist', 'Product\/Project Manager'])\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_height()), (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center', xytext=(0, 10), textcoords='offset points')\n    \nplt.ylim(0, 2050)\nplt.title('Job Title & Studies', size=15)\nplt.xticks(fontsize=12)\nplt.show()","f64459ad":"counts = {}\nfor c in ['Q9_Part_1', 'Q9_Part_2', 'Q9_Part_3', 'Q9_Part_4', 'Q9_Part_5', 'Q9_Part_6']:\n    col = header[c].split(' - ')[-1]\n    counts[col] = (~multiple_choice_responses[multiple_choice_responses['Q5'] == 'Data Scientist'][c].isna()).sum()\n\nshorter = ['Analyze and understand data to \\n influence product or business decisions',\n 'Build and\/or run the data infrastructure \\n that my business uses for storing, \\n analyzing, and operationalizing data',\n 'Build prototypes to explore applying \\n machine learning to new areas',\n 'Build and\/or run a ML service \\n  that operationally improves \\n  my product or workflows',\n 'Experimentation and iteration \\n to improve existing ML models',\n 'Do research that advances \\n the state of the art of ML',]\n\nplt.figure(figsize=(15, 8))\nsplot = sns.barplot(y=list(counts.keys()), x=list(counts.values()))\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_width() \/ len(multiple_choice_responses) * 100, '.1f') + '%', (p.get_width() * 1.01, p.get_y() + p.get_height() \/ 2),\n                   ha='center', va='center', xytext=(15, 0), textcoords='offset points')\n    \nplt.title(\"Data Scientists : \" + questions_only['Q9'][0].split(':')[0], size=15)\nplt.yticks(range(len(shorter)), shorter, fontsize=12)\nplt.show()","64c0fbb3":"order = ['0-49 employees', '50-249 employees', '250-999 employees', '1000-9,999 employees', '> 10,000 employees']\nplt.figure(figsize=(15, 7))\nplt.subplot(1, 2, 1)\n\nsplot = sns.countplot(y=multiple_choice_responses['Q6'], order=order)\nfor p in splot.patches:\n    splot.annotate(format(p.get_width() \/ len(multiple_choice_responses) * 100, '.0f') + '%', (p.get_width() * 1.01, p.get_y() + p.get_height() \/ 2),\n                   ha='center', va='center', xytext=(15, 0), textcoords='offset points')\nplt.title(\"Number of Employees\", size=15)\nplt.xlim(0, 3800)\nplt.yticks(range(len(order)), [o[:-10] for o in order], fontsize=12)\n# plt.show()\n\norder = ['0', '1-2', '3-4', '5-9', '10-14', '15-19', '20+']\n\nplt.subplot(1, 2, 2)\nsplot = sns.countplot(y=multiple_choice_responses['Q7'], order=order)\nfor p in splot.patches:\n    splot.annotate(format(p.get_width() \/ len(multiple_choice_responses) * 100, '.0f') + '%', (p.get_width() * 1.01, p.get_y() + p.get_height() \/ 2),\n                   ha='center', va='center', xytext=(15, 0), textcoords='offset points')\nplt.title(\"Number of Data Science Employees\", size=15)\nplt.xlim(0, 3100)\nplt.yticks(fontsize=12)\nplt.show()","604dc20d":"order = ['0-49 employees', '50-249 employees', '250-999 employees', '1000-9,999 employees', '> 10,000 employees']\nplt.figure(figsize=(15, 7))\n\nplt.subplot(1, 2, 1)\nsns.boxplot(y=multiple_choice_responses['Q6'], x=multiple_choice_responses['salaries_clipped'], order=order)\nplt.yticks(range(len(order)), [o[:-10] for o in order], fontsize=12)\nplt.title('Number of Employees & Salary', size=15)\n\norder = ['0', '1-2', '3-4', '5-9', '10-14', '15-19', '20+']\nplt.subplot(1, 2, 2)\nsns.boxplot(y=multiple_choice_responses['Q7'], x=multiple_choice_responses['salaries_clipped'], order=order)\nplt.title('Number of Data Science Employees & Salary', size=15)\nplt.yticks(fontsize=12)\nplt.show()","b5562d0b":"order = [#'I do not know',\n         'No (we do not use ML methods)',\n         'We are exploring ML methods (and may one day put a model into production)',\n         'We use ML methods for generating insights (but do not put working models into production)',\n         'We recently started using ML methods (i.e., models in production for less than 2 years)',\n         'We have well established ML methods (i.e., models in production for more than 2 years)',\n        ]\n\nshorter = [#'I do not know',\n           'No',\n           'We are exploring \\n ML methods',\n           'We use ML methods \\n for generating insights',\n           'We recently started \\n using ML methods',\n           'We have well \\n established ML methods',\n          ]\n\nsns.catplot(y='Q8', x='salaries_clipped', kind=\"boxen\", data=multiple_choice_responses, height=6, aspect=18\/6, order=order)\nplt.title('Maturity of the Employer in ML & Salary', size=15)\nplt.yticks(range(len(order)), shorter, fontsize=12)\nplt.show()","c7b5cc84":"order = ['$0 (USD)', '$1-$99', '$100-$999', '$1000-$9,999', '$10,000-$99,999', '> $100,000 ($USD)']\n\nsns.catplot(y='Q11', x='salaries_clipped', kind=\"boxen\", data=multiple_choice_responses, height=6, aspect=18\/6, order=order)\nplt.title('Budget spent on ML at work & Salary', size=15)\nplt.yticks(fontsize=12)\nplt.show()","87cffcd5":"df = multiple_choice_responses[kept_questions + ['salaries']].copy()\n\nclasses = ['< 10k', '10k - 30k', '30k - 50k', '50k - 80k', '80k - 125k', '> 125k']\n\ndic_target = {500: 0, 1400: 0, 2400: 0, 3400: 0, 4400: 0, 6200: 0, 8700:0, \n              12400: 1, 17400: 1, 22400: 1, 27400:1, 37100: 1,\n              34900: 2, 44900: 2, \n              54900: 3,  64900: 3,  74900: 3,\n              84900: 4, 94900: 4, 112400: 4,\n              137400: 5,  174900: 5, 224900: 5, 274900: 5, 500000: 5}\n\ndf['salaries'] = df['salaries'].apply(lambda x: dic_target[x])\n\n\nplt.figure(figsize=(12, 7))\nsplot = sns.countplot(df['salaries'])\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_height() \/ len(multiple_choice_responses) * 100, '.1f') + '%', (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center', xytext=(0, 10), textcoords='offset points')\n\nplt.title(f\"Repartition of our Income Classes\", size=15)\nplt.xticks(range(0, 7), classes, fontsize=14)\nplt.show()","4a99bf69":"df = df.rename(index=str, columns={\"Q1\": 'Age', \"Q2\": 'Gender', \"Q3\": 'Country', \"Q4\": 'Education', \"Q5\": 'Job', \"Q6\": 'Employer -  Size', \n                                   \"Q7\": 'Employer - DS Size', \"Q8\": \"Employer - ML Maturity\", \"Q11\": \"Employer - ML Budget\", \n                                   \"Q15\": \"Exp - Coding\", \"Q23\": \"Exp - ML\", \"salaries\" : 'Target',\n                                  })\n\nfeatures = list(df.columns[:-1])\nprint('Using features : ',  ', '.join(features))","5513b85d":"cat_cols = ['Country', 'Job']\n\nfor q in cat_cols:\n    df[q] = df[q].astype('category')\n    \ncat_columns = df.select_dtypes(['category']).columns\ndf[cat_columns] = df[cat_columns].apply(lambda x: x.cat.codes)","fd9f6446":"dic_age = {'18-21': 19.5, '22-24': 23, '25-29': 27, '30-34': 32, '35-39': 37, '40-44': 42, '45-49': 47, '50-54': 52,'55-59': 57, '60-69': 64.5,'70+': 75}\n\ndic_gender = {'Male': 0, 'Female': 1, 'Prefer to self-describe': 2, 'Prefer not to say': 2}\n\ndic_education = {'No formal education past high school' : 0, 'Some college\/university study without earning a bachelor\u2019s degree': 1, \n                 'Professional degree': 3, 'Bachelor\u2019s degree': 3, 'Master\u2019s degree': 5, 'Doctoral degree': 8, 'I prefer not to answer': 3}\n\ndic_company_size = {'0-49 employees': 25, '50-249 employees': 175, '250-999 employees': 625, '1000-9,999 employees': 5500, '> 10,000 employees': 15000}\n\ndic_ds_team_size = {'0': 0, '1-2': 1.5, '3-4': 3.5, '5-9': 7, '10-14': 12, '15-19': 17, '20+': 25}\n\ndic_employer_mat = {'I do not know': 0, 'No (we do not use ML methods)': 0,\n                    'We are exploring ML methods (and may one day put a model into production)': 1,\n                    'We use ML methods for generating insights (but do not put working models into production)': 2,\n                    'We recently started using ML methods (i.e., models in production for less than 2 years)': 3,\n                    'We have well established ML methods (i.e., models in production for more than 2 years)': 4,\n                   }\ndic_budget = {'$0 (USD)': 1, '$1-$99': 50, '$100-$999': 550, '$10,000-$99,999': 55000,  '$1000-$9,999': 5500, '> $100,000 ($USD)': 100000}\n\ndic_exp_code = {'I have never written code': 0, '< 1 years': 0.5, '1-2 years': 1.5, '3-5 years': 4, '5-10 years': 7.5, '10-20 years': 15,  '20+ years': 20}\n\ndic_exp_ml = {'< 1 years': 0.5, '1-2 years': 1.5, '2-3 years': 2.5, '3-4 years': 3.5, '4-5 years': 4.5, '5-10 years': 7.5, '10-15 years': 12.5, '20+ years': 20}\n\n\ndic_cols = ['Age', 'Gender', 'Education', 'Employer -  Size', 'Employer - DS Size', 'Employer - ML Maturity', 'Employer - ML Budget', 'Exp - Coding', 'Exp - ML']\ndics = [dic_age, dic_gender, dic_education, dic_company_size, dic_ds_team_size, dic_employer_mat, dic_budget, dic_exp_code, dic_exp_ml]\n\nassert len(dics) == len(dic_cols )\n\ndef replace_with_dic(dic, x):\n    \"\"\"Function to apply a mapping that handles missing values\"\"\"\n    try:\n        return dic[x]\n    except KeyError:\n        return x\n\nfor col, dic in zip(dic_cols, dics):\n    df[col] = df[col].apply(lambda x: replace_with_dic(dic, x))\n    \ncat_cols.append('Gender')","da9d5121":"df.fillna(df.mean(), inplace=True)\n\ndf['Employer - ML Budget'] = np.log(df['Employer - ML Budget'])\ndf['Employer -  Size'] = np.log(df['Employer -  Size'])","c2da8cdb":"def run_lgb(df_train, df_test, features, target_name='target', cat_features=[]):\n    params = {\"objective\" : \"multiclass\",\n              \"num_class\": 6,\n              \"metric\" : \"multi_error\",\n              \"num_leaves\" : 10,\n              \"min_child_weight\" : 5,\n              \"learning_rate\" : 0.02,\n              \"bagging_fraction\" : 0.5,\n              \"feature_fraction\" : 0.5,\n              \"bagging_seed\" : 420,\n              \"verbosity\" : -1\n             }\n    \n    lg_train = lgb.Dataset(df_train[features], label=(df_train[target_name].values), categorical_feature=cat_features)\n    lg_test = lgb.Dataset(df_test[features], label=(df_test[target_name].values), categorical_feature=cat_features)\n    \n    model = lgb.train(params, lg_train, 1000, valid_sets=[lg_test], early_stopping_rounds=100, verbose_eval=100)\n    return model\n\n\ndf_train, df_test = train_test_split(df, test_size=0.2)\n\nprint(f\" -> Training on {df_train.shape[0]} samples.\\n\")\n\nmodel = run_lgb(df_train, df_test, features, target_name='Target', cat_features=cat_cols)\n\nprint('\\n -> Predicting... \\n')\npred_train = model.predict(df_train[features], num_iteration=model.best_iteration)\npred_test = model.predict(df_test[features], num_iteration=model.best_iteration)\n\nprint('Done !')","62a4f4a4":"def plot_confusion_matrix(cm, classes, title='Confusion matrix', normalize=False, cmap=plt.cm.Blues):\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n    fmt = '.2f' if normalize else 'd'\n\n    fig, ax = plt.subplots(figsize=(12, 8))\n    ax.imshow(cm, interpolation='nearest', cmap=cmap)\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title, size=15)\n    plt.colorbar()\n    plt.grid(False)\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    thresh = (cm.max()+cm.min()) \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label', size=12)\n    plt.xlabel('Predicted label', size=12)\n    \nconf_mat_train = confusion_matrix(np.argmax(pred_train, axis=1), df_train['Target'].values)\nconf_mat_test = confusion_matrix(np.argmax(pred_test, axis=1), df_test['Target'].values)\n\nplot_confusion_matrix(conf_mat_test, classes, title='Confusion matrix on test data', normalize=True)","045b7ddc":"def plot_feature_importance(ft_imp):\n    \"\"\"\n    Plots feature importance given a dictionary\n    :param ft_imp: Dictionary of form {feature (str): importance (float)\n    :return: None\n    \"\"\"\n    plt.figure(figsize=(12, 8))\n    order = np.array(sorted(ft_imp.items(), key=operator.itemgetter(1)))[:, 0][::-1]\n    vals = np.array(sorted(ft_imp.items(), key=operator.itemgetter(1)))[:, 1][::-1].astype(float)\n    splot = sns.barplot(y=order, x=vals)\n\n    for p in splot.patches:\n        splot.annotate(format(p.get_width() \/ np.sum(vals) * 100, '.0f') + '%', (p.get_width() * 1.01, p.get_y() + p.get_height() \/ 2),\n                       ha='center', va='center', xytext=(15, 0), textcoords='offset points')\n    plt.yticks(fontsize=12)\n    plt.title('Feature importance', size=15)\n    \n    \nimportances_dic = dict(zip(df.columns[:-1], model.feature_importance()))\n\nplot_feature_importance(importances_dic)\nplt.xlim(0, np.max(model.feature_importance()) * 1.07)\nplt.show()","bac820ce":"# Who do you Work for ?\n\nYour employer chooses your salary so companies are definitely worth to take a look into.","75677433":"# Predicting Salaries\n\nLet us say we want to predict the income of a person. I will tackle the problem as a classification one. In fact, a regression one will give a bad results on lower salaries. I believe it is more important to make a distinction between earning 40k and 60k than between earning 200k and 250k.\n\nTherefore, I make **6 salary categories**:\n- Less than 10k - *(Newbie)*\n- Between 10k and 30k - *(Casual Player)*\n- Between 30k and 50k - *(Average Player)*\n- Between 50k and 80k - *(Try Harder)*\n- Between 80k and 125k - *(Pro Player)*\n- More than 125k  - *(Hacker)*","5f73fa45":"Although our this number is approximate, it is close to the commonly used 78%. One may think because it is a relatively recent field, Data Science would have a lower wage gap, but it does not seem to be the case.","622e3c71":"# Modeling\n\nNext step is to train a model. I use a LightGBM, but any model that handles multi-class data and has some kind of feature importance works (*e.g. Random Forests, Logistic Regression*)\n\nI first split the data in two and then train my model.","a8beaed7":"Then I deal with columns that have an order that I want to keep, or that I want to manually define categories for.\n- **Age**, **Employer -  Size**, **Employer - DS Size**,  **Employer - ML Budget**, **Exp - Coding**, **Exp - ML**: Which are basically numerical features\n- **Gender** : I merge the two under-represented categories\n- **Education** : I encode it using the (approximated) length of the studies\n- **Employer - ML Maturity** : \"Higher maturity\" categories get a higher value for encoding","9850ef31":"Women tend to have lower salaries than men : the usual figure is **78% lower salaries for women** (without adjustments). \n\n> *Source :* O'Brien, Sara Ashley (April 14, 2015). \"78 cents on the dollar: The facts about the gender wage gap\"\n\nAlso note that there are no women with  >200k$ salaries, which translates to the usual assumption that the highest earning jobs are mostly accessible to men, because of the **glass ceiling**.\n\nLet us take a look at the **wage gap** here. ","a11ae2e7":"## Experience in ML","f07fe7e2":"**Results are pretty good** overall. The model struggles a bit to distinguish close classes but it is normal. \nAlso, the extremes cases are the easier to detect, which makes sense.\n\nNow that we have a model that converged, let us move on to the interesting part :","765f0ef3":"# Part 2 - Getting New Insights \n\nSo far, we've used a straight forward approach to look at what influences salary. I'm going to use one that uses common Machine Learning tools to put in perspective everything that was observed so far. ","1fa944fc":"As we are going to focus on income, we need to consider people who gave an answer to the question. Unfortunately, more than a third of the data will be unused for now.","a8990edb":"The age repartition differs from the one of the overall population because Data Science involves new technologies. As a reference, see below the age repartition of Facebook users, which approximately follow the same trend, with the difference that people start using Facebook younger than they start doing Data Science (*unfortunately*)\n\n![image.png](attachment:image.png)\n\n> *Source :* https:\/\/www.statista.com\/statistics\/376128\/facebook-global-user-age-distribution\/","f31140e9":"As expected, employers that are more **mature** in Machine Learning tend to pay employees in the ML related fields more, especially when the company has developed a need for data science teams. The better Machine Learning is used in the firm, the higher the value of the Data Scientist (and other jobs).","deff6399":"The analysis is straight forward, **people start from scratch and earn more and more** until they retire in their 70s. \nOnce again, I get rid of some outliers, using age as a limiting factor for income.","f00e184e":"This is straight-forward as well, people who can spend the more money doing their Machine Learning job are also the one that have the highest salary. Ironically, **the more you spend, the more you earn**.","70076c98":"> Thanks for Reading ! \n\n**Theo.**","6361b2f9":"# Introduction\n\nThe idea behind this kernel is to take a look at few factors that determine one's salary, and provide an overall idea of which of those factors actually matter. \n\nThe following question was asked to the 19718 participants of the 2019 Kaggle ML & DS Survey : \n\n> ### What is your current yearly compensation (approximate \\$USD)?\n\nAfter taking a look at its answers, we'll dive into answers to other questions that seem relevant to study what determines a Kaggler's salary. \nI've selected the following ones : ","c3ffc6a9":"**Data Scientists** and **Product \/ Project Manager** seem to be the best earning \"data\" jobs.\nWe saw before that people having doctoral degrees tend to earn more. However, research oriented jobs such as **Research Scientist** do not seem to be the highest paid ones.\nWe dive a bit deeper in the data to understand that.","9d19e9cc":"Data Science is a **start-up** oriented field, making small size companies (<50) the most represented category here.","f14e740f":"### A couple of things stand out : \n- The **country** is the most important feature, this was expected as we already raised the issue of the cost of life influence.\n- **Age** is more important than **experience**, I believe this is because the two experience features are a bit too specific and one can have a high salary without knowing a lot about one of the fields.\n- **Gender** and **Education** matter the least !\n - People in Data Science are overall highly educated, therefore it does not seem to play a big role for the model. It is what you do more than what you did that will determine your income.\n - The model believes that if only the gender differs, both people will have the same salary. This does not mean that the gender pay gap does not exist: for instance, women still struggle to reach higher positons.\n \n\n*Be careful that results vary a bit, and they come out of a black box, so take them for what they are worth.*","0e00524b":"## Repartition","81fb90da":"The intuition about income repartition is that it can be decomposed into **two trends** : \n- People that have very few experience, and therefore have low \/ no income.\n- More experienced people, which income's repartition should roughly follow a gaussian distribution\n\nThe graph seem to follow this trend although there might be some outliers, which I believe it is better to get rid off.\n\nFor visualization, we are going to need integer values of the income. I also keep an extra column with salaries maxed at 200k$.","a6c4e67a":"# Part 1 - Exploring the Data","903ed631":"It seems that a lot of people with PhDs end up as Data Scientists, where they will overall be paid more than those with Master's degrees. However, the definition of a Data Scientist has become really large.","3db05a49":"# What is your job ?\n\nLet us take a look at what people do for a living, and what they did to get there.","be348671":"I also get rid of missing values by using the mean of the feature, and apply log scaling to features with a too high range (**Employer - ML Budget** and **Employer -  Size**)","974a089f":"Nothing much to say here, except that the bigger the employer, the higher the salary. ","433ab985":"# Preparing Input Data\nThis is the boring part when I treat features to make them fit in a model.\nI first deal with purely categorical columns : **Country** and **Job**","c62c3ed3":"## Gender","1ea40337":"The fact that Data Science is a **male preserve** immediatly stands out. ","200347e6":"# Feature Importance","c0428d6a":"Almost half of Kagglers have a Master's Degree, which is a very high education level compared to the norm.","d587df43":"Harvard Buisness Review named **Data Scientist** the sexiest job of the 21st century, no wonder why it is on top here.\n\n> See https:\/\/hbr.org\/2012\/10\/data-scientist-the-sexiest-job-of-the-21st-century","4b93b688":"Most people have very little experience, and that is normal since Kaggle is a great place for learning. ","dbc46846":"USA's average salary is 7 times higher than the one in India, but as I said it is mostly because of the cost of life.\n\nAs a comparison, here is a map of the cost of living in different countries.\n\n![image.png](attachment:image.png)\n> *Source :* https:\/\/www.numbeo.com\/cost-of-living\/rankings_by_country.jsp\n\nThe two maps seem to match out pretty well, even though there are some exceptions :\n- Salaries in the USA still seem to be pretty high : This is justified because the USA is not a **Welfare State**, i.e. it does not guarantee lot of social measures for its citizens, as opposed to most of the European countries\n- Japan seems to have really low salaries compared to the price of life","7b57f9b4":"## Experience\n\nExperience matters more than age (*hopefully*), although the two are correlated. We'll take a look into the experience in the Machine Learning and Data Analysis fields.","50dba2a1":"## Age","6c3b0add":"## Country","072d722e":"I also rename columns for more clarity. The features used are those studied earlier.","a11a16d9":"The trend is globally the same as for both topics, although the answer *\"I have never written code\"* provides some extra information, regarding people who do not do data analysis. Even though it seems like an important skill to master, it is not mandatory depending on the job you do. Same applies for Machine Learning but the data does not tell people who do not do ML and people who did a few appart.\n\nExperience is a bit like age, **the more the better**, with the difference that it is rare to be unable to access top jobs because you have too much experience.","2b033c1f":"## Education","c1f1e937":"Overall, the two formations that bring the more money are Master's degrees and Doctoral degrees, for they are the ones that last the longer. Usually, **the more you study, the higher your salary will be**, this is true at least at the beginning of your career.","a347cc91":"## Actual Job","c62eb8b7":"# Taking a Look at Incomes","194fc452":"Once data has been explored, we'll propose a Machine Learning based approach to compare each of these factors and try to answer this question : \n\n> ### What matters when a model tries to predict someone's salary ?\n\nSome ideas already come quickly to mind : Age, Experience, Studies, Location ... \n\nAnd a controversy already arises : *What about the gender pay gap ?*","e4078acf":"## Missing values","bf09172c":"# Performances\nWe want to make sure our model actually learned something. For this, we plot the confusion matrix on test data.","d37ccfe4":"## Importance of Machine Learning in the Company","c255750e":"# Conclusion\n\n## Takeaways \n\nBy taking a look into some relevant questions of the survey, I've highlighted some relevant factors to analyse salaries. The order is random, and you may or may not agree with these insights.\n\n- Salaries depend *a lot* on where you live\n- Your job matters more than your studies\n- Salary is a strictly increasing function of both age and experience\n- If your employer has more means, you are most likely going to get paid more\n- Gender plays a role, but is not necessarily a determining factor : its influence is too *under-cover* for a naive model to understand it\n\n## Digging deeper ...\n\nIt appeared that the country is the most important factor in determining your salary. However, it is *in my opinion* not a clever parameter, as it does not tell anything interesting about the person. An idea will be to remove this bias by studying the gap between one's salary and the average salary in the country. Most analysis will stay the same, but this will enable us to leave this parameter appart.\n\nI did a similar task last year, with a more intensive focus on gender (*see https:\/\/www.kaggle.com\/theoviel\/kagglers-gender-pay-gap-salary-prediction*). The features that were the most important were, in this order : *Industry of work, Profession, Country, Age, Experience, Major, Education* and *Gender*. Notice that although the features were different, the order is roughly the same. \n\n## Final words\n\nIt may seem like this work revolves around money, well it is a bit the case. In my honest opinion, salary can be seen as a reward for working, but should not be the thing that makes you work. Although it may be a bit too personal, one thing I would like to see in next year's survey is a question about how people feel about their work. Taking a look at what makes people happy brings much more than taking a look at what makes people \"rich\". ","d4cd58a8":"# **Understanding Salaries and What Hides Behind Them**\n> Theo VIEL - November 2019","32bc0056":"It appears that the Data Scientist combines competences of the **Analysts** (\"Analyze and understand data to influence product or business decisions\"), of the **Engineers** \n(\"Build and\/or run the data infrastructure that my business uses for storing, analyzing, and operationalizing data\",  \"Build and\/or run a ML service that operationally improves my product or workflows\") and of the **Researchers** (\"Do research that advances the state of the art of ML\").","2cf92b6b":"The country induces a lot of **bias** in our analysis, because the **cost of life** is depends on where you live. Salaries adapt to that and therefore tend to be higher in develloped countries. India and the USA are the two most represented countries, and they are very different examples here.","c8742653":"# Who are you ?\nWe'll take a look at two things that defines a person : gender & country. Those are two things that should not define your income but do play a role.","f9f9f38e":"## Company size","54e9c26a":"# Age & Experience\n\nThey are most likely the first factors that come to mind when determining one's salary."}}