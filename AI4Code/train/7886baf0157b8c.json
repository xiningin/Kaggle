{"cell_type":{"f46160cb":"code","b1ee1cee":"code","de041035":"code","3baa4a37":"code","13c702fa":"code","3552bcad":"code","fac09d9b":"code","4241f21f":"code","5b7a2705":"code","329a24d8":"code","90a15764":"code","6dadaedf":"code","c0aaf5aa":"code","1b3fdce0":"code","da4f6652":"code","21547941":"code","7054bcb4":"code","8fb24915":"code","b8ef9a7e":"code","42c69f22":"code","9fb234b0":"markdown","39945d45":"markdown","227291c9":"markdown","77ac47bb":"markdown","aff568cb":"markdown","98290504":"markdown","e1e6ef4b":"markdown"},"source":{"f46160cb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b1ee1cee":"data = pd.read_csv(\"\/kaggle\/input\/countries-of-the-world\/countries of the world.csv\")","de041035":"data.shape","3baa4a37":"data.head(20)","13c702fa":"data.columns","3552bcad":"data.info()","fac09d9b":"data[\"Region\"] = data[\"Region\"].astype(\"category\")\ndata[\"Area (sq. mi.)\"] = data[\"Area (sq. mi.)\"].astype(\"float\")\ndef convertNum(listold):\n    newlist = []\n    for i in listold:\n        if(str(i).lower != \"nan\"):\n            newlist.append(float(str(i).replace(',', '.')))\n        else:\n            newlist.append(np.nan)\n    return newlist\ndata[\"Coastline (coast\/area ratio)\"] = convertNum(data[\"Coastline (coast\/area ratio)\"])\ndata[\"Pop. Density (per sq. mi.)\"] = convertNum(data[\"Pop. Density (per sq. mi.)\"])\ndata[\"Infant mortality (per 1000 births)\"] = convertNum(data[\"Infant mortality (per 1000 births)\"])\ndata[\"Net migration\"] = convertNum(data[\"Net migration\"])\ndata[\"Literacy (%)\"] = convertNum(data[\"Literacy (%)\"])\ndata[\"Arable (%)\"] = convertNum(data[\"Arable (%)\"])\ndata[\"Crops (%)\"] = convertNum(data[\"Crops (%)\"])\ndata[\"Other (%)\"] = convertNum(data[\"Other (%)\"])\ndata[\"Birthrate\"] = convertNum(data[\"Birthrate\"])\ndata[\"Deathrate\"] = convertNum(data[\"Deathrate\"])\ndata[\"Agriculture\"] = convertNum(data[\"Agriculture\"])\ndata[\"Industry\"] = convertNum(data[\"Industry\"])\ndata[\"Service\"] = convertNum(data[\"Service\"])\ndata[\"Phones (per 1000)\"] = convertNum(data[\"Phones (per 1000)\"])\ndata[\"Climate\"] = convertNum(data[\"Climate\"])\n","4241f21f":"data[\"Climate\"] = data[\"Climate\"].astype(\"category\")\ndata.info()","5b7a2705":"data.head(10)","329a24d8":"data.info()","90a15764":"# Every column after netmigration contains missing values, filling them up with mean values for numerical data and most occurence for categorical data.\ndata[\"Net migration\"].fillna(data[\"Net migration\"].mean(), inplace=True)\ndata[\"Infant mortality (per 1000 births)\"].fillna(data[\"Infant mortality (per 1000 births)\"].mean(), inplace=True)\ndata[\"GDP ($ per capita)\"].fillna(data[\"GDP ($ per capita)\"].mean(), inplace=True)\ndata[\"Literacy (%)\"].fillna(data[\"Literacy (%)\"].mean(), inplace=True)\ndata[\"Phones (per 1000)\"].fillna(data[\"Phones (per 1000)\"].mean(), inplace=True)\ndata[\"Arable (%)\"].fillna(data[\"Arable (%)\"].mean(), inplace=True)\ndata[\"Crops (%)\"].fillna(data[\"Crops (%)\"].mean(), inplace=True)\ndata[\"Other (%)\"].fillna(data[\"Other (%)\"].mean(), inplace=True)\ndata[\"Birthrate\"].fillna(data[\"Birthrate\"].mean(), inplace=True)\ndata[\"Deathrate\"].fillna(data[\"Deathrate\"].mean(), inplace=True)\ndata[\"Agriculture\"].fillna(data[\"Agriculture\"].mean(), inplace=True)\ndata[\"Industry\"].fillna(data[\"Industry\"].mean(), inplace=True)\ndata[\"Service\"].fillna(data[\"Service\"].mean(), inplace=True)","6dadaedf":"data[\"Climate\"].value_counts()\ndata[\"Climate\"].fillna(2.0, inplace=True)","c0aaf5aa":"data.info()","1b3fdce0":"data.describe()","da4f6652":"import matplotlib.pyplot as plt\nimport seaborn as sns","21547941":"total = data.shape[0]","7054bcb4":"columnsToBeAnalyzed = data.columns[2:]\nfor i in columnsToBeAnalyzed:\n    print(i)\n    if(data[i].dtype.name == \"category\"):\n        print((data[i].value_counts()\/total)*100)\n        sns.countplot(data[i])\n    else:\n        try:\n            sns.distplot(data[i])\n        except:\n            sns.distplot(data[i], kde=False)\n        print(\"Skew =\", data[i].skew())\n        print(\"Kurtosis =\", data[i].kurt())\n    plt.show()","8fb24915":"for i in columnsToBeAnalyzed:\n    if(data[i].dtype.name == \"category\"):\n        print(i)\n        sns.countplot(data['GDP ($ per capita)'], hue=data[i])\n\n        pd.crosstab(data[i], data['GDP ($ per capita)']).apply(lambda r: round((r\/r.sum())*100,1), axis=1)\n    plt.show()","b8ef9a7e":"for i in columnsToBeAnalyzed:\n    if(data[i].dtype.name != \"category\"):\n        print(i)\n        sns.relplot(x=i, y=\"GDP ($ per capita)\", data=data)\n    plt.show()","42c69f22":"sns.heatmap(data.corr())","9fb234b0":"# Categorical Columns:\n \n 1.Region\n 2.Climate\n \n# Numerical Columns:\n\n 1.Population\n 2.Area (sq. mi.)\n 3.Pop. Density (per sq. mi.)\n 4.Coastline (coast\/area ratio)\n 5.Net migration\n 6.Infant mortality (per 1000 births)\n 7.GDP ($ per capita)\n 8.Literacy (%)\n 9.Phones (per 1000)\n 10.Arable (%)\n 11.Crops (%)\n 12.Other (%)\n 13.Birthrate\n 14.Deathrate\n 15.Agriculture\n 16.Industry\n 17.Service\n \n#  Mixed Columns:\n \n 1.Country","39945d45":"# Following are the Questions from the above DataSet:\n\n1. Our main focus: Factors affecting GDP of a country\n2. Dependency of birthrate on Phones(per area).","227291c9":"# Univariate Analysis:","77ac47bb":"#  Data Wrangling:\n\nCorrecting datatypes of columns.\n\nMost columns have , instead of .","aff568cb":"# Handling Missing Data:","98290504":"# Heatmap","e1e6ef4b":"# Multivariate Analysis:"}}