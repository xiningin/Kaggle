{"cell_type":{"17182652":"code","e1654d4a":"code","c04fd008":"code","e9681c4a":"code","fec4f9f1":"code","8a8ef94f":"code","62282a4b":"code","dbc05442":"code","7e86734c":"code","648bde8b":"markdown","297ae912":"markdown","aba733ec":"markdown","1f1dd362":"markdown","229334c7":"markdown"},"source":{"17182652":"import numpy as np  # linear algebra\nimport pandas as pd  # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport xgboost as xgb\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom xgboost import plot_importance\nfrom catboost import CatBoostRegressor\nfrom matplotlib import pyplot\nimport shap\n\nimport os\n# Any results you write to the current directory are saved as output.\nfrom time import time\nfrom tqdm import tqdm\nfrom collections import Counter\nfrom scipy import stats\nimport lightgbm as lgb\nfrom sklearn.metrics import cohen_kappa_score, mean_squared_error\nfrom typing import Dict\nfrom sklearn.model_selection import KFold, StratifiedKFold\nimport gc\nimport json\n\npd.set_option('display.max_columns', 1000)\n\nlocal = False\n\n\ndef eval_qwk_lgb_regr(y_true, y_pred):\n    \"\"\"\n    Fast cappa eval function for lgb.\n    \"\"\"\n    dist = Counter(reduce_train['accuracy_group'])\n    for k in dist:\n        dist[k] \/= len(reduce_train)\n    reduce_train['accuracy_group'].hist()\n\n    acum = 0\n    bound = {}\n    for i in range(3):\n        acum += dist[i]\n        bound[i] = np.percentile(y_pred, acum * 100)\n\n    def classify(x):\n        if x <= bound[0]:\n            return 0\n        elif x <= bound[1]:\n            return 1\n        elif x <= bound[2]:\n            return 2\n        else:\n            return 3\n\n    y_pred = np.array(list(map(classify, y_pred))).reshape(y_true.shape)\n\n    return 'cappa', cohen_kappa_score(y_true, y_pred, weights='quadratic'), True\n\n\ndef read_data():\n    if local:\n        print('Reading train.csv file....')\n        train = pd.read_pickle('..\/data\/train.pickle')\n        print('Training.csv file have {} rows and {} columns'.format(train.shape[0], train.shape[1]))\n\n        print('Reading test.csv file....')\n        test = pd.read_pickle('..\/data\/test.pickle')\n        print('Test.csv file have {} rows and {} columns'.format(test.shape[0], test.shape[1]))\n\n        print('Reading train_labels.csv file....')\n        train_labels = pd.read_pickle('..\/data\/train_labels.pickle')\n        print('Train_labels.csv file have {} rows and {} columns'.format(train_labels.shape[0], train_labels.shape[1]))\n\n        print('Reading specs.csv file....')\n        specs = pd.read_pickle('..\/data\/specs.pickle')\n        print('Specs.csv file have {} rows and {} columns'.format(specs.shape[0], specs.shape[1]))\n\n        print('Reading sample_submission.csv file....')\n        sample_submission = pd.read_csv('..\/data\/sample_submission.csv')\n        print('Sample_submission.csv file have {} rows and {} columns'.format(sample_submission.shape[0],\n                                                                              sample_submission.shape[1]))\n        return train, test, train_labels, specs, sample_submission\n    else:\n        print('Reading train.csv file....')\n        train = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train.csv')\n        print('Training.csv file have {} rows and {} columns'.format(train.shape[0], train.shape[1]))\n\n        print('Reading test.csv file....')\n        test = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/test.csv')\n        print('Test.csv file have {} rows and {} columns'.format(test.shape[0], test.shape[1]))\n\n        print('Reading train_labels.csv file....')\n        train_labels = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train_labels.csv')\n        print('Train_labels.csv file have {} rows and {} columns'.format(train_labels.shape[0], train_labels.shape[1]))\n\n        print('Reading specs.csv file....')\n        specs = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/specs.csv')\n        print('Specs.csv file have {} rows and {} columns'.format(specs.shape[0], specs.shape[1]))\n\n        print('Reading sample_submission.csv file....')\n        sample_submission = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv')\n        print('Sample_submission.csv file have {} rows and {} columns'.format(sample_submission.shape[0],\n                                                                              sample_submission.shape[1]))\n        return train, test, train_labels, specs, sample_submission\n\n\ndef encode_title(train, test, train_labels):\n    # encode title\n    train['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), train['title'], train['event_code']))\n    test['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), test['title'], test['event_code']))\n    all_title_event_code = list(set(train[\"title_event_code\"].unique()).union(test[\"title_event_code\"].unique()))\n    # make a list with all the unique 'titles' from the train and test set\n    list_of_user_activities = list(set(train['title'].unique()).union(set(test['title'].unique())))\n    # make a list with all the unique 'event_code' from the train and test set\n    list_of_event_code = list(set(train['event_code'].unique()).union(set(test['event_code'].unique())))\n    list_of_event_id = list(set(train['event_id'].unique()).union(set(test['event_id'].unique())))\n    # make a list with all the unique worlds from the train and test set\n    list_of_worlds = list(set(train['world'].unique()).union(set(test['world'].unique())))\n    # create a dictionary numerating the titles\n    activities_map = dict(zip(list_of_user_activities, np.arange(len(list_of_user_activities))))\n    activities_labels = dict(zip(np.arange(len(list_of_user_activities)), list_of_user_activities))\n    activities_world = dict(zip(list_of_worlds, np.arange(len(list_of_worlds))))\n    assess_titles = list(set(train[train['type'] == 'Assessment']['title'].value_counts().index).union(\n        set(test[test['type'] == 'Assessment']['title'].value_counts().index)))\n    # replace the text titles with the number titles from the dict\n    train['title'] = train['title'].map(activities_map)\n    test['title'] = test['title'].map(activities_map)\n    train['world'] = train['world'].map(activities_world)\n    test['world'] = test['world'].map(activities_world)\n    train_labels['title'] = train_labels['title'].map(activities_map)\n    win_code = dict(zip(activities_map.values(), (4100 * np.ones(len(activities_map))).astype('int')))\n    # then, it set one element, the 'Bird Measurer (Assessment)' as 4110, 10 more than the rest\n    win_code[activities_map['Bird Measurer (Assessment)']] = 4110\n    # convert text into datetime\n    train['timestamp'] = pd.to_datetime(train['timestamp'])\n    test['timestamp'] = pd.to_datetime(test['timestamp'])\n\n    return train, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code\n\n\ndef get_data(user_sample, test_set=False):\n    '''\n    The user_sample is a DataFrame from train or test where the only one\n    installation_id is filtered\n    And the test_set parameter is related with the labels processing, that is only requered\n    if test_set=False\n    '''\n    # Constants and parameters declaration\n    last_activity = 0\n\n    user_activities_count = {'Clip': 0, 'Activity': 0, 'Assessment': 0, 'Game': 0}\n\n    # new features: time spent in each activity\n    last_session_time_sec = 0\n    accuracy_groups = {0: 0, 1: 0, 2: 0, 3: 0}\n    all_assessments = []\n    accumulated_accuracy_group = 0\n    accumulated_accuracy = 0\n    accumulated_correct_attempts = 0\n    accumulated_uncorrect_attempts = 0\n    accumulated_actions = 0\n    counter = 0\n    time_first_activity = float(user_sample['timestamp'].values[0])\n    durations = []\n    last_accuracy_title = {'acc_' + title: -1 for title in assess_titles}\n    event_code_count: Dict[str, int] = {ev: 0 for ev in list_of_event_code}\n    event_id_count: Dict[str, int] = {eve: 0 for eve in list_of_event_id}\n    title_count: Dict[str, int] = {eve: 0 for eve in activities_labels.values()}\n    title_event_code_count: Dict[str, int] = {t_eve: 0 for t_eve in all_title_event_code}\n\n    # last features\n    sessions_count = 0\n\n    # itarates through each session of one instalation_id\n    for i, session in user_sample.groupby('game_session', sort=False):\n        # i = game_session_id\n        # session is a DataFrame that contain only one game_session\n\n        # get some sessions information\n        session_type = session['type'].iloc[0]\n        session_title = session['title'].iloc[0]\n        session_title_text = activities_labels[session_title]\n\n        # for each assessment, and only this kind off session, the features below are processed\n        # and a register are generated\n        if (session_type == 'Assessment') & (test_set or len(session) > 1):\n            # search for event_code 4100, that represents the assessments trial\n            all_attempts = session.query(f'event_code == {win_code[session_title]}')\n            # then, check the numbers of wins and the number of losses\n            true_attempts = all_attempts['event_data'].str.contains('true').sum()\n            false_attempts = all_attempts['event_data'].str.contains('false').sum()\n            # copy a dict to use as feature template, it's initialized with some itens:\n            # {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n            features = user_activities_count.copy()\n            features.update(last_accuracy_title.copy())\n            features.update(event_code_count.copy())\n            features.update(event_id_count.copy())\n            features.update(title_count.copy())\n            features.update(title_event_code_count.copy())\n            features.update(last_accuracy_title.copy())\n            features['installation_session_count'] = sessions_count\n\n            variety_features = [('var_event_code', event_code_count),\n                                ('var_event_id', event_id_count),\n                                ('var_title', title_count),\n                                ('var_title_event_code', title_event_code_count)]\n\n            for name, dict_counts in variety_features:\n                arr = np.array(list(dict_counts.values()))\n                features[name] = np.count_nonzero(arr)\n\n            # get installation_id for aggregated features\n            features['installation_id'] = session['installation_id'].iloc[-1]\n            # add title as feature, remembering that title represents the name of the game\n            features['session_title'] = session['title'].iloc[0]\n            # the 4 lines below add the feature of the history of the trials of this player\n            # this is based on the all time attempts so far, at the moment of this assessment\n            features['accumulated_correct_attempts'] = accumulated_correct_attempts\n            features['accumulated_uncorrect_attempts'] = accumulated_uncorrect_attempts\n            accumulated_correct_attempts += true_attempts\n            accumulated_uncorrect_attempts += false_attempts\n            # the time spent in the app so far\n            if durations == []:\n                features['duration_mean'] = 0\n                features[\"duration_std\"] = 0\n                features[\"duration_med\"] = 0\n                features[\"duration_max\"] = 0\n\n            else:\n                features['duration_mean'] = np.mean(durations)\n                features[\"duration_std\"] = np.std(durations)\n                features[\"duration_med\"] = np.median(durations)\n                features[\"duration_max\"] = np.max(durations)\n            durations.append((session.iloc[-1, 2] - session.iloc[0, 2]).seconds)\n            # the accurace is the all time wins divided by the all time attempts\n            features['accumulated_accuracy'] = accumulated_accuracy \/ counter if counter > 0 else 0\n            accuracy = true_attempts \/ (true_attempts + false_attempts) if (true_attempts + false_attempts) != 0 else 0\n            accumulated_accuracy += accuracy\n            last_accuracy_title['acc_' + session_title_text] = accuracy\n            # a feature of the current accuracy categorized\n            # it is a counter of how many times this player was in each accuracy group\n            if accuracy == 0:\n                features['accuracy_group'] = 0\n            elif accuracy == 1:\n                features['accuracy_group'] = 3\n            elif accuracy == 0.5:\n                features['accuracy_group'] = 2\n            else:\n                features['accuracy_group'] = 1\n            features.update(accuracy_groups)\n            accuracy_groups[features['accuracy_group']] += 1\n            # mean of the all accuracy groups of this player\n            features['accumulated_accuracy_group'] = accumulated_accuracy_group \/ counter if counter > 0 else 0\n            accumulated_accuracy_group += features['accuracy_group']\n            # how many actions the player has done so far, it is initialized as 0 and updated some lines below\n            features['accumulated_actions'] = accumulated_actions\n\n            if test_set:\n                all_assessments.append(features)\n            elif true_attempts + false_attempts > 0:\n                all_assessments.append(features)\n\n            counter += 1\n\n        sessions_count += 1\n\n        # this piece counts how many actions was made in each event_code so far\n        def update_counters(counter: dict, col: str):\n            num_of_session_count = Counter(session[col])\n            for k in num_of_session_count.keys():\n                x = k\n                if col == 'title':\n                    x = activities_labels[k]\n                counter[x] += num_of_session_count[k]\n            return counter\n\n        event_code_count = update_counters(event_code_count, \"event_code\")\n        event_id_count = update_counters(event_id_count, \"event_id\")\n        title_count = update_counters(title_count, 'title')\n        title_event_code_count = update_counters(title_event_code_count, 'title_event_code')\n\n        # counts how many actions the player has done so far, used in the feature of the same name\n        accumulated_actions += len(session)\n        if last_activity != session_type:\n            user_activities_count[session_type] += 1\n            last_activitiy = session_type\n\n            # if it't the test_set, only the last assessment must be predicted, the previous are scraped\n    if test_set:\n        return all_assessments[-1]\n    # in the train_set, all assessments goes to the dataset\n    return all_assessments\n\n\ndef get_train_and_test(train, test):\n    compiled_train = []\n    compiled_test = []\n    for i, (ins_id, user_sample) in tqdm(enumerate(train.groupby('installation_id', sort=False)), total=17000):\n        compiled_train += get_data(user_sample)\n    for ins_id, user_sample in tqdm(test.groupby('installation_id', sort=False), total=1000):\n        test_data = get_data(user_sample, test_set=True)\n        compiled_test.append(test_data)\n    reduce_train = pd.DataFrame(compiled_train)\n    reduce_test = pd.DataFrame(compiled_test)\n    categoricals = ['session_title']\n    return reduce_train, reduce_test, categoricals","e1654d4a":"# read data\ntrain, test, train_labels, specs, sample_submission = read_data()\n# get usefull dict with maping encode\ntrain, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code = encode_title(\n    train, test, train_labels)\n# tranform function to get the train and test set\nreduce_train, reduce_test, categoricals = get_train_and_test(train, test)\n\n\ndef stract_hists(feature, train=reduce_train, test=reduce_test, adjust=False, plot=False):\n    n_bins = 10\n    train_data = train[feature]\n    test_data = test[feature]\n    if adjust:\n        test_data *= train_data.mean() \/ test_data.mean()\n    perc_90 = np.percentile(train_data, 95)\n    train_data = np.clip(train_data, 0, perc_90)\n    test_data = np.clip(test_data, 0, perc_90)\n    train_hist = np.histogram(train_data, bins=n_bins)[0] \/ len(train_data)\n    test_hist = np.histogram(test_data, bins=n_bins)[0] \/ len(test_data)\n    msre = mean_squared_error(train_hist, test_hist)\n    if plot:\n        print(msre)\n        plt.bar(range(n_bins), train_hist, color='blue', alpha=0.5)\n        plt.bar(range(n_bins), test_hist, color='red', alpha=0.5)\n        plt.show()\n    return msre\n\n\nstract_hists('Magma Peak - Level 1_2000', adjust=False, plot=True)\n\nplt.show()\n\nreduce_train.columns = [\"\".join(c if c.isalnum() else \"_\" for c in str(x)) for x in reduce_train.columns]\nreduce_test.columns = [\"\".join(c if c.isalnum() else \"_\" for c in str(x)) for x in reduce_test.columns]\nfeatures = reduce_train.columns  # delete useless columns\nfeatures = [x for x in features if x not in ['accuracy_group', 'installation_id']]\najusted_test = reduce_test.copy()","c04fd008":"from sklearn.model_selection import train_test_split\nimport eli5\nfrom eli5.sklearn import PermutationImportance\n\nclf = xgb.XGBRegressor(\n    learning_rate=0.05,\n    max_depth=6,\n    metric=\"rmse\",\n    n_estimators=200\n)\ny = reduce_train[\"accuracy_group\"]\n\n# hold out(I think kfold is better than hold out)\ntr_tr, tr_val, y_tr, y_val = train_test_split(reduce_train[features], y, random_state=0, train_size=0.8)\nclf.fit(tr_tr, y_tr)\n\nperm = PermutationImportance(clf, random_state=0).fit(tr_val, y_val)\neli5.show_weights(perm, feature_names=tr_tr.columns.tolist(), top=900)","e9681c4a":"th_list = [-10000, 0.00001,0.0001, 0.0002,0.0003]","fec4f9f1":"len(features)","8a8ef94f":"class Base_Model(object):\n\n    def __init__(self, train_df, test_df, features, categoricals=[], n_splits=5, verbose=True):\n        self.train_df = train_df\n        self.test_df = test_df\n        self.features = features\n        self.n_splits = n_splits\n        self.categoricals = categoricals\n        self.target = 'accuracy_group'\n        self.cv = self.get_cv()\n        self.verbose = verbose\n        self.params = self.get_params()\n        self.y_pred, self.score, self.model = self.fit()\n\n    def train_model(self, train_set, val_set):\n        raise NotImplementedError\n\n    def get_cv(self):\n        cv = StratifiedKFold(n_splits=self.n_splits, shuffle=True, random_state=42)\n        return cv.split(self.train_df, self.train_df[self.target])\n\n    def get_params(self):\n        raise NotImplementedError\n\n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        raise NotImplementedError\n\n    def convert_x(self, x):\n        return x\n\n    def fit(self):\n        oof_pred = np.zeros((len(reduce_train),))\n        y_pred = np.zeros((len(reduce_test),))\n        for fold, (train_idx, val_idx) in enumerate(self.cv):\n            x_train, x_val = self.train_df[self.features].iloc[train_idx], self.train_df[self.features].iloc[val_idx]\n            y_train, y_val = self.train_df[self.target][train_idx], self.train_df[self.target][val_idx]\n            train_set, val_set = self.convert_dataset(x_train, y_train, x_val, y_val)\n            model = self.train_model(train_set, val_set)\n            conv_x_val = self.convert_x(x_val)\n            oof_pred[val_idx] = model.predict(conv_x_val).reshape(oof_pred[val_idx].shape)\n            x_test = self.convert_x(self.test_df[self.features])\n            y_pred += model.predict(x_test).reshape(y_pred.shape) \/ self.n_splits\n            print('Partial score of fold {} is: {}'.format(fold, eval_qwk_lgb_regr(y_val, oof_pred[val_idx])[1]))\n        _, loss_score, _ = eval_qwk_lgb_regr(self.train_df[self.target], oof_pred)\n        if self.verbose:\n            print('Our oof cohen kappa score is: ', loss_score)\n        return y_pred, loss_score, model\n\nclass Xgb_Model(Base_Model):\n\n    def train_model(self, train_set, val_set):\n        verbosity = 200 if self.verbose else 0\n        return xgb.train(self.params, train_set,\n                         num_boost_round=3000, evals=[(train_set, 'train'), (val_set, 'val')],\n                         verbose_eval=verbosity, early_stopping_rounds=150)\n\n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        train_set = xgb.DMatrix(x_train, y_train)\n        val_set = xgb.DMatrix(x_val, y_val)\n        return train_set, val_set\n\n    def convert_x(self, x):\n        return xgb.DMatrix(x)\n\n    def get_params(self):\n        params = {'colsample_bytree': 0.8,\n                  'learning_rate': 0.01,\n                  'max_depth': 8,\n                  'subsample': 1,\n                  'objective': 'reg:squarederror',\n                  # 'eval_metric':'rmse',\n                  'min_child_weight': 3,\n                  'gamma': 0.25,\n                  'n_estimators': 5000}\n        if local:\n            params[\"gpu_hist\"] = True\n\n        return params","62282a4b":"from sklearn.feature_selection import SelectFromModel\ncategoricals = ['session_title']","dbc05442":"score_list = []\nfor i, x in enumerate(th_list):\n    print(\"---------------------\\nThreshold is \" + str(x))\n    sel = SelectFromModel(perm, threshold=th_list[i], prefit=True)\n    # new_features = sel.transform(tr_tr)\n    features_idx = sel.get_support()\n    \n    new_features = reduce_train[features].columns[features_idx]\n    \n    print(\"Training using {} features. ({}%) \\n-----------------------\".format(len(new_features), len(new_features)*100 \/ len(features)))\n\n    xgb_model = Xgb_Model(reduce_train, ajusted_test, new_features, categoricals=categoricals)\n    score_list.append(xgb_model.score)","7e86734c":"for (th, sc) in zip(th_list, score_list):\n    print(\"Threshold is {} and Kappa score is {}\".format(th, sc))","648bde8b":"Features selection using Permutation Importance and check the cross validation score.\n\n1. Features selection using Permutation Importance  \n2. Training train data and check the cv score\n3. Change the threshold of \"1\" several times and perform \"2\"\n\nhttps:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/122889\n\nThis Kernel was born from this discussion.\n\nAnd also, I thank for https:\/\/www.kaggle.com\/braquino\/convert-to-regression and https:\/\/www.kaggle.com\/artgor\/quick-and-dirty-regression","297ae912":"V5: First commit\nV6: I changed parameters to reduce calculation time.","aba733ec":"## thresholds list\n### th_list[0] is showing to use all features","1f1dd362":"### Define XGBoost model","229334c7":"It turns out that most features are not needed.\n\n## What do you think of this result???\n"}}