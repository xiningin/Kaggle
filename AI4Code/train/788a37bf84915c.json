{"cell_type":{"a9e6c4ac":"code","e0d4f911":"code","7f6de6d6":"code","62aecf20":"code","3786ee5b":"code","53280586":"code","ad67ae37":"code","fc851171":"code","762cbae9":"code","60d61e88":"code","4f7081cf":"code","b4bf5d9c":"code","cc569fa9":"code","09d1e8ef":"code","af7a88c3":"code","0ed42f8a":"code","5b38e9b0":"code","d18500a2":"code","0f16471a":"code","0ae37e1f":"code","039abe52":"code","1eb497c5":"code","df39c0ac":"code","1390131e":"code","ffd2ef9d":"code","1fad81bb":"code","44fabead":"code","62d7c038":"code","008ceb6c":"code","7b40993d":"code","c30f179a":"code","5ca7508e":"code","7f57f8d1":"code","153f03db":"code","92f44f0f":"code","d8389f89":"code","e10bb8b8":"code","0218a74a":"code","0f3c66d4":"code","65e45da8":"code","fb7c150b":"code","99960994":"code","c9467e89":"code","35d14385":"code","e1487b48":"code","aa8af7e3":"code","cca1e3fe":"code","93479ae3":"code","11914039":"code","4e1f1840":"code","6a94008f":"markdown","c4643b16":"markdown","fe636af6":"markdown","82c407ca":"markdown","b37d07e3":"markdown","b22f54f5":"markdown","f4ebcd43":"markdown","58f05d5f":"markdown","75a5c7e8":"markdown","a66e60df":"markdown","49c8334b":"markdown","dcbf209b":"markdown","d3419fb1":"markdown","a22e4cc2":"markdown","ad88b189":"markdown","4c4a87dc":"markdown","10d33e81":"markdown","ed97bd69":"markdown","36eb1262":"markdown","dc3f584d":"markdown","e98b9ae4":"markdown","1f18d3a2":"markdown","296cbd7d":"markdown","95beb468":"markdown","bc6d6e3e":"markdown"},"source":{"a9e6c4ac":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\nimport math\nfrom functools import partial\nimport multiprocessing\nfrom time import sleep\nimport warnings","e0d4f911":"!pip install datatable > \/dev\/null\nimport datatable as dt","7f6de6d6":"%%time\nchess_dt = dt.fread('..\/input\/online-chess-games\/lichess-08-2014.csv')\nchess_df = chess_dt.to_pandas()\nchess_df = chess_df.drop(['C0'], axis=1)\ndel chess_dt","62aecf20":"chess_df.head()","3786ee5b":"def general_eda(label, print_now=False):\n    dist_list = chess_df.groupby(label).count().iloc[:, 1]\n    if print_now:\n        print(dist_list)\n        \n    plt.figure(figsize=(10, 8))\n    dist_list.plot.bar(rot=0)\n    plt.xlabel(label, fontsize=16)\n    plt.title(\"Distribution of Different %ss\" % label, fontsize=20)\n    plt.show()","53280586":"general_eda('Mode')","ad67ae37":"general_eda('Result')","fc851171":"general_eda('Termination Type', print_now=True)","762cbae9":"avg_rat = chess_df['Average Rating']\nprint(\"Mean of Average Ratings: %.3f\" % np.mean(avg_rat))\nprint(\"Median of Average Ratings: %.3f\" % np.median(avg_rat))\nprint(\"Standard Deviation of Average Ratings: %.3f\" % np.std(avg_rat))\nintv1 = np.mean(avg_rat)-2*np.std(avg_rat)\nintv2 = np.mean(avg_rat)+2*np.std(avg_rat)\nprint(\"95%c confidence interval: %.3f to %.3f\" % ('%', intv1, intv2))\nquant1 = np.quantile(avg_rat, 0.025)\nquant2 = np.quantile(avg_rat, 0.975)\nprint(\"95%c of data is between %.3f and %.3f\" % ('%', quant1, quant2))\nprint(\"Skew of the distribution is %.3f\" % (stats.skew(avg_rat)))\n\nplt.figure(figsize=(10, 8))\nsns.distplot(avg_rat, kde_kws={'linewidth': 3})\nplt.axvline(x=quant1, linestyle='--', markersize=12)\nplt.axvline(x=quant2, linestyle='--', markersize=12)\nplt.xlabel(\"Average Rating\", fontsize=16)\nplt.ylabel(\"Distribution\", fontsize=16)\nplt.title(\"Distribution of Average Ratings\", fontsize=20)\nplt.show()","60d61e88":"print(\"Rating below 1250 (Beginner): %d\" % (np.count_nonzero(avg_rat < 1250)))\nprint(\"Rating 1250 - 1750 (Intermediate): %d\" % (np.count_nonzero(avg_rat < 1750) - np.count_nonzero(avg_rat < 1250)))\nprint(\"Rating 1750 - 2250 (Advanced): %d\" % (np.count_nonzero(avg_rat < 2250) - np.count_nonzero(avg_rat < 1750)))\nprint(\"Rating above 2250 (Master): %d\" % (np.count_nonzero(avg_rat >= 2250)))","4f7081cf":"rating_diff = chess_df['Rating Difference']\nprint(\"Mean of Average Ratings: %.3f\" % np.mean(rating_diff))\nprint(\"Median of Average Ratings: %.3f\" % np.median(rating_diff))\nprint(\"Standard Deviation of Average Ratings: %.3f\" % np.std(rating_diff))\nintv1 = np.mean(rating_diff)-2*np.std(rating_diff)\nintv2 = np.mean(rating_diff)+2*np.std(rating_diff)\nprint(\"95%c confidence interval: %.3f to %.3f\" % ('%', intv1, intv2))\nquant1 = np.quantile(rating_diff, 0.025)\nquant2 = np.quantile(rating_diff, 0.975)\nprint(\"95%c of data is between %.3f and %.3f\" % ('%', quant1, quant2))\nprint(\"Skew of the distribution is %.3f\" % (stats.skew(rating_diff)))\nprint(\"Kurtosis of the distribution is %.3f\" % (stats.kurtosis(rating_diff)))\nprint(\"Exccess kurtosis of the distribution is %.3f\" % (stats.kurtosis(rating_diff)-3))\n\nplt.figure(figsize=(10, 8))\nsns.distplot(rating_diff, kde_kws={'linewidth': 3})\nplt.axvline(x=quant1, linestyle='--', markersize=12)\nplt.axvline(x=quant2, linestyle='--', markersize=12)\nplt.xlabel(\"Rating Difference\", fontsize=16)\nplt.ylabel(\"Distribution\", fontsize=16)\nplt.title(\"Distribution of Rating Difference\", fontsize=20)\nplt.show()","b4bf5d9c":"splits = multiprocessing.cpu_count()\n\ndef multi_split(chess_df, splits):\n    if __name__ == \"__main__\":\n        length = len(chess_df)\n        steps = math.ceil(length\/splits)\n        input_games = []\n        for x in range(splits):\n            input_games.append(chess_df[steps*x:steps*(x+1)].reset_index())\n    \n    return input_games\n\ninput_games = multi_split(chess_df, splits)","cc569fa9":"print(\"First %d arrays have dimensions %d by %d\" % (splits-1, len(input_games), len(input_games[0])))\nprint(\"Last array has dimension %d by %d\" % (len(input_games), len(input_games[splits-1])))","09d1e8ef":"length_arr = []\n\nfor game in chess_df['PGN']:\n    curr_length = 1\n    spaces = 0\n    for index in range(len(game)):\n        if game[index] == \" \":\n            spaces += 1\n            if spaces == 3:\n                curr_length += 1\n                spaces = 0\n        index += 1\n    length_arr.append(curr_length)\n    \nchess_df['Moves'] = length_arr","af7a88c3":"%%time\nlength_arr = []\n\nfor game in chess_df['PGN']:\n    curr_length = 1\n    spaces = 0\n    for index in range(len(game)):\n        if game[index] == \" \":\n            spaces += 1\n            if spaces == 3:\n                curr_length += 1\n                spaces = 0\n        index += 1\n    length_arr.append(curr_length)\n    \nchess_df['Moves'] = length_arr","0ed42f8a":"# Recreate input_games\ndel input_games\ninput_games = multi_split(chess_df, splits)","5b38e9b0":"def visualize_length(all_lengths, max_length):\n    print(\"Mean Length: %.3f\" % np.mean(all_lengths))\n    print(\"Median Length: %.3f\" % np.median(all_lengths))\n    print(\"Standard Deviation: %.3f\" % np.std(all_lengths))\n    print(\"Longest Game in Dataset: %d moves\" % max(all_lengths))\n    plt.figure(figsize=(12, 8))\n    bins = np.arange(0, max_length, 1)\n    plt.title(\"Distribution of Chess Game Length\", fontsize=20)\n    plt.xlabel(\"Number of Moves\", fontsize=16)\n    plt.ylabel(\"Percent Distribution\", fontsize=16)\n    sns.distplot(all_lengths, bins, kde_kws = {'linewidth': 3})\n    plt.xlim(0, max_length)\n    print(\"Number of Games that are 1 moves long: %.d\\nNumber of Games that are 2 moves long: %.d\" % (all_lengths.count(1), all_lengths.count(2)))\n    \n    return np.mean(all_lengths)","d18500a2":"max_moves = 75\nmean_length = visualize_length(chess_df['Moves'].tolist(), max_moves)","0f16471a":"def termination_game_length(games):\n    length_tf = []\n    length_normal = []\n    for i in range(len(games['PGN'])):\n        curr_length = games['Moves'][i]\n        if games['Termination Type'][i] == 'Time forfeit':\n            length_tf.append(curr_length)\n        else:\n            length_normal.append(curr_length)\n    \n    return length_tf, length_normal\n\n%time termination_length_list = termination_game_length(chess_df)","0ae37e1f":"def termination_visualize_length(termination_length_list, max_length, shade=False):\n    all_lengths = []\n    termination_list = []\n    for length in termination_length_list[0]:\n        termination_list.append(length)\n         \n    normal_list = []\n    for length in termination_length_list[1]:\n        normal_list.append(length)\n            \n    plt.figure(figsize=(12, 8))\n    bins = np.arange(0, max_length, 1)\n    plt.title(\"Distribution of Chess Game Length with Different Terminations\", fontsize=20)\n    plt.xlabel(\"Number of Moves\", fontsize=16)\n    plt.ylabel(\"Percent Distribution\", fontsize=16)\n    if shade:\n        sns.distplot(termination_list, bins, hist=False, kde_kws = {'linewidth': 3, 'shade': True})\n        sns.distplot(normal_list, bins, hist=False, kde_kws = {'linewidth': 3, 'shade': True})\n    else:\n        print(\"Mean Length Time Forfeit: %.3f\" % np.mean(termination_list))\n        print(\"Mean Length Normal: %.3f\" % np.mean(normal_list))\n        print(\"Median Length Time Forfeit: %.3f\" % np.median(termination_list))\n        print(\"Median Length Normal: %.3f\" % np.median(normal_list))\n        sns.distplot(termination_list, bins, kde_kws = {'linewidth': 3})\n        sns.distplot(normal_list, bins, kde_kws = {'linewidth': 3})\n    plt.xlim(0, max_length)\n    plt.legend([\"Time forfeit\", \"Normal\"])","039abe52":"termination_visualize_length(termination_length_list, max_moves)\ntermination_visualize_length(termination_length_list, max_moves, shade=True)","1eb497c5":"def mode_game_length(games, labels_list):\n    mode_dict = {}\n    for label in labels_list:\n        mode_dict[label] = []\n        \n    for i in range(len(games['PGN'])):\n        curr_length = games['Moves'][i]\n        mode_dict[games['Mode'][i]].append(curr_length)\n    \n    return mode_dict\n\nlabels_list = ['Bullet', 'Blitz', 'Classical', 'Correspondence']\nmode_length_list = mode_game_length(chess_df, labels_list)","df39c0ac":"def mode_visualize_length(mode_length_list, max_length, labels_list, shade=False):\n    mode_dict = [[] for i in range(len(labels_list))]\n    r = 0\n    for mode in mode_length_list:\n        for length in mode_length_list[mode]:\n            mode_dict[r].append(length)\n        r += 1\n            \n    plt.figure(figsize=(12, 8))\n    bins = np.arange(0, max_length, 1)\n    plt.title(\"Distribution of Chess Game Length with Different Modes\", fontsize=20)\n    plt.xlabel(\"Number of Moves\", fontsize=16)\n    plt.ylabel(\"Percent Distribution\", fontsize=16)\n    if shade:\n        for mode in mode_dict:\n            sns.distplot(mode, bins, hist=False, kde_kws = {'linewidth': 3, 'shade': True})\n    else:\n        for mode in mode_dict:\n            sns.distplot(mode, bins, kde_kws = {'linewidth': 3})\n        r = 0\n        for label in labels_list:\n            print(\"%s Mean: %.3f\" % (label, np.mean(mode_dict[r])))\n            r += 1\n    plt.legend(labels_list)\n    plt.xlim(0, max_length)","1390131e":"mode_visualize_length(mode_length_list, max_moves, labels_list)\nmode_visualize_length(mode_length_list, max_moves, labels_list, shade=True)","ffd2ef9d":"def rating_game_length(games, rating_range=[750, 1250, 1750, 2250]):\n    rating_dict = {}\n    for rating in rating_range:\n        rating_dict[rating] = []\n        \n    for i in range(len(games['PGN'])):\n        rating_type = -1\n        for j in range(len(rating_range)):\n            if j == 0:\n                continue\n            if games['Average Rating'][i] > rating_range[j]:\n                rating_type = rating_range[j-1]\n                \n        if rating_type == -1:\n            rating_type = 2250\n        \n        curr_length = games['Moves'][i]\n        rating_dict[rating_type].append(curr_length)\n    \n    return rating_dict\n\nlabels_list = ['Bullet', 'Blitz', 'Classical', 'Correspondence']\nrating_length_list = rating_game_length(chess_df)","1fad81bb":"def rating_visualize_length(rating_length_list, max_length, rating_range=[750, 1250, 1750, 2250], shade=False):\n    rating_dict = [[] for i in range(len(rating_range))]\n    r = 0\n    for rating in rating_length_list:\n        for length in rating_length_list[rating]:\n            rating_dict[r].append(length)\n        r += 1\n            \n    plt.figure(figsize=(12, 8))\n    bins = np.arange(0, max_length, 1)\n    plt.title(\"Distribution of Chess Game Length with Different Ratings\", fontsize=20)\n    plt.xlabel(\"Number of Moves\", fontsize=16)\n    plt.ylabel(\"Percent Distribution\", fontsize=16)\n    if shade:\n        for rating in rating_dict:\n            sns.distplot(rating, bins, hist=False, kde_kws = {'linewidth': 3, 'shade': True})\n    else:\n        for rating in rating_dict:\n            sns.distplot(rating, bins, kde_kws = {'linewidth': 3})\n        r = 0\n        for rating in rating_range:\n            print(\"%s+ Mean: %.3f\" % (rating, np.mean(rating_dict[r])))\n            r += 1\n    \n    label_range = []\n    for rating in rating_range:\n        label_range.append(str(rating) + '+')\n    plt.legend(label_range)\n    plt.xlim(0, max_length)","44fabead":"rating_visualize_length(rating_length_list, max_moves)","62d7c038":"rating_visualize_length(rating_length_list, max_moves, shade=True)","008ceb6c":"def total_moves(games):\n    moves_dict = {'P': 0, 'B': 0, 'N': 0, 'R': 0, 'Q': 0, 'K': 0, 'O': 0}\n    pawn = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n    pieces = ['B', 'N', 'R', 'Q', 'K', 'O']\n    for game in games['PGN']:\n        curr_move = False\n        for index in range(len(game)):\n            if game[index] == \" \":\n                curr_move = False\n            elif curr_move:\n                continue\n            elif game[index] in pawn:\n                moves_dict['P'] += 1\n                curr_move = True\n            elif game[index] in pieces:\n                moves_dict[game[index]] += 1\n                curr_move = True\n    \n    return moves_dict\n\nwith multiprocessing.Pool(processes=splits) as pool:\n    %time moves_list = pool.map(total_moves, input_games)","7b40993d":"def visualize_moves(moves_list, vis_percentage=True, average=False):\n    # Preprocessing\n    labels = ['Pawn', 'Bishop', 'Knight', 'Rook', 'Queen', 'King', 'Castling']\n    M_dict = {}\n    for label in moves_list[0]:\n        M_dict[label] = 0\n\n    for moves_dict in moves_list:\n        for piece in moves_dict:\n            M_dict[piece] += moves_dict[piece]\n\n    summ = 0\n    for piece in M_dict:\n        summ += M_dict[piece]\n\n    M_list = []\n    for piece in M_dict:            \n        if vis_percentage:\n            M_list.append(M_dict[piece]\/summ*100)\n        else:\n            avg = 1\n            if average:\n                avg = len(chess_df)\n            M_list.append(M_dict[piece]\/avg)\n\n    # Plotting\n    label_pos = np.arange(len(labels))\n    plt.figure(figsize=(10, 8))\n    plt.title(\"How many times does each chess piece move?\", fontsize=20)\n    bar_width = 0.35\n    plt.bar(label_pos, M_list, bar_width)\n    plt.xticks(label_pos, labels, fontsize=16)\n    if vis_percentage:\n        plt.ylabel('Percentage', fontsize=16)\n    elif average:\n        plt.ylabel(\"Average Number of Moves Per Chess Game\", fontsize=16)\n        plt.yticks(np.arange(0, 21, 1))\n    else:\n        plt.ylabel('Total Number of Moves', fontsize=16)\n    plt.show()","c30f179a":"visualize_moves(moves_list)\nvisualize_moves(moves_list, vis_percentage=False, average=True)\nvisualize_moves(moves_list, vis_percentage=False, average=False)","5ca7508e":"def prob_over_time(games, max_moves):\n    pawn = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n    pieces = ['B', 'N', 'R', 'Q', 'K', 'O']    \n    time_dict = {}\n    for i in range(1, max_moves+1):\n        time_dict[i] = {'P': 0, 'B': 0, 'N': 0, 'R': 0, 'Q': 0, 'K': 0, 'O': 0}\n    \n    for game in games['PGN']:\n        curr_move = False\n        curr_length = 1\n        spaces = 0\n        for index in range(len(game)):\n            if game[index] == \" \":\n                spaces += 1\n                if spaces == 3:\n                    if curr_length < max_moves:\n                        curr_length += 1\n                    spaces = 0\n                curr_move = False\n            elif curr_move:\n                continue\n            elif game[index] in pawn:\n                time_dict[curr_length]['P'] += 1\n                curr_move = True\n            elif game[index] in pieces:\n                time_dict[curr_length][game[index]] += 1\n                curr_move = True\n\n    return time_dict\n\nwith multiprocessing.Pool(processes=splits) as pool:\n    %time time_list = pool.map(partial(prob_over_time, max_moves=max_moves), input_games)","7f57f8d1":"def visualize_prob_over_time(time_list, max_moves):\n    # Preprocessing\n    labels = ['Pawn', 'Bishop', 'Knight', 'Rook', 'Queen', 'King', 'Castling']\n    T_dict = [[0 for j in range(max_moves)] for i in range(len(labels))]\n    \n    for time_dict in time_list:\n        for time in time_dict:\n            r = 0\n            for piece in time_dict[time]:\n                T_dict[r][time-1] += time_dict[time][piece]\n                r += 1\n                \n    for i in range(max_moves):\n        summ = 0\n        for t in range(len(labels)):\n            summ += T_dict[t][i]\n        \n        for t in range(len(labels)):\n            T_dict[t][i] \/= summ\/100\n    \n    plt.figure(figsize=(12, 8))\n    \n    for i in range(len(labels)):\n        plt.plot(np.arange(1, max_moves+1, 1), T_dict[i], linewidth=2)\n    \n    plt.legend(labels)\n    plt.xlim(0, max_moves+1)\n    plt.ylim(0, 100)\n    plt.title(\"Probability a Chess Piece Moves on a Given Move\", fontsize=20)\n    plt.xlabel(\"Number of Moves\", fontsize=16)\n    plt.ylabel(\"Percentage\", fontsize=16)\n    \nvisualize_prob_over_time(time_list, max_moves)","153f03db":"def rating_prob_over_time(games, max_moves, rating_range):\n    pawn = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n    pieces = ['B', 'N', 'R', 'Q', 'K', 'O']    \n    \n    rating_dict = {}\n    for rat in range(len(rating_range)+1):\n        time_dict = {}\n        for i in range(1, max_moves+1):\n            time_dict[i] = {'P': 0, 'B': 0, 'N': 0, 'R': 0, 'Q': 0, 'K': 0, 'O': 0}\n        rating_dict[rat] = time_dict\n    \n    r = 0\n    for game in games['PGN']:\n        curr_move = False\n        curr_length = 1\n        spaces = 0\n        \n        curr_avg_rating = games['Average Rating'][r]\n        rating_index = 0\n        for rat in rating_range:\n            if curr_avg_rating < rat:\n                break\n            else:\n                rating_index += 1\n                \n        for index in range(len(game)):\n            if game[index] == \" \":\n                spaces += 1\n                if spaces == 3:\n                    if curr_length < max_moves:\n                        curr_length += 1\n                    spaces = 0\n                curr_move = False\n            elif curr_move:\n                continue\n            elif game[index] in pawn:\n                rating_dict[rating_index][curr_length]['P'] += 1\n                curr_move = True\n            elif game[index] in pieces:\n                rating_dict[rating_index][curr_length][game[index]] += 1\n                curr_move = True\n        r += 1\n\n    return rating_dict\n\nwith multiprocessing.Pool(processes=splits) as pool:\n    rating_range = [1250, 1750, 2250]\n    %time rating_time_list = pool.map(partial(rating_prob_over_time, max_moves=max_moves, rating_range=rating_range), input_games)","92f44f0f":"def visualize_rating_prob_over_time(rating_time_list, max_moves, rating_range, players=False):\n    plt.rcParams.update({'figure.max_open_warning': 0})\n    # Preprocessing\n    labels = ['Pawn', 'Bishop', 'Knight', 'Rook', 'Queen', 'King', 'Castling']\n    R_dict = [[[0 for j in range(max_moves)] for i in range(len(labels))] for k in range(len(rating_range)+1)]\n    \n    for rating_dict in rating_time_list:\n        for rat in rating_dict:\n            for time in rating_dict[rat]:\n                r = 0\n                for piece in rating_dict[rat][time]:\n                    R_dict[rat][r][time-1] += rating_dict[rat][time][piece]\n                    r += 1\n    \n    for rat in range(len(R_dict)):            \n        for i in range(max_moves):\n            summ = 0\n            for t in range(len(labels)):\n                summ += R_dict[rat][t][i]\n\n            for t in range(len(labels)):\n                if summ == 0:\n                    summ = 1\n                R_dict[rat][t][i] \/= summ\/100\n    \n    rating_labels = ['Beginner', 'Intermediate', 'Advanced', 'Master']\n    \n    if not players:\n        fig, ax = plt.subplots(int((len(rating_range)+1)\/2), 2, figsize=(20, 15))\n        for j in range(len(rating_range)+1):\n            ind1 = int(j\/2)\n            ind2 = j%2\n            for i in range(len(labels)):\n                ax[ind1][ind2].plot(np.arange(1, max_moves+1, 1), R_dict[j][i], linewidth=2)\n            ax[ind1][ind2].legend(labels)\n            ax[ind1][ind2].set_xlim(0, max_moves+1)\n            ax[ind1][ind2].set_ylim(0, 100)\n            ax[ind1][ind2].set_title(\"Chess Piece Movement for %s Players\" % (rating_labels[j]), fontsize=20)\n            ax[ind1][ind2].set_xlabel(\"Number of Moves\", fontsize=16)\n            ax[ind1][ind2].set_ylabel(\"Percentage\", fontsize=16)\n    else: \n        fig, ax = plt.subplots(len(labels), 1, figsize=(10, 8*len(labels)))\n        for i in range(len(labels)):\n            for j in range(len(rating_range)+1):\n                plt.figure(figsize=(12, 8))\n                ax[i].plot(np.arange(1, max_moves+1, 1), R_dict[j][i], linewidth=2)\n                ax[i].set_title(\"%s Movement Comparison\" % labels[i], fontsize=20)\n                ax[i].set_xlim(0, max_moves+1)\n                ax[i].set_ylim(bottom=0)\n                ax[i].autoscale(enable=True)\n                ax[i].set_xlabel(\"Number of Moves\", fontsize=16)\n                ax[i].set_ylabel(\"Percentage\", fontsize=16)\n                ax[i].legend(rating_labels)\n                \n    plt.show()","d8389f89":"visualize_rating_prob_over_time(rating_time_list, max_moves, rating_range)","e10bb8b8":"visualize_rating_prob_over_time(rating_time_list, max_moves, rating_range, players=True)","0218a74a":"def piece_prob(games, castling=False):\n    prob_dict = {}\n    pieces = ['P', 'B', 'N', 'R', 'Q', 'K']\n    pawn = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\n    #chessboard representation in dict form, must recreate each dict b\/c of how python dicts work\n    for p in pieces:\n        chess_dict = {}\n        for horizontal in pawn:\n            for vertical in range(1, 9):\n                chess_dict[horizontal+str(vertical)] = 0\n        prob_dict[p] = chess_dict\n\n    for game in games['PGN']:\n        curr_move = False\n        s = \"\"\n        piece_id = \"\"\n        for index in range(len(game)):\n            if game[index] == \" \" and curr_move:\n                if piece_id == 'O':\n                    white = 1-white\n                    continue\n                    \n                curr_move = False\n                if len(s) >= 4:\n                    # Determine whether move is a promotion, e.g. e8=Q\n                    s1 = s[0:2]\n                    \n                    # Some anomalies, like exd1=Q+ cannot be solve without manually going through the string and trying possibilities\n                    try:\n                        prob_dict[piece_id][s1] += 0\n                    except:\n                        s1 = s[1:3]\n                elif len(s) == 3:\n                    # Determine whether is a move that isn't just a piece to a square, e.g. Ngf6 (which is read as gf6) or exf6 (which is read as ef6)\n                    s1 = s[len(s)-2:len(s)]\n                else:\n                    s1 = s\n                \n                # Ensure the string is made correctly\n                try:\n                    prob_dict[piece_id][s1] += 1\n                except:\n                    print(game)\n                    raise Exception(\"There is an error in the code at this game.\")\n                \n                # Reset string\n                s = \"\" \n            elif curr_move:\n                if game[index] != 'x' and game[index] != '+' and game[index] != '#' and game[index] != '!' and game[index] != '?':\n                    # Captures, checks, checkmates, and other notation do not affect where a piece moves\n                    s += game[index]\n            elif game[index] in pawn:\n                piece_id = 'P' \n                curr_move = True\n                # If the move is a pawn, then the current character is actually part of its movement\n                s += game[index]\n            elif game[index] in pieces:\n                piece_id = game[index]\n                curr_move = True\n            elif game[index] == 'O' and castling:\n                try:\n                    if game[index+1] == '-':\n                        if game[index+3] == '-':\n                            # Queenside castling\n                            if game[index-2] == '.':\n                                prob_dict['K']['c1'] += 1\n                                prob_dict['R']['d1'] += 1\n                            else:\n                                prob_dict['K']['c8'] += 1\n                                prob_dict['R']['d8'] += 1\n                        else:\n                            # Kingside castling\n                            if game[index-2] == '.':\n                                prob_dict['K']['g1'] += 1\n                                prob_dict['R']['f1'] += 1\n                            else:\n                                prob_dict['K']['g8'] += 1\n                                prob_dict['R']['f8'] += 1\n                except:\n                    pass\n\n    return prob_dict\n\nwith multiprocessing.Pool(processes=splits) as pool:\n    %time prob_list = pool.map(partial(piece_prob, castling=False), input_games)","0f3c66d4":"def visualize_piece_prob(prob_list, visualize_list_raw=['Pawn', 'Bishop', 'Knight', 'Rook', 'Queen', 'King'], vis_percentage=True, seaborn=True):\n    \"\"\"\n    Driver function for visualizing the probability that each chess piece lands on a certain square\n    Utilizes seaborn heatmap, if set to false, will use matplotlib heatmap\n    \"\"\"\n    P_dict = {}\n    pieces = ['P', 'B', 'N', 'R', 'Q', 'K']\n    pawn = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n    for p in pieces:\n        chess_dict = {}\n        for horizontal in pawn:\n            for vertical in range(1, 9):\n                chess_dict[horizontal+str(vertical)] = 0\n        P_dict[p] = chess_dict\n\n    for prob_dict in prob_list:\n        for piece in prob_dict:\n            for key in prob_dict[piece]:\n                P_dict[piece][key] += prob_dict[piece][key]\n    \n    visualize_list = []\n    for label in visualize_list_raw:\n        if label == 'Knight':\n            visualize_list.append('N')\n        else:\n            visualize_list.append(label[0])\n    \n    if seaborn:\n        fig, ax = plt.subplots(len(visualize_list), figsize=(12, len(visualize_list)*8))\n        r = 0\n        for piece in P_dict:\n            if piece not in visualize_list:\n                continue\n\n            val_list = list(P_dict[piece].values())\n            summ = sum(val_list)\n            plot_list = []\n            for i in np.arange(7, -1, -1):\n                tmp_list = []\n                for j in range(8):\n                    if vis_percentage:\n                        tmp_list.append(val_list[i+8*j]\/summ)\n                    else:\n                        tmp_list.append(val_list[i+8*j])\n                plot_list.append(tmp_list)\n\n            heatmap = sns.heatmap(plot_list, cmap='YlOrRd', annot=True, fmt=\".3%\" if vis_percentage else \"d\", ax=ax[r], \n                                  cbar_kws={'label': 'Proportion (out of 1)' if vis_percentage else 'Raw Count'})\n            ax[r].set_title(\"%s of %s Moving to Square on Chessboard\" % ('Probability' if vis_percentage else 'Raw Count', visualize_list_raw[r]), fontsize=16)\n            ax[r].set_xticklabels(pawn, fontsize=14)\n            ax[r].set_yticklabels(np.arange(8, 0, -1), fontsize=14)\n            r += 1\n\n        fig.tight_layout()\n        plt.subplots_adjust(hspace=0.2)\n        plt.show()\n    else:    \n        for piece in P_dict:\n            if piece not in visualize_list:\n                continue\n\n            val_list = list(P_dict[piece].values())\n            summ = sum(val_list)\n            plot_list = []\n            for i in np.arange(7, -1, -1):\n                tmp_list = []\n                for j in range(8):\n                    if vis_percentage:\n                        tmp_list.append(round(val_list[i+8*j]\/summ*100, 3))\n                    else:\n                        tmp_list.append(val_list[i+8*j])\n                plot_list.append(tmp_list)\n\n            plt.figure(figsize=(12, 8))\n            plt.imshow(plot_list, cmap='YlOrRd', interpolation='nearest')\n            cbar = plt.colorbar()\n            if vis_percentage:\n                cbar.set_label(\"Probability (Percentage)\", rotation=270, fontsize=16, labelpad=20)\n            else:\n                cbar.set_label(\"Raw Count\", rotation=270, fontsize=16, labelpad=20)\n            for i in range(8):\n                for j in range(8):\n                    tmp_str = str(plot_list[i][j])\n                    if vis_percentage:\n                        tmp_str += \"%\"\n\n                    plt.text(j, i, tmp_str, ha=\"center\", va=\"center\", color=\"black\")\n\n            plt.title(\"%s of %s Moving to Square on Chessboard\" % ('Probability' if vis_percentage else 'Raw Count', piece), fontsize=16)\n            plt.xticks(np.arange(0, 8), pawn, fontsize=14)\n            plt.yticks(np.arange(0, 8), np.arange(8, 0, -1), fontsize=14)","65e45da8":"visualize_piece_prob(prob_list)","fb7c150b":"visualize_piece_prob(prob_list, vis_percentage=False)","99960994":"visualize_piece_prob(prob_list, visualize_list_raw=['Pawn'], seaborn=False)","c9467e89":"with multiprocessing.Pool(processes=splits) as pool:\n    %time prob_castling_list = pool.map(partial(piece_prob, castling=True), input_games)\n    \nvisualize_piece_prob(prob_castling_list, visualize_list_raw=['King', 'Rook'])","35d14385":"def piece_color_prob(games, castling=False):\n    prob_dict = {}\n    pieces = ['P', 'B', 'N', 'R', 'Q', 'K']\n    pawn = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\n    #chessboard representation in dict form, must recreate each dict b\/c of how python dicts work\n    colors = ['White', 'Black']\n    \n    for color in colors:\n        prob_color_dict = {}\n        for p in pieces:\n            chess_dict = {}\n            for horizontal in pawn:\n                for vertical in range(1, 9):\n                    chess_dict[horizontal+str(vertical)] = 0\n            prob_color_dict[p] = chess_dict\n        prob_dict[color] = prob_color_dict\n\n    for game in games['PGN']:\n        curr_move = False\n        s = \"\"\n        piece_id = \"\"\n        white = True\n        for index in range(len(game)):\n            if game[index] == \" \" and curr_move:\n                if piece_id == 'O':\n                    white = 1-white\n                    continue\n                    \n                curr_move = False\n                if len(s) >= 4:\n                    # Determine whether move is a promotion, e.g. e8=Q\n                    s1 = s[0:2]\n                    \n                    # Some anomalies, like exd1=Q+ cannot be solve without manually going through the string and trying possibilities\n                    try:\n                        if white:\n                            prob_dict['White'][piece_id][s1] += 0\n                        else:\n                            prob_dict['Black'][piece_id][s1] += 0\n                    except:\n                        s1 = s[1:3]\n                elif len(s) == 3:\n                    # Determine whether is a move that isn't just a piece to a square, e.g. Ngf6 (which is read as gf6) or exf6 (which is read as ef6)\n                    s1 = s[len(s)-2:len(s)]\n                else:\n                    s1 = s\n                \n                # Ensure the string is made correctly\n                try:\n                    if white:\n                        prob_dict['White'][piece_id][s1] += 1\n                    else:\n                        prob_dict['Black'][piece_id][s1] += 1\n                except:\n                    print(game)\n                    raise Exception(\"There is an error in the code at this game.\")\n                \n                # Reset string\n                s = \"\" \n                white = 1-white\n            elif curr_move:\n                if game[index] != 'x' and game[index] != '+' and game[index] != '#' and game[index] != '!' and game[index] != '?':\n                    # Captures, checks, checkmates, and other notation do not affect where a piece moves\n                    s += game[index]\n            elif game[index] in pawn:\n                piece_id = 'P' \n                curr_move = True\n                # If the move is a pawn, then the current character is actually part of its movement\n                s += game[index]\n            elif game[index] in pieces:\n                piece_id = game[index]\n                curr_move = True\n            elif game[index] == 'O':\n                curr_move = True\n                piece_id = 'O'\n                \n                if castling:\n                    try:\n                        if game[index+1] == '-':\n                            if game[index+3] == '-':\n                                # Queenside castling\n                                if game[index-2] == '.':\n                                    prob_dict['White']['K']['c1'] += 1\n                                    prob_dict['White']['R']['d1'] += 1\n                                else:\n                                    prob_dict['Black']['K']['c8'] += 1\n                                    prob_dict['Black']['R']['d8'] += 1\n                            else:\n                                # Kingside castling\n                                if game[index-2] == '.':\n                                    prob_dict['Black']['K']['g1'] += 1\n                                    prob_dict['Black']['R']['f1'] += 1\n                                else:\n                                    prob_dict['Black']['K']['g8'] += 1\n                                    prob_dict['Black']['R']['f8'] += 1\n                    except:\n                        pass\n\n    return prob_dict\n\nwith multiprocessing.Pool(processes=splits) as pool:\n    %time prob_color_list = pool.map(partial(piece_color_prob, castling=False), input_games)","e1487b48":"def visualize_piece_color_prob(prob_color_list, colors=['White', 'Black'], visualize_list_raw=['Pawn', 'Bishop', 'Knight', 'Rook', 'Queen', 'King'], \n                               side_by_side=False, vis_percentage=True):\n    \"\"\"\n    Driver function for visualizing the probability that each chess piece lands on a certain square\n    Utilizes seaborn heatmap, if set to false, will use matplotlib heatmap\n    \"\"\"\n    pieces = ['P', 'B', 'N', 'R', 'Q', 'K']\n    pawn = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n    if side_by_side:\n        fig, ax = plt.subplots(len(visualize_list_raw), len(colors), figsize=(12*len(colors), 8*len(visualize_list_raw)))\n        \n    l = 0\n    for color in colors:\n        P_dict = {}\n        for p in pieces:\n            chess_dict = {}\n            for horizontal in pawn:\n                for vertical in range(1, 9):\n                    chess_dict[horizontal+str(vertical)] = 0\n            P_dict[p] = chess_dict\n\n        for prob_dict in prob_color_list:\n            for piece in prob_dict[color]:\n                for key in prob_dict[color][piece]:\n                    P_dict[piece][key] += prob_dict[color][piece][key]\n\n        visualize_list = []\n        for label in visualize_list_raw:\n            if label == 'Knight':\n                visualize_list.append('N')\n            else:\n                visualize_list.append(label[0])\n        \n        if not side_by_side:\n            fig, ax = plt.subplots(len(visualize_list), figsize=(12, len(visualize_list)*8))\n            \n        r = 0\n        for piece in P_dict:\n            if piece not in visualize_list:\n                continue\n\n            val_list = list(P_dict[piece].values())\n            summ = sum(val_list)\n            plot_list = []\n            for i in np.arange(7, -1, -1):\n                tmp_list = []\n                for j in range(8):\n                    if vis_percentage:\n                        tmp_list.append(val_list[i+8*j]\/summ)\n                    else:\n                        tmp_list.append(val_list[i+8*j])\n                plot_list.append(tmp_list)\n            \n            curr_ax = ax[r][l] if side_by_side else ax[r]\n            heatmap = sns.heatmap(plot_list, cmap='YlOrRd', annot=True, fmt=\".3%\" if vis_percentage else \"d\", ax=curr_ax, \n                                  cbar_kws={'label': 'Proportion (out of 1)' if vis_percentage else 'Raw Count'})\n            curr_ax.set_title(\"%s of %s Moving to Square on Chessboard, Only %s\" % ('Probability' if vis_percentage else 'Raw Count', visualize_list_raw[r], color), fontsize=16)\n            curr_ax.set_xticklabels(pawn, fontsize=14)\n            curr_ax.set_yticklabels(np.arange(8, 0, -1), fontsize=14)\n            r += 1\n        l += 1\n        \n    fig.tight_layout()\n    plt.subplots_adjust(hspace=0.2)\n    plt.show()","aa8af7e3":"visualize_piece_color_prob(prob_color_list, colors=['White'])","cca1e3fe":"visualize_piece_color_prob(prob_color_list, colors=['Black'])","93479ae3":"visualize_piece_color_prob(prob_color_list, side_by_side=True)","11914039":"def piece_rating_prob(games, rating_range=[750, 1250, 1750, 2250], castling=False):\n    prob_dict = {}\n    pieces = ['P', 'B', 'N', 'R', 'Q', 'K']\n    pawn = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\n    #chessboard representation in dict form, must recreate each dict b\/c of how python dicts work\n    for rating in rating_range:\n        rating_prob_dict = {}\n        for p in pieces:\n            chess_dict = {}\n            for horizontal in pawn:\n                for vertical in range(1, 9):\n                    chess_dict[horizontal+str(vertical)] = 0\n            rating_prob_dict[p] = chess_dict\n        prob_dict[rating] = rating_prob_dict\n\n    r = 0\n    for game in games['PGN']:\n        rating_type = -1\n        for i in range(len(rating_range)):\n            if i == 0:\n                continue\n            try:\n                if games['Average Rating'][r] < rating_range[i]:\n                    rating_type = rating_range[i-1]\n                    break\n            except:\n                print(r)\n                raise Exception(\"Error.\")\n        if rating_type == -1:\n            rating_type = 2250\n        curr_move = False\n        s = \"\"\n        piece_id = \"\"\n        for index in range(len(game)):\n            if game[index] == \" \" and curr_move:\n                curr_move = False\n                if len(s) >= 4:\n                    # Determine whether move is a promotion, e.g. e8=Q\n                    s1 = s[0:2]\n                    \n                    # Some anomalies, like exd1=Q+ cannot be solve without manually going through the string and trying possibilities\n                    try:\n                        prob_dict[1250][piece_id][s1] += 0\n                    except:\n                        s1 = s[1:3]\n                elif len(s) == 3:\n                    # Determine whether is a move that isn't just a piece to a square, e.g. Ngf6 (which is read as gf6) or exf6 (which is read as ef6)\n                    s1 = s[len(s)-2:len(s)]\n                else:\n                    s1 = s\n                \n                # Ensure the string is made correctly\n                try:\n                    prob_dict[rating_type][piece_id][s1] += 1\n                except:\n                    print(game)\n                    raise Exception(\"There is an error in the code at this game.\")\n                \n                # Reset string\n                s = \"\" \n            elif curr_move:\n                if game[index] != 'x' and game[index] != '+' and game[index] != '#' and game[index] != '!' and game[index] != '?':\n                    # Captures, checks, checkmates, and other notation do not affect where a piece moves\n                    s += game[index]\n            elif game[index] in pawn:\n                piece_id = 'P' \n                curr_move = True\n                # If the move is a pawn, then the current character is actually part of its movement\n                s += game[index]\n            elif game[index] in pieces:\n                piece_id = game[index]\n                curr_move = True\n            elif game[index] == 'O' and castling:\n                try:\n                    if game[index+1] == '-':\n                        if game[index+3] == '-':\n                            # Queenside castling\n                            if game[index-2] == '.':\n                                prob_dict['K']['c1'] += 1\n                                prob_dict['R']['d1'] += 1\n                            else:\n                                prob_dict['K']['c8'] += 1\n                                prob_dict['R']['d8'] += 1\n                        else:\n                            # Kingside castling\n                            if game[index-2] == '.':\n                                prob_dict['K']['g1'] += 1\n                                prob_dict['R']['f1'] += 1\n                            else:\n                                prob_dict['K']['g8'] += 1\n                                prob_dict['R']['f8'] += 1\n                except:\n                    pass\n        r += 1\n\n    return prob_dict\n\nwith multiprocessing.Pool(processes=splits) as pool:\n    %time prob_rating_list = pool.map(partial(piece_rating_prob, castling=False), input_games)","4e1f1840":"def visualize_piece_rating_prob(prob_rating_list, rating_range=[750, 1250, 1750, 2250], visualize_list_raw=['Pawn', 'Bishop', 'Knight', 'Rook', 'Queen', 'King'], vis_percentage=True):\n    \"\"\"\n    Driver function for visualizing the probability that each chess piece lands on a certain square\n    Utilizes seaborn heatmap, if set to false, will use matplotlib heatmap\n    \"\"\"\n    pieces = ['P', 'B', 'N', 'R', 'Q', 'K']\n    pawn = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n    \n    fig, ax = plt.subplots(len(visualize_list_raw)*2, int(len(rating_range)\/2), figsize=(6*len(rating_range), 15*len(visualize_list_raw)))\n    k = 0\n    for rating in rating_range:\n        P_dict = {}\n        for p in pieces:\n            chess_dict = {}\n            for horizontal in pawn:\n                for vertical in range(1, 9):\n                    chess_dict[horizontal+str(vertical)] = 0\n            P_dict[p] = chess_dict\n\n        for prob_dict in prob_rating_list:\n            for piece in prob_dict[rating]:\n                for key in prob_dict[rating][piece]:\n                    P_dict[piece][key] += prob_dict[rating][piece][key]\n\n        visualize_list = []\n        for label in visualize_list_raw:\n            if label == 'Knight':\n                visualize_list.append('N')\n            else:\n                visualize_list.append(label[0])\n\n        r = 0\n        for piece in P_dict:\n            if piece not in visualize_list:\n                continue\n\n            val_list = list(P_dict[piece].values())\n            summ = sum(val_list)\n            plot_list = []\n            for i in np.arange(7, -1, -1):\n                tmp_list = []\n                for j in range(8):\n                    if vis_percentage:\n                        tmp_list.append(val_list[i+8*j]\/summ)\n                    else:\n                        tmp_list.append(val_list[i+8*j])\n                plot_list.append(tmp_list)\n\n            heatmap = sns.heatmap(plot_list, cmap='YlOrRd', annot=True, fmt=\".3%\" if vis_percentage else \"d\", ax=ax[r*2+int(k\/2)][k%2], \n                                  cbar_kws={'label': 'Proportion (out of 1)' if vis_percentage else 'Raw Count'})\n            ax[r*2+int(k\/2)][k%2].set_title(\"%s of %s Moving to Square on Chessboard, Min Rating: %d\" % ('Probability' if vis_percentage else 'Raw Count', visualize_list_raw[r], rating), fontsize=16)\n            ax[r*2+int(k\/2)][k%2].set_xticklabels(pawn, fontsize=14)\n            ax[r*2+int(k\/2)][k%2].set_yticklabels(np.arange(8, 0, -1), fontsize=14)\n            r += 1\n        \n        k += 1\n    fig.tight_layout()\n    plt.subplots_adjust(hspace=0.2)\n    plt.show()\n        \nvisualize_piece_rating_prob(prob_rating_list)","6a94008f":"<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em\"> Well, it looks like the reason there's an outlier for how many games end within the first 2 moves is because of correspondence! I guess if a person decides not to play in correspondence, they lose on time. Aside from that, the distribution looks pretty normal, with no noticeable outliers.<\/p>","c4643b16":"<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em; padding-top: 15px\"> On average, white wins more, a claim which is backed up by hundreds of years of empirical evidence regarding the immediate advantage the white player has. The amount of draws is quite low, implying that most online chess players will typically play out a drawn position until one of the players blunders.<\/p>","fe636af6":"<h1 class=\"alert alert-block alert-info\" style=\"text-align:center; font-size:24px\" id=\"gamelength\">Distribution of Chess Game Lengths <a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/ironicninja\/visualizing-chess-game-length-and-piece-movement\/notebook#gamelength\">\u00b6<\/a><\/h1>\n\n<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em; padding-top: 15px\"> The average chess game length is said to be around 40, but did you know the longest chess game (over the board) ever was <a href=\"https:\/\/www.chesspower.co.nz\/chess-records.html#:~:text=The%20longest%20chess%20game%20is,game%20lasted%20over%2020%20hours.\"> 269 moves? <\/a> In this section, I delve into the distribution of game lengths in this dataset. <\/p>\n\n<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em; padding-top: 15px\"> Algorithm: I calculate the game length below by keeping track of an length iterator which is increased by 1 for every 3 spaces. For example, a game with standard PGN notation may look like \"1. e4 e5 2. Nf3 Nc6\", and so every three spaces would indicate a new move. <\/p>","82c407ca":"<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em; padding-top: 15px\"> The distribution above is right skewed, as seen by the positive skew given by the analysis. This means that there are, on average, more beginners learning how to play chess as opposed to seasoned experts in this dataset. This skew has most likely expanded since 2014, especially with the recent publicity of chess (e.g., Hikaru, PogChamps). So essentially, if you are new and interested in chess, <span style=\"font-weight: bold; color:green\">don't be afraid to start playing! <\/span> There are plenty of beginners out there all trying to improve their skills through practice, so you won't be alone.<\/p>","b37d07e3":"<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em\"> Splitting the colors up makes it alot easier to see the differences between the play of different colors, and here is where I do the bulk of my analysis: <\/p>\n    \n<ol style=\"font-size:15px; font-family:verdana; line-height: 1.7em\">\n    <ul> Pawn: Most players with the white pieces will move e4 at some point, whereas black plays its counterpart (e5) far less. An plausible explanation for such a trend is that in many openings like the Sicilian and Queen's Gambit Declined (QGD), the black e pawn will perch itself on e6. White, on the other hand, will typically expand their central control with pawn to e4, even in openings like the QGD (e.g., Grunfeld Defense). White also pushes their pawn to the 5th rank far more than black does, implying that white has an immediate <span style=\"font-weight: bold\">space<\/span> advantage. <\/ul>\n    <ul> Bishop: Bishop to c4 is extremely common for white, whereas its counterpart (Bishop to c5) by black is quite uncommon, with Bishop to e7 being the preferred choice for black. This may due to differences in <span style=\"font-weight: bold\">development<\/span>; white wants to put their light-squared bishop in an attacking position, whereas black would like to first play solid and equalize before launching a counter-attack. Black also tends to <span style=\"font-weight: bold\">fianchetto<\/span>\u2014putting their bishop on b7\/g7 to control the long diagonal\u2014more often than white, supporting the counter-attacking nature of Black. Black also plays b6\/g6 more often than white to fianchetto their bishop).<\/ul>\n    <ul> Knight: Black plays its knight to the 7th rank more often than white, which can be explained by the fact white will oftentimes decide to push its d\/e pawn to the 5th rank, gaining space and attacking the knight on the 6th rank, forcing it to retreat. For both sides though, knight moves to the c3\/f3\/c6\/f6 are by far the most common (>50%).<\/ul>\n    <ul> Rook: Surprisingly, rooks played on the queenside are more common than towards the center, with Rb8\/Rc8 being played more often than Rd8\/Re8 for black (and the counterpart squares for white are not far behind). <\/ul>\n    <ul> Queen: Very similar distribution for the white and black player except Qc7 is played a bit more often than Qc2 (Qc7 in the Sicilian is very common). Qd5 and Qa5 are also very common moves for black, perhaps suggesting some type of Scandanavian setup being heavily played in this data.<\/ul>\n    <ul> King: Pretty much the same. Most king moves are towards the center. <\/ul>\n<\/ol>\n    \n<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em\"> Finally, I've included a visualization of different squares pieces move to for differently rated players.<\/p>","b22f54f5":"<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em\"> The mean and median of chess game lengths seem to hover around the mid 30s range, somewhat lower than our expected average of ~40 moves per game. This is probably due to the fact this dataset includes speed chess (games with time control less than 5 minutes), so players may flag more often than a game that is played over the board. One thing I found particularly interesting with this distribution is the number of games that are 1 and 2 moves long. Perhaps this is because some people will leave their games, thus resulting in a time forfeit. <\/p>","f4ebcd43":"<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em; padding-top: 15px\"> Interestingly, on an initial run through the data, I didn't realize that there were any termination types aside from normal termination and time forfeit. That's why an exploratory data analysis is so important! Games that are abandoned or face rules infractions won't be used for future visualizations, but they are still worth mentioning here so bugs don't arise in future code. <\/p>","58f05d5f":"<h1 class=\"alert alert-block alert-info\" style=\"text-align:center; font-size:24px\" id=\"imports\">Reading the Raw Data \/ Essential Imports <a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/ironicninja\/visualizing-chess-game-length-and-piece-movement\/notebook#imports\">\u00b6<\/a><\/h1>","75a5c7e8":"<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em\"> We can see that the previous hypothesis that most of the early forfeits are due to time forfeits (e.g. someone leaves to eat dinner and loses on time). Interestingly though, the average number of moves for a game that ends in time forfeit is larger than a normal game. This might be due to people not resigning in bullet games to flag their opponents (eventually someone loses on time) or selection bias, where people who resign will most likely resign somewhere in the middlegame (move 25 to 35) as opposed to later in the game when all hope is lost.<\/p>","a66e60df":"<h1 class=\"alert alert-block alert-info\" style=\"text-align:center; font-size:24px\" id=\"conclusion\"> Conclusion <a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/ironicninja\/visualizing-chess-game-length-and-piece-movement\/notebook#conclusion\">\u00b6<\/a><\/h1>\n<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em\"> And that's all for this notebook! If you were a beginner and new\/interested in chess, I hope you learned quite alot and will start\/continue playing chess. It is a great game to study and play, so you will definitely not regret investing some time and effort into it. For intermediate\/advanced\/master players, I hope you enjoyed these visualizations and can maybe incorporate some of the concepts you see here into your own games. <\/p>\n    \n<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em\">I am thinking about adding a Part 3, which will use a chess database with only master games, and thus be more educational and informative than this one. If you liked the visualizations here, please give it an <span style=\"color: green; font-weight: bold\">upvote!<\/span> This project has taken me quite a long time and I would really appreciate it. Finally, if you have any comments of encouragement or improvement, or suggestions for other tasks I can do with this data, please let me know!<\/p>","49c8334b":"<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em\"> Once again, there's quite alot to digest, but I will leave the reader with some of my observations: Master players seem to fianchetto and play on the long diagonals a lot more than beginner players; f3 is a popular square for beginners to put their queen (probably after black plays Bg4, Bxf3) whereas e2 is a far more popular square for master players to put their queen; beginner players seem to move Ke2 very often, implying that many don't castle. Still, the central concept of chess is the same: <span style=\"font-weight: bold\">Control the center!<\/span> <\/p>","dcbf209b":"<h1 class=\"alert alert-block alert-info\" style=\"text-align:center; font-size:24px\" id=\"eda\">Exploratory Data Analysis (EDA) <a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/ironicninja\/visualizing-chess-game-length-and-piece-movement\/notebook#eda\">\u00b6<\/a><\/h1>\n\n<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em; padding-top: 15px\"> In this section, I explore some of the inherent features\/distributions of the data. This exploration helps encapsulate the later analyses which use the actual chess game notation. <\/p>","d3419fb1":"<h1 class=\"alert alert-block alert-info\" style=\"text-align:center; font-size:24px\" id=\"multiprocess\">Foundation for Implementing Multiprocessing<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/ironicninja\/visualizing-chess-game-length-and-piece-movement\/notebook#multiprocess\">\u00b6<\/a><\/h1>\n\n<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em; padding-top: 15px\"> In this section, I create the foundation for using Python's multiprocessing package. I use multiprocessing for this notebook because the dataset is extremely large. With four cores (what most computers have), we can speed up the visualization process by a factor of 4, just with a bit of extra coding. <span style=\"color:green\"> Essentially, this is some foundational code for speeding up the visualization process (by a factor of 2-4).<\/span><\/p>","a22e4cc2":"<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em; padding-top: 15px\"> It seems like the player on the white side is typically higher rated than the player on the black side. The distribution is platykurtic, since the excess kurotsis is negative; this means that we don't expect many extreme events near the tails of the distribution (no games with rating difference around -500 and 500). This makes sense, since Lichess' default rating difference search is 500, and most people will either keep it that way or decrease it to somewhere around 50. <\/p>","ad88b189":"<h1 class=\"alert alert-block alert-info\" style=\"text-align:center; font-size:36px\">Chess Visualization Project, Part 2<\/h1>\n\n<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em; padding-top: 15px\"> This is Part 2 of my two part series for visualizing chess data. In this notebook, I take polished and cleaned chess portable game notation (PGN) and perform different analyses and visualizations on the data. Whether you're a beginner and only know the rules of chess or are a seasoned master, my goal with this notebook is to visualize the data I've compiled in an easy-to-digest manner. <span style=\"color:blue\">The cool visualizations are towards the bottom of the notebook (last two sections), so you should just skip there if you're only here for the visualizations.<\/span> For those who are here for the notebook's coding aspect, I have linked <a href=\"https:\/\/www.kaggle.com\/ironicninja\/converting-raw-chess-pgn-to-readable-data\"> Part 1 Notebook<\/a> here, where I cleaned the data I gathered from <a href=\"https:\/\/database.lichess.org\/\">https:\/\/database.lichess.org\/<\/a>.<\/p>\n\n<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em; padding-top: 15px\"> <span style=\"font-weight: bold\">A bit about me:<\/span> I was motivated to complete this project because I am fascinated by the artform and creativity involved in both computer science and chess, and wanted to synthesize two of my favorite hobbies into this visualization project. I've been coding for a little over a year now, and have played chess for over a decade (my highest USCF rating has been ~1800 though I don't play competitively anymore).<\/p>\n    \n<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em; padding-top: 15px\"> Finally, if you enjoy this notebook, please leave an <span style=\"font-weight: bold; color: green\">upvote!<\/span> I would really appreciate it. <\/p>\n\n<h2> Table of Contents: <\/h2>\n<ol style=\"font-size:15px; font-family:verdana\">\n    <li> <a href=\"https:\/\/www.kaggle.com\/ironicninja\/visualizing-chess-game-length-and-piece-movement\/notebook#eda\"> Foundational Preprocessing <\/a><\/li>\n    <li> <a href=\"https:\/\/www.kaggle.com\/ironicninja\/visualizing-chess-game-length-and-piece-movement\/notebook#gamelength\"> Chess Game Length:<\/a> distribution, variability, importance <\/li>\n    <li> <a href=\"https:\/\/www.kaggle.com\/ironicninja\/visualizing-chess-game-length-and-piece-movement\/notebook#piecemovement\"> Piece Movement: <\/a> what chess pieces should you move first? <\/li>\n    <li> <a href=\"https:\/\/www.kaggle.com\/ironicninja\/visualizing-chess-game-length-and-piece-movement\/notebook#square\"> Popular Squares:<\/a> what squares do individual chess pieces like to move to?<\/li>\n<\/ol>\n","4c4a87dc":"<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em; padding-top: 15px\"> Beginner players seem to move their queen way too often in the opening, neglecting castling. <span style=\"font-weight:bold\"> Don't do that! <\/span>Castle so your king is safe, develop all of your pieces, and only THEN begin moving your queen to attack your opponent's position.<\/p>","10d33e81":"<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em\"> From these visualizations, the main lesson to learn is to always <span style=\"font-weight: bold\">control the center!<\/span> Pieces move most fluidly towards and away from the center, so if you have a strong grasp of the center, you really limit what your opponent is able to accomplish. For the rest of this combined data (where the movement of white vs black is not separated), the data is alot to digest and very unclear, and so in the proceeding sections, I'll be splitting the movement up for into two graphs, one for white and one for black, and performing analysis on the much simpler data.<\/p>","ed97bd69":"<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em\"> Before that, just for reference, I've included an example of using the castling method here. Including castling heavily skews the data to kingside castling squares, so I don't include them in my later analysis. It's worth noting that many games will just end with the king ending on g1\/g8 (after kingside castling) and the rook not moving from its square on f1\/f8.<\/p>","36eb1262":"<h1 class=\"alert alert-block alert-info\" style=\"text-align:center; font-size:24px\" id=\"piecemovement\">How many times does each piece move?<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/ironicninja\/visualizing-chess-game-length-and-piece-movement\/notebook#piecemovement\">\u00b6<\/a><\/h1>\n\n<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em; padding-top: 15px\"> The first thing I thought about analyzing was: \"how many times does a specific chess piece move in a chess game?\" A pawn moves seems to be the most likely candidate for \"most moved\", but what about the minor pieces (knight and bishop) versus the queen? There are two minor pieces for each side, but the queen is almighty...<\/p>\n\n<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em; padding-top: 15px\"> The algorithm below utilizes a boolean \"states\" operator, curr_move. When curr_move is set to False, then I take the next letter in the string and use it to increment a dictionary.<\/p>","dc3f584d":"<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em\"> Just like expected, pawn moves dominate chess games, of course, since there are at most 16 pawns on the board, compared to the at most 4 for any other piece. Somewhat surprising is that there are more knight moves than bishop moves; maybe knights are more powerful than bishops after all! The singular queen also moves around quite alot, but that isn't surprising, since the queen is powerful and can travel across the chessboard in an instant. <\/p>","e98b9ae4":"<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em\"> Finally, we can see that, on average, master players tend to have shorter games, and intermediate\/advanced players have the longest games. This may be because master players will resign earlier when they know a situation is hopeless, beginner players may resign earlier when they blunder, but intermediate\/advanced players may continue playing the game through on the premise that their opponent will blunder at some point.<\/p>","1f18d3a2":"<h1 class=\"alert alert-block alert-info\" style=\"text-align:center; font-size:24px\" id=\"square\">What is the probability a piece lands on a certain square?<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/ironicninja\/visualizing-chess-game-length-and-piece-movement\/notebook#square\">\u00b6<\/a><\/h1>\n\n<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em; padding-top: 15px\"> This is my favorite part of the entire visualization. Where do pieces love moving the most? Is bishop to c4 more common than bishop to d3? What about queen moves? You may be surprised...!<\/p>\n    \n<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em; padding-top: 15px\">The algorithm below searches through the PGN and involves many if-statement checks to remove weird edge cases like exd1=Q+. I've tried my best to include comments in my code so what I'm doing makes sense.<\/p>","296cbd7d":"<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em\"> I utilize the datatable package to import my data, as it is much faster than the normal pandas read csv function. <\/p>","95beb468":"<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em\"> Faster chess is most common online! Not surprising given that it's hard to keep focus during online games. <\/p>","bc6d6e3e":"<h1 class=\"alert alert-block alert-info\" style=\"text-align:center; font-size:24px\" id=\"piecemovement2\">On any given move, what is the probability a specific chess piece moves?<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/ironicninja\/visualizing-chess-game-length-and-piece-movement\/notebook#piecemovement2\">\u00b6<\/a><\/h1>\n\n<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em; padding-top: 15px\"> So we've found how many times a chess piece moves, but what about over the course of a chess game? Are pawn moves more likely at the beginning of a chess game or towards the end of a chess game? We know that the king loves coming to the center of the board near the endgame, so are we going to see a sudden spike of king moves at the end of the game? Well, you'll just have to keep reading to find out...<\/p>\n\n<p style=\"font-size:15px; font-family:verdana; line-height: 1.7em; padding-top: 15px\"> The algorithm used below is a synthesis of the previous two algorithms, with both the move number and what piece is moving being considered.<\/p>"}}