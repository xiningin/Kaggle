{"cell_type":{"73ed3bfd":"code","6fa60a0e":"code","9e8854f1":"code","b339c4bf":"code","e90d5952":"code","879448cb":"code","00c07e4a":"code","690694ff":"code","d7613b33":"code","704e182c":"code","2aee96b0":"code","c79cb4e9":"code","5f1fe3bf":"code","b4b5b78a":"code","592a5a84":"code","de3fe6fd":"code","0989b76f":"code","e9f041d9":"code","5c9fda03":"code","c6b0fd10":"code","bff0b9cb":"markdown","c7e28e4d":"markdown","c913278c":"markdown","2fc8b729":"markdown","69cf6f17":"markdown","05bcf138":"markdown","1bafc847":"markdown","38c04722":"markdown","62ff8fe5":"markdown","9e04b830":"markdown","e71f7b6f":"markdown","09428f83":"markdown","41d8dd82":"markdown"},"source":{"73ed3bfd":"import math\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, LSTM\nimport matplotlib.pyplot as plt","6fa60a0e":"df=pd.read_csv('..\/input\/stock-market-india\/FullDataCsv\/BAJAJ_AUTO__EQ__NSE__NSE__MINUTE.csv')","9e8854f1":"df.dropna(inplace=True)","b339c4bf":"df.head(10)","e90d5952":"import seaborn as sns\nplt.figure(figsize=(16,8))\nplt.title('Close Price History')\nplt.plot(df['close'])\n#ax=sns.lineplot(data=df, x='timestamp',y='close', color=\"blue\");\nplt.xlabel('timestamp',fontsize=18)\nplt.ylabel('Close Price INR',fontsize=18)\nplt.show()","879448cb":"data = df.filter(['close'])\ndataset = data.values\ntraining_data_len = math.ceil( len(dataset) *.8) ","00c07e4a":"dataset","690694ff":"scaler = MinMaxScaler(feature_range=(0, 1)) \nscaled_data = scaler.fit_transform(dataset)","d7613b33":"train_data = scaled_data[0:training_data_len  , : ]\nx_train=[]\ny_train = []\nfor i in range(60,len(train_data)):\n    x_train.append(train_data[i-60:i,0])\n    y_train.append(train_data[i,0])","704e182c":"x_train, y_train = np.array(x_train), np.array(y_train)","2aee96b0":"x_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))","c79cb4e9":"model = Sequential()\nmodel.add(LSTM(units=50, return_sequences=True,input_shape=(x_train.shape[1],1)))\nmodel.add(LSTM(units=50, return_sequences=False))\nmodel.add(Dense(units=25))\nmodel.add(Dense(units=1))","5f1fe3bf":"model.compile(optimizer='adam', loss='mean_squared_error')","b4b5b78a":"model.fit(x_train, y_train, batch_size=64, epochs=1)","592a5a84":"test_data = scaled_data[training_data_len - 60: , : ]#Create the x_test and y_test data sets\nx_test = []\ny_test =  dataset[training_data_len : , : ] #Get all of the rows from index 1603 to the rest and all of the columns (in this case it's only column 'Close'), so 2003 - 1603 = 400 rows of data\nfor i in range(60,len(test_data)):\n    x_test.append(test_data[i-60:i,0])\n","de3fe6fd":"x_test = np.array(x_test)","0989b76f":"x_test = np.reshape(x_test, (x_test.shape[0],x_test.shape[1],1))","e9f041d9":"predictions = model.predict(x_test) \npredictions = scaler.inverse_transform(predictions)","5c9fda03":"rmse=np.sqrt(np.mean(((predictions- y_test)**2)))\nrmse","c6b0fd10":"train = data[:training_data_len]\ndisplay = data[training_data_len:]\ndisplay['Predictions'] = predictions#Visualize the data\nplt.figure(figsize=(16,8))\nplt.title('Model')\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price INR', fontsize=18)\nplt.plot(train['close'])\nplt.plot(display['close'])\nplt.plot(display['Predictions'])\nplt.legend(['Train', 'Val', 'Predictions'], loc='upper right')\nplt.show()","bff0b9cb":"# **It is clear from the graph, the model predicted the close price quiet accurately**\n# Thank you and please upvote if you like my work!","c7e28e4d":"# Droping all the NULL values","c913278c":"# **Using adam optimizer and mean_squared_error as the loss function**","2fc8b729":"# ****Importing Important Libraries****","69cf6f17":"# Converting data to a numpy array","05bcf138":"# Finding the root mean squared error","1bafc847":"# **Building a LSTM Model for Stock Market Prediction**","38c04722":"# Spliting data for training and testing","62ff8fe5":"# Chcking the top 10 values from the dataset","9e04b830":"# Transforming the dataset array to range between 0 and 1","e71f7b6f":"# **Reading any random companies stock csv using pandas**","09428f83":"# **Plotting the predicted values**","41d8dd82":"# Ploting Close Price History using matplotlib"}}