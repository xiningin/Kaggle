{"cell_type":{"fdfb0b41":"code","38d9c8a5":"code","99cd01fb":"code","24895765":"code","c86a65d9":"code","75d08930":"code","d5a30889":"code","7d48caf8":"code","f920ba88":"code","7e6cc204":"code","a05aa60e":"code","25841611":"code","d90afc30":"code","9b03a5ac":"code","8c022ee4":"code","d11cd471":"code","79b0ef49":"code","54e79197":"code","38434d2b":"code","5720431a":"code","ba8b499b":"code","c8dde544":"code","82ab267f":"code","c97af975":"code","1399d253":"code","edae20c9":"code","3d7300d8":"code","0131ba76":"code","1599e03f":"markdown","c9c96f8e":"markdown","aff3a4c5":"markdown","77012847":"markdown","445aa7d9":"markdown","3ff18b9e":"markdown","e2fd7cac":"markdown","b112bb79":"markdown","fa43e599":"markdown","879336c8":"markdown","1365f837":"markdown","aa806b6d":"markdown","90741f94":"markdown","08ffc94e":"markdown","dba2e3b6":"markdown","3d3bfa54":"markdown","d29d51bb":"markdown","95ba120d":"markdown","169cb956":"markdown","34dc1f96":"markdown","211e4c27":"markdown","5dd27ce3":"markdown","21a2fe1c":"markdown","6cd43844":"markdown","ef7e3192":"markdown","037891de":"markdown","20d35b3d":"markdown"},"source":{"fdfb0b41":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","38d9c8a5":"# Libraries for Data Analysis\nimport numpy as np\nimport pandas as pd\n# Libraries for Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n# For avoiding warnings\nimport warnings\nwarnings.filterwarnings('ignore')","99cd01fb":"housing_data = pd.read_csv('\/kaggle\/input\/usa-housing\/USA_Housing.csv')","24895765":"housing_data.head(3)","c86a65d9":"housing_data.info()","75d08930":"housing_data.describe()","d5a30889":"# Making the copy of the dataset\ne_df = housing_data.copy()","7d48caf8":"e_df.hist(bins=30, edgecolor='black', figsize=(10,8))\nplt.show()","f920ba88":"sns.pairplot(e_df)\nplt.show()","7e6cc204":"# For showing the values below the diagonal of the metrix\nmatrix = np.triu(e_df.corr())\n# Heatmap is the great way to show correlation\nsns.heatmap(e_df.corr(),mask=matrix,annot=True)","a05aa60e":"# Copying the data into the df dafaframe for futher steps\ndf = e_df.drop('Address', axis=1)","25841611":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df.iloc[:,:-1], df.Price, test_size=0.20, random_state=42)","d90afc30":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\n\nscores = []\nfor model in [LinearRegression(), Ridge(), Lasso()]:\n    score = cross_val_score(model, X_train, y_train, cv=5)\n    scores.append(np.mean(score))\n    \nbaseline_models = pd.DataFrame({'model':['LinearRegression','Ridge','Lasso'], 'score':scores}).set_index('model')\nbaseline_models","9b03a5ac":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = {'alpha':[0.001, 0.01, 0.1, 1, 10, 100]}\ngrid = GridSearchCV(Ridge(), param_grid, cv=5).fit(X_train, y_train)\nprint(grid.best_estimator_)\nprint('best_score: {}'.format(grid.best_score_))\nresults = pd.DataFrame(grid.cv_results_)\n\nsns.set_style('whitegrid')\nsns.barplot(results.param_alpha, results.mean_test_score*100)\nplt.yticks(np.arange(0,101,10))\nplt.show()","8c022ee4":"param_grid = {'alpha':[0.001, 0.01, 0.1, 1, 10, 100]}\ngrid = GridSearchCV(Lasso(), param_grid, cv=5).fit(X_train, y_train)\nprint(grid.best_estimator_)\nprint(grid.best_score_)\nresults = pd.DataFrame(grid.cv_results_)\n\nsns.barplot(results.param_alpha, results.mean_test_score*100)\nplt.yticks(np.arange(0,101,10))\nplt.show()\n","d11cd471":"lr = LinearRegression().fit(X_train, y_train)\nridge = Ridge().fit(X_train, y_train)\nlasso = Lasso().fit(X_train, y_train)\n\ncoef = pd.DataFrame(data = [lr.coef_, ridge.coef_, lasso.coef_], columns=X_train.columns,\n                    index=['linear_regression','ridge','lasso'])\ncoef","79b0ef49":"from sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\npipe = make_pipeline(StandardScaler(),LinearRegression())\nnp.mean(cross_val_score(pipe, X_train, y_train, cv=5))","54e79197":"from sklearn.preprocessing import PolynomialFeatures\npoly = PolynomialFeatures(degree=2).fit(X_train)\nX_poly = poly.transform(X_train)\nnp.mean(cross_val_score(LinearRegression(), X_poly, y_train, cv=5))","38434d2b":"from sklearn.decomposition import PCA\npca = PCA(n_components=2).fit(X_train)\nX_pca = pca.transform(X_train)\nnp.mean(cross_val_score(LinearRegression(), X_pca, y_train, cv=5))","5720431a":"fig, axs = plt.subplots(ncols=2, figsize=(10,5))\naxs[0].scatter(X_pca[:,0], y_train, edgecolor='black')\naxs[0].set_xlabel('component_1')\naxs[0].set_ylabel('price')\n\naxs[1].scatter(X_pca[:,1], y_train, edgecolor='black')\naxs[1].set_xlabel('component_2')\naxs[1].set_ylabel('price')\nplt.show()","ba8b499b":"from sklearn.feature_selection import SelectPercentile\nselect = SelectPercentile(percentile=50).fit(X_train, y_train)\nselected_X = select.transform(X_train)\nprint(select.get_support())\nnp.mean(cross_val_score(LinearRegression(), selected_X, y_train, cv=5))","c8dde544":"from sklearn.feature_selection import SelectFromModel\nfrom sklearn.ensemble import RandomForestRegressor\n\nselect = SelectFromModel(RandomForestRegressor(), threshold='median').fit(X_train, y_train)\nselected_X = select.transform(X_train)\nprint(select.get_support())\nnp.mean(cross_val_score(LinearRegression(), selected_X, y_train, cv=5))","82ab267f":"from sklearn.feature_selection import RFE\n\nselect = RFE(RandomForestRegressor(), n_features_to_select=3).fit(X_train, y_train)\nselected_X = select.transform(X_train)\nprint(select.get_support())\nnp.mean(cross_val_score(LinearRegression(), selected_X, y_train, cv=5))","c97af975":"lr = LinearRegression().fit(X_train, y_train)\ny_pred = lr.predict(X_test)","1399d253":"from sklearn.metrics import mean_absolute_error, mean_squared_error\nprint(mean_absolute_error(y_test, y_pred))\nprint(mean_squared_error(y_test, y_pred))\nprint(np.sqrt(mean_squared_error(y_test, y_pred)))","edae20c9":"plt.figure(figsize=(10,5))\nplt.barh(X_train.columns, lr.coef_)","3d7300d8":"plt.scatter(y_test, y_pred, edgecolor='black')\nplt.show()","0131ba76":"plt.hist(y_test-y_pred, bins=30)\nplt.show()","1599e03f":"So far the best model is baseline model without any preprocessing on the data.","c9c96f8e":"There is not any significat correlation between features but there is some correlation between the feature and target.\nMost correlation can be seen with 'Avg. Area Income'","aff3a4c5":"# Applying PCA","77012847":"All the baseline model performed exactly same because we didn't do any parameter tuning without parameter tuning all these model have same working process.","445aa7d9":"Address feature doesn't have any use in our model so dropping the 'Address' column","3ff18b9e":"# Feature Selection","e2fd7cac":"# Applying StanderScaleabsr","b112bb79":"Performance is little bad than before","fa43e599":"These Linear models will be used\n* LinearRegression\n* Ridge\n* Lasso","879336c8":"PCA actually performed very poor.","1365f837":"Parameter Tuning didn't affact the accuracy.","aa806b6d":"### Itretive Selection","90741f94":"There is neither missing values nor categorical data so this dataset doesn't need any cleaning and prerprocessing.","08ffc94e":"# Quick Look at Data","dba2e3b6":"# Building Baseline Models","3d3bfa54":"# Splitting the Dataset","d29d51bb":"Most of the data is normally distributed apart from 'Avg. Area Number of Bedrooms' which is a good thing for any machine learning model.","95ba120d":"There are all numeric feature except one String feature which is 'Address'.","169cb956":"### Univariate Statistics","34dc1f96":"This is very basic notebook and it is about implementing following steps:\n* EDA\n* Using linear_models\n* cross_val_score\n* GridSearchCV\n* Polynomial Feature\n* Feature Selection\n* Pipeline\n\nThe goal of this notebooke is the see how these steps are implemented in the data science project.","211e4c27":"# Basic Imports","5dd27ce3":"### Coef of the feature set by all the linear models","21a2fe1c":"# Applying Polynomial features","6cd43844":"# Model Parameter Tuning","ef7e3192":"# Model Evaluation","037891de":"# EDA","20d35b3d":"### Model Based Selection"}}