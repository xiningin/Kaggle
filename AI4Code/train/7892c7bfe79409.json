{"cell_type":{"08512e75":"code","19cc0426":"code","07f82ff0":"code","f41a4606":"code","70cd8a31":"code","61c78f49":"code","e042ce4d":"code","a71a43ec":"code","0c2759fc":"code","0059ca00":"code","5b29954b":"code","b9091934":"code","b670810e":"code","9b409c64":"code","7c3fa0da":"code","903dc5ac":"code","b985aef0":"code","87e029b0":"code","0ecac27d":"code","80168bd3":"code","2749c29f":"code","ef75ccd0":"code","969d99b9":"code","ab0a1f37":"code","c83f28d0":"markdown","1403aeb4":"markdown","69a36c07":"markdown","8068ee2d":"markdown","6a4bdebc":"markdown","77241929":"markdown","a05d93be":"markdown","00177a19":"markdown","32c55f66":"markdown","b02c1c3f":"markdown"},"source":{"08512e75":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import LabelEncoder\nimport seaborn as sns\nimport csv\n\nimport warnings\nwarnings.simplefilter(action=\"ignore\", category=FutureWarning)\n","19cc0426":"df = pd.read_csv('..\/input\/air-travel-data-set-of-sans-francisco-airport\/air travel dataset.xlsx - Air travel data.csv')\ndf.head()","07f82ff0":"df.dropna(axis=0,how='any',subset=['Geometry Coordinates 1 0','Geometry Coordinates 1 1'],inplace=True)","f41a4606":"df_iata = pd.read_csv('..\/input\/airport-codes\/airports.csv')\ndf_iata.head()","70cd8a31":"df[['ff_from','ff_to']] = df.Route.apply(\n   lambda x: pd.Series(str(x).split(\"-\")))","61c78f49":"del df['Route']\ndf.head()","e042ce4d":"x = df.loc[:, ['Geometry Coordinates 1 0','Geometry Coordinates 1 1', 'Properties Flysfo Actual Timestamp', 'ff_from', 'ff_to']]\nx.head()","a71a43ec":"x = x[x.ff_from == 'SFO']\nx = x[x.ff_to != 'SFO']\nx.info()","0c2759fc":"x = pd.merge(x, df_iata[[\"IATA\", \"Country\"]], how=\"left\", left_on='ff_from', right_on='IATA')\nx.rename({'Country': 'ff_from_country'}, axis=1, inplace=True)\ndel x['IATA']\nx = pd.merge(x, df_iata[[\"IATA\", \"Country\"]], how=\"left\", left_on='ff_to', right_on='IATA')\nx.rename({'Country': 'ff_to_country'}, axis=1, inplace=True)\ndel x['IATA']\nx['flight_type'] = x.apply(lambda x: int(x['ff_to_country'] == x['ff_from_country']), axis=1)","0059ca00":"x = x[x.flight_type != 1]\ndel x['ff_from']\ndel x['ff_from_country']\ndel x['flight_type']\ndel x['ff_to']\nx.head()","5b29954b":"x.info()","b9091934":"enc = LabelEncoder()\nenc.fit(x['ff_to_country'])\nx['ff_to_country'] = enc.transform(x['ff_to_country'])\nx.head()","b670810e":"del x['ff_to_country']","9b409c64":"x['flight_hour'] = x.apply(\n    lambda x: (pd.to_datetime(x['Properties Flysfo Actual Timestamp'], unit='s', origin='unix').hour * 60 + pd.to_datetime(x['Properties Flysfo Actual Timestamp'], unit='s', origin='unix').minute) \/ 60\n    , axis=1)\ndel x['Properties Flysfo Actual Timestamp']\nx.head()","7c3fa0da":"from geopy import distance\n\ndef getJarak(lat, lon):\n    sfo = (37.61799, -122.370943)\n    point = (lon, lat)\n    \n    return distance.distance(sfo, point).km","903dc5ac":"print(getJarak(-99.080804, 19.431302))","b985aef0":"x['distance'] = x.apply(lambda x: getJarak(x['Geometry Coordinates 1 0'], x['Geometry Coordinates 1 1']), axis=1)","87e029b0":"x.head()","0ecac27d":"del x['Geometry Coordinates 1 0']\ndel x['Geometry Coordinates 1 1']","80168bd3":"x.head()","2749c29f":"x = x.values","ef75ccd0":"wcss = []\n\nnumber_of_cluster = range(1,10)\n\nfor i in number_of_cluster:\n    kmeans = KMeans(i)\n    kmeans.fit(x)\n    wcss_iter = kmeans.inertia_\n    wcss.append(wcss_iter)\n\nplt.plot(number_of_cluster, wcss)\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('Score')\nplt.show()","969d99b9":"kmeans = KMeans(n_clusters = 3, init = 'k-means++', random_state = 42)\ny_kmeans = kmeans.fit_predict(x)","ab0a1f37":"plt.figure(figsize=(15,7))\nsns.scatterplot(x[y_kmeans == 0, 0], x[y_kmeans == 0, 1], color = 'yellow', label = 'Long Range',s=50)\nsns.scatterplot(x[y_kmeans == 1, 0], x[y_kmeans == 1, 1], color = 'blue', label = 'Medium Range',s=50)\nsns.scatterplot(x[y_kmeans == 2, 0], x[y_kmeans == 2, 1], color = 'green', label = 'Short Range',s=50)\nsns.scatterplot(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], color = 'red', \n                label = 'Centroids',s=300,marker=',')\nplt.grid(False)\nplt.title('Clusters of flights')\nplt.ylabel('Jarak')\nplt.xlabel('Jam Keberangkatan')\nplt.xlim(0, 24)\nplt.legend()\nplt.show()","c83f28d0":"Split Route data (SFO-NRT) to 2 columns (ff_from and ff_to) SFO and NRT","1403aeb4":"## Data Enrichment\nAdd more information to data eg: separate flight route and remove SFO inbound flight","69a36c07":"## Load Data","8068ee2d":"# Clustering International Flight Route From San Francisco Airport ","6a4bdebc":"## The Elbow Method\nhttps:\/\/skillplus.web.id\/elbow-method\/\n\nElbow method adalah metoda yang sering dipakai untuk menentukan jumlah cluster yang akan digunakan pada k-means clustering.\n\nSeperti yang sudah dibahas sebelumnya, clustering adalah meminimumkan jarak antara data point dan centroid, serta memaksimumkan jarak antara centroid yang dihitung menggunakan within-cluster sum of squares atau WCSS.\n\nTujuannya adalah menghitung WCSS se-minimum dengan jumlah cluster yang kecil agar bisa dilakukan interpretasi data.\n\n1. WCSS = 0, berarti semua data point berada pada cluster yang berbeda, contoh 6 data points, jumlah cluster 6. Tidak terjadi clustering alias clustering tidak berguna.\n2. WCSS = 1, berarti semua data point berada dalam satu cluster, Sama seperti diatas, clustering tidak berguna.","77241929":"## Data Cleansing\nRemoving null value from data","a05d93be":"Hapus flight data yang bukan dari SFO dan memiliki tujuan SFO. Menyisakan hanya data penerbangan dari SFO dan bukan ke SFO.","00177a19":"Hapus flight yang bukan penerbangan internasional.","32c55f66":"Mengelompokkan jam keberangkatan berdasarkan jam dalam (00-23)","b02c1c3f":"Membersihkan data tersebut menyisakan kita dengan data penerbangan internasional dari SFO sebanyak 6256 penerbangan yang terjadi selama bulan Maret 2020"}}