{"cell_type":{"07635bcb":"code","68234b73":"code","3230f5dd":"code","0c64a487":"code","aa474bc9":"code","366b78a8":"code","815a89c6":"code","f57921cc":"code","f73129e9":"code","98b1f8a9":"code","b0130099":"code","d153b417":"code","d0f382df":"code","0d34cb72":"code","17ddd964":"code","43e761eb":"code","112aa862":"code","4aca6a2c":"code","e885fa42":"code","0b54ad01":"code","95daee75":"code","7b7a9ac2":"code","4e52964e":"code","082346e9":"code","d748bf8e":"code","4094c32e":"code","1bf24e98":"code","fd34b732":"code","b0ec6c4f":"code","ba406c7b":"code","55083456":"markdown","8af2f4ef":"markdown","7abe5c6d":"markdown","eac0b153":"markdown","a274d529":"markdown"},"source":{"07635bcb":"# !pip install comet_ml","68234b73":"# import comet_ml #at the top of your file\n# from comet_ml import Experiment\n\n# # Create an experiment with your api key:\n# experiment = Experiment(\n#     api_key=\"cjZUHKCBKcrudJIeYuUe1zaBT\",\n#     project_name=\"leaf-disease-classification\",\n#     workspace=\"kaggle\",\n#     log_code=True,\n# )","3230f5dd":"import json\nimport os\nimport pathlib as pt\n\nimport matplotlib.pyplot as plt\nimport numpy as np \nimport pandas as pd \n\nfrom fastai.vision.all import *\nfrom fastai.data.core import DataLoaders\n\nfrom tqdm import tqdm\n\nimport torch.cuda\nif torch.cuda.is_available():\n    print('PyTorch found cuda')\nelse:\n    print('PyTorch could not find cuda')","0c64a487":"ROOT = pt.Path('..\/input\/cassava-leaf-disease-classification')\nLABEL_JSON = ROOT\/\"label_num_to_disease_map.json\"\nTRAIN_CSV  = ROOT\/\"train.csv\"\nTRAIN_DIR  = ROOT\/\"train_images\"\nTEST_DIR   = ROOT\/\"test_images\"","aa474bc9":"train_imgs = list(TRAIN_DIR.glob(\"*\"))\ntest_imgs = list(TEST_DIR.glob(\"*\"))\nprint(\"Train: # {}\".format(len(train_imgs)))\nprint(\"Test: # {}\".format(len(test_imgs)))","366b78a8":"train_df = pd.read_csv(TRAIN_CSV)\ntrain_df.head(3)","815a89c6":"with open(LABEL_JSON) as fp:\n    label_dict = json.load(fp)\nlabel_dict","f57921cc":"def create_path(row):\n    return TRAIN_DIR\/row\ndef get_label_name(row):\n    return label_dict[str(row)]\n\ntrain_df['img_path'] = train_df['image_id'].apply(create_path)\ntrain_df['disease_name'] = train_df['label'].apply(get_label_name)\ntrain_df.head(3)","f73129e9":"_df = train_df['disease_name'].value_counts().sort_index()\nfig = plt.figure()\nax = _df.plot(kind='bar')\nax.set_xlabel(\"Disease\")\nax.set_ylabel(\"Frequency\")\nax.set_title(\"Nr of samples \/ disease\")\n# experiment.log_figure(figure_name=\"Leaf Diseases\", figure=fig)","98b1f8a9":"aug_tfms = aug_transforms(mult=1.5, \n                          do_flip=True, \n                          flip_vert=False, \n                          max_rotate=20.0, \n                          min_zoom=1.0, \n                          max_zoom=1.5, \n                          max_lighting=0.3, \n                          max_warp=0.2, \n                          p_affine=0.75, \n                          p_lighting=0.65, \n                          xtra_tfms=None, \n                          size=224, \n                          mode='bilinear', \n                          pad_mode='reflection', \n                          align_corners=True, \n                          batch=False, \n                          min_scale=1.0)\n\ndata_loaders = ImageDataLoaders.from_df(train_df, \n                                        path=\"\", \n                                        seed=42, \n                                        fn_col='img_path', \n                                        label_col='label', \n                                        valid_pct=0.2,\n                                        item_tfms=Resize(460), #RandomResizedCrop(460, min_scale=0.3),\n                                        batch_tfms=aug_tfms)","b0130099":"data_loaders.show_batch(max_n=8, nrows=2, unique=True)","d153b417":"# creating directories and copying the models to those directories\n!mkdir -p \/root\/.cache\/torch\/hub\/checkpoints\/\n!cp ..\/input\/resnet34\/resnet34.pth \/root\/.cache\/torch\/hub\/checkpoints\/resnet34-333f7ec4.pth\n!cp ..\/input\/resnet50\/resnet50.pth \/root\/.cache\/torch\/hub\/checkpoints\/resnet50-19c8e357.pth\n!cp ..\/input\/resnet152\/resnet152.pth \/root\/.cache\/torch\/hub\/checkpoints\/resnet152-b121ed2d.pth","d0f382df":"learn = cnn_learner(data_loaders, resnet152, metrics=[error_rate, accuracy], opt_func=Adam)\nlearn.lr_find()","0d34cb72":"# experiment.log_parameters(hyperparams)","17ddd964":"learn.fine_tune??","43e761eb":"base_lr = 0.003\nlearn.fit_one_cycle(n_epoch=1, lr_max=slice(base_lr\/100, base_lr))","112aa862":"learn.unfreeze()","4aca6a2c":"learn.lr_find()","e885fa42":"# learn.fit_one_cycle??","0b54ad01":"learn.fit_one_cycle(1)\nlearn.fit_one_cycle(n_epoch=20, lr_max=slice(1e-6, 1e-4))","95daee75":"# experiment.log_model(name=\"resnet34_model_v0\", file_or_folder=\".\/resnet34_model.pkl\")","7b7a9ac2":"learn.show_results()","4e52964e":"interp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_top_losses(9, figsize=(15,10))","082346e9":"interp.plot_confusion_matrix()\nplt.savefig(\"confusion_matrix.png\", bbox_inches='tight', padding=0)\n# experiment.log_image(\"confusion_matrix.png\")","d748bf8e":"interp.most_confused() # (actual, predicted, nr of occurences)","4094c32e":"interp.print_classification_report()","1bf24e98":"def get_image_id(row):\n    p = pt.Path(row)\n    return p.name\ntest_df = pd.DataFrame()\ntest_df['img_path'] = test_imgs\ntest_df['image_id'] = test_df['img_path'].apply(get_image_id)\ntest_df.head()","fd34b732":"test_dl = data_loaders.test_dl(test_df)\nres_preds = learn.get_preds(dl=test_dl, with_decoded=True) # returns (predictions, _, predicted label)\npreds_values = res_preds[0]\npreds_labels = res_preds[2]","b0ec6c4f":"print(\"Generating submission file...\")\nsubmission_data = {'image_id': [], 'label': []}\n\nfor idx, pred_label in enumerate(preds_labels):\n\n    submission_data['image_id'].append(test_df.iloc[idx]['image_id'])\n    submission_data['label'].append(pred_label.item())\n\n\nsubmission_df = pd.DataFrame(data=submission_data)\nsubmission_df.to_csv(\"submission.csv\", index=False)\n# experiment.log_table(\"submission.csv\")\n!head submission.csv","ba406c7b":"# experiment.end()","55083456":"## Create submission file","8af2f4ef":"## Prepare data","7abe5c6d":"## Look at some predictions","eac0b153":"`cnn_learner` call `.freeze()` by default. This means it freezes all the layers except the last which are added for the new classification task. When `.fit_one_cycle()` it's called, only these last layers are trained.","a274d529":"## Setup the resnet architecture"}}