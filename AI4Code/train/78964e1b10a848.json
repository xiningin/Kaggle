{"cell_type":{"252318d3":"code","4a0e7dad":"code","19fce576":"code","9b4e6918":"code","86bea078":"code","9d7fa3ed":"code","03ff6e1f":"code","5c39997d":"code","8c705c35":"code","34991eb0":"code","fd6e5f50":"code","bf5f7f48":"code","9798b9f2":"code","857454f1":"code","75faa241":"code","3f0b3852":"code","3f5db30e":"markdown","01c903c7":"markdown","ecf27922":"markdown","d339b19a":"markdown","e86ae895":"markdown","97cd4a71":"markdown","9e0c6440":"markdown","c1a53d07":"markdown","c3bb25e0":"markdown"},"source":{"252318d3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import SimpleRNN, Activation, Dropout\nfrom tensorflow.keras.layers import Dense, Reshape, Conv1D","4a0e7dad":"inp0 = pd.read_csv('\/kaggle\/input\/gamestop-historical-stock-prices\/GME_stock.csv')\n\ninp0 = inp0.sort_values(by='date',ascending=True)\nprint(inp0.shape)\ninp0.head()","19fce576":"inp0.plot(\"date\", \"close_price\")\nplt.show()","9b4e6918":"# Extract the values for Close from the DataFrame\nts_data = inp0.close_price.values.reshape(-1,1)\n\nplt.figure(figsize=[14,5])\nplt.plot(ts_data)\nplt.show()","86bea078":"train_recs = int(len(ts_data)*0.75)\ntrain_data = ts_data[:train_recs]\ntest_data = ts_data[train_recs:]\n\nlen(train_data), len(test_data)","9d7fa3ed":"scaler = MinMaxScaler()\ntrain_scaled = scaler.fit_transform(train_data)\ntest_scaled = scaler.transform(test_data)","03ff6e1f":"def get_lookback(inp, look_back):\n  y = pd.DataFrame(inp)\n  dataX = [y.shift(i) for i in range(1, look_back+1)]\n  dataX = pd.concat(dataX, axis=1)\n  dataX.fillna(0, inplace = True)\n  return dataX.values, y.values","5c39997d":"look_back = 10\ntrainX, trainY = get_lookback(train_scaled, look_back=look_back)\ntestX, testY = get_lookback(test_scaled, look_back= look_back)\ntrainX.shape, testX.shape","8c705c35":"model = Sequential()\n\nmodel.add(Reshape((look_back,1),input_shape=(look_back,)))\nmodel.add(Conv1D(5, 3, activation='relu'))\nmodel.add(SimpleRNN(32))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1))\nmodel.add(Activation('linear'))\n\nmodel.summary()","34991eb0":"model.compile(loss='mean_squared_error',optimizer='adam')\n\nmodel.fit(trainX,trainY, epochs=10,batch_size=18,verbose=2,validation_split=0.1)","fd6e5f50":"def get_model_perf(model_obj):\n  score_train = model_obj.evaluate(trainX, trainY, verbose=0)\n  print('Train RMSE: %.2f RMSE' % (math.sqrt(score_train)))\n  score_test = model_obj.evaluate(testX, testY, verbose=0)\n  print('Test RMSE: %.2f RMSE' % (math.sqrt(score_test)))","bf5f7f48":"get_model_perf(model)","9798b9f2":"def plot_pred(model_obj):\n  testPredict = scaler.inverse_transform(model_obj.predict(testX))\n  pred_test_plot = ts_data.copy()\n  pred_test_plot[:train_recs+look_back,:] = np.nan\n  pred_test_plot[train_recs+look_back:,:] = testPredict[look_back:]\n  plt.plot(ts_data, label='Actual')\n  plt.plot(pred_test_plot, \"--\", label='Predicted')\n  plt.legend()","857454f1":"def plot_pred_zoom(model_obj):\n  testPredict = scaler.inverse_transform(model_obj.predict(testX))\n  pred_test_plot = testPredict\n  plt.plot(ts_data[train_recs:], label='Actual')\n  plt.plot(pred_test_plot, \"--\", label='Predicted')\n  plt.legend()","75faa241":"#the entire view\nplt.figure(figsize=[12,5])\nplot_pred(model)","3f0b3852":"#the zoomed-in view\nplt.figure(figsize=[12,6])\nplot_pred_zoom(model)","3f5db30e":"## 8. RMSE of the model","01c903c7":"## 9. Plot the predictions","ecf27922":"## 4. Scale the train and test data","d339b19a":"## 5. Get the lookback data for the train and test","e86ae895":"## 7. Compile and Fit the model","97cd4a71":"## 6. Build a model","9e0c6440":"## 3. Assign the final 25% data as test data and the first 75% as train data","c1a53d07":"## 2. Plot the time series","c3bb25e0":"## 1. Import the necessary libraries and data"}}