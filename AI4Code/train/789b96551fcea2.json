{"cell_type":{"14233bb3":"code","0752d2df":"code","20c3cae0":"code","47c65e26":"code","b6f5bea4":"code","6c1cb566":"code","b7bb3b1a":"code","960be22f":"code","cadbb4ce":"code","b9ed93bb":"code","db0d9e92":"code","92d2698c":"code","f9c62e1e":"code","ae882d3f":"code","6e77f759":"code","094688d9":"code","54ab052f":"code","2193a391":"code","761a0c23":"code","dd8149b8":"code","cf0e2ccf":"code","2de79bce":"code","fba75e57":"code","e8f63cc6":"code","ff558b01":"code","5952a65e":"code","38732654":"code","0febd3a2":"code","5b79c0d6":"code","96baa289":"code","ecacd3f2":"code","e3c4b196":"code","f75db89c":"code","702c4edb":"code","02044149":"code","93e37ef4":"code","df200778":"code","8c290a44":"code","8aafe52b":"code","dec11371":"code","22d80bf6":"code","7ed075ea":"markdown","1040aaa9":"markdown","e3dd56fd":"markdown","c6a3e0ef":"markdown","15271f3b":"markdown","729f6b55":"markdown","4a81b3ce":"markdown","a4b2bd97":"markdown","e00b5ee2":"markdown","868f66f5":"markdown","94b1d6e7":"markdown","5fa90629":"markdown"},"source":{"14233bb3":"String cron_string = BRANCH_NAME == \"master\" ? \"H 12 * * 1,3,5\" : \"\"\n \npipeline {\n  agent { label 'ephemeral-linux' }\n  options {\n    \/\/ The Build GPU stage depends on the image from the Push CPU stage\n    disableConcurrentBuilds()\n  }\n  triggers {\n    cron(cron_string)\n  }\n  environment {\n    GIT_COMMIT_SHORT = sh(returnStdout: true, script:\"git rev-parse --short=7 HEAD\").trim()\n    GIT_COMMIT_SUBJECT = sh(returnStdout: true, script:\"git log --format=%s -n 1 HEAD\").trim()\n    GIT_COMMIT_AUTHOR = sh(returnStdout: true, script:\"git log --format='%an' -n 1 HEAD\").trim()\n    GIT_COMMIT_SUMMARY = \"`<https:\/\/github.com\/Kaggle\/docker-python\/commit\/${GIT_COMMIT}|${GIT_COMMIT_SHORT}>` ${GIT_COMMIT_SUBJECT} - ${GIT_COMMIT_AUTHOR}\"\n    SLACK_CHANNEL = sh(returnStdout: true, script: \"if [[ \\\"${GIT_BRANCH}\\\" == \\\"master\\\" ]]; then echo \\\"#kernelops\\\"; else echo \\\"#builds\\\"; fi\").trim()\n    PRETEST_TAG = sh(returnStdout: true, script: \"if [[ \\\"${GIT_BRANCH}\\\" == \\\"master\\\" ]]; then echo \\\"ci-pretest\\\"; else echo \\\"${GIT_BRANCH}-pretest\\\"; fi\").trim()\n    STAGING_TAG = sh(returnStdout: true, script: \"if [[ \\\"${GIT_BRANCH}\\\" == \\\"master\\\" ]]; then echo \\\"staging\\\"; else echo \\\"${GIT_BRANCH}-staging\\\"; fi\").trim()\n  }\n \n  stages {\n    stage('Docker CPU Build') {\n      options {\n        timeout(time: 90, unit: 'MINUTES')\n      }\n      steps {\n        sh '''#!\/bin\/bash\n          set -exo pipefail\n \n          .\/build | ts\n          .\/push ${PRETEST_TAG}\n        '''\n      }\n    }\n \n    stage('Test CPU Image') {\n      options {\n        timeout(time: 5, unit: 'MINUTES')\n      }\n      steps {\n        sh '''#!\/bin\/bash\n          set -exo pipefail\n \n          date\n          .\/test --image gcr.io\/kaggle-images\/python:${PRETEST_TAG}\n        '''\n      }\n    }\n \n    stage('Push CPU Image') {\n      steps {\n        sh '''#!\/bin\/bash\n          set -exo pipefail\n \n          date\n          docker pull gcr.io\/kaggle-images\/python:${PRETEST_TAG}\n          .\/push --source-image gcr.io\/kaggle-images\/python:${PRETEST_TAG} ${STAGING_TAG}\n        '''\n      }\n    }\n    \n    stage('Docker GPU Build') {\n      \/\/ A GPU is not required to build this image. However, in our current setup,\n      \/\/ the default runtime is set to nvidia (as opposed to runc) and there\n      \/\/ is no option to specify a runtime for the `docker build` command.\n      \/\/\n      \/\/ TODO(rosbo) don't set `nvidia` as the default runtime and use the\n      \/\/ `--runtime=nvidia` flag for the `docker run` command when GPU support is needed.\n      agent { label 'ephemeral-linux-gpu' }\n      options {\n        timeout(time: 45, unit: 'MINUTES')\n      }\n      steps {\n        sh '''#!\/bin\/bash\n          set -exo pipefail\n          # Remove images (dangling or not) created more than 120h (5 days ago) to prevent disk from filling up.\n          docker image prune --all --force --filter \"until=120h\" --filter \"label=kaggle-lang=python\"\n          # Remove any dangling images (no tags).\n          # All builds for the same branch uses the same tag. This means a subsequent build for the same branch\n          # will untag the previously built image which is safe to do. Builds for a single branch are performed\n          # serially.\n          docker image prune -f\n          .\/build --gpu --base-image-tag ${STAGING_TAG} | ts\n          .\/push --gpu ${PRETEST_TAG}\n        '''\n      }\n    }\n \n    stage('Test GPU Image') {\n      agent { label 'ephemeral-linux-gpu' }\n      options {\n        timeout(time: 20, unit: 'MINUTES')\n      }\n      steps {\n        sh '''#!\/bin\/bash\n          set -exo pipefail\n \n          date\n          .\/test --gpu --image gcr.io\/kaggle-private-byod\/python:${PRETEST_TAG}\n        '''\n      }\n    }\n \n    stage('Push GPU Image') {\n      agent { label 'ephemeral-linux-gpu' }\n      steps {\n        sh '''#!\/bin\/bash\n          set -exo pipefail\n \n          date\n          docker pull gcr.io\/kaggle-private-byod\/python:${PRETEST_TAG}\n          .\/push --source-image gcr.io\/kaggle-private-byod\/python:${PRETEST_TAG} --gpu ${STAGING_TAG}\n        '''\n      }\n    }\n \n    stage('Package Versions') {\n      parallel {\n        stage('CPU Diff') {\n          steps {\n            sh '''#!\/bin\/bash\n            .\/diff\n          '''\n          }\n        }\n        stage('GPU Diff') {\n          agent { label 'ephemeral-linux-gpu' }\n          steps {\n            sh '''#!\/bin\/bash\n            .\/diff --gpu\n          '''\n          }\n        }\n      }\n    }\n  }\n \n  post {\n    failure {\n      slackSend color: 'danger', message: \"*<${env.BUILD_URL}console|${JOB_NAME} failed>* ${GIT_COMMIT_SUMMARY} @kernels-backend-ops\", channel: env.SLACK_CHANNEL\n    }\n    success {\n      slackSend color: 'good', message: \"*<${env.BUILD_URL}console|${JOB_NAME} passed>* ${GIT_COMMIT_SUMMARY}\", channel: env.SLACK_CHANNEL\n    }\n    aborted {\n      slackSend color: 'warning', message: \"*<${env.BUILD_URL}console|${JOB_NAME} aborted>* ${GIT_COMMIT_SUMMARY}\", channel: env.SLACK_CHANNEL\n    }\n  }\n}\n","0752d2df":"import unittest\n \nclass TestImport(unittest.TestCase):\n    # Basic import tests for packages without any.\n    def test_basic(self):\n        import bq_helper\n        import cleverhans\n        import tensorflow_gcs_config\n ","20c3cae0":"{# \nJinja template to inject notebook cell metadata to enhance generated HTML output\nAll cell metadata starting with '_kg_' will be included with its value ({key}-{value}) \nas a class in the cell's DIV container\n#}\n    \n{% extends 'full.tpl'%}\n{% block any_cell %}\n    <div class=\"{% for k in cell['metadata'] if k.startswith(\"_kg_\") %}{{k}}-{{cell['metadata'][k] | lower}} {% endfor %}\">\n        {{ super() }}\n    <\/div>\n{% endblock any_cell %}","47c65e26":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b6f5bea4":"df = pd.read_csv('\/kaggle\/input\/brasilian-houses-to-rent\/houses_to_rent.csv')","6c1cb566":"df = df.drop(['Unnamed: 0'], axis = 1)","b7bb3b1a":"df.head()","960be22f":"df['hoa'] = df['hoa'].replace('Sem info','0')\ndf['hoa'] = df['hoa'].replace('Incluso','0')","cadbb4ce":"df['property tax'] = df['property tax'].replace('Sem info','0')\ndf['property tax'] = df['property tax'].replace('Incluso','0')","b9ed93bb":"df['hoa'].value_counts()","db0d9e92":"df['rent amount'].value_counts()","92d2698c":"df['property tax'].value_counts()","f9c62e1e":"df['fire insurance'].value_counts()","ae882d3f":"df['total'].value_counts()","6e77f759":"def extract_value_from(Value):\n    out = Value.replace('R$', '')\n    out_ = out.replace(',', '')\n    out_ = float(out_)\n    return out_","094688d9":"df['hoa'] = df['hoa'].apply(lambda x: extract_value_from(x))\ndf['rent amount'] = df['rent amount'].apply(lambda x: extract_value_from(x))\ndf['property tax'] = df['property tax'].apply(lambda x: extract_value_from(x))\ndf['fire insurance'] = df['fire insurance'].apply(lambda x: extract_value_from(x))\ndf['total'] = df['total'].apply(lambda x: extract_value_from(x))","54ab052f":"df.head()","2193a391":"import matplotlib.pyplot as plt\nimport seaborn as sns","761a0c23":"df.describe()","dd8149b8":"print(\"Skewness: \", df['total'].skew())\nprint(\"Kurtosis: \", df['total'].kurt())","cf0e2ccf":"Q1 = df.quantile(0.25)\nQ3 = df.quantile(0.75)\nIQR = Q3 - Q1\nprint(IQR)","2de79bce":"df = df[df['total']<= 5622.5]","fba75e57":"df.head()","e8f63cc6":"df.describe()","ff558b01":"plt.figure(figsize=(10,10))\nsns.set()\nsns.kdeplot(df['total'])\nplt.title('Total Price KDE')","5952a65e":"plt.figure(figsize=(10,10))\nsns.set()\nsns.kdeplot(df['fire insurance'], color = 'r')\nplt.title('Fire Insurance Price KDE')","38732654":"plt.figure(figsize=(10,10))\nsns.set()\nsns.kdeplot(df['property tax'], color = 'g')\nplt.title('Property Tax Price KDE')","0febd3a2":"plt.figure(figsize=(10,10))\nsns.set()\nsns.kdeplot(df['rent amount'], color = 'c')\nplt.title('Rent Price KDE')","5b79c0d6":"plt.figure(figsize=(10,10))\nsns.set()\nsns.kdeplot(df['hoa'], color = 'y')\nplt.title('HOA Price KDE')","96baa289":"sns.jointplot(df['total'], df['fire insurance'], kind=\"hex\", color=\"r\")","ecacd3f2":"sns.jointplot(df['total'], df['property tax'], kind=\"hex\", color=\"g\")","e3c4b196":"sns.jointplot(df['total'], df['rent amount'], kind=\"hex\", color=\"b\")","f75db89c":"sns.jointplot(df['total'], df['hoa'], kind=\"hex\", color=\"y\")","702c4edb":"plt.figure(figsize=(10,10))\nsns.boxplot(x=\"city\", y=\"total\", palette=[\"m\", \"g\"], data=df)\nplt.title('City and Total Price')","02044149":"plt.figure(figsize=(10,10))\nsns.boxplot(x=\"rooms\", y=\"total\", palette=[\"r\", \"b\"], data=df)\nplt.title('Room and Total Price')","93e37ef4":"df.head()","df200778":"plt.figure(figsize=(10,10))\nsns.boxplot(x=\"bathroom\", y=\"total\", palette=[\"c\", \"gold\"], data=df)\nplt.title('Bathroom and Total Price')","8c290a44":"plt.figure(figsize=(10,10))\nsns.boxplot(x=\"parking spaces\", y=\"total\", palette=[\"m\", \"silver\"], data=df)\nplt.title('Parking Spaces and Total Price')","8aafe52b":"plt.figure(figsize=(10,10))\nsns.boxplot(x=\"floor\", y=\"total\", palette=[\"m\", \"silver\"], data=df)\nplt.title('Floor and Total Price')","dec11371":"plt.figure(figsize=(10,10))\nsns.boxplot(x=\"animal\", y=\"total\", palette=[\"m\", \"silver\"], data=df)\nplt.title('Animal and Total Price')","22d80bf6":"cor = df.corr()\nf, ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(cor, annot=True, square=True);","7ed075ea":"Okay then, we need to remove outliers using interquartile score","1040aaa9":"### Rows with total price more than 5622.5 are removed","e3dd56fd":"## Total price and other price component","c6a3e0ef":"## What we got from total price:\n1. Positive skewness\n2. Deviate from normal distribution","15271f3b":"# Turn the \"Sem Info\" and \"Incluso\" to \"0\"\n\nWe turn it to string to avoid attribute error","729f6b55":"Animal permitted tend to be more expensive","4a81b3ce":"# Relation","a4b2bd97":"# Total Price Distribution","e00b5ee2":"# Pre\u00e7os de Casas: Dados Diferentes, Mesmo Problema!\n\nThis is the same problem (but different location) from https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/overview \nThus, we would like to do same approach in data exploration. \n\n\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/5407\/media\/housesbanner.png)\n\nWell, this is one of the famous city, \n\n![](https:\/\/i0.wp.com\/www.mobileworldlive.com\/wp-content\/uploads\/2019\/12\/Brazil.png?fit=650%2C400&ssl=1)\n\nIn my heart, I always want to go to Brazil, working there, and watch some football games there. I always on the Sele\u00e7\u00e3o side on World Cup since I never saw my country there. \n\n![](https:\/\/i.pinimg.com\/originals\/21\/ac\/8f\/21ac8f9241bff1948ff1d7c47ee74bc3.jpg)","868f66f5":"## Cleaning the Real Sign (R$)\n\nAfter that, we note that the hoa, rent amount, prop tax, fire insurance, and total is in Brazilian Real.","94b1d6e7":"City 1 tend to be more expensive","5fa90629":"# Correlation"}}