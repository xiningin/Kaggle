{"cell_type":{"983e70ec":"code","a8e59d25":"code","09c62435":"code","84c2fc51":"code","aaebc32f":"code","84a00101":"code","6cd6e873":"code","3ada9eb3":"code","21b6bcbc":"code","4fcf13c4":"code","cc0754c2":"code","12f31800":"code","e9c5af57":"code","74ff02d8":"code","c1296344":"code","ab2867e7":"code","db06557d":"code","b711d5ce":"code","3b50eea9":"code","8eeee02f":"code","4c7b8201":"code","81936cf0":"code","9ac89810":"code","779a2810":"code","4c3a22da":"code","ec64e157":"code","987e595f":"code","7a47d689":"code","158d8624":"code","d2ceb676":"code","b7d925c1":"code","09e3ea89":"code","d82fc9b9":"code","3b6d7843":"code","85e7720c":"code","3cd8d49b":"code","ef0d3808":"code","09b130c8":"code","5c8553f3":"code","3fc959b6":"markdown","246bb134":"markdown","f2c705a7":"markdown","ab6305c3":"markdown","a51c9d5b":"markdown","d3e8ed68":"markdown","a08c4d4b":"markdown","79242d0c":"markdown","dffaa165":"markdown","63f9785a":"markdown","1a6e7e37":"markdown","85166b67":"markdown","bb2204e1":"markdown","cc201e1f":"markdown","415cecf0":"markdown","bc38924a":"markdown"},"source":{"983e70ec":"import numpy as np \nimport pandas as pd \nimport math\nimport glob\nimport os\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nimport wandb\n\nimport folium\nfrom geopy.geocoders import Nominatim\nfrom folium import Choropleth, Circle, Marker\nfrom folium.plugins import HeatMap, MarkerCluster","a8e59d25":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\napi_key = user_secrets.get_secret(\"api_key\")\n\nCONFIG = {'competition': 'learnplatform', '_wandb_kernel': 'ruch'}\n\nos.environ[\"WANDB_SILENT\"] = \"true\"","09c62435":"! wandb login $api_key","84c2fc51":"products_df = pd.read_csv(\"..\/input\/learnplatform-covid19-impact-on-digital-learning\/products_info.csv\")\nproducts_df.head()","aaebc32f":"districts_df = pd.read_csv(\"..\/input\/learnplatform-covid19-impact-on-digital-learning\/districts_info.csv\")\ndistricts_df.head()","84a00101":"path = '..\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data' \nall_files = glob.glob(path + \"\/*.csv\")\n\nli = []\n\nfor filename in all_files:\n    df = pd.read_csv(filename, index_col=None, header=0)\n    district_id = filename.split(\"\/\")[4].split(\".\")[0]\n    df[\"district_id\"] = district_id\n    li.append(df)\n    \nengagement_df = pd.concat(li)\nengagement_df = engagement_df.reset_index(drop=True)\nengagement_df.head()","6cd6e873":"msno.bar(products_df,color='#7209b7', sort=\"ascending\", figsize=(10,5), fontsize=12)\nplt.show()","3ada9eb3":"msno.bar(districts_df,color='#f72585', sort=\"ascending\", figsize=(10,5), fontsize=12)\nplt.show()","21b6bcbc":"msno.bar(engagement_df,color='#4895ef', sort=\"ascending\", figsize=(10,5), fontsize=12)\nplt.show()","4fcf13c4":"sns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\n\n#====== Function to plot WandB bar chart ======\ndef plot_wb_bar(df,col1,col2): \n    run = wandb.init(project='LearnPlatform', job_type='image-visualization',name=col1,config = CONFIG, anonymous=\"allow\")\n    \n    dt = [[label, val] for (label, val) in zip(df[col1], df[col2])]\n    table = wandb.Table(data=dt, columns = [col1,col2])\n    wandb.log({col1 : wandb.plot.bar(table, col1,col2,title=col1)})\n    run.finish()\n    \n#====== Function to create a dataframe of value counts ======\ndef count_values(df,col,top=False):\n    df = pd.DataFrame(df[col].value_counts().reset_index().values,columns=[col, \"counts\"])\n    if top==True: df=df[:10]\n    return df\n\n#====== Function to create a dataframe ======\ndef intermediate_df(col, labels, sizes):\n    d = pd.DataFrame()\n    d[col] = labels\n    d['counts'] = sizes\n    return d\n\npal1 = [\"#fec5bb\",\"#fcd5ce\",\"#fae1dd\",\"#f8edeb\",\"#e8e8e4\",\"#d8e2dc\",\"#ece4db\",\"#ffe5d9\",\"#ffd7ba\",\"#fec89a\"]\npal2 = [\"#ffcbf2\",\"#f3c4fb\",\"#ecbcfd\",\"#e5b3fe\",\"#e2afff\",\"#deaaff\",\"#d8bbff\",\"#d0d1ff\",\"#c8e7ff\",\"#c0fdff\"]\npal3 = [\"#d6d2d2\",\"#f1e4f3\",\"#f4bbd3\",\"#f686bd\",\"#fe5d9f\"]\npal4 = [\"#a09abc\",\"#b6a6ca\",\"#d5cfe1\",\"#e1dee9\",\"#d4bebe\"]\npal5 = [\"#01295f\",\"#437f97\",\"#849324\",\"#ffb30f\",\"#fd151b\"]","cc0754c2":"plot_wb_bar(count_values(districts_df,\"state\"),\"state\", 'counts')","12f31800":"plt.figure(figsize=(16, 10))\nsns.countplot(y=\"state\",data=districts_df,order=districts_df.state.value_counts().index,palette=\"Blues\",linewidth=3)\nplt.title(\"Districts per State Distribution\",font=\"Serif\", size=20)\nplt.show()","e9c5af57":"class color:\n    BOLD = '\\033[1m'\n    END = '\\033[0m'\n    \nprint(color.BOLD + \"pct_black\/hispanic\" + color.END)\nprint(districts_df['pct_black\/hispanic'].unique() )\nprint(\"\\n\" + color.BOLD + \"pct_free\/reduced\" + color.END)\nprint(districts_df['pct_free\/reduced'].unique())\nprint(\"\\n\" + color.BOLD + \"county_connections_ratio\" + color.END)\nprint(districts_df['county_connections_ratio'].unique())\nprint(\"\\n\" + color.BOLD + \"pp_total_raw\" + color.END)\nprint(districts_df['pp_total_raw'].unique())","74ff02d8":"def percentage_columns(df, col):\n    \n    lower_limit = []\n    upper_limit = []\n    \n    for index, row in districts_df.iterrows():\n        s = row[col]\n        if(not pd.isnull(s)):\n            lower_value = s.split(\",\")[0].split(\"[\")[1]\n            upper_value = s.split(\",\")[1].split(\"[\")[0].strip()\n            lower_limit.append(lower_value)\n            upper_limit.append(upper_value)\n        else:\n            lower_limit.append(None)\n            upper_limit.append(None)\n       \n    col_name1 = col + '_lower_limit'\n    col_name2 = col + '_upper_limit'\n    \n    df[col_name1] = pd.to_numeric(lower_limit)\n    df[col_name2] = pd.to_numeric(upper_limit)\n    \n    return df\n\ndistricts_copy = districts_df.copy()\nfor col in districts_copy.columns[3:7]:\n    districts_copy = percentage_columns(districts_copy, col)\ndistricts_copy = districts_copy.dropna()\n    \ndef filter_state(df,col,state):\n    return df[['state','district_id',col]].dropna().loc[df['state']==state]\n\ndef display(df, state):\n    col1 = 'pct_black\/hispanic_upper_limit'\n    col2 = 'pct_free\/reduced_upper_limit'\n    col3 = 'county_connections_ratio_upper_limit'\n    col4 = 'pp_total_raw_upper_limit'\n    \n    df1 = filter_state(df, col1,state)\n    df2 = filter_state(df, col2,state)\n    df3 = filter_state(df, col3,state)\n    df4 = filter_state(df, col4,state)\n\n    fig, ax = plt.subplots(2,2,figsize=(20,20))\n    fig.suptitle(state,fontweight='bold',fontsize=30)\n    \n    sns.countplot(y=col1, data=df1, palette = pal5, ax=ax[0,0])\n    ax[0,0].set_title('% of Black\/Hispanic')\n    ax[0,0].set_ylabel(None)\n    \n    sns.countplot(y=col2, data=df2, palette = pal5, ax=ax[0,1])\n    ax[0,1].set_title('% of Eligible for Free\/Reduced Lunch Price')\n    ax[0,1].set_ylabel(None)\n    \n    sns.countplot(y=col3, data=df3, palette = pal4, ax=ax[1,0])\n    ax[1,0].set_title('Connection Ratio')\n    ax[1,0].set_ylabel(None)\n    \n    sns.countplot(y=col4, data=df4, palette = pal3, ax=ax[1,1])\n    ax[1,1].set_title('Per-pupil total expenditure')\n    ax[1,1].set_ylabel(None)\n    \n    plt.tight_layout()\n    plt.show()","c1296344":"display(districts_copy,\"Illinois\")","ab2867e7":"display(districts_copy,\"Washington\")","db06557d":"display(districts_copy,\"Wisconsin\")","b711d5ce":"plot_wb_bar(count_values(districts_df,\"locale\"),\"locale\", 'counts')","3b50eea9":"fig, ax  = plt.subplots(figsize=(16, 8))\nfig.suptitle('Locale Distribution', size = 20, font=\"Serif\")\nexplode = (0.05, 0.05, 0.05, 0.05)\nlabels = list(districts_df.locale.value_counts().index)\nsizes = districts_df.locale.value_counts().values\nax.pie(sizes, explode=explode,startangle=60, labels=labels,autopct='%1.0f%%', pctdistance=0.7, colors=[\"#d45d00\",\"#ff9100\",\"#eaaa00\",\"#6d6875\"])\nax.add_artist(plt.Circle((0,0),0.4,fc='white'))\nplt.show()","8eeee02f":"plot_wb_bar(count_values(products_df,\"Provider\/Company Name\",top=True),\"Provider\/Company Name\", 'counts')","4c7b8201":"plt.figure(figsize=(16, 10))\nsns.countplot(y='Provider\/Company Name', data=products_df, order=products_df[\"Provider\/Company Name\"].value_counts().index[:10],palette = pal2)\nplt.title(\"Top 10 Provider\/Company Names\",font=\"Serif\", size=20)\nplt.show()","81936cf0":"c1=c2=c3=0\nfor s in products_df[\"Sector(s)\"]:\n    if(not pd.isnull(s)):\n        s = s.split(\";\")\n        for i in range(len(s)):\n            sub = s[i].strip()\n            if(sub == 'PreK-12'): c1+=1\n            if(sub == 'Higher Ed'): c2+=1\n            if(sub == 'Corporate'): c3+=1\n\nfig, ax  = plt.subplots(figsize=(16, 8))\nfig.suptitle('Sector Distribution', size = 20, font=\"Serif\")\nexplode = (0.05, 0.05, 0.05)\nlabels = ['PreK-12','Higher Ed','Corporate']\nsizes = [c1,c2, c3]\nax.pie(sizes, explode=explode,startangle=60, labels=labels,autopct='%1.2f%%', pctdistance=0.7, colors=[\"#ff228a\",\"#20b1fd\",\"#ffb703\"])\nax.add_artist(plt.Circle((0,0),0.4,fc='white'))\nplt.show()","9ac89810":"plot_wb_bar(intermediate_df('Sector', labels, sizes),\"Sector\", 'counts')","779a2810":"primary_essential_main = []\nprimary_essential_sub = []\nfor s in products_df[\"Primary Essential Function\"]:\n    if(not pd.isnull(s)):\n        s1 = s.split(\"-\",1)[0].strip()\n        primary_essential_main.append(s1)\n    else:\n        primary_essential_main.append(np.nan)\n    \n    if(not pd.isnull(s)):\n        s2 = s.split(\"-\",1)[1].strip()\n        primary_essential_sub.append(s2)\n    else:\n        primary_essential_sub.append(np.nan)\n\nproducts_df[\"primary_essential_main\"] = primary_essential_main\nproducts_df[\"primary_essential_sub\"] = primary_essential_sub","4c3a22da":"c1=c2=c3=0\n\nfor s in products_df[\"primary_essential_main\"]:\n    if(not pd.isnull(s)):\n        c1 += s.count(\"CM\")\n        c2 += s.count(\"LC\")\n        c3 += s.count(\"SDO\")\n\nfig, ax  = plt.subplots(figsize=(16, 8))\nfig.suptitle('Primary Essential Function', size = 20, font=\"Serif\")\nexplode = (0.05, 0.05, 0.05)\nlabels = ['CM','LC','SDO']\nsizes = [c1, c2, c3]\nax.pie(sizes, explode=explode,startangle=60, labels=labels,autopct='%1.2f%%', pctdistance=0.7, colors=[\"#18ff9f\",\"#2cfbff\",\"#ffb703\"])\nax.add_artist(plt.Circle((0,0),0.4,fc='white'))\nplt.show()","ec64e157":"plot_wb_bar(intermediate_df('Primary Essential Function', labels, sizes),\"Primary Essential Function\", 'counts')","987e595f":"plot_wb_bar(count_values(products_df,\"primary_essential_sub\"),\"primary_essential_sub\", 'counts')","7a47d689":"plt.figure(figsize=(16, 20))\nsns.countplot(y='primary_essential_sub', data=products_df, order=products_df[\"primary_essential_sub\"].value_counts().index,color = pal2[6])\nplt.title(\"Primary Essential Function(Sub)\",font=\"Serif\", size=20)\nplt.show()","158d8624":"engagement_df['time'] = pd.to_datetime(engagement_df['time'])","d2ceb676":"print(products_df[\"LP ID\"].nunique())\nprint(engagement_df[\"lp_id\"].nunique())","b7d925c1":"products_engagement_data = pd.merge(products_df, engagement_df, left_on='LP ID', right_on='lp_id')\nproducts_engagement_data.head()","09e3ea89":"print(districts_df[\"district_id\"].nunique())\nprint(engagement_df[\"district_id\"].nunique())","d82fc9b9":"engagement_df[\"district_id\"] = engagement_df[\"district_id\"].astype(str).astype(int)\ndistricts_engagement_data = pd.merge(districts_df, engagement_df, left_on='district_id', right_on='district_id')\ndistricts_engagement_data.head()","3b6d7843":"def plot_time_series(df,col1,col2,col3):\n    max_list = df[[col1,col2]]\\\n        .groupby([col1])[col2].mean()\\\n        .sort_values(ascending=False).index[:5].tolist()\n\n    df = df[df[col1].isin(max_list)]\\\n                    .reset_index(drop=True)[[col3, col1, col2]]\n    df = df.pivot_table(index=col3, columns=col1, values=col2)\n\n    fig = px.line(df, facet_col=col1, facet_col_wrap=1, width=800, height=800)\n    fig.update_layout(\n                      title=(col1 + \" , \" + col2 + \" , \" + col3).title(),\n                      title_x=0.39,\n                      template=\"plotly_white\",\n                      paper_bgcolor='#f5f7f8',\n                      font = {'family': 'Serif', 'size': 20}\n                     )\n    fig.show()","85e7720c":"plot_time_series(districts_engagement_data,\"state\",\"pct_access\",\"time\")\nplot_time_series(districts_engagement_data,\"state\",\"engagement_index\",\"time\")\nplot_time_series(districts_engagement_data,\"locale\",\"pct_access\",\"time\")\nplot_time_series(districts_engagement_data,\"locale\",\"engagement_index\",\"time\")","3cd8d49b":"geolocator = Nominatim(user_agent=\"Ruch\")\n\ndef feature_generation(df):\n    lat=[]\n    long=[]\n    for i in df['state']: \n        location = geolocator.geocode(i)\n        try:\n            lat.append(location.latitude)\n            long.append(location.longitude)\n        except:\n            lat.append(\"NA\")\n            long.append(\"NA\")\n    df['Latitude'] = lat\n    df['Longitude'] = long\n    \n    return df\n\ndef map_df(df,col1,col2):\n    df = pd.DataFrame(df[[col1,col2]]\\\n            .groupby([col1])[col2].mean()\\\n            .sort_values(ascending=False)[:20]).reset_index()\n    \n    df = feature_generation(df)\n    \n    return df\n\nstate_access = map_df(districts_engagement_data, \"state\", \"pct_access\")\nstate_engagement_index = map_df(districts_engagement_data, \"state\", \"engagement_index\")","ef0d3808":"north_america_map = folium.Map(location=[38.9, -77.05], tiles='Stamen Watercolor', zoom_start=3)\nnorth_america_map","09b130c8":"mc = MarkerCluster()\nfor idx, row in state_access.iterrows():\n    if not math.isnan(row['Longitude']) and not math.isnan(row['Latitude']):\n        popup = \"\"\"\n        State : <b>%s<\/b><br>\n        Percentage Access : <b>%s<\/b><br>\n        \"\"\" % (row['state'], row['pct_access'])\n        mc.add_child(Marker([row['Latitude'], row['Longitude']],tooltip=popup))\n    north_america_map.add_child(mc)\nnorth_america_map","5c8553f3":"mc = MarkerCluster()\nfor idx, row in state_engagement_index.iterrows():\n    if not math.isnan(row['Longitude']) and not math.isnan(row['Latitude']):\n        popup = \"\"\"\n        State : <b>%s<\/b><br>\n        Engagement Index : <b>%s<\/b><br>\n        \"\"\" % (row['state'], row['engagement_index'])\n        mc.add_child(Marker([row['Latitude'], row['Longitude']],tooltip=popup))\n    north_america_map.add_child(mc)\nnorth_america_map","3fc959b6":"### State and Percentage Access (Top 20) \ud83c\udf0e","246bb134":"# EDA \ud83d\udcca","f2c705a7":"# Missing values\ud83d\udd2e","ab6305c3":"This is what my [project](https:\/\/wandb.ai\/ruchi798\/LearnPlatform?workspace=user-ruchi798) looks like on the W&B dashboard \u2b07\ufe0f\n![](https:\/\/i.imgur.com\/L0KCgak.png)","a51c9d5b":"# Reading data files \ud83d\udc53","d3e8ed68":"# Geospatial Analysis \ud83d\uddfa\ufe0f","a08c4d4b":"<img src=\"https:\/\/camo.githubusercontent.com\/dd842f7b0be57140e68b2ab9cb007992acd131c48284eaf6b1aca758bfea358b\/68747470733a2f2f692e696d6775722e636f6d2f52557469567a482e706e67\">\n\nI will be integrating W&B for visualizations and logging artifacts!\n\n> [LearnPlatform COVID-19 Impact on Digital Learning W&B Dashboard](https:\/\/wandb.ai\/ruchi798\/LearnPlatform?workspace=user-ruchi798)\ud83c\udfcb\ufe0f\u200d\u2640\ufe0f\n> \n> - To get the API key, an account is to be created on the [website](https:\/\/wandb.ai\/home) first.\n> - Next, use secrets to use API Keys more securely \ud83e\udd2b","79242d0c":"### Base Map \ud83c\udf0e","dffaa165":"# Import libraries \ud83d\udcda","63f9785a":"### Engagement data\n> The engagement data are aggregated at school district level, and each file in the folder ```engagement_data``` represents data from **one school district***. \n\n\ud83d\udcddThe 4-digit file name represents ```district_id``` which can be used to link to district information in ```district_info.csv```. \n\n\ud83d\udcddThe ```lp_id``` can be used to link to product information in ```product_info.csv```.\n\n| Name             | Description                                                                                                    |\n|------------------|----------------------------------------------------------------------------------------------------------------|\n| time             | date in \"YYYY-MM-DD\"                                                                                           |\n| lp_id            | The unique identifier of the product                                                                           |\n| pct_access       | Percentage of students in the district have at least one page-load event of a given product and on a given day |\n| engagement_index | Total page-load events per one thousand students of a given product and on a given day                         |","1a6e7e37":"<img src=\"https:\/\/i.imgur.com\/S9enGUW.png\">","85166b67":"### Product information data\n> The product file ```products_info.csv``` includes information about the characteristics of the top 372 products with most users in 2020. The categories listed in this file are part of LearnPlatform's product taxonomy. \n\n\ud83d\udcdd Some products may not have labels due to being duplicate, lack of accurate url or other reasons.\n\n| Name                       | Description                                                                                                                                                                                                                                                                                                                    |\n|----------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| LP ID                      | The unique identifier of the product                                                                                                                                                                                                                                                                                           |\n| URL                        | Web Link to the specific product                                                                                                                                                                                                                                                                                               |\n| Product Name               | Name of the specific product                                                                                                                                                                                                                                                                                                   |\n| Provider\/Company Name      | Name of the product provider                                                                                                                                                                                                                                                                                                   |\n| Sector(s)                  | Sector of education where the product is used                                                                                                                                                                                                                                                                                  |\n| Primary Essential Function | The basic function of the product. There are two layers of labels here. Products are first labeled as one of these three categories: LC = Learning & Curriculum, CM = Classroom Management, and SDO = School & District Operations. Each of these categories have multiple sub-categories with which the products were labeled |\n|                            |                                                                                                                                                                                ","bb2204e1":"### State and Engagement Index (Top 20) \ud83c\udf0e","cc201e1f":"### District information data\n\n>The district file ```districts_info.csv``` includes information about the **characteristics of school districts**, including data from \n>- NCES (2018-19), \n>- FCC (Dec 2018), and \n>- Edunomics Lab. \n\nSteps taken to preserve Privacy \ud83d\udd12 \n- Identifiable information about the school districts has been removed. \n- An open source tool ARX (Prasser et al. 2020) was used to transform several data fields and reduce the risks of re-identification. \n\n\ud83d\udcdd For data generalization purposes some data points are released with a range where the actual value falls under. Additionally, there are many missing data marked as 'NaN' indicating that the data was suppressed to maximize anonymization of the dataset.\n\n| Name                   | Description                                                                                                                                                                                                                                                                              |\n|------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| district_id            | The unique identifier of the school district                                                                                                                                                                                                                                             |\n| state                  | The state where the district resides in                                                                                                                                                                                                                                                  |\n| locale                 | NCES locale classification that categorizes U.S. territory into four types of areas: City, Suburban, Town, and Rural. See Locale Boundaries User's Manual for more information.                                                                                                          |\n| pct_black\/hispanic     | Percentage of students in the districts identified as Black or Hispanic based on 2018-19 NCES data                                                                                                                                                                                       |\n| pct_free\/reduced       | Percentage of students in the districts eligible for free or reduced-price lunch based on 2018-19 NCES data                                                                                                                                                                              |\n| countyconnectionsratio | ratio (residential fixed high-speed connections over 200 kbps in at least one direction\/households) based on the county level data from FCC From 477 (December 2018 version). See FCC data for more information.                                                                         |\n| pptotalraw             | Per-pupil total expenditure (sum of local and federal expenditure) from Edunomics Lab's National Education Resource Database on Schools (NERD$) project. The expenditure data are school-by-school, and we use the median value to represent the expenditure of a given school district. |\n                                                         ","415cecf0":"Let's take a look at the range of values for the following features and plot the charts accordingly!","bc38924a":"# Merging files \ud83d\udcc1 "}}