{"cell_type":{"bb6122ca":"code","bf9f49c5":"code","8cb3fd13":"code","2e11faf6":"code","da15806f":"code","ff43fc66":"code","9805ca08":"code","d89b108e":"code","78e42f42":"code","6ef80b8e":"code","7d9469a4":"code","88e1910b":"code","638954e9":"code","947890fb":"code","eec46376":"code","9925233d":"code","6a86fcf0":"code","ed5b7af5":"code","3db5e869":"code","60b58e9a":"code","5f59faa1":"code","57645c6f":"code","b8c6dee6":"code","e6df11b1":"code","74795501":"code","6a608042":"code","31accfd2":"code","223b56f3":"code","7286959d":"code","0ff8d468":"code","23cdd65d":"code","e6a9b1e8":"code","c044504e":"code","93110644":"code","33fbf1ca":"code","827f34f5":"code","7c8a264f":"code","9894a153":"code","86e509ca":"code","b386b0c1":"code","4d9746e5":"code","fc5705d3":"code","7a325dfe":"code","a7a3c349":"code","2de174ee":"code","96198b3b":"code","de93b02c":"code","29df6eac":"code","d364dff1":"code","591c79a4":"code","495b1098":"code","9df59b2e":"code","4f420346":"code","b9db3ddc":"code","ecf15eec":"code","e2bb562e":"code","8386675d":"code","84fb1310":"code","e8c9e654":"code","abf32c3e":"code","374666a4":"code","d5e0ccbf":"code","e778481f":"code","58240197":"code","98167574":"code","5220a21a":"code","08cbdad1":"code","7d7431e8":"code","429e48a2":"code","5b26de4f":"code","8a9d74bd":"code","c61f316d":"code","d35509df":"code","296cdd25":"code","9dc3b861":"code","7c79da9a":"markdown","1cee054a":"markdown","786061b0":"markdown","dda2ac68":"markdown","8a26b8f5":"markdown","10c836aa":"markdown","07c8c028":"markdown","33c58420":"markdown","092fc22a":"markdown","273b68c6":"markdown","249a42bd":"markdown","ada4706c":"markdown","1a54a85f":"markdown","fde06193":"markdown","31c14498":"markdown","8a4b86c6":"markdown","8dfbce1a":"markdown","9f0ad2ec":"markdown","c7542910":"markdown","b47943f8":"markdown","b33c95a6":"markdown","1fbfd8df":"markdown","34016a93":"markdown","493f7be3":"markdown","ae20870e":"markdown","173f0116":"markdown","5ba3518f":"markdown","7063aa3c":"markdown","34d23de1":"markdown","a70d15af":"markdown","1767c0b6":"markdown","5691a6a7":"markdown","2426df42":"markdown","b2ec02f4":"markdown","15f87c61":"markdown","c5c35365":"markdown","bc6fcbad":"markdown","8cbcb2a3":"markdown","11e36251":"markdown","f717fe89":"markdown","d4c765c1":"markdown","ec9437bf":"markdown","f3486ecd":"markdown","d684a3ad":"markdown","3fb381a7":"markdown","b7080a5b":"markdown","85f12dbf":"markdown","baef435d":"markdown","e0f39d59":"markdown","faf02c77":"markdown","67ff96b6":"markdown","08f11d95":"markdown","d6cacd7b":"markdown","4946378a":"markdown","1278b88b":"markdown","1e27f87e":"markdown","b67e511b":"markdown","f5740f33":"markdown","c84fb7e5":"markdown","1df0329b":"markdown","7132e115":"markdown"},"source":{"bb6122ca":"# \u5ffd\u7565\u8b66\u544a\u63d0\u793a\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# \u5bfc\u5165\u6570\u636e\u5904\u7406\u5305\nimport pandas as pd\nimport numpy as np","bf9f49c5":"# \u5bfc\u5165\u8bad\u7ec3\u6570\u636e\u96c6\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\n# \u5bfc\u5165\u6d4b\u8bd5\u6570\u636e\u96c6\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","8cb3fd13":"# \u67e5\u770b\u8bad\u7ec3\u6570\u636e\u5185\u5bb9\ntrain.head()","2e11faf6":"# \u67e5\u770b\u6d4b\u8bd5\u6570\u636e\u5185\u5bb9\ntest.head()","da15806f":"# \u67e5\u770b\u6570\u636e\u5927\u5c0f\nprint('\u8bad\u7ec3\u6570\u636e\u96c6\uff1a',train.shape,'\u6d4b\u8bd5\u6570\u636e\u96c6\uff1a',test.shape)","ff43fc66":"# \u67e5\u770b\u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f\ntrain.info()","9805ca08":"test.info()","d89b108e":"# \u5408\u5e76\u6570\u636e\u96c6\uff0c\u65b9\u4fbf\u5bf9\u4e24\u4e2a\u6570\u636e\u96c6\u8fdb\u884c\u540c\u6b65\u6e05\u6d17\nfull = train.append(test,ignore_index=True)\nprint('\u5408\u5e76\u540e\u7684\u6570\u636e\u96c6\uff1a',full.shape)","78e42f42":"# \u83b7\u53d6\u63cf\u8ff0\u7edf\u8ba1\u4fe1\u606f\nfull.describe()","6ef80b8e":"# \u67e5\u770b\u6570\u636e\u7f3a\u5931\u60c5\u51b5\nfull.info()","7d9469a4":"# \u5bfc\u5165\u5206\u6790\u5305\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","88e1910b":"# \u63d0\u53d6\u6570\u503c\u578b\u7279\u5f81\ndf_num = pd.DataFrame(train,columns=['Age','Fare','SibSp','Parch','Survived'])\n# \u7ed8\u5236\u7279\u5f81\u5206\u5e03\u56fe\ndf_num.hist(figsize=(25,20),bins=20,xlabelsize=15,ylabelsize=15)","638954e9":"# \u63d0\u53d6\u7c7b\u522b\u578b\u7279\u5f81\ndf_category1 = pd.DataFrame(train,columns=['Sex','Embarked','Pclass','Survived'])\n# \u7ed8\u5236\u7c7b\u522b\u5206\u5e03\u56fe\nfig = plt.figure(figsize=(25,7))\nplt.subplot(131)\ndf_category1.groupby('Sex').agg('count')['Survived'].plot(kind='bar',fontsize=15)\nplt.subplot(132)\ndf_category1.groupby('Embarked').agg('count')['Survived'].plot(kind='bar',fontsize=15)\nplt.subplot(133)\ndf_category1.groupby('Pclass').agg('count')['Survived'].plot(kind='bar',fontsize=15)","947890fb":"# Name\u63d0\u53d6\u5934\u8854\u4f5c\u4e3a\u7c7b\u522b\ndef getTitle(name):\n    '''\n    \u4ecename\u4e2d\u63d0\u53d6\u5934\u8854\n    '''\n    str1 = name.split(',')[1]\n    str2 = str1.split('.')[0].strip()\n    \n    return str2\ndf_title = train['Name'].map(getTitle)\ndf_title.head()","eec46376":"# Cabin\u63d0\u53d6\u9996\u5b57\u6bcd\u4f5c\u4e3a\u7c7b\u522b(\u7f3a\u5931\u6570\u636e\u4e3an)\ndf_Cabin = train['Cabin'].astype(str).map(lambda x:x[0])\ndf_Cabin.head()","9925233d":"# \u67e5\u770bTicket\u53d6\u503c\ntrain['Ticket'].value_counts()","6a86fcf0":"# Tickets\u63d0\u53d6\u7c7b\u522b\ndef getTicket(ticket):\n    ticket = ticket.replace('.',' ')\n    ticket = ticket.replace('\/',' ')\n    ticket = ticket.split(' ')\n    ticket = map(lambda a:a.strip(),ticket)\n    ticket = list(filter(lambda x:not x.isdigit(),ticket))\n    if len(ticket)>0:\n        return ticket[0]\n    else:\n        return 'Unknown'\ndf_tickets = train['Ticket'].map(getTicket)\ndf_tickets.value_counts()","ed5b7af5":"# # \u63d0\u53d6\u7c7b\u522b\u578b\u7279\u5f81\ndf_category2 = pd.concat([df_title,df_Cabin,df_tickets,full['Survived']],axis=1)\n# \u7ed8\u5236\u7c7b\u522b\u5206\u5e03\u56fe\nfig = plt.figure(figsize=(25,7))\nplt.subplot(131)\ndf_category2.groupby('Name').agg('count')['Survived'].plot(kind='bar',fontsize=15)\nplt.subplot(132)\ndf_category2.groupby('Cabin').agg('count')['Survived'].plot(kind='bar',fontsize=15)\nplt.subplot(133)\ndf_category2.groupby('Ticket').agg('count')['Survived'].plot(kind='bar',fontsize=15)","3db5e869":"# \u67e5\u770b\u4e0d\u540c\u6027\u522b\u7684\u751f\u5b58\u7387\nfig = plt.figure(figsize=(15,7))\ndf_category1.groupby('Sex').agg('mean')['Survived'].plot(kind='bar',fontsize=15,stacked=True)\nplt.xlabel('Sex',fontsize=15)\nplt.ylabel('survival rate',fontsize=15)\n\nplt.show()","60b58e9a":"# \u67e5\u770b\u4e0d\u540c\u8239\u8231\u7b49\u7ea7\u7684\u751f\u5b58\u7387\nfig=plt.figure(figsize=(18,7))\ndf_category1.groupby('Pclass').agg('mean')['Survived'].plot(kind='barh',fontsize=15)\nplt.ylabel('Pclass',fontsize=15)\nplt.xlabel('survival rate',fontsize=15)\nplt.show()","5f59faa1":"# \u8fdb\u884c\u5e74\u9f84\u6bb5\u5212\u5206,\u67e5\u770b\u6bcf\u4e2a\u5e74\u9f84\u6bb5\u7684\u751f\u5b58\u7387\ndef get_agePeriod(age):\n    if not np.bool(age):\n        return age\n    x = np.linspace(0,80,9)\n    for i in range(0,len(x)-1):\n        if (age>x[i] and age<=x[i+1]):\n            return '(%.0f,%.0f]' %(x[i],x[i+1])\n    \n    \ndf_num['Age'] = df_num['Age'].map(get_agePeriod)    \ndf_num['Age'].head()","57645c6f":"fig = plt.figure(figsize=(15,7))\ndf_num.groupby('Age').agg('mean')['Survived'].plot(kind='bar',fontsize=15)\nplt.ylabel('Age Period',fontsize=15)\nplt.xlabel('survival rate',fontsize=15)\nplt.show()","b8c6dee6":"train['Survived'].value_counts()","e6df11b1":"# \u5e74\u9f84\uff08Age\uff09\u7f3a\u5931\u503c\u586b\u5145\nfull['Age'] = full['Age'].fillna(full['Age'].median())\n# \u8239\u7968\u4ef7\u683c\uff08Fare\uff09\u7f3a\u5931\u503c\u586b\u5145\nfull['Fare'] = full['Fare'].fillna(full['Age'].median())","74795501":"# \u767b\u8239\u6e2f\u53e3\uff08Embarked\uff09\u7f3a\u5931\u503c\u586b\u5145\n'''\n\u5c06\u7f3a\u5931\u503c\u586b\u5145\u4e3a\u6700\u9891\u7e41\u51fa\u73b0\u7684\u503c\n'''\npd.value_counts(full['Embarked'])","6a608042":"full['Embarked'] = full['Embarked'].fillna('S')","31accfd2":"# \u8239\u8231\u53f7\uff08Cabin\uff09\u7f3a\u5931\u503c\u586b\u5145\n'''\n\u7f3a\u5931\u503c\u592a\u591a\uff0c\u8239\u8231\u53f7\u7f3a\u5931\u503c\u586b\u5145\u4e3a\u2018U\u2019\uff0c\u8868\u793a\u672a\u77e5\n'''\nfull['Cabin'] = full['Cabin'].fillna('U')","223b56f3":"# \u67e5\u770b\u7f3a\u5931\u5904\u7406\u540e\u7684\u6570\u636e\nfull.info()","7286959d":"import xgboost as xgb","0ff8d468":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler","23cdd65d":"# Age\u7684\u5206\u5e03\u63a5\u8fd1\u6b63\u6001\u5206\u5e03,\u56e0\u6b64\u8fdb\u884c0-1\u5f52\u4e00\u5316\u5904\u7406\nstandard_scaler = StandardScaler()\nfull['Age']= pd.DataFrame(standard_scaler.fit_transform(full['Age'].values.reshape(-1,1)))","e6a9b1e8":"# Fare\u7684\u5206\u5e03\u4e0d\u662f\u6b63\u6001\u5206\u5e03\uff0c\u8fdb\u884cminmax\u6807\u51c6\u5316\u5904\u7406\nmin_max_scaler = MinMaxScaler()\nfull['Fare']= pd.DataFrame(min_max_scaler.fit_transform(full['Fare'].values.reshape(-1,1)))\nfull.head()","c044504e":"'''\n\u5c06\u540c\u4ee3\u76f4\u7cfb\u4eb2\u5c5e\u6570SibSp\u548c\u4e0d\u540c\u4ee3\u76f4\u7cfb\u4eb2\u5c5e\u6570Parch\u7ec4\u6210\u7ec4\u5408\u7279\u5f81\u5bb6\u5ead\u6210\u5458\u6570Family\nFamilySize = SibSp+Parch+1(\u81ea\u5df1)\n'''\n# \u5b58\u653e\u5bb6\u5ead\u6210\u5458\u6570\nfamilyDf = pd.DataFrame()\nfamilyDf['FamilySize'] = full['SibSp'] + full['Parch'] + 1\nfamilyDf['FamilySize'].describe()","93110644":"'''\n\u5c06\u5bb6\u5ead\u6210\u5458\u6570\u6620\u5c04\u81f3\u5bb6\u5ead\u7c7b\u522b\uff1a\n\u5c0f\u5bb6\u5ead\uff1a\u5bb6\u5ead\u6210\u5458\u6570=1\n\u4e2d\u7b49\u5bb6\u5ead\uff1a2<=\u5bb6\u5ead\u6210\u5458\u6570<=4\n\u5927\u5bb6\u5ead\uff1a\u5bb6\u5ead\u6210\u5458\u6570>=5\n'''\n# \u6620\u5c04\u81f3\u5bb6\u5ead\u7c7b\u522b\nfamilyDf['Family_Single'] = familyDf['FamilySize'].map(lambda s:1 if s==1 else 0)\nfamilyDf['Family_Small'] = familyDf['FamilySize'].map(lambda s:1 if s>=2 and s<=4 else 0)\nfamilyDf['Family_Large'] = familyDf['FamilySize'].map(lambda s:1 if s>=5 else 0)\nfamilyDf.head()","33fbf1ca":"# \u5c06\u7ec4\u5408\u7279\u5f81\u548c\u5206\u7ea7\u7279\u5f81\u6dfb\u52a0\u81f3\u6cf0\u5766\u5c3c\u514b\u53f7\u6570\u636e\u96c6\nfull = pd.concat([full,familyDf],axis=1)\n# \u5220\u9664\u539f\u59cbSibSp\u548cParch\u5217\nfull.drop(['SibSp','Parch'],axis=1,inplace=True)\nfull.head()","827f34f5":"# Name\n# one-hot\u7f16\u7801\n'''\n\u5c06\u6027\u522b\u6620\u5c04\u4e3a\u6570\u503c\n\u7537\uff08male\uff09\u5bf9\u5e94\u6570\u503c1\uff0c\u5973\uff08female\uff09\u5bf9\u5e94\u6570\u503c0\n'''\nsex_mapDict = {'male':1,'female':0}\nfull['Sex'] = full['Sex'].map(sex_mapDict)\nfull['Sex'].head()","7c8a264f":"# Embarked\n# 1.\u5b58\u653e\u63d0\u53d6\u540e\u7684\u7279\u5f81\nembarkedDf = pd.DataFrame()\n# 2.\u4f7f\u7528get_dummies\u8fdb\u884cone-hot\u7f16\u7801\uff0c\u5217\u660e\u524d\u7f00\u4e3aEmbarked\nembarkedDf = pd.get_dummies(full['Embarked'],prefix='Embarked')\nembarkedDf.head()","9894a153":"# \u6dfb\u52a0one-hot\u7f16\u7801\u540e\u7684\u865a\u62df\u53d8\u91cf\uff08dummy variables\uff09\u5230\u6cf0\u5766\u5c3c\u514b\u53f7\u6570\u636e\u96c6full\nfull = pd.concat([full,embarkedDf],axis=1)\n# \u5220\u9664one-hot\u7f16\u7801\u524d\u7684Embarked\u5217\nfull.drop(['Embarked'],axis=1,inplace=True)\nfull.head()","86e509ca":"# Pclass\n# 1.\u5b58\u653e\u63d0\u53d6\u540e\u7684\u7279\u5f81\npclassDf = pd.DataFrame()\n# 2.\u4f7f\u7528get_dummies\u8fdb\u884cone-hot\u7f16\u7801\uff0c\u5217\u660e\u524d\u7f00\u4e3aPclass\npclassDf = pd.get_dummies(full['Pclass'],prefix='Pclass')\npclassDf.head()","b386b0c1":"# \u6dfb\u52a0one-hot\u7f16\u7801\u540e\u7684\u865a\u62df\u53d8\u91cf\uff08dummy variables\uff09\u5230\u6cf0\u5766\u5c3c\u514b\u53f7\u6570\u636e\u96c6full\nfull = pd.concat([full,pclassDf],axis=1)\n# \u5220\u9664one-hot\u7f16\u7801\u524d\u7684Pclass\u5217\nfull.drop(['Pclass'],axis=1,inplace=True)\nfull.head()","4d9746e5":"# Name\n# \u63d0\u53d6title\n# 1.\u5b58\u653e\u63d0\u53d6\u540e\u7684\u7279\u5f81\ntitleDf = pd.DataFrame()\n# 2.\u4f7f\u7528map\u51fd\u6570\uff1a\u5bf9Seris\u7684\u6bcf\u4e2a\u6570\u636e\u5e94\u7528\u81ea\u5b9a\u4e49\u7684\u51fd\u6570\ntitleDf['Title'] = full['Name'].map(getTitle)\ntitleDf.head()","fc5705d3":"# \u67e5\u770b\u79f0\u8c13\u7c7b\u522b\ntitleDf['Title'].value_counts()","7a325dfe":"# \u8bbe\u7f6etitle\u548c\u5934\u8854\u7684\u6620\u5c04\u5b57\u5178\ntitle_mapDict = {'Capt':'Officer',\n                'Col':'Officer',\n                'Major':'Officer',\n                'Jonkheer':'Royalty',\n                'Don':'Royalty',\n                'Sir':'Royalty',\n                'the Countess':'Royalty',\n                 'Dona':'Royalty',\n                 'Dr':'Officer',\n                 'Rev':'Officer',\n                 'Lady':'Royalty',\n                 'Mr':'Mr',\n                 'Miss':'Miss',\n                 'Mrs':'Mrs',\n                 'Master':'Master',\n                 'Mlle':'Miss',\n                 'Mme':'Mrs',\n                 'Ms':'Mrs'\n                }","a7a3c349":"# \u4f7f\u7528map\u51fd\u6570\u8fdb\u884c\u6620\u5c04\ntitleDf['Title'] = titleDf['Title'].map(title_mapDict)\n# \u4f7f\u7528get_dummies\u8fdb\u884cone-hot\u7f16\u7801\ntitleDf = pd.get_dummies(titleDf['Title'])\ntitleDf.head()","2de174ee":"# \u6dfb\u52a0one-hot\u7f16\u7801\u540e\u7684\u865a\u62df\u53d8\u91cf\uff08dummy variables\uff09\u5230\u6cf0\u5766\u5c3c\u514b\u53f7\u6570\u636e\u96c6full\nfull = pd.concat([full,titleDf],axis=1)\n# \u5220\u9664one-hot\u7f16\u7801\u524d\u7684name\u5217\nfull.drop(['Name'],axis=1,inplace=True)\nfull.head()","96198b3b":"# \u67e5\u770b\u8239\u8231\u53f7\u5185\u5bb9\nfull['Cabin'].head()","de93b02c":"# Cabin\ncabinDf = pd.DataFrame()\n'''\n\u5ba2\u8231\u53f7\u7684\u7c7b\u522b\u503c\u662f\u9996\u5b57\u6bcd\uff0c\u4f8b\u5982\uff1a\nC85 \u7c7b\u522b\u6620\u5c04\u4e3a\u9996\u5b57\u6bcdC\n'''\nfull['Cabin'] = full['Cabin'].map(lambda c:c[0])\n\n# \u4f7f\u7528get_dummuies\u8fdb\u884cone-hot\u7f16\u7801\uff0c\u5217\u540d\u524d\u7f00\u4e3aCabin\ncabinDf = pd.get_dummies(full['Cabin'],prefix='Cabin')\ncabinDf.head()","29df6eac":"# \u6dfb\u52a0one-hot\u7f16\u7801\u540e\u7684\u865a\u62df\u53d8\u91cf\uff08dummy variables\uff09\u5230\u6cf0\u5766\u5c3c\u514b\u53f7\u6570\u636e\u96c6\nfull = pd.concat([full,cabinDf],axis=1)\n# \u5220\u9664one-hot\u7f16\u7801\u524d\u7684Cabin\u5217\nfull.drop(['Cabin'],axis=1,inplace=True)\nfull.head()","d364dff1":"# Ticket\nfull['Ticket'] = full['Ticket'].map(getTicket)\n# one_hot\u7f16\u7801\nticketDf = pd.get_dummies(full['Ticket'],prefix='Ticket')\nfull = pd.concat([full,ticketDf],axis=1)\nfull.drop(['Ticket'],axis=1,inplace=True)\nfull.head()","591c79a4":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import SelectFromModel","495b1098":"# \u67e5\u770b\u7279\u5f81\u6570\u91cf\nfull.shape","9df59b2e":"# \u5220\u9664PassengerId\u5217\nfull_noid = full.drop(['PassengerId'],axis=1)","4f420346":"# \u8fd8\u539f\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\ndef reverse(full):\n    full_c = full.copy(deep=True)\n    type(full_c)\n    # \u539f\u59cb\u6570\u636e\u96c6\u5171\u6709891\u884c\n    train_num= 891\n    # \u5b58\u50a8\u539f\u59cb\u6570\u636e\u96c6\uff1a\u7279\u5f81\n    train_X = full_c.drop(columns ='Survived',axis=1).loc[0:train_num-1,:]\n    # \u5b58\u50a8\u539f\u59cb\u6570\u636e\u96c6\uff1a\u6807\u7b7e\n    train_y = full.loc[0:train_num-1,'Survived']\n    # \u9884\u6d4b\u6570\u636e\u96c6\n    pred_X = full_c.drop(columns ='Survived',axis=1).loc[train_num:,:]\n    \n    return train_X,train_y,pred_X","b9db3ddc":"train_X,train_y,pred_X = reverse(full_noid)","ecf15eec":"print(train_X.shape,train_y.shape,pred_X.shape)","e2bb562e":"clf = RandomForestClassifier(n_estimators=100,max_features='sqrt')\nclf = clf.fit(train_X,train_y)","8386675d":"# \u67e5\u770bfeature importance \nfeatures =pd.DataFrame()\nfeatures['feature']=train_X.columns\nfeatures['importance'] = clf.feature_importances_\nfeatures.sort_values(by='importance',ascending=True,inplace=True)\nfeatures.set_index(['feature'],inplace=True)\nfeatures.plot(kind='barh',figsize=(20,20))","84fb1310":"slf = SelectFromModel(clf,prefit=True)\ntrain_X_new = slf.transform(train_X)\nprint('\u7279\u5f81\u9009\u62e9\u524d\u8bad\u7ec3\u7279\u5f81\u4e2a\u6570\uff1a',train_X.shape[1],\n     '\\n\u7279\u5f81\u9009\u62e9\u540e\u8bad\u7ec3\u7279\u5f81\u4e2a\u6570\uff1a',train_X_new.shape[1])\npred_X_new = slf.transform(pred_X)\nprint('\u7279\u5f81\u9009\u62e9\u524d\u9884\u6d4b\u7279\u5f81\u4e2a\u6570\uff1a',pred_X.shape[1],\n     '\\n\u7279\u5f81\u9009\u62e9\u540e\u9884\u6d4b\u7279\u5f81\u4e2a\u6570\uff1a',pred_X_new.shape[1])","e8c9e654":"'''\n\u786e\u4fdd\u539f\u59cb\u6570\u636e\u96c6\u5927\u5c0f\u4e3a891\uff0c\u4e14\u4e0e\u9884\u6d4b\u6570\u636e\u96c6\u7ef4\u6570\u76f8\u540c\uff0c\u4ee5\u9632\u6b62\u6784\u5efa\u6a21\u578b\u65f6\u62a5\u9519\n'''\nprint('\u539f\u59cb\u6570\u636e\u96c6\u5927\u5c0f\uff1a',train_X_new.shape)\nprint('\u9884\u6d4b\u6570\u636e\u96c6\u5927\u5c0f\uff1a',pred_X_new.shape)","abf32c3e":"'''\n\u62c6\u5206\u8bad\u7ec3\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e\n'''\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(train_X_new,train_y,train_size=.8)\nprint('\u8bad\u7ec3\u6570\u636e\u96c6\u7279\u5f81:',X_train.shape,\n     '\u6d4b\u8bd5\u6570\u636e\u96c6\u7279\u5f81\uff1a',X_test.shape,\n     )\nprint('\u8bad\u7ec3\u6570\u636e\u96c6\u6807\u7b7e\uff1a',y_train.shape,\n     '\u6d4b\u8bd5\u6570\u636e\u96c6\u6807\u7b7e\uff1a',y_test.shape)","374666a4":"from sklearn.linear_model import LogisticRegression,LogisticRegressionCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble.gradient_boosting import GradientBoostingClassifier \nfrom sklearn.svm import  SVC\nfrom xgboost import XGBClassifier,XGBRFClassifier\nfrom sklearn.model_selection import cross_val_score","d5e0ccbf":"lr = LogisticRegression()\nrfc = RandomForestClassifier()\ngboosting = GradientBoostingClassifier()\nsvc = SVC()\nxgb = XGBClassifier()\nxgbrfc = XGBRFClassifier()\n\nmodels = [lr,rfc,gboosting,svc,xgb,xgbrfc]","e778481f":"# \u6a21\u578b\u9009\u62e9\nfor model in models:\n    print('Cross validation of:{0}'.format(model.__class__))\n    score = cross_val_score(model,X_train,y_train,cv=5,scoring='accuracy')\n    score = score.mean()\n    print('score = {0}'.format(score))","58240197":"from sklearn.model_selection import GridSearchCV","98167574":"param_test1 = {\n    'n_estimators':range(20,81,10)\n}\n# \u8bad\u7ec3\u53c2\u6570\ngsearch1 = GridSearchCV(estimator=GradientBoostingClassifier(\n    learning_rate=0.1,\n    max_depth=6,\n    min_samples_split=5,\n    min_samples_leaf=2,\n    max_features='sqrt',\n    subsample=0.8,\n    random_state=10\n    ),param_grid=param_test1,scoring=\"accuracy\",n_jobs=4,iid=False,cv=5\n)\ngsearch1.fit(X_train,y_train)\nn_estimators = gsearch1.best_params_['n_estimators']\nprint(gsearch1.scoring) \nprint(gsearch1.best_params_)\nprint(gsearch1.best_score_) ","5220a21a":"param_test2 = {\n    'max_depth':range(2,8),\n    'min_samples_split':range(2,10)\n}\n# \u8bad\u7ec3\u53c2\u6570\ngsearch2 = GridSearchCV(estimator=GradientBoostingClassifier(\n    learning_rate=0.1,\n    n_estimators=n_estimators,\n    min_samples_leaf=2,\n    max_features='sqrt',\n    subsample=0.8,\n    random_state=10\n    ),param_grid=param_test2,scoring=\"accuracy\",n_jobs=4,iid=False,cv=5\n)\ngsearch2.fit(X_train,y_train)\nmax_depth = gsearch2.best_params_['max_depth']\nprint(gsearch2.scoring) \nprint(gsearch2.best_params_)\nprint(gsearch2.best_score_) ","08cbdad1":"param_test3 = {\n    'min_samples_split':range(2,10),\n    'min_samples_leaf':range(2,20)\n}\n# \u8bad\u7ec3\u53c2\u6570\ngsearch3 = GridSearchCV(estimator=GradientBoostingClassifier(\n    learning_rate=0.1,\n    max_depth=max_depth,\n    n_estimators=n_estimators,\n    max_features='sqrt',\n    subsample=0.8,\n    random_state=10\n    ),param_grid=param_test3,scoring=\"accuracy\",n_jobs=4,iid=False,cv=5\n)\ngsearch3.fit(X_train,y_train)\nmin_samples_split=gsearch3.best_params_['min_samples_split']\nmin_samples_leaf=gsearch3.best_params_['min_samples_leaf']\nprint(gsearch3.scoring) \nprint(gsearch3.best_params_)\nprint(gsearch3.best_score_) ","7d7431e8":"param_test4 = {\n    'subsample':[0.6,0.7,0.75,0.8,0.85,0.9]\n}\n# \u8bad\u7ec3\u53c2\u6570\ngsearch4 = GridSearchCV(estimator=GradientBoostingClassifier(\n    learning_rate=0.1,\n    max_depth=max_depth,\n    n_estimators=n_estimators,\n    max_features='sqrt',\n    min_samples_split=min_samples_split,\n    min_samples_leaf=min_samples_leaf,\n    random_state=10\n    ),param_grid=param_test4,scoring=\"accuracy\",n_jobs=4,iid=False,cv=5\n)\ngsearch4.fit(X_train,y_train)\nsubsample=gsearch4.best_params_['subsample']\nprint(gsearch4.scoring) \nprint(gsearch4.best_params_)\nprint(gsearch4.best_score_) ","429e48a2":"# \u8bbe\u7f6elearning_rate=0.01\uff0c\u6b64\u65f6\u6709400\u4e2a\u6811\ngbm=GradientBoostingClassifier(\n    learning_rate=0.01,\n    max_depth=max_depth,\n    n_estimators=n_estimators*10,\n    max_features='sqrt',\n    min_samples_split=min_samples_split,\n    min_samples_leaf=min_samples_leaf,\n    subsample=subsample,\n    random_state=10\n)\n# gbm.fit(X_train,y_train)\n# print(gbm.score(X_test,y_test)) \n\n# \u4f7f\u7528\u5168\u90e8\u8bad\u7ec3\u6837\u672c\u6784\u5efa\u6a21\u578b\ngbm.fit(train_X_new,train_y)","5b26de4f":"# \u4f7f\u7528\u673a\u5668\u5b66\u4e60\u6a21\u578b\uff0c\u5bf9\u9884\u6d4b\u6570\u636e\u96c6\u4e2d\u7684\u751f\u5b58\u60c5\u51b5\u8fdb\u884c\u9884\u6d4b\npred_y = gbm.predict(pred_X_new)","8a9d74bd":"pred_y","c61f316d":"'''\n\u9884\u6d4b\u7ed3\u679c\u4e3afloat\u7c7b\u578b\uff0ckaggle\u8981\u6c42\u63d0\u4ea4\u7684\u7ed3\u679c\u4e3aint\u578b\uff0c\n\u9700\u8981\u8f6c\u6362\u6570\u636e\u7c7b\u578b\n'''\npred_y = pred_y.astype(int)","d35509df":"# \u4e58\u5ba2id\npassengerId = full.loc[891:,'PassengerId']\n# \u6570\u636e\u6846\uff1a\u4e58\u5ba2id,\u9884\u6d4b\u751f\u5b58\u60c5\u51b5\npredDf = pd.DataFrame(\n{'PassengerId':passengerId,\n'Survived':pred_y})\npredDf.shape","296cdd25":"predDf.head()","9dc3b861":"# \u4fdd\u5b58\u7ed3\u679c\npredDf.to_csv('titanic_pred.csv',index=False)","7c79da9a":"## \u63a2\u7d22\u6027\u6570\u636e\u5206\u6790(EDA)","1cee054a":"## \u5bfc\u5165\u6570\u636e","786061b0":"\u66f4\u65b0n_estimators\u7684\u503c\n\n\u7ee7\u7eed\u8bad\u7ec3\u53c2\u6570max_depth\u548cmin_samples_split","dda2ac68":"### \u67e5\u770b\u7c7b\u522b\u578b\u7279\u5f81\u7684\u5206\u5e03","8a26b8f5":"** \u6570\u503c\u578b\u7279\u5f81\u5206\u5e03\u7ed3\u679c\u663e\u793a: **\n\n(1)\u8239\u4e0a\u4e58\u5ba2\u5e74\u9f84\u591a\u96c6\u4e2d\u4e8e16-40\u5c81.\n\n(2)\u8239\u7968\u4ef7\u683c\u8d8a\u9ad8,\u4e58\u5ba2\u6570\u91cf\u8d8a\u5c11.\n\n(3)\u72ec\u81ea\u4e58\u8239\u7684\u4e58\u5ba2\u6570\u91cf\u660e\u663e\u591a\u4e8e\u6709\u4eb2\u5c5e\u540c\u884c\u7684\u4e58\u5ba2\u6570\u91cf.","10c836aa":"#### \u7c7b\u522b\u578b\u7279\u5f81","07c8c028":"\u8bad\u7ec3\u6570\u636e\u753112\u4e2a\u5b57\u6bb5\u7ec4\u6210,\u5404\u5b57\u6bb5\u542b\u4e49\u5982\u4e0b\u8868\u6240\u793a:","33c58420":"\u56fe\u4e2d\u7ed3\u679c\u663e\u793a:\n\n(1) 0-10\u5c81\u4e58\u5ba2\u751f\u5b58\u7387\u660e\u663e\u9ad8\u4e8e\u5176\u4f59\u5e74\u9f84\u6bb5\u4e58\u5ba2\u7684\u751f\u5b58\u7387.\n\n(2) 10-60\u5c81\u7684\u4e58\u5ba2\u751f\u5b58\u7387\u57fa\u672c\u76f8\u5f53.\n\n(3) 60\u5c81\u4ee5\u4e0a\u7684\u4e58\u5ba2\u751f\u5b58\u7387\u76f8\u5bf9\u504f\u4f4e.","092fc22a":"** \u67e5\u770b\u6570\u636e\u540e,\u83b7\u53d6\u5230\u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f\u5982\u4e0b: **\n\n* \u6570\u636e\u96c6\u5927\u5c0f\n\n\u8bad\u7ec3\u6570\u636e\u96c6\uff1a(891, 12)\n\n\u6d4b\u8bd5\u6570\u636e\u96c6\uff1a(418, 11)\n\n\u5408\u5e76\u6570\u636e\u96c6\uff1a(1309, 12)\n\n* \u6570\u636e\u7f3a\u5931\u60c5\u51b5\n\n\u65e0\u7f3a\u5931\u5b57\u6bb5\uff1aName\u3001Parch\u3001PassengerId\u3001Pclass \u3001Sex\u3001SibSp\u3001Ticket\u3001Survived\n\n\u7f3a\u5931\u4e00\u884c\u7684\u5b57\u6bb5\uff1aFare\n\n\u7f3a\u5931\u4e24\u884c\u7684\u5b57\u6bb5\uff1aEmbarked\n\n\u7f3a\u5931\u91cf\u8f83\u5927\u7684\u5b57\u6bb5\uff1aAge\uff08\u7f3a\u5931\u767e\u5206\u6bd4\uff1a20%\uff09\u3001Cabin\uff08\u7f3a\u5931\u767e\u5206\u6bd4\uff1a77%\uff09","273b68c6":"## 5.1\u5c06\u9884\u6d4b\u7ed3\u679c\u4e0a\u4f20\u81f3kaggle","249a42bd":"\u4e0e\u8bad\u7ec3\u6570\u636e\u76f8\u6bd4,\u6d4b\u8bd5\u6570\u636e\u53ea\u670911\u5217,\u7f3a\u5c11\u4e86Survived\u5217.\u8be5\u5217\u4e3a\u5f85\u9884\u6d4b\u7684\u6807\u7b7e\u5217,\u9700\u8981\u6211\u4eec\u57fa\u4e8e\u8bad\u7ec3\u6570\u636e\u6784\u5efa\u6a21\u578b\u540e\u518d\u8fdb\u884c\u6807\u6ce8.","ada4706c":"\u5c06\u91c7\u96c6\u5230\u7684\u6570\u636e\u4fdd\u5b58\u81f3\u672c\u5730,\u4ee5\u65b9\u4fbf\u5bfc\u5165\u548c\u5206\u6790.\n\n\u8be5\u9879\u76ee\u5305\u542b\u4e24\u4e2a\u57fa\u7840\u6570\u636e\u6587\u4ef6:train.csv\u548ctest.csv.","1a54a85f":"## \u91c7\u96c6\u6570\u636e","fde06193":"### 3.2.1\u7279\u5f81\u63d0\u53d6","31c14498":"\u8bad\u7ec3\u6570\u636e\u4e2d\uff0c\u76ee\u6807\u53d8\u91cfSurvived\u4e3a0\u7684\u8bb0\u5f55\u91cf\u548c\u4e3a1\u7684\u8bb0\u5f55\u91cf\u6bd4\u4f8b\u7ea6\u4e3a5\uff1a3.","8a4b86c6":"# 3.\u6570\u636e\u6e05\u6d17","8dfbce1a":"![\u5b57\u6bb5\u542b\u4e49](https:\/\/i.loli.net\/2019\/07\/16\/5d2d31a51a05935036.png)","9f0ad2ec":"### \u67e5\u770b\u76ee\u6807\u53d8\u91cf\u7684\u5206\u5e03","c7542910":"### 3.2.2\u7279\u5f81\u9009\u62e9","b47943f8":"\u66f4\u65b0min_samples_split\u548cmin_samples_leaf\u7684\u503c\n\n\u7ee7\u7eed\u8bad\u7ec3subsample","b33c95a6":"** \u4e86\u89e3\u9879\u76ee\u9700\u6c42\u4e4b\u540e\uff0c\u9700\u8981\u5bf9\u53ef\u7528\u6570\u636e\u8fdb\u884c\u57fa\u672c\u7684\u7406\u89e3\u3002python\u5b9e\u73b0\u6570\u636e\u7406\u89e3\u7684\u57fa\u672c\u6b65\u9aa4\u4e3a\uff1a **\n\n(1) \u91c7\u96c6\u6570\u636e\n\n(2) \u5bfc\u5165\u6570\u636e\n\n(3) \u67e5\u770b\u6570\u636e\n\n(4) \u63a2\u7d22\u6027\u6570\u636e\u5206\u6790","1fbfd8df":"** \u6570\u503c\u7c7b\u578b **\n* \u5e74\u9f84\n* \u8239\u7968\u4ef7\u683c\n* \u540c\u4ee3\u76f4\u7cfb\u4eb2\u5c5e\n* \u975e\u540c\u4ee3\u76f4\u7cfb\u4eb2\u5c5e","34016a93":"* \u5b57\u7b26\u4e32\u578b","493f7be3":"### \u5355\u4e00\u7279\u5f81\u4e0e\u76ee\u6807\u53d8\u91cf\u5173\u8054\u5206\u6790","ae20870e":"\u6cf0\u5766\u5c3c\u514b\u53f7\uff08RMS Titanic\uff09\uff0c\u53c8\u8bd1\u4f5c\u94c1\u8fbe\u5c3c\u53f7\uff0c\u662f\u82f1\u56fd\u767d\u661f\u822a\u8fd0\u516c\u53f8\u4e0b\u8f96\u7684\u4e00\u8258\u5965\u6797\u5339\u514b\u7ea7\u90ae\u8f6e\uff0c\u6392\u6c34\u91cf46000\u5428\uff0c\u4e8e1909\u5e743\u670831\u65e5\u5728\u5317\u7231\u5c14\u5170\u8d1d\u5c14\u6cd5\u65af\u7279\u6e2f\u7684\u54c8\u5170\u5fb7\u4e0e\u6c83\u5c14\u592b\u9020\u8239\u5382\u52a8\u5de5\u5efa\u9020\uff0c1911\u5e745\u670831\u65e5\u4e0b\u6c34\uff0c1912\u5e744\u67082\u65e5\u5b8c\u5de5\u8bd5\u822a\u3002\n\n\u6cf0\u5766\u5c3c\u514b\u53f7\u662f\u5f53\u65f6\u4e16\u754c\u4e0a\u4f53\u79ef\u6700\u5e9e\u5927\u3001\u5185\u90e8\u8bbe\u65bd\u6700\u8c6a\u534e\u7684\u5ba2\u8fd0\u8f6e\u8239\uff0c\u6709\u201c\u6c38\u4e0d\u6c89\u6ca1\u201d\u7684\u7f8e\u8a89 \u3002\u7136\u800c\u4e0d\u5e78\u7684\u662f\uff0c\u5728\u5b83\u7684\u5904\u5973\u822a\u4e2d\uff0c\u6cf0\u5766\u5c3c\u514b\u53f7\u4fbf\u906d\u5384\u8fd0\u2014\u2014\u5b83\u4ece\u82f1\u56fd\u5357\u5b89\u666e\u6566\u51fa\u53d1\uff0c\u9014\u7ecf\u6cd5\u56fd\u745f\u5821-\u5965\u514b\u7279\u7ef4\u5c14\u4ee5\u53ca\u7231\u5c14\u5170\u79d1\u592b(Cobh)\uff0c\u9a76\u5411\u7f8e\u56fd\u7ebd\u7ea6\u30021912\u5e744\u670814\u65e523\u65f640\u5206\u5de6\u53f3\uff0c\u6cf0\u5766\u5c3c\u514b\u53f7\u4e0e\u4e00\u5ea7\u51b0\u5c71\u76f8\u649e\uff0c\u9020\u6210\u53f3\u8237\u8239\u824f\u81f3\u8239\u4e2d\u90e8\u7834\u88c2\uff0c\u4e94\u95f4\u6c34\u5bc6\u8231\u8fdb\u6c34\u3002\u6b21\u65e5\u51cc\u66682\u65f620\u5206\u5de6\u53f3\uff0c\u6cf0\u5766\u5c3c\u514b\u8239\u4f53\u65ad\u88c2\u6210\u4e24\u622a\u540e\u6c89\u5165\u5927\u897f\u6d0b\u5e953700\u7c73\u5904\u30022224\u540d\u8239\u5458\u53ca\u4e58\u5ba2\u4e2d\uff0c1502\u4eba\u4e27\u751f\uff0c\u751f\u8fd8\u7387\u4ec5\u670932%\u3002\u8fd9\u573a\u8038\u4eba\u542c\u95fb\u7684\u60b2\u5267\u9707\u60ca\u4e86\u56fd\u9645\u793e\u4f1a\uff0c\u4fc3\u4f7f\u5404\u56fd\u81f4\u529b\u4e8e\u5236\u5b9a\u66f4\u5b8c\u5584\u7684\u8239\u8236\u5b89\u5168\u6761\u4f8b\u3002\n\n\u4e0b\u56fe\u663e\u793a\u4e3a\u6cf0\u5766\u5c3c\u514b\u53f7\u7684\u822a\u884c\u8def\u7ebf\u56fe\uff0c\u8f6e\u8239\u57284\u670810\u65e512\u70b9\u4ece\u82f1\u56fd\u5357\u5b89\u666e\u987f\uff08Southampton\uff09\u51fa\u53d1\uff0c\u5f53\u5929\u665a\u4e0a7\u70b9\uff0819\u70b9\uff09\u8239\u505c\u6cca\u5728\u6cd5\u56fd\u745f\uff08she\uff09\u5821\u5e02\uff08Cherbourg\uff09\uff0c\u7136\u540e\u5728\u665a\u4e0a9\u70b9\uff0821\u70b9\uff09\u79bb\u5f00\u6cd5\u56fd\u745f\u4fdd\u5e02\u3002\u7b2c2\u5929\uff081912\u5e744\u670811\u65e5\uff09\u4e2d\u534812\u70b9\u534a\u5230\u8fbe\u7231\u5c14\u5170\u6606\u58eb\u6566(Queenstown)\uff0c\u4e0b\u53482\u70b9\uff0814\u70b9\uff09\u79bb\u5f00\u7231\u5c14\u5170\u9a76\u5411\u7f8e\u56fd\u7ebd\u7ea6\u3002 \u7b2c5\u5929\uff081912\u5e744\u670814\u65e5\uff09\u665a\u4e0a11\u70b940\uff0823\u70b940\uff09\u8f6e\u8239\u822a\u884c\u81f3\u5706\u5708\u5708\u6ce8\u5730\u70b9\u65f6\uff0c\u4e0d\u5e78\u4e0e\u51b0\u5c71\u76f8\u649e\u3002\u7b2c6\u5929\u65e9\u4e0a\uff081912\u5e744\u670815\u65e5\uff092\u70b920\u5168\u8239\u6c89\u6ca1\u3002","173f0116":"\u4e0a\u56fe\u4e2d\u7ed3\u679c\u663e\u793a,\u4e00\u7b49\u8231\u4e58\u5ba2\u751f\u5b58\u7387\u5927\u4e8e60%,\u4e8c\u7b49\u8231\u4e58\u5ba2\u751f\u5b58\u7387\u5927\u4e8e45%,\u800c\u4e09\u7b49\u8231\u4e58\u5ba2\u751f\u5b58\u7387\u4e0d\u8db325%.\n\n\u8fd9\u8868\u660e:\u8239\u8231\u7b49\u7ea7\u8d8a\u9ad8,\u4e58\u5ba2\u7684\u751f\u5b58\u7387\u8d8a\u9ad8.","5ba3518f":"## 3.1\u6570\u636e\u9884\u5904\u7406","7063aa3c":"##### \u76f4\u63a5\u5206\u7c7b\u7c7b\u578b\n* \u6027\u522b\n* \u767b\u8239\u6e2f\u53e3\n* \u5ba2\u8231\u7b49\u7ea7","34d23de1":"\u4f7f\u7528\u968f\u673a\u68ee\u6797\u7b97\u6cd5\uff0c\u8bad\u7ec3\u4e0d\u540c\u7279\u5f81\u7ec4\u5408\u4e0b\u6a21\u578b\u7684\u9884\u6d4b\u7ed3\u679c\u3002\u8bad\u7ec3\u540e\u53ef\u4ee5\u5f97\u5230\u6bcf\u4e2a\u7279\u5f81\u7684\u91cd\u8981\u6027\uff0c\u9009\u53d6\u91cd\u8981\u6027\u9ad8\u7684\u7279\u5f81\u4f5c\u4e3a\u8bad\u7ec3\u7279\u5f81\u3002","a70d15af":"** \u6309\u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\u8fdb\u884c\u5206\u7c7b\uff1a **\n\n1.\u6570\u503c\u7c7b\u578b\n\n    * Age\n    * Fare\n    * PassengerId\n    * Sibsp\n    * Parch\n2.\u7c7b\u522b\u578b\n\n1\uff09\u6709\u76f4\u63a5\u7c7b\u522b\u7684\n\n    * Sex\n    * Embarked\n    * Pclass\n2\uff09\u5b57\u7b26\u4e32\u578b\n\n    * Name\n    * Cabin\n    * Ticket","1767c0b6":"[\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7dKaggle\u6cf0\u5766\u5c3c\u514b\u53f7\u6e90\u6570\u636e](https:\/\/www.kaggle.com\/c\/titanic\/data)","5691a6a7":"## 4.1\u6784\u5efa\u8bad\u7ec3\u6570\u636e\u96c6\u548c\u6d4b\u8bd5\u6570\u636e\u96c6","2426df42":"\u89c2\u5bdfTickets\u53d6\u503c\u60c5\u51b5,\u53d1\u73b0\u5176\u53d6\u503c\u7c7b\u578b\u5206\u4e3a:\u7eaf\u6570\u5b57,\u5b57\u6bcd(\u53ef\u80fd\u6709.\u6216\/\u5206\u9694\u7b26)+\u7a7a\u683c+\u6570\u5b57 \u4e24\u79cd.\n\n\u6211\u4eec\u5c06\u7eaf\u6570\u5b57\u5f52\u4e3a\u4e00\u4e2a\u7c7b\u522b,\u5b57\u6bcd+\u7a7a\u683c+\u6570\u5b57 \u7684\u503c\u53d6\u7a7a\u683c\u524d\u7684\u5b57\u6bcd\u88ab\u5206\u9694\u7684\u7b2c\u4e00\u90e8\u5206\u4f5c\u4e3a\u7c7b\u522b\u503c.","b2ec02f4":"### 3.1.1\u7f3a\u5931\u6570\u636e\u5904\u7406","15f87c61":"# 2 \u7406\u89e3\u6570\u636e","c5c35365":"### \u67e5\u770b\u6570\u503c\u578b\u7279\u5f81\u7684\u5206\u5e03","bc6fcbad":"# 1 \u63d0\u51fa\u95ee\u9898","8cbcb2a3":"\u66f4\u65b0subsample\u7684\u503c\uff0c\u5f97\u5230\u8c03\u4f18\u540e\u7684\u53c2\u6570\u3002","11e36251":" \u6309importance\u6392\u5e8f\uff0c\u9009\u53d6\u91cd\u8981\u6027\u8f83\u9ad8\u7684\u7279\u5f81\uff0c\u4f5c\u4e3a\u8bad\u7ec3\u7279\u5f81","f717fe89":"\u5bf9\u6570\u503c\u578b\u7279\u5f81\u8fdb\u884c\u6807\u51c6\u5316\u5904\u7406","d4c765c1":"## 4.2\u9009\u62e9\u673a\u5668\u5b66\u4e60\u6a21\u578b","ec9437bf":"\u5206\u6790\u7ed3\u679c\u663e\uff0c\u91cd\u8981\u6027\u6700\u9ad8\u7684\u7279\u5f81\u4e3a\uff1a\u5e74\u9f84\uff08Age\uff09\u3001\u8239\u7968\u4ef7\u683c\uff08Fare\uff09\u548c\u6027\u522b\uff08Sex\uff09","f3486ecd":"![titanic route](https:\/\/i.loli.net\/2019\/07\/16\/5d2d318774d6045869.jpg)","d684a3ad":"\u6570\u636e\u548c\u7279\u5f81\u51b3\u5b9a\u4e86\u673a\u5668\u5b66\u4e60\u7684\u4e0a\u9650\uff0c\u800c\u6a21\u578b\u548c\u7b97\u6cd5\u53ea\u662f\u903c\u8fd1\u8fd9\u4e2a\u4e0a\u9650\u800c\u5df2\u3002\n\n\u7279\u5f81\u5de5\u7a0b\u5c31\u662f\u6700\u5927\u9650\u5ea6\u5730\u4ece\u539f\u59cb\u6570\u636e\u4e2d\u63d0\u53d6\u7279\u5f81\uff0c\u4ee5\u4f9b\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u548c\u6a21\u578b\u4f7f\u7528\u3002\u6211\u4eec\u9700\u8981\u6df1\u523b\u7406\u89e3\u9879\u76ee\u9700\u6c42\uff0c\u4ece\u539f\u59cb\u6570\u636e\u4e2d\u5c3d\u53ef\u80fd\u591a\u7684\u6316\u6398\u53ef\u80fd\u4e0e\u9884\u6d4b\u76ee\u6807\u76f8\u5173\u7684\u7279\u5f81\uff0c\u4ee5\u4fbf\u8bad\u7ec3\u51fa\u9884\u6d4b\u7ed3\u679c\u66f4\u597d\u7684\u6a21\u578b\u3002","3fb381a7":"\u5c1d\u8bd5\u8c03\u6574\u641c\u7d22\u6b65\u957f\u53ca\u76f8\u5e94\u7684n_estimators\u503c\uff0c\u8bbe\u7f6e\u5408\u9002\u7684\u6b65\u957f\u503c\uff08\u4f8b\u5982\uff0c\u6b65\u957f\u7f29\u5c0f\u4e00\u500d\u53d8\u4e3a0.05\u65f6\uff0cmax_depth\u6269\u5927\u4e00\u500d\u53d8\u4e3a80\uff09","b7080a5b":"\u4e4b\u524d\u5bf9\u8fdb\u884c\u6570\u636e\u521d\u6b65\u67e5\u770b\u65f6\u53d1\u73b0,\u67d0\u4e9b\u5b57\u6bb5\u5b58\u5728\u7f3a\u5931.\n\n\u7531\u4e8e\u5f88\u591a\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u8981\u6c42\u8f93\u5165\u7684\u8bad\u7ec3\u6570\u636e\u4e2d\u4e0d\u80fd\u51fa\u73b0\u7a7a\u503c,\u5426\u5219\u4f1a\u62a5\u9519.\u6240\u4ee5\u9700\u8981\u901a\u8fc7\u586b\u5145\u6216\u5220\u9664,\u5bf9\u7f3a\u5931\u6570\u636e\u8fdb\u884c\u5904\u7406.","85f12dbf":"\u66f4\u65b0max_depth\u7684\u503c\n\n\u7ee7\u7eed\u8bad\u7ec3\u53c2\u6570min_samples_split\u548cmin_samples_leaf","baef435d":"# 4.\u6784\u5efa\u6a21\u578b","e0f39d59":"# 5\u65b9\u6848\u5b9e\u65bd","faf02c77":"1.\u8bbe\u7f6e\u521d\u59cb\u53c2\u6570\u503c\n2.\u8bbe\u7f6e\u5f85\u8bad\u7ec3\u53c2\u6570\u7684\u53d6\u503c\u8303\u56f4\uff0c\u5176\u4f59\u53c2\u6570\u503c\u56fa\u5b9a\u4e0d\u53d8\n3.\u641c\u7d22\u6700\u4f18\u53c2\u6570\u503c\uff0c\u5c06\u5bf9\u5e94\u7684\u53c2\u6570\u503c\u66f4\u65b0\u4e3a\u6700\u4f18\u503c\n4.\u91cd\u590d2\uff0c3.\u7ee7\u7eed\u8bad\u7ec3\u4e0b\u4e00\u7ec4\u53c2\u6570\u3002\n\n\u53c2\u6570\u8bad\u7ec3\u7684\u987a\u5e8f\u4e3a\uff1a\n* n_estimators\uff1a\u8fed\u4ee3\u6b21\u6570\n* max_depth\uff1a\u6811\u7684\u6700\u5927\u6df1\u5ea6\u3001min_samples_split\uff1a \u5185\u90e8\u8282\u70b9\u518d\u5212\u5206\u6240\u9700\u6700\u5c0f\u6837\u672c\u6570\uff0c\u8bad\u7ec3\u5f97\u5230max_depth\u6700\u4f18\u503c\n* min_samples_split\uff1a \u5185\u90e8\u8282\u70b9\u518d\u5212\u5206\u6240\u9700\u6700\u5c0f\u6837\u672c\u6570\u3001min_samples_leaf\uff1a\u53f6\u5b50\u8282\u70b9\u6700\u5c11\u6837\u672c\u6570\n* subsample\uff1a\u5b50\u91c7\u6837\u6bd4\u4f8b","67ff96b6":"##### \u5b57\u7b26\u4e32\u7c7b\u578b\n* \u59d3\u540d\n* \u5ba2\u8231\u53f7\n* \u8239\u7968\u7f16\u53f7","08f11d95":"\u6b64\u6b21\u6d77\u96be\u4e8b\u4ef6\u4f24\u4ea1\u60e8\u91cd\u7684\u4e3b\u8981\u539f\u56e0\u662f\uff1a\u4e58\u5ba2\u548c\u8239\u5458\u6ca1\u6709\u51c6\u5907\u8db3\u591f\u7684\u6551\u751f\u8247\u3002\n\n\u867d\u7136\u662f\u5426\u80fd\u591f\u5f97\u4ee5\u5e78\u5b58\u6d89\u53ca\u4e00\u4e9b\u8fd0\u6c14\u56e0\u7d20\uff0c\u4f46\u8003\u8651\u5230\u53d1\u751f\u707e\u96be\u540e\u91c7\u53d6\u7684\u6551\u63f4\u63aa\u65bd\uff0c\u6709\u4e9b\u4eba\u7684\u786e\u6bd4\u5176\u4ed6\u4eba\u66f4\u5bb9\u6613\u751f\u5b58\u4e0b\u6765\uff0c\u4f8b\u5982\u5987\u5973\uff0c\u513f\u7ae5\u548c\u4e0a\u6d41\u793e\u4f1a\u9636\u5c42\u4eba\u58eb\u3002\n\n\u5728\u672c\u6b21\u9879\u76ee\u4e2d\uff0c\u9700\u8981\u57fa\u4e8e\u63d0\u4f9b\u7684\u8239\u5458\u4fe1\u606f\u6570\u636e\uff0c\u5206\u6790\u54ea\u4e9b\u4eba\u66f4\u5bb9\u6613\u5b58\u6d3b\u4e0b\u6765\u3002","d6cacd7b":"## 4.4\u8bc4\u4f30\u6a21\u578b","4946378a":"** \u4e58\u5ba2\u6027\u522b,\u767b\u8239\u6e2f\u53e3,\u8239\u8231\u7b49\u7ea7\u5206\u5e03\u7ed3\u679c\u663e\u793a: **\n\n(1) \u7537\u6027\u4e58\u5ba2\u548c\u5973\u6027\u4e58\u5ba2\u6bd4\u4f8b\u7ea6\u4e3a2:1\n\n(2) \u7ea6\u670970%\u7684\u4e58\u5ba2\u4ece\u82f1\u56fd\u5357\u5b89\u666e\u987f\uff08Southampton\uff09\u767b\u8239,20%\u7684\u4e58\u5ba2\u4ece\u6cd5\u56fd\u745f\u5821\u5e02\uff08Cherbourg\uff09\u767b\u8239,10%\u7684\u4e58\u5ba2\u4ece\u7231\u5c14\u5170\u6606\u58eb\u6566(Queenstown)\u767b\u8239.\n\n(3) \u4e09\u7b49\u8231\u7684\u4eba\u6570\u6700\u591a,\u7ea6\u53605\/9,\u5176\u6b21\u662f\u4e00\u7b49\u8231,\u4e8c\u7b49\u8231\u4eba\u6570\u6700\u5c11.","1278b88b":"\u6bd4\u8f83\u4e0d\u540c\u6a21\u578b\u7684\u5f97\u5206\u7ed3\u679c\uff0c\u6211\u4eec\u9009\u53d6\u5f97\u5206\u6700\u9ad8\u7684GradientBoosting\u6a21\u578b","1e27f87e":"## \u6a21\u578b\u8c03\u53c2","b67e511b":"## 3.2\u7279\u5f81\u5de5\u7a0b","f5740f33":"#### \u6570\u503c\u578b\u7279\u5f81","c84fb7e5":"\u5206\u6790\u7ed3\u679c\u663e\u793a:\u5973\u6027\u7684\u751f\u5b58\u7387\u7ea6\u4e3a75%,\u800c\u7537\u6027\u7684\u751f\u5b58\u7387\u4f4e\u4e8e20%,\u5973\u6027\u751f\u5b58\u51e0\u7387\u8fdc\u9ad8\u4e8e\u7537\u6027.","1df0329b":"## \u67e5\u770b\u6570\u636e","7132e115":"* \u6709\u76f4\u63a5\u7c7b\u522b\u7684"}}