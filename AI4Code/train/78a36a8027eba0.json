{"cell_type":{"ea984efc":"code","4349860c":"code","0cffb471":"code","eca62c22":"code","f8fee077":"code","981a4ed1":"code","9b7bab31":"code","85096eaf":"code","853e25b1":"markdown","6aa8368f":"markdown"},"source":{"ea984efc":"import os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.layers import Dense, Activation,Dropout,Conv2D, MaxPooling2D,BatchNormalization, Flatten\nfrom tensorflow.keras.optimizers import Adam, Adamax\nfrom tensorflow.keras.metrics import categorical_crossentropy\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Model, load_model, Sequential\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom PIL import Image\nfrom IPython.core.display import display, HTML\n# stop annoying tensorflow warning messages\nimport logging\nlogging.getLogger(\"tensorflow\").setLevel(logging.ERROR)","4349860c":"img_path=r'..\/input\/one-piece-image-classifier\/Data\/Luffy\/1.jpg'\nimg=plt.imread(img_path)\nprint (img.shape)\nplt.axis('off')\nplt.imshow(img)\nplt.show()\n","0cffb471":"def preprocess (sdir, trsplit, vsplit, random_seed):\n    filepaths=[]\n    labels=[]    \n    classlist=os.listdir(sdir)\n    for klass in classlist:\n        classpath=os.path.join(sdir,klass)\n        flist=os.listdir(classpath)\n        for f in flist:\n            fpath=os.path.join(classpath,f)\n            filepaths.append(fpath)\n            labels.append(klass)\n    Fseries=pd.Series(filepaths, name='filepaths')\n    Lseries=pd.Series(labels, name='labels')\n    df=pd.concat([Fseries, Lseries], axis=1)       \n    # split df into train_df and test_df \n    dsplit=vsplit\/(1-trsplit)\n    strat=df['labels']    \n    train_df, dummy_df=train_test_split(df, train_size=trsplit, shuffle=True, random_state=random_seed, stratify=strat)\n    strat=dummy_df['labels']\n    valid_df, test_df=train_test_split(dummy_df, train_size=dsplit, shuffle=True, random_state=random_seed, stratify=strat)\n    print('train_df length: ', len(train_df), '  test_df length: ',len(test_df), '  valid_df length: ', len(valid_df))\n    return train_df, test_df, valid_df","eca62c22":"sdir=r'..\/input\/one-piece-image-classifier\/Data'\ntrain_df, test_df, valid_df= preprocess(sdir, .8,.1, 123)","f8fee077":"img_size=(224,200)\nchannels=3\nbatch_size=30\nimg_shape=(img_size[0], img_size[1], channels)\nlength=len(test_df)\ntest_batch_size=sorted([int(length\/n) for n in range(1,length+1) if length % n ==0 and length\/n<=80],reverse=True)[0]  \ntest_steps=int(length\/test_batch_size)\nprint ( 'test batch size: ' ,test_batch_size, '  test steps: ', test_steps)\ndef scalar(img):    \n    return img  # EfficientNet expects pixels in range 0 to 255 so no scaling is required\ntrgen=ImageDataGenerator(preprocessing_function=scalar, horizontal_flip=True)\ntvgen=ImageDataGenerator(preprocessing_function=scalar)\ntrain_gen=trgen.flow_from_dataframe( train_df, x_col='filepaths', y_col='labels', target_size=img_size, class_mode='categorical',\n                                    color_mode='rgb', shuffle=True, batch_size=batch_size)\ntest_gen=tvgen.flow_from_dataframe( test_df, x_col='filepaths', y_col='labels', target_size=img_size, class_mode='categorical',\n                                    color_mode='rgb', shuffle=False, batch_size=test_batch_size)\n\nvalid_gen=tvgen.flow_from_dataframe( valid_df, x_col='filepaths', y_col='labels', target_size=img_size, class_mode='categorical',\n                                    color_mode='rgb', shuffle=True, batch_size=batch_size)\nclasses=list(train_gen.class_indices.keys())\nclass_count=len(classes)\n","981a4ed1":"model_name='EfficientNetB3'\nbase_model=tf.keras.applications.EfficientNetB3(include_top=False, weights=\"imagenet\",input_shape=img_shape, pooling='max') \nx=base_model.output\nx=keras.layers.BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001 )(x)\nx = Dense(256, kernel_regularizer = regularizers.l2(l = 0.016),activity_regularizer=regularizers.l1(0.006),\n                bias_regularizer=regularizers.l1(0.006) ,activation='relu')(x)\nx=Dropout(rate=.45, seed=123)(x)        \noutput=Dense(class_count, activation='softmax')(x)\nmodel=Model(inputs=base_model.input, outputs=output)\nmodel.compile(Adamax(lr=.001), loss='categorical_crossentropy', metrics=['accuracy']) ","9b7bab31":"epochs =15\nhistory=model.fit(x=train_gen,  epochs=epochs, verbose=1,  validation_data=valid_gen,\n                 shuffle=False,  initial_epoch=0)\n","85096eaf":"accuracy=model.evaluate (test_gen, steps=test_steps)[1]\nprint(f'accuracy on test set = {accuracy:6.2f}')","853e25b1":"### create train, test and validation generators","6aa8368f":"### define function to create train, test and valid data frames"}}