{"cell_type":{"bdad70ea":"code","fe2259b1":"code","22c8e41c":"code","658f29ee":"code","17ed07d3":"code","007a6bd4":"code","232f4d2c":"code","ad667d22":"code","97e7f142":"code","fcfef2e5":"code","caa68c88":"code","ab9051c8":"code","bbaa10fc":"markdown","02ca5ede":"markdown","a75d0222":"markdown","9b6089bf":"markdown","2d089d5d":"markdown","025cf6e8":"markdown","11d8ba12":"markdown","e9f766b0":"markdown","6f0026be":"markdown","d0862ae4":"markdown","d8f305f8":"markdown","d455fe75":"markdown"},"source":{"bdad70ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport matplotlib.pyplot as plt\nimport seaborn as sn\nsn.set()","fe2259b1":"import pandas as pd\nnomes = [\"A1\",\"A2\",\"A3\",\"A4\",\"A5\",\"A6\",\"A7\",\"A8\",\"A9\",\"A10\",\"A11\",\"A12\",\"A13\",\"A14\",\"A15\",\"A16\"]\ndf = pd.read_csv(\"\/kaggle\/input\/creditscreening\/credit-screening.data\",sep=\",\", names=nomes, na_values= '?')\ndf.head()","22c8e41c":"df.describe()","658f29ee":"df.isnull().sum()","17ed07d3":"cols = ['A1', 'A1', 'A4', 'A5', 'A6', 'A7', 'A9', 'A10', 'A12', 'A13','A1', 'A4']\nfor i in cols:\n    df[i]=df[i].fillna(value=df[i].mode)\n\n#df = df.fillna(df.mode(), inplace=True)","007a6bd4":"cols = ['A2', 'A14']\nfor i in cols:\n    df[i]=df[i].fillna(value=df[i].mean)\n","232f4d2c":"cols = ['A1', 'A4', 'A5', 'A6', 'A7', 'A9', 'A10', 'A12', 'A13']\nfor i in cols:\n    df[i]= df[i].astype(str)\n    df[i]= df[i].astype('category')","ad667d22":"df['A16'] = df['A16'].astype('category')\ndf['A16'].cat.codes","97e7f142":"df = pd.get_dummies( df, columns=['A1','A4','A5','A6','A7','A9','A10','A12','A13'])","fcfef2e5":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()\nXss = ss.fit_transform(X)\nfrom sklearn.model_selection import train_test_split\nX_train, X_test,y_train, y_test = train_test_split(Xss,y, test_size=0.2)","caa68c88":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=3)\nmodelo= knn.fit(X_train,y_train)\ny_pred = modelo.predict(X_test)\ny_score = modelo.score(X_test,y_test)\ny_score","ab9051c8":"from sklearn.tree import DecisionTreeClassifier, export_graphviz\ndtc = DecisionTreeClassifier()\nmodelo = dtc.fit(X_train,y_train)\ny_pred = modelo.predict(X_test)\nimport graphviz as gpz\ndot_data = export_graphviz(dtc)\ngraph = gpz.Source(dot_data)\ngraph","bbaa10fc":"9 - utilize train_test_split para criar bases de treino e teste","02ca5ede":"7 - Transforme a coluna objetivo  A16 primeiro para o tipo category e depois fa\u00e7a a codifica\u00e7\u00e3o num\u00e9rica utiliando a fun\u00e7ao df[\"A16\"].cat.codes","a75d0222":"11 - Execute o algoritmo de \u00c1rvore de Decis\u00e3o, guarde o resultado da predi\u00e7\u00e3o em uma nova coluna predictAD","9b6089bf":"6 - transforme todas as colunas com valores categ\u00f3ricos para o tipo \"category\"  use a fun\u00e7\u00e3o astype\n        * Colunas Categ\u00f3ricas: A1, A4, A5, A6, A7, A9, A10, A12, A13","2d089d5d":"*  Colunas Categ\u00f3ricas: A1, A4, A5, A6, A7, A9, A10, A12, A13\n*  Colunas Categ\u00f3ricas com valores faltantes : A1, A4, A5, A6, A7 preencher com a moda (valor que mais aparece na coluna)\n*  Colunas com valores cont\u00ednuos: A2, A3, A8, A11, A14, A15\n*  Colunas com valores cont\u00ednuos com valores faltantes:  A2 e A14 preencher com m\u00e9dia","025cf6e8":"1 - Importar arquivo (credit-screening.data) procure o dataset no Kaggle, caso n\u00e3o encontre, importe o arquivo dispon\u00edvel no Google Classroom. Importe o arquivo substituindo valores faltantes \"?\" por NaN e inserir o nome das colunas utilizando o vetor abaixo.\n\n#### nomes = [\"A1\",\"A2\",\"A3\",\"A4\",\"A5\",\"A6\",\"A7\",\"A8\",\"A9\",\"A10\",\"A11\",\"A12\",\"A13\",\"A14\",\"A15\",\"A16\"]5 - ","11d8ba12":"5 - Preencha os campos faltantes das colunas com valores cont\u00ednuos com a m\u00e9dia\n        * Colunas com valores cont\u00ednuos com valores faltantes:  A2 e A14","e9f766b0":"2 - Execute a fun\u00e7\u00e3o describe para ver um resumo estat\u00edstico descritivo","6f0026be":"10 - Execute o algoritmo dos K vizinhos mais pr\u00f3ximos com K=3, guarde o resultado da predi\u00e7\u00e3o em uma nova coluna do dataframe \"predictKNN\"","d0862ae4":"4 - Preencha os campos das colunas com valores categ\u00f3ricos com a moda dos valores da coluna, para isso use a fun\u00e7\u00e3o fillna( ) e moda( )\n    * defina um vetor com as colunas a serem alteradas\n    * use um la\u00e7o para varrer o vetor   (for n in colunas: df.fillna...)","d8f305f8":"3 - utilize   df.isnull().sum() para saber em quais colunas h\u00e1 valores faltantes NaN\n","d455fe75":"8 - utilize a fun\u00e7\u00e3o pd.get_dummies para transformar todas as colunas categ\u00f3ricas para indicadores de vari\u00e1veis. \n### df = pd.get_dummies( df, columns=['A1','A4','A5','A6','A7','A9','A10','A12','A13'])"}}