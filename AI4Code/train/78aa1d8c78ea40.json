{"cell_type":{"5057b83f":"code","6a424145":"code","78632c4d":"code","a0fa46bf":"code","b9b88e8e":"code","9fd1c42c":"code","16232cf9":"code","0625cac6":"code","e26d6d5a":"code","bfab14c5":"code","a8cdcd37":"code","4bddd185":"code","e641a88d":"code","2f197286":"code","9f034ec3":"code","cbedf650":"code","25365634":"code","6c580c0c":"code","f88c88a5":"code","9325daf5":"code","098bf7c5":"code","9131f85d":"code","bf62682d":"code","9ec9164d":"code","39f46187":"code","ad3a46e7":"code","26f9ba42":"code","ea8670b0":"markdown","4487b28b":"markdown","9a976d8c":"markdown"},"source":{"5057b83f":"from tensorflow.keras import Input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import BatchNormalization, concatenate, Conv2D\nfrom tensorflow.keras.layers import Dense, Dropout, GlobalAveragePooling2D\nfrom tensorflow.keras.layers import InputLayer, MaxPool2D\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.losses import MeanSquaredError, Loss\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.applications import DenseNet121\nfrom tensorflow.keras.applications import Xception\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nfrom tensorflow.keras.regularizers import l2, l1\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport os\nfrom tqdm import tqdm\nfrom PIL import Image\nimport seaborn as sns\n%matplotlib inline","6a424145":"seed = 42\npath = '..\/input\/i2a2-bone-age-regression'","78632c4d":"#!unzip -q '\/content\/gdrive\/My Drive\/Kaggle\/I2A2_Bone_Regression\/i2a2-bone-age-regression.zip' -d '\/content\/gdrive\/My Drive\/Kaggle\/I2A2_Bone_Regression\/'","a0fa46bf":"train_df = pd.read_csv(path+'\/train.csv')\ntest_df = pd.read_csv(path+'\/test.csv')\nprint(train_df.shape)\nprint(test_df.shape)","b9b88e8e":"train_df = train_df.join(pd.get_dummies(train_df['patientSex'], prefix='patientSex'))\ntrain_df.head()","9fd1c42c":"plt.figure(figsize=(20, 10))\n\nplt.subplot(232)\nax = sns.kdeplot(train_df['boneage'], label='Global Distribution')\nax = sns.kdeplot(train_df.loc[train_df.patientSex=='F']['boneage'], label='Female Distribution')\nax = sns.kdeplot(train_df.loc[train_df.patientSex=='M']['boneage'], label='Male Distribution')\nax.set_title('Bone Age Distribution', color='b')\nax.set_xlabel('bone age', color='b')\nax.set_xlabel('frequency', color='b')\nax.tick_params(labelcolor='b')\n\nplt.subplot(234)\nax = sns.distplot(train_df['boneage'])\nax.set_title('Bone Age Distribution', color='b')\nax.set_xlabel('bone age', color='b')\nax.set_ylabel('frequency', color='b')\nax.tick_params(labelcolor='b')\n\nplt.subplot(235)\nax = sns.distplot(train_df.loc[train_df.patientSex=='F']['boneage'])\nax.set_title('Female - Bone Age Distribution', color='b')\nax.set_xlabel('bone age', color='b')\nax.set_ylabel('frequency', color='b')\nax.tick_params(labelcolor='b')\n\nplt.subplot(236)\nax = sns.distplot(train_df.loc[train_df.patientSex=='M']['boneage'])\nax.set_title('Male - Bone Age Distribution', color='b')\nax.set_xlabel('bone age', color='b')\nax.set_ylabel('frequency', color='b')\nax.tick_params(labelcolor='b')\n\nplt.show()","16232cf9":"plt.figure(figsize=(15, 5))\n\n\nplt.subplot(131)\nax = sns.boxplot(data=[train_df['boneage'],train_df.loc[train_df.patientSex=='F']['boneage'],train_df.loc[train_df.patientSex=='M']['boneage']])\nax.set_title('Bone Age Quantiles', color='b')\nax.set_xlabel('Data Set (0-Global, 1-Female, 2-Male)', color='b')\nax.set_ylabel('frequency', color='b')\nax.tick_params(labelcolor='b')\n'''\nplt.subplot(235)\nax = sns.distplot(train_df.loc[train_df.patientSex=='F']['boneage'])\nax.set_title('Female - Bone Age Distribution', color='b')\nax.set_xlabel('bone age', color='b')\nax.set_ylabel('frequency', color='b')\nax.tick_params(labelcolor='b')\n\nplt.subplot(236)\nax = sns.distplot(train_df.loc[train_df.patientSex=='M']['boneage'])\nax.set_title('Male - Bone Age Distribution', color='b')\nax.set_xlabel('bone age', color='b')\nax.set_ylabel('frequency', color='b')\nax.tick_params(labelcolor='b')\n'''\nplt.show()","0625cac6":"print('Statistics - Global - Bone Age')\ntrain_df['boneage'].describe()","e26d6d5a":"print('Statistics - Female - Bone Age')\ntrain_df.loc[train_df.patientSex=='F']['boneage'].describe()","bfab14c5":"print('Statistics - Male - Bone Age')\ntrain_df.loc[train_df.patientSex=='M']['boneage'].describe()","a8cdcd37":"test_df[test_df['patientSex'] =='F'].shape","4bddd185":"test_df[test_df['patientSex'] =='M'].shape","e641a88d":"X_train, X_test, y_train, y_test = train_test_split(train_df[[\"fileName\", \"patientSex_F\", \"patientSex_M\"]],train_df[\"boneage\"], test_size = 0.15, random_state = seed)\nX_train.shape","2f197286":"X_train, X_valid, y_train, y_valid = train_test_split(X_train,y_train, test_size = 0.15, random_state = seed)\nX_train.shape\n\ntraining_df = X_train.join(y_train)\nvalidating_df = X_valid.join(y_valid)","9f034ec3":"training_df.head()","cbedf650":"validating_df.head()","25365634":"plt.figure(figsize=(20, 10))\n\nplt.subplot(232)\nax = sns.kdeplot(y_train, label='y train')\nax = sns.kdeplot(y_valid, label='y valid')\nax = sns.kdeplot(y_test, label='y test')\nax.set_title('train\/test\/validation - Bone Age Distribution', color='b')\nax.set_xlabel('bone age', color='b')\nax.set_ylabel('frequency', color='b')\nax.tick_params(labelcolor='b')\n\nplt.subplot(234)\nax = sns.distplot(y_train)\nax.set_title('Y_train - Bone Age Distribution', color='b')\nax.set_xlabel('bone age', color='b')\nax.set_ylabel('frequency', color='b')\nax.tick_params(labelcolor='b')\n\nplt.subplot(235)\nax = sns.distplot(y_test)\nax.set_title('y_test -  - Bone Age Distribution', color='b')\nax.set_xlabel('bone age', color='b')\nax.set_ylabel('frequency', color='b')\nax.tick_params(labelcolor='b')\n\nplt.subplot(236)\nax = sns.distplot(y_valid)\nax.set_title('y_valid - Bone Age Distribution', color='b')\nax.set_xlabel('bone age', color='b')\nax.set_ylabel('frequency', color='b')\nax.tick_params(labelcolor='b')\n\nplt.show()","6c580c0c":"img_size = (299)\nbatch_size = 10\npatientSex_weight = 100\n\nrotation_range = 20\nwidth_shift_range = 0.1\nheight_shift_range = 0.1\nhorizontal_flip = True\nshear_range = 0.1\nzoom_range = [0.4,0.5]\n\n\ndatagen = ImageDataGenerator(\n        rotation_range=rotation_range,\n        width_shift_range=width_shift_range,\n        height_shift_range=height_shift_range,\n        shear_range=shear_range,\n        zoom_range=zoom_range,\n        horizontal_flip=horizontal_flip,\n        fill_mode='nearest',rescale=1.\/255)#validation_split=0.25)\n\ndef gen_flow_for_two_inputs(mult_imp_df):\n    data_iter=datagen.flow_from_dataframe(dataframe=mult_imp_df, \n                                          directory=path+'\/images', \n                                          x_col='fileName', y_col=(['boneage','patientSex_F','patientSex_M']), class_mode=\"raw\", \n                                          target_size=(img_size,img_size), color_mode='rgb', batch_size=batch_size, seed=seed)\n\n    while True:\n            \n            mult_input_data = data_iter.next()\n            \n            return ([mult_input_data[0], mult_input_data[1][:,1:3]]*patientSex_weight, mult_input_data[1][:,0])\n            \ngen_flow = gen_flow_for_two_inputs(training_df)\ngen_flow_train = gen_flow_for_two_inputs(validating_df)","f88c88a5":"pretrained_model = Xception(include_top=False, weights=\"..\/input\/xception\/xception_weights_tf_dim_ordering_tf_kernels_notop.h5\",input_shape=(img_size,img_size,3))","9325daf5":"number_of_frozen_layers = 0\nfor i, layer in enumerate(pretrained_model.layers):\n    if i>=number_of_frozen_layers:\n        break\n    layer.trainable = False","098bf7c5":"img_size = (299)\n\ninput_img = Input(shape=(img_size, img_size, 3))\ninput_patientSex = Input(shape=(2,))\n\nx = pretrained_model(input_img)\nn = GlobalAveragePooling2D()(x)\nb = concatenate([n,input_patientSex])\nf = Dense(512, activation='relu',activity_regularizer=l2(0.01),kernel_regularizer=l1(0.01))(b)\nf = Dense(1, activation='linear')(f)\n\nmodel = Model([input_img, input_patientSex],f)\nmodel.summary()","9131f85d":"num_epochs = 5\nlearning_rate = 1e-4\n\nweights_filepath = path+'NeuralNet_Gender\/model.12-06--{epoch:02d}-{val_loss:.2f}.h5'\n\n\ncallbacks = [ModelCheckpoint(weights_filepath, monitor='val_loss', mode='min', verbose=2, save_best_only=True, save_freq='epoch'), \n             ReduceLROnPlateau(monitor=\"val_loss\", factor=0.5, patience=10, verbose=2, mode=\"min\", min_delta=0.01, cooldown=5, min_lr=0),\n             EarlyStopping(monitor='val_loss', mode='min', patience=20, restore_best_weights=True)]\n\nmse = MeanSquaredError()        \n\nmodel.compile(loss = mse, optimizer = Adam(lr = learning_rate), metrics = ['acc'])","bf62682d":"history = model.fit(gen_flow[0], gen_flow[1], epochs=num_epochs, verbose=2, validation_data=(gen_flow_train[0], gen_flow_train[1]), \n                    shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, callbacks=callbacks)","9ec9164d":"plt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.ylabel('acur\u00e1cia')\nplt.xlabel('\u00e9poca')\nplt.legend(['treino', 'valida\u00e7\u00e3o'], loc = 'upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.ylabel('loss')\nplt.xlabel('\u00e9poca')\nplt.legend(['treino', 'valida\u00e7\u00e3o'], loc = 'upper left')\nplt.show()","39f46187":"X = []\nfor i in tqdm(X_test['fileName']):\n    image = load_img(path='..\/input\/i2a2-bone-age-regression\/images\/'+i, grayscale=False, color_mode='rgb', target_size=(299,299),interpolation='nearest')\n    input_arr = img_to_array(image)\n    input_arr = np.array([input_arr])  # Convert single image to a batch. \n    predictions = model.predict((input_arr,[X_test.loc[X_test.fileName==i][['patientSex_F','patientSex_M']]]))\n    \n    X.append(predictions.item())","ad3a46e7":"X = []\nfor i in tqdm(test_df['fileName']):\n    im = Image.open(os.path.join('..\/input\/i2a2-bone-age-regression\/images\/'+i)).convert(\"RGB\")\n    im = im.resize((img_size,img_size))\n    im = np.asarray(im)\/255\n    #im = np.expand_dims(im, axis=2)\n    X.append(im)\nX_t = np.stack(X,axis=0) ","26f9ba42":"y_t = model.predict(X_t,verbose=1)\nprint(y_t)\ntest_df['boneage'] = y_t\ntest_df.to_csv('\\submission.csv',index=False)","ea8670b0":"# # Bone Age Regression - CNN with multiple inputs (image and numeric data) - Keras.\n\nThe goal is to estimate the age of a child with a Convolutional Neural Network based on the image of the child's x-ray and on data about the sex of the child.\n\nOne possible solution is to input the image data into the convolutional layers and then concatenate the one-hot-encoded data about the sex of the child prior to the dense layers.\n\nThis solution is easily implemented using the Functional API from Keras. However, when using the image augumentation module from keras, this implementation is not as trivial and certain changes were needed as described below.\n\nThese changes were based on the [Notebook](https:\/\/www.kaggle.com\/sinkie\/keras-data-augmentation-with-multiple-inputs) by [sinkie](https:\/\/www.kaggle.com\/sinkie)","4487b28b":"The code for the image augumentation using the *tensorflow.keras.preprocessing.image.ImageDataGenerator* was based on the [Notebook](https:\/\/www.kaggle.com\/sinkie\/keras-data-augmentation-with-multiple-inputs) by [sinkie](https:\/\/www.kaggle.com\/sinkie) as published on Kaggle.\n\nThe image data is processed by ImageDataGenerator which randomly outputs additional images with slight changes to the original in accordance to the set parameters set. However, these changes should not be applicable to the data regarding the gender of the patient ('patientSex').  \n\nIn order to circumvent this problem the one-hot-encoded 'patientSex'variable (a 2D vector - 'patientSex_F' and 'patientSex_M') is input as an explained (dependent or y) variable instead of an explanatory (independent or x) variable jointly with the 'boneage', which is the real dependent varible. The ImageDataGenerator algorithm does not changes the original data for de dependent variable and attributes to the newly generated images the same data which is related to the original image, which solves the aforementioned problem.\n\nTherefore the data regarding patientSex though processed as dependent variables in the image augumentation algorithm are later used as inddependent variable for purposes of input data in the Neural Network.","9a976d8c":"For the inputs of the model.fit function the outputs from the ImageDataGenerator."}}