{"cell_type":{"fec491d8":"code","519c9620":"code","66a6bc5b":"code","35a33442":"code","02be4a61":"code","e882d8b0":"code","c3726ec5":"code","44a69b81":"code","1441641e":"code","4a6f9d65":"code","7bf95233":"code","54fb13ff":"code","630164f0":"code","86b1c41b":"code","58b2c848":"code","695a61c6":"code","81658ddd":"code","3573e935":"code","7d6ba68d":"code","47b21055":"code","75b029a2":"code","a63a33ea":"code","b81b8277":"code","91bb957d":"code","c64e1e5c":"code","ea13aad3":"code","bb2bf700":"code","7fbab2cf":"code","26a86f5c":"code","1bb97d65":"code","136d8bcb":"markdown","4ec0d3fe":"markdown","a96d18c2":"markdown","27ed5d0f":"markdown"},"source":{"fec491d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","519c9620":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns","66a6bc5b":"df  = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndf.head()","35a33442":"del df['customerID']","02be4a61":"df.head()\ndf.dtypes","e882d8b0":"df.TotalCharges.values","c3726ec5":"df = df[df.TotalCharges!=' ']\ndf.shape","44a69b81":"df.TotalCharges = pd.to_numeric(df.TotalCharges)","1441641e":"df[df.Churn=='No'].tenure\n","4a6f9d65":"plt.figure(figsize=(14,9))\nsns.histplot(x='tenure',hue='Churn',data=df,multiple=\"dodge\",bins=10,shrink=.7,palette='light:#5A9')","7bf95233":"plt.figure(figsize=(14,9))\nsns.histplot(x='MonthlyCharges',hue='Churn',data=df,multiple=\"dodge\",bins=10,shrink=.7,palette='light:#5A9');","54fb13ff":"cat_col = []\ndef print_unique_col_values(df):\n    for column in df:\n        if df[column].dtypes=='object':\n            cat_col.append(column)\n            print(f'{column} : {df[column].unique()}')\nprint_unique_col_values(df)\nprint(cat_col)","630164f0":"df.replace('No internet service','No',inplace=True)\ndf.replace('No phone service','No',inplace=True)","86b1c41b":"print_unique_col_values(df)","58b2c848":"cat_col = ['gender',\n 'Partner',\n 'Dependents',\n 'PhoneService',\n 'MultipleLines',\n'OnlineSecurity',\n 'OnlineBackup',\n 'DeviceProtection',\n 'TechSupport',\n 'StreamingTV',\n 'StreamingMovies',\n 'PaperlessBilling',\n 'Churn']\none_hot_col = ['InternetService','Contract','PaymentMethod']","695a61c6":"from sklearn.preprocessing import LabelEncoder ,OneHotEncoder\nlb = LabelEncoder()\nfor i in cat_col:\n    df[i] = lb.fit_transform(df[i])\n\n","81658ddd":"df = pd.get_dummies(data=df,columns=one_hot_col)\n","3573e935":"df.head(2)","7d6ba68d":"cols_to_scale = ['tenure','MonthlyCharges','TotalCharges']\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\n\ndf[cols_to_scale] = scaler.fit_transform(df[cols_to_scale])\ndf.head(1)","47b21055":"X = df.drop('Churn',axis='columns')\ny =df['Churn']","75b029a2":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=5)","a63a33ea":"X_train.shape","b81b8277":"len(X_train.columns)","91bb957d":"import tensorflow as tf\nfrom tensorflow import keras","c64e1e5c":"model = keras.Sequential([\n    keras.layers.Dense(26,activation='relu'),\n    keras.layers.Dense(1,activation='sigmoid')\n])\nmodel.compile(optimizer='adam',\n             loss='binary_crossentropy',\n             metrics=['accuracy'])\nmodel.fit(X_train,y_train,epochs=100)","ea13aad3":"model.evaluate(X_test,y_test)\n","bb2bf700":"yp = model.predict(X_test)\n","7fbab2cf":"y_pred = []\nfor element in yp:\n    if element > 0.5:\n        y_pred.append(1)\n    else:\n        y_pred.append(0)","26a86f5c":"from sklearn.metrics import confusion_matrix,classification_report\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))","1bb97d65":"plt.figure(figsize=(12,8))\nsns.heatmap(confusion_matrix(y_test,y_pred),annot=True,fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('Truth')","136d8bcb":"# \u0130mport Libraries","4ec0d3fe":"# Model ","a96d18c2":"# EDA","27ed5d0f":"# Data Preprocessing"}}