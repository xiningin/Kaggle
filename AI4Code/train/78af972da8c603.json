{"cell_type":{"75bef9ed":"code","ee0908c0":"code","40d111e0":"code","13fe68f8":"code","2f4f8061":"code","43f561b5":"code","203c5450":"code","c6a57e7d":"code","f5c13226":"code","d6fb78c7":"markdown","2d2f6fd6":"markdown","586e32c5":"markdown","dbf728a9":"markdown","10d54d83":"markdown","20ca98de":"markdown"},"source":{"75bef9ed":"import numpy as np\nimport pandas as pd\nimport os\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import GradientBoostingRegressor\n\nimport xgboost","ee0908c0":"SEED = 42\nEARLY_STOP_NUM = 5 \nDATA_NUM = 10000 # row number \nCOL_NUM = 5 #column number ","40d111e0":"np.random.seed(SEED)\nX = np.random.rand(DATA_NUM, COL_NUM) - 0.5\ny = 3*X[:, 0]**2 + 0.05 * np.random.randn(DATA_NUM)\nX_test = np.random.rand(DATA_NUM, COL_NUM) - 0.5 + 2 * 3 * np.random.randint(10)*np.random.randint(3)\n\nX = pd.DataFrame(X)\ny = pd.DataFrame(y)\nX_test = pd.DataFrame(X_test)","13fe68f8":"X[:5]","2f4f8061":"y[:5]","43f561b5":"X_train, X_val, y_train, y_val = train_test_split(X, y, random_state=SEED)","203c5450":"xgb_reg = xgboost.XGBRegressor(random_state=SEED)\nxgb_reg.fit(X_train, y_train,eval_set=[(X_val, y_val)], early_stopping_rounds=EARLY_STOP_NUM)\ny_pred = xgb_reg.predict(X_val)\nval_error = mean_squared_error(y_val, y_pred)  \nprint(\"Validation MSE:\", val_error)         ","c6a57e7d":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import ShuffleSplit\n\n# %% [code]\ndef shuffleSplitOOF(NFOLD,X,y,X_test,model,eval_function):\n    # OOF \n    shuffleSplit = ShuffleSplit(NFOLD)\n\n    preds = np.zeros(len(X_test))\n    scores = []\n\n    for fold, (train_idx, valid_idx) in enumerate(shuffleSplit.split(X,y)):\n\n        X_train, y_train = X.iloc[train_idx], y.iloc[train_idx]\n        X_valid, y_valid = X.iloc[valid_idx], y.iloc[valid_idx]\n        \n        model.fit(X_train, y_train,verbose=False)\n\n        preds_valid = model.predict(X_valid)\n        score = eval_function(y_valid, preds_valid)\n        scores.append(score)\n\n        print(f\"Fold: {fold + 1} Score: {score}\")\n  \n        preds += model.predict(X_test) \/ shuffleSplit.n_splits\n        \n    print(f\"\\nOverall Validation Score: {np.mean(scores)}\")\n    return preds","f5c13226":"NFOLD = 5\npred_test = shuffleSplitOOF(NFOLD,X,y,X_test,xgb_reg,mean_squared_error)\npred_test[:10]","d6fb78c7":"# global variables","2d2f6fd6":"# Regression OOF ","586e32c5":"# import libraries","dbf728a9":"# make data","10d54d83":"# get best xgb model ","20ca98de":"# split train set and validation set"}}