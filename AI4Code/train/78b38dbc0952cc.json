{"cell_type":{"9c293a68":"code","21f796e9":"code","6e166367":"code","b7853064":"code","e4d5b258":"code","fc7580cf":"code","9f0b6ba6":"code","09a0efde":"code","e8743fe0":"code","7aa15e06":"code","b75896c7":"code","9dbc15ea":"code","5364a116":"code","62a08ca4":"code","42a64b99":"markdown","b51f1026":"markdown","11d94ab7":"markdown","84731335":"markdown"},"source":{"9c293a68":"!pip install -U vega_datasets notebook vega\n!pip install pandas --upgrade","21f796e9":"# importing libraries\nimport numpy as np \nimport pandas as pd \nimport os\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom plotly import tools\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly.subplots import make_subplots\nimport warnings\nwarnings.filterwarnings(\"ignore\")\ninit_notebook_mode(connected=True)\nfrom ipywidgets import interact, interactive, interact_manual\nimport ipywidgets as widgets\nimport colorlover as cl","6e166367":"# loading data from different years\nDIR = '\/kaggle\/input\/kaggle-survey-2018\/'\ndf_free_18 = pd.read_csv(DIR + 'freeFormResponses.csv', low_memory=False, header=[0,1])\ndf_choice_18 = pd.read_csv(DIR + 'multipleChoiceResponses.csv', low_memory=False, header=[0,1])\n# Format Dataframes\ndf_free_18.columns = ['_'.join(col) for col in df_free_18.columns]\ndf_choice_18.columns = ['_'.join(col) for col in df_choice_18.columns]\n\nDIR = '\/kaggle\/input\/kaggle-survey-2019\/'\ndf_free_19 = pd.read_csv(DIR + 'other_text_responses.csv', low_memory=False)\ndf_choice_19 = pd.read_csv(DIR + 'multiple_choice_responses.csv', low_memory=False, encoding='latin-1', header=[0,1])\ndf_choice_19.columns = ['_'.join(col) for col in df_choice_19.columns]\n\nDIR = '\/kaggle\/input\/kaggle-survey-2017\/'\ndf_free_17 = pd.read_csv(DIR + 'freeformResponses.csv', low_memory=False)\ndf_choice_17 = pd.read_csv(DIR + 'multipleChoiceResponses.csv', low_memory=False, encoding='latin-1')","b7853064":"# processing data for visualizations\n\ntop_count = df_choice_19['Q3_In which country do you currently reside?'].value_counts().head(20).reset_index().rename(columns={'Q3_In which country do you currently reside?': 'count', 'index': 'Country'})\n# taking only russian responders\ndf_choice_17 = df_choice_17.loc[df_choice_17['Country'] == 'Turkey']\ndf_choice_18 = df_choice_18.loc[df_choice_18['Q3_In which country do you currently reside?'] == 'Turkey']\ndf_choice_19 = df_choice_19.loc[df_choice_19['Q3_In which country do you currently reside?'] == 'Turkey']\n\ndef get_age(x: int):\n    \"\"\"\n    Convert numerical age to categories.\n    \"\"\"\n    if 18 <= x <= 21:\n        return '18-21'\n    elif 22 <= x <= 24:\n        return '22-24'\n    elif 25 <= x <= 29:\n        return '25-29'\n    elif 30 <= x <= 34:\n        return '30-34'\n    elif 35 <= x <= 39:\n        return '35-39'\n    elif 40 <= x <= 44:\n        return '40-44'\n    elif 45 <= x <= 49:\n        return '45-49'\n    elif 50 <= x <= 54:\n        return '50-54'\n    elif 55 <= x <= 59:\n        return '55-59'\n    elif 60 <= x <= 69:\n        return '60-69'\n    elif x >= 70:\n        return '70+'\n    \n# create a new age column with the same name and unique values in all datasets\ndf_choice_17['Age_'] = df_choice_17['Age'].apply(lambda x: get_age(x))\ndf_choice_18['Age_'] = df_choice_18['Q2_What is your age (# years)?']\ndf_choice_18.loc[df_choice_18['Age_'].isin(['70-79', '80+']), 'Age_'] = '70+'\ndf_choice_19['Age_'] = df_choice_19['Q1_What is your age (# years)?']\n\n# renaming columns so that it would be easier to work with them\ndf_choice_17 = df_choice_17.rename(columns={'GenderSelect': 'Gender', 'FormalEducation': 'Degree'})\ndf_choice_18 = df_choice_18.rename(columns={'Q1_What is your gender? - Selected Choice': 'Gender', 'Q9_What is your current yearly compensation (approximate $USD)?': 'Salary',\n                                            'Q4_What is the highest level of formal education that you have attained or plan to attain within the next 2 years?': 'Degree'})\ndf_choice_19 = df_choice_19.rename(columns={'Q2_What is your gender? - Selected Choice': 'Gender', 'Q10_What is your current yearly compensation (approximate $USD)?': 'Salary',\n                                            'Q4_What is the highest level of formal education that you have attained or plan to attain within the next 2 years?': 'Degree'})\ndf_choice_19['Degree'] = df_choice_19['Degree'].replace({'Master\u00e2\u0080\u0099s degree': 'Master\u2019s degree', 'Bachelor\u00e2\u0080\u0099s degree': 'Bachelor\u2019s degree',\n                                                         'Some college\/university study without earning a bachelor\u00e2\u0080\u0099s degree': 'Some college\/university study without earning a bachelor\u2019s degree'})\ndf_choice_17['Degree'] = df_choice_17['Degree'].replace({\"Master's degree\": 'Master\u2019s degree', \"Bachelor's degree\": 'Bachelor\u2019s degree',\n                                                         \"Some college\/university study without earning a bachelor's degree\": 'Some college\/university study without earning a bachelor\u2019s degree',\n                                                         \"I did not complete any formal education past high school\": \"No formal education past high school\"})","e4d5b258":"# Functions\n\n# some of the code is taken from my old kernel: https:\/\/www.kaggle.com\/artgor\/russia-usa-india-and-other-countries\n\ndef plot_gender_vars(var1: str = '', title_name: str = ''):\n    \"\"\"\n    Make separate count plots for genders over years.\n    \"\"\"\n    colors = cl.scales['3']['qual']['Paired']\n    names = {0: '2017', 1: '2018', 2: '2019'}\n    fig = tools.make_subplots(rows=1, cols=2, subplot_titles=('Male', 'Female'), print_grid=False)\n    # there are too little responders, who don't identify as Male\/Female, I have decided that I can use the most common genders.\n    for j, c in enumerate(['Male', 'Female']):\n        data = []\n        for i, df in enumerate([df_choice_17, df_choice_18, df_choice_19]):\n            grouped = df.loc[(df['Gender'] == c), var1].value_counts().sort_index().reset_index()\n            grouped['Age_'] = grouped['Age_'] \/ np.sum(grouped['Age_'])\n            trace = go.Bar(\n                x=grouped['index'],\n                y=grouped.Age_,\n                name=names[i],\n                marker=dict(color=colors[i]),\n                showlegend=True if j == 0 else False,\n                legendgroup=i\n            )\n            fig.append_trace(trace, 1, j + 1)    \n\n    fig['layout'].update(height=400, width=1000, paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)', title=f'Rate of Turkish Kagglers by {title_name} and Gender');\n    return fig\n\n\ndef plot_var(var1: str = '', title_name: str = ''):\n    \"\"\"\n    Plot one variable over years.\n    \"\"\"\n    colors = cl.scales['3']['qual']['Paired']\n    names = {0: '2017', 1: '2018', 2: '2019'}\n    \n    data = []\n    for i, df in enumerate([df_choice_17, df_choice_18, df_choice_19]):\n        grouped = df[var1].value_counts().sort_index().reset_index()\n        grouped[var1] = grouped[var1] \/ np.sum(grouped[var1])\n        trace = go.Bar(\n            x=grouped['index'],\n            y=grouped[var1],\n            name=names[i],\n            marker=dict(color=colors[i]),\n            legendgroup=i\n        )\n        data.append(trace)\n    layout = dict(height=400, width=1000, paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)', title=f'Turkish Kagglers by {title_name}');  \n    fig = dict(data=data, layout=layout)\n    return fig\n\n\ndef plot_choice_var(var: str = '', title_name: str = ''):\n    \"\"\"\n    Plot a variable, in which responders could select several answers.\n    \"\"\"\n    col_names = [col for col in df_choice_19.columns if f'{var}_Part' in col]\n    data = []\n    small_df = df_choice_19[col_names]\n    text_values = [col.split('- ')[2] for col in col_names]\n    counts = []\n    for m, n in zip(col_names, text_values):\n        if small_df[m].nunique() == 0:\n            counts.append(0)\n        else:\n            counts.append(sum(small_df[m] == n))\n            \n    trace = go.Bar(\n        x=text_values,\n        y=counts,\n        name='c',\n        marker=dict(color='blue'),\n        showlegend=False\n    )\n    data.append(trace)    \n    fig = go.Figure(data=data)\n    fig['layout'].update(height=600, width=1000, paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)', title=f'Popular {title_name}');\n    return fig","fc7580cf":"df_count = pd.DataFrame({'Year': [2017, 2018, 2019], 'Count': [df_choice_17.shape[0], df_choice_18.shape[0], df_choice_19.shape[0]]})\ntop_count = top_count.sort_values('count')\n\nfig = make_subplots(rows=1, cols=2)\nfig.add_trace(go.Bar(y=top_count['Country'], x=top_count['count'], orientation='h', name='Number of respondents by country in 2019'), row=1, col=1)\nfig.add_trace(go.Bar(x=df_count['Year'], y=df_count['Count'], name='Number of Turkish responders by year'), row=1, col=2)\n\nfig['layout'].update(height=600, width=1000,paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)');\niplot(fig);","9f0b6ba6":"fig = plot_gender_vars(var1='Age_', title_name='Age')\niplot(fig);","09a0efde":"fig = plot_var(var1='Degree', title_name='Degree')\niplot(fig);","e8743fe0":"fig = plot_choice_var(var='Q12', title_name='Resources')\niplot(fig);","7aa15e06":"fig = plot_choice_var(var='Q18', title_name='Languages')\niplot(fig);","b75896c7":"fig = plot_choice_var(var='Q9', title_name='Additional Activities')\niplot(fig);","9dbc15ea":"fig = plot_choice_var(var='Q27', title_name='NLP Tools')\niplot(fig);","5364a116":"fig = plot_choice_var(var='Q28', title_name='Libraries')\niplot(fig);","62a08ca4":"fig = plot_choice_var(var='Q25', title_name='ML Tools')\niplot(fig);","42a64b99":"## Professional Preferences of Turkish Kagglers\n\n**Resources:**\n1. Kaggle\n2. Blogs\n3. Youtube\n\n**Languages:**\n1. Python\n2. SQL\n3. R and Matlab\n\n**Activities:**\n1. Analyze and understand data to influence business decisions\n2. Build prototypes to explore applying ML to new areas\n3. Build\/run ML service that operationally improves my product\n\n**NLP Tools:**\n1. Word embeddings\/vectors\n2. Encoder-decoder models\n3. None of the listed\n\n**Libraries:**\n1. Scikit-learn\n2. Keras\n3. TensorFlow\n\n**ML Tools:**\n1. None of the listed\n2. Automated model selection\n3. Automated data augmentation","b51f1026":"## Kaggle ML & DS Survey\n\nEvery year we have a Machine Learning and Data Science Survey from Kaggle.\n\nIn this kernel I wanted to do some analysis which would be interesting to me and so I have decided to have a look at the Turkish kagglers.<br>\nI'll show how our characteristics changed (or not changed) over time and what is interesting about us.\n\nAlmost 300 Turkish kagglers took part in the survey in 2019.<br>\nLet's assume that the survey is representative and allows to make conclusions.\n\n**Please Upvote my kernel and keep it in your favourite section if you think it is helpful.**\n\n![](https:\/\/i4.hurimg.com\/i\/hurriyet\/75\/750x422\/563d32dff018fb32c8ee0a63.jpg)","11d94ab7":"## Profile of Turkish Kagglers\n\nThe increase in average age is probably resulted from career switches of senior professionals.<br>\nThere is a significant loss of interest in the 22-24 age group. \n\nAlmost %80 of Turkish kagglers have bachelor's degree or higher. Since everything is in English, otherwise would be unexpected.<br>\nWe should consider that the rate of bachelor and master's degrees are close.","84731335":"## Turkish Kaggle Grandmasters & Masters\n1. [Ahmet Erdem](https:\/\/www.kaggle.com\/aerdem4)\n2. [Firat Gonen](https:\/\/www.kaggle.com\/frtgnn)\n3. [Bulent Siyah](https:\/\/www.kaggle.com\/bulentsiyah)\n4. [Ekrem Bayar](https:\/\/www.kaggle.com\/ekrembayar)\n5. [Ertu\u011frul Demir](https:\/\/www.kaggle.com\/datafan07)\n6. [Serkan Peldek](https:\/\/www.kaggle.com\/serkanpeldek)"}}