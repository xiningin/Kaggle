{"cell_type":{"a3a1d138":"code","44176945":"code","4a4f9701":"code","eada14dc":"code","837c78cf":"code","8df8d857":"code","d2099978":"markdown","24d9af00":"markdown","4578b5f6":"markdown","e0744d4c":"markdown","cb80f8d9":"markdown","48fbec18":"markdown"},"source":{"a3a1d138":"import matplotlib.pyplot as plt\nimport cv2\nimport os\nimport random","44176945":"path = '..\/input\/deneme-trafik'\nimages = []\nfor i in os.listdir(path):\n    im_path = os.path.join(path,i)\n    image = cv2.imread(im_path)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    images.append(image)\nshuffled_images = random.sample(images,len(images))\n\nf = plt.figure()\nf.add_subplot(1,2, 1)\nplt.imshow(images[0])\nf.add_subplot(1,2, 2)\nplt.imshow(shuffled_images[0])\nplt.show()","4a4f9701":"histers = []\nfor i in images:\n    hist = cv2.calcHist([i], [0, 1, 2], None, [8, 8, 8],[0, 256, 0, 256, 0, 256])\n    hist = cv2.normalize(hist, hist).flatten()\n    histers.append(hist)\n\nnew_histers = []\nfor i in shuffled_images:\n    hist = cv2.calcHist([i], [0, 1, 2], None, [8, 8, 8],[0, 256, 0, 256, 0, 256])\n    hist = cv2.normalize(hist, hist).flatten()\n    new_histers.append(hist)","eada14dc":"fig, axs = plt.subplots(len(histers),figsize=(8,8))\nfig.suptitle('Histograms of Different Images')\nfor i in range(len(histers)):\n    axs[i].plot(histers[i])","837c78cf":"import itertools\npermutation = list(itertools.permutations([0, 1, 2, 3],2))\nfor i,k in permutation:\n    print('Comparsion of {}th and {}th images'.format(i,k))\n    print(cv2.compareHist(histers[i], histers[k], cv2.HISTCMP_CORREL))","8df8d857":"for i,k in list(itertools.product(range(4),range(4))):\n    score = cv2.compareHist(histers[i], new_histers[k],cv2.HISTCMP_CORREL)\n    print(score)\n    if score >= 0.9:\n        f = plt.figure()\n        f.add_subplot(1,2, 1)\n        plt.imshow(images[i])\n        f.add_subplot(1,2, 2)\n        plt.imshow(shuffled_images[k])\n        plt.show()","d2099978":"## Bu \u00e7al\u0131\u015fmada g\u00f6rsellerin histogramlar\u0131 \u00e7\u0131kart\u0131l\u0131p kar\u015f\u0131la\u015ft\u0131r\u0131lm\u0131\u015ft\u0131r. \n### \u0130lk olarak gerekli k\u00fct\u00fcphaneler \u00e7a\u011fr\u0131l\u0131r.","24d9af00":"# \"Histers\" ve \"new_histers\" isminde iki farkl\u0131 liste tan\u0131mlanm\u0131\u015ft\u0131r. Bu listeler s\u0131ras\u0131yla \"images\" ve \"shuffled_images\" listelerindeki g\u00f6rsellerin historgramlar\u0131yla doldurulmu\u015ftur. Histogram ile doldurulmadan \u00f6nce kolay kar\u0131la\u015ft\u0131rmak i\u00e7in normalize edilmi\u015f ve d\u00fczle\u015ftirilmi\u015ftir.","4578b5f6":"# \u0130ki farkl\u0131 liste olu\u015fturup histogramlar\u0131n\u0131 alm\u0131\u015ft\u0131k. \u0130kinci listede g\u00f6rseller rastgele geliyordu. \u015eimdi iki listenin b\u00fct\u00fcn kombinsyonlar\u0131n\u0131n aras\u0131ndaki benzerli\u011fe bakal\u0131m ve g\u00f6rselle\u015ftirelim. G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi sadece ayn\u0131 olan g\u00f6rseller ortaya \u00e7\u0131k\u0131yor. Bu \u015fekilde s\u0131n\u0131fland\u0131rma sa\u011flanabiliyor.","e0744d4c":"## Histogram g\u00f6rselle\u015ftirme","cb80f8d9":"## Her bir g\u00f6rsel okunur. Opencv BGR format\u0131nda okudu\u011fundan dolay\u0131 RGB format\u0131na \u00e7evirilir. Daha sonra \"Images\" listinin i\u00e7ine entegre edilir. Bu liste rastgele kar\u0131\u015f\u0131t\u0131r\u0131larak \"shuffled_images\" listesi elde edilir. Devam\u0131nda iki listedeki ilk elementleri g\u00f6rselle\u015ftiriyoruz","48fbec18":"## G\u00f6rsellerin histogramlar\u0131n\u0131n perm\u00fctasyonunu alarak her bir histogram\u0131 bir di\u011feriyle kar\u015f\u0131la\u015ft\u0131r\u0131yoruz. Daha sonra aralar\u0131ndaki ba\u011f\u0131nt\u0131y\u0131 puanl\u0131yoruz. G\u00f6rm\u00fc\u015f oldu\u011funuz gibi en \u00e7ok 1. ve 4. g\u00f6rsel birbirine benziyor(%75)."}}