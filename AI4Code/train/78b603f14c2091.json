{"cell_type":{"2bf87da7":"code","ee605143":"code","ea1214d1":"code","2a5267cf":"code","3d4d4109":"code","4fe11ce4":"code","fab9947d":"code","55a00e4d":"code","856bd221":"code","b40ce008":"code","d2dbc1f9":"code","0562a6cb":"code","7be9f5b6":"code","91937416":"code","03742f2a":"code","dd615d8f":"code","acd83c64":"code","4ce68a96":"code","d55a1d05":"code","f8f80a89":"code","f4be88f0":"code","7ff22282":"code","cba3a3a7":"code","d4b00767":"code","be3da149":"code","68eaff94":"code","b7f44ac0":"code","ba58ce9e":"code","5b2f0d4b":"code","e0dbd678":"code","f2a75716":"code","2aa42ac3":"code","ef42ca11":"code","1fd4ff73":"code","dcef8eac":"code","811ad588":"code","5262dca2":"code","78d273a2":"code","b044683a":"code","c5e8fef1":"code","6b64e55f":"code","d9167495":"code","3f3a3654":"code","b600d42e":"code","80b008db":"code","5bcdc6b5":"code","77b9832a":"code","0fa33a1e":"code","9a273535":"code","546fa58a":"code","2e47be9f":"code","4081ec64":"code","667e618e":"code","3a9dadd7":"code","7b48ed22":"code","1f4c11ad":"code","19a1be44":"code","234cefdf":"code","21d0b749":"code","8d686325":"code","62912892":"code","579ca712":"code","2294829d":"code","d19d7c11":"code","4ee4fc6d":"code","f6eba7b7":"code","fcb5e01a":"code","7886820b":"code","588cd1e3":"code","c2f87e91":"code","dc69780b":"code","81adf410":"code","7014b91d":"code","b9371c20":"code","4bf2164f":"code","bd5e5e79":"code","1aaa8607":"code","6059077d":"code","d92f7943":"code","e774d867":"code","f28db688":"code","4ae11872":"code","9e13f030":"code","d6b312af":"code","81ce7158":"code","4b7435b0":"code","a7e0307d":"code","62140fb7":"code","cb266a3b":"code","a47905e1":"code","3d0ee61e":"code","849ae358":"code","d367f93e":"code","db076b8c":"code","295d3ccf":"code","216e8506":"code","ad2dee6b":"code","18b1d369":"code","f9ebb055":"code","99206d98":"code","c50cf5af":"code","25d8a9f4":"code","b94b0147":"markdown","c77c72e8":"markdown","928544fc":"markdown","d716e6a3":"markdown","aecd3b90":"markdown","eb8e8d20":"markdown","77b2b475":"markdown","1d1e3244":"markdown","d5783a0f":"markdown","f1a61e4f":"markdown","5ec32455":"markdown","b6f4c8b7":"markdown","b998d432":"markdown","c1f08a32":"markdown","5c89c719":"markdown","76e9eeef":"markdown","9fe98685":"markdown","96c6af4d":"markdown","8b358639":"markdown","12480c06":"markdown","ee8a4788":"markdown","de64d1d0":"markdown","04125c13":"markdown","87f089fc":"markdown","17931b3d":"markdown","e4f07f96":"markdown","364e39f0":"markdown","4885834c":"markdown","87ec67d5":"markdown","b0d2d290":"markdown","752a149c":"markdown","3d115a77":"markdown","1920e6a1":"markdown","42c09ee2":"markdown","806a8ada":"markdown","7e3a3d9e":"markdown","26bdf561":"markdown","4a8a2c82":"markdown","165f82e2":"markdown","0f5f7430":"markdown","d7fdd53c":"markdown","bffbfcf7":"markdown","9f5bd9a3":"markdown","8b7c0a3e":"markdown","4516fc22":"markdown","4df9c182":"markdown","78d4b70f":"markdown","abfda987":"markdown","df3852a8":"markdown","03c44636":"markdown","e41bdc43":"markdown","5fd689a4":"markdown","d873cd62":"markdown","43b83e44":"markdown","00555a6e":"markdown","81b08a2b":"markdown","091e4d08":"markdown","7d43c403":"markdown","88089f7c":"markdown","55caa43e":"markdown","c3c45656":"markdown","9c8eb9d7":"markdown","05d75929":"markdown","6780fed8":"markdown","c4028a5b":"markdown","79779b8f":"markdown","12fb4ad3":"markdown","f34f50ad":"markdown","7f7b4ba9":"markdown","c291e97f":"markdown","5a09e9d8":"markdown","84582ec6":"markdown","856d7a02":"markdown"},"source":{"2bf87da7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (12,6)\nimport matplotlib as mpl\nimport plotly.express as px\nimport matplotlib.cm as cm\nimport seaborn as sns\nsns.set_theme()\nimport os","ee605143":"# Data Preparation\nfrom sklearn import preprocessing as pp\nfrom scipy.stats import pearsonr\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import log_loss\nfrom sklearn.metrics import precision_recall_curve, average_precision_score\nfrom sklearn.metrics import roc_curve, auc, roc_auc_score\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error\n\n","ea1214d1":"# ML Algorithms to be used\nfrom sklearn.decomposition import PCA\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nimport lightgbm as LGBMClassifier\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import log_loss\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.metrics import confusion_matrix, plot_confusion_matrix\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.neighbors import KNeighborsClassifier\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras import optimizers, models, layers, regularizers\ntf.__version__\n","2a5267cf":"\ndata = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\ndata.head()","3d4d4109":"correlationMatrix = data.corr() \n\nf = plt.figure(figsize=(15, 8))\nplt.matshow(correlationMatrix, fignum=f.number, cmap='viridis')\nplt.xticks(range(data.shape[1]), data.columns, fontsize=14, rotation=75)\nplt.yticks(range(data.shape[1]), data.columns, fontsize=14)\ncb = plt.colorbar()\ncb.ax.tick_params(labelsize=14)\ncorrelationMatrix.style.background_gradient(cmap='viridis').set_precision(2)\nplt.show()","4fe11ce4":"correlationMatrix.style.background_gradient(cmap='viridis').set_precision(2)","fab9947d":"url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/heart-disease\/processed.cleveland.data'\nnew_names = ['age','sex','cp','trestbps','chol','fbs', 'restecg', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal', 'heartdisease']\ndataframe = pd.read_csv(url, names=new_names)\ndataframe.head()","55a00e4d":"dataframe.info()","856bd221":"index_invalid_ca = dataframe[dataframe.ca == '?'].index\ndataframe.drop(index_invalid_ca, inplace = True)\ndataframe.ca = pd.to_numeric(dataframe.ca, downcast = 'float')","b40ce008":"index_invalid_thal = dataframe[dataframe.thal == '?'].index\ndataframe.drop(index_invalid_thal, inplace = True)\ndataframe.thal = pd.to_numeric(dataframe.thal, downcast = 'float')","d2dbc1f9":"dataframe.heartdisease = dataframe.heartdisease.where(dataframe.heartdisease < 1, 1)\n\n#update index\ndataframe = dataframe.reset_index()","0562a6cb":"dataframe = dataframe.copy().drop(['index'], axis = 1)","7be9f5b6":"dataframe.describe()","91937416":"dataframe.hist(bins = 15,figsize= (20,20))\nplt.show()","03742f2a":"dataframe['sex'].replace({1:'Male',0:'Female'},inplace = True)\ndataframe['heartdisease'].replace({1:'Heart_attack - Yes',0:'Heart_attack - No'},inplace = True)","dd615d8f":"sns.catplot(x ='age', y ='heartdisease', col = 'sex', data = dataframe, color = 'crimson', kind = 'box')","acd83c64":"s= dataframe.groupby(['sex','age'])['heartdisease'].count().reset_index().sort_values(by='heartdisease',ascending=False)\ns.head(10).style.background_gradient(cmap='Purples')","4ce68a96":"p1 = sns.scatterplot(data = dataframe, x = 'age', y = 'cp', hue = \"heartdisease\", s = 200)\np1.set(xlabel='Age [Years]', ylabel='Chest Pain')","d55a1d05":"p3 = sns.scatterplot(data = dataframe, x = 'age', y = 'thal', hue = \"heartdisease\", s = 200)\np3.set(xlabel='Age [Years]', ylabel='thalassemia')","f8f80a89":"p2 = sns.scatterplot(data = dataframe, x = 'age', y = 'trestbps', hue = \"heartdisease\", s = 200)\np2.set(xlabel='Age [Years]', ylabel='resting blood pressure')","f4be88f0":"dataframe['sex'].replace({'Male':1,'Female':0},inplace = True)\ndataframe['heartdisease'].replace({'Heart_attack - Yes':1,'Heart_attack - No':0},inplace = True)","7ff22282":"correlationMatrix = dataframe.corr() \n\nf = plt.figure(figsize=(15, 8))\nplt.matshow(correlationMatrix, fignum=f.number, cmap='viridis')\nplt.xticks(range(dataframe.shape[1]), dataframe.columns, fontsize=15, rotation=65)\nplt.yticks(range(dataframe.shape[1]), dataframe.columns, fontsize=15)\ncb = plt.colorbar()\ncb.ax.tick_params(labelsize=15)\nplt.show()","cba3a3a7":"correlationMatrix.style.background_gradient(cmap='viridis').set_precision(2)","d4b00767":"dataX = dataframe.copy().drop(['heartdisease', 'fbs'],axis=1)\ndataY = dataframe['heartdisease'].astype(int).copy()","be3da149":"dataY.value_counts()","68eaff94":"featuresToScale = dataX.columns\nsX = pp.StandardScaler(copy=True)\ndataX.loc[:,featuresToScale] = sX.fit_transform(dataX[featuresToScale])","b7f44ac0":"X_train, X_test, y_train, y_test = train_test_split(dataX,\ndataY, test_size=0.3,\nrandom_state=2021, stratify=dataY)\n\ny_test.value_counts()","ba58ce9e":"def anomalyScore (originalDF, reducedDF):\n  loss = np.sum((np.array(originalDF)-np.array(reducedDF))**2, axis=1)\n  loss = pd.Series(data=loss,index=originalDF.index)\n  loss = (loss-np.min(loss))\/(np.max(loss)-np.min(loss))\n  return loss","5b2f0d4b":"def plotResults(trueLabels, anomalyScore, returnPreds = False, plotting = True):\n  preds = pd.concat([trueLabels, anomalyScore], axis=1)\n  preds.columns = ['trueLabel', 'anomalyScore']\n  \n  precision, recall, thresholds = \\\n  precision_recall_curve(preds['trueLabel'],preds['anomalyScore'])\n  \n\n  average_precision = average_precision_score(preds['trueLabel'],preds['anomalyScore'])\n  if plotting:\n    plt.step(recall, precision, color='b', alpha=0.7, where='post')\n    plt.fill_between(recall, precision, step='post', alpha=0.3, color='b')\n    plt.xlabel('Recall')\n    plt.ylabel('Precision')\n    plt.ylim([0.0, 1.1])\n    plt.xlim([0.0, 1.0])\n    plt.title('Average Precision = {0:0.2f}'.format(average_precision))\n\n  if returnPreds==True:\n    return preds, average_precision","e0dbd678":"n_components =11\nsvd_solver = 'auto'\nrandom_state = 2021","f2a75716":"from sklearn.decomposition import KernelPCA\npca = KernelPCA(n_components=n_components,kernel = 'rbf', fit_inverse_transform = True ,random_state= 2021)","2aa42ac3":"X_train_PCA = pca.fit_transform(X_train)\nX_test_PCA = pca.fit_transform(X_test)","ef42ca11":"X_train_PCA = pd.DataFrame(data=X_train_PCA, index=X_train.index)\nX_test_PCA = pd.DataFrame(data=X_test_PCA, index=X_test.index)","1fd4ff73":"#print(pca.explained_variance_ratio_)","dcef8eac":"#plt.bar(range(len(pca.explained_variance_ratio_)),pca.explained_variance_ratio_)","811ad588":"X_train_PCA_inverse = pca.inverse_transform(X_train_PCA)\nX_train_PCA_inverse = pd.DataFrame(data=X_train_PCA_inverse, index=X_train.index)","5262dca2":"anomalyScorePCA = anomalyScore(X_train, X_train_PCA_inverse)\npredsPCA = plotResults(y_train, anomalyScorePCA, False, True)","78d273a2":"trigger_PCA = True\nif trigger_PCA == True:\n  X_train = X_train_PCA\n  X_test = X_test_PCA","b044683a":"k_fold = StratifiedKFold(n_splits=4, shuffle=True, random_state=2021)","c5e8fef1":"penalty = 'l2' \nC = 0.1\nrandom_state = 2021\nsolver = 'liblinear'\nlogReg = LogisticRegression(penalty=penalty, C=C,random_state=random_state, solver=solver)","6b64e55f":"penalty = ['l2']\nC = np.arange(0.01, 1, 0.1 )\nrandom_state = 2021\nsolver = ['lbfgs', 'liblinear', 'saga']\ngrid = {'penalty': penalty,'C':C, 'solver': solver}\n\ngridSearch = GridSearchCV(logReg, grid, scoring='accuracy', cv=k_fold, refit=True)\ngridSearch.fit(X_train, y_train)\nresults = gridSearch.cv_results_\n\nprint('Best accuracy obtained:', gridSearch.best_score_)\nprint('C value for the best case:', gridSearch.best_estimator_.C)\nprint('Penalty value for the best case:', gridSearch.best_estimator_.penalty)\nprint('Solver value for the best case:', gridSearch.best_estimator_.solver)","d9167495":"#Set Parameters to the values from GridSearch\nlogReg.set_params(C = gridSearch.best_estimator_.C, solver = gridSearch.best_estimator_.solver )\n","3f3a3654":"#Lists for storing scores\ntrainingScores = []\ncvScores = []\n\nfor train_index, cv_index in k_fold.split(X_train,y_train):\n\n  #Filtering data based on indices\n  X_train_fold, X_cv_fold = X_train.iloc[train_index,:], X_train.iloc[cv_index,:]\n  Y_train_fold, Y_cv_fold = y_train.iloc[train_index], y_train.iloc[cv_index]\n\n  #Fitting Model\n  logReg.fit(X_train_fold, Y_train_fold)\n\n  #Checking how good the model is on trainingsdata\n  accuracy_score_Training = accuracy_score(Y_train_fold,logReg.predict(X_train_fold))\n  print('--------------------------------------------------------')\n  print('Training accuracy_score: ', accuracy_score_Training)\n  #Checking how good the model is on cv data\n  accuracy_score_cv = accuracy_score(Y_cv_fold,logReg.predict(X_cv_fold))\n  print('CV accuracy_score: ', accuracy_score_cv)\n\n  trainingScores.append(accuracy_score_Training)\n  cvScores.append(accuracy_score_cv)\n\nprint('--------------------------------------------------------')\nprint('--------------------------------------------------------')\nmean_accuracy_score_training = np.array(trainingScores).mean()\nprint('mean Accuracy_score Training:', mean_accuracy_score_training )\nprint('--------------------------------------------------------')\nmean_accuracy_score_cv = np.array(cvScores).mean()\nprint('mean Accuracy_score cv:', mean_accuracy_score_cv )","b600d42e":"logReg.fit(X_train, y_train)","80b008db":"# Prediction and accuracy on trainings data\ny_pred_train_proba_lg = logReg.predict_proba(X_train)\ny_pred_train_proba_lg = pd.DataFrame(data = y_pred_train_proba_lg, index = X_train.index)\n\ny_train_preds_lg = logReg.predict(X_train)\naccuracy_training_ges_lg = accuracy_score(y_train,y_train_preds_lg)","5bcdc6b5":"# Prediction and accuracy on test data\ny_pred_proba_lg = logReg.predict_proba(X_test)\ny_pred_proba_lg = pd.DataFrame(data = y_pred_proba_lg, index = X_test.index)\n\ny_preds_lg = logReg.predict(X_test)\naccuracy_test_ges_lg = accuracy_score(y_test,y_preds_lg)\n","77b9832a":"print('--------------------------------------------------------')\nprint('accuracy_score whole trainings set', accuracy_training_ges_lg )\nprint('--------------------------------------------------------')\nprint('accuracy_score whole test set', accuracy_test_ges_lg )\nprint('--------------------------------------------------------')","0fa33a1e":"cm1 = confusion_matrix(y_test,y_preds_lg)\n#storing false negatives\nfn_lg = cm1[1,0]","9a273535":"plot_confusion_matrix(logReg,X_test,y_test,cmap='Blues')","546fa58a":"preds = pd.concat([y_test,y_pred_proba_lg.loc[:,1]], axis=1)\npreds.columns = ['trueLabel','prediction']\nprecision, recall, thresholds = precision_recall_curve(preds['trueLabel'],preds['prediction'])\naverage_precision = average_precision_score(preds['trueLabel'],preds['prediction'])\n\nplt.step(recall, precision, color='k', alpha=0.7, where='post')\nplt.fill_between(recall, precision, step='post', alpha=0.3, color='k')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.ylim([0.0, 1.05])\nplt.xlim([0.0, 1.0])\nplt.title('Precision-Recall curve: Average Precision = {0:0.2f}'.format(average_precision))","2e47be9f":"fpr, tpr, thresholds = roc_curve(preds['trueLabel'],preds['prediction'])\nareaUnderROC = auc(fpr, tpr)\nplt.figure()\nplt.plot(fpr, tpr, color='r', lw=2, label='ROC curve')\nplt.plot([0, 1], [0, 1], color='k', lw=2, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic: Area under the curve = {0:0.2f}'.format(areaUnderROC))\nplt.legend(loc=\"lower right\")\nplt.show()","4081ec64":"n_estimators = 200\nrandom_state = 2021\ncriterion = 'gini'\n\nmax_depth = 3\nmax_leaf_nodes = None\nmin_samples_split = 2\n\nmax_features = 'sqrt'\n\nRFC = RandomForestClassifier(n_estimators= n_estimators,  random_state= random_state, criterion=criterion, max_features = max_features, max_depth = max_depth, max_leaf_nodes=max_leaf_nodes, min_samples_split=min_samples_split)","667e618e":"n_estimators = [ 100, 150, 200]\ncriterion = ['gini', 'entropy']\nrandom_state = 2021\nmax_depth = range(1, 5)\nmax_features = ['sqrt', 'log2']\ngrid = {'n_estimators': n_estimators,'criterion':criterion, 'max_depth': max_depth, 'max_features':max_features}\n\ngridSearch = GridSearchCV(RFC, grid, scoring='accuracy', cv=k_fold, refit=True)\ngridSearch.fit(X_train, y_train)\nresults = gridSearch.cv_results_\n\nprint('Best accuracy obtained:', gridSearch.best_score_)\nprint('n_estimators value for the best case:', gridSearch.best_estimator_.n_estimators)\nprint('criterion value for the best case:', gridSearch.best_estimator_.criterion)\nprint('max_depth value for the best case:', gridSearch.best_estimator_.max_depth)\nprint('max_features value for the best case:', gridSearch.best_estimator_.max_features)\n\n","3a9dadd7":"#Set Parameters to the values from GridSearch\nRFC.set_params(n_estimators = gridSearch.best_estimator_.n_estimators, criterion = gridSearch.best_estimator_.criterion, max_depth = gridSearch.best_estimator_.max_depth, max_features  =  gridSearch.best_estimator_.max_features)","7b48ed22":"#Storing Scores\ntrainingScores = []\ncvScores = []\n\n\nfor train_index, cv_index in k_fold.split(X_train,y_train):\n\n  #Filtering data based on indices\n  X_train_fold, X_cv_fold = X_train.iloc[train_index,:], X_train.iloc[cv_index,:]\n  Y_train_fold, Y_cv_fold = y_train.iloc[train_index], y_train.iloc[cv_index]\n\n  #Fitting Model\n  RFC.fit(X_train_fold, Y_train_fold)\n\n  #Checking how good the model is on trainingsdata\n  accuracy_score_Training = accuracy_score(Y_train_fold,RFC.predict(X_train_fold))\n  print('--------------------------------------------------------')\n  print('Training accuracy_score: ', accuracy_score_Training)\n  #Checking how good the model is on cv data\n  accuracy_score_Test = accuracy_score(Y_cv_fold,RFC.predict(X_cv_fold))\n  print('cv accuracy_score: ', accuracy_score_cv)\n \n  trainingScores.append(accuracy_score_Training)\n  cvScores.append(accuracy_score_cv)\n\nprint('--------------------------------------------------------')\nprint('--------------------------------------------------------')\nmean_accuracy_score_training = np.array(trainingScores).mean()\nprint('Mean Accuracy_score Training:', mean_accuracy_score_training )\nprint('--------------------------------------------------------')\nmean_accuracy_score_cv = np.array(cvScores).mean()\nprint('Mean Accuracy_score cv:', mean_accuracy_score_cv )\n","1f4c11ad":"RFC.fit(X_train, y_train)","19a1be44":"#Predict and Accuracy on trainings data\ny_pred_train_proba_rf = logReg.predict_proba(X_train)\ny_pred_train_proba_rf = pd.DataFrame(data = y_pred_train_proba_rf, index = X_train.index)\n\n\ny_train_preds_rf = logReg.predict(X_train)\naccuracy_score_training_ges_rf = accuracy_score(y_train,y_train_preds_rf)","234cefdf":"#Predict and Accuracy on test data\ny_pred_proba_rf = RFC.predict_proba(X_test)\ny_pred_proba_rf = pd.DataFrame(data = y_pred_proba_rf, index = X_test.index)\n\ny_preds_rf = RFC.predict(X_test)\naccuracy_test_ges_rf = accuracy_score(y_test,y_preds_rf)","21d0b749":"print('--------------------------------------------------------')\nprint('accuracy_score whole trainings set', accuracy_score_training_ges_rf )\nprint('--------------------------------------------------------')\nprint('accuracy_score whole test set', accuracy_test_ges_rf )\nprint('--------------------------------------------------------')","8d686325":"cm2 = confusion_matrix(y_test,y_preds_rf)\n#storing false negatives\nfn_rf = cm2[1,0]","62912892":"plot_confusion_matrix(RFC,X_test,y_test,cmap='Blues')","579ca712":"preds = pd.concat([y_test,y_pred_proba_rf.loc[:,1]], axis=1)\npreds.columns = ['trueLabel','prediction']\nprecision, recall, thresholds = precision_recall_curve(preds['trueLabel'],preds['prediction'])\naverage_precision = average_precision_score(preds['trueLabel'],preds['prediction'])\n\nplt.step(recall, precision, color='k', alpha=0.7, where='post')\nplt.fill_between(recall, precision, step='post', alpha=0.3, color='k')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.ylim([0.0, 1.05])\nplt.xlim([0.0, 1.0])\nplt.title('Precision-Recall curve: Average Precision = {0:0.2f}'.format(average_precision))","2294829d":"fpr, tpr, thresholds = roc_curve(preds['trueLabel'],preds['prediction'])\nareaUnderROC = auc(fpr, tpr)\nplt.figure()\nplt.plot(fpr, tpr, color='r', lw=2, label='ROC curve')\nplt.plot([0, 1], [0, 1], color='k', lw=2, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic: Area under the curve = {0:0.2f}'.format(areaUnderROC))\nplt.legend(loc=\"lower right\")\nplt.show()","d19d7c11":"n_neighbors = 13\nweights = 'uniform'\nalgorithm = 'auto'\nknn = KNeighborsClassifier(n_neighbors =  n_neighbors, algorithm = algorithm, weights = weights)","4ee4fc6d":"n_neighbors = np.arange(1,30, 2)\nweights = ['uniform', 'distance']\nalgorithm = ['auto', 'ball_tree', 'kd_tree', 'brute']\ngrid = {'n_neighbors': n_neighbors,'weights':weights, 'algorithm': algorithm}\n\ngridSearch = GridSearchCV(knn, grid, scoring='accuracy', cv=k_fold, refit=True)\ngridSearch.fit(X_train, y_train)\nresults = gridSearch.cv_results_\n\nprint('Best accuracy obtained:', gridSearch.best_score_)\nprint('n_neighbors value for the best case:', gridSearch.best_estimator_.n_neighbors)\nprint('weights value for the best case:', gridSearch.best_estimator_.weights)\nprint('algorithm for the best case:', gridSearch.best_estimator_.algorithm)","f6eba7b7":"#Set Parameters to the values from GridSearch\nknn.set_params(n_neighbors = gridSearch.best_estimator_.n_neighbors,  weights = gridSearch.best_estimator_.weights , algorithm = gridSearch.best_estimator_.algorithm )","fcb5e01a":"trainingScores = []\ncvScores = []\n\n\nfor train_index, cv_index in k_fold.split(X_train,y_train):\n\n  #Filtering data based on indices\n  X_train_fold, X_cv_fold = X_train.iloc[train_index,:], X_train.iloc[cv_index,:]\n  Y_train_fold, Y_cv_fold = y_train.iloc[train_index], y_train.iloc[cv_index]\n\n  #Fitting Model\n  knn.fit(X_train_fold, Y_train_fold)\n\n  #Checking how good the model is on trainingsdata\n  accuracy_score_Training = accuracy_score(Y_train_fold,knn.predict(X_train_fold))\n  print('--------------------------------------------------------')\n  print('Training accuracy_score: ', accuracy_score_Training)\n  #Checking how good the model is on cv data\n  accuracy_score_cv = accuracy_score(Y_cv_fold,knn.predict(X_cv_fold))\n  print('CV accuracy_score: ', accuracy_score_cv)\n  trainingScores.append(accuracy_score_Training)\n  cvScores.append(accuracy_score_cv)\n\nprint('--------------------------------------------------------')\nprint('--------------------------------------------------------')\ngesamt_accuracy_score_training = np.array(trainingScores).mean()\nprint('Mean accuracy_score Training:', gesamt_accuracy_score_training )\nprint('--------------------------------------------------------')\nmean_accuracy_score_cv = np.array(cvScores).mean()\nprint('Mean accuracy_score CV:', mean_accuracy_score_cv )","7886820b":"knn.fit(X_train, y_train)","588cd1e3":"#Prediction and Accuracy on trainings data\ny_pred_train_proba_knn = knn.predict_proba(X_train)\ny_pred_train_proba_knn = pd.DataFrame(data = y_pred_train_proba_knn, index = X_train.index)\n#print(y_preds)\n\ny_train_preds_knn = knn.predict(X_train)\naccuracy_training_ges_knn = accuracy_score(y_train,y_train_preds_knn)","c2f87e91":"#Prediction and Accuracy on test data\ny_pred_proba_knn = knn.predict_proba(X_test)\ny_pred_proba_knn = pd.DataFrame(data = y_pred_proba_knn, index = X_test.index)\n#print(y_preds)\n\ny_preds_knn = knn.predict(X_test)\naccuracy_test_ges_knn = accuracy_score(y_test,y_preds_knn)","dc69780b":"print('--------------------------------------------------------')\nprint('accuracy_score whole trainings set', accuracy_training_ges_knn )\nprint('--------------------------------------------------------')\nprint('accuracy_score whole test set', accuracy_test_ges_knn )\nprint('--------------------------------------------------------')","81adf410":"cm3 = confusion_matrix(y_test,y_preds_knn)\n#storing false negatives\nfn_knn = cm3[1,0]","7014b91d":"plot_confusion_matrix(knn,X_test,y_test,cmap='Blues')","b9371c20":"preds = pd.concat([y_test,y_pred_proba_knn.loc[:,1]], axis=1)\npreds.columns = ['trueLabel','prediction']\nprecision, recall, thresholds = precision_recall_curve(preds['trueLabel'],preds['prediction'])\naverage_precision = average_precision_score(preds['trueLabel'],preds['prediction'])\n\nplt.step(recall, precision, color='k', alpha=0.7, where='post')\nplt.fill_between(recall, precision, step='post', alpha=0.3, color='k')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.ylim([0.0, 1.05])\nplt.xlim([0.0, 1.0])\nplt.title('Precision-Recall curve: Average Precision = {0:0.2f}'.format(average_precision))","4bf2164f":"fpr, tpr, thresholds = roc_curve(preds['trueLabel'],preds['prediction'])\nareaUnderROC = auc(fpr, tpr)\nplt.figure()\nplt.plot(fpr, tpr, color='r', lw=2, label='ROC curve')\nplt.plot([0, 1], [0, 1], color='k', lw=2, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic: Area under the curve = {0:0.2f}'.format(areaUnderROC))\nplt.legend(loc=\"lower right\")\nplt.show()","bd5e5e79":"def build_model():\n  #Sequential API\n  model = models.Sequential()\n  #Defining the first hidden layer:\n  model.add(layers.Dense(units = 32, activation='relu', input_shape=(X_train.shape[1],)))\n  model.add(layers.Dense(units = 32, activation='relu'))\n  #Sigmoid for values between 0 and 1 (good for binary classification).\n  model.add(layers.Dense(units = 1,activation='sigmoid'))\n\n\n  model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n  return model","1aaa8607":"#Looking into model structure:\nbuild_model().summary()","6059077d":"#Model Training\n#--------------------------------------------------------------------------\n#Hyperparameters\nnum_epochs = 200\n\nbatch_size = 10","d92f7943":"#Lists for storing scores\ntrainingScores = []\ncvScores = []\n\nfor train_index, cv_index in k_fold.split(X_train,y_train):\n\n  #Filtering data based on indices\n  X_train_fold, X_cv_fold = X_train.iloc[train_index,:], X_train.iloc[cv_index,:]\n  Y_train_fold, Y_cv_fold = y_train.iloc[train_index], y_train.iloc[cv_index]\n  #Building the model\n  model = build_model()\n  #Fitting Model\n  #model.fit(X_train_fold, Y_train_fold, epochs=num_epochs, batch_size=batch_size, verbose=0)\n  history =  model.fit(X_train_fold, Y_train_fold, epochs=num_epochs, batch_size=batch_size, validation_data=(X_cv_fold, Y_cv_fold) ,verbose=0)\n\n  \n  #Evaluating the training performance:\n  val_binary_crossentropy, val_accuracy = model.evaluate(X_train_fold, Y_train_fold, verbose=0)\n  trainingScores.append(val_binary_crossentropy)\n  print('--------------------------------------------------------')\n  print('Training accuracy: ', val_accuracy)\n\n  #Evaluating the CV performance:\n  val_binary_crossentropy, val_accuracy = model.evaluate(X_cv_fold, Y_cv_fold, verbose=0)\n  cvScores.append(val_binary_crossentropy)\n  print('CV accuracy: ', val_accuracy)","e774d867":"def plot_learning_curves(history):\n  #We will omit the first 10 points for a better visualization:\n  plt.plot(history.epoch,history.loss, \"k--\", linewidth=1.5, label=\"Training\")\n  plt.plot(history.epoch,history.val_loss, \"b-.\", linewidth=1.5, label=\"CV test\")\n  plt.legend()\n  plt.ylim(0.,1,10)\n  #plt.yscale(\"log\")\n  plt.xlabel(\"Epochs\"),  plt.ylabel(\"loss\")","f28db688":"hist = pd.DataFrame(history.history)\n#Adding epoch column:\nhist['epoch'] = history.epoch\n# As you can see, we have the losses as well as mae for both training and CV data:\n#hist.sample(3)","4ae11872":"plot_learning_curves(hist)","9e13f030":"model = history.model","d6b312af":"val_binary_crossentropy_training, val_accuracy_total_training = model.evaluate(X_train, y_train, verbose=0)\nprint('--------------------------------------------------------')\nprint('accuracy for the entire trainings dataset: ', val_accuracy_total_training)\nprint('--------------------------------------------------------')","81ce7158":"val_binary_crossentropy_test, val_accuracy_total_test = model.evaluate(X_test, y_test, verbose=0)\nprint('--------------------------------------------------------')\nprint('accuracy for the entire test dataset: ', val_accuracy_total_test)\nprint('--------------------------------------------------------')","4b7435b0":"y_preds = model.predict_classes(X_test)","a7e0307d":"cm1 = confusion_matrix(y_test,y_preds)","62140fb7":"df_cm = pd.DataFrame(cm1, range(2), range(2))\n# plt.figure(figsize=(10,7))\nsns.set(font_scale=1.4) # for label size\nsns.heatmap(df_cm, annot=True, annot_kws={\"size\": 16}, cmap = 'crest') # font size\n\nplt.show()\n\n","cb266a3b":"def build_model():\n  #Sequential API\n  model = models.Sequential()\n  #Defining the first hidden layer:\n  model.add(layers.Dense(units = 16,  kernel_regularizer=regularizers.l2(0.001), kernel_initializer=\"he_uniform\", activation='relu', input_shape=(X_train.shape[1],)))\n # model.add(layers.Dense(units = 16,  kernel_regularizer=regularizers.l2(0.001),activation='relu'))\n # model.add(layers.Dropout(0.3))\n  model.add(layers.Dense(units = 16,  kernel_regularizer=regularizers.l2(0.001),kernel_initializer=\"he_uniform\", activation='relu'))\n  model.add(layers.Dropout(0.3))\n  model.add(layers.Dense(units = 16,  kernel_regularizer=regularizers.l2(0.001),kernel_initializer=\"he_uniform\",activation='relu'))\n  #Sigmoid for values between 0 and 1 (good for binary classification).\n  model.add(layers.Dense(units = 1,activation='sigmoid'))\n\n\n  model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n  return model","a47905e1":"#Looking into model structure:\nbuild_model().summary()","3d0ee61e":"#Lists for storing scores\ntrainingScores = []\ncvScores = []\n\nfor train_index, cv_index in k_fold.split(X_train,y_train):\n\n    #Filtering data based on indices\n  X_train_fold, X_cv_fold = X_train.iloc[train_index,:], X_train.iloc[cv_index,:]\n  Y_train_fold, Y_cv_fold = y_train.iloc[train_index], y_train.iloc[cv_index]\n  #Building the model\n  model = build_model()\n  #Fitting Model\n  #model.fit(X_train_fold, Y_train_fold, epochs=num_epochs, batch_size=batch_size, verbose=0)\n  history =  model.fit(X_train_fold, Y_train_fold, epochs=num_epochs, batch_size=batch_size, validation_data=(X_cv_fold, Y_cv_fold) ,verbose=0)\n\n\n  #Evaluating the training pperformance:\n  val_binary_crossentropy, val_accuracy = model.evaluate(X_train_fold, Y_train_fold, verbose=0)\n  trainingScores.append(val_binary_crossentropy)\n  print('--------------------------------------------------------')\n  print('Training accuracy: ', val_accuracy)\n\n  #Evaluating the CV pperformance:\n  val_binary_crossentropy, val_accuracy = model.evaluate(X_cv_fold, Y_cv_fold, verbose=0)\n  cvScores.append(val_binary_crossentropy)\n  print('CV accuracy: ', val_accuracy)\n","849ae358":"hist = pd.DataFrame(history.history)\n#Adding epoch column:\nhist['epoch'] = history.epoch","d367f93e":"plot_learning_curves(hist)","db076b8c":"myCheckpoint= keras.callbacks.ModelCheckpoint(\"my_best_model1.h5\", save_best_only=True)\nmyEarly_stopping = keras.callbacks.EarlyStopping(patience=10,restore_best_weights=True)","295d3ccf":"# run model with checkpoint and early stopping\n#Lists for storing scores\n\ntrainingScores = []\ncvScores = []\n\nfor train_index, cv_index in k_fold.split(X_train,y_train):\n\n    #Filtering data based on indices\n  X_train_fold, X_cv_fold = X_train.iloc[train_index,:], X_train.iloc[cv_index,:]\n  Y_train_fold, Y_cv_fold = y_train.iloc[train_index], y_train.iloc[cv_index]\n  #Building the model\n  model = build_model()\n  #Fitting Model\n  #model.fit(X_train_fold, Y_train_fold, epochs=num_epochs, batch_size=batch_size, verbose=0)\n  history =  model.fit(X_train_fold, Y_train_fold, epochs=num_epochs, batch_size=batch_size, validation_data=(X_cv_fold, Y_cv_fold) ,callbacks=[myCheckpoint,myEarly_stopping],verbose=0)\n\n\n  #Evaluating the training pperformance:\n  val_binary_crossentropy, val_accuracy = model.evaluate(X_train_fold, Y_train_fold, verbose=0)\n  trainingScores.append(val_binary_crossentropy)\n  print('--------------------------------------------------------')\n  print('Training accuracy: ', val_accuracy)\n\n  #Evaluating the CV pperformance:\n  val_binary_crossentropy, val_accuracy = model.evaluate(X_cv_fold, Y_cv_fold, verbose=0)\n  cvScores.append(val_binary_crossentropy)\n  print('CV accuracy: ', val_accuracy)\n\n#Load best model from Checkpoint\nmodel = keras.models.load_model(\"my_best_model1.h5\")","216e8506":"val_binary_crossentropy_test, val_accuracy_total_test = model.evaluate(X_test, y_test, verbose=0)\nprint('--------------------------------------------------------')\nprint('accuracy for the entire test dataset: ', val_accuracy_total_test)\nprint('--------------------------------------------------------')","ad2dee6b":"y_preds = model.predict_classes(X_test)\n","18b1d369":"cm2 = confusion_matrix(y_test,y_preds)\n#storing false negatives\nfn_nn = cm2[1,0]","f9ebb055":"\n\ndf_cm = pd.DataFrame(cm2, range(2), range(2))\n# plt.figure(figsize=(10,7))\nsns.set(font_scale=1.4) # for label size\nsns.heatmap(df_cm, annot=True, annot_kws={\"size\": 16},  cmap = 'crest') # font size\n\nplt.show()\n\n","99206d98":"#Storing all scores \nscores = [accuracy_test_ges_lg, accuracy_test_ges_rf, accuracy_test_ges_knn, val_accuracy_total_test]\nfales_negatives_count = [fn_lg, fn_rf, fn_knn,fn_nn]\nalgorithms = ['Logisitc Regression', 'Random Forests',  'K-Nearest Neighbors', 'Neural Network']","c50cf5af":"sns.set(rc={'figure.figsize':(15,8)})\nplt.xlabel(\"Algorithms\")\nplt.ylabel(\"Accuracy score\")\n\nsns.barplot(x = algorithms, y = scores)\nprint('Accuracies: logReg:' ,scores[0], 'Random Forest:' ,scores[1],  'K-Nearest-Neighbors:' ,scores[2],  'Neural Network:' ,scores[3])","25d8a9f4":"sns.set(rc={'figure.figsize':(15,8)})\nplt.xlabel(\"Algorithms\")\nplt.ylabel(\"Count of false negatives\")\n\nsns.barplot(x = algorithms, y = fales_negatives_count)","b94b0147":"For clarity in the next plots I replace here the values of the attributes sex and heartdisease. Afterwards I change the values back again.","c77c72e8":"# Heart Disease Data Set\n\nby Theodor Lanzer\n\nTask: Find out if Heart Disease is present at the current patient. \n\nClassification Problem","928544fc":"#5. Model Selection \n\nI have chosen the following as my baseline models, which are well suited for classification problems:\n*   Logistic Regression \n*   Random Forests \n* K-Nearest Neighbors\n\nAfter testing the baseline models I build up a Neural Network\n*   Neural Network\n*   Fine tuning hyperparameters\n\nWorkflow:\n\nMy workflow with the Baseline models is always the same. I start with Gridsearch to find the best parameters. Then to validate the model I look at the accuracy in cross validation. After that I train the model with all the test data and look at the results using the correlation matrix, precision and recall, and ROC curve.\n\n\n\n\n","d716e6a3":"Confusion Matrix","aecd3b90":"As the learning curve shows the Model still overfits. To avoid overfitting, I have added early stopping. The training is stopped if no improvement has taken place over further epochs. To get the best model from cross validation I put in a checkpoint.","eb8e8d20":"#6. Evaluation of the model predictions","77b2b475":"If you look at the accuracies, you can see that all 4 models have about the same accuracy. This is about 84%. To judge the models I look at the number of false negatives declared. Since this is about detecting heart disease, the worst case is when the patient has heart disease but it is not detected. In this case, Logistic Regression and Neural Network are best. With the neural network it depends, as said above, on the initilized weights. In my experiments, the neural network classified between 6 in the best case and 12 in the worst case false negatives (from 30% Testdata size).","1d1e3244":"#### Hyperparameters for PCA","d5783a0f":"# 3.1 Import Data from Kaggle\n\nBefore I start the research, I want to get an overview of the data. And whether there are any discrepancies. As a first look I take a look at the correlation matrix. Looking at the feature Chest Pain (cp) it has values from 0 to 3, but at the description it takes values from 1 to 4.","f1a61e4f":"From the plot below, the age range of women is greater for no heart disease than for men. The range of age for heart disease is larger for men.","5ec32455":"Desicion if PCA or not.","b6f4c8b7":"Organizing data into pd Framework","b998d432":"#4. Preprocessing Data ","c1f08a32":"The next plot shows the patient's age on the X-axis and the chest pain attribute on the Y-axis. In addition, the plot shows whether a heart disease is present or not. It can be seen that with a value of 4 ( asymptotic) most of the heart diseases are present. ","5c89c719":"#### Functions used for PCA","76e9eeef":"## Random Forest","9fe98685":"Confusion Matrix","96c6af4d":"Test model with training and test data set.","8b358639":"First, I added a dropout layer between the two layers. This helped, but the network still overfits. Next, I reduced the number of neurons to 16 and added a second layer after the dropout layer. A 4th layer and a second dropout layer did not improve the accuracy of the model. Therefore I have commented them out. Additionally I added a kernel regularizer. As regularizers I tried **l1**, **l2**, and **l1_l2** and got the best results with **l2**. I did not change the loss, the metric and the solver.","12480c06":"#3.2 Import Data from original source \nThe Kaggle Dataset has a few inconsistencies. Therefore I import the dataset from the original website (https:\/\/archive.ics.uci.edu\/ml\/datasets\/Heart+Disease) and prepare it myself.","ee8a4788":"Train and test model with training and test set.","de64d1d0":"The features **ca** and **thal** displayed as object-type, which is wrong. They should be numeric as the other features. After an investigation I found out that there are some lines with **?**. I decicded to remove those lines. ","04125c13":"The True Positives and False Negatives are calculated for each threshold. The curve results from all these points. The closer the curve is to the upper left corner, the better the solution.","87f089fc":"#### Precision Recall Curve:\n\n**Precision** \n\n*   Precision = True Positive \/ ( True Positive  + False Positive)\n*   captures how often, when a model makes a positive predeiction, this prediction turns out to be correct.\n\n**Recall** \n\n\n*   Recall  = True Positive \/ (True Positive + False Negative)\n*   tells us how confident we can be that all instances with the positive target level have been found the model\n\ngo through the treshold as in ROC. Count the Values for every treshold","17931b3d":"Hyperparamters","e4f07f96":"#### ROC Curve","364e39f0":"Accuracy for training and test data:","4885834c":"## Preparing Dataset for ML","87ec67d5":"The table shows the number of heart disease cases by gender and age. This shows that most heart disease is present in men between the ages of 57 and 59. ","b0d2d290":"#### ROC-Curve","752a149c":"Grid Search to find best result.","3d115a77":"Train model with all trainings data and hyperparameters from above","1920e6a1":"The next plot shows the relationship between resting blood pressure and age. In this plot, no relationship is apparent with respect to heart disease.","42c09ee2":"Split Data into training and test set. First I chose 20% as test set, but some ML Methods had way better results on test data than on trainings data, so I increased test data to 30%","806a8ada":"To validate my models I use Cross Validation.","7e3a3d9e":"#### ROC-Curve","26bdf561":"Training accuracy here is at 1 and CV accuracy well below. The network is overfitted. To confirm this, I look at the loss in the learning curve. This also shows strong overfitting.","4a8a2c82":"## K Nearest Neighbors","165f82e2":"Hyperparameters","0f5f7430":"### Principal Component Analysis\n\nSince I have 12 attributes I am trying out dimensional reduction to see if it improves my accuracy.","d7fdd53c":"In the original dataset, the target takes integer values between 0 and 4. Here, 0 means no heart disease and 1 to 4 means the severity of the heart disease. Since we only want to find out whether a disease is present or not, the values greater than 0 are combined to 1. This leads to a binary classification problem.\n","bffbfcf7":"Remove Questionmarks from **ca**\n1. Find those indices with Questionmark and remove whole lines\n2. Change datatype to float","9f5bd9a3":"Confusion Matrix","8b7c0a3e":"Accuracy for training and test set: ","4516fc22":"Evaluate Hyperparameters with CV","4df9c182":"#1. Problem Definition and description of data\n\nThe selected dataset consists of physical attributes of a human. Some features are measured values, others are subjectively determined by the patient. The features will be discussed in more detail in the following. The important target variable is whether a heart disease is present in the patient or not. \n\nThis is a binary classification problem. A heart disease is either present or not. \n\nThe dataset was published by the Medical Center, Long Beach and Cleveland Clinic Foundation. \n\nNow lets look at the attributes of this data set.\n\nAttribute Information:\n\nThe Problem has the following Inputs:\n\n1.   **age**: in years\n2.   **sex**:\n\n  *   Value 1: male\n  *   Value 0: female\n\n\n3.   **cp**: chest pain \n\n  *   Value 1: typical angina\n  *   Value 2: atypical angina\n  *   Value 3: non-anginal pain\n  *   Value 4: asymptomatic \n\n\n4.   **trestbps**: resting blood pressure (in mm HG)\n\n5.   **chol**: serum cholestoral in mg\/dl\n6.   **fbs**: fasting blood sugar > 120 mg\/ml\n\n   *    Value 1: true\n   *    Value 0: false\n\n\n\n7.   **restecg**:  resting electrocardiographic results\n\n  *   Value 0: normal\n  *   Value 1: having ST-T wave abnormality\n  *   Value 2: showing probale or  definite left ventricular hypertrophy\n\n\n8.   **thalach**: maximum heart rate achieved\n\n\n\n9.   **exang**: exercise induced angina\n\n *   Value 1: yes\n  *   Value 0: no\n\n\n10.   **oldpeak**: ST depression induced by exercise relative to rest\n\n\n11.   **slope**: the slope of the peak exercise ST segment\n \n  *   Value 1: upsloping\n  *   Value 2: flat\n  *   Value 3: downsloping\n\n\n \n12.   **ca**: number of major vessels (Values from 0-3)\n\n\n13.   **thal**: A blood disorder called 'Thalassemia':\n\n  *   Value 3: normal\n  *   Value 6: fixed detected\n  * Value 7: reversable detected\n\nOutput:\n\n\n\n1.  **Heartdisease**:\n\n  *   Value 1: present\n  *   Value 0: not present\n\n\nTo start with the topic, I researched which factors promote heart disease.\nI found out that risk factors for developing heart disease are the following: high cholesterol, high blood pressure, diabetes, weight, family history and smoking. I would like to find out if these hypotheses  can be confirmed with the present data set. (1).\n\nTo measure my success, I decided to use accuracy. This gives me a value of how many percent were correctly classified. Additionally I look at the Area under curve and Precision and Recall.\n\nSource:\n(1) https:\/\/www.nhs.uk\/conditions\/cardiovascular-disease\/\n\n\n\n\n\n\n\n\n\n\n\n\n\n","78d4b70f":"### Cross Validation","abfda987":"At first I check for missing values and datatypes.","df3852a8":"## Fine Tuning Parameters","03c44636":"\n\n\n## Evaluate the results\n\n\n\n","e41bdc43":"The next plot shows the relationship between thalassemia and age. Having reversable detected thalassemia seems as a pretty strong indicator for heart disease. (Value of 7).","5fd689a4":"## Exploring Data and Visualization","d873cd62":"First, I look at the histograms to see how the data is distributed. There are more men than women. 160 participants have no heart disease and 137 have one. This is a balanced problem.","43b83e44":"#### Recall Precision Curve","00555a6e":"#### Recall Precision Curve","81b08a2b":"Correlation Matrix:\n\nFrom the correlation matrix, age, chest pain, exang, slope, oldpeak, ca, thal correlate positively with heartdisease. Thalach, restecg are negatively correlated. \n\nResting blood pressure and cholesterol correlate poorly with heart disease. In my hypthosis from the beginning, however, I assumed this.\n\nThe attribute fbs does not correlate with heart disease at all. Therefore, I decide to take it out for the further calculations.","091e4d08":"## Logistic Regression","7d43c403":"## 3.1.2 Is Kaggle Data Set right? A look at the correlation matrix\n","88089f7c":"### Evaluate Results","55caa43e":"To get started i trained the model with 200 epochs.","c3c45656":"# Neural Network\n\n\nFirst, I started with an NN with 2 layers and 32 neurons each and an output layer with one neuron.  As activation function I used **relu** for the first two layers and **sigmoid** for the Output Layer. Since it is a binary classification problem I decided to use **binary_crossentropy** as loss. And **accuracy** I used as metric. As optimizer I took **adam**.","9c8eb9d7":"Remove Questionmarks from **thal**","05d75929":"Accuracy on training und test set:","6780fed8":"#2. Preparing the enviroment","c4028a5b":"Train this model with training and test data set","79779b8f":"#7. Lessons Learnt and Conclusions\n\n* The classification whether heart disease is present or not can be classified with an accuracy around 84%.\n* Baseline models predict less false positives than false negatives. The other way around would be better.\n*   With none of the models it is possible to achieve an accuracy significantly above 85%. Since all models have similar accuracies and I have not found any better on Kaggle, this is probably the best possible result.\n*   I think that the size of the data set is not enough to get even better results.\n* Since we are dealing with human measurements and subjective values like chest pain, it is hard to get good results when the data set may be inconsistent. \n* After some research, I still found out that other attributes are also important in the development of heart disease. For example, smoking, obesity, stress and alcohol consumption. These data would certainly also be helpful in the detection.\n* In the beginning, I hypothesized that the high cholesterol and blood pressure have an influence on heart disease. This data set did not show that.\n\n\n\n","12fb4ad3":"After looking at the correlation matrix, I noticed that the feature exang is negatively correlated with target (heartdisease). Which means that a angina induced by exercise would reduce the risk of heart disease. Angina is a type of chest pain caused by reduced blood flow to the heart(1). This makes no sense! In addition, younger people are more likely to be affected by heart diseases. The feature ca has different values than discribed. Something seems to be wrong. So I did some more research and found out that the target values are reversed. Now I have decided to import the data set from the original source and prepare it myself.\n\n\nSorce:\n\n(1) https:\/\/www.mayoclinic.org\/diseases-conditions\/angina\/symptoms-causes\/syc-20369373#:~:text=But%20when%20you%20increase%20the,arteries%20slow%20down%20blood%20flow.","f34f50ad":"### Creating Feature Matrix\n\nCreating arrays for X and Y data. As I said, I drop **fbs** on X Data \n","7f7b4ba9":"Rescaling data because most ML algorithms work better if the data is normalized around zero.","c291e97f":"### Summary \n\nThe neural network has the potential to have the greatest accuracy. Depending on how the weights are initialized, the model has an accuracy between 81% and 86%. The false positives are the lowest in the best NN-case.","5a09e9d8":"Model Implementation on X and Y Data","84582ec6":"Anomaly Score","856d7a02":"Cross-validation for validating estimator performance"}}