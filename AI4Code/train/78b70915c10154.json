{"cell_type":{"86732250":"code","6dd4526f":"code","c744158b":"code","c8b754e7":"code","695fdfb5":"code","6442837f":"code","a61949f2":"code","c5c6ba15":"code","ed6ccc57":"code","0fd70765":"code","d7bd6b43":"code","e56f0fc6":"code","7a587ce8":"markdown","6da84774":"markdown","0d1b3928":"markdown","73c577d5":"markdown"},"source":{"86732250":"!git clone https:\/\/github.com\/rkuo2000\/yolov5\n%cd yolov5\n!mkdir -p Dataset\/FaceMask\/Images\n!mkdir -p Dataset\/FaceMask\/Labels\n!cp -rf \/kaggle\/input\/face-mask-detection\/images\/* Dataset\/FaceMask\/Images\n!mkdir -p Dataset\/images Dataset\/labels","6dd4526f":"import os\nimport numpy as np\nfrom pathlib import Path\nfrom xml.dom.minidom import parse\nfrom shutil import copyfile","c744158b":"# Define Paths & parameters\nFILE_ROOT = \"\/kaggle\/input\/face-mask-detection\/\"\nIMAGE_PATH = FILE_ROOT + \"images\"  \nANNOTATIONS_PATH = FILE_ROOT + \"annotations\"\n\nDATA_ROOT = \"Dataset\/\"\nLABELS_ROOT = DATA_ROOT + \"FaceMask\/Labels\"\nIMAGES_ROOT = DATA_ROOT + \"FaceMask\/Images\"  \n\nDEST_IMAGES_PATH = \"images\"\nDEST_LABELS_PATH = \"labels\" ","c8b754e7":"classes = ['with_mask', 'without_mask', 'mask_weared_incorrect']","695fdfb5":"# Define functions\ndef cord_converter(size, box):\n    x1 = int(box[0])\n    y1 = int(box[1])\n    x2 = int(box[2])\n    y2 = int(box[3])\n    dw = np.float32(1. \/ int(size[0]))\n    dh = np.float32(1. \/ int(size[1]))\n    w = x2 - x1\n    h = y2 - y1\n    x = x1 + (w \/ 2)\n    y = y1 + (h \/ 2)\n    x = x * dw\n    w = w * dw\n    y = y * dh\n    h = h * dh\n    return [x, y, w, h]\ndef save_file(img_jpg_file_name, size, img_box):\n    save_file_name = LABELS_ROOT + '\/' + img_jpg_file_name + '.txt'\n    file_path = open(save_file_name, \"a+\")\n    for box in img_box:\n        cls_num = classes.index(box[0])\n        new_box = cord_converter(size, box[1:])\n        file_path.write(f\"{cls_num} {new_box[0]} {new_box[1]} {new_box[2]} {new_box[3]}\\n\")\n    file_path.flush()\n    file_path.close()\ndef get_xml_data(file_path, img_xml_file):\n    img_path = file_path + '\/' + img_xml_file + '.xml'\n    dom = parse(img_path)\n    root = dom.documentElement\n    img_name = root.getElementsByTagName(\"filename\")[0].childNodes[0].data\n    img_size = root.getElementsByTagName(\"size\")[0]\n    objects = root.getElementsByTagName(\"object\")\n    img_w = img_size.getElementsByTagName(\"width\")[0].childNodes[0].data\n    img_h = img_size.getElementsByTagName(\"height\")[0].childNodes[0].data\n    img_c = img_size.getElementsByTagName(\"depth\")[0].childNodes[0].data\n    img_box = []\n    for box in objects:\n        cls_name = box.getElementsByTagName(\"name\")[0].childNodes[0].data\n        x1 = int(box.getElementsByTagName(\"xmin\")[0].childNodes[0].data)\n        y1 = int(box.getElementsByTagName(\"ymin\")[0].childNodes[0].data)\n        x2 = int(box.getElementsByTagName(\"xmax\")[0].childNodes[0].data)\n        y2 = int(box.getElementsByTagName(\"ymax\")[0].childNodes[0].data)\n        img_jpg_file_name = img_xml_file + '.jpg'\n        img_box.append([cls_name, x1, y1, x2, y2])\n\n    # test_dataset_box_feature(img_jpg_file_name, img_box)\n    save_file(img_xml_file, [img_w, img_h], img_box)","6442837f":"files = os.listdir(ANNOTATIONS_PATH)\nfor file in files:\n    file_xml = file.split(\".\")\n    get_xml_data(ANNOTATIONS_PATH, file_xml[0])","a61949f2":"from sklearn.model_selection import train_test_split\nimage_list = os.listdir('Dataset\/FaceMask\/Images')\ntrain_list, test_list = train_test_split(image_list, test_size=0.2, random_state=7)\nval_list, test_list = train_test_split(test_list, test_size=0.5, random_state=8)\n\nprint('total:',len(image_list))\nprint('train:',len(train_list))\nprint('val:',len(val_list))\nprint('test:',len(test_list))","c5c6ba15":"def copy_data(file_list, img_labels_root, imgs_source, type):\n    root_file = Path(DATA_ROOT + DEST_IMAGES_PATH + '\/' + type)\n    if not root_file.exists():\n        print(f\"Path {root_file} is not exit\")\n        os.makedirs(root_file)\n    root_file = Path(DATA_ROOT + DEST_LABELS_PATH + '\/' + type)\n    if not root_file.exists():\n        print(f\"Path {root_file} is not exit\")\n        os.makedirs(root_file)\n    for file in file_list:\n        img_name = file.replace('.png', '')\n        img_src_file = imgs_source + '\/' + img_name + '.png'\n        label_src_file = img_labels_root + '\/' + img_name + '.txt'\n        DICT_DIR = DATA_ROOT + DEST_IMAGES_PATH + '\/' + type\n        img_dict_file = DICT_DIR + '\/' + img_name + '.png'\n        copyfile(img_src_file, img_dict_file)\n        DICT_DIR = DATA_ROOT + DEST_LABELS_PATH + '\/' + type\n        img_dict_file = DICT_DIR + '\/' + img_name + '.txt'\n        copyfile(label_src_file, img_dict_file)","ed6ccc57":"copy_data(train_list, LABELS_ROOT, IMAGES_ROOT, \"train\")\ncopy_data(val_list,   LABELS_ROOT, IMAGES_ROOT, \"val\")\ncopy_data(test_list,  LABELS_ROOT, IMAGES_ROOT, \"test\")","0fd70765":"!echo \"train: Dataset\/images\/train\\n\" > data\/facemask.yaml\n!echo \"val:   Dataset\/images\/val\\n\" >> data\/facemask.yaml\n!echo \"nc : 3\\n\" >> data\/facemask.yaml\n!echo \"names: ['With_Mask', 'Without_Mask', 'Incorrect_Mask']\\n\" >> data\/facemask.yaml\n\n!cat data\/facemask.yaml","d7bd6b43":"!python train.py --img 320 --batch 16 --epochs 300 --data data\/facemask.yaml --cfg models\/yolov5s.yaml --weights yolov5s.pt","e56f0fc6":"# save trained weights for detection\n!cp runs\/train\/exp\/weights\/best.pt weights","7a587ce8":"### 3. Train Test Split\u00b6","6da84774":"### 2. Annotations","0d1b3928":"### 1. Create dataset","73c577d5":"### Train"}}