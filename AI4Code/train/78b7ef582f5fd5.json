{"cell_type":{"53920175":"code","0a913341":"code","cf35c602":"code","cdad13bf":"code","b9d26e9f":"code","61d6f58c":"code","d2ded9ec":"code","746a2c5c":"code","f69fcc45":"code","7775d9cb":"code","0acb1ba2":"code","7b6295b5":"code","9926ab1f":"code","e1fa5d16":"code","556057ed":"code","651dad23":"code","7476f170":"code","bf8bd297":"code","2d8c691b":"code","035e1437":"markdown","25255582":"markdown","19c8f783":"markdown","0df83eba":"markdown","010319ec":"markdown","0bd8aeec":"markdown","739fdd25":"markdown","f0a34b35":"markdown","7f618111":"markdown","2a75f367":"markdown","c7667470":"markdown","df26af3d":"markdown","23e2114f":"markdown","6e23103c":"markdown","f0765161":"markdown","4eaed0c7":"markdown","3751863e":"markdown"},"source":{"53920175":"!pip install gradio","0a913341":"import pandas as pd\nimport numpy as np\nimport gradio as gr\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler, LabelEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import confusion_matrix, classification_report, precision_recall_curve, roc_curve, roc_auc_score\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, train_test_split, cross_val_predict\nfrom sklearn.ensemble import RandomForestClassifier\nfrom imblearn.under_sampling import RandomUnderSampler","cf35c602":"!wget 'https:\/\/storage.googleapis.com\/kagglesdsdata\/datasets\/13996\/18858\/WA_Fn-UseC_-Telco-Customer-Churn.csv?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20210518%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20210518T232452Z&X-Goog-Expires=259199&X-Goog-SignedHeaders=host&X-Goog-Signature=4db3347fced42a1b3c52c68f5da6fa30b801c5353009372e736cf85f80994cacef926286750aa2b3136f27822112ed1fbf229b524ed608379f5761fb696d4cbd18fca1777ab5cbeab06ed36f2620a70516cae5a51ebd96249df9327fed22ec5f8a522eae5b1b2bb60ad52bf6c9909dc65854aaca88b309ef8f51e669de548c2da038b710bddf7a29a2f27380dc2b550562804cf654ec5491496037432c042e8ac4fb4376dc55b54d8883347a4cd2ea40c8c8a334df89ef4d19fe615e34057d2781da8e02cf306f95208bd19b3dc47cfd1aa4523cc9d0f18c81d78fb8855dd8c5aa63bbc69f746f8c5c50b5eaf601e74c7fb8a88c2d8936be4c553777fd638765' -O 'churn.csv'","cdad13bf":"df = pd.read_csv('churn.csv')","b9d26e9f":"df.drop('customerID', axis=1, inplace=True)","61d6f58c":"filter = lambda x: 'Yes' if x == 1 else 'No'\ndf['SeniorCitizen'] = df['SeniorCitizen'].apply(filter)","d2ded9ec":"df.drop(df[(df.TotalCharges == \" \")].index, axis=0, inplace=True)","746a2c5c":"df.TotalCharges = pd.to_numeric(df.TotalCharges)","f69fcc45":"train, test = train_test_split(df, test_size=0.2, random_state=0)\ntest.info()","7775d9cb":"y = train['Churn']\ntrain.drop(['Churn'] , axis=1, inplace=True)\nX = train.copy()\n\ny","0acb1ba2":"numerical_features = train.select_dtypes(exclude=['object']).columns.tolist()\ncategorical_features = train.select_dtypes(include=['object']).columns.tolist()\ncategorical_features","7b6295b5":"# Num\u00e9rico\nnumerical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant')),\n    ('scaler', StandardScaler())])\n\n# Categ\u00f3rico\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder())])\n\n# Juntando\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_features),\n        ('cat', categorical_transformer, categorical_features)])\n\npipe_RF = Pipeline(\n    steps = [('preprocessor', preprocessor),\n            ('RF', RandomForestClassifier(class_weight='balanced', random_state=0))])\n\npipe_RF.fit(X, y)","9926ab1f":"y_pred = cross_val_predict(pipe_RF, X, y, cv=5)\nprint(classification_report(y, y_pred))","e1fa5d16":"y_test = test['Churn']\ntest.drop(['Churn'] , axis=1, inplace=True)\nX_test = test.copy()\n\ny_test","556057ed":"y_pred_test = cross_val_predict(pipe_RF, X_test, y_test, cv=5)\nprint(classification_report(y_test, y_pred_test))","651dad23":"def predict(gender, SeniorCitizen, Partner, Dependents, PhoneService, \n            MultipleLines, InternetService, OnlineSecurity, OnlineBackup,\n            DeviceProtection, TechSupport, StreamingTV, StreamingMovies, \n            Contract, PaperlessBilling, PaymentMethod, tenure, MonthlyCharges, \n            TotalCharges):\n\n    a = [gender, SeniorCitizen, Partner, Dependents, tenure, PhoneService, \n        MultipleLines, InternetService, OnlineSecurity, OnlineBackup, \n        DeviceProtection, TechSupport, StreamingTV, StreamingMovies, Contract, \n        PaperlessBilling, PaymentMethod, MonthlyCharges, TotalCharges]\n\n    x = pd.DataFrame([a], columns=X.columns)\n    y = pipe_RF.predict(x)\n\n    return y[0]","7476f170":"options = []\ncarry = []\nfor col in categorical_features:\n    for i in df[col].value_counts().index:\n        carry.append(i)\n    options.append(carry)\n    carry = []\noptions","bf8bd297":"inputs = []\nfor opt in options:\n    inputs.append(gr.inputs.Radio(opt))\n\nfor i in numerical_features:\n    inputs.append(\"number\")","2d8c691b":"gr.Interface(fn=predict, inputs=inputs, outputs='text').launch(share=True);","035e1437":"#### Removendo linhas com valores nulos de _'TotalCharges'_","25255582":"### Op\u00e7\u00f5es da interface","19c8f783":"### Predi\u00e7\u00e3o e valida\u00e7\u00e3o com banco de trainamento","0df83eba":"### Pr\u00e9-processamento","010319ec":"# Predi\u00e7\u00e3o de _churn_ - _Telecom_\n\n* Modelo de predi\u00e7\u00e3o de cancelamento de contrato de clientes;\n* Desenvolvido a partir do projeto de an\u00e1lise de dados [Taxa _Churn_ - _Telecom_](https:\/\/github.com\/mannalab\/Data-Science\/blob\/main\/An%C3%A1lise%20de%20dados\/Taxa_Churn_Telecom.ipynb), do Manna;\n\n---\n\n[Open In Colab](https:\/\/colab.research.google.com\/drive\/1XECcYqpeGXbIhw9eueI-UEoGokYalXCQ?usp=sharing)\n\n[Open in Kaggle](https:\/\/www.kaggle.com\/leonichel\/predict-churn-telecom)","0bd8aeec":"#### Remover _'customerID'_","739fdd25":"## Desenvolvendo interface","f0a34b35":"### Interface","7f618111":"Predi\u00e7\u00e3o e valida\u00e7\u00e3o com banco de teste","2a75f367":"## Modelo de aprendizagem","c7667470":"### Fun\u00e7\u00e3o preditiva","df26af3d":"### Leitura do banco de dados","23e2114f":"### Bibliotecas","6e23103c":"#### Alterar valores bin\u00e1rios de _'SeniorCitizen'_ para 'Yes' e 'No'","f0765161":"### Resultado\n\n* O modelo tem baixo _recall_ para a resposta _'Yes'_, ocasionado, possivelmente, pelo banco de dados ser debalanceado (70% dos valores de sa\u00edda s\u00e3o _'No'_); Para arrumar, recomenda-se balancear o banco de dados, com t\u00e9cnicas de _undersampling_ ou _oversampling_;\n* O modelo obteve cerca de 77% de precis\u00e3o geral;\n* O modelo n\u00e3o sofreu de _underfitting_ ou _overfitting_;","4eaed0c7":"### Cria\u00e7\u00e3o de _Pipelines_","3751863e":"### Separa\u00e7\u00e3o do banco de dados"}}