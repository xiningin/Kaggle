{"cell_type":{"c22f11fd":"code","dff6bd9d":"code","7dec34c9":"code","8297dee2":"code","8ad7800c":"code","35242a19":"code","72061cf2":"code","461281cc":"markdown","2cb11338":"markdown","13df3ea6":"markdown","b455962d":"markdown","5a312104":"markdown","a629ba65":"markdown"},"source":{"c22f11fd":"# VERSION = \"20200325\"  #@param [\"1.5\" , \"20200325\", \"nightly\"]\n# !curl https:\/\/raw.githubusercontent.com\/pytorch\/xla\/master\/contrib\/scripts\/env-setup.py -o pytorch-xla-env-setup.py\n# !python pytorch-xla-env-setup.py --version $VERSION","dff6bd9d":"! pip install -qU pip pytorch-lightning torch==1.5.1","7dec34c9":"!nvcc --version\nimport torch\ntorch.__version__","8297dee2":"try:\n    from apex import amp\nexcept:\n    !git clone https:\/\/github.com\/NVIDIA\/apex nv_apex\n    !pip install -v --no-cache-dir --global-option=\"--cpp_ext\" --global-option=\"--cuda_ext\" .\/nv_apex\n    from apex import amp","8ad7800c":"import os\n\nimport torch\nfrom torch.nn import functional as F\nfrom torch.utils.data import DataLoader\nfrom torchvision.datasets import MNIST\nfrom torchvision import transforms\n\nimport pytorch_lightning as pl\n\nclass CoolSystem(pl.LightningModule):\n\n    def __init__(self, classes=10):\n        super().__init__()\n        self.save_hyperparameters()\n\n        # not the best model...\n        self.l1 = torch.nn.Linear(28 * 28, self.hparams.classes)\n\n    def forward(self, x):\n        return torch.relu(self.l1(x.view(x.size(0), -1)))\n\n    def training_step(self, batch, batch_idx):\n        x, y = batch\n        y_hat = self(x)\n        loss = F.cross_entropy(y_hat, y)\n        tensorboard_logs = {'train_loss': loss}\n        return {'loss': loss, 'log': tensorboard_logs}\n\n    def configure_optimizers(self):\n        return torch.optim.Adam(self.parameters(), lr=0.001)\n\n    def prepare_data(self):\n        MNIST(os.getcwd(), train=True, download=True, transform=transforms.ToTensor())\n\n    def train_dataloader(self):\n        mnist_train = MNIST(os.getcwd(), train=True, download=False, transform=transforms.ToTensor())\n        loader = DataLoader(mnist_train, batch_size=32, num_workers=4)\n        return loader\n","35242a19":"from pytorch_lightning import Trainer\n\nmodel = CoolSystem()\n\n# most basic trainer, uses good defaults\ntrainer = Trainer(gpus=1, precision=16, progress_bar_refresh_rate=5, max_epochs=10)\ntrainer.fit(model)","72061cf2":"# Start tensorboard.\n%reload_ext tensorboard\n%tensorboard --logdir lightning_logs\/","461281cc":"# NVidia AMP","2cb11338":"## Run training","13df3ea6":"## Define lightning model","b455962d":"## Install PyTorch Lightning\nNext, we install PyTorch Lightning","5a312104":"---\n## Install XLA\nFirst, we have to install the XLA library to support TPUs on PyTorch","a629ba65":"# PyTorch Lightning TPU\/GPU demo\n\nOn Lightning you can train a model using CPUs, TPUs and GPUs without changing ANYTHING about your code.\n\nLet's walk through an example!"}}