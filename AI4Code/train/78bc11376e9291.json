{"cell_type":{"c90813f6":"code","51b7440e":"code","90f25bdd":"code","1f89cd7a":"code","5f6a72b0":"code","ab306afb":"code","0a13def9":"code","98e1c62e":"code","79defaf4":"code","1b5f5c8e":"code","a179c817":"code","9d8e9364":"code","f5a98376":"code","b2ca17f9":"code","0507327f":"code","58246528":"code","4b97d3b9":"code","619a0a7d":"code","8988e1c4":"code","f7714014":"code","971e7359":"code","901b8728":"code","48264b85":"code","68a0e87f":"code","65423ab5":"code","703dc40c":"code","5c3515cf":"code","2e9f346a":"code","b63176d8":"code","3f1c4bdc":"code","2ae1c629":"code","4889763f":"code","bd527ec4":"code","bb1453f5":"code","714cf3af":"code","be5c942f":"code","6937ff26":"code","657c4997":"code","f0681722":"code","82a64844":"code","10b7c16a":"code","4ed8b39e":"code","2ca1bd6f":"code","7eaa300d":"code","b8ae64c4":"code","9e88cbe1":"code","2e3fb24d":"code","7254dccc":"code","a788f8a2":"code","2848bc21":"code","1a242444":"code","a3317227":"code","a0917596":"code","0700c14c":"code","618d2dfa":"code","2b1958b3":"code","91b53fcd":"code","13d692c9":"code","123dae4c":"code","f2973b25":"code","b0eb080d":"code","7048ad8d":"code","bb27bffc":"code","2941212a":"code","33628490":"code","92ca8507":"code","359c629f":"code","c63e5cbc":"code","4d18db60":"code","86dc48d6":"code","ed6080f6":"code","40ecb350":"code","aa21d609":"code","05f03db5":"code","921b0ef2":"code","d38c3aca":"code","6760d3ae":"code","282ecf68":"code","22ba37fa":"code","6520eab6":"code","5e514d9c":"code","01e0abe4":"code","9fc8cd48":"code","92fe1da6":"code","aab5d764":"code","77a95dc7":"code","24eb5fb2":"markdown","d92ff8d3":"markdown","70acd9d2":"markdown","67527e37":"markdown","61c13414":"markdown","4cfa2b33":"markdown","9efeade3":"markdown","4103d30a":"markdown","5ad3fcb6":"markdown","a09d3b56":"markdown","fdeb48a7":"markdown","22fd9914":"markdown","081e0a08":"markdown","4ead03db":"markdown","6be57556":"markdown","79e6bc63":"markdown","4d473ee4":"markdown","6f8c48c1":"markdown","6c6324b0":"markdown","6786f5fc":"markdown","b54c6367":"markdown","455b46fa":"markdown","1d592f1f":"markdown","469c1974":"markdown","a8b6463e":"markdown","4409f645":"markdown","a8f1d03c":"markdown","3f93a365":"markdown","d3a76593":"markdown","ecc9adea":"markdown","863f48e1":"markdown","80eb1e02":"markdown","fd99880d":"markdown","18e1c8a7":"markdown","32659397":"markdown","21e4b387":"markdown","36d736ce":"markdown","3a67c096":"markdown","b323704d":"markdown","10050f4e":"markdown","030f9c2c":"markdown"},"source":{"c90813f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","51b7440e":"import numpy as np\nimport pandas as pd\nimport random\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score as r2\nfrom sklearn.model_selection import KFold, GridSearchCV\n\nfrom catboost import CatBoostRegressor\n\nfrom datetime import datetime\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","90f25bdd":"import warnings\nwarnings.filterwarnings('ignore')","1f89cd7a":"matplotlib.rcParams.update({'font.size': 14})","5f6a72b0":"def evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","ab306afb":"TRAIN_DATASET_PATH = '\/kaggle\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '\/kaggle\/input\/real-estate-price-prediction-moscow\/test.csv'","0a13def9":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntrain_df.tail()","98e1c62e":"test_df = pd.read_csv(TEST_DATASET_PATH)\ntest_df.tail()","79defaf4":"print('\u0421\u0442\u0440\u043e\u043a \u0432 \u0442\u0440\u0435\u0439\u043d\u0435:', train_df.shape[0])\nprint('\u0421\u0442\u0440\u043e\u043a \u0432 \u0442\u0435\u0441\u0442\u0435:', test_df.shape[0])","1b5f5c8e":"train_df.shape[1] - 1 == test_df.shape[1]","a179c817":"train_df.dtypes","9d8e9364":"# \u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c id \u043d\u0435 \u0432\u043b\u0438\u044f\u043b \u043d\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0438, \u0441\u043c\u0435\u043d\u0438\u043c \u0443 \u043d\u0435\u0433\u043e \u0442\u0438\u043f \u0441 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0439.\ntrain_df['Id'] = train_df['Id'].astype(str)","f5a98376":"plt.figure(figsize = (16, 8))\n\ntrain_df['Price'].hist(bins=30)\nplt.ylabel('Count')\nplt.xlabel('Price')\n\nplt.title('Target distribution')\nplt.show()","b2ca17f9":"train_df.describe()","0507327f":"train_df.select_dtypes(include='object').columns.tolist()","58246528":"train_df['Ecology_2'].value_counts()","4b97d3b9":"train_df['Ecology_3'].value_counts()","619a0a7d":"train_df['Shops_2'].value_counts()","8988e1c4":"correlation = train_df.corrwith(train_df['Price']).sort_values(ascending=False)\ncorrelation.drop('Price', inplace=True)\n\nplt.figure(figsize = (16, 8))\nplt.bar(correlation.index, correlation)\nplt.xticks(rotation='90')\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Correlation', fontsize=15)\nplt.title('Feature correlation', fontsize=15)\nplt.show()","f7714014":"train_df.isna().sum()","971e7359":"train_df['LifeSquare_nan'] = train_df['LifeSquare'].isna() * 1\n\ncondition = (train_df['LifeSquare'].isna()) & (~train_df['Square'].isna()) & (~train_df['KitchenSquare'].isna())\n        \ntrain_df.loc[condition, 'LifeSquare'] = train_df.loc[condition, 'Square'] - train_df.loc[condition, 'KitchenSquare'] - 3","901b8728":"train_df['LifeSquare'].isna().sum()","48264b85":"correlation = train_df.corrwith(train_df['Healthcare_1']).sort_values()\ncorrelation.drop(['Healthcare_1','Price',], inplace=True)\n\nplt.figure(figsize = (16, 8))\nplt.bar(correlation.index, correlation)\nplt.xticks(rotation='90')\nplt.xlabel('Features')\nplt.ylabel('Correlation')\nplt.show()","68a0e87f":"train_df['Healthcare_1_nan'] = 0\ntrain_df['Healthcare_1_nan'] = train_df['Healthcare_1'].isna() * 1\n\nHealthcare_1_by_DistrictId = train_df.groupby('DistrictId', as_index=False).agg({'Healthcare_1': 'mean'}).rename(columns={'Healthcare_1': 'Avr_Healthcare_1'})\n\ntrain_df = train_df.merge(Healthcare_1_by_DistrictId, on = 'DistrictId', how = 'left')\ntrain_df['Avr_Healthcare_1'].fillna(train_df['Avr_Healthcare_1'].median(), inplace=True)\ntrain_df.head(10)","65423ab5":"train_df.drop('Healthcare_1', axis=1, inplace=True)","703dc40c":"train_df.isna().sum()","5c3515cf":"# \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 DistrictId \u0438\u0437 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u0438\u043f\ntrain_df['DistrictId'] = train_df['DistrictId'].astype(str)","2e9f346a":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435\ntrain_df[list(train_df.select_dtypes(exclude='object').columns)].hist(figsize=(16, 16))\nplt.show()","b63176d8":"train_df['Rooms'].value_counts()","3f1c4bdc":"train_df['Rooms_outlier'] = 0\ntrain_df.loc[(train_df['Rooms'] == 0) | (train_df['Rooms'] >= 6), 'Rooms_outlier'] = 1\ntrain_df.head()","2ae1c629":"train_df.loc[train_df['Rooms'] == 0, 'Rooms'] = 1\ntrain_df.loc[train_df['Rooms'] >= 6, 'Rooms'] = train_df['Rooms'].median()","4889763f":"train_df['Rooms'].value_counts()","bd527ec4":"train_df['KitchenSquare'].value_counts()","bb1453f5":"train_df['KitchenSquare'].quantile(.975), train_df['KitchenSquare'].quantile(.025)","714cf3af":"condition = (train_df['KitchenSquare'].isna()) | (train_df['KitchenSquare'] > train_df['KitchenSquare'].quantile(.975))\n        \ntrain_df.loc[condition, 'KitchenSquare'] = train_df['KitchenSquare'].median()\ntrain_df.loc[train_df['KitchenSquare'] < 3, 'KitchenSquare'] = 3","be5c942f":"train_df['KitchenSquare'].value_counts()","6937ff26":"train_df['HouseFloor'].sort_values().unique()","657c4997":"train_df['Floor'].sort_values().unique()","f0681722":"(train_df['Floor'] > train_df['HouseFloor']).sum()","82a64844":"train_df['HouseFloor_outlier'] = 0\ntrain_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\ntrain_df.loc[train_df['Floor'] > train_df['HouseFloor'], 'HouseFloor_outlier'] = 1","10b7c16a":"train_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor'] = train_df['HouseFloor'].median()","4ed8b39e":"floor_outliers = train_df.loc[train_df['Floor'] > train_df['HouseFloor']].index\nfloor_outliers","2ca1bd6f":"train_df.loc[floor_outliers, 'Floor'] = train_df.loc[floor_outliers, 'HouseFloor'].apply(lambda x: random.randint(1, x))","7eaa300d":"(train_df['Floor'] > train_df['HouseFloor']).sum()","b8ae64c4":"train_df['HouseYear'].sort_values(ascending=False)","9e88cbe1":"current_year = datetime.now().year\n\ntrain_df['HouseYear_outlier'] = 0\ntrain_df.loc[train_df['HouseYear'] > current_year, 'HouseYear_outlier'] = 1\ntrain_df.loc[train_df['HouseYear'] > current_year, 'HouseYear'] = current_year","2e3fb24d":"plt.figure(figsize = (16, 8))\n\ntrain_df['Square'].hist(bins=100)\nplt.xlabel('Square')\nplt.ylabel('Count')\n\nplt.show()","7254dccc":"train_df['Square'].quantile(.975), train_df['Square'].quantile(.025)","a788f8a2":"# \u0421\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0430\u043c, \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u043e\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0436\u0438\u043b\u043e\u0433\u043e \u043f\u043e\u043c\u0435\u0449\u0435\u043d\u0438\u044f - 14 \u043a\u0432.\u043c. \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e.\nprint(train_df[train_df['Square'] < 14]['Square'].count())\n# \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0440\u0430\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0435\u0439 \u0438 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e.\ncondition = train_df['Square'] > train_df['Square'].quantile(.975)\nprint(train_df[condition]['Square'].count())","2848bc21":"train_df.loc[train_df['Square'] < 14, 'Square'] = 14\ntrain_df.loc[condition, 'Square'] = train_df['Square'].quantile(.975)","1a242444":"print((train_df['KitchenSquare'] > train_df['Square']).sum())\nprint((train_df['LifeSquare'] > train_df['Square']).sum())","a3317227":"train_df['LifeSquare_outlier'] = 0\ntrain_df.loc[(train_df['LifeSquare'] > train_df['Square']), 'LifeSquare_outlier'] = 1\ncondition = ((train_df['LifeSquare_outlier'] == 1) & (~train_df['Square'].isna()) & (~train_df['KitchenSquare'].isna()))\ntrain_df.loc[condition, 'LifeSquare'] = train_df.loc[condition, 'Square'] - train_df.loc[condition, 'KitchenSquare'] - 3","a0917596":"print((train_df['LifeSquare'] > train_df['Square']).sum())","0700c14c":"class DataPreprocessing:\n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"\n        self.medians = None\n        self.kitchen_square_quantile = None\n        self.square_quantile = None\n        \n    def fit(self, X):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"       \n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n        self.medians = X.median()\n        self.kitchen_square_quantile = X['KitchenSquare'].quantile(.975)\n        self.square_quantile = X['Square'].quantile(.975)\n    \n    def transform(self, X):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n        # Rooms\n        X['Rooms_outlier'] = 0\n        X.loc[(X['Rooms'] == 0) | (X['Rooms'] >= 6), 'Rooms_outlier'] = 1\n        \n        X.loc[X['Rooms'] == 0, 'Rooms'] = 1\n        X.loc[X['Rooms'] >= 6, 'Rooms'] = self.medians['Rooms']\n        \n        # KitchenSquare\n        condition = (X['KitchenSquare'].isna()) | (X['KitchenSquare'] > self.kitchen_square_quantile)\n        X.loc[condition, 'KitchenSquare'] = self.medians['KitchenSquare']\n        X.loc[X['KitchenSquare'] < 3, 'KitchenSquare'] = 3\n        \n        # HouseFloor, Floor\n        X['HouseFloor_outlier'] = 0\n        X.loc[X['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\n        X.loc[X['Floor'] > X['HouseFloor'], 'HouseFloor_outlier'] = 1\n        \n        X.loc[X['HouseFloor'] == 0, 'HouseFloor'] = self.medians['HouseFloor']\n        \n        floor_outliers = X.loc[X['Floor'] > X['HouseFloor']].index\n        X.loc[floor_outliers, 'Floor'] = X.loc[floor_outliers, 'HouseFloor'].apply(lambda x: random.randint(1, x))\n        \n        # HouseYear\n        current_year = datetime.now().year\n        \n        X['HouseYear_outlier'] = 0\n        X.loc[X['HouseYear'] > current_year, 'HouseYear_outlier'] = 1\n        \n        X.loc[X['HouseYear'] > current_year, 'HouseYear'] = current_year\n        \n        # Healthcare_1\n        X['Healthcare_1_nan'] = 0\n        X['Healthcare_1_nan'] = X['Healthcare_1'].isna() * 1\n\n        Healthcare_1_by_DistrictId = X.groupby('DistrictId', as_index=False).agg({'Healthcare_1': 'mean'}).rename(columns={'Healthcare_1': 'Avr_Healthcare_1'})\n        \n        X = X.merge(Healthcare_1_by_DistrictId, on = 'DistrictId', how = 'left')\n        X['Avr_Healthcare_1'].fillna(X['Avr_Healthcare_1'].median(), inplace=True)\n        \n        if 'Healthcare_1' in X.columns:\n            X.drop('Healthcare_1', axis=1, inplace=True)\n        \n        # Square\n        condition = X['Square'] > self.square_quantile\n        \n        X.loc[X['Square'] < 14, 'Square'] = 14\n        X.loc[condition, 'Square'] = self.square_quantile\n        \n        # LifeSquare\n        X['LifeSquare_nan'] = X['LifeSquare'].isna() * 1\n        condition = (X['LifeSquare'].isna()) & (~X['Square'].isna()) & (~X['KitchenSquare'].isna())\n        \n        X.loc[condition, 'LifeSquare'] = X.loc[condition, 'Square'] - X.loc[condition, 'KitchenSquare'] - 3\n        \n        X['LifeSquare_outlier'] = 0\n        X.loc[(X['LifeSquare'] > X['Square']), 'LifeSquare_outlier'] = 1\n        condition = ((X['LifeSquare_outlier'] == 1) & (~X['Square'].isna()) & (~X['KitchenSquare'].isna()))\n  \n        X.loc[condition, 'LifeSquare'] = X.loc[condition, 'Square'] - X.loc[condition, 'KitchenSquare'] - 3\n        \n        \n        X.fillna(self.medians, inplace=True)\n        \n        return X","618d2dfa":"binary_to_numbers = {'A': 0, 'B': 1}\n\ntrain_df['Ecology_2'] = train_df['Ecology_2'].replace(binary_to_numbers)\ntrain_df['Ecology_3'] = train_df['Ecology_3'].replace(binary_to_numbers)\ntrain_df['Shops_2'] = train_df['Shops_2'].replace(binary_to_numbers)","2b1958b3":"district_size = train_df['DistrictId'].value_counts().reset_index().rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\ndistrict_size.head()","91b53fcd":"train_df = train_df.merge(district_size, on='DistrictId', how='left')\ntrain_df.head()","13d692c9":"(train_df['DistrictSize'] > 100).value_counts()","123dae4c":"train_df['IsDistrictLarge'] = (train_df['DistrictSize'] > 100).astype(int)","f2973b25":"med_price_by_district = train_df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'}).rename(columns={'Price':'MedPriceByDistrict'})\nmed_price_by_district.head()","b0eb080d":"med_price_by_district.shape","7048ad8d":"train_df = train_df.merge(med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\ntrain_df.head()","bb27bffc":"def floor_to_cat(X):\n    bins = [X['Floor'].min(), 3, 5, 9, 15, X['Floor'].max()]\n    X['floor_cat'] = pd.cut(X['Floor'], bins=bins, labels=False)\n    \n    X['floor_cat'].fillna(-1, inplace=True)\n    return X\n\ndef year_to_cat(X):\n    bins = [X['HouseYear'].min(), 1941, 1945, 1980, 2000, 2010, X['HouseYear'].max()]\n    X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n    \n    X['year_cat'].fillna(-1, inplace=True)\n    return X","2941212a":"train_df = year_to_cat(train_df)\ntrain_df = floor_to_cat(train_df)\ntrain_df.head()","33628490":"med_price_by_floor_year = train_df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).rename(columns={'Price':'MedPriceByFloorYear'})\nmed_price_by_floor_year.head()","92ca8507":"train_df = train_df.merge(med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\ntrain_df.head()","359c629f":"class FeatureGenetator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\"\"\"\n    \n    def __init__(self):\n        self.DistrictId_counts = None\n        self.binary_to_numbers = None\n        self.med_price_by_district = None\n        self.med_price_by_floor_year = None\n        self.house_year_max = None\n        self.floor_max = None\n        self.house_year_min = None\n        self.floor_min = None\n        self.district_size = None\n        \n        \n    def fit(self, X, y=None):\n        \n        X = X.copy()\n        \n        # Binary features\n        self.binary_to_numbers = {'A': 0, 'B': 1}\n        \n        # DistrictID\n        self.district_size = X['DistrictId'].value_counts().reset_index().rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n                \n        # Target encoding\n        ## District, Rooms\n        df = X.copy()\n        \n        if y is not None:\n            df['Price'] = y.values\n            self.med_price_by_district = df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'}).rename(columns={'Price':'MedPriceByDistrict'})\n            self.med_price_by_district_median = self.med_price_by_district['MedPriceByDistrict'].median()\n            \n        ## floor, year\n        if y is not None:\n            self.floor_max = df['Floor'].max()\n            self.floor_min = df['Floor'].min()\n            self.house_year_max = df['HouseYear'].max()\n            self.house_year_min = df['HouseYear'].min()\n            df['Price'] = y.values\n            df = self.floor_to_cat(df)\n            df = self.year_to_cat(df)\n            self.med_price_by_floor_year = df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).rename(columns={'Price':'MedPriceByFloorYear'})\n            self.med_price_by_floor_year_median = self.med_price_by_floor_year['MedPriceByFloorYear'].median()\n        \n\n        \n    def transform(self, X):\n        \n        X['Avr_Healthcare_1'].fillna(X['Avr_Healthcare_1'].median(), inplace=True)\n        \n        # Binary features\n        X['Ecology_2'] = X['Ecology_2'].map(self.binary_to_numbers) \n        X['Ecology_3'] = X['Ecology_3'].map(self.binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].map(self.binary_to_numbers)\n        \n        # DistrictId, IsDistrictLarge\n        X = X.merge(self.district_size, on='DistrictId', how='left')\n        \n        X['new_district'] = 0\n        X.loc[X['DistrictSize'].isna(), 'new_district'] = 1\n        \n        X['DistrictSize'].fillna(-1, inplace=True)\n        \n        X['IsDistrictLarge'] = (X['DistrictSize'] > 100).astype(int)\n        \n        # More categorical features\n        X = self.floor_to_cat(X)  \n        X = self.year_to_cat(X)  \n        \n        # Target encoding\n        if self.med_price_by_district is not None:\n            X = X.merge(self.med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\n            X['MedPriceByDistrict'].fillna(self.med_price_by_district_median, inplace=True)\n            \n        if self.med_price_by_floor_year is not None:\n            X = X.merge(self.med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\n            X['MedPriceByFloorYear'].fillna(self.med_price_by_floor_year_median, inplace=True)\n        \n        return X\n    \n    def floor_to_cat(self, X):\n        bins = [self.floor_min, 3, 5, 9, 15, self.floor_max]\n        X['floor_cat'] = pd.cut(X['Floor'], bins=bins, labels=False)\n\n        X['floor_cat'].fillna(-1, inplace=True)\n        return X\n     \n    def year_to_cat(self, X):\n        bins = [self.house_year_min, 1941, 1945, 1980, 2000, 2010, self.house_year_max]\n        X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n\n        X['year_cat'].fillna(-1, inplace=True)\n        return X","c63e5cbc":"train_df.columns.tolist()","4d18db60":"feature_names = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'HouseFloor', 'HouseYear',\n                 'Ecology_1', 'Ecology_2', 'Ecology_3', 'Social_1', 'Social_2', 'Social_3',\n                 'Helthcare_2', 'Shops_1', 'Shops_2']\n\nnew_feature_names = ['Rooms_outlier', 'HouseFloor_outlier', 'HouseYear_outlier', 'LifeSquare_nan', 'LifeSquare_outlier', 'DistrictSize',\n                     'IsDistrictLarge', 'Healthcare_1_nan', 'Avr_Healthcare_1', 'MedPriceByDistrict', 'MedPriceByFloorYear']\n\ntarget_name = 'Price'","86dc48d6":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntest_df = pd.read_csv(TEST_DATASET_PATH)\n\nX = train_df.drop(columns=target_name)\ny = train_df[target_name]","ed6080f6":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=21)","40ecb350":"preprocessor = DataPreprocessing()\npreprocessor.fit(X_train)\n\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ntest_df = preprocessor.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","aa21d609":"features_gen = FeatureGenetator()\nfeatures_gen.fit(X_train, y_train)\n\nX_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ntest_df = features_gen.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","05f03db5":"X_train = X_train[feature_names + new_feature_names]\nX_valid = X_valid[feature_names + new_feature_names]\ntest_df = test_df[feature_names + new_feature_names]","921b0ef2":"X_train.isna().sum().sum(), X_valid.isna().sum().sum(), test_df.isna().sum().sum()","d38c3aca":"catboost_model = CatBoostRegressor(iterations=1000, verbose=False, learning_rate=0.04, depth=7, eval_metric='R2', random_seed=42)\ncatboost_model.fit(X_train, y_train)","6760d3ae":"y_train_preds = catboost_model.predict(X_train)\ny_test_preds = catboost_model.predict(X_valid)\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","282ecf68":"cv_score = cross_val_score(catboost_model, X_train, y_train, scoring='r2', cv=KFold(n_splits=3, shuffle=True, random_state=21))\ncv_score","22ba37fa":"feature_importances = pd.DataFrame(zip(X_train.columns, catboost_model.feature_importances_), columns=['feature_name', 'importance'])\n\nfeature_importances.sort_values(by='importance', ascending=False)","6520eab6":"test_df.shape","5e514d9c":"test_df","01e0abe4":"submit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\nsubmit.head()","9fc8cd48":"predictions = catboost_model.predict(test_df)\npredictions","92fe1da6":"submit['Price'] = predictions\nsubmit.head()","aab5d764":"submit.shape","77a95dc7":"submit.to_csv('\/kaggle\/working\/submission.csv', index=False)","24eb5fb2":"### 4. \u0417\u0430\u043f\u0438\u0448\u0435\u043c \u0432\u0441\u0435 \u0432 \u043a\u043b\u0430\u0441\u0441\n","d92ff8d3":"## 1. EDA","70acd9d2":"**\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f**","67527e37":"## 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438","61c13414":"### 5. \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","4cfa2b33":"### 5. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","9efeade3":"**Rooms**","4103d30a":"\u0423\u0431\u0435\u0434\u0438\u043c\u0441\u044f, \u0447\u0442\u043e \u043d\u0430 \u0442\u0435\u0441\u0442\u0435 \u043d\u0430 1 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u043d\u0430 \u0442\u0440\u0435\u0439\u043d\u0435:","5ad3fcb6":"**\u041a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f**","a09d3b56":"## 3. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432","fdeb48a7":"**\u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438 \u043a\u043b\u0430\u0441\u0441\u044b**","22fd9914":"**\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435**","081e0a08":"**Square, LifeSquare**","4ead03db":"### 7. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 CatBoostRegressor","6be57556":"**\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0448\u0440\u0438\u0444\u0442**","79e6bc63":"**\u041e\u0446\u0435\u043d\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438**","4d473ee4":"**Healthcare_1**\n\n\u0423 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043e \u043f\u043e\u0447\u0442\u0438 50% \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u044d\u0442\u043e\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c.","6f8c48c1":"**MedPriceByFloorYear**","6c6324b0":"**\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f**","6786f5fc":"**HouseYear**","b54c6367":"**\u041d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435**","455b46fa":"### 6. \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test","1d592f1f":"**DistrictSize, IsDistrictLarge**","469c1974":"### \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432","a8b6463e":"\u041d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c DistrictId.","4409f645":"### \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\n\n* **Id** - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n* **DistrictId** - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* **Rooms** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n* **Square** - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* **LifeSquare** - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* **KitchenSquare** - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n* **Floor** - \u044d\u0442\u0430\u0436\n* **HouseFloor** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n* **HouseYear** - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n* **Ecology_1, Ecology_2, Ecology_3** - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* **Social_1, Social_2, Social_3** - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* **Healthcare_1, Helthcare_2** - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n* **Shops_1, Shops_2** - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n* **Price** - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","a8f1d03c":"### 8. \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435","3f93a365":"**\u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","d3a76593":"**Dummies**","ecc9adea":"**LifeSquare**","863f48e1":"**\u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443**","80eb1e02":"**KitchenSquare**","fd99880d":"**\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435**","18e1c8a7":"\u0412\u044b\u0432\u043e\u0434\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a \u043d\u0430 \u0442\u0435\u0441\u0442\u0435 \u0438 \u043d\u0430 \u0442\u0440\u0435\u0439\u043d\u0435:","32659397":"**MedPriceByDistrict**","21e4b387":"**\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f** <br>\n(\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 \u0446\u0435\u043d\u0443.)","36d736ce":"**HouseFloor, Floor**","3a67c096":"**\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439**","b323704d":"**\u041f\u0443\u0442\u0438 \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f\u043c \u0438 \u0444\u0430\u0439\u043b\u0430\u043c**","10050f4e":"**\u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443**","030f9c2c":"\u0418\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0430 \u0446\u0435\u043d\u0443 \u0432\u043b\u0438\u044f\u044e\u0442 2 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f: Rooms (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442) \u0438 Square (\u043f\u043b\u043e\u0449\u0430\u0434\u044c)."}}