{"cell_type":{"c611a5f7":"code","03994f9a":"code","6360353d":"code","b19a3b8e":"code","f0c57f07":"code","e9029dd1":"code","33c324a4":"code","86f67b0c":"code","125e98b0":"code","7f8aab8f":"code","d0ac426d":"code","f7c3fee9":"code","8ce7a49e":"code","d72d56bb":"code","df93c0c1":"code","4233f141":"code","9d3b2661":"code","1b3e9ad6":"code","f129445e":"code","00f5848a":"code","e7aa0ed8":"code","6d1f995c":"code","666b0ce2":"code","a55d9fd9":"code","cc3032b0":"code","8694d2a3":"code","c274db4c":"code","693693fd":"code","481c1b03":"code","2c7bb8cf":"code","e9ec86ae":"code","441ad6b3":"code","f625530b":"code","a59d1d62":"code","e2506f1a":"code","48ec910f":"code","fa5c72ee":"code","a358f2bc":"code","fc084456":"code","b89ab7f8":"code","b112bd09":"code","442cf6c1":"code","5ea30425":"code","1b5315ba":"code","8a9c7c28":"code","7db95da0":"code","8b7f4c0f":"code","9fd4466e":"code","43c24771":"code","6b9bb43f":"code","aed5ec81":"code","5cc1ee91":"code","04ee72d3":"code","529252a7":"code","ee9762e1":"code","03d6e0d4":"code","33ca1c8a":"code","bbc987e8":"code","97aa2a39":"code","ff3fc8bf":"code","4e1c6404":"code","e500f6d7":"code","3fda7353":"code","d803d4ad":"code","93e60194":"code","9b818a02":"code","55b7005e":"code","85499210":"code","ae6a9576":"code","45e22eac":"code","7cc3dbb2":"code","fce2f383":"code","4935aae8":"code","d5cf59e4":"code","8c706ee4":"code","ed38ebc2":"code","189108c1":"code","f224d570":"code","d5561fe0":"code","7bf8cc1f":"code","a68d51a2":"code","d80ece8e":"code","86a7783b":"code","f74f2068":"code","279ef2b9":"code","bd60da05":"code","0e4ad43e":"code","62e42011":"code","dcc54fa9":"code","39b4ac71":"code","21337ce8":"code","7f3b8540":"code","35900e20":"code","03510be0":"code","ce71c201":"code","8dc46cdc":"code","3f09da75":"code","0178fa04":"code","0bc11952":"code","8f47e435":"code","c49e8564":"markdown","9a8458d6":"markdown","26db1e99":"markdown","d710ac1d":"markdown","5893ebdd":"markdown","255c06fd":"markdown","671fb781":"markdown","eaafa092":"markdown","3a3d5474":"markdown","f9ec2fc8":"markdown","e3628d68":"markdown","712b2aa5":"markdown","e44142f6":"markdown","9dbf0c14":"markdown","16438861":"markdown","b885f2a9":"markdown","b5d02400":"markdown","24fea8f5":"markdown","a90ef5d0":"markdown","497e4d69":"markdown","3242daf0":"markdown","af0e64f0":"markdown"},"source":{"c611a5f7":"import numpy as np # \uc218\uce58 \uc5f0\uc0b0\uc744 \uc704\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport pandas as pd # \ub370\uc774\ud130\ud504\ub808\uc784 \uc0dd\uc131\uc744 \uc704\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\n\n# \ub370\uc774\ud130 \uc2dc\uac01\ud654\uc5d0 \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn') # \uadf8\ub798\ud504 \uc2a4\ud0c0\uc77c(\uc11c\uc2dd) \uc124\uc815\nsns.set(font_scale = 2.5) # font \ud06c\uae30 \uc124\uc815\n\nimport missingno as msno # null \ub370\uc774\ud130\ub97c \uc27d\uac8c \ubcf4\uc5ec\uc8fc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\n\n# warning \ubb34\uc2dc\ud558\uae30\nimport warnings\nwarnings.filterwarnings('ignore') \n\n%matplotlib inline ","03994f9a":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","6360353d":"df_train.head() ","b19a3b8e":"df_train.shape","f0c57f07":"df_train.info()","e9029dd1":"df_train.describe()","33c324a4":"df_test.describe()","86f67b0c":"df_train.isnull().sum()","125e98b0":"for col in df_train.columns:\n    msg = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_train[col].isnull().sum()\/ df_train[col].shape[0]))\n    print(msg) # :>10 \ub294 10\uce78\uc744 \ub9cc\ub4e4\uace0 \uc624\ub978\ucabd\uc73c\ub85c \uc815\ub82c","7f8aab8f":"df_test.isnull().sum()","d0ac426d":"for col in df_test.columns:\n    msg = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_test[col].isnull().sum()\/ df_test[col].shape[0]))\n    print(msg)","f7c3fee9":"msno.matrix(df=df_train.iloc[:, :], figsize=(8, 8), color=(0.8, 0.5, 0.2)) # null data\uc758 \uc704\uce58\ub97c \ud655\uc778\ud558\uae30\uc5d0 \uc6a9\uc774","8ce7a49e":"msno.bar(df=df_train.iloc[:, :], figsize=(8, 8), color=(0.8, 0.5, 0.2)) # Null data\uc758 \uc591\uc744 \ud655\uc778\ud558\uae30\uc5d0 \uc720\ub9ac\nplt.show()","d72d56bb":"f, ax = plt.subplots(1, 2, figsize=(18, 8)) # 1\ud589 2\uc5f4, f = figure(\uc804\uccb4 plot), ax = axes(\ubd80\ubd84 plot)\n                     \ndf_train['Survived'].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.1f%%', ax=ax[0], shadow = True)\nax[0].set_title('Pie plot - Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived', data=df_train, ax=ax[1]) # Seaborn countplot() : \uce74\ud14c\uace0\ub9ac \ubcc4\ub85c \ub370\uc774\ud130\uac00 \uc5bc\ub9c8\ub098 \uc788\ub294\uc9c0 \ud45c\uc2dc\nax[1].set_title('Count plot - Survived')\nplt.show() ","df93c0c1":"df_train['Survived'].value_counts().plot() # == plt.plot(df_train['Survived'].value_counts())\nplt.show()","4233f141":"df_train['Survived'].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.1f%%', shadow=True) #explode\ub294 \ucabc\uac1c\ub294 \uac83, autopct\ub294 \ud655\ub960, shadow\ub294 \uadf8\ub9bc\uc790\nplt.show()","9d3b2661":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).count() # Pclass\ubcc4 \uc0dd\uc874\uc790 \uc22b\uc790","1b3e9ad6":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean() # Pclass\ubcc4 \uc0dd\uc874 \ube44\uc728","f129445e":"pd.crosstab(df_train['Pclass'], df_train['Survived'], margins=True).style.background_gradient(cmap='cool') ","00f5848a":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot()\nplt.show()","e7aa0ed8":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar()\nplt.show()","6d1f995c":"y_position = 1.03\nf, ax = plt.subplots(1, 2, figsize=(18, 8)) \ndf_train['Pclass'].value_counts().plot.bar(color=['#CD7F32', '#FFDF00', '#D3D3D3'], ax=ax[0]) \nax[0].set_title('Number of passengers By Pclass', y=y_position) \nax[0].set_ylabel('Count') \nsns.countplot('Pclass', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Pclass: Survived vs Dead', y=y_position) \nplt.show()","666b0ce2":"df_train[['Sex', 'Survived']].groupby(['Sex'], as_index=True).count() # Sex\ubcc4 \uc0dd\uc874\uc790 \uc22b\uc790","a55d9fd9":"df_train[['Sex', 'Survived']].groupby(['Sex'], as_index=True).mean() # Sex\ubcc4 \uc0dd\uc874 \ube44\uc728","cc3032b0":"f, ax = plt.subplots(1, 2, figsize=(18, 8))\ndf_train[['Sex', 'Survived']].groupby(['Sex'], as_index=True).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\nsns.countplot('Sex',hue='Survived', data=df_train, ax=ax[1]) \nax[1].set_title('Sex: Survived vs Dead')\nplt.show()","8694d2a3":"df_train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean()","c274db4c":"pd.crosstab(df_train['Sex'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')","693693fd":"# seaborn factorplot\nsns.factorplot('Pclass', 'Survived', hue='Sex', data=df_train, size=6, aspect=1.5) # size\uc640 aspect\ub294 \uc0ac\uc774\uc988 \uc870\uc808\uae30\ub2a5\nplt.show()","481c1b03":"sns.factorplot(x='Sex', y='Survived', hue='Pclass', data=df_train, size=9, aspect=1)\nplt.show()","2c7bb8cf":"print(\"\uc81c\uc77c \ub098\uc774\uac00 \ub9ce\uc740 \ud0d1\uc2b9\uac1d : {:.1f} years\".format(df_train['Age'].max()))\nprint(\"\uc81c\uc77c \ub098\uc774\uac00 \uc5b4\ub9b0 \ud0d1\uc2b9\uac1d : {:.1f} years\".format(df_train['Age'].min()))\nprint(\"\ud0d1\uc2b9\uac1d \ud3c9\uade0 \ub098\uc774 : {:.1f} years\".format(df_train['Age'].mean()))","e9ec86ae":"# \uc0dd\uc874\uc5d0 \uc5ec\ubd80 \ub530\ub978 \ub098\uc774 \ud655\ub960 \ubd84\ud3ec\ud45c\nfig, ax = plt.subplots(1, 1, figsize=(9, 5))\nsns.kdeplot(df_train[df_train[\"Survived\"] == 1][\"Age\"], ax = ax)\nsns.kdeplot(df_train[df_train[\"Survived\"] == 0][\"Age\"], ax = ax)\nplt.legend([\"Survived == 1\", \"Survived == 0\"])\nplt.show()            ","441ad6b3":"fig, ax = plt.subplots(1, 3, figsize = (24, 5))\n# Pclass == 1\nsns.kdeplot(df_train[(df_train[\"Survived\"] == 0) & (df_train[\"Pclass\"] == 1)][\"Age\"], ax = ax[0])\nsns.kdeplot(df_train[(df_train[\"Survived\"] == 1) & (df_train[\"Pclass\"] == 1)][\"Age\"], ax = ax[0])\nax[0].legend([\"Survived == 0\", \"Survived == 1\"], prop={'size': 15})\nax[0].set_title(\"1st class\")\n\n# Pclass == 2\nsns.kdeplot(df_train[(df_train[\"Survived\"] == 0) & (df_train[\"Pclass\"] == 2)][\"Age\"], ax = ax[1])\nsns.kdeplot(df_train[(df_train[\"Survived\"] == 1) & (df_train[\"Pclass\"] == 2)][\"Age\"], ax = ax[1])\nax[1].legend([\"Survived == 0\", \"Survived == 1\"], prop={'size': 15})\nax[1].set_title(\"2nd class\")\n\n# Pclass == 3\nsns.kdeplot(df_train[(df_train[\"Survived\"] == 0) & (df_train[\"Pclass\"] == 3)][\"Age\"], ax = ax[2])\nsns.kdeplot(df_train[(df_train[\"Survived\"] == 1) & (df_train[\"Pclass\"] == 3)][\"Age\"], ax = ax[2])\nax[2].legend([\"Survived == 0\", \"Survived == 1\"], prop={'size': 15})\nax[2].set_title(\"3rd class\")\n\nplt.show()","f625530b":"# \uc5f0\ub839\uc5d0 \ub530\ub978 \uc0dd\uc874 \ud655\ub960\nage_range_survival_ratio = []\n\nfor i in range(1, 81):\n    age_range_survival_ratio.append(df_train[df_train[\"Age\"] < i][\"Survived\"].sum() \/ len(df_train[df_train[\"Age\"] < i][\"Survived\"]))\n\nplt.figure(figsize = (15, 7))\nplt.plot(age_range_survival_ratio)\nplt.title(\"Survival rate change depending on range of Age\", y = 1.02)\nplt.xlabel(\"Range of Age (0 ~ x)\")\nplt.ylabel(\"Survival rate\")\nplt.show()","a59d1d62":"# \uc5f0\ub839\uad6c\uac04 \ubcc4 \uc0dd\uc874 \ud655\ub960\nage_range_survival_ratio = []\n\nfor i in range(10, 70, 10):\n    age_range_survival_ratio.append(df_train[(df_train[\"Age\"] >= i) & (df_train[\"Age\"] < i + 10)][\"Survived\"].sum() \/ len(df_train[(df_train[\"Age\"] >= i) & (df_train[\"Age\"] < i + 10)][\"Survived\"]))\n    \nprint(age_range_survival_ratio)\nplt.figure(figsize = (15, 7))\nplt.plot(age_range_survival_ratio)\nplt.title(\"Survival rate change depending on range of Age\", y = 1.02)\nplt.xlabel(\"Range of Age (0 ~ x)\")\nplt.ylabel(\"Survival rate\")\nplt.show()","e2506f1a":"# seaborn violinplot\nf, ax = plt.subplots(1, 2, figsize = (20, 10))\nsns.violinplot(\"Pclass\", \"Age\", hue = \"Survived\", data = df_train, scale = \"count\", split = True, ax = ax[0])\nax[0].set_title(\"Pclass and Age vs Survived\", y = 1.02)\nax[0].set_yticks(range(0, 110, 20))\n\nsns.violinplot(\"Sex\", \"Age\", hue = \"Survived\", data = df_train, scale = \"count\", split = True, ax = ax[1])\nax[1].set_title(\"Sex and Age vs Survived\", y = 1.02)\nax[1].set_yticks(range(0, 110, 20))\nplt.show()","48ec910f":"df_train[[\"Embarked\", \"Survived\"]].groupby([\"Embarked\"], as_index = True).mean().sort_values(by = \"Survived\", ascending = False).plot.bar()\nplt.show()","fa5c72ee":"f, ax = plt.subplots(2, 2, figsize = (20, 15))\nsns.countplot(\"Embarked\", data = df_train, ax=ax[0, 0])\nax[0, 0].set_title(\"(1) No. of Passengers Boarded\")\n\nsns.countplot(\"Embarked\", hue = \"Sex\", data = df_train, ax = ax[0, 1])\nax[0, 1].set_title(\"(2) Male Female split for Embarked\")\n\nsns.countplot(\"Embarked\", hue = \"Survived\", data = df_train, ax = ax[1, 0])\nax[1, 0].set_title(\"(3) Embarked vs Survived\")\n\nsns.countplot(\"Embarked\", hue = \"Pclass\", data = df_train, ax = ax[1, 1])\nax[1, 1].set_title(\"(4) Embarked vs Pclass\")\n\nplt.subplots_adjust(wspace= 0.3, hspace = 0.4)\nplt.show()","a358f2bc":"df_train[\"FamilySize\"] = df_train[\"SibSp\"] + df_train[\"Parch\"] + 1  # \ubcf8\uc778\ub3c4 \ud3ec\ud568(+1)\ndf_train","fc084456":"df_test[\"FamilySize\"] = df_test[\"SibSp\"] + df_test[\"Parch\"] + 1  # \ubcf8\uc778\ub3c4 \ud3ec\ud568(+1)\ndf_test","b89ab7f8":"print(\"Maximum size of Family :\", df_train[\"FamilySize\"].max())\nprint(\"Minimum size of Family :\", df_train[\"FamilySize\"].min())","b112bd09":"f, ax = plt.subplots(1, 3, figsize = (40, 10))\nsns.countplot(\"FamilySize\", data = df_train, ax = ax[0])\nax[0].set_title(\"(1) No. of Passenger Boarded\", y = 1.02)\n\nsns.countplot(\"FamilySize\", hue = \"Survived\", data = df_train, ax = ax[1])\nax[1].set_title(\"(2) Familysize vs Survived\", y = 1.02)\n\ndf_train[[\"FamilySize\", \"Survived\"]].groupby([\"FamilySize\"], as_index = True).mean().sort_values(by = \"Survived\", ascending = False).plot.bar(ax = ax[2])\nax[2].set_title(\"(3) Survived ratio depending on Familysize\", y = 1.02)\n\nplt.show()","442cf6c1":"print(\"Maximum of Fare : {}\".format(df_train[\"Fare\"].max()))\nprint(\"Minimum of Fare : {}\".format(df_train[\"Fare\"].min()))\nprint(\"Mean of Fare : {}\".format(df_train[\"Fare\"].mean()))","5ea30425":"f, ax = plt.subplots(1, 1, figsize=(12, 8))\nsns.kdeplot(df_train[df_train[\"Survived\"] == 1][\"Fare\"], ax = ax, c = 'blue')\nsns.kdeplot(df_train[df_train[\"Survived\"] == 0][\"Fare\"], ax = ax, c = 'red')\nplt.legend([\"Survived == 1\", \"Survived == 0\"])\nplt.show()     ","1b5315ba":"f, ax = plt.subplots(1, 1, figsize=(12, 8))\nsns.distplot(df_train[\"Fare\"], label = \"Skewness: {:.2f}\".format(df_train[\"Fare\"].skew()), ax = ax)\nplt.legend(loc = \"best\")\nplt.show()","8a9c7c28":"# \ube44\ub300\uce6d\ub3c4(Skewness)\ub97c \uc904\uc774\uae30 \uc704\ud574 log\ub97c \ucde8\ud558\uc5ec \uc815\uaddc\ubd84\ud3ec\uc5d0 \uac00\uae4c\uc6cc\uc9c0\uac8c \ud568\ndf_train[\"Fare\"] = df_train[\"Fare\"].map(lambda i : np.log(i) if i > 0 else 0)","7db95da0":"f, ax = plt.subplots(1, 1, figsize=(12, 8))\nsns.distplot(df_train[\"Fare\"], label = \"Skewness: {:.2f}\".format(df_train[\"Fare\"].skew()), ax = ax)\nplt.legend(loc = \"best\")\nplt.show()","8b7f4c0f":"df_train[\"Age\"].isnull().sum()","9fd4466e":"df_train[\"Name\"]","43c24771":"df_train[\"Initial\"] = df_train[\"Name\"].str.extract(\"([a-zA-Z]+)\\.\")\ndf_test[\"Initial\"] = df_test[\"Name\"].str.extract(\"([a-zA-Z]+)\\.\")","6b9bb43f":"df_train","aed5ec81":"pd.crosstab(df_train[\"Initial\"], df_train[\"Sex\"]).T.style.background_gradient(cmap = 'binary')","5cc1ee91":"# \uc774\ub2c8\uc15c \uadf8\ub8f9\ud654\ud558\uae30\ndf_train[\"Initial\"].replace([\"Mlle\", \"Mme\",  \"Ms\",\"Dr\",\"Major\", \"Lady\", \"Countess\", \"Jonkheer\", \"Col\",  \"Rev\", \"Capt\", \"Sir\", \"Don\", \"Dona\"],\n                            [\"Miss\",\"Miss\",\"Miss\",\"Mr\",   \"Mr\",  \"Mrs\",      \"Mrs\",    \"Other\",\"Other\",\"Other\", \"Mr\",    \"Mr\", \"Mr\",    \"Mr\"], \n                            inplace = True)\ndf_test[\"Initial\"].replace([\"Mlle\", \"Mme\",  \"Ms\",\"Dr\",\"Major\", \"Lady\", \"Countess\", \"Jonkheer\", \"Col\",  \"Rev\", \"Capt\", \"Sir\", \"Don\", \"Dona\"],\n                            [\"Miss\",\"Miss\",\"Miss\",\"Mr\",   \"Mr\",  \"Mrs\",      \"Mrs\",    \"Other\",\"Other\",\"Other\", \"Mr\",    \"Mr\", \"Mr\",    \"Mr\"], \n                            inplace = True)","04ee72d3":"df_train.groupby(\"Initial\").mean()","529252a7":"df_train.groupby(\"Initial\")[\"Survived\"].mean().plot.bar()\nplt.show()","ee9762e1":"df_all = pd.concat([df_train, df_test])\ndf_all","03d6e0d4":"df_train.groupby(\"Initial\").mean()","33ca1c8a":"df_train.loc[(df_train[\"Age\"].isnull()) & (df_train[\"Initial\"] == \"Master\"), 'Age'] = 5\ndf_train.loc[(df_train[\"Age\"].isnull()) & (df_train[\"Initial\"] == \"Miss\"), 'Age'] = 22\ndf_train.loc[(df_train[\"Age\"].isnull()) & (df_train[\"Initial\"] == \"Mr\"), 'Age'] = 33\ndf_train.loc[(df_train[\"Age\"].isnull()) & (df_train[\"Initial\"] == \"Mrs\"), 'Age'] = 36\ndf_train.loc[(df_train[\"Age\"].isnull()) & (df_train[\"Initial\"] == \"Other\"), 'Age'] = 46","bbc987e8":"df_train[\"Age\"].isnull().sum()","97aa2a39":"df_test.loc[(df_test[\"Age\"].isnull()) & (df_test[\"Initial\"] == \"Master\"), 'Age'] = 5\ndf_test.loc[(df_test[\"Age\"].isnull()) & (df_test[\"Initial\"] == \"Miss\"), 'Age'] = 22\ndf_test.loc[(df_test[\"Age\"].isnull()) & (df_test[\"Initial\"] == \"Mr\"), 'Age'] = 33\ndf_test.loc[(df_test[\"Age\"].isnull()) & (df_test[\"Initial\"] == \"Mrs\"), 'Age'] = 36\ndf_test.loc[(df_test[\"Age\"].isnull()) & (df_test[\"Initial\"] == \"Other\"), 'Age'] = 46","ff3fc8bf":"df_test[\"Age\"].isnull().sum()","4e1c6404":"(df_train[\"Survived\"] == 1) & (df_train[\"Initial\"] == \"Mr\")","e500f6d7":"df_train[\"Embarked\"].isnull().sum()","3fda7353":"df_train[\"Embarked\"].unique()","d803d4ad":"df_train.groupby(\"Embarked\")[\"Embarked\"].count()","93e60194":"# \uac00\uc7a5 \ub9ce\uc740 \uac12\uc778 'S'\ub85c \uacb0\uce21\uce58 \ucc44\uc6b0\uae30\ndf_train[\"Embarked\"].fillna(\"S\", inplace = True)","9b818a02":"df_train[\"Embarked\"].isnull().sum()","55b7005e":"# \uce74\ud14c\uace0\ub9ac \ud568\uc218\ndef category_age(x):\n    if x < 10:\n        return 0\n    elif x < 20:\n        return 1\n    elif x < 30:\n        return 2\n    elif x < 40:\n        return 3\n    elif x < 50:\n        return 4\n    elif x < 60:\n        return 5\n    elif x < 70:\n        return 6\n    else:\n        return 7 ","85499210":"# \uce74\ud14c\uace0\ub9ac\ud654\ndf_train[\"Age_cat\"] = df_train[\"Age\"].apply(category_age)\ndf_test[\"Age_cat\"] = df_test[\"Age\"].apply(category_age)","ae6a9576":"df_train.drop([\"Age\"], axis = 1, inplace = True)\ndf_test.drop([\"Age\"], axis = 1, inplace = True)","45e22eac":"df_train.Initial.unique()","7cc3dbb2":"df_train[\"Initial\"] = df_train['Initial'].map({\"Master\":0, \"Miss\":1, \"Mr\":2, \"Mrs\":3, \"Other\":4})\ndf_train","fce2f383":"df_test[\"Initial\"].unique()","4935aae8":"df_test[\"Initial\"] = df_test['Initial'].map({\"Master\":0, \"Miss\":1, \"Mr\":2, \"Mrs\":3, \"Other\":4})\ndf_test","d5cf59e4":"df_train.Embarked.unique()","8c706ee4":"# Embarked\ndf_train[\"Embarked\"] = df_train[\"Embarked\"].map({\"C\":0, \"Q\":1, \"S\":2})\ndf_test[\"Embarked\"] = df_test[\"Embarked\"].map({\"C\":0, \"Q\":1, \"S\":2})","ed38ebc2":"# Sex\ndf_train[\"Sex\"] = df_train[\"Sex\"].map({\"female\":0, \"male\":1})\ndf_test[\"Sex\"] = df_test[\"Sex\"].map({\"female\":0, \"male\":1})","189108c1":"heatmap_data = df_train[[\"Survived\", \"Pclass\", \"Sex\", \"Fare\", \"FamilySize\", \"Initial\", \"Age_cat\"]]","f224d570":"colormap = plt.cm.Blues\nplt.figure(figsize=(12,10))\nplt.title(\"Pearson Correlation of Features\", y = 1.05, size=20)\nsns.heatmap(heatmap_data.astype(float).corr(), \n            linewidths=0.2,\n            vmax=1,\n            square=True,\n            cmap=colormap,\n            linecolor=\"white\",\n            annot=True,\n            annot_kws={'size':16}, fmt='.2f')\nplt.show()","d5561fe0":"# one-hot encoding : Initial\ndf_train = pd.get_dummies(df_train, columns=[\"Initial\"], prefix=\"Initial\")\ndf_test = pd.get_dummies(df_test, columns=[\"Initial\"], prefix=\"Initial\")","7bf8cc1f":"# one-hot encoding : Embarked\ndf_train = pd.get_dummies(df_train, columns=[\"Embarked\"], prefix=\"Embarked\")\ndf_test = pd.get_dummies(df_test, columns=[\"Embarked\"], prefix=\"Embarked\")","a68d51a2":"df_test.isnull().sum()","d80ece8e":"df_test[\"Fare\"] = df_test[\"Fare\"].fillna(df_test[\"Fare\"].mean())","86a7783b":"df_train.drop([\"PassengerId\", \"Name\", 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis = 1, inplace = True)\ndf_test.drop([\"PassengerId\", \"Name\", 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis = 1, inplace = True)","f74f2068":"df_train.shape","279ef2b9":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split","bd60da05":"X_train = df_train.drop(\"Survived\", axis = 1).values\ntarget_label = df_train[\"Survived\"].values\nX_test = df_test.values","0e4ad43e":"X_t, X_val, y_t, y_val = train_test_split(X_train, target_label, test_size = 0.3, random_state=0)","62e42011":"model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel","dcc54fa9":"model.fit(X_t, y_t)","39b4ac71":"prediction = model.predict(X_val)\nprediction","21337ce8":"print(\"\ucd1d {}\uba85 \uc911 {:2f}% \uc815\ud655\ub3c4\ub85c \uc608\uce21 \uc131\uacf5\".format(y_val.shape[0], 100*metrics.accuracy_score(prediction, y_val)))","7f3b8540":"df_train.head()","35900e20":"len(df_test.columns)","03510be0":"model.feature_importances_.size","ce71c201":"feature_importance = model.feature_importances_\nSeries_feat_imp = pd.Series(feature_importance, index=df_test.columns)\nSeries_feat_imp","8dc46cdc":"plt.figure(figsize=(10, 8))\nSeries_feat_imp.sort_values(ascending=True).plot.barh(fontsize=10)\nplt.xlabel(\"Feature Importance\", size = 15)\nplt.ylabel(\"Feature\", size = 15)\nplt.show()","3f09da75":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission","0178fa04":"prediction = model.predict(X_test)","0bc11952":"submission[\"Survived\"] = prediction","8f47e435":"submission.to_csv('my_submission.csv', index=False)","c49e8564":"# EDA - Fare, Cabin(\uc0dd\ub7b5), Ticket(\uc0dd\ub7b5)","9a8458d6":"# FE - fill null in Embarked with 'S'","26db1e99":"# Pclass, Sex, Age","d710ac1d":"# EDA - Age","5893ebdd":"# \ub370\uc774\ud130 \uc815\ubcf4 \ud655\uc778\ud558\uae30\n\n1. PassengerId \u2013 \uc2b9\uac1d \ubc88\ud638\n2. Survived - \uc0dd\uc874 \uc5ec\ubd80 (0 = \uc0ac\ub9dd, 1 = \uc0dd\uc874)\n3. Pclass - \ud2f0\ucf13 \ud074\ub798\uc2a4 (1 = 1\ub4f1\uc11d, 2 = 2\ub4f1\uc11d, 3 = 3\ub4f1\uc11d)\n4. Name \u2013 \uc2b9\uac1d \uc774\ub984\n5. Sex - \uc131\ubcc4\n6. Age - \ub098\uc774\n7. SibSp - \ud568\uaed8 \ud0d1\uc2b9\ud55c \uc790\ub140(Sibling) \/ \ubc30\uc6b0\uc790 \uc758 \uc218(Spouse)\n8. Parch - \ud568\uaed8 \ud0d1\uc2b9\ud55c \ubd80\ubaa8\ub2d8(Parent) \/ \uc544\uc774\ub4e4 \uc758 \uc218(Child)\n9. Ticket - \ud2f0\ucf13 \ubc88\ud638\n10. Fare - \ud0d1\uc2b9 \uc694\uae08\n11. Cabin - \uac1d\uc2e4 \ubc88\ud638\n12. Embarked - \uc120\ucc29\uc7a5 (C=Cherbourg, Q=Queenstown, S=Southampton)","255c06fd":"# EDA - Sex","671fb781":"# \uacb0\uce21\uce58 \ud655\uc778\ud558\uae30\nNaN (Not a Number) - \uc5f0\uc0b0 \uacfc\uc815\uc5d0\uc11c \uc798\ubabb\ub41c \uc785\ub825\uc744 \ubc1b\uc558\uc74c\uc744 \ub098\ud0c0\ub0b4\ub294 \uae30\ud638","eaafa092":"# FE - String data to Numerical data\nFeatures\n1. Initial\n2. Embarked\n3. Sex","3a3d5474":"# FE - One-hot encoding\nFeatures\n1. Initial\n2. Embarked","f9ec2fc8":"# \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30 \ubc0f \uc900\ube44\uc0ac\ud56d","e3628d68":"# EDA - Embarked","712b2aa5":"# Pearson coefficient","e44142f6":"# Model - Randomforest","9dbf0c14":"\n# EDA - Pclass","16438861":"# Both Sex and Pclass","b885f2a9":"# FE - fill null in Age","b5d02400":"# target \ubd84\ud3ec \ud655\uc778\ud558\uae30","24fea8f5":"# \ub370\uc774\ud130 \uc5c5\ub85c\ub4dc \ubc0f \ub370\uc774\ud130\ud504\ub808\uc784 \uc0dd\uc131","a90ef5d0":"# EDA - Familysize(SibSp + Parch)","497e4d69":"Pclass\uc640 \uc0dd\uc874 \uc5ec\ubd80\uc5d0 \ub530\ub978 \ub098\uc774 \ud655\ub960 \ubd84\ud3ec\ud45c","3242daf0":"# FE - Drop data","af0e64f0":"# FE - Age categorization"}}