{"cell_type":{"2fbe1474":"code","967aea57":"code","ad524611":"code","a920b5a7":"code","cae4e08e":"code","7480bced":"code","0daea636":"code","dab1c857":"code","401db451":"code","b3bd77d7":"code","ea0ad600":"code","eff05736":"code","95edad2b":"code","9a8ebe9f":"code","6ad97d22":"code","ab7ea136":"code","d4567f59":"code","ec46e763":"code","fca0ed28":"code","5c621094":"code","9e769a43":"code","1471ea12":"code","fba54cc2":"code","3e0ce5a9":"code","7cf1e5dd":"code","ec92b945":"code","88f4ce8a":"code","de302258":"code","b0a74edf":"code","83718154":"code","14ab0da1":"code","b76ea87c":"code","b7a75c48":"code","401eed11":"code","63bd53cf":"code","81a1f6ec":"code","a6a73840":"code","2b4e2d40":"code","e4e9584f":"code","1eafa5c0":"code","3f202ce3":"code","e7591473":"code","a120219b":"code","590c13b7":"code","a0b2ca29":"code","e719ab75":"code","a21983e1":"code","19d664f3":"code","e0547c62":"code","70d7e611":"code","aa0396e4":"code","bd791a22":"code","bf67d097":"code","18f3bb22":"code","bd55884b":"code","21c6ee31":"code","78e38fe9":"code","81c565e0":"code","b1980429":"code","50f43b59":"code","b5f521da":"code","6d066bc4":"code","f9aa8859":"code","efa4b696":"code","2285e5bb":"code","3bdbb861":"code","23205669":"code","1976e532":"code","996c1fb3":"code","6f060c38":"code","9dbc67fc":"code","859f0ff2":"code","04a84b23":"code","5b26b22c":"code","3c0f1054":"code","535cf4c5":"code","22498802":"code","6c7127ac":"code","26981246":"code","09ad005c":"code","6a97159d":"code","70d38a18":"code","aa3b93ab":"code","c8f2f8a7":"code","4390aef8":"code","ee3eebd1":"code","7ca71806":"code","a58a6d85":"code","92c96c58":"markdown","c9cccf2a":"markdown","8ecb3db0":"markdown","24d4a197":"markdown","ccee5eeb":"markdown","b1f3f29a":"markdown","8a0db401":"markdown","9170674d":"markdown","8a0a95a7":"markdown","eca5259c":"markdown","2edb8623":"markdown","4cb61802":"markdown","acaf2822":"markdown","acaefb21":"markdown","6dd8e634":"markdown","0b74201a":"markdown","cab68a7e":"markdown","cb7466d2":"markdown","ed856d13":"markdown","dd4fa395":"markdown","97b3de64":"markdown","e447ceb8":"markdown","55cd1971":"markdown","86d70034":"markdown","915ac73b":"markdown","57de99a8":"markdown","4e825357":"markdown","05318ecc":"markdown","3209c0b4":"markdown","2bb02501":"markdown","7e2aa1b0":"markdown","93744a26":"markdown","cdec257a":"markdown","5d0b4cc7":"markdown","74628ea2":"markdown","f147db97":"markdown","92a089b5":"markdown","4b0c51ef":"markdown","9b4cc005":"markdown","f835d4e8":"markdown","1b7e7d54":"markdown","0bf8c29b":"markdown","e48ea735":"markdown","358dc08b":"markdown","70c0ab15":"markdown","d5ffd4bb":"markdown","efb8bd8b":"markdown","2f9da4e8":"markdown","d5e20fd9":"markdown","f314f010":"markdown","8c977f6b":"markdown","a19c7a0c":"markdown","da2e31a1":"markdown","7af360e9":"markdown","e5b9a8a3":"markdown","595177f5":"markdown","afc7a9a6":"markdown","6e4e4fa9":"markdown","9d07c16a":"markdown","13c784d4":"markdown","9270e9e0":"markdown","c23574b7":"markdown","a03728e1":"markdown","c4fb251c":"markdown","8bfcfc35":"markdown","db98e113":"markdown","d449fdf4":"markdown","d88866c2":"markdown","89b44cb3":"markdown","292a68cd":"markdown","40cee4c9":"markdown","ef43c5f3":"markdown","262df122":"markdown","b7da6ee6":"markdown","1760dc01":"markdown","bb8b9578":"markdown","64a260aa":"markdown","ada32324":"markdown","ea826e0b":"markdown","22f4fe5b":"markdown","32adfb20":"markdown","1b3f194a":"markdown","35020636":"markdown","6e4fb6d4":"markdown","dce59625":"markdown","d4b6a685":"markdown","5c452c71":"markdown","c8d3254b":"markdown","e5174ba2":"markdown","c229a7c7":"markdown","21a6bbac":"markdown","54e44d61":"markdown","d07f4f3c":"markdown","8316485c":"markdown","011787ad":"markdown","e1559e93":"markdown","26bdf3ad":"markdown","6c966b2b":"markdown","47f87b28":"markdown","11b5e477":"markdown","28fe22b3":"markdown","0de50984":"markdown"},"source":{"2fbe1474":"random_state_split = 10\nDropout_num = 0\nlearning_rate = 6e-6\nvalid = 0.2\nepochs_num = 3\nbatch_size_num = 16\ntarget_corrected = False\ntarget_big_corrected = False","967aea57":"import pandas as pd\nimport numpy as np\nimport os\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport seaborn as sns\n\nfrom nltk.corpus import stopwords\nfrom nltk.util import ngrams\n\nfrom wordcloud import WordCloud\n\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.decomposition import PCA, TruncatedSVD\nfrom sklearn.metrics import classification_report,confusion_matrix\n\nfrom collections import defaultdict\nfrom collections import Counter\nplt.style.use('ggplot')\nstop=set(stopwords.words('english'))\n\nimport re\nfrom nltk.tokenize import word_tokenize\nimport gensim\nimport string\n\nfrom tqdm import tqdm\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Embedding, LSTM,Dense, SpatialDropout1D, Dropout\nfrom keras.initializers import Constant\nfrom keras.optimizers import Adam","ad524611":"tweet= pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ntest=pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\nsubmission = pd.read_csv(\"..\/input\/nlp-getting-started\/sample_submission.csv\")","a920b5a7":"# # From https:\/\/www.kaggle.com\/wrrosa\/keras-bert-using-tfhub-modified-train-data - \n# # author of this kernel read tweets in training data and figure out that some of them have errors:\n# ids_with_target_error = [328,443,513,2619,3640,3900,4342,5781,6552,6554,6570,6701,6702,6729,6861,7226]\n# tweet.loc[tweet['id'].isin(ids_with_target_error),'target'] = 0\n# tweet[tweet['id'].isin(ids_with_target_error)]","cae4e08e":"print('There are {} rows and {} columns in train'.format(tweet.shape[0],tweet.shape[1]))\nprint('There are {} rows and {} columns in train'.format(test.shape[0],test.shape[1]))","7480bced":"tweet.head(10)","0daea636":"# extracting the number of examples of each class\nReal_len = tweet[tweet['target'] == 1].shape[0]\nNot_len = tweet[tweet['target'] == 0].shape[0]","dab1c857":"# bar plot of the 3 classes\nplt.rcParams['figure.figsize'] = (7, 5)\nplt.bar(10,Real_len,3, label=\"Real\", color='blue')\nplt.bar(15,Not_len,3, label=\"Not\", color='red')\nplt.legend()\nplt.ylabel('Number of examples')\nplt.title('Propertion of examples')\nplt.show()","401db451":"def length(text):    \n    '''a function which returns the length of text'''\n    return len(text)","b3bd77d7":"tweet['length'] = tweet['text'].apply(length)","ea0ad600":"plt.rcParams['figure.figsize'] = (18.0, 6.0)\nbins = 150\nplt.hist(tweet[tweet['target'] == 0]['length'], alpha = 0.6, bins=bins, label='Not')\nplt.hist(tweet[tweet['target'] == 1]['length'], alpha = 0.8, bins=bins, label='Real')\nplt.xlabel('length')\nplt.ylabel('numbers')\nplt.legend(loc='upper right')\nplt.xlim(0,150)\nplt.grid()\nplt.show()","eff05736":"fig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))\ntweet_len=tweet[tweet['target']==1]['text'].str.len()\nax1.hist(tweet_len,color='blue')\nax1.set_title('disaster tweets')\ntweet_len=tweet[tweet['target']==0]['text'].str.len()\nax2.hist(tweet_len,color='red')\nax2.set_title('Not disaster tweets')\nfig.suptitle('Characters in tweets')\nplt.show()","95edad2b":"fig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))\ntweet_len=tweet[tweet['target']==1]['text'].str.split().map(lambda x: len(x))\nax1.hist(tweet_len,color='blue')\nax1.set_title('disaster tweets')\ntweet_len=tweet[tweet['target']==0]['text'].str.split().map(lambda x: len(x))\nax2.hist(tweet_len,color='red')\nax2.set_title('Not disaster tweets')\nfig.suptitle('Words in a tweet')\nplt.show()\n","9a8ebe9f":"fig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))\nword=tweet[tweet['target']==1]['text'].str.split().apply(lambda x : [len(i) for i in x])\nsns.distplot(word.map(lambda x: np.mean(x)),ax=ax1,color='blue')\nax1.set_title('disaster')\nword=tweet[tweet['target']==0]['text'].str.split().apply(lambda x : [len(i) for i in x])\nsns.distplot(word.map(lambda x: np.mean(x)),ax=ax2,color='red')\nax2.set_title('Not disaster')\nfig.suptitle('Average word length in each tweet')","6ad97d22":"def create_corpus(target):\n    corpus=[]\n    \n    for x in tweet[tweet['target']==target]['text'].str.split():\n        for i in x:\n            corpus.append(i)\n    return corpus","ab7ea136":"def create_corpus_df(tweet, target):\n    corpus=[]\n    \n    for x in tweet[tweet['target']==target]['text'].str.split():\n        for i in x:\n            corpus.append(i)\n    return corpus","d4567f59":"corpus=create_corpus(0)\n\ndic=defaultdict(int)\nfor word in corpus:\n    if word in stop:\n        dic[word]+=1\n        \ntop=sorted(dic.items(), key=lambda x:x[1],reverse=True)[:10]","ec46e763":"# displaying the stopwords\nnp.array(stop)","fca0ed28":"plt.rcParams['figure.figsize'] = (18.0, 6.0)\nx,y=zip(*top)\nplt.bar(x,y)","5c621094":"corpus=create_corpus(1)\n\ndic=defaultdict(int)\nfor word in corpus:\n    if word in stop:\n        dic[word]+=1\n\ntop=sorted(dic.items(), key=lambda x:x[1],reverse=True)[:10] \n    \n\nplt.rcParams['figure.figsize'] = (18.0, 6.0)\nx,y=zip(*top)\nplt.bar(x,y)","9e769a43":"plt.figure(figsize=(16,5))\ncorpus=create_corpus(1)\n\ndic=defaultdict(int)\nspecial = string.punctuation\nfor i in (corpus):\n    if i in special:\n        dic[i]+=1\n        \nx,y=zip(*dic.items())\nplt.bar(x,y)","1471ea12":"plt.figure(figsize=(16,5))\ncorpus=create_corpus(0)\ndic=defaultdict(int)\nspecial = string.punctuation\nfor i in (corpus):\n    if i in special:\n        dic[i]+=1\n        \nx,y=zip(*dic.items())\nplt.bar(x,y,color='green')","fba54cc2":"plt.figure(figsize=(16,5))\ncounter=Counter(corpus)\nmost=counter.most_common()\nx=[]\ny=[]\nfor word,count in most[:40]:\n    if (word not in stop) :\n        x.append(word)\n        y.append(count)","3e0ce5a9":"sns.barplot(x=y,y=x)","7cf1e5dd":"def get_top_tweet_bigrams(corpus, n=None):\n    vec = CountVectorizer(ngram_range=(2, 2)).fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]","ec92b945":"plt.figure(figsize=(16,5))\ntop_tweet_bigrams=get_top_tweet_bigrams(tweet['text'])[:10]\nx,y=map(list,zip(*top_tweet_bigrams))\nsns.barplot(x=y,y=x)","88f4ce8a":"df=pd.concat([tweet,test])\ndf.shape","de302258":"example=\"New competition launched :https:\/\/www.kaggle.com\/c\/nlp-getting-started\"","b0a74edf":"def remove_URL(text):\n    url = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    return url.sub(r'',text)\n\nremove_URL(example)","83718154":"df['text']=df['text'].apply(lambda x : remove_URL(x))","14ab0da1":"example = \"\"\"<div>\n<h1>Real or Fake<\/h1>\n<p>Kaggle <\/p>\n<a href=\"https:\/\/www.kaggle.com\/c\/nlp-getting-started\">getting started<\/a>\n<\/div>\"\"\"","b76ea87c":"def remove_html(text):\n    html=re.compile(r'<.*?>')\n    return html.sub(r'',text)\nprint(remove_html(example))","b7a75c48":"df['text']=df['text'].apply(lambda x : remove_html(x))","401eed11":"# Reference : https:\/\/gist.github.com\/slowkow\/7a7f61f495e3dbb7e3d767f97bd7304b\ndef remove_emoji(text):\n    emoji_pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    return emoji_pattern.sub(r'', text)\n\nremove_emoji(\"Omg another Earthquake \ud83d\ude14\ud83d\ude14\")","63bd53cf":"df['text']=df['text'].apply(lambda x: remove_emoji(x))","81a1f6ec":"def remove_punct(text):\n    table=str.maketrans('','',string.punctuation)\n    return text.translate(table)\n\nexample=\"I am a #king\"\nprint(remove_punct(example))","a6a73840":"df['text']=df['text'].apply(lambda x : remove_punct(x))","2b4e2d40":"corpus_new1=create_corpus_df(df,1)\nlen(corpus_new1)","e4e9584f":"corpus_new1[:10]","1eafa5c0":"# Generating the wordcloud with the values under the category dataframe\nplt.figure(figsize=(12,8))\nword_cloud = WordCloud(\n                          background_color='black',\n                          max_font_size = 80\n                         ).generate(\" \".join(corpus_new1[:50]))\nplt.imshow(word_cloud)\nplt.axis('off')\nplt.show()","3f202ce3":"corpus_new0=create_corpus_df(df,0)\nlen(corpus_new0)","e7591473":"corpus_new0[:10]","a120219b":"# Generating the wordcloud with the values under the category dataframe\nplt.figure(figsize=(12,8))\nword_cloud = WordCloud(\n                          background_color='black',\n                          max_font_size = 80\n                         ).generate(\" \".join(corpus_new0[:50]))\nplt.imshow(word_cloud)\nplt.axis('off')\nplt.show()","590c13b7":"df.head(10)","a0b2ca29":"def cv(data):\n    count_vectorizer = CountVectorizer()\n\n    emb = count_vectorizer.fit_transform(data)\n\n    return emb, count_vectorizer\n\nlist_corpus = df[\"text\"].tolist()\nlist_labels = df[\"target\"].tolist()\n\nX_train, X_test, y_train, y_test = train_test_split(list_corpus, list_labels, test_size=0.2, \n                                                                                random_state=random_state_split)\n\nX_train_counts, count_vectorizer = cv(X_train)\nX_test_counts = count_vectorizer.transform(X_test)","e719ab75":"def plot_LSA(test_data, test_labels, savepath=\"PCA_demo.csv\", plot=True):\n        lsa = TruncatedSVD(n_components=2)\n        lsa.fit(test_data)\n        lsa_scores = lsa.transform(test_data)\n        color_mapper = {label:idx for idx,label in enumerate(set(test_labels))}\n        color_column = [color_mapper[label] for label in test_labels]\n        colors = ['orange','blue']\n        if plot:\n            plt.scatter(lsa_scores[:,0], lsa_scores[:,1], s=8, alpha=.8, c=test_labels, cmap=matplotlib.colors.ListedColormap(colors))\n            orange_patch = mpatches.Patch(color='orange', label='Not')\n            blue_patch = mpatches.Patch(color='blue', label='Real')\n            plt.legend(handles=[orange_patch, blue_patch], prop={'size': 30})\n\nfig = plt.figure(figsize=(16, 16))          \nplot_LSA(X_train_counts, y_train)\nplt.show()","a21983e1":"def tfidf(data):\n    tfidf_vectorizer = TfidfVectorizer()\n\n    train = tfidf_vectorizer.fit_transform(data)\n\n    return train, tfidf_vectorizer\n\nX_train_tfidf, tfidf_vectorizer = tfidf(X_train)\nX_test_tfidf = tfidf_vectorizer.transform(X_test)","19d664f3":"fig = plt.figure(figsize=(16, 16))          \nplot_LSA(X_train_tfidf, y_train)\nplt.show()","e0547c62":"def create_corpus_new(df):\n    corpus=[]\n    for tweet in tqdm(df['text']):\n        words=[word.lower() for word in word_tokenize(tweet)]\n        corpus.append(words)\n    return corpus   ","70d7e611":"corpus=create_corpus_new(df)","aa0396e4":"embedding_dict={}\nwith open('..\/input\/glove-global-vectors-for-word-representation\/glove.6B.100d.txt','r') as f:\n    for line in f:\n        values=line.split()\n        word = values[0]\n        vectors=np.asarray(values[1:],'float32')\n        embedding_dict[word]=vectors\nf.close()","bd791a22":"MAX_LEN=50\ntokenizer_obj=Tokenizer()\ntokenizer_obj.fit_on_texts(corpus)\nsequences=tokenizer_obj.texts_to_sequences(corpus)\n\ntweet_pad=pad_sequences(sequences,maxlen=MAX_LEN,truncating='post',padding='post')","bf67d097":"word_index=tokenizer_obj.word_index\nprint('Number of unique words:',len(word_index))","18f3bb22":"num_words=len(word_index)+1\nembedding_matrix=np.zeros((num_words,100))\n\nfor word,i in tqdm(word_index.items()):\n    if i < num_words:\n        emb_vec=embedding_dict.get(word)\n        if emb_vec is not None:\n            embedding_matrix[i]=emb_vec           ","bd55884b":"tweet_pad[0][0:]","21c6ee31":"model=Sequential()\n\nembedding=Embedding(num_words,100,embeddings_initializer=Constant(embedding_matrix),\n                   input_length=MAX_LEN,trainable=False)\n\nmodel.add(embedding)\nmodel.add(SpatialDropout1D(0.2))\nmodel.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\n\n\noptimzer=Adam(learning_rate=3e-4)\n\nmodel.compile(loss='binary_crossentropy',optimizer=optimzer,metrics=['accuracy'])","78e38fe9":"model.summary()","81c565e0":"train=tweet_pad[:tweet.shape[0]]\ntest=tweet_pad[tweet.shape[0]:]","b1980429":"X_train,X_test,y_train,y_test=train_test_split(train,tweet['target'].values,test_size=0.2)\nprint('Shape of train',X_train.shape)\nprint(\"Shape of Validation \",X_test.shape)","50f43b59":"fig = plt.figure(figsize=(16, 16))          \nplot_LSA(train,tweet['target'])\nplt.show()","b5f521da":"# Recomended 10-20 epochs\nhistory=model.fit(X_train,y_train,batch_size=4,epochs=10,validation_data=(X_test,y_test),verbose=2)","6d066bc4":"train_pred_GloVe = model.predict(train)\ntrain_pred_GloVe_int = train_pred_GloVe.round().astype('int')","f9aa8859":"# We will use the official tokenization script created by the Google team\n!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py","efa4b696":"import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub\n\nimport tokenization","2285e5bb":"# Thanks to https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub\ndef bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)","3bdbb861":"# Thanks to https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub\ndef build_model(bert_layer, max_len=512):\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    \n    if Dropout_num == 0:\n        # Without Dropout\n        out = Dense(1, activation='sigmoid')(clf_output)\n    else:\n        # With Dropout(Dropout_num), Dropout_num > 0\n        x = Dropout(Dropout_num)(clf_output)\n        out = Dense(1, activation='sigmoid')(x)\n\n    model = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(Adam(lr=learning_rate), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","23205669":"# Thanks to https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\ndef clean_tweets(tweet):\n    \"\"\"Removes links and non-ASCII characters\"\"\"\n    \n    tweet = ''.join([x for x in tweet if x in string.printable])\n    \n    # Removing URLs\n    tweet = re.sub(r\"http\\S+\", \"\", tweet)\n    \n    return tweet","1976e532":"# Thanks to https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\ndef remove_emoji(text):\n    emoji_pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    return emoji_pattern.sub(r'', text)","996c1fb3":"# Thanks to https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\ndef remove_punctuations(text):\n    punctuations = '@#!?+&*[]-%.:\/();$=><|{}^' + \"'`\"\n    \n    for p in punctuations:\n        text = text.replace(p, f' {p} ')\n\n    text = text.replace('...', ' ... ')\n    \n    if '...' not in text:\n        text = text.replace('..', ' ... ')\n    \n    return text","6f060c38":"# Thanks to https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\nabbreviations = {\n    \"$\" : \" dollar \",\n    \"\u20ac\" : \" euro \",\n    \"4ao\" : \"for adults only\",\n    \"a.m\" : \"before midday\",\n    \"a3\" : \"anytime anywhere anyplace\",\n    \"aamof\" : \"as a matter of fact\",\n    \"acct\" : \"account\",\n    \"adih\" : \"another day in hell\",\n    \"afaic\" : \"as far as i am concerned\",\n    \"afaict\" : \"as far as i can tell\",\n    \"afaik\" : \"as far as i know\",\n    \"afair\" : \"as far as i remember\",\n    \"afk\" : \"away from keyboard\",\n    \"app\" : \"application\",\n    \"approx\" : \"approximately\",\n    \"apps\" : \"applications\",\n    \"asap\" : \"as soon as possible\",\n    \"asl\" : \"age, sex, location\",\n    \"atk\" : \"at the keyboard\",\n    \"ave.\" : \"avenue\",\n    \"aymm\" : \"are you my mother\",\n    \"ayor\" : \"at your own risk\", \n    \"b&b\" : \"bed and breakfast\",\n    \"b+b\" : \"bed and breakfast\",\n    \"b.c\" : \"before christ\",\n    \"b2b\" : \"business to business\",\n    \"b2c\" : \"business to customer\",\n    \"b4\" : \"before\",\n    \"b4n\" : \"bye for now\",\n    \"b@u\" : \"back at you\",\n    \"bae\" : \"before anyone else\",\n    \"bak\" : \"back at keyboard\",\n    \"bbbg\" : \"bye bye be good\",\n    \"bbc\" : \"british broadcasting corporation\",\n    \"bbias\" : \"be back in a second\",\n    \"bbl\" : \"be back later\",\n    \"bbs\" : \"be back soon\",\n    \"be4\" : \"before\",\n    \"bfn\" : \"bye for now\",\n    \"blvd\" : \"boulevard\",\n    \"bout\" : \"about\",\n    \"brb\" : \"be right back\",\n    \"bros\" : \"brothers\",\n    \"brt\" : \"be right there\",\n    \"bsaaw\" : \"big smile and a wink\",\n    \"btw\" : \"by the way\",\n    \"bwl\" : \"bursting with laughter\",\n    \"c\/o\" : \"care of\",\n    \"cet\" : \"central european time\",\n    \"cf\" : \"compare\",\n    \"cia\" : \"central intelligence agency\",\n    \"csl\" : \"can not stop laughing\",\n    \"cu\" : \"see you\",\n    \"cul8r\" : \"see you later\",\n    \"cv\" : \"curriculum vitae\",\n    \"cwot\" : \"complete waste of time\",\n    \"cya\" : \"see you\",\n    \"cyt\" : \"see you tomorrow\",\n    \"dae\" : \"does anyone else\",\n    \"dbmib\" : \"do not bother me i am busy\",\n    \"diy\" : \"do it yourself\",\n    \"dm\" : \"direct message\",\n    \"dwh\" : \"during work hours\",\n    \"e123\" : \"easy as one two three\",\n    \"eet\" : \"eastern european time\",\n    \"eg\" : \"example\",\n    \"embm\" : \"early morning business meeting\",\n    \"encl\" : \"enclosed\",\n    \"encl.\" : \"enclosed\",\n    \"etc\" : \"and so on\",\n    \"faq\" : \"frequently asked questions\",\n    \"fawc\" : \"for anyone who cares\",\n    \"fb\" : \"facebook\",\n    \"fc\" : \"fingers crossed\",\n    \"fig\" : \"figure\",\n    \"fimh\" : \"forever in my heart\", \n    \"ft.\" : \"feet\",\n    \"ft\" : \"featuring\",\n    \"ftl\" : \"for the loss\",\n    \"ftw\" : \"for the win\",\n    \"fwiw\" : \"for what it is worth\",\n    \"fyi\" : \"for your information\",\n    \"g9\" : \"genius\",\n    \"gahoy\" : \"get a hold of yourself\",\n    \"gal\" : \"get a life\",\n    \"gcse\" : \"general certificate of secondary education\",\n    \"gfn\" : \"gone for now\",\n    \"gg\" : \"good game\",\n    \"gl\" : \"good luck\",\n    \"glhf\" : \"good luck have fun\",\n    \"gmt\" : \"greenwich mean time\",\n    \"gmta\" : \"great minds think alike\",\n    \"gn\" : \"good night\",\n    \"g.o.a.t\" : \"greatest of all time\",\n    \"goat\" : \"greatest of all time\",\n    \"goi\" : \"get over it\",\n    \"gps\" : \"global positioning system\",\n    \"gr8\" : \"great\",\n    \"gratz\" : \"congratulations\",\n    \"gyal\" : \"girl\",\n    \"h&c\" : \"hot and cold\",\n    \"hp\" : \"horsepower\",\n    \"hr\" : \"hour\",\n    \"hrh\" : \"his royal highness\",\n    \"ht\" : \"height\",\n    \"ibrb\" : \"i will be right back\",\n    \"ic\" : \"i see\",\n    \"icq\" : \"i seek you\",\n    \"icymi\" : \"in case you missed it\",\n    \"idc\" : \"i do not care\",\n    \"idgadf\" : \"i do not give a damn fuck\",\n    \"idgaf\" : \"i do not give a fuck\",\n    \"idk\" : \"i do not know\",\n    \"ie\" : \"that is\",\n    \"i.e\" : \"that is\",\n    \"ifyp\" : \"i feel your pain\",\n    \"IG\" : \"instagram\",\n    \"iirc\" : \"if i remember correctly\",\n    \"ilu\" : \"i love you\",\n    \"ily\" : \"i love you\",\n    \"imho\" : \"in my humble opinion\",\n    \"imo\" : \"in my opinion\",\n    \"imu\" : \"i miss you\",\n    \"iow\" : \"in other words\",\n    \"irl\" : \"in real life\",\n    \"j4f\" : \"just for fun\",\n    \"jic\" : \"just in case\",\n    \"jk\" : \"just kidding\",\n    \"jsyk\" : \"just so you know\",\n    \"l8r\" : \"later\",\n    \"lb\" : \"pound\",\n    \"lbs\" : \"pounds\",\n    \"ldr\" : \"long distance relationship\",\n    \"lmao\" : \"laugh my ass off\",\n    \"lmfao\" : \"laugh my fucking ass off\",\n    \"lol\" : \"laughing out loud\",\n    \"ltd\" : \"limited\",\n    \"ltns\" : \"long time no see\",\n    \"m8\" : \"mate\",\n    \"mf\" : \"motherfucker\",\n    \"mfs\" : \"motherfuckers\",\n    \"mfw\" : \"my face when\",\n    \"mofo\" : \"motherfucker\",\n    \"mph\" : \"miles per hour\",\n    \"mr\" : \"mister\",\n    \"mrw\" : \"my reaction when\",\n    \"ms\" : \"miss\",\n    \"mte\" : \"my thoughts exactly\",\n    \"nagi\" : \"not a good idea\",\n    \"nbc\" : \"national broadcasting company\",\n    \"nbd\" : \"not big deal\",\n    \"nfs\" : \"not for sale\",\n    \"ngl\" : \"not going to lie\",\n    \"nhs\" : \"national health service\",\n    \"nrn\" : \"no reply necessary\",\n    \"nsfl\" : \"not safe for life\",\n    \"nsfw\" : \"not safe for work\",\n    \"nth\" : \"nice to have\",\n    \"nvr\" : \"never\",\n    \"nyc\" : \"new york city\",\n    \"oc\" : \"original content\",\n    \"og\" : \"original\",\n    \"ohp\" : \"overhead projector\",\n    \"oic\" : \"oh i see\",\n    \"omdb\" : \"over my dead body\",\n    \"omg\" : \"oh my god\",\n    \"omw\" : \"on my way\",\n    \"p.a\" : \"per annum\",\n    \"p.m\" : \"after midday\",\n    \"pm\" : \"prime minister\",\n    \"poc\" : \"people of color\",\n    \"pov\" : \"point of view\",\n    \"pp\" : \"pages\",\n    \"ppl\" : \"people\",\n    \"prw\" : \"parents are watching\",\n    \"ps\" : \"postscript\",\n    \"pt\" : \"point\",\n    \"ptb\" : \"please text back\",\n    \"pto\" : \"please turn over\",\n    \"qpsa\" : \"what happens\", #\"que pasa\",\n    \"ratchet\" : \"rude\",\n    \"rbtl\" : \"read between the lines\",\n    \"rlrt\" : \"real life retweet\", \n    \"rofl\" : \"rolling on the floor laughing\",\n    \"roflol\" : \"rolling on the floor laughing out loud\",\n    \"rotflmao\" : \"rolling on the floor laughing my ass off\",\n    \"rt\" : \"retweet\",\n    \"ruok\" : \"are you ok\",\n    \"sfw\" : \"safe for work\",\n    \"sk8\" : \"skate\",\n    \"smh\" : \"shake my head\",\n    \"sq\" : \"square\",\n    \"srsly\" : \"seriously\", \n    \"ssdd\" : \"same stuff different day\",\n    \"tbh\" : \"to be honest\",\n    \"tbs\" : \"tablespooful\",\n    \"tbsp\" : \"tablespooful\",\n    \"tfw\" : \"that feeling when\",\n    \"thks\" : \"thank you\",\n    \"tho\" : \"though\",\n    \"thx\" : \"thank you\",\n    \"tia\" : \"thanks in advance\",\n    \"til\" : \"today i learned\",\n    \"tl;dr\" : \"too long i did not read\",\n    \"tldr\" : \"too long i did not read\",\n    \"tmb\" : \"tweet me back\",\n    \"tntl\" : \"trying not to laugh\",\n    \"ttyl\" : \"talk to you later\",\n    \"u\" : \"you\",\n    \"u2\" : \"you too\",\n    \"u4e\" : \"yours for ever\",\n    \"utc\" : \"coordinated universal time\",\n    \"w\/\" : \"with\",\n    \"w\/o\" : \"without\",\n    \"w8\" : \"wait\",\n    \"wassup\" : \"what is up\",\n    \"wb\" : \"welcome back\",\n    \"wtf\" : \"what the fuck\",\n    \"wtg\" : \"way to go\",\n    \"wtpa\" : \"where the party at\",\n    \"wuf\" : \"where are you from\",\n    \"wuzup\" : \"what is up\",\n    \"wywh\" : \"wish you were here\",\n    \"yd\" : \"yard\",\n    \"ygtr\" : \"you got that right\",\n    \"ynk\" : \"you never know\",\n    \"zzz\" : \"sleeping bored and tired\"\n}","9dbc67fc":"# Thanks to https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\ndef convert_abbrev(word):\n    return abbreviations[word.lower()] if word.lower() in abbreviations.keys() else word","859f0ff2":"# Thanks to https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\ndef convert_abbrev_in_text(text):\n    tokens = word_tokenize(text)\n    tokens = [convert_abbrev(word) for word in tokens]\n    text = ' '.join(tokens)\n    return text","04a84b23":"# Load BERT from the Tensorflow Hub\nmodule_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)","5b26b22c":"# Load CSV files containing training data\ntrain = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")","3c0f1054":"# Thanks to https:\/\/www.kaggle.com\/wrrosa\/keras-bert-using-tfhub-modified-train-data - \n# author of this kernel read tweets in training data and figure out that some of them have errors:\nif target_corrected:\n    ids_with_target_error = [328,443,513,2619,3640,3900,4342,5781,6552,6554,6570,6701,6702,6729,6861,7226]\n    train.loc[train['id'].isin(ids_with_target_error),'target'] = 0\n    train[train['id'].isin(ids_with_target_error)]","535cf4c5":"# Thanks to https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\nif target_big_corrected:\n    train[\"text\"] = train[\"text\"].apply(lambda x: clean_tweets(x))\n    test[\"text\"] = test[\"text\"].apply(lambda x: clean_tweets(x))\n    \n    train[\"text\"] = train[\"text\"].apply(lambda x: remove_emoji(x))\n    test[\"text\"] = test[\"text\"].apply(lambda x: remove_emoji(x))\n    \n    train[\"text\"] = train[\"text\"].apply(lambda x: remove_punctuations(x))\n    test[\"text\"] = test[\"text\"].apply(lambda x: remove_punctuations(x))\n    \n    train[\"text\"] = train[\"text\"].apply(lambda x: convert_abbrev_in_text(x))\n    test[\"text\"] = test[\"text\"].apply(lambda x: convert_abbrev_in_text(x))","22498802":"# Thanks to https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub\n# Load tokenizer from the bert layer\nvocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)","6c7127ac":"# Thanks to https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub\n# Encode the text into tokens, masks, and segment flags\ntrain_input = bert_encode(train.text.values, tokenizer, max_len=160)\ntest_input = bert_encode(test.text.values, tokenizer, max_len=160)\ntrain_labels = train.target.values","26981246":"# Thanks to https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub\n# Build BERT model with my tuning\nmodel_BERT = build_model(bert_layer, max_len=160)\nmodel_BERT.summary()","09ad005c":"# Thanks to https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub\n# Train BERT model with my tuning\ncheckpoint = ModelCheckpoint('model_BERT.h5', monitor='val_loss', save_best_only=True)\n\ntrain_history = model_BERT.fit(\n    train_input, train_labels,\n    validation_split = valid,\n    epochs = epochs_num, # recomended 3-5 epochs\n    callbacks=[checkpoint],\n    batch_size = batch_size_num\n)","6a97159d":"# Thanks to https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub\n# Prediction by BERT model with my tuning\nmodel_BERT.load_weights('model_BERT.h5')\ntest_pred_BERT = model_BERT.predict(test_input)\ntest_pred_BERT_int = test_pred_BERT.round().astype('int')","70d38a18":"# Prediction by BERT model with my tuning for the training data - for the Confusion Matrix\ntrain_pred_BERT = model_BERT.predict(train_input)\ntrain_pred_BERT_int = train_pred_BERT.round().astype('int')","aa3b93ab":"pred = pd.DataFrame(test_pred_BERT, columns=['preds'])\npred.plot.hist()","c8f2f8a7":"submission['target'] = test_pred_BERT_int\nsubmission.head(10)","4390aef8":"submission.to_csv(\"submission.csv\", index=False, header=True)","ee3eebd1":"# Showing Confusion Matrix\ndef plot_cm(y_true, y_pred, title, figsize=(5,5)):\n    cm = confusion_matrix(y_true, y_pred, labels=np.unique(y_true))\n    cm_sum = np.sum(cm, axis=1, keepdims=True)\n    cm_perc = cm \/ cm_sum.astype(float) * 100\n    annot = np.empty_like(cm).astype(str)\n    nrows, ncols = cm.shape\n    for i in range(nrows):\n        for j in range(ncols):\n            c = cm[i, j]\n            p = cm_perc[i, j]\n            if i == j:\n                s = cm_sum[i]\n                annot[i, j] = '%.1f%%\\n%d\/%d' % (p, c, s)\n            elif c == 0:\n                annot[i, j] = ''\n            else:\n                annot[i, j] = '%.1f%%\\n%d' % (p, c)\n    cm = pd.DataFrame(cm, index=np.unique(y_true), columns=np.unique(y_true))\n    cm.index.name = 'Actual'\n    cm.columns.name = 'Predicted'\n    fig, ax = plt.subplots(figsize=figsize)\n    plt.title(title)\n    sns.heatmap(cm, cmap= \"YlGnBu\", annot=annot, fmt='', ax=ax)","7ca71806":"# Showing Confusion Matrix for GloVe model\nplot_cm(train_pred_GloVe_int, train['target'].values, 'Confusion matrix for GloVe model', figsize=(7,7))","a58a6d85":"# Showing Confusion Matrix for BERT model\nplot_cm(train_pred_BERT_int, train['target'].values, 'Confusion matrix for BERT model', figsize=(7,7))","92c96c58":"## 6. WordCloud <a class=\"anchor\" id=\"6\"><\/a>\n\n[Back to Table of Contents](#0.1)","c9cccf2a":"### Commit 22\n* Dropout(0.2)\n* Adam(lr=1.1e-5)\n* validation_split = 0.2,\n* epochs = 3,\n* batch_size = 16\n\n**LB (for BERT) = 0.80879**","8ecb3db0":"## 11. Showing Confusion Matrices<a class=\"anchor\" id=\"11\"><\/a>\n\n[Back to Table of Contents](#0.1)","24d4a197":"### Commit 40\n* without Dropout\n* Adam(lr=2e-5)\n* validation_split = 0.2,\n* epochs = 5,\n* batch_size = 32\n\n**LB = 0.81186**","ccee5eeb":"### Commit 32\n\n* Dropout(0.2)\n* Adam(lr=2e-5)\n* validation_split = 0.2,\n* epochs = 4,\n* batch_size = 32\n\n**LB = 0.82004**","b1f3f29a":"### 10.1. Submission by BERT<a class=\"anchor\" id=\"10.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","8a0db401":"### Commit 25\n* Dropout(0.2)\n* Adam(lr=3e-5)\n* validation_split = 0.2,\n* epochs = 4,\n* batch_size = 32\n\n**LB = 0.83537**","9170674d":"Thanks to https:\/\/github.com\/hundredblocks\/concrete_NLP_tutorial\/blob\/master\/NLP_notebook.ipynb","8a0a95a7":"## 1.2. Previous commits: Dropout = 0.1 or 0.3 <a class=\"anchor\" id=\"1.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","eca5259c":"### Commit 14\n* Dropout(0.2)\n* Adam(lr=2e-5)\n* validation_split = 0.2,\n* epochs = 3,\n* batch_size = 32\n\n**LB = 0.83128**","2edb8623":"Thanks to https:\/\/www.kaggle.com\/shahules\/basic-eda-cleaning-and-glove","4cb61802":"### Class distribution","acaf2822":"Lot of cleaning needed !","acaefb21":"Thanks to very good kernel https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub","6dd8e634":"* random_state_split = 10\n* without Dropout\n* Adam(lr=6e-6)\n* validation_split = 0.2\n* epochs = 3\n* batch_size = 16\n* target_corrected = False\n* target_big_corrected = False","0b74201a":"### Commit 55\n* without Dropout\n* Adam(lr=5e-6)\n* validation_split = 0.3\n* epochs = 3\n* batch_size = 16\n* target_corrected = False\n\n**LB = 0.82924**","cab68a7e":"Thanks to https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub","cb7466d2":"### Commit 24\n* Dropout(0.3)\n* Adam(lr=2e-5)\n* validation_split = 0.2,\n* epochs = 4,\n* batch_size = 32\n\n**LB = 0.80470**","ed856d13":"### Commit 37\n#### From https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub (commit 2)\n* without Dropout\n* Adam(lr=2e-5)\n* validation_split = 0.2,\n* epochs = 3,\n* batch_size = 32\n\n**LB = 0.81390** - This is strange, since this original model gave LB = 0.84355","dd4fa395":"### Visualizing the embeddings","97b3de64":"### Commit 20\n* without Dropout\n* Adam(lr=1e-5)\n* validation_split = 0.2,\n* epochs = 3,\n* batch_size = 16\n\n**LB = 0.82413**","e447ceb8":"### Removing punctuations","55cd1971":"## 5. Data Cleaning <a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","86d70034":"## Baseline Model with GloVe results","915ac73b":"## 1.7. Previous commits: parameters and LB scores<a class=\"anchor\" id=\"1.7\"><\/a>\n\n[Back to Table of Contents](#0.1)","57de99a8":"## 2. Import libraries <a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","4e825357":"**target_corrected = True :**\n\nFrom https:\/\/www.kaggle.com\/wrrosa\/keras-bert-using-tfhub-modified-train-data - author of this kernel read tweets in training data and figure out that some of them have errors:\n\n    ids_with_target_error = [328,443,513,2619,3640,3900,4342,5781,6552,6554,6570,6701,6702,6729,6861,7226]\n    train.loc[train['id'].isin(ids_with_target_error),'target'] = 0","05318ecc":"## Prediction","3209c0b4":"### Commit 49\n* without Dropout\n* Adam(lr=5e-6)\n* validation_split = 0.2,\n* epochs = 3,\n* batch_size = 16\n\n**LB = 0.83537**","2bb02501":"## Big target correction","7e2aa1b0":"### Commit 51\n* without Dropout\n* Adam(lr=3e-6)\n* validation_split = 0.2,\n* epochs = 3,\n* batch_size = 16\n* target_corrected = True\n\n**LB = 0.83231**","93744a26":"In both of them,\"the\" dominates which is followed by \"a\" in class 0 and \"in\" in class 1.","cdec257a":"### Commit 62\n* without Dropout\n* Adam(lr=5.9e-6)\n* validation_split = 0.2\n* epochs = 3\n* batch_size = 16\n* target_corrected = False\n\n**LB = 0.83537**","5d0b4cc7":"### Removing HTML tags","74628ea2":"## Target correction","f147db97":"## 1.4. Previous commits: epochs = 4 <a class=\"anchor\" id=\"1.4\"><\/a>\n\n[Back to Table of Contents](#0.1)","92a089b5":"### Commit 43\n* without Dropout\n* Adam(lr=5e-6)\n* validation_split = 0.2,\n* epochs = 4,\n* batch_size = 32\n\n**LB = 0.83844**","4b0c51ef":"### Common stopwords in tweets","9b4cc005":"Thanks to:\n* https:\/\/www.kaggle.com\/shahules\/basic-eda-cleaning-and-glove\n* https:\/\/www.kaggle.com\/arthurtok\/spooky-nlp-and-topic-modelling-tutorial\n* https:\/\/www.kaggle.com\/itratrahman\/nlp-tutorial-using-python","f835d4e8":"### Commit 27\n* Dropout(0.2)\n* Adam(lr=5e-4)\n* validation_split = 0.2,\n* epochs = 4,\n* batch_size = 32\n\n**LB = 0.57055**","1b7e7d54":"### Commit 39\n* without Dropout\n* Adam(lr=2e-5)\n* validation_split = 0.2,\n* epochs = 4,\n* batch_size = 24\n\n**LB = 0.83435**","0bf8c29b":"### Not Disaster","e48ea735":"# Acknowledgements\n\nThis kernel uses such good kernels: \n* https:\/\/www.kaggle.com\/vbmokin\/nlp-eda-bag-of-words-tf-idf-glove-bert\n* https:\/\/www.kaggle.com\/shahules\/basic-eda-cleaning-and-glove\n* https:\/\/www.kaggle.com\/arthurtok\/spooky-nlp-and-topic-modelling-tutorial\n* https:\/\/www.kaggle.com\/itratrahman\/nlp-tutorial-using-python\n* https:\/\/www.kaggle.com\/marcovasquez\/basic-nlp-with-tensorflow-and-wordcloud\n* https:\/\/www.kaggle.com\/akensert\/bert-base-tf2-0-minimalistic\n* https:\/\/www.kaggle.com\/khoongweihao\/bert-base-tf2-0-minimalistic-iii\n* https:\/\/www.kaggle.com\/vbmokin\/disaster-nlp-keras-bert-using-tfhub-tuning\n* https:\/\/www.kaggle.com\/user123454321\/bert-starter-inference\n* https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub\n* https:\/\/www.kaggle.com\/wrrosa\/keras-bert-using-tfhub-modified-train-data\n* https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\n\nand other resources:\n* https:\/\/github.com\/hundredblocks\/concrete_NLP_tutorial\/blob\/master\/NLP_notebook.ipynb\n* https:\/\/tfhub.dev\/s?q=bert","358dc08b":"## 7. Bag of Words Counts <a class=\"anchor\" id=\"7\"><\/a>\n\n[Back to Table of Contents](#0.1)","70c0ab15":"## Build and train BERT model","d5ffd4bb":"### Commit 23\n* Dropout(0.2)\n* Adam(lr=2e-5)\n* validation_split = 0.2,\n* epochs = 5,\n* batch_size = 32\n\n**LB = 0.83435**","efb8bd8b":"## 1.1. Commit now <a class=\"anchor\" id=\"1.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","2f9da4e8":"### Commit 29\n* Dropout(0.2)\n* Adam(lr=1e-5)\n* validation_split = 0.2,\n* epochs = 4,\n* batch_size = 32\n\n**LB = 0.83742**","d5e20fd9":"## 9. GloVe <a class=\"anchor\" id=\"9\"><\/a>\n\n[Back to Table of Contents](#0.1)","f314f010":"### Commit 30\n* Dropout(0.1)\n* Adam(lr=1e-5)\n* validation_split = 0.2,\n* epochs = 4,\n* batch_size = 32\n\n**LB = 0.83333**","8c977f6b":"The distribution of both seems to be almost same.120 t0 140 characters in a tweet are the most common among both.","a19c7a0c":"###  Average word length in a tweet","da2e31a1":"Now,we will analyze tweets with class 1.","7af360e9":"Thanks to https:\/\/www.kaggle.com\/arthurtok\/spooky-nlp-and-topic-modelling-tutorial","e5b9a8a3":"### Removing urls","595177f5":"Thanks to https:\/\/www.kaggle.com\/marcovasquez\/basic-nlp-with-tensorflow-and-wordcloud","afc7a9a6":"I hope you find this kernel useful and enjoyable.","6e4e4fa9":"## 8. TF IDF <a class=\"anchor\" id=\"8\"><\/a>\n\n[Back to Table of Contents](#0.1)","9d07c16a":"Here we will use GloVe pretrained corpus model to represent our words. It is available in 3 varieties : 50D, 100D and 200 Dimentional. We will try 100D here.","13c784d4":"Before we begin with anything else, let's check the class distribution.","9270e9e0":"we will do a bigram (n=2) analysis over the tweets. Let's check the most common bigrams in tweets.","c23574b7":"<a class=\"anchor\" id=\"0\"><\/a>\n# [Real or Not? NLP with Disaster Tweets](https:\/\/www.kaggle.com\/c\/nlp-getting-started)\n\n# NLP:\n* EDA (with WordCloud) \n* Bag of Words \n* TF IDF\n* GloVe\n* BERT with TFHub and with Submission\n* PCA visualization for the main models\n* Showing Confusion Matrices for BERT and GloVe\n\n","a03728e1":"## 4. EDA <a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","c4fb251c":"### Commit 73\n* without Dropout\n* Adam(lr=6e-6)\n* validation_split = 0.25\n* epochs = 3\n* batch_size = 16\n* target_corrected = False\n\n**LB = 0.83640**","8bfcfc35":"### Commit 45\n* without Dropout\n* Adam(lr=2e-6)\n* validation_split = 0.2,\n* epochs = 4,\n* batch_size = 32\n\n**LB = 0.82719**","db98e113":"### Commit 78\n* random_state_split = 21\n* without Dropout\n* Adam(lr=6e-6)\n* validation_split = 0.2\n* epochs = 3\n* batch_size = 16\n* target_corrected = False\n\n**LB = 0.84355**","d449fdf4":"### Commit 28\n* Dropout(0.2)\n* Adam(lr=5e-6)\n* validation_split = 0.2,\n* epochs = 4,\n* batch_size = 32\n\n**LB = 0.82924**","d88866c2":"### N-gram analysis","89b44cb3":"## Download data","292a68cd":"### Commit 33\n* Dropout(0.2)\n* Adam(lr=2e-5)\n* validation_split = 0.3,\n* epochs = 4,\n* batch_size = 32\n\n**LB = 0.83128**","40cee4c9":"## 1.3. Previous commits: epochs = 3 <a class=\"anchor\" id=\"1.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","ef43c5f3":"### Analyzing punctuations","262df122":"## 10. BERT using TFHub <a class=\"anchor\" id=\"10\"><\/a>\n\n[Back to Table of Contents](#0.1)","b7da6ee6":"### Commit 60 (The best!)\n* without Dropout\n* Adam(lr=6e-6)\n* validation_split = 0.2\n* epochs = 3\n* batch_size = 16\n* target_corrected = False\n\n**LB = 0.85378**","1760dc01":"These embeddings don't look very cleanly separated. Let's see if we can still fit a useful model on them.","bb8b9578":"## 1. My upgrade BERT model <a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","64a260aa":"### Commit 46\n* without Dropout\n* Adam(lr=5e-6)\n* validation_split = 0.2,\n* epochs = 4,\n* batch_size = 32\n* target_corrected = True\n* target_big_corrected = True\n\n**LB = 0.83333**","ada32324":"[Go to Top](#0)","ea826e0b":"### Only successful commits :","22f4fe5b":"### Number of characters in tweets","32adfb20":"### Commit 15\n* Dropout(0.2)\n* Adam(lr=2e-5)\n* validation_split = 0.2,\n* epochs = 4,\n* batch_size = 32\n\n**LB = 0.83742**","1b3f194a":"## 1.6. Previous commits: with training tweets correction <a class=\"anchor\" id=\"1.6\"><\/a>\n\n[Back to Table of Contents](#0.1)","35020636":"### Commit 26\n* Dropout(0.2)\n* Adam(lr=4e-5)\n* validation_split = 0.2,\n* epochs = 4,\n* batch_size = 32\n\n**LB = 0.82617**","6e4fb6d4":"First we  will analyze tweets with class 0.","dce59625":"## 3. Download data <a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","d4b6a685":"Now,we will move on to class 0.","5c452c71":"### Commit 31\n* Dropout(0.2)\n* Adam(lr=1e-5)\n* validation_split = 0.15,\n* epochs = 4,\n* batch_size = 32\n\n**LB = 0.79856**","c8d3254b":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [My upgrade BERT model](#1)\n    -  [Commit now](#1.1)\n    -  [Previous commits: Dropout = 0.1 or 0.3](#1.2)\n    -  [Previous commits: epochs = 3](#1.3)\n    -  [Previous commits: epochs = 4](#1.4)\n    -  [Previous commits: epochs = 5](#1.5)\n    -  [Previous commits: with training tweets correction](#1.6)\n    -  [Previous commits: parameters and LB scores](#1.7)    \n1. [Import libraries](#2)\n1. [Download data](#3)\n1. [EDA](#4)\n1. [Data Cleaning](#5)\n1. [WordCloud](#6)\n1. [Bag of Words Counts](#7)\n1. [TF IDF](#8)\n1. [GloVe](#9)\n1. [BERT using TFHub](#10)\n   - [Submission by BERT](#10.1)\n1. [Showing Confusion Matrices](#11)","e5174ba2":"## 1.5. Previous commits: epochs = 5 <a class=\"anchor\" id=\"1.5\"><\/a>\n\n[Back to Table of Contents](#0.1)","c229a7c7":"### Common words","21a6bbac":"Thanks to https:\/\/www.kaggle.com\/shahules\/basic-eda-cleaning-and-glove","54e44d61":"### Removing Emojis","d07f4f3c":"### Commit 18\n* Dropout(0.2)\n* Adam(lr=2e-5)\n* validation_split = 0.2,\n* epochs = 3,\n* batch_size = 16\n\n\n\n**LB = 0.83537**","8316485c":"First let's check tweets indicating real disaster.","011787ad":"* Commit 60\n* without Dropout\/lr=6e-6\/val=0.2\/epochs=3\/batch=16\/target_corrected=False\n* LB = **0.85378**\n* Commit 43\n* without Dropout\/lr=5e-6\/val=0.2\/epochs=4\/batch=32\/target_corrected=False\n* LB = 0.83844\n* 15\n* Dropout=0.2\/lr=2e-5\/val=0.2\/epochs=4\/batch=32\/target_corrected=False\n* LB = 0.83742\n* 29\n* Dropout=0.2\/lr=1e-5\/val=0.2\/epochs=4\/batch=32\/target_corrected=False\n* LB = 0.83742\n* 62\n* without Dropout\/lr=5.9e-6\/val=0.2\/epochs=3\/batch=16\/target_corrected=False\n* LB = 0.83537\n* 49\n* without Dropout\/lr=5e-6\/val=0.2\/epochs=3\/batch=16\/target_corrected=False\n* LB = 0.83537\n* 18\n* Dropout=0.2\/lr=2e-5\/val=0.2\/epochs=3\/batch=16\/target_corrected=True\n* LB = 0.83537\n* 25\n* Dropout=0.2\/lr=3e-5\/val=0.2\/epochs=4\/batch=32\/target_corrected=False\n* LB = 0.83537\n* 37\n* without Dropout\/lr=2e-5\/val=0.2\/epochs=4\/batch=24\/target_corrected=False\n* LB = 0.83435\n* 23\n* Dropout=0.2\/lr=2e-5\/val=0.2\/epochs=5\/batch=32\/target_corrected=False\n* LB = 0.83435\n* 46\n* without Dropout\/lr=5e-6\/val=0.2\/epochs=4\/batch=32\/target_corrected=True\/target_big_corrected = True\n* LB = 0.83333\n* 30\n* Dropout=0.1\/lr=1e-5\/val=0.2\/epochs=4\/batch=32\/target_corrected=False\n* LB = 0.83333\n* 51\n* without Dropout\/lr=3e-6\/val=0.2\/epochs=3\/batch=16\/target_corrected=True\n* LB = 0.83231\n* 46\n* without Dropout\/lr=5e-6\/val=0.2\/epochs=4\/batch=16\/target_corrected=False\n* LB = 0.83231\n* 33\n* Dropout=0.2\/lr=2e-5\/val=0.3\/epochs=4\/batch=32\/target_corrected=False\n* LB = 0.83128\n* 14\n* Dropout=0.2\/lr=2e-5\/val=0.2\/epochs=3\/batch=32\/target_corrected=True\n* LB = 0.83128\n* 55\n* without Dropout\/lr=5e-6\/val=0.3\/epochs=3\/batch=16\/target_corrected=False\n* LB = 0.82924\n* 28\n* Dropout=0.2\/lr=5e-6\/val=0.2\/epochs=4\/batch=32\/target_corrected=False\n* LB = 0.82924\n* 26\n* Dropout=0.2\/lr=4e-5\/val=0.2\/epochs=4\/batch=32\/target_corrected=False\n* LB = 0.82617\n* 45\n* without Dropout\/lr=2e-6\/val=0.2\/epochs=4\/batch=32\/target_corrected=False\n* LB = 0.82719\n* 20\n* without Dropout\/lr=1e-5\/val=0.2\/epochs=3\/batch=16\/target_corrected=True\n* LB = 0.82413\n* 42\n* without Dropout\/lr=1e-5\/val=0.2\/epochs=5\/batch=32\/target_corrected=False\n* LB = 0.83231\n* 32\n* Dropout=0.2\/lr=2e-5\/val=0.2\/epochs=4\/batch=32\/target_corrected=True\n* LB = 0.82004\n* 37\n* without Dropout\/lr=2e-5\/val=0.2\/epochs=3\/batch=32\/target_corrected=False\n* LB = 0.81390\n* 35\n* Dropout=0.15\/lr=2e-5\/val=0.2\/epochs=4\/batch=32\/target_corrected=False\n* LB = 0.81390\n* 40\n* without Dropout\/lr=2e-5\/val=0.2\/epochs=5\/batch=32\/target_corrected=False\n* LB = 0.81186\n* 22\n* Dropout=0.2\/lr=1.1e-5\/val=0.2\/epochs=3\/batch=16\/target_corrected=True\n* LB = 0.80879\n* 24\n* Dropout=0.3\/lr=2e-5\/val=0.2\/epochs=4\/batch=32\/target_corrected=False\n* LB = 0.80470\n* 31\n* Dropout=0.2\/lr=1e-5\/val=0.15\/epochs=4\/batch=32\/target_corrected=False\n* LB = 0.79856\n* 27\n* Dropout=0.2\/lr=5e-4\/val=0.2\/epochs=4\/batch=32\/target_corrected=False\n* LB = 0.57055","e1559e93":"### Number of words in a tweet","26bdf3ad":"### Real Disaster","6c966b2b":"Your comments and feedback are most welcome.","47f87b28":"### Commit 41\n* without Dropout\n* Adam(lr=1e-5)\n* validation_split = 0.2,\n* epochs = 5,\n* batch_size = 32\n\n**LB = 0.83231**","11b5e477":"### Commit 48\n* without Dropout\n* Adam(lr=5e-6)\n* validation_split = 0.2,\n* epochs = 4,\n* batch_size = 16\n* target_corrected = False\n* target_big_corrected = False\n\n**LB = 0.83231**","28fe22b3":"### Commit 74\n* without Dropout\n* Adam(lr=6e-6)\n* validation_split = 0.15\n* epochs = 3\n* batch_size = 16\n* target_corrected = False\n\n**LB = 0.83946**","0de50984":"### Commit 35\n* Dropout(0.15)\n* Adam(lr=2e-5)\n* validation_split = 0.2,\n* epochs = 4,\n* batch_size = 32\n\n**LB = 0.81390**"}}