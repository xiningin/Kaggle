{"cell_type":{"a335ee7b":"code","6d155b5b":"code","2201b14e":"code","cecd07c3":"code","8d024ba3":"code","dd8a2c0d":"code","f7a47bb4":"code","41449591":"code","1c70d1ff":"code","ad84255a":"code","d1eef53c":"code","b2da1585":"code","aecca2cb":"code","b67898b2":"code","e994274d":"code","fcbbab1b":"code","6a1eb8bb":"code","605f42b2":"code","d559534d":"code","253547ea":"code","53851293":"code","807f8656":"code","0d2496d2":"code","b3932a11":"code","5a9df400":"code","9e0b2df6":"code","5ce81354":"code","99ed0f63":"code","8bf015e2":"code","c5a3aec3":"code","d0be4e39":"code","4b26cfdc":"code","4bb26084":"code","b05d8004":"code","71b7a61d":"code","22d2dd5d":"code","3bfc323b":"code","81298156":"code","1f7a3007":"code","2d85aad3":"code","69ad8ae1":"code","3dea3de5":"code","e65e90d4":"code","0fbcabc7":"code","566167b7":"code","483a8d74":"code","4623c3e9":"code","7d63050e":"code","f1507499":"code","8aef2f51":"code","2eab78c4":"code","c2a4c5f6":"code","498bff6c":"code","738b8c06":"code","d9bbc3c3":"code","060714ab":"code","c4ff7702":"code","78e272bf":"code","aa91cb0d":"code","c971c080":"code","36185a02":"code","cf34946e":"code","daab62c0":"code","3affa136":"code","2ba7b52e":"code","c56ebf35":"code","42c61c48":"code","7bede68b":"code","bbd8dd0f":"code","21c26a57":"code","c4362bca":"code","b1770338":"code","8651ef74":"code","bca42e86":"code","67fa1d47":"code","718929d9":"code","77b67c07":"markdown","3ffec3c3":"markdown","1d60c373":"markdown","c969bb10":"markdown","4d641fca":"markdown","8502b6ba":"markdown","1516e95a":"markdown","9387c6ee":"markdown","debe3900":"markdown","826c1685":"markdown","f668c31c":"markdown","0b6b7f74":"markdown","54e7cf80":"markdown","4f9250b7":"markdown","70c72bb6":"markdown","0569fb3c":"markdown","e9b5b0f9":"markdown","5370449b":"markdown","3f973b2a":"markdown","bd2986f3":"markdown","cdfd41d2":"markdown","3ca5f37c":"markdown","c9e05c77":"markdown","94e94e75":"markdown","613c8ee6":"markdown","28c6666d":"markdown","5717a26d":"markdown","9ff6d69c":"markdown","8824e30c":"markdown","fcb35b03":"markdown","72aae258":"markdown","513df683":"markdown","9b140d60":"markdown","54282862":"markdown","1061d63d":"markdown","a3d3ac72":"markdown","795fdb47":"markdown","c1a312d5":"markdown","f3d45038":"markdown","5bc6f944":"markdown","6bfe9036":"markdown","48f5c147":"markdown","a9101573":"markdown","1ef79b74":"markdown","1030f584":"markdown","582c5f37":"markdown","8805189d":"markdown"},"source":{"a335ee7b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn')\nsns.set(font_scale = 2.5)\n\nimport missingno as msno\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n%matplotlib inline","6d155b5b":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')","2201b14e":"df_train.head()","cecd07c3":"df_train.describe()","8d024ba3":"df_test.describe()","dd8a2c0d":"df_train.isnull().sum()","f7a47bb4":"for col in df_train.columns:\n    msg = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_train[col].isnull().sum() \/ df_train[col].shape[0]))\n    print(msg)","41449591":"df_test.isnull().sum()","1c70d1ff":"for col in df_test.columns:\n    msg = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_test[col].isnull().sum() \/ df_test[col].shape[0]))\n    print(msg)","ad84255a":"msno.matrix(df=df_train.iloc[:, :], figsize=(8, 8), color=(0.8, 0.5, 0.2))","d1eef53c":"msno.bar(df=df_train.iloc[:, :], figsize = (8, 8), color=(0.8, 0.5, 0.2))","b2da1585":"msno.bar(df=df_test.iloc[:,:], figsize=(8,8), color=(0.8, 0.5, 0.2))","aecca2cb":"f, ax = plt.subplots(1, 2, figsize=(18, 8))\n\ndf_train['Survived'].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.1f%%', ax=ax[0], shadow=True)\nax[0].set_title('Pie plot - Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived', data=df_train, ax=ax[1])\nax[1].set_title('Count plot - Survived')\nplt.show()","b67898b2":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).count()","e994274d":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).sum()","fcbbab1b":"pd.crosstab(df_train['Pclass'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')","6a1eb8bb":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar()","605f42b2":"y_position = 1.02\nf, ax = plt.subplots(1, 2, figsize=(18, 8))\ndf_train['Pclass'].value_counts().plot.bar(color=['#CD7E32', '#FFDF00', '#D3D3D3'], ax=ax[0])\nax[0].set_title('Number of Passengers By Pclass', y=y_position)\nax[0].set_ylabel('Count')\nsns.countplot('Pclass', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Pclass: Survived vs Dead', y=y_position)\nplt.show()","d559534d":"f, ax = plt.subplots(1, 2, figsize=(18, 8))\ndf_train[['Sex', 'Survived']].groupby(['Sex'], as_index=True).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\nsns.countplot('Sex', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Sex: Survived vs Dead')\nplt.show()","253547ea":"df_train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","53851293":"pd.crosstab(df_train['Sex'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')","807f8656":"sns.factorplot('Pclass', 'Survived', hue='Sex', data=df_train, size=6, aspect=1.5)","0d2496d2":"sns.factorplot(x='Sex', y='Survived', col='Pclass', data=df_train, satureation=.5, size=9, aspect=1)","b3932a11":"print('Max Age: {:.1f} Years'.format(df_train['Age'].max()))\nprint('Min Age: {:.1f} Years'.format(df_train['Age'].min()))\nprint('Mean Age: {:.1f} Years'.format(df_train['Age'].mean()))","5a9df400":"fig, ax = plt.subplots(1, 1, figsize=(9,5))\nsns.kdeplot(df_train[df_train['Survived'] == 1]['Age'], ax=ax)\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Age'], ax=ax)\nplt.legend(['Survived == 1', 'Non-Survived == 0'])\nplt.show()","9e0b2df6":"plt.figure(figsize=(8,6))\ndf_train['Age'][df_train['Pclass']==1].plot(kind='kde')\ndf_train['Age'][df_train['Pclass']==2].plot(kind='kde')\ndf_train['Age'][df_train['Pclass']==3].plot(kind='kde')\nplt.xlabel('Age')\nplt.title('Age Distribution by Pclass')\nplt.legend(['1st Class', '2nd Class', '3rd Class'])\nplt.show()","5ce81354":"cummulate_survival_ratio = []\nfor i in range(1, 80):\n    cummulate_survival_ratio.append(df_train[df_train['Age']<i]['Survived'].sum()\/len(df_train[df_train['Age']<i]['Survived']))\nplt.figure(figsize=(7,7))\nplt.plot(cummulate_survival_ratio)\nplt.title('Survival rate change depending on range of Age', y=1.02)\nplt.ylabel('Survial rate')\nplt.xlabel('Range of Age(0~x)')\nplt.show()","99ed0f63":"f, ax = plt.subplots(1,2, figsize=(18, 8))\nsns.violinplot(\"Pclass\", \"Age\", hue=\"Survived\", data=df_train, scale='count', split=True, ax=ax[0])\nax[0].legend(title='Survived', loc='rightupper')\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0, 110, 10))\nsns.violinplot(\"Sex\", \"Age\", hue=\"Survived\", data=df_train, scale='count', split=True, ax=ax[1])\nax[1].legend(title='Survived', loc='rightupper')\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0, 110, 10))\nplt.show()","8bf015e2":"f, ax = plt.subplots(1,1, figsize=(7,7))\ndf_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=True).mean().\\\nsort_values(by='Survived', ascending=False).plot.bar(ax=ax)","c5a3aec3":"f, ax = plt.subplots(2,2, figsize=(20,15))\nsns.countplot('Embarked', data=df_train, ax=ax[0, 0])\nax[0,0].set_title('(1) No. Of Passengers Boarded')\nsns.countplot('Embarked', hue='Sex', data=df_train, ax=ax[0,1])\nax[0,1].set_title('Male-Females Split for Embarked')\nsns.countplot('Embarked', hue='Survived', data=df_train, ax=ax[1,0])\nax[1,0].set_title('Embarked vs Survived')\nsns.countplot('Embarked', hue='Pclass', data=df_train, ax=ax[1,1])\nax[1,1].set_title('Embarked vs Pclass')\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","d0be4e39":"df_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1\ndf_test['FamilySize'] = df_test['SibSp'] + df_test['Parch'] + 1","4b26cfdc":"print('Maximum size of Family: ', df_train['FamilySize'].max())\nprint('Minimum size of Family: ', df_train['FamilySize'].min())","4bb26084":"f, ax = plt.subplots(1, 3, figsize=(40, 10))\nsns.countplot('FamilySize', data=df_train, ax=ax[0])\nax[0].set_title('(1) No. Of Passengers Boarded', y=1.02)\nsns.countplot('FamilySize', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('(2) Survived countplot depending on FamilySize', y=1.02)\ndf_train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=True).mean().\\\nsort_values(by='Survived', ascending=False).plot.bar(ax=ax[2])\nax[2].set_title('(3) Survived rate depending on FamilySize', y=1.02)\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","b05d8004":"fig, ax = plt.subplots(1, 1, figsize=(8,8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness: {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","71b7a61d":"df_test.loc[df_test.Fare.isnull(), 'Fare'] = df_test['Fare'].mean()","22d2dd5d":"df_train['Fare'] = df_train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\ndf_test['Fare'] = df_test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)","3bfc323b":"fig, ax = plt.subplots(1, 1, figsize=(8,8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness: {:.2f}'.format(df_train['Fare'].skew(), ax=ax))\ng = g.legend(loc='best')","81298156":"df_train['Ticket'].value_counts()","1f7a3007":"df_train['Initial'] = df_train.Name.str.extract('([A-Za-z]+)\\.')\ndf_test['Initial'] = df_test.Name.str.extract('([A-Za-z]+)\\.')","2d85aad3":"pd.crosstab(df_train['Initial'], df_train['Sex']).T.style.background_gradient(cmap='summer_r')","69ad8ae1":"df_train['Initial'].replace(['Mlle', 'Mme', 'Ms', 'Dr', 'Major', 'Lady', 'Countess', 'Jonkheer', 'Col', 'Rev', 'Capt', 'Sir', 'Don', 'Dona'], \\\n                            ['Miss', 'Miss', 'Miss', 'Mr', 'Mr', 'Mrs', 'Mrs', 'Other', 'Other', 'Other', 'Mr', 'Mr', 'Mr', 'Mr'], inplace=True)\ndf_test['Initial'].replace(['Mlle', 'Mme', 'Ms', 'Dr', 'Major', 'Lady', 'Countess', 'Jonkheer', 'Col', 'Rev', 'Capt', 'Sir', 'Don', 'Dona'], \\\n                            ['Miss', 'Miss', 'Miss', 'Mr', 'Mr', 'Mrs', 'Mrs', 'Other', 'Other', 'Other', 'Mr', 'Mr', 'Mr', 'Mr'], inplace=True)","3dea3de5":"df_train.groupby('Initial').mean()","e65e90d4":"df_train.groupby('Initial')['Survived'].mean().plot.bar()","0fbcabc7":"df_train.groupby('Initial').mean()","566167b7":"df_train.loc[(df_train.Age.isnull()) & (df_train.Initial == 'Mr'), 'Age'] = 33\ndf_train.loc[(df_train.Age.isnull()) & (df_train.Initial == 'Mrs'), 'Age'] = 36\ndf_train.loc[(df_train.Age.isnull()) & (df_train.Initial == 'Master'), 'Age'] = 5\ndf_train.loc[(df_train.Age.isnull()) & (df_train.Initial == 'Miss'), 'Age'] = 22\ndf_train.loc[(df_train.Age.isnull()) & (df_train.Initial == 'Other'), 'Age'] = 46\n\ndf_test.loc[(df_test.Age.isnull()) & (df_test.Initial == 'Mr'), 'Age'] = 33\ndf_test.loc[(df_test.Age.isnull()) & (df_test.Initial == 'Mrs'), 'Age'] = 36\ndf_test.loc[(df_test.Age.isnull()) & (df_test.Initial == 'Master'), 'Age'] = 5\ndf_test.loc[(df_test.Age.isnull()) & (df_test.Initial == 'Miss'), 'Age'] = 22\ndf_test.loc[(df_test.Age.isnull()) & (df_test.Initial == 'Other'), 'Age'] = 46","483a8d74":"df_train['Embarked'].fillna('S', inplace=True)","4623c3e9":"df_train['Age_cat'] = 0\ndf_train.loc[df_train['Age'] < 10, 'Age_cat'] = 0\ndf_train.loc[(10 <= df_train['Age']) & (df_train['Age'] < 20), 'Age_cat'] = 1\ndf_train.loc[(20 <= df_train['Age']) & (df_train['Age'] < 30), 'Age_cat'] = 2\ndf_train.loc[(30 <= df_train['Age']) & (df_train['Age'] < 40), 'Age_cat'] = 3\ndf_train.loc[(40 <= df_train['Age']) & (df_train['Age'] < 50), 'Age_cat'] = 4\ndf_train.loc[(50 <= df_train['Age']) & (df_train['Age'] < 60), 'Age_cat'] = 5\ndf_train.loc[(60 <= df_train['Age']) & (df_train['Age'] < 70), 'Age_cat'] = 6\ndf_train.loc[70 <= df_train['Age'], 'Age_cat'] = 7\n\ndf_test['Age_cat'] = 0\ndf_test.loc[df_train['Age'] < 10, 'Age_cat'] = 0\ndf_test.loc[(10 <= df_test['Age']) & (df_test['Age'] < 20), 'Age_cat'] = 1\ndf_test.loc[(20 <= df_test['Age']) & (df_test['Age'] < 30), 'Age_cat'] = 2\ndf_test.loc[(30 <= df_test['Age']) & (df_test['Age'] < 40), 'Age_cat'] = 3\ndf_test.loc[(40 <= df_test['Age']) & (df_test['Age'] < 50), 'Age_cat'] = 4\ndf_test.loc[(50 <= df_test['Age']) & (df_test['Age'] < 60), 'Age_cat'] = 5\ndf_test.loc[(60 <= df_test['Age']) & (df_test['Age'] < 70), 'Age_cat'] = 6\ndf_test.loc[70 <= df_test['Age'], 'Age_cat'] = 7","7d63050e":"def category_age(x):\n    if x < 10:\n        return 0\n    elif x < 20:\n        return 1\n    elif x < 30:\n        return 2\n    elif x < 40:\n        return 3\n    elif x < 50:\n        return 4\n    elif x < 60:\n        return 5\n    elif x < 70:\n        return 6\n    else:\n        return 7\n    \ndf_train['Age_cat_2'] = df_train['Age'].apply(category_age)\n    ","f1507499":"print((df_train['Age_cat'] == df_train['Age_cat_2']).all())","8aef2f51":"df_train.drop(['Age', 'Age_cat_2'], axis=1, inplace=True)\ndf_test.drop(['Age'], axis=1, inplace=True)","2eab78c4":"df_train['Initial'] = df_train['Initial'].map({'Master':0, 'Miss': 1, 'Mr':2, 'Mrs':3, 'Other':4})\ndf_test['Initial'] = df_test['Initial'].map({'Master':0, 'Miss': 1, 'Mr':2, 'Mrs':3, 'Other':4})   ","c2a4c5f6":"df_train['Embarked'].unique()","498bff6c":"df_train['Embarked'].value_counts()","738b8c06":"df_train['Embarked'] = df_train['Embarked'].map({'C':0, 'Q':1, 'S':2})\ndf_test['Embarked'] = df_test['Embarked'].map({'C':0, 'Q':1, 'S':2})","d9bbc3c3":"df_train['Embarked'].isnull().any()","060714ab":"df_test['Embarked'].isnull().any()","c4ff7702":"df_train['Sex'] = df_train['Sex'].map({'female':0, 'male':1})\ndf_test['Sex'] = df_test['Sex'].map({'female':0, 'male':1})","78e272bf":"heatmap_data = df_train[['Survived', 'Pclass', 'Sex', 'Fare', 'Embarked', 'FamilySize', 'Initial', 'Age_cat']]\n\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(14, 12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(heatmap_data.astype(float).corr(), linewidths=0.1, vmax=1.0, square=True, cmap=colormap, \\\n           linecolor='white', annot=True, annot_kws={'size':16})\ndel heatmap_data","aa91cb0d":"df_train = pd.get_dummies(df_train, columns=['Initial'], prefix='Initial')\ndf_test = pd.get_dummies(df_test, columns=['Initial'], prefix='Initial')","c971c080":"df_train.head()","36185a02":"df_train = pd.get_dummies(df_train, columns=['Embarked'], prefix = 'Embarked')\ndf_test = pd.get_dummies(df_test, columns=['Embarked'], prefix='Embarked')","cf34946e":"df_train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)\ndf_test.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)","daab62c0":"df_train.head()","3affa136":"df_test.head()","2ba7b52e":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split","c56ebf35":"X_train = df_train.drop('Survived', axis=1).values\ntarget_label = df_train['Survived'].values\nX_test = df_test.values","42c61c48":"X_tr, X_vld, y_tr, y_vld = train_test_split(X_train, target_label, test_size=0.3, random_state=2018)","7bede68b":"model = RandomForestClassifier()\nmodel.fit(X_tr, y_tr)\nprediction = model.predict(X_vld)","bbd8dd0f":"print('Accuracy: {:.2f}%'.format(100 * metrics.accuracy_score(prediction, y_vld)))","21c26a57":"from pandas import Series\nfeature_importance = model.feature_importances_\nSeries_fet_imp = Series(feature_importance, index=df_test.columns)","c4362bca":"plt.figure(figsize=(8,8))\nSeries_fet_imp.sort_values(ascending=True).plot.barh()\nplt.xlabel('Feature importance')\nplt.ylabel('Feature')\nplt.show()","b1770338":"submission = pd.read_csv('..\/input\/gender_submission.csv')","8651ef74":"submission.head()","bca42e86":"prediction = model.predict(X_test)\nsubmission['Survived'] = prediction","67fa1d47":"prediction","718929d9":"submission.to_csv('.\/my_first_submission.csv', index=False)","77b67c07":"## 4.2 Model Generation and Prediction","3ffec3c3":"- Histogram of Age by Survived","1d60c373":"- The younger was the more survived.","c969bb10":"## 2.2 Sex","4d641fca":"## 3.2 Change Age (continuous to categorical)","8502b6ba":"- Check correlations bewteen features","1516e95a":"- Age distribution by Pclass","9387c6ee":"## 4.3 Feature Importance","debe3900":"- In the Train set, features of Age, Cabin and Embarked have null data. ","826c1685":"## 2.10 Ticket","f668c31c":"## 4.1 Preparation - Split dataset into train, valid, test set","0b6b7f74":"## 3.1 Fill Null\n\n### 3.1.1 Fill Null in Age using title","54e7cf80":"## 3.3 Change Initial, Embarked and Sex (string to numerical)","4f9250b7":"- Let's check Survived with two variables, Sex and Pclass. ","70c72bb6":"- There are some correlations between Sex, Pclass, Fare and Survived.\n- There is no feature having strong a correlation each other. ","0569fb3c":"## 2.3 Both Sex and Pclass","e9b5b0f9":"- How will the rate of survived change as the scope of Age changes?","5370449b":"- The feartures in the issue that I try to deal with are Pclass, Age, SibSp, Parch, Fare, and the target label is Survived. ","3f973b2a":"## 2.4 Age","bd2986f3":"## 2.6 Embarked","cdfd41d2":"## 1.2 Check Target Label","3ca5f37c":"## 2.5 Pclass, Sex, Age","c9e05c77":"# 1. Data Check","94e94e75":"- Sadly, many people were dead and only 38.4% survived.\n- The distribution of target label seems to be balanced. ","613c8ee6":"- In the Test set, features of Age, Fare and Cabin have null data. ","28c6666d":"## 3.4 One-hot encoding on Initial and Embarked","5717a26d":"## 2.9 Cabin","9ff6d69c":"- Let's check null data with using MANO library.","8824e30c":"## 4.4 Prediction on Test Set","fcb35b03":"- It seems that Pclass had a huge impact on Survived and such Pclass may be used as a feature when modeling. ","72aae258":"# 4. Building Machine Learning Model and Prediction","513df683":"- In every Pclass category, the survival rate of the female group is higher than those of the male group. \n- Further, regardless of Sex, the higer Pclass has the more Survied.","9b140d60":"# 2. Exploratory Data Analysis","54282862":"- Which distribution the target label has needs to be checked. \n\n- In case of binary clssification, the model evaluation method depends on one and zero distributions","1061d63d":"- The older has the higher class.","a3d3ac72":"- Like Pclass, Sex musb be an important feature. ","795fdb47":"## 2.8 Fare","c1a312d5":"## 2.1 Pclass","f3d45038":"# 3. Feature Engineering","5bc6f944":"- As the rate of NaNs in Cabin is around 80%, Cabin is excluded. ","6bfe9036":"- The younger has the higher survival rate.","48f5c147":"- As you know, the female group had a higher survival rate. ","a9101573":"- The higher Pclass survied the more.","1ef79b74":"### 3.1.2 Fill Null in Embarked","1030f584":"## 3.5 Drop Columns","582c5f37":"## 1.1 Check Null Data","8805189d":"## 2.7 Family - SibSp + Parch"}}