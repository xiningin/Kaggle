{"cell_type":{"57f13c68":"code","a042e372":"code","675c6c30":"code","84465d3a":"code","b54d9cd0":"code","a94b0e59":"code","52be913f":"code","54ab6dae":"code","8843a6c4":"code","d937e2ce":"code","1c87156e":"code","24729e9e":"code","cc7bc72e":"code","05568bcc":"code","1817519a":"code","064b625c":"code","133632aa":"code","94dec7c6":"code","7aaed167":"code","2b4c08a4":"code","73302fe8":"code","073ed2ab":"code","5aed1af1":"code","723cf936":"code","b56c1ebd":"code","91502188":"code","b6bafc90":"code","52768ea9":"code","159cd2f2":"code","f4493d22":"code","796b20f5":"code","d3e95ce3":"code","6628846e":"code","00d9bba1":"code","ec2d7a32":"code","05d49a90":"code","f0a2a778":"code","6aefb958":"code","a637a07d":"code","ace4c63c":"markdown","b2e49c7b":"markdown","ef383096":"markdown","b9560275":"markdown","c512a94d":"markdown","177b7382":"markdown","bb68e1c5":"markdown","c18e44e6":"markdown","41896755":"markdown","5779e5ea":"markdown","f9135f8f":"markdown"},"source":{"57f13c68":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a042e372":"import matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [20,8]\nplt.rcParams['font.size'] =14\nimport seaborn as sns","675c6c30":"import warnings\nwarnings.simplefilter('ignore')","84465d3a":"df = pd.read_csv('..\/input\/vehicle-dataset-from-cardekho\/CAR DETAILS FROM CAR DEKHO.csv')\ndf.head()","b54d9cd0":"trans_count=df['transmission'].count()\n#df['transmission'].value_counts().plot.pie(autopct=\"%.1f%%\")\ndf['transmission'].value_counts().plot.pie(autopct=lambda p:f'{p:.2f}%, {p*(trans_count)\/100:.0f} cars',\n                                           explode=[0,0.2],startangle=90,pctdistance=0.5,textprops={'color':\"w\"})","a94b0e59":"seller_count=df['seller_type'].count()\ndf['seller_type'].value_counts().plot.pie(autopct=lambda p:f'{p:.2f}%, {p*(seller_count)\/100:.0f} cars',\n                                           explode=[0,0,0.3],startangle=90,pctdistance=0.5,textprops={'color':\"w\"})","52be913f":"df['fuel'].value_counts()","54ab6dae":"fuel_count=df['fuel'].count()\ndf['fuel'].value_counts().plot.pie(autopct=lambda p:f'{p:.2f}%, {p*(fuel_count)\/100:.0f} cars',\n                                           explode=[0,0,1.8,1.3,3],pctdistance=0.5,textprops={'color':\"w\"})","8843a6c4":"sns.displot(data=df,x='year')","d937e2ce":"df.dtypes","1c87156e":"categorical_cols=df.select_dtypes(['object'])\ncategorical_cols.head()","24729e9e":"numerical_cols=df.select_dtypes(['int64'])\nnumerical_cols.head()","cc7bc72e":"# df['fuel'].astype('category')","05568bcc":"[df[x].unique() for x in categorical_cols[1:] ] #excluding car name which is first element","1817519a":"# we don't need car name so i am gonna drop it right away\ndf.drop(['name'], inplace=True, axis=1)","064b625c":"df.head()","133632aa":"max=df.year.max()\nmin=df.year.min()\ndisplay(min,max,max-min)","94dec7c6":"# car's age\ndf['car_age'] = max - df.year\ndf.head()","7aaed167":"# Dropping year column, we dont need it now\ndf.drop(['year'], inplace=True, axis=1)","2b4c08a4":"df = pd.get_dummies(df, drop_first=True)# Get dummies will return OHE columns\ndisplay(df.shape)\ndf.head()","73302fe8":"sns.heatmap(df.corr(),annot=True,vmin=0,vmax=1,linecolor='yellow',linewidths=0.9);","073ed2ab":"y = df.pop('selling_price') #will pop the sel price collumn and drop it in y\nX = df #remaining data","5aed1af1":"X.head(2)","723cf936":"y.head(2)","b56c1ebd":"from sklearn.ensemble import ExtraTreesRegressor","91502188":"# Feature importance\nmodel = ExtraTreesRegressor()\nmodel.fit(X, y)","b6bafc90":"df.columns","52768ea9":"plt.figure(figsize=(18,8))\nplt.xticks(rotation=45)\nsns.barplot(x=df.columns, y=model.feature_importances_);","159cd2f2":"from sklearn.model_selection import train_test_split","f4493d22":"# test size = 20 % and whenever we run splitted data should be same  random_state=42\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","796b20f5":"display(X_train.shape, X_test.shape)\nX_train.head(2)","d3e95ce3":"display(y_train.shape, y_test.shape)\ny_train.head(2)","6628846e":"from sklearn.linear_model import LinearRegression","00d9bba1":"#Create the regressor: reg\nreg = LinearRegression()","ec2d7a32":"#Fit the regressor to the training data\nreg.fit(X_train, y_train)","05d49a90":"reg.coef_","f0a2a778":"# Predict on the test data: y_pred\ny_pred = reg.predict(X_test)","6aefb958":"from sklearn.metrics import mean_squared_error\nimport math","a637a07d":"# Compute and print RMSE\nprint(\"Linear regression score : \",reg.score(X_test, y_test))\nprint('Correlation: ', math.sqrt(reg.score(X_test, y_test)))\nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nprint(\"Root Mean Squared Error: {}\".format(rmse))","ace4c63c":"# Load","b2e49c7b":"# Cleaning","ef383096":"# Separating numerical and categorical collumns","b9560275":"# Root Mean Squared Error","c512a94d":"# One Hot Encoding categorical columns","177b7382":"# Checking Feature importance - from sklearn.ensemble import ExtraTreesRegressor","bb68e1c5":"https:\/\/www.kaggle.com\/sanku758\/car-price-prediction#Random-Forest-Regressor","c18e44e6":"# Model Building: Linear Regression - from sklearn.linear_model import LinearRegression","41896755":"# Train-Test split  - from sklearn.model_selection import train_test_split","5779e5ea":"# Getting X and Y","f9135f8f":"# Reference"}}