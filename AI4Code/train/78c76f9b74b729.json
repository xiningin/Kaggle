{"cell_type":{"c912ca89":"code","fedcb990":"code","35bd0bac":"code","149d651d":"code","7d04d885":"code","149b5330":"code","ba96b27f":"code","87be84aa":"code","ed1481d8":"code","ca606b44":"code","2ef556e1":"code","62c617fa":"code","dd0b7bda":"code","3b4d9e76":"code","b3620444":"code","dce49f98":"code","0eda9a7b":"code","cd02c8d4":"code","3e56e50a":"code","ef9a08be":"code","1d1f2fde":"code","d9169b34":"code","7010e0f9":"code","4bf99ca7":"code","495615d2":"code","f134d17e":"code","d1f6c81b":"code","56d327c3":"code","68635820":"markdown","f48337ae":"markdown","96ee5b73":"markdown","a7908e9b":"markdown","84eea839":"markdown","c1646a98":"markdown"},"source":{"c912ca89":"!pip install scikit-surprise","fedcb990":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport json\nfrom collections import defaultdict\nimport os\nfrom surprise import Dataset, Reader, SVD, KNNWithMeans, NMF, accuracy\nfrom surprise.model_selection import cross_validate, GridSearchCV, train_test_split\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","35bd0bac":"rating_path = '\/kaggle\/input\/amazon-appliances-recommendation-system-dataset\/Appliances.json'\nmeta_path = '\/kaggle\/input\/amazon-appliances-recommendation-system-dataset\/meta_Appliances.json'","149d651d":"#Use 50000 for fast training\nwith open(rating_path) as json_file:\n    rating_dict = {'user_id':[], 'item_id':[], 'rating':[]}\n    for i, line in enumerate(json_file):\n        parse_data = json.loads(line)\n        rating_dict['user_id'].append(parse_data['reviewerID'])\n        rating_dict['item_id'].append(parse_data['asin'])\n        rating_dict['rating'].append(parse_data['overall'])\n        if i == 50000:\n            break","7d04d885":"with open(meta_path) as json_file:\n    meta_dict = {'item_id':[], 'name':[]}\n    for i, line in enumerate(json_file):\n        parse_data = json.loads(line)\n        meta_dict['item_id'].append(parse_data['asin'])\n        meta_dict['name'].append(parse_data['title'])\n        if i == 50000:\n            break","149b5330":"rating_df = pd.DataFrame.from_dict(rating_dict)\nmeta_df = pd.DataFrame.from_dict(meta_dict)","ba96b27f":"rating_df.info()","87be84aa":"meta_df.info()","ed1481d8":"meta_df['item_id'].value_counts()","ca606b44":"meta_df[meta_df['item_id'] == 'B0002JMELW']","2ef556e1":"meta_df.drop_duplicates(inplace=True)","62c617fa":"rating_df.value_counts()","dd0b7bda":"rating_df = rating_df.groupby(['user_id', 'item_id']).agg({'rating':'mean'}).reset_index()","3b4d9e76":"rating_df['item_id'].nunique()","b3620444":"df = rating_df.merge(meta_df,on='item_id')","dce49f98":"df.head()","0eda9a7b":"df.info()","cd02c8d4":"plt.title('Distribution of rating')\ndf['rating'].value_counts().plot(kind='bar')","3e56e50a":"df['user_id'].value_counts()","ef9a08be":"plt.figure(figsize=(20, 6))\nplt.title('Top 20 products rated the most')\ndf['item_id'].value_counts()[:20].plot(kind='bar')","1d1f2fde":"reader = Reader(rating_scale=(1, 5))\ndata = Dataset.load_from_df(df[['user_id', 'item_id', 'rating']], reader)","d9169b34":"# #Try SVD\n# param_grid = {'n_epochs': [5, 10, 20, 50], 'lr_all': [0.002, 0.005],\n#               'reg_all': [0.4, 0.6]}\n# gs = GridSearchCV(SVD, param_grid, measures=['rmse', 'mae'], cv=5)\n\n# gs.fit(data)\n\n# # best RMSE score\n# print(gs.best_score['rmse'])\n\n# # combination of parameters that gave the best RMSE score\n# print(gs.best_params['rmse'])","7010e0f9":"# #Try KNNWithMeans \n# param_grid = {'k':[40, 50, 60]}\n# gs_knn = GridSearchCV(KNNWithMeans, param_grid, measures=['rmse', 'mae'], cv=5)\n# # best RMSE score\n# gs_knn.fit(data)\n# print(gs_knn.best_score['rmse'])\n\n# # combination of parameters that gave the best RMSE score\n# print(gs_knn.best_params['rmse'])","4bf99ca7":"# param_grid = {'n_factors':[15, 20, 30], 'n_epochs':[5, 10]}\n# gs_nmf = GridSearchCV(NMF, param_grid, measures=['rmse', 'mae'], cv=5)\n# gs_nmf.fit(data)\n# # best RMSE score\n# print(gs_nmf.best_score['rmse'])\n\n# # combination of parameters that gave the best RMSE score\n# print(gs_nmf.best_params['rmse'])","495615d2":"trainset, testset = train_test_split(data, test_size=.25)\nalgo = SVD(n_epochs=100, lr_all=0.001, reg_all=0.4)\nalgo.fit(trainset)\npredictions = algo.test(testset)\naccuracy.rmse(predictions)","f134d17e":"def get_top_n(user_id, algo,n=10):\n    data = list(map(lambda x: (user_id, x, 0), meta_df['item_id'].unique()))\n    predictions = algo.test(data)\n    tops = []\n    for uid, iid, true_r, est, _ in predictions:\n        tops.append((iid, est))\n    tops.sort(key=lambda x: x[1], reverse=True)\n    return tops[:n]","d1f6c81b":"def get_item_for_user(user_id, algo, n=10):\n    items = []\n    top_n = get_top_n(user_id, algo,n=10)\n    for item in top_n:\n        name = meta_df.loc[meta_df['item_id'] == item[0],'name'].values[0]\n        items.append((name, item[1]))\n    return items","56d327c3":"items = get_item_for_user('A0331549D2KLUUO83DPX',algo)\nfor i in items:\n    print(i)","68635820":"**There are some duplicate items, so I will remove it**","f48337ae":"# III. Create models and hyperparameters","96ee5b73":"# II. Load the rating and meta files","a7908e9b":"# III. EDA","84eea839":"# I. Install and import necessary libraries","c1646a98":"# IV. Using model for prediction"}}