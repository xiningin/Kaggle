{"cell_type":{"19fc291d":"code","a2795ca3":"code","dfeeec6f":"code","ca30753d":"code","fb94e993":"code","6c2c07e1":"code","9f3a8f6d":"code","42fdf5bf":"code","01f33f98":"code","8dcf0a64":"code","45bd3e7c":"code","3173571d":"code","eeac2fd9":"code","e77c0543":"code","0d7769fd":"code","0ae0873d":"code","4f259b79":"code","3975137e":"markdown","2c009a40":"markdown","e3e858f6":"markdown","6e861d70":"markdown","2084f522":"markdown","0b5d9c2c":"markdown","97c2a470":"markdown","da54fe81":"markdown","172cdefa":"markdown","0e6ec1b8":"markdown","c831cb80":"markdown","2122104c":"markdown","a8031655":"markdown","8b3bd567":"markdown"},"source":{"19fc291d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom IPython.display import display, HTML\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\npd.set_option('display.max_colwidth', 150)","a2795ca3":"log = pd.read_csv('..\/input\/property-data\/user_activity.csv')\ndisplay(log.head())\ndisplay(log.shape)","dfeeec6f":"\nsns.set()\nplt.style.use('seaborn-talk')\nplt.figure(figsize=(15, 7))\nsns.countplot(y=log.event_type, orient='v', palette='bone')","ca30753d":"log.event_type.value_counts()","fb94e993":"events = pd.read_excel('..\/input\/property-data\/event_types.xlsx')\nevents","6c2c07e1":"events['Event type'].values","9f3a8f6d":"cleanup_nums = {\"event_type\":     {\"seen_in_list\": 1, \"seen\": 2, \"suggest-new\": 3, \n                                    'suggest_similar': 4, 'sent_catalog_link': 5, 'visit_request-new':6, 'visit_request-canceled':7,\n                                    'visit-new':8, 'visit-canceled':9, 'visit-unsuccess':10, 'visit-success':11,\n                                    'meeting_request-new':12, 'meeting_request-canceled':13, 'meeting-new':14,'meeting-canceled':15, \n                                   'meeting-unsuccess':16, 'meeting-success':17, 'deal-success':18}}\n                                                          \nlog.replace(cleanup_nums, inplace=True)","42fdf5bf":"log.user_id.unique().size, log.item_id.unique().size","01f33f98":"p5s = (log[(log['event_type'] ==18) ][['item_id', 'user_id']])\n#u5s = list(log[log.event_type==18]['user_id'])\n\n\npu5s = log[(log.item_id.isin(p5s.item_id.values)) & (log.user_id.isin(p5s.user_id.values))]\n\n##pu5s.shape","8dcf0a64":"plt.style.use('seaborn-talk')\ndiff = []\nfor item in list(pu5s.item_id.unique()):\n    \n    d = pd.to_datetime(pu5s[pu5s.item_id==item].sort_values(by='create_timestamp')['create_timestamp']).min()\n    f = pd.to_datetime(pu5s[pu5s.item_id==item].sort_values(by='create_timestamp')['create_timestamp']).max()\n    diff.append(tuple((item, f-d)))\n    \ndf = pd.DataFrame(diff, columns =['item', 'time']) \n  \ndf ","45bd3e7c":"df.time = df['time'] \/ np.timedelta64(1, 's')\n\ndf.sort_values(by='time', inplace=True)","3173571d":"plt.figure(figsize=(10, 15))\nplt.title('Rented by Second in the System Log')\nplt.style.use('seaborn-talk')\nsns.barplot(y=df.item, x=df.time)","eeac2fd9":"plt.style.use('seaborn-talk')\nsteps = []\nfor item in list(pu5s.item_id.unique()):\n    \n    d = pu5s[pu5s.item_id==item].sort_values(by='create_timestamp')['event_type'].values\n    \n    steps.append(tuple((item, d)))\n    \ndf = pd.DataFrame(steps, columns =['item', 'step']) \n  \ndf","e77c0543":"df.style.apply(lambda x: ['background: orange' \n                                  if (x.name == 37 or x.name == 34 or x.name == 24)\n                                  else '' for i in x], axis=1)\n","0d7769fd":"p5s = (log[(log['event_type'] ==11) ][['item_id', 'user_id']])\n#u5s = list(log[log.event_type==18]['user_id'])\n\n\npu5s = log[(log.item_id.isin(p5s.item_id.values)) & (log.user_id.isin(p5s.user_id.values))]\n\n##pu5s.shape","0ae0873d":"plt.style.use('seaborn-talk')\ndiff = []\nfor item in list(pu5s.item_id.unique()):\n    \n    d = pd.to_datetime(pu5s[pu5s.item_id==item].sort_values(by='create_timestamp')['create_timestamp']).min()\n    f = pd.to_datetime(pu5s[pu5s.item_id==item].sort_values(by='create_timestamp')['create_timestamp']).max()\n    diff.append(tuple((item, f-d)))\n    \ndf = pd.DataFrame(diff, columns =['item', 'time']) \n  \ndf.head(20)","4f259b79":"\nplt.style.use('seaborn-talk')\nsteps = []\nfor item in list(pu5s.item_id.unique()):\n    \n    d = pu5s[pu5s.item_id==item].sort_values(by='create_timestamp')['event_type'].values\n    \n    steps.append(tuple((item, d)))\n    \ndf = pd.DataFrame(steps, columns =['item', 'step']) \n  \ndf.head(50)","3975137e":"\n\n\n># <font color=#34495E>Simple Collaborative Filtering<\/font>\n\n\n\n### User Similarity\nTBD\n\n\n\n### Item Similarity\n\nTBD","2c009a40":"bb6c78f4-0270-4c0b-b6fd-5fb4195b9001 ----> [18 2 6 7] , irregular order \n\n681716bd-7fdd-49f4-b6bc-b1bb929284bf ----> [17 18] , meeting, deal , no history\n\nb764fe75-66bb-4c1f-91f1-b02d85de77e7 ----> [18] , deal , no history","e3e858f6":"### **Success deals properties and steps**","6e861d70":"### Sample 50 datapoints","2084f522":"**for eda i mapped event_type as original steps to int as ordinal encoding**","0b5d9c2c":"\n\n># <font color=#34495E>Matrix Factorization: Explicit Feedback<\/font>\n\n### TBD","97c2a470":"**Value Counts**","da54fe81":"**Unique numbers of user_id and item_id**","172cdefa":"**event_type distribution**","0e6ec1b8":"### **Fastest Rents among 54 success deals**","c831cb80":"\n># <font color=#34495E>EDA and Preprocessing<\/font>","2122104c":"> **Note:** The key of solving the problem is that how to map event types to explicit user intrest such a way that recommander algorithms understand.\n","a8031655":"### **Visit successful analysis**","8b3bd567":"### **event data**"}}