{"cell_type":{"cf078ede":"code","af06caf3":"code","b07d72fa":"code","fa9b7846":"code","73973953":"code","1f6c2095":"code","f5dfc545":"code","ece3bb63":"code","df3b986a":"code","6cd329d2":"code","acab9d84":"code","3bb4480a":"code","c293040a":"code","dece51ac":"markdown","7b16de46":"markdown"},"source":{"cf078ede":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfrom os.path import isfile\nimport pickle\nfrom tqdm import tqdm_notebook\nprint(os.listdir(\"..\/input\"))\n\nfrom PIL import Image as pil_image\nimport matplotlib.pyplot as plt\n\nfrom imagehash import phash #img\uc758 P-hash \uac12\uc744 \uad6c\ud558\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\n","af06caf3":"train_df = pd.read_csv('..\/input\/2019-3rd-ml-month-with-kakr\/train.csv')\ntest_df = pd.read_csv('..\/input\/2019-3rd-ml-month-with-kakr\/test.csv')\nsample_df = pd.read_csv('..\/input\/2019-3rd-ml-month-with-kakr\/sample_submission.csv')\n\nbasic_path = '..\/input\/2019-3rd-ml-month-with-kakr\/'\nsave_path = '..\/input\/hashdataset\/'","b07d72fa":"tagged = dict([(p,w) for _, p,w in train_df[['img_file', 'class']].to_records()]) # img_file : class_num, dict\nsubmit = [p for _, p in sample_df[['img_file']].to_records()] #img_file, dict\njoin = list(tagged.keys()) + submit #img_file list tagged and submit","fa9b7846":"#img_file\uc744 \ubd88\ub7ec\uc624\ub294 \ud568\uc218\ndef expand_path(p):    \n    if 'train' in p:\n        p = basic_path +'train\/'+ p\n    else:\n        p = basic_path + 'test\/'+ p\n    return p","73973953":"def match(h1, h2):\n    for p1 in h2ps[h1]:\n        for p2 in h2ps[h2]:\n            i1 = pil_image.open(expand_path(p))\n            i2 = pil_image.open(expand_path(p))\n            \n            if i1.mode != i2.mode or i1.size != i2.size: #mode is RGB or grayscale\n                return False\n            \n            a1 = np.array(i1)\n            a1 = a1-a1.mean()\n            a1 = a1\/sqrt((a1**2).mean())\n            \n            a2 = np.array(i2)\n            a2 = a2-a2.mean()\n            a2 = a2\/sqrt((a2**2).mean())\n            \n            a = ((a1-a2)**2).mean()\n            if a > 0.1:\n                return False\n    return True","1f6c2095":"'''#\uc774\ubbf8\uc9c0\uc758 \ud574\uc2dc \uac12\uc774 \ud2b9\uc815 \uc870\uac74\uc744 \ub9cc\uc871\ud558\uba74, \uac19\uc740 \ud574\uc2dc\uac12\uc73c\ub85c \ucc98\ub9ac\nh2h = {}\n\nfor i, h1 in enumerate(tqdm_notebook(hs)):\n    for h2 in hs[:i]:\n        if h1-h2 <= 6 and match(h1,h2):\n            s1 = str(h1)\n            s2 = str(h2)\n            if s1 < s2:\n                s1,s2 = s2,s1\n            h2h[s1] = s2\n            \nwith open('h2h.pickle', 'wb') as handle:\n    pickle.dump(h2h, handle, protocol=pickle.HIGHEST_PROTOCOL)'''","f5dfc545":"with open(save_path + 'p2h.pickle', 'rb') as f:\n    p2h = pickle.load(f)\n    \nwith open(save_path + 'h2h.pickle', 'rb') as f:\n    h2h = pickle.load(f)","ece3bb63":"#phash \uac12\uc774 \uac19\uc740 \uc774\ubbf8\uc9c0 \ucc3e\uae30\nh2ps = {}\n\nfor p,h in p2h.items():\n    if h not in h2ps:\n        h2ps[h] = []\n    if p not in h2ps[h]:\n        h2ps[h].append(p)","df3b986a":"#h2h\uc5d0\uc11c \uac19\uc740 \uac12\uc73c\ub85c \ucc98\ub9ac\ud55c \uc774\ubbf8\uc9c0\uc758 hash\uac12\uc744 \uac19\ub3c4\ub85d \ubcc0\uacbd.\nfor p,h in p2h.items():\n    h = str(h)\n    if h in h2h:\n        h = h2h[h]\n    p2h[p] = h","6cd329d2":"#\ucd1d 45\uac1c\uac00 \ucc28\uc774 \ubc1c\uc0dd\nprint(len(h2ps), len(p2h))\n\ncc = 0\nfor h, ps in h2ps.items():\n    if len(ps) >= 2:\n        cc +=1\n        \nprint(cc)","acab9d84":"c = 0\nfor h, ps in h2ps.items():\n    if len(ps) >= 2:\n        c+=1\n        print('Images : ', ps)\n        g = []\n        for p in ps:\n            if 'test' in p:\n                g.append(' ')\n                continue\n            g.append(tagged[p])\n        print('Class : ', g)\n        \nprint(\"Total : \", c)","3bb4480a":"def show_car(imgs, per_row=2):\n    n = len(imgs)\n    rows = (n + per_row - 1)\/\/per_row\n    cols = min(per_row, n)\n    fig, axes = plt.subplots(rows,cols, figsize=(24\/\/per_row*cols,24\/\/per_row*rows))\n    for ax in axes.flatten(): ax.axis('off')\n    for i,(img,ax) in enumerate(zip(imgs, axes.flatten())): \n        ax.imshow(img.convert('RGB'))","c293040a":"for h, ps in h2ps.items():\n    if len(ps) >= 2:\n        #print('Images:', ps)\n        imgs = [pil_image.open(expand_path(p)) for p in ps]\n        show_car(imgs, per_row=len(ps))","dece51ac":"\ud574\uc26c(Hash)\ub780 \uc784\uc758\uc758 \ud06c\uae30\ub97c \uac00\uc9c4 \ub370\uc774\ud130\ub97c \uace0\uc815\ub41c \ud06c\uae30\uc758 \ub370\uc774\ud130\ub85c \ubcc0\ud658\ud558\ub294 \uac83\uc744 \ub9d0\ud569\ub2c8\ub2e4. \ub370\uc774\ud130\uc758 \uac12(value)\ub97c \uc774\uc6a9\ud574\uc11c \uace0\uc720\ud55c \uc778\ub371\uc2a4(Index)\ub97c \ub9cc\ub4dc\ub294 \uacfc\uc815\uc774\ub77c\uace0\ub3c4 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc790\uc138\ud55c \uc124\uba85\uc740 [\ud574\uc2dc(Hash)\ub780 \ubb34\uc5c7\uc778\uac00?](https:\/\/siyoon210.tistory.com\/85)\ub97c \ucc38\uace0\ud558\uc2dc\uba74 \uc88b\uc2b5\ub2c8\ub2e4.\n\n\ucef4\ud53c\ud2f0\uc158\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\ub97c \ud574\uc2dc\uac12\uc744 \ubc14\uafd4\uc11c \uc0b4\ud3b4\ubcf4\ub2c8 \uac19\uc740 \uc774\ubbf8\uc9c0\uc5d0 \ub2e4\ub978 \ud074\ub798\uc2a4\uac00 \ubd80\uc5ec\ub41c \uacbd\uc6b0\uac00 \uba87\uac00\uc9c0 \uc788\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n\n\ucf54\ub4dc\ub294 [Whale Recognition Model with score 0.78563](https:\/\/www.kaggle.com\/martinpiotte\/whale-recognition-model-with-score-0-78563)\uc758 \uc77c\ubd80\ub97c \uc0ac\uc6a9\ud558\uc600\uc2b5\ub2c8\ub2e4.","7b16de46":"## Image\ub97c hash\uac12\uc73c\ub85c \ubcc0\ud658\ud574\uc11c \ube44\uad50\ud574\ubcf4\uae30"}}