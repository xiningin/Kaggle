{"cell_type":{"9321c07f":"code","83596e02":"code","bc97037b":"code","2cd4e13f":"code","19b7bb16":"code","a3be78de":"code","c5475db5":"code","8612d14a":"code","923cdcda":"code","00e60809":"code","c415b76a":"code","4d4fa855":"code","18f22dd5":"code","35a131d5":"code","a164ed6b":"code","8613b83e":"code","d2eed97c":"code","dedb6915":"code","5c1d3f12":"code","c0e59ee0":"code","eb68c360":"code","7fbfb8de":"code","161f5650":"code","ee1535d4":"code","8676b399":"code","0d8a5108":"code","e16deb31":"code","a913b040":"code","4d3c4116":"code","94b0eef4":"code","09319d45":"code","7a7d41f9":"code","bf4ee1f0":"code","02cc07d0":"code","4211e80b":"code","dd2562f9":"code","e4850aa7":"code","07443adb":"code","ecb0b8eb":"code","4dc2965c":"code","b46ff51d":"code","10d1e006":"code","703d188a":"code","5c1817a8":"code","f068b1d1":"code","e899846f":"code","54a3d2ed":"code","96d266b9":"code","7e2e90f7":"code","c3095df7":"code","a8531460":"code","0b197dc1":"code","23bdf64f":"code","eda15f2e":"code","86b2dd4a":"code","3c206973":"code","8f648056":"code","d7ef81ed":"code","47de2619":"code","6259201e":"code","da8e6896":"code","f8b9ca5e":"code","856ba0fb":"code","998db0ec":"code","a077bcc7":"code","8b8ca74b":"code","53d17aca":"code","120614d4":"code","5ec22e88":"code","7c96e0ac":"code","b1b4b10a":"code","0fe4c113":"code","a66dfe33":"code","aab0e664":"code","72411af8":"code","c8f2716a":"code","b2b34d31":"code","4a9dc965":"code","7d4ec6b7":"code","72418ba7":"code","b8a93332":"code","8ea6008e":"code","eeea0bfb":"code","7608993b":"markdown","7efd35d5":"markdown","4fc64dab":"markdown","6c5dac17":"markdown","aef0f68f":"markdown","40e482be":"markdown","9cc11842":"markdown","028de927":"markdown","4d65a1f8":"markdown","3040f313":"markdown","4f21c91e":"markdown","c976c44e":"markdown","7ab46b95":"markdown","24495ebd":"markdown","47f80db7":"markdown","eb4e4f49":"markdown","24fa4b3b":"markdown","035146c2":"markdown","f1ef3dd6":"markdown","bd32c82f":"markdown","d645f0ff":"markdown","778e0d00":"markdown","f293df16":"markdown","caec9d6e":"markdown","3817d0c2":"markdown","e2b81e70":"markdown","5e907832":"markdown","376d6221":"markdown","4201c559":"markdown","7bd986de":"markdown","93bbb462":"markdown","1955ac84":"markdown","ed521770":"markdown","0ebbce2f":"markdown","e27fd446":"markdown","94e1a483":"markdown","afcb79eb":"markdown","68c6fb25":"markdown","b0e7a2e6":"markdown","765ade35":"markdown","9d5d5283":"markdown","da736d39":"markdown"},"source":{"9321c07f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","83596e02":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassenngerId = test_df[\"PassengerId\"]","bc97037b":"# kinda unnecessary when .columns is used\ntrain_df.head()","2cd4e13f":"train_df.columns","19b7bb16":"test_df.head()","a3be78de":"train_df.describe()","c5475db5":"test_df.describe()","8612d14a":"train_df.info()","923cdcda":"def bar_plot(variable):\n    \"\"\"\n        input = variable, e.g. sex\n        output = bar plot & value count\n    \"\"\"\n    var = train_df[variable]\n    varValue = var.value_counts()\n    \n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable, varValue))","00e60809":"cat1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in cat1:\n    bar_plot(c)","c415b76a":"cat2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in cat2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","4d4fa855":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with histogram\" .format(variable))\n    plt.show","18f22dd5":"cat3 = [\"Fare\", \"Age\", \"PassengerId\"]\nfor c in cat3:\n    plot_hist(c)","35a131d5":"train_df[[\"Pclass\", \"Survived\"]]","a164ed6b":"#pclass vs survived\n\ntrain_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","8613b83e":"#sex and survived\n\ntrain_df[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","d2eed97c":"#sipsp and survived\n\ntrain_df[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","dedb6915":"#parch vs survived\n\ntrain_df[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","5c1d3f12":"def detectOutlier(df, features):\n    outlierIndices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c], 25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c], 75)\n        #IQR\n        IQR = Q3 - Q1\n        #outlier step\n        outlierStep = IQR * 1.5\n        #detect outlier and indices\n        outlierListCol = df[(df[c] < Q1 - outlierStep) | (df[c] > Q3 + outlierStep)].index\n        #store indices\n        outlierIndices.extend(outlierListCol)\n        \n    outlierIndices = Counter(outlierIndices) #counter shows how many of a single element exists\n    multipleOutliers = list(i for i, v in outlierIndices.items() if v > 2)\n    \n    return multipleOutliers","c0e59ee0":"train_df.loc[detectOutlier(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"])]","eb68c360":"#dropping outliers\ntrain_df = train_df.drop(detectOutlier(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"]), axis = 0).reset_index(drop = True)","7fbfb8de":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis = 0).reset_index(drop = True)","161f5650":"train_df.columns[train_df.isnull().any()]","ee1535d4":"train_df.isnull().sum()","8676b399":"train_df[train_df[\"Embarked\"].isnull()]","0d8a5108":"train_df.boxplot(column = \"Fare\", by = \"Embarked\")\nplt.show()","e16deb31":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","a913b040":"train_df[train_df[\"Fare\"].isnull()]","4d3c4116":"train_df.boxplot(column = \"Fare\", by = \"Pclass\")\nplt.show()","94b0eef4":"np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"])","09319d45":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","7a7d41f9":"listo = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\n\nsns.heatmap(train_df[listo].corr(), annot = True, fmt = \".2f\")\nplt.show()","bf4ee1f0":"g = sns.factorplot(x= \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"survived prob sibsp\")\nplt.show()","02cc07d0":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", data = train_df, kind = \"bar\", size = 9)\ng.set_ylabels(\"survived prob\")\nplt.show()","4211e80b":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 5)\nplt.show()","dd2562f9":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","e4850aa7":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\")\ng.map(plt.hist, \"Age\", bins = 25)\nplt.show()","07443adb":"g = sns.FacetGrid(train_df, row= \"Embarked\")\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","ecb0b8eb":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\")\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","4dc2965c":"train_df[train_df[\"Age\"].isnull()]","b46ff51d":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","10d1e006":"sns.factorplot(x = \"Sex\", y = \"Age\", hue= \"Pclass\", data = train_df, kind = \"box\")\nplt.show()","703d188a":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","5c1817a8":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","f068b1d1":"sns.heatmap(train_df[[\"Age\", \"Sex\", \"SibSp\", \"Parch\", \"Pclass\"]].corr(), annot = True)","e899846f":"indexes = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in indexes:\n    ageP = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    ageM = train_df[\"Age\"].median()\n    if not np.isnan(ageP):\n        train_df[\"Age\"].iloc[i] = ageP\n    else: \n        train_df[\"Age\"].iloc[i] = ageM","54a3d2ed":"train_df[train_df[\"Age\"].isnull()]","96d266b9":"train_df[\"Name\"].head(10)","7e2e90f7":"name = train_df[\"Name\"]\ntrain_df[\"title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","c3095df7":"sns.countplot(x = \"title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","a8531460":"train_df[\"title\"] = train_df[\"title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"], \"other\")\ntrain_df[\"title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"title\"]]\ntrain_df[\"title\"].head(20)","0b197dc1":"sns.countplot(x = \"title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","23bdf64f":"g = sns.factorplot(x = \"title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\", \"Miss-Mrs\", \"Mr\", \"Other\"])\ng.set_ylabels(\"Survival\")\nplt.show()","eda15f2e":"train_df.drop(columns = [\"Name\"], inplace = True)","86b2dd4a":"train_df = pd.get_dummies(train_df, columns = [\"title\"])\ntrain_df.head()","3c206973":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","8f648056":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","d7ef81ed":"train_df[\"famsize\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","47de2619":"train_df.head()","6259201e":"sns.countplot(x = \"famsize\", data = train_df)\nplt.show()","da8e6896":"g = sns.factorplot(x = \"famsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","f8b9ca5e":"train_df = pd.get_dummies(train_df, columns = [\"famsize\"])","856ba0fb":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","998db0ec":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","a077bcc7":"train_df[\"Ticket\"].head(30)","8b8ca74b":"tickets = []\nfor i in (train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\", \" \").replace(\"\/\", \" \").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","53d17aca":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","120614d4":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","5ec22e88":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","7c96e0ac":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","b1b4b10a":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)","0fe4c113":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","a66dfe33":"train_df_len","aab0e664":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","72411af8":"test.head()","c8f2716a":"train = train_df[:train_df_len]\nx_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nx_train, x_test, y_train, y_test = train_test_split(x_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(x_train))\nprint(\"X_test\",len(x_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","b2b34d31":"logreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\n\nacctrain = round(logreg.score(x_train, y_train) * 100, 2)\nacctest = round(logreg.score(x_test, y_test) * 100, 2)\nprint(\"train data accuracy: %\", acctrain)\nprint(\"test data accuracy: %\", acctest)","4a9dc965":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state), SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state), \n             KNeighborsClassifier()]","7d4ec6b7":"dt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\n\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","72418ba7":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(x_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","b8a93332":"cv_results = pd.DataFrame({\"Cross Validation Means\": cv_result, \"ML Models\": [\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\", \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","8ea6008e":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(x_train, y_train)\nprint(accuracy_score(votingC.predict(x_test),y_test))","eeea0bfb":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassenngerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","7608993b":"<a id = 7><\/a>\n# Outlier Detection","7efd35d5":"<a id = 26><\/a>\n## PClass","4fc64dab":"<a id = 27><\/a>\n## Sex","6c5dac17":"<a id = \"1\"><\/a>\n# Load and Check Data\n\n","aef0f68f":"<a id = \"13\"><\/a>\n## SipSp -- Survived","40e482be":"<a id = 30><\/a>\n## Train Test Split","9cc11842":"<a id = 16><\/a>\n\n## Age - Survived","028de927":"<a id = 18><\/a>\n\n## Embarked - Pclass - Sex - Survived","4d65a1f8":"*Small families have more chanceto survive.*","3040f313":"<a id = \"4\"><\/a>\n## Categorical Variable Analysis","4f21c91e":"<a id = 10><\/a>\n## Filling Missing Values\n* Embarked: 2\n* Fare: 1","c976c44e":"<a id = 28><\/a>\n## Drop Passenger ID and Cabin","7ab46b95":"<a id = 14><\/a>\n## Parch - Survived","24495ebd":"<a id = 25><\/a>\n## Ticket","47f80db7":"<a id = 31><\/a>\n## Simple Logistic Regression","eb4e4f49":"# Introduction\n\n    In this kernel I will analyse the data, visualise it and then predict some values.\n\n<font color = \"purple\">\nContent:\n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Values](#8)\n    * [Finding Missing Value](#9)\n    * [Filling Missing Value](#10)\n1. [Visualisation](#11)\n    * [Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n    * [Sibsp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass-- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass Age -- Survived](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n1. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n1. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","24fa4b3b":"<a id = 9><\/a>\n## Finding Missing Values","035146c2":"<a id = 22><\/a>\n## Name -- Title","f1ef3dd6":"<a id = 17><\/a>\n\n## Pclass - Age - Survived","bd32c82f":"<a id = 15><\/a>\n\n## pclass - survived","d645f0ff":"<a id = 24><\/a>\n## Embarked","778e0d00":"* float64(2): Fare and Age\n* int64(5): PassengerId, Survived, Pclass, SipSp and Parch\n* object(5): Name, Sex, Ticket, Cabin and Embarked","f293df16":"<a id = 6><\/a>\n# Basic Data Analysis\n\n* Pclass - Survived\n* Sex - Survived\n* SipSp - Survived\n* Parch - Survived","caec9d6e":"<a id = \"11\"><\/a>\n# Visualisation\n\n","3817d0c2":"We will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","e2b81e70":"* most of the survivors are children\n* most of the dead people are between 20-40 years\n* this can be used to fill the age data","5e907832":"* first class is more likely to survive","376d6221":"Most likely: C port","4201c559":"<a id = \"2\"><\/a>\n\n# Variable Description\n1. PassengerId: Unique id number for each passenger\n2. Survived: Displays 1 if the passenger survived, 0 if the passenger died\n3. Pclass: Indicates passenger's class\n4. Name: Passenger's name\n5. Sex: Passenger's sex, female or male\n6. Age: AGE\n7. SibSp: Number of siblings or spouse\n8. Parch: Number of parents or children\n9. Ticket: Ticket number\n10. Fare: Amount of money paid for the ticket\n11. Cabin: The cabin category passengers had stayed\n12. Embarked: Port where passengers embarked, C for Cherbourg, Q for Queenstown and S for Southampton","7bd986de":"<a id = \"5\"><\/a>\n## Numerical Variable Analysis","93bbb462":"<a id = 33><\/a>\n## Ensemble Modeling","1955ac84":"<a id = 34><\/a>\n## Prediction and Submission","ed521770":"<a id = 21><\/a>\n# Feature Engineering","0ebbce2f":"* small families are more likely to survive.","e27fd446":"<a id = 12><\/a>\n# Correlations","94e1a483":"<a id = 19><\/a>\n## Embarked - Sex - Fare - Survived","afcb79eb":"<a id = 29><\/a>\n# Modeling","68c6fb25":"<a id = 8><\/a>\n# Missing Values","b0e7a2e6":"<a id = 32><\/a>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation","765ade35":"<a id = 23><\/a>\n## Family Size","9d5d5283":"<a id = 20><\/a>\n\n# Filling Age Value","da736d39":"<a id = \"3\"><\/a>\n# Univariate Variable Analysis\n* Categorical Variables: Survived, Sex, Pclass, Embarked, Name, Ticket, Sipsp and Parch\n* Numerical Variables: Age, PassengerId, Fare"}}