{"cell_type":{"489ed943":"code","c9b84469":"code","b7469ca0":"code","bdb74c13":"code","57c7a3a5":"code","72869230":"code","7af45977":"code","4de9d975":"code","8b71470e":"code","729f061c":"code","fadfbccf":"code","69aa1f2b":"code","65e8bd92":"code","f669be73":"code","e17ea377":"code","e0d5a063":"code","597418a1":"code","b9d561d1":"code","a1d7921e":"code","c5a07fd8":"code","0e2bd16d":"code","3b4e781e":"code","27869057":"code","f01ee120":"code","17f002c8":"code","cb5efef9":"code","b1fc1aba":"markdown","74d5ff09":"markdown","6802644e":"markdown","b190ea07":"markdown","52d5aaf7":"markdown","8e60328e":"markdown","1b71bd90":"markdown","77402a34":"markdown","50ba34c0":"markdown","12801175":"markdown"},"source":{"489ed943":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c9b84469":"df = pd.read_csv(\"..\/input\/daily-climate-time-series-data\/DailyDelhiClimateTrain.csv\")\ndf.head()","b7469ca0":"print (\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0430: \", df.meantemp.isnull().sum())","bdb74c13":"sns.pairplot(df)","57c7a3a5":"plt.figure(figsize = (18,8))\nplt.plot(df.date, df['meantemp'])\nplt.xlabel('Date', fontsize = 14)\nplt.ylabel('Temperature', fontsize = 14)\nplt.xticks(np.arange(0, len(df.date)+1, 45), rotation = 45, fontsize = 14)\nplt.yticks(fontsize = 14)\nplt.title('Recorded Temperature', fontsize = 16)\nplt.show()","72869230":"plt.figure(figsize=(18, 8))\nplt.fill_between(df.date, y1=df['meantemp'], y2=-df['meantemp'], alpha=0.5, linewidth=2, color='seagreen')\nplt.hlines(y=0, xmin=np.min(df.date), xmax=np.max(df.date), linewidth=.5)\nplt.xlabel(\"Date\", fontsize=14)\nplt.ylabel(\"Temperature\", fontsize=14)\nplt.xticks(np.arange(0, len(df.date)+1, 45), rotation=45, fontsize=14)\nplt.yticks(fontsize=14)\nplt.title(\"Recorded Temperature (Two sided view)\", fontsize=16)\nplt.show()","7af45977":"plt.figure(figsize=(18,8))\ndates = pd.to_datetime(df.date.iloc[:-1])\nprint(\"Temperature Years on Record: \", *dates.dt.year.unique())\nfor i in dates.dt.year.unique():\n    plt.plot(df['meantemp'].iloc[:-1][dates.dt.year==i].values, label = i)\n    \nplt.xlabel(\"Month\", fontsize=14)\nplt.ylabel(\"Temperature\", fontsize = 14)\nplt.xticks(np.arange(0,365,32), labels = dates.dt.month_name().unique(), rotation=45, fontsize = 14)\nplt.yticks(fontsize=14)\nplt.title(\"Recorded Temperature (Years Comparison)\", fontsize = 16)\nplt.legend(fontsize = 12)\nplt.show()","4de9d975":"plt.figure(figsize = (14,8))\nsns.boxplot(x=dates.dt.year.iloc[:-1], y = 'meantemp', data = df.iloc[:-1])\nplt.xlabel(\"Date\", fontsize = 14)\nplt.ylabel(\"Temperature\", fontsize = 14)\nplt.xticks(fontsize = 14)\nplt.yticks(fontsize = 14)\nplt.show()","8b71470e":"plt.figure(figsize = (14,8))\nsns.boxplot(x = dates.dt.month.iloc[:-1], y = 'meantemp', data = df.iloc[:-1])\nplt.xlabel(\"Month\", fontsize = 14)\nplt.ylabel(\"Temperature\", fontsize = 14)\nplt.xticks(np.arange(0,12), labels = dates.dt.month_name().unique(), rotation = 45, fontsize = 14)\nplt.yticks(fontsize = 14)\nplt.show()","729f061c":"from statsmodels.tsa.seasonal import seasonal_decompose\n\n#Multiplicative Decomposition\ndecomp_mul = seasonal_decompose(df['meantemp'], model='multiplicative', extrapolate_trend='freq', period=365)\ndecomp_mul.plot()\nplt.show()","fadfbccf":"decomp_add = seasonal_decompose(df['meantemp'], model = 'additive', extrapolate_trend = 'freq', period = 365)\ndecomp_add.plot()\nplt.show()","69aa1f2b":"from statsmodels.tsa.stattools import adfuller, kpss\n\n#Augmented Dickey Fuller (ADF) Test\nresult = adfuller(df['meantemp'].values, autolag = 'AIC')\nprint('ADF Statistic', result[0], 'p-value:', result[1])\n\n#Kwiatkowski-Phillips-Schmidt-Shin (KPSS) Test\nresult = kpss(df['meantemp'].values, nlags = 'auto', regression = 'c')\nprint('KPSS Statistic: ', result[0], 'p-value: ', result[1])","65e8bd92":"from scipy import signal\n\nplt.figure(figsize =(18, 8))\ndetrended = signal.detrend(df['meantemp'].values)\nplt.plot(df.date, detrended)\nplt.title('Temperatures detrended by subtracting the least squares fit to the original series', fontsize=16)\nplt.xlabel('Date', fontsize = 14)\nplt.ylabel('Temperature', fontsize = 14)\nplt.xticks(np.arange(0, len(df.date)+1, 45), rotation = 45, fontsize = 14)\nplt.yticks(fontsize = 14)\nplt.show()","f669be73":"plt.figure(figsize=(18, 8))\ndecomp_mul = seasonal_decompose(df['meantemp'], model='multiplicative', extrapolate_trend='freq', period=365)\ndetrended = df['meantemp'].values - decomp_mul.trend\nplt.plot(df.date, detrended)\nplt.title('Temperatures detrended by subtracting the trend component to the original series', fontsize=16)\nplt.xlabel(\"Date\", fontsize=14)\nplt.ylabel(\"Temperature\", fontsize=14)\nplt.xticks(np.arange(0, len(df.date)+1, 45), rotation=45, fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()","e17ea377":"plt.figure(figsize = (18,8))\ndeseasonalized = df['meantemp'].values\/decomp_mul.seasonal\nplt.plot(df.date, deseasonalized)\nplt.title('Temperatures deseasonalized by dividing the seasonal component to the original series', fontsize=16)\nplt.xlabel('Date', fontsize = 14)\nplt.ylabel('Temperature', fontsize = 14)\nplt.xticks(np.arange(0, len(df.date)+1, 45), rotation = 45, fontsize = 14)\nplt.yticks(fontsize = 14)\nplt.show()","e0d5a063":"from pandas.plotting import autocorrelation_plot\n\nplt.figure(figsize = (18, 8))\nautocorrelation_plot(df['meantemp'])\nplt.title('Autocorrelation Plot', fontsize=16)\nplt.xlabel('Lag', fontsize = 14)\nplt.ylabel('Autocorrelation', fontsize = 14)\nplt.show()","597418a1":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\nplot_acf(df['meantemp'], lags = 365)\nplt.show()\nplot_pacf(df['meantemp'], lags = 365)\nplt.show()","b9d561d1":"from pandas.plotting import lag_plot\n\nplt.figure(figsize = (18, 8))\nlag_plot(df['meantemp'], lag = 365)\nplt.title('Lag Plot', fontsize = 16)\nplt.show()","a1d7921e":"plt.figure(figsize = (18,8))\ndf_ma = df['meantemp'].rolling(30, center = True, closed = 'both').mean()\nplt.plot(df.date, df_ma)\nplt.title('Smoothing a time series (Using 30 days moving average)', fontsize=16)\nplt.xlabel('Date', fontsize = 14)\nplt.ylabel('Temperature', fontsize = 14)\nplt.xticks(np.arange(0, len(df.date)+1,45), rotation = 45, fontsize = 14)\nplt.yticks(fontsize = 14)\nplt.show()","c5a07fd8":"from statsmodels.nonparametric.smoothers_lowess import lowess\n\n#LOWESS smoothing (Locally Weighted Regression)\ndf_loess = pd.DataFrame(lowess(df['meantemp'], np.arange(len(df['meantemp'])), frac = 0.1)[:, 1], index = df.date, columns = ['meantemp'])\ndf_loess.head()","0e2bd16d":"plt.figure(figsize = (18, 8))\nplt.plot(df_loess.index, df_loess['meantemp'])\nplt.title('Smoothing a time series (Using LOWESS smoothing 10%)', fontsize=16)\nplt.xlabel('Date', fontsize = 14)\nplt.ylabel('Temperature', fontsize = 14)\nplt.xticks(np.arange(0, len(df.date)+1, 45), rotation = 45, fontsize = 14)\nplt.yticks(fontsize = 14)\nplt.show()","3b4e781e":"from statsmodels.tsa.stattools import grangercausalitytests\n\ngrangercausalitytests(df[['meantemp', 'humidity']], maxlag=2)","27869057":"from statsmodels.tsa.arima.model import ARIMA\n\nmodel = ARIMA(df['meantemp'], order=(1,1,1))\nmodel_fit = model.fit()\nprint(model_fit.summary())","f01ee120":"#Plotting residual errors\nresiduals = pd.DataFrame(model_fit.resid)\nplt.figure(figsize=(18, 8))\nplt.plot(residuals)\nplt.title('Residuals', fontsize = 16)\nplt.xlabel('Date', fontsize = 14)\nplt.ylabel('Amount of residuals', fontsize = 14)\nplt.xticks(np.arange(0, len(df.date)+1, 45), labels = [df.date[i] for i in range(0, len(df.date)+1, 45)], rotation = 45, fontsize=14)\nplt.yticks(fontsize = 14)\nplt.show()","17f002c8":"plt.figure(figsize = (18, 8))\nresiduals.plot(kind = 'kde', title = 'Density')\nplt.title('Density', fontsize = 16)\nplt.show()","cb5efef9":"train = df['meantemp'][:int(np.floor((len(df)\/100)*70))]\ntest = df['meantemp'][int(np.floor((len(df)\/100)*70)):]\n\nmodel = ARIMA(train, order=(3, 2, 1))  \nfitted = model.fit()  \n\nfc = fitted.get_forecast(len(df['meantemp'][int(np.floor((len(df)\/100)*70)):]))  \nconf = fc.conf_int(alpha=0.05) # 95% confidence\n\nfc_series = pd.Series(fc.predicted_mean, index=test.index)\nlower_series = pd.Series(conf.iloc[:, 0], index=test.index)\nupper_series = pd.Series(conf.iloc[:, 1], index=test.index)\n\n# Plot\nplt.figure(figsize=(12,5), dpi=200)\nplt.plot(train, label='training')\nplt.plot(test, label='actual')\nplt.plot(fc_series, label='forecast')\nplt.fill_between(lower_series.index, lower_series, upper_series, \n                 color='k', alpha=.15)\nplt.title('Forecast vs Actuals')\nplt.legend(loc='upper left', fontsize=8)\nplt.show()","b1fc1aba":"**Time Series Decomposition**","74d5ff09":"**Data Visualization**","6802644e":"**Granger Causality test**","b190ea07":"**Lag Plot**","52d5aaf7":"**ARIMA (Auto Regressive Integrated Moving Average)**","8e60328e":"**Autocorrelation and Partial-Autocorrelation**","1b71bd90":"**Testing fot Time Series Seasonality**","77402a34":"**Smoothing a time series**","50ba34c0":"**Detrending a time series**","12801175":"**Deseasonalizing a time series**"}}