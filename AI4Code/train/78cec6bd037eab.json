{"cell_type":{"fcbcdf13":"code","fc2eb13a":"code","3994f5de":"code","0821dcaa":"code","fd84fe49":"code","55db0a07":"code","92855396":"code","9af8315a":"code","19abf3c5":"code","1eaf64ea":"code","cb3efdc9":"code","a42ee09d":"code","8e2fe7a6":"code","080824d6":"code","77318c99":"code","e08fd9cf":"code","0be37906":"code","4d6154b0":"code","8478daf9":"code","c6091bbd":"code","096a4691":"code","ca528e1b":"code","7d948ad3":"code","464b119c":"code","504f28e2":"code","3681447f":"code","a79e3638":"code","82c8796d":"code","dabc5358":"code","409df7ed":"code","d0920e0d":"code","8c6fc667":"code","03539d90":"code","9e7dc84b":"code","f1966573":"code","0ff871b2":"code","4bf561a5":"code","e029217a":"code","fac697a0":"code","9da8fb3f":"code","241acb15":"code","6fcff976":"code","7526a986":"code","b84d90af":"code","bdfb7c98":"code","c12b4d37":"code","790895c4":"code","36556650":"code","221404ee":"markdown","91572bb2":"markdown","9f46d42d":"markdown","4276c356":"markdown","304322d5":"markdown","eb6874e4":"markdown","bf80d4ab":"markdown","cd8fd892":"markdown","bff35de1":"markdown","c8e258b1":"markdown","85e93566":"markdown","ad46a031":"markdown","473d22be":"markdown","a4cf34d9":"markdown","8d288466":"markdown","5aba476b":"markdown","06f1e114":"markdown","43ee06ac":"markdown","cfda202b":"markdown","2fe1dfa8":"markdown","dc248fb1":"markdown","68947c32":"markdown","2a98977d":"markdown"},"source":{"fcbcdf13":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc2eb13a":"# Load the data\n\ndf = pd.read_csv('..\/input\/default-of-credit-card-clients-dataset\/UCI_Credit_Card.csv')\ndf.sample(5)","3994f5de":"df.info()","0821dcaa":"df.describe()","fd84fe49":"# Payment delay description\ndf[['PAY_0', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6']].describe()","55db0a07":"# Bill Statement description\ndf[['BILL_AMT1', 'BILL_AMT2', 'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6']].describe()","92855396":"#Previous Payment Description\ndf[['PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6']].describe()","9af8315a":"df.LIMIT_BAL.describe()","19abf3c5":"df = df.rename(columns={'default.payment.next.month': 'def_pay', \n                        'PAY_0': 'PAY_1'})\ndf.head()","1eaf64ea":"# I am interested in having a general idea of the default probability\ndf.def_pay.sum() \/ len(df.def_pay)","cb3efdc9":"plt.hist(df['def_pay'])","a42ee09d":"df.def_pay.value_counts()","8e2fe7a6":"cor = df.corr()\n#Correlation with output variable\ncor_target = abs(cor[\"def_pay\"])\n#Selecting highly correlated features\nrelevant_features = cor_target[cor_target>0.05]\nrelevant_features","080824d6":"df.isnull().sum(axis=0)","77318c99":"y = df['def_pay'].copy()\ndf=df.drop(['def_pay'],axis=1)\nX=df.copy()\nX.head()","e08fd9cf":"#importing libraries\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, make_scorer\nfrom sklearn.model_selection import train_test_split","0be37906":"# create training and testing vars\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","4d6154b0":"classifier = DecisionTreeClassifier(max_depth=10, random_state=14) \n# training the classifier\nclassifier.fit(X_train, y_train)\n# do our predictions on the test\npredictions = classifier.predict(X_test)\n# see how good we did on the test\naccuracy_score(y_true = y_test, y_pred = predictions)","8478daf9":"sel_feature = ['LIMIT_BAL','PAY_1','PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6', 'PAY_AMT1',\n               'PAY_AMT2',  'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6']\nX = df[sel_feature].copy()\nX.head()","c6091bbd":"y.head()","096a4691":"# create training and testing vars\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","ca528e1b":"def decisiontree(X_train,y_train,X_test,y_test):\n    classifier = DecisionTreeClassifier(max_depth=10, random_state=14) \n    # training the classifier\n    classifier.fit(X_train, y_train)\n    # do our predictions on the test\n    predictions = classifier.predict(X_test)\n    # see how good we did on the test\n    prob = classifier.predict(X_test)\n    return accuracy_score(y_true = y_test, y_pred = predictions), predictions, prob","7d948ad3":"score,predictions, prob = decisiontree(X_train,y_train,X_test,y_test)\nprint(\"Decision Tree Prediction Score : \", score )","464b119c":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import f1_score\n\ndef classification_performance(y_true,y_pred):\n    \n    print(\"Confusion Matrix\\n\")\n    print(confusion_matrix(y_true, y_pred))\n    # Recall\n    print(\"\\nRecall Score\\n\")\n    print(recall_score(y_true, y_pred, average=None))\n    # Precision\n    print(\"\\nPrecision Score\\n\")\n    print(precision_score(y_true, y_pred, average=None))\n    # Method 1: sklearn\n    print(\"\\n F1 Score\\n\")\n    print(f1_score(y_true, y_pred, average=None))\n    ","504f28e2":"print(\"Classification Performance \\n\")\nclassification_performance(y_test,predictions)","3681447f":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, predictions))","a79e3638":"dectree_auc = roc_auc_score(y_test, prob)\n\nprint(\"Decision Tree AUC for Imbalanced Dataset : \",dectree_auc)","82c8796d":"# create training and testing vars\nX_train1, X_test1, y_train1, y_test1 = train_test_split(X, y,stratify=y, test_size=0.2)","dabc5358":"score,predictions1,prob1 = decisiontree(X_train1,y_train1,X_test1,y_test1)\n\nprint(\"Decision Tree Prediction Score : \", score )\nprint(\"Classification Performance \\n\")\n\nclassification_performance(y_test1,predictions1)","409df7ed":"print(classification_report(y_test1, predictions1))","d0920e0d":"dectree_sm_auc = roc_auc_score(y_test1, prob1)\n\nprint(\"Decision Tree AUC for SM : \",dectree_sm_auc)","8c6fc667":"from collections import Counter\nfrom imblearn.over_sampling import SMOTE\n\nsmote = SMOTE()\nX_sm, y_sm = smote.fit_sample(X, y)\n# summarize the new class distribution\ncounter = Counter(y_sm)\nprint(counter)\n#print(type)","03539d90":"# create training and testing vars\nX_train_sm, X_test_sm, y_train_sm, y_test_sm = train_test_split(X_sm, y_sm,stratify=y_sm, test_size=0.2)","9e7dc84b":"score,predictions_sm, prob1 = decisiontree(X_train_sm,y_train_sm,X_test_sm,y_test_sm)\n\nprint(\"Decision Tree Prediction Score : \", score )\nprint(\"Classification Performance \\n\")\n\nclassification_performance(y_test_sm,predictions_sm)","f1966573":"print(classification_report(y_test_sm, predictions_sm))","0ff871b2":"dectree_sm_auc = roc_auc_score(y_test_sm, prob1)\n\nprint(\"Decision Tree AUC for Smoote approach : \",dectree_sm_auc)","4bf561a5":"from imblearn.pipeline import Pipeline\n#from imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\n\n# define pipeline\nover = SMOTE(sampling_strategy=0.8)\nunder = RandomUnderSampler(sampling_strategy=0.8)\nsteps = [('o', over), ('u', under)]\npipeline = Pipeline(steps=steps)\n# transform the dataset\nX_sm2, y_sm2 = pipeline.fit_resample(X, y)\n","e029217a":"# create training and testing vars\nX_train_sm2, X_test_sm2, y_train_sm2, y_test_sm2 = train_test_split(X_sm2, y_sm2,stratify=y_sm2, test_size=0.2)","fac697a0":"score,predictions_sm2,prob2 = decisiontree(X_train_sm2,y_train_sm2,X_test_sm2,y_test_sm2)\n\nprint(\"Decision Tree Prediction Score : \", score )\nprint(\"Classification Performance \\n\")\n\nclassification_performance(y_test_sm2,predictions_sm2)","9da8fb3f":"print(classification_report(y_test_sm2, predictions_sm2))","241acb15":"\nscore,predictions_sm2,prob2 = decisiontree(X_train_sm2,y_train_sm2,X_test_sm2,y_test_sm2)\n\ndectree_sm2_auc = roc_auc_score(y_test_sm2, prob2)\ndectree_sm_auc = roc_auc_score(y_test_sm, prob1)\ndectree_auc = roc_auc_score(y_test, prob)\n\nprint(\"Decision Tree AUC for Imbalanced Dataset : \",dectree_auc)\nprint(\"Decision Tree AUC for Complexing Smote Approach : \",dectree_sm2_auc)\nprint(\"Decision Tree AUC for Simple Smote Approach : \",dectree_sm_auc)","6fcff976":"from matplotlib import pyplot\n# calculate roc curves\nim_fpr, im_tpr, _ = roc_curve(y_test, prob)\npyplot.plot(im_fpr, im_tpr, linestyle='--', label='Decision Tree with Imbalanced Dataset')\n\nns_fpr, ns_tpr, _ = roc_curve(y_test_sm2, prob2)\npyplot.plot(ns_fpr, ns_tpr, linestyle='--', label='Decision Tree with SMOTE and UnderSampling')\nsm_fpr, sm_tpr, _ = roc_curve(y_test_sm, prob1)\npyplot.plot(sm_fpr, sm_tpr, linestyle='solid', label='Decision Tree with SMOTE')\n# axis labels\npyplot.xlabel('False Positive Rate')\npyplot.ylabel('True Positive Rate')\n# show the legend\npyplot.legend()\n# show the plot\npyplot.show()","7526a986":"\nfrom sklearn.model_selection import cross_val_score\n\nclassifier = DecisionTreeClassifier(max_depth=5, random_state=14)\n\ncv_scores = cross_val_score(classifier,X,y, cv=3, scoring='roc_auc')\nprint(cv_scores)","b84d90af":"from sklearn.model_selection import cross_val_score\n\nclassifier = DecisionTreeClassifier(max_depth=10, random_state=14)\n\ncv_scores = cross_val_score(classifier,X,y, cv=3, scoring='roc_auc')\nprint(cv_scores)","bdfb7c98":"from sklearn.model_selection import GridSearchCV\nparams = {'max_leaf_nodes': list(range(2, 100)), 'min_samples_split': [2, 3, 4],'max_depth': [5,10,15]}\ngrid_search_cv = GridSearchCV(DecisionTreeClassifier(random_state=42), params, verbose=1, cv=3,scoring='roc_auc')\ngrid_search_cv.fit(X, y)\nprint(grid_search_cv)\n# summarize the results of the grid search\nprint(grid_search_cv.best_score_)","c12b4d37":"print(\"Best Score :  \",grid_search_cv.best_score_)\nprint(\"Best Parameters : \",grid_search_cv.best_estimator_)\n","790895c4":"from sklearn.model_selection import RandomizedSearchCV\nparams = {'max_leaf_nodes': list(range(2, 100)), 'min_samples_split': [2, 3, 4],'max_depth': [15,25,35]}\nrandom_search_cv = RandomizedSearchCV(DecisionTreeClassifier(random_state=42), params, verbose=1, cv=3, scoring='roc_auc')\nrandom_search_cv.fit(X, y)\nprint(random_search_cv)\n# summarize the results of the grid search\nprint(random_search_cv.best_score_)","36556650":"print(\"Best Score :  \",random_search_cv.best_score_)\nprint(\"Best Parameters : \",random_search_cv.best_estimator_)\n","221404ee":"## Addressing Class Imbalance with SMOTE","91572bb2":"## Exploratory Data Analysis","9f46d42d":"## Data Loading","4276c356":"## Decision Tree Classifier with default Dataset","304322d5":"## Combining SMOTE with random Under-Sampling of the majority class","eb6874e4":"## ROC Curve and AUC Score","bf80d4ab":"## Using GridSearch Cross Validation for Tuning Parameters to Improve Classification Performance","cd8fd892":"AUC is also improved from 0.66 to 0.72 after using AUC.","bff35de1":"## Decision Tree Classifier with Selected Features","c8e258b1":"They all present an undocumented label -2. If 1,2,3, etc are the months of delay, 0 should be labeled 'pay duly' and every negative value should be seen as a 0. But we will get to that later.","85e93566":"What is the reason for negative bill amount. This needs to be investigated.","ad46a031":"In confusion matrix given above, we can see poor scores for minority class 1. We need to take steps to improve score for minority class.","473d22be":"# Finding Columns with NULL Values\n\nAs we see here, there are no null values in the dataset.","a4cf34d9":"## Analyzing Classification Performance\n\nWe can see that accuracy score is not accurately reflecting our classificaiton performance. Confusion matrix and classification reports show poor precision, recall, and F1 Score for class 1 as compared to clss 0.","8d288466":"## AUC using Cross-Validation","5aba476b":"Here, we can see some improvement in precision, recall and f1-score for class 1; however results are still disappointing despite use of stratification. We need to look for other strategies to resolve this issue.","06f1e114":"After using SMOTE to balance number of samples for minority class; we can see that we have been able to improve classification performance for class 1 for all relevant performance measures(precision, recall and f1-score). However f1-score is now around 0.73 dropping from 0.82.","43ee06ac":"## References\n\nhttps:\/\/campus.datacamp.com\/courses\/supervised-learning-with-scikit-learn\/fine-tuning-your-model?ex=7\n","cfda202b":"## Using RandomSearch Cross Validation for Tuning Parameters to Improve Classification Performance","2fe1dfa8":"# Finding Features Which are Highly Correlated with Target","dc248fb1":"## Target Distribution\n\nThis dataset employed a binary variable, default payment (Yes = 1, No = 0), as the response variable.\n","68947c32":"## Addressing Class Imbalance with Stratification","2a98977d":"Range is set very broadly, and needs to be investigated."}}