{"cell_type":{"b01e1628":"code","91447489":"code","548fe7ac":"code","0df56f9e":"code","c241695d":"code","8f57115f":"code","21acde27":"code","840669dd":"code","a4ce01ef":"code","c0f7112d":"code","682254a9":"code","eb81244e":"code","0c5c58b2":"code","e0ca7466":"code","c5b4aa0a":"code","908b3a8a":"markdown","5ff8772e":"markdown","f1ac5a02":"markdown","18a43b1f":"markdown","bcaf3be9":"markdown"},"source":{"b01e1628":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","91447489":"df_train = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")","548fe7ac":"df_train","0df56f9e":"import re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer","c241695d":"cleaned_tweet=[]\nfor i in range(0,len(df_train)):\n    tweet=re.sub('[^a-zA-Z]',' ',df_train['text'][i])\n    tweet=tweet.lower()\n    tweet=tweet.split()\n    ps=PorterStemmer()\n    tweet=[ps.stem(word) for word in tweet if not word in set(stopwords.words('english'))]\n    tweet=' '.join(tweet)\n    cleaned_tweet.append(tweet)","8f57115f":"cleaned_tweet_test=[]\nfor i in range(0,len(df_test)):\n    tweet=re.sub('[^a-zA-Z]',' ',df_test['text'][i])\n    tweet=tweet.lower()\n    tweet=tweet.split()\n    ps=PorterStemmer()\n    tweet=[ps.stem(word) for word in tweet if not word in set(stopwords.words('english'))]\n    tweet=' '.join(tweet)\n    cleaned_tweet_test.append(tweet)","21acde27":"print(cleaned_tweet_test)","840669dd":"from sklearn.feature_extraction.text import CountVectorizer\ncv=CountVectorizer()\nX = cv.fit_transform(cleaned_tweet)\ntest_vectors = cv.transform(cleaned_tweet_test)\ny=df_train['target']","a4ce01ef":"from sklearn import feature_extraction, linear_model, model_selection, preprocessing\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)","c0f7112d":"classifier = linear_model.RidgeClassifier()\nclassifier.fit(X_train, y_train)","682254a9":"y_pred = classifier.predict(X_test)\ny_pred","eb81244e":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","0c5c58b2":"y_pred_test = classifier.predict(test_vectors)\ny_pred_test","e0ca7466":"testpred=pd.DataFrame(y_pred_test)","c5b4aa0a":"sub_df=pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")\ndatasets=pd.concat([sub_df['id'],testpred],axis=1)\ndatasets.columns=['id','target']\ndatasets.to_csv('NewSubmission.csv',index=False)","908b3a8a":"# Cross Validation","5ff8772e":"# Model","f1ac5a02":"# BagOfWords","18a43b1f":"# Working on Test data","bcaf3be9":"# Cleaning"}}