{"cell_type":{"bcc71fdf":"code","b5fffec4":"code","64f4d3e5":"code","a1506e11":"code","d8cf89ed":"code","d44a64b3":"code","01c28dc0":"code","3e428ef8":"code","6ede1d92":"code","5ebf8a7b":"code","72fd6fe3":"code","dab5ea86":"code","6f82e303":"code","35ed5883":"code","e28b2e99":"code","7756a371":"code","c29b76bd":"code","1bcbc0f1":"code","5af3bd35":"code","c91d135f":"code","335f15b4":"code","cf8bbebc":"markdown","893f78ae":"markdown","a7a3696a":"markdown","8c442f98":"markdown","bb45129d":"markdown","ce1f6683":"markdown","f9ce5b37":"markdown","e2ee4100":"markdown","365090ce":"markdown","c00b32dc":"markdown","378e88de":"markdown","77c638d9":"markdown","dc753582":"markdown","5c90008d":"markdown","e6b60664":"markdown","613e3246":"markdown","146872d1":"markdown","c758c926":"markdown","fa98753b":"markdown","4f8b4f82":"markdown","815e95e9":"markdown"},"source":{"bcc71fdf":"# Directive pour afficher les graphiques dans Jupyter\n%matplotlib inline","b5fffec4":"# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import metrics\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.model_selection import train_test_split\n\nfrom IPython.core.display import HTML # permet d'afficher du code html dans jupyter","64f4d3e5":"from sklearn.model_selection import learning_curve\ndef plot_learning_curve(est, X_train, y_train) :\n    train_sizes, train_scores, test_scores = learning_curve(estimator=est, X=X_train, y=y_train, train_sizes=np.linspace(0.1, 1.0, 10),\n                                                        cv=5,\n                                                        n_jobs=-1)\n    train_mean = np.mean(train_scores, axis=1)\n    train_std = np.std(train_scores, axis=1)\n    test_mean = np.mean(test_scores, axis=1)\n    test_std = np.std(test_scores, axis=1)\n    plt.figure(figsize=(8,10))\n    plt.plot(train_sizes, train_mean, color='blue', marker='o', markersize=5, label='training accuracy')\n    plt.fill_between(train_sizes, train_mean + train_std, train_mean - train_std, alpha=0.15, color='blue')\n    plt.plot(train_sizes, test_mean,color='green', linestyle='--',marker='s', markersize=5,label='validation accuracy')\n    plt.fill_between(train_sizes,test_mean + test_std,test_mean - test_std,alpha=0.15, color='green')\n    plt.grid(b='on')\n    plt.xlabel('Number of training samples')\n    plt.ylabel('Accuracy')\n    plt.legend(loc='lower right')\n    plt.ylim([0.6, 1.0])\n    plt.show()","a1506e11":"def plot_roc_curve(est,X_test,y_test) :\n    probas = est.predict_proba(X_test)\n    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test,probas[:, 1])\n    roc_auc = auc(false_positive_rate, true_positive_rate)\n    plt.figure(figsize=(8,8))\n    plt.title('Receiver Operating Characteristic')\n    plt.plot(false_positive_rate, true_positive_rate, 'b', label='AUC = %0.2f'% roc_auc)\n    plt.legend(loc='lower right')\n    plt.plot([0,1],[0,1],'r--')        # plus mauvaise courbe\n    plt.plot([0,0,1],[0,1,1],'g:')     # meilleure courbe\n    plt.xlim([-0.05,1.2])\n    plt.ylim([-0.05,1.2])\n    plt.ylabel('Taux de vrais positifs')\n    plt.xlabel('Taux de faux positifs')\n    plt.show","d8cf89ed":"df = pd.read_csv(\"..\/input\/mnist-in-csv\/mnist_test.csv\")","d44a64b3":"df.shape","01c28dc0":"df.head(10)","3e428ef8":"y = df['label']","6ede1d92":"X = df.drop(['label'], axis=1)","5ebf8a7b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","72fd6fe3":"X1 = np.array(X)","dab5ea86":"print(X1[0])","6f82e303":"image = X1[0].reshape(28,28)\nprint(image)","35ed5883":"plt.imshow(image)","e28b2e99":"plt.imshow(image, cmap=\"gray_r\")\nplt.axis('off')\nplt.title(y[0])","7756a371":"n_samples = len(df.index)\nimages = images.reshape(n_samples,28,28)","c29b76bd":"plt.figure(figsize=(10,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(images[i], cmap=\"gray_r\")\n    plt.title(y[i])","1bcbc0f1":"from sklearn import ensemble\nrf = ensemble.RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)","5af3bd35":"plot_learning_curve(rf, X, y)","c91d135f":"print(classification_report(y_test, y_rf))","335f15b4":"cm = confusion_matrix(y_test, y_rf)\nprint(cm)","cf8bbebc":"On s\u00e9pare les ensembles d'apprentissage et de test :","893f78ae":"et les caract\u00e9ristiques X :","a7a3696a":"On peut maintenant afficher cette matrice :","8c442f98":"On affiche la premi\u00e8re ligne :","bb45129d":"Fonction pour tracer la courbe ROC :","ce1f6683":"On affiche les 50 premiers :","f9ce5b37":"## Librairies et fonctions utiles","e2ee4100":"On applique la m\u00e9thode **reshape** pour convertir cette ligne de 784 \u00e9l\u00e9ments en une matrice 28x28 :","365090ce":"en niveaux de gris, sans graduation des axes, et avec le label comme titre :","c00b32dc":"## Le dataset de chiffres manuscrits MNIST","378e88de":"On charge le dataset MNIST :","77c638d9":"### Exercice : tester Xgboost","dc753582":"On redimensionne toutes les lignes :","5c90008d":"# Reconnaissance de chiffres manuscrits : MNIST","e6b60664":"## Visualisation des images MNIST","613e3246":"Fonction pour tracer les courbes d'apprentissage sur l'ensemble d'apprentissage et l'ensemble de validation :","146872d1":"Pour visualiser les images, on va convertir une ligne de 784 pixels en une matrice 28x28  \nIl faut en premier transformer le dataframe X en un tableau :","c758c926":"On cr\u00e9e la cible y (colonne 'label') :","fa98753b":"On a 785 colonnes :\n* une colonne 'label' identifiant le chiffre  \n* et 784 colonnes de pixels (image de 28x28 pixels \"aplatie\")","4f8b4f82":"## Machine learning","815e95e9":"On peut maintenant appliquer les m\u00e9thodes de machine learning, mais auparavant on va visualiser les images"}}