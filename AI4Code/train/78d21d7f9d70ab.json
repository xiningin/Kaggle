{"cell_type":{"dadd2386":"code","78c7c7a8":"code","4c207e29":"code","4134733d":"code","dd91efc5":"code","b724d57a":"code","94cbf9b9":"code","79f8845e":"code","b611dfbb":"code","edfe2c58":"code","44b13242":"code","d88919df":"code","7f3f02f6":"code","b4383a17":"code","38183799":"code","4a86a4bc":"code","1a228c6b":"code","ca127702":"code","8084f221":"code","56368694":"code","34cbc583":"code","1e27d3f6":"code","a0db9bfb":"code","debfaf24":"code","15855b51":"code","20029eab":"code","575c65e3":"code","e9935cf0":"code","8d164c8e":"code","e1772a3b":"code","3a248331":"code","b0c896aa":"code","93af9164":"code","183e2189":"code","63357c9e":"code","124a8fa7":"code","dd3d85b8":"code","52ddae95":"code","f15bb2a3":"code","343a68c7":"code","3d57e238":"code","3779e102":"code","65f7785b":"code","45524f26":"code","f0f5ab0c":"code","e8c932ae":"code","67987bff":"code","a1d4a9b8":"code","bad7c845":"code","8e63ad88":"code","e86eecb0":"code","541c3d94":"code","e9ef0851":"code","43f3feb2":"code","1e1168ad":"code","cbcfd443":"code","ef5787ec":"code","04b5bb89":"code","00288879":"code","4ab9163c":"code","81b725a4":"code","12c8e44d":"code","02695203":"code","026cf20f":"code","2c50b19e":"code","a204ac0d":"code","7bc35a53":"code","38a390a8":"code","2a3a62ee":"code","8340f4e8":"code","62e559eb":"code","90b5d32e":"code","192f44d2":"code","f8b1a741":"code","58bf60cd":"code","d69fc13b":"code","db50283b":"code","ec27785c":"code","67200f57":"code","97c6bbd4":"markdown","71163b27":"markdown","451fec9b":"markdown","796591f0":"markdown","bfc80ab1":"markdown","9daca338":"markdown","5851ea4b":"markdown","0e195f31":"markdown","1e0c4448":"markdown","3b43405b":"markdown","843f9d27":"markdown","86a2f0e4":"markdown","5b77facf":"markdown"},"source":{"dadd2386":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","78c7c7a8":"import numpy as np\nimport pandas as pd\nimport gc\nimport time\n\n%matplotlib inline\n\n# Suppress warnings \nimport warnings\nwarnings.filterwarnings('ignore')\n\n# matplotlib and seaborn for plotting\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\npd.set_option('display.max_rows', 100)\npd.set_option('display.max_columns', 200)","4c207e29":"## \ud544\uc694\ud55c train\ub370\uc774\ud130\uc640 test\ub370\uc774\ud130 \uc77d\uae30\n\napp_train = pd.read_csv('..\/input\/home-credit-default-risk\/application_train.csv')\napp_test = pd.read_csv('..\/input\/home-credit-default-risk\/application_test.csv')","4134733d":"## app_train\uc758 \uc804\uccb4 \uceec\ub7fc \uac1c\uc218\ub294 122\uac1c \uc774\uba70, \uc774 \uc911\uc5d0\uc11c \uacb0\uce21\uce58\uac00 \uc788\ub294 \uceec\ub7fc \uac1c\uc218\ub294 67\uac1c \n\nprint(app_train.isnull().sum())\nprint(\"\uacb0\uce21\uce58 \uc788\ub294 \ucef4\ub7fc \uac1c\uc218: \",sum(app_train.isnull().sum()!=0))","dd91efc5":"## app_train\uc758 \uc804\uccb4 TARGET\uac12 \ubd84\ud3ec \ud655\uc778\n## TARGET=0\uc778 \uac12\uc774 TARGET=1\uc778 \uac12\ubcf4\ub2e4 \uc57d 10\ubc30 \uc815\ub3c4 \ub9ce\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4. \n## 0 : \ub300\ucd9c\uae08 \uc0c1\ud658 \uac00\ub2a5\n## 1 : \ub300\ucd9c\uae08 \uc0c1\ud658 \ub2a6\uc74c\n\napp_train['TARGET'].value_counts()","b724d57a":"## plot\uc744 \uc774\uc6a9\ud55c TARGET\uac12 \ubd84\ud3ec \uc2dc\uac01\ud654\n\napp_train['TARGET'].astype(int).value_counts().plot(kind='bar');","94cbf9b9":"## feature\ubcc4 target\uac12\uc5d0 \ub300\ud55c \ubd84\ud3ec\ub97c \ub098\ud0c0\ub0b4\ub294 \ud788\uc2a4\ud1a0\uadf8\ub7a8 \uc2dc\uac01\ud654 \ud568\uc218\ndef show_hist_by_target(df, columns):\n    cond_1 = (df['TARGET'] == 1)\n    cond_0 = (df['TARGET'] == 0)\n    \n    for column in columns:\n        fig, ax = plt.subplots(figsize=(12, 4), nrows=1, ncols=2, squeeze=False)\n        sns.violinplot(x='TARGET', y=column, data=df, ax=ax[0][0])\n        sns.distplot(df[cond_1][column], label='1', color='red', ax=ax[0][1])\n        sns.distplot(df[cond_0][column], label='0', color='blue', ax=ax[0][1])","79f8845e":"## Feature Importances \uc5d0\uc11c \uc911\uc694\ud558\uac8c \ub098\uc654\ub358 \uce7c\ub7fc\ub9cc \uac00\uc838\uc634\n\n## AMT_ANNUITY\ub294 TARGET=1\uc2dc \uc0c1\ub300\uc801\uc73c\ub85c \uc791\uc740 \uc22b\uc790\ub300\uc758 \uac12\uc774 \uc870\uae08 \ub9ce\ub2e4.\n## DAYS_BIRTH\ub294 TARGET=1\uc2dc \uc801\uc740 \uc5f0\ub839\ub300\uc758 \uc22b\uc790\uac12\uc774 \uc0c1\ub300\uc801\uc73c\ub85c \ub9ce\ub2e4.\n## DAYS_EMPLOYED\ub294 TARGET=1\uc2dc \uc791\uc740 \uac12\ub4e4\uc774 \uc870\uae08 \ub354 \ub9ce\ub2e4.\n## \ub098\uba38\uc9c0 \uceec\ub7fc\ubaa8\ub450 \ud070 \ucc28\uc774\uac00 \uc5c6\uc74c.\n\ncolumns = ['AMT_INCOME_TOTAL','AMT_CREDIT', 'AMT_ANNUITY', 'AMT_GOODS_PRICE', 'DAYS_BIRTH', 'DAYS_EMPLOYED', 'DAYS_ID_PUBLISH',\n           'DAYS_REGISTRATION', 'DAYS_LAST_PHONE_CHANGE', 'CNT_FAM_MEMBERS', 'REGION_RATING_CLIENT', 'EXT_SOURCE_1', \n           'EXT_SOURCE_2', 'EXT_SOURCE_3', 'AMT_REQ_CREDIT_BUREAU_HOUR', 'AMT_REQ_CREDIT_BUREAU_DAY', 'AMT_REQ_CREDIT_BUREAU_WEEK', \n           'AMT_REQ_CREDIT_BUREAU_MON', 'AMT_REQ_CREDIT_BUREAU_QRT', 'AMT_REQ_CREDIT_BUREAU_YEAR']\n\nshow_hist_by_target(app_train, columns)","b611dfbb":"## category \ud53c\ucc98(object \uceec\ub7fc)\uc744 TARGET \uc720\ud615\uc5d0 \ub530\ub77c Count \ube44\uad50\n\nobject_columns = app_train.dtypes[app_train.dtypes == 'object'].index.tolist()\nobject_columns","edfe2c58":"## catplot\uc744 \uc774\uc6a9\ud558\uba74 \ud0c0\uac9f\ubcc4\ub85c \ubd84\ud3ec\ub97c \ud655\uc778\ud558\uae30 \uc720\uc6a9\ud558\ub2e4.\n\ndef show_category_by_target(df, columns):\n    for column in columns:\n        chart = sns.catplot(x=column, col='TARGET', data=df, kind='count')\n        chart.set_xticklabels(rotation=65)\n\nshow_category_by_target(app_train, object_columns)","44b13242":"## \uace0\uac1d \ub098\uc774 \ubd84\ud3ec\uc5d0 \ub300\ud55c \ud788\uc2a4\ud1a0\uadf8\ub7a8 \uc2dc\uac01\ud654\n## 20\ub300, 70\ub300 \uc5f0\ub839\uc744 \uc81c\uc678\ud558\uace0 \ub098\uba38\uc9c0 \uc5f0\ub839\ub300\uc5d0\uc11c\ub294 \ube44\uc2b7\ud55c \ubd84\ud3ec\ub97c \ubcf4\uc778\ub2e4.\n## \uc774\uc0c1\uac12 \uc5c6\uc774 \uc885 \ubaa8\uc591 \ud615\ud0dc\ub85c \uace0\ub974\uac8c \ubd84\ud3ec\ub418\uc5b4 \uc788\ub2e4. \n\napp_train['DAYS_BIRTH']=abs(app_train['DAYS_BIRTH'])\nplt.style.use('fivethirtyeight')\n\nplt.hist(app_train['DAYS_BIRTH']\/365, edgecolor='k',bins=25)\nplt.title('Age of Client');\nplt.xlabel('Age (years)');\nplt.ylabel('Count');","d88919df":"plt.figure(figsize=(10,8))\n\n## \uc81c\ub54c \ub300\ucd9c\uc744 \uc0c1\ud658\ud558\ub294 \uace0\uac1d\uc758 \ub098\uc774 plot (TARGET=0)\n## 40\ub300\uc5d0\uc11c \ub192\uc740 \ubc00\ub3c4\ub97c \ubcf4\uc774\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4.\nsns.kdeplot(app_train.loc[app_train['TARGET']==0,'DAYS_BIRTH']\/365,label='target==0')\n\n## \uc81c\ub54c \ub300\ucd9c\uc744 \uc0c1\ud658\ud558\uc9c0\ubabb\ud558\ub294 \uace0\uac1d\uc758 \ub098\uc774 plot (TARGET=1)\n## 20-30\ub300\uc5d0\uc11c \ub192\uc740 \ubc00\ub3c4\ub97c \ubcf4\uc774\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4. \ub300\ucd9c\uc744 \uc0c1\ud658\uc744 \ubabb\ud560 \uac00\ub2a5\uc131\uc774 \ub192\ub2e4\ub294 \uc758\ubbf8\nsns.kdeplot(app_train.loc[app_train['TARGET']==1,'DAYS_BIRTH']\/365,label='target==1')\n\nplt.xlabel('Age(years)');\nplt.ylabel('Density');\nplt.title('Distribution of Ages');","7f3f02f6":"## CODE_GENDER \uceec\ub7fc\uc758 target \uac12\uc5d0 \ub530\ub978 \ubd84\ud3ec\ub97c \uc0b4\ud3b4\ubcf4\uc558\ub2e4. \ub0a8\ub140 \uc131\ubcc4\uc5d0 \ub530\ub978 \ucc28\uc774\ub97c \ud655\uc778\n## \ub300\ucd9c \ud69f\uc218 \ub300\ube44 \uc5f0\uccb4 \ube44\uc728\uc774 \ub0a8\uc131\uc774 \uc5ec\uc131\ubcf4\ub2e4 \ub192\uc74c\uc744 \uac80\uc99d\ncond_1 = (app_train['TARGET'] == 1)\ncond_0 = (app_train['TARGET'] == 0)\n\nprint('CODE_GENDER\\n')\nprint(app_train['CODE_GENDER'].value_counts()\/app_train.shape[0])\nprint('\\n\uc5f0\uccb4\uc778 \uacbd\uc6b0\\n',app_train[cond_1]['CODE_GENDER'].value_counts()\/app_train[cond_1].shape[0])\nprint('\\n\uc5f0\uccb4\uac00 \uc544\ub2cc \uacbd\uc6b0\\n',app_train[cond_0]['CODE_GENDER'].value_counts()\/app_train[cond_0].shape[0])","b4383a17":"## \uc591\uc758 \uc0c1\uad00\uad00\uacc4\uc640 \uc74c\uc758 \uc0c1\uad00\uad00\uacc4 \ub192\uc740 \uac83 \ud655\uc778\n## 'DAYS_BIRTH','DAYS_EMPLOYED','REGION_RATING_CLIENT_W_CITY'\uac00 \uc591\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ubcf4\uc774\ub294 \uac83\ub4e4 \uc911\uc5d0 \uac00\uc7a5 \ub192\uc558\ub2e4.\n\ncorr = app_train.corr()['TARGET'].sort_values()\n\nprint('\uc591\uc758 \uc0c1\uad00\uad00\uacc4 \uc0c1\uc70410\uac1c:\\n', corr.tail(10))\nprint('\\n\uc74c\uc758 \uc0c1\uad00\uad00\uacc4 \uc0c1\uc70410\uac1c:\\n', corr.head(10))","38183799":"## \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uc558\ub358 columns\uacfc \uad00\ub828\uc788\uc744 \uac83\uc73c\ub85c \ucd94\uc815\ub418\ub294 columns\uacfc TARGET\uac04\uc758 \uc0c1\uad00\uacc4\uc218\ud655\uc778\ncorr_columns = ['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3', 'DAYS_BIRTH','AMT_GOODS_PRICE','REGION_RATING_CLIENT_W_CITY',\n               'DAYS_EMPLOYED','DAYS_ID_PUBLISH', 'REGION_RATING_CLIENT', 'AMT_INCOME_TOTAL', 'TARGET']\n\ncol_corr = app_train[corr_columns].corr()\ncol_corr","4a86a4bc":"plt.figure(figsize=(20, 10))\nsns.heatmap(col_corr, annot=True)","1a228c6b":"## \uc74c\uc758 \uc0c1\uad00\uc774 \uac00\uc7a5 \ub192\uc558\ub358 3\uac1c\uc758 \ubcc0\uc218 EXT_SOURCE_1, EXT_SOURCE_2, EXT_SOURCE_3\n## TARGET \ubcc0\uc218\uc640 EXT_SOURCE\uc640\uc758 \uc0c1\uad00\uad00\uacc4\uc640 EXT_SOURCE \uc11c\ub85c\uac04\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \uc0b4\ud54c\n\next_data=app_train[['TARGET','EXT_SOURCE_1','EXT_SOURCE_2','EXT_SOURCE_3']]\next_data_corrs=ext_data.corr()\next_data_corrs","ca127702":"## EXT_SOURCE_1\uacfc DAYS_BIRTH\uac00 0.600610\uc73c\ub85c \uac00\uc7a5 \ub192\uc740 \uc0c1\uad00\uad00\uacc4\ub97c \ubcf4\uc778\ub2e4.\n\nplt.figure(figsize=(8,6))\n\nsns.heatmap(ext_data_corrs, cmap=plt.cm.RdYlBu_r, vmin=-0.25, annot=True, vmax=0.6)\nplt.title('Correlation Heatmap');","8084f221":"## # \uac01 EXT_SOURCE \ub97c TARGET\uac12 \ubcc4\ub85c \ub098\ub220\uc11c \ubd84\ud3ec\ub97c \uc0b4\ud54c\n\nplt.figure(figsize=(10,12))\n\n# iterate through the sources\nfor i, source in enumerate(['EXT_SOURCE_1','EXT_SOURCE_2','EXT_SOURCE_3']):\n    plt.subplot(3,1,i+1)\n    \n    sns.kdeplot(app_train.loc[app_train['TARGET']==0,source],label='target==0')\n    sns.kdeplot(app_train.loc[app_train['TARGET']==1,source],label='target==1')\n    \n    plt.title('Distribution of %s by Target Value' % source)\n    plt.xlabel('%s' %source);\n    plt.ylabel('Density');\nplt.tight_layout(h_pad=2.5)\n\n\n## EXT_SOURCE_2 \uc640 EXT_SOURCE_3\uc740 Target\uac12\uc5d0 \ub530\ub77c\uc11c \ubcc0\ud654\uac00 \uc874\uc7ac\ud55c\ub2e4\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4","56368694":"## \uc774\uc0c1\uce58 \ub370\uc774\ud130 \ud655\uc778 DAYS_EMPLOYED \uc774\uc0c1\uce58 \uac12 \ubcc0\uacbd\n\napp_train['DAYS_EMPLOYED'].value_counts()","34cbc583":"## \uc774\uc0c1\uce58 \uac12\uc778 365243\uc744 NaN\uac12\uc73c\ub85c \ubcc0\uacbd\n\napp_train['DAYS_EMPLOYED'] = app_train['DAYS_EMPLOYED'].replace(365243, np.nan)\napp_train['DAYS_EMPLOYED'].value_counts(dropna=False)","1e27d3f6":"## CODE_GENDER \uceec\ub7fc\uc5d0 \uc774\uc0c1\uce58 \uac12\uc778 XNA\uac12\uc774 4\uac1c \uc874\uc7ac\ud55c\ub2e4\ub294 \uac83\uc744 \ud655\uc778\n\napp_train['CODE_GENDER'].value_counts()","a0db9bfb":"## \ub370\uc774\ud130 \uac00\uacf5 \uc804 \ud559\uc2b5\uacfc \ud14c\uc2a4\ud2b8\uc6a9 \ub370\uc774\ud130 \uc138\ud2b8 \uacb0\ud569\napps = pd.concat([app_train, app_test])\nprint(apps.shape)","debfaf24":"## EXT_SOURCE_X FEATURE \uac00\uacf5\n\napps[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].mean(axis=1)\n## \uceec\ub7fc \ubc29\ud5a5\uc73c\ub85c \ud3c9\uade0\uc744 \uad6c\ud558\uae30 \uc704\ud574\uc11c axis=1 \ucd94\uac00 \ud574\uc57c\ud568","15855b51":"## max, min \ub3c4 \ud574\ubcfc \uc218 \uc788\uc9c0\ub9cc, \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uc740 \uac83\uc5d0 \ub300\ud574 \ub108\ubb34 \uac00\uacf5\ud558\uba74 \uc131\ub2a5\uc774 \uc624\ud788\ub824 \ub5a8\uc5b4\uc9c8 \uc218 \uc788\uc73c\ubbc0\ub85c mean\uacfc std \ub9cc \uad6c\ud55c\ub2e4\n\napps['APPS_EXT_SOURCE_MEAN'] = apps[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].mean(axis=1)\napps['APPS_EXT_SOURCE_STD'] = apps[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].std(axis=1)","20029eab":"## \uceec\ub7fc \uc911 NaN\uac12\uc774 \ud558\ub098\ub77c\ub3c4 \uc788\ub294 \uacbd\uc6b0 STD\ub97c \uacc4\uc0b0\ud55c APPS_EXT_SOURCE_STD \uceec\ub7fc \uac12\ub3c4 NaN\uc774\ub2e4.\n\napps[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3', 'APPS_EXT_SOURCE_STD']].head(10)","575c65e3":"## apps['APPS_EXT_SOURCE_STD'] \uc758 NA\uac12\uc744 \ud3c9\uade0\uac12(0.151008)\uc73c\ub85c \ub300\uccb4\ud558\uc5ec \ucc44\uc6cc\ub123\ub294\ub2e4.\n\napps['APPS_EXT_SOURCE_STD'] = apps['APPS_EXT_SOURCE_STD'].fillna(apps['APPS_EXT_SOURCE_STD'].mean())","e9935cf0":"apps[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3', 'APPS_EXT_SOURCE_STD']].head(10)","8d164c8e":"## AMT_CREDIT \ube44\uc728\ub85c Feature \uac00\uacf5\n\napps['APPS_ANNUITY_CREDIT_RATIO'] = apps['AMT_ANNUITY']\/apps['AMT_CREDIT']\napps['APPS_GOODS_CREDIT_RATIO'] = apps['AMT_GOODS_PRICE']\/apps['AMT_CREDIT']\napps['APPS_CREDIT_GOODS_DIFF'] = apps['AMT_CREDIT'] - apps['AMT_GOODS_PRICE']","e1772a3b":"## AMT_INCOME_TOTAL \ube44\uc728\ub85c Feature \uac00\uacf5\n\n## AMT_INCOME_TOTAL \ube44\uc728\ub85c \ub300\ucd9c \uae08\uc561 \uad00\ub828 \ud53c\ucc98 \uac00\uacf5\napps['APPS_ANNUITY_INCOME_RATIO'] = apps['AMT_ANNUITY']\/apps['AMT_INCOME_TOTAL']\napps['APPS_CREDIT_INCOME_RATIO'] = apps['AMT_CREDIT']\/apps['AMT_INCOME_TOTAL']\napps['APPS_GOODS_INCOME_RATIO'] = apps['AMT_GOODS_PRICE']\/apps['AMT_INCOME_TOTAL']\n\n## \uac00\uc871\uc218\ub97c \uace0\ub824\ud55c \uac00\ucc98\ubd84 \uc18c\ub4dd \ud53c\ucc98 \uac00\uacf5. \napps['APPS_CNT_FAM_INCOME_RATIO'] = apps['AMT_INCOME_TOTAL']\/apps['CNT_FAM_MEMBERS']\n","3a248331":"## DAYS_BIRTH, DAYS_EMPLOYED \ube44\uc728\ub85c Feature \uac00\uacf5\n\n## DAYS_BIRTH, DAYS_EMPLOYED \ube44\uc728\ub85c \uc18c\ub4dd\/\uc790\uc0b0 \uad00\ub828 Feature \uac00\uacf5. \napps['APPS_EMPLOYED_BIRTH_RATIO'] = apps['DAYS_EMPLOYED']\/apps['DAYS_BIRTH']\napps['APPS_INCOME_EMPLOYED_RATIO'] = apps['AMT_INCOME_TOTAL']\/apps['DAYS_EMPLOYED']\napps['APPS_INCOME_BIRTH_RATIO'] = apps['AMT_INCOME_TOTAL']\/apps['DAYS_BIRTH']\napps['APPS_CAR_BIRTH_RATIO'] = apps['OWN_CAR_AGE'] \/ apps['DAYS_BIRTH']\napps['APPS_CAR_EMPLOYED_RATIO'] = apps['OWN_CAR_AGE'] \/ apps['DAYS_EMPLOYED']","b0c896aa":"## \ub370\uc774\ud130 \ub808\uc774\ube14 \uc778\ucf54\ub529, NULL\uac12\uc740 LightGBM \ub0b4\ubd80\uc5d0\uc11c \ucc98\ub9ac\ud558\ub3c4\ub85d \ud2b9\ubcc4\ud55c \ubcc0\uacbd\ud558\uc9c0 \uc54a\uc74c.\n\nobject_columns = apps.dtypes[apps.dtypes=='object'].index.tolist()\n\nfor column in object_columns:\n    apps[column] = pd.factorize(apps[column])[0]","93af9164":"## \ud559\uc2b5 \ub370\uc774\ud130\uc640 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ub2e4\uc2dc \ubd84\ub9ac\n\napps_train = apps[-apps['TARGET'].isnull()]\napps_test = apps[apps['TARGET'].isnull()]\napps.shape, apps_train.shape, apps_test.shape","183e2189":"from sklearn.model_selection import train_test_split\n\nftr_app = apps_train.drop(['SK_ID_CURR', 'TARGET'], axis=1)\ntarget_app = app_train['TARGET']\n\ntrain_x, valid_x, train_y, valid_y = train_test_split(ftr_app, target_app, test_size=0.3, random_state=2020)\ntrain_x.shape, valid_x.shape\n","63357c9e":"from lightgbm import LGBMClassifier\n\nclf = LGBMClassifier(\n        n_jobs=-1,\n        n_estimators=1000,\n        learning_rate=0.02,\n        num_leaves=32,\n        subsample=0.8,\n        max_depth=12,\n        silent=-1,\n        verbose=-1\n        )","124a8fa7":"clf.fit(train_x, train_y, eval_set=[(train_x, train_y), (valid_x, valid_y)], eval_metric= 'auc', verbose= 100, \n        early_stopping_rounds= 100)","dd3d85b8":"## plot_importance\ub77c\uc774\ube0c\ub7ec\ub9b4 \ud1b5\ud574\uc11c Feature Importances \ud655\uc778\n## APPS_ANNUITY_CREDIT_RATIO\uac00 \uac00\uc7a5 \ub192\uc740 \uc911\uc694\ub85c\ub4e4 \ubcf4\uc774\uace0 \uc788\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4.\n\nfrom lightgbm import plot_importance\n\nplot_importance(clf, figsize=(16, 32))","52ddae95":"## \ud559\uc2b5\ub41c Classifier\ub97c \uc774\uc6a9\ud558\uc5ec \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc608\uce21\n\npreds = clf.predict_proba(apps_test.drop(['SK_ID_CURR', 'TARGET'], axis=1))[:, 1 ]","f15bb2a3":"app_test['TARGET'] = preds\napp_test[['SK_ID_CURR', 'TARGET']].to_csv('apps_baseline_02.csv', index=False)","343a68c7":"## \uc774\uc804 application \ub370\uc774\ud130\uc758 feature engineering \ubd80\ubd84\uc744 \ud568\uc218\ub85c \ub9cc\ub4e4\uc5b4 \ubcf5\uc0ac\ndef get_apps_processed(apps):\n    \n    # EXT_SOURCE_X FEATURE \uac00\uacf5\n    apps['APPS_EXT_SOURCE_MEAN'] = apps[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].mean(axis=1)\n    apps['APPS_EXT_SOURCE_STD'] = apps[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].std(axis=1)\n    apps['APPS_EXT_SOURCE_STD'] = apps['APPS_EXT_SOURCE_STD'].fillna(apps['APPS_EXT_SOURCE_STD'].mean())\n    \n    # AMT_CREDIT \ube44\uc728\ub85c Feature \uac00\uacf5\n    apps['APPS_ANNUITY_CREDIT_RATIO'] = apps['AMT_ANNUITY']\/apps['AMT_CREDIT']\n    apps['APPS_GOODS_CREDIT_RATIO'] = apps['AMT_GOODS_PRICE']\/apps['AMT_CREDIT']\n    \n    # AMT_INCOME_TOTAL \ube44\uc728\ub85c Feature \uac00\uacf5\n    apps['APPS_ANNUITY_INCOME_RATIO'] = apps['AMT_ANNUITY']\/apps['AMT_INCOME_TOTAL']\n    apps['APPS_CREDIT_INCOME_RATIO'] = apps['AMT_CREDIT']\/apps['AMT_INCOME_TOTAL']\n    apps['APPS_GOODS_INCOME_RATIO'] = apps['AMT_GOODS_PRICE']\/apps['AMT_INCOME_TOTAL']\n    apps['APPS_CNT_FAM_INCOME_RATIO'] = apps['AMT_INCOME_TOTAL']\/apps['CNT_FAM_MEMBERS']\n    \n    # DAYS_BIRTH, DAYS_EMPLOYED \ube44\uc728\ub85c Feature \uac00\uacf5\n    apps['APPS_EMPLOYED_BIRTH_RATIO'] = apps['DAYS_EMPLOYED']\/apps['DAYS_BIRTH']\n    apps['APPS_INCOME_EMPLOYED_RATIO'] = apps['AMT_INCOME_TOTAL']\/apps['DAYS_EMPLOYED']\n    apps['APPS_INCOME_BIRTH_RATIO'] = apps['AMT_INCOME_TOTAL']\/apps['DAYS_BIRTH']\n    apps['APPS_CAR_BIRTH_RATIO'] = apps['OWN_CAR_AGE'] \/ apps['DAYS_BIRTH']\n    apps['APPS_CAR_EMPLOYED_RATIO'] = apps['OWN_CAR_AGE'] \/ apps['DAYS_EMPLOYED']\n    \n    return apps","3d57e238":"## previous \ub370\uc774\ud130 \ub85c\ub529\n\nprev = pd.read_csv('..\/input\/home-credit-default-risk\/previous_application.csv')\nprint(prev.shape, apps.shape)","3779e102":"prev.head()","65f7785b":"## \uc8fc\uc694 \uceec\ub7fc\uc778 SK_ID_CURR EDA\n## SK_ID_CURR\ub2f9 \ud3c9\uade0 SK_ID_PREV \uac74\uc218 \uad6c\ud558\uae30\n\nprev.groupby('SK_ID_CURR')['SK_ID_CURR'].count().mean()","45524f26":"## \ud3c9\uade0\uac12\uc774 4.928964135313716\uc73c\ub85c 0\uc5d0\uc11c 20\ud68c \uc0ac\uc774\uc5d0 \ubc15\uc2a4\uac00 \uc874\uc7ac\ud558\uba70 \uc774\uc0c1\uce58 \uac12\ub4e4\uc774 \ub9ce\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4.\n\nsns.boxplot(prev.groupby('SK_ID_CURR')['SK_ID_CURR'].count())","f0f5ab0c":"# app_train[['SK_ID_CURR', 'TARGET']] \ub450\uac00\uc9c0 \uceec\ub7fc\uc744 \uac00\uc9c0\uace0 on='SK_ID_CURR' \uc870\uc778\n\napp_prev_target = prev.merge(app_train[['SK_ID_CURR', 'TARGET']], on='SK_ID_CURR', how='left')\napp_prev_target.shape","e8c932ae":"# \uc22b\uc790\ud615 dtype \uac16\uace0 \uc788\ub294 \uceec\ub7fc\ub9cc \ucd94\ucd9c\nnum_columns = app_prev_target.dtypes[app_prev_target.dtypes != 'object'].index.tolist()\nnum_columns","67987bff":"## TARGET\uc5d0 \ub530\ub77c \uc22b\uc790\ud615 \ud53c\ucc98\ub4e4\uc758 Histogram\n\nshow_hist_by_target(app_prev_target, num_columns)","a1d4a9b8":"## Category dtype \uac16\uace0 \uc788\ub294 \uceec\ub7fc\ub9cc \ucd94\ucd9c\n\nobject_columns = app_prev_target.dtypes[app_prev_target.dtypes=='object'].index.tolist()\nobject_columns","bad7c845":"## TARGET\uc5d0 \ub530\ub77c Category \ud53c\ucc98\ub4e4\uc758 Histogram\n\nshow_category_by_target(app_prev_target, object_columns)","8e63ad88":"# \uc2e0\uccad\uae08\uc561\uacfc \uc2e4\uc81c \ub300\ucd9c\uc561, \uc0c1\ud488\uae08\uc561\uacfc\uc758 \ucc28\uc774 \ube44\uc728, \ub9cc\uae30\uc77c \ucc28\uc774 \ube44\uad50, \uc774\uc790\uc728 \uacc4\uc0b0\ub4f1\uc758 \uc8fc\uc694 \uceec\ub7fc \uac00\uacf5 \uc0dd\uc0b0. \n\ndef get_prev_processed(prev):\n    # \ub300\ucd9c \uc2e0\uccad \uae08\uc561\uacfc \uc2e4\uc81c \ub300\ucd9c\uc561\/\ub300\ucd9c \uc0c1\ud488\uae08\uc561 \ucc28\uc774 \ubc0f \ube44\uc728\n    prev['PREV_CREDIT_DIFF'] = prev['AMT_APPLICATION'] - prev['AMT_CREDIT']\n    prev['PREV_GOODS_DIFF'] = prev['AMT_APPLICATION'] - prev['AMT_GOODS_PRICE']\n    prev['PREV_CREDIT_APPL_RATIO'] = prev['AMT_CREDIT']\/prev['AMT_APPLICATION']\n    prev['PREV_ANNUITY_APPL_RATIO'] = prev['AMT_ANNUITY']\/prev['AMT_APPLICATION']\n    prev['PREV_GOODS_APPL_RATIO'] = prev['AMT_GOODS_PRICE']\/prev['AMT_APPLICATION']\n    # DAYS_XXX \ud53c\ucc98\uc758 365243(\uc774\uc0c1\uce58) \uc744 NULL\ub85c \ubcc0\ud658\n    prev['DAYS_FIRST_DRAWING'].replace(365243, np.nan, inplace= True)\n    prev['DAYS_FIRST_DUE'].replace(365243, np.nan, inplace= True)\n    prev['DAYS_LAST_DUE_1ST_VERSION'].replace(365243, np.nan, inplace= True)\n    prev['DAYS_LAST_DUE'].replace(365243, np.nan, inplace= True)\n    prev['DAYS_TERMINATION'].replace(365243, np.nan, inplace= True)\n    # \uccab\ubc88\uc9f8 \ub9cc\uae30\uc77c\uacfc \ub9c8\uc9c0\ub9c9 \ub9cc\uae30\uc77c\uae4c\uc9c0\uc758 \uae30\uac04\n    prev['PREV_DAYS_LAST_DUE_DIFF'] = prev['DAYS_LAST_DUE_1ST_VERSION'] - prev['DAYS_LAST_DUE']\n    # \ub9e4\uc6d4 \ub0a9\ubd80 \uae08\uc561\uacfc \ub0a9\ubd80 \ud69f\uc218 \uacf1\ud574\uc11c \uc804\uccb4 \ub0a9\ubd80 \uae08\uc561 \uad6c\ud568. \n    all_pay = prev['AMT_ANNUITY'] * prev['CNT_PAYMENT']\n    # \uae30\uc874 \uc774\uc790\uc728 \uad00\ub828 \uceec\ub7fc\uc778 RATE_INTEREST_PRIVILEGED\uc758 \uacbd\uc6b0 Null\uac12\uc774 \ub9ce\uc544\uc11c \uc0c8\ub86d\uac8c \uc774\uc790\uc728\uc5d0\ub300\ud55c \uceec\ub7fc \uc0dd\n    # \uc804\uccb4 \ub0a9\ubd80 \uae08\uc561 \ub300\ube44 AMT_CREDIT \ube44\uc728\uc744 \uad6c\ud558\uace0 \uc5ec\uae30\uc5d0 \ub2e4\uc2dc \ub0a9\ubd80\ud69f\uc218\ub85c \ub098\ub204\uc5b4\uc11c \uc774\uc790\uc728 \uacc4\uc0b0. \n    prev['PREV_INTERESTS_RATE'] = (all_pay\/prev['AMT_CREDIT'] - 1)\/prev['CNT_PAYMENT']\n        \n    return prev","e86eecb0":"# \uae30\uc874 \uceec\ub7fc\ubc0f \uc704\uc5d0\uc11c \uac00\uacf5\ub41c \uc2e0\uaddc \uceec\ub7fc\ub4e4\uc5d0 \ub300\ud574\uc11c SK_ID_CURR \ub808\ubca8\ub85c Aggregation \uc218\ud589.  \ndef get_prev_amt_agg(prev):\n\n    agg_dict = {\n         # \uae30\uc874 \uc8fc\uc694 \uceec\ub7fc\ub4e4\uc744 SK_ID_CURR \ub808\ubca8\ub85c Aggregation \uc218\ud589\n        'SK_ID_CURR':['count'],\n        'AMT_CREDIT':['mean', 'max', 'sum'],\n        'AMT_ANNUITY':['mean', 'max', 'sum'], \n        'AMT_APPLICATION':['mean', 'max', 'sum'],\n        'AMT_DOWN_PAYMENT':['mean', 'max', 'sum'],\n        'AMT_GOODS_PRICE':['mean', 'max', 'sum'],\n        'RATE_DOWN_PAYMENT': ['min', 'max', 'mean'],\n        'DAYS_DECISION': ['min', 'max', 'mean'],\n        'CNT_PAYMENT': ['mean', 'sum'],\n        # \uc2e0\uaddc \uac00\uacf5 \uceec\ub7fc\ub4e4\uc744 SK_ID_CURR \ub808\ubca8\ub85c Aggregation \uc218\ud589\n        'PREV_CREDIT_DIFF':['mean', 'max', 'sum'], \n        'PREV_CREDIT_APPL_RATIO':['mean', 'max'],\n        'PREV_GOODS_DIFF':['mean', 'max', 'sum'],\n        'PREV_GOODS_APPL_RATIO':['mean', 'max'],\n        'PREV_DAYS_LAST_DUE_DIFF':['mean', 'max', 'sum'],\n        'PREV_INTERESTS_RATE':['mean', 'max']\n    }\n\n    prev_group = prev.groupby('SK_ID_CURR')\n    prev_amt_agg = prev_group.agg(agg_dict)\n\n    # multi index \uceec\ub7fc\uc744 '_'\ub85c \uc5f0\uacb0\ud558\uc5ec \uceec\ub7fc\uba85 \ubcc0\uacbd\n    prev_amt_agg.columns = [\"PREV_\"+ \"_\".join(x).upper() for x in prev_amt_agg.columns.ravel()]\n    \n    # 'SK_ID_CURR'\ub85c \uc870\uc778\ud558\uae30 \uc704\ud574 SK_ID_CURR\uc744 \uceec\ub7fc\uc73c\ub85c \ubcc0\ud658  \n    prev_amt_agg = prev_amt_agg.reset_index()\n    \n    return prev_amt_agg","541c3d94":"# NAME_CONTRACT_STATUS\uc758 SK_ID_CURR\ubcc4 Approved, Refused\uc758 \uac74\uc218 \uacc4\uc0b0.  \ndef get_prev_refused_appr_agg(prev):\n    # \uc6d0\ub798 groupby \uceec\ub7fc + \uc138\ubd80 \uae30\uc900 \uceec\ub7fc\uc73c\ub85c groupby \uc218\ud589. \uc138\ubd84\ud654\ub41c \ub808\ubca8\ub85c aggregation \uc218\ud589 \ud55c \ub4a4\uc5d0 unstack()\uc73c\ub85c \uceec\ub7fc\ub808\ubca8\ub85c \ubcc0\ud615. \n    # NAME_CONTRACT_STATUS\ub85c group\uc744 \ub9cc\ub4e4\uc5b4 Approved\uc640 Refused\uc758 \uac12\uc744 \ud655\uc778\n    prev_refused_appr_group = prev[prev['NAME_CONTRACT_STATUS'].isin(['Approved', 'Refused'])].groupby([ 'SK_ID_CURR', 'NAME_CONTRACT_STATUS'])\n    prev_refused_appr_agg = prev_refused_appr_group['SK_ID_CURR'].count().unstack()\n    # \uceec\ub7fc\uba85 \ubcc0\uacbd. \n    prev_refused_appr_agg.columns = ['PREV_APPROVED_COUNT', 'PREV_REFUSED_COUNT' ]\n    # NaN\uac12\uc740 \ubaa8\ub450 0\uc73c\ub85c \ubcc0\uacbd. \n    prev_refused_appr_agg = prev_refused_appr_agg.fillna(0)\n    \n    # 'SK_ID_CURR'\ub85c \uc870\uc778\ud558\uae30 \uc704\ud574 SK_ID_CURR\uc744 \uceec\ub7fc\uc73c\ub85c \ubcc0\ud658  \n    prev_refused_appr_agg = prev_refused_appr_agg.reset_index()\n    \n    return prev_refused_appr_agg","e9ef0851":"# \uc55e\uc5d0\uc11c \uad6c\ud55c prev_amt_agg\uc640 prev_refused_appr_agg\ub97c \uc870\uc778\ud558\uace0 SK_ID_CURR\ubcc4 APPROVED_COUNT \ubc0f REFUSED_COUNT \ube44\uc728 \uc0dd\uc131\ndef get_prev_agg(prev):\n    prev = get_prev_processed(prev)\n    prev_amt_agg = get_prev_amt_agg(prev)\n    prev_refused_appr_agg = get_prev_refused_appr_agg(prev)\n    \n    # prev_amt_agg\uc640 \uc870\uc778. \n    prev_agg = prev_amt_agg.merge(prev_refused_appr_agg, on='SK_ID_CURR', how='left')\n    # SK_ID_CURR\ubcc4 \uacfc\uac70 \ub300\ucd9c\uac74\uc218 \ub300\ube44 APPROVED_COUNT \ubc0f REFUSED_COUNT \ube44\uc728 \uc0dd\uc131. \n    prev_agg['PREV_REFUSED_RATIO'] = prev_agg['PREV_REFUSED_COUNT']\/prev_agg['PREV_SK_ID_CURR_COUNT']\n    prev_agg['PREV_APPROVED_RATIO'] = prev_agg['PREV_APPROVED_COUNT']\/prev_agg['PREV_SK_ID_CURR_COUNT']\n    # 'PREV_REFUSED_COUNT', 'PREV_APPROVED_COUNT' \uceec\ub7fc drop \n    prev_agg = prev_agg.drop(['PREV_REFUSED_COUNT', 'PREV_APPROVED_COUNT'], axis=1)\n    \n    return prev_agg","43f3feb2":"# apps\uc640 previous \ub370\uc774\ud130 \uc138\ud2b8\ub97c SK_ID_CURR\ub808\ubca8\ub85c \ub2e4\uc591\ud55c \uceec\ub7fc\uc774 aggregation\ub418\uc5b4 \uc788\ub294 prev_agg \uc870\uc778\n# \uac00\uacf5\ub41c \ucd5c\uc885 \ub370\uc774\ud130 \uc138\ud2b8 \uc0dd\uc131\ndef get_apps_all_with_prev_agg(apps, prev):\n    apps_all =  get_apps_processed(apps)\n    prev_agg = get_prev_agg(prev)\n    print('prev_agg shape:', prev_agg.shape)\n    print('apps_all before merge shape:', apps_all.shape)\n    apps_all = apps_all.merge(prev_agg, on='SK_ID_CURR', how='left')\n    print('apps_all after merge with prev_agg shape:', apps_all.shape)\n    \n    return apps_all","1e1168ad":"# Label \uc778\ucf54\ub529 \uc218\ud589. \ndef get_apps_all_encoded(apps_all):\n    object_columns = apps_all.dtypes[apps_all.dtypes == 'object'].index.tolist()\n    for column in object_columns:\n        apps_all[column] = pd.factorize(apps_all[column])[0]\n    \n    return apps_all","cbcfd443":"# \ud559\uc2b5 \ub370\uc774\ud130\uc640 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc138\ud2b8 \ubd84\ub9ac. \ndef get_apps_all_train_test(apps_all):\n    apps_all_train = apps_all[~apps_all['TARGET'].isnull()]\n    apps_all_test = apps_all[apps_all['TARGET'].isnull()]\n\n    apps_all_test = apps_all_test.drop('TARGET', axis=1)\n    \n    return apps_all_train, apps_all_test","ef5787ec":"# \ud559\uc2b5 \uc218\ud589. \ndef train_apps_all(apps_all_train):\n    # \ud559\uc2b5 \ub370\uc774\ud130\ub97c \uac80\uc99d \ub370\uc774\ud130\ub85c \ubd84\ub9ac\n    ftr_app = apps_all_train.drop(['SK_ID_CURR', 'TARGET'], axis=1)\n    target_app = apps_all_train['TARGET']\n\n    train_x, valid_x, train_y, valid_y = train_test_split(ftr_app, target_app, test_size=0.3, random_state=2020)\n    print('train shape:', train_x.shape, 'valid shape:', valid_x.shape)\n    clf = LGBMClassifier(\n            n_jobs=-1,\n            n_estimators=1000,\n            learning_rate=0.02,\n            num_leaves=32,\n            subsample=0.8,\n            max_depth=12,\n            silent=-1,\n            verbose=-1\n                )\n\n    clf.fit(train_x, train_y, eval_set=[(train_x, train_y), (valid_x, valid_y)], eval_metric= 'auc', verbose= 100, \n                early_stopping_rounds= 100)\n    \n    return clf","04b5bb89":"def get_dataset():\n    app_train = pd.read_csv('..\/input\/home-credit-default-risk\/application_train.csv')\n    app_test = pd.read_csv('..\/input\/home-credit-default-risk\/application_test.csv')\n    \n    apps = pd.concat([app_train, app_test])\n    prev = pd.read_csv('..\/input\/home-credit-default-risk\/previous_application.csv')\n    return apps, prev","00288879":"apps, prev = get_dataset()\napps_all = get_apps_all_with_prev_agg(apps, prev)\napps_all = get_apps_all_encoded(apps_all)\napps_all_train, apps_all_test = get_apps_all_train_test(apps_all)\nclf = train_apps_all(apps_all_train)","4ab9163c":"## application \ub370\uc774\ud130 \uc14b\ub9cc \uc0ac\uc6a9\ud560\ub54c\uc640 \ub2e4\ub978 Feature Importance \uacb0\uacfc\ub97c \ud655\uc778 \ud560 \uc218 \uc788\ub2e4.\n## \ud558\uc9c0\ub9cc, \uc0c1\uc704\uad8c\uc5d0 \uc874\uc7ac\ud558\ub294 \ubcc0\uc218\ub4e4\uc740 \uc21c\uc11c\ub294 \ub2e4\ub974\uc9c0\ub9cc \ube44\uc2b7\ud558\uac8c \uc874\uc7ac\ud55c\ub2e4.\n\nplot_importance(clf, figsize=(16, 32))","81b725a4":"preds = clf.predict_proba(apps_all_test.drop(['SK_ID_CURR'], axis=1))[:, 1 ]\napps_all_test['TARGET'] = preds\napps_all_test[['SK_ID_CURR', 'TARGET']].to_csv('prev_baseline_03.csv', index=False)","12c8e44d":"bureau = pd.read_csv('..\/input\/home-credit-default-risk\/bureau.csv')\nbureau_bal = pd.read_csv('..\/input\/home-credit-default-risk\/bureau_balance.csv')","02695203":"# TARGET \uac12\uc744 \uac00\uc838\uc624\uae30 \uc704\ud574 bureau\ub97c apps\uc640 \uc870\uc778\nbureau_app = bureau.merge(app_train[['SK_ID_CURR', 'TARGET']], left_on='SK_ID_CURR', right_on='SK_ID_CURR', how='inner')\nbureau_app.shape","026cf20f":"bureau_app['TARGET'].astype(int).value_counts().plot(kind='bar');","2c50b19e":"## \uc22b\uc790\ud615 \ud53c\ucc98\ub4e4\uc758 Histogram\uc744 TARGET \uc720\ud615\uc5d0 \ub530\ub77c \ube44\uad50\n\nnum_columns = bureau_app.dtypes[bureau_app.dtypes != 'object'].index.tolist()\n# \uc22b\uc790\ud615 \uceec\ub7fc\uc911 ID\uc640 TARGET\uc740 \uc81c\uc678\nnum_columns = [column for column in num_columns if column not in['SK_ID_BUREAU', 'SK_ID_CURR', 'TARGET']]\nnum_columns","a204ac0d":"show_hist_by_target(bureau_app, num_columns)","7bc35a53":"## Category \ud53c\ucc98\ub4e4\uc758 Histogram\uc744 TARGET \uc720\ud615\uc5d0 \ub530\ub77c \ube44\uad50\n\nobject_columns = bureau.dtypes[bureau.dtypes=='object'].index.tolist()\nobject_columns","38a390a8":"show_category_by_target(bureau_app, object_columns)","2a3a62ee":"# correlated features\n\ncorrmat = bureau_app.corr()\ntop_corr_features = corrmat.index[abs(corrmat[\"TARGET\"])>=0.03]\nplt.figure(figsize=(12,8))\ng = sns.heatmap(bureau_app[top_corr_features].corr(),annot=True,cmap=\"Oranges\")","8340f4e8":"# bureau \ucc44\ubb34 \uc644\ub8cc \ub0a0\uc9dc \ubc0f \ub300\ucd9c \uae08\uc561 \ub300\ube44 \ucc44\ubb34 \uae08\uc561 \uad00\ub828 \uceec\ub7fc \uac00\uacf5.\ndef get_bureau_processed(bureau):\n    # \uc608\uc815 \ucc44\ubb34 \uc2dc\uc791 \ubc0f \uc644\ub8cc\uc77c\uacfc \uc2e4\uc81c \ucc44\ubb34 \uc644\ub8cc\uc77c\uac04\uc758 \ucc28\uc774 \ubc0f \ub0a0\uc9dc \ube44\uc728 \uac00\uacf5.  \n    bureau['BUREAU_ENDDATE_FACT_DIFF'] = bureau['DAYS_CREDIT_ENDDATE'] - bureau['DAYS_ENDDATE_FACT']\n    bureau['BUREAU_CREDIT_FACT_DIFF'] = bureau['DAYS_CREDIT'] - bureau['DAYS_ENDDATE_FACT']\n    bureau['BUREAU_CREDIT_ENDDATE_DIFF'] = bureau['DAYS_CREDIT'] - bureau['DAYS_CREDIT_ENDDATE']\n  \n    # \ucc44\ubb34 \uae08\uc561 \ub300\ube44\/\ub300\ucd9c \uae08\uc561 \ube44\uc728 \ubc0f \ucc28\uc774 \uac00\uacf5\n    bureau['BUREAU_CREDIT_DEBT_RATIO']=bureau['AMT_CREDIT_SUM_DEBT']\/bureau['AMT_CREDIT_SUM']\n    #bureau['BUREAU_CREDIT_DEBT_DIFF'] = bureau['AMT_CREDIT_SUM'] - bureau['AMT_CREDIT_SUM_DEBT']\n    bureau['BUREAU_CREDIT_DEBT_DIFF'] = bureau['AMT_CREDIT_SUM_DEBT'] - bureau['AMT_CREDIT_SUM']\n\n    bureau['BUREAU_IS_DPD'] = bureau['CREDIT_DAY_OVERDUE'].apply(lambda x: 1 if x > 0 else 0)\n    bureau['BUREAU_IS_DPD_OVER120'] = bureau['CREDIT_DAY_OVERDUE'].apply(lambda x: 1 if x >120 else 0)\n    \n    return bureau","62e559eb":"# bureau \uc8fc\uc694 \uceec\ub7fc \ubc0f \uc55e\uc5d0\uc11c \ucc44\ubb34 \ubc0f \ub300\ucd9c\uae08\uc561 \uad00\ub828 \uceec\ub7fc\ub4e4\ub85c SK_ID_CURR \ub808\ubca8\uc758 aggregation \uceec\ub7fc \uc0dd\uc131. \ndef get_bureau_day_amt_agg(bureau):\n        \n    bureau_agg_dict = {\n    'SK_ID_BUREAU':['count'],\n    'DAYS_CREDIT':['min', 'max', 'mean'],\n    'CREDIT_DAY_OVERDUE':['min', 'max', 'mean'],\n    'DAYS_CREDIT_ENDDATE':['min', 'max', 'mean'],\n    'DAYS_ENDDATE_FACT':['min', 'max', 'mean'],\n    'AMT_CREDIT_MAX_OVERDUE': ['max', 'mean'],\n    'AMT_CREDIT_SUM': ['max', 'mean', 'sum'],\n    'AMT_CREDIT_SUM_DEBT': ['max', 'mean', 'sum'],\n    'AMT_CREDIT_SUM_OVERDUE': ['max', 'mean', 'sum'],\n    'AMT_ANNUITY': ['max', 'mean', 'sum'],\n    # \ucd94\uac00 \uac00\uacf5 \uceec\ub7fc\n    'BUREAU_ENDDATE_FACT_DIFF':['min', 'max', 'mean'],\n    'BUREAU_CREDIT_FACT_DIFF':['min', 'max', 'mean'],\n    'BUREAU_CREDIT_ENDDATE_DIFF':['min', 'max', 'mean'],\n    'BUREAU_CREDIT_DEBT_RATIO':['min', 'max', 'mean'],\n    'BUREAU_CREDIT_DEBT_DIFF':['min', 'max', 'mean'],\n    'BUREAU_IS_DPD':['mean', 'sum'],\n    'BUREAU_IS_DPD_OVER120':['mean', 'sum']\n    }\n\n    bureau_grp = bureau.groupby('SK_ID_CURR')\n    bureau_day_amt_agg = bureau_grp.agg(bureau_agg_dict)\n    bureau_day_amt_agg.columns = ['BUREAU_'+('_').join(column).upper() for column in bureau_day_amt_agg.columns.ravel()]\n    # \uc870\uc778\uc744 \uc704\ud574 SK_ID_CURR\uc744 reset_index()\ub85c \uceec\ub7fc\ud654 \n    bureau_day_amt_agg = bureau_day_amt_agg.reset_index()\n    print('bureau_day_amt_agg shape:', bureau_day_amt_agg.shape)\n    return bureau_day_amt_agg","90b5d32e":"# Bureau\uc758 CREDIT_ACTIVE='Active' \uc778 \ub370\uc774\ud130\ub9cc filtering \ud6c4 \uc8fc\uc694 \uceec\ub7fc \ubc0f \uc55e\uc5d0\uc11c \ucc44\ubb34 \ubc0f \ub300\ucd9c\uae08\uc561 \uad00\ub828 \uceec\ub7fc\ub4e4\ub85c SK_ID_CURR \ub808\ubca8\uc758 aggregation \uceec\ub7fc \uc0dd\uc131\ndef get_bureau_active_agg(bureau):\n    # CREDIT_ACTIVE='Active' \uc778 \ub370\uc774\ud130\ub9cc filtering\n    cond_active = bureau['CREDIT_ACTIVE'] == 'Active'\n    bureau_active_grp = bureau[cond_active].groupby(['SK_ID_CURR'])\n    bureau_agg_dict = {\n        'SK_ID_BUREAU':['count'],\n        'DAYS_CREDIT':['min', 'max', 'mean'],\n        'CREDIT_DAY_OVERDUE':['min', 'max', 'mean'],\n        'DAYS_CREDIT_ENDDATE':['min', 'max', 'mean'],\n        'DAYS_ENDDATE_FACT':['min', 'max', 'mean'],\n        'AMT_CREDIT_MAX_OVERDUE': ['max', 'mean'],\n        'AMT_CREDIT_SUM': ['max', 'mean', 'sum'],\n        'AMT_CREDIT_SUM_DEBT': ['max', 'mean', 'sum'],\n        'AMT_CREDIT_SUM_OVERDUE': ['max', 'mean', 'sum'],\n        'AMT_ANNUITY': ['max', 'mean', 'sum'],\n        # \ucd94\uac00 \uac00\uacf5 \uceec\ub7fc\n        'BUREAU_ENDDATE_FACT_DIFF':['min', 'max', 'mean'],\n        'BUREAU_CREDIT_FACT_DIFF':['min', 'max', 'mean'],\n        'BUREAU_CREDIT_ENDDATE_DIFF':['min', 'max', 'mean'],\n        'BUREAU_CREDIT_DEBT_RATIO':['min', 'max', 'mean'],\n        'BUREAU_CREDIT_DEBT_DIFF':['min', 'max', 'mean'],\n        'BUREAU_IS_DPD':['mean', 'sum'],\n        'BUREAU_IS_DPD_OVER120':['mean', 'sum']\n        }\n\n    bureau_active_agg = bureau_active_grp.agg(bureau_agg_dict)\n    bureau_active_agg.columns = ['BUREAU_ACT_'+('_').join(column).upper() for column in bureau_active_agg.columns.ravel()]\n    # \uc870\uc778\uc744 \uc704\ud574 SK_ID_CURR\uc744 reset_index()\ub85c \uceec\ub7fc\ud654 \n    bureau_active_agg = bureau_active_agg.reset_index()\n    print('bureau_active_agg shape:', bureau_active_agg.shape)\n    return bureau_active_agg","192f44d2":"# bureau_bal\uc744 SK_ID_CURR \ub808\ubca8\ub85c \uac74\uc218\uc640 MONTHS_BALANCE\uc758 aggregation \uac00\uacf5 \ndef get_bureau_bal_agg(bureau, bureau_bal):\n    \n    bureau_bal = bureau_bal.merge(bureau[['SK_ID_CURR', 'SK_ID_BUREAU']], on='SK_ID_BUREAU', how='left')\n    bureau_bal['BUREAU_BAL_IS_DPD'] = bureau_bal['STATUS'].apply(lambda x: 1 if x in['1','2','3','4','5']  else 0)\n    bureau_bal['BUREAU_BAL_IS_DPD_OVER120'] = bureau_bal['STATUS'].apply(lambda x: 1 if x =='5'  else 0)\n    bureau_bal_grp = bureau_bal.groupby('SK_ID_CURR')\n    # SK_ID_CURR \ub808\ubca8\ub85c \uac74\uc218\uc640 MONTHS_BALANCE\uc758 aggregation \uac00\uacf5 \n    bureau_bal_agg_dict = {\n        'SK_ID_CURR':['count'],\n        'MONTHS_BALANCE':['min', 'max', 'mean'],\n        'BUREAU_BAL_IS_DPD':['mean', 'sum'],\n        'BUREAU_BAL_IS_DPD_OVER120':['mean', 'sum']\n    }\n\n    bureau_bal_agg = bureau_bal_grp.agg(bureau_bal_agg_dict)\n    bureau_bal_agg.columns = [ 'BUREAU_BAL_'+('_').join(column).upper() for column in bureau_bal_agg.columns.ravel() ]\n    # \uc870\uc778\uc744 \uc704\ud574 SK_ID_CURR\uc744 reset_index()\ub85c \uceec\ub7fc\ud654 \n    bureau_bal_agg = bureau_bal_agg.reset_index()\n    print('bureau_bal_agg shape:', bureau_bal_agg.shape)\n    return bureau_bal_agg","f8b1a741":"# \uac00\uacf5\ub41c bureau\uad00\ub828 aggregation \uceec\ub7fc\ub4e4\uc744 \ubaa8\ub450 \uacb0\ud569   \ndef get_bureau_agg(bureau, bureau_bal):\n    \n    bureau = get_bureau_processed(bureau)\n    bureau_day_amt_agg = get_bureau_day_amt_agg(bureau)\n    bureau_active_agg = get_bureau_active_agg(bureau)\n    bureau_bal_agg = get_bureau_bal_agg(bureau, bureau_bal)\n    # \uac00\uacf5\ub41c bureau\uad00\ub828 aggregation \uceec\ub7fc\ub4e4\uc744 \ubaa8\ub450 \uc870\uc778\ud558\uc5ec \uacb0\ud569 \ud6c4 return  \n    bureau_agg = bureau_day_amt_agg.merge(bureau_active_agg, on='SK_ID_CURR', how='left')\n    bureau_agg = bureau_agg.merge(bureau_bal_agg, on='SK_ID_CURR', how='left')\n    print('bureau_agg shape:', bureau_agg.shape)\n    \n    return bureau_agg","58bf60cd":"def get_apps_all_with_prev_bureau_agg(apps, prev, bureau, bureau_bal):\n    apps_all =  get_apps_processed(apps)\n    prev_agg = get_prev_agg(prev)\n    bureau_agg = get_bureau_agg(bureau, bureau_bal)\n    print('prev_agg shape:', prev_agg.shape)\n    print('bueau_agg shape:', bureau_agg.shape)\n    print('apps_all before merge shape:', apps_all.shape)\n    apps_all = apps_all.merge(prev_agg, on='SK_ID_CURR', how='left')\n    apps_all = apps_all.merge(bureau_agg, on='SK_ID_CURR', how='left')\n    print('apps_all after merge with prev_agg, bureau_agg shape:', apps_all.shape)\n    \n    return apps_all","d69fc13b":"# application, previous, bureau, bureau_bal \uad00\ub828 \ub370\uc774\ud130\uc14b \uac00\uacf5 \ubc0f \ucde8\ud569. \napps_all = get_apps_all_with_prev_bureau_agg(apps, prev, bureau, bureau_bal)","db50283b":"# Category \uceec\ub7fc\uc744 \ubaa8\ub450 Label \uc778\ucf54\ub529 \uc218\ud589 \napps_all = get_apps_all_encoded(apps_all)\n\n# \ud559\uc2b5\uacfc \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub85c \ubd84\ub9ac\napps_all_train, apps_all_test = get_apps_all_train_test(apps_all)","ec27785c":"#\ud559\uc2b5\uc218\ud589\n\nclf = train_apps_all(apps_all_train)","67200f57":"preds = clf.predict_proba(apps_all_test.drop(['SK_ID_CURR'], axis=1))[:, 1 ]\napps_all_test['TARGET'] = preds\napps_all_test[['SK_ID_CURR', 'TARGET']].to_csv('bureau_baseline_04.csv', index=False)","97c6bbd4":"## 2. Application_train\uc5d0 \ub300\ud55c EDA \uc9c4\ud589","71163b27":"## submit \uacb0\uacfc\n![image.png](attachment:f258d504-8c68-4fc9-bbdd-820ac54035e2.png)","451fec9b":"## 8. bureau\uc640 bureau_bal \ub370\uc774\ud130 \uc138\ud2b8 \uae30\ubc18\uc758 EDA\uc640 Feature Engineering \uc218\ud589 \ud6c4 \ud559\uc2b5 \ubaa8\ub378 \uc0dd\uc131\/\ud3c9\uac00\n->bureau.csv : \ub2e4\ub978 \uae08\uc735 \uae30\uad00\uc5d0\uc11c \uc81c\uacf5 \ud55c \ubaa8\ub4e0 \uace0\uac1d\uc758 \uc774\uc804 \ub300\ucd9c \uc815\ubcf4","796591f0":"## 4. \uc8fc\uc694 \uceec\ub7fc\ub4e4\uc758 TARGET\uacfc\uc758 \uc0c1\uad00\ub3c4 \ubd84\uc11d","bfc80ab1":"## - bureau, application, previous \ub370\uc774\ud130\ub97c \ubaa8\ub450 \uc0ac\uc6a9\ud588\uc744 \ub54c \uac00\uc7a5 \uc88b\uc740 \uc131\ub2a5\uc744 \ubcf4\uc5ec\uc900\ub2e4.","9daca338":"## submit \uacb0\uacfc\n![image.png](attachment:9230e333-0c7e-4e82-bad6-e3ef9ceec005.png)","5851ea4b":"## 7. prev_application \ub370\uc774\ud130 \uc138\ud2b8 \uae30\ubc18\uc758 EDA\uc640 Feature Engineering \uc218\ud589 \ud6c4 \ud559\uc2b5 \ubaa8\ub378 \uc0dd\uc131\/\ud3c9\uac00\n\n-> PREVIOUS_APPLICATION.CSV - \uacfc\uac70 \ub300\ucd9c \uc774\ub825 (\uace0\uac1d\uc758 \ud604\uc7ac \ub300\ucd9c \uc774\uc804 \uacfc\uac70 \ub300\ucd9c \uc815\ubcf4 \uc81c\uacf5)","0e195f31":"## 4-1. EXT_SORCE_X \ubcc0\uc218\ub4e4\uacfc TARGET \uac12\uc758 \uad00\uacc4 \ud655\uc778 \ubc0f \uac00\uacf5","1e0c4448":"## 1. \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\uc640 app \ub370\uc774\ud130 \uc138\ud2b8 \ub85c\ub529","3b43405b":"## 5. Feature Engineering","843f9d27":"## 3. Feature\uc5d0 \ub300\ud574 TATGET\uac12 \ubd84\ud3ec \ube44\uad50 \ubc0f \uc2dc\uac01\ud654","86a2f0e4":"## submit \uacb0\uacfc\n![image.png](attachment:92196adc-df60-454c-8af6-4d9103f1765b.png)","5b77facf":"## 6. \ud559\uc2b5 \ub370\uc774\ud130\ub97c \uac80\uc99d \ub370\uc774\ud130\ub85c \ubd84\ub9ac\ud558\uace0 LGBM Classifier\ub85c \ud559\uc2b5 \uc218\ud589."}}