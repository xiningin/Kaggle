{"cell_type":{"b97c1a10":"code","8d3bdb57":"code","8f039660":"code","2738750d":"code","8135fc5b":"code","99544a09":"code","e638a1d3":"markdown","38360bfe":"markdown","33d987c3":"markdown","151e2e42":"markdown","a649f0a8":"markdown","82ef3a6a":"markdown"},"source":{"b97c1a10":"import numpy as np\nimport matplotlib.pyplot as plt","8d3bdb57":"import pandas as pd\n# read the training data into a pandas DataFrame\ntrain_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","8f039660":"train_data","2738750d":"pivot_table = pd.pivot_table(train_data, index=['OverallQual'])\npd.set_option('display.max_columns', None)\n# take a look\npivot_table","8135fc5b":"pivot_table = pd.pivot_table(train_data, index=['OverallQual'], values=['GrLivArea','SalePrice'])\npivot_table","99544a09":"pivot_table = pd.pivot_table(train_data, index=['OverallQual'], values=['SalePrice'])\n# now plot\npivot_table.plot(kind='bar');","e638a1d3":"What does this give us; we have the 10 values for `OverallQual`, and the table has 37 numerical columns. \nWe passed no aggregation function, so the default function was used, which is the [mean](https:\/\/en.wikipedia.org\/wiki\/Mean) (`numpy.mean`), to calculate the values in each of the *cells*.\n\nWe shall now use the `values` parameter to aggregate particular columns that we would like to look at. For example let us produce a dataframe consisting of the average values of the living area (`GrLivArea`), and the sales price (`SalePrice`):","38360bfe":"We see that the csv file dataframe consists of 1459 rows by 81 columns.\nWe shall now create a [pivot table](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.pivot_table.html), and pass the *group key* `OverallQual`, which rates the overall material and finish of the house between 1 and 10.\n(Note that we shall use the [pandas option](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/options.html) `('display.max_columns', None)` to show ***all*** of the columns, which are printed in numerical and then alphabetical order).","33d987c3":"As one can see, the pandas pivot table can be a very useful tool for quickly exploring a dataframe.\n## Related reading:\n* [pandas.pivot_table](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.pivot_table.html) (pandas documentation)\n* [pivot table](https:\/\/en.wikipedia.org\/wiki\/Pivot_table) (Wikipedia)","151e2e42":"Let us take a look at the DataFrame:","a649f0a8":"## Exploratory data analysis using pandas pivot table\nIn this notebook we shall briefly look at  [exploratory data analysis](https:\/\/en.wikipedia.org\/wiki\/Exploratory_data_analysis) (EDA) using \n[an Excel style pivot table](https:\/\/support.microsoft.com\/en-us\/office\/overview-of-pivottables-and-pivotcharts-527c8fa3-02c0-445a-a2db-7794676bce96) in pandas. We shall use the [House Prices](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques) competition as our example data.\n\nFirst we shall import the [pandas data analysis library](https:\/\/pandas.pydata.org\/) and read in the csv file to a [pandas DataFrame](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.html):","82ef3a6a":"Finally, we can quickly produce a bar chart of our data. Here we shall look at the mean `SalePrice` for each of the `OverallQual`:"}}