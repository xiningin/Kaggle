{"cell_type":{"c0682450":"code","26353ef0":"code","309f41c8":"code","2c861081":"code","d87db561":"code","62cb0d0b":"code","305f268e":"code","ff2ca52e":"code","03da2fc0":"code","fc53823f":"code","3b33ff9a":"markdown","7cf4038c":"markdown","48f6efcb":"markdown","33f1cc0a":"markdown","6529b6bc":"markdown","683f0580":"markdown","581bd182":"markdown","c13123d4":"markdown","9c9d6db9":"markdown"},"source":{"c0682450":"# Importing the libraries\nimport numpy as np \nimport pandas as pd\nimport pandas_profiling\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","26353ef0":"dataset = pd.read_csv('..\/input\/IRIS.csv')","309f41c8":"pandas_profiling.ProfileReport(dataset)","2c861081":"#pairplot\nsns.set_style(\"whitegrid\");\nsns.pairplot(dataset, hue=\"species\", size=3);\n","d87db561":"# Importing metrics for evaluation\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n","62cb0d0b":"from sklearn.model_selection import train_test_split\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state =452 )","305f268e":"#importing libraries\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression()\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\n\n# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint('accuracy is',accuracy_score(y_pred,y_test))","ff2ca52e":"from sklearn.svm import SVC\n\nclassifier = SVC()\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\n\n# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint('accuracy is',accuracy_score(y_pred,y_test))","03da2fc0":"from sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\n\n# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint('accuracy is',accuracy_score(y_pred,y_test))","fc53823f":"from sklearn.tree import DecisionTreeClassifier\n\nclassifier = DecisionTreeClassifier()\n\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\n\n# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint('accuracy is',accuracy_score(y_pred,y_test))","3b33ff9a":"## Applying support vector machine","7cf4038c":"**Importing dataset**","48f6efcb":"# Report","33f1cc0a":"## Applying logistic Regression","6529b6bc":"## Applying Naive Bayes","683f0580":"## Splitting the data into test and train","581bd182":"# Visualizations","c13123d4":"## Applying Decision Tree","9c9d6db9":"# Applying the ML Algorithms"}}