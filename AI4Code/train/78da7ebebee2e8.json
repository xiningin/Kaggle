{"cell_type":{"878973a2":"code","3272f961":"code","8bf600d1":"code","1d692e2e":"code","6993db96":"code","2110092a":"code","1c5ec453":"code","dc0d448a":"code","88d43946":"code","210d5eaf":"code","1e7e1ea4":"code","663883c7":"code","0c32b6dc":"code","7f91a22b":"code","76c563a6":"code","972acdad":"code","57116285":"code","a97a42b6":"code","df2bd9f5":"code","06a1bd9c":"code","85382c8f":"code","96e06f45":"code","a71f10de":"code","ef65db56":"code","62b09b53":"code","6a8b6868":"code","2880af0f":"code","78e0b591":"code","240c397e":"code","79dbcbe6":"code","bd8c8199":"code","6c401bbf":"code","c31d8da8":"code","ac6eca0b":"code","9b31eb6c":"code","34c70ee0":"code","effa4c0b":"code","62a02c9a":"code","8381aa8f":"code","a98ede06":"code","13b8b5ac":"code","fc85c884":"code","add4788f":"code","6b6c97ae":"code","bd918330":"code","d5b2636a":"code","c87bd87b":"code","46924422":"code","1770d9bc":"code","4d1c275f":"code","6ec1b585":"code","5432e299":"code","0b0140ec":"code","f12dade6":"code","7369185c":"code","e185e31e":"code","07704cac":"code","d38bf3d7":"code","dd6538d5":"code","4ff57dba":"code","2aa2352a":"code","06da5550":"code","6e99a043":"code","448c28e7":"code","9770e5e8":"code","19293957":"code","1d38fdf0":"code","1e01d41e":"code","c6a7b068":"code","cd6c794e":"code","87252b0f":"code","ac4d15ed":"code","7fbac63f":"code","d38cdca4":"code","7b324bc2":"code","a1441496":"code","a6901465":"code","c69c5809":"code","03fa253c":"code","177f48f4":"code","40afa207":"code","08928348":"code","e9d7177c":"code","0af03581":"code","9eb2c690":"code","08477f93":"code","cba490fd":"code","8c6e0616":"code","564ee13e":"code","fe0fe144":"code","537a7830":"code","08552cf1":"code","1d90d47a":"code","26881830":"code","1be85e6b":"code","e32e3a97":"code","10568474":"code","59217b26":"code","1667b7a9":"code","2c837fbc":"code","335e6e90":"code","c753f0fb":"code","b092dd46":"code","c12df3b2":"code","cd324123":"code","b5d7e880":"code","8e983656":"code","0d6528d1":"code","ce42dbda":"code","126a8252":"code","8494e30c":"code","19dece3f":"code","39ed8d0d":"code","e331a23f":"code","aecd180b":"code","587a4510":"code","a80f4a6c":"code","f235bba8":"code","01f39f0b":"code","c406dc01":"code","475fd971":"code","dd89f80e":"code","e7e873d5":"code","c2250329":"code","b5ac2add":"code","cc4c2abc":"code","3f2bc7fc":"code","2d8a3975":"code","a77affaa":"code","af55f498":"code","97f714cc":"code","a1c1725e":"code","d8f97e32":"code","61c3c1ef":"code","524b50d9":"code","68e3d869":"code","4fc69c72":"code","12800c3d":"code","8fc5d6d8":"markdown","2716328f":"markdown","5b1bd916":"markdown","b4a794b7":"markdown","0e468b9a":"markdown","a24d6bcb":"markdown","1c634be8":"markdown","34ce4715":"markdown","5bcbbc94":"markdown","f65d1ef3":"markdown","9958cb35":"markdown","2d6ba427":"markdown","b573bc65":"markdown"},"source":{"878973a2":"import numpy as np \nimport pandas as pd \nimport sys\nimport os\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport geopandas as gpd\nimport matplotlib.font_manager as fm\nimport folium\nimport folium.plugins\nfrom IPython.display import IFrame\nimport json\nfrom folium import plugins\nfrom folium.plugins import HeatMap\nfrom folium.plugins import DualMap\nfrom tqdm.notebook import tqdm\nfrom statsmodels.tsa.stattools import acf\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.graphics.tsaplots import plot_pacf\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.arima_model import ARMA\nfrom sklearn import preprocessing\nfrom sklearn.metrics import mean_squared_error\nimport statsmodels.api as sm\nfrom datetime import datetime, timedelta\n\nwarnings.filterwarnings(\"ignore\")\nfm.get_fontconfig_fonts()\nfont = fm.FontProperties(fname='..\/input\/font-list\/NanumBarunGothic.ttf')\nmatplotlib.rc('font', family=font.get_name())\nplt.style.use('ggplot')\npd.set_option('display.float_format', '{:.2f}'.format)\n","3272f961":"time_df_list = []\nage_df_list = []\nfor x in [201902,201903,201904,201905,202002,202003,202004,202005]:\n    time_df_list.append('..\/input\/sk-pop-flow\/SK_\uc720\ub3d9\uc778\uad6c\/4_FLOW_TIME_'+str(x)+'.CSV')\n    age_df_list.append('..\/input\/sk-pop-flow\/SK_\uc720\ub3d9\uc778\uad6c\/4_FLOW_AGE_'+str(x)+'.CSV')\ntime_df = pd.concat([pd.read_csv(path,sep='|') for path in time_df_list])\nage_df = pd.concat([pd.read_csv(path,sep='|') for path in age_df_list])        ","8bf600d1":"print('time_df shape:',time_df.shape)\nprint('age_df shape:',age_df.shape)","1d692e2e":"print('time_df Has 0 value in columns:',time_df.columns[time_df.min()==0].tolist()) \nprint('age_df Has 0 value in columns:',age_df.columns[age_df.min()==0].tolist())","6993db96":"print('00~04 male mean pop flow:',age_df.MAN_FLOW_POP_CNT_0004.mean())\nprint('00~04 female mean pop flow:',age_df.WMAN_FLOW_POP_CNT_0004.mean())\n# SK\uc81c\uacf5 \uc720\ub3d9\uc778\uad6c\ub370\uc774\ud130 (SK\ud154\ub808\ucf64 \uac00\uc785\uc790 \uae30\uc900 --> 00~04 \uc601\uc720\uc544 \uc9d1\uacc4 X)","2110092a":"time_df.reset_index(drop=True,inplace=True)\nage_df.reset_index(drop=True,inplace=True)","1c5ec453":"plt.rcParams['font.family'] = 'NanumGothic'\nplt.rcParams['figure.figsize'] = (15,15)\n\ngeo_meta = gpd.read_file('..\/input\/sk-pop-flow\/SK_\uc720\ub3d9\uc778\uad6c\/4_.SHP')\ngeo_meta.head(2)","dc0d448a":"print(geo_meta[:35].SIDO_NM.unique()) # index 0 ~34 : \ub300\uad6c    35 ~ 68 : \uc11c\uc6b8\nprint(geo_meta[:35].SGNG_NM.unique())","88d43946":"fig,ax = plt.subplots(1,2,figsize=(32,16))\ngeo_meta[:35].convex_hull.plot(color='c',edgecolor='w',ax=ax[0])\nax[0].set_title('\uc218\uc131\uad6c\/\uc911\uad6c \uc9c0\ub3c4',fontproperties=font,size=32)\nax[0].set_axis_off()\nax[1] = geo_meta[35:].convex_hull.plot(color='c',edgecolor='w',ax=ax[1])\nax[1].set_title('\ub178\uc6d0\uad6c\/\uc911\uad6c \uc9c0\ub3c4',fontproperties=font,size=32)\nax[1].set_axis_off()\n\nplt.show()","210d5eaf":"geo_json = '..\/input\/seoulgeo\/seoul-dong.geojson'\ngeo_meta[['X_COORD','Y_COORD']]=geo_meta[['X_COORD','Y_COORD']].apply(pd.to_numeric)","1e7e1ea4":"seoul_dong_name=geo_meta[geo_meta.SIDO_NM=='\uc11c\uc6b8\ud2b9\ubcc4\uc2dc'].HDONG_NM.unique()\ndaegu_dong_name=geo_meta[geo_meta.SIDO_NM=='\ub300\uad6c\uad11\uc5ed\uc2dc'].HDONG_NM.unique()\nprint(seoul_dong_name)\nprint(daegu_dong_name)\nprint('# \uc911\ubcf5\ub41c \ub3d9 \uc774\ub984:',len(seoul_dong_name.tolist()+daegu_dong_name.tolist())\n      -len(set(seoul_dong_name.tolist()+daegu_dong_name.tolist())))","663883c7":"time_df['SI_NM'] = time_df.HDONG_NM.isin(seoul_dong_name)\ntime_df['SI_NM']=time_df['SI_NM'].replace({True:'\uc11c\uc6b8',False:'\ub300\uad6c'})\ntime_df.sample(2)","0c32b6dc":"time_df['dayflow']=time_df.loc[:,'TMST_00':'TMST_23'].mean(axis=1)\ntime_df['date']=pd.to_datetime(time_df['STD_YMD'],format='%Y%m%d')\ngu_dict=geo_meta[['HDONG_CD','SGNG_NM']].set_index('HDONG_CD').to_dict()['SGNG_NM']\ntime_df['GU_NM'] = time_df['HDONG_CD'].apply(lambda x: gu_dict[str(x)] )\ntime_df['HDONG_CD'] = time_df['HDONG_CD'].apply(pd.to_numeric)\ntime_df.loc[time_df[(time_df['HDONG_CD']>=2000000000)&(time_df['GU_NM']=='\uc911\uad6c')]['GU_NM'].index,'GU_NM'] = '\ub300\uad6c_\uc911\uad6c'","7f91a22b":"time_df.sample(7)","76c563a6":"pop=pd.read_csv('..\/input\/dong-pop-data\/___5__2011__20200919121627.csv',encoding = 'CP949')\npop=pop.rename(columns={'\ud589\uc815\uad6c\uc5ed(\ub3d9\uc74d\uba74)\ubcc4':'\ud589\uc815\uad6c\uc5ed'})","972acdad":"dong_pop=pop[pop.\ud56d\ubaa9=='\ucd1d\uc778\uad6c\uc218 (\uba85)'][['\ud589\uc815\uad6c\uc5ed','2019. 05','2020. 05']].set_index('\ud589\uc815\uad6c\uc5ed').drop(['\uc11c\uc6b8\ud2b9\ubcc4\uc2dc','\ub300\uad6c\uad11\uc5ed\uc2dc','\uc218\uc131\uad6c','\uc911\uad6c','\ub178\uc6d0\uad6c'],axis=0)\ndong_pop.index=dong_pop.index.str.replace('\uc2e0\ub2f9\uc81c5\ub3d9','\uc2e0\ub2f95\ub3d9')","57116285":"dong_pop.loc['\uba85\ub3d9',:]","a97a42b6":"dong_pop.sort_index(inplace=True)","df2bd9f5":"dong_pop['2019. 05']=dong_pop['2019. 05'].astype(int)\ndong_pop['2020. 05']=dong_pop['2020. 05'].astype(int)","06a1bd9c":"dong_pop_avg=pd.DataFrame(dong_pop.sum(axis=1),columns=['\uc778\uad6c'])","85382c8f":"dong_pop_avg['\uc778\uad6c']=(dong_pop_avg['\uc778\uad6c']\/2).astype(int)","96e06f45":"dong_meta=pd.merge(time_df.set_index('HDONG_NM').loc[~time_df.set_index('HDONG_NM').index.duplicated(keep='first')][['SI_NM','GU_NM']].reset_index().rename(columns={'HDONG_NM':'\ud589\uc815\uad6c\uc5ed'}),dong_pop_avg.reset_index())\ndong_meta=dong_meta.join(time_df[['HDONG_NM','HDONG_CD']],how='inner').drop('\ud589\uc815\uad6c\uc5ed',1)\ndong_meta=dong_meta[['SI_NM','GU_NM','HDONG_NM','HDONG_CD','\uc778\uad6c']]\ndong_meta.head()","a71f10de":"fig,ax=plt.subplots(2,1,figsize=(32,16))\nsns.lineplot(data=time_df.set_index('date')['2019'],x=time_df.set_index('date')['2019'].index,y='dayflow',hue='HDONG_NM',ax=ax[0])\nsns.lineplot(data=time_df.set_index('date')['2020'],x=time_df.set_index('date')['2020'].index,y='dayflow',hue='HDONG_NM',ax=ax[1],legend=False)\nax[0].legend(prop=font,bbox_to_anchor=(1.1,1),ncol=2,fontsize=17)\nplt.tight_layout()\nax[0].set_title('2019\ub144 \ub3d9\ubcc4 \uc720\ub3d9\uc778\uad6c',fontproperties=font,size=30)\nax[1].set_title('2020\ub144 \ub3d9\ubcc4 \uc720\ub3d9\uc778\uad6c',fontproperties=font,size=30)\nax[1].set_ylim([0,18750])\nplt.show()","ef65db56":"# \uc2dc\uac04\ub2e8\uc704 \ub3d9\ubcc4 \uc720\ub3d9\uc778\uad6c \ntemp=time_df.set_index('date').loc[:,'HDONG_NM':].reset_index().melt(id_vars=['HDONG_NM','SI_NM','GU_NM','date','dayflow'])\ntemp['time']=pd.DatetimeIndex(temp['date'])+temp['variable'].str[5:].map(lambda x: timedelta(hours=int(x)))\nfig,ax=plt.subplots(2,1,figsize=(32,16))\ntemp.set_index('time')[['HDONG_NM','value']].reset_index().pivot(index='time',columns='HDONG_NM',values='value')['2019'].plot(ax=ax[0],title='2019 Flow')\ntemp.set_index('time')[['HDONG_NM','value']].reset_index().pivot(index='time',columns='HDONG_NM',values='value')['2020'].plot(ax=ax[1],title='2020 Flow',legend=False)\nax[0].legend(prop=font,bbox_to_anchor=(1.1,1),ncol=2,fontsize=17)\nplt.show() # \uc54c\uc544\ubcf4\uae30\uac00 \ud798\ub4e4\ub2e4 --> \uc2dc\uacc4\uc5f4 \ubd84\ud574 \ud6c4 \ud2b8\ub80c\ub4dc \ub3c4\ucd9c","62b09b53":"temp_table=temp.set_index('time')[['HDONG_NM','value']].reset_index().pivot(index='time',columns='HDONG_NM',values='value')","6a8b6868":"temp_dict={}\ntemp_season={}\ntemp_trend={}\nfor col in temp_table.columns:\n    temp_dict[col]=sm.tsa.seasonal_decompose(temp_table['2019'][col])\nfor col in temp_table.columns:\n    temp_season[col]=temp_dict[col].seasonal\n    temp_trend[col]=temp_dict[col].trend\nseason_df = pd.DataFrame(temp_season)\ntrend_df = pd.DataFrame(temp_trend)    \nseason_df.index.name = None\ntrend_df.index.name = None\nfig,ax=plt.subplots(2,2,figsize=(128,80))\nseason_df.plot(ax=ax[0][0],title='2019 population flow seasonality')\ntrend_df.plot(ax=ax[0][1],title='2019 population flow trend')\ntemp_dict={}\ntemp_season={}\ntemp_trend={}\nfor col in temp_table.columns:\n    temp_dict[col]=sm.tsa.seasonal_decompose(temp_table['2020'][col])\nfor col in temp_table.columns:\n    temp_season[col]=temp_dict[col].seasonal\n    temp_trend[col]=temp_dict[col].trend\nseason_df = pd.DataFrame(temp_season)\ntrend_df = pd.DataFrame(temp_trend)    \nseason_df.index.name = None\ntrend_df.index.name = None\nseason_df.plot(ax=ax[1][0],title='2020 population flow seasonality')\ntrend_df.plot(ax=ax[1][1],title='2020 population flow trend')\nax[0][0].title.set_size(50)\nax[0][1].title.set_size(50)\nax[1][0].title.set_size(50)\nax[1][1].title.set_size(50)\nplt.show()","2880af0f":"g=sns.clustermap(trend_df.corr(),figsize=(64,64))\ng.ax_heatmap.set_xticklabels(g.ax_heatmap.get_xmajorticklabels(),fontproperties=font,fontsize=25,rotation=90)\ng.ax_heatmap.set_yticklabels(g.ax_heatmap.get_ymajorticklabels(),fontproperties=font,fontsize=25)\nplt.show()","78e0b591":"dong_dayflow_2019=pd.DataFrame(time_df.set_index('date')['2019'].groupby('HDONG_NM').sum()['dayflow'].sort_values(ascending=False))\ndong_dayflow_2020=pd.DataFrame(time_df.set_index('date')['2020'].groupby('HDONG_NM').sum()['dayflow'].sort_values(ascending=False))","240c397e":"fig,ax=plt.subplots(1,2,figsize=(32,8))\nsns.barplot(data=dong_dayflow_2019,x=dong_dayflow_2019.index,y='dayflow',ax=ax[0])\nax[0].set_xticklabels(dong_dayflow_2019.index,fontproperties=font,rotation=90,size=12)\nsns.barplot(data=dong_dayflow_2020,x=dong_dayflow_2020.index,y='dayflow',ax=ax[1])\nax[1].set_xticklabels(dong_dayflow_2020.index,fontproperties=font,rotation=90,size=12)\nax[0].set_title('2019 \ub3d9\ubcc4 \uc77c \ud3c9\uade0 \uc720\ub3d9\uc778\uad6c',fontproperties=font,size=20)\nax[1].set_title('2020 \ub3d9\ubcc4 \uc77c \ud3c9\uade0 \uc720\ub3d9\uc778\uad6c',fontproperties=font,size=20)\nax[0].ticklabel_format(style='plain', axis='y')\nax[1].ticklabel_format(style='plain',axis='y')\nax[0].set_ylim([0,1700000])\nax[1].set_ylim([0,1700000])\nplt.show()","79dbcbe6":"dong_merged_dayflow=pd.merge(dong_dayflow_2019.reset_index(),dong_dayflow_2020.reset_index(),on='HDONG_NM',suffixes=['_2019','_2020'])\ndong_merged_dayflow=dong_merged_dayflow.set_index('HDONG_NM')","bd8c8199":"dong_merged_dayflow['change']=dong_merged_dayflow.dayflow_2019-dong_merged_dayflow.dayflow_2020\nfig,ax=plt.subplots(figsize=(32,8))\nsns.barplot(data=dong_merged_dayflow,x=dong_merged_dayflow.index,y='change',order=dong_merged_dayflow.sort_values('change',ascending=False).index)\nax.ticklabel_format(style='plain',axis='y')\nax.set_xticklabels(dong_merged_dayflow.sort_values('change',ascending=False).index,fontproperties=font,rotation=90,size=12)\nax.set_title('\ub3d9\ubcc4 \uc77c \ud3c9\uade0 \uc720\ub3d9\uc778\uad6c \uac10\uc18c\ub7c9 (2019 - 2020)',fontproperties=font,size=20)\nplt.show()","6c401bbf":"dong_merged_dayflow['change_rate']=(dong_merged_dayflow.dayflow_2020-dong_merged_dayflow.dayflow_2019)\/dong_merged_dayflow.dayflow_2019*100\nfig,ax=plt.subplots(figsize=(32,8))\nsns.barplot(data=dong_merged_dayflow,x=dong_merged_dayflow.index,y='change_rate',order=dong_merged_dayflow.sort_values('change_rate',ascending=True).index)\nax.ticklabel_format(style='plain',axis='y')\nax.set_xticklabels(dong_merged_dayflow.sort_values('change_rate',ascending=True).index,fontproperties=font,rotation=90,size=12)\nax.set_title('\ub3d9\ubcc4 \uc77c \ud3c9\uade0 \uc720\ub3d9\uc778\uad6c \uc99d\uac10\ub960 (2019 - 2020) %',fontproperties=font,size=20)\nax.set_ylabel('change_rate (%)')\nplt.show()","c31d8da8":"dong_meta","ac6eca0b":"seoul_dayflow_2019=time_df[(time_df['date']<'2020') & (time_df['HDONG_NM'].isin(seoul_dong_name))].groupby('HDONG_NM').sum().reset_index()[['HDONG_NM','dayflow']]\nseoul_dayflow_2020=time_df[(time_df['date']>='2020') & (time_df['HDONG_NM'].isin(seoul_dong_name))].groupby('HDONG_NM').sum().reset_index()[['HDONG_NM','dayflow']]\ndaegu_dayflow_2019=time_df[(time_df['date']<'2020') & (time_df\n                                                      ['HDONG_NM'].isin(daegu_dong_name))].groupby('HDONG_NM').sum().reset_index()[['HDONG_NM','dayflow']]\ndaegu_dayflow_2020=time_df[(time_df['date']>='2020') & (time_df['HDONG_NM'].isin(daegu_dong_name))].groupby('HDONG_NM').sum().reset_index()[['HDONG_NM','dayflow']]","9b31eb6c":"seoul_dayflow_2019=pd.merge(pd.merge(dong_pop.reset_index()[['\ud589\uc815\uad6c\uc5ed','2019. 05']],seoul_dayflow_2019,left_on='\ud589\uc815\uad6c\uc5ed',right_on='HDONG_NM').drop('\ud589\uc815\uad6c\uc5ed',axis=1),dong_meta[['HDONG_NM','HDONG_CD']])\nseoul_dayflow_2020=pd.merge(pd.merge(dong_pop.reset_index()[['\ud589\uc815\uad6c\uc5ed','2020. 05']],seoul_dayflow_2020,left_on='\ud589\uc815\uad6c\uc5ed',right_on='HDONG_NM').drop('\ud589\uc815\uad6c\uc5ed',axis=1),dong_meta[['HDONG_NM','HDONG_CD']])\ndaegu_dayflow_2019=pd.merge(pd.merge(dong_pop.reset_index()[['\ud589\uc815\uad6c\uc5ed','2019. 05']],daegu_dayflow_2019,left_on='\ud589\uc815\uad6c\uc5ed',right_on='HDONG_NM').drop('\ud589\uc815\uad6c\uc5ed',axis=1),dong_meta[['HDONG_NM','HDONG_CD']])\ndaegu_dayflow_2020=pd.merge(pd.merge(dong_pop.reset_index()[['\ud589\uc815\uad6c\uc5ed','2020. 05']],daegu_dayflow_2020,left_on='\ud589\uc815\uad6c\uc5ed',right_on='HDONG_NM').drop('\ud589\uc815\uad6c\uc5ed',axis=1),dong_meta[['HDONG_NM','HDONG_CD']])","34c70ee0":"seoul_dayflow_2019 = seoul_dayflow_2019.sort_values('HDONG_NM').reset_index(drop=True).rename(columns={'2019. 05':'\uc778\uad6c'})\nseoul_dayflow_2020 = seoul_dayflow_2020.sort_values('HDONG_NM').reset_index(drop=True).rename(columns={'2020. 05':'\uc778\uad6c'})\ndaegu_dayflow_2019 = daegu_dayflow_2019.sort_values('HDONG_NM').reset_index(drop=True).rename(columns={'2019. 05':'\uc778\uad6c'})\ndaegu_dayflow_2020 = daegu_dayflow_2020.sort_values('HDONG_NM').reset_index(drop=True).rename(columns={'2020. 05':'\uc778\uad6c'})","effa4c0b":"seoul_dayflow_2019['HDONG_CD']=seoul_dayflow_2019.HDONG_CD.astype(str)\nseoul_dayflow_2020['HDONG_CD']=seoul_dayflow_2020.HDONG_CD.astype(str)\ndaegu_dayflow_2019['HDONG_CD']=daegu_dayflow_2019.HDONG_CD.astype(str)\ndaegu_dayflow_2020['HDONG_CD']=daegu_dayflow_2020.HDONG_CD.astype(str)\nseoul_dayflow_2019['dayflow']=seoul_dayflow_2019.dayflow.astype(int)\nseoul_dayflow_2020['dayflow']=seoul_dayflow_2020.dayflow.astype(int)\ndaegu_dayflow_2019['dayflow']=daegu_dayflow_2019.dayflow.astype(int)\ndaegu_dayflow_2020['dayflow']=daegu_dayflow_2020.dayflow.astype(int)","62a02c9a":"# with open('..\/input\/korgeo\/HangJeongDong_ver20200701.geojson',mode='rt',encoding='utf-8') as f:\n#     g = json.loads(f.read())\n#     f.close()\n# m = folium.plugins.DualMap(location=(37.615,127.046), zoom_start=11.8)\n# temp=pd.concat([seoul_dayflow_2019,seoul_dayflow_2020])['dayflow']\n# interval=(temp.max()-temp.min())\/6\n# bins=list(map(float,[temp.min(),temp.min()+interval,temp.min()+interval*2,temp.min()+interval*3,temp.min()+interval*4,temp.min()+interval*5,temp.max()]))\n# m.m1.choropleth( geo_data=g, data=seoul_dayflow_2019, columns=('HDONG_CD', 'dayflow'), \n#                   key_on='feature.properties.adm_cd2', fill_color = 'YlOrRd',\n#                 fill_opacity=0.8,\n#     line_opacity=0.5,\n#                 bins=bins)\n# m.m2.choropleth( geo_data=g, data=seoul_dayflow_2020, columns=('HDONG_CD', 'dayflow'), \n#                   key_on='feature.properties.adm_cd2', fill_color = 'YlOrRd',fill_opacity=0.8,\n#     line_opacity=0.5,\n#                 bins=bins)\n\n# m.save('.\/seoul_year_pop_map.html')\n# IFrame(src='.\/seoul_year_pop_map.html', width=1000, height=600)\n\n\n\"\"\"notebook \ub290\ub824\uc838\uc11c \uc8fc\uc11d\ucc98\ub9ac \/ \ud55c\uad6d\ud589\uc815\ub3d9 \ud30c\uc77c (g\ud30c\uc77c) \uc77d\ub294\ub370 \uc2dc\uac04, \uba54\ubaa8\ub9ac \uc18c\ubaa8 \ud07c \"\"\"","8381aa8f":"# m = folium.plugins.DualMap(location=(35.843, 128.626), zoom_start=11.8)\n# temp=pd.concat([daegu_dayflow_2019,daegu_dayflow_2020])['dayflow']\n# interval=(temp.max()-temp.min())\/6\n# bins=list(map(float,[temp.min(),temp.min()+interval,temp.min()+interval*2,temp.min()+interval*3,temp.min()+interval*4,temp.min()+interval*5,temp.max()]))\n# m.m1.choropleth( geo_data=g, data=daegu_dayflow_2019, columns=('HDONG_CD', 'dayflow'), \n#                   key_on='feature.properties.adm_cd2', fill_color = 'YlOrRd',\n#                 fill_opacity=0.8,\n#     line_opacity=0.5,\n#                 bins=bins)\n# m.m2.choropleth( geo_data=g, data=daegu_dayflow_2020, columns=('HDONG_CD', 'dayflow'), \n#                   key_on='feature.properties.adm_cd2', fill_color = 'YlOrRd',fill_opacity=0.8,\n#     line_opacity=0.5,\n#                 bins=bins)\n\n# m.save('.\/daegu_year_pop_map.html')\n# IFrame(src='.\/daegu_year_pop_map.html', width=1000, height=600)\n\"\"\"notebook \ub290\ub824\uc838\uc11c \uc8fc\uc11d\ucc98\ub9ac\"\"\"","a98ede06":"seoul_dayflow_2019_geo=pd.merge(seoul_dayflow_2019,geo_meta[['HDONG_NM','X_COORD','Y_COORD']])[['Y_COORD','X_COORD','dayflow']]\nseoul_dayflow_2020_geo=pd.merge(seoul_dayflow_2020,geo_meta[['HDONG_NM','X_COORD','Y_COORD']])[['Y_COORD','X_COORD','dayflow']]\ndaegu_dayflow_2019_geo=pd.merge(daegu_dayflow_2019,geo_meta[['HDONG_NM','X_COORD','Y_COORD']])[['Y_COORD','X_COORD','dayflow']]\ndaegu_dayflow_2020_geo=pd.merge(daegu_dayflow_2020,geo_meta[['HDONG_NM','X_COORD','Y_COORD']])[['Y_COORD','X_COORD','dayflow']]","13b8b5ac":"# min_flow=min(seoul_dayflow_2019.dayflow.min(),seoul_dayflow_2020.dayflow.min())\n# max_flow=max(seoul_dayflow_2019.dayflow.max(),seoul_dayflow_2020.dayflow.max())\n","fc85c884":"# seoul_dayflow_2019_geo['dayflow']=(seoul_dayflow_2019_geo['dayflow'].astype(float)-min_flow)\/(max_flow-min_flow)*4000\n# seoul_dayflow_2020_geo['dayflow']=(seoul_dayflow_2020_geo['dayflow'].astype(float)-min_flow)\/(max_flow-min_flow)*4000","add4788f":"# m = DualMap(location=[37.615, 127.046],\n#                     zoom_start = 11.8) \n# colormap = {0.0: 'pink', 0.3: 'blue', 0.5: 'green',  0.7: 'yellow', 1: 'red'}\n# HeatMap(seoul_dayflow_2019_geo.values.tolist(),radius=30, blur = 1,min_opacity=0).add_to(m.m1)\n# HeatMap(seoul_dayflow_2020_geo.values.tolist(),radius=30, blur = 1,min_opcaity=0,gradient=colormap).add_to(m.m2)\n# m.save('seoul_year_pop_heatmap.html')\n# m\n\"\"\"HEATMAP - \ubd80\uc801\ud569\"\"\"","6b6c97ae":"# m = DualMap(location=[35.843, 128.626],\n#                     zoom_start = 11.8) \n# HeatMap(daegu_dayflow_2019_geo,radius=30).add_to(m.m1)\n# HeatMap(daegu_dayflow_2020_geo,radius=30).add_to(m.m2)\n# m\n\"\"\"HEATMAP - \ubd80\uc801\ud569\"\"\"","bd918330":"daytime_geo=pd.merge(geo_meta[['HDONG_NM','X_COORD','Y_COORD']],time_df[time_df.date<'2020'].groupby('HDONG_NM').mean().loc[:,'TMST_00':'TMST_23'].reset_index())","d5b2636a":"### scaling\nfor col in daytime_geo.loc[:,'TMST_00':'TMST_23'].columns.tolist():\n    daytime_geo[col] = daytime_geo[col]\/daytime_geo[col].sum()*50","c87bd87b":"melted_df=pd.melt(daytime_geo.drop('HDONG_NM',axis=1),id_vars=['X_COORD','Y_COORD'])\nmelted_df=melted_df[['Y_COORD','X_COORD','variable','value']]\nmelted_df.variable=pd.to_numeric(melted_df.variable.str[5:])","46924422":"melted_df","1770d9bc":"hm_arr=[]\nfor i in range(24):\n    hm_arr.append(melted_df.set_index('variable').loc[i,:].values.tolist())","4d1c275f":"m=folium.Map(location=[37.615, 127.046],\n                    zoom_start = 11.8) \nhm = plugins.HeatMapWithTime(hm_arr,auto_play=True,radius=80)\nhm.add_to(m)\nm","6ec1b585":"seoul_dayflow=time_df.groupby(['SI_NM','date']).sum().loc['\uc11c\uc6b8','dayflow']\ndaegu_dayflow=time_df.groupby(['SI_NM','date']).sum().loc['\ub300\uad6c','dayflow']\nseoul_dayflow=seoul_dayflow.reset_index()\ndaegu_dayflow=daegu_dayflow.reset_index()\nse_dayflow=seoul_dayflow.drop(seoul_dayflow[seoul_dayflow.date=='2020-02-29'].index,axis=0)\nda_dayflow=daegu_dayflow.drop(daegu_dayflow[daegu_dayflow.date=='2020-02-29'].index,axis=0)","5432e299":"fig,ax=plt.subplots(2,1,figsize=(20,8))\nsns.kdeplot(data=seoul_dayflow.set_index('date')['2019']['dayflow'],ax=ax[0],label='2019',shade=True)\nsns.kdeplot(data=seoul_dayflow.set_index('date')['2020']['dayflow'],ax=ax[0],label='2020',shade=True)\nsns.kdeplot(data=daegu_dayflow.set_index('date')['2019']['dayflow'],ax=ax[1],label='2019',shade=True)\nsns.kdeplot(data=daegu_dayflow.set_index('date')['2020']['dayflow'],ax=ax[1],label='2020',shade=True)\nax[0].ticklabel_format(style='plain',axis='y')\nax[1].ticklabel_format(style='plain',axis='y')\nax[0].set_title('Seoul dayflow kernel density plot')\nax[1].set_title('Daegu dayflow kernel density plot')\nax[0].set_xlim([20000,200000])\nax[1].set_xlim([20000,200000])\nplt.legend(['2019','2020'])\nplt.show()","0b0140ec":"# TIME SERIES ANALYSIS\n\nfig,ax=plt.subplots(2,2,sharey='row')\nseoul_dayflow.set_index('date')['2019'].plot(ax=ax[0][0],title='2019 Seoul pop flow')\nseoul_dayflow.set_index('date')['2020'].plot(ax=ax[0][1],c='b',title='2020 Seoul pop flow')\nseoul_dayflow.set_index('date')['2019'].pct_change().plot(ax=ax[1][0],title='2019 Seoul pop flow percent change')\nseoul_dayflow.set_index('date')['2020'].pct_change().plot(ax=ax[1][1],c='b',title='2020 Seoul pop flow percent change')\nplt.show()","f12dade6":"fig,ax=plt.subplots(2,2,sharey='row')\ndaegu_dayflow.set_index('date')['2019'].plot(ax=ax[0][0],title='2019 Daegu pop flow')\ndaegu_dayflow.set_index('date')['2020'].plot(ax=ax[0][1],c='b',title='2020 Daegu pop flow')\ndaegu_dayflow.set_index('date')['2019'].pct_change().plot(ax=ax[1][0],title='2019 Daegu pop flow percent change')\ndaegu_dayflow.set_index('date')['2020'].pct_change().plot(ax=ax[1][1],c='b',title='2020 Daegu pop flow percent change')\nplt.show()","7369185c":"print(adfuller(daegu_dayflow.set_index('date')['2019'])) \nprint(adfuller(daegu_dayflow.set_index('date')['2019'].diff().dropna()))\nprint(adfuller(daegu_dayflow.set_index('date')['2020'])) # non stationary by trend\nprint(adfuller(daegu_dayflow.set_index('date')['2020'].diff().dropna())) # non stationary by trend\nprint(adfuller(seoul_dayflow.set_index('date')['2019'])) # non stationary by trend\nprint(adfuller(seoul_dayflow.set_index('date')['2019'].diff().dropna()))\nprint(adfuller(seoul_dayflow.set_index('date')['2020'])) # non stationary by trend\nprint(adfuller(seoul_dayflow.set_index('date')['2020'].diff().dropna()))","e185e31e":"daegu_dayflow.set_index('date')['2020'].diff().diff().dropna().plot(figsize=(4,4))","07704cac":"plot_acf(np.log(daegu_dayflow.set_index('date')['2020'].diff().diff()).dropna())\nplot_pacf(np.log(daegu_dayflow.set_index('date')['2020'].diff().diff()).dropna())\nplt.show()","d38bf3d7":"temp=daegu_dayflow.set_index('date')['2020'].diff().diff().dropna()","dd6538d5":"adfuller(temp)[1]","4ff57dba":"k=plot_acf(temp)\ng=plot_pacf(temp)\n# ARIMA (p=7,d=2,q=?)","2aa2352a":"resDiff = sm.tsa.arma_order_select_ic(temp, max_ar=7, max_ma=7, ic='aic', trend='c')\nprint('ARMA(p,q) =',resDiff['aic_min_order'],'is the best.')\n# ARMA parameter Select","06da5550":"# ARIMA MODEL\ntra=temp[:'2020-05-25']\ntes=temp['2020-05-25':]\nresult = sm.tsa.statespace.SARIMAX(tra,order=(7,2,7),freq='D',seasonal_order=(0,0,0,0),\n                                 enforce_stationarity=False, enforce_invertibility=False,).fit()\nresult.summary()","6e99a043":"res = result.resid\nfig,ax = plt.subplots(2,1,figsize=(15,8))\nfig = sm.graphics.tsa.plot_acf(res, lags=50, ax=ax[0])\nfig = sm.graphics.tsa.plot_pacf(res, lags=50, ax=ax[1])\nplt.show()","448c28e7":"pred = result.predict('2020-05-24','2020-05-31')[1:]\nprint('ARIMA model MSE:{}'.format(mean_squared_error(tes,pred)))","9770e5e8":"pd.DataFrame({'test':tes.dayflow,'pred':pred}).plot()\nplt.show()","19293957":"report=result.plot_diagnostics(figsize=(15, 12))","1d38fdf0":"# SARIMAX MODEL\nsarima = sm.tsa.statespace.SARIMAX(tra,order=(7,1,7),seasonal_order=(0,1,0,52),\n                                enforce_stationarity=False, enforce_invertibility=False,freq='D').fit()\nsarima.summary()","1e01d41e":"res = sarima.resid\nfig,ax = plt.subplots(2,1,figsize=(15,8))\nfig = sm.graphics.tsa.plot_acf(res, lags=50, ax=ax[0])\nfig = sm.graphics.tsa.plot_pacf(res, lags=50, ax=ax[1])\nplt.show()","c6a7b068":"pred = sarima.predict('2020-05-24','2020-05-31')[1:]\nprint('SARIMA model MSE:{}'.format(mean_squared_error(tes,pred)))","cd6c794e":"pd.DataFrame({'test':tes['dayflow'],'pred':pred}).plot()\nplt.show()","87252b0f":"# ARIMA >> SARIMA -> \ub9c8\uc9c0\ub9c9\uc140\uc5d0 \uc774\uc5b4\uc11c ","ac4d15ed":"# ARMA MODEL\n# \uc0c1\uad00\ubd84\uc11d flow: (S)ARIMAX \uc2dc\uacc4\uc5f4 \ubaa8\ud615\uc73c\ub85c 2\uc6d4 \uc720\ub3d9\uc778\uad6c \ub370\uc774\ud130 \uc608\uce21 exog=\ucf54\ub85c\ub098 \ud655\uc9c4\uc790\uc218 (\ub3d9\ubcc4? \uad6c\ubcc4?) -> R square \uac12\uc744 \ud1b5\ud574 \ub3d9\ubcc4 \uc815\ub82c\ntemp=np.log(daegu_dayflow.set_index('date')['2020']-daegu_dayflow.set_index('date')['2020'].shift(7)).dropna()\nmodel=sm.tsa.SARIMAX(temp,order=(0,1,0), seasonal_order=(1,1,1,7))\nresults = model.fit()\nprint (results.summary())","7fbac63f":"# \uc77c \ud3c9\uade0 (\uac01 \uc2dc\uac04\ub300 \uc720\ub3d9\uc778\uad6c\uc758 \ud3c9\uade0) \uc720\ub3d9\uc778\uad6c heatmap  \nsns.heatmap(time_df.set_index('date').groupby(time_df.set_index('date').index).sum().loc[:,'TMST_00':].corr(),annot=True)","d38cdca4":"# \uc77c \ud3c9\uade0 (\uac01 \uc2dc\uac04\ub300 \uc720\ub3d9\uc778\uad6c\uc758 \ud3c9\uade0) \uc720\ub3d9\uc778\uad6c clustermap  \nsns.clustermap(time_df.set_index('date').groupby(time_df.set_index('date').index).sum().loc[:,'TMST_00':].corr(),annot=True)","7b324bc2":"# \uc5f0\ub3c4\ubcc4 \uc77c \ud3c9\uade0 \uc720\ub3d9\uc778\uad6c \uc2dc\uacc4\uc5f4 \ubd84\ud574 \ndf=time_df.set_index('date')['2019'].groupby('date').sum()['dayflow']\nfig,ax=plt.subplots(4,1,figsize=(32,16))\ndecom = sm.tsa.seasonal_decompose(df)\ndecom.observed.plot(ax=ax[0],title='2019 dayflow')\ndecom.seasonal.plot(ax=ax[1],title='2019 dayflow seasonality')\ndecom.trend.plot(ax=ax[2],title='2019 dayflow trend')\ndecom.resid.plot(ax=ax[3],title='2019 dayflow residual')\nplt.show()","a1441496":"df=time_df.set_index('date')['2020'].groupby('date').sum()['dayflow']\nfig,ax=plt.subplots(4,1,figsize=(32,16))\ndecom = sm.tsa.seasonal_decompose(df)\ndecom.observed.plot(ax=ax[0],title='2020 dayflow',c='red')\ndecom.seasonal.plot(ax=ax[1],title='2020 dayflow seasonality',c='red')\ndecom.trend.plot(ax=ax[2],title='2020 dayflow trend',c='red')\ndecom.resid.plot(ax=ax[3],title='2020 dayflow residual',c='red')\nplt.show()","a6901465":"def compare_dayflow(df1,df2,title_1,title_2):\n    \n    sns.set_style(\"whitegrid\")\n    fig,ax = plt.subplots(2,1,figsize=(32,32))\n    sns.lineplot(x=df1[df1.date<'2020']['date'].apply(lambda x : x.strftime('%m-%d')),\n                 y=df1[df1.date<'2020']['dayflow'],ax=ax[0],label='2019')\n    sns.lineplot(x=df1[df1.date>='2020']['date'].apply(lambda x : x.strftime('%m-%d')),\n                 y=df1[df1.date>='2020']['dayflow'],ax=ax[0],label='2020')\n\n    sns.lineplot(x=df2[df2.date<'2020']['date'].apply(lambda x : x.strftime('%m-%d')),\n                 y=df2[df2.date<'2020']['dayflow'],ax=ax[1],label='2019')\n    sns.lineplot(x=df2[df2.date>='2020']['date'].apply(lambda x : x.strftime('%m-%d')),\n                 y=df2[df2.date>='2020']['dayflow'],ax=ax[1],label='2020')\n    plt.setp(ax[0].get_xticklabels(), rotation=70, ha='right',size=14)\n    plt.setp(ax[1].get_xticklabels(), rotation=70, ha='right',size=14)\n    ax[0].set_title(title_1,fontproperties=font,size=40)\n    ax[1].set_title(title_2,fontproperties=font,size=40)\n    plt.legend()\n    plt.show()\ndef compare_weekflow(df1,df2,title_1,title_2):\n    \n    sns.set_style(\"whitegrid\")\n    fig,ax = plt.subplots(2,1,figsize=(32,32))\n    sns.lineplot(x=df1[df1.week<'2020']['week'].apply(lambda x : x.strftime('%m-%d')),\n                 y=df1[df1.week<'2020']['dayflow'],ax=ax[0],label='2019')\n    sns.lineplot(x=df1[df1.week>='2020']['week'].apply(lambda x : x.strftime('%m-%d')),\n                 y=df1[df1.week>='2020']['dayflow'],ax=ax[0],label='2020')\n\n    sns.lineplot(x=df2[df2.week<'2020']['week'].apply(lambda x : x.strftime('%m-%d')),\n                 y=df2[df2.week<'2020']['dayflow'],ax=ax[1],label='2019')\n    sns.lineplot(x=df2[df2.week>='2020']['week'].apply(lambda x : x.strftime('%m-%d')),\n                 y=df2[df2.week>='2020']['dayflow'],ax=ax[1],label='2020')\n    plt.setp(ax[0].get_xticklabels(), rotation=70, ha='right',size=14)\n    plt.setp(ax[1].get_xticklabels(), rotation=70, ha='right',size=14)\n    ax[0].set_title(title_1,fontproperties=font,size=40)\n    ax[1].set_title(title_2,fontproperties=font,size=40)\n    plt.legend()\n    plt.show()\ncompare_dayflow(se_dayflow,da_dayflow,'\uc11c\uc6b8 2019.02 ~ 2019.05 \/ 2020.02 ~ 2020.05 \uc77c\ubcc4 \uc720\ub3d9\uc778\uad6c \ubcc0\ud654',\n               '\ub300\uad6c 2019.02 ~ 2019.05 \/ 2020.02 ~ 2020.05 \uc77c\ubcc4 \uc720\ub3d9\uc778\uad6c \ubcc0\ud654')","c69c5809":"suseong_dayflow=time_df.groupby(['GU_NM','date']).sum().loc['\uc218\uc131\uad6c','dayflow']\nd_jung_dayflow=time_df.groupby(['GU_NM','date']).sum().loc['\ub300\uad6c_\uc911\uad6c','dayflow']\nnoone_dayflow=time_df.groupby(['GU_NM','date']).sum().loc['\ub178\uc6d0\uad6c','dayflow']\njung_dayflow=time_df.groupby(['GU_NM','date']).sum().loc['\uc911\uad6c','dayflow']\n\nsuseong_dayflow=suseong_dayflow.reset_index()\nd_jung_dayflow=d_jung_dayflow.reset_index()\nnoone_dayflow=noone_dayflow.reset_index()\njung_dayflow=jung_dayflow.reset_index()\n\nsu_dayflow=suseong_dayflow.drop(suseong_dayflow[suseong_dayflow.date=='2020-02-29'].index,axis=0,)\ndjung_dayflow=d_jung_dayflow.drop(d_jung_dayflow[d_jung_dayflow.date=='2020-02-29'].index,axis=0,)\nno_dayflow=noone_dayflow.drop(noone_dayflow[noone_dayflow.date=='2020-02-29'].index,axis=0,)\nsjung_dayflow=jung_dayflow.drop(jung_dayflow[jung_dayflow.date=='2020-02-29'].index,axis=0,)","03fa253c":"compare_dayflow(su_dayflow,djung_dayflow,'\uc218\uc131\uad6c 2019.02 ~ 2019.05 \/ 2020.02 ~ 2020.05 \uc77c\ubcc4 \uc720\ub3d9\uc778\uad6c \ubcc0\ud654',\n               '\ub300\uad6c_\uc911\uad6c 2019.02 ~ 2019.05 \/ 2020.02 ~ 2020.05 \uc77c\ubcc4 \uc720\ub3d9\uc778\uad6c \ubcc0\ud654')","177f48f4":"compare_dayflow(no_dayflow,sjung_dayflow,'\ub178\uc6d0\uad6c 2019.02 ~ 2019.05 \/ 2020.02 ~ 2020.05 \uc77c\ubcc4 \uc720\ub3d9\uc778\uad6c \ubcc0\ud654',\n               '\uc911\uad6c 2019.02 ~ 2019.05 \/ 2020.02 ~ 2020.05 \uc77c\ubcc4 \uc720\ub3d9\uc778\uad6c \ubcc0\ud654')","40afa207":"t_2019=time_df.set_index('date')['2019'].groupby('SI_NM').sum().loc[:,'TMST_00':'TMST_23'].T\nt_2020=time_df.set_index('date')['2020'].groupby('SI_NM').sum().loc[:,'TMST_00':'TMST_23'].T","08928348":"fig,ax=plt.subplots(1,2,figsize=(32,8))\nt_2019['\ub300\uad6c'].plot(kind='line',ax=ax[0],title='Daegu',label='2019')\nt_2020['\ub300\uad6c'].plot(kind='line',ax=ax[0],label='2020')\nt_2019['\uc11c\uc6b8'].plot(kind='line',ax=ax[1],title='Seoul',label='2019')\nt_2020['\uc11c\uc6b8'].plot(kind='line',ax=ax[1],label='2020')\nax[0].legend()\nax[1].legend()\nplt.tight_layout()\nplt.show()","e9d7177c":"fig,ax=plt.subplots(figsize=(32,8))\ndt=(t_2020-t_2019)\/t_2019*100\nsns.lineplot(data=dt,dashes=False,ax=ax)\nax.set_xticklabels(dt.index.str[5:],rotation=70,size=17)\nax.ticklabel_format(style='plain',axis='y')\nax.legend(['Daegu','Seoul'])\nax.set_title('2019 2020 \uc11c\uc6b8 \ub300\uad6c \uc2dc\uac04\ub300 \ubcc4 \ud3c9\uade0 \uc720\ub3d9\uc778\uad6c \uc99d\uac10\ub960 (%)',fontproperties=font,size=30)\nax.set_ylim([-50,20])\nplt.show()","0af03581":"import itertools\nfig,axes=plt.subplots(4,1,figsize=(32,64))\npalette = sns.color_palette(palette=sns.crayon_palette(sns.colors.crayons))\nnew_palette = itertools.cycle(palette)\nfor i in ['02','03','04','05']:\n    ax=axes[int(i[1])-2]\n    t_2019=time_df.set_index('date')['2019-'+i].groupby('SI_NM').sum().loc[:,'TMST_00':'TMST_23'].T\n    t_2020=time_df.set_index('date')['2020-'+i].groupby('SI_NM').sum().loc[:,'TMST_00':'TMST_23'].T\n    y=2019\n    dt=(t_2020-t_2019)\/t_2019*100\n    sns.lineplot(data=dt,dashes=False,ax=ax)\n    ax.set_xticklabels(dt.index.str[5:],rotation=70,size=17)\n    ax.ticklabel_format(style='plain',axis='y')\n    ax.legend(['Daegu','Seoul'])\n    ax.set_title(i+'\uc6d4 2019 2020 \uc11c\uc6b8 \ub300\uad6c \uc2dc\uac04\ub300 \ubcc4 \ud3c9\uade0 \uc720\ub3d9\uc778\uad6c \uc99d\uac10\ub960 (%)',fontproperties=font,size=30)\n    ax.set_ylim([-100,100])\n    ax.axhline(0, ls='--',c='k')\n# plt.tight_layout()\nplt.show()\n","9eb2c690":"# \uc704 \uadf8\ub798\ud504 \uc694\uc77c \uc694\uc778 \uc81c\uac70 \ud544\uc694 (28\uc77c\ub9cc \uc9d1\uacc4)?\n# \uc624\uc804 3\uc2dc\uc5d0 \uc720\ub3d9\uc778\uad6c \uc99d\uac00 \/ 2\uc6d4 \ub300\uad6c\uc5d0\uc11c 75\ud504\ub85c \uc99d\uac00 \/ \uc774\uc720\ub294?\nfig,ax=plt.subplots(2,1,figsize=(24,16))\ntemp_2019_02=time_df[time_df['SI_NM']=='\ub300\uad6c'].set_index('date')['2019-02'].groupby('date').sum()\ntemp_2020_02=time_df[time_df['SI_NM']=='\ub300\uad6c'].set_index('date')['2020-02'].groupby('date').sum()\nsns.lineplot(data=temp_2019_02,x=temp_2019_02.index.day,y='TMST_03',ax=ax[0])\nsns.lineplot(data=temp_2020_02,x=temp_2020_02.index.day,y='TMST_03',ax=ax[0])\nsns.lineplot(data=temp_2019_02,x=temp_2019_02.index.week,y='TMST_03',ax=ax[1])\nsns.lineplot(data=temp_2020_02,x=temp_2020_02.index.week,y='TMST_03',ax=ax[1])\nax[0].set_xlabel('(\uc77c)',fontproperties=font)\nax[1].set_xlabel('(\uc8fc\ucc28)',fontproperties=font)\nax[0].set_xlabel('\uc720\ub3d9\uc778\uad6c',fontproperties=font)\nax[1].set_xlabel('\uc720\ub3d9\uc778\uad6c',fontproperties=font)\nax[0].set_title('\ub300\uad6c 2\uc6d4 \uc77c \ud3c9\uade0 \uc0c8\ubcbd 3\uc2dc \uc720\ub3d9\uc778\uad6c \ucd1d\ud569',fontproperties=font,size=25)\nax[1].set_title('\ub300\uad6c 2\uc6d4 \uc8fc \ud3c9\uade0 \uc0c8\ubcbd 3\uc2dc \uc720\ub3d9\uc778\uad6c \ucd1d\ud569',fontproperties=font,size=25)\nplt.show()","08477f93":"# 2019 2020 2\uc6d4 3\uc6d4\n# \uc0c8\ubcbd 12 ~3 \uc720\ub3d9\uc778\uad6c \uc18c\ud3ed \uc99d\uac00","cba490fd":"# \uc77c\uac04 \uc720\ub3d9\uc778\uad6c\ub85c \ube44\uad50\uac00 \ud798\ub4e4\ub2e4 \nfig,ax=plt.subplots(2,1)\ntime_df.groupby('date').sum()['2019']['dayflow'].plot(figsize=(32,4),ax=ax[0],c='r')\ntime_df.groupby('date').sum()['2020']['dayflow'].plot(figsize=(32,4),ax=ax[1],c='b')\nax[0].set_title('2019\/2020 compare population flow')\nplt.show()","8c6e0616":"adfuller(time_df.groupby('date').sum()['2019']['dayflow'].diff().dropna())[1]","564ee13e":"# 2019 2020 \uc77c\uac04 \uc720\ub3d9\uc778\uad6c \ud569 \ubcc0\ud654\ub7c9 ACF\n\nfig,ax=plt.subplots(2,2,figsize=(32,16))\nplot_acf(time_df.groupby('date').sum()['2019']['dayflow'].diff().dropna(),ax=ax[0,0],alpha=0.05,title='2019 DAYFLOW change ACF')\nplot_acf(time_df.groupby('date').sum()['2020']['dayflow'].diff().dropna(),ax=ax[0,1],c='b',alpha=0.05,title='2020 DAYFLOW change ACF')\nplot_pacf(time_df.groupby('date').sum()['2019']['dayflow'].diff().dropna(),ax=ax[1,0],alpha=0.05,title='2019 DAYFLOW change PACF')\nplot_pacf(time_df.groupby('date').sum()['2020']['dayflow'].diff().dropna(),ax=ax[1,1],c='b',title='2020 DAYFLOW change PACF')\n\nplt.show()        ","fe0fe144":"week_flow_2019=pd.DataFrame(time_df.groupby('date').sum()['2019'].resample('W-Fri')['dayflow'].sum()[1:]) # \ud1a0 ~ \uae08 \uc9d1\uacc4 (\uc81c\uc678 \ub370\uc774\ud130 (2\uc6d4 1\uc77c))\nweek_flow_2020=pd.DataFrame(time_df.groupby('date').sum()['2020'].resample('W-Sun')['dayflow'].sum()[1:]) # \uc6d4 ~ \uc77c \uc9d1\uacc4 (\uc81c\uc678 \ub370\uc774\ud130 (2\uc6d4 1\uc77c,2\uc77c))\nweek_flow_2019.index = week_flow_2019.index.week # 2019 6\uc8fc ~ 22\uc8fc\nweek_flow_2020.index = week_flow_2020.index.week # 2020 6\uc8fc ~ 22\uc8fc  \n\nfig,ax=plt.subplots(figsize=(32,16))\nsns.lineplot(data=week_flow_2019,x=week_flow_2019.index,y='dayflow',ax=ax,label='2019')\nsns.lineplot(data=week_flow_2020,x=week_flow_2020.index,y='dayflow',ax=ax,label='2020')\nax.set_xlabel('Week')\nax.set_ylabel('4\uac1c \uc9c0\uc5ed \uc8fc\ubcc4 \uc720\ub3d9\uc778\uad6c \ud569',fontproperties=font)\nplt.title('2019 02~05 \/ 2020 02~05 \uc8fc\uac04 4\uac1c \uc9c0\uc5ed \uc720\ub3d9\uc778\uad6c \ud569',fontproperties=font,size=30)\nplt.legend()\nplt.show()","537a7830":"sns.boxplot(data=time_df.replace({'\uc11c\uc6b8':'Seoul','\ub300\uad6c':'Daegu'}),x='STD_YM',y='dayflow',hue='SI_NM')\nplt.show()","08552cf1":"suseong_df=pd.read_csv('..\/input\/suseonggu-corona\/__.csv',sep=',',header=None)\nsuseong_df.columns=['date','\ub204\uc801 \ud655\uc9c4\uc790 \uc218']\nsuseong_df.head()","1d90d47a":"suseong_df=suseong_df.set_index('date')","26881830":"suseong_df.index=suseong_df.index.astype(str)\nsuseong_ind = []\nfor i,ind in enumerate(suseong_df.index):\n    ind=ind.replace('.','-')\n    if len(ind) ==3:\n        suseong_ind.append('2020-0'+ind+'0')\n    else:\n        suseong_ind.append('2020-0'+ind)\n    \nsuseong_df.index= suseong_ind","1be85e6b":"suseong_df.index=pd.to_datetime(suseong_df.index,format='%Y-%m-%d')\nsuseong_df['\ub204\uc801 \ud655\uc9c4\uc790 \uc218']=suseong_df['\ub204\uc801 \ud655\uc9c4\uc790 \uc218'].str.replace(',','').astype(int)","e32e3a97":"suseong_df['\ub2f9\uc77c \ud655\uc9c4\uc790 \uc218']=suseong_df.diff()\nsuseong_df=suseong_df.fillna(5)\nsuseong_df['\ub2f9\uc77c \ud655\uc9c4\uc790 \uc218']=suseong_df['\ub2f9\uc77c \ud655\uc9c4\uc790 \uc218'].astype(int)","10568474":"for i in pd.date_range(\"2\/1\/2020\", \"2\/19\/2020\"):\n        suseong_df.loc[i]=[0,0]\nsuseong_df=suseong_df.sort_index()","59217b26":"fig,ax = plt.subplots(1,2,figsize=(32,8))\nsns.lineplot(data=suseong_df,x=suseong_df.index,y='\ub2f9\uc77c \ud655\uc9c4\uc790 \uc218',ax=ax[0])\nsns.lineplot(data=suseong_df,x=suseong_df.index,y='\ub204\uc801 \ud655\uc9c4\uc790 \uc218',ax=ax[1])\n","1667b7a9":"sns.set_style('ticks')\nsuseong_flow_df=suseong_dayflow.set_index('date')\nfig,ax=plt.subplots(figsize=(32,16))\nsns.lineplot(data=suseong_df,x=suseong_df.index,y='\ub2f9\uc77c \ud655\uc9c4\uc790 \uc218',ax=ax,label='\ud655\uc9c4\uc790 \uc218',c='r')\nax2 = ax.twinx()\nsns.lineplot(data=suseong_flow_df['2020'],x=suseong_df.index,y='dayflow',ax=ax2,c='b',label='\uc77c\ubcc4 \uc720\ub3d9\uc778\uad6c \ud569\uacc4')\nax.set_ylabel('\ud655\uc9c4\uc790 \uc218',fontproperties=font,size=40,c='r')\nax2.set_ylabel('\uc77c\ubcc4 \uc720\ub3d9\uc778\uad6c \ud569\uacc4',fontproperties=font,size=40,c='b')\nax.set_title('\uc218\uc131\uad6c 2020 02 ~ 05 \ud655\uc9c4\uc790 \uc218, \uc720\ub3d9\uc778\uad6c \uadf8\ub798\ud504 ',fontproperties=font)\nplt.show()","2c837fbc":"adfuller(suseong_df['2020']['\ub2f9\uc77c \ud655\uc9c4\uc790 \uc218'])[1]","335e6e90":"\n\n# Regress BTC on ETH\ns_add_const = sm.add_constant(suseong_df['\ub2f9\uc77c \ud655\uc9c4\uc790 \uc218'])\nresult = sm.OLS(suseong_flow_df['2020'],s_add_const).fit()\n\n# Compute ADF\nb = result.params[1]\nadf_stats = adfuller(suseong_flow_df['2020']['dayflow'] - b*s_add_const['\ub2f9\uc77c \ud655\uc9c4\uc790 \uc218'])\nprint(\"The p-value for the ADF test is \", adf_stats[1])","c753f0fb":"print('2019 p-value:',adfuller(suseong_flow_df['2019'])[1])\nprint('2020 p-value:',adfuller(suseong_flow_df['2020-04'].diff().dropna())[1])","b092dd46":"suseong_flow_df['2020-04'].plot(figsize=(15,5))\nsuseong_flow_df['2020-04'].diff().dropna().plot(figsize=(15,5))\nplt.show()","c12df3b2":"\"\"\"\uc5ec\uae30\uae4c\uc9c0\"\"\"","cd324123":"suseong_time_flow=time_df[time_df['GU_NM']=='\uc218\uc131\uad6c'].groupby('date').sum()\nsuseong_time_flow.head()\n","b5d7e880":"suseong_week_flow_2019=pd.DataFrame(suseong_time_flow['2019'].resample('W-Fri')['dayflow'].sum()[1:]) # \ud1a0 ~ \uae08 \uc9d1\uacc4 (\uc81c\uc678 \ub370\uc774\ud130 (2\uc6d4 1\uc77c))\nsuseong_week_flow_2020=pd.DataFrame(suseong_time_flow['2020'].resample('W-Sun')['dayflow'].sum()[1:]) # \uc6d4 ~ \uc77c \uc9d1\uacc4 (\uc81c\uc678 \ub370\uc774\ud130 (2\uc6d4 1\uc77c,2\uc77c))\nsuseong_week_flow_2019.index = suseong_week_flow_2019.index.week # 2019 6\uc8fc ~ 22\uc8fc\nsuseong_week_flow_2020.index = suseong_week_flow_2020.index.week # 2020 6\uc8fc ~ 22\uc8fc  ","8e983656":"fig,ax=plt.subplots(figsize=(32,16))\nsns.lineplot(data=suseong_week_flow_2019,x=suseong_week_flow_2019.index,y='dayflow',ax=ax,label='2019')\nsns.lineplot(data=suseong_week_flow_2020,x=suseong_week_flow_2020.index,y='dayflow',ax=ax,label='2020')\nax.set_xlabel('Week')\nax.set_ylabel('\uc218\uc131\uad6c \uc8fc\ubcc4 \uc720\ub3d9\uc778\uad6c \ud569',fontproperties=font)\nplt.title('2019 02~05 \/ 2020 02~05 \uc8fc\uac04 \uc218\uc131\uad6c \uc720\ub3d9\uc778\uad6c \ud569',fontproperties=font,size=30)\nplt.legend()\nplt.show()","0d6528d1":"fig,ax=plt.subplots()\n# sns.pointplot(data=suseong_week_flow_2019-suseong_week_flow_2020,x=suseong_week_flow_2019-suseong_week_flow_2020.index,y=(suseong_week_flow_2019-suseong_week_flow_2020).dayflow,\n#               ax=ax,label='\uc804\ub144\ub300\ube44 \uc8fc\uac04 \uc720\ub3d9\uc778\uad6c \uac10\uc18c\ub7c9')\nax.plot(suseong_week_flow_2019-suseong_week_flow_2020,marker='o')\nax2=ax.twinx()\n# sns.pointplot(data=suseong_df.resample('W-sun').sum(),x=suseong_df.resample('W-sun').sum().index.week,y='\ub2f9\uc77c \ud655\uc9c4\uc790 \uc218',ax=ax2,label='\uc8fc\uac04 \ud655\uc9c4\uc790 \uc218',c='b')\nax2.plot(suseong_df.resample('W-sun').sum().index.week,suseong_df.resample('W-sun').sum()['\ub2f9\uc77c \ud655\uc9c4\uc790 \uc218'],c='b',marker='v')\nax.set_ylabel('\uc804\ub144\ub300\ube44 \uc8fc\uac04 \uc720\ub3d9\uc778\uad6c \uac10\uc18c\ub7c9',fontproperties=font,size=30,c='r')\nax2.set_ylabel('\uc8fc\uac04 \ud655\uc9c4\uc790 \uc218',fontproperties=font,size=30,c='b')\nplt.show()\n#\uc8fc\ucc28\ubcc4 \uc218\uc131\uad6c \uc720\ub3d9\uc778\uad6c \uac10\uc18c\ub7c9 (2019 - 2020)\n","ce42dbda":"print('2020 \uc804\ub144 \ub300\ube44 \uc720\ub3d9\uc778\uad6c \uae09\uac10 \uc8fc \ub9c8\uc9c0\ub9c9 \ub0a0\uc9dc', suseong_time_flow['2020'].resample('W-Fri').sum().index[(suseong_time_flow['2020'].resample('W-Fri').sum()).index.week.tolist().index(18)])\nprint('2019 \uc804\ub144 \ub300\ube44 \uc720\ub3d9\uc778\uad6c \uae09\uac10 \uc8fc \ub9c8\uc9c0\ub9c9 \ub0a0\uc9dc', suseong_time_flow['2019'].resample('W-Fri').sum().index[(suseong_time_flow['2019'].resample('W-Fri').sum()).index.week.tolist().index(18)])\n# 18\ubc88\uc9f8 \uc8fc\uc5d0\uc11c  \uae09\uaca9\ud55c \uc720\ub3d9\uc778\uad6c \uac10\uc18c (4\uc6d4 27\uc77c ~ 5\uc6d4 3\uc77c \/ 5\uc6d45\uc77c \uc5b4\ub9b0\uc774\ub0a0, 5\uc6d4 6\uc77c \ub300\uccb4\ud734\uc77c) \n# 20\ub144 \ub300\uad6c \uceec\ub7ec\ud480 \ud398\uc2a4\ud2f0\ubc8c \ucde8\uc18c","126a8252":"# time_df[time_df['GU_NM']=='\uc218\uc131\uad6c'].groupby(['HDONG_NM','date']).sum().loc['\uace0\uc0b01\ub3d9','dayflow']\nsuseong_dong_list=time_df[time_df['GU_NM']=='\uc218\uc131\uad6c'].HDONG_NM.unique().tolist()\nfor dong_nm in suseong_dong_list:\n    gu_temp=time_df[time_df['GU_NM']=='\uc218\uc131\uad6c'].groupby(['HDONG_NM','date']).sum().loc[dong_nm,'dayflow']\n    gu_temp[(gu_temp.index>='2019-04-15')&(gu_temp.index<='2019-05-09')].plot()\nplt.legend(labels=suseong_dong_list)\nplt.show()","8494e30c":"# time_df[time_df['GU_NM']=='\uc218\uc131\uad6c'].groupby(['HDONG_NM','date']).sum().loc['\uace0\uc0b01\ub3d9','dayflow']\nsuseong_dong_list=time_df[time_df['GU_NM']=='\ub300\uad6c_\uc911\uad6c'].HDONG_NM.unique().tolist()\nfor dong_nm in suseong_dong_list:\n    gu_temp=time_df[time_df['GU_NM']=='\ub300\uad6c_\uc911\uad6c'].groupby(['HDONG_NM','date']).sum().loc[dong_nm,'dayflow']\n    gu_temp[(gu_temp.index>='2019-04-15')&(gu_temp.index<='2019-05-09')].plot()\nplt.legend(labels=suseong_dong_list)\nplt.show()","19dece3f":"#\ub300\uad6c \uc911\uad6c, \uc218\uc131\uad6c \ub2e4\uc218\uc758 \ub3d9\uc5d0\uc11c 4\uc6d4 27\uc77c \ub2e4\ub978 \uc8fc\uc758 \ud1a0\uc694\uc77c\ubcf4\ub2e4 \uc720\ub3d9\uc778\uad6c\uac00 \ub9ce\uc558\ub2e4 \n\"\"\"\uc9c0\ub09c 4\uc6d4 27\uc77c(\ud1a0), \ubd88\uae302563\ub144 \ubd80\ucc98\ub2d8\uc624\uc2e0 \ub0a0(4\uc6d4 \ucd08\ud314\uc77c, \uc591\ub825 5\uc6d4 12\uc77c)\uc744 \ub9de\uc544 \ub300\uad6c \ub450\ub958\uacf5\uc6d0\uc5d0\n\uc11c\ub294 \uc57d \ucc9c\uba85\uc758 \uc678\uad6d\uc778\uc744 \ube44\ub86f\ud558\uc5ec \uad8c\uc601\uc9c4\ub300\uad6c\uc2dc\uc7a5, \n\ud6a8\uad11\ub3d9\ud654\uc0ac\uc8fc\uc9c0\uc2a4\ub2d8\uacfc \ubd88\uad50\uacc4\uc778\uc0ac \ubc0f \uc2dc\ubbfc \ub4f1\ub4f1 5\ub9cc\uc5ec \uba85\uc774 \uc6b4\uc9d1\ud55c \uac70\uc6b4\ub370 \ud615\ud615\uc0c9\uc0c9 \ub2ec\uad6c\ubc8c \uad00\ub4f1\ub180\uc774\uac00 \uc131\ub300\ud558\uac8c \uac70\ud589\ub418\uc5c8\ub2e4.\n\uc5f0\ud638\ub3d9 \uc704\uce58 \uc0bc\uc131\ub77c\uc774\uc628\uc988 \ud30c\ud06c -> 4\uc6d4 27\uc77c \ud648 \uacbd\uae30\n5\uc6d4 1\uc77c \uadfc\ub85c\uc790\uc758 \ub0a0 \n\"\"\"","39ed8d0d":"home_training_df = pd.read_csv('..\/input\/hometraining\/hometrain.csv')\nhome_training_df","e331a23f":"home_training_df.rename(columns=home_training_df.iloc[0])\nhome_training_df = home_training_df.iloc[1:,:]","aecd180b":"home_training_df.head()","587a4510":"home_training_df.reset_index(inplace=True)","a80f4a6c":"home_training_df.columns = ['date','ind']","f235bba8":"home_training_df['date']=pd.to_datetime(home_training_df['date'],format='%Y-%m-%d')","01f39f0b":"home_training_df['ind']=home_training_df['ind'].apply(pd.to_numeric)","c406dc01":"fig,ax=plt.subplots()\nsns.lineplot(x=home_training_df[home_training_df.date<='2019-09-15']['date'].apply(lambda x : x.strftime('%m-%d')),\n            y=home_training_df[home_training_df.date<='2019-09-15']['ind'],ax=ax)\nax2 =ax.twinx()\nax.set_ylim([0, 100])\nax2.set_ylim([0, 100])\nax3=ax.twinx()\n# ax3.set_ylim([-100,100])\nsns.lineplot(x=home_training_df[(home_training_df.date>='2020-01-01')&(home_training_df.date<='2020-09-15')]['date'].apply(lambda x : x.strftime('%m-%d')),\n            y=home_training_df[(home_training_df.date>='2020-01-01')&((home_training_df.date<='2020-09-15'))]['ind'],ax=ax2,c='b')\nax.xaxis.set_tick_params(rotation=45)\n# sns.lineplot(x=home_training_df[(home_training_df.date>='2020-01-01')&(home_training_df.date<='2020-09-15')]['date'].apply(lambda x : x.strftime('%m-%d')),\n#              y=home_training_df[(home_training_df.date>='2020-01-01')&((home_training_df.date<='2020-09-15'))]['ind'].values-home_training_df[home_training_df.date<'2019-09-15']['ind'].values,\n#              ax=ax3,c='c')\n                                                                                                                           \nplt.title('\uad6c\uae00 \uac80\uc0c9\uc5b4 \ud2b8\ub80c\ub4dc : \ud648\ud2b8\ub808\uc774\ub2dd',fontproperties=font,size=30)\nplt.show()","475fd971":"age_df['date']=pd.to_datetime(age_df.STD_YMD,format='%Y%m%d')\nage_df=age_df.set_index('date')","dd89f80e":"m_age_2019=age_df.loc['2019'].sum()['MAN_FLOW_POP_CNT_0004':'MAN_FLOW_POP_CNT_70U']\nm_age_2020=age_df.loc['2020'].sum()['MAN_FLOW_POP_CNT_0004':'MAN_FLOW_POP_CNT_70U']\nf_age_2019=age_df.loc['2019'].sum()['WMAN_FLOW_POP_CNT_0004':'WMAN_FLOW_POP_CNT_70U']\nf_age_2020=age_df.loc['2020'].sum()['WMAN_FLOW_POP_CNT_0004':'WMAN_FLOW_POP_CNT_70U']","e7e873d5":"fig,ax=plt.subplots(1,2,figsize=(16,8))\ntemp=pd.DataFrame((m_age_2020-m_age_2019)\/m_age_2019*100).sort_values(0)\nsns.barplot(data=temp,x=temp.index,y=temp[0],ax=ax[0])\nax[0].set_xticklabels(temp.index,rotation=90)\ntemp=pd.DataFrame((f_age_2020-f_age_2019)\/f_age_2019*100).sort_values(0)\nsns.barplot(data=temp,x=temp.index,y=temp[0],ax=ax[1])\nax[1].set_xticklabels(temp.index,rotation=90)\nax[0].set_ylim([-100,0])\nax[1].set_ylim([-100,0])\nax[0].set_ylabel('%')\nax[1].set_ylabel('%')\nplt.show()","c2250329":"exog=suseong_df['\ub2f9\uc77c \ud655\uc9c4\uc790 \uc218']\nexog_tra=suseong_df['2020-02-03':'2020-05-25']['\ub2f9\uc77c \ud655\uc9c4\uc790 \uc218']\nexog_tes=suseong_df['2020-05-25':]['\ub2f9\uc77c \ud655\uc9c4\uc790 \uc218']","b5ac2add":"arimax = sm.tsa.statespace.SARIMAX(tra,order=(7,1,7),seasonal_order=(0,0,0,0),exog = exog_tra,freq='D',\n                                  enforce_stationarity=False, enforce_invertibility=False,).fit()\narimax.summary()","cc4c2abc":"res = arimax.resid\nfig,ax = plt.subplots(2,1,figsize=(15,8))\nfig = sm.graphics.tsa.plot_acf(res, lags=50, ax=ax[0])\nfig = sm.graphics.tsa.plot_pacf(res, lags=50, ax=ax[1])\nplt.show()","3f2bc7fc":"pred = arimax.predict('2020-05-25','2020-05-31',exog = exog_tes[1:])\nprint('ARIMAX model MSE:{}'.format(mean_squared_error(tes,pred)))","2d8a3975":"pd.DataFrame({'test':tes['dayflow'],'pred':pred}).plot()\nplt.show()","a77affaa":"rp=arimax.plot_diagnostics(figsize=(15, 12))","af55f498":"sarimax = sm.tsa.statespace.SARIMAX(tra,order=(7,1,7),seasonal_order=(0,1,0,52),exog = exog_tra,\n                                enforce_stationarity=False, enforce_invertibility=False,freq='D').fit()\nsarimax.summary()","97f714cc":"res = sarimax.resid\nfig,ax = plt.subplots(2,1,figsize=(15,8))\nfig = sm.graphics.tsa.plot_acf(res, lags=50, ax=ax[0])\nfig = sm.graphics.tsa.plot_pacf(res, lags=50, ax=ax[1])\nplt.show()","a1c1725e":"pred = sarimax.predict('2020-05-25','2020-05-31',exog = exog_tes[1:])\nprint('SARIMAX model MSE:{}'.format(mean_squared_error(tes,pred)))","d8f97e32":"pd.DataFrame({'test':tes.dayflow,'pred':pred}).plot();plt.show()","61c3c1ef":"print('ARIMA model MSE:18276438.13483525')\nprint('SARIMA model MSE:67107012.27825963')\nprint('ARIMAX model MSE:14664808.6453892')\nprint('SARIMAX model MSE:96049210.37499459')","524b50d9":"arimax.resid.plot();plt.show()","68e3d869":"res_df = pd.DataFrame(arimax.resid,columns=['resid'])\nres_df.sort_values(by='resid',ascending=False).head(5)","4fc69c72":"plt.figure(figsize=(10,15))\ntemp=daegu_dayflow.set_index('date')['2020'].diff().diff().dropna()\npiv_val = temp.pivot_table(values='dayflow',\n                          index=temp.index.day,\n                          columns=temp.index.month,\n                          aggfunc='mean')\nsns.heatmap(piv_val)\nplt.show()","12800c3d":"temp","8fc5d6d8":"2. SNS","2716328f":"# 0. Import Package and Load Data ","5b1bd916":"# \uc77c\ubcc4 \ud3c9\uade0 \uc720\ub3d9\uc778\uad6c\uc640 \ud655\uc9c4\uc790 \uc218 \uc0c1\uad00\uad00\uacc4","b4a794b7":"# \uc8fc\ubcc4 \uc720\ub3d9\uc778\uad6c \ucd94\uc138","0e468b9a":"# 2.  \uc11c\uc6b8(\uc911\uad6c \ub178\uc6d0\uad6c)\/\ub300\uad6c(\uc911\uad6c \uc218\uc131\uad6c) \ucf54\ub85c\ub098 \uc804\ud6c4 \uc6d4\/\uc8fc\/\uc77c\/\uc2dc\uac04\ubcc4 \uc720\ub3d9\uc778\uad6c \ucd94\uc774","a24d6bcb":"# \uc77c\ubcc4 \uc720\ub3d9\uc778\uad6c","1c634be8":"# 1. \ub3d9\ubcc4 \ud2b9\uc131 \ud30c\uc545 ","34ce4715":"# x=\ub3d9\ubcc4 \ub0a0\uc9dc\uc5d0 \ub530\ub978 \ucf54\ub85c\ub098 \ud655\uc9c4\uc790 \uc218 \n# y=\ub3d9\ubcc4 \uc2dc\uac04\ub300 \uc720\ub3d9\uc778\uad6c \ubcc0\ud654(02-01 00:00 ~ 05-31 23:00)  \/ \ub3d9\ubcc4 \ub098\uc774\ub300 \uc720\ub3d9\uc778\uad6c \n# ==> \uc815\uc0c1\uc2dc\uacc4\uc5f4\ub85c \ubcc0\ud615,\uc2dc\uacc4\uc5f4 \uc608\uce21 \ubaa8\ub378 \uc0dd\uc131, \ud53c\uccd0 \uc911\uc694\ub3c4 \ubc0f R-square p-value \uac80\uc815\uc744 \ud1b5\ud574 \ud655\uc9c4\uc790 \uc218\uac00 \uc720\uc758\ubbf8\ud55c \ud53c\uccd0\uac00 \ub418\ub294 \uce7c\ub7fc \ub3c4\ucd9c \ud544\uc694","5bcbbc94":"# \uc6d4\ubcc4 \uc720\ub3d9\uc778\uad6c ","f65d1ef3":"# ARIMAX MODEL\n","9958cb35":"# Age pop flow","2d6ba427":"# SARIMAX MODEL","b573bc65":"# \uc218\uc131\uad6c \ud655\uc9c4\uc790\/\uc720\ub3d9\uc778\uad6c \uc0c1\uad00\uad00\uacc4 \uc5f0\uc2b5"}}