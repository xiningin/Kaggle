{"cell_type":{"447633e1":"code","19c68f99":"code","602b3380":"code","edaca367":"code","64c44a9c":"code","74b58ecc":"code","c7e57392":"code","8d6ac948":"code","ab8972c1":"code","b7147c7c":"code","447459d0":"code","224dac71":"code","dd556aba":"code","dc82b616":"code","51f1bfd8":"code","00fb59f8":"code","616f335f":"code","458c311b":"code","b792dec7":"code","b2c83f0b":"code","59154efd":"code","b4825595":"code","46315946":"code","4b8c283f":"code","cdeadb51":"code","8e9f2266":"code","ff73ca9d":"markdown","5d206912":"markdown","14bd626f":"markdown","e6059e96":"markdown","7f105054":"markdown","1ccb00c1":"markdown","22b980d8":"markdown","b5d56982":"markdown","a8332542":"markdown","b2bb1980":"markdown","72360dbc":"markdown","2f057767":"markdown","c5585897":"markdown"},"source":{"447633e1":"import os\nimport warnings\nimport random\nfrom shutil import copyfile\nimport numpy as np\nimport pandas as pd\nimport itertools\n#data visualization libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pathlib\n#deep learning libraries\nimport tensorflow as tf\nfrom keras.optimizers import Adam\nfrom keras.layers import Conv2D, Flatten, Dense, MaxPooling2D, Dropout\nfrom keras.models import Sequential\nfrom mpl_toolkits.axes_grid1 import ImageGrid\nfrom keras.preprocessing.image import ImageDataGenerator\n#importing ResNet50 model\nfrom tensorflow.keras.applications.resnet50 import ResNet50\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions","19c68f99":"#train and test directories\ndir_train='..\/input\/dog-breed-identification\/train'\ndir_test='..\/input\/dog-breed-identification\/test'\n\n#labels have image name and dog breed in a csv file and sample_submission contain details of test set\ndf_train= pd.read_csv('..\/input\/dog-breed-identification\/labels.csv',dtype=str)\ndf_test= pd.read_csv('..\/input\/dog-breed-identification\/sample_submission.csv',dtype=str)","602b3380":"#images are in jpg format and to match their names in csv file we appending 'jpg' in it\ndef append_ext(fn):\n    return fn+\".jpg\"","edaca367":"df_train[\"id\"] = df_train[\"id\"].apply(append_ext)\ndf_test[\"id\"] = df_test[\"id\"].apply(append_ext)","64c44a9c":"#As instructed all other breeds except suggested ones are deleted\ninc_breed=['beagle','chihuahua','doberman','french_bulldog','golden_retriever','malamute','pug','saint_bernard', 'scottish_deerhound',\n'tibetan_mastiff']\nfor i,breed in df_train.iterrows():\n    if breed[1] not in inc_breed:\n        df_train=df_train.drop([i])\n       \nlen(df_train)","74b58ecc":"print(df_train.head())\ndf_test.head()","c7e57392":"#display some images with help of matplotlib\nsource_path = \"..\/input\/dog-breed-identification\/train\"\nsub_class = os.listdir(source_path)\n\nfig = plt.figure(figsize=(10,5))\nfor i in range(len(sub_class[:8])):\n    plt.subplot(2,4,i+1)\n    imag = plt.imread(os.path.join(source_path,sub_class[i+7]))\n    plt.imshow(imag, cmap=plt.get_cmap('gray'))\n    plt.axis('off')","8d6ac948":"#Generating batches of tensor image data with real-time data augmentation.\ntrain_datagen=ImageDataGenerator( rescale=1.\/255.,\n                                  rotation_range = 20,\n                                  brightness_range=[0.2,1.0],\n                                  width_shift_range = 0.2,\n                                  height_shift_range = 0.2,\n                        \n                                  horizontal_flip = True,\n                                \n                                  validation_split=0.1\n                                  )","ab8972c1":"#Generating batches of tensor image data with real-time data augmentation for training set.\ntrain_generator=train_datagen.flow_from_dataframe(\ndirectory=dir_train,\ndataframe=df_train,\nx_col=\"id\",\ny_col=\"breed\",\nsubset=\"training\",\nbatch_size=32,\nseed=42,\nshuffle=True,\nclass_mode=\"categorical\",\ntarget_size=(224,224)\n\n)","b7147c7c":"#Generating batches of tensor image data with real-time data augmentation for validation set set.\nvalidation_generator=train_datagen.flow_from_dataframe(\ndirectory=dir_train,\ndataframe=df_train,\nx_col=\"id\",\ny_col=\"breed\",\nsubset=\"validation\",\nbatch_size=32,\nseed=42,\nshuffle=True,\nclass_mode=\"categorical\",\ntarget_size=(224,224)\n)","447459d0":"test_datagen=ImageDataGenerator(rescale=1.\/255.)\n#Generating batches of tensor image data with real-time data augmentation for Test set.\n\ntest_generator=test_datagen.flow_from_dataframe(\ndirectory=dir_test,\ndataframe=df_test,\nx_col=\"id\",\ny_col=None,\nbatch_size=32,\nseed=42,\nshuffle=False,\nclass_mode=None,\ntarget_size=(224,224),\n)","224dac71":"classes=len(inc_breed)\nclasses","dd556aba":"#Freezing Resnet50 model to avoid weight updation\npretrained_model =ResNet50(\n        weights='imagenet',\n        include_top=False ,\n        input_shape=(224,224,3)\n    )","dc82b616":"#defing model\nmodel =Sequential([ \n        pretrained_model,  \n        Flatten(),\n#         tf.keras.layers.GlobalAveragePooling2D(),\n        Dense(2048, activation='relu'),\n        Dropout(0.5),\n\n        Dense(256, activation='relu'),\n        Dropout(0.5),\n        Dense(64, activation='relu'),\n        Dropout(0.3),\n    \n        Dense(10, activation='softmax')\n    ])","51f1bfd8":"#as mentioned f1score, recall, precision are defined as our judging criteria for model\nfrom keras import backend as bd\n\ndef recall_m(y_true, y_pred):\n    true_positives =bd.sum(bd.round(bd.clip(y_true*y_pred,0,1)))\n    possible_positives =bd.sum(bd.round(bd.clip(y_true,0,1)))\n    recall =true_positives\/(possible_positives+bd.epsilon())\n    return recall\n\ndef precision_m(y_true, y_pred):\n    true_positives =bd.sum(bd.round(bd.clip(y_true*y_pred,0,1)))\n    predicted_positives =bd.sum(bd.round(bd.clip(y_pred,0,1)))\n    precision = true_positives \/ (predicted_positives+bd.epsilon())\n    return precision\n\ndef f1_m(y_true, y_pred): \n    precision =precision_m(y_true,y_pred)\n    recall =recall_m(y_true,y_pred)\n    return (2*((precision*recall)\/(precision+recall+bd.epsilon())))","00fb59f8":"#stochastic gradient descent is used as optimizer and categorical_crossentropy is used for multiclass classification.\nopt=Adam(lr=1e-4)\nmodel.compile(optimizer=opt,loss='categorical_crossentropy',metrics=['acc',f1_m,precision_m, recall_m])","616f335f":"model.summary()","458c311b":"#model fitting with 50 epochs\nstep_size_ =train_generator.n\/\/train_generator.batch_size\nvalid_step_size_ =validation_generator.n\/\/validation_generator.batch_size\nhistory =model.fit(train_generator,\n                    steps_per_epoch=step_size_,\n                    validation_data=validation_generator,\n                    validation_steps=valid_step_size_ ,\n                    epochs=50,\n#                     \n                   )","b792dec7":"#plot of epoch vs accuracy for trainig set and epoch vs validation_accuracy for validation set\nacc=history.history['acc']\nval_acc=history.history['val_acc']\nloss=history.history['loss']\nval_loss=history.history['val_loss']\n\nepochs=range(len(acc))\n\nfig=plt.figure(figsize=(14,7))\nplt.plot(epochs,acc,'r', label='training Accuracy')\nplt.plot(epochs,val_acc,'b', label='Validation Accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('accuracy')\nplt.title(' training vs validation accuracy')\nplt.legend(loc='lower right')\nplt.show()\n","b2c83f0b":"#plot of epoch vs loss for trainig set and epoch vs validation_loss for validation set\n\nfig2=plt.figure(figsize=(14,7))\nplt.plot(epochs,loss,'r', label='training Accuracy')\nplt.plot(epochs,val_loss,'b', label='Validation Accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('accuracy')\nplt.title(' training vs validation accuracy')\nplt.legend(loc='upper right')\nplt.show()\n","59154efd":"#judging criterias of our model\nloss, accuracy, f1_score, precision, recall = model.evaluate(validation_generator,batch_size=32)\n\nprint(\"Loss:\", loss)\nprint(\"Accuracy:\", accuracy)\nprint(\"F1 Score:\", f1_score)","b4825595":"#saving model for further use \nmodel.save(\"DogClassificationByResNet2.h5\")","46315946":"#prediction on test set using test generator\npred=model.predict(test_generator)","4b8c283f":"#sample test file\ndf_submission = pd.read_csv('\/kaggle\/input\/dog-breed-identification\/sample_submission.csv', usecols= inc_breed+['id'])\ndf_submission.head()","cdeadb51":"#prediction on sample test file    \ndf_submission.iloc[:,1:] = pred\ndf_submission.head()","8e9f2266":"#size of data\ndf_submission.shape","ff73ca9d":"***Training Images***","5d206912":"***updating the values of probability***","14bd626f":"***Plotting Curves***","e6059e96":"***Training Data***","7f105054":"***model prediction on test data(sample_submission.csv)***","1ccb00c1":"***Training set and Test set***","22b980d8":"***Validation Data***","b5d56982":"***Using Pretrained Model : ResNet50***","a8332542":"***Data Preprocessing***","b2bb1980":" **Dog Breed Classification**","72360dbc":"***Test Data***","2f057767":"***Model Fitting***","c5585897":"***Saving the Model for in future use"}}