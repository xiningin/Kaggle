{"cell_type":{"17b15115":"code","a9474090":"code","b3ea41df":"code","134d113e":"code","c1345a57":"code","a46ac68c":"code","8119b7c2":"code","8cf02af0":"code","4a430222":"code","cbd0e512":"code","c23adbaf":"code","b2ebfd67":"code","ea40e415":"code","24791737":"code","354488a3":"code","bfd116d2":"code","360b5e81":"code","5d8af488":"code","4589dcdb":"code","c9107632":"code","19eae5ee":"code","d82dbb33":"code","536e0edf":"code","e846d15d":"code","53d4e835":"code","0dfdaf1a":"code","c72afc3c":"code","7c714c98":"code","21cb061c":"code","83c38c5c":"code","3a173437":"code","97f6ec86":"code","99b20a5b":"markdown","2dd8a085":"markdown"},"source":{"17b15115":"import numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a9474090":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ndata = train.append(test).reset_index(drop = True)","b3ea41df":"train.head(3)","134d113e":"data.head(2)","c1345a57":"print(train.isnull().sum())\nprint('*' * 30)\nprint(test.isnull().sum())","a46ac68c":"print(train.info())\nprint('*' * 30)\nprint(test.info())","8119b7c2":"data.describe()","8cf02af0":"print(train.shape)\nprint('#' * 30)\nprint(test.shape)","4a430222":"display(data[['Sex', 'Survived']].groupby(['Sex'], as_index = False).mean())\nsns.countplot(x = data['Sex'], hue = data['Survived'])","cbd0e512":"display(data[['Embarked', 'Survived']].groupby(['Embarked'], as_index = False).mean())\nsns.countplot(x = data['Embarked'], hue = data['Survived'])","c23adbaf":"display(data[['Pclass', 'Survived']].groupby(['Pclass'], as_index = False).mean())\nsns.countplot(x = data['Pclass'], hue = data['Survived'])","b2ebfd67":"display(data[['Parch', 'Survived']].groupby(['Parch'], as_index = False).mean())\nsns.countplot(x = data['Parch'], hue = data['Survived'])","ea40e415":"display(data[['SibSp', 'Survived']].groupby(['SibSp'], as_index = False).mean())\nsns.countplot(x = data['SibSp'], hue = data['Survived'])","24791737":"#assigning 0 and 1 to male and female\ndata['SexMF'] = data['Sex'].map({'male':0, 'female':1}) \ndata.head(3)","354488a3":"#family feature with parch and sibsp\ndata['Fam'] = data['Parch'] + data['SibSp'] + 1\ndata['Fam'].head(3)","bfd116d2":"display(data[['Fam', 'Survived']].groupby(['Fam'], as_index = False).mean())\nsns.countplot(x = data['Fam'], hue = data['Survived'])","360b5e81":"#pessengers, if they are alone or not?\ndata['IsAlone'] = 1\ndata.loc[data.Fam == 1, 'IsAlone'] = 0\n\ndisplay(data[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index = False).mean())\nsns.countplot(x = data['IsAlone'], hue = data['Survived'])","5d8af488":"#bins for Fare\ndata['Fare'].fillna(80.0, inplace = True)\ndata.isna().sum()","4589dcdb":"data['FareBin'] = pd.qcut(data['Fare'], 6)\ndata.head()","c9107632":"data['Age'].fillna(data['Age'].mean(), inplace = True)\ndata['Age'] = data['Age'].astype('int')\ndata['Age'].dtype\ndata['AgeBin'] = pd.qcut(data['Age'], 4)\ndata.head(5)","19eae5ee":"from sklearn.preprocessing import LabelEncoder \nlb = LabelEncoder()\ndata['FareBin'] = lb.fit_transform(data['FareBin'])","d82dbb33":"lb = LabelEncoder()\ndata['AgeBin'] = lb.fit_transform(data['AgeBin'])","536e0edf":"data['Embarked'].fillna(data['Embarked'].mode()[0], inplace = True)\ndata['Embarken'] = lb.fit_transform(data['Embarked'])","e846d15d":"#spliting train and test data\ntrain_data = data[:len(train)]\ntest_data = data[len(train):]\n\n#data training \nX_train = train_data.drop(labels = ['Survived', 'PassengerId'], axis = 1)\ny_train = train_data['Survived']","53d4e835":"features = ['SexMF', 'Pclass', 'FareBin', 'IsAlone', 'Fam', 'AgeBin', 'Embarken']\n# X_test = test_data[features]","0dfdaf1a":"from sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBRegressor\nfrom xgboost import XGBClassifier","c72afc3c":"x_train = train_data[features]\ny_train = train_data['Survived']\nx_test = test_data[features]\n\nlr = LinearRegression()\nlr.fit(x_train, y_train)\ny_pred1 = lr.predict(x_test)\nresult1 = pd.DataFrame({'PassengerId': test_data['PassengerId'], 'Survived': y_pred1})\nresult1 = result1.astype('int')\nresult1.to_csv('submission1.csv', index = False)\nresult1.head(20)","7c714c98":"from sklearn.linear_model import LogisticRegression","21cb061c":"lgr = LogisticRegression()\nlgr.fit(x_train, y_train)\ny_pred2 = lgr.predict(x_test)\nresult2 = pd.DataFrame({'PassengerId': test_data['PassengerId'], 'Survived': y_pred2})\nresult2 = result2.astype('int')\nresult2.to_csv('submission2.csv', index = False)\nresult2.head(20)\n","83c38c5c":"xgbc = XGBClassifier(random_state = 3)\nxgbc.fit(x_train, y_train)\ny_pred3 = xgbc.predict(x_test)\nresult3 = pd.DataFrame({'PassengerId': test_data['PassengerId'], 'Survived': y_pred3})\nresult3 = result3.astype('int')\nresult3.to_csv('submission3.csv', index = False)\nresult3.head(20)","3a173437":"xgb = XGBRegressor()\nxgb.fit(x_train, y_train)\ny_pred4 = xgb.predict(x_test)\nresult4 = pd.DataFrame({'PassengerId': test_data['PassengerId'], 'Survived': y_pred4})\nresult4 = result4.astype('int')\nresult4.to_csv('submission4.csv', index = False)\nresult4.head(20)","97f6ec86":"RFC = RandomForestClassifier(random_state=2, n_estimators=300, min_samples_split=40)\nRFC.fit(x_train, y_train)\ny_pred5 = RFC.predict(x_test)\nresult5 = pd.DataFrame({'PassengerId': test_data['PassengerId'], 'Survived': y_pred5})\nresult5 = result5.astype('int')\nresult5.to_csv('submission5.csv', index = False)\nresult5.head(20)","99b20a5b":"# > Data Cleaning","2dd8a085":"Age and Cabin have some missing values"}}