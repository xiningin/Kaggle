{"cell_type":{"6a5eed1a":"code","883d775e":"code","9d7f767b":"code","eb8b492a":"code","89620a43":"code","380be209":"code","f71d4c10":"code","58816e99":"code","24128b95":"code","b77402ff":"code","5a6e78a9":"code","63434450":"code","6f9a70a7":"code","82f9ef6d":"code","41bb06da":"code","87a98173":"code","c75c4105":"code","4cbcfa93":"code","506ef19b":"code","27227d48":"code","33c4229d":"code","ca0bf633":"code","7c4402ce":"code","faf555e9":"code","e23b0681":"code","c3fff5ea":"code","dbd7abe6":"code","97c3ffe4":"code","d04b062e":"code","9e23bb60":"markdown","e46adc5a":"markdown","608da3af":"markdown","1340e1ad":"markdown","32ae1fa3":"markdown","eed54b15":"markdown"},"source":{"6a5eed1a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","883d775e":"df = pd.read_csv('..\/input\/vehicle-dataset-from-cardekho\/Car details v3.csv')","9d7f767b":"df.head()","eb8b492a":"df.shape","89620a43":"df.info()","380be209":"df.isnull().sum()","f71d4c10":"df.dropna(axis = 0, inplace = True)  #since we have enough data we can remove na values","58816e99":"print(df.shape, '\\n', df.isnull().sum())","24128b95":"df['Car_age'] = 2021 - df['year'] # A derived variable from the data given which may be important","b77402ff":"df.head()","5a6e78a9":"df.describe()","63434450":"Features = df.drop(columns = ['name', 'year','torque']) #Dropping columns that are not required","6f9a70a7":"Features.head()","82f9ef6d":"#Correcting the data types of some features\n\nFeatures['mileage'] = Features['mileage'].replace(to_replace = 'kmpl|km\/kg', value = '', regex = True).astype('float')\n\nFeatures['engine'] = Features['engine'].replace('CC', '', regex = True).astype('int')\n\nFeatures['max_power'] = Features['max_power'].replace('bhp', '',regex = True).astype('float')\n\nFeatures.dtypes","41bb06da":"histograms = Features.hist(bins = 50, figsize = (20,15))","87a98173":"figure, ((ax1, ax2),(ax3, ax4)) = plt.subplots(2,2, figsize = (14,14))\n\nlabels = Features['fuel'].value_counts().index.tolist()\nvalues = Features['fuel'].value_counts().tolist()\nax1.pie(values, labels = labels, autopct = '%1.1f%%')\n\nlabels = Features['seller_type'].value_counts().index.tolist()\nvalues = Features['seller_type'].value_counts().tolist()\nax2.pie(values, labels = labels, autopct = '%1.1f%%')\n\nlabels = Features['transmission'].value_counts().index.tolist()\nvalues = Features['transmission'].value_counts().tolist()\nax3.pie(values, labels = labels, autopct = '%1.1f%%')\n\nlabels = Features['owner'].value_counts().index.tolist()\nvalues = Features['owner'].value_counts().tolist()\nax4.pie(values, labels = labels, autopct = '%1.1f%%')","c75c4105":"Features = pd.get_dummies(Features, drop_first = True)","4cbcfa93":"corr = Features.corr()\ncorr_features = corr.index\nplt.figure(figsize = (20,20))\n\ngg = sns.heatmap(Features[corr_features].corr().fillna(0.0), annot = True, cmap = 'RdYlGn')","506ef19b":"from sklearn.model_selection import train_test_split\nX = Features.drop('selling_price', axis = 1)\ny = Features['selling_price']\nxtrain, xtest, ytrain, ytest = train_test_split(X, y, test_size = 0.3)","27227d48":"xtrain.shape, xtest.shape, ytrain.shape, ytest.shape","33c4229d":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()","ca0bf633":"n_estimators = [int(x) for x in np.linspace(100,1200,12)]\n\nmax_features = ['auto', 'sqrt']\n\nmax_depth = [int(x) for x in np.linspace(5,30,6)]\n\nmin_samples_split = [2,5,10,15,100]\n\nmin_samples_leaf = [1,2,5,10]","7c4402ce":"randomgrid = {'n_estimators' : n_estimators, 'max_features' : max_features, 'max_depth' : max_depth,\n              'min_samples_split' : min_samples_split, 'min_samples_leaf' : min_samples_leaf}","faf555e9":"from sklearn.model_selection import RandomizedSearchCV\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = randomgrid, scoring = 'r2'\n                              , n_iter = 10, cv = 5, verbose = 2, n_jobs = 1)","e23b0681":"rf_random.fit(xtrain, ytrain)","c3fff5ea":"yhat = rf_random.predict(xtest)","dbd7abe6":"from sklearn.metrics import r2_score\nr2_score(ytest, yhat)","97c3ffe4":"plt.figure(figsize = (10,10))\nsns.displot(ytest - yhat)","d04b062e":"plt.scatter(ytest, yhat)","9e23bb60":"## Data Cleaning","e46adc5a":"## Handling Categorical Variables","608da3af":"## Train Test Split","1340e1ad":"## Data Visualization","32ae1fa3":"## Importing Dataset and EDA","eed54b15":"# Random Forest Regressor Model And Hyperparameter Tuning using Randomized Search CV"}}