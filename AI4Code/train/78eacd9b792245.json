{"cell_type":{"27e7d6a3":"code","92205377":"code","415b6b85":"code","a611295b":"code","0c54b9c3":"code","83263781":"code","fb753936":"code","bcef1608":"code","ce6744d3":"code","45200962":"code","f434839a":"code","0d9e243f":"code","d3cca2df":"code","f78f87df":"code","bb2ccb5d":"code","545a7ff8":"code","20eeae35":"code","2602617e":"code","06658b35":"code","c88515df":"markdown","c710d9f4":"markdown","d10d9170":"markdown","50eee397":"markdown","651894a7":"markdown","b01f5548":"markdown","21cd1669":"markdown"},"source":{"27e7d6a3":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","92205377":"import pandas as pd","415b6b85":"X_train.shape, X_test.shape","a611295b":"pd.set_option(\"display.max_columns\", 100)\ndisplay(X_train.head(3))\ndisplay(X_test.head(3))","0c54b9c3":"y_train['SalePrice'].hist()","83263781":"y_test['SalePrice'].hist()","fb753936":"X_train.isnull().sum().sort_values(ascending=False)[:20]","bcef1608":"X_test.isnull().sum().sort_values(ascending=False)[:20]","ce6744d3":"X_train.info()","45200962":"X_train = X_train.select_dtypes(exclude=['object'])\nX_test = X_test.select_dtypes(exclude=['object'])\ntarget = y_train['SalePrice']","f434839a":"from sklearn.impute import SimpleImputer\n\nimp = SimpleImputer()\nX_train = imp.fit_transform(X_train)\nX_test = imp.transform(X_test)","0d9e243f":"from sklearn.model_selection import train_test_split\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=2022)\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","d3cca2df":"from xgboost import XGBRegressor\n\nmodel = XGBRegressor()\nmodel.fit(X_tr, y_tr, verbose=False)\npred = model.predict(X_val)","f78f87df":"from sklearn.metrics import mean_squared_error\n\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\nprint(\"RMSLE : \" + str(rmsle(y_val, pred)))","bb2ccb5d":"X_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nidx1 = y_train['SalePrice'].quantile(0.005)>y_train['SalePrice']\nidx2 = y_train['SalePrice'].quantile(0.995)<y_train['SalePrice']\n\ny_train = y_train[~(idx1 + idx2)]\nX_train = X_train[~(idx1 + idx2)]\n\nX_train = X_train.select_dtypes(exclude=['object'])\nX_test = X_test.select_dtypes(exclude=['object'])\ntarget = y_train['SalePrice']\n\nimp = SimpleImputer()\nX_train = imp.fit_transform(X_train)\nX_test = imp.transform(X_test)\n\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=20222)\n\nmodel = XGBRegressor()\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\n\nprint(\"RMSLE : \" + str(rmsle(y_val, pred)))","545a7ff8":"X_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nidx1 = y_train['SalePrice'].quantile(0.005)>y_train['SalePrice']\nidx2 = y_train['SalePrice'].quantile(0.995)<y_train['SalePrice']\n\ny_train = y_train[~(idx1 + idx2)]\nX_train = X_train[~(idx1 + idx2)]\n\nX_train = X_train.select_dtypes(exclude=['object'])\nX_test = X_test.select_dtypes(exclude=['object'])\ntarget = y_train['SalePrice']\n\nimp = SimpleImputer()\nX_train = imp.fit_transform(X_train)\nX_test = imp.transform(X_test)\n\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=20222)\n\nmodel = XGBRegressor(n_estimators=100, max_depth=4, colsample_bytree=0.9)\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\n\nprint(\"RMSLE : \" + str(rmsle(y_val, pred)))","20eeae35":"pred = model.predict(X_test)\noutput = pd.DataFrame({'Id': y_test['Id'], 'SalePrice': pred})\noutput.head()","2602617e":"output.to_csv(\"000000.csv\", index=False)","06658b35":"pred = model.predict(X_test)\nprint(\"RMSLE : \" + str(rmsle(y_test['SalePrice'], pred)))","c88515df":"# Data Load & Simple EDA","c710d9f4":"# Predict & to CSV","d10d9170":"# Simple Preprocessing","50eee397":"# \uacb0\uacfc \ucc44\uc810","651894a7":"# Preprocessing","b01f5548":"# Model","21cd1669":"## Simple Tuning"}}