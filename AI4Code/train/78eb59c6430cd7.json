{"cell_type":{"ef840b89":"code","4c08f1e2":"code","1800553a":"code","c205fb6f":"code","122fd2fc":"code","f4ce6aca":"code","d9d6f65d":"code","a8fea915":"code","dfef2d1a":"code","2f1a891e":"code","f8c0dc3a":"code","06653083":"code","2d3766ed":"code","11683ed1":"code","c60c7e99":"code","4d8f62da":"code","16ded1a3":"markdown","33939ea7":"markdown","7cebf083":"markdown","7f721924":"markdown","76a8016c":"markdown","8fd9f0fb":"markdown","bc250957":"markdown","39b78fc3":"markdown","99fe8acd":"markdown"},"source":{"ef840b89":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","4c08f1e2":"df = pd.read_csv('\/kaggle\/input\/marketing-data\/marketing_data.csv')\ndf.head()","1800553a":"df.columns","c205fb6f":"df.info()","122fd2fc":"#cleaning income columns\ndf.rename(columns = {' Income ': 'Income'}, inplace = True)\ndf['Income'] = df['Income'].str.strip('$').str.replace(' ', '').str.replace(',', '')\ndf['Income'] = df['Income'].astype(float)\ndf['Income'] = df['Income'].fillna(df['Income'].median())\n\n#convert datatypes from object to integer\ndf['Year_Birth'] = df['Year_Birth'].astype(int)\n\n#convert datatypes from object to date\ndf['Dt_Customer'] = pd.to_datetime(df['Dt_Customer'])\n\n#deleting absurd categories in marital status\ndelete_absurd = df[df['Marital_Status'] == 'Absurd'].index\ndf.drop(delete_absurd, inplace = True)\n\ndf['Education'] = df['Education'].str.replace('2n Cycle', 'Master')\n\ndf['Marital_Status'] = df['Marital_Status'].str.replace('YOLO', 'Single').str.replace('Alone', \n                                                                                      'Single').str.replace('Widow', 'Divorced')\n#feature engineering\ndf['Age'] = 2021 - df['Year_Birth']\ndf['First_Cust'] = 2021 - df['Dt_Customer'].dt.year\ndf['Dependent'] = df['Kidhome'] + df['Teenhome']\nspending_col = [col for col in df.columns if 'Mnt' in col]\ndf['Total_Spending'] = df[spending_col].sum(axis = 1)\nplatform_col = [col for col in df.columns if 'Purchases' in col]\ndf['Total_Purchase'] = df[platform_col].sum(axis = 1)\ncampaigns_cols = [col for col in df.columns if 'Cmp' in col] + ['Response'] \ndf['Total_Campaign_Scc'] = df[campaigns_cols].sum(axis = 1)\n\ndf['Generation'] = df['Age'].\\\napply(lambda x: 'Silent' if x > 76 else 'Boomers' if x > 56 else 'Gen X' if x > 41 else 'Milenial' if x > 27 else 'Gen Z')\n\n#Copying data for vizualization\ndf2 = df.copy()\ndf2.drop(['ID', 'Year_Birth', 'Dt_Customer', 'Kidhome', 'Teenhome', 'Recency'], axis = 1, inplace = True)\ndf2.head()","f4ce6aca":"pal_list = ['#e2d810', '#d9138a', '#12a4d9', '#322e2f', 'gray']\n\nimport matplotlib.ticker as mtick\n\nfig, ax = plt.subplots(2, 2, figsize = (18, 14))\nfig.patch.set_facecolor('white')\n\nax0 = ax[0, 0]\nax1 = ax[0, 1]\nax2 = ax[1, 0]\nax3 = ax[1, 1]\n\nfor s in ['top', 'right', 'left']:\n    for i in range(0, 4):\n        locals()[f'ax{i}'].spines[s].set_visible(False)\n        locals()[f'ax{i}'].set_facecolor('white')\n        \n#Country\n    #data\ncountry_data = pd.DataFrame(df2['Country'].value_counts())[:7]\ncountry_data['percentage'] = country_data['Country'].apply(lambda x: x \/ sum(country_data['Country']) * 100)\n    #viz\nx_country = np.arange(len(country_data.index))\nax0.barh(country_data.index, width = country_data['percentage'], zorder = 3, color = '#e2d810', height = 0.6)\nax0.xaxis.set_major_formatter(mtick.PercentFormatter())\nax0.xaxis.set_major_locator(mtick.MultipleLocator(10))\nax0.text(-0.5, -0.5, 'Country Origin', fontsize = 15, fontweight = 'bold', fontfamily = 'serif', color = 'black')\nax0.invert_yaxis()\n\n#Education\n    #ascending index\ned_asc = ['Basic', 'Graduation', 'Master', 'PhD']\n    #data\ned_data = pd.DataFrame(df2['Education'].value_counts())\ned_data['percentage'] = ed_data['Education'].apply(lambda x: x \/ sum(ed_data['Education']) * 100).loc[ed_asc]\n    #viz\nx_ed = np.arange(len(ed_data.index))\nax1.bar(x_ed, height = ed_data['percentage'], zorder = 3, width = 0.4, color = '#e2d810')\nax1.set_xticks([0, 1, 2, 3])\nax1.set_xticklabels(list(ed_data.index))\nax1.yaxis.set_major_formatter(mtick.PercentFormatter())\nax1.text(-0.5, 52.5, 'Educational Level', fontsize = 15, fontweight = 'bold', fontfamily = 'serif', color = 'black')\n\n#Marital Status\n    #ascending index\nmarital_asc = ['Single', 'Divorced', 'Together', 'Married']\n    #data\nmarital_data = pd.DataFrame(df2['Marital_Status'].value_counts())[:4]\nmarital_data['percentage'] = marital_data['Marital_Status'].\\\napply(lambda x: round(x \/ sum(marital_data['Marital_Status']) * 100),)\n    #viz\nexplode = [0.1, 0, 0, 0]\nx_marital = np.arange(len(marital_data.index))\nax2.pie(marital_data['percentage'], labels = marital_data.index, shadow = True, colors = pal_list, autopct = '%1.1f%%',\n       explode = explode, counterclock = False, radius = 1.1)\nax2.text(-1, 1.4, 'Relationship Status', fontsize = 15, fontweight = 'bold', fontfamily = 'serif', color = 'black',\n        ha = 'center')\n\n#Generation\ngen_order = ['Silent', 'Boomers', 'X Gen', 'Milenial', 'Z Gen']\ngen_data = df2['Generation'].value_counts()\nexplode1 = [0.1, 0, 0, 1, 2.5]\nax3.pie(gen_data, labels = gen_data.index, colors = pal_list, explode = explode1, autopct = '%1.1f%%', counterclock = False,\n       shadow = True, radius = 1.1)\nax3.text(-1, 1.4, 'Generation', fontsize = 15, fontweight = 'bold', fontfamily = 'serif', color = 'black', \n         ha = 'center')\n\nfig.text(0, 1, 'CUSTOMER PROFILE DISTRIBUTION', fontsize = 18, fontweight = 'bold', fontfamily = 'serif', color = 'black',\n        bbox={'facecolor': 'white', 'alpha': 0.5, 'pad': 10}, style = 'italic')\n\nfig.tight_layout(pad = 3.0)","d9d6f65d":"col_dist = ['Income', 'Age', 'Total_Spending', 'Total_Purchase']\nfig, ax = plt.subplots(2, 2, figsize=(13, 8))\nax = ax.flatten()\n\nfor ind, col in enumerate(col_dist):\n    sns.boxplot(x = df2[col], ax = ax[ind], color = '#e2d810')\n    for s in ['top', 'right', 'left']:\n        ax[ind].spines[s].set_visible(False)\n\nbbox_args = dict(boxstyle=\"round\", fc=\"#e2d810\", color = '#e2d810')\nax[0].annotate('Distant Outlier',\n            xy=(666666, 0),\n            xycoords='data',\n            xytext=(-40,50),\n            textcoords='offset points',\n            arrowprops=dict(color='#363d46', arrowstyle = '->'),\n            fontsize=12, bbox=bbox_args)\nax[1].annotate('This seems suspicious',\n            xy=(121, 0),\n            xycoords='data',\n            xytext=(-40,50),\n            textcoords='offset points',\n            arrowprops=dict(color='#363d46', arrowstyle = '->'),\n            fontsize=12, bbox=bbox_args)\n        \nfig.text(0.05, 1.1, 'NUMERICAL DISTRIBUTION', fontsize = 18, fontweight = 'bold', fontfamily = 'serif', color = 'black',\n        bbox={'facecolor': 'white', 'alpha': 0.5, 'pad': 10}, style = 'italic')\nfig.text(0.05, 0.88, '''\n- Income feature has distant outliers but we ignore it for the visual purpose in containing pattern\n\n- But Age feature seems suspicious since the oldest human in the world is 118 years old (2014), \n  so we drop this observation\n  \n- Total Spending and Total Purchase feature are acceptable''',\n        fontsize = 15, fontweight = 'light', fontfamily = 'serif', color = 'black')\n\nplt.show()","a8fea915":"#dropping outlier\noutlier_data = df2[(df2['Age'] > 120) | (df2['Income'] > 150000)].index\n\ndf2.drop(index = outlier_data, inplace = True)","dfef2d1a":"df_products = df2[spending_col].sum().sort_values(ascending = False)\ndf_products.index = ['Wines', 'Meat', 'Gold', 'Fish', 'Sweet', 'Fruits']\n\nhigh_perform = '#e2d810'\ncolor_map = ['gray' for i in range(6)]\ncolor_map[0] = color_map[1] =  high_perform\n\nfig, ax = plt.subplots(1, 1, figsize = (12, 8))\nax.barh(df_products.index, df_products, color = 'gray', alpha = 0.5)\nax.barh(df_products.index, df_products, color = color_map)\n\nfor i in df_products.index[:2]:\n    ax.annotate(f\"{int(df_products[i] \/ 1000)}k\", xy = (df_products[i] + 1, i), \n                va = 'center', ha='right', fontsize=15, fontweight='bold', fontfamily='serif',color='white')\nfor i in df_products.index[2:]:\n    ax.annotate(f\"{int(df_products[i] \/ 1000)}k\", xy = (df_products[i] + 1, i), \n                va = 'center', ha='right', fontsize=15, fontweight='bold', fontfamily='serif',color='white')\n    \nfor s in ['top', 'right', 'left']:\n    ax.spines[s].set_visible(False)\n    \nax.text(0, -0.9, 'PRODUCT TOTAL SALES', fontsize = 20, fontfamily = 'serif', fontweight = 'bold', \n        color = 'black', bbox={'facecolor': 'white', 'alpha': 0.5, 'pad': 10}, style = 'italic')\nax.text(0, -0.6, '', fontsize = 15, fontfamily = 'serif', \n        fontweight = 'light', color = '#323232')\n\nax.invert_yaxis()\n\nplt.show()","2f1a891e":"wine_sales = df2.groupby(['Generation'])[['MntWines']].sum().\\\nreset_index()\nwine_sales['percentage'] = wine_sales['MntWines'].apply(lambda x: round(x \/ np.sum(wine_sales['MntWines']) * 100, 2))\n\n\nfig, ax = plt.subplots(figsize = (15, 8))\n\nrecipe = wine_sales['Generation']\n\ndata = wine_sales['MntWines']\n\nwedges, texts = ax.pie(data, wedgeprops=dict(width=0.5), startangle=-40, colors = pal_list)\nbbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"w\", ec=\"k\", lw=0.72)\nkw = dict(arrowprops=dict(arrowstyle=\"-\"),\n          bbox=bbox_props, zorder=0,va=\"center\")\n\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1)\/2. + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    horizontalalignment = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n    connectionstyle = \"angle,angleA=0,angleB={}\".format(ang)\n    kw[\"arrowprops\"].update({\"connectionstyle\": connectionstyle})\n    ax.annotate(recipe[i], xy=(x, y), xytext=(1.35*np.sign(x), 1.4*y),\n                horizontalalignment=horizontalalignment, **kw)\n    \nax.text(-1.6, 1.5, \"WINE SALES BY GENERATION\", fontsize = 20, fontfamily = 'serif', fontweight = 'bold', \n        color = 'black', bbox={'facecolor': 'white', 'alpha': 0.5, 'pad': 10}, style = 'italic')\nax.text(-1.6, 1.23, '''\nIt's clear here that boomers have a high occupation of wine because of the proportion \nfor generation feature, in addition to high motivated behavior (socialize, pair with food, relaxing, etc.)''',\n       fontweight = 'light', fontfamily = 'serif', fontsize = 14)","f8c0dc3a":"import matplotlib\n\ndf3 = df2.copy()\ndf3.drop(['MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', \n                     'MntGoldProds','AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', \n                     'Response'], axis = 1, inplace = True)\ndf3.rename(columns = {'NumDealsPurchases': 'Deals_Pch', 'NumWebPurchases': 'Web_Pch', 'NumCatalogPurchases': 'Catalog_Pch',\n                     'NumStorePurchases': 'Store_Pch', 'NumWebVisitsMonth': 'Web_Visit'}, inplace = True)\n\n\nfig, ax = plt.subplots(2, 1, figsize = (10, 18))\n\ncorr1 = df3.corr()\n\nmask = np.zeros_like(corr1, dtype = np.bool)\nmask[np.triu_indices_from(mask)] = True\n\ncmap = matplotlib.colors.LinearSegmentedColormap.from_list('', pal_list)\n\nsns.heatmap(corr1, square = True, cmap = cmap, mask = mask, linewidth = 2.5, vmax = 0.4, vmin = -0.4, cbar = False, ax = ax[0],\n           annot = True)\nax[0].set_xticklabels(['Income', 'Deals_Pch', 'Web_Pch', 'Catalog_Pch', 'Store_Pch',\n       'Web_Visit', 'Complain', 'Age', 'First_Cust', 'Dependent',\n       'Total_Spending', 'Total_Purchase', ''], rotation = 90)\nax[0].set_yticklabels(['', 'Deals_Pch', 'Web_Pch', 'Catalog_Pch', 'Store_Pch',\n       'Web_Visit', 'Complain', 'Age', 'First_Cust', 'Dependent', 'Total_Spending', 'Total_Purchase', 'Total_Campaign_Scc'])\n\ncorr2 = corr1.copy()\ncorr2.drop(columns = 'Total_Campaign_Scc', axis = 1, inplace = True)\ntot_corr = corr1['Total_Campaign_Scc'].sort_values().drop(index = 'Total_Campaign_Scc')\nsns.barplot(x=corr2.columns, y=tot_corr, palette=pal_list, ax = ax[1])\nax[1].set_xticklabels(tot_corr.index, rotation = 90)\n\nax[0].text(0, 0, \"CORRELATION MATRIX\", fontsize = 20, fontfamily = 'serif', fontweight = 'bold', \n        color = 'black', bbox={'facecolor': 'white', 'alpha': 0.5, 'pad': 10}, style = 'italic')\n\nfor s in ['top', 'right', 'left']:\n    ax[1].spines[s].set_visible(False)\n    ax[1].set_yticklabels('')\n    ax[1].set_yticks([])\n\nfig.tight_layout()","06653083":"gen_ed_inc = df2.groupby(['Generation', 'Education'])['Income'].mean().reset_index()\n\nfig = plt.figure(figsize = (20, 12))\n\nsns.catplot(x = 'Generation', y = 'Income', col = 'Education', data = gen_ed_inc, saturation=1, kind=\"bar\", aspect=0.7,\n           palette = pal_list, order = ['Silent', 'Boomers', 'Gen X', 'Milenial', 'Gen Z'])","2d3766ed":"fig, ax = plt.subplots(1, 1, figsize = (9, 10))\nsns.boxplot(x = 'Dependent', y = 'Total_Spending', hue = 'Marital_Status', data = df2, \n            ax = ax, palette = pal_list)\n\nlegend_labels, _= ax.get_legend_handles_labels()\nax.legend(legend_labels, ['Divorced', 'Single', 'Married', 'Together'], ncol = 4, bbox_to_anchor = (1,1))\n\nfor s in ['right', 'left']:\n   ax.spines[s].set_visible(False)\n\nax.set_ylabel('')\n\nfig.text(0, 0.9, \"Total Spending by Dependent and Marital Status\", fontfamily = 'serif', fontweight = 'bold',\n        fontsize = 20, bbox={'facecolor': 'white', 'alpha': 0.5, 'pad': 10}, style = 'italic')\n\nplt.show()","11683ed1":"platform_list = ['NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumDealsPurchases']\ngen_asc = ['Silent', 'Boomers', 'X Gen', 'Milenial', 'Z Gen']\n\nage_platform = df2.groupby('Generation')[platform_list].sum()\nage_platform['Sum'] = age_platform.sum(axis = 1)\nage_platform_ratio = (age_platform.T \/ age_platform['Sum']).round(2).T\nage_platform_ratio.drop('Sum', axis = 1, inplace = True)\nage_platform_ratio.rename(columns = {'NumWebPurchases': 'Web',\n                                      'NumCatalogPurchases': 'Catalogue', 'NumStorePurchases': 'Stores',\n                                    'NumDealsPurchases': 'Deals'}, inplace = True)\n\nfig, ax = plt.subplots(1, 1, figsize = (12, 6))\n\nax.barh(age_platform_ratio.index, age_platform_ratio['Web'], color = '#e2d810', alpha = 0.9, label = 'Web')\nax.barh(age_platform_ratio.index, age_platform_ratio['Catalogue'], \n        left = age_platform_ratio['Web'], color = '#d9138a', alpha = 0.9, label = 'Catalogue')\nax.barh(age_platform_ratio.index, age_platform_ratio['Stores'], \n        left = age_platform_ratio['Web'] + age_platform_ratio['Catalogue'], \n        color = '#12a4d9', alpha = 0.9, label = 'Stores')\nax.barh(age_platform_ratio.index, age_platform_ratio['Deals'], \n        left = age_platform_ratio['Web'] + age_platform_ratio['Catalogue'] + age_platform_ratio['Stores'], \n        color = '#322e2f', alpha = 0.9, label = 'Deals')\n\n\nfor i in age_platform_ratio.index:\n    ax.annotate(f\"{int(age_platform_ratio['Web'][i] * 100)}%\", xy = (age_platform_ratio['Web'][i] \/ 2, i), \n                va = 'center', ha='center', fontsize=10, fontweight='light', fontfamily='serif',color='black')\n    ax.annotate(f\"{int(age_platform_ratio['Catalogue'][i] * 100)}%\", \n                xy = (age_platform_ratio['Web'][i] + age_platform_ratio['Catalogue'][i] \/ 2, i), \n                va = 'center', ha='center', fontsize=10, fontweight='light', fontfamily='serif',color='black')\n    ax.annotate(f\"{int(age_platform_ratio['Stores'][i] * 100)}%\", \n                xy = (age_platform_ratio['Web'][i] + age_platform_ratio['Catalogue'][i] + age_platform_ratio['Stores'][i] \/ 2, i), \n                va = 'center', ha='center', fontsize=10, fontweight='light', fontfamily='serif',color='black')\n    ax.annotate(f\"{int(age_platform_ratio['Deals'][i] * 100)}%\", \n                xy = (age_platform_ratio['Web'][i] + age_platform_ratio['Catalogue'][i] + age_platform_ratio['Stores'][i] + age_platform_ratio['Deals'][i] \/ 2, i), \n                va = 'center', ha='center', fontsize=10, fontweight='light', fontfamily='serif',color='black')\n    \n    \nax.text(0, 5, 'Platform Distribution by Generation', fontsize = 20, fontfamily = 'serif', fontweight = 'bold', \n        color = '#323232', bbox={'facecolor': 'white', 'alpha': 0.5, 'pad': 10}, style = 'italic')\nax.text(0, 4.5, 'It is interesting how Stores gets more attention among all generation', fontsize = 15, fontfamily = 'serif', \n        fontweight = 'light')\n    \nlegend_labels, _ = ax.get_legend_handles_labels()\nax.legend(legend_labels, ['Web', 'Catalogue', 'Stores', 'Deals'], ncol = 4, bbox_to_anchor = (0.5, -0.1), loc = 'lower center')\nax.set_xticks([])\n\nfor s in ['top', 'bottom', 'left', 'right']:\n    ax.spines[s].set_visible(False)\n    \nplt.show()","c60c7e99":"pal_list = ['#e2d810', '#d9138a', '#12a4d9', '#322e2f', 'gray']\ncampaign_country = df2.groupby('Country')[['AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1',\n       'AcceptedCmp2', 'Response', 'Total_Campaign_Scc']].mean().sort_values(by = 'Total_Campaign_Scc', \n                                                                           ascending = False).reset_index()\nfig, ax = plt.subplots(figsize = (15, 8))\n\nax.bar(campaign_country['Country'], campaign_country['AcceptedCmp1'], color = '#e2d810')\nax.bar(campaign_country['Country'], campaign_country['AcceptedCmp2'], bottom = campaign_country['AcceptedCmp1'], color = '#d9138a')\nax.bar(campaign_country['Country'], campaign_country['AcceptedCmp3'], \n       bottom = campaign_country['AcceptedCmp1'] + campaign_country['AcceptedCmp2'], color = '#12a4d9')\nax.bar(campaign_country['Country'], campaign_country['AcceptedCmp4'], \n       bottom = campaign_country['AcceptedCmp1'] + campaign_country['AcceptedCmp2'] + campaign_country['AcceptedCmp3'],\n      color = '#322e2f')\nax.bar(campaign_country['Country'], campaign_country['AcceptedCmp5'], \n       bottom = campaign_country['AcceptedCmp1'] + campaign_country['AcceptedCmp2'] + campaign_country['AcceptedCmp3'] + campaign_country['AcceptedCmp4'],\n      color = 'gray')\nax.bar(campaign_country['Country'], campaign_country['Response'], \n       bottom = campaign_country['AcceptedCmp1'] + campaign_country['AcceptedCmp2'] + campaign_country['AcceptedCmp3'] + campaign_country['AcceptedCmp4'] + campaign_country['AcceptedCmp5'])\n\nax.legend(['Cmp 1', 'Cmp 2', 'Cmp 3', 'Cmp 4', 'Cmp 5', 'Cmp 6'], ncol = 3, \n          bbox_to_anchor = (0.5, 0.7), loc = 'upper center')\n\nfor s in ['top', 'right']:\n    ax.spines[s].set_visible(False)\n    \nax.text(-0.5, 1.1, \"CAMPAIGN ACCEPTED BY COUNTRY\", fontsize = 20, fontfamily = 'serif', fontweight = 'bold', \n        color = 'black', bbox={'facecolor': 'white', 'alpha': 0.5, 'pad': 10}, style = 'italic')\n\nplt.show()","4d8f62da":"pal_list = ['#e2d810', '#d9138a', '#12a4d9', '#322e2f', 'gray']\n\nfig, ax = plt.subplots(2, 3, figsize = (15, 10))\nfig.patch.set_facecolor('white')\n\nax0 = ax[0, 0]\nax1 = ax[0, 1]\nax2 = ax[0, 2]\nax3 = ax[1, 0]\nax4 = ax[1, 1]\nax5 = ax[1, 2]\n\nfor i in range(0, 6):\n    locals()[f'ax{i}'].grid(which='major', axis='x', zorder=0, color='black', linestyle=':', dashes=(1,5))\n\n#Campaign 1\nacc1 = df2[df2['AcceptedCmp1'] == 1]\nno_acc1 = df2[df2['AcceptedCmp1'] == 0]\nsns.kdeplot(acc1['Total_Spending'], ax = ax0, color = \"#e2d810\", alpha = 0.9, shade = True)\nsns.kdeplot(no_acc1['Total_Spending'], ax = ax0, color = \"#d9138a\", alpha = 0.9, shade = True)\n\n#Campaign 2\nacc2 = df2[df2['AcceptedCmp2'] == 1]\nno_acc2 = df2[df2['AcceptedCmp2'] == 0]\nsns.kdeplot(acc2['Total_Spending'], ax = ax1, color = \"#e2d810\", alpha = 0.9, shade = True)\nsns.kdeplot(no_acc2['Total_Spending'], ax = ax1, color = \"#d9138a\", alpha = 0.9, shade = True)\n\n#Campaign 3\nacc3 = df2[df2['AcceptedCmp3'] == 1]\nno_acc3 = df2[df2['AcceptedCmp3'] == 0]\nsns.kdeplot(acc3['Total_Spending'], ax = ax2, color = \"#e2d810\", alpha = 0.9, shade = True)\nsns.kdeplot(no_acc3['Total_Spending'], ax = ax2, color = \"#d9138a\", alpha = 0.9, shade = True)\n\n#Campaign 4\nacc4 = df2[df2['AcceptedCmp4'] == 1]\nno_acc4 = df2[df2['AcceptedCmp4'] == 0]\nsns.kdeplot(acc4['Total_Spending'], ax = ax3, color = \"#e2d810\", alpha = 0.9, shade = True)\nsns.kdeplot(no_acc4['Total_Spending'], ax = ax3, color = \"#d9138a\", alpha = 0.9, shade = True)\n\n#Campagin 5\nacc5 = df2[df2['AcceptedCmp5'] == 1]\nno_acc5 = df2[df2['AcceptedCmp5'] == 0]\nsns.kdeplot(acc5['Total_Spending'], ax = ax4, color = \"#e2d810\", alpha = 0.9, shade = True)\nsns.kdeplot(no_acc5['Total_Spending'], ax = ax4, color = \"#d9138a\", alpha = 0.9, shade = True)\n\n#Last Campaign \/ Response\nres = df2[df2['Response'] == 1]\nno_res = df2[df2['Response'] == 0]\nsns.kdeplot(res['Total_Spending'], ax = ax5, color = \"#e2d810\", alpha = 0.9, shade = True)\nsns.kdeplot(no_res['Total_Spending'], ax = ax5, color = \"#d9138a\", alpha = 0.9, shade = True)\n\nfor s in [\"top\",\"right\",\"left\"]:\n    for i in range(0, 6):\n        locals()[f'ax{i}'].spines[s].set_visible(False)\n\nfor i in range(0, 6):\n    locals()[f'ax{i}'].set_ylabel('')\n    locals()[f'ax{i}'].set_xlabel('')\n    locals()[f'ax{i}'].set(yticks = [])\n\nax0.text(-0.56, 0.0015, 'Campaign 1', fontsize = 15, fontweight = 'bold', fontfamily = 'serif', color = 'black')\nax1.text(-0.56, 0.0014, 'Campaign 2', fontsize = 15, fontweight = 'bold', fontfamily = 'serif', color = 'black')\nax2.text(-0.56, 0.0014, 'Campaign 3', fontsize = 15, fontweight = 'bold', fontfamily = 'serif', color = 'black')\nax3.text(-0.56, 0.0015, 'Campaign 4', fontsize = 15, fontweight = 'bold', fontfamily = 'serif', color = 'black')\nax4.text(-0.56, 0.0015, 'Campaign 5', fontsize = 15, fontweight = 'bold', fontfamily = 'serif', color = 'black')\nax5.text(-0.56, 0.0015, \"Campaign 6 (Response)\", fontsize = 15, fontweight = 'bold', fontfamily = 'serif', color = 'black')\n\nfig.text(0.1, 1, \"TOTAL SPENDING AND CAMPAIGN ACCEPTED RELATIONSHIP: \\nDEEP UNDERSTANDING\", fontsize = 18, \n         fontfamily = 'serif', fontweight = 'bold', color = 'black', \n         bbox={'facecolor': 'white', 'alpha': 0.5, 'pad': 12}, style = 'italic', va = 'center')\nfig.text(0.1, 0.93, \"Its clear to see that there are several campaign (Campaign 1, Campaign 2, Campaign 5) influenced by Total Spending feature.\",\n        fontsize = 13, fontfamily = 'serif', fontweight = 'light', color = 'black')\n\nax0.legend(['Accepted', 'Not Accepted'], ncol = 2, bbox_to_anchor = (3.2, 1.35), loc = 'upper center')\n\nplt.show()","16ded1a3":"The same issue here that Mexico has highest acceptace rate by country simply because Mexico has small proportion of the total observations. So again we assume here that Mexico in the last order in terms of acceptance rate","33939ea7":"# **INTRODUCTION**\n\nThis notebook contains data on the implementation of marketing to customers. We create reports and analyze them to know the actionable insight into decision making purpose.\n\nNow, build some insight questions may helpful for our works in understanding the data through univariate and multivariate analysis.\n\n**Core question to answer in this notebook:**\n1. How is the marketing acceptance rate in each country?\n2. How do we do marketing in the future?\n\n**Derivative question to get the answer:**\n1. How does customer identity looks like in the data?\n2. What products are the bestseller?\n3. How can we defined customer behavior using available feature in the data?\n","7cebf083":"Wee see here that of our customer spend more when they doesn't have any dependents.This indicates that our products are more salable to them. However, it is also interesting that there are total spending outliers or certain pattern happening for 1,2,3 dependent. Maybe they have more income to cover that spending or having higher education. On the other hand, we don't see any marital status changing the pattern for the total spending feature\n         \nNext, we will see how this total spending feature is affiliated with the implementation of the campaign","7f721924":"Here we do some data cleaning and feature engineering to get important feature for analysis","76a8016c":"# **Univariate Analysis**\n\nHere we setting palette for visualization ['#e2d810', '#d9138a', '#12a4d9', '#322e2f', 'gray']","8fd9f0fb":"# **Conclusion**\n\nAction Suggestions:\n1. Spain has the most customer basis that already exist. Therefore campaign marketing should conduct by retension (keep repeating purchase from existing customer) at any level of marketing budget.\n2. Since campaign acceptance rate is influenced by Total Spending (add: Total Spending is influence by Generation and Education), campaign 1, 2, 5 deserved to be continued in its conduct.\n3. If there are marketing budget left, customer acquisition must be an important strategies to improve new customer basis by Income, Generation, Dependet consideration","bc250957":"Here income has positive realtionship with age\/generation: when age increase, income will increase respectively. On the other hand, there is suspicious data that Gen Z has higher average income than the other generation with higher education. This is happening because Gen Z has small proportion of observation. So we assume that Gen Z is at the bottom of the order in terms of income.","39b78fc3":"# **Multivariate Analysis**","99fe8acd":"For categorical feature, here we found that most customer came from Spain, Graduate ed., married, and Gen X"}}