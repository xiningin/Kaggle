{"cell_type":{"d3c9fd8c":"code","e494f3c2":"code","5ba04afc":"code","e0c94b54":"code","5998e60b":"code","781330c0":"code","66b32613":"code","28c7f46d":"code","9c9a4265":"code","81fd00f7":"code","98abe2f4":"code","4b356c62":"code","79f6456f":"code","03c6e54a":"code","264c2490":"code","1e73ea5b":"code","68f6fe03":"code","3d5b4773":"code","725d8e80":"code","9fbf4951":"code","55399ac5":"code","c5e5ffd8":"markdown","dcc5d398":"markdown","6ccb5b64":"markdown","e0e6e0cb":"markdown","9ccca71f":"markdown","e616d5dd":"markdown","de6963fb":"markdown","4a99f163":"markdown","ea9c3709":"markdown","8f45ef5d":"markdown","82f5f889":"markdown","0b522eab":"markdown"},"source":{"d3c9fd8c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import f1_score, accuracy_score, confusion_matrix\nfrom sklearn.metrics import classification_report, confusion_matrix  \nimport seaborn as sns\nfrom sklearn.model_selection import GridSearchCV\n\nimport pickle\n\nimport sys \nimport urllib\nimport urllib.request","e494f3c2":"df = pd.read_csv('..\/input\/disease-symptom-description-dataset\/dataset.csv')\ndf.drop(['Symptom_7','Symptom_8','Symptom_9','Symptom_10','Symptom_11','Symptom_12','Symptom_13','Symptom_14','Symptom_15','Symptom_16','Symptom_17'],axis=1,inplace=True)\nprint(df.head())\n#df.describe()\ndf1 = pd.read_csv('..\/input\/disease-symptom-description-dataset\/Symptom-severity.csv')\ndf1.head()","5ba04afc":"df.isna().sum()\ndf.isnull().sum()","e0c94b54":"cols = df.columns\ndata = df[cols].values.flatten()\n\ns = pd.Series(data)\ns = s.str.strip()\ns = s.values.reshape(df.shape)\n\ndf = pd.DataFrame(s, columns=df.columns)\n\ndf = df.fillna(0)\ndf.head()","5998e60b":"vals = df.values\nsymptoms = df1['Symptom'].unique()\n\nfor i in range(len(symptoms)):\n    vals[vals == symptoms[i]] = df1[df1['Symptom'] == symptoms[i]]['weight'].values[0]\n    \nd = pd.DataFrame(vals, columns=cols)\n\nd = d.replace('dischromic _patches', 0)\nd = d.replace('spotting_ urination',0)\ndf = d.replace('foul_smell_of urine',0)\ndf.head()","781330c0":"(df[cols] == 0).all()\n\ndf['Disease'].value_counts()\n\ndf['Disease'].unique()\n\ndata = df.iloc[:,1:].values\nlabels = df['Disease'].values","66b32613":"x_train, x_test, y_train, y_test = train_test_split(data, labels, shuffle=True, train_size = 0.8, random_state = 42)\nprint(x_train.shape, x_test.shape, y_train.shape, y_test.shape)","28c7f46d":"param_grid = {'C': [0.02,0.03,0.04,0.05], 'gamma': [0.2,0.3,0.4,0.5],'kernel': ['linear','rbf', 'poly', 'sigmoid']}\ngrid = GridSearchCV(SVC(),param_grid,refit=True,verbose=2)\ngrid.fit(x_train,y_train)\nprint(grid.best_estimator_)\n\ngrid_predictions = grid.predict(x_test)\nprint(confusion_matrix(y_test,grid_predictions))\nprint(classification_report(y_test,grid_predictions))#Output","9c9a4265":"model = SVC(C=0.02, gamma=0.4, kernel='poly')\nmodel.fit(x_train, y_train)\n\npreds = model.predict(x_test)","81fd00f7":"import pickle\n# now you can save it to a file\nwith open('SympDetector.pkl', 'wb') as f:\n    pickle.dump(model, f)\n\n# and later you can load it\nwith open('SympDetector.pkl', 'rb') as f:\n    model = pickle.load(f)","98abe2f4":"conf_mat = confusion_matrix(y_test, preds)\ndf_cm = pd.DataFrame(conf_mat, index=df['Disease'].unique(), columns=df['Disease'].unique())\nprint('F1-score% =', f1_score(y_test, preds, average='macro')*100, '|', 'Accuracy% =', accuracy_score(y_test, preds)*100)\nsns.heatmap(df_cm)","4b356c62":"def predd(S1,S2,S3,S4,S5,S6):\n    psymptoms = [S1,S2,S3,S4,S5,S6]\n    print(psymptoms)\n    a = np.array(df1[\"Symptom\"])\n    b = np.array(df1[\"weight\"])\n    for j in range(len(psymptoms)):\n        for k in range(len(a)):\n            if psymptoms[j]==a[k]:\n                psymptoms[j]=b[k]\n\n    psy = [psymptoms]\n\n    pred2 = model.predict(psy)\n    print(pred2[0])","79f6456f":"sympList=df1[\"Symptom\"].to_list()\npredd(sympList[8],sympList[5],sympList[1],sympList[3],sympList[4],sympList[11])","03c6e54a":"from sklearn.neighbors import KNeighborsClassifier\nerror = []\n\n\nfor i in range(1, 10):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(x_train, y_train)\n    pred_i = knn.predict(x_train)\n    error.append(np.mean(pred_i != y_train))\nplt.figure(figsize=(12, 6))\nplt.plot(range(1, 10), error, color='red', linestyle='dashed', marker='o',\n         markerfacecolor='blue', markersize=10)\nplt.title('Error Rate K Value')\nplt.xlabel('K Value')\nplt.ylabel('Mean Error')","264c2490":"classifier = KNeighborsClassifier(n_neighbors=3)\nclassifier.fit(x_train, y_train)","1e73ea5b":"y_pred = classifier.predict(x_test)","68f6fe03":"print(classification_report(y_test, y_pred))","3d5b4773":"from sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score","725d8e80":"rnd_forest = RandomForestClassifier()\nrnd_forest.fit(x_train,y_train)","9fbf4951":"cross_val_score(rnd_forest,x_train,y_train,cv=10).mean()","55399ac5":"y_pred = rnd_forest.predict(x_test)\nprint(classification_report(y_test, y_pred))","c5e5ffd8":"<h2>Importing the dataset<\/h2>","dcc5d398":"## Checking with other models","6ccb5b64":"<h2>Functions used for prediction<\/h2>","e0e6e0cb":"### KNN","9ccca71f":"<h2>Importing the libraries<\/h2>","e616d5dd":"<h2>Checking accuracy of the model<\/h2>","de6963fb":"<h2>Making Predictions<\/h2>","4a99f163":"<h2>Splitting the data and training the model<\/h2>","ea9c3709":"<h2> Storing the diseases and encoded symptoms in seperate dataframes<\/h2>","8f45ef5d":"### Random Forest","82f5f889":"<h2>Encoding the the symptoms with their severity weight<\/h2>","0b522eab":"<h2>Cleaning of Data<\/h2>"}}