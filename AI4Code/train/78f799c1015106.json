{"cell_type":{"d18c80a3":"code","8613447a":"code","9a87162b":"code","398130f2":"code","ee69f213":"code","5397888a":"code","9a654714":"code","7b0fc99f":"code","e0d96837":"markdown","b5b4c89e":"markdown","c4e8395c":"markdown","fda78527":"markdown","f2711a42":"markdown"},"source":{"d18c80a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nfrom matplotlib import pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8613447a":"import torch\nfrom torch import nn\nfrom torch.nn.utils.rnn import pad_sequence\nimport torchvision.transforms as T\nfrom PIL import Image\nimport spacy\nimport os\nfrom torch.utils.data import Dataset\nfrom torch.utils.data import DataLoader\n\nspacy_eng = spacy.load(\"en\")","9a87162b":"# For prepararing the vocabulary \n\nclass Vocabulary:\n    def __init__(self, freq_threshold):\n        self.freq_threshold = freq_threshold\n        self.itos = {0: \"<PAD>\", 1: \"<SOS>\", 2: \"<EOS>\", 3: \"<UNK>\"}\n        self.stoi = {v: k for k,v in self.itos.items()}\n    \n    def __len__(self):\n        return len(itos)\n  \n    @staticmethod\n    def tokenize(text):\n        return [token.text.lower() for token in spacy_eng.tokenizer(text)]\n  \n    def build_vocab(self, sent_list):\n        freqs = {}\n        idx = 4\n        for sent in sent_list:\n            sent = str(sent)\n            for word in self.tokenize(sent):\n                if word not in freqs:\n                    freqs[word] = 1\n                else:\n                    freqs[word] += 1\n\n                if freqs[word] == self.freq_threshold:\n                    self.itos[idx] = word\n                    self.stoi[word] = idx\n                    idx += 1\n\n    def numericalize(self, sents):\n        tokens = self.tokenize(sents)\n        return [self.stoi[token] if token in self.stoi else self.stoi[\"<UNK>\"] \n                for token in tokens]","398130f2":"# custom dataset class to get numericalized captions and images\nclass FlickrDataset(Dataset):\n    def __init__(self, root_dir, caps, transforms=None, freq_threshold=5):\n        self.root_dir = root_dir\n        self.df = pd.read_csv(caps, delimiter='|')\n        self.transforms = transforms\n\n        self.img_pts = self.df['image_name']\n        self.caps = self.df[' comment']\n        self.vocab = Vocabulary(freq_threshold)\n        self.vocab.build_vocab(self.caps.tolist())\n\n    def __len__(self):\n        return len(self.df)\n  \n    def __getitem__(self, idx):\n        captions = self.caps[idx]\n        img_pt = self.img_pts[idx]\n        img = Image.open(os.path.join(self.root_dir, img_pt)).convert('RGB')\n\n        if self.transforms is not None:\n            img = self.transforms(img)\n\n        numberized_caps = []\n        numberized_caps += [self.vocab.stoi[\"<SOS>\"]] # stoi string to index\n        numberized_caps += self.vocab.numericalize(captions)\n        numberized_caps += [self.vocab.stoi[\"<EOS>\"]]\n        return img, torch.tensor(numberized_caps)","ee69f213":"# Padding the captions according to the largest caption in the batch\nclass CapCollat:\n    def __init__(self, pad_seq, batch_first=False):\n        self.pad_seq = pad_seq\n        self.batch_first = batch_first\n  \n    def __call__(self, batch):\n        imgs = [itm[0].unsqueeze(0) for itm in batch]\n        imgs = torch.cat(imgs, dim=0)\n\n        target_caps = [itm[1] for itm in batch]\n        target_caps = pad_sequence(target_caps, batch_first=self.batch_first,\n                                   padding_value=self.pad_seq)\n        return imgs, target_caps","5397888a":"def show_img(img, caption):\n    img = img.permute(1,2,0)\n    plt.imshow(img)\n    plt.title(caption)\n    plt.show()","9a654714":"batch_size = 32\nroot_folder = \"\/kaggle\/input\/flickr-image-dataset\/flickr30k_images\/flickr30k_images\/\"\ncsv_file = \"\/kaggle\/input\/flickr-image-dataset\/flickr30k_images\/results.csv\"\n\n# Images normalized according to resnet 50 expectations (optional)\ntransforms = T.Compose([\n    T.Resize((224,224)),\n    T.ToTensor(),\n    T.Normalize(mean=[0.485, 0.456, 0.406],\n                std=[0.229, 0.224, 0.225])\n])\nnum_workers = 2\nbatch_first = True\npin_memory = True\nshuffle = True\ndataset = FlickrDataset(root_folder, csv_file, transforms)\npad_idx = dataset.vocab.stoi[\"<PAD>\"]\n# Data Loader\ndataloader = DataLoader(dataset,\n                    batch_size=batch_size,\n                    pin_memory=pin_memory,\n                    num_workers=num_workers,\n                    shuffle=shuffle,\n                    collate_fn=CapCollat(pad_seq=pad_idx, batch_first=batch_first))","7b0fc99f":"dataitr = iter(dataloader)\nbatch = next(dataitr)\nimages, captions = batch\nprint(captions.shape)\nprint(captions[1])\nfor i in range(batch_size):\n    img,cap = images[i],captions[i]\n    caption_label = [dataset.vocab.itos[token] for token in cap.tolist()]\n    eos_index = caption_label.index('<EOS>')\n    caption_label = caption_label[1:eos_index]\n    caption_label = ' '.join(caption_label)                      \n    show_img(img,caption_label)\n    plt.show()","e0d96837":"## Collat for padding","b5b4c89e":"## Preparing Vocab","c4e8395c":"Creadits to [Aladdin Persson](https:\/\/www.youtube.com\/channel\/UCkzW5JSFwvKRjXABI-UTAkQ) for an amazing video on how to prepare datasets [link to the video](https:\/\/www.youtube.com\/watch?v=9sHcLvVXsns&list=PLhhyoLH6IjfxeoooqP9rhU3HJIAVAJ3Vz&index=11)","fda78527":"## Custom Dataset","f2711a42":"## Test the datasets"}}