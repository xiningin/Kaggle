{"cell_type":{"d2f9a519":"code","438ed2ff":"code","70530c5a":"code","b26be75c":"code","37a45d7c":"code","41da96b2":"code","3bb8b142":"code","aab5a8d9":"code","bc11c868":"code","e46b4d3b":"code","c50c05be":"code","104ed3b4":"code","94eb5f3d":"code","db627e5b":"code","abbfa943":"code","08e578fa":"code","8d6c51ab":"code","dd2f6763":"code","7c607366":"code","7d03c9fb":"code","3f4c57a2":"markdown","018f7845":"markdown","ec31023a":"markdown","36eb6899":"markdown","296e59ee":"markdown","2cc28694":"markdown","d5b4907b":"markdown","907dc262":"markdown"},"source":{"d2f9a519":"import numpy as np # linear Algebra\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\nimport itertools\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow.keras.utils import to_categorical #(one-hot-encoding)\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, MaxPooling2D\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau","438ed2ff":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","70530c5a":"train.shape, test.shape ","b26be75c":"train.head() ","37a45d7c":"X_train = train.iloc[:,1:].values.astype('float32')\ny_train = train['label'].values.astype('int32')\ntest = test.values.astype('float32')\n\ndel train","41da96b2":"# Normalizing the data\nX_train = X_train \/ 255.0 \ntest = test \/ 255.0 ","3bb8b142":"#Convert train dataset to (num_images, img_rows, img_cols) format\nX_train = X_train.reshape(X_train.shape[0], 28, 28, 1)\ntest = test.reshape(test.shape[0], 28, 28, 1)","aab5a8d9":"y_train","bc11c868":"y_train = to_categorical(y_train)\ny_train","e46b4d3b":"np.random.seed(2) ","c50c05be":"# Splits data between training and testing\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.1, random_state = 2)","104ed3b4":"model = Sequential()\n\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5), padding = 'Same', activation = 'relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5), padding = 'Same', activation = 'relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3), padding = 'Same', activation = 'relu'))\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3), padding = 'Same', activation = 'relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.2))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10, activation = 'softmax'))","94eb5f3d":"model.compile(optimizer=\"adam\", loss='categorical_crossentropy', metrics=['accuracy'])","db627e5b":"epochs = 50 \nbatch_size = 64 ","abbfa943":"datagen = ImageDataGenerator(featurewise_center=False,\n                            samplewise_center=False,\n                            featurewise_std_normalization=False,\n                            samplewise_std_normalization=False,\n                            zca_whitening=False,\n                            rotation_range=10,\n                            zoom_range=0.1,\n                            width_shift_range=0.1,\n                            height_shift_range=0.1,\n                            horizontal_flip=False,\n                            vertical_flip=False)\ndatagen.fit(X_train)","08e578fa":"# Ajust and train the model\nhistory = model.fit_generator(datagen.flow(X_train,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_test,y_test),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size)","8d6c51ab":"# Predict the test database\n# OBS: That return a probability of results\nresults = model.predict(test)\n","dd2f6763":"# Takes the highest probability\nresults = np.argmax(results,axis = 1)\nresults = pd.Series(results,name=\"Label\")","7c607366":"# Makes a dataframe with the answers\noutput = pd.concat([pd.Series(range(1,28001), name = 'ImageId'), results], axis = 1)\noutput","7d03c9fb":"output.to_csv('submission.csv', index=False)","3f4c57a2":"Plase, if this notebook was useful, give a upvote.\n\nIf you have any questions, put them in the comments","018f7845":"Now, let's use one-hot encoding\n    \n    What was just number 2 becomes an array of zeros in which the array's index 2 is equal to 1\n    2 -> [0,0,1,0,0,0,0,0,0,0]","ec31023a":"# Data Augmentation\n   This technique can be used to artificially increase the amount of data. In the code below, for example, this technique was employed taking the data from the original images of the dataset, and generating new modified images.","36eb6899":"# Imports","296e59ee":"# Introduction","2cc28694":"# References:\n\n* https:\/\/keras.io\/\n* https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6\n* https:\/\/www.kaggle.com\/elcaiseri\/mnist-simple-cnn-keras-accuracy-0-99-top-1","d5b4907b":"MNIST is a database with 60000 images of numbers and tags with answers to those numbers. In this challenge, we have to use the training database (with 42000 images) to predict the labels of the test database (28000 images).\n\nFor that, in this kernel, was used the keras API(Tensoflow backend)","907dc262":"# Covolutional Neural Network\n\n   When it comes to images, CNN (Covolutional Neural Network) stands out. This is because, if used correctly, this model tends to have one of the best rates in the classification of images."}}