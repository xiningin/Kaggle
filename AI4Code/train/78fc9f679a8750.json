{"cell_type":{"f28466a2":"code","20a0eddf":"code","b8a8bd4a":"code","0e14df12":"code","7cd836df":"code","503a7430":"code","2fb3a6c5":"code","7a680f25":"code","b2c18f1d":"code","3386c35f":"code","f420354e":"code","062320c4":"code","133201ec":"code","0ed2e2c8":"code","6f088c6a":"code","fff25c6c":"code","2bace2df":"code","30c924d7":"code","8d583931":"code","3d52f9ef":"code","530fd7da":"code","1d2087e4":"code","ee5368de":"code","961f660a":"code","fa787486":"code","82451cd4":"code","6d1aaa24":"code","2d96fb5e":"code","665a3077":"code","03fb1684":"code","a5c6457a":"code","556aaa4c":"code","4d4b66e1":"code","0bda1eec":"code","f9d494c2":"code","dc064389":"code","edddd119":"code","f675047d":"code","47f9d085":"code","03cf5373":"code","9ee26c2c":"code","ea1a6910":"code","8874b5e2":"code","2dc30bdf":"code","717e1c35":"code","2a86bb5b":"code","bba41c78":"code","34731158":"code","a925332b":"markdown","17c95e1d":"markdown","6d691195":"markdown","ae300780":"markdown","7421da09":"markdown","8da18bf3":"markdown","1b9157f6":"markdown","c185f354":"markdown","84685611":"markdown","7ed72cd8":"markdown"},"source":{"f28466a2":"!curl 'https:\/\/storage.googleapis.com\/kaggle-competitions-data\/kaggle-v2\/21265\/1267903\/compressed\/Human%20protein%20atlas.zip?GoogleAccessId=web-data@kaggle-161607.iam.gserviceaccount.com&Expires=1593506175&Signature=IXS4%2BjneoOGklDeXTyt4Kz9p3wV6DvqfMZzNO2CvTwoMbZ4Z%2F71dyyg8MK9nx0ooqv4f3%2F7w9RySDptYmXKuJVVoibTJAKfFXL6hcq6ctcJLIHq5SnhC0Trl0pLa00xcvFmh0Sd%2FTKad9YrkMpEmzdg%2BCTG4G%2FDntZ82mvYIZysnZh19K1o4gFB3xsXzEQvaZpIItW28EOiuAWjDYdLKR3Qcy5HSXHV47m%2F9YLrZKBMwzz8FycS08J3Cs9Fa7atzGC%2FUudcBEMcsHdRN4KJciz1VCG3Y5sDPanK0O7kORhg2z%2B%2FjijwZBdIqkX4pL8An1eLPjLEudns3he%2By4dm81Q%3D%3D&response-content-disposition=attachment%3B+filename%3D%22Human+protein+atlas.zip%22' -o data.zip","20a0eddf":"! unzip data.zip -d data","b8a8bd4a":"!rm -rf '\/content\/data.zip'","0e14df12":"import os\nimport torch\nimport pandas as pd\nimport numpy as np\nfrom torch.utils.data import Dataset, random_split, DataLoader\nfrom PIL import Image\nimport torchvision.models as models\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\nimport torchvision.transforms as T\nfrom sklearn.metrics import f1_score\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torchvision.utils import make_grid\n%matplotlib inline","7cd836df":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\ndevice","503a7430":"DATA_DIR = '\/content\/data'\n\nTRAIN_DIR = DATA_DIR + '\/train'                           \nTEST_DIR = DATA_DIR + '\/test'                             \n\nTRAIN_CSV = DATA_DIR + '\/train.csv'                       \nTEST_CSV = '\/content\/submission.csv' ","2fb3a6c5":"training_df = pd.read_csv(TRAIN_CSV)\nprint(training_df.shape)\ntraining_df.head()","7a680f25":"labels = {\n    0: 'Mitochondria',\n    1: 'Nuclear bodies',\n    2: 'Nucleoli',\n    3: 'Golgi apparatus',\n    4: 'Nucleoplasm',\n    5: 'Nucleoli fibrillar center',\n    6: 'Cytosol',\n    7: 'Plasma membrane',\n    8: 'Centrosome',\n    9: 'Nuclear speckles'\n}","b2c18f1d":"def encode_label(label):\n    target = torch.zeros(10)\n    for l in str(label).split(' '):\n        target[int(l)] = 1.\n    return target\n\ndef decode_target(target, text_labels=False, threshold=0.5):\n    result = []\n    for i, x in enumerate(target):\n        if (x >= threshold):\n            if text_labels:\n                result.append(labels[i] + \"(\" + str(i) + \")\")\n            else:\n                result.append(str(i))\n    return ' '.join(result)","3386c35f":"def show_sample(img, target, invert=True):\n    if invert:\n        plt.imshow(1 - img.permute((1, 2, 0)))\n    else:\n        plt.imshow(img.permute(1, 2, 0))\n    print('Labels:', decode_target(target, text_labels=True))\n    \ndef show_batch(dl, invert=True):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(16, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        data = 1-images if invert else images\n        ax.imshow(make_grid(data, nrow=16).permute(1, 2, 0))\n        break","f420354e":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)","062320c4":"class HumanProteinDataset(Dataset):\n    def __init__(self, df, root_dir, transform=None):\n        self.df = df\n        self.transform = transform\n        self.root_dir = root_dir\n        \n    def __len__(self):\n        return len(self.df)    \n    \n    def __getitem__(self, idx):\n        row = self.df.loc[idx]\n        img_id, img_label = row['Image'], row['Label']\n        img_fname = self.root_dir + \"\/\" + str(img_id) + \".png\"\n        img = Image.open(img_fname)\n        if self.transform:\n            img = self.transform(img)\n        return img, encode_label(img_label)","133201ec":"mean = [0.0793, 0.0530, 0.0545]\nstd = [0.1290, 0.0886, 0.1376]\n\nnormalize = T.Normalize(mean=mean, std=std)\n\ntrain_tf = T.Compose([\n    T.RandomCrop(512, padding=8, padding_mode='symmetric'),\n    T.RandomHorizontalFlip(), \n    T.RandomRotation(10),\n    T.ToTensor(),\n    normalize,\n    T.RandomErasing(inplace=True)\n])\n\nval_tf = T.Compose([\n    T.RandomCrop(512, padding=8, padding_mode='symmetric'),\n    T.ToTensor(),\n    normalize\n])","0ed2e2c8":"np.random.seed(78)\nmsk = np.random.rand(len(training_df)) < 0.9\n\ntrain_df = training_df[msk].reset_index()\nval_df = training_df[~msk].reset_index()","6f088c6a":"train_ds = HumanProteinDataset(train_df, TRAIN_DIR, transform=train_tf)\nval_ds = HumanProteinDataset(val_df, TRAIN_DIR, transform=val_tf)\nlen(train_ds), len(val_ds)","fff25c6c":"batch_size = 16\ntrain_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=2, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, num_workers=2, pin_memory=True)","2bace2df":"show_batch(train_dl)","30c924d7":"class MultilabelImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, targets = batch \n        out = self(images)                      \n        loss = F.binary_cross_entropy(out, targets)      \n        return loss\n    \n    def validation_step(self, batch):\n        images, targets = batch \n        out = self(images)                           # Generate predictions\n        loss = F.binary_cross_entropy(out, targets)  # Calculate loss\n        score = F_score(out, targets)\n        return {'val_loss': loss.detach(), 'val_score': score.detach() }\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_scores = [x['val_score'] for x in outputs]\n        epoch_score = torch.stack(batch_scores).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_score': epoch_score.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], last_lr: {:.4f}, train_loss: {:.4f}, val_loss: {:.4f}, val_score: {:.4f}\".format(\n            epoch, result['lrs'][-1], result['train_loss'], result['val_loss'], result['val_score']))","8d583931":"resnet = models.resnet18(pretrained=True)","3d52f9ef":"class ProteinResnet(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = resnet\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, 10)\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))\n    \n    def freeze(self):\n        # To freeze the residual layers\n        for param in self.network.parameters():\n            param.require_grad = False\n        for param in self.network.fc.parameters():\n            param.require_grad = True\n    \n    def unfreeze(self):\n        # Unfreeze all layers\n        for param in self.network.parameters():\n            param.require_grad = True","530fd7da":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","1d2087e4":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)","ee5368de":"def F_score(output, label, threshold=0.5, beta=1):\n    prob = output > threshold\n    label = label > threshold\n\n    TP = (prob & label).sum(1).float()\n    TN = ((~prob) & (~label)).sum(1).float()\n    FP = (prob & (~label)).sum(1).float()\n    FN = ((~prob) & label).sum(1).float()\n\n    precision = torch.mean(TP \/ (TP + FP + 1e-12))\n    recall = torch.mean(TP \/ (TP + FN + 1e-12))\n    F2 = (1 + beta**2) * precision * recall \/ (beta**2 * precision + recall + 1e-12)\n    return F2.mean(0)","961f660a":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, \n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    \n    # Set up cutom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n                                                steps_per_epoch=len(train_loader))\n    \n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # Gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n            \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n        \n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","fa787486":"model = to_device(ProteinResnet(), device)","82451cd4":"history = [evaluate(model, val_dl)]\nhistory","6d1aaa24":"model.freeze()","2d96fb5e":"epochs = 5\nmax_lr = 0.01\ngrad_clip = 0.1\nweight_decay = 1e-4\nopt_func = torch.optim.Adam","665a3077":"%%time\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","03fb1684":"model.unfreeze()","a5c6457a":"%%time\nhistory += fit_one_cycle(epochs, 0.001, model, train_dl, val_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","556aaa4c":"def plot_scores(history):\n    scores = [x['val_score'] for x in history]\n    plt.plot(scores, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('score')\n    plt.title('F1 score vs. No. of epochs');","4d4b66e1":"plot_scores(history)","0bda1eec":"def plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');","f9d494c2":"plot_losses(history)","dc064389":"def plot_lrs(history):\n    lrs = np.concatenate([x.get('lrs', []) for x in history])\n    plt.plot(lrs)\n    plt.xlabel('Batch no.')\n    plt.ylabel('Learning rate')\n    plt.title('Learning Rate vs. Batch no.');","edddd119":"plot_lrs(history)","f675047d":"def predict_single(image):\n    xb = image.unsqueeze(0)\n    xb = to_device(xb, device)\n    preds = model(xb)\n    prediction = preds[0]\n    print(\"Prediction: \", prediction)\n    show_sample(image, prediction)","47f9d085":"test_df = pd.read_csv(TEST_CSV)\ntest_dataset = HumanProteinDataset(test_df, TEST_DIR, transform=val_tf)","03cf5373":"img, target = test_dataset[0]\nimg.shape","9ee26c2c":"predict_single(test_dataset[37][0])","ea1a6910":"predict_single(test_dataset[78][0])","8874b5e2":"test_dl = DeviceDataLoader(DataLoader(test_dataset, batch_size, num_workers=3, pin_memory=True), device)","2dc30bdf":"@torch.no_grad()\ndef predict_dl(dl, model):\n    torch.cuda.empty_cache()\n    batch_probs = []\n    for xb, _ in tqdm(dl):\n        probs = model(xb)\n        batch_probs.append(probs.cpu().detach())\n    batch_probs = torch.cat(batch_probs)\n    return [decode_target(x) for x in batch_probs]","717e1c35":"test_preds = predict_dl(test_dl, model)","2a86bb5b":"submission_df = pd.read_csv(TEST_CSV)\nsubmission_df.Label = test_preds\nsubmission_df.sample(10)","bba41c78":"sub_fname = 'my_submission.csv'","34731158":"submission_df.to_csv(sub_fname, index=False)","a925332b":"### Model","17c95e1d":"#### Donwload Human Protein Atlas Dataset from Kaggle","6d691195":"#### Train Model","ae300780":"## Prepare Dataset","7421da09":"### Create Dataset","8da18bf3":"## Let's begin","1b9157f6":"### Create DataLoader","c185f354":"#### Unzip and delete archive","84685611":"### Helper function","7ed72cd8":"### Import library and dataset"}}