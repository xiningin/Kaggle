{"cell_type":{"d4abea0e":"code","eb88ac34":"code","a093993f":"code","d88c479f":"code","993c7f0a":"code","f8f72728":"code","f2ae61de":"code","42de9788":"code","b4c356c8":"code","9824eeb5":"code","65ff767b":"code","de35e0c6":"code","4971df7f":"code","d83132c1":"code","80a175b0":"code","6de21ba7":"code","6e6cbe6c":"code","7824f970":"code","651b17d5":"code","613ddcf6":"code","52459c84":"code","8120743e":"code","d0e153cc":"code","5900d5eb":"code","c4e67ec6":"code","f1d5893d":"code","e0f51295":"code","92b5ffd5":"code","9dae7991":"code","8444b380":"code","0a7c330c":"code","38dce388":"code","ddacd6ba":"code","9b673348":"markdown","5ccbeb31":"markdown","43b00ca5":"markdown","f9481c3c":"markdown","efd4eb2b":"markdown","57a174a8":"markdown","e8e20814":"markdown","bd1057e4":"markdown","e9facc25":"markdown","b3195f1c":"markdown","14b2900b":"markdown","ebdd7027":"markdown","804b8dc7":"markdown","429391d7":"markdown","950a6af2":"markdown","f42440c4":"markdown","9af37df3":"markdown","7170d7c3":"markdown","c6e4e422":"markdown","d749b779":"markdown","2c02eec8":"markdown","938558e2":"markdown","f470ed0c":"markdown","3b72174e":"markdown","47f3f159":"markdown","b2ef7020":"markdown","48cf4fc2":"markdown","89a8ae50":"markdown","f44d17d6":"markdown","bb5bf457":"markdown","029f7d98":"markdown","a46b7cf9":"markdown"},"source":{"d4abea0e":"import numpy as np\nimport pandas as pd\n# Seaborn and matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Plotly library\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools\nimport colorlover as cl\n# Others\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\ninit_notebook_mode(connected=True)\n\n# Load datasets\npayments = pd.read_csv(\"..\/input\/olist_public_dataset_v2_payments.csv\")\norders = pd.read_csv(\"..\/input\/olist_public_dataset_v2.csv\")\nreviews = pd.read_csv(\"..\/input\/olist_classified_public_dataset.csv\")\ngeo = pd.read_csv(\"..\/input\/geolocation_olist_public_dataset.csv\")\ncustomers = pd.read_csv(\"..\/input\/olist_public_dataset_v2_customers.csv\")\ntranslation = pd.read_csv(\"..\/input\/product_category_name_translation.csv\")","eb88ac34":"payments['value_log'] = payments['value'].apply(lambda x: np.log(x) if x > 0 else 0)\nunique_ = payments['order_id'].nunique()\nprint(\"DataFrame shape: {}; unique order ids: {}\".format(payments.shape, unique_))\npayments.head()","a093993f":"def plot_dist(values, log_values, title, color=\"#D84E30\"):\n    fig, axis = plt.subplots(1, 2, figsize=(12,4))\n    axis[0].set_title(\"{} - linear scale\".format(title))\n    axis[1].set_title(\"{} - logn scale\".format(title))\n    ax1 = sns.distplot(values, color=color, ax=axis[0])\n    ax2 = sns.distplot(log_values, color=color, ax=axis[1])\nlog_value = payments.value.apply(lambda x: np.log(x) if x > 0 else 0)\nplot_dist(payments.value, log_value, \"Value distribution\")","d88c479f":"payments.describe()","993c7f0a":"method_count = payments['payment_type'].value_counts().to_frame().reset_index()\nmethod_value = payments.groupby('payment_type')['value'].sum().to_frame().reset_index()\n# Plotly piechart\ncolors = None\ntrace1 = go.Pie(labels=method_count['index'], values=method_count['payment_type'],\n                domain= {'x': [0, .48]}, marker=dict(colors=colors))\ntrace2 = go.Pie(labels=method_value['payment_type'], values=method_value['value'],\n                domain= {'x': [0.52, 1]}, marker=dict(colors=colors))\nlayout = dict(title= \"Number of payments (left) and Total payments value (right)\", \n              height=400, width=800,)\nfig = dict(data=[trace1, trace2], layout=layout)\niplot(fig)","f8f72728":"ax = sns.catplot(x=\"payment_type\", y=\"value\",data=payments, aspect=2, height=3.8)","f2ae61de":"plt.figure(figsize=(10,4))\nplt.title(\"Payments distributions - logn scale\")\np1 = sns.kdeplot(payments[payments.payment_type == 'credit_card']['value_log'], color=\"navy\", label='Credit card')\np2 = sns.kdeplot(payments[payments.payment_type == 'boleto']['value_log'], color=\"orange\", label='Boleto')\np3 = sns.kdeplot(payments[payments.payment_type == 'voucher']['value_log'], color=\"green\", label='Voucher')\np4 = sns.kdeplot(payments[payments.payment_type == 'debit_card']['value_log'], color=\"red\", label='Debit card')","42de9788":"payments[payments['installments'] > 1]['payment_type'].value_counts().to_frame()","b4c356c8":"ins_count = payments.groupby('installments').size()\nins_mean = payments.groupby('installments')['value'].mean()\n\ntrace0 = go.Bar(\n    x=ins_count.index,\n    y=ins_count.values,\n    name='Number of orders',\n    marker=dict(color='rgb(49,130,189)')\n)\ntrace1 = go.Bar(\n    x=ins_mean.index,\n    y=ins_mean.values,\n    name='Mean value',\n    marker=dict(color='rgb(204,204,204)')\n)\nfig = tools.make_subplots(rows=1, cols=2, print_grid=False)\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\nfig['layout'].update(height=400, width=800, title='Number of installments',\n                     legend=dict(orientation=\"h\"))\niplot(fig)","9824eeb5":"pay_one_inst = payments[payments['installments'] == 1]\nmethod_count = pay_one_inst['payment_type'].value_counts().to_frame().reset_index()\nmethod_value = pay_one_inst.groupby('payment_type')['value'].sum().to_frame().reset_index()\n# Plotly piechart\ncolors = None\ntrace1 = go.Pie(labels=method_count['index'], values=method_count['payment_type'],\n                domain= {'x': [0, .48]}, marker=dict(colors=colors))\ntrace2 = go.Pie(labels=method_value['payment_type'], values=method_value['value'],\n                domain= {'x': [0.52, 1]}, marker=dict(colors=colors))\nlayout = dict(title= \"Orders and value for a single installment\", \n              height=400, width=800,)\nfig = dict(data=[trace1, trace2], layout=layout)\niplot(fig)","65ff767b":"unique_ = orders['order_id'].nunique()\nprint(\"DataFrame shape: {}; unique order ids: {}\".format(orders.shape, unique_))\norders.head(3)","de35e0c6":"orders[orders['order_id'] == '000330af600103828257923c9aa98ae2']","4971df7f":"count_products = orders.groupby('order_id').size().value_counts()\ntrace = go.Bar(\n    x= count_products.index,\n    y= count_products.values,\n    marker=dict(\n        color=['rgba(204,204,204,1)', 'rgba(222,45,38,0.8)',\n               'rgba(204,204,204,1)', 'rgba(204,204,204,1)',\n               'rgba(204,204,204,1)']),\n)\nlayout = go.Layout(title='Number of orders for number of products', height=420, width=800)\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig, filename='color-bar')","d83132c1":"# Products value\nsum_value = orders.groupby('order_id')['order_products_value'].sum()\nplot_dist(sum_value, np.log(sum_value), 'Products value')\n# Freights value\nsum_value = orders.groupby('order_id')['order_freight_value'].sum()\nplot_dist(sum_value, sum_value.apply(lambda x: np.log(x) if x > 0 else 0), 'Freight value', color=\"#122aa5\")","80a175b0":"# Product value by date\norders['datetime'] =  pd.to_datetime(orders['order_purchase_timestamp'])\nvalue_date = orders.groupby([orders['datetime'].dt.date])['order_products_value'].sum()\nfreight_date = orders.groupby([orders['datetime'].dt.date])['order_freight_value'].sum()\n# Plot timeseries\ntrace0 = go.Scatter(x=value_date.index.astype(str), y=value_date.values, opacity = 0.8, name='Product value')\ntrace1 = go.Scatter(x=freight_date.index.astype(str), y=freight_date.values, opacity = 0.8, name='Freight value')\nlayout = dict(\n    title= \"Product and freight value by date\",\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1, label='1m', step='month', stepmode='backward'),\n                dict(count=6, label='6m', step='month', stepmode='backward'),\n                dict(count=12, label='12m', step='month', stepmode='backward'),\n                dict(step='all')\n            ])\n        ),\n        rangeslider=dict(visible = True),\n        type='date'\n    )\n)\nfig = dict(data= [trace0, trace1], layout=layout)\niplot(fig)\n\n# Sales for month\nvalue_month = orders[['datetime', 'order_products_value']].copy()\nvalue_month.set_index('datetime', inplace=True)\nvalue_month = value_month.groupby(pd.Grouper(freq=\"M\"))['order_products_value'].sum()\ntrace = go.Bar(x= value_month.index, y= value_month.values)\nlayout = go.Layout(title='Sales per month (product value)', height=420, width=800)\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig)","6de21ba7":"# Orders by category (less 1000 orders grouped into others)\norders_count = orders.groupby('product_category_name').size()\norders_count['others'] = orders_count[orders_count < 1000].sum()\norders_count = orders_count[orders_count >= 1000].sort_values(ascending=True)\norders_value = orders.groupby('product_category_name')['order_products_value'].sum()\norders_value = orders_value[orders_count.index]\ntranslation = pd.Series(translation.product_category_name_english.values, index=translation.product_category_name)\n\ntrace0 = go.Bar(\n    y=translation[orders_count.index],\n    x=orders_count.values,\n    name='Number of orders',\n    orientation='h',\n    marker=dict(color='rgb(49,130,189)')\n)\ntrace1 = go.Bar(\n    y=translation[orders_value.index],\n    x=orders_value.values,\n    name='Total value',\n    orientation='h',\n    marker=dict(color='rgb(204,204,204)')\n)\nfig = tools.make_subplots(rows=1, cols=2, print_grid=False)\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\nfig['layout'].update(\n    height=1000,\n    width=800,\n    title='Products category',\n    margin=dict(l=150, r=10, t=100, b=100),\n    legend=dict(orientation=\"h\")\n)\nfig['layout']['xaxis1'].update(title='Orders by category', domain=[0, 0.40])\nfig['layout']['xaxis2'].update(title='Products value by category', domain=[0.6, 1])\niplot(fig)","6e6cbe6c":"items_count = orders.groupby('order_items_qty').size()\nsellers_count = orders.groupby('order_sellers_qty').size()\n\ntrace0 = go.Bar(\n    x=items_count.index,\n    y=items_count.values,\n    name='#Orders',\n    marker=dict(color='rgb(49,130,189)')\n)\ntrace1 = go.Bar(\n    x=sellers_count.index,\n    y=sellers_count.values,\n    name='#Orders',\n    marker=dict(color='rgb(204,204,204)')\n)\nfig = tools.make_subplots(rows=1, cols=2, print_grid=False)\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\nfig['layout'].update(height=400, width=800, title='Items and Sellers quantity')\nfig['layout']['xaxis1'].update(title='Items quantity', domain=[0, 0.40])\nfig['layout']['xaxis2'].update(title='Sellers quantity', domain=[0.6, 1])\niplot(fig)","7824f970":"#product_name_lenght\tproduct_description_lenght\tproduct_photos_qty\nfig, axis = plt.subplots(1, 2, figsize=(12,4))\naxis[0].set_title(\"Produt name lenght\")\naxis[1].set_title(\"Product description lenght\")\nax1 = sns.distplot(orders['product_name_lenght'], color=\"#D84E30\", ax=axis[0]) #rgba(204,204,204,1)', 'rgba(222,45,38,0.8)'\nax2 = sns.distplot(orders['product_description_lenght'], color=\"#7E7270\", ax=axis[1]) #\"#D84E30\"","651b17d5":"photo_qty = orders.groupby('product_photos_qty').size()\nphoto_value = orders.groupby('product_photos_qty')['order_products_value'].mean()\ntrace0 = go.Bar(\n    x=photo_qty.index,\n    y=photo_qty.values,\n    name='Number of Orders',\n    marker=dict(color='rgba(222,45,38,0.8)')\n)\ntrace1 = go.Bar(\n    x=photo_value.index,\n    y=photo_value.values,\n    name='Produt mean value',\n    marker=dict(color='rgba(204,204,204, 0.8)')\n)\nfig = tools.make_subplots(rows=1, cols=2, print_grid=False)\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\nfig['layout'].update(height=400, width=800, title='Photo quantity',\n                     legend=dict(orientation=\"h\"))\n#fig['layout']['xaxis1'].update(title='photo quantity', domain=[0, 0.40])\n#fig['layout']['xaxis2'].update(title='photo quantity', domain=[0.6, 1])\niplot(fig)","613ddcf6":"review_qty = orders.groupby('review_score').size()\nreview_value = orders.groupby('review_score')['order_products_value'].mean()\ntrace0 = go.Bar(\n    x=review_qty.index,\n    y=review_qty.values,\n    name='Number of orders',\n    marker=dict(color='rgb(49,130,189)')\n)\ntrace1 = go.Bar(\n    x=review_value.index,\n    y=review_value.values,\n    name='Produt mean value',\n    marker=dict(color='rgb(204,204,204)')\n)\nfig = tools.make_subplots(rows=1, cols=2, print_grid=False)\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\nfig['layout'].update(height=400, width=800, title='Review Score')\nfig['layout']['xaxis1'].update(title='review score', domain=[0, 0.40])\nfig['layout']['xaxis2'].update(title='review score', domain=[0.6, 1])\niplot(fig)","52459c84":"# Convert columns to datetime\norders['order_purchase_timestamp'] = pd.to_datetime(orders['order_purchase_timestamp'])\norders['order_aproved_at'] = pd.to_datetime(orders['order_aproved_at'])\norders['order_estimated_delivery_date'] = pd.to_datetime(orders['order_estimated_delivery_date'])\norders['order_delivered_customer_date'] = pd.to_datetime(orders['order_delivered_customer_date'])\n# Calculate differences in hours\norders['delivery_time'] = (orders['order_delivered_customer_date'] - orders['order_aproved_at']).dt.total_seconds() \/ 86400\norders['estimated_delivery_time'] = (orders['order_estimated_delivery_date'] - orders['order_aproved_at']).dt.total_seconds() \/ 86400\n# Delivery estimated time and actual delivery time\nplt.figure(figsize=(10,4))\nplt.title(\"Delivery time in days\")\nax1 = sns.kdeplot(orders['delivery_time'].dropna(), color=\"#D84E30\", label='Delivery time')\nax2 = sns.kdeplot(orders['estimated_delivery_time'].dropna(), color=\"#7E7270\", label='Estimated delivery time')","8120743e":"ax = sns.catplot(x=\"review_score\", y=\"delivery_time\", kind=\"box\",\n                 data=orders[orders.delivery_time < 60], height=4, aspect=1.5)","d0e153cc":"reviews.head(3)","5900d5eb":"class_voted = reviews.groupby('most_voted_class').size()\nsubclass_voted = reviews.groupby('most_voted_subclass').size()\ntrace0 = go.Bar(\n    x=class_voted.index,\n    y=subclass_voted.values,\n    name='Number of reviews',\n    marker=dict(color='rgb(49,130,189)')\n)\ntrace1 = go.Bar(\n    x=subclass_voted.index,\n    y=subclass_voted.values,\n    name='Number of reviews',\n    marker=dict(color='rgba(204,204,204, 0.8)')\n)\nfig = tools.make_subplots(rows=1, cols=2, print_grid=False)\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\nfig['layout'].update(height=400, width=810, title='Most voted class (left) and subclass (right)')\niplot(fig)","c4e67ec6":"review_qty = orders.groupby('review_score').size()\nreview_value = orders.groupby('review_score')['order_products_value'].mean()\n\nfig = tools.make_subplots(rows=4, cols=2, print_grid=False)\ncols = ['votes_before_estimate', 'votes_delayed', 'votes_low_quality', 'votes_return',\n        'votes_not_as_anounced', 'votes_partial_delivery', 'votes_other_delivery', 'votes_other_order',\n        'votes_satisfied']\ncols_color = [\"#F97B40\", \"#DA6C38\", \"#BB5C30\", \"#9C4D28\",\n             \"#7C3D20\", \"#5D2E18\", \"#3E1F10\", \"#1F0F08\"]\n\ncol_index = 0\nfor i in range(4):\n    for j in range(2):\n        count_ = reviews.groupby(cols[col_index]).size()\n        trace = go.Bar(\n            x=count_.index,\n            y=count_.values,\n            name=cols[col_index],\n            marker=dict(color=cols_color[col_index])\n        )\n        fig.append_trace(trace, i+1, j+1)\n        col_index += 1\n\nfig['layout'].update(height=900, width=800, title='Votes')\niplot(fig)","f1d5893d":"print(\"DataFrame shape:\", geo.shape)\ngeo.head(3)","e0f51295":"count_state = geo['state'].value_counts()\ncount_state['others'] = count_state[count_state < 10000].sum()\ntrace = go.Bar(\n    x= count_state[count_state >= 10000].index,\n    y= count_state[count_state >= 10000].values,\n    marker=dict(color='rgba(204,204,204, 0.9)')\n)\nlayout = go.Layout(title='Number of rows for each state', height=400, width=800)\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig, filename='color-bar')","92b5ffd5":"count_city = geo['city'].value_counts()\ncount_city['others'] = count_city[count_city < 3000].sum()\ntrace = go.Bar(\n    x= count_city[count_city >= 3000].index,\n    y= count_city[count_city >= 3000].values,\n    marker=dict(color='rgba(222,45,38,0.8)')\n)\nlayout = go.Layout(title='Number of rows for each city', height=400, width=800)\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig, filename='color-bar')","9dae7991":"unique_ = customers['customer_unique_id'].nunique()\nprint(\"DataFrame shape: {}; unique customers: {}\".format(customers.shape, unique_))\ncustomers.head(3)","8444b380":"orders[orders.customer_id == '109cf3ecc53afd27745a79a618cb5ec4']","0a7c330c":"customers[customers.customer_id == \"109cf3ecc53afd27745a79a618cb5ec4\"]","38dce388":"customers[customers.customer_unique_id == 'b237307cd63e0bd318ec30a97ad25fce']","ddacd6ba":"orders[orders.customer_id == 'f64b4d4b9e4185ce59b00e617e565bca']","9b673348":"<h2>5. Customers<\/h2>\n\nThe customer_id column in the orders dataset is unique for each order. To find if one customer has more than one order we need to use the customers table. Let's look at one example and see how it works.","5ccbeb31":"<h3>State and City<\/h3>","43b00ca5":"<h2>3. Reviews<\/h2>","f9481c3c":"No surprises here: most payments are done with credit card (almost 75%) and another 20% with boleto.","efd4eb2b":"<h3>work in progress...<\/h3>","57a174a8":"<h3>Delivery time<\/h3>","e8e20814":"When we plot the number of installments we can see some patterns. Most sellers in Brazil offer the option to divide the payment up to 10 installments and the mean product value increases until this number. Seven and nine installments are not usual.","bd1057e4":"<h3>Product name and description<\/h3>","e9facc25":"<h3>Review score<\/h3>","b3195f1c":"<h3>Payment method<\/h3>\n\nThere are four payment methods: credit card, debit card, boleto and voucher. Boleto is a brazillian payment method which is similar to a payment\/bank slip.","14b2900b":"<h2>1. Payments<\/h2>\n\nCustomers can pay with more than one payment method and therefore we have duplicate order ids in this frame. The sequential feature is used to indicate the payment method order.","ebdd7027":"<h3>Value distribution<\/h3>\n\nEach row corresponds to a payment method used on some product order. As stated before, the customer can use more than a single payment method for each order.","804b8dc7":"There are some outliers for the delivery time. In the next plot the delivery time was limited to two months and the x-axis is the review score:","429391d7":"Some inferences:\n* There is a huge spike in Nov 24 due to Black Friday\n* Sales are weak after Dec 20 (end-year holidays)\n* In 2016, there are some sales in october, but almost any in the following months\n* There is a spike in products value in Jul 18, but not in freigth","950a6af2":"Here the costumer bought one Domestic Utilities product for 42 and a Foods and Beverage for 17.49. Timestamps, review and customer id are also the same for both rows. The next plot shows the number of orders with more than one product:","f42440c4":"<h3>Number of photos<\/h3>","9af37df3":"<h3>Installments<\/h3>\n\nOnly credit cards can have more than one installment:","7170d7c3":"The second customer id_points to a different order (from may 2018)","c6e4e422":"<h2>Introduction<\/h2>\n\nThe Olist Brazilian Ecommerce Dataset has information about 100k purchases (orders) from 2016 to 2018. Prices are in Brazillian Real (BRL) and there are five tables in this dataset: payments, geolocation, customers, orders and classifications. The last one contains votes from three different analysts for around 3k reviews made by customers after they've received their products (through email satisfaction survey).\n\nThis notebook will go through all five tables with a quick analysis:\n\n1. Payments\n2. Orders (purchases)\n3. Classifications\/Reviews\n4. Geolocation\n5. Customers","d749b779":"<h3>Products and Freight value<\/h3>","2c02eec8":"Scores are usually good and the bad ones seems to be related to slightly more expensive products (or larger orders).","938558e2":"Most orders are less than 200 BRL, but we have a wide range of values,  so its better to plot the natural log as before:","f470ed0c":"Looking for this customer_id (109cf...) in the customers table we can find the unique_customer_id:","3b72174e":"<h3>Items and Sellers for order<\/h3>","47f3f159":"<h2>2. Orders<\/h2>","b2ef7020":"The next plot shows the number of orders (left) and the total value (right) for payments with a single installment. The distribution is quite difference here.","48cf4fc2":"There are rows with the same order_id when the customer buys more than one product.\n\nLet's look at one example:","89a8ae50":"<h3>Timeseries<\/h3>","f44d17d6":"<h3>Product category<\/h3>\n\nThere are 71 different categories with names in portuguese. The english names are avaliable in the translation csv file.","bb5bf457":"This unique customer (b237...) has two customer_id:","029f7d98":"<h2>4. Geolocation<\/h2>\n\nThis dataset has three times more rows","a46b7cf9":"The following order is from january 2017:"}}