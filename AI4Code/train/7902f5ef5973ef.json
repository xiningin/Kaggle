{"cell_type":{"53d72e57":"code","824bfc49":"code","acaa71cb":"code","ea0be53b":"code","6d866288":"code","32463e64":"code","a83dd1bb":"code","783bb339":"code","4d5cc3fa":"code","e391b7c4":"code","7b629006":"code","d75da4b3":"code","31dc5bf6":"code","a3efb17a":"code","5006eff1":"code","7edb1544":"code","064d8372":"code","eb068f43":"code","6fd701ed":"code","307a68c0":"code","c035e119":"code","600449cd":"code","21b06d1f":"code","9d8787da":"code","1b6c0ee4":"code","b2fea3fc":"code","26c3b4ba":"code","10d15006":"code","a0f5210f":"code","3628e717":"code","066109a8":"code","2f0402be":"code","3cfe501b":"code","2d25e66d":"code","1e9e171d":"code","07b80057":"code","d4576ebe":"markdown","383e9dda":"markdown","5273201b":"markdown","cbd1ec12":"markdown","2f8765fc":"markdown","a8027e02":"markdown","55417692":"markdown","e2de4ec1":"markdown","6211c79a":"markdown","8111ffda":"markdown","44d0bfe1":"markdown","f9528b89":"markdown"},"source":{"53d72e57":"import numpy as np\nimport pandas as pd\nimport datetime","824bfc49":"gamestats = pd.read_csv('..\/input\/17k-apple-app-store-strategy-games\/appstore_games.csv')\n\ngamestats.columns = ['URL', 'ID', 'Name', 'Subtitle', 'Icon_URL', \\\n                     'Average_User_Rating', 'User_Rating_Count', 'Price', \\\n                     'In_App_Purchases', 'Description', 'Developer', \\\n                     'Age_Rating', 'Languages', 'Size', 'Primary_Genre', \\\n                     'Genres', 'Original_Release_Date', 'Current_Version_Release_Date']","acaa71cb":"gamestats.dropna(subset=['Average_User_Rating'], how='any', inplace = True)\ngamestats","ea0be53b":"low_user_count = gamestats[gamestats['User_Rating_Count'] < 200].index\n\ngamestats.loc[:, 'Current_Version_Release_Date'] = pd.to_datetime(gamestats['Current_Version_Release_Date'])\ngamestats.loc[:, 'Original_Release_Date'] = pd.to_datetime(gamestats['Original_Release_Date'])\ngamestats.loc[:, 'Last_Updated'] = gamestats['Current_Version_Release_Date'] - gamestats['Original_Release_Date']\n\ngamestats.drop((low_user_count & gamestats[gamestats.Last_Updated < datetime.timedelta(days=175)].index), inplace = True)\ngamestats","6d866288":"gamestats['Genres'] = gamestats.Genres.str.replace('Games', '')\\\n.str.replace('Entertainment', '')\\\n.str.replace('Strategy', '')\\\n.str.replace(',', '')\n\ngamestats.loc[gamestats['Genres'].str.contains('Puzzle'),'Genres'] = 'Puzzle'\ngamestats.loc[gamestats['Genres'].str.contains('Board'),'Genres'] = 'Puzzle'\ngamestats.loc[gamestats['Genres'].str.contains('Adventure'),'Genres'] = 'Adventure'\ngamestats.loc[gamestats['Genres'].str.contains('Role'),'Genres'] = 'Adventure'\ngamestats.loc[gamestats['Genres'].str.contains('Action'),'Genres'] = 'Action'\ngamestats.loc[gamestats['Genres'].str.contains('Family'),'Genres'] = 'Family'\ngamestats.loc[gamestats['Genres'].str.contains('Education'),'Genres'] = 'Family'\n\ngamestats.drop(gamestats[~gamestats.Genres.str.contains('Puzzle')\\\n                        & ~gamestats.Genres.str.contains('Adventure')\\\n                        & ~gamestats.Genres.str.contains('Action')\\\n                        & ~gamestats.Genres.str.contains('Family')].index, inplace = True)","32463e64":"gamestats.drop(['URL', 'ID', 'Subtitle', 'Icon_URL', 'Description', 'Developer', 'Primary_Genre'], axis=1, inplace = True)\ngamestats","a83dd1bb":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nx = ['Puzzle', 'Adventure', 'Action', 'Family']\ny = [gamestats.Average_User_Rating[(gamestats['Genres']=='Puzzle')].mean(),\\\n     gamestats.Average_User_Rating[(gamestats['Genres']=='Adventure')].mean(),\\\n     gamestats.Average_User_Rating[(gamestats['Genres']=='Action')].mean(),\\\n     gamestats.Average_User_Rating[(gamestats['Genres']=='Family')].mean()]\n\nplot1 = sns.barplot(x, y)\nplot1.set(xlabel = 'Genres', ylabel = 'Average User Rating', ylim = (3.5, 5), title = 'Average User Ratings for a Genre')\nfor p in plot1.patches:\n    plot1.annotate(\"%.2f\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center', fontsize=11, color='black', xytext=(0, 20),textcoords='offset points')","783bb339":"gamestats.Genres.value_counts()","4d5cc3fa":"x = ['Puzzle', 'Adventure', 'Action', 'Family']\ny = [gamestats.Genres[gamestats['Genres']=='Puzzle'].count(),\\\n     gamestats.Genres[gamestats['Genres']=='Adventure'].count(),\\\n     gamestats.Genres[gamestats['Genres']=='Action'].count(),\\\n     gamestats.Genres[gamestats['Genres']=='Family'].count()]\n\nplot2 = sns.barplot(x, y)\nplot2.set(xlabel = 'Genres', ylabel = 'Number of Games', title = 'Genre Grouping')\nfor p in plot2.patches:\n    plot2.annotate(\"%.f\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center', fontsize=11, color='black', xytext=(0, 20),textcoords='offset points')","e391b7c4":"gamestats['Size_in_MB'] = round(gamestats['Size']\/1000000,1)\nno_of_games_below_250MB = gamestats.Size[gamestats['Size_in_MB'] < 250]\nno_of_games_between_250MB_and_1GB = gamestats.Size[(gamestats['Size_in_MB'] >= 250) & gamestats['Size_in_MB'] < 1000]\nno_of_games_above_1GB = gamestats.Size[gamestats['Size_in_MB'] >= 1000]\n\nprint('Number of Games below 250 MB:', no_of_games_below_250MB.count())\nprint('Number of Games between 250 MB and 1 GB:', no_of_games_between_250MB_and_1GB.count())\nprint('Number of Games above 1 GB:', no_of_games_above_1GB.count())","7b629006":"x = ['Size < 250MB', '250MB <= Size < 1GB', 'Size >= 1GB']\ny = [no_of_games_below_250MB.count(), no_of_games_between_250MB_and_1GB.count(), no_of_games_above_1GB.count()]\nplot3 = sns.barplot(x, y)\nplot3.set(ylabel = 'Number of Games')\nfor p in plot3.patches:\n    plot3.annotate(\"%.f\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center', fontsize=11, color='black', xytext=(0, 20),textcoords='offset points')","d75da4b3":"f, axes = plt.subplots (2, 3, figsize=(18,12))\n\nbelow_250MB = gamestats[gamestats['Size_in_MB'] < 250]\nbetween_250MB_and_1GB = gamestats[(gamestats['Size_in_MB'] >= 250) & (gamestats['Size_in_MB'] < 1000)]\nabove_1GB = gamestats[gamestats['Size_in_MB'] >= 1000]\n\nplot4 = sns.boxplot(data = below_250MB, x = 'Average_User_Rating', y = 'Size_in_MB',  ax=axes[1,0])\nplot5 = sns.boxplot(data = between_250MB_and_1GB, x = 'Average_User_Rating', y = 'Size_in_MB', ax=axes[1,1])\nplot6 = sns.boxplot(data = above_1GB, x = 'Average_User_Rating', y = 'Size_in_MB', ax=axes[1,2],)\n\nplot4.set(xlabel='User Rating',ylabel='Game Size in MB')\nplot5.set(xlabel='User Rating',ylabel='Game Size in MB')\nplot6.set(xlabel='User Rating',ylabel='Game Size in MB')\n\nplot7 = sns.distplot(below_250MB.Size_in_MB, bins= 10, kde=False, ax=axes[0,0])\nplot8 = sns.distplot(between_250MB_and_1GB.Size_in_MB, bins= 10, kde=False, ax=axes[0,1])\nplot9 = sns.distplot(above_1GB.Size_in_MB, bins= 10, kde=False, ax=axes[0,2])\n\nplot7.set(xlabel='Game Size in MB',ylabel='Number of Games')\nplot8.set(xlabel='Game Size in MB',ylabel='Number of Games')\nplot9.set(xlabel='Game Size in MB',ylabel='Number of Games')\n\naxes[0, 0].set_title('No. of Games Below 250MB')\naxes[0, 1].set_title('No. of Games Between 250MB and 1GB')\naxes[0, 2].set_title('No. of Games Above 1GB')\naxes[1, 0].set_title('Games Below 250MB vs User Rating')\naxes[1, 1].set_title('Games Between 250MB and 1GB vs User Rating')\naxes[1, 2].set_title('Games Above 1GB vs User Rating')\n\nplot7.set(ylim=(0, 800))\nplot8.set(ylim=(0, 800))\nplot9.set(ylim=(0, 800))","31dc5bf6":"plot10 = sns.stripplot(y='Size_in_MB' , x='Genres', data=gamestats,\\\n                hue='Average_User_Rating',dodge=True, size=4)\n\nplt.legend(title='User Rating', bbox_to_anchor=(1.29, 1))\n\nplot10.set(ylim=(0, 1000))\nplot10.set(xlabel='User Rating', ylabel='Game Size in MB')","a3efb17a":"gamestats.loc[:, 'Year'] = gamestats['Original_Release_Date'].astype(str)","5006eff1":"for i in (list(gamestats.index.values)):\n    gamestats.loc[i, 'Year']=gamestats.loc[i, 'Year'][:4]\n    \nf, axes = plt.subplots (3, 2, figsize=(18,20))\n\nplot11 = sns.lineplot(x=gamestats.Year, y=gamestats.Size_in_MB, data=gamestats, ax=axes[0][0])\nplot11.set(ylim=(0, 600))\nplot12 = sns.lineplot(x=gamestats.Year, y=gamestats.Size_in_MB, hue=gamestats.Genres, err_style=None, marker='o', ax=axes[0][1])\nplot12.set(ylim=(0, 600))\n\naxes[0][0].set_title('Size of Games in each Year')\naxes[0][1].set_title('Size of Games in each Year by Genre')\n\nplot11.set(xlabel='Year', ylabel='Game Size in MB')\nplot12.set(xlabel='Year', ylabel='Game Size in MB')\n\nplot13 = sns.lineplot(x=gamestats.Year, y=gamestats.User_Rating_Count, data=gamestats, ax=axes[1][0])\n\nplot14 = sns.lineplot(x=gamestats.Year, y=gamestats.User_Rating_Count, hue=gamestats.Genres, err_style=None, marker='o', ax=axes[1][1])\n\naxes[1][0].set_title('User Rating Count in each Year')\naxes[1][1].set_title('User Rating Count in each Year by Genre')\n\nplot13.set(xlabel='Year', ylabel='User Rating Count')\nplot14.set(xlabel='Year', ylabel='User Rating Count')\n\nplot15 = sns.lineplot(x=gamestats.Year, y=gamestats.Average_User_Rating, data=gamestats, ax=axes[2][0])\n\nplot16 = sns.lineplot(x=gamestats.Year, y=gamestats.Average_User_Rating, hue=gamestats.Genres, err_style=None, marker='o', ax=axes[2][1])\n\naxes[2][0].set_title('Average User Rating in each Year')\naxes[2][1].set_title('Average User Rating in each Year by Genre')\n\nplot15.set(xlabel='Year', ylabel='Average User Rating')\nplot16.set(xlabel='Year', ylabel='Average User Rating')","7edb1544":"for i in (list(gamestats.index.values)):\n    gamestats.loc[i, 'Last_Updated'] = gamestats.loc[i, 'Last_Updated'].days","064d8372":"x=['Puzzle','Adventure','Action','Family']\ny = [gamestats.Last_Updated[(gamestats['Genres']=='Puzzle')].mean(),\\\n     gamestats.Last_Updated[(gamestats['Genres']=='Adventure')].mean(),\\\n     gamestats.Last_Updated[(gamestats['Genres']=='Action')].mean(),\\\n     gamestats.Last_Updated[(gamestats['Genres']=='Family')].mean()]\n\nplot17 = sns.barplot(x,y)\nplot17.set(xlabel = 'Genre', ylabel = 'Mean of Last Updated (In Days)', title = 'Last Updated factor on User Ratings')\n\nfor p in plot17.patches:\n             plot17.annotate(\"%.2f\" % p.get_height(), (p.get_x() + p.get_width() \/ 2, p.get_height() - p.get_height()),\n                 ha='center', va='center', fontsize=11, color='white', xytext=(0, 20),\n                 textcoords='offset points')","eb068f43":"gamestats.Price.value_counts()","6fd701ed":"plot18 = gamestats.Price.value_counts().plot(kind='bar')","307a68c0":"plot19 = sns.lineplot(x = gamestats.Price, y = gamestats.Average_User_Rating, data = gamestats)\nplot19.set(title = 'User Rating Count VS Price', xlabel = 'Price (In $)', ylabel = 'User Rating Count')","c035e119":"x=['Puzzle','Adventure','Action','Family']\ny = [gamestats.Price[(gamestats['Genres']=='Puzzle')].mean(),\\\n     gamestats.Price[(gamestats['Genres']=='Adventure')].mean(),\\\n     gamestats.Price[(gamestats['Genres']=='Action')].mean(),\\\n     gamestats.Price[(gamestats['Genres']=='Family')].mean()]\n\nplot20 = sns.barplot(x,y)\nplot20.set(xlabel = 'Genre', ylabel = 'Average Price', title = 'Average Price of Games in Each Genre')\n\nfor p in plot20.patches:\n             plot20.annotate(\"%.2f\" % p.get_height(), (p.get_x() + p.get_width() \/ 2, p.get_height() - p.get_height()),\n                 ha='center', va='center', fontsize=11, color='white', xytext=(0, 20),\n                 textcoords='offset points')","600449cd":"plot21 = sns.lineplot(x = gamestats.Price, y = gamestats.User_Rating_Count, data = gamestats)\nplot21.set(title = 'User Rating Count VS Price', xlabel = 'Price (In $)', ylabel = 'User Rating Count')","21b06d1f":"plot22 = sns.jointplot(x = 'Price', y = 'Average_User_Rating', data = gamestats)","9d8787da":"plot23 = sns.lineplot(x=gamestats.Price, y=gamestats.Average_User_Rating, hue=gamestats.Genres, err_style=None, marker='o')\nplot23.set(title = 'User Rating VS Price (For Each Genre)', xlabel = 'Price (In $)', ylabel = 'User Rating', ylim = (3,5))","1b6c0ee4":"gamestats['In_App_Purchases'] = gamestats['In_App_Purchases'].str.replace(',', '') \ngamestats.In_App_Purchases = gamestats.In_App_Purchases.fillna(0)\n\nimport statistics\n\nfor i in (list(gamestats.index.values)):\n    if gamestats.In_App_Purchases[i] == 0:\n        gamestats.loc[i, 'In_App_Purchases'] = 0.01\n    elif gamestats.In_App_Purchases[i] != 0:\n        A = str.split(gamestats.In_App_Purchases[i])\n        A = [float(i) for i in A]\n        gamestats.loc[i, 'In_App_Purchases']=statistics.mean(A)\nplot24 = sns.stripplot(y=gamestats.In_App_Purchases , x=gamestats.Price, data=gamestats, hue=gamestats.Genres, dodge = True, size = 5)\nplot24.set(xlim=(-1, 12))\nplot24.set(xlabel = 'Price (In $)', ylabel = 'Average In App Purchases (In $)')","b2fea3fc":"gamestats.Age_Rating.value_counts()","26c3b4ba":"plot25 = gamestats.Age_Rating.value_counts().plot(kind='bar')","10d15006":"gamestats.Age_Rating[gamestats.Genres=='Puzzle'].value_counts()","a0f5210f":"gamestats.Age_Rating[gamestats.Genres=='Adventure'].value_counts()","3628e717":"gamestats.Age_Rating[gamestats.Genres=='Action'].value_counts()","066109a8":"gamestats.Age_Rating[gamestats.Genres=='Family'].value_counts()","2f0402be":"f, axes = plt.subplots (2, 2, figsize=(15,15))\n\nplot26 = gamestats.Age_Rating[gamestats.Genres=='Puzzle'].value_counts().plot(kind='bar', ax = axes[0][0], color = '#E41A7F')\nplot26.set(title = 'Puzzle', xlabel = 'Age Rating', ylabel = 'Count')\nplot27 = gamestats.Age_Rating[gamestats.Genres=='Adventure'].value_counts().plot(kind='bar', ax = axes[0][1], color = '#123456')\nplot27.set(title = 'Adventure', xlabel = 'Age Rating', ylabel = 'Count')\nplot28 = gamestats.Age_Rating[gamestats.Genres=='Action'].value_counts().plot(kind='bar', ax = axes[1][0], color = '#095730')\nplot28.set(title = 'Action', xlabel = 'Age Rating', ylabel = 'Count')\nplot29 = gamestats.Age_Rating[gamestats.Genres=='Family'].value_counts().plot(kind='bar', ax = axes[1][1], color = 'orange')\nplot29.set(title = 'Family', xlabel = 'Age Rating', ylabel = 'Count')","3cfe501b":"plot30 = gamestats.Age_Rating[gamestats.Genres=='Puzzle'].value_counts().plot(kind='line', marker = 'o', label = 'Puzzle')\nplot31 = gamestats.Age_Rating[gamestats.Genres=='Adventure'].value_counts().plot(kind='line', marker = 'o', label = 'Adventure')\nplot32 = gamestats.Age_Rating[gamestats.Genres=='Action'].value_counts().plot(kind='line', marker = 'o', label = 'Action')\nplot33 = gamestats.Age_Rating[gamestats.Genres=='Family'].value_counts().plot(kind='line', marker = 'o', label = 'Family')\nplt.legend(title = 'Genres')\nplot33.set(title = 'Age Rating Factor on No_of_games', xlabel = 'Age Rating', ylabel = 'Number of Games')","2d25e66d":"plot34 = sns.boxplot(x = gamestats.Age_Rating, y = gamestats.Average_User_Rating, data = gamestats, hue = gamestats.Genres, dodge = True)\nplot34.set(xlabel = 'Age Rating', ylabel = 'User Rating', title = 'Age Rating Factor on User Ratings')\nplt.legend(title = 'Genre', bbox_to_anchor = (1.3, 1))","1e9e171d":"gamestats.dtypes","07b80057":"gamestats","d4576ebe":"The Average no. of days last updated is more in Puzzle than other Genres.","383e9dda":"There are many Free Games.","5273201b":"There are many games with less than 1 dollar.","cbd1ec12":"My Inferences:\n\n    1. Family Games have high Average User Ratings.\n    2. It is better to develop games with size between 250MB and 1GB.\n    3. Puzzle Games should be less than 500MB.\n    4. Puzzle and Action Games are good for competition.\n    5. There are many Puzzle Games in the industry.\n    6. Puzzle Games can have less game updates.\n    7. As the year increases, the size of games are increases and also the Average User Rating.\n    8. Paid Games have better Ratings when they are priced below 12.5 dollars.\n    9. In-App Purchases should be less than 2 dollars for better User Rating.\n    10. Games with Age Rating 17+ have good User Rating.\n    11. The following order of Genres have high Average User Ratings from top to bottom:\n        a. Family - 4.24\n        b. Action - 4.22\n        c. Adventure - 4.15\n        d. Puzzle - 4.04","2f8765fc":"From the above graph, the following is the order of **Genres** having higher Average User Ratings from top to bottom:\n1. Family - 4.24\n2. Action - 4.22\n3. Adventure - 4.15\n4. Puzzle - 4.04","a8027e02":"There are many games above 250MB with better User Rating","55417692":"There are high User Ratings when Age Rating is 17+.","e2de4ec1":"There are more number of Games with Genre **Puzzle**","6211c79a":"There are more number of Games which have size between 250MB and 1GB","8111ffda":"The Average Price of Games is more in Puzzle.","44d0bfe1":"The User Ratings are better for paid games than free games.\nThe User Ratings are less on Games when the Price of Games is more than 12.5 dollars.","f9528b89":" **Caption:**<br>\n&emsp; Here is the code that I worked on the dataset 'appstore_games.csv' for providing insights in April 2020. @Tristan #Kaggle\n    <br>\n **Description:**<br>\n&emsp; This code is effective and helps to strategize by giving insights on different types of apps. I am excited to share my work on the dataset provided by @Tristan #Kaggle."}}