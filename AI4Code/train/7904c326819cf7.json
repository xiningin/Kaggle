{"cell_type":{"43c5d075":"code","a2e1b38e":"code","c9e6d69c":"code","fe55ec05":"code","2400a26f":"code","40e1689a":"code","d89cdd25":"code","0799c94e":"code","74ede671":"code","5fd9644a":"code","5da2c189":"code","3f5092ab":"code","635ca932":"code","dec0e5d6":"code","2dfbbb7f":"code","6c361bb9":"code","f95ae6a3":"code","10d80506":"code","b42600d9":"code","8223c039":"code","6e3d187d":"code","7300662d":"code","4d3cc29c":"code","1a099dc6":"code","611b2ef3":"code","67a71d6b":"code","175324c0":"code","97d72aa9":"code","48b04977":"code","6f032d80":"code","319f3bbb":"code","6d528cc2":"code","bf121584":"code","50529157":"code","72f895a4":"code","b8ccbc1a":"code","b8ab7fa0":"code","bb767202":"code","b69e3503":"code","6a389805":"code","593699ea":"code","4064c12f":"code","ba31a949":"code","c8ce6e46":"code","2ee9c462":"code","c93ea629":"code","ebc72203":"code","010c1448":"code","99487847":"code","1918cfb3":"code","40bca292":"code","f133c452":"code","171ff44f":"code","7e134df4":"code","f48018bd":"code","9cf54e5b":"code","a4765505":"code","1ee3aa01":"code","a8c4d296":"code","fdd9f506":"code","c300bc81":"code","6075bae4":"code","469cac8e":"code","4986d702":"code","ea8b55cb":"code","5038ab55":"code","c25f12e6":"code","0d386ac5":"code","4cfe394d":"code","673b96bc":"code","1ad3a904":"code","f5e2a854":"code","56b4af29":"code","952704a0":"code","49400b2e":"code","2c2703bb":"code","adb305ae":"code","d94b5477":"code","6e8659eb":"code","550c59d0":"code","5cde6506":"code","d493eafd":"code","46fe6816":"code","0f1df30b":"code","504744bc":"code","668c2e50":"code","e135bfed":"code","e701624c":"code","9a09d14d":"code","6894a6cb":"markdown","ce1993b4":"markdown","e53ce01c":"markdown","c6f8f0d8":"markdown","8845b0f6":"markdown","224b91c5":"markdown","363ac681":"markdown","8644857d":"markdown","25aa3367":"markdown","259ea78c":"markdown","970e52c7":"markdown","86f39cc4":"markdown","8001a2c9":"markdown","7208532d":"markdown","9a40eef3":"markdown","01f4f92e":"markdown","6ed08008":"markdown","68811ccb":"markdown","32677382":"markdown","752759f7":"markdown","ee46977c":"markdown","38a7cb34":"markdown","b19a4829":"markdown","253a7854":"markdown","3a27a9f4":"markdown","d2e744c1":"markdown"},"source":{"43c5d075":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a2e1b38e":"''' loading the csv files of train set , test set '''","c9e6d69c":"import pandas as pd\ngender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")","fe55ec05":"'''Ignore deprecation and future, and user warnings.'''\nimport warnings as wrn\nwrn.filterwarnings('ignore', category = DeprecationWarning) \nwrn.filterwarnings('ignore', category = FutureWarning) \nwrn.filterwarnings('ignore', category = UserWarning) ","2400a26f":"'''Importing Data Manipulattion Moduls'''\nimport numpy as np\nimport pandas as pd\n# pandaprofile is used to generate the profile report\nimport pandas_profiling\nimport scipy.stats as stats # for stats function like skew and kurtosis\n\nimport pylab as pl\nimport scipy.optimize as opt","40e1689a":"# to display the output below cell code within frontend(jupyter notebook)\n%matplotlib inline\n# you could also use %matplotlib notebook for more interactive plots","d89cdd25":"'''Seaborn and Matplotlib Visualization'''\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('bmh')                    \nsns.set_style({'axes.grid':False}) \n","0799c94e":"'''plotly Visualization'''\nimport plotly.offline as py\nimport plotly.express as px\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objs as go\ninit_notebook_mode(connected = True)","74ede671":"# importing one hot encoder from sklearn \nfrom sklearn.preprocessing import OneHotEncoder\n# Algorithms\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB","5fd9644a":"pd.set_option('display.max_columns', None) # to display all columns","5da2c189":"pkmn_type_colors = ['#78C850',  # Grass\n                    '#F08030',  # Fire\n                    '#6890F0',  # Water\n                    '#A8B820',  # Bug\n                    '#A8A878',  # Normal\n                    '#A040A0',  # Poison\n                    '#F8D030',  # Electric\n                    '#E0C068',  # Ground\n                    '#EE99AC',  # Fairy\n                    '#C03028',  # Fighting\n                    '#F85888',  # Psychic\n                    '#B8A038',  # Rock\n                    '#705898',  # Ghost\n                    '#98D8D8',  # Ice\n                    '#7038F8',  # Dragon\n                   ]","3f5092ab":"train.head()","635ca932":"test.head()","dec0e5d6":"print(\"train shape: \",train.shape)\nprint(\"test shape: \",test.shape)","2dfbbb7f":"print(\"gender_submission : \",gender_submission.shape)\ngender_submission.head()","6c361bb9":"train.describe(include='all')","f95ae6a3":"test.describe()","10d80506":"''' merge the train set and test set for data cleaning ie. imputation missing values and correcting \noutliers, feature engineering etc'''","b42600d9":"merged= pd.concat([train,test],axis=0,sort=False)\nprint('merged shape : ',merged.shape)\nmerged.sample(5)","8223c039":"merged.describe(include='all')","6e3d187d":"#lets focus on name varible first and clean it and create new variable 'Title'\nmerged['Title']=merged.Name.str.split(',').str[1].str.split('.').str[0].str.strip()\nmerged.head()","7300662d":"merged['Title'].value_counts()","4d3cc29c":"merged['Title'].unique()","1a099dc6":"merged[merged['Title'].isin(\n    ['Dona','Don','Sir','Dr','Rev','Col','Ms','Mlle','Major','Lady','Jonkheer','Mme','the Countess','Capt'])]","611b2ef3":"# changing title of Dr based on sex and Age\nmerged['Title']=np.where((merged.Title=='Dr') & (merged.Sex=='female'),'Mrs',merged.Title)\nmerged['Title']=np.where((merged.Title=='Dr') & (merged.Sex=='male'),'Mr',merged.Title)\n#for Rev\nmerged.loc[merged.Title=='Rev','Title']='Mr'\n# based on sex and age and title\nmerged.loc[(merged.Title=='Lady')|(merged.Title== 'the Countess')|(merged.Title=='Dona'),'Title']='Mrs'\nmerged.loc[(merged.Title=='Mme')|(merged.Title== 'Ms'),'Title']='Miss'\n\nmerged.loc[(merged.Title=='Col')|(merged.Title== 'Sir')|(merged.Title=='Major')|(merged.Title=='Jonkheer')|(merged.Title=='Capt')|(merged.Title=='Don'),'Title']='Mr'\n# based on age and if husband name is mention in the (brackets) with passenger name\nmerged.loc[merged.PassengerId==642,'Title']='Miss'\nmerged.loc[merged.PassengerId==711,'Title']='Mrs' #husband name is there although spouse=0, he is not on ship with her","67a71d6b":"merged['Title'].value_counts()\n# we successfully cleaned the title column although we added some bias","175324c0":"fig, ax=plt.subplots(figsize=(10,6))\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.swarmplot(x=\"Age\", y=\"Title\", hue=\"Survived\",\n              palette=[\"r\", \"c\", \"y\"], data=merged)\nplt.show()","97d72aa9":"sns.catplot(x=\"Title\", y=\"Survived\", hue=\"Pclass\", kind=\"bar\", data=merged)\nplt.show()","48b04977":"sns.catplot(y=\"Title\", hue=\"Survived\", kind=\"count\",\n            palette=\"pastel\", edgecolor=\".6\",\n            data=merged)\nplt.show()","6f032d80":"g = sns.catplot(x=\"Title\", y=\"Survived\", col=\"Pclass\",data=merged, saturation=.5,kind=\"bar\", ci=None, aspect=.6)\n(g.set_axis_labels(\"\", \"Survival Rate\")\n.set_titles(\"{col_name} {col_var}\")\n.set(ylim=(0, 1))\n.despine(left=True))  \nplt.show()","319f3bbb":"sns.catplot(y=\"Title\", hue=\"Survived\", kind=\"count\",\n            palette=\"pastel\", edgecolor=\".6\",\n            data=merged)\nplt.show()","6d528cc2":"merged['Cabin'].describe()","bf121584":"df_cabin=merged.loc[pd.notnull(merged.Cabin)]\ndf_cabin.head()","50529157":"df_cabinstrip=df_cabin.Cabin.str.split(expand=True,)\ndf_cabin","72f895a4":"df_cabinstrip.rename(columns={0:'one',1:'two',2:'three',3:'four'},inplace=True)","b8ccbc1a":"df_cabinstrip['one']=df_cabinstrip['one'].str[0]\ndf_cabinstrip['two']=df_cabinstrip['two'].str[0]\ndf_cabinstrip['three']=df_cabinstrip['three'].str[0]\ndf_cabinstrip['four']=df_cabinstrip['four'].str[0]","b8ab7fa0":"df_cabinstrip.head()","bb767202":"# pandas_profiling.ProfileReport(df_cabinstrip) . i am not executing this statement now ","b69e3503":"df_cabinstrip.describe()","6a389805":"pd.notnull(df_cabinstrip).sum().sum() #total number of cabins alloted","593699ea":"df1=pd.concat([df_cabin,df_cabinstrip],axis=1)","4064c12f":"df1","ba31a949":"df1['one']=df1.one.str[0].str.strip() # we are keeping only cabin category ie A, B, C etc \ndf1","c8ce6e46":"print(pd.crosstab(df1['Survived'],df1['one']),\"\\n\")\nprint(pd.crosstab(df1['Survived'],df1['two']),\"\\n\")\nprint(pd.crosstab(df1['Survived'],df1['three']),\"\\n\")\nprint(pd.crosstab(df1['Survived'],df1['four']),\"\\n\")","2ee9c462":"merged['Cabin']=merged.Cabin.str[0].str.strip()\nmerged.head()","c93ea629":"merged['Cabin'].value_counts()","ebc72203":"pd.crosstab(merged['Survived'],[merged['Pclass'],merged['Cabin']])","010c1448":"g = sns.catplot(x=\"Cabin\", y=\"Survived\", col=\"Pclass\",data=merged, saturation=.5,kind=\"bar\", ci=None, aspect=.6)\n(g.set_axis_labels(\"\", \"Survival Rate\")\n.set_titles(\"{col_name} {col_var}\")\n.set(ylim=(0, 1))\n.despine(left=True))  \nplt.show()","99487847":"merged.loc[(merged.Cabin=='G')|(merged.Cabin=='A')|(merged.Cabin=='F')|(merged.Cabin=='T'),'Cabin']= 'other'\n#we keep T cabin out as its very less in number\nmerged.loc[pd.isnull(merged['Cabin']),'Cabin']='none'\nmerged.loc[(merged['Cabin']=='none')&(merged['Pclass']==1),'Cabin']='other'","1918cfb3":"sns.countplot(x='Cabin', data=merged, hue='Survived')\n# Rotate x-labels\nplt.xticks(rotation=-45)\nplt.show()","40bca292":"# Swarm plot with Pokemon color palette\nsns.swarmplot(x='Pclass', y='Fare', data=merged,hue='Cabin',palette=pkmn_type_colors)\nplt.show()","f133c452":"# Swarm plot with Pokemon color palette\nsns.swarmplot(x='Cabin', y='Fare', data=merged,hue='Survived',palette=pkmn_type_colors)\nplt.show()","171ff44f":"print('mean age for title-master : ',merged.loc[(pd.notnull(merged['Age']))&(merged.Title== 'Master')]['Age'].mean())\nprint('mean age for title-mr : ',merged.loc[(pd.notnull(merged['Age']))&(merged.Title== 'Mr')]['Age'].mean())\nprint('mean age for title-miss : ',merged.loc[(pd.notnull(merged['Age']))&(merged.Title== 'Miss')]['Age'].mean())\nprint('mean age for title-mrs : ',merged.loc[(pd.notnull(merged['Age']))&(merged.Title== 'Mrs')]['Age'].mean())","7e134df4":"''' okay now lets impute age based on title'''\nmerged.loc[(pd.isnull(merged['Age']))&(merged.Title== 'Master'),'Age']=5\nmerged.loc[(pd.isnull(merged['Age']))&(merged.Title== 'Mr'),'Age']=32\nmerged.loc[(pd.isnull(merged['Age']))&(merged.Title== 'Miss'),'Age']=22\nmerged.loc[(pd.isnull(merged['Age']))&(merged.Title== 'Mrs'),'Age']=36\n","f48018bd":"# since max age is 80 so we took age limit on bins as 80 with 6 steps for binning\nbins=np.arange(0,85,6).tolist()\nprint('bins : ',bins)\nlabels=np.arange(3,85,6).tolist()\nprint('labels : ',labels)\nmerged['Agegroup']=pd.cut(merged['Age'],bins,labels=labels)\nmerged.head(5)","9cf54e5b":"# Swarm plot with Pokemon color palette\nsns.swarmplot(x='Agegroup', y='Pclass', data=merged,hue='Survived',palette=pkmn_type_colors)\nplt.show()","a4765505":"#since fare should not be zero so lets impute it based on class but lets dive into outliers","1ee3aa01":"plt.figure(figsize = (12, 8))\nsns.boxplot(x = 'Pclass', y = 'Fare', data=merged)\nsns.swarmplot(x = 'Pclass', y = 'Fare',hue='Survived', data = merged)\nplt.title(\"Box plots of pclass vs fare\")\nplt.xlabel(\"pclass\")\nplt.ylabel(\"fare\")\nplt.show()\n#lets set fare>100 as fare = 100 since there are outliers in fare category ","a8c4d296":"merged.loc[merged.Fare>100,'Fare']=100\nmerged.loc[(merged.Fare<25)& (merged.Pclass==1),'Fare']=25","fdd9f506":"plt.figure(figsize = (12, 8))\nsns.boxplot(x = 'Pclass', y = 'Fare', data=merged)\nsns.swarmplot(x = 'Pclass', y = 'Fare',hue='Survived', data = merged)\nplt.title(\"Box plots of pclass vs fare\")\nplt.xlabel(\"pclass\")\nplt.ylabel(\"fare\")\nplt.show()\n#lets set fare>100 as fare = 100 since there are outliers in fare category ","c300bc81":"print('mean fare for class 1 is : ',merged.loc[(merged.Pclass==1)]['Fare'].mean())\nprint('mean fare for class 2 is : ',merged.loc[(merged.Pclass==2)]['Fare'].mean())\nprint('mean fare for class 3 is : ',merged.loc[(merged.Pclass==3)]['Fare'].mean())","6075bae4":"merged.loc[merged.Fare==0]","469cac8e":"merged.loc[pd.isnull(merged.Fare)]","4986d702":"merged.loc[pd.isnull(merged.Fare),'Fare']=13 # as it is in class 3","ea8b55cb":"# imputing fare==0 to fare.mean of that class\nmerged.loc[(merged.Fare==0)& (merged.Pclass==3),'Fare']=12 # fare mean for Pclass=3 \nmerged.loc[(merged.Fare==0)& (merged.Pclass==2),'Fare']=21 # fare mean for Pclass=2 \nmerged.loc[(merged.Fare==0)& (merged.Pclass==1),'Fare']=60 # fare mean for Pclass=1 ","5038ab55":"bins=np.arange(0,101,4).tolist()\nprint('bins : ',bins)\nlabels=np.arange(2,101,4).tolist()\nprint('labels : ',labels)\nmerged['faregp']=pd.cut(merged['Fare'],bins,labels=labels)\nmerged.sample(5)","c25f12e6":"fig, ax = plt.subplots(figsize=(16,8))\nsns.set(style=\"whitegrid\", palette=\"muted\")\nsns.swarmplot(x=\"Pclass\", y=\"faregp\", hue=\"Survived\",\n              palette=[\"r\", \"c\", \"y\"], data=merged)\nplt.show()","0d386ac5":"merged.loc[pd.isnull(merged['Embarked'])]","4cfe394d":"# since both missing values of embarked is in pclass 1\nmerged.loc[(merged.Pclass==1)&(merged.faregp==78)&(merged.Sex=='female')&(merged.Survived==1)]['Embarked'].value_counts()","673b96bc":"# lets impute it by 'S' , though we could have imputed it by 'C' also \nmerged.loc[(merged.PassengerId==62)|(merged.PassengerId==830),'Embarked']='S'","1ad3a904":"merged.isnull().sum()","f5e2a854":"# lets drop irrelevant columns now , although we didnt take certain things into consideration like in column 'name' , we didnt give importance to surname and in 'ticket' column we imputed values on certain assumption \n# so we have already added a certain degree of bias by ignoring them","56b4af29":"final=merged.drop(columns=['Name','Age','Fare','Ticket'])","952704a0":"print('final shape : ', final.shape, '\\n')\nfinal.head()","49400b2e":"fig=plt.figure(figsize=(10,6))\nplt.subplot2grid((2,3),(1,0),colspan=2)\nfor x in [1,2,3]:\n    merged.Age[merged.Pclass==x].plot(kind='kde')\n    \nplt.title('Class wrt Age')\nplt.legend(('1st','2nd','3rd'))\nplt.show()","2c2703bb":"fig=plt.figure(figsize=(10,6))\n#rich man\nplt.subplot2grid((4,4),(0,0))\nmerged.Survived[(merged.Sex=='male') & (merged.Pclass==1)].value_counts(normalize=True).plot(kind='bar',alpha=1,color='b')\nplt.title('Rich Man Survived')\n\n#poor man\nplt.subplot2grid((4,4),(0,1))\nmerged.Survived[(merged.Sex=='male') & (merged.Pclass==3)].value_counts(normalize=True).plot(kind='bar',alpha=1,color='r')\nplt.title('Poor Man Survived')\n\n#rich women\nplt.subplot2grid((4,4),(0,2))\nmerged.Survived[(merged.Sex=='female') & (merged.Pclass==1)].value_counts(normalize=True).plot(kind='bar',alpha=1,color='b')\nplt.title('Rich Women Survived')\n\n#poor  woman\nplt.subplot2grid((4,4),(0,3))\nmerged.Survived[(merged.Sex=='female') & (merged.Pclass==3)].value_counts(normalize=True).plot(kind='bar',alpha=1,color='g')\nplt.title('Poor Women Survived')\nplt.show()","adb305ae":"f,ax=plt.subplots(figsize=(15,15))\nsns.heatmap(merged.corr(),annot=True,linewidths=.5,fmt='.0%',ax=ax)\nplt.show()","d94b5477":"merged.Survived.dropna(inplace = True)\nlabels = merged.Survived.value_counts().index\ncolors = [\"red\",\"lightblue\"]\nexplode = [0,0]\nsizes = merged.Survived.value_counts().values\n\n# visual cp\nplt.figure(0,figsize = (7,7))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('People According to Survived',color = 'blue',fontsize = 15)\nplt.show()","6e8659eb":"# grid = sns.FacetGrid(train_df, col='Pclass', hue='Gender')\ngrid = sns.FacetGrid(merged, row='Pclass', col='Sex', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend()","550c59d0":"# grid = sns.FacetGrid(train_df, col='Embarked')\nfig=plt.figure(figsize=(16,6))\ngrid = sns.FacetGrid(merged, row='Embarked', size=2.2, aspect=1.6)\ngrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')\ngrid.add_legend()","5cde6506":"sns.pairplot(train)","d493eafd":"cat_columns = ['Pclass','Sex','SibSp','Parch','Cabin','Embarked','Title','Agegroup','faregp']\nmerged_processed = pd.get_dummies(final, prefix_sep=\"_\",columns=cat_columns)\nmerged_processed","46fe6816":"df_train=merged_processed.loc[merged_processed['PassengerId']<892]\ndf_test=merged_processed.loc[merged_processed['PassengerId']>891]","0f1df30b":"x_train=df_train.drop(columns=['PassengerId','Survived'])\ny_train=df_train['Survived']","504744bc":"x=np.asarray(x_train)\nx","668c2e50":"y=np.asarray(y_train)\ny[0:5]","e135bfed":"# importing one hot encoder from sklearn \nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn import preprocessing","e701624c":"x = preprocessing.StandardScaler().fit(x).transform(x)\nx[0:1]","9a09d14d":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( x, y, test_size=0.2, random_state=4)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","6894a6cb":"# Data visulalization of \"Title\" varible ","ce1993b4":"  **pandas_profiling.ProfileReport(merged)**\n \n pandas_profiling is used to generate the profile report , i am skipping to execute this statement as of now but its quite useful and insightful","e53ce01c":"# Note: we will impute in 61 missing cabin in Pclass 1 to make it more generalised and avoid overfitting and label nan cabin as none","c6f8f0d8":"# lets do fare binning and labeling","8845b0f6":"# Train \/ test split  ","224b91c5":"# obseravation: in class 1,2,3 - 1st and 2nd class passengers are more likely to survive than 3rd class passengers, mr. title survival rate is around 38% in 1st class ,while in class 2nd and 3rd , mr title survival rate is less than 15%","363ac681":"# observation: \"Title\" Vs \"Survived\"\n#from swamplot we can see the Title: Mr is more likely not to survive \n#from catplot we can see that Title: Miss, Mrs, Master from Pclass: 1 & 2 are more likely to survive","8644857d":"# lets pick each varible one by one\n","25aa3367":"# Observation: titles - master, miss and mrs are more likely to survive then mr","259ea78c":"# Note: there is no any missing cell now except test set survival variable\nso lets drop the irrelvent columns now  ","970e52c7":"# observation: passengers with cabin are more likely to survive ","86f39cc4":"# Using pandas\u2019 get_dummies , robust one hot encoding","8001a2c9":"# so far we merged the train and test set for data wrangling and feature engineering purpose.","7208532d":"# lets focus on \"Cabin\" varibale now. ","9a40eef3":"# lets focus on 'Age' variable now ","01f4f92e":"# Now only thing to do is to fit the model in logistic regression, or random forest , or any other algo you like. you can also do the ensemble method , prefer soft voting.. ","6ed08008":"# lets focus of 'Fare' variable now ","68811ccb":"# first variable \"Name\" : \nobservation names has one thing in common which is title : Mr, Miss, Mrs, Master most frequent ","32677382":"# observation from Cabin variable .. \nfrom pandas profile report we can see, Missing (%)\t77.5% , Missing (n)\t1014\nbut some passenger are alloted more than one cabin which indicates that all missing values for cabin doesnt indicate null values. ","752759f7":"#  lets substitute the Title values other than Mr, Miss, Master, Mrs ","ee46977c":"\n# observation: some cabin like b,c,d,e,f are more likely to survive than g & t\nwe since cabin count was 356 as we saw so we will impute the based on Pclass","38a7cb34":"# lets focus on 'Embarkment' variable","b19a4829":"# finally we have 11 columns and no missing ","253a7854":"The Challenge\nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nIn this challenge, we ask you to build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).\n\n\nVariable Notes:\n\npclass: A proxy for socio-economic status (SES)\n1st = Upper\n2nd = Middle\n3rd = Lower\n\nage: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\nsex: male , female\nsibsp: The dataset defines family relations in this way...\nSibling = brother, sister, stepbrother, stepsister\nSpouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\nparch: The dataset defines family relations in this way...\nParent = mother, father\nChild = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.\n\nembarked :Port of Embarkation,\tC = Cherbourg, Q = Queenstown, S = Southampton\nSurvival : 0 = No, 1 = Yes","3a27a9f4":"# we normalize the dataset","d2e744c1":"# lets seperate the test set and train set "}}