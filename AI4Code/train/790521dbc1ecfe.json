{"cell_type":{"db7a9692":"code","05f02da8":"code","b940aee9":"code","5cc360fb":"code","c66b542e":"code","27053898":"code","38600dfb":"code","507de13a":"code","550ca78f":"code","5e54f239":"code","d1285a86":"code","13fd3274":"code","a18e6db1":"code","c56b823a":"code","cd98c8ba":"code","70daed6e":"code","17ce7cb5":"code","0207b9a7":"code","6853cdfd":"code","f19a8f9a":"code","1a8110da":"code","aa3ec814":"code","ad063926":"code","c8034947":"code","0af0697c":"code","b8f09c01":"code","f9f518a6":"markdown","d8c33ef3":"markdown","3cd27e37":"markdown","f8b6fbe6":"markdown","6b09389c":"markdown","97363970":"markdown","05f0a1c0":"markdown","5e046235":"markdown","06e73bae":"markdown","3fb1fafb":"markdown","8ccba340":"markdown","beba502e":"markdown","d8b197e2":"markdown","c0d41b0d":"markdown"},"source":{"db7a9692":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","05f02da8":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LinearRegression\n\npd.set_option('display.max_rows', 1000)","b940aee9":"data=pd.read_csv('..\/input\/student-alcohol-consumption\/student-mat.csv')\ndata.head()","5cc360fb":"data.info()","c66b542e":"data.isnull().sum().sum()","27053898":"\nplt.figure(figsize=(12,8))\nsns.heatmap(data.corr(), annot=True, cmap='viridis')","38600dfb":"categorical_cols=[x for x in data.columns if data[x].dtypes=='O']\ncategorical_cols","507de13a":"for cat in categorical_cols:\n    print(f'column: {cat}, values: {data[cat].unique()}')","550ca78f":"data['Mjob']=data['Mjob'].apply(lambda x: 'm'+x)\ndata['Fjob']=data['Fjob'].apply(lambda x: 'f'+x)\ndata['reason']=data['reason'].apply(lambda x: 'r'+x)\ndata['guardian']=data['guardian'].apply(lambda x: 'g'+x)","5e54f239":"from sklearn.feature_selection import VarianceThreshold","d1285a86":"# Convert the columns to numerical and then check\ndata_new=data.copy()\nle=LabelEncoder()\n\ndata_new=data_new.apply(lambda x : le.fit_transform(x))\n\ndata_new","13fd3274":"print(\"Total columns in the dataset are \", data_new.shape[1])","a18e6db1":"# check constant columns\nconstant_filter=VarianceThreshold(threshold=0)\n\nconstant_filter.fit(data_new)","c56b823a":"constant_filter.get_support().sum()","cd98c8ba":"quasi_constant=VarianceThreshold(threshold=0.01)\nquasi_constant.fit(data_new)\n\nquasi_constant.get_support().sum()","70daed6e":"data_new.T.duplicated().sum()","17ce7cb5":"# Dataset1\nX=data_new.drop('G3', axis=1)\ny=data_new['G3']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\nsc=StandardScaler()\nX_train_tx=sc.fit_transform(X_train)\nX_test_tx=sc.transform(X_test)\nn_features_1=X_train_tx.shape[1]\ndataset_1=(X_train_tx, X_test_tx, y_train, y_test, n_features_1,'dataset_1')","0207b9a7":"# Dataset2\ndata=pd.get_dummies(data, drop_first=True)\nX_1=data.drop('G3', axis=1)\ny_1=data['G3']\n\nX_train_1, X_test_1, y_train_1, y_test_1=train_test_split(X_1, y_1, test_size=0.2, random_state=1)\nsc_1=StandardScaler()\nX_train_1_tx=sc.fit_transform(X_train_1)\nX_test_1_tx=sc.transform(X_test_1)\nn_features_2=X_train_1_tx.shape[1]\ndataset_2=(X_train_1_tx, X_test_1_tx, y_train_1, y_test_1, n_features_2, 'dataset_2')\n","6853cdfd":"from sklearn.feature_selection import SelectKBest, f_regression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import Lasso","f19a8f9a":"model_n=[]\nn_features=[]\ntrain_score=[]","1a8110da":"def run_model(model, dataset, model_name):\n    for k in range(1, dataset[4]):\n        ls=SelectKBest(score_func=f_regression, k=k)\n        pipeline=Pipeline(steps=[('select_features', ls), \n                                ('regressor',model)])\n        \n        cv=cross_val_score(pipeline, dataset[0], dataset[2], scoring='neg_mean_squared_error', cv=5)\n        train_score_=np.sqrt(-np.mean(cv))\n        \n        \n        \n        train_score.append(train_score_)\n        \n        n_features.append(k)\n        model_n.append(model_name)\n  \n","aa3ec814":"# Let's run the model on each model now\n\nrun_model(LinearRegression(), dataset_1, \"Linear_Regression\")","ad063926":"dataset_1[0].shape, dataset_1[1].shape, dataset_1[2].shape, dataset_1[3].shape","c8034947":"output=pd.DataFrame(zip(model_n, n_features, train_score ), columns=['Model Name', 'No. of features', 'Training RMSE score'])\noutput.sort_values(by='Training RMSE score').head(1)","0af0697c":"run_model(Lasso(max_iter=3000), dataset_1, \"Lasso\")","b8f09c01":"output=pd.DataFrame(zip(model_n, n_features, train_score ), columns=['Model Name', 'No. of features', 'Training RMSE score'])\noutput.sort_values(by='Training RMSE score')","f9f518a6":"## Linear Regression","d8c33ef3":"## Quasi constant","3cd27e37":"No duplicated columns","f8b6fbe6":"# Feature engineering","6b09389c":"as you can see above \"other\" appears in more than 1 column, hence let's change the column values to make them unique across all columns","97363970":"## Duplicated features","05f0a1c0":"## Running on dataset_1 i.e with label encoding","5e046235":"## Check constant, quasi constant and duplicate features","06e73bae":"## Lasso","3fb1fafb":"No column with constant value. Now let's check where column values are 1% different.","8ccba340":"# Let's create 2 datasets, one with Label encoding and other with Onehot encoding and run it seperately to check the impact","beba502e":"No column with quasi constant as well.","d8b197e2":"### Convert data to train and test set","c0d41b0d":"## SelectKbest test to select best features in collaboration with f_regression"}}