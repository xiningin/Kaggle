{"cell_type":{"4a3436f2":"code","29f1c06c":"code","cdc80192":"code","e13a9b7c":"code","40a49d58":"code","c83c3e76":"code","c7482afd":"markdown","aaa95a7e":"markdown","515b0828":"markdown","b4b01300":"markdown","b7e39186":"markdown"},"source":{"4a3436f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","29f1c06c":"import pandas as pd\n\n\n\n\ndef create_user_movie_df():\n    movie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')\n    rating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')\n    df = movie.merge(rating, how=\"left\", on=\"movieId\")\n    comment_counts = pd.DataFrame(df[\"title\"].value_counts())\n    rare_movies = comment_counts[comment_counts[\"title\"] <= 1000].index\n    common_movies = df[~df[\"title\"].isin(rare_movies)]\n    user_movie_df = common_movies.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\")\n    return user_movie_df\nuser_movie_df = create_user_movie_df()\n\nrandom_user = int(pd.Series(user_movie_df.index).sample(1, random_state=45).values)\n#rand = int(pd.Series(user_movie_df.index).sample(1,random_state=45).values)\nrandom_user_df = user_movie_df[user_movie_df.index == random_user]\n\nmovies_watched = random_user_df.columns[random_user_df.notna().any()].tolist()\nlen(movies_watched)\n#33 movie \n\nuser_movie_df.loc[user_movie_df.index == random_user, user_movie_df.columns == \"Schindler's List (1993)\"]\n\nuser_movie_df.loc[user_movie_df.index == random_user, user_movie_df.columns == \"Wall Street (1987)\"]\n\n\n\n","cdc80192":"movies_watched_df = user_movie_df[movies_watched]\nmovies_watched_df.head()\n\nmovies_watched_df.shape\n\nuser_movie_count = movies_watched_df.T.notnull().sum()\n\nuser_movie_count = user_movie_count.reset_index()\n\nuser_movie_count.columns = [\"userId\", \"movie_count\"]\n\nuser_movie_count[user_movie_count[\"movie_count\"] > 20].sort_values(\"movie_count\", ascending=False)\n\n\nusers_same_movies = user_movie_count[user_movie_count[\"movie_count\"]>20][\"userId\"]","e13a9b7c":"users_same_movies.head()\n\n\nfinal_df = pd.concat([movies_watched_df[movies_watched_df.index.isin(users_same_movies)],\n                      random_user_df[movies_watched]])\n\nfinal_df.head()\n\n\nfinal_df.T.corr()\n\ncorr_df = final_df.T.corr().unstack().sort_values().drop_duplicates()\n\ncorr_df = pd.DataFrame(corr_df, columns=[\"corr\"])\ncorr_df.index.names = ['user_id_1', 'user_id_2']\ncorr_df = corr_df.reset_index()\ncorr_df.head()\n\n\ntop_users = corr_df[(corr_df[\"user_id_1\"] == random_user) & (corr_df[\"corr\"] >= 0.65)][\n    [\"user_id_2\", \"corr\"]].reset_index(drop=True)\n\ntop_users = top_users.sort_values(by='corr', ascending=False)\n\ntop_users.rename(columns={\"user_id_2\": \"userId\"}, inplace=True)\n\ntop_users","40a49d58":"\nrating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')\ntop_users_ratings = top_users.merge(rating[[\"userId\", \"movieId\", \"rating\"]], how='inner')\n\ntop_users_ratings.head(50)\n#kendisini getirmemek i\u00e7in\n\ntop_users_ratings = top_users_ratings[top_users_ratings[\"userId\"] != random_user]\n\n\ntop_users_ratings['weighted_rating'] = top_users_ratings['corr'] * top_users_ratings['rating']\n\n\ntop_users_ratings.head()\n\n\ntop_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})\n\nrecommendation_df = top_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})\nrecommendation_df = recommendation_df.reset_index()\n\nrecommendation_df.head()\n\nrecommendation_df[[\"movieId\"]].nunique()\n\nrecommendation_df[recommendation_df[\"weighted_rating\"] > 3.5]\n\nmovies_to_be_recommend = recommendation_df[recommendation_df[\"weighted_rating\"] > 3.5].sort_values(\"weighted_rating\", ascending=False)\n\nmovie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')\nmovies_to_be_recommend.merge(movie[[\"movieId\", \"title\"]])\n","c83c3e76":"#28941\nuser=28941\nmovie_id = rating[(rating[\"userId\"]==user)&(rating[\"rating\"]==5.0)]. \\\n    sort_values(by=\"timestamp\",ascending=False)[\"movieId\"][0:1].values[0]\n#7 id li filme \u00f6neri yapaca\u011f\u0131z.\n\nmovies_to_be_recommend.merge(movie[[\"movieId\", \"title\"]])[\"title\"]\n#0     Shanghai Triad (Yao a yao yao dao waipo qiao) ...\n#1                               To Live (Huozhe) (1994)\n#2                         Farinelli: il castrato (1994)\n#3                                       Lamerica (1994)\n#4     Nosferatu (Nosferatu, eine Symphonie des Graue...\n\n\nmovie[movie[\"movieId\"]==7][\"title\"]\n#Sabrina filmimiz i\u00e7in item based \u00f6neriler de a\u015fa\u011f\u0131dad\u0131r.\n\n#item based\n\nmovie_name = \"Sabrina (1995)\"\n\nmovie_name = user_movie_df[movie_name]\n\nmovies_from_item = user_movie_df.corrwith(movie_name).sort_values(ascending=False).head(10)\nmovies_from_item[1:6].index\n#Index(['Intouchables (2011)', 'Father of the Bride (1991)',\n#       'Anna and the King (1999)', 'Runaway Bride (1999)',\n#       'Phantom of the Opera, The (2004)'],\n#      dtype='object', name='title')\n#Intouchables (2011)                 0.503128\n#Father of the Bride (1991)          0.500332\n#Anna and the King (1999)            0.494133\n#Runaway Bride (1999)                0.483923\n#Phantom of the Opera, The (2004)    0.476132\n","c7482afd":"Now we need to get our ratings and use weighted ratings. With that, we can recommend the best movies for our user.","aaa95a7e":"**Now We will recommend with Item based model. I wrote with comment line too. I hope you enjoyed and learn crucial points**","515b0828":"Let's import the libraries and function that reading our csv and also preprocessing the dataframe. We choosed the random user and would like to recommend movies with Item based and User based.","b4b01300":"final_df is including with users_same movies and our user. We made correlation and sort the top users for see which has most common pattern.","b7e39186":"I filtered movies which is our user watched. Named the columns and also sampled the dataframe with higher than 20 common movies."}}