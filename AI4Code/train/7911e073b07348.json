{"cell_type":{"c7e59dfc":"code","3e2648ca":"code","400465a2":"code","21666fa5":"code","c80c28be":"code","de557352":"code","322b0305":"code","5212233f":"code","62c38a5d":"code","b89b5133":"code","fc2a1f70":"code","2be0f254":"code","c4eac542":"code","6f9b4f80":"code","5bef8356":"code","ae76fbaa":"code","237fc622":"code","f5315722":"code","005f74a0":"code","735b0e57":"code","2031e5db":"code","57bda6f2":"code","5fdf7ed8":"code","284708bf":"code","9db0811a":"markdown","45e0cbf9":"markdown","8a12e792":"markdown","94a82d71":"markdown","a7e5e116":"markdown","ed07ceb6":"markdown","52585750":"markdown","1972a211":"markdown","059a2a36":"markdown","e3e567e2":"markdown","0cf76988":"markdown","9436bfc1":"markdown","ad642cd9":"markdown","eae1460e":"markdown","82c0359b":"markdown","10548978":"markdown","3f79636b":"markdown","8d75f58d":"markdown","d495e85d":"markdown","a756e253":"markdown","562add63":"markdown","efcd7c5b":"markdown","709c4ddb":"markdown","32e02cd5":"markdown","a353015a":"markdown","45da6d75":"markdown","89b3a434":"markdown","d44067ec":"markdown","67eecbcd":"markdown","f9bffa41":"markdown","458a97e6":"markdown","571b2299":"markdown","6e66c7ed":"markdown","7e7b396d":"markdown","481f3a63":"markdown","1744987b":"markdown","ec519988":"markdown","3074788f":"markdown","a785dd90":"markdown","a484f060":"markdown","3c69b161":"markdown"},"source":{"c7e59dfc":"# Cool Imports\n\nimport tensorflow as tf\nimport numpy as np\nimport torch\n\nprint(tf.__version__)\nprint(np.__version__)\nprint(torch.__version__)","3e2648ca":"# Numpy \nprint()\nprint(\"\"\"Numpy Implementation\"\"\")\na = np.array(10)\nprint(a)\nprint(a.shape, a.dtype) # shape of the array and type of the elements\nprint()\na = np.array([10])\nprint(a)\nprint(a.shape, a.dtype) # shape of the array and type of the elements\nprint()\na = np.array([10], dtype=np.float32)\nprint(a)\nprint(a.shape, a.dtype) # shape of the array and type of the elements\nprint()\n\n# TensorFlow\nprint(\"\"\"Tensorflow Implementation\"\"\")\nprint()\nb = tf.constant(10) # As Scalar\nprint(b)\nprint()\nb = tf.constant(10, shape=(1,1)) # As 1-D Vector\nprint(b)\nprint()\nb = tf.constant(10, shape=(1,1), dtype=tf.float32) # As 1-D Vector with specified Data-type\nprint(b)\n\n# Torch\nprint()\nprint(\"\"\"Torch Implementation\"\"\")\nprint()\nc = torch.tensor(10, ) # As Scalar\nprint(c)\nprint()\nc = torch.tensor([10]) # As 1-D Vector\nprint(c, c.shape, c.dtype)\nprint()\nc = torch.tensor([10], dtype=torch.float32) # As 1-D Vector with specified Data-type\nprint(c)","400465a2":"# Numpy\nprint()\nprint(\"\"\"Numpy Implementation\"\"\")\na = np.array([[1,2,3], [4,5,6]])\nprint(a)\nprint(a.shape, a.dtype)\nprint()\n\n# Tensorflow\nprint()\nprint(\"\"\"Tensorflow Implementation\"\"\")\nb = tf.constant([[1,2,3], [4,5,6]])\nprint(b)\nprint(b.shape)\nprint()\n\n# Torch\nprint()\nprint(\"\"\"Torch Implementation\"\"\")\nc = torch.tensor([[1,2,3], [4,5,6]]) \nprint(c)\nprint(c.shape)","21666fa5":"# Numpy\nprint()\nprint(\"\"\"Numpy Implementation\"\"\")\na = np.zeros((3,3))\nprint(a, a.shape, a.dtype)\nprint()\na = np.ones((3,3))\nprint(a, a.shape, a.dtype)\nprint()\na = np.eye(3)\nprint(a, a.shape, a.dtype)\nprint()\na = np.full((3,3),10.0)\nprint(a, a.shape, a.dtype)\nprint()\n\n# Tensorflow\nprint()\nprint(\"\"\"Tensorflow Implementation\"\"\")\nb = tf.zeros((3,3))\nprint(b)\nprint()\nb = tf.ones((3,3))\nprint(b)\nprint()\nb = tf.eye(3)\nprint(b)\nprint()\nb = tf.fill([3,3], 10)\nprint(b)\nprint()\n\n# Torch\nprint()\nprint(\"\"\"Torch Implementation\"\"\")\nc = torch.zeros((3,3))\nprint(c)\nprint()\nc = torch.ones((3,3))\nprint(c)\nprint()\nc = torch.eye(3)\nprint(c)\nprint()\nc = c.new_full([3,3], 10)\nprint(c)","c80c28be":"# Numpy\nprint()\nprint(\"\"\"Numpy Implementation\"\"\")\na = np.random.randn(3,3) \nprint(a, a.shape, a.dtype)\nprint()\nprint(a.mean(), a.std())\nprint()\n\n# Tensorflow\nprint()\nprint(\"\"\"Tensorflow Implementation\"\"\")\nb = tf.random.normal((3,3),mean=0, stddev=1)\nprint(b)\nprint()\nprint(tf.reduce_mean(b), tf.math.reduce_std(b))\nprint()\n\n# Torch\nprint()\nprint(\"\"\"Torch Implementation\"\"\")\nc = torch.normal(mean=0, std=1, size=(3, 3))\nprint(c)\nprint()\nprint(torch.mean(c), torch.std(c))","de557352":"# Numpy\nprint()\nprint(\"\"\"Numpy Implementation\"\"\")\na = np.random.uniform(low=0, high=1, size=(3,3)) \nprint(a, a.shape, a.dtype)\nprint()\nprint(a.mean(), a.std())\nprint()\n\n# Tensorflow\nprint()\nprint(\"\"\"Tensorflow Implementation\"\"\")\nb = tf.random.uniform((3,3), minval=0, maxval=1) # Values are always > 1\nprint(b)\nprint()\nprint(tf.reduce_mean(b), tf.math.reduce_std(b))\nprint()\n\n# Torch\nprint()\nprint(\"\"\"Torch Implementation\"\"\")\nnum_samples = 3\nDim = 3\nc = torch.distributions.Uniform(0, +1).sample((num_samples, Dim))\nprint(c)\nprint()\nprint(torch.mean(c), torch.std(c))","322b0305":"# Numpy\nprint()\nprint(\"\"\"Numpy Implementation\"\"\")\na = np.arange(0,9)\nprint(a)\nprint()\na = np.arange(start=1, stop=20, step=2, dtype=np.float32)\nprint(a, a.dtype)\nprint()\n\n# Tensorflow\nprint()\nprint(\"\"\"Tensorflow Implementation\"\"\")\nb = tf.range(9)\nprint(b)\nprint()\nb = tf.range(start=1, limit=20, delta=2, dtype=tf.float64)\nprint(b)\nprint()\n\n# Torch\nprint()\nprint(\"\"\"Torch Implementation\"\"\")\nc = torch.arange(start=0, end=9)\nprint(c)\nprint()\nc = torch.arange(start=1, end=20, step=2, dtype=torch.float64)\nprint(c)\n","5212233f":"# Numpy\nprint()\nprint(\"\"\"Numpy Implementation\"\"\")\na = a.astype(np.uint8)\nprint(a, a.dtype)\nprint()\n\n# Tensorflow\nprint()\nprint(\"\"\"Tensorflow Implementation\"\"\")\nb = tf.cast(b, dtype=tf.uint8)\nprint(b)\nprint()\n\n# Torch\nprint()\nprint(\"\"\"Torch Implementation\"\"\")\nc = torch.tensor(c)\nc= c.type(torch.int64)\nprint(c)","62c38a5d":"# Numpy\nprint()\nprint(\"\"\"Numpy Implementation\"\"\")\na = np.array([1,2,3,4,5])\nb = np.array([6,7,8,9,10])\nc = np.add(a, b) # x + y\nprint(c, c.dtype)\nprint()\nc = np.subtract(b,a) # y - x\nprint(c, c.dtype)\nprint()\nc = np.divide(b,a) # y \/ x\nprint(c, c.dtype)\nprint()\nc = np.multiply(b,a) # y * x\nprint(c, c.dtype)\nprint()\nc = (a **2)\nprint(c)\nprint()\n\n# Tensorflow\nprint()\nprint(\"\"\"Tensorflow Implementation\"\"\")\nx = tf.constant([1,2,3,4,5])\ny = tf.constant([6,7,8,9,10])\nz = tf.add(x,y) # x + y\nprint(z)\nprint()\nz = tf.subtract(y,x) # y - x\nprint(z)\nprint()\nz = tf.divide(y,x) # y \/ x\nprint(z)\nprint()\nz = tf.multiply(y,x) # y * x\nprint(z)\nprint()\nz = (x **2)\nprint(z)\nprint()\n\n# Torch\nprint()\nprint(\"\"\"Torch Implementation\"\"\")\nt = torch.tensor([1,2,3,4,5])\nu = torch.tensor([6,7,8,9,10])\nv = torch.add(t, u) # x + y\nprint(v)\nprint()\nv = torch.sub(u,t) # y - x\nprint(v)\nprint()\nv = torch.true_divide (u, t) # y \/ x\nprint(v)\nprint()\nv = torch.mul(u,t) # y * x\nprint(v)\nprint()\nv = (t **2)\nprint(v)","b89b5133":"# Numpy\nprint()\nprint(\"\"\"Numpy Implementation\"\"\")\na = np.array([1,2,3,4,5])\nb = np.array([6,7,8,9,10])\nc = np.dot(a, b) # x + y\nprint(c, c.dtype)\nprint()\n\n# Tensorflow\nprint()\nprint(\"\"\"Tensorflow Implementation\"\"\")\nx = tf.constant([1,2,3,4,5])\ny = tf.constant([6,7,8,9,10])\nz = tf.tensordot(x,y, axes=1)\nprint(z)\nprint()\n\n# Torch\nprint()\nprint(\"\"\"Torch Implementation\"\"\")\nt = torch.tensor([1,2,3,4,5])\nu = torch.tensor([6,7,8,9,10])\nv = torch.dot(t,u)\nprint(v)","fc2a1f70":"# Numpy\nprint()\nprint(\"\"\"Numpy Implementation\"\"\")\na = np.array([[1,2,3], [4,5,6]])\nb = np.array([[1,2,3], [4,5,6], [7,8,9]])\nc = np.matmul(a,b) # (2,3) @ (3,3) --> (2,3) output shape\nprint(c)\nprint()\n\n# Tensorflow\nprint()\nprint(\"\"\"Tensorflow Implementation\"\"\")\nx = tf.constant([[1,2,3], [4,5,6]])\ny = tf.constant([[1,2,3], [4,5,6], [7,8,9]])\nz = tf.matmul(x,y) # (2,3) @ (3,3) --> (2,3) output shape\nprint(z)\nprint()\n\n# Torch\nprint()\nprint(\"\"\"Torch Implementation\"\"\")\nt = torch.tensor([[1,2,3], [4,5,6]])\nu = torch.tensor([[1,2,3], [4,5,6], [7,8,9]])\nv = torch.matmul(t,u) # (2,3) @ (3,3) --> (2,3) output shape\nprint(v)","2be0f254":"# Numpy\nprint()\nprint(\"\"\"Numpy Implementation\"\"\")\na = np.array([1,2,3,4,5,6,7,8])\nprint(a[:])\nprint(a[2:-3])\nprint(a[3:-1])\nprint(a[::2])\nprint()\n\n# Tensorflow\nprint()\nprint(\"\"\"Tensorflow Implementation\"\"\")\nb = tf.constant([1,2,3,4,5,6,7,8])\nprint(b[:])\nprint(b[2:-3])\nprint(b[3:-1])\nprint(b[::2])\nprint()\n\n# Torch\nprint()\nprint(\"\"\"Torch Implementation\"\"\")\nc = torch.tensor([1,2,3,4,5,6,7,8])\nprint(c[:])\nprint(c[2:-3])\nprint(c[3:-1])\nprint(c[::2])","c4eac542":"# Numpy\nprint()\nprint(\"\"\"Numpy Implementation\"\"\")\nindices = np.array([0,3,5])\nx_indices = a[indices]\nprint(x_indices)\nprint()\n\n# Tensorflow\nprint()\nprint(\"\"\"Tensorflow Implementation\"\"\")\nindices = tf.constant([0,3,5])\nx_indices = tf.gather(b, indices)\nprint(x_indices)\nprint()\n\n# Torch\nprint()\nprint(\"\"\"Torch Implementation\"\"\")\nindices = torch.tensor([0,3,5])\nx_indices = c[indices]\nprint(x_indices)","6f9b4f80":"# Numpy\nprint()\nprint(\"\"\"Numpy Implementation\"\"\")\na = np.array([[1,2,3],\n              [4,5,6],\n              [7,8,9]])\n\n# Matrix Indexing\n# Print all individual Rows and Columns\nprint(\"Row-1\",a[0, :])\nprint(\"Row-2\",a[1, :])\nprint(\"Row-3\",a[2, :])\nprint()\nprint(\"Col-1\",a[:, 0])\nprint(\"Col-2\",a[:, 1])\nprint(\"Col-3\",a[:, 2])\nprint()\n\n# Print the sub-diagonal matrix\nprint(\"Upper-Left\",a[0:2,0:2])\nprint(\"Upper-Right\",a[0:2,1:3])\nprint()\nprint(\"Bottom-Left\",a[1:3,0:2])\nprint(\"Bottom-Right\",a[1:3,1:3])\n\n\n# Tensorflow\nprint()\nprint(\"\"\"Tensorflow Implementation\"\"\")\nb = tf.constant([[1,2,3],\n                 [4,5,6],\n                 [7,8,9]])\n\n# Matrix Indexing\n# Print all individual Rows and Columns\nprint(\"Row-1\",b[0, :])\nprint(\"Row-2\",b[1, :])\nprint(\"Row-3\",b[2, :])\nprint()\nprint(\"Col-1\",b[:, 0])\nprint(\"Col-2\",b[:, 1])\nprint(\"Col-3\",b[:, 2])\nprint()\n\n# Print the sub-diagonal matrix\nprint(\"Upper-Left\",b[0:2,0:2])\nprint(\"Upper-Right\",b[0:2,1:3])\nprint()\nprint(\"Bottom-Left\",b[1:3,0:2])\nprint(\"Bottom-Right\",b[1:3,1:3])\n\n# Torch\nprint()\nprint(\"\"\"Torch Implementation\"\"\")\nc = torch.tensor([[1,2,3],\n                 [4,5,6],\n                 [7,8,9]])\n\n# Matrix Indexing\n# Print all individual Rows and Columns\nprint(\"Row-1\",c[0, :])\nprint(\"Row-2\",c[1, :])\nprint(\"Row-3\",c[2, :])\nprint()\nprint(\"Col-1\",c[:, 0])\nprint(\"Col-2\",c[:, 1])\nprint(\"Col-3\",c[:, 2])\nprint()\n\n# Print the sub-diagonal matrix\nprint(\"Upper-Left\",c[0:2,0:2])\nprint(\"Upper-Right\",c[0:2,1:3])\nprint()\nprint(\"Bottom-Left\",c[1:3,0:2])\nprint(\"Bottom-Right\",c[1:3,1:3])","5bef8356":"# Numpy\nprint()\nprint(\"\"\"Numpy Implementation\"\"\")\na = np.arange(9)\nprint(a)\na = np.reshape(a, (3,3))\nprint(a)\na = np.transpose(a, (1,0)) # Swap axes (1,0), use (0,1) nothing happens\nprint(a)\nprint()\n\n# Tensorflow\nprint()\nprint(\"\"\"Tensorflow Implementation\"\"\")\nb = tf.range(9)\nprint(b)\nb = tf.reshape(b, (3,3))\nprint(b)\nb = tf.transpose(b, perm=[1,0]) # Swap axes in perm (1,0), use (0,1) nothing happens\nprint(b)\nprint()\n\n# Torch\nprint()\nprint(\"\"\"Torch Implementation\"\"\")\nc = torch.arange(9)\nprint(c)\nc = torch.reshape(c, (3,3))\nprint(c)\nc = c.permute(1,0) # Swap axes in perm (1,0), use (0,1) nothing happens\nprint(c)","ae76fbaa":"# Numpy\nprint()\nprint(\"\"\"Numpy Implementation\"\"\")\na = np.array([[1, 2], [3, 4]])\nprint(\"a\",a)\nb = np.array([[5, 6]])\nprint(\"b\",b)\nprint()\nd = np.concatenate((a, b), axis=0)\nprint(\"Concat (axis=0 - Row)\")\nprint(d)\nprint()\ne = np.concatenate((a, b.T), axis=1)\nprint(\"Concat (axis=1 - Column)\")\nprint(e)\nprint()\nprint()\n\n# Tensorflow\nprint()\nprint(\"\"\"Tensorflow Implementation\"\"\")\nx = tf.constant([[1, 2], [3, 4]])\nprint(\"x\",x)\ny = tf.constant([[5, 6]])\nprint(\"y\",y)\nprint()\nz = tf.concat((x, y), axis=0)\nprint(\"Concat (axis=0 - Row)\")\nprint(z)\nprint()\nz = tf.concat((x, tf.transpose(y)), axis=1)\nprint(\"Concat (axis=1 - Column)\")\nprint(z)\nprint()\nprint()\n\n# Torch\nprint()\nprint(\"\"\"Torch Implementation\"\"\")\nt = torch.tensor([[1, 2], [3, 4]])\nprint(\"x\",t)\nu = torch.tensor([[5, 6]])\nprint(\"y\",u)\nprint()\nv = torch.cat((t , u), axis=0)\nprint(\"Concat (axis=0 - Row)\")\nprint(v)\nprint()\nv = torch.cat((t , u.T), axis=1)\nprint(\"Concat (axis=1 - Column)\")\nprint(v)\nprint()\n","237fc622":"# Numpy\nprint()\nprint(\"\"\"Numpy Implementation\"\"\")\na = np.array([[1,2,3,4,5], [10,10,10,10,10]])\nprint(a)\nprint()\nprint(\"Overall flattened Sum\", a.sum())\nprint(\"Sum across Columns\",a.sum(axis=0)) \nprint(\"Sum across Rows\",a.sum(axis=1))\nprint()\n\n# Tensorflow\nprint()\nprint(\"\"\"Tensorflow Implementation\"\"\")\nb = tf.constant([[1,2,3,4,5], [10,10,10,10,10]])\nprint(b)\nprint()\nprint(\"Overall flattened Sum\",tf.math.reduce_sum(b))\nprint(\"Sum across Columns\",tf.math.reduce_sum(b, axis=0))\nprint(\"Sum across Rows\",tf.math.reduce_sum(b, axis=1))\nprint()\n\n# Torch\nprint()\nprint(\"\"\"Torch Implementation\"\"\")\nc = torch.tensor([[1,2,3,4,5], [10,10,10,10,10]])\nprint(c)\nprint()\nprint(\"Overall flattened  Sum\",torch.sum(c))\nprint(\"Sum across Columns\",torch.sum(c, axis=0))\nprint(\"Sum across Rows\",torch.sum(c, axis=1))\nprint()","f5315722":"# Numpy\nprint()\nprint(\"\"\"Numpy Implementation\"\"\")\na = np.array([[1,2,3,4,5], [10,10,10,10,10]])\nprint(a)\nprint()\nprint(\"Overall flattened mean\", a.mean())\nprint(\"Sum across Columns\",a.mean(axis=0)) \nprint(\"Sum across Rows\",a.mean(axis=1))\nprint()\n\n# Tensorflow\nprint()\nprint(\"\"\"Tensorflow Implementation\"\"\")\nb = tf.constant([[1,2,3,4,5], [10,10,10,10,10]])\nprint(b)\nprint()\nprint(\"Overall flattened mean\",tf.math.reduce_mean(b))\nprint(\"Sum across Columns\",tf.math.reduce_mean(b, axis=0))\nprint(\"Sum across Rows\",tf.math.reduce_mean(b, axis=1))\nprint()\n\n# Torch\nprint()\nprint(\"\"\"Torch Implementation\"\"\")\nc = torch.tensor([[1,2,3,4,5], [10,10,10,10,10]], dtype=torch.float32)\nprint(c)\nprint()\nprint(\"Overall flattened mean\",torch.mean(c))\nprint(\"Sum across Columns\",torch.mean(c, axis=0))\nprint(\"Sum across Rows\",torch.mean(c, axis=1))","005f74a0":"# Numpy\nprint()\nprint(\"\"\"Numpy Implementation\"\"\")\na = np.full((3,3),10.0)\nprint(a)\nprint(a.shape)\na = np.expand_dims(a, axis=0)\nprint(a)\nprint(a.shape)\nb = np.full((3,3),20.0)\nprint(b)\nb = np.expand_dims(b, axis=0)\nprint(b.shape)\nc = np.concatenate((a,b), axis=0)\nc = np.moveaxis(c,2,0) # Move 2nd dimension to 0th position\nprint(c)\nprint(c.shape)\nprint()\n\n# Tensorflow\nprint()\nprint(\"\"\"Tensorflow Implementation\"\"\")\nx = tf.fill((3,3),10.0)\nprint(x)\nprint(x.shape)\nx = tf.expand_dims(x, axis=0)\nprint(x.shape)\ny = tf.fill((3,3),20.0)\nprint(y)\nprint(y.shape)\ny = tf.expand_dims(y, axis=0)\nprint(y.shape)\nz = tf.concat((x,y), axis=0)\nz = tf.transpose(z, [1, 0, 2])\nprint(z.shape)\nprint()\n\n# Torch\nprint()\nprint(\"\"\"Torch Implementation\"\"\")\nm1 = torch.ones((2,), dtype=torch.int32)\nm1 = m1.new_full((3, 3), 10)\nm1 = torch.unsqueeze(m1, axis=0)\nprint(m1)\nprint(m1.shape)\nm2 = torch.ones((2,), dtype=torch.int32)\nm2 = m2.new_full((3, 3), 20)\nprint(m2)\nm2 = torch.unsqueeze(m2, axis=0)\nprint(m2.shape)\nm = torch.cat((m1,m2), axis=0)\nm = m.permute([1,0,2])\nprint(m)\nm.shape","735b0e57":"# Numpy\nprint()\nprint(\"\"\"Numpy Implementation\"\"\")\na = np.array([[5,10,15],\n               [20,25,30]])\nb = np.array([[6,69,35],\n              [70,10,82]])\nc = np.array([[25,45,48],\n             [4,100,89]])\nprint(a)\nfinal = np.zeros((3,2,3))\nprint(final.shape)\nfinal[0, :, :] = a\nfinal[1, :, :] = b\nfinal[2, :, :] = c\nprint(final)\nprint(\"Overall flattened max\", final.max())\nprint(\"max across Columns\",final.max(axis=0)) \nprint(\"max across Rows\",final.max(axis=1))\nprint()\nprint(\"Index of max value across the flattened max\", final.argmax())\nprint(\"Index of max value across Columns\",final.argmax(axis=0)) \nprint(\"Index of max value across Rows\",final.argmax(axis=1)) \n\n# Tensorflow\nprint()\nprint(\"\"\"Tensorflow Implementation\"\"\")\nfinal = tf.constant([[[5,10,15],\n                  [20,25,30]],\n                 [[6,69,35],\n                  [70,10,82]],\n                 [[25,45,48],\n                  [4,100,89]]])\nprint(final)\n\nprint(\"Overall flattened max\", tf.math.reduce_max(final))\nprint(\"max across Columns\",tf.math.reduce_max(final,axis=0)) \nprint(\"max across Rows\",tf.math.reduce_max(final, axis=1))\nprint()\nprint(\"Index of max value across the flattened max\", tf.math.argmax(final))\nprint(\"Index of max value across Columns\",tf.math.argmax(final, axis=0)) \nprint(\"Index of max value across Rows\",tf.math.argmax(final, axis=1)) \n\n# Torch\nprint()\nprint(\"\"\"Torch Implementation\"\"\")\nfinal = torch.tensor([[[5,10,15],\n                       [20,25,30]],\n                      [[6,69,35],\n                       [70,10,82]],\n                      [[25,45,48],\n                        [4,100,89]]])\nprint(final)\n\nprint(\"Overall flattened max\", torch.max(final))\nprint(\"max across Columns\",torch.max(final,axis=0)) \nprint(\"max across Rows\",torch.max(final, axis=1))\nprint()\nprint(\"Index of max value across the flattened max\", torch.argmax(final))\nprint(\"Index of max value across Columns\",torch.argmax(final, axis=0)) \nprint(\"Index of max value across Rows\",torch.argmax(final, axis=1)) \n","2031e5db":"# Numpy\nprint(\"\"\"Numpy Implementation\"\"\")\na = np.array([[10,10,10],[10,10,10],\n              [10,10,10],[10,10,10]])\n\nb = np.array([[20,20,20],[20,20,20],\n              [20,20,20],[20,20,20]])\n\nc = np.array([[30,30,30],[30,30,30],\n              [30,30,30],[30,30,30]])\nfinal = np.zeros((3,4,3))\nfinal[0, :, :] = a\nfinal[1, :, :] = b\nfinal[2, :, :] = c\n\nprint(\"Upper-Left\",final[:, 0:2, 0:2])\nprint(\"Lower-Right\",final[:, 2:, 1:])\nprint(\"Middle Elements\",final[:,1:3, 1])\n\n# Ignore Middle Elements\na = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])\nb = np.array([[13,14,15],[16,17,18],[19,20,21],[22,23,24]])\nc = np.array([[25,26,27],[28,29,30],[31,32,33],[34,35,36]])\n\nfinal = np.zeros((3,4,3))\nprint(final.shape)\nfinal[0, :, :] = a\nfinal[1, :, :] = b\nfinal[2, :, :] = c\n# Though may work,but not efficient\nprint(\"Ignore Middle\",final[:,[0,0,0,1,1,2,2,3,3,3], [0,1,2,0,2,0,2,0,1,2]])","57bda6f2":"# Tensorflow\nprint(\"\"\"Tensorflow Implementation\"\"\")\nfinal = tf.constant([[[10,10,10],[10,10,10],\n                  [10,10,10],[10,10,10]],\n\n                  [[20,20,20],[20,20,20],\n                  [20,20,20],[20,20,20]],\n\n                  [[30,30,30],[30,30,30],\n                  [30,30,30],[30,30,30]]])\n\nprint(\"Upper-Left\",final[:, 0:2, 0:2])\nprint(\"Lower-Right\",final[:, 2:, 1:])\nprint(\"Middle Elements\",final[:,1:3, 1])","5fdf7ed8":"# Torch\nprint(\"\"\"Torch Implementation\"\"\")\na = torch.Tensor([[10,10,10],[10,10,10],\n              [10,10,10],[10,10,10]])\n\nb = torch.Tensor([[20,20,20],[20,20,20],\n              [20,20,20],[20,20,20]])\n\nc = torch.Tensor([[30,30,30],[30,30,30],\n              [30,30,30],[30,30,30]])\nfinal = np.zeros((3,4,3))\nfinal[0, :, :] = a\nfinal[1, :, :] = b\nfinal[2, :, :] = c\n\nprint(\"Upper-Left\",final[:, 0:2, 0:2])\nprint(\"Lower-Right\",final[:, 2:, 1:])\nprint(\"Middle Elements\",final[:,1:3, 1])\n\n# Ignore Middle Elements\na = torch.Tensor([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])\nb = torch.Tensor([[13,14,15],[16,17,18],[19,20,21],[22,23,24]])\nc = torch.Tensor([[25,26,27],[28,29,30],[31,32,33],[34,35,36]])\n\nfinal = np.zeros((3,4,3))\nprint(final.shape)\nfinal[0, :, :] = a\nfinal[1, :, :] = b\nfinal[2, :, :] = c\n# Though may work,but not efficient\nprint(\"Ignore Middle\",final[:,[0,0,0,1,1,2,2,3,3,3], [0,1,2,0,2,0,2,0,1,2]])\n","284708bf":"print(\"That's it\")","9db0811a":"# Draw samples from uniform distribution\n\n\n","45e0cbf9":"# 5. Math Operations","8a12e792":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*ommNjebqhFUWnWvcogfaAw.png\">","94a82d71":"## 2-D Vector","a7e5e116":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*fzoRQsZAq7SUp4wLFINB8g.png\">\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1200\/1*DbXyWegn3-sxnAeGQG-Azw.png\">\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*1DPeLiVtR95ziG3O4A_IUQ.png\">","ed07ceb6":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*5D1UKW0bLcaQ3ZUN7sx3uA.png\">","52585750":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*SqK5t1Ud5ksMpmZQjT98AQ.png\">","1972a211":"# Contains the Visual Representation of Matrix & Vector Operation, along with code implementations performed on tensorflow, numpy and pytorch.","059a2a36":"# 6. Dot Product","e3e567e2":"# This notebook is written in accordance with my blog published in medium. Feel free to read it [Link](https:\/\/medium.com\/towards-artificial-intelligence\/visual-representation-of-matrix-and-vector-operations-and-implementation-in-numpy-torch-and-tensor-6a94d14913c6)","0cf76988":"# Draw random samples from normal distribution","9436bfc1":"# 11. Taking mean across every axis","ad642cd9":"## Scalar and 1-D Vector","eae1460e":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*7KjFTkEGGuBIVkB43h_fOg.png\">","82c0359b":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*9tTRW07UAXAkE1aFKM0GGA.png\">","10548978":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*lgCTWIny8nGCxPNFjWMIPA.png\">","3f79636b":"# 2. Generating data","8d75f58d":"# 4. Type - Conversion","d495e85d":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*C4zaaqb3a1R08uj23llLhw.png\">","a756e253":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*Nmg32Jhd5XMxy1gZULd46A.png\">","562add63":"# 9. Concatenation","efcd7c5b":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1200\/1*9kVr15tL5ahesHZ0myh-uQ.png\">\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*PtEYTcCsJJzMOBXrFQmLuQ.png\">\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1200\/1*94Zw_BDp1fufWCd7_-qeVg.png\">\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*a29LnvI0cgn0gzaP1kPZ6Q.png\">","709c4ddb":"# 14. 3d Matrix - Indexing","32e02cd5":"\n# 10. Summing across every axis","a353015a":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*-mEa_EJExGYgu_nbNXnK5Q.png\">","45da6d75":"# 8. Reshaping","89b3a434":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*Ei4EFkk0qUh6RYq5cKQO4g.png\">","d44067ec":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*iDntiApd5pfYzb1og0mLHA.png\">\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*Bw29ESok6GeGMmQibcDWaQ.png\">\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*G5vsZQPHFDs0PDR5zWCSfA.png\">\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1200\/1*VteSG9ZAAXAKlskNgStjig.png\">\n\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*f2rnK0IS6g6BqlK9kph4IA.png\">\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*spB92-b4VJHmlYgTQbOOlw.png\">","67eecbcd":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*c2Wbf0ogAMz95AwFnLGYdw.png\">","f9bffa41":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*dbkaG5dXETNEiZRqyIdlQw.png\">","458a97e6":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*rJjgnsdb9AOfGUuxDRhaqA.png\">","571b2299":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*2aX6VCmTOk5_ojoVLTIVxw.png\">\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*vIcJ7bQLJw4vxQnuGkhBJA.png\">","6e66c7ed":"# 1. Array Initialization ~ 1D, 2D, 3D","7e7b396d":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*CY6ulUvaIpBpefZL3aJj8w.png\">","481f3a63":"# 13. MAX and ARGMAX","1744987b":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*oroDC_aX76_G2V1zLV2DMQ.png\">\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*y3WMACw6HHqEAa-GG3cTdg.png\">","ec519988":"# 3. Arrangements","3074788f":"# 7. Indexing and Slicing","a785dd90":"# 12. Dimension Expansion & move dimension","a484f060":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*Zyiav4DHpJRE52diaLmgQA.png\">","3c69b161":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*UnnY3jEq8qM1dXbD8US8Uw.png\">"}}