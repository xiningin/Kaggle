{"cell_type":{"c46125ef":"code","37529ef0":"code","fb6f4d9f":"code","2390f41d":"code","db6c9014":"code","5b723dcc":"code","4ccba625":"code","575f46ac":"code","dd0d11c6":"code","870abea8":"code","15385a81":"code","c3f04664":"code","09b05bc3":"code","e8c55918":"code","a628d7b9":"code","e621174b":"code","e6c8eb87":"code","2d1a21f6":"code","4988b4ee":"code","87d4f8a3":"code","1785ac29":"code","bfd48161":"code","4b86828b":"code","0b4fc13c":"code","2b21ef72":"code","800000c4":"code","a95c79ff":"code","acb613a5":"code","69c54393":"code","1e919554":"code","07972d6f":"code","2d9d9d9b":"code","41b51d2d":"code","3994da94":"code","73eefed9":"code","ce30f357":"code","453323b3":"code","fd0d835a":"code","0eadd542":"code","654fb095":"code","9533ef1b":"code","21dee311":"code","9d7ccf22":"code","bd876cad":"code","6425d407":"code","0223a8d4":"code","c53bc132":"code","a67ec7e3":"code","56eb732f":"code","09c56673":"code","fa55f019":"code","5a8328eb":"code","98c2a7f9":"code","1d7692ed":"code","88543b25":"code","24f4570a":"code","c8372c7b":"code","6f185a06":"code","9fd79890":"code","d1c653b7":"code","3783ab56":"code","2403a7f2":"code","acf76647":"code","83c09229":"code","94a41f03":"code","c97e5354":"code","0b32e40a":"code","893bbc6f":"code","f4f300cd":"code","e5c175b7":"code","649c8c35":"code","b2f8b78b":"code","f4b5da3b":"code","ea2d2c04":"code","0260fd6c":"code","601df1b0":"code","8ae75ba6":"code","a45e444f":"code","42d0ec25":"code","75edf80c":"code","5cf1300e":"code","21705fcd":"code","c0afb80c":"code","afce5389":"code","787671d6":"code","36ccfa88":"code","be2210c7":"code","012a8d33":"code","07bd9f40":"code","594d1694":"code","ad11c786":"code","0bc64ed0":"code","c92dda1b":"code","749bb938":"code","1fcd4553":"code","1533b507":"code","f13beadf":"code","84af2313":"code","888eb02a":"code","0f051800":"code","af5726bd":"code","75fac298":"code","f4e11c3c":"code","99ecdb49":"code","73a954c6":"code","54ef9a38":"code","1a250dfd":"code","dc558159":"code","a0d49c98":"code","e2c2229e":"code","2f9f5d17":"code","b2b8efc1":"code","52ba8933":"code","47f313ec":"code","cc2ad785":"code","490738f0":"code","3a2e3f09":"code","acbcc9bf":"code","df269dd4":"code","27642514":"code","7b3766b6":"code","c878f4d4":"markdown","12877431":"markdown","78866bc4":"markdown","cd0bbd04":"markdown","3557ae33":"markdown","84ba2231":"markdown","acdcd16d":"markdown","f78b47a8":"markdown","270fb9d5":"markdown","34097ab0":"markdown","cec9e36a":"markdown","496b955d":"markdown","7705cb59":"markdown","5a0c7213":"markdown","7f4f0822":"markdown","02f9406b":"markdown","cb750014":"markdown","a38c4dae":"markdown","4579f05e":"markdown","a9f45681":"markdown","125cc626":"markdown","a4323d4b":"markdown","5cd38264":"markdown","9a1c8c9d":"markdown","cd00f495":"markdown","7713d3cf":"markdown","0e872b7f":"markdown","860cb373":"markdown","f3395e1b":"markdown","73ea25f8":"markdown","3d2c8ee2":"markdown","7f3a4128":"markdown","d965ae3d":"markdown","16b6fc6a":"markdown","a840645e":"markdown","a572236c":"markdown","75a45def":"markdown","400bb836":"markdown"},"source":{"c46125ef":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","37529ef0":"import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np # linear algebra\nimport matplotlib.pyplot as plt # visualisation of data\nimport seaborn as sns\nfrom sklearn.cluster import KMeans\nfrom sklearn import tree # classification Scikit-Learn Library to build classification tree\nfrom sklearn.model_selection import train_test_split # Training tree with dataset to build the classification tree\nfrom sklearn.metrics import accuracy_score # To compute the best proportion between training percentage set and testing percentage set\nfrom mlxtend.frequent_patterns import apriori\nfrom mlxtend.frequent_patterns import association_rules\n%matplotlib inline","fb6f4d9f":"df = pd.read_csv(\"\/kaggle\/input\/cervical-cancer-behavior-risk-dataset\/sobar-72.csv\", encoding=\"utf8\", engine=\"python\")\ndf.head()","2390f41d":"features = [df.columns]\nfeatures","db6c9014":"#sns.set(style=\"ticks\", color_codes=True)\n#g = sns.PairGrid(df, hue='ca_cervix')\n#g.map(sns.scatterplot)","5b723dcc":"ca = df.loc[df['ca_cervix'] == 1]\nca.head()","4ccba625":"len(ca)","575f46ac":"#sns.pairplot(ca)","dd0d11c6":"nca = df.loc[df['ca_cervix'] == 0]\nnca.head()","870abea8":"len(nca)","15385a81":"#sns.pairplot(nca)","c3f04664":"from scipy.cluster.hierarchy import dendrogram, linkage\n\nlinked = linkage(df, 'single')\n\nplt.figure(figsize=(30, 10))\ndendrogram(linked,\n            orientation='top',\n            distance_sort='descending',\n            show_leaf_counts=True)\nplt.show()","09b05bc3":"from sklearn.datasets.samples_generator import make_blobs\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\n\nfeatures = list(df.columns)[:-2]\n### Get the features data\ndata = df[features]\nclustering_kmeans = KMeans(n_clusters=31)\ndata['clusters'] = clustering_kmeans.fit_predict(data)\nreduced_data = PCA().fit_transform(data)\nresults = pd.DataFrame(reduced_data,columns=['behavior_sexualRisk', 'behavior_eating', 'behavior_personalHygine', 'intention_aggregation', 'intention_commitment', 'attitude_consistency', 'attitude_spontaneity', 'norm_significantPerson', 'norm_fulfillment', 'perception_vulnerability', 'perception_severity', 'motivation_strength', 'motivation_willingness', 'socialSupport_emotionality', 'socialSupport_appreciation', 'socialSupport_instrumental', 'empowerment_knowledge', 'empowerment_abilities','pca19'])\n\nsns.scatterplot(x=\"behavior_sexualRisk\", y=\"behavior_eating\", hue=data['clusters'], data=results)\nplt.title('K-means Clustering with 2 dimensions')\nplt.show()","e8c55918":"plt.title(\"Patient with cervical cancer\")\nsns.countplot(data=ca, x=\"behavior_sexualRisk\")\nca['behavior_sexualRisk'].mean()","a628d7b9":"ca['behavior_sexualRisk'].value_counts(normalize=True) * 100","e621174b":"plt.title(\"Patient without cervical cancer\")\nsns.countplot(data=nca, x=\"behavior_sexualRisk\")\nnca['behavior_sexualRisk'].mean()","e6c8eb87":"nca['behavior_sexualRisk'].value_counts(normalize=True) * 100","2d1a21f6":"df['behavior_sexualRisk'].value_counts()\nsize = [0] * len(df['behavior_sexualRisk'])\ni = 0;\nfor x in df['behavior_sexualRisk']:\n    if df['ca_cervix'][i] == 1:\n        size[i] = len(df[df['behavior_sexualRisk'] == x])*60;\n    else:\n        size[i] = len(df[df['behavior_sexualRisk'] == x])*50;\n    i += 1;\n\nplt.scatter(x=df['behavior_sexualRisk'],y=df['behavior_sexualRisk'], c=df['ca_cervix'], cmap='Reds', s=size)\nplt.title(\"Sexual risk of patient\")\nplt.xlabel(\"Sexual risk 0 to 10\")","4988b4ee":"plt.title(\"Patient with cervical cancer\")\nsns.countplot(data=ca, x=\"behavior_eating\")\nca['behavior_eating'].mean()","87d4f8a3":"ca['behavior_eating'].value_counts(normalize=True) * 100","1785ac29":"plt.title(\"Patient without cervical cancer\")\nsns.countplot(data=nca, x=\"behavior_eating\")\nnca['behavior_eating'].mean()","bfd48161":"nca['behavior_eating'].value_counts(normalize=True) * 100","4b86828b":"df['behavior_eating'].value_counts()\nsize = [0] * len(df['behavior_eating'])\ni = 0;\nfor x in df['behavior_eating']:\n    if df['ca_cervix'][i] == 1:\n        size[i] = len(df[df['behavior_eating'] == x])*60;\n    else:\n        size[i] = len(df[df['behavior_eating'] == x])*50;\n    i += 1;\n\nplt.scatter(x=df['behavior_eating'],y=df['behavior_eating'], c=df['ca_cervix'], cmap='Reds', s=size)\nplt.title(\"Eating behavior of patient\")","0b4fc13c":"plt.title(\"Patient with cervical cancer\")\nsns.countplot(data=ca, x=\"behavior_personalHygine\")\nca['behavior_personalHygine'].mean()","2b21ef72":"ca['behavior_personalHygine'].value_counts(normalize=True) * 100","800000c4":"plt.title(\"Patient without cervical cancer\")\nsns.countplot(data=nca, x=\"behavior_personalHygine\")\nnca['behavior_personalHygine'].mean()","a95c79ff":"nca['behavior_personalHygine'].value_counts(normalize=True) * 100","acb613a5":"df['behavior_personalHygine'].value_counts()\nsize = [0] * len(df['behavior_personalHygine'])\ni = 0;\nfor x in df['behavior_eating']:\n    if df['ca_cervix'][i] == 1:\n        size[i] = len(df[df['behavior_personalHygine'] == x])*55;\n    else:\n        size[i] = len(df[df['behavior_personalHygine'] == x])*50;\n    i += 1;\n\nplt.scatter(x=df['behavior_personalHygine'],y=df['behavior_personalHygine'], c=df['ca_cervix'], cmap='Reds', s=size)\nplt.title(\"Personal Hygine behavior of patient\")","69c54393":"plt.xlabel(\"Behavior personal hygine\")\nplt.ylabel(\"Behavior eating\")\nplt.scatter(x=df['behavior_personalHygine'],y=df['behavior_eating'], c=df['ca_cervix'], cmap='Accent')\nplt.title(\"Behavior of patient\")","1e919554":"plt.xlabel(\"Behavior sexual risk\")\nplt.ylabel(\"Behavior eating\")\nplt.scatter(x=df['behavior_sexualRisk'],y=df['behavior_eating'], c=df['ca_cervix'], cmap='Accent')\nplt.title(\"Behavior of patient\")","07972d6f":"plt.xlabel(\"Behavior sexual risk\")\nplt.ylabel(\"Behavior personal hygine\")\nplt.scatter(x=df['behavior_sexualRisk'],y=df['behavior_personalHygine'], c=df['ca_cervix'], cmap='Accent')\nplt.title(\"Behavior of patient\")","2d9d9d9b":"from sklearn.datasets.samples_generator import make_blobs\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\n\nfeatures = list(df.columns)[:-2]\n### Get the features data\ndata = df[features]\nclustering_kmeans = KMeans(n_clusters=2)\ndata['clusters'] = clustering_kmeans.fit_predict(data)\nreduced_data = PCA().fit_transform(data)\nresults = pd.DataFrame(reduced_data,columns=['behavior_sexualRisk', 'behavior_eating', 'behavior_personalHygine', 'intention_aggregation', 'intention_commitment', 'attitude_consistency', 'attitude_spontaneity', 'norm_significantPerson', 'norm_fulfillment', 'perception_vulnerability', 'perception_severity', 'motivation_strength', 'motivation_willingness', 'socialSupport_emotionality', 'socialSupport_appreciation', 'socialSupport_instrumental', 'empowerment_knowledge', 'empowerment_abilities','pca19'])\n\nsns.scatterplot(x=\"behavior_sexualRisk\", y=\"behavior_eating\", hue=df['ca_cervix'], data=results)\nplt.title('K-means Clustering with 2 dimensions')\nplt.show()","41b51d2d":"sns.scatterplot(x=\"behavior_sexualRisk\", y=\"behavior_personalHygine\", hue=df['ca_cervix'], data=results)\nplt.title('K-means Clustering with 2 dimensions')\nplt.show()","3994da94":"sns.scatterplot(x=\"behavior_personalHygine\", y=\"behavior_eating\", hue=df['ca_cervix'], data=results)\nplt.title('K-means Clustering with 2 dimensions')\nplt.show()","73eefed9":"plt.title(\"Patient with cervical cancer\")\nsns.countplot(data=ca, x=\"intention_aggregation\")\nca['intention_aggregation'].mean()","ce30f357":"ca['intention_aggregation'].value_counts(normalize=True) * 100","453323b3":"plt.title(\"Patient without cervical cancer\")\nsns.countplot(data=nca, x=\"intention_aggregation\")\nnca['intention_aggregation'].mean()","fd0d835a":"nca['intention_aggregation'].value_counts(normalize=True) * 100","0eadd542":"df['intention_aggregation'].value_counts()\nsize = [0] * len(df['intention_aggregation'])\ni = 0;\nfor x in df['intention_aggregation']:\n    if df['ca_cervix'][i] == 1:\n        size[i] = len(df[df['intention_aggregation'] == x])*55;\n    else:\n        size[i] = len(df[df['intention_aggregation'] == x])*50;\n    i += 1;\n\nplt.scatter(x=df['intention_aggregation'],y=df['intention_aggregation'], c=df['ca_cervix'], cmap='Reds', s=size)\nplt.title(\"Aggregation of patient\")","654fb095":"sns.scatterplot(x=\"behavior_personalHygine\", y=\"behavior_eating\", hue=df['ca_cervix'], data=results)\nplt.title('K-means Clustering with 2 dimensions')\nplt.show()","9533ef1b":"plt.title(\"Patient with cervical cancer\")\nsns.countplot(data=ca, x=\"intention_commitment\")\nca['intention_commitment'].mean()","21dee311":"ca['intention_commitment'].value_counts(normalize=True) * 100","9d7ccf22":"plt.title(\"Patient without cervical cancer\")\nsns.countplot(data=nca, x=\"intention_commitment\")\nnca['intention_commitment'].mean()","bd876cad":"nca['intention_commitment'].value_counts(normalize=True) * 100","6425d407":"plt.title(\"Patient with cervical cancer\")\nsns.countplot(data=ca, x=\"attitude_consistency\")\nca['attitude_consistency'].mean()","0223a8d4":"ca['attitude_consistency'].value_counts(normalize=True) * 100","c53bc132":"plt.title(\"Patient without cervical cancer\")\nsns.countplot(data=nca, x=\"attitude_consistency\")\nnca['attitude_consistency'].mean()","a67ec7e3":"nca['attitude_consistency'].value_counts(normalize=True) * 100","56eb732f":"plt.title(\"Patient with cervical cancer\")\nsns.countplot(data=ca, x=\"attitude_spontaneity\")\nca['attitude_spontaneity'].mean()","09c56673":"ca['attitude_spontaneity'].value_counts(normalize=True) * 100","fa55f019":"plt.title(\"Patient without cervical cancer\")\nsns.countplot(data=nca, x=\"attitude_spontaneity\")\nnca['attitude_spontaneity'].mean()","5a8328eb":"nca['attitude_spontaneity'].value_counts(normalize=True) * 100","98c2a7f9":"plt.title(\"Patient with cervical cancer\")\nsns.countplot(data=ca, x=\"norm_significantPerson\")\nca['norm_significantPerson'].mean()","1d7692ed":"ca['norm_significantPerson'].value_counts(normalize=True) * 100","88543b25":"plt.title(\"Patient without cervical cancer\")\nsns.countplot(data=nca, x=\"norm_significantPerson\")\nnca['norm_significantPerson'].mean()","24f4570a":"nca['norm_significantPerson'].value_counts(normalize=True) * 100","c8372c7b":"plt.title(\"Patient with cervical cancer\")\nsns.countplot(data=ca, x=\"norm_fulfillment\")\nca['norm_fulfillment'].mean()","6f185a06":"ca['norm_fulfillment'].value_counts(normalize=True) * 100","9fd79890":"plt.title(\"Patient without cervical cancer\")\nsns.countplot(data=nca, x=\"norm_fulfillment\")\nnca['norm_fulfillment'].mean()","d1c653b7":"nca['norm_fulfillment'].value_counts(normalize=True) * 100","3783ab56":"\nplt.xlabel(\"Norm fulfillment\")\nplt.ylabel(\"Norm significant person\")\nplt.scatter(x=df['norm_fulfillment'],y=df['norm_significantPerson'], c=df['ca_cervix'], cmap='Accent')\nplt.title(\"Norm of patient\")","2403a7f2":"sns.scatterplot(x=\"norm_fulfillment\", y=\"norm_significantPerson\", hue=df['ca_cervix'], data=results)\nplt.title('K-means Clustering with 2 dimensions')\nplt.show()","acf76647":"plt.title(\"Patient with cervical cancer\")\nsns.countplot(data=ca, x=\"perception_vulnerability\")\nca['perception_vulnerability'].mean()","83c09229":"ca['perception_vulnerability'].value_counts(normalize=True) * 100","94a41f03":"plt.title(\"Patient without cervical cancer\")\nsns.countplot(data=nca, x=\"perception_vulnerability\")\nnca['perception_vulnerability'].mean()","c97e5354":"nca['perception_vulnerability'].value_counts(normalize=True) * 100","0b32e40a":"plt.title(\"Patient with cervical cancer\")\nsns.countplot(data=ca, x=\"perception_severity\")\nca['perception_severity'].mean()","893bbc6f":"ca['perception_severity'].value_counts(normalize=True) * 100","f4f300cd":"plt.title(\"Patient without cervical cancer\")\nsns.countplot(data=nca, x=\"perception_severity\")\nnca['perception_severity'].mean()","e5c175b7":"nca['perception_severity'].value_counts(normalize=True) * 100","649c8c35":"\nplt.xlabel(\"Perception severity\")\nplt.ylabel(\"Perception vulnerability\")\nplt.scatter(x=df['perception_severity'],y=df['perception_vulnerability'], c=df['ca_cervix'], cmap='Accent')\nplt.title(\"Perception of patient\")","b2f8b78b":"sns.scatterplot(x=\"perception_severity\", y=\"perception_vulnerability\", hue=df['ca_cervix'], data=results)\nplt.title('K-means Clustering with 2 dimensions')\nplt.show()","f4b5da3b":"plt.title(\"Patient with cervical cancer\")\nsns.countplot(data=ca, x=\"motivation_strength\")\nca['motivation_strength'].mean()","ea2d2c04":"ca['motivation_strength'].value_counts(normalize=True) * 100","0260fd6c":"plt.title(\"Patient without cervical cancer\")\nsns.countplot(data=nca, x=\"motivation_strength\")\nnca['motivation_strength'].mean()","601df1b0":"nca['motivation_strength'].value_counts(normalize=True) * 100","8ae75ba6":"plt.title(\"Patient with cervical cancer\")\nsns.countplot(data=ca, x=\"motivation_willingness\")\nca['motivation_willingness'].mean()","a45e444f":"ca['motivation_willingness'].value_counts(normalize=True) * 100","42d0ec25":"plt.title(\"Patient without cervical cancer\")\nsns.countplot(data=nca, x=\"motivation_willingness\")\nnca['motivation_willingness'].mean()","75edf80c":"nca['motivation_willingness'].value_counts(normalize=True) * 100","5cf1300e":"\nplt.xlabel(\"Motivation strength\")\nplt.ylabel(\"Motivation willingness\")\nplt.scatter(x=df['motivation_strength'],y=df['motivation_willingness'], c=df['ca_cervix'], cmap='Accent')\nplt.title(\"Motivation of patient\")","21705fcd":"plt.title(\"Patient with cervical cancer\")\nsns.countplot(data=ca, x=\"socialSupport_emotionality\")\nca['socialSupport_emotionality'].mean()","c0afb80c":"ca['socialSupport_emotionality'].value_counts(normalize=True) * 100","afce5389":"plt.title(\"Patient without cervical cancer\")\nsns.countplot(data=nca, x=\"socialSupport_emotionality\")\nnca['socialSupport_emotionality'].mean()","787671d6":"nca['socialSupport_emotionality'].value_counts(normalize=True) * 100","36ccfa88":"plt.title(\"Patient with cervical cancer\")\nsns.countplot(data=ca, x=\"socialSupport_appreciation\")\nca['socialSupport_emotionality'].mean()","be2210c7":"ca['socialSupport_appreciation'].value_counts(normalize=True) * 100","012a8d33":"plt.title(\"Patient without cervical cancer\")\nsns.countplot(data=nca, x=\"socialSupport_appreciation\")\nnca['socialSupport_emotionality'].mean()","07bd9f40":"nca['socialSupport_appreciation'].value_counts(normalize=True) * 100","594d1694":"\nplt.xlabel(\"Social Support emotionality\")\nplt.ylabel(\"Social Support appreciation\")\nplt.scatter(x=df['socialSupport_emotionality'],y=df['socialSupport_appreciation'], c=df['ca_cervix'], cmap='Accent')\nplt.title(\"Social Support of patient\")","ad11c786":"plt.title(\"Patient with cervical cancer\")\nsns.countplot(data=ca, x=\"socialSupport_instrumental\")\nca['socialSupport_instrumental'].mean()","0bc64ed0":"ca['socialSupport_instrumental'].value_counts(normalize=True) * 100","c92dda1b":"plt.title(\"Patient without cervical cancer\")\nsns.countplot(data=nca, x=\"socialSupport_instrumental\")\nnca['socialSupport_instrumental'].mean()","749bb938":"nca['socialSupport_instrumental'].value_counts(normalize=True) * 100","1fcd4553":"plt.title(\"Patient with cervical cancer\")\nsns.countplot(data=ca, x=\"empowerment_knowledge\")\nca['empowerment_knowledge'].mean()","1533b507":"ca['empowerment_knowledge'].value_counts(normalize=True) * 100","f13beadf":"plt.title(\"Patient without cervical cancer\")\nsns.countplot(data=nca, x=\"empowerment_knowledge\")\nnca['empowerment_knowledge'].mean()","84af2313":"nca['empowerment_knowledge'].value_counts(normalize=True) * 100","888eb02a":"plt.title(\"Patient with cervical cancer\")\nsns.countplot(data=ca, x=\"empowerment_abilities\")\nca['empowerment_abilities'].mean()","0f051800":"ca['empowerment_abilities'].value_counts(normalize=True) * 100","af5726bd":"plt.title(\"Patient without cervical cancer\")\nsns.countplot(data=nca, x=\"empowerment_abilities\")\nnca['empowerment_abilities'].mean()","75fac298":"nca['empowerment_abilities'].value_counts(normalize=True) * 100","f4e11c3c":"plt.xlabel(\"Empowerment knowledge\")\nplt.ylabel(\"Empowerment abilities\")\nplt.scatter(x=df['empowerment_knowledge'],y=df['empowerment_abilities'], c=df['ca_cervix'], cmap='Accent')\nplt.title(\"Empowerment of patient\")","99ecdb49":"plt.title(\"Patient with cervical cancer\")\nsns.countplot(data=ca, x=\"empowerment_desires\")\nca['empowerment_desires'].mean()","73a954c6":"ca['empowerment_desires'].value_counts(normalize=True) * 100","54ef9a38":"plt.title(\"Patient without cervical cancer\")\nsns.countplot(data=nca, x=\"empowerment_desires\")\nnca['empowerment_desires'].mean()","1a250dfd":"nca['empowerment_desires'].value_counts(normalize=True) * 100","dc558159":"plt.xlabel(\"Empowerment desires\")\nplt.ylabel(\"Empowerment abilities\")\nplt.scatter(x=df['empowerment_desires'],y=df['empowerment_abilities'], c=df['ca_cervix'], cmap='Accent')\nplt.title(\"Empowerment of patient\")","a0d49c98":"plt.xlabel(\"Empowerment knowledge\")\nplt.ylabel(\"Empowerment desires\")\nplt.scatter(x=df['empowerment_knowledge'],y=df['empowerment_desires'], c=df['ca_cervix'], cmap='Accent')\nplt.title(\"Empowerment of patient\")","e2c2229e":"record=[]\nrecord_list=[]\n\ndef behavior_sexualRisk(value):\n    return 1 if value == 10 else 0\n\ndef behavior_eating(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef behavior_personalHygine(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef intention_aggregation(value):\n    if 10 >= value >= 8:\n        return 2\n    elif 7 >= value >= 5:\n        return 1\n    return 0\n\ndef intention_commitment(value):\n    if 15 >= value >= 12:\n        return 1\n    return 0\n\ndef attitude_consistency(value):\n    if 10 >= value >= 8:\n        return 2\n    elif 7 >= value >= 5:\n        return 1\n    return 0\n\ndef attitude_spontaneity(value):\n    if 10 >= value >= 8:\n        return 1\n    return 0\n\ndef norm_significantPerson(value):\n    if 5 >= value >= 4:\n        return 1\n    return 0\n\ndef norm_fulfillment(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef perception_vulnerability(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef perception_severity(value):\n    if 10 >= value >= 8:\n        return 2\n    elif 7 >= value >= 5:\n        return 1\n    return 0\n\ndef motivation_strength(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef motivation_willingness(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef socialSupport_emotionality(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef socialSupport_appreciation(value):\n    if 10 >= value >= 8:\n        return 2\n    elif 7 >= value >= 5:\n        return 1\n    return 0\n\ndef socialSupport_instrumental(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef empowerment_knowledge(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef empowerment_abilities(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef empowerment_desires(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef ca_cervix(value):\n    return value\n\nswitcher = {\n    0: behavior_sexualRisk,\n    1: behavior_eating,\n    2: behavior_personalHygine,\n    3: intention_aggregation,\n    4: intention_commitment,\n    5: attitude_consistency,\n    6: attitude_spontaneity,\n    7: norm_significantPerson,\n    8: norm_fulfillment,\n    9: perception_vulnerability,\n    10: perception_severity,\n    11: motivation_strength,\n    12: motivation_willingness,\n    13: socialSupport_emotionality,\n    14: socialSupport_appreciation,\n    15: socialSupport_instrumental,\n    16: empowerment_knowledge,\n    17: empowerment_abilities,\n    18: empowerment_desires,\n    19: ca_cervix,\n}\ndef reduce_number_to_state(column, value):\n    func = switcher.get(column, value)\n    \n    return func(value)\n\nfor i in range(0, df.shape[0]):\n    for j in range(0, df.shape[1]):\n        record_list.append(reduce_number_to_state(j, df.values[i, j]))\n    record.append([(record_list[k]) for k in range(0, len(record_list))])\n    record_list = []","2f9f5d17":"record=[]\nrecord_list=[]\n\ndef behavior_sexualRisk(value):\n    return 1 if value == 10 else 0\n\ndef behavior_eating(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef behavior_personalHygine(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef intention_aggregation(value):\n    if 10 >= value >= 8:\n        return 2\n    elif 7 >= value >= 5:\n        return 1\n    return 0\n\ndef intention_commitment(value):\n    if 15 >= value >= 12:\n        return 1\n    return 0\n\ndef attitude_consistency(value):\n    if 10 >= value >= 8:\n        return 2\n    elif 7 >= value >= 5:\n        return 1\n    return 0\n\ndef attitude_spontaneity(value):\n    if 10 >= value >= 8:\n        return 1\n    return 0\n\ndef norm_significantPerson(value):\n    if 5 >= value >= 4:\n        return 1\n    return 0\n\ndef norm_fulfillment(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef perception_vulnerability(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef perception_severity(value):\n    if 10 >= value >= 8:\n        return 2\n    elif 7 >= value >= 5:\n        return 1\n    return 0\n\ndef motivation_strength(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef motivation_willingness(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef socialSupport_emotionality(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef socialSupport_appreciation(value):\n    if 10 >= value >= 8:\n        return 2\n    elif 7 >= value >= 5:\n        return 1\n    return 0\n\ndef socialSupport_instrumental(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef empowerment_knowledge(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef empowerment_abilities(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef empowerment_desires(value):\n    if 15 >= value >= 12:\n        return 2\n    elif 11 >= value >= 7:\n        return 1\n    return 0\n\ndef ca_cervix(value):\n    return value\n\nswitcher = {\n    0: behavior_sexualRisk,\n    1: behavior_eating,\n    2: behavior_personalHygine,\n    3: intention_aggregation,\n    4: intention_commitment,\n    5: attitude_consistency,\n    6: attitude_spontaneity,\n    7: norm_significantPerson,\n    8: norm_fulfillment,\n    9: perception_vulnerability,\n    10: perception_severity,\n    11: motivation_strength,\n    12: motivation_willingness,\n    13: socialSupport_emotionality,\n    14: socialSupport_appreciation,\n    15: socialSupport_instrumental,\n    16: empowerment_knowledge,\n    17: empowerment_abilities,\n    18: empowerment_desires,\n    19: ca_cervix,\n}\ndef reduce_number_to_state(column, value):\n    func = switcher.get(column, value)\n    \n    return func(value)\n\nfor i in range(0, df.shape[0]):\n    for j in range(0, df.shape[1]):\n        record_list.append(reduce_number_to_state(j, df.values[i, j]))\n    record.append([(record_list[k]) for k in range(0, len(record_list))])\n    record_list = []","b2b8efc1":"X = np.array(record)[:, :19] # Prepare datasets --> X = Independent Sets\nY = np.array(record)[:, 19] # --> Y = Dependent Sets\nprint(X)\nprint(Y)\n\n# setting the proportion of test data\ntest_proportion = [0.1, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50, 0.55]\naccuracy = []\n\nfor i in range(10):\n    X_data,Y_data,X_label,Y_label = train_test_split(X, Y, test_size = test_proportion[i], random_state = 42)\n    # Using decision tree for classification\n    clf = tree.DecisionTreeClassifier(criterion='entropy')\n    clf = clf.fit(X_data, X_label)\n    print(\"clf: \" + str(clf))\n    predictedY = clf.predict(Y_data)\n    accuracy.append(accuracy_score(Y_label, predictedY))","52ba8933":"# Visulaize the accuracy results\nplt.title('result(accuracy)')\nplt.xlabel('test proportion')\nplt.ylabel('accuracy')\nplt.plot(test_proportion, accuracy)\nplt.show()","47f313ec":"feature_names = [\n        'behavior_sexualRisk',\n        'behavior_eating',\n        'behavior_personalHygine',\n        'intention_aggregation',\n        'intention_commitment',\n        'attitude_consistency',\n        'attitude_spontaneity',\n        'norm_significantPerson',\n        'norm_fulfillment',\n        'perception_vulnerability',\n        'perception_severity',\n        'motivation_strength',\n        'motivation_willingness',\n        'socialSupport_emotionality',\n        'socialSupport_appreciation',\n        'socialSupport_instrumental',\n        'empowerment_knowledge',\n        'empowerment_abilities',\n        'empowerment_desires'\n    ]\n\nX_data,Y_data,X_label,Y_label = train_test_split(X, Y, test_size = 0.45, random_state = 42)\n# Using decision tree for classification\nclf = tree.DecisionTreeClassifier(criterion='entropy')\nclf = clf.fit(X_data, X_label)\n\nwith open(\".\/ID3.dot\", 'w') as f:\n    f = tree.export_graphviz(clf, feature_names = feature_names, out_file = f)\n","cc2ad785":"record2=[]\nrecord_list2=[]\n\ndef behavior_sexualRisk2(value):\n    return 1 if value == 10 else 0\n\ndef behavior_eating2(value):\n    if 15 >= value >= 7:\n        return 1\n    return 0\n\ndef behavior_personalHygine2(value):\n    if 15 >= value >= 7:\n        return 1\n    return 0\n\ndef intention_aggregation2(value):\n    if 10 >= value >= 5:\n        return 1\n    return 0\n\ndef intention_commitment2(value):\n    if 15 >= value >= 12:\n        return 1\n    return 0\n\ndef attitude_consistency2(value):\n    if 10 >= value >= 5:\n        return 1\n    return 0\n\ndef attitude_spontaneity2(value):\n    if 10 >= value >= 8:\n        return 1\n    return 0\n\ndef norm_significantPerson2(value):\n    if 5 >= value >= 4:\n        return 1\n    return 0\n\ndef norm_fulfillment2(value):\n    if 15 >= value >= 7:\n        return 1\n    return 0\n\ndef perception_vulnerability2(value):\n    if 15 >= value >= 7:\n        return 1\n    return 0\n\ndef perception_severity2(value):\n    if 10 >= value >= 5:\n        return 1\n    return 0\n\ndef motivation_strength2(value):\n    if 15 >= value >= 7:\n        return 1\n    return 0\n\ndef motivation_willingness2(value):\n    if 15 >= value >= 7:\n        return 1\n    return 0\n\ndef socialSupport_emotionality2(value):\n    if 15 >= value >= 7:\n        return 1\n    return 0\n\ndef socialSupport_appreciation2(value):\n    if 10 >= value >= 5:\n        return 1\n    return 0\n\ndef socialSupport_instrumental2(value):\n    if 15 >= value >= 7:\n        return 1\n    return 0\n\ndef empowerment_knowledge2(value):\n    if 15 >= value >= 7:\n        return 1\n    return 0\n\ndef empowerment_abilities2(value):\n    if 15 >= value >= 7:\n        return 1\n    return 0\n\ndef empowerment_desires2(value):\n    if 15 >= value >= 7:\n        return 1\n    return 0\n\ndef ca_cervix2(value):\n    return value\n\nswitcher2 = {\n    0: behavior_sexualRisk2,\n    1: behavior_eating2,\n    2: behavior_personalHygine2,\n    3: intention_aggregation2,\n    4: intention_commitment2,\n    5: attitude_consistency2,\n    6: attitude_spontaneity2,\n    7: norm_significantPerson2,\n    8: norm_fulfillment2,\n    9: perception_vulnerability2,\n    10: perception_severity2,\n    11: motivation_strength2,\n    12: motivation_willingness2,\n    13: socialSupport_emotionality2,\n    14: socialSupport_appreciation2,\n    15: socialSupport_instrumental2,\n    16: empowerment_knowledge2,\n    17: empowerment_abilities2,\n    18: empowerment_desires2,\n    19: ca_cervix2,\n}\ndef reduce_number_to_state2(column, value):\n    func2 = switcher2.get(column, value)\n    \n    return func2(value)\n\nfor i in range(0, df.shape[0]):\n    for j in range(0, df.shape[1]):\n        record_list2.append(reduce_number_to_state2(j, df.values[i, j]))\n    record2.append([(record_list2[k]) for k in range(0, len(record_list2))])\n    record_list2 = []","490738f0":"record2","3a2e3f09":"record_df=pd.DataFrame(record2)\nfrequent_itemsets = apriori(record_df, min_support=0.7, use_colnames=False)\nrules = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=1)\nrules.head()","acbcc9bf":"rules[ (rules['lift'] >= 1) &\n    (rules['confidence'] >= 0.9)]","df269dd4":"support=rules['support'].values\nconfidence=rules['confidence'].values\nlift=rules['lift'].values\nplt.scatter(support, confidence, alpha=0.5)\nplt.xlabel('support')\nplt.ylabel('confidence')\nplt.show()","27642514":"plt.scatter(support, lift, alpha=0.5)\nplt.xlabel('support')\nplt.ylabel('lift')\nplt.show()","7b3766b6":"fit = np.polyfit(lift, confidence, 1)\nfit_fn = np.poly1d(fit)\nplt.plot(lift, confidence, 'yo', lift, fit_fn(lift))\nplt.xlabel('lift')\nplt.ylabel('confidence')\nplt.show()","c878f4d4":"# Association Analysis\n## Apriori Algorithm\n### 1. One Hot Encoding data","12877431":"### 1. Aggregation\nThe tendency for animals to group together","78866bc4":"## 3. Attitude","cd0bbd04":"### Accuracy Representation","3557ae33":"### 1. Strenght","84ba2231":"### 1. Knowledge","acdcd16d":"## 2. Intention","f78b47a8":"# Classification with Iterative Dichotomiser 3 method (ID3)\n## Get Discrete Instances","270fb9d5":"## 4. Norm","34097ab0":"# Patient with Cervical Cancer","cec9e36a":"### Dataset Generation & Construct Decision Tree","496b955d":"### 2. Commitment","7705cb59":"# Compare patients with Cervical Cancer and patients who don't have it","5a0c7213":"### 1. Sexual Risk","7f4f0822":"### 2. Willingness","02f9406b":"## 7. Social Support","cb750014":"# Association Analysis\n## Apriori Algorithm\n\n### 1. One Hot Encoding data","a38c4dae":"### 3. Personal Hygine","4579f05e":"### 3. Instrumental","a9f45681":"### 1. Consistency\nConcerns the degree to which people's attitudes (opinions) predict their behavior (actions).","125cc626":"### 2. Appreciation","a4323d4b":"### 1. Emotionality","5cd38264":"### 1. Vulnerability","9a1c8c9d":"### 2. Eating","cd00f495":"### 2. Abilities","7713d3cf":"### 2. Run the apriori algorithm and get the association rules","0e872b7f":"# Cervical Cancer Behavior Risk Data Set\nhttps:\/\/archive.ics.uci.edu\/ml\/datasets\/Cervical+Cancer+Behavior+Risk","860cb373":"### 1. Significant Person","f3395e1b":"## 5. Perception","73ea25f8":"### Export in .dot file for Tree Visualization","3d2c8ee2":"## 6. Motivation","7f3a4128":"### 2. Spontaneity","d965ae3d":"## 8.Empowerment","16b6fc6a":"### 3. Desires","a840645e":"# Patient who don't have Cervical Cancer","a572236c":"### 2. Severity","75a45def":"### 2. Fulfillment","400bb836":"## 1. Behavior"}}