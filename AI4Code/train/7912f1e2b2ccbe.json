{"cell_type":{"7042ddb0":"code","e8cc87e2":"code","1bac6f67":"code","4ef9e18b":"code","4e373c17":"code","47a56ab1":"code","79f63054":"code","35defb01":"code","5d83f60d":"code","a8b54544":"code","ed680a7e":"code","88a3b4d7":"code","294ceff0":"markdown"},"source":{"7042ddb0":"#Library import\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","e8cc87e2":"# Loading Dataset\n\ndataset = pd.read_csv('..\/input\/churn-predictions-personal\/Churn_Predictions.csv')\ndataset.head()","1bac6f67":"# Splitting datset to X and y axis\n\nX=dataset.iloc[: , 3:13].values\ny=dataset.iloc[: ,-1].values","4ef9e18b":"# Check data on X axis\n\nX","4e373c17":"# Check data on y axis\n\ny","47a56ab1":"# Handling Categorical data\n\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\n\nlabelenc_1= LabelEncoder()\nX[:,2]= labelenc_1.fit_transform(X[:,2])\nct=ColumnTransformer(transformers=[('encoder',OneHotEncoder(),[1])],remainder='passthrough')\nX=np.array(ct.fit_transform(X))\nprint(X)","79f63054":"# Dividing data into train and test dataset\n\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2, random_state=0)","35defb01":"#Feature Scaling\n\nfrom sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)","5d83f60d":"# Adding layers and activation function\n\nimport tensorflow as tf\nann=tf.keras.models.Sequential()\n\nann.add(tf.keras.layers.Dense(units=6,activation='relu'))\nann.add(tf.keras.layers.Dense(units=6,activation='relu'))\nann.add(tf.keras.layers.Dense(units=1,activation='sigmoid'))\n\n#Compiling\nann.compile(optimizer='adam', loss='binary_crossentropy',metrics=['accuracy'])","a8b54544":"# Training the model\n\nann.fit(X_train,y_train,batch_size=32,epochs=100)","ed680a7e":"# Prediction on Test data\n\ny_pred = ann.predict(X_test)\ny_pred = (y_pred > 0.5)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","88a3b4d7":"# Calculating quality for model\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","294ceff0":"#  Prediction on Chrun Modelling using ANN"}}