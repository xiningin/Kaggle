{"cell_type":{"86e95286":"code","24659134":"code","9271ff32":"code","3b984d94":"code","e73c53db":"code","e82973c1":"code","e7465e7e":"code","5517f485":"code","d6b55987":"code","d1c4f64e":"markdown","a68370d4":"markdown","f998d763":"markdown"},"source":{"86e95286":"import numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom numpy import linalg\r\nimport sys\r\nimport matplotlib.animation as animation\r\nfrom IPython.display import HTML\r\n\r\nimport cv2","24659134":"def svd(A, tol=1e-5):\r\n    #singular values and right singular vectors coming from eigenvalues and eigenvectors of A' x A\r\n    eigs, V = linalg.eig(A.T.dot(A))\r\n\r\n    #singular values are the square root of the eigenvalues\r\n    sing_vals = np.sqrt(eigs)\r\n\r\n    #sort both sigular values and right singular vector\r\n    idx = np.argsort(sing_vals)\r\n\r\n    sing_vals = sing_vals[idx[::-1]]\r\n    V = V[:, idx[::-1]]\r\n\r\n    #remove zero singular values below tol\r\n    sing_vals_trunc = sing_vals[sing_vals>tol]\r\n    V = V[:, sing_vals>tol]\r\n\r\n    #is not necessary to store the entire sigma matrix, so only the diagonal is returned\r\n    sigma = sing_vals_trunc\r\n\r\n    #evaluate U matrix\r\n    U = A @ V \/sing_vals_trunc\r\n    \r\n    return U.real, sigma.real, V.T.real","9271ff32":"def truncate(U, S, V, k):\r\n    U_trunc = U[:, :k]\r\n    S_trunc = S[:k]\r\n    V_trunc = V[:k, :]\r\n    return U_trunc, S_trunc, V_trunc","3b984d94":"from sklearn.datasets import load_iris\r\nimport seaborn as sns\r\nimport pandas as pd\r\n\r\niris = load_iris()\r\niris.keys()","e73c53db":"data = pd.DataFrame(iris.data)\r\nfeature_names = iris[\"feature_names\"]\r\ndata.columns = feature_names\r\ndata[\"labels\"] = iris.target","e82973c1":"def custom_pairplot(data, feature_names, labels):\r\n    plt.figure(figsize=(10, 10))\r\n    plt.subplots_adjust(left = 0, right=1.5, bottom=0, top=1.5)\r\n    n_features = len(feature_names)\r\n    \r\n    for i in range(len(feature_names)):\r\n        for j in range(len(feature_names)):\r\n            plt.subplot(n_features, n_features, i*n_features+j+1)\r\n            if i==j:\r\n                sns.violinplot(data=data, x=labels, y=feature_names[i])\r\n            else:\r\n                plt.scatter(data[feature_names[i]], data[feature_names[j]], c=data[labels])\r\n                plt.xlabel(feature_names[i])\r\n                plt.ylabel(feature_names[j])","e7465e7e":"custom_pairplot(data, feature_names=feature_names, labels=\"labels\")","5517f485":"k = 2\r\n\r\nA = data[feature_names].values\r\n\r\nU, S, Vt = svd(A)\r\nU_trunc, S_trunc, Vt_trunc = truncate(U, S, Vt, k)\r\n\r\ntrunc_A = U_trunc @ np.diag(S_trunc)\r\nreduced_data = pd.DataFrame(trunc_A)\r\nplt.figure(figsize=(5, 5))\r\nplt.barh(feature_names[::-1], S[::-1])\r\nplt.title(f\"Singular values, (first {k} are kept)\")\r\nplt.gca().xaxis.grid(True)","d6b55987":"plt.figure(figsize=(5, 5))\r\nplt.scatter(reduced_data[0], reduced_data[1], c = iris.target)\r\nplt.xlabel(\"First feature\")\r\nplt.ylabel(\"Second feature\");","d1c4f64e":"# SVD decomposition and applications\n\nSVD adalah faktorisasi yang digunakan untuk menyelesaikan persamaan linear, pengurangan dimensi, kompresi data dan sebagainya.<br>\nIni didasarkan pada dekomposisi berikut:\n\n$$A = U\\Sigma V^*$$\n\nDiamana matriks A *(m x n)* dapat difaktorkan menjadi 3 matriks:<br>\n**U** *(m x m)* Matriks Kesatuan <br>\n**\u03a3** *(m x n)* Matriks Diagonal Persegi <br>\n**V** *(n x n)* Matriks Kesatuan <br>\n\nKolom **V** adalah vektor eigen dari **A\\*A** yang disebut vektor singular<br>\nKolom **U** adalah vektor eigen dari **AA*** yang disebut vektor singular<br>\nElemen pada diagonal **\u03a3** adalah nilai eigen tidak nol terurut dari **A*A** and **AA*** yang disebut *nilai singular*<br>","a68370d4":"# SVD for dimensionality reduction\nKita dapat melihat bagaimana dekomposisi svd berlaku untuk dimensionality reduction, dalam contoh ini, menggunakan **set data Iris** yang tersedia langsung dari library *sklearn* ","f998d763":"NAMA : Khadijah Kibtiyah<br>\r\nNIM  : 20190040100\r\n<br><br>\r\n#TUGAS 2 MACHINE LEARNING \r\n\r\n\r\n\r\n"}}