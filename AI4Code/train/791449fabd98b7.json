{"cell_type":{"b31d95f4":"code","0f967162":"code","d4a67125":"code","8a32ae4f":"code","35ff8d6f":"code","41d65fd1":"code","37daa9f6":"code","36d1c800":"code","64f1428d":"code","9117f473":"markdown"},"source":{"b31d95f4":"import tensorflow as tf\nprint(tf.__version__)","0f967162":"import numpy as np\nimport matplotlib.pyplot as plt\ndef plot_series(time, series, format=\"-\", start=0, end=None):\n    plt.plot(time[start:end], series[start:end], format)\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"Value\")\n    plt.grid(True)","d4a67125":"!wget --no-check-certificate \\\n    https:\/\/storage.googleapis.com\/laurencemoroney-blog.appspot.com\/Sunspots.csv \\\n    -O \/tmp\/sunspots.csv","8a32ae4f":"import csv\ntime_step = []\nsunspots = []\n\nwith open('..\/input\/sunspots\/Sunspots.csv') as csvfile:\n    reader = csv.reader(csvfile, delimiter=',')\n    next(reader)\n    for row in reader:\n        sunspots.append(float(row[2]))\n        time_step.append(int(row[0]))\n\nseries = np.array(sunspots)\ntime = np.array(time_step)\nplt.figure(figsize=(10, 6))\nplot_series(time, series)","35ff8d6f":"split_time = 3000\ntime_train = time[:split_time]\nx_train = series[:split_time]\ntime_valid = time[split_time:]\nx_valid = series[split_time:]\n\nwindow_size = 60\nbatch_size = 32\nshuffle_buffer_size = 1000\n","41d65fd1":"def windowed_dataset(series, window_size, batch_size, shuffle_buffer):\n    dataset = tf.data.Dataset.from_tensor_slices(series)\n    dataset = dataset.window(window_size + 1, shift=1, drop_remainder=True)\n    dataset = dataset.flat_map(lambda window: window.batch(window_size + 1))\n    dataset = dataset.shuffle(shuffle_buffer).map(lambda window: (window[:-1], window[-1]))\n    dataset = dataset.batch(batch_size).prefetch(1)\n    return dataset","37daa9f6":"dataset = windowed_dataset(x_train, window_size, batch_size, shuffle_buffer_size)\n\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(20, input_shape=[window_size], activation=\"relu\"), \n    tf.keras.layers.Dense(10, activation=\"relu\"),\n    tf.keras.layers.Dense(1)\n])\n\nmodel.compile(loss=\"mse\", optimizer=tf.keras.optimizers.SGD(lr=1e-7, momentum=0.9))\nmodel.fit(dataset,epochs=100,verbose=0)\n","36d1c800":"forecast=[]\nfor time in range(len(series) - window_size):\n    forecast.append(model.predict(series[time:time + window_size][np.newaxis]))\n\nforecast = forecast[split_time-window_size:]\nresults = np.array(forecast)[:, 0, 0]\n\n\nplt.figure(figsize=(10, 6))\n\nplot_series(time_valid, x_valid)\nplot_series(time_valid, results)","64f1428d":"tf.keras.metrics.mean_absolute_error(x_valid, results).numpy()","9117f473":"PART 01: different time series attributes https:\/\/www.kaggle.com\/salazarslytherin\/time-series-01-different-ts-attributes\n\nPART 02: naive forecasting https:\/\/www.kaggle.com\/salazarslytherin\/time-series-02-naive-forecasting\n\nPART 03: preparing features labels https:\/\/www.kaggle.com\/salazarslytherin\/time-series-03-preparing-features-labels\n\nPART 04: linear regression https:\/\/www.kaggle.com\/salazarslytherin\/time-series-04-linear-regression\n\nPART 05: DNN with callbacks https:\/\/www.kaggle.com\/salazarslytherin\/time-series-05-dnn-with-callbacks\n\nPART 06: RNN https:\/\/www.kaggle.com\/salazarslytherin\/time-series-06-rnn\n\nPART 07: LSTM https:\/\/www.kaggle.com\/salazarslytherin\/time-series-07-lstm\n\nPART 08: CNN + LSTM https:\/\/www.kaggle.com\/salazarslytherin\/time-series-08-cnn-lstm\n\nPART 09: Sunspots dataset CNN https:\/\/www.kaggle.com\/salazarslytherin\/time-series-09-sunspots-dataset-cnn\n\nPART 10: Sunspots dataset DNN https:\/\/www.kaggle.com\/salazarslytherin\/time-series-10-sunspots-dataset-dnn\/edit"}}