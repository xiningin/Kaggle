{"cell_type":{"eef1b5c8":"code","46c27b66":"code","8d8adcf7":"code","8955dc9c":"code","f2bf8e0d":"code","682776a7":"code","1c116bb5":"code","3a1e7f53":"code","3089046c":"code","758601a5":"code","d7df6c11":"code","645f523c":"code","dc0e1995":"code","9670ad2c":"code","bd6eb5aa":"code","910a6c54":"code","73845159":"code","0f49c611":"code","9218ecaf":"code","df912014":"code","cdc4ed31":"code","22924428":"code","6e77585e":"code","d842205a":"code","1511bbff":"code","f63d97b8":"code","7ce78f41":"code","e98207a9":"code","c057c848":"code","57fbd02f":"code","ff3aa1af":"code","81ab57f4":"code","f3b86faa":"code","cb4a978f":"code","9804d089":"code","bd97a235":"code","2fc025dc":"code","bc5c8f1d":"code","66abe09b":"code","e3f974c6":"code","9f6b9134":"code","bfa5cdb0":"code","d7ff47ce":"code","5a3ac310":"code","db042ada":"code","447d62c3":"code","73d97a92":"code","b2fea293":"code","8e136584":"code","922eec2d":"code","08549ce0":"code","588e94e0":"code","23ded724":"code","30a46b5b":"code","8bdf5a32":"code","28921837":"code","89f8374e":"code","7d95f69b":"code","429912f9":"code","717222e2":"code","6ffba5ae":"code","7df7004c":"code","a0ce5936":"code","233eb766":"code","52a147ae":"code","a62d24b0":"code","3152c490":"code","b59fbac6":"code","3b7f003a":"code","5e24cc56":"code","b57805d5":"code","9ea0fb94":"code","94a7b2d6":"code","24eb98b7":"code","da11f242":"code","5b8ab8ce":"code","294c115e":"code","1d0dfc50":"code","51d3beab":"code","28145d40":"code","c17d422a":"code","a96378ae":"code","a816f108":"code","afd7bfba":"code","48876752":"code","c0d28cf7":"code","07b97eb2":"code","5faf89af":"code","a78583a8":"code","6990d69f":"code","95ab397d":"code","293b8bf0":"code","0b05eb2c":"code","c23298ae":"code","aaa25528":"code","a6364134":"code","9704c9d8":"code","acdc3d9b":"code","f95149c5":"code","70074f15":"code","b7561753":"code","c4936279":"code","73d75c42":"code","8e1c735b":"code","405f7e1d":"code","79415ca0":"code","46aa5593":"code","bb7b4b7d":"code","4e17c468":"code","e8f68529":"code","749047f6":"code","698cd4e4":"code","9f640a6a":"code","35f36659":"code","ac3b338e":"code","594fad24":"code","e706812c":"code","be747da8":"code","a4b8e611":"code","c151bc19":"code","4fd20bf8":"code","fcaccd8a":"code","ecacee58":"code","77ef53f0":"code","1de1e229":"markdown","4ef92522":"markdown","edc5d63c":"markdown","5b5bae15":"markdown","774f2317":"markdown","e3a21ab0":"markdown","eb675e6b":"markdown","2a9e885d":"markdown","78451adc":"markdown","e7532b90":"markdown","7cc6cf29":"markdown","b6773fd4":"markdown","e6dde174":"markdown","7b515ea6":"markdown","5a04ed03":"markdown","d476e7f1":"markdown","a52df13c":"markdown","f61e8cc8":"markdown","32fe12dd":"markdown","cb17fb71":"markdown","fe94652f":"markdown","adea7f62":"markdown","e30a0b7f":"markdown","6bac746a":"markdown","b3620adb":"markdown","f8bd3816":"markdown","ecba8f8e":"markdown","f9ef5650":"markdown","4606b559":"markdown","e69ced10":"markdown","0fb3098c":"markdown","00b96568":"markdown","761a721b":"markdown","e56753e7":"markdown","9377daed":"markdown","81324b5f":"markdown","b01ad5ad":"markdown","360937a1":"markdown","ee4ecfb6":"markdown","91c76c04":"markdown","61037919":"markdown","f450fa6e":"markdown","2b90ab6e":"markdown"},"source":{"eef1b5c8":"import numpy as np \nimport pandas as pd \nimport json\nimport gc\nimport time\nimport pickle\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.metrics import confusion_matrix,roc_curve,roc_auc_score,precision_recall_curve,f1_score,auc,average_precision_score\nimport xgboost as xgb\nimport statsmodels.api as sm\nimport re","46c27b66":"start = time.time()\ndata_2005 = pd.read_csv('..\/input\/mortality\/2005_data.csv')\ndata_2005.dropna(how='any',axis=1,inplace=True)\ndata_2006 = pd.read_csv('..\/input\/mortality\/2006_data.csv')\ndata_2006.dropna(how='any',axis=1,inplace=True)\ndata_2007 = pd.read_csv('..\/input\/mortality\/2007_data.csv')\ndata_2007.dropna(how='any',axis=1,inplace=True)\ndata_2008 = pd.read_csv('..\/input\/mortality\/2008_data.csv')\ndata_2008.dropna(how='any',axis=1,inplace=True)\ndata_2009 = pd.read_csv('..\/input\/mortality\/2009_data.csv')\ndata_2009.dropna(how='any',axis=1,inplace=True)\ndata_2010 = pd.read_csv('..\/input\/mortality\/2010_data.csv')\ndata_2010.dropna(how='any',axis=1,inplace=True)\ndata_2011 = pd.read_csv('..\/input\/mortality\/2011_data.csv')\ndata_2011.dropna(how='any',axis=1,inplace=True)\ndata_2012 = pd.read_csv('..\/input\/mortality\/2012_data.csv')\ndata_2012.dropna(how='any',axis=1,inplace=True)\ndata_2013= pd.read_csv('..\/input\/mortality\/2013_data.csv')\ndata_2013.dropna(how='any',axis=1,inplace=True)\ndata_2014 = pd.read_csv('..\/input\/mortality\/2014_data.csv')\ndata_2014.dropna(how='any',axis=1,inplace=True)\ndata_2015 = pd.read_csv('..\/input\/mortality\/2015_data.csv')\ndata_2015.dropna(how='any',axis=1,inplace=True)\nprint(time.time()-start)","8d8adcf7":"def read_json(path):\n    with open(path,'r', encoding = 'utf-8') as f:\n        definition = json.load(f)\n    return definition","8955dc9c":"definition = read_json('..\/input\/mortality\/2005_codes.json')\ndefinition['place_of_death_and_decedents_status']['1'] = 'Hospital, Clinic or Medical Center'","f2bf8e0d":"data_2013.columns","682776a7":"features = ['resident_status','sex','education_reporting_flag','month_of_death','detail_age','place_of_death_and_decedents_status','marital_status',\n            'autopsy','number_of_record_axis_conditions','race_recode_3','39_cause_recode','injury_at_work']\ndata_for_injury = data_2005[features]\nfor data in [data_2006,data_2007,data_2008,data_2009,data_2010,data_2011,data_2012,data_2013,data_2014,data_2015]:\n    data = data[features]\n    data_for_injury = pd.concat([data_for_injury,data],axis=0)","1c116bb5":"del data_2005\ndel data_2006\ndel data_2007\ndel data_2008\ndel data_2009\ndel data_2010\ndel data_2011\ndel data_2012\ndel data_2013\ndel data_2014\ndel data_2015\ngc.collect()","3a1e7f53":"reconstr_cause_definition = {}\nneoplasm = list(range(4,16))\nheart = list(range(19,23))\nfor i in range(1,43):\n    if i in neoplasm:\n        reconstr_cause_definition[i] = 'neoplasm'\n    elif i in heart:\n        reconstr_cause_definition[i] = 'heart'\n    elif i in [38,39]:\n        reconstr_cause_definition[i] = 'accident'\n    else:\n        reconstr_cause_definition[i] = 'others'","3089046c":"data_for_injury['is_resident'] = data_for_injury['resident_status'].apply(lambda x: 'resident' if x==1 or x==4 else 'non-resident')\ndata_for_injury['reconstr_cause_definition_1'] = data_for_injury['39_cause_recode'].apply(lambda x: reconstr_cause_definition[x])","758601a5":"data_for_injury.sample(2)","d7df6c11":"data_for_injury = data_for_injury[data_for_injury.reconstr_cause_definition_1!='others']","645f523c":"data_for_injury = data_for_injury[data_for_injury.injury_at_work!='U']","dc0e1995":"data_for_injury = data_for_injury[data_for_injury.autopsy!='U']","9670ad2c":"data_for_injury = data_for_injury[data_for_injury.marital_status!='U']","bd6eb5aa":"data_for_injury['place_of_death_and_decedents_status'] = data_for_injury['place_of_death_and_decedents_status'].apply(lambda x: definition['place_of_death_and_decedents_status'][str(x)])","910a6c54":"data_for_injury['place_of_death_and_decedents_status'].value_counts()","73845159":"data_for_injury = data_for_injury[data_for_injury.place_of_death_and_decedents_status!='Place of death unknown']","0f49c611":"def combine_place(place):\n    if place == 'Nursing home\/long term care' or place == 'Hospice facility' or place=='Other':\n        return 'Other'\n    else:\n        return place","9218ecaf":"data_for_injury['place_of_death_and_decedents_status'] = data_for_injury['place_of_death_and_decedents_status'].apply(lambda x: combine_place(x))","df912014":"#fig,ax = plt.subplots(figsize=(8,5))\n#ax.boxplot(data_for_injury['detail_age'])","cdc4ed31":"data_for_injury = data_for_injury[data_for_injury.detail_age!=999]","22924428":"max_age = np.max(data_for_injury['detail_age'])\nmin_age = np.min(data_for_injury['detail_age'])\ndata_for_injury['detail_age'] = data_for_injury['detail_age'].apply(lambda x: (x-min_age)\/(max_age-min_age))","6e77585e":"data_for_injury.sample(2)","d842205a":"data_for_injury['is_resident'] = data_for_injury['is_resident'].apply(lambda x: 1 if x=='resident' else 0)","1511bbff":"data_for_injury['sex'] = data_for_injury['sex'].apply(lambda x: 1 if x=='M' else 0)","f63d97b8":"def month_to_season(month):\n    if month in [12,1,2]:\n        return 'Winter'\n    elif month in [3,4,5]:\n        return 'Spring'\n    elif month in [6,7,8]:\n        return 'Summer'\n    else:\n        return 'Fall'","7ce78f41":"data_for_injury['season'] = data_for_injury['month_of_death'].apply(lambda x: month_to_season(x))","e98207a9":"data_for_injury['autopsy'] = data_for_injury['autopsy'].apply(lambda x: 1 if x=='Y' else 0)","c057c848":"data_for_injury['injury_at_work'] = data_for_injury['injury_at_work'].apply(lambda x: 1 if x=='Y' else 0)","57fbd02f":"data_for_injury['education_reporting_flag'] = data_for_injury['education_reporting_flag'].apply(lambda x: 'not educated' if x==2 else 'educated')\ndata_for_injury['education_reporting_flag'] = data_for_injury['education_reporting_flag'].apply(lambda x: 1 if x=='educated' else 0)","ff3aa1af":"data_for_injury.education_reporting_flag.value_counts()","81ab57f4":"data_for_injury.sample(2)","f3b86faa":"marital_onehot = pd.get_dummies(data_for_injury['marital_status'],prefix='marital_status')","cb4a978f":"data_for_injury = pd.concat([data_for_injury,marital_onehot],axis=1)","9804d089":"data_for_injury['race_recode_3_str'] = data_for_injury['race_recode_3'].apply(lambda x:definition['race_recode_3'][str(x)])\nrace_onehot = pd.get_dummies(data_for_injury['race_recode_3_str'],prefix='race')\ndata_for_injury = pd.concat([data_for_injury,race_onehot],axis=1)\n#data_for_injury.drop('race_recode_3_str',axis=1,inplace=True)","bd97a235":"#place_recode = {'Hospital, Clinic or Medical Center':'1','Decedent\u2019s home':'2','Other':'3'}\n#data_for_injury['place_of_death_and_decedents_status'] = data_for_injury['place_of_death_and_decedents_status'].apply(lambda x: place_recode[x])","2fc025dc":"place_onehot = pd.get_dummies(data_for_injury['place_of_death_and_decedents_status'],prefix='place')\ndata_for_injury = pd.concat([data_for_injury,place_onehot],axis=1)","bc5c8f1d":"#season_recode = {'Spring':'1','Summer':'2','Fall':'3','Winter':'4'}\n#data_for_injury['season'] = data_for_injury['season'].apply(lambda x: season_recode[x])\nseason_onehot = pd.get_dummies(data_for_injury['season'],prefix='season')\ndata_for_injury = pd.concat([data_for_injury,season_onehot],axis=1)","66abe09b":"#cause_recode = {'accident':'1','heart':'2','neoplasm':'3'}\n#data_for_injury['reconstr_cause_definition_1'] = data_for_injury['reconstr_cause_definition_1'].apply(lambda x: cause_recode[x])","e3f974c6":"cause_onehot = pd.get_dummies(data_for_injury['reconstr_cause_definition_1'], prefix='cause')\ndata_for_injury = pd.concat([data_for_injury,cause_onehot],axis=1)","9f6b9134":"data_for_injury.sample(2)","bfa5cdb0":"data_for_injury.columns","d7ff47ce":"print(\"memory usage of dataframe 'data_for_injury' is %s MB\" % (data_for_injury.memory_usage().sum()\/1024\/1024))","5a3ac310":"data_for_injury.to_pickle('training_for_injury.pkl')","db042ada":"sex_0 = data_for_injury[data_for_injury.sex==0]['injury_at_work'].value_counts()\nsex_1 = data_for_injury[data_for_injury.sex==1]['injury_at_work'].value_counts()\nsex_group = pd.concat([sex_0,sex_1],axis=1)\nsex_group.columns = ['female','male']\nsex_group = sex_group.T\ngender = ['female','male']\ninjury = [sex_group.loc['female',1],sex_group.loc['male',1]]\nno_injury = [sex_group.loc['female',0],sex_group.loc['male',0]]","447d62c3":"fig,ax = plt.subplots(figsize=(8,5))\nax.bar(gender, injury, color='yellow',width = 0.4,alpha=0.8,label='get_injury_at_work')\nax.bar(gender, no_injury, bottom=injury, color='grey',width = 0.4,alpha=0.6, label='total')\nfor x,y1,y2 in zip(gender,injury,no_injury):\n    plt.text(x,y1+0.05,s='%s' % round(y1\/(y1+y2)*100,2) +'%',ha='center',va='bottom',fontsize=20)\nplt.xticks(fontsize=16)\nax.set_title('Distribution of Injury_at_work in Different Gender',fontsize=16)\nax.legend()","73d97a92":"all_status = ['D','M','S','W']\nfor status in all_status:\n    status_chosen = data_for_injury[data_for_injury.marital_status==status]['injury_at_work'].value_counts()\n    if status == all_status[0]:\n        status_group = status_chosen\n    else:\n        status_group = pd.concat([status_group,status_chosen],axis=1)\nstatus_group.columns = all_status\nstatus_group = status_group.T\ninjury = [status_group.loc['D',1],status_group.loc['M',1],status_group.loc['S',1],status_group.loc['W',1]]\nno_injury = [status_group.loc['D',0],status_group.loc['M',0],status_group.loc['S',0],status_group.loc['W',0]]","b2fea293":"fig,ax = plt.subplots(figsize=(8,5))\nax.bar(all_status, injury, color='blue',width = 0.6, alpha=0.8, label='get_injury_at_work')\nax.bar(all_status, no_injury, bottom=injury, color='grey',width=0.6, alpha=0.6, label='total')\nfor x,y1,y2 in zip(all_status,injury,no_injury):\n    plt.text(x,y1+0.05,s='%s' % round(y1\/(y1+y2)*100,2) +'%',ha='center',va='bottom',fontsize=20)\nplt.xticks(fontsize=16)\nax.set_title('Distribution of Injury_at_work in Different Marital Status',fontsize=16)\nax.legend()","8e136584":"all_causes = ['accident','heart','neoplasm']\nfor cause in all_causes:\n    cause_chosen = data_for_injury[data_for_injury.reconstr_cause_definition_1==cause]['injury_at_work'].value_counts()\n    if cause == all_causes[0]:\n        cause_group = cause_chosen\n    else:\n        cause_group = pd.concat([cause_group,cause_chosen],axis=1)\ncause_group.columns = all_causes\ncause_group = cause_group.T\ninjury = [cause_group.loc['accident',1],cause_group.loc['heart',1],cause_group.loc['neoplasm',1]]\nno_injury = [cause_group.loc['accident',0],cause_group.loc['heart',0],cause_group.loc['neoplasm',0]]","922eec2d":"injury,no_injury","08549ce0":"fig,ax = plt.subplots(figsize=(8,5))\nax.bar(all_causes, injury, color='blue',width = 0.6, alpha=0.8, label='get_injury_at_work')\nax.bar(all_causes, no_injury, bottom=injury, color='grey',width=0.6, alpha=0.6, label='total')\nfor x,y1,y2 in zip(all_causes,injury,no_injury):\n    plt.text(x,y1+0.05,s='%s' % round(y1\/(y1+y2)*100,2) +'%',ha='center',va='bottom',fontsize=20)\nplt.xticks(fontsize=16)\nax.set_title('Distribution of Injury_at_work in Different Causes',fontsize=16)\nax.legend()","588e94e0":"data_for_injury_2 = pd.read_pickle('..\/input\/training-1\/training_for_injury.pkl')","23ded724":"data_for_injury_2.reconstr_cause_definition_1.value_counts()","30a46b5b":"data_for_injury.columns","8bdf5a32":"train_features_1 = ['is_resident', 'sex', 'detail_age',\n         'autopsy','number_of_record_axis_conditions', \n         'marital_status_D','marital_status_M', 'marital_status_S',\n         'season_Spring', 'season_Summer','season_Fall',\n         'race_Black','race_White',\n         'place_Decedent\u2019s home','place_Hospital, Clinic or Medical Center',  \n         'cause_accident', 'cause_heart']","28921837":"y = data_for_injury['injury_at_work']","89f8374e":"X = data_for_injury[train_features_1]\ntrain_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.2, random_state=42)","7d95f69b":"ac_train_X = sm.add_constant(train_X)\nglm_lr = sm.Logit(train_y,ac_train_X)\nglm_result = glm_lr.fit(method='newton',maxiter=200)","429912f9":"glm_result.summary()","717222e2":"train_features_tmp = ['is_resident', 'sex', 'detail_age',\n         'autopsy','number_of_record_axis_conditions', \n         'marital_status_D','marital_status_M', 'marital_status_S',\n         'season_Summer','season_Fall','season_Winter',\n         'race_Black','race_White',\n         'place_Decedent\u2019s home','place_Hospital, Clinic or Medical Center',  \n         'cause_accident', 'cause_heart']","6ffba5ae":"X = data_for_injury[train_features_tmp]\ntrain_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.2, random_state=42)","7df7004c":"ac_train_X = sm.add_constant(train_X)\nglm_lr = sm.Logit(train_y,ac_train_X)\nglm_result = glm_lr.fit(method='newton',maxiter=200)","a0ce5936":"glm_result.summary()","233eb766":"glm_pred_y = np.round(glm_result.predict(sm.add_constant(test_X)))","52a147ae":"glm_cm = confusion_matrix(test_y,glm_pred_y)","a62d24b0":"def plot_cm(confusion_matrix):\n    #percent_cm = np.empty((2,2))\n    #for i in range(confusion_matrix.shape[0]):\n    #    percent_cm[i,:] = confusion_matrix[i,:]\/np.sum(confusion_matrix,axis=1)[i] \n    fig,ax = plt.subplots(figsize=(8,5))\n    sns.heatmap(confusion_matrix, ax=ax, annot=True, fmt='d',annot_kws={'size':16},cmap='Blues')\n    ax.set_xlabel('Predict',fontsize=16)\n    ax.set_ylabel('True',fontsize=16)","3152c490":"plot_cm(glm_cm)","b59fbac6":"train_features_revised = ['is_resident', 'sex', 'detail_age',\n         'autopsy','number_of_record_axis_conditions', \n         'marital_status_D','marital_status_M', 'marital_status_S',\n         'season_Summer','season_Fall',\n         'race_White',\n         'place_Decedent\u2019s home','place_Hospital, Clinic or Medical Center',  \n         'cause_accident', 'cause_heart']\ntrain_features_revised_2 = ['is_resident', 'sex', 'detail_age',\n         'autopsy','number_of_record_axis_conditions', \n         'marital_status_D','marital_status_M', 'marital_status_S',\n         'season_Summer','season_Fall',\n         'race_White',\n         'place_Decedent\u2019s home','place_Hospital, Clinic or Medical Center',  \n         'cause_accident','cause_neoplasm']","3b7f003a":"def build_lr_models(data,feature_groups,target,target_balance):\n    lr_models = []\n    #lr_weights = []\n    lr_preds = []\n    lr_tests = []\n    for f in feature_groups:\n        X = data[f]\n        train_X, test_X, train_y, test_y = train_test_split(X, target, test_size=0.2, random_state=42)\n        \n        lr = LogisticRegression(penalty='none', tol=1e-4, max_iter=300, class_weight=target_balance, solver='saga',random_state=42)\n        lr.fit(train_X,train_y)\n        pred_y = lr.predict(test_X)\n        \n        lr_models.append(lr)\n        #lr_weights.append(lr.coef_)\n        lr_preds.append(pred_y)\n        lr_tests.append(test_y)\n    return lr_models,lr_preds,lr_tests","5e24cc56":"#feature_groups_1 = [train_features_1,train_features_2,train_features_3]","b57805d5":"feature_groups_1 = [train_features_revised,train_features_revised_2]","9ea0fb94":"models,preds_y,tests_y = build_lr_models(data_for_injury,feature_groups_1,y,{0:0.035,1:0.965})","94a7b2d6":"for i in range(len(models)):\n    plot_cm(confusion_matrix(tests_y[i],preds_y[i]))\n#plot_cm(confusion_matrix(tests_y[1],preds_y[1]))","24eb98b7":"def plot_feature_weight(lr_model,train_features):\n    #reference_category = [a for a in all_features if a not in train_features and a.find('cause')!=-1][0]\n    feature_weight = {}\n    for i in range(lr_model.coef_.shape[1]):\n        feature_weight[train_features[i]] = lr_model.coef_[0][i]\n    feature_weight = pd.DataFrame.from_dict(feature_weight,orient='index')\n    feature_weight.columns=['feature_weight']\n    fig,ax = plt.subplots(figsize=(10,8))\n    feature_weight.plot(kind='barh',ax=ax,width=0.8,grid=True)\n    plt.xticks(fontsize=15)\n    plt.yticks(fontsize=15)\n    ax.set_title('Feature Coefficient Chart',fontsize=20)","da11f242":"plot_feature_weight(models[0],feature_groups_1[0])","5b8ab8ce":"train_features_revised_3 = ['is_resident', 'sex', 'detail_age',\n         'number_of_record_axis_conditions', \n         'marital_status_D','marital_status_M', 'marital_status_S',\n         'season_Summer','season_Fall',\n         'race_White',\n         'place_Decedent\u2019s home','place_Hospital, Clinic or Medical Center',  \n         'cause_accident', 'cause_heart']\ntrain_features_revised_4 = ['is_resident', 'sex', 'detail_age',\n         'autopsy','number_of_record_axis_conditions', \n         'season_Summer','season_Fall',\n         'race_White',\n         'place_Decedent\u2019s home','place_Hospital, Clinic or Medical Center',  \n         'cause_accident', 'cause_heart']\ntrain_features_revised_5 =  ['is_resident', 'sex', 'detail_age',\n         'autopsy','number_of_record_axis_conditions', \n         'marital_status_D','marital_status_M', 'marital_status_S',\n         'season_Summer','season_Fall',\n         'race_White',\n         'place_Decedent\u2019s home','place_Hospital, Clinic or Medical Center',  ]\ndroped_feature_group = ['autopsy','marital_status','cause']","294c115e":"feature_groups_2 = [train_features_revised_3,train_features_revised_4,train_features_revised_5]","1d0dfc50":"models,preds_y,tests_y = build_lr_models(data_for_injury,feature_groups_2,y,{0:0.035,1:0.965})","51d3beab":"def plot_cm_2(confusion_matrix,droped_feature):\n    #percent_cm = np.empty((2,2))\n    #for i in range(confusion_matrix.shape[0]):\n    #    percent_cm[i,:] = confusion_matrix[i,:]\/np.sum(confusion_matrix,axis=1)[i]\n    fig,ax = plt.subplots(figsize=(8,5))\n    sns.heatmap(confusion_matrix, ax=ax, annot=True, fmt='d',annot_kws={'size':16},cmap='Blues')\n    ax.set_xlabel('Predict',fontsize=16)\n    ax.set_ylabel('True',fontsize=16)\n    ax.set_title('After dropping '+droped_feature,fontsize=16)","28145d40":"for i in range(len(models)):\n    plot_cm_2(confusion_matrix(tests_y[i],preds_y[i]),droped_feature_group[i])","c17d422a":"def plot_feature_weight_2(lr_model,train_features,droped_feature):\n    feature_weight = {}\n    for i in range(lr_model.coef_.shape[1]):\n        feature_weight[train_features[i]] = lr_model.coef_[0][i]\n    feature_weight = pd.DataFrame.from_dict(feature_weight,orient='index')\n    feature_weight.columns=['feature_weight']\n    fig,ax = plt.subplots(figsize=(10,8))\n    feature_weight.plot(kind='barh',ax=ax,width=0.8,grid=True)\n    plt.xticks(fontsize=15)\n    plt.yticks(fontsize=15)\n    ax.set_title('After dropping '+ droped_feature,fontsize=20)","a96378ae":"for i in range(len(feature_groups_2)):\n    plot_feature_weight_2(models[i],feature_groups_2[i],droped_feature_group[i])","a816f108":"def percentage_confusion_matrix(test,pred):\n    confusion_matrix = np.empty((2,2))\n    p = sum(test.iloc[i]==1 for i in range(len(pred)))\n    n = sum(test.iloc[i]==0 for i in range(len(pred)))\n    tp = sum(pred[i]==1 and test.iloc[i]==1 for i in range(len(pred)))\n    fn = sum(pred[i]==0 and test.iloc[i]==1 for i in range(len(pred)))\n    fp = sum(pred[i]==1 and test.iloc[i]==0 for i in range(len(pred)))\n    tn = sum(pred[i]==0 and test.iloc[i]==0 for i in range(len(pred)))\n    confusion_matrix[0][0] = tn\n    confusion_matrix[0][1] = fn\n    confusion_matrix[1][0] = fp\n    confusion_matrix[1][1] = tp\n    return confusion_matrix","afd7bfba":"#lr.score(test_X,test_y)","48876752":"#pred_y_proba = lr.predict_proba(test_X)","c0d28cf7":"#error = sum(pred_y[i]!=test_y.iloc[i] for i in range(len(pred_y)))\/len(pred_y)","07b97eb2":"X = data_for_injury[train_features_revised]\ny = data_for_injury['injury_at_work']","5faf89af":"train_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.2, random_state=42)","a78583a8":"def rev_F1score(pred,dtrain):\n    labels = dtrain.get_label()\n    pred = np.round(1.0 \/ (1.0 + np.exp(-pred)))\n    cm = confusion_matrix(labels, pred)\n    recall =float(cm[1][1]) \/ float(cm[1][0]+cm[1][1])\n    precision = float(cm[1][1]) \/ float(cm[0][1]+cm[1][1]+0.00001)\n    F1score = (2*recall*precision)\/(precision+recall+0.00001)\n    reversed_F1score = 1-F1score\n    return 'Reversed-F1score',reversed_F1score","6990d69f":"def fpr(pred,dtrain):\n    labels = dtrain.get_label()\n    pred = np.round(1.0 \/ (1.0 + np.exp(-pred)))\n    cm = confusion_matrix(labels,pred)\n    fpr = float(cm[0][1])\/float(cm[0][0]+cm[0][1])\n    return 'fp_rate',fpr","95ab397d":"#scale_pos_weight_range = {'scale_pos_weight':range(30,36,1)}\n#xgb_model = xgb.XGBClassifier(n_estimators=500, max_depth=8, learning_rate=0.3, \n#                              subsample=0.8, colsample_bytree=0.8, colsample_bynode=0.3,seed=42)\n#cv1 = GridSearchCV(estimator=xgb_model, param_grid=scale_pos_weight_range)\n#cv1.fit(train_X,train_y,eval_metric=recall)","293b8bf0":"#cv1.best_params, cv1.best_score_","0b05eb2c":"xgb_model = xgb.XGBClassifier(n_estimators=500, max_depth=8, learning_rate=0.3, \n                              subsample=0.8, colsample_bytree=0.8, colsample_bynode=0.3, scale_pos_weight=25 ,seed=42)\nxgb_model.fit(train_X,train_y, eval_metric=rev_F1score,\n              eval_set=[(train_X,train_y),(test_X,test_y)], early_stopping_rounds=5)","c23298ae":"xgb_model.get_booster().get_score(importance_type= 'cover')","aaa25528":"fig,ax = plt.subplots(figsize=(10,8))\nxgb.plot_importance(xgb_model,ax=ax,height =0.1,max_num_features = 20, importance_type= 'gain')\nplt.yticks(fontsize=16)","a6364134":"#import graphviz\n#xgb.to_graphviz(xgb_model, num_trees=xgb_model.best_iteration)","9704c9d8":"xgb_model.save_model('baseline3.json')","acdc3d9b":"pred_y = xgb_model.predict(test_X)","f95149c5":"cm_xgb = confusion_matrix(test_y,pred_y)","70074f15":"plot_cm(cm_xgb)","b7561753":"xgb_pred_proba_test = xgb_model.predict_proba(test_X)\nxgb_fpr, xgb_tpr, _ = roc_curve(test_y, xgb_pred_proba_test[:,1])\nfig,ax = plt.subplots(figsize=(10,8))\nax.plot(xgb_fpr, xgb_tpr, marker='.', label='ROC curve',color='orange')\nax.plot([0, 1], [0, 1], color='navy', linestyle='--',label='base')\nax.set_xlabel('false positive rate',fontsize=14)\nax.set_ylabel('true positive rate',fontsize=14)\nax.set_title('ROC curve',fontsize=16)\nax.legend()","c4936279":"test_auc = roc_auc_score(test_y,xgb_pred_proba_test[:,1])\ntest_auc","73d75c42":"weight_list = [1,10,20,30,32,40]\nall_xgb_model = []\nfor w in weight_list:\n    xgb_model = xgb.XGBClassifier(n_estimators=500, max_depth=8, learning_rate=0.3, \n                              subsample=0.8, colsample_bytree=0.8, colsample_bynode=0.3, \n                              scale_pos_weight=w, verbosity=1,seed=42)\n    xgb_model.fit(train_X,train_y, eval_metric=rev_F1score,\n              eval_set=[(train_X,train_y),(test_X,test_y)], early_stopping_rounds=5)\n    all_xgb_model.append(xgb_model)","8e1c735b":"all_xgb_fpr = []\nall_xgb_tpr = []\nall_auc = []\nfor xgb_model in all_xgb_model:\n    xgb_pred_proba = xgb_model.predict_proba(test_X)\n    xgb_fpr, xgb_tpr, _ = roc_curve(test_y, xgb_pred_proba[:,1])\n    auc = roc_auc_score(test_y,xgb_pred_proba[:,1])\n    all_xgb_fpr.append(xgb_fpr)\n    all_xgb_tpr.append(xgb_tpr)\n    all_auc.append(auc)","405f7e1d":"all_auc","79415ca0":"colors = sns.color_palette()","46aa5593":"fig,ax = plt.subplots(figsize=(10,8))\nfor i in range(len(all_xgb_model)):\n    ax.plot(all_xgb_fpr[i], all_xgb_tpr[i], marker='.', label='roc curve %s' % (weight_list[i]),color=colors[i])\nax.plot([0, 1], [0, 1], color='navy', linestyle='--',label='base')\nax.set_xlabel('false positive rate',fontsize=14)\nax.set_ylabel('true positive rate',fontsize=14)\nax.set_title('ROC curve',fontsize=16)\nax.legend()","bb7b4b7d":"all_xgb_precision = []\nall_xgb_recall = []\nall_f1_score = []\nall_pr_auc = []\nfor xgb_model in all_xgb_model:\n    xgb_pred_proba = xgb_model.predict_proba(test_X)\n    xgb_pred = xgb_model.predict(test_X)\n    xgb_precision, xgb_recall, _ = precision_recall_curve(test_y, xgb_pred_proba[:,1])\n    auc_pr = average_precision_score(test_y,xgb_pred_proba[:,1])\n    f1 = f1_score(test_y,xgb_pred)\n    all_xgb_precision.append(xgb_precision)\n    all_xgb_recall.append(xgb_recall)\n    all_f1_score.append(f1)\n    all_pr_auc.append(auc_pr)","4e17c468":"all_f1_score,all_pr_auc","e8f68529":"colors = sns.color_palette()","749047f6":"base = np.sum(y,axis=0)\/len(y)\nfig,ax = plt.subplots(figsize=(10,8))\nfor i in range(len(all_xgb_model)):\n    ax.plot(all_xgb_recall[i], all_xgb_precision[i], marker='.', label='P-R curve %s' % (weight_list[i]),color=colors[i])\nax.plot([0, 1], [base, base], color='navy', linestyle='--',label='base')\nax.set_xlabel('Recall',fontsize=14)\nax.set_ylabel('Precision',fontsize=14)\nax.set_title('Precision-Recall curve',fontsize=16)\nax.legend()","698cd4e4":"eval_df = pd.DataFrame([all_auc, all_f1_score , all_pr_auc]).T\neval_df.columns = ['ROC_AUC','F1_Score','Precision_Recall_AUC']\neval_df['scale pos weight'] = [1,10,20,30,32,40]\neval_df","9f640a6a":"xgb_model = xgb.XGBClassifier(n_estimators=500, max_depth=8, learning_rate=0.3, \n                              subsample=0.8, colsample_bytree=0.8, colsample_bynode=0.3, scale_pos_weight=10 ,seed=42)\nxgb_model.fit(train_X,train_y, eval_metric=rev_F1score,\n              eval_set=[(train_X,train_y),(test_X,test_y)], early_stopping_rounds=5)","35f36659":"xgb_pred = xgb_model.predict(X)\ndata_for_injury['xgb_pred'] = xgb_pred","ac3b338e":"data_for_injury['injury_at_work'].value_counts()","594fad24":"data_for_injury['xgb_pred'].value_counts()","e706812c":"sex_group = data_for_injury[['injury_at_work','xgb_pred','sex']].groupby('sex').agg('sum').reset_index()\nsex_group.plot(x='sex',y=['injury_at_work','xgb_pred'],figsize=(8,5),grid=False,style=['rx','o'])\nplt.title('true and pred: female VS male',fontsize=16)\nplt.legend(loc='best',labels=['true','pred'])\nplt.xticks(np.arange(-1,3,1))\nplt.xlabel('gender',fontsize=15)\nplt.show()","be747da8":"sex_group","a4b8e611":"res_group = data_for_injury[['injury_at_work','xgb_pred','is_resident']].groupby('is_resident').agg('sum').reset_index()\nres_group.plot(x='is_resident',y=['injury_at_work','xgb_pred'],figsize=(8,5),grid=False,style=['rx','o'])\nplt.title('true and pred: non-resident VS resident',fontsize=16)\nplt.legend(loc='best',labels=['true','pred'])\nplt.xticks(np.arange(-1,3,1))\nplt.xlabel('resident status',fontsize=15)\nplt.show()","c151bc19":"res_group","4fd20bf8":"data_for_injury['marital_status_W'] = 1-(data_for_injury['marital_status_D']+data_for_injury['marital_status_M']+data_for_injury['marital_status_S'])","fcaccd8a":"marital_status_dict = {'D':'Divorced','M':'Married','S':'Single', 'W':'Widow'}\nfor col in ['marital_status_D','marital_status_M', 'marital_status_S', 'marital_status_W']:\n    group_marital = data_for_injury[[col,'injury_at_work','xgb_pred']].groupby(col).agg('sum').reset_index()\n    group_marital.plot(x=col, y=['injury_at_work','xgb_pred'],figsize=(8,5),grid=False,style=['rx','o'])\n    plt.title('true and pred: not %s vs %s' % (marital_status_dict[col[-1]],marital_status_dict[col[-1]]),fontsize=16)\n    plt.legend(loc='best',labels=['true','pred'])\n    plt.xticks(np.arange(-1,3,1))\n    plt.xlabel(definition['marital_status'][col[-1]],fontsize=15)\n    plt.show()","ecacee58":"#rev_place_recode = {'1':'Hospital facility','2':'Decedent\u2019s home','3':'Other'}\n#data_for_injury['place_3'] = 1-(data_for_injury['place_1'] + data_for_injury['place_2'])\n\nfor col in ['place_Decedent\u2019s home', 'place_Hospital, Clinic or Medical Center','place_Other',]:\n    group_place = data_for_injury[[col,'injury_at_work','xgb_pred']].groupby(col).agg('sum').reset_index()\n    group_place.plot(x=col, y=['injury_at_work','xgb_pred'],figsize=(8,5),grid=False,style=['rx','o'])\n    plt.title('true and pred: not in %s vs in %s' % (col[6:],col[6:]),fontsize=16)\n    plt.legend(loc='best',labels=['true','pred'])\n    plt.xticks(np.arange(-1,3,1))\n    plt.xlabel(col[6:],fontsize=15)\n    plt.show() ","77ef53f0":"#rev_cause_recode = {'1':'Accident','2':'Heart Disease','3':'Neoplasm'}\n#data_for_injury['cause_3'] = 1-(data_for_injury['cause_1'] + data_for_injury['cause_2'])\nfor col in ['cause_accident','cause_heart','cause_neoplasm']:\n    group_cause = data_for_injury[[col,'injury_at_work','xgb_pred']].groupby(col).agg('sum').reset_index()\n    group_cause.plot(x=col, y=['injury_at_work','xgb_pred'],figsize=(8,5),grid=False,style=['rx','o'])\n    plt.title('true and pred: not %s vs %s' % (col[6:],col[6:]),fontsize=16)\n    plt.legend(loc='best',labels=['true','pred'])\n    plt.xticks(np.arange(-1,3,1))\n    plt.xlabel(col[6:],fontsize=15)\n    plt.show() ","1de1e229":"Drop data which has unknown values","4ef92522":"### resident status","edc5d63c":"# Fit result","5b5bae15":"If I drop the marital status columns, the model performance will decrease. If I drop the cause or autopsy columns, the model performance will not change a lot. It is interesting that if we drop the marital status columns, the coefficient of 'detail_age' appoaches 0 .","774f2317":"P_value for season_Spring (season_Winter) and race_Black is higher than 0.05. We should remove season_Spring or season_Winter (it is the same because one-hot encoding).We also should remove race_Black.","e3a21ab0":"Then try Xgboost and check for better results. ","eb675e6b":"# Preliminary Analysis","2a9e885d":"### Cause of death","78451adc":"# Modeling","e7532b90":"read data","7cc6cf29":"### 2. use scikit-learn to fit logistc regression model and tune some parameters","b6773fd4":"Recall and precision is 0 and we should tune our model to get more correct results.","e6dde174":" Drop data with outlier values of age and normalized age.","7b515ea6":"# Data Preprocessing","5a04ed03":"## Xgboost ","d476e7f1":"### 1. Use statsmodels to fit logistic regression model and check p-value for each coefficient","a52df13c":"## feature engineering and outlier elimination","f61e8cc8":"It looks like all the deceased in the training dataset get educated so I should drop this column later.","32fe12dd":"weight importance is useless while gain importance is useful","cb17fb71":"Then I will try if the model will perform better if I drop some columns","fe94652f":"Then I will try to use Precision-Recall curve to evaluate","adea7f62":"### sex","e30a0b7f":"The model predict well for if female get injury at work but very worse in the prediction of male.","6bac746a":"### Place of death","b3620adb":"Check the coefficients of all training features.","f8bd3816":"## Logistic Regression ","ecba8f8e":"Because the model cannot capture the characteristic of data with label 1 so I build a personalized metric.","f9ef5650":"Some insights:\n1. Resident decedents are less likely to get injury at work when compared with non-resident deceadents.\n2. Male deceaseds are more likely to get injury at work when compared with non-resident decedents. \n3. The higher the age, the less likely the deseased get injury at work.\n4. Married and Divorced decedents are more likely to get injury at work than single or windowed.\n5. Season of the deceased died almost has nothing to do with whether the deceased get injury at work.\n6. The deceased died because of accident is more likely to get injury at work than other two causes.\n7. Educated deceaseds are less likely to get injury at work when compared with non-educated deceaseds.\n8. The deceases are less likely to get injury at work if they died in the hospital or decedents' house compared with than   other place","4606b559":"Classify resident status into two categories and reconstruct the cause of death into three big cateogories.","e69ced10":"### marital status","0fb3098c":"We can see that if we increase the weight for label 1, auc will increase until weight is larger than 30. After this threshold, auc begins decrease. However, ROC curve is not the best chocie to evaluate imbalanced dataset well because it only considers true positive rate and false positive rate. This curve is somewhat misleading. ","00b96568":"There is a typo in the classification of hospital,clinic or medical center. ","761a721b":"Then I plot fit result of label=1 after choosing the right scale_pos_weight for different features","e56753e7":"Recall is almost same with logistic regression model while precision has improve a lot.","9377daed":"Combine place feature into three big categories.","81324b5f":"### Generate one-hot encoding feature","b01ad5ad":"Before modeling, I pick three features (sex, marital_status, and cause) to see how the distribution of target is value in different feature values.","360937a1":"Drop data whose cause is not in three big categories.","ee4ecfb6":"Change the reference category for cause did not change the model ","91c76c04":"Then I try to find out the best scale_pos_weight for xgboost model.","61037919":"Integrate data of ten years and pick the features.","f450fa6e":"From my point of view, scale_pos_weight=10 is the best choice based on this curve","2b90ab6e":"First I use scale_pos_weight=25 as the baseline model."}}