{"cell_type":{"d2d71728":"code","8431917e":"code","fe63c1b7":"code","77987c48":"code","0e54cec2":"code","8de85608":"code","887f1de4":"code","54d90357":"code","684dfba3":"code","92cf0ea1":"code","aa26659e":"code","767a6afd":"code","d7fce941":"code","f2166915":"code","dcc0d517":"code","86164c01":"code","34810fb5":"code","32ba7bd8":"code","3327690d":"code","f5df8946":"code","5538bfe7":"code","12fc7718":"code","a36050b7":"code","3039061e":"code","ecebb2f7":"code","0fc894ab":"code","4bbbe93c":"code","1ea60fae":"markdown","9b013f41":"markdown","9b78e880":"markdown","f3971d5a":"markdown","f1329240":"markdown","dc0de498":"markdown","df5790e5":"markdown","11a48dbf":"markdown","3d02880f":"markdown"},"source":{"d2d71728":"import warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"white\")\n%matplotlib inline\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\nfrom scipy.sparse import csr_matrix, hstack\nimport lightgbm as lgb\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\n%matplotlib inline","8431917e":"def rmse(estimator, X_test, y_test):\n    \"\"\"metrics for this competition\"\"\"\n    return - np.sqrt(((estimator.predict(X_test) - y_test) ** 2).mean())\n\ndef rmse_log(estimator, X_test, y_test):\n    \"\"\"metrics for this competition\"\"\"\n    return - np.sqrt(((np.exp(estimator.predict(X_test)) - np.exp(y_test)) ** 2).mean())","fe63c1b7":"train_df = pd.read_csv('..\/input\/train_features.csv')\ntest_df = pd.read_csv('..\/input\/test_features.csv')\ntarget = pd.read_csv('..\/input\/train_target.csv', index_col='id')","77987c48":"train_df.shape, test_df.shape","0e54cec2":"train_df['DepHour'] = train_df['CRSDepTime'] \/\/ 100\ntrain_df['DepHour'].replace(to_replace=24, value=0, inplace=True)\n\ntest_df['DepHour'] = test_df['CRSDepTime'] \/\/ 100\ntest_df['DepHour'].replace(to_replace=24, value=0, inplace=True)\n\ntrain_df['ArrHour'] = train_df['CRSArrTime'] \/\/ 100\ntrain_df['ArrHour'].replace(to_replace=24, value=0, inplace=True)\n\ntest_df['ArrHour'] = test_df['CRSArrTime'] \/\/ 100\ntest_df['ArrHour'].replace(to_replace=24, value=0, inplace=True)\n\ntest_df.drop(['CRSDepTime', 'CRSArrTime', 'Year', ], axis=1, inplace=True)\ntrain_df.drop(['CRSDepTime', 'CRSArrTime', 'Year', ], axis=1, inplace=True)\n\ntrain_df['target'] = target","8de85608":"train_df.head()","887f1de4":"# Compute the correlation matrix\ncorr = train_df.iloc[:, [0,1,2,4,6, -4,-3,-2,-1]].corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, annot=True)","54d90357":"test_df.drop(['CRSElapsedTime', ], axis=1, inplace=True)\ntrain_df.drop(['CRSElapsedTime', ], axis=1, inplace=True)","684dfba3":"train_df.head()","92cf0ea1":"train_df.target.plot.hist(bins=50)","aa26659e":"_ = plt.hist(np.log(train_df.target), bins=50)","767a6afd":"train_df.groupby('FlightNum').target.mean().sort_values().plot(style='*') #.plot.bar()","d7fce941":"train_df.groupby('FlightNum').target.size().sort_values().plot(style='+')","f2166915":"train_df.FlightNum.nunique(), train_df.TailNum.nunique()","dcc0d517":"X_train = train_df[['Distance', 'DepHour', 'FlightNum']].values\nX_test = test_df[['Distance', 'DepHour', 'FlightNum']].values\ny_train_log = np.log(train_df.target.values)\ny_train = train_df.target.values\n# X_train_part, X_valid, y_train_part, y_valid = \\\n#     train_test_split(X_train, y_train, \n#                      test_size=0.3, random_state=17)","86164c01":"linear_pipe = Pipeline([('scaler', StandardScaler()),\n                       ('linear', LinearRegression())])\n\nert = ExtraTreesRegressor(criterion='mae', n_estimators=30, )\n","34810fb5":"lcv = cross_val_score(linear_pipe, X_train, y_train, scoring=rmse , cv=5)\nprint(-lcv.mean(), lcv.std())","32ba7bd8":"linear_pipe.fit(X_train, y_train)\nlinear_test_pred = linear_pipe.predict(X_test)","3327690d":"pd.Series(linear_test_pred, name='DelayTime').to_csv('linear_2feat.csv', \n                                           index_label='id', header=True)","f5df8946":"cbr = CatBoostRegressor(logging_level='Silent', random_state=45, \n                        early_stopping_rounds=300, )","5538bfe7":"# There are a little number (~5) of None in categorial column, fill it!\ntrain_df.fillna(0, inplace=True)\ntest_df.fillna(0, inplace=True)","12fc7718":"train_df.head()","a36050b7":"# simple catboost regressor without setup\ncbr.fit(train_df.drop('target', axis=1), target, cat_features=[0,1,2,3,5,6,7], plot=True)","3039061e":"cb_pred = cbr.predict(test_df, verbose=True)","ecebb2f7":"pd.Series(cb_pred, name='DelayTime').to_csv('simple_CBR.csv', \n                                           index_label='id', header=True)","0fc894ab":"_ = plt.hist(cb_pred, bins=50)","4bbbe93c":"zeros_submit_score = 68.79140\ncb_pred_modif = cb_pred + zeros_submit_score - np.sqrt(np.square(target.values).mean())\npd.Series(cb_pred_modif, name='DelayTime').to_csv('simple_CBR_modif.csv', \n                                           index_label='id', header=True)","1ea60fae":"Some _FlightNum_s have long delay and some almost don't have","9b013f41":"**Simple catboost**","9b78e880":"**Score on the LB = 47.74926**","f3971d5a":"There are no strong correlations with target feature. But there is good correlation between _Distance_ and _CRSElapsedTime_. Drop _CRSElapsedTime_, it also has None values. ","f1329240":"**Score on the LB = 47.74764** It has been slightly improved","dc0de498":"**Score of zeros submit is _68.79140._** We will make a hack looking at this","df5790e5":"Bad result. **Score was less than in submit_solo_tree.csv **","11a48dbf":"In the future we will try to train model to predict log values, it is more normal","3d02880f":"**linreg with 3 important features**"}}