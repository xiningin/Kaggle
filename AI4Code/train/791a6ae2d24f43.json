{"cell_type":{"43663d45":"code","48a4825e":"code","019625a6":"code","03a98d90":"code","19ce4365":"code","f246505a":"code","ef97bd76":"code","be509f47":"code","c456ca6c":"code","49d16150":"code","91fad126":"code","b7b6bc30":"code","c3ade118":"code","e3a54e81":"code","c8550dd6":"code","b12904ab":"code","8fa73f93":"code","ffc7045e":"code","84ffff31":"code","d5731665":"code","ff313cb4":"code","fa8a97c8":"code","7fc3528c":"code","a4e1eaaf":"code","edaed1e0":"code","9d4f2f63":"code","57420e43":"code","54c793e2":"code","995104b7":"code","b656f5ca":"code","a0474e87":"code","be53e5a7":"code","59ab7b59":"code","47f6ca00":"code","1efcbbef":"code","b6c733d6":"code","6213c9ed":"code","79720a38":"code","758dbd33":"code","a840b69f":"code","a1af3b84":"code","2c3c13d9":"code","a7217490":"code","8a098cd7":"code","18cd0b4f":"code","0328dc47":"code","f9411b25":"code","4ef7355c":"code","c66346f0":"code","ffbefdc0":"code","59605328":"code","dcf6fc46":"code","6bf1b5db":"code","a3860044":"code","22eaf93e":"code","b16e93cb":"code","c1751e2c":"code","e7e05f76":"code","a40fbaa7":"code","2651d817":"code","461bd3fb":"code","234928ad":"code","cec6df5d":"code","6bc5e85c":"code","82664f0f":"code","2d0d5ea7":"code","feb3b278":"code","349d6186":"code","18429701":"markdown","8e453354":"markdown","b2b8724e":"markdown","c25e68f0":"markdown","4c082460":"markdown","6705749d":"markdown","e2fd5d6e":"markdown","91fa2e75":"markdown","d1122da0":"markdown","3e5bea4a":"markdown","03171df6":"markdown","d36fa9c9":"markdown","b77bb4a8":"markdown","25ee687b":"markdown","4c190f7d":"markdown","3700695e":"markdown","a4222d9d":"markdown","03efb077":"markdown","1b61cae7":"markdown","e1172d40":"markdown","ce0a63ab":"markdown","dad985bb":"markdown","76738875":"markdown","33bb9d0a":"markdown"},"source":{"43663d45":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","48a4825e":"data_times = pd.read_csv(\"\/kaggle\/input\/world-university-rankings\/timesData.csv\")\ndata_times.head(10)","019625a6":"data_times.info()","03a98d90":"data_times.tail(10)\n","19ce4365":"data_times.columns","f246505a":"print('number of NaNs per column:')\ndata_times.isna().sum()","ef97bd76":"data_times['world_rank'] = pd.to_numeric(data_times['world_rank'], errors='coerce')\ndata_times['teaching'] = pd.to_numeric(data_times['teaching'], errors='coerce')\ndata_times['num_students'] = pd.to_numeric(data_times['num_students'], errors='coerce')\ndata_times['income'] = pd.to_numeric(data_times['income'], errors='coerce')\ndata_times['international'] = pd.to_numeric(data_times['international'], errors='coerce')\n\n# pd.to_numeric converts argument to a numeric type.","be509f47":"data_times.info()","c456ca6c":"data_times.corr()","49d16150":"f,ax = plt.subplots(figsize=(8,8))\nsns.heatmap(data_times.corr(),annot=True,linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","91fad126":"\n# drop female male ratio because 233 rows are missing\n# drop total score because it's missing and too similar to world rank\n# drop num_students because it's missing \ndata_times.drop(columns=['female_male_ratio', 'total_score', 'num_students'])","b7b6bc30":"data_times['world_rank'].fillna(201, inplace=True)\n","c3ade118":"data_times.tail()","e3a54e81":"the_first_200 = data_times.loc[data_times['world_rank'] != 201]\nthe_first_200_2016 = the_first_200.loc[the_first_200['year'] == 2016]\n#the_first_200_2016 gives the top 200 university in 2016","c8550dd6":"the_first_200.tail()","b12904ab":"the_first_200_2016.head()","8fa73f93":"the_first_200 = the_first_200.drop(columns=['num_students'])\nthe_first_200_2016 = the_first_200_2016.drop(columns=['num_students'])\n","ffc7045e":"f,ax = plt.subplots(figsize=(8,8))\nsns.heatmap(the_first_200.corr(),annot=True,linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","84ffff31":"the_first_200.plot(kind='scatter',x='teaching',y='world_rank', color='g', label='teaching', linewidth=1, grid=True, linestyle=':')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('teaching')              # label = name of label\nplt.ylabel('world_rank')\nplt.title = ('Line Plot')\nplt.show()","d5731665":"the_first_200.plot(kind='scatter',x='student_staff_ratio',y='world_rank', color='r', label='teaching', grid=True,)\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('teaching')              # label = name of label\nplt.ylabel('world_rank')\nplt.title = ('Line Plot')\nplt.show()","ff313cb4":"the_first_200.plot(kind='scatter',x='income',y='world_rank', color='b', label='teaching', grid=True,)\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('income')              # label = name of label\nplt.ylabel('world_rank')\nplt.title = ('Line Plot')\nplt.show()","fa8a97c8":"\n\n# create dummy variable them group by that\n# set the legend to false because we'll fix it later\nthe_first_200_2016.assign(dummy = 1).groupby(\n  ['dummy','country']\n).size().to_frame().unstack().plot(kind='bar',stacked=True,legend=False)\n\n\n# other it'll show up as 'dummy' \nplt.xlabel('country')\n\n# disable ticks in the x axis\nplt.xticks([])\n\n# fix the legend\ncurrent_handles, _ = plt.gca().get_legend_handles_labels()\nreversed_handles = reversed(current_handles)\n\nlabels = reversed(the_first_200_2016['country'].unique())\n\nplt.legend(reversed_handles,labels,loc='best')\nplt.show()","7fc3528c":"university_country = data_times[\"country\"].unique()\nprint(university_country)","a4e1eaaf":"\ndata_times_Turkey = data_times[(data_times[\"country\"] == \"Turkey\" )]\ndata_times_Turkey.head(10)","edaed1e0":"data_times_Turkey = data_times_Turkey.drop(columns=['world_rank','total_score', 'num_students','female_male_ratio'])","9d4f2f63":"data_times_Turkey.describe()","57420e43":"data_times_Turkey.plot(kind=\"scatter\", x=\"year\", y=\"teaching\",alpha = 0.5,color = \"g\")\nplt.xlabel(\"Year\")              # label = name of label\nplt.ylabel(\"teaching\")\nplt.show()","54c793e2":"data_times_Turkey.teaching.plot(kind='line', color='g', label='teaching', linewidth=1, grid=True, linestyle=':')\ndata_times_Turkey.research.plot(kind='line', color='b', label='Research')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title = ('Line Plot')\nplt.show()","995104b7":"data_times_Turkey.plot(kind=\"scatter\", x=\"year\", y=\"student_staff_ratio\",alpha = 0.5,color = \"b\")\nplt.xlabel(\"Year\")              # label = name of label\nplt.ylabel(\"student_staff_ratio\")\nplt.show()","b656f5ca":"data_times_Turkey.plot(kind=\"scatter\", x=\"year\", y=\"citations\",alpha = 0.5,color = \"r\")\nplt.xlabel(\"Year\")              # label = name of label\nplt.ylabel(\"citations\")\nplt.show()","a0474e87":"data_times_Turkey.year.plot(kind='hist', bins=50)\nplt.show()","be53e5a7":"data_times_Turkey.plot(kind=\"scatter\", x=\"research\", y=\"citations\",alpha = 0.5,color = \"b\")\nplt.xlabel(\"research\")              # label = name of label\nplt.ylabel(\"citations\")\nplt.show()","59ab7b59":"data_times_Turkey.plot(kind=\"scatter\", x=\"teaching\", y=\"citations\",alpha = 0.5,color = \"g\")\nplt.xlabel(\"teaching\")              # label = name of label\nplt.ylabel(\"citations\")\nplt.show()","47f6ca00":"data_times_Turkey_METU = data_times_Turkey[(data_times_Turkey[\"university_name\"] == \"Middle East Technical University\")]\ndata_times_Turkey_METU.head(10)","1efcbbef":"data_times_Turkey_METU.describe()","b6c733d6":"data_times_Turkey_METU.plot(kind=\"scatter\", x=\"year\", y=\"teaching\",alpha = 0.5,color = \"b\")\nplt.xlabel(\"Year\")              # label = name of label\nplt.ylabel(\"teaching\")\nplt.show()","6213c9ed":"data_times_Turkey_METU.plot(kind=\"scatter\", x=\"citations\", y=\"international\",alpha = 0.5,color = \"r\")\nplt.xlabel(\"citations\")              # label = name of label\nplt.ylabel(\"international\")\nplt.show()\n#plt.plot('citations','international','-ok')","79720a38":"data_times_Turkey_METU.plot(kind=\"scatter\", x=\"research\", y=\"international\",alpha = 0.5,color = \"r\")\nplt.xlabel(\"research\")              # label = name of label\nplt.ylabel(\"international\")\nplt.show()","758dbd33":"data_shanghai= pd.read_csv(\"\/kaggle\/input\/world-university-rankings\/shanghaiData.csv\")\ndata_shanghai.head(10)","a840b69f":"data_shanghai.shape","a1af3b84":"data_shanghai.columns","2c3c13d9":"data_shanghai.info()","a7217490":"data_cwur=pd.read_csv(\"\/kaggle\/input\/world-university-rankings\/cwurData.csv\")\ndata_cwur.head(10)\n","8a098cd7":"data_cwur.columns","18cd0b4f":"data_cwur.shape","0328dc47":"data_cwur.info()","f9411b25":"data_times.head(10)","4ef7355c":"data_times.tail()","c66346f0":"data_times.columns","ffbefdc0":"print(data_times[\"country\"].value_counts(dropna=False))","59605328":"print(data_shanghai[\"year\"].value_counts(dropna=False))","dcf6fc46":"print(data_cwur[\"year\"].value_counts(dropna=False))","6bf1b5db":"data_cwur.describe()","a3860044":"data_cwur.boxplot(column=\"citations\", by = \"year\", showfliers=True)","22eaf93e":"m = data_cwur.head()\nm","b16e93cb":"# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\n\nmelted=pd.melt(frame=m,id_vars=\"institution\", value_vars=[\"alumni_employment\",\"score\"])\nmelted","c1751e2c":"melted.pivot(index=\"institution\", columns=\"variable\", values=\"value\")","e7e05f76":"data1= data_cwur.head()\ndata2 = data_cwur.tail()\nconc_data = pd.concat([data1,data2], axis=0, ignore_index=True) #axis=0 means adding the dataframes in rows, ignore_index ignores the old index and give new index\nconc_data","a40fbaa7":"d1=data_times[\"country\"].head(10)\nd2=data_cwur[\"country\"].head(10)\nconcat_d=pd.concat([d1,d2],axis=1)\nconcat_d","2651d817":"data_cwur.dtypes","461bd3fb":"data_cwur[\"institution\"]=data_cwur[\"institution\"].astype(\"category\")\ndata_cwur.dtypes #you'll see the datatype of institution has changed to category","234928ad":"data_cwur.info()","cec6df5d":"data_cwur[\"broad_impact\"].value_counts(dropna=False)","6bc5e85c":"data_cwur[\"broad_impact\"].dropna(inplace=True) #inplace=True means changes automatically assigned to data","82664f0f":"assert data_cwur[\"broad_impact\"].notnull().all()","2d0d5ea7":"data_times[\"total_score\"].fillna(value=0, inplace=True)","feb3b278":"data_times.tail()","349d6186":"data_times[\"num_students\"]=[0 for i in data_times[\"num_students\"]]\ndata_times.tail()","18429701":"It seems there is no correlation between World Rank and Income for the top 200 university.\n\nthe below graph is taken from [www.queirozf.com\/entries\/pandas-dataframe-plot-examples-with-matplotlib-pyplot](http:\/\/)","8e453354":"This notebook is created as a part of Datai Teams ScienceTutorial for Beginners course. \n","b2b8724e":"Outliers","c25e68f0":"We want to check if it worked so we use *assert*\n\nEx: assert 1==2 will give error message. ","4c082460":"To be able to visualize the data with Seaborn, use melt() funtion. Bridge between Seaborn and Pandas","6705749d":"It seems teaching has decreased over years.","e2fd5d6e":"# **TIDY DATA**","91fa2e75":"Thee number of universities per country among top 200 in 2016.","d1122da0":"**MISSING DATA**\n\n* drop with dropna()\n* fill it with fillna()\n* fill it mean\n","3e5bea4a":"This is expected anyway. ","03171df6":"# **DATA CLEANING** #\n\n","d36fa9c9":"**CONCANATETING THE DATA**\n\nBringing the two data frame together","b77bb4a8":"**CWUR DATA**","25ee687b":"**EXPLOTARY DATA ANALYS**","4c190f7d":"**TIMES DATA**","3700695e":"The line above does not give error so it works. ","a4222d9d":"The number of the universities in the list has increased over the years.","03efb077":"**DATA TYPES**\n\nObject(String)\n\nBoolean\n\nInteger\n\nFloat\n\nCategorical\n\n\nConverting data types to each other. ","1b61cae7":"**Object** indicates a column has text. We have to change to this dytpe to use it later. ","e1172d40":"**Now, Let's look at the data of Turkey. **","ce0a63ab":"**SHANGHAI DATA**","dad985bb":"We may wanna use spesific colums in the dataframe. Let's add country columns from two different dataframes.","76738875":"PIVOTING DATA\n\n\nReverse of melting","33bb9d0a":"The following columns are the performance indicators for the total score and rank; \n\n**teaching** is the indicator of the learning environment\n1. Reputation survey: 15%\n2. Staff-to-student ratio: 4.5%\n3. Doctorate-to-bachelor\u2019s ratio: 2.25%\n4. Doctorates awarded-to-academic staff ratio: 6%\n5. Institutional income: 2.25%\n\n**research** is the indicator of volume, income and reputation\n1. Reputation survey: 18%\n2. Research income: 6%\n3. Research productivity: 6%\n\n**citations** is the indicator of research influence\n\n**international** is the indicator of staff, students and research\n1. International-to-domestic-student ratio: 2.5%\n2. International-to-domestic-staff ratio: 2.5%\n3. International collaboration: 2.5%\n\n**income** is the indicator of knowledge transfer\nA university\u2019s ability to help industry with innovations, inventions and consultancy "}}