{"cell_type":{"e053d518":"code","2d9d8b80":"code","eabcf468":"code","7ad51682":"code","846e8ae7":"code","3cbd61eb":"code","8ddca21f":"code","5c934c2e":"code","56e708fe":"code","4d9f8822":"code","976d178f":"code","3e01ebe6":"code","e664de78":"code","b0ccc145":"code","7b29d70a":"code","2889c528":"code","397a8294":"code","eef47303":"code","9fce8cf3":"code","d368febf":"code","b50905b1":"code","496be6a3":"code","46fbc0b9":"code","0f6574c6":"code","b1d0d561":"code","47fccf55":"code","34f37546":"code","1a6823df":"code","d6560b9e":"code","b6259303":"code","e5f664fe":"code","38318753":"code","f7b28cd9":"code","49da765d":"code","d9a1df1b":"code","a375a781":"markdown","06a7b25d":"markdown","6afb8fd5":"markdown","5e75277b":"markdown","df0f2d29":"markdown","b4555464":"markdown","c55fcf22":"markdown","0c32ecdb":"markdown","79d80bbd":"markdown","dc217ed1":"markdown","45d9d755":"markdown","eda569c3":"markdown","337ceba7":"markdown","dcc31d5f":"markdown"},"source":{"e053d518":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2d9d8b80":"# read in matches data\nmatches=pd.read_csv('\/kaggle\/input\/ipl\/matches.csv')\nmatches.head()","eabcf468":"# lets explore the data a bit\nmatches.describe()","7ad51682":"# we can see NaN values in data \nmatches.isnull().sum()","846e8ae7":"matches.shape","3cbd61eb":"matches=matches.drop('umpire3',axis=1)\nmatches.columns","8ddca21f":"matches=matches.dropna()\nmatches.shape","5c934c2e":"# final check \nmatches.info()","56e708fe":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport warnings\nwarnings.simplefilter(\"ignore\")","4d9f8822":"# Matches played per season\nfig = px.bar(matches, x=matches['season'].value_counts().keys(),\n             y=matches['season'].value_counts(),\n             color=matches['season'].value_counts().keys(),\n             labels={\n                     'x': \"Year\",\n                     'y': \"Number of matches\"\n                     \n                 })\nfig.update_layout(title='Total matches per season')\nfig.show()","976d178f":"# Number of matches played per venue\nfig = px.bar(matches, x=matches['venue'].value_counts().keys()[:5],\n             y=matches['venue'].value_counts()[:5],\n             color=matches['venue'].value_counts().keys()[:5],\n             labels={\n                     'x': \"Venue\",\n                     'y': \"Total number of matches\"\n                     \n                 })\nfig.update_layout(title='Total number of matches played')\nfig.show()","3e01ebe6":"# Number of matches played per venue\nfig = px.bar(matches, x=matches['player_of_match'].value_counts().keys()[:10],\n             y=matches['player_of_match'].value_counts()[:10],\n             color=matches['player_of_match'].value_counts().keys()[:10],\n             labels={\n                     'x': \"Player Name\",\n                     'y': \"Total number of player of the match award\"\n                     \n                 })\nfig.update_layout(title='Top ten most valuable players throught the IPL Seasons')\nfig.show()","e664de78":"win=matches[matches['toss_winner']==matches['winner']].count()\nloose=matches[matches['toss_winner']!=matches['winner']].count()\n\n# matches won when won the toss\nfig = px.bar(matches, x=[win[1],loose[1]],\n             y=['win','loose'],\n             color=['win','loose'],\n             labels={\n                     'x': \"Number of matches won\",\n                     'y': \"Match Result\"\n                     \n                 })\nfig.update_layout(title='Influence of toss on match result')\nfig.show()","b0ccc145":"# Toss influence in each venue\n\nchinnaswamy_win=matches[(matches['toss_winner']==matches['winner'])&(matches['venue']=='M Chinnaswamy Stadium')].count()[0]\nchinnaswamy_loose=matches[(matches['toss_winner']!=matches['winner'])&(matches['venue']=='M Chinnaswamy Stadium')].count()[0]\n\nEden_win=matches[(matches['toss_winner']==matches['winner'])&(matches['venue']=='Eden Gardens')].count()[0]\nEden_loose=matches[(matches['toss_winner']!=matches['winner'])&(matches['venue']=='Eden Gardens')].count()[0]\n\n\nFeroz_win=matches[(matches['toss_winner']==matches['winner'])&(matches['venue']=='Feroz Shah Kotla')].count()[0]\nFeroz_loose=matches[(matches['toss_winner']!=matches['winner'])&(matches['venue']=='Feroz Shah Kotla')].count()[0]\n\nWankhede_win=matches[(matches['toss_winner']==matches['winner'])&(matches['venue']=='Wankhede Stadium')].count()[0]\nWankhede_loose=matches[(matches['toss_winner']!=matches['winner'])&(matches['venue']=='Wankhede Stadium')].count()[0]\n\nRG_win=matches[(matches['toss_winner']==matches['winner'])&(matches['venue']=='Rajiv Gandhi International Stadium, Uppal')].count()[0]\nRG_loose=matches[(matches['toss_winner']!=matches['winner'])&(matches['venue']=='Rajiv Gandhi International Stadium, Uppal')].count()[0]\n\n\n\nfig = go.Figure(data=[\n    go.Bar(name='Rajiv Gandhi International Stadium, Uppal', \n           x=['win','loose'],\n           y=[RG_win,RG_loose]),\n    go.Bar(name='Wankhede Stadium',\n           x=['win','loose'], \n           y=[Wankhede_win,Wankhede_loose]),\n    go.Bar(name='Feroz Shah Kotla', \n           x=['win','loose'],\n           y=[Feroz_win,Feroz_loose]),\n    go.Bar(name='Eden Gardens',\n           x=['win','loose'], \n           y=[Eden_win,Eden_loose]),\n    go.Bar(name='M Chinnaswamy Stadium', \n           x=['win','loose'],\n           y=[chinnaswamy_win,chinnaswamy_loose]),\n])\n# Change the bar mode\nfig.update_layout(title='Match results comparison with toss results in various venues')\nfig.update_layout(\n    xaxis_title=\"Win \/ loose\",\n    yaxis_title=\"Count\",\n    legend_title=\"Venue Name\",\n)\nfig.show()","7b29d70a":"# decision influence of toss on result\nwinner_field=matches[(matches['toss_winner']==matches['winner'])& (matches['toss_decision']=='field')].count()[0]\nwinner_bat=matches[(matches['toss_winner']==matches['winner'])& (matches['toss_decision']!='field')].count()[0]\n# matches won when won the toss\nfig = px.bar(matches, x=[winner_field,winner_bat],\n             y=['Field','Bat'],\n             color=['Field','Bat'],\n             labels={\n                     'x': \"Decision\",\n                     'y': \"Count\"\n                     \n                 })\nfig.update_layout(title='Influence of toss Decision on match result')\nfig.show()","2889c528":"# Let us look the same for our venues\n\nchinnaswamy_field=matches[(matches['toss_winner']==matches['winner'])&\n                        (matches['venue']=='M Chinnaswamy Stadium')&\n                        (matches['toss_decision']=='field')].count()[0]\nchinnaswamy_bat=matches[(matches['toss_winner']!=matches['winner'])&\n                          (matches['venue']=='M Chinnaswamy Stadium')&\n                          (matches['toss_decision']!='field')].count()[0]\n\nEden_field=matches[(matches['toss_winner']==matches['winner'])&\n                 (matches['venue']=='Eden Gardens')&\n                 (matches['toss_decision']=='field')].count()[0]\nEden_bat=matches[(matches['toss_winner']!=matches['winner'])&\n                   (matches['venue']=='Eden Gardens')&\n                   (matches['toss_decision']!='field')].count()[0]\n\n\nFeroz_field=matches[(matches['toss_winner']==matches['winner'])&\n                  (matches['venue']=='Feroz Shah Kotla')&\n                  (matches['toss_decision']=='field')].count()[0]\nFeroz_bat=matches[(matches['toss_winner']!=matches['winner'])&\n                    (matches['venue']=='Feroz Shah Kotla')&\n                    (matches['toss_decision']!='field')].count()[0]\n\nWankhede_field=matches[(matches['toss_winner']==matches['winner'])&\n                     (matches['venue']=='Wankhede Stadium')& \n                     (matches['toss_decision']=='field')].count()[0]\nWankhede_bat=matches[(matches['toss_winner']!=matches['winner'])\n                       &(matches['venue']=='Wankhede Stadium')\n                       & (matches['toss_decision']!='field')].count()[0]\n\nRG_field=matches[(matches['toss_winner']==matches['winner'])\n               &(matches['venue']=='Rajiv Gandhi International Stadium, Uppal')& \n               (matches['toss_decision']=='field')].count()[0]\nRG_bat=matches[(matches['toss_winner']!=matches['winner'])&\n                 (matches['venue']=='Rajiv Gandhi International Stadium, Uppal')\n                 & (matches['toss_decision']!='field')].count()[0]\n\n\n\nfig = go.Figure(data=[\n    go.Bar(name='Rajiv Gandhi International Stadium, Uppal', \n           x=['Field','Bat'],\n           y=[RG_field,RG_bat]),\n    go.Bar(name='Wankhede Stadium',\n           x=['Field','Bat'], \n           y=[Wankhede_field,Wankhede_bat]),\n    go.Bar(name='Feroz Shah Kotla', \n           x=['Field','Bat'],\n           y=[Feroz_field,Feroz_bat]),\n    go.Bar(name='Eden Gardens',\n           x=['Field','Bat'], \n           y=[Eden_field,Eden_bat]),\n    go.Bar(name='M Chinnaswamy Stadium', \n           x=['Field','Bat'],\n           y=[chinnaswamy_field,chinnaswamy_bat]),\n])\n# Change the bar mode\nfig.update_layout(title='Match results comparison with toss Decision results in various venues')\nfig.update_layout(\n    xaxis_title=\"Field \/ Bat\",\n    yaxis_title=\"Count\",\n    legend_title=\"Venue Name\",\n)\nfig.show()","397a8294":"# teams with most wins\nmatches['winner'].value_counts()[:5]\n\n# Number of matches played per venue\nfig = px.bar(matches, x=matches['winner'].value_counts().keys()[:5],\n             y=matches['winner'].value_counts()[:5],\n             color=matches['winner'].value_counts().keys()[:5],\n             labels={\n                     'x': \"Team name\",\n                     'y': \"Total number of Matches Won\"\n                     \n                 })\nfig.update_layout(title='Top five most consistant teams throught the IPL Seasons')\nfig.show()","eef47303":"Mumbai_field=matches[(matches['winner']=='Mumbai Indians')& \n        (matches['toss_winner']=='Mumbai Indians')&\n       (matches['toss_decision']=='field')].count()[0]\nMumbai_bat=matches[(matches['winner']=='Mumbai Indians')& \n        (matches['toss_winner']=='Mumbai Indians')&\n       (matches['toss_decision']!='field')].count()[0]\n\nKolkata_field=matches[(matches['winner']=='Kolkata Knight Riders')& \n        (matches['toss_winner']=='Kolkata Knight Riders')&\n       (matches['toss_decision']=='field')].count()[0]\nKolkata_bat=matches[(matches['winner']=='Kolkata Knight Riders')& \n        (matches['toss_winner']=='Kolkata Knight Riders')&\n       (matches['toss_decision']!='field')].count()[0]\n\nChennai_field=matches[(matches['winner']=='Chennai Super Kings')& \n        (matches['toss_winner']=='Chennai Super Kings')&\n       (matches['toss_decision']=='field')].count()[0]\nChennai_bat=matches[(matches['winner']=='Chennai Super Kings')& \n        (matches['toss_winner']=='Chennai Super Kings')&\n       (matches['toss_decision']!='field')].count()[0]\n\nBangalore_field=matches[(matches['winner']=='Royal Challengers Bangalore')& \n        (matches['toss_winner']=='Royal Challengers Bangalore')&\n       (matches['toss_decision']=='field')].count()[0]\nBangalore_bat=matches[(matches['winner']=='Royal Challengers Bangalore')& \n        (matches['toss_winner']=='Royal Challengers Bangalore')&\n       (matches['toss_decision']!='field')].count()[0]\n\nPunjab_field=matches[(matches['winner']=='Kings XI Punjab')& \n        (matches['toss_winner']=='Kings XI Punjab')&\n       (matches['toss_decision']=='field')].count()[0]\nPunjab_bat=matches[(matches['winner']=='Kings XI Punjab')& \n        (matches['toss_winner']=='Kings XI Punjab')&\n       (matches['toss_decision']!='field')].count()[0]\n\n\nfig = go.Figure(data=[\n    go.Bar(name='Mumbai Indians', \n           x=['Field','Bat'],\n           y=[Mumbai_field,Mumbai_bat]),\n    go.Bar(name='Kolkata Knight Riders',\n           x=['Field','Bat'], \n           y=[Kolkata_field,Kolkata_bat]),\n    go.Bar(name='Chennai Super Kings', \n           x=['Field','Bat'],\n           y=[Chennai_field,Feroz_bat]),\n    go.Bar(name='Royal Challengers Bangalore',\n           x=['Field','Bat'], \n           y=[Bangalore_field,Bangalore_bat]),\n    go.Bar(name='Kings XI Punjab', \n           x=['Field','Bat'],\n           y=[Punjab_field,Punjab_bat]),\n])\n# Change the bar mode\nfig.update_layout(title='Match results comparison with toss Decision results in various Teams')\nfig.update_layout(\n    xaxis_title=\"Field \/ Bat\",\n    yaxis_title=\"Count\",\n    legend_title=\"Team Name\",\n)\nfig.show()","9fce8cf3":"# Number of times Clean sheet 10 wicket victory\nmatches[matches['win_by_wickets']==10]['winner'].value_counts()","d368febf":"fig = px.pie(matches,\n             values=matches[matches['win_by_wickets']==10]['winner'].value_counts(), \n             names=matches[matches['win_by_wickets']==10]['winner'].value_counts().keys(),\n            color_discrete_sequence=px.colors.sequential.RdBu)\nfig.update_layout(\n    title='Teams with 10 wicket victory',\n    legend_title=\"Team Name \"\n)\nfig.show()","b50905b1":"matches[matches['win_by_runs']>50]['winner'].value_counts()","496be6a3":"# sub plot piecharts\nfrom plotly.subplots import make_subplots\n\n\nfig = make_subplots(1, 2, specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=['Win By Runs >50', 'Win by 10 wickets'])\n\nfig.add_trace(go.Pie(labels=matches[matches['win_by_runs']>50]['winner'].value_counts().keys(),\n                     values=matches[matches['win_by_runs']>50]['winner'].value_counts(),\n                     scalegroup='one',\n                    ),\n                      1, 1)\n\nfig.add_trace(go.Pie(labels=matches[matches['win_by_wickets']==10]['winner'].value_counts().keys(), \n                     values=matches[matches['win_by_wickets']==10]['winner'].value_counts(), \n                     scalegroup='one'), 1, 2)\n\nfig.update_layout(\n    title='Brilliant performance by various teams',\n    legend_title=\"Team Name\",\n)\nfig.show()","46fbc0b9":"umpire1=matches['umpire1'].value_counts()\numpire2=matches['umpire2'].value_counts()\nnew_umpire={}\nfor i in umpire1.keys():\n    if i in umpire2:\n        new_umpire[i]=umpire1[i]+umpire2[i]\n    else:\n        new_umpire[i]=umpire1[i]\n\n\nfig = px.bar(matches, x=list(new_umpire.keys())[:5],\n             y=list(new_umpire.values())[:5],\n             color=list(new_umpire.keys())[:5],\n             labels={\n                     'x': \"Umpire Name\",\n                     'y': \"Total number of Matches\"\n                     \n                 })\nfig.update_layout(title='Top five most consistant Umpires throught the IPL Seasons')\nfig.show()","0f6574c6":"deliveries=pd.read_csv('\/kaggle\/input\/ipl\/deliveries.csv')\ndeliveries.head()","b1d0d561":"deliveries.info()","47fccf55":"deliveries.describe()","34f37546":"fig = px.bar(matches, x=deliveries['dismissal_kind'].value_counts().keys(),\n             y=deliveries['dismissal_kind'].value_counts(),\n             color=deliveries['dismissal_kind'].value_counts().keys(),\n             labels={\n                     'x': \"Medium of Dismissal\",\n                     'y': \"Total number of Dismissals\"\n                     \n                 })\nfig.update_layout(title='Number of Dismissials')\nfig.show()","1a6823df":"print(\"Number of super overs {}\".format(len(deliveries[deliveries['is_super_over']==1]['match_id'].unique())))","d6560b9e":"bowlers=dict.fromkeys(list(deliveries['bowler'].unique()),0)\nwicket_bowls=deliveries[deliveries.player_dismissed.isnull()==False]\nfor i in range(wicket_bowls.shape[0]):\n    bowlers[wicket_bowls.iloc[i]['bowler']]+=1\nbowlers=dict(sorted(bowlers.items(), key=lambda item: item[1],reverse=True))\ny=list(bowlers.values())[:20]\nx=list(bowlers.keys())[:20]\nbw=x\nfig = px.scatter(x=x, y=y ,color=x, size=y , labels={\n                     'x': \"Bowler Name\",\n                     'y': \"Number of wickets\",\n                     'color':'Player Name'\n                     \n                 })\nfig.update_layout(title='Number of dismissal by each bowler (Top 20)')\nfig.show()","b6259303":"deliveries['batsman_runs'].value_counts()\n\nfig = px.bar(matches, x=deliveries['batsman_runs'].value_counts().keys(),\n             y=deliveries['batsman_runs'].value_counts(),\n             color=deliveries['batsman_runs'].value_counts().keys(),\n             labels={\n                     'x': \"Run value\",\n                     'y': \"Total number\"\n                     \n                 })\nfig.update_layout(title='Count for each Run types')\nfig.show()","e5f664fe":"wides=deliveries['wide_runs'].sum()\nbye=deliveries['bye_runs'].sum()\nlegbye=deliveries['legbye_runs'].sum()\nnoball=deliveries['noball_runs'].sum()\npenalty=deliveries['penalty_runs'].sum()\n\ny=[wides,bye,legbye,noball,penalty]\nx=['wide_runs','bye_runs','legbye_runs','noball_runs', 'penalty_runs']\nfig = px.pie(deliveries,\n             values=y, \n             names=x)\nfig.update_layout(\n    title='Extra Runs',\n    legend_title=\"Extra Runs medium \"\n)\nfig.show()","38318753":"bowlers=dict.fromkeys(deliveries['bowler'].unique(),0)\nfor i in range(deliveries.shape[0]):\n    if deliveries.iloc[i]['wide_runs']>0:\n        bowlers[deliveries.iloc[i]['bowler']]+=1\nbowlers=dict(sorted(bowlers.items(), key=lambda item: item[1],reverse=True))\ny=list(bowlers.values())[:5]\nx=list(bowlers.keys())[:5]\n\nfig = px.scatter(x=x, y=y ,color=x, size=y , labels={\n                     'x': \"Bowler Name\",\n                     'y': \"Number of wide balls\",\n                     'color':'Player Name'\n                     \n                 })\nfig.update_layout(title='Number of wides by each bowler (Top 5)')\nfig.show()","f7b28cd9":"bowlers=dict.fromkeys(deliveries['bowler'].unique(),0)\nfor i in range(deliveries.shape[0]):\n    if deliveries.iloc[i]['bye_runs']>0:\n        bowlers[deliveries.iloc[i]['bowler']]+=1\nbowlers=dict(sorted(bowlers.items(), key=lambda item: item[1],reverse=True))\ny=list(bowlers.values())[:5]\nx=list(bowlers.keys())[:5]\n\nfig = px.scatter(x=x, y=y ,color=x, size=y , labels={\n                     'x': \"Bowler Name\",\n                     'y': \"Number of byes balls\",\n                     'color':'Player Name'\n                     \n                 })\nfig.update_layout(title='Number of byes by each bowler (Top 5)')\nfig.show()","49da765d":"bowlers=dict.fromkeys(deliveries['bowler'].unique(),0)\nfor i in range(deliveries.shape[0]):\n    if deliveries.iloc[i]['legbye_runs']>0:\n        bowlers[deliveries.iloc[i]['bowler']]+=1\nbowlers=dict(sorted(bowlers.items(), key=lambda item: item[1],reverse=True))\ny=list(bowlers.values())[:5]\nx=list(bowlers.keys())[:5]\n\nfig = px.scatter(x=x, y=y ,color=x, size=y , labels={\n                     'x': \"Bowler Name\",\n                     'y': \"Number of legbyes balls\",\n                     'color':'Player Name'\n                     \n                 })\nfig.update_layout(title='Number of legbyes by each bowler (Top 5)')\nfig.show()","d9a1df1b":"bowlers=dict.fromkeys(deliveries['bowler'].unique(),0)\nfor i in range(deliveries.shape[0]):\n    if deliveries.iloc[i]['noball_runs']>0:\n        bowlers[deliveries.iloc[i]['bowler']]+=1\nbowlers=dict(sorted(bowlers.items(), key=lambda item: item[1],reverse=True))\ny=list(bowlers.values())[:5]\nx=list(bowlers.keys())[:5]\n\nfig = px.scatter(x=x, y=y ,color=x, size=y , labels={\n                     'x': \"Bowler Name\",\n                     'y': \"Number of noball balls\",\n                     'color':'Player Name'\n                     \n                 })\nfig.update_layout(title='Number of noball by each bowler (Top 5)')\nfig.show()","a375a781":"since the notebook is focused on visualization and exploration we are simply droping rows with null values","06a7b25d":"# Analysis","6afb8fd5":"#### We can see Fielding first often results a winning situation","5e75277b":"#### The plot shows the top most five played venues ","df0f2d29":"# Matches Data","b4555464":"### We can see Field first has some advantage though","c55fcf22":"we can see all the values for 3rd empire is nulll so we can simply remove the column","0c32ecdb":"#### The plot shows maximum number of matches were held in the year 2013 with a total of 76 matches","79d80bbd":"### As of overall aggrigate Toss has Not much effect on the match result","dc217ed1":"# Exploratery Data Analysis","45d9d755":"#### Universe Boss is most valuable player","eda569c3":"#### Mumbai Indians is the most consistant team in overall IPL","337ceba7":"we still got 625 datapoints toplay with","dcc31d5f":"# Deliveries"}}