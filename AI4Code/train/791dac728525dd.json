{"cell_type":{"de9328d2":"code","236daf74":"code","b082e4b0":"code","e5aab9af":"code","274b1045":"code","a0cc6978":"code","1cab377e":"code","a9be7fd5":"code","e283c73c":"code","311e6e54":"code","a844a897":"code","bc7aa548":"code","855cdd9c":"code","0238d261":"code","f625985f":"code","da571de2":"code","67217e73":"code","50d68917":"code","a7672ad4":"code","dbb0c56e":"code","2c5af564":"code","6b8df113":"code","54fdbc6f":"code","6a43c8e8":"code","8bef6537":"code","03cf573e":"code","6782b756":"code","9869ff9c":"code","7199cf4b":"code","0259f03d":"code","7951e65c":"code","10520bb1":"code","007ab928":"code","8f36951f":"code","a4e66330":"code","60ebf3f1":"code","6390b499":"code","a731d905":"code","5ad5f645":"code","2baaa1c6":"code","ccdca44f":"code","8dc728c1":"code","72fc6f76":"code","58ff7651":"code","f9609c73":"code","93a1ed9a":"code","b762cbdd":"code","da0dd026":"code","05b3d1b8":"code","6437c9aa":"code","41264ce8":"code","652ab633":"code","fdcd7203":"code","0418f3bb":"code","6ddc8060":"code","63d63af5":"code","1aebcf77":"code","ee04531f":"code","b525146c":"code","80af036d":"code","ddf3fd2e":"code","38cae14a":"code","ea43bc2e":"code","57738669":"code","d68c180a":"code","584a0470":"code","253d9a06":"code","26c30c1d":"code","9cca76c9":"code","1ed7ff90":"markdown","d00c6c9c":"markdown","efdbf9f2":"markdown","1e625d7a":"markdown","d09e759f":"markdown"},"source":{"de9328d2":"# importing liabries \n# Import liabries (first and most important is importing liabries we will import first of because when every we has to look we only look at the top of notebook)\n\nimport pandas as pd # use for data wrangling\nimport numpy as np # use for Nummerical Operation \nimport seaborn as sns \nimport matplotlib.pyplot as plt\nfrom pylab import rcParams\n\n# Warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n\n\n%matplotlib inline","236daf74":"# Now let's load the data \ndata  = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv')\nreviews  = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore_user_reviews.csv')","b082e4b0":"# geeting first look at data \ndata.head()","e5aab9af":"data.shape","274b1045":"data.info()","a0cc6978":"data.describe()","1cab377e":"#let have loot at missing data \ntotal  = data.isnull().sum().sort_values(ascending=False)\npercent =  (data.isnull().sum() \/ data.isnull().count()).sort_values(ascending=False)\nmissing_data  = pd.concat([total,percent],axis=1,keys=['Total','Percent'])\nmissing_data.head()","a9be7fd5":"# droping all the rows that are missing \n# it is not good idea to drop all the rows that are missing but we have very little missing data that's why we are \ndata.dropna(how='any',inplace=True)","e283c73c":"# again look at data \ntotal  = data.isnull().sum().sort_values(ascending=False)\npercent =  (data.isnull().sum() \/ data.isnull().count()).sort_values(ascending=False)\nmissing_data  = pd.concat([total,percent],axis=1,keys=['Total','Percent'])\nmissing_data.head()","311e6e54":"data[\"Last Updated\"] = pd.to_datetime(data['Last Updated'])\ndata['year_added']=data['Last Updated'].dt.year\ndata['month_added']=data['Last Updated'].dt.month","a844a897":"# importing visuliziction liabries\nimport plotly\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True)","bc7aa548":"#let's look at how many percent of paid and free apps\ncolumn = 'Type'\ngrouped = data[column].value_counts().reset_index()\ngrouped = grouped.rename(columns={column:'count','index':column})\n\n# Now plot the data\ntrace = go.Pie(labels=grouped[column],values=grouped['count'],pull=[0.05,0])\nlayout = {'title':'Target(0 = No , 1= Yes )'}\nfig = go.Figure(data=[trace],layout=layout)\niplot(fig)","855cdd9c":"# lets divide the data into two DataFrames\ndata_free  = data[data['Type'] == 'Free']\ndata_paid =  data[data['Type'] == 'Paid']","0238d261":"#let' see that years columns \ncol = 'year_added'\n# for free apps\nv1  = data_free[col].value_counts().reset_index()\nv1 = v1.rename(columns={col:'count','index':col})\nv1['percent']  = v1['count'].apply(lambda x:100*x\/sum(v1['count']))\nv1= v1.sort_values(col)\n# for paid apps\nv2  = data_paid[col].value_counts().reset_index()\nv2 = v2.rename(columns={col:'count','index':col})\nv2['percent'] = v2['count'].apply(lambda x:100*x\/sum(v2['count']))\nv2 = v2.sort_values(col)\n\ntrace1 = go.Scatter(x=v1[col],y=v1['count'],name='Free',marker=dict(color=\"#a678de\"))\ntrace2 = go.Scatter(x=v2[col],y=v2['count'],name='Paid',marker=dict(color='#6ad49b'))\ny=[trace1,trace2]\nlayout = {'title':'app updated or added over the years',\n         'xaxis':{'title':'years'}}\nfig = go.Figure(data=y,layout=layout)\niplot(fig)","f625985f":"# let' try to create function\ndef ploting_chart_two_column(col,title,xtitle,plot_type=go.Scatter):\n    v1=data_free[col].value_counts().reset_index()\n    v1=v1.rename(columns={col:'count','index':col})\n\n    v1['percent']=v1['count'].apply(lambda x : 100*x\/sum(v1['count']))\n    v1=v1.sort_values(col)\n    \n    v2=data_paid[col].value_counts().reset_index()\n    v2=v2.rename(columns={col:'count','index':col})\n    v2['percent']=v2['count'].apply(lambda x : 100*x\/sum(v2['count']))\n    v2=v2.sort_values(col)\n    \n    trace1 =  plot_type(x=v1[col], y=v1[\"count\"], name=\"Free\", marker=dict(color=\"#a678de\"))\n    trace2 = plot_type(x=v2[col], y=v2[\"count\"], name=\"Paid\", marker=dict(color=\"#6ad49b\"))\n    y = [trace1, trace2]\n    layout={'title':title,'xaxis':{'title':xtitle}}\n    fig = go.Figure(data=y, layout=layout)\n    return iplot(fig)\n    ","da571de2":"def ploting_chart_one_column(data_frame,col,title,xtitle,names,plot_type=go.Scatter):\n    v1=data_frame[col].value_counts().reset_index()\n    v1=v1.rename(columns={col:'count','index':col})\n\n    v1['percent']=v1['count'].apply(lambda x : 100*x\/sum(v1['count']))\n    v1=v1.sort_values(col)\n    \n    \n    trace = plot_type(x=v1[col], y=v1[\"count\"], name=names, marker=dict(color=\"#6ad49b\"))\n    layout={'title':title,'xaxis':{'title':xtitle}}\n    fig = go.Figure(data=trace, layout=layout)\n    return iplot(fig)","67217e73":"ploting_chart_two_column('year_added','Apps added over the year','years',go.Scatter)","50d68917":"ploting_chart_two_column('month_added','Apps added over the Month','Month',go.Bar)","a7672ad4":"ploting_chart_two_column('Content Rating','Rating of Apps FREE VS PAID','Rating',go.Scatter)","dbb0c56e":"ploting_chart_one_column(data_free,'Content Rating','Rating of Apps FREE','Rating','Free',go.Bar)","2c5af564":"ploting_chart_one_column(data_paid,'Content Rating','Rating of Paid Apps','Rating','Paid',go.Bar)","6b8df113":"ploting_chart_two_column('Rating','Rating of the free and Paid Apps','Rating',go.Scatter)","54fdbc6f":"# Free App Rating\nploting_chart_one_column(data_free,'Rating','Free App Rating','Rating','FREEEE\u0116',go.Bar)","6a43c8e8":"ploting_chart_one_column(data_paid,'Rating','Paid App Rating','Rating','PaiDDDD',go.Bar)","8bef6537":"ploting_chart_two_column('Category','App Category','All Category')","03cf573e":"ploting_chart_two_column('Android Ver','Android Version','All Versions')","6782b756":"ploting_chart_two_column('Installs','Installed Apps','All Install Apps')","9869ff9c":"# Now we can seee that we dont have any missing values now let move forward","7199cf4b":"# we have lost ... rows\ndata.shape \n10841 - 9360 ","0259f03d":"# Changing Installs to number \ndata['Installs']= data['Installs'].str.replace('+','')\ndata['Installs'] =data['Installs'].str.replace(',','')\ndata['Installs'] = data['Installs'].astype('int')","7951e65c":"data.info()","10520bb1":"RatingL = data['Content Rating'].unique()\nRatingDict  = {}\n\nfor i in range(len(RatingL)):\n    RatingDict[RatingL[i]] = i\n    \ndata['Content Rating'] = data['Content Rating'].map(RatingDict).astype('int')","007ab928":"data.info()","8f36951f":"# cleaning of genres\nGenresL = data.Genres.unique()\nGenresDict  = {}\n\nfor i in range(len(GenresL)):\n    GenresDict[GenresL[i]] = i\ndata['Genres_c'] = data['Genres'].map(GenresDict).astype(int)","a4e66330":"def price_clean(price):\n    if price == '0':\n        return 0 \n    else:\n        price = price[1:]\n        price =float(price)\n        return price\n\ndata['Price'] = data['Price'].map(price_clean).astype(float)","60ebf3f1":"# converting the number reviews column into integers\ndata['Reviews'] = data['Reviews'].astype(int)","6390b499":"data.info()","a731d905":"data2  = pd.get_dummies(data,columns=['Category'])","5ad5f645":"print(len(data['Category'].unique()))\nprint('\\n',data['Category'].unique())","2baaa1c6":"# data['Reviews'] = data['Reviews'].astype('int')\ndata['Reviews'] = data['Reviews'].apply(lambda x:int(x))","ccdca44f":"data.info()","8dc728c1":"len(data['Size'].unique())","72fc6f76":"len(data[data.Size == 'Varies with device'])\n#change it to na first","58ff7651":"data.replace('Varies with device',np.nan,inplace=True)","f9609c73":"data.Size  = (data.Size.replace(r'[kM]+$','',regex=True).astype(float)\n             * \\\n             data.Size.str.extract(r'[\\d\\.]+([KM]+)',expand=False).fillna(1).replace(['k','M'],[10 **3,10**6]).astype(int))","93a1ed9a":"data.Size.fillna(data.groupby('Category')['Size'].transform('mean'),inplace=True)","b762cbdd":"data['Free'] = data['Type'].map(lambda s:1 if s == 'Free' else 0)\ndata.drop(['Type'],axis=1,inplace=True)","da0dd026":"data.info()","05b3d1b8":"data[data['Content Rating'] == 'Unrated']","6437c9aa":"data = data[data['Content Rating'] != 'Unrated']\n#drop Unrated because it only contain one record","41264ce8":"data['Genres']  = data['Genres'].str.split(';').str[0]","652ab633":"print(len(data['Genres'].unique()),'Genres')\n\nprint('\\n',data['Genres'].unique())","fdcd7203":"data['Genres'].replace('Music & Audio','Music',inplace=True)","0418f3bb":"data[['Genres','Rating']].groupby(['Genres'],as_index=False).mean().describe()","6ddc8060":"# Now come the funny and most interesting part Machine Learning","63d63af5":"catgry  = pd.get_dummies(data['Category'],prefix='catg',drop_first=True)\ncr = pd.get_dummies(data['Content Rating'],prefix='cr',drop_first=True)\nframes = [data,catgry,cr]\ndata = pd.concat(frames,axis=1)\ndata.drop(['Category','Content Rating','App','Size','Price','Genres','Last Updated','Current Ver','Android Ver'],axis=1,inplace=True)","1aebcf77":"X  = data.drop('Rating',axis=1)\ny = data['Rating'].values\ny = y.astype('int')","ee04531f":"# Spliting the data into 80 and 20","b525146c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=0)","80af036d":"from sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.fit_transform(X_test)","ddf3fd2e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # this is used for the plot the graph \nimport seaborn as sns # used for plot interactive graph.\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.svm import SVC\n%matplotlib inline","38cae14a":"# Testing and Tranning Model\n# Logestic Regression\nlr_c  = LogisticRegression(random_state=0)\nlr_c.fit(X_train,y_train)\nlr_pred  = lr_c.predict(X_test)\nlr_cm = confusion_matrix(y_test,lr_pred)\nlr_ac = accuracy_score(y_test,lr_pred)\nprint('LogisticRegression Accuracy: ',lr_cm)","ea43bc2e":"plt.figure(figsize=(10,5))\nplt.title('Logistic Regression Confussion Metrix')\nsns.heatmap(lr_cm,annot=True,cmap='Blues',fmt='d',cbar=False)\nplt.show()","57738669":"# DecisionTree Classifier\ndtree_c  = DecisionTreeClassifier(criterion='entropy',random_state=0)\ndtree_c.fit(X_train,y_train)\ndtree_pred = dtree_c.predict(X_test)\ndtree_cm = confusion_matrix(y_test,dtree_pred)\ndtree_ac  = accuracy_score(dtree_pred,y_test)","d68c180a":"plt.figure(figsize=(10,5))\nplt.title('dtree_cm')\nsns.heatmap(dtree_cm,annot=True,fmt='d',cbar=False)\nprint('DecisionTree_Classifier_accuracy',dtree_ac)","584a0470":"#SVM regressor\nsvc_r  = SVC(kernel='rbf')\nsvc_r.fit(X_train,y_train)\nsvc_pred = svc_r.predict(X_test)\nsvm_cm = confusion_matrix(y_test,svc_pred)\nsvm_ac = accuracy_score(y_test,svc_pred)","253d9a06":"# RandomForest\nrdf_c  = RandomForestClassifier(n_estimators=10,criterion='entropy',random_state=0)\nrdf_c.fit(X_train,y_train)\nrdf_predict  = rdf_c.predict(X_test)\nrdf_cm  = confusion_matrix(y_test,rdf_predict)\nrdf_ac = accuracy_score(y_test,rdf_predict)\n","26c30c1d":"plt.figure(figsize=(10,5))\nplt.title('rdf_cm')\nsns.heatmap(rdf_cm,annot=True,cmap='Blues',fmt='d',cbar='False')\nprint('Random Forest Accuracy',rdf_ac)","9cca76c9":"# Models comparision\n%matplotlib inline\nmodel_accuracy = pd.Series(data=[lr_ac,dtree_ac,svm_ac,rdf_ac],\n                          index=['Logistic_Regression','DescisionTree_Classifier','SVM_regressor_accuracy','RandomForest'])\nfig = plt.figure(figsize=(8,8))\nmodel_accuracy.sort_values().plot.barh()\nplt.title('Model Accuracy')","1ed7ff90":"### **Now Let's Cleanthe data**","d00c6c9c":"### Hello Kaggler Welcome to My Notebook in this notebook we will look at google play store data and try to understand how google Play Store work.we will look at\n- Which is the most popular Category\n- Which app is prefered FREE OR Paid\n- Does installion,Size effect Rating\n","efdbf9f2":"**Let's First Try to understand data via visuliziaction**","1e625d7a":"# Introduction to Variable\n- App: Application name\n- Category: Category the app belongs to\n- Rating: Overall user rating of the app (as when scraped)\n- Reviews: Number of user reviews for the app (as when scraped)\n- Size: Size of the app (as when scraped)\n- Installs: Number of user downloads\/installs for the app (as when scraped)\n- Type: Paid or Free\n- Price: Price of the app (as when scraped)\n- Content Rating: Age group the app is targeted at - Children \/ Mature 21+ \/ Adult\n- Genres: An app can belong to multiple genres (apart from its main category). For eg, a musical family game will belong to Music, Game, Family genres.\n- Last Updated: Date when the app was last updated on Play Store (as when scraped)\n- Current Ver: Current version of the app available on Play Store (as when scraped)\n- Android Ver: Min required Android version (as when scraped)","d09e759f":"* ![](https:\/\/images.news18.com\/ibnlive\/uploads\/2020\/10\/1603625539_google_playstore_adwares.jpg?impolicy=website&width=1200&height=800)"}}