{"cell_type":{"f5bbc0dc":"code","138313fa":"code","869ed236":"code","08c3bc0a":"code","b252d111":"markdown","9a5c753b":"markdown","d8a465c5":"markdown","163462e3":"markdown","d45f9029":"markdown","a98983ac":"markdown","ca50606a":"markdown","16db6394":"markdown","a314f37e":"markdown","8b7bf7c6":"markdown","d3ce6b86":"markdown","8217e44b":"markdown","2666b673":"markdown","636338bf":"markdown","0e68ad2c":"markdown","4b10e24f":"markdown"},"source":{"f5bbc0dc":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_diabetes\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn import metrics","138313fa":"df2 = pd.read_csv(\"..\/input\/diabetescsv\/diabetes.csv\") # read data\ndf2.head(10)","869ed236":"X = df2.iloc[:,0:8] #stop is excluded\ny = df2.iloc[:,8] \nprint(\"features \\n\", X[0:5]) \nprint(\"target \\n\", y[0:5])","08c3bc0a":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)","b252d111":"## Learning Objectives\n1. Learn to implement a pipeline \n1. Learn to plot confusion matrix\n1. Learn to plot ROC curve\n1. Learn to generate a Classification Report","9a5c753b":"### Training and Test Datasets\n* 70% data for training and 30% data for test","d8a465c5":"## Activity 3  Plot Receiver Operating Characteristic (ROC)  Curve\n* You're asked to plot the ROC curve and calculate the AUC value for the best decision tree created in Activity 1. The code is similar to that in Lecture Part 4.\n\n### Calculating prediction scores  \n* Use function `clf.predict_proba(X_test)[:,1]` to calculate prediction scores","163462e3":"### Pipeline combining MinMaxscaler and decision tree plus Grid Search of hyperparameters \n* Create a pipeline with a MinMax scaler and a decision tree.\n* Set hyperparameters of the decision tree in a pipeline with the following values:\n    * `criterion':['gini','entropy']`\n    * `max_depth':list(range(1,16))`\n* Apply Gridsearch to tuning hyperparameters.","d45f9029":"### Obtain the Best Decision Tree from Grid Search\n* Obtain the best model: `gs.best_estimator_`\n* Print best hyperparameters: `gs.best_params_`\n* Print the accuracy of the best decision tree\n* *Question:  the accuracy =?*","a98983ac":"### Compute Area Under the Receiver Operating Characteristic Curve (ROC AUC)\n* Use function `metrics.roc_auc_score`  compute **Area Under the ROC Curve** (ROC AUC) from prediction scores.\n* *Question:  which is larger between roc_auc and accuracy?*","ca50606a":"## Activity 2 Calculate and Visualize confusion matrix\n* You're asked to calculate the confusion matrix for the best decision tree that you have created in Activity 1. The code is similar to that in Lecture 11 Part 2. \n\n### Calculate and Visualize confusion matrix\n* Use function `confusion_matrix()` to calculate the confusion matrix","16db6394":"# Pipeline and Model Evaluation \n[COMP20121 Machine Learning for Data Analytics](https:\/\/sites.google.com\/site\/hejunhomepage\/Teaching\/machine-learning-for-data-analytics)\n\nAuthor: Jun He","a314f37e":"### References\n1. Pipelines and composite estimators: https:\/\/scikit-learn.org\/stable\/modules\/compose.html#pipeline \n1. Classification metrics: https:\/\/scikit-learn.org\/stable\/modules\/model_evaluation.html#classification-metrics\n1. Receiver operating characteristic (ROC):  https:\/\/scikit-learn.org\/stable\/modules\/model_evaluation.html#roc-metrics","8b7bf7c6":"## Activity 4 Generate a Classification Report\n* You're asked to generate a classification report for the best decision tree created in Activity 1. The code is similar to that in Lecture Part 5. \n\n### Classification Report\n* Use function `classification_report()` generates a report of a classifier\u2019s performance on each class\n* *Question: what are the meaning of precision,    recall,  f1-score,   support in the report?*\n* *Question: what are the meaning of macro avg and weighted avg?*","d3ce6b86":"### Split features and target\nSplit features and target variable","8217e44b":"## Activity 1 Implement Pipeline \nYour task is to implement a pipeline which combines a MinMaxScaler and a decision tree together. You will also use the grid search for tuning hyperparameters in the decision tree. \nThe implementation is similar to that in Lecture Part 1 except the data set. Please refer to the code in Part 1.\n\n### Load the diabetes dataset\n* The diabetes dataset, avaiable at https:\/\/www.kaggle.com\/uciml\/pima-indians-diabetes-database.\n* Import related Python libraries.\n* Load the diabetes dataset to a dataframe.","2666b673":"* Use function `plot_confusion_matrix` to plot confusionmatrix. Output is the percentages of TP, FP, TN, FN rather than their counts. \n* *Question:  the percentage of TP=?*","636338bf":"* Use function `plot_confusion_matrix` to plot confusionmatrix","0e68ad2c":"### Plot ROC Curve Automatically\n* Use function `metrics.plot_roc_curve` plot the  ROC curve","4b10e24f":"## Reflect\nBriefly note what you\u2019ve learnt, found easy and found challenging in your Jupyter notebook. Keep these notes safe and maintain a reflective log for each lab session."}}