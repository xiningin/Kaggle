{"cell_type":{"3de4f79b":"code","bb4edb49":"code","72a44651":"code","f7596491":"code","d3c77b3e":"code","3e7f5bb9":"code","12a64c53":"code","e791a959":"code","94e95a90":"code","8bcbd858":"code","7f5b7c5a":"code","2772e4a6":"code","a783c254":"code","7c40455c":"code","6d90bd63":"code","cf92460a":"code","4cc1a6f3":"code","18458f8d":"code","f5fca693":"code","07b3cb45":"code","de27e0ee":"code","19b59c18":"markdown","05f6619c":"markdown","e8773542":"markdown","e0909d38":"markdown","e8ddc260":"markdown"},"source":{"3de4f79b":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQmzU4Y5rRmpINpQi6cjSi1F9xPd3OF3BPwAnX-M52bUqBa4xc4&usqp=CAU',width=400,height=400)","bb4edb49":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","72a44651":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/turkish-calendar\/Turkish calendar.csv', delimiter=';', encoding = \"ISO-8859-1\", nrows = nRowsRead)\ndf.dataframeName = 'Turkish calendar.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","f7596491":"df.head()","d3c77b3e":"na_percent = (df.isnull().sum()\/len(df))[(df.isnull().sum()\/len(df))>0].sort_values(ascending=False)\n\nmissing_data = pd.DataFrame({'Missing Percentage':na_percent*100})\nmissing_data","3e7f5bb9":"na = (df.isnull().sum() \/ len(df)) * 100\nna = na.drop(na[na == 0].index).sort_values(ascending=False)\n\nf, ax = plt.subplots(figsize=(12,8))\nsns.barplot(x=na.index, y=na)\nplt.xticks(rotation='90')\nplt.xlabel('Features', fontsize=15)\nplt.title('Percentage Missing', fontsize=15)","12a64c53":"for col in ['SPECIAL_DAY_SK', 'SPECIAL_DAY_SK2' ]:\n    df[col] = df[col].fillna('None')","e791a959":"categorical_cols = [cname for cname in df.columns if\n                    df[cname].nunique() < 10 and \n                    df[cname].dtype == \"object\"]\n\n\n# Select numerical columns\nnumerical_cols = [cname for cname in df.columns if \n                df[cname].dtype in ['int64', 'float64']]","94e95a90":"print(categorical_cols)","8bcbd858":"print(numerical_cols)","7f5b7c5a":"plt.style.use('fivethirtyeight')\nsns.countplot(df['RAMADAN_FLAG'],linewidth=3,palette=\"Set2\",edgecolor='black')\nplt.show()","2772e4a6":"from sklearn.preprocessing import LabelEncoder\ncategorical_col = ('WEEKEND_FLAG', 'RAMADAN_FLAG', 'PUBLIC_HOLIDAY_FLAG', 'SPECIAL_DAY_SK', 'SPECIAL_DAY_SK2')\n        \n        \nfor col in categorical_col:\n    label = LabelEncoder() \n    label.fit(list(df[col].values)) \n    df[col] = label.transform(list(df[col].values))\n\nprint('Shape all_data: {}'.format(df.shape))","a783c254":"plt.rcParams['figure.figsize'] = (14,5)\nplt.subplot(1,2,1)\nsns.kdeplot(df['DAY_OF_WEEK_SK'][df.SEASON_SK == 1],shade = True,color = \"red\")\nplt.title('DAY_OF_WEEK_SK')\nplt.xlabel('DAY_OF_WEEK_SK Distribution ')","7c40455c":"# Let's See The Correlation Among The Features .\n\n# Below chart is used to visualize how one feature is correlated with every other Features Present in the dataset .\n# if we have two highly correlated features then we will consider only one of them to avoid overfitting .\n\n# since in our Dataset There is now two  features which are highly correlated ,\n# hence we have consider all the features for training our Model .\n\n\nplt.rcParams['figure.figsize'] = (10, 6)\nsns.heatmap(df.corr(),annot = True ,cmap = 'rainbow_r',annot_kws = {\"Size\":14})\nplt.title( \"Chart Shows Correlation Among Features   : \")","6d90bd63":"from scipy.stats import norm, skew\nnum_features = df.dtypes[df.dtypes != 'object'].index\nskewed_features = df[num_features].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nskewness = pd.DataFrame({'Skew' :skewed_features})\nskewness.head(15)","cf92460a":"numerical_df = df.select_dtypes(exclude='object')\n\nfor i in range(len(numerical_df.columns)):\n    f, ax = plt.subplots(figsize=(7, 4))\n    fig = sns.distplot(numerical_df.iloc[:,i].dropna(), rug=True, hist=False, label='UW', kde_kws={'bw':0.1})\n    plt.xlabel(numerical_df.columns[i])","4cc1a6f3":"#Codes from Mario Filho https:\/\/www.kaggle.com\/mariofilho\/live26-https-youtu-be-zseefujo0zq\nfrom category_encoders import OneHotEncoder\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, MaxAbsScaler\n\ncols_selected = ['RAMADAN_FLAG']\nohe = OneHotEncoder(cols=cols_selected, use_cat_names=True)\ndf_t = ohe.fit_transform(df[cols_selected+['NATIONAL_DAY_FLAG_SK']])\n\n#scaler = MaxAbsScaler()\nX = df_t.iloc[:,:-1]\ny = df_t.iloc[:, -1].fillna(df_t.iloc[:, -1].mean()) \/ df_t.iloc[:, -1].max()\n\nmdl = Ridge(alpha=0.1)\nmdl.fit(X,y)\n\npd.Series(mdl.coef_, index=X.columns).sort_values().head(10).plot.barh()","18458f8d":"df['DAY_OF_MONTH'].hist(figsize=(10,4), bins=20)","f5fca693":"ax = df['RAMADAN_FLAG'].value_counts().plot.barh(figsize=(10, 4))\nax.set_title('RAMADAN_FLAG Distribution', size=18)\nax.set_ylabel('RAMADAN_FLAG', size=10)\nax.set_xlabel('DAY_OF_WEEK_SK', size=10)","07b3cb45":"from scipy.stats import norm, skew #for some statistics\nimport seaborn as sb\nfrom scipy import stats #qqplot\n#Lets check the ditribution of the target variable (Placement?)\nfrom matplotlib import rcParams\n# figure size in inches\nrcParams['figure.figsize'] = 4,2\n\nsb.distplot(df['DAY_OF_MONTH'], fit=norm)\n\n#Get the QQ-plot\nfig = plt.figure()\nres = stats.probplot(df['DAY_OF_MONTH'], plot=plt)\nplt.show()","de27e0ee":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcRua6jVejV3qiUrYR25U44p-Wh5IkfofC19ZMa6uNkhMyWGk7vq&usqp=CAU',width=400,height=400)","19b59c18":"#Codes from Mario Filho https:\/\/www.kaggle.com\/mariofilho\/live26-https-youtu-be-zseefujo0zq","05f6619c":"Das War's.  Kaggle Notebook Runner: Mar\u00edlia Prata   @mpwolke ","e8773542":"turkishclass101.com","e0909d38":"#Codes from Vinod R https:\/\/www.kaggle.com\/vinodsunny1\/let-s-think-like-a-heart-surgeon","e8ddc260":"slowtravelguide.com"}}