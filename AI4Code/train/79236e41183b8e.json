{"cell_type":{"b9fc2d6c":"code","ae95fcde":"code","93d01850":"code","5cb7d97d":"code","44d8ece8":"code","606a1c3c":"code","94f5fe79":"code","5da83aa7":"code","bab7897e":"code","76c927f2":"code","066ee59b":"code","90bac59c":"code","8ecc27b3":"code","7d49dc25":"code","91ca2b92":"code","f4d558e3":"code","a624baf0":"code","fbeeee74":"code","2672b411":"code","783ec91f":"code","e98a27e7":"code","099300b5":"code","6a80da03":"code","bbd321bf":"code","ddf447d6":"code","925954b2":"code","58927df3":"code","172eb0db":"code","e2ce1039":"code","f2b2e55f":"code","7e5619f9":"markdown","b21862cf":"markdown","4059ce7a":"markdown","df029143":"markdown","1a600ee1":"markdown","d8bba765":"markdown"},"source":{"b9fc2d6c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ae95fcde":"#importing libraries for data visualisation \nimport matplotlib.pyplot as plt \nimport seaborn as sns \nimport plotly.express as px  \nimport plotly.graph_objects as go  \nfrom wordcloud import WordCloud \n%matplotlib inline \n","93d01850":"from sklearn.model_selection import train_test_split \nfrom sklearn.feature_extraction.text import CountVectorizer \nfrom sklearn.naive_bayes import MultinomialNB \nfrom sklearn.metrics import accuracy_score ","5cb7d97d":"df=pd.read_csv(\"..\/input\/amazon-alexa-reviews\/amazon_alexa.tsv\",sep=\"\\t\")","44d8ece8":"#checking if any null records present in data frame \ndf.isnull().sum()\/len(df)*100","606a1c3c":"#checking each every data type in data set \ndf.dtypes","94f5fe79":"rating=df.groupby(\"rating\")[\"rating\"].sum() \nrating","5da83aa7":"labels=[\"rating1\",\"rating2\",\"rating3\",\"rating4\",\"rating5\"]\nfig=px.pie(df,values=rating,names=labels[0:5])  \nfig.update_traces(textposition=\"inside\",textinfo=\"percent+label\") \nfig.show()","bab7897e":"fig = go.Figure(data=[go.Bar(\n            x=labels, y=rating[0:10],\n            text=rating[0:10],\n            textposition='auto',\n            marker_color=['green',\"red\",\"yellow\",\"black\"]\n\n        )]) \nfig.show()","76c927f2":"#checking how much  more variations are good with customers\nplt.figure(figsize=(20,20))\nwc=WordCloud().generate(\" \".join(df[\"variation\"])) \nplt.imshow(wc)","066ee59b":"# As we can see most of the persons are playing with their devices are Alexa,Love.....\nplt.figure(figsize=(20,200))\nwc=WordCloud().generate(\" \".join(df[\"verified_reviews\"])) \nplt.imshow(wc)","90bac59c":"#checking feed back of their devices i.e 1 means positive 0 means negative \nfeed_back=df[\"feedback\"].value_counts() \nfeed_back","8ecc27b3":"#representation of feed_back in terms of pie chart i.e positive and negative feed_back \nreviews=[\"positive_feed back\",\"negative_feedback\"]\nfig=px.pie(df,values=feed_back,names=reviews,hole=0.4)\nfig.update_traces(textposition=\"inside\",textinfo=\"percent+label\")  \nfig.update_layout(template=\"plotly_dark\")","7d49dc25":"#representation feedback in terms of bar graph  \nfig=go.Figure(data=[go.Bar(x=reviews,y=feed_back[0:10],text=feed_back[0:10],textposition=\"auto\",marker_color=[\"green\",\"pink\"])]) \nfig.update_layout(title=\"Number of positive and negative responses\", template=\"plotly_dark\")\nfig.show()","91ca2b92":"diff_devices=df[\"variation\"].value_counts()  \ndf1=pd.DataFrame(data=diff_devices)  \ndf1[\"devices\"]=df1.index \ndf1.reset_index(inplace=True) \ncol=df1.columns \nf=list(col) \nf[0]=\"Devices\" \ndf1.columns=f \ndf1.drop(\"Devices\",axis=1,inplace=True) \ndf1","f4d558e3":"uni=df[\"variation\"].unique().tolist() \nuni","a624baf0":"fig=px.pie(df,values=diff_devices[0:16],names=uni,hole=0.2) \nfig.update_traces(textposition=\"inside\",textinfo=\"percent+label\") \nfig.update_layout(title=\"Percentage of Each device usage\",template=\"plotly_dark\")","fbeeee74":"fig=px.treemap(df1,path=[\"devices\"],values=df1[\"variation\"],title=\"Different types of device and their number of users\",height=700) \nfig.data[0].textinfo=\"label+text+value\" \nfig.update_layout(template=\"plotly_dark\")\nfig.show()","2672b411":"df1=pd.DataFrame(data=df.groupby([\"variation\"])[\"rating\"].value_counts()) \ndf1.unstack() \ndf1=df1[\"rating\"].astype(int) \ndf1=df1.unstack() \ndf1=df1.fillna(30) \ndf1.reset_index(inplace=True) \ndf1","783ec91f":"df1.columns=['variation',\"rating1\",\"rating2\", \"rating3\",\"rating4\", \"rating5\"]","e98a27e7":"#As we can see in the below black dot variation receiving highest rating when comparing to other devices\nrating1=go.Bar(x=df1[\"variation\"],y=df1.rating1,name ='rating1') \nrating2=go.Bar(x=df1[\"variation\"],y=df1.rating2,name ='rating2') \nrating3=go.Bar(x=df1[\"variation\"],y=df1.rating3,name ='rating3') \nrating4=go.Bar(x=df1[\"variation\"],y=df1.rating4,name ='rating4') \nrating5=go.Bar(x=df1[\"variation\"],y=df1.rating5,name ='rating5',marker=dict(color = 'rgba(255, 128, 255, 0.8)')) \ndata=[rating1,rating2,rating3,rating4,rating5] \nlayout={\"title\":\"Variations between devices and Ratings\",\n         \"barmode\":\"relative\", \n         \"xaxis\":{\"title\":\"Variations\"} , \n         \"yaxis\":{\"title\":\"Ratings\"}, \n          \"template\":\"plotly_dark\"}\nfig=go.Figure(data,layout)   \nfig.update_traces()\nfig.show()","099300b5":"df2=pd.DataFrame(data=df.groupby(\"variation\")[\"feedback\"].value_counts()) \ndf2=df2.unstack() \ndf2[\"variation\"]=df2.index \ndf2=pd.DataFrame(data=df2)  \nnp.random.seed(1)\ndf2.index=np.random.randint(0,17,16) \ndf2","6a80da03":"#as we can seee now most of the positive feedback are receiving blackdot amazon alexa device \nnegative=go.Bar(x=df2['variation'],y=df2[\"feedback\"][0],name=\"negative feed back\")  \npositive=go.Bar(x=df2['variation'],y=df2[\"feedback\"][1],name=\"positive feed back\")  \ndata=[positive,negative]  \nlayout={\"title\":\"Number of members giving feed back \"}\nfig=go.Figure(data,layout) \nfig.show()","bbd321bf":"cv=CountVectorizer() \nx=cv.fit_transform(df[\"verified_reviews\"]).toarray() \nx","ddf447d6":"y=df[\"feedback\"]","925954b2":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.50)","58927df3":"mn=MultinomialNB()","172eb0db":"mn.fit(x_train,y_train)","e2ce1039":"print(\"Training score :\"+str(mn.score(x_train,y_train)))\nprint(\"Testing score :\"+str(mn.score(x_test,y_test))) ","f2b2e55f":"x_test","7e5619f9":"Plotting a wordscloud for the Words to see all the words, The Larger the words the larger is the frequency for that word.","b21862cf":"We can see that love is the most frequent word in the word suggesting that most of the people absolutely love alexa. Other frequent words that suggest alexa is doing well are amazing, like, great, works etc.","4059ce7a":"<font>From the above pie chart I can clearly say that most of the members are enjoying with amazon \ndevices<\/font>","df029143":"**Uni-Variate Analysis**","1a600ee1":"**Uni Variate Analysis is nothing but we are understanding each and every feature individually \n  and getting insights from every columns**","d8bba765":"## Review Analysis of Amazon alexa by using Naive Baeye's"}}