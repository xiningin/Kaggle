{"cell_type":{"e8d08f9b":"code","dc0e8244":"code","0a19c016":"code","e0ce40f7":"code","7bb2ef3f":"code","212c13f6":"code","1570cb77":"code","7a1fc6e7":"code","b8f553cc":"code","f09cf60f":"code","2e76a475":"code","95314b8e":"code","8cf412d3":"code","cf43ac8a":"code","8c8444f1":"code","847716ce":"code","b9bf5815":"code","0b30f900":"code","0f36a188":"code","60addeaa":"code","b3f0dc95":"code","4ccd5041":"code","95f4ffe9":"code","ff639f20":"code","55ad570c":"code","b7c76ed6":"code","bf511637":"code","bb813f75":"code","dfb07a7d":"code","2dc213ef":"code","7afddb2b":"code","5eec04ee":"code","103fd173":"code","73943975":"code","761ffaea":"code","152567c0":"code","add6c338":"code","d491d508":"code","a567cd8e":"code","8dcaa3a7":"code","414f463a":"code","d976e45d":"code","1e5b147d":"markdown","1a960af2":"markdown","af557f82":"markdown","f60841db":"markdown","34cafef7":"markdown","09c75cef":"markdown","2daca476":"markdown","f9c0e594":"markdown","a7fe7ed3":"markdown","2ba03dc0":"markdown","2e399f08":"markdown","32198779":"markdown","225ebe98":"markdown"},"source":{"e8d08f9b":"import gc\nimport os\n\nimport numpy as np\nimport pandas as pd\nimport progressbar\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mplimg\nfrom matplotlib.pyplot import imshow\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\nfrom keras import layers\nfrom keras.preprocessing import image\nfrom keras.applications.imagenet_utils import preprocess_input\nfrom keras.layers import Input, Dense, Activation, BatchNormalization, Flatten, Conv2D\nfrom keras.layers import AveragePooling2D, MaxPooling2D, Dropout\nfrom keras.models import Model\n\nimport keras.backend as K\nfrom keras.models import Sequential\n\nimport warnings\nwarnings.simplefilter(\"ignore\", category=DeprecationWarning)","dc0e8244":"def prepareImages(data, m, dataset):\n    #print(\"Preparing images\")\n    #print(m)\n    X_train = np.zeros((m, 128, 128, 3))\n    count = 0\n    \n    for fig in progressbar.progressbar(data['Image']):\n        # load images into images of size 128x128x3\n        img = image.load_img(\"..\/input\/humpback-whale-identification\/\"+dataset+\"\/\"+fig, target_size=(128, 128, 3))\n        x = image.img_to_array(img)\n        x = preprocess_input(x)\n        X_train[count] = x\n        count += 1\n    \n    return X_train","0a19c016":"def prepare_labels(y):\n    values = np.array(y)\n    label_encoder = LabelEncoder()\n    integer_encoded = label_encoder.fit_transform(values)\n    #print(integer_encoded)\n\n    onehot_encoder = OneHotEncoder(sparse=False)\n    integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)\n    onehot_encoded = onehot_encoder.fit_transform(integer_encoded)\n    #print(onehot_encoded)\n\n    y = onehot_encoded\n    #print(y.shape)\n    return y, label_encoder","e0ce40f7":"train = os.listdir(\"..\/input\/humpback-whale-identification\/train\/\")\nprint(len(train))","7bb2ef3f":"train = pd.read_csv(\"..\/input\/humpback-whale-identification\/train.csv\")\ntrain.Id.value_counts().head()","212c13f6":"# From https:\/\/www.kaggle.com\/suicaokhoailang\/removing-class-new-whale-is-a-good-idea\nif not os.path.isfile(\"..\/input\/cnn-cnn-without-new-whale-class\/keras-cnn-starter-without-new-whales.json\"):\n    train_df = train[train['Id'] != 'new_whale']\n    train_df.Id.value_counts().head()","1570cb77":"if not os.path.isfile(\"..\/input\/cnn-cnn-without-new-whale-class\/keras-cnn-starter-without-new-whales.json\"):\n    X = prepareImages(train_df, train_df.shape[0], \"train\")\n    X \/= 255","7a1fc6e7":"if not os.path.isfile(\"..\/input\/cnn-cnn-without-new-whale-class\/keras-cnn-starter-without-new-whales.json\"):\n    y, label_encoder = prepare_labels(train_df['Id'])\n    y.shape","b8f553cc":"# Free Memory! Free Memory!\nif not os.path.isfile(\"..\/input\/cnn-cnn-without-new-whale-class\/keras-cnn-starter-without-new-whales.json\"):\n    del train_df\n    gc.collect()","f09cf60f":"if not os.path.isfile(\"..\/input\/cnn-cnn-without-new-whale-class\/keras-cnn-starter-without-new-whales.json\"):\n    model = Sequential()\n\n    model.add(Conv2D(32, (7, 7), strides = (1, 1), name = 'conv0', input_shape = (128, 128, 3)))\n\n    model.add(BatchNormalization(axis = 3, name = 'bn0'))\n    model.add(Activation('relu'))\n\n    model.add(MaxPooling2D((2, 2), name='max_pool'))\n    model.add(Conv2D(64, (3, 3), strides = (1,1), name=\"conv1\"))\n    model.add(Activation('relu'))\n    model.add(AveragePooling2D((3, 3), name='avg_pool'))\n\n    model.add(Flatten())\n    model.add(Dense(500, activation=\"relu\", name='rl'))\n    model.add(Dropout(0.8))\n    model.add(Dense(y.shape[1], activation='softmax', name='sm'))\n\n    model.compile(loss='categorical_crossentropy', optimizer=\"adam\", metrics=['accuracy'])\n    model.summary()","2e76a475":"if not os.path.isfile(\"..\/input\/cnn-cnn-without-new-whale-class\/keras-cnn-starter-without-new-whales.json\"):\n    history = model.fit(X, y, epochs=100, batch_size=100, verbose=1)","95314b8e":"# Free Memory! Free Memory!\nif not os.path.isfile(\"..\/input\/cnn-cnn-without-new-whale-class\/keras-cnn-starter-without-new-whales.json\"):\n    del X, y\n    gc.collect()","8cf412d3":"if not os.path.isfile(\"..\/input\/cnn-cnn-without-new-whale-class\/keras-cnn-starter-without-new-whales.json\"):\n    plt.plot(history.history['acc'])\n    plt.title('Model accuracy')\n    plt.ylabel('Accuracy')\n    plt.xlabel('Epoch')\n    plt.show()","cf43ac8a":"if not os.path.isfile(\"..\/input\/cnn-cnn-without-new-whale-class\/keras-cnn-starter-without-new-whales.json\"):\n    with open(\"..\/input\/cnn-cnn-without-new-whale-class\/keras-cnn-starter-without-new-whales.json\", \"w\") as f:\n        f.write(model.to_json())","8c8444f1":"from keras.models import model_from_json\n\nwith open('..\/input\/cnn-cnn-without-new-whale-class\/keras-cnn-starter-without-new-whales.json', 'r') as f:\n    model = model_from_json(f.read())","847716ce":"def map_per_image(label, predictions):\n    \"\"\"Computes the precision score of one image.\n\n    Parameters\n    ----------\n    label : string\n            The true label of the image\n    predictions : list\n            A list of predicted elements (order does matter, 5 predictions allowed per image)\n\n    Returns\n    -------\n    score : double\n    \"\"\"    \n    try:\n        return 1 \/ (predictions[:5].index(label) + 1)\n    except ValueError:\n        return 0.0","b9bf5815":"def map_per_set(labels, predictions):\n    \"\"\"Computes the average over multiple images.\n\n    Parameters\n    ----------\n    labels : list\n             A list of the true labels. (Only one true label per images allowed!)\n    predictions : list of list\n             A list of predicted elements (order does matter, 5 predictions allowed per image)\n\n    Returns\n    -------\n    score : double\n    \"\"\"\n    return np.mean([map_per_image(l, p) for l,p in zip(labels, predictions)])","0b30f900":"X = prepareImages(train, train.shape[0], \"train\")\nX \/= 255","0f36a188":"y, label_encoder = prepare_labels(train['Id'])","60addeaa":"predictions_encoded = model.predict(np.array(X), verbose=1)","b3f0dc95":"# Free Memory! Free Memory!\ndel X, y\ngc.collect()","4ccd5041":"best_pred = max(predictions_encoded.flatten())\nbest_pred # TODO ???!!! should not be < THREESHOLD","95f4ffe9":"worst_pred = min(predictions_encoded.flatten())\nworst_pred","ff639f20":"# Function that's assign class \"new_whale\" to encoders with low threeshold\ndef get_top5(treeshold, pred):\n    args5 = pred.argsort()[-5:][::-1]\n    classes5 = [i for i in label_encoder.inverse_transform(args5)]\n    for i, t in enumerate(args5):\n        if pred[t] < treeshold:\n            for j in range(i + 1, 5):\n                classes5[j] = classes5[j - 1]\n            classes5[i] = \"new_whale\"\n            break\n    return classes5","55ad570c":"X_ = []\ny_ = []\n\ndef get_score(treeshold):\n    print(\"get_score(%s) = \" % treeshold, end=\"\")\n    predictions = []\n    for i, pred in enumerate(predictions_encoded):\n        predictions.append(get_top5(treeshold, pred))\n    result = map_per_set(train['Id'].values, predictions)\n    print(result)\n    X_.append(treeshold)\n    y_.append(result)\n    return result","b7c76ed6":"# From https:\/\/www.scipy-lectures.org\/advanced\/mathematical_optimization\/#getting-started-1d-optimization\nfrom scipy import optimize","bf511637":"# \"new_whale\" threeshold -> will converge to optimal split threeshold\nresult = optimize.minimize_scalar(lambda x: - get_score(x), bounds=(worst_pred, best_pred), method='bounded')  # -SCORE (we try to minimize the function)","bb813f75":"plt.plot(X_, y_, '-')\nplt.show()","dfb07a7d":"new_whale_treeshold = result.x\nnew_whale_treeshold # == best_pred :(","2dc213ef":"train_new_whale = train[train['Id'] == 'new_whale']\ntrain_new_whale.Id.value_counts().head()","7afddb2b":"X = prepareImages(train_new_whale, train_new_whale.shape[0], \"train\")\nX \/= 255","5eec04ee":"predictions_encoded_new_whale = model.predict(np.array(X), verbose=1)","103fd173":"np.mean(predictions_encoded_new_whale.flatten())","73943975":"# Free Memory! Free Memory!\ndel train, train_new_whale\ngc.collect()","761ffaea":"test = os.listdir(\"..\/input\/humpback-whale-identification\/test\/\")\nprint(len(test))","152567c0":"col = ['Image']\ntest_df = pd.DataFrame(test, columns=col)\ntest_df['Id'] = ''","add6c338":"X = prepareImages(test_df, test_df.shape[0], \"test\")\nX \/= 255","d491d508":"predictions_encoded = model.predict(np.array(X), verbose=1)","a567cd8e":"for i, pred in enumerate(predictions_encoded):\n    test_df.loc[i, 'Id'] = ' '.join(get_top5(new_whale_treeshold, pred))","8dcaa3a7":"test_df.head(10)\ntest_df.to_csv('keras-cnn-with-new-whale-threeshold.csv', index=False) #> Score = 0.286","414f463a":"# Free Memory! Free Memory!\ndel test_df, X\ngc.collect()","d976e45d":"#!kaggle competitions submit -c humpback-whale-identification -f \"keras-cnn-with-new-whale-threeshold.csv\" -m \"CNN with Keras with new_whale (threeshold = 0.00022381447120760044)\"","1e5b147d":"---","1a960af2":"---","af557f82":"# Humpback Whale Identification\n\n## CNN (Keras) with `new_whale` threeshold\n\nNotebook adapted from https:\/\/www.kaggle.com\/pestipeti\/keras-cnn-starter","f60841db":"Maybe a better idea would be to still integrate `new_whale` data, but rather as a vector `np.zeros(...)` (with `softmax` activation) than a separate class.","34cafef7":"---","09c75cef":"---","2daca476":"## Predict labels of test dataset","f9c0e594":"## Serialize Keras model to `.json`\n\nFrom https:\/\/keras.io\/models\/about-keras-models\/","a7fe7ed3":"## `MAP@5` Score computation function\n\nFrom https:\/\/www.kaggle.com\/pestipeti\/explanation-of-map5-scoring-metric","2ba03dc0":"---","2e399f08":"---","32198779":"## Fit `new_whale` threeshold","225ebe98":"## Train our model"}}