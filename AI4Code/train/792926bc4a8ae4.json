{"cell_type":{"0076306b":"code","3d0ebaee":"code","98df81f1":"code","6ebf1611":"code","27af0545":"code","82ddc688":"code","570d7ed1":"code","d3de3091":"code","b4b69ea7":"code","26bd8454":"code","2d34a6de":"code","b73247f7":"code","94f23f6e":"code","c6bf926f":"code","ee788d8f":"code","7c87b98f":"code","4fc9dffe":"code","176af10e":"markdown","0c11aa88":"markdown","65ea01f7":"markdown","50c2e46c":"markdown","00c5b87f":"markdown","694691a4":"markdown","c218e107":"markdown","aa5ff88d":"markdown","73121c15":"markdown"},"source":{"0076306b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport datetime, os\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split","3d0ebaee":"#loading dataframes\ntrain_df = pd.read_csv('\/kaggle\/input\/rsna-bone-age\/boneage-training-dataset.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/rsna-bone-age\/boneage-test-dataset.csv')\n\n#appending file extension to id column for both training and testing dataframes\ntrain_df['id'] = train_df['id'].apply(lambda x: str(x)+'.png')\ntest_df['Case ID'] = test_df['Case ID'].apply(lambda x: str(x)+'.png') \n\ntrain_df.head()","98df81f1":"#finding out the number of male and female children in the dataset\n#creating a new column called gender to keep the gender of the child as a string\ntrain_df['gender'] = train_df['male'].apply(lambda x: 'male' if x else 'female')\nprint(train_df['gender'].value_counts())\nsns.countplot(x = train_df['gender'])","6ebf1611":"#oldest child in the dataset\nprint('MAX age: ' + str(train_df['boneage'].max()) + ' months')\n\n#youngest child in the dataset\nprint('MIN age: ' + str(train_df['boneage'].min()) + ' months')\n\n#mean age is\nmean_bone_age = train_df['boneage'].mean()\nprint('mean: ' + str(mean_bone_age))\n\n#median bone age\nprint('median: ' +str(train_df['boneage'].median()))\n\n#standard deviation of boneage\nstd_bone_age = train_df['boneage'].std()\n\n#models perform better when features are normalised to have zero mean and unity standard deviation\n#using z score for the training\ntrain_df['bone_age_z'] = (train_df['boneage'] - mean_bone_age)\/(std_bone_age)\n\nprint(train_df.head())","27af0545":"#plotting a histogram for bone ages\ntrain_df['boneage'].hist(color = 'green')\nplt.xlabel('Age in months')\nplt.ylabel('Number of children')\nplt.title('Number of children in each age group')","82ddc688":"train_df['bone_age_z'].hist(color = 'violet')\nplt.xlabel('bone age z score')\nplt.ylabel('Number of children')\nplt.title('Relationship between number of children and bone age z score')","570d7ed1":"import matplotlib.image as mpimg\nfor filename, boneage, gender in train_df[['id','boneage','gender']].sample(4).values:\n    img = mpimg.imread('\/kaggle\/input\/rsna-bone-age\/boneage-training-dataset\/boneage-training-dataset\/'+ filename)\n    plt.imshow(img)\n    plt.title('Image name:{}  Bone age: {} years  Gender: {}'.format(filename, boneage\/12, gender))\n    plt.axis('off')\n    plt.show()","d3de3091":"#splitting train dataframe into traininng and validation dataframes\ndf_train, df_valid = train_test_split(train_df, test_size = 0.2, random_state = 0)","b4b69ea7":"#library required for image preprocessing\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications.xception import preprocess_input \nimport tensorflow as tf\n\n\n\n#reducing down the size of the image \nimg_size = 256\n\ntrain_data_generator = ImageDataGenerator(preprocessing_function = preprocess_input)\nval_data_generator = ImageDataGenerator(preprocessing_function = preprocess_input)\n\n#train data generator\ntrain_generator = train_data_generator.flow_from_dataframe(\n    dataframe = df_train,\n    directory = '\/kaggle\/input\/rsna-bone-age\/boneage-training-dataset\/boneage-training-dataset',\n    x_col= 'id',\n    y_col= 'bone_age_z',\n    batch_size = 32,\n    seed = 42,\n    shuffle = True,\n    class_mode= 'other',\n    flip_vertical = True,\n    color_mode = 'rgb',\n    target_size = (img_size, img_size))\n\n#validation data generator\nval_generator = val_data_generator.flow_from_dataframe(\n    dataframe = df_valid,\n    directory = '\/kaggle\/input\/rsna-bone-age\/boneage-training-dataset\/boneage-training-dataset',\n    x_col = 'id',\n    y_col = 'bone_age_z',\n    batch_size = 32,\n    seed = 42,\n    shuffle = True,\n    class_mode = 'other',\n    flip_vertical = True,\n    color_mode = 'rgb',\n    target_size = (img_size, img_size))\n\n#test data generator\ntest_data_generator = ImageDataGenerator(preprocessing_function = preprocess_input)\n\ntest_generator = test_data_generator.flow_from_directory(\n    directory = '\/kaggle\/input\/rsna-bone-age\/boneage-test-dataset',\n    shuffle = True,\n    class_mode = None,\n    color_mode = 'rgb',\n    target_size = (img_size,img_size))","26bd8454":"test_X, test_Y = next(val_data_generator.flow_from_dataframe( \n                            df_valid, \n                            directory = '\/kaggle\/input\/rsna-bone-age\/boneage-training-dataset\/boneage-training-dataset',\n                            x_col = 'id',\n                            y_col = 'bone_age_z', \n                            target_size = (img_size, img_size),\n                            batch_size = 2523,\n                            class_mode = 'other'\n                            )) ","2d34a6de":"def plot_it(history):\n    '''function to plot training and validation error'''\n    fig, ax = plt.subplots( figsize=(20,10))\n    ax.plot(history.history['mae_in_months'])\n    ax.plot(history.history['val_mae_in_months'])\n    plt.title('Model Error')\n    plt.ylabel('error')\n    plt.xlabel('Epoch')\n    plt.legend(['Train', 'Val'], loc='upper right')\n    ax.grid(color='black')\n    plt.show()","b73247f7":"from keras.metrics import mean_absolute_error\ndef mae_in_months(x_p, y_p):\n    '''function to return mae in months'''\n    return mean_absolute_error((std_bone_age*x_p + mean_bone_age), (std_bone_age*y_p + mean_bone_age)) ","94f23f6e":"from tensorflow.keras.callbacks import TensorBoard, ModelCheckpoint,EarlyStopping,ReduceLROnPlateau\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Activation,Dense, Dropout, Flatten, Conv2D, MaxPooling2D,MaxPool2D,AveragePooling2D,GlobalMaxPooling2D\nfrom tensorflow.keras.layers import BatchNormalization\n\ntransfer_model = tf.keras.applications.Xception(\n                            weights='imagenet',  # Load weights pre-trained on ImageNet.\n                            input_shape=(img_size, img_size, 3),\n                            include_top=False)\n# model_1.trainable = True\n# model_2 = Sequential()\n# model_2.add(model_1)\n# model_2.add(GlobalMaxPooling2D())\n# model_2.add(Conv2D(64, (3,3), activation='relu', padding='Same'))\n# model_2.add(Flatten())\n# model_2.add(Dense(10, activation = 'relu'))\n# model_2.add()\n\nmodel_2 = Sequential([\n    transfer_model, \n    AveragePooling2D(pool_size = (2,2)),\n    Conv2D(64,(3,3), activation='relu', padding='Same'),\n    BatchNormalization(),\n    AveragePooling2D(pool_size = (2,2)),\n    Dropout(0.25),\n    Flatten(), \n    BatchNormalization(),\n    Dense(10, activation = 'relu'),\n    Dropout(0.25),\n    BatchNormalization(),\n    Dense(1, activation = 'linear')\n    ])\n\n\n#compile model\nmodel_2.compile(loss ='mse', optimizer= 'adam', metrics = [mae_in_months] )\n\n#model summary\nmodel_2.summary()","c6bf926f":"#early stopping\nearly_stopping = EarlyStopping(monitor='val_loss',\n                              min_delta=0,\n                              patience= 5,\n                              verbose=0, mode='auto')\n\n#model checkpoint\nmc = ModelCheckpoint('transxcept50.h5', monitor='val_loss', mode='min', save_best_only=True)\n\n#tensorboard callback\nlogdir = os.path.join(logs_dir,datetime.datetime.now().strftime('%Y%m%d-%H%M%S'))\ntensorboard_callback =  TensorBoard(logdir, histogram_freq = 1)\n\n#reduce lr on plateau\nred_lr_plat = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=10, verbose=0, mode='auto', min_delta=0.0001, cooldown=0, min_lr=0)\n\ncallbacks = [tensorboard_callback,early_stopping,mc, red_lr_plat]\n\n\n#fit model\nhistory = model_2.fit_generator(train_generator,\n                            steps_per_epoch = 30,\n                            validation_data = val_generator,\n                            validation_steps = 1,\n                            epochs = 50,\n                            callbacks= callbacks)\nhistory\n\nplot_it(history)\n","ee788d8f":"model_2.load_weights('transxcept50.h5')\npred = mean_bone_age + std_bone_age*(model_2.predict(test_X, batch_size = 32, verbose = True))\ntest_months = mean_bone_age + std_bone_age*(test_Y)\n\nord_ind = np.argsort(test_Y)\nord_ind = ord_ind[np.linspace(0, len(ord_ind)-1, 8).astype(int)] # take 8 evenly spaced ones\nfig, axs = plt.subplots(4, 2, figsize = (15, 30))\nfor (ind, ax) in zip(ord_ind, axs.flatten()):\n    ax.imshow(test_X[ind, :,:,0], cmap = 'bone')\n    ax.set_title('Age: %fY\\nPredicted Age: %fY' % (test_months[ind]\/12.0, \n                                                           pred[ind]\/12.0))\n    ax.axis('off')\nfig.savefig('trained_image_predictions.png', dpi = 300)\n","7c87b98f":"fig, ax = plt.subplots(figsize = (7,7))\nax.plot(test_months, pred, 'r.', label = 'predictions')\nax.plot(test_months, test_months, 'b-', label = 'actual')\nax.legend(loc = 'upper right')\nax.set_xlabel('Actual Age (Months)')\nax.set_ylabel('Predicted Age (Months)')","4fc9dffe":"test_generator.reset()\ny_pred = model_2.predict_generator(test_generator)\npredicted = y_pred.flatten()\npredicted_months = mean_bone_age + std_bone_age*(predicted)\nfilenames=test_generator.filenames\nresults=pd.DataFrame({\"Filename\":filenames,\n                      \"Predictions\": predicted_months})\nresults.to_csv(\"results.csv\",index=False)","176af10e":"**Some Setup**<br>\nThe cell below creates the pandas dataframes for training and testing.","0c11aa88":" The function to plot training and validation error as a function of epochs","65ea01f7":"Looking into the dataset...","50c2e46c":"**The plot deviates from the line at very old and very young ages probably because we have less examples for those cases in the dataset**","00c5b87f":"Evaluating the best saved model on the validation data and visualising results!!","694691a4":"**Some EDA and feature engineering follow**","c218e107":"This notebook is an attempt to predict bone age using Xception(pre trained model)<br>","aa5ff88d":"**Setting up Image Data Generators!**<br>\nWe use image data generators for both training, testing and preprocessing of images. Validation set is already broken off from training set. ","73121c15":"Predicting on test data, we obtain:"}}