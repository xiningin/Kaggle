{"cell_type":{"d820cd4f":"code","1bdf4f5c":"code","b899ca24":"code","b82f3868":"code","5ba5b0e9":"code","cbdba025":"code","cdd7624d":"code","c386574c":"code","e2cd0c11":"code","1d93c165":"code","74893db6":"code","46a48afb":"code","69410ce4":"code","02a0043c":"code","8489af80":"code","85e71652":"code","40f0600c":"code","2877d6c6":"code","365b1dea":"code","89752b6b":"code","2cae85aa":"code","a14ecb8a":"code","d54543b9":"code","6626cb45":"code","96d535bc":"code","83b910a1":"code","d4eb7324":"code","50247011":"code","0a31dbf4":"code","79934940":"code","12306bb9":"code","fd475ee1":"code","10654974":"code","330db604":"code","463474f3":"code","dcbad296":"code","8853cbf2":"code","a4f0162c":"code","04e1a684":"code","5011331a":"code","f8310069":"code","c810404c":"code","e418ee7f":"code","f8456c41":"code","995e8769":"markdown"},"source":{"d820cd4f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom subprocess import check_output\n\nfrom tensorflow.keras.layers import Dense, Activation, Dropout\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.models import Sequential\n\nfrom sklearn.model_selection import  train_test_split\nimport time #helper libraries\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\nfrom numpy import newaxis\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","1bdf4f5c":"train = pd.read_csv('..\/input\/daily-climate-time-series-data\/DailyDelhiClimateTrain.csv')\ntrain.head()","b899ca24":"test = pd.read_csv('..\/input\/daily-climate-time-series-data\/DailyDelhiClimateTest.csv')\ntest.head()","b82f3868":"train.isna().sum()","5ba5b0e9":"test.isna().sum()","cbdba025":"train.describe()","cdd7624d":"test.describe()","c386574c":"train.dtypes","e2cd0c11":"test.dtypes","1d93c165":"print(train.shape)\nprint(test.shape)","74893db6":"sns.boxplot(x=train['meantemp'])","46a48afb":"sns.boxplot(x=train['humidity'])","69410ce4":"sns.boxplot(x=train['wind_speed'])\n","02a0043c":"sns.boxplot(x=train['meanpressure'])","8489af80":"plt.figure(figsize=(100,80))\nfig, axs = plt.subplots(2, 2,figsize=(20,20))\naxs[0, 0].plot(train['date'],train['meantemp'])\naxs[0, 0].set_title('Mean temp')\naxs[0, 1].plot(train['date'],train['humidity'], 'tab:orange')\naxs[0, 1].set_title('Humidity')\naxs[1, 0].plot(train['date'],train['wind_speed'], 'tab:green')\naxs[1, 0].set_title('Wind Speed')\naxs[1, 1].plot(train['date'],train['meanpressure'], 'tab:red')\naxs[1, 1].set_title('MeanPressure')","85e71652":"# Plotting a scatter plot\nfig, ax = plt.subplots(figsize=(10,6))\nax.scatter(train['date'], train['meantemp'])\nax.set_xlabel('Date')\nax.set_ylabel('Mean Temperature')\nplt.show()","40f0600c":"# Plotting a scatter plot\nfig, ax = plt.subplots(figsize=(10,6))\nax.scatter(train['date'], train['humidity'])\nax.set_xlabel('Date')\nax.set_ylabel('Humidity')\nplt.show()","2877d6c6":"# Plotting a scatter plot\nfig, ax = plt.subplots(figsize=(10,6))\nax.scatter(train['date'], train['wind_speed'])\nax.set_xlabel('Date')\nax.set_ylabel('Wind Speed')\nplt.show()","365b1dea":"# Plotting a scatter plot\nfig, ax = plt.subplots(figsize=(10,6))\nax.scatter(train['date'], train['meanpressure'])\nax.set_xlabel('Date')\nax.set_ylabel('Mean Pressure')\nplt.show()","89752b6b":"## MEAN TEMP \ntemp_train = train.iloc[:,1:2]\ntemp_test = test.iloc[:,1:2]","2cae85aa":"#Scaling the values between 0 to 1\nfrom sklearn.preprocessing import MinMaxScaler\nss= MinMaxScaler(feature_range=(0,1))\ntemp_train= ss.fit_transform(temp_train)\ntemp_test= ss.fit_transform(temp_test)\n","a14ecb8a":"def create_dataset(dataset, look_back=1):\n    dataX, dataY = [], []\n    for i in range(len(dataset)-look_back-1):\n        a = dataset[i:(i+look_back), 0]\n        dataX.append(a)\n        dataY.append(dataset[i + look_back, 0])\n    return np.array(dataX), np.array(dataY)\n\nlook_back = 1\ntrainX, trainY = create_dataset(temp_train, look_back)\ntestX, testY = create_dataset(temp_test, look_back)\n\ntrainX = np.reshape(trainX, (trainX.shape[0], trainX.shape[1],1))\ntestX = np.reshape(testX, (testX.shape[0], testX.shape[1],1))\n","d54543b9":"model_temp = Sequential()\n#Adding the first LSTM layer and some Dropout regularisation\nmodel_temp.add(LSTM(units = 100, return_sequences = True, input_shape = (trainX.shape[1], 1)))\nmodel_temp.add(Dropout(0.2))\n# Adding a second LSTM layer and some Dropout regularisation\nmodel_temp.add(LSTM(units = 100, return_sequences = True))\nmodel_temp.add(Dropout(0.2))\n# Adding a third LSTM layer and some Dropout regularisation\nmodel_temp.add(LSTM(units = 100, return_sequences = True))\nmodel_temp.add(Dropout(0.2))\n# Adding a fourth LSTM layer and some Dropout regularisation\nmodel_temp.add(LSTM(units = 50))\nmodel_temp.add(Dropout(0.2))\n# Adding the output layer\nmodel_temp.add(Dense(units = 1))\n\n# Compiling the RNN\nmodel_temp.compile(optimizer = 'adam', loss = 'mean_squared_error', metrics=['accuracy'])\n\n# Fitting the RNN to the Training set\nmodel_temp.fit(trainX, trainY, epochs = 100, batch_size = 32)","6626cb45":"prediction = model_temp.predict(testX)\nprediction = ss.inverse_transform(prediction)\ntemp_test = ss.inverse_transform(temp_test)","96d535bc":"plt.figure(figsize=(20,10))\nplt.plot(temp_test, color = 'black', label = 'Delhi Mean Temperature')\nplt.plot(prediction, color = 'green', label = 'Predicted Delhi Mean Temperature')\nplt.title('Delhi Mean Temp Prediction')\nplt.xlabel('Time')\nplt.ylabel('Mean Temp')\nplt.legend()\nplt.show()\n","83b910a1":"humid_train = train.iloc[:,2:3]\nhumid_test = test.iloc[:,2:3]","d4eb7324":"ss= MinMaxScaler(feature_range=(0,1))\nhumid_train= ss.fit_transform(humid_train)\nhumid_test= ss.fit_transform(humid_test)","50247011":"look_back = 1\ntrainX, trainY = create_dataset(humid_train, look_back)\ntestX, testY = create_dataset(humid_test, look_back)\ntrainX = np.reshape(trainX, (trainX.shape[0], trainX.shape[1],1))\ntestX = np.reshape(testX, (testX.shape[0], testX.shape[1],1))\n","0a31dbf4":"# create and fit the LSTM network\nmodel_humid = Sequential()\n#Adding the first LSTM layer and some Dropout regularisation\nmodel_humid.add(LSTM(units = 100, return_sequences = True, input_shape = (trainX.shape[1], 1)))\nmodel_humid.add(Dropout(0.2))\n# Adding a second LSTM layer and some Dropout regularisation\nmodel_humid.add(LSTM(units = 100, return_sequences = True))\nmodel_humid.add(Dropout(0.2))\n# Adding a third LSTM layer and some Dropout regularisation\nmodel_humid.add(LSTM(units = 100, return_sequences = True))\nmodel_humid.add(Dropout(0.2))\n# Adding a fourth LSTM layer and some Dropout regularisation\nmodel_humid.add(LSTM(units = 50))\nmodel_humid.add(Dropout(0.2))\n# Adding the output layer\nmodel_humid.add(Dense(units = 1))\n\n# Compiling the RNN\nmodel_humid.compile(optimizer = 'adam', loss = 'mean_squared_error', metrics=['accuracy'])\n\n# Fitting the RNN to the Training set\nmodel_humid.fit(trainX, trainY, epochs = 100, batch_size = 32)\n","79934940":"prediction = model_temp.predict(testX)\nprediction = ss.inverse_transform(prediction)\nhumid_test = ss.inverse_transform(humid_test)","12306bb9":"plt.figure(figsize=(20,10))\nplt.plot(humid_test, color = 'black', label = 'Delhi Humidity')\nplt.plot(prediction, color = 'green', label = 'Predicted Delhi Humidity')\nplt.title('Delhi Humidity Prediction')\nplt.xlabel('Time')\nplt.ylabel('Humidity')\nplt.legend()\nplt.show()","fd475ee1":"wind_train = train.iloc[:,3:4]\nwind_test = test.iloc[:,3:4]","10654974":"wind_train= ss.fit_transform(wind_train)\nwind_test= ss.fit_transform(wind_test)\n","330db604":"look_back = 1\ntrainX, trainY = create_dataset(wind_train, look_back)\ntestX, testY = create_dataset(wind_test, look_back)\n\ntrainX = np.reshape(trainX, (trainX.shape[0], trainX.shape[1],1))\ntestX = np.reshape(testX, (testX.shape[0], testX.shape[1],1))","463474f3":"model_wind = Sequential()\n#Adding the first LSTM layer and some Dropout regularisation\nmodel_wind.add(LSTM(units = 100, return_sequences = True, input_shape = (trainX.shape[1], 1)))\nmodel_wind.add(Dropout(0.2))\n# Adding a second LSTM layer and some Dropout regularisation\nmodel_wind.add(LSTM(units = 100, return_sequences = True))\nmodel_wind.add(Dropout(0.2))\n# Adding a third LSTM layer and some Dropout regularisation\nmodel_wind.add(LSTM(units = 100, return_sequences = True))\nmodel_wind.add(Dropout(0.2))\n# Adding a fourth LSTM layer and some Dropout regularisation\nmodel_wind.add(LSTM(units = 50))\nmodel_wind.add(Dropout(0.2))\n# Adding the output layer\nmodel_wind.add(Dense(units = 1))\n\n# Compiling the RNN\nmodel_wind.compile(optimizer = 'adam', loss = 'mean_squared_error', metrics=['accuracy'])\n\n# Fitting the RNN to the Training set\nmodel_wind.fit(trainX, trainY, epochs = 100, batch_size = 32)","dcbad296":"prediction = model_temp.predict(testX)\nprediction = ss.inverse_transform(prediction)\nwind_test = ss.inverse_transform(wind_test)","8853cbf2":"plt.figure(figsize=(20,10))\nplt.plot(wind_test, color = 'black', label = 'Delhi Wind Speed')\nplt.plot(prediction, color = 'green', label = 'Predicted Delhi Wind Speed')\nplt.title('Delhi Wind Speed Prediction')\nplt.xlabel('Time')\nplt.ylabel('Wind Speed')\nplt.legend()\nplt.show()","a4f0162c":"pressure_train = train.iloc[:,4:]\npressure_test = test.iloc[:,4:]","04e1a684":"pressure_train= ss.fit_transform(pressure_train)\npressure_test= ss.fit_transform(pressure_test)","5011331a":"trainX, trainY = create_dataset(pressure_train, look_back)\ntestX, testY = create_dataset(pressure_test, look_back)","f8310069":"trainX = np.reshape(trainX, (trainX.shape[0], trainX.shape[1],1))\ntestX = np.reshape(testX, (testX.shape[0], testX.shape[1],1))\n","c810404c":"model_pressure = Sequential()\n#Adding the first LSTM layer and some Dropout regularisation\nmodel_pressure.add(LSTM(units = 100, return_sequences = True, input_shape = (trainX.shape[1], 1)))\nmodel_pressure.add(Dropout(0.2))\n# Adding a second LSTM layer and some Dropout regularisation\nmodel_pressure.add(LSTM(units = 100, return_sequences = True))\nmodel_pressure.add(Dropout(0.2))\n# Adding a third LSTM layer and some Dropout regularisation\nmodel_pressure.add(LSTM(units = 100, return_sequences = True))\nmodel_pressure.add(Dropout(0.2))\n# Adding a fourth LSTM layer and some Dropout regularisation\nmodel_pressure.add(LSTM(units = 50))\nmodel_pressure.add(Dropout(0.2))\n# Adding the output layer\nmodel_pressure.add(Dense(units = 1))\n\n# Compiling the RNN\nmodel_pressure.compile(optimizer = 'adam', loss = 'mean_squared_error', metrics=['accuracy'])\n\n# Fitting the RNN to the Training set\nmodel_pressure.fit(trainX, trainY, epochs = 100, batch_size = 32)","e418ee7f":"prediction = model_temp.predict(testX)\nprediction = ss.inverse_transform(prediction)\npressure_test = ss.inverse_transform(pressure_test)","f8456c41":"plt.figure(figsize=(20,10))\nplt.plot(pressure_test, color = 'black', label = 'Delhi Mean Pressure')\nplt.plot(prediction, color = 'green', label = 'Predicted Delhi Mean Pressure')\nplt.title('Delhi Mean Pressure Prediction')\nplt.xlabel('Time')\nplt.ylabel('Mean Pressure')\nplt.legend()\nplt.show()","995e8769":"This code was forked from https:\/\/www.kaggle.com\/ieshaan\/delhi-climate-time-series-lstm. I will be making changes to this notebook pretty soon"}}