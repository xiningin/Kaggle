{"cell_type":{"26c3c9fb":"code","1ea6aefb":"code","ac074e76":"code","f771a18a":"code","ca712d29":"code","0f71b6fb":"code","2e62e358":"code","21e3de89":"markdown","e471bd06":"markdown","675bec8f":"markdown","ed45ba0e":"markdown","a372fc3b":"markdown"},"source":{"26c3c9fb":"import pandas as pd\nimport numpy as np\nfrom lightgbm import LGBMRegressor\nimport gresearch_crypto\n\n\nTRAIN_CSV = '\/kaggle\/input\/g-research-crypto-forecasting\/train.csv'\nASSET_DETAILS_CSV = '\/kaggle\/input\/g-research-crypto-forecasting\/asset_details.csv'","1ea6aefb":"df_train = pd.read_csv(TRAIN_CSV)\ndf_train.head()","ac074e76":"df_asset_details = pd.read_csv(ASSET_DETAILS_CSV).sort_values(\"Asset_ID\")\ndf_asset_details","f771a18a":"from scipy.stats import pearsonr\nfrom sklearn.model_selection import train_test_split\n# Two new features from the competition tutorial\ndef upper_shadow(df):\n    return df['High'] - np.maximum(df['Close'], df['Open'])\n\ndef lower_shadow(df):\n    return np.minimum(df['Close'], df['Open']) - df['Low']\n\n# A utility function to build features from the original df\n# It works for rows to, so we can reutilize it.\ndef get_features(df):\n    df_feat = df[['Count', 'Open', 'High', 'Low', 'Close', 'Volume', 'VWAP']].copy()\n    df_feat['upper_Shadow'] = upper_shadow(df_feat)\n    df_feat['lower_Shadow'] = lower_shadow(df_feat)\n    df_feat[\"high_div_low\"] = df_feat[\"High\"] \/ df_feat[\"Low\"]\n    #df_feat[\"open_sub_close\"] = df_feat[\"Open\"] - df_feat[\"Close\"]\n    df_feat['trade']=df_feat['Close']-df_feat['Open']\n    df_feat['gtrade']=df_feat['trade']\/df_feat['Count']\n    df_feat['shadow1']=df_feat['trade']\/df_feat['Volume']\n    #df_feat['shadow2']=df_feat['upper_Shadow']\/df['Low']\n    df_feat['shadow3']=df_feat['upper_Shadow']\/df['Volume']\n    #df_feat['shadow4']=df_feat['lower_Shadow']\/df['High']\n    df_feat['shadow5']=df_feat['lower_Shadow']\/df['Volume']\n    \n    df_feat['upper_Shadow_log']=np.log(df_feat['upper_Shadow'])\n    df_feat['lower_Shadow_log']=np.log(df_feat['lower_Shadow'])\n    return df_feat\ndef log(model,X_train, X_valid, y_train, y_valid,train_split=1.0):\n    if train_split > 0:\n        X_train=X_train[:int(train_split*X_train.shape[0])]\n        y_train=y_train[:int(train_split*y_train.shape[0])]\n    \n        pred=model.predict(X_train)\n        print('Training :- ')\n        print(f'MSE : {np.mean((y_train-pred)**2)}')\n        print(f'CV : {pearsonr(pred,y_train)[0]}')\n    pred=model.predict(X_valid)\n    print('Validation :- ')\n    print(f'MSE : {np.mean((y_valid-pred)**2)}')\n    print(f'CV : {pearsonr(pred,y_valid)[0]}')\n\ndef get_Xy_and_model_for_asset(df_train, asset_id):\n    df = df_train[df_train[\"Asset_ID\"] == asset_id]\n   \n    # TODO: Try different features here!\n    df_proc = get_features(df)\n    df_proc['y'] = df['Target']\n    df_proc = df_proc.dropna(how=\"any\")\n    \n    X = df_proc.drop(\"y\", axis=1)\n    y = df_proc[\"y\"]\n    X_train=X[:int(0.7*X.shape[0])]\n    y_train=y[:int(0.7*y.shape[0])]#\n    X_test=X[int(X.shape[0]*0.7):]\n    y_test=y[int(y.shape[0]*0.7):]\n    # TODO: Try different models here!\n    model = LGBMRegressor(n_estimators=200,num_leaves=300,learning_rate=0.09)\n    model.fit(X_train, y_train)\n    print('[Finished Training] evaluating')\n    log(model,X_train, X_test, y_train, y_test,0.3)\n    \n    \n    return X, y, model","ca712d29":"Xs = {}\nys = {}\nmodels = {}\n\nfor asset_id, asset_name in zip(df_asset_details['Asset_ID'], df_asset_details['Asset_Name']):\n    print(f\"Training model for {asset_name:<16} (ID={asset_id:<2})\")\n    X, y, model = get_Xy_and_model_for_asset(df_train, asset_id)    \n    Xs[asset_id], ys[asset_id], models[asset_id] = X, y, model","0f71b6fb":"# Check the model interface\nx = get_features(df_train.iloc[1])\ny_pred = models[0].predict([x])\ny_pred[0]","2e62e358":"env = gresearch_crypto.make_env()\niter_test = env.iter_test()\n\nfor i, (df_test, df_pred) in enumerate(iter_test):\n    for j , row in df_test.iterrows():\n        \n        model = models[row['Asset_ID']]\n        x_test = get_features(row)\n        y_pred = model.predict([x_test])[0]\n        \n        df_pred.loc[df_pred['row_id'] == row['row_id'], 'Target'] = y_pred\n        \n        \n        # Print just one sample row to get a feeling of what it looks like\n        if i == 0 and j == 0:\n            display(x_test)\n\n    # Display the first prediction dataframe\n    if i == 0:\n        display(df_pred)\n\n    # Send submissions\n    env.predict(df_pred)","21e3de89":"# Predict & submit\n\nReferences: [Detailed API Introduction](https:\/\/www.kaggle.com\/sohier\/detailed-api-introduction)\n\nSomething that helped me understand this iterator was adding a pdb checkpoint inside of the for loop:\n\n```python\nimport pdb; pdb.set_trace()\n```\n\nSee [Python Debugging With Pdb](https:\/\/realpython.com\/python-debugging-pdb\/) if you want to use it and you don't know how to.\n","e471bd06":"**Parent kernal [link ](https:\/\/www.kaggle.com\/julian3833\/g-research-starter-lgbm-pipeline-lb)**\n\n**changes n_estimators=1000,num_leaves=500,max_depth=10**","675bec8f":"## Loop over all assets","ed45ba0e":"# Training","a372fc3b":"## Utility functions to train a model for one asset"}}