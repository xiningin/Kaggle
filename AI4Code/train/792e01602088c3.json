{"cell_type":{"83117d53":"code","a87dfea3":"code","12a68fb1":"code","74981aaa":"code","b27e71e6":"code","f52cef39":"code","50bacc4d":"code","a9d1aad8":"code","59d5adec":"code","408e4cfa":"code","72617579":"code","e49fcb7e":"code","6b4547ab":"code","60c93eae":"code","1a39b5bf":"code","34b6d7ae":"code","691cbb39":"code","61aa2981":"code","48fb5e16":"code","e0d649ff":"code","713cd918":"code","c874e052":"code","3690d030":"code","ddf8f290":"markdown","5c529d39":"markdown","45babbb4":"markdown","f7967678":"markdown","4b372f14":"markdown","d6a20388":"markdown","38ef88f3":"markdown","70564fd3":"markdown","eb9ea65c":"markdown","e1830696":"markdown","fc7a8ffd":"markdown","b524d729":"markdown","aa4c0d08":"markdown","26251294":"markdown","ad127f0b":"markdown","03261d51":"markdown","751547da":"markdown","d08fdb29":"markdown","4c8fcedb":"markdown","ed694067":"markdown","c5c31d1b":"markdown","0cfac41b":"markdown","a7b7ef85":"markdown","8fb711b6":"markdown","9cb10bf6":"markdown","01a0d733":"markdown","1022c69b":"markdown"},"source":{"83117d53":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a87dfea3":"df=pd.read_csv('\/kaggle\/input\/corona-virus-report\/covid_19_clean_complete.csv')","12a68fb1":"df.head()","74981aaa":"df.iloc[2]","b27e71e6":"df.loc[:,'Lat']","f52cef39":"df.iloc[[2,3,4]]","50bacc4d":"df.loc[:,['Lat','Long']]","a9d1aad8":"df[:3]","59d5adec":"df[3:6]","408e4cfa":"df['Lat'].head(6)","72617579":"df[['Lat','Long']][:3]","e49fcb7e":"df.Lat.iloc[2]","6b4547ab":"df.Lat.iloc[[2]]","60c93eae":"(df.Lat =='42.5063').head()","1a39b5bf":"df[df.Date == \"2020-01-22\"]","34b6d7ae":"df[(df.Date == \"2020-01-22\") | (df.Long == '67.709953')].head()","691cbb39":"df['Country\/Region'].value_counts().head(10).plot.bar()","61aa2981":"(df['Country\/Region'].value_counts().head(10) \/ len(df)).plot.bar()","48fb5e16":"df['Country\/Region'].value_counts().sort_index().plot.line()","e0d649ff":"df['Country\/Region'].value_counts().sort_index().plot.area()","713cd918":"df['Lat'].plot.hist()","c874e052":"df[df['Confirmed'] < 100].plot.scatter(x='Confirmed', y='Lat')","3690d030":"df[df['Confirmed'] < 10000].plot.hexbin(x='Confirmed', y='Long')","ddf8f290":"This displays first five rows by default","5c529d39":"## Indexing multiple rows\/columns","45babbb4":"Here we have mentioned an or condition i.e whether date should be this or longitude should be the one mentioned ","f7967678":"## Selecting subset of data ","4b372f14":"## Visualizing the data","d6a20388":"Here we got a result as bool which means if it is true we have that latitude","38ef88f3":"## Hexplots","70564fd3":"This command gives us first 3 rows","eb9ea65c":"## indexing scalar values","e1830696":"here we have done indexing using iloc which is giving us information about 2nd row . Code for iloc is dataframe.iloc[row,column] and since we mentioned 2nd row we got info about second row in all columns\n","fc7a8ffd":"This command reuturns a single value of code and this value is second row of latitude column ","b524d729":"### Univiriate plots ","aa4c0d08":"## Slicing both rows and columns","26251294":"## Slicing the dataframe","ad127f0b":"### Line charts ","03261d51":"This command is used to read csv file at a given path","751547da":"## Bivariate plots ","d08fdb29":"### area chart","4c8fcedb":"this  command gives us rows from number 3 to 6","ed694067":"### Histogram ","c5c31d1b":"## indexing\n","0cfac41b":"Here we got access to multiple rows using iloc command and it is similar to what we used before , the difference here is we mentioned all the rows we wanted . Let's see the same command with loc in columns","a7b7ef85":"You can also have multiple conditions here ","8fb711b6":"Here we have used loc in indexing which is similar to iloc but instead of indexes it takes names, now here we have asked it to show all the rows of the column 'lat'(we used : symbol to get all the rows )","9cb10bf6":"Here we sliced column of latitude from 0-6 ","01a0d733":"We get a different return type if we pass single value as list","1022c69b":"Here we get information of every country at 22 Jan in form of dataframe "}}