{"cell_type":{"7cbd6772":"code","b63799e6":"code","defd42d5":"code","a4a14f6a":"code","57e23a97":"code","6db027b2":"code","c75f98a7":"code","d1c6f3a0":"code","c231bc96":"code","1fd38b4e":"code","3b648152":"code","9c72c60a":"markdown","6df236d9":"markdown"},"source":{"7cbd6772":"import tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport requests\nimport tensorflow_datasets as tfds\nfrom tqdm import tqdm\nimport os\nimport shutil\nfrom tensorflow.keras.layers import Input, Dense ,Conv2D,MaxPooling2D ,Dropout\n\n\nimport keras\nimport cv2\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import img_to_array\nimport os\nfrom tqdm import tqdm\nimport re\nimport matplotlib.pyplot as plt","b63799e6":"# to get the files in proper order\ndef sorted_alphanumeric(data):  \n    convert = lambda text: int(text) if text.isdigit() else text.lower()\n    alphanum_key = lambda key: [convert(c) for c in re.split('([0-9]+)',key)]\n    return sorted(data,key = alphanum_key)\n# defining the size of the image\nSIZE = 256\nhigh_img = []\npath = '..\/input\/image-super-resolution\/dataset\/Raw Data\/high_res'\nfiles = os.listdir(path)\nfiles = sorted_alphanumeric(files)\nfor i in tqdm(files):    \n    if i == '855.jpg':\n        break\n    else:    \n        img = cv2.imread(path + '\/'+i,1)\n        # open cv reads images in BGR format so we have to convert it to RGB\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        #resizing image\n        img = cv2.resize(img, (SIZE, SIZE))\n        img = img.astype('float32') \/ 255.0\n        high_img.append(img_to_array(img))\n\n\nlow_img = []\npath = '..\/input\/image-super-resolution\/dataset\/Raw Data\/low_res'\nfiles = os.listdir(path)\nfiles = sorted_alphanumeric(files)\nfor i in tqdm(files):\n    if i == '855.jpg':\n        break\n    else: \n        img = cv2.imread(path + '\/'+i,1)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        #resizing image\n        img = cv2.resize(img, (SIZE, SIZE))\n        img = img.astype('float32') \/ 255.0\n        low_img.append(img_to_array(img))","defd42d5":"for i in range(4):\n    a = np.random.randint(0,855)\n    plt.figure(figsize=(10,10))\n    plt.subplot(1,2,1)\n    plt.title('High Resolution Imge', color = 'green', fontsize = 20)\n    plt.imshow(high_img[a])\n    plt.axis('off')\n    plt.subplot(1,2,2)\n    plt.title('low Resolution Image ', color = 'black', fontsize = 20)\n    plt.imshow(low_img[a])\n    plt.axis('off')\n","a4a14f6a":"train_high_image = high_img[:700]\ntrain_low_image = low_img[:700]\ntrain_high_image = np.reshape(train_high_image,(len(train_high_image),SIZE,SIZE,3))\ntrain_low_image = np.reshape(train_low_image,(len(train_low_image),SIZE,SIZE,3))\n\nvalidation_high_image = high_img[700:830]\nvalidation_low_image = low_img[700:830]\nvalidation_high_image= np.reshape(validation_high_image,(len(validation_high_image),SIZE,SIZE,3))\nvalidation_low_image = np.reshape(validation_low_image,(len(validation_low_image),SIZE,SIZE,3))\n\n\ntest_high_image = high_img[830:]\ntest_low_image = low_img[830:]\ntest_high_image= np.reshape(test_high_image,(len(test_high_image),SIZE,SIZE,3))\ntest_low_image = np.reshape(test_low_image,(len(test_low_image),SIZE,SIZE,3))\n\nprint(\"Shape of training images:\",train_high_image.shape)\nprint(\"Shape of test images:\",test_high_image.shape)\nprint(\"Shape of validation images:\",validation_high_image.shape)\n\n","57e23a97":"from tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.optimizers.schedules import PiecewiseConstantDecay\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.utils import plot_model\ndef residual_block_gen(ch=64,k_s=3,st=1):\n    model=tf.keras.Sequential([\n    tf.keras.layers.Conv2D(ch,k_s,strides=(st,st),padding='same'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.LeakyReLU(),\n    tf.keras.layers.Conv2D(ch,k_s,strides=(st,st),padding='same'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.LeakyReLU(),])\n    return model\n\ndef Upsample_block(x,ch=256, k_s=3, st=1):\n    x = tf.keras.layers.Conv2D(ch,k_s, strides=(st,st), padding='same')(x)\n    x = tf.nn.depth_to_space(x, 2) # Subpixel pixelshuffler\n    x = tf.keras.layers.LeakyReLU()(x)\n    return x\nlr=tf.keras.layers.Input(shape=(256,256,3))\ninput_conv=tf.keras.layers.Conv2D(64,9,padding='same')(lr)\ninput_conv=tf.keras.layers.LeakyReLU()(input_conv)\n\ndef model():\n    SRRes=input_conv\n    for x in range(5):\n        res_output=residual_block_gen()(SRRes)\n        SRRes=Upsample_block(SRRes)\n        SRRes=MaxPooling2D()(SRRes)\n        SRRes=tf.keras.layers.Add()([SRRes,res_output])\n        SRRes=tf.keras.layers.Conv2D(64,9,padding='same')(SRRes)\n    SRRes=tf.keras.layers.BatchNormalization()(SRRes)\n    SRRes=tf.keras.layers.Add()([SRRes,input_conv])\n    SRRes=Upsample_block(SRRes)\n    SRRes=MaxPooling2D()(SRRes)\n    #SRRes=Upsample_block(SRRes)\n    #SRRes=downsample_image(SRRes,4)\n    #SRRes=Upsample_block(SRRes)\n    output_sr=tf.keras.layers.Conv2D(3,9,activation='sigmoid',padding='same')(SRRes)\n    return tf.keras.models.Model(lr,output_sr)","6db027b2":"model = model()\nmodel.summary()\nplot_model(model, to_file ='super_res.png',show_shapes=True)","c75f98a7":"model.compile(optimizer = tf.keras.optimizers.Adam(learning_rate = 0.001), loss = 'mean_absolute_error',\n              metrics = ['acc'])","d1c6f3a0":"model.fit(train_low_image, train_high_image, epochs = 10, batch_size = 1,\n          validation_data = (validation_low_image,validation_high_image))","c231bc96":"model.save('SRresnet.h5')","1fd38b4e":"def PSNR(y_true,y_pred):\n  mse=tf.reduce_mean( (y_true - y_pred) ** 2 )\n  return 20 * log10(1 \/ (mse ** 0.5))\n\ndef log10(x):\n  numerator = tf.math.log(x)\n  denominator = tf.math.log(tf.constant(10, dtype=numerator.dtype))\n  return numerator \/ denominator\n\ndef pixel_MSE(y_true,y_pred):\n  return tf.reduce_mean( (y_true - y_pred) ** 2 )","3b648152":"def plot_images(high,low,predicted):\n    plt.figure(figsize=(15,15))\n    plt.subplot(1,3,1)\n    plt.title('High Image', color = 'green', fontsize = 20)\n    plt.imshow(high)\n    plt.subplot(1,3,2)\n    plt.title('Low Image ', color = 'black', fontsize = 20)\n    plt.imshow(low)\n    plt.subplot(1,3,3)\n    plt.title('Predicted Image ', color = 'Red', fontsize = 20)\n    plt.imshow(predicted)\n   \n    plt.show()\n\nfor i in range(10,20):\n    \n    predicted = np.clip(model.predict(test_low_image[i].reshape(1,SIZE, SIZE,3)),0.0,1.0).reshape(SIZE, SIZE,3)\n    plot_images(test_high_image[i],test_low_image[i],predicted)\n    print('PSNR', PSNR(test_high_image[i],predicted))","9c72c60a":"split data into Train , validation and test Data ","6df236d9":"# DATA Visualization \n"}}