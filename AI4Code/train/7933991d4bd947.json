{"cell_type":{"c9e3bfb1":"code","6c754e95":"code","7a9c7ad4":"code","912bf237":"code","cdb7fc7b":"code","25f230cb":"code","ba3369e1":"code","68da6c60":"code","06cbbbcd":"code","aef5660d":"code","bd65dabc":"code","f53779a0":"code","17817252":"code","a5310e70":"code","7baeb611":"code","ae254176":"markdown","1bf0820a":"markdown","f4ce0c7b":"markdown","232a7e4b":"markdown","0ef64d0e":"markdown","3fc82d60":"markdown","d0d7ee03":"markdown","3a3ac52e":"markdown","c37d6e59":"markdown","ca996ee9":"markdown","ee296f65":"markdown","55238474":"markdown","6cc36f14":"markdown","8a168809":"markdown","104763cf":"markdown","cb46757e":"markdown","a661449e":"markdown"},"source":{"c9e3bfb1":"import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nnp.random.seed(0)\nsns.set_theme()","6c754e95":"uniform_data = np.random.rand(10, 12) # 0 ~ 9 x 12 \nax = sns.heatmap(uniform_data)","7a9c7ad4":"sns.heatmap(uniform_data, vmin=0, vmax=1)","912bf237":"normal_data = np.random.randn(10, 12)\nax = sns.heatmap(normal_data, center=0)","cdb7fc7b":"flights = sns.load_dataset(\"flights\")\nflights = flights.pivot(\"month\", \"year\", \"passengers\")\nax = sns.heatmap(flights)","25f230cb":"ax = sns.heatmap(flights, annot=True, fmt=\"d\")","ba3369e1":"ax = sns.heatmap(flights, linewidths=.5)","68da6c60":"ax = sns.heatmap(flights, cmap=\"YlGnBu\")","06cbbbcd":"ax = sns.heatmap(flights, center=flights.loc[\"Jan\", 1955])","aef5660d":"data = np.random.randn(50, 20)\nax = sns.heatmap(data, xticklabels=2, yticklabels=False)","bd65dabc":"ax = sns.heatmap(flights, cbar=False)","f53779a0":"ax = sns.heatmap(flights, square=True)","17817252":"ax = sns.heatmap(flights, square=False)","a5310e70":"grid_kws = {\"height_ratios\": (.9, .05), \"hspace\": .3}\nf, (ax, cbar_ax) = plt.subplots(2, gridspec_kw=grid_kws)\nax = sns.heatmap(flights, \n                 ax=ax,\n                 cbar_ax=cbar_ax,\n                 cbar_kws={\"orientation\": \"horizontal\"})","7baeb611":"corr = np.corrcoef(np.random.randn(10, 200))\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True  # True => part of a matrix (False is default)\nwith sns.axes_style(\"white\"):\n    f, ax = plt.subplots(figsize=(7, 5))\n    ax = sns.heatmap(corr, mask=mask)","ae254176":"# with center ","1bf0820a":"##### cbar=True is default \n##### square=False is default","f4ce0c7b":"# with xticklables , yticklabels","232a7e4b":"# with cbar False","0ef64d0e":"##### fmt = 'd' => String formatting code to use when adding annotations.","3fc82d60":"# default","d0d7ee03":"# with annot d","3a3ac52e":"# pivot (y criteria, x criteria, value )","c37d6e59":"# with square False \nsqure False is default","ca996ee9":"# with cmap","ee296f65":"##### Use a mask to plot only part of a matrix","55238474":"# with linewidths ","6cc36f14":"# with ax,cbar_ax,cbar_kws","8a168809":"# with square","104763cf":"# with vmin and vamx ","cb46757e":"# with mask","a661449e":"# with center "}}