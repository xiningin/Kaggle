{"cell_type":{"51ae0d41":"code","e294abe8":"code","daf101f1":"code","1b9b6c59":"code","7ee6aa32":"code","3ff0fc3f":"code","92337776":"code","0b4fc514":"code","2e556383":"code","7f993d20":"code","d901b0b6":"markdown","6464a401":"markdown","f8ccb1d6":"markdown","2ef3faff":"markdown","4eb51626":"markdown","bffa86fe":"markdown","82505918":"markdown","8b07b77e":"markdown","660e001c":"markdown"},"source":{"51ae0d41":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e294abe8":"import pandas as pd\nimport numpy as np\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom numpy import savetxt","daf101f1":"base_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\nbase_train = base_train[['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'Survived']]\n\ndel base_train['Name']\ndel base_train['Ticket']\ndel base_train['Cabin']\n\nbase_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ndel base_test['Name']\ndel base_test['Ticket']\ndel base_test['Cabin']","1b9b6c59":"imputer = SimpleImputer(missing_values = np.nan, strategy = 'mean')\nimputer = imputer.fit(base_train.iloc[:, 3:4])\nbase_train.iloc[:, 3:4] = imputer.transform(base_train.iloc[:, 3:4])\nbase_test.iloc[:, 3:4] = imputer.transform(base_test.iloc[:, 3:4])","7ee6aa32":"labelencoder = LabelEncoder()\nbase_train['Embarked'] = labelencoder.fit_transform(base_train['Embarked'].astype(str))\nbase_test['Embarked'] = labelencoder.fit_transform(base_test['Embarked'].astype(str))\nbase_train.iloc[:, 2] = labelencoder.fit_transform(base_train.iloc[:, 2])\nbase_test.iloc[:, 2] = labelencoder.fit_transform(base_test.iloc[:, 2])","3ff0fc3f":"scaler = StandardScaler()\nbase_train.iloc[:, 1:8] = scaler.fit_transform(base_train.iloc[:, 1:8])\nbase_test.iloc[:, 1:8] = scaler.fit_transform(base_test.iloc[:, 1:8])","92337776":"base_test[base_test==np.inf]=np.nan\nbase_test.fillna(base_test.mean(), inplace=True)","0b4fc514":"predictors_train = base_train.iloc[:, 0:8].values\nclass_train = base_train.iloc[:, 8].values","2e556383":"classificador = RandomForestClassifier(n_estimators = 40, criterion = 'entropy', random_state = 0)\nclassificador.fit(predictors_train, class_train)\npredictions = classificador.predict(base_test)","7f993d20":"output = pd.DataFrame({'PassengerId': base_test.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)","d901b0b6":"\nInfinite values have been replaced by finite values as follows:","6464a401":"So I also scaled the values so that some attributes are not valued more than others because of the scale difference.","f8ccb1d6":"I used Random Forest to train the machine and then made the predictions:","2ef3faff":"Well, here I pre-processed the data. First, I filled the null cells in the *Age* column with the average of the other ages.","4eb51626":"And then I separated the dataset *train* to train the machine:","bffa86fe":"Some libraries:","82505918":"That was my code. Very simple, with the little knowledge I acquired in the first classes of a course I am taking.","8b07b77e":"Here, I'm opening the datasets and move the column *Survived* to the end of the dataset, just for preference. \nI delete some columns too, for some reasons: *Name* and *Ticket* are unique values, equivalent to the *PassengerId* column. And the *Cabin* has so many null spaces, approximaly 78%, making this column useless. ","660e001c":"And here, applied the label encoder to the *Embarked* and the *Sex* columns, to transform categorical values into numerical values."}}