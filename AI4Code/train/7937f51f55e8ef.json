{"cell_type":{"86cae2f1":"code","9ad69f9d":"code","2970963b":"code","bd60884c":"code","902ca521":"code","69c8fd58":"markdown"},"source":{"86cae2f1":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nfrom sklearn.model_selection import train_test_split\nrcParams['figure.figsize'] = (10, 5)   # Change this if figures look ugly. from matplotlib import rcParams\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import make_pipeline\n\n\n\n# IPython libraries\n\nfrom ipywidgets import interactive\nfrom IPython.display import display\nimport ipywidgets as widgets","9ad69f9d":"training_points = 250    #  Number of training points\nnoise = 0.1   # Noise level\n\n\nx_min = -5\nx_max = 5\n\ndef generate_poly_data(training_points,x_min,x_max,noise):\n    x1 = np.linspace(x_min,x_max,training_points*5)\n    x = np.random.choice(x1,size=training_points)\n    y = np.sin(x) + noise*np.random.normal(size=training_points)\n    plt.scatter(x,y,edgecolors='k',c='red',s=60)\n    plt.grid(True)\n    plt.show()\n    return (x,y)\n\n\n","2970963b":"x,y = generate_poly_data(training_points,x_min,x_max,noise)","bd60884c":"def func_fit(test_size,degree):\n    X_train, X_test, y_train, y_test = train_test_split(x,y,test_size=test_size,random_state=2020)\n    \n    t1=np.min(X_test)\n    t2=np.max(X_test)\n    t3=np.min(y_test)\n    t4=np.max(y_test)\n    \n    t5=np.min(X_train)\n    t6=np.max(X_train)\n    t7=np.min(y_train)\n    t8=np.max(y_train)\n    \n    posx_test=t1+(t2-t1)*0.7\n    posx_train=t5+(t6-t5)*0.7\n    posy_test=t3+(t4-t3)*0.2\n    posy_train=t7+(t8-t7)*0.2\n    \n    model = make_pipeline(PolynomialFeatures(degree,interaction_only=False), \n                          LinearRegression(normalize=True))\n    \n    X_train=X_train.reshape(-1,1)\n    X_test=X_test.reshape(-1,1)\n    \n    model.fit(X_train,y_train)\n    \n    train_pred = np.array(model.predict(X_train))\n    train_score = model.score(X_train,y_train)\n    \n    test_pred = np.array(model.predict(X_test))\n    test_score = model.score(X_test,y_test)\n    \n    RMSE_test=np.sqrt(np.mean(np.square(test_pred-y_test)))\n    RMSE_train=np.sqrt(np.mean(np.square(train_pred-y_train)))\n    \n    print(\"Test score: {}, Training score: {}\".format(test_score,train_score))\n    \n    print(\"RMSE Test: {}, RMSE train: {}\".format(RMSE_test,RMSE_train))\n    \n    plt.figure(figsize=(12,4))\n    \n    plt.subplot(1,2,1)\n    plt.title(\"Test set performance\\n\",fontsize=16)\n    plt.xlabel(\"X-test\",fontsize=13)\n    plt.ylabel(\"y-test\",fontsize=13)\n    plt.scatter(X_test,y_test,edgecolors='k',c='red',s=60)\n    plt.scatter(X_test,test_pred,edgecolors='k',c='yellow',s=60)\n    plt.grid(True)\n    plt.legend(['Actual test data','Predicted values'])\n    plt.text(x=posx_test,y=posy_test,s='Test score: %.3f'%(test_score),fontsize=15)\n    \n    plt.subplot(1,2,2)\n    plt.title(\"Training set performance\\n\",fontsize=16)\n    plt.xlabel(\"X-train\",fontsize=13)\n    plt.ylabel(\"y-train\",fontsize=13)\n    plt.scatter(X_train,y_train,c='red')\n    plt.scatter(X_train,train_pred,c='yellow')\n    plt.grid(True)\n    plt.legend(['Actual training data','Fitted values'])\n    plt.text(x=posx_train,y=posy_train,s='Training score: %.3f'%(train_score),fontsize=15)\n    \n    plt.show()\n       \n    return (train_score,test_score)","902ca521":"style = {'description_width': 'initial'}\n# Continuous_update = False for IntSlider control to stop continuous model evaluation while the slider is being dragged\nm = interactive(func_fit,test_size=widgets.Dropdown(options={\"10% data\":0.1,\"20% data\":0.2, \"30% data\":0.3,\n                                                    \"40% data\":0.4,\"50% data\":0.5},\n                                          description=\"Test set size\",style=style),\n               degree=widgets.IntSlider(min=1,max=10,step=1,description= 'Polynomial degree',\n                                       stye=style,continuous_update=False))\n\n# Set the height of the control.children[-1] so that the output does not jump and flicker\noutput = m.children[-1]\noutput.layout.height = '350px'\n\n# Display the control\ndisplay(m)","69c8fd58":"### Aim of this notebook is to fit a polynomial to a randomly generated data\n\n#### Ref: https:\/\/github.com\/tirthajyoti\/Machine-Learning-with-Python\/blob\/master\/Interactive%20ML-1.ipynb"}}