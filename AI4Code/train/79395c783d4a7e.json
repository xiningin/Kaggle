{"cell_type":{"9fd92a83":"code","e95fd54e":"code","2b952035":"code","d1ecc437":"code","9eee7d11":"code","96556251":"code","ed0fe95c":"code","dd12c4d7":"code","492b4063":"code","0ea639e0":"code","e72f0567":"code","9002cd23":"code","815742a8":"code","e12717f9":"code","5df2753d":"code","6be62cdd":"code","853b5f60":"code","31807d40":"code","ab8038a1":"code","4d1e2617":"code","cfdd4fcc":"code","ecabe10a":"code","02bdac90":"code","602555bb":"code","885ab144":"code","b8904f14":"code","5c757802":"code","6d33288c":"code","37483973":"code","835d01f5":"code","9f507463":"code","15af2965":"code","83220bf8":"code","c67110c6":"code","97d75185":"code","df4292a9":"code","dc36b6e6":"code","071c59c9":"code","31de0f4a":"code","a59e629a":"code","ef496f78":"code","50301622":"code","c17b199e":"code","73186106":"code","a25c5a0c":"code","9927e956":"code","678af871":"code","80a6d2b2":"code","ef34af98":"code","a762fe44":"code","fefcf2d0":"code","6f260a60":"code","f10ed091":"markdown","36019b0a":"markdown","d61af178":"markdown","53e96b2a":"markdown","4ce3cd28":"markdown","c69ba83e":"markdown","9c5b59ee":"markdown","6d623242":"markdown","66929511":"markdown","8afd13b3":"markdown","7b960ea9":"markdown","c131266c":"markdown","d8f2c936":"markdown","3b25947f":"markdown","21f7a4a0":"markdown","b16dcd76":"markdown","00f79323":"markdown","7d933efc":"markdown","6dc19490":"markdown","9cdb71d2":"markdown","642fc072":"markdown","03f84dbc":"markdown","b27ef9ad":"markdown","f5edf896":"markdown","9f5f8c40":"markdown","ed2d516f":"markdown","1c5a3dfc":"markdown","5f2bc76b":"markdown","a37004fc":"markdown","9caf3580":"markdown","c37d2441":"markdown","94d9f994":"markdown","2aa74b19":"markdown","1e0d6628":"markdown","fa4a50c8":"markdown","471e274b":"markdown","ccc4dcd8":"markdown","4a450ee5":"markdown","56f1687e":"markdown","a6ef3965":"markdown"},"source":{"9fd92a83":"import pandas as pd \nimport matplotlib as mat\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport plotly.graph_objects as go\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n%matplotlib inline","e95fd54e":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2b952035":"pip install openpyxl","d1ecc437":"df = pd.read_csv('\/kaggle\/input\/car-price-prediction\/CarPrice_Assignment.csv')\ndf.head(5)","9eee7d11":"# There have been some changes to the table to stay presentable\n\ndicionario = pd.read_excel('\/kaggle\/input\/car-price-prediction\/Data Dictionary - carprices.xlsx')\ndicionario = dicionario.iloc[3:29,[7,11]].reset_index().drop(columns=['index']) # Remove blank rows and columns\ndicionario = dicionario.rename(columns={'Unnamed: 7' : 'Column', 'Unnamed: 11' : 'Description'}) # Rename the columns\ndicionario","96556251":"# Information about attribute types\ndf.info()","ed0fe95c":"# Number of lines and columns\ndf.shape","dd12c4d7":"# Statistical description of numeric dataset attributes\ndf.describe()","492b4063":"# No null value\ndf.isnull().sum()","0ea639e0":"# Outliers are mainly found in our target column: price\n\nplt.figure(figsize=(20,5))\ndf.boxplot()\nprint()","e72f0567":"plt.figure(figsize=(8, 4))\nsns.boxplot(x=df['price'])\nplt.show()","9002cd23":"Q1 = df['price'].quantile(.25)\nQ3 = df['price'].quantile(.75)\n\nQ1,Q3","815742a8":"IQR = Q3 - Q1\nIQR","e12717f9":"lower = Q1 - 1.5 * IQR\nupper = Q3 + 1.5 * IQR\n\nlower,upper","5df2753d":"df = df[df['price'] >= lower] \ndf = df[df['price'] <= upper]","6be62cdd":"# There were 205 lines. Now, we have 190 lines.\ndf.shape","853b5f60":"df.describe()","31807d40":"plt.figure(figsize=(20,5))\ndf.boxplot()\nprint()","ab8038a1":"plt.title('Car price distribution', fontsize = 15)\nsns.violinplot(x = 'price', data = df)\nplt.show()","4d1e2617":"plt.title('Cars', fontsize = 15)\nsns.countplot(df['carbody'])\nplt.show()","cfdd4fcc":"fueltype = df['fueltype'].value_counts()\ntotal = df['fueltype'].value_counts().sum()\n\nporcentagem = fueltype\/total\n# plotar o gr\u00e1fico de pizza\nplt.title('Most used fuels', fontsize = 15)\nplt.pie(porcentagem, labels=['gas', 'diesel'], autopct='%1.1f%%');","ecabe10a":"sns.distplot(df['horsepower'])\nplt.title('', fontsize = 15)\nplt.xlabel('Length of cars', fontsize = 15)\nplt.ylabel('Total')\nplt.show()","02bdac90":"df['symboling'].value_counts().sort_values().plot.bar()\nplt.title('Insurance Risk Rating', fontsize = 15)\nplt.xlabel('Risk Rating', fontsize = 15)\nplt.ylabel('Total')\nplt.show()","602555bb":"# Correlation between columns\n\nplt.figure(figsize=(12,7))\ncorrelacao = df.corr()\nsns.heatmap(correlacao, annot = True);","885ab144":"# Analyzing only the correlation between the target variable (price) with the other columns\n\ncorrelations = df.corr()['price'].drop('price')\ncorrelations.sort_values()","b8904f14":"df['fueltype'] = df['fueltype'].map({'gas':'0','diesel':'1'})\ndf['aspiration'] = df['aspiration'].map({'std':'0','turbo':'1'})\ndf['doornumber'] = df['doornumber'].map({'two':'2','four':'4'})\ndf['carbody'] = df['carbody'].map({'convertible':'0','hatchback':'1','sedan':'2','wagon':'3','hardtop':'4'})\ndf['drivewheel'] = df['drivewheel'].map({'rwd':'0','fwd':'1','4wd':'2'})\ndf['enginelocation'] = df['enginelocation'].map({'front':'0','rear':'1'})\ndf['cylindernumber'] = df['cylindernumber'].map({'four':'4','six':'6','five':'5','three':'3','twelve':'12','two':'2','eight':'8'})","5c757802":"# Transforming object into int32\n\ndf['fueltype'] = df['fueltype'].astype(int)\ndf['aspiration'] = df['aspiration'].astype(int)\ndf['doornumber'] = df['doornumber'].astype(int)\ndf['carbody'] = df['carbody'].astype(int)\ndf['drivewheel'] = df['drivewheel'].astype(int)\ndf['enginelocation'] = df['enginelocation'].astype(int)\ndf['cylindernumber'] = df['cylindernumber'].astype(int)","6d33288c":"# Only numeric variables\n\nnumerical_columns = df.select_dtypes(include = ['int32','int64','float'])\nnumerical_columns.head()","37483973":"from sklearn.model_selection import train_test_split\n\nX = df[['symboling', 'fueltype', 'aspiration',\n       'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase',\n       'carlength', 'carwidth', 'carheight', 'curbweight',\n       'cylindernumber', 'enginesize', 'boreratio', 'stroke',\n       'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg']] # Only numeric values (21 features)\n\ny= df['price'] # Target column\n\nX_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.3,random_state=55)","835d01f5":"# Printing the results\n\nprint(\"{0:0.2f}% are training data\".format((len(X_train)\/len(df.index)) * 100))\nprint(\"{0:0.2f}% are testing data\".format((len(X_test)\/len(df.index)) * 100))","9f507463":"X_train.shape # Rows and columns for training","15af2965":"X_test.shape # Rows and columns for testing","83220bf8":"# Model evaluation metrics\n\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score # Using RMSE, MAE and R2 as metrics","c67110c6":"from sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()\nlr.fit(X_train,y_train)\nprediction_lr = lr.predict(X_test)\n\nprint(\"Model\\t\\t\\t\\t R2 \\t\\t RMSE \\t\\t MAE\")\nprint(\"\"\"Linear Regresson \\t\\t {:.2f} \\t\\t {:.4} \\t {:.2f}\"\"\".format(r2_score(y_test,prediction_lr), \n                                                                     np.sqrt(mean_squared_error(y_test, prediction_lr)), \n                                                                     mean_absolute_error(lr.predict(X_test), y_test)))","97d75185":"from sklearn.tree import DecisionTreeRegressor\n\ndtr = DecisionTreeRegressor(random_state=42) \ndtr.fit(X_train, y_train) \nprediction_dtr = dtr.predict(X_test)\n\nprint(\"Model\\t\\t\\t\\t R2 \\t\\t RMSE \\t\\t MAE\")\nprint(\"\"\"Decision Tree Regressor \\t {:.2f} \\t\\t {:.4} \\t {:.2f}\"\"\".format(r2_score(y_test,prediction_dtr), \n                                                                     np.sqrt(mean_squared_error(y_test, prediction_dtr)), \n                                                                     mean_absolute_error(dtr.predict(X_test), y_test)))","df4292a9":"from sklearn.ensemble import RandomForestRegressor\n\nrfr = RandomForestRegressor(n_estimators=10, random_state=42)\nrfr.fit(X_train, y_train.ravel()) \nprediction_rfr = rfr.predict(X_test)\n\nprint(\"Model\\t\\t\\t\\t R2 \\t\\t RMSE \\t\\t MAE\")\nprint(\"\"\"Random Forest Regressor \\t {:.2f} \\t\\t {:.4} \\t {:.2f}\"\"\".format(r2_score(y_test,prediction_rfr), \n                                                                     np.sqrt(mean_squared_error(y_test, prediction_rfr)), \n                                                                     mean_absolute_error(rfr.predict(X_test), y_test)))","dc36b6e6":"from sklearn.neighbors import KNeighborsRegressor\n\nknr = KNeighborsRegressor(n_neighbors=5)\nknr.fit(X_train,y_train)\nprediction_knr = knr.predict(X_test)\n\n\nprint(\"Model\\t\\t\\t\\t R2 \\t\\t RMSE \\t\\t MAE\")\nprint(\"\"\"KNeighborsRegressor \\t\\t {:.2f} \\t\\t {:.4} \\t {:.2f}\"\"\".format(r2_score(y_test,prediction_knr), \n                                                                     np.sqrt(mean_squared_error(y_test, prediction_knr)), \n                                                                     mean_absolute_error(knr.predict(X_test), y_test)))","071c59c9":"from sklearn.svm import SVR\n\nsvr = SVR(kernel='linear', C=1.0, epsilon=0.2)\nsvr.fit(X_train, y_train)\nprediction_svr = svr.predict(X_test)\n\nprint(\"Model\\t\\t\\t\\t R2 \\t\\t RMSE \\t\\t MAE\")\nprint(\"\"\"Support Vector Regressor \\t {:.2f} \\t\\t {:.4} \\t {:.2f}\"\"\".format(r2_score(y_test,prediction_svr), \n                                                                     np.sqrt(mean_squared_error(y_test, prediction_svr)), \n                                                                     mean_absolute_error(svr.predict(X_test), y_test)))","31de0f4a":"from sklearn.model_selection import cross_val_score # Importing the Cross Validation","a59e629a":"lr_scores = cross_val_score(lr, X_train,y_train, cv=5, scoring='r2')\nprint(lr_scores)\nprint(\"Mean:\", lr_scores.mean())","ef496f78":"dtr_scores = cross_val_score(dtr, X_train,y_train, cv=5, scoring='r2')\nprint(dtr_scores)\nprint(\"Mean:\", dtr_scores.mean())","50301622":"rfr_scores = cross_val_score(rfr, X_train,y_train, cv=5, scoring='r2')\nrfr_scores\nprint(\"Mean:\", rfr_scores.mean())","c17b199e":"knr_scores = cross_val_score(knr, X_train,y_train, cv=5, scoring='r2')\nknr_scores\nprint(\"Mean:\", knr_scores.mean())","73186106":"svr_scores = cross_val_score(svr, X_train,y_train, cv=5, scoring='r2')\nsvr_scores\nprint(\"Mean:\", svr_scores.mean())","a25c5a0c":"# Table summary for better viewing\n\nresultados = pd.DataFrame([\n    {'Algorithm' : 'Linear Regression', 'Original' : r2_score(y_test,prediction_lr), 'Cross-validation': lr_scores.mean()},\n    {'Algorithm' : 'Decision Trees Regressor', 'Original' : r2_score(y_test,prediction_dtr), 'Cross-validation': dtr_scores.mean()},\n    {'Algorithm' : 'Random Forest Regressor', 'Original' : r2_score(y_test,prediction_rfr), 'Cross-validation': rfr_scores.mean()},\n    {'Algorithm' : 'KNeighborsRegressor', 'Original' : r2_score(y_test,prediction_knr), 'Cross-validation': knr_scores.mean()},\n    {'Algorithm' : 'Support Vector Regressor', 'Original' : r2_score(y_test,prediction_svr), 'Cross-validation': svr_scores.mean()}\n])\n\nresultados.sort_values(by=['Cross-validation'], ascending=False)","9927e956":"import pickle\nfilename = 'rfr_model.sav'\npickle.dump(rfr, open(filename,'wb'))","678af871":"load_model = pickle.load(open(filename, 'rb'))","80a6d2b2":"resultado = load_model.predict(X_test[:100])","ef34af98":"plt.figure(figsize=(12,8))\n\nplt.title('Real values vs Predicted values')\nplt.ylabel('Sales Value')\nplt.plot(resultado) #x_test\nplt.plot(y_test.values[:100]) #y_test. 100 first values\n\nplt.legend(['Predictions', 'Real Values'])\nplt.show()","a762fe44":"df.columns","fefcf2d0":"test = np.array([[3,0,0,4,2,0,1,88.6,168.8,157.3,65.6,2585,5,130,2.20,3.40,9.0,120,5500,22,30]]) #21 features","6f260a60":"rfr.predict(test)","f10ed091":"### 2 - What kind of car appears most in the dataset?\n\n> The sedan-type cars are the most popular.","36019b0a":"### Decision Trees Regressor","d61af178":"> Some models improved and others worsened when using the cross-validation technique, with Coefficient of Determination (R\u00b2) as the scoring system.\n\n> KNeighborsRegressor, for example, scored better without Cross-validation, while Linear Regression scored higher with Cross-validation compared to the original model.\n\n> Linear Regression was the best model, with 0.739355 points, using Cross-validation. Without Cross-Validation, Random Forest Regressor had the best result, with 0.897571 points.","53e96b2a":"### Regression Test","4ce3cd28":"### 5 - What is the most common insurance risk classification?\n\n> A zero (0) rating is the most common among all insurance risk ratings. The assigned insurance risk rating is a value ranging from +3 (indicates that the car is risky) to -3 (which is probably very safe).","c69ba83e":"## Business Questions","9c5b59ee":"### Removing outliers in 'price' using IQR method.","6d623242":"## Analisando o dataset","66929511":"In addition to the Business Goal, let's try to answer 5 business questions:\n\n* 1 - Car prices are around how many dollars?\n* 2 - What kind of car appears most in the dataset?\n* 3 - What type of fuel is most used?\n* 4 - What are the most common engine power?\n* 5 - What is the most common insurance risk classification?","8afd13b3":"#### Transforming categorical variables into numerical variables, so that these variables can also enter the model that will predict which ones are best for the algorithms.","7b960ea9":"### 1 - Car prices are around how many dollars?\n> Most prices are concentrated between 5000.00 and 10000.00","c131266c":"## Separating training data and testing data","d8f2c936":"### Linear Regression","3b25947f":"### Decision Trees Regressor","21f7a4a0":"* After answering some hypotheses and finding some positive correlations between the target column (Price) and other dataset variables, five machine learning regression algorithms were trained and evaluated to predict the price of cars. \n\n\n* Linear Regression was the best model, with 0.739355 points, using Cross-validation. Without Cross-Validation, Random Forest Regressor had the best result, with 0.897571 points. Cross-valuation was used to evaluate the performance of machine learning models. \n\n\n* Random Forest Regressor was used to predict values for having obtained the best accuracy among the models without cross-validation, but other models can also be used. \n\n\n* Many other techniques can and should be tested, such as the normalization of features for example.","b16dcd76":"> Cross Validation is a widely used technique for evaluating the performance of machine learning models. Cross Validation consists of partitioning data into sets (parts), where one set is used for training and another set is used for testing and evaluating the model's performance. The use of CV has high chances of detecting if your model is overfitting your training data, that is, suffering overfitting. The cross_val_score function receives as parameter the model, all training data, class data, the amount of folds and the evaluation method.","00f79323":"### Random Forest Regressor","7d933efc":"> The enginesize, curbweight, horsepower, carwidth and carlength columns have a strong positive correlation with the price column, while the highwaympg and citympg columns have a strong negative correlation.","6dc19490":"### 3 - What type of fuel is most used?\n> Gasoline is the most used fuel, with 90.0%, while diesel is used in 10.0% of cases.","9cdb71d2":"#### Problem Statement:\n\nA Chinese automobile company Geely Auto aspires to enter the US market by setting up their manufacturing unit there and producing cars locally to give competition to their US and European counterparts.\n\nThey have contracted an automobile consulting company to understand the factors on which the pricing of cars depends. Specifically, they want to understand the factors affecting the pricing of cars in the American market, since those may be very different from the Chinese market. The company wants to know:\n\nWhich variables are significant in predicting the price of a car\nHow well those variables describe the price of a car\nBased on various market surveys, the consulting firm has gathered a large data set of different types of cars across the America market.\n\n#### Business Goal:\n\nWe are required to model the price of cars with the available independent variables. It will be used by the management to understand how exactly the prices vary with the independent variables. They can accordingly manipulate the design of the cars, the business strategy etc. to meet certain price levels. Further, the model will be a good way for management to understand the pricing dynamics of a new market.\n\n\n* Please Note : The dataset provided is for learning purpose. Please don\u2019t draw any inference with real world scenario.","642fc072":"### Linear Regression","03f84dbc":"## Saving the best model","b27ef9ad":"### 4 - What are the most common engine power?\n> The distribution shows that engines with power between 60 and 120 hp are the most common.","f5edf896":"## Evaluating with Cross Validation","9f5f8c40":"### KNeighborsRegressor","ed2d516f":"### Random Forest Regressor","1c5a3dfc":"## Importing required libraries","5f2bc76b":"### Loading the model and forecasting with new datasets\n\n> (X_test, Y_test must be new datasets prepared with the proper cleanup and transformation procedure)","a37004fc":"## Training and testing the model","9caf3580":"#### Defining lower \/ upper","c37d2441":"### Support Vector Regressor","94d9f994":"## Preparing the data","2aa74b19":"This dataset was taken from the Kaggle community, at this link: https:\/\/www.kaggle.com\/hellbuoy\/car-price-prediction","1e0d6628":"# <font color='blue'> Car Price Prediction","fa4a50c8":"## Conclusion","471e274b":"### KNeighborsRegressor","ccc4dcd8":"## Opening the dataset","4a450ee5":"### Support Vector Regressor","56f1687e":"## Dataset description","a6ef3965":"## Comparing and evaluating models"}}