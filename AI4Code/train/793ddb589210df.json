{"cell_type":{"507f2ec8":"code","c06a4e0e":"code","94779a07":"code","f32ddac6":"code","98ccff31":"code","55900682":"code","4d5117f1":"code","7cdb4e88":"code","64136a31":"code","301c7961":"code","fe2fcdef":"code","f9a2d304":"code","2ec47c0e":"code","e542d2bd":"code","eaffe3bd":"code","930ca1bd":"code","4e696955":"code","59f88691":"code","73606ae6":"code","f949278f":"code","35d9564a":"code","12f49bb0":"code","48687341":"code","25ea1952":"code","807fb34c":"code","c1d5b598":"code","90b93ad5":"code","fbd0de28":"code","e3df4c54":"code","1cd81ab5":"code","d64219b3":"code","049f5139":"code","fd1610ac":"code","6952421d":"code","8a0e299b":"code","c2515c15":"markdown","f39d2700":"markdown","36b292c2":"markdown","0ce7939d":"markdown","c5a46377":"markdown","4c145bae":"markdown","1bdbd104":"markdown","dbb706a2":"markdown"},"source":{"507f2ec8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c06a4e0e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","94779a07":"df=pd.read_csv('\/kaggle\/input\/health-care-data-set-on-heart-attack-possibility\/heart.csv')\ndf.head()","f32ddac6":"df.describe()","98ccff31":"df.isnull().value_counts()","55900682":"#From the above data analysis it has been  clear that the categorical and numercal columns.\n#Categorical columns are:- sex,fbs,cp,restecg,exang,slope,ca,thal,target\n#Numerical columns are:-'age','chol','trestbps','thalach','oldpeak'","4d5117f1":"def countplot(variable):\n    var=df[variable]\n    varCount=var.value_counts()\n    fig,ax=plt.subplots(figsize=(5,5))\n    ax.bar(varCount.index,varCount)\n    plt.xticks(varCount.index,varCount.index.values)\n    plt.ylabel('Frequency')\n    plt.xlabel(variable)\n    plt.show()","7cdb4e88":"categorical=['sex','fbs','cp','restecg','exang','slope','ca','thal','target']\nfor c in categorical:\n    countplot(c)","64136a31":"def hist_plot(variable):\n    var=df[variable]\n    n_bins=20\n    fig,ax=plt.subplots(figsize=(5,5))\n    ax.hist(var,bins=n_bins)\n    plt.ylabel('Frequency')\n    plt.show()","301c7961":"numerical=['age','chol','trestbps','thalach','oldpeak']\nfor c in numerical:\n    hist_plot(c)","fe2fcdef":"def box_plot(variable):\n    var=df[variable]\n    fig,axes=plt.subplots(figsize=(6,6))\n    sns.boxplot('target',variable,data=df)\n    plt.xlabel(variable)\n    plt.ylabel('Frequency')\n    plt.show()","f9a2d304":"categorical1=['age','chol','trestbps','thalach','oldpeak']\nfor c in categorical1:\n    box_plot(c)","2ec47c0e":"fig,ax=plt.subplots(figsize=(8,8))\nsns.heatmap(df.corr(),cmap =\"YlGnBu\")","e542d2bd":"import tensorflow as tf\nfrom tensorflow import keras\nfrom sklearn import model_selection,preprocessing","eaffe3bd":"#converting data to numpy arrays\nX=np.array(df.drop('target',1))\ny=np.array(df['target'])\ny.shape=(len(y),1)\nprint(X.shape,y.shape)","930ca1bd":"X_train,X_test,y_train,y_test=model_selection.train_test_split(X,y,test_size=0.25)","4e696955":"from keras.utils import to_categorical\nX1_train=preprocessing.scale(X_train)\nX1_test=preprocessing.scale(X_test)\ny1_train=to_categorical(y_train)\ny1_test=to_categorical(y_test)","59f88691":"model=tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(40,activation=tf.nn.relu))\nmodel.add(tf.keras.layers.Dropout(0.4))\nmodel.add(tf.keras.layers.Dense(40,activation=tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(2,activation=tf.nn.softmax))","73606ae6":"model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\nmodel_training=model.fit(X1_train,y1_train,epochs=15,validation_split=0.2)","f949278f":"plt.plot(model_training.history['accuracy'],color='blue')\nplt.plot(model_training.history['val_accuracy'],color='violet')\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\nplt.show()","35d9564a":"plt.plot(model_training.history['loss'],color='blue')\nplt.plot(model_training.history['val_loss'],color='violet')\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\nplt.show()","12f49bb0":"from keras.models import Sequential\nfrom keras.layers import Dense, Activation\nfrom keras.activations import relu, sigmoid","48687341":"def create_model(layers):\n    model1=Sequential()\n    for nodes in layers:\n        model1.add(Dense(nodes,activation='relu'))\n    model1.add(Dense(2,activation='softmax'))\n    model1.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\n    return model1","25ea1952":"from keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import GridSearchCV\nmodel2= KerasClassifier(build_fn=create_model, verbose=0)\nmodel2","807fb34c":"layers = [(40),(40,70),(60,40),(50,70),(90,70),(80,100)]\nparam_grid = dict(layers=layers, epochs=[20,40,60])\ngrid = GridSearchCV(estimator=model2, param_grid=param_grid,cv=5)\ngrid_result = grid.fit(X1_train, y1_train)","c1d5b598":"[grid_result.best_score_,grid_result.best_params_]","90b93ad5":"bestClassifier=create_model((60,40))\nHbestClassifier=bestClassifier.fit(X1_train,y1_train,batch_size=16,validation_split=0.25,epochs=20)","fbd0de28":"plt.plot(HbestClassifier.history['accuracy'],label='GridSearchCV Best Parameters')\nplt.plot(model_training.history['accuracy'],label='Initial parameters')\nplt.ylabel('Accuracy')\nplt.xlabel('No. epoch')\nplt.legend(loc=\"lower right\")","e3df4c54":"from sklearn.metrics import mean_squared_error\ny_pred_best=bestClassifier.predict(X1_test)\ny_pred_initial=model.predict(X1_test)\nrmse=np.sqrt(mean_squared_error(y_pred_initial,y1_test))\nprint(\"Root mean squared error:{}.\".format(rmse),\"\\nSize of test data :{}\".format(y1_test.shape))","1cd81ab5":"threshold=0.5\ny_pred_initial=np.where(y_pred_initial>threshold,1.,0.)\ny2_pred_initial=y_pred_initial.flatten()\ny2_test_initial=y1_test.flatten()","d64219b3":"threshold=0.5\ny_pred_best=np.where(y_pred_best>threshold,1.,0.)\ny2_pred_best=y_pred_best.flatten()\ny2_test_best=y1_test.flatten()","049f5139":"model.evaluate(X1_test,y1_test)","fd1610ac":"bestClassifier.evaluate(X1_test,y1_test)","6952421d":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix,classification_report\ncm=confusion_matrix(y2_test_best,y2_pred_best)\nsns.heatmap(cm,annot=True)","8a0e299b":"print(classification_report(y2_test_best,y2_pred_best))","c2515c15":"# Model Evaluation","f39d2700":"# **Univariate and Bivariate Analysis**","36b292c2":"# Plotting Accuracy and Loss Curves","0ce7939d":"# Comparision between the models","c5a46377":"# Basic Data Analysis","4c145bae":"# Modelling with tensorflow backend","1bdbd104":"# Improving model with GridSearchCV","dbb706a2":"# **Data Preprocessing**"}}