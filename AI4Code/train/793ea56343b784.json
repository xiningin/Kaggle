{"cell_type":{"dcd920a5":"code","313b9b46":"code","7f6d256f":"code","e133b887":"code","32b926ed":"code","d87d9f2d":"code","e409a440":"code","29d67381":"code","311928f7":"code","627f2483":"code","383419c0":"code","05820ade":"code","446f9dd6":"code","c3aea199":"code","0c8599a1":"code","f68d5ad9":"code","e37baf22":"code","eaa58d05":"code","10e2dbb4":"code","14f1199b":"code","48531441":"code","74873500":"code","de2c00bb":"code","60ee26fb":"code","1cc07353":"code","32410c7b":"code","bedc449d":"code","b9ad7d94":"code","6b93985e":"code","0f916d4d":"code","70a36437":"code","117f4938":"code","f2db5fd6":"markdown","5775df32":"markdown","f4c178a2":"markdown","6908b7f2":"markdown","5fc1e7a8":"markdown","afd3cca8":"markdown","333a4ff3":"markdown","d6910c37":"markdown","9327787f":"markdown","e215005f":"markdown","a7b3f048":"markdown","6e24ad6e":"markdown","024da846":"markdown","9a987f67":"markdown","21b0e6e5":"markdown","df0a279c":"markdown","19b63e58":"markdown","d4c62f02":"markdown","3470190e":"markdown","164b2b3d":"markdown","8bece2ff":"markdown","85f38e5c":"markdown","0124fa88":"markdown","3e0a1aaf":"markdown","45e532fa":"markdown"},"source":{"dcd920a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","313b9b46":"## Importing Libraries\nimport numpy as np\nimport spacy\nfrom spacy import displacy\nimport matplotlib.pyplot as plt\nimport warnings\nimport os\nwarnings.filterwarnings('ignore')\n%matplotlib inline","7f6d256f":"dictOfFilenames={i : filenames[i] for i in range(0, len(filenames) )}\n","e133b887":"dict_files=dictOfFilenames.copy()\ndict_files","32b926ed":"for i,filename in enumerate(filenames):\n    dictOfFilenames[i] = open(os.path.join(dirname, filename),'r').read()","d87d9f2d":"dictOfFilenames[0]","e409a440":"import nltk\nfrom nltk.corpus import words as english_words, stopwords\nimport re\n\n## replacing the newlines and extra spaces\ncorpus = dictOfFilenames[0].replace('\\n', ' ').replace('\\r', '').replace('  ',' ').lower()\n\n## removing everything except alphabets\ncorpus_sans_symbols = re.sub('[^a-zA-Z \\n]', '', corpus)\n\n## removing stopwords\nstop_words = set(w.lower() for w in stopwords.words())\n\ncorpus_sans_symbols_stopwords = ' '.join(filter(lambda x: x.lower() not in stop_words, corpus_sans_symbols.split()))\nprint (corpus_sans_symbols_stopwords)","29d67381":"from nltk.stem import PorterStemmer\nstemmer=nltk.PorterStemmer()\ncorpus_stemmed = ' ' .join (map(lambda str: stemmer.stem(str), corpus_sans_symbols_stopwords.split()))\nprint (corpus_stemmed)","311928f7":"# Plot top 20 frequent words\nfrom collections import Counter\nword_freq = Counter(corpus_stemmed.split(\" \"))\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\ncommon_words = [word[0] for word in word_freq.most_common(20)]\ncommon_counts = [word[1] for word in word_freq.most_common(20)]\n\n\nplt.figure(figsize=(12, 8))\n\nsns_bar = sns.barplot(x=common_words, y=common_counts)\nsns_bar.set_xticklabels(common_words, rotation=45)\nplt.title('Most Common Words in the document')\nplt.show()","627f2483":"import spacy\n## Spacy example \nnlp = spacy.load('en')\ndoc = nlp(dictOfFilenames[0])\ntoken_list=[]\nfor token in doc:\n    token_list.append([token.text,token.idx,token.lemma_,token.is_punct,token.pos_,token.tag_])\nprint(token_list[:20])","383419c0":"## passing our text into spacy\ndoc = nlp(dictOfFilenames[0])\n\n## filtering stopwords, punctuations, checking for alphabets and capturing the lemmatized text\nspacy_tokens = [token.lemma_ for token in doc if token.is_stop != True \\\n                and token.is_punct != True and token.is_alpha ==True]","05820ade":"word_freq_spacy = Counter(spacy_tokens)\n\n# Plot top 20 frequent words\n\nsns.set_style(\"whitegrid\")\ncommon_words = [word[0] for word in word_freq_spacy.most_common(20)]\ncommon_counts = [word[1] for word in word_freq_spacy.most_common(20)]\n\n\nplt.figure(figsize=(12, 8))\n\nsns_bar = sns.barplot(x=common_words, y=common_counts)\nsns_bar.set_xticklabels(common_words, rotation=45)\nplt.title('Most Common Words in the document')\nplt.show()","446f9dd6":"text_str = ''.join(dictOfFilenames[0].replace('\\n',' ').replace('\\t',' '))\nsentences_split = text_str.split(\".\")\nsentences_split[67]","c3aea199":"doc = nlp(text_str)\nsentence_list = [s for s in doc.sents]\nsentence_list[67]","0c8599a1":"spacy.displacy.render(sentence_list[67], style='dep',jupyter=True,options = {'compact':60})\npos_list = [(token, token.pos_) for token in sentence_list[67]]","f68d5ad9":"text_ent_example=dictOfFilenames[0]","e37baf22":"doc = nlp(text_ent_example)\nspacy.displacy.render(doc, style='ent',jupyter=True)","eaa58d05":"# Obtain additional stopwords from nltk\nfrom nltk.corpus import stopwords\nstop_words = stopwords.words('english')\nstop_words.extend(['from', 'subject', 're', 'edu', 'use'])","10e2dbb4":"stop_words","14f1199b":"import gensim\nfrom gensim.utils import simple_preprocess\nfrom gensim.parsing.preprocessing import STOPWORDS","48531441":"# Remove stopwords and remove words with 2 or less characters\ndef preprocess(text):\n    result = []\n    for token in gensim.utils.simple_preprocess(text):\n        if token not in gensim.parsing.preprocessing.STOPWORDS and len(token) > 3 and token not in stop_words:\n            result.append(token)\n            \n    return result","74873500":"type(dictOfFilenames[0])","de2c00bb":"df = pd.DataFrame([dictOfFilenames[0]])","60ee26fb":"df['clean'] = df[0].apply(preprocess)","1cc07353":"df.head()","32410c7b":"# Obtain the total words present in the dataset\nlist_of_words = []\nfor i in df.clean:\n    for j in i:\n        list_of_words.append(j)","bedc449d":"list_of_words","b9ad7d94":"len(list_of_words)","6b93985e":"# Obtain the total number of unique words\ntotal_words = len(list(set(list_of_words)))\ntotal_words","0f916d4d":"# join the words into a string\ndf['clean_joined'] = df['clean'].apply(lambda x: \" \".join(x))","70a36437":"df","117f4938":"from wordcloud import WordCloud, STOPWORDS\n\n# plot the word cloud for text for Toledo Rally\nplt.figure(figsize = (20,20)) \nwc = WordCloud(max_words = 2000 , width = 1600 , height = 800 , stopwords = stop_words).generate(\" \".join(df.clean_joined))\nplt.imshow(wc, interpolation = 'bilinear')","f2db5fd6":"spaCy uses a statistical model to classify a broad range of entities, including **persons, organisations, dates**.","5775df32":"spaCy features a fast and accurate syntactic **dependency parser**, and has a rich API for navigating the tree. The parser also powers the sentence boundary detection, and lets you iterate over base noun phrases, or \u201cchunks\u201d","f4c178a2":"### 1. POS tagging and Dependency Parsing","6908b7f2":"**Stemming**: Stemming is a rudimentary rule-based process of stripping the suffixes (\u201cing\u201d, \u201cly\u201d, \u201ces\u201d, \u201cs\u201d etc) from a word.\n\n**Lemmatization**: Lemmatization, on the other hand, is an organized & step by step procedure of obtaining the root form of the word, it makes use of vocabulary (dictionary importance of words) and morphological analysis (word structure and grammar relations).","5fc1e7a8":"**Reading the contents of the Folder**","afd3cca8":"### **Introducing Spacy**","333a4ff3":"**Spacy features**\n* **Tokenization:** Segmenting text into words, punctuations marks etc.\n* **Dependency Parsing:** Assigning syntactic dependency labels, describing the relations between individual tokens, like subject or object.\n* **Lemmatization:** Assigning the base forms of words. For example, the lemma of \u201cwas\u201d is \u201cbe\u201d, and the lemma of \u201crats\u201d is \u201crat\u201d.\n* **Sentence Boundary Detection (SBD):** Finding and segmenting individual sentences.\n* **Named Entity Recognition (NER):** Labelling named \u201creal-world\u201d objects, like persons, companies or locations.\n* **Part-of-speech (POS) Tagging:** Assigning word types to tokens, like verb or noun.\n\nWe can download other language models by running a code like below in your shell or terminal","d6910c37":"# Part B: Feature Generation\/Document Representation","9327787f":"### 3. Stemming and Lemmatizing(using NLTK)","e215005f":"### Preprocessing in Spacy","a7b3f048":"Below, we will run the **NER** detection on a subset of the corpus from our text and also check the captured **Names** and **Organisations**\n","6e24ad6e":"### 1. Text Extraction and Conversion","024da846":"The object \u201cnlp\u201d is used to create documents, access linguistic annotations and different nlp properties.\n\nThe document is now part of spacy.english model\u2019s class and is associated with a number of features and properties.\n\nWe would take the text for the first document and pass it to the spacy\u2019s nlp object. Now doc contains various linguistic features which can be accesses quite easily.","9a987f67":"Spacy sentence segmentation","21b0e6e5":"### Plotting top 20 words","df0a279c":"Part-of-speech tagging is the process of assigning grammatical properties (e.g. noun, verb, adverb, adjective etc.) to words. Words that share the same POS tag tend to follow a similar syntactic structure and are useful in rule-based processes.","19b63e58":"### 2. Named Entity Recognition","d4c62f02":"Entity recognition is the process of classifying named entities found in a text into pre-defined categories, such as persons, places, organizations, dates, etc","3470190e":"### 4. Sentence Segmentation","164b2b3d":"Spacy operation in just a single line!","8bece2ff":"For this exercise we will take some sample documents i,e class action complaints for violations of the securities law. The data files are already in \u2018.txt\u2019 format and thus they dont need conversion.","85f38e5c":"### 2. Removing special characters and stopwords(using NLTK)","0124fa88":"If we notice the above text, there are a lot of unwanted characters such as puncuations, newlines which we need to deal with before heading into further analysis.","3e0a1aaf":"**Checking the word distribution in the document**","45e532fa":"As an example, we will take the above sentence and feed that into the **pos** and **dependency parser**."}}