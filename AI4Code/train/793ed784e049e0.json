{"cell_type":{"f291eafb":"code","f172aeaf":"code","d7093cc5":"code","4cf85495":"code","3cf3defe":"code","5951011b":"code","b72775a1":"code","5d7a8b2b":"code","79b2dd24":"code","51a1936b":"code","62cebcc7":"code","41c20054":"code","f3078d50":"code","2525fcfd":"code","57b20a99":"code","9302b149":"code","9e9ac996":"code","b3a2fb56":"code","7f08a73a":"code","0a14cd05":"code","c829f6b7":"code","2301c7ed":"code","b13c1695":"code","7ce5d631":"code","2456c289":"code","a5b81f16":"code","4d0d847a":"code","6532b899":"markdown","a5c6fa90":"markdown","e6612282":"markdown","a4da47e7":"markdown","dccd1f72":"markdown"},"source":{"f291eafb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f172aeaf":"myData = pd.read_csv('..\/input\/data.csv')","d7093cc5":"myData.info() ","4cf85495":"myData.head() # first 5 objects","3cf3defe":"myData.tail() # last 5 objects","5951011b":"myData.describe() #only numeric feature","b72775a1":"myData.columns","5d7a8b2b":"myData.dtypes","79b2dd24":"myData.loc[:10,\"Name\":\"Overall\"] # write 0-10 line from Name columns to Overall columns ","51a1936b":"#filtering\nfiltering_data = myData.Nationality == \"Brazil\"\nfiltering_data2 = myData.Age < 25\nfiltering_data3 = myData.Overall > 75\nmyData[filtering_data & filtering_data2 & filtering_data3]","62cebcc7":"myData.Overall.mean() # mean of Overall","41c20054":"myData.corr()","f3078d50":"#correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(myData.corr(), annot=True, linewidths=.10, fmt= '.1f',ax=ax)\nplt.show()","2525fcfd":"# Line Plot\nmyData.SprintSpeed.plot(kind='line',color='blue',label='SprintSpeed',grid='True',linewidth=0.5,alpha = 0.5,linestyle=':')\nmyData.ShotPower.plot(color='red',label='ShotPower',grid='True',linewidth=0.5,alpha = 0.5,linestyle='-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","57b20a99":"# Scatter Plot \n# x = overall, y = potential\nmyData.plot(kind='scatter', x='Overall', y='Potential',alpha = 0.5,color = 'green', grid='True')\nplt.xlabel('Overall')              # label = name of label\nplt.ylabel('Potential')\nplt.title('Overall-Potential Scatter Plot')            # title = title of plot\nplt.show()","9302b149":"myData.Age.plot(kind = 'hist',bins = 64,figsize = (14,14))\nplt.show()","9e9ac996":"#D\u0130CT\u0130ONARY\ndictionary = {'Turkey':'Fenerbahce','Spain':'Real Madrid','England':'Liverpool','Germany':'Dortmund','Italy':'Milan','Portugal':'Sporting Lizbon'}\nprint(dictionary.keys())\nprint(dictionary.values())","b3a2fb56":"dictionary['France'] =  \"PSG\" # add\nprint(dictionary)\ndictionary['Portugal'] = \"Benfica\" # update \nprint(dictionary)\ndictionary['Russia'] =  \"Cska Moscow\" # add\nprint(dictionary)\ndel dictionary['Russia']\nprint(dictionary)\nprint('Russia' in dictionary)","7f08a73a":"# LOOP\ni=0\nwhile i != 100:\n    print('i is :',i)\n    i = i+2\nprint(i ,' is equal to 100')    ","0a14cd05":"print(dictionary)\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')","c829f6b7":"for index,value in myData[['Age']][5:10].iterrows():\n    print(index,\" : \",value)","2301c7ed":"def first_fun():\n    \"\"\"return defined t tuble\"\"\"\n    t = (2,4,6,8)\n    return t\na,b,c,d = first_fun()\nprint(a,b,c,d)","b13c1695":"a = 8\ndef first():\n    y = 10+a\n    return y \nprint(first())\n    \n ","7ce5d631":"def first():\n    def second():\n        a=2019\n        b=1996\n        c=a-b\n        return c\n    return second()*3\nprint(first())","2456c289":"def first(r,pi=3.14):\n    \"\"\"circumference\"\"\"\n    result = 2*pi*r\n    return result\ncircle = first(5)\ntoInt = int(circle) #double to int\nprint(toInt)\n","a5b81f16":"def f(*args):\n    for i in args:\n        print(i)\nf(2,4,6,8,10)\n","4d0d847a":"age = lambda x: 2019-x\nprint(age(1996))\n","6532b899":"**NESTED FUNCTIONS**","a5c6fa90":"**SCOPE**","e6612282":"**USER DEF\u0130NED FUNCT\u0130ONS**","a4da47e7":"**LAMBDA FUNCTION**\n","dccd1f72":"**DEFAULT AND FLEXIBLE ARGUMENTS**"}}