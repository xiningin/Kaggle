{"cell_type":{"86184986":"code","bc89b985":"code","b5001614":"code","8db28383":"code","5476770f":"code","c60e770b":"code","8ed02790":"code","76d44a03":"code","949fd3d9":"code","cf3b14ee":"code","7985b06d":"code","883575d8":"code","728c0438":"code","97a00066":"code","bc76ce66":"code","86204203":"markdown","53be7b0e":"markdown","9719c8bb":"markdown","f981fea1":"markdown","4ab90e5d":"markdown","fd9c9543":"markdown"},"source":{"86184986":"import cudf\nimport cuml\nimport cupy as cp\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport glob\nimport os\nfrom scipy.interpolate import interp1d\nimport gc\nfrom cuml.linear_model import Ridge\nfrom cuml.neighbors import KNeighborsRegressor\nfrom cuml.svm import SVR\nfrom cuml.ensemble import RandomForestRegressor\nfrom cuml.preprocessing.TargetEncoder import TargetEncoder\nfrom sklearn.model_selection import GroupKFold, KFold\nfrom cuml.metrics import mean_squared_error\nfrom cuml.manifold import TSNE, UMAP\n\nimport soundfile as sf\n# Librosa Libraries\nimport librosa\nimport librosa.display\nimport IPython.display as ipd\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\n\nfrom sklearn.metrics import roc_auc_score, label_ranking_average_precision_score\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","bc89b985":"train = cudf.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv\")\ntest = cudf.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv\")\nsample_submission = cudf.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')\n\ntarget = train['target'].values\ncolumns = test.columns[1:]\ncat_features = columns[:10]\ncat_features","b5001614":"train.head()","8db28383":"test.head()","5476770f":"%%time\nFOLDS = 10\nSMOOTH = 0.001\nSPLIT = 'interleaved'\nfor col in cat_features:\n\n    encoder = TargetEncoder(n_folds=FOLDS, smooth=SMOOTH, split_method=SPLIT)\n    train[col] = encoder.fit_transform(train[col], train['target'])\n    test[col] = encoder.transform(test[col])","c60e770b":"train.head()","8ed02790":"test.head()","76d44a03":"train_test = cp.vstack([train[columns].values, test[columns].values])","949fd3d9":"train_test","cf3b14ee":"%%time\ntsne = TSNE(n_components=2)\ntrain_test_2D = tsne.fit_transform(train_test)","7985b06d":"train_test_2D = cp.asnumpy(train_test_2D)","883575d8":"plt.scatter(train_test_2D[:,0], train_test_2D[:,1], s = 0.5)","728c0438":"%%time\numap = UMAP(n_components=2)\ntrain_test_2D = umap.fit_transform(train_test)","97a00066":"train_test_2D = cp.asnumpy(train_test_2D)","bc76ce66":"plt.scatter(train_test_2D[:,0], train_test_2D[:,1], s = 0.5)\n","86204203":"In this notebook we'll do dimensionality reduction and visualization of the features. We will make this visualization notebook with the Rapids library. [Rapids](https:\/\/rapids.ai) is an open-source GPU accelerated Data Sceince and Machine Learning library, developed and mainatained by [Nvidia](https:\/\/www.nvidia.com). It is designed to be compatible with many existing CPU tools, such as Pandas, scikit-learn, numpy, etc. It enables **massive** acceleration of many data-science and machine learning tasks, oftentimes by a factor fo 100X, or even more. \n\nRapids is still undergoing developemnt, and only recently has it become possible to use RAPIDS natively in the Kaggle Docker environment. If you are interested in installing and riunning Rapids locally on your own machine, then you should [refer to the followong instructions](https:\/\/rapids.ai\/start.html).","53be7b0e":"That looks even more interesting.","9719c8bb":"* Now let's take a look at the data","f981fea1":"This dataset contains 10 categorical features. These featrues cannot be used as they are for the dimensionality reduction, so we'll have to convert them into numerical values. We'll do this by target encoding them. Target encoding can be tricky, and the most rigorous way of doing it is by using some kind of cross-validation scheme. However, as we are only interested in visualizing the features, and not necessarily in getting good modeling features, we'll use a simpler approach to target encoding. ","4ab90e5d":"<img src=\"https:\/\/developer.nvidia.com\/sites\/default\/files\/pictures\/2018\/rapids\/rapids-logo.png\"\/>","fd9c9543":"Seems there are some interesting groupings in the data.\n\nNow let's look at what the dataset looks with UMAP dimensionality reduction."}}