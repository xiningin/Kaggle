{"cell_type":{"ac02e4e4":"code","c55f32c9":"code","e1de9328":"code","eb3e301b":"code","9bafb590":"code","20679f59":"code","93552e67":"code","e0c6fcde":"code","745c207b":"code","ea79da93":"code","b4c10204":"code","dc3b3fee":"code","f2327b42":"code","57dd7cac":"code","1da78c40":"code","7753d79f":"code","58d5aba4":"code","8b14f386":"code","8b62b7a9":"code","c0e9ca9d":"code","299f4d58":"code","114f5d6e":"markdown","42e8e32b":"markdown"},"source":{"ac02e4e4":"import pandas as pd\nimport numpy as np\nimport pickle\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom keras.layers.core import Dense, Activation, Dropout\nfrom keras.layers.recurrent import LSTM\nfrom keras.models import Sequential, load_model, save_model\nimport seaborn as sns\nfrom pylab import rcParams\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn import metrics\n\n%matplotlib inline\n\nsns.set(style='whitegrid', palette='muted', font_scale=1.5)\n\nrcParams['figure.figsize'] = 14, 8\n\nRANDOM_SEED = 42","c55f32c9":"df = pd.read_csv(\"..\/input\/nyse\/prices-split-adjusted.csv\")\nplot_x = df['date'].copy()\ndf.set_index(\"date\", inplace = True)\ndf.index = pd.to_datetime(df.index)\ndf.head()","e1de9328":"print(type(plot_x))","eb3e301b":"google_stock = df[df['symbol'] == 'GOOG']\ngoogle_stock.head()","9bafb590":"x_scaler = MinMaxScaler()\ny_scaler = MinMaxScaler()\ngoog_df = google_stock.copy()\ngoog_df.drop(['symbol'], axis=1, inplace=True)\nx = goog_df[['open', 'low', 'high', 'volume']].copy()\ny = goog_df['close'].copy()\n\nx[['open', 'low', 'high', 'volume']] = x_scaler.fit_transform(x)\ny = y_scaler.fit_transform(y.values.reshape(-1, 1))","20679f59":"def load_data(X, seq_len, train_size=0.9):\n    amount_of_features = X.shape[1]\n    X_mat = X.values\n    sequence_length = seq_len + 1\n    data = []\n    \n    for index in range(len(X_mat) - sequence_length):\n        data.append(X_mat[index: index + sequence_length])\n    \n    data = np.array(data)\n    train_split = int(round(train_size * data.shape[0]))\n    train_data = data[:train_split, :]\n    \n    x_train = train_data[:, :-1]\n    y_train = train_data[:, -1][:,-1]\n    \n    x_test = data[train_split:, :-1] \n    y_test = data[train_split:, -1][:,-1]\n\n    x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], amount_of_features))\n    x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], amount_of_features))  \n\n    return x_train, y_train, x_test, y_test","93552e67":"window = 22\nx['close'] = y\nX_train, y_train, X_test, y_test = load_data(x, window)\nprint(X_train.shape, y_train.shape, X_test.shape, y_test.shape)\nprint (X_train[0], y_train[0])","e0c6fcde":"def build_model(input_shape):\n    d = 0.2\n    model = Sequential()\n    \n    model.add(LSTM(128, input_shape=input_shape, return_sequences=True))\n    model.add(Dropout(d))\n        \n    model.add(LSTM(128, input_shape=input_shape, return_sequences=False))\n    model.add(Dropout(d))\n        \n    model.add(Dense(32,kernel_initializer=\"uniform\",activation='relu'))        \n    model.add(Dense(1,kernel_initializer=\"uniform\",activation='linear'))\n    \n    model.compile(loss='mse',optimizer='adam', metrics=['accuracy'])\n    return model","745c207b":"model = build_model(input_shape=(window, 5))","ea79da93":"model.fit(X_train, y_train, batch_size=32, epochs=500, verbose=0)","b4c10204":"save_model(model, \"model.h5\")","dc3b3fee":"model = load_model(\"model.h5\")","f2327b42":"trainPredict = model.predict(X_train)\ntestPredict = model.predict(X_test)","57dd7cac":"trainPredict = y_scaler.inverse_transform(trainPredict)\ntrainY = y_scaler.inverse_transform([y_train])\ntestPredict = y_scaler.inverse_transform(testPredict)\ntestY = y_scaler.inverse_transform([y_test])","1da78c40":"plot_predicted = testPredict.copy()\nplot_predicted = plot_predicted.reshape(174, 1)\nplot_actual = testY.copy()\nplot_actual = plot_actual.reshape(174, 1)\nprint(plot_actual.shape)\nprint(plot_predicted.shape)","7753d79f":"plot_x = pd.to_datetime(plot_x.iloc[-174:])","58d5aba4":"plt.plot(pd.DataFrame(plot_predicted), label='Predicted')\nplt.plot(pd.DataFrame(plot_actual), label='Actual')\nplt.legend(loc='best')\nplt.show()","8b14f386":"trainScore = metrics.mean_squared_error(trainY[0], trainPredict[:,0]) ** .5\nprint('Train Score: %.2f RMSE' % (trainScore))\ntestScore = metrics.mean_squared_error(testY[0], testPredict[:,0]) ** .5\nprint('Test Score: %.2f RMSE' % (testScore))","8b62b7a9":"google_stock_prices = google_stock.close.values.astype('float32')\ngoogle_stock_prices = google_stock_prices.reshape(len(google_stock_prices), 1)","c0e9ca9d":"trainPredictPlot = np.empty_like(google_stock_prices)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[window:len(trainPredict)+window, :] = trainPredict\n\ntestPredictPlot = np.empty_like(google_stock_prices)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[(len(google_stock_prices) - testPredict.shape[0]):len(google_stock_prices), :] = testPredict","299f4d58":"plt.plot(pd.DataFrame(google_stock_prices, columns=[\"close\"], index=goog_df.index).close, label='Actual')\nplt.plot(pd.DataFrame(trainPredictPlot, columns=[\"close\"], index=goog_df.index).close, label='Training')\nplt.plot(pd.DataFrame(testPredictPlot, columns=[\"close\"], index=goog_df.index).close, label='Testing')\nplt.legend(loc='best')\nplt.show()","114f5d6e":"## Thank you all for reading\n**If you have any question or concern, please leave a comment. Otherwise, see you next time!**","42e8e32b":"# Predicting Closing price of Google stocks using LSTM"}}