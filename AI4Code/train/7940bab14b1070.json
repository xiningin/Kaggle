{"cell_type":{"0e2720d6":"code","15cf2282":"code","851a59df":"code","22410fbe":"code","d2b16c00":"code","b059b40b":"code","58c12d06":"code","d68d39e2":"code","c4a27402":"code","fd9c5b43":"code","7b2f9a69":"code","c1954f73":"code","95dece9f":"code","b413831f":"code","9d5fb73a":"code","3691a0c6":"code","862eca00":"code","35a79651":"code","4ff6719d":"code","6bf40041":"code","0d986420":"code","cac44cef":"code","a802dad7":"code","dd4d742f":"markdown","6f987884":"markdown","29d94ff9":"markdown","da09265f":"markdown","11b79b92":"markdown","bbdbf002":"markdown","8c59c02f":"markdown","b33018eb":"markdown","09ada868":"markdown","04f012a3":"markdown","32d93ecc":"markdown","d8faee37":"markdown","5094be4a":"markdown","995ee478":"markdown","4e190ba9":"markdown","ccb7a7f9":"markdown","fe86217f":"markdown","d169351a":"markdown","300e51ad":"markdown"},"source":{"0e2720d6":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom IPython.display import display,clear_output\nfrom scipy.stats import chi2_contingency\nfrom statsmodels.stats.proportion import proportions_ztest\nfrom IPython.core.display import display, HTML","15cf2282":"data = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv',header=1,na_values='NaN')\ndata = data.fillna('Not Given')\ndata.head()","851a59df":"fig = make_subplots(rows=1, cols=2)\n\nannotate =[]\ntitle1='Box plot of Time Duration (in Hours)'\ntitle2='Histogram of Time Duration (in Hours)'\nstrs =\"Most of the people finished survey in less <br>\" \\\n        \"than an hour <br>\" \\\n        \"but there are few people who <br>\" \\\n        \"took more time, however percentage <br>\" \\\n        \"is marginally low and it seems that these <br>\" \\\n         \"people did not fill the survey seriously\"\n\n\nannotate.append(dict(xref='x1', yref='y1',\n                            y=350, x=0,\n                            text=title1,\n                            font=dict(family='Arial', size=10,\n                                      color='rgb(128, 0, 128)'),\n                            showarrow=False))\nannotate.append(dict(xref='x2', yref='y2',\n                            y=15000, x=150,\n                            text=title2,\n                            font=dict(family='Arial', size=10,\n                                      color='rgb(128, 0, 128)'),\n                            showarrow=False))\nannotate.append(dict(xref='x2', yref='y2',\n                            y=5000, x=150,\n                            text=strs,\n                            font=dict(family='Arial', size=10,\n                                      color='rgb(128, 0, 128)'),\n                            showarrow=False))\n\nfig.layout.annotations=annotate \nfig.add_trace(go.Box(y=data['Duration (in seconds)']\/(60*60)),row=1, col=1)\n\nfig.add_trace(go.Histogram(x=data['Duration (in seconds)']\/(60*60)),row=1, col=2)\n\nfig.update_layout(height=500, width=900, title_text=\"Distribution of duration of reponse\"\n                  ,paper_bgcolor='#EAECEE',plot_bgcolor='#EAECEE',showlegend=False)\n\nfig.show()","22410fbe":"def plot_map(grp_data,title=''):\n    fig = go.Figure(data=go.Choropleth(\n            locations = grp_data['Country'],\n            z = grp_data['people'],\n            text = grp_data['Country'],\n            colorscale = 'earth',\n            locationmode = 'country names',\n            autocolorscale=False,\n            reversescale=False,\n            marker_line_color='darkgray',\n            marker_line_width=0.5,\n            colorbar_tickprefix = '',\n            colorbar_title = 'people',\n        ))\n\n    fig.update_layout(\n        title_text=title,height=500,width=900,\n        geo=dict(showframe=False,showcoastlines=False,projection_type='equirectangular'),\n        annotations = [dict(x=0.55,y=1,xref='paper',yref='paper'\n                            ,text=\"Most of the respondents are from India followed by USA and Brazil.\"\n                            ,showarrow = False)],\n        paper_bgcolor='#EAECEE',plot_bgcolor='#EAECEE'\n    )\n    fig.show()","d2b16c00":"grp_data = data.groupby(by='In which country do you currently reside?').size().sort_values(ascending=False).reset_index()\ngrp_data.columns =['Country','people']\nplot_map(grp_data,title='Repondents by geography')","b059b40b":"cols ={'What is your gender? - Selected Choice': 'gender',\n 'What is your age (# years)?': 'age',\n 'What is the highest level of formal education that you have attained or plan to attain within the next 2 years?': 'education',\n 'Select the title most similar to your current role (or most recent title if retired): - Selected Choice': 'role'\n       ,'For how many years have you been writing code and\/or programming?':'coding_experiance'\n       ,'For how many years have you used machine learning methods?':'ml_experiance'}\ndata = data.rename(columns=cols)","58c12d06":"def get_chi_square_result(tbl,feature1='Col1',feature2='Col2',alpha=.05):\n    \n    stat, p, dof, expected = chi2_contingency(tbl)\n   \n    strs1 = 'significance=%.3f, p=%.3f' % (alpha, p)\n    if p <= alpha:\n        strs2 ='{0} and {1} are dependent ( Hence we reject H0)'.format(feature1,feature2)\n    else:\n        strs2 = '{0} and {1} are Independent ( Hence we fail reject H0)'.format(feature1,feature2)\n    return(strs1,strs2)\n\ndef get_proportion_test(count,nobs):\n    stat, pval = proportions_ztest(count, nobs)\n    return(pval)\n\ndef display_header_html(strs):\n    prints = HTML('<h1 style=\"background-color:#C3CFCD; font-size:120%; font-family:sans-serif; border:2px solid DodgerBlue;\">'+ strs +'<\/h1>')\n    display(prints)\n\ndef display_paragraph_html(strs):\n    prints = HTML('<h1 style=\"background-color:lightgray; font-size:100%;\">'+ strs +'<\/h1>')\n    display(prints)","d68d39e2":"gender_country = data.groupby(by=['In which country do you currently reside?','gender']).size().sort_values(ascending=False).reset_index()\ngender_country.columns =['Country','Gender','Frequency']\n\nobs = gender_country[gender_country.Country.isin(['India'\n                                                    ,'United States of America'])].groupby('Country')['Frequency'].sum().tolist()\ncount =  gender_country[gender_country.Country.isin(['India'\n                                                    ,'United States of America']) & (gender_country.Gender=='Man')].groupby('Country')['Frequency'].sum().tolist()\n\npval_india_usa = get_proportion_test(count,obs)\nalpha = .05\n\n\ncount_world =  gender_country.loc[gender_country.Gender=='Man','Frequency'].sum()\nobs_world =  gender_country.loc[:,'Frequency'].sum()\n\npval_india_world = get_proportion_test([count[0],count_world],[obs[0],obs_world])\npval_usa_world = get_proportion_test([count[1],count_world],[obs[1],obs_world])\n","c4a27402":"\nstrs10 = '\\nIndia vs USA : Significance=%.3f, p=%.3f' % (alpha, pval_india_usa)\nstrs11= \"\"\"Since p value is more than level of significance then we fail to reject null hypothesis of test of proportion\nand conclude that male proportion in India are significantly similar to USA\n\"\"\"\nstrs20 = '\\nIndia vs World : Significance=%.3f, p=%.3f' % (alpha, pval_india_world)\nstrs21= \"\"\"Since p value is less than level of significance then we accept null hypothesis of test of proportion\nand conclude that male responder proportion in India is significantly different than male responder proportion of the World\"\"\"\n\nstrs30 = '\\nUSA vs World   : Significance=%.3f, p=%.3f' % (alpha, pval_usa_world)\nstrs31= \"\"\"Since p value is less than level of significance then we accept null hypothesis of test of proportion\nand conclude that male responder proportion in USA is significantly different than male responder proportion of the World\"\"\"\n\ndisplay_header_html(strs10)\ndisplay_paragraph_html(strs11)\n\ndisplay_header_html(strs20)\ndisplay_paragraph_html(strs21)\n\ndisplay_header_html(strs30)\ndisplay_paragraph_html(strs31)\n\n\nfig = make_subplots(rows=1, cols=3 , specs=[[{'type':'domain'}, {'type':'domain'},{'type':'domain'}]]\n                   # ,subplot_titles=(\"Accross World\", \"Inida\", \"USA\")\n                   )\ncolors = ['#408CD7','#8D9142','#84C557','#57C59C','#579CC5','#FDEBD0']\n\ngender_country = data.groupby(by=['gender','In which country do you currently reside?']).size().reset_index()\ngender_country.columns = ['Gender','Country','Frequency']\n\nfor i,country in enumerate(['All','India','United States of America']):\n    if i ==0:\n        gender = gender_country.groupby('Gender')['Frequency'].sum().reset_index()\n        gender.columns =['Gender','Frequency']\n    else:\n        gender = gender_country[gender_country['Country']==country]\n    \n    fig.add_trace(go.Pie(labels=gender.Gender\n                         , values=gender.Frequency\n                         , name=country,marker_colors =colors,textinfo='label+percent' ),1, i+1)\n\nfig.update_traces(hole=.3)\nstrs = \"\"\"<b>Gender proportion across the world vs top 2 countries India and USA based on number of responders<\/b>\"\"\"\nfig.update_layout(width=1000,\n    title_text =strs,\n    font=dict(family=\"Courier New, monospace\",size=10,color=\"RebeccaPurple\")\n    ,annotations=[dict(text='Overall', x=0.11, y=0.5, font_size=10, showarrow=False)\n                  ,dict(text='Men', x=0.50, y=0.5, font_size=10, showarrow=False)\n                  ,dict(text='Women', x=0.87, y=0.5, font_size=10, showarrow=False)]\n    ,legend=dict(orientation=\"h\",yanchor=\"bottom\",y=0,xanchor=\"right\",x=1),\n    margin=dict(l=100, r=20, t=70, b=70),\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)')\nfig.show()","fd9c5b43":"df = data[['age','gender','education','role','coding_experiance','ml_experiance']].sort_values(by='age').copy()\ndf['role1']=np.where(df.role=='Student','Student',np.where(df.role=='Not Given','Not Given','Working Professionals'))\n#df = df.drop(columns='role')\n\nnode = df.melt().value.unique().tolist()\nnode_map = dict([(val,idx) for idx , val in enumerate(node)])\ndf['gender'] = df.gender.map(node_map)\ndf['age'] = df.age.map(node_map)\ndf['education'] = df.education.map(node_map)\ndf['role1'] = df.role1.map(node_map)\ndf['role'] = df.role.map(node_map)\ndf['coding_experiance'] = df.coding_experiance.map(node_map)\ndf['ml_experiance'] = df.ml_experiance.map(node_map)\ndf=df.sort_values(by='age')\n\nshanky_grp1 = df.groupby(by = ['age','gender']).size().reset_index().rename(columns={0:'frequency'\n                                                                                       ,'age':'target'\n                                                                                       ,'gender':'source'})\n\n\nshanky_grp2 = df.groupby(by = ['age','education']).size().reset_index().rename(columns={0:'frequency'\n                                                                                       ,'age':'source'\n                                                                                       ,'education':'target'})\nshanky_grp3 = df.groupby(by = ['education','role1']).size().reset_index().rename(columns={0:'frequency'\n                                                                                       ,'education':'target'\n                                                                                       ,'role1':'source'})\n\nshanky_grp4 = df.groupby(by = ['role1','coding_experiance']).size().reset_index().rename(columns={0:'frequency'\n                                                                                       ,'role1':'source'\n                                                                                       ,'coding_experiance':'target'})\n\nshanky_grp5 = df.groupby(by = ['ml_experiance','coding_experiance']).size().reset_index().rename(columns={0:'frequency'\n                                                                                       ,'ml_experiance':'source'\n                                                                                       ,'coding_experiance':'target'})\n\nshanky_grp6 = df.groupby(by = ['ml_experiance','role1']).size().reset_index().rename(columns={0:'frequency'\n                                                                                       ,'ml_experiance':'source'\n                                                                                       ,'role1':'target'})\nshanky_grp7 = df.groupby(by = ['ml_experiance','role']).size().reset_index().rename(columns={0:'frequency'\n                                                                                       ,'ml_experiance':'source'\n                                                                                       ,'role':'target'})\n","7b2f9a69":"def plot_shanky(data,node):\n    fig = go.Figure(data=[go.Sankey(\n        #valueformat = \".0f\",\n        #valuesuffix = \"TWh\",\n        orientation = \"v\",\n        node = dict(\n          pad = 15,\n          thickness = 15,\n          line = dict(color = \"lightblue\", width = 0.5),\n          label =  node,\n            \n        ),\n\n        link = dict(\n          source =  data['source'],\n          target =  data['target'],\n          value =  data['frequency'],\n          color = data['color']\n\n    ))])\n    #fig.update_traces(link_color='#76B8D3', selector=dict(type='sankey'))\n    return(fig)\nheader = \"Gender vs Age group\"\nstrs = \"\"\"Most of the responders are male and the age group is between 18 t0 30 years and almost same pattern applied\nto female responders\"\"\"\n\nshanky_grp = shanky_grp1.copy()\nshanky_grp['color']=np.where(shanky_grp1.source==12,'#408CD7',np.where(shanky_grp1.source==11,'#8D9142','#57C59C'))\n\nplot=plot_shanky(data = shanky_grp,node=node)\n\nplot.update_layout(title_text=header,title_font_color=\"black\"\n                  ,font_size=10,height=600,width=1000,paper_bgcolor='#EAECEE'\n                   ,plot_bgcolor='#EAECEE'\n                  ,annotations=[dict(text=strs, x=-.04, y=1.1, font_size=11, showarrow=False)])\nplot.show()","c1954f73":"header = \"Age group vs Education\"\nstrs = \"\"\"Most of the responders have Bachelor's or Master's degree. There are 414 responders out of 20k who completed\ntheir master degree in age of 18 to 21.<br> We also can see few responders did their master degree in the age of 45 to 60\"\"\"\n\n#shanky_grp = pd.concat([shanky_grp1,shanky_grp2])\nshanky_grp = shanky_grp2.copy()\nshanky_grp['color']=np.where(shanky_grp.target==18,'#408CD7'\n                             ,np.where(shanky_grp.target==20,'#8D9142'\n                                       ,np.where(shanky_grp.target==23,'#567987','#57C59C')))\n\nplot=plot_shanky(data = shanky_grp,node=node)\n\nplot.update_layout(title_text=header,title_font_color=\"black\"\n                  ,font_size=10,height=600,width=1000,paper_bgcolor='#EAECEE'\n                   ,plot_bgcolor='#EAECEE'\n                  ,annotations=[dict(text=strs, x=-.04, y=1.1, font_size=11, showarrow=False)])\nplot.show()","95dece9f":"header = \"Role vs education\"\nstrs = \"\"\"As below charts exhibits that most of the responders are working professionals and most of them have master degree.\"\"\"\n\n#shanky_grp = pd.concat([shanky_grp1,shanky_grp2])\nshanky_grp = shanky_grp3.copy()\nshanky_grp['color']=np.where(shanky_grp.target==18,'#408CD7'\n                             ,np.where(shanky_grp.target==20,'#8D9142'\n                                       ,np.where(shanky_grp.target==23,'#567987','#57C59C')))\n\nplot=plot_shanky(data = shanky_grp,node=node)\n\nplot.update_layout(title_text=header,title_font_color=\"black\"\n                  ,font_size=10,height=600,width=1000,paper_bgcolor='#EAECEE'\n                   ,plot_bgcolor='#EAECEE'\n                  ,annotations=[dict(text=strs, x=-.04, y=1.1, font_size=11, showarrow=False)])\nplot.show()","b413831f":"header = \"Role vs Coding experiance\"\nstrs = \"\"\" Majority of responders are having master degree with 1 to 5 years of experience. Interesting \nfact which is coming out form below chart is that, <br> there are students who has some experience of at least 1 year\nwhich indicates that they took admission after gaining experience of few years.\n\"\"\"\n#shanky_grp = pd.concat([shanky_grp1,shanky_grp2])\nshanky_grp = shanky_grp4.copy()\nshanky_grp['color']=np.where(shanky_grp.target==18,'#408CD7'\n                             ,np.where(shanky_grp.target==20,'#8D9142'\n                                       ,np.where(shanky_grp.target==23,'#567987','#57C59C')))\n\nplot=plot_shanky(data = shanky_grp,node=node)\n\nplot.update_layout(title_text=header,title_font_color=\"black\"\n                  ,font_size=10,height=600,width=1000,paper_bgcolor='#EAECEE'\n                   ,plot_bgcolor='#EAECEE'\n                  ,annotations=[dict(text=strs, x=-.04, y=1.1, font_size=11, showarrow=False)])\nplot.show()","9d5fb73a":"header = \"Coding Experiance vs ML experiance\"\nstrs = \"\"\"Those who has never written code as expected do not have experience in ML.<br>\n          The responders who have less than a year of experience in ML has more than 1 years of experience in coding.<br>\n            Which indicates that majority of responders has switch their job into Machine learning.\n\"\"\"\n\nshanky_grp = shanky_grp5.copy()\nshanky_grp['color']=np.where(shanky_grp.target==18,'#408CD7'\n                             ,np.where(shanky_grp.target==20,'#8D9142'\n                                       ,np.where(shanky_grp.target==23,'#567987','#57C59C')))\n\nplot=plot_shanky(data = shanky_grp,node=node)\n\nplot.update_layout(title_text=header,title_font_color=\"black\"\n                  ,font_size=10,height=600,width=1000,paper_bgcolor='#EAECEE'\n                   ,plot_bgcolor='#EAECEE'\n                  ,annotations=[dict(text=strs, x=-.04, y=1.1, font_size=11, showarrow=False)])\nplot.show()","3691a0c6":"header = \"Role vs ML experiance\"\nstrs = \"\"\" Most of responders who are data scientist have less than 2 years of experience data. \"\"\"\n\nshanky_grp = shanky_grp7.copy()\nshanky_grp['color']=np.where(shanky_grp.target==18,'#408CD7'\n                             ,np.where(shanky_grp.target==20,'#8D9142'\n                                       ,np.where(shanky_grp.target==23,'#567987','#57C59C')))\n\nplot=plot_shanky(data = shanky_grp,node=node)\n\nplot.update_layout(title_text=header,title_font_color=\"black\"\n                  ,font_size=10,height=600,width=1000,paper_bgcolor='#EAECEE'\n                   ,plot_bgcolor='#EAECEE'\n                  ,annotations=[dict(text=strs, x=-.04, y=1.1, font_size=11, showarrow=False)])\nplot.show()","862eca00":"grp_data_country_age = data.groupby(by=['In which country do you currently reside?'\n                        ,'age']).size().sort_values(ascending=False).reset_index()\ngrp_data_country_age.columns =['Country','Age','people']\ngrp_data_country_age['people_perc'] = grp_data_country_age.people\/grp_data_country_age.groupby('Country')['people'].transform('sum')\n\ngrp_data_country_exp = data.groupby(by=['In which country do you currently reside?'\n                        ,'ml_experiance',]).size().sort_values(ascending=False).reset_index()\ngrp_data_country_exp.columns =['Country','exp','people']\ngrp_data_country_exp['people_perc'] = grp_data_country_exp.people\/grp_data_country_exp.groupby('Country')['people'].transform('sum')\n#grp_data_country_exp['people_perc']=grp_data_country_exp['people_perc']*(-1)\n","35a79651":"fig = make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_xaxes=False,\n                    shared_yaxes=True, vertical_spacing=0.001)\n\ntop_5_country = grp_data_country_age.groupby('Country')['people'].sum().sort_values(ascending=False).head(5).index.tolist()\n\nage = grp_data_country_age.Age.unique().tolist()\nexp=grp_data_country_exp.exp.unique().tolist()\n\ncolor_age = ['#C5AA57','#57BAC5','#84C557','#57C59C','#579CC5','#FDEBD0','#ABEBC6','#F5B7B1','#AF601A','#2C3E50','#1A5276']\ncolor_exp = ['#17202A','#6E2C00','#7D6608','#145A32','#4A235A','#78281F','#85929E','#F1948A','#567987','#56877E']\n\nfor i,ag in enumerate(age):\n    d1 = grp_data_country_age[(grp_data_country_age.Age==ag) & (grp_data_country_age.Country.isin(top_5_country))]\n    \n    fig.add_trace(go.Bar(name =ag,y=d1.Country, x=d1.people_perc,\n                         marker_color=color_age[i],orientation='h'),row=1, col=1)\n\nfor i,ex in enumerate(exp):\n    d2 = grp_data_country_exp[(grp_data_country_exp.exp==ex) & (grp_data_country_exp.Country.isin(top_5_country))]\n    \n    fig.add_trace(go.Bar(name =ex,y=d2.Country, x=d2.people_perc,\n                         marker_color=color_exp[i],orientation='h'),row=1, col=2)\n\nstrs =\"\"\"Approx. 80%, 30%,40% and 34%  of respondents are from India, USA, Brazil and Japan respectively out of\nall respondents from respective countries.<br>Also 49% ,22%,30% and 30% of respondents have \nless than 2 years of experience from above countries out of all respondents from respective countries.\"\"\"\n\nfig.update_layout(\n    title=strs,barmode='stack',font_size=8,width=1000,height=800,\n    yaxis=dict(showgrid=False,showline=False,showticklabels=True,domain=[0, 0.85],title='Country'),\n    yaxis2=dict(showgrid=False,showline=True,showticklabels=False,linecolor='rgba(102, 102, 102, 0.8)',\n        linewidth=2,domain=[0, 0.85]),\n    xaxis=dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0, 0.42]),\n    xaxis2=dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0.47, 1],side='top',dtick=25000),\n    legend=dict(orientation=\"h\",yanchor=\"bottom\",y=.85,xanchor=\"right\",x=1),\n    margin=dict(l=100, r=20, t=70, b=70),\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n)\n\n\nfig.show()","4ff6719d":"import itertools\nimport re \n\ndef str_replace(string, char): \n    pattern = char + '{2,}'\n    string = re.sub(pattern, char, string) \n    return string \n\nprogramming_cols = data.filter(regex='What programming languages do you use on a regular basis',axis=1).columns.tolist()\nprogramming_cols =['gender']+programming_cols\ngrp_programming = data.groupby(by=programming_cols).size().reset_index()\ncols = ['gender','Python','R','SQL','C','C++','Java','Javascript','Julia'\n                          ,'Swift','Bash','Matlab','None','Other','frequency']\ngrp_programming.columns =cols\ngrp_programming.head()\ngrp_programming['pair'] = grp_programming[cols[1:-1]].apply(lambda row: ' '.join(row.values.astype(str)).strip(), axis=1)\ngrp_programming['pair'] = grp_programming['pair'].apply(lambda x:x.replace('Not Given','').strip())\ngrp_programming['pair'] = grp_programming['pair'].apply(lambda x: ' '.join(sorted(x.split())))\ngrp_programming = grp_programming.sort_values(by='frequency',ascending=False)\ngrp_programming = grp_programming[grp_programming.frequency>100]\ngrp_programming['pair'] = grp_programming['pair'].apply(lambda x:'Empty' if len(x)==0 else x)\n","6bf40041":"fig = go.Figure()\nfor i,ge in enumerate(['Man','Woman']):\n    d1 = grp_programming[grp_programming.gender==ge]\n    \n    fig.add_trace(go.Bar(name =ge,x=d1.pair, y=d1.frequency,\n                         marker_color=color_age[i],base=0))\n\nstrs = \"\"\"16% of respondents are using python as independent programming language and <br>7% are using python along with SQL \n        for data science where as 10% of <br>respondents choose not to reveal their option\"\"\"\n\nannotate =[]\nannotate.append(dict(xref='x1', yref='y1',\n                            y=2200 ,x=10\n                             ,text=strs,\n                            font=dict(family='Arial', size=15,\n                                      color='rgb(128, 0, 128)'),\n                            showarrow=False))\n\nfig.layout.annotations=annotate \n\nfig.update_layout(barmode='stack',title_text='Programming Skill Set',font_size=10,width=900,height=500\n                  , yaxis = dict(title='# Respondent')\n                  ,legend=dict(orientation=\"h\",yanchor=\"bottom\",y=1.02,xanchor=\"right\",x=1))\n\nfig.show()","0d986420":"cls = 'What programming language would you recommend an aspiring data scientist to learn first? - Selected Choice'\n\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\n\ncolor_recommend = ['#5D6D7E','#F1948A','#7D6608','#145A32','#4A235A','#78281F','#85929E','#F1948A'\n             ,'#57C59C','#579CC5','#FDEBD0','#ABEBC6','#F5B7B1','#AF601A']\n\nfor i,ge in enumerate(['Man','Woman']):\n    recomend_prgraming = data.loc[data.gender==ge,cls].value_counts().reset_index()\n    recomend_prgraming.columns =['recommend','freq']\n\n    fig.add_trace(go.Pie(labels=recomend_prgraming.recommend\n                         , values=recomend_prgraming.freq\n                         , name=ge,marker_colors =color_recommend ),1, i+1)\n\nfig.update_traces(hole=.3)\nstrs = \"\"\" 65% Women prefer python compare to other programming language whereas this percentage <br>\nis quite up in case of men recommendation of programming skill. If we see second and third recommendation <br>\nwhich are R and SQL, then women percentage is slightly higher sided compare to men which means more women <br>\nrecommending R and SQL as data science programming language to other aspiring data scientists.\n\"\"\"\nfig.update_layout(\n    title_text =strs,\n    font=dict(family=\"Courier New, monospace\",size=10,color=\"RebeccaPurple\")\n    ,annotations=[dict(text='Men', x=0.20, y=0.5, font_size=15, showarrow=False),\n                 dict(text='Women', x=0.82, y=0.5, font_size=15, showarrow=False)])\nfig.show()","cac44cef":"from wordcloud import WordCloud\n\ncol_pat = \"Which of the following integrated development environments\"\n\nide_cols = data.filter(regex=col_pat ,axis=1).columns.tolist()\nide = data[ide_cols].apply(lambda row: ' '.join(row.values.astype(str)).strip(), axis=1)\nide = ide.apply(lambda x:x.replace('Not Given','').strip())\n\nplt.figure(figsize=(10,10))\n\nword_cloud = WordCloud (\n                    background_color = 'white',\n                    width = 2000,\n                    height = 1000\n                        ).generate(' '.join(ide.tolist()))\nplt.imshow(word_cloud)\nplt.axis('off')\nplt.title('Most frequent used IDE')\nplt.show()","a802dad7":"\ncol_pat = \"Which of the following hosted notebook products do you use on a regular basis\"\n\ngrp_notebook = data.filter(regex=col_pat ,axis=1).melt()\ngrp_notebook = grp_notebook[grp_notebook.value!='Not Given']\ngrp_notebook = grp_notebook.value.value_counts(normalize=True,ascending=True).reset_index()\ngrp_notebook.columns = ['Notebook','perc']\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(x=grp_notebook.perc,y=grp_notebook.Notebook,\n    marker=dict(color='#F5CBA7',line=dict(width=20)),\n    orientation='h'))\n\nfig.add_trace(go.Scatter(x=grp_notebook.perc,y=grp_notebook.Notebook,\n    mode='markers',marker_symbol='circle',\n    line_color='#1B2631',\n    name='Notebook',marker=dict(color='#1B2631',size=5,line=dict(color='#1B2631',width=12)),\n        showlegend=False))\n\nfig.update_layout(title_text=\"Hosted Notebook used on a regular basis\",font_size=10,height=700,width=800)\nfig.show()","dd4d742f":"#  Programming languages use on a regular basis","6f987884":"# 3 - Shanky View of proportion among Age, Gender, education, role and years of experiance.\nLets view the proportion in one view and below we will analyze each feature independently and in pair.","29d94ff9":"# Load Data\nData has 20036 observation and 355 columns","da09265f":"# Hosted Notebook","11b79b92":"Please upvote if you like any of the analysis and also provide your feedback if see any mistake or I could have done in better way.\n\nNote:- This notebook is not final version, there will be modification.","bbdbf002":"# 5 - Age group vs Education","8c59c02f":"# 1 - Repondents by Geography","b33018eb":"# 4- Gender vs Age group","09ada868":"![image.png](attachment:image.png)\n\n**Survey Methodology:**\n\n\u25cf The 2020 Kaggle DS & ML Survey received 20,036 usable responses from participants in 171\ndifferent countries and territories. If a country or territory received less than 50 respondents, we\ngrouped them into a group named \u201cOther\u201d for anonymity.\n\n\u25cf An invitation to participate in the survey was sent to the entire Kaggle community (anyone\nopted-in to the Kaggle Email List). The survey was also promoted on the Kaggle website and on\nthe Kaggle Twitter channel.\n\n\u25cf The survey was live from 10\/07\/2020 to 10\/30\/2020. We allowed respondents to complete the\nsurvey at any time during that window.\n\n\u25cf Responses to multiple choice questions (only a single choice can be selected) were recorded in\nindividual columns. Responses to multiple selection questions (multiple choices can be selected)\nwere split into multiple columns (with one column per answer choice).\n\n\u25cf To protect the respondents\u2019 privacy, free-form text responses were not included in the public\nsurvey dataset, and the order of the rows was shuffled (responses are not displayed in\nchronological order).\n\n\u25cf We excluded respondents that were flagged by our survey system as \u201cSpam\u201d.\n\n* Note:- Above text is taken from kaggle_survey_2020_methodology.pdf provided along with competition data","04f012a3":"# 2- Gender","32d93ecc":"# 9 - Role vs ML experiance","d8faee37":"# 8 - Coding Experiance vs ML experiance","5094be4a":"# Duration","995ee478":"# 6 - Role vs Education","4e190ba9":"# Recommended Programming languages","ccb7a7f9":"# 7- Role vs Coding Experiance","fe86217f":"# Age vs Experiance in Top country based on number of responders","d169351a":"![image.png](attachment:image.png)","300e51ad":"# Integrated development environments"}}