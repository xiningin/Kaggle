{"cell_type":{"79347f74":"code","991267de":"code","9beb6b60":"code","ff6bd245":"code","86ab4cdd":"code","d4ee99bd":"code","dc49efa8":"code","b6e84eac":"code","85457dfe":"code","902d829d":"code","ac779997":"code","82d3b19d":"code","e14571b6":"code","a9ed04de":"code","9bf48123":"code","8b358c5c":"code","5fa9bf11":"code","912b8ec4":"code","6dba8193":"code","363a601e":"code","78d9a72d":"code","c6936a8a":"code","3a7e1b29":"code","9d85a6d8":"code","f047f30f":"code","697c15d5":"code","84e18aeb":"markdown","aac36533":"markdown","f904b42c":"markdown","53d2ea08":"markdown","cde3d934":"markdown","9c2fcdb7":"markdown","5e4ab590":"markdown","eabf305d":"markdown","ee140690":"markdown","cc942fa7":"markdown","814d955d":"markdown","740b2e9f":"markdown","00cbc182":"markdown","5d06a078":"markdown","a6881be7":"markdown","c432adf2":"markdown","26e41565":"markdown","1d816465":"markdown","77cd6c02":"markdown","6f36ca7d":"markdown","c18763a9":"markdown","4c9b21dd":"markdown","c5f3cb8d":"markdown","9aca0868":"markdown","c47f5eb1":"markdown","7890bdcb":"markdown","d293ee7b":"markdown"},"source":{"79347f74":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sn\nfrom datetime import datetime\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","991267de":"data=pd.read_csv('..\/input\/data.csv')","9beb6b60":"data.info()","ff6bd245":"object_vars=[var for var in data if data[var].dtype=='object']\nnumerical_vars=[var for var in data if data[var].dtype=='float' or data[var].dtype=='int']\nfor var in object_vars:\n    print(data[var].value_counts())","86ab4cdd":"#drop team id and team name columns(only one value - LAL)\ndata=data.drop(['team_id','team_name'],axis=1)\n#set game date as datetime","d4ee99bd":"#get info from matchup: home or away?\ndata['home']=data['matchup'].apply(lambda x: 1 if 'vs' in x else 0)\ndata=data.drop('matchup',axis=1)","dc49efa8":"#plt.subplot()\nplt.figure(figsize=(5,5))\nplt.scatter(x=data['loc_x'],y=data['loc_y'],alpha=0.02)\n\nplt.figure(figsize=(5,5))\nplt.scatter(x=data['lon'],y=data['lat'],alpha=.02)","b6e84eac":"#unnecessary columns, since they are correlated to loc_x and loc_y\ndata=data.drop(['lon','lat'],axis=1)","85457dfe":"data['time_remaining_seconds']=data['minutes_remaining']*60+data['seconds_remaining']\ndata=data.drop(['minutes_remaining','seconds_remaining'],axis=1)","902d829d":"data['time_remaining_seconds']\ndata['last_3_seconds']=data.time_remaining_seconds.apply(lambda x: 1 if x<4 else 0)","ac779997":"#drop shot_id column (useless)\ndata=data.drop('shot_id',axis=1)","82d3b19d":"#visualize difference between shot types\nfig,ax=plt.subplots()\nsn.barplot(x='combined_shot_type',y='shot_made_flag',data=data)\n#Replace the 20 least common action types with value 'Other'\nrare_action_types=data['action_type'].value_counts().sort_values(ascending=True).index.values[:20]\ndata.loc[data['action_type'].isin(rare_action_types),'action_type']='Other'\n","e14571b6":"#keep the three columns, they are not redundant\npd.DataFrame({'area':data.shot_zone_area,'basic':data.shot_zone_basic,'range':data.shot_zone_range}).head(10)","a9ed04de":"#drop playoffs - not relevant\nsn.countplot('playoffs',hue='shot_made_flag',data=data)\ndata=data.drop('playoffs',1)","9bf48123":"#get month from date\ndata['game_date']=pd.to_datetime(data['game_date'])\ndata['game_month']=data['game_date'].dt.month\ndata=data.drop('game_date',axis=1)","8b358c5c":"data=data.drop(['game_id','game_event_id'],axis=1)","5fa9bf11":"data.info()\n","912b8ec4":"# transform categorical data to type 'category'\ncategorical_vars=['action_type','combined_shot_type','season','opponent','shot_type','period','shot_zone_basic','shot_zone_area','shot_zone_range','game_month']\nfor var in categorical_vars:\n        data=pd.concat([data,pd.get_dummies(data[var],prefix=var)], 1)\n        data=data.drop(var,1)","6dba8193":"#separate train and test sets\ntrain=data[pd.notnull(data['shot_made_flag'])]\ntest=data[pd.isnull(data['shot_made_flag'])]\ny_train=train['shot_made_flag']\ntrain=train.drop('shot_made_flag',1)\ny_train=y_train.astype('int')\ntest=test.drop('shot_made_flag',1)","363a601e":"train.info()","78d9a72d":"#Correlation between numerical variables and shots made\nsn.heatmap(data.corr())","c6936a8a":"#Evaluation with log loss\nfrom sklearn.metrics import log_loss\nfrom sklearn.metrics import make_scorer\n#log_scorer=make_scorer(log_loss,greater_is_better=False)\ndef log_scorer(estimator, X, y):\n    pred_probs = estimator.predict_proba(X)[:, 1]\n    return log_loss(y, pred_probs)","3a7e1b29":"#from xgboost.sklearn import XGBClassifier\n#model = XGBClassifier(colsample_bytree= 0.8, learning_rate= 0.01, max_depth= 7, n_estimators= 400, seed= 1234, subsample= 0.5)\nfrom sklearn.ensemble import RandomForestClassifier\nmodel=RandomForestClassifier(n_estimators=400,max_depth=5)\nmodel.fit(train, y_train)\npred=model.predict_proba(train)[:,1]\nlog_loss(y_train,pred)\ntarget_y = model.predict_proba(test)[:,1]","9d85a6d8":"log_loss(y_train,pred)\n","f047f30f":"from sklearn.model_selection import cross_val_score\ncv=cross_val_score(model,train,y_train,scoring=log_scorer,cv=5)\ncv","697c15d5":"sub = pd.read_csv(\"..\/input\/sample_submission.csv\")\nsub['shot_made_flag'] = target_y\nsub.to_csv(\"submission.csv\", index=False)","84e18aeb":"We notice that variables team_id and team_name only have one value each, so they are useless.","aac36533":"**Set log_loss as the scorer for the model**","f904b42c":"The categorical variables are label encoded, since tree-based algorithms do not accept string input.","53d2ea08":"Check if the three variables contain independent information and cannot be inferred from each other.","cde3d934":"#label encoding\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ncategorical_vars=['action_type','combined_shot_type','season','opponent','shot_type','period','shot_zone_basic','shot_zone_area','shot_zone_range','game_month']\nfor col in categorical_vars:\n    if data[col].dtype=='object':\n        data[col] = le.fit_transform(data[col])","9c2fcdb7":"**Setting target variable and train and test sets**","5e4ab590":"#compare random forest and xgboost\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.model_selection import cross_val_score\n\nmodels=[]\nmodels.append(('RF',RandomForestClassifier()))\nmodels.append(('XGB',XGBClassifier()))\n\nresults=[]\n\nfor name,model in models:\n        cv=cross_val_score(model,train,y_train,scoring=log_scorer,cv=5)\n        results.append((name,cv))\nresults","eabf305d":"Shot_id is a unique identifier of each shot - useless in the model","ee140690":"**Write final predictions to submission file**","cc942fa7":"Random Forest Classifier","814d955d":"params={'n_estimators': [300,400],\n        'max_depth': [6,7,8],\n        'learning_rate': [0.01,0.1,1],\n        'subsample': [0.5,1],\n        'colsample_bytree': [0.8,1],\n        'seed': [0,1234]}\ngrid=GridSearchCV(XGBClassifier(warm_start=True), param_grid=params, cv=5, scoring=log_scorer)\ngrid.fit(train,y_train)\n#print(grid.best_params_)\n#print(grid.best_score_)\npred=grid.predict_proba(train)[:,1]\nprint(\"Log loss for training set: \", log_loss(y_train,pred))\ngrid.grid_scores_","740b2e9f":"**Summarize data**","00cbc182":"**Hyperparameter tuning**","5d06a078":"Visualize the location variables. These seem to refer to the location on the court where Kobe shot from. Since the two groups of variables are correlated, only one will be kept.","a6881be7":"The proportion of successful shots is similar in the two cases and does not seem to depend on the playoff variable. Therefore, this variable is dropped.","c432adf2":"**Results**\n\nrandom forest predict_proba train: 0.5626, test: 0.6120\ngood params xgboost: {'colsample_bytree': 0.8, 'learning_rate': 0.01, 'max_depth': 7, 'n_estimators': 400, 'seed': 1234, 'subsample': 0.5}\nxgboost predict_proba train: 0.5665, test: 0.60036\nbest params xgboost: {'colsample_bytree': 0.8, 'learning_rate': 0.01, 'max_depth': 7, 'n_estimators': 300, 'seed': 1234, 'subsample': 0.5}\nxgb predict_proba train: 0.5686, test: 0.60350\n","26e41565":"**Fit the final model with the best parameters**","1d816465":"Compare RandomForestClassifier and XGBClassifier models with default parameters. Use 5-fold cross-validation to obtain average test results.","77cd6c02":"Visualize the success rate for the different shot types. For the action_type variable, the 20 least common values are replaced with ''Other\"","6f36ca7d":"from sklearn.model_selection import GridSearchCV\nrf=RandomForestClassifier()\nparams={'n_estimators':[10,20,30,100,300],'max_depth':[5,10]}\ngrid=GridSearchCV(rf, param_grid=params, scoring=log_scorer, cv=5)\ngrid.fit(train, y_train)\n\nbest_max_depth=grid.best_params_['max_depth']\nbest_n_estimators=grid.best_params_['n_estimators']\nprint(best_max_depth,best_n_estimators)\npred=grid.predict_proba(train)[:,1]\nprint(\"Log loss for training set: \", log_loss(y_train,pred))\ndf=pd.DataFrame(grid.cv_results_)\ntarget_y=grid.predict_proba(test)[:,1]","c18763a9":"**Import libraries**","4c9b21dd":"Since the season variable represents the year, we only need to extract the month from the date variable. The weekday is unlikely to be relevant.","c5f3cb8d":"**Bivariate analysis**","9aca0868":"XGB Classifier","c47f5eb1":"Add the minutes variable to the seconds variable to create a new variable representing total remaining time in seconds. It seems like in the last 4 seconds of games, Kobe's rate of success is significantly lower. We create a variable as a flag for time lower than 4 seconds.","7890bdcb":"The matchup variable contains information on the opponent, as well as where the game was played. Since we already have a variable to represent opponent, we only extract the ''home or away'' information from this variable.","d293ee7b":"These variables uniquely represent each game and each event. They are unlikely to be relevant to the success of a shot."}}