{"cell_type":{"9242d02d":"code","3bf40cbc":"code","29ad69ed":"code","9c63d042":"code","03f1dd60":"code","f2d7dba8":"code","283ed9a7":"code","05bc5acb":"code","1560c885":"code","324a3e0b":"code","73ea06c9":"code","58df4e55":"code","aa4007db":"code","0cbcc290":"code","5b676264":"code","f22ac149":"code","d2d8b3af":"code","2e4bff2b":"markdown","fe344075":"markdown","b888420d":"markdown","c5d2fa39":"markdown","0fd04acc":"markdown","0471c6cf":"markdown","ba2f1a08":"markdown","0f220765":"markdown","f5582c83":"markdown","ba31f309":"markdown","9752a7b5":"markdown","f8061c5b":"markdown","61d2e059":"markdown","0994fb0e":"markdown","752dba73":"markdown","c84d3fc8":"markdown","d30ed732":"markdown","154671af":"markdown","778d97e2":"markdown","75cac7ae":"markdown"},"source":{"9242d02d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3bf40cbc":"#read city_day csv and convert it into a pandas dataframe\ncity_day = pd.read_csv('\/kaggle\/input\/air-quality-data-in-india\/city_day.csv')\ncity_day.head()","29ad69ed":"city_day.info()","9c63d042":"# Total missing values\nmis_val = city_day.isnull().sum()\n\n# Percentage of missing values per column\nmis_val_percent = 100 * mis_val \/ len(city_day)\nprint('Total missing percentage per column is:')\nprint(mis_val_percent)","03f1dd60":"# plot a heatmap using seaborn to visualize missing values\nplt.figure(figsize=(10,8))\nsns.heatmap(city_day.isnull(),yticklabels=False, cbar=False, cmap='tab20')","f2d7dba8":"# convert column to datetime\ncity_day['Date'] = pd.to_datetime(city_day['Date'])","283ed9a7":"# Interpolate using the linear method\ncity_day.interpolate(limit_direction=\"both\",inplace=True)\ncity_day.head()","05bc5acb":"# insert missing values in the AOI bucket column using the above table\ndef get_remark(aqi_val):\n    if 0<=aqi_val<=50:\n        return 'Good'\n    if 51<=aqi_val<=100:\n        return 'Satisfactory'\n    if 101<=aqi_val<=200:\n        return 'Moderate'\n    if 201<=aqi_val<=300:\n        return 'Poor'\n    if 301<=aqi_val<=400:\n        return 'Very Poor'\n    if 401<=aqi_val<=500:\n        return 'Severe'\n    \ncity_day['AQI_Bucket'] = city_day['AQI'].map(get_remark)","1560c885":"# plot a heatmap using seaborn to visualize missing values\nplt.figure(figsize=(10,8))\nsns.heatmap(city_day.isnull(),yticklabels=False, cbar=False, cmap='tab20')","324a3e0b":"# insert missing values in the AOI bucket column using the above table\ndef get_remark(aqi_val):\n    if 0<=aqi_val<=50:\n        return 'Good'\n    if 51<=aqi_val<=100:\n        return 'Satisfactory'\n    if 101<=aqi_val<=200:\n        return 'Moderate'\n    if 201<=aqi_val<=300:\n        return 'Poor'\n    if 301<=aqi_val<=400:\n        return 'Very Poor'\n    if 401<=aqi_val<=500:\n        return 'Severe'\n    else:\n        return 'Severe'\n    \ncity_day['AQI_Bucket'] = city_day['AQI'].map(get_remark)\n\n# plot a heatmap using seaborn to visualize missing values\n# plt.figure(figsize=(10,8))\n# sns.heatmap(city_day.isnull(),yticklabels=False, cbar=False, cmap='tab20')\n\n# Percentage of missing values per column\nmis_val_percent = 100 * city_day.isnull().sum() \/ len(city_day)\nprint('Total missing percentage per column is:')\nprint(mis_val_percent)","73ea06c9":"stations = pd.read_csv('\/kaggle\/input\/air-quality-data-in-india\/stations.csv')\nstations.head()\n# stations.info()","58df4e55":"# cities in the dataset\ncities = city_day['City'].value_counts()\nprint(f'Total number of cities in the dataset : {len(cities)}')\nprint(cities.index)\n\n# cities with active stations\nstations_cities = stations[stations['Status'] == 'Active']['City'].value_counts()\nprint(f'Total number of cities with active stations in the dataset : {len(stations_cities)}')\nprint(stations_cities.index)","aa4007db":"pollutants = ['PM2.5','PM10','NO','NO2','NOx','NH3','CO','SO2','O3','Benzene','Toluene','Xylene']\nfor pollutant in pollutants:\n    city_day.plot.line(x='Date',y=pollutant,color='cornflowerblue')","0cbcc290":"city_day['month'] = pd.DatetimeIndex(city_day['Date']).month\nmth_dic = {1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'May',6:'Jun',7:'Jul',8:'Aug',9:'Sep',10:'Oct',11:'Nov',12:'Dec'}\ncity_day['month']=city_day['month'].map(mth_dic)\ncity_day.groupby('month')[pollutants].mean().plot(figsize=(12,6), cmap='winter')\nplt.legend(bbox_to_anchor=(1.0, 1.0))\nplt.xticks(np.arange(12), mth_dic.values())","5b676264":"cities = ['Ahmedabad','Delhi','Bengaluru','Mumbai','Hyderabad','Chennai']\nfilter_city_date = city_day[city_day['Date'] >= '2019-01-01']\nAQI = filter_city_date[filter_city_date.City.isin(cities)][['Date','City','AQI','AQI_Bucket']]\nAQI.head()","f22ac149":"import datetime\nimport matplotlib.dates as mdates\nsubplot_titles=[\"Ahmedabad\",\"Bengaluru\",\"Chennai\",\"Delhi\",'Hyderabad','Mumbai']\nx_line_annotation = datetime.date(2020, 3, 25)\nf, axes = plt.subplots(6, 1, figsize=(15, 15), sharex=True)\nfor count, title in enumerate(subplot_titles):\n    ax = AQI[AQI['City']==title].plot(x='Date', y='AQI', kind='line', ax=axes[count], color='cornflowerblue')\n    ax.title.set_text(title)\n    ax.set_xlim([datetime.date(2019, 1, 1), datetime.date(2020, 5, 1)])\n    ax.axvline(x=x_line_annotation, linestyle='dashed', alpha=0.5, color='black')\n    ","d2d8b3af":"AQI_pivot = AQI.pivot(index='Date', columns='City', values='AQI')\nAQI_pivot.head()\n\nAQI_beforeLockdown = AQI_pivot['2020-01-01':'2020-03-25']\nAQI_afterLockdown = AQI_pivot['2020-03-26':'2020-05-01']\nAQI_beforelockdown = pd.DataFrame(AQI_beforeLockdown.mean())\nAQI_afterlockdown = pd.DataFrame(AQI_afterLockdown.mean())\nprint(AQI_beforelockdown)\nprint(AQI_afterlockdown)","2e4bff2b":"# Clearly there is a difference in the AQI in India because of the lockdown imposed,so there is a silver lining after all.","fe344075":"1. *The monthy trend shows that the polutants level usually decreases during the monsoon months, i.e. from June to August*\n2. *The particulate matter has the highest value during summer and winter*","b888420d":"1. *SO2 levels have shown a gradual increase since 2016-2018, Benzene, Toulene and Xylene levels have shown a rise in 2020.*\n2. *PM2.5 and PM10 show a seasonal trend.*","c5d2fa39":"* The mean AQI value for Mumbai went from moderate(148.77) to satisfactory(73.89)\n* The mean AQI value for Ahmedabad went from very poor(392.4) to moderate(127.8)\n* The mean AQI value for Delhi went from poor(246.3) to moderate(107.27)\n* The mean AQI value for Hyderabad went from moderate(94.43) to satisfactory(65.67)\n* The mean AQI value for Bengaluru went from moderate(96) to satisfactory(68.4)\n* The mean AQI value for Chennai went from moderate(80.31) to satisfactory(62.1)","0fd04acc":"# **Cities included in the dataset**","0471c6cf":"# **Analyzing AQI data**\n*The city data has information for different indian cities along with different levels of key pollutants based on daily basis*","ba2f1a08":"*Info() method shows that there are many columns in the dataset with null values. We can visualize the location of missing values using seaborn's heatmap*","0f220765":"*This heatmap helps us to get an idea of the empty values in every column, the light blue color in the above heatmap shows that those values are null. **Xylene** appears to have the most missing values(60%) and **City and Date** column are completely filled*","f5582c83":"# Dealing with missing data","ba31f309":"![image.png](attachment:image.png)","9752a7b5":"*The lockdown in India was implemented from March 25, 2020 which is represented by a dashed line in the plot above. It clearly shows the AQI levels are reduced compared to the same time for previous year. This trend is shown by all the major cities in the country.*","f8061c5b":"# *classifying cities into AQI bucket*\nI have used Tableau software to visualize this data","61d2e059":"*Before filling the missing values notice that the **Date** column in not an datetime object but a string, hence first we will convet it to datetime*","0994fb0e":"# **Analysis of pollutants over the years**","752dba73":"*AQI_buckect column has a few entries which are still none as few of the values in the AQI column are beyound the range defined for the AQI_Bucket. We can either remove these rows or put severe as their value as they are anyways above the max limit* ","c84d3fc8":"# **Analysis for major cities before and after the lockdown**\nLets consider major cities like Ahmedabad,Delhi,Bengaluru,Mumbai,Hyderabad,Chennai for analysis","d30ed732":"![image.png](attachment:image.png)","154671af":"*Imputing missing data with linear interpolation in both the directions as it will result in the best approximation for the missing data*","778d97e2":"***Lets see the pollutants level in different months***","75cac7ae":"*To verify if there is any seasonality in the level of pollutants we can analyse them on a monthly basis over the years*"}}