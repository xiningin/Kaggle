{"cell_type":{"4250bff7":"code","f48e569a":"code","fe3e35d3":"code","5bed2116":"code","f5f7b3de":"code","f2b5fc81":"code","67c5d063":"code","91881bd3":"code","e3e3b824":"code","2f2901df":"code","aaf9cc56":"code","2115bf61":"code","2a3a51ba":"code","34b52e08":"code","96785ba5":"code","8791d2ec":"code","e501ae6d":"code","8f725e61":"code","35475ee7":"code","87af9d96":"code","3d89e930":"code","ea76c56f":"code","7df26051":"code","a5d7234d":"code","325ceaff":"code","2a95956a":"code","6433008d":"code","077ba01b":"code","3300671e":"code","01880dbf":"markdown","bb019928":"markdown","34e141dd":"markdown","1993006d":"markdown","88f284d3":"markdown","93fbbc71":"markdown","96a4a725":"markdown","4f3fab3a":"markdown","0217d92f":"markdown","b53335c8":"markdown","c43254fb":"markdown","666d54a1":"markdown","e36c3e7d":"markdown","0d26a46b":"markdown"},"source":{"4250bff7":"# feature extractoring and preprocessing data\nimport librosa\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport os\nfrom PIL import Image\nimport pathlib\nimport csv\n\n# Preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\n\n#Keras\nimport keras\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.preprocessing import LabelEncoder, scale, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.decomposition import PCA\nfrom sklearn.linear_model import LogisticRegression\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential, Model, load_model\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Convolution2D, Conv2D, MaxPooling2D, GlobalAveragePooling2D, UpSampling2D, Input\nfrom keras.optimizers import Adam\nfrom keras.utils import np_utils\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau\nfrom keras import optimizers\nfrom keras.regularizers import l1\nfrom keras.utils.vis_utils import plot_model\nfrom datetime import datetime\nfrom sklearn import metrics\nimport librosa, librosa.display, os, csv\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport pylab\nplt.switch_backend('agg')\nimport itertools\nimport scipy as sp\nfrom scipy import signal\nimport xgboost as xgb\nimport joblib\nfrom glob import glob\nimport urllib\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, Flatten, Dense, MaxPool2D, Dropout\nfrom tensorflow.keras.utils import to_categorical \n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\n\n# Basic Libraries\n\nimport pandas as pd\nimport numpy as np\n\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.preprocessing import MinMaxScaler","f48e569a":"#Loading CSV file\ntrain_csv = pd.read_csv(\"..\/input\/coughclassifier-trial\/cough_trial_extended.csv\")\ndataset = \"..\/input\/coughclassifier-trial\/cough_trial_extended.csv\"\ntrain_csv","fe3e35d3":"train_csv['class'].unique()","5bed2116":"cmap = plt.get_cmap('inferno')\ntot_rows = train_csv.shape[0]\nfor i in range(tot_rows):\n    source = train_csv['file_properties'][i]\n    filename = '..\/input\/coughclassifier-trial\/trial_covid\/'+source\n    y,sr = librosa.load(filename, mono=True, duration=5)\n    plt.specgram(y, NFFT=2048, Fs=2, Fc=0, noverlap=128, cmap=cmap, sides='default', mode='default', scale='dB');\n    plt.axis('off');\n    plt.savefig(f'.\/{source[:-3].replace(\".\", \"\")}.png')\n    plt.clf()","f5f7b3de":"header = 'filename chroma_stft rmse spectral_centroid spectral_bandwidth rolloff zero_crossing_rate'\nfor i in range(1, 21):\n    header += f' mfcc{i}'\nheader += ' label'\nheader = header.split()","f2b5fc81":"file = open('data_new_extended.csv', 'w')\nwith file:\n    writer = csv.writer(file)\n    writer.writerow(header)\nfor i in range(tot_rows):\n        source = train_csv['file_properties'][i]\n        file_name = '..\/input\/coughclassifier-trial\/trial_covid\/'+source\n        y,sr = librosa.load(file_name, mono=True, duration=5)\n        chroma_stft = librosa.feature.chroma_stft(y=y, sr=sr)\n        rmse = librosa.feature.rms(y=y)\n        spec_cent = librosa.feature.spectral_centroid(y=y, sr=sr)\n        spec_bw = librosa.feature.spectral_bandwidth(y=y, sr=sr)\n        rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr)\n        zcr = librosa.feature.zero_crossing_rate(y)\n        mfcc = librosa.feature.mfcc(y=y, sr=sr)\n        to_append = f'{source[:-3].replace(\".\", \"\")} {np.mean(chroma_stft)} {np.mean(rmse)} {np.mean(spec_cent)} {np.mean(spec_bw)} {np.mean(rolloff)} {np.mean(zcr)}'    \n        for e in mfcc:\n            to_append += f' {np.mean(e)}'\n        \n        file = open('data_new_extended.csv', 'a')\n        with file:\n            writer = csv.writer(file)\n            writer.writerow(to_append.split())","67c5d063":"data = pd.read_csv('..\/input\/coughclassifier-trial\/data_new_extended.csv')\ndata","91881bd3":"data.shape","e3e3b824":"# Dropping unneccesary columns\ndata = data.drop(['filename'],axis=1)","2f2901df":"genre_list = data.iloc[:, -1]\nencoder = LabelEncoder()\ny = encoder.fit_transform(genre_list)","aaf9cc56":"scaler = StandardScaler()\nX = scaler.fit_transform(np.array(data.iloc[:, :-1], dtype = float))","2115bf61":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)","2a3a51ba":"X_train.shape","34b52e08":"X_train.shape[1]","96785ba5":"y_train.shape","8791d2ec":"\nfrom keras import models\nfrom keras import layers\n\nmodel = models.Sequential()\nmodel.add(layers.Dense(512, activation='relu', input_shape=(X_train.shape[1],)))\n\nmodel.add(layers.Dense(256, activation='relu'))\n\nmodel.add(layers.Dense(128, activation='relu'))\n\nmodel.add(layers.Dense(64, activation='relu'))\n\nmodel.add(layers.Dense(10, activation='relu'))\n\nmodel.add(layers.Dense(2, activation='softmax'))\n\n# serialize model to JSON\nmodel_json = model.to_json()\nwith open(\"model.json\", \"w\") as json_file:\n    json_file.write(model_json)\n# serialize weights to HDF5\nmodel.save_weights(\"model.h5\")\nprint(\"Saved model to disk\")\n\n# plot model\nplot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)","e501ae6d":"model.summary()","8f725e61":"# # loading weights into new model\n# loaded_model.load_weights(\"model.h5\")\n# print(\"Loaded model from disk\")\n \n# # evaluate loaded model on test data\n# loaded_model.compile(optimizer='adam',\n#               loss='sparse_categorical_crossentropy',\n#               metrics=['accuracy'])\n# score = loaded_model.evaluate(X, Y, verbose=0)\n# print(\"%s: %.2f%%\" % (loaded_model.metrics_names[1], score[1]*100))","35475ee7":"model.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\nhistory = model.fit(X_train,\n                    y_train,\n                    epochs=100,\n                    batch_size=128)","87af9d96":"test_loss, test_acc = model.evaluate(X_test,y_test)","3d89e930":"print('test_acc: ',test_acc)","ea76c56f":"predictions = model.predict(X_test)\nprint(predictions[0].shape)\nprint(np.sum(predictions[0]))\nprint(predictions[:4])\nprint(y_test[:4])","7df26051":"!tar -zcvf outputname.tar.zip \/kaggle\/working","a5d7234d":"df = pd.DataFrame(predictions, columns = ['Negative','Positive'])","325ceaff":"a = df.iloc[:,0] < df.iloc[:,1] \na = a*1","2a95956a":"from sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nfrom matplotlib import pyplot","6433008d":"a.to_numpy()","077ba01b":"y_test","3300671e":"# summarize score\nprint('Model: auROC=%.3f' % (roc_auc_score(y_test, a)))\n# calculate roc curves\nlr_fpr, lr_tpr, _ = roc_curve(y_test, a)\n# plot the roc curve for the model\npyplot.plot(lr_fpr, lr_tpr, marker='.', label='Model')\n# axis labels\npyplot.xlabel('False Positive Rate')\npyplot.ylabel('True Positive Rate')\n# show the legend\npyplot.legend()\n# show the plot\npyplot.show()","01880dbf":"## Predictions on Test Data","bb019928":"All the audio files get converted into their respective spectrograms .We can know easily extract features from them.","34e141dd":"## Dividing data into training and Testing set","1993006d":"## Encoding the Labels","88f284d3":"## Writing data to csv file\n\nWe write the data to a csv file","93fbbc71":"## Extracting the Spectrogram for every Audio File","96a4a725":"## Saving the Spectograms as a single output file","4f3fab3a":"### Test Accuracy","0217d92f":"## Importing Libraries","b53335c8":"## Extracting features from Spectrogram\n\n\nWe will extract\n\n* Mel-frequency cepstral coefficients (MFCC)(20 in number)\n* Spectral Centroid,\n* Zero Crossing Rate\n* Chroma Frequencies\n* Spectral Roll-off.","c43254fb":"# COVID-19 Cough classification notebook","666d54a1":"## Scaling the Feature columns","e36c3e7d":"# Classification with Keras\n\n## Building our Network","0d26a46b":"# Analysing the Data in Pandas"}}