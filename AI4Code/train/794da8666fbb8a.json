{"cell_type":{"4a6ac45f":"code","7a586bef":"code","1a9a9f1b":"code","ad85415f":"code","1a3887c9":"code","36de82ad":"code","fdcb2bb6":"code","ea0c875e":"code","8e072fce":"code","39093118":"code","14a042fd":"code","45bf8aa2":"code","5360f2ca":"code","7bf24653":"code","63a66090":"code","0a57b519":"code","cfcd8d08":"code","03dfe3df":"code","02fd0eb9":"code","b7ec7b96":"code","554a7f1f":"code","ec1d3ee2":"code","a13d17de":"code","2e968aa8":"code","2c657a69":"code","b97a67f8":"code","7253e8ed":"code","59944103":"code","a48c7fdb":"code","e0af49d8":"code","23753cf3":"code","6004f9ba":"code","7ca2f29b":"code","752128c7":"code","a39dd48f":"code","ad60c92b":"code","3eb22402":"code","d94f4f35":"code","62725e48":"code","1fc29584":"code","b914ae5b":"code","a9535802":"code","f1b86673":"code","ede41ab4":"code","72a2b112":"code","18a9f9d6":"code","f7b099b7":"code","9748da7f":"code","50bd30f2":"code","9771c825":"code","7bf95922":"code","bfd68718":"code","3d10a738":"code","08778cbc":"code","237c5f2f":"code","84ba4997":"code","a9ff16d0":"code","abc57d05":"code","c2ed1771":"code","bfae1a80":"code","c1ae8979":"code","e743a969":"code","620c241d":"code","93b8a75f":"code","646b141d":"code","5aacd609":"code","2487b374":"code","f2f16a89":"code","c7badc95":"code","036efacc":"code","14525fb2":"markdown","55c1b863":"markdown","26836c72":"markdown","bdfd1179":"markdown","e3e969bb":"markdown","af62b165":"markdown","beeabbac":"markdown","96ca5a3a":"markdown","8f3de16b":"markdown","995a0383":"markdown","3a9ff039":"markdown","f9811da6":"markdown","2744bd7e":"markdown","2f32f74e":"markdown","bb39160b":"markdown","c75b309f":"markdown","79fbe1df":"markdown","2368edc5":"markdown","ff4be4ac":"markdown","4a5036df":"markdown"},"source":{"4a6ac45f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.metrics import mean_squared_error\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas_profiling\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7a586bef":"INPUT_DIR = '\/kaggle\/input\/competitive-data-science-predict-future-sales\/'\n\nsales_train_df = pd.read_csv(f'{INPUT_DIR}\/sales_train.csv')\nitem_categories_df = pd.read_csv(f'{INPUT_DIR}\/item_categories.csv')\nitems_df = pd.read_csv(f'{INPUT_DIR}\/items.csv')\nshops_df = pd.read_csv(f'{INPUT_DIR}\/shops.csv')\ntest_df = pd.read_csv(f'{INPUT_DIR}\/test.csv')\nsubmission_df = pd.read_csv(f'{INPUT_DIR}\/sample_submission.csv')","1a9a9f1b":"sales_train_df.info()\nsales_train_df","ad85415f":"sales_train_df.describe()","1a3887c9":"#Number of na's\nsales_train_df.isna().sum()","36de82ad":"item_categories_df.info()","fdcb2bb6":"#Number of na's\nitem_categories_df.isna().sum()\n","ea0c875e":"items_df.info()","8e072fce":"items_df.isna().sum()","39093118":"shops_df.info()\nshops_df.head()","14a042fd":"shops_df.isna().sum()","45bf8aa2":"test_df.info()\ntest_df\n\ntest = test_df.copy()","5360f2ca":"plt.figure(figsize=(10,4))\nplt.xlim(-100, 3000)\nsns.boxplot(x=sales_train_df.item_cnt_day)\n\nplt.figure(figsize=(10,4))\nplt.xlim(sales_train_df.item_price.min(), sales_train_df.item_price.max()*1.1)\nsns.boxplot(x=sales_train_df.item_price)","7bf24653":"train = sales_train_df.copy()\ntrain = train[train.item_price<100000]\ntrain = train[train.item_cnt_day<1001]","63a66090":"median = train[(train.shop_id==32)&(train.item_id==2973)&(train.date_block_num==4)&(train.item_price>0)].item_price.median()\ntrain.loc[train.item_price<0, 'item_price'] = median","0a57b519":"shops_df","cfcd8d08":"# \u042f\u043a\u0443\u0442\u0441\u043a \u041e\u0440\u0434\u0436\u043e\u043d\u0438\u043a\u0438\u0434\u0437\u0435, 56\ntrain.loc[train.shop_id == 0, 'shop_id'] = 57\ntest.loc[test.shop_id == 0, 'shop_id'] = 57\n# \u042f\u043a\u0443\u0442\u0441\u043a \u0422\u0426 \"\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439\"\ntrain.loc[train.shop_id == 1, 'shop_id'] = 58\ntest.loc[test.shop_id == 1, 'shop_id'] = 58\n# \u0416\u0443\u043a\u043e\u0432\u0441\u043a\u0438\u0439 \u0443\u043b. \u0427\u043a\u0430\u043b\u043e\u0432\u0430 39\u043c\u00b2\ntrain.loc[train.shop_id == 10, 'shop_id'] = 11\ntest.loc[test.shop_id == 10, 'shop_id'] = 11","03dfe3df":"shops = shops_df.copy()","02fd0eb9":"from sklearn.preprocessing import LabelEncoder\nshops.loc[shops.shop_name == '\u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"', 'shop_name'] = '\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"'\nshops['city'] = shops['shop_name'].str.split(' ').map(lambda x: x[0])\nshops.loc[shops.city == '!\u042f\u043a\u0443\u0442\u0441\u043a', 'city'] = '\u042f\u043a\u0443\u0442\u0441\u043a'\nshops['city_code'] = LabelEncoder().fit_transform(shops['city'])\nshops = shops[['shop_id','city_code']]","b7ec7b96":"shops.head()","554a7f1f":"cats = item_categories_df.copy()\nitems = items_df.copy()\ncats.head()","ec1d3ee2":"cats['split'] = cats['item_category_name'].str.split('-')\ncats['type'] = cats['split'].map(lambda x: x[0].strip())\ncats['type_code'] = LabelEncoder().fit_transform(cats['type'])\n# if subtype is nan then type\ncats['subtype'] = cats['split'].map(lambda x: x[1].strip() if len(x) > 1 else x[0].strip())\ncats['subtype_code'] = LabelEncoder().fit_transform(cats['subtype'])\ncats = cats[['item_category_id','type_code', 'subtype_code']]\n\nitems.drop(['item_name'], axis=1, inplace=True)","a13d17de":"cats","2e968aa8":"from itertools import product\nmatrix = []\ncols = ['date_block_num','shop_id','item_id']\nfor i in range(34):\n    sales = train[train.date_block_num==i]\n    matrix.append(np.array(list(product([i], sales.shop_id.unique(), sales.item_id.unique())), dtype='int16'))\n    \nmatrix = pd.DataFrame(np.vstack(matrix), columns=cols)\nmatrix['date_block_num'] = matrix['date_block_num'].astype(np.int8)\nmatrix['shop_id'] = matrix['shop_id'].astype(np.int8)\nmatrix['item_id'] = matrix['item_id'].astype(np.int16)\nmatrix.sort_values(cols,inplace=True)","2c657a69":"matrix","b97a67f8":"train['revenue'] = train['item_price'] *  train['item_cnt_day']","7253e8ed":"group = train.groupby(['date_block_num','shop_id','item_id']).agg({'item_cnt_day': ['sum']})\ngroup.columns = ['item_cnt_month']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=cols, how='left')\nmatrix['item_cnt_month'] = (matrix['item_cnt_month']\n                                .fillna(0)\n                                .clip(0,20)\n                                .astype(np.float16))","59944103":"matrix","a48c7fdb":"test['date_block_num'] = 34\ntest['date_block_num'] = test['date_block_num'].astype(np.int8)\ntest['shop_id'] = test['shop_id'].astype(np.int8)\ntest['item_id'] = test['item_id'].astype(np.int16)","e0af49d8":"matrix = pd.concat([matrix, test], ignore_index=True, sort=False, keys=cols)\nmatrix.fillna(0, inplace=True)","23753cf3":"matrix","6004f9ba":"matrix = pd.merge(matrix, shops, on=['shop_id'], how='left')\nmatrix = pd.merge(matrix, items, on=['item_id'], how='left')\nmatrix = pd.merge(matrix, cats, on=['item_category_id'], how='left')\nmatrix['city_code'] = matrix['city_code'].astype(np.int8)\nmatrix['item_category_id'] = matrix['item_category_id'].astype(np.int8)\nmatrix['type_code'] = matrix['type_code'].astype(np.int8)\nmatrix['subtype_code'] = matrix['subtype_code'].astype(np.int8)","7ca2f29b":"matrix","752128c7":"def lag_feature(df, lags, col):\n    tmp = df[['date_block_num','shop_id','item_id',col]]\n    for i in lags:\n        shifted = tmp.copy()\n        shifted.columns = ['date_block_num','shop_id','item_id', col+'_lag_'+str(i)]\n        shifted['date_block_num'] += i\n        df = pd.merge(df, shifted, on=['date_block_num','shop_id','item_id'], how='left')\n    return df","a39dd48f":"matrix = lag_feature(matrix, [1,2,3,6,9,12], 'item_cnt_month')","ad60c92b":"group = matrix.groupby(['date_block_num']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num'], how='left')\nmatrix['date_avg_item_cnt'] = matrix['date_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_avg_item_cnt')\nmatrix.drop(['date_avg_item_cnt'], axis=1, inplace=True)","3eb22402":"group = matrix.groupby(['date_block_num', 'item_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_item_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','item_id'], how='left')\nmatrix['date_item_avg_item_cnt'] = matrix['date_item_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1,2,3,6,9,12], 'date_item_avg_item_cnt')\nmatrix.drop(['date_item_avg_item_cnt'], axis=1, inplace=True)","d94f4f35":"group = matrix.groupby(['date_block_num', 'shop_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_shop_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','shop_id'], how='left')\nmatrix['date_shop_avg_item_cnt'] = matrix['date_shop_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1,2,3,6,9,12], 'date_shop_avg_item_cnt')\nmatrix.drop(['date_shop_avg_item_cnt'], axis=1, inplace=True)","62725e48":"group = matrix.groupby(['date_block_num', 'item_category_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_cat_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','item_category_id'], how='left')\nmatrix['date_cat_avg_item_cnt'] = matrix['date_cat_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_cat_avg_item_cnt')\nmatrix.drop(['date_cat_avg_item_cnt'], axis=1, inplace=True)","1fc29584":"group = matrix.groupby(['date_block_num', 'shop_id', 'item_category_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = ['date_shop_cat_avg_item_cnt']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'shop_id', 'item_category_id'], how='left')\nmatrix['date_shop_cat_avg_item_cnt'] = matrix['date_shop_cat_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_shop_cat_avg_item_cnt')\nmatrix.drop(['date_shop_cat_avg_item_cnt'], axis=1, inplace=True)","b914ae5b":"group = matrix.groupby(['date_block_num', 'shop_id', 'type_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = ['date_shop_type_avg_item_cnt']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'shop_id', 'type_code'], how='left')\nmatrix['date_shop_type_avg_item_cnt'] = matrix['date_shop_type_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_shop_type_avg_item_cnt')\nmatrix.drop(['date_shop_type_avg_item_cnt'], axis=1, inplace=True)","a9535802":"group = matrix.groupby(['date_block_num', 'shop_id', 'subtype_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = ['date_shop_subtype_avg_item_cnt']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'shop_id', 'subtype_code'], how='left')\nmatrix['date_shop_subtype_avg_item_cnt'] = matrix['date_shop_subtype_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_shop_subtype_avg_item_cnt')\nmatrix.drop(['date_shop_subtype_avg_item_cnt'], axis=1, inplace=True)","f1b86673":"group = matrix.groupby(['date_block_num', 'city_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_city_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'city_code'], how='left')\nmatrix['date_city_avg_item_cnt'] = matrix['date_city_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_city_avg_item_cnt')\nmatrix.drop(['date_city_avg_item_cnt'], axis=1, inplace=True)","ede41ab4":"group = matrix.groupby(['date_block_num', 'item_id', 'city_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_item_city_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'item_id', 'city_code'], how='left')\nmatrix['date_item_city_avg_item_cnt'] = matrix['date_item_city_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_item_city_avg_item_cnt')\nmatrix.drop(['date_item_city_avg_item_cnt'], axis=1, inplace=True)","72a2b112":"group = matrix.groupby(['date_block_num', 'type_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_type_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'type_code'], how='left')\nmatrix['date_type_avg_item_cnt'] = matrix['date_type_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_type_avg_item_cnt')\nmatrix.drop(['date_type_avg_item_cnt'], axis=1, inplace=True)","18a9f9d6":"group = matrix.groupby(['date_block_num', 'subtype_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_subtype_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'subtype_code'], how='left')\nmatrix['date_subtype_avg_item_cnt'] = matrix['date_subtype_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1], 'date_subtype_avg_item_cnt')\nmatrix.drop(['date_subtype_avg_item_cnt'], axis=1, inplace=True)","f7b099b7":"matrix = matrix[matrix.date_block_num > 11]","9748da7f":"def fill_na(df):\n    for col in df.columns:\n        if ('_lag_' in col) & (df[col].isnull().any()):\n            if ('item_cnt' in col):\n                df[col].fillna(0, inplace=True)         \n    return df\n\nmatrix = fill_na(matrix)","50bd30f2":"matrix.columns","9771c825":"data = matrix.copy()","7bf95922":"X = data[data.date_block_num <= 33].drop(['item_cnt_month'], axis=1)\ny = data[data.date_block_num <= 33]['item_cnt_month']\nX_train = data[data.date_block_num < 33].drop(['item_cnt_month'], axis=1)\ny_train = data[data.date_block_num < 33]['item_cnt_month']\nX_valid = data[data.date_block_num == 33].drop(['item_cnt_month'], axis=1)\ny_valid = data[data.date_block_num == 33]['item_cnt_month']\nX_test = data[data.date_block_num == 34].drop(['item_cnt_month'], axis=1)","bfd68718":"del matrix\ndel sales_train_df\ndel train\ndel shops_df\ndel shops\ndel cats\ndel item_categories_df\ndel items_df\ndel items","3d10a738":"from sklearn.linear_model import LinearRegression\n\nreg = LinearRegression()\nreg.fit(X_train,y_train)\n\nprint('Linear Regression RMSE:', mean_squared_error(y_valid, reg.predict(X_valid), squared = False))","08778cbc":"from sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV","237c5f2f":"'''parameters = {'alpha':[0, 1, 10, 100, 1000, 10000, 100000, 1000000]}\n\nmodel = Ridge()\nRidge_reg= GridSearchCV(model, parameters, scoring='neg_root_mean_squared_error',cv=5)\n\nRidge_reg.fit(X,y)\nprint(Ridge_reg.best_estimator_)'''","84ba4997":"reg_ridge = Ridge(alpha = 1000)\nreg_ridge.fit(X_train,y_train)\n\nprint('Ridge RMSE:', mean_squared_error(y_valid, reg_ridge.predict(X_valid), squared = False))","a9ff16d0":"reg_ridge.fit(X, y)\nY_test = reg_ridge.predict(X_test).clip(0, 20)\n\nsubmissionRidge = pd.DataFrame({\n    \"ID\": test.index, \n    \"item_cnt_month\": Y_test\n})","abc57d05":"from sklearn.model_selection import train_test_split","c2ed1771":"from lightgbm import LGBMRegressor","bfae1a80":"lgbm_model = LGBMRegressor(\n    n_jobs=-1,\n    learning_rate=0.2,\n    max_depth=8,\n    n_estimators=1000,\n    min_child_weight=300, \n    colsample_bytree=0.8, \n    subsample=0.8, \n    eta=0.3,    \n    seed=42\n)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, random_state=7)\neval_set = [(X_valid, y_valid)]\n\nlgbm_model.fit(\n    X_train, \n    y_train, \n    eval_metric=\"rmse\", \n    eval_set=eval_set,\n    verbose=True, \n    early_stopping_rounds = 3)","c1ae8979":"Y_test = lgbm_model.predict(X_test).clip(0, 20)\n\nsubmissionLGBM = pd.DataFrame({\n    \"ID\": test.index, \n    \"item_cnt_month\": Y_test\n})","e743a969":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, random_state=7)","620c241d":"import tensorflow as tf\nfrom tensorflow.keras.layers.experimental import preprocessing\nfrom keras.layers import LSTM, Dense, Dropout\nfrom keras.models import Sequential","93b8a75f":"tf.keras.backend.clear_session()\n\nmodel = Sequential()\nmodel.add(LSTM(units=64, input_shape=(35, 1)))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(1))\n\nmodel.compile(loss='mse',\n              optimizer='adam',\n              metrics=['mean_squared_error'])\nmodel.summary()","646b141d":"X_train = np.expand_dims(X_train.values,axis = 2)\nX_test = np.expand_dims(X_test.values,axis = 2)\nX_valid = np.expand_dims(X_valid.values,axis = 2)\n\n\n\nprint(X_train.shape, X_test.shape)","5aacd609":"'''X_train = X.values\nX_train = np.reshape(X_train, (X_train.shape[0], 1, X_train.shape[1]))\nX_test = np.reshape(X_test.values, (X_test.shape[0], 1, X_test.shape[1]))\n\nX_valid = np.reshape(X_valid.values, (X_valid.shape[0], 1, X_valid.shape[1]))\n\neval_set = (X_valid, y_valid)\n\n\nhistory = model.fit(X_train, y_train, batch_size=2048, epochs=5, validation_data=eval_set)\n'''","2487b374":"from keras.utils import plot_model","f2f16a89":"'''Y_test = model.predict(X_test).clip(0, 20)\nprint(Y_test)\n\nsubmissionLSTM = pd.DataFrame({\n    \"ID\": test.index, \n    \"item_cnt_month\": Y_test.ravel()\n})'''","c7badc95":"#plt.plot(history.history['val_loss'], label = 'Training Loss')\n#plt.legend(loc = 'best', shadow = True)","036efacc":"submission_df['item_cnt_month'] = ( 0.1*submissionRidge['item_cnt_month'] + 0.9*submissionLGBM['item_cnt_month'])\nsubmission_df.to_csv('submission.csv', index=False)\nprint('output file :','submission','saved')","14525fb2":"# Linear Regression","55c1b863":"# Item Categories","26836c72":"# Adding lags","bdfd1179":"# Ridge Regression","e3e969bb":"# Outliers","af62b165":"# Merge with shops\/items\/categ.","beeabbac":"# LightGBM","96ca5a3a":"# Items","8f3de16b":"# Adding Test Set","995a0383":"# Generate matrix","3a9ff039":"# Sales train","f9811da6":"# Cities and item types","2744bd7e":"# Delete data that is not needed","2f32f74e":"# Test","bb39160b":"# LSTM","c75b309f":"# Duplicated shops","79fbe1df":"# Shops","2368edc5":"# Price below zero","ff4be4ac":"# Adding mean","4a5036df":"# train & test"}}