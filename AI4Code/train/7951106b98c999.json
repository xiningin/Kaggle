{"cell_type":{"fdcf10a8":"code","db792e4f":"code","befad2bd":"code","46f7d382":"code","ff5749ee":"code","3c36713f":"markdown","db0f3a25":"markdown","a961ac25":"markdown"},"source":{"fdcf10a8":"# if True, just train a minimized Dataset\nDEBUG = False\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.data import Dataset\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, LSTM, LayerNormalization\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nimport os","db792e4f":"def select_data(csv, columns):\n    timeseries = [group[columns].to_numpy() for index, group in csv.groupby(['breath_id'])]\n    return np.array(timeseries)\n\ndef select_features(csv):\n    return select_data(csv, ['breath_id', 'R', 'C','time_step', 'u_in', 'u_out'])\n\ndef select_labels(csv):\n    return select_data(csv, ['pressure'])","befad2bd":"earlyStopping = EarlyStopping(monitor='val_loss', patience=5)\nmodel = Sequential([\n    LayerNormalization(input_shape=(80, 6)),\n    LSTM(64, return_sequences=True, dropout=0.3),\n    LSTM(32, return_sequences=True, dropout=0.2),\n    LSTM(1, activation='relu', return_sequences=True),\n])\n\nmodel.compile(optimizer='RMSprop', loss='mae', metrics=['mse'])\nmodel.summary()","46f7d382":"csv = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/train.csv')\nepochs = 50\n\nif DEBUG:\n    csv = csv.head(4*80)\n    epochs = 10\n    \nfeatures = select_features(csv)\nlabels = select_labels(csv)\n\nX_train, X_test, y_train, y_test = train_test_split(features, labels)\n\n\nmodel.fit(X_train, y_train, batch_size=512, epochs=epochs, validation_data=(X_test, y_test), callbacks=[earlyStopping])\nmodel.save('model')","ff5749ee":"csv_predict = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/test.csv')\nif DEBUG:\n    csv_predict = csv_predict.head(80 * 4)\n    \nprediction = model.predict(select_features(csv_predict), batch_size=512)\n\nsubmission = pd.concat([csv_predict['id'], pd.Series(prediction.flatten())], axis=1)\nsubmission.to_csv('submission.csv', index=False, header=['id', 'pressure'])","3c36713f":"# Training","db0f3a25":"# Create Model & Dataset","a961ac25":"# Inference & Submission "}}