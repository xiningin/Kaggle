{"cell_type":{"d6c738b7":"code","4502411e":"code","a287a5bc":"code","8bc0622d":"code","df0f2af4":"code","e44abae9":"code","97d5993c":"code","83591864":"code","413ec008":"code","61775aa2":"code","4bfcce59":"code","4a8f73e9":"code","905194ec":"code","8b025ff1":"code","9ca527cc":"code","7b45c6b6":"code","5395c670":"code","bb5cfdbf":"code","47b83538":"code","8e5aece2":"code","9e0d781b":"code","eb22e893":"code","c7c69f9c":"code","e372fe47":"code","1866a127":"code","c8494dfb":"code","e0f34027":"code","98b607ab":"code","b6ea09bd":"code","3e4cd0ff":"code","55b9493d":"code","ca07e0ba":"code","ce6d5854":"code","46955b7d":"code","69e4b69f":"code","60c7d05b":"code","d15f2d12":"code","caad32f2":"code","046f4706":"code","e91bf520":"code","8bdbb8df":"code","cd730c20":"code","56b2cc7a":"code","819b8ac7":"code","85dadf20":"code","44aa5fcb":"code","80a59c43":"code","f5fdd3bb":"code","4073f5fe":"code","b72dc5ac":"code","243730f1":"code","ceee99b8":"code","23287095":"code","69957daa":"code","1fd9eab0":"code","03a62fd3":"code","7e64b530":"code","6e5288af":"code","2ac6b20b":"code","badb00cc":"code","68860b3f":"code","f1ecf0fa":"code","2f31f8b7":"code","1430e074":"code","2911d8d1":"code","379ccb7e":"code","037c8ec1":"code","84451133":"code","9cdefbff":"code","a95f3d6c":"code","e3620e29":"code","aa1a8918":"code","61bed1e0":"code","0acfa139":"code","41540e68":"code","04f26672":"code","a78e5f45":"code","9f4fef10":"code","80c4595c":"code","d7eaaada":"code","89ea36b7":"code","5b77a958":"code","cb6774e7":"code","ddeab7d5":"code","0d940736":"code","3c18d881":"code","884bea4b":"code","32b4c808":"code","e5debd14":"code","0d5e09bf":"code","96ef58cf":"code","f0153802":"code","96ab6153":"code","fe0546c6":"code","19cc87b1":"code","7fe23b19":"code","2c32949d":"code","20159b88":"code","bb2bf95b":"code","26476b0c":"code","8b8e40d7":"code","7596a2da":"code","a1089cca":"code","630baf39":"code","3e3154a9":"code","7add1b19":"code","906b0d2c":"code","5ac278c3":"code","e8ada7f7":"code","548907a7":"code","b0feb8b3":"code","fbcb170b":"code","9c8a95ca":"code","cc167ea1":"code","5e224166":"code","2805038a":"code","a091acc6":"code","8fd8e90f":"code","aa4d12f8":"code","1bd433a8":"code","3319feb3":"code","f495c38e":"code","424e3eb6":"code","d6cd0b38":"code","5c55f69f":"code","c796244a":"code","9296e40b":"code","634717f1":"code","43c99b47":"code","bdc67558":"code","da8d83ac":"code","3e826bda":"code","7c3ee800":"code","e77eae9c":"code","5571d134":"code","82ae86b2":"code","64bab4e4":"code","0d8617dc":"code","f3b982a8":"code","fa496e5d":"code","233a907c":"code","d7f88d45":"code","fb7af44f":"code","a41712a2":"code","90576f6c":"code","e1de74cb":"code","0369cdbf":"markdown","14c3621c":"markdown","c8e70d26":"markdown","54ea4b62":"markdown","5310df0d":"markdown","81fbff51":"markdown","635725c6":"markdown","40eeafdc":"markdown","fac0a9fd":"markdown","9d6362b3":"markdown","31e6910c":"markdown","5934c087":"markdown","1b5de908":"markdown","ecccbc3b":"markdown","505592e1":"markdown","c645ee74":"markdown","7b9b83c5":"markdown","464dc055":"markdown","533d3581":"markdown","14214b8b":"markdown","96ca0fc0":"markdown","54b80969":"markdown","14f5360e":"markdown","87759d4f":"markdown","f3e2d5db":"markdown","5a354471":"markdown","3f52148e":"markdown","24f7dab3":"markdown","b3b8d937":"markdown","f96d5ef5":"markdown","e28bcb8c":"markdown","cccaf327":"markdown","a90c8b94":"markdown"},"source":{"d6c738b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4502411e":"#import necessary liabrarys\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np","a287a5bc":"#load the dataset\nurl_dados = 'https:\/\/github.com\/alura-cursos\/imersaodados3\/blob\/main\/dados\/dados_experimentos.zip?raw=true'\n\ndf = pd.read_csv(url_dados, compression = 'zip')","8bc0622d":"df.head()","df0f2af4":"df.shape","e44abae9":"df['tratamento'].unique()","97d5993c":"df['tratamento'].value_counts()","83591864":"df['tratamento'].value_counts(normalize = True)","413ec008":"df['tempo'].unique()","61775aa2":"df['tempo'].value_counts()","4bfcce59":"df['tempo'].value_counts(normalize = True)","4a8f73e9":"df['dose'].unique()","905194ec":"df['dose'].value_counts()","8b025ff1":"df['dose'].value_counts(normalize = True)","9ca527cc":"df['droga'].unique()","7b45c6b6":"df['g-0'].unique()","5395c670":"df['tratamento'].value_counts().plot.pie()","bb5cfdbf":"df['tempo'].value_counts().plot.pie()","47b83538":"df['tempo'].value_counts().plot.bar()","8e5aece2":"dados_filtrados = df[df['g-0'] > 0]\ndados_filtrados.head()","9e0d781b":"print(f'Total de linhas: {df.shape[0]}\\nTotal de colunas: {df.shape[1]}')","eb22e893":"df['tratamento'].value_counts()","c7c69f9c":"y = df['tratamento']\nsns.countplot(y = y)","e372fe47":"df.tail()","1866a127":"df['tratamento'].value_counts(normalize = True)","c8494dfb":"len(df['droga'].unique())","e0f34027":"colunas_hifen = df.columns\ncolunas_sem_hifen = []\nfor c in colunas_hifen:\n    c = c.replace('-', '')\n    colunas_sem_hifen.append(c)\ndf.columns = colunas_sem_hifen\ndf.head(0)","98b607ab":"valore_tempo = df['tempo'].value_counts(ascending=True)\nvalore_tempo.sort_index()","b6ea09bd":"plt.figure()\nvalore_tempo = df['tempo'].value_counts(ascending=True)\nax = valore_tempo.sort_index().plot.bar()\nax.set_title('Janelas de tempo', fontsize=20)\nax.set_xlabel('Tempo', fontsize=18)\nax.set_ylabel('Quantidade', fontsize=18)\nplt.xticks(rotation = 0, fontsize=16)\nplt.yticks(fontsize=16)\nplt.show()","3e4cd0ff":"import seaborn as sns\nsns.set()","55b9493d":"mapa = {'droga': 'composto'}\ndf.rename(columns=mapa, inplace=True)","ca07e0ba":"df.head()","ce6d5854":"df['composto'].index","46955b7d":"cod_compostos = df['composto'].value_counts().index[:5]","69e4b69f":"cod_compostos","60c7d05b":"df.query('composto in @cod_compostos')","d15f2d12":"plt.figure(figsize=(8, 6))\nax = sns.countplot(x = 'composto', data = df.query('composto in @cod_compostos'))\nax.set_title('Top 5 Compostos')\nplt.show()","caad32f2":"len(df['g0'].unique())","046f4706":"df['g0'].describe()","e91bf520":"df['g0'].hist(bins = 100)","8bdbb8df":"df['g19'].hist(bins = 100)","cd730c20":"df.describe()","56b2cc7a":"df[['g0', 'g1']]","819b8ac7":"df.loc[:, 'g0':'g771'].describe().T","85dadf20":"df.loc[:, 'g0':'g771'].describe().T['min'].hist(bins = 30)","44aa5fcb":"df.loc[:, 'g0':'g771'].describe().T['max'].hist(bins = 30)","80a59c43":"df.loc[:, 'g0':'g771'].describe().T['mean'].hist(bins = 30)","f5fdd3bb":"sns.boxplot(x='g0' , data=df)","4073f5fe":"plt.figure(figsize=(10,8))\nsns.boxplot(y='g0', x='tratamento' , data=df)","b72dc5ac":"plt.figure(figsize=(8, 6))\nax = sns.countplot(x = 'composto', data = df.query('composto in @cod_compostos'), order = cod_compostos)\nax.set_title('Top 5 Compostos')\nplt.show()","243730f1":"plt.rc('axes', titlesize = 15, labelsize = 14)\nplt.rc(['xtick', 'ytick'], labelsize = 10)\nplt.figure(figsize=(8, 6))\nax = sns.countplot(x = 'composto', data=df.query('composto in @cod_compostos'), order = cod_compostos)\nax.set_title('Top 5 compostos')\nax.set_ylabel('Contagem')\nax.set_xlabel('Composto')\nplt.show()","ceee99b8":"sns.histplot(data = df['g0'], bins = 100)","23287095":"sns.histplot(data = df['g19'], bins = 100)","69957daa":"sns.histplot(data = df.loc[:,'g0':'g771'].describe().T['min'], bins = 30)","1fd9eab0":"sns.histplot(data = df.loc[:,'g0':'g771'].describe().T['max'], bins = 30)","03a62fd3":"sns.histplot(data = df.loc[:,'g0':'g771'].describe().T['mean'], bins = 30)","7e64b530":"plt.figure(figsize=(10,8))\nsns.boxplot(y = 'g0', x = 'dose' , data = df)","6e5288af":"plt.figure(figsize=(10,8))\nsns.boxplot(y = 'c0', x = 'dose' , data=df)","2ac6b20b":"plt.figure(figsize=(10,8))\nsns.boxplot(y='c15', x='tempo' , data=df)","badb00cc":"plt.figure(figsize=(10,8))\nsns.histplot(data = df, x = 'g0', bins = 100, hue = 'tratamento')","68860b3f":"df.head()","f1ecf0fa":"pd.crosstab(df['dose'], df['tempo'])","2f31f8b7":"pd.crosstab([df['dose'], df['tempo']], df['tratamento'], normalize = True)","1430e074":"pd.crosstab([df['dose'], df['tempo']], df['tratamento'], normalize = 'index')","2911d8d1":"pd.crosstab([df['dose'], df['tempo']], df['tratamento'], values = df['g0'], aggfunc = 'mean')","379ccb7e":"sns.scatterplot(x = 'g0', y = 'g3', data = df)","037c8ec1":"df[['g0', 'g3']]","84451133":"sns.lmplot(x = 'g0', y = 'g8', data = df, line_kws = {'color': 'red'})","9cdefbff":"sns.lmplot(x = 'g0', y = 'g8', data = df, line_kws = {'color': 'red'}, col = 'tratamento', row = 'tempo')","a95f3d6c":"df.loc[:, 'g0':'g771'].corr()","e3620e29":"corr = df.loc[:, 'g0':'g50'].corr()","aa1a8918":"import numpy as np\n\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","61bed1e0":"corr_celular = df.loc[:,'c0':'c50'].corr()","0acfa139":"# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr_celular, dtype=bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr_celular, mask=mask, cmap=cmap, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","41540e68":"com_droga = df[df['tratamento']=='com_droga'].groupby(['dose','tempo']).count()['tratamento']\ncom_droga","04f26672":"com_controle = df[df['tratamento']=='com_controle'].groupby(['dose','tempo']).count()['tratamento']\ncom_controle","a78e5f45":"concatenado = pd.concat([com_controle, com_droga], axis=1)\nconcatenado","9f4fef10":"concatenado.columns = ['com_controle', 'com_droga'] \nconcatenado","80c4595c":"concatenado.div(concatenado.sum(axis=1),axis=0)","d7eaaada":"pd.crosstab([df['dose'], df['tempo']], df['tratamento'], normalize = 'columns')","89ea36b7":"pd.crosstab([df['dose'], df['tempo']], df['tratamento'], values = df['g0'], aggfunc = 'min')","5b77a958":"pd.crosstab([df['dose'], df['tempo']], df['tratamento'], values = df['g0'], aggfunc = 'max')","cb6774e7":"pd.crosstab([df['dose'], df['tempo']], df['tratamento'], values = df['g0'], aggfunc = 'median')","ddeab7d5":"pd.melt(df, id_vars = ['dose'], value_vars = ['g0'])","0d940736":"corr = df.loc[:, 'g0':'c99'].corr()","3c18d881":"corr_celular_genes = corr.loc['g0':'g25','c0':'c25']","884bea4b":"# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr_celular_genes, cmap=cmap, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","32b4c808":"df_resultados = pd.read_csv('https:\/\/github.com\/alura-cursos\/imersaodados3\/blob\/main\/dados\/dados_resultados.csv?raw=true')\ndf_resultados.head()","e5debd14":"df_resultados['acetylcholine_receptor_agonist'].unique()","0d5e09bf":"df_resultados.info()","96ef58cf":"contagem_moa = df_resultados.drop('id', axis = 1).sum().sort_values(ascending = False)\ncontagem_moa","f0153802":"df_resultados.drop('id', axis = 1).sum(axis = 1)","96ab6153":"df_resultados.head()","fe0546c6":"df.head()","19cc87b1":"df_resultados['n_moa'] = df_resultados.drop('id', axis=1).sum(axis=1)","7fe23b19":"df_resultados['n_moa'] != 0","2c32949d":"df_resultados['ativo_moa'] = (df_resultados['n_moa'] != 0)\ndf_resultados.head()","20159b88":"df_combinados = pd.merge(df, df_resultados[['id','n_moa', 'ativo_moa']], on='id')\ndf_combinados.head()","bb2bf95b":"df_combinados.query('tratamento == \"com_controle\"' )['ativo_moa'].value_counts()","26476b0c":"df_combinados.query('tratamento == \"com_droga\"' )['ativo_moa'].value_counts()","8b8e40d7":"composto_principal = df_combinados['composto'].value_counts().index[:5]\nplt.figure(figsize=(12,8))\nsns.boxplot(data = df_combinados.query('composto in @composto_principal'), y= 'g0', x='composto', hue='ativo_moa')","7596a2da":"contagem_moa.filter(like='inhibitor')[:10]","a1089cca":"contagem_moa.filter(like='antagonist')[:10]","630baf39":"contagem_moa.filter(like='_agonist')[:10]","3e3154a9":"df_resultados['eh_controle'] = (df['tratamento'] == 'com_controle')\ndf_resultados.head()","7add1b19":"df_combinados = pd.merge(df, df_resultados[['id','n_moa', 'ativo_moa','eh_controle']], on='id')\ndf_combinados.head()","906b0d2c":"Challenge 03: Create three columns to indicate the time 24, 48, 72","5ac278c3":"df_resultados['24'] = (df['tempo'] == 24)\ndf_resultados['48'] = (df['tempo'] == 48)\ndf_resultados['72'] = (df['tempo'] == 72)\ndf_resultados.head()","e8ada7f7":"df_combinados = pd.merge(df, df_resultados[['id','n_moa', 'ativo_moa','eh_controle','24','48','72']], on='id')\ndf_combinados.head()","548907a7":"Challenge 04: Study about DF combinations\nhttps:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/merging.html","b0feb8b3":"composto_principal = df_combinados['composto'].value_counts().index[0:2]\ncomposto_principal","fbcb170b":"fig, (ax1, ax2, ax3) = plt.subplots(1,3,figsize=(15,5))\n\nsns.boxplot(data = df_combinados.query('composto in @composto_principal & tempo == 24'), y= 'g0', x='composto',\n            hue='ativo_moa', order=composto_principal, ax=ax1)\n\nsns.boxplot(data = df_combinados.query('composto in @composto_principal & tempo == 48'), y= 'g0', x='composto',\n            hue='ativo_moa', order=composto_principal, ax=ax2)\n\nsns.boxplot(data = df_combinados.query('composto in @composto_principal & tempo == 48'), y= 'g0', x='composto',\n            hue='ativo_moa', order=composto_principal, ax=ax3)\n\nplt.show()","9c8a95ca":"fig, (ax1, ax2) = plt.subplots(1,2,figsize=(12,8))\n\nsns.boxplot(data = df_combinados.query('composto in @composto_principal & dose == \"D1\"'), y= 'g0', x='composto',\n            hue='ativo_moa', order=composto_principal, ax=ax1)\n\nsns.boxplot(data = df_combinados.query('composto in @composto_principal & dose == \"D2\"'), y= 'g0', x='composto',\n            hue='ativo_moa', order=composto_principal, ax=ax2)\n\nplt.show()","cc167ea1":"df_combinados.groupby('composto').ativo_moa.mean().value_counts()","5e224166":"df_combinados.head()","2805038a":"df_resultados.head()","a091acc6":"from sklearn.model_selection import train_test_split\n\nX = df_combinados.select_dtypes('float64')\ny = df_combinados['ativo_moa']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, stratify = y, random_state = 376)","8fd8e90f":"from sklearn.linear_model import LogisticRegression\n\nModel_LR = LogisticRegression(max_iter=1000)\nModel_LR.fit(X_train, y_train)\nModel_LR.score(X_test, y_test)","aa4d12f8":"from sklearn.dummy import DummyClassifier\nfrom sklearn.metrics import accuracy_score\n\nModel_dummy = DummyClassifier('most_frequent')\nModel_dummy.fit(X_train, y_train)\nPredict_dummy = Model_dummy.predict(X_test)\naccuracy_score(y_test, Predict_dummy)","1bd433a8":"df_combinados['ativo_moa'].value_counts(normalize=True)","3319feb3":"from sklearn.tree import DecisionTreeClassifier\n\nDTC = DecisionTreeClassifier(max_depth = 3)\nDTC.fit(X_train, y_train)\nDTC.score(X_test, y_test)","f495c38e":"from sklearn import tree\n\nfig, ax = plt.subplots(figsize=(15, 10), facecolor='k')\ntree.plot_tree(DTC,\n               ax=ax,\n               fontsize=10,\n               rounded=True,\n               filled=True,\n               feature_names=X_train.columns,\n               class_names=['N\u00e3o Ativado', 'Ativado'])\n\nplt.show()","424e3eb6":"treino = []\nteste = []\nfor i in range(1, 15):\n    DTC = DecisionTreeClassifier(max_depth = i)\n    DTC.fit(X_train, y_train)\n    treino.append(DTC.score(X_train, y_train))\n    teste.append(DTC.score(X_test, y_test))","d6cd0b38":"treino","5c55f69f":"teste","c796244a":"sns.lineplot(x = range(1, 15), y = teste, label = 'Teste')\nsns.lineplot(x = range(1, 15), y = treino, label = 'Treino')","9296e40b":"pd.get_dummies(df_combinados['tratamento'])","634717f1":"pd.get_dummies(df_combinados, columns = ['tratamento', 'dose', 'tempo'])","43c99b47":"df_combinados.drop(['id', 'n_moa', 'ativo_moa', 'composto'], axis = 1)","bdc67558":"from sklearn.ensemble import RandomForestClassifier\n\nX = df_combinados.drop(['id', 'n_moa', 'ativo_moa', 'composto'], axis = 1)\nX = pd.get_dummies(X, columns = ['tratamento', 'dose', 'tempo'])\ny = df_combinados['ativo_moa'] \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, stratify = y, random_state = 376)\n\nRFC = RandomForestClassifier()\nRFC.fit(X_train, y_train)\nRFC.score(X_test, y_test)","da8d83ac":"from sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier","3e826bda":"X = df_combinados.select_dtypes('float64')\ny = df_combinados['ativo_moa']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, stratify = y, random_state = 376)","7c3ee800":"XG = XGBClassifier()\nXG.fit(X_train, y_train)\nXG.score(X_test, y_test)","e77eae9c":"df_combinados.head(0)","5571d134":"df_combinados['dose'].value_counts()","82ae86b2":"X = df_combinados.loc[:, 'g0':'c99']\ny = df_combinados['dose'].map({'D1':0,'D2':1})","64bab4e4":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, stratify = y, random_state = 376)","0d8617dc":"LR2 = LogisticRegression(solver='newton-cg')\nLR2.fit(X_train, y_train)\nLR2.score(X_test, y_test)","f3b982a8":"df_combinados['composto'].value_counts()","fa496e5d":"X = df_combinados.loc[:, 'g0':'g10']\ny = df_combinados['composto'].map({'cacb2b860': 0, '87d714366': 1})","233a907c":"\n#unbalanced data\nsns.countplot(y = y)","d7f88d45":"dt_query = df_combinados.query('composto in [\"8b87a7a83\", \"5628cb3ee\"]')\nX = dt_query.loc[:, 'g0':'g10']\n# Alterando o y\ny = dt_query['composto'].map({'8b87a7a83':0, '5628cb3ee':1})","fb7af44f":"dt_query['composto'].value_counts()","a41712a2":"#Best :D\nsns.countplot(y = y)","90576f6c":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, stratify = y, random_state = 376)","e1de74cb":"MLR2 = LogisticRegression()\nMLR2.fit(X_train, y_train)\nMLR2.score(X_test, y_test)","0369cdbf":"Challenge 06: Study the code that plots the correlation matrix (heatmap)\nhttps:\/\/seaborn.pydata.org\/examples\/many_pairwise_correlations.html","14c3621c":"# Correlations and causality","c8e70d26":"Challenge 04: Test other problems (questions). 0, 1 or +.\n","54ea4b62":"# Challenge 01: Try other models or change the parameters of models we tested in class","5310df0d":"# Statistics, Data and Distributions","81fbff51":"# Merge and Results Analysis","635725c6":"# Challenge 01: Create frequency tables with pandas.groupby()","40eeafdc":"# Challenge 02: Create the eh_controle column for when in the treatment line == com_controle","fac0a9fd":"# Challenge 03: Proportion of treatment classes","9d6362b3":"# Challenge 02: Improve visualization by changing font size...","31e6910c":"Challenge 03: Research the flowchart 'Choosing the best model' choosing \nhttps:\/\/scikit-learn.org\/stable\/tutorial\/machine_learning_map\/index.html","5934c087":"# Challenge 03: Plot the histograms with seaborn","1b5de908":"# Challenge 03: Create three columns to indicate the time 24, 48, 72","ecccbc3b":"# Challenge 07: Make the graphics beautiful. (Matplotlib.pyplot)","505592e1":"# Challenge 05: Search the documentation for the query(pandas) method.\n\nhttps:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.query.html","c645ee74":"# Challenge 01: Find the top 10 of MOA actions (inhibitor, agonist...)","7b9b83c5":"Challenge 02: Study Sklearn documentation\nhttps:\/\/scikit-learn.org\/stable\/index.html","464dc055":"# Challenge 06: Rename the columns removing the hyphen.","533d3581":"# Challenge 03: Explore other aggregators","14214b8b":"# Challenge 05: Do more detailed analysis considering time and dose, to compare distributions (Choose a drug and compare with control)","96ca0fc0":"Challenge 05: Calculate and analyze the correlation between G and C. Reflect on biological effects.","54b80969":"# Challenge 06: Find out if there is any compound that, depending on the configuration of the experiment, activates or does not activate any MOA","14f5360e":"# Challenge 01: Sort the countplot graph","87759d4f":"# Challenge 04: How many types of drugs were investigated","f3e2d5db":"# **Challenge 01: Investigate why the treatment class is so unbalanced?**","5a354471":"# Challenge 06: Do other analyzes with the boxplot and even the histogram.","3f52148e":"Challenge 04: Explore the melt.\nhttps:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.melt.html","24f7dab3":"# Challenge 02: Normalize the crosstab by column.","b3b8d937":"Challenge 05: Reflect on manipulation of the size of views.\n\nhttps:\/\/www.alura.com.br\/artigos\/visualizando-informacoes-com-um-grafico","f96d5ef5":"# Merge and Results Analysis","e28bcb8c":"# Challenge 05: Choose the most used drug and try to create a model to predict this label","cccaf327":"# Challenge 04: Study about the statistics returned in .describe()\nhttps:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.describe.html","a90c8b94":"# Challenge 02: Plot the last 5 rows of the table"}}