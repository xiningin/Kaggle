{"cell_type":{"30fbcb6d":"code","2bc0720b":"code","8faa49d6":"code","f414e161":"code","6463e3ca":"code","ae6c0893":"code","9dd074e6":"code","6645b5b2":"code","2371d89d":"code","c927a9fd":"code","0df0bc84":"code","1e93c109":"code","36d0cc7b":"code","841c3312":"code","40aef480":"code","2fe7da0c":"code","2b3b46d0":"code","fb62f269":"code","23887f8b":"code","d961c1ba":"code","bc54323d":"code","90111b62":"markdown","6bb33d84":"markdown","2c89b96f":"markdown","6c7d833d":"markdown","60b08c5e":"markdown","2909569b":"markdown","1075b8e7":"markdown","1b53111c":"markdown","92b7bef0":"markdown","6e008b52":"markdown","3a1b4e9b":"markdown","7d2f2cad":"markdown"},"source":{"30fbcb6d":"import os, os.path, shutil\nimport zipfile\nimport numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport h5py\nimport random\n\nfrom tensorflow.keras.optimizers import Adam\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom keras.applications import *\nfrom keras.preprocessing.image import *\nfrom sklearn.utils import shuffle\nfrom keras.models import *\nfrom keras.layers import *\nfrom os import walk\n\n\nimport warnings\nwarnings.filterwarnings('ignore')","2bc0720b":"def seed_everything(seed=13):\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    os.environ['TF_DETERMINISTIC_OPS'] = '1'\n    os.environ['TF_KERAS'] = '1'\n    random.seed(seed)\n    \nseed_everything(419)","8faa49d6":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","f414e161":"with zipfile.ZipFile(\"..\/input\/dogs-vs-cats\/train.zip\",\"r\") as z:\n    z.extractall(\"..\/kaggle\/working\/train_unzip\")\n    \nprint(f\"We have total {len(os.listdir('..\/kaggle\/working\/train_unzip\/train'))} images in our training data.\")","6463e3ca":"with zipfile.ZipFile(\"..\/input\/dogs-vs-cats\/test1.zip\",\"r\") as z:\n    z.extractall(\"..\/kaggle\/working\/test_unzip\")\n    \nprint(f\"We have total {len(os.listdir('..\/kaggle\/working\/test_unzip\/test1'))} images in our training data.\")","ae6c0893":"folder_path = \"..\/kaggle\/working\/train_unzip\/train\"\n\nimages = [f for f in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, f))]\n\nfor image in images:\n    folder_name = image.split('.')[0]\n\n    new_path = os.path.join(folder_path, folder_name)\n    if not os.path.exists(new_path):\n        os.makedirs(new_path)\n\n    old_image_path = os.path.join(folder_path, image)\n    new_image_path = os.path.join(new_path, image)\n    shutil.move(old_image_path, new_image_path)","9dd074e6":"for (dirpath, dirnames, filenames) in walk(\"..\/kaggle\/working\/test_unzip\/test1\"):\n    print(\"Directory path: \", dirpath)\n    print(\"Folder name: \", dirnames)\n    print(\"File name: \", filenames)","6645b5b2":"%time\n\nBATCH_SIZE = 128\nimage_size = (128, 128)\nEPOCHS = 200\n\ndef write_gap(MODEL, image_size, lambda_func=None):\n    width = image_size[0]\n    height = image_size[1]\n    input_tensor = Input((height, width, 3))\n    x = input_tensor\n    if lambda_func:\n        x = Lambda(lambda_func)(x)\n    base_model = MODEL(input_tensor=x, weights='imagenet', include_top=False)\n    model = Model(base_model.input, GlobalAveragePooling2D()(base_model.output))\n\n    \n    gen = ImageDataGenerator()\n    train_generator = gen.flow_from_directory(\"..\/kaggle\/working\/train_unzip\/train\", image_size, shuffle=False, \n                                              batch_size=BATCH_SIZE)\n    test_generator = gen.flow_from_directory(\"..\/kaggle\/working\/test_unzip\", image_size, shuffle=False, \n                                             batch_size=BATCH_SIZE, class_mode=None)\n\n    train = model.predict_generator(train_generator, train_generator.samples)\n    test = model.predict_generator(test_generator, test_generator.samples)\n    with h5py.File(\"gap_%s.h5\"%MODEL.__name__) as h:\n        h.create_dataset(\"train\", data=train)\n        h.create_dataset(\"test\", data=test)\n        h.create_dataset(\"label\", data=train_generator.classes)\n\nwrite_gap(ResNet50, (224, 224))\nwrite_gap(Xception, (299, 299), xception.preprocess_input)\nwrite_gap(InceptionV3, (299, 299), inception_v3.preprocess_input)\n","2371d89d":"X_train = []\nX_test = []\n\nfor filename in [\"gap_ResNet50.h5\", \"gap_Xception.h5\", \"gap_InceptionV3.h5\"]:\n    with h5py.File(filename, 'r') as h:\n        X_train.append(np.array(h['train']))\n        X_test.append(np.array(h['test']))\n        y_train = np.array(h['label'])\n\nX_train = np.concatenate(X_train, axis=1)\nX_test = np.concatenate(X_test, axis=1)\n\nX_train, y_train = shuffle(X_train, y_train)","c927a9fd":"input_tensor = Input(X_train.shape[1:])\nx = input_tensor\nx = Dropout(0.5)(x)\nx = Dense(1, activation='sigmoid')(x)\nmodel = Model(input_tensor, x)\n\nmodel.compile(optimizer=Adam(lr=0.0003, decay=1e-3),\n              loss='binary_crossentropy',\n              metrics=['accuracy'])","0df0bc84":"def Callbacks():\n    erl = EarlyStopping(monitor='val_loss', patience=10, verbose=1, mode='min', \n                        restore_best_weights=True)\n    rdc = ReduceLROnPlateau(monitor='val_loss', factor=0.3, patience=3, verbose=1, mode='min')\n    return [erl,rdc]","1e93c109":"history = model.fit(X_train, \n                    y_train, \n                    batch_size=BATCH_SIZE, \n                    epochs=EPOCHS, \n                    callbacks=Callbacks(), \n                    validation_split=0.2)","36d0cc7b":"model.save('model.h5')","841c3312":"def plot_model_history(model_history, acc='accuracy', val_acc='val_accuracy'):\n    fig, axs = plt.subplots(1,2,figsize=(15,5))\n    axs[0].plot(range(1,len(model_history.history[acc])+1),model_history.history[acc])\n    axs[0].plot(range(1,len(model_history.history[val_acc])+1),model_history.history[val_acc])\n    axs[0].set_title('Model Accuracy')\n    axs[0].set_ylabel('Accuracy')\n    axs[0].set_xlabel('Epoch')\n    axs[0].set_xticks(np.arange(1,len(model_history.history[acc])+1),len(model_history.history[acc])\/10)\n    axs[0].legend(['train', 'val'], loc='best')\n    axs[1].plot(range(1,len(model_history.history['loss'])+1),model_history.history['loss'])\n    axs[1].plot(range(1,len(model_history.history['val_loss'])+1),model_history.history['val_loss'])\n    axs[1].set_title('Model Loss')\n    axs[1].set_ylabel('Loss')\n    axs[1].set_xlabel('Epoch')\n    axs[1].set_xticks(np.arange(1,len(model_history.history['loss'])+1),len(model_history.history['loss'])\/10)\n    axs[1].legend(['train', 'val'], loc='best')\n    plt.show()\n    \nplot_model_history(history)","40aef480":"y_pred = model.predict(X_test, verbose=1)\ny_pred = y_pred.clip(min=0.005, max=0.995)\ny_pred","2fe7da0c":"test_filenames = os.listdir('..\/kaggle\/working\/test_unzip\/test1')\ndf = pd.DataFrame({'filename': test_filenames})\ndf.head()","2b3b46d0":"gen = ImageDataGenerator()\ntest_generator = gen.flow_from_directory(\"..\/kaggle\/working\/test_unzip\/\", image_size, shuffle=False, \n                                         batch_size=BATCH_SIZE, class_mode=None)","fb62f269":"df['category'] = y_pred\ndf.head()","23887f8b":"threshold = 0.5\ndf['category'] = np.where(y_pred > threshold, \"Cat\",\"Dog\")\n\n\n\ndf.to_csv('submission.csv', index=False)\ndf.head()","d961c1ba":"df['category'].value_counts().plot.bar()","bc54323d":"sample_test = df.sample(n=36).reset_index()\nsample_test.head()\n\nplt.figure(figsize=(24, 16))\nfor index, row in sample_test.iterrows():\n    filename = row['filename']\n    category = row['category']\n    img = load_img(\"..\/kaggle\/working\/test_unzip\/test1\/\"+filename, target_size=image_size)\n    plt.subplot(6, 6, index+1)\n    plt.imshow(img)\n    plt.xlabel('It\\'s a ' + \"{}\".format(category) )\nplt.tight_layout()\nplt.show()","90111b62":"# Define Callback Method\n* to setup earlystopping and specify the value in plateau","6bb33d84":"* I can see the directory,folder name and file name residing inside through this tiny code snippet","2c89b96f":"* 3 different models are used to generate their individual weight. Later on we'll merge these weights.","6c7d833d":"# Training","60b08c5e":"# Unzip Files","2909569b":"# Merge All Of The Weights","1075b8e7":"# Evaluation Through Plot","1b53111c":"# Import Libraries","92b7bef0":"# Seed to maintain reproducibility","6e008b52":"The model I have used here are :\n* ResNet50\n* Xception\n* Inception","3a1b4e9b":"# Build The Model","7d2f2cad":"# Inference"}}