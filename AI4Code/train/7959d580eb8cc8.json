{"cell_type":{"2af1c569":"code","f3cf5319":"code","a5827b4f":"code","dab7103b":"code","5894d879":"code","0eeb113e":"code","67a23641":"code","bafb6a50":"code","62b8ed43":"code","5a1c89b8":"code","f0698a3b":"code","01f0a261":"code","fb0e90ef":"code","9b5f2483":"code","cd43d6b0":"code","ed2ee354":"code","01b1b6c8":"code","69b5f06f":"code","be74451a":"code","f9a0c61e":"code","14c4a1a4":"code","adf73cac":"code","2e9b607b":"code","76d14e3a":"code","102db6d6":"code","11420bb7":"code","1e3c4f23":"code","e97c2652":"code","a49356ac":"code","deeab642":"code","0e127176":"code","c6b9268b":"code","3525d5ee":"code","a4a0158d":"code","160f37db":"code","d2b6c2cf":"code","63e7d3f5":"code","d6204ae1":"code","ba208fcc":"code","dafbdc46":"code","a0593bb9":"code","cd4293fb":"code","6666ef58":"code","272b22a9":"code","69cd1e1b":"code","a5f8077f":"code","8e0e13cd":"code","b587ab7e":"code","8d80e446":"code","4c267c44":"code","7c42a3b3":"code","2f50c30b":"code","4f8ae5a0":"code","14a8f2c8":"code","4a3e002f":"code","3b1fdc3b":"code","5ba44fe5":"code","b6c225ee":"code","b72b164a":"code","ae6ca2ea":"code","b9fa8fc1":"code","9a895bf9":"code","1a168b15":"code","26b2c3cc":"code","accaf3d2":"code","5711af00":"code","6ce4c72f":"code","02f18a70":"code","84f2d55d":"code","fa1cb52c":"code","44d97bf2":"code","64437c59":"code","9f74c1b8":"code","59e48e62":"code","4c53244b":"code","e1b40492":"code","d56c2c92":"code","98a4da11":"code","d4dc03de":"code","1c4eaf2f":"code","c305bca3":"code","4e1ac7b1":"code","5a0246b7":"code","65b52c01":"code","47a09a20":"code","d49c7f92":"code","bb3e0b8f":"code","db700276":"code","8d88cab6":"code","d86579c8":"code","30102d2b":"code","8f90b0d6":"code","4155fb67":"code","1a1772f5":"code","840b0f92":"code","000074a7":"code","9d8e46e1":"code","26a06c55":"code","d4f4b8f8":"code","04caf74b":"code","547f5c94":"code","bbbe4150":"code","d14643fa":"code","978e0b88":"code","fcb0afeb":"code","f1b22ff2":"markdown","abf1eb01":"markdown","1a8dbbad":"markdown","789b7f4b":"markdown","9abce436":"markdown","b9847b5f":"markdown","048a63f0":"markdown","9163c2e0":"markdown","ca8729bc":"markdown","00e399f5":"markdown","1c95f431":"markdown","939a5a1d":"markdown","4cd2773f":"markdown","0477f09d":"markdown","21610662":"markdown","22f69acf":"markdown","9af863cb":"markdown","6d08eecc":"markdown","c423b21a":"markdown","667bba55":"markdown","81527298":"markdown","f8f6bafd":"markdown","bc419a5e":"markdown","d358c382":"markdown","6171c6a1":"markdown","a4daebe1":"markdown","cbe733ef":"markdown","69e9ab46":"markdown","ca2f153e":"markdown","83672f35":"markdown","dc483966":"markdown","fbe71828":"markdown"},"source":{"2af1c569":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import norm\nimport scipy\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\npd.set_option('display.max_columns', 500)","f3cf5319":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import Lasso\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn.metrics import mean_absolute_error as mae\nfrom sklearn.metrics import r2_score\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler","a5827b4f":"df = pd.read_csv('..\/input\/listings_summary.csv')\ndf.head(2)","dab7103b":"columns_to_keep = ['id','host_has_profile_pic','host_since','neighbourhood_cleansed', 'neighbourhood_group_cleansed',\n                   'host_is_superhost','description',\n                   'latitude', 'longitude','is_location_exact', 'property_type', 'room_type', 'accommodates', 'bathrooms',  \n                   'bedrooms', 'bed_type', 'amenities', 'price', 'cleaning_fee',\n                   'review_scores_rating','reviews_per_month','number_of_reviews',\n                   'review_scores_accuracy','review_scores_cleanliness','review_scores_checkin',\n                   'review_scores_communication','review_scores_location','review_scores_value',\n                   'security_deposit', 'extra_people', 'guests_included', 'minimum_nights',  \n                   'instant_bookable', 'is_business_travel_ready', 'cancellation_policy','availability_365']\n\ndf = df[columns_to_keep].set_index('id')\ndf.head(2)","5894d879":"df.isnull().sum()","0eeb113e":"df['is_location_exact'] = df['is_location_exact'].map({'f':0,'t':1})\ndf['host_is_superhost'] = df['host_is_superhost'].map({'f':0,'t':1})\ndf['is_business_travel_ready'] = df['is_business_travel_ready'].map({'f':0,'t':1})\ndf['instant_bookable'] = df['instant_bookable'].map({'f':0,'t':1})","67a23641":"df.head(3)","bafb6a50":"set(df['host_has_profile_pic'])","62b8ed43":"df['host_has_profile_pic'].fillna('f',inplace=True)","5a1c89b8":"df['host_has_profile_pic'] = df['host_has_profile_pic'].map({'f':0,'t':1})\nsns.countplot(x='host_has_profile_pic',data=df)","f0698a3b":"df['host_has_profile_pic'].value_counts()","01f0a261":"df['price'] = df['price'].str.replace('$', '').str.replace(',', '').astype(float)\ndf['cleaning_fee'] = df['cleaning_fee'].str.replace('$', '').str.replace(',', '').astype(float)\ndf['security_deposit'] = df['security_deposit'].str.replace('$', '').str.replace(',', '').astype(float)\ndf['extra_people'] = df['extra_people'].str.replace('$', '').str.replace(',', '').astype(float)","fb0e90ef":"df['cleaning_fee'].fillna(df['cleaning_fee'].median(), inplace=True)\ndf['cleaning_fee'].isna().sum()","9b5f2483":"df['security_deposit'].fillna(df['security_deposit'].median(), inplace=True)\ndf['security_deposit'].isna().sum()","cd43d6b0":"df['price'].describe()","ed2ee354":"set1=set(i for i in df[(df['price']==0)].index.tolist())\nlen(set1)","01b1b6c8":"df = df.drop(list(set1))\ndf.reset_index(inplace=True)\ndf['price'] = np.log1p(df['price'])","69b5f06f":"sns.distplot(df['price'], fit=norm);\nfig = plt.figure()\nres = scipy.stats.probplot(df['price'], plot=plt)\nprint(\"Skewness: %f\" % df['price'].skew())\nprint(\"Kurtosis: %f\" % df['price'].kurt())","be74451a":"sns.countplot(x='room_type',data=df)","f9a0c61e":"sns.countplot(x='neighbourhood_group_cleansed',data=df)","14c4a1a4":"sns.countplot(x='neighbourhood_cleansed',data=df)","adf73cac":"z = df['neighbourhood_cleansed'].value_counts()","2e9b607b":"others = []\nfor i in set(df['neighbourhood_cleansed']):\n    if z[i]<100:\n        others.append(i)\nlen(others)","76d14e3a":"for i in tqdm(range(len(df))):\n    if df.loc[i,'neighbourhood_cleansed'] in others:\n        df.loc[i,'neighbourhood_cleansed'] = 'Others'","102db6d6":"z = df['property_type'].value_counts()","11420bb7":"others = []\nfor i in set(df['property_type']):\n    if z[i]<100:\n        others.append(i)\nlen(others)","1e3c4f23":"for i in tqdm(range(len(df))):\n    if df.loc[i,'neighbourhood_cleansed'] in others:\n        df.loc[i,'neighbourhood_cleansed'] = 'Others'","e97c2652":"df['bathrooms'].value_counts()","a49356ac":"df['bathrooms'].fillna(1,inplace=True)","deeab642":"df['bedrooms'].value_counts()","0e127176":"df['bedrooms'].fillna(1,inplace=True)","c6b9268b":"type(list(set(df['host_since']))[0])","3525d5ee":"set2=[]\nz = df['host_since'].isnull()\nfor i in range(len(z)):\n    if z.loc[i]==True:\n        set2.append(i)\nz = df['host_is_superhost'].isnull()\nfor i in range(len(z)):\n    if z.loc[i]==True:\n        set2.append(i)\nset2 = set(set2)\nlen(set2)","a4a0158d":"df = df.drop(list(set2))\ndf.reset_index(inplace=True)","160f37db":"dropped = ['review_scores_rating','review_scores_accuracy','review_scores_cleanliness','review_scores_checkin',\n            'review_scores_communication','review_scores_location','review_scores_value']\ndf.drop(dropped,axis=1,inplace=True)","d2b6c2cf":"df.head(2)","63e7d3f5":"df['cancellation_policy'].value_counts()","d6204ae1":"y = df['price']\ndf.drop(['price'],axis=1,inplace=True)","ba208fcc":"df.isnull().sum()","dafbdc46":"df.head(2)","a0593bb9":"df['size'] = df['description'].str.extract('(\\d{2,3}\\s?[smSM])', expand=True)\ndf['size'] = df['size'].str.replace(\"\\D\", \"\")\ndf['size'] = df['size'].astype(float)\n","cd4293fb":"sub_df = df[['accommodates', 'bathrooms', 'bedrooms', 'cleaning_fee', \n                 'security_deposit', 'extra_people', 'guests_included', 'size']]","6666ef58":"train_data = sub_df[sub_df['size'].notnull()]\ntest_data  = sub_df[sub_df['size'].isnull()]\n\nX_train = train_data.drop('size', axis=1)\nX_test  = test_data.drop('size', axis=1)\n\ny_train = train_data['size']","272b22a9":"from sklearn.linear_model import LinearRegression\nlinreg = LinearRegression()\nlinreg.fit(X_train, y_train)","69cd1e1b":"y_test = linreg.predict(X_test)","a5f8077f":"mse(y_train,linreg.predict(X_train)),r2_score(y_train,linreg.predict(X_train))\n","8e0e13cd":"y_test = pd.DataFrame(y_test)\ny_test.columns = ['size']","b587ab7e":"prelim_index = pd.DataFrame(X_test.index)\nprelim_index.columns = ['prelim']\n\ny_test = pd.concat([y_test, prelim_index], axis=1)\ny_test.set_index(['prelim'], inplace=True)\n","8d80e446":"new_test_data = pd.concat([X_test, y_test], axis=1)\nsub_df_new = pd.concat([new_test_data, train_data], axis=0)","4c267c44":"sub_df_new.columns","7c42a3b3":"df.drop(['size'],axis=1,inplace=True)\nsub_df_new = sub_df_new['size'] ","2f50c30b":"df = pd.concat([sub_df_new, df], axis=1)","4f8ae5a0":"df.head(3)","14a8f2c8":"dropped = ['index','id','description']\ndf.drop(dropped,axis=1,inplace=True)","4a3e002f":"df.head(3)","3b1fdc3b":"df['No_of_amentities'] = df['amenities'].apply(lambda x:len(x.split(',')))","5ba44fe5":"df.head(3)","b6c225ee":"df['Laptop_friendly_workspace'] = df['amenities'].str.contains('Laptop friendly workspace')\ndf['TV'] = df['amenities'].str.contains('TV')\ndf['Family_kid_friendly'] = df['amenities'].str.contains('Family\/kid friendly')\ndf['Host_greets_you'] = df['amenities'].str.contains('Host greets you')\ndf['Smoking_allowed'] = df['amenities'].str.contains('Smoking allowed')\ndf['Hot_water'] = df['amenities'].str.contains('Hot water')\ndf['Fridge'] = df['amenities'].str.contains('Refrigerator')\n","b72b164a":"df.head(2)","ae6ca2ea":"dropped = ['amenities']\ndf.drop(dropped,axis=1,inplace=True)","b9fa8fc1":"category = ['neighbourhood_cleansed','neighbourhood_group_cleansed','property_type','room_type',\n           'bed_type','cancellation_policy']\n\nfor i in category:\n    df[i] = df[i].astype('category')\n    df[i] = df[i].cat.codes","9a895bf9":"df.head(3)","1a168b15":"from dateutil import parser\n\ndef diff_date(row):\n    today = parser.parse('2018-11-7')\n    return ((today - parser.parse(row['host_since'])).days)\/365.25\n","26b2c3cc":"df['host_since'] = df.apply(diff_date,axis=1)\ndf['host_since'].describe()","accaf3d2":"from math import sin, cos, sqrt, atan2, radians","5711af00":"def haversine_distance_central(row):\n    berlin_lat,berlin_long = radians(52.5200), radians(13.4050)\n    R = 6373.0\n    long = radians(row['longitude'])\n    lat = radians(row['latitude'])\n    \n    dlon = long - berlin_long\n    dlat = lat - berlin_lat\n    a = sin(dlat \/ 2)**2 + cos(lat) * cos(berlin_lat) * sin(dlon \/ 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    return R * c","6ce4c72f":"def haversine_distance_airport(row):\n    berlin_lat,berlin_long = radians(52.3733), radians(13.5064)\n    R = 6373.0\n    long = radians(row['longitude'])\n    lat = radians(row['latitude'])\n    \n    dlon = long - berlin_long\n    dlat = lat - berlin_lat\n    a = sin(dlat \/ 2)**2 + cos(lat) * cos(berlin_lat) * sin(dlon \/ 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    return R * c","02f18a70":"def haversine_distance_rail(row):\n    berlin_lat,berlin_long = radians(52.5073), radians(13.3324)\n    R = 6373.0\n    long = radians(row['longitude'])\n    lat = radians(row['latitude'])\n    \n    dlon = long - berlin_long\n    dlat = lat - berlin_lat\n    a = sin(dlat \/ 2)**2 + cos(lat) * cos(berlin_lat) * sin(dlon \/ 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    return R * c","84f2d55d":"df['distance_central'] = df.apply(haversine_distance_central,axis=1)\ndf['distance_airport'] = df.apply(haversine_distance_airport,axis=1)\ndf['distance_railways'] = df.apply(haversine_distance_airport,axis=1)\ndf['distance_avg'] = ( df['distance_central'] + df['distance_airport'] + df['distance_railways'] )\/3.0","fa1cb52c":"df['distance_avg'].describe()","44d97bf2":"df.head()","64437c59":"for c in category:\n    df[c+'_freq'] = df[c].map(df.groupby(c).size() \/ df.shape[0])\n    indexer = pd.factorize(df[c], sort=True)[1]\n    df[c] = indexer.get_indexer(df[c])","9f74c1b8":"df.head(3)","59e48e62":"df.isna().sum()","4c53244b":"df['reviews_per_month'] = df['reviews_per_month'].fillna(df['reviews_per_month'].median())","e1b40492":"df.to_csv('X_new.csv',index=False)","d56c2c92":"y.to_csv('Y_new.csv',index=False)","98a4da11":"df = pd.read_csv('X_new.csv')\ndf.head(2)","d4dc03de":"y = pd.read_csv('Y_new.csv',header=None)\ny.head(2)","1c4eaf2f":"X_train, X_val , y_train, y_val = train_test_split(df,y,test_size=0.3)","c305bca3":"scaler = StandardScaler()\nscaler.fit_transform(X_train)\nscaler.transform(X_val)","4e1ac7b1":"def adj_r2(r2,n,p):\n    return 1- ((1-r2)*(n-1))\/(n-p-1)","5a0246b7":"model = Lasso(alpha=1e-6)","65b52c01":"model.fit(X_train,y_train)","47a09a20":"yp_train = model.predict(X_train)\nyp_val = model.predict(X_val)","d49c7f92":"train_r2 =(r2_score(y_train, yp_train))\nval_r2 =(r2_score(y_val, yp_val))\n    \nprint('Train r2= ',train_r2)\nprint('Test r2= ',val_r2)\n","bb3e0b8f":"train_mse =(mse(y_train, yp_train))\nval_mse =(mse(y_val, yp_val))\n    \nprint('Train error= ',train_mse)\nprint('Test error= ',val_mse)\n","db700276":"adj_r2(train_r2,X_train.shape[0],X_train.shape[1])","8d88cab6":"adj_r2(val_r2,X_val.shape[0],X_val.shape[1])","d86579c8":"for i in range(len(model.coef_)):\n    print(df.columns[i],' ',model.coef_[i])","30102d2b":"from sklearn.ensemble import RandomForestRegressor","8f90b0d6":"model = RandomForestRegressor(max_depth=5,verbose=1,random_state=0,n_estimators=200,n_jobs=-1)","4155fb67":"model.fit(X_train,y_train)","1a1772f5":"yp_train = model.predict(X_train)\nyp_val = model.predict(X_val)","840b0f92":"train_r2 =(r2_score(y_train, yp_train))\nval_r2 =(r2_score(y_val, yp_val))\n    \nprint('Train r2= ',train_r2)\nprint('Test r2= ',val_r2)","000074a7":"train_mse =(mse(y_train, yp_train))\nval_mse =(mse(y_val, yp_val))\n    \nprint('Train error= ',train_mse)\nprint('Test error= ',val_mse)","9d8e46e1":"adj_r2(train_r2,X_train.shape[0],X_train.shape[1])","26a06c55":"adj_r2(val_r2,X_val.shape[0],X_val.shape[1])","d4f4b8f8":"for i in range(len(X_train.columns)):\n    print(i,' ',X_train.columns[i])","04caf74b":"import lightgbm as lgbm\nparams = {'objective': 'regression',\n          'metric': 'rmse',\n          'learning_rate':0.005,\n          'max_depth':6\n         } \ntrain_set = lgbm.Dataset(X_train,y_train, silent=True)\nmodel = lgbm.train(params, train_set=train_set,num_boost_round=1000,categorical_feature=[9,10,15,16,20,30])","547f5c94":"yp_train = model.predict(X_train)\nyp_val = model.predict(X_val)","bbbe4150":"train_r2 =(r2_score(y_train, yp_train))\nval_r2 =(r2_score(y_val, yp_val))\n    \nprint('Train r2= ',train_r2)\nprint('Test r2= ',val_r2)\n","d14643fa":"train_mse =(mse(y_train, yp_train))\nval_mse =(mse(y_val, yp_val))\n    \nprint('Train error= ',train_mse)\nprint('Test error= ',val_mse)\n","978e0b88":"adj_r2(train_r2,X_train.shape[0],X_train.shape[1])","fcb0afeb":"adj_r2(val_r2,X_val.shape[0],X_val.shape[1])","f1b22ff2":"# Null Values\n## Inspection + Handling","abf1eb01":"### Distances","1a8dbbad":"## Reviews","789b7f4b":"## Price","9abce436":"## Adding some extra features involving frequency","b9847b5f":"## Linear Regression","048a63f0":"## f\/t to int","9163c2e0":"## Propery Type","ca8729bc":"## Neighbourhood","00e399f5":"### Calculating distance from central Berlin","1c95f431":"## Host Details","939a5a1d":"# Reading data","4cd2773f":"# Saving processed data","0477f09d":"## RandomForest","21610662":"## Reviews\/month","22f69acf":"## LightGBM","9af863cb":"### Duration","6d08eecc":"# Data processing","c423b21a":"## Neighbourhood Group","667bba55":"## Cancellation","81527298":"## Dropping features","f8f6bafd":"### Calculating distance from Berlin Railway Station","bc419a5e":"# Loading processed data","d358c382":" # Model","6171c6a1":"## Room Types","a4daebe1":"## Profile Pics","cbe733ef":"## Bathrooms","69e9ab46":"# Size estimation","ca2f153e":"# Importing libraries","83672f35":"### Calculating distance from Airport","dc483966":"# Feature Engineering","fbe71828":"## Bedroom"}}