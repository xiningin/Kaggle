{"cell_type":{"4cd8a431":"code","4996d83b":"code","c090aa88":"code","029ccf47":"code","8185b1f2":"code","ba5b30ac":"code","c408d795":"code","4521892c":"code","dfb3c57a":"code","9279acf6":"code","e0f67c4d":"code","4fed8ab2":"code","99b96b98":"code","bd318293":"code","3e220647":"code","bb953b9c":"code","0ac88f3f":"code","36f5459e":"code","ec05a628":"code","b97331f9":"code","bdb80be8":"code","0d89e1de":"code","6c5e2e19":"code","2eebcc20":"code","79418c5d":"code","b14e5452":"code","d1eecb6a":"code","4850e11c":"code","2cd7a229":"markdown","7e012134":"markdown","029dff0c":"markdown","e6b0ca62":"markdown","9d24466e":"markdown","c0e02b4d":"markdown"},"source":{"4cd8a431":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directoryee\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4996d83b":"por = \"..\/input\/student-alcohol-consumption\/student-por.csv\"\n\nd3 = pd.read_csv(por)","c090aa88":"d3.columns","029ccf47":"d3.describe()","8185b1f2":"%%time\nimport matplotlib.pyplot as plt \nimport seaborn\n\nimport plotly.express as px\n\n%matplotlib inline","ba5b30ac":"correlate = d3.corr()\n\nprint(len(d3.columns))\n\nfig, ax = plt.subplots(figsize=(20,20)) \n\nplt.imshow(correlate)\nplt.show()","c408d795":"print(d3[d3[\"G2\"] == 0][\"G2\"].count())","4521892c":"fig, ax = plt.subplots(figsize=(20,20)) \n\nhm = seaborn.heatmap(correlate, annot=True)\n\nhm.set_xticklabels(hm.get_xticklabels(), rotation=45, horizontalalignment='right')\n\nprint(0)","dfb3c57a":"d4 = d3.copy()","9279acf6":"## add illegal drinking\ndef illegal_drinking(alc, age):\n    if alc > 1 and age < 16:\n        return True\n    return False\n\n\nd4[\"illegal_drink\"] = d4.apply(lambda x : illegal_drinking(x[\"Walc\"], x[\"age\"]), axis=1)","e0f67c4d":"d4[\"illegal_drink\"].describe()","4fed8ab2":"## add max parent edu\nd4[\"Pedu\"] = d4[[\"Fedu\", \"Medu\"]].max(axis=1)\n\nd4[\"Pedu\"].describe()","99b96b98":"## add is drinking\nd4[\"Drinking\"] = (d4[\"Walc\"] > 1)\nd4[\"Drinking_2\"] = (d4[\"Dalc\"] > 1)","bd318293":"d4[\"Drinking\"].describe()","3e220647":"d4.columns","bb953b9c":"# Check count matrix of \n\ndef visualize_col_show(df, col):\n    unique_value = df[col].value_counts()\n    \n    unique_value.plot.pie(autopct='%.2f')\n    \n    keys = unique_value.astype(bool).keys()\n    values = unique_value[unique_value.keys()]\n    \n    plt.xlabel(col)\n    plt.ylabel(\"Number of records\")\n    plt.title(\"Distribution in number of records and corresponding key.\")\n    plt.show()\n    plt.clf()\n    \nvisualize_col_show(d4, \"illegal_drink\")\nvisualize_col_show(d4, \"Pedu\")\nvisualize_col_show(d4, \"Drinking\")","0ac88f3f":"correlate = d4.corr()\n\nfig, ax = plt.subplots(figsize=(30,30)) \nhm = seaborn.heatmap(correlate, annot=True)\nhm.set_xticklabels(hm.get_xticklabels(), rotation=45, horizontalalignment='right')\n\nprint(0)","36f5459e":"%%time\ndef visualize_col(df, col, title=\"\", legends=None):\n    unique_value = df[col].value_counts()\n    \n    fig, ax = plt.subplots(figsize=(10,10)) \n    \n    keys = unique_value.keys()\n    values = unique_value[unique_value.keys()]\n    \n    plt.bar(keys, values)\n    \n    plt.xlabel(col)\n    plt.ylabel(\"Number of records\")\n    if legends is not None:\n        plt.legend(legends)\n    plt.title(title)\n    plt.show()\n    plt.clf()","ec05a628":"%%time\n   \ndef visualize_col_pie(df, col, title=\"\", legends=None):\n    unique_value = df[col].value_counts()\n    \n    unique_value.plot.pie(autopct='%.2f')\n    \n    keys = unique_value.astype(bool).keys()\n    values = unique_value[unique_value.keys()]\n    \n    plt.xlabel(col)\n    plt.ylabel(\"Number of records\")\n    plt.title(title)\n    if legends is not None:\n        plt.legend(legends)\n    plt.show()\n    plt.clf()","b97331f9":"%%time\n        \ndef visualize_cooccurence_matrix(df, col1, col2, normalize=False, title=\"\", plot=True):\n    col1_unique_val = df[col1].unique()\n    col2_unique_val = df[col2].unique()\n    \n    res = df.groupby([col1, col2]).size()\n    \n    col1_unique_val = sorted(col1_unique_val)\n    col2_unique_val = sorted(col2_unique_val)\n    \n    if isinstance(col1_unique_val[0], np.int64):\n        col1_unique_val = range(col1_unique_val[0], col1_unique_val[-1] + 1, 1)\n    if isinstance(col2_unique_val[0], np.int64):\n        col2_unique_val = range(col2_unique_val[0], col2_unique_val[-1] + 1, 1)\n    \n    cooc_matrix = np.zeros((len(col1_unique_val), len(col2_unique_val)))\n        \n    for i, val1 in enumerate(col1_unique_val):\n        for j, val2 in enumerate(col2_unique_val):\n            try:\n                if normalize:\n                    cooc_matrix[i, j] = res[(val1, val2)] \/ df[df[col1] == val1][col1].count()\n                else:\n                    cooc_matrix[i, j] = res[(val1, val2)]\n            except Exception as e:\n                cooc_matrix[i, j] = 0\n                \n    cooc_matrix_2 = np.zeros((len(col1_unique_val), len(col2_unique_val)))      \n    for i, val1 in enumerate(col1_unique_val):\n        for j, val2 in enumerate(col2_unique_val):\n            try:\n                if normalize:\n                    cooc_matrix_2[i, j] = res[(val1, val2)] \/ df[df[col2] == val2][col1].count()\n                else:\n                    cooc_matrix_2[i, j] = res[(val1, val2)]\n            except Exception as e:\n                cooc_matrix_2[i, j] = 0\n            \n    if plot:\n        fig, ax = plt.subplots(figsize=(20,20)) \n    \n        color = seaborn.color_palette(\"Blues\", 100)\n\n        fig = seaborn.heatmap(cooc_matrix, square=True, annot=cooc_matrix, fmt='g',\n                       xticklabels = col2_unique_val,\n                       yticklabels = col1_unique_val,\n                       cmap=color,\n                       cbar=False)\n        plt.title(title)\n        plt.show()\n        plt.clf()\n        \n        coc = cooc_matrix_2.T\n        \n        width = 1 \/ coc.shape[0] - 0.1\n        \n        prev = [0] * coc.shape[0]\n        \n        labels = [str(x) for x in col2_unique_val]\n        \n        for i in range(coc.shape[1]):\n            plt.bar(labels, coc[:, i], bottom=prev, label=col1_unique_val[i])\n            prev = prev + coc[:, i]\n            \n        plt.legend(bbox_to_anchor = (1.05, 0.6))\n        plt.xlabel(col2)\n        plt.ylabel(col1)\n        plt.show()\n    \n    return cooc_matrix\n\nvisualize_cooccurence_matrix(d4, 'studytime', 'Walc', True)","bdb80be8":"d4['Walc'].head(10)","0d89e1de":"dxyz = d4.copy()\n\ndxyz['Walc'].head(10)","6c5e2e19":"dxyz['Walc'] = d4['Walc'].replace({\n    1: 'Very low',\n    2: 'Low',\n    3: 'Moderate',\n    4: 'High',\n    5: 'Very High'\n})\ndxyz['Dalc'] = d4['Dalc'].replace({\n    1: 'Very low',\n    2: 'Low',\n    3: 'Moderate',\n    4: 'High',\n    5: 'Very High'\n})","2eebcc20":"%%time \nimport math\n\nfrom matplotlib.ticker import MaxNLocator\n\ndef visualize_box_swarm_plot(data, col1, col2, title=\"\", legends = None):\n    if col1 in ['Dalc', 'Walc']:\n        ax = seaborn.boxplot(x = col1, y = col2, \n                             order=['Very low', 'Low', 'Moderate', 'High', 'Very High'],\n                             data=data)\n    else:\n        ax = seaborn.boxplot(x = col1, y = col2, data=data)\n    \n    plt.title(\"Box \" + col1 + \" \" + col2)\n    if legends is not None:\n        plt.legend(legends)\n    plt.show()\n    plt.clf()\n    \ndef visualize_swarm_plot(data, col1, col2, title=\"\", legends=None):\n    plt.subplots(figsize=(35,10))\n    \n    if col1 in ['Dalc', 'Walc']:\n        ax = seaborn.swarmplot(x= col1, y= col2, order=['Very low', 'Low', 'Moderate', 'High', 'Very High'], data=data)\n    else:\n        ax = seaborn.swarmplot(x= col1, y= col2, data=data)\n        \n    ax.tick_params(axis='both', which='major', labelsize=25)\n    ax.tick_params(axis='both', which='minor', labelsize=20)\n    \n    ticks = ax.get_yticks()\n    labels = ax.get_yticklabels()\n    \n    cmax = data[col2].max()\n    \n    cmin = 0\n    \n    lower = math.floor(cmin)\n    upper = math.ceil(cmax + 1)\n    \n    yint = range(lower, upper, 2)\n    plt.yticks(yint)\n    plt.xlabel(col1, fontsize=25)\n    plt.ylabel(col2, fontsize=25)\n    if legends is not None:\n        plt.legend(legends)\n    plt.title(\"Swarm \" + col1 + \" \" + col2, fontsize=20)\n    plt.show()\n    plt.clf()","79418c5d":"visualize_swarm_plot(dxyz, \"Dalc\", \"G1\")","b14e5452":"visualize_swarm_plot(d4, \"Dalc\", \"G1\")","d1eecb6a":"visualize_swarm_plot(dxyz, \"Dalc\", \"G1\")\nvisualize_swarm_plot(dxyz, \"Walc\", \"G1\")\nvisualize_swarm_plot(dxyz, \"Dalc\", \"G2\")\nvisualize_swarm_plot(dxyz, \"Walc\", \"G2\")\nvisualize_swarm_plot(dxyz, \"Dalc\", \"G3\")\nvisualize_swarm_plot(dxyz, \"Walc\", \"G3\")\nvisualize_swarm_plot(dxyz, \"Drinking\", \"G1\")\nvisualize_swarm_plot(dxyz, \"Drinking_2\", \"G1\")\nvisualize_swarm_plot(dxyz, \"Drinking\", \"G2\")\nvisualize_swarm_plot(dxyz, \"Drinking_2\", \"G2\")\nvisualize_swarm_plot(dxyz, \"Drinking\", \"G3\")\nvisualize_swarm_plot(dxyz, \"Drinking_2\", \"G3\")\n\nvisualize_swarm_plot(dxyz, \"Walc\", \"absences\")\nvisualize_swarm_plot(dxyz, \"Dalc\", \"absences\")\nvisualize_swarm_plot(dxyz, \"Drinking\", \"absences\")\nvisualize_swarm_plot(dxyz, \"Drinking_2\", \"absences\")","4850e11c":"visualize_box_swarm_plot(dxyz, \"Dalc\", \"G1\")\nvisualize_box_swarm_plot(dxyz, \"Walc\", \"G1\")\nvisualize_box_swarm_plot(dxyz, \"Dalc\", \"G2\")\nvisualize_box_swarm_plot(dxyz, \"Walc\", \"G2\")\nvisualize_box_swarm_plot(dxyz, \"Dalc\", \"G3\")\nvisualize_box_swarm_plot(dxyz, \"Walc\", \"G3\")\nvisualize_box_swarm_plot(dxyz, \"Drinking\", \"G1\")\nvisualize_box_swarm_plot(dxyz, \"Drinking_2\", \"G1\")\nvisualize_box_swarm_plot(dxyz, \"Drinking\", \"G2\")\nvisualize_box_swarm_plot(dxyz, \"Drinking_2\", \"G2\")\nvisualize_box_swarm_plot(dxyz, \"Drinking\", \"G3\")\nvisualize_box_swarm_plot(dxyz, \"Drinking_2\", \"G3\")\n\nvisualize_box_swarm_plot(dxyz, \"Walc\", \"absences\")\nvisualize_box_swarm_plot(dxyz, \"Dalc\", \"absences\")\nvisualize_box_swarm_plot(dxyz, \"Drinking\", \"absences\")\nvisualize_box_swarm_plot(dxyz, \"Drinking_2\", \"absences\")","2cd7a229":"## M\u1ed9t s\u1ed1 vi\u1ec7c c\u1ea7n l\u00e0m\n- T\u00ednh feature importance, b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng m\u00f4 h\u00ecnh h\u1ecdc m\u00e1y c\u00f3 s\u1eb5n hay x\u00e0i g\u00ec c\u0169ng \u0111\u01b0\u1ee3c. Xem xem li\u1ec7u n\u00f3 c\u00f3 \u1ea3nh h\u01b0\u1edfng t\u1edbi c\u00e1c c\u1ed9t thu\u1ed9c t\u00ednh kh\u00e1c hay kh\u00f4ng ?","7e012134":"# New notebook\nExaminate correlation of every other columns to \"Dalc\" and \"Walc\".","029dff0c":"## T\u1eadp c\u00e1c gi\u1ea3 thi\u1ebft\n\nD\u1eef li\u1ec7u \u0111\u01b0\u1ee3c t\u1ed5ng h\u1ee3p t\u1eeb h\u1ecdc sinh c\u1ea5p 2 trong 2 tr\u01b0\u1eddng thu\u1ed9c B\u1ed3 \u0110\u00e0o Nha. G\u1ed3m c\u00e1c th\u00f4ng tin v\u1ec1 \u0111\u1ecba l\u00fd, nh\u00e2n kh\u1ea9u v\u00e0 \u0111i\u1ec3m.\n\n1. \u1ea2nh h\u01b0\u1edfng c\u1ee7a s\u1eed d\u1ee5ng \u0111\u1ed3 u\u1ed1ng c\u00f3 c\u1ed3n \u0111\u1ebfn hi\u1ec7u qu\u1ea3 h\u1ecdc t\u1eadp c\u1ee7a h\u1ecdc sinh (\u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 trong c\u1ed9t G1, G2, G3)\n2. Th\u1ed1ng k\u00ea s\u1ef1 \u1ea3nh h\u01b0\u1edfng c\u1ee7a gi\u1edbi t\u00ednh \u0111\u1ebfn s\u1ef1 ti\u1ebfp c\u1eadn \u0111\u1ebfn \u0111\u1ed3 u\u1ed1ng c\u00f3 c\u1ed3n \n3. \u1ea2nh h\u01b0\u1edfng c\u1ee7a l\u1ed1i s\u1ed1ng th\u00e0nh th\u1ecb \u0111\u1ebfn s\u1ef1 s\u1eed d\u1ee5ng \u0111\u1ed3 u\u1ed1ng c\u00f3 c\u1ed3n \u1edf h\u1ecdc sinh\n4. \u1ea2nh h\u01b0\u1edfng c\u1ee7a t\u00ecnh tr\u1ea1ng gia \u0111\u00ecnh (ly th\u00e2n hay kh\u00f4ng)\n5. Tr\u00ecnh \u0111\u1ed9 h\u1ecdc v\u1ea5n c\u1ee7a cha m\u1eb9 (C\u00f3 th\u1ec3 li\u00ean quan \u0111\u1ebfn c\u1ea3 t\u00ecnh tr\u1ea1ng gia \u0111\u00ecnh, do c\u00f3 th\u1ec3 n\u1ebfu \u1edf v\u1edbi ng\u01b0\u1eddi c\u00f3 tr\u00ecnh \u0111\u1ed9 h\u1ecdc v\u1ea5n cao h\u01a1n th\u00ec c\u00f3 th\u1ec3 h\u1ecdc sinh s\u1ebd ngoan h\u01a1n, v\u00e0 ng\u01b0\u1ee3c lai)\n* N\u1ebfu cha m\u1eb9 v\u1eabn s\u1ed1ng v\u1edbi nhau th\u00ec c\u00f3 th\u1ec3 l\u1ea5y max tr\u00ecnh \u0111\u1ed9 h\u1ecdc v\u1ea5n c\u1ee7a 2 ng\u01b0\u1eddi\n6. Th\u1eddi gian h\u1ecdc t\u1eadp, th\u1ec3 hi\u1ec7n m\u1ee9c \u0111\u1ed9 ch\u0103m ch\u1ec9 v\u00e0 ch\u00fa t\u00e2m v\u00e0o h\u1ecdc t\u1eadp c\u1ee7a h\u1ecdc sinh. C\u00f3 th\u1ec3 th\u1eddi gian h\u1ecdc t\u1eadp c\u00e0ng nhi\u1ec1u th\u00ec h\u1ecdc sinh \u0111\u00f3 c\u00e0ng ch\u0103m ch\u1ec9 v\u00e0 nghi\u00eam t\u00fac, v\u00e0 n\u1ebfu nghi\u00eam t\u00fac th\u00ec c\u00f3 th\u1ec3 tr\u00e1nh \u0111\u01b0\u1ee3c \u0111\u1ed3 c\u00f3 c\u1ed3n, ho\u1eb7c v\u00ec nghi\u00eam t\u00fac qu\u00e1 m\u00e0 l\u1ea1i n\u1ed1c \u0111\u1ed3 c\u00f3 c\u1ed3n. Ai m\u00e0 bi\u1ebft \u0111\u01b0\u1ee3c :V\n7. Higher:\n8. Romantic: li\u1ec7u h\u1ecdc sinh trong m\u1ed1i quan h\u1ec7 t\u00ecnh c\u1ea3m c\u00f3 n\u1ed1c \u0111\u1ed3 c\u00f3 c\u1ed3n hay kh\u00f4ng ?\n9. Goout: Theo l\u00fd thuy\u1ebft th\u00ec n\u00ean ra ngo\u00e0i ch\u01a1i, n\u00ean c\u00f3 th\u1ec3 vi\u1ec7c n\u00e0y kh\u00f4ng \u1ea3nh h\u01b0\u1edbng nhi\u1ec1u l\u1eafm.\n9. 5. famrel: \u1ea2nh h\u01b0\u1edfng c\u1ee7a c\u00e1c m\u1ed1i quan h\u1ec7 gia \u0111\u00ecnh \u0111\u1ed1i v\u1edbi vi\u1ec7c s\u1eed d\u1ee5ng \u0111\u1ed3 c\u00f3 c\u1ed3n. Vi\u1ec7c c\u00e1c m\u1ed1i quan h\u1ec7 gia \u0111\u00ecnh kh\u00f4ng t\u1ed1t c\u00f3 th\u1ec3 ti\u1ebfn t\u1edbi hi\u1ec7n t\u01b0\u1ee3ng s\u1eed d\u1ee5ng r\u01b0\u1ee3u gia t\u0103ng\n10. absences: Nghi\u00ean c\u1ee9u xem li\u1ec7u u\u1ed1ng r\u01b0\u1ee3u c\u00f3 l\u00e0m \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn vi\u1ec7c \u0111\u1ebfn tr\u01b0\u1eddng c\u1ee7a sinh vi\u00ean hay kh\u00f4ng.\n\n...\n\nNghi\u00ean c\u1ee9u \u1ea3nh h\u01b0\u1edfng c\u1ee7a \u0111\u1ed3 c\u00f3 c\u1ed3n \u0111\u1ebfn \u0111i\u1ec3m:\n1. \u1ea2nh h\u01b0\u1edfng \u0111\u1ebfn \u0111i\u1ec3m 2 k\u00ec v\u00e0 t\u1ed5ng k\u1ebft\n2. \u1ea2nh h\u01b0\u1edfng \u0111\u1ebfn s\u1ee9c kh\u1ecfe\n3. \u1ea2nh h\u01b0\u1edfng \u0111\u1ebfn c\u00e1c m\u1ed1i quan h\u1ec7: c\u00e1i n\u00e0y th\u00ec ph\u1ea3i xem x\u00e9t do u\u1ed1ng bia m\u00e0 m\u1ea5t b\u1ea1n th\u00ec c\u0169ng h\u01a1i l\u1ea1.","e6b0ca62":"## C\u00e0i \u0111\u1eb7t c\u00e1c h\u00e0m tr\u1ef1c quan","9d24466e":"# Visual number of record for each unique value for every cols","c0e02b4d":"## Add new feature:\n- M\u1ed9t c\u1ed9t cho illegaly drinking. \u1ede B\u1ed3 \u0110\u00e0o Nha, ph\u1ea3i \u0111\u1ee7 18 tu\u1ed5i m\u1edbi \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia, do \u0111\u00f3, ta c\u00f3 th\u1ec3 th\u00eam c\u1ed9t \u0111\u1ec3 \u0111\u00e1nh d\u1ea5u l\u00e0 ng\u01b0\u1eddi d\u00f9ng u\u1ed1ng r\u01b0\u1ee3u th\u1ebf l\u00e0 tr\u01b0\u1edbc hay sau.\n- Max h\u1ecdc v\u1ea5n c\u1ee7a cha m\u1eb9\n- Coi nh\u01b0ng ng\u01b0\u1eddi c\u00f3 m\u1ee9c s\u1eed d\u1ee5ng r\u01b0\u1ee3u = 0 l\u00e0 kh\u00f4ng u\u1ed1ng, t\u1ea1o 1 feature m\u1edbi, l\u00e0 u\u1ed1ng hay kh\u00f4ng."}}