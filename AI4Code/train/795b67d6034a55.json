{"cell_type":{"493f5497":"code","7f9cce7d":"code","25b0a76d":"code","2bc48674":"code","bfd64519":"code","ebffe69d":"code","ad40dae4":"code","1c1c43be":"code","e878a0a9":"code","69ee7f24":"code","5f39e937":"code","1b291459":"code","f9b86986":"code","86dac4c9":"code","d38a5590":"code","eb1911dc":"code","371a2cac":"code","36da4e15":"code","c6c72877":"code","24f93cc9":"code","a952b12b":"code","fb4994c1":"markdown","d79b1017":"markdown","9ad25875":"markdown","464e87f5":"markdown","bd2c290d":"markdown","c58d5650":"markdown","a12de8ca":"markdown","9ec1e8d8":"markdown","4c42b08e":"markdown","8168aa6d":"markdown","202ddbef":"markdown","dbdf97b2":"markdown","e91db470":"markdown","703ede25":"markdown","319d039a":"markdown","b3d977f7":"markdown"},"source":{"493f5497":"import numpy as np\nimport pandas as pd\nimport pandas_profiling as pp\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.metrics import zero_one_loss\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","7f9cce7d":"train_set = pd.read_csv(\"..\/input\/train.csv\")\npp.ProfileReport(train_set)","25b0a76d":"# print(train_set.groupby('Sex').count()[\"PassengerId\"])\n# train_set[train_set[\"Survived\"]==1].groupby('Sex').count()[\"Survived\"]\nprint(\"Percentage of males that survived:\", train_set[train_set[\"Sex\"]=='male'][train_set[\"Survived\"]==1][\"Survived\"].count()\/train_set[train_set[\"Sex\"]=='male'][\"Survived\"].count())\nprint(\"Percentage of females that survived:\", train_set[train_set[\"Sex\"]=='female'][train_set[\"Survived\"]==1][\"Survived\"].count()\/train_set[train_set[\"Sex\"]=='female'][\"Survived\"].count())\n# train_set[train_set[\"Survived\"]==1]['Sex'].value_counts(normalize=True) * 100","2bc48674":"# dt_model = DecisionTreeClassifier(random_state=0)\n# print(train_set[\"Age\"][train_set[\"Age\"].notnull()])\n# dt_model.fit(train_set.drop(\"Age\",axis=1), train_set[\"Age\"][train_set[\"Age\"].notnull()])\n# train_set[\"Age\"][train_set[\"Age\"].istnull()] = dt_model.predict(train_set[\"Age\"][train_set[\"Age\"].istnull()])","bfd64519":"test_set = pd.read_csv(\"..\/input\/test.csv\")\nmerged_set = pd.concat([train_set, test_set])","ebffe69d":"# len(train_set[\"Age\"][train_set[\"Age\"].isnull().values==True])\n# merged_set[\"Age\"][merged_set[\"Age\"].isnull().values==True] = merged_set[\"Age\"].mean() # Fills mean to NA value\n\n# merged_set[\"Age\"].describe()","ad40dae4":"merged_set[\"Child\"] = (merged_set[\"Age\"] < 16).astype(int)\nmerged_set[\"Child\"][merged_set[\"Child\"].isnull()] = 0\nchlidren_survived = merged_set[['Child', 'Survived']].groupby('Child').agg(['sum', 'count'])\nprint(chlidren_survived['Survived']['sum']\/chlidren_survived['Survived']['count'])\n\n# A table with subsets of sex and is\/isn't a child, with sum (number of survivals) and count (total number) for each subset:\ngender_age_subsets = merged_set[['Sex','Child', 'Survived']].groupby(['Sex', 'Child']).agg(['sum', 'count'], axis=\"columns\")  \n# The percentage of survivals of each subset from the above:\ngender_age_subsets['Survived']['sum']\/gender_age_subsets['Survived']['count']\n","1c1c43be":"merged_set['Fare_level'] = np.zeros_like(merged_set[\"Fare\"])\nmerged_set['Fare_level'][merged_set[\"Fare\"] < 10] = 0\nmerged_set['Fare_level'][(merged_set[\"Fare\"] < 20) & (merged_set[\"Fare\"] >= 10)] = 1\nmerged_set['Fare_level'][(merged_set[\"Fare\"] < 30) & (merged_set[\"Fare\"] >= 20)] = 2\nmerged_set['Fare_level'][merged_set[\"Fare\"] >= 30] = 3\n\nfare_level_survived = merged_set[['Fare_level', 'Survived']].groupby('Fare_level').agg(['sum', 'count'], axis=\"columns\")\nfare_level_survived['Survived']['sum']\/fare_level_survived['Survived']['count']\n\nfare_level_survived = merged_set[['Fare_level', 'Sex', 'Survived', 'Pclass']].groupby(['Sex', 'Fare_level', 'Pclass']).agg(['sum', 'count'], axis=\"columns\")\nprint(fare_level_survived)\nfare_level_survived['Survived']['sum']\/fare_level_survived['Survived']['count']","e878a0a9":"splitted = [name.split('. ')[0] for name in merged_set[\"Name\"]]\ntitles = set([name.split(', ')[-1] for name in splitted])\nprint(titles)\n\nto_remove = set(['Capt', 'Don', 'Major', 'Sir','Dona', 'Lady', 'the Countess', 'Jonkheer', 'Mlle', 'Mlle'])\ntitles -= to_remove\n\ntitles_united = {'Sir': ['Capt', 'Don', 'Major', 'Sir'], 'Lady': ['Dona', 'Lady', 'the Countess', 'Jonkheer'], 'Mme': ['Mme', 'Mlle']}\nfor title in titles:\n    merged_set[title] = list(map(lambda name: int(title in name), merged_set[\"Name\"]))\nfor key in titles_united:\n    merged_set[key] = list(map(lambda name: int(name.split('. ')[0].split(', ')[-1] in key), merged_set[\"Name\"]))","69ee7f24":"merged_set['Family_size'] = merged_set['SibSp'] + merged_set['Parch'] + 1\nmerged_set['No_family'] = (merged_set['Family_size']==1).astype(int)","5f39e937":"splitted = [name.split('. ')[0] for name in merged_set[\"Name\"]]\nsurnames = [name.split(', ')[0] for name in splitted]\n\nmerged_set['FamilyID'] = surnames + merged_set['Family_size'].astype(str)\nmerged_set['FamilyID'][merged_set['Family_size']<=2] = 'small'\n\nmerged_set.groupby('FamilyID')['PassengerId'].count()","1b291459":"merged_set[\"CA\"] = list(map(lambda ticket: int((\"CA\" in ticket) or (\"C.A\" in ticket)), merged_set[\"Ticket\"]))\nmerged_set[\"PC\"] = list(map(lambda ticket: int(\"PC\" in ticket), merged_set[\"Ticket\"]))\nmerged_set[\"SOC\"] = list(map(lambda ticket: int(\"S.O.C\" in ticket), merged_set[\"Ticket\"]))\n\n# merged_set.groupby(\"Ticket\")[\"Name\"].count().sort_values(ascending=False)","f9b86986":"# merged_set[\"Cabin_type\"] = np.zeros_like(merged_set[\"Cabin\"])\n# merged_set[\"A_cabin\"] = list(map(lambda cabin: int(\"A\" in cabin), merged_set[\"Cabin\"].astype(str)))\n# merged_set[\"B_cabin\"] = list(map(lambda cabin: int(\"B\" in cabin), merged_set[\"Cabin\"].astype(str)))\n# merged_set[\"C_cabin\"] = list(map(lambda cabin: int(\"C\" in cabin), merged_set[\"Cabin\"].astype(str)))\n# merged_set[\"D_cabin\"] = list(map(lambda cabin: int(\"D\" in cabin), merged_set[\"Cabin\"].astype(str)))\n# merged_set[\"E_cabin\"] = list(map(lambda cabin: int(\"E\" in cabin), merged_set[\"Cabin\"].astype(str)))\n# merged_set[\"F_cabin\"] = list(map(lambda cabin: int(\"F\" in cabin), merged_set[\"Cabin\"].astype(str)))\n# merged_set[\"Cabin_type\"][merged_set[\"A_cabin\"] == 1] = 1\n# merged_set[\"Cabin_type\"][merged_set[\"B_cabin\"] == 1] = 2\n# merged_set[\"Cabin_type\"][merged_set[\"C_cabin\"] == 1] = 3\n# merged_set[\"Cabin_type\"][merged_set[\"D_cabin\"] == 1] = 4\n# merged_set[\"Cabin_type\"][merged_set[\"E_cabin\"] == 1] = 5\n# merged_set[\"Cabin_type\"][merged_set[\"F_cabin\"] == 1] = 6\n# sns.stripplot(x=\"Survived\", y=\"Cabin_type\", data=merged_set)\n","86dac4c9":"ids = merged_set['PassengerId'][merged_set['Survived'].isnull()]\nmerged_set = merged_set.drop(['Cabin', 'PassengerId'], axis=1)\nmerged_set['Embarked'][merged_set['Embarked'].isnull()] = 'S'\nmerged_set['Fare'][merged_set['Fare'].isnull()] = merged_set['Fare'].mean()","d38a5590":"merged_noncategorical = pd.get_dummies(merged_set, columns=['Embarked', 'Name', 'Sex', 'Ticket', 'FamilyID'])","eb1911dc":"dt_model = DecisionTreeRegressor(random_state=0)\nage_train_set = merged_noncategorical[merged_noncategorical[\"Age\"].notnull()].drop([\"Age\", \"Survived\"],axis=1)\ny = merged_noncategorical[\"Age\"][merged_noncategorical[\"Age\"].notnull()]\ndt_model.fit(age_train_set, y)\nage_test_set = merged_noncategorical[merged_noncategorical[\"Age\"].isnull()].drop([\"Age\", \"Survived\"],axis=1)\nmerged_noncategorical[\"Age\"][merged_noncategorical[\"Age\"].isnull()] = dt_model.predict(age_test_set)","371a2cac":"test_set = merged_noncategorical[merged_noncategorical['Survived'].isnull()]\ntrain_set = merged_noncategorical[merged_noncategorical['Survived'].notnull()]","36da4e15":"y = train_set.loc[:, 'Survived']\nX = train_set.drop(['Survived'], axis=1)\ntest_set = test_set.drop(['Survived'], axis=1)\nX_train, X_val, Y_train, Y_val = train_test_split(X, y, test_size=0.33)","c6c72877":"rf_model = RandomForestClassifier(random_state=1)\nrf_model.fit(X, y)\n\n# predictions = rf_model.predict(X_val)\n# print(predictions)\n# loss = zero_one_loss(Y_val.values, predictions)\n# print(\"Validation loss for rf model is: {}\".format(loss))","24f93cc9":"predictions = (rf_model.predict(test_set)).astype(int)\n\nsubmission = pd.concat([ids, pd.Series(predictions, name=\"Survived\")], axis=1)\nprint(submission.head(15))\nsubmission.to_csv(\"submission.csv\", index=False)","a952b12b":"print(os.listdir(\"..\/working\"))","fb4994c1":"I can see that females had a much greater chance to survive according to the percantage of females which survived against the percantage of males which survived:","d79b1017":"Now, I'll move to look at the other variables like Pclass and Fare. By the Pearson correlation from the profiling, they seem to affect a bit more then other variables on survival rates. Pclass already has only 3 values, but Fare is a continuos variable with a lot of different values, so I would like to change it. I'll create a new variable with 4 optional values- 0 for a fare of upto 10\\$, 1 for a fare of upto 20\\$, 2 for a fare of upto 30\\$, and 4 for a fare of more then 30\\$.","9ad25875":"From the profiling I can see that 19.9% of the Age values are missing, so I will fill them up with the mean value:","464e87f5":"In order to create all new features\/feature changes both on the train and the test set, I will read the test as well and merge 2 sets.","bd2c290d":"Now, let's combine SibSp with Parch into a new feature- family size.","c58d5650":"Now all that's left to do, is to fill in the missing values.","a12de8ca":"Cabin has a lot of missing values. let's see if this variable helps to give some prediction or not.","9ec1e8d8":"It seems that for some reason, females (and also males) with Pclass=3 had a way lower chance of survival, but this is regardless of their \"Fare_level\".","4c42b08e":"Next, I'll look at the \"Name\" variable and extract every name with a specific title in it.\n","8168aa6d":"By the results above I can see that there's a slitely better chance of survival if your'e under 16, and I can still see that females had more chance of survival then males, regardless of their age, so there's nothing else to change.","202ddbef":"Lets split now to train, validation and test sets and validate the results.","dbdf97b2":"Before running a prediction model over my features, there are some categorical features which need to be converted to \"dummies\" so the model can handle them correctly.","e91db470":"I'll use a decision tree regressor to fill in the missing age values instead of just putting the mean as the age for each person.","703ede25":"Children also had a greater chance of survival, but using the existing \"Age\" variable alone is not enough to emphasize this, since there may only be one or two passengers for each age. So I will create a new variable \"Child\" for any passenger under the age of 16, and see if it helps:","319d039a":"Create submission file:","b3d977f7":"Let's look at another variable that has a wide variety: \"Ticket\":"}}