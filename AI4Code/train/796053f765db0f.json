{"cell_type":{"ea330eda":"code","9ab48db8":"code","fa313f80":"code","2d556243":"code","78cb547a":"code","36669de9":"code","fab7fa64":"code","4b5d43dd":"code","93dd2181":"code","152d2a0e":"code","d1fc863b":"code","10c72304":"code","19c10404":"code","34b48d86":"code","ba724bb6":"code","09136c86":"code","774d687b":"code","989e9bb1":"code","589e63d9":"code","c850fe04":"code","6da1d45d":"code","99aac845":"code","baf25775":"code","5a3a26c7":"markdown","a30e1b2b":"markdown","bae0d28d":"markdown","7869c7c3":"markdown","a1662529":"markdown"},"source":{"ea330eda":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # visualization library\nimport matplotlib.pyplot as plt # visualization library\nimport plotly.plotly as py # visualization library\nfrom plotly.offline import init_notebook_mode, iplot # plotly offline mode\ninit_notebook_mode(connected=True) \nimport plotly.graph_objs as go # plotly graphical object\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport os\nprint(os.listdir(\"..\/input\"))\nimport warnings            \nwarnings.filterwarnings(\"ignore\") # if there is a warning after some codes, this will avoid us to see them.\nplt.style.use('ggplot') # style of plots. ggplot is one of the most used style, I also like it.\n# Any results you write to the current directory are saved as output.","9ab48db8":"data = pd.read_csv(\"..\/input\/scrubbed.csv\")","fa313f80":"data = data.rename(columns = {'longitude ':'longitude' })","2d556243":"data.info()","78cb547a":"data.head(10)","36669de9":"data.tail(10)","fab7fa64":"data[\"country\"].fillna(\"missing\" ,inplace = True)","4b5d43dd":"data.columns","93dd2181":"data[\"shape\"].fillna(\"empty\" ,inplace = True)","152d2a0e":"data.country.value_counts()","d1fc863b":"data['color'] = colors = [\"\" for x in data.country]","10c72304":"data[\"year\"]= [int(each.split()[0].split('\/')[2]) for each in data.iloc[:, 0]]","19c10404":"mapPlotData = data[data.year > 2010]","34b48d86":"mapPlotData = mapPlotData[mapPlotData.country != \"missing\"]","ba724bb6":"mapPlotData.head()","09136c86":"mapPlotData.year.value_counts()","774d687b":"mapPlotData.color[mapPlotData.country == \"us\"] = \"rgb(0, 116, 217)\"\nmapPlotData.color[mapPlotData.country == \"gb\"] = \"rgb(255, 65, 54)\"\nmapPlotData.color[mapPlotData.country == \"ca\"] = \"rgb(133, 20, 75)\"\nmapPlotData.color[mapPlotData.country == \"au\"] = \"rgb(255, 133, 27)\"\nmapPlotData.color[mapPlotData.country == \"de\"] = \"rgb(255, 7, 4)\"\n#mapPlotData.color[mapPlotData.country == \"missing\"] = \"rgb(255, 255, 255)\"\n\nmapData = [dict(\n    type = 'scattergeo',\n    lon = mapPlotData.longitude,\n    lat = mapPlotData.latitude,\n    hoverinfo = 'text',\n    text = \"Sigth Location: \" + mapPlotData.country,\n    mode = 'markers',\n    marker = dict(\n        sizemode = 'area',\n        sizeref = 1,\n        size= 10 ,\n        line = dict(width = 1, color = \"white\"),\n        color = mapPlotData[\"color\"],\n        opacity = 0.7),\n)]\nlayout = dict(\n    title = 'UFO Sightings Between 2011 - 2014',\n    hovermode = 'closest', \n    width = 1500, \n    height = 900,\n    geo = dict(showframe = False, \n               showland = True, \n               showcoastlines = True, \n               showcountries = True, \n               countrywidth = 1, \n               projection = dict(type = 'mercator'),\n               landcolor = 'rgb(217, 217, 217)',\n               subunitwidth = 1,\n               showlakes = True,\n               lakecolor = 'rgb(255, 255, 255)',\n               countrycolor = \"rgb(5, 5, 5)\")\n)\n\nfig = go.Figure(data = mapData, layout = layout)\niplot(fig)","989e9bb1":"data[\"shape\"].unique()","589e63d9":"data[\"shape\"].value_counts()","c850fe04":"data = data[(data[\"shape\"] == \"light\") | (data[\"shape\"] == \"triangle\") | (data[\"shape\"] == \"circle\") | (data[\"shape\"] == \"fireball\") | (data[\"shape\"] == \"other\")]","6da1d45d":"dataset = data.loc[:,[\"datetime\", \"country\", \"latitude\", \"longitude\", \"shape\", \"year\"]]\ndataset.head(10)","99aac845":"dataset[\"shape\"].value_counts()","baf25775":"years = [str(each) for each in list(data.year.unique())]\n\n# list of most common shapes\nshapes = ['light', 'triangle', 'circle', 'fireball', 'other']\n\ncustom_colors = {\n    'light': 'rgb(189, 2, 21)',\n    'triangle': 'rgb(52, 7, 250)',\n    'circle': 'rgb(99, 110, 250)',\n    'fireball': 'rgb(0, 0, 0)',\n    'other' : 'rgb(255, 255, 0)'\n}\n\n# make figure\nfigure = {\n    'data': [],\n    'layout': {},\n    'frames': []\n}\n\nfigure['layout']['geo'] = dict(showframe = False, \n                               showland = True, \n                               showcoastlines = True, \n                               showcountries = True, \n                               countrywidth = 1, \n                               landcolor = 'rgb(217, 217, 217)',\n                               subunitwidth = 1,\n                               showlakes = True,\n                               lakecolor = 'rgb(255, 255, 255)',\n                               countrycolor = \"rgb(5, 5, 5)\")\nfigure['layout']['hovermode'] = 'closest'\nfigure['layout']['sliders'] = {\n    'args': [\n        'transition', {\n            'duration': 400,\n            'easing': 'cubic-in-out'\n        }\n    ],\n    'initialValue': '1950',\n    'plotlycommand': 'animate',\n    'values': years,\n    'visible': True\n}\n\nfigure['layout']['updatemenus'] = [\n    {\n        'buttons': [\n            {\n                'args': [None, {'frame': {'duration': 500, 'redraw': False},\n                         'fromcurrent': True, 'transition': {'duration': 300, 'easing': 'quadratic-in-out'}}],\n                'label': 'Play',\n                'method': 'animate'\n            },\n            {\n                'args': [[None], {'frame': {'duration': 0, 'redraw': False}, 'mode': 'immediate',\n                'transition': {'duration': 0}}],\n                'label': 'Pause',\n                'method': 'animate'\n            }\n        ],\n        'direction': 'left',\n        'pad': {'r': 10, 't': 87},\n        'showactive': False,\n        'type': 'buttons',\n        'x': 0.1,\n        'xanchor': 'right',\n        'y': 0,\n        'yanchor': 'top'\n    }\n]\n\nsliders_dict = {\n    'active': 0,\n    'yanchor': 'top',\n    'xanchor': 'left',\n    'currentvalue': {\n        'font': {'size': 20},\n        'prefix': 'Year:',\n        'visible': True,\n        'xanchor': 'right'\n    },\n    'transition': {'duration': 300, 'easing': 'cubic-in-out'},\n    'pad': {'b': 10, 't': 50},\n    'len': 0.9,\n    'x': 0.1,\n    'y': 0,\n    'steps': []\n}\n\n# make data\nyear = 1950\nfor shp in shapes:\n    dataset_by_year = dataset[dataset['year'] == year]\n    dataset_by_year_and_cont = dataset_by_year[dataset_by_year['shape'] == shp]    \n    data_dict = dict(\n        type = 'scattergeo',\n        lon = dataset['longitude'],\n        lat = dataset['latitude'],\n        hoverinfo = 'text',\n        text = shp,\n        mode = 'markers',\n        marker = dict(\n            sizemode = 'area',\n            sizeref = 1,\n            size = 10 ,\n            line = dict(width = 1, color = \"white\"),\n            color = custom_colors[shp],\n            opacity = 0.7),\n)\n    figure['data'].append(data_dict)\n    \n# make frames\nfor year in years:\n    frame = {'data': [], 'name': str(year)}\n    for shp in  shapes:\n        dataset_by_year = dataset[dataset['year'] == int(year)]\n        dataset_by_year_and_cont = dataset_by_year[dataset_by_year['shape'] == shp]\n        data_dict = dict(\n            type = 'scattergeo', \n            lon = dataset_by_year_and_cont['longitude'],\n            lat = dataset_by_year_and_cont['latitude'],\n            hoverinfo = 'text',\n            text = shp,\n            mode = 'markers',\n            marker = dict(\n                sizemode = 'area',\n                sizeref = 1,\n                size= 10 ,\n                line = dict(width = 1,color = \"white\"),\n                color = custom_colors[shp],\n                opacity = 0.7),\n                name = shp\n        )\n        frame['data'].append(data_dict)\n\n    figure['frames'].append(frame)\n    slider_step = {'args': [[year], {'frame': {'duration': 300, 'redraw': False}, 'mode': 'immediate', 'transition': {'duration': 300}}], \n                   'label': year, \n                   'method': 'animate'}\n    sliders_dict['steps'].append(slider_step)\n\nfigure[\"layout\"][\"autosize\"] = True\nfigure[\"layout\"][\"title\"] = \"UFO Sightings - Shapes\"       \nfigure['layout']['sliders'] = [sliders_dict]\niplot(figure)    ","5a3a26c7":"<a id=\"2\"><\/a> \n**UFO Sightings By Countries Between 2011 - 2014 - Map Plot**","a30e1b2b":"<a id=\"1\"><\/a> \n**Loading Data and checking features**","bae0d28d":"<a id=\"3\"><\/a> \n**UFO Sightings by shapes - Animation Plot**","7869c7c3":"* Data Preparation","a1662529":"# UFO Sightings Data Exploration\nMap and animated plots will be used for UFO sightings visualization. This is an example of ploty library usage.\n\n## Index of contents\n* [Loading Data and checking features](#1)\n* [UFO Sightings by countries - Map Plot](#2)\n* [UFO Sightings by shapes - Animation Plot](#3)"}}