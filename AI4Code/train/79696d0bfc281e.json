{"cell_type":{"704ce9ed":"code","c881c466":"code","99b8bc6d":"code","6e5c734a":"code","ac2e9690":"code","bc124199":"code","e40f6da3":"code","1830c84e":"code","2c44a507":"code","248e7881":"code","0d46c0cf":"code","64dd781d":"code","ec0a446a":"code","b034f770":"code","7d763ba5":"code","38efe49e":"code","e4e631bb":"code","87089ad0":"code","63bf9673":"code","d999f0bf":"code","c13cd105":"code","a8d95bf0":"code","39e954cb":"code","c59da4cd":"code","00cb08b2":"code","1436dd44":"code","194b1ddf":"code","a5af1f5a":"code","2ec86ccc":"code","56b48326":"code","4bb6c769":"code","1e6b8d8f":"code","a703bd4f":"code","6520d614":"code","cd23f231":"code","f02118ea":"code","a936a78d":"markdown","13ac1661":"markdown","59346170":"markdown","374e96ef":"markdown","2e02dc52":"markdown","91053029":"markdown","a1053aa0":"markdown","80830f01":"markdown","6f4a7d14":"markdown","fcf4a1a4":"markdown","6cf585c4":"markdown","bfec8ca4":"markdown"},"source":{"704ce9ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c881c466":"# import libraries\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","99b8bc6d":"# read train and test data\ntrain_file = \"\/kaggle\/input\/titanic\/train.csv\"\ntest_file = \"\/kaggle\/input\/titanic\/test.csv\"\ntrain = pd.read_csv(train_file)\ntest = pd.read_csv(test_file)\ntest.head()","6e5c734a":"# gender_submission.csv assumes that all female passengers survived and all male passengers died, \n# check if the above assumption is true.\nfemale_survival_rate = train[train.Sex == \"female\"].Survived.value_counts(normalize=True)[1] #female's survival rate is around 74%. \nmale_survival_rate = train[train.Sex == \"male\"].Survived.value_counts(normalize=True)[1] #female's survival rate is around 19%.\nprint(\"Female: {:0.2f}, Male: {:0.2f}\".format(female_survival_rate, male_survival_rate))\nprint(\"The above assumption is not true, but gender does have a big impact on the survival rate.\")","ac2e9690":"train.shape","bc124199":"train.info()","e40f6da3":"train.describe()","1830c84e":"train.isnull().sum()","2c44a507":"male_p = (train.Sex== \"male\").sum()\nfemale_p = (train.Sex== \"female\").sum()\nplt.pie([male_p, female_p], labels=[\"Male\", \"Female\"], startangle=90, autopct=\"%.2f\")\nplt.title(\"Ratio of Male\/Female passengers\")\nplt.show()","248e7881":"# Find categorical columns\ndef cate_columns(df):\n    result = []\n    for col in df.columns:\n        if df[col].nunique() < 15:\n            result.append(col)\n    return result\n\ncate_cols = cate_columns(train)\nprint(cate_cols)\n# visuliase categorical columns\n# Survival rate in each category\nplt.figure(figsize = (10, 10))\nplotnumber = 1\nfor col in cate_cols[1:]:\n    ax = plt.subplot(len(cate_cols)\/\/3+1, 3, plotnumber)\n    sns.barplot(x=col, y=\"Survived\", data=train)\n    plt.ylabel(\"Survived\", fontsize = 12)\n    plotnumber += 1\n\nplt.show()","0d46c0cf":"plt.figure()\nfig = train.groupby('Survived')['Pclass'].plot.hist(histtype= 'bar', alpha = 0.8)\nplt.legend(('Died','Survived'), fontsize = 12)\nplt.xlabel('Pclass', fontsize = 14)\nplt.show()","64dd781d":"sns.factorplot(x ='Parch', y ='SibSp', \n               hue = 'Survived', data = train)","ec0a446a":"# visuliase numerical columns\ntrain.loc[:, \"Age\"].hist()\nplt.show()","b034f770":"# visuliase numerical columns\nsns.set_style(\"ticks\")\ng = sns.FacetGrid(train, col=\"Survived\")\ng.map(sns.kdeplot, \"Age\")\nplt.show()","7d763ba5":"# visuliase numerical columns\nsns.set_style(\"ticks\")\ng = sns.FacetGrid(train, col=\"Survived\")\ng.map(plt.hist, \"Fare\")\nplt.show()","38efe49e":"# visuliase numerical columns\nsns.scatterplot(x=\"Age\", y=\"Fare\", data=train, hue=\"Survived\")\nplt.show()","e4e631bb":"sns.boxplot(x=\"Survived\", y=\"Fare\", data=train) # there are outliers in Fare column and the date is skewed.","87089ad0":"sns.pairplot(train, vars = ['Age', 'Fare'], hue=\"Survived\")\nplt.show()","63bf9673":"# drop features\ntrain.drop([\"Name\", \"Ticket\", \"Cabin\"], axis=1, inplace=True)\ntest.drop([\"Name\", \"Ticket\", \"Cabin\"], axis=1, inplace=True)","d999f0bf":"# Drop two missing values in Embarked column in training set\ntrain.dropna(subset = [\"Embarked\"], inplace=True)\n","c13cd105":"# check realationship between Pcalss and Fare\nsns.boxplot(x=\"Pclass\", y=\"Fare\", data=train)","a8d95bf0":"###### Fare column in Train Data ###### \n# Replace Fare == 0 to mean fare of each Pclass\nfare_per_class = train.groupby(\"Pclass\").mean()[\"Fare\"]\ntrain[(train.Pclass == 1) & (train.Fare==0)] = train[(train.Pclass == 1) & (train.Fare==0)].replace(to_replace= {\"Fare\": {0.0 : fare_per_class[1]}})\ntrain[(train.Pclass == 2) & (train.Fare==0)] = train[(train.Pclass == 2) & (train.Fare==0)].replace(to_replace= {\"Fare\": {0.0 : fare_per_class[2]}})\ntrain[(train.Pclass == 3) & (train.Fare==0)] = train[(train.Pclass == 3) & (train.Fare==0)].replace(to_replace= {\"Fare\": {0.0 : fare_per_class[3]}})","39e954cb":"# remove outliers\nmax_fare_inds = list(train[train.Fare == train.Fare.max()].index)\ntrain.drop(max_fare_inds, inplace=True)","c59da4cd":"# convert Sex into categorical value 0 for male and 1 for female and assign it to Gender column\ntrain[\"Gender\"] = train[\"Sex\"].map({\"male\": 0, \"female\":1})\n\n# Replace missging Age values based on other columns\n# check correlation between different variables\nmatrix = train[['Age','Pclass', 'Gender', 'SibSp','Parch']].corr()\nmask = np.triu(np.ones_like(matrix, dtype=bool))\ncmap = sns.diverging_palette(220, 25, s=80, n=9, as_cmap=True, center=\"light\")\nplt.figure(figsize=(8, 6))\nsns.heatmap(matrix, mask = mask, annot=True, cmap=cmap, square=True, fmt='.2f',linewidth=.2, center=0, vmin=-0.15, vmax=0.55)\nplt.show()","00cb08b2":"###### Age column in Train Data ###### \n# Fill Age with the median age of similar rows according to Pclass, Parch and SibSp\n# Rows that have nan values in the Age column\nage_nan_inds = list(train[train.Age.isnull()].index)\n\nfor i in age_nan_inds:\n    age_median = train.Age.median()\n    age_median_by_group = train[(train.Pclass == train.loc[i, \"Pclass\"]) & (train.Parch == train.loc[i, \"Parch\"])  & (train.SibSp == train.loc[i, \"SibSp\"])][\"Age\"].median()\n    if not np.isnan(age_median_by_group):\n        train.loc[i, \"Age\"] = age_median_by_group\n    else:\n        train.loc[i, \"Age\"] = age_median\n\n###### Age column in Train Data ###### \n# Fill Age with the median age of similar rows according to Pclass, Parch and SibSp\n# Rows that have nan values in the Age column\nage_nan_inds_test = list(test[test.Age.isnull()].index)\n\nfor i in age_nan_inds_test:\n    age_median_test = test.Age.median()\n    age_median_by_group_test = test[(test.Pclass == test.loc[i, \"Pclass\"]) & (test.Parch == test.loc[i, \"Parch\"])  & (test.SibSp == test.loc[i, \"SibSp\"])][\"Age\"].median()\n    if not np.isnan(age_median_by_group_test):\n        test.loc[i, \"Age\"] = age_median_by_group_test\n    else:\n        test.loc[i, \"Age\"] = age_median_test","1436dd44":"train[\"Fsize\"] = (train.SibSp + train.Parch + 1) \ntest[\"Fsize\"] = (test.SibSp + test.Parch + 1)\nprint(test.Fsize.unique(), train.Fsize.unique())\n\n\ntemp = train.groupby(\"Fsize\").mean()\ntemp.loc[:, [\"Survived\", \"Fare\"]]\n\ng = sns.factorplot(x=\"Fsize\",y=\"Survived\",data = train)\ng.set_ylabels(\"Probability of Survival\")\nplt.show()","194b1ddf":"print(train.shape)\nprint(test.shape)","a5af1f5a":"from sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, plot_confusion_matrix, plot_roc_curve, confusion_matrix, classification_report","2ec86ccc":"train.head()","56b48326":"train.columns","4bb6c769":"X = train.loc[:, ['Pclass', 'Sex', 'Age', 'Fsize', 'Fare', 'Embarked']]\ny = train.Survived\n","1e6b8d8f":"# Encoding categorical columns\ncolumn_trans = make_column_transformer((OneHotEncoder(sparse=False, drop='first'), [\"Sex\",\"Embarked\"]), remainder='passthrough')\n\n# Build a simple logistic regression model\n#classifier = LogisticRegression(solver='lbfgs')\n#classifier = SVC()\nclassifier = RandomForestClassifier(n_estimators=100,max_depth=5)\n# Make a pipeline\npipe = make_pipeline(column_trans, classifier)","a703bd4f":"#fit and predict\npipe.fit(X, y)\n","6520d614":"# Replace null value in the Fare column to mean fare from the same Pclass\nfare_per_class_test = test.groupby(\"Pclass\").mean()[\"Fare\"]\ntest[(test.Pclass == 3) & (test.Fare.isnull())] = test[(test.Pclass == 3) & (test.Fare.isnull())].replace(to_replace= {\"Fare\": {np.nan : fare_per_class[3]}})\n\n# Predictions\npredictions = pipe.predict(test.loc[:, ['Pclass', 'Sex', 'Age', 'Fsize', 'Fare', 'Embarked']])","cd23f231":"# cv score\ncross_val_score(pipe, X, y, cv=5, scoring=\"accuracy\").mean()","f02118ea":"# # output my prediction to a csv file\noutput = pd.DataFrame({'PassengerId': test.PassengerId[test.Fare.notna()], 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","a936a78d":"##### 2.3.2 Fix Fare column","13ac1661":"#### 2.3 Fix missing values and zero values\n* Age has 177 missing values. Since Age is relevant to survival rate, imputing the Age column.\n* Fare has zero values. Since fare is a relevant factor to the survival rate, imputing the zero values.\n* Cabin has 687 values. Since it has too many missing values, drop this column.\n* Embarked has two missing values, drop two rows.","59346170":"##### 2.3.3 Fix Age Column","374e96ef":"### Step1: Import data and libraries","2e02dc52":"#### 2.2 EDA Visulisation","91053029":"### Step3 : Build models","a1053aa0":"### Step4: Output","80830f01":"##### 2.3.4 Feature engineering","6f4a7d14":"### Step2: EDA","fcf4a1a4":"##### 2.3.1 Drop columns\n* If columns have too many missing values or not relevant to survival rate, drop columns.","6cf585c4":"##### Age is not correlated with Sex, but is negatively correlated with Pclass, Parch and SibSp.","bfec8ca4":"#### 2.1 Basic EDA"}}