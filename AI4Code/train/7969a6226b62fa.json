{"cell_type":{"b4c49f44":"code","1c013ed0":"code","97081b15":"code","11ffa2f8":"code","91e7892a":"code","59fdf68a":"code","0cc321ed":"code","2672dcfe":"code","670af087":"code","2269462f":"code","c8b0de6c":"code","b9e276f0":"code","5a54cc7c":"code","9c7a0679":"code","1d880b92":"code","8266210b":"code","1e494217":"code","d487deb0":"code","81c138a7":"code","b9e1b5e4":"code","2994f7e8":"code","246e7c96":"code","23a7075c":"code","9519efb9":"code","2f640937":"code","1a66b4c5":"code","d8a55070":"code","20ef6297":"code","a5e254d4":"code","37e87175":"code","cb45aeb7":"code","0e3ff66f":"code","ff02b974":"code","d34bb785":"code","8b35ac27":"code","4f9a5357":"code","44c2e1ee":"code","7205b6f2":"code","124ac9f3":"code","2a79818a":"code","57d4cef6":"markdown","b872dd62":"markdown","9bb3cf27":"markdown","c78ea5f0":"markdown","9a68e04c":"markdown","4724faf7":"markdown","17a16cfc":"markdown","805c5dd0":"markdown","e69a7769":"markdown","57d2f0c4":"markdown","6a908a66":"markdown","f4fbcb32":"markdown","90f1fbf3":"markdown","ae2e47b0":"markdown","dc8a3020":"markdown","9d526387":"markdown","4b837639":"markdown","3e4f6696":"markdown","b0231d75":"markdown","f7730190":"markdown","a4176e5b":"markdown","c9c55034":"markdown","db01caa1":"markdown","ef7a37c8":"markdown"},"source":{"b4c49f44":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import rcParams\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score\n\n%matplotlib inline\nrcParams['figure.figsize'] = 10,8\nsns.set(style='whitegrid', palette='muted',\n        rc={'figure.figsize': (15,10)})\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n# print(os.listdir(\"..\/input\"))","1c013ed0":"print(os.listdir(\"..\/input\/titanic-cleaned-data\"))","97081b15":"# Load data as Pandas dataframe\ntrain = pd.read_csv('..\/input\/titanic-cleaned-data\/train_clean.csv', )\ntest = pd.read_csv('..\/input\/titanic-cleaned-data\/test_clean.csv')\ndf = pd.concat([train, test], axis=0, sort=True)","11ffa2f8":"df.head()","91e7892a":"def display_all(df):\n    with pd.option_context(\"display.max_rows\", 1000, \"display.max_columns\", 1000): \n        display(df)\n\n        \ndisplay_all(df.describe(include='all').T)","59fdf68a":"df['Survived'].value_counts()","0cc321ed":"sns.countplot(x='Pclass', data=df, palette='hls', hue='Survived')\nplt.xticks(rotation=45)\nplt.show()","2672dcfe":"sns.countplot(x='Sex', data=df, palette='hls', hue='Survived')\nplt.xticks(rotation=45)\nplt.show()","670af087":"sns.countplot(x='Embarked', data=df, palette='hls', hue='Survived')\nplt.xticks(rotation=45)\nplt.show()","2269462f":"# convert to category dtype\ndf['Sex'] = df['Sex'].astype('category')\n# convert to category codes\ndf['Sex'] = df['Sex'].cat.codes","c8b0de6c":"# subset all categorical variables which need to be encoded\ncategorical = ['Embarked', 'Title']\n\nfor var in categorical:\n    df = pd.concat([df, \n                    pd.get_dummies(df[var], prefix=var)], axis=1)\n    del df[var]","b9e276f0":"# drop the variables we won't be using\ndf.drop(['Cabin', 'Name', 'Ticket', 'PassengerId'], axis=1, inplace=True)","5a54cc7c":"df.head()","9c7a0679":"train = df[pd.notnull(df['Survived'])]\nX_test = df[pd.isnull(df['Survived'])].drop(['Survived'], axis=1)","1d880b92":"X_train, X_val, y_train, y_val = train_test_split(\n    train.drop(['Survived'], axis=1),\n    train['Survived'],\n    test_size=0.2, random_state=42)","8266210b":"for i in [X_train, X_val, X_test]:\n    print(i.shape)","1e494217":"rf = RandomForestClassifier(random_state=42)","d487deb0":"rf.fit(X_train, y_train)","81c138a7":"accuracy_score(y_val, rf.predict(X_val))","b9e1b5e4":"X_train = pd.concat([X_train, X_val])\ny_train = pd.concat([y_train, y_val])","2994f7e8":"X_train.shape","246e7c96":"rf = RandomForestClassifier(n_estimators=10, random_state=42)\ncross_val_score(rf, X_train, y_train, cv=5)","23a7075c":"cross_val_score(rf, X_train, y_train, cv=5).mean()","9519efb9":"# help(RandomForestClassifier)","2f640937":"# create the grid\nn_estimators = [10, 100, 1000, 2000]\nmax_depth = [None, 5, 10, 20]\nparam_grid = dict(n_estimators=n_estimators, max_depth=max_depth)","1a66b4c5":"# create the default model\nrf = RandomForestClassifier(random_state=42)\n\n# search the grid\ngrid = GridSearchCV(estimator=rf, \n                    param_grid=param_grid,\n                    cv=3,\n                    verbose=2,\n                    n_jobs=-1)\n\ngrid_result = grid.fit(X_train, y_train)","d8a55070":"grid_result.best_estimator_","20ef6297":"grid_result.best_params_","a5e254d4":"grid_result.best_score_","37e87175":"# summarize results\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))","cb45aeb7":"# create the grid\nleaf_samples = [1, 2, 3, 4, 5, 6]\nparam_grid = dict(min_samples_leaf=leaf_samples)\n\n# create the model with new max_depth and n_estimators\nrf = grid_result.best_estimator_\n\n# search the grid\ngrid = GridSearchCV(estimator=rf, \n                    param_grid=param_grid,\n                    cv=3,\n                    verbose=2,\n                    n_jobs=-1)\n\ngrid_result = grid.fit(X_train, y_train)","0e3ff66f":"# summarize results\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))","ff02b974":"# create the grid\nmax_features = [5, 8, 10, 12, None]\nbootstrap = [True, False]\nparam_grid = dict(max_features=max_features, bootstrap=bootstrap)\n\n# create the model with new leaf size\nrf = grid_result.best_estimator_\n\n# search the grid\ngrid = GridSearchCV(estimator=rf, \n                    param_grid=param_grid,\n                    cv=3,\n                    verbose=2,\n                    n_jobs=-1)\n\ngrid_result = grid.fit(X_train, y_train)","d34bb785":"# summarize results\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))","8b35ac27":"rf = grid_result.best_estimator_","4f9a5357":"# test our CV score\ncross_val_score(rf, X_train, y_train, cv=5).mean()","44c2e1ee":"test['Survived'] = rf.predict(X_test)","7205b6f2":"solution = test[['PassengerId', 'Survived']]\nsolution['Survived'] = solution['Survived'].apply(int)","124ac9f3":"solution.head(10)","2a79818a":"solution.to_csv(\"Random_Forest_Solution.csv\", index=False)","57d4cef6":"# Table of Contents:\n\n- **1. [Load packages and data](#loading)**\n- **2. [Pre-processing](#pre-processing)**\n- **3. [Random Forest](#random-forest)**\n  - **3.1. [Train\/test split](#train-test)**\n  - **3.2. [Cross-validation](#cv)**\n  - **3.3. [Grid search](#grid-search)**\n- **4. [Submit predictions](#submission)**","b872dd62":"Here, our CV score is slightly lower than our previous single validation score. Taking a look at the scores for each of the folds, the score does seem to vary slightly.   \n\nCross-validation has the added advantage of being a more robust measure of model accuracy than single validation.   \n> Note: the method we used initially is actually just 1-fold cross-validation","9bb3cf27":"<a id=\"grid-search\"><\/a>\n## 3.3. Hyperparameter tuning\nOur first model didn't do too badly! It scored over 80% on the CV score. However, we didn't put any thought into our choice of hyperparameters, we simply went with the defaults.   \n\nTake a look at the various parameters by using the `help()` function:","c78ea5f0":"<a id=\"loading\"><\/a>\n# 1. Load packages and data\nWe will be using the train and test sets that we created in [part 1](https:\/\/www.kaggle.com\/jamesleslie\/titanic-eda-wrangling-imputation\/notebook) of this series.   \n\nYou can find the dataset [here](https:\/\/www.kaggle.com\/jamesleslie\/titanic-cleaned-data).","9a68e04c":"### Create Random Forest model\nWe will first make a random forest model, using all of the default parameters.   \n> Note: set the `random_state` to 42 for reproducibility","4724faf7":"Now we have all of training data again. Let's fit a model to it, and assess its accuracy using 5-fold cross-validation:","17a16cfc":"### 3.2.1. Number of estimators and max depth\nWe will start by tuning the `n_estimators` (number of trees in the forest) and the `max_depth` (how deep each tree grows) parameters.   \n\nThe first step that we need to do is to define the grid of parameters over which to search:","805c5dd0":"<a id=\"random-forest\"><\/a>\n# 3. Random Forest\nNow, all that is left is to feed our data that has been cleaned, encoded and scaled to a random forest.    \n<a id=\"train-test\"><\/a>\n## 3.1. Train\/test split\nBut first, we need to separate *data_df* back into *train* and *test* sets.","e69a7769":"<a id=\"pre-processing\"><\/a>\n# 2. Encode categorical variables\nWe need to convert all categorical variables into numeric format. The categorical variables we will be keeping are `Embarked`, `Sex` and `Title`.   \n\nThe `Sex` variable can be encoded into single 1-or-0 column, but the other variables will need to be [one-hot encoded](https:\/\/hackernoon.com\/what-is-one-hot-encoding-why-and-when-do-you-have-to-use-it-e3c6186d008f). Regular label encoding assigns some category labels higher numerical values. This implies some sort of scale (Embarked = 1 is not **more** than Embarked = 0 - it's just _different_). One Hot Encoding avoids this problem.   \n\nWe will assume that there is some ordinality in the `Pclass` variable, so we will leave that as a single column.","57d2f0c4":"<a id=\"submission\"><\/a>\n## 4. Make Predictions on Test Set\nFinally, we can attempt to predict which passengers in the test set survived.","6a908a66":"It is hard to know the best values for each of these hyperparameters without first _trying_ them out. If we wanted to know the best value for the `n_estimators` parameter, we could fit a few models, each with a different value, and see which one tests the best.   \n\n**Grid search** allows us to do this for multiple parameters simultaneously. We will select a few different parameters that we want to tune, and for each one we will provide a few different values to try out. Then grid search will fit models to every possible combination of these parameter values and use **cross-validation** to assess the performance in each case.   \n\nFurthermore, since we are using CV, we don't need to keep a separate validation set.","f4fbcb32":"But let's take a look at all of the models so we can make a more informed decision","90f1fbf3":"### Test model","ae2e47b0":"# Titanic challenge part 2\nIn this kernel, we will be covering all of the steps required to train, tune and assess a random forest model. \n\n[**Part 1**](https:\/\/www.kaggle.com\/jamesleslie\/titanic-eda-wrangling-imputation\/notebook) of this series dealt with the pre-processing and manipulation of the data. This notebook will make use of the data sets that were created in the first part.   \n\nWe will do each of the following:\n  - train and test default RF model\n  - introduce cross-validation for model training\n  - use grid search to optimize hyperparameters\n  - submit our predictions for the test set\n  \n[**Part 3**](https:\/\/www.kaggle.com\/jamesleslie\/titanic-neural-network-for-beginners\/notebook) of this challenge involves fitting and tuning a **neural network** to make predictions.","dc8a3020":"Or just the best parameters:","9d526387":"## Output Final Predictions","4b837639":"We have set out a total of $4 \\times 4 = 16$ models over which to search. Grid search uses cross-validation on each of the models, so if we use 3-folds cross-validation, that will leave us with 48 different fits to try out. (You can see how the number of fits can grow pretty quickly as we increase the number of parameters!)   \n\nThe good news is that SkLearn's grid search allows us to run the job in parallel. Including the `n_jobs=-1` argument below let's grid search run on all of the available cores on the host machine.","3e4f6696":"Or the best score:","b0231d75":"### 3.2.3. To bag or not to bag\nBootstrap aggregating (or bagging) is a special case of the random forest where we bootstrap (sample with replacement) from the n training obersvations to create a new training set of size n for each tree. Furthermore, each tree considers all variables when making each split.   \n\nWe can use grid search to determine if bootstrapping will be an appropriate method to use.","f7730190":"### 3.2.2. Leaf size\nThe `min_samples_leaf` argument controls the size of the leaves in the trees.   \n\nWe will set out the grid in a similar manner as before, only this time we will use the `max_depth` and `n_estimators` parameters that we found above.","a4176e5b":"Now let's take a look at the results of the grid search.   \n\nWe can get the best performing model directly from `grid_result`:","c9c55034":"### Train model\nNow, let's train the model on our training set.","db01caa1":"<a id=\"cv\"><\/a>\n## 3.2. Cross-validation\nKeeping a separate validation set means that we have less data on which to train our model. Cross-validation allows us to train our model on _all_ of the data, while still assessing its performance on unseen data.\n\nK-folds cross validation is the process of creating *k* different train\/validate splits in the data and training the model *k* times.\n\n![CV](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/1\/1c\/K-fold_cross_validation_EN.jpg)   \n\nIn the image above, k=4. This means that the model will be trained 4 times, each time using 1\/4 of the data for validation. In this way, each of the four 'folds' takes one turn sitting out from training and is used as the validation set.   \n\nLet's combine our train and validation sets back into one training set, and then use cross-validation to assess our model:","ef7a37c8":"### Validation set\nSince we can't use our test set to assess our model (it doesn't have any labels), we will create a separte 'validation set'. We will use this set to test how our model generalises to unseen data."}}