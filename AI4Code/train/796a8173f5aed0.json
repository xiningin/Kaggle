{"cell_type":{"30e50691":"code","cbe40ce3":"code","46352ead":"code","94f1ae79":"code","3d9ba525":"code","47a8f16e":"code","7255f4f5":"code","3b925f4e":"code","e5143fea":"code","bf08cd0a":"code","91f8e866":"code","6d521693":"code","7a8aae1d":"code","a3d38c97":"code","9368b4b1":"code","fa4e0292":"code","ccd23fc8":"code","c7f6d873":"code","cb8154b4":"code","f3150b18":"code","695758c1":"code","db11a7fe":"code","aeb3bcd9":"code","33d0e57b":"code","a4eb155a":"code","8cc0af1a":"code","d8be81e7":"code","8f214095":"code","452d470a":"code","d4ffeb38":"code","40e1a7e3":"code","43b505ae":"code","af49b6f2":"code","aa36c2ed":"code","a9b26958":"code","841237c6":"code","f4dfed16":"code","e753c220":"code","8c55f1de":"code","79bfa64c":"code","d561f496":"code","311e11dd":"code","f615cb0d":"code","8d429061":"code","9c6b728c":"code","91390daf":"code","47e10cdd":"code","06895aba":"code","e7edcf2a":"code","8b46bb96":"code","48a7f4e9":"code","23e4fdee":"code","2632a290":"code","572b5306":"code","e31b5599":"code","15e2fe31":"code","bc6cfe37":"code","3136a1a8":"code","1af9696f":"code","e499e6e8":"code","baf21b83":"code","0505ce03":"code","646a3eca":"code","b4e5ffa8":"code","0816a259":"code","04215a61":"code","a98e7d9d":"code","4ea8baea":"code","033efee8":"code","1d42c90e":"code","27e63e5c":"code","09ca6199":"code","ab9dc296":"code","bad1c6b3":"code","9090a301":"code","c5c224c5":"code","41938210":"markdown","83b6a4b6":"markdown","50b29cfe":"markdown","d9a901eb":"markdown","b0d1fe2b":"markdown","d5ac2717":"markdown","b8bdc8bf":"markdown","b90f7009":"markdown","e24d78d3":"markdown","00bdcd7d":"markdown","f5c21d95":"markdown","35a7cce6":"markdown","59457ce6":"markdown","941e8a9a":"markdown","b4429060":"markdown","e4e47873":"markdown","6512147b":"markdown","624676f5":"markdown","df79b6d8":"markdown","b0d0a60d":"markdown","0f616dee":"markdown","60f397fb":"markdown","fbc7f9b0":"markdown","fd07f62e":"markdown","a229a611":"markdown","2fdecb94":"markdown","d9d5191a":"markdown","2c21a2d7":"markdown","25ff4740":"markdown","213a6f78":"markdown","cd9ea287":"markdown","6671c0b9":"markdown","413f444f":"markdown","00d63dc3":"markdown","368d44d5":"markdown","55497e5e":"markdown","6c446bc2":"markdown","a897fb38":"markdown","8e85214a":"markdown","97217c67":"markdown","b6018010":"markdown","70d715f3":"markdown","1e745919":"markdown"},"source":{"30e50691":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.cluster import KMeans\nimport plotly.express as px\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import Ridge\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.cluster import KMeans\nimport folium\nimport plotly.graph_objects as go\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nmms = MinMaxScaler()","cbe40ce3":"cluster_data = pd.read_csv(\"..\/input\/covid19-useful-features-by-country\/Countries_usefulFeatures.csv\")\ndata = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/train.csv\")\ndata2 = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-5\/train.csv\")\ncountry_geo = \"..\/input\/world-countries\/world-countries.json\"\nfd_i = pd.read_csv(\"..\/input\/the-human-freedom-index\/hfi_cc_2019.csv\")\n\ntesting = pd.read_csv(\"..\/input\/covid19testing\/tested_worldwide.csv\")\n","46352ead":"max_d_test=testing.groupby([\"Country_Region\"]).agg({\"daily_tested\":\"max\"}).reset_index()","94f1ae79":"r = {\n     'Czech Republic': 'Czechia',\n     'DR Congo': 'Congo (Brazzaville)',\n     'Democratic Republic of the Congo': 'Congo (Kinshasa)',\n     'Ivory Coast': \"Cote d'Ivoire\",\n     'Palestine': 'West Bank and Gaza',\n     'South Korea': 'Korea, South',\n     'Taiwan': 'Taiwan*',\n     'United States': 'US',\n    }","3d9ba525":"max_d_test.Country_Region=max_d_test.Country_Region.replace(to_replace=r)","47a8f16e":"fd_i = fd_i[fd_i.year==2017]\nfd_i = fd_i[[\"ISO_code\",\"pf_score\",\"hf_score\"]]","7255f4f5":"cluster_data.columns","3b925f4e":"data.head()","e5143fea":"cluster_data.head()","bf08cd0a":"data_to_cluster = cluster_data.copy()","91f8e866":"data_to_cluster = data_to_cluster[[\"Country_Region\",\"Population_Size\",\"Tourism\",\"Date_FirstFatality\",\"Date_FirstConfirmedCase\",\"Latitude\",\"Longtitude\",\"Mean_Age\"]]","6d521693":"data_to_cluster.isnull().sum()","7a8aae1d":"data_to_cluster.Date_FirstFatality.fillna(\"2222-11-11\",inplace=True)\ndata_to_cluster.Date_FirstFatality=pd.to_datetime(data_to_cluster.Date_FirstFatality)\ndata_to_cluster.Date_FirstFatality = data_to_cluster.Date_FirstFatality.astype(np.int64) \/\/ 10**9\ndata_to_cluster.Date_FirstConfirmedCase=pd.to_datetime(data_to_cluster.Date_FirstConfirmedCase)\ndata_to_cluster.Date_FirstConfirmedCase = data_to_cluster.Date_FirstConfirmedCase.astype(np.int64) \/\/ 10**9","a3d38c97":"data_to_cluster.drop([\"Country_Region\"],axis=1,inplace=True)","9368b4b1":"mms.fit(data_to_cluster)\ndata_transformed = mms.transform(data_to_cluster)","fa4e0292":"Sum_of_squared_distances = []\nK = range(1,90)\nfor k in K:\n    km = KMeans(n_clusters=k)\n    km = km.fit(data_transformed)\n    Sum_of_squared_distances.append(km.inertia_)","ccd23fc8":"import matplotlib.pyplot as plt\nplt.plot(K, Sum_of_squared_distances, 'bx-')\nplt.xlabel('k')\nplt.ylabel('Sum_of_squared_distances')\nplt.title('Optimal K')\nplt.show()\n","c7f6d873":"km = KMeans(n_clusters=55,random_state=1995)\nkm = km.fit(data_transformed)","cb8154b4":"cluster_data[\"cluster\"] = km.labels_","f3150b18":"data.drop(\"Province_State\",axis=1,inplace=True)","695758c1":"data = pd.merge(data,cluster_data,on='Country_Region',how=\"left\")","db11a7fe":"data.columns","aeb3bcd9":"temp_data = data.groupby([\"Country_Region\",\"Date\"]).agg({\"ConfirmedCases\":\"sum\",\"Fatalities\":\"sum\"}).reset_index()\ntemp_data.columns = [\"Country_Region\",\"Date\",\"ConfirmedCases_i\",\"Fatalities_i\"]\ndata.drop_duplicates([\"Country_Region\",\"Date\"],inplace=True)\ndata = pd.merge(data,temp_data,on=['Country_Region',\"Date\"],how=\"left\")\ndata.drop([\"ConfirmedCases\",\"Fatalities\"],axis=1,inplace=True)\ndata.rename(columns={\"ConfirmedCases_i\":\"ConfirmedCases\",\"Fatalities_i\":\"Fatalities\",\"clusters\":\"cluster\"},inplace=True)","33d0e57b":"data.Date_FirstFatality.fillna(\"2222-11-11\",inplace=True)","a4eb155a":"data.isnull().sum()","8cc0af1a":"data[\"Fatalities_rate\"]=(data.Fatalities * 100) \/ data.ConfirmedCases","d8be81e7":"data[\"diff_FC_LD\"]=(data.Lockdown_Date.astype('datetime64') - data.Date_FirstConfirmedCase.astype('datetime64'))","8f214095":"data[\"diff_FF_LD\"]=(data.Lockdown_Date.astype('datetime64') - data.Date_FirstFatality.astype('datetime64'))","452d470a":"tempd2=data2.loc[(data2.Target==\"ConfirmedCases\"),[\"Country_Region\",\"Weight\"]]","d4ffeb38":"tempd2[\"Weight_F\"] =  data2.loc[(data2.Target==\"Fatalities\"),[\"Weight\"]].values","40e1a7e3":"tempd2.columns = [\"Country_Region\",\"Weight_C\",\"Weight_F\"]","43b505ae":"tempd2=tempd2.drop_duplicates([\"Country_Region\"])","af49b6f2":"data = pd.merge(data,tempd2[[\"Country_Region\",\"Weight_C\",\"Weight_F\"]],on=['Country_Region'],how=\"left\")","aa36c2ed":"fd_i.columns = [\"Country_Code\",\"pf_score\",\"hf_score\"]","a9b26958":"data = pd.merge(data,max_d_test[[\"Country_Region\",\"daily_tested\"]],on=['Country_Region'],how=\"left\")","841237c6":"data=pd.merge(data,fd_i[[\"Country_Code\",\"pf_score\",\"hf_score\"]],on=['Country_Code'],how=\"left\")","f4dfed16":"data.daily_tested.fillna(data.loc[data.daily_tested>100,\"daily_tested\"].min(),inplace=True)","e753c220":"data.hf_score.fillna(data.hf_score.median(),inplace=True)\ndata.pf_score.fillna(data.pf_score.median(),inplace=True)","8c55f1de":"for i in data.cluster.unique()[:5]:\n    test_df2= data[[\"Country_Region\",\"Date\",\"ConfirmedCases\",\"cluster\"]]\n    test_df2=test_df2[ (test_df2.cluster==i) & (test_df2.Date > \"2020-03-02\") ]\n    fig = px.line(test_df2, x=\"Date\", y=\"ConfirmedCases\", color='Country_Region')\n    fig.show()","79bfa64c":"for i in data.cluster.unique()[:5]:\n    test_df2= data[[\"Country_Region\",\"Date\",\"Fatalities\",\"cluster\"]]\n    test_df2=test_df2[ (test_df2.cluster==i) & (test_df2.Date > \"2020-03-02\") ]\n    fig = px.line(test_df2, x=\"Date\", y=\"Fatalities\", color='Country_Region')\n    fig.show()","d561f496":"m_cluster=data[data.Country_Region == \"Morocco\"].cluster.unique()[0]\ntest_df2=data[ (data.cluster==m_cluster) & (data.Date > \"2020-03-05\") ]\nfig = px.line(test_df2, x=\"Date\", y=\"Fatalities\", color='Country_Region')\n\nfor i in test_df2.Country_Region.unique():\n    x=test_df2[test_df2.Country_Region == i].Lockdown_Date.unique()[0]\n    y=test_df2[(test_df2.Date == x) & (test_df2.Country_Region == i)].Fatalities.values\n\n    if (x is not np.NAN) & (len(y) >0) :\n        fig.add_trace(go.Scatter(x=[x], y=[int(y)],\n                        mode='markers',\n                        name=i+'-lockdown-'+test_df2[test_df2.Country_Region == i].Lockdown_Type.unique()[0],\n                        marker_symbol=\"x\",\n                        hoverinfo = 'text',\n                        text=i+\" Country lockdown Date \"+ x,\n                        marker = dict(\n                                 size=15,\n                                 color=\"black\"\n                             ),\n\n                        ))\n\nfig.show()","311e11dd":"m_cluster=data[data.Country_Region == \"Spain\"].cluster.unique()[0]\ntest_df2=data[ (data.cluster==m_cluster) & (data.Date > \"2020-03-05\") ]\nfig = px.line(test_df2, x=\"Date\", y=\"Fatalities\", color='Country_Region')\n\nfor i in test_df2.Country_Region.unique():\n    x=test_df2[test_df2.Country_Region == i].Lockdown_Date.unique()[0]\n    y=test_df2[(test_df2.Date == x) & (test_df2.Country_Region == i)].Fatalities.values\n\n    if (x is not np.NAN) & (len(y) >0) :\n        fig.add_trace(go.Scatter(x=[x], y=[int(y)],\n                        mode='markers',\n                        name=i+'-lockdown-'+test_df2[test_df2.Country_Region == i].Lockdown_Type.unique()[0],\n                        marker_symbol=\"x\",\n                        hoverinfo = 'text',\n                        text=i+\" Country lockdown Date \"+ x,\n                        marker = dict(\n                                 size=15,\n                                 color=\"black\"\n                             ),\n\n                        ))\n\nfig.show()","f615cb0d":"temp =data[(data.Date == max(data.Date)) ]","8d429061":"m = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=10, zoom_start=1.5)\n\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Latitude'], temp.iloc[i]['Longtitude']],\n        color='crimson', fill='crimson',\n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country_Region'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['ConfirmedCases'])+\n                    '<li><bold>Death_rate : '+str(temp.iloc[i]['Fatalities_rate'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Fatalities'])+\n                    '<li><bold>lockdown date : '+str(temp.iloc[i]['Lockdown_Date'])+\n                    '<li><bold>first case date : '+str(temp.iloc[i]['Date_FirstConfirmedCase'])+\n                    '<li><bold>mean age : '+str(temp.iloc[i]['Mean_Age'])\n        ,\n        radius=int(temp.iloc[i]['Fatalities_rate']*10000)).add_to(m)\n\nm","9c6b728c":"m = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=10, zoom_start=1.5)\n\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Latitude'], temp.iloc[i]['Longtitude']],\n        color='green', fill='green',\n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country_Region'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['ConfirmedCases'])+\n                    '<li><bold>Death_rate : '+str(temp.iloc[i]['Fatalities_rate'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Fatalities'])+\n                    '<li><bold>lockdown date : '+str(temp.iloc[i]['Lockdown_Date'])+\n                    '<li><bold>first case date : '+str(temp.iloc[i]['Date_FirstConfirmedCase'])+\n                    '<li><bold>mean age : '+str(temp.iloc[i]['Mean_Age'])\n        ,\n        radius=int(temp.iloc[i]['Mean_Age']*2500)).add_to(m)\n\nm","91390daf":"m = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=8, zoom_start=1.5)\n\nm.choropleth(geo_data=country_geo, data=temp,\n             columns=['Country_Code', 'Mean_Age'],\n             key_on='feature.id',\n             # 'BuGn', 'BuPu', 'GnBu', 'OrRd', 'PuBu', 'PuBuGn', 'PuRd', 'RdPu','YlGn', 'YlGnBu', 'YlOrBr', and 'YlOrRd'.\n             fill_color='RdPu', fill_opacity=0.7, line_opacity=0.1,\n             legend_name=\"Mean_Age\")\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Latitude'], temp.iloc[i]['Longtitude']],\n        color='crimson', fill='crimson',\n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country_Region'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['ConfirmedCases'])+\n                    '<li><bold>Death_rate : '+str(temp.iloc[i]['Fatalities_rate'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Fatalities'])+\n                    '<li><bold>lockdown date : '+str(temp.iloc[i]['Lockdown_Date'])+\n                    '<li><bold>first case date : '+str(temp.iloc[i]['Date_FirstConfirmedCase'])+\n                    '<li><bold>mean age : '+str(temp.iloc[i]['Mean_Age'])\n        ,\n        radius=int(temp.iloc[i]['Fatalities_rate']*10000)).add_to(m)\n\nm","47e10cdd":"m = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=10, zoom_start=1.5)\n\nm.choropleth(geo_data=country_geo, data=temp,\n             columns=['Country_Code', 'Tourism'],\n             key_on='feature.id',\n             # 'BuGn', 'BuPu', 'GnBu', 'OrRd', 'PuBu', 'PuBuGn', 'PuRd', 'RdPu','YlGn', 'YlGnBu', 'YlOrBr', and 'YlOrRd'.\n             fill_color='RdPu', fill_opacity=0.7, line_opacity=0.1,\n             legend_name=\"Tourism\",\n             threshold_scale=[14000.0,5000000, 20000000.0, 40000000.0, 60000000.0, 89322000.0]\n             )\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Latitude'], temp.iloc[i]['Longtitude']],\n        color='crimson', fill='crimson',\n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country_Region'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['ConfirmedCases'])+\n                    '<li><bold>Death_rate : '+str(round(temp.iloc[i]['Fatalities_rate'],2))+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Fatalities'])+\n                    '<li><bold>lockdown date : '+str(temp.iloc[i]['Lockdown_Date'])+\n                    '<li><bold>first case date : '+str(temp.iloc[i]['Date_FirstConfirmedCase'])+\n                    '<li><bold>mean age : '+str(temp.iloc[i]['Mean_Age'])+\n                    '<li><bold>Tourism : '+str(temp.iloc[i]['Tourism'])\n        ,\n        radius=int(temp.iloc[i]['Fatalities_rate']*10000)).add_to(m)\n\nm","06895aba":"temp.pf_score = temp.pf_score.astype(\"float\")\ntemp.hf_score = temp.hf_score.astype(\"float\")","e7edcf2a":"m = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=8, zoom_start=1.5)\n\nm.choropleth(geo_data=country_geo, data=temp,\n             columns=['Country_Code', 'pf_score'],\n             key_on='feature.id',\n             # 'BuGn', 'BuPu', 'GnBu', 'OrRd', 'PuBu', 'PuBuGn', 'PuRd', 'RdPu','YlGn', 'YlGnBu', 'YlOrBr', and 'YlOrRd'.\n             fill_color='RdPu', fill_opacity=0.7, line_opacity=0.1,\n             legend_name=\"pf_score\",\n             )\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Latitude'], temp.iloc[i]['Longtitude']],\n        color='crimson', fill='crimson',\n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country_Region'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['ConfirmedCases'])+\n                    '<li><bold>Death_rate : '+str(temp.iloc[i]['Fatalities_rate'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Fatalities'])+\n                    '<li><bold>lockdown date : '+str(temp.iloc[i]['Lockdown_Date'])+\n                    '<li><bold>first case date : '+str(temp.iloc[i]['Date_FirstConfirmedCase'])+\n                    '<li><bold>mean age : '+str(temp.iloc[i]['Mean_Age'])\n        ,\n        radius=int(temp.iloc[i]['Fatalities_rate']*10000)).add_to(m)\n\nm","8b46bb96":"m = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=8, zoom_start=1.5)\n\nm.choropleth(geo_data=country_geo, data=temp,\n             columns=['Country_Code', 'hf_score'],\n             key_on='feature.id',\n             # 'BuGn', 'BuPu', 'GnBu', 'OrRd', 'PuBu', 'PuBuGn', 'PuRd', 'RdPu','YlGn', 'YlGnBu', 'YlOrBr', and 'YlOrRd'.\n             fill_color='RdPu', fill_opacity=0.7, line_opacity=0.1,\n             legend_name=\"hf_score\")\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Latitude'], temp.iloc[i]['Longtitude']],\n        color='crimson', fill='crimson',\n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country_Region'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['ConfirmedCases'])+\n                    '<li><bold>Death_rate : '+str(temp.iloc[i]['Fatalities_rate'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Fatalities'])+\n                    '<li><bold>lockdown date : '+str(temp.iloc[i]['Lockdown_Date'])+\n                    '<li><bold>first case date : '+str(temp.iloc[i]['Date_FirstConfirmedCase'])+\n                    '<li><bold>mean age : '+str(temp.iloc[i]['Mean_Age'])\n        ,\n        radius=int(temp.iloc[i]['Fatalities_rate']*10000)).add_to(m)\n\nm","48a7f4e9":"temp.daily_tested = temp.daily_tested.astype(\"float\")","23e4fdee":"m = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=8, zoom_start=1.5)\n\nm.choropleth(geo_data=country_geo, data=temp,\n             columns=['Country_Code', 'daily_tested'],\n             key_on='feature.id',\n             # 'BuGn', 'BuPu', 'GnBu', 'OrRd', 'PuBu', 'PuBuGn', 'PuRd', 'RdPu','YlGn', 'YlGnBu', 'YlOrBr', and 'YlOrRd'.\n             fill_color='RdPu', fill_opacity=0.7, line_opacity=0.1,\n             legend_name=\"daily_tested\",\n             threshold_scale=[0.0, 1000, 5000.0, 10000.0,50000.0,100000.0, 318720.0]\n            )\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Latitude'], temp.iloc[i]['Longtitude']],\n        color='crimson', fill='crimson',\n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country_Region'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['ConfirmedCases'])+\n                    '<li><bold>Death_rate : '+str(temp.iloc[i]['Fatalities_rate'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Fatalities'])+\n                    '<li><bold>lockdown date : '+str(temp.iloc[i]['Lockdown_Date'])+\n                    '<li><bold>first case date : '+str(temp.iloc[i]['Date_FirstConfirmedCase'])+\n                    '<li><bold>mean age : '+str(temp.iloc[i]['Mean_Age'])\n        ,\n        radius=int(temp.iloc[i]['ConfirmedCases']*1.1)).add_to(m)\n\nm","2632a290":"temp.to_csv(\"temp.csv\",index=False)","572b5306":"temp.diff_FC_LD.replace({np.NAN:\"62\"},inplace=True)\ntemp.diff_FF_LD.replace({np.NAN:\"42\"},inplace=True)\ntemp.diff_FC_LD=temp.diff_FC_LD.astype(str)\ntemp.diff_FF_LD=temp.diff_FF_LD.astype(str)\ntemp.diff_FC_LD=temp.diff_FC_LD.str[:2]\ntemp.diff_FF_LD=temp.diff_FF_LD.str[:2]\ntemp.diff_FC_LD = temp.diff_FC_LD.astype(int)\ntemp.diff_FF_LD = temp.diff_FF_LD.astype(int)","e31b5599":"m = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=10, zoom_start=1.5)\n\nm.choropleth(geo_data=country_geo, data=temp,\n             columns=['Country_Code', 'diff_FC_LD'],\n             key_on='feature.id',\n             # 'BuGn', 'BuPu', 'GnBu', 'OrRd', 'PuBu', 'PuBuGn', 'PuRd', 'RdPu','YlGn', 'YlGnBu', 'YlOrBr', and 'YlOrRd'.\n             fill_color='RdPu', fill_opacity=0.7, line_opacity=0.1,\n             legend_name=\"FirstCaseConfirmed_diff_lockdown\"\n             )\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Latitude'], temp.iloc[i]['Longtitude']],\n        color='crimson', fill='crimson',\n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country_Region'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['ConfirmedCases'])+\n                    '<li><bold>Death_rate : '+str(round(temp.iloc[i]['Fatalities_rate'],2))+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Fatalities'])+\n                    '<li><bold>lockdown date : '+str(temp.iloc[i]['Lockdown_Date'])+\n                    '<li><bold>first case date : '+str(temp.iloc[i]['Date_FirstConfirmedCase'])+\n                    '<li><bold>mean age : '+str(temp.iloc[i]['Mean_Age'])+\n                    '<li><bold>Tourism : '+str(temp.iloc[i]['Tourism'])\n        ,\n        radius=int(temp.iloc[i]['Fatalities_rate']*10000)).add_to(m)\n\nm","15e2fe31":"data.pf_score = data.pf_score.astype(\"float\")\ndata.hf_score = data.hf_score.astype(\"float\")","bc6cfe37":"import seaborn as sns\ncorr = data.drop([\"Id\"],axis=1).corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nf, ax = plt.subplots(figsize=(8, 6))\n\nsns.heatmap(corr, \n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values,mask=mask,cmap='summer_r',vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": 0.5})\n","3136a1a8":"def feature_imp(df,model):\n    fi = pd.DataFrame()\n    fi[\"feature\"] = df.columns\n    fi[\"importance\"] = model.feature_importances_\n    return fi.sort_values(by=\"importance\", ascending=False)","1af9696f":"train = data.copy()","e499e6e8":"train.Date_FirstFatality.fillna(\"2222-11-11\",inplace=True)\ntrain.Date_FirstFatality=pd.to_datetime(train.Date_FirstFatality)\ntrain.Date_FirstFatality = train.Date_FirstFatality.astype(np.int64) \/\/ 10**9\n\ntrain.Date_FirstConfirmedCase=pd.to_datetime(train.Date_FirstConfirmedCase)\ntrain.Date_FirstConfirmedCase = train.Date_FirstConfirmedCase.astype(np.int64) \/\/ 10**9\n\ntrain.Date=pd.to_datetime(train.Date)\ntrain.Date = train.Date.astype(np.int64) \/\/ 10**9\n\ntrain.Lockdown_Date.fillna(\"2111-12-12\",inplace=True)\ntrain.Lockdown_Date=pd.to_datetime(train.Lockdown_Date)\ntrain.Lockdown_Date = train.Lockdown_Date.astype(np.int64) \/\/ 10**9\n\n\ntrain.Lockdown_Type = train.Lockdown_Type.astype(\"category\")\ntrain.Lockdown_Type = train.Lockdown_Type.cat.codes\n\ntrain.diff_FC_LD.replace({np.NAN:\"62\"},inplace=True)\ntrain.diff_FF_LD.replace({np.NAN:\"42\"},inplace=True)\ntrain.diff_FC_LD=train.diff_FC_LD.astype(str)\ntrain.diff_FF_LD=train.diff_FF_LD.astype(str)\ntrain.diff_FC_LD=train.diff_FC_LD.str[:2]\ntrain.diff_FF_LD=train.diff_FF_LD.str[:2]\ntrain.diff_FC_LD = train.diff_FC_LD.astype(int)\ntrain.diff_FF_LD = train.diff_FF_LD.astype(int)","baf21b83":"train = train[train.Date == max(train.Date)]","0505ce03":"rf = RandomForestRegressor(n_estimators = 1000,\n                           n_jobs = -1,\n                           random_state = 141)\nrf.fit(train.drop(['Country_Region',\"Id\",\"Fatalities\",\"ConfirmedCases\",\"Fatalities_rate\",\"Date\",\"Country_Code\",\"Date_FirstFatality\",\"Date_FirstConfirmedCase\",\"Lockdown_Date\"],axis=1), train[\"Fatalities\"])","646a3eca":"fimp = feature_imp(train.drop(['Country_Region',\"Id\",\"Fatalities\",\"ConfirmedCases\",\"Fatalities_rate\",\"Date\",\"Country_Code\",\"Date_FirstFatality\",\"Date_FirstConfirmedCase\",\"Lockdown_Date\"],axis=1),rf)","b4e5ffa8":"feature_imp(train.drop(['Country_Region',\"Id\",\"Fatalities\",\"ConfirmedCases\",\"Fatalities_rate\",\"Date\",\"Country_Code\",\"Date_FirstFatality\",\"Date_FirstConfirmedCase\",\"Lockdown_Date\"],axis=1),rf).plot('feature', 'importance', 'barh', figsize=(12,7), legend=False)","0816a259":"fig = px.scatter(data[(data.Tourism>100000) & (data.Date == max(data.Date)) ],\n                 x='Tourism', y='Fatalities', color='Country_Region', size='Mean_Age', height=700,\n                 text='Country_Region',log_x=True,log_y=True)\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","04215a61":"fig = px.scatter(data[(data.Population_Size>100000) & (data.Date == max(data.Date)) ],\n                 x='Population_Size', y='Fatalities', color='Country_Region', size='Mean_Age', height=700,\n                 text='Country_Region',log_x=True,log_y=True)\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","a98e7d9d":"fig = px.scatter(data[(data.Population_Size>100000) & (data.Date == max(data.Date)) ],\n                 x='Weight_F', y='Fatalities', color='Country_Region', size='Mean_Age', height=700,\n                 text='Country_Region',log_x=True,log_y=True)\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","4ea8baea":"fig = px.scatter(data[(data.daily_tested>200) & (data.Date == max(data.Date)) ],\n                 x='daily_tested', y='Fatalities', color='Country_Region', size='Mean_Age', height=700,\n                 text='Country_Region',log_x=True,log_y=True)\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","033efee8":"data.sort_values([\"Country_Region\"],inplace=True)","1d42c90e":"def predict_ConfirmedCases(test_country):\n    tmp_data=data[(data.Date == max(data.Date))]\n    test_data=tmp_data[tmp_data.Country_Region == test_country]\n    train_data = tmp_data[(tmp_data.Country_Region !=test_country) & (tmp_data.Fatalities_rate >= 2) & (tmp_data.Fatalities_rate <= 6)]\n    #print(test_data)\n    \n    mms.fit(train_data[['Fatalities',\"Population_Size\",\"Tourism\"]])\n    data_transformed = mms.transform(train_data[['Fatalities',\"Population_Size\",\"Tourism\"]])\n    \n    rg = Ridge(alpha=0.00001)\n    rg.fit(data_transformed,train_data[\"ConfirmedCases\"])\n   \n    predictions=rg.predict(mms.transform(test_data[['Fatalities',\"Population_Size\",\"Tourism\"]]))\n    return pd.DataFrame([test_country,predictions[0]]).transpose()","27e63e5c":"tmp_df = pd.DataFrame([data.Country_Region.unique()]).T","09ca6199":"tmp_df.columns =[\"Country_Region\"]","ab9dc296":"for i in data.Country_Region.unique():\n    d=predict_ConfirmedCases(i)\n    tmp_df.loc[tmp_df.Country_Region == i,\"predicted_C\"] = predict_ConfirmedCases(i)[1].values[0]","bad1c6b3":"tmp_df=pd.merge(tmp_df, data.loc[(data.Date == max(data.Date)),[\"ConfirmedCases\",\"Country_Region\"]],how=\"left\",on=\"Country_Region\")","9090a301":"tmp_df.predicted_C = tmp_df.predicted_C.apply(lambda x: int(round(x,2)))","c5c224c5":"tmp_df[tmp_df.Country_Region.isin([\"Morocco\",\"Egypt\",\"Algeria\",\"Tunisia\",\"France\",\"Spain\",\"Italy\",\"Korea, South\"])]","41938210":"<h4>The Human Freedom Index<\/h4>","83b6a4b6":"<h3>Line Plots<\/h3>  <a class=\"anchor\" id=\"lp\"><\/a>","50b29cfe":"<h4>Checking for the optimal K in Kmeans Clustering<\/h4><a class=\"anchor\" id=\"co\"><\/a>","d9a901eb":"<h4>Investigating the clusters<\/h4>  <a class=\"anchor\" id=\"itc\"><\/a>","b0d1fe2b":"# Data Visualization <a class=\"anchor\" id=\"dv\"><\/a>","d5ac2717":"Difference between Lockdown Date and First Confirmed Fatality","b8bdc8bf":"#### Attribute Information: \n> 1. Country_Region\n> 2. Population_Size \n> 3. Tourism\n> 4. Date_FirstFatality\n> 5. Date_FirstConfirmedCase\n> 6. Latitude\n> 7. Longtitude\n> 8. Mean_Age\n> 9. Lockdown_Date\n> 10. Lockdown_Type\n> 11. Country_Code 3 digit code\n\n","b90f7009":"<b>world-countries.json<\/b> Json file that contains information about countries geo Locations","e24d78d3":"<h4>Fatalities_rate<\/h4>  <a class=\"anchor\" id=\"fr\"><\/a>","00bdcd7d":"<img src=\"https:\/\/www.ecoactu.ma\/wp-content\/uploads\/2020\/04\/coronavirus-1.jpg\" style=\"width:70%;hight:100px;align:center\">","f5c21d95":"<h4>Fatalities_rate and Tourism<\/h4>  <a class=\"anchor\" id=\"ft\"><\/a>","35a7cce6":"<b>The COVID19 Global Forecasting (Week 4)<\/b> dataset thas daily level information on the number of affected cases and deaths from 2019 novel coronavirus.","59457ce6":"<h4>Fatalities_rate and the difference between lockDown Date and FirstConfirmedCase<\/h4>  <a class=\"anchor\" id=\"fdf\"><\/a>","941e8a9a":"<h4>Number of tests per day by country<\/h4>","b4429060":"# Data Description <a class=\"anchor\" id=\"dd\"><\/a>","e4e47873":"<h4>Clustering the data<\/h4><a class=\"anchor\" id=\"cd\"><\/a>","6512147b":"# Predicting the ConfirmCases From Fatalities   <a class=\"anchor\" id=\"pc\"><\/a>","624676f5":"Line plot with Date and ConfirmedCases","df79b6d8":"<h2>Thanks for reading <\/h2>\n<h2>If you found this helpful a upvote would be very much appreciated :-)<\/h2>","b0d0a60d":"<h4>Import Libraries<\/h4>","0f616dee":"Clustering the data with those 5 columns 'Population_Size', 'Tourism', 'Date_FirstFatality','Date_FirstConfirmedCase', 'Latitude', 'Longtitude', 'Mean_Age'","60f397fb":"<h4>Mean_Age<\/h4>  <a class=\"anchor\" id=\"ma\"><\/a>","fbc7f9b0":"# Feature Importance <a class=\"anchor\" id=\"fi\"><\/a>","fd07f62e":"# Acknowledgements\n<a href=\"https:\/\/www.kaggle.com\/imdevskp\/covid-19-analysis-visualization-comparisons\">COVID-19 - Analysis, Visualization & Comparisons<\/a>","a229a611":"# Data preprocessing <a class=\"anchor\" id=\"dp\"><\/a>","2fdecb94":"<h2>This notebook tracks and Analyse the spread of the coronavirus(COVID-19) \ud83e\udda0. <\/h2>","d9d5191a":"1. [Data Description](#dd)\n2. [Data preprocessing](#dp) <br>\n    2.1 [Clustering the data](#cd)<br>\n    2.2 [Checking for the optimal K in Kmeans Clustering](#co)<br>\n    2.3 [Creating other useful columns](#cu)\n3. [Data Visualization](#dv)<br>\n    3.1 [Line Plots](#lp)<br>\n    3.2 [Map](#mp)<br>\n4. [Feature Importance](#fi)<br>\n    4.1 [Correlation](#c)<br>\n    4.2 [Feature importance with random forest](#fird)<br>\n    4.3 [Checking the correlation between the Fatalities, Tourism and population size](#ccft)<br>\n5. [Predicting the ConfirmCases From Fatalities](#pc)","2c21a2d7":"<h4>Fatalities_rate and Mean_Age<\/h4>  <a class=\"anchor\" id=\"fm\"><\/a>","25ff4740":"Difference between Lockdown Date and First Confirmed Case Date","213a6f78":"5 first Clusters","cd9ea287":"# Covid-19 Analysis\n<a style=\"color:black\" href=\"https:\/\/www.linkedin.com\/in\/ouassim-adnane\/\">Ouassim Adnane<\/a> May 2020<\/h5>","6671c0b9":"<h4>Feature importance with random forest<\/h4> <a class=\"anchor\" id=\"fird\"><\/a>","413f444f":"<h2>Content :<\/h2> \n<ul>\n<li>Data preprocessing<\/li>\n<li>Data visualization with Plotly and folium to track and analyze the spread of the virus <\/li>\n<li>Showing what feature correlates with the number of fatalities (feature important and correlation matrix) <\/li>\n<li>Trying the predict the number of confirmed cases from the number of fatalities and couple other feature to see if the real number of cases match that prediction<\/li> <\/ul>\n","00d63dc3":"#### Attribute Information: \n> 1. ID\n> 2. Province_State \n> 3. Country_Region\n> 4. resting blood pressure \n> 5. Date\n> 6. ConfirmedCases\n> 7. Fatalities\n","368d44d5":"Line plot with Date and Fatalities","55497e5e":"<h4>Checking the correlation between the Fatalities, Tourism and population size<\/h4> <a class=\"anchor\" id=\"ccft\"><\/a>","6c446bc2":"<h4>Creating other useful columns<\/h4><a class=\"anchor\" id=\"cu\"><\/a>","a897fb38":"<h3>Maps<\/h3>  <a class=\"anchor\" id=\"mp\"><\/a>","8e85214a":"<h4>Correlation<\/h4><a class=\"anchor\" id=\"c\"><\/a>","97217c67":"Fatalities percentage ","b6018010":"# Table of Content","70d715f3":"<b>The COVID 19 useful feature by country<\/b> dataset has information about countries and coronavirus","1e745919":"<h4>Checking the clusters<\/h4>  <a class=\"anchor\" id=\"ctc\"><\/a>"}}