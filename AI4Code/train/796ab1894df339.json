{"cell_type":{"9d9846fa":"code","c3567748":"code","4ddc4cbf":"code","ef46bf1a":"code","3c647ef0":"code","7adba680":"code","9ef75016":"code","e49882b9":"code","14e03cea":"code","0eea55a9":"code","3d58656f":"code","e5c7ff9f":"code","1edfe5dc":"code","e5718165":"code","6f47b4f9":"code","344564df":"code","ec49fa8b":"code","d903333a":"code","ff14e2f5":"markdown","e2fa1740":"markdown","e6b0f986":"markdown","118e33c2":"markdown","054daf23":"markdown","955b8fa1":"markdown","06d2389a":"markdown"},"source":{"9d9846fa":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport datetime\nimport warnings\nwarnings.filterwarnings('ignore')\nmpl.rcParams['font.family'] = 'AppleGothic'","c3567748":"# os.chdir(\"\/Users\/admin\/Desktop\/workspace\/call_predict\/\")\ntrain = pd.read_csv('..\/input\/train_call_history.csv')","4ddc4cbf":"def cleaning_data(data_set):    \n    data_set['week'] = data_set['week'].map( {'\u6708\u66dc\u65e5': \"Mon\", '\u706b\u66dc\u65e5': \"Tue\", '\u6c34\u66dc\u65e5': \"Wed\",\"\u6728\u66dc\u65e5\":\"Thu\",\"\u91d1\u66dc\u65e5\":\"Fri\",\"\u571f\u66dc\u65e5\":\"Sat\",\"\u65e5\u66dc\u65e5\":\"Sun\"} )\n    data_set[\"establishment\"] = data_set[\"establishment\"].astype(str).str[:3]+ \"0\"\n    data_set[\"call_time\"] = data_set[\"call_time\"].astype(str).str[:2]\n    data_set[\"industry_code1\"] = data_set[\"industry_code1\"].astype(str).str[:2]\n    data_set[\"birthday\"] = data_set[\"birthday\"].astype(str).str[:3] + \"0\"\n    data_set[\"sogyotoshitsuki\"] = data_set[\"sogyotoshitsuki\"].astype(str).str[:3]+ \"0\"\n    data_set[\"tokikessan_uriagedaka_category\"]  = pd.cut(data_set[\"tokikessan_uriagedaka\"] , [0, 1000000, 3000000, 10000000,50000000,999999999999])\n    data_set[\"tokikessan_uriagedaka\"] = data_set[\"tokikessan_uriagedaka\"].fillna(data_set[\"tokikessan_uriagedaka\"].mean())\n    data_set[\"shihonkin\"] = data_set[\"shihonkin\"].fillna(data_set[\"shihonkin\"].mean())\n    data_set[\"employee_num\"] = data_set[\"employee_num\"].fillna(data_set[\"employee_num\"].mean())\n    data_set[\"employee_num\"] = data_set[\"employee_num\"].fillna(data_set[\"employee_num\"].mean())\n    data_set[\"tokikessan_riekikin\"] = data_set[\"tokikessan_riekikin\"].fillna(0)\n    data_set[\"kojokazu\"] = data_set[\"kojokazu\"].fillna(0)\n    data_set[\"jigyoshokazu\"] = data_set[\"jigyoshokazu\"].fillna(0)\n    data_set[\"danjokubun\"] = data_set[\"danjokubun\"].fillna(1)\n    return data_set","ef46bf1a":"train = cleaning_data(train)","3c647ef0":"#\u5bfe\u8c61\u3068\u306a\u308b\u30ab\u30c6\u30b4\u30ea\u30fc\u30c7\u30fc\u30bf\u3092\u6307\u5b9a\ncategory_col = ['week', 'call_time', 'list_type','establishment', 'sogyotoshitsuki','tokikessan_uriagedaka_category']\nfig, axes = plt.subplots(nrows = len(category_col), ncols = 2, figsize = (80, 120))\n\nfor x in category_col:\n    freqs = pd.crosstab(train[x],train.result) #\u51fa\u73fe\u983b\u5ea6\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\n    freqs.plot(ax = axes[category_col.index(x), 0], kind = 'bar', stacked = True) #\u5de6\u30ab\u30e9\u30e0\u306b\u30d7\u30ed\u30c3\u30c8\n    axes[category_col.index(x)][0].set_xticklabels(freqs.index, rotation=45, size=12)\n    props = freqs.div(freqs.sum(1).astype(float), axis = 0) #\u51fa\u73fe\u983b\u5ea6\u30c7\u30fc\u30bf\u304b\u3089\u5272\u5408\uff08100%\uff09\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\n    props.plot(ax = axes[category_col.index(x), 1], kind = 'bar', stacked = True) #\u53f3\u30ab\u30e9\u30e0\u306b\u30d7\u30ed\u30c3\u30c8\n    axes[category_col.index(x)][1].set_xticklabels(props.index, rotation = 45, size = 12)\n    fig.tight_layout()\nplt.show()","7adba680":"select_col =[\"result\",'week', 'call_time','list_type','employee_num','tokikessan_uriagedaka','tokikessan_riekikin']\n#       ['id', 'result', 'charger_id', 'call_date', 'week', 'call_time','service', 'list_type', 're_call_date', 're_call_time', 'address',\n#        'kabushiki_code', 'sogyotoshitsuki', 'establishment', 'shihonkin','employee_num', 'kojokazu', 'jigyoshokazu', 'industry_code1',\n#        'industry_code2', 'industry_code3', 'industry1', 'industry2','industry3', 'atsukaihin_code_1', 'atsukaihin_code_2',\n#        'atsukaihin_code_3', 'atsukaihin_code_4', 'atsukaihin_code_5','atsukaihin_code_6', 'atsukaihin1', 'atsukaihin2', 'atsukaihin3',\n#        'atsukaihin4', 'atsukaihin5', 'atsukaihin6', 'eigyoshumokumeisho','yakuimmeisho', 'okabunushimeisho', 'shiiresakimeisho',\n#        'hambaisakimeisho', 'kojo_shiten_eigyoshomeisho', 'gaikyo','maemaekikessan_kessantoshitsuki', 'maemaekikessan_tsukisu',\n#        'maemaekikessan_uriagedaka', 'maemaekikessan_zeikomihikikubun','maemaekikessan_riekikin', 'maemaekikessan_uriagedaka_original',\n#        'maemaekikessan_riekikin_original', 'zenkikessan_kessantoshitsuki','zenkikessan_tsukisu', 'zenkikessan_uriagedaka',\n#        'zenkikessan_zeikomihikikubun', 'zenkikessan_riekikin','zenkikessan_uriagedaka_original', 'zenkikessan_riekikin_original',\n#        'tokikessan_kessantoshitsuki', 'tokikessan_tsukisu','tokikessan_uriagedaka', 'tokikessan_zeikomihikikubun',\n#        'tokikessan_riekikin', 'tokikessan_uriagedaka_original','tokikessan_riekikin_original', 'tokiuriage_shinchoritsu',\n#        'tokiuriage_shinchohitai', 'zenkiuriage_shinchoritsu','zenkiuriage_shinchohitai', 'tokirieki_shinchoritsu',\n#        'tokirieki_shinchohitai', 'zenkirieki_shinchoritsu','zenkirieki_shinchohitai', 'hitoriataririgekkan_uriagekinhitai',\n#        'hitoriataririgekkan_riekikingaku', 'representative', 'birthday','danjokubun', 'eto_meisho', 'position', 'shusshinchi', 'jukyo',\n#        'saishugakureki_gakko', 'shumi1', 'shumi2', 'shumi3', 'tosankeireki','race_area']","9ef75016":"data = cleaning_data(train)\ndata = data[select_col]","e49882b9":"data = pd.get_dummies(data)","14e03cea":"#Prediction\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn import cross_validation, metrics\nfrom sklearn.grid_search import GridSearchCV\n","0eea55a9":"label = data.columns\ndata = data.values","3d58656f":"X = data[0::, 1::]\ny = data[0::, 0]\n(X_train, X_test, y_train, y_test) = train_test_split(X, y, test_size=0.3, random_state=8,)","e5c7ff9f":"# \u6c7a\u5b9a\u6728\u306e\u4f5c\u6210\n# ROI\u3092\u6700\u9069\u5316\u3059\u308b\u6700\u9069\u306amax_depth \u3068\u3000\u95be\u5024\u3092\u63a2\u3063\u3066\u307f\u308b\u3002\n# \u4e00\u4ef6AP\u304c\u53d6\u308c\u305f\u6642\u306eLTV\u304c20000\u5186\u3001\u4e00\u4ef6\u96fb\u8a71\u3092\u3059\u308b\u30b3\u30b9\u30c8\u304c1000\u5186\u3068\u904e\u7a0b\u3057\u305f\u6642\u306bROI\u304c\u6700\u5927\u306b\u306a\u308bmax_depth\u3068Threshold\u3092\u6c42\u3081\u3066\u3044\u308b\u3002\n# \u305d\u3082\u305d\u3082\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3092\u884c\u3048\u3070\u3053\u306e\u30b3\u30fc\u30c9\u306f\u4e0d\u8981\u3002\npre_ROI = 0\npre_roc_auc_score = 0\nfor i_1 in range(1,10):\n    DecisionTree = RandomForestClassifier(random_state=1, max_depth=i_1,class_weight=\"balanced\",max_features=4,n_estimators = 120)\n    DecisionTree.fit(X_train, y_train)\n    predict_Xtest = DecisionTree.predict_proba(X_test)[:,1]\n    now_roc_auc_score = roc_auc_score(y_test, DecisionTree.predict_proba(X_test)[:,1], average='macro', sample_weight=None)\n    if pre_roc_auc_score < now_roc_auc_score:\n        pre_roc_auc_score = now_roc_auc_score\n    for i_2 in range(1,100):\n        test = np.where(predict_Xtest >(i_2\/100),1,0)\n        now_ROI = confusion_matrix(y_test, test)[1,1]*20000 - confusion_matrix(y_test, test)[0::, 1].sum()*1000\n        if pre_ROI < now_ROI:\n            pre_ROI = now_ROI\n            best_depth,best_Threshold = i_1,i_2\n        else:\n            pass\n\n# \u6700\u9069\u306a\u6df1\u3055\u3068\u95be\u5024\u3067\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3002\nDecisionTree = RandomForestClassifier(random_state=1, max_depth=best_depth,class_weight='balanced',max_features=4,n_estimators = 120)\nDecisionTree.fit(X_train, y_train)\npredict_Xtest = DecisionTree.predict_proba(X_test)[:,1]\npredict_Xtest = np.where(predict_Xtest >(best_Threshold\/100),1,0)\n\n\n# \u8a55\u4fa1\nprint('Train score: {:.3f}'.format(DecisionTree.score(X_train, y_train)))\nprint('Test score: {:.3f}'.format(DecisionTree.score(X_test, y_test)))\nprint('precision_score: {:.3f}'.format(precision_score(y_test, predict_Xtest)))\nprint('f1 score: {:.3f}'.format(f1_score(y_test, predict_Xtest)))\nprint('best_roc_auc_score: {:.3f}'.format(pre_roc_auc_score))\nprint('roc_auc_score: {:.3f}'.format(roc_auc_score(y_test, DecisionTree.predict_proba(X_test)[:,1], average='macro', sample_weight=None)))\nmax_ROI = confusion_matrix(y_test, test)[1:,].sum()*19000\nprint(\"=======================\")\nprint('ROI: {:,}\u5186 \/\u6700\u5927ROI:{:,}\u5186'.format(pre_ROI,max_ROI))\nprint('\u6bd4\u7387\uff1a {:.1f} %'.format(pre_ROI\/max_ROI*100))\nprint(\"=======================\")\nprint('Confusion matrix:\\n{}'.format(confusion_matrix(y_test, predict_Xtest)))\nprint(\"=======================\")\nprint('best_depth: {}'.format(best_depth))\nprint('best_Threshold: {}'.format(best_Threshold\/100))","1edfe5dc":"importance = DecisionTree.feature_importances_\ndata = pd.DataFrame({\"name\":label[1:],\"importance\":importance})\ndata = data.sort_values('importance', ascending=False)\nfig, axes = plt.subplots(figsize = (20, 10))\nsns.barplot(x=data['importance'], y=data['name'],color=\"b\")","e5718165":"# #Grid search\n\n# from sklearn.grid_search import GridSearchCV\n\n#  # use a full grid over all parameters\n# param_grid = {\"max_depth\": [1,5,10],\n#                \"n_estimators\":[90,120,150],\n#                \"max_features\": [1,2,3,4,5],\n# #                \"min_samples_split\": [2, 3],\n# #                \"min_samples_leaf\": [1, 3],\n#               \"bootstrap\": [True, False],\n#               \"class_weight\":[\"balanced\"],\n#               \"criterion\": [\"gini\", \"entropy\"]}\n\n# forest_grid = GridSearchCV(estimator=RandomForestClassifier(random_state=0),\n#                  param_grid = param_grid,   \n#                  scoring=\"roc_auc\",  #metrics\n#                  cv = 3,              #cross-validation\n#                  n_jobs = 1)          #number of core\n\n# forest_grid.fit(X_train,y_train) #fit\n\n# forest_grid_best = forest_grid.best_estimator_ #best estimator\n# print(\"Best Model Parameter: \",forest_grid.best_params_)","6f47b4f9":"# test = pd.read_csv(\"test_call_history.csv\")\n# test_ID = test[\"id\"]","344564df":"# test_data = cleaning_data(test)","ec49fa8b":"# test_select_col = select_col.copy()\n# test_select_col.remove(\"result\")","d903333a":"# # \u3053\u3053\u306f\u672c\u6c17\u3067\u30a4\u30b1\u3066\u306a\u3044\u306e\u3067\u3001\u771f\u4f3c\u3057\u306a\u3044\u3053\u3068\u3002\n# # \u4f55\u3092\u3057\u3066\u3044\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u30c0\u30df\u30fc\u5909\u6570\u3092pd.get_dummies\u3000\u3067\u4f5c\u3063\u305f\u6642\u306btest\u30c7\u30fc\u30bf\u306b\u3057\u304b\u306a\u3044\u3002train\u30c7\u30fc\u30bf\u306b\u3057\u304b\u306a\u3044\u30ab\u30c6\u30b4\u30ea\u30fc\u304c\u3067\u304d\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u5f37\u5f15\u306b\u8abf\u6574\u3057\u3066\u3044\u308b\u3002\n# test_data = test_data[test_select_col]\n# test_data = pd.get_dummies(test_data)\n# test_data = test_data.drop([\"call_time_01\",\"call_time_06\"],axis = 1)\n# test_data[\"call_time_24\"] = 0\n# test_data = test_data[['employee_num', 'tokikessan_uriagedaka',\n#        'tokikessan_riekikin', 'call_time_07', 'call_time_08', 'call_time_09',\n#        'call_time_10', 'call_time_11', 'call_time_12', 'call_time_13',\n#        'call_time_14', 'call_time_15', 'call_time_16', 'call_time_17',\n#        'call_time_18', 'call_time_19', 'call_time_20', 'call_time_21',\n#        'call_time_22', 'call_time_23', 'call_time_24', 'list_type_\u6e90\u6cc9',\n#        'list_type_\u7ba1S']]\n# test_data_label = test_data.columns\n# test_data = test_data.values\n\n\n# predict_test_data = DecisionTree.predict_proba(test_data)\n# x = pd.DataFrame({'id':test_ID,\"result\":predict_test_data[:,1]})\n# x = x.set_index('id')\n# x.to_csv(\"predict.csv\")","ff14e2f5":"## \u30c7\u30fc\u30bf\u306e\u52a0\u5de5\uff08\u9069\u5f53\uff09","e2fa1740":"## \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u5b9f\u9a13\u3057\u3066\u307f\u308b\u3002","e6b0f986":"#### \u9069\u5f53\u306b\u4f5c\u3063\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u5171\u6709\u3057\u307e\u3059\u3002\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002","118e33c2":"## \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3067\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a8\u5b9a\u3059\u308b","054daf23":"## \u30e2\u30c7\u30eb\u69cb\u7bc9","955b8fa1":"## \u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u306b\u3064\u3044\u3066\u8abf\u3079\u3066\u307f\u308b","06d2389a":"## \u3068\u308a\u3042\u3048\u305a\u4e00\u56de\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u308b\u3002"}}