{"cell_type":{"afe51650":"code","a98a76f7":"code","a7b17ad3":"code","a25d599b":"code","46d8204d":"code","2981fc8a":"code","68564cca":"code","92b0fe5f":"code","d10699cd":"code","491f738f":"code","c2846adf":"code","060f7e07":"code","a2fef413":"code","3e1e1337":"code","95560869":"code","d251469d":"code","39db97d6":"code","9a124821":"code","2128cab6":"code","f3eb3beb":"code","7f1f8e91":"code","0348ecd6":"code","9d02ab22":"code","220ce3c9":"code","061686d9":"code","9f649d57":"code","4b90869f":"code","4a65a65e":"code","2e0990df":"code","89a3c4f4":"code","5b7a1ea0":"code","0147228a":"code","5e7b457b":"code","32dd3aa4":"code","1daf1156":"code","84636ff8":"code","0eb46cd9":"code","e353bf91":"code","ea9d3a4a":"code","15dbd6ad":"code","e9e95d30":"markdown","ae2d4cbb":"markdown","55b289e7":"markdown","2262478d":"markdown","6e378370":"markdown","9082934a":"markdown","967f970b":"markdown","10c7406e":"markdown","1525ab3b":"markdown","2f3ab9ee":"markdown","8a1dd37e":"markdown","65198bb1":"markdown"},"source":{"afe51650":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport pandasql as ps\nimport math\nfrom plotnine import *\nimport fastai\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a98a76f7":"labelled = pd.read_csv('..\/input\/LabelledDataset.csv')\ncategorical = pd.read_csv('..\/input\/CategoricalDataset.csv')\ncontinuous = pd.read_csv('..\/input\/ContinousDataset.csv')\noriginal = pd.read_csv('..\/input\/originalDataset.csv')","a7b17ad3":"continuous.head(5)","a25d599b":"continuous.loc[(continuous[\"Match Date\"] == \"Jan 5, 1971\"),:] \n\n## Every match as two occurances, one each corresponding to \"Team 1\" and \"Team 2\"","46d8204d":"continuous.head(5)\nprint(continuous.shape)\ncontinuous_unique = continuous.loc[~continuous[[\"Scorecard\"]].duplicated(),:]\nprint(continuous_unique.shape)\n\n## We have created 2 data frames - the first one \"continuous\" has all records ... The second one \"continuous_unique\" has only\n## one record per match !!","2981fc8a":"## First let's try to understand how many matches has every team played in total\n\ntemp = continuous.groupby([\"Team 1\"])\ntemp_1 = temp[\"Scorecard\"].agg({\"Matches Played\":'count'}).reset_index()\nprint(\"This table gives a view of total matches played by all teams\")\nprint(\"============================================================\")\nprint(temp_1.sort_values(by=\"Matches Played\",ascending=False))","68564cca":"continuous.loc[(continuous[\"Team 1\"] == \"U.S.A.\") | (continuous[\"Team 2\"] == \"U.S.A.\") ,:]","92b0fe5f":"continuous[\"Winner\"].unique()","d10699cd":"## Now, let's . try and calculate number of matches won by every team in the data.\n\ntemp = continuous_unique[\"Winner\"].groupby(continuous_unique[\"Winner\"])\nwins = temp.agg({\"Wins\":'count'}).reset_index()\nprint(wins)\n","491f738f":"## Let's merge temp_1 and wins \n\nwins = wins.rename(columns=({\"Winner\":\"Team 1\"})) \nrecords = pd.merge(left=temp_1,right=wins,how='left',on='Team 1')\nrecords[\"Win percent\"] = (records[\"Wins\"] \/ records[\"Matches Played\"]) * 100 \nprint(\"This table gives a summary of number of matches played and number of matches won by every team\")\nprint(\"===============================================================================================\")\nprint(records.sort_values(by=\"Win percent\",ascending=False))","c2846adf":"## Let's try and graphically visualize the above information \n## Let's pick top 10 countries basis the number of matches played and then plot them in a graph\n\n\nmy_dpi = 150\nf, ax = plt.subplots(figsize=(19, 6),dpi=100)\n##plt.rcParams['figure.figsize'] = 19,6\n(sns.barplot(\n              x = \"Team 1\",     \n              y = \"Matches Played\",\n              data = records.sort_values(by=\"Matches Played\",ascending=False).head(15),\n              color = \"DarkBlue\"\n            ),\nsns.barplot(\n              x = \"Team 1\",    \n              y = \"Wins\",\n              data = records.sort_values(by=\"Matches Played\",ascending=False).head(15),\n              color = 'DeepSkyBlue'\n           ))\nf.suptitle(\" Graph showing number of matches played and number of matches won by teams\",fontsize = 20)\n","060f7e07":"## Subset data for India matches only\n\nindia = continuous.loc[((continuous[\"Team 1\"] == \"India\") | (continuous[\"Team 2\"] == \"India\") ),:]\nindia_unique = india.loc[~india[\"Scorecard\"].duplicated(),:]\n\nprint(india.shape)\nprint(india_unique.shape)","a2fef413":"## Let's see India's performance against arch rival Pakistan - what has been their head-to-head record !!! \n\nindia_pak = india_unique.loc[((india_unique[\"Team 1\"] == \"Pakistan\") | (india_unique[\"Team 2\"] == \"Pakistan\")),:]\nindia_pak.shape","3e1e1337":"pd.DataFrame(india_pak.pivot_table(index=\"Winner\",values=\"Scorecard\",aggfunc='count').reset_index()).rename(columns = ({\"Scorecard\":\"Matches Won\"}))\n\n## Head to Head Pakistan has won more matches against India.","95560869":"india_pak.head(10)","d251469d":"## Let's add \"Venue\" colum in the data - It will help us categorize India's wins in \"Home\", \"Away\" and \"Neutral\" venues\n## We can then compare how has India fared against Pakistan in all 3 Venue categories\n\nindia_pak[\"venue\"] = np.where((india_pak[\"Winner\"] == india_pak[\"Host_Country\"]),\"Home_win\",\n                              np.where(((india_pak[\"Host_Country\"] != \"India\") & (india_pak[\"Host_Country\"] != \"Pakistan\")),\"Neutral_win\",\"Away_win\"))\n\nindia_pak[\"country\"] = \"India\"\nindia_pak[\"opposition\"] = \"Pakistan\"\nindia_pak.head(15)","39db97d6":"## Let's analyze India's performance against Pakistan at home, away and Neutral venues\n\nhome_wins_india = (india_pak.loc[((india_pak[\"venue\"] == \"Home_win\") & (india_pak[\"Winner\"] == \"India\")),:]).shape[0]\nhome_matches_india = (india_pak.loc[(india_pak[\"Host_Country\"] == \"India\"),:]).shape[0]\n\naway_wins_india = (india_pak.loc[((india_pak[\"venue\"] == \"Away_win\") & (india_pak[\"Winner\"] == \"India\")),:]).shape[0]\naway_matches_india = (india_pak.loc[(india_pak[\"Host_Country\"] == \"Pakistan\"),:]).shape[0]\n\nneutral_wins_india = (india_pak.loc[((india_pak[\"venue\"] == \"Neutral_win\") & (india_pak[\"Winner\"] == \"India\")),:]).shape[0]\nneutral_matches_india = (india_pak.loc[((india_pak[\"Host_Country\"] != \"India\") & (india_pak[\"Host_Country\"] != \"Pakistan\" )),:]).shape[0]\n\n## We will create a Data Frame that will store this information so that we can retrieve it at once\n## The structure of the dats should be\n##                Matches Played     Matches Won\n##  Home\n##  Away \n##  Neutral\n\nd = {\"Matches played\":[home_matches_india,away_matches_india,neutral_matches_india],\"India wins\":[home_wins_india,away_wins_india,neutral_wins_india] }\nindia_pak_results = pd.DataFrame(data=d,index=[\"Home (in India)\",\"Away (in Pakistan)\",\"Neutral\"])\nindia_pak_results[\"win percent\"] = (india_pak_results[\"India wins\"] \/ india_pak_results[\"Matches played\"]) * 100 \nprint(india_pak_results)","9a124821":"## Let's see how India has fared in Sharjah against Pakistan\n\nsharjah = india_pak.loc[india_pak[\"Ground\"] == \"Sharjah\",:]\npd.DataFrame(sharjah.pivot_table(index=\"Winner\",values=\"Scorecard\",aggfunc='count').reset_index()).rename(columns = ({\"Scorecard\":\"Matches Won\"}))","2128cab6":"## Let's see how India has fared on Fridays \n\nindia_pak.info()","f3eb3beb":"## The above table shows that \"Match Date\" is \"Object\" Type - we need to convert this to date type\n\nindia_pak[\"Match Date\"] = pd.to_datetime(india_pak[\"Match Date\"])\n\nindia_pak.info()","7f1f8e91":"## The above table now shows that \"Match Date\" has been converted to datetime data type ... \n## We now need to extract the weekday to see how many matches have been played on a Friday\n\nindia_pak[\"Match Day\"] = india_pak[\"Match Date\"].dt.weekday_name","0348ecd6":"india_pak.head(10)","9d02ab22":"fridays =india_pak.loc[india_pak[\"Match Day\"] == \"Friday\",:]\npd.DataFrame(fridays.pivot_table(index=\"Ground\",values=\"Scorecard\",columns=\"Winner\",aggfunc='count').reset_index()).rename(columns = ({\"Scorecard\":\"Matches Won\"}))","220ce3c9":"## It is generally perceived that after Sourav Ganguly took over as captain of India, our record overall improved.\n## Let's see after 2000, when Ganguly took over, how has India fared against Pakistan\n\nganguly_onward = india_pak.loc[india_pak[\"Match Date\"] > \"2000-03-31\" ,:]\npd.DataFrame(ganguly_onward.pivot_table(index=\"Winner\",values=\"Scorecard\",aggfunc='count').reset_index()).rename(columns = ({\"Scorecard\":\"Matches Won\"}))","061686d9":"## Let's see how India has fared against all teams - Matches played, Matches won and win % against all nations\n\nindia = continuous.loc[(continuous[\"Team 1\"] == \"India\"),:]\n\n## india.pivot_table(index=\"Team 2\",values=\"Winner\",aggfunc='count').reset_index()\ntemp = india.groupby([\"Team 2\",\"Winner\"])\npd.DataFrame(temp[\"Winner\"].agg({\"Wins\":'count'},margin=True))\n","9f649d57":"india[\"Team 2\"].value_counts()","4b90869f":"## Although the above table is useful, but it's not good visually ! Let's create something that is better to use later.\n\ntemp_played = india.groupby([\"Team 2\"])\nindia_played = temp_played[\"Scorecard\"].agg({\"Matches Played\":'count'}).reset_index()\nindia_played[\"Team 1\"] = \"India\"\nindia_played = india_played.iloc[:,[2,0,1]]\nindia_played","4a65a65e":"def wins(x):\n    matches_won = (india.loc[(india[\"Team 2\"] == x)&(india[\"Winner\"]==\"India\"),:]).shape[0]\n    return matches_won\n\ndef losses(x):\n    matches_lost = (india.loc[(india[\"Team 2\"] == x)&(india[\"Winner\"]== x),:]).shape[0]\n    return matches_lost","2e0990df":"india_played[\"India Wins\"] = india_played[\"Team 2\"].apply(func=wins)\nindia_played[\"India Losses\"] = india_played[\"Team 2\"].apply(func = losses)\nindia_played[\"India Win%\"] = np.round(((india_played[\"India Wins\"] \/ india_played[\"Matches Played\"]) * 100),decimals=2)","89a3c4f4":"india_played.iloc[:,[0,1,2,3] + [-1] + [4]]      ## Rearranging column order","5b7a1ea0":"## Let's try and plot the above table in visual format !\n\nmy_dpi = 150\nf, ax = plt.subplots(figsize=(19, 6),dpi=100)\n##plt.rcParams['figure.figsize'] = 19,6\n(sns.barplot(\n              x = \"Team 2\",     \n              y = \"Matches Played\",\n              data = india_played.sort_values(by=\"Matches Played\",ascending=False).head(15),\n              color = \"Green\"\n            ),\nsns.barplot(\n              x = \"Team 2\",    \n              y = \"India Wins\",\n              data = india_played.sort_values(by=\"Matches Played\",ascending=False).head(15),\n              color = 'Yellow'\n           ))\nf.suptitle(\" Graph showing India's record against all countries\",fontsize = 20,color = 'Orange')","0147228a":"india[\"Match Date\"].head(5)\n\n## In the below table we see there are dates that do not conform to standard date convention. We need to fix this.\n## We will have to remove anything beyond a \"-\" sign\n","5e7b457b":"india.loc[(india[\"Match Date\"] == 'Jun 16-18, 1979'),:]\n\n## The below date is a little messed up. We need to clean this so that we can convert this value to a date format","32dd3aa4":"## To convert \"Match Date\" into a timestamp data type, we need to do some data massaging\n\ndef clean_date(x):\n    if x.find(\"-\") != -1:\n        pos_dash = x.find(\"-\",0,len(x))\n        pos_comma = x.find(\",\",0,len(x))\n        string_to_be_replaced = x[pos_dash:pos_comma]\n        x = x[0:(pos_dash)] + x[(pos_comma):]\n    \n    else:\n        pass\n        \n    return x","1daf1156":"india[\"Match Date\"] = india[\"Match Date\"].apply(func=clean_date)\nindia[\"Match Date\"] = pd.to_datetime(india[\"Match Date\"])","84636ff8":"## Now that the dates are cleaned, let's see how India performed before and after Saurav as a captain\n## We will take 2000-03-31 as the cut off date, assuming after which Saurav took over \n\nbefore_saurav =  india.loc[india[\"Match Date\"] <= \"2000-03-31\" ,:]\nafter_saurav =   india.loc[india[\"Match Date\"] > \"2000-03-31\" ,:]","0eb46cd9":"india_wins = (india.loc[(india[\"Winner\"] == \"India\"),:].shape[0])\nindia_losses = india.loc[(india[\"Winner\"] != \"India\") ,:].shape[0]\nmatches_total = india[\"Scorecard\"].count()\nindia_wins_before_sg = before_saurav.loc[(india[\"Winner\"] == \"India\"),:].shape[0]\nindia_losses_before_sg = before_saurav.loc[(india[\"Winner\"] != \"India\"),:].shape[0]\nmatches_before_sg = before_saurav[\"Scorecard\"].count()\nindia_wins_after_sg = after_saurav.loc[(india[\"Winner\"] == \"India\"),:].shape[0]\nindia_losses_after_sg = after_saurav.loc[(india[\"Winner\"] != \"India\"),:].shape[0]\nmatches_after_sg = after_saurav[\"Scorecard\"].count()\n\nprint(matches_total)\nd = {\"Matches Played\":[matches_total,matches_before_sg,matches_after_sg],\n     \"Matces Won\":[india_wins,india_wins_before_sg,india_wins_after_sg],\n     \"Matches Lost\":[india_losses,india_losses_before_sg,india_losses_after_sg]\n    }\n\nrecords = pd.DataFrame(data=d,index=[\"Matches Played\",\"Matches Won\",\"Matches Lost\"])\nrecords.rename(columns={\"Matches Played\":\"Total\",\"Matces Won\":\"Before SG\",\"Matches Lost\":\"After SG\"},inplace=True)\nrecords = records.T \nrecords[\"Win percent\"] = (records[\"Matches Won\"] \/ records[\"Matches Played\"]) * 100 \nprint(records)","e353bf91":"## It would be cool to write a generic function which takes 2 teams as input(s) and returns their H2H record as output\n## We will need to use \"Continuous\" and \"continuous_unique\" Data Frames for this.\n\ndef slice_data(team1,team2):\n    temp_frame = continuous_unique.loc[((continuous_unique[\"Team 1\"] == team1) | (continuous_unique[\"Team 1\"] == team2)) &\n                                       ((continuous_unique[\"Team 2\"] == team1) | (continuous_unique[\"Team 2\"] == team2))\n                                      ]\n    return temp_frame\n    \ndef h2h(temp_frame):\n    win_loss = pd.DataFrame(temp_frame.pivot_table(index=\"Winner\",values=\"Scorecard\",aggfunc='count').reset_index()).rename(columns = ({\"Scorecard\":\"Matches Won\"}))\n    return win_loss","ea9d3a4a":"test = slice_data(\"South Africa\",\"India\")\nh2h(test)","15dbd6ad":"test.shape","e9e95d30":"## <font color = 'green'> We will try to create a table which will tell, by country, total number of matches played and number of  matches won <\/font>","ae2d4cbb":"###   ---------------------------------------------------------------------------------------------------------------------------------------------------------- ","55b289e7":"### <font color = 'green'>So, the popular belief is indeed true. Post Ganguly took over, India has played better cricket against Pakistan. The win record is over 50%<\/font>","2262478d":"### Clearly Pakistan is ahead of India in head to head contests winning 72 out of 123 matches, win percent of 58.5%","6e378370":"### <font color = 'green'> We can see that win percent has increased significantly post Sourav Ganguly took over as India captain. <\/font>","9082934a":"### <font color = 'blue'> Let's try and answer some generic questions now, about how teams have fared <\/font>","967f970b":"## Let's analyze India's performance and try to answer some basic questions","10c7406e":"### <font color = 'red'> WOW !! This is an incredible piece of information, On Fridays, Pakistan has won 23 out of 27 matches against India. They have lost 3 times in Sharjah and once in Lahore ... They have won all other matches <\/font>","1525ab3b":"### In Sharjah Pakistan has clearly dominated India","2f3ab9ee":"### India seems to have done well in Pakistan (against Pakistan) as compared to home or neutral matches","8a1dd37e":"### <font color = 'blue'><center><b> Let's do some generic data massaging<\/font><\/center><\/b>","65198bb1":"### Let's see how did India fare at overall level before and after Saurav took over as captain"}}