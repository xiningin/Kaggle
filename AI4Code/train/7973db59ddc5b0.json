{"cell_type":{"710c7eac":"code","92e44816":"code","62b43172":"code","376b1ce2":"code","fbf34202":"code","b90ff714":"code","b39ac5e5":"code","800034df":"code","43a85bd9":"code","7e7f6f1a":"code","a39d96d7":"code","01123116":"code","ffa4ee96":"code","6fc7cfae":"code","1fae99de":"code","8573d7b8":"code","1c2f9c24":"markdown","fa55bdce":"markdown","bebb5554":"markdown","46fcbb87":"markdown","89173f84":"markdown","f88ec3b1":"markdown","2a2c9b6d":"markdown","87d714bf":"markdown","4a8ddfea":"markdown","f8b9752b":"markdown","238916ea":"markdown","5e9d1805":"markdown","7932544f":"markdown","29359f3a":"markdown","3017c971":"markdown","0f60b376":"markdown","9ef9b86b":"markdown","4079ae74":"markdown","6507b455":"markdown","96ff0bbe":"markdown","3f41c6f7":"markdown"},"source":{"710c7eac":"import numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport pycountry\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Helper functions\n\ndef get_country_name(alpha_3_code: str):\n    if alpha_3_code == 'KOS':\n        return 'Kosovo'\n    elif alpha_3_code == 'AHO':\n        return 'Netherlands Antilles'\n    elif alpha_3_code == 'FID':\n        return 'Fide'\n    else:\n        return pycountry.countries.get(alpha_3 = alpha_3_code).name","92e44816":"df = pd.read_csv('\/kaggle\/input\/world-top-chess-players-august-2020\/top_chess_players_aug_2020.csv', low_memory = False)\ndf","62b43172":"df.drop(columns = ['Fide id'], inplace = True) # Useless for our analysis\n\ndf['Gender'] = df['Gender'].astype('category')\ndf['Gender'].cat.rename_categories({'M': 'Male', 'F': 'Female'}, inplace = True)\n\n# There are federations registered like 'IND' and 'ind'. Thus, let us set all to upper. \ndf['Federation'] = df['Federation'].apply(lambda x : x.upper())\n\ndf['Inactive_flag'] = df['Inactive_flag'].apply(lambda x: 'Yes' if x == 'i' or x == 'wi' else 'No')\n\ndf['Title'] = df['Title'].fillna('None')\ndf['Title'] = df['Title'].astype('category')\n\ndf.rename(columns = {\"Inactive_flag\": \"Inactive\", \"Standard_Rating\": \"Standard_rating\"}, inplace = True)\n\nnumeric_cols = ['Year_of_birth', 'Standard_rating', 'Rapid_rating', 'Blitz_rating']\n\nfor col in numeric_cols:\n    df[col].fillna(0, inplace = True)\n    df[col] = pd.to_numeric(df[col], errors = 'coerce', downcast = 'integer')\n\ndf['Federation'] = df['Federation'].astype('category')\n\n# To replace other country codes by ISO 3166-1 alpha3 notation\n\n# North America\ndf['Federation'].replace('CAY', 'CYM', inplace = True)\n\n# South America\ndf['Federation'].replace('CHI', 'CHL', inplace = True)\ndf['Federation'].replace('FAI', 'FLK', inplace = True)\ndf['Federation'].replace('PAR', 'PRY', inplace = True)\ndf['Federation'].replace('URU', 'URY', inplace = True)\n\n# Central America\ndf['Federation'].replace('CRC', 'CRI', inplace = True)\ndf['Federation'].replace('NCA', 'NIC', inplace = True)\ndf['Federation'].replace('HON', 'HND', inplace = True)\ndf['Federation'].replace('ESA', 'SLV', inplace = True)\ndf['Federation'].replace('GUA', 'GTM', inplace = True)\ndf['Federation'].replace('PUR', 'PRI', inplace = True)\ndf['Federation'].replace('HAI', 'HTI', inplace = True)\ndf['Federation'].replace('BAH', 'BHS', inplace = True)\ndf['Federation'].replace('BAR', 'BRB', inplace = True)\ndf['Federation'].replace('ARU', 'ABW', inplace = True)\ndf['Federation'].replace('ANT', 'ATG', inplace = True)\ndf['Federation'].replace('IVB', 'VGB', inplace = True)\ndf['Federation'].replace('GRN', 'GRD', inplace = True)\ndf['Federation'].replace('SKN', 'KNA', inplace = True)\ndf['Federation'].replace('ISV', 'VIR', inplace = True)\n\n# Africa\ndf['Federation'].replace('ZIM', 'ZWE', inplace = True)\ndf['Federation'].replace('RSA', 'ZAF', inplace = True)\ndf['Federation'].replace('BOT', 'BWA', inplace = True)\ndf['Federation'].replace('MAD', 'MDG', inplace = True)\ndf['Federation'].replace('ANG', 'AGO', inplace = True)\ndf['Federation'].replace('ZAM', 'ZMB', inplace = True)\ndf['Federation'].replace('MAW', 'MWI', inplace = True)\ndf['Federation'].replace('TAN', 'TZA', inplace = True)\ndf['Federation'].replace('CGO', 'COG', inplace = True)\ndf['Federation'].replace('LES', 'LSO', inplace = True)\ndf['Federation'].replace('MTN', 'MRT', inplace = True)\ndf['Federation'].replace('ALG', 'DZA', inplace = True)\ndf['Federation'].replace('NGR', 'NGA', inplace = True)\ndf['Federation'].replace('TOG', 'TGO', inplace = True)\ndf['Federation'].replace('GUI', 'GIN', inplace = True)\ndf['Federation'].replace('BUR', 'BFA', inplace = True)\ndf['Federation'].replace('CHA', 'TCD', inplace = True)\ndf['Federation'].replace('SUD', 'SDN', inplace = True)\ndf['Federation'].replace('GEQ', 'GNQ', inplace = True)\ndf['Federation'].replace('GAM', 'GMB', inplace = True)\ndf['Federation'].replace('LBA', 'LBY', inplace = True)\ndf['Federation'].replace('SEY', 'SYC', inplace = True)\ndf['Federation'].replace('MRI', 'MUS', inplace = True)\n\n# Asia\ndf['Federation'].replace('IRI', 'IRN', inplace = True)\ndf['Federation'].replace('OMA', 'OMN', inplace = True)\ndf['Federation'].replace('ZIM', 'ZWE', inplace = True)\ndf['Federation'].replace('KSA', 'SAU', inplace = True)\ndf['Federation'].replace('UAE', 'ARE', inplace = True)\ndf['Federation'].replace('KUW', 'KWT', inplace = True)\ndf['Federation'].replace('PLE', 'PSE', inplace = True)\ndf['Federation'].replace('SRI', 'LKA', inplace = True)\ndf['Federation'].replace('NEP', 'NPL', inplace = True)\ndf['Federation'].replace('BAN', 'BGD', inplace = True)\ndf['Federation'].replace('BHU', 'BTN', inplace = True)\ndf['Federation'].replace('VIE', 'VNM', inplace = True)\ndf['Federation'].replace('CAM', 'KHM', inplace = True)\ndf['Federation'].replace('MYA', 'MMR', inplace = True)\ndf['Federation'].replace('MAS', 'MYS', inplace = True)\ndf['Federation'].replace('PHI', 'PHL', inplace = True)\ndf['Federation'].replace('INA', 'IDN', inplace = True)\ndf['Federation'].replace('MGL', 'MNG', inplace = True)\ndf['Federation'].replace('TPE', 'TWN', inplace = True)\ndf['Federation'].replace('BRU', 'BRN', inplace = True)\n\n# Oceania\ndf['Federation'].replace('FIJ', 'FJI', inplace = True)\ndf['Federation'].replace('NCA', 'NCL', inplace = True)\ndf['Federation'].replace('SOL', 'SLB', inplace = True)\n\n# Europe\ndf['Federation'].replace('GER', 'DEU', inplace = True)\ndf['Federation'].replace('POR', 'PRT', inplace = True)\ndf['Federation'].replace('BUL', 'BGR', inplace = True)\ndf['Federation'].replace('GRE', 'GRC', inplace = True)\ndf['Federation'].replace('CRO', 'HRV', inplace = True)\ndf['Federation'].replace('SLO', 'SVN', inplace = True)\ndf['Federation'].replace('SUI', 'CHE', inplace = True)\ndf['Federation'].replace('NED', 'NLD', inplace = True)\ndf['Federation'].replace('DEN', 'DNK', inplace = True)\ndf['Federation'].replace('LAT', 'LVA', inplace = True)\ndf['Federation'].replace('JCI', 'JEY', inplace = True)\ndf['Federation'].replace('BER', 'BMU', inplace = True)\ndf['Federation'].replace('MNC', 'MCO', inplace = True)\ndf['Federation'].replace('GCI', 'GGY', inplace = True)\ndf['Federation'].replace(['ENG', 'SCO', 'WLS'], 'GBR', inplace = True)\n\ndf","376b1ce2":"def plot_choropleth_map(locations, values, title, colorbar_title, colorscale = 'Greens', annotations = []):\n    fig = go.Figure(\n        data = go.Choropleth(\n            locations = locations,\n            z = values,\n            text = [get_country_name(alpha_3_code) for alpha_3_code in locations],\n            colorscale = colorscale,\n            marker_line_color = 'darkgray',\n            colorbar_title = colorbar_title\n        )\n    )\n\n    fig.update_layout(\n        title_text = title,\n        title_x = 0.5,\n        geo = dict(\n                bgcolor = 'rgb(184,229,250,1)',\n                showframe = False,\n                showcoastlines = False,\n                projection_type = 'equirectangular',\n        ),\n        annotations = annotations\n    )\n    \n    fig.show()\n\nfederations_players = df['Federation'].value_counts()\nplot_choropleth_map(federations_players.index, federations_players.values, 'Players per nation', 'Count')","fbf34202":"gender_count = df['Gender'].value_counts()\n\nfig = go.Figure(\n    go.Pie(\n        labels = gender_count.index, \n        values = gender_count.values,\n        name = 'Gender'\n    )\n)\n\nfig.update_traces(\n    textinfo = 'label+percent+value',\n    marker = dict(colors = ['lightblue', 'lightpink'])\n)\n\nfig.update_layout(\n    title = 'Gender distribution',\n    title_x = 0.485\n)\n\nfig.show()","b90ff714":"activity_count = df['Inactive'].value_counts()\n\nfig = go.Figure(\n    go.Pie(\n        labels = ['Inactive' if x == 'Yes' else 'Active' for x in activity_count.index], \n        values = activity_count.values,\n        name = 'Inactive'\n    )\n)\n\nfig.update_traces(\n    textinfo = 'label+percent+value',\n    marker = dict(colors = ['#EB89B5', '#330C73'])\n)\n\nfig.update_layout(\n    title = 'Activity rate',\n    title_x = 0.49\n)\n\nfig.show()","b39ac5e5":"# Since we do not have the birth month of each player, this is a rough estimate\ndf['Age'] = df['Year_of_birth'].apply(lambda x: 2020 - x)\n\nfig = px.histogram(\n    df.query('Year_of_birth > 1900'), \n    x = 'Age', \n    color = 'Inactive', \n    marginal = 'box', \n    color_discrete_sequence = ['#EB89B5', '#330C73'],\n    opacity = 0.75\n)\n\ninactive_mean = df.query('(Year_of_birth > 1900) & (Inactive == \"Yes\")')['Age'].mean()\nactive_mean = df.query('(Year_of_birth > 1900) & (Inactive == \"No\")')['Age'].mean()\n\nfig.update_layout(\n    title = 'Age distribution', \n    title_x = 0.5,\n    barmode = 'overlay',\n    xaxis = dict(\n        tickmode = 'linear',\n        tick0 = 0,\n        dtick = 10\n    ),\n    annotations = [\n        dict(\n            x = active_mean, \n            y = 0.52,\n            xref = 'x',\n            yref = 'paper',\n            text = f'{active_mean:.2f}',\n            showarrow = False\n        ),\n        dict(\n            x = inactive_mean, \n            y = 0.52,\n            xref = 'x',\n            yref = 'paper',\n            text = f'{inactive_mean:.2f}',\n            showarrow = False\n        ),\n    ],\n    # Mean lines\n    shapes = [\n        {\n            'line': {\n                'color': '#EB89B5', \n                'dash': 'solid', \n                'width': 2\n            },\n            'type': 'line',\n            'x0': active_mean,\n            'x1': active_mean,\n            'xref': 'x',\n            'y0': 0.0,\n            'y1': 0.5,\n            'yref': 'paper'\n        },\n        {\n            'line': {\n                'color': '#330C73', \n                'dash': 'solid', \n                'width': 2\n            },\n            'type': 'line',\n            'x0': inactive_mean,\n            'x1': inactive_mean,\n            'xref': 'x',\n            'y0': 0.0,\n            'y1': 0.5,\n            'yref': 'paper'\n        }\n    ]\n)\n\nfig.show()","800034df":"fig = go.Figure()\n\nfig.add_trace(go.Histogram(x = df.query('Standard_rating > 0')['Standard_rating'], nbinsx = 12, name = 'Standard'))\nfig.add_trace(go.Histogram(x = df.query('Rapid_rating > 0')['Rapid_rating'], nbinsx = 12, name = 'Rapid'))\nfig.add_trace(go.Histogram(x = df.query('Blitz_rating > 0')['Blitz_rating'], nbinsx = 12, name = 'Blitz'))\n\nfig.update_xaxes(title_text = 'Rating')\nfig.update_yaxes(title_text = 'Count')\n\nfig.update_layout(\n    title = 'Rating distribution',\n    title_x = 0.5,\n    xaxis = dict(\n        tickmode = 'array',\n        tickvals = [x for x in range(1100, 3000, 200)],\n        ticktext = [f'{v} - {v + 199}' for v in range(1000, 3000, 200)]\n    )\n)\n\nfig.show()","43a85bd9":"data = df['Title'].value_counts(normalize = True)\n\nfig = px.bar(x = data.index, y = data.values * 100.0, text = data.values * 100.0)\n\nfig.update_xaxes(title = 'Title', categoryorder = 'total descending')\nfig.update_yaxes(title = 'Percentage')\n\nfig.update_traces(\n    texttemplate = '%{text:.2f}%', textposition = 'outside'\n)\n\nfig.update_layout(\n    title_text = \"Title distribution\",\n    title_x = 0.5,\n    uniformtext_minsize = 8, \n    uniformtext_mode = 'hide'\n)\n\nfig.show()","7e7f6f1a":"fig = px.sunburst(\n    df.query('Title == \"GM\" | Title == \"IM\" | Title == \"FM\" | Title == \"CM\"'), \n    path = ['Federation', 'Title'], \n    names = 'Title'\n)\n\nfig.update_layout(title = 'Distribution of FIDE open titles per country', title_x = 0.5)\n\nfig.show()","a39d96d7":"gms_df = df.query('Title == \"GM\"')\n\nfig = px.scatter_3d(\n    gms_df, \n    x = 'Standard_rating', \n    y = 'Rapid_rating', \n    z = 'Blitz_rating',\n    color = 'Gender',\n    opacity = 0.7,\n    custom_data = ['Name', 'Federation']\n)\n\nfig.update_traces(\n    hovertemplate =\n    'Standard: %{x}<br>' +\n    'Rapid: %{y}<br>' +\n    'Blitz: %{z}<br>' +\n    '<b>%{customdata[0]}<\/b><br>'+\n    '%{customdata[1]}'\n) \n\nfemale_gms_percent = len(gms_df.query('Gender == \"Female\"'))\/len(gms_df) * 100.0\n\nfig.update_layout(\n    title = 'GMs average rating distribution',\n    title_x = 0.5,\n    scene = dict(\n        xaxis = dict(title = 'Standard'),\n        yaxis = dict(title = 'Rapid'),\n        zaxis = dict(title = 'Blitz')\n    ),\n    annotations = [\n        dict(\n            xref = 'paper', \n            yref = 'paper',\n            x = 0.515, y = 1.05,\n            text = f'Only {female_gms_percent:.2f}% of all GMs are women',            \n            font = dict(\n                family = 'Arial', \n                size = 10\n            ),\n            showarrow = False\n        )\n    ]\n)\n\nfig.show()","01123116":"fig = go.Figure()\n\nfor title in ['GM', 'FM', 'IM', 'CM']:\n    top_by_title = df.query('(Title == @title) & (Inactive == \"No\")') \\\n                     .sort_values(by = 'Standard_rating', ascending = False) \\\n                     .head(1) \\\n                     .reset_index(drop = True)\n    \n    avg_rating = (top_by_title['Standard_rating'][0] + \n                 top_by_title['Rapid_rating'][0] +\n                 top_by_title['Blitz_rating'][0])\/3\n    \n    fig.add_trace(\n        go.Scatterpolar(\n            r = [\n                top_by_title['Standard_rating'][0], \n                top_by_title['Rapid_rating'][0], \n                top_by_title['Blitz_rating'][0],\n                avg_rating\n            ],\n            theta = ['Standard rating', 'Rapid rating', 'Blitz rating', 'Average rating'],\n            fill = 'toself',\n            name = f'{top_by_title.Title[0]} {top_by_title.Name[0]}'\n        )\n    )\n\nfig.update_layout(\n    title = 'Rating comparison between the top GM, IM, FM and CM',\n    title_x = 0.46\n)\n\nfig.show()","ffa4ee96":"def get_top_x_players_by_mode(mode: str, top: int, status: str):\n    if (mode != 'Standard' and mode != 'Rapid' and mode != 'Blitz'):\n        raise ValueError(mode)\n    elif (status != 'all' and status != 'inactive' and status != 'active'):\n        raise ValueError(mode)\n        \n    mode += '_rating'\n    new_df = df.query(f'({mode} > 0)')\n    \n    if (status != 'all'):\n        inactive = 'Yes' if status == 'inactive' else 'No'\n        new_df = new_df.query('Inactive == @inactive')\n        \n    return new_df.sort_values(ascending = False, by = mode).head(top)\n\ntop = 10\n\nfig = make_subplots(rows = 3, cols = 1)\n\nfor i, mode in enumerate(['Standard', 'Rapid', 'Blitz'], 1):\n    rank_df = get_top_x_players_by_mode(mode, top, 'active')\n    \n    fig.add_trace(\n        go.Bar(            \n            x = rank_df[mode + '_rating'],\n            y = rank_df['Name'],   \n            hovertext = [f'Country: {get_country_name(alpha_3_code)}' for alpha_3_code in rank_df['Federation']],\n            name = mode,\n            orientation = 'h'\n        ),\n        row = i,\n        col = 1,\n    )\n\nfig.update_layout(\n    title = f'Top {top} active players by rating', \n    title_x = 0.5,\n    width = 800,\n    height = 800,\n    yaxis1 = dict(autorange = 'reversed'),\n    yaxis2 = dict(autorange = 'reversed'),\n    yaxis3 = dict(autorange = 'reversed')\n)\n\n    \nfig.show()","6fc7cfae":"def get_top_x_countries_by_mode(mode: str, top: int, num_players = 500):\n    if (mode != 'Standard' and mode != 'Rapid' and mode != 'Blitz'):\n        raise ValueError\n    \n    mode = mode + '_rating'\n    \n    return df.query(f'{mode} > 0') \\\n             .groupby('Federation')[mode] \\\n             .agg(['count', 'mean']).query(f'count > {num_players}') \\\n             .sort_values(ascending = False, by = 'mean').head(top)\n\nmin_players = 50\nranking_df = get_top_x_countries_by_mode('Standard', len(df['Federation'].unique()), min_players)\n\nfig = go.Figure(\n    data = go.Choropleth(\n        locations = ranking_df.index,\n        z = ranking_df['mean'],\n        text = ['{}<br>Players: {:n}'.format(get_country_name(row[0]), row[1]['count']) for row in ranking_df.iterrows()], \n        colorscale = 'RdBu',\n        marker_line_color = 'darkgray',\n        colorbar_title = 'Rating'\n    )\n)\n\nfig.update_layout(\n    title_text = 'Countries by average rating',\n    title_x = 0.5,\n    geo = dict(\n            bgcolor = 'rgb(184,229,250,1)',\n            showframe = False,\n            showcoastlines = False,\n            projection_type = 'equirectangular',\n    ),\n    annotations = [\n        dict(\n            xref = 'paper', \n            yref = 'paper',\n            x = 0.5, y = -0.15,\n            text = \n            f'Values considering the Standard game mode.<br>' +\n            f'Only countries with at least {min_players} players with a FIDE rating were accounted.',            \n            font = dict(\n                family = 'Arial', \n                size = 12, \n                color = 'rgb(150,150,150)'\n            ),\n            showarrow = False\n        )\n    ]\n)\n\nfig.show()","1fae99de":"corr = df[['Standard_rating', 'Rapid_rating', 'Blitz_rating', 'Age']].corr()\n\nfig, ax = plt.subplots(figsize = (12, 8))\n\nax = sns.heatmap(\n    corr,\n    mask = np.triu(np.ones_like(corr, dtype = bool)),\n    cmap = 'YlGnBu',\n    center = 0,\n    square = True,\n    linewidths = 0.5,\n    annot = True,\n    fmt = '.2f', \n    annot_kws = {'size': 12},\n)\n\nax.set_title('Correlation matrix', fontsize = 18)\n\nax.set_xticks(ax.get_xticks()[:-1])\nax.set_yticks(ax.get_yticks()[1:])\nax.tick_params(left = False, bottom = False)\n\nfig.show()","8573d7b8":"top = 500\nfig = make_subplots(rows = 3, cols = 1, subplot_titles = ('Standard', 'Rapid', 'Blitz'))\n\nfor i, mode in enumerate(['Standard', 'Rapid', 'Blitz'], 1):\n    mode_df = get_top_x_players_by_mode(mode, top, 'all').query('Age <= 110').reset_index()\n    \n    for label in mode_df['Inactive'].unique():\n        kind_df = mode_df.query('Inactive == @label')\n        \n        fig.add_trace(\n            go.Scatter(\n                y = kind_df['Age'],\n                x = kind_df[mode + '_rating'],\n                mode = 'markers',\n                marker = dict(\n                    color = ['blue' if label == 'No' else 'red'] * top\n                ),\n                name = label,\n                legendgroup = label,\n                text = [f'{i + 1} - <b>{row.Name}<\/b><br>{get_country_name(row.Federation)}' for i, row in kind_df.iterrows()],\n                showlegend = True if i == 1 else False\n            ),\n            row = i,\n            col = 1,\n        )\n    \nfig.update_layout(\n    title = f'Relationship between age and rating for the top {top} players',\n    title_x = 0.5,\n    legend_title_text = 'Inactive',\n    xaxis3 = dict(title = 'Age'),\n    yaxis2 = dict(title = 'Rating')\n)\n\nfig.show()","1c2f9c24":"# Profile of FIDE chess players\n\nThe average FIDE chess players are young men with a rating varying from 1400 to 1999. The **Standard** game mode is the most popular, followed by **Rapid** and **Blitz**.\n\nThe mean age is 28.58 for active players, and 37.96 for the inactive ones. ","fa55bdce":"# Data cleaning\n\nBefore jumping into the analysis, we have to do some basic cleaning in order to keep our data consistent.","bebb5554":"As one can see, there are 10 columns. The `Fide Id` attribute is not useful for explorary data analysis, thus we will drop it.\nThe rest of the cleaning is as follows.","46fcbb87":"## By player\n\n[Magnus Carlsen](https:\/\/en.wikipedia.org\/wiki\/Magnus_Carlsen), the current World Champion, leads both the standard and rapid rankings with a FIDE rating of 2863 and 2881, respectively. He is also in second place in the Blitz rankings, only behind [Hikaru Nakamura](https:\/\/en.wikipedia.org\/wiki\/Hikaru_Nakamura), who leads with 2900 rating. The list of famous players that appear in the rankings include [Fabiano Caruana](https:\/\/en.wikipedia.org\/wiki\/Fabiano_Caruana), [Viswanathan Anand](https:\/\/en.wikipedia.org\/wiki\/Viswanathan_Anand), [Ding Liren](https:\/\/en.wikipedia.org\/wiki\/Ding_Liren), [Maxime Vachier-Lagrave](https:\/\/en.wikipedia.org\/wiki\/Maxime_Vachier-Lagrave), [Ian Nepomniachtchi](https:\/\/en.wikipedia.org\/wiki\/Ian_Nepomniachtchi), amongst others.\n\n![Magnus Carlsen](https:\/\/static.independent.co.uk\/s3fs-public\/thumbnails\/image\/2020\/04\/20\/14\/gettyimages-1199899108.jpg?w968h681)","89173f84":"## By country","f88ec3b1":"The scatter plot below shows this chaotic behavior for the top 500 players in the world. Although the best players such Magnus Carlsen and Ian Nepomniactchi are usually under 35 years old, the rest varies significantly. ","2a2c9b6d":"# Age vs rating\n\nThe initial hypothesis was that, somehow, the player's age had some influence on their rating. However, this cannot be proven in the general case, as shown in the correlation matrix below.","87d714bf":"# Global reach\n\nOur very first step is to check the global distribution of the players. Note that this review covers both active and inactive players.","4a8ddfea":"# Introduction\n\nFIDE is the french acronym for *International Chess Federation*. As the [FIDE website](https:\/\/www.fide.com) states:\n\n> The International Chess Federation (FIDE) is the governing body of the sport of chess, and it regulates all international chess competitions. It was founded in 1924 in Paris (France), under the motto \u201cGens una Sumus\u201d (Latin for \u201cWe are one Family\u201d). FIDE is a non-governmental institution, and it was one of the first associations of its kind in the world, alongside the governing bodies of the sports of Football, Cricket, Swimming, and Auto Racing. In 1999, FIDE was recognized by the International Olympic Committee as a Global Sporting Organization.\n\nThe 2020 public report showed nearly one million affiliated players around the world.\n\nThis notebook aims to analyze these players profiles and check the correlation between their descriptive variables and their performance (according to the [Elo Rating System](https:\/\/en.wikipedia.org\/wiki\/Elo_rating_system)).   \n\n![Chess](https:\/\/en.chessbase.com\/thumb\/93440_l200)\n","f8b9752b":"From the figure we can see that Magnus Carlsen, the top GM and current World Champion, dominates in every aspect. ","238916ea":"*Note*: the special title \"WH\" stands for \"Woman Honorary Grandmaster\" and was awarded to Corry Vreeken.","5e9d1805":"*Tip*: Click on the corresponding country section for a better view. ","7932544f":"# Rankings\n\nAlthough the [FIDE website](https:\/\/www.fide.com\/) displays all the updated rankings, let's take a quick glance in a visual manner.","29359f3a":"# Conclusion\n\nFIDE is the international governing body of the chess sport, and it has many affiliated players around the world. From FIDE's monthly players report, we built a dataframe for analyzing these players' profile. The data had some incosistencies and missing values, thus a basic data cleaning was conducted in order to proceed with the analysis. \n\nOur Exploratory Data Analysis (EDA) first checked the distribution of the players around the world, where it was identified that 2 players out of 10 come from Russia or India. Then, we drew a profile of the average chess player, which is generally young men with a rating varying from 1400 to 1999. Moreover, we analyzed the distribution of FIDE open titles, which showed Russia's dominance of titled players, especially the grandmasters. Finally, rankings were plotted in order to show what players and countries are best positioned in the world. \n\nThe initial hypothesis was that the age influenced the player's performance, however this could not be proven. An interactive scatter plot showed that the age varies significantly within the rating.       \n\nThis notebook was inspired by the work of [Arindam Baruah](https:\/\/www.kaggle.com\/arindambaruah), on his notebook [Who is dominating Women's chess?](https:\/\/www.kaggle.com\/arindambaruah\/who-is-dominating-women-s-chess\/notebook). If you liked this notebook, please be sure to also give his work a check.","3017c971":"# FIDE titles\n\nFrom [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/FIDE_titles#Candidate_Master_(CM):\n\n> FIDE titles are awarded [...] for outstanding performance. The highest such title is Grandmaster (GM). Titles generally require a combination of Elo rating and norms (performance benchmarks in competitions including other titled players). Once awarded, titles are held for life except in cases of fraud or cheating. Open titles may be earned by all players, while women's titles are restricted to female players. Many strong female players hold both open and women's titles.\n\nThe possible titles (a.k.a open titles) a player can achieve include:\n\n1. Grandmaster (GM)\n2. International Master (IM)\n3. FIDE Master (FM)\n4. Candidate Master (CM)\n\nWomen restricted titles are the analogue but prefixed with a \"W\", for instance: WGM, WIM, WFM and WCM.\n\n## Distribution\n\nThe vast majority (98.03%) of registered FIDE players do not own any title. \n\nRussia, Germany and United States hold the most number of titles and GMs, respectively.","0f60b376":"Cuba, from the legendary player [Jos\u00e9 Ra\u00fal Capablanca](https:\/\/pt.wikipedia.org\/wiki\/Jos%C3%A9_Ra%C3%BAl_Capablanca), leads the Standard average rating, considering countries with at least 50 players.\n\nIt is interesting to note that although India have many top players, such as Viswanathan Anand, Pentala Harikrishna, Nihal Sarin, Rameshbabu Praggnanandhaa, etc, it still accounts for one of the worst ratings overall. On the other hand, Russia with almost the same number of players has a rating that is 25.60% higher.  ","9ef9b86b":"## Comparison between the best title holders\n\nFor the sake of curiosity, the following radar chart shows the rating difference between the best player in each title category.","4079ae74":"The dataframe is now ready to be used. Players without a FIDE rating in any category (Standard, Rapid or Blitz) are assigned with a value of 0.","6507b455":"## Gender inequality\n\nAlthough 14.8% of all players are women, they represent only 2.15% of all GMs.","96ff0bbe":"As one can see, FIDE has affiliated players all over the world, where India and Russia dominate with more than 90,000 players each. Apart from those countries, Europe (France, Spain, Germany, ...) and Asia's middle east (Turkey and Iran) also count for a lot of players. Ranking by continents gives us the following list:\n\n* **South America**: Brazil (18,089)\n* **Central America**: Mexico (7,841)\n* **North America**: United States (17,895)\n* **Europe**: Russia (93,579)\n* **Asia**: India (95,945)\n* **Oceania**: Australia (4,595)","3f41c6f7":"The oldest player in the top 500 is **Robert Huebner**, 72, occupying position number 372 with 2574 rating, while the youngest is **Gukesh D**, 14, occupying position number 438 with 2563 rating."}}