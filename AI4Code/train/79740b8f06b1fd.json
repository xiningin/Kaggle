{"cell_type":{"dcf5b72b":"code","4947cae7":"code","0db4feaf":"code","22e1b4a0":"code","5ce395a3":"code","753c4e11":"code","2460f8ec":"code","659c42c3":"code","7b397326":"code","29fe5e9a":"code","944e3f20":"code","572dfd44":"code","cc8e9905":"code","2f7c3be8":"code","90ddf3c6":"code","12da3da5":"code","53a72612":"code","5f8e6b4c":"code","ee6402ef":"code","ef8d477c":"code","6f5257ec":"code","aea00352":"code","206a5153":"code","e68b002b":"code","a908e4df":"code","2106f2e9":"code","b0b18488":"markdown","0f115ae6":"markdown"},"source":{"dcf5b72b":"import numpy as np\nfrom random import randint\nfrom sklearn.preprocessing import MinMaxScaler","4947cae7":"train_labels = []\ntrain_samples = []","0db4feaf":"for i in range(1000):\n    random_younger = randint(13,64)\n    train_samples.append(random_younger)\n    train_labels.append(0)\n    \n    random_older = randint(65,100)\n    train_samples.append(random_older)\n    train_labels.append(1)\n    \nfor i in range(50):\n    random_younger = randint(13,64)\n    train_samples.append(random_younger)\n    train_labels.append(1)\n    \n    random_older = randint(65,100)\n    train_samples.append(random_older)\n    train_labels.append(0)","22e1b4a0":"train_samples[:10]","5ce395a3":"train_labels[:10]","753c4e11":"train_samples = np.array(train_samples)\ntrain_labels = np.array(train_labels)","2460f8ec":"scaler = MinMaxScaler(feature_range=(0,1))\nscaled_train_samples = scaler.fit_transform((train_samples).reshape(-1,1))","659c42c3":"scaled_train_samples[:10]","7b397326":"test_labels = []\ntest_samples = []","29fe5e9a":"for i in range(10):\n    random_younger = randint(13,64)\n    test_samples.append(random_younger)\n    test_labels.append(1)\n    \n    random_older = randint(65,100)\n    test_samples.append(random_older)\n    test_labels.append(0)\n    \nfor i in range(200):\n    random_younger = randint(13,64)\n    test_samples.append(random_younger)\n    test_labels.append(0)\n    \n    random_older = randint(65,100)\n    test_samples.append(random_older)\n    test_labels.append(1)","944e3f20":"test_labels = np.array(test_labels)\ntest_samples = np.array(test_samples)","572dfd44":"scaled_test_samples = scaler.fit_transform((test_samples).reshape(-1,1))","cc8e9905":"import keras\nfrom keras import backend as K\nfrom keras.models import Sequential\nfrom keras.layers import Activation\nfrom keras.layers.core import Dense\nfrom keras.optimizers import Adam\nfrom keras.metrics import categorical_crossentropy","2f7c3be8":"model = Sequential([\n    Dense(16, input_shape=(1,), activation='relu'),\n    Dense(32, activation='relu'),\n    Dense(2, activation='softmax')\n])","90ddf3c6":"model.summary()","12da3da5":"model.compile(Adam(lr=0.0001), loss='sparse_categorical_crossentropy', metrics=['accuracy'])","53a72612":"#model.fit(scaled_train_samples, train_labels, batch_size=10, epochs=20, shuffle=True, verbose=2)","5f8e6b4c":"model.fit(scaled_train_samples, train_labels, validation_split=0.1, batch_size=10, epochs=20, verbose=2, shuffle=True)","ee6402ef":"prediction = model.predict(scaled_test_samples, batch_size=10, verbose=0)","ef8d477c":"prediction[:10]","6f5257ec":"rounded_prediction = model.predict_classes(scaled_test_samples, batch_size=10, verbose=0)","aea00352":"rounded_prediction[:10]","206a5153":"%matplotlib inline\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nimport matplotlib.pyplot as plt","e68b002b":"cm = confusion_matrix(test_labels, rounded_prediction)","a908e4df":"def plot_confusion_matrix(cm, classes, normalize=False, title='Confusion matrix', cmap=plt.cm.Blues):\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks=np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n    \n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"normalized confusion matrix\")\n    else:\n        print(\"confusion matrix, without normalization\")\n        \n    print(cm)\n    \n    thres = cm.max() \/ 2.\n    for i,j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j], horizontalalignment='center', color='white' if cm[i,j] > thres else \"black\")\n        \n    plt.tight_layout()\n    plt.ylabel('true label')\n    plt.xlabel('predicted label')","2106f2e9":"cm_plot_labels = ['no_side_effects', 'had_side_effects']\nplot_confusion_matrix(cm, cm_plot_labels, title='confusion matrix')","b0b18488":"adding 220 test samples, (similar distribution as of train samples)\n\nin which again 95% of patients above 65 have side effects\n\nand 95% of patients of below 65 age has no side effects","0f115ae6":"total 2100 samples of participants aged between 13 to 100 for drug test.\n\n95% of patients above 65 have side effects\n\n95% of patients below 65 do not have side effects"}}