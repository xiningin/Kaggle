{"cell_type":{"ac7cce34":"code","eb37b1e8":"code","09c56dfa":"code","15f7824f":"code","f04844b3":"code","9a52341b":"code","ca12a04f":"code","087cc3ec":"code","baa4ab31":"code","580de6af":"code","1993b2b6":"code","a841bffa":"code","d0152af0":"code","04865e1b":"code","c4d836fe":"code","b50d39b8":"code","48b03678":"code","b18b6ae5":"code","042f46e7":"code","c2c2dade":"code","7e3a2b12":"code","f37c96dd":"code","1f7eb567":"code","2e9cca67":"code","88ce4e60":"code","b241d4c5":"code","3a29f99a":"code","491c52fa":"code","c3ca31bf":"code","76fd8860":"markdown","41e8553f":"markdown","c7fee405":"markdown"},"source":{"ac7cce34":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eb37b1e8":"# Directive pour afficher les graphiques dans Jupyter\n%matplotlib inline","09c56dfa":"from matplotlib import pyplot as plt","15f7824f":"df = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndf","f04844b3":"df.head(15)","9a52341b":"df.columns","ca12a04f":"df.shape","087cc3ec":"df.describe()","baa4ab31":"from IPython.core.display import HTML # permet d'afficher du code html dans jupyter\ndisplay(HTML(df.head(10).to_html()))","580de6af":"def replace_0(df,col) :\n    df1 = df.copy()\n    n = df.shape[0]\n    m = df[col].mean()\n    s = df[col].std()\n    for i in range(len(df.index)):\n        if df.loc[i,col] == 0 :\n            df1.loc[i,col] = np.random.normal(m, s);\n    return df1","1993b2b6":"lista = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']\nfor column in lista :\n    df = replace_0(df, column)","a841bffa":"display(HTML(df.head(10).to_html()))","d0152af0":"df.Outcome.value_counts()","04865e1b":"from matplotlib import pyplot as plt\nimport seaborn as sns","c4d836fe":"sns.jointplot(\"Age\", \"Glucose\", df, kind='kde');","b50d39b8":"sns.boxplot(x=\"Age\", y=\"Glucose\", data=df)","48b03678":"sns.lmplot(x=\"Age\", y=\"Glucose\", data=df, fit_reg=False, hue='Outcome')","b18b6ae5":"data_train = df.sample(frac=0.8, random_state=1)          # 80% des donn\u00e9es avec frac=0.8\ndata_test = df.drop(data_train.index)                     # le reste des donn\u00e9es pour le test\n\n#data_train # dados para serem treinads\ndata_test  # dados para verifica\u00e7\u00e3o","042f46e7":"X_train = data_train.drop(['Outcome'], axis=1)\ny_train = data_train['Outcome']\nX_test = data_test.drop(['Outcome'], axis=1)\ny_test = data_test['Outcome']\n","c2c2dade":"plt.figure(figsize=(9,9))\n\nlogistique = lambda x: np.exp(x)\/(1+np.exp(x))   \n\nx_range = np.linspace(-10,10,50)       \ny_values = logistique(x_range)\n\nplt.plot(x_range, y_values, color=\"red\")","7e3a2b12":"    from sklearn.linear_model import LogisticRegression","f37c96dd":"lr = LogisticRegression(solver='liblinear')\nlr.fit(X_train,y_train)","1f7eb567":"y_lr = lr.predict(X_test)","2e9cca67":"from sklearn.metrics import accuracy_score, confusion_matrix","88ce4e60":"lr_score = accuracy_score(y_test, y_lr)\nprint(lr_score)","b241d4c5":"# Matrice de confusion\nc_matrix = confusion_matrix(y_test, y_lr)\nprint(c_matrix)","3a29f99a":"pd.crosstab(y_test, y_lr, rownames=['Reel'], colnames=['Prediction'], margins=True)\n","491c52fa":"from sklearn import ensemble\nrf = ensemble.RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)\n\nrf_score = accuracy_score(y_test, y_rf)","c3ca31bf":"print(rf_score)","76fd8860":"# Random Forest","41e8553f":"# Regression","c7fee405":"# Machine Learning"}}