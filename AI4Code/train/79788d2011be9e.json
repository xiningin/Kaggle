{"cell_type":{"10d8eecf":"code","fd655b9c":"code","42589b6f":"code","19ad8105":"code","f2f7eaed":"code","808d1d90":"code","62b749c3":"code","89a5dd44":"code","9bc71ba2":"code","191ada28":"code","82c83cad":"code","218d7c1a":"code","4b564d37":"code","7d67b17d":"code","c2a8c892":"code","17f0ae87":"code","5e71217e":"code","1186bf0c":"code","5ce72453":"code","77c20773":"code","ac76144d":"code","c528b5ac":"code","ac3a5daa":"code","3651e2d8":"code","f2ddae74":"code","b8f06461":"code","54a73cf7":"code","1ed45539":"code","e402e271":"code","e6141a6b":"code","4b0ce71b":"code","e21f4bbd":"code","f9d153ca":"code","700cb0ed":"code","14333b96":"code","39127566":"code","f35d0728":"code","13580627":"code","b77d6a55":"code","9dd2d504":"code","082f1798":"code","2c719b20":"code","6afafba9":"code","ae548944":"code","f822aa26":"code","7691dfbc":"code","614b5c86":"code","c453e60a":"code","505689eb":"code","27a6afc0":"code","a7dd6f20":"code","80fc8ee4":"code","05dd43c4":"code","0fdaffc4":"code","2472c313":"code","ac03e94e":"code","89274f05":"markdown","0641b0d5":"markdown","6dcd9acb":"markdown","1d00c903":"markdown","3515b7f2":"markdown","9bd591d9":"markdown","ce544fb5":"markdown","3cc6a495":"markdown","24b632b4":"markdown","768a6b18":"markdown","81c02b7b":"markdown","fd79aa3e":"markdown","c1f0d5a5":"markdown","60646f56":"markdown","748cba36":"markdown","a53fbb6d":"markdown","c8efba96":"markdown","696e264b":"markdown","699cfd29":"markdown","4f8c755e":"markdown","f8d40104":"markdown","3b5545b1":"markdown","ab6b4e50":"markdown","28698f01":"markdown","fda9b0a2":"markdown","a037367f":"markdown","3db9336c":"markdown","cf132176":"markdown","b6a5056a":"markdown","1537d82b":"markdown","0a2dbe05":"markdown","ba6d0570":"markdown","e25d1477":"markdown","1a04689e":"markdown","87a853a3":"markdown","60f60852":"markdown","a0af88aa":"markdown","f5db7348":"markdown","8dbe6feb":"markdown","d3aa2f47":"markdown","5f8a45a5":"markdown","9fb14232":"markdown","29c23f2b":"markdown","f01552e1":"markdown","e35a0bcd":"markdown","904acc17":"markdown","9e4fdeba":"markdown","03e06783":"markdown","931a3f56":"markdown"},"source":{"10d8eecf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd655b9c":"import pandas as pd\ndf=pd.read_csv('\/kaggle\/input\/world-foodfeed-production\/FAO.csv')","42589b6f":"df.head()","19ad8105":"df.columns","f2f7eaed":"# import pandas as pd\n# df_bulkdata=pd.read_csv('..\/input\/bulkdata\/Production_Crops_E_All_Data.csv')\n# df_bulkdata.head()\n# list(df_bulkdata.columns)\n# columns_to_be_deleted=list(df_bulkdata.columns[df_bulkdata.columns.str.contains(\"F\", na=False)])\n# columns_to_be_deleted\n# df_bulkdata.drop(columns_to_be_deleted, axis = 1) \n# df_bulkdata.drop(df_bulkdata.loc[(df_bulkdata[\"Element\"] == 'Yield') |  (df_bulkdata[\"Element\"] == 'Area harvested')].index,inplace=True)\n# df_bulkdata","808d1d90":"#lets melt the data frame\nmelted_df=pd.melt(df,id_vars=['Area Abbreviation', 'Area Code', 'Area', 'Item Code', 'Item',\n       'Element Code', 'Element', 'Unit', 'latitude', 'longitude'],var_name=\"Year\",value_name=\"Production\")\n\n#Note: df1 renamed as melted_df\nmelted_df","62b749c3":"new_col_names=[]\nfor i in melted_df['Year']:\n    i=i.replace('Y','')\n    new_col_names.append(i)\nmelted_df['Year'] = new_col_names\nmelted_df.head()","89a5dd44":"melted_df.dtypes.sample(12)","9bc71ba2":"# melted_df['Year'] = melted_df['Year'].astype('datetime64[ns]')\n# # melted_df['Year'] = pd.to_datetime(melted_df['Year'], format='%y%m%d') \n# melted_df['Year']= pd.DatetimeIndex(melted_df['Year']).year\nmelted_df['Year'] = melted_df['Year'].astype(int)\n# from datetime import datetime\n# melted_df['Year'] = datetime.strptime(melted_df['Year'],'%Y')\nmelted_df.Year.dtypes","191ada28":"melted_df.describe()","82c83cad":"melted_df.info()","218d7c1a":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n# plotting\n\n#Here we have grouped the data set by year and did sum of total production for each year \nyearly_prod = melted_df.groupby(\"Year\", as_index=False).agg({\"Production\":\"sum\"})\nplt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(12,6))\nplt.rcParams.update({'font.size': 10})\n\n_ = sns.lineplot(x=\"Year\", y=\"Production\", data=yearly_prod,color=\"Orange\")\n\nplt.title(\"Evolution of Total Food Items Production in the World\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Production, billion tonnes\")\n# plt.yticks([0, 4000000, 6000000, 8000000, 10000000, 12000000], [\"0\", \"4\", \"6\", \"8\", \"10\", \"12\"])\nplt.xticks(list(melted_df.Year.unique()))\nplt.xticks(rotation=90)\nplt.grid(b=None)\nplt.show()","4b564d37":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n# plotting\n\n#Here we have grouped the data set by year and did sum of total production for each year \nyearly_prod_food=melted_df[(melted_df[\"Element\"] == 'Food')].groupby(\"Year\", as_index=False).agg({\"Production\":\"sum\"})\nyearly_prod_feed=melted_df[(melted_df[\"Element\"] == 'Feed')].groupby(\"Year\", as_index=False).agg({\"Production\":\"sum\"})\nplt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(12,6))\nplt.rcParams.update({'font.size': 10})\n\n_ = sns.lineplot(x=\"Year\", y=\"Production\", data=yearly_prod_food,    linestyle = (0,(0.1,2)),\n    dash_capstyle = 'round',\n    linewidth = 6,\n    color = 'Green',label=\"Food production\")\n_ = sns.lineplot(x=\"Year\", y=\"Production\", data=yearly_prod_feed,linestyle = (0,(0.1,2)),\n    dash_capstyle = 'round',\n    linewidth = 6,\n    color = 'Blue',label=\"Feed production\")\n\nplt.title(\"Evolution of Total Food Items Production in the World\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Production, billion tonnes\")\n# plt.yticks([0, 4000000, 6000000, 8000000, 10000000, 12000000], [\"0\", \"4\", \"6\", \"8\", \"10\", \"12\"])\nplt.xticks(list(melted_df.Year.unique()))\nplt.xticks(rotation=90)\nplt.grid(b=None)\nplt.legend(loc='center left')\nplt.show()","7d67b17d":"melted_df_allcountries = melted_df.groupby([\"Area\",\"Year\"], as_index=False).agg({\"Production\":\"sum\"})\nmelted_df_allcountries_top5=melted_df_allcountries.sort_values('Production',ascending=False)\nmelted_df_allcountries.head()\nmelted_df_allcountries_top5.head(25)\n","c2a8c892":"plt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(24,12))\nplt.rcParams.update({'font.size': 12})\nimport seaborn as sns\n\nsns.lineplot(data=melted_df_allcountries, x='Year', y='Production', hue='Area')\n\nplt.title(\"Country-wise Total elements Production in the World\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Production, billion tonnes\")\n# plt.yticks([0, 4000000, 6000000, 8000000, 10000000, 12000000], [\"0\", \"4\", \"6\", \"8\", \"10\", \"12\"])\n# plt.legend(loc='upper center')\n# plt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3, ncol=8, mode=\"expand\", borderaxespad=0.)\n# plt.legend(loc=4, ncol=8, mode=\"expand\", borderaxespad=0.)\nplt.legend(loc='best',ncol=8, mode=\"expand\", borderaxespad=0.)\n# plt.xticks(rotation=90)\n# year_list = list(melted_df.Year.unique())\n# plt.xticks(np.arange(53), tuple(year_list), rotation=60)\nplt.xticks(list(melted_df.Year.unique()))\nplt.xticks(rotation=90)\n\nplt.grid(b=None)\nplt.show()","17f0ae87":"country_wise_total_prod = melted_df.groupby(\"Area\", as_index=False).agg({\"Production\":\"sum\"})\ncountry_wise_total_prod\n","5e71217e":"list_top_10_countries=country_wise_total_prod.sort_values('Production',ascending=False)['Area'][:10].tolist() \nmelted_df_allcountries_top10 = melted_df[(melted_df[\"Area\"].isin(list_top_10_countries))].groupby([\"Area\",\"Year\"], as_index=False).agg({\"Production\":\"sum\"})\n# melted_df_allcountries_top5=melted_df_allcountries.sort_values('Production',ascending=False)[:]\n\n\nplt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(24,12))\nplt.rcParams.update({'font.size': 12})\nimport seaborn as sns\n\nsns.lineplot(data=melted_df_allcountries_top10, x='Year', y='Production', hue='Area')\n\nplt.title(\"Top 10 countries: All elements total Production in the World\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Production, billion tonnes\")\n# plt.yticks([0, 4000000, 6000000, 8000000, 10000000, 12000000], [\"0\", \"4\", \"6\", \"8\", \"10\", \"12\"])\n# plt.legend(loc='upper center')\n# plt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3, ncol=8, mode=\"expand\", borderaxespad=0.)\n# plt.legend(loc=4, ncol=8, mode=\"expand\", borderaxespad=0.)\nplt.legend(loc='best',ncol=8, mode=\"expand\", borderaxespad=0.)\n# plt.xticks(rotation=90)\n# year_list = list(melted_df.Year.unique())\n# plt.xticks(np.arange(53), tuple(year_list), rotation=60)\nplt.xticks(list(melted_df.Year.unique()))\nplt.xticks(rotation=90)\n\nplt.grid(b=None)\nplt.show()","1186bf0c":"plt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(30,20))\nplt.rcParams.update({'font.size': 12})\nplt.xticks(rotation=90)\nplt.title(\"Country-wise all elements Production in the World 1961-2013\")\nplt.xlabel(\"Countries\")\nplt.ylabel(\"Production, billion tonnes\")\nplt.bar('Area','Production',data=country_wise_total_prod.sort_values('Production',ascending=False),color='Orange')\nplt.show()","5ce72453":"#Lets find the top 10 countries with highest production irrespective of crop\ncountry_wise_total_prod.sort_values('Production',ascending=False).head(10)\nlist_top_10_countries=country_wise_total_prod.sort_values('Production',ascending=False)['Area'][:10].tolist() \n# print(list_top_10_countries)\nfor i in list_top_10_countries:\n    print(i,list_top_10_countries.index(i))","77c20773":"country_wise_total_prod_2013 = melted_df[(melted_df[\"Year\"] == 2013)].groupby(\"Area\", as_index=False).agg({\"Production\":\"sum\"})\nplt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(24,20))\nplt.rcParams.update({'font.size': 12})\nplt.xticks(rotation=90)\nplt.title(\"Country-wise all elements Production in the World 2013\")\nplt.xlabel(\"Countries\")\nplt.ylabel(\"Production, billion tonnes\")\nplt.bar('Area','Production',data=country_wise_total_prod_2013.sort_values('Production',ascending=False),color='Orange')\nplt.show()","ac76144d":"plt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(24,20))\nplt.rcParams.update({'font.size': 15})\nplt.xticks(rotation=90)\n\n#The below code will create two plots. The parameters that .subplot take are (row, column, no. of plots).\nplt.subplot(2,1,1)\n#This will create the bar graph for poulation\nplt.title(\"Country-wise all elements Production in the World 1961-2013\")\nplt.xlabel(\"Countries\")\nplt.ylabel(\"Production, billion tonnes\")\nplt.bar('Area','Production',data=country_wise_total_prod.sort_values('Production',ascending=False)[:10],color='Orange')\n#The below code will create the second plot.\nplt.subplot(2,1,2)\n#This will create the bar graph for gdp i.e gdppercapita divided by population.\n# plt.style.use(\"fivethirtyeight\")\n# plt.figure(figsize=(24,20))\nplt.rcParams.update({'font.size': 15})\n# plt.xticks(rotation=90)\nplt.title(\"Country-wise all elements Production in the World 2013\")\nplt.xlabel(\"Countries\")\nplt.ylabel(\"Production, billion tonnes\")\nplt.bar('Area','Production',data=country_wise_total_prod_2013.sort_values('Production',ascending=False)[:10],color='Orange')\nplt.show()","c528b5ac":"# ax.bar(ind, menMeans, width, color='r')\n# ax.bar(ind, womenMeans, width,bottom=menMeans, color='b')\n\nplt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(24,20))\nplt.rcParams.update({'font.size': 15})\nplt.xticks(rotation=90)\n\n#The below code will create two plots. The parameters that .subplot take are (row, column, no. of plots).\nplt.subplot(2,1,1)\n#This will create the bar graph for poulation\ncountry_and_element_wise_total_prod = melted_df[(melted_df[\"Element\"] == 'Food')].groupby(\"Area\", as_index=False).agg({\"Production\":\"sum\"})\nplt.title(\"Country-wise Total Food Items Production in the World 1961-2013\")\nplt.xlabel(\"Countries\")\nplt.ylabel(\"Production, billion tonnes\")\nplt.bar('Area','Production',data=country_and_element_wise_total_prod.sort_values('Production',ascending=False)[:10],color='Green')\n#The below code will create the second plot.\nplt.subplot(2,1,2)\n#This will create the bar graph for gdp i.e gdppercapita divided by population.\n# plt.style.use(\"fivethirtyeight\")\n# plt.figure(figsize=(24,20))\nplt.rcParams.update({'font.size': 15})\n# plt.xticks(rotation=90)\ncountry_and_elemet_wise_total_prod_2013 = melted_df[(melted_df[\"Year\"] == 2013)|(melted_df[\"Element\"] == 'Food')].groupby(\"Area\", as_index=False).agg({\"Production\":\"sum\"})\nplt.title(\"Country-wise Total Food Items Production in the World 2013\")\nplt.xlabel(\"Countries\")\nplt.ylabel(\"Production, billion tonnes\")\nplt.bar('Area','Production',data=country_and_elemet_wise_total_prod_2013.sort_values('Production',ascending=False)[:10],color='Green')\nplt.show()","ac3a5daa":"# ax.bar(ind, menMeans, width, color='r')\n# ax.bar(ind, womenMeans, width,bottom=menMeans, color='b')\n\nplt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(24,20))\nplt.rcParams.update({'font.size': 15})\nplt.xticks(rotation=90)\n\n#The below code will create two plots. The parameters that .subplot take are (row, column, no. of plots).\nplt.subplot(2,1,1)\n#This will create the bar graph for poulation\ncountry_and_element_wise_total_prod = melted_df[(melted_df[\"Element\"] == 'Feed')].groupby(\"Area\", as_index=False).agg({\"Production\":\"sum\"})\nplt.title(\"Country-wise Total Feed Items Production in the World 1961-2013\")\nplt.xlabel(\"Countries\")\nplt.ylabel(\"Production, billion tonnes\")\nplt.bar('Area','Production',data=country_and_element_wise_total_prod.sort_values('Production',ascending=False)[:10],color='Blue')\n#The below code will create the second plot.\nplt.subplot(2,1,2)\n#This will create the bar graph for gdp i.e gdppercapita divided by population.\n# plt.style.use(\"fivethirtyeight\")\n# plt.figure(figsize=(24,20))\nplt.rcParams.update({'font.size': 15})\n# plt.xticks(rotation=90)\ncountry_and_elemet_wise_total_prod_2013 = melted_df[(melted_df[\"Year\"] == 2013)|(melted_df[\"Element\"] == 'Feed')].groupby(\"Area\", as_index=False).agg({\"Production\":\"sum\"})\nplt.title(\"Country-wise Total Feed Items Production in the World 2013\")\nplt.xlabel(\"Countries\")\nplt.ylabel(\"Production, billion tonnes\")\nplt.bar('Area','Production',data=country_and_elemet_wise_total_prod_2013.sort_values('Production',ascending=False)[:10],color='Blue')\nplt.show()","3651e2d8":"import seaborn as sns\nplt.rcParams.update({'font.size': 12})\nelement_evolution_df=melted_df[['Item','Year','Production']]\nelement_evolution_df = element_evolution_df.groupby([\"Item\",\"Year\"], as_index=False).agg({\"Production\":\"sum\"})\n\nfig, ax = plt.subplots(figsize=(20,20))    \nheat_map = element_evolution_df.pivot(\"Item\", \"Year\", \"Production\")\nax = sns.heatmap(heat_map,cmap=\"YlGnBu\")\n# YlGnBu,cubehelix","f2ddae74":"element_wise_total_prod = melted_df.groupby([\"Item\"], as_index=False).agg({\"Production\":\"sum\"})\nlist_top_10_elements=element_wise_total_prod.sort_values('Production',ascending=False)['Item'].tolist() \nmelted_df_allelements_top10 = melted_df[(melted_df[\"Item\"].isin(list_top_10_elements))].groupby([\"Item\",\"Year\"], as_index=False).agg({\"Production\":\"sum\"})\n# melted_df_allcountries_top5=melted_df_allcountries.sort_values('Production',ascending=False)[:]\n\n\nplt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(24,12))\nplt.rcParams.update({'font.size': 12})\nimport seaborn as sns\n\nsns.lineplot(data=melted_df_allelements_top10, x='Year', y='Production', hue='Item')\n\nplt.title(\"All items total Production in the World\")\nplt.xlabel(\"Item\")\nplt.ylabel(\"Production, billion tonnes\")\n# plt.yticks([0, 4000000, 6000000, 8000000, 10000000, 12000000], [\"0\", \"4\", \"6\", \"8\", \"10\", \"12\"])\n# plt.legend(loc='upper center')\n# plt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3, ncol=8, mode=\"expand\", borderaxespad=0.)\n# plt.legend(loc=4, ncol=8, mode=\"expand\", borderaxespad=0.)\nplt.legend(loc='best',ncol=8, mode=\"expand\", borderaxespad=0.)\n# plt.xticks(rotation=90)\n# year_list = list(melted_df.Year.unique())\n# plt.xticks(np.arange(53), tuple(year_list), rotation=60)\nplt.xticks(list(melted_df.Year.unique()))\nplt.xticks(rotation=90)\n\nplt.grid(b=None)\nplt.show()","b8f06461":"element_wise_total_prod_food = melted_df[(melted_df[\"Element\"]=='Food')].groupby([\"Item\"], as_index=False).agg({\"Production\":\"sum\"})\nlist_top_10_elements=element_wise_total_prod_food.sort_values('Production',ascending=False)['Item'][:10].tolist() \nmelted_df_allelements_top10 = melted_df[(melted_df[\"Item\"].isin(list_top_10_elements))].groupby([\"Item\",\"Year\"], as_index=False).agg({\"Production\":\"sum\"})\n# melted_df_allcountries_top5=melted_df_allcountries.sort_values('Production',ascending=False)[:]\n\n\nplt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(24,12))\nplt.rcParams.update({'font.size': 12})\nimport seaborn as sns\n\nsns.lineplot(data=melted_df_allelements_top10, x='Year', y='Production', hue='Item')\n\nplt.title(\"Top 10 food items total Production in the World\")\nplt.xlabel(\"Food Item\")\nplt.ylabel(\"Production, billion tonnes\")\n\nplt.legend(loc='best',ncol=8, mode=\"expand\", borderaxespad=0.)\n\nplt.xticks(list(melted_df.Year.unique()))\nplt.xticks(rotation=90)\n\nplt.grid(b=None)\nplt.show()","54a73cf7":"element_wise_total_prod_feed = melted_df[(melted_df[\"Element\"]=='Feed')].groupby([\"Item\"], as_index=False).agg({\"Production\":\"sum\"})\nlist_top_10_elements=element_wise_total_prod_feed.sort_values('Production',ascending=False)['Item'][:10].tolist() \nmelted_df_allelements_top10 = melted_df[(melted_df[\"Item\"].isin(list_top_10_elements))].groupby([\"Item\",\"Year\"], as_index=False).agg({\"Production\":\"sum\"})\n# melted_df_allcountries_top5=melted_df_allcountries.sort_values('Production',ascending=False)[:]\n\n\nplt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(24,12))\nplt.rcParams.update({'font.size': 12})\nimport seaborn as sns\n\nsns.lineplot(data=melted_df_allelements_top10, x='Year', y='Production', hue='Item')\n\nplt.title(\"Top 10 feed items total Production in the World\")\nplt.xlabel(\"Feed Item\")\nplt.ylabel(\"Production, billion tonnes\")\n\nplt.legend(loc='best',ncol=8, mode=\"expand\", borderaxespad=0.)\n\nplt.xticks(list(melted_df.Year.unique()))\nplt.xticks(rotation=90)\n\nplt.grid(b=None)\nplt.show()","1ed45539":"plt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(25,10))\nplt.rcParams.update({'font.size': 12})\n#Now finding the Top 5 highest produced foods\n\n\n\n\n#The below code will create two plots. The parameters that .subplot take are (row, column, no. of plots).\nplt.subplot(2,1,1)\n#This will create the bar graph for poulation\nbest_5_foods=melted_df[(melted_df[\"Element\"]=='Food')].groupby([\"Item\"], as_index=False).agg({\"Production\":\"sum\"})\nbest_5_foods=best_5_foods.sort_values('Production',ascending=False)[:5]\nplt.title(\"Best 5 Food Items Production in the World 1961-2013\")\nplt.xlabel(\"Item\")\nplt.ylabel(\"Production, billion tonnes\")\nplt.bar('Item','Production',data=best_5_foods.sort_values('Production',ascending=False),color='Green')\n#The below code will create the second plot.\nplt.subplot(2,1,2)\nbest_5_food_2013=melted_df[(melted_df[\"Element\"]=='Food') & (melted_df[\"Year\"]==2013)].groupby([\"Item\"], as_index=False).agg({\"Production\":\"sum\"})\nbest_5_food_2013=best_5_food_2013.sort_values('Production',ascending=False)[:5]\nplt.rcParams.update({'font.size': 15})\n# plt.xticks(rotation=90)\nplt.title(\"Best 5 Food Items Production in the World 2013\")\nplt.xlabel(\"Item\")\nplt.ylabel(\"Production, billion tonnes\")\nplt.bar('Item','Production',data=best_5_food_2013.sort_values('Production',ascending=False),color='Green')\nplt.show()","e402e271":"plt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(25,10))\nplt.rcParams.update({'font.size': 12})\n#Now finding the Top 5 highest produced foods\n\n\n\n\n#The below code will create two plots. The parameters that .subplot take are (row, column, no. of plots).\nplt.subplot(2,1,1)\n#This will create the bar graph for poulation\nbest_5_feeds=melted_df[(melted_df[\"Element\"]=='Feed')].groupby([\"Item\"], as_index=False).agg({\"Production\":\"sum\"})\nbest_5_feeds=best_5_feeds.sort_values('Production',ascending=False)[:5]\nplt.title(\"Best 5 Feed Items Production in the World 1961-2013\")\nplt.xlabel(\"Item\")\nplt.ylabel(\"Production, billion tonnes\")\nplt.bar('Item','Production',data=best_5_feeds.sort_values('Production',ascending=False),color='Blue')\n#The below code will create the second plot.\nplt.subplot(2,1,2)\n#This will create the bar graph for gdp i.e gdppercapita divided by population.\n# plt.style.use(\"fivethirtyeight\")\n# plt.figure(figsize=(24,20))\nplt.rcParams.update({'font.size': 15})\nbest_5_feed_2013=melted_df[(melted_df[\"Element\"]=='Feed') & (melted_df[\"Year\"]==2013)].groupby([\"Item\"], as_index=False).agg({\"Production\":\"sum\"})\nbest_5_feed_2013=best_5_feed_2013.sort_values('Production',ascending=False)[:5]\n# plt.xticks(rotation=90)\nplt.title(\"Best 5 Feed Items Production in the World 2013\")\nplt.xlabel(\"Item\")\nplt.ylabel(\"Production, billion tonnes\")\nplt.bar('Item','Production',data=best_5_feed_2013.sort_values('Production',ascending=False),color='Blue')\nplt.show()","e6141a6b":"country_wise_total_prod_milk = melted_df[(melted_df[\"Item\"]=='Milk - Excluding Butter')].groupby([\"Area\"], as_index=False).agg({\"Production\":\"sum\"})\nlist_top_10_countries_milk=country_wise_total_prod_milk.sort_values('Production',ascending=False)['Area'][:10].tolist() \nmelted_df_allelements_top10 = melted_df[(melted_df[\"Area\"].isin(list_top_10_countries_milk))].groupby([\"Area\",\"Year\"], as_index=False).agg({\"Production\":\"sum\"})\n# melted_df_allcountries_top5=melted_df_allcountries.sort_values('Production',ascending=False)[:]\n\n\nplt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(24,12))\nplt.rcParams.update({'font.size': 12})\nimport seaborn as sns\n\nsns.lineplot(data=melted_df_allelements_top10, x='Year', y='Production', hue='Area')\n\nplt.title(\"Top 10 milk producing countries in the World\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Production, billion tonnes - Milk\")\n\nplt.legend(loc='best',ncol=8, mode=\"expand\", borderaxespad=0.)\n\nplt.xticks(list(melted_df.Year.unique()))\nplt.xticks(rotation=90)\n\nplt.grid(b=None)\nplt.show()","4b0ce71b":"country_wise_total_prod_milk = melted_df[(melted_df[\"Item\"]=='Cereals - Excluding Beer')].groupby([\"Area\"], as_index=False).agg({\"Production\":\"sum\"})\nlist_top_10_countries_milk=country_wise_total_prod_milk.sort_values('Production',ascending=False)['Area'][:10].tolist() \nmelted_df_allelements_top10 = melted_df[(melted_df[\"Area\"].isin(list_top_10_countries_milk))].groupby([\"Area\",\"Year\"], as_index=False).agg({\"Production\":\"sum\"})\n# melted_df_allcountries_top5=melted_df_allcountries.sort_values('Production',ascending=False)[:]\n\n\nplt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(24,12))\nplt.rcParams.update({'font.size': 12})\nimport seaborn as sns\n\nsns.lineplot(data=melted_df_allelements_top10, x='Year', y='Production', hue='Area')\n\nplt.title(\"Top 10 Cereals - Excluding Beer| producing countries in the World\")\nplt.xlabel(\"Feed Item\")\nplt.ylabel(\"Production, billion tonnes\")\n\nplt.legend(loc='best',ncol=8, mode=\"expand\", borderaxespad=0.)\n\nplt.xticks(list(melted_df.Year.unique()))\nplt.xticks(rotation=90)\n\nplt.grid(b=None)\nplt.show()","e21f4bbd":"year_df = df.iloc[:,10:]\nfig, ax = plt.subplots(figsize=(16,10))\nsns.heatmap(year_df.corr(), ax=ax,cmap=\"YlGnBu\")","f9d153ca":"top_10_countries = ['China, mainland',\n 'United States of America',\n 'India',\n 'Brazil',\n 'Germany',\n 'Japan',\n 'France',\n 'Italy',\n 'Russian Federation',\n 'Nigeria']\n    \n# selecting rows based on condition  \nrslt_df = melted_df[melted_df['Area'].isin(top_10_countries)]  \nrslt_df.columns","700cb0ed":"rslt_df=rslt_df.drop(['Area Abbreviation', 'Area Code','Item Code', \n       'Element', 'Unit'], axis = 1) \nrslt_df_2 = rslt_df.groupby([\"Area\",\"Item\"], as_index=False).agg({\"Production\":\"sum\"})\n\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(20,20))    \nheat_map = rslt_df_2.pivot(\"Area\", \"Item\", \"Production\")\nax = sns.heatmap(heat_map,cmap='YlGnBu')","14333b96":"#Importing india's population data set\ndf5=pd.read_html('https:\/\/www.macrotrends.net\/countries\/IND\/india\/population')\nIndia_population=df5[1]\nIndia_population.columns","39127566":"#As the database has multi-index, we have deleted the first level\nIndia_population.columns = India_population.columns.droplevel(0)","f35d0728":"India_population","13580627":"India_population.describe()","b77d6a55":"plt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(14,8))\nplt.rcParams.update({'font.size': 12})\n\n# fig, axs = plt.subplots(2)\n# fig.suptitle('Vertically stacked subplots')\n# axs[0].plot('Year','Population',data=India_population,label='India Population')\n# axs[1].plot('Year','Production',data=India_prod,label='India')\n\n\n# # 3. 'India',\ndf2=melted_df[['Area','Production','Year']]\ndf_India=df2[df2['Area']=='India']\nIndia_prod = df_India.groupby(\"Year\", as_index=False).agg({\"Production\":\"sum\"})\nIndia_prod['Year'] = India_prod['Year'].astype(int)\nIndia_prod['Production'] = India_prod['Production'].astype(int)\ndf8=pd.merge(India_prod,India_population)\ndf8['Production']=df8['Production']*1000\ndf_India=df2[df2['Area']=='India']\nIndia_prod = df_India.groupby(\"Year\", as_index=False).agg({\"Production\":\"sum\"})\nplt.plot('Year','Production',data=df8,label='India food production (Tonnes)')\nplt.plot('Year','Population',data=df8,label='India Population')\n\nplt.title(\"Rise in Population of India\")\nplt.xticks(rotation=90)\nplt.grid(b=None)\nplt.xlabel('Years')\n# plt.ylabel('x - axis')\n\n#learning: don't place plt.legend after plt.show\nplt.legend(loc=\"center right\")\nplt.show()","9dd2d504":"#Importing the new India's food production data set\nimport pandas as pd\ndf_bulkdata=pd.read_csv('..\/input\/bulkdata\/Production_Crops_E_All_Data.csv')\ndf_bulkdata.head()","082f1798":"#Making a list of the flag columns that ends with 'F'\ncolumns_to_be_deleted=list(df_bulkdata.columns[df_bulkdata.columns.str.contains(\"F\", na=False)])\ncolumns_to_be_deleted","2c719b20":"df_bulkdata.drop(columns=['Y1961F',\n 'Y1962F',\n 'Y1963F',\n 'Y1964F',\n 'Y1965F',\n 'Y1966F',\n 'Y1967F',\n 'Y1968F',\n 'Y1969F',\n 'Y1970F',\n 'Y1971F',\n 'Y1972F',\n 'Y1973F',\n 'Y1974F',\n 'Y1975F',\n 'Y1976F',\n 'Y1977F',\n 'Y1978F',\n 'Y1979F',\n 'Y1980F',\n 'Y1981F',\n 'Y1982F',\n 'Y1983F',\n 'Y1984F',\n 'Y1985F',\n 'Y1986F',\n 'Y1987F',\n 'Y1988F',\n 'Y1989F',\n 'Y1990F',\n 'Y1991F',\n 'Y1992F',\n 'Y1993F',\n 'Y1994F',\n 'Y1995F',\n 'Y1996F',\n 'Y1997F',\n 'Y1998F',\n 'Y1999F',\n 'Y2000F',\n 'Y2001F',\n 'Y2002F',\n 'Y2003F',\n 'Y2004F',\n 'Y2005F',\n 'Y2006F',\n 'Y2007F',\n 'Y2008F',\n 'Y2009F',\n 'Y2010F',\n 'Y2011F',\n 'Y2012F',\n 'Y2013F',\n 'Y2014F',\n 'Y2015F',\n 'Y2016F',\n 'Y2017F',\n 'Y2018F',\n 'Y2019F'],inplace=True)","6afafba9":"#Droping 'Yield' & 'Area harvested'\ndf_bulkdata.drop(df_bulkdata.loc[(df_bulkdata[\"Element\"] == 'Yield') |  (df_bulkdata[\"Element\"] == 'Area harvested')].index,inplace=True)","ae548944":"df_bulkdata.head()","f822aa26":"df_bulkdata.columns","7691dfbc":"#lets melt the bulkdata frame\nmelted_df_bulkdata=pd.melt(df_bulkdata,id_vars=['Area Code', 'Area', 'Item Code', 'Item', 'Element Code', 'Element',\n       'Unit'],var_name=\"Year\",value_name=\"Production\")\n\n\nmelted_df_bulkdata","614b5c86":"#Just like what we did in the melted_df previously, we will again convert the wide dataset into long dataset\n#Transformation\nnew_col_names=[]\nfor i in melted_df_bulkdata['Year']:\n    i=i.replace('Y','')\n    new_col_names.append(i)\nmelted_df_bulkdata['Year'] = new_col_names\nmelted_df_bulkdata.head()","c453e60a":"# Filtering India's data from the bulkdata\nmelted_df_bulkdata_production=melted_df_bulkdata[['Area','Production','Year']]\ndf_India_new=melted_df_bulkdata_production[melted_df_bulkdata_production['Area']=='India']\nIndia_prod_new = df_India_new.groupby(\"Year\", as_index=False).agg({\"Production\":\"sum\"})\nIndia_prod_new['Year'] =India_prod_new['Year'].astype(int)\nIndia_prod_new['Production'] = India_prod_new['Production'].astype(int)\ndf9=pd.merge(India_prod_new,India_population)","505689eb":"df9","27a6afc0":"plt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(12,6))\nplt.rcParams.update({'font.size': 10})\n\nplt.plot('Year','Production',data=df9,label='India food production (Tonnes)')\nplt.plot('Year','Population',data=df9,label='India Population')\n\nplt.title(\"Rise in Population of India vs Food Porduction\")\nplt.xticks(rotation=90)\nplt.grid(b=None)\nplt.xlabel('Years')\n# plt.ylabel('x - axis')\n\n#learning: don't place plt.legend after plt.show\nplt.legend(loc=\"center right\")\nplt.xticks(list(df9.Year.unique()))\nplt.xticks(rotation=90)\nplt.show()","a7dd6f20":"melted_df_bulkdata_items_wise=melted_df_bulkdata[(melted_df_bulkdata[\"Area\"] == 'India')].groupby([\"Item\",\"Year\"], as_index=False).agg({\"Production\":\"sum\"})\n# melted_df_bulkdata_items_wise['Production']=melted_df_bulkdata_items_wise['Production']\nmelted_df_bulkdata_items_wise","80fc8ee4":"#Converting the Year column to integet from Object type\nmelted_df_bulkdata_items_wise['Year'] = melted_df_bulkdata_items_wise['Year'].astype(int)","05dd43c4":"#Merging food production data with population\ndf10=pd.merge(melted_df_bulkdata_items_wise,India_population)","0fdaffc4":"df10","2472c313":"plt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(24,18))\nplt.rcParams.update({'font.size': 10})\n\n# plt.plot('Year','Production',data=df10,label='India food production (kgs)')\nsns.lineplot(data=df10, x='Year', y='Production', hue='Item')\nplt.plot('Year','Population',data=df10,label='India Population')\n\nplt.title(\"Rise in Population of India vs food production\")\nplt.xticks(rotation=90)\nplt.grid(b=None)\nplt.xlabel('Years')\n# plt.ylabel('x - axis')\n\n#learning: don't place plt.legend after plt.show\nplt.legend(loc='upper center',ncol=8, mode=\"expand\", borderaxespad=0.)\nplt.xticks(list(df10.Year.unique()))\nplt.xticks(rotation=90)\nplt.show()","ac03e94e":"plt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(24,18))\nplt.rcParams.update({'font.size': 18})\nplt.subplot(2,1,1)\nmelted_df_bulkdata_items_wise_total=df10.groupby(\"Item\", as_index=False).agg({\"Production\":\"sum\"})\nplt.bar('Item','Production',data=melted_df_bulkdata_items_wise_total.sort_values('Production',ascending=False)[:10],color='Green')\nplt.title(\"Best 10 Food Items Production in the India 1961-2019\")\nplt.xticks(rotation=60)\n\nplt.subplot(2,1,2)\n\nmelted_df_bulkdata_items_wise_2019=df10[(df10[\"Year\"] == 2019)].groupby(\"Item\", as_index=False).agg({\"Production\":\"sum\"})\nplt.bar('Item','Production',data=melted_df_bulkdata_items_wise_2019.sort_values('Production',ascending=False)[:10],color='Green')\nplt.title(\"Best 10 Food Items Production in the India 2019\")\n\nplt.legend(loc=\"center right\")\nplt.xticks(rotation=60)\nplt.show()","89274f05":"## Table of context:\n1. Importing the libraries\n2. Cleaning the data set\n3. Performing Exploratory data analysis\n4. Evolution of items production in all the countries (1961-2013)\n   - Food vs Feed comparison\n   - Trend in production of items separately for each of the 174 countries\n   - Evolution of production of items in **top 10 countries**\n5. Overall total production of items vs that of 2013\n    - All items comparison for top 10 countries\n    - All food items comparison for top 10 countries\n    - All feed items comparison for top 10 countries\n6. Heat map showing evolution of 115 items across 53 years    \n    - Separate comparison of production of all items \n    - Top 10 food items\n    - Top 10 feed items\n7. Evolution of **top 5 most eaten food items** across the globe\n    - Overall production of best 5 food item vs that of 2013\n    - Overall production of best 5 feed item vs that of 2013\n8. Top 10 milk & Cerals producing countries in the world \n9. Heatmap of top 10 countries vs their food production\n10. Population in India vs Food (1961-2019)\n - Rise in population vs trend in production of each item in India\n - Comparison of overall top 10 food items vs that of 2019","0641b0d5":"It can be seen here that there is a significant increase in the production between the year 1991 - 1992\n\n### Food vs Feed comparison","6dcd9acb":"China has reminaed the highest food producing country, however, India took over USA in 2013","1d00c903":"### Heatmap of top 10 countries vs their food production","3515b7f2":"### Overall production of best 5 feed item vs that of 2013","9bd591d9":"### India production vs population from 1961 to 2021","ce544fb5":"### So China, India & Russia has a spike in 1992 in the food production\n\n## Now lets check the total production of all elements for all the countries from 1961 till 2013","3cc6a495":"## All food items comparison for top 10 countries (2\/3)\n### Element: Food","24b632b4":"### Rise in population vs trend in production of each item in India","768a6b18":"### Reference:\n- <a href=\"http:\/\/www.fao.org\/emergencies\/resources\/maps\/detail\/en\/c\/877611\/\">FAO Emergency<\/a>\n- <a href=\"https:\/\/www.farm-europe.eu\/travaux\/how-will-we-feed-the-world-in-the-next-decades-an-analysis-of-the-demand-and-supply-factors-for-food\/#_ftnref54\">HOW WILL WE FEED THE WORLD IN THE NEXT DECADES?<\/a>\n- <a href=\"https:\/\/link.springer.com\/chapter\/10.1007\/978-3-030-14409-8_1\">Indian Food Systems towards 2050: Challenges and Opportunities<\/a>\n- <a href=\"https:\/\/www.fsinplatform.org\/\">fsinplatform<\/a>\n- <a href=\"https:\/\/data.worldbank.org\/indicator\/AG.LND.AGRI.ZS\">Agriculture land availability<\/a>","81c02b7b":"### Evolution of production of items in top 10 countries","fd79aa3e":"### Trend in production of items separately for each of the 174 countries","c1f0d5a5":"#### Production of Cereals & Milk should increase in future as they are highly demanding","60646f56":"#### We dont require:\n- Flags columns that end with 'F' and\n- Element: 'Area harvested' & 'Yield'. We only require the production data","748cba36":"## 4. Evolution of items production in all the countries (1961-2013)","a53fbb6d":"### As the data provided in this particular problem is only till 2013, here i have introduced a new data set comprising of food production data till 2019. We will be cleaning it and then comparing it food production\n\n<a href=\"http:\/\/www.fao.org\/faostat\/en\/#data\/QC\">Source<\/a>","c8efba96":"### Comparison of overall top 10 food items vs that of 2019","696e264b":"### Lets convert Year to int","699cfd29":"### Looking at the data first basic thing which we should identify is what is the total food vs feed production throughout the period given i.e 1961 to 2013","4f8c755e":"## 1. Let's import the data set\n\n<a href=\"http:\/\/www.fao.org\/faostat\/en\/#data\/QC\">Source:<\/a> ","f8d40104":"The order of overall ranking of all top 10 countries have remained same","3b5545b1":"### As you can see here in the year 1992, there's a sudden rise in golden line (1st), green line(3rd) and dark blue line(4th). As it seems difficult to exactly identify these countries in the above graph, lets check the top 10 countries separately","ab6b4e50":"# Who eat what we grow?\n\nAuthor: <a href=\"https:\/\/www.linkedin.com\/in\/preetmehta\/\">Preet Mehta<\/a>\n\n## Motivation:\n- I grew up in a small town where most people are farmers. With local farmers and growers staying close to home, I have observed that eating local food supports the local economy and bridges the gap between harvest and table. Perhaps, the surge in import of food, indicates that people in cities are not aware of the increasing carbon footprints due to the food supply chain\n\n- I have been studying from a while on predicting future food demands based on past patterns\n\n\n## Objective:\nAnimal agriculture and factory farming is a a growing interest of the public and of world leaders.\n\n1. Find interesting outliers in the data?\n2. What are the fastest growing countries in terms of food production\\consumption?\n3. Compare between food and feed consumption?\n\n## Context\nOur world population is expected to grow from 7.3 billion today to 9.7 billion in the year 2050. Finding solutions for feeding the growing world population has become a hot topic for food and agriculture organizations, entrepreneurs and philanthropists. These solutions range from changing the way we grow our food to changing the way we eat. To make things harder, the world's climate is changing and it is both affecting and affected by the way we grow our food \u2013 agriculture.\nThis dataset provides an insight on our worldwide food production - focusing on a comparison between food produced for human consumption and feed produced for animals.\n\n## Content\nThe Food and Agriculture Organization of the United Nations provides free access to food and agriculture data for over 245 countries and territories, from the year 1961 to the most recent update (depends on the dataset). One dataset from the FAO's database is the Food Balance Sheets. It presents a comprehensive picture of the pattern of a country's food supply during a specified reference period, the last time an update was loaded to the FAO database was in 2013. The food balance sheet shows for each food item the sources of supply and its utilization. This chunk of the dataset is focused on two utilizations of each food item available:\n\nFood - refers to the total amount of the food item available as human food during the reference period.\nFeed - refers to the quantity of the food item available for feeding to the livestock and poultry during the reference period.\n\n## Acknowledgements\nThis dataset was meticulously gathered, organized and published by the Food and Agriculture Organization of the United Nations.","28698f01":"### Now lets check the total production of all elements for all the countries in the year **2013** ","fda9b0a2":"## Wide data to long data transformation\n\n- Common terms for this wide-to-long transformation are melt, pivot-long, unpivot, gather, stack, and reshape. Many functions have been written to convert data from wide to long form, **melt()** from the data. table library is the best.\n\n- <a href=\"https:\/\/towardsdatascience.com\/reshape-r-dataframes-wide-to-long-with-melt-tutorial-and-visualization-ddf130cd9299#:~:text=Common%20terms%20for%20this%20wide,table%20library%20is%20the%20best.\"> About Pandas Transformation<\/a>\n- <a href=\"https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.melt.html\">About pandas.melt<\/a>","a037367f":"### Lets have a look at the top 5 rows of the data","3db9336c":"### Top 10 food items","cf132176":"### Now lets check data type of all the features","b6a5056a":"### Separate comparison of production of all items","1537d82b":"### Heat map showing evolution of 115 items across 53 years (1961-2013)","0a2dbe05":"## Overall total production of items vs that of 2013 (1\/3) ","ba6d0570":"### Top 10 milk producing countries in the world","e25d1477":"### First, lets remove the letter 'Y' in the column: 'Year'","1a04689e":"### All items comparison for top 10 countries","87a853a3":"India is the 2nd largest Cereals producing country after China","60f60852":"## All feed items comparison for top 10 countries (3\/3) \n### Element: Feed","a0af88aa":"### Top 10 Cerals producing countries in the world","f5db7348":"In 2013, the use of milk has decreased and the consumption of cereals and maize have increased","8dbe6feb":"## Population in India vs Food (1961-2019)\n\n- ### Here a new data set of India's population has been introduced. After cleaning it, we shall compare it with food with production in India\n\n<a href = \"https:\/\/www.macrotrends.net\/countries\/IND\/india\/population\/\"> Source <\/a>","d3aa2f47":"## 2. Cleaning the data set","5f8a45a5":"### Now lets check the total production trends across all the years for each of the 174 countries   ","9fb14232":"## 3. Performing Exploratory data analysis","29c23f2b":"### Overall production of best 5 food item vs that of 2013","f01552e1":"### It's observed that Brazil and Germany rank higher in feed production. Secondly, India has increased feed production \n\n## Now lets deep dive into the elements","e35a0bcd":"### Evolution of top 5 most eaten food items across the globe","904acc17":"### The India's population data ranges from 1950 to 2021\n- #### Max population shown is 139.34 Crores","9e4fdeba":"### Top 10 feed items","03e06783":"The best 5 feed items have remained intact throughout","931a3f56":"After 2005, India took over USA and has became the largest milk producing country in the world"}}