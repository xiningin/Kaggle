{"cell_type":{"58ad5b9f":"code","7297610c":"code","58afcebe":"code","9c24d639":"code","994ae79a":"code","004ac58e":"code","b97a1e0a":"code","6be85582":"code","6ede87ab":"code","42c3ca3b":"code","7465bbfa":"code","a617ce54":"code","b6bb6558":"code","11dd1382":"code","41c3a0d2":"markdown","85be380e":"markdown","7ab8812d":"markdown","85998387":"markdown","fe82b380":"markdown","a7b3ae69":"markdown","76262feb":"markdown","7421351b":"markdown","59faf957":"markdown","1559ca12":"markdown"},"source":{"58ad5b9f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport math\nimport datetime\n\nfrom sklearn.linear_model import LinearRegression","7297610c":"di = '\/kaggle\/input\/tabular-playground-series-jan-2022\/'\ntrain = pd.read_csv(di + 'train.csv')\ntest = pd.read_csv(di + 'test.csv')\nsubmit = pd.read_csv(di + 'sample_submission.csv')","58afcebe":"import io\n\nholiday_table = pd.read_csv(io.StringIO(\n'''\nname,2014,2015,2016,2017,2018,2019,2020,Finland,Norway,Sweden,Fixed\nNew Year's Day,,01-01,01-01,01-01,01-01,01-01,01-01,\u2714\ufe0e,\u2714\ufe0e,\u2714\ufe0e,\u2714\ufe0e\nEpiphany,,01-06,01-06,01-06,01-06,01-06,01-06,\u2714\ufe0e,,\u2714\ufe0e,\u2714\ufe0e\nMaundy Thursday,,04-02,03-24,04-13,03-29,04-18,,,\u2714\ufe0e,,\nGood Friday,,04-03,03-25,04-14,03-30,04-19,,\u2714\ufe0e,\u2714\ufe0e,\u2714\ufe0e,\nEaster Sunday,,04-05,03-27,04-16,04-01,04-21,,\u2714\ufe0e,\u2714\ufe0e,\u2714\ufe0e,\nEaster Monday,,04-06,03-28,04-17,04-02,04-22,,\u2714\ufe0e,\u2714\ufe0e,\u2714\ufe0e,\nMay Day,,05-01,05-01,05-01,05-01,05-01,,\u2714\ufe0e,\u2714\ufe0e,\u2714\ufe0e,\u2714\ufe0e\nAscension Day,,05-14,05-05,05-25,05-10,05-30,,\u2714\ufe0e,\u2714\ufe0e,\u2714\ufe0e,\nConstitution Day,,05-17,05-17,05-17,05-17,05-17,,,\u2714\ufe0e,,\u2714\ufe0e\nPentecost,,05-24,05-15,06-04,05-20,06-09,,\u2714\ufe0e,\u2714\ufe0e,\u2714\ufe0e,\nWhit Monday,,05-25,05-16,06-05,05-21,06-10,,,\u2714\ufe0e,,\nNational Day of Sweden,,06-06,06-06,06-06,06-06,06-06,,,,\u2714\ufe0e,\u2714\ufe0e\nMidsummer Eve,,06-19,06-24,06-23,06-22,06-21,,\u2714\ufe0e,,\u2714\ufe0e,\nMidsummer Day,,06-20,06-25,06-24,06-23,06-22,,\u2714\ufe0e,,\u2714\ufe0e,\nAll Saints' Day,,10-31,11-05,11-04,11-03,11-02,,\u2714\ufe0e,,\u2714\ufe0e,\nIndependence Day,,12-06,12-06,12-06,12-06,12-06,,\u2714\ufe0e,,,\u2714\ufe0e\nChristmas Eve,12-24,12-24,12-24,12-24,12-24,12-24,,\u2714\ufe0e,,\u2714\ufe0e,\u2714\ufe0e\nChristmas Day,12-25,12-25,12-25,12-25,12-25,12-25,,\u2714\ufe0e,\u2714\ufe0e,\u2714\ufe0e,\u2714\ufe0e\nSt. Stephen's Day,12-26,12-26,12-26,12-26,12-26,12-26,,\u2714\ufe0e,\u2714\ufe0e,\u2714\ufe0e,\u2714\ufe0e\nNew Year's Eve,12-31,12-31,12-31,12-31,12-31,12-31,,,,\u2714\ufe0e,\u2714\ufe0e\n''')).fillna('')","9c24d639":"holiday_table","994ae79a":"def create_holidays(df):\n    \"\"\"\n    Returns list of holiday information\n      dt (np.array): days from the given holiday to date in df\n    \"\"\"\n    holidays = []\n    \n    # Date, e.g., 1461 days in train\n    t = pd.to_datetime(df['date'].values.reshape(-1, 18)[:, 0])\n\n    # For 19 official holidays in the table presented above\n    for i, r in holiday_table.iterrows():\n        dt = None\n    \n        for year in range(2014, 2021):\n            md = r[str(year)]\n\n            if md == '':\n                continue\n\n            # Days relative to the holiday\n            t0 = pd.to_datetime('%d-%s' % (year, md))\n            dt_this_year = (t - t0).days\n            \n            # Select smallest dt in abs()\n            if dt is None:\n                dt = dt_this_year\n            else:\n                dt = np.where(np.abs(dt) < np.abs(dt_this_year), dt, dt_this_year)    \n\n        # 0 or 1 if the holiday applies to each country\n        country = np.array(r[['Finland', 'Norway', 'Sweden']].values == '\u2714\ufe0e', dtype=int)\n\n        d = {'name': r['name'],\n             'dt': dt,            # time difference in days\n             'country': country,  # binary flag if \n            }\n    \n        holidays.append(d)\n\n    return holidays","004ac58e":"countries = train['country'].unique()\n\ndef add_gdp(df):\n    \"\"\"\n    Add GDP column to train\/test\n    \"\"\"\n    g = pd.read_csv('\/kaggle\/input\/gdp-20152019-finland-norway-and-sweden\/'\n                    'GDP_data_2015_to_2019_Finland_Norway_Sweden.csv')\n    \n    # Convert to year, country, GDP format for pd.merge\n    dfs = []\n    for country in countries:\n        dfs.append(pd.DataFrame({'year': g['year'],\n                                 'country': [country, ] * len(g),\n                                 'GDP': g['GDP_' + country]}))\n    gdp = pd.concat(dfs)\n\n    df['datetime'] = pd.to_datetime(df['date'])\n    df['year'] = df['datetime'].dt.year    \n    df = pd.merge(df, gdp, how='left', on=['year', 'country'])\n    \n    return df","b97a1e0a":"def create_features(df):\n    # Features\n    X = pd.DataFrame()\n    \n    # Target variable: y = log(num_sold\/GDP)   \n    df = add_gdp(df)    \n \n    if 'num_sold' in df.columns:\n        y = np.log(df['num_sold'] \/ df['GDP']).values\n    else:\n        y = None\n    \n    # Weekday\n    wd = df['datetime'].dt.weekday\n    X['friday'] = wd == 4\n    X['weekend'] = wd >= 5\n    \n    # Country factor\n    X['Norway'] = df['country'] == 'Norway'\n    X['Sweden'] = df['country'] == 'Sweden'\n\n    # Product factor\n    X['Hat'] = df['product'] == 'Kaggle Hat'\n    X['Sticker'] = df['product'] == 'Kaggle Sticker'\n\n    # Store factor\n    X['Rama'] = df['store'] == 'KaggleRama'\n\n    X = X.astype(float)\n    \n    # Sinusoidal\n    date = df['date'].values.reshape(-1, 18)[:, 0]  # 1461 dates (train)\n    dt = pd.to_datetime(date)\n    year = dt.year.values\n    \n    n = len(date)\n    daymax = 365 * np.ones(n)\n    daymax[year % 4 == 0] = 366\n    \n    theta = 2.0 * math.pi * (dt.dayofyear.values - 1) \/ daymax  # phase in [0, 2pi)\n\n    # time x country x store x product\n    cos = np.zeros((n, 3, 2, 3))  \n    cos[:, :, :, 0] = np.cos(theta).reshape(-1, 1, 1)  # cos for product 0\n    X['cos'] = cos.flatten()\n\n    sin = np.zeros((n, 3, 2, 3))\n    sin[:, :, :, 1] = np.sin(theta).reshape(-1, 1, 1)  # sin for product 1\n    X['sin'] = sin.flatten()\n\n    # Holidays\n    holidays = create_holidays(df)\n    days = 10\n\n    # Holiday flag for ith day after holiday\n    for i in range(days):\n        holiday = np.zeros((n, 3), dtype=int)  # date x country\n\n        for h in holidays:\n            # dt is days after the given holidays, t - t_holiday\n            holiday += (h['dt'].reshape(n, 1) == i) * h['country']\n\n        # Same for 2 store x 3 products\n        X['holiday-%d' % i] = holiday.flatten().repeat(6)\n\n    # Additional flag for Christmas\n    h = holidays[-3]\n\n    for i in range(days):\n        holiday = h['dt'] == i\n        X['christmas-%d' % i] = holiday.flatten().repeat(18)\n\n    return X, y\n\nX, y = create_features(train)\nX.columns","6be85582":"model = LinearRegression().fit(X, y)\ny_pred = model.predict(X)","6ede87ab":"def smapey(y_true, y_pred):\n    \"\"\"\n    SMAPE(num_sold_true, num_sold_pred) from y = log(num_sold\/GDP)\n    \"\"\"\n    num_ratio = np.exp(y_pred - y_true)  # = num_sold_pred \/ num_sold_true\n    return 200 * np.mean(np.abs(num_ratio - 1) \/ (num_ratio + 1))\n\nsmapey(y, y_pred)","42c3ca3b":"y_residual = y - y_pred\n\nplt.figure(figsize=(12, 3))\nplt.title('Residual averaged over 18 catecories')\nplt.xlabel('time [day]')\nplt.ylabel('y_residual')\nplt.plot(np.mean(y_residual.reshape(-1, 18), axis=1))\nplt.axhline(0, color='gray', alpha=0.5)\nplt.show()","7465bbfa":"from scipy.optimize import curve_fit\n\ndef gauss(x, A, m, s):\n    return A*np.exp(-((x - m) \/ s)** 2)\n\nx = np.arange(10)\ncoef = model.coef_[9:19]\nA = np.max(coef)\npopt, _ = curve_fit(gauss, x, coef, p0=[A, 5, 2])\nprint('Gaussian fit: A, \u03bc, \u03c3 =', popt)\n\nxx = np.linspace(-1, 10, 101)\nplt.title('Holiday kernel')\nplt.plot(model.coef_[9:19], 'x', label='Holiday coef')\nplt.plot(xx, gauss(xx, *popt), label='Gaussian')\nplt.xlabel('days after holiday')\nplt.ylabel('coef[9:19]')\nplt.legend(frameon=False)\nplt.show()\n\n# Chrismas\ncoef = model.coef_[19:29]\npoptc, _ = curve_fit(gauss, x, coef, p0=[A, 5, 2])\nprint('Gaussian fit: A, \u03bc, \u03c3 =', poptc)\n\nplt.title('Chrismas kernel')\nplt.plot(coef, 'x', label='Christmas coef')\nplt.plot(xx, gauss(xx, *poptc), label='Gaussian')\nplt.xlabel('days after holiday')\nplt.ylabel('coef[19:29]')\nplt.legend(frameon=False)\nplt.show()","a617ce54":"holidays = create_holidays(train)\ncmap = plt.get_cmap('tab10')\n\n# Correct 9 basic factors and leave holidays\nyy = y - np.matmul(X.values[:, :9], model.coef_[:9]) - model.intercept_\nyy = np.mean(yy.reshape(-1, 3, 6), axis=2)  # average over 2 stores x 3 products\n\ny_holiday = np.matmul(X.values[:, 9:], model.coef_[9:]).reshape(-1, 3, 6)\n\nplt.figure(figsize=(8, 4))\nplt.title('2015 Chrismas to 2016 New Year')\nplt.ylabel('y')\nplt.xlabel('time [day]')\n\nx = np.arange(350, 380)\nfor i, country in enumerate(countries):\n    plt.plot(x, yy[350:380, i], 'x', color=cmap(i))\n    plt.plot(x, y_holiday[350:380, i, 0], color=cmap(i), label=country)\n\nplt.legend(frameon=False)\nplt.show()\n\nplt.figure(figsize=(8, 8))\nxx = np.linspace(350, 379, 101)\nfor i, country in enumerate(countries):\n    plt.subplot(3, 1, i + 1)\n    plt.ylabel(country)\n    plt.plot(x, yy[350:380, i], 'x', color=cmap(i))\n    #plt.plot(x, y_holiday[350:380, i, 0], color=cmap(i), label=country)\n    y_sum = np.zeros(101)\n    \n    for h in holidays:\n        dt = h['dt'][350:380]\n        \n        if h['country'][i] and np.min(np.abs(dt)) < 10:\n            dt = np.linspace(dt[0], dt[-1], 101)\n            y_gauss = gauss(dt, *popt)\n            if h['name'] == 'Christmas Day':\n                y_gauss += gauss(dt, *poptc)\n            plt.plot(xx, y_gauss, color=cmap(i))\n            y_sum += y_gauss\n        \n    plt.plot(xx, y_sum, color=cmap(i), alpha=0.5, label='sum of holidays')\n    if i == 0:\n        plt.legend(frameon=False)","b6bb6558":"plt.figure(figsize=(8, 8))\nplt.suptitle('May in Norway')\n\nfor i in range(4):\n    may = slice(365 * i + 120, 365 * i + 150)\n    x = np.arange(may.start, may.stop)\n    plt.subplot(4, 1, i + 1)\n    year = 2015 + i\n    if i == 3:\n        plt.xlabel('time [day]')\n    plt.ylabel(year)\n    plt.plot(x, yy[may, 1], 'x')\n    plt.plot(x, y_holiday[may, 1, 0])\n    \n    \n    xx = np.linspace(may.start, may.stop - 1, 101)    \n    y_sum = np.zeros(101)\n        \n    for h in holidays:\n        dt = h['dt'][may]\n        \n        if h['country'][1] and np.min(np.abs(dt)) < 10:\n            dt = np.linspace(dt[0], dt[-1], 101)\n            y_gauss = gauss(dt, *popt)\n            plt.plot(xx, y_gauss, color='gray')\n            y_sum += y_gauss\n\nplt.show()","11dd1382":"X_test, _ = create_features(test)\ny_test = model.predict(X_test)\ndf = add_gdp(test)\n\nsubmit['num_sold'] = np.exp(y_test) * df['GDP']\nsubmit.to_csv('submission.csv', index=False)","41c3a0d2":"## May\n\nMay is more challenging because May Day and Constitution Day are fixed, while Ascension Day, Pentecost, and Whit Monday are not and these two types overlap.","85be380e":"## Christmas","7ab8812d":"# Holidays\n\nOfficial holidays depend on countries, and there are minor differences around big holidays such as Maundy Thursday in Easter and Christmas Eve.\n\nFrom Holiday data by DrCapa:\nhttps:\/\/www.kaggle.com\/c\/tabular-playground-series-jan-2022\/discussion\/298243","85998387":"# Submit prediction\n\nThere is much room for improvement, but leave it where I stopped. The main topic is my method for holidays.","fe82b380":"The difference among countries can be explaind by the difference in official holidays, e.g., \n\n- Norway does not have Chrismas Eve and has smaller peak,\n- Finland and Sweden have Epiphany (6 Jan) while Norway do not,\n\nand only 2 kernels are necessary.\n \nPoints are data corrected for basic factors (weekday, store, and product including sinusoidal) and averaged over store and product. Lines are the model.\n\nDecember and January are still easy because the holiday dates are fixed.","a7b3ae69":"## GDP\n\nThanks to Carl McBride Ellis for discovering and sharing: https:\/\/www.kaggle.com\/c\/tabular-playground-series-jan-2022\/discussion\/298911","76262feb":"# Features\n\n1. Basic features from AmbrosM: https:\/\/www.kaggle.com\/ambrosm\/tpsjan22-03-linear-model\n   * 7 features for weekday, country, store, and product\n2. Fourier serise reduced to pure cosine for Mug and sine for Hat; 2 features\n3. Holiday boost for 10 days after the holiday\n   * 10 binary flags for \"today is n (0 \u2266 n < 10) days after holiday\"\n   * Similar flag for 10 days after Christmas\n   * Linear coefficients (kernel) \u00d7 features give the superpositions of the kernel","7421351b":"# Fit\n\n29 coefficients and 1 bias.","59faf957":"The effect of holidays seems complicated but they are actually simple superpositions of a single kernel (and an additional one for Christmas). This notebook is the 5th-place solution with some visualizations.\n\nMinimum linear regression (5th-place):\nhttps:\/\/www.kaggle.com\/c\/tabular-playground-series-jan-2022\/discussion\/304369","1559ca12":"# Plotting holidays\n\n\n## Kernel\nThe holiday kernel is pretty Gaussian."}}