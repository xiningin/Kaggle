{"cell_type":{"ed9d0ab5":"code","5d715270":"code","eb587a29":"code","03dcc8bc":"code","5533733f":"code","33d5b15e":"code","a83f6f78":"code","dba7d745":"code","095bafb2":"code","c2994048":"code","820e3b55":"code","34bbcdc9":"code","d5fefa8a":"code","40801d22":"code","3a91613d":"code","4c30c338":"code","db4158b2":"code","0b518b44":"code","ee456b37":"code","3b868a42":"code","f8c0e032":"code","cbac9f89":"code","f49a74ff":"markdown","6ccaa0fd":"markdown","4e410547":"markdown","08284d9a":"markdown","1b8d03cc":"markdown","73b55b59":"markdown","fd4417b1":"markdown","bb879ed2":"markdown","03cee936":"markdown"},"source":{"ed9d0ab5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5d715270":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot","eb587a29":"df = pd.read_csv('..\/input\/Cancer1.csv')\ndf","03dcc8bc":"df.head()","5533733f":"df.isnull().sum()","33d5b15e":"#Chcek the unique value.\ndf['Class'].unique()","a83f6f78":"df.drop(['Sample code number'],axis = 1, inplace = True)","dba7d745":"df.head()","095bafb2":"df.describe()","c2994048":"df.info()","820e3b55":"df['Bare Nuclei']","34bbcdc9":"df.replace('?',0, inplace=True)\ndf['Bare Nuclei']","d5fefa8a":"from sklearn.preprocessing import Imputer\nfrom sklearn.preprocessing import MinMaxScaler\n# Convert the DataFrame object into NumPy array otherwise you will not be able to impute\nvalues = df.values\n\n# Now impute it\nimputer = Imputer()\nimputedData = imputer.fit_transform(values)","40801d22":"#Scaling the dataset.\nscaler = MinMaxScaler(feature_range=(0, 1))\nnormalizedData = scaler.fit_transform(imputedData)","3a91613d":"df.head()","4c30c338":"# Bagged Decision Trees for Classification - necessary dependencies\n\nfrom sklearn import model_selection\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.tree import DecisionTreeClassifier","db4158b2":"# Segregate the features from the labels\nX = normalizedData[:,0:9]\ny = normalizedData[:,9]","0b518b44":"print(X)","ee456b37":"print(y)","3b868a42":"kfold = model_selection.KFold(n_splits=10, random_state=7)\ncart = DecisionTreeClassifier()\nnum_trees = 100\nmodel = BaggingClassifier(base_estimator=cart, n_estimators=num_trees, random_state=7)\nresults = model_selection.cross_val_score(model, X, y, cv=kfold)\nprint(results.mean())","f8c0e032":"# AdaBoost Classification\n\nfrom sklearn.ensemble import AdaBoostClassifier\nseed = 7\nnum_trees = 70\n\nkfold = model_selection.KFold(n_splits=10, random_state=seed)\nmodel = AdaBoostClassifier(n_estimators=num_trees, random_state=seed)\n\nresults = model_selection.cross_val_score(model, X, y, cv=kfold)\n\nprint(results.mean())","cbac9f89":"# Voting Ensemble for Classification\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import VotingClassifier\n\nkfold = model_selection.KFold(n_splits=10, random_state=seed)\n\n# create the sub models\nestimators = []\nmodel1 = LogisticRegression()\nestimators.append(('logistic', model1))\n\nmodel2 = DecisionTreeClassifier()\nestimators.append(('cart', model2))\n\nmodel3 = SVC()\nestimators.append(('svm', model3))\n\n# create the ensemble model\nensemble = VotingClassifier(estimators)\nresults = model_selection.cross_val_score(ensemble, X, y, cv=kfold)\n\nprint(results.mean())","f49a74ff":"# Hello everyone! \n        Please voteup if you like it","6ccaa0fd":"# 3.Voting ","4e410547":"![](https:\/\/media1.tenor.com\/images\/d8d7b003cc98b44d2a4ca87e27f0c304\/tenor.gif?itemid=9499691)","08284d9a":"In this case, you did an AdaBoost classification (with 70 trees) which is based on Boosting type of Ensembling. The model gave you an accuracy of 95.57% for 10-fold cross-validation.","1b8d03cc":"You implemented a Voting based Ensemble model where you took Logistic Regression, Decision Tree and Support Vector Machine for voting purpose. The model performed the best so far with an accuracy of 96.42% for 10-fold cross-validation.","73b55b59":" First, you initialized a 10-fold cross-validation fold. After that, you instantiated a Decision Tree Classifier with 100 trees and wrapped it in a Bagging-based Ensemble. Then you evaluated your model.\n\nYou model performed pretty well. It yielded an accuracy of 95.71%.","fd4417b1":"# 2.Boosting\n","bb879ed2":"# 1.Bagging ","03cee936":"# Ensemble learning\nEnsemble learning techniques attempt to make the performance of the predictive models better by improving their accuracy. \n\nEnsemble Learning is a process using which multiple machine learning models (such as classifiers) are strategically constructed to solve a particular problem.\n\n# Different types of Ensemble learning methods:-\n\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSrQtT9q0hAQvyBqQ4a5S4NsXleZB3NwiSSpepTZbeZ_DauK21iYA)\n\n\n# 1.Bagging based Ensemble learning:\n\nBagging is one of the Ensemble construction techniques which is also known as Bootstrap Aggregation.\nBootstrap establishes the foundation of Bagging technique.\nBootstrap is a sampling technique in which we select \u201cn\u201d observations out of a population of \u201cn\u201d observations. But the selection is entirely random, i.e., each observation can be chosen from the original population so that each observation is equally likely to be selected in each iteration of the bootstrapping process. \nAfter the bootstrapped samples are formed, separate models are trained with the bootstrapped samples. \nIn real experiments, the bootstrapped samples are drawn from the training set, and the sub-models are tested using the testing set. The final output prediction is combined across the projections of all the sub-models.\n\n![](http:\/\/res.cloudinary.com\/dyd911kmh\/image\/upload\/f_auto,q_auto:best\/v1535483738\/Image4_Ensemble_prkbyo.png)\n\n# 2.Boosting-based Ensemble learning:\nBoosting is a form of sequential learning technique. \nThe algorithm works by training a model with the entire training set, and subsequent models are constructed by fitting the residual error values of the initial model. \nIn this way, Boosting attempts to give higher weight to those observations that were poorly estimated by the previous model.\nOnce the sequence of the models are created the predictions made by models are weighted by their accuracy scores and the results are combined to create a final estimation.\nModels that are typically used in Boosting technique are XGBoost (Extreme Gradient Boosting), GBM (Gradient Boosting Machine), ADABoost (Adaptive Boosting), etc.\n\n![](https:\/\/littleml.files.wordpress.com\/2017\/03\/boosted-trees-process.png)\n\n# 3.Voting based Ensemble learning:-\nVoting is one of the most straightforward Ensemble learning techniques in which predictions from multiple models are combined. \nThe method starts with creating two or more separate models with the same dataset.\nThen a Voting based Ensemble model can be used to wrap the previous models and aggregate the predictions of those models.\nAfter the Voting based Ensemble model is constructed, it can be used to make a prediction on new data. \nThe predictions made by the sub-models can be assigned weights. Stacked aggregation is a technique which can be used to learn how to weigh these predictions in the best possible way.\n![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMQEhATEhIVEBUSEBgbFhUVFxcXEhUVFRYWGxcYGBUZHCggGBonGxgYIjEhJSkrLy4uGB8zODMtNyguLisBCgoKDg0OGxAQFS4lHyUvLS0tKy83LSswOCstLy0tKystLSstLS0tLS0tKy0tLS0tLS0tLS0rLSsrLS0tLS0tN\/\/AABEIAMIBAwMBIgACEQEDEQH\/xAAbAAEAAwEBAQEAAAAAAAAAAAAAAgQFAwEGB\/\/EAEUQAAIBAgMGAgQLBgQGAwAAAAECAAMRBBIhBRMxQVFhIpEGMnGBFBVCUlNic5KhseEjM3KT0fA0VLLBB2N0g7TSJESz\/8QAGQEBAAMBAQAAAAAAAAAAAAAAAAECBAMF\/8QAIxEBAAICAAUFAQAAAAAAAAAAAAECAxESExQxUgQiMlFhIf\/aAAwDAQACEQMRAD8A\/cYiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAnhHunsQMLAY+rUCUyw3y4l0q2Atkp65svIMrUiOY3okn9Il3edabkPh3q0icoWqtMA6G\/huCGF7aHqCBo08DTWq9YLZ6iqGNzYhb204A8LnnlW\/AThT2LRUAZSVFNkVSTlSm9syr0BsB2AsLDSBVxO29143SoAuDesyAUzcIUzWOfiAb24ENxuLTs221Xeh6dRDSSm2U5CWWqzKhBDEDxKRqRbibCe19iU6gs5dgaDUj4jc06lsw05nKNeOkhtHYwcVCpOd0pI2Z2AKUnzAXX1Tq\/it8rUEaSRc2fjt9vPAybuoUObLqwAJsVJuNRLcz9kYR6QZWbw38CXDZBbUZsqk3PUG3U8tCQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBPCoPEXnsQI7sdB5e78o3Y6DykogR3Y6Dy9\/5xux0HlJRAjux0HlG7HQeXa35SUQI7sdB5Rux0HlJRAjkHQeXe\/5xux0HlJRAjux0HlG7HQeXa35SUQI7sdB5Rux0HlJRAjkHQeXe\/wCcbsdB5SUQI7sdB5e6N2Og8vdJRAjux0HlGQdB5d7\/AJyUp7TR2VVpkqxqIQRcABXVmzW5EAi3O9oFrdjoPKBTHQeU4Vqq0KTM7HJRpEszG5yotySTxNhxnzv\/AAz9KfjTBLXawcVaiOB8khiVH3GSB9Tux0Hl2t+UbsdB5SUQI7sdB5RkHQeXe\/5yUQI7sdB5Rux0HlJRAiEHQeXu\/KSiICIiAiJ4xgexK+CxO9pJUymnnQHK4sy3HMTJoekKmnQYsjs9FWYKwADNutNTp+8vbXS0DeiYx2+uvg0UHMc6ZQVaolhrdhmpnUD5Q042sYDaorMFUD1SScw0s7poLXIzJx00PugaMTIXbqnJ4fXFx4hcDMi2I4ipdx4ex1nCp6Q3QlQoJpkr4g2u6qVFuBa+lNvw9wb0TGO3RmC2UksFAzixJdFBDcxdwDpxDDlrBvSNCt1AJNIMAWAFyivYkA\/JP4e+BuRMf49UFxYHKxBsR1YC3zrZbtwsCDLezNoCuHIFirAEXB9amjjUdnH4+2BdiIgIiICIiBwfF01NjUQHoWAPPlfsfKR+H0vpaf316X69NZToKL1dB+9bp26TtkHQS8VZreo1OtO\/w6l9Kn3l6gdepA98fDqX0qfeXv37HynDIOgjIOgjgR1P49xdbD1UdKj0qiOpDKzKVZSLkEX1FvwmV6JYbCYWhaitGhmdiwTKtyHIBIHYqPKW8TiAhVQhqOwJCIBmsLXJJICqLjUkcbcdJU2axoqlKtSNIszZWOVqbFmZguZTo1uRAvyvHDH2tGa0xvhbfw6l9Kn3l6269QfKefD6X0tP769L9ems45B0Er43ELSUMVvd1UAC92dgqjQaC51PIRwK9T+L\/wAPpfS0\/vr279x5ydLEoxsrqx6BgTxty7zHbHoKdaoV8NG+e2vqAGpbTW2vtsZbpD9tTt9FU4cONORNVqZuKdaaUREq0EREBERAREQEREBERAREQEREBERAREQEREBERAzKB1q\/at\/t2nacaHGr9q3Xt1nado7POyfKSeTNqYKoKrVN6cmp3dzxC07c\/nIdOjN1Mp+keKxDYfJhGFPF1aYNMFQwXhmLBtFXiMx520J0hWI208EwGJrqTlepSQodLlEzAgX45Wa5+0EhtdDTwzU3fO9R8tK9r7xnulrD5Ng3YKTyn5AdoVcB8X0cY7Vsfj8ZReuXa7YfDCqAtNCD+zZrt6tuLdp+r7S9HaFelVpOGO8QrnZ3eomoIKO5JUhgG0PECU1uWrmcFdS15wr4fO1Mk6I2YDq1iASelmOnW0+J\/wCH2H2hgw9Padc1EZ8lAtZrZWIBer6wz6ZQx7XuQJ9VQ2wrO6ZSuQnMzWCgBqi3vz1QffHeXZprqXaps5SlanqFrFsw\/jFnseV9feTLFMftqf2VTp1pe\/y\/pOs50\/31P7Kp+dPt\/vIt2XxfOGjEROTeREQEREBIVWsCbXsCbDibdJOQqqSCASCRxFrjuL6XgVsLtFKiF1JKgA+qbkEAggDU\/oZX2tiHFNatNmVUN6gCjOadjmyh1NiPWtbWxHMSzh9n00BVVGUhRlIBUKigAW6WE4bToFUBRlpJSuzDJmUhQT6oI4cfbA8xG0kwwprWqMxcnKxUa+NQAcotfxry5ExiNrqrUlHiao4BB0yAhySf5b6fVM6pgQ6rvstZla4JQADxBhZbm1rLz5Su2xKZFyAani\/aW8QzmoTYX0\/e1LdM0DtjNr0qSozNZXYgNbS469OB8jKlP0jp3YOGQiplUWuW0JuO9lNx20vLw2ZS3YpsgdQWIDAHV8+b8HYewzw7Jo5s2SzZr3BYEHXUEHTieHUwOGC25TrEBM1zSzgFbHKeHvPETps7bFKvrTa4NtbEC5BNvbYX9hHWdsPs+nTtkXLZAosTbKt7Ai+trm1+F5Cls1EZMihFQ3CqAAWyBAT7E08oCptNQtQ6k0yAV4G7Gyi\/fTWV8Ziqj0BUpXUoxLqMpZlQstRVLAjNoSOtgNL3FxMBTAdcps98wJYjUkmwJ01PKVsTs7KpFN90MwZgVLqQqgWtcWGgJ6kG97mB5V2klBKZq1Cy1G8LsoHEXANgLaAnhyltMapTPrbS4yksCQDYqATwIlehhBWpjf5a4bxLdAoUMlrZbnkW5\/KM70sGtmDgPmcscwFieWnYAD3QDYzx0lAJFRWIPC2UKdQdectTj8FTMjZdaYIW2gAIsQANOQnaAiIgZlDjV+1bp26TrOVDjV+1b\/btKmIxT1GNKgbFTapVtdaf1VB0ap24LxPJT1js868e6UsZjGzbqiA1S2pP7ukDwZ7c+ijU9hciGzjSQsqvvKjN42bWozAuPFpoPA4A0Ay2Et4TCrSXKgsL3JJJZmPFmY6sx6mVsRsxbVDTUCo4ILZmU+I3JzLcgyUfxwxeEp18SoqU0qCjRzWdQwDVHGQi40I3Tec15n7K8TYipxzVioP1aShCPvioffNCEShWpK6lWAZWFiCLgg8QRzmRiKZorkqMxoZlIqXu9LKwYLUJBzU7j1zwHrfOm1PCLwRIvDr3kKf76n9nU6240\/d5\/wBZnbtsLqoL0OaAEtR7oOLU\/q8V5aaC9h3DVaTKQwai5DCxBBNKxBvw9ki3Z0xR74akRE5N5ERAREQEREBOeIoiopVtQeIuRcdNOU6RAREQEREBERATnXpB1KtwYWNiRp7RrOkQPALaT2IgIiZ21Npmi1NFpmozq59YKAEKA6nu4\/GRMxEblMRMzqGjEw\/jup\/lz\/MX+kpY3aFaswVqOWjbxKtUZ6h+axt4UtxA1bhoLhufOx+S\/Kv9LleguLYimiinfx18oz1CLXWk1vqi9Tlay66rfw+x8PTVVShSVVFgAi2Frnp1JPvMoJtlwABhrACwAqLYAcgLTSwGNFWktXKVuCcpsSLEgi49ktXJW3aVbUmveD4sofQ0\/uL0t06aeyQxODoIru1KnZVLE5F4DU8vqjyEzcP6QvURHGGNnUML1FvZhcX85y2ntKrVpPTGHtnsGvUX1CRnHDiVzAd5XnU8k8m3iv7G2TTWhRz0aefIC\/gX12u7cvnsx98t\/FlD6Gn9xelunTSZ3x3U\/wAuf5i\/0nbAbYNSqKTUjTLU2YHMrDwFARp\/GPIyYy0mdRJOK0RuYXDs2j9DT+4vbt2HkI+LaP0NP7i9b9OustROimlT4so\/Q0\/uL0I6dCR75Q+LRhXarh6SlWJNSkoAbW13pHkdBdODWB0PrbUwU2+zXK4ckZmAJdQTlYre3ulbXiveU1pNu0NnC4haqh0YMp4EeRBHIg6EHUETrPlKmOqrU3lGhlLMN6hqLu6g0GbQeGoBwbnax5Fb\/wAd1P8ALn+Yv9JTnY\/JflX+m5ExcPtxjUpU2olN65UNnVgCKbvqOlkP4Tal62i0biVJrNf5JERLIIiICIiAiIgIiICIiAiIgIiICYO3f8Rhvsa\/+rDzembtXZhrNTdam7ZFceqGBDlCdLjXwD8Zzy1m1JiF8doraJlmOTY21NtAdATy1mZssOrtvh46uvydFpogt4frM558ec3PiSr\/AJgfyh\/7T5X09xON2ZTTEoqYugulYBMtakCRZxqQU5HTTTlww9Lk\/GzqKPope2B\/hE\/hf\/U0wfROq20cNTxKVDSWpeyvTQsLG2uWobX4i+trT6nZ+C3VJaWYtYEZrWJuSSbcuM0enw2xzO3HPlreI0+b2R+4w\/2FP\/QJVxtWrvVGRt3TbMStvGAhNr5h8ojT6pvxE2cN6PVKaIgxAsihRekL2UAC\/i7TO9KsO+EwmIxDVRVWimZk3Q8SgjMPW42vacOlvt16imlxGuAeo56HXtPcB\/i6P\/T1v9eHnPY+G+FUaVehilelVQFCKQ4dCM2hHAjkRNLAbHanVFV6u8K02UAIFHjKEk6m\/qDzl8Xp71vEyrkz1tWYhrRETcxk+S2b6n\/cqf8A6PPrZ8\/8RvTDZa9lBZrGmtxclrXzAc+Mz+ox2vERDtgyRSdyxtrLULLoBRUo7m4B8DM7XB1t4U4fObpNKhUzKrcLjhe9jzF+0+J9GPSbFbVxTUcNS3dGif8A5FaugOUa+BURrFzbTxEcTrz\/AEAbDqjhiAP+0P8A2mXpcjT1FFP\/AOxgv+of\/wAbET6mYuH2Iwq0aj1s+6csFCBbk03TU3OlnJ9wm1NmCk0pqWXNeL23BEROzkREQEREBERAREQEREBERAREQEREBIVqSurKwDKwIZSLggixBHMWk4gUK+yluGpfsHVQAyAWKrwV04Oo4WPC5sQdZGntEoQmIUUyTZag\/cOTwsx9Rj81utgWmjI1EDAqwDAixBFwQeII5wJSjt3ZaYzD1sPULBK1MqxWwYA8bEgi85fBKlDWh+0T6FzqB\/yqh9X+FtOABUS1gsclW+UkMvrIwy1EP1lOo7HgeIJEDF9CNh0cBSq4agpUU67XuzNmzgMjeI6eAqDawupn0czcR+zxFJ+VZTTb+NMz0z2Ft6PaVmlAROdeutNSzsEVRqzEAD2kyhvauI9S+Hp\/PYftnH1Eb1B3YX4+EaGB3xm0VpkIAatQi4ppYtbqxOiL3Ygchc6TguzmqkNiSH5iit9yp+texqnuwtoCFB1lzB4NKQsi2ubkkksx+czHVj3JneByoYZELlEVDUfM5UAFmsBma3E2AF+wnWIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgJVxuASrYm6uvq1ENqi36N04XU3BtqDLUQMDa1SqlJ1qgHLZqddRZA9Mhk3q8UFwLsLra98t7SzS22tZUOGG\/Z0VtDamgYAjeVNQpsR4RdteFtZrShh8Ui1Th0RVyoH8OUL4i1wFHMHU\/xDrAYfZ3iFSs2+qDVdLU6Z\/5aa2P1iS2p1tpL8RAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERATy09iAiIgIiICIiAiIgIiICcq1YLluwXM1hfmbGw\/CdZwxWFWrlzjMFa4HK9iNevGB1seo8v16xY9R5frJRAjY9R5d\/b0ix6jy\/WSiBGx6jy\/WeWPUeXb29ZOIEbHqPL9Yseo8v1kogRseo8u\/t6RY9R5frJRAhY9R5frFj1Hl29vWTiBGx6jy\/WLHqPL9ZKIEbHqPLv7ek8JItcjXse9+cnIugNr8j1I\/KBDP9Zf7B7\/3ae5j85fL9es8XDqNAPz6W\/KBQXpzvxJ11\/qYAvx8Q0vy6e+A\/wBYeXf2z3crrp6178ed7\/mZE4ZTy\/E\/1gSzfWH9n2zjWrNYFCrHMmlvklgG+Vxtc+7nOvwdenO\/E8df6mBh1004dzygccHXZlGeytdrrbhY2+cex987Cpe9mXTt7Lc4OGW97a+084+Dr049z279oHoa9wGGh6ezvJWPUeXf29JFKCg3A19p\/vlOkCNj1Hl+sWPUeX6yUQIgHqPL9eslEQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQP\/2Q==)\n"}}