{"cell_type":{"38fb677d":"code","77d9f095":"code","fc8b04e3":"code","67e5d3ec":"code","e4e8a6af":"code","236fb8bd":"code","37e8bb70":"code","d5732e41":"code","2cb5a74c":"code","b2db819a":"code","a9995f80":"code","291359bc":"code","a1fc1a84":"code","e1bf9c05":"code","e50ffce7":"code","6abdabb6":"code","f96802e1":"code","3378108e":"code","216d3cab":"code","2f404391":"code","8da26607":"code","abc8802d":"code","73d57fec":"code","dd8a51b2":"code","c529fddb":"code","ef6f8b94":"code","f453c541":"code","9a74f7c0":"markdown","b910244a":"markdown","971046a6":"markdown","56e8194a":"markdown"},"source":{"38fb677d":"#import library\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 10, 6\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.arima_model import ARIMA\nimport statsmodels.api as sm\nimport itertools\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport math\nimport numpy as np\nfrom pylab import rcParams","77d9f095":"df = pd.read_csv('..\/input\/tcs-dataset-from-2015-to-2021\/TCS.NSE.csv')","fc8b04e3":"df.shape","67e5d3ec":"df.head()","e4e8a6af":"df.describe()","236fb8bd":"df.info()","37e8bb70":"#handling missing value\ndf.dropna(inplace = True)","d5732e41":"#transform datetime\ndf['Date'] =  pd.to_datetime(df['Date'], format = '%Y-%m-%d')","2cb5a74c":"#indexing date\ndf = df.set_index('Date')\ndf.index","b2db819a":"#visualize of each atrribute\ndf.plot(subplots = True, figsize = (10,12))\nplt.title('Tata Consultancy Stock Attributes')\nplt.show()","a9995f80":"#check stock from 2019 - 2021\ndf['2019':'2021'].plot(subplots = True, figsize = (10,12))\nplt.title('Tata Consultancy Stock Attributes')\nplt.show()","291359bc":"#check moving average\ndf['MA for 20 days'] = df['Open'].rolling(20).mean()\ndf['MA for 50 days'] = df['Open'].rolling(50).mean()\n\n#visualize moving average\ndf.truncate(before = '2019-01-01', after = '2021-01-01')[['Adj Close','MA for 20 days','MA for 50 days']].plot(subplots = False, figsize = (12,6))\nplt.title(\"Moving Average of Tata Consultancy Stock\")\nplt.show()","a1fc1a84":"#check daily return\ndf['Daily Return'] = df['Adj Close'].pct_change()\nresult = df.sort_values(by = ['Daily Return'], ascending = False)\nresult.head()","e1bf9c05":"#visualize the per day closing price of the stock\nplt.figure(figsize = (10,6))\nplt.grid(True)\nplt.xlabel('Dates')\nplt.ylabel('Close Prices')\nplt.plot(df['Close'])\nplt.title('Tata Consultancy closing price')\nplt.show()","e50ffce7":"#scatter plot of closing price\ndf_close = df['Close']\ndf_close.plot(style='k.')\nplt.title('Scatter plot of closing price')\nplt.show()","6abdabb6":"#distribution\nplt.figure(figsize = (10,6))\nsns.distplot(df['Close'])\nplt.title(\"Distribution of Close Price\")\nplt.show()","f96802e1":"#test for staionarity\ndef test_stationarity(timeseries):\n    rolmean = timeseries.rolling(12).mean()\n    rolstd = timeseries.rolling(12).std()\n   \n    plt.plot(timeseries, color = 'blue',label = 'Original')\n    plt.plot(rolmean, color = 'red', label = 'Rolling Mean')\n    plt.plot(rolstd, color = 'black', label = 'Rolling Std')\n    plt.legend(loc = 'best')\n    plt.title('Rolling Mean and Standard Deviation')\n    plt.show(block = False)\n    \n    print(\"Results of dickey fuller test\")\n    adft = adfuller(timeseries,autolag = 'AIC')\n    \n    output = pd.Series(adft[0:4],index=['Test Statistics','p-value','No. of lags used','Number of observations used'])\n    for key,values in adft[4].items():\n        output['critical value (%s)'%key] =  values\n    print(output)\n    \ntest_stationarity(df_close)","3378108e":"result = seasonal_decompose(df_close, model = 'multiplicative', freq = 30)\nfig = plt.figure()  \nfig = result.plot()  \nfig.set_size_inches(10, 6)","216d3cab":"#check log series of moving average in rolling average\nrcParams['figure.figsize'] = 10, 6\ndf_log = np.log(df_close)\nmoving_avg = df_log.rolling(12).mean()\nstd_dev = df_log.rolling(12).std()\nplt.legend(loc = 'best')\nplt.title('Moving Average')\nplt.plot(std_dev, color = \"black\", label = \"Standard Deviation\")\nplt.plot(moving_avg, color = \"red\", label = \"Mean\")\nplt.legend()\nplt.show()","2f404391":"#split data\ntraining, testing = df_log[3:int(len(df_log) * 0.9)], df_log[int(len(df_log) * 0.9):]\nplt.figure(figsize = (10,6))\nplt.grid(True)\nplt.xlabel('Dates')\nplt.ylabel('Closing Prices')\nplt.plot(df_log, 'red', label = 'Training')\nplt.plot(testing, 'blue', label = 'Testing')\nplt.legend()\nplt.show()","8da26607":"#check parameter in sarimax model\np = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [(testing[0], testing[1], testing[2], 12) for testing in list(itertools.product(p, d, q))]\nprint('Examples of parameter combinations for Seasonal ARIMA...')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))","abc8802d":"#selection of parameter in sarimax model\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            model = sm.tsa.statespace.SARIMAX(testing, order = param, seasonal_order = param_seasonal, enforce_stationarity = False,\n                                            enforce_invertibility = False)\n            results = model.fit()\n            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))\n        except:\n                continue","73d57fec":"#fitting sarimax model\nmodel = sm.tsa.statespace.SARIMAX(testing, order = (1, 1, 1), seasonal_order = (1, 1, 0, 12), enforce_stationarity = False,\n                                enforce_invertibility = False)\nresult = model.fit()\nprint(result.summary().tables[1])","dd8a51b2":"#visualize of sarimax model\nresult.plot_diagnostics(figsize = (12, 9))\nplt.show()","c529fddb":"#build arima model\nmodel = ARIMA(training, order = (3, 1, 2))  \nfitted = model.fit(disp = -1)  \nprint(fitted.summary())","ef6f8b94":"#visualize forecast\nfc, se, conf = fitted.forecast(167, alpha = 0.05)  \nfc_series = pd.Series(fc, index = testing.index)\nlower_series = pd.Series(conf[:, 0], index = testing.index)\nupper_series = pd.Series(conf[:, 1], index = testing.index)\n\nplt.figure(figsize = (10,6), dpi = 100)\nplt.plot(training, label = 'training')\nplt.plot(testing, color = 'blue', label = 'Actual Stock Price')\nplt.plot(fc_series, color = 'orange',label = 'Predicted Stock Price')\nplt.fill_between(lower_series.index, lower_series, upper_series, color = 'k', alpha = .10)\nplt.title('Tata Consultancy Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Actual Stock Price')\nplt.legend(loc = 'upper left', fontsize = 8)\nplt.show()","f453c541":"#report of MSE, MAE, RMSE & MAPE\nmse = mean_squared_error(testing, fc)\nprint('MSE: '+ str(mse))\nmae = mean_absolute_error(testing, fc)\nprint('MAE: '+ str(mae))\nrmse = math.sqrt(mean_squared_error(testing, fc))\nprint('RMSE: '+ str(rmse))\nmape = np.mean(np.abs(fc - testing) \/ np.abs(testing))\nprint('MAPE: '+ str(mape))","9a74f7c0":"# Forecast Analysis of Tata Consultancy Services","b910244a":"## ARIMA Model","971046a6":"## Data Extraction","56e8194a":"## Time Series Analysis "}}