{"cell_type":{"aac598ee":"code","0b12a9f9":"code","36b3896f":"code","70ece4a1":"code","bec38693":"code","9242a3de":"code","15d2797f":"code","f34752ab":"code","11638d62":"code","792269d4":"code","ab4f004e":"markdown","766d4975":"markdown","53a0b501":"markdown","bd3f7d9b":"markdown","662f7c0f":"markdown","b60d47a1":"markdown"},"source":{"aac598ee":"import numpy as np\nimport pandas as pd\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.optimizers import SGD\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, AveragePooling2D\nfrom tensorflow.keras import utils\nfrom tensorflow.keras.preprocessing import image\nimport matplotlib.pyplot as plt\n%matplotlib inline \nimport os\n\"\"\" \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u0444\u0430\u0439\u043b\u044b \u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \"\"\"\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0b12a9f9":"# \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 CIFAR-10\nclasses=['\u0441\u0430\u043c\u043e\u043b\u0435\u0442', '\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c', '\u043f\u0442\u0438\u0446\u0430', '\u043a\u043e\u0442', '\u043e\u043b\u0435\u043d\u044c', '\u0441\u043e\u0431\u0430\u043a\u0430', '\u043b\u044f\u0433\u0443\u0448\u043a\u0430', '\u043b\u043e\u0448\u0430\u0434\u044c', '\u043a\u043e\u0440\u0430\u0431\u043b\u044c', '\u0433\u0440\u0443\u0437\u043e\u0432\u0438\u043a']","36b3896f":"\"\"\"\u0422\u0430\u043a \u043a\u0430\u043a \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043d\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u0442\u0430\u0431\u043b\u0438\u0446, \u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043c\u0435\u0440\u043d\u044b\u0445 \u0442\u0435\u043d\u0437\u043e\u0440\u043e\u0432 numpy,\n\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u044e numpy load()\"\"\"\nX_train = np.load('\/kaggle\/input\/cnn-urfu-cifar10\/train.npy')\nY_train = np.load('\/kaggle\/input\/cnn-urfu-cifar10\/train_label.npy')\nX_test = np.load('\/kaggle\/input\/cnn-urfu-cifar10\/test.npy')\nX_train.shape, Y_train.shape, X_test.shape","70ece4a1":"x_train = X_train \/ 255\nx_test = X_test \/ 255","bec38693":"y_train = utils.to_categorical(Y_train, 10)","9242a3de":"from keras.layers import BatchNormalization\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32, (3, 3), activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(64, (3, 3), activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64, (3, 3), activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(128, (3, 3), activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(128, (3, 3), activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.4))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\n\nsgd = SGD(lr=0.001, momentum=0.9)\nmodel.compile(optimizer=sgd, loss='categorical_crossentropy', metrics=['accuracy'])\n","15d2797f":"history = model.fit(x_train, y_train,\n              batch_size=32,\n              epochs=200,\n              validation_split=0.1,\n              shuffle=True,\n              verbose=2)","f34752ab":"\"\"\"\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043f\u043e \u0432\u0441\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c\"\"\"\npredictions = model.predict(x_test)\n\"\"\"\u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u043d\u043e\u043c\u0435\u0440\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044f\u043c\u0438 \u043f\u043e \u0432\u0441\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430\"\"\"\npredictions = np.argmax(predictions, axis=1)","11638d62":"\"\"\"\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0430\u0439\u043b \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0438 \u043f\u0438\u0448\u0435\u043c \u0432 \u043d\u0435\u0433\u043e \u043d\u0430\u0448\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\"\"\"\nsample_submission = pd.read_csv('\/kaggle\/input\/cnn-urfu-cifar10\/sample_submission.csv')\nsample_submission['label'] = predictions","792269d4":"\"\"\"to_csv - \u043f\u0438\u0448\u0435\u0442 \u0442\u0430\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0430\u0439\u043b '.csv' \"\"\"\nsample_submission.to_csv('sample_submission.csv', index=False)","ab4f004e":"## \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0443\u044e \u0441\u0435\u0442\u044c","766d4975":"**\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435**","53a0b501":"## \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","bd3f7d9b":"## \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0443\u044e \u0441\u0435\u0442\u044c","662f7c0f":"# \u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0445 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 CIFAR-10\n\n\u0423\u0447\u0435\u0431\u043d\u044b\u0439 \u043a\u0443\u0440\u0441 \"[\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0433\u043b\u0443\u0431\u043e\u043a\u0438\u0445 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0435\u0442\u0435\u0439 \u043d\u0430 Python](https:\/\/openedu.ru\/course\/urfu\/PYDNN\/)\".","b60d47a1":"**\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043e\u0442\u0432\u0435\u0442\u044b \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 one hot encoding**"}}