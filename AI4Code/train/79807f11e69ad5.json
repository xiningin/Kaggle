{"cell_type":{"12c042cd":"code","7ee6b185":"code","3991de0c":"code","d16c3eb2":"code","4e91be06":"code","a143dc35":"code","c14f54f2":"code","7ce9b7fd":"code","c18c23b7":"code","5a668934":"code","904fb6a8":"code","c17d7dcf":"code","9a417d95":"code","28e15ed1":"code","ab56ecc2":"code","703a51f1":"code","7d3a24ff":"code","e6d34986":"code","fdb3f3fc":"code","b21119c1":"code","51f28607":"code","0c54c100":"code","cb332fc8":"code","2e7c5a33":"code","babefd8e":"code","2af5f722":"code","ad81f776":"code","451e2744":"code","043d7fc1":"code","18510e08":"code","7a9287c1":"code","ff3fea2e":"code","1275589c":"code","6558186c":"code","3d71ef03":"code","30b06cfc":"code","210511ae":"code","5259406e":"code","75b0b7e6":"code","f3bfe559":"code","25f652ed":"code","de0c8b80":"code","e77ad67c":"code","125ba4ab":"code","18b01ed6":"code","c1755a1e":"code","c4fe2d56":"code","f35fd4ba":"code","7b757a42":"code","da8baacd":"code","08400d42":"code","c595c058":"code","34273d1a":"code","70513959":"code","d4367539":"code","3785e603":"code","b408f2de":"code","7ceff974":"markdown","f97b3f01":"markdown","09c0ed12":"markdown","54219208":"markdown","1439a8ba":"markdown","037c1cc4":"markdown","4eba5f09":"markdown","9ccd53a5":"markdown","54f862e0":"markdown","32b1c337":"markdown","ab007ad2":"markdown","2095a121":"markdown","5032518e":"markdown","e5108dce":"markdown","3430b97f":"markdown","0126c6ee":"markdown"},"source":{"12c042cd":"import pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport random\nimport numpy as np\nimport sklearn\nfrom sklearn import preprocessing","7ee6b185":"real_df = pd.read_csv(\"..\/input\/cirrhosis-prediction-dataset\/cirrhosis.csv\")","3991de0c":"real_df.columns","d16c3eb2":"real_df.transpose()","4e91be06":"real_df.shape","a143dc35":"real_df.info()","c14f54f2":"real_df.describe().transpose()","7ce9b7fd":"real_df.isnull().sum()","c18c23b7":"plt.figure(figsize=[20,20])\nsns.heatmap(real_df.isnull())","5a668934":"# df1 = real_df[real_df['Stage'].notnull()] another method to remove null rows based on single column\n# df1 ","904fb6a8":"real_df[real_df['Stage'].isnull()].index # this is how we have to extract null value index","c17d7dcf":"df1 = real_df.drop(real_df[real_df['Stage'].isnull()].index) #drop null value from dataframe","9a417d95":"df1.reset_index(drop=True,inplace=True) #reset the index","28e15ed1":"df1['Stage'].isnull().sum()","ab56ecc2":"df1.shape","703a51f1":"plt.figure(figsize=(10,10))\nsns.heatmap(df1.corr(), cmap=\"RdBu\", annot=True)  ","7d3a24ff":"def plot_num(num_col_list):\n    c=1\n    for i in num_col_list:\n        plt.subplot(3,3,c)\n        sns.scatterplot(x=df1[i], y=df1['Stage'], palette='Blues')\n        sns.despine(top=True, right=True, bottom=True, left=True)\n#         plt.tick_params(axis='both', which='both', bottom=False, top=False, left=False)\n        plt.xlabel('')\n        plt.title(i)\n        c+=1\n    return plt","e6d34986":"plt.figure(figsize=(21.2,10))\nlist_num_toplot = ['Cholesterol','Copper','Alk_Phos','SGOT','Tryglicerides','Platelets','Prothrombin']\nplot_num(list_num_toplot)","fdb3f3fc":"df2 = df1.dropna()     # lets drop all null value in the dataframe and copy it to df2\ndf2.shape","b21119c1":"def max_min_collect(df,column_list):\n    max_min_list = []\n    for col in column_list:\n        Q1 = np.quantile(df[col], 0.25)\n        Q3 = np.quantile(df[col], 0.75)\n        IQR = Q3 - Q1\n        x=[abs(1.5 * IQR - Q1), abs(Q3 + 1.5 * IQR)]\n        max_min_list.append(x)\n        \n    return max_min_list\n        \n        \n        \n#         drop_outliers = [x for x in df[col] if (\n#         (x > Q1 - 1.5 * IQR) & (x < Q3 + 1.5 * IQR))]\n#         df = df.loc[df[col].isin(drop_outliers)]\n#     return df","51f28607":"# list_num = ['Cholesterol','Copper','Alk_Phos','SGOT','Tryglicerides','Platelets','Prothrombin']\n# max_min_value = max_min_collect(df2,list_num)\n# max_min_value","0c54c100":"# max_min_value[0][1]","cb332fc8":"check_normal1 = df2.groupby(['Stage']) #group by stages for df2- this grouping is done to find max and min value\nstage_1_1 = check_normal1.get_group(1)\nstage_2_1 = check_normal1.get_group(2)\nstage_3_1 = check_normal1.get_group(3)\nstage_4_1 = check_normal1.get_group(4)\n","2e7c5a33":"list_num = ['Cholesterol','Copper','Alk_Phos','SGOT','Tryglicerides','Platelets','Prothrombin']# numerical value column list\nstage_names = [stage_1_1, stage_2_1, stage_3_1, stage_4_1] \nmin_max_for_all_stages = []\nfor i in stage_names:\n    max_min_value = max_min_collect(i,list_num)\n    min_max_for_all_stages.append(max_min_value)\nmin_max_for_all_stages  ","babefd8e":" min_max_for_all_stages[0][0][0] #this is how we access min and max value ","2af5f722":"check_normal = df1.groupby(['Stage']) #group the stages for df1\nstage_1 = check_normal.get_group(1)\nstage_2 = check_normal.get_group(2)\nstage_3 = check_normal.get_group(3)\nstage_4 = check_normal.get_group(4)\nstage_4","ad81f776":"stages = [stage_1,stage_2,stage_3,stage_4]","451e2744":"# df1.select_dtypes(include='object').columns\ndef dtype_obj_fillnull(stage_list):\n    \n    for stage_range in stage_list:\n        \n        x1 = stage_range.select_dtypes(include='object')\n        x1 = x1.columns[x1.isna().any()].tolist()\n\n        for i in x1:\n\n            collect_null_index = stage_range[stage_range[i].isnull()].index.tolist()\n            get_repeat_value = stage_range[i].mode()[0]\n\n            for j in collect_null_index:\n\n                df1.loc[[j],i] = get_repeat_value\n            \n    return df1\n        \n        \n","043d7fc1":"after_obj_null_correction = dtype_obj_fillnull(stages) \nafter_obj_null_correction.isnull().sum() ","18510e08":"x1 = stage_4.select_dtypes(exclude='object') # this is how we have to extract the numerical null value column names\nx1 = x1.columns[x1.isna().any()].tolist()\nx1","7a9287c1":"def dtype_num_fillnull(stage_list):\n    \n    for stage_range in stage_list:\n        \n        x1 = stage_range.select_dtypes(exclude='object')\n        x1 = x1.columns[x1.isna().any()].tolist()\n        \n        z=0\n        \n        for i in range(0,len(x1)):\n\n            collect_null_index = stage_range[stage_range[x1[i]].isnull()].index.tolist()\n\n            for j in collect_null_index:\n                \n                if i!=3: #SGOT has 2 decimal values eg:213.87 \n                     get_random_value = round(random.uniform(min_max_for_all_stages[z][i][0], min_max_for_all_stages[z][i][1]), 1)\n                else:\n                     get_random_value = round(random.uniform(min_max_for_all_stages[z][i][0], min_max_for_all_stages[z][i][1]), 2)\n\n                after_obj_null_correction.loc[[j],x1[i]] = get_random_value\n        z+=1\n            \n    return after_obj_null_correction\n        ","ff3fea2e":"after_num_null_correction =  dtype_num_fillnull(stages)\nafter_num_null_correction","1275589c":"def plot_num(num_col_list):\n    c=1\n    for i in num_col_list:\n        plt.subplot(3,3,c)\n        sns.scatterplot(x=df1[i], y=df1['Stage'], palette='Blues')\n        sns.despine(top=True, right=True, bottom=True, left=True)\n#         plt.tick_params(axis='both', which='both', bottom=False, top=False, left=False)\n        plt.xlabel('')\n        plt.title(i)\n        c+=1\n    return plt","6558186c":"plt.figure(figsize=(21.2,10))\nlist_num_toplot = ['Cholesterol','Copper','Alk_Phos','SGOT','Tryglicerides','Platelets','Prothrombin']\nplot_num(list_num_toplot)","3d71ef03":"after_num_null_correction.isnull().sum()","30b06cfc":"after_num_null_correction.duplicated().sum()","210511ae":"after_num_null_correction.info()","5259406e":"after_num_null_correction['Age'] = (after_num_null_correction['Age']\/365).astype('int64') # convert age to years\nafter_num_null_correction\n","75b0b7e6":"plt.figure(figsize=(10,10))\nsns.heatmap(after_num_null_correction.corr(), cmap=\"RdBu\", annot=True)","f3bfe559":"stage_corr = after_num_null_correction.corr()['Stage'][:-1]\nstage_corr","25f652ed":"after_num_null_correction['Stage'] = np.where(after_num_null_correction['Stage'] == 4,1,0) #replace stage 4 as 1(positive) and rest of the stages in to 0(negative)","de0c8b80":"check_1 = after_num_null_correction.groupby(['Stage'])\ncheck_1.get_group(0).shape","e77ad67c":"plt.figure(figsize=(10,10))\nsns.heatmap(after_num_null_correction.corr(), cmap=\"RdBu\", annot=True)","125ba4ab":"def plot_num(num_col_list):\n    c=1\n    for i in num_col_list:\n        plt.subplot(3,3,c)\n        sns.scatterplot(x=df1[i], y=df1['Stage'], palette='Blues')\n        sns.despine(top=True, right=True, bottom=True, left=True)\n#         plt.tick_params(axis='both', which='both', bottom=False, top=False, left=False)\n        plt.xlabel('')\n        plt.title(i)\n        c+=1\n    return plt","18b01ed6":"plt.figure(figsize=(21.2,10))\nlist_num_toplot = ['Bilirubin','Cholesterol','Albumin','Copper','Alk_Phos','SGOT','Tryglicerides','Platelets','Prothrombin']\nplot_num(list_num_toplot)","c1755a1e":"def plot_object(obj_col_list):\n    c=1\n    for i in obj_col_list:\n        plt.subplot(3,2,c)\n        sns.countplot(x=after_num_null_correction['Stage'], hue=after_num_null_correction[i], palette='Blues', alpha=0.9)\n        sns.despine(top=True, right=True, bottom=True, left=True)\n#         plt.tick_params(axis='both', which='both', bottom=False, top=False, left=False)\n        plt.xlabel('')\n        plt.title(i)\n        c+=1\n    return plt\n    ","c4fe2d56":"plt.figure(figsize=(21.2,10))\nlist_obj_toplot = ['Drug','Ascites','Hepatomegaly','Spiders','Edema']\nplot_object(list_obj_toplot)\n","f35fd4ba":"def plot_num(num_col_list):\n    c=1\n    for i in num_col_list:\n        plt.subplot(3,3,c)\n        sns.kdeplot(x=after_num_null_correction[i], hue=after_num_null_correction['Stage'], fill=True, palette='RdBu', common_norm=True)\n        sns.despine(top=True, right=True, bottom=True, left=True)\n#         plt.tick_params(axis='both', which='both', bottom=False, top=False, left=False)\n        plt.xlabel('')\n        plt.title(i)\n        c+=1\n    return plt","7b757a42":"plt.figure(figsize=(21.2,10))\nlist_num_toplot = ['Bilirubin','Cholesterol','Albumin','Copper','Alk_Phos','SGOT','Tryglicerides','Platelets','Prothrombin']\nplot_num(list_num_toplot)","da8baacd":"def plot_reg(num_col_list):\n    c=1\n    for i in num_col_list:\n        plt.subplot(3,3,c)\n        sns.regplot(x=after_num_null_correction[i], y=after_num_null_correction['Stage'], scatter=False, logistic=True, color='royalblue')\n        sns.despine(fig=None, ax=None, top=True, right=True, left=True, bottom=True, offset=None, trim=False);\n#         plt.tick_params(axis='both', which='both', bottom=False, top=False, left=False)\n        plt.xlabel('')\n        plt.title(i)\n        c+=1\n    return plt","08400d42":"plt.figure(figsize=(21.2,10))\nlist_num_toplot = ['Bilirubin','Cholesterol','Albumin','Copper','Alk_Phos','SGOT','Tryglicerides','Platelets','Prothrombin']\nplot_reg(list_num_toplot)","c595c058":"categorical_cols = ['Status', 'Drug', 'Sex', 'Ascites', 'Hepatomegaly', 'Spiders', 'Edema', 'Stage']\nle = preprocessing.LabelEncoder()\nfor col in categorical_cols:\n    after_num_null_correction[col] = le.fit_transform(after_num_null_correction[col])\n\nafter_num_null_correction","34273d1a":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score","70513959":"X = after_num_null_correction.drop(['ID','N_Days','Status','Age','Sex','Stage'],axis = 1)\ny = after_num_null_correction.pop('Stage')\n\n# X_train, X_val, y_train, y_val = train_test_split(X, y, train_size = 0.8)\n# print(X_train.shape, X_val.shape,y_train.shape,y_val.shape)","d4367539":"from sklearn.model_selection import StratifiedKFold\nfrom xgboost import XGBClassifier\nskf = StratifiedKFold(n_splits=10, random_state=1, shuffle=True)\nlog_model = XGBClassifier(learning_rate=0.75, max_depth=3, random_state=1, gamma=0, eval_metric='error') # tried learning rate values between range [0.01 - 10] & depth [2-8]\n\nacc=[]\ndef training(train, test, fold_no):\n  X_train = train\n  y_train = y.iloc[train_index]\n  X_test = test\n  y_test = y.iloc[test_index]\n  log_model.fit(X_train, y_train)\n  score = log_model.score(X_test,y_test)\n  acc.append(score)\n  print('For Fold {} the accuracy is {}'.format(str(fold_no),score))\n\nfold_no = 1\nfor train_index,test_index in skf.split(X, y):\n  train = X.iloc[train_index,:]\n  test = X.iloc[test_index,:]\n  training(train, test, fold_no)\n  fold_no += 1\nprint()\nprint('XGboost model Mean Accuracy = ', np.mean(acc))","3785e603":"from sklearn.metrics import classification_report\nXGB_model_predict = log_model.predict(test)\nXGB_model_predict_proba = log_model.predict_proba(test)\n\nprint(classification_report(y.iloc[test_index], XGB_model_predict))","b408f2de":"# from joblib import dump, load\n# dump(log_model, 'model.joblib')","7ceff974":"### Again see the correlation after handling null values","f97b3f01":"### Visualize the value diastribution after handling null values","09c0ed12":"### Try to fill the null values by selecting random values between min and max value in that column for (choles, copper,Alk_posph,...). ","54219208":"### Fill object (drug,ascites,hemetomegally, spiders)  null values by using mode (most repeated value in that feature & stage)","1439a8ba":"### Encoding all categorical feature values","037c1cc4":"### Lets see how this null value is distributed all over the dataset with the help of heatmap","4eba5f09":"### As you can see there are some null values in target feature lets drop it","9ccd53a5":"### So what can we do is fill numerical null values by random selection of values between min and max possible values in that stage of liver cirrhosis and categorical null value by most repeated value","54f862e0":"### find max and min value of each feature and stage by removing outliers ","32b1c337":"## Handling null values","ab007ad2":"### visualization of categorical feature distribution after stage one-hot encoding","2095a121":"## Data preprocessing, cleaning, feature selection and analysis\n## Target is to predict liver cirrhosis. Our data set contains both categorical and numerical variable. In liver cirrhosis there are 4 stages\n### Note: There are 4 stages of Liver cirrhosis \n### Stage 1 : Normal\n### Stage 2 : Fatty Liver\n### Stage 3 : Liver Fibrosis\n### Stage 4 : Liver Cirrhosis\n## so what we can do is lets predict is the patient is in liver cirrhosis stage(stage 4) or not","5032518e":"### Find correlation between features and with target .","e5108dce":"### Visualize how values of each numerical feature distributed in each stage \n### As you can see below each stage has different value range","3430b97f":"### check for null values in dataset","0126c6ee":"### As i told you before we going to have 2 target values instead of 4 \n### 0 means no cirrhosis\n### 1 means cirrhosis"}}