{"cell_type":{"cbebba4d":"code","25a781aa":"code","85e2bdf5":"code","5bfe1d51":"code","43f18003":"code","23e39449":"code","a8ee5cf8":"code","395397ee":"code","f07f373c":"code","0a4aa577":"code","ed9b266d":"code","4cdd0841":"code","b3482de7":"code","bd755872":"code","8d53c518":"code","1efedf4f":"code","0b2b157c":"code","9cab1c47":"code","3e4588cf":"code","6c661a3f":"code","81b78f63":"code","186ddcd5":"markdown","ea979e64":"markdown","b34c519b":"markdown","2dffe49f":"markdown","10b496a0":"markdown","14770c9f":"markdown","0ff0036c":"markdown","a56eb3e3":"markdown","662d9799":"markdown","4b51405f":"markdown","62dedb29":"markdown"},"source":{"cbebba4d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","25a781aa":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","85e2bdf5":"from pathlib import Path\n\nroot_dir = Path(\"\/kaggle\/\")\nbase_dir = root_dir \/ \"input\"\n\ndata_path = base_dir \/ \"coronavirusdataset\"\nprint(data_path)","5bfe1d51":"import pandas as pd \n\npatient_df = pd.read_csv(data_path \/ \"patient.csv\")\nprint(patient_df.shape)\npatient_df.head().T","43f18003":"route_df = pd.read_csv(data_path \/ \"route.csv\")\nprint(route_df.shape)\nroute_df.head().T","23e39449":"import numpy as np \n\npatient_id = route_df[\"id\"]\nplace_id = route_df[\"city\"] + \"_\"+ route_df[\"visit\"]\none_hot = pd.Series(np.ones(patient_id.shape))\n\nroute_data = pd.DataFrame({\n    \"patient_id\": patient_id,\n    \"place_id\": place_id,\n    \"one\": one_hot\n})","a8ee5cf8":"route_data.groupby(\"place_id\").count()","395397ee":"from fastai.collab import *","f07f373c":"patient, place, visit = \"patient_id\", \"place_id\", \"one\"\n\ndata = CollabDataBunch.from_df(route_data, seed=42, valid_pct=0, item_name=place) ","0a4aa577":"data.show_batch()","ed9b266d":"y_range = [0, 1.5]","4cdd0841":"learn = collab_learner(data, n_factors=40, y_range=y_range, wd=1e-1)","b3482de7":"learn.lr_find()\n","bd755872":"learn.recorder.plot(skip_end=15, suggestion=True)","8d53c518":"learn.fit_one_cycle(10, 4e-02)","1efedf4f":"learn.recorder.plot_losses()","0b2b157c":"learn.model","9cab1c47":"place_array = learn.data.train_ds[0][0].classes[\"place_id\"]\n\nplace_weight = learn.model.i_weight.weight.to(\"cpu\")\n\nplace_pca =  place_weight.pca(2)\n\nfac0, fac1 = place_pca.t()\nfac0","3e4588cf":"import matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm\n\nmpl.rcParams['axes.unicode_minus'] = False\n\n# idxs = np.random.choice(len(top_itemes), 300, replace=False)\n\nX = fac0.detach().numpy()\nY = fac1.detach().numpy()\n\nplt.figure(figsize=(30,30))\nplt.scatter(X, Y)\nfor i, x, y in zip(place_array, X, Y):\n    plt.text(x,y,i, fontsize=15)\nplt.show()","6c661a3f":"patient_array = learn.data.train_ds[0][0].classes[\"patient_id\"]\n\npatient_weight = learn.model.u_weight.weight\n\npatient_pca =  patient_weight.pca(2)\n\nfac0, fac1 = patient_pca.t()\nfac0","81b78f63":"import matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm\n\nmpl.rcParams['axes.unicode_minus'] = False\n\n# idxs = np.random.choice(len(top_itemes), 300, replace=False)\n\nX = fac0.detach().numpy()\nY = fac1.detach().numpy()\n\nplt.figure(figsize=(30,30))\nplt.scatter(X, Y)\nfor i, x, y in zip(patient_array, X, Y):\n    plt.text(x,y,i, fontsize=15)\nplt.show()","186ddcd5":"\n![tree](http:\/\/t1.daumcdn.net\/brunch\/service\/user\/30eI\/image\/aFIiPM9FzmE3mRkE0VR_GAsS5wU.jpg)\n\n`COVID-19` has been reported to spread patient 6 to patients 10 and 11, as well as in embedding vectors. \n\nI think this information will be better represented with more data.","ea979e64":"# Recommendation System based Embedding Approach \n\n## 2020-03-07 Ahn Sangho\n\n## Thanks to \n\n- [KCDC](http:\/\/www.cdc.go.kr\/index.es?sid=a2)\n- [datartist\nand 9 collaborators\n](https:\/\/www.kaggle.com\/kimjihoo\/coronavirusdataset\/data) at Kaggle\n- [Jeremy Howard](https:\/\/www.kaggle.com\/jhoward) fastai\n\nThe `COVID-19` is now a global problem. \n\nAmong many countries, South Korea is doing its best to protect virus with KCDC, various medical staff and many unknown people.\n\nThis dataset is also part of this effort. KCDC is producing detailed and accurate information, and datartist at el. are refining and sharing it.\n\nThis analysis suggests a way to embed place and patient information from route of patient. Specifically, I show fastai's collaborative filtering module to embedding this information. \n\nI sincerely hope that `COVID-19` will be well prevented and finished globally as soon as possible.\n\n","b34c519b":"# 4. Future Work\n\nThe current dataset is still being added.\n\nBecause of the characteristic of embedding, the more data you get, the better the results, when this dataset is updated, the result will also be updated.\n\nIn addition, since it does not simply end in embedding, I will use this as input and apply it to our prediction and classification tasks.","2dffe49f":"## 2.2. Create Learner and Find LR","10b496a0":"# 3. Interpretation\n\nAfter Training, we finally get embedding vectors for place and patient information. \n\nIn both cases, a PCA-based dimension reduction was applied to the weights. \n\nThe results are plotting on a two-dimensional plane.","14770c9f":"## 3.1. Place Embedding","0ff0036c":"# 1. Getting the Data\n\n\nThe first step is to look at the data roughly, as you probably already know.\n\n## 1.1. Load and Head","a56eb3e3":"## 1.2. Wrangling for Rec Input\n\nTo Embedding patient and place information, some wraggling process needed. \n\nIn recommendation system, rating is common. However, this dataset does not have rating information. \n\nTherefore, I've used a trick to represent visit information as 1. As a view of matrix factorization, I expect this to work.\n\n![MF](https:\/\/miro.medium.com\/max\/1689\/1*Zhm1NMlmVywn0G18w3exog.png)\nImage from [this website](https:\/\/medium.com\/@connectwithghosh\/simple-matrix-factorization-example-on-the-movielens-dataset-using-pyspark-9b7e3f567536)","662d9799":"# 2. Training Collab\n\nNow, We can make `learner` and train model using fastai.\n\n\nThe following steps are all common analysis process of fastai.\n\n## 2.1. Create DataBunch","4b51405f":"## 2.3. Train Learner","62dedb29":"## 3.2. Patient Embedding"}}