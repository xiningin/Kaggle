{"cell_type":{"5835274a":"code","22123c10":"code","e0aa6503":"code","349d6ed8":"code","c6e24fd2":"code","da430b1d":"code","385a1048":"code","163a926e":"code","2a9fdcd8":"code","98580951":"code","40793543":"code","04b4a559":"markdown","8bde5b0f":"markdown","d399db3f":"markdown","b637d545":"markdown","c5b19d58":"markdown"},"source":{"5835274a":"import warnings\nwarnings.filterwarnings('ignore')\n\n# Modules for data manipulation\nimport numpy as np\nimport pandas as pd\nimport re\n\n# Modules for visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n%matplotlib inline\n\n# Tools for preprocessing input data\nfrom bs4 import BeautifulSoup\nfrom nltk import word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\n\n# Tools for creating ngrams and vectorizing input data\nfrom gensim.models import Word2Vec, Phrases\n\n# Tools for building a model\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Input, Embedding, Dropout, Conv1D, MaxPool1D, GRU, LSTM, Dense, Bidirectional\nfrom keras.layers.embeddings import Embedding\nfrom keras.preprocessing.sequence import pad_sequences\n\n# Tools for assessing the quality of model prediction\nfrom sklearn.metrics import accuracy_score, confusion_matrix, roc_auc_score, roc_curve\n\ntrain_data = pd.read_csv(\"..\/input\/labeledTrainData.tsv\", header = 0, delimiter = '\\t')\nunlabeled_data =  pd.read_csv(\"..\/input\/unlabeledTrainData.tsv\", error_bad_lines=False, delimiter='\\t')\ntest_data = pd.read_csv(\"..\/input\/testData.tsv\", header = 0, delimiter = '\\t')\n\n# test_data[\"sentiment\"] = test_data[\"id\"].map(lambda x: 1 if int(x.strip('\"').split(\"_\")[1]) >= 5 else 0)\n# y_test = test_data[\"sentiment\"]\n\ndatasets = [train_data, unlabeled_data, test_data]\ntitles = ['Train Data', 'Unlabeled Train Data', 'Test Data']\nfor dataset, title in zip(datasets,titles):\n    print(title)\n    dataset.info()\n    display(dataset.head())","22123c10":"# Check class balance\nplt.hist(train_data[train_data.sentiment == 1].sentiment,\n         bins=2, color='green', label='Positive')\nplt.hist(train_data[train_data.sentiment == 0].sentiment,\n         bins=2, color='blue', label='Negative')\nplt.title('Classes distribution in the train data')\nplt.xticks([])\nplt.xlim(-0.5, 2)\nplt.legend()\nplt.show()","e0aa6503":"# Define some pre-processing functions\ndef html_to_text(review):\n    \"\"\"Return extracted text string from provided HTML string.\"\"\"\n    review_text = BeautifulSoup(review, \"lxml\").get_text()\n    if len(review_text) == 0:\n        review_text = review\n    review_text = re.sub(r\"\\<.*\\>\", \"\", review_text)\n    try:\n        review_text = review_text.encode('ascii', 'ignore').decode('ascii')#ignore \\xc3 etc.\n    except UnicodeDecodeError:\n        review_text = review_text.decode(\"ascii\", \"ignore\")\n    return review_text\n\n\ndef letters_only(text):\n    \"\"\"Return input string with only letters (no punctuation, no numbers).\"\"\"\n    # It is probably worth experimenting with milder prepreocessing (eg just removing punctuation)\n    return re.sub(\"[^a-zA-Z]\", \" \", text)\n\ndef clean_review(review):\n    \"\"\"Preprocessing used before fitting\/transforming RNN tokenizer - Html->text, remove punctuation\/#s, lowercase.\"\"\"\n    return letters_only(html_to_text(review)).lower()\n\ndef lemmatize(tokens: list) -> list:\n    # 1. Lemmatize\n    tokens = list(map(lemmatizer.lemmatize, tokens))\n    lemmatized_tokens = list(map(lambda x: lemmatizer.lemmatize(x, \"v\"), tokens))\n    # 2. Remove stop words\n    meaningful_words = list(filter(lambda x: not x in stop_words, lemmatized_tokens))\n    return meaningful_words\n\n\ndef preprocess(review: str, total: int, show_progress: bool = True) -> list:\n    if show_progress:\n        global counter\n        counter += 1\n        print('Processing... %6i\/%6i'% (counter, total), end='\\r')\n    # 1. Clean text\n    review = clean_review(review)\n    # 2. Split into individual words\n    tokens = word_tokenize(review)\n    # 3. Lemmatize\n    lemmas = lemmatize(tokens)\n    # 4. Join the words back into one string separated by space,\n    # and return the result.\n    return lemmas\n\ncounter = 0\nREPLACE_WITH_SPACE = re.compile(r'[^A-Za-z\\s]')\nstop_words = set(stopwords.words(\"english\")) \nlemmatizer = WordNetLemmatizer()","349d6ed8":"all_reviews = np.array([], dtype=str)\nfor dataset in datasets:\n    all_reviews = np.concatenate((all_reviews, dataset.review), axis=0)\nprint('Total number of reviews:', len(all_reviews))\n\nall_reviews = np.array(list(map(lambda x: preprocess(x, len(all_reviews)), all_reviews)))\ncounter = 0\n\nX_train_data = all_reviews[:train_data.shape[0]]\nY_train_data = train_data.sentiment.values","c6e24fd2":"train_data['review_length'] = np.array(list(map(len, X_train_data)))\nmedian = train_data['review_length'].median()\nmean = train_data['review_length'].mean()\nmode = train_data['review_length'].mode()[0]\n\nfig, ax = plt.subplots()\nsb.distplot(train_data['review_length'], bins=train_data['review_length'].max(),\n            hist_kws={\"alpha\": 0.9, \"color\": \"blue\"}, ax=ax,\n            kde_kws={\"color\": \"black\", 'linewidth': 3})\nax.set_xlim(left=0, right=np.percentile(train_data['review_length'], 95))\nax.set_xlabel('Words in review')\nymax = 0.014\nplt.ylim(0, ymax)\nax.plot([mode, mode], [0, ymax], '--', label=f'mode = {mode:.2f}', linewidth=4)\nax.plot([mean, mean], [0, ymax], '--', label=f'mean = {mean:.2f}', linewidth=4)\nax.plot([median, median], [0, ymax], '--',\n        label=f'median = {median:.2f}', linewidth=4)\nax.set_title('Words per review distribution', fontsize=20)\nplt.legend()\nplt.show()","da430b1d":"bigrams = Phrases(sentences=all_reviews)\ntrigrams = Phrases(sentences=bigrams[all_reviews])\nprint(bigrams['space station near the solar system'.split()])\n\nembedding_vector_size = 256\ntrigrams_model = Word2Vec(\n    sentences = trigrams[bigrams[all_reviews]],\n    size = embedding_vector_size,\n    min_count=3, window=5, workers=4)\nprint(\"Vocabulary size:\", len(trigrams_model.wv.vocab))","385a1048":"def vectorize_data(data, vocab: dict) -> list:\n    print('Vectorize sentences...', end='\\r')\n    keys = list(vocab.keys())\n    filter_unknown = lambda word: vocab.get(word, None) is not None\n    encode = lambda review: list(map(keys.index, filter(filter_unknown, review)))\n    vectorized = list(map(encode, data))\n    print('Vectorize sentences... (done)')\n    return vectorized\n\nprint('Convert sentences to sentences with ngrams...', end='\\r')\nX_data = trigrams[bigrams[X_train_data]]\nprint('Convert sentences to sentences with ngrams... (done)')\nMAX_REVIEW_LENGTH = 150\nX_pad = pad_sequences(sequences=vectorize_data(X_data, vocab=trigrams_model.wv.vocab), maxlen=MAX_REVIEW_LENGTH, padding='post')\nprint('Transform sentences to sequences... (done)')","163a926e":"def build_model(embedding_matrix: np.ndarray, input_length: int,  use_lstm: bool):\n    model = Sequential()\n    model.add(Embedding(\n        input_dim = embedding_matrix.shape[0],\n        output_dim = embedding_matrix.shape[1], \n        input_length = input_length,\n        weights = [embedding_matrix],\n        trainable=False))\n    if use_lstm:\n        model.add(Bidirectional(LSTM(128, recurrent_dropout=0.1)))\n    else:\n        model.add(Bidirectional(GRU(128, recurrent_dropout=0.1)))\n    model.add(Dropout(0.25))\n    model.add(Dense(64))\n    model.add(Dropout(0.3))\n    model.add(Dense(1, activation='sigmoid'))\n    model.summary()\n    return model\n\nlstm_model = build_model(embedding_matrix=trigrams_model.wv.vectors, input_length=MAX_REVIEW_LENGTH, use_lstm=True)\nlstm_model.compile(loss=\"binary_crossentropy\", optimizer='adam', metrics=['accuracy'])\n\nX_train, X_test, y_train, y_test = train_test_split(X_pad, Y_train_data, test_size=0.05, shuffle=True, random_state=42)\nhistory = lstm_model.fit(x=X_train, y=y_train, validation_data=(X_test, y_test), batch_size=100, epochs=20)\n\nfig, (axis1, axis2) = plt.subplots(nrows=1, ncols=2, figsize=(16,6))\n\n# summarize history for accuracy\naxis1.plot(history.history['acc'], label='Train', linewidth=3)\naxis1.plot(history.history['val_acc'], label='Validation', linewidth=3)\naxis1.set_title('Model accuracy', fontsize=16)\naxis1.set_ylabel('accuracy')\naxis1.set_xlabel('epoch')\naxis1.legend(loc='upper left')\n\n# summarize history for loss\naxis2.plot(history.history['loss'], label='Train', linewidth=3)\naxis2.plot(history.history['val_loss'], label='Validation', linewidth=3)\naxis2.set_title('Model loss', fontsize=16)\naxis2.set_ylabel('loss')\naxis2.set_xlabel('epoch')\naxis2.legend(loc='upper right')\nplt.show()","2a9fdcd8":"from sklearn.metrics import accuracy_score, roc_auc_score, roc_curve\nfrom keras.layers import Input, Embedding, Dropout, Conv1D, MaxPool1D, GRU, LSTM, Dense\n\ngru_model = build_model(embedding_matrix=trigrams_model.wv.vectors, input_length=MAX_REVIEW_LENGTH, use_lstm=False)\ngru_model.compile(loss=\"binary_crossentropy\", optimizer='adam', metrics=['accuracy'])\ngru_model.fit(x=X_train, y=y_train, validation_data=(X_test, y_test), batch_size=100, epochs=20)\n\ny_test_pred_lstm = lstm_model.predict(X_test)\ny_test_pred_gru = gru_model.predict(X_test)\n\nprint(\"The AUC socre for GRU model is : %.4f.\" %roc_auc_score(y_test, y_test_pred_gru))\nprint(\"The AUC socre for LSTM model is : %.4f.\" %roc_auc_score(y_test, y_test_pred_lstm))\n\ny_pred_list = [y_test_pred_gru, y_test_pred_lstm]\nlabel_list = [\"GRU\", \"LSTM\"]\npred_label = zip(y_pred_list, label_list)\nfor y_pred, lbl in pred_label:\n    fpr, tpr, _ = roc_curve(y_test, y_pred)\n    plt.plot(fpr, tpr, label = lbl)\n\nplt.xlabel(\"True Postive Rate\")\nplt.ylabel(\"False Positive Rate\")\nplt.title(\"ROC Curve for RNN Models\")\nplt.legend()\nplt.show()","98580951":"y_train_pred = gru_model.predict_classes(X_train)\ny_test_pred = gru_model.predict_classes(X_test)\n\ndef plot_confusion_matrix(y_true, y_pred, ax, class_names, vmax=None,\n                          normed=True, title='Confusion matrix'):\n    matrix = confusion_matrix(y_true,y_pred)\n    if normed:\n        matrix = matrix.astype('float') \/ matrix.sum(axis=1)[:, np.newaxis]\n    sb.heatmap(matrix, vmax=vmax, annot=True, square=True, ax=ax,\n               cmap=plt.cm.Blues_r, cbar=False, linecolor='black',\n               linewidths=1, xticklabels=class_names)\n    ax.set_title(title, y=1.20, fontsize=16)\n    #ax.set_ylabel('True labels', fontsize=12)\n    ax.set_xlabel('Predicted labels', y=1.10, fontsize=12)\n    ax.set_yticklabels(class_names, rotation=0)\n    \nfig, (axis1, axis2) = plt.subplots(nrows=1, ncols=2)\nplot_confusion_matrix(y_train, y_train_pred, ax=axis1,\n                      title='Confusion matrix (train data)',\n                      class_names=['Positive', 'Negative'])\nplot_confusion_matrix(y_test, y_test_pred, ax=axis2,\n                      title='Confusion matrix (test data)',\n                      class_names=['Positive', 'Negative'])","40793543":"print('Convert sentences to sentences with ngrams...', end='\\r')\nX_submission_data = all_reviews[-25000:]\nX_submission = trigrams[bigrams[X_submission_data]]\nprint('Convert sentences to sentences with ngrams... (done)')\nX_submission_pad = pad_sequences(\n    sequences=vectorize_data(X_submission, vocab=trigrams_model.wv.vocab),\n    maxlen=MAX_REVIEW_LENGTH,\n    padding='post')\nprint('Transform sentences to sequences... (done)')\n\npredictions = gru_model.predict_classes(X_submission_pad)\n\nsubmission = pd.DataFrame()\nsubmission['id'] = test_data['id']\nsubmission['sentiment'] = predictions\nsubmission.to_csv('submission.csv',index=False)","04b4a559":"# Data Cleaning and Text Preprocessing","8bde5b0f":"# Prediction & Submission","d399db3f":"# Modeling","b637d545":"## Word Vector\nAnd now we can use gensim's word2vec model to build a word embedding. Also we can use the word2vec model to define most similar words, calculate diffence between the words, etc. Examples:\n* trigrams_model.wv.most_similar('galaxy')\n* trigrams_model.wv.doesnt_match(['galaxy', 'starship', 'planet', 'dog'])\n\n","c5b19d58":"This is my first nlp kernel writtern for the [Bag of Words Meets Bags of Popcorn](https:\/\/www.kaggle.com\/c\/word2vec-nlp-tutorial) competetion. If you Like the notebook and think that it helped you, <font color=\"red\"><b> please upvote<\/b><\/font>.\n\n---\n\n## Table of Content\n1. Data Preprocessing\n    * Data Cleaning and Text Preprocessing\n    * Word Vectors\n2. Modeling\n    * RNN Model Architecture\n        * LSTM Model\n        * GRU Model\n    * Model Evaluation\n3. Prediction & Submission"}}