{"cell_type":{"4c143ea6":"code","f846ef86":"code","83b7651f":"code","1ca98a8a":"code","669e785b":"code","69db13b6":"code","428ce559":"code","0d0ccfcf":"markdown","183addf4":"markdown","673b8aef":"markdown","8ddf1777":"markdown","fe55368e":"markdown","640971e3":"markdown"},"source":{"4c143ea6":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns","f846ef86":"train=pd.read_csv('..\/input\/g-research-crypto-forecasting\/train.csv').sort_values('Asset_ID') \ntrain.head()","83b7651f":"train.shape","1ca98a8a":"features='Count,Open,High,Low,Close,Volume,VWAP,Target'.split(',')\nfeatures","669e785b":"df=train[features]\ndf.head()","69db13b6":"sns.boxplot(df['Target'][:1000])","428ce559":"sns.boxplot(np.cbrt(df['Target'][:1000])) # There you go magic","0d0ccfcf":"# Boxplot of outliers\n\n**To be noted** this is only for first 1000 samples","183addf4":"# Data Loading ","673b8aef":"# Objective\n \nHere we have used a new mathematical tool for removing outliers if we plot the box plot of the Targets we see a huge number of outliers we cant remove them because of too much compute and also noisy data also they can carry valuable information just maybe\n\nSo here we have a introduced a new mathematical way to deal with these outliers without removing them but rather making sense of them","8ddf1777":"# Mathematical Proof\n\nTo prove this we will need to do only a few things first we need to understand what an outlier is any value which has shifted too far away from 0 compared to most of the other samples is said to be an outlier , now why does taking cube root solve this\n\nLets explain\n\n![image.png](attachment:bd2ff028-7d4c-4bf6-a0a2-de75ae4d37ce.png)\n\nHere the blue line is the derivative of cube root red is cube root itself and x is our original targets\n\nSo if we rewrite ```is the derivative of cube root``` it basically means ```The rate at which cbrt(x) is moving away from 0 or becoming an outlier in general ``` so if we see the rate at which it is changing decreases the more x shifts away from 0 slowing down the process alot while in the original data which will look like this \n\n\n![image.png](attachment:e3130108-1127-416a-bbe1-6dada47b45b6.png)\n\nthe green line is our original data and purple is the derivative of that which remains 1 irrespective of the fact that x is really close to becoming an outlier\n\nHope it explains !\n\nFeel free to post any doubts","fe55368e":"![image.png](attachment:b5d6ff2c-9ee0-4c37-83a4-f2fd1465a2ad.png)","640971e3":"# The new way to tackle these outliers\n\n\nLet me explain the new method which will solve this issue very very efficiently and robustly\n\nFirst lets see what the method is and then proof it mathematically also see the boxplots after\n\nIt is simple if we just take the cube root of the Targets ```np.cbrt(targets)``` train the model on that and then raise the predictions to 3 or reversing cube roote can get back the original targets\n"}}