{"cell_type":{"1daae4c4":"code","fba07b6a":"code","903bfbd0":"code","7c1a2c4e":"code","757b2296":"code","7a058c89":"code","69a136d3":"code","4af38b06":"code","37283153":"code","565dad6c":"code","c044e8d2":"code","074d9faf":"code","59646156":"code","7c702166":"code","e759844b":"code","d40bfafd":"code","462acab6":"code","dc4805ec":"code","dba307e8":"code","0fe91d29":"code","451617ad":"code","eb394ccc":"code","fb74238a":"code","fdbc42ae":"code","798b0e1a":"code","24b150e3":"code","9e45f75a":"code","7b5ba5d8":"code","dc799711":"code","985abaa9":"code","67619b35":"code","e387ad17":"code","26f674f9":"code","09e9108c":"code","90ebc30b":"code","37509741":"code","e0dc12ab":"code","23d8e16c":"code","7de93799":"code","9c7f04e0":"code","f7aacc24":"code","6e73d7ef":"code","2018ceb2":"code","62bfc3ff":"code","6d643ced":"code","43bbab5a":"code","77612005":"code","ed80d76d":"code","645382c2":"code","bd8d677f":"code","068b1bbb":"code","ad96a941":"code","4e6a8278":"code","cfb0e405":"code","d444ea19":"code","486e36d1":"code","22ea3a3d":"code","4155efbf":"code","df67418d":"code","24509179":"code","9f01e580":"code","acf6946e":"code","4ab288c7":"code","a8623193":"code","8fdf7d56":"code","76904e86":"code","f5a5431c":"markdown","7315d063":"markdown","ec8c9df0":"markdown","3e869a06":"markdown","ee03c787":"markdown","67a95dcd":"markdown","f467e19d":"markdown","95a64350":"markdown","572204d3":"markdown","fa25bdba":"markdown","c3f1c930":"markdown","8fd6c02a":"markdown","65e3f8a0":"markdown","4b370073":"markdown","0345b176":"markdown","45e1df63":"markdown","812cd2bf":"markdown","7a346f72":"markdown","bc9bdf74":"markdown","bb0ad8ca":"markdown","e19897e7":"markdown","fe639cf0":"markdown","b02175d7":"markdown","1de2a444":"markdown","1555a01e":"markdown","7a0c5a85":"markdown","bb8ed715":"markdown","0450d3d3":"markdown","efdd9a98":"markdown","921f65d3":"markdown","c584524a":"markdown","945175df":"markdown","81f2d963":"markdown","ca750184":"markdown","3f800f74":"markdown","4ebd72ac":"markdown","34985a20":"markdown","2c012ec4":"markdown","afe1da6e":"markdown","8e6ddb61":"markdown","02a864b4":"markdown","cd2e6f65":"markdown","b248a3da":"markdown","f0c95dff":"markdown","eec36d08":"markdown","539f4a3d":"markdown","e5e5e6c6":"markdown"},"source":{"1daae4c4":"#numpy\nimport numpy as np\n\n#pandas stuff\nimport pandas as pd\n#pandas\u306e\u8a2d\u5b9a\u5024\u3092\u5909\u66f4\uff08\u7b2c1\u56e0\u6570\u306b\u6b63\u898f\u8868\u73fe\u30d1\u30bf\u30fc\u30f3\u306e\u6587\u5b57\u5217\u3001\u7b2c2\u56e0\u6570\u306b\u8a2d\u5b9a\u3059\u308b\u5024)\n#display.max_rows\u306e\u5024\u3092None\u306b\u3059\u308b\npd.set_option('display.max_rows', None)\n#display.max_columns\u306e\u5024\u3092None\u306b\u3059\u308b\npd.set_option('display.max_columns', None)\n\n#plottings stuff\nfrom pandas.plotting import lag_plot\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n#sns(seaborn)\u306e\u5b9a\u6027\u7684\u306a\u30ab\u30e9\u30fc\u30d1\u30ec\u30c3\u30c8\n#as_camp=True\u306a\u3089\u3070\u3001matplotlib.colors.Colormap\u3092\u8fd4\u3059\ncolorMap = sns.light_palette(\"blue\", as_cmap=True)\n\n\n#install dabl\uff08\u2192chapter12\uff09\n#pip\u306fPython\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306a\u3069\u3092\u884c\u3046\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\uff08\u6a19\u6e96\u88c5\u5099\uff09\n#> : \u6b32\u3057\u3044file\u306b\u6a19\u6e96\u51fa\u529b\u3067\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3059\u308b\n#\u3000\u2192dev\/null\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3059\u308b\n#\u3000\u2192\u4e00\u7a2e\u306evirtual file\u3068\u306a\u308a\u3001\u305d\u3053\u306b\u7f6e\u3044\u305f\u3082\u306e\u304c\u524a\u9664\u3055\u308c\u308b\n#\u3000\u2192\u30c7\u30a3\u30b9\u30af\u9818\u57df\u3092\u4f7f\u7528\u3057\u306a\u3044\uff08\u5b88\u308b\u305f\u3081\u306e\u30b3\u30de\u30f3\u30c9\uff09\n#\u3000\u305f\u3060\u3057\u3001dev\/null\u306fLinux\u7528\u306a\u306e\u3067\u3001null\u306e\u307f\u3067\u3088\u3044\n\n#!pip install dabl > \/dev\/null\n!pip install dabl > null\nimport dabl\n#install datatable\n!pip install datatable > \/dev\/null\nimport datatable as dt\n\n#misc\n#\u6b20\u640d\u5024\u3092\u52b9\u679c\u7684\u306b\u53ef\u8996\u5316\u3059\u308b\nimport missingno as msno\n\n#system\n#\u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3001\u8b66\u544a\u3057\u305f\u65b9\u304c\u826f\u3044\u3068\u304d\u306b\u3055\u308c\u308b\u304c\u3001\u5225\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3055\u305b\u308b\u307b\u3069\u3067\u306f\u306a\u3044\n#\uff08\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u53e4\u3044\u3001\u306a\u3069\uff09\n#warnings\uff1a\u8b66\u544a\u3092\u7ba1\u7406\nimport warnings\n#\u5b9f\u884c\u6642\u306e\u7d1b\u3089\u308f\u3057\u3044\u8b66\u544a\u3092\u975e\u8868\u793a(\u306a\u305c\u304bpip\u306ewarning\u306f\u6d88\u3048\u306a\u3044)\nwarnings.filterwarnings('ignore')\n\n#for the image import\nimport os\n#ipython.display\uff1a\u97f3\u58f0\u3084\u52d5\u753b\u306a\u3069\u3092Notebook\u5185\u306b\u57cb\u3081\u8fbc\u3080\n#Image\uff1a\u753b\u50cf\u3092\u8868\u793a\nfrom IPython.display import Image\n\n#garbage collector to keep RAM in check\n#RAM\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u4e0d\u8981\u9818\u57df\u3092\u81ea\u52d5\u7684\u306b\u89e3\u6cd5\u3059\u308b\u6a5f\u80fd\nimport gc\n#\u3053\u306e\u5f8c\u306egc.collect()\u306f\u3001\n#\u4f7f\u3044\u7d42\u308f\u3063\u3066\u5fc5\u8981\u306a\u304f\u306a\u3063\u305f\uff08\u56de\u53ce\u53ef\u80fd\u306a\uff09\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08\u30e1\u30e2\u30ea\u9818\u57df\uff09\u3092\u81ea\u52d5\u7684\u306b\u524a\u6e1b\u3059\u308b\n#\u591a\u5206\u4e0a\u7d1a\u8005\u5411\u3051\n#\u30b3\u30fc\u30c9\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u305f\u30e1\u30e2\u30ea\u30fc\u304cOS\u306b\u8fd4\u3055\u308c\u308b\u3068\u3044\u3046\u4fdd\u8a3c\u306f\u306a\u3044\n#\u3042\u304f\u307e\u3067\u3001\u4f7f\u7528\u6e08\u307f\u30e1\u30e2\u30ea\u30fc\u304c\u5c06\u6765\u5225\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u4f7f\u7528\u3059\u308b\u305f\u3081\u306b\u958b\u653e\u3055\u308c\u308b\u3001\u3053\u3068\u306e\u307f\u3092\u4fdd\u8a3c\n#\u3069\u3046\u3057\u3066\u3082\u3001\u300c\u958b\u653e\u3055\u308c\u308b\u306f\u305a\u306e\u30e1\u30e2\u30ea\u304c\u958b\u653e\u3055\u308c\u306a\u3044\u300d\u6642\u306b\u4f7f\u3046\n","fba07b6a":"#wc -1 (\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9)\uff1a\u30c7\u30fc\u30bf\u6570\uff08\u884c\u6570\uff09\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u30b3\u30de\u30f3\u30c9\n!wc -l ..\/input\/jane-street-market-prediction\/train.csv\n#\u30b5\u30a4\u30ba\u304c\u5927\u304d\u3044\u3053\u3068\u304c\u308f\u304b\u308b","903bfbd0":"%%time\n# \u300c%time\u300d\uff1a\u4e00\u884c\u306e\u5b9f\u884c\u6642\u9593\n# \u300c%%time\u300d\uff1a\u30bb\u30eb\u4e00\u3064\u306e\u5b9f\u884c\u6642\u9593 \u3000\u203b\u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u30bb\u30eb\u306e\u4e00\u756a\u4e0a\u306b\u66f8\u304b\u306a\u3044\u3068\u30a8\u30e9\u30fc\u306b\n\n#fread\u306f\u8aad\u307f\u8fbc\u307f\u304c\u975e\u5e38\u306b\u901f\u3044\u305f\u3081\u3001data.table\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3093\u3067\u3001\u305d\u306e\u5f8c\u306bdataframe\u306b\u5909\u63db\ntrain_data_datatable = dt.fread('..\/input\/jane-street-market-prediction\/train.csv')","7c1a2c4e":"%%time\n#pandas datatable\u306b\u5909\u63db\n\ntrain_data = train_data_datatable.to_pandas()","757b2296":"#train.data\uff1a500days(2years of trading data)\n#culmative values of resp over time\n\n#plt : matplotlib.pyplot\n#\u56f3\u306e\u30b5\u30a4\u30ba\u3092\u6c7a\u3081\u308b(\u6a2a:\u7e26=15:5)\n#plt.figure():Figure\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210(\u63cf\u753b\u3067\u304d\u308b\u9818\u57df\u3092\u78ba\u4fdd)\n#((\u6a2a,\u7e26),\u30c9\u30c3\u30c8\u6570,...)\n#fig.add_subplot():Figure\u4e0a\u306b\u30b0\u30e9\u30d5\u3092\u63cf\u753b\n#plt.subplot():\u73fe\u5728\u306e\u63cf\u753b\u9818\u57df(fig)\u306b\u8ffd\u52a0\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n\n#plt.subplots(subplot\u306e\u884c\u6570(\u5206\u5272\u6570),\u5217\u6570,...figsize):\n#fig:figure(1\u3064\u306eFigure\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9)\n#ax:axes(1\u3064\u306eAxesSubplot\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9)\nfig, ax = plt.subplots(figsize=(15,5))\n\n#2\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u5bfe\u3057\u3066\u3001Series\u306f\u4e00\u6b21\u5143\u914d\u5217\n#cumsum:cumulative sum\uff08\u7d2f\u7a4d\u5024\uff09\nbalance = pd.Series(train_data['resp']).cumsum()\n##\u306a\u305cbalance\u3068\u3044\u3046\u540d\u524d\uff1f\n\n#x,y\u306e\u30e9\u30d9\u30eb\n#ax:AxesSubplot\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\nax.set_xlabel(\"Trade\", fontsize=18)\nax.set_ylabel(\"Cumulative resp\", fontsize=18);\n\n#balance\u3092plot\n#lw:line width(\u7dda\u5e45)\nbalance.plot(lw=3);\n\n#balance\u306e\u5909\u6570\u3092\u6d88\u3057\u3066\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\ndel balance\ngc.collect();","7a058c89":"#\u540c\u69d8\u306b\u30014time horiozns\u3082\u884c\u3046\n\n#train.csv\u306e\u30ab\u30e9\u30e0\u5185\u5bb9\n#date\n#weight\n#resp_1...4,resp\n#feature_0...129\n#ts_id\n\n#\u56f3\u306e\u30b5\u30a4\u30ba\u3092\u6c7a\u3081\u308b(\u6a2a:\u7e26=15:5)\nfig, ax = plt.subplots(figsize=(15,5))\n#\u5404resp\u3092\u306e\u30c7\u30fc\u30bf\u3092\u5909\u6570\u306b\u683c\u7d0d\n#\uff08train_data\u5185\u306e[]\u306e\u7dda\u5f62\u30c7\u30fc\u30bf\u306e\u7d2f\u7a4d\u5024\uff09\nbalance = pd.Series(train_data['resp']).cumsum()\nresp_1 = pd.Series(train_data['resp_1']).cumsum()\nresp_2 = pd.Series(train_data['resp_2']).cumsum()\nresp_3 = pd.Series(train_data['resp_3']).cumsum()\nresp_4 = pd.Series(train_data['resp_4']).cumsum()\n\n#x\u306e\u30e9\u30d9\u30eb\nax.set_xlabel(\"Trade\", fontsize=18)\n#title\nax.set_title(\"Cumulative resp and time horizons 1,2,3, and 4(500days)\", fontsize=18);\n#balance,resp_1,2,3,4\u3092plot\nbalance.plot(lw=3)\nresp_1.plot(lw=3)\nresp_2.plot(lw=3)\nresp_3.plot(lw=3)\nresp_4.plot(lw=3)\n\n#\u51e1\u4f8b\n#\u51e1\u4f8b\u67a0\u306f\u5de6\u4e0a(upper left)\nplt.legend(loc=\"upper left\");\n\n#\u5404\u5909\u6570\u3092\u6d88\u3057\u3066\u30e1\u30e2\u30ea\u524a\u6e1b\ndel balance\ndel resp_1\ndel resp_2\ndel resp_3\ndel resp_4\ngc.collect();","69a136d3":"#resp\u5024-0.05~0.05\u3092plot\uff1a\u88fe\u91ce\u304c\u5e83\u3044\u2192\u5168\u4f53\u306e\u7bc4\u56f2\u306f-0.55\uff5e0.45  \n#\u6b6a\u5ea6skew    \uff1a0.10  ;\u5206\u5e03\u304c\u6b63\u898f\u5206\u5e03\u304b\u3089\u3069\u308c\u3060\u3051\u6b6a\u3093\u3067\u3044\u308b\u304b\uff08\u3069\u308c\u3060\u3051\u975e\u5bfe\u79f0\u304b\uff09\u3092\u8868\u3059\n#\u5c16\u5ea6kurtosis\uff1a17.36 ;\u5206\u5e03\u304c\u6b63\u898f\u5206\u5e03\u304b\u3089\u3069\u308c\u3060\u3051\u5c16\u3063\u3066\u3044\u308b\u304b\uff08\u3069\u308c\u3060\u3051\u5e73\u5747\u5468\u8fba\u306b\u5468\u901a\u3059\u308b\u304b\uff09\u3092\u8868\u3059   \n\n#\u56f3\u306e\u30b5\u30a4\u30ba\u3092\u6c7a\u3081\u308b(\u6a2a:\u7e26=12:5)\nplt.figure(figsize=(12,5))\n#sns.distplot:\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\n#(x, bins;\u968e\u7d1a\u5e45, hist=True, \n# kde;\u5bc6\u5ea6\u8fd1\u4f3c\u95a2\u6570\u306e\u63cf\u753b=True,(\u30c7\u30d5\u30a9\u30eb\u30c8)\n# rug;\u5b9f\u6570\u5730\u306e\u63cf\u753b=False, fit;\u6b63\u898f\u5206\u5e03\u306e\u63cf\u753b=None,\n# hist_kws=None, kde_kws=None, rug_kws=None, fit_kws=None, color=None, \n# vertical=False, norm_hist=False, axlabel=None, label=None, ax=None)\n\n##_kws\uff1a\u4f55\u306e\u7565\uff1f \u8f9e\u66f8\u578b\u3067\u3001\u30b0\u30e9\u30d5\u306b\u5bfe\u3057\u3066\u8272\u3084\u30e9\u30d9\u30eb\u3092\u6307\u5b9a\n\nax = sns.distplot(train_data['resp'],\n                bins=3000,\n                kde_kws={\"clip\":(-0.05,0.05)},\n                hist_kws={\"range\":(-0.05,0.05)},\n                color='darkcyan', #\u30c0\u30fc\u30af\u30b7\u30a2\u30f3(\u9752\u7dd1\u8272)\n                kde=False);\n\n#values\u3092\u8a2d\u5b9a\n#np.array:n\u6b21\u5143\u914d\u5217\n#matplotlib.patches\uff1a\u5186\u3001\u6955\u5186\u3001\u9577\u65b9\u5f62\u306a\u3069\u69d8\u3005\u306a\u56f3\u5f62\u3092\u63cf\u753b\u3059\u308b\u30af\u30e9\u30b9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\n#\u4e0a\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u5404\u30c7\u30fc\u30bf\u306b\u304a\u3051\u308b\u9ad8\u3055\u3092\u53d6\u5f97\u3057values\u306b\u683c\u7d0d\nvalues = np.array([rec.get_height() for rec in ax.patches])\n\n#matplotlib\u306ecolorbar\u306f\u30010\uff5e1\u306e\u9593\u306e\u5024\u306b\u5bfe\u5fdc\u3057\u3066\u8272\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\n#\u4eca\u56de\u306fvalues.min\uff5evalues.max\u306e\u9593\u306e\u5024\u306b\u5bfe\u5fdc\u3057\u3066\u8272\u3092\u5b9a\u7fa9\u3057\u305f\u3044\n#\u306a\u306e\u3067\u3001values\u306emin\u3068max\u3092\u7528\u3044\u3066\u6a19\u6e96\u5316\nnorm = plt.Normalize(values.min(), values.max())\n#plt.cm:\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u7684\u306b\u5909\u3048\u308b(.jet:\u53ef\u8996\u5316\u65b9\u6cd5\u306e\u4e00\u3064\u3001hsv,spectral\u306a\u3069\u3082\u3042\u308b)\ncolors = plt.cm.jet(norm(values))\n\n#zip:\u8907\u6570\u306eobject\u306e\u8981\u7d20\u3092\u540c\u6642\u306b\u53d6\u5f97\n#\u3064\u307e\u308a\u3001ax.pathces\u3068colors\u306e\u5024\u3092\u5bfe\u5fdc\u3055\u305b\u305f\u3046\u3048\u3067\u3001rec\u3068col\u306b\u683c\u7d0d\u3059\u308b\n##recvfrom:\u623b\u308a\u5024\u3001column:\u30ab\u30e9\u30e0?\nfor rec, col in zip(ax.patches, colors):\n    #rec(\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u30c7\u30fc\u30bf)\u306b\u8272\u3092\u4ed8\u3051\u308b\n    rec.set_color(col)\n\n#x\u30e9\u30d9\u30eb\u3092\u52a0\u3048\u3066\u8868\u793a\nplt.xlabel(\"Histogram of the resp values\", size=14)\nplt.show();\ngc.collect();","4af38b06":"#resp\u306e,min,max,skew,kurtosis\u3092\u8a08\u7b97\nmin_resp = train_data[\"resp\"].min()\nmax_resp = train_data[\"resp\"].max()\n\n#.format\u306e.5f\u306f\u3001\u5c0f\u6570\u70b9\u4ee5\u4e0b\u7b2c5\u4f4d\u307e\u3067\u8868\u793a\n\n#print('The minimum value for resp is: %.5f' % min_resp)\nprint('The minimum value for resp is: {:.5f}' .format(min_resp))\n\n#print('The maximum value for resp is: %.5f' % max_resp)\nprint('The maximum value for resp is: {:.5f}'.format(max_resp))\n\n#print(\"Skew of resp is: %.2f\" % train_data['resp'].skew())\n#print(\"Kurtosis of resp is: %.2f\" %train_data['resp'].kurtosis())\nprint(\"Skew of resp is: {:.2f}\" .format(train_data['resp'].skew()))\nprint(\"Kurtosis of resp is: {:.2f}\" .format(train_data['resp'].kurtosis()))\n","37283153":"#Cauchy distribution\uff1b\u30b3\u30fc\u30b7\u30fc\u5206\u5e03\n#\u9023\u7d9a\u78ba\u7387\u5206\u5e03\u306e\u4e00\u7a2e\u3067\u3001\u5de6\u53f3\u5bfe\u79f0\u3067\u3001\u671f\u5f85\u5024\u306f\u5b58\u5728\u3057\u306a\u3044\uff08\u5916\u308c\u5024\u3092\u3068\u308b\u78ba\u7387\u304c\u9ad8\u3044\uff08\u88fe\u304c\u91cd\u3044\uff09\uff09\n#\u5927\u6570\u306e\u6cd5\u5247\u304c\u6210\u308a\u7acb\u305f\u305a\u3001\u6700\u983b\u5024\uff1d\u4e2d\u592e\u5024\u306f\u5b9a\u7fa9\u3055\u308c\u308b\n\n#scipy>optimize>curve_fit(\u30ab\u30fc\u30d6\u30d5\u30a3\u30c3\u30c1\u30f3\u30b0;\u66f2\u7dda\u8fd1\u4f3c)\nfrom scipy.optimize import curve_fit\n\n#the values\n#values:\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u5404\u30c7\u30fc\u30bf\u306b\u304a\u3051\u308b\u9ad8\u3055\u3092\u683c\u7d0d\u3057\u305f\u3082\u306e\n#\u305d\u308c\u306e\u8981\u7d20\u6570\u3092\u30ea\u30b9\u30c8\u306b\u683c\u7d0d;x=[0,1,...]\nx = list(range(len(values)))\n#x\u306e\u5024 = (x-1500)\/30000\nx = [((i)-1500)\/30000 for i in x]\ny = values\n\n#\u30ed\u30fc\u30ec\u30f3\u30c4\u95a2\u6570\u3092\u5b9a\u7fa9(\u30b3\u30fc\u30b7\u30fc\u5206\u5e03\uff1d\u30ed\u30fc\u30ec\u30f3\u30c4\u5206\u5e03)\ndef Lorentzian(x, x0, gamma, A):\n    return A * gamma**2 \/ (gamma**2+(x-x0)**2)\n\n#seed guess\n#\u7a2e\u3092\u4e88\u6e2c\u3059\u308b\n#\u521d\u3081\u306e\u5024\u3092\u8a2d\u5b9a\ninitial_guess = (0,0.001, 3000)\n\n#the fit\n#\u30ed\u30fc\u30ec\u30f3\u30c4\u95a2\u6570\u306b\u66f2\u7dda\u8fd1\u4f3c\u3055\u305b\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u5171\u5206\u6563\u3092\u6c42\u3081\u308b\nparameters,covariance = curve_fit(Lorentzian, x, y, initial_guess)\n#\u5171\u5206\u6563\u306e\u4f53\u683c\u6210\u5206\u3092\u62bd\u51fa\u3057\u3001\u5e73\u65b9\u6839\u3092\u3068\u308b(=sigma)\nsigma = np.sqrt(np.diag(covariance))\n\n#and plot\nplt.figure(figsize = (12,5))\n#distplot:\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\nax = sns.distplot(train_data['resp'],\n                 bins = 3000,\n                 kde_kws = {\"clip\":(-0.05,0.05)},\n                 hist_kws = {\"range\":(-0.05,0.05)},\n                 color = 'darkcyan',\n                 kde = False);\n\nvalues = np.array([rec.get_height() for rec in ax.patches])\n#\u4e0a\u3067\u540c\u3058\u3053\u3068\u3084\u3063\u305f\u306e\u3067\u7701\u7565\n#norm = plt.Normalize(values.min(), values.max())\n#colors = plt.cm.jet(norm(values))\n#for rec, col in zip(ax.patches, colors):\n#    rec.set_color(col)\nplt.xlabel(\"Histogram of the resp values\", size=14)\n#\u5f15\u6570\u306b1\u3064\u306e*\u3092\u3064\u3051\u308b\u3068\u8907\u6570\u306e\u5f15\u6570\u3092\u30bf\u30d7\u30eb\u3068\u3057\u3066\u53d7\u3051\u53d6\u308b\n#\u5f15\u6570\u306b2\u3064\u306e*\u3092\u3064\u3051\u308b\u3068\u8907\u6570\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570\u3092\u8f9e\u66f8\u3068\u3057\u3066\u53d7\u3051\u53d6\u308b\nplt.plot(x, Lorentzian(x,*parameters), '--', color='black', lw=3)\nplt.show();\ndel values\ngc.collect();","565dad6c":"#weight_0\u306e\u5168\u4f53\u306b\u304a\u3051\u308b\u5272\u5408\u306e\u8a08\u7b97\n#.shape:\u6b21\u5143\u3054\u3068\u306e\u5927\u304d\u3055\u3092\u51fa\u529b \n#train_data.shape\n#(2390491, 138)\n\n#(100\uff1b\u78ba\u7387\u3092%\u306b\u3059\u308b\u305f\u3081) \/ (train\uff1b) * (traindata\u306eweight\u304c0)\n#.shape[0]:\u4e00\u6b21\u5143\u76ee(\u884c)\u306e\u5408\u8a08\u6570\n#train_data > weight > values\u304c0 \u3092True\u3068\u3057\u305f\u3068\u304d\u306e\u3001True\u306e\u5408\u8a08\u6570\npercent_zeros = (100\/train_data.shape[0]) * ((train_data.weight.values == 0).sum())\n\n#print('percentage of zero weights is: %i' % percent_zeros + \"%\")\nprint('percentage of zero weights is: {:.0f}'.format(percent_zeros) + \"%\")","c044e8d2":"#negative weight\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\uff08negative weight\u306f\u610f\u5473\u306a\u3044\u304b\u3089\uff09\n#weight\u306emin\nmin_weight = train_data['weight'].min()\n#print('The minimum weight is: %.2f' % min_weight)\nprint('The minimum weight is: {:.2f}'.format(min_weight))\n\n\n#weight\u306emin\nmax_weight = train_data['weight'].max()\n#print('The maximum weight is: %.2f' % max_weight)\nprint('The maximum weight is: {:.2f}'.format(max_weight))\n","074d9faf":"#[]\u306e\u4e2d\u306b\u6761\u4ef6\u3092\u66f8\u304f(weight\u304cmax)\ntrain_data[train_data['weight']==train_data['weight'].max()]\n#446\u65e5\u76ee\u306b\u8d77\u3053\u308b","59646156":"#weight\u3092plot\n#\u307e\u305a\u306f\u5358\u8272\u3067plot\nplt.figure(figsize = (12,5))\nax = sns.distplot(train_data['weight'],\n                 bins=1400, \n                 kde_kws={\"clip\":(0.001, 1.4)},\n                 hist_kws={\"range\":(0.001,1.4)},\n                 color='darkcyan',\n                 kde=False);\n\n#\u6b21\u306b\u3001\u308f\u304b\u308a\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u3001\u5024\u306e\u5927\u304d\u3055\u306b\u5408\u308f\u305b\u3066\u8272\u3092\u4ed8\u3051\u308b\n#\u8272\u3092\u4ed8\u3051\u308b\u3068\u304d\u306e\u4e00\u9023\u306e\u6d41\u308c\u306f\u540c\u3058\u3001values\u2192Normalize\u2192colors\u2192rec,col\u2192show\n#values\nvalues = np.array([rec.get_height() for rec in ax.patches])\n#Normalize\nnorm = plt.Normalize(values.min(), values.max())\n#colors\ncolors = plt.cm.jet(norm(values))\n#rec,col\nfor rec,col in zip(ax.patches, colors):\n    rec.set_color(col)\n#show\nplt.xlabel(\"Histogram of non-zero weights\", size=14)\nplt.show();\ndel values\ngc.collect();","7c702166":"#weights\u306e\u5bfe\u6570\u5206\u5e03\n#weight\u304c0\u3067\u306a\u3044\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\n#query\uff1a\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u5408\u3046\u3082\u306e\u3092\u53d6\u308a\u51fa\u3059\n#reset_index:index\u3092\u9023\u756a\u306b\u632f\u308a\u76f4\u3059\n#\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u300c\u5143\u306eindex\u300d\u306e\u5217\u304c\u6b8b\u308b\u304c\u3001drop=True\u3068\u3059\u308b\u3068\u300c\u5143\u306eindex\u300d\u306f\u6d88\u3048\u308b\ntrain_data_nonZero = train_data.query('weight > 0').reset_index(drop = True)\n\n#plot\nplt.figure(figsize = (10,4))\n#\u3053\u3053\u3067\u5bfe\u6570\u5316\u3059\u308b\nax = sns.distplot(np.log(train_data_nonZero['weight']),\n                 bins=1000,\n                 kde_kws={\"clip\":(-4,5)},\n                 hist_kws={\"range\":(-4,5)},\n                 color='darkcyan',\n                 kde=False);\n\n#\u8272\u3092\u4ed8\u3051\u308b\u3068\u304d\u306e\u4e00\u9023\u306e\u6d41\u308c\u306f\u540c\u3058\u3001values\u2192Normalize\u2192colors\u2192rec,col\u2192show\nvalues = np.array([rec.get_height() for rec in ax.patches])\nnorm = plt.Normalize(values.min(),values.max())\ncolors = plt.cm.jet(norm(values))\nfor rec, col in zip(ax.patches, colors):\n    rec.set_color(col)\nplt.xlabel(\"Histogram of the logarithm of the non-zero weights\", size=14)\nplt.show();\ngc.collect();\n","e759844b":"#\u30ac\u30a6\u30b9\u5206\u5e03\n\n#\u518d\u3073\u66f2\u7dda\u8fd1\u4f3c\nfrom scipy.optimize import curve_fit\n\n#the values\n#x=0,1,2,...\nx = list(range(len(values)))\n#x = (x\/110)-4\nx = [(i\/110)-4 for i in x]\ny = values\n\n#define a Gaussian function\n#\u30ac\u30a6\u30b9\u95a2\u6570\u306e\u5b9a\u7fa9\ndef Gaussian(x, mu,sigma, A):\n    return A*np.exp(-0.5 * ((x-mu)\/sigma)**2)\n\n#\u4e8c\u5cf0\uff3b\u53cc\u5cf0\uff3d\u6027\u95a2\u6570\u306e\u5b9a\u7fa9\ndef bimodal(x, mu_1, sigma_1, A_1, mu_2, sigma_2, A_2):\n    return Gaussian(x, mu_1, sigma_1, A_1) + Gaussian(x, mu_2, sigma_2, A_2)\n\n#seed guess\ninitial_guess = (1, 1, 1, 1, 1, 1)\n\n#the fit\n#\u53cc\u5cf0\u6027\u95a2\u6570\u3067\u66f2\u7dda\u8fd1\u4f3c\nparameters, covariance = curve_fit(bimodal, x, y, initial_guess)\nsigma = np.sqrt(np.diag(covariance))\n\n#the plot\nplt.figure(figsize=(10,4))\n#\u5bfe\u6570\u3092\u3068\u308b\nax = sns.distplot(np.log(train_data_nonZero['weight']),\n                 bins=1000,\n                 kde_kws={\"clip\":(-4,5)},\n                 hist_kws={\"range\":(-4,5)},\n                 color='darkcyan',\n                 kde=False)\n\n#\u8272\u3092\u4ed8\u3051\u308b\u3044\u3064\u3082\u306e\u3084\u3064\nvalues = np.array([rec.get_height() for rec in ax.patches])\nnorm = plt.Normalize(values.min(), values.max())\ncolors = plt.cm.jet(norm(values))\nfor rec, col in zip(ax.patches, colors):\n    rec.set_color(col)\nplt.xlabel(\"Histogram of the logarithm of the non-zero weights\", size=14)\n\n#plot gaussian #1:bimodal\u306emu_1, sigma_1, A_1\u3092\u7528\u3044\u308b(\u30fb\u30fb)\nplt.plot(x, Gaussian(x, parameters[0], parameters[1], parameters[2]), ':', color='black', lw=2, label='Gaussina #1', alpha=0.8)\n\n#plot gaussian #2:bimodal\u306emu_2, sigma_2, A_2\u3092\u7528\u3044\u308b(---)\nplt.plot(x, Gaussian(x, parameters[3], parameters[4], parameters[5]), '--', color='black', lw=2, label='Gaussina #2', alpha=0.8)\n\n#plot the two gaussians toghther:\u4e0a\u4e8c\u3064\u3092\u5408\u308f\u305b\u305f\u3082\u306e(\u5b9f\u7dda)\nplt.plot(x, bimodal(x,*parameters), color='black', lw=2, alpha=0.7)\n\n#\u51e1\u4f8b\nplt.legend(loc=\"upper left\");\n\nplt.show();\ndel values\ngc.collect();","d40bfafd":"#\u5404resp\u306b\u3064\u3044\u3066\u3001\u65b0\u3057\u304fweight*resp\u306ecolumn\u3092\u3064\u304f\u308b\ntrain_data['weight_resp'] = train_data['weight']*train_data['resp']\ntrain_data['weight_resp_1'] = train_data['weight']*train_data['resp_1']\ntrain_data['weight_resp_2'] = train_data['weight']*train_data['resp_2']\ntrain_data['weight_resp_3'] = train_data['weight']*train_data['resp_3']\ntrain_data['weight_resp_4'] = train_data['weight']*train_data['resp_4']\n\n#figure\u3068AxesSubplot\u306e\u6e96\u5099\nfig, ax = plt.subplots(figsize=(15,5))\n#\u4e00\u6b21\u5143\u5316\n#groupby\u306f\u3001\u540c\u3058\u5024\u3092\u6301\u3064\u30c7\u30fc\u30bf\u3092\u96c6\u3081\u3001\u305d\u308c\u305e\u308c\u306e\u584a\u306b\u5bfe\u3057\u3001\u540c\u3058\u64cd\u4f5c\u3092\u884c\u3046\n#'date'\u3067\u5206\u3051(\u540c\u3058\u65e5\u4ed8\u3054\u3068\u306e\u30c7\u30fc\u30bf\u306e\u584a\u304c\u5408\u8a08\u65e5\u6570\u5206\u3067\u304d\u308b)\u3001\n#\u305d\u308c\u305e\u308c\u306e\u584a\u306b\u304a\u3051\u308bweight_resp\u306e\u5e73\u5747\u5024\uff08\u3064\u307e\u308a\u4e00\u65e5\u306e\u5e73\u5747\u5024)\u3092\u8a08\u7b97\u3057\u3001\n#\u305d\u308c\u3089\u306b1\u3092\u8db3\u3057\u3066\u7d2f\u7a4d\u7a4d\u3092\u683c\u7d0d\nresp = pd.Series(1+(train_data.groupby('date')['weight_resp'].mean())).cumprod()\n#resp_1,2,3,4\u306b\u5bfe\u3057\u3066\u3082\u540c\u69d8\u306b\u884c\u3046\nresp_1 = pd.Series(1+(train_data.groupby('date')['weight_resp_1'].mean())).cumprod()\nresp_2 = pd.Series(1+(train_data.groupby('date')['weight_resp_2'].mean())).cumprod()\nresp_3 = pd.Series(1+(train_data.groupby('date')['weight_resp_3'].mean())).cumprod()\nresp_4 = pd.Series(1+(train_data.groupby('date')['weight_resp_4'].mean())).cumprod()\n\n##\u3053\u306eAxesSubplot\u306ex\u30e9\u30d9\u30eb\u3092\u3064\u3051\u308b(\u4e0b\u306e\u56f3\u3067\u3064\u3044\u3066\u7121\u304f\u306d\uff1f)\nax.set_xlabel(\"Day\", fontsize=18)\nax.set_title(\"Cumulative daily return for resp and time horizons1,2,3, and 4(500days)\", fontsize=18)\nresp.plot(lw=3, label='resp x weight')\nresp_1.plot(lw=3, label='resp_1 x weight')\nresp_2.plot(lw=3, label='resp_2 x weight')\nresp_3.plot(lw=3, label='resp_3 x weight')\nresp_4.plot(lw=3, label='resp_4 x weight')\n\n#day 85 marker\n#\u5782\u76f4\u7ddaaxvline(alpha:\u900f\u660e\u5ea6)\nax.axvline(x=85, linestyle='--', alpha=0.3, c='red', lw=1)\n#\u4e00\u5b9a\u533a\u9593\u306b\u80cc\u666f\u8272\u3092\u4ed8\u3051\u308b\n#sns.xkcd_rgb\u3067\u3001954\u8272\u3092\u81ea\u7531\u306b\u53d6\u308a\u51fa\u305b\u308b\nax.axvspan(0, 85, color=sns.xkcd_rgb['grey'], alpha=0.1)\n#\u51e1\u4f8b\nplt.legend(loc=\"lower left\")","462acab6":"#weight\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092plot\u3059\u308b\n#\u3055\u3063\u304d\u3068\u540c\u3058\u3088\u3046\u306b\u3001weight\u304c0\u3067\u306a\u3044\u30c7\u30fc\u30bf\u3092\u683c\u7d0d(query,reset\uff1a\u6761\u4ef6\u306b\u5408\u3046\u3082\u306e\u3092\u53d6\u308a\u51fa\u3057\u9023\u756a\u306b)\ntrain_data_no_0 = train_data.query('weight > 0').reset_index(drop = True)\n#\u65b0\u3057\u3044column\u3092\u4f5c\u308b\u3001wAbsResp=weight*resp\ntrain_data_no_0['wAbsResp'] = train_data_no_0['weight'] * (train_data_no_0['resp'])\n\n#plot(histgram)\nplt.figure(figsize = (12,5))\nax = sns.distplot(train_data_no_0['wAbsResp'],\n                 bins=1500,\n                 kde_kws={\"clip\":(-0.02,0.02)},\n                 hist_kws={\"range\":(-0.02, 0.02)},\n                 color='darkcyan',\n                 kde=False);\n#COLOR\uff1avalue,norm,colors,rec\/col\nvalues = np.array([rec.get_height() for rec in ax.patches])\nnorm = plt.Normalize(values.min(), values.max())\ncolors = plt.cm.jet(norm(values))\n#\nfor rec, col in zip(ax.patches, colors):\n    rec.set_color(col)\nplt.xlabel(\"Histogram of the weights * resp\", size=14)\nplt.show()","dc4805ec":"#\u5404\u65e5\u306etrade\u306e\u56de\u6570\u306e\u5909\u6570\u3092\u3064\u304f\u308b\uff08\u65e5\u4ed8\u3067group\u5206\u3051\u3057\u3001ts_id\u306e\u6570\u3092\u6570\u3048\u308b\uff09\ntrades_per_day = train_data.groupby(['date'])['ts_id'].count()\n\n#plot(\u6298\u308c\u7dda\u30b0\u30e9\u30d5)\nfig, ax = plt.subplots(figsize=(15,5))\nplt.plot(trades_per_day)\nax.set_xlabel(\"Day\", fontsize=18)\nax.set_title(\"Total number of ts_id for each day\", fontsize=18)\n\n#day 85 marker\n#x=85\u306e\u70b9\u7dda\nax.axvline(x=85, linestyle='--', alpha=0.3, c='red', lw=1)\n#\u305d\u306e\u7bc4\u56f2\u3092\u30b0\u30ec\u30fc\u306b\u3059\u308b\nax.axvspan(0,85, color=sns.xkcd_rgb['grey'], alpha=0.1)\n#\u8ef8\u306e\u7bc4\u56f2\u3092\u8a2d\u5b9a\n#xlim:\u8ef8\u306e\u7bc4\u56f2\u306e\u5236\u9650\n#ax.set_:ax\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5f8c\u304b\u3089\u5909\u66f4\u3067\u304d\u308b\nax.set_xlim(xmin=0)\nax.set_xlim(xmax=500)\n#notebook\u7cfb\u3067\u306f\u73fe\u5728\u306e\u56f3\u3092\u52dd\u624b\u306bplot\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3001plt.show()\u306f\u5fc5\u8981\u306a\u304f\u611f\u3058\u308b\n#\u8907\u6570\u306eFigure\u3092\u6700\u5f8c\u306bplot\u3057\u305f\u308a\u3001\u9014\u4e2d\u3067plot\u3057\u305f\u308a\u3059\u308b\u3068\u304d\u306b\u4f7f\u3048\u308b\nplt.show()","dba307e8":"#trading day(\u4e00\u65e5\u306e\u53d6\u5f15\u6642\u9593)\u306f6.5hours(23400seconds)\u3068\u3059\u308b\n\n#Average time between trades for each day\nfig, ax = plt.subplots(figsize=(15,5))\n#\u5e73\u5747\u53d6\u5f15\u6642\u9593 = \u6642\u9593\/\u53d6\u5f15\u56de\u6570\nplt.plot(23400\/trades_per_day)\nax.set_xlabel(\"Day\", fontsize=18)\nax.set_ylabel(\"Av. time between trades(s)\", fontsize=18)\nax.set_title(\"Average time between trades for each day\", fontsize=18)\nax.axvline(x=85, linestyle='--', alpha=0.3, c='red', lw=1)\nax.axvspan(0, 85, color=sns.xkcd_rgb['grey'], alpha=0.1)\nax.set_xlim(xmin=0)\nax.set_xlim(xmax=500)\nax.set_ylim(ymin=0)\nax.set_ylim(ymax=12)\nplt.show()","0fe91d29":"#histogram of the number of trades per day\nplt.figure(figsize=(12,4))\n\n#the minimum has been set to 1000 so as not to draw the partial days like day 2 and day 294\n#the maximum number of trade per day is 18884\n#I have used 125 bins for the 500 days\n#\u2192(1000,20000)\n#histgram\nax = sns.distplot(trades_per_day,\n                 #\u968e\u7d1a\u5e45\n                 bins=125,\n                 kde_kws={\"clip\":(1000,20000)},\n                 hist_kws={\"range\":(1000,20000)},\n                 color='darkcyan',\n                 # kde;\u5bc6\u5ea6\u8fd1\u4f3c\u95a2\u6570\u306e\u63cf\u753b=True\n                 kde=True);\nvalues = np.array([rec.get_height() for rec in ax.patches])\nnorm = plt.Normalize(values.min(), values.max())\ncolors = plt.cm.jet(norm(values))\nfor rec, col in zip(ax.patches, colors):\n    rec.set_color(col)\nplt.xlabel(\"Number of trades per day\", size=14)\nplt.show()","451617ad":"#\u4e0a\u8a18\u3088\u308a\u3001max\u30679000\u56de\u53d6\u5f15\u304c\u3042\u3063\u305f\u65e5\u304c\u8907\u6570\u3042\u308b\u306e\u3067\u307f\u3066\u307f\u308b\n#volitile=volatile\uff1a\u4e0d\u5b89\u5b9a\u306a\uff1b\u5916\u308c\u5024\nvolitile_days = pd.DataFrame(trades_per_day[trades_per_day > 9000])\nvolitile_days.T #\u8ee2\u7f6e\n\n#\u4e0d\u5b89\u5b9a\u306a\u65e5\uff1a9000\u56de\u4ee5\u4e0a\u306e\u53d6\u5f15\u304c\u3042\u308b\u3053\u3068\u3082\u3042\u308a\u3001\u307b\u3068\u3093\u3069\u306f85\u65e5\u76ee\u3088\u308a\u524d  \n#feature_64\u3082time\u306b\u95a2\u9023\uff08\u203b\u5f8c\u8ff0\uff09","eb394ccc":"#feature_0\n#\u552f\u4e00 +1 or -1\u3067\u3042\u308a\u3001\u4ed6\u3068\u9055\u3044\u305d\u3046\u306a\u306e\u3067\u307e\u305a\u898b\u3066\u307f\u308b\n\ntrain_data['feature_0'].value_counts()","fb74238a":"#feature_0\u306f\u3001features.csv file\u306e\u4e2d\u3067\u552f\u4e00True\u3092\u6301\u305f\u306a\u3044\n#features.csv\uff1afeature \u00d7 Tag\u3067\u3001TF\u306e\u307f\u3092\u3068\u308b\n#\u2192feature_0\u306f\u3001\u3069\u306eTag\u306b\u3082\u5c5e\u3055\u306a\u3044\n\n#\u6298\u308c\u7ddaplot\nfig, ax = plt.subplots(figsize=(15,4))\n#train_data\u306efeature_0\u306e\u4e00\u6b21\u5143\u30c7\u30fc\u30bf\u306e\u7d2f\u7a4d\u5024\u3092\u683c\u7d0d\nfeature_0 = pd.Series(train_data['feature_0']).cumsum()\nax.set_xlabel(\"Trade\", fontsize=18)\nax.set_ylabel(\"feature_0(cumulative)\", fontsize=18);\nfeature_0.plot(lw=3)","fdbc42ae":"#+1\u3068-1\u306e\u7d2f\u7a4d\u5024\u3067\u3001\u6700\u7d42\u7684\u306b\u306f,1207005-1183486=23519\n#\u5b89\u5b9a\u7684\u306b\u5897\u52a0\n\n#\u307e\u305f\u3001feature_0=1\u3001feature_0=-1\u305d\u308c\u305e\u308c\u306b\u304a\u3044\u3066\u3001culmative resp\u3068return\u306f\u95a2\u9023\u3042\u308a\n## \"An observation about feature_0\" by therocket290\n#\u3055\u3063\u304d\u3068\u540c\u3058\u3088\u3046\u306b\u3001feature_0\u304c1(-1)\u306e\u30c7\u30fc\u30bf\u3092\u683c\u7d0d(query,reset\uff1a\u6761\u4ef6\u306b\u5408\u3046\u3082\u306e\u3092\u53d6\u308a\u51fa\u3057\u9023\u756a\u306b)\nfeature_0_is_plus_one = train_data.query('feature_0 == 1').reset_index(drop = True)\nfeature_0_is_minus_one = train_data.query('feature_0 == -1').reset_index(drop = True)\n\n#the plot\n#2(1*2)\u3064\u306e\u56f3\u3092\u7528\u610f(feature0 = 1or-1\u3092\u7528\u610f)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,4))\n#resp\u3092plot\nax1.plot((pd.Series(feature_0_is_plus_one['resp']).cumsum()), lw=3, label='resp')\nax2.plot((pd.Series(feature_0_is_minus_one['resp']).cumsum()), lw=3, label='resp')\n#return(resp*weight)\u3092plot\nax1.plot((pd.Series(feature_0_is_plus_one['resp']*feature_0_is_plus_one['weight']).cumsum()), lw=3, label='return')\nax2.plot((pd.Series(feature_0_is_minus_one['resp']*feature_0_is_minus_one['weight']).cumsum()), lw=3, label='return')\n#title,legend\n#\u3061\u306a\u307f\u306b\u3001legend=\u4f1d\u8aac\u3001\u8aad\u307e\u308c\u308b\u3082\u306e\u3001\u6614\u8a71\u3001\u96c6\u3081\u308b(lect)\u3001\u8a71\u3059\u3001\u8aac\u6559\u3001\u8aac\u660e\u3001\u51e1\u4f8b\u3068\u3044\u3046\u8a9e\u6e90\nax1.set_title(\"feature 0 = 1\", fontsize=18)\nax2.set_title(\"feature 0 = -1\", fontsize=18)\nax1.legend(loc=\"lower left\")\nax2.legend(loc=\"lower left\");\n\ndel feature_0_is_plus_one\ndel feature_0_is_minus_one\ngc.collect();\n","798b0e1a":"#85\u65e5\u76ee\u3067\u30c7\u30fc\u30bf\u3092\u5206\u3051\u308b\u305f\u3081\u306b\u300185\u65e5\u76ee\u306e\u4e00\u756a\u6700\u521d\u306e\u53d6\u5f15\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\nday85 = train_data[train_data.date == 85]\nday85[day85.ts_id == day85.ts_id.min()]","24b150e3":"#feature_1,...129\uff1a\u7279\u5fb4\u306f4\u3064\u306b\u5206\u3051\u3089\u308c\u305d\u3046  \n\n#2*2\u306e4\u3064\u306eplot\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(20,10))\n\n#\u2460Linear:feature_1\nax1.plot((pd.Series(train_data['feature_1']).cumsum()), lw=3, color='red')\nax1.set_title(\"Linear\", fontsize=22);\nax1.axvline(x=514052, linestyle='--', alpha=0.3, c='green', lw=2)\nax1.axvspan(0, 514052, color=sns.xkcd_rgb['grey'], alpha=0.1)\n#\u7aef\u3063\u3053\u30920\u306b\u3059\u308b\nax1.set_xlim(xmin=0)\n#ax1.set_xlabel(\"Trade\", fontsize=18)\nax1.set_ylabel(\"feature_1\", fontsize=18);\n\n#\u2461Noisy:feature_3\nax2.plot((pd.Series(train_data['feature_3']).cumsum()), lw=3, color='green')\nax2.set_title(\"Noisy\", fontsize=22);\nax2.axvline(x=514052, linestyle='--', alpha=0.3, c='red', lw=2)\nax2.axvspan(0, 514052, color=sns.xkcd_rgb['grey'], alpha=0.1)\nax2.set_xlim(xmin=0)\n#ax2.set_xlabel(\"Trade\", fontsize=18)\nax2.set_ylabel(\"feature_3\", fontsize=18);\n\n#\u2462Hybryd(Tag21):feature_55\nax3.plot((pd.Series(train_data['feature_55']).cumsum()), lw=3, color='darkorange')\nax3.set_title(\"Hybryd(Tag 21)\", fontsize=22);\nax3.axvline(x=514052, linestyle='--', alpha=0.3, c='red', lw=2)\nax3.axvspan(0, 514052, color=sns.xkcd_rgb['grey'], alpha=0.1)\nax3.set_xlim(xmin=0)\nax3.set_xlabel(\"Trade\", fontsize=18)\nax3.set_ylabel(\"feature_3\", fontsize=18);\n\n#\u2463Negative\uff1afeature_73\nax4.plot((pd.Series(train_data['feature_73']).cumsum()), lw=3, color='blue')\nax4.set_title(\"Negative\", fontsize=22);\n#ax4.axvline(x=514052, linestyle='--', alpha=0.3, c='red', lw=2)\n#ax4.axvspan(0, 514052, color=sns.xkcd_rgb['grey'], alpha=0.1)\n#ax4.set_xlim(xmin=0)\nax4.set_xlabel(\"Trade\", fontsize=18)\nax4.set_ylabel(\"feature_3\", fontsize=18);\ngc.collect();\n\n","9e45f75a":"# Tag14\u306fstratified\uff08\u5c64\u5316\uff09\u3057\u3066\u3044\u308b\n# \u2192discreate values\uff08\u96e2\u6563\u5024\uff09\u306e\u307f\u63a1\u7528\uff08security\uff1b\u8a3c\u5238\uff09\n# day0,1,3\u306efeature_41,42,43\u3092plot(day2\u3092\u7701\u304f\u7406\u7531\u306f\u5f8c\u8ff0)\n\n#day0,1,3\u306ecolumn\u3092\u3064\u304f\u308b\u3000\n#.loc:\u8981\u7d20\u62bd\u51fa\uff1a\u30e9\u30d9\u30eb\u540d\u53ef\u3001\u7d76\u5bfe\u5ea7\u6a19\u4e0d\u53ef\u3001\u8907\u6570\u8981\u7d20\u6307\u5b9a\u53ef\n#.at         \uff1a\u30e9\u30d9\u30eb\u540d\u53ef\u3001\u7d76\u5bfe\u5ea7\u6a19\u4e0d\u53ef\u3001\u8907\u6570\u8981\u7d20\u6307\u5b9a\u4e0d\u53ef\n#.iloc(iat)\u3000 :\u30e9\u30d9\u30eb\u540d\u4e0d\u53ef\u3001\u7d76\u5bfe\u5ea7\u6a19\u53ef\nday_0 = train_data.loc[train_data['date'] == 0]\nday_1 = train_data.loc[train_data['date'] == 1]\nday_3 = train_data.loc[train_data['date'] == 3]\n\n#3\u65e5\u9593\u306e\u30c7\u30fc\u30bf\u3092\u7d50\u5408\nthree_days = pd.concat([day_0, day_1, day_3])\n#\u6563\u5e03\u56f3\n#s:size(default=20)\nthree_days.plot.scatter(x='ts_id', y='feature_41', s=0.5, figsize=(15,3));\nthree_days.plot.scatter(x='ts_id', y='feature_42', s=0.5, figsize=(15,3));\nthree_days.plot.scatter(x='ts_id', y='feature_43', s=0.5, figsize=(15,3));\n\n#del day_0\ndel day_1\ndel day_3\ngc.collect();","7b5ba5d8":"# feature_41,42,43\u306flag\u306eplot\u3082\u9762\u767d\u3044\n# ts_id(n)\u3068ts_id(n+1)\u3092\u6bd4\u3079\u308b\n\nfig, ax = plt.subplots(1, 3, figsize=(17,4))\n#pandas.plotting(plt).lag_plot\uff1a\u6642\u7cfb\u5217\u3067lag\u3092plot\u3067\u304d\u308b\n#(series=, lag=\u305a\u308c(default\u306f1), ax;plot\u3059\u308baxis object)\n#s\u306f\u591a\u5206size\nlag_plot(day_0['feature_41'], lag=1, s=0.5, ax=ax[0])\nlag_plot(day_0['feature_42'], lag=1, s=0.5, ax=ax[1])\nlag_plot(day_0['feature_43'], lag=1, s=0.5, ax=ax[2])\n\n#feature41\nax[0].title.set_text('feature_41')\nax[0].set_xlabel(\"ts_id(n)\")\nax[0].set_ylabel(\"ts_id(n+1)\")\n\n#feature42\nax[1].title.set_text('feature_42')\nax[1].set_xlabel(\"ts_id(n)\")\nax[1].set_ylabel(\"ts_id(n+1)\")\n\n#feature43\nax[2].title.set_text('feature_43')\nax[2].set_xlabel(\"ts_id(n)\")\nax[2].set_ylabel(\"ts_id(n+1)\")\n\n#(0.0)\u306b\u8d64\u3044\u70b9\nax[0].plot(0, 0, 'r.', markersize=15.0)\nax[1].plot(0, 0, 'r.', markersize=15.0)\nax[2].plot(0, 0, 'r.', markersize=15.0)\ngc.collect();\n","dc799711":"# \u3053\u308c\u3089\u306efeatures\u306f\u4e0a\u306b\u898b\u3089\u308c\u308btag14\u306b\u4f3c\u3066\u3044\u308b\u304c\u3001\u3088\u308a0\u3092\u4e2d\u5fc3\u3068\u3057\u3066\u3044\u308b\n\n#ts_id\u3068feature_44,45\u3092\u540c\u69d8\u306bplot\nthree_days.plot.scatter(x='ts_id', y='feature_44', s=0.5, figsize=(15,3));\nthree_days.plot.scatter(x='ts_id', y='feature_45', s=0.5, figsize=(15,3));\ngc.collect();","985abaa9":"#\u540c\u69d8\u306blag\u3092plot\nfig, ax = plt.subplots(1, 2, figsize=(15,4))\nlag_plot(day_0['feature_44'], lag=1, s=0.5, ax=ax[0])\nlag_plot(day_0['feature_45'], lag=1, s=0.5, ax=ax[1])\n\n\n#feature41\nax[0].title.set_text('feature_44')\nax[0].set_xlabel(\"ts_id(n)\")\nax[0].set_ylabel(\"ts_id(n+1)\")\n\n#feature42\nax[1].title.set_text('feature_45')\nax[1].set_xlabel(\"ts_id(n)\")\nax[1].set_ylabel(\"ts_id(n+1)\")\n\n#(0.0)\u306b\u8d64\u3044\u70b9\nax[0].plot(0, 0, 'r.', markersize=15.0)\nax[1].plot(0, 0, 'r.', markersize=15.0)\ngc.collect();\n","67619b35":"# 60,61,62,63,64,65,66,67,68\n\n#\u3053\u308c\u3089\u306efeatures\u306e\u7d2f\u7a4d\u30b0\u30e9\u30d5\n\nfig, ax = plt.subplots(figsize=(15,5))\nfeature_60 = pd.Series(train_data['feature_60']).cumsum()\nfeature_61 = pd.Series(train_data['feature_61']).cumsum()\nfeature_62 = pd.Series(train_data['feature_62']).cumsum()\nfeature_63 = pd.Series(train_data['feature_63']).cumsum()\nfeature_64 = pd.Series(train_data['feature_64']).cumsum()\nfeature_65 = pd.Series(train_data['feature_65']).cumsum()\nfeature_66 = pd.Series(train_data['feature_66']).cumsum()\nfeature_67 = pd.Series(train_data['feature_67']).cumsum()\nfeature_68 = pd.Series(train_data['feature_68']).cumsum()\n#feature_69 = pd.Series(train_data['feature_69']).cumsum()\n\nax.set_xlabel(\"Trade\", fontsize=18)\nax.set_title(\"Cumulative plot for feature_60,...,68(Tag22).\", fontsize=18)\n\nfeature_60.plot(lw=3)\nfeature_61.plot(lw=3)\nfeature_62.plot(lw=3)\nfeature_63.plot(lw=3)\nfeature_64.plot(lw=3)\nfeature_65.plot(lw=3)\nfeature_66.plot(lw=3)\nfeature_67.plot(lw=3)\nfeature_68.plot(lw=3)\n#feature_69.plot(lw=3)\n\nplt.legend(loc=\"upper left\");\ndel feature_60, feature_61, feature_62, feature_63, feature_64, feature_65, feature_66, feature_67, feature_68\ngc.collect();","e387ad17":"#\u4e0a\u306e\u30b0\u30e9\u30d5\u306b\u304a\u3044\u3066\u3001feature_60\u306861,62\u306863,65\u306866,67\u306868\u306f\u4f3c\u3066\u3044\u308b\u306e\u3067\u3001\n#\u305d\u308c\u3089\u306edistribution(\u5206\u5e03)\u3092plot\n\n#default\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ab\u30e9\u30fc\u30d1\u30ec\u30c3\u30c8\u306f\u3001\n#6\u3064\u306e\u30c6\u30fc\u30de(deep, muted, pastel, bright, dark, colorblind)\u304c\u3042\u308b\nsns.set_palette(\"bright\")\n\nfig, axes = plt.subplots(2,2,figsize=(8,8))\n\n#feature60\u306861\n#\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0(\u968e\u7d1a\u5e45\u304c\u4eca\u307e\u3067\u3068\u6bd4\u3079\u4e00\u6841\u5c0f\u3055\u3044)\nsns.distplot(train_data[['feature_60']], hist=True, bins=200, ax=axes[0,0])\nsns.distplot(train_data[['feature_61']], hist=True, bins=200, ax=axes[0,0])\naxes[0,0].set_title(\"feature 60 and 61\", fontsize=18)\naxes[0,0].legend(labels=['60', '61'])\n\n#feature62\u306863\nsns.distplot(train_data[['feature_62']], hist=True, bins=200, ax=axes[0,1])\nsns.distplot(train_data[['feature_63']], hist=True, bins=200, ax=axes[0,1])\naxes[0,1].set_title(\"feature 62 and 63\", fontsize=18)\naxes[0,1].legend(labels=['62', '63'])\n\n#feature65\u306866\nsns.distplot(train_data[['feature_65']], hist=True, bins=200, ax=axes[1,0])\nsns.distplot(train_data[['feature_66']], hist=True, bins=200, ax=axes[1,0])\naxes[1,0].set_title(\"feature 65 and 66\", fontsize=18)\naxes[1,0].legend(labels=['65', '66'])\n\n#feature67\u306868\nsns.distplot(train_data[['feature_67']], hist=True, bins=200, ax=axes[1,1])\nsns.distplot(train_data[['feature_68']], hist=True, bins=200, ax=axes[1,1])\naxes[1,1].set_title(\"feature 67 and 68\", fontsize=18)\naxes[1,1].legend(labels=['67', '68'])\n\nplt.show();\ngc.collect();","26f674f9":"#\u305d\u308c\u3089\u306e\u9593\u306b\u3042\u308bfeature_64\u3092\u898b\u3066\u307f\u308b\nplt.figure(figsize = (12,5))\nax = sns.distplot(train_data['feature_64'],\n                  bins=1200,\n                  kde_kws={\"clip\":(-6,6)},\n                  hist_kws={\"range\":(-6,6)},\n                  color='darkcyan',\n                  kde=False);\nvalues = np.array([rec.get_height() for rec in ax.patches])\nnorm = plt.Normalize(values.min(), values.max())\ncolors = plt.cm.jet(norm(values))\nfor rec, col in zip(ax.patches, colors):\n    rec.set_color(col)\nplt.xlabel(\"Hisogram of feature_64\", size=14)\nplt.show();\ndel values\ngc.collect();","09e9108c":"#Tag22\u306efeatures(60-68)\u306fdaily pattern\u3082\u8208\u5473\u6df1\u3044\n#\u4f8b\u3048\u3070\u3001feature64\u306e\u30013\u65e5\u9593\u306escatter(\u5206\u6563)\u3068cumulative(\u7d2f\u7a4d)\u3092plot\n\nday_0 = train_data.loc[train_data['date'] == 0]\nday_1 = train_data.loc[train_data['date'] == 1]\nday_3 = train_data.loc[train_data['date'] == 3]\nthree_days = pd.concat([day_0, day_1, day_3])\n\n#plot\n##sharex:\u8907\u6570\u30b0\u30e9\u30d5\u9593\u306e\u8ef8\u3092\u5171\u6709(x\u8ef8)\nfig, ax = plt.subplots(2, 1, figsize=(15,6), sharex=True)\n\nax[0].scatter(three_days.ts_id, three_days.feature_64, s=0.5, color='b')\nax[0].set_xlabel('') #\u4e0b\u306e\u56f3\u3068\u5171\u6709\nax[0].set_ylabel('value')\nax[0].set_title('feature_64(days 0, 1 and 3)')\n\nax[1].scatter(three_days.ts_id, pd.Series(three_days['feature_64']).cumsum(), s=0.5, color='r')\nax[1].set_xlabel('ts_id')\nax[1].set_ylabel('cumulative sum')\nax[1].set_title('') #\u4e0a\u306e\u56f3\u3068\u5171\u6709\n\nplt.show();\n","90ebc30b":"#\u4e0a\u56f3\u306b\u304a\u3044\u3066feature_64\u306ethe global minimum value\u306f-6.4\n#feature_64\u306ethe global maximum value\u306f8\nprint(train_data['feature_64'].max())\nprint(train_data['feature_64'].min())","37509741":"#NewYork\u306eStock Exchange\u306e\u4e00\u65e5\u306e\u53d6\u5f15\u6642\u9593\u306f9:30-16:00\u3067\u3042\u308b\u3053\u3068\u3092\u8003\u3048\u3066\u307f\u308b\n\n#feature_64\u306e\u5358\u4f4d\u304c\u3001\u304a\u3088\u305d30minutes\u3067\u3001feature_64=0\u304c12\u6642\u306b\u4e00\u81f4\u3057\u3066\u3044\u305f\u3068\u3059\u308b\u3068\u3001\n#arcsin function\u3092plot\u3067\u304d\u3001y\u8ef8\u3092\u3001\u4e00\u65e5\u306e\u6642\u9593\u3068\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n#np.arange:\u7b49\u5dee\u6570\u5217(start,stop,step) step:\u9593\u9694\nx = np.arange(-1, 1, 0.01)\n#\u30a2\u30fc\u30af\u30b5\u30a4\u30f3\ny = 2 * np.arcsin(x) + 1\n\n#plot\nfig, ax = plt.subplots(1, 1, figsize=(7,4))\nax.plot(x, y, lw=3)\n\n#\u76ee\u76db\u30e9\u30d9\u30eb(x\u8ef8;\u30e1\u30e2\u30ea\u7684\u306a\u610f\u5473\u3067\u306etime(\u3064\u307e\u308anp.arange\u3067\u4f5c\u3063\u305f-1\uff5e1) \u306f\u7121\u3057\u306b\u3057\u3066\u304a\u304f)\nax.set(xticklabels=[])\nax.set(yticklabels=['9:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00'])\n\n#$\\it{}$ :\u659c\u4f53\n#$\\mathsf{}$\uff1a\u7acb\u4f53\n#\"$\\<\u66f8\u4f53>{}$\":\u4e0a\u4ed8\u304d\u3001\u4e0b\u4ed8\u304d\u6587\u5b57\n\nax.set_title(\"2$\\it{arcsin}$(t) +1\", fontsize=18)\nax.set_xlabel(\"'tick' time\", fontsize=18)\nax.set_ylabel(\"Clock time\", fontsize=18)\nplt.show();","e0dc12ab":"#\u4e0a\u56f3\u3088\u308a\u3001trade(\u305d\u306e\u65e5\u306b\u304a\u3051\u308bts_id\u306e\u6570)\u306f\u3001\u4e00\u65e5\u306e\u4e2d\u9593\u3088\u308a\u3082\u59cb\u307e\u308a\u304b\u3089\u7d42\u308f\u308a\u306e\u65b9\u304c\u3088\u308a\u983b\u7e41\n#\u4eee\u60f3\u306etick frecuency\u3092plot\u3059\u308b\n\n#\u56f3\u3092plot(t\u22601,-1\u306a\u306e\u3067\u7bc4\u56f2\u306f\u305d\u308c\u3092\u3075\u307e\u3048\u308b(-0.98\u304c\u306a\u305c\u30c0\u30e1\u304b\u306f\u4e0d\u660e))\n#dash:\u5fae\u5206\u3057\u305f\u3001\u3068\u3044\u3046\u610f\u5473\nx_dash = np.arange(-0.98, 0.99, 0.01)\n\n#\u4e00\u500b\u524d\u306e\u30bb\u30eb\u306e\u3084\u3064\u306e\u5fae\u5206\n#d\/dt(2arcsin(t)+1) = 2\/\u221a(1-t^2)\ny_dash = 2 \/ np.sqrt(1-(x_dash**2))\n\nfig, ax = plt.subplots(1, 1, figsize=(7,4))\nax.plot(x_dash, y_dash, lw=3)\n\n#y\u306elabel\u3092\u306a\u304f\u3059\nax.set(yticklabels=[])\n\n#x\u8ef8\u3092\u5909\u66f4\uff1a\u6642\u9593\u533a\u5206\u30928\u3064\u306b\u3059\u308b\u305f\u3081\u3001-1\uff5e1\u306e2\u533a\u9593\u3092\u30012\/7=2.85\u3088\u308a2.8\u305a\u3064\u306b\u5206\u89e3\nax.xaxis.set_ticks(np.arange(-1, 1, 0.28))\n#x\u306elabel\u3092\u6642\u9593\u306b\u5909\u66f4\nax.set(xticklabels=[\"9:00\", '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00'])\nax.set_title(\"d\/dt (2$\\it{arcsin}$(t) +1)\", fontsize=18)\nax.set_xlabel(\"Clock time\", fontsize=18)\nax.set_ylabel(\"'tick' frequency\", fontsize=18)\nplt.show();\n\n\n","23d8e16c":"#\u4e0a\u306e\u3053\u3068\u3092\u8e0f\u307e\u3048\u308b\u3068\u3001\u8907\u6570\u306efeature\u306b\u304a\u3044\u3066\n#\u4e00\u65e5\u306e\u59cb\u307e\u308a\u306b\u898b\u3089\u308c\u308b\u6b20\u640d\u5024\u306eperiod\u306f\u3001\n#\u4e00\u65e5\u306e\u4e2d\u9593\u306b\u898b\u3089\u308c\u308b\u6b20\u640d\u5024\u306eperiod\u3068\u540c\u3058\u306a\u306e\u304b\uff1f\uff1f\n\n#\u307e\u305f\u304a\u305d\u3089\u304f\u3001\u4e00\u65e5\u306e\u59cb\u307e\u308a\u3068\u7d42\u308f\u308a\u306b\u304a\u3051\u308b\u9ad8\u3044thick frequency\u306f\u3001\n#\u591c\u4e2d\u306b\u91cd\u8981\u306aposition\u304c\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e\n#open\u76f4\u5f8c\u306e\u5927\u91cf\u306e\u8cfc\u5165\u3068\u3001close\u76f4\u524d\u306e\u5927\u91cf\u306e\u58f2\u5374\u306b\u3088\u308b\u3082\u306e\u3067\u306f\u306a\u3044\u304b\uff1f\uff1f\n\n##marketneutral TOkyo Stock Exchange\n#\u2192\u65e5\u672c\u682a\u306b\u95a2\u3059\u308b\u3082\u306e\u3067\u306f\u306a\u3044\u304b\n#\u65e5\u672c\u306etrading hours \u306f9:00-11:30,break\u3092\u631f\u3093\u306712:30-15:00\u307e\u3067\n##\u3053\u308c\u306b\u3088\u308aTag22\u306efeatures\u306e\u4e2d\u592e\u306e\u4e0d\u9023\u7d9a\u6027\uff08gap\uff09\u304c\u8aac\u660e\u3067\u304d\u305d\u3046\n\n#feature_65\u3092plot\nthree_days.plot.scatter(x='ts_id', y='feature_65', s=0.5, figsize=(15,4));\n\n## \"Important and Hidden Temporal Data\" written by Lachlan Suter.","7de93799":"#\u3053\u308c\u3089\u306efeatures\u306e\u4e00\u90e8\u306ecumulative plots\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16,8))\n\n#\u4ee5\u4e0b\u306e\u300c+Tag9\u300d\u3068\u3044\u3046\u306e\u306fTag9\u304cFalse\u306e\u6642\u3068True\u306e\u6642\u3092\u6bd4\u3079\u3066\u3001\u3068\u3044\u3046\u3053\u3068\n#\u4f8b\u3048\u3070\u3001feature3,5,37,39\u306fFalse\u3067feature4,6,38,40\u306fTrue\n\n#feature3,4\nax1.set_title(\"features 3 and 4 (+Tag 9)\", fontsize=18);\nax1.plot((pd.Series(train_data['feature_3']).cumsum()), lw=2, color='blue')\nax1.plot((pd.Series(train_data['feature_4']).cumsum()), lw=2, color='red')\n\n#feature5,6\nax2.set_title(\"features 5 and 6 (+Tag 9)\", fontsize=18);\nax2.plot((pd.Series(train_data['feature_5']).cumsum()), lw=2, color='blue')\nax2.plot((pd.Series(train_data['feature_6']).cumsum()), lw=2, color='red')\n\n#feature37,38\nax3.set_title(\"features 37 and 38 (+Tag 9)\", fontsize=18);\nax3.plot((pd.Series(train_data['feature_37']).cumsum()), lw=2, color='blue')\nax3.plot((pd.Series(train_data['feature_38']).cumsum()), lw=2, color='red')\n\n#feature39,40\nax4.set_title(\"features 39 and 40 (+Tag 9)\", fontsize=18);\nax4.plot((pd.Series(train_data['feature_39']).cumsum()), lw=2, color='blue')\nax4.plot((pd.Series(train_data['feature_40']).cumsum()), lw=2, color='red')\nax4.axvline(x=514052, linestyle='--', alpha=0.3, c='green', lw=2)\nax4.axvspan(0, 514052, color=sns.xkcd_rgb['grey'], alpha=0.1)\nax4.set_xlabel(\"Trade\", fontsize=18)\n\ngc.collect();","9c7f04e0":"#non-zero weights\u306b\u95a2\u3057\u3066\u3001feature_51\u3092\u518d\u69cb\u7bc9\u3057\u3066plot\n# \u203bw.r.t.:with reference to(\uff5e\u306b\u95a2\u3057\u3066)\n\n#\u5206\u6563\nfig, ax = plt.subplots(figsize=(15,4))\n#color:blue\nax.scatter(train_data_nonZero.weight, train_data_nonZero.feature_51, s=0.1, color='b')\nax.set_xlabel('weight')\nax.set_ylabel('feature_51')\nplt.show()","f7aacc24":"#\u6298\u308c\u7dda\u30b0\u30e9\u30d5\nfig, ax = plt.subplots(figsize=(15,3))\nfeature_0 = pd.Series(train_data['feature_52']).cumsum()\nax.set_xlabel(\"ts_id, fontsize=18\")\nax.set_ylabel(\"feature_52(cumulative)\",fontsize=12);\nfeature_0.plot(lw=3)\n\n#lag plot\nfig, ax = plt.subplots(1,1,figsize=(4,4))\nlag_plot(day_0['feature_52'], s=0.5, ax=ax)\nax.title.set_text('feature_52')\nax.set_xlabel(\"ts_id(n)\")\nax.set_ylabel(\"ts_id(n+1)\")\n#r.:\u30d4\u30ea\u30aa\u30c9\u5fc5\u9808\n##\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3051\u3069red\u3067\u306f\u53cd\u5fdc\u3057\u306a\u3044\nax.plot(0,0,'r.',markersize=15.0);\n\n#resp\u3068\u3082\u95a2\u4fc2\u3057\u3066\u3044\u308b\nfig, ax = plt.subplots(figsize=(15,4))\nax.scatter(train_data_nonZero.feature_52, train_data_nonZero.resp, s=0.1, color='b')\nax.set_xlabel('feature_52')\nax.set_ylabel('resp')\nplt.show();","6e73d7ef":"#\u3053\u308c\u3089\u306fnoisy\u304b\u3089\u59cb\u307e\u308b\n##0.2M\u30010.5M\u30010.8M(month?)\u306etrade marks(\u53d6\u5f15\u306e\u30de\u30fc\u30af)\u4ed8\u8fd1\u306b\u9855\u8457\u306b\u307b\u307c\u4e0d\u9023\u7d9a\u306a\u30b9\u30c6\u30c3\u30d7\u304c\u3042\u308b\n#\u305d\u3053\u304b\u3089\u5148\u306flinear(\u7dda\u5f62)\n#\u3053\u308c\u3089\u306e\uff15\u3064\u306efeatures\u306fTag21\u306eset\u3092\u5f62\u6210\u3059\u308b\n\nfig, ax = plt.subplots(figsize=(15,5))\n\nfeature_55 = pd.Series(train_data['feature_55']).cumsum()\nfeature_56 = pd.Series(train_data['feature_56']).cumsum()\nfeature_57 = pd.Series(train_data['feature_57']).cumsum()\nfeature_58 = pd.Series(train_data['feature_58']).cumsum()\nfeature_59 = pd.Series(train_data['feature_59']).cumsum()\n\nax.set_xlabel(\"Trade\", fontsize=18)\nax.set_title(\"Cumulative plot for the 'Tag21' feature(55-59)\", fontsize=18)\n\nax.axvline(x=514052, linestyle='--', alpha=0.3, c='black', lw=1)\nax.axvspan(0, 514052, color=sns.xkcd_rgb['grey'], alpha=0.1)\n\nfeature_55.plot(lw=3)\nfeature_56.plot(lw=3)\nfeature_57.plot(lw=3)\nfeature_58.plot(lw=3)\nfeature_59.plot(lw=3)\nplt.legend(loc=\"upper left\");\ngc.collect();","2018ceb2":"# \u5404resp\u306e17features\u306e\u305d\u308c\u305e\u308c\u3092plot\n# \u203b\u3053\u308c\u306f\u30a4\u30e1\u30fc\u30b8\u3067\u3001\u6b63\u78ba\u306b\u306f\u53f3\u30af\u30ea\u30c3\u30af\u3067\u62e1\u5927\u305b\u3088\n\n#Note:\u5225\u306eKaggle\u306enotebook\u304b\u3089import\n#\u306a\u305c\u306a\u3089\u3001\u3053\u306e\u56f3\u3092\u4f5c\u308b\u306e\u306b\u307b\u307c\u3059\u3079\u3066\u306enotebook\u306ememory\u3092\u4f7f\u3046\u305f\u3081\u3002\n#Image(filename=\"\/kaggle\/input\/jane-17-plots\/17_plots.png\", width= \"95%\")\n#\u3069\u3046\u3084\u3063\u3066\u958b\u304f\u306e\u304b\u3088\u304f\u308f\u304b\u3089\u306a\u3044","62bfc3ff":"feature_tags = pd.read_csv(\"..\/input\/jane-street-market-prediction\/features.csv\", index_col=0)\n#binary\uff08\u4e8c\u5024\uff09\u306b\u5909\u63db;\u5143\u3005True or False\u306a\u306e\u30670or1\u306b\u3059\u308b\nfeature_tags = feature_tags*1\n#transoirted\uff08\u8ee2\u7f6e\u3055\u308c\u305f\uff09dataframe\u3092plot\n#\u5143\u306e\u30c7\u30fc\u30bf\u306f\u884c\uff1afeature\u3001\u5217\uff1atag\u2192\u884c\u3068\u5217\u3092\u5165\u308c\u66ff\u3048\n\n#style:DataFrame\u306b\u69d8\u3005\u306a\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\n#style.background_gradient:\u5404\u30bb\u30eb\u306e\u5024\u306b\u5fdc\u3058\u3066\u30ab\u30e9\u30fc\u30de\u30c3\u30d7\u3092\u9069\u7528\u3059\u308b\nfeature_tags.T.style.background_gradient(cmap='Oranges')","6d643ced":"#\u4e0a\u306e\u30c7\u30fc\u30bf\u3092'8-bit' mode\u3067re-plot\n#\u5168\u304f\u5224\u8aad\u4e0d\u80fd\u3060\u304c\u3001\u3082\u3057\u304b\u3057\u305f\u3089\u5168\u4f53\u306e\u8996\u899a\u306e\u52a9\u3051\u3068\u3057\u3066\u306e\u5f79\u5272\u3092\u679c\u305f\u3059\u304b\u3082\u3057\u308c\u306a\u3044\nplt.figure(figsize=(32,14))\n#\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\n#cbar:\u30ab\u30e9\u30fc\u30d0\u30fc\u3092\u8a2d\u5b9a\u3059\u308b\u304b\nsns.heatmap(feature_tags.T,\n           cbar=False,\n           xticklabels=False,\n           yticklabels=False,\n           cmap=\"Oranges\");","43bbab5a":"#\u305d\u308c\u305e\u308c\u306efeature\u306etag\u306e\u6570\u3092\u5408\u8a08\u3059\u308b\n#DataFrame\u306f\u3001\u884c\u304cfeature\u3001\u5217\u304cTag\u2192\u8ee2\u7f6e\u3057\u3066\u3044\u308b\u306e\u3067\u9006\n#axis=0:\u884c\u3092\u9806\u306b\u898b\u3066\u884c\u304f\n#\u5217\u3054\u3068\u306b\u884c\u306e\u548c\u3092\u51fa\u3059(feature\u3054\u3068\u306bTag\u306e\u548c\u3092\u51fa\u3059)\n#pd.DataFrame(feature_tags.sum(axis=1), columns=['Number of tags'])\u3068\u540c\u3058\n\ntag_sum = pd.DataFrame(feature_tags.T.sum(axis=0), columns=['Number of tags'])\ntag_sum.T","77612005":"#1:\u53d6\u5f15\u3059\u308b(resp=+), 0:\u53d6\u5f15\u3057\u306a\u3044(resp=-)\n# \u6700\u5f8c\u306e*1\u306b\u3088\u3063\u3066\u3001TorF\u21921or0\u306b\u5909\u63db\ntrain_data['action'] = ((train_data['resp'])>0)*1\n\n#action\u3068inaction\u5168\u4f53\u3092\u6bd4\u8f03\ntrain_data['action'].value_counts()","ed80d76d":"#\u4e0a\u306e\u5f0f\u3088\u308a\u3001\u5168\u4f53\u306b\u304a\u3044\u3066\u308f\u305a\u304b\u306bactive\u304c\u591a\u3044(0.4%)\n#\u65e5\u3054\u3068\u306b\u898b\u3066\u307f\u308b\n\n#action\u306eratio = \u65e5\u3054\u3068\u306eaction(0or1)\u306esum \/ \u65e5\u3054\u3068\u306eaction\u306ecount\uff08\u65e5\u6570\u5408\u8a08\uff09\ndaily_action_sum   = train_data['action'].groupby(train_data['date']).sum()\ndaily_action_count = train_data['action'].groupby(train_data['date']).count()\ndaily_ratio        = daily_action_sum \/ daily_action_count\n\n\n#plot\u3059\u308b\nfig, ax = plt.subplots(figsize=(15,5))\nplt.plot(daily_ratio)\nax.set_xlabel(\"Day\", fontsize=18)\nax.set_ylabel(\"ratio\", fontsize=18)\nax.set_title(\"Daily ration of action to inaction\", fontsize=18)\n\n#y=0.5\u306b\u76f4\u7dda\u306e\u7406\u7531\uff1aaction(1)\u3068inaction(0)\u304c1:1\u306a\u3089y=0.5\u306e\u306f\u305a\n#\u3060\u304b\u3089\u3001\u5b9f\u969b\u306b\u306f\u308f\u305a\u304b\u306b\u4e0a\u5bc4\u308a\nplt.axhline(0.5, linestyle='--', alpha=0.85, c='r');\nax.set_xlim(xmin=0)\nax.set_xlim(xmax=500)\nplt.show()","645382c2":"#\u65e5\u3054\u3068\u306eaction\u306f\u304b\u306a\u308a\u4e00\u8cab\u6027\u304c\u3042\u308a\u3001\n#\u660e\u3089\u304b\u306a\u9031\u30fb\u6708\u30fb\u5b63\u7bc0\u7b49\u306e\u5909\u5316\u306f\u306a\u3044\n\n#\u5e73\u5747\ndaily_ratio_mean = daily_ratio.mean()\n#print('The mean daily ratio is %.3f' % daily_ratio_mean)\nprint('The mean daily ratio is {:3f}'.format(daily_ratio_mean))\n\n#\u6700\u5927\ndaily_ratio_max = daily_ratio.max()\n#print('The maximum daily ratio is %.3f' % daily_ratio_max)\nprint('The maximum daily ratio is {:3f}'.format(daily_ratio_max))\n","bd8d677f":"#day_0\u3068\u3044\u3046dataframe\u3092\u3064\u304f\u308b\nday_0 = train_data.loc[train_data['date'] == 0]\n\n#\u305d\u3057\u3066plot\nfig, ax = plt.subplots(figsize=(15,5))\nbalance = pd.Series(day_0['resp']).cumsum()\nresp_1 = pd.Series(day_0['resp_1']).cumsum()\nresp_2 = pd.Series(day_0['resp_2']).cumsum()\nresp_3 = pd.Series(day_0['resp_3']).cumsum()\nresp_4 = pd.Series(day_0['resp_4']).cumsum()\n\nax.set_xlabel(\"Trade\", fontsize=18)\nax.set_title(\"Cumulative values for resp and time horizons 1,2,3&4 for day0\", fontsize=18)\nbalance.plot(lw=3)\nresp_1.plot(lw=3)\nresp_2.plot(lw=3)\nresp_3.plot(lw=3)\nresp_4.plot(lw=3)\nplt.legend(loc=\"upper left\")","068b1bbb":"#Descriptive statistics of the 'train.csv' file for day 0(\u8a18\u8ff0\u7d71\u8a08)\n\nday_0.describe().style.background_gradient(cmap=colorMap)","ad96a941":"#day_0\u304b\u3089\u30b9\u30bf\u30fc\u30c8\n\n#misc\n#\u6b20\u640d\u5024\u3092\u52b9\u679c\u7684\u306b\u53ef\u8996\u5316\u3059\u308b\n#import missingno as msno\n#msno.matrix\u3067\u304a\u304a\u307e\u304b\u306a\u6b20\u640d\u5024\u306e\u51fa\u73fe\u30d1\u30bf\u30fc\u30f3\u304c\u308f\u304b\u308b\n#sns.heatmap\u306e\u60c5\u5831\u306b\u52a0\u3048\u3066\u3001\u53f3\u5074\u306b\u30d0\u30fc\u304c\u8868\u793a\u3055\u308c\u308b(\u975e\u6b20\u640d\u5024\u306e\u500b\u6570\u306e\u7dda\u30b0\u30e9\u30d5)\n\n#day0\u306b\u304a\u3051\u308b\u3001\u884c\u306fts-id\uff08\u5168\u53d6\u5f15\uff09\u3001\u5217\u306ffeatures\u306a\u3069\u306ecolumn?(138\u3058\u3083\u306a\u3044\u306e\uff1f)\n#\u5168\u3066\u306e\u884c\u304c68-144\u500b\u306e\u975e\u6b20\u640d\u5024\u3092\u3082\u3064\n#color=(r,g,b)\nmsno.matrix(day_0, color=(0.35, 0.35, 0.75));","4e6a8278":"#\u30b0\u30e9\u30d5\u7684\u306b\u898b\u308b\u3068\u3001\u3044\u304f\u3064\u304b\u306ecolumns\u306bmissing data\u306echunks\uff08\u584a\uff09\u304c\u3042\u308b\n#\u30d1\u30bf\u30fc\u30f3\u304c\u3042\u308a\u305d\u3046\u306a\u306e\u3067\u3001\n#feature_7(resp1\u306e\u6700\u521d\u306efeature)\u3068feature_11(resp2\u306e\u6700\u521d\u306efeature)\u3092\u898b\u3066\u307f\u308b\n#.loc:\u8981\u7d20\u62bd\u51fa\uff1a\u30e9\u30d9\u30eb\u540d\u53ef\u3001\u7d76\u5bfe\u5ea7\u6a19\u4e0d\u53ef\u3001\u8907\u6570\u8981\u7d20\u6307\u5b9a\u53ef\n#.at         \uff1a\u30e9\u30d9\u30eb\u540d\u53ef\u3001\u7d76\u5bfe\u5ea7\u6a19\u4e0d\u53ef\u3001\u8907\u6570\u8981\u7d20\u6307\u5b9a\u4e0d\u53ef\n#.iloc(iat)\u3000 :\u30e9\u30d9\u30eb\u540d\u4e0d\u53ef\u3001\u7d76\u5bfe\u5ea7\u6a19\u53ef\n#\u3061\u306a\u307f\u306bat,iat\u306e\u65b9\u304c\u51e6\u7406\u901f\u5ea6\u306f\u306f\u3084\u3044\n\n#\u7d76\u5bfe\u5ea7\u6a19\u306e\u8907\u6570\u306e\u8981\u7d20\u306e\u5024\u3092\u53d6\u5f97\n#\u884c\u306e\u6307\u5b9a\u3092\u300c:(\u5168\u4f53\u306e\u30b9\u30e9\u30a4\u30b9)\u300d\u306b\u3059\u308b\u3068\u5217\u3092\u53c2\u7167\u3067\u304d\u308b(\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u53c2\u7167\u3067\u306f\u3067\u304d\u306a\u3044)\n#\u5217\u756a\u53f7\u3092\u6307\u5b9a\nfeats_7_11 = day_0.iloc[:, [14,18]]\nmsno.matrix(feats_7_11, color=(0.35, 0.35, 0.75), width_ratios=(1,3));","cfb0e405":"#\u30e9\u30f3\u30c0\u30e0\u306b\u306f\u898b\u3048\u306a\u3044\n#\u21922big chunks(\u5404column\u306e\u306f\u3058\u3081\u3068\u9014\u4e2d)\n#\u2192trading day spans\uff1a9:30-16:00\n#\u2192missing data\n#f_7:9:30-10:03,13:17-13:33(16m)\n#f_11:9:30-9:35, 13:17-12:22(5.5m)\n\n#train.csv file\u5168\u4f53\u306e\u305d\u308c\u305e\u308c\u306ecolumn\u306emissing data\u306e\u6570\u306e\u5408\u8a08\u3092\u898b\u3066\u307f\u308b\n#\u6570\u3092\u96c6\u8a08\n#.isna():\u6b20\u640d\u5024\u306a\u3089True\u3000\u2192\u305d\u308c\u306eSUM\u3088\u308a\u3001\u6b20\u640d\u5024\u306e\u5408\u8a08\u6570\u306b\u306a\u308b\n#.sort_values(ascending=False)\uff1a\u8981\u7d20\u3067\u30bd\u30fc\u30c8\u3059\u308b\n#\u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u6607\u9806\u3001ascending=False\u3067\u964d\u9806\uff08\u6b20\u640d\u5024\u6570\u304c\u591a\u3044\u9806\uff09\nmissing_data = pd.DataFrame(train_data.isna().sum().sort_values(ascending=False),columns=['Total missing'])\nmissing_data.T","d444ea19":"#\u8996\u899a\u5316\n#\u6b20\u640d\u5024\u306e\u5408\u8a08\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\ngone = train_data.isnull().sum()\n\n#\u68d2\u30b0\u30e9\u30d5\u3001\n#.values:\u8f9e\u66f8(key:values)\u306evalues(\u3064\u307e\u308a\u6b20\u640d\u5024\u306e\u6570)\u3092\u53d6\u5f97\n#\u5024\u306b\u5fdc\u3058\u3066color\u3092\u3064\u3051\u308b\npx.bar(gone, color=gone.values, title=\"Total number of missing values for each columns\").show()","486e36d1":"#day0\u304c\u7279\u5225\u306a\u306e\u304b\u3001\u6bce\u65e5missing data\u306f\u3042\u308b\u306e\u304b\uff1f\n#\u5217\u756a\u53f77:137\u306e\u30c7\u30fc\u30bf\u3092iloc\n#to_frame:\u3059\u3050\u306b\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u5316\nmissing_features = train_data.iloc[:, 7:137].isnull().sum(axis=1).groupby(train_data['date']).sum().to_frame()\n\n#plot\nfig, ax = plt.subplots(figsize=(15,5))\nplt.plot(missing_features)\nax.set_xlabel(\"Day\", fontsize=18)\nax.set_title(\"Total number of missing values in all features for each day\", fontsize=18)\nax.axvline(x=85, linestyle='--', alpha=0.3,c='red', lw=2)\nax.axvspan(0, 85, color=sns.xkcd_rgb['grey'], alpha=0.1)\nax.set_xlim(xmin=0)\nax.set_xlim(xmax=500)\nplt.show()\n","22ea3a3d":"#missing data \u306f\u307b\u307c\u6bce\u65e5\u898b\u3089\u308c\u3001discernible\uff08\u8b58\u5225\u53ef\u80fd\u306a\uff09pattern(weekly,monthly...)\u306f\u306a\u3044\n#day2,day294\u306f\u4f8b\u5916\n\n# \"Jane Street EDA Market Regime\"\n#\u65e5\u3054\u3068\u306etrade\u6570\u3092plot(\u5927\u4f533000\uff5e!)\n#\u9a5a\u304f\u307b\u3069\u4e0a\u306eplot\u3068\u4f3c\u3066\u3044\u308b\n#\u6bce\u65e5\u306etrade\u6570\u306b\u95a2\u3057\u3066missing values\u306e\u6570\u3092plot\n\n#\u65e5\u3054\u3068\u306etrade\u6570\u306ecolumn\ncount_weights = train_data[['date', 'weight']].groupby('date').agg(['count'])\n#\u65e5\u3054\u3068\u306emissing data\u6570\u306ecolumn\u3068\u7d50\u5408\nresult = pd.merge(count_weights, missing_features, on = \"date\", how=\"inner\")\n#\u7d50\u5408\u3057\u305f\u5f8c\u3001column\u540d\u3092\u4ed8\u3051\u76f4\u3059\nresult.columns = ['weights', 'missing']\n#\u53d6\u5f15\u6570\u306b\u5bfe\u3059\u308bmissing\u306e\u5272\u5408\u3092ratio\u3068\u3059\u308b\nresult['ratio'] = result['missing'] \/ result['weights']\n#\u5e73\u5747\nmissing_per_trade = result['ratio'].mean()\n\n#plot\nfig, ax = plt.subplots(figsize=(15,5))\nplt.plot(result['ratio'])\nplt.axhline(missing_per_trade, linestyle='--', alpha=0.85, c='r');\nax.set_xlabel(\"Day\", fontsize=18)\nax.set_title(\"Average number of missing feature values per trade,for each day\", fontsize=18)\nplt.show()","4155efbf":"#2\u65e5\u76ee\u306b\u30de\u30fc\u30af\u3092\u3059\u308b\u305f\u3081\u306b\u30012\u65e5\u76ee\u306e\u4e00\u756a\u6700\u521d\u306e\u53d6\u5f15\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\nday2 = train_data[train_data.date == 2]\nmin2 = day2.ts_id.min()\nmax2 = day2.ts_id.max()\nmean2 = day2.ts_id.mean()\n#(min+max)_2\u3068\u540c\u3058\n\nprint(min2, max2, mean2)\n#\u306a\u305c\u6b21\u306715150\u3092\u6301\u3063\u3066\u304d\u305f\u304b\u306f\u4e0d\u660e","df67418d":"#feature_64\u306e\u6563\u5e03\u56f3\u3092\u4f5c\u308b\u3068\u3001\u305d\u308c\u305e\u308c\u306e\u65e5\u306b\u540c\u3058sweeping(\u629c\u672c\u7684)\u3000pattern\u304c\u3042\u308b \n#\u3057\u304b\u3057day\u306b\u306f231\u306ets_id\u3057\u304b\u306a\u304f\u3001\u305d\u308c\u306f\u4e00\u65e5\u306e\u672c\u5f53\u306b\u6700\u5f8c\u304b\u3089\u59cb\u307e\u3063\u3066\u3044\u308b\n\n#day1,2,3(1,3:blue 2:red)\u306eplot\nday_1 = train_data.loc[train_data['date'] ==1]\nday_2 = train_data.loc[train_data['date'] ==2]\nday_3 = train_data.loc[train_data['date'] ==3]\nthree_days = pd.concat([day_1, day_2, day_3])\n\ntd = three_days.plot.scatter(x='ts_id', y='feature_64', s=0.5, figsize=(15,4), color='blue')\nday_2.plot.scatter(x='ts_id', y='feature_64', s=0.5, figsize=(15,4), color='red', ax=td);\n\n#\u3055\u3089\u306b\u308f\u304b\u308a\u3084\u3059\u304f\nfig,ax = plt.subplots(figsize=(15,3))\nax.scatter(three_days.ts_id, three_days.feature_64, s=0.5, color='b')\nax.scatter(day_2.ts_id, day_2.feature_64, s=0.5, color='r')\n#(15150,5.2\u306e\u3068\u3053\u308d\u306b\u3001size=1800,facecolor(\u5186\u306e\u4e2d\u306e\u8272)=none\u306e\u9ed2\u306e\u70b9\u7dda\u306e\u5186\u3092\u304b\u304f)\nax.scatter(15150, 5.2, s=1800, facecolors='none', edgecolors='black', linestyle='--', lw=2)\nax.set_xlabel('feature_64')\nax.set_ylabel('ts_id')\nax.set_title('feature_64 for days 1, 2 and 3')","24509179":"#dabl:\u30c7\u30fc\u30bf\u5206\u6790\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u7684\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\n#dabl\u3092\u7528\u3044\u3066day0\u3092\u5b9f\u884c\n#\u307e\u305a\u306faction\u3092plot\n#col=column\ndabl.plot(day_0, target_col=\"action\")","9f01e580":"#action\u306e0\u30681\u306e\u30af\u30e9\u30b9\u306f\u307b\u3069\u307b\u3069\u306b(reasonably)\u826f\u3044\u30d0\u30e9\u30f3\u30b9\u3067\u3042\u308b\n#\u6b21\u306bresp\u3092\u898b\u3066\u307f\u308b\ndabl.plot(day_0, target_col=\"resp\")","acf6946e":"#day0\u306b\u304a\u3044\u3066\u3001time(ts_is)\u306b\u95a2\u3057\u3066resp values\u3092plot\n#trendline;\u8fd1\u4f3c\u66f2\u7dda ols:Ordinary Least Squares(\u6700\u5c0f\u4e8c\u4e57\u56de\u5e30)\n#marginal:\u5468\u8fba\u7684\u3001\u6b04\u5916\u306eplot(histgram\u306a\u3069\u3082\u3067\u304d\u308b)\n#viloin:\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u5bc6\u5ea6\u3092\u8996\u899a\u5316\nfig_1 = px.scatter(day_0, x=day_0['ts_id'], y=day_0['resp'],\n                  trendline=\"ols\", marginal_y=\"violin\",\n                  title=(\"Scatter plot of resp with respect tp ts_id for day 0\"))\nfig_1.show()","4ab288c7":"#Very quick Permutation Importance using the Random Forest\n#Random Forest\u3092\u7528\u3044\u305f\u3068\u3066\u3082\u306f\u3084\u3044\u9806\u5e8f\u306e\u91cd\u8981\u6027\n\n## permutation importance \n#\u3069\u306efeatures\u304c\u91cd\u8981\u304b\u3001\u306f\u3068\u3066\u3082\u5927\u4e8b\u3002\u305d\u308c\u3092\u3092\u307f\u308b\u57fa\u672c\u7684\u306a\u65b9\u6cd5\n#\u3053\u306e\u65b9\u6cd5\u306f\u65e9\u304f\u3001\u5e83\u304f\u4f7f\u308f\u308c\u7406\u89e3\u3055\u308c\u3084\u3059\u304f\u3001\n#feature\u3000importance\u306e\u5c3a\u5ea6\u306b\u5fc5\u8981\u306aproperty(\u6027\u8cea?)\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\u305f\u3081\n#model\u304cfit\u3055\u308c\u305f\u5f8c\u306b\u8a08\u7b97\u3055\u308c\u308b\n#resp\u3092target\u3068\u3057\u3066regression(\u56de\u5e30)\u3092\u5b9f\u884c\n\n#.contains:\u7279\u5b9a\u306e\u6587\u5b57\u5217\u3092\u542b\u3080\u884c(:\u2192\u5217)\u3092\u62bd\u51fa\nX_train = day_0.loc[:, day_0.columns.str.contains('feature')]\n#fillna:\u6b20\u640d\u5024\u3092\u5e73\u5747\u3067\u7a74\u57cb\u3081\nX_train = X_train.fillna(X_train.mean())\n\n#target\u306faction\ny_train = day_0['resp']\n\nfrom sklearn.ensemble import RandomForestRegressor\n#RandomForest\u3067fit\nregressor = RandomForestRegressor(max_features='auto')\nregressor.fit(X_train, y_train)","a8623193":"#day100\uff06day200\u306e\u6bd4\u8f03\n#\uff08\u6642\u9593\u7684\u306b\u96e2\u308c\u3066\u3044\u3066\u3001\u4e00\u6642\u7684\u306a\u6f0f\u308c(leakage)\u3092\u6e1b\u3089\u305b\u308b\uff09  \n##Pearson pairwise correlation matrix(\u30d4\u30a2\u30bd\u30f3\u306e\u30da\u30a2\u30ef\u30a4\u30ba\u76f8\u95a2\u884c\u5217)\n#\u3059\u3054\u3044\u5927\u304d\u306a\n\n##diliverging colormap\u3092\u7528\u3044\u308b\n#\u8d64\u306f\u30d7\u30e9\u30b9\u306e\u7dda\u5f62\u306e\u76f8\u95a2\u3092\u793a\u3057\u3001\u9752\u306f\u7dda\u5f62\u306e\u975e\u76f8\u95a2\u3092\u793a\u3059\n\n#day_100\u3068200\u306ecolumn\u3092\u4f5c\u308a\u7d50\u5408\nday_100 = train_data.loc[train_data['date'] == 100]\nday_200 = train_data.loc[train_data['date'] == 200]\nday_100_and_200 = pd.concat([day_100, day_200])\n#corr:\u76f8\u95a2\u4fc2\u6570\u3092\u8a08\u7b97(pearson\u306e\u65b9\u6cd5\u3067)\n#.style.background_gradient:\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3063\u307d\u304f\u3059\u308b\n#set_precision:\u8868\u793a\u6841\u6570\u5236\u9650(\u5c0f\u6570\u70b9\u4ee5\u4e0b\u7b2c2\u4f4d\u307e\u3067)\nday_100_and_200.corr(method='pearson').style.background_gradient(cmap='coolwarm', axis=None).set_precision(2)\n","8fdf7d56":"subset = day_100_and_200[[\"feature_120\", \"feature_121\", \"feature_122\", \"feature_123\", \"feature_124\", \"feature_125\", \"feature_126\", \"feature_127\", \"feature_128\", \"feature_129\"]]\nsubset.corr(method='pearson').style.background_gradient(cmap='coolwarm', low=1, high=0, axis=None).set_precision(2)\n","76904e86":"#\u76f8\u95a2\u304c|0.992|\u4ee5\u4e0a\u306efeatures\u306epair\u3092plot\n\nfeatures_day_100 = day_100.iloc[:, 7:137]\nfeatures_day_200 = day_100.iloc[:, 7:137]\nfeatures_100_and_200 = pd.concat([features_day_100, features_day_200])\n\n# code from: https:\/\/izziswift.com\/list-highest-correlation-pairs-from-a-large-correlation-matrix-in-pandas\/\n\n#\u4e00\u5b9a\u306e\u5024\u4ee5\u4e0a\u306e\u76f8\u95a2\u4fc2\u6570\u3092\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\ndef corrFilter(x: pd.DataFrame, bound:float):\n    xCorr = x.corr()\n    xFiltered = xCorr[((xCorr >= bound) | (xCorr <= -bound)) & (xCorr !=1.000)]\n    xFlattened = xFiltered.unstack().sort_values().drop_duplicates()\n    return xFlattened\ncorrFilter(features_100_and_200, .992).to_frame()","f5a5431c":"\u3053\u308c\u3089(features\uff1f)\u306foffer prices\u3068Tag\uff19\u306ebid prices\u3092\u8868\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u304b\uff1f  \u3000\n* offer price:\u63d0\u793a\u4fa1\u683c\uff1d\u58f2\u5024\n* bid price\u3000 :\u5165\u672d\u4fa1\u683c\uff1d\u8cb7\u5024\n\n85\u65e5\u306e\u5f8c\u306efeature_40\u306e\u5024\u306f\u5b9f\u969b\u306bfeature_39\u306e\u5024\u3088\u308a\u3082\u5927\u304d\u304f\u306a\u3063\u3066\u3044\u308b\u3000  \n(offer > bid \u306f\u5e38 \uff1a\u5dee\uff1d\u30b9\u30d7\u30ec\u30c3\u30c9spread(\u4f1a\u793e\u306b\u3088\u3063\u3066\u9055\u3044\u3001\u5909\u52d5\u3059\u308b\u3053\u3068\u3082\u3042\u308b))\n\n### feature_51(Tag19)\nWeight and feature_51 de-anonymized\" by marketneutral   \n\u2192weight\u306ftrade\u3067\u4e88\u60f3\u3055\u308c\u308btransaction cost(\u53d6\u5f15\u30b3\u30b9\u30c8)  \n\u2192weight\u304cresp\u306e\u5206\u6563\u306b\u53cd\u6bd4\u4f8b  \n\u2192weight\u306f\u7c21\u5358\u306a\u53d6\u5f15\u30b3\u30b9\u30c8\u306e\u8a55\u4fa1\u57fa\u6e96\n\n\u2192feature51\u306f\u682a\u5f0f\u306e\u4e00\u65e5\u306e\u5e73\u5747\u306e\u51fa\u6765\u9ad8\uff08\u306e\u5bfe\u6570\uff09\u3068\u8a00\u308f\u308c\u3066\u3044\u308b\n","7315d063":"### PostScript(\u8ffd\u8a18)  \n\u81ea\u5206\u81ea\u8eab\u3067ML\u6226\u7565\u3092\u958b\u767a\u3057\u305f\u3044\u306a\u3089\u3070\u3001odds\u306f\u3042\u306a\u305f\u306b\u5bfe\u3057\u3066\u7a4d\u307f\u91cd\u306d\u3089\u308c\u308b?  \n1\u3064\u306e\u771f\u306e\u6295\u8cc7\u6226\u7565\u3092\u4f5c\u308b\u3053\u3068\u306f\u3001100\u3092\u4f5c\u6210\u3059\u308b\u304f\u3089\u3044\u5927\u5909  \n\u8907\u96d1\u3055\u306f\u5727\u5012\u7684  \nMarcos Lopez de Prado in \"Advances in Financial Machine Learning\")\n\n\u305d\u308c\u306f\u3001\u5b9f\u969b\u3088\u308a\u3082\u6570\u5b66\u7684\u30fb\u898f\u5247\u7684\u306b\u898b\u3048\u308b  \n\u305d\u306e\u6b63\u78ba\u3055\u306f\u660e\u3089\u304b\u3060\u304c\u3001\u4e0d\u6b63\u78ba\u3055\u306f\u96a0\u3055\u308c\u3066\u3044\u308b  \n\u305d\u306e\u8352\u91ce\u306f\u5f85\u3061\u69cb\u3048\u3066\u3044\u308b  ","ec8c9df0":"## For Japanese rookie by Japanese rookie\n# **Jane Street: EDA of day 0 and feature importance**\n\n This notebook is begginers version of \n[Jane Street: EDA of day 0 and feature importance](https:\/\/www.kaggle.com\/carlmcbrideellis\/jane-street-eda-of-day-0-and-feature-importance) made by [Mr.Carl McBride Ellis](https:\/\/www.kaggle.com\/carlmcbrideellis).\n\nI respect him, and I'm impressed by this notebook!  \nBut I'm a beginner,and too new to understand this instantly.  \nSo, I add supplements for ***beginners*** and Japanese translation.  \nI made this just for my own growth.  \nIf you are a beginner who is confused about understanding his notebook(Same trouble as me), I may be able to help you (especially Japanese).   \n### <span style=\"color: red; \">*Note:If there are copyright issues ,offensive authors, or anything else,this notebook will be deleted immediately.*<\/span>\nPlease forgive me though it is a childish sentence and English.  \n\n\n\n### \u25cfDescription\n\u300c\u4f4e\u304f\u8cb7\u3063\u3066\u9ad8\u304f\u58f2\u308b\u300d\u306f\u7c21\u5358\u306b\u898b\u3048\u3066\u3001\u96e3\u3057\u3044  \n\u96fb\u5b50\u53d6\u5f15\u306b\u3088\u308a\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u4fa1\u683c\u5dee\u3092\u898b\u3064\u3051\u5229\u7528\u3067\u304d\u308b\u53ef\u80fd\u6027\u304c\u7121\u9650\u5927  \n\u5168\u54e1\u304c\u5408\u7406\u7684\u3068\u3059\u308b\u3068\u3001\u4fa1\u683c\u306f\u3044\u3064\u3082\u516c\u5e73\u306a\u4fa1\u683c\u306b\u306a\u308b\u304c\u3001\u73fe\u5b9f\u306f\u305d\u3046\u3067\u306f\u306a\u3044  \n\u975e\u52b9\u7387\u6027\u3092\u5229\u7528\u3059\u308b\u53d6\u5f15\u6226\u7565\u3092\u4f5c\u308b\u306e\u306f\u96e3\u3057\u3044\uff08\u826f\u3044\u610f\u601d\u6c7a\u5b9aor\u305f\u3060\u306e\u5e78\u904b\uff09  \n\u3000\u2460\u81a8\u5927\u306a\u53d6\u5f15\u30c7\u30fc\u30bf\u304b\u3089\u30ea\u30bf\u30fc\u30f3\u3092\u6700\u5927\u5316\u3059\u308b\u5b9a\u91cf\u7684\u306a\u30e2\u30c7\u30eb\u3092\u4f5c\u308b  \n\u3000\u2461\u5c06\u6765\u306e\u5e02\u5834return\u306b\u5bfe\u3057\u3066\u30e2\u30c7\u30eb\u306b\u3088\u308b\u4e88\u6e2c\u3092\u3059\u308b\u3000\u3000\n   \nhistorical data\u3092\u3001\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u305f\u3081\u306b\u6570\u5b66\u7684\u624b\u6cd5\u3068\u6280\u8853\u7684\u624b\u6cd5\u3092\u7528\u3044\u308b  \u3000\u3000  \n\u3000potential trading opportunities\u306e\u6570\u304c\u4e0e\u3048\u3089\u308c\u308b\u3000\u3000  \n\u826f\u3044\u30e2\u30c7\u30eb\u304c\u3067\u304d\u6b63\u3057\u304f\u53d6\u5f15\u3092\u5b9f\u884c\u3059\u308b\u3068\u3088\u308a\u516c\u6b63\u306a\u4fa1\u683c\u306b\u306a\u308b\u304c\u3001\u73fe\u5b9f\u7684\u306b\u306f\u53b3\u3057\u3044\u3000\u3000  \nJaneStreet\u306ftrading models\u3068machine learning solutions\u3092\u4f5c\u3063\u305f\u3000\u3000  \n\u3000\u2026\u53ce\u76ca\u6027\u306e\u9ad8\u3044opportunities\u3092\u7279\u5b9a\u3057\u3001\u53d6\u5f15\u306e\u5b9f\u884c\u3092\u8fc5\u901f\u306b\u6c7a\u5b9a\u3059\u308b\u3000\u3000  \nJS\u306e\u91cf\u7684\u554f\u984c\u3092\u306f\u308b\u304b\u306b\u5358\u7d14\u5316\u3057\u3066\u308b\u304c\u3001\u3053\u306e\u8ab2\u984c\u306e\u89e3\u6c7a\u306e\u65b0\u3057\u3044\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u6c42\u3081\u3066\u3044\u308b  \u3000\u3000\n\u3000\u3000\n### \u25cfEvaluation\uff1aa utility score\u3000\u3000\u3000  \ntest set\u306erow\uff1aaction value \u3092predict\u3059\u308ba trading opportunity\u3092\u8868\u3059\u3000\u3000  \nsubmission file\uff1apython time-series API\u3092\u7528\u3044\u308b\u3000\u3000  \n\u3000model\u304c\u6642\u9593\u901a\u308a\u306bpeek forward\u3057\u306a\u3044\u3088\u3046\u306b\u306a\u308b\uff08\uff1f\uff09\u3000\u3000  \n  \n### \u25cfData Description\u3000\u3000    \nfeature_{0...129}\uff1a\u682a\u5e02\u5834\u306e\u30c7\u30fc\u30bf\u3000\u3000\n\nrow(\u5217):\u53d6\u5f15\u6a5f\u4f1a\naction value\uff1a1\u306a\u3089\u53d6\u5f15\u30010\u306a\u3089\u30b9\u30eb\u30fc\u3002\u3053\u308c\u3092\u4e88\u6e2c\u3059\u308b\u3000\u3000  \nresp:\u53ce\u76ca\u7387\uff1d\u6295\u8cc7\u5143\u672c\u306e\u5897\u52a0\u5206\/\u6295\u8cc7\u5143\u672c\u3002  \nresp1~4\u306ftime horizon(\u6642\u9593\u306e\u533a\u5207\u308d\u3044)\u3092\u5909\u3048\u305f\u3060\u3051\u3002\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u3092\u4e0a\u3052\u308b\u305f\u3081\u306b\u4f7f\u3046\u3002  \ntest set\u306b\u306fresp\u306e\u307f\u3002\nweight:\u53d6\u5f15\u91cf\u3002weight=0\u306fscore\u306e\u8a55\u4fa1\u306b\u5bc4\u4e0e\u3057\u306a\u3044\u304c\u3001\u7a7a\u767d\u3092\u4f5c\u3089\u306a\u3044\u305f\u3081\u306b\u610f\u56f3\u7684\u306b\u5165\u308c\u3066\u3042\u308b\u3002\u9ad8\u3044weight\u306f\u4f4e\u3044resp\u306e\u307f\u306b\u95a2\u4fc2\u3002  \n \ncolumn(\u884c)  \ndate:\u53d6\u5f15\u3057\u305f\u65e5\u306b\u3061  \nts_id:\u6642\u9593\u306e\u9806\u5e8f  \n","3e869a06":"2\u3064\u306e\u30d4\u30fc\u30af\u304c\u3042\u308b  \n\u2460weight=0.17\uff1a\u9ad8\u304f\u72ed\u3044  \n\u2461weigh=0.34 \uff1a\u4f4e\u304f\u5e83\u3044\n0\u4ee5\u5916\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\uff1apeek\u306f2\u3064(0.17:\u9ad8\u304f\u72ed\u3044,0.34:\u4f4e\u304f\u5e83\u3044)\n\u21922\u3064\u306e\u5206\u5e03\u304c\u91cd\u306a\u3063\u3066\u3044\u308b\uff08\u8ca9\u58f2\u3068\u8cfc\u5165\uff1f\uff09\n","ee03c787":"## 8,Action\n\u3053\u306e\u30b3\u30f3\u30da\u306e\u76ee\u7684\uff1aaction    \n1:\u53d6\u5f15\u3059\u308b\u3001 0:\u53d6\u5f15\u3057\u306a\u3044\u3001\u306ebinary(2\u9032)column  ","67a95dcd":"## 11,Is there any missing data: Days 2 and 294","f467e19d":"## 1,The train.csv file is big\uff1a\u8a13\u7df4\u7528\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u304c\u5927\u304d\u3044\n\u2192\u30b5\u30a4\u30ba\u5927\u3067\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3001datatable\u3092\u4f7f\u3044\u3001pandas dataframe\u306b\u5909\u63db\n\n","95a64350":"If you have any problems or improvements,please comment.  \nThank you for reading.  \n\nmade by Japanese rookie momijiro","572204d3":"\u7e26\u306e\u7834\u7dda\uff1aday85  \n  \nresp_1,2,3,4\uff1a\u30e2\u30c7\u30eb\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3092\u6b63\u898f\u5316\u3059\u308b\u305f\u3081\u306e\u4ee3\u66ff\u7684\u306a\u5ba2\u89b3\u7684metrics\u3092\u5fc5\u8981\u3068\u3059\u308b\u3068\u304d\u306e\u305f\u3081\u306e\u3082\u306e  \n\u2192\u305d\u308c\u3092\u610f\u56f3\u3057\u306a\u3044\u306a\u3089\u3070\u3001\u304a\u305d\u3089\u304f4\u00d717=68\u306efeatures\u5168\u3066\u3092\u843d\u3068\u3057\u3066\u3001\nfeatures\u306b\u95a2\u4fc2\u3059\u308bresp\u3092\u4fdd\u6301\u3059\u308b\u3053\u3068\u306b\u306a\u308b","fa25bdba":"\n## 16,Evaluation\uff1autility score\n\n\u3053\u306e\u30b3\u30f3\u30da\u306futility score\u306b\u3088\u3063\u3066\u8a55\u4fa1\u3055\u308c\u308b  \n\u3053\u306e\u30b9\u30b3\u30a2\u306e\u3088\u308a\u8a73\u7d30\u306a\u8aac\u660e\u3068\u8a08\u7b97\u306f\u4e0b\u306enotebook\u3092\u53c2\u7167  \n\"Understanding the Utility Score Function\" written by Renata Ghisloti Duarte de Souza  \n\"Utility Function and Patterns in Missing Values\" written by Leonie  \n\"Jane Street: Super Fast Utility Score Function\" written by Yirun Zhang  \n\n'off-line' evaluation  \nFound the Holy Grail: GroupTimeSeriesSplit\" written by Jorijn Jacko Smit\n\"Purged Rolling Time Series CV Split\" written by marketneutral\n\n","c3f1c930":"\n## 13,Permutation(\u9806\u5e8f) Importance using the Random Forest\n","8fd6c02a":"Cauthy distribution \u306f2\u3064\u306e\u72ec\u7acb\u3057\u305f\u5e73\u5747\uff10\u306e\u6a19\u6e96\u5206\u5e03\u306b\u5f93\u3046\u30e9\u30f3\u30c0\u30e0\u306e\u5024\u304b\u3089\u306a\u308b\nThe paper by David E. Harris \"The Distribution of Returns\"   \n\u3088\u308a\u8a73\u3057\u3044Cauthy distibution\u306e\u8aac\u660e","65e3f8a0":"missing data  \n* Tag4(resp1)\u306b79.6%\n* Tag3(resp2)\u306b15.2%\u3001\u5408\u308f\u305b\u306695%\n\nresp1\n* f_7,8\uff1a393135\n* f_17,18,27,28\uff1a395535\n* f_72,78,84,90,96,102,108,114\uff1a351426\n\nresp2\n* f_21,22,31,32\uff1a81444(f_11,12\u3068\u8fd1\u3044)\n\n\u3088\u308amisssing values\u304c\u5c11\u306a\u3044features\u304c\u3082\u3063\u3068\u5b58\u5728\u3059\u308b  \n\u2192\u3057\u304b\u3057\u5927\u4e8b\u306a\u306e\u306fmissing values\u306e\u91cf\u3088\u308a\u3082\u3001   \n\u4f3c\u305fmeasures\/matrics\uff08\u7279\u5fb4\uff09\u3092\u793a\u3059features\u304c\u6559\u3048\u3066\u304f\u308c\u308b\u3053\u3068\u3067\u3042\u308b","4b370073":"\n## 9,The first day (\"day 0\")\uff1amissing data\u306b\u306fpatttern\u304c\u3042\u308b","0345b176":"### feature_1...129","45e1df63":"## 5,Time\uff1a\u5404\u65e5\u306e\u3001ts_id\u306e\u6570\u3092plot\n\n\u5782\u76f4\u7834\u7dda\uff1a85\u65e5\u76ee\u4ed8\u8fd1\u3067\u30e2\u30c7\u30eb\u3092\u4fee\u6b63\u3057\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081  ","812cd2bf":"\u3053\u308c\u3089\u304c5\u3064\u306eresp\u306e\u5024\u306b\u95a2\u4fc2\u3057\u3066\u3044\u308b\u3068\u3059\u308b\u3068\uff1f    \n* feature_55\u306fresp_1\u306b\u95a2\u9023\n* feature_56\u306fresp_4\u306b\u95a2\u9023\n* feature_57\u306fresp_2\u306b\u95a2\u9023\n* feature_58\u306fresp_3\u306b\u95a2\u9023\n* feature_59\u306fresp\u306b\u95a2\u9023\n\n\u305d\u306e\u5834\u5408\u306f\u3001  \n\n* Tag0\u306fresp_4\u306efeatures\u3092\u8868\u3059\n* Tag1\u306fresp\u306efeatures\u3092\u8868\u3059\n* Tag2\u306fresp_3\u306efeatures\u3092\u8868\u3059\n* Tag3\u306fresp_2\u306efeatures\u3092\u8868\u3059\n* Tag4\u306fresp_1\u306efeatures\u3092\u8868\u3059\n\n\u3064\u307e\u308a\u3001  \n\n* resp_1\uff1a7,8,17,18,27,28,55,72,78,84,90,96,102,108,114,120,121  \n(\u3059\u3079\u3066\u306emissing data\u306e79.6%\u304c\u3053\u306eset\u306e\u4e2d\u306b\u3042\u308b)\n* resp_2\uff1a11,12,21,22,31,32,57,74,80,86,92,98,104,110,116,124,125  \n(\u3059\u3079\u3066\u306emissing data\u306e15.2%\u304c\u3053\u306eset\u306e\u4e2d\u306b\u3042\u308b)\n* resp_3\uff1a13,14,23,24,33,34,58,75,81,87,93,99,105,111,117,,126,127\n* resp_4\uff1a9,10,19,20,29,30,56,73,79,85,91,97,103,1099,115,122,123\n* resp\uff1a15,16,25,26,35,36,59,76,82,88,94,100,106,112,118,128,129","7a346f72":"## 6,The features\n### feature_0","bc9bdf74":"## 7,The features.csv file\uff1a\u533f\u540d\u5316\u3055\u308c\u305ffeatures\u306b\u95a2\u9023\u3059\u308b\u30e1\u30bf\u30c7\u30fc\u30bf\n\"metadata pretaining to the anonymized features\"\u3092\u542b\u3080file  \n1:True 0:False  \nfeature\u306b\u95a2\u9023\u3065\u3044\u305ftag29\u500b\u3092\u3082\u3064\n\n\nfeature\u2192tag1\uff5e4\u500b(feature_0:tag0\u500b)","bb0ad8ca":"\u6700\u5927\u3068\u306a\u308b\u306e\u306fday294(\u5f8c\u8ff0)  \n\u4e0a\u8a18\u306f\u660e\u3089\u304b\u306b\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u304a\u3051\u308b\u3068\u3066\u3082\u5358\u7d14\u5316\u3057\u305ftarget\u3067\u3042\u308b\n\"Target Engineering; CV; \u26a1 Multi-Target\" written by marketneutral","e19897e7":"### feature_52(tag19)","fe639cf0":"\u4e00\u65e5\u306b\u3001\u53d6\u5f15\u3054\u3068\u306b\u5e73\u5747\u30673\u3064\u306emissing feature\u304c\u3042\u308b(day2,294\u3092\u9664\u304f)  \nday2,294\u306b\u306f\u5168\u304fmissing value\u304c\u306a\u3044  \ndya14\u304cmissing values\u304c\u6700\u3082\u591a\u3044  \n\n\u2192\u76ee\u306b\u898b\u3048\u306a\u3044test data\u306emissing data\u3092\u3069\u3046\u3059\u308c\u3070\u3088\u3044\u304b\u554f\u984c  \n\u4f55\u3092\u3059\u308b\u306b\u3057\u3066\u3082\u3001\u30b3\u30f3\u30da\u3067\u306f\u6642\u9593\u304c\u91cd\u8981\u306a\u306e\u3067\u65e9\u304f\u3084\u308b\u5fc5\u8981\u3042\u308a  \n\"Optimise Speed of Filling-NaN Function\"(\u3055\u3089\u306b\u8a73\u3057\u304f)","b02175d7":"* action\u306e\u5358\u7d14\u306a\u5b9a\u7fa9\u3068resp\u306e\u5024\u306e\u9593\u306b\u306f\u305f\u3063\u305f0.54\u306e\u76f8\u95a2\u3057\u304b\u898b\u3089\u308c\u306a\u3044  \n* \u307e\u305f\u3001\u4e00\u3064\u3067resp\u306b\u5f37\u3044\u76f8\u95a2\u3092\u6301\u3064\u3088\u3046\u306afeature\u306f\u5b58\u5728\u3057\u306a\u3044\u3000\u3000\n\nSpearman's rank correlation coefficient  \nSpearman\u306e\u9806\u4f4d\u76f8\u95a2\u4fc2\u6570  \n\u2192financial data\u306b\u304a\u3044\u3066\u306f\u3088\u308a**apropo**\uff08\u9069\u5207\uff1f\uff09\u3067\u3042\u308b  \n\u305d\u308c\u306f\u5358\u7d14\u306b\u3001\u305d\u306e\u3088\u3046\u306a\u76f8\u95a2\u3092\u898b\u308b\u305f\u3081\u306b\u3001pandas.DataFrame.corr\u306e\u4e2d\u306e\u3001method='pearson'\u3092method='spearman'\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u3067\u304d\u308b  \n  \n### Tag28 section\n\u305d\u3053\u306e\u5468\u308a\u3092navigate\u3059\u308b\u3053\u3068\u306f\u3001\u3088\u308a\u3044\u304f\u3064\u304b\u306e\u304b\u306a\u308acurious regions\u304c\u3042\u308b\u3088\u3046\u306b\u898b\u3048\u308b    \n\u4f8b\u3048\u3070120\u304b\u3089129\u306e\u9593\u306efeatures\u3092plot\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b","1de2a444":"### Features 60 to 68(Tag22)","1555a01e":"Tag 28 features\n* feature_120&121\uff1aTag4(resp_1)\n* feature_122&123\uff1aTag0(resp_4)\n* feature_124&125\uff1aTag3(resp_2)\n* feature_126&127\uff1aTag2(resp_3)\n* feature_128&129\uff1aTag1(resp)\n\u3064\u307e\u308a\u3001\n* resp & resp_4\u306e\u7dda\u5f62\u76f8\u95a2\uff1a0.98\n* resp & resp_4\u306e\u7dda\u5f62\u76f8\u95a2\uff1a0.97\n* resp & resp_4\u306e\u7dda\u5f62\u76f8\u95a2\uff1a0.94\n* resp & resp_4\u306e\u7dda\u5f62\u76f8\u95a2\uff1a0.89\n\n### High correlations\n\n","7a0c5a85":"### \u2461Noisy\uff1aTag19  \n* 3,4,5,6\n* 8,10,12,14,16\n* 37,38,39,40\n* 72,73,74,75,76\n* 78,79,80,81,82\n* 83","bb8ed715":"## 2,resp(once)\uff1a\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3046\u5fdc\u7b54\u306e\u7d2f\u7a4d\u5024culmative values\u3092\u307f\u308b\nTH\u304c\u9577\u3044\u2192\u6295\u8cc7\u5bb6\u306f\u7a4d\u6975\u7684\u3067\u30ea\u30b9\u30af\u9ad8\u3044\u3000TH\u77ed\u3044\u2192\u4fdd\u5b88\u7684\u3067\u30ea\u30b9\u30af\u4f4e\u3044  \n\u203bTH\uff1bTimeHorizon\uff1a\uff08\u682a\u3084\u8a3c\u5238\u306a\u3069\u3092\u4fdd\u6709\u3057\u3066\u3044\u308b\uff09\u6642\u9593\u306e\u7bc4\u56f2  \n\n","0450d3d3":"\u4e0a\u56f3\u306b\u306f\u3001\u3069\u3053\u3088\u308a\u3082\u3001'\u7d99\u7d9a\u3055\u308c\u308b...'\u3068\u3044\u3046\u53e4\u5178\u7684\u306a\u4fa1\u5024\u304c\u3042\u308b  \n\n\u5f93\u6765\u306e\u8868\u306e\u5f62\u5f0f\u3067\u4f55\u304c\u8d77\u3053\u3063\u3066\u3044\u308b\u306e\u304b\u3092\u660e\u3089\u304b\u306b\u3059\u308b\u3053\u3068\u306f\u3068\u3066\u3082\u96e3\u3057\u3044  \n\ud83c\udf10EDA: Tag Network Analysis (networkx + gephi)\ud83c\udf10\"   \n\u2192tags\u3068features\u306e\u9593\u306e\u95a2\u4fc2\u3092\u793a\u3059\u30b0\u30e9\u30d5\u5206\u6790\u304c\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b  \n  \nGreg Calvez   \n\u2192tag_6\uff1aprices\u3001tag_23\uff1avolume\u3001tag_20\uff1aspread\u306b\u95a2\u9023  \n\u2192tag_12\uff1aminima\u3001tag_13\uff1amaxima\u3001tag_22\uff1atime\u306b\u95a2\u9023  ","efdd9a98":"\n## 14,Is there any correlation between day 100 and day 200?\n\u5404\u65e5\u304cindependent(\u72ec\u7acb)\u304b\u3069\u3046\u304b??  \n\n\u2192action\u3068resp\u306e\u5358\u7d14\u306a\u76f8\u95a2\u306f0.54(\u203b\u5358\u4e00\u3067resp\u3078\u306e\u5f37\u3044\u76f8\u95a2\u3092\u793a\u3059feature\u306f\u306a\u3044)  \nTag28:feature120\uff5e128  \n\u2192\u76f8\u95a2\u304c\u5927\u304d\u3044feature\u3092\u6e1b\u3089\u305b\u308b(60\u4ee3\u306efeature\u304b\u3089\u59cb\u3081\u308c\u3070\u3088\u3044)\n","921f65d3":"days294\u3082\u540c\u69d8\u306b\u306a\u308a\u3001ts_id\u306f29\u500b\u3057\u304b\u306a\u3044  \n\u3053\u308c\u3082\u3001\u306a\u305c\u4ed6\u306e\u65e5\u306e\u671d\u98df\u3084\u663c\u98df\u306e\u6642\u9593\u306b\u898b\u3089\u308c\u308bmissing values\u304c\u5b58\u5728\u3057\u306a\u3044\u306e\u304b\u3092\u8aac\u660e\u3057\u3066\u3044\u308b  \n\u2192\u5916\u308c\u5024\u3068\u3057\u3066\u305d\u306e2\u65e5\u3092drop\u3059\u308b\u3053\u3068\u304c\u4fa1\u5024\u306e\u3042\u308b\u51e6\u7406\u3068\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\n\n\n## 12,DABL plots (targets: action and resp)\n\uff1aautomatic plots for classification&regression\naction\u306e**0,1\u306fwell balanced","c584524a":"\u5bfe\u6570\u5206\u5e03\u3001\u30ac\u30a6\u30b9\u5206\u5e03\u3067\u307f\u308b\u3068\u3001\u72ed\u3044\u5de6\u306epeek\u306f\u9055\u3046\u5206\u5e03  \n\u03bc\u5e73\u5747  \n\u5c0f\u3055\u3044\u30ac\u30a6\u30b9\uff1a-1.32\u3000\u5927\u304d\u3044\u30ac\u30a6\u30b9\uff1a0.4\n## 4,Cumulative return\uff1a\u7d2f\u7a4ddaily return\uff1dweight * calue of resp\nresp_123\u2192\u4fdd\u5b88\u7684conservative\nCumulative return \u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0","945175df":"\n## 10,Are there any missing values?\n","81f2d963":"### Features_44(tag15),45(tag17)","ca750184":"\u6211\u3005\u306e\u30e2\u30c7\u30eb\u306b\u304a\u3044\u3066\u3001\u6700\u7d42\u7684\u306afeatures\u306e\u6570\u306f\u78ba\u5b9f\u306b\u524a\u6e1b\u3067\u304d\u308b\u3088\u3046\u3060  \n\u59cb\u3081\u308b\u306e\u306b\u826f\u3044\u5834\u6240\u306f\u300160\u53f0\u306efeatures(Tag22)\u3092\u898b\u308b\u3053\u3068  \n(\u305d\u308c\u3089\u306e\u9593\u306b\u306f\u305f\u304f\u3055\u3093\u306e\u76f8\u95a2\u304c\u3042\u3063\u305f\u305f\u305f\u3081)   \n\n\n## 15,The test data\n\u7dcf\u7d4c\u904e\u6642\u9593wall time\u22523.5h\u3000\u2192\u3000\u63d0\u51fa\u524d\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u30c6\u30b9\u30c8\u304c\u91cd\u8981(\u3044\u3064\u3082\u305d\u3046\u3060\u3051\u3069)  \n\u3088\u308a\u5c0f\u3055\u3044test data file(36MB);example_test.csv\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b  \n\u3053\u308c\u306f15000\u8d8a\u3048\u306erows\u3092\u6301\u3061\u30013\u65e5\u9593\u306e\u30c7\u30fc\u30bf\u3092\u793a\u3059  \n\u3053\u308c\u306ftrain.csv\u306e\u4e2d\u306e130\u306efeatures\u3068\u5404\u53d6\u5f15\u306eweight\u304b\u3089\u306a\u308b  \n\u3061\u306a\u307f\u306bexample_test.csv\u306fresp\u30c7\u30fc\u30bf\u306f\u542b\u307e\u306a\u3044  \n\n\n3days\u3068\u3044\u3046\u306e\u306fday0,1,2\u3092\u8868\u3057\u3001day2\u306f\u4e00\u65e5\u306e\u7d42\u308f\u308a\u306e\u65b9\u306e\u30c7\u30fc\u30bf\u306e\u307f\u3057\u304b\u306a\u3044\n(train.csv file\u3068\u540c\u69d8)\u3000\u2192\u6271\u3044\u306b\u6ce8\u610f\n","3f800f74":"resp\uff08\u9752\uff09\u306fresp4(\u7d2b)\u306b\u8fd1\u3044\u3002\n\n\"Jane Street: time horizons and volatilities\"  \n\u2192\u6700\u5c24\u63a8\u5b9a\u3088\u308a\u3001time horizon(Tj)\u306b\u305f\u3044\u3057\u3001resp_1\u3092T1(5trading data)\u3068\u3059\u308b\u3068\u3001\n* Tj(resp_2) = 1.4T1\n* Tj(resp_3) = 3.9T1\n* Tj(resp_4) = 11.1T1\n","4ebd72ac":"## 11,Is there any missing data: Days 2 and 294\nfeature_64\u306e\u5206\u6563\u3092plot\u3059\u308b\u3068\u3001\u3069\u306e\u65e5\u3082\u540c\u3058\u629c\u672c\u7684\u306a\u30d1\u30bf\u30fc\u30f3\u304c\u3042\u308b  \n\u3057\u304b\u3057day2\u306f23\u306ets_id\u3001\u3057\u304b\u3082\u4e00\u65e5\u306e\u6700\u5f8c\u306e\u65b9\u306b\u3042\u308b\n\nday0\u4ee5\u5916\u306b\u3082missing day\u306f\u3042\u308b\u304c\u3001pattern\u306f\u306a\u3044  \n\u53d6\u5f15\u6570\u306b\u5fdc\u3058\u3066\u6b20\u640d\u5024\u6570\u3092plot\u2192day2\u3068294\u3092\u9664\u3044\u3066\u5e73\u5747\u7684","34985a20":"\u6700\u77ed\u306etime horizons\u306fresp_1,2,3\u3067\u4fdd\u5b88\u7684\u306a\u6226\u7565\u306f\u30ea\u30bf\u30fc\u30f3\u304c\u4f4e\u3044\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u308b\u3002","2c012ec4":"## 0,import\uff1anumpy,pandas,plottings,dabl,misc,system\n","afe1da6e":"\n## 3,weight\uff1atrade\u306b\u306fweight\u3068resp\u304c\u91cd\u8981\n\u610f\u56f3\u7684\u306bweight=0\u3082\u542b\u3080\n","8e6ddb61":"\u307b\u307c\u3059\u3079\u3066\u306efeatures\u306f\u5c11\u306a\u304f\u3068\u3082\uff11\u3064\u306etag\u3092\u3082\u3061\u30014\u3064\u306etag\u3092\u6301\u3064\u3082\u306e\u3082\u3042\u308b  \n\u552f\u4e00feature_0\u306e\u307f\u5168\u304ftag\u3092\u3082\u305f\u306a\u3044  \n\u305d\u308c\u305e\u308c\u7570\u306a\u308b\u30015(ish)regions\u306b\u5206\u3051\u3089\u308c\u308b   \nish:\u304a\u3088\u305d  \n\n  \n| Region | features | Tags       | missing value? | observations        |\n| ------ | -------- | ---------- | -------------- | ------------------- |\n| 0      | 0        | none       | none           | -1or+1              |\n| 1      | 1...6    | Tag6       |                |                     |\n| 2      | 7...36   | Tag6       |                |                     |\n| 3      | 37...72  | various    |                |                     |\n| 4      | 72...119 | Tag23      |                |                     |\n| 5      | 120...129| Tag28      |                |                     |\n| ------ | -------- | ---------- | -------------- | ------------------- |\n| 2      | 7...36   | Tag6       |                |                     |\n| 2a     | 7...16   | +11        | 7,8 & 11,12    |                     |\n| 2b     | 17...26  | +12        | 17,18 & 21,22  |                     |\n| 2c     | 27...36  | +13        | 27,28 & 31,32  |                     |\n| 3      | 37...72  | various    |                |                     |\n| 3a     | 55...59  | Tag21      |                | All hybrid          |\n| 3b     | 60...68  | Tag22      |                | Cloc+time features? |\n| 4      | 72...119 | Tag23      |                |                     |\n| 4a     | 72...77  | +15&27     | 72 & 74        |                     |\n| 4b     | 78...83  | +17&27     | 78 & 80        |                     |\n| 4c     | 84...89  | +15&25     | 84 & 86        |                     |\n| 4d     | 90...95  | +17&25     | 90 & 92        |                     |\n| 4e     | 96...101 | +15&24     | 96 & 98        |                     |\n| 4f     | 102...107| +17&24     | 102 & 104      |                     |\n| 4g     | 108...113| +15&26     | 108 & 110      |                     |\n| 4h     | 114...119| +17&26     | 114 & 116      |                     |\n| 5      | 120...129| Tag28      |                |                     |\n| 5a     | 120      | +4         | missingdata    |                     |\n| 5b     | 121      | +4&1       | missingdata    |                     |\n| 5c     | 122      | +0         |                |                     |\n| 5d     | 123      | +0&16      |                |                     |\n| 5e     | 124      | +3         |                |                     |\n| 5f     | 125      | +3&16      |                |                     |\n| 5g     | 126      | +2         |                |                     |\n| 5h     | 127      | +2&16      |                |                     |\n| 5i     | 128      | +1         |                |                     |\n| 5j     | 129      | +1&16      |                |                     |","02a864b4":"### \u2463Negative\uff1aTag23\nfeature_73,75,76,77(noisy),79,81(noisy),82  \n\n  \n### t-SNE plots\uff1bt-distributed stohchastic neighbor embedding plots  \n\nt\u5206\u5e03\u306e\u78ba\u7387\u7684\u96a3\u63a5\u57cb\u3081\u3053\u307f\u30d7\u30ed\u30c3\u30c8  \n\n\"Jane Street: t-SNE using RAPIDS cuML\"  \n\u8a08\u7b97\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u5225\u306enotebook\u306b\u4f5c\u3063\u305f","cd2e6f65":"\u4e0a\u306e\u56f3\u306b\u304a\u3044\u3066\u30010.7\u304b\u30891.38\u306e\u9593\u306b\u5927\u304d\u306agap\u304c\u3042\u308b  \n\u3061\u306a\u307f\u306blog2=0.693\u3001log4=1.386\u3060\u304c\u3001\u3053\u308c\u306b\u610f\u5473\u304c\u3042\u308b\u304b\u306f\u4e0d\u660e","b248a3da":"\u3069\u306efeature\u304c\u91cd\u8981\u304b\u2192day0\uff1afeature_39,43,37,5,42  \n\nNote:  \n\u60aa\u3044\u30e2\u30c7\u30eb\u306b\u304a\u3044\u3066\u91cd\u8981\u6027\u304c\u4f4e\u3044\u3068\u307f\u306a\u3055\u308c\u308b(cross-validation score\u304c\u4f4e\u3044)features  \n\u2192\u826f\u3044\u30e2\u30c7\u30eb\u306b\u3068\u3063\u3066\u3068\u3066\u3082\u91cd\u8981\u3068\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b  \n\n\u91cd\u8981\u5ea6\u3092\u8a08\u7b97\u3059\u308b\u524d\u306b\u3001held-out(\u4fdd\u6301\u3055\u308c\u305f)set\u3092\u7528\u3044\u3066  \n(\u3082\u3057\u304f\u306fcross-validation\u3092\u6301\u3061\u3044\u308b\u3068\u3088\u308a\u826f\u304f)\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u529b\u3092\u8a55\u4fa1\u3059\u308b\u3053\u3068\u304c\u5927\u5207    \n  \nPremmutation importance \u306f\u305d\u308c\u81ea\u4f53\u306f\u5185\u5728\u7684\u306afeature\u306e\u4e88\u6e2c\u529b\u3092\u53cd\u6620\u3057\u306a\u3044\u304c\u3001  \n\u3042\u308b\u30e2\u30c7\u30eb\u306b\u304a\u3044\u3066\u305d\u306efeature\u304c\u3069\u308c\u307b\u3069\u91cd\u8981\u304b\u3092\u53cd\u6620\u3057\u3066\u3044\u308b  \nfeature\u306e\u91cd\u8981\u6027\u306e\u672c\u683c\u7684\u306a\u7814\u7a76\u304c\uff08\u307e\u305f\u3001\u305f\u304f\u3055\u3093\u306eCPU\u3092\u7528\u3044\u308b\u306e\u304c\uff09\u91cd\u8981\u306a\u306e\u306f\u8a00\u3046\u307e\u3067\u3082\u306a\u3044  \n\"Feature selection using the Boruta-SHAP package\".\n\u3057\u304b\u3057\u3001\u5168\u4f53\u306efeature\u306e\u91cd\u8981\u6027\u306e\u30e9\u30f3\u30ad\u30f3\u30b0\u306f\u5168\u4f53\u306e\u7269\u8a9e\u3092\u3064\u3065\u308b\u308f\u3051\u3067\u306f\u306a\u3044   \n\"TabNet and interpretability: Jane Street example\"   \n\u305d\u308c\u305e\u308c\u5168\u3066\u306e\u8a08\u7b97\u306b\u304a\u3044\u3066\u3069\u306efeatures\u304c\u91cd\u8981\u304b\u3092\u793a\u3057\u3001  \n\u9759\u7684\u306a\u5168\u4f53\u306e\u30e9\u30f3\u30ad\u30f3\u30b0\u304c\u793a\u3059\u3088\u308a\u3082\u904e\u7a0b\u304c\u30c0\u30a4\u30ca\u30df\u30c3\u30af\u3067\u3042\u308b","f0c95dff":"+1 \u3068-1\u3000\u306f\u5168\u7136\u9055\u3046return\u306e\u52d5\u304d\u3092\u3059\u308b\u3002  \n\"Feature 0, beyond feature 0\" written by NanoMathias a uniform manifold     approximation and projection (UMAP)   \n\u2192feature0\u306f\u4ed6\u306efeatures\u30922\u3064\u306edistributions\u306b\u5206\u3051\u308b \n \nfeature_0\u306e\u5024\u306e\u9055\u3044  \n\u2192feature\u306e2\u3064\u306e\u5206\u5e03\uff1b\u58f2\u8cb7(bid\/ask, long\/short, call\/put)  \n\n\"What is \"feature_0\" ?\"   \n\nLee and Ready 'Tick' model  \n\u500b\u3005\u306e\u53d6\u5f15\u3092\u3001\u65e5\u4e2d\u306e\u53d6\u5f15\u30c7\u30fc\u30bf\u3068\u898b\u7a4d\u3082\u308a\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066  \nmarket buy order\u304bmarket sell order\u304b\u306b\u5206\u985e  \nbuy\u59cb\u307e\u308a\u306e\u53d6\u5f15\u30921\u3068\u3057\u3001sell\u59cb\u307e\u308a\u306e\u53d6\u5f15\u3092-1\u3068\u3059\u308b\n\n(\"Advances in Financial Machine Learning\" by Marcos Lopez de Prado)   \nbuy\u59cb\u307e\u308a\u306e\u53d6\u5f15\u30921\u3068\u3057\u3001sell\u59cb\u307e\u308a\u306e\u53d6\u5f15\u3092-1\u3068\u3059\u308b\n\npt\uff1a\u6642\u9593t=1,...T\u3067\u306eprice b0\u306f\u4efb\u610f  \n  \n\u0394pt > 0 \u306a\u3089bt = 1 (market buy order:buy-initiated trade)  \n\u0394pt < 0 \u306a\u3089bt = -1(market sell order:sell-initiated trade)  \n\u0394pt = 0 \u306a\u3089bt-1 = 0\uff08\u4fa1\u683cp\u304c\u540c\u3058\u3068\u304d\u306f\u4e00\u671f\u524d\u3068\u540c\u3058\uff09  \n\uff08\u65e5\u4e2d\u53d6\u5f15intraday trade \uff06 \u898b\u7a4d\u308aquote\u30c7\u30fc\u30bf\uff09  \n  \ncorrelation matrix\n\u2192feature_0\u3068Tag12,(24)\u306b\u6b63\u306e\u76f8\u95a2\u3001Tag13,(25,27)\u306b\u5f37\u3044\u8ca0\u306e\u76f8\u95a2  \n\u2192feature_37,38,39,40\u4ee5\u5916\u306f\u3059\u3079\u3066resp(\u7279\u306bresp4)\u3068\u76f8\u95a2\u5f37\u3044  \n \n","eec36d08":"0. import\uff1anumpy,pandas,plottings,dabl,dabl,misc,system\n\n1. The train.csv file is big\uff1a\u8a13\u7df4\u7528\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u304c\u5927\u304d\u3044\n\n2. resp(once)\uff1a\u6642\u9593\u306e\u7d4c\u904e\u306b\u4f34\u3046\u5fdc\u7b54\u306e\u7d2f\u7a4d\u5024culmative values\u3092\u307f\u308b\n\n3. weight\uff1atrade\u306b\u306fweight\u3068resp\u304c\u91cd\u8981\n\n4. Cumulative return\uff1a\u7d2f\u7a4ddaily return\uff1dweight * calue of resp\n\n5. Time\uff1a\u5404\u65e5\u306e\u3001ts_id\u306e\u6570\u3092plots \u203b\u5782\u76f4\u7834\u7dda\uff1a85\u65e5\u76ee\u4ed8\u8fd1\u306e\u30e2\u30c7\u30eb\u306e\u4fee\u6b63\uff1f\n\n6. The features\n\n7. The features.csv file\uff1a\u533f\u540d\u5316\u3055\u308c\u305ffeatures\u306b\u95a2\u9023\u3059\u308b\u30e1\u30bf\u30c7\u30fc\u30bf\u3001tag\u306f29\u500b\n\n8. Action(1:\u53d6\u5f15\u3059\u308b(resp=+), 0:\u53d6\u5f15\u3057\u306a\u3044(resp=-)\u3001\u306ebinary(2\u9032)column)\n\n9. The first day (\"day 0\")\uff1amissing data\u306b\u306fpatttern\u304c\u3042\u308b\n\n10. Are there any missing values?\n\n11. Is there any missing data: Days 2 and 294\n\n12. DABL plots (targets: action and resp)\n\n13. Permutation(\u9806\u5e8f) Importance using the Random Forest\n\n14. Is there any correlation between day 100 and day 200?\n\n15. The test data\n\n16. Evaluation\uff1autility score","539f4a3d":"### \u2460Linear\uff1aTag14,18,22 \n* 1\n* 7,9,11,13,15\n* 17,19,21,23,25\n* 18,20,22,24,26\n* 27,29,21,33,35\n* 28,30,32,34,36\n* 84,85,86,87,88\n* 90,91,92,93,94\n* 96,97,98,99,100\n* 102(\u5909\u5316\u306e\u52fe\u914d\u5927),103,104,105,106\n\n* 41,46,47,48,489,50,51,53,54,69,89,95(\u5909\u5316\u306e\u52fe\u914d\u5927),101,107(\u5909\u5316\u306e\u52fe\u914d\u5927),108.110,111,113,114,115,116,117,118,119(\u5909\u5316\u306e\u52fe\u914d\u5927),120,122,124\u3082\u540c\u69d8\n\n### Features 41,42,43(Tag14)","e5e5e6c6":"### \u2462Hybryd\uff1aTag21  \n55,56,57,58,59  "}}