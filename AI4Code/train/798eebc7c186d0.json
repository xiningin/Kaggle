{"cell_type":{"91832007":"code","1af43ecf":"code","612959dd":"code","d1c31fc4":"code","fa41f668":"code","53ea70eb":"code","65b243d8":"code","1e9c8471":"code","15a60c5c":"code","9b8e77eb":"code","03affa78":"code","8ac854cc":"code","df665676":"code","332893ae":"code","c3e6564b":"code","636573f5":"code","dabf5ff1":"code","9bc1de75":"code","adeb9023":"code","6c25d3f7":"code","6abc8560":"code","fb26d209":"code","2d5caecb":"code","1d21bcdb":"code","e5b1301a":"code","9fe970cf":"code","e1f88762":"code","e5ecac5c":"code","51f7293e":"code","5c16e19e":"code","9463501a":"code","d3328669":"code","ca0e5b3c":"code","48e2ff89":"code","1c36e045":"code","879aa1fe":"code","5c3a7039":"code","6383e682":"code","6c8182e4":"code","fffddc32":"code","175b8fe8":"code","d19afec8":"code","3e3c7498":"code","fe300108":"code","3a20584b":"code","99116a4e":"code","2e0ebebc":"code","502d9c85":"code","60148f54":"code","314a6cb1":"code","f9df8256":"code","e9e635a1":"code","3fe3859f":"code","ca7b8907":"code","f1421486":"code","b6dd0bb9":"code","9adf116b":"code","41e07474":"code","07e094e0":"code","84e7633f":"code","333ec655":"code","551e3391":"code","d34630d9":"markdown","b7919160":"markdown","b1299d34":"markdown","b5d09da6":"markdown","4a414f5b":"markdown","7e6f0ec5":"markdown","74a79f53":"markdown","e5bb62e4":"markdown","a6f403eb":"markdown","e8a9aea3":"markdown","3848abef":"markdown","8bf26093":"markdown","69dbb366":"markdown","477f6805":"markdown","801fae94":"markdown","97b0de06":"markdown","e45b24f9":"markdown","876b1e89":"markdown","28ec1c2d":"markdown","8a207d6a":"markdown","f0680d00":"markdown","5384c29d":"markdown","6347c8d9":"markdown","1d8b112f":"markdown","00963f8a":"markdown","a7f19d63":"markdown","8111bca7":"markdown","487b7386":"markdown","eb50a8d9":"markdown","be4ab078":"markdown","062f9392":"markdown","293f243e":"markdown","55f8bc43":"markdown","304c4386":"markdown","dc0c3c28":"markdown","fc33c48b":"markdown","2ffce22f":"markdown","3f027057":"markdown","a0679ba4":"markdown","b18d12e7":"markdown","0c355ed6":"markdown","f0b7d571":"markdown"},"source":{"91832007":"# \u6570\u636e\u6574\u7406\u548c\u5206\u6790\nimport numpy as np\nimport pandas as pd\n\n# \u53ef\u89c6\u5316\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# \u673a\u5668\u5b66\u4e60\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, StratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_curve, auc\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom lightgbm import LGBMClassifier\n\n# \u5ffd\u7565\u8b66\u544a\nimport warnings\nwarnings.filterwarnings(\"ignore\")","1af43ecf":"# \u8bfb\u53d6\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6570\u636e\ntrain_df = pd.read_csv('\/kaggle\/input\/GiveMeSomeCredit\/cs-training.csv', index_col = 0)\ntest_df = pd.read_csv('\/kaggle\/input\/GiveMeSomeCredit\/cs-test.csv', index_col = 0)","612959dd":"train_df.columns.values","d1c31fc4":"train_df.head(5)","fa41f668":"test_df.head(5)","53ea70eb":"# \u67e5\u770b\u8bad\u7ec3\u96c6\u4fe1\u606f\ntrain_df.info()","65b243d8":"# \u67e5\u770b\u6d4b\u8bd5\u96c6\u4fe1\u606f\ntest_df.info()","1e9c8471":"# \u67e5\u770b\u8bad\u7ec3\u96c6\u7edf\u8ba1\u4fe1\u606f\ntrain_df.describe()","15a60c5c":"# \u67e5\u770b\u6d4b\u8bd5\u96c6\u7edf\u8ba1\u4fe1\u606f\ntest_df.describe()","9b8e77eb":"# \u67e5\u770b\u8bad\u7ec3\u96c6\u7f3a\u5931\u503c\u60c5\u51b5\npd.DataFrame({'count':train_df.isnull().sum().values, 'ratio': train_df.isnull().mean() * 100})","03affa78":"# \u67e5\u770b\u6d4b\u8bd5\u96c6\u7f3a\u5931\u503c\u60c5\u51b5\npd.DataFrame({'count':test_df.isnull().sum().values, 'ratio': test_df.isnull().mean() * 100})","8ac854cc":"# MonthlyIncome\u4e3a\u7a7a\u7684\u8bb0\u5f55\u4e2d\uff0cNumberOfDependents\u548cDebtRatio\u503c\u7684\u60c5\u51b5\ntrain_df[train_df['MonthlyIncome'].isnull()][['NumberOfDependents', 'DebtRatio']].describe()","df665676":"# NumberOfDependents\u4e3a\u7a7a\u7684\u8bb0\u5f55\u4e2d\uff0cMonthlyIncome\u548cDebtRatio\u503c\u7684\u60c5\u51b5\ntrain_df[train_df['NumberOfDependents'].isnull()][['MonthlyIncome', 'DebtRatio']].describe()","332893ae":"# \u8bad\u7ec3\u96c6\uff1a\u9ad8DebtRatio\uff08>100\uff09\u4e2d\uff0cMonthlyIncome\u5b57\u6bb5\u4e3a\u7a7a\u7684\u6bd4\u4f8b\ntrain_df[train_df['DebtRatio']>100]['MonthlyIncome'].isnull().sum()\/len(train_df)*100","c3e6564b":"# \u6d4b\u8bd5\u96c6\uff1a\u9ad8DebtRatio\uff08>100\uff09\u4e2d\uff0cMonthlyIncome\u5b57\u6bb5\u4e3a\u7a7a\u7684\u6bd4\u4f8b\ntest_df[test_df['DebtRatio']>100]['MonthlyIncome'].isnull().sum()\/len(test_df)*100","636573f5":"# \u8bad\u7ec3\u96c6\u4e2dMonthlyIncome\u548cNumberOfDependents\u5747\u4e3a\u975e\u7a7a\u7684\u6bd4\u4f8b\ntrain_df[train_df['MonthlyIncome'].isnull()]['NumberOfDependents'].isnull().sum()\/len(train_df)*100","dabf5ff1":"# \u6d4b\u8bd5\u96c6\u4e2dMonthlyIncome\u548cNumberOfDependents\u5747\u4e3a\u975e\u7a7a\u7684\u6bd4\u4f8b\ntest_df[test_df['MonthlyIncome'].isnull()]['NumberOfDependents'].isnull().sum()\/len(test_df)*100","9bc1de75":"# \u9ad8DebtRatio\u4e14MonthlyIncome\u5b57\u6bb5\u975e\u7a7a\u7684\u6570\u636e\u4e2d\uff0cMonthlyIncome\u5b57\u6bb5\u7684\u7edf\u8ba1\u4fe1\u606f\ntrain_df[(train_df['DebtRatio']>100) & (train_df['MonthlyIncome'].notnull())]['MonthlyIncome'].describe()","adeb9023":"# \u4f4eDebtRatio\u4e14MonthlyIncome\u5b57\u6bb5\u975e\u7a7a\u7684\u6570\u636e\u4e2d\uff0cMonthlyIncome\u5b57\u6bb5\u7684\u7edf\u8ba1\u4fe1\u606f\ntrain_df[(train_df['DebtRatio']<100) & (train_df['MonthlyIncome'].notnull())]['MonthlyIncome'].describe()","6c25d3f7":"# \u586b\u5145MonthlyIncome\u548cNumberOfDependents\u7684\u7f3a\u5931\u503c\ntrain_df['MonthlyIncome'].fillna(0, inplace=True)\ntrain_df['NumberOfDependents'].fillna(0, inplace=True)\ntest_df['MonthlyIncome'].fillna(0, inplace=True)\ntest_df['NumberOfDependents'].fillna(0, inplace=True)","6abc8560":"# SeriousDlqin2yrs\u76ee\u6807\u5b57\u6bb5\u4e2d0\u548c1\u7684\u6bd4\u4f8b\ntrain_df['SeriousDlqin2yrs'].value_counts()\/len(train_df)","fb26d209":"# \u67e5\u770bSeriousDlqin2yrs\u5206\u5e03\u56fe\nplt.figure()\nsns.countplot('SeriousDlqin2yrs',data=train_df)","2d5caecb":"train_df['RevolvingUtilizationOfUnsecuredLines'].describe().to_frame().T","1d21bcdb":"train_df[train_df['RevolvingUtilizationOfUnsecuredLines'] > train_df['RevolvingUtilizationOfUnsecuredLines'].quantile(0.99)]['RevolvingUtilizationOfUnsecuredLines'].describe().to_frame().T","e5b1301a":"fig, axes = plt.subplots(1, 2, figsize=(18,6))\nsns.distplot(x = np.array(train_df['RevolvingUtilizationOfUnsecuredLines']), ax = axes[0])\naxes[0].set_title('Histogram Plot of RevolvingUtilizationOfUnsecuredLines')\nsns.boxplot(x = train_df['RevolvingUtilizationOfUnsecuredLines'], ax = axes[1])\naxes[1].set_title('Box Plot of RevolvingUtilizationOfUnsecuredLines')","9fe970cf":"# \u5206\u522b\u8ba1\u7b97\u8bad\u7ec3\u96c6\u4e2dRevolvingUtilizationOfUnsecuredLines\u5b57\u6bb5<1, 1~10, >10\u7684\u8bb0\u5f55\u6240\u5360\u7684\u6bd4\u4f8b\nbelow_1 = train_df[train_df['RevolvingUtilizationOfUnsecuredLines'] < 1]['RevolvingUtilizationOfUnsecuredLines'].count()*100\/len(train_df)\nbet_1_10 = train_df[(train_df['RevolvingUtilizationOfUnsecuredLines'] > 1) & (train_df['RevolvingUtilizationOfUnsecuredLines'] < 10)]['RevolvingUtilizationOfUnsecuredLines'].count() * 100\/len(train_df)\nbeyond_10 = train_df[train_df['RevolvingUtilizationOfUnsecuredLines'] > 10]['RevolvingUtilizationOfUnsecuredLines'].count()*100\/len(train_df)\npd.DataFrame({\"below_1\": below_1, \"bet_1_10\": bet_1_10, \"beyond_10\": beyond_10}, index=[1])","e1f88762":"# \u7ed8\u5236<1, 1~10, >10\u4e09\u6bb5\u7684\u76d2\u56fe\u548c\u76f4\u65b9\u56fe\nfig, axes = plt.subplots(2, 3, figsize=(18,10))\nsns.boxplot(x = train_df[train_df['RevolvingUtilizationOfUnsecuredLines'] < 1]['RevolvingUtilizationOfUnsecuredLines'], ax = axes[0][0])\naxes[0][0].set_title('{}% of Train_Dataset'.format(round(below_1, 2)))\nsns.boxplot(x = train_df[(train_df['RevolvingUtilizationOfUnsecuredLines'] > 1) & (train_df['RevolvingUtilizationOfUnsecuredLines'] < 10)]['RevolvingUtilizationOfUnsecuredLines'], ax = axes[0][1])\naxes[0][1].set_title('{}% of Train_Dataset'.format(round(bet_1_10, 2)))\nsns.boxplot(x = train_df[train_df['RevolvingUtilizationOfUnsecuredLines'] > 10]['RevolvingUtilizationOfUnsecuredLines'], ax = axes[0][2])\naxes[0][2].set_title('{}% of Train_Dataset'.format(round(beyond_10, 2)))\nsns.distplot(x = train_df[train_df['RevolvingUtilizationOfUnsecuredLines'] < 1]['RevolvingUtilizationOfUnsecuredLines'], ax = axes[1][0])\naxes[1][0].set_title('{}% of Train_Dataset'.format(round(below_1, 2)))\nsns.distplot(x = train_df[(train_df['RevolvingUtilizationOfUnsecuredLines'] > 1) & (train_df['RevolvingUtilizationOfUnsecuredLines'] < 10)]['RevolvingUtilizationOfUnsecuredLines'], ax = axes[1][1])\naxes[1][1].set_title('{}% of Train_Dataset'.format(round(bet_1_10, 2)))\nsns.distplot(x = train_df[train_df['RevolvingUtilizationOfUnsecuredLines'] > 10]['RevolvingUtilizationOfUnsecuredLines'], ax = axes[1][2])\naxes[1][2].set_title('{}% of Train_Dataset'.format(round(beyond_10, 2)))\n","e5ecac5c":"train_df[train_df['RevolvingUtilizationOfUnsecuredLines'] > 10]['RevolvingUtilizationOfUnsecuredLines'].describe().describe().to_frame().T","51f7293e":"train_df[train_df['RevolvingUtilizationOfUnsecuredLines'] > 10]['RevolvingUtilizationOfUnsecuredLines'].count()\/len(train_df)*100, test_df[test_df['RevolvingUtilizationOfUnsecuredLines'] > 10]['RevolvingUtilizationOfUnsecuredLines'].count()\/len(test_df)*100","5c16e19e":"fig, axes = plt.subplots(2, 2, figsize=(15,10))\nsns.boxplot(x= train_df['age'], ax = axes[0][0])\naxes[0][0].set_title('Train_Dataset')\nsns.boxplot(x= test_df['age'], ax = axes[0][1])\naxes[0][1].set_title('Test_Dataset')\nsns.distplot(x= train_df['age'], ax = axes[1][0])\naxes[1][0].set_title('Train_Dataset')\nsns.distplot(x= train_df['age'], ax = axes[1][1])\naxes[1][1].set_title('Test_Dataset')","9463501a":"len(train_df[train_df['age'] == 0]), len(train_df[train_df['age'] < 18])","d3328669":"train_df['DebtRatio'].describe().to_frame().T","ca0e5b3c":"fig, axes = plt.subplots(1, 2, figsize=(18,6))\nsns.distplot(x = np.array(train_df['DebtRatio']),\n             ax = axes[0])\naxes[0].set_title('Histogram Plot of Debt Ratio')\nsns.boxplot(x = train_df['DebtRatio'], ax = axes[1])\naxes[1].set_title('Box Plot of Debt Ratio')","48e2ff89":"pd.DataFrame({'below 1': train_df[train_df['DebtRatio'] <= 1]['DebtRatio'].count()*100\/len(train_df),\n             'between 1 - 10': train_df[(train_df['DebtRatio'] > 1) &\n                                        (train_df['DebtRatio'] <=10)]['DebtRatio'].count()*100\/len(train_df),\n             'beyond 10': train_df[train_df['DebtRatio'] > 10]['DebtRatio'].count()*100\/len(train_df)}, index = [1])","1c36e045":"train_df[(train_df['DebtRatio'] > 1) & (train_df['DebtRatio'] <=10)]['DebtRatio'].describe().to_frame().T","879aa1fe":"train_df[train_df['DebtRatio'] > 10]['DebtRatio'].describe().describe().to_frame().T","5c3a7039":"fig, axes = plt.subplots(2, 2, figsize=(18,6))\nsns.histplot(x = train_df[train_df['MonthlyIncome'] < 1000]['MonthlyIncome'], ax = axes[0,0])\nsns.histplot(x = train_df[(train_df['MonthlyIncome'] > 1000) & \n                         (train_df['MonthlyIncome'] <= 10000)]['MonthlyIncome'], ax = axes[0,1])\nsns.histplot(x = train_df[(train_df['MonthlyIncome'] > 10000) & \n                         (train_df['MonthlyIncome'] <= 20000)]['MonthlyIncome'], ax = axes[1,0])\nsns.histplot(x = train_df[(train_df['MonthlyIncome'] > 20000) & \n                         (train_df['MonthlyIncome'] <= 50000)]['MonthlyIncome'], ax = axes[1,1])","6383e682":"fig, axes = plt.subplots(1, 2, figsize=(18,6))\nsns.histplot(x = train_df[(train_df['MonthlyIncome'] > 50000) &\n                         (train_df['MonthlyIncome'] <= 200000)]['MonthlyIncome'], ax=axes[0])\nsns.histplot(x = train_df[(train_df['MonthlyIncome'] > 200000) & \n                         (train_df['MonthlyIncome'] <= 3000000)]['MonthlyIncome'], ax=axes[1])","6c8182e4":"fig, axes = plt.subplots(1, 2, figsize=(18,6))\nsns.histplot(x = train_df['NumberOfOpenCreditLinesAndLoans'], binwidth=1, ax = axes[0])\nsns.histplot(x = test_df['NumberOfOpenCreditLinesAndLoans'], binwidth=1, ax = axes[1])","fffddc32":"fig, axes = plt.subplots(1, 2, figsize=(18,6))\nsns.histplot(x = train_df['NumberRealEstateLoansOrLines'], binwidth=1, ax = axes[0])\nsns.histplot(x = test_df['NumberRealEstateLoansOrLines'], binwidth=1, ax = axes[1])","175b8fe8":"train_df['NumberRealEstateLoansOrLines'].value_counts()","d19afec8":"due_30_59 = pd.DataFrame(train_df['NumberOfTime30-59DaysPastDueNotWorse'].value_counts()).rename(columns = {'NumberOfTime30-59DaysPastDueNotWorse':'30-59days'})\ndue_60_89 =  pd.DataFrame(train_df['NumberOfTime60-89DaysPastDueNotWorse'].value_counts()).rename(columns = {'NumberOfTime60-89DaysPastDueNotWorse':'60-89days'})\ndue_90 = pd.DataFrame(train_df['NumberOfTimes90DaysLate'].value_counts()).rename(columns = {'NumberOfTimes90DaysLate':'90days'})\npd.concat([due_30_59, due_60_89, due_90], axis = 1)","3e3c7498":"train_df[train_df['NumberOfTime30-59DaysPastDueNotWorse'] > 17][['NumberOfTime30-59DaysPastDueNotWorse',\n                                                                'NumberOfTime60-89DaysPastDueNotWorse',\n                                                                'NumberOfTimes90DaysLate']]","fe300108":"train_df[train_df['NumberOfTime30-59DaysPastDueNotWorse'] > 17]['SeriousDlqin2yrs'].mean()*100","3a20584b":"fig, axes = plt.subplots(1, 2, figsize=(18,6))\nsns.histplot(x = train_df['NumberOfDependents'], binwidth=1, ax = axes[0])\nsns.histplot(x = test_df['NumberOfDependents'], binwidth=1, ax = axes[1])","99116a4e":"# \u5220\u9664RevolvingUtilizationOfUnsecuredLines\u8d85\u8fc710\u7684\u8bb0\u5f55\ntrain_df = train_df[train_df['RevolvingUtilizationOfUnsecuredLines'] <= 10]\n\n# \u5220\u9664age\u4e3a0\u7684\u8bb0\u5f55\ntrain_df = train_df[train_df['age'] > 0]\n\n# NumberOfTime30-59DaysPastDueNotWorse, NumberOfTime60-89DaysPastDueNotWorse, NumberOfTimes90DaysLate\ntrain_df = train_df[train_df['NumberOfTime30-59DaysPastDueNotWorse'] < 90] \ntrain_df = train_df[train_df['NumberOfTimes90DaysLate'] < 90] \ntrain_df = train_df[train_df['NumberOfTime60-89DaysPastDueNotWorse'] < 90] ","2e0ebebc":"# \u68c0\u67e5\u53d8\u91cf\u4e4b\u95f4\u7684\u76f8\u5173\u6027\ncorr = train_df.corr()\nplt.subplots(figsize=(13, 10))\nsns.heatmap(corr, annot=True, fmt='.2g')","502d9c85":"# \u8bad\u7ec3\u96c6\/\u6d4b\u8bd5\u96c6\u5212\u5206\nx = train_df.drop(['SeriousDlqin2yrs'], axis=1)\ny = train_df['SeriousDlqin2yrs']\nx_train, x_test, y_train, y_test = train_test_split(x, y, random_state=42)","60148f54":"# \u5199\u51fa\u7ed8\u56feauc\u66f2\u7ebf\u51fd\u6570\ndef plot_roc_curve(fpr, tpr, label=None):\n    plt.figure(figsize=(8,6))\n    plt.plot(fpr, tpr, linewidth=2, label=label)\n    plt.plot([0,1],[0,1], \"k--\") # \u753b\u76f4\u7ebf\u505a\u53c2\u8003\n    plt.axis([0,1,0,1])\n    plt.xlabel(\"False Positive Rate\")\n    plt.ylabel(\"True Positive rate\")","314a6cb1":"# KNN\nknn = KNeighborsClassifier(n_neighbors=9)\nknn.fit(x_train, y_train)\nknn_pred = knn.predict_proba(x_test)[:,1]\nfpr, tpr, _ = roc_curve(y_test, knn_pred)\nknn_roc_auc = auc(fpr,tpr)\nknn_cv_roc_auc = cross_val_score(knn, x_train, y_train, scoring='roc_auc', cv=10).mean()\nprint ('LogisticRegression AUC Score :', knn_roc_auc)\nprint('LogisticRegression CV AUC Score :', knn_cv_roc_auc)\nplot_roc_curve(fpr,tpr)","f9df8256":"# \u968f\u673a\u68ee\u6797\nrfc = RandomForestClassifier(random_state=42)\nrfc.fit(x_train,y_train)\nrfc_pred = rfc.predict_proba(x_test)[:,1]\nfpr, tpr, _ = roc_curve(y_test, rfc_pred)\nrfc_roc_auc = auc(fpr,tpr)\nrfc_cv_roc_auc = cross_val_score(rfc, x_train, y_train, scoring='roc_auc', cv=10).mean()\nplot_roc_curve(fpr,tpr)\nprint ('RandomForestClassifier AUC Score :', rfc_roc_auc)\nprint('RandomForestClassifier CV AUC Score :', rfc_cv_roc_auc)","e9e635a1":"xgbc = XGBClassifier(max_depth=5,eval_metric='auc',objective='binary:logistic')\nxgbc.fit(x_train, y_train)\n# make predictions for test data\nxgbc_pred = xgbc.predict_proba(x_test)[:,1]\n# evaluate predictions\nfpr, tpr, _ = roc_curve(y_test, xgbc_pred)\nxgbc_roc_auc = auc(fpr,tpr)\nxgbc_cv_roc_auc = cross_val_score(xgbc, x_train, y_train, scoring='roc_auc', cv=10).mean()\nplot_roc_curve(fpr,tpr)\nprint ('XGBClassifier AUC Score :', xgbc_roc_auc)\nprint('XGBClassifier CV AUC Score :', xgbc_cv_roc_auc)","3fe3859f":"gbc = GradientBoostingClassifier()\ngbc.fit(x_train,y_train)\ngbc_proba = gbc.predict_proba(x_test)[:,1]\nfpr, tpr, _ = roc_curve(y_test, gbc_proba)\ngbc_roc_auc = auc(fpr,tpr)\ngbc_cv_roc_auc = cross_val_score(gbc, x_train, y_train, scoring='roc_auc', cv=10).mean()\nprint ('GradientBoostingClassifier AUC Score :', gbc_roc_auc)\nprint('GradientBoostingClassifier CV AUC Score :', gbc_cv_roc_auc)\nplot_roc_curve(fpr,tpr)","ca7b8907":"lgbmc = LGBMClassifier()\nlgbmc.fit(x_train,y_train)\nlgbmc_proba = lgbmc.predict_proba(x_test)[:,1]\nfpr, tpr, _ = roc_curve(y_test, lgbmc_proba)\nlgbmc_roc_auc = auc(fpr,tpr)\nlgbmc_cv_roc_auc = cross_val_score(lgbmc, x_train, y_train, scoring='roc_auc', cv=10).mean()\nprint ('LGBMClassifier AUC Score :', lgbmc_roc_auc)\nprint('LGBMClassifier CV AUC Score :', lgbmc_cv_roc_auc)\nplot_roc_curve(fpr,tpr)","f1421486":"# \u5bf9\u6bd4\u5404\u4e2a\u6a21\u578b\u7684\u51c6\u786e\u7387\nmodels = pd.DataFrame({'Model': ['KNN', 'RandomForest', 'XGBoost', 'GradientBoosting', 'LightGBM'], \n                        'AUC' : [knn_roc_auc, rfc_roc_auc, xgbc_roc_auc, gbc_roc_auc, lgbmc_roc_auc], \n                        'CV AUC' : [knn_cv_roc_auc, rfc_cv_roc_auc, xgbc_cv_roc_auc, gbc_cv_roc_auc, lgbmc_cv_roc_auc]})\nmodels.sort_values(by='AUC', ascending=True)","b6dd0bb9":"'''\n# \u9996\u5148\uff0c\u8c03\u6574max_depth \u548c num_leaves\uff0c\u8fd9\u4e24\u4e2a\u53c2\u6570\u57fa\u672c\u53ef\u4ee5\u786e\u5b9a\u6811\u7684\u5927\u5c0f\u53ca\u590d\u6742\u5ea6\nparameters1 = {\n    'max_depth': [4,6,8],\n    'num_leaves': [10,20,30,40],\n}\ngsearch1 = GridSearchCV(LGBMClassifier(), param_grid=parameters1, scoring='roc_auc', cv=10)\ngsearch1.fit(x_train, y_train)\nprint('\u53c2\u6570\u7684\u6700\u4f73\u53d6\u503c:{0}'.format(gsearch1.best_params_))\nprint('\u6700\u4f73\u6a21\u578b\u5f97\u5206:{0}'.format(gsearch1.best_score_))\nprint(gsearch1.cv_results_['mean_test_score'].mean())\n'''","9adf116b":"'''\n# \u8c03\u6574min_data_in_leaf \u548c min_sum_hessian_in_leaf,\u8be5\u6b65\u9aa4\u4e3b\u8981\u662f\u9632\u6b62\u6811\u8fc7\u62df\u5408\nparameters2 = {\n    'min_child_samples': [18,19,20,21,22], \n    'min_child_weight': [0.001,0.002]\n}\ngsearch = GridSearchCV(LGBMClassifier(max_depth=6, num_leaves=20), param_grid=parameters2, scoring='roc_auc', cv=10)\ngsearch.fit(x_train, y_train)\nprint('\u53c2\u6570\u7684\u6700\u4f73\u53d6\u503c:{0}'.format(gsearch.best_params_))\nprint('\u6700\u4f73\u6a21\u578b\u5f97\u5206:{0}'.format(gsearch.best_score_))\nprint(gsearch.cv_results_['mean_test_score'].mean())\n'''","41e07474":"'''\n# \u8c03\u6574bagging_fraction\u548cbagging_freq.\n# bagging_fraction\u76f8\u5f53\u4e8esubsample\u6837\u672c\u91c7\u6837\uff0c\u53ef\u4ee5\u4f7fbagging\u66f4\u5feb\u7684\u8fd0\u884c\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u964d\u62df\u5408\u3002bagging_freq\u9ed8\u8ba40\uff0c\u8868\u793abagging\u7684\u9891\u7387\uff0c0\u610f\u5473\u7740\u6ca1\u6709\u4f7f\u7528bagging\uff0ck\u610f\u5473\u7740\u6bcfk\u8f6e\u8fed\u4ee3\u8fdb\u884c\u4e00\u6b21bagging\u3002\nparameters3 = {\n     'bagging_fraction': [0.8,0.9,1],\n     'bagging_freq': [2,3,4],\n}\ngsearch = GridSearchCV(LGBMClassifier(max_depth=6, num_leaves=20, min_child_samples=20, min_child_weight=0.001), param_grid=parameters3, scoring='roc_auc', cv=10)\ngsearch.fit(x_train, y_train)\nprint('\u53c2\u6570\u7684\u6700\u4f73\u53d6\u503c:{0}'.format(gsearch.best_params_))\nprint('\u6700\u4f73\u6a21\u578b\u5f97\u5206:{0}'.format(gsearch.best_score_))\nprint(gsearch.cv_results_['mean_test_score'].mean())\n'''","07e094e0":"'''\n# \u672c\u6b65\u9aa4\u901a\u8fc7L1\u6b63\u5219\u5316\u548cL2\u6b63\u5219\u5316\u964d\u4f4e\u8fc7\u62df\u5408\u3002\nparameters4 = {\n    'lambda_l1': [0, 0.1, 0.4, 0.5, 0.6],\n    'lambda_l2': [0, 10, 15, 35, 40],\n}\ngsearch = GridSearchCV(LGBMClassifier(max_depth=6, num_leaves=20, min_child_samples=20, min_child_weight=0.001, bagging_fraction=0.9, bagging_freq=3), param_grid=parameters4, scoring='roc_auc', cv=10)\ngsearch.fit(x_train, y_train)\nprint('\u53c2\u6570\u7684\u6700\u4f73\u53d6\u503c:{0}'.format(gsearch.best_params_))\nprint('\u6700\u4f73\u6a21\u578b\u5f97\u5206:{0}'.format(gsearch.best_score_))\nprint(gsearch.cv_results_['mean_test_score'].mean())\n'''","84e7633f":"'''\n# cat_smooth\u4e3a\u8bbe\u7f6e\u6bcf\u4e2a\u7c7b\u522b\u62e5\u6709\u6700\u5c0f\u7684\u4e2a\u6570\uff0c\u4e3b\u8981\u7528\u4e8e\u53bb\u566a\u3002\nparameters5 = {\n     'cat_smooth': [0,10,20],\n}\ngsearch = GridSearchCV(LGBMClassifier(max_depth=6, num_leaves=20, min_child_samples=20, min_child_weight=0.001, bagging_fraction=0.9, bagging_freq=3, lambda_l1=0.6, lambda_l2=10), param_grid=parameters5, scoring='roc_auc', cv=10)\ngsearch.fit(x_train, y_train)\nprint('\u53c2\u6570\u7684\u6700\u4f73\u53d6\u503c:{0}'.format(gsearch.best_params_))\nprint('\u6700\u4f73\u6a21\u578b\u5f97\u5206:{0}'.format(gsearch.best_score_))\nprint(gsearch.cv_results_['mean_test_score'].mean())\n'''","333ec655":"final_model = LGBMClassifier(max_depth=6, num_leaves=20, min_child_samples=20, min_child_weight=0.001, bagging_fraction=0.9, bagging_freq=3, lambda_l1=0.6, lambda_l2=10, cat_smooth=10)\nfinal_model.fit(x_train, y_train)\nfinal_predict_y = final_model.predict_proba(x_test)[:,1]\n\nfpr, tpr, _ = roc_curve(y_test, final_predict_y)\nfinal_model_roc_auc = auc(fpr,tpr)\nfinal_model_cv_roc_auc = cross_val_score(final_model, x_train, y_train, scoring='roc_auc', cv=10).mean()\nprint ('After GridSearchCV LGBMClassifier AUC Score :', final_model_roc_auc)\nprint ('After GridSearchCV LGBMClassifier CV AUC Score :', final_model_cv_roc_auc)\nplot_roc_curve(fpr,tpr)","551e3391":"X_test = test_df.drop(['SeriousDlqin2yrs'],axis=1)\nY_test = final_model.predict_proba(X_test)[:,1]\nsubmission = pd.DataFrame({'ID': np.arange(1, len(X_test)+1), 'Probability': Y_test})\nsubmission.to_csv(\"submission.csv\", index=False)\nsubmission","d34630d9":"# 5. \u8c03\u53c2\u3001\u5efa\u6a21\u3001\u9884\u6d4b\u3001\u6c42\u89e3\u95ee\u9898","b7919160":"\u53ef\u4ee5\u770b\u51fa\u5206\u5e03\u6781\u4e0d\u5747\u5300\uff0c\u6240\u4ee5\u5206\u6bb5\u67e5\u770b\u6570\u636e\u60c5\u51b5","b1299d34":"# 2. \u83b7\u53d6\u6570\u636e","b5d09da6":"### DebtRatio","4a414f5b":"### \u7f3a\u5931\u503c\u5904\u7406","7e6f0ec5":"### \u5bfc\u5305","74a79f53":"### NumberOfOpenCreditLinesAndLoans","e5bb62e4":"\u7ecf\u53c2\u6570\u4f18\u5316\u540e\u7684lightGBM\u76f8\u6bd4\u539f\u59cb\u6a21\u578b\uff0cAUC\u7ea6\u63d0\u9ad8\u4e860.24%, CV AUC\u7ea6\u63d0\u9ad8\u4e860.26%","a6f403eb":"### age","e8a9aea3":"DebtRatio\u89c2\u5bdf\u7ed3\u679c\n* \u4ecb\u4e8e0\u548c1\u4e4b\u95f4\u7684\u503c\u7ea6\u536076%\n* \u4ecb\u4e8e1\u548c10\u4e4b\u95f4\u7684\u503c\u7ea6\u53604%\n* \u8d85\u8fc710\u7684\u503c\u7ea6\u536019%\uff0c\u5e76\u4e14\u6570\u503c\u8f83\u5927\uff08\u4e2d\u4f4d\u6570\u4e3a2167\uff09\uff0c\u53ef\u4ee5\u770b\u505a\u5bfc\u81f4\u8be5\u7279\u5f81\u503e\u659c\u7684\u5f02\u5e38\u503c\u3002\u4f46\u6709\u65f6\u5019\u8d1f\u503a\u7387\u53ef\u80fd\u4f1a\u975e\u5e38\u9ad8\uff0c\u53ef\u4ee5\u5c06\u5176\u770b\u4f5c\u7279\u4f8b\uff0c\u4e0d\u505a\u5904\u7406","3848abef":"### \u5feb\u901f\u6d4f\u89c8\u6570\u636e\u96c6\u4fe1\u606f","8bf26093":"|Variable Name|Description|Type|\n|:-----------|:-----------|----|\n|SeriousDlqin2yrs|Person experienced 90 days past due delinquency or worse(\u903e\u671f90\u5929\u6216\u66f4\u4e25\u91cd\u7684\u4eba\u5458)|Y\/N|\n|RevolvingUtilizationOfUnsecuredLines|Total balance on credit cards and personal lines of credit except real estate and no installment debt like car loans divided by the sum of credit limits(\u4fe1\u7528\u5361\u548c\u4e2a\u4eba\u4fe1\u7528\u989d\u5ea6\u7684\u603b\u4f59\u989d\uff08\u4e0d\u52a8\u4ea7\u548c\u6c7d\u8f66\u8d37\u6b3e\u7b49\u65e0\u5206\u671f\u4ed8\u6b3e\u503a\u52a1\u9664\u5916\uff09\u9664\u4ee5\u4fe1\u7528\u989d\u5ea6\u4e4b\u548c)|percentage|\n|age|Age of borrower in years(\u501f\u6b3e\u4eba\u7684\u5e74\u9f84\uff08\u4ee5\u5e74\u8ba1\uff09)|integer\n|NumberOfTime30-59DaysPastDueNotWorse|Number of times borrower has been 30-59 days past due but no worse in the last 2 years.(\u501f\u6b3e\u4eba\u903e\u671f30-59\u5929\u7684\u6b21\u6570\uff0c\u4f46\u5728\u8fc7\u53bb2\u5e74\u4e2d\u6ca1\u6709\u66f4\u5dee\u7684\u4fe1\u7528\u8bb0\u5f55)|integer\n|DebtRatio|Monthly debt payments, alimony,living costs divided by monthy gross income(\u6bcf\u6708\u503a\u52a1\u3001\u8d61\u517b\u8d39\u3001\u751f\u6d3b\u4e4b\u548c\u9664\u4ee5\u6bcf\u6708\u603b\u6536\u5165)|percentage\n|MonthlyIncome|Monthly income(\u6708\u6536\u5165)|real\n|NumberOfOpenCreditLinesAndLoans|Number of Open loans (installment like car loan or mortgage) and Lines of credit (e.g. credit cards)(\u5f00\u653e\u8d37\u6b3e\u6570\u91cf\uff08\u6c7d\u8f66\u8d37\u6b3e\u6216\u62b5\u62bc\u8d37\u6b3e\uff09\u548c\u4fe1\u7528\u989d\u5ea6\uff08\u5982\u4fe1\u7528\u5361\uff09)|integer\n|NumberOfTimes90DaysLate|Number of times borrower has been 90 days or more past due.(\u501f\u6b3e\u4eba\u903e\u671f90\u5929\u6216\u4ee5\u4e0a\u7684\u6b21\u6570)|integer\n|NumberRealEstateLoansOrLines|Number of mortgage and real estate loans including home equity lines of credit(\u62b5\u62bc\u548c\u623f\u5730\u4ea7\u8d37\u6b3e\u6570\u91cf\uff0c\u5305\u62ec\u623f\u5c4b\u51c0\u503c\u4fe1\u8d37\u989d\u5ea6)|integer\n|NumberOfTime60-89DaysPastDueNotWorse|Number of times borrower has been 60-89 days past due but no worse in the last 2 years.(\u501f\u6b3e\u4eba\u903e\u671f60-89\u5929\u7684\u6b21\u6570\uff0c\u4f46\u5728\u8fc7\u53bb2\u5e74\u4e2d\u6ca1\u6709\u66f4\u5dee\u7684\u4fe1\u7528\u8bb0\u5f55)|integer\n|NumberOfDependents|Number of dependents in family excluding themselves (spouse, children etc.)(\u5bb6\u4eba\u4e2d(\u4e0d\u5305\u62ec\u81ea\u5df1)\u53d7\u629a\u517b\u4eba\u4eba\u6570\uff08\u914d\u5076\u3001\u5b50\u5973\u7b49\uff09)|integer\n","69dbb366":"### NumberOfDependents","477f6805":"# 6. \u63d0\u4ea4\u7ed3\u679c","801fae94":"# 0. \u6d41\u7a0b\n1. \u5b9a\u4e49\u95ee\u9898\n2. \u83b7\u53d6\u8bad\u7ec3\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e\n3. \u6570\u636e\u63a2\u7d22\u4e0e\u6570\u636e\u9884\u5904\u7406\n4. \u6a21\u578b\u9009\u62e9\n5. \u8c03\u53c2\u3001\u5efa\u6a21\u3001\u9884\u6d4b\u3001\u6c42\u89e3\u95ee\u9898\n6. \u63d0\u4ea4\u7ed3\u679c","97b0de06":"\u5c06\u786e\u5b9a\u7684\u6700\u4f73\u53c2\u6570\u53d6\u503c\u4ee3\u5165\u6a21\u578b\uff0c\u8fdb\u884c\u8bad\u7ec3","e45b24f9":"NumberRealEstateLoansOrLines\u89c2\u5bdf\u7ed3\u679c\n* \u672a\u53d1\u73b0\u5f02\u5e38","876b1e89":"\u63a5\u4e0b\u6765\u9010\u4e2a\u7279\u5f81\u89c2\u5bdf","28ec1c2d":"* \u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u4e2dMonthlyIncome\u3001NumberOfDependents\u4e24\u4e2a\u7279\u5f81\u5206\u522b\u6709\u7ea620%\u548c2.6%\u7684\u7f3a\u5931\u503c\n* MonthlyIncome\u7279\u5f81\u7684\u7f3a\u5931\u503c\u6570\u91cf\u8f83\u591a\uff0c\u4e0d\u80fd\u76f4\u63a5\u5220\u53bb\uff0c\u9700\u8981\u627e\u5230\u5408\u7406\u7684\u586b\u5145\u65b9\u6cd5\n* MonthlyIncome\u548cNumberOfDependents\u7279\u5f81\u4e0eDebtRatio\u7279\u5f81\u53ef\u80fd\u5b58\u5728\u4e00\u5b9a\u5173\u7cfb\uff0c\u56e0\u4e3aDebtRatio\u5b57\u6bb5\u7b49\u4e8e\u6bcf\u6708\u503a\u52a1\u3001\u8d61\u517b\u8d39\u3001\u751f\u6d3b\u4e4b\u548c\u9664\u4ee5\u6bcf\u6708\u603b\u6536\u5165\u3002\u53ef\u4ee5\u89c2\u5bdf\u4e00\u4e0b\u4e09\u4e2a\u7279\u5f81\u5206\u5e03\u7684\u7279\u70b9","8a207d6a":"MonthlyIncome\u89c2\u5bdf\u7ed3\u679c\n* \u672a\u53d1\u73b0\u5f02\u5e38","f0680d00":"# 4. \u6a21\u578b\u9009\u62e9","5384c29d":"### \u521d\u6b65\u89c2\u5bdf\u7ed3\u679c\n* \u8bad\u7ec3\u96c6\u5305\u542b150,000\u6761\u8bb0\u5f55\uff0c\u6d4b\u8bd5\u96c6\u5305\u542b101,503\u6761\u8bb0\u5f55 \n* **\u7f3a\u5931\u503c**\uff1a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u4e2dMonthlyIncome\u548cNumberOfDependents\u4e24\u5b57\u6bb5\u5b58\u5728\u7f3a\u5931\u503c\n* **\u5f02\u5e38\u503c**\n    * \u8bad\u7ec3\u96c6\u4e2d\u5e74\u9f84\u51fa\u73b0\u4e860\u5c81\uff0c\u4e0d\u5408\u7406\n    * RevolvingUtilizationOfUnsecuredLines, NumberOf-Time30-59DaysPastDueNotWorse, NumberOfTime60-89DaysPastDueNotWorse, NumberOfTimes90DaysLate\u7b49\u7279\u5f81\u7684max\u503c\u4e0e75%\u7684\u503c\u5dee\u8ddd\u8f83\u5927\uff0c\u53ef\u80fd\u662f\u5206\u5e03\u4e0d\u5747\uff0c\u4e5f\u53ef\u80fd\u5b58\u5728\u5f02\u5e38\u503c\uff0c\u540e\u7eed\u9700\u8981\u6392\u67e5","6347c8d9":"\u7efc\u5408\u4ee5\u4e0a\uff0c\u6211\u4eec\u5bf9\u6570\u636e\u96c6\u7684\u5f02\u5e38\u503c\u8fdb\u884c\u5904\u7406","1d8b112f":"# 3. \u6570\u636e\u63a2\u7d22\u4e0e\u6570\u636e\u9884\u5904\u7406","00963f8a":"* \u5bf9\u6bd4\u5404\u6a21\u578b\u5728\u8bad\u7ec3\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u548c10\u6298\u4ea4\u53c9\u9a8c\u8bc1\u7684\u51c6\u786e\u7387\u53ef\u4ee5\u53d1\u73b0\uff0cLightGBM\u548cGradientBoosting\u7684\u62df\u5408\u80fd\u529b\u5f3a\u4e8e\u5176\u4ed6\u5206\u7c7b\u7b97\u6cd5\uff0c\u5e76\u4e14LightGBM\u7684\u901f\u5ea6\u6bd4GradientBoosting\u8981\u5feb\u5f88\u591a\u3002KNN\u7684\u8868\u73b0\u5c24\u5176\u5dee\uff0c\u56e0\u4e3a\u6570\u636e\u96c6\u5b58\u5728\u6837\u672c\u4e0d\u5747\u8861\u95ee\u9898,\u5c11\u6570\u7c7b\u5206\u7c7b\u7cbe\u5ea6\u4e0d\u9ad8\u3002\n* \u57fa\u4e8e\u6027\u80fd\u548c\u6548\u7387\u4e24\u65b9\u9762\u7684\u8003\u8651\uff0c\u6211\u4eec\u9009\u62e9LightGBM\u8fdb\u884c\u8c03\u53c2\uff0c\u4f5c\u4e3a\u6700\u7ec8\u7684\u9884\u6d4b\u6a21\u578b\u3002","a7f19d63":"#### \u5904\u7406MonthlyIncome\u7684\u7f3a\u5931\u503c\n* MonthlyIncome\u7f3a\u5931\u7684\u8bb0\u5f55\u4e2d\uff0cDebtRatio\u8f83\u9ad8\uff08\u4e2d\u4f4d\u65701159\uff09\n* \u9ad8DebtRatio\u501f\u6b3e\u4eba\u8bb0\u5f55\u7684\u7edf\u8ba1\u4fe1\u606f\u663e\u793a\uff0c\u8fd9\u4e9b\u501f\u6b3e\u4eba\u7684MonthlyIncome\u5927\u591a\u4e3a0\u6216\u8f83\u5c0f\u503c\uff08\u4e2d\u4f4d\u6570\u4e3a0\uff0c\u4e0b\u56db\u5206\u4f4d\u6570\u4e3a1\uff09\n* \u8fd9\u53ef\u80fd\u610f\u5473\u7740MonthlyIncome\u8bb0\u5f55\u7f3a\u5931\u7684\u501f\u6b3e\u4eba\u4f1a\u6545\u610f\u5c06\u6b64\u680f\u7559\u7a7a\uff0c\u56e0\u4e3a\u4ed6\u4eec\u6ca1\u6709\u6536\u5165\n* \u56e0\u6b64\uff0c\u5904\u7406\u6b64\u7f3a\u5931\u503c\u7684\u6700\u4f73\u65b9\u6cd5\u662f\u5c06\u5176\u66ff\u6362\u4e3a0","8111bca7":"#### \u5904\u7406NumberOfDependents\u7684\u7f3a\u5931\u503c\n* \u7f3a\u5c11NumberOfDependents\u7684\u8bb0\u5f55\u540c\u65f6\u4e5f\u7f3a\u5c11MonthlyIncome\u7684\u8bb0\u5f55\uff0c\u8fd9\u8868\u660e\uff0c\u5c06MonthlyIncome\u7559\u7a7a\u7684\u540c\u4e00\u7ec4\u501f\u6b3e\u4eba\u4e5f\u4f1a\u5c06NumberOfDependents\u5b57\u6bb5\u7559\u7a7a\n* MonthlyIncome\u7f3a\u5931\u7684\u501f\u6b3e\u4eba\u8bb0\u5f55\u7684\u7edf\u8ba1\u4fe1\u606f\u663e\u793a\uff0c\u8fd9\u4e9b\u501f\u6b3e\u4eba\u7684NumberOfDependents\u901a\u5e38\u4e5f\u4e3a0\uff0825%\uff0c50%\uff0c75%\u5747\u4e3a0\uff09\u3002\u8fd9\u7c7b\u6536\u5165\u5f88\u5c11\u751a\u81f3\u6ca1\u6709\u6536\u5165\u7684\u501f\u6b3e\u4eba\u6ca1\u6709\u5bb6\u5c5e\uff0c\u662f\u5408\u4e4e\u903b\u8f91\u7684\n* \u56e0\u6b64\uff0c\u5904\u7406\u6b64\u7f3a\u5931\u503c\u7684\u6700\u4f73\u65b9\u6cd5\u662f\u5c06\u5176\u66ff\u6362\u4e3a0","487b7386":"### \u6570\u636e\u96c6\u4e2d\u5305\u542b\u7684\u7279\u5f81\u53ca\u542b\u4e49","eb50a8d9":"### NumberOfTime30-59DaysPastDueNotWorse, NumberOfTime60-89DaysPastDueNotWorse, NumberOfTimes90DaysLate","be4ab078":"NumberOfDependents\u89c2\u5bdf\u7ed3\u679c\n* \u672a\u53d1\u73b0\u5f02\u5e38","062f9392":"SeriousDlqin2yrs\u89c2\u5bdf\u7ed3\u679c\n* \u5b58\u5728\u7c7b\u522b\u4e0d\u5747\u8861\u7684\u95ee\u9898\uff0c\u8d1f\u6837\u672c\u548c\u6b63\u6837\u672c\u7684\u6bd4\u4f8b\u7ea6\u4e3a14:1\uff0c\u53ef\u80fd\u4f1a\u5f71\u54cd\u4e00\u4e9b\u6a21\u578b\u7684\u9884\u6d4b\u7ed3\u679c","293f243e":"### NumberRealEstateLoansOrLines","55f8bc43":"# 1. \u5b9a\u4e49\u95ee\u9898\n* Give Me Some Credit\u662fKaggle\u4e0a\u5173\u4e8e\u4fe1\u7528\u8bc4\u5206\u7684\u9879\u76ee\uff0c\u8bad\u7ec3\u96c6\u5305\u542b\u4e00\u4e9b\u501f\u6b3e\u4eba\u6837\u672c\u5e76\u7ed9\u51fa\u5176\u662f\u5426\u4f1a\u53d1\u751f\u4e25\u91cd\u903e\u671f\u72b6\u51b5\u7684\u6807\u8bb0\uff0c\u6211\u4eec\u9700\u8981\u8bad\u7ec3\u4e00\u4e2a\u4fe1\u7528\u8bc4\u5206\u6a21\u578b\uff0c\u5224\u65ad\u6d4b\u8bd5\u96c6\u4e2d\u7684\u501f\u6b3e\u4eba\u662f\u5426\u4f1a\u53d1\u751f\u4e25\u91cd\u903e\u671f\u72b6\u51b5\uff0c\u53ef\u4ee5\u4e3a\u8d22\u52a1\u51b3\u7b56\u63d0\u4f9b\u4e00\u4e9b\u53c2\u8003\u3002","304c4386":"NumberOfTime30-59DaysPastDueNotWorse, NumberOfTime60-89DaysPastDueNotWorse, NumberOfTimes90DaysLate\u89c2\u5bdf\u7ed3\u679c\n* \u8fd9\u4e09\u4e2a\u7279\u5f81\u5177\u6709\u76f8\u4f3c\u7684\u5206\u5e03\u3002\u51fa\u73b0\u4e24\u4e2a\u8f83\u5927\u7684\u6570\u503c\uff0898\u548c96\uff09\uff0c\u501f\u6b3e\u4eba2\u5e74\u5185\u62d6\u6b2098\u621696\u6b21\u7684\u53ef\u80fd\u6027\u8f83\u4f4e\u3002\n* \u540c\u65f6\uff0c\u4e09\u4e2a\u7279\u5f81\u4e2d\uff0c\u53d6\u523096\u548c98\u7684\u8bb0\u5f55\u7684\u5bf9\u5e94\u7d22\u5f15\u76f8\u540c\uff0c\u6bd4\u8f83\u5f02\u5e38\uff0c\u53ef\u80fd\u8868\u793a\u9519\u8bef\u6570\u636e\n* \u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u8fd9\u4e09\u4e2a\u7279\u5f81\u4e2d\uff0c\u53d696\u621698\u7684\u8bb0\u5f55\u5220\u9664\u3002","dc0c3c28":"NumberOfOpenCreditLinesAndLoans\u89c2\u5bdf\u7ed3\u679c\n* \u672a\u53d1\u73b0\u5f02\u5e38","fc33c48b":"### SeriousDlqin2yrs","2ffce22f":"### RevolvingUtilizationOfUnsecuredLines","3f027057":"### \u7279\u5f81\u53ca\u5176\u7c7b\u578b\nSeriousDlqin2yrs\u4e3a\u76ee\u6807\u5b57\u6bb5\uff0c\u5176\u4f5910\u4e2a\u7279\u5f81\u4e3a\u8f93\u5165\u5b57\u6bb5\n* \u5206\u7c7b\u578b\uff08Categorical\uff09\u7279\u5f81\uff1aSeriousDlqin2yrs\n* \u6570\u503c\u578b\uff08numeric\uff09\u7279\u5f81\n    * \u8fde\u7eed\u578b\u7279\u5f81\uff1aRevolvingUtilizationOfUnsecuredLines, age, DebtRatio, MonthlyIncome\n    * \u79bb\u6563\u578b\u7279\u5f81\uff1aNumberOfTime30-59DaysPastDueNotWorse, NumberOfTime60-89DaysPastDueNotWorse, NumberOfTimes90DaysLate, NumberOfOpenCreditLinesAndLoans, NumberRealEstateLoansOrLines, NumberOfDependents","a0679ba4":"age\u89c2\u5bdf\u7ed3\u679c\n* \u6574\u4f53\u6765\u770b\uff0c\u5e74\u9f84\u57fa\u672c\u5448\u6b63\u6001\u5206\u5e03\uff0c\u8f83\u4e3a\u5408\u7406\n* \u8bad\u7ec3\u96c6\u4e2d\u5b58\u5728\u5e74\u9f84\u4e3a0\u7684\u6570\u636e\uff0c\u901a\u5e38\u8ba4\u4e3a\u8be5\u503c\u4e3a\u5f02\u5e38\u503c\u3002\u67e5\u770b\u6570\u636e\u53ef\u4ee5\u53d1\u73b0\u4ec5\u6709\u4e00\u6761\u6570\u636e\u5e74\u9f84\u4e3a0\uff0c\u56e0\u6b64\u8003\u8651\u76f4\u63a5\u5220\u9664","b18d12e7":"#### \u4f7f\u752810\u6298\u4ea4\u53c9\u9a8c\u8bc1\u6cd5\u4e0e\u7f51\u683c\u641c\u7d22\u6cd5\u7ed3\u5408\u627e\u5230\u6a21\u578b\u7684\u6700\u4f18\u53c2\u6570\n\u4e3b\u8981\u8c03\u8282\u7684\u53c2\u6570\u5982\u4e0b\uff1a\n* max_depth\n* num_leaves\n* min_child_samples\n* min_child_weight\n* bagging_fraction\n* bagging_freq\n* lambda_l1\n* lambda_l2\n* cat_smooth","0c355ed6":"### MonthlyIncome","f0b7d571":"RevolvingUtilizationOfUnsecuredLines\u89c2\u5bdf\u7ed3\u679c\n* \u8be5\u5b57\u6bb5\u7684\u7edf\u8ba1\u6570\u636e\u53ca\u5176\u76f4\u65b9\u56fe\u3001\u76d2\u56fe\u663e\u793a\uff0c\u5e73\u5747\u503c\u6bd4\u4e2d\u4f4d\u6570\u592740\u500d\uff0c\u8d85\u8fc7\u7b2c99\u4e2a\u767e\u5206\u4f4d\u7684\u6570\u503c\u53d8\u5316\u5f88\u5927\u3002\n* \u4ecb\u4e8e0\u548c1\u4e4b\u95f4\u7684\u503c\u7ea6\u536098%\uff0c\u7b26\u5408\u5e38\u7406\u3002\n* \u4ecb\u4e8e1\u548c10\u4e4b\u95f4\u7684\u503c\u7ea6\u53602%\uff0c\u501f\u6b3e\u4eba\u6709\u65f6\u53ef\u4ee5\u8d85\u51fa\u4fe1\u8d37\u9650\u989d\u6d88\u8d39\u3002\u4e5f\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\n* \u8d85\u8fc710\u7684\u503c\u7ea6\u53600.2%\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u6570\u503c\u975e\u5e38\u5927\uff0c\u4e3a\u9632\u6b62\u5176\u5f71\u54cd\u6a21\u578b\u9884\u6d4b\u7ed3\u679c\uff0c\u8003\u8651\u5c06\u8fd9\u4e9b\u503c\u5220\u9664"}}