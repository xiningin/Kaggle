{"cell_type":{"d0da46c8":"code","74e73b77":"code","24c913c2":"code","510fdcd5":"code","7ebf021a":"code","77f81e24":"code","4fc910ef":"code","4db26b19":"code","423004df":"code","198c83b5":"code","a6f6f2f8":"code","cc7f56ad":"code","80c80e4a":"code","af2e8b30":"code","508c3675":"code","dd99f99d":"code","8ab50d0e":"code","7b062f78":"code","e6602716":"code","b9f9c357":"code","613b5f2d":"code","e2364173":"code","cf6eb8c0":"code","5a9de6be":"code","8615eb02":"code","576bcee6":"code","1447a1e1":"code","903ab72a":"code","938ee40a":"code","3a2edce2":"code","058453cb":"code","f7d99361":"code","dcc97834":"code","782ae5a9":"code","a6a2ba22":"code","eb55c426":"code","b6c06a7d":"code","13851b93":"markdown","c771fc00":"markdown"},"source":{"d0da46c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","74e73b77":"data = pd.read_csv('..\/input\/graduate-admissions\/Admission_Predict.csv',index_col = 'Serial No.')","24c913c2":"data.head()","510fdcd5":"data.describe()","7ebf021a":"data.info()","77f81e24":"import matplotlib.pyplot as plt\nimport seaborn as sns","4fc910ef":"fig,ax = plt.subplots(4,2,figsize = (15,18))\nfeatures = list(data.columns)\nx = 0\ny = 0\nsns.set_style('whitegrid')\nfor feature in features:\n    sns.distplot(a = data[feature],kde = False,ax = ax[x,y])\n    if y==1:\n        x +=1\n        y = 0\n    else:y+=1","4db26b19":"print(features)","423004df":"features = ['GRE Score', 'TOEFL Score', 'University Rating','CGPA']","198c83b5":"fig,ax = plt.subplots(3,2,figsize = (15,18))\nx,y = 0,0\nsns.set_style('darkgrid')\nfor i in range(len(features)-1):\n    for j in range(i+1,len(features)):\n        sns.regplot(x = data[features[i]],y = data[features[j]],ax =ax[x,y] )\n        if y==1:\n            x+=1\n            y=0\n        else:y+=1","a6f6f2f8":"admit_percent = [\">=50%\" if x>=0.5 else \"<50%\" for x in data['Chance of Admit ']]","cc7f56ad":"admit_percent[:10]","80c80e4a":"data['Admission Percentage'] = admit_percent","af2e8b30":"fig,ax = plt.subplots(3,2,figsize = (15,18))\nx,y = 0,0\nsns.set_style('darkgrid')\nfor i in range(len(features)-1):\n    for j in range(i+1,len(features)):\n        sns.scatterplot(x = data[features[i]],y = data[features[j]],hue = data['Admission Percentage'],ax = ax[x,y])\n        if y==1:\n            x+=1\n            y=0\n        else:y+=1","508c3675":"fig,ax = plt.subplots(3,1,figsize = (25,25))\n#plt.figure(figsize = (25,10))\nsns.barplot(x = data['Chance of Admit '],y = data['CGPA'],ax = ax[0] )\nsns.barplot(x = data['Chance of Admit '],y = data['GRE Score'],ax = ax[1] )\nsns.barplot(x = data['Chance of Admit '],y = data['TOEFL Score'],ax = ax[2] )","dd99f99d":"sns.set_style('white')\ndata['Admission Percentage'].value_counts().plot(kind = 'bar',alpha = 0.7)\nplt.title(\"Number of people admitted and not admitted\")","8ab50d0e":"f,ax = plt.subplots(1,3,figsize = (20,4))\nsns.scatterplot(y = data['Chance of Admit '],x = data['CGPA'],hue = data['Admission Percentage'],ax = ax[0])\nax[0].axvline(data['CGPA'].mean())\nsns.scatterplot(y = data['Chance of Admit '],x = data['GRE Score'],hue = data['Admission Percentage'],ax = ax[1])\nax[1].axvline(data['GRE Score'].mean())\nsns.scatterplot(y = data['Chance of Admit '],x = data['TOEFL Score'],hue = data['Admission Percentage'],ax = ax[2])\nax[2].axvline(data['TOEFL Score'].mean())","7b062f78":"plt.figure(figsize = (10,10))\nsns.heatmap(data.corr(),annot = True)\nplt.title('Correlation')","e6602716":"correlations = data.corr().sort_values(by = 'Chance of Admit ')\ncorrelations['Chance of Admit '].plot(kind = 'bar')","b9f9c357":"from sklearn.model_selection import train_test_split","613b5f2d":"data.drop('Admission Percentage',axis = 1,inplace = True)\nX = data.drop('Chance of Admit ',1)\nY = data['Chance of Admit ']","e2364173":"X, xtest, Y, ytest = train_test_split(X,Y,test_size = 0.1)","cf6eb8c0":"from sklearn.linear_model import LinearRegression","5a9de6be":"linear_model = LinearRegression()","8615eb02":"linear_model.fit(X,Y)\nlinear_model.score(xtest,ytest)","576bcee6":"best_features = ['CGPA','TOEFL Score','GRE Score','University Rating']","1447a1e1":"X = data[best_features]\nY = data['Chance of Admit ']","903ab72a":"X, xtest, Y, ytest = train_test_split(X,Y,test_size = 0.1)","938ee40a":"best_model = ''\nbest_score = 0\nfor i in range(5):\n    linear_model.fit(X,Y)\n    score = linear_model.score(xtest,ytest)\n    if score > best_score:best_score,best_model = score,linear_model\nprint(best_score)","3a2edce2":"ypreds = linear_model.predict(xtest)\nplt.scatter(ytest,ypreds)\nplt.xlabel('True Values')\nplt.ylabel('Predictions')\nplt.plot([0,1],[0,1])","058453cb":"best_features = ['CGPA','TOEFL Score','GRE Score','University Rating']","f7d99361":"X = data[best_features]\nY = data['Chance of Admit ']\nX, xtest, Y, ytest = train_test_split(X,Y,test_size = 0.2)","dcc97834":"import tensorflow as tf\nfrom tensorflow import keras","782ae5a9":"neural_model = keras.Sequential([\n    keras.layers.BatchNormalization(),\n    keras.layers.Dense(12,activation = 'relu'),\n    keras.layers.BatchNormalization(),\n    keras.layers.Dense(1,activation = 'sigmoid')\n])","a6a2ba22":"neural_model.compile(loss='mse',optimizer = 'sgd')","eb55c426":"history = neural_model.fit(X,Y,epochs = 15,batch_size = 10)","b6c06a7d":"loss = history.history['loss']\nplt.plot(loss,label = 'Loss Function')\nplt.xlabel('Number of epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()","13851b93":"# Neural Network","c771fc00":"****"}}