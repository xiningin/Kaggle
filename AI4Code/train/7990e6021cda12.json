{"cell_type":{"bf2b1014":"code","5f7712ea":"code","411e8130":"code","e3be4207":"code","d9b98723":"code","2006bef6":"code","fe30d6f4":"code","a721bdd2":"code","435abf16":"code","5ab9405a":"code","a9685a12":"code","bd8f9a00":"markdown","4b770d29":"markdown","c4d3bff7":"markdown","aed1b5c0":"markdown","bce9a867":"markdown","a4c4f180":"markdown","4f348b83":"markdown","2c1afba7":"markdown","cb0829bb":"markdown","b03a6e8f":"markdown","d8a851da":"markdown","2c5c871b":"markdown","9da03a94":"markdown","4c7c97f1":"markdown","02f83342":"markdown","1f73b5fd":"markdown","6c9b1f05":"markdown"},"source":{"bf2b1014":"import requests # library to handle requests\nimport pandas as pd # library for data analsysis\nimport numpy as np # library to handle data in a vectorized manner\nimport random # library for random number generation\n\n#uncomment next line if need to install latest version of geopy\n#!conda install -c conda-forge geopy --yes \nfrom geopy.geocoders import Nominatim # module to convert an address into latitude and longitude values\n\n# libraries for displaying images\nfrom IPython.display import Image \nfrom IPython.core.display import HTML \n    \n# tranforming json file into a pandas dataframe library\nfrom pandas import json_normalize\n\n#uncomment next line if need to install latest version of folium\n#!conda install -c conda-forge folium=0.5.0 --yes\nimport folium # plotting library\n\nprint('Folium installed')\nprint('Libraries imported.')","5f7712ea":"CLIENT_ID = 'your-client-ID' # enter your Foursquare ID here!\nCLIENT_SECRET = 'your-client-secret' # enter your Foursquare Secret here!\n\nVERSION = '20180604' # what version of Foursquare you want to use\nLIMIT = 20 # max limit is 50 \nprint('Your credentails:')\nprint('CLIENT_ID: ' + CLIENT_ID)\nprint('CLIENT_SECRET:' + CLIENT_SECRET)","411e8130":"CLIENT_ID = '0IBRWROBN4BHTVCXD5J43BB3JQARQ4V1DRETPONPPMVY205B'\nCLIENT_SECRET = 'KTMQCKPDDQFYN41SU0R1OG3DTW4DHHZARAAKNLSJF0DXJSYH' ","e3be4207":"# Grand Central Terminal Address\naddress = '89 E 42nd St, New York, NY 10017'\n\ngeolocator = Nominatim(user_agent=\"foursquare_agent\")\nlocation = geolocator.geocode(address)\nlatitude = location.latitude\nlongitude = location.longitude\nprint(\"The latitude and longitude coordinates are:\")\nprint(latitude, longitude)","d9b98723":"search_query = 'Pizza'\nradius = 500 #Radius of search in meters\n\nurl = 'https:\/\/api.foursquare.com\/v2\/venues\/search?client_id={}&client_secret={}&ll={},{}&v={}&query={}&radius={}&limit={}'.format(CLIENT_ID, CLIENT_SECRET, latitude, longitude, VERSION, search_query, radius, LIMIT)\nresults = requests.get(url).json()","2006bef6":"# assign relevant part of JSON to venues\nvenues = results['response']['venues']\n\n# tranform venues into a pandas dataframe\ndataframe = json_normalize(venues)\ndataframe.head()","fe30d6f4":"# keep only columns that include venue name, and anything that is associated with location\nfiltered_columns = ['name', 'categories'] + [col for col in dataframe.columns if col.startswith('location.')] + ['id']\ndataframe_filtered = dataframe.loc[:, filtered_columns]\n\n# function that extracts the category of the venue\ndef get_category_type(row):\n    try:\n        categories_list = row['categories']\n    except:\n        categories_list = row['venue.categories']\n        \n    if len(categories_list) == 0:\n        return None\n    else:\n        return categories_list[0]['name']\n\n# filter the category for each row\ndataframe_filtered['categories'] = dataframe_filtered.apply(get_category_type, axis=1)\n\n# clean column names by keeping only last term\ndataframe_filtered.columns = [column.split('.')[-1] for column in dataframe_filtered.columns]\n\ndataframe_filtered","a721bdd2":"venue_id = '4c7d96bbd65437043defc0a2' # ID of closest pizza joint\nurl = 'https:\/\/api.foursquare.com\/v2\/venues\/{}?client_id={}&client_secret={}&v={}'.format(venue_id, CLIENT_ID, CLIENT_SECRET, VERSION)\n\nresult = requests.get(url).json()\nresult['response']['venue']\nprint(result['response']['venue']['name'])\ntry:\n    print(result['response']['venue']['rating'])\nexcept:\n    print('This venue has not been rated yet.')","435abf16":"venue_id = '4a8c31aef964a520410d20e3' # ID of second closest\nurl = 'https:\/\/api.foursquare.com\/v2\/venues\/{}?client_id={}&client_secret={}&v={}'.format(venue_id, CLIENT_ID, CLIENT_SECRET, VERSION)\n\nresult = requests.get(url).json()\nprint(result['response']['venue']['name'])\ntry:\n    print(result['response']['venue']['rating'])\nexcept:\n    print('This venue has not been rated yet.')","5ab9405a":"venue_id = '4d012c08ba1da1cd3cb68c28' # ID of third closest\nurl = 'https:\/\/api.foursquare.com\/v2\/venues\/{}?client_id={}&client_secret={}&v={}'.format(venue_id, CLIENT_ID, CLIENT_SECRET, VERSION)\n\nresult = requests.get(url).json()\nprint(result['response']['venue']['name'])\ntry:\n    print(result['response']['venue']['rating'])\nexcept:\n    print('This venue has not been rated yet.')","a9685a12":"venues_map = folium.Map(location=[latitude, longitude], zoom_start=16) # generate map centred around the Grand Central Terminal\n\n# add a red circle marker to represent Grand Central Terminal\nfolium.features.CircleMarker(\n    [latitude, longitude],\n    radius=10,\n    color='red',\n    popup='Grand Central Terminal',\n    fill = True,\n    fill_color = 'red',\n    fill_opacity = 0.6\n).add_to(venues_map)\n\n# add the pizza joints as blue circle markers\nfor lat, lng, label in zip(dataframe_filtered.lat, dataframe_filtered.lng, dataframe_filtered.categories):\n    folium.features.CircleMarker(\n        [lat, lng],\n        radius=5,\n        color='blue',\n        popup=label,\n        fill = True,\n        fill_color='blue',\n        fill_opacity=0.6\n    ).add_to(venues_map)\n\n# display map\nvenues_map","bd8f9a00":"## They want to find some pizza to eat.","4b770d29":"## Get relevant part of JSON and transform it into a *pandas* dataframe","c4d3bff7":"<img src=\"https:\/\/media.giphy.com\/media\/xUA7aZ52SKoPBz7PBC\/giphy.gif\">","aed1b5c0":"## What's the rating of the 3 closest pizza place?","bce9a867":"## Define Foursquare Credentials and Version","a4c4f180":"### In this notebook, I will walk you through how to make calls to the Foursquare API for different purposes. We will learn how to construct a URL to send a request to the API to search for a specific type of venues, explore a particular venue, and explore a geographical location. We will use the visualization library, Folium, to visualize the results.","4f348b83":"## Let's assume someone just got off Grand Central Terminal, NYC. We can convert this address to latitude and longitude coordinates.","2c1afba7":"1. Go to https:\/\/developer.foursquare.com\n2. Create an account at https:\/\/foursquare.com\/developers\/signup\n3. Sign up using your name, email, and password\n4. Confirm your email\n5. Create an App in the developer page, enter a website for the App (does not have to be a real App or website)\n6. Enable Places API\n7. Click your newly created App for CLIENT ID and CLIENT SECRET (you will use this in the API query)\n\nFor the basic account tier of Sandbox, you get: 950 Regular Calls\/Day (calls for general information), 50 Premium Calls\/Day (calls about a specific venue), 1 Photo per Venue, 1 Tip per Venue.","cb0829bb":"# Tutorial: Foursquare API Query","b03a6e8f":"# Example: Analyzing Pizza in NYC<a class=\"anchor\" id=\"third-section\"><\/a>","d8a851da":"> ## Quick rundown:\n* [Setting up a Developer Account](#first-section)\n* [Basic API Call](#second-section)\n* [Example: Analyzing Pizza in NYC](#third-section)\n* [Data Visualization of Example](#fourth-section)","2c5c871b":"## Define information of interest and filter the dataframe","9da03a94":"### Why Foursquare? 100,000+ developers, used by Apple Maps, Uber, Snapchat, Twitter, etc. for its location-based service's data to improve the accuracy venues on a map.","4c7c97f1":"## Importing libraries used in this notebook.","02f83342":"# Data Visualization of Example<a class=\"anchor\" id=\"fourth-section\"><\/a>","1f73b5fd":"# Setting up a Developer Account<a class=\"anchor\" id=\"first-section\"><\/a>","6c9b1f05":"# Basic API Call<a class=\"anchor\" id=\"second-section\"><\/a>"}}