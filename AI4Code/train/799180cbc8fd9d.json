{"cell_type":{"3f05a344":"code","d7361424":"code","0c96f36d":"code","c8124234":"code","bf34faf9":"code","421e047b":"code","9d1a50d8":"code","287016b4":"code","1609e4fd":"code","89b05777":"code","5669c354":"code","368a0b09":"code","241c2ed9":"code","9b4cd00f":"code","0bb959b0":"code","2a02a43a":"markdown","53dbd76e":"markdown","aa1d475a":"markdown","2268c125":"markdown","41d25b1d":"markdown","d8d28ec9":"markdown","9af3fa95":"markdown","e4ec7070":"markdown","8bcded61":"markdown","c5f1aed0":"markdown","7d857950":"markdown","e6a72551":"markdown","bc5f7ec6":"markdown","347ab1ad":"markdown","7012564f":"markdown","e5442129":"markdown","48e850ea":"markdown","a8972404":"markdown","aadde005":"markdown"},"source":{"3f05a344":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d7361424":"from IPython.display import Image\nurl=\"https:\/\/i.stack.imgur.com\/FQhxk.jpg\"\nImage(url,width=800, height=800)","0c96f36d":"url=\"https:\/\/i.stack.imgur.com\/vc01j.png\"\nImage(url,width=800, height=800)","c8124234":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport cufflinks as cf\ncf.go_offline()\nimport seaborn as sns","bf34faf9":"from sklearn.datasets import make_blobs\n#This is the we will use to create artificial dataset","421e047b":"data=make_blobs(n_samples=200, n_features=2,centers=4, cluster_std=1.8,random_state=101)\ndata","9d1a50d8":"data[0].shape # The data contains 200 rows and 2 columns","287016b4":"plt.figure(figsize=(15,10))\nplt.scatter(data[0][:,0], data[0][:,1]) # Here we visualize both of the columns\n#this data represents the two blobs we have assigned ","1609e4fd":"data[1] #This data represents the four clusters we have created with the centers parameter","89b05777":"plt.figure(figsize=(15,10))\nplt.scatter(data[0][:,0], data[0][:,1],c=data[1],cmap=\"rainbow\")","5669c354":"from sklearn.cluster import KMeans","368a0b09":"kmeans=KMeans(n_clusters=4) #Here I assign 4 because I know that it s 4 in my artificial dataset \nkmeans.fit(data[0]) #The algorithm will fit the features of the data","241c2ed9":"kmeans.cluster_centers_\n#This atrribute returns the centers of the four clusters","9b4cd00f":"kmeans.labels_\n#This returns the labels that algorithm find as True","0bb959b0":"fig,(ax1,ax2)=plt.subplots(1,2,sharey=True,figsize=(15,10))\nax1.set_title(\"K Means\")\nax1.scatter(data[0][:,0], data[0][:,1],c=kmeans.labels_,cmap=\"rainbow\")\n#Here we color the scatter plot according to the kmeans' labels\n\nax2.set_title(\"Original\")\nax2.scatter(data[0][:,0], data[0][:,1],c=data[1],cmap=\"rainbow\")\n#Here we color the scatter plot according to the original labels","2a02a43a":"# 2.How does the algorithm work:\n\n    -Choose a number of Clusters K\n    -Randomly assign each point to a specific cluster\n    -Until clusters stop changing, repeat the following steps:\n        -For each cluster, compute the cluster's centroid by taking the mean vector points in the cluster\n        -Assign each data point to the cluster for which the centroid is the closest\n    \n","53dbd76e":"* In the plot above, we see the number of cluster on the x-axis and within group sum o squares.\n\n* We try to choose a K Value where we won't get much information by increasing the number of classes, which means that we will not significantly within groups sum of squares by increase the number of clusters.\n\n* The number 2 or 3 is the most ideal in this plot because it is the first point the elbow shape happens and avoid to increase the number clusters more.","aa1d475a":"* To perform K Mean Clustering, we have to decide how many clusters we expect in the data.\n\n* There is no easy answer for choosing a best K Value, but we can use elbow method to achieve a good K Value for the algorithm.\n\n* The basic idea behind this method is that it plots the various values of cost with changing k. As the value of K increases, there will be fewer elements in the cluster. So average distortion will decrease. The lesser number of elements means closer to the centroid. So, the point where this distortion declines the most is the elbow point.\n\n* First of all, we compute the sum of squared errors(SSE) for some values of K(example, 2,3,4,6,etc).The SSE is the sum of squared distance between each member of the cluster and its centroid.\n\n* If we plot K value against the SSE,the error decreases as the K Value increases because if the number of cluster increases, they should be smaller. Accordingly the distortion becomes also smaller.\n\n* From this perspective, the idea of using elbow method is to choose K Value at which SSE decreases abruptly, and this produces an elbow effect as we can see in the following picture.","2268c125":"* The first observation about data is shown in top-left of the figure above.\n\n* In the step 1 in the algorithm, each observation is randomly assigned to a cluster.\n\n* In the step 2a in the algorithm,the cluster centroid for each cluster is computed, which are shown as large colored disk as shown top-right of the figure.\n\n* Initially these centroids are almost overlapping as we can see from the figure because initial cluster assignments are chosen randomly.\n\n* In the step 2a in the algorithm(bottom-left of the figure above), each observation is assigned to the neares centroid.\n\n* In bottom-center of the figure above, step 2a once again is performed which lead to new cluster centroids.\n\n* We basically keep repeating these steps until there is no new cluster which means data points are being reassigned to a new cluster centroid.\n\n* At the bottom-right, we have the results obtained after about 10 iterations\n","41d25b1d":"# 1. General Information About the Algorithm:","d8d28ec9":"# 4. Implementing the Algorithm:","9af3fa95":"* In this data set we are not going to predict any outcome as it is case in supervised learning algorithms.What we are going to do is to find patterns in the data via K Means Clustering Algorithm\n\n* We will create artificial data to anaylze with K Means Clustering Algorithm","e4ec7070":"* This algorithm is unsupervised and will start to randomly assign each observation to a cluster and then find centroid for each cluster.\n\n* The algorithm will iterate through the two steps by repeating them over and over again until the cluster variation can't be reduced any further:\n    -reassign data points to to the cluster whose centroid is closest.\n    -calculate the new centroid for each cluster","8bcded61":"* make_blobs(n_samples=100, n_features=2, *, centers=None, cluster_std=1.0, center_box=(-10.0, 10.0), shuffle=True,   random_state=None, return_centers=False)\n    Generate isotropic Gaussian blobs for clustering.\n\n* This basically allows to create artificial data we can play with\n    ","c5f1aed0":"* As we can see from the figures above, there is some differences between the original values and KMeans' clustering","7d857950":"*This algorithm allows us to cluster and label data as an unsupervised machine learning algorithm\n\n*We apply this algorithm for unlabeled data and it attempts to group similar clusters in unlabeled data.\n\n*Types of clustering problems that we can apply this algorithm is:\n\n        -Clustering Similar Documents\n        -Cluster Customers based on their Features\n        -Market Segmentation\n        -Identify Similar Physical Groups\n        \n*The overall goal is to divide data into distinct groups such that observations within each group are similar","e6a72551":"# 3. Importing Data and Required Libraries","bc5f7ec6":"* The data is just a tuple which contains numpy array consisting of feature and columns we we have assigned before","347ab1ad":"*2.2. How to choose a K Value for the Algorithm:","7012564f":"subplots(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, subplot_kw=None, gridspec_kw=None, **fig_kw)\n    \n    Create a figure and a set of subplots.","e5442129":"* Because I know actual labels for this artificial data, I can compare the results between what the algorithm finds and ","48e850ea":"* If we visualize the data we can get better insights about the data","a8972404":"* Here we will also add the cluster in the previous scatterplot","aadde005":"*2.1. Here is the visualization how the algorithm works:"}}