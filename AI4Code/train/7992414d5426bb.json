{"cell_type":{"bafa5d88":"code","5a398329":"code","cdca9b49":"code","662ff0ad":"code","bc97893e":"code","42c07721":"code","80bfeef8":"code","1e3dfd50":"code","07b03b3f":"code","d6172ad0":"code","adbef6f5":"code","4cc74c08":"code","9dc4c814":"code","cbbc918f":"code","f88c92f0":"code","90c14307":"code","b05bafa4":"code","802812d5":"code","748de0a5":"code","3de97eff":"code","85e88f48":"code","a50fd5bd":"code","3d504936":"code","abe5f322":"code","56b1adc3":"code","294fabe6":"code","f81c050c":"code","2e391aff":"code","53276a11":"code","5805de79":"code","771672e2":"markdown","4752d4f0":"markdown","65909a2d":"markdown","745a4082":"markdown","60d676fb":"markdown","1e0fcea5":"markdown","28410bfc":"markdown","4e1a746c":"markdown","978ffae3":"markdown","3923537a":"markdown","51e88ccd":"markdown","275090a3":"markdown","a98c4280":"markdown","835fa6b1":"markdown","d225db97":"markdown","ce574959":"markdown","0cca7615":"markdown","4630f53d":"markdown","2dfb2d10":"markdown","cfe95511":"markdown","b7e75e1d":"markdown","bcd85715":"markdown","ebb40815":"markdown","7ff86997":"markdown","3a151d36":"markdown","9aba0a60":"markdown","6315432c":"markdown","6ade3460":"markdown"},"source":{"bafa5d88":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5a398329":"#Importing other libraries\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","cdca9b49":"#Reading the data \n\ndata=pd.read_csv('..\/input\/default-of-credit-card-clients-dataset\/UCI_Credit_Card.csv')","662ff0ad":"data.head()","bc97893e":"# Looking at the data \n\ndata.info()","42c07721":"# Checking for Null Values\n\ndata.isnull().sum()","80bfeef8":"#Looking at the type of data present ( to check if we have any categorical data )\n\n{column:data[column].unique() for column in data.columns}","1e3dfd50":"#Looking at the length of the unique column values would be better \n\n{column:len(data[column].unique()) for column in data.columns}","07b03b3f":"data.rename(columns={'default.payment.next.month':'default_payment'},inplace=True)","d6172ad0":"cat_cols=['SEX','EDUCATION','MARRIAGE','default_payment']\n\nfig,ax=plt.subplots(1,4,figsize=(25,5))\n\nfor cols,subplots in zip(cat_cols,ax.flatten()):\n    sns.countplot(x=data[cols],ax=subplots)\n    ","adbef6f5":"ed=(data['EDUCATION']==0).sum()\nm=(data['MARRIAGE']==0).sum()\np_ed=(ed\/len(data['EDUCATION']))*100\nm_ed=(m\/len(data['MARRIAGE']))*100\n\nprint(\"Number of missing values for:\\nEDUCATION= \",ed,\"\\nMARRIAGE= \",m)\n\nprint(\"Percentage of missing values for:\\nEDUCATION= \",round(p_ed,2),\"%\",\"\\nMARRIAGE= \",round(m_ed,2),\"%\")","4cc74c08":"edu=data['EDUCATION'].mode()[0]\nmar=data['MARRIAGE'].mode()[0]\n\ndataset=data.copy()\n\ndataset['EDUCATION'].replace({0:edu},inplace=True)\ndataset['MARRIAGE'].replace({0:mar},inplace=True)","9dc4c814":"dataset['EDUCATION'].replace({6:5},inplace=True)","cbbc918f":"unk=(dataset['EDUCATION']==5).sum()\n\nprint(\"Percentage of unknown in EDUCATION =\", round((unk\/len(dataset['EDUCATION']))*100,2),\"%\")","f88c92f0":"fig,ax=plt.subplots(1,4,figsize=(25,5))\n\nfor cols,subplots in zip(cat_cols,ax.flatten()):\n    sns.countplot(x=dataset[cols],ax=subplots)","90c14307":"data_copy=dataset.copy()\n\ndata_copy['SEX'].replace({1:'Male',2:'Female'},inplace=True)\ndata_copy['EDUCATION'].replace({1:'graduate school', 2:'university', 3:'high school', 4:'others', 5:'unknown', 6:'unknown'},inplace=True)\ndata_copy['MARRIAGE'].replace({1:'married', 2:'single', 3:'others'},inplace=True)\ndata_copy['default_payment'].replace({1:'Yes',0:'No'},inplace=True)\n\n\nfig,ax=plt.subplots(1,4,figsize=(25,5))\n\nfor cols,subplots in zip(cat_cols,ax.flatten()):\n    sns.countplot(x=data_copy[cols],ax=subplots)\n    \n    for label in subplots.get_xticklabels():\n        label.set_rotation(90)\n\nplt.show()","b05bafa4":"# Vizualizing the imbalance \n\nyes=(((dataset['default_payment']==1).sum())\/len(dataset['default_payment']))*100\nno=(((dataset['default_payment']==0).sum())\/len(dataset['default_payment']))*100\n\nx=[yes,no]\n\nplt.pie(x,labels=['Yes','No'],colors=['darksalmon', 'lightgreen'],radius=2,autopct='%1.0f%%')\nplt.title('DEFAULT PAYMENTS')\nplt.show()","802812d5":"dataset.rename({'PAY_0':'Repayment_Sept','PAY_2':'Repayment_Aug','PAY_3':'Repayment_July','PAY_4':'Repayment_June','PAY_5':'Repayment_May','PAY_6':'Repayment_April'},axis=1,inplace=True)","748de0a5":"repayment=['Repayment_April','Repayment_May','Repayment_June','Repayment_July','Repayment_Aug','Repayment_Sept']\nfig,ax=plt.subplots(2,3,figsize=(20,10))\n\nfor cols,subplots in zip(repayment,ax.flatten()):\n    sns.countplot(x=dataset[cols],ax=subplots)\n    \n    for label in subplots.get_xticklabels():\n        label.set_rotation(90)\n\nplt.show()","3de97eff":"for cols in repayment:\n    dataset[cols].replace({-2:0,-1:0},inplace=True)","85e88f48":"fig,ax=plt.subplots(2,3,figsize=(20,10))\n\nplt.suptitle('No. of Months the Payment was Delayed by')\n\nfor cols,subplots in zip(repayment,ax.flatten()):\n    sns.countplot(x=dataset[cols],ax=subplots)\n    \n    for label in subplots.get_xticklabels():\n        label.set_rotation(90)\n\nplt.show()","a50fd5bd":"#Changing the column names to understand the data better\n\ndataset.rename({'BILL_AMT1':'Bill_Sept','BILL_AMT2':'Bill_Aug','BILL_AMT3':'Bill_July','BILL_AMT4':'Bill_June','BILL_AMT5':'Bill_May','BILL_AMT6':'Bill_April'},axis=1,inplace=True)\n\ndataset.rename({'PAY_AMT1':'Prev_Payment_Sept','PAY_AMT2':'Prev_Payment_Aug','PAY_AMT3':'Prev_Payment_July','PAY_AMT4':'Prev_Payment_June','PAY_AMT5':'Prev_Payment_May','PAY_AMT6':'Prev_Payment_April'},axis=1,inplace=True)","3d504936":"dataset.columns","abe5f322":"#Amount of Credit Given \n\nplt.figure(figsize=(20,10))\nsns.histplot(x=dataset['LIMIT_BAL'],kde=True,bins=100)\nplt.xlabel('Amount of Credit Given (NT Dollars)')\nplt.ticklabel_format(axis='x', style='plain',useOffset=None)\nplt.locator_params(axis=\"x\", nbins=30)\nplt.axvline(dataset['LIMIT_BAL'].mean(), color='r', linestyle='dashed', linewidth=2)\nplt.axvline(dataset['LIMIT_BAL'].mode()[0], color='yellow', linestyle='dashed', linewidth=3)\nmin_ylim, max_ylim = plt.ylim()\nplt.text(dataset['LIMIT_BAL'].mean()*1.1, max_ylim*0.9, 'Mean: {:.2f}'.format(dataset['LIMIT_BAL'].mean()))\nplt.text(dataset['LIMIT_BAL'].mode()[0]*1.1, max_ylim*0.9, 'Mode: {:.2f}'.format(dataset['LIMIT_BAL'].mode()[0]))\n\n\nplt.title('AMOUNT OF CREDIT GIVEN')\nplt.show()","56b1adc3":"dataset['LIMIT_BAL'].describe()","294fabe6":"#BILL AMOUNTS FOR EACH MONTH \n\nbills=['Bill_April','Bill_May','Bill_June','Bill_July','Bill_Aug','Bill_Sept']\n\nplt.figure(figsize=(20,5))\n\nmin_ylim, max_ylim = plt.ylim()\n\nsns.kdeplot(x=dataset[bills[0]],color='r',label='April')\nplt.axvline(dataset[bills[0]].mean(), color='r', linestyle='dashed', linewidth=1)\n\n\nsns.kdeplot(x=dataset[bills[1]],color='b',label='May')\nplt.axvline(dataset[bills[1]].mean(), color='b', linestyle='dashed', linewidth=1)\n\nsns.kdeplot(x=dataset[bills[2]],color='g',label='June')\nplt.axvline(dataset[bills[2]].mean(), color='g', linestyle='dashed', linewidth=1)\n\nsns.kdeplot(x=dataset[bills[3]],color='yellow',label='July')\nplt.axvline(dataset[bills[3]].mean(), color='yellow', linestyle='dashed', linewidth=1)\n\nsns.kdeplot(x=dataset[bills[4]],color='pink',label='August')\nplt.axvline(dataset[bills[4]].mean(), color='pink', linestyle='dashed', linewidth=1)\n\nsns.kdeplot(x=dataset[bills[5]],color='k',label='September')\nplt.axvline(dataset[bills[5]].mean(), color='k', linestyle='dashed', linewidth=1)\n\n\nplt.ticklabel_format(axis='x', style='plain',useOffset=None)\nplt.locator_params(axis=\"x\", nbins=60)\nplt.xticks(rotation=90)\nplt.xlabel('Bill Amount')\n\nmeans=[dataset[bills[0]].mean(),dataset[bills[1]].mean(),dataset[bills[2]].mean(),dataset[bills[3]].mean(),dataset[bills[4]].mean(),dataset[bills[5]].mean()]\nm=round(sum(means)\/len(means),2)\nmin_ylim, max_ylim = plt.ylim()\nplt.text(m*2.1, max_ylim*0.9, 'Average Mean: {:.2f}'.format(m))\n\n\nplt.axvline(dataset[bills[0]].mode()[0], color='lightblue', linestyle='dashed', linewidth=1)\nplt.axvline(dataset[bills[1]].mode()[0], color='lightblue', linestyle='dashed', linewidth=1)\nplt.axvline(dataset[bills[2]].mode()[0], color='lightblue', linestyle='dashed', linewidth=1)\nplt.axvline(dataset[bills[3]].mode()[0], color='lightblue', linestyle='dashed', linewidth=1)\nplt.axvline(dataset[bills[4]].mode()[0], color='lightblue', linestyle='dashed', linewidth=1)\nplt.axvline(dataset[bills[5]].mode()[0], color='lightblue', linestyle='dashed', linewidth=1)\n\nmodes=[dataset[bills[0]].mode()[0],dataset[bills[1]].mode()[0],dataset[bills[2]].mode()[0],dataset[bills[3]].mode()[0],dataset[bills[4]].mode()[0],dataset[bills[5]].mode()[0]]\nmo=sum(modes)\/len(modes)\n\nplt.text(mo*1.1, max_ylim*0.7, 'Average Mode: {:.2f}'.format(mo))\n\nplt.title('MONTHLY BILL AMOUNTS')\nplt.legend()\nplt.show()\n\n","f81c050c":"s=[]\n\n\nfor x in bills:\n    s.append((dataset[x]==0).sum())\n   \n\nbillszero=[]\nfor x in s:\n    billszero.append((x\/len(dataset))*100)\n    \nbillszero","2e391aff":"#Previous Payment Amounts for Each Month\n\nprev=['Prev_Payment_April','Prev_Payment_May','Prev_Payment_June','Prev_Payment_July','Prev_Payment_Aug','Prev_Payment_Sept']\n\nplt.figure(figsize=(20,5))\n\nmin_ylim, max_ylim = plt.ylim()\n\nsns.kdeplot(x=dataset[prev[0]],color='r',label='April')\nplt.axvline(dataset[prev[0]].mean(), color='r', linestyle='dashed', linewidth=1)\n\n\nsns.kdeplot(x=dataset[prev[1]],color='b',label='May')\nplt.axvline(dataset[prev[1]].mean(), color='b', linestyle='dashed', linewidth=1)\n\nsns.kdeplot(x=dataset[prev[2]],color='g',label='June')\nplt.axvline(dataset[prev[2]].mean(), color='g', linestyle='dashed', linewidth=1)\n\nsns.kdeplot(x=dataset[prev[3]],color='yellow',label='July')\nplt.axvline(dataset[prev[3]].mean(), color='yellow', linestyle='dashed', linewidth=1)\n\nsns.kdeplot(x=dataset[prev[4]],color='pink',label='August')\nplt.axvline(dataset[prev[4]].mean(), color='pink', linestyle='dashed', linewidth=1)\n\nsns.kdeplot(x=dataset[prev[5]],color='k',label='September')\nplt.axvline(dataset[prev[5]].mean(), color='k', linestyle='dashed', linewidth=1)\n\n\nplt.ticklabel_format(axis='x', style='plain',useOffset=None)\nplt.locator_params(axis=\"x\", nbins=60)\nplt.xticks(rotation=90)\nplt.xlabel('Bill Amount')\n\nmeans=[dataset[prev[0]].mean(),dataset[prev[1]].mean(),dataset[prev[2]].mean(),dataset[prev[3]].mean(),dataset[prev[4]].mean(),dataset[prev[5]].mean()]\nm=round(sum(means)\/len(means),2)\nmin_ylim, max_ylim = plt.ylim()\nplt.text(m*2.1, max_ylim*0.9, 'Average Mean: {:.2f}'.format(m))\n\n\nplt.axvline(dataset[prev[0]].mode()[0], color='lightblue', linestyle='dashed', linewidth=1)\nplt.axvline(dataset[prev[1]].mode()[0], color='lightblue', linestyle='dashed', linewidth=1)\nplt.axvline(dataset[prev[2]].mode()[0], color='lightblue', linestyle='dashed', linewidth=1)\nplt.axvline(dataset[prev[3]].mode()[0], color='lightblue', linestyle='dashed', linewidth=1)\nplt.axvline(dataset[prev[4]].mode()[0], color='lightblue', linestyle='dashed', linewidth=1)\nplt.axvline(dataset[prev[5]].mode()[0], color='lightblue', linestyle='dashed', linewidth=1)\n\nmodes=[dataset[prev[0]].mode()[0],dataset[prev[1]].mode()[0],dataset[prev[2]].mode()[0],dataset[prev[3]].mode()[0],dataset[prev[4]].mode()[0],dataset[prev[5]].mode()[0]]\nmo=sum(modes)\/len(modes)\n\nplt.text(mo*1.1, max_ylim*0.7, 'Average Mode: {:.2f}'.format(mo))\n\nplt.title('PREVIOUS PAYMENTS MADE')\nplt.legend()\nplt.show()\n","53276a11":"dataset","5805de79":"sns.countplot(x=data_copy['SEX'],hue='default_payment',data=dataset)\nplt.show()","771672e2":"As we can see the average monthly bill amount is around 50,000 NT dollars. ","4752d4f0":"How does the probability of default payment vary by categories of different demographic variables?","65909a2d":"#### BY GENDER ","745a4082":"##### Looking at the Categorical Data","60d676fb":"There are no NULL values in the dataset. ","1e0fcea5":"**We can see that most loans were around 50,000 dollars.**","28410bfc":"Non-Categorical columns with the number of unique values:-\n1. 'ID': 30000,\n2. 'LIMIT_BAL': 81,\n3. 'BILL_AMT1': 22723,\n4. 'BILL_AMT2': 22346,\n5. 'BILL_AMT3': 22026,\n6. 'BILL_AMT4': 21548,\n7. 'BILL_AMT5': 21010,\n8. 'BILL_AMT6': 20604,\n9. 'PAY_AMT1': 7943,\n10. 'PAY_AMT2': 7899,\n11. 'PAY_AMT3': 7518,\n12. 'PAY_AMT4': 6937,\n13. 'PAY_AMT5': 6897,\n14. 'PAY_AMT6': 6939,\n","4e1a746c":"We can replace the missing values with the most frequently occuring value. ","978ffae3":"* We can see that most of the payments were made on time. \n* Other than that there was a maximum delay of 2 months for","3923537a":"-1=pay duly, 1=payment delay for one month, 2=payment delay for two months, \u2026 8=payment delay for eight months, 9=payment delay for nine months and above","51e88ccd":"#### UNIVARIATE ANALYSIS: Looking at the type of data present in different columns","275090a3":"Clearly, we have an imbalance in the dataset with only 22% of the loans defaulted. ","a98c4280":"It seems like we have 10 (4+6) categorical columns:- \n\n1. SEX\n2. EDUCATION\n3. MARRIAGE\n4. default.payment.next.month \n\nRepayment status for all the months:- \n1. PAY_0\n2. PAY_2\n3. PAY_3\n4. PAY_4\n5. PAY_5\n6. PAY_6\n","835fa6b1":"##### Plotting Again","d225db97":"* SEX: Gender (1=male, 2=female)\n* EDUCATION: (1=graduate school, 2=university, 3=high school, 4=others, 5=unknown, 6=unknown)\n* MARRIAGE: Marital status (1=married, 2=single, 3=others)\n* Default payment (1=yes, 0=no)\n\n##### We can see that there are clearly some missing values in EDUCATION and MARRIAGE that were labeled as 0","ce574959":"#### BY MARRIAGE","0cca7615":"EDUCATION column: we can combine 5 & 6 since both are unknowns","4630f53d":"#### BY EDUCATION ","2dfb2d10":"* We can see some inconsistencies in the data. \n* -2 and 0 make no sense\n\nWe can modify as follow:-\n* 0: Paid Duly \n* 1-9: Payment delay for 1-9 months\n\nTherefore we need to replace -1,-2 with 0. \n","cfe95511":"PAY_0: Repayment status in September, 2005 (-1=pay duly, 1=payment delay for one month, 2=payment delay for two months, \u2026 8=payment delay for eight months, 9=payment delay for nine months and above)\nPAY_2: Repayment status in August, 2005 (scale same as above)\nPAY_3: Repayment status in July, 2005 (scale same as above)\nPAY_4: Repayment status in June, 2005 (scale same as above)\nPAY_5: Repayment status in May, 2005 (scale same as above)\nPAY_6: Repayment status in April, 2005 (scale same as above)","b7e75e1d":"As we can see, we don't have any objective type columns. All are Numerical Values only. ","bcd85715":"##### Vizualizing the other categorical columns ( Repayment Status)","ebb40815":"#### About the dataset \n\n##### Objective:- \nTo predict if a customer would default on the payment of the loan next month. \n\n##### Columns:- \n\nThere are 25 columns:- \n\n* ID: ID of each client\n* LIMIT_BAL: Amount of given credit in NT dollars (includes individual and family\/supplementary credit\n* SEX: Gender (1=male, 2=female)\n* EDUCATION: (1=graduate school, 2=university, 3=high school, 4=others, 5=unknown, 6=unknown)\n* MARRIAGE: Marital status (1=married, 2=single, 3=others)\n* AGE: Age in years\n* PAY_0: Repayment status in September, 2005 (-1=pay duly, 1=payment delay for one month, 2=payment delay for two months, \u2026 8=payment delay for eight months, 9=payment delay for nine months and above)\n* PAY_2: Repayment status in August, 2005 (scale same as above)\n* PAY_3: Repayment status in July, 2005 (scale same as above)\n* PAY_4: Repayment status in June, 2005 (scale same as above)\n* PAY_5: Repayment status in May, 2005 (scale same as above)\n* PAY_6: Repayment status in April, 2005 (scale same as above)\n* BILL_AMT1: Amount of bill statement in September, 2005 (NT dollar)\n* BILL_AMT2: Amount of bill statement in August, 2005 (NT dollar)\n* BILL_AMT3: Amount of bill statement in July, 2005 (NT dollar)\n* BILL_AMT4: Amount of bill statement in June, 2005 (NT dollar)\n* BILL_AMT5: Amount of bill statement in May, 2005 (NT dollar)\n* BILL_AMT6: Amount of bill statement in April, 2005 (NT dollar)\n* PAY_AMT1: Amount of previous payment in September, 2005 (NT dollar)\n* PAY_AMT2: Amount of previous payment in August, 2005 (NT dollar)\n* PAY_AMT3: Amount of previous payment in July, 2005 (NT dollar)\n* PAY_AMT4: Amount of previous payment in June, 2005 (NT dollar)\n* PAY_AMT5: Amount of previous payment in May, 2005 (NT dollar)\n* PAY_AMT6: Amount of previous payment in April, 2005 (NT dollar)\n* default.payment.next.month: Default payment (1=yes, 0=no)\n\n","7ff86997":"##### INSIGHTS:-\n\n1. We have more number of Female Customers who took the loan. \n2. Most people have a University Education. \n3. Most people are single, followed closely by married. \n4. Most people did not default on their loan, so we have an imbalanced dataset. ","3a151d36":"**On an average 5000 NT dollars were paid previously**","9aba0a60":"#### BY AGE","6315432c":"#### Looking at the Non-Categorical Data","6ade3460":"### EDA by different Demographics "}}