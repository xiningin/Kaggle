{"cell_type":{"c4bdbafa":"code","0601028c":"code","3b461c94":"code","05d590a3":"code","bf9bc37e":"code","30412de4":"code","7ca1c902":"code","9e2b82f5":"code","0919a650":"code","9b597a45":"code","7533d1a2":"code","2f935603":"code","ba075f9a":"code","a294795e":"code","dfc31716":"code","a47b2297":"code","96009d9f":"code","abe2d083":"code","2bb86148":"code","9cebd05e":"code","c9cf2f48":"code","387ba134":"code","350df0c9":"code","60212ba5":"code","ba069113":"code","2ea7683d":"code","71ef521b":"code","e2fc8ec5":"code","87a9a230":"code","928620f3":"code","748752b4":"code","380c8f59":"code","004732d1":"code","e77fcb4e":"code","fed3b071":"code","59d40ca6":"code","2275b311":"markdown","9a850c67":"markdown"},"source":{"c4bdbafa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0601028c":"import numpy as np \nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re \nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.corpus import stopwords\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nimport joblib\nfrom nltk.tokenize import RegexpTokenizer\nimport nltk\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import confusion_matrix \nfrom imblearn.combine import SMOTETomek\n\nnltk.download('stopwords')\n\n\nstop_words = set(stopwords.words(\"english\"))\ndefault_stemmer = PorterStemmer()\ndefault_stopwords = stopwords.words('english')\ndefault_tokenizer=RegexpTokenizer(r\"\\w+\")","3b461c94":"df = pd.read_csv(\"..\/input\/real-or-fake-fake-jobposting-prediction\/fake_job_postings.csv\")\ndf.head()","05d590a3":"df.shape","bf9bc37e":"df.columns\ndf_columns = df.columns.tolist()","30412de4":"dataTypeSeries = df.dtypes\nprint('Data type of each column of Dataframe :')\nprint(dataTypeSeries)","7ca1c902":"df[df_columns].isnull().sum()","9e2b82f5":"df = df.replace(np.nan, '', regex=True)","0919a650":"df[\"fraudulent\"].value_counts()","9b597a45":"df['text'] = df[['title', 'department','company_profile','description','requirements','benefits']].apply(lambda x: ' '.join(x), axis = 1) ","7533d1a2":"df.drop(['job_id', 'location','title','salary_range' ,'department','salary_range','company_profile','description','requirements','benefits'], axis=1, inplace=True)","2f935603":"df.columns\ndf_columns = df.columns.tolist()","ba075f9a":"from sklearn.preprocessing import LabelEncoder\nlabel_columns = ['telecommuting', 'has_company_logo', 'has_questions', 'employment_type',\n       'required_experience', 'required_education', 'industry', 'function']\nlb_make = LabelEncoder()\nfor i in label_columns:\n  df[i] = lb_make.fit_transform(df[i])","a294795e":"df.head()","dfc31716":"df_columns = df_columns[-1:] + df_columns[:-1]\ndf = df[df_columns]\ndf.head()","a47b2297":"  def clean_text(text, ):\n        if text is not None:\n        #exclusions = ['RE:', 'Re:', 're:']\n        #exclusions = '|'.join(exclusions)\n                text = re.sub(r'[0-9]+','',text)\n                text =  text.lower()\n                text = re.sub('re:', '', text)\n                text = re.sub('-', '', text)\n                text = re.sub('_', '', text)\n                text = re.sub(r'^https?:\\\/\\\/.*[\\r\\n]*', '', text, flags=re.MULTILINE)\n                text = re.sub(r'\\S*@\\S*\\s?', '', text, flags=re.MULTILINE)\n        # Remove text between square brackets\n                text =re.sub('\\[[^]]*\\]', '', text)\n        # removes punctuation\n                text = re.sub(r'[^\\w\\s]','',text)\n                text = re.sub(r'\\n',' ',text)\n                text = re.sub(r'[0-9]+','',text)\n                #text = re.sub(r'[0-9]+','',text)\n        # strip html \n                p = re.compile(r'<.*?>')\n                text = re.sub(r\"\\'ve\", \" have \", text)\n                text = re.sub(r\"can't\", \"cannot \", text)\n                text = re.sub(r\"n't\", \" not \", text)\n                text = re.sub(r\"I'm\", \"I am\", text)\n                text = re.sub(r\" m \", \" am \", text)\n                text = re.sub(r\"\\'re\", \" are \", text)\n                text = re.sub(r\"\\'d\", \" would \", text)\n                text = re.sub(r\"\\'ll\", \" will \", text)\n        \n                text = p.sub('', text)\n\n        def tokenize_text(text,tokenizer=default_tokenizer):\n            token = default_tokenizer.tokenize(text)\n            return token\n        \n        def remove_stopwords(text, stop_words=default_stopwords):\n            tokens = [w for w in tokenize_text(text) if w not in stop_words]\n            return ' '.join(tokens)\n\n        def stem_text(text, stemmer=default_stemmer):\n            tokens = tokenize_text(text)\n            return ' '.join([stemmer.stem(t) for t in tokens])\n\n        text = stem_text(text) # stemming\n        text = remove_stopwords(text) # remove stopwords\n        #text.strip(' ') # strip whitespaces again?\n\n        return text","96009d9f":"df['text'] = df['text'].apply(clean_text)","abe2d083":"df['text'].head()","2bb86148":"cv = TfidfVectorizer(max_features = 100)\nx = cv.fit_transform(df['text'])\ndf1 = pd.DataFrame(x.toarray(), columns=cv.get_feature_names())\ndf.drop([\"text\"], axis=1, inplace=True)\nmain_df = pd.concat([df1,df], axis=1)","9cebd05e":"main_df.head()","c9cf2f48":"Y = main_df.iloc[:,-1]\nX = main_df.iloc[:,:-1]","387ba134":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.25, random_state=42)\nrfc = RandomForestClassifier(n_jobs=3,oob_score=True,n_estimators=100,criterion=\"entropy\")\nmodel=rfc.fit(X_train,y_train)","350df0c9":"rfc.score(X_train,y_train)","60212ba5":"rfc.score(X_test,y_test)","ba069113":"rfc_predict = rfc.predict(X_test)","2ea7683d":"print(classification_report(y_test, rfc_predict))","71ef521b":"confusion_matrix(y_test, rfc_predict)","e2fc8ec5":"smk  = SMOTETomek(random_state=42)\nX_res,Y_res= smk.fit_sample(X,Y)","87a9a230":"X_res.shape,Y_res.shape","928620f3":"Y_res.value_counts().plot(kind=\"pie\")","748752b4":"X_train, X_test, y_train, y_test = train_test_split(X_res,Y_res, test_size=0.25, random_state=42)\nrfc = RandomForestClassifier(n_jobs=3,oob_score=True,n_estimators=100,criterion=\"entropy\")\nmodel=rfc.fit(X_train,y_train)","380c8f59":"rfc.score(X_train,y_train)","004732d1":"rfc.score(X_test,y_test)","e77fcb4e":"rfc_predict = rfc.predict(X_test)","fed3b071":"print(classification_report(y_test, rfc_predict))","59d40ca6":"confusion_matrix(y_test, rfc_predict)","2275b311":"# Creating balance data for good recall and precision\n","9a850c67":"4.8434% (Approx 5%) Fake job post.\n"}}