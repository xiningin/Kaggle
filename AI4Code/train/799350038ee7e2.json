{"cell_type":{"457173b9":"code","b214bbe0":"code","af32143c":"code","fa1d3e2e":"code","d0956d27":"code","807c1c30":"code","36b7106f":"code","c36c9440":"code","031b9b69":"code","b247db3f":"code","db8bb8bc":"code","fcfc5b78":"code","bde23f58":"code","be0d73b6":"code","62eb70bf":"code","546d6606":"code","bbae34da":"code","46ac07fc":"markdown","aa69f924":"markdown","f2a89858":"markdown","86e49f5d":"markdown","f5ae98c3":"markdown","be210ebf":"markdown","bb0639c5":"markdown","2c12d9f7":"markdown","91369147":"markdown","6c06a1aa":"markdown","f62c8a7f":"markdown"},"source":{"457173b9":"%%time\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set()\n\nPALETTE = sns.color_palette(\"pastel\")","b214bbe0":"%%time\n\ndata_dir = \"..\/input\/tabular-playground-series-oct-2021\/\"\ndf_train = pd.read_csv(data_dir + \"train.csv\")\ndf_test = pd.read_csv(data_dir + \"test.csv\")","af32143c":"%%time\n\ndef inspect(df):\n    print(f\"Rows: {df.shape[0]}, Columns: {df.shape[1]}\")\n    print(f\"Missing: {df.isna().sum().sum()}\")\n    print(f\"Columns:\")\n    for c in df.columns:\n        print(c, end=\" \")\n\nprint(\"Training data:\")\ninspect(df_train)\nprint(\"\\n\")\n\nprint(\"\\nTest data:\")\ninspect(df_test)\nprint(\"\\n\")","fa1d3e2e":"%%time\n\nprint(\"First five rows of training data:\")\ndf_train.head()","d0956d27":"%%time\n\nprint(\"First five rows of test data:\")\ndf_test.head()","807c1c30":"%%time\n\nprint(\"Training data stats:\")\ndf_train.loc[:, \"f0\":\"f284\"].describe().T","36b7106f":"%%time\n\nprint(\"Test data stats:\")\ndf_test.loc[:, \"f0\":\"f284\"].describe().T","c36c9440":"%%time\n\n# from https:\/\/www.kaggle.com\/vishwas21\/tps-oct-21-eda-modeling\n\nTARGET = \"target\"\n\nfeatures = [col for col in df_train.columns if col not in [\"id\", TARGET]]\n\ncat_features = []\ncont_features = []\n\nfor feat in features:\n    if \"int\" in str(df_train[feat].dtype):\n        cat_features.append(feat)\n    else:\n        cont_features.append(feat)\n\nprint(f\"Categorical features ({len(cat_features)}):\")\nfor feat in cat_features:\n    print(feat, end=\" \")\n\nprint(f\"\\n\\nContinuous features ({len(cont_features)}):\")\nfor feat in cont_features:\n    print(feat, end=\" \")","031b9b69":"%%time\n\nfig, ax = plt.subplots(figsize=[10,10])\nplt.pie([len(cat_features), len(cont_features)], labels=[\"Categorical\", \"Continuous\"], \n        autopct=\"%.2f%%\", explode=[0.02]*2, pctdistance=0.5, colors=PALETTE)\nplt.title(\"Categorical vs. Continuous\", fontsize=14);\nplt.show()","b247db3f":"%%time\n\nfig, ax = plt.subplots(figsize=[10, 10])\nlabels = [\"1\", \"0\"]\nplt.pie(df_train[TARGET].value_counts(), autopct=\"%.2f%%\", labels=labels,\n        explode=[0.02]*2, pctdistance=0.5, colors=PALETTE)\nplt.title(\"Target distribution in training data\", fontsize=14)\nplt.show()","db8bb8bc":"%%time\n\n# from https:\/\/www.kaggle.com\/desalegngeb\/octps-2021-eda-xgboost-lgbm\n\ndef count_plot(data, features, hue=None, title=\"Count plot\"):\n    count = len(features)\n    nrow, ncol = int(np.ceil(count\/9)), 9\n    \n    fig, ax = plt.subplots(nrow, ncol,figsize=(22, 12), sharey=True)\n    ax = ax.flatten()\n\n    for index, feature in enumerate(features, start=1):\n        total = float(len(data)) \n        plt.subplot(nrow, ncol, index)\n        ax = sns.countplot(x=feature, data=data, hue=hue, linewidth=0, palette=PALETTE)\n        ax.set_xlabel(feature)\n        ax.set_ylabel(\"\")\n        ax.xaxis.set_label_position(\"top\")\n        ax.get_legend().remove()\n        \n    lines, labels = fig.axes[-1].get_legend_handles_labels()    \n    fig.legend(lines, labels, loc=\"upper right\", borderaxespad=4.0) \n    \n    fig.subplots_adjust(top=0.92, hspace=.3)\n    plt.suptitle(title ,fontsize=20)\n    plt.show()","fcfc5b78":"%%time\n\ncount_plot(df_train, cat_features, hue=TARGET, title=\"Categorical feature: target distribution (count plot)\")","bde23f58":"%%time\n\n# from https:\/\/www.kaggle.com\/desalegngeb\/octps-2021-eda-xgboost-lgbm\n\ndef new_density_plotter(train, test):\n    def density_plotter(features, title=\"Density plot\"):    \n        count = len(features)\n        nrow, ncol = int(np.ceil(count\/10)), 10\n        \n        fig, ax = plt.subplots(nrow, ncol, figsize=(24, 12))\n        ax = ax.flatten()\n        \n        for index, feature in enumerate(features, start=1):\n            plt.subplot(nrow, ncol, index)\n            sns_params = {\n                \"fill\": True,\n                \"alpha\": .5,\n                \"linewidth\": 0,\n            }\n            ax = sns.kdeplot(data=train[feature], label=\"train\", **sns_params)\n            ax = sns.kdeplot(data=test[feature], label=\"test\", **sns_params)\n            ax.xaxis.set_label_position(\"top\")\n            ax.set_ylabel(\"\")\n            ax.set_yticks([])\n            ax.set_xticks([])\n\n        lines, labels = fig.axes[-1].get_legend_handles_labels()    \n        fig.legend(lines, labels, loc=\"upper center\", borderaxespad=4.0) \n\n        fig.subplots_adjust(top=0.90, hspace=.2)\n        plt.suptitle(title, fontsize=20)\n        plt.show()\n\n    return density_plotter\n    \ndensity_plotter = new_density_plotter(df_train, df_test)","be0d73b6":"%%time\n\ndensity_plotter(cont_features[0:60], title=\"Density plot of numerical features: train & test data (first set)\")","62eb70bf":"%%time\n\ndensity_plotter(cont_features[60:120], title=\"Density plot of numerical features: train & test data (second set)\")","546d6606":"%%time\n\ndensity_plotter(cont_features[120:180], title=\"Density plot of numerical features: train & test data (third set)\")","bbae34da":"%%time\n\ndensity_plotter(cont_features[180:], title=\"Density plot of numerical features: train & test data (last set)\")","46ac07fc":"## Categorical feature distribution","aa69f924":"### Work in-progress...\n\nTodo:\n- Summary\n- Insights\n- Conclusion","f2a89858":"## Basic setup","86e49f5d":"## Categorical vs. continuous","f5ae98c3":"### Import libraries","be210ebf":"### Work in-progress...","bb0639c5":"## Continous feature distribution","2c12d9f7":"### Load datasets","91369147":"## Inspect the datasets","6c06a1aa":"## TPS October 2021 - Trying EDA","f62c8a7f":"## Target distribution"}}