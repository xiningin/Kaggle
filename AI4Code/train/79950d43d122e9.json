{"cell_type":{"7bac6d3d":"code","11af6373":"code","bb87c612":"code","b9ca41fd":"code","bf29fa2a":"code","e86357ef":"code","5ae384fd":"code","c404539f":"code","6fce0bfd":"code","4a79cb7b":"code","7a9fb38a":"code","01c2f239":"code","fefed8be":"code","28f28a07":"code","dbdb33d6":"code","da71bf3f":"code","f9dadafd":"code","c7f9af2d":"code","440af921":"code","ce9777d8":"code","0d318523":"code","46736e8b":"code","d64f8a74":"code","5cd1ef03":"code","b0be886e":"code","1487fd8e":"code","61acb7d5":"code","c6304544":"code","41282aaa":"code","5f91574d":"code","169371b2":"code","634744e7":"code","4112a4b7":"code","dfb359c7":"code","a016fd03":"code","2d251fb1":"code","59a61a4f":"code","38e245c4":"code","48957abe":"code","160edadb":"code","16e889f5":"code","bf254a0c":"code","9773aad9":"code","e0274420":"code","b19949f3":"code","1c18a222":"code","2c4b2f47":"code","5c43d961":"code","66258251":"code","b3944ca2":"code","01aab687":"code","280f5e41":"code","ddf0f167":"code","ebe7e87f":"code","d201b90d":"code","1b0b79cb":"code","7544491e":"code","a95d7b4c":"code","11516f23":"code","c7d9c8e3":"code","6a75722a":"code","cf26d5bd":"code","34d16e15":"code","bcf2f4d4":"code","d2716c5b":"code","7a4b12fe":"code","b60f8b1b":"code","6138ecac":"code","529478de":"code","c5f5f0b0":"code","8d5750dd":"markdown","cfc4204a":"markdown","9a1e784c":"markdown","d2ab960a":"markdown","0e3ddc36":"markdown","12953a59":"markdown","dc6a9df0":"markdown","2eeec7a2":"markdown","24f2cdc4":"markdown","e2e0fae6":"markdown","dec981e8":"markdown","24a6fb00":"markdown","3b7b5c7f":"markdown","5d87fbbd":"markdown","0800b29c":"markdown","bc7e66b3":"markdown","d98bc0c8":"markdown","0f809be9":"markdown","97c596cc":"markdown","41cf0426":"markdown","c67728e3":"markdown","c708c25e":"markdown","06e6496d":"markdown","ae905866":"markdown","70f3bc0e":"markdown","0915de58":"markdown","007fc9ed":"markdown","ac893230":"markdown","dfdf3d05":"markdown","07756441":"markdown","1ce6810c":"markdown","8b50c986":"markdown","71b85519":"markdown","2d7ed88c":"markdown","9d900cb1":"markdown","1da48bc5":"markdown","05d0b17a":"markdown","ce0f8f42":"markdown","9997c7d2":"markdown","94b64d4c":"markdown","be9caa7a":"markdown","f3299ef1":"markdown","fd5a52e6":"markdown","563128d3":"markdown","54fe9479":"markdown","b5f632eb":"markdown","82a83991":"markdown","e4fe76fd":"markdown","ee13a37c":"markdown","8ad27244":"markdown","dbfdb6f3":"markdown","75ae7f69":"markdown","a80dc3fa":"markdown","d6135820":"markdown","a30b0d02":"markdown","6ae439de":"markdown","b3daff16":"markdown","054c270d":"markdown","0b40038e":"markdown","c3961e27":"markdown"},"source":{"7bac6d3d":"\"\"\"\nfrom fake_useragent import UserAgent \nfrom bs4 import BeautifulSoup    \nimport requests  \nimport re\nimport time\nimport pandas as pd\nimport numpy as np\nimport itertools\nfrom joblib import Parallel, delayed\nfrom tqdm.notebook import tqdm\n\n\n\n\n# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044e \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c data_dict\ndef parsing_page_one_ad(url):\n\n    response = requests.get(url, headers={'User-Agent': UserAgent().chrome})    \n    response.encoding ='utf8'   \n    \n    # \u0422\u0435\u043f\u0435\u0440\u044c \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0431\u044a\u0435\u043a\u0442 BeautifulSoup, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044f html \u043f\u0430\u0440\u0441\u0435\u0440    \n    page = BeautifulSoup(response.text, 'html.parser')\n    data_dict = {}\n\n    data_dict['car_url'] = url\n    data_dict['parsing_unixtime'] = int(time.time())\n\n\n     # \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u0445 script \u0438\u0449\u0435\u043c \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 'complectation\":{\"id\"'\n    for script in page.find_all(\"script\"):\n        if 'complectation\":{\"id\"' in str(script):\n            a = str(script)  # \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c a \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0443\n    # \u0432 a  \u0438\u0449\u0435\u043c 'complectation\":' \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u043c\u0435\u0436\u0434\u0443 {}. \u041e\u0442\u0441\u0435\u043a\u0430\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u043e, \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f\n            data_dict['complectation_dict'] = re.search(r'complectation\":{\"id.*?}', a)[0][15:]\n\n        if 'equipment\":{' in str(script):\n            a = str(script)  # \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c a \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0443\n        # \u0432 a  \u0438\u0449\u0435\u043c 'equipment\":' \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u043c\u0435\u0436\u0434\u0443 {}. \u041e\u0442\u0441\u0435\u043a\u0430\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u043e, \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f\n            data_dict['equipment_dict'] = re.search(r'equipment\":{.*?}', a)[0][11:]\n\n        if '{\"mileage\":' in str(script):\n            a = str(script)  # \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c a \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0443\n        # \u0432 a  \u0438\u0449\u0435\u043c '{\"mileage\":' \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u043c\u0435\u0436\u0434\u0443 {}. \u041e\u0442\u0441\u0435\u043a\u0430\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u043e, \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f\n            data_dict['mileage'] = re.search(r'\"mileage\":\\d*', a)[0][10:]\n\n        if '\"model_info\":' in str(script):\n            a = str(script)  # \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c a \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0443\n            data_dict['model_info'] = re.search(r'\"model_info\":{.*?}', a)[0][13:]\n            data_dict['model_name'] = re.search(r'model_info\":{\"code\":\".*?\"', a)[0][20:].strip('\"')\n\n        if 'super_gen\":{' in str(script):\n            a = str(script)  # \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c a \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0443\n            data_dict['super_gen'] = re.search(r'super_gen\":{.*?}', a)[0][11:] \n\n        if 'vendor\":\"' in str(script):\n            a = str(script)  # \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c a \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0443\n            data_dict['vendor'] = re.search(r'vendor\":\".*?\"', a)[0][9:].strip('\"')\n\n\n    for tag in page.find_all('div'):\n        if tag.get(\"title\") == \"\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f\":\n            data_dict['sell_id'] = re.search(r'\\d+', tag.text)[0]\n\n\n    for tag in page.find_all(\"meta\"):\n        if tag.get(\"itemprop\") == \"bodyType\":\n            data_dict['bodyType'] = tag.get(\"content\")\n\n        if tag.get(\"itemprop\") == \"brand\":\n            data_dict['brand'] = tag.get(\"content\")\n\n        if tag.get(\"itemprop\") == \"color\":\n            data_dict['color'] = tag.get(\"content\")\n\n        if tag.get(\"itemprop\") == \"description\":\n            data_dict['description'] = tag.get(\"content\")\n\n        if tag.get(\"itemprop\") == \"engineDisplacement\":\n            data_dict['engineDisplacement'] = tag.get(\"content\")\n\n        if tag.get(\"itemprop\") == \"enginePower\":\n            data_dict['enginePower'] = tag.get(\"content\")\n\n        if tag.get(\"itemprop\") == \"fuelType\":\n            data_dict['fuelType'] = tag.get(\"content\")\n\n        if tag.get(\"itemprop\") == \"modelDate\":\n            data_dict['modelDate'] = tag.get(\"content\")\n\n        if tag.get(\"itemprop\") == \"name\":\n            data_dict['name'] = tag.get(\"content\")\n\n        if tag.get(\"itemprop\") == \"numberOfDoors\":\n            data_dict['numberOfDoors'] = tag.get(\"content\")\n\n        if tag.get(\"itemprop\") == \"price\":\n            data_dict['price'] = tag.get(\"content\")\n\n        if tag.get(\"itemprop\") == \"priceCurrency\":\n            data_dict['priceCurrency'] = tag.get(\"content\")\n\n        if tag.get(\"itemprop\") == \"productionDate\":\n            data_dict['productionDate'] = tag.get(\"content\")\n\n        if tag.get(\"itemprop\") == \"vehicleConfiguration\":\n            data_dict['vehicleConfiguration'] = tag.get(\"content\")\n\n        if tag.get(\"itemprop\") == \"vehicleTransmission\":\n            data_dict['vehicleTransmission'] = tag.get(\"content\")\n\n\n    span_CardInfoRow__cell = page.find_all('span', {'class': 'CardInfoRow__cell'})\n\n    for i,tag in enumerate (span_CardInfoRow__cell):\n        if tag.text == \"\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b\":\n            data_dict['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = span_CardInfoRow__cell[i+1].text.replace(u'\\xa0', u' ') # \u0432  \u043a\u043e\u043d\u0446\u0435 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u044e\u043d\u0438\u043a\u043e\u0434\u043e\u0432\u0441\u043a\u0438\u0439 \u043f\u0440\u043e\u0431\u0435\u043b\n\n        if tag.text == \"\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435\":\n            data_dict['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'] = span_CardInfoRow__cell[i+1].text.replace(u'\\xa0', u' ') # \u0432  \u043a\u043e\u043d\u0446\u0435 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u044e\u043d\u0438\u043a\u043e\u0434\u043e\u0432\u0441\u043a\u0438\u0439 \u043f\u0440\u043e\u0431\u0435\u043b    \n\n        if tag.text == \"\u041f\u0422\u0421\":\n            data_dict['\u041f\u0422\u0421'] = span_CardInfoRow__cell[i+1].text.replace(u'\\xa0', u' ') # \u0432  \u043a\u043e\u043d\u0446\u0435 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u044e\u043d\u0438\u043a\u043e\u0434\u043e\u0432\u0441\u043a\u0438\u0439 \u043f\u0440\u043e\u0431\u0435\u043b    \n\n        if tag.text == \"\u041f\u0440\u0438\u0432\u043e\u0434\":\n            data_dict['\u041f\u0440\u0438\u0432\u043e\u0434'] = span_CardInfoRow__cell[i+1].text.replace(u'\\xa0', u' ') # \u0432  \u043a\u043e\u043d\u0446\u0435 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u044e\u043d\u0438\u043a\u043e\u0434\u043e\u0432\u0441\u043a\u0438\u0439 \u043f\u0440\u043e\u0431\u0435\u043b \n\n        if tag.text == \"\u0420\u0443\u043b\u044c\":\n            data_dict['\u0420\u0443\u043b\u044c'] = span_CardInfoRow__cell[i+1].text.replace(u'\\xa0', u' ') # \u0432  \u043a\u043e\u043d\u0446\u0435 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u044e\u043d\u0438\u043a\u043e\u0434\u043e\u0432\u0441\u043a\u0438\u0439 \u043f\u0440\u043e\u0431\u0435\u043b\n\n        if tag.text == \"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\":\n            data_dict['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435'] = span_CardInfoRow__cell[i+1].text.replace(u'\\xa0', u' ') # \u0432  \u043a\u043e\u043d\u0446\u0435 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u044e\u043d\u0438\u043a\u043e\u0434\u043e\u0432\u0441\u043a\u0438\u0439 \u043f\u0440\u043e\u0431\u0435\u043b \n\n        if tag.text == \"\u0422\u0430\u043c\u043e\u0436\u043d\u044f\":\n            data_dict['\u0422\u0430\u043c\u043e\u0436\u043d\u044f'] = span_CardInfoRow__cell[i+1].text.replace(u'\\xa0', u' ') # \u0432  \u043a\u043e\u043d\u0446\u0435 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u044e\u043d\u0438\u043a\u043e\u0434\u043e\u0432\u0441\u043a\u0438\u0439 \u043f\u0440\u043e\u0431\u0435\u043b\n\n    return data_dict\n\n    \n# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u0441\u044b\u043b\u043e\u043a links_list  \u043d\u0430 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439  \ndef extraction_links(url):\n    links_list =[] \n    response = requests.get(url, headers={'User-Agent': UserAgent().chrome})  \n    response.encoding ='utf8'\n    page = BeautifulSoup(response.text, 'html.parser') \n    links = page.find_all('a', class_='Link ListingItemTitle-module__link')\n    \n    for link in links:\n        links_list.append(link.get(\"href\"))\n    return links_list\n    \n    \n    \n    \n    \ndf = pd.DataFrame() # \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \n\nurl_link_list = [] # \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u043e \u0433\u043e\u0434\u0430\u043c \u0438 \u043d\u043e\u043c\u0435\u0440\u0430\u043c \u043e\u0442 1 \u0434\u043e 99\n\nranges = [range(2006, 2011), range(1, 100)] # \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0433\u043e\u0434\u0430 \u0438 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0435\u043c \u043f\u0430\u0440\u0441\u0438\u0442\u044c \n\n# index[0] - year, index[1] - page \nfor index in itertools.product(*ranges):\n    # \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u0441\u044b\u043b\u043a\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u0430\u043c\u0438 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439\n    \u043d\u0430  = (f\"https:\/\/auto.ru\/moskva\/cars\/{index[0]}-year\/all\/?output_type=table&page={index[1]}\")\n    url_link_list.append(url_links) # \u0437\u0430\u043d\u043e\u0441\u0438\u043c \u0438\u0445 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n    \nlinks_list = [] # \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0441\u0441\u044b\u043b\u043e\u043a \u043d\u0430 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f c \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439\n\n#for url_links in url_link_list:\n# \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0432 links_list \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0441\u044b\u043b\u043e\u043a \u043d\u0430 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f\ntry:\n        #links_list = extraction_links(url_links)\n    links_list = Parallel(n_jobs = 2)(delayed(extraction_links)(url_links) for url_links in url_link_list)\nexcept:\n    pass \n\nads_dict_list = [] # \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439\n\nfor links in links_list:\n    try:\n        ads_dict_list = Parallel(n_jobs = 2)(delayed(parsing_page_one_ad)(ad_url) for ad_url in links)\n    except:\n        pass\n    \n    for ad in ads_dict_list:\n        try:\n            df = df.append(ad, ignore_index=True)\n        except:\n            pass\n\ndf.to_csv('_auto_ru_XXXX-XXXX.csv', encoding = 'utf-8', index=False) # \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 \u0432 \u0444\u0430\u0439\u043b\n\"\"\"","11af6373":"\"\"\"\nimport os\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame()\nlist_file = os.listdir(path=\".\") # \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u043f\u0430\u043f\u043a\u0435\n\nfor file in list_file:\n    if '.csv' in file: # \u0435\u0441\u043b\u0438 \u0443 \u0444\u0430\u0439\u043b\u0430 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 .csv, \u0442\u043e \u0447\u0438\u0442\u0430\u0435\u043c \u0435\u0433\u043e \u043a\u0430\u043a DF\n        df_temp = pd.read_csv(file)\n        df = pd.concat([df, df_temp], ignore_index=True)\n        \ndf = df.drop_duplicates(subset=['car_url']) # \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u043f\u043e URL \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f\n\ndf = df.replace('{}',  None) # \u0437\u0430\u043c\u0435\u043d\u0430 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 \u043d\u0430 NaN\ndf['mileage'] = df['mileage'].apply(lambda x: int(x) if type(x) == str else x) # \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 'mileage' \u043a \u0447\u0438\u0441\u043b\u043e\u0432\u043c\u0443 \u0432\u0438\u0434\u0443\ndf = df.replace(np.nan,  None)\n\ndf.to_csv('auto_ru_moskva_12_12_2020.csv', encoding = 'utf-8', index=False)\n\"\"\"","bb87c612":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sys\nimport seaborn as sns\nimport datetime\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom tqdm.notebook import tqdm\n\nfrom catboost import CatBoostRegressor\n\nfrom sklearn.model_selection import train_test_split, KFold, GridSearchCV, RandomizedSearchCV\nfrom sklearn.preprocessing import LabelEncoder, PolynomialFeatures\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, StackingRegressor","b9ca41fd":"pd.set_option('display.max_columns', None) #\u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","bf29fa2a":"print('Python       :', sys.version.split('\\n')[0])\nprint('Numpy        :', np.__version__)","e86357ef":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","5ae384fd":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","c404539f":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e \u0441\u0431\u043e\u0440\u0443 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0441\u0442\u043e\u043b\u0431\u0446\u0443\n\n\ndef my_describe(df):\n    \"\"\"\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 \u0432 \u0443\u0434\u043e\u0431\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u0435\"\"\"\n    temp = {}\n    temp['\u0418\u043c\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430'] = list(df.columns)\n    temp['\u0422\u0438\u043f'] = df.dtypes\n    temp['\u0412\u0441\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439'] = df.describe(include='all').loc['count']\n    temp['\u0427\u0438\u0441\u043b\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432'] = df.isnull().sum().values \n    temp['\u041a\u043e\u043b-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445'] = df.nunique().values\n    temp['\u041c\u0438\u043d\u0438\u043c\u0443\u043c'] = df.describe(include='all').loc['min']\n    temp['\u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c'] = df.describe(include='all').loc['max']\n    temp['\u0421\u0440\u0435\u0434\u043d\u0435\u0435'] = df.describe(include='all').loc['mean']\n    temp['\u041c\u0435\u0434\u0438\u0430\u043d\u0430'] = df.describe(include='all').loc['50%']\n    temp = pd.DataFrame.from_dict(temp, orient='index')\n    display(temp.T)\n    return\n\n\ndef show_plot_boxplot(df, column, bins=80):\n    \"\"\"\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0443 \u0438 boxplot-\u0430\"\"\"\n    color_text = plt.get_cmap('PuBuGn')(0.9)\n    plt.style.use('seaborn')\n    plt.rcParams['figure.figsize'] = (10, 4)\n    _, axes = plt.subplots(2, 1)\n    axes[0].hist(df[column], bins=bins)\n    axes[0].set_title(\"\u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0438 boxplot \u0434\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \"+column)\n    axes[1].boxplot(df[column], vert=False, showmeans = True)\n    axes[1].set_title('')\n    return\n\n\n# \u041f\u0440\u043e\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0440\u0430\u0441\u0447\u0435\u0442\u0430 IQR \u0438 \u043a\u0432\u0430\u0440\u0442\u0438\u043b\u0435\u0439.\n\ndef IQR_perc(df,list_cols):\n    temp = {}\n    temp['\u0418\u043c\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430'] = list_cols\n    temp['IQR'] = df[list_cols].quantile(0.75) - df[list_cols].quantile(0.25)\n    temp['perc25'] = df[list_cols].quantile(0.25)\n    temp['perc75'] = df[list_cols].quantile(0.75)\n    temp['\u041b. \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432'] = df[list_cols].quantile(0.25) - 1.5*(df[list_cols].quantile(0.75) - df[list_cols].quantile(0.25))\n    temp['\u041f. \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432'] =df[list_cols].quantile(0.75) + 1.5*(df[list_cols].quantile(0.75) - df[list_cols].quantile(0.25))\n    temp = pd.DataFrame.from_dict(temp, orient='index')\n    display(temp.T)\n    return\n\n\ndef mape(y_true, y_pred):\n    return np.mean(np.abs((y_pred-y_true)\/y_true)) # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f MAPE \u2013 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e\u0439 \u043e\u0448\u0438\u0431\u043a\u0438","6fce0bfd":"VERSION    = 15\nDIR_TRAIN = '\/kaggle\/input\/autorumoskva\/' # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b \u043a \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0443 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\nDIR_TEST   = '\/kaggle\/input\/sf-dst-car-price-prediction\/'\nVAL_SIZE   = 0.20   # 20%\n\n# CATBOOST\nITERATIONS = 5000\nLR         = 0.1","4a79cb7b":"!ls '..\/input'","7a9fb38a":"train = pd.read_csv(DIR_TRAIN+'auto_ru_moskva_12_12_2020.csv') # \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\ntest = pd.read_csv(DIR_TEST+'test.csv')\nsample_submission = pd.read_csv(DIR_TEST+'sample_submission.csv')","01c2f239":"train.sample(5)","fefed8be":"my_describe(train)","28f28a07":"plt.figure(figsize=(6, 6))\nplt.ylim(top=3_000_000)\nax = sns.boxplot(y=\"price\", data=train)","dbdb33d6":"len(train[train['price']>3_000_000])","da71bf3f":"print(f'\u041e\u0431\u0449\u0430\u044f \u0434\u043e\u043b\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 \"price\" :', round(len(train[train['price']>3_000_000])\/len(train) * 100,2), '%')","f9dadafd":"test.head(5)","c7f9af2d":"my_describe(test)","440af921":"# \u0412 train \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a Image, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432 test \u0441\u0440\u0430\u0437\u0443 \u0435\u0433\u043e \u0443\u0434\u0430\u043b\u0438\u043c\ntest.drop(['image'], axis=1,inplace=True)","ce9777d8":"# \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u0430 \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u0437 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\ny = train['price']","0d318523":"train.drop(['price'], axis=1,inplace=True)","46736e8b":"df_train = train#[columns]\ndf_test = test#[columns]\n\n# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","d64f8a74":"my_describe(data)","5cd1ef03":"#\u0423\u0434\u0430\u043b\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043d\u0435 \u043d\u0435\u0441\u0443\u0449\u0438\u0435 \u0432 \u0441\u0435\u0431\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f, \u0438 \u043d\u0435 \u0432\u043b\u0438\u044f\u0449\u0438\u0435 \u043d\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0446\u0435\u043d\u044b \ndata.drop(['car_url', 'parsing_unixtime', 'sell_id'], axis=1,inplace=True)\n# \u0412 \u0441\u0432\u044f\u0437\u0438 \u0441 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0442\u0435\u043a\u0441\u0442\u0430, \u0442\u0430\u043a\u0436\u0435 \u0443\u0434\u0430\u043b\u0438\u043c 'description'\ndata.drop(['description'], axis=1,inplace=True)","b0be886e":"# \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043a\u0430\u0440\u0442\u0443 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445\nf, ax = plt.subplots(figsize=(12, 5))\nsns.heatmap(data.isnull(), cbar=True)\ndata.isnull().sum()","1487fd8e":"# \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0431\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u0440\u043e\u043a \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438\ndata.shape[0] - data.dropna().shape[0]","61acb7d5":"#\u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c \u043e \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 \"complectation_dict\",'equipment_dict' \u0438 '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'.\n#\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043d\u0438\u0445\ncols ={\"complectation_dict\",'equipment_dict', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'}\nfor col in cols:\n    data[f'{col}_isNAN'] = pd.isna(data[col]).astype('uint8')","c6304544":"# \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u043f\u0443\u0441\u043a \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c \u0432 \"\u041f\u0422\u0421\". \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0435\u0433\u043e \u0441\u0430\u043c\u044b\u043c \u0447\u0430\u0441\u0442\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c: data[\"\u041f\u0422\u0421\"].value_counts().index[0]\ndata[\"\u041f\u0422\u0421\"] = data[\"\u041f\u0422\u0421\"].fillna(data[\"\u041f\u0422\u0421\"].value_counts().index[0])","41282aaa":"data[\"complectation_dict\"].value_counts()","5f91574d":"data[\"complectation_dict\"] = data[\"complectation_dict\"].fillna('{\"id\":\"0\"}')\ndata['complectation_dict_isNAN'] = data[\"complectation_dict\"].apply(lambda x: 1 if x == '{\"id\":\"0\"}' else 0)\ndata['complectation_dict_isNAN'] = data['complectation_dict_isNAN'].astype('uint8')","169371b2":"data[\"equipment_dict\"].value_counts()","634744e7":"# \u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0437\u0434\u0435\u0441\u044c \u043d\u0435 \u0432\u0438\u0434\u043d\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 : {\"unknown\" :true}","4112a4b7":"data[\"equipment_dict\"] = data[\"equipment_dict\"].fillna('{\"unknown\" :true}')","dfb359c7":"  data[\"\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435\"].value_counts()  ","a016fd03":"data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'][data[\"\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435\"].isnull()].value_counts()","2d251fb1":"data[\"\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435\"] = data[\"\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435\"].fillna('\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e')","59a61a4f":"my_describe(data)","38e245c4":"# \u041f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","48957abe":"data.nunique(dropna=False)","160edadb":"# \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0430\u043c \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0442\u0438\u043f\u043e\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nnum_cols = ['mileage', 'modelDate', 'productionDate']\nbin_cols =['\u0420\u0443\u043b\u044c', '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435', '\u0422\u0430\u043c\u043e\u0436\u043d\u044f', '\u041f\u0422\u0421'] \ncategory_cols = ['model_info', 'model_name', 'name', 'super_gen', 'complectation_dict', 'equipment_dict',  'bodyType', 'brand', 'color', 'fuelType', 'numberOfDoors', \n                 'priceCurrency',  'vehicleConfiguration', 'vehicleTransmission', 'vendor', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435', '\u041f\u0440\u0438\u0432\u043e\u0434', 'engineDisplacement', 'enginePower']\n# 'priceCurrency' - \u0442\u0438\u043f \u0432\u0430\u043b\u044e\u0442\u044b. \u0412 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0443 \u043d\u0430\u0441 \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u0431\u043b\u0438, \u043d\u043e \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0438 \u0434\u0440. \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0442\u043d\u0435\u0441\u0435\u043c \u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c ","16e889f5":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b IQR, \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0431\u043e\u043a\u0441\u043f\u043b\u043e\u0442\u044b \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nIQR_perc(data, num_cols)\nfor column in num_cols:\n    show_plot_boxplot(data,column)","bf254a0c":"# \u0414\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \n# \u0438 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043c \u043a \u043d\u0438\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0432 \u0432\u0438\u0434\u0435 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 df\nX = data.query('sample == 1').drop(['sample'], axis=1)\n\ndf = pd.DataFrame(X[num_cols]).reset_index()\ndf.drop(['index'], axis=1,inplace=True)\ndf['price']=y\ndf","9773aad9":"correlation = df.corr()\nplt.figure(figsize=(10, 6))\nsns.heatmap(correlation, annot=True, cmap='coolwarm')","e0274420":"# \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u0430 \u043f\u0440\u0438  LabelEncoder\n\nlabel_encoder = LabelEncoder()\n\nfor column in bin_cols:\n    data[column] = label_encoder.fit_transform(data[column])\n    \n# \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438    \ndata.head()","b19949f3":"for col in ['bodyType', 'color', 'engineDisplacement', 'enginePower', 'fuelType', 'numberOfDoors', 'priceCurrency', \n'vehicleTransmission', 'vendor', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435', '\u041f\u0440\u0438\u0432\u043e\u0434']:\n    print(f'{col}: {data[col].unique()}')","1c18a222":"# \u0412 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b' \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u044e\u043d\u0438\u043a\u043e\u0434\u043e\u0432\u0441\u043a\u0438\u0439 \u043f\u0440\u043e\u0431\u0435\u043b \u043d\u0430 ascii \u043f\u0440\u043e\u0431\u0435\u043b\ndata[\"\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b\"] = data[\"\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b\"].str.replace(u'\\xa0', '')","2c4b2f47":"# \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u0430\n# \u0432 \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \n\"\"\"label_encoder = LabelEncoder()\n\nfor column in category_cols:\n    data[column] = label_encoder.fit_transform(data[column])\ndata.head()\"\"\"\n\nfor colum in category_cols:\n    data[colum] = data[colum].astype('category').cat.codes","5c43d961":"data['km_in_year'] = data['mileage'] \/ ((datetime.datetime.now().year +1) - data['productionDate'])\nnum_cols.append('km_in_year')\n\n# \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (\u0430\u0442\u0438\u043a\u0432\u0430\u0440\u043d\u044b\u0435 \u0438 \u0441\u0442\u0430\u0440\u044b\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 ) \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0443\u0445\u0443\u0434\u0448\u0438\u043b\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0443\n\n#data['antique_car'] = data['productionDate'].apply(lambda x: 1 if x<(datetime.datetime.now().year-50) else 0)\n#data['old_car'] = data['productionDate'].apply(lambda x: 1 if \\\n#((datetime.datetime.now().year-50)<= x <=(datetime.datetime.now().year-20)) else 0)","66258251":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435\npoly = PolynomialFeatures(3,interaction_only=True)\ndata_num = pd.DataFrame(poly.fit_transform(data[num_cols].values))","b3944ca2":"# \u041f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e. \u0410 \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432\u0437\u044f\u0442\u044c \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u0443 \u043e\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0435\u0433\u043e\u0441\u044f \u0440\u0443\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430: y=np.exp(y)-1\ny= np.log(y+1)\n# \u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043e\u0442 \u043d\u0438\u0445 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ndata[num_cols] = np.log(data[num_cols]+1)\ndata_num = np.log(data_num +1)","01aab687":"# \u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043c \u043a \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443 ,\u0431\u043b\u043e\u043a \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ndata = pd.concat([data,data_num], axis=1)","280f5e41":"# \u043e\u0442\u0434\u0435\u043b\u0438\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043e\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e:\n\nX = data.query('sample == 1').drop(['sample'], axis=1)\nX_sub = data.query('sample == 0').drop(['sample'], axis=1)","ddf0f167":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=VAL_SIZE, shuffle=True, random_state=RANDOM_SEED)","ebe7e87f":"# \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u043d\u0430 Kaggle\nmodel1 = CatBoostRegressor(iterations = ITERATIONS,\n                          learning_rate = LR,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE']\n                         )\n#model1.fit(X_train, y_train,\n#         eval_set=(X_test, y_test),\n#         verbose_eval=100,\n#         use_best_model=True,\n#         plot=True\n#         )","d201b90d":"predict = np.round((np.exp(model1.predict(X_test))-1)\/1000) *1000\ny_test_exp = np.exp(y_test)-1\n\n# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test_exp, predict))*100:0.2f}%\")","1b0b79cb":"# \u041d\u0435 \u0437\u043d\u0430\u044e \u043f\u043e\u043a\u0430 \u0447\u0442\u043e \u044d\u0442\u043e, \u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044e \u043d\u0430 \u0431\u0443\u0434\u0443\u0449\u0435\u0435\n#model1.save_model('catboost_single_model_baseline.model')","7544491e":"# \u041f\u043e\u0438\u0441\u043a \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f CatBoostRegressor\ncbr = CatBoostRegressor()\n\ngrid = {'learning_rate': [round(x,3) for x in np.linspace(start = 0.025, stop = 0.4, num = 40)],\n        'depth': [int(x) for x in np.linspace(start = 5, stop = 10, num = 5)],\n        'l2_leaf_reg': [int(x) for x in np.linspace(start = 1, stop = 5, num = 5)]}\n\n#grid_search_result = cbr.grid_search(grid, \n#                                       X=X_train, \n#                                       y=y_train, \n#                                       plot=False)\n#print(grid_search_result['params'])\n\n# {'depth': 7, 'l2_leaf_reg': 1, 'learning_rate': 0.083} bestTest = 0.01254271153 bestIteration = 3746","a95d7b4c":"model2 = CatBoostRegressor(iterations = 3747,\n                          learning_rate = 0.083,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE'],\n                          depth = 7,\n                          l2_leaf_reg = 1 \n                         )\n#model2.fit(X_train, y_train,\n#         eval_set=(X_test, y_test),\n#         verbose_eval=100,\n#         use_best_model=True,\n#         plot=True\n#         )","11516f23":"#predict = np.round((np.exp(model2.predict(X_test))-1)\/1000) *1000#\n#y_test_exp = np.exp(y_test)-1\n\n# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\n#print(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test_exp, predict))*100:0.2f}%\")","c7d9c8e3":"# \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b\nrandom_grid = {'n_estimators': [int(x) for x in np.linspace(start = 100, stop = 400, num = 4)],\n               'max_features': ['auto', 'sqrt'],\n               'max_depth': [int(x) for x in np.linspace(5, 15, num = 6)] + [None],\n               'min_samples_split': [2, 5, 10],\n               'min_samples_leaf': [1, 2, 4],\n               'bootstrap': [True, False]}\n#rf = RandomForestRegressor(random_state = RANDOM_SEED)\n#rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=10, random_state=RANDOM_SEED, n_jobs = -1)\n#rf_random.fit(X_train, y_train)\n#rf_random.best_params_\n\n#best_params_: \n#{'n_estimators': 200,\n #'min_samples_split': 2,\n #'min_samples_leaf': 2,\n #'max_features': 'auto',\n# 'max_depth': None,\n# 'bootstrap': True}","6a75722a":"rf = RandomForestRegressor(random_state=RANDOM_SEED, n_estimators=200, min_samples_split=2, min_samples_leaf=2, \n                            max_features='auto', max_depth=None, bootstrap=True)\n#rf.fit(X_train, y_train)\n\n#predict2 = np.round((np.exp(rf.predict(X_test))-1)\/1000) *1000\n#y_test_exp2 = np.exp(y_test)-1\n\n# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\n#print(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test_exp2, predict2))*100:0.2f}%\")","cf26d5bd":"#knr = KNeighborsRegressor()\n\n#cv = 5\n#grid = {'n_neighbors': [int(x) for x in np.linspace(start = 3, stop = 7, num = 3)],\n        'weights': ['uniform', 'distance'],\n        'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'],\n        'leaf_size': [int(x) for x in np.linspace(start = 5, stop = 50, num = 10)]}\n\n#grid_search_result = GridSearchCV(knr, param_grid=grid, cv=cv).fit(X_train, y_train)\n\n#print(grid_search_result.best_params_)\n#{'algorithm': 'auto', 'leaf_size': 40, 'n_neighbors': 7, 'weights': 'distance'}","34d16e15":"knr = KNeighborsRegressor(algorithm='auto', leaf_size=40, n_neighbors=7, weights='distance', n_jobs=-1)\n#knr.fit(X_train, y_train)\n\n#predict3 = np.round((np.exp(knr.predict(X_test))-1)\/1000) *1000\n#predict = np.exp(model.predict(X_test))-1\n#y_test_exp3 = np.exp(y_test)-1\n\n# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\n#print(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test_exp3, predict3))*100:0.2f}%\")","bcf2f4d4":"gbr = GradientBoostingRegressor(n_estimators=300, random_state=RANDOM_SEED,  warm_start=10,  tol=0.0001)\n#gbr.fit(X_train, y_train)\n\n#predict5 = np.round((np.exp(gbr.predict(X_test))-1)\/1000) *1000\n#y_test_exp5 = np.exp(y_test)-1\n\n# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\n#print(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test_exp5, predict5))*100:0.2f}%\")","d2716c5b":"# \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u043d\u0430 Kaggle\nestimators=[\n        ('rf1', RandomForestRegressor(random_state=RANDOM_SEED, n_estimators=200, min_samples_split=2, min_samples_leaf=2, \n                            max_features='auto', max_depth=5, bootstrap=True, n_jobs=-1)),\n        ('gbr', GradientBoostingRegressor(n_estimators=300, random_state=RANDOM_SEED,  warm_start=10,  tol=0.0001)),\n        ('knr', KNeighborsRegressor(algorithm='auto', leaf_size=40, n_neighbors=7, weights='distance', n_jobs=-1)),\n            ]\n\nreg1 = StackingRegressor(estimators=estimators,\n     final_estimator = CatBoostRegressor(iterations = ITERATIONS,\n                          learning_rate = 0.083,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE'],\n                          depth=7,\n                          l2_leaf_reg=1               \n                        )\n                    )\n\n    \n#reg1.fit(X, y)\n\n#predict = np.round((np.exp(reg1.predict(X))-1)\/1000) *1000\n#y_test_exp = np.exp(y)-1\n\n# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\n#print(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test_exp, predict))*100:0.2f}%\")","7a4b12fe":"# \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u043d\u0430 Kaggle\nestimators=[\n        ('rf1', RandomForestRegressor(random_state=RANDOM_SEED, n_estimators=200, min_samples_split=2, min_samples_leaf=2, \n                            max_features='auto', max_depth=5, bootstrap=True, n_jobs=-1)),\n        ('gbr', GradientBoostingRegressor(n_estimators=300, random_state=RANDOM_SEED,  warm_start=10,  tol=0.0001)),\n        ('\u0441br',  CatBoostRegressor(iterations = ITERATIONS,\n                          learning_rate = 0.083,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE'],\n                          depth=7,\n                          l2_leaf_reg=1)\n        )\n            ]\n\nreg2 = StackingRegressor(estimators=estimators,\n     final_estimator = KNeighborsRegressor(algorithm='auto', leaf_size=40, n_neighbors=7, weights='distance', n_jobs=-1)\n                    )\n\n    \n#reg2.fit(X, y)\n\n#predict = np.round((np.exp(reg2.predict(X))-1)\/1000) *1000\n#y_test_exp = np.exp(y)-1\n\n# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\n#print(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test_exp, predict))*100:0.2f}%\")","b60f8b1b":"estimators=[\n        ('rf1', RandomForestRegressor(random_state=RANDOM_SEED, n_estimators=200, min_samples_split=2, min_samples_leaf=2, \n                            max_features='auto', max_depth=5, bootstrap=True, n_jobs=-1)),\n        ('knr', KNeighborsRegressor(algorithm='auto', leaf_size=40, n_neighbors=7, weights='distance', n_jobs=-1)),\n        ('\u0441br',  CatBoostRegressor(iterations = ITERATIONS,\n                          learning_rate = 0.083,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE'],\n                          depth=7,\n                          l2_leaf_reg=1)\n        )\n            ]\n\nreg3 = StackingRegressor(estimators=estimators,\n     final_estimator = GradientBoostingRegressor(n_estimators=300, random_state=RANDOM_SEED,  warm_start=10,  tol=0.0001)\n                    )\n\n    \nreg3.fit(X, y)\n\npredict = np.round((np.exp(reg3.predict(X))-1)\/1000) *1000\ny_test_exp = np.exp(y)-1\n\n# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test_exp, predict))*100:0.2f}%\")","6138ecac":"estimators=[\n            ('\u0441br',  CatBoostRegressor(iterations = ITERATIONS,\n                          learning_rate = 0.083,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE'],\n                          depth=7,\n                          l2_leaf_reg=1)\n        )\n            ]\n\nreg4 = StackingRegressor(estimators=estimators,\n     final_estimator = GradientBoostingRegressor(n_estimators=300, random_state=RANDOM_SEED,  warm_start=10,  tol=0.0001)\n                    )\n\n    \n#reg4.fit(X, y)\n\n#predict = np.round((np.exp(reg4.predict(X))-1)\/1000) *1000\n#y_test_exp = np.exp(y)-1\n\n# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\n#print(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test_exp, predict))*100:0.2f}%\")","529478de":"predict_submission = np.round((np.exp(reg3.predict(X_sub))-1)\/1000) *1000\npredict_submission ","c5f5f0b0":"sample_submission['price'] = predict_submission\nsample_submission.to_csv(f'submission_v{VERSION}.csv', index=False)\nsample_submission.head(10)","8d5750dd":"4 \u0432\u0430\u0440\u0438\u0430\u043d\u0442","cfc4204a":"### 1. \u041f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u043e\u0442\u0441\u043c\u043e\u0442\u0440 \u0434\u0430\u043d\u043d\u044b\u0445","9a1e784c":"## \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c\u0443 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e","d2ab960a":"# Setup","0e3ddc36":"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: 26.05%","12953a59":"## \u041f\u0430\u0440\u0441\u0435\u0440 \u0441\u0430\u0439\u0442\u0430 AUTO.RU (\u0410\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c: \u0434\u0435\u043a\u0430\u0431\u0440\u044c 2020 \u0433.)","dc6a9df0":"\u0422\u0430\u043a \u043a\u0430\u043a  \u043c\u0430\u0448\u0438\u043d\u044b \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \"\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435\" \u0432\u044b\u043f\u0443\u0449\u0435\u043d\u044b \u0432 \u0440\u0430\u0437\u043d\u044b\u0435 \u0433\u043e\u0434\u044b (\u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043d\u0435 \u043d\u043e\u0432\u044b\u0435 \u0438\u0437 \u0430\u0432\u0442\u043e\u0441\u0430\u043b\u043e\u043d\u0430), \u0438 \u0437\u0430\u0447\u0430\u0441\u0442\u0443\u044e \u0438\u043c\u0435\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430, \u0442\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c: '\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e'  ","2eeec7a2":"\u041f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u043d\u0430\u0448 \u0434\u0430\u0442\u0430\u0441\u0435\u0442","24f2cdc4":"# \u0412\u044b\u0432\u043e\u0434\u044b\n\u0412 \u0438\u0442\u043e\u0433\u0435 \u0432\u0438\u0434\u0438\u043c:\n\n\n* \u041f\u043e\u043f\u044b\u0442\u043a\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0443 \u043d\u0435 \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u043e\n* \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0443, \u043d\u043e \u0435\u0435 \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0445\n* \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0443\n* \u041f\u043e\u0438\u0441\u043a \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 CatBoost \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0443\n* \u041f\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c \u0441\u0442\u0435\u043a\u0438\u043d\u0433\u0430 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0442\u0430\u043a \u043a\u0430\u043a CatBoost \u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u0435\u043d \u043a \u043d\u0430\u0431\u043e\u0440\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432,\u0430 \u0442\u0430\u043a \u0436\u0435 \u0435\u0433\u043e \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u044b \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435, \u0431\u0435\u0437 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432, \u0442\u043e \u0435\u0433\u043e \u043b\u0443\u0447\u0448\u0435 \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0441\u0442\u0435\u043a\u0438\u043d\u0433\u0430.\n* \u0424\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u043c (\u0438\u0442\u043e\u0433\u043e\u0432\u044b\u043c) \u0430\u0433\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c \u0441\u0442\u0435\u043a\u0438\u043d\u0433\u0430 \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0431\u0443\u0441\u0442\u0438\u043d\u0433. \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 -  GradientBoosting\n\n\u041f\u043e\u0447\u0435\u043c\u0443-\u0442\u043e \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442  \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 (\u0438\u0437 \u043a\u0430\u0433\u0433\u043b\u0430) \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u043e\u043b\u044c\u043a\u043e CatBoost \u0441 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438. \u041d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0436\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0435\u043a\u0438\u043d\u0433, \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c CatBoost, GradientBoosting, RandomForest \u0438  KNeighborsRegressor","e2e0fae6":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a \"\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435\"","dec981e8":"2 \u0432\u0430\u0440\u0438\u0430\u043d\u0442","24a6fb00":"### \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438","3b7b5c7f":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a \"equipment_dict\"","5d87fbbd":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a \"complectation_dict\"","0800b29c":"\u041f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f, \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442. ","bc7e66b3":"\u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c  \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:","d98bc0c8":"### \u041c\u043e\u0434\u0435\u043b\u044c 2 (\u0441 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u043c\u0438 \u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438)","0f809be9":"\u041f\u043e\u0434\u0431\u043e\u0440 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f RandomForest  ","97c596cc":"3 \u0432\u0430\u0440\u0438\u0430\u043d\u0442","41cf0426":"### **\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: 12.50%**","c67728e3":"> \u041d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e 75% \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u044d\u0442\u043e \u0446\u0435\u043d\u0430 \u0434\u043e 1_300_000\u0440. \u0418 \u0432\u0441\u0435 \u0447\u0442\u043e \u0441\u0432\u044b\u0448\u0435  3 \u043c\u043b\u043d. \u0440\u0443\u0431\u043b\u0435\u0439 - \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 ","c708c25e":"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: 17.56%","06e6496d":"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: 17.49%","ae905866":"\u041f\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c \u0441\u0442\u0435\u043a\u0438\u043d\u0433\u0430 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0442\u0430\u043a \u043a\u0430\u043a CatBoost \u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u0435\u043d \u043a \u043d\u0430\u0431\u043e\u0440\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432,\u0430 \u0442\u0430\u043a \u0436\u0435 \u0435\u0433\u043e \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u044b \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435, \u0431\u0435\u0437 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432, \u0442\u043e \u0435\u0433\u043e \u043b\u0443\u0447\u0448\u0435 \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0441\u0442\u0435\u043a\u0438\u043d\u0433\u0430.\n\n\u0424\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u043c (\u0438\u0442\u043e\u0433\u043e\u0432\u044b\u043c) \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c \u0441\u0442\u0435\u043a\u0438\u043d\u0433\u0430 \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0431\u0443\u0441\u0442\u0438\u043d\u0433. \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 -  GradientBoosting","70f3bc0e":"### \u0421\u0442\u0435\u043a\u0438\u043d\u0433. ","0915de58":"# \u041c\u043e\u0434\u0435\u043b\u0438 ML","007fc9ed":"# Submission","ac893230":"\u0422\u0430\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u043c\u044b \u043d\u0435 \u0431\u0443\u0434\u0435\u043c, \u0437\u043d\u0430\u0447\u0438\u0442 \u043d\u0443\u0436\u043d\u043e \u0440\u0435\u0448\u0438\u0442\u044c \u0447\u0435\u043c \u0438\u0445 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c","dfdf3d05":"### \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","07756441":"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: 12.66%\n\n\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430\u043c\u0438 \u0432 \u0441\u0442\u0435\u043a\u0438\u043d\u0433\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f CatBoost \u0438 GradientBoosting - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0434\u0430\u0435\u0442 \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 ","1ce6810c":"\u041f\u043e\u0434\u0431\u043e\u0440 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f GradientBoostingRegressor \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0432 \u0441\u0432\u044f\u0437\u0438 \u0441 \u0431\u043e\u043b\u044c\u0448\u0435\u0439  \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e n_estimators=300","8b50c986":"### Model 3. \u0421\u0442\u0435\u043a\u0438\u043d\u0433","71b85519":"## Data Preprocessing","2d7ed88c":"# Data","9d900cb1":"### \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","1da48bc5":"## \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","05d0b17a":"\u041f\u043e\u0434\u0431\u043e\u0440 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f KNeighborsRegressor","ce0f8f42":"\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u043c submission \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 3-\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0442\u0435\u043a\u0438\u043d\u0433\u0430","9997c7d2":"### \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","94b64d4c":"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: 48.45%","be9caa7a":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e modelDate \u0438 ProductionDate \u043a\u0430\u043a \u0438 \u043e\u0436\u0438\u0434\u0430\u043b\u043e\u0441\u044c \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u044e, \u0430 \u0442\u0430\u043a\u0436\u0435  engineDisplacement \u0438 enginePower \u0441\u043b\u0430\u0431\u043e  \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 (\u0446\u0435\u043d\u043e\u0439). \u041f\u0440\u043e\u0431\u0435\u0433 \u0436\u0435 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043a\u043e\u0440\u0440\u0435\u043b\u043b\u0438\u0440\u0443\u0435\u0442 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e - \u0447\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0440\u043e\u0431\u0435\u0433, \u0442\u0435\u043c \u043d\u0438\u0436\u0435 \u0446\u0435\u043d\u0430","f3299ef1":"1 \u0432\u0430\u0440\u0438\u0430\u043d\u0442","fd5a52e6":"### \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f","563128d3":"\u0411\u0435\u0437 \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 MAPE \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0430 16.93% ","54fe9479":"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: 16.97%\n\u041c\u043e\u0434\u0435\u043b\u044c \u0441 \u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438  \u043d\u0430  X_sub(test) \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u0430 \u043c\u0435\u0442\u0440\u0438\u043a\u0443 \u043d\u0430 0.5%","b5f632eb":"> \u0421\u0430\u043c\u044b\u043c \u0447\u0430\u0441\u0442\u044b\u043c \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 {\"id\":\"0\"}. \u0427\u0442\u043e\u0431\u044b \u043d\u0435 \u043d\u0430\u0440\u0443\u0448\u0430\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0435\u0433\u043e \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439, \u0438 \u0438\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435. \u0418 \u044f\u0447\u0435\u0439\u043a\u0430\u043c \u0432  ['complectation_dict_isNAN'], \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u044d\u0442\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e, \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u0435\u0434\u0438\u043d\u0438\u0446\u0443 ","82a83991":"## \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441\u043f\u0430\u0440\u0441\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u043e\u0432 \u0432 \u043e\u0434\u0438\u043d \u0438 \u0435\u0433\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430","e4fe76fd":"\u0412\u044b\u0432\u043e\u0434\u044b:\n\n\u041f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0430\u043c \u0438 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043c\u0430\u0448\u0438\u043d  \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0432 2010\u0433 \u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0438\u043c\u0435\u044e\u0442 \u043f\u0440\u043e\u0431\u0435\u0433 146_000 \u043a\u043c. \u0414\u0430\u043d\u043d\u044b\u0435 \u0440\u0430\u0437\u0440\u0435\u0436\u0435\u043d\u044b, \u043f\u043e\u0437\u0434\u043d\u0435\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u0438\u0445","ee13a37c":"### \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439","8ad27244":"<img src=\"https:\/\/whatcar.vn\/media\/2018\/09\/car-lot-940x470.jpg\"\/>\n\n## \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043f\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c","dbfdb6f3":"\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0443 \u043d\u0430\u0441 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044be, \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435:","75ae7f69":"## Model #1: \u041c\u043e\u0434\u0435\u043b\u044c CatBoost c \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \n\n\n![](https:\/\/pbs.twimg.com\/media\/DP-jUCyXcAArRTo.png:large)   \n\n\n\u0423 \u043d\u0430\u0441 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435. \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0442\u0430\u043a\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0431\u044b\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0430 \u043e\u0447\u0435\u043d\u044c \u0443\u0434\u043e\u0431\u043d\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 CatBoost \u043e\u0442 \u042f\u043d\u0434\u0435\u043a\u0441\u0430. [https:\/\/catboost.ai](http:\/\/)     \n\u041d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 **CatBoost \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u043b\u0443\u0447\u0448\u0438\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0434\u043b\u044f \u0442\u0430\u0431\u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445!**\n\n#### \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0432\u0438\u0434\u0435\u043e \u043e CatBoost (\u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c):\n* [\u0414\u043e\u043a\u043b\u0430\u0434 \u043f\u0440\u043e CatBoost](https:\/\/youtu.be\/9ZrfErvm97M)\n* [\u0421\u0432\u0435\u0436\u0438\u0439 \u0422\u0443\u0442\u043e\u0440\u0438\u0430\u043b \u043e\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u044b CatBoost (\u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c)](https:\/\/youtu.be\/wQt4kgAOgV0) ","a80dc3fa":"\u041e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u043d\u0435\u0431\u043e\u043b\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439: ","d6135820":"### \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e)","a30b0d02":"* \u041d\u0430 \u043b\u0438\u0434\u0435\u0440\u0431\u043e\u0440\u0434\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 15.24% \u0412\u0438\u0434\u043d\u043e \u0447\u0442\u043e \u0441\u0442\u0435\u043a\u0438\u043d\u0433 \u0432 \u0446\u0435\u043b\u043e\u043c \u0434\u0430\u0435\u0442 \u0445\u043e\u0440\u043e\u0448\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b, \u043d\u043e \u0441\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u043c \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u043c \u0441 \u043a\u0430\u0433\u0433\u043b\u0430: \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0437\u0430 \u043f\u043e\u043b\u0442\u043e\u0440\u0430 \u043c\u0435\u0441\u044f\u0446\u0430 (\u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u0432 \u0441\u043e\u0431\u0438\u0440\u0430\u043d\u0438\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432) \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u044b \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439?","6ae439de":"\u0423 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c, \u043b\u0438\u0431\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e. \u041d\u043e \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, \u0434\u0430\u0436\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u0430\u0436\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c! \u041f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 NAN \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a","b3daff16":"\u041f\u043e\u043f\u044b\u0442\u043a\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0443 \u043d\u0435 \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u043e","054c270d":"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: 21.16%","0b40038e":"## \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","c3961e27":"\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0432 \u0441\u0442\u0435\u043a\u0438\u043d\u0433\u0435  sklearn.StackingRegressor() \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432:  CatBoostRegressor, LinearRegression, KNeighborsRegressor, GradientBoostingRegressor \u0438 RandomForestRegressor. \u0418 \u0434\u043b\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043d\u0430\u0439\u0442\u0438 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f"}}