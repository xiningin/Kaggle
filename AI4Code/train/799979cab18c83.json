{"cell_type":{"76321b61":"code","21929f82":"code","d50d68cf":"code","2456c49f":"code","a35a179d":"code","567e64dc":"code","f4b71f28":"code","8a64fd22":"code","ddb9b011":"code","b34058f0":"code","31835612":"code","722928d2":"code","04ee1ab0":"code","2c827cf8":"code","a284dc59":"code","81898324":"code","2fba7a22":"code","02901a1f":"code","5fc334ca":"code","682e0508":"code","c8e60abd":"code","ee591493":"code","ad94e27d":"code","051c9ff6":"code","40908d0d":"code","3600afb2":"code","18b7522d":"code","fe444add":"code","768b874e":"code","28fe7adf":"code","54bd7af1":"code","e4704bc7":"code","5a2836b0":"code","35530a89":"code","2e2cd303":"code","20141f9d":"code","c89c1de1":"code","862aac19":"code","1af03728":"code","55d73357":"code","4972e0a9":"code","ec93bf20":"code","35d50dbd":"code","934394f3":"code","be5f090f":"code","a7b19e5a":"code","dfa6ddf4":"code","ed13cf13":"code","d9878a6e":"code","1a2bafaa":"code","64c9e52c":"code","9b40d6c1":"code","be8d4038":"code","a2caf7c5":"code","675f71f9":"code","31f6752c":"code","df43d9da":"code","b982c442":"code","0c147edb":"code","0a158f10":"code","bccde1ad":"code","9c26b13c":"markdown","a256c422":"markdown","5a0ef5a1":"markdown","e97952d0":"markdown","1970d75f":"markdown","49a6bb2f":"markdown","03112be0":"markdown"},"source":{"76321b61":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # for plotting\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","21929f82":"raw_data = pd.read_csv(\"..\/input\/pitchfork-reviews\/reviews.csv\")\nraw_data.head()","d50d68cf":"# Drop columns we won't be needing\nraw_data.drop(['url', 'pub_weekday', 'pub_day', 'pub_month',  'reviewid.1', 'Unnamed: 0'], axis = 1, inplace = True)\nraw_data.head(3)","2456c49f":"# Check the datatypes of the dataset\n# raw_data['author'] = raw_data['author'].astype(str)\nraw_data.dtypes","a35a179d":"raw_data.shape","567e64dc":"# Check for null values in the dataset\nprint(pd.isnull(raw_data).sum())\n\n# fill in the null values for the genre column\nraw_data['genre'].fillna(\"No Genre\", inplace = True)","f4b71f28":"# Drop the rows with null values for artist column\nprint(np.where(pd.isna(raw_data['artist'])))\nraw_data.drop([3388, 3440])\nraw_data.shape","8a64fd22":"# Change the score number to a whole number ranging from 1 - 100\nraw_data['score'] = raw_data['score'] * 10\nraw_data['score'] = raw_data['score'].astype(int)\nraw_data['score']","ddb9b011":"raw_data.head()","b34058f0":"strings = raw_data['author'].value_counts()[:52].index # 52 authors over 100 reviews or more\n\n# create a list containing the authors with >= 100 reviews\nauthor_names = []\nfor x in strings:\n    author_names.append(x)","31835612":"raw_data['author'].value_counts(normalize = True)[:52].sum() # percentage of all reviews","722928d2":"(raw_data['author'].value_counts() >= 100).sum() # proves how many authors have over 100 reviews or more","04ee1ab0":"author_less = []\nstrings = raw_data['author'].value_counts()[52:].index\nfor x in strings:\n    author_less.append(x)\n(author_less)","2c827cf8":"# get the indices of the authors with >= 100 reviews, needed for data cleaning\nkeep_indices = []\nincrement = -1\nfor i in raw_data['author']: # iterate through the author column of the dataframe\n    increment += 1 # increase when the iteration for the row has been complete to check if the author is in the list\n    for j in range(len(author_names)): # iterate through the names with >= 100 reviews\n        if i == author_names[j]: # check if they are the same\n           keep_indices.append(increment) # append the indice\nprint(keep_indices, end = ' ')","a284dc59":"# keep_indices.remove(3388)\n# keep_indices.remove(3440)","81898324":"# compare if the amonut of reviews is the same as the authors total reviews with >= 100 \nprint(len(keep_indices))\nprint(raw_data['author'].value_counts()[:52].sum())","2fba7a22":"# get the indices we want to drop\nremove_indices = []\nincrement = -1\nfor i in raw_data['author']:\n    increment += 1\n    for j in range(len(author_less)):\n        if i == author_less[j]:\n            remove_indices.append(increment)\nprint(remove_indices)","02901a1f":"# compare if the amonut of reviews is the same as the authors total reviews with >= 100 \nprint(len(remove_indices))\nprint(raw_data['author'].value_counts()[52:].sum())","5fc334ca":"subdata = raw_data.drop(remove_indices)\nsubdata['author'].value_counts() # check if the <= 100 reviews have been removed","682e0508":"less100data = raw_data.drop(keep_indices)\nless100data['author'].value_counts()","c8e60abd":"plt.figure(figsize = (10, 10))\nsubdata['author'].value_counts().plot(kind='barh')","ee591493":"subdata['genre'].value_counts().plot.pie(figsize = (10, 10), autopct = '%1.1f', fontsize = 15)","ad94e27d":"less100data['genre'].value_counts().plot.pie(figsize = (10, 10), autopct = '%1.1f', fontsize = 15)","051c9ff6":"subdata['score'].value_counts().plot.pie(figsize = (10,10), autopct = \"%1.1f\")","40908d0d":"# Data clean to separate the genres for >= 100 reviews\nsubdata.columns","3600afb2":"strings = set(subdata['genre'])\n\ngenres = []\nfor i in strings:\n    genres.append(i)\ngenres","18b7522d":"# Solution to separating the genres for authors with >= 100 reviews for Pitchfork\nrap_data = subdata[subdata['genre'] == 'rap']\nelectronic_data = subdata[subdata['genre'] == 'electronic']\npop_and_rb_data = subdata[subdata['genre'] == 'pop\/r&b']\nexperimental_data = subdata[subdata['genre'] == 'experimental']\nmetal_data = subdata[subdata['genre'] == 'metal']\nglobal_data = subdata[subdata['genre'] == 'global']\nrock_data = subdata[subdata['genre'] == 'rock']\nfolk_and_country_data = subdata[subdata['genre'] == 'folk\/country']\njazz_data = subdata[subdata['genre'] == 'jazz']","fe444add":"# # Another Solution to separating the genres, but takes longer to do compared to the first solution\nelectronic = (subdata['genre'] == 'electronic')\nelectronic_data =  subdata[electronic]","768b874e":"electronic_data['score'].value_counts()","28fe7adf":"artist_data = pd.DataFrame(columns = ['artist', 'total score', 'albums count', 'genre', 'Average Score'])\nartist_data","54bd7af1":"for i in raw_data.index:\n    if raw_data.loc[i, 'artist'] in artist_data.values:\n        artist_data.append(raw_data.loc[i, 'artist'])","e4704bc7":"# Grab the artist names first \nartist_names = []\nfor i in raw_data['artist'].index:\n    name = raw_data.loc[i, 'artist']\n    \n    if name in artist_names:\n        continue;\n    else:\n        artist_names.append(name)","5a2836b0":"# total_artists = len(artist_names) + counter \n# print(len(artist_names))\n# print(total_artists)","35530a89":"raw_data['artist'].value_counts().sum()","2e2cd303":"artist_data['artist'] = artist_names","20141f9d":"artist_data.shape","c89c1de1":"artist_data.head()","862aac19":"raw_data['genre'].value_counts()","1af03728":"artist_data.drop(2731, inplace = True)","55d73357":"scores = []\ntotal_albums = []\ngenres = []\n\nfor i in artist_data['artist']:\n    temp_data = raw_data[raw_data['artist'] == i]\n    temp_score = temp_data['score'].sum()\n    temp_album = len(temp_data)\n    temp_genre = (temp_data['genre']).value_counts().index[0]\n    \n    scores.append(temp_score)\n    total_albums.append(temp_album)\n    genres.append(temp_genre)","4972e0a9":"artist_data['total score'] = scores","ec93bf20":"artist_data['albums count'] = total_albums","35d50dbd":"# Get the average score for each artist\nartist_data['Average Score'] = artist_data['total score'] \/ artist_data['albums count']","934394f3":"artist_data['genre'] = genres","be5f090f":"artist_data.head()","a7b19e5a":"best_artists = artist_data.sort_values(by = 'Average Score', ascending = False)[:50]","dfa6ddf4":"plt.figure(figsize=(10,10))\nplt.barh(best_artists['artist'], best_artists['Average Score'])","ed13cf13":"worst_artists = artist_data.sort_values(by = 'Average Score', ascending = True)[:50]","d9878a6e":"plt.figure(figsize=(10,10))\nplt.barh(worst_artists['artist'], worst_artists['Average Score'])","1a2bafaa":"artist_data.hist('Average Score', 'genre', figsize = (20, 10), bins = 10)","64c9e52c":"best_new_music = raw_data[raw_data['best_new_music'] == 1] # grab all the rows with a 1 that represents it got best new music by Pitchfork\nbest_new_music.head()","9b40d6c1":"best_new_music['pub_year'].unique() # find out the years range for best new music","be8d4038":"x = best_new_music['pub_year']\ny = best_new_music['score']\n\nplt.figure(figsize = (10, 10))\nplt.plot(x, y, 'b.')\nplt.xticks(np.arange(2003, 2017))","a2caf7c5":"raw_data['label'].value_counts()","675f71f9":"label_data = pd.DataFrame(columns = ['label name', 'total score', 'total albums', 'average score', 'genres'])\nlabel_data.head()","31f6752c":"# Grab the label names first \nlabel_names = []\nfor i in raw_data['label'].index:\n    name = raw_data.loc[i, 'label']\n    \n    if name in label_names:\n        continue;\n    else:\n        label_names.append(name)","df43d9da":"label_data['label name'] = label_names\nlabel_data.head()","b982c442":"scores = []\ntotal_albums = []\nfor i in label_data['label name']:\n    temp_data = raw_data[raw_data['label'] == i]\n    temp_score = temp_data['score'].sum()\n    temp_album = len(temp_data)\n    \n    scores.append(temp_score)\n    total_albums.append(temp_album)","0c147edb":"label_data['total score'] = scores\nlabel_data['total albums'] = total_albums\nlabel_data['average score'] = label_data['total score'] \/ label_data['total albums']","0a158f10":"top20_labels = label_data[label_data['total albums'] >= 10]\\\n    .sort_values(by = 'average score', ascending = False)[:20]","bccde1ad":"plt.figure(figsize=(10,10))\nplt.barh(top20_labels['label name'], top20_labels['average score'])","9c26b13c":"### Score differences between genres","a256c422":"## Music Labels","5a0ef5a1":"## Create new dataframe: Find the total score, total albums, average score, genre of all artists*","e97952d0":"### Top 50 Best & Worst reviewed artists based on average score","1970d75f":"# Things to add to the Project:\n\n1. Word Clouds\n2. Top reviewers scores for albums\n3. Top reviewers scores by genre & differences","49a6bb2f":"##### Top 20 labels based on having at least 10 albums reviewed and average score\n","03112be0":"## Best New Music Scores"}}