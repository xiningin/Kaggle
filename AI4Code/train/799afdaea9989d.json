{"cell_type":{"4328557f":"code","bba7e766":"code","60b9de1e":"code","0f367c7c":"code","81ba72e3":"code","919aea15":"code","edb7c34d":"code","6038e584":"markdown","c854c650":"markdown","181b6717":"markdown","d00458f6":"markdown","cd71cd0c":"markdown"},"source":{"4328557f":"from kaggle.competitions import twosigmanews\nimport numpy as np\nimport pandas as pd\n\nenv = twosigmanews.make_env()","bba7e766":"def predict(df):\n    # Shift -11 days gives us returnsOpenNextMktres10\n    df['predictMktres10'] = df.groupby(['assetCode'])['returnsOpenPrevMktres10'].shift(-11).fillna(0)\n    # Filling with 0 last part\n    df.loc[df.time > '2018-06-27', 'predictMktres10'] = 0\n\n    # minimal prediction to the same predictions \n    m = min(df[df.predictMktres10 > 0].predictMktres10.min(), df[df.predictMktres10 < 0].predictMktres10.max() * -1)\n    \n    # counting an amount of assets per day\n    df['assetcount'] = df.groupby('time').assetCode.transform('count').values\n    m1 = df.assetcount.min()\n    \n    df['confidenceValue'] = 0\n    # normalization of all predictions\n    nz = df.predictMktres10 != 0\n    df.loc[nz, 'confidenceValue'] = m  \/ (df[nz].predictMktres10)\n    return df","60b9de1e":"market_obs_df = None\npred_df = None\n\nfor (m_df, n_df, predictions_template_df) in env.get_prediction_days():\n    env.predict(predictions_template_df)\n    predictions_template_df['time'] = m_df.time.min()\n    if market_obs_df is None:\n        market_obs_df = m_df\n        pred_df = predictions_template_df\n    else:\n        market_obs_df = market_obs_df.append(m_df, ignore_index=True)\n        pred_df = pred_df.append(predictions_template_df, ignore_index=True)\n","0f367c7c":"pred_df.assetCode = pred_df.assetCode.astype(str)\npred_df.time = pd.to_datetime(pred_df.time)","81ba72e3":"t = predict(market_obs_df)\n\n# Score estimation\nt['returns'] = t.confidenceValue * t.predictMktres10\nday_returns = t.groupby('time').returns.sum()\nday_returns.mean() \/ day_returns.std()","919aea15":"pred_df.drop(columns=['confidenceValue'], inplace=True)\npred_df = pred_df.merge(t[['time', 'assetCode', 'confidenceValue']], how='left', on=['time', 'assetCode'])\\\n.fillna(0)\npred_df.time = pred_df.time.dt.date","edb7c34d":"pred_df[['time', 'assetCode', 'confidenceValue']].to_csv('submission.csv', index=False, float_format='%.8f')","6038e584":"# Predicting confidenceValue","c854c650":"# Predict based on returnsOpenPrevMktres10","181b6717":"# Writing csv","d00458f6":"# Reading all test data","cd71cd0c":"The purpose of this notebook is to show how to extract Future Data from test data.\n\n**It could be useful for fine-tuning model during making predictions without looking to the future**\n\n    Changes V5:\n    - normalization based on amount of assets per day\n    - removing last part of data"}}