{"cell_type":{"e4e4fcc6":"code","9740b36a":"code","262069a8":"code","08501342":"code","46b3419e":"code","a023fa6e":"code","ebd197ae":"code","65b69c4a":"code","0285269d":"code","8cc1e5a5":"code","49eed6b1":"code","74c10cb3":"code","a0811c16":"code","b6a4655f":"code","52e1a328":"code","ac82acdf":"code","00d0026a":"code","c80dcb33":"code","79e42dcf":"code","3c095f77":"code","93a6ff19":"code","b1360021":"code","fa071db0":"code","03d5cd6e":"code","60bd79c6":"code","48a78d40":"code","e97afdc8":"code","dbc7d29a":"code","a9bcdaf3":"code","414bf768":"code","fb23a942":"code","1468febb":"code","703feb44":"code","002aaf5a":"code","aa695400":"code","0ac1d6b8":"code","0cc17a01":"code","663c478a":"code","c2a082a0":"code","d75d4a67":"markdown","c2f23e03":"markdown","849e6cf2":"markdown","ecd017c4":"markdown","b1287461":"markdown","b38dc21c":"markdown","47747561":"markdown","b99b5d1e":"markdown","fffcc04d":"markdown","4d75bbaf":"markdown"},"source":{"e4e4fcc6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9740b36a":"data=pd.read_csv('..\/input\/titanic\/train.csv')\ndata","262069a8":"data['Ticket_type']=data['Ticket'].apply(lambda x: x[0:3])\ndata['Ticket_type']=data['Ticket_type'].astype('category').cat.codes # convert catogorical data into int ","08501342":"data.head(3)","46b3419e":"data['Words_counts']=data['Name'].apply(lambda x: len(x.split())) # counting no. of words in a name","a023fa6e":"data.head(3)","ebd197ae":"data['cabin_or_not']=data[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)  # passenger has a cabin or not \ndata.head(3)","65b69c4a":"pd.pivot_table(data,values='Survived',columns='cabin_or_not').plot.bar()","0285269d":"data['Family_size']=data['SibSp'] + data['Parch'] + 1  # find family size and make a saperate column","8cc1e5a5":"data.head(3)","49eed6b1":"pd.pivot_table(data,values='Survived',columns='Family_size').plot.bar()","74c10cb3":"data['IsAlone'] = 0\ndata.loc[data['Family_size'] == 1, 'IsAlone'] = 1 # is a passenger is with family or not\ndata.head(3)","a0811c16":"pd.pivot_table(data,values='Survived',columns='IsAlone').plot.bar()","b6a4655f":"data['Embarked'] = data['Embarked'].fillna('S')   #Fill na \ndata['Age'].fillna(data['Age'].mean(),inplace=True)","52e1a328":"data['fare_cat']=pd.qcut(data['Fare'], 4) #dividing fare into catogories\ndata['fare_cat']=data['fare_cat'].astype('category').cat.codes.astype('int')","ac82acdf":"pd.pivot_table(data,values='Survived',columns='fare_cat').plot.bar()","00d0026a":"data['cat_age']=pd.cut(data['Age'],5)   #Dividing age into 5 catogories\nprint(data['cat_age'].value_counts())\ndata['cat_age']=data['cat_age'].astype('category').cat.codes.astype('int')","c80dcb33":"pd.pivot_table(data,values='Survived',columns='cat_age').plot.bar()\n#Childrens has the highest rate of survival and elders has lowest","79e42dcf":"# collecting titles from their names\nimport re\ntitle=[]\nfor i in range(0,891):\n    title.append(re.search(' ([A-Za-z]+)\\.', data['Name'][i]).group(1))\ntitle=pd.Series(title)\ntitle.value_counts()","3c095f77":"title=title.replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'],'Rare')\ntitle=title.replace('Mlle','Miss')\ntitle=title.replace('Ms','Miss')\ntitle=title.replace('Mme','Mrs')\ntitle.value_counts()","93a6ff19":"data['Title']=title\ndic1= {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\ndata['Title'] = data['Title'].map(dic1)\ndata['Title'] =data['Title'].fillna(0)","b1360021":"pd.pivot_table(data,values='Survived',columns='Title').plot.bar()\n#survival rate Title wise\n#you can see that Mrs has the highest rate of survival and Mr has lowest","fa071db0":"data.head(3)","03d5cd6e":"data['Sex'] = data['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\ndata.head(3)","60bd79c6":"pd.pivot_table(data,values='Survived',columns='Sex').plot.bar()\n#female has the highest rate of survival","48a78d40":"data['Embarked'] = data['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)","e97afdc8":"pd.pivot_table(data,values='Survived',columns='Embarked').plot.bar()\n#survival rate vs Embarked","dbc7d29a":"data.drop(columns=['PassengerId','Name','Ticket','Cabin'],inplace=True)","a9bcdaf3":"data.head(3)","414bf768":"data.info()","fb23a942":"train=pd.read_csv('..\/input\/titanic\/train.csv')\ntest=pd.read_csv('..\/input\/titanic\/test.csv')","1468febb":"test.info()","703feb44":"test['Fare'].fillna(test['Fare'].mean(),inplace=True)","002aaf5a":"datas=[train,test]\nfor data in datas:\n    data['Ticket_type']=data['Ticket'].apply(lambda x: x[0:3])\n    data['Ticket_type']=data['Ticket_type'].astype('category').cat.codes\n    data['Words_counts']=data['Name'].apply(lambda x: len(x.split()))\n    data['cabin_or_not']=data[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\n    data['Family_size']=data['SibSp'] + data['Parch'] + 1\n    data['IsAlone'] = 0\n    data.loc[data['Family_size'] == 1, 'IsAlone'] = 1\n    data['Embarked'] = data['Embarked'].fillna('S')\n    data['fare_cat']=pd.qcut(data['Fare'], 4)\n    data['Age'].fillna(data['Age'].mean(),inplace=True)\n    data['cat_age']=pd.cut(data['Age'],5)\n    title=[]\n    for i in range(0,len(data)):\n        title.append(re.search(' ([A-Za-z]+)\\.', data['Name'][i]).group(1))\n    title=pd.Series(title)\n    title=title.replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'],'Rare')\n    title=title.replace('Mlle','Miss')\n    title=title.replace('Ms','Miss')\n    title=title.replace('Mme','Mrs')\n    data['Title']=title\n    data['Sex'] = data['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\n    dic1= {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n    data['Title'] = data['Title'].map(dic1)\n    data['Title'] =data['Title'].fillna(0)\n    data['Embarked'] = data['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype('int')\n    data['fare_cat']=data['fare_cat'].astype('category').cat.codes.astype('int')\n    data['cat_age']=data['cat_age'].astype('category').cat.codes.astype('int')\n    data.drop(columns=['PassengerId','Name','Ticket','Cabin'],inplace=True)\n    ","aa695400":"train.head(3)","0ac1d6b8":"x=train.drop(columns=['Survived'])\ny=train['Survived']","0cc17a01":"log_model = LogisticRegression(C=22).fit(x, y)","663c478a":"submitssion_dis={'PassengerId':[a for a in range(892,1310)]\n                 ,'Survived':log_model.predict(test) }","c2a082a0":"submission=pd.DataFrame(submitssion_dis)\nsubmission.to_csv('Submission_out.csv',index=False)","d75d4a67":"**Submitting our output**","c2f23e03":"****Try and visulalize this data****","849e6cf2":"**Age vs Survival plot**","ecd017c4":"**LogisticRegression MODEL**","b1287461":"**Survival rate of passengers having cabin or not**","b38dc21c":"**data is ready**","47747561":"**Just make the above blocks of code into one block and apply it on both test and train data**","b99b5d1e":"**IMPORT DATA**","fffcc04d":"Replacing  Text with integers","4d75bbaf":"**Fare VS Survival plot**"}}