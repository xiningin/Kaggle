{"cell_type":{"e9a4b4cd":"code","088a43eb":"code","74606beb":"code","24ad4dbd":"code","d1f4eb71":"code","821ef5cc":"code","9273420a":"code","21e2f973":"code","f61f1234":"code","27701794":"code","aa6bed1a":"code","06ea61dc":"code","064308c6":"code","554e68c9":"code","864dbbb5":"code","1d53fe02":"markdown","199d5ff1":"markdown"},"source":{"e9a4b4cd":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import imshow\nimport seaborn as sns\n\nfrom PIL import Image\n\nimport os\n\n%matplotlib inline\n\nprint(os.listdir('..\/input\/'))","088a43eb":"train_labels = pd.read_csv('..\/input\/understanding_cloud_organization\/train.csv')\ntrain_labels.head()","74606beb":"len(train_labels)","24ad4dbd":"# Seperating image and label:\ntrain_labels['label'] = train_labels['Image_Label'].apply(lambda x: x.split('_')[1])\ntrain_labels['image'] = train_labels['Image_Label'].apply(lambda x: x.split('_')[0])","d1f4eb71":"# Changind all the NaNs by -1\ntrain_labels['EncodedPixels'] = train_labels['EncodedPixels'].fillna(-1)\n\n# Remvoing all the -1 and only keeping the ones with actual Encoded Pixels\ntrain_no_nans = train_labels[train_labels.EncodedPixels != -1]\ntrain_no_nans.head()","821ef5cc":"labels = ['Fish', 'Flower', 'Gravel', 'Sugar']\nnb_labels = []\nfor item in labels:\n    nb_label = train_no_nans['label'].str.count(item)\n    nb_labels.append(nb_label[nb_label == 1].count())","9273420a":"# Number of image containing each label\n\ntrain_no_nans['label'].value_counts().plot(kind='bar')","21e2f973":"images = train_no_nans['image'].unique()\nimages[:10]","f61f1234":"# Printing the first few images and there labels\n\nfor img_nb in range(2):\n    print(train_no_nans.loc[train_labels['image'] == images[img_nb]]['label'])\n    img = plt.imread('..\/input\/understanding_cloud_organization\/train_images\/' + images[img_nb])\n    plt.imshow(img)\n    plt.show()","27701794":"# Creating masks\n\ndef making_mask(nb_img_to_mask):\n    all_masks = []\n    complex_shapes = 0\n    rectangles = 0\n    row=0\n    for index in range(nb_img_to_mask):\n        #print('\\nfor image: ', index)\n        # Creating a 4d array (1d for each label)\n        mask = np.zeros((1400, 2100, 4))\n        \n        # Select 4 rows:\n        labels = train_labels.iloc[row:row+4]\n        band=0\n        for label in labels.values:\n            \n            # If there is a mask for a given label\n            if label[1] != -1:\n                \n                list_pixel = label[1].split()\n                # Create an mask the size of the image, with only zeros\n                mask_label = np.zeros((1400,2100))\n                # Store position of 1st pixel & length of string\n                positions = list_pixel[::2]\n                length = list_pixel[1::2]\n                \n                # If the length is always the same (we'll assume then there's only a rectangle)\n                unique_values = np.unique(length)\n                \n                if len(unique_values)==1:\n                    #print('rectangle shape')\n                    rectangles+=1\n                    #We make a rectangle starting from the top left, so 1st pixel in postions\n                    start = int(positions[0])\n                    start_column = start\/\/1400\n                    start_row = start%1400\n                    end = int(length[0])\n                    # Create the masks that starts on top left, width nb elements in length[] &\n                    # length nb elements in positions\n                    mask_label[start_row:start_row+end,start_column:start_column+len(positions)] = 1\n                    \n                else:\n                    #print('complex shape')\n                    complex_shapes+=1\n                    for pos, le in zip(positions, length):\n                        start = int(pos)\n                        start_column = start\/\/1400\n                        start_row = start%1400\n                        end = int(le)\n                        mask_label[start_row:start_row+end,start_column] = 1\n                \n                mask[:,:,band] = mask_label\n            band+=1\n        all_masks.append(mask)\n        index +=1\n        row +=4\n        \n    return all_masks, complex_shapes, rectangles","aa6bed1a":"masks_images, nb_complex, nb_rectangles = making_mask(100)\nprint(f'There were:\\n{nb_complex} complex shapes ({np.round(nb_complex*100\/(nb_complex+nb_rectangles),2)}%)\\n{nb_rectangles} rectangles ({np.round(nb_rectangles*100\/(nb_complex+nb_rectangles),2)}%)')","06ea61dc":"def plot_mask_on_img(mask, img_nb):\n    label_list = ['Fish', 'Flower', 'Gravel', 'Sugar']\n    \n    img = plt.imread('..\/input\/understanding_cloud_organization\/train_images\/' + images[img_nb])\n    plt.figure(figsize=[30, 10])\n    for label in range(4):\n        if 1 in mask[:,:,label]:\n            print(label_list[label])\n            plt.subplot(1,4,label+1)\n            plt.imshow(img)\n            plt.imshow(mask[:,:,label], alpha=0.3, label=label_list[label])\n    plt.show()","064308c6":"plot_mask_on_img(masks_images[0], 0)","554e68c9":"plot_mask_on_img(masks_images[1], 1)","864dbbb5":"plot_mask_on_img(masks_images[2], 2)","1d53fe02":"The mask creation function works in 2 ways:\n- either the mask is a rectangle\n- either it's a complex shape\n\nRectangles are much faster to create, hence having a seperate function to do so. It just allows to gain a bit of time on the creation of the masks. I also outputed how many of the labels are rectangles, and how many are more complex, this does provide some interesting additonal information for the analysis of the masks in the trains et, but also on how to create the segmentations.","199d5ff1":"__Early EDA - Plotting masks__\n\nThis notebook is my take on the mask plotting. It is based on a few of the most upvoted notebooks already in the competitions, but I tried commenting a little bit more the code I wrote."}}