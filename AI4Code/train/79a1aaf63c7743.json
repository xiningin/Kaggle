{"cell_type":{"116ba38c":"code","5070d299":"code","57341539":"code","db72af2b":"code","6a995bed":"code","6d4949a7":"code","1c51a821":"code","24620fd4":"code","5aa1f7d9":"code","28e972e0":"code","6f3856cc":"code","d2438870":"code","346a157e":"code","83bc0a1e":"code","62a073a9":"code","90662f73":"code","f1c03d79":"code","0fb4ae96":"code","45c0445c":"code","cce76654":"code","9890b8af":"code","1f61a6ab":"code","e899b6eb":"code","4f258a2b":"code","aedccbbc":"code","3329cf4f":"code","ea604e1c":"code","924a7fbc":"code","061cdad3":"code","56561916":"code","188e53cf":"markdown","43f8ff21":"markdown","3b9b981e":"markdown","8dc15ab3":"markdown","b6a38b98":"markdown","9a90381e":"markdown","e86b79cd":"markdown","09bde5ac":"markdown","59d3d4a7":"markdown","140aa0ab":"markdown","d216e459":"markdown","9fc5801e":"markdown","e6ab3413":"markdown","ac800799":"markdown","eda44912":"markdown","0ec27c1b":"markdown","805b519e":"markdown","ddb833f8":"markdown","4b3fd81c":"markdown","87b528d1":"markdown","497344c5":"markdown","8a29ac8a":"markdown","e5fb58a0":"markdown","f7acb671":"markdown","a32191fe":"markdown","a7a0d339":"markdown","5c7e1ee8":"markdown","01435ac8":"markdown","fffd107a":"markdown","3693dd94":"markdown","ced9b9e4":"markdown","b304071a":"markdown"},"source":{"116ba38c":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","5070d299":"data = pd.read_csv('..\/input\/train_V2.csv')\ndatanew = data.copy()\ndata2 = pd.read_csv('..\/input\/test_V2.csv')","57341539":"data.head()","db72af2b":"data = data.iloc[:50000,:]","6a995bed":"data.isnull().sum()","6d4949a7":"data1 = data.copy()","1c51a821":"data1.drop(['Id','groupId','matchId','matchType'],inplace=True,axis=1)\ndata2.drop(['groupId','matchId','matchType'],inplace=True,axis=1)","24620fd4":"f,ax = plt.subplots(figsize=(15,15))\nax = sns.heatmap(data1.corr(),annot=True,fmt= '.1f',linewidths=.5)\nplt.show()","5aa1f7d9":"m = data1.corr()['winPlacePerc']\nm.sort_values(ascending=False).head(6)","28e972e0":"f,ax = plt.subplots(figsize=(15,8))\nsns.barplot(data.matchType.value_counts().values,data.matchType.value_counts().index)\nplt.xlabel('Count')\nplt.ylabel('matchType')\nplt.show()","6f3856cc":"d = data1.assists.value_counts()\nd = d[d.index>0]","d2438870":"f,ax = plt.subplots(figsize=(15,5))\nax = sns.barplot(d.index,d.values,palette='rainbow')\nplt.xlabel('Assists')\nplt.ylabel('Count')\nplt.show()","346a157e":"f,ax = plt.subplots(figsize=(15,4))\nax = sns.distplot(data1.DBNOs,color='green')\nplt.show()","83bc0a1e":"f,ax = plt.subplots(figsize=(15,4))\nax = sns.distplot(data1.matchDuration,color='green')\nplt.show()","62a073a9":"d = data1.kills.value_counts()\nd = d[d.index>0]","90662f73":"f,ax = plt.subplots(figsize=(15,4))\nax = sns.barplot(d.index,d.values,palette = 'coolwarm')\nplt.xlabel('kills')\nplt.ylabel('count')\nplt.show()","f1c03d79":"sns.jointplot(x ='winPlacePerc',y='walkDistance',data = data1,height= 10,color='purple')\nplt.show()","0fb4ae96":"ax = sns.jointplot(x ='winPlacePerc',y='boosts',data = data1,height=10,color='green')\nplt.show()","45c0445c":"ax = sns.jointplot(data1.winPlacePerc,data1.weaponsAcquired,height=10)\nplt.show()","cce76654":"ax = sns.jointplot(data1.winPlacePerc,data1.damageDealt,height = 10,color ='violet')\nplt.show()","9890b8af":"ax = sns.jointplot(data1.winPlacePerc,data1.heals,height= 10,color='violet')\nplt.show()","1f61a6ab":"X = data1.iloc[:,:24].values\nY = data1.iloc[:,-1].values\nX_ = data2.iloc[:,1:].values","e899b6eb":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.30)","4f258a2b":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()  \nX_train = sc.fit_transform(X_train)  \nX_test = sc.transform(X_test) ","aedccbbc":"from sklearn.linear_model import LinearRegression\nlin = LinearRegression()\nlin.fit(X_train,Y_train)\nlin.score(X_test,Y_test)","3329cf4f":"from sklearn.ensemble import RandomForestRegressor\nreg = RandomForestRegressor(max_depth = 10,criterion='mse',n_estimators=100)\nreg.fit(X_train,Y_train)","ea604e1c":"Y_pred = reg.predict(X_test)","924a7fbc":"from sklearn.metrics import r2_score\nsc = r2_score(Y_test,Y_pred)\nsc","061cdad3":"d3 = pd.DataFrame()\ntest_pred = reg.predict(X_)\n","56561916":"d3['Id'] = data2['Id']\nd3['winPlacePerc'] = test_pred\nd3.to_csv('sample_submission_V2.csv',index=False)","188e53cf":"## Top 5 attributes correlated to winPlacePerc","43f8ff21":"# Importing the Libraries","3b9b981e":"- walkDistance shows strong positive correlation with winPlacePerc with a value of ,r = 0.8\n- winPlacePerc increases with increse in walkDistance","8dc15ab3":"### Number of assists greater than 0","b6a38b98":"## winPlacePerc vs weaponsAcquired","9a90381e":"## Feature Scaling","e86b79cd":"## winPlacePerc vs walkDistance","09bde5ac":"- First I have trained the model using multivariate regression\n- But it gives accuracy around 83% on test set","59d3d4a7":"# Training model using RandomForestRegressor","140aa0ab":"## 1. matchType","d216e459":"# Bivariate  analysis","9fc5801e":"## 3. DBNOs - Number of enemy players knocked. ","e6ab3413":"## Dropping Irrelevant attributes","ac800799":"- we can see that number of boost items used is also positively correlated to winPlacePerc","eda44912":"- Number of weapons picked up is positively correlated to winPlacePerc","0ec27c1b":"# Training model using Regression","805b519e":"- maximum depth of the tree = 10\n- n_estimators parameter defines number of trees in the random forest.\n- n_estimators = 100\n- I have used mean squared error as the criterion to measure the quality of a split and we can also use mean absolute error.","ddb833f8":"## 5. kills - Number of enemy players killed.","4b3fd81c":"## Checking for null values in the dataset","87b528d1":"## Heatmap of correlation matrix","497344c5":"### Most of the players play a match for around 1200 sec to 1800 sec","8a29ac8a":"## winPlacePerc vs boosts","e5fb58a0":"# Univariate Analysis","f7acb671":"### Maximum number of enemy players knocked by a player ranges between 0 and 5","a32191fe":"# Predicting on test set","a7a0d339":"## 2. assists - Number of enemy players this player damaged that were killed by teammates.","5c7e1ee8":"# Splitting Data into Training and Test set","01435ac8":"## winPlacePerc vs heals","fffd107a":"## Taking a sample of 50000 datapoints as dataset is very large","3693dd94":"## winPlacePerc vs damageDealt","ced9b9e4":"## 4. matchDuration - Duration of match in seconds.","b304071a":"- Number of healing items used is also positively correlated to winPlacePerc\n- winPlacePerc increases with increase in number of healing items used"}}