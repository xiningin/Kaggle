{"cell_type":{"4c898bc1":"code","94cdc074":"code","6867707a":"code","816b323a":"code","86b0e9cb":"code","57e6060b":"code","1cc99e9e":"code","e9bc2a42":"code","1387001f":"code","70ec69b9":"code","24a54ace":"code","8b98a56c":"code","393f653c":"code","ee05a55b":"code","26e5dca0":"code","781c97a8":"code","0caf0d4e":"code","97d2cdf3":"code","9f2b4b3b":"code","4f19ecda":"code","dd3a8e46":"code","fedd8bd9":"code","81211816":"code","01311ef8":"code","1bab00f0":"code","51ca795e":"code","fe99d988":"code","71fe8455":"code","2396d7b4":"code","922c1fda":"markdown","e5b80dd2":"markdown","e47810ae":"markdown","65bd50ac":"markdown","266c903d":"markdown","0db5e70e":"markdown","1d53b994":"markdown","7474b6af":"markdown"},"source":{"4c898bc1":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nfrom xgboost import XGBRegressor\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.impute import SimpleImputer","94cdc074":"train_data = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv')\nsubmission_csv = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/submission.csv')","6867707a":"train_data['Date'] = pd.to_datetime(train_data['Date'], infer_datetime_format=True)\ntest_data['Date'] = pd.to_datetime(test_data['Date'], infer_datetime_format=True)","816b323a":"train_data.loc[:, 'Date'] = train_data.Date.dt.strftime('%y%m%d')\ntrain_data.loc[:, 'Date'] = train_data['Date'].astype(int)\n\ntest_data.loc[:, 'Date'] = test_data.Date.dt.strftime('%y%m%d')\ntest_data.loc[:, 'Date'] = test_data['Date'].astype(int)","86b0e9cb":"train_data['Province_State'] = np.where(train_data['Province_State'] == 'nan',train_data['Country_Region'],train_data['Province_State'])\ntest_data['Province_State'] = np.where(test_data['Province_State'] == 'nan',test_data['Country_Region'],test_data['Province_State'])","57e6060b":"convert_dict = {'Province_State': str}\ntrain_data = train_data.astype(convert_dict)\ntest_data = test_data.astype(convert_dict)","1cc99e9e":"test_data.head()","e9bc2a42":"train_data.head()","1387001f":"sns.countplot(y=\"Country_Region\", data=train_data,order=train_data[\"Country_Region\"].value_counts(ascending=False).iloc[:10].index)","70ec69b9":"sns.regplot(x=train_data[\"ConfirmedCases\"], y=train_data[\"Fatalities\"], fit_reg=True)","24a54ace":"sns.jointplot(x=train_data[\"ConfirmedCases\"], y=train_data[\"Fatalities\"],kind='scatter')\n","8b98a56c":"#get list of categorical variables\ns = (train_data.dtypes == 'object')\nobject_cols = list(s[s].index)","393f653c":"from sklearn.preprocessing import LabelEncoder","ee05a55b":"object_cols","26e5dca0":"label_encoder1 = LabelEncoder()\nlabel_encoder2 = LabelEncoder()\n\ntrain_data['Province_State'] = label_encoder1.fit_transform(train_data['Province_State'])\ntest_data['Province_State'] = label_encoder1.transform(test_data['Province_State'])\n\ntrain_data['Country_Region'] = label_encoder2.fit_transform(train_data['Country_Region'])\ntest_data['Country_Region'] = label_encoder2.transform(test_data['Country_Region'])\n\n    ","781c97a8":"train_data.head()","0caf0d4e":"test_data.head()","97d2cdf3":"Test_id = test_data.ForecastId","9f2b4b3b":"train_data.drop(['Id'], axis=1, inplace=True)\ntest_data.drop('ForecastId', axis=1, inplace=True)","4f19ecda":"missing_val_count_by_column = (train_data.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column>0])","dd3a8e46":"from xgboost import XGBRegressor","fedd8bd9":"train_data.head()","81211816":"X_train = train_data[['Province_State','Country_Region','Date']]\ny_train = train_data[['ConfirmedCases', 'Fatalities']]","01311ef8":"y_train_confirm = y_train.ConfirmedCases\ny_train_fatality = y_train.Fatalities","1bab00f0":"x_train = X_train.iloc[:,:].values\nx_test = X_train.iloc[:,:].values","51ca795e":"model1 = XGBRegressor(n_estimators=400000)\nmodel1.fit(X_train, y_train_confirm)\ny_pred_confirm = model1.predict(test_data)","fe99d988":"model2 = XGBRegressor(n_estimators=200000)\nmodel2.fit(X_train,y_train_fatality )\ny_pred_fat = model2.predict(test_data)","71fe8455":"df_sub = pd.DataFrame()\ndf_sub['ForecastId'] = Test_id\ndf_sub['ConfirmedCases'] = y_pred_confirm\ndf_sub['Fatalities'] = y_pred_fat\ndf_sub.to_csv('submission.csv', index=False)","2396d7b4":"df_sub","922c1fda":"**Convert String Datetime to python datetime**","e5b80dd2":"**Try using Label Encoder**","e47810ae":"https:\/\/www.kaggle.com\/milantripathi\/covid19-forecasting based on. Study was done for the 4th week. Improved models parameters.Also added Visualizations.","65bd50ac":"**Loading Training and Testing Data**","266c903d":"**Check missing value**","0db5e70e":"**Label Encoding Country**","1d53b994":"**Submission**","7474b6af":"**Make model XGBRegressor**"}}