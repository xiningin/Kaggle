{"cell_type":{"ff2f7b45":"code","147364bd":"code","2c55b179":"code","d0e35d04":"code","52b38cda":"code","e7355222":"code","63ab4cc6":"code","ac8606e7":"code","3ec8ca4b":"code","df157bb0":"code","0c027e29":"code","4e1a6f8c":"code","94553769":"code","f59949d4":"code","cd3f6278":"code","3eb6dc1d":"code","bcd0fc78":"code","aed8886b":"code","1401911e":"code","4b92f1f2":"code","6b055911":"code","8ba7cfc3":"code","0124bfb7":"code","e2f750fe":"code","93661313":"code","5b56aba9":"code","81a0d13c":"code","54a45115":"code","b782dd7f":"code","7007b20c":"code","d1d60dc2":"code","261c6435":"code","ea87656d":"code","977a93a5":"code","cb57780a":"code","99f56772":"code","ec8485ae":"code","cd308789":"code","f020640f":"code","8cd2f582":"code","f4b7c423":"code","4723d7c8":"code","506cd3db":"code","04bfb3ea":"code","333309db":"code","cc5d5f20":"code","889841ac":"code","3b1c8238":"code","8aeaf846":"code","4c9b650e":"code","d3d19262":"code","59d16b49":"code","193d6b6e":"code","ae87a329":"code","ddc05f8d":"code","8744c8e5":"code","d3e31de7":"code","ff209bf6":"code","865a1309":"code","b3a157e9":"code","33b4c919":"code","f9c068c7":"code","59c182bd":"code","34ffffbb":"code","92b94983":"code","a3f54000":"code","efb8beb0":"code","de646940":"code","5a095caf":"code","e18501eb":"code","33f3e9c6":"code","ab97a144":"code","22a3b413":"code","f553fc25":"code","0410bf9a":"code","aaca49ef":"code","96d2ce1e":"code","5aaf8196":"code","0ca8f7b1":"code","cc93e509":"code","fd89784d":"code","41643b30":"markdown","56f99318":"markdown","907575b4":"markdown","0a862cc5":"markdown","d4d2fc9a":"markdown","0607cd5b":"markdown","842479c4":"markdown","8335ed88":"markdown","1ad3b42a":"markdown","dd822950":"markdown","edbfde91":"markdown","2f783b7d":"markdown","f1521259":"markdown","155b1aee":"markdown","3adebd31":"markdown","524979ae":"markdown","eca7b2ed":"markdown","56e0aea1":"markdown","54b9f13a":"markdown","2646d4e6":"markdown","e9a1824e":"markdown","907bba20":"markdown"},"source":{"ff2f7b45":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","147364bd":"pd.set_option('display.max_rows', 100)","2c55b179":"original = ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7_Part_1', 'Q7_Part_2', 'Q7_Part_3', 'Q7_Part_4', 'Q7_Part_5', 'Q7_Part_6', \n            'Q7_Part_7', 'Q7_Part_8', 'Q7_Part_9', 'Q7_Part_10', 'Q7_Part_11', 'Q7_Part_12', 'Q7_OTHER', 'Q8', 'Q14_Part_1', 'Q14_Part_2', \n            'Q14_Part_3', 'Q14_Part_4', 'Q14_Part_5', 'Q14_Part_6', 'Q14_Part_7', 'Q14_Part_8', 'Q14_Part_9', 'Q14_Part_10', 'Q14_Part_11', \n            'Q14_OTHER', 'Q16_Part_1', 'Q16_Part_2', 'Q16_Part_3', 'Q16_Part_4', 'Q16_Part_5', 'Q16_Part_6', 'Q16_Part_7', 'Q16_Part_8', \n            'Q16_Part_9', 'Q16_Part_10', 'Q16_Part_11', 'Q16_Part_12', 'Q16_Part_13', 'Q16_Part_14', 'Q16_Part_15', 'Q16_Part_16', \n            'Q16_Part_17', 'Q16_OTHER', 'Q17_Part_1', 'Q17_Part_2', 'Q17_Part_3', 'Q17_Part_4', 'Q17_Part_5', 'Q17_Part_6', 'Q17_Part_7', \n            'Q17_Part_8', 'Q17_Part_9', 'Q17_Part_10', 'Q17_Part_11', 'Q17_OTHER', 'Q18_Part_1', 'Q18_Part_2', 'Q18_Part_3', 'Q18_Part_4', \n            'Q18_Part_5', 'Q18_Part_6', 'Q18_OTHER', 'Q19_Part_1', 'Q19_Part_2', 'Q19_Part_3', 'Q19_Part_4', 'Q19_Part_5', 'Q19_OTHER', \n            'Q20', 'Q21', 'Q22', 'Q23', 'Q24_Part_1', 'Q24_Part_2', 'Q24_Part_3', 'Q24_Part_4', 'Q24_Part_5', 'Q24_Part_6', 'Q24_Part_7', \n            'Q24_OTHER', 'Q25']","d0e35d04":"df = pd.read_csv('\/kaggle\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv', sep=',',usecols = original)","52b38cda":"rewritten = languages_dict = {'Q1': 'Age', 'Q2': 'Gender', 'Q4': 'Education', 'Q5': 'Job', 'Q6': 'Experience', 'Q7_Part_1': 'Python', \n                  'Q7_Part_2': 'R', 'Q7_Part_3': 'SQL', 'Q7_Part_4': 'C', 'Q7_Part_5': 'C++', 'Q7_Part_6': 'Java', \n                  'Q7_Part_7': 'Javascript', 'Q7_Part_8': 'Julia', 'Q7_Part_9': 'Swift', 'Q7_Part_10': 'Bash', \n                  'Q7_Part_11': 'MATLAB', 'Q7_Part_12': 'No_Languages', 'Q7_OTHER': 'Other_Language', \n                  'Q8': 'Recommend_first_language', 'Q14_Part_1': 'Vis_Matplotlib', 'Q14_Part_2': 'Vis_Seaborn', \n                  'Q14_Part_3': 'Vis_Plotly', 'Q14_Part_4': 'Vis_GGPlot', 'Q14_Part_5': 'Vis_Shiney', \n                  'Q14_Part_6': 'Vis_D3JS', 'Q14_Part_7': 'Vis_Altair', 'Q14_Part_8': 'Vis_Bokeh', \n                  'Q14_Part_9': 'Vis_Geoplotlib', 'Q14_Part_10': 'Vis_Folium', 'Q14_Part_11': 'Vis_None', \n                  'Q14_OTHER': 'Vis_Other', 'Q16_Part_1': 'ML_SciKitLearn', 'Q16_Part_2': 'ML_TensorFlow', \n                  'Q16_Part_3': 'ML_Keras', 'Q16_Part_4': 'ML_Pytorch', 'Q16_Part_5': 'ML_Fast.ai', \n                  'Q16_Part_6': 'ML_MXNet', 'Q16_Part_7': 'ML_XGBoost', 'Q16_Part_8': 'ML_LightGBM', \n                  'Q16_Part_9': 'ML_CatBoost', 'Q16_Part_10': 'ML_Prophet', 'Q16_Part_11': 'ML_H2O 3', \n                  'Q16_Part_12': 'ML_Caret', 'Q16_Part_13': 'ML_TidyModels', 'Q16_Part_14': 'ML_Jax', \n                  'Q16_Part_15': 'ML_PYLightning', 'Q16_Part_16': 'ML_Huggingface', 'Q16_Part_17': 'ML_None', \n                  'Q16_OTHER': 'ML_Other', 'Q17_Part_1': 'Alg_Regress', 'Q17_Part_2': 'Alg_Trees', \n                  'Q17_Part_3': 'Alg_Gradient', 'Q17_Part_4': 'Alg_Bayesian', 'Q17_Part_5': 'Alg_Evolution', \n                  'Q17_Part_6': 'Alg_DenseNeural', 'Q17_Part_7': 'Alg_ConvNeural', 'Q17_Part_8': 'Alg_Generative', \n                  'Q17_Part_9': 'Alg_RecurNeural', 'Q17_Part_10': 'Alg_Transformer', 'Q17_Part_11': 'Alg_None', \n                  'Q17_OTHER': 'Alg_Other', 'Q18_Part_1': 'CV_General', 'Q18_Part_2': 'CV_Segment', \n                  'Q18_Part_3': 'CV_Detect', 'Q18_Part_4': 'CV_Classify', 'Q18_Part_5': 'CV_Generative', \n                  'Q18_Part_6': 'CV_None', 'Q18_OTHER': 'CV_Other', 'Q19_Part_1': 'NLP_Word', 'Q19_Part_2': 'NLP_Models',\n                  'Q19_Part_3': 'CV_context', 'Q19_Part_4': 'CV_transformer', 'Q19_Part_5': 'CV_None', \n                  'Q19_OTHER': 'CV_Other', 'Q20': 'Industry', 'Q21': 'No_Employee', 'Q22': 'No.Scientists', \n                  'Q23': 'ML_in_business', 'Q24_Part_1': 'Work_Analyse', 'Q24_Part_2': 'Work_Infrastruct', \n                  'Q24_Part_3': 'Work_Proto', 'Q24_Part_4': 'Work_Service', 'Q24_Part_5': 'Work_Improve', \n                  'Q24_Part_6': 'Work_StateArt', 'Q24_Part_7': 'Work_Other', 'Q24_OTHER': 'Work_Other', 'Q25': 'Salary'}","e7355222":"df.rename(rewritten, axis = 1, inplace = True)","63ab4cc6":"df.head()","ac8606e7":"# Drop index 0 with the questions\ndf.drop(labels=0, axis=0, inplace=True)","3ec8ca4b":"#We dropped the null values in Recommend First language column. \n#Out of 26000 there were only around 1000 or so nulls, not enough to really warp the predictionns if missing\n\ndf = df.dropna(axis=0, subset=['Recommend_first_language'])","df157bb0":"df","0c027e29":"#We chose India because it has a high amount of entries\ndf.groupby(\"Q3\").count().head(25)","4e1a6f8c":"#capture India\ndf = df.groupby('Q3').get_group('India')","94553769":"df.head(25)","f59949d4":"df.columns","cd3f6278":"import pandas as pd \npd.options.mode.chained_assignment = None # default='warn'","3eb6dc1d":"#For each programming language column we turned the text into binary values. 1 for yes and 0 for no\ndf[\"Python\"] = df[\"Python\"].replace(\"Python\", 1)\ndf[\"R\"] = df[\"R\"].replace(\"R\", 1)\ndf[\"SQL\"] = df[\"SQL\"].replace(\"SQL\", 1)\ndf[\"C\"] = df[\"C\"].replace(\"C\", 1)\ndf[\"C++\"] = df[\"C++\"].replace(\"C++\", 1)\ndf[\"Java\"] = df[\"Java\"].replace(\"Java\", 1)\ndf[\"Javascript\"] = df[\"Javascript\"].replace(\"Javascript\", 1)\ndf[\"Julia\"] = df[\"Julia\"].replace(\"Julia\", 1)\ndf[\"Swift\"] = df[\"Swift\"].replace(\"Swift\", 1)\ndf[\"Bash\"] = df[\"Bash\"].replace(\"Bash\", 1)\ndf[\"MATLAB\"] = df[\"MATLAB\"].replace(\"MATLAB\", 1)\ndf[\"No_Languages\"] = df[\"No_Languages\"].replace(\"No_Languages\", 1)\ndf[\"Other_Language\"] = df[\"Other_Language\"].replace(\"Other_Language\", 1)","bcd0fc78":"df[[\"Python\",\"R\",\"SQL\",\"C\",\"C++\",\"Java\",\"Javascript\",\"Julia\",\"Swift\",\"Bash\",\"MATLAB\",\"No_Languages\",\"Other_Language\"]] = df[[\"Python\",\"R\",\"SQL\",\"C\",\"C++\",\"Java\",\"Javascript\",\"Julia\",\"Swift\",\"Bash\",\"MATLAB\",\"No_Languages\",\"Other_Language\"]].fillna(0)","aed8886b":"df","1401911e":"#We removed any column that did not directly have anything to do with our y (Recommend_first_language).\nX = df[['Age', 'Gender', 'Q3', 'Education', 'Job', 'Experience', 'Python', 'R',\n       'SQL', 'C', 'C++', 'Java', 'Javascript', 'Julia', 'Swift', 'Bash',\n       'MATLAB', 'No_Languages', 'Other_Language', 'Recommend_first_language','Salary']]","4b92f1f2":"X","6b055911":"X.isna().sum()","8ba7cfc3":"#change dtype of 1\/0 to int not float\ncols = ['Python', 'R','SQL', 'C', 'C++', 'Java', 'Javascript', \n   'Julia', 'Swift', 'Bash','MATLAB', 'No_Languages', 'Other_Language']\n","0124bfb7":"pd.options.mode.chained_assignment = None  # default='warn'","e2f750fe":"X['Python']=X['Python'].astype(int)\nX['R']=X['R'].astype(int)\nX['SQL']=X['SQL'].astype(int)\nX['C']=X['C'].astype(int)\nX['C++']=X['C++'].astype(int)\nX['Java']=X['Java'].astype(int)\nX['Javascript']=X['Javascript'].astype(int)\nX['Julia']=X['Julia'].astype(int)\nX['Swift']=X['Swift'].astype(int)\nX['Bash']=X['Bash'].astype(int)\nX['MATLAB']=X['MATLAB'].astype(int)","93661313":"X","5b56aba9":"salary = X['Salary']","81a0d13c":"salary = (salary\n .astype(str).str.split('-', expand=True)\n)","54a45115":"salary = salary.replace({'\\$':''}, regex = True)","b782dd7f":"salary = salary.replace({'\\,':''}, regex = True)","7007b20c":"salary = salary.replace({'>':''}, regex = True)","d1d60dc2":"salary = salary.replace({'<':''}, regex = True)","261c6435":"salary","ea87656d":"salary = salary.astype(float).mean(axis=1)","977a93a5":"X[\"Salary\"] = salary","cb57780a":"X = X.drop('Q3', 1)","99f56772":"X.head(10)","ec8485ae":"X['Salary'].fillna(int(X['Salary'].mean()), inplace=True)","cd308789":"y = X['Recommend_first_language']","f020640f":"#X = X.drop('Salary', 1)","8cd2f582":"#Use the null values in Recommended first language as my test set","f4b7c423":"X.head()","4723d7c8":"X['Age'].value_counts()","506cd3db":"X['Gender'] = X['Gender'].replace({'Nonbinary':'Other','Prefer to self-describe':'Other'})","04bfb3ea":"X['Education'] = X['Education'].replace({'Some college\/university study without earning a bachelor\u2019s degree':'Some College','I prefer not to answer':'No Response', 'No formal education past high school':'Highschool'})","333309db":"X['Age'] = X['Age'].replace({'18-21':'18-24','22-24':'18-24','25-29':'25-34','30-34':'25-34','35-39':'35-44','40-44':'35-44','45-49':'45-54','50-54':'45-54','55-59':'55+','60-69':'55+','70+':'55+'})","cc5d5f20":"X","889841ac":"corrmat = X.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n#plot heat map\ng=sns.heatmap(X[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")","3b1c8238":"#This shows the distribution of Degrees in India. Based on the plot, most of the survey respondents had at least a bachelor's degree. \n#With the second largest group had at least a master's degree.\n\nsns.set_theme(style=\"whitegrid\", font_scale = 0.9)\nax = sns.countplot(x=\"Education\" , data=X)\nax.tick_params(axis='x', rotation=90)","8aeaf846":"#This shows the distribution of Ages in India. Based on the plot, most of the survey respondents were between the ages of 18-25.\n\nsns.set_theme(style=\"whitegrid\", font_scale = 0.9)\nax = sns.countplot(x=\"Age\" , data=X)\nax.tick_params(axis='x', rotation=90)","4c9b650e":"age = X.groupby(\"Age\")[\"Recommend_first_language\"].size()\nage.plot.pie(autopct=\"%.1f%%\");","d3d19262":"sns.catplot(x=\"Gender\", y=\"Recommend_first_language\", data=X)","59d16b49":"sns.set(rc = {'figure.figsize':(15,8)})\nsns.lineplot(data=X, x=\"Experience\", y=\"Salary\", hue=\"Recommend_first_language\", style=\"Recommend_first_language\")","193d6b6e":"sns.set(rc = {'figure.figsize':(15,8)})\nsns.lineplot(data=X, x=\"Education\", y=\"Age\", hue=\"Recommend_first_language\", style=\"Recommend_first_language\")","ae87a329":"X['Gender'] = X['Gender'].replace({'Other':3, 'Man':0, 'Woman':1,'Prefer not to say':2 })\nX.head()","ddc05f8d":"X['Experience'] = X['Experience'].replace({'I have never written code':0,'< 1 years':0,'1-3 years':1,'3-5 years':1,'5-10 years':2,'10-20 years':2,'20+ years':3})","8744c8e5":"X = X.drop('Recommend_first_language', 1)","d3e31de7":"X = pd.get_dummies(X)","ff209bf6":"X.columns","865a1309":"X","b3a157e9":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","33b4c919":"from sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier\n\n# Create Decision Tree classifer object\nclf = DecisionTreeClassifier()\n\n# Train Decision Tree Classifer\nclf = clf.fit(X_train,y_train)\n\n#Predict the response for test dataset\ny_pred = clf.predict(X_test)","f9c068c7":"importance = clf.feature_importances_","59c182bd":"# summarize feature importance\nfor i,v in enumerate(importance):\n    print('Feature: %0d, Score: %.5f' % (i,v))","34ffffbb":"y_pred","92b94983":"from sklearn import tree","a3f54000":"import graphviz\ndot_data = tree.export_graphviz(clf, out_file=None)\ngraph = graphviz.Source(dot_data)\ngraph.render('final')","efb8beb0":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score","de646940":"acc_score = accuracy_score(y_test, y_pred)","5a095caf":"acc_score","e18501eb":"class_repo = classification_report(y_test, y_pred, output_dict=True)","33f3e9c6":"repoDf = pd.DataFrame(class_repo).transpose()","ab97a144":"repoDf","22a3b413":"#import MLP Classifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.exceptions import ConvergenceWarning","f553fc25":"mlp = MLPClassifier(hidden_layer_sizes=(500,500,500,500,500), \n                    activation='logistic',solver='sgd', learning_rate_init=0.3, random_state=1, shuffle=False)","0410bf9a":"import time \nstartTime = time.time()\nresults = mlp.fit(X,y)\nendTime = time.time()\nprint('model was trained in', round(endTime-startTime,2), 'seconds.')","aaca49ef":"coefs = results.coefs_[0]","96d2ce1e":"clf.score(X_test, y_test)","5aaf8196":"from sklearn.naive_bayes import BernoulliNB,MultinomialNB,GaussianNB\n#modelNB = GaussianNB()\nmodelNB = BernoulliNB()\n#modelNB = MultinomialNB()\n\nmodelNB.fit(X_train,y_train)\n\npredicted_test = modelNB.predict(X_test)","0ca8f7b1":"predicted_test","cc93e509":"from sklearn.metrics import confusion_matrix,accuracy_score\n\ncm = confusion_matrix (y_test, predicted_test)","fd89784d":"print(accuracy_score(y_test,predicted_test))","41643b30":"#### We see that some of the features have negative correlations with eachother (ie. Gender and Experience, Matlab and Salary). This shows that there are some inverse reactions\/correlations between our features. ","56f99318":"### Decision Tree Classifier and Feature Importance","907575b4":"### MLP Classifier","0a862cc5":"### Pre-Processing Part Two:\n\nWe use get_dummies in order to make our entire X dataset binary for our models. This increases our attributes significantly however it's necessary in order for our models to work (we are willing to tradeoff for a lower accuracy score)","d4d2fc9a":"#### Our Age distribution shows that more than half our data comes between the age groups 18-24 and 25-34","0607cd5b":"## Predictive Model Creation\nWe will implement 3 models to predict the Recommended First Language and compare","842479c4":"#### Accuracy of our MLP Classifier","8335ed88":"#### Accuracy of our Naive Bayes Model","1ad3b42a":"Splitting the data into our train and test sets","dd822950":"### CONCLUSION\n\nWhen looking at all of our models, all of them maintained an accuracy greater than 75%, with our Naive Bayes model holding the highest accuracy percentage at 82%.","edbfde91":"#### This line plot focuses on the correlation between Experience, Salary, and Recommended First Language\n- 0 = I have never written code\n- 1 = < 1 years and 3-5 years (entry level)\n- 2 = 5-10 years and 10-20 years (mid level to senior)\n- 3 = 20+ years (senior to executive)\n\n#### Each language is represented by a different color and line pattern. For example, many entry level applicants seem to recomend Java whereas people with a lot more experience recommended more complex languages like Julia and C.","2f783b7d":"#### We compared Gender to Recomended First Language.\n- 0 = Man\n- 1 = Woman\n- 2 = Other\n- 3 = Prefer not to Say\n\n#### For men, the distribution of language recommendation was pretty even across the board. However as you move on to Women or Other, they tend to recomend less languages.","f1521259":"## Data Visualization","155b1aee":"### Naive Bayes","3adebd31":"First we needed to rename the columns for readability","524979ae":"## Objective\n\nOur Objective was to analyze responses about demographic and programming backgrounds to see what coding language was the most recommended based on these factors. Each observation includes a 'Recommended Language' response column, where they recommend either no language, R, Python, C, SQL, and more for other people to learn first, and seeing which of those responses were most common tells us a lot about both programmers in India as well as the language itself. \n\nTo display this, we went through cleaning, pre-processing, and then finally model creation to show this result clearly. We used a Neural Network model, a Decision Tree model, and a Naive Bayes model to predict the Recommended First Language based on our dataset. Finally we compared the model accuracy and results.","eca7b2ed":"This is original work done by Briauna Brown and Matthew  Geis","56e0aea1":"#### For Salary, we replaced the ranges with the average of that specific range. This was done by using regex functions to split our range into two separate numbers and then averaging them together. We then replaced rows with null values with the mean average for the column itself.","54b9f13a":"#### Accuracy Check on our Decision Tree Model","2646d4e6":"#### Now lets continue, when looking at the data for our survey respondents in India, most of them held either a Bachelor's or a Master's degree:","e9a1824e":"### In this section, we take a look at our now processed data, starting with the correlation between our feature variables","907bba20":"## Data Pre-Processing"}}