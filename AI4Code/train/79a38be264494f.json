{"cell_type":{"4bc5a59f":"code","d7ca25d1":"code","94f99764":"code","757ef087":"code","105603cb":"code","f9369a29":"code","b3eddb42":"code","8331d72a":"code","f2ec8030":"code","e2b83fce":"code","b2baea35":"code","89033443":"code","17d581f1":"code","1a8e8465":"code","3ba7a7d1":"code","9a00a1d0":"code","dd6ebc8c":"code","2a1b479a":"markdown","cd6f3fcd":"markdown","26777c84":"markdown","55bf9163":"markdown","7aa3b374":"markdown","50302235":"markdown","9ee3bcac":"markdown","1eae4fd1":"markdown","07fca2dd":"markdown","653dc327":"markdown","020587fc":"markdown","0aeb5f4a":"markdown","4c8a2ff5":"markdown"},"source":{"4bc5a59f":"!pip install -U wandb -qq","d7ca25d1":"import logging\nimport math\nimport os\nimport sys\nimport re\nfrom pathlib import Path\nfrom dataclasses import dataclass, field\nfrom itertools import chain\nfrom typing import Optional\n\nfrom tqdm.auto import tqdm\n\nimport datasets\nfrom datasets import load_dataset\n\nimport transformers\nfrom transformers import (\n    CONFIG_MAPPING,\n    MODEL_FOR_MASKED_LM_MAPPING,\n    AutoConfig,\n    AutoModelForMaskedLM,\n    AutoTokenizer,\n    DataCollatorForLanguageModeling,\n    HfArgumentParser,\n    Trainer,\n    TrainingArguments,\n    set_seed,\n)\n\nimport wandb\n\nfrom kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nwandb_key = user_secrets.get_secret(\"wandb\")\n\nwandb.login(key=wandb_key)\n\nos.environ[\"WANDB_PROJECT\"] = \"feedback-prize\"\n\nlogger = logging.getLogger(__name__)\nMODEL_CONFIG_CLASSES = list(MODEL_FOR_MASKED_LM_MAPPING.keys())\nMODEL_TYPES = tuple(conf.model_type for conf in MODEL_CONFIG_CLASSES)","94f99764":"@dataclass\nclass ModelArguments:\n    \"\"\"\n    Arguments pertaining to which model\/config\/tokenizer we are going to fine-tune, or train from scratch.\n    \"\"\"\n\n    model_name_or_path: Optional[str] = field(\n        default=None,\n        metadata={\n            \"help\": \"The model checkpoint for weights initialization.\"\n            \"Don't set if you want to train a model from scratch.\"\n        },\n    )\n    model_type: Optional[str] = field(\n        default=None,\n        metadata={\"help\": \"If training from scratch, pass a model type from the list: \" + \", \".join(MODEL_TYPES)},\n    )\n    config_overrides: Optional[str] = field(\n        default=None,\n        metadata={\n            \"help\": \"Override some existing default config settings when a model is trained from scratch. Example: \"\n            \"n_embd=10,resid_pdrop=0.2,scale_attn_weights=false,summary_type=cls_index\"\n        },\n    )\n    config_name: Optional[str] = field(\n        default=None, metadata={\"help\": \"Pretrained config name or path if not the same as model_name\"}\n    )\n    tokenizer_name: Optional[str] = field(\n        default=None, metadata={\"help\": \"Pretrained tokenizer name or path if not the same as model_name\"}\n    )\n    cache_dir: Optional[str] = field(\n        default=None,\n        metadata={\"help\": \"Where do you want to store the pretrained models downloaded from huggingface.co\"},\n    )\n    use_fast_tokenizer: bool = field(\n        default=True,\n        metadata={\"help\": \"Whether to use one of the fast tokenizer (backed by the tokenizers library) or not.\"},\n    )\n    model_revision: str = field(\n        default=\"main\",\n        metadata={\"help\": \"The specific model version to use (can be a branch name, tag name or commit id).\"},\n    )\n    use_auth_token: bool = field(\n        default=False,\n        metadata={\n            \"help\": \"Will use the token generated when running `transformers-cli login` (necessary to use this script \"\n            \"with private models).\"\n        },\n    )\n\n    def __post_init__(self):\n        if self.config_overrides is not None and (self.config_name is not None or self.model_name_or_path is not None):\n            raise ValueError(\n                \"--config_overrides can't be used in combination with --config_name or --model_name_or_path\"\n            )\n","757ef087":"@dataclass\nclass DataTrainingArguments:\n    \"\"\"\n    Arguments pertaining to what data we are going to input our model for training and eval.\n    \"\"\"\n\n    dataset_name: Optional[str] = field(\n        default=None, metadata={\"help\": \"The name of the dataset to use (via the datasets library).\"}\n    )\n    dataset_config_name: Optional[str] = field(\n        default=None, metadata={\"help\": \"The configuration name of the dataset to use (via the datasets library).\"}\n    )\n    train_file: Optional[str] = field(default=None, metadata={\"help\": \"The input training data file (a text file).\"})\n    validation_file: Optional[str] = field(\n        default=None,\n        metadata={\"help\": \"An optional input evaluation data file to evaluate the perplexity on (a text file).\"},\n    )\n    overwrite_cache: bool = field(\n        default=False, metadata={\"help\": \"Overwrite the cached training and evaluation sets\"}\n    )\n    validation_split_percentage: Optional[int] = field(\n        default=5,\n        metadata={\n            \"help\": \"The percentage of the train set used as validation set in case there's no validation split\"\n        },\n    )\n    max_seq_length: Optional[int] = field(\n        default=None,\n        metadata={\n            \"help\": \"The maximum total input sequence length after tokenization. Sequences longer \"\n            \"than this will be truncated.\"\n        },\n    )\n    preprocessing_num_workers: Optional[int] = field(\n        default=None,\n        metadata={\"help\": \"The number of processes to use for the preprocessing.\"},\n    )\n    mlm_probability: float = field(\n        default=0.15, metadata={\"help\": \"Ratio of tokens to mask for masked language modeling loss\"}\n    )\n    line_by_line: bool = field(\n        default=False,\n        metadata={\"help\": \"Whether distinct lines of text in the dataset are to be handled as distinct sequences.\"},\n    )\n    pad_to_max_length: bool = field(\n        default=False,\n        metadata={\n            \"help\": \"Whether to pad all samples to `max_seq_length`. \"\n            \"If False, will pad the samples dynamically when batching to the maximum length in the batch.\"\n        },\n    )\n    max_train_samples: Optional[int] = field(\n        default=None,\n        metadata={\n            \"help\": \"For debugging purposes or quicker training, truncate the number of training examples to this \"\n            \"value if set.\"\n        },\n    )\n    max_eval_samples: Optional[int] = field(\n        default=None,\n        metadata={\n            \"help\": \"For debugging purposes or quicker training, truncate the number of evaluation examples to this \"\n            \"value if set.\"\n        },\n    )\n\n    def __post_init__(self):\n        if self.dataset_name is None and self.train_file is None and self.validation_file is None:\n            raise ValueError(\"Need either a dataset name or a training\/validation file.\")\n        else:\n            if self.train_file is not None:\n                extension = self.train_file.split(\".\")[-1]\n                if extension not in [\"csv\", \"json\", \"txt\"]:\n                    raise ValueError(\"`train_file` should be a csv, a json or a txt file.\")\n            if self.validation_file is not None:\n                extension = self.validation_file.split(\".\")[-1]\n                if extension not in [\"csv\", \"json\", \"txt\"]:\n                    raise ValueError(\"`validation_file` should be a csv, a json or a txt file.\")\n","105603cb":"model_args = ModelArguments(\n    model_name_or_path=\"roberta-base\"\n)\n\ndata_args = DataTrainingArguments(\n    train_file=\"..\/input\/feedback-prize-linebyline-text-dataset\/train.txt\",\n    validation_split_percentage=5,\n    max_seq_length=384,\n    mlm_probability=0.15,\n    line_by_line=True,\n    pad_to_max_length=True,\n)\n\ntraining_args = TrainingArguments(\n    output_dir=\"feedback-roberta-base\",\n    overwrite_output_dir=True,\n    do_train=True,\n    do_eval=True,\n    per_device_train_batch_size=16,\n    per_device_eval_batch_size=64,\n    gradient_accumulation_steps=2,\n    learning_rate=2e-5,\n    weight_decay=0.0095,\n    num_train_epochs=1,\n    warmup_ratio=0.1,\n    logging_steps=500,\n    evaluation_strategy=\"steps\",\n    eval_steps=1000,\n    save_strategy=\"steps\",\n    save_steps=2500, \n    save_total_limit=4, # only have 20 GB of space for saving\n    seed=18,\n    fp16=True,\n    report_to=\"wandb\",\n    run_name=\"roberta-base-idpt\"\n)\n\n# Set seed before initializing model.\nset_seed(training_args.seed)","f9369a29":"# import re\n# from pathlib import Path\n\n# from tqdm.auto import tqdm\n\n\n# # Simple sentence splitting function\n\n# alphabets= \"([A-Za-z])\"\n# prefixes = re.compile(\"(Mr|St|Mrs|Ms|Dr|Prof|Capt|Cpt|Lt|Mt)[.]\")\n# suffixes = \"(Inc|Ltd|Jr|Sr|Co)\"\n# starters = \"(Mr|Mrs|Ms|Dr|He\\s|She\\s|It\\s|They\\s|Their\\s|Our\\s|We\\s|But\\s|However\\s|That\\s|This\\s|Wherever)\"\n# acronyms = \"([A-Z][.][A-Z][.](?:[A-Z][.])?)\"\n# websites = re.compile(\"[.](co|net|org|io|gov|edu|us)\")\n# etal = re.compile(r\"(\\bet al)[.]\")\n# urls = re.compile(\"(www)[.]\")\n# digits =  re.compile(\"[.]([0-9])\")\n\n# def split_into_sentences(text):\n#     text = \" \" + text + \"  \"\n#     text = text.replace(\"\\n\",\" \")\n#     text = prefixes.sub(\"\\\\1<prd>\",text)\n#     text = websites.sub(\"<prd>\\\\1\",text)\n#     text = urls.sub(\"\\\\1<prd>\",text)\n#     if \"Ph.D\" in text: text = text.replace(\"Ph.D.\",\"Ph<prd>D<prd>\")\n#     text = re.sub(\"\\s\" + alphabets + \"[.] \",\" \\\\1<prd> \",text)\n#     text = re.sub(acronyms+\" \"+starters,\"\\\\1<stop> \\\\2\",text)\n#     text = re.sub(alphabets + \"[.]\" + alphabets + \"[.]\" + alphabets + \"[.]\",\"\\\\1<prd>\\\\2<prd>\\\\3<prd>\",text)\n#     text = re.sub(alphabets + \"[.]\" + alphabets + \"[.]\",\"\\\\1<prd>\\\\2<prd>\",text)\n#     text = re.sub(\" \"+suffixes+\"[.] \"+starters,\" \\\\1<stop> \\\\2\",text)\n#     text = re.sub(\" \"+suffixes+\"[.]\",\" \\\\1<prd>\",text)\n#     text = re.sub(\" \" + alphabets + \"[.]\",\" \\\\1<prd>\",text)\n#     text = etal.sub(\"\\\\1<prd>\", text)\n#     text = digits.sub(\"<prd>\\\\1\",text)\n#     if \"\u201d\" in text: text = text.replace(\".\u201d\",\"\u201d.\")\n#     if \"\\\"\" in text: text = text.replace(\".\\\"\",\"\\\".\")\n#     if \"!\" in text: text = text.replace(\"!\\\"\",\"\\\"!\")\n#     if \"?\" in text: text = text.replace(\"?\\\"\",\"\\\"?\")\n#     text = text.replace(\".\",\".<stop>\")\n#     text = text.replace(\"?\",\"?<stop>\")\n#     text = text.replace(\"!\",\"!<stop>\")\n#     text = text.replace(\"<prd>\",\".\")\n#     sentences = text.split(\"<stop>\")\n#     if sentences[-1] == '':\n#         sentences = sentences[:-1]\n#     sentences = [s.strip() for s in sentences]\n#     return sentences\n\n# with open(\"train.txt\", \"w\") as train_file:\n#     for filename in tqdm(Path(\"..\/input\/feedback-prize-2021\/train\").glob(\"*.txt\"), total=15594):\n#         with open(filename) as current_file:\n#             text = current_file.read().replace(\"\\n\", \" \")\n#         sentences = split_into_sentences(text)\n        \n#         cleaned_sentences = []\n        \n#         for idx, sent in enumerate(sentences):\n            \n#             # if a sentence is short, add it to the previous one\n#             if idx > 0 and len(sent) < 20:\n#                 cleaned_sentences[-1] = cleaned_sentences[-1].strip() + \" \" + sent\n#             else:\n#                 cleaned_sentences.append(sent)\n        \n#         train_file.write(\"\\n\".join(cleaned_sentences)+\"\\n\")\n        \n#     for filename in tqdm(Path(\"..\/input\/feedback-prize-2021\/test\").glob(\"*.txt\")):\n#         # Weird way of making sure to not put back-to-back \"\\n\"            \n#         with open(filename) as current_file:\n#             text = current_file.read().replace(\"\\n\", \" \")\n#         sentences = split_into_sentences(text)\n        \n#         cleaned_sentences = []\n        \n#         for idx, sent in enumerate(sentences):\n            \n#             # if a sentence is short, add it to the previous one\n#             if idx > 0 and len(sent) < 20:\n#                 cleaned_sentences[-1] = cleaned_sentences[-1].strip() + \" \" + sent\n#             else:\n#                 cleaned_sentences.append(sent)\n        \n#         train_file.write(\"\\n\".join(cleaned_sentences)+\"\\n\")\n        \n        \n# from datasets import load_dataset\n\n# dataset = load_dataset(\"text\", data_files=\"train.txt\", split=\"train\")\n# dataset = dataset.filter(lambda x: len(x[\"text\"]) > 20) # remove short ones\n\n# def remove_duplicates(example):\n#     if example[\"text\"] in seen:\n#         return False\n#     seen.add(example[\"text\"])\n#     return True\n\n# seen = set()\n# dataset = dataset.filter(remove_duplicates)\n\n\n# with open(\"train.txt\", \"w\") as fp:\n#     for i, line in enumerate(dataset[\"text\"]):\n#         if i == 0:\n#             fp.write(line.strip())\n#         else:\n#             fp.write(\"\\n\"+line.strip())","b3eddb42":"# Setup logging\nlogging.basicConfig(\n    format=\"%(asctime)s - %(levelname)s - %(name)s - %(message)s\",\n    datefmt=\"%m\/%d\/%Y %H:%M:%S\",\n    handlers=[logging.StreamHandler(sys.stdout)],\n)\n\nlog_level = training_args.get_process_log_level()\nlogger.setLevel(log_level)\ndatasets.utils.logging.set_verbosity(log_level)\ntransformers.utils.logging.set_verbosity(log_level)\ntransformers.utils.logging.enable_default_handler()\ntransformers.utils.logging.enable_explicit_format()\n\n# Log on each process the small summary:\nlogger.warning(\n    f\"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}\"\n    + f\"distributed training: {bool(training_args.local_rank != -1)}, 16-bits training: {training_args.fp16}\"\n)\n# Set the verbosity to info of the Transformers logger (on main process only):\nlogger.info(f\"Training\/evaluation parameters {training_args}\")","8331d72a":"# Detecting last checkpoint.\nlast_checkpoint = None\nif os.path.isdir(training_args.output_dir) and training_args.do_train and not training_args.overwrite_output_dir:\n    last_checkpoint = get_last_checkpoint(training_args.output_dir)\n    if last_checkpoint is None and len(os.listdir(training_args.output_dir)) > 0:\n        raise ValueError(\n            f\"Output directory ({training_args.output_dir}) already exists and is not empty. \"\n            \"Use --overwrite_output_dir to overcome.\"\n        )\n    elif last_checkpoint is not None and training_args.resume_from_checkpoint is None:\n        logger.info(\n            f\"Checkpoint detected, resuming training at {last_checkpoint}. To avoid this behavior, change \"\n            \"the `--output_dir` or add `--overwrite_output_dir` to train from scratch.\"\n        )","f2ec8030":"data_files = {}\nif data_args.train_file is not None:\n    data_files[\"train\"] = data_args.train_file\n    extension = data_args.train_file.split(\".\")[-1]\nif data_args.validation_file is not None:\n    data_files[\"validation\"] = data_args.validation_file\n    extension = data_args.validation_file.split(\".\")[-1]\nif extension == \"txt\":\n    extension = \"text\"\nraw_datasets = load_dataset(extension, data_files=data_files, cache_dir=model_args.cache_dir)\n\nif \"validation\" not in raw_datasets.keys():\n    raw_datasets[\"validation\"] = load_dataset(\n        extension,\n        data_files=data_files,\n        split=f\"train[:{data_args.validation_split_percentage}%]\",\n        cache_dir=model_args.cache_dir,\n    )\n    raw_datasets[\"train\"] = load_dataset(\n        extension,\n        data_files=data_files,\n        split=f\"train[{data_args.validation_split_percentage}%:]\",\n        cache_dir=model_args.cache_dir,\n    )","e2b83fce":"config_kwargs = {\n    \"cache_dir\": model_args.cache_dir,\n    \"revision\": model_args.model_revision,\n    \"use_auth_token\": True if model_args.use_auth_token else None,\n}\nif model_args.config_name:\n    config = AutoConfig.from_pretrained(model_args.config_name, **config_kwargs)\nelif model_args.model_name_or_path:\n    config = AutoConfig.from_pretrained(model_args.model_name_or_path, **config_kwargs)\nelse:\n    config = CONFIG_MAPPING[model_args.model_type]()\n    logger.warning(\"You are instantiating a new config instance from scratch.\")\n    if model_args.config_overrides is not None:\n        logger.info(f\"Overriding config: {model_args.config_overrides}\")\n        config.update_from_string(model_args.config_overrides)\n        logger.info(f\"New config: {config}\")\n\ntokenizer_kwargs = {\n    \"cache_dir\": model_args.cache_dir,\n    \"use_fast\": model_args.use_fast_tokenizer,\n    \"revision\": model_args.model_revision,\n    \"use_auth_token\": True if model_args.use_auth_token else None,\n}\nif model_args.tokenizer_name:\n    tokenizer = AutoTokenizer.from_pretrained(model_args.tokenizer_name, **tokenizer_kwargs)\nelif model_args.model_name_or_path:\n    tokenizer = AutoTokenizer.from_pretrained(model_args.model_name_or_path, **tokenizer_kwargs)\nelse:\n    raise ValueError(\n        \"You are instantiating a new tokenizer from scratch. This is not supported by this script.\"\n        \"You can do it from another script, save it, and load it from here, using --tokenizer_name.\"\n    )\n\nif model_args.model_name_or_path:\n    model = AutoModelForMaskedLM.from_pretrained(\n        model_args.model_name_or_path,\n        from_tf=bool(\".ckpt\" in model_args.model_name_or_path),\n        config=config,\n        cache_dir=model_args.cache_dir,\n        revision=model_args.model_revision,\n        use_auth_token=True if model_args.use_auth_token else None,\n    )\nelse:\n    logger.info(\"Training new model from scratch\")\n    model = AutoModelForMaskedLM.from_config(config)\n\n# I wouldn't recommend changing the number of tokens    \n# model.resize_token_embeddings(len(tokenizer))","b2baea35":"# Preprocessing the datasets.\n# First we tokenize all the texts.\nif training_args.do_train:\n    column_names = raw_datasets[\"train\"].column_names\nelse:\n    column_names = raw_datasets[\"validation\"].column_names\ntext_column_name = \"text\" if \"text\" in column_names else column_names[0]\n\nif data_args.max_seq_length is None:\n    max_seq_length = tokenizer.model_max_length\n    if max_seq_length > 1024:\n        logger.warning(\n            f\"The tokenizer picked seems to have a very large `model_max_length` ({tokenizer.model_max_length}). \"\n            \"Picking 1024 instead. You can change that default value by passing --max_seq_length xxx.\"\n        )\n        max_seq_length = 1024\nelse:\n    if data_args.max_seq_length > tokenizer.model_max_length:\n        logger.warning(\n            f\"The max_seq_length passed ({data_args.max_seq_length}) is larger than the maximum length for the\"\n            f\"model ({tokenizer.model_max_length}). Using max_seq_length={tokenizer.model_max_length}.\"\n        )\n    max_seq_length = min(data_args.max_seq_length, tokenizer.model_max_length)","89033443":"if data_args.line_by_line:\n    # When using line_by_line, we just tokenize each nonempty line.\n    padding = \"max_length\" if data_args.pad_to_max_length else False\n\n    def tokenize_function(examples):\n        # Remove empty lines\n        examples[text_column_name] = [\n            line for line in examples[text_column_name] if len(line) > 0 and not line.isspace()\n        ]\n        return tokenizer(\n            examples[text_column_name],\n            padding=padding,\n            truncation=True,\n            max_length=max_seq_length,\n            # We use this option because DataCollatorForLanguageModeling (see below) is more efficient when it\n            # receives the `special_tokens_mask`.\n            return_special_tokens_mask=True,\n        )\n\n    with training_args.main_process_first(desc=\"dataset map tokenization\"):\n        tokenized_datasets = raw_datasets.map(\n            tokenize_function,\n            batched=True,\n            num_proc=data_args.preprocessing_num_workers,\n            remove_columns=[text_column_name],\n            load_from_cache_file=not data_args.overwrite_cache,\n            desc=\"Running tokenizer on dataset line_by_line\",\n        )\nelse:\n    # Otherwise, we tokenize every text, then concatenate them together before splitting them in smaller parts.\n    # We use `return_special_tokens_mask=True` because DataCollatorForLanguageModeling (see below) is more\n    # efficient when it receives the `special_tokens_mask`.\n    def tokenize_function(examples):\n        return tokenizer(examples[text_column_name], return_special_tokens_mask=True)\n\n    with training_args.main_process_first(desc=\"dataset map tokenization\"):\n        tokenized_datasets = raw_datasets.map(\n            tokenize_function,\n            batched=True,\n            num_proc=data_args.preprocessing_num_workers,\n            remove_columns=column_names,\n            load_from_cache_file=not data_args.overwrite_cache,\n            desc=\"Running tokenizer on every text in dataset\",\n        )","17d581f1":"def group_texts(examples):\n    # Concatenate all texts.\n    concatenated_examples = {k: list(chain(*examples[k])) for k in examples.keys()}\n    total_length = len(concatenated_examples[list(examples.keys())[0]])\n    # We drop the small remainder, we could add padding if the model supported it instead of this drop, you can\n    # customize this part to your needs.\n    if total_length >= max_seq_length:\n        total_length = (total_length \/\/ max_seq_length) * max_seq_length\n    # Split by chunks of max_len.\n    result = {\n        k: [t[i : i + max_seq_length] for i in range(0, total_length, max_seq_length)]\n        for k, t in concatenated_examples.items()\n    }\n    return result\n\n\nwith training_args.main_process_first(desc=\"grouping texts together\"):\n    tokenized_datasets = tokenized_datasets.map(\n        group_texts,\n        batched=True,\n        num_proc=data_args.preprocessing_num_workers,\n        load_from_cache_file=not data_args.overwrite_cache,\n        desc=f\"Grouping texts in chunks of {max_seq_length}\",\n    )","1a8e8465":"if training_args.do_train:\n    if \"train\" not in tokenized_datasets:\n        raise ValueError(\"--do_train requires a train dataset\")\n    train_dataset = tokenized_datasets[\"train\"]\n    if data_args.max_train_samples is not None:\n        train_dataset = train_dataset.select(range(data_args.max_train_samples))\n\nif training_args.do_eval:\n    if \"validation\" not in tokenized_datasets:\n        raise ValueError(\"--do_eval requires a validation dataset\")\n    eval_dataset = tokenized_datasets[\"validation\"]\n    if data_args.max_eval_samples is not None:\n        eval_dataset = eval_dataset.select(range(data_args.max_eval_samples))\n\n# Data collator\n# This one will take care of randomly masking the tokens.\npad_to_multiple_of_8 = data_args.line_by_line and training_args.fp16 and not data_args.pad_to_max_length\ndata_collator = DataCollatorForLanguageModeling(\n    tokenizer=tokenizer,\n    mlm_probability=data_args.mlm_probability,\n    pad_to_multiple_of=8 if pad_to_multiple_of_8 else None,\n)","3ba7a7d1":"trainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=train_dataset if training_args.do_train else None,\n    eval_dataset=eval_dataset if training_args.do_eval else None,\n    tokenizer=tokenizer,\n    data_collator=data_collator,\n)","9a00a1d0":"%env TOKENIZERS_PARALLELISM=true\n\nif training_args.do_train:\n    checkpoint = None\n    if training_args.resume_from_checkpoint is not None:\n        checkpoint = training_args.resume_from_checkpoint\n    elif last_checkpoint is not None:\n        checkpoint = last_checkpoint\n    train_result = trainer.train(resume_from_checkpoint=checkpoint)\n    trainer.save_model()  # Saves the tokenizer too for easy upload\n    metrics = train_result.metrics\n\n    max_train_samples = (\n        data_args.max_train_samples if data_args.max_train_samples is not None else len(train_dataset)\n    )\n    metrics[\"train_samples\"] = min(max_train_samples, len(train_dataset))\n\n    trainer.log_metrics(\"train\", metrics)\n    trainer.save_metrics(\"train\", metrics)\n    trainer.save_state()","dd6ebc8c":"if training_args.do_eval:\n    logger.info(\"*** Evaluate ***\")\n\n    metrics = trainer.evaluate()\n\n    max_eval_samples = data_args.max_eval_samples if data_args.max_eval_samples is not None else len(eval_dataset)\n    metrics[\"eval_samples\"] = min(max_eval_samples, len(eval_dataset))\n    try:\n        perplexity = math.exp(metrics[\"eval_loss\"])\n    except OverflowError:\n        perplexity = float(\"inf\")\n    metrics[\"perplexity\"] = perplexity\n\n    trainer.log_metrics(\"eval\", metrics)\n    trainer.save_metrics(\"eval\", metrics)","2a1b479a":"## Set arguments","cd6f3fcd":"# Group texts\n\nThe lines have been tokenized and not truncated, so now they are concatenated together and chunked into max_seq_length chunks.\n\ne.g. \nIf you have 5 lines of length 100, 500, 1000, and 400, they will get combined into one line of length 100+500+1000+400 = 2000. Then they will be chunked into max_seq_length chunks. If max_seq_length=384, then there will be `2000\/\/384` chunks. The remainder is discarded. Special tokens remain included. It doesn't matter if BOS or EOS tokens are in the middle or not at the beginning or end.","26777c84":"# Setting tokenization variables","55bf9163":"## Checking for checkpoint\n\nUseful if you want to pick up where you left off","7aa3b374":"# Final Data Preparations","50302235":"## Splitting train file by a small percentage to create validation data","9ee3bcac":"# Using pre-made text dataset\n\nthe code I used to make it is hidden in the next cell. Dataset here: https:\/\/www.kaggle.com\/nbroad\/feedback-prize-linebyline-text-dataset","1eae4fd1":"# In-domain pre-training\n\nAll of your favorite flavors of transformers were trained on many GBs of text from Wikipedia, BookCorpus, news, and other web documents. Since the documents for this competition might be slightly different, additional pre-training adapts the model to this domain which can result in improvements downstream.\n\nThis uses Hugging Face Trainer class to easily do in-domain pre-training. Adapted from this: [run_mlm.py](https:\/\/github.com\/huggingface\/transformers\/blob\/master\/examples\/pytorch\/language-modeling\/run_mlm.py)\n\nBetter performance might be squeezed out by doing a custom training loop.\n\nThere is actually quite a lot of text to train on, so it can take awhile on GPU. I'll also make a TPU version.","07fca2dd":"## Run final validation","653dc327":"## Run training","020587fc":"## Setting up Trainer","0aeb5f4a":"# Tokenizing","4c8a2ff5":"## Instantiating tokenizer and model"}}