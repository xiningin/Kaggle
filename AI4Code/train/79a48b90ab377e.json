{"cell_type":{"4255d858":"code","0e7fee59":"code","6b1818d1":"code","513a6f03":"code","6141dd2f":"code","360f058e":"code","7559f26c":"code","2ee71d4c":"code","c99e18ff":"code","76ebd62b":"code","f3bb4acf":"code","6339bc83":"code","ed6d5b52":"code","fad1311f":"code","cc2a4a7a":"code","9662a4d0":"code","4659c684":"code","bae70e7a":"code","9c05ceb0":"code","166165d3":"code","b4cd44fe":"code","c700b49b":"code","a0e3cfae":"code","7345595c":"code","9d41de67":"code","8e0e857c":"code","bafc1cbf":"code","761cbba7":"code","a559008d":"code","0ecd4406":"code","167d3f9c":"code","640e186e":"code","a71c258c":"code","ee73efe6":"code","e63f1363":"code","762a48e0":"code","277fb5a7":"code","b189f5c8":"code","5966b6a4":"code","ce834c85":"code","5077fbeb":"code","1ef3119c":"markdown","2062bb1d":"markdown","da8a5191":"markdown","3aeb8edc":"markdown","f5d59131":"markdown","4ea57580":"markdown","8f15a129":"markdown","22c25ca5":"markdown","a0849477":"markdown","a4e53c46":"markdown","d883b846":"markdown","3de8f96c":"markdown","2adfb16a":"markdown","0cc57363":"markdown","cc45d492":"markdown","518ebb45":"markdown","0668cc6f":"markdown","643ad75e":"markdown","820fe8ec":"markdown","fbe13ff7":"markdown","f0fb9b3a":"markdown","9a0fef9d":"markdown","c461b750":"markdown","7ea487a1":"markdown","481938c7":"markdown","04597158":"markdown","599474a9":"markdown","10c49944":"markdown","49b80e20":"markdown","36cf732e":"markdown","b8b07187":"markdown","2032394a":"markdown","5be8762a":"markdown","63efacbb":"markdown","ca374ae5":"markdown","54c31047":"markdown"},"source":{"4255d858":"import pandas as pd  \nimport numpy as np   \nimport urllib       \nimport re           \nimport datetime     \nimport calendar     \nimport time         \nimport scipy         \nfrom sklearn.cluster import KMeans \nfrom haversine import haversine \nimport math          \nimport seaborn as sns \nimport matplotlib.pyplot as plt\nimport os    \nimport nltk\nfrom nltk.corpus import stopwords\nimport string\nimport xgboost as xgb\nfrom nltk.tokenize import word_tokenize, sent_tokenize\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn import ensemble, metrics, model_selection, naive_bayes\nfrom sklearn.preprocessing import LabelEncoder\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","0e7fee59":"!apt-get install p7zip\n!apt install --assume-yes p7zip-full\n!7z x \/kaggle\/input\/mercari-price-suggestion-challenge\/train.tsv.7z -y\n!7z x \/kaggle\/input\/mercari-price-suggestion-challenge\/test_stg2.tsv.zip -y","6b1818d1":"train_df = pd.read_table(\"train.tsv\")\nprint(train_df.shape)\ntrain_df.head(10)","513a6f03":"test_df = pd.read_table(\"test_stg2.tsv\")\nprint(test_df.shape)\ntest_df.head(10)","6141dd2f":"train_df.nunique()","360f058e":"print(\"Train dataset:\\n\" + str(train_df['item_condition_id'].value_counts() \/ train_df.shape[0]))\nprint('item_condition_id is null:', train_df['item_condition_id'].isnull().sum())\nprint(\"\\nTest dataset:\\n\" + str(test_df['item_condition_id'].value_counts() \/ test_df.shape[0]))\nprint('item_condition_id is null:', test_df['item_condition_id'].isnull().sum())","7559f26c":"print(train_df['category_name'].nunique())\ntrain_df['category_name'].isnull().sum()","2ee71d4c":"print('Top 5 popular category in Train dataset\\n')\ntrain_df['category_name'].value_counts()[:5]\n","c99e18ff":"print('Top 5 popular category in Test dataset\\n')\ntest_df['category_name'].value_counts()[:5]\n","76ebd62b":"print(train_df['brand_name'].nunique())\nprint(train_df['brand_name'].isnull().sum())","f3bb4acf":"print(\"Train dataset: \\n\" + str(train_df['brand_name'].value_counts()[:5]))\nprint(\"\\nTest dataset: \\n\" + str(test_df['brand_name'].value_counts()[:5]))","6339bc83":"train_df.price.describe()","ed6d5b52":"plt.subplot(1, 2, 1)\n(train_df['price']).plot.hist(bins=50, figsize=(20,10), edgecolor='white',range=[0,250])\nplt.xlabel('price+', fontsize=17)\nplt.ylabel('frequency', fontsize=17)\nplt.tick_params(labelsize=15)\nplt.title('Price Distribution - Train Dataset', fontsize=17)","fad1311f":"plt.subplot(1, 2, 2)\nnp.log(train_df['price']+1).plot.hist(bins=50, figsize=(20,10), edgecolor='white')\nplt.xlabel('log(price+1)', fontsize=17)\nplt.ylabel('frequency', fontsize=17)\nplt.tick_params(labelsize=15)\nplt.title('Log(Price) Distribution - Train Dataset', fontsize=17)\nplt.show()","cc2a4a7a":"names='shipByBuyer', 'shipBySeller'\nvalues=train_df.shipping.value_counts()\/len(train_df)*100\nplt.pie(values, labels=names,autopct='%1.1f%%',labeldistance=1.15, wedgeprops = { 'linewidth' : 3, 'edgecolor' : 'white' });\nplt.show();","9662a4d0":"names='shipByBuyer', 'shipBySeller'\nvalues=test_df.shipping.value_counts()\/len(test_df)*100\nplt.pie(values, labels=names,autopct='%1.1f%%',labeldistance=1.15, wedgeprops = { 'linewidth' : 3, 'edgecolor' : 'white' });\nplt.show();","4659c684":"def cat_split(text):\n    try: return text.split(\"\/\")\n    except: return (\"Other\",\"Other\",\"Other\")\ntrain_df[\"cat_1\"], train_df[\"cat_2\"], train_df[\"cat_3\"] = zip(*train_df[\"category_name\"].apply(lambda cat: cat_split(cat)))\ntest_df[\"cat_1\"], test_df[\"cat_2\"], test_df[\"cat_3\"] = zip(*test_df[\"category_name\"].apply(lambda cat: cat_split(cat)))","bae70e7a":"def fill(data):\n    data['category_name'].fillna('Missing', inplace = True)\n    data['brand_name'].fillna('Missing', inplace = True)\n    data['item_description'].fillna(value=\"None\", inplace=True)\n    return data\n\nfill(train_df)\nfill(test_df)","9c05ceb0":"#train_df.drop(columns =[\"category_name\"], inplace = True)\ntrain_df.drop(columns =[\"train_id\"], inplace = True)\ntrain_df.head()","166165d3":"cat_col=train_df.select_dtypes(include=['object']).columns.tolist()\ncat_col","b4cd44fe":"from sklearn.preprocessing import LabelEncoder\nlabelencoder_X=LabelEncoder()\nfor col in cat_col:\n    train_df[col] = labelencoder_X.fit_transform(train_df[col])\ntrain_df[cat_col].head()","c700b49b":"cat_col=test_df.select_dtypes(include=['object']).columns.tolist()\ncat_col","a0e3cfae":"from sklearn.preprocessing import LabelEncoder\nlabelencoder_X=LabelEncoder()\nfor col in cat_col:\n    test_df[col] = labelencoder_X.fit_transform(test_df[col])\ntest_df[cat_col].head()","7345595c":"do_not_use_for_training = ['cat_1','test_id',\"name\",'cat_2','cat_3','train_id', 'category_name', 'price', 'item_description']\nfeature_names = [f for f in train_df.columns if f not in do_not_use_for_training]","9d41de67":"y = np.log(train_df['price'].values + 1)","8e0e857c":"from sklearn.model_selection import train_test_split\nXtr, Xv, ytr, yv = train_test_split(train_df[feature_names].values, y, test_size=0.2, random_state=0)","bafc1cbf":"from sklearn.metrics import mean_squared_error, r2_score","761cbba7":"def rmsle(Y, Y_pred):\n    assert Y.shape == Y_pred.shape\n    return np.sqrt(np.mean(np.square(Y_pred - Y )))","a559008d":"def run_model(model, Xtr, ytr, Xv, yv):\n    model.fit(Xtr, ytr)\n    \n    ypre = model.predict(Xv)\n    \n    mse = mean_squared_error(yv, ypre)\n    r_sq = r2_score(yv, ypre)\n    rmlse_1 = rmsle(yv, ypre)\n    \n    print(\"Mean Squared Error Value : \"+\"{:.2f}\".format(mse))\n    print(\"\\nR-Squared Value : \"+\"{:.2f}\".format(r_sq))\n    print(\"\\nRMLSE : \"+\"{:.2f}\".format(rmlse_1))\n    return model, mse, r_sq, rmlse_1","0ecd4406":"dtrain = xgb.DMatrix(Xtr, label=ytr)\ndvalid = xgb.DMatrix(Xv, label=yv)\ndtest = xgb.DMatrix(test_df[feature_names].values)","167d3f9c":"watchlist = [(dtrain, 'train'), (dvalid, 'valid')]","640e186e":"xgb_par = {'min_child_weight': 50, 'eta': 0.05, 'colsample_bytree': 0.5, 'max_depth': 50,\n            'subsample': 0.9, 'lambda': 2.0, 'nthread': -1, 'booster' : 'gbtree', 'silent': 1,\n            'eval_metric': 'rmse', 'objective': 'reg:linear'}\n\nmodel_1 = xgb.train(xgb_par, dtrain, 200, watchlist, early_stopping_rounds=20, maximize=False, verbose_eval=20)\nprint('Modeling RMSLE %.5f' % model_1.best_score)","a71c258c":"from sklearn.linear_model import LinearRegression\nlinear_reg = LinearRegression()\nprint(\"Linear Regression\")\nprint(\"----------------\")\nmodel_2, mse_2, r_sq_2, rmlse_3 = run_model(linear_reg, Xtr, ytr, Xv, yv)","ee73efe6":"from sklearn.linear_model import Ridge\nridge_reg = Ridge()\nprint(\"Ridge Regression\")\nprint(\"----------------\")\nmodel_3, mse_3, r_sq_3, rmlse_3 = run_model(ridge_reg, Xtr, ytr, Xv, yv)","e63f1363":"import lightgbm\nlgbm_reg = lightgbm.LGBMRegressor()\nprint(\"LGBM Regression\")\nprint(\"---------------\")\nmodel_4, mse_4, r_sq_4, rmlse_4 = run_model(lgbm_reg, Xtr, ytr, Xv, yv)","762a48e0":"ytest = model_1.predict(dtest)","277fb5a7":"submission = np.exp(ytest) - 1","b189f5c8":"submission = pd.DataFrame(submission).reset_index()","5966b6a4":"submission.columns=[\"test_id\",\"price\"]","ce834c85":"print(submission.shape)\nsubmission.head()","5077fbeb":"submission.to_csv('submission.csv', index=False)","1ef3119c":"**LGBM Regression**\n\nLightGBM th\u1ef1c hi\u1ec7n s\u1ef1 ph\u00e1t tri\u1ec3n theo chi\u1ec1u d\u1ecdc c\u1ee7a l\u00e1, d\u1eabn \u0111\u1ebfn gi\u1ea3m t\u1ed5n th\u1ea5t nhi\u1ec1u h\u01a1n v\u00e0 do \u0111\u00f3 \u0111\u1ed9 ch\u00ednh x\u00e1c cao h\u01a1n \u0111\u1ed3ng th\u1eddi nhanh h\u01a1n. Nh\u01b0ng \u0111i\u1ec1u n\u00e0y c\u0169ng c\u00f3 th\u1ec3 d\u1eabn \u0111\u1ebfn vi\u1ec7c trang b\u1ecb qu\u00e1 nhi\u1ec1u d\u1eef li\u1ec7u \u0111\u00e0o t\u1ea1o \u0111\u01b0\u1ee3c x\u1eed l\u00fd b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng tham s\u1ed1 \u0111\u1ed9 s\u00e2u t\u1ed1i \u0111a ch\u1ec9 \u0111\u1ecbnh n\u01a1i s\u1ebd x\u1ea3y ra s\u1ef1 ph\u00e2n t\u00e1ch. Do \u0111\u00f3, XGBoost c\u00f3 kh\u1ea3 n\u0103ng x\u00e2y d\u1ef1ng c\u00e1c m\u00f4 h\u00ecnh m\u1ea1nh m\u1ebd h\u01a1n LightGBM.\n![image.png](attachment:0e2dce3d-f526-4351-ad09-2fe46d248daa.png)![image.png](attachment:4e868feb-98b0-4301-9721-11998550e0aa.png)","2062bb1d":"**M\u1ed9t s\u1ea3n ph\u1ea9m g\u1ed3m c\u00e1c thu\u1ed9c t\u00ednh:**\n* name: t\u00ean c\u1ee7a s\u1ea3n ph\u1ea9m\n* item_condition_id: t\u00ecnh tr\u1ea1ng s\u1ea3n ph\u1ea9m (1,2,3,4,5)\n* category_name: danh s\u00e1ch danh m\u1ee5c s\u1ea3n ph\u1ea9m\n* brand_name: t\u00ean th\u01b0\u01a1ng hi\u1ec7u\n* price: gi\u00e1 s\u1ea3n ph\u1ea9m (kh\u00f4ng c\u00f3 trong test_stg2.tsv - \u0111\u00e2y l\u00e0 output c\u1ee7a b\u00e0i to\u00e1n)\n* shipping: 1 n\u1ebfu ng\u01b0\u1eddi b\u00e1n ch\u1ecbu ph\u00ed v\u1eadn chuy\u1ec3n, 0 n\u1ebfu ng\u01b0\u1eddi mua ch\u1ecbu\n* item_description: m\u00f4 t\u1ea3 s\u1ea3n ph\u1ea9m","da8a5191":"C\u00f3 4809 gi\u00e1 tr\u1ecb kh\u00e1c nhau c\u1ee7a brand_name trong t\u1eadp train. V\u00e0 c\u00f3 632682 s\u1ea3n ph\u1ea9m kh\u00f4ng c\u00f3 th\u01b0\u01a1ng hi\u1ec7u","3aeb8edc":"# **Model**","f5d59131":"**2**. Thay th\u1ebf c\u00e1c gi\u00e1 tr\u1ecb null \u1edf c\u00e1c c\u1ed9t category_name,brand_name, item_description","4ea57580":"Top 5 c\u00e1c category ph\u1ed5 bi\u1ebfn \u1edf t\u1eadp train v\u00e0 t\u1eadp test t\u01b0\u01a1ng t\u1ef1 nhau, c\u00e1c ng\u00e0nh h\u00e0ng thu\u1ed9c woman v\u00e0 beauty chi\u1ebfm s\u1ed1 l\u01b0\u1ee3ng l\u1edbn","8f15a129":"# **Submit**","22c25ca5":"**Ridge Regression**\nRidge Regression l\u00e0 m\u1ed9t k\u1ef9 thu\u1eadt \u0111\u1ec3 ph\u00e2n t\u00edch d\u1eef li\u1ec7u h\u1ed3i quy nhi\u1ec1u l\u1ea7n. Khi x\u1ea3y ra \u0111a c\u1ed9ng tuy\u1ebfn, c\u00e1c \u01b0\u1edbc l\u01b0\u1ee3ng b\u00ecnh ph\u01b0\u01a1ng nh\u1ecf nh\u1ea5t l\u00e0 kh\u00f4ng ch\u1ec7ch. M\u1ed9t m\u1ee9c \u0111\u1ed9 ch\u1ec7ch \u0111\u01b0\u1ee3c th\u00eam v\u00e0o c\u00e1c \u01b0\u1edbc t\u00ednh h\u1ed3i quy v\u00e0 k\u1ebft qu\u1ea3 l\u00e0 h\u1ed3i quy s\u01b0\u1eddn n\u00fai l\u00e0m gi\u1ea3m c\u00e1c sai s\u1ed1 ti\u00eau chu\u1ea9n. C\u00f4ng th\u1ee9c:\n![image.png](attachment:0efbff93-7c5a-403d-a21e-8c17e1a54756.png)!","a0849477":"**4.price**","a4e53c46":"Chia t\u1eadp d\u1eef li\u1ec7u hu\u1ea5n th\u00e0nh 2: hu\u1ea5n luy\u1ec7n, \u0111\u00e1nh gi\u00e1: d\u00f9ng \u0111\u1ec3 hu\u1ea5n luy\u1ec7n, \u0111\u00e1nh gi\u00e1 m\u00f4 h\u00ecnh. V\u00ec b\u00e0i to\u00e1n gi\u1edd \u0111\u00e3 tr\u1edf th\u00e0nh d\u1ef1 \u0111o\u00e1n log() v\u00e0 h\u00e0m \u0111\u00e1nh gi\u00e1 c\u1ee7a kaggle l\u00e0 Root Mean Squared Log Error(RMLSE).","d883b846":"**RESULT**\n\nLGBM Regression\n---------------\nMean Squared Error Value : 0.43\n\nR-Squared Value : 0.23\n\nRMLSE : 0.65","3de8f96c":"**1. item_condition_id**","2adfb16a":"Tr\u01b0\u1edbc khi ch\u1ea1y xgboost, ta c\u1ea7n c\u00e0i \u0111\u1eb7t c\u00e1c th\u00f4ng s\u1ed1: th\u00f4ng s\u1ed1 chung(General parameters), th\u00f4ng s\u1ed1 t\u0103ng s\u1ed1(Booster parameters), th\u00f4ng s\u1ed1 nhi\u1ec7m v\u1ee5(Task parameters).\n\n* Th\u00f4ng s\u1ed1 chung:\n    * booster: s\u1eed d\u1ee5ng gbtree\n    * nthread: S\u1ed1 lu\u1ed3ng song song \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ch\u1ea1y XGBoost\n* Th\u00f4ng s\u1ed1 tree booster:\n    * eat: l\u00e0 learning rate (0.9)\n    * max_depth: \u0110\u1ed9 s\u00e2u c\u1ee7a c\u00e2y, vi\u1ec7c t\u0103ng gi\u00e1 tr\u1ecb n\u00e0y s\u1ebd l\u00e0m cho m\u00f4 h\u00ecnh ph\u1ee9c t\u1ea1p h\u01a1n v\u00e0 c\u00f3 nhi\u1ec1u kh\u1ea3 n\u0103ng b\u1ecb qu\u00e1 t\u1ea3i (15)\n    * min_child_weight: T\u1ed5ng tr\u1ecdng l\u01b0\u1ee3ng c\u00e1 th\u1ec3 t\u1ed1i thi\u1ec3u (hessian) c\u1ea7n thi\u1ebft \u1edf child. Trong \u0111\u00e2y s\u1eed d\u1ee5ng h\u1ed3i quy tuy\u1ebfn t\u00ednh, t\u01b0\u01a1ng \u1ee9ng v\u1edbi s\u1ed1 l\u01b0\u1ee3ng c\u00e1 th\u1ec3 t\u1ed1i thi\u1ec3u c\u1ea7n c\u00f3 trong m\u1ed7i n\u00fat. (20)\n    * lamda: tr\u1ecdng s\u1ed1, t\u0103ng gi\u00e1 tr\u1ecb n\u00e0y s\u1ebd l\u00e0m cho m\u00f4 h\u00ecnh tr\u1edf n\u00ean th\u1eadn tr\u1ecdng h\u01a1n (2.0)\n* Th\u00f4ng s\u1ed1 nhi\u1ec7m v\u1ee5\n    * eval_metric: C\u00e1c ch\u1ec9 s\u1ed1 \u0111\u00e1nh gi\u00e1 cho d\u1eef li\u1ec7u x\u00e1c th\u1ef1c (rmlse)\n    * objective: m\u1ee5c ti\u00eau h\u1ecdc t\u1eadp (\"reg\":\"squarederror\": h\u1ed3i quy v\u1edbi t\u1ed5n th\u1ea5t b\u00ecnh ph\u01b0\u01a1ng)\n    * n_estimators: Number of gradient boosted trees. Equivalent to number of boosting rounds.(200)","0cc57363":"# **M\u00f4 t\u1ea3 b\u00e0i to\u00e1n:**\n    D\u1ef1 \u0111o\u00e1n gi\u00e1 s\u1ea3n ph\u1ea9m\n*     Input: D\u1eef li\u1ec7u bao g\u1ed3m: t\u00ean, t\u00ecnh tr\u1ea1ng s\u1ea3n ph\u1ea9m, nh\u00e3n hi\u1ec7u,v\u1eadn chuy\u1ec3n,danh m\u1ee5c,m\u00f4 t\u1ea3.\n*     Output: gi\u00e1 c\u1ee7a s\u1ea3n ph\u1ea9m(price > 0)","cc45d492":"C\u00f3 t\u1ea5t c\u1ea3 1287 gi\u00e1 tr\u1ecb category kh\u00e1c nhau tr\u00ean t\u1eadp hu\u1ea5n luy\u1ec7n. C\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a items trong c\u1ed9t category t\u1ea1o n\u00ean t\u1eeb 3 category ri\u00eang(1 main, 2 sub). B\u00ean c\u1ea1nh \u0111\u00f3 c\u0169ng t\u1ed3n t\u1ea1i 6327 items kh\u00f4ng c\u00f3 gi\u00e1 tr\u1ecb category.","518ebb45":"# **Train**","0668cc6f":"**5. shipping**","643ad75e":"# **X\u1eed l\u00fd d\u1eef li\u1ec7u**","820fe8ec":"# **Ph\u00e2n t\u00edch d\u1eef li\u1ec7u**","fbe13ff7":"# **B\u00e0i t\u1eadp l\u1edbn Machine Learning**\n H\u1ecdc ph\u1ea7n: INT3405_1\n\n H\u1ecd t\u00ean: L\u00ea Thu Trang\n\n MSSV:18021295","f0fb9b3a":" s\u1eed d\u1ee5ng h\u00e0m \u0111\u1ed3ng bi\u1ebfn log() s\u1ebd \u0111\u01b0a \u0111\u1ed3 th\u1ecb gi\u00e1 v\u1ec1 g\u1ea7n d\u1ea1ng ph\u00e2n b\u1ed1 chu\u1ea9n.","9a0fef9d":"Gi\u00e1 tr\u1ecb trung b\u00ecnh c\u1ee7a trainning set l\u00e0 267, nh\u01b0ng gi\u00e1 tr\u1ecb m\u1ed9t s\u1ed1 gi\u00e1 tr\u1ecb c\u1ef1 tr\u1ecb tr\u00ean 100, gi\u00e1 tr\u1ecb l\u1edbn nh\u1ea5t l\u00e0 2000, ph\u00e2n b\u1ed1 n\u00e0y s\u1ed1 l\u1ec7ch nhi\u1ec1u v\u1ec1 b\u00ean tr\u00e1i","c461b750":"# **Load d\u1eef li\u1ec7u**","7ea487a1":"**RESULT**\n\nRidge Regression\n----------------\nMean Squared Error Value : 0.53\n\nR-Squared Value : 0.06\n\nRMLSE : 0.73","481938c7":"Ta chuy\u1ec3n c\u00e1c t\u1eadp d\u1eef li\u1ec7u th\u00e0nh ma tr\u1eadn d\u1eef li\u1ec7u DMatrix, \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng n\u1ed9i b\u1ed9 trong XGBoost \u0111\u01b0\u1ee3c t\u1ed1i \u01b0u h\u00f3a cho c\u1ea3 hi\u1ec7u qu\u1ea3 b\u1ed9 nh\u1edb v\u00e0 t\u1ed1c \u0111\u1ed9 \u0111\u00e0o t\u1ea1o","04597158":"* Do c\u00e1c nh\u00e3n c\u00e1c nh\u00e3n c\u1ee7a c\u00e1c tr\u01b0\u1eddng cat_1, cat_2, cat_3, name, brand_name, item_describtion l\u00e0 d\u1ea1ng text chi\u1ebfm kh\u00f4ng gian l\u01b0u tr\u1eef, t\u1ed1n b\u1ed9 nh\u1edb n\u00ean ta s\u1ebd m\u00e3 h\u00f3a c\u00e1c nh\u00e3n n\u00e0y th\u00e0nh d\u1ea1ng s\u1ed1 b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng LabeEncoder.\n* LabeEncoder l\u00e0 l\u00e0 m\u1ed9t l\u1edbp ti\u1ec7n \u00edch \u0111\u1ec3 gi\u00fap chu\u1ea9n h\u00f3a c\u00e1c nh\u00e3n sao cho ch\u00fang ch\u1ec9 ch\u1ee9a c\u00e1c gi\u00e1 tr\u1ecb t\u1eeb 0 \u0111\u1ebfn n_classes-1. N\u00f3 c\u0169ng c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 chuy\u1ec3n \u0111\u1ed5i c\u00e1c nh\u00e3n kh\u00f4ng ph\u1ea3i s\u1ed1 (mi\u1ec5n l\u00e0 ch\u00fang c\u00f3 th\u1ec3 b\u0103m v\u00e0 c\u00f3 th\u1ec3 so s\u00e1nh \u0111\u01b0\u1ee3c) th\u00e0nh c\u00e1c nh\u00e3n s\u1ed1.","599474a9":"**RESULT**\n\nLinear Regression\n----------------\nMean Squared Error Value : 0.53\n\nR-Squared Value : 0.06\n\nRMLSE : 0.73","10c49944":"**3. brand_name**","49b80e20":"**LinearRegression**\n\nLinear Regression \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ph\u00e2n t\u00edch d\u1ef1 \u0111o\u00e1n. H\u1ed3i quy tuy\u1ebfn t\u00ednh l\u00e0 m\u1ed9t c\u00e1ch ti\u1ebfp c\u1eadn tuy\u1ebfn t\u00ednh \u0111\u1ec3 m\u00f4 h\u00ecnh h\u00f3a m\u1ed1i quan h\u1ec7 gi\u1eefa ti\u00eau ch\u00ed ho\u1eb7c ph\u1ea3n \u1ee9ng v\u00f4 h\u01b0\u1edbng v\u00e0 nhi\u1ec1u y\u1ebfu t\u1ed1 d\u1ef1 b\u00e1o ho\u1eb7c bi\u1ebfn gi\u1ea3i th\u00edch. H\u1ed3i quy tuy\u1ebfn t\u00ednh t\u1eadp trung v\u00e0o ph\u00e2n ph\u1ed1i x\u00e1c su\u1ea5t c\u00f3 \u0111i\u1ec1u ki\u1ec7n c\u1ee7a ph\u1ea3n h\u1ed3i cho c\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a c\u00e1c y\u1ebfu t\u1ed1 d\u1ef1 \u0111o\u00e1n. \u0110\u1ed1i v\u1edbi h\u1ed3i quy tuy\u1ebfn t\u00ednh, c\u00f3 nguy c\u01a1 trang b\u1ecb qu\u00e1 m\u1ee9c. C\u00f4ng th\u1ee9c c\u1ee7a h\u1ed3i quy tuy\u1ebfn t\u00ednh l\u00e0: Y = bX + A.","36cf732e":"Lo\u1ea1i b\u1ecf c\u00e1c c\u1ed9t kh\u00f4ng c\u1ea7n thi\u1ebft cho vi\u1ec7c traing","b8b07187":"**2. category_name**","2032394a":"**XGBoost**\n\nXGBoost (eXtreme Gradient Boosting) l\u00e0 m\u1ed9t thu\u1eadt to\u00e1n h\u1ecdc m\u00e1y t\u1eadp trung v\u00e0o t\u1ed1c \u0111\u1ed9 t\u00ednh to\u00e1n v\u00e0 hi\u1ec7u su\u1ea5t m\u00f4 h\u00ecnh. Thu\u1eadt to\u00e1n c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho c\u1ea3 nhi\u1ec7m v\u1ee5 h\u1ed3i quy v\u00e0 ph\u00e2n lo\u1ea1i v\u00e0 \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 ho\u1ea1t \u0111\u1ed9ng v\u1edbi c\u00e1c b\u1ed9 d\u1eef li\u1ec7u l\u1edbn v\u00e0 ph\u1ee9c t\u1ea1p.\n![image.png](attachment:861a9be2-b7db-44fc-ba01-615fa29a7e58.png)![image.png](attachment:9297f473-5ca1-40c0-af17-e693c15b45ce.png)","5be8762a":"C\u00e1c gi\u00e1 tr\u1ecb item_condition_id tr\u00ean t\u1eadp train v\u00e0 test c\u00f3 t\u1ef7 l\u1ec7 t\u01b0\u01a1ng \u0111\u1ed3ng, t\u1ea5t c\u1ea3 c\u00e1c s\u1ea3n ph\u1ea9m \u0111\u1ec1u c\u00f3 gi\u00e1 tr\u1ecb item_condition_id","63efacbb":"**1.** h\u00e0m gi\u00fap x\u1eed l\u00fd t\u00e1ch tr\u01b0\u1eddng category th\u00e0nh 3 category \u0111\u01a1n l\u1ebb, v\u00e0 c\u00e1c items kh\u00f4ng c\u00f3 nh\u00e3n s\u1ebd \u0111\u01b0\u1ee3c thay (\"Other\",\"Other\",\"Other\").","ca374ae5":"55% ng\u01b0\u1eddi mua ph\u1ea3i ch\u1ecbu ph\u00ed v\u1eadn chuy\u1ec3n","54c31047":"\u0110\u1ed5i gi\u00e1 sang d\u1ea1ng log"}}