{"cell_type":{"c40d7acb":"code","7a894cde":"code","d987b143":"code","525294a8":"code","6d2cc6d0":"code","15fba829":"code","75acd54e":"code","6616017a":"code","d5250292":"code","74dcbe1a":"code","68082c06":"code","2c36af12":"code","f1944852":"code","e3e353a0":"code","099bcde6":"code","0dcfecd0":"code","1d1441fb":"code","e047f54b":"code","f584f013":"code","eaa1c26c":"code","7e1a0980":"code","b11699dd":"code","b69c5a1a":"code","aeb70be3":"code","ced39078":"code","d6dc53ad":"code","7d8dcdb2":"code","4515632d":"code","6ec7e5fd":"code","133cb786":"code","342319fe":"code","28dc7355":"code","9fce9448":"code","2a552ac5":"code","950e4721":"code","b67d1c07":"code","39f81ef3":"code","cbbdfc13":"code","1687986f":"code","20d2888e":"code","d14e3f42":"code","69129675":"code","def44aaf":"code","aec491bf":"code","9c71d57c":"code","f531ea29":"code","37573a8d":"code","a2601a1c":"code","94efc668":"code","ff485e08":"code","1eb8c2f7":"code","cc1c2b8a":"code","d3dfb974":"code","6155f2ad":"code","a8f18c88":"code","9c13ecc1":"code","5ae9e5a8":"code","852b14db":"code","65f9fcce":"code","41a47aa7":"code","3b28c092":"code","5db1b17f":"code","8e352c9c":"code","2f8efa66":"code","3daad76b":"code","b66f27e9":"code","faa7d68c":"code","3ead1314":"code","ba9869df":"code","9fe8daf8":"code","08cbf9f2":"code","7146f96d":"code","eeeb8e7f":"code","507f97b2":"code","175ef669":"code","16a0d492":"code","686c52ce":"code","ede6cf22":"code","89cfb053":"code","0375f939":"code","ff4f9241":"code","d7b0696a":"code","fa514907":"code","b5fde952":"code","3e372e3d":"code","cae20397":"code","a01bab27":"code","47ce4661":"code","f00597cd":"code","3679085f":"markdown","83795d02":"markdown","f9252e15":"markdown","91523757":"markdown","5559e1d5":"markdown","172dc59b":"markdown","2f0e424c":"markdown","0f535eae":"markdown","a8b1ba11":"markdown"},"source":{"c40d7acb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7a894cde":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom wordcloud import WordCloud\nimport plotly.express as px","d987b143":"import warnings\nwarnings.filterwarnings('ignore')","525294a8":"x = 2015\ndff = []\nwhile True:\n    globals()[f'df{x}'] = pd.read_csv(f'\/kaggle\/input\/world-happiness\/{x}.csv')\n    dff.append(globals()[f'df{x}'])\n    x += 1\n    if x == 2020:\n        break","6d2cc6d0":"for i, df in enumerate(dff):\n    print (f'201{i+5} dataset:')\n    display (dff[i].head(3))","15fba829":"df2015.rename(columns = {'Economy (GDP per Capita)' : 'GDP',\n                        'Health (Life Expectancy)' : 'Life',\n                        'Trust (Government Corruption)' : 'Trust'}, inplace = True)","75acd54e":"df2016.rename(columns = {'Economy (GDP per Capita)' : 'GDP',\n                        'Health (Life Expectancy)' : 'Life',\n                        'Trust (Government Corruption)' : 'Trust'}, inplace = True)","6616017a":"df2017.rename(columns = {'Happiness.Rank' : 'Happiness Rank',\n                        'Happiness.Score' : 'Happiness Score',\n                        'Economy..GDP.per.Capita.' : 'GDP',\n                        'Health..Life.Expectancy.' : 'Life',\n                        'Dystopia.Residual' : 'Dystopia Residual',\n                        'Trust..Government.Corruption.' : 'Trust'}, inplace = True)","d5250292":"df2018.rename(columns = {'Overall rank' : 'Happiness Rank',\n                        'Score' : 'Happiness Score',\n                        'Country or region' : 'Country',\n                        'Social support' : 'Family',\n                        'Freedom to make life choices' : 'Freedom',\n                        'GDP per capita' : 'GDP',\n                        'Healthy life expectancy' : 'Life',\n                        'Perceptions of corruption' : 'Trust'}, inplace = True)","74dcbe1a":"df2019.rename(columns = {'Overall rank' : 'Happiness Rank',\n                        'Score' : 'Happiness Score',\n                        'Country or region' : 'Country',\n                        'Social support' : 'Family',\n                        'Freedom to make life choices' : 'Freedom',\n                        'GDP per capita' : 'GDP',\n                        'Healthy life expectancy' : 'Life',\n                        'Perceptions of corruption' : 'Trust'}, inplace = True)","68082c06":"for i, df in enumerate(dff, 2015):\n    df['Year'] = i","2c36af12":"for df in dff:\n    if not ('Region') in df:\n        df['Region'] = None\n        temp = df.set_index('Country').Region.fillna(df2015.set_index('Country').Region).reset_index()\n        df.fillna(temp, inplace = True)","f1944852":"for i, df in enumerate(dff, 2015):\n    print ('\\n' f'df{i} dataset:' '\\n', df.isnull().sum())","e3e353a0":"fuldf = pd.concat(dff)","099bcde6":"df2015 = pd.read_csv(\"..\/input\/world-happiness\/2015.csv\")\ndf2015.drop(\"Standard Error\", axis=1,inplace=True)\ndf2015[\"Year\"] = 2015\ndf2015.columns = [\"Country\",\"Region\",\"Happiness Rank\",\"Happiness Score\",\"GDP\",\"Family\",\"Life\",\"Freedom\",\"Trust\",\"Generosity\",\"Dystopia Residual\",\"Year\"]\n\ndf2016 = pd.read_csv(\"..\/input\/world-happiness\/2016.csv\")\ndf2016.drop([\"Lower Confidence Interval\", \"Upper Confidence Interval\"],axis=1,inplace=True)\ndf2016[\"Year\"] = 2016\ndf2016.columns=[\"Country\", \"Region\", \"Happiness Rank\", \"Happiness Score\", \"GDP\", \"Family\", \"Life\", \"Freedom\", \"Trust\", \"Generosity\", \"Dystopia Residual\", \"Year\"]\n\ndf2017 = pd.read_csv(\"..\/input\/world-happiness\/2017.csv\")\ndf2017.drop([\"Whisker.high\",\"Whisker.low\"],axis=1,inplace=True)\ndf2017[\"Year\"]= 2017\ndf2017.columns=[\"Country\", \"Happiness Rank\", \"Happiness Score\", \"GDP\", \"Family\", \"Life\", \"Freedom\",\"Generosity\", \"Trust\", \"Dystopia Residual\", \"Year\"]\n\n\ncountry_region = df2015[[\"Country\",\"Region\"]]\ncountry_region = country_region.to_numpy()\n\ndef make_region(Country):\n    for i in range(len(country_region)):\n        if Country == country_region[i][0]:\n            return country_region[i][1]\n    \n    return \"no_region\"\n\ndf2017[\"Region\"] = df2017[\"Country\"].apply(make_region)\n\ndf2017.loc[32,\"Region\"] = 'Eastern Asia'\ndf2017.loc[49,\"Region\"] = 'Latin America and Caribbean'\ndf2017.loc[70,\"Region\"] = 'Eastern Asia'\ndf2017.loc[92,\"Region\"] = 'Sub-Saharan Africa'\ndf2017.loc[110,\"Region\"] = 'Sub-Saharan Africa'\ndf2017.loc[146,\"Region\"] =  'Sub-Saharan Africa'\n\ndf2018 = pd.read_csv(\"..\/input\/world-happiness\/2018.csv\")\ndf2018[\"Year\"] =2018\ndf2018.columns = [ \"Happiness Rank\",\"Country\", \"Happiness Score\", \"GDP\", \"Family\", \"Life\", \"Freedom\",\"Generosity\", \"Trust\", \"Year\"]\ndf2018[\"Dystopia Residual\"] = df2018[\"Happiness Score\"] - df2018[\"GDP\"] - df2018[\"Family\"] - df2018[\"Life\"] - df2018[\"Freedom\"] - df2018[\"Generosity\"] - df2018[\"Trust\"]\ndf2018[\"Region\"] = df2018[\"Country\"].apply(make_region)\ndf2018.loc[37,\"Region\"] = 'Latin America and Caribbean'\ndf2018.loc[48,\"Region\"] = 'Latin America and Caribbean'\ndf2018.loc[57,\"Region\"] = 'Central and Eastern Europe'\ndf2018.loc[97,\"Region\"] = 'Sub-Saharan Africa'\ndf2018.loc[118,\"Region\"] = 'Sub-Saharan Africa'\ndf2018.loc[153,\"Region\"] = 'Sub-Saharan Africa'\n\ndf2019 =pd.read_csv(\"..\/input\/world-happiness\/2019.csv\")\ndf2019[\"Year\"] = 2019\ndf2019.columns =[ \"Happiness Rank\",\"Country\", \"Happiness Score\", \"GDP\", \"Family\", \"Life\", \"Freedom\",\"Generosity\", \"Trust\", \"Year\"]\ndf2019[\"Dystopia Residual\"] = df2019[\"Happiness Score\"] - df2019[\"GDP\"] - df2019[\"Family\"] - df2019[\"Life\"] - df2019[\"Freedom\"] - df2019[\"Generosity\"] - df2019[\"Trust\"]\ndf2019[\"Region\"] = df2019[\"Country\"].apply(make_region)\ndf2019.loc[38,\"Region\"] = 'Latin America and Caribbean'\ndf2019.loc[63,\"Region\"] = 'Central and Eastern Europe'\ndf2019.loc[83,\"Region\"] = 'Central and Eastern Europe'\ndf2019.loc[111,\"Region\"] = 'Sub-Saharan Africa'\ndf2019.loc[112,\"Region\"] = 'Sub-Saharan Africa'\ndf2019.loc[119,\"Region\"] = 'Sub-Saharan Africa'\ndf2019.loc[155,\"Region\"] = 'Sub-Saharan Africa'","0dcfecd0":"df_tmp = fuldf.groupby([\"Region\",\"Year\"])[\"Happiness Score\"].mean()\ndf_tmp = pd.DataFrame(df_tmp).unstack()\ndf_tmp = df_tmp.reset_index()\ndf_tmp.columns=[\"Region\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\"]\ndf_tmp = df_tmp.melt(\"Region\")\nfig = px.bar(df_tmp.sort_values(by=\"value\"), x=\"Region\", y=\"value\",animation_frame='variable',text=\"value\",color=\"Region\",\n             height=600,title = 'Y\u0131llara g\u00f6re b\u00f6lgelerin mutluluk oran\u0131n\u0131n de\u011fi\u015fimi')\nfig.update_traces(texttemplate='%{text:.2f}',textposition='auto')\nfig.update_layout(transition = {'duration': 1000})\nfig.show()","1d1441fb":"df_1 = pd.concat([df2015.melt(id_vars=['Country','Year','Happiness Score','Happiness Rank','Region']),\n                 df2016.melt(id_vars=['Country','Year','Happiness Score','Happiness Rank','Region']),],ignore_index=True)\nfig = px.bar(df_1[df_1[\"Happiness Rank\"] <=10].sort_values(by=\"Happiness Score\"), y=\"Country\", x=\"value\", color='variable',animation_frame='Year',\n             height=700,title=\"2015-2016 Y\u0131llar\u0131 Aras\u0131 Mutluluk De\u011fi\u015fimi\",opacity=.2,text=\"value\")\nfig.update_traces(texttemplate='%{text:.2f}',textposition='auto')\nfig.update_layout(transition = {'duration': 1000})\nfig.show()","e047f54b":"df_2 = pd.concat([df2016.melt(id_vars=['Country','Year','Happiness Score','Happiness Rank','Region']),\n                 df2017.melt(id_vars=['Country','Year','Happiness Score','Happiness Rank','Region']),],ignore_index=True)\nfig = px.bar(df_2[df_2[\"Happiness Rank\"] <=10].sort_values(by=\"Happiness Score\"), y=\"Country\", x=\"value\", color='variable',animation_frame='Year',\n             height=700,title=\"2016-2017 Y\u0131llar\u0131 Aras\u0131 Mutluluk De\u011fi\u015fimi\",opacity=.2,text=\"value\")\nfig.update_traces(texttemplate='%{text:.2f}',textposition='auto')\nfig.update_layout(transition = {'duration': 1000})\nfig.show()","f584f013":"df1 = pd.read_csv('..\/input\/world-happiness\/2015.csv')","eaa1c26c":"df2 = pd.read_csv('..\/input\/world-happiness\/2016.csv')","7e1a0980":"df3 = pd.read_csv('..\/input\/world-happiness\/2017.csv')","b11699dd":"df4 = pd.read_csv('..\/input\/world-happiness\/2018.csv')","b69c5a1a":"df5 = pd.read_csv('..\/input\/world-happiness\/2019.csv')","aeb70be3":"import plotly.express as px\nhappiest_countries = fuldf.groupby(['Country'], sort = False)['Happiness Score', 'Year', 'GDP'].max()\ntop10 = happiest_countries.sort_values('Happiness Score', ascending = False)[:15]\nfig = px.scatter(top10,\n                x = top10.index,\n                y = 'Happiness Score',\n                size = 'GDP',\n                color = top10.index,\n                template = 'xgridoff',\n                animation_frame = 'Year',\n                title = 'En Mutlu 15 \u00dclke')\nfig.show()","ced39078":"df2015 = df1.iloc[:20,:]\ndf2016 = df2.iloc[:20,:]\ndf2017 = df3.iloc[:20,:]\ndf2018 = df4.iloc[:20,:]\ndf2019 = df5.iloc[:20,:]\n\nimport plotly.graph_objs as go\nv1 =go.Scatter(\n                    x = df2015['Country'],\n                    y = df2015['Happiness Score'],\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'red'),\n                    text= df2015.Country)\n\nv2 =go.Scatter(\n                    x = df2015['Country'],\n                    y = df2016['Happiness Score'],\n                    mode = \"markers\",\n                    name = \"2016\",\n                    marker = dict(color = 'green'),\n                    text= df2016.Country)\n\nv3 =go.Scatter(\n                    x = df2015['Country'],\n                    y = df2017['Happiness.Score'],\n                    mode = \"markers\",\n                    name = \"2017\",\n                    marker = dict(color = 'blue'),\n                    text= df2017.Country)\n\n\nv4 =go.Scatter(\n                    x = df2015['Country'],\n                    y = df2018['Score'],\n                    mode = \"markers\",\n                    name = \"2018\",\n                    marker = dict(color = 'black'),\n                    text= df2017.Country)\n\n\nv5 =go.Scatter(\n                    x = df2015['Country'],\n                    y = df2019['Score'],\n                    mode = \"markers\",\n                    name = \"2019\",\n                    marker = dict(color = 'pink'),\n                    text= df2017.Country)\n\n\ndata = [v1, v2, v3, v4, v5]\nlayout = dict(title = 'En iyi 20 \u00fclke aras\u0131ndaki mutluluk oran\u0131n\u0131n y\u0131llara g\u00f6re de\u011fi\u015fimi',\n              xaxis= dict(title= 'Country',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Happiness',ticklen= 5,zeroline= False),\n              hovermode=\"x unified\"\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","d6dc53ad":"data = dict(\n        type = 'choropleth',\n        colorscale = 'Viridis',\n         marker_line_width=1,\n        locations = df1['Country'],\n        locationmode = \"country names\",\n        z = df1['Happiness Score'],\n        text = df1['Country'],\n        colorbar = {'title' : 'Happiness Score'},\n        \n      )\nlayout = dict(title = ' 2015 y\u0131l\u0131 D\u00fcnya Mutluluk Haritas\u0131',\n              geo = dict(projection = {'type':'mercator'}, showocean = False, showlakes = True, showrivers = True, )\n             )\nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap,validate=False)","7d8dcdb2":"data = dict(\n        type = 'choropleth',\n        colorscale = 'Viridis',\n         marker_line_width=1,\n        locations = df2['Country'],\n        locationmode = \"country names\",\n        z = df2['Happiness Score'],\n        text = df2['Country'],\n        colorbar = {'title' : 'Happiness Score'},\n        \n      )\nlayout = dict(title = ' 2016 y\u0131l\u0131 D\u00fcnya Mutluluk Haritas\u0131',\n              geo = dict(projection = {'type':'mercator'}, showocean = False, showlakes = True, showrivers = True, )\n             )\nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap,validate=False)","4515632d":"data = dict(\n        type = 'choropleth',\n        colorscale = 'Viridis',\n         marker_line_width=1,\n        locations = df3['Country'],\n        locationmode = \"country names\",\n        z = df3['Happiness.Score'],\n        text = df3['Country'],\n        colorbar = {'title' : 'Happiness Score'},\n        \n      )\nlayout = dict(title = ' 2017 y\u0131l\u0131 D\u00fcnya Mutluluk Haritas\u0131',\n              geo = dict(projection = {'type':'mercator'}, showocean = False, showlakes = True, showrivers = True, )\n             )\nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap,validate=False)","6ec7e5fd":"fuldf['Happiness Change'] = (df5['Score'] - df1['Happiness Score']) \/ df1['Happiness Score']\ntemp = fuldf[np.abs(fuldf['Happiness Change']) > 0.01]\ntemp = fuldf.sort_values('Happiness Change')\ntemp['Year'] = temp['Year'].astype(str)\nfig = px.bar(temp,\n             x = 'Happiness Change',\n             y = 'Country',\n             color = 'Year',\n             orientation = 'h',\n             height = 900,\n             template = 'gridon',\n             title = '2015-2017 y\u0131llar\u0131 aras\u0131nda mutluluk oran\u0131n\u0131n de\u011fi\u015fimi')\nfig.show()","133cb786":"fig = px.scatter(fuldf,\n                x = 'GDP',\n                y = 'Happiness Score',\n                size = 'Freedom',\n                color = 'Country',\n                template = 'xgridoff',\n                animation_frame = 'Year',\n                title = '2015 - 2019 Y\u0131llar\u0131 aras\u0131ndaki GDP * Mutluluk Oran\u0131n\u0131 ve kabarc\u0131k \u00d6z\u011f\u00fcrl\u00fc\u011f\u00fcn Mutluluk oran\u0131na katk\u0131t\u0131s\u0131n\u0131 g\u00f6sterir') \nfig.show()","342319fe":"fig = px.scatter(fuldf,\n                x = 'Life',\n                y = 'Happiness Score',\n                size = 'GDP',\n                color = 'Country',\n                template = 'xgridoff',\n                animation_frame = 'Year',\n                labels = {'Life': 'Life Expectancy'},\n                title = '2015 - 2019 y\u0131llar\u0131 aras\u0131nda ki Sa\u011fl\u0131g\u0131n * Mutluluk oran\u0131n\u0131n ve kabarc\u0131klar GDP mutluluk oran\u0131na katk\u0131s\u0131 ')\nfig.show()","28dc7355":"import plotly.express as px\n\ndf2015 = pd.read_csv('..\/input\/world-happiness\/2015.csv')\ndf = df2015\n\nfig = px.sunburst(df, path=['Region', 'Country'], values='Happiness Score',\n                  color='Happiness Score', hover_data=['Happiness Rank'],\n                  color_continuous_scale='RdBu',\n                  color_continuous_midpoint=np.average(df['Happiness Score'], weights=df['Happiness Score']))\nfig.update_layout(hovermode=\"x unified\")\nfig.show()","9fce9448":"fuldf.drop(labels=['Upper Confidence Interval'],axis=1,inplace=True)\nfuldf.drop(labels=['Dystopia Residual'],axis=1,inplace=True)\nfuldf.drop(labels=['Whisker.high'],axis=1,inplace=True)\nfuldf.drop(labels=['Whisker.low'],axis=1,inplace=True)\nfuldf.drop(labels=['Standard Error'],axis=1,inplace=True)  ","2a552ac5":"fuldf.drop(labels=['Lower Confidence Interval'],axis=1,inplace=True)","950e4721":"fig = plt.figure(figsize=(10,10))\n\nax1 = plt.subplot(1,1,1)\n\nsns.heatmap(fuldf.iloc[:,0:10].corr(), annot=True, fmt=\".2f\", linewidths=.5,vmin=-1, vmax=1, center= 0,ax=ax1) ","b67d1c07":"f,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(fuldf.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.2f',ax=ax)\nplt.show()","39f81ef3":"import plotly.figure_factory as ff\nz = pd.DataFrame(fuldf.corr().values.tolist())\nz = z.round(2).values.tolist()\nfig = ff.create_annotated_heatmap(z, x = fuldf.corr().columns.tolist(), y = fuldf.corr().columns.tolist(), colorscale = 'Portland')\nfig.update_layout(title = {'text': 'Correlation Heatmap', 'y' : 0.93, 'x' : 0.5}, title_font_size = 25)\nfig.show()","cbbdfc13":"fig, axes = plt.subplots(nrows=2, ncols=2,constrained_layout=True,figsize=(12,8))\n\nsns.barplot(x='GDP',y='Country',data=fuldf.nlargest(10,'GDP'),ax=axes[0,0],palette=\"Blues_d\")\n\nsns.barplot(x='Family' ,y='Country',data=fuldf.nlargest(10,'Family'),ax=axes[0,1],palette=\"YlGn\")\n\nsns.barplot(x='Life' ,y='Country',data=fuldf.nlargest(10,'Life'),ax=axes[1,0],palette='OrRd')\n\nsns.barplot(x='Freedom' ,y='Country',data=fuldf.nlargest(10,'Freedom'),ax=axes[1,1],palette='YlOrBr')","1687986f":"fig, axes = plt.subplots(nrows=1, ncols=2,constrained_layout=True,figsize=(10,4))\n\nsns.barplot(x='Generosity' ,y='Country',data=fuldf.nlargest(10,'Generosity'),ax=axes[0],palette='Spectral')\nsns.barplot(x='Trust' ,y='Country',data=fuldf.nlargest(10,'Trust'),ax=axes[1],palette='RdYlGn')","20d2888e":"fuldf.tail()","d14e3f42":"fuldf = fuldf.rename(columns = {'Happiness Score': 'Score' })\nfuldf['Trust'].fillna(value=fuldf['Trust'].mean(),inplace=True)\nfuldf['Happiness Change'].fillna(value=fuldf['Happiness Change'].mean(),inplace=True)","69129675":"fulldf=pd.concat(dff)\nfulldf = fulldf.rename(columns = {'Happiness Score': 'Score' })\nfulldf=fulldf[['Country','Score','Region','GDP']]\nfulldf","def44aaf":"fulldf=fulldf.groupby(['Country']).mean().reset_index()\nfulldf","aec491bf":"print('max:',fulldf['Score'].max())\nprint('min:',fulldf['Score'].min())\nabc=fulldf['Score'].max()-fulldf['Score'].min()\nscr=round(abc\/3,3)\nprint('aradaki fark:',(scr))","9c71d57c":"d\u00fcs\u00fck=fulldf['Score'].min()+scr\norta=d\u00fcs\u00fck+scr\n\nprint('d\u00fcs\u00fck scr in \u00fcst s\u0131n\u0131r\u0131',d\u00fcs\u00fck)\nprint('orta scr in \u00fcst s\u0131n\u0131r\u0131',orta)\nprint('y\u00fcksek scr in \u00fcst s\u0131n\u0131r\u0131','max:',fulldf['Score'].max())","f531ea29":"s\u0131ra=[]\nfor i in fulldf.Score:\n    if(i>0 and i<d\u00fcs\u00fck):\n        s\u0131ra.append('D\u00fc\u015f\u00fck')\n        \n        \n    elif(i>d\u00fcs\u00fck and i<orta):\n         s\u0131ra.append('Orta')\n    else:\n         s\u0131ra.append('Y\u00fcksek')\n\nfulldf['Category']=s\u0131ra ","37573a8d":"color = (fulldf.Category == 'Y\u00fcksek' ).map({True: 'background-color: red ',False:'background-color: yellow',True: 'background-color: limegreen'})\nfulldf.reset_index(drop=True).style.apply(lambda s: color)","a2601a1c":"import geopandas\nworld = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))","94efc668":"fulldf = world.merge(fulldf, how=\"left\", left_on=['name'], right_on=['Country'])","ff485e08":"fig, ax = plt.subplots(figsize  = (12, 8))\nax.set_title(\"5 Y\u0131ll\u0131k Ortalama Mutluluk Kategorileri\", fontsize=20)\nfulldf.plot(column='Category',ax=ax,legend=True,cmap='prism')","1eb8c2f7":"df_tr = df_tr = fuldf[\"Country\"]==\"Turkey\"\nfuldf[df_tr]","cc1c2b8a":"df_turkey = fuldf[fuldf[\"Country\"] ==\"Turkey\"]\n\n#fig = px.line(df_turkey,x=\"Year\",y=\"Happiness Rank\",text=\"Happiness Rank\",title=\"Y\u0131llara G\u00f6re T\u00fcrkiye Mutluluk S\u0131ralamas\u0131\")\n#fig.update_traces(texttemplate='%{text:.2f}',textposition='auto')\n#fig.show()\n\nimport plotly.express as px\nfig = px.line(df_turkey, x='Year', y='Happiness Rank', color='Country')\nfig.update_layout(\n    yaxis = dict(autorange=\"reversed\")\n)\nfig.show()","d3dfb974":"df_fitre = (fuldf['Country']==\"Turkey\")| (fuldf['Country']==\"Greece\") | (fuldf[\"Country\"]==\"Armenia\") | (fuldf[\"Country\"]==\"Syria\")\nfuldf[df_fitre]\n","6155f2ad":"countries = [i for i in fuldf[df_fitre][\"Country\"]]\n\nfeatures = [\"GDP\",\"Family\",\"Life\",\"Freedom\",\"Score\"]\n\ncolors = [\"Blue\",\"Cyan\",\"Red\",\"Green\",\"Brown\",\"Pink\"]\n\nfeatures_colors = list(zip(features,colors))\n\ndef barplot_creator(country_list,feature_color_list,fuldf):\n    for f,c in feature_color_list:\n        _,ax = plt.subplots(figsize = (4,4))\n        ax.bar(country_list,fuldf[f],color=c,label=f)\n        plt.legend(loc = \"upper right\")\n        plt.show()\n        \n\nbarplot_creator(countries,features_colors,fuldf[df_fitre])","a8f18c88":"df_hapy = fuldf.pivot_table(index=[\"Country\",\"Year\"],values=\"Score\")\ndf_hapy = df_hapy.unstack()\ndf_hapy = df_hapy.reset_index()\ndf_hapy.columns = [\"Country\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\"]\ndf_hapy  = df_hapy.dropna()\ndf_hapy  = df_hapy.reset_index(drop=True)\nfor i in range(len(df_hapy)):\n    df_hapy.loc[i,\"min\"] = min(df_hapy.loc[i,\"2015\"],df_hapy.loc[i,\"2016\"],df_hapy.loc[i,\"2017\"],df_hapy.loc[i,\"2018\"],df_hapy.loc[i,\"2019\"])\n\nfor i in range(len(df_hapy)):\n    df_hapy.loc[i,\"max\"] = max(df_hapy.loc[i,\"2015\"],df_hapy.loc[i,\"2016\"],df_hapy.loc[i,\"2017\"],df_hapy.loc[i,\"2018\"],df_hapy.loc[i,\"2019\"])\n\nfor i in range(len(df_hapy)):\n    df_hapy.loc[i,\"difference\"] = df_hapy.loc[i,\"max\"]-df_hapy.loc[i,\"min\"]","9c13ecc1":"df_hapy.sort_values(by=\"difference\",ascending=False).head(2)","5ae9e5a8":"df_venezuela = fuldf[fuldf[\"Country\"] ==\"Venezuela\"]\n\nfig = px.bar(df_venezuela,x=\"Year\",y=\"Score\",color=\"Score\",text=\"Score\",title=\"Venezuela'n\u0131n Mutluluk Azalmas\u0131\")\nfig.update_traces(texttemplate='%{text:.2f}',textposition='auto')\nfig.show()","852b14db":"df_Benin = fuldf[fuldf[\"Country\"]==\"Benin\"]\nfig = px.bar(df_Benin,x=\"Year\",y=\"Score\",color=\"Score\",text=\"Score\",title=\"Benin'in mutluluk art\u0131\u015f\u0131\")\nfig.update_traces(texttemplate='%{text:.2f}',textposition='auto')\nfig.show()","65f9fcce":"X = fuldf.drop(['Score', 'Happiness Rank', 'Country','Region'],axis=1)\ny = fuldf['Score']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=0)\n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","41a47aa7":"from sklearn import linear_model\nlm = linear_model.LinearRegression()\nlm.fit(X_train,y_train)\ny_pred = lm.predict(X_test)\n\nsonuc_lm = pd.DataFrame({\n    'Actual':y_test,\n    'Predict':y_pred\n})\nsonuc_lm['Diff'] = y_test - y_pred\nsonuc_lm.head()","3b28c092":"from sklearn import metrics\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\nprint(f\"R^2 of train set{lm.score(X_train, y_train)}\")\nprint(f\"R^2 of test set{lm.score(X_test, y_test)}\")\nsns.regplot(x='Actual',y='Predict',data=sonuc_lm)","5db1b17f":"from sklearn.model_selection import cross_val_score\nprint(cross_val_score(lm,X,y,cv=5))","8e352c9c":"scores = cross_val_score(lm,X_train,y_train,scoring='neg_mean_absolute_error',cv=10)\nprint(\"MAE(mean):%\",scores.mean())","2f8efa66":"from sklearn import ensemble\nrf = ensemble.RandomForestRegressor()\nrf.fit(X_train,y_train)\ny_pred = rf.predict(X_test)\n\nsonuc_rf = pd.DataFrame({\n    'Actual':y_test,\n    'Predict':y_pred\n})\nsonuc_rf['Diff'] = y_test - y_pred\nsonuc_rf.head()","3daad76b":"print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\nprint(f\"R^2 of train set{rf.score(X_train, y_train)}\")\nprint(f\"R^2 of test set{rf.score(X_test, y_test)}\")\n\nsns.regplot(x='Actual',y='Predict',data=sonuc_rf)","b66f27e9":"print(cross_val_score(rf,X,y,cv=5))","faa7d68c":"scores_1 = cross_val_score(rf,X_train,y_train,scoring='neg_mean_absolute_error',cv=10)\nprint(\"MAE(mean):%\",scores_1.mean())","3ead1314":"import shap\nregressor = ensemble.RandomForestRegressor()\nregressor.fit(X_train, y_train);","ba9869df":"\nexplainer = shap.TreeExplainer(regressor)\n\nshap_values = explainer.shap_values(X_train)","9fe8daf8":"features_1 = X.columns","08cbf9f2":"shap.summary_plot(shap_values, X_train, feature_names=X.columns)","7146f96d":"shap.decision_plot(explainer.expected_value[0], shap_values[0], feature_names = list(features_1))","eeeb8e7f":"i = 18\nshap.force_plot(explainer.expected_value, shap_values[i], X_test[i], feature_names = features_1,matplotlib=True)","507f97b2":"shap.summary_plot(shap_values,X, plot_type=\"bar\")","175ef669":"Explainer = shap.TreeExplainer(rf)","16a0d492":"from sklearn.cluster import KMeans\nfrom sklearn import metrics \nfrom scipy.spatial.distance import cdist","686c52ce":"import sklearn\nimport shap\n\nshap.initjs()","ede6cf22":"shap_interaction_values = shap.TreeExplainer(rf).shap_interaction_values(X.iloc[:2000,:])","89cfb053":"shap.summary_plot(shap_interaction_values, X.iloc[:2000,:])","0375f939":"explainer1 = shap.TreeExplainer(rf)\nshap_values1 = explainer1.shap_values(X)","ff4f9241":"shap.force_plot(explainer1.expected_value, shap_values1[:1000,:], X.iloc[:1000,:])","d7b0696a":"distortions = []\nK = range(1, 10)\n \nfor k in K:\n  \n    kmeanModel = KMeans(n_clusters=k).fit(X)\n    kmeanModel.fit(X)\n \n    distortions.append(sum(np.min(cdist(X, kmeanModel.cluster_centers_,\n                                        'euclidean'), axis=1)) \/ X.shape[0])","fa514907":"plt.plot(K, distortions, 'bx-')\nplt.xlabel('Values of K')\nplt.ylabel('Distortion')\nplt.title('The Elbow Method using Distortion')\nplt.show()","b5fde952":"labels = KMeans(2, random_state=0).fit_predict(X)\nfuldf['labels'] = labels\ntsne_data  = fuldf.drop(['Country', 'Region', 'Happiness Rank', 'Year', 'Happiness Change'],axis=1)\ntsne_data[\"labels\"] = tsne_data[\"labels\"].astype(str)","3e372e3d":"from sklearn.manifold import TSNE\n\ntsne = TSNE(n_components=3, random_state=0)\nprojections = tsne.fit_transform(tsne_data)\n\nfig = px.scatter_3d(\n    projections, x=0, y=1, z=2,\n    color=tsne_data.labels, labels={'color': 'labels'}\n)\nfig.update_traces(marker_size=8)\nfig.show()","cae20397":"from sklearn.cluster import KMeans\n\nwcss=[]\nfor i in range(1,15):\n    km=KMeans(n_clusters=i)\n    km.fit(X)\n    wcss.append(km.inertia_)\n\nplt.plot(range(1,15),wcss,\"-o\")\nplt.grid(True)\nplt.xlabel(\"k values\")\nplt.ylabel(\"wcss values\")\nplt.show()","a01bab27":"X_1  = fuldf.drop(['Score', 'Happiness Rank', 'Country', 'Region','Trust','Freedom','Family','Generosity','Happiness Change','Year','labels'],axis=1)","47ce4661":"df_2=fuldf.copy()\nkm2=KMeans(n_clusters=2)\nclusters=km2.fit_predict(X_1)\ndf_2[\"clusters\"]=clusters\n\n\n\n\ndf_1=fuldf.copy()\nkm1=KMeans(n_clusters=3)\nclusters=km1.fit_predict(X_1)\ndf_1[\"clusters\"]=clusters","f00597cd":"plt.subplot(1,2,1)\nplt.scatter(df_2[\"GDP\"][df_2.clusters==0],\n            df_2[\"Life\"][df_2.clusters==0],color=\"b\")\n\nplt.scatter(df_2[\"GDP\"][df_2.clusters==1],\n            df_2[\"Life\"][df_2.clusters==1],color=\"r\")\nplt.xlabel(\"K=2 chart\")\n\nplt.subplot(1,2,2)\nplt.scatter(fuldf[\"GDP\"][fuldf.Region==\"Western Europe\"],\n            fuldf[\"Life\"][fuldf.Region==\"Western Europe\"],color=\"r\")\n\nplt.scatter(fuldf[\"GDP\"][fuldf.Region==\"Latin America and Caribbean\"],\n            fuldf[\"Life\"][fuldf.Region==\"Latin America and Caribbean\"],color=\"b\")\n\nplt.scatter(fuldf[\"GDP\"][fuldf.Region==\"Sub-Saharan Africa\"],\n            fuldf[\"Life\"][fuldf.Region==\"Sub-Saharan Africa\"],color=\"g\")\nplt.xlabel(\"Real chart\")\nplt.show()\n\n\n\n\nplt.subplot(1,2,1)\nplt.scatter(df_2[\"GDP\"][df_2.clusters==0],\n            df_2[\"Life\"][df_2.clusters==0],color=\"b\")\n\nplt.scatter(df_1[\"GDP\"][df_1.clusters==1],\n            df_1[\"Life\"][df_1.clusters==1],color=\"g\")\n\nplt.scatter(df_1[\"GDP\"][df_1.clusters==2],\n            df_1[\"Life\"][df_1.clusters==2],color=\"r\")\nplt.xlabel(\"K=3 chart\")\n\nplt.subplot(1,2,2)\nplt.scatter(fuldf[\"GDP\"][fuldf.Region==\"Western Europe\"],\n            fuldf[\"Life\"][fuldf.Region==\"Western Europe\"],color=\"r\")\n\nplt.scatter(fuldf[\"GDP\"][fuldf.Region==\"Latin America and Caribbean\"],\n            fuldf[\"Life\"][fuldf.Region==\"Latin America and Caribbean\"],color=\"b\")\n\nplt.scatter(fuldf[\"GDP\"][fuldf.Region==\"Sub-Saharan Africa\"],\n            fuldf[\"Life\"][fuldf.Region==\"Sub-Saharan Africa\"],color=\"g\")\nplt.xlabel(\"Real chart\")\nplt.show()","3679085f":"Data i\u00e7erinde bulunan \u00f6znitelikleri kategorik olarak s\u0131ralamak ve ayr\u0131m yapmak.","83795d02":"# Data Visualisation","f9252e15":"# Data Cleaning","91523757":"# Features Explanation\n* Country : \u00dclke ad\u0131\n* Region  : \u00dclkenin bulundu\u011fu b\u00f6lge\n* Happiness Rank : Mutluluk puan\u0131na g\u00f6re \u00fclkenin s\u0131ralamas\u0131\n* Happiness Score: Mutluluk puan\u0131\n* Economy (GDP per Capita) :  Ki\u015fi ba\u015f\u0131na d\u00fc\u015fen GSY\u0130H'in mutluluk puan\u0131na katk\u0131 oran\u0131\n* Family : Ailenin mutluluk puan\u0131na katk\u0131 oran\u0131\n* Health (Life Expectancy) : Sa\u011fl\u0131\u011f\u0131n  mutluluk puan\u0131na katk\u0131 oran\u0131\n* Freedom : \u00d6z\u011f\u00fcrl\u00fc\u011f\u00fcn mutluluk puan\u0131na katk\u0131 oran\u0131\n* Trust : Yolsuzluk alg\u0131s\u0131n\u0131n mutluluk puan\u0131na katk\u0131 oran\u0131\n* Generosity  : C\u00f6mertli\u011fin mutluluk puan\u0131na katk\u0131 oran\u0131","5559e1d5":"# Machine Learning","172dc59b":"# Data Exploration","2f0e424c":"# Linear Model","0f535eae":"# MODEL EXPLAINABILITY","a8b1ba11":"# Random Forest Regressor"}}