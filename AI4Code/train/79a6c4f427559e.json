{"cell_type":{"0ea63055":"code","78cb54cd":"code","5481e394":"code","c9cbb4c6":"code","48b9da76":"code","1c0aac59":"code","e419487c":"code","0cf5263a":"code","17330c0b":"code","e34b90b9":"code","d8bd9490":"code","10dba231":"code","06b68b93":"code","235d5c6b":"code","5d188241":"code","e93abdf3":"code","9ae1eca4":"code","d2b0cf41":"code","fd35120c":"code","639b37dc":"code","8e8f1ebc":"code","a47ce9a5":"code","acd2acff":"code","6e01a869":"code","4aa9a3b2":"code","1a47fc56":"code","8bf6ea5f":"code","0bc4ee5d":"code","6e2639a5":"code","dfd2ca70":"code","d235b51d":"code","27e61540":"code","30a4dcc9":"markdown","cf28144c":"markdown","dbab1553":"markdown","e508217c":"markdown","e81dfaa2":"markdown","9067e78f":"markdown","d614d9f5":"markdown","adf3b115":"markdown"},"source":{"0ea63055":"# Import Libraries\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt\nfrom fbprophet import Prophet\n# Statsmodels widely known for forecasting than Prophet\nimport statsmodels.api as sm\nfrom scipy import stats\nfrom pandas.core import datetools\nfrom plotly import tools\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\nimport plotly.tools as tls\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# plt.style.available\nplt.style.use(\"seaborn-whitegrid\")","78cb54cd":"df = pd.read_csv('..\/input\/all_stocks_5yr.csv')\ndf.head()","5481e394":"# Brief Description of our dataset\ndf.describe()","c9cbb4c6":"# Replace the column name from name to ticks\ndf = df.rename(columns={'Name': 'Ticks'})","48b9da76":"# Let's analyze some of the stocks.\namzn = df.loc[df['Ticks'] == 'AMZN']\namzn.head()","1c0aac59":"amzn.info() # Check whether the date is as object type or date type","e419487c":"#  Change to dateformat\namzn.head()","0cf5263a":"# Create a copy to avoid the SettingWarning .loc issue \namzn_df = amzn.copy()\n# Change to datetime datatype.\namzn_df.loc[:, 'date'] = pd.to_datetime(amzn.loc[:,'date'], format=\"%Y\/%m\/%d\")","17330c0b":"amzn_df.info()","e34b90b9":"# Simple plotting of Amazon Stock Price\n# First Subplot\nf, (ax1, ax2) = plt.subplots(1, 2, figsize=(14,5))\nax1.plot(amzn_df[\"date\"], amzn_df[\"close\"])\nax1.set_xlabel(\"Date\", fontsize=12)\nax1.set_ylabel(\"Stock Price\")\nax1.set_title(\"Amazon Close Price History\")\n\n# Second Subplot\nax1.plot(amzn_df[\"date\"], amzn_df[\"high\"], color=\"green\")\nax1.set_xlabel(\"Date\", fontsize=12)\nax1.set_ylabel(\"Stock Price\")\nax1.set_title(\"Amazon High Price History\")\n\n# Third Subplot\nax1.plot(amzn_df[\"date\"], amzn_df[\"low\"], color=\"red\")\nax1.set_xlabel(\"Date\", fontsize=12)\nax1.set_ylabel(\"Stock Price\")\nax1.set_title(\"Amazon Low Price History\")\n\n# Fourth Subplot\nax2.plot(amzn_df[\"date\"], amzn_df[\"volume\"], color=\"orange\")\nax2.set_xlabel(\"Date\", fontsize=12)\nax2.set_ylabel(\"Stock Price\")\nax2.set_title(\"Amazon's Volume History\")\nplt.show()","d8bd9490":"m = Prophet()\n\n# Drop the columns\nph_df = amzn_df.drop(['open', 'high', 'low','volume', 'Ticks'], axis=1)\nph_df.rename(columns={'close': 'y', 'date': 'ds'}, inplace=True)\n\nph_df.head()","10dba231":"m = Prophet()\n\nm.fit(ph_df)","06b68b93":"# Create Future dates\nfuture_prices = m.make_future_dataframe(periods=365)\n\n# Predict Prices\nforecast = m.predict(future_prices)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","235d5c6b":"import matplotlib.dates as mdates\n\n# Dates\nstarting_date = dt.datetime(2018, 4, 7)\nstarting_date1 = mdates.date2num(starting_date)\ntrend_date = dt.datetime(2018, 6, 7)\ntrend_date1 = mdates.date2num(trend_date)\n\npointing_arrow = dt.datetime(2018, 2, 18)\npointing_arrow1 = mdates.date2num(pointing_arrow)\n\n# Learn more Prophet tomorrow and plot the forecast for amazon.\nfig = m.plot(forecast)\nax1 = fig.add_subplot(111)\nax1.set_title(\"Amazon Stock Price Forecast\", fontsize=16)\nax1.set_xlabel(\"Date\", fontsize=12)\nax1.set_ylabel(\"Close Price\", fontsize=12)\n\n# Forecast initialization arrow\nax1.annotate('Forecast \\n Initialization', xy=(pointing_arrow1, 1350), xytext=(starting_date1,1700),\n            arrowprops=dict(facecolor='#ff7f50', shrink=0.1),\n            )\n\n# Trend emphasis arrow\nax1.annotate('Upward Trend', xy=(trend_date1, 1225), xytext=(trend_date1,950),\n            arrowprops=dict(facecolor='#6cff6c', shrink=0.1),\n            )\n\nax1.axhline(y=1260, color='b', linestyle='-')\n\nplt.show()","5d188241":"fig2 = m.plot_components(forecast)\nplt.show()","e93abdf3":"# Monthly Data Predictions\nm = Prophet(changepoint_prior_scale=0.01).fit(ph_df)\nfuture = m.make_future_dataframe(periods=12, freq='M')\nfcst = m.predict(future)\nfig = m.plot(fcst)\nplt.title(\"Monthly Prediction \\n 1 year time frame\")\n\nplt.show()","9ae1eca4":"fig = m.plot_components(fcst)\nplt.show()","d2b0cf41":"trace = go.Ohlc(x=amzn_df['date'],\n                open=amzn_df['open'],\n                high=amzn_df['high'],\n                low=amzn_df['low'],\n                close=amzn_df['close'],\n               increasing=dict(line=dict(color= '#58FA58')),\n                decreasing=dict(line=dict(color= '#FA5858')))\n\nlayout = {\n    'title': 'Amazon Historical Price',\n    'xaxis': {'title': 'Date',\n             'rangeslider': {'visible': False}},\n    'yaxis': {'title': 'Stock Price (USD$)'},\n    'shapes': [{\n        'x0': '2016-12-09', 'x1': '2016-12-09',\n        'y0': 0, 'y1': 1, 'xref': 'x', 'yref': 'paper',\n        'line': {'color': 'rgb(30,30,30)', 'width': 1}\n    }],\n    'annotations': [{\n        'x': '2017-01-20', 'y': 0.05, 'xref': 'x', 'yref': 'paper',\n        'showarrow': False, 'xanchor': 'left',\n        'text': 'President Donald Trump <br> takes Office'\n    }]\n}\n\ndata = [trace]\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='simple_ohlc')","fd35120c":"last_two = amzn_df.loc[amzn_df['date'].dt.year > 2016]\n\ng = last_two.groupby([\"date\"])\nmonthly_averages = g.aggregate({\"open\": np.mean, \"high\": np.mean, \"low\": np.mean, \"close\":np.mean})\nmonthly_averages.reset_index(level=0, inplace=True)\n\ntrace = go.Candlestick(x=monthly_averages['date'],\n                       open=monthly_averages['open'].values.tolist(),\n                       high=monthly_averages['high'].values.tolist(),\n                       low=monthly_averages['low'].values.tolist(),\n                       close=monthly_averages['close'].values.tolist(),\n                      increasing=dict(line=dict(color= '#58FA58')),\n                decreasing=dict(line=dict(color= '#FA5858')))\n\nlayout = {\n    'title': 'Amazon Historical Price <br> <i>For the Last two years <\/i>',\n    'xaxis': {'title': 'Date',\n             'rangeslider': {'visible': False}},\n    'yaxis': {'title': 'Stock Price (USD$)'},\n    'shapes': [{\n        'x0': '2018-01-02', 'x1': '2018-01-02',\n        'y0': 0, 'y1': 1, 'xref': 'x', 'yref': 'paper',\n        'line': {'color': 'rgb(30,30,30)', 'width': 1}\n    }],\n    'annotations': [{\n        'x': '2018-01-07', 'y': 0.9, 'xref': 'x', 'yref': 'paper',\n        'showarrow': True, 'xanchor': 'left',\n        'text': 'Upward Trend'\n    }]\n}\n\n\ndata = [trace]\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='simple_ohlc')","639b37dc":"amzn_df['month_year'] = pd.to_datetime(amzn_df['date']).dt.to_period('M')\n\n# 2017 onwards\nlast_year = amzn_df.loc[amzn_df['date'].dt.year > 2017]\ng = last_year.groupby([\"date\"])\nmonthly_averages = g.aggregate({\"open\": np.mean, \"high\": np.mean, \"low\": np.mean, \"close\":np.mean})\nmonthly_averages.reset_index(level=0, inplace=True)\n\nmonthly_averages.dtypes\n\n\ntrace = go.Candlestick(x=monthly_averages['date'],\n                       open=monthly_averages['open'].values.tolist(),\n                       high=monthly_averages['high'].values.tolist(),\n                       low=monthly_averages['low'].values.tolist(),\n                       close=monthly_averages['close'].values.tolist(),\n                      increasing=dict(line=dict(color= '#58FA58')),\n                decreasing=dict(line=dict(color= '#FA5858')))\n\n\nlayout = {\n    'title': 'Amazon Historical Price <br> <i>A closer look to the upward trend <\/i>',\n    'xaxis': {'title': 'Date',\n             'rangeslider': {'visible': False}},\n    'yaxis': {'title': 'Stock Price (USD$)'}\n}\n\n\ndata = [trace]\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='simple_ohlc')","8e8f1ebc":"amzn_df.head()","a47ce9a5":"# Moving Averages (10, 50 and 200)\namzn_df['10_d_avg'] = amzn_df.close.rolling(window=10).mean()\namzn_df['50_d_avg'] = amzn_df.close.rolling(window=50).mean()\namzn_df['200_d_avg'] = amzn_df.close.rolling(window=200).mean()\nclose_p = amzn_df['close'].values.tolist()\n\n\n# Variables to insert into plotly\nten_d = amzn_df['10_d_avg'].values.tolist()\nfifty_d = amzn_df['50_d_avg'].values.tolist()\ntwoh_d = amzn_df['200_d_avg'].values.tolist()\ndate = amzn_df['date'].values.tolist()\n\n# Set date as index\namzn_df = amzn_df.set_index('date')","acd2acff":"fig = tls.make_subplots(rows=2, cols=1, shared_xaxes=True)\n\ncolors = ['#ff4500', '#92a1cf', '#6E6E6E']\navgs = ['10_d_avg', '50_d_avg', '200_d_avg']\n# for i,c in zip(range(n),color):\n#    ax1.plot(x, y,c=c)\n\nfor col, c in zip(avgs, colors):\n    fig.append_trace({'x': amzn_df.index, 'y': amzn_df[col], 'type': 'scatter', 'name': col, 'line': {'color': c}}, 1, 1)\nfor col in ['close']:\n    fig.append_trace({'x': amzn_df.index, 'y': amzn_df[col], 'type': 'scatter', 'name': 'Closing Price', 'line':{'color': '#01DF3A'}}, 2, 1)\n    \nfig['layout'].update(height=800,title='Relationship between MAs <br> and Closing Price',\n                    paper_bgcolor='#F2DFCE', plot_bgcolor='#F2DFCE')\n    \niplot(fig, filename='pandas\/mixed-type subplots')","6e01a869":"# Take off the date index\namzn_df = amzn_df.reset_index()\n\n# Plotly\ntrace0 = go.Scatter(\n    x = amzn_df['date'],\n    y = ten_d,\n    name = '10-day MA',\n    line = dict(\n        color = ('#ff6347'),\n        width = 4)\n)\ntrace1 = go.Scatter(\n    x = amzn_df['date'],\n    y = fifty_d,\n    name = '50-day MA',\n    line = dict(\n        color = ('#92a1cf'),\n        width = 4,\n    dash=\"dot\")\n)\ntrace2 = go.Scatter(\n    x = amzn_df['date'],\n    y = twoh_d,\n    name = '200-day MA',\n    line = dict(\n        color = ('#2EF688'),\n        width = 4,\n        dash = 'dash') # dash options include 'dash', 'dot', and 'dashdot'\n)\n\ndata = [trace0, trace1, trace2]\n\n\n# Edit the layout\nlayout = dict(title = 'Moving Averages for Amazon',\n              xaxis = dict(title = 'Date'),\n              yaxis = dict(title = 'Price'),\n              annotations=[\n        dict(\n            x='2016-01-13',\n            y=657,\n            xref='x',\n            yref='y',\n            text='<i> First major decline <br> after 10-d crosses <br> 50-d moving average <\/i>',\n            showarrow=True,\n            arrowhead=5,\n            ax=5,\n            ay=-50\n        ), dict(\n        x = \"2016-02-24\",\n        y = 535,\n        text = \"<i>Upward trend after <br> 10-day crosses <br>200-day moving average <\/i>\",\n        textangle = 0,\n        ax = 50,\n        ay = 50,\n        font = dict(\n          color = \"black\",\n          size = 12\n        )\n        )],\n              paper_bgcolor='#FFF9F5',\n              plot_bgcolor='#FFF9F5'\n              )\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename='styled-line')","4aa9a3b2":"# American Airlines\naal_df = df.loc[df[\"Ticks\"] == \"AAL\"]\n\naal_df.loc[:, 'date'] = pd.to_datetime(aal_df.loc[:,'date'], format=\"%Y\/%m\/%d\")\n\naal_df.info()","1a47fc56":"f, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(18,5))\n\naal_df[\"close_log\"] = np.log(aal_df[\"close\"])\naal_df[\"high_log\"] = np.log(aal_df[\"high\"])\naal_df[\"low_log\"] = np.log(aal_df[\"low\"])\n\nax1.plot(aal_df[\"date\"], aal_df[\"close_log\"])\nax1.set_title(\"Normalized Close Price\")\nax2.plot(aal_df[\"date\"], aal_df[\"high_log\"], color=\"g\")\nax2.set_title(\"Normalized High Price\")\nax3.plot(aal_df[\"date\"], aal_df[\"low_log\"], color=\"r\")\nax3.set_title(\"Normalized Low Price\")\nplt.show()","8bf6ea5f":"aal_df['std_close'] = aal_df[\"close\"].rolling(5).std()\naal_df['mean_close'] = aal_df[\"close\"].rolling(5).mean()\naal_df['twenty_mean_close'] = aal_df[\"close\"].rolling(20).mean()\n\nf, (std_ax, avg_ax) = plt.subplots(1, 2, figsize=(18,5))\n\nstd_ax.plot(aal_df[\"date\"], aal_df[\"std_close\"], color=\"r\", label=\"Standard Deviation\")\nstd_ax.legend(loc=\"upper left\")\nstd_ax.set_title(\"Standard Deviation American Airlines \\n (AAL)\")\n\navg_ax.plot(aal_df[\"date\"], aal_df[\"mean_close\"], color=\"g\", label=\"5-day MA\")\navg_ax.plot(aal_df[\"date\"], aal_df[\"twenty_mean_close\"], color=\"k\", label=\"20-day MA\")\navg_ax.legend(loc=\"upper left\")\navg_ax.set_title(\"5 Day Average AAL \\n Closing Price\")\nplt.show()","0bc4ee5d":"m = Prophet()\n\n# Drop the columns\nph_df = aal_df.drop(['open', 'high', 'low','volume', 'Ticks', 'close_log', 'high_log', 'mean_close', 'twenty_mean_close', 'low_log', 'std_close'], axis=1)\nph_df.rename(columns={'close': 'y', 'date': 'ds'}, inplace=True)\n\nph_df.head()\n\n","6e2639a5":"m.fit(ph_df)\n\nfuture_prices = m.make_future_dataframe(periods=365)\n\n# Predict Prices\nforecast = m.predict(future_prices)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","dfd2ca70":"# Dates\nstarting_date = dt.datetime(2018, 4, 7)\nstarting_date1 = mdates.date2num(starting_date)\ntrend_date = dt.datetime(2018, 2, 7)\ntrend_date1 = mdates.date2num(trend_date)\n\npointing_arrow = dt.datetime(2018, 2, 18)\npointing_arrow1 = mdates.date2num(pointing_arrow)\n\n# Dates Forecasting Resistance Line\nresistance_date = dt.datetime(2016, 4, 7)\nresistance_date1 = mdates.date2num(resistance_date)\n\n# Dates Forecasting Support Line\nsupport_date = dt.datetime(2013, 4, 7)\nsupport_date1 = mdates.date2num(support_date)\n\n# Learn more Prophet tomorrow and plot the forecast for amazon.\nfig = m.plot(forecast)\nax1 = fig.add_subplot(111)\nax1.set_title(\"American Airlines Stock Price Forecast\", fontsize=16)\nax1.set_xlabel(\"Date\", fontsize=12)\nax1.set_ylabel(\"Close Price\", fontsize=12)\n\n# Forecast initialization arrow\nax1.annotate('Forecast \\n Initialization', xy=(pointing_arrow1, 55), xytext=(starting_date1,40),\n            arrowprops=dict(facecolor='#ff7f50', shrink=0.1),\n            )\n\n# # Trend emphasis arrow\nax1.annotate('Last Closing Price \\n Before Forecast \\n ($51.40)', xy=(trend_date1, 57), xytext=(trend_date1,70),\n            arrowprops=dict(facecolor='#6cff6c', shrink=0.1),\n            )\n\n# Resistance Line\nax1.annotate('Resistance Line \\n of Forecast Peak ${:.2f}'.format(forecast[\"yhat\"].max()), xy=(resistance_date1, 65), xytext=(resistance_date1,73),\n            arrowprops=dict(facecolor='#FF0000', shrink=0.1),\n            )\n\n# Support Line\nax1.annotate('Support Line \\n of Forecast Bottom \\n $51.40', xy=(support_date1, 53), xytext=(support_date1,40),\n            arrowprops=dict(facecolor='#00FF40', shrink=0.1),\n            )\n\nax1.axhline(y=65, color='r', linestyle='--')\nax1.axhline(y=54.2, color='g', linestyle='--')\n\nplt.show()","d235b51d":"fig2 = m.plot_components(forecast)\nplt.show()","27e61540":"# Change dates from daily frequency to monthly frequency\nforecast_monthly = forecast.resample('M', on='ds').mean()\nforecast_monthly = forecast_monthly.reset_index() \n\n\n# Extract Year and Month and put it in a column.\nforecast_monthly[\"month_int\"] = forecast_monthly['ds'].dt.month\nforecast_monthly[\"year\"] = forecast_monthly['ds'].dt.year\n\nforecast_monthly[\"month\"] = np.nan\nlst = [forecast_monthly]\n\n\nfor column in lst:\n    column.loc[column[\"month_int\"] == 1, \"month\"] = \"January\"\n    column.loc[column[\"month_int\"] == 2, \"month\"] = \"February\"\n    column.loc[column[\"month_int\"] == 3, \"month\"] = \"March\"\n    column.loc[column[\"month_int\"] == 4, \"month\"] = \"April\"\n    column.loc[column[\"month_int\"] == 5, \"month\"] = \"May\"\n    column.loc[column[\"month_int\"] == 6, \"month\"] = \"June\"\n    column.loc[column[\"month_int\"] == 7, \"month\"] = \"July\"\n    column.loc[column[\"month_int\"] == 8, \"month\"] = \"August\"\n    column.loc[column[\"month_int\"] == 9, \"month\"] = \"September\"\n    column.loc[column[\"month_int\"] == 10, \"month\"] = \"October\"\n    column.loc[column[\"month_int\"] == 11, \"month\"] = \"November\"\n    column.loc[column[\"month_int\"] == 12, \"month\"] = \"December\"\n    \n    \nforecast_monthly['season'] = np.nan\nlst2 = [forecast_monthly]\n\nfor column in lst2:\n    column.loc[(column['month_int'] > 2) & (column['month_int'] <= 5), 'Season'] = 'Spring'\n    column.loc[(column['month_int'] > 5) & (column['month_int'] <= 8), 'Season'] = 'Summer'\n    column.loc[(column['month_int'] > 8) & (column['month_int'] <= 11), 'Season'] = 'Autumn'\n    column.loc[column['month_int'] <= 2, 'Season'] = 'Winter'\n    column.loc[column['month_int'] == 12, 'Season'] = 'Winter'\n    \n    \n\n    \n\n# Let's Create Seasonality Columns (Barplots that descripe the average trend per Season for each year)\n# Create different axes by Year\ndf_2013 = forecast_monthly.loc[(forecast_monthly[\"year\"] == 2013)]\ndf_2014 = forecast_monthly.loc[(forecast_monthly[\"year\"] == 2014)]\ndf_2015 = forecast_monthly.loc[(forecast_monthly[\"year\"] == 2015)]\ndf_2016 = forecast_monthly.loc[(forecast_monthly[\"year\"] == 2016)]\ndf_2017 = forecast_monthly.loc[(forecast_monthly[\"year\"] == 2017)]\ndf_2018 = forecast_monthly.loc[(forecast_monthly[\"year\"] == 2018)]\n\n\nf, ((ax1, ax2, ax3), (ax4, ax5, ax6)) = plt.subplots(2, 3, figsize=(16,12))\n\n\n# Year 2013\nsns.pointplot(x=\"Season\", y=\"trend\",\n                    data=df_2013, ax=ax1, color=\"g\")\n\n# Year 2014\nsns.pointplot(x=\"Season\", y=\"trend\",\n                    data=df_2014, ax=ax2, color=\"r\")\n\n# Year 2015\nsns.pointplot(x=\"Season\", y=\"trend\",\n                    data=df_2015, ax=ax3, color=\"r\")\n\n\n# Year 2016\nsns.pointplot(x=\"Season\", y=\"trend\",\n                    data=df_2016, ax=ax4, color=\"g\")\n\n# Year 2017\nsns.pointplot(x=\"Season\", y=\"trend\",\n                    data=df_2017, ax=ax5, color=\"g\")\n\n# Year 2018\nsns.pointplot(x=\"Season\", y=\"trend\",\n                    data=df_2018, ax=ax6, color=\"g\")\n\nax1.set_title(\"Year 2013\")\nax2.set_title(\"Year 2014\")\nax3.set_title(\"Year 2015\")\nax4.set_title(\"Year 2016\")\nax5.set_title(\"Year 2017\")\nax6.set_title(\"Year 2018\")\n\n# Oil dips\n# September 2014 and June 2015\nax2.annotate('First Major \\n Oil Price \\n Decline \\n(Starts Here)', xy=(3, 44), xytext=(2.8,38.5),\n            arrowprops=dict(facecolor='#81F781', shrink=0.1),\n            )\n\n\nax3.annotate('Second \\n Major \\n Oil Price \\n Decline \\n(Starts Here)', xy=(1, 46.8), xytext=(1,44),\n            arrowprops=dict(facecolor='#81F781', shrink=0.1),\n            )\n\nplt.show()","30a4dcc9":"# Time Series Forecast with Prophet\n\n## Introduction:\nThis is a simple kernel in which we will forecast stock prices using Prophet (Facebook's library for time series forecasting). However, historical prices are no indication whether a price will go up or down.  I'll rather use my own variables and use machine learning for stock price prediction rather than just using historical prices as an indication of stock price increase.\n\n\n## A Summary about Prophet:\nFacebook's research team has come up with an easier implementation of forecasting through it's new library called Prophet. From what I have read, the blog state's that analyst that can produce high quality forecasting data is rarely seen. This is one of the reasons why Facebook's research team came to an easily approachable way for using advanced concepts for time series forecasting and us Python users, can easily relate to this library since it uses Scikit-Learn's api (Similar to Scikit-Learn). To gain further information, you can look at  [Prophet Blog](https:\/\/research.fb.com\/prophet-forecasting-at-scale\/). Prophet's team main goal is to <b>to make it easier for experts and non-experts to make high quality forecasts that keep up with demand. <\/b> <br><br>\n\nThere are several characteristics of Prophet (you can see it in the blog) that I want to share with you Kaggles that shows where Prophet works best:\n<ul>\n<li>hourly, daily, or weekly observations with at least a few months (preferably a year) of history <\/li>\n<li>strong multiple \u201chuman-scale\u201d seasonalities: day of week and time of year <\/li>\n<li>Important holidays that occur at irregular intervals that are known in advance (e.g. the Super Bowl) <\/li>\n<li>A reasonable number of missing observations or large outliers <\/li>\n<li>Historical trend changes, for instance due to product launches or logging changes <\/li>\n<li>Trends that are non-linear growth curves, where a trend hits a natural limit or saturates <\/li>\n<\/ul>\n<br><br>\n\n### How does Prophet Work?\n---> In the process of Update.....\n","cf28144c":"We need to make sure if the date column is either a categorical type or a datetype. In our case date is a categorical datatype so we need to change it to datetime.","dbab1553":"<h2>Technical Analysis: <\/h2>\nIn this section we will go into basic technical concepts when dealing with stock investing. This are simple theories however, we shouldn't solely rely on these concepts to maximize profits as it is the case with patterns related to moving averages. Before going into this concepts, I will like to show how OHLC and Candlesticks are interpreted.\n\n<h3 align=\"center\">Open High Low Close (OHLC): <\/h3>\n<img src=\"https:\/\/image.slidesharecdn.com\/forexcandlestick-151105160826-lva1-app6892\/95\/forex-candlestick-5-638.jpg?cb=1446739926\" ><\/img>\n<br><br>\n<h3 align=\"center\">CandleSticks: <\/h3>\n<img src=\"http:\/\/wealthv.com\/learn\/actionforex\/images\/candlestick_charts_explained_1.gif\" ><\/img>\n<br><br>\n<h3 align=\"center\">Moving Averages: <\/h3>\n<img src=\"https:\/\/commodity.com\/wp-content\/uploads\/technical-analysis\/MASimple50200SPY.gif\" ><\/img>","e508217c":"For this simple tutorial we will analyze Amazon's stock and see what will the trend look like for the nearby future of this stock relying on past stock prices.","e81dfaa2":"### Prophet Introduction:\nProphet is Facebook's library for time series forecasting. In my opinion, Prophet works best with datasets that are higely influenced by seasonality (electricity bills, restaurant visitors etc.) However, I wanted to show the simplicity of using Prophet for simple forecasting which is the main aim of this kernel.\n\n#### Steps for using Prophet:\n<ul>\n<li>Make sure you replace closing price for y and date for ds. <\/li>\n<li>Fit that dataframe to Prophet in order to detect future patterns. <\/li>\n<li>Predict the upper and lower prices of the closing price. <\/li>\n<\/ul>","9067e78f":"#### Trends:\n<ul> \n<li>Amazon's stock price is showing signs of upper trend yearly. <\/li>\n<li> Amazon's stock price show upper trend signs during January (December Sales tend to give a boost to Amazon's stock price)<\/li>\n<li>There is no weekly trend for stock prices. <\/li>\n<\/ul>","d614d9f5":"<h3>References: <\/h3>\n<a src=\"https:\/\/www.kaggle.com\/thebrownviking20\/everything-you-can-do-with-a-time-series\"> Everything you can do with a time series <\/a> by Siddharth Yadav \n- A special thanks to Siddharth for publishing an amazing work in the Kaggle community. Definitely, will recommend his work for anyone interested in Time Series Forecasting.","adf3b115":"<h2> Stocks more Susceptible to Seasonality Trends: <\/h2>\nIn this section I want to show some types of stocks that are more vulnerable to seasonality such as airlines, hotel chains or cruiseships. In this example I will use American Airlines to demonstrate how a certain extent of the stock is influenced by seasonality movements.\n\n<h3>Summary: <\/h3>\n<ul>\n    <li>December and January tends to be the months were there are more upward trends for the stock. <\/li>\n    <li>July as well but not as much as December and January. <\/li>\n    <li>September tends to be the month with the most downward pressure. <\/li>\n    <\/ul>\n"}}