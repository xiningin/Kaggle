{"cell_type":{"63be4ee8":"code","790871d3":"code","b31df663":"code","0d942475":"code","fed75aab":"code","eb627671":"code","24c66261":"code","8f18bc27":"code","46e68dd4":"code","569a3c4e":"code","9a067011":"code","970a4ce0":"code","6013304e":"code","deb4bcc7":"code","db4b873e":"code","da1ca2f7":"code","8f693490":"code","13232504":"code","3c0f814c":"code","e02809ff":"code","875ebfcd":"code","5cbd77a0":"code","f013e8a6":"code","899802ca":"code","147b842b":"code","8776b334":"code","8012f4ae":"code","e23c909f":"code","cab876eb":"code","a07d9c31":"code","b6e359f9":"code","48fbab5c":"code","a9c7eb81":"code","16c1c5a8":"code","34d77941":"code","8f30af7a":"code","33fb1bc3":"code","98f19612":"code","ff03adbc":"code","c33ea5d3":"code","15947cdd":"code","a3300f98":"code","baff92a8":"code","e3555d62":"code","9237c2dd":"code","673531f0":"code","635d2d02":"code","b8477c50":"code","e5373929":"code","98e3fd5f":"code","e5e1d53a":"code","a549129e":"code","bba629a8":"code","c1a8572d":"code","7b167ced":"code","d37a5193":"markdown","a6a20b67":"markdown","9a3cc5a6":"markdown","e5cadb41":"markdown","69a5010e":"markdown","28d69e90":"markdown","69783908":"markdown"},"source":{"63be4ee8":"!nvidia-smi","790871d3":"# try:\n#     import resnest\n# except ModuleNotFoundError:\n#     !pip install -q \"..\/input\/resnest50-fast-package\/resnest-0.0.6b20200701\/resnest\"","b31df663":"try:\n    import efficientnet_pytorch\nexcept ModuleNotFoundError:\n    !pip install -q \"..\/input\/efficientnet-pytorch\/EfficientNet-PyTorch\/EfficientNet-PyTorch-master\"","0d942475":"import numpy as np\nimport librosa as lb\nimport soundfile as sf\nimport pandas as pd\nimport cv2\nfrom pathlib import Path\nimport re\n\nimport torch\nfrom torch import nn\nfrom  torch.utils.data import Dataset, DataLoader\n\nfrom tqdm.notebook import tqdm\n\nimport time\n#from resnest.torch import resnest50\nfrom efficientnet_pytorch import EfficientNet","fed75aab":"NUM_CLASSES = 273\nSR = 32_000\nDURATION = 5\n#THRESH = 0.25\nTHRESH = 0.80\n\nDEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(\"DEVICE:\", DEVICE)\n","eb627671":"# First, get a list of soundscape files to process.\n# We'll use the test_soundscape directory if it contains \"ogg\" files\n# (which it only does when submitting the notebook), \n# otherwise we'll use the train_soundscape folder to make predictions.\n\nTEST_AUDIO_ROOT = Path(\"..\/input\/birdclef-2021\/test_soundscapes\")\nSAMPLE_SUB_PATH = \"..\/input\/birdclef-2021\/sample_submission.csv\"\nTARGET_PATH = None","24c66261":"len(list(TEST_AUDIO_ROOT.glob(\"*.ogg\")))","8f18bc27":"if not len(list(TEST_AUDIO_ROOT.glob(\"*.ogg\"))):\n    TEST_AUDIO_ROOT = Path(\"..\/input\/birdclef-2021\/train_soundscapes\")\n    SAMPLE_SUB_PATH = None\n    # SAMPLE_SUB_PATH = \"..\/input\/birdclef-2021\/sample_submission.csv\"\n    TARGET_PATH = Path(\"..\/input\/birdclef-2021\/train_soundscape_labels.csv\")","46e68dd4":"class MelSpecComputer:\n    def __init__(self, sr, n_mels, fmin, fmax, **kwargs):\n        self.sr = sr\n        self.n_mels = n_mels\n        self.fmin = fmin\n        self.fmax = fmax\n        kwargs[\"n_fft\"] = kwargs.get(\"n_fft\", self.sr\/\/10)\n        kwargs[\"hop_length\"] = kwargs.get(\"hop_length\", self.sr\/\/(10*4))\n        self.kwargs = kwargs\n\n    def __call__(self, y):\n\n        melspec = lb.feature.melspectrogram(\n            y, sr=self.sr, n_mels=self.n_mels, fmin=self.fmin, fmax=self.fmax, **self.kwargs,\n        )\n\n        melspec = lb.power_to_db(melspec).astype(np.float32)\n        return melspec","569a3c4e":"def mono_to_color(X, eps=1e-6, mean=None, std=None):\n    mean = mean or X.mean()\n    std = std or X.std()\n    X = (X - mean) \/ (std + eps)\n    \n    _min, _max = X.min(), X.max()\n\n    if (_max - _min) > eps:\n        V = np.clip(X, _min, _max)\n        V = 255 * (V - _min) \/ (_max - _min)\n        V = V.astype(np.uint8)\n    else:\n        V = np.zeros_like(X, dtype=np.uint8)\n\n    return V\n\ndef crop_or_pad(y, length):\n    if len(y) < length:\n        y = np.concatenate([y, length - np.zeros(len(y))])\n    elif len(y) > length:\n        y = y[:length]\n    return y","9a067011":"class BirdCLEFDataset(Dataset):\n    def __init__(self, data, sr=SR, n_mels=128, fmin=0, fmax=None, duration=DURATION, step=None, res_type=\"kaiser_fast\", resample=True):\n        \n        self.data = data\n        \n        self.sr = sr\n        self.n_mels = n_mels\n        self.fmin = fmin\n        self.fmax = fmax or self.sr\/\/2\n\n        self.duration = duration\n        self.audio_length = self.duration*self.sr\n        self.step = step or self.audio_length\n        \n        self.res_type = res_type\n        self.resample = resample\n\n        self.mel_spec_computer = MelSpecComputer(sr=self.sr, n_mels=self.n_mels, fmin=self.fmin,\n                                                 fmax=self.fmax)\n    def __len__(self):\n        return len(self.data)\n    \n    @staticmethod\n    def normalize(image):\n        image = image.astype(\"float32\", copy=False) \/ 255.0\n        image = np.stack([image, image, image])\n        return image\n    \n    def audio_to_image(self, audio):\n        melspec = self.mel_spec_computer(audio) \n        image = mono_to_color(melspec)\n        image = self.normalize(image)\n        return image\n\n    def read_file(self, filepath):\n        audio, orig_sr = sf.read(filepath, dtype=\"float32\")\n\n        if self.resample and orig_sr != self.sr:\n            audio = lb.resample(audio, orig_sr, self.sr, res_type=self.res_type)\n          \n        audios = []\n        for i in range(self.audio_length, len(audio) + self.step, self.step):\n            start = max(0, i - self.audio_length)\n            end = start + self.audio_length\n            audios.append(audio[start:end])\n            \n        if len(audios[-1]) < self.audio_length:\n            audios = audios[:-1]\n            \n        images = [self.audio_to_image(audio) for audio in audios]\n        images = np.stack(images)\n        \n        return images\n    \n        \n    def __getitem__(self, idx):\n        return self.read_file(self.data.loc[idx, \"filepath\"])","970a4ce0":"data = pd.DataFrame(\n     [(path.stem, *path.stem.split(\"_\"), path) for path in Path(TEST_AUDIO_ROOT).glob(\"*.ogg\")],\n    columns = [\"filename\", \"id\", \"site\", \"date\", \"filepath\"]\n)\nprint(data.shape)\ndata.head()","6013304e":"#Use new rich metadata from private dataset\ndf_train = pd.read_csv(\"..\/input\/birdcled2021train-metadata-limited-birds-rich-set\/train_metadata_filtered_rich.csv\")","deb4bcc7":"LABEL_IDS = {label: label_id for label_id,label in enumerate(sorted(df_train[\"primary_label\"].unique()))}\nINV_LABEL_IDS = {val: key for key,val in LABEL_IDS.items()}","db4b873e":"#LABEL_IDS","da1ca2f7":"df_train[\"label_id\"].min(), df_train[\"label_id\"].max()","8f693490":"test_data = BirdCLEFDataset(data=data)\nlen(test_data), test_data[0].shape","13232504":"# def load_net(checkpoint_path, num_classes=NUM_CLASSES):\n#     net = resnest50(pretrained=False)\n#     net.fc = nn.Linear(net.fc.in_features, num_classes)\n#     dummy_device = torch.device(\"cpu\")\n#     d = torch.load(checkpoint_path, map_location=dummy_device)\n#     for key in list(d.keys()):\n#         d[key.replace(\"model.\", \"\")] = d.pop(key)\n#     net.load_state_dict(d)\n#     net = net.to(DEVICE)\n#     net = net.eval()\n#     return net","3c0f814c":"def load_efficient_net(checkpoint_path, num_classes=NUM_CLASSES):\n    net = EfficientNet.from_name('efficientnet-b5')\n    net._fc = nn.Linear(net._fc.in_features, num_classes)\n    #model._fc = nn.Linear(in_features=model._fc.in_features, out_features=6)\n    dummy_device = torch.device(\"cpu\")\n    d = torch.load(checkpoint_path, map_location=dummy_device)\n    for key in list(d.keys()):\n        d[key.replace(\"model.\", \"\")] = d.pop(key)\n    #model.load_state_dict(torch.load('..\/input\/pytorch-efficientnet\/best_model.pth'))\n    net.load_state_dict(d)\n    net = net.to(DEVICE)\n    net = net.eval()\n    return net","e02809ff":"\n# checkpoint_paths = [\n#     Path(\"..\/input\/kkiller-birdclef-models-public\/birdclef_resnest50_fold0_epoch_10_f1_val_06471_20210417161101.pth\"),\n# ]\n\n\n# nets = [\n#         load_net(checkpoint_path.as_posix()) for checkpoint_path in checkpoint_paths\n# ]","875ebfcd":"\ncheckpoint_efficient_paths = [\n    Path(\"..\/input\/birdclef-enb5-fold0-epoch-17-f1-val-07796\/birdclef_efficientnet-b5_fold0_epoch_17_f1_val_07796_20210524050547.pth\"),\n]\n\n\nefficient_nets = [\n        load_efficient_net(checkpoint_efficient_path.as_posix()) for checkpoint_efficient_path in checkpoint_efficient_paths\n]","5cbd77a0":"@torch.no_grad()\ndef get_thresh_preds(out, thresh=None):\n    thresh = thresh or THRES\n    o = (-out).argsort(1)\n    npreds = (out > thresh).sum(1)\n    preds = []\n    for oo, npred in zip(o, npreds):\n        preds.append(oo[:npred].cpu().numpy().tolist())\n    return preds","f013e8a6":"def get_bird_names(preds):\n    bird_names = []\n    for pred in preds:\n        if not pred:\n            bird_names.append(\"nocall\")\n        else:\n            bird_names.append(\" \".join([INV_LABEL_IDS[bird_id] for bird_id in pred]))\n    return bird_names","899802ca":"def predict(nets, test_data, names=True):\n    preds = []\n    with torch.no_grad():\n        for idx in  tqdm(list(range(len(test_data)))):\n            xb = torch.from_numpy(test_data[idx]).to(DEVICE)\n            pred = 0.\n            for net in nets:\n                o = net(xb)\n                o = torch.sigmoid(o)\n\n                pred += o\n\n            pred \/= len(nets)\n            \n            if names:\n                pred = get_bird_names(get_thresh_preds(pred))\n\n            preds.append(pred)\n    return preds","147b842b":"# pred_probas = predict(nets, test_data, names=False)\n# print(len(pred_probas))","8776b334":"pred_probas_efficient = predict(efficient_nets, test_data, names=False)\nprint(len(pred_probas_efficient))","8012f4ae":"#len(pred_probas)\nlen(pred_probas_efficient)","e23c909f":"#pred_probas[0]","cab876eb":"pred_probas_efficient[0]","a07d9c31":"#pred_probas[0]+pred_probas_efficient[0]","b6e359f9":"#pred_probas_avg =[(pred_probas[i]+pred_probas_efficient[i])\/2 for i in range(0,len(pred_probas))]\n#pred_probas_avg =[(pred_probas[i]*3+pred_probas_efficient[i]*1)\/4 for i in range(0,len(pred_probas))]","48fbab5c":"#len(pred_probas_avg)","a9c7eb81":"#pred_probas_avg[0]","16c1c5a8":"#preds_avg = [get_bird_names(get_thresh_preds(pred, thresh=THRESH)) for pred in pred_probas_avg]","34d77941":"#preds_avg[:2]","8f30af7a":"#preds = [get_bird_names(get_thresh_preds(pred, thresh=THRESH)) for pred in pred_probas]\n# preds[:2]","33fb1bc3":"#preds[:2]","98f19612":"preds_efficient = [get_bird_names(get_thresh_preds(pred, thresh=THRESH)) for pred in pred_probas_efficient]\n# preds[:2]","ff03adbc":"#preds_efficient[:2]","c33ea5d3":"def preds_as_df(data, preds):\n    sub = {\n        \"row_id\": [],\n        \"birds\": [],\n    }\n    \n    for row, pred in zip(data.itertuples(False), preds):\n        row_id = [f\"{row.id}_{row.site}_{5*i}\" for i in range(1, len(pred)+1)]\n        sub[\"birds\"] += pred\n        sub[\"row_id\"] += row_id\n        \n    sub = pd.DataFrame(sub)\n    \n    if SAMPLE_SUB_PATH:\n        sample_sub = pd.read_csv(SAMPLE_SUB_PATH, usecols=[\"row_id\"])\n        sub = sample_sub.merge(sub, on=\"row_id\", how=\"left\")\n        sub[\"birds\"] = sub[\"birds\"].fillna(\"nocall\")\n    return sub","15947cdd":"# sub = preds_as_df(data, preds)\n# print(sub.shape)\n# sub","a3300f98":"sub_efficient = preds_as_df(data, preds_efficient)\nprint(sub_efficient.shape)\nsub_efficient","baff92a8":"# sub_avg = preds_as_df(data, preds_avg)\n# print(sub_avg.shape)\n# sub_avg","e3555d62":"sub_efficient.to_csv(\"submission.csv\", index=False)","9237c2dd":"#CPMP's code\ndef fast_f1_score(predictions, target):\n    tp = (predictions * target).sum(1)\n    fp = (predictions * (1 - target)).sum(1)\n    fn = ((1 - predictions) * target).sum(1)\n    f1 = tp \/ (tp + (fp + fn) \/ 2)\n    precision = tp \/ (tp + fp)\n    recall = tp \/ (tp + fn)\n    return f1.mean(), precision.mean(), recall.mean()\n    #return {\"f1\": f1, \"prec\": precision, \"rec\": recall}","673531f0":"def get_metrics(s_true, s_pred):\n    s_true = set(s_true.split())\n    s_pred = set(s_pred.split())\n    n, n_true, n_pred = len(s_true.intersection(s_pred)), len(s_true), len(s_pred)\n    \n    prec = n\/n_pred\n    rec = n\/n_true\n    f1 = 2*prec*rec\/(prec + rec) if prec + rec else 0\n    \n    return {\"f1\": f1, \"prec\": prec, \"rec\": rec, \"n_true\": n_true, \"n_pred\": n_pred, \"n\": n}","635d2d02":"# if TARGET_PATH:\n#     sub_target = pd.read_csv(TARGET_PATH)\n#     sub_target = sub_target.merge(sub, how=\"left\", on=\"row_id\")\n    \n#     print(sub_target[\"birds_x\"].notnull().sum(), sub_target[\"birds_x\"].notnull().sum())\n#     assert sub_target[\"birds_x\"].notnull().all()\n#     assert sub_target[\"birds_y\"].notnull().all()\n    \n#     df_metrics = pd.DataFrame([get_metrics(s_true, s_pred) for s_true, s_pred in zip(sub_target.birds_x, sub_target.birds_y)])\n#     #import pdb;pdb.set_trace()\n#     #cpmp_f1_mean, cpmp_precision_mean, cpmp_recall_mean = fast_f1_score(sub_target.birds_y, sub_target.birds_x)\n    \n#     #print (f\"f1_mean = {cpmp_f1_mean}, precision_mean = {cpmp_precision_mean}, recall_mean = {cpmp_recall_mean}\")\n#     print(df_metrics.mean())","b8477c50":"# sub_target[sub_target.birds_y != \"nocall\"]","e5373929":"# sub_target[sub_target.birds_x != \"nocall\"]","98e3fd5f":"if TARGET_PATH:\n    sub_efficient_target = pd.read_csv(TARGET_PATH)\n    sub_efficient_target = sub_efficient_target.merge(sub_efficient, how=\"left\", on=\"row_id\")\n    \n    print(sub_efficient_target[\"birds_x\"].notnull().sum(), sub_efficient_target[\"birds_x\"].notnull().sum())\n    \n    assert sub_efficient_target[\"birds_x\"].notnull().all()\n    assert sub_efficient_target[\"birds_y\"].notnull().all()\n    \n    df_sufficient_metrics = pd.DataFrame([get_metrics(s_true, s_pred) for s_true, s_pred in zip(sub_efficient_target.birds_x, sub_efficient_target.birds_y)])\n \n    #cpmp_f1_mean, cpmp_precision_mean, cpmp_recall_mean = fast_f1_score(sub_efficient_target.birds_y, sub_efficient_target.birds_x)\n    #print (f\"f1_mean = {cpmp_f1_mean}, precision_mean = {cpmp_precision_mean}, recall_mean = {cpmp_recall_mean}\")\n\n    print(df_sufficient_metrics.mean())","e5e1d53a":"sub_efficient_target[sub_efficient_target.birds_y != \"nocall\"]","a549129e":"sub_efficient_target[sub_efficient_target.birds_x != \"nocall\"]","bba629a8":"# if TARGET_PATH:\n#     sub_avg_target = pd.read_csv(TARGET_PATH)\n#     sub_avg_target = sub_avg_target.merge(sub_avg, how=\"left\", on=\"row_id\")\n    \n#     print(sub_avg_target[\"birds_x\"].notnull().sum(), sub_avg_target[\"birds_x\"].notnull().sum())\n    \n#     assert sub_avg_target[\"birds_x\"].notnull().all()\n#     assert sub_avg_target[\"birds_y\"].notnull().all()\n    \n#     df_avg_metrics = pd.DataFrame([get_metrics(s_true, s_pred) for s_true, s_pred in zip(sub_avg_target.birds_x, sub_avg_target.birds_y)])\n \n#     #cpmp_f1_mean, cpmp_precision_mean, cpmp_recall_mean = fast_f1_score(sub_efficient_target.birds_y, sub_efficient_target.birds_x)\n#     #print (f\"f1_mean = {cpmp_f1_mean}, precision_mean = {cpmp_precision_mean}, recall_mean = {cpmp_recall_mean}\")\n\n#     print(df_avg_metrics.mean())","c1a8572d":"# sub_avg_target[sub_avg_target.birds_y != \"nocall\"]","7b167ced":"# sub_avg_target[sub_avg_target.birds_x != \"nocall\"]","d37a5193":"# Data","a6a20b67":"In this kenel, I'm going to use a classical **ResneSt50** for bird identification.","9a3cc5a6":"# Inference","e5cadb41":"# Small validation","69a5010e":"* The inference is based on these [resnest50 weights](https:\/\/www.kaggle.com\/kneroma\/kkiller-birdclef-models-public). Please, don't forget upvoting the dataset to make it more visible for others\n* The inference pipeline is optimized as much as I can in order to reduce execution time","28d69e90":"# Notes","69783908":"# Configs"}}