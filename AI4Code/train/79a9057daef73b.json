{"cell_type":{"86ce949f":"code","f80c011d":"code","a307315b":"code","d9b0ddb9":"code","1d0baa0e":"code","28305ade":"code","a426ee4a":"code","f8c462d5":"code","34a77868":"code","7ea1cd12":"code","61316737":"code","20a1a0b4":"code","b4c506a1":"code","5b9dd2d8":"code","48387e02":"code","b70e0b65":"code","3690a217":"code","5404bd76":"code","a725270c":"code","c8e32342":"code","496ff687":"code","7ce9c65e":"code","5f7f454b":"code","f4a327fd":"code","a75267cb":"code","88146272":"code","0a2cd50c":"code","c0a30b5a":"code","a9220631":"code","c384a5f6":"code","7f569efc":"code","b649df70":"code","9478e69e":"code","c0e7a153":"code","24b119ec":"code","d996ffc5":"code","db611b82":"code","fc9f2ef8":"code","c25047e5":"code","c5a2f883":"code","310e3de2":"code","3436975a":"code","f52b6722":"code","a787a42d":"code","b89748eb":"markdown","9b43f16e":"markdown","b241d2a0":"markdown","dceefe73":"markdown","cd150452":"markdown","43a12b25":"markdown","b7218cb4":"markdown","3ef2573d":"markdown","8cbdf5a3":"markdown","d4e05708":"markdown","4a5d6051":"markdown","3921352d":"markdown","6d25752d":"markdown","1215777d":"markdown","658bf205":"markdown","57a1426d":"markdown","828d8919":"markdown","eff626a3":"markdown","e4ebaba3":"markdown","e315968b":"markdown","65f43ac3":"markdown","719286e5":"markdown","9e6a2b48":"markdown","d1f98211":"markdown","498d2cec":"markdown","ff81b11f":"markdown","81a0f9e7":"markdown","72914bca":"markdown","0489f08e":"markdown","eea6a8a8":"markdown","839be41e":"markdown","476462b9":"markdown","4eb98024":"markdown","3a79c60d":"markdown","37bbd85c":"markdown","4da22a51":"markdown","155d55fd":"markdown","1d72808e":"markdown","c6b7d6e9":"markdown","0fd2b291":"markdown","a5536c38":"markdown","a2d4b18f":"markdown","43fa516c":"markdown","36fbfc91":"markdown","6da25372":"markdown","7067ae33":"markdown","d9cfc48d":"markdown","8ba92d6f":"markdown","8b4b7311":"markdown","0375c9c8":"markdown","a7d87f67":"markdown","a285c046":"markdown","6ed0e505":"markdown","a11d02e6":"markdown","73183b3f":"markdown","0641e894":"markdown","efb0633d":"markdown","5c5cf01c":"markdown","b625a4ae":"markdown","c647f94d":"markdown"},"source":{"86ce949f":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.rcParams['axes.unicode_minus'] = False\n\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","f80c011d":"train = pd.read_csv('.\/train.csv')\ntest = pd.read_csv('.\/test.csv')","a307315b":"# \ub370\uc774\ud130 \uccab \uc904\ub9cc \ud655\uc778\ud574\ubd05\ub2c8\ub2e4.\ntrain.head(1)","d9b0ddb9":"# \ub370\uc774\ud130 \uad6c\uc870 \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.\nprint(train.shape)\nprint(test.shape)","1d0baa0e":"# \ubcc0\uc218\ubcc4 \ub370\uc774\ud130 \ud0c0\uc785 \ud655\uc778\ud574\ubd05\ub2c8\ub2e4.\ntrain.info()","28305ade":"# object \ubc94\uc8fc\ud615 \ubcc0\uc218\ub97c \uc81c\uac70\ud558\uace0 \uce7c\ub7fc\ubcc4 \ubd84\ud3ec\ub97c \ud55c\ubc88\uc5d0 \uadf8\ub824\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\ntrain_num = train.drop(['id', 'address', 'sigungu'], axis=1)\nlen(train_num.columns)","a426ee4a":"fig, ax = plt.subplots(nrows = 7 , ncols = 4, figsize = (18, 30))\nnum = 0\nax = ax.flatten()\n\n# kde True\ub294 \ud655\ub960 \ubc00\ub3c4 \uace1\uc120\uc774 \ub098\uc624\uace0, rug True\ub294 \ud558\ubd80\uc5d0 \ubc00\ub3c4 \ubd84\ud3ec\ud45c\uc2dc\nfor col in list(train_num.columns[1:]):\n    sns.distplot(train_num[col], ax = ax[num], kde = True, rug = True) \n    num += 1    \nplt.show()","f8c462d5":"# \uc2dc\ub3c4\uba85 \uc601\ubb38 \ubcc0\ud658\nsido_dict = {'\uc11c\uc6b8': 'seoul', '\uc778\ucc9c': 'incheon', '\ub300\uc804': 'daejeon', '\uad11\uc8fc': 'gwangju', '\ub300\uad6c': 'daegu',\n             '\uc6b8\uc0b0': 'ulsan', '\ubd80\uc0b0': 'busan', '\uc138\uc885': 'sejong', '\uc81c\uc8fc': 'jeju', '\uacbd\uae30':'gyeonggi',\n             '\uac15\uc6d0': 'gangwon', '\ucda9\ubd81': 'chungbuk', '\ucda9\ub0a8': 'chungnam', '\uacbd\ubd81': 'gyeongbuk',\n             '\uacbd\ub0a8': 'gyeongnam', '\uc804\ubd81': 'jeonbuk', '\uc804\ub0a8':'jeonnam'}\ntrain['sido'] = train['sido'].map(sido_dict)\n\n# \uc2dc\ub3c4\ubcc4 \ub370\uc774\ud130 \uc218 - \ud30c\uc774\ucc28\ud2b8\nf, ax=plt.subplots(1,2, figsize=(22,8))\ntrain['sido'].value_counts().plot.pie(autopct = '%1.1f%%', ax=ax[0], shadow=True)\nax[0].set_ylabel('')\nsns.countplot('sido', data=train, ax=ax[1])\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',\n    fontsize='x-large'  \n)\nplt.show()","34a77868":"plt.figure(figsize=(16,8))\nplt.title('sido mean price', fontsize=15)\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',\n    fontsize='x-large')\nsns.barplot('sido','price',data=train)","7ea1cd12":"# \uc2dc\ub3c4 \ubcc4 \uc544\ud30c\ud2b8 \ub9e4\ub9e4\uac00\uaca9 Boxplot\nplt.figure(figsize=(16,8))\nsns.boxplot(x=\"sido\", y=\"doctor\", data=train)\nplt.ylabel('price', fontsize=12)\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',\n    fontsize='x-large')\nplt.title(\"sido price boxplot\", fontsize=15)\nplt.show()","61316737":"fig, ax = plt.subplots(nrows = 5, ncols = 3, figsize = (18, 20))\nnum = 0\nax = ax.flatten()\nvars = ['price', 'population', 'brand_apt', 'apt_age', 'unsold', 'trade_6m', 'rent_6m', 'doctor', 'motel', 'industry', 'commerce', 'starbucks', 'real_estate', 'subway','elemen_school']\nfor var in vars:\n    price_mean_by_tugi = train.groupby('tugi')[var].mean()\n    label = train['tugi'].unique()\n    index = np.arange(len(label))\n    ax[num].bar(label, price_mean_by_tugi)\n    ax[num].set_xlabel('tugi', fontsize=12)\n    ax[num].set_ylabel('mean_'+var, fontsize=12)\n    ax[num].set_xticks(label)\n    plt.show\n    num += 1    ","20a1a0b4":"train[\"address\"].value_counts()","b4c506a1":"train[\"sido\"].value_counts()","5b9dd2d8":"train[\"sigungu\"].value_counts()","48387e02":"# isnull \ud568\uc218\ub97c \uc368\uc11c \uacb0\uce21\uce58\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.\ntrain.isnull().sum()","b70e0b65":"# !pip install missingno\nimport missingno as msno\nplt.rc('font', family = 'NanumGothic')\nmsno.matrix(train)","3690a217":"# \uc804\uccb4 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uacb0\uce21\uce58 \ube44\uc728 \uacc4\uc0b0\uc744 \uc704\ud574 concat train\/test data\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['price'], axis=1, inplace=True)\nall_data.shape","5404bd76":"# \uc804\uccb4 \ub370\uc774\ud130 \uacb0\uce21\uce58 \ube44\uc728 \uacc4\uc0b0 check null values \nall_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_na = all_na.drop(all_na[all_na == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :all_na})\nmissing_data.head(20)","a725270c":"# unicode minus\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uae30 \uc704\ud55c \uc124\uc815 (minus \uae68\uc9d0\ud604\uc0c1 \ubc29\uc9c0)\nplt.rcParams['axes.unicode_minus'] = False\n\nfig, ax = plt.subplots(nrows = 7, ncols = 4, figsize = (18, 30))\nnum = 0\nax = ax.flatten()\nfor col in list(train_num.columns[1:]):\n    sns.boxplot(train_num[col], ax = ax[num])\n    num += 1    \nplt.show()","c8e32342":"# \ud1b5\uacc4\uc801 \uc774\uc0c1\uce58\ub97c \uc81c\uac70\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574\uc11c \uc544\ub798 \ucf54\ub4dc\ub97c \ucc38\uace0\ud574\uc8fc\uc138\uc694\n'''\nquartile_1 = train.quantile(0.25)\nquartile_3 = train.quantile(0.75)\n\nIQR = quartile_3 - quartile_1\ncondition = (train < (quartile_1 - 1.5 * IQR)) | (train > (quartile_3 + 1.5 * IQR))\ncondition = condition.any(axis=1)\ntrain = train[condition]\nprint(train.shape)\n'''","496ff687":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nsns.set(font=\"NanumGothic\")\n\nimport warnings\nwarnings.filterwarnings(action='ignore')\n\n# \ucd5c\ucd08 29\uac1c \ubcc0\uc218 + id= 30\uac1c \ubcc0\uc218\nfeatures = ['id','sido', 'population', 'gross_area', 'jojung', 'tugi', 'newcommer_1yr',\n       'brand_apt', 'apt_age', 'compet_rate_1yr', 'unsold', 'trade_6m',\n       'rent_6m', 'elemen_school', 'middle_school', 'high_school',\n       'special_school', 'academy', 'kindergarten', 'museum', 'pharmacy',\n       'doctor', 'motel', 'industry', 'commerce', 'starbucks', 'real_estate',\n       'subway', 'expressway', 'price']\n\n\n# \uc0bc\uac01\ud615 \ub9c8\uc2a4\ud06c\ub97c \ub9cc\ub4e0\ub2e4(\uc704 \ucabd \uc0bc\uac01\ud615\uc5d0 True, \uc544\ub798 \uc0bc\uac01\ud615\uc5d0 False)\nmask = np.zeros_like(train[features].corr(), dtype=np.bool) \nmask[np.triu_indices_from(mask)] = True \n\nf, ax = plt.subplots(figsize=(16, 12))\nplt.title('Pearson Correlation Matrix',fontsize=25)\n\nsns.heatmap(train[features].corr(),\n            linewidths=0.25,# \uacbd\uacc4\uba74 \uc120\uad6c\ubd84 cf. \uc2e4\uc120(0.5)\uc73c\ub85c \uad6c\ubd84\ud558\uae30\n            vmax=0.7, # \uceec\ub7ec\ubc14 \ubc94\uc704 : \ucd5c\uc18c\uac12 \ubbf8\uc9c0\uc815 \ucd5c\ub300\uac12 0.7 \n            square=True,\n            cmap=\"Blues\", #\ud788\ud2b8\ub9f5 \uc0c9\uae54. blue, green #\"BuGn_r\" to reverse # Blues # BuGn\n            linecolor='w',# \ub77c\uc778 \uc0c9\uc740 \ud770\uc0c9(white)\n            \n            annot=True,            # \uc2e4\uc81c \uac12\uc744 \ud45c\uc2dc\ud55c\ub2e4\n            annot_kws={\"size\":8},  # \uc2e4\uc81c \uac12 \ud3f0\ud2b8 \uc0ac\uc774\uc988\n            mask=mask,             # \uc704\uc5d0\uc11c \uc124\uc815\ud55c \ub9c8\uc2a4\ud06c \ubd80\ubd84(\uac00\ub9b4\ubd80\ubd84) \uc9c0\uc815\ud55c\ub2e4\n            cbar_kws={\"shrink\": .8}); # \uc624\ub978\ucabd \uceec\ub7ec\ubc14 \ud06c\uae30 \uc904\uc774\uae30 90% \ud06c\uae30","7ce9c65e":"# 'price' \ubcc0\uc218\uc640 \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uc740 \uc0c1\uc704 8\uac1c \uceec\ub7fc\uac04 \uad00\uacc4\ubd84\uc11d\ntop8_cols = train.corr()['price'].abs().sort_values(ascending=False).head(8).index.to_list()\n\nplt.figure(figsize=(20,20))\nsns.pairplot(train[top8_cols], palette=\"husl\")","5f7f454b":"# \uac01 \ubcc0\uc218\ub4e4 \uac04\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \uadf8\ub824\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\nco = train.corrwith(train['price'])\n\n# \uc0c1\uad00\uacc4\uc218\ub97c \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c \uc815\ub9ac\ud574\uc11c \ucd9c\ub825\ud574\ubcf4\uc8e0\nprint(co.sort_values(ascending=False))\n\n# \uc808\ub300\uac12\uc73c\ub85c \ucde8\ud569\ub2c8\ub2e4.\nco_abs = abs(co)","f4a327fd":"# \uc0c1\uad00\uacc4\uc218\uc758 \uc808\ub300\uac12\uc744 \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c \uc815\ub9ac\ud569\ub2c8\ub2e4.\nco_sort = co_abs.sort_values(ascending=False)\nco_sort = co_sort[co_sort>0.1]\n\n# \uc0c1\uad00\uad00\uacc4\uac00 \ub0ae\uc740 \ubcc0\uc218\ub97c \uc81c\uac70\ud558\uace0 \uc0c8\ub85c\uc6b4 \ubcc0\uc218\ub97c \uad6c\uc131\ud569\ub2c8\ub2e4.\nnew_features = co_sort.to_frame().index\nnew_features","a75267cb":"print(len(features))\nprint(len(new_features))\n\nprint('\uc81c\uac70\ub41c \ubcc0\uc218\uc758 \uac2f\uc218 :{}\uac1c'.format(len(features) - len(new_features)))","88146272":"# # \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\nfeatures = ['id','tugi', 'jojung', 'pharmacy', 'subway', 'rent_6m', 'starbucks',\n       'real_estate', 'population', 'kindergarten', 'doctor', 'brand_apt',\n       'academy', 'commerce', 'apt_age', 'industry', 'high_school',\n       'middle_school', 'compet_rate_1yr', 'elemen_school']\n\ntarget = 'price'\n\nX = train[features]\ny = train[target]","0a2cd50c":"print(X.shape)\nprint(y.shape)","c0a30b5a":"X","a9220631":"# \uc6b0\ub9ac \ubb38\uc81c\ub294 \ud68c\uadc0\uc774\ubbc0\ub85c Min-Max Scaler\ub97c \uc0ac\uc6a9\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","c384a5f6":"from sklearn import metrics\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split                                                     \n\ntrain_X, valid_X, train_y, valid_y = train_test_split(X, y, test_size=0.1, random_state=1)\n\n# \ud53c\ucc98 \uc2a4\ucf00\uc77c\ub9c1\nscaler = preprocessing.MinMaxScaler()\n\ntrain_X_norm = scaler.fit_transform(train_X)\nvalid_X_norm = scaler.fit_transform(valid_X)","7f569efc":"# \ud68c\uadc0\ubaa8\ub378 \ud559\uc2b5\nfrom sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()\nlr.fit(train_X_norm, train_y)\n\n# \uc608\uce21\uac12 \uc0dd\uc131\npredicts = lr.predict(valid_X_norm)\n\n# \uc624\ucc28\uacc4\uc0b0\nfrom sklearn.metrics import mean_absolute_error\n\nvalid_MAE = mean_absolute_error(valid_y, predicts)\nprint(f\"valid MAE: {valid_MAE:.3f}\")","b649df70":"lr_coef_df = pd.DataFrame(lr.coef_, index=X.columns, columns=[\"lr_coef\"])\nlr_coef_df.sort_values(ascending=False, by='lr_coef')","9478e69e":"# \ubaa8\ub378 \uc815\ud655\ub3c4 \uacc4\uc0b0\naccuracy = lr.score(valid_X_norm, valid_y)\nprint(\"\uc608\uce21\ubaa8\ub378 \uc815\ud655\ub3c4\ub294 {:.2f}% \uc785\ub2c8\ub2e4.\".format(float(accuracy*100)))","c0e7a153":"import matplotlib.pyplot as plt\n%matplotlib inline\n\n# \ud55c\uae00\ud3f0\ud2b8 \uc124\uc815\nimport matplotlib.font_manager as fm\npath = 'C:\\\\Windows\\\\Fonts\\\\NanumSquareRoundB.ttf'\nfont_name = fm.FontProperties(fname=path).get_name()\nplt.rc('font', family=font_name)\n\n# \ud50c\ub86f \uc0ac\uc774\uc988 \uc124\uc815\nplt.figure(figsize=(6.5, 5))\n\nY_pred = lr.predict(valid_X_norm)\n\nplt.scatter(valid_y, Y_pred, color='r')\nplt.plot(valid_y, valid_y)\n\nplt.xlabel(\"\uc2e4\uc81c \ud3c9\ub2f9 \uc544\ud30c\ud2b8 \ub9e4\ub9e4\uac00: Y\")\nplt.ylabel(\"\ubaa8\ub378\uc774 \uc608\uce21\ud55c \ub9e4\ub9e4\uac00 : $\\hat{Y}$\")\nplt.title(\"\uc2e4\uc81c\uac12 vs \uc608\uce21\uac12 : $Y$ vs $\\hat{Y}$\")","24b119ec":"from sklearn.metrics import mean_absolute_error\n\ntrain_MAE = mean_absolute_error(train_y, lr.predict(train_X_norm))\nvalid_MAE = mean_absolute_error(valid_y, lr.predict(valid_X_norm))\n\nprint(f\"train MAE: {train_MAE:.3f}\")\nprint(f\"valid MAE: {valid_MAE:.3f}\")","d996ffc5":"from sklearn.linear_model import Lasso","db611b82":"lasso = Lasso(alpha=1)\nlasso.fit(train_X_norm, train_y)\n\ntrain_rmse = metrics.mean_absolute_error(train_y, lasso.predict(train_X_norm))\nvalid_rmse = metrics.mean_absolute_error(valid_y, lasso.predict(valid_X_norm))\n\nprint(f\"train: {train_rmse:.3f}\")\nprint(f\"test: {valid_rmse:.3f}\")","fc9f2ef8":"from sklearn.linear_model import Ridge","c25047e5":"ridge = Ridge(alpha=1)\nridge.fit(train_X_norm, train_y)\n\ntrain_MAE = metrics.mean_absolute_error(train_y, ridge.predict(train_X_norm))\nvalid_MAE = metrics.mean_absolute_error(valid_y, ridge.predict(valid_X_norm))\n\nprint(f\"train: {train_MAE:.3f}\")\nprint(f\"test: {valid_MAE:.3f}\")","c5a2f883":"# \ud544\uc218 \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport pandas as pd\nimport numpy as np\nimport random\n\n# \ub370\uc774\ud130 \uc804\ucc98\ub9ac\nfrom sklearn import datasets\n# train = \n# test = \n\n\n# 2. \ubcc0\uc218\uc120\ud0dd(\ub3c5\ub9bd\ubcc0\uc218, \ubaa9\uc801\ubcc0\uc218)\n# features = []\n# target = ''\n            \n# X = train[features]\n# y = train[target]\n\n# \ub7a8\ub364 \uc2dc\ub4dc \uace0\uc815\nSEED = 1\nrandom.seed(SEED)\nnp.random.seed(SEED)\n\n\n# \ub370\uc774\ud130 \uc804\ucc98\ub9ac\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import metrics\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\n                                                      \ntrain_X, valid_X, train_y, valid_y = train_test_split(X, y, test_size=0.2, random_state=1)\n\n# \ud53c\ucc98 \uc2a4\ucf00\uc77c\ub9c1\nscaler = preprocessing.MinMaxScaler()\n\ntrain_X_norm = scaler.fit_transform(train_X)\nvalid_X_norm = scaler.fit_transform(valid_X)\n\n# \ud68c\uadc0\ubaa8\ub378 \ud559\uc2b5\n\nRF = RandomForestRegressor()    \nRF.fit(train_X_norm, train_y)\n\n# \uc608\uce21\uac12 \uc0dd\uc131\npredicts = RF.predict(valid_X_norm)\n\n# \uc624\ucc28\uacc4\uc0b0\nfrom sklearn.metrics import mean_absolute_error\n\nvalid_MAE = mean_absolute_error(valid_y, predicts)\nprint(f\"valid MAE: {valid_MAE:.3f}\")\n\ntest_X_norm = scaler.transform(test[features])\nfinal_predict = RF.predict(test_X_norm)","310e3de2":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = {\n    'n_estimators': [100, 150, 200, 250],\n    'max_depth': [None, 6, 9, 12],\n    'min_samples_split': [0.01, 0.05, 0.1],\n    'max_features': ['auto', 'sqrt'],\n}\n\nRF = RandomForestRegressor()\n\nfrom sklearn.model_selection import KFold\n\nkf = KFold(random_state=30,\n           n_splits=10,\n           shuffle=True,\n          )\n\n# define grid_search\ngrid_search = GridSearchCV(estimator=RF, \n                           param_grid=param_grid, \n                           cv=kf, \n                           n_jobs=-1, \n                           verbose=2\n                          )\n\n# fit with (x_train, y_train)\ngrid_search.fit(train_X_norm, train_y)\n\ngrid_search.best_params_","3436975a":"#\uc704\uc5d0\uc11c \ucc3e\uc740 best parameter \uc744 \uac16\ub294 \ubaa8\ub378\uc744 \uc544\ub798\uc640 \uac19\uc774 \uc0dd\uc131\ud574\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nbest_model = grid_search.best_estimator_","f52b6722":"# \ud544\uc218 \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport pandas as pd\nimport numpy as np\nimport random\n\n# \ub370\uc774\ud130 \uc804\ucc98\ub9ac\nfrom sklearn import datasets\n# train = \n# test = \n\n\n# 2. \ubcc0\uc218\uc120\ud0dd(\ub3c5\ub9bd\ubcc0\uc218, \ubaa9\uc801\ubcc0\uc218)\n# features = []\n# target = ''\n            \n# X = train[features]\n# y = train[target]\n\n# \ub7a8\ub364 \uc2dc\ub4dc \uace0\uc815\nSEED = 1\nrandom.seed(SEED)\nnp.random.seed(SEED)\n\n\n# \ub370\uc774\ud130 \ubd84\ud560\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import metrics\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\n                                                      \ntrain_X, valid_X, train_y, valid_y = train_test_split(X, y, test_size=0.2, random_state=1)\n\n# \ud53c\ucc98 \uc2a4\ucf00\uc77c\ub9c1\nscaler = preprocessing.MinMaxScaler()\n\ntrain_X_norm = scaler.fit_transform(train_X)\nvalid_X_norm = scaler.fit_transform(valid_X)\ntest_X_norm = scaler.transform(test[features])\n\n\n# GridSearch\nfrom sklearn.model_selection import GridSearchCV\nparam_grid = {\n    'n_estimators': [100, 150, 200, 250, 300, 350, 400],\n    'max_depth': [None, 6, 12, 24, 32, 64],\n    'min_samples_split': [0.01, 0.05, 0.1],\n    'max_features': ['auto', 'sqrt'],\n}\n\nRF = RandomForestRegressor()\n\n# Cross Validation\nfrom sklearn.model_selection import KFold\nkf = KFold(random_state=30,\n           n_splits=10,\n           shuffle=True,\n          )\n\n\n# define grid_search\ngrid_search = GridSearchCV(estimator=RF, \n                           param_grid=param_grid, \n                           cv=kf, \n                           n_jobs=-1, \n                           verbose=2\n                          )\n\ngrid_search.fit(train_X_norm, train_y)\ngrid_search.best_params_\n\n# \ubca0\uc2a4\ud2b8 \ubaa8\ub378 \ud559\uc2b5\nbest_model.fit(train_X_norm, train_y)\n\n# \uc608\uce21\uac12 \uc0dd\uc131\npredicts = best_model.predict(valid_X_norm)\n\n# \uc624\ucc28\uacc4\uc0b0\nfrom sklearn.metrics import mean_absolute_error\n\nvalid_MAE = mean_absolute_error(valid_y, predicts)\nprint(f\"valid MAE: {valid_MAE:.3f}\")\n\n# test_X_norm = scaler.transform(test[features])\nfinal_predict = best_model.predict(test_X_norm)\n","a787a42d":"print(grid_search.best_params_)","b89748eb":"## 2.2 \ub370\uc774\ud130 \ubd84\ud3ec \ud655\uc778","9b43f16e":"# 2. \ub370\uc774\ud130 \ud0d0\uc0c9(Explore data set)","b241d2a0":"# 5. \ub370\uc774\ud130 \uc2a4\ucf00\uc77c\ub9c1(Data Scaling)","dceefe73":"# 6. \ubaa8\ub378\uc0dd\uc131 \ubc0f \ud559\uc2b5","cd150452":"### 2) Ridge regression","43a12b25":"$$P(a\\leq x\\leq b)=\\int^{b}_{a}f(x) dx$$","b7218cb4":"## LR vs. Ridge vs. Lasso","3ef2573d":"### \uc2e4\uc81c\uac12\uacfc \ubaa8\ub378\uc774 \uc608\uce21\ud55c \uac12\uc744 \ube44\uad50","8cbdf5a3":"#### 1) bar plot \n\uadf8\ub798\ud504\uc704\uc5d0 \uc218\uc5fc\uadf8\ub9bc\uc740 \uc2e0\ub8b0\uad6c\uac04\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. ","d4e05708":"### 2.3.2 \ud22c\uae30\uacfc\uc5f4\uc9c0\uad6c \uc5ec\ubd80 Column \ub370\uc774\ud130 \ubd84\ud3ec","4a5d6051":"|id   |address   |sido  |sigungu   |population |gross_area |jojung |tugi |newcommer_1yr |brand_apt  |apt_age  |compet_rate_1yr |unsold |trade_6m |rent_6m |elemen_school |middle_school |\n|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|\n|\ubc95\uc815\ub3d9 \ucf54\ub4dc  | \uc9c0\uc5ed\uba85  | \uc2dc\/\ub3c4  |\uc2dc\/\uad70\/\uad6c  | \uc778\uad6c \uc218| \uba74\uc801| \uc870\uc815\uc9c0\uc5ed(1) |\ud22c\uae30\uc9c0\uc5ed(1)| \uc2dc\uad70\uad6c \ub2e8\uc704 \ucd5c\uadfc 1\ub144\uac04 \uc21c \uc804\uc785\ub7c9| \ub79c\ub4dc \uc544\ud30c\ud2b8 \uc218| \uc544\ud30c\ud2b8 \ud3c9\uade0 \uc5f0\uc2dd| \ucd5c\uadfc 1\ub144\uac04 \ud3c9\uade0 \uccad\uc57d \uacbd\uc7c1\ub960| \ubbf8\ubd84\uc591 \uc218| \ucd5c\uadfc 6\uac1c\uac04 \ub9e4\ub9e4 \uac70\ub798 \uc218| \ucd5c\uadfc 6\uac1c\uc6d4\uac04 \uc804\uc6d4\uc138 \uac70\ub798 \uc218| \ucd08\ub4f1\ud559\uad50 \uc218|  \uc77c\ubc18 \uc911\ud559\uad50 \uc218|","3921352d":"### 2.3.4 sido","6d25752d":"![\ucee4\ub110\ubc00\ub3c4\ucd94\uccad](.\/kernel_1.png)","1215777d":"**\u2460 Parametric \ubc00\ub3c4\ucd94\uc815**  \n   * Parametric \ubc00\ub3c4\ucd94\uc815\uc740 \ubbf8\ub9ac pdf(probability density function)\uc5d0 \ub300\ud55c \ubd84\ud3ec\ubaa8\ub378\uc744 \uc815\ud574\ub193\uace0 \ub370\uc774\ud130\ub4e4\ub85c\ubd80\ud130 \ubaa8\ub378\uc758 \ud30c\ub77c\ubbf8\ud130\ub9cc \ucd94\uc815\n   * \uc2e4\ubb34\uc5d0\uc11c\ub294 \ubd84\ud3ec\ub97c \ubbf8\ub9ac \uc54c \uc218\uac00 \uc5c6\uc73c\ubbc0\ub85c, \uc21c\uc218\ud558\uac8c \uad00\uce21\ub41c \ub370\uc774\ud130\ub9cc \uac00\uc9c0\uace0 \ud655\ub960 \ubc00\ub3c4 \ud568\uc218\ub97c \ucd94\uc815\ud574\uc57c \ud568 -> Non-parametric\n\n**\u2461 non-parametric \ubc00\ub3c4\ucd94\uc815**\n   * Non-parametric \ubc00\ub3c4\ucd94\uc815\uc758 \uac00\uc7a5 \uac04\ub2e8\ud55c \ud615\ud0dc\uac00 \ubc14\ub85c \ud788\uc2a4\ud1a0\uadf8\ub7a8(histogram)  \n   * \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc740 bin\uc774 \ub098\ub220\uc838 \uc788\ub294 \ud615\ud0dc\ub85c \uc5f0\uc18d\uc801\uc774\uc9c0 \uc54a\uc74c  \n   \n> \ucee4\ub110\ud568\uc218* \ub97c \uc774\uc6a9\ud574 \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc758 \ubb38\uc81c\ub97c \uac1c\uc120\ud55c \ubc29\ubc95\uc774 \ucee4\ub110\ubc00\ub3c4\ucd94\uc815(KDE)  \n  (*\ucee4\ub110\ud568\uc218 : \uc6d0\uc810\uc744 \uc911\uc2ec\uc73c\ub85c \ub300\uce6d. \uc801\ubd84\uac12\uc774 1\uc778 non-negative(\ud56d\uc0c1 0>0) \ud568\uc218. \uac00\uc6b0\uc2dc\uc5b8(Gaussian), \uc815\uaddc(Uniform) \ubd84\ud3ec\ud615\ud0dc\ub97c \ub754.)","658bf205":"\uad50\uacfc\uc11c\uc801\uc778 \ubc29\ubc95\uc73c\ub85c\ub294 1\ubd84\uc704 \uac12\uacfc 3\ubd84\uc704 \uac12\uc758 \ucc28\uc774\ub97c IQR\ub85c \uc124\uc815\ud558\uace0,  \n1\ubd84\uc704\uac12\uacfc 3\ubd84\uc704\uac12\uc5d0\uc11c IQR\uac12\uc758 1.5\ubc30\uc218 \ub9cc\ud07c \ud070 \uac12\uacfc \uc791\uc740 \uac12\uc740 \uc774\uc0c1\uce58\ub85c \ud310\ub2e8 \ud569\ub2c8\ub2e4.  \n\uc704\uc758 BOX PLOT\uc5d0\uc11c \uc810\uc73c\ub85c \ud45c\ud604\ub41c \uac12\uc744 \uc81c\uac70\ud55c\ub2e4\uace0 \ubcf4\uba74 \ub429\ub2c8\ub2e4.","57a1426d":"\ub2e4\uc2dc \ud55c\ubc88, \uc774\uac83\uc740 \uad50\uacfc\uc11c\uc801\uc778 \ubc29\ubc95\uc774\uba70 \uc2e4\ubb34\uc5d0\uc11c\ub294 \uadf8\ub807\uac8c \uc81c\uac70\ud574\uc11c\ub294 \uc548\ub429\ub2c8\ub2e4.  \n\ub3c4\uba54\uc778 \uc9c0\uc2dd\uc5d0 \uae30\ubc18\ud558\uc5ec \uc774\uc0c1\uce58\ub97c \uac80\ud1a0\ud558\uace0 \uc81c\uac70 \ub610\ub294 \ub300\uccb4\ud574\uc57c \ud569\ub2c8\ub2e4.","828d8919":"### 2.3.5 sigungu","eff626a3":"> \uc804\ubd80 int \ub610\ub294 float \ud0c0\uc785\uc774\uace0, object type 3\uac1c\uac00 \ubcf4\uc774\ub294 \uad70\uc694.","e4ebaba3":"* \uc0c1\uad00\uad00\uacc4\ub294 \uc591\uc758 \uc0c1\uad00\uad00\uacc4\uc640 \uc74c\uc758 \uc0c1\uad00\uad00\uacc4\uac00 \uc788\uace0, \uc57d\ud55c \uc0c1\uad00\uad00\uacc4\uc640 \uac15\ud55c \uc0c1\uad00\uad00\uacc4\uac00 \uc788\uc2b5\ub2c8\ub2e4.\n* \uc74c\uc758 \uc0c1\uad00\uad00\uacc4\ub3c4 \uace0\ub824\ud574\uc57c\ud558\ubbc0\ub85c, \ud1b5\uc0c1 \uc0c1\uad00\uacc4\uc218\uc5d0 \uc808\ub300\uac12\uc744 \ucde8\ud574\uc11c 0.1(\uc790\uccb4 \ud310\ub2e8)\uc774\ud558 \ubcc0\uc218\ub97c \uc81c\uac70\ud569\ub2c8\ub2e4.","e315968b":"## 2.3 \ubcc0\uc218\ubcc4 \ub370\uc774\ud130 \ubd84\ud3ec \ud655\uc778","65f43ac3":"[\uc8fc\uc758\uc0ac\ud56d]\n1. \uc2a4\ucf00\uc77c\ub9c1\uc758 \uacbd\uc6b0\uc5d0\ub3c4 test \ub370\uc774\ud130\ub97c fit \ud574\uc11c\ub294 \uc548\ub428 > train \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c\ub9cc fit \uc774\ud6c4\uc5d0 train \uacfc test set\uc5d0 \ub300\ud574 transform  \n\uba38\uc2e0\ub7ec\ub2dd \ub525\ub7ec\ub2dd \ubaa8\ub378\uc774 \ud559\uc2b5\uc744 \ud558\ub294 \uacfc\uc815\uc5d0\uc11c \uc5b4\ub5a0\ud55c \ubc29\uc2dd\uc73c\ub85c\ub4e0 test set \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud558\uac8c \ub418\uc5b4\uc11c\ub294 \uc548\ub429\ub2c8\ub2e4.\n2. \uc77c\ubc18\uc801\uc73c\ub85c \ud0c0\uac9f\uac12(y) (\uc885\uc18d\ubcc0\uc218)\uc5d0 \ub300\ud55c \uc2a4\ucf00\uc77c\ub9c1\uc740 \uc9c4\ud589\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.  \nnormalization\uc740 \ud2b9\uc815 x \ubcc0\uc218\uac00 y \uc608\uce21\uc5d0 \ud070 \uc601\ud5a5\uc744 \ub07c\uce58\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\uac70\ub098, gradient descent\ub97c \uc774\uc6a9\ud558\ub294 \ud559\uc2b5\uc744 \uc880 \ub354 \ube60\ub974\uac8c \ud558\uae30 \uc704\ud574\uc11c\uc774\uae30 \ub54c\ubb38","719286e5":"# 4. \ubcc0\uc218\uc120\ud0dd\n\ubcc0\uc218\uc120\ud0dd\uc744 \uc704\ud574 \uac01 \ubcc0\uc218\uc758 \uc601\ud5a5\ub3c4\ub97c \uac80\ud1a0\ud574\uc57c \ud569\ub2c8\ub2e4.","9e6a2b48":"> 32\uac1c \ubcc0\uc218\uc5d0 \ub300\ud574 2,442\uac1c \ud589\uc774 \ubaa8\ub450 \uac00\ub4dd \ucc28 \uc788\uc2b5\ub2c8\ub2e4.","d1f98211":"![\ucee4\ub110\ubc00\ub3c4\ucd94\uccad](.\/kernel_2.png)","498d2cec":"# 1. \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","ff81b11f":"**y \ud0c0\uac9f \uac12 : \ud3c9\ub2f9 \ud3c9\uade0 \ub9e4\ub9e4\uac00\uaca9** \uc5d0 \ub300\ud55c \uc815\uc758\uac00 \ud544\uc694\n1. \uc2e4\uac70\ub798\uac00 \ub370\uc774\ud130 **\uac70\ub798start, end\uc2dc\uc810**\uc774 \uc5b8\uc81c\uc778\uc9c0 \uc54c\uc218 \uc5c6\uc74c : '21.1 ~ '21.6?, '20.1 ~ '20.12?\n2. \ub370\uc774\ud130 \uc218\uc9d1\uae30\uac04\uc774 **\uc5bc\ub9c8\ub9cc\ud07c\uc758 \uae30\uac04 duration**\uc778\uc9c0 \uc54c\uc218\uc5c6\uc74c : 6\uac1c\uc6d4?, 1\ub144?\n3. **\ud3c9\ub2f9** **\ud3c9\uade0** \uac00\uaca9\uc744 \uc0b0\uc815<br>\n1) \ud3c9\ub2f9\uc758 \uc758\ubbf8? <br> - \uac70\ub798\uae08\uc561\uc744 \uc804\uc6a9\uba74\uc801\uc73c\ub85c \ub098\ub20c\uac83\uc778\uc9c0? \uacf5\uae09\uba74\uc801\uc73c\ub85c \ub098\ub20c\uac83\uc778\uc9c0?<br>  \n2) \ud3c9\uade0\uc758 \uc758\ubbf8? <br>- \uac70\ub798\uac74\ubcc4 \uac70\ub798\uae08\uc561\/\uac70\ub798\uba74\uc801 \ubc95\uc815\ub3d9\ucf54\ub4dc10\uc790\ub9ac\uc5d0 \ud574\ub2f9\ud558\ub294 \ubaa8\ub4e0 \uac74\uc758 \ud3c9\uade0\uc778\uc9c0?<br>  - \uc544\ub2c8\uba74 \ud574\ub2f9\uae30\uac04\ub3d9\uc548 \uac01 \ub3d9\uc758 \uc804\uccb4 \uac70\ub798\uae08\uc561 \/ \uc804\uccb4 \uac70\ub798\uba74\uc801\uc758 \ud569\uc744 \uacc4\uc0b0\ud55c \ud3c9\uade0\uc778\uc9c0?  ","81a0f9e7":"## 3.2.2 \uc774\uc0c1\uce58 \uc81c\uac70","72914bca":"### 4.2.2 pair plot","0489f08e":"\n# <span style=\"color:royalblue\"> [\uc81c 2\ud68c] \ubd80\ub3d9\uc0b0 \ub370\uc774\ud130 \ubd84\uc11d \uacbd\uc9c4\ub300\ud68c : \uc2dc\ub3c4\ubcc4 \ud3c9\ub2f9 \uc544\ud30c\ud2b8 \uac00\uaca9\uc608\uce21 <\/span>\n---","eea6a8a8":"## 6-1.  \ud68c\uadc0\ubd84\uc11d Linear Regression","839be41e":"**\uc77c\ubc18\uc801\uc778 \uba38\uc2e0\ub7ec\ub2dd(ML), \ub525\ub7ec\ub2dd(DL) \ubb38\uc81c\ud574\uacb0 \ud504\ub85c\uc138\uc2a4**\n\n    1. \ub370\uc774\ud130 \ub85c\ub4dc\n    2. \ub370\uc774\ud130 \ud0d0\uc0c9\n    3. \uacb0\uce21\uce58 \ubc0f \uc774\uc0c1\uce58 \ud655\uc778 \ubc0f \uc81c\uac70\n    4. \ubcc0\uc218\uc120\ud0dd\n    5. \ub370\uc774\ud130 \uc815\uaddc\ud654\n    6. \ubaa8\ub378 \uc0dd\uc131 \ubc0f \ud559\uc2b5\n     6-1 Regression :LASSO, Ridge \ubaa8\ub378 \n     6-2. RandomForestRegressor\n    7. Grid Search\n    8. Cross Validation","476462b9":"### 2.3.1 \uc2dc\ub3c4\ubcc4 \ub370\uc774\ud130 \ubd84\ud3ec \ubc0f \ud3c9\uade0\uac00\uaca9","4eb98024":"#### 2) Box plot \uc0c1\uc790\uc218\uc5fc\uadf8\ub9bc","3a79c60d":"### 4.1.1 \ud53c\uc5b4\uc2a8 \uc0c1\uad00\uad00\uacc4 \ub9e4\ud2b8\ub9ad\uc2a4","37bbd85c":"# 0. \ub370\uc774\ud130 \ubcc0\uc218 \uc124\uba85","4da22a51":"## 4.1 \uc0c1\uad00\uacc4\uc218 \ubc0f \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d","155d55fd":"y = ax + b \uc5d0\uc11c \uacc4\uc218 \uac12\uc778 a\ub97c  coefficient, b\uac12\uc744 \uc808\ud3b8 inercept \uac12\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4.","1d72808e":"> \uacb0\uce21\uce58 \uc81c\uac70(Have to deal with Na values) : \uc815\uc81c\ub41c \ub370\uc774\ud130\ub97c \uac74\ub0b4\ubc1b\uc558\uc2b5\ub2c8\ub2e4.","c6b7d6e9":"### 2.3.2 \uc2dc\ub3c4\ubcc4 \ud3c9\uade0 \uc544\ud30c\ud2b8 \ub9e4\ub9e4\uac00\uaca9","0fd2b291":"[\uc6a9\uc5b4\uc815\ub9ac]  \n - \uc2a4\ucf00\uc77c\ub9c1(Scaling), \uc815\uaddc\ud654(Normalization), \ud45c\uc900\ud654(Standardization) \uc5ec\ub7ec \uc6a9\uc5b4 > \ubc88\uc5ed\uc774 \ub418\uba74\uc11c \ub354 \ud63c\ub780  \n - \uc601\uc5b4\uc5d0\uc11c \"scaling\" \ud06c\uae30\ub97c \ub9de\ucdb0\uc8fc\ub294 \uc791\uc5c5\uc73c\ub85c \uc774\ud574\ud558\uba74 \ub429\ub2c8\ub2e4.  \n - \ud2b9\ud788 \"\uc815\uaddc\ud654\" \ub77c\ub294 \uc6a9\uc5b4\ub294 \ud5a5\ud6c4 \ub525\ub7ec\ub2dd\uc5d0\uc11c BatchNormalization, Normalizer, Regularizer \ub4f1 \ub2e4\ub978 \uc6a9\ub3c4\ub85c\ub3c4 \uc0ac\uc6a9\ub418\ubbc0\ub85c \uc8fc\uc758","a5536c38":"## 2.1 \ub370\uc774\ud130 \uc0d8\ud50c, \uad6c\uc870, \ud0c0\uc785 \ud655\uc778","a2d4b18f":"## 1.1 \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30","43fa516c":"Resgression \ubaa8\ub378\uc5d0\ub294 \ud06c\uac8c LASSO\uc640 Ridge\uac00 \uc788\uc2b5\ub2c8\ub2e4.<br>\n\uc624\ucc28\ub97c \uacc4\uc0b0\ud558\ub294 \ubc29\uc2dd\uc5d0 \ub530\ub77c L1 Norm \uacfc L2 Norm \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.<br>\n\uc27d\uac8c L1 Norm\ub294 \uc608\uce21\ub41c y\uac12\uacfc \uc2e4\uc81c y\uac12\uc758 \ucc28\uc774\uc5d0 \uc808\ub300\uac12 \uac1c\ub150\uc774\uace0, L2 Norm \uc740 \uc624\ucc28\uc5d0 \uc81c\uacf1\uc744 \ud55c \uac12\uc785\ub2c8\ub2e4.","36fbfc91":"|high_school |special_school |academy |kindergarten |museum |pharmacy |doctor |motel |industry |commerce |starbucks |real_estate |subway |expressway |<span style=\"color:royalblue\"> price<\/span>|\n|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|\n|\uace0\ub4f1\ud559\uad50 \uc218| \ud2b9\ubaa9\uc911, \ud2b9\ubaa9\uace0 \uc218| \ud559\uc6d0 \uc218| \uc5b4\ub9b0\uc774\uc9d1 \uc218| \ubc15\ubb3c\uad00 \uc218| \uad6d \uc218| \uc758\uc0ac \uc218| \ubaa8\ud154 \uc218| \uc0b0\uc5c5\ub2e8\uc9c0 \uc218| \uc0c1\uac00 \uc218 (\uc74c\uc2dd, \uc5ec\uac00, \uc18c\ub9e4 \ub4f1)|\uc2a4\ud0c0\ubc85\uc2a4 \uc218| \ubd80\ub3d9\uc0b0 \uc218| \uc9c0\ud558\ucca0 \uc5ed \uc218| \uace0\uc18d\ub3c4\ub85c \ucd9c\uc785\ub85c(IC) \uc218 |<span style=\"color:royalblue\"> \ud3c9\ub2f9 \ud3c9\uade0 \ub9e4\ub9e4\uac00\uaca9 <\/span>","6da25372":"[KDE, \ucee4\ub110\ubc00\ub3c4\ucd94\uc815 \ube14\ub85c\uadf8](https:\/\/seongkyun.github.io\/study\/2019\/02\/03\/KDE\/)","7067ae33":"## 3.2 \uc774\uc0c1\uce58 \ud655\uc778 \ubc0f \uc81c\uac70","d9cfc48d":"## 3.1 \uacb0\uce21\uce58 \ud655\uc778","8ba92d6f":"### 3.2.1 \uc774\uc0c1\uce58 \ud655\uc778","8b4b7311":"# 3. \uacb0\uce21\uce58 \ubc0f \uc774\uc0c1\uce58 \ucc98\ub9ac","0375c9c8":"[\ubc29\ubc95]\n- train \/ test(valid) split \uba3c\uc800 \uc218\ud589\n- train\uc5d0 \ub300\ud574\uc11c scaling \ubc29\ubc95 \ud559\uc2b5\n- scaling\ud55c train \ub370\uc774\ud130\ub97c \uc774\uc6a9\ud558\uc5ec \ubaa8\ub378 \ud559\uc2b5\n- train \ub370\uc774\ud130\ub85c \ud559\uc2b5\ud55c scaling \ubc29\ubc95\uc744 \uc774\uc6a9\ud558\uc5ec test(valid) \ub370\uc774\ud130 scaling\n- scaling\ud55c test(valid) \ub370\uc774\ud130\ub97c \uc774\uc6a9\ud558\uc5ec \ubaa8\ub378 \ud559\uc2b5","a7d87f67":"**KDE : Kernel Density Estimation \ucee4\ub110 \ubc00\ub3c4 \ucd94\uc815**<br>\n- \ubc00\ub3c4 \ucd94\uc815\uc740 x\uc758 \ud655\ub960\ubc00\ub3c4\ud568\uc218(pdf, probability density function)\ub97c \ucd94\uc815\n- \ubc00\ub3c4\ucd94\uc815(density estimation) \ubc29\ubc95\uc740 \ud06c\uac8c \u2460parametric \ubc29\ubc95\uacfc \u2461non-parametric \ubc29\ubc95\uc73c\ub85c \uad6c\ubd84","a285c046":"<center><img src=\".\/IQR.png\" width = 550><\/center>","6ed0e505":"[\uc885\ub958]\n1. StandardScaler \uae30\ubcf8 \uc2a4\ucf00\uc77c. \ud3c9\uade00\uacfc \ud45c\uc900\ud3b8\ucc281 \uc0ac\uc6a9. \uc815\uaddc\ubd84\ud3ec\ub85c \ub9cc\ub4e4\uc5b4\uc90c. \ud68c\uadc0\ubcf4\ub2e4 \ubd84\ub958\uc5d0 \uc801\ud569\n2. MinMaxScaler \ucd5c\ub300\/\ucd5c\uc18c\uac12\uc774 \uac01\uac01 1, 0\uc774 \ub418\ub3c4\ub85d \uc2a4\ucf00\uc77c\ub9c1. \ubd84\ub958\ubcf4\ub2e4 \ud68c\uadc0\uc5d0 \uc801\ud569\n3. MaxAbsScaler \ucd5c\ub300 \uc808\ub300\uac12\uc774 0\uacfc 1 \uc0ac\uc774\uac00 \ub418\ub3c4\ub85d \uc2a4\ucf00\uc77c\ub9c1\n4. RobustScaler \uc911\uc559\uac12(median)\uc744 0, IQR(interquartile range)\uc744 1\uc774 \ub418\ub3c4\ub85d \uc2a4\ucf00\uc77c\ub9c1. \uc544\uc6c3\ub77c\uc774\uc5b4\uc758 \uc601\ud5a5\uc744 \ucd5c\uc18c\ud654\n> \uc5b4\ub5a4 \uc2a4\ucf00\uc77c\ub9c1\uc744 \uc120\ud0dd\ud560 \uac83\uc778\uc9c0 \ubb38\uc81c. \ub370\uc774\ud130 + \uc2a4\ucf00\uc77c\ub9c1 \uc885\ub958 + \ubaa8\ub378 \uad81\ud569\uc774 \uc911\uc694\ud568. [\ub370\uc774\ud130+\uc2a4\ucf00\uc77c\ub9c1+\ubaa8\ub378 \uad81\ud569](https:\/\/towardsdatascience.com\/normalization-vs-standardization-quantitative-analysis-a91e8a79cebf#:~:text=Normalization%20typically%20means%20rescales%20the,of%201%20(unit%20variance).)","a11d02e6":"### 2.3.3 address","73183b3f":"* \ub9e8 \uc544\ub798 price\ub97c \ubcf4\uba74, **tugi(\ud22c\uae30\uacfc\uc5f4\uc9c0\uad6c \uc5ec\ubd80)** \ucc98\ub7fc \uc0c9\uc774 \uc9d9\uc740 \ubcc0\uc218\uc77c\uc218\ub85d \uc0c1\uad00\uacc4\uc218\uac00 \ub192\uc2b5\ub2c8\ub2e4.<br>\n* \ubc18\uba74\uc5d0 \"elemen_school(\ucd08\ub4f1\ud559\uad50 \uc218)\"\ucc98\ub7fc \uc0c1\uad00\uad00\uacc4\uac00 0.1 \uc774\ud558\uc778 \ubcc0\uc218\ub4e4\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.<BR>","0641e894":"# 7. Grid Search\nBest Parameter\uc640 \ubaa8\ub378\uc744 \ucc3e\ub294 \ucf54\ub4dc\uc785\ub2c8\ub2e4.","efb0633d":"<div style=\"text-align: right\"> Final Edition : 2021.12.15<br>\n    copyright\u24d2 2021 All rights reserved by Data Lover Pablo <\/div>","5c5cf01c":"* $f(a)$\ub294 $x=a$\uc5d0\uc11c\uc758 \ud655\ub960\ubc00\ub3c4(probability density), \uc989 \ubcc0\uc218 x\uac00 a\ub77c\ub294 \uac12\uc744 \uac00\uc9c8 \ub54c\uc758 \uc0c1\ub300\uc801\uc778 \uac00\ub2a5\uc131(relative likelihood)\ub97c \ub098\ud0c0\ub0c4\n* \ubc00\ub3c4(density)\uc640 \ud655\ub960(probability)\ub97c \uad6c\ubd84\ud574 \ubcf4\uba74 \uc704 \uadf8\ub9bc\uc5d0\uc11c $x=a$\uc77c \ud655\ub960\uc740 0\uc774\uc9c0\ub9cc(\uc810), $x=a$\uc5d0\uc11c\uc758 \ubc00\ub3c4(density)\ub294 $f(a)$\ub85c 0\uc774 \uc544\ub2d8\n* x\uac00 a, b \uc0ac\uc774\uc758 \uac12\uc744 \uac00\uc9c8 \ud655\ub960(probability)\uc740 \uadf8 \uad6c\uac04\uc5d0\uc11c\uc758 \ud655\ub960\ubc00\ub3c4\ud568\uc218\uc758 \uc801\ubd84\uac12(\uba74\uc801)\uc73c\ub85c \uacc4\uc0b0\ub428\n* \uc989, \ubc00\ub3c4(density)\ub294 \ud655\ub960\ubc00\ub3c4\ud568\uc218\uc758 \ud568\uc218\uac12\uc774\uba70, \ubc00\ub3c4\ub97c \uc77c\uc815 \uad6c\uac04\uc5d0 \ub300\ud574 \uc801\ubd84\ud558\uba74 \ud655\ub960\uc774 \ub098\uc634","b625a4ae":"### 1) Lasso regression","c647f94d":"## 1.2 \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30"}}