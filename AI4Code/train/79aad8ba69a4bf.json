{"cell_type":{"c1050c59":"code","e89ec44f":"code","f138f21a":"code","3e4e6ecd":"code","a916b22a":"code","569bfa42":"code","304564ab":"code","6bba4e10":"code","d4760081":"code","f8980de2":"code","75710998":"code","dc3069f8":"code","d4290cbd":"code","b35da70e":"code","45024434":"code","4bd4c7f3":"code","ec9f8c3a":"code","261f844c":"code","2d342e0f":"code","1a3412ce":"code","9b397dfd":"code","ed3d815d":"code","f2a37f0b":"code","ce2daa21":"code","af35a200":"code","c7240aec":"code","f3f8a185":"code","9941222c":"code","7a9773c1":"code","db29f3de":"code","8c4dcbeb":"code","f8deb451":"code","4b3f9d75":"code","56770832":"code","3fb4fff6":"code","c0424315":"code","1f3b9cbb":"code","cbfa0469":"code","82efeb12":"markdown","49958707":"markdown","de8c57ce":"markdown","dcee92fe":"markdown","178ec694":"markdown","0800b14d":"markdown","0bccd649":"markdown","45cdacd6":"markdown","e6a7389e":"markdown","01d89717":"markdown"},"source":{"c1050c59":"!pip install mglearn","e89ec44f":"import matplotlib.pyplot as plt\nimport mglearn\n%matplotlib inline\nimport numpy as np","f138f21a":"from sklearn.svm import SVC\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\n\n# load and split the data\ncancer = load_breast_cancer()\nX_train, X_test, y_train, y_test = train_test_split(\n    cancer.data, cancer.target, random_state=0)\n\n# compute minimum and maximum on the training data\nscaler = MinMaxScaler().fit(X_train)","3e4e6ecd":"# rescale the training data\nX_train_scaled = scaler.transform(X_train)\n\nsvm = SVC()\n# learn an SVM on the scaled training data\nsvm.fit(X_train_scaled, y_train)\n# scale the test data and score the scaled data\nX_test_scaled = scaler.transform(X_test)\nprint(\"Test score: {:.2f}\".format(svm.score(X_test_scaled, y_test)))","a916b22a":"from sklearn.model_selection import GridSearchCV\n# for illustration purposes only, don't use this code!\nparam_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100],\n              'gamma': [0.001, 0.01, 0.1, 1, 10, 100]}\ngrid = GridSearchCV(SVC(), param_grid=param_grid, cv=5)\ngrid.fit(X_train_scaled, y_train)\nprint(\"Best cross-validation accuracy: {:.2f}\".format(grid.best_score_))\nprint(\"Best parameters: \", grid.best_params_)\nprint(\"Test set accuracy: {:.2f}\".format(grid.score(X_test_scaled, y_test)))","569bfa42":"mglearn.plots.plot_improper_processing()","304564ab":"from sklearn.pipeline import Pipeline\npipe = Pipeline([(\"scaler\", MinMaxScaler()), (\"svm\", SVC())])","6bba4e10":"pipe.fit(X_train, y_train)","d4760081":"print(\"Test score: {:.2f}\".format(pipe.score(X_test, y_test)))","f8980de2":"param_grid = {'svm__C': [0.001, 0.01, 0.1, 1, 10, 100],\n              'svm__gamma': [0.001, 0.01, 0.1, 1, 10, 100]}","75710998":"grid = GridSearchCV(pipe, param_grid=param_grid, cv=5)\ngrid.fit(X_train, y_train)\nprint(\"Best cross-validation accuracy: {:.2f}\".format(grid.best_score_))\nprint(\"Test set score: {:.2f}\".format(grid.score(X_test, y_test)))\nprint(\"Best parameters: {}\".format(grid.best_params_))","dc3069f8":"mglearn.plots.plot_proper_processing()","d4290cbd":"rnd = np.random.RandomState(seed=0)\nX = rnd.normal(size=(100, 10000))\ny = rnd.normal(size=(100,))","b35da70e":"from sklearn.feature_selection import SelectPercentile, f_regression\n\nselect = SelectPercentile(score_func=f_regression, percentile=5).fit(X, y)\nX_selected = select.transform(X)\nprint(\"X_selected.shape: {}\".format(X_selected.shape))","45024434":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import Ridge\nprint(\"Cross-validation accuracy (cv only on ridge): {:.2f}\".format(\n      np.mean(cross_val_score(Ridge(), X_selected, y, cv=5))))","4bd4c7f3":"pipe = Pipeline([(\"select\", SelectPercentile(score_func=f_regression,\n                                             percentile=5)),\n                 (\"ridge\", Ridge())])\nprint(\"Cross-validation accuracy (pipeline): {:.2f}\".format(\n      np.mean(cross_val_score(pipe, X, y, cv=5))))","ec9f8c3a":"def fit(self, X, y):\n    X_transformed = X\n    for name, estimator in self.steps[:-1]:\n        # iterate over all but the final step\n        # fit and transform the data\n        X_transformed = estimator.fit_transform(X_transformed, y)\n    # fit the last step\n    self.steps[-1][1].fit(X_transformed, y)\n    return self","261f844c":"def predict(self, X):\n    X_transformed = X\n    for step in self.steps[:-1]:\n        # iterate over all but the final step\n        # transform the data\n        X_transformed = step[1].transform(X_transformed)\n    # predict using the last step\n    return self.steps[-1][1].predict(X_transformed)","2d342e0f":"from sklearn.pipeline import make_pipeline\n# standard syntax\npipe_long = Pipeline([(\"scaler\", MinMaxScaler()), (\"svm\", SVC(C=100))])\n# abbreviated syntax\npipe_short = make_pipeline(MinMaxScaler(), SVC(C=100))","1a3412ce":"print(\"Pipeline steps:\\n{}\".format(pipe_short.steps))","9b397dfd":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\npipe = make_pipeline(StandardScaler(), PCA(n_components=2), StandardScaler())\nprint(\"Pipeline steps:\\n{}\".format(pipe.steps))","ed3d815d":"# fit the pipeline defined before to the cancer dataset\npipe.fit(cancer.data)\n# extract the first two principal components from the \"pca\" step\ncomponents = pipe.named_steps[\"pca\"].components_\nprint(\"components.shape: {}\".format(components.shape))","f2a37f0b":"from sklearn.linear_model import LogisticRegression\n\npipe = make_pipeline(StandardScaler(), LogisticRegression())","ce2daa21":"param_grid = {'logisticregression__C': [0.01, 0.1, 1, 10, 100]}","af35a200":"X_train, X_test, y_train, y_test = train_test_split(\n    cancer.data, cancer.target, random_state=4)\ngrid = GridSearchCV(pipe, param_grid, cv=5)\ngrid.fit(X_train, y_train)","c7240aec":"print(\"Best estimator:\\n{}\".format(grid.best_estimator_))","f3f8a185":"print(\"Logistic regression step:\\n{}\".format(\n      grid.best_estimator_.named_steps[\"logisticregression\"]))","9941222c":"print(\"Logistic regression coefficients:\\n{}\".format(\n      grid.best_estimator_.named_steps[\"logisticregression\"].coef_))","7a9773c1":"from sklearn.datasets import load_boston\nboston = load_boston()\nX_train, X_test, y_train, y_test = train_test_split(boston.data, boston.target,\n                                                    random_state=0)\n\nfrom sklearn.preprocessing import PolynomialFeatures\npipe = make_pipeline(\n    StandardScaler(),\n    PolynomialFeatures(),\n    Ridge())","db29f3de":"param_grid = {'polynomialfeatures__degree': [1, 2, 3],\n              'ridge__alpha': [0.001, 0.01, 0.1, 1, 10, 100]}","8c4dcbeb":"grid = GridSearchCV(pipe, param_grid=param_grid, cv=5, n_jobs=-1)\ngrid.fit(X_train, y_train)","f8deb451":"mglearn.tools.heatmap(grid.cv_results_['mean_test_score'].reshape(3, -1),\n                      xlabel=\"ridge__alpha\", ylabel=\"polynomialfeatures__degree\",\n                      xticklabels=param_grid['ridge__alpha'],\n                      yticklabels=param_grid['polynomialfeatures__degree'], vmin=0)","4b3f9d75":"print(\"Best parameters: {}\".format(grid.best_params_))","56770832":"print(\"Test-set score: {:.2f}\".format(grid.score(X_test, y_test)))","3fb4fff6":"param_grid = {'ridge__alpha': [0.001, 0.01, 0.1, 1, 10, 100]}\npipe = make_pipeline(StandardScaler(), Ridge())\ngrid = GridSearchCV(pipe, param_grid, cv=5)\ngrid.fit(X_train, y_train)\nprint(\"Score without poly features: {:.2f}\".format(grid.score(X_test, y_test)))","c0424315":"pipe = Pipeline([('preprocessing', StandardScaler()), ('classifier', SVC())])","1f3b9cbb":"from sklearn.ensemble import RandomForestClassifier\n\nparam_grid = [\n    {'classifier': [SVC()], 'preprocessing': [StandardScaler(), None],\n     'classifier__gamma': [0.001, 0.01, 0.1, 1, 10, 100],\n     'classifier__C': [0.001, 0.01, 0.1, 1, 10, 100]},\n    {'classifier': [RandomForestClassifier(n_estimators=100)],\n     'preprocessing': [None], 'classifier__max_features': [1, 2, 3]}]","cbfa0469":"X_train, X_test, y_train, y_test = train_test_split(\n    cancer.data, cancer.target, random_state=0)\n\ngrid = GridSearchCV(pipe, param_grid, cv=5)\ngrid.fit(X_train, y_train)\n\nprint(\"Best params:\\n{}\\n\".format(grid.best_params_))\nprint(\"Best cross-validation score: {:.2f}\".format(grid.best_score_))\nprint(\"Test-set score: {:.2f}\".format(grid.score(X_test, y_test)))","82efeb12":"#### Accessing Attributes in a Pipeline inside GridSearchCV","49958707":"#### Accessing step attributes","de8c57ce":"### The General Pipeline Interface","dcee92fe":"### Building Pipelines","178ec694":"### Convenient Pipeline creation with ``make_pipeline``","0800b14d":"### Parameter Selection with Preprocessing ","0bccd649":"### Using Pipelines in Grid-searches","45cdacd6":"## Algorithm Chains and Pipelines","e6a7389e":"### Grid-searching preprocessing steps and model parameters","01d89717":"![pipeline_illustration](images\/pipeline.png)"}}