{"cell_type":{"d3bd5dfe":"code","f5023854":"code","ae386453":"code","339a9030":"code","3954ebcc":"code","a3719722":"code","8023b358":"code","0a5192c0":"code","6812096b":"code","df22c32b":"code","ae98bb0d":"code","6b1c5a54":"code","8807c0f7":"code","e4d0388b":"code","f00adc66":"code","b2594ab5":"code","a3f251c1":"markdown","9fcc2158":"markdown","3f81d31d":"markdown","8d5f2a27":"markdown","c47293f4":"markdown","a36e6b61":"markdown","eb6f75cf":"markdown","5279e4c5":"markdown","fa2e72fa":"markdown","55a31f8d":"markdown","79dc1b2d":"markdown","fffbbe56":"markdown","5ffebc66":"markdown","18c42579":"markdown"},"source":{"d3bd5dfe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly.graph_objs as go\nplt.style.use('bmh')\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\ninit_notebook_mode(connected=True)\nfrom collections import Counter\nimport seaborn as sns\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nfrom plotly.colors import n_colors\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve\n\nsns.set(style='white', context='notebook', palette='deep')\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f5023854":"data = pd.read_csv(\"..\/input\/did-it-rain-in-seattle-19482017\/seattleWeather_1948-2017.csv\")","ae386453":"data.head()","339a9030":"data['RAIN'].value_counts()","3954ebcc":"data['RAIN'] = data['RAIN'].map(lambda i: 1 if i==True else 0)\ndata['RAIN'].value_counts()","a3719722":"data_plot = data[['PRCP', 'TMAX', 'TMIN', 'RAIN']]\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure(figsize=(25, 12))\nax = fig.add_subplot(111, projection = '3d')\nax.set_xlabel ('TMAX')\nax.set_ylabel('TMIN')\nax.set_zlabel('PRCP')\nax.scatter(data_plot[data_plot.RAIN == 0]['TMAX'],\n          data_plot[data_plot.RAIN == 0]['TMIN'],\n          data_plot[data_plot.RAIN == 0]['PRCP'], marker = \"o\", color = 'Green', label = '\u0414\u043d\u0438 \u0431\u0435\u0437 \u0434\u043e\u0436\u0434\u044f')\nax.scatter(data_plot[data_plot.RAIN == 1]['TMAX'],\n          data_plot[data_plot.RAIN == 1]['TMIN'],\n          data_plot[data_plot.RAIN == 1]['PRCP'], marker = \"o\", color = 'Blue', label = '\u0414\u043e\u0436\u0434\u043b\u0438\u0432\u044b\u0435 \u0434\u043d\u0438');\nax.legend()\n","8023b358":"trace0 = go.Scatter3d(\n    x = data_plot[data_plot.RAIN == 1]['TMAX'],\n    y = data_plot[data_plot.RAIN == 1]['TMIN'],\n    z = data_plot[data_plot.RAIN == 1]['PRCP'],\n    mode = 'markers',\n    name = '\u0414\u043e\u0436\u0434\u044c = \u0414\u0430',\n    marker = dict(\n        size = 2,\n        line = dict(\n            color = 'blue',\n            width = 2\n        ),\n    )\n)\ntrace1 = go.Scatter3d(\n    x = data_plot[data_plot.RAIN == 0]['TMAX'],\n    y = data_plot[data_plot.RAIN == 0]['TMIN'],\n    z = data_plot[data_plot.RAIN == 0]['PRCP'],\n    mode = 'markers',\n    name = '\u0414\u043e\u0436\u0434\u044c = \u041d\u0435\u0442',\n    marker = dict(\n        size = 2,\n        line = dict(\n            color = 'green',\n            width = 2\n        ),\n    )\n)\ndata = [trace0, trace1]\nlayout = go.Layout(\n        xaxis = dict(title = 'year'),\n        yaxis = dict(title = 'Median listing'),\n        title = ('\u0414\u043e\u0436\u0434\u044c \u0432 \u0421\u0438\u044d\u0442\u0442\u043b\u0435'))\nfig = go.Figure(data=data, layout = layout)\niplot(fig)","0a5192c0":"g = sns.heatmap(data_plot[['PRCP', 'TMAX', 'TMIN', 'RAIN']].corr(),annot = True, fmt = \".2f\", cmap = \"coolwarm\")","6812096b":"data = data.dropna()\nprint(data)","df22c32b":"rnd_clf = RandomForestClassifier(n_estimators = 100 , criterion = 'entropy',random_state = 0)\nrnd_clf.fit(data.iloc[:,1:4],data.iloc[:,4]) \nfor name, importance in zip(data.iloc[:,1:4].columns, rnd_clf.feature_importances_):\n    print(name, \"=\", importance)\n\ng = sns.barplot(y=data.iloc[:,1:4].columns,x = rnd_clf.feature_importances_, orient='h')","ae98bb0d":"rnd_reg = RandomForestRegressor(n_estimators = 100 , random_state = 0)\nrnd_reg.fit(data.iloc[:,[1,3,4]],data.iloc[:,2])\nfor name, importance in zip(data.iloc[:,[1,3,4]].columns, rnd_reg.feature_importances_):\n    print(name, \"=\", importance)\n\ng = sns.barplot(y=data.iloc[:,[1,3,4]].columns,x = rnd_reg.feature_importances_, orient='h')","6b1c5a54":"rnd_reg = RandomForestRegressor(n_estimators = 100, random_state = 0)\nrnd_reg.fit(data.iloc[:,[1,2,4]], data.iloc[:,3])\nfor name, importance in zip(data.iloc[:,[1,2,4]].columns,rnd_reg.feature_importances_):\n    print(name, \"=\", importance)\n    \ng = sns.barplot(y = data.iloc[:,[1,2,4]].columns, x = rnd_reg.feature_importances_, orient = 'h')","8807c0f7":"x = data.iloc[:,[1,2,3]].values\ny = data.iloc[:,4].values\n\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split (x, y, test_size = 0.25, random_state = 0)\n\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)\n\nclassifier = RandomForestClassifier(n_estimators = 100, criterion = 'entropy', random_state = 0)\nclassifier.fit(x_train, y_train)\n\ny_pred = classifier.predict(x_test)\n\n#\u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043e\u043a\n\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\nlabels = [1,0]\nfig = plt.figure()\nax = fig.add_subplot(111)\ncax = ax.matshow(cm)\nplt.title ('\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043e\u043a')\nfig.colorbar(cax)\nax.set_xticklabels([''] + labels)\nax.set_yticklabels([''] + labels)\nplt.xlabel('\u041f\u0440\u043e\u0433\u043d\u043e\u0437')\nplt.show()","e4d0388b":"x = data.iloc[:, [1,3,4]]\ny = data.iloc[:, 2]\n\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)\n\nfrom sklearn.ensemble import RandomForestRegressor\nRF_regressor = RandomForestRegressor (n_estimators = 100, random_state = 0)\nRF_regressor.fit(x_train, y_train)\ny_pred = RF_regressor.predict(x_test)\n\nfig = plt.figure(figsize=(10, 12))\nplt.scatter(x_test['TMIN'], y_test, color = 'orange')\nplt.scatter(x_test['TMIN'],RF_regressor.predict(x_test), color='green')\nplt.title('\u041c\u043e\u0434\u0435\u043b\u044c \u043f\u043e \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u044b')\nplt.xlabel('\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0430')\nplt.ylabel('\u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u044b \u0437\u0435\u043b\u0451\u043d\u044b\u0439')","f00adc66":"x = data.iloc[:, [1,2,4]]\ny = data.iloc[:, 3]\n\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)\n\nfrom sklearn.ensemble import RandomForestRegressor\nRF_regressor = RandomForestRegressor (n_estimators = 100, random_state = 0)\nRF_regressor.fit(x_train, y_train)\ny_pred = RF_regressor.predict(x_test)\n\nfig = plt.figure(figsize=(10, 12))\nplt.scatter(x_test['TMAX'], y_test, color = 'orange')\nplt.scatter(x_test['TMAX'],RF_regressor.predict(x_test), color='green')\nplt.title('\u041c\u043e\u0434\u0435\u043b\u044c \u043f\u043e \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u044b')\nplt.xlabel('\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0430')\nplt.ylabel('\u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u044b \u0437\u0435\u043b\u0451\u043d\u044b\u0439')","b2594ab5":"x = data.iloc[:, [2,3,4]]\ny = data.iloc[:, 1]\n\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)\n\nfrom sklearn.ensemble import RandomForestRegressor\nRF_regressor = RandomForestRegressor (n_estimators = 100, random_state = 0)\nRF_regressor.fit(x_train, y_train)\ny_pred = RF_regressor.predict(x_test)\n\nfig = plt.figure(figsize=(10, 12))\nplt.scatter(x_test['TMAX'], y_test, color = 'orange')\nplt.scatter(x_test['TMAX'],RF_regressor.predict(x_test), color='green')\nplt.title('\u041c\u043e\u0434\u0435\u043b\u044c \u043f\u043e \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043e\u0441\u0430\u0434\u043a\u043e\u0432 \u0432 \u0434\u044e\u0439\u043c\u0430\u0445')\nplt.xlabel('\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0430')\nplt.ylabel('\u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u043e\u0441\u0430\u0434\u043a\u043e\u0432 \u0432 \u0434\u044e\u0439\u043c\u0430\u0445 \u0437\u0435\u043b\u0451\u043d\u044b\u0439')","a3f251c1":"**\u0417\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438**","9fcc2158":"**2 - \u041c\u043e\u0434\u0435\u043b\u044c \u043f\u043e \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u044b**","3f81d31d":"**\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c 3D \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445**","8d5f2a27":"**\u0418\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f 3D \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f**","c47293f4":"**\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (Feature Importance) \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u044b**","a36e6b61":"**3 - \u041c\u043e\u0434\u0435\u043b\u044c \u043f\u043e \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u044b**","eb6f75cf":"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0441\u0430\u0434\u043a\u043e\u0432 \u0432 \u0434\u044e\u0439\u043c\u0430\u0445 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0432\u0430\u0436\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043f\u0440\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u0434\u043e\u0436\u0434\u044f \u0432 \u0421\u0438\u044d\u0442\u043b\u0435.","5279e4c5":"\u041d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0433\u043e\u0434\u0443 \u0432 \u0421\u0438\u044d\u0442\u0442\u043b\u0435. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 'Rain'.","fa2e72fa":"\u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442.","55a31f8d":"**\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u043c\u0435\u0436\u0434\u0443 \u0434\u0430\u043d\u043d\u044b\u043c\u0438**","79dc1b2d":"**1 - \u041c\u043e\u0434\u0435\u043b\u044c \u043f\u043e \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u0434\u043e\u0436\u0434\u044f**","fffbbe56":"**\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (Feature Importance) \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u044b**","5ffebc66":"\u0422\u043e\u043b\u044c\u043a\u043e PRCP (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0441\u0430\u0434\u043a\u043e\u0432 \u0432 \u0434\u044e\u0439\u043c\u0430\u0445) \u0438\u043c\u043c\u0435\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0441 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438.","18c42579":"**\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (Feature Importance) \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043e\u0436\u0434\u044f**"}}