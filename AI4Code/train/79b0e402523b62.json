{"cell_type":{"a57da610":"code","7b6630f4":"code","954960c6":"code","d11a3c3b":"code","b4e2b8d4":"code","a3fc7278":"code","0bfec6fe":"code","bf51fb1e":"code","0d77cdb4":"code","25b06d0a":"code","4d13fc5b":"code","dc231422":"code","f0b4f0dc":"code","8b25a1f6":"code","95c0a890":"code","d478fd7d":"code","70c98349":"code","817f7042":"code","cb4aa33a":"code","b7a8d559":"code","90051826":"markdown","d1f7f3ba":"markdown","4c7d78ac":"markdown","fee4c881":"markdown","86ecdf59":"markdown","a01ae004":"markdown","eb4c95c6":"markdown","0da7899d":"markdown"},"source":{"a57da610":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/\"))\n\n# Any results you write to the current directory are saved as output.","7b6630f4":"transactions    = pd.read_csv('..\/input\/sales_train.csv.gz')\nitems           = pd.read_csv('..\/input\/items.csv')\nitem_categories = pd.read_csv('..\/input\/item_categories.csv')\nshops           = pd.read_csv('..\/input\/shops.csv')","954960c6":"print(\"transactions:\")\nprint(transactions.shape)\ntransactions.head()","d11a3c3b":"print(\"items:\")\nprint(items.shape)\nitems.head()","b4e2b8d4":"print(\"item_categories:\")\nprint(item_categories.shape)\nitem_categories.head()","a3fc7278":"print(\"shops:\")\nprint(shops.shape)\nshops.head()","0bfec6fe":"transactions.dtypes","bf51fb1e":"transactions[\"date\"] = pd.to_datetime(transactions.date, format=\"%d.%m.%Y\")","0d77cdb4":"transactions.dtypes","25b06d0a":"date_range = pd.date_range(start=\"2014-09-01\",end=\"2014-09-30\")\nsep_transactions = transactions[transactions['date'].isin(date_range)]\nsep_transactions.head()\n\n# or\n# sep_transactions = transactions[transactions['date'].dt.year==2014]\n# sep_transactions = sep_transactions[sep_transactions['date'].dt.month==9 ]\n# sep_transactions.head()","4d13fc5b":"# get the data that item_cnt_day>0\n# sep_transactions =  sep_transactions[sep_transactions['item_cnt_day']>=0]\n# create a new column to save the value that item_price multiply item_cnt_day\nsep_transactions['sale'] = sep_transactions.item_price*sep_transactions.item_cnt_day\n# group by shop_id\neach_shop_sales = sep_transactions['sale'].groupby(sep_transactions['shop_id']).sum()\n# get the max value\nprint(\"shop_id:\"+str(each_shop_sales.idxmax()) )\nprint(\"value:\"+str(each_shop_sales.max()) )","dc231422":"# the summer is from June 21 to September 23 each year\ndate_range = pd.date_range(start=\"2014-06-21\",end=\"2014-09-23\")\nsummer_data = transactions[transactions['date'].isin(date_range)]\nsummer_data.head()","f0b4f0dc":"# merge the summer_data dataframe and items dataframe to create a new column called item_category_id\nnew_summer_data =pd.merge(summer_data,items,how=\"inner\",on=\"item_id\")\nnew_summer_data.head()","8b25a1f6":"# get the data that item_cnt_day>0\n# new_summer_data =  new_summer_data[new_summer_data['item_cnt_day']>0]\n\n# create a new column to save the value that item_price multiply item_cnt_day\nnew_summer_data['sale'] = new_summer_data.item_price*new_summer_data.item_cnt_day\n# group by shop_id\neach_category_sale = new_summer_data['sale'].groupby(new_summer_data['item_category_id']).sum()\n# get the max value\nprint(\"item_category_id:\"+str(each_category_sale.idxmax()) )\nprint(\"value:\"+str(each_category_sale.max()) )","95c0a890":"groups = transactions['item_price'].groupby(transactions['item_id'])","d478fd7d":"# groups.describe()\nitem_ids=[]\nfor item_id,group in groups:\n    if len(group.unique())==1:\n        item_ids.append(item_id)\n# print(item_ids)\nprint(len(item_ids))","70c98349":"date_range = pd.date_range(start=\"2014-12-01\",end=\"2014-12-31\")\nshop_25 = transactions[transactions['shop_id']==25]\nshop_25 = shop_25[shop_25['date'].isin(date_range)]\n# i think the row that item_cnt_day < 0 are outlier,so we can remove this data before we \n# shop_25 = shop_25[shop_25['item_cnt_day']>=0]","817f7042":"groups = shop_25['item_cnt_day'].groupby(shop_25['date'])","cb4aa33a":"names=[]\nnums = []\nfor name,group in groups:\n    names.append(name)\n    nums.append(group.sum())\nprint(nums)","b7a8d559":"pd.Series(groups.sum()).var()\n# pd.Series(nums).var()","90051826":"**Question 2:What item category generated the highest revenue in summer 2014?**","d1f7f3ba":"# Attention!\n\nThere is no item_cnt_day in December 29,i think the correct answer for Question4 should consider it.\nunfortunately\uff0cif i consider it,the answer is wrong,but still i think we should consider it!!","4c7d78ac":"**Quesion4: What was the variance of the number of sold items per day sequence for the shop with shop_id = 25 in December, 2014?**","fee4c881":"**Question 3:How many items are there, such that their price stays constant (to the best of our knowledge) during the whole period of time?****","86ecdf59":"At first,convert object type to datetime type","a01ae004":"**Question 1: What was the maximum total revenue among all the shops in September, 2014?** ","eb4c95c6":"# Reference Links:\nGroup By Example:<br>\n1.https:\/\/pandas.pydata.org\/pandas-docs\/stable\/api.html#groupby<br>\n2.https:\/\/chrisalbon.com\/python\/data_wrangling\/pandas_apply_operations_to_groups\/<br>\n3.https:\/\/www.cnblogs.com\/huiyang865\/p\/5577772.html <br>","0da7899d":"Secondly, Find every data in September"}}