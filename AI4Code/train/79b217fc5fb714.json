{"cell_type":{"b0b4ae83":"code","dbef182d":"code","e1b719c5":"code","678d8bec":"code","aba4fd5e":"code","a5b3a49a":"code","2182f6ef":"code","6faa3386":"code","0dfa40ae":"code","0b97defd":"code","81b407f9":"code","d01aeea5":"code","eb5a6ec3":"code","474d536d":"markdown","1e51d5d4":"markdown","b50a8603":"markdown"},"source":{"b0b4ae83":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","dbef182d":"data = pd.read_csv(r'\/kaggle\/input\/temperature\/Dailytemperaturedata.csv')\ndata.columns = ['Date','Temperature(Min)']\ndata['Date'] = pd.to_datetime(data['Date'], format='%d\/%m\/%Y')\ndata = data.set_index('Date')\ndata.head()","e1b719c5":"data.plot(figsize=(20, 5))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Temperature of Region')\nplt.show(block=False)\n","678d8bec":"train_len = 511\ntrain = data[0:train_len] \ntest = data[train_len:] ","aba4fd5e":"from statsmodels.tsa.holtwinters import SimpleExpSmoothing\nmodel = SimpleExpSmoothing(train['Temperature(Min)'])\nmodel_fit = model.fit(smoothing_level=0.2,optimized=False)\nmodel_fit.params\ny_hat_ses = test.copy()\ny_hat_ses['ses_forecast'] = model_fit.forecast(len(test))","a5b3a49a":"plt.figure(figsize=(25,7))\nplt.grid()\nplt.plot(train['Temperature(Min)'], label='Train')\nplt.plot(test['Temperature(Min)'], label='Test')\nplt.plot(y_hat_ses['ses_forecast'], label='Simple exponential smoothing forecast')\nplt.legend(loc='best')\nplt.title('Simple Exponential Smoothing Method')\nplt.show()","2182f6ef":"from sklearn.metrics import mean_squared_error\nrmse = np.sqrt(mean_squared_error(test['Temperature(Min)'], y_hat_ses['ses_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Temperature(Min)']-y_hat_ses['ses_forecast'])\/test['Temperature(Min)'])*100,2)\n\nresults = pd.DataFrame({'Method':['Simple exponential smoothing forecast'], 'RMSE': [rmse],'MAPE': [mape] })\nresults","6faa3386":"from statsmodels.tsa.holtwinters import ExponentialSmoothing\nmodel = ExponentialSmoothing(np.asarray(train['Temperature(Min)']),trend='additive', seasonal=None)\nmodel_fit = model.fit(smoothing_level=0.5, smoothing_slope=0.01, optimized=False)\nprint(model_fit.params)\ny_hat_holt = test.copy()\ny_hat_holt['holt_forecast'] = model_fit.forecast(len(test))","0dfa40ae":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot( train['Temperature(Min)'], label='Train')\nplt.plot(test['Temperature(Min)'], label='Test')\nplt.plot(y_hat_holt['holt_forecast'], label='Holt\\'s exponential smoothing forecast')\nplt.legend(loc='best')\nplt.title('Holt\\'s Exponential Smoothing Method')\nplt.show()","0b97defd":"rmse = np.sqrt(mean_squared_error(test['Temperature(Min)'], y_hat_holt['holt_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Temperature(Min)']-y_hat_holt['holt_forecast'])\/test['Temperature(Min)'])*100,2)\n\nresults = pd.DataFrame({'Method':['Holt\\'s exponential smoothing method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","81b407f9":"from statsmodels.tsa.holtwinters import ExponentialSmoothing\nmodel = ExponentialSmoothing(np.asarray(train['Temperature(Min)']),seasonal_periods=30,trend='additive', seasonal=None)\nmodel_fit = model.fit(smoothing_level=0.5, smoothing_slope=0.01, optimized=False)\nprint(model_fit.params)\ny_hat_holt = test.copy()\ny_hat_holt['holt_forecast'] = model_fit.forecast(len(test))","d01aeea5":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot( train['Temperature(Min)'], label='Train')\nplt.plot(test['Temperature(Min)'], label='Test')\nplt.plot(y_hat_holt['holt_forecast'], label='Holt\\'s exponential smoothing method-Seasonal Periods as 30 ')\nplt.legend(loc='best')\nplt.title('Holt\\'s exponential smoothing method-Seasonal Periods as 30')\nplt.show()","eb5a6ec3":"rmse = np.sqrt(mean_squared_error(test['Temperature(Min)'], y_hat_holt['holt_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Temperature(Min)']-y_hat_holt['holt_forecast'])\/test['Temperature(Min)'])*100,2)\n\nresults = pd.DataFrame({'Method':['Holt\\'s exponential smoothing method-Seasonal Periods as 30 '], 'RMSE': [rmse],'MAPE': [mape] })\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","474d536d":"# Holt's method ","1e51d5d4":"# Simple Exponential Smoothing Forecast","b50a8603":"We can conclude that Holt Winters' additive method work best with parameter as \n- smoothing_level=0.5\n- smoothing_slope=0.01"}}