{"cell_type":{"733bdbda":"code","c3757e1c":"code","e468f0c1":"code","1af86105":"code","c8dab8e2":"code","aa12d059":"code","287db33a":"code","7b9fa197":"code","f458f459":"code","0c5e736c":"code","ef3fc36b":"code","29adeb8a":"code","6976bd6f":"code","e8f4f7c0":"code","52e28b89":"code","7779e102":"code","6f0678b2":"code","63a29cb4":"code","5f77af53":"code","8969eed3":"code","196cf3bd":"code","31b6b09a":"code","444a6986":"code","3dcc0dc2":"code","f0fe50f1":"code","c283861d":"code","5e6defaa":"code","23098414":"code","ce4ba9a4":"code","3b2811f9":"code","92ceafb8":"code","538cee2e":"code","cb728b34":"code","45edd08f":"code","78966ca6":"code","d5d0d5e2":"code","63641288":"code","26ecf9d8":"code","7730eb69":"code","52a2ed84":"code","d0fdeb96":"code","80652877":"code","ce4abc5a":"code","a1108738":"code","9c99d77e":"code","93b45418":"code","d4587e3d":"code","3d65d1b0":"code","ccff6de2":"code","414f49b5":"code","ab4ebce0":"code","48bcc088":"code","bc78901f":"code","23d9778b":"code","1a867d5b":"code","9fb68e9e":"code","27460920":"code","51b69663":"code","7cac92e4":"code","01596ae3":"code","0bf539d2":"code","09b6855d":"code","fb7cc1d1":"code","3094380a":"code","0d3f70b9":"markdown","4c40199b":"markdown","b4312282":"markdown","dea4be19":"markdown","52b51700":"markdown","c4d0dbe7":"markdown","df7ee11f":"markdown","3707fe86":"markdown","da079fc9":"markdown","98e34cf7":"markdown","9288337e":"markdown","63137162":"markdown","4091d4d0":"markdown","d9c5ad4c":"markdown","f1f6e131":"markdown","24855285":"markdown","23677dd2":"markdown","243aa796":"markdown","1e6dae95":"markdown","e4367f46":"markdown","0bb4509a":"markdown","2bf5770d":"markdown","11113700":"markdown","68c6ea72":"markdown","3f50fa62":"markdown","ae50e19e":"markdown","6cdc88dc":"markdown","2bfb161a":"markdown","cfcb0058":"markdown","35b2de13":"markdown","9c0b7940":"markdown","1af2ddf8":"markdown","a7867628":"markdown","c4b9723f":"markdown","ab39a227":"markdown","3200157e":"markdown","087cba6f":"markdown","c68dd69e":"markdown","c2d15a54":"markdown","ca1871eb":"markdown","2c815831":"markdown","7e3394ca":"markdown","38e566d7":"markdown","9e4fa50f":"markdown","c688bedb":"markdown","b1fd52bc":"markdown","ea5d8d94":"markdown","b85293d4":"markdown","c7388609":"markdown","7216ca87":"markdown","c20f1014":"markdown","9d2d5cf2":"markdown","bc1ec61b":"markdown","3cd9797f":"markdown","5a5fdb43":"markdown","5632f12a":"markdown","21741fce":"markdown","f92c9817":"markdown","36ce090e":"markdown","b627dd10":"markdown","591f21b2":"markdown","cddac86e":"markdown","bf277997":"markdown","31a4c80b":"markdown","c583ffd6":"markdown","fb75db45":"markdown","6f0e801d":"markdown"},"source":{"733bdbda":"# Import Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nimport random\nimport math\nimport matplotlib\nfrom termcolor import colored\nimport os\nfrom os import listdir\nfrom os.path import join, getsize\nimport glob\nimport cv2\n\n#plotly\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import iplot\nimport cufflinks\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')\n\n# \nfrom skimage import measure\nfrom skimage.morphology import disk, opening, closing\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation,Dropout\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.layers import Dropout\n\n\n# Magic function to display In-Notebook display\n%matplotlib inline\n\n# Setting seabon style\nsns.set(style='darkgrid', palette='Set2')\n\n# Suppress warnings \nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Settings for pretty nice plots\nplt.style.use('fivethirtyeight')\nplt.show()\n\n# pydicom\nimport pydicom\n\n# Print versions of libraries\nprint(f\"Numpy version : Numpy {np.__version__}\")\nprint(f\"Pandas version : Pandas {pd.__version__}\")\nprint(f\"Matplotlib version : Matplotlib {matplotlib.__version__}\")\nprint(f\"Seaborn version : Seaborn {sns.__version__}\")\nprint(f\"Tensorflow version : Tensorflow {tf.__version__}\")","c3757e1c":"def seed_everything(seed=100):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n    \nseed_everything(101)","e468f0c1":"# List files available\nbase_dir = \"..\/input\/osic-pulmonary-fibrosis-progression\/\"","1af86105":"# List files available\nlist(os.listdir(\"..\/input\/osic-pulmonary-fibrosis-progression\"))","c8dab8e2":"# Train & Test set shape\ntrain_df = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/train.csv', encoding = 'latin-1')\ntest_df = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/test.csv', encoding = 'latin-1')\nsubmission_df = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/sample_submission.csv', encoding = 'latin-1')\n\nprint(colored('Training data set shape.......... : ','yellow'),train_df.shape)\nprint(colored('Test data set shape...............: ','red'),test_df.shape)\nprint(colored('Submission data set shape.........: ','blue'),submission_df.shape)","aa12d059":"# print top 5 rows of train set\ntrain_df.head()","287db33a":"# print top 5 rows of test set\ntest_df.head()","7b9fa197":"# Null values and Data types\nprint(colored('Train Set !!', 'yellow'))\nprint(colored('------------', 'yellow'))\nprint(train_df.info())\n\nprint('\\n')\n\nprint(colored('Test Set !!','red'))\nprint(colored('-----------','red'))\nprint(test_df.info())","f458f459":"# Null values and Data types\nprint(colored('Train Set !!', 'yellow'))\nprint(train_df.describe())","0c5e736c":"# Total missing values for each feature\nprint(colored('Missing values in Train Set !!', 'yellow'))\nprint(train_df.isnull().sum())\n\nprint(\"\\n\")\n\nprint(colored('Missing values in Test Set !!', 'red'))\nprint(test_df.isnull().sum())","ef3fc36b":"train_df.groupby( ['Sex','SmokingStatus'] )['FVC'].agg( ['mean','std','count'] ).sort_values(by=['Sex','count'],ascending=False)","29adeb8a":"# Total number of Patient in the dataset(train+test)\n\nprint(colored(\"Total Patients in Train set... : \", 'yellow'),train_df['Patient'].count())\nprint(colored(\"Total Patients in Test set.... : \", 'red'),test_df['Patient'].count())\nprint(\"\\n\")\nprint(colored(\"Unique Patients in Train set...: \", 'yellow'),train_df['Patient'].nunique())\nprint(colored(\"Unique Patients in Test set....: \", 'red'),test_df['Patient'].nunique())","6976bd6f":"print(colored(\"Few most repeated Patients in Train set: \", 'yellow'))\nprint(train_df['Patient'].value_counts().head())\n\nprint(\"\\n\")\n\nprint(colored(\"Few most repeated Patients in Test set: \", 'red'))\nprint(test_df['Patient'].value_counts().head())","e8f4f7c0":"train_df_unique = train_df[['Patient', 'Age', 'Sex', 'SmokingStatus']].drop_duplicates().reset_index()\nprint(colored(\"Shape of unique patient data set : \",'yellow'),train_df_unique.shape)\ntrain_df_unique.head()","52e28b89":"patient_feq = train_df.groupby(['Patient'])['Patient'].count()\npatient_feq = pd.DataFrame({'Patient':patient_feq.index, 'Frequency':patient_feq.values})\n\n# Merge two dataframes based on patient's ids.\ntrain_df_unique = pd.merge(train_df_unique,patient_feq,how='inner',on='Patient')","7779e102":"train_df_unique.sort_values(by='Frequency', ascending=False).head()","6f0678b2":"fig = px.bar(train_df_unique, x='Patient',y ='Frequency',color='Frequency')\nfig.update_layout(xaxis={'categoryorder':'total ascending'},title='Frequency of each patient')\nfig.update_xaxes(showticklabels=False)\nfig.show()","63a29cb4":"# Creating unique patient lists \n# (here patient == dictory and files == CT Scan)\ntrain_dir = '..\/input\/osic-pulmonary-fibrosis-progression\/train\/'\n\npatient_ids = os.listdir(train_dir)\npatient_ids = sorted(patient_ids)\n\n#Creating a new blank dataframe\nCtScan = pd.DataFrame(columns=['Patient','CtScanCount'])\n\n\nfor patient_id in patient_ids:\n    # count number of images in each folder\n    cnt = len(os.listdir(train_dir + patient_id))\n    # insert patient id and ct scan count in dataframe\n    CtScan.loc[len(CtScan)] = [patient_id,cnt]\n    \n\n# Merge two dataframes based on patient's ids.\npatient_df = pd.merge(train_df_unique,CtScan,how='inner',on='Patient')\n\n# Reset index\n# https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.reset_index.html\npatient_df = patient_df.reset_index(drop=True)\n\n# Print new dataframe\npatient_df.head()\n","5f77af53":"print(colored(\"CT Scans numbers in Train set \",\"yellow\"))\nprint(colored(\"Maximum number of CT Scans for a patient.... : \",\"blue\"),patient_df['CtScanCount'].max())\nprint(colored(\"Minimum number of CT Scans for a patient.... : \",\"blue\"),patient_df['CtScanCount'].min())\nprint(colored(\"Average number of CT Scans per patient...... : \",\"blue\"),round(patient_df['CtScanCount'].mean(),3))\nprint(colored(\"Total number of CT Scans of all patients.... : \",\"blue\"),patient_df['CtScanCount'].sum())\nprint(colored(\"Median of CT Scans counts................... : \",\"blue\"),patient_df['CtScanCount'].median())","8969eed3":"# Creating unique patient lists \n# (here patient == dictory and files == CT Scan)\ntest_dir = '..\/input\/osic-pulmonary-fibrosis-progression\/test\/'\n\ntest_patient_ids = os.listdir(test_dir)\ntest_patient_ids = sorted(test_patient_ids)\n\n#Creating a new blank dataframe\nTestCtScan = pd.DataFrame(columns=['Patient','CtScanCount'])\n\nfor patient_id in test_patient_ids:\n    # count number of images in each folder\n    cnt = len(os.listdir(test_dir + patient_id))\n    # insert patient id and ct scan count in dataframe\n    TestCtScan.loc[len(TestCtScan)] = [patient_id,cnt]\n    \n\n# Merge two dataframes based on patient's ids.\ntest_patient_df = pd.merge(test_df,TestCtScan,how='inner',on='Patient').reset_index()\n\n# Print new dataframe\ntest_patient_df.head()","196cf3bd":"print(colored(\"CT Scans numbers in Test set \",\"red\"))\nprint(colored(\"Maximum number of CT Scans for a patient... : \",\"green\"),test_patient_df['CtScanCount'].max())\nprint(colored(\"Minimum number of CT Scans for a patient... : \",\"green\"),test_patient_df['CtScanCount'].min())\nprint(colored(\"Average number of CT Scans per patient..... : \",\"green\"),test_patient_df['CtScanCount'].mean())\nprint(colored(\"Total number of CT Scans of all patients... : \",\"green\"),test_patient_df['CtScanCount'].sum())","31b6b09a":"train_df['Weeks'].iplot(kind='hist',\n                        bins=100, xTitle='Weeks', yTitle='Frequency', \n                        linecolor='white',opacity=0.7,\n                        color='rgb(0, 200, 200)', theme='pearl',\n                        bargap=0.01, title='Distribution of Weeks')","444a6986":"patient_df['Age'].iplot(kind='hist',\n                        bins=10, xTitle='Age', yTitle='Frequency', \n                        linecolor='white',opacity=0.7,\n                        color='rgb(0, 100, 200)', theme='pearl',\n                        bargap=0.01, title='Distribution of Age column')","3dcc0dc2":"print(colored(\"Gender wise distribution of patients :\",\"blue\"))\nprint(patient_df['Sex'].value_counts())","f0fe50f1":"sex_count = patient_df[\"Sex\"].value_counts()\nsex_labels = patient_df[\"Sex\"].unique()\n\nfig = px.pie(patient_df, values=sex_count, names=sex_labels, hover_name=sex_labels)\nfig.show()","c283861d":"plt.figure(figsize=(16, 6))\n\nsns.kdeplot(patient_df[patient_df['Sex'] == 'Male']['Age'], label = 'Male',shade=True)\nsns.kdeplot(patient_df[patient_df['Sex'] == 'Female']['Age'], label = 'Female',shade=True)\n\nplt.xlabel('Age (years)'); \nplt.ylabel('Density'); \nplt.title('Distribution of Ages');","5e6defaa":"print(colored('Total Smoking counts', 'red'))\nprint(patient_df['SmokingStatus'].value_counts())\n\nprint(\"\\n\")\nprint(colored(\"Male Smoking counts\",'blue'))\nprint(patient_df[patient_df['Sex']=='Male']['SmokingStatus'].value_counts())\n\nprint(\"\\n\")\nprint(colored(\"Female Smoking counts\",'green'))\nprint(patient_df[patient_df['Sex']=='Female']['SmokingStatus'].value_counts())","23098414":"plt.figure(figsize=(16, 6))\n\nsns.kdeplot(patient_df.loc[patient_df['SmokingStatus'] == 'Ex-smoker', 'Age'], label = 'Ex-smoker',shade=True)\nsns.kdeplot(patient_df.loc[patient_df['SmokingStatus'] == 'Never smoked', 'Age'], label = 'Never smoked',shade=True)\nsns.kdeplot(patient_df.loc[patient_df['SmokingStatus'] == 'Currently smokes', 'Age'], label = 'Currently smokes', shade=True)\n\n# Labeling of plot\nplt.xlabel('Age (years)'); \nplt.ylabel('Density'); \nplt.title('Distribution of Ages');","ce4ba9a4":"plt.figure(figsize=(10,8))\nsns.countplot(x='SmokingStatus', data=patient_df, hue='Sex')\nplt.title('Gender split by SmokingStatus', fontsize=16)\nplt.show()","3b2811f9":"print(colored(\"Maximum value of FVC... :\",'blue'),colored(train_df['FVC'].max(),'blue'))\nprint(colored(\"Minimum value of FVC... :\",'green'),colored(train_df['FVC'].min(),'green'))\n\nprint(\"\\n\")\n\n# Distribution of FVC\nprint(colored(\"Distribution of FVC\",\"yellow\"))\nprint(colored(train_df['FVC'].value_counts(normalize=False, ascending=False, bins=62).head(),\"yellow\"))","92ceafb8":"train_df['FVC'].iplot(kind='hist',\n                      xTitle='Lung Capacity(ml)', \n                      yTitle='Frequency', \n                      linecolor='black', \n                      bargap=0.2,\n                      title='Distribution of the FVC in the training set')","538cee2e":"fig = px.violin(train_df, y='FVC', x='SmokingStatus', \n                box=True, color='Sex', points=\"all\", hover_data=train_df.columns, title=\"FVC of various Smoking Status\")\nfig.show()","cb728b34":"fig = px.scatter(train_df, x=\"Age\", y=\"FVC\", color='Sex', title='FVC values for Patient Age')\nfig.show()","45edd08f":"train_df[train_df['FVC'] > 5000].sort_values(by='FVC', ascending=False)","78966ca6":"fig = go.Figure()\nfig = px.scatter(train_df, x=\"Weeks\", y=\"FVC\", color='SmokingStatus')\nfig.show()","d5d0d5e2":"patient = train_df[(train_df['Age'] == train_df['Age'].max()) | (train_df['Age'] == train_df['Age'].min())]\nfig = px.line(patient, x=\"Weeks\", y=\"FVC\", color='Age',line_group=\"Sex\", hover_name=\"SmokingStatus\")\nfig.show()","63641288":"print(colored(\"Maximum value of Percent... :\",'blue'),colored(train_df['Percent'].max(),'blue'))\nprint(colored(\"Minimum value of Percent... :\",'green'),colored(train_df['Percent'].min(),'green'))\n\nprint(\"\\n\")\n\n# Distribution of Percent\nprint(colored(\"Distribution of Percent\",\"yellow\"))\nprint(colored(train_df['Percent'].value_counts(normalize=False, ascending=False, bins=62).head(),\"yellow\"))","26ecf9d8":"train_df['Percent'].iplot(kind='hist',\n                      xTitle='Percent', \n                      yTitle='Frequency', \n                      linecolor='black', \n                      bargap=0.2,\n                      title='Distribution of Percent in the training set')","7730eb69":"fig = px.violin(train_df, y='Percent', x='SmokingStatus', \n                box=True, color='Sex', points=\"all\", hover_data=train_df.columns, title=\"Percent of various Smoking Status\")\nfig.show()","52a2ed84":"patient = train_df[(train_df['Age'] == train_df['Age'].max()) | (train_df['Age'] == train_df['Age'].min())]\nfig = px.line(patient, x=\"Weeks\", y=\"Percent\", color='Age',line_group=\"Sex\", hover_name=\"SmokingStatus\")\n\npatient = train_df[(train_df['Age'] == train_df['Age'].max()) | (train_df['Age'] == train_df['Age'].min())]\nfig = px.line(patient, x=\"Weeks\", y=\"Percent\", color='Age',line_group=\"Sex\", hover_name=\"SmokingStatus\")\n\nfig.show()","d0fdeb96":"fig = px.scatter(train_df, x=\"Age\", y=\"Percent\", color=\"SmokingStatus\", marginal_y=\"violin\",\n           marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\")\nfig.show()","80652877":"fig = px.scatter(train_df, x=\"FVC\", y=\"Percent\", color='SmokingStatus', size='Age', \n                 hover_name='SmokingStatus',hover_data=['Weeks'])\nfig.show()","ce4abc5a":"corrmat = train_df.corr() \nfig = px.imshow(corrmat, x=corrmat.columns, y=corrmat.columns)\nfig.update_xaxes(side=\"top\")\nfig.show()","a1108738":"## Patients & their CT Scans in Training Images Folder\n\nfile_len = folder_len = 0\nfiles = []\n\nfor dirpath, dirnames, filenames in os.walk(train_dir):\n    file_len += len(filenames)\n    folder_len += len(dirnames)\n    files.append(len(filenames))\n\nprint(\"Training folder contains\", f'{file_len:,}', \"CT scans for all patients.\") \nprint('Training folder have only',f'{folder_len:,}', \"unique patients.\")\n\nprint(\"\\n\")\n\nprint('Each patient have', f'{round(np.mean(files)):,}', 'average number of CT scans.')\nprint('Maximum images per patient', f'{round(np.max(files)):,}')\nprint('Minimum images per patient', f'{round(np.min(files)):,}')","9c99d77e":"# https:\/\/www.kaggle.com\/schlerp\/getting-to-know-dicom-and-the-data\n\ndef show_dcm_info(file_path):\n    #print(colored(\"Filename.........:\",'yellow'),file_path)\n    #print()\n    print(colored(\"File Path...........:\",'blue'), file_path)\n    \n    dataset = pydicom.dcmread(file_path)\n\n    pat_name = dataset.PatientName\n    display_name = pat_name.family_name + \", \" + pat_name.given_name\n    \n    print(colored(\"Patient's name......:\",'blue'), display_name)\n    print(colored(\"Patient id..........:\",'blue'), dataset.PatientID)\n    print(colored(\"Patient's Sex.......:\",'blue'), dataset.PatientSex)\n    print(colored(\"Modality............:\",'blue'), dataset.Modality)\n    print(colored(\"Body Part Examined..:\",'blue'), dataset.BodyPartExamined)\n    \n    if 'PixelData' in dataset:\n        rows = int(dataset.Rows)\n        cols = int(dataset.Columns)\n        print(colored(\"Image size..........:\",'blue'),\" {rows:d} x {cols:d}, {size:d} bytes\".format(\n            rows=rows, cols=cols, size=len(dataset.PixelData)))\n        if 'PixelSpacing' in dataset:\n            print(colored(\"Pixel spacing.......:\",'blue'),dataset.PixelSpacing)\n            dataset.PixelSpacing = [1, 1]\n        plt.figure(figsize=(10, 10))\n        plt.imshow(dataset.pixel_array, cmap='gray')\n        plt.show()","93b45418":"for file_path in glob.glob(train_dir + '*\/*.dcm'):\n    show_dcm_info(file_path)\n    break # Comment this out to see all","d4587e3d":"show_dcm_info(train_dir + 'ID00027637202179689871102\/11.dcm')","3d65d1b0":"patient_dir = train_dir + \"ID00123637202217151272140\"\n\nprint(\"total images for patient ID00123637202217151272140: \", len(os.listdir(patient_dir)))\n\n# view first (columns*rows) images in order\nfig=plt.figure(figsize=(16, 16))\ncolumns = 4\nrows = 5\nimglist = os.listdir(patient_dir)\nfor i in range(1, columns*rows +1):\n    filename = patient_dir + \"\/\" + str(i) + \".dcm\"\n    ds = pydicom.dcmread(filename)\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(ds.pixel_array, cmap='gray')\nplt.show()","ccff6de2":"# view first (columns*rows) images in order\nfig=plt.figure(figsize=(16, 16))\ncolumns = 4\nrows = 5\nimglist = os.listdir(patient_dir)\nfor i in range(1, columns*rows +1):\n    filename = patient_dir + \"\/\" + str(i) + \".dcm\"\n    ds = pydicom.dcmread(filename)\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(ds.pixel_array, cmap='jet')\n    #plt.imshow(cv2.cvtColor(ds.pixel_array, cv2.COLOR_BGR2RGB))\nplt.show()","414f49b5":"# Ref : \n# https:\/\/www.kaggle.com\/gzuidhof\/full-preprocessing-tutorial\n# https:\/\/www.kaggle.com\/akh64bit\/full-preprocessing-tutorial\n# https:\/\/www.researchgate.net\/post\/How_can_I_convert_pixel_intensity_values_to_housefield_CT_number\n\n# Load the scans in given folder path\ndef load_scan(path):\n    slices = [pydicom.read_file(path + '\/' + s) for s in os.listdir(path)]\n    slices.sort(key = lambda x: float(x.ImagePositionPatient[2]))\n    try:\n        slice_thickness = np.abs(slices[0].ImagePositionPatient[2] - slices[1].ImagePositionPatient[2])\n    except:\n        slice_thickness = np.abs(slices[0].SliceLocation - slices[1].SliceLocation)\n        \n    for s in slices:\n        s.SliceThickness = slice_thickness\n        \n    return slices","ab4ebce0":"def get_pixels_hu(slices):\n    image = np.stack([s.pixel_array for s in slices])\n    # Convert to int16 (from sometimes int16), \n    # should be possible as values should always be low enough (<32k)\n    image = image.astype(np.int16)\n\n    # Set outside-of-scan pixels to 0\n    # The intercept is usually -1024, so air is approximately 0\n    image[image == -2000] = 0\n    \n    # Convert to Hounsfield units (HU)\n    for slice_number in range(len(slices)):\n        \n        intercept = slices[slice_number].RescaleIntercept\n        slope = slices[slice_number].RescaleSlope\n        \n        if slope != 1:\n            image[slice_number] = slope * image[slice_number].astype(np.float64)\n            image[slice_number] = image[slice_number].astype(np.int16)\n            \n        image[slice_number] += np.int16(intercept)\n    \n    return np.array(image, dtype=np.int16)","48bcc088":"first_patient = load_scan(train_dir + patient_ids[0])\nfirst_patient_pixels = get_pixels_hu(first_patient)\n\nplt.figure(figsize=(10, 10))\nplt.hist(first_patient_pixels.flatten(), bins=80, color='c')\nplt.xlabel(\"Hounsfield Units (HU)\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\n# Show some slice in the middle\nplt.figure(figsize=(10, 10))\nplt.imshow(first_patient_pixels[15], cmap=plt.cm.gray)\nplt.show()","bc78901f":"first_patient_scan = load_scan(train_dir + patient_ids[0])","23d9778b":"first_patient_scan[0]","1a867d5b":"def set_lungwin(img, hu=[-1200., 600.]):\n    lungwin = np.array(hu)\n    newimg = (img-lungwin[0]) \/ (lungwin[1]-lungwin[0])\n    newimg[newimg < 0] = 0\n    newimg[newimg > 1] = 1\n    newimg = (newimg * 255).astype('uint8')\n    return newimg","9fb68e9e":"first_patient_scan_array = set_lungwin(get_pixels_hu(first_patient_scan))","27460920":"import imageio\nfrom IPython.display import Image\n\nimageio.mimsave(\"\/tmp\/gif.gif\", first_patient_scan_array, duration=0.00001)\nImage(filename=\"\/tmp\/gif.gif\", format='png')","51b69663":"fig, ax = plt.subplots(1,2,figsize=(20,5))\nfor n in range(10):\n    image = first_patient_scan[n].pixel_array.flatten()\n    rescaled_image = image * first_patient_scan[n].RescaleSlope + first_patient_scan[n].RescaleIntercept\n    sns.distplot(image.flatten(), ax=ax[0]);\n    sns.distplot(rescaled_image.flatten(), ax=ax[1])\nax[0].set_title(\"Raw pixel array distributions for 10 examples\")\nax[1].set_title(\"HU unit distributions for 10 examples\")","7cac92e4":"fig, ax = plt.subplots(1,4,figsize=(20,3))\nax[0].set_title(\"Original CT-scan\")\nax[0].imshow(first_patient_scan[0].pixel_array, cmap=\"bone\")\nax[1].set_title(\"Pixelarray distribution\");\nsns.distplot(first_patient_scan[0].pixel_array.flatten(), ax=ax[1]);\n\nax[2].set_title(\"CT-scan in HU\")\nax[2].imshow(first_patient_pixels[0], cmap=\"bone\")\nax[3].set_title(\"HU values distribution\");\nsns.distplot(first_patient_pixels[0].flatten(), ax=ax[3]);\n\nfor m in [0,2]:\n    ax[m].grid(False)","01596ae3":"def segment_lung_mask(image):\n    segmented = np.zeros(image.shape)   \n    \n    for n in range(image.shape[0]):\n        binary_image = np.array(image[n] > -320, dtype=np.int8)+1\n        labels = measure.label(binary_image)\n        \n        background_label_1 = labels[0,0]\n        background_label_2 = labels[0,-1]\n        background_label_3 = labels[-1,0]\n        background_label_4 = labels[-1,-1]\n    \n        #Fill the air around the person\n        binary_image[background_label_1 == labels] = 2\n        binary_image[background_label_2 == labels] = 2\n        binary_image[background_label_3 == labels] = 2\n        binary_image[background_label_4 == labels] = 2\n    \n        #We have a lot of remaining small signals outside of the lungs that need to be removed. \n        #In our competition closing is superior to fill_lungs \n        selem = disk(4)\n        binary_image = closing(binary_image, selem)\n    \n        binary_image -= 1 #Make the image actual binary\n        binary_image = 1-binary_image # Invert it, lungs are now 1\n        \n        segmented[n] = binary_image.copy() * image[n]\n    \n    return segmented","0bf539d2":"segmented = segment_lung_mask(np.array([first_patient_pixels[20]]))\n\nfig, ax = plt.subplots(1,2,figsize=(20,10))\nax[0].imshow(first_patient_pixels[20], cmap=\"Blues_r\")\nax[1].imshow(segmented[0], cmap=\"Blues_r\")","09b6855d":"segmented_lungs = segment_lung_mask(first_patient_pixels)","fb7cc1d1":"segmented_lungs.shape","3094380a":"fig, ax = plt.subplots(6,5, figsize=(20,20))\nfor n in range(6):\n    for m in range(5):\n        ax[n,m].imshow(segmented_lungs[n*5+m], cmap=\"Blues_r\")\n","0d3f70b9":"## Contents\n\n* [Introduction](#Introduction)\n* [Importing libraries](#libraries)\n* [Load Data](#dataLoad)\n* [Exploratory Data Analysis](#EDA)\n* [Visualising Images : DECOM](#ImageVisuals)\n","4c40199b":"This is VERY weird: FVC and Percent are the highest for people that still smoke and the lowest for people that never smoked. HOWEVER, we need to keep in mind that the percentage of people that still smoke is very low. So, we CAN'T conclude that if a person smokes it's highly likely that will have a high FVC.","b4312282":"### FVC vs Percent","dea4be19":"## Patients Counts","52b51700":"## Frequency of a patient in Train set\n\nLet's count how many times a particular patient repeated in train set.","c4d0dbe7":"# <div class=\"alert alert-block alert-info\">2. <a id='libraries'>Importing libraries<\/a><\/div>","df7ee11f":"* Patient Age ranges from 49 years to 88 years with 67 years average age and 7 years standard deviation.\n* The normal FVC range for an adult is between 3000ml to 5000ml. Dataset FVC ranges from 2690.48ml to 6399.00ml.\n* FVC are measured earliest at -5th week and latest by 133th week.","3707fe86":"### Percent vs SmokingStatus","da079fc9":"## Descriptive Statistics","98e34cf7":"* There is high correlation between FVC and Percent: when the volume of air increases, the Percent increases as well.\n\n* There is no correlation between FVC\/Percent and Age, meaning that Age has no influence on the volume of exhaled air.","9288337e":"### FVC vs Age","63137162":"### FVC vs Week","4091d4d0":"Male and female records are almost distributed throughout the age range.","d9c5ad4c":"### Gender wise smoking distribution","f1f6e131":"### Percent vs Age ","24855285":"## FVC - The forced vital capacity\n\nLung function is assessed based on output from a spirometer, which measures the **forced vital capacity (FVC)**, i.e. the volume of air exhaled. FVC can also help doctors assess the progression of lung disease and evaluate the effectiveness of treatment.\n\nA person who has Diagnose obstructive lung diseases such as asthma and chronic obstructive pulmonary disease (COPD) has a lower FVC result than a healthy person.Decreases in the FVC value may mean the lung disease is getting worse.\n\n* Average normal values in healthy males aged 20-60 range from 5.5 to 4.75 liters.\n* Average normal values for females aged 20-60 range from 3.75 to 3.25 liters. \n* Percent- a computed field which approximates the patient's FVC as a percent of the typical FVC for a person of similar characteristics. Percentage with normal test values falling between 80% and 120% of the average values.\n\nReferecne : https:\/\/www.nuvoair.com\/blog\/do-you-know-how-to-interpret-the-results-of-your-spirometry-test","23677dd2":"## Distribution of weeks","243aa796":"### Distribution of 'SmokingStatus' feature","1e6dae95":"Let's take a look at the first dicom file of a patient:","e4367f46":"The unit of measurement in CT scans is the Hounsfield Unit (HU), which is a measure of radiodensity. CT scanners are carefully calibrated to accurately measure this. From Wikipedia:\n\n<img src=\"http:\/\/i.imgur.com\/4rlyReh.png\" \/>\n\nBy default however, the returned values are not in this unit. Let's fix this.\n\nSome scanners have cylindrical scanning bounds, but the output image is square. The pixels that fall outside of these bounds get the fixed value -2000. The first step is setting these values to 0, which currently corresponds to air. Next, let's go back to HU units, by multiplying with the rescale slope and adding the intercept (which are conveniently stored in the metadata of the scans!).","0bb4509a":"### Distribution of Patient gender","2bf5770d":"Most of the FVC test is done in between 0 to 20 weeks. Also Ex-smoker males have more FVC than others.","11113700":"# <div class=\"alert alert-block alert-info\">3. <a id='EDA'>Exploratory Data Analysis<\/a><\/div>\n\nThe purpose of exploratory data analysis is to: Check for missing data and other mistakes. Gain maximum insight into the data set and its underlying structure. Uncover a parsimonious model, one which explains the data with a minimum number of predictor variables.","68c6ea72":"Looking at the table from Wikipedia and this histogram, we can clearly see which pixels are air and which are tissue. We will use this for lung segmentation in a bit","3f50fa62":"## Sets integer starting value ","ae50e19e":"The scan of our example patient had a circular boundary and now all raw values per slice are scaled to H-units.","6cdc88dc":"## Loading DICOM files\n\nDicom files contain a lot of metadata (such as the pixel size, so how long one pixel is in every dimension in the real world).\n\nThis pixel size\/coarseness of the scan differs from scan to scan (e.g. the distance between slices may differ), which can hurt performance of CNN approaches.\n\nBelow is code to load a scan, which consists of multiple slices, which we simply save in a Python list. Every folder in the dataset is one scan (so one patient). One metadata field is missing, the pixel size in the Z direction, which is the slice thickness. Fortunately we can infer this, and we add this to the metadata.","2bfb161a":"# <div class=\"alert alert-block alert-info\">4. <a id='ImageVisuals'>Visualising DICOM Images<\/a><\/div>","cfcb0058":"Huge imbalance in the number of CT scans: half of the patients have less that 100 CT scans.","35b2de13":"There are some raw values at -2000. They correspond to images with a circular boundary within the image. The \"outside\" of this circle value is often set to -2000 (or in other competitions I found also -3000) by default.","9c0b7940":"### Percent Distribution","1af2ddf8":"### Dataset Details \n* train.csv - the training set, contains full history of clinical information\n* test.csv - the test set, contains only the baseline measurement\n* train\/ - contains the training patients' baseline CT scan in DICOM format\n* test\/ - contains the test patients' baseline CT scan in DICOM format\n* sample_submission.csv - demonstrates the submission format","a7867628":"## Distribution of Patients age","c4b9723f":"### Distribution of Age vs SmokingStatus","ab39a227":"## Percent\nPercent approximates the patient's FVC as a percent of the typical FVC for a person of similar characteristics. Percentage with normal test values falling between 80% and 120% of the average values.","3200157e":"Aging is associated with progressive decline in lung function as shown in predicted by above plot that FVC of older person is less than younger person.","087cba6f":"## Number of CT Scans for each patient in Train set\n\nwe are provided with a baseline chest CT scans at week intervats for each patients. So lets count how many CT Scan have each patient.","c68dd69e":"<center>\n<div class=\"alert alert-block alert-info\">\n    <h1>OSIC Pulmonary Fibrosis Progression<\/h1>\n    <h3>Predict lung function decline<\/h3>\n<\/div><\/center>","c2d15a54":"Every patient is observed between 6 to 10 times however most of them have observed 9 times.","ca1871eb":"## Patients & their CT Scans in Training Images Folder","2c815831":"Males have higher FVC than females irrespective of age.","7e3394ca":"### Percent of oldest and youngest person","38e566d7":"## Reference:\n\n* https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC6738634\/\n* https:\/\/www.semanticscholar.org\/paper\/Honeycomb-lung%3A-history-and-current-concepts.-Arakawa-Honma\/9ea8579ddf8de97e308500ad73e680ba9b2c455d\/figure\/3\n* https:\/\/err.ersjournals.com\/content\/23\/132\/215\n* https:\/\/link.springer.com\/article\/10.1186\/s12890-020-1061-x\n* https:\/\/www.pulmonologyadvisor.com\/home\/topics\/restrictive-lung-disease\/ct-honeycombing-in-interstitial-lung-disease-linked-to-higher-mortality-rates\/\n","9e4fa50f":"## Missing Values","c688bedb":"### Visualization using gif","b1fd52bc":"## Patient Overlap","ea5d8d94":"### FVC vs Smoking Status","b85293d4":"Range of patients age is between 48-88 years where we have more records for patients in the age range 64-74 years.","c7388609":"More number of male patients than female patients.","7216ca87":"Let's take a look at one of the patients.","c20f1014":"### Digital Imaging and COmmunications in Medicine - DICOM\n\nDICOM(Digital Imaging and COmmunications in Medicine) is the de-facto standard that establishes rules that allow medical images(X-Ray, MRI, CT) and associated information to be exchanged between imaging equipment from different vendors, computers, and hospitals.\n\nDICOM files typically have a .dcm extension and provides a means of storing data in separate 'tags' such as patient information as well as image\/pixel data. A DICOM file consists of a header and image data sets packed into a single file. The information within the header is organized as a constant and standardized series of tags.\n\nBy extracting data from these tags one can access important information regarding the patient demographics, study parameters, etc.\n\n### Pydicom\n\nPydicom is a python package for parsing DICOM files and makes it easy to covert DICOM files into pythonic structures for easier manipulation. Files are opened using pydicom.dcmread","9d2d5cf2":"## Correlation among varous features","bc1ec61b":"## Unique patients\n\nLet's create a new data set having only unique patient details.","3cd9797f":"## Concise Summary","5a5fdb43":"### Transforming to Hounsfield Units \nBefore starting, let's plot the pixelarray distribution of some dicom files to get an impression of the raw data:\n\nRef : https:\/\/www.kaggle.com\/allunia\/pulmonary-fibrosis-dicom-preprocessing","5632f12a":"# <div class=\"alert alert-block alert-info\">1. <a id='Introduction'>Introduction<\/a><\/div>\n\n###  1.1 Pulmonary fibrosis[](http:\/\/)\n\n[The word \"**pulmonary**\" means lung and the word \"**fibrosis**\" means scar tissue\u2014 similar to scars that you may have on your skin from an old injury or surgery.](https:\/\/www.pulmonaryfibrosis.org\/life-with-pf\/about-pf) So, in its simplest sense, pulmonary fibrosis (PF) means scarring in the lungs. Over time, the scar tissue can destroy the normal lung and make it hard for oxygen to get into your blood. Low oxygen levels (and the stiff scar tissue itself) can cause you to feel short of breath, particularly when walking and exercising.\n\n<img src='https:\/\/www.pulmonaryfibrosis.org\/images\/default-source\/default-album\/normal-and-impaired-gas-exchange.png?sfvrsn=c3b0918d_0' \/>\n\nImage Credits:- https:\/\/www.pulmonaryfibrosis.org\/\n\n\n* **Prognosis** - Prognosis is a term for the predicted course of a disease. People commonly use the word to refer to an individual\u2019s life expectancy, how long the person is likely to live. However, prognosis can also refer to the chance that a disease can be cured and the outlook for functional recovery, which includes the prospects of being able to return to work, engage in recreation, as well as the expected degree of help that will be necessary to accomplish activities of daily living.\n\n* **Forced vital capacity (FVC)** - FVC is the amount of air that can be forcibly exhaled from your lungs after taking the deepest breath possible, as measured by spirometry. FVC can also help doctors assess the progression of lung disease and evaluate the effectiveness of treatment.\n\nPatient's FVC volume can be compared with the standard FVC for similir age, sex, height, and weight. Patient FVC can also be compared with her\/his own previous FVC values, if applicable, to determine whether pulmonary condition is progressing or if lung function is improving under treatment. FVC also may be expressed as a percentage of the predicted FVC.\n\nThe normal FVC range for an adult is between 3.0 and 5.0 L.\n\n\n###  1.2 Objective of Competition\n\nThe aim of this competition is to **predict a patient\u2019s severity of decline in lung function** based on a CT scan of their lungs. Lung function is assessed based on output from a spirometer, which measures the **forced vital capacity (FVC)**, i.e. the volume of air exhaled. The challenge is to use machine learning techniques to make a prediction with the image, metadata, and baseline FVC as input.\n\n###  1.3 Evaluated of competition\n\nThis competition is evaluated on a modified version of the **Laplace Log Likelihood**. In medical applications, it is useful to evaluate a model's confidence in its decisions. Accordingly, the metric is designed to reflect both the accuracy and certainty of each prediction.\n\n<img src='https:\/\/www.vosesoftware.com\/riskwiki\/images\/image15_632.gif' \/>\n\nImage Credits:- https:\/\/www.vosesoftware.com\/riskwiki\/Laplacedistribution.php\n\nFor each true FVC measurement, you will predict both an **FVC** and a **confidence measure** (standard deviation \u03c3). The metric is computed as:\n\n\n**Confidence values smaller than 70 are clipped.**\n\n$$ \\large \\sigma_{clipped} = max(\\sigma, 70) $$\n\n**Errors greater than 1000 are also clipped in order to avoid large errors.**\n\n$$ \\large \\Delta = min ( |FVC_{true} - FVC_{predicted}|, 1000 ) $$\n\n**The metric is defined as:**\n\n$$ \\Large metric = -   \\frac{\\sqrt{2} \\Delta}{\\sigma_{clipped}} - \\ln ( \\sqrt{2} \\sigma_{clipped} ) $$\n\nThe leaderboard is calculated with approximately 15% of the test data. The final results will be based on the other 85%, so the final standings may be different.\n\n","21741fce":"### Columns Details in train.csv and test.csv\n* **Patient** - a unique Id for each patient (also the name of the patient's DICOM folder)\n* **Weeks** - the relative number of weeks pre\/post the baseline CT (may be negative)\n* **FVC** - the recorded lung capacity in ml\n* **Percent** - a computed field which approximates the patient's FVC as a percent of the typical FVC for a person of similar characteristics\n* **Age** \n* **Sex** \n* **SmokingStatus** ","f92c9817":"Records with patient who have never smoked have almost equal distribution of male and female patients whereas majority of ex-smokers are males.","36ce090e":"## Number of CT Scans for each patient in Test set","b627dd10":"There is no missing values in train_df and test_df.","591f21b2":"Most of the patients CT scans done in between 4th to 20th week.","cddac86e":"# <div class=\"alert alert-block alert-info\">2. <a id='dataLoad'>Load Data<\/a><\/div>","bf277997":"### FVC of oldest and youngest person","31a4c80b":"### Distribution of Age vs Gender","c583ffd6":"## Tissue segmentation \n\nA scan may have a pixel spacing of [2.5, 0.5, 0.5], which means that the distance between slices is 2.5 millimeters. For a different scan this may be [1.5, 0.725, 0.725], this can be problematic for automatic analysis (e.g. using ConvNets)!\n\nIn order to reduce the problem space, we can segment the lungs (and usually some tissue around it).\n\nIt involves quite a few smart steps.\n\nThreshold the image (-320 HU is a good threshold, but it doesn't matter much for this approach). Do connected components, determine label of air around person, fill this with 1s in the binary image Optionally: For every axial slice in the scan, determine the largest solid connected component (the body+air around the person), and set others to 0. This fills the structures in the lungs in the mask. Keep only the largest air pocket (the human body has other pockets of air here and there).\n\nWith -320 we are separating between lungs (-700) \/air (-1000) and tissue with values close to water (0).","fb75db45":"### FVC Distribution","6f0e801d":"No missing value in either train\/test datasets."}}