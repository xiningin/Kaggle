{"cell_type":{"9cdee1be":"code","00012a0a":"code","2e14d594":"code","505e18ad":"code","d049de3d":"code","0e2a7b67":"code","d60b8f2d":"code","d4d53023":"code","154b5c58":"code","be30d792":"code","02cf4101":"code","0b34470c":"code","bff6de49":"code","3972f7c6":"code","8867533a":"code","743b50ad":"code","8a4440c6":"code","88b2cea2":"code","c4201018":"code","ed717761":"code","2dd9dd2c":"code","9ce2a121":"code","fd62d076":"code","277b88d8":"code","2320daee":"code","8657737a":"code","b8bc168e":"code","e2e9d78c":"code","067da52e":"code","e8fba00b":"code","2ad71933":"code","585ef475":"code","73564018":"code","ab198a3c":"code","8f3b05de":"code","76f74707":"code","f9ff1667":"code","60991167":"code","baaef210":"code","dfbc643a":"code","64455036":"code","299d911c":"code","620d38cc":"code","93458fa9":"code","4a765bef":"markdown","05aa5b06":"markdown","0b042e0a":"markdown","105b48ea":"markdown","a48991c7":"markdown","744b5532":"markdown","b0397425":"markdown","9a0f94d0":"markdown"},"source":{"9cdee1be":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import ensemble, metrics\n\nimport datetime as dt\nfrom datetime import datetime, timedelta\n\nsns.set_style('darkgrid')\npd.options.display.float_format = '{:,.3f}'.format\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# Warnings\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\n\n# Data Preprocessing\n\nfrom sklearn.neighbors import LocalOutlierFactor \nfrom sklearn import preprocessing\n\n# Modeling\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\n\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nimport xgboost\nfrom xgboost import XGBRegressor\n!pip install lightgbm\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\n\n# Model Tuning\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score","00012a0a":"%%time\n\nparser = lambda date: pd.to_datetime(date, format='%d.%m.%Y')\n\ntrain = pd.read_csv('..\/input\/sales_train.csv', parse_dates=['date'], date_parser=parser)\n","2e14d594":"df=train.copy()","505e18ad":"df.head()","d049de3d":"df.info()","0e2a7b67":"df[\"date\"].max()","d60b8f2d":"#date kolononu mutlaka datetime yapmak gereklidir.\n\ndf[\"date\"]=pd.to_datetime(df[\"date\"], format='%Y%m%d', errors='ignore')","d4d53023":"def create_date_features(df):\n    df['month'] = df.date.dt.month \n    df['day_of_month'] = df.date.dt.day\n    df['day_of_year'] = df.date.dt.dayofyear\n    df['year'] = df.date.dt.year\n    df[\"is_wknd\"] = df.date.dt.weekday \/\/ 4\n    df['is_month_start'] = df.date.dt.is_month_start.astype(int)\n    df['is_month_end'] = df.date.dt.is_month_end.astype(int)\n    df[\"DAY_OF_WEEKDAY\"]=df.date.dt.dayofweek\n    return df","154b5c58":"df = create_date_features(df)","be30d792":"df.head()","02cf4101":"df[\"year\"].value_counts()","0b34470c":"df.describe().T","bff6de49":"df.isnull().sum()","3972f7c6":"sns.set(style=\"whitegrid\")\n\nsns.boxplot(df[\"item_price\"])","8867533a":"sns.kdeplot(df[\"item_price\"], shade=True)","743b50ad":"df[\"item_price\"].describe()","8a4440c6":"# sat\u0131\u015fta negatif de\u011ferler \u00e7\u0131kt\u0131\u011f\u0131 i\u00e7in filtreleme yaparak sadece pozitif de\u011ferler alal\u0131m.\n\ndf=df.loc[df[\"item_price\"]>0]","88b2cea2":"Q1=df[\"item_price\"].quantile(0.01)\nQ3=df[\"item_price\"].quantile(0.99)\n\nIQR= Q3 - Q1\nIQR\n\nmaksimum=Q3 + 1.5 * IQR\nmaksimum","c4201018":"# outlier tespiti\nhepsi= (df[\"item_price\"]>maksimum)  #filtre\n\ndf[\"item_price\"][hepsi].count() #ayk\u0131r\u0131 g\u00f6zlemlere eri\u015fme","ed717761":"#outlier sadece sa\u011f taraftakileri silme - 10091 tane silme\n\ndf=df.drop((df[\"item_price\"][(df[\"item_price\"]>maksimum)]).index)","2dd9dd2c":"df.shape","9ce2a121":"corr = df.corr()\nplt.figure(figsize=(18,10))\nsns.heatmap(corr, annot=True)\nplt.show()","fd62d076":"#tarihe g\u00f6re k\u00fc\u00e7\u00fckte b\u00fcy\u00fc\u011fe do\u011fru s\u0131ralama\ndf= df.sort_values(by=[\"date\"])","277b88d8":"df.drop([\"date\"], inplace=True, axis=1)","2320daee":"df[\"year\"].value_counts()","8657737a":"609770 \/ 2700000\n\n# 2013 ve 2014 train\n# 2015 test olarak al\u0131nd\u0131\n#yakla\u015f\u0131k olarak %22 si test oldu","b8bc168e":"Train = df[df[\"year\"].isin([2013, 2014])]\nTest = df[df[\"year\"].isin([2015])]","e2e9d78c":"X_train = Train.drop(columns=['item_price',\"year\"], axis=1)\ny_train = Train[\"item_price\"]","067da52e":"X_test = Test.drop(columns=['item_price',\"year\"], axis=1)\ny_test = Test[\"item_price\"]","e8fba00b":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","2ad71933":"import lightgbm as lgb\n\n#categorical_feature i\u00e7ine liste \u015feklinde kategorik olan de\u011fi\u015fkenleri veriyoruz.\n\nd_train=lgb.Dataset(X_train,label=y_train, categorical_feature=['shop_id', 'item_id'], free_raw_data=False)","585ef475":"lgbm_params={ 'boosting_type': 'gbdt',\n    'objective': 'regression',\n    'metric': ['mse'],\n    }","73564018":"clf=lgb.train(lgbm_params,d_train,100)","ab198a3c":"y_pred=clf.predict(X_test)\n\nnp.sqrt(mean_squared_error(y_test, y_pred))","8f3b05de":"from sklearn.metrics import explained_variance_score\nexplained_variance_score(y_test, y_pred)","76f74707":"df1=df.copy()","f9ff1667":"#object haline getirildi. modellerin \u00e7al\u0131\u015fmas\u0131 i\u00e7in\n\ndf1[\"item_id\"]=df1[\"item_id\"].astype(object)\ndf1[\"shop_id\"]=df1[\"shop_id\"].astype(object)","60991167":"Train = df1[df1[\"year\"].isin([2013, 2014])]\nTest = df1[df1[\"year\"].isin([2015])]\n\n#test train ayr\u0131lmas\u0131\nX_train = Train.drop(columns=['item_price',\"year\"], axis=1)\ny_train = Train[\"item_price\"]\n\nX_test = Test.drop(columns=['item_price',\"year\"], axis=1)\ny_test = Test[\"item_price\"]","baaef210":"cat_features=['item_id',\"shop_id\"]","dfbc643a":"from catboost import CatBoostRegressor\nfrom catboost import Pool\nfrom catboost import MetricVisualizer\nimport catboost as cbd\n\ntrain_dataset = cbd.Pool(X_train, y_train, cat_features = cat_features) \ntest_dataset = cbd.Pool(X_test, y_test, cat_features = cat_features)","64455036":"model = cbd.CatBoostRegressor(loss_function=\"RMSE\", n_estimators=20 )\n\nmodel.fit(train_dataset, verbose=0, plot=False)\n\n#verinin boyutu fazla oldu\u011fu i\u00e7in subsample gibi n_estimators de\u011feri 20 olarak al\u0131nd\u0131. Yani a\u011fa\u00e7 daha az \u00e7al\u0131\u015ft\u0131r\u0131ld\u0131.\n#b\u00f6ylece h\u0131zl\u0131 bir \u015fekilde sonu\u00e7 ald\u0131k.\n#sonra model t\u00fcm veri ile tekrardan \u00e7al\u0131\u015ft\u0131r\u0131lacak.\n\n#ayr\u0131ca bir \u00e7\u00f6z\u00fcm yolu olarak n_estimators parametresi yerine iterations=100 al\u0131narak h\u0131zl\u0131 bir \u015fekilde sonu\u00e7 al\u0131n\u0131r.","299d911c":"#train skoru\npred_train = model.predict(X_train)\nrmse = (np.sqrt(mean_squared_error(y_train, pred_train)))\nrmse","620d38cc":"#test skoru\npred = model.predict(X_test)\nrmse = (np.sqrt(mean_squared_error(y_test, pred)))\nrmse","93458fa9":"from sklearn.metrics import explained_variance_score\nexplained_variance_score(y_test, pred)","4a765bef":"# Ayk\u0131r\u0131 de\u011fer analizi","05aa5b06":"# test train split","0b042e0a":"### ayr\u0131ca 3. \u00e7\u00f6z\u00fcm yolu olarak subsample al\u0131nabilir. Train \u00fczerinden se\u00e7ilen daha az  veri ile model kurulup sonu\u00e7lara bak\u0131labilir.\n\nsam_train = Train.sample(10000, random_state=0)\n\nX_train = sam_train.drop(columns=['item_price',\"year\"], axis=1)\n\ny_train = sam_train[\"item_price\"]\n\nyaz\u0131ld\u0131ktan sonra tekrar split edilerek model kurulur.","105b48ea":"# # model kurma LightGBM","a48991c7":"### Date de\u011fi\u015fkeninden farkl\u0131 bilgiler \u00e7\u0131karmak m\u00fcmk\u00fcnd\u00fcr. E\u011fer i\u00e7inde g\u00fcn-ay-y\u0131l ge\u00e7iyorsa buradan tarihle alakal\u0131 bir \u00e7ok bilgiye eri\u015filebilir. \u00d6rne\u011fin; bu date de\u011fi\u015fkenin g\u00fcn, ay, y\u0131l, hangi g\u00fcn, haftan\u0131n g\u00fcn\u00fc gibi tarihle alakal\u0131 bir \u00e7ok de\u011fi\u015fken yarat\u0131labilir.\n","744b5532":"# CatBoost\n\nCatboost modeli kategorik verilerle de \u00e7al\u0131\u015fabilir. Ancak cat_features parametresi alt\u0131nda verdi\u011fimiz de\u011fi\u015fkenlerin \"object veya category\" tipinde olmas\u0131 gereklidir. Bu nedenle de\u011fi\u015fkenler \"item_id\" ile \"shop_id\" object tipine \u00e7evrilip modele konulmu\u015ftur.","b0397425":"## Load data","9a0f94d0":"### KOrelasyon"}}