{"cell_type":{"7dce685d":"code","256126e3":"code","5bcc7eab":"code","204e6cd8":"code","af5c7e7e":"code","af8b666e":"code","e0d69491":"code","3126f3b6":"code","d0b0b3a0":"code","21866c0a":"code","7b5d80d5":"code","fc738053":"code","dbe29e4c":"code","aeae99e6":"code","83975b91":"code","d3cbbd8c":"code","95f3eeb6":"markdown","7025cf6c":"markdown","715909fc":"markdown","ffbcfa5d":"markdown","84d9d0ca":"markdown","fc7cb4bd":"markdown","87f0c980":"markdown","c93be3b6":"markdown","aa21fc36":"markdown","d09301dc":"markdown","964cd193":"markdown","f8a7c2e4":"markdown","cb0ec2a4":"markdown","d27a257d":"markdown","35a882e1":"markdown"},"source":{"7dce685d":"import numpy as np\nimport os\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.datasets import make_blobs","256126e3":"SEED = 42\nN_CLUSTERS = 5\nN_SAMPLES = 2000\nnp.random.seed(SEED)\n\nmpl.rc('axes', labelsize=14)\nmpl.rc('xtick', labelsize=12)\nmpl.rc('ytick', labelsize=12)\n\nROOT_DIR = \".\"\nFOLDER_NAME = \"kmeans\"\nIMAGES_PATH = os.path.join(ROOT_DIR, \"images\", FOLDER_NAME)\nos.makedirs(IMAGES_PATH, exist_ok=True)","5bcc7eab":"def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n    path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)\n    print(\"Saving figure\", fig_id)\n    if tight_layout:\n        plt.tight_layout()\n    plt.savefig(path, format=fig_extension, dpi=resolution)\n    \ndef plot_data(X):\n    plt.plot(X[:, 0], X[:, 1], 'k.', markersize=2)\n\ndef plot_centroids(centroids, weights=None, circle_color='w', cross_color='k'):\n    if weights is not None:\n        centroids = centroids[weights > weights.max() \/ 10]\n    plt.scatter(centroids[:, 0], centroids[:, 1],\n                marker='o', s=35, linewidths=8,\n                color=circle_color, zorder=10, alpha=0.9)\n    plt.scatter(centroids[:, 0], centroids[:, 1],\n                marker='x', s=2, linewidths=12,\n                color=cross_color, zorder=11, alpha=1)\n\ndef plot_decision_boundaries(clusterer, X, resolution=1000, show_centroids=True,\n                             show_xlabels=True, show_ylabels=True):\n    mins = X.min(axis=0) - 0.1\n    maxs = X.max(axis=0) + 0.1\n    xx, yy = np.meshgrid(np.linspace(mins[0], maxs[0], resolution),\n                         np.linspace(mins[1], maxs[1], resolution))\n    Z = clusterer.predict(np.c_[xx.ravel(), yy.ravel()])\n    Z = Z.reshape(xx.shape)\n\n    plt.contourf(Z, extent=(mins[0], maxs[0], mins[1], maxs[1]),\n                cmap=\"Pastel2\")\n    plt.contour(Z, extent=(mins[0], maxs[0], mins[1], maxs[1]),\n                linewidths=1, colors='k')\n    plot_data(X)\n    if show_centroids:\n        plot_centroids(clusterer.cluster_centers_)\n\n    if show_xlabels:\n        plt.xlabel(\"$x_1$\", fontsize=14)\n    else:\n        plt.tick_params(labelbottom=False)\n    if show_ylabels:\n        plt.ylabel(\"$x_2$\", fontsize=14, rotation=0)\n    else:\n        plt.tick_params(labelleft=False)\n        \ndef plot_clusterer_comparison(clusterer1, clusterer2, X, title1=None, title2=None):\n    clusterer1.fit(X)\n    clusterer2.fit(X)\n\n    plt.figure(figsize=(10, 3.2))\n\n    plt.subplot(121)\n    plot_decision_boundaries(clusterer1, X)\n    if title1:\n        plt.title(title1, fontsize=14)\n\n    plt.subplot(122)\n    plot_decision_boundaries(clusterer2, X, show_ylabels=False)\n    if title2:\n        plt.title(title2, fontsize=14)","204e6cd8":"blob_centers = np.array(\n    [[ 0.2,  2.3],\n     [-1.5 ,  2.3],\n     [-2.8,  1.8],\n     [-2.8,  2.8],\n     [-2.8,  1.3]])\nblob_std = np.array([0.4, 0.3, 0.1, 0.1, 0.1])\n\nX, y = make_blobs(n_samples=N_SAMPLES, centers=blob_centers,\n                  cluster_std=blob_std, random_state=SEED)","af5c7e7e":"kmeans_rnd_init1 = KMeans(n_clusters=5, init=\"random\", n_init=1,\n                         algorithm=\"full\", random_state=2)\nkmeans_rnd_init2 = KMeans(n_clusters=5, init=\"random\", n_init=1,\n                         algorithm=\"full\", random_state=5)\n\nplot_clusterer_comparison(kmeans_rnd_init1, kmeans_rnd_init2, X,\n                          \"Solution 1\", \"Solution 2 (with a different random init)\")\n\nsave_fig(\"kmeans_variability_plot\")\nplt.show()","af8b666e":"kmeans = KMeans(n_clusters=N_CLUSTERS, random_state=SEED)\ny_pred = kmeans.fit_predict(X)","e0d69491":"kmeans.inertia_","3126f3b6":"X_dist = kmeans.transform(X)\nnp.sum(X_dist[np.arange(len(X_dist)), kmeans.labels_]**2)","d0b0b3a0":"kmeans.score(X)","21866c0a":"kmeans_per_k = [KMeans(n_clusters=k, random_state=42).fit(X)\n                for k in range(1, 10)]\ninertias = [model.inertia_ for model in kmeans_per_k]","7b5d80d5":"plt.figure(figsize=(8, 3.5))\nplt.plot(range(1, 10), inertias, \"bo-\")\nplt.xlabel(\"$k$\", fontsize=14)\nplt.ylabel(\"Inertia\", fontsize=14)\nplt.annotate('Elbow',\n             xy=(4, inertias[3]),\n             xytext=(0.55, 0.55),\n             textcoords='figure fraction',\n             fontsize=16,\n             arrowprops=dict(facecolor='black', shrink=0.1)\n            )\nplt.axis([1, 8.5, 0, 1300])\nsave_fig(\"inertia_vs_k_plot\")\nplt.show()","fc738053":"plot_decision_boundaries(kmeans_per_k[4-1], X)\nplt.show()","dbe29e4c":"from sklearn.metrics import silhouette_score\nsilhouette_score(X, kmeans.labels_)","aeae99e6":"silhouette_scores = [silhouette_score(X, model.labels_)\n                     for model in kmeans_per_k[1:]]","83975b91":"plt.figure(figsize=(8, 3))\nplt.plot(range(2, 10), silhouette_scores, \"bo-\")\nplt.xlabel(\"$k$\", fontsize=14)\nplt.ylabel(\"Silhouette score\", fontsize=14)\nplt.axis([1.8, 8.5, 0.55, 0.7])\nsave_fig(\"silhouette_score_vs_k_plot\")\nplt.show()","d3cbbd8c":"from sklearn.metrics import silhouette_samples\nfrom matplotlib.ticker import FixedLocator, FixedFormatter\n\nplt.figure(figsize=(11, 9))\n\nfor k in (3, 4, 5, 6):\n    plt.subplot(2, 2, k - 2)\n    \n    y_pred = kmeans_per_k[k - 1].labels_\n    silhouette_coefficients = silhouette_samples(X, y_pred)\n\n    padding = len(X) \/\/ 30\n    pos = padding\n    ticks = []\n    for i in range(k):\n        coeffs = silhouette_coefficients[y_pred == i]\n        coeffs.sort()\n\n        color = mpl.cm.Spectral(i \/ k)\n        plt.fill_betweenx(np.arange(pos, pos + len(coeffs)), 0, coeffs,\n                          facecolor=color, edgecolor=color, alpha=0.7)\n        ticks.append(pos + len(coeffs) \/\/ 2)\n        pos += len(coeffs) + padding\n\n    plt.gca().yaxis.set_major_locator(FixedLocator(ticks))\n    plt.gca().yaxis.set_major_formatter(FixedFormatter(range(k)))\n    if k in (3, 5):\n        plt.ylabel(\"Cluster\")\n    \n    if k in (5, 6):\n        plt.gca().set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])\n        plt.xlabel(\"Silhouette Coefficient\")\n    else:\n        plt.tick_params(labelbottom=False)\n\n    plt.axvline(x=silhouette_scores[k - 2], color=\"red\", linestyle=\"--\")\n    plt.title(\"$k={}$\".format(k), fontsize=16)\n\nsave_fig(\"silhouette_analysis_plot\")\nplt.show()","95f3eeb6":"## this case -> optimal k = 5","7025cf6c":"## this case -> optimal k = 4","715909fc":"# 2. Find high silhouette score","ffbcfa5d":"# 1. Find optimal inertia ","84d9d0ca":"As you can see,  \ud835\udc58=5  looks like the best option here, as all clusters are roughly the same size, and they all cross the dashed line, which represents the mean silhouette score.","fc7cb4bd":"As you can see, this visualization is much richer than the previous one: in particular, although it confirms that  \ud835\udc58=4  is a very good choice, but it also underlines the fact that  \ud835\udc58=5  is quite good as well.","87f0c980":"## this case -> optimal k is 4.","c93be3b6":"# 3. silhouette diagram","aa21fc36":"As you can see, there is an elbow at  \ud835\udc58=4 , which means that less clusters than that would be bad, and more clusters would not help much and might cut clusters in half. So  \ud835\udc58=4  is a pretty good choice. Of course in this example it is not perfect since it means that the two blobs in the lower left will be considered as just a single cluster, but it's a pretty good clustering nonetheless.","d09301dc":"# global variables","964cd193":"An even more informative visualization is given when you plot every instance's silhouette coefficient, sorted by the cluster they are assigned to and by the value of the coefficient. This is called a silhouette diagram:","f8a7c2e4":"# common functions","cb0ec2a4":"# make data ","d27a257d":"## make labels","35a882e1":"# import libraries"}}