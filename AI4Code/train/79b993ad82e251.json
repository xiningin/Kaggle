{"cell_type":{"a6f4c2ea":"code","f366e9ab":"code","2f40002b":"code","4554f218":"code","3c7d7c85":"code","8c78aac2":"code","614be025":"code","a7eca573":"code","c1bf3fe8":"code","d48d0ed8":"code","e4a483ed":"code","59387960":"code","68afa909":"code","449030a5":"code","f9542fa7":"code","400e9f89":"code","2825fd68":"code","cc891049":"code","035088a2":"code","a9b64acc":"code","ced47c42":"code","9fdcfaa7":"code","be11f25d":"markdown","30a83fd7":"markdown","e43530be":"markdown","e65da060":"markdown","73138f45":"markdown"},"source":{"a6f4c2ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f366e9ab":"import matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport seaborn as sns\nfrom sklearn import preprocessing","2f40002b":"data = pd.read_csv('\/kaggle\/input\/gtd\/globalterrorismdb_0718dist.csv',encoding='latin1')","4554f218":"indo_data = data[data['country_txt'] == 'Indonesia']\nindo_data = indo_data.rename(\n    columns={'eventid':'id', 'iyear':'year', 'imonth':'month', 'iday':'day',\n             'country_txt':'country', 'provstate':'state', 'targtype1_txt':'target',\n             'weaptype1_txt':'weapon', 'nkill':'fatalities', 'nwound':'injuries','attacktype1_txt':'attack','gname':'group','success':'success'})","3c7d7c85":"indo_data.head()","8c78aac2":"indo_data['fatalities'] = indo_data['fatalities'].fillna(0).astype(int)\nindo_data['injuries'] = indo_data['injuries'].fillna(0).astype(int)\nindo_data['totalFatalities']=indo_data['injuries']+indo_data['fatalities']","614be025":"req_cols=['month','state','target','weapon','attack','group','injuries','fatalities','totalFatalities','success']\nreq_data=indo_data[req_cols]\n","a7eca573":"req_data.head()","c1bf3fe8":"req_data=req_data.dropna()","d48d0ed8":"byState=[[i,req_data.groupby('state').totalFatalities.sum()[i]] for i in req_data.groupby('state').totalFatalities.sum().index]\nbyState=sorted(byState,key=lambda x:x[1],reverse=True)\n\nbyTarget=[[i,req_data.groupby('target').totalFatalities.sum()[i]] for i in req_data.groupby('target').totalFatalities.sum().index]\nbyTarget=sorted(byTarget,key=lambda x:x[1],reverse=True)\n\n\nbyWeapon=[[i,req_data.groupby('weapon').totalFatalities.sum()[i]] for i in req_data.groupby('weapon').totalFatalities.sum().index]\nbyWeapon=sorted(byWeapon,key=lambda x:x[1],reverse=True)\n\n\nbyAttack=[[i,req_data.groupby('attack').totalFatalities.sum()[i]] for i in req_data.groupby('attack').totalFatalities.sum().index]\nbyAttack=sorted(byAttack,key=lambda x:x[1],reverse=True)\n\nbyGroup=[[i,req_data.groupby('group').totalFatalities.sum()[i]] for i in req_data.groupby('group').totalFatalities.sum().index]\nbyGroup=sorted(byGroup,key=lambda x:x[1],reverse=True)\n","e4a483ed":"n=len(byState)\nbyStated=dict()\nfor i in range(n):\n    byStated[byState[i][0]]=(i+1)\n\nn=len(byTarget)\nbyTargetd=dict()\nfor i in range(n):\n    byTargetd[byTarget[i][0]]=(i+1)\n\nn=len(byWeapon)\nbyWeapond=dict()\nfor i in range(n):\n    byWeapond[byWeapon[i][0]]=(i+1)\n\n\nn=len(byAttack)\nbyAttackd=dict()\nfor i in range(n):\n    byAttackd[byAttack[i][0]]=(i+1)\n    \nn=len(byGroup)\nbyGroupd=dict()\nfor i in range(n):\n    byGroupd[byGroup[i][0]]=(i+1)","59387960":"lEnc=req_data.replace({'state':byStated, 'target':byTargetd, 'weapon': byWeapond, 'attack': byAttackd,'group':byGroupd})\n","68afa909":"lEnc.head()","449030a5":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import tree\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import accuracy_score,confusion_matrix, classification_report,mean_squared_error","f9542fa7":"datax = lEnc.iloc[:,:-1]\ndatay = lEnc.iloc[:,-1]","400e9f89":"trainX, testX, trainy, testy = train_test_split(datax,datay,test_size=0.3)","2825fd68":"clf = RandomForestClassifier(max_depth=10, oob_score = True,n_jobs = -1,random_state = 100)\nclf.fit(trainX,trainy)\ntest_pred = clf.predict(testX)\n\nprint('Confusion matrix : \\n',confusion_matrix(testy,test_pred))\nprint('\\nClassification Report : \\n',classification_report(testy, test_pred, target_names=['class 0', 'class 1']))\nprint('Mean Squared error : ',mean_squared_error(testy, test_pred, squared=False))","cc891049":"gnb = GaussianNB()\ntest_pred = gnb.fit(trainX, trainy).predict(testX)\n\nprint('Confusion matrix : \\n',confusion_matrix(testy,test_pred))\nprint('\\nClassification Report : \\n',classification_report(testy, test_pred, target_names=['class 0', 'class 1']))\nprint('Mean Squared error : ',mean_squared_error(testy, test_pred, squared=False))","035088a2":"clf = tree.DecisionTreeClassifier()\nclf = clf.fit(trainX, trainy)\ntest_pred = clf.predict(testX)\n\nprint('Confusion matrix : \\n',confusion_matrix(testy,test_pred))\nprint('\\nClassification Report : \\n',classification_report(testy, test_pred, target_names=['class 0', 'class 1']))\nprint('Mean Squared error : ',mean_squared_error(testy, test_pred, squared=False))","a9b64acc":"fig = plt.figure(figsize=(25,20))\n_ = tree.plot_tree(clf)","ced47c42":"clf = LogisticRegression(random_state=0).fit(trainX, trainy)\ntest_pred = clf.predict(testX)\n\nprint('Confusion matrix : \\n',confusion_matrix(testy,test_pred))\nprint('\\nClassification Report : \\n',classification_report(testy, test_pred, target_names=['class 0', 'class 1']))\nprint('Mean Squared error : ',mean_squared_error(testy, test_pred, squared=False))","9fdcfaa7":"km = KMeans(n_clusters=2).fit(trainX, trainy)\ntest_pred = km.predict(testX)\n\nprint('Confusion matrix : \\n',confusion_matrix(testy,test_pred))\nprint('\\nClassification Report : \\n',classification_report(testy, test_pred, target_names=['class 0', 'class 1']))\nprint('Mean Squared error : ',mean_squared_error(testy, test_pred, squared=False))","be11f25d":"Logistic Regression","30a83fd7":"K-Means Clustering","e43530be":"Random Forest Classifier","e65da060":"Gaussian Navie Bayes","73138f45":"Decision Tree"}}