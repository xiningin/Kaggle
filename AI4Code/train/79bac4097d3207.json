{"cell_type":{"949149f0":"code","417efb7c":"code","8307bfc0":"code","2c3be774":"code","0f7c42e1":"code","ddb07f0c":"code","34a4cd4c":"code","0b867cd4":"code","8cccc06c":"code","3ea7864d":"code","9db3fce9":"code","1a1386a2":"code","8d99ce0f":"code","c9d11bb0":"code","127c767f":"code","65ae03bb":"code","5a1c0312":"code","08466486":"code","ff7445b5":"code","f98f5f2a":"code","c4054fd1":"code","bc00c097":"code","ce097afe":"code","4b6337b0":"code","7901db01":"code","f7b9fd24":"code","c6f231d7":"code","624df24a":"code","f22717db":"code","a140ee8a":"code","f530333d":"code","6f86d7cd":"code","bd751932":"code","ec46e5b0":"code","9bc8cc6c":"code","dd9c675b":"code","a3873a74":"code","03345423":"code","ff810b62":"code","eaf4714c":"code","ffe4b5f5":"code","4707afcd":"code","e24e35e8":"code","5d48d419":"code","e12a01cd":"code","dcc55776":"code","4b12cf4f":"code","27642890":"code","0b63f4cb":"code","8ede4488":"code","171fc438":"code","cdf0a32d":"code","d7ccc6b0":"code","3a121911":"code","cb94e8e8":"code","142e62fb":"code","26f9b329":"code","239eb812":"code","f3a1004a":"code","0fd8cf7d":"code","fdd56090":"code","f812a05c":"code","61898201":"code","c58042ae":"code","42626f9e":"markdown","e8748583":"markdown","d8945291":"markdown","30a7ef3c":"markdown","d606b560":"markdown","dd57161a":"markdown","40259df6":"markdown","205ca10d":"markdown","b0cf7a8f":"markdown","6fe27834":"markdown","4525a30e":"markdown","99735fab":"markdown","ab188086":"markdown","282f8959":"markdown","de80ca34":"markdown","ee84c4ee":"markdown","806f38b1":"markdown","0a26040a":"markdown","16c7ab36":"markdown","85e295ab":"markdown","16729583":"markdown","40152d62":"markdown","f1f1769e":"markdown","d10923c1":"markdown","397e62d1":"markdown"},"source":{"949149f0":"a, b, c, d, e = 3, 2, 2.0, -3, 10\n\na \/ b       # = 1\n","417efb7c":"a \/ c                \n","8307bfc0":"d \/ b                 \n","2c3be774":"b \/ a                 \n","0f7c42e1":"b\/ c               \n","ddb07f0c":"float(a) \/ b           # = 1.5  \n","34a4cd4c":"a \/float(b)           # = 1.5","0b867cd4":"a \/\/ b  # force floor division","8cccc06c":"a, b = 1, 2","3ea7864d":"a+b","9db3fce9":"a += b # inplace addition","1a1386a2":"a","8d99ce0f":"import operator","c9d11bb0":"operator.add(a, b) #  a=3,b=2","127c767f":"a = operator.iadd(a, b) # inplace addition equal to a+=b","65ae03bb":"a","5a1c0312":"\"first string \" + \"second string\"","08466486":"[1, 2, 3] + [4, 5, 6]","ff7445b5":"a, b = 2, 3    \npow(a, b) ","f98f5f2a":"(a ** b)","c4054fd1":"import math \nmath.pow(a, b)","bc00c097":"import operator \noperator.pow(a, b)","ce097afe":"a, b, c = 2, 3, 2\npow(2, 3, 2)           # 0, calculates (2 ** 3) % 2, but as per Python docs,             ","4b6337b0":"import math \nimport cmath \nc = 4\nmath.sqrt(c)           # = 2.0 (always float; does not allow complex results) \n","7901db01":"cmath.sqrt(c)          # = (2+0j) (always complex)","f7b9fd24":"import math \nx = 8 \nmath.pow(x, 1\/3) # evaluates to 2.0\n\n","c6f231d7":"x**(1\/3) # evaluates to 2.0","624df24a":"math.exp(0)  # 1.0","f22717db":"math.exp(1)  # 2.718281828459045 (e)","a140ee8a":"import math\na, b = 1, 2","f530333d":"math.sin(a)  # returns the sine of 'a' in radians # Out: 0.8414709848078965","6f86d7cd":"math.cosh(b)  # returns the inverse hyperbolic cosine of 'b' in radians # Out: 3.7621956910836314\n","bd751932":"math.atan(math.pi)  # returns the arc tangent of 'pi' in radians # Out: 1.2626272556789115","ec46e5b0":"math.hypot(a, b) # returns the Euclidean norm, same as math.sqrt(a*a + b*b) # Out: 2.23606797749979\n","9bc8cc6c":"math.degrees(a) # Out: 57.29577951308232\n","dd9c675b":"math.radians(57.29577951308232) # Out: 1.0","a3873a74":"It is common within applications to need to have code like this:\n","03345423":"a = a + 1\n# or\na= a*2\n","ff810b62":"a += 1\n# and \na *=2 ","eaf4714c":"a, b = 1, 2","ffe4b5f5":"b - a ","4707afcd":"import operator        # contains 2 argument arithmetic functions \noperator.sub(b, a)     # = 1\n","e24e35e8":"a, b = 2, 3\na * b","5d48d419":"import operator\noperator.mul(a, b)","e12a01cd":"3 * 'ab'  # = 'ababab' ","dcc55776":"import math \nimport cmath\n\nmath.log(5)","4b12cf4f":"math.log(5, math.e)","27642890":"cmath.log(5)","0b63f4cb":"math.log(1000, 10)","8ede4488":"cmath.log(1000, 10)\n","171fc438":"# Logarithm base e - 1 (higher precision for low values)\nmath.log1p(5)","cdf0a32d":"math.log2(8)","d7ccc6b0":"math.log10(100)","3a121911":"cmath.log10(100)","cb94e8e8":"3 % 4     # 3","142e62fb":"10 % 2    # 0","26f9b329":"6 % 4     # 2","239eb812":"import operator\noperator.mod(3 , 4) ","f3a1004a":"-9 % 7","0fd8cf7d":"9 % -7 ","fdd56090":"-9 % -7","f812a05c":"quotient, remainder = divmod(9, 4)","61898201":"print(quotient)\nprint(remainder)","c58042ae":"quotient, remainder = divmod(-9, 7)\nprint(quotient)\nprint(remainder)","42626f9e":"Or by using the operator module:","e8748583":"The function math.exp(x) computes e ** x.\n","d8945291":"### Modulus\n","30a7ef3c":"Trigonometric Functions","d606b560":"#### Special functions","dd57161a":"There is an e\ufb00ective shortcut for these in place operations","40259df6":"By default, the math.log function calculates the logarithm of a number, base e. You can optionally specify a base as the second argument.\n","205ca10d":"Python does common mathematical operators on its own, including integer and \ufb02oat division, multiplication, exponentiation, addition, and subtraction. The math module (included in all standard Python versions) o\ufb00ers expanded functionality like trigonometric functions, root operations, logarithms, and many more. \n","b0cf7a8f":"Note: The * operator is also used for repeated concatenation of strings, lists, and tuples:","6fe27834":"Any mathematic operator can be used before the '=' character to make an inplace operation:\n","4525a30e":"To compute other roots, such as a cube root, raise the number to the reciprocal of the degree of the root. This could be done with any of the exponential functions or operator.","99735fab":"Note: the + operator is also used for concatenating strings, lists and tuples:","ab188086":"### Inplace Operations\n","282f8959":"### Logarithms\n","de80ca34":"# Chapter 9: Simple Mathematical Operators\n","ee84c4ee":"Like in many other languages, Python uses the % operator for calculating modulus.","806f38b1":"### Division\n","0a26040a":"di\ufb00erence between the built-in pow and math.pow is that the built-in pow can accept three arguments:","16c7ab36":"- -= decrement the variable in place \n- += increment the variable in place \n- *= multiply the variable in place \n- \/= divide the variable in place \n- \/\/= \ufb02oor divide the variable in place # Python 3 \n- %= return the modulus of the variable in place \n- **= raise to a power in place\n","85e295ab":"### Addition\n","16729583":"You can also use negative numbers.\n","40152d62":"The function math.sqrt(x) calculates the square root of x.\n","f1f1769e":"### Subtraction\n","d10923c1":"### Exponentiation\n","397e62d1":"### Multiplication\n"}}