{"cell_type":{"bb66b777":"code","5e92dad8":"code","f2bcd37b":"code","90c4cab0":"code","3b9213be":"code","54b31748":"code","578eee88":"code","6ed6ee31":"code","2d7786d3":"code","415320cc":"code","70c597b5":"markdown","dd4e70e4":"markdown","cb0b59d5":"markdown","161f8c60":"markdown","f30bd451":"markdown","70dcad41":"markdown","ad507e30":"markdown","adcbde77":"markdown","63be3dcf":"markdown","12f9c0f7":"markdown","eb6df69c":"markdown","9f6810fc":"markdown"},"source":{"bb66b777":"import numpy as np\nimport pandas as pd\nfrom fastai.vision.all import *\nimport torchvision.models as models\nfrom sklearn.model_selection import train_test_split","5e92dad8":"BASE_DIR = '..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset'\nclasses = [i for i in os.listdir(BASE_DIR) if '.' not in i]\nclasses","f2bcd37b":"image_paths = []\nimage_paths_gt = []\nimage_classes = np.array([[cls]*1000 for cls in classes]).reshape(-1)\nfor cls in classes:\n    gt = cls + ' GT'\n    image_paths.extend([os.path.join(BASE_DIR, cls,cls, i) for i in os.listdir(os.path.join(BASE_DIR, cls,cls))])\n    image_paths_gt.extend([os.path.join(BASE_DIR, cls,gt, i) for i in os.listdir(os.path.join(BASE_DIR, cls, gt))])\n","90c4cab0":"img_shape = (590 , 445, 3)","3b9213be":"data = pd.DataFrame({'path':image_paths, 'class':image_classes, })\ndata.head()","54b31748":"fig, axes = plt.subplots(nrows=2, ncols=5, figsize=(10, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\nsample_df = data.sample(10)\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(sample_df[\"path\"].iloc[i]))\n    ax.set_title(sample_df[\"class\"].iloc[i])\nplt.tight_layout()\nplt.show()","578eee88":"X_train, X_valid, y_train, y_valid = train_test_split(data['path'], data['class'], test_size=0.2, random_state=42, \n                               stratify=data[['class']])","6ed6ee31":"data['is_valid'] = data.index.isin(list(y_valid.index))","2d7786d3":"dls = ImageDataLoaders.from_df(data, valid_col='is_valid', seed=42, shuffle=True, \n                               bs=32, item_tfms=Resize(img_shape[:-1]), batch_tfms=aug_transforms(mult=2))","415320cc":"learn = cnn_learner(dls, models.mobilenet_v2, cut=-1, pretrained=True, metrics=accuracy)\nlearn.fine_tune(5)","70c597b5":"Voila! We see that our model runs for just 5 epochs and gives us a perfect accuracy of 100%!\nI hope you enjoyed reading this short notebook on how to get started with Fast.ai. Do share this notebook and give me an upvote! \ud83d\ude00","dd4e70e4":"The `cnn_learner` class helps us train a pretrained model. A pretrained model can be thought of as a model which has already been trained on some data. Thus, this will help us have a better starting point when working on our problem rather than starting to train a model from scratch.","cb0b59d5":"## Viewing our data","161f8c60":"In this notebook, we will look at a small primer on how to get started with Fast.ai within minutes and build our first Neural Network in less than 10 lines of code!","f30bd451":"# Importing Libraries","70dcad41":"Fast.ai is an awesome Python library that helps Data Sceince Practioners build Neural Networks with minimal lines of code. The creator of Fast.ai Professor Jeremy Howard also has a bunch of courses where he teaches Deep Learning via Fast.ai.","ad507e30":"Here, we use **the MobileNet V2** pretrained model which has been trained on a famous dataset called the ImageNet dataset which comprises of more than a million images of different things.","adcbde77":"<img src=\"https:\/\/miro.medium.com\/max\/700\/1*PQTzNNvBlmjW0Eca-nw14g.png\"\n     alt=\"Fast.ai Icon\"\n     style=\"float: left; margin-right: 10px;\" \/>","63be3dcf":"## Extracting Image Paths","12f9c0f7":"# Splitting into Train and Valid Set","eb6df69c":"This step is important for our `ImageDataLoader` to be able to parse which observations should be used for training and validation respectively.","9f6810fc":"A `DataLoader` is a class which is responsible for efficient iteration and parallelization over our data when training a model. \n\nFast.ai provides a bunch of different types of data loaders depending on the type of data we are working on. Since this dataset has images we use the `ImageDataLoaders`.\n\nWe also use `Resize` to resize our image based on the desired shape provided by the dataset creator\n\nLastly, the `aug_transforms` method helps us easily perform transformations on the images."}}