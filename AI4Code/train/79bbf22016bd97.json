{"cell_type":{"b5d6365d":"code","5c51f7f2":"code","1e9fda0c":"code","48d292cb":"code","f2f32063":"code","7804bd5d":"code","e5b66e05":"code","5c04298b":"code","30bfde2e":"code","466ccc49":"code","9fdecdea":"code","129f5112":"code","7c5ea640":"code","945c5068":"code","e3525b19":"code","eb36c44a":"code","0f13187c":"code","0ac313a9":"code","0600de65":"code","3648baa7":"code","967e84d6":"code","8a7c57be":"code","928b0519":"markdown","806f4af9":"markdown","0d30400b":"markdown","59f51733":"markdown","48a1d92b":"markdown","84f9c7e7":"markdown"},"source":{"b5d6365d":"#importing libaries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5c51f7f2":"#importing dataset\nds = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')","1e9fda0c":"#reviewing dataset\nds.head()","48d292cb":"#checking type of feaures\nds.info()","f2f32063":"#dataset has 8124 rows and 23 columns\nds.shape","7804bd5d":"#checking for null values\nds.isnull().sum()","e5b66e05":"#taking care of categorical values\nfrom sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\nfor i in ds.columns:\n    ds[i]=le.fit_transform(ds[i])","5c04298b":"ds.head()","30bfde2e":"#dropping unnecessary features\nds.drop(['veil-type'], axis = 1, inplace = True)","466ccc49":"sns.countplot(x = 'class',data = ds)","9fdecdea":"plt.figure(figsize=(12,10))\nsns.heatmap(ds.corr(), cmap='Blues')","129f5112":"#defining dependent and independent variables\nx = ds.drop('class', axis=1)\ny = ds['class']","7c5ea640":"#splitting data into training and testing set\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)","945c5068":"#splitting data into training and testing set\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)","e3525b19":"#Logistic Regression\n#training model\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(max_iter = 10000)\nlr.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix,classification_report\ny_pred = lr.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nlra = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',lra)\nprint(\"Classification Report\",classification_report(y_test,y_pred))","eb36c44a":"#KNN\n#training model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski',p = 2)\nknn.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix,classification_report\ny_pred = knn.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nknna = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))\nprint(\"Classification Report\",classification_report(y_test,y_pred))","0f13187c":"#SVM\n#training model\nfrom sklearn.svm import SVC\nsvc = SVC(kernel = 'linear')\nsvc.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix,classification_report\ny_pred = svc.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nsva =accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))\nprint(\"Classification Report\",classification_report(y_test,y_pred))","0ac313a9":"#KERNEL SVM\n#training model\nfrom sklearn.svm import SVC\nsvc = SVC(kernel = 'rbf')\nsvc.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix,classification_report\ny_pred = svc.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nsva2 = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))\nprint(\"Classification Report\",classification_report(y_test,y_pred))","0600de65":"#NAIVE BAYES\n#training model\nfrom sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix,classification_report\ny_pred = nb.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nnba = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))\nprint(\"Classification Report\",classification_report(y_test,y_pred))","3648baa7":"#Decision Tree\n#training model\nfrom sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(criterion = 'entropy')\ndt.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix,classification_report\ny_pred = dt.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\ndta = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))\nprint(\"Classification Report\",classification_report(y_test,y_pred))","967e84d6":"#Random Forest\n#training model\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 60, criterion = 'entropy',random_state = 0)\nrf.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix,classification_report\ny_pred = rf.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nrfa = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))\nprint(\"Classification Report\",classification_report(y_test,y_pred))","8a7c57be":"#comparing accuracies\nplt.figure(figsize= (8,7))\nac = [lra,knna,sva,sva2,nba,dta,rfa]\nname = ['Logistic Regression','knn','svm','Kernel Svm','Naive Bayes','Decision Tree', 'Random Forest']\nsns.barplot(x = ac,y = name,palette='pastel')\nplt.title(\"Plotting the Model Accuracies\", fontsize=16, fontweight=\"bold\")","928b0519":"**AMONG ALL, DECISION TREE AND RANDOM FOREST GOT THE BEST ACCURACY OF 100%**","806f4af9":"**ALMOST 4200 IS EDIBLE(0) AND AROUND 3900 IS POISONOUS(1)**","0d30400b":"**NO NULL VALUES**","59f51733":"**TRAINING MODELS**","48a1d92b":"**PREDICTING WHETHER A MUSHROOM IS SAFE TO EAT OR NOT.**\n\nclasses: edible=e, poisonous=p\n\ncap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n\ncap-surface: fibrous=f,grooves=g,scaly=y,smooth=s\n\ncap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\n\nbruises: bruises=t,no=f\n\nodor: almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n\ngill-attachment: attached=a,descending=d,free=f,notched=n\n\ngill-spacing: close=c,crowded=w,distant=d\n\ngill-size: broad=b,narrow=n\n\ngill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y\n\nstalk-shape: enlarging=e,tapering=t\n\nstalk-root: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n\nstalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\nstalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\nstalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\nstalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\nveil-type: partial=p,universal=u\n\nveil-color: brown=n,orange=o,white=w,yellow=y\n\nring-number: none=n,one=o,two=t\n\nring-type: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n\nspore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n\npopulation: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n\nhabitat: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d","84f9c7e7":"**SOME OF THE COLUMNS ARE CORRELATED**"}}