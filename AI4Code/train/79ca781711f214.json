{"cell_type":{"28839bac":"code","955a424e":"code","9600d5c6":"code","0534a080":"code","431ca981":"code","cdf7a80d":"code","21d1c987":"code","411403aa":"code","6b2fec75":"code","a5a391d7":"code","63faebf3":"code","abdb3d28":"code","dde0dfa4":"code","e31053f5":"code","58063c51":"code","e70b2802":"code","47933747":"code","6af63ad7":"code","7487d5cd":"code","7f72b43c":"code","998ea84a":"code","7fe99551":"code","5ccf7ce0":"code","5c763293":"code","e6a85b14":"code","f16ed747":"code","cb1a88ae":"code","f8c00dff":"code","ae0b5394":"code","ad99605b":"code","813294be":"code","7f42b71e":"code","04400dc5":"code","86b826e1":"code","6a631b2d":"code","9d90479f":"code","62c0bba1":"code","90abecb9":"code","ba359743":"code","a1b18957":"markdown","b050ac13":"markdown","80a9a433":"markdown","0c3fe421":"markdown","1effdbd1":"markdown","7fef732d":"markdown","59884389":"markdown","dfc2f187":"markdown"},"source":{"28839bac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","955a424e":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport sklearn\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import MinMaxScaler\nimport json","9600d5c6":"dfmm = pd.read_csv(\"..\/input\/the-movies-dataset\/movies_metadata.csv\")\ndfc = pd.read_csv(\"..\/input\/the-movies-dataset\/credits.csv\")","0534a080":"print(dfmm.head() )\nprint(\"\\n\")\nprint(dfmm.isnull().any()) #to see if any of the data has values that are null\nprint(\"\\n\")\nprint(dfmm.dtypes) #to check the data types for each variables\nprint(\"\\n\")\nprint(dfmm.describe()) #to quickly see the different values\nprint(\"\\n\")","431ca981":"print(dfc.head() )\nprint(\"\\n\")\nprint(dfc.isnull().any()) #to see if any of the data has values that are null\nprint(\"\\n\")\nprint(dfc.dtypes) #to check the data types for each variables\nprint(\"\\n\")","cdf7a80d":"dfmm.drop(['belongs_to_collection', 'homepage', 'imdb_id', 'original_language', 'original_title', 'overview', 'poster_path', 'production_companies', 'production_countries', 'runtime', 'release_date', 'spoken_languages', 'status', 'tagline', 'title', 'video'], axis=1, inplace=True)\ndfmm.info()","21d1c987":"dfc['id'] = dfc['id'].apply(str)\ndfmerged = dfmm.merge(dfc, on='id')\ndfmerged","411403aa":"dfmerged['budget'] = pd.to_numeric(dfmerged['budget'], errors='coerce')\ndfmerged['budget'] = dfmerged['budget'].replace(0, np.nan)\ndfmerged[dfmerged['budget'].isnull()].shape","6b2fec75":"dfmerged['profit'] = dfmerged['revenue'] \/ dfmerged['budget']\ndfmerged[dfmerged['profit'].isnull()].shape","a5a391d7":"def clean_numeric(x):\n    try:\n        return float(x)\n    except:\n        return np.nan","63faebf3":"dfmerged['profit'] = dfmerged['profit'].apply(clean_numeric).astype('float')\ndfmerged['popularity'] = dfmerged['popularity'].apply(clean_numeric).astype('float')","abdb3d28":"dfmerged['profit'].describe()","dde0dfa4":"dfmprofitable = dfmerged.loc[dfmerged['profit'] >= 1]\ndfmprofitable","e31053f5":"print (dfmprofitable['cast'])\nprint (\"\\n\")\nprint (dfmprofitable['crew'])","58063c51":"n=0\n\nwhile n<=2100: #should be going to 45532\n    \n    if n==0 :\n        cast = dfmprofitable['cast'][n]\n        castbis = json.loads(cast.replace('\"\"','\"').replace(\"'\",'\"').replace('\"',\"'\").replace(\"None\", '\"None\"').replace(\"':None\", '\":\"None\"').replace(\"': '\", '\": \"').replace(\"': \", '\": ').replace(\"', '\", '\", \"').replace(\", '\", ', \"').replace(\"{'\", '{\"').replace(\"'}\", '\"}'))\n        dfcast = pd.DataFrame(castbis)\n                \n        dfcast['idm'] = \"\"\n        dfcast['idm'] = dfmprofitable['id'][n]\n        \n        n = n+1\n    \n    elif n==1451:\n        n+=1\n    \n    else:\n        try:\n            cast = dfmprofitable['cast'][n]\n            \n            castbis = json.loads(cast.replace('\"\"','\"').replace(\"'\",'\"').replace('\"',\"'\").replace(\"None\", '\"None\"').replace(\"':None\", '\":\"None\"').replace(\"': '\", '\": \"').replace(\"': \", '\": ').replace(\"', '\", '\", \"').replace(\", '\", ', \"').replace(\"{'\", '{\"').replace(\"'}\", '\"}').replace(r\"\\'\",\"'\"))\n            \n            for k in range(0,len(castbis)):\n                dfcast = dfcast.append(castbis[k], ignore_index = True)\n                \n            dfcast['idm'].fillna(dfmprofitable['id'][n], inplace = True) \n            n=n+1\n\n        except (KeyError): #the key as been droped so we skip it\n            n = n+1\n\nprint (dfcast)","e70b2802":"MVA=dfcast.name.loc[dfcast.name!=dfcast.name.shift()].value_counts()\nMVA","47933747":"n=0\n\nwhile n<=2100: #sould be going to 45532\n    \n    if n==0 :\n        crew = dfmprofitable['crew'][n]\n        crewbis = json.loads(crew.replace('\"\"','\"').replace(\"'\",'\"').replace('\"',\"'\").replace(\"None\", '\"None\"').replace(\"':None\", '\":\"None\"').replace(\"': '\", '\": \"').replace(\"': \", '\": ').replace(\"', '\", '\", \"').replace(\", '\", ', \"').replace(\"{'\", '{\"').replace(\"'}\", '\"}'))\n        dfcrew = pd.DataFrame(crewbis)\n                \n        dfcrew['idm'] = \"\"\n        dfcrew['idm'] = dfmprofitable['id'][n]\n        \n        n = n+1\n    \n    elif n==1451:\n        n+=1\n    \n    else:\n        try:\n            crew = dfmprofitable['crew'][n]\n            \n            crewbis = json.loads(crew.replace('\"\"','\"').replace(\"'\",'\"').replace('\"',\"'\").replace(\"None\", '\"None\"').replace(\"':None\", '\":\"None\"').replace(\"': '\", '\": \"').replace(\"': \", '\": ').replace(\"', '\", '\", \"').replace(\", '\", ', \"').replace(\"{'\", '{\"').replace(\"'}\", '\"}').replace(r\"\\'\",\"'\"))\n            \n            for k in range(0,len(crewbis)):\n                dfcrew = dfcrew.append(crewbis[k], ignore_index = True)\n                \n            dfcrew['idm'].fillna(dfmprofitable['id'][n], inplace = True) \n            n=n+1\n\n        except (KeyError): #the key as been droped so we skip it\n            n = n+1\n\nprint (dfcrew)","6af63ad7":"dfD = dfcrew.loc[dfcrew['job'] == 'Director']\nMVD=dfD.name.loc[dfD.name!=dfD.name.shift()].value_counts()\nMVD","7487d5cd":"dfmunprofitable = dfmerged.loc[dfmerged['profit'] < 1]\ndfmunprofitable","7f72b43c":"print (dfmunprofitable['cast'])\nprint (\"\\n\")\nprint (dfmunprofitable['crew'])","998ea84a":"n=6\n\nwhile n<=2100: #sould be going to 45532\n    \n    if n==6 :\n        unpcast = dfmunprofitable['cast'][n]\n        unpcastbis = json.loads(unpcast.replace('\"\"','\"').replace(\"'\",'\"').replace('\"',\"'\").replace(\"None\", '\"None\"').replace(\"':None\", '\":\"None\"').replace(\"': '\", '\": \"').replace(\"': \", '\": ').replace(\"', '\", '\", \"').replace(\", '\", ', \"').replace(\"{'\", '{\"').replace(\"'}\", '\"}'))\n        dfunpcast = pd.DataFrame(unpcastbis)\n        \n        dfunpcast['idm'] = \"\"\n        dfunpcast['idm'] = dfmunprofitable['id'][n]\n        \n        n = n+1\n    \n    elif n==1451:\n        n+=1\n    \n    else:\n        try:\n            unpcast = dfmunprofitable['cast'][n]\n            \n            unpcastbis = json.loads(unpcast.replace('\"\"','\"').replace(\"'\",'\"').replace('\"',\"'\").replace(\"None\", '\"None\"').replace(\"':None\", '\":\"None\"').replace(\"': '\", '\": \"').replace(\"': \", '\": ').replace(\"', '\", '\", \"').replace(\", '\", ', \"').replace(\"{'\", '{\"').replace(\"'}\", '\"}').replace(r\"\\'\",\"'\"))\n            \n            for k in range(0,len(unpcastbis)):\n                dfunpcast = dfunpcast.append(unpcastbis[k], ignore_index = True)\n            \n            dfunpcast['idm'].fillna(dfmunprofitable['id'][n], inplace = True)\n            n=n+1\n\n        except (KeyError): #the key as been droped so we skip it\n            n = n+1\n\nprint (dfunpcast)","7fe99551":"UA=dfunpcast.name.loc[dfunpcast.name!=dfunpcast.name.shift()].value_counts()\nUA","5ccf7ce0":"n=6\n\nwhile n<=2100: #sould be going to 45532\n    \n    if n==6 :\n        unpcrew = dfmunprofitable['crew'][n]\n        unpcrewbis = json.loads(unpcrew.replace('\"\"','\"').replace(\"'\",'\"').replace('\"',\"'\").replace(\"None\", '\"None\"').replace(\"':None\", '\":\"None\"').replace(\"': '\", '\": \"').replace(\"': \", '\": ').replace(\"', '\", '\", \"').replace(\", '\", ', \"').replace(\"{'\", '{\"').replace(\"'}\", '\"}'))\n        dfunpcrew = pd.DataFrame(unpcrewbis)\n        \n        dfunpcrew['idm'] = \"\"\n        dfunpcrew['idm'] = dfmunprofitable['id'][n]\n        \n        n = n+1\n    \n    elif n==1451:\n        n+=1\n    \n    else:\n        try:\n            unpcrew = dfmunprofitable['crew'][n]\n            \n            unpcrewbis = json.loads(unpcrew.replace('\"\"','\"').replace(\"'\",'\"').replace('\"',\"'\").replace(\"None\", '\"None\"').replace(\"':None\", '\":\"None\"').replace(\"': '\", '\": \"').replace(\"': \", '\": ').replace(\"', '\", '\", \"').replace(\", '\", ', \"').replace(\"{'\", '{\"').replace(\"'}\", '\"}').replace(r\"\\'\",\"'\"))\n            \n            for k in range(0,len(unpcrewbis)):\n                dfunpcrew = dfunpcrew.append(unpcrewbis[k], ignore_index = True)\n                \n            dfunpcrew['idm'].fillna(dfmunprofitable['id'][n], inplace = True) \n            \n            n=n+1\n\n        except (KeyError): #the key as been droped so we skip it\n            n=n+1\n\nprint (dfunpcrew)","5c763293":"dfUD = dfunpcrew.loc[dfunpcrew['job'] == 'Director']\nUD=dfUD.name.loc[dfUD.name!=dfUD.name.shift()].value_counts()\nUD","e6a85b14":"dfmerged['popularity'].describe()","f16ed747":"dfmpopular = dfmerged.loc[dfmerged['popularity'] >= 1]\ndfmpopular","cb1a88ae":"n=0\n\nwhile n<=2100: #sould be going to 45532\n    \n    if n==0 :\n        popcast = dfmpopular['cast'][n]\n        popcastbis = json.loads(popcast.replace('\"\"','\"').replace(\"'\",'\"').replace('\"',\"'\").replace(\"None\", '\"None\"').replace(\"':None\", '\":\"None\"').replace(\"': '\", '\": \"').replace(\"': \", '\": ').replace(\"', '\", '\", \"').replace(\", '\", ', \"').replace(\"{'\", '{\"').replace(\"'}\", '\"}'))\n        dfpopcast = pd.DataFrame(popcastbis)\n        \n        n = n+1\n    \n    elif n==1451:\n        n+=1\n    \n    else:\n        try:\n            popcast = dfmpopular['cast'][n]\n            \n            popcastbis = json.loads(popcast.replace('\"\"','\"').replace(\"'\",'\"').replace('\"',\"'\").replace(\"None\", '\"None\"').replace(\"':None\", '\":\"None\"').replace(\"': '\", '\": \"').replace(\"': \", '\": ').replace(\"', '\", '\", \"').replace(\", '\", ', \"').replace(\"{'\", '{\"').replace(\"'}\", '\"}').replace(r\"\\'\",\"'\"))\n            \n            for k in range(0,len(popcastbis)):\n                dfpopcast = dfpopcast.append(popcastbis[k], ignore_index = True)\n                \n            n=n+1\n\n        except (KeyError): #the key as been droped so we skip it\n            n = n+1\n\nprint (dfpopcast)","f8c00dff":"MPopA=dfpopcast.name.loc[dfpopcast.name!=dfpopcast.name.shift()].value_counts()\nMPopA","ae0b5394":"n=0\n\nwhile n<=2100: #sould be going to 45532\n    \n    if n==0 :\n        popcrew = dfmpopular['crew'][n]\n        popcrewbis = json.loads(popcrew.replace('\"\"','\"').replace(\"'\",'\"').replace('\"',\"'\").replace(\"None\", '\"None\"').replace(\"':None\", '\":\"None\"').replace(\"': '\", '\": \"').replace(\"': \", '\": ').replace(\"', '\", '\", \"').replace(\", '\", ', \"').replace(\"{'\", '{\"').replace(\"'}\", '\"}'))\n        dfpopcrew = pd.DataFrame(popcrewbis)\n        \n        n = n+1\n    \n    elif n==1451:\n        n+=1\n    \n    else:\n        try:\n            popcrew = dfmpopular['crew'][n]\n            \n            popcrewbis = json.loads(popcrew.replace('\"\"','\"').replace(\"'\",'\"').replace('\"',\"'\").replace(\"None\", '\"None\"').replace(\"':None\", '\":\"None\"').replace(\"': '\", '\": \"').replace(\"': \", '\": ').replace(\"', '\", '\", \"').replace(\", '\", ', \"').replace(\"{'\", '{\"').replace(\"'}\", '\"}').replace(r\"\\'\",\"'\"))\n            \n            for k in range(0,len(popcrewbis)):\n                dfpopcrew = dfpopcrew.append(popcrewbis[k], ignore_index = True)\n                \n            n=n+1\n\n        except (KeyError): #the key as been droped so we skip it\n            n = n+1\n\nprint (dfpopcrew)","ad99605b":"dfPopD = dfpopcrew.loc[dfpopcrew['job'] == 'Director']\nMPopD=dfPopD.name.loc[dfPopD.name!=dfPopD.name.shift()].value_counts()\nMPopD","813294be":"dfmunpopular = dfmerged.loc[dfmerged['popularity'] < 1]\ndfmunpopular","7f42b71e":"n=32\n\nwhile n<=2100: #sould be going to 45532\n    \n    if n==32 :\n        unpopcast = dfmunpopular['cast'][n]\n        unpopcastbis = json.loads(unpopcast.replace('\"\"','\"').replace(\"'\",'\"').replace('\"',\"'\").replace(\"None\", '\"None\"').replace(\"':None\", '\":\"None\"').replace(\"': '\", '\": \"').replace(\"': \", '\": ').replace(\"', '\", '\", \"').replace(\", '\", ', \"').replace(\"{'\", '{\"').replace(\"'}\", '\"}'))\n        dfunpopcast = pd.DataFrame(unpopcastbis)\n        \n        n = n+1\n    \n    elif n==1451:\n        n+=1\n    \n    else:\n        try:\n            unpopcast = dfmunpopular['cast'][n]\n            \n            unpopcastbis = json.loads(unpopcast.replace('\"\"','\"').replace(\"'\",'\"').replace('\"',\"'\").replace(\"None\", '\"None\"').replace(\"':None\", '\":\"None\"').replace(\"': '\", '\": \"').replace(\"': \", '\": ').replace(\"', '\", '\", \"').replace(\", '\", ', \"').replace(\"{'\", '{\"').replace(\"'}\", '\"}').replace(r\"\\'\",\"'\"))\n            \n            for k in range(0,len(unpopcastbis)):\n                dfunpopcast = dfunpopcast.append(unpopcastbis[k], ignore_index = True)\n                \n            n=n+1\n\n        except (KeyError): #the key as been droped so we skip it\n            n = n+1\n\nprint (dfunpopcast)","04400dc5":"UnpopA=dfunpopcast.name.loc[dfunpopcast.name!=dfunpopcast.name.shift()].value_counts()\nUnpopA","86b826e1":"n=32\n\nwhile n<=2100: #sould be going to 45532\n    \n    if n==32:\n        unpopcrew = dfmunpopular['crew'][n]\n        unpopcrewbis = json.loads(unpopcrew.replace('\"\"','\"').replace(\"'\",'\"').replace('\"',\"'\").replace(\"None\", '\"None\"').replace(\"':None\", '\":\"None\"').replace(\"': '\", '\": \"').replace(\"': \", '\": ').replace(\"', '\", '\", \"').replace(\", '\", ', \"').replace(\"{'\", '{\"').replace(\"'}\", '\"}'))\n        dfunpopcrew = pd.DataFrame(unpopcrewbis)\n        \n        n = n+1\n    \n    elif n==1451:\n        n+=1\n    \n    else:\n        try:\n            unpopcrew = dfmunpopular['crew'][n]\n            \n            unpopcrewbis = json.loads(unpopcrew.replace('\"\"','\"').replace(\"'\",'\"').replace('\"',\"'\").replace(\"None\", '\"None\"').replace(\"':None\", '\":\"None\"').replace(\"': '\", '\": \"').replace(\"': \", '\": ').replace(\"', '\", '\", \"').replace(\", '\", ', \"').replace(\"{'\", '{\"').replace(\"'}\", '\"}').replace(r\"\\'\",\"'\"))\n            \n            for k in range(0,len(unpopcrewbis)):\n                dfunpopcrew = dfunpopcrew.append(unpopcrewbis[k], ignore_index = True)\n                \n            n=n+1\n\n        except (KeyError): #the key as been droped so we skip it\n            n = n+1\n\nprint (dfunpopcrew)","6a631b2d":"dfUnpopD = dfunpopcrew.loc[dfunpopcrew['job'] == 'Director']\nUnpopD=dfUnpopD.name.loc[dfUnpopD.name!=dfUnpopD.name.shift()].value_counts()\nUnpopD","9d90479f":"dfmteam = dfcast.merge(dfcrew, on='idm')\ndfmteam","62c0bba1":"dfbestteam = dfmteam.loc[dfmteam['job'] == 'Director']\nBestTeam=dfbestteam.groupby(['name_y', 'name_x'])['idm'].count().sort_values(ascending=False)\n\nBestTeam","90abecb9":"dfmunpteam = dfunpcast.merge(dfunpcrew, on='idm')\ndfmunpteam","ba359743":"dfworstteam = dfmunpteam.loc[dfmunpteam['job'] == 'Director']\nWorstTeam=dfworstteam.groupby(['name_y', 'name_x'])['idm'].count().sort_values(ascending=False)\n\nWorstTeam","a1b18957":"# Studying what pair of actor and director are the most bankable","b050ac13":"We are going to merge the credits and the movies metadata. But first We need to transform the id column that is an object in the movies metadate into an integer.","80a9a433":"We will remove the columns that won't be usefull","0c3fe421":"We are now going to see if the succes of the movie as anything to do with popularity","1effdbd1":"We had some difficulties to transform the data that was stored in json into dataframe. We stopped replacing the syntax because the correction were starging to overlap.","7fef732d":"If the value is superior to 1 it would indicate profit whereas a value inferior to 1 would indicate a loss.","59884389":"Lets now study the less sucesfull movies","dfc2f187":"The two database used:"}}