{"cell_type":{"c14c7126":"code","1dc20d1f":"code","099bf77c":"code","326be0a6":"code","51da40c5":"code","5c49596b":"code","a79b3812":"code","7bfe60ed":"code","fdc57903":"code","b81deae4":"code","39041531":"code","dc2ab6cb":"code","b405f7f4":"code","186a55fd":"code","caac42a0":"code","68cdf2fb":"code","318a6794":"code","63f9eb78":"code","8c4d704d":"code","19f398e5":"code","fc227d5f":"code","ca71daa5":"code","3f751c65":"code","188e2fac":"code","bbd97c29":"code","7880bba0":"code","886f48ae":"code","ed7bada5":"code","7bf09b0e":"code","0ebfefc2":"code","3e419a78":"code","2c68a38f":"markdown","04b6c0d1":"markdown"},"source":{"c14c7126":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1dc20d1f":"import pandas as pd\nimport io\nimport requests","099bf77c":"url = 'https:\/\/data.brasil.io\/dataset\/covid19\/caso_full.csv.gz'\nresponse = requests.get(url)\ncontent = response.content\nprint(type(content))","326be0a6":"df = pd.read_csv(io.BytesIO(content), sep=\",\", compression=\"gzip\", index_col=0, quotechar='\"')","51da40c5":"pd.set_option('display.max_columns', None)","5c49596b":"df['city_ibge_code'] = df['city_ibge_code'].astype(str)\ndf['city_ibge_code'] = df['city_ibge_code'].str.slice(0, 7)","a79b3812":"df0 = df[df['place_type'] =='city']\ndf0 = df0[df0['is_repeated'] ==False]\ndf0['year'] = df0['epidemiological_week'].astype(str).str.slice(0, 4)\ndf0['week'] = df0['epidemiological_week'].astype(str).str.slice(4, 6)\ndf0.head()","7bfe60ed":"# select = df0[df0['epidemiological_week'] ==202130]\nsel_state = 'PR'\nselect = df0\nselect = select[select['state'] ==sel_state]\nselect.head()","fdc57903":"import geopandas as gpd\nimport zipfile","b81deae4":"url_geo = 'http:\/\/geoftp.ibge.gov.br\/organizacao_do_territorio\/malhas_territoriais\/malhas_municipais\/municipio_2020\/Brasil\/BR\/BR_Municipios_2020.zip'\nlocal_path = '.\/municipios'\nresponse_geo = requests.get(url_geo)\nz = zipfile.ZipFile(io.BytesIO(response_geo.content))\n\nz.extractall(path=local_path)\nfilenames = [y for y in sorted(z.namelist()) for ending in ['dbf', 'prj', 'shp', 'shx'] if y.endswith(ending)] \nprint(filenames)\n","39041531":"munic = gpd.read_file('.\/municipios\/BR_Municipios_2020.shp')","dc2ab6cb":"munic.shape","b405f7f4":"munic.head()","186a55fd":"munic['state_ibge_code'] = munic['CD_MUN'].str.slice(0, 2)","caac42a0":"munic = munic.rename(columns={'CD_MUN': 'city_ibge_code'})","68cdf2fb":"polygons=munic.copy()\ncentroids = polygons\ncentroids['geometry'] = polygons.geometry.centroid\ncentroids.head(3)","318a6794":"select_geo = centroids[centroids['SIGLA_UF'] ==sel_state]","63f9eb78":"cases = pd.merge(select, select_geo, how = 'inner', on = 'city_ibge_code')\ncases.head()","8c4d704d":"cases['lon'] = cases.geometry.apply(lambda p: p.x)\ncases['lat'] = cases.geometry.apply(lambda p: p.y)","19f398e5":"url_geo_estados = 'http:\/\/geoftp.ibge.gov.br\/organizacao_do_territorio\/malhas_territoriais\/malhas_municipais\/municipio_2020\/Brasil\/BR\/BR_UF_2020.zip'\nlocal_path_estados = '.\/estados'\nresponse_geo_estados = requests.get(url_geo_estados)\nz_estados = zipfile.ZipFile(io.BytesIO(response_geo_estados.content))\n\nz_estados.extractall(path=local_path_estados)\nfilenames_estados = [y for y in sorted(z_estados.namelist()) for ending in ['dbf', 'prj', 'shp', 'shx'] if y.endswith(ending)] \nprint(filenames_estados)","fc227d5f":"estados = gpd.read_file('.\/estados\/BR_UF_2020.shp')","ca71daa5":"estados.shape","3f751c65":"polygons_est=estados.copy()\ncentroids_est = polygons_est\ncentroids_est['geometry'] = polygons_est.geometry.centroid\ncentroids_est.head(3)","188e2fac":"centroids_est['centro_lon'] = centroids_est.geometry.apply(lambda p: p.x)\ncentroids_est['centro_lat'] = centroids_est.geometry.apply(lambda p: p.y)\ncentroids_est","bbd97c29":"df_centro = centroids_est[centroids_est['SIGLA_UF'] ==sel_state]\ncentro_lon=df_centro['centro_lon']\ncentro_lat=df_centro['centro_lat']\ncentro_lon = centro_lon.values[0]\ncentro_lat = centro_lat.values[0]\nprint(centro_lon)\nprint(centro_lat)\n","7880bba0":"# centroids_est.query('SIGLA_UF==sel_state')","886f48ae":"import folium\nfrom folium.plugins import HeatMap","ed7bada5":"aoi = folium.Map(location=[centro_lat, centro_lon], zoom_start=10)","7bf09b0e":"total_cases = cases[['lon', 'lat', 'last_available_confirmed_per_100k_inhabitants']].groupby(['lat', 'lon']).sum().reset_index().values.tolist()","0ebfefc2":"grad = {'0.2': 'Navy', '0.30': 'Blue', '0.35': 'Green', '0.45': 'Yellow','0.8': 'Red'}","3e419a78":"HeatMap(total_cases, radius=15, gradient = grad, max_zoom=13).add_to(aoi)\naoi","2c68a38f":"Semanas epidemiol\u00f3gicas: http:\/\/portalsinan.saude.gov.br\/calendario-epidemiologico-2020\/43-institucional\/171-calendario-epidemiologico-2021","04b6c0d1":"Gradients: https:\/\/docs.microsoft.com\/en-us\/bingmaps\/v8-web-control\/map-control-concepts\/heat-map-module-examples\/heat-map-color-gradients"}}