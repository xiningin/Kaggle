{"cell_type":{"2334450d":"code","6dbe5392":"code","40ea5875":"code","0ea462e3":"code","7c54c18b":"code","5e011c73":"code","d2ae5b9f":"code","5b496984":"code","14aaab4f":"code","0611be22":"code","9fd68fab":"code","65f20a01":"code","b8d35e0c":"code","1af4e16d":"code","27cc7b4e":"code","b841de98":"markdown","f129dedb":"markdown","6c714119":"markdown","9842834c":"markdown","4c57235d":"markdown"},"source":{"2334450d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n","6dbe5392":"df = pd.read_csv('..\/input\/totarecore1\/public.csv', index_col=0)\ndf.head(2)","40ea5875":"df.corr()","0ea462e3":"target_columns = ['AgPPM', 'AsPPM', 'AuPPM', 'BaPPM', 'BiPPM', 'CdPPM', 'CoPPM', 'CuPPM', 'FePCT', 'MnPPM', 'MoPPM', 'NiPPM', 'PPCT', 'PbPPM', 'SPPM',\n                  'SbPPM', 'SePPM', 'SnPPM', 'SrPPM', 'TePPB', 'ThPPB', 'UPPB', 'VPCT', 'WPPM', 'ZnPPM', 'ZrPPM', 'BePPM', 'AlPPM', 'CaPPM', 'CePPM', \n                  'CrPPM', 'CsPPM', 'GaPPM', 'GePPM', 'HfPPM', 'InPPM', 'KPPM', 'LaPPM', 'LiPPM', 'MgPPM', 'NaPPM', 'NbPPM', 'RbPPM', 'RePPM', 'ScPPM',\n                  'TaPPM', 'TiPPM', 'TlPPM', 'YPPM']","7c54c18b":"n = 10\ndf_new = df.groupby(['SiteID']).mean()\ndf_ = df_new.sort_values(by=[\"CuPPM\", \"AuPPM\", \"NiPPM\", \"PbPPM\", \"ZnPPM\", \"AgPPM\", \"AlPPM\", \"FePCT\", \"MgPPM\", \"CaPPM\", \"NaPPM\", \"KPPM\"])\ndf_.tail(n)","5e011c73":"df_.head(n)","d2ae5b9f":"import plotly\nimport plotly.graph_objs as go","5b496984":"def plotly_bar_plot(plot_df, \n    title, \n    barmode=None,\n    xaxis_title='Month', \n    yaxis_title='Count', \n    write_image=None,\n    slider=False,\n    color=None):\n    \"\"\"\n    Creates standard plotly stacked bar chart. X value (such as date) must be first column.\n    For stacked bar, set barmode to 'stack'.\n    \"\"\"\n    xaxis_dict = {'title': xaxis_title, \n    'titlefont': {'size': 18, 'color': '#7f7f7f'}}\n    \n    if slider:\n        xaxis_dict['rangeselector'] = dict(\n            buttons=list([\n                dict(count=1,\n                   label=\"1m\",\n                   step=\"month\",\n                   stepmode=\"backward\"),\n                dict(count=6,\n                   label=\"6m\",\n                   step=\"month\",\n                   stepmode=\"backward\"),\n                dict(count=1,\n                   label=\"YTD\",\n                   step=\"year\",\n                   stepmode=\"todate\"),\n                dict(count=1,\n                   label=\"1y\",\n                   step=\"year\",\n                   stepmode=\"backward\"),\n                dict(step=\"all\")\n                ])\n            )\n        xaxis_dict['rangeslider'] = dict(\n            visible=True\n            )\n        xaxis_dict['type'] = \"date\"\n\n    if color:\n        plot_data = [go.Bar(x=plot_df[plot_df.columns[0]],\n                            y=plot_df[col],\n                            marker=dict(color=color[col]),\n                            name=col) for col in plot_df.columns[1:]]\n    else:\n        plot_data = [go.Bar(x=plot_df[plot_df.columns[0]],\n                            y=plot_df[col],\n                            name=col) for col in plot_df.columns[1:]]\n    plot_layout = go.Layout(\n        barmode=barmode,\n        title=title,\n        xaxis=xaxis_dict,\n        yaxis={'title': yaxis_title, 'titlefont': {'size': 18, 'color': '#7f7f7f'}},\n        hovermode=\"closest\"\n        )\n    plot_fig = go.Figure(data=plot_data, layout=plot_layout)\n\n    if write_image:\n        plot_fig.write_image(write_image, width=1300)\n        print(f\"Wrote image: {write_image}\")\n    else:\n        plotly.offline.iplot(plot_fig, filename='bar')\n\n\n","14aaab4f":"\ndf_new = df_new[target_columns]","0611be22":"df_new.corr()","9fd68fab":"from ipywidgets import widgets, interact, Layout\nimport plotly.graph_objects as go\nimport plotly.express as px\nstyle = {'description_width': 'initial', 'value_width': '450px'}\n\n\ndropdown_slider = widgets.Dropdown(options=target_columns,\n                                   value='CuPPM', description='PPM wrt sites', style=style)","65f20a01":"df_plot = df_new.reset_index()","b8d35e0c":"d = {}\ncounter =0 \nfor each in df_plot.SiteID:\n    d[each] = counter\n    counter+=1\ndf_plot['SiteID'] = df_plot.apply(lambda row: d[row['SiteID']], axis=1)\ndf_plot.head(2)","1af4e16d":"d #SiteID vs the mapped integer","27cc7b4e":"@interact(status=dropdown_slider)\ndef response(status):\n    plotly_bar_plot(df_plot[['SiteID', status]], title='SiteID vs '+status, xaxis_title='SiteID', yaxis_title='PPM' )\n","b841de98":"# **Interactive plot of the elements with there concentrations after mapped to a dict for ease of plotting**","f129dedb":"# Gather the top 10 and bottom 10 sites with elements concentrations based on there weights","6c714119":"## 1.0 Question and Conclusion\n\n**Question:** To discover if data reveals any interesting trend in the data\n    \n**Method:** Look at provided data and analyze\n    \n**Expected Results:** Trend of the PPM values in the elements\n\n**Conclusion:**\n\n1.  Thougth the concentrations of one elements are correlated with other it doesn't mean that the presence if an element is guranteed presence or absence of another element that are correlated with it.\n2.  Site 20158 is rich in elements concentrations where as 2940 is less rich in there concentrations.\n3.  Start Depth and end depth of the hole is not dependent on the concentration of the elements but these are dependent on the amount of light passed\/absorbed through it. So this has an impact on the wavelength spikes.\n\n****Note: In case the graphs are not visible please execute the notebook in full****","9842834c":"# **Correlation between the elements**","4c57235d":"# Fetch the Data"}}