{"cell_type":{"7c3a09b9":"code","90d8b65d":"code","6b707e5b":"code","6bb939ae":"code","532557e4":"code","c78f0c10":"code","566437bb":"code","1c0a348d":"code","73f6648a":"code","9106e667":"code","1eab0629":"code","a65473c3":"code","10e74d3c":"code","e25fc39f":"code","69f9bed2":"code","4c3cff2c":"code","ba749d8f":"code","6b68257a":"code","06d95262":"code","d97cf5a4":"code","5c714b55":"code","378e6749":"code","2045399d":"code","94b61abb":"code","58a4c9a1":"code","a4afd9e7":"code","85be43aa":"code","76e3b52d":"code","cae44f6f":"code","48617576":"code","643b6a84":"code","ea6bf53b":"code","3a488e89":"code","3e1dcfb9":"code","b49e1fcf":"code","a7b96ac6":"code","0ef5bd64":"code","a4b72ea6":"code","3e938db1":"code","ab31c5ad":"code","181f1601":"code","ffb486c3":"code","732b78db":"code","b294666c":"code","f5bd2565":"markdown","8821cfaf":"markdown","b40e4581":"markdown","b213c0d9":"markdown","058a6b7f":"markdown","d1a9ee3d":"markdown","f89b6f5e":"markdown","031c1bf8":"markdown","89bd9b13":"markdown","eeb64a8c":"markdown","5304a732":"markdown","62b1c575":"markdown","56be7f8a":"markdown","6ed62d6f":"markdown","2548ad65":"markdown","b6292a7d":"markdown","b60578f0":"markdown","138c1aa8":"markdown","74519773":"markdown","e33ad6f0":"markdown","f3a1696e":"markdown","0b641216":"markdown","895dd3be":"markdown"},"source":{"7c3a09b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.pandas.set_option('display.max_columns',None)\nsns.set()\n%matplotlib inline\nfrom sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.linear_model import LinearRegression\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","90d8b65d":"dataset = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndataset.shape","6b707e5b":"dataset.head()","6bb939ae":"features_with_na = [features for features in dataset.columns if dataset[features].isnull().sum()>1]\nfor features in features_with_na:\n    print(features, np.round(dataset[features].isnull().mean(),4),' % missing values')","532557e4":"for feature in features_with_na:\n    data = dataset.copy()\n    \n    data[feature] = np.where(data[feature].isnull(),1,0)\n    data.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.title(feature)\n    plt.show()","c78f0c10":"print(\"no. of houses \", len(dataset.Id))","566437bb":"numerical_features = [feature for feature in dataset.columns if dataset[feature].dtype !='O']\nprint(\"No. of numerical variables \", len(numerical_features))\ndataset[numerical_features].head()","1c0a348d":"year_feature = [feature for feature in numerical_features if 'Yr' in feature or 'Year' in feature ]\nyear_feature","73f6648a":"for feature in year_feature:\n    print(feature,dataset[feature].unique() )","9106e667":"dataset.groupby('YrSold')['SalePrice'].median().plot()\nplt.xlabel('year sold')\nplt.ylabel('Sale Price')\nplt.title('sale price vs year chart')","1eab0629":"for feature in year_feature:\n    if feature !='YrSold':\n        data = dataset.copy()\n        data[feature] = data['YrSold']-data[feature]\n        \n        plt.scatter(data[feature],data['SalePrice'])\n        plt.xlabel('year')\n        plt.ylabel('Sale price')\n        plt.show()","a65473c3":"#let's try to find discrete feature\ndiscrete_feature = [feature for feature in numerical_features if len(dataset[feature].unique())<25 and feature not in year_feature+['Id']]\nprint(\"Discrete variable Count: {}\".format(len(discrete_feature)))\n","10e74d3c":"discrete_feature","e25fc39f":"dataset[discrete_feature].head()","69f9bed2":"for feature in discrete_feature:\n    data = dataset.copy()\n    data.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","4c3cff2c":"continuous_feature = [feature for feature in numerical_features if feature not in discrete_feature+year_feature+['Id']]\nprint(\"Continuous feature {}\".format(len(continuous_feature)))","ba749d8f":"for feature in continuous_feature:\n    data = dataset.copy()\n    data[feature].hist(bins=25)\n    plt.xlabel(feature)\n    plt.ylabel('cont')\n    plt.title(feature)\n    plt.show()","6b68257a":"for feature in continuous_feature:\n    data =dataset.copy()\n    if 0 in data[feature].unique():\n        pass\n    else:\n        data[feature] = np.log(data[feature])\n        data['SalePrice'] = np.log(data['SalePrice'])\n        plt.scatter(data[feature],data['SalePrice'])\n        plt.xlabel(feature)\n        plt.ylabel('SalePrice')\n        plt.title(feature)\n        plt.show()\n        \n","06d95262":"\nfor feature in continuous_feature:\n    data = dataset.copy()\n    if 0 in data[feature].unique():\n        pass\n    else:\n        data[feature] = np.log(data[feature])\n        data.boxplot(column=feature)\n        plt.ylabel(feature)\n        plt.show()","d97cf5a4":"categorical_feature = [feature for feature in dataset.columns if data[feature].dtype=='O']\ndataset[categorical_feature].head()","5c714b55":"for feature in categorical_feature:\n    print('The feature is {} and the unique categories are {}'.format(feature,len(dataset[feature].unique())))","378e6749":"for feature in categorical_feature:\n    data = dataset.copy()\n    data.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","2045399d":"feature_nan = [feature for feature in dataset.columns if dataset[feature].isnull().sum()>1 and dataset[feature].dtype=='O']\nfor feature in feature_nan:\n    print('{} : {}% missing value'.format(feature,np.round(dataset[feature].isnull().mean(),4)))","94b61abb":"def replace_cat_feature(dataset,feature_nan):\n    data = dataset.copy()\n    data[feature_nan] = data[feature_nan].fillna('Missing')\n    return data\ndataset = replace_cat_feature(dataset,feature_nan)\ndataset[feature_nan].isnull().sum()\n","58a4c9a1":"#for numerical values\nnumerical_with_nan = [feature for feature in dataset.columns if dataset[feature].isnull().sum()>1 and dataset[feature].dtype!='O']\n\nfor feature in numerical_with_nan:\n    print('{} : {}% missing value'.format(feature,np.round(dataset[feature].isnull().mean(),4)))","a4afd9e7":"for feature in numerical_with_nan:\n    median_value = dataset[feature].median()\n    \n    dataset[feature+'nan'] = np.where(dataset[feature].isnull(),1,0)\n    dataset[feature].fillna(median_value,inplace=True)\n    \ndataset[numerical_with_nan].isnull().sum()","85be43aa":"dataset.head(50)","76e3b52d":"for feature in ['YearBuilt', 'YearRemodAdd', 'GarageYrBlt']:\n    dataset[feature] = dataset['YrSold']-dataset[feature] ","cae44f6f":"dataset.head()","48617576":"dataset[['YearBuilt', 'YearRemodAdd', 'GarageYrBlt']].head()","643b6a84":"num_feature = ['LotFrontage','LotArea','1stFlrSF','GrLivArea','SalePrice']\n\nfor feature in num_feature:\n    dataset[feature] = np.log(dataset[feature])","ea6bf53b":"dataset.head()","3a488e89":"categorical_feature = [feature for feature in dataset.columns if dataset[feature].dtype=='O']\ncategorical_feature","3e1dcfb9":"for feature in categorical_feature:\n    temp = dataset.groupby(feature)['SalePrice'].count()\/len(dataset)\n    temp_df = temp[temp>0.01].index\n    dataset[feature] = np.where(dataset[feature].isin(temp_df),dataset[feature],'Rare_var')","b49e1fcf":"dataset.head()","a7b96ac6":"for feature in categorical_feature:\n    labels_ordered=dataset.groupby([feature])['SalePrice'].mean().sort_values().index\n    labels_ordered={k:i for i,k in enumerate(labels_ordered,0)}\n    dataset[feature]=dataset[feature].map(labels_ordered)\ndataset.head()","0ef5bd64":"feature_scale = [feature for feature in dataset.columns if feature not in ['Id','SalePrice']]\n\n","a4b72ea6":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(dataset[feature_scale])","3e938db1":"data = pd.concat([dataset[['Id', 'SalePrice']].reset_index(drop=True),\n                    pd.DataFrame(scaler.transform(dataset[feature_scale]), columns=feature_scale)],axis=1)\ndataset = data","ab31c5ad":"y_train = dataset['SalePrice']\nx_train = dataset.drop(['Id','SalePrice'],axis=1)\n","181f1601":"feature_sel_model = SelectFromModel(Lasso(alpha=0.005,random_state=0))\nfeature_sel_model.fit(x_train,y_train)","ffb486c3":"\nfeature_sel_model.get_support()","732b78db":"selected_feat = x_train.columns[(feature_sel_model.get_support())]\nselected_feat\n","b294666c":"x_train = x_train[selected_feat].head()\n","f5bd2565":"## Numerical variable","8821cfaf":"### Temporal variable","b40e4581":"## Categorical feature","b213c0d9":"### for categorical","058a6b7f":" ## Missing value","d1a9ee3d":"## handling rare categorical feature","f89b6f5e":"###### it's visible that price descreased as house beacame older","031c1bf8":"### Discrete variable","89bd9b13":"## Numerical Variables","eeb64a8c":"### let's check the relationship between Yrsold and price","5304a732":"## Feature Scaling","62b1c575":"# Feature Engineering","56be7f8a":"### outliers","6ed62d6f":"#### replacing missing value","2548ad65":"#### replacing null with 'missing' label","b6292a7d":"# Data Analysis Phase","b60578f0":"\n### Missing Value","138c1aa8":"### Now we transform this data to obtain normal distribution using logarithmic transformation or normal distribution method N~(0,1)","74519773":"### finding the relationship between null value and Price","e33ad6f0":"## Let's check the decrement or increase of price by the age of house","f3a1696e":"## temporal variable i.e. year","0b641216":"### for numerical","895dd3be":"### continuous Variable"}}