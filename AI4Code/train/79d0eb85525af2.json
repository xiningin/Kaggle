{"cell_type":{"bfd56bc0":"code","bec81c1f":"code","efad0dba":"code","83820660":"code","e6a0ead4":"code","ad447fb7":"code","289d7d18":"code","36d820fc":"code","47614d4c":"code","9f7e0ec8":"code","68dd9506":"code","196f8ef7":"code","ddba2609":"code","5dd9ee69":"code","cc8cb267":"code","6d08c8de":"code","b1e119a1":"code","63ba10c9":"code","37c3af90":"code","718bff85":"code","79d3d4b8":"code","9cf74321":"code","b16082f8":"code","130a6335":"code","a23a654c":"code","3a2a2b81":"code","38c9979f":"code","455325f1":"code","929352a7":"code","f4d0ff1d":"code","195cbf7b":"code","b16098f9":"code","35732567":"code","ba26959d":"code","378c4453":"code","6aebc5c9":"code","73bc57f9":"code","780427a0":"code","8d61cf9b":"code","30c4fb7e":"markdown","083bfdf0":"markdown","70fbbf8f":"markdown","d67a7528":"markdown","51852917":"markdown","aa3f1296":"markdown"},"source":{"bfd56bc0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom math import sqrt\nfrom sklearn.ensemble import RandomForestRegressor\nplt.style.use('fivethirtyeight')","bec81c1f":"data = pd.read_csv('..\/input\/whocovid19globaldata\/whocovid19globaldata.csv')\n","efad0dba":"data.head()","83820660":"data.shape","e6a0ead4":"for (country), group in data.groupby(['Country']):\n     group.to_csv(f'{country}.csv', index=False)","ad447fb7":"pd.read_csv(\"Turkey.csv\")","289d7d18":"data = pd.read_csv('Turkey.csv')\ndata = data[data.Cumulative_cases != 0]\ndata","36d820fc":"label = ['Country_code','Country', 'WHO_region']\ndata = data.drop(label, axis=1)\ndata","47614d4c":"color_pal = [\"#00FFFF\", \"#66CDAA\", \"#E3CF57\", \"#8B7D6B\"]\n_ = data.plot(style='.', figsize=(15,5), color=color_pal, title='TVR')","9f7e0ec8":"data.Date_reported = pd.to_datetime(data.Date_reported, format='%Y-%m-%d %H:%M:%S')\ndata","68dd9506":"train_split_date = '2021-12-01'\ntest_split_date = '2022-01-29'\ndata_train = data.loc[(data.Date_reported >= train_split_date) & (data.Date_reported <= test_split_date)].copy()\ndata_test = data.loc[data.Date_reported > test_split_date].copy()","196f8ef7":"data_train","ddba2609":"data_test","5dd9ee69":"def create_features(df, label=None):\n    \"\"\"\n    Creates time series features from datetime index\n    \"\"\"\n    df['month'] = df['Date_reported'].dt.month\n    df['year'] = df['Date_reported'].dt.year\n    df['dayofyear'] = df['Date_reported'].dt.dayofyear\n    df['dayofmonth'] = df['Date_reported'].dt.day\n    df['Cumulative_cases'] = df['Cumulative_cases']\n    df['New_cases'] = df['New_cases']\n    df['Cumulative_deaths'] = df['Cumulative_deaths']\n    \n    X = df[['month','year', 'dayofyear','dayofmonth', 'Cumulative_cases', 'New_cases', 'Cumulative_deaths']]\n    \n    if label:\n        y = df[label]\n        return X, y\n\n    return X","cc8cb267":"X_train, y_train = create_features(data_train, label='New_deaths')\nX_test, y_test = create_features(data_test, label='New_deaths')\nX, y = create_features(data, label='New_deaths')","6d08c8de":"X_train","b1e119a1":"X_test","63ba10c9":"from sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV","37c3af90":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.utils import check_array","718bff85":"def mean_absolute_percentage_error(y_true, y_pred): \n    \"\"\"Calculates MAPE given y_true and y_pred\"\"\"\n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100","79d3d4b8":"def bestparam_randCV(model,hyperparam,x_train, y_train, n_iter=1000):\n    \n    hyperparam = hyperparam\n    randomizedCV = RandomizedSearchCV(model, param_distributions = hyperparam, cv = 10,\n                                          n_iter = n_iter, scoring = 'neg_mean_squared_error', n_jobs=-1, \n                                          random_state = 42, verbose = True)\n    \n    randomizedCV.fit(x_train, y_train)\n\n    print (\" Results from Random Search \" )\n    print (\"\\n The best estimator across ALL searched params:\\n\", randomizedCV.best_estimator_)\n    print (\"\\n The best score across ALL searched params:\\n\", randomizedCV.best_score_)\n    print (\"\\n The best parameters across ALL searched params:\\n\", randomizedCV.best_params_)\n    print ('\\n Best MSE', randomizedCV.score(x_train, y_train))\n     \n    \"\"\"\n    print (\"\\n Results from RandomizedSearchCV \" )    \n    print (randomizedCV.cv_results_)\n    \"\"\"\n    \n    return randomizedCV","9cf74321":"reg         = DecisionTreeRegressor()             \n\nhyperparam =  {'max_features': ['auto', 'sqrt', 'log2'],\n               'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],\n               'min_samples_leaf': [1, 2, 3, 4],\n               'min_samples_split': [2, 3, 4, 5, 10]}\n \nn_iter     = 100\nbest_dt1   = bestparam_randCV(reg, hyperparam, X_train, y_train, n_iter)","b16082f8":"dt1 = DecisionTreeRegressor(\n                        max_features      = best_dt1.best_params_.get('max_features'),\n                        max_depth         = best_dt1.best_params_.get('max_depth'),\n                        min_samples_split = best_dt1.best_params_.get('min_samples_split'),\n                        min_samples_leaf  = best_dt1.best_params_.get('min_samples_leaf'))","130a6335":"result_dt1 = dt1.fit(X_train, y_train)","a23a654c":"## Jika tidak jelas grafiknya ambil file .png saja yang di samping nama filenya \"filename.png\"\nimportances = result_dt1.feature_importances_\nindices = np.argsort(importances)\nfeatures=X_train.columns\nplt.figure(figsize=(20,50))\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), features[indices])\nplt.xlabel('Relative Importance')\nplt.savefig('filename.png', dpi=300)","3a2a2b81":"data_train['New_deaths_Prediction'] = result_dt1.predict(X_train)\ndata_all = pd.concat([data_test, data_train], sort=False)","38c9979f":"_ = data_all[['New_deaths','New_deaths_Prediction']].plot(figsize=(15, 5))","455325f1":"#RMSE\nsqrt(mean_squared_error(y_true=data_train['New_deaths'],\n                   y_pred=data_train['New_deaths_Prediction']))","929352a7":"#MAE\nmean_absolute_error(y_true=data_train['New_deaths'],\n                   y_pred=data_train['New_deaths_Prediction'])","f4d0ff1d":"#MAPE\nmean_absolute_percentage_error(y_true=data_train['New_deaths'],\n                   y_pred=data_train['New_deaths_Prediction'])","195cbf7b":"data_test['New_deaths_Prediction'] = result_dt1.predict(X_test)\ndata_all = pd.concat([data_test, data_train], sort=False)","b16098f9":"_ = data_all[['New_deaths','New_deaths_Prediction']].plot(figsize=(15, 5))","35732567":"_ = data_test[['New_deaths','New_deaths_Prediction']].plot(figsize=(15, 5))","ba26959d":"#RMSE\nsqrt(mean_squared_error(y_true=data_test['New_deaths'],\n                   y_pred=data_test['New_deaths_Prediction']))","378c4453":"#MAE\nmean_absolute_error(y_true=data_test['New_deaths'],\n                   y_pred=data_test['New_deaths_Prediction'])","6aebc5c9":"#MAPE\nmean_absolute_percentage_error(y_true=data_test['New_deaths'],\n                   y_pred=data_test['New_deaths_Prediction'])","73bc57f9":"data_test['error'] = data_test['New_deaths'] - data_test['New_deaths_Prediction']\ndata_test['abs_error'] = data_test['error'].apply(np.abs)\nerror_by_day = data_test.groupby(['year','month','dayofmonth']) \\\n    .mean()[['New_deaths','New_deaths_Prediction','error','abs_error']]","780427a0":"error_by_day.sort_values('error', ascending=True)","8d61cf9b":"data_test","30c4fb7e":"# Forecast on Test Set\n","083bfdf0":"# Modeling Phase\n* Search best hyperparameter with RandomizedCV\n* Create feature importance barchart\n* Evaluate in training dataset\n* Evaluate in testing dataset","70fbbf8f":"# Forecast on Training Set\n","d67a7528":"# Evaluation on Train Set\n","51852917":"# Feature Importances","aa3f1296":"# Randomized Cross Validation"}}