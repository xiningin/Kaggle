{"cell_type":{"ec1e32f2":"code","c20b2d80":"code","88c662ad":"code","564c6afc":"code","cfe0ef99":"code","4b611e18":"code","20cb6966":"code","ab81f8bd":"code","25a589d8":"code","b8d1afb5":"code","6573c5bc":"code","be67e25c":"code","a3fffc54":"code","d4ee6bae":"code","e7f24d69":"code","c2065762":"code","078c5f8f":"code","416e778e":"code","a4699ae6":"code","97930378":"code","f0bce621":"code","30d893f8":"code","12f79ab3":"code","216ed3e7":"code","9ba2bf97":"code","1cb47ef9":"code","93e479f5":"code","b0d0aa26":"code","9465e297":"code","200efc4c":"code","e7bdc4cd":"code","daa0af6d":"code","b2fa12ac":"code","5bbfdbf5":"code","bd50d00d":"code","4fe67a40":"code","953ea934":"code","0a8aeed2":"markdown","8d93fbbd":"markdown","5ba9cae5":"markdown","8c9caa56":"markdown","48bc9792":"markdown","0237ff08":"markdown","719c3621":"markdown","0c6c91f5":"markdown","cd7ab93d":"markdown","164fcb96":"markdown","84dbf450":"markdown","7bb24fea":"markdown","bcc6d241":"markdown","38dacad6":"markdown","f48c9e71":"markdown","26ce63dc":"markdown","35d58590":"markdown","3a2ab881":"markdown","7ec49ce9":"markdown","9ca99277":"markdown","4f9ae2b4":"markdown","b7d7532f":"markdown","af09188a":"markdown","ff542f7c":"markdown","8a773a26":"markdown","20a2a7ab":"markdown","f681a511":"markdown","531a49b7":"markdown","cc92d906":"markdown","04b73687":"markdown","133ad303":"markdown","33274e46":"markdown","63358304":"markdown","ba98fe20":"markdown"},"source":{"ec1e32f2":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","c20b2d80":"from xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.linear_model import Ridge\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import LeaveOneGroupOut","88c662ad":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","564c6afc":"DF1 = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\n\nDF2 = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')\n\nSAM = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')","cfe0ef99":"MV1 = DF1.isnull().sum()\nMV2 = DF2.isnull().sum()\n\nprint(f'Missing Value 1:  {MV1[MV1 > 0]}')\nprint(f'Missing Value 2:  {MV2[MV2 > 0]}')","4b611e18":"display(DF1, DF2)\n# display(DF1.info(), DF2.info())\n# display(DF1.describe().transpose())\n# display(DF2.describe().transpose())","20cb6966":"data1 = DF1.copy()\ndata2 = DF2.copy()","ab81f8bd":"X = data1.drop(columns = ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'])\nX['date_time'] = X['date_time'].astype('datetime64[ns]').astype(np.int64)\/10**9\n\ndisplay(X)","25a589d8":"y1 = data1.target_carbon_monoxide\ny2 = data1.target_benzene\ny3 = data1.target_nitrogen_oxides\n# display(y1, y2, y3)","b8d1afb5":"XX = data2.copy()\nXX['date_time'] = XX['date_time'].astype('datetime64[ns]').astype(np.int64)\/10**9\n\ndisplay(XX)","6573c5bc":"train_X, val_X, train_y1, val_y1 = train_test_split(X, y1, test_size=0.50, random_state=123)\ntrain_X, val_X, train_y2, val_y2 = train_test_split(X, y2, test_size=0.50, random_state=123)\ntrain_X, val_X, train_y3, val_y3 = train_test_split(X, y3, test_size=0.50, random_state=123)","be67e25c":"val_X.to_csv(\"val_X.csv\",index=False)\n\nval_y1.to_csv(\"val_y1.csv\",index=False)\nval_y2.to_csv(\"val_y2.csv\",index=False)\nval_y3.to_csv(\"val_y3.csv\",index=False)","a3fffc54":"model1v = XGBRegressor(max_depth=6,\n                       n_estimators=250,\n                       learning_rate=0.08,\n                       subsample=0.7,\n                       alpha=0.5,\n                       random_state=123)                           \n        \nmodel1v.fit(train_X, train_y1, verbose=100)\noof_pred1 = model1v.predict(val_X)\n\noof_pred1 = np.clip(oof_pred1, 0.30, y1.max())\n# oof_pred1 = np.clip(oof_pred1, y1.min(), y1.max())\n\nprint(40 * '=')\nprint(f'Mean Absolute Error: {mean_absolute_error(val_y1, oof_pred1)}')\nprint(40 * '=')","d4ee6bae":"model1v.feature_importances_","e7f24d69":"model2v = XGBRegressor(max_depth=6,\n                       n_estimators=400,\n                       learning_rate=0.07,\n                       subsample=0.7,\n                       alpha=0.7,\n                       random_state=123)          \n\nmodel2v.fit(train_X, train_y2, verbose=100)\noof_pred2 = model2v.predict(val_X)\n\noof_pred2 = np.clip(oof_pred2, 0.10, y2.max())\n# oof_pred2 = np.clip(oof_pred2, y1.max(), y2.max())\n\nprint(40 * '=')\nprint(f'Mean Absolute Error: {mean_absolute_error(val_y2, oof_pred2)}')\nprint(40 * '=')","c2065762":"model2v.feature_importances_","078c5f8f":"model3v = XGBRegressor(max_depth=8,\n                       n_estimators=500,\n                       learning_rate=0.03,\n                       subsample=0.7,\n                       alpha=0.8,\n                       random_state=123)                           \n\nmodel3v.fit(train_X, train_y3, verbose=100)\noof_pred3 = model3v.predict(val_X)\n\noof_pred3 = np.clip(oof_pred3, 20.0, y3.max())\n# oof_pred3 = np.clip(oof_pred3, y3.min(), y3.max())\n\nprint(40 * '=')\nprint(f'Mean Absolute Error: {mean_absolute_error(val_y3, oof_pred3)}')\nprint(40 * '=')","416e778e":"model3v.feature_importances_","a4699ae6":"axis_x  = X.columns.values\naxis_y1 = model1v.feature_importances_\naxis_y2 = model2v.feature_importances_\naxis_y3 = model3v.feature_importances_\n\nplt.style.use('seaborn-whitegrid') \nplt.figure(figsize=(16, 6), facecolor='lightgray')\nplt.title(f'\\nX G B o o s t\\n\\nF e a t u r e   I m p o r t a n c e s\\n', fontsize=14)  \n\nplt.scatter(axis_x, axis_y1, s=120, label='target_carbon_monoxide') \nplt.scatter(axis_x, axis_y2, s=120, label='target_benzene')\nplt.scatter(axis_x, axis_y3, s=120, label='target_nitrogen_oxides')\nplt.legend(fontsize=12, loc=2)\nplt.show() ","97930378":"model1 = XGBRegressor(max_depth=6,\n                      n_estimators=250,\n                      learning_rate=0.08,\n                      subsample=0.7,\n                      alpha=0.5,\n                      random_state=123)                         \n\nmodel1.fit(X, y1)\npred1 = model1.predict(XX)\npred1 = np.clip(pred1, 0.30, y1.max())\ndisplay(pred1, pred1.shape) ","f0bce621":"model2 = XGBRegressor(max_depth=6,                     \n                      n_estimators=400,\n                      learning_rate=0.07,\n                      subsample=0.7,\n                      alpha=0.7,\n                      random_state=123)        \n\nmodel2.fit(X, y2)\npred2 = model2.predict(XX)\npred2 = np.clip(pred2, 0.10, y2.max())\ndisplay(pred2, pred2.shape) ","30d893f8":"model3 = XGBRegressor(max_depth=8,\n                      n_estimators=500,\n                      learning_rate=0.03,\n                      subsample=0.7,\n                      alpha=0.8,\n                      random_state=123)                           \n\nmodel3.fit(X, y3)\npred3 = model3.predict(XX)\npred3 = np.clip(pred3, 20.0, y3.max())\ndisplay(pred3, pred3.shape) ","12f79ab3":"sub_xgb = SAM.copy()\n\nsub_xgb['target_carbon_monoxide'] = pred1\nsub_xgb['target_benzene'] = pred2\nsub_xgb['target_nitrogen_oxides'] = pred3\ndisplay(sub_xgb)","216ed3e7":"sub = sub_xgb\nsub.to_csv(\"submission_xgb.csv\",index=False)\n# Public Score: 0.23087 \n!ls","9ba2bf97":"months1 = []\nfor i in range(len(data1)):  \n    \n    row  = data1.iloc[i,0]    \n    mon  = int(row[5:7])\n    #day = int(row[8:10])\n    #hou = int(row[11:13])    \n    if (mon == 1): mon=12  \n    months1.append(mon)   \n    \ndata1['months'] = months1\ndisplay(data1)    ","1cb47ef9":"months2 = []\nfor i in range(len(data2)):  \n    \n    row  = data2.iloc[i,0]    \n    mon  = int(row[5:7])\n    #day = int(row[8:10])\n    #hou = int(row[11:13])  \n    months2.append(mon)   \n    \ndata2['months'] = months2\ndisplay(data2)    ","93e479f5":"groups = data1['months']\ndisplay(groups)","b0d0aa26":"logo = LeaveOneGroupOut()\n\nprint(logo.get_n_splits(X, y1, groups))\nprint(logo.get_n_splits(X, y2, groups))\nprint(logo.get_n_splits(X, y3, groups))","9465e297":"for train_index, test_index in logo.split(X, y1, groups):\n              \n    print(f'Train index:\\n{train_index}')    \n    print(f'\\nTest index:\\n{test_index}')\n    print(70 * '=') ","200efc4c":"pred1_leave = np.zeros(len(XX))\nfor train_index, test_index in logo.split(X, y1, groups):\n\n    X_train, X_test = X.iloc[train_index], X.iloc[test_index]   \n    y_train, y_test = y1.iloc[train_index], y1.iloc[test_index]\n    \n    model1.fit(X_train, y_train.ravel())  \n    pred1_leave += (model1.predict(XX)) \/ 10\n\ndisplay(pred1_leave, pred1_leave.shape) ","e7bdc4cd":"pred2_leave = np.zeros(len(XX))\nfor train_index, test_index in logo.split(X, y2, groups):\n\n    X_train, X_test = X.iloc[train_index], X.iloc[test_index]   \n    y_train, y_test = y2.iloc[train_index], y2.iloc[test_index]\n    \n    model2.fit(X_train, y_train.ravel())  \n    pred2_leave += (model2.predict(XX)) \/ 10\n\ndisplay(pred2_leave, pred2_leave.shape) ","daa0af6d":"pred3_leave = np.zeros(len(XX))\nfor train_index, test_index in logo.split(X, y3, groups):\n\n    X_train, X_test = X.iloc[train_index], X.iloc[test_index]   \n    y_train, y_test = y3.iloc[train_index], y3.iloc[test_index]\n    \n    model3.fit(X_train, y_train.ravel())  \n    pred3_leave += (model3.predict(XX)) \/ 10\n\ndisplay(pred3_leave, pred3_leave.shape) ","b2fa12ac":"sub_leave = SAM.copy()\n\nsub_leave['target_carbon_monoxide'] = pred1_leave\nsub_leave['target_benzene'] = pred2_leave\nsub_leave['target_nitrogen_oxides'] = pred3_leave\ndisplay(sub_leave)","5bbfdbf5":"sub = sub_leave\nsub.to_csv(\"submission_leave.csv\",index=False)\n# Public Score: 0.22736\n!ls","bd50d00d":"def ensembling(main, support, coeff1, coeff2, coeff3): \n    \n    suba  = main.copy() \n    subav = suba.values\n       \n    subb  = support.copy()\n    subbv = subb.values    \n           \n    ense  = main.copy()    \n    ensev = ense.values  \n \n    for i in range (len(main)):\n        \n        pera1 = subav[i, 1]\n        pera2 = subav[i, 2]\n        pera3 = subav[i, 3]\n        \n        perb1 = subbv[i, 1]\n        perb2 = subbv[i, 2]\n        perb3 = subbv[i, 3]\n\n        per1 = (pera1 * coeff1) + (perb1 * (1.0 - coeff1))\n        per2 = (pera2 * coeff2) + (perb2 * (1.0 - coeff2))\n        per3 = (pera3 * coeff3) + (perb3 * (1.0 - coeff3))\n        \n        ensev[i, 1] = per1\n        ensev[i, 2] = per2\n        ensev[i, 3] = per3\n        \n    ense.iloc[:, 1:] = ensev[:, 1:] \n    \n    ###############################    \n    X  = suba.iloc[:, 1]\n    Y1 = subb.iloc[:, 1]\n    Y2 = ense.iloc[:, 1]\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(9, 9), facecolor='lightgray')\n    plt.title(f'\\nP R E D I C T  1\\n\\ntarget_carbon_monoxide\\n')   \n    \n    \n    plt.scatter(X, Y1, s=2.0, label='Support')    \n    plt.scatter(X, Y2, s=2.0, label='Generated')\n    plt.scatter(X, X , s=0.1, label='Main(X=Y)')\n    \n    plt.legend(fontsize=12, loc=2)\n    plt.show()     \n    ###############################      \n    X  = suba.iloc[:, 2]\n    Y1 = subb.iloc[:, 2]\n    Y2 = ense.iloc[:, 2]\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(9, 9), facecolor='lightgray')\n    plt.title(f'\\nP R E D I C T  2\\n\\ntarget_benzene\\n')   \n    \n    \n    plt.scatter(X, Y1, s=2.0, label='Support')    \n    plt.scatter(X, Y2, s=2.0, label='Generated')\n    plt.scatter(X, X , s=0.1, label='Main(X=Y)')\n    \n    plt.legend(fontsize=12, loc=2)\n    plt.show()     \n    ############################### \n    X  = suba.iloc[:, 3]\n    Y1 = subb.iloc[:, 3]\n    Y2 = ense.iloc[:, 3]\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(9, 9), facecolor='lightgray')\n    plt.title(f'\\nP R E D I C T  3\\n\\ntarget_nitrogen_oxides\\n')   \n    \n    \n    plt.scatter(X, Y1, s=2.0, label='Support')    \n    plt.scatter(X, Y2, s=2.0, label='Generated')\n    plt.scatter(X, X , s=0.1, label='Main(X=Y)')\n    \n    plt.legend(fontsize=12, loc=2)\n    plt.show()     \n    ############################### \n    \n    return ense      \n","4fe67a40":"sub21744 = pd.read_csv('..\/input\/tps7-21744\/submission_gam.csv')\n\nsub_ense = ensembling(sub21744, sub_leave, 0.65, 0.55, 0.75)","953ea934":"sub = sub_ense\nsub.to_csv(\"submission_ense.csv\",index=False)\n# Public Score: \n!ls","0a8aeed2":"<div class=\"alert alert-success\">  \n<\/div>","8d93fbbd":"## Data Augmentation","5ba9cae5":"<div class=\"alert alert-success\">  \n<\/div>","8c9caa56":"<div>\n    <h1 align=\"center\">Tabular Playground Series - Jul 2021<\/h1>\n    <h1 align=\"center\">XGBoost & LeaveOneGroupOut & Ensembling<\/h1>\n    <h4 align=\"center\">By: Somayyeh Gholami & Mehran Kazeminia<\/h4>\n<\/div>","48bc9792":"<div class=\"alert alert-success\">  \n<\/div>","0237ff08":"## Validation Model - 3 \n\n### [ target_nitrogen_oxides ]","719c3621":"<div class=\"alert alert-success\">\n    <h1 align=\"center\">XGBRegressor<\/h1>\n<\/div>","0c6c91f5":"<div class=\"alert alert-success\">  \n<\/div>","cd7ab93d":"<div class=\"alert alert-success\">  \n<\/div>","164fcb96":"## Validation Model - 2 \n\n### [ target_benzene ]","84dbf450":"<div class=\"alert alert-success\">  \n<\/div>","7bb24fea":"<div class=\"alert alert-success\">  \n<\/div>","bcc6d241":"<div class=\"alert alert-success\">\n    <h1 align=\"center\">Ensembling<\/h1>\n<\/div>","38dacad6":"<div class=\"alert alert-success\">  \n<\/div>","f48c9e71":"<div class=\"alert alert-success\">  \n<\/div>","26ce63dc":"<div class=\"alert alert-success\">\n    <h1 align=\"center\">LeaveOneGroupOut<\/h1>\n<\/div>","35d58590":"<div class=\"alert alert-success\">  \n<\/div>","3a2ab881":"<div class=\"alert alert-success\">  \n<\/div>","7ec49ce9":"<div class=\"alert alert-success\">  \n<\/div>","9ca99277":"## Feature Importances","4f9ae2b4":"## Data Set","b7d7532f":"## Validation Model - 1 \n\n### [ target_carbon_monoxide ]","af09188a":"<div class=\"alert alert-success\">  \n<\/div>","ff542f7c":"## Import","8a773a26":"## Model - 2 \n\n### [ target_benzene ]","20a2a7ab":"<div class=\"alert alert-success\">  \n<\/div>","f681a511":"<div class=\"alert alert-success\">  \n<\/div>","531a49b7":"## Model - 1 \n\n### [ target_carbon_monoxide ]","cc92d906":"Thanks to: @paddykb https:\/\/www.kaggle.com\/paddykb\/tps-07-gam-baseline ","04b73687":"<div class=\"alert alert-success\">  \n<\/div>","133ad303":"## Split","33274e46":"<div class=\"alert alert-success\">\n    <h1 align=\"center\">If you find this work useful, please don't forget upvoting :)<\/h1>\n<\/div>","63358304":"<div class=\"alert alert-success\">  \n<\/div>","ba98fe20":"## Model - 3 \n\n### [ target_nitrogen_oxides ]"}}