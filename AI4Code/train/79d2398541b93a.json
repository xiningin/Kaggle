{"cell_type":{"f53b3ab8":"code","1b81f821":"code","6296d3df":"code","f9f339db":"code","c52a6219":"code","fc42c08f":"code","59014e20":"code","62a222f6":"code","73cf5aaf":"code","f7202c91":"code","8f423472":"markdown","4089f22e":"markdown","65ac1ad9":"markdown","3c397a63":"markdown","a6d31df8":"markdown","4ef70c17":"markdown","77e01858":"markdown","99cb70e4":"markdown","29cd72fa":"markdown","9962d1b9":"markdown"},"source":{"f53b3ab8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1b81f821":"from matplotlib import pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns","6296d3df":"train = pd.read_csv('..\/input\/training_set.csv')\ntrain_meta = pd.read_csv('..\/input\/training_set_metadata.csv')\ntrain = train.merge(train_meta[['object_id', 'ddf', 'ra', 'decl', 'target']], \n                    how='left', on='object_id')","f9f339db":"object_id = 105869076\nprint('object_id', object_id)\nfig, ax = plt.subplots(1, 1, figsize=(15, 5))\ndf = train[train.object_id == object_id]\nax.scatter(df.mjd, df.flux, c=df.passband, cmap='rainbow', marker='+')\nplt.show()","c52a6219":"train['mjd_frac'] = np.modf(train.mjd)[0]\n\n_ = plt.hist(train.mjd_frac, bins=100)\n","fc42c08f":"train['mjd_frac'] = np.modf(train.mjd + 0.3)[0]\n\n_ = plt.hist(train.mjd_frac, bins=100)","59014e20":"train['mjd_night'] = np.modf(train.mjd + 0.3)[1]","62a222f6":"def middle_gap(s):\n    s = s.values\n    s_prev = np.roll(s, 1)\n    s_delta = s - s_prev\n    s_delta_max = np.argmax(s_delta)\n    s_middle_gap = (s[s_delta_max] + s_prev[s_delta_max]) \/ 2\n    s_middle_gap = np.modf(s_middle_gap \/ 365)[0] * 365\n    return s_middle_gap\n    \ntrain['middle_gap'] = train.groupby('object_id'\n                                   ).mjd_night.transform(middle_gap)","73cf5aaf":"fix, ax = plt.subplots(1, 1, figsize=(12, 12))\nplt.title('Middle gap')\nplt.ylabel('Decl')\nplt.xlabel('Ra')\nax.scatter(train.ra, train.decl, \n           cmap='rainbow', c=train.middle_gap, marker='+')","f7202c91":"fix, ax = plt.subplots(1, 1, figsize=(12, 12))\nplt.ylabel('Middle gap')\nplt.xlabel('Ra')\nax.scatter(train.ra, train.middle_gap, marker='+')","8f423472":"Al light curves have gaps at regularly spaced intervals, see for instance this curve:","4089f22e":"It seems that the  middle gap is highly correlated with the ra coordinate.","65ac1ad9":"Light curves are irregularly spaced on the time axis.  They all exhibit some pretty large gaps. \n\nLet's look at these.\n\nFirst, let's load some data and packages","3c397a63":"We can see how the middle gap relates to the location of the source in earth coordinates.","a6d31df8":"Now the night starts at around 0.25 and ends around 0.75. We can define the night index accordingly.","4ef70c17":"We see 3 gaps, repating every year.  These are due to the relative position of the source, earth and the sun: the source must be visible during the night from the location of the telescope on earth. \n\nLet's analyse this further.","77e01858":"First, we reuse the time analysis we did in https:\/\/www.kaggle.com\/cpmpml\/some-peculiarity# : when is the night in term of mjd?","99cb70e4":"Seems the night starts around 0.95 and ends around 0.45. Let's shift time to have night in a consecutive integer part.","29cd72fa":"We see that the middle gap and ra are proportional to each other, modulo 365 for the middle gap, and modulo 360 for ra.","9962d1b9":"Let's look for the largest of these gaps, and compute its middle date within a year by taking its fraction modulo 365.  We do it for each object_id."}}