{"cell_type":{"f6364e6b":"code","695aaa2f":"code","60cc4e09":"code","39f4c76d":"code","05f22988":"code","3b7dc610":"code","eb8ae40c":"code","fbb3d64a":"code","0a7dce08":"code","00713f45":"code","8b7bbf1f":"code","58708d09":"code","ea36c1d3":"code","5e458d70":"code","2da62196":"code","cb19b3cd":"code","29be3dbd":"code","7ea943bc":"code","2f05438a":"code","e1246eae":"code","51ad43b7":"code","52bf5b82":"code","6b276255":"code","798b97a8":"code","516d9b1a":"code","e4e0b5a1":"code","a565cc18":"code","8ac3e730":"code","4005e582":"code","9503090c":"code","e6b7acd8":"code","8a83c723":"code","f12eeb91":"code","01fc4e75":"code","22bc3041":"code","5d9cf044":"code","28635fa8":"markdown","b396ad7f":"markdown","8e971753":"markdown","9398ebf4":"markdown","d686ee5b":"markdown","654df771":"markdown","8a21a91e":"markdown","f51517bf":"markdown","f458bc2a":"markdown","f4e7913a":"markdown","898feecc":"markdown","2bb6d3ba":"markdown","234572b2":"markdown","940a0882":"markdown"},"source":{"f6364e6b":"import numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns","695aaa2f":"data = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')","60cc4e09":"data.describe()","39f4c76d":"data.isnull().sum()","05f22988":"data.head()","3b7dc610":"bar, ax = plt.subplots(figsize = (12,12))\nplt.pie(data['type'].value_counts(), labels = data['type'].value_counts().index, autopct=\"%.1f%%\")\nplt.title('Distribution of Movie\/TV Show', size=20)","eb8ae40c":"bar, ax = plt.subplots(figsize = (10,10))\nsns.barplot(x = data['release_year'].value_counts().index[:5], y = data['release_year'].value_counts()[:5])\nplt.xlabel('Year')\nplt.ylabel('Frequency')\nplt.title('Release Frequency over Years')","fbb3d64a":"movie_data = data[data['type'] == 'Movie']\ntv_show_data = data[data['type'] == 'TV Show']\n# bar,ax = plt.subplots(1,2,figsize=(10,10))\ntemp = data[['type', 'release_year']]\ntemp = temp.value_counts().to_frame()\ntemp.reset_index(level=[0,1], inplace=True)\ntemp = temp.rename(columns = {0:'count'})\ntemp = pd.concat([temp[temp['type'] == 'Movie'][:5], temp[temp['type']== 'TV Show'][:5]])\n","0a7dce08":"# ax, bar = plt.subplots(figsize = (10,10))\nsns.catplot(x = 'release_year', y = 'count', hue = 'type', data = temp, kind = 'point')\nplt.xlabel('Release Year')\nplt.ylabel('Frequency')\nplt.title('Growth of Movie\/TV Show over Years', size=14)","00713f45":"temp = data[data['type'] == 'Movie'].reset_index()\ntemp['movie_duration'] = [int(x.split()[0]) for x in temp['duration'][temp['type'] == 'Movie']]\ntemp['movie_duration']\nbar, ax = plt.subplots(figsize = (10,10))\nsns.distplot(a = temp['movie_duration'])","8b7bbf1f":"temp = list()\nclean_data = data.dropna()\nclean_data.reset_index(inplace=True)\nfor ind, element in clean_data.iterrows():\n    type_show = element['type']\n    for director in str(element['director']).split(','):\n        temp.append([type_show, director])\ndirector_data = pd.DataFrame(temp, columns= ['type', 'director'])\ndirector_data","58708d09":"director_data_count = director_data.value_counts().to_frame()\ndirector_data_count.reset_index(level=[0,1], inplace=True)\nfamous_director = director_data_count.rename(columns={0:'count'})\n# famous_director = pd.concat([famous_director[famous_director['type'] == 'Movie'].iloc[:5,:], famous_director[famous_director['type'] == 'TV Show'].iloc[:5,:]])\n# famous_director.reset_index(inplace=True)\nfamous_director","ea36c1d3":"\nfor unique_type in famous_director['type'].unique():\n    bar, ax = plt.subplots(figsize=(10,10))\n    sns.barplot(x = 'director', y = 'count', data = famous_director[famous_director['type'] == unique_type].iloc[:5])\n    plt.xlabel('Director in {}'.format(str(unique_type)))\n    plt.ylabel('Frequency')\n    plt.title('Famous Director in {}'.format(str(unique_type)), size=20)","5e458d70":"temp = list()\nclean_data = data.dropna()\nclean_data.reset_index(inplace=True)\nfor ind, element in clean_data.iterrows():\n    type_show = element['type']\n    for country in str(element['country']).split(','):\n        temp.append([type_show, country])\ncountry_data = pd.DataFrame(temp, columns= ['type', 'country'])\n\ncountry = country_data.value_counts().to_frame()\ncountry.reset_index(level=[0,1], inplace = True)\ncountry = country.rename(columns = {0:'count'})\ncountry","2da62196":"bar, ax = plt.subplots(1,2, figsize=(14,10))\nsns.barplot(x = 'count', y ='country', data = country[country['type'] == 'Movie'].iloc[:3,:], ax = ax[0])\nax[0].set_xlabel('Frequency')\nax[0].set_ylabel('Country')\nax[0].set_title('Top Three countries with most Movies')\nsns.barplot(x = 'country', y = 'count', data = country[country['type'] == 'TV Show'].iloc[:3,:], ax = ax[1])\nax[1].set_xlabel('Country')\nax[1].set_ylabel('Frequency')\nax[1].set_title('Top Three countries with most TV Shows')","cb19b3cd":"temp = data[['type','release_year']][data['country'] == 'United States']\ntemp = temp.value_counts().to_frame()\ntemp.reset_index(level=[0,1], inplace =True)\ntemp = temp.rename(columns = {0:'count'})\ntemp","29be3dbd":"bar, ax = plt.subplots(1,2, figsize = (14,8))\nsns.pointplot(x = 'release_year', y = 'count', data = temp[temp['type'] == 'Movie'].iloc[:5], kind = 'point', ax = ax[0])\nsns.pointplot(x = 'release_year', y = 'count', data = temp[temp['type'] == 'TV Show'].iloc[:5], kind = 'point', ax = ax[1])\nax[0].set_xlabel('Release Year')\nax[0].set_ylabel('Release Frequency')\nax[0].set_title('Expansion of Movies over Years in U.S.A', size=18)\nax[1].set_xlabel('Release Year')\nax[1].set_ylabel('Release Frequency')\nax[1].set_title('Expansion of TV Show over Years in U.S.A', size=18)\n","7ea943bc":"temp = list()\nclean_data = data.dropna()\nclean_data.reset_index(inplace=True)\nfor ind, element in clean_data.iterrows():\n    type_show = element['type']\n    for cast in str(element['cast']).split(','):\n        temp.append([type_show, cast])\ncast_data = pd.DataFrame(temp, columns= ['type', 'country'])\n\n\ncast = cast_data.value_counts().to_frame()\ncast.reset_index(level=[0,1], inplace=True)\ncast = cast.rename(columns = {0:'count'})\ncast","2f05438a":"bar, ax = plt.subplots(figsize= (10,10))\nplt.pie(x = cast['count'][cast['type'] == 'Movie'][:10] , labels = cast['country'][cast['type'] == 'Movie'][:10], autopct=\"%.1f%%\")\nplt.title('Most Famous Cast in Movies', size=20)\nbar, ax = plt.subplots(figsize= (10,10))\nplt.pie(x = cast['count'][cast['type'] == 'TV Show'][:10] , labels = cast['country'][cast['type'] == 'TV Show'][:10], autopct=\"%.1f%%\")\nplt.title('Most Famous Cast in TV Show', size=20)","e1246eae":"temp = list()\nclean_data = data.dropna()\nclean_data.reset_index(inplace=True)\nfor ind, element in clean_data.iterrows():\n    type_show = element['release_year']\n    for cast in str(element['listed_in']).split(','):\n        temp.append([type_show, cast])\ncast_data = pd.DataFrame(temp, columns= ['release_year', 'cast'])\ncast_data","51ad43b7":"cast = cast_data.value_counts().to_frame()\ncast.reset_index(level=[0,1], inplace=True)\ncast = cast.rename(columns = {0:'count'})\n\n\nyears = [2019, 2018, 2017, 2016, 2015, 2014, 2013, 2012, 2011, 2010]\nyear_data = list()\nfor year in years:\n    temp1 = cast[cast['release_year'] == year].iloc[0,:]\n    temp2 = cast[cast['release_year'] == year].iloc[1,:]\n    year_data.append(list(temp1))\n    year_data.append(list(temp2))\n    \nyear = pd.DataFrame(year_data, columns=('years', 'genre', 'count'))\n","52bf5b82":"bar, ax = plt.subplots(figsize=(10,10))\nsns.barplot(x = 'years', y ='count', hue='genre', data = year)\nplt.xlabel('Years')\nplt.ylabel('Frequency')\nplt.title('Top Two Genre in last 10 years', size=20)","6b276255":"temp = data[['release_year', 'rating']]\ntemp = temp.value_counts().to_frame()\ntemp.reset_index(level =  [0,1], inplace = True)\ntemp = temp.rename(columns = {0:'count'})\nrating = pd.DataFrame([],columns = ('release_year', 'rating', 'count'))\nfor rating_element in data['rating'].unique():\n    rating = pd.concat([rating, temp[temp['rating'] == rating_element].iloc[:1,:]])\nrating","798b97a8":"bar, ax = plt.subplots(figsize = (10, 10))\nsns.barplot(x = 'count', y ='rating', data = rating, hue = 'release_year')\nplt.xlabel('Count')\nplt.ylabel('Ratings')\nplt.title('Maximum Growth of Rating in specific year', size=18)","516d9b1a":"from nltk.corpus import stopwords  \nfrom nltk.tokenize import word_tokenize  \nimport nltk\nimport re","e4e0b5a1":"data.head()","a565cc18":"data.isnull().sum()","8ac3e730":"data['director'] = data['director'].fillna('')\ndata['cast'] = data['cast'].fillna('')\ndata['text'] = data['title'] + ' '+data['director'] + ' '+ data['cast']+ ' ' +data['listed_in'] + ' '+data['description']","4005e582":"def preprocess(text):\n    text = re.sub('[^A-z]', ' ', text)\n    stop_words = set(stopwords.words('english'))  \n    word_tokens = word_tokenize(text)  \n    lemmatizer = nltk.stem.WordNetLemmatizer()\n    \n    filtered_sentence = []  \n    for w in word_tokens:  \n        if w not in stop_words:  \n            filtered_sentence.append(lemmatizer.lemmatize(w))\n    filtered = ' '.join([x for x in filtered_sentence])\n    return filtered.lower().strip()","9503090c":"data['text'] = data['text'].apply(lambda x : preprocess(x))","e6b7acd8":"from sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer()\ntext_features = vectorizer.fit_transform(data['text'])","8a83c723":"from sklearn.metrics.pairwise import cosine_similarity\nsimilarity_matrix = cosine_similarity(text_features)    ","f12eeb91":"def get_recommendation(movie_name):\n        movie_index = data[data['title'] == movie_name].index\n        movie_similarity = similarity_matrix[movie_index]\n        movie_data = pd.DataFrame({'cosine_similarity':movie_similarity[0], 'index':np.arange(6234)})\n        movie_data = movie_data.sort_values(by = 'cosine_similarity', ascending = False)\n        topn=10\n        movie_ids = movie_data['index'][1:topn]\n        recommendation_movies = list()\n        for temp in movie_ids:\n            movie = data['title'][temp]\n            recommendation_movies.append(movie)\n        return  recommendation_movies\n            ","01fc4e75":"get_recommendation('Transformers: Robots in Disguise')","22bc3041":"new_movie = {'movie_name' :'taare zameen par', 'genre' :'childrens film, drama', 'director' :'aamir khan, amole gupte', 'cast' :'Aamir Khan, darsheel safary', 'description':' The film explores the life and imagination of Ishaan, an 8-year-old dyslexic child. Although he excels in art, his poor academic performance leads his parents to send him to a boarding school. Ishaans new art teacher suspects that he is dyslexic and helps him to overcome his disability. Darsheel Safary stars as 8-year-old Ishaan, and Aamir Khan plays his art teacher.'}\nnew_movie = preprocess(' '.join([x for x in new_movie.values()]))\nnew_movie_features = vectorizer.transform([new_movie])\n\n\nall_features = np.concatenate((text_features.toarray(), new_movie_features.toarray()))\nsimilarity_matrix = cosine_similarity(all_features)    \ntemp = pd.DataFrame({'similarity':similarity_matrix[similarity_matrix.shape[0]-1], 'index':np.arange(6235)})\ntemp = temp.sort_values(by='similarity', ascending=False)\n","5d9cf044":"topn=10\nfor element in range(1, topn+1):\n    index = list(temp['index'])[element]\n    print(data['title'][index])","28635fa8":"# Growth of Movie\/TV Show over Years","b396ad7f":"# Recommendation For Completely New Movie","8e971753":"# Histogram For Movie Duration","9398ebf4":"# Distribution of Movie\/TV Show","d686ee5b":"# Content Based Recommendation System","654df771":"# Top Two Genre in last 10 years","8a21a91e":"# Maximum Growth of Rating in specific year","f51517bf":"# Import Data And Libraries","f458bc2a":"# Famous Director in Movie\/TV Show","f4e7913a":"# Exploratory Data Analysis (EDA)","898feecc":"# Most Famous Cast in TV Show","2bb6d3ba":"# > **Please give suggestions and upvote if you like**","234572b2":"# Expansion of TV Show\\Movie over Years in U.S.A","940a0882":"# Top Three countries with most TV Shows"}}