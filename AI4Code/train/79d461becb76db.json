{"cell_type":{"45d0be56":"code","0946822b":"code","f2adbc10":"code","9824646f":"code","c2a3f9b9":"code","a0cb98f2":"code","bb924661":"code","8290667c":"code","f1ec14cf":"code","b4a79755":"code","13162402":"code","8c392c92":"code","3a7590e2":"code","3490acdf":"code","8fdcfb59":"code","fc073b39":"code","55949334":"code","f28fc877":"code","28508f52":"code","b6ace4ac":"code","3227ea91":"code","c6d3c6a1":"code","dbc21dbf":"code","556d3222":"code","89bc0777":"code","388ef2ad":"code","3dfb9e0a":"code","7040d9d6":"markdown"},"source":{"45d0be56":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns","0946822b":"df = pd.read_csv('\/kaggle\/input\/early-diabetes-classification\/diabetes_data.csv',\n                  delimiter=';')","f2adbc10":"df.head()","9824646f":"ohe = pd.get_dummies(df['gender'])\ndf = df.drop('gender', 1)\ndf = df.join(ohe)","c2a3f9b9":"def missingdata(data):\n    return data.isnull().sum() \/ len(data) * 100","a0cb98f2":"missingdata(df)","bb924661":"df.describe().T","8290667c":"df.shape","f1ec14cf":"plt.figure(figsize=(15, 10), dpi = 500)\nsns.histplot(data=df, x=\"age\", hue=\"class\", bins= 50)","b4a79755":"df.corr()['class'].sort_values(ascending = False)","13162402":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import classification_report, mean_absolute_error, plot_roc_curve, plot_precision_recall_curve","8c392c92":"mm = MinMaxScaler()\ndf[['age']] = mm.fit_transform(df[['age']])","3a7590e2":"X = df.drop('class', 1)\ny = df['class']","3490acdf":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","8fdcfb59":"def modeltesting(algorithm, X_train, y_train, X_test, y_test):\n    model = algorithm()\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    print(classification_report(y_test, y_pred))","fc073b39":"modeltesting(RandomForestClassifier, X_train, y_train, X_test, y_test)","55949334":"modeltesting(KNeighborsClassifier, X_train, y_train, X_test, y_test)","f28fc877":"modeltesting(XGBClassifier, X_train, y_train, X_test, y_test)","28508f52":"modeltesting(LGBMClassifier, X_train, y_train, X_test, y_test)","b6ace4ac":"modeltesting(CatBoostClassifier, X_train, y_train, X_test, y_test)","3227ea91":"rfc = RandomForestClassifier()\nrfc.fit(X_train, y_train)\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\nxgb = XGBClassifier()\nxgb.fit(X_train, y_train)\ncat = CatBoostClassifier()\ncat.fit(X_train, y_train)\nlgbm = LGBMClassifier()\nlgbm.fit(X_train, y_train)","c6d3c6a1":"plt.figure(figsize=(16, 10))\nplot_precision_recall_curve(rfc, X_test, y_test, ax = plt.gca(),name = \"RFC\")\nplot_precision_recall_curve(knn, X_test, y_test, ax = plt.gca(),name = \"KNN\")\nplot_precision_recall_curve(xgb, X_test, y_test, ax = plt.gca(),name = \"XGB\")\nplot_precision_recall_curve(cat, X_test, y_test, ax = plt.gca(),name = \"CAT\")\nplot_precision_recall_curve(lgbm, X_test, y_test, ax = plt.gca(),name = \"LGBm\")\nplt.title('Precision-Recall curve')","dbc21dbf":"plt.figure(figsize=(16, 10))\nplot_roc_curve(rfc, X_test, y_test, ax = plt.gca(),name = \"RFC\")\nplot_roc_curve(knn, X_test, y_test, ax = plt.gca(),name = \"KNN\")\nplot_roc_curve(xgb, X_test, y_test, ax = plt.gca(),name = \"XGB\")\nplot_roc_curve(cat, X_test, y_test, ax = plt.gca(),name = \"CAT\")\nplot_roc_curve(lgbm, X_test, y_test, ax = plt.gca(),name = \"LGBm\")\nplt.title('ROC curve')","556d3222":"grid = {'max_depth': [3,4,5],'n_estimators':[100, 200, 300]}\n\n#Instantiate GridSearchCV\ngscv = GridSearchCV (estimator = cat, param_grid = grid, scoring ='accuracy', cv = 5)\n\n#fit the model\ngscv.fit(X,y)\n\n#returns the estimator with the best performance\nprint(gscv.best_estimator_)\n\n#returns the best score\nprint(gscv.best_score_)\n\n#returns the best parameters\nprint(gscv.best_params_)","89bc0777":"grid = {'max_depth': [i for i in range(10, 13)],'n_estimators':[220, 230]}\n\n#Instantiate GridSearchCV\ngscv = GridSearchCV (estimator = cat, param_grid = grid, scoring ='accuracy', cv = 5)\n\n#fit the model\ngscv.fit(X,y)\n\n#returns the estimator with the best performance\nprint(gscv.best_estimator_)\n\n#returns the best score\nprint(gscv.best_score_)\n\n#returns the best parameters\nprint(gscv.best_params_)","388ef2ad":"cat = CatBoostClassifier(max_depth=10, n_estimators=220)","3dfb9e0a":"cat.fit(X_train, y_train)\ny_pred = cat.predict(X_test)\nprint(classification_report(y_test, y_pred))\nplot_roc_curve(cat, X_test, y_test, name = \"CAT\")\nplot_precision_recall_curve(cat, X_test, y_test, name = \"CAT\")","7040d9d6":"# ML"}}