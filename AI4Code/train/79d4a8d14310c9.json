{"cell_type":{"93a41fe7":"code","7877ffbe":"code","8ba9e1d1":"code","6c75be7a":"code","6aeee26f":"code","ed3c5608":"code","5edabf2a":"code","e40b50b2":"code","0fc520fa":"code","c680f1e5":"code","a08bc37d":"code","b08f1d11":"code","d1b5db33":"code","c813efaf":"code","e042637e":"code","44419285":"code","61bf3470":"code","a6f9c4da":"code","5005fbf9":"code","e0c34ea0":"code","65fb9087":"code","428c629d":"code","aa9623b6":"code","ecd6c36b":"code","c18f067e":"code","56f04734":"code","c1922904":"code","b4b8b515":"code","24ba4a55":"code","b8386934":"code","1249fa9f":"markdown","94b5d2bd":"markdown","c3dbe97e":"markdown","dce5ad68":"markdown","0ecdc242":"markdown","5b7777d8":"markdown","09e8e89d":"markdown","8ea943e8":"markdown","39e8c434":"markdown","1f5ff96f":"markdown","da93eae7":"markdown","1831972d":"markdown","5e52a4de":"markdown","c7478b74":"markdown","18560d9e":"markdown","8a8602d6":"markdown","9033b562":"markdown","02d26fe7":"markdown"},"source":{"93a41fe7":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor","7877ffbe":"train = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\nsample = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')","8ba9e1d1":"train.info()","6c75be7a":"train.describe()","6aeee26f":"train.head()","ed3c5608":"train.tail()","5edabf2a":"train.sample()","e40b50b2":"train.isnull().sum()","0fc520fa":"sns.heatmap(train.corr())","c680f1e5":"cat_cols = []\nnum_cols = []\nfor col in train.columns:\n    if(train[col].value_counts().count() < 10):\n        cat_cols.append(col)\n    else:\n        num_cols.append(col)\n    print(col + '---' + str(train[col].value_counts().count()))","a08bc37d":"for col in cat_cols:\n    print(col + '---' + str(train[col].unique()))","b08f1d11":"num_cols","d1b5db33":"fig, axes = plt.subplots(1, 3, figsize=(15, 5))\nfig.suptitle('TRAIN')\n\n# time_step\nsns.histplot(ax=axes[0],data=train, x='time_step')\naxes[0].set_title('time_step')\n\n# u_in\nsns.histplot(ax=axes[1],data=train, x='u_in')\naxes[1].set_title('u_in')\n\n# pressure\nsns.histplot(ax=axes[2],data=train, x='pressure')\naxes[2].set_title('pressure')","c813efaf":"fig, axes = plt.subplots(1, 2, figsize=(15, 5))\nfig.suptitle('TEST')\n\n# time_step\nsns.histplot(ax=axes[0],data=test, x='time_step')\naxes[0].set_title('time_step')\n\n# u_in\nsns.histplot(ax=axes[1],data=test, x='u_in')\naxes[1].set_title('u_in')","e042637e":"fig, axes = plt.subplots(1, 3, figsize=(18, 10))\n\nsns.boxplot(ax=axes[0], data=train, x='time_step')\nsns.boxplot(ax=axes[1], data=train, x='u_in')\nsns.boxplot(ax=axes[2], data=train, x='pressure')","44419285":"fig, axes = plt.subplots(1, 3, figsize=(18, 10))\nfig.suptitle('TRAIN')\n\nsns.boxplot(ax=axes[0], data=train, x='time_step')\nsns.boxplot(ax=axes[1], data=train, x='u_in')\nsns.boxplot(ax=axes[2], data=train, x='pressure')","61bf3470":"fig, axes = plt.subplots(1, 2, figsize=(18, 10))\nfig.suptitle('TEST')\n\nsns.boxplot(ax=axes[0], data=train, x='time_step')\nsns.boxplot(ax=axes[1], data=train, x='u_in')","a6f9c4da":"Q1 = train.quantile(0.25)\nQ3 = train.quantile(0.75)\nIQR = Q3 - Q1\n((train < (Q1 - 1.5 * IQR)) | (train > (Q3 + 1.5 * IQR))).sum()","5005fbf9":"Q1 = test.quantile(0.25)\nQ3 = test.quantile(0.75)\ntestIQR = Q3 - Q1\n((test < (Q1 - 1.5 * testIQR)) | (test > (Q3 + 1.5 * testIQR))).sum()","e0c34ea0":"X = train.drop(['pressure'], axis=1)\ny = train['pressure']","65fb9087":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","428c629d":"#regr = RandomForestRegressor(max_depth=2, random_state=0)","aa9623b6":"xgb_params = {\n    'n_estimators': 5000,\n    'learning_rate': 0.1,\n    'subsample': 0.95,\n    'colsample_bytree': 0.11,\n    'max_depth': 2,\n    'booster': 'gbtree', \n    'reg_lambda': 66.1,\n    'reg_alpha': 15.9,\n    'random_state':42,\n    'tree_method':'gpu_hist',\n    'gpu_id':0,\n    'predictor':'gpu_predictor'\n}","ecd6c36b":"model = XGBRegressor(**xgb_params)\n#model = XGBRegressor(n_estimators= 5000,learning_rate= 0.1,random_state=1, tree_method='gpu_hist', gpu_id=0, predictor=\"gpu_predictor\")\n\nmodel.fit(X_train,y_train)","c18f067e":"model.score(X_test, y_test)","56f04734":"predicted = model.predict(test)\npredicted","c1922904":"predicted_pressure = pd.DataFrame({'pressure': predicted[:]})","b4b8b515":"test_result = test\ntest_result['pressure'] = predicted_pressure","24ba4a55":"submit_result = test_result[['id','pressure']]\nsubmit_result","b8386934":"submit_result.to_csv('submission.csv', index=False)","1249fa9f":"# Import Libraries","94b5d2bd":"## 4. Try to Find Correlation","c3dbe97e":"## 1. View the data information & quantitative measure","dce5ad68":"# Model hyperparameters","0ecdc242":"# Split train & test dataset","5b7777d8":"## 6. Find Unique values","09e8e89d":"## 3. Check for missing values.\nNo missing values in this dataset","8ea943e8":"# Predict","39e8c434":"# Fit the model\n***Note : Turn On GPU Accelerator***","1f5ff96f":"## 5. Split Categorical and numeric columns","da93eae7":"## 2. View the first, last & sample rows in the dataframe","1831972d":"## 7. Find Distribution of data","5e52a4de":"# **TADA** :D\n\nLoading -- more EDA & FE ","c7478b74":"### Outliers","18560d9e":"# Submit","8a8602d6":"# EDA","9033b562":"# Read datasets","02d26fe7":"# Evaluate"}}