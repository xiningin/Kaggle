{"cell_type":{"ac1a9dad":"code","0d5bbeef":"code","7f876959":"code","0cd85c0e":"code","7cb48c86":"code","176aab2e":"code","133c4a00":"code","9057f46d":"code","a3eeb790":"code","483cf4e4":"code","c0c202d9":"code","ea9bc330":"code","92c57137":"code","76367009":"code","a6e1c706":"code","5926a636":"code","ccdd7b7b":"code","6a915a76":"code","01ba0788":"code","2741686e":"code","5ef488e2":"code","ae596307":"code","3a0d6d63":"code","4bc0a7a6":"code","e55ad313":"code","ee88c8b2":"code","9e05443b":"code","eacc1389":"code","fd4aa618":"code","8935b078":"code","84bd2f51":"code","30faea2f":"code","3749e27d":"code","ee4bef64":"code","98fc3735":"code","435b11bb":"code","3a649cc7":"code","b1439d39":"code","c14251ba":"code","cb503495":"code","4a549aec":"code","9d35f03e":"code","35dc0657":"code","04d105a5":"code","341c0c01":"code","387bcffb":"markdown","c7b79a9f":"markdown","24de7450":"markdown","92befc3a":"markdown","1191aa74":"markdown","5172795a":"markdown","04855c1c":"markdown","1c831f91":"markdown","4782cadc":"markdown","8ece3ad2":"markdown","92e5dc49":"markdown","2136d999":"markdown","78f430d2":"markdown","cc401bd5":"markdown","8fec3bdf":"markdown","9054c4e8":"markdown"},"source":{"ac1a9dad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n# Data viz. and EDA\nimport matplotlib.pyplot as plt \n%matplotlib inline  \nimport plotly.offline as py\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot, iplot\nimport plotly.tools as tls\nimport plotly.figure_factory as ff\npy.init_notebook_mode(connected=True)\n\n## For scaling data \nfrom mlxtend.preprocessing import minmax_scaling \n\n# Tensorflow \nimport tensorflow as tf","0d5bbeef":"data = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","7f876959":"# checking missing values if any\ndisplay(data.info(),data.head())","0cd85c0e":"## lets see how many are affected by diabeties \nD = data[data['Outcome'] == 1]\nH = data[data['Outcome'] == 0]\n\n## here I am using graph_obs as I am not able to costimize px. \n\ndef target_count():\n    trace = go.Bar( x = data['Outcome'].value_counts().values.tolist(), \n                    y = ['healthy','diabetic' ], \n                    orientation = 'h', \n                    text=data['Outcome'].value_counts().values.tolist(), \n                    textfont=dict(size=15),\n                    textposition = 'auto',\n                    opacity = 0.5,marker=dict(\n                    color=['lightskyblue', ' indigo'],\n                    line=dict(color='#000000',width=1.5)))\n\n    layout = dict(title =  'Count of affectes females')\n\n    fig = dict(data = [trace], layout=layout)\n    py.iplot(fig)\n\n# --------------- donut chart to show there percentage -------------------- # \n\ndef target_per():\n    trace = go.Pie(labels=['healthy','diabetic' ],values=data['Outcome'].value_counts(),\n                   textfont=dict(size=15),\n                   opacity = 0.5,marker=dict(\n                   colors=['lightskyblue','indigo'],line=dict(color='#000000', width=1.5))\n                   \n                  )\n    layout = dict(title='Distribution of people affected.')\n    fig = dict(data=[trace],layout=layout)\n    py.iplot(fig)","7cb48c86":"target_count()\ntarget_per()","176aab2e":"\ndata[['Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age']] = data[['Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age']].replace(0,np.NaN)    ","133c4a00":"## Checking the new null values found.\ndata.isnull().sum()","9057f46d":"# Define missing plot to detect all missing values in dataset\ndef missing_plot(dataset, key) :\n    null_feat = pd.DataFrame(len(dataset[key]) - dataset.isnull().sum(), columns = ['Count'])\n    percentage_null = pd.DataFrame((dataset.isnull().sum())\/len(dataset[key])*100, columns = ['Count'])\n    percentage_null = percentage_null.round(2)\n\n    trace = go.Bar(x = null_feat.index, y = null_feat['Count'] ,opacity = 0.8, text = percentage_null['Count'],  textposition = 'auto',marker=dict(color = '#7EC0EE',\n            line=dict(color='#000000',width=1.5)))\n\n    layout = dict(title =  \"Missing Values (count & %)\")\n\n    fig = dict(data = [trace], layout=layout)\n    py.iplot(fig)\n    ","a3eeb790":"missing_plot(data,'Outcome')","483cf4e4":"## In this instead of changing all null values with a same number , we will opt for a different approach , where we will first find the median of diabetic and non diabetic parameter separately and then fill it with subsequent value, so that the data is not altered.","c0c202d9":"## to find the median for filling null values\n\ndef find_median(var):\n    temp = data[data[var].notnull()]\n    temp = data[[var,'Outcome']].groupby('Outcome')[[var]].median().reset_index()\n    return temp","ea9bc330":"def density_plot(var,size_bin):\n    tmp1 = D[var]\n    tmp2 = H[var]\n    \n    hist_data = [tmp1,tmp2]\n    labels = ['Diabeties','Healthy']\n    color = ['skyblue','indigo']\n    fig = ff.create_distplot(hist_data,labels,colors = color,show_hist=True,bin_size=size_bin,curve_type='kde')\n    \n    fig['layout'].update(title = var)\n\n    py.iplot(fig, filename = 'Density plot')\n    ","92c57137":"density_plot('Insulin',0)","76367009":"find_median('Insulin')","a6e1c706":"## Now we will be filling these values instead of null values\n\ndata.loc[(data['Outcome'] == 0) & (data['Insulin'].isnull()), 'Insulin'] = 102.5\ndata.loc[(data['Outcome'] == 1) & (data['Insulin'].isnull()), 'Insulin'] = 169.5","5926a636":"# SkinThickness density plot \n\ndensity_plot('SkinThickness',0)","ccdd7b7b":"find_median('SkinThickness')","6a915a76":"## Now we will be filling these values instead of null values\n\ndata.loc[(data['Outcome'] == 0) & (data['SkinThickness'].isnull()), 'SkinThickness'] = 27.0\ndata.loc[(data['Outcome'] == 1) & (data['SkinThickness'].isnull()), 'SkinThickness'] = 32.0","01ba0788":"density_plot('BloodPressure',0)","2741686e":"find_median('BloodPressure')","5ef488e2":"data.loc[(data['Outcome'] == 0) & (data['BloodPressure'].isnull()), 'BloodPressure'] = 27.0\ndata.loc[(data['Outcome'] == 1) & (data['BloodPressure'].isnull()), 'BloodPressure'] = 32.0","ae596307":"density_plot('BMI',0)","3a0d6d63":"find_median('BMI')","4bc0a7a6":"data.loc[(data['Outcome'] == 0) & (data['BMI'].isnull()), 'BMI'] = 30.1\ndata.loc[(data['Outcome'] == 1) & (data['BMI'].isnull()), 'BMI'] = 34.3","e55ad313":"density_plot('Glucose',0)","ee88c8b2":"find_median('Glucose')","9e05443b":"data.loc[(data['Outcome'] == 0) & (data['Glucose'].isnull()) , 'Glucose'] = 107.0\ndata.loc[(data['Outcome'] == 1) & (data['Glucose'].isnull()) , 'Glucose'] = 140.0","eacc1389":"## lets check if any null value is still left\n\ndisplay(data.isnull().sum())","fd4aa618":"import seaborn as sns\nplt.style.use('ggplot') # Using ggplot2 style visuals \n\nf, ax = plt.subplots(figsize=(11, 15))\n\nax.set_facecolor('#fafafa')\nax.set(xlim=(-.05, 200))\nplt.ylabel('Variables')\nplt.title(\"Overview Data Set\")\nax = sns.boxplot(data = data, \n  orient = 'h', \n  palette = 'Set2')","8935b078":"plt.figure(figsize=(12,10))  # on this line I just set the size of figure to 12 by 10.\np=sns.heatmap(data.corr(), annot=True,cmap ='RdYlGn')  # seaborn has very simple solution for heatmap","84bd2f51":"a = data.corr().abs()\na = a.unstack().sort_values(kind=\"quicksort\",ascending=False)\na[a<1].head(15)","30faea2f":"D = data[(data['Outcome']!=0)]\nH = data[(data['Outcome']==0)]\ndef plot_feat1_feat2(feat1, feat2) :  \n    trace0 = go.Scatter(\n        x = D[feat1],\n        y = D[feat2],\n        name = 'diabetic',\n        mode = 'markers', \n        marker = dict(color = '#FFD700',\n            line = dict(\n                width = 1)))\n\n    trace1 = go.Scatter(\n        x = H[feat1],\n        y = H[feat2],\n        name = 'healthy',\n        mode = 'markers',\n        marker = dict(color = '#7EC0EE',\n            line = dict(\n                width = 1)))\n\n    layout = dict(title = feat1 +\" \"+\"vs\"+\" \"+ feat2,\n                  yaxis = dict(title = feat2,zeroline = False),\n                  xaxis = dict(title = feat1, zeroline = False)\n                 )\n\n    plots = [trace0, trace1]\n\n    fig = dict(data = plots, layout=layout)\n    py.iplot(fig)\n    \ndef barplot(var_select, sub) :\n    tmp1 = data[(data['Outcome'] != 0)]\n    tmp2 = data[(data['Outcome'] == 0)]\n    tmp3 = pd.DataFrame(pd.crosstab(df1[var_select],df1['Outcome']), )\n    tmp3['% diabetic'] = tmp3[1] \/ (tmp3[1] + tmp3[0]) * 100\n\n    color=['lightskyblue','gold' ]\n    trace1 = go.Bar(\n        x=tmp1[var_select].value_counts().keys().tolist(),\n        y=tmp1[var_select].value_counts().values.tolist(),\n        text=tmp1[var_select].value_counts().values.tolist(),\n        textposition = 'auto',\n        name='diabetic',opacity = 0.8, marker=dict(\n        color='gold',\n        line=dict(color='#000000',width=1)))\n\n    \n    trace2 = go.Bar(\n        x=tmp2[var_select].value_counts().keys().tolist(),\n        y=tmp2[var_select].value_counts().values.tolist(),\n        text=tmp2[var_select].value_counts().values.tolist(),\n        textposition = 'auto',\n        name='healthy', opacity = 0.8, marker=dict(\n        color='lightskyblue',\n        line=dict(color='#000000',width=1)))\n    \n    trace3 =  go.Scatter(   \n        x=tmp3.index,\n        y=tmp3['% diabetic'],\n        yaxis = 'y2',\n        name='% diabetic', opacity = 0.6, marker=dict(\n        color='black',\n        line=dict(color='#000000',width=0.5\n        )))\n\n    layout = dict(title =  str(var_select)+' '+(sub),\n              xaxis=dict(), \n              yaxis=dict(title= 'Count'), \n              yaxis2=dict(range= [-0, 75], \n                          overlaying= 'y', \n                          anchor= 'x', \n                          side= 'right',\n                          zeroline=False,\n                          showgrid= False, \n                          title= '% diabetic'\n                         ))\n\n    fig = go.Figure(data=[trace1, trace2, trace3], layout=layout)\n    py.iplot(fig)\n\n# Define pie plot to visualize each variable repartition vs target modalities : Survived or Died (train)\ndef plot_pie(var_select, sub) :\n    D = data[(data['Outcome']!=0)]\n    H = data[(data['Outcome']==0)]\n    \n    col =['Silver', 'mediumturquoise','#CF5C36','lightblue','magenta', '#FF5D73','#F2D7EE','mediumturquoise']\n    \n    trace1 = go.Pie(values  = D[var_select].value_counts().values.tolist(),\n                    labels  = D[var_select].value_counts().keys().tolist(),\n                    textfont=dict(size=15), opacity = 0.8,\n                    hole = 0.5, \n                    hoverinfo = \"label+percent+name\",\n                    domain  = dict(x = [.0,.48]),\n                    name    = \"Diabetic\",\n                    marker  = dict(colors = col, line = dict(width = 1.5)))\n    trace2 = go.Pie(values  = H[var_select].value_counts().values.tolist(),\n                    labels  = H[var_select].value_counts().keys().tolist(),\n                    textfont=dict(size=15), opacity = 0.8,\n                    hole = 0.5,\n                    hoverinfo = \"label+percent+name\",\n                    marker  = dict(line = dict(width = 1.5)),\n                    domain  = dict(x = [.52,1]),\n                    name    = \"Healthy\" )\n\n    layout = go.Layout(dict(title = var_select + \" distribution by target <br>\"+(sub),\n                            annotations = [ dict(text = \"Diabetic\"+\" : \"+\"268\",\n                                                font = dict(size = 13),\n                                                showarrow = False,\n                                                x = .22, y = -0.1),\n                                            dict(text = \"Healthy\"+\" : \"+\"500\",\n                                                font = dict(size = 13),\n                                                showarrow = False,\n                                                x = .8,y = -.1)]))\n                                          \n\n    fig  = go.Figure(data = [trace1,trace2],layout = layout)\n    py.iplot(fig)","3749e27d":"plot_feat1_feat2('Glucose','Age')","ee4bef64":"palette ={0 : 'lightblue', 1 : 'gold'}\nedgecolor = 'black'\n\nfig = plt.figure(figsize=(12,8))\n\nax1 = sns.scatterplot(x = data['Glucose'], y = data['Age'], hue = \"Outcome\",\n                    data = data, palette = palette, edgecolor=edgecolor)\n\nplt.annotate('Less affected ', size=25, color='black', xy=(80, 30), xytext=(60, 35),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            )\nplt.plot([50, 120], [30, 30], linewidth=2, color = 'red')\nplt.plot([120, 120], [20, 30], linewidth=2, color = 'red')\nplt.plot([50, 120], [20, 20], linewidth=2, color = 'red')\nplt.plot([50, 50], [20, 30], linewidth=2, color = 'red')\nplt.title('Glucose vs Age')\nplt.show()","98fc3735":"plot_feat1_feat2('SkinThickness', 'BMI')","435b11bb":"palette ={0 : 'lightblue', 1 : 'gold'}\nedgecolor = 'black'\n\nfig = plt.figure(figsize=(12,8))\n\nax1 = sns.scatterplot(x = data['SkinThickness'], y = data['BMI'], hue = \"Outcome\",\n                    data = data, palette = palette, edgecolor=edgecolor)\n\nplt.annotate('Less affected', size=25, color='black', xy=(30, 30), xytext=(45, 20),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            )\nplt.plot([5, 30], [45, 45], linewidth=2, color = 'red')\nplt.plot([5, 5], [15, 45], linewidth=2, color = 'red')\nplt.plot([5, 30], [15, 15], linewidth=2, color = 'red')\nplt.plot([30, 30], [15, 45], linewidth=2, color = 'red')\nplt.title('SkinThickness vs BMI')\nplt.show()","3a649cc7":"plot_feat1_feat2('Pregnancies', 'Age')","b1439d39":"palette ={0 : 'lightblue', 1 : 'gold'}\nedgecolor = 'black'\n\nfig = plt.figure(figsize=(12,8))\n\nax1 = sns.scatterplot(x = data['Pregnancies'], y = data['Age'], hue = \"Outcome\",\n                    data = data, palette = palette, edgecolor=edgecolor)\n\nplt.annotate('Less affected', size=25, color='black', xy=(6, 25), xytext=(10, 25),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            )\nplt.plot([-.5, 6.5], [35, 35], linewidth=2, color = 'red')\nplt.plot([6.5, 6.5], [20, 35], linewidth=2, color = 'red')\nplt.plot([-.5, 6.5], [20, 20], linewidth=2, color = 'red')\nplt.plot([-.5, -.5], [20, 35], linewidth=2, color = 'red')\nplt.title('Pregnancies vs Age')\nplt.show()","c14251ba":"plot_feat1_feat2('Glucose', 'Insulin')\n\n","cb503495":"palette ={0 : 'lightblue', 1 : 'gold'}\nedgecolor = 'black'\n\nfig = plt.figure(figsize=(12,8))\n\nax1 = sns.scatterplot(x = data['Glucose'], y = data['Insulin'], hue = \"Outcome\",\n                    data = data, palette = palette, edgecolor=edgecolor)\n\nplt.annotate('People affected', size=25, color='black', xy=(100, 400), xytext=(40, 300),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            )\nplt.plot([100, 200], [700, 700], linewidth=2, color = 'red')\nplt.plot([100, 100], [140, 700], linewidth=2, color = 'red')\nplt.plot([100, 200], [140, 140], linewidth=2, color = 'red')\nplt.plot([200, 200], [140, 700], linewidth=2, color = 'red')\nplt.title('Glucose vs Insulin')\nplt.show()","4a549aec":"scaled_data = minmax_scaling(data,columns=['Pregnancies','Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age'])","9d35f03e":"def build_model():\n    model = tf.keras.Sequential([\n    tf.keras.layers.Dense(8, activation='relu', input_shape=[len(scaled_data.keys())]),\n    tf.keras.layers.Dense(8, activation='relu'),\n    tf.keras.layers.Dense(8, activation='relu'),\n    tf.keras.layers.Dense(8, activation='relu'),\n    tf.keras.layers.Dense(8, activation='relu'),\n    tf.keras.layers.Dense(8, activation='relu'),\n    tf.keras.layers.Dense(1,activation='sigmoid')\n  ])\n\n    optimizer = tf.keras.optimizers.RMSprop(0.01)\n\n    model.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n    return model\n\nmodel = build_model()\n\nmodel.summary()","35dc0657":"EPOCHS = 1500\n\nhistory = model.fit(scaled_data, data['Outcome'],epochs=EPOCHS, validation_split=0.2, verbose=2)","04d105a5":"hist = pd.DataFrame(history.history)\nhist['epoch'] = history.epoch\nhist.tail()","341c0c01":"acc = (hist['accuracy'].tail().sum())*100\/5 \nval_acc = (hist['val_accuracy'].tail().sum())*100\/5 \n\nprint(\"Training Accuracy = {}% and Validation Accuracy= {}%\".format(acc,val_acc))","387bcffb":"## We find 3 pairs which were having good correlations. \n\n## 1. SkinThickness and BMI","c7b79a9f":"## Here we can see that people with SkinThickness< 30 and BMI <45 are less likly to be affected with diageties. \n\n## 2. Pregnancies and Age\n\n","24de7450":"## 2. Corelation of the data","92befc3a":"### Here we can see that people with Glucose> 100 and Insulin > 180 are more likly to be affected with diageties.  \n\n## Scaling data using minmax_scaling\n\nWe are doing this step as to to load the data in the model and avoid multi-variable multi-output data problem. ","1191aa74":"# Affected People from Diabeties.","5172795a":"Here we can see 9 columns where 'Outcome' specifies whether the person is diabetic or not. \n\nIts great to see that there is no null element present. Thus we do not need to fill or drop empty cells.\nHowever on close inspection I found that there are many '0' values that doesn't make anysense. So we are considering them as null values.","04855c1c":"## Before we start with above parameter of corelation , we will look at the age with respect to the glucose level , as per the medical science age and glucose level are vital when it comes to prediction of the Diabetic .","1c831f91":"## Final Training and Validation Accuracy ","4782cadc":"### Here we can see that people with Age < 35 and Pragnancies < 6 are less likly to be affected with diageties.  \n\n## 3. Glucose and Insulin","8ece3ad2":"## Creating the binary classifier model.  ","92e5dc49":"# What is Diabetes ?\n**Diabetes** is a disease that occurs when your blood glucose, also called blood sugar, is too high. Blood glucose is your main source of energy and comes from the food you eat. Insulin, a hormone made by the pancreas, helps glucose from food get into your cells to be used for energy. Sometimes your body doesn\u2019t make enough\u2014or any\u2014insulin or doesn\u2019t use insulin well. Glucose then stays in your blood and doesn\u2019t reach your cells.\n\nOver time, having too much glucose in your blood can cause health problems. Although diabetes has no cure, you can take steps to manage your diabetes and stay healthy.\n\nSometimes people call diabetes \u201ca touch of sugar\u201d or \u201cborderline diabetes.\u201d These terms suggest that someone doesn\u2019t really have diabetes or has a less serious case, but every case of diabetes is serious.\n\n**What are the different types of diabetes?** The most common types of diabetes are type 1, type 2, and gestational diabetes.\n\n**Type 1 diabetes** If you have type 1 diabetes, your body does not make insulin. Your immune system attacks and destroys the cells in your pancreas that make insulin. Type 1 diabetes is usually diagnosed in children and young adults, although it can appear at any age. People with type 1 diabetes need to take insulin every day to stay alive.\n\n**Type 2 diabetes** If you have type 2 diabetes, your body does not make or use insulin well. You can develop type 2 diabetes at any age, even during childhood. However, this type of diabetes occurs most often in middle-aged and older people. Type 2 is the most common type of diabetes.\n\n**Gestational diabetes** It develops in some women when they are pregnant. Most of the time, this type of diabetes goes away after the baby is born. However, if you\u2019ve had gestational diabetes, you have a greater chance of developing type 2 diabetes later in life. Sometimes diabetes diagnosed during pregnancy is actually type 2 diabetes.\n\n**Other types of diabetes** Less common types include monogenic diabetes, which is an inherited form of diabetes, and cystic fibrosis-related diabetes .\"","2136d999":"# Now that we do not have any null values we can start with finding some correlations between the data presents \n\n## 1. To find the outlier in the data via box plot","78f430d2":"## As seen earlier there is no null value. \n\n### However on close inspection we find that null values are filled with '0'\n\n### We will convert these '0' values to null values which will later be replaced with appropriate value.","cc401bd5":"\n### With the help of the above heat map we are able visually locate the parameteres which have high corelation value. But lets get this done numberically so that we can quickly take points for for further procedure.","8fec3bdf":"### From the above there are few parameters which are high corelation value :\n\n### 1. SkinThickness and BMI\n### 2. Pregnancies and Age\n### 3. Glucose and Insulin \n\n","9054c4e8":"## This bar graphs shows that there are :\n\n## Diabetic 500\n\n## Non Diabetic 268"}}