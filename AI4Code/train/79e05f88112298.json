{"cell_type":{"0c83d42c":"code","e7560b5e":"code","d451321f":"code","88411820":"code","2f64e694":"code","03bd9382":"code","dfbee885":"code","5580afb5":"code","4596f756":"code","56eb0fad":"code","daf8a43b":"code","1640cf76":"code","b0866e4e":"code","83be8ed1":"code","161ab5ea":"code","a7f4358f":"code","aeb9a744":"code","a41f267a":"code","e9f3cb3c":"code","7fe861db":"code","ac553c01":"code","c33ee75c":"code","a6387328":"code","f5866930":"code","f74acc73":"code","8a79ddf1":"code","a819889f":"code","cb9dcbe9":"code","08f9a4c1":"code","072a2799":"code","e5045f27":"code","91ee8d04":"code","36ad6d91":"code","3e6e6610":"code","d02f9e3d":"code","675c7de9":"code","965aa93a":"code","455c9e87":"code","6ffbddef":"code","185ce4f0":"code","af697410":"code","0410f072":"code","f7e4d807":"code","6f5753f2":"code","99e055c0":"code","4fc84537":"code","4afbe3b6":"code","e770b71d":"code","e6b0e448":"code","e4de1a2f":"code","1742725f":"code","537e0682":"code","e9810b12":"code","6e744fcf":"code","0103bcf1":"code","3e92ec02":"code","cb3abc97":"code","5e250014":"code","4e359141":"markdown","2a6b4759":"markdown","8be34a32":"markdown","53057ca2":"markdown","40a44491":"markdown","522e2c29":"markdown","2bca03f2":"markdown","2df68f7e":"markdown","0498bfc6":"markdown","0545378b":"markdown","e802c02a":"markdown","c9ae3158":"markdown","4bc6ad41":"markdown","8278bcdb":"markdown","b357f607":"markdown","c980a5b8":"markdown","c925ee6e":"markdown","f63fddb0":"markdown","ba2d4161":"markdown","b32408a0":"markdown","c30a33d4":"markdown","1fbc6a75":"markdown","a387a5b3":"markdown","de72f4e0":"markdown","5fe8add8":"markdown","7d5f8886":"markdown","b3279bfc":"markdown","fb9829a9":"markdown","07fd9665":"markdown","984df74e":"markdown","c4f66f1b":"markdown","30a6e565":"markdown","60d48946":"markdown","be25a4d2":"markdown","c2eeae88":"markdown","01ce0c19":"markdown","0602b76e":"markdown","aff42716":"markdown","193ae869":"markdown","e9cdafb6":"markdown","00525cb0":"markdown","e34f2888":"markdown","692c7642":"markdown","e22b7ba3":"markdown"},"source":{"0c83d42c":"! pip install pywaffle","e7560b5e":"# Import libraries\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\nimport matplotlib.ticker as ticker\nimport matplotlib.image as image\nfrom matplotlib.offsetbox import OffsetImage,AnchoredOffsetbox\nimport seaborn as sns\nfrom pywaffle import Waffle\n%matplotlib inline\nimport plotly.express as px\nimport squarify\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport re\n\n\n# Setting for charts\nfacecolor_fig = '#efeeee'\nfacecolor_axes = '#efeeee'\nmain_color = '#80ddd9'\nlabel_color = '#658189'","d451321f":"raw = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv')\nraw.head()","88411820":"# print list to see where each data located\ndata_location = []\nfor i, name in enumerate(raw.columns):\n    data_location.append([i,name, raw.iloc[0,i]])\ndata_location = pd.DataFrame(data_location)\ndata_location.columns = ['columns', 'q_num', 'question']\npd.set_option('display.max_rows', None)\npd.set_option('display.max_colwidth', -1)\ndata_location","2f64e694":"pd.reset_option('^display.', silent=True)\ncolumn_name = raw.columns.str.replace(r'_Part([\\s\\S])*', '', regex=True).str.replace('_OTHER', '')\ndata = raw.iloc[1:,:]\ndata.columns = column_name","03bd9382":"gender = data.groupby('Q2')['Q2'].count()","dfbee885":"gender_plot = {'Male': 91, 'Female': 19}\nfig = plt.figure(figsize=(12,20),\n    FigureClass=Waffle, \n    rows=5, \n    values=gender_plot, \n    colors=[\"#609de3\", \"#f09488\"],\n    icons=['male', 'female'], \n    icon_size = 30,\n    interval_ratio_y=0.5,\n    facecolor=facecolor_fig\n)\nplt.legend([])\nplt.text(x=0, y=1.1,s='       ', ha='right')\nplt.text(x=0, y=-0.1,s='       ', ha='right')\nplt.text(x=0, y=1.05, \n              s='Male dominates in the Data Science space',\n              fontfamily='serif', fontsize=18, color ='#1a4f76', va='bottom', fontweight='bold')\n\nfig.text(x=0.42, y=0.5, s=\"81%\", \n             ha=\"center\", va=\"center\", fontsize=40, color='gray', alpha=0.5,\n             bbox={'boxstyle': 'square', 'lw': 3, 'ec': 'gray', 'fc': (0.9, 0.9, 0.9, 0.5), 'alpha': 0.3})\n\nfig.text(x=0.89, y=0.5, s=\"19%\", \n             ha=\"center\", va=\"center\", fontsize=40, color='gray', alpha=0.5,\n             bbox={'boxstyle': 'square', 'lw': 3, 'ec': 'gray', 'fc': (0.9, 0.9, 0.9, 0.5), 'alpha': 0.3})\nplt.show()","5580afb5":"# Age distribution\nage = data.groupby('Q1')['Q1'].count()\n# Age distribution by gender\ngender_age = pd.crosstab(index=data.Q1, columns=data.Q2).sort_values(by='Q1', ascending=False).loc[:, ['Man', 'Woman']]\ngender_age[['pct_man', 'pct_woman']] =gender_age.div(gender_age.sum(axis=0), axis=1) ","4596f756":"fig, ax = plt.subplots(1,3, figsize=(15,6),  facecolor = facecolor_fig)\nax[0].patch.set_facecolor(facecolor_axes)\n\n# Age distribution plot\nax[0].barh(width=age, y=age.index, align='center', color=main_color)\n\nfor _, spine in ax[0].spines.items():\n    spine.set_visible(False)\nax[0].invert_yaxis()\nax[0].tick_params(length=0, width=0)\nax[0].set_xlabel('(No. of participants)',  color='k', size=12, x=1, ha='right')\n\n# Label values \nvalues = age.values\nfor i, value in enumerate(values):\n    ax[0].text(value+50 , i , int(value), va='center', \n                 color=label_color, fontweight='bold', alpha=0.8, size=10)\n    \n#------------------------------------------------------------------------------------------------------------------------------------\n\n# Age and male distribution plot\nax[1].barh(y=gender_age.index, width=gender_age['pct_man'], color='#609de3')\nax[1].patch.set_facecolor(facecolor_axes)\nax[1].set_yticks([])\nfor _, spine in ax[1].spines.items():\n    spine.set_visible(False)\nax[1].tick_params(length=0, width=0)\nax[1].xaxis.set_major_formatter(mtick.PercentFormatter(1.0, decimals=0)) #Format x axis to % without decimals\nax[1].set_xlabel('(% of male participants)',  color='k', size=12, x=-0.05, ha='left')\nax[1].set_xlim(0,0.25)\nax[1].invert_xaxis()\n\n# Label values \nvalues =gender_age['pct_man'].values\nfor i, value in enumerate(values):\n    ax[1].text(value+0.002 , i , '{:.1f}%'.format(value*100), va='center', \n                 color='#609de3', fontweight='bold', alpha=0.8, size=10, ha='right')\n    \n#--------------------------------------------------------------------------------------------------------------------------------------------\n\n# Age and female distribution plot\nax[2].barh(y=gender_age.index, width=gender_age['pct_woman'], color='#f09488')\nax[2].patch.set_facecolor(facecolor_axes)\nfor _, spine in ax[2].spines.items():\n    spine.set_visible(False)\nax[2].tick_params(length=0, width=0)\nax[2].tick_params(axis='y',pad=20)\nax[2].xaxis.set_major_formatter(mtick.PercentFormatter(1.0, decimals=0)) \nax[2].set_xlabel('(% of female participants)', color='k', size=12, x=1.05, ha='right')\nax[2].set_xlim(0,0.25)\nax[2].set_ylabel('Age group', color='k', size=12, x=0, y=1, ha='left', rotation=0)\n\n# Label values \nvalues =gender_age['pct_woman'].values\nfor i, value in enumerate(values):\n    ax[2].text(value+0.002 , i , '{:.1f}%'.format(value*100), va='center', \n                 color='#f09488', fontweight='bold', alpha=0.8, size=10, ha='left')    \n    \n#--------------------------------------------------------------------------------------------------------------------------------------------    \n    \n# Figurue comment    \nplt.suptitle(x=0.05, y=1,t=\"Younger geneatrations embrace new technology\", ha='left',\n                     fontsize=20, fontfamily='serif',fontweight='bold', color='#1a4f76')\nax[0].text(x=0.05, y=0.9,ha='left',\n                  s='More than half of participants were below age 30',\n                  fontsize=14, fontfamily='serif', color='#1a4f76', alpha=0.8,           \n                  transform=fig.transFigure)    \n\nplt.tight_layout()    ","56eb0fad":"data['Q3'] = data['Q3'].replace(['United States of America','United Kingdom of Great Britain and Northern Ireland'],['USA','UK'])\ncountry = data.groupby('Q3')['Q3'].count()\ncountry_top20 = pd.DataFrame(country).drop(index='Other').nlargest(20,['Q3'])","daf8a43b":"fig = plt.figure(figsize=(15,8), facecolor=facecolor_fig)\nax = country_top20['Q3'].plot(kind='barh', color=main_color)\nax.patch.set_facecolor(facecolor_axes)\n\n# Remove chart frame\nfor _, spine in ax.spines.items():\n    spine.set_visible(False)\n\nax.tick_params(length=0, width=0)\n\nax.set_ylabel('')\nax.set_xlabel('No. of participants', x=1, ha='right')\n\n# Label values \nvalues = country_top20['Q3'].values\nfor i, value in enumerate(values):\n    ax.text(value+50 , i , int(value), va='center', \n                 color='#658189', fontweight='bold', alpha=0.8)\n    \nax.invert_yaxis()\n\nplt.title(x=0.05, y=0.9, label='More than 7,000 Indian pariticated in the Kaggle Survey', ha='left', va='bottom', transform=fig.transFigure,\n              size=20, fontfamily='serif', fontweight='bold', color = '#1a4f76' )\nplt.show()","1640cf76":"# Education background\n# Rename \neducation_name = ['I prefer not to answer', 'Some college\/university study without earning a bachelor\u2019s degree', 'No formal education past high school']\neducation_replace = ['Not disclosed','College', 'High school']\ndata['Q4'] = data['Q4'].replace(education_name, education_replace)\nqualification_index =['Professional doctorate', 'Doctoral degree', 'Master\u2019s degree', 'Bachelor\u2019s degree', 'College', 'High school','Not disclosed']\n\n# Qualification distribution\neducation = data.groupby('Q4')['Q4'].count()\neducation = pd.DataFrame(education, index=qualification_index)\n\n# Qualification distribution by gender\nedu_gender = pd.crosstab(index=data.Q4, columns=data.Q2).loc[:, ['Man', 'Woman']]\nedu_gender[['pct_man', 'pct_woman']] =edu_gender.div(edu_gender.sum(axis=0), axis=1) \nedu_gender = pd.DataFrame(edu_gender, index=qualification_index)","b0866e4e":"fig, ax = plt.subplots(1,3, figsize=(12,4), facecolor = facecolor_fig)\n\n# Education distribution\nsns.barplot(x=education['Q4'], y=education.index, ax=ax[0], color=main_color)\nax[0].patch.set_facecolor(facecolor_axes)\nfor _, spine in ax[0].spines.items():\n    spine.set_visible(False)\nax[0].invert_yaxis()\nax[0].tick_params(length=0, width=0)\nax[0].set_xlabel('No. of participants', size=10)\nax[0].invert_yaxis()\n\n# Label values \nvalues = education['Q4'].values\nfor i, value in enumerate(values):\n    ax[0].text(value+50 , i , int(value), va='center', \n                 color='#658189', fontweight='bold', alpha=0.8, size=10)\n\n#----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n# Education and male distribution\nsns.barplot(x=edu_gender['pct_man'], y=edu_gender.index, ax=ax[1], color='#609de3')\nax[1].patch.set_facecolor(facecolor_axes)\nax[1].set_yticks([])\nfor _, spine in ax[1].spines.items():\n    spine.set_visible(False)\nax[1].tick_params(length=0, width=0)\nax[1].xaxis.set_major_formatter(mtick.PercentFormatter(1.0, decimals=0)) #Format x axis to % without decimals\nax[1].set_xlabel('(% of male participants)',  color='k', size=10, x=-0.05, ha='left')\nax[1].set_xlim(0,0.5)\nax[1].invert_xaxis()\n\n# Label values \nvalues =edu_gender['pct_man'].values\nfor i, value in enumerate(values):\n    ax[1].text(value+0.002 , i , '{:.1f}%'.format(value*100), va='center', \n                 color='#609de3', fontweight='bold', alpha=0.8, size=10, ha='right')\n    \n    \n#----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n# Education and female distribution\nsns.barplot(x=edu_gender['pct_woman'], y=edu_gender.index, ax=ax[2], color='#f09488')\nax[2].patch.set_facecolor(facecolor_axes)\nax[2].set_yticks([])\nfor _, spine in ax[2].spines.items():\n    spine.set_visible(False)\nax[2].tick_params(length=0, width=0)\nax[2].xaxis.set_major_formatter(mtick.PercentFormatter(1.0, decimals=0)) \nax[2].set_xlabel('(% of female participants)', color='k', size=10, x=1.05, ha='right')\nax[2].set_xlim(0,0.5)\n\n# Label values \nvalues =edu_gender['pct_woman'].values\nfor i, value in enumerate(values):\n    ax[2].text(value+0.002, i , '{:.1f}%'.format(value*100), va='center', \n                 color='#f09488', fontweight='bold', alpha=0.8, size=10, ha='left')\n    \n#----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n# Plot comment\nplt.suptitle(x=0, y=1, ha='left',\n                     t=\"The majority of participants has higher education qualifications\", \n                     fontsize=20, fontfamily='serif',fontweight='bold', color='#1a4f76')\nplt.show()","83be8ed1":"# Job title\n# Rename some long titles\njob_dist_name = ['DBA\/Database Engineer', 'Developer Relations\/Advocacy','Program\/Project Manager', 'Product Manager']\njob_dist_repalce = ['DBA', 'DevRel', 'Program\/Project Mgr',  'Product Mgr']\ndata['Q5'] = data['Q5'].replace(job_dist_name, job_dist_repalce)\n\njob = pd.DataFrame(data.groupby('Q5')['Q5'].count())\njob['pct'] = job\/len(data) *100\njob = job.sort_values(by='pct', ascending=False)","161ab5ea":"fig = plt.figure(figsize=(12,6), facecolor = facecolor_fig)\n\nlabels = [\"%s\\n %.1f %%\" % label for label in zip(job.index, job['pct'])]\nsquarify.plot(job['Q5'], label=labels, \n                        color=plt.cm.Pastel2.colors, linewidth=2, edgecolor='w', alpha=0.8)\nplt.axis('off')\nplt.title(\"Participants' job title\", x=0.01, y=.95, ha='left',\n               size=16, fontfamily='serif', fontweight='bold', color = '#1a4f76' , transform=fig.transFigure)\nplt.tight_layout()","a7f4358f":"# Scatter plot to show requetions of reponse for questions with multiple answers\ndef mc_question_plot(x, y, question):\n    # Prepare scatter plot\n    fig = plt.figure(figsize=(10,5), facecolor = facecolor_fig)\n    plt.scatter(x=x, y=y, s=50, color=main_color)\n\n# Label data point\n    for i, label in enumerate(x):\n        plt.gca().annotate(\"%.1f %%\" % (label*100), (x[i]+x.max()*0.02, y[i]), ha='left', va='center',\n                                          color= '#1a4f76', alpha=0.8)\n\n# Format chart\n    plt.gca().xaxis.set_major_formatter(mtick.PercentFormatter(1.0, decimals=0))\n    plt.gca().set_xlim(0,x.max()*1.1)\n    plt.gca().invert_yaxis()\n\n    plt.gca().patch.set_facecolor(facecolor_axes)\n    for _, spine in plt.gca().spines.items():\n        spine.set_visible(False)\n    plt.gca().tick_params(direction='out', length=0, width=0, pad=15)\n    plt.grid(linestyle='--', alpha=0.5)\n    plt.xlabel('% of participants', x=1, ha='right')\n    plt.xlim(0,x.max()*1.1)\n    \n# Add title and make it aligned to the left    \n    bbox_list = []\n    plt.gcf().canvas.draw()\n    ticklabels = [label for label in plt.gca().get_yticklabels()]   \n    for i, label in enumerate(ticklabels):\n        bbox_list.append(label.get_window_extent().x0)   # to get a list of coordiantes for the yticklabels\n    min_label = min(bbox_list)  # find the x-coodiante that lies at the most left\n    x,_ = plt.gca().transAxes.inverted().transform([min_label, 0])\n    plt.title(question, x=x, y=1.05, ha='left',\n                   size=16, fontfamily='serif', fontweight='bold', color = '#1a4f76')  ","aeb9a744":"# Q20: In what industry is your current employer\/contract (or your most recent employer if retired)?\nQ20 = pd.DataFrame(data.loc[:,'Q20'])\nQ20_count = pd.DataFrame(Q20.groupby('Q20')['Q20'].count().sort_values(ascending=False))\nQ20_count['pct'] = Q20_count\/Q20_count.sum(axis=0)\n\n# data for scatter plot\nx = Q20_count['pct']\ny = Q20_count.index\nquestion = \"In what industry is your current employer\/contract?\"\nmc_question_plot(x, y, question)# data for scatter plot","a41f267a":"# Q6: For how many years have you been writing code and\/or programming?\ndata['Q6'] = data['Q6'].replace('I have never written code', 'Never')\n\ncoding_exp = data.groupby('Q6')['Q6'].count()\nQ6_index_order = ['Never', '< 1 years', '1-3 years', '3-5 years', '5-10 years', '10-20 years', '20+ years']\ncoding_exp = pd.DataFrame(coding_exp, index=Q6_index_order)\ncoding_exp['pct'] = coding_exp \/ coding_exp.sum()","e9f3cb3c":"fig = plt.figure(figsize=(10,5), facecolor=facecolor_fig)\nax =coding_exp['Q6'].plot(kind='barh', color=main_color)\nax.patch.set_facecolor(facecolor_fig)\n\n# Remove chart frame\nfor _, spine in ax.spines.items():\n    spine.set_visible(False)\n\nax.tick_params(length=0, width=0)\nax.set_ylabel('')\nax.set_xlabel('No. of participants', x=1, ha='right')\nax.invert_yaxis()\n\n# Label values \nvalues = coding_exp['Q6'].values\nfor i, value in enumerate(values):\n    ax.text(value+50 , i , int(value), va='center', \n                 color='#658189', fontweight='bold', alpha=0.8)\n    \nplt.title(x=-0.02, y=0.9, label='Half of the participants have started coding in recent years', ha='left', va='bottom', transform=fig.transFigure,\n              size=20, fontfamily='serif', fontweight='bold', color = '#1a4f76' )\n\nplt.show()","7fe861db":"exp_age = pd.crosstab(index=data['Q6'], columns=data['Q1'], values=data['Q1'], aggfunc='count', margins=True)\nexp_age = pd.DataFrame(exp_age, index=Q6_index_order)\n# Above table in percentage form\nexp_age_pct = np.round((exp_age \/ exp_age.sum(axis=0)) *100,1)\n# Melt dataframe, so only contains 'coding experience', ' age' and '% values'\nexp_age_pct.reset_index(inplace = True)\nage_cols = ['18-21', '22-24', '25-29', '30-34', '35-39', '40-44', '45-49', '50-54', '55-59', '60-69', '70+']\nexp_age_melt = pd.melt(exp_age_pct, id_vars=['index'],value_vars=age_cols)","ac553c01":"fig = plt.figure(figsize=(10,8), facecolor = facecolor_fig)\nax = sns.scatterplot(x='index', y='Q1', data=exp_age_melt, s=exp_age_melt['value']**1.6, c=exp_age_melt['value'], cmap='Blues_r', label='% participants in each age group')\nax.patch.set_facecolor(facecolor_axes)\n\n# Format chart\nfor _, spine in ax.spines.items():\n    spine.set_visible(False)\nax.tick_params(length=0, width=0)\nplt.grid(color = 'w', linestyle = '--', linewidth = 0.8, alpha=1)\nplt.xlabel('No. of years with coding experience', ha='center')\nplt.ylabel('Age', rotation= 90)\nplt.legend(loc='upper right')\nplt.title(\"Older participants have more years of experience in coding\", x=0.01, y=1, ha='left',\n               size=16, fontfamily='serif', fontweight='bold', color = '#1a4f76' , transform=fig.transFigure)\nplt.text(s=\"... However across all age groups have participants that just started in recent years\", x=0.01, y=.95, ha='left',\n               size=14, fontfamily='serif', color = '#1a4f76' , alpha=0.8, transform=fig.transFigure)\nplt.text(s=\"... It's never too late to learn!\", x=0.01, y=.91, ha='left',\n               size=14, fontfamily='serif', color = '#e84a5f' , alpha=1, transform=fig.transFigure)\nplt.show()","c33ee75c":"# Q15: For how many years have you used machine learning methods?\ndata['Q15'] = data['Q15'].replace(['I do not use machine learning methods', 'Under 1 year', '20 or more years'], ['Never', '< 1 year', '> 20 years'])\n\nQ15 = data.groupby('Q15')['Q15'].count()\nindex_order = ['Never', '< 1 year', '1-2 years', '2-3 years', '3-4 years', '4-5 years', '5-10 years', '10-20 years', '> 20 years']\nQ15 = pd.DataFrame(Q15, index=index_order)\nQ15['pct'] = Q15 \/ Q15.sum()\n\n# data for scatter plot\nx = Q15['pct']\ny = Q15.index\ntitle =\"Only a small fraction of participants has > 3 years of experience in ML\"\nmc_question_plot(x, y, title)# data for scatter plot","a6387328":"# What programming languages do you use on a regular basis? (Select all that apply)\nQ7 = data.loc[:,'Q7']\nQ7_cols = ['Python', 'R', 'SQL', 'C', 'C++', 'Java', 'Javascript', 'Julia', 'Swift', 'Bash', 'MATLAB', 'None','Other']\nQ7.columns = Q7_cols\n\nQ7_count = pd.DataFrame(Q7.count().sort_values(ascending=False))\nQ7_count['pct'] = Q7_count \/ len(data)\n\n# data for scatter plot\nx = Q7_count['pct']\ny = Q7_count.index\nquestion = 'What programming languages do you use on a regular basis?'\nmc_question_plot(x, y, question)","f5866930":"# Q8: What programming language would you recommend an aspiring data scientist to learn first?\nQ8 = pd.DataFrame(data.loc[:,'Q8'])\n\nQ8_count = Q8.groupby('Q8')['Q8'].count().sort_values(ascending=False)\nQ8_count = pd.DataFrame(Q8_count)\nQ8_count['pct'] = Q8_count \/ Q8_count.sum()\n\n# data for scatter plot\nx = Q8_count['pct']\ny = Q8_count.index\nquestion = 'What programming language would you recommend to learn first?'\nmc_question_plot(x, y, question)","f74acc73":"# Q9: Which of the following integrated development environments (IDE's) do you use on a regular basis?\nQ9 = data.loc[:,'Q9']\nQ9_cols = ['JupyterLab', 'RStudio', 'Visual Studio',  'VSCode',  'PyCharm', 'Spyder',  \n                     'Notepad++', 'Sublime Text', 'Vim\/Emacs', 'MATLAB', 'Jupyter Notebook', 'None', 'Other']\nQ9.columns = Q9_cols\n\nQ9_count = pd.DataFrame(Q9.count().sort_values(ascending=False))\nQ9_count['pct'] = Q9_count \/ len(data)\n\n# data for scatter plot\nx = Q9_count['pct']\ny = Q9_count.index\nquestion = \"Which of the following IDE's do you use on a regular basis?\"\nmc_question_plot(x, y, question)","8a79ddf1":"#Q10: Which of the following hosted notebook products do you use on a regular basis? (Select all that apply)\nQ10 = data.loc[:,'Q10']\nQ10_cols = ['Kaggle','Colab', 'Azure', 'Paperspace \/ Gradien', 'Binder \/ JupyterHub', 'Code Ocean', 'IBM Watson Studio', \n                      'Amazon Sagemaker Studio', 'Amazon EMR', 'Google Cloud Notebooks', 'Google Cloud Datalab','Databricks Collaborative',\n                      'Zeppelin \/ Zepl','Deepnote', 'Observable', 'None', 'Other']\nQ10.columns = Q10_cols\n\nQ10_count = pd.DataFrame(Q10.count().sort_values(ascending=False))\nQ10_count['pct'] = Q10_count \/ len(data)\n\n# data for scatter plot\nx = Q10_count['pct']\ny = Q10_count.index\nquestion = 'Which of the hosted notebook products do you use on a regular basis? '\nmc_question_plot(x, y, question)","a819889f":"# Q12: Which types of specialized hardware do you use on a regular basis?\nQ12 = data.loc[:, 'Q12']\nQ12_cols = ['NVIDIA GPUs', 'Google Cloud TPUs', 'AWS Trainium Chips', 'AWS Inferentia Chips', 'None', 'Other']\nQ12.columns = Q12_cols\n\nQ12_count = pd.DataFrame(Q12.count().sort_values(ascending=False))\nQ12_count['pct'] = Q12_count \/ Q12_count.sum()\n\n# data for scatter plot\nx = Q12_count['pct']\ny = Q12_count.index\nquestion = \" Which types of specialized hardware do you use on a regular basis?\"\nmc_question_plot(x, y, question)","cb9dcbe9":"# Q13: Approximately how many times have you used a TPU (tensor processing unit)?\n\nQ13 = pd.DataFrame(data.loc[:,'Q13'])\n\nQ13_count = Q13.groupby('Q13')['Q13'].count().sort_values(ascending=False)\nQ13_count = pd.DataFrame(Q13_count)\nQ13_count['pct'] = Q13_count \/ Q13_count.sum()\n\n# data for scatter plot\nx = Q13_count['pct']\ny = Q13_count.index\nquestion = 'Approximately how many times have you used a TPU (tensor processing unit)?'\nmc_question_plot(x, y, question)","08f9a4c1":"# Q14: What data visualization libraries or tools do you use on a regular basis? (Select all that apply)\nQ14 = data.loc[:,'Q14']\nQ14_cols = [' Matplotlib','Seaborn', 'Plotly\/Plotly Express', 'Ggplot ggplot2','Shiny','D3 js', 'Altair', 'Bokeh', 'Geoplotlib', 'Leaflet\/Folium', 'None', 'Other']\nQ14.columns = Q14_cols\n\nQ14_count = pd.DataFrame(Q14.count().sort_values(ascending=False))\nQ14_count['pct'] = Q14_count \/ len(data)\n\n# data for scatter plot\nx = Q14_count['pct']\ny = Q14_count.index\nquestion = \"What data visualization libraries or tools do you use on a regular basis? \"\nmc_question_plot(x, y, question)","072a2799":"#16: Which of the following machine learning frameworks do you use on a regular basis? (Select all that apply)\nQ16 = data.loc[:, 'Q16']\nQ16_cols = ['Scikit-learn', 'TensorFlow', 'Keras', 'PyTorch', 'Fast.ai', 'MXNet', 'Xgboost', 'LightGBM', 'CatBoost',\n                      'Prophet', 'H2O 3', 'Caret', 'Tidymodels', 'JAX', 'PyTorch Lightning', 'Huggingface', 'None', 'Other']\nQ16.columns = Q16_cols\n\nQ16_count = pd.DataFrame(Q16.count().sort_values(ascending=False))\nQ16_count['pct'] = Q16_count \/ len(data)\n\n# data for scatter plot\nx = Q16_count['pct']\ny = Q16_count.index\nquestion = 'Which ML frameworks do you use regularly?'\nmc_question_plot(x,y,question)","e5045f27":"# Q17: Which of the following ML algorithms do you use on a regular basis? (Select all that apply):\nQ17 = data.loc[:,'Q17']\nQ17_cols = ['Linear or Logistic Regression', 'Decision Trees or Random Forests', 'Gradient Boosting Machines (xgboost, lightgbm, etc)','Bayesian Approaches',\n                      'Evolutionary Approaches', 'Dense Neural Networks (MLPs, etc)', 'Convolutional Neural Networks', 'Generative Adversarial Networks',\n                      'Recurrent Neural Networks', 'Transformer Networks (BERT, gpt-3, etc)', 'None', 'Other']\nQ17.columns = Q17_cols\n\nQ17_count = pd.DataFrame(Q17.count().sort_values(ascending=False))\nQ17_count['pct'] = Q17_count \/ len(data)\n\n# data for scatter plot\nx = Q17_count['pct']\ny = Q17_count.index\nquestion = \"Which of the following ML algorithms do you use on a regular basis? \"\nmc_question_plot(x, y, question)","91ee8d04":"fig = plt.figure(figsize=(12,8), facecolor=facecolor_fig)\nax = plt.barh(y=y, width=x, height=0.5, color=main_color, alpha=0.5)  #Increase bar spacing by changing height\nplt.gca().patch.set_facecolor(facecolor_axes)\n\n# Invert y_axis\nplt.gca().invert_yaxis()\n\n# Adding data label \nlabels = x\nfor i, label in enumerate(labels):\n    plt.text(x=label + labels.max()*0.01, y=i, s=(\"%.1f %%\"% (label*100)), va='center', color='#658189', fontweight='bold')\n\n# Add ticklabels to top of the bar\nticklabels = y\nfor i, ticklabel in enumerate(ticklabels):\n     plt.text(x=0, y=i-0.45, s=ticklabel, va='center', color= '#658189', \n                    fontweight='bold', size=10)\n        \n# Remove yticklabels from y-axis\nplt.gca().tick_params(axis='y', label1On=False)\nplt.gca().tick_params(axis='x', label1On=False)\n    \n# Remove chart frame\nfor _, spine in plt.gca().spines.items():\n    spine.set_visible(False)\n    \n# Remove ticks    \nplt.gca().tick_params(length=0)    ","36ad6d91":"# Q40: On which platforms have you begun or completed data science courses? (Select all that apply)\nQ40 = data.loc[:, 'Q40']\nQ40_cols = ['Coursera', 'edX', 'Kaggle', 'DataCamp', 'Fast.ai', 'Udacity', 'Udemy', 'LinkedIn', 'Cloud certification', ' Univeristy', 'None', 'Other']\nQ40.columns = Q40_cols\n\nQ40_count = pd.DataFrame(Q40.count().sort_values(ascending=False))\nQ40_count['pct'] = Q40_count \/ len(data)\n\n# data for scatter plot\nx = Q40_count['pct']\ny = Q40_count.index\nquestion = \" On which platforms have you begun or completed data science courses?\"\nmc_question_plot(x, y, question)","3e6e6610":"# % participants within each experience level\ndef coding_exp_details(values, col_name,data=data, index='Q6'):\n    Qno_coding = pd.pivot_table(data=data, index='Q6', values=values, aggfunc='count')\n    Qno_coding.columns = col_name\n    Qno_coding['sum'] = coding_exp['Q6']\n    Qno_coding_pct = Qno_coding.div(Qno_coding['sum'], axis=0).iloc[:,:-1]\n    Qno_coding_pct = pd.DataFrame(Qno_coding_pct, index=['< 1 years','1-3 years','3-5 years','5-10 years', '10-20 years', '20+ years']).sort_index(axis=1) \n    return Qno_coding_pct","d02f9e3d":"# heatmap plot\ndef heatmap_plot(heatmap_data, title,comment1='', comment2=''):\n    fig = plt.figure(figsize=(12,6), facecolor=facecolor_fig)\n    ax=sns.heatmap(heatmap_data, cmap='Blues', cbar=False, annot=True,  linewidth = 0.5,fmt='.1%')\n    ax.tick_params(length=0, width=0, pad=10)\n    plt.ylabel('')\n    \n    # Add title and make it aligned to the left    \n    bbox_list = []\n    plt.gcf().canvas.draw()\n    ticklabels = [label for label in plt.gca().get_yticklabels()]   \n    for i, label in enumerate(ticklabels):\n        bbox_list.append(label.get_window_extent().x0)   # to get a list of coordiantes for the yticklabels\n    min_label = min(bbox_list)  # find the x-coodiante that lies at the most left\n    x,_ = plt.gca().transAxes.inverted().transform([min_label, 0])\n    plt.title(title, x=x, y=1.2, ha='left',\n                   size=20, fontfamily='serif', fontweight='bold', color = '#1a4f76')\n    plt.text(x=x, y=1.12, s=comment1, ha='left', va='bottom',\n              size=14, fontfamily='serif', color = '#1a4f76', alpha=0.8, transform=ax.transAxes)\n    plt.text(x=x, y=1.05, s=comment2, ha='left', va='bottom',\n              size=14, fontfamily='serif', color = '#1a4f76', alpha=0.8, transform=ax.transAxes)","675c7de9":"col_name = Q7_cols\nvalues = 'Q7'\nQ7_coding = coding_exp_details(data=data, index='Q6', col_name=col_name, values=values)\n\ntitle = 'Python is the most popular programming language'\ncomment1 = '* This trend is more significant for participants with less experience'\ncomment2 = '* Bash\/C\/C++\/Java\/Javascript seem to have lost interest to beginners, maybe due to difficulties in learning?'\n\nheatmap_plot(heatmap_data=Q7_coding,title=title,comment1=comment1, comment2=comment2)","965aa93a":"Q8_coding = data.loc[:,['Q6', 'Q8']]\nQ8_coding = pd.crosstab(index=Q8_coding.Q6, columns=Q8_coding.Q8, values=Q8_coding.Q8, aggfunc='count')\nQ8_coding_pct = Q8_coding.div(Q8_coding.sum(axis=1), axis=0)\nQ8_coding_pct = pd.DataFrame(Q8_coding_pct , index=Q6_index_order).iloc[1:, :]\n\ntitle = 'Python is strongly recommended by participants'\ncomment1 = '* In response to the question of which language is recommended to learn first, over 80% voted for Pyhton'\ncomment2 = '* It is also intersting to see that nearly 10% of experienced participants voted for R'\n\nheatmap_plot(heatmap_data=Q8_coding_pct,title=title,comment1=comment1, comment2=comment2)\nplt.xlabel('')\nplt.show()","455c9e87":"col_name = Q9_cols\nvalues = 'Q9'\nQ9_coding = coding_exp_details(data=data, index='Q6', col_name=col_name, values=values)\n\ntitle = 'Jupyter Notebook is the most popular IDE across all levels'\ncomment1 = '* Followed by VSCode and Pycharm'\ncomment2 = '* Experienced participants seems to be more flexible in IDE selection'\n\nheatmap_plot(heatmap_data=Q9_coding,title=title,comment1=comment1, comment2=comment2)\nplt.xlabel('')\nplt.show()","6ffbddef":"col_name = Q10_cols\nvalues = 'Q10'\nQ10_coding = coding_exp_details(data=data, index='Q6', col_name=col_name, values=values)\n\ntitle = 'Kaggle and Colab are the two mostly popular hosted notebook products'\ncomment1 = '* Kaggle and Colab significantly outperform others in terms of participants favour'\ncomment2 = '* More than 20% of participants have never used any hosted notebook products'\n\nheatmap_plot(heatmap_data=Q10_coding,title=title,comment1=comment1, comment2=comment2)","185ce4f0":"col_name = Q12_cols\nvalues = 'Q12'\nQ12_coding = coding_exp_details(data=data, index='Q6', col_name=col_name, values=values)\n\ntitle = 'Majority of participants do not use specialized hardware'\ncomment1 = \"* Base on participants' responses, NVIDIA GPUs have the most market share\"\n\nheatmap_plot(heatmap_data=Q12_coding,title=title,comment1=comment1, comment2=comment2)\n","af697410":"Q13_coding = data.loc[:,['Q6', 'Q13']]\nQ13_coding = pd.crosstab(index=Q13_coding.Q6, columns=Q13_coding.Q13, values=Q13_coding.Q13, aggfunc='count')\nQ13_coding_pct = Q13_coding.div(Q13_coding.sum(axis=1), axis=0)\nQ13_coding_pct = pd.DataFrame(Q13_coding_pct , index=Q6_index_order).iloc[1:, :]\n\ntitle = 'TPUs are not common to participants'\ncomment1 = \"* Even for the experienced participants, < 30% uses TPUs more than 5 times\"\n\nheatmap_plot(heatmap_data=Q13_coding_pct,title=title,comment1=comment1, comment2=comment2)","0410f072":"col_name = Q14_cols\nvalues = 'Q14'\nQ14_coding = coding_exp_details(data=data, index='Q6', col_name=col_name, values=values)\n\ntitle = 'No surprise, Matplotlib is the most popular visualization tool'\ncomment1 = '* Followed by Seaborn, Ggplot, and Plotly'\ncomment2 = ''\n\nheatmap_plot(heatmap_data=Q14_coding,title=title,comment1=comment1, comment2=comment2)","f7e4d807":"col_name = Q16_cols\nvalues = 'Q16'\nQ16_coding = coding_exp_details(data=data, index='Q6', col_name=col_name, values=values)\n\ntitle = 'Scikitlearn is the most popular ML framework'\ncomment1 = '* Participants with more years of coding experience also use Tensorflow, Keras, Pytorch and Xgboost'\ncomment2 = ''\n\nheatmap_plot(heatmap_data=Q16_coding,title=title,comment1=comment1, comment2=comment2)","6f5753f2":"col_name = Q17_cols\nvalues = 'Q17'\nQ17_coding = coding_exp_details(data=data, index='Q6', col_name=col_name, values=values)\n\ntitle = 'Decision Tree and Liner Regression are the most popular ML algorithms'\ncomment1 = '* Again experienced participants have used a wider range of ML algorithms'\ncomment2 = '* For example, more than 40% of the most experienced participants have used CNN, this ratio drops to 14% for beginners'\n\nheatmap_plot(heatmap_data=Q17_coding,title=title,comment1=comment1, comment2=comment2)","99e055c0":"col_name = Q40_cols\nvalues = 'Q40'\nQ40_coding = coding_exp_details(data=data, index='Q6', col_name=col_name, values=values)\n\ntitle = 'Even most experienced participants have taken online courses'\ncomment1 = '* It is interesting to see fewer people gain Data Science knowledge at university than from online courses'\ncomment2 = '* Thanks to the development of distant learning that provides opportunity for people to gain new skills'\n\nheatmap_plot(heatmap_data=Q17_coding,title=title,comment1=comment1, comment2=comment2)","4fc84537":"# % participants within each job title\ndef job_details(values, col_name,data=data, index='Q5'):\n    Qno_job = pd.pivot_table(data=data, index='Q5', values=values, aggfunc='count')\n    Qno_job.columns = col_name\n    Qno_job['sum'] = job['Q5']\n    Qno_job_pct = Qno_job.div(Qno_job['sum'], axis=0).iloc[:,:-1]\n    Qno_job_pct = pd.DataFrame(Qno_job_pct).sort_index(axis=1) \n    return Qno_job_pct","4afbe3b6":"# heatmap plot\ndef heatmap_plot(heatmap_data, title,comment1='', comment2=''):\n    fig = plt.figure(figsize=(12,6), facecolor=facecolor_fig)\n    ax=sns.heatmap(heatmap_data, cmap='Blues', cbar=False, annot=True,  linewidth = 0.5,fmt='.1%')\n    ax.tick_params(length=0, width=0, pad=10)\n    plt.ylabel('')\n    \n    # Add title and make it aligned to the left    \n    bbox_list = []\n    plt.gcf().canvas.draw()\n    ticklabels = [label for label in plt.gca().get_yticklabels()]   \n    for i, label in enumerate(ticklabels):\n        bbox_list.append(label.get_window_extent().x0)   # to get a list of coordiantes for the yticklabels\n    min_label = min(bbox_list)  # find the x-coodiante that lies at the most left\n    x,_ = plt.gca().transAxes.inverted().transform([min_label, 0])\n    plt.title(title, x=x, y=1.2, ha='left',\n                   size=20, fontfamily='serif', fontweight='bold', color = '#1a4f76')\n    plt.text(x=x, y=1.12, s=comment1, ha='left', va='bottom',\n              size=14, fontfamily='serif', color = '#1a4f76', alpha=0.8, transform=ax.transAxes)\n    plt.text(x=x, y=1.05, s=comment2, ha='left', va='bottom',\n              size=14, fontfamily='serif', color = '#1a4f76', alpha=0.8, transform=ax.transAxes)","e770b71d":"col_name = Q7_cols\nvalues = 'Q7'\nQ7_job = job_details(values, col_name,data=data, index='Q5')\n\ntitle = 'Over 90% of Data Scientists, ML Engineers and students use Python'\ncomment1 = '* R is more popular than Python among statisticians'\ncomment2 = '* SQL is very popular among Database Analaysts and Data Enginners'\nheatmap = heatmap_plot(heatmap_data = Q7_job, title=title, comment1=comment1, comment2=comment2)","e6b0e448":"col_name = Q9_cols\nvalues = 'Q9'\nQ9_job = job_details(values, col_name,data=data, index='Q5')\n\ntitle = 'Generally speaking, Jupyter Notebook is the most popular IDE'\ncomment1 = '* However, statisticians again have different favour'\ncomment2 = '* Software Engineers seem to be most flexible in IDE selctions'\nheatmap = heatmap_plot(heatmap_data = Q9_job, title=title, comment1=comment1, comment2=comment2)","e4de1a2f":"col_name = Q10_cols\nvalues = 'Q10'\nQ10_job = job_details(values, col_name,data=data, index='Q5')\n\ntitle = 'Hosted notebooks are more widely used by ML Engineers than other jobs'\ncomment1 = '* Nearly 40% of statician had never used a hosted notebook products'\ncomment2 = ''\nheatmap = heatmap_plot(heatmap_data = Q10_job, title=title, comment1=comment1, comment2=comment2)","1742725f":"col_name = Q12_cols\nvalues = 'Q12'\nQ12_job = job_details(values, col_name,data=data, index='Q5')\n\ntitle = 'The majority of jobs does not require specialized hardware'\ncomment1 = '* ...... with the exception of ML Engineers, 55% chose NVIDIA GPUs'\ncomment2 = ''\nheatmap = heatmap_plot(heatmap_data = Q12_job, title=title, comment1=comment1, comment2=comment2)","537e0682":"Q13_job = data.loc[:,['Q5', 'Q13']]\nQ13_job = pd.crosstab(index=Q13_job.Q5, columns=Q13_job.Q13, values=Q13_job.Q13, aggfunc='count')\nQ13_job_pct = Q13_job.div(Q13_job.sum(axis=1), axis=0)\nQ13_job_pct = pd.DataFrame(Q13_job_pct)\n\ntitle = 'Only a few jobs use TPUs on an occasional basis'\ncomment1 = '* ...... such as ML Engineers and Data Sientists, Database Engineers '\ncomment2 = ''\nheatmap = heatmap_plot(heatmap_data = Q13_job_pct, title=title, comment1=comment1, comment2=comment2)","e9810b12":"col_name = Q14_cols\nvalues = 'Q14'\nQ14_job = job_details(values, col_name,data=data, index='Q5')\n\ntitle = 'Data Scientists and Research Scientists make heavy use of Matplotlib\/Seaborn'\ncomment1 = '* In comparison, statisticians prefer Ggplot'\ncomment2 = '* Plotly is also quite popular for some jobs'\nheatmap = heatmap_plot(heatmap_data = Q14_job, title=title, comment1=comment1, comment2=comment2)","6e744fcf":"col_name = Q16_cols\nvalues = 'Q16'\nQ16_job = job_details(values, col_name,data=data, index='Q5')\n\ntitle = 'Scikitlearn is the most popular ML framework for all types of jobs'\ncomment1 = '* ML Engineers and Data Scientists also choose Keras and Tensorflow'\ncomment2 = ''\nheatmap = heatmap_plot(heatmap_data = Q16_job, title=title, comment1=comment1, comment2=comment2)","0103bcf1":"col_name = Q17_cols\nvalues = 'Q17'\nQ17_job = job_details(values, col_name,data=data, index='Q5')\n\ntitle = 'Some jobs need to learn more ML algorithms than others'\ncomment1 = '...... such as Data Scientists, ML Engineers and Data Engineers'\ncomment2 = ''\nheatmap = heatmap_plot(heatmap_data = Q17_job, title=title, comment1=comment1, comment2=comment2)","3e92ec02":"col_name = Q40_cols\nvalues = 'Q40'\nQ40_job = job_details(values, col_name,data=data, index='Q5')\n\ntitle = 'Participants acquired DS\/ML knowledge from online courses'\ncomment1 = '* Even for students, only 20% gains DS\/ML knowledge from university'\ncomment2 = '* More than 40% of Data Scientists, ML Engineers and Research Scientists have taken Coursera classes'\nheatmap = heatmap_plot(heatmap_data = Q40_job, title=title, comment1=comment1, comment2=comment2)","cb3abc97":"Q3_Q5 = data.loc[:,['Q3','Q5']]\nQ3_Q5 = pd.crosstab(index=data.Q3, columns=data.Q5, values=data.Q5, aggfunc='count', margins=True).sort_values(by='All', ascending=False).drop(index=['All', 'Other'])\nQ3_Q5_top20 = Q3_Q5.head(20).iloc[:,:-1]\nQ3_Q5_top20_pct = Q3_Q5_top20.div(Q3_Q5_top20.sum(axis=1), axis=0)\n\ntitle = \"Job titles for participants' country of residence (top 20)\"\ncomment1 = '* Over 40% of Chinese and Bangladesh participants are students'\ncomment2 = '* Over 20% of UK\/France\/Brazil participants are Data Scientists'\nheatmap = heatmap_plot(heatmap_data = Q3_Q5_top20_pct, title=title, comment1=comment1, comment2=comment2)","5e250014":"Q25_order = ['0-999', '1,000-1,999', '2,000-2,999', '3,000-3,999', '4,000-4,999', '5,000-7,499', '7,500-9,999', '10,000-14,999',\n         '15,000-19,999', '20,000-24,999', '25,000-29,999', '30,000-39,999', '40,000-49,999', '50,000-59,999', '60,000-69,999',\n         '70,000-79,999', '80,000-89,999', '90,000-99,999', '100,000-124,999', '125,000-149,999', '150,000-199,999', '200,000-249,999',\n         '250,000-299,999', '300,000-499,999', '500,000-999,999', '>1,000,000']\n\ndata['Q25'] = data['Q25'] .str.replace('$', '')\ndata_excl_student = data[data['Q5']!= 'Student']\n\nQ3_Q25 = data_excl_student.loc[:,['Q3', 'Q25']]\nQ3_Q25 = pd.crosstab(index=data_excl_student.Q3, columns=data_excl_student.Q25, values=data.Q25, aggfunc='count', margins=True).sort_values(by='All', ascending=False).drop(index=['All', 'Other'])\nQ3_Q25_top20 = Q3_Q25.head(20).iloc[:,:-1]\nQ3_Q25_top20_pct = Q3_Q25_top20.div(Q3_Q25_top20.sum(axis=1), axis=0)\nQ3_Q25_top20_pct = pd.DataFrame(Q3_Q25_top20_pct, columns=Q25_order)\n\nfig = plt.figure(figsize=(15,15), facecolor=facecolor_fig)\nsns.heatmap(Q3_Q25_top20_pct, cmap='Blues', cbar=False, annot=True,  linewidth = 0.5,fmt='.0%')\n\nplt.ylabel(\"top 20 participant's country of residence (data excl. student)\")\nplt.xlabel('')\n    \nplt.title('> 40% participants earn < $1000 in Nigeria\/Pakistan\/Eygpt\/Indonesia', x=0, y=1.0, ha='left',\n              size=20, fontfamily='serif', fontweight='bold', color = '#1a4f76')\nplt.show()","4e359141":"## <font color='#4a8bad'>4.4. Specialized hardware<\/font>\n<a id=\"hardware4\"><\/a>","2a6b4759":"# <font color='#4a8bad'>3.7. ML frameworks<\/font>\n<a id=\"MLframework3\"><\/a>","8be34a32":"## <font color='#4a8bad'>4.5. TPU<\/font>\n<a id=\"TPU4\"><\/a>","53057ca2":"## <font color='#4a8bad'>2.3. Notbook<\/font>\n<a id=\"notebook\"><\/a>","40a44491":"## <font color='#4a8bad'>2.2. IDE<\/font>\n<a id=\"IDE\"><\/a>","522e2c29":"## <font color='#4a8bad'>3.5. TPU<\/font>\n<a id=\"TPU3\"><\/a>","2bca03f2":"## <font color='#4a8bad'>4.9. DS\/ML courses<\/font>\n<a id=\"course4\"><\/a>","2df68f7e":"# <font color='#4a8bad'>4. Which tools are most useful to your job?<\/font>\n<a id=\"choice4\"><\/a>\n***","0498bfc6":"## <font color='#4a8bad'>3.2. IDE<\/font>\n<a id=\"IDE3\"><\/a>","0545378b":"## <font color='#4a8bad'>4.3. Notbook<\/font>\n<a id=\"notebook4\"><\/a>","e802c02a":"## <font color='#4a8bad'>2.8. ML algorithms<\/font>\n<a id=\"MLalgorithms\"><\/a>","c9ae3158":"# <font color='#4a8bad'>3.9. DS\/ML courses<\/font>\n<a id=\"course3\"><\/a>","4bc6ad41":"# <font color='#4a8bad'>Data preparation<\/font>","8278bcdb":"## <font color='#4a8bad'>4.7. ML frameworks<\/font>\n<a id=\"MLframework4\"><\/a>","b357f607":"## <font color='#4a8bad'>2.6. Visualization libraries<\/font>\n<a id=\"visualization\"><\/a>","c980a5b8":"## <font color='#4a8bad'>1.7. Experience in coding<\/font>\n<a id=\"experience\"><\/a>","c925ee6e":"## <font color='#4a8bad'>4.6. Visualization libraries<\/font>\n<a id=\"visualization4\"><\/a>","f63fddb0":"## <font color='#4a8bad'>1.1. Gender distribution<\/font>\n<a id=\"gender\"><\/a>","ba2d4161":"## <font color='#4a8bad'>3.6. Visualization libraries<\/font>\n<a id=\"visualization3\"><\/a>","b32408a0":"![image.png](attachment:8d3ae4a7-41c7-40ff-b44d-424394b3ac23.png)\n","c30a33d4":"##### The y_label is a bit long, trying different visualisation","1fbc6a75":"## <font color='#4a8bad'>1.4. Academic Qualifications<\/font>\n<a id=\"qualifications\"><\/a>","a387a5b3":"![image.png](attachment:d128dc75-8218-4740-bf8e-325c66722387.png)","de72f4e0":"## <font color='#4a8bad'>4.1. Programming languages<\/font>\n<a id=\"programming4\"><\/a>","5fe8add8":"## <font color='#4a8bad'>4.2. IDE<\/font>\n<a id=\"IDE4\"><\/a>","7d5f8886":"# <font color='#4a8bad'>1. Participants profile<\/font>\n<a id=\"profile\"><\/a>\n***","b3279bfc":"## <font color='#4a8bad'>1.3. Where do participants come from?<\/font>\n<a id=\"country\"><\/a>","fb9829a9":"## <font color='#4a8bad'>2.5. TPU<\/font>\n<a id=\"TPU\"><\/a>","07fd9665":"## <font color='#4a8bad'>2.7. ML frameworks<\/font>\n<a id=\"MLframework\"><\/a>","984df74e":"## <font color='#4a8bad'>2.4. Specialized hardware<\/font>\n<a id=\"hardware\"><\/a>","c4f66f1b":"# <font color='#4a8bad'>3. What do experienced participants say?<\/font>\n<a id=\"choice3\"><\/a>\n***","30a6e565":"## <font color='#4a8bad'>1.2. Age distribution by gender<\/font>\n<a id=\"age\"><\/a>","60d48946":"## <font color='#4a8bad'>3.4. Specialized hardware<\/font>\n<a id=\"hardware3\"><\/a>","be25a4d2":"## <font color='#4a8bad'>3.1. Programming languages<\/font>\n<a id=\"programming3\"><\/a>","c2eeae88":"## <font color='#4a8bad'>2.1. Programming languages<\/font>\n<a id=\"programming\"><\/a>","01ce0c19":"# <font color='#4a8bad'>2. The most popular choice<\/font>\n<a id=\"choice\"><\/a>\n***","0602b76e":"# <font color='#4a8bad'>3.3. Notbook<\/font>\n<a id=\"notebook3\"><\/a>","aff42716":"# <font color='#4a8bad'>3.8. ML algorithms<\/font>\n<a id=\"MLalgorithms3\"><\/a>","193ae869":"## <font color='#4a8bad'>1.5. Job Titles<\/font>\n<a id=\"job\"><\/a>","e9cdafb6":"## <font color='#4a8bad'>4.8. ML algorithms<\/font>\n<a id=\"MLalgorithms4\"><\/a>","00525cb0":"## <font color='#4a8bad'>1.8. Experience in ML<\/font>\n<a id=\"MLexperience\"><\/a>","e34f2888":"## <font color='#4a8bad'>2.9. DS\/ML courses<\/font>\n<a id=\"course\"><\/a>","692c7642":"## <font color='#4a8bad'>1.6. Working industry<\/font>\n<a id=\"industry\"><\/a>","e22b7ba3":"# <font color='#4a8bad'>Table of contents<\/font>\n***\n\n* [1. Participants profile](#profile)\n    * [1.1. Gender distribution](#gender)\n    * [1.2. Age distribution by gender](#age)\n    * [1.3. Where do participants come from?](#country)\n    * [1.4. Academic qualifications](#qualifications)\n    * [1.5. Job Titles](#job)\n    * [1.6. Working industry](#industry)\n    * [1.7. Experience in coding](#experience)\n    * [1.8. Experience in ML](#MLexperience)  \n    \n\n* [2. The most popular choice](#choice)\n    * [2.1. Programming languages](#programming)\n    * [2.2. IDE](#IDE)\n    * [2.3. Notbook](#notebook)\n    * [2.4. Specialized hardware](#hardware)\n    * [2.5. TPU](#TPU)\n    * [2.6. Visualization libraries](#visualization)\n    * [2.7. ML frameworks](#MLframework)\n    * [2.8. ML algorithms](#MLalgorithms)\n    * [2.9. DS\/ML courses](#course)    \n    \n \n* [3. What do experienced participants say?](#choice3)\n    * [3.1. Programming languages](#programming3)\n    * [3.2. IDE](#IDE3)\n    * [3.3. Notbook](#notebook3)\n    * [3.4. Specialized hardware](#hardware3)\n    * [3.5. TPU](#TPU3)\n    * [3.6. Visualization libraries](#visualization3)\n    * [3.7. ML frameworks](#MLframework3)\n    * [3.8. ML algorithms](#MLalgorithms3)\n    * [3.9. DS\/ML courses](#course3) \n    \n    \n * [4. Which tools are most useful to your job?](#choice4)\n    * [4.1. Programming languages](#programming4)\n    * [4.2. IDE](#IDE4)\n    * [4.3. Notbook](#notebook4)\n    * [4.4. Specialized hardware](#hardware4)\n    * [4.5. TPU](#TPU4)\n    * [4.6. Visualization libraries](#visualization4)\n    * [4.7. ML frameworks](#MLframework4)\n    * [4.8. ML algorithms](#MLalgorithms4)\n    * [4.9. DS\/ML courses](#course4) \n\n"}}