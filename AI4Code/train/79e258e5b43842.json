{"cell_type":{"28b24432":"code","ee14e7bd":"code","428e9bd9":"code","153a32e2":"code","fa83adc7":"code","6cb9465b":"code","fed8892d":"code","9530974f":"code","a257976e":"code","3d57065c":"code","b19d17bd":"code","d3480b4e":"code","99765fc1":"code","b7aea15c":"code","bf08b8e2":"code","b661f0be":"code","e68108d5":"code","ae012fd6":"code","169687ec":"code","37a27ff8":"code","4e1b84d6":"code","dc2c4afd":"code","4a7f5b1d":"code","1ddaae85":"code","e92f2bf0":"code","867acdf0":"code","83c35ef1":"code","034316f8":"code","d6dc27fd":"code","2fae0753":"markdown","b177bd60":"markdown","cba06ecd":"markdown","098aadff":"markdown","929ff203":"markdown","771db941":"markdown","f124a3f8":"markdown","056e663e":"markdown","4f34ec61":"markdown","5770c2f5":"markdown","f73ff5cd":"markdown","cbc0e231":"markdown","3eb32335":"markdown","8397cd22":"markdown"},"source":{"28b24432":"import os\nimport cv2 as cv\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\n%matplotlib inline\n\nimport torch\nimport torchvision\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torchvision.datasets import ImageFolder\nfrom torch.utils.data import DataLoader\nimport torchvision.transforms as T\n\nfrom tqdm.notebook import tqdm","ee14e7bd":"IMG_SIZE = (128,128)\nBATCH_SIZE = 32\n\nstats = ((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010))\n\ntrain_tfms = T.Compose([\n    T.Resize(IMG_SIZE),\n    T.ColorJitter(brightness=0.1, contrast=0.1, saturation=0.1, hue=0.1),\n    T.RandomHorizontalFlip(),\n    T.RandomRotation(15),\n    T.ToTensor(),\n    T.Normalize(*stats, inplace = True),\n])\n\nval_tfms = T.Compose([\n    T.Resize(IMG_SIZE),\n    T.ToTensor(),\n    T.Normalize(*stats, inplace = True)\n])","428e9bd9":"train_ds = ImageFolder(\"..\/input\/intel-image-classification\/seg_train\/seg_train\", train_tfms)\nval_ds = ImageFolder(\"..\/input\/intel-image-classification\/seg_test\/seg_test\", val_tfms)\ntest_ds = ImageFolder(\"..\/input\/intel-image-classification\/seg_pred\", val_tfms)","153a32e2":"classes = train_ds.classes\nlen_classes = len(classes)\nlen_classes","fa83adc7":"train_ds","6cb9465b":"train_dl = DataLoader(train_ds,BATCH_SIZE, shuffle = True, num_workers = 3, pin_memory = True)\nval_dl = DataLoader(val_ds,BATCH_SIZE, shuffle = False, num_workers = 3, pin_memory = True)\ntest_dl = DataLoader(test_ds,BATCH_SIZE, shuffle = False, num_workers = 3, pin_memory = True)","fed8892d":"sns.countplot(x = train_ds.targets)\nplt.title(\"Distribution of classes.\");","9530974f":"def denormalize(images, mean, std):\n    mean = torch.tensor(mean).reshape(1,3,1,1)\n    std = torch.tensor(std).reshape(1,3,1,1)\n    return images * std + mean\n\ndef plotImages(img, label):\n    plt.figure(figsize = [20,12])\n    for i in range(25):\n        plt.subplot(5,5,i+1)\n        img[i] = denormalize(img[i], *stats)\n        plt.imshow(img[i].permute(1,2,0))\n        plt.title(classes[label[i]])\n        plt.axis(\"off\")\n    plt.show()","a257976e":"images, labels = next(iter(train_dl))\n\nplotImages(images, labels)","3d57065c":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","b19d17bd":"device = get_default_device()\ndevice","d3480b4e":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\ntest_dl = DeviceDataLoader(test_dl, device)","99765fc1":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\nclass ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], last_lr: {:.5f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['lrs'][-1], result['train_loss'], result['val_loss'], result['val_acc']))\n","b7aea15c":"def conv_block(in_channels, out_channels, pool=False):\n    layers = [nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1), \n              nn.BatchNorm2d(out_channels), \n              nn.ReLU(inplace=True)]\n    if pool: layers.append(nn.MaxPool2d(2))\n    return nn.Sequential(*layers)\n\nclass SceneClassification(ImageClassificationBase):\n    def __init__(self, in_channels, num_classes):\n        super().__init__()\n        \n        self.conv1 = conv_block(in_channels, 32)\n        self.conv2 = conv_block(32, 64, pool=True)\n        self.res1 = nn.Sequential(conv_block(64,64), conv_block(64,64))\n        \n        self.conv3 = conv_block(64, 128, pool=True)\n        self.conv4 = conv_block(128, 256, pool=True)\n        self.res2 = nn.Sequential(conv_block(256,256), conv_block(256,256))\n        \n        self.conv5 = conv_block(256,512, pool = True)\n        self.conv6 = conv_block(512,512, pool = True)\n        self.res3 = nn.Sequential(conv_block(512, 512), conv_block(512, 512))\n        \n        \n        self.classifier = nn.Sequential(nn.MaxPool2d(4), \n                                        nn.Flatten(), \n                                        nn.Dropout(0.2),\n                                        nn.Linear(512, num_classes))\n        \n    def forward(self, xb):\n        out = self.conv1(xb)\n        out = self.conv2(out)\n        out = self.res1(out) + out\n        out = self.conv3(out)\n        out = self.conv4(out)\n        out = self.res2(out) + out\n        out = self.conv5(out)\n        out = self.conv6(out)\n        out = self.res3(out) + out\n        out = self.classifier(out)\n        return out","bf08b8e2":"model = to_device(SceneClassification(3, 6), device)\nmodel","b661f0be":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, \n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    \n    # Set up cutom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n                                                steps_per_epoch=len(train_loader))\n    \n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # Gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n            \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n        \n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","e68108d5":"# without training\nhistory = [evaluate(model, val_dl)]\nhistory","ae012fd6":"epochs = 15\nmax_lr = 0.01\ngrad_clip = 0.1\nweight_decay = 1e-4\nopt_func = torch.optim.Adam","169687ec":"import time\nstart = time.time()\n\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, \n                             grad_clip=grad_clip, \n                             weight_decay=weight_decay, \n                             opt_func=opt_func)\n\nend = time.time()\n\nprint(f\"Finished training in {(end-start):.2f} seconds.\")","37a27ff8":"def plot_accuracies(history):\n    accuracies = [x['val_acc'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');\n    \n\n\ndef plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');\n\n\ndef plot_lrs(history):\n    lrs = np.concatenate([x.get('lrs', []) for x in history])\n    plt.plot(lrs)\n    plt.xlabel('Batch no.')\n    plt.ylabel('Learning rate')\n    plt.title('Learning Rate vs. Batch no.');","4e1b84d6":"plt.figure(figsize=[25,7])\nplt.subplot(121)\nplot_accuracies(history)\n\nplt.subplot(122)\nplot_losses(history)","dc2c4afd":"plot_lrs(history)","4a7f5b1d":"torch.save(model.state_dict(), \"SceneRecognition.pth\")","1ddaae85":"def pred_image(img, model):\n    \n    img = to_device(img.unsqueeze(0), device)\n    img_pred = model(img)\n    \n    _, pred = torch.max(img_pred, dim = 1)\n    \n    return classes[pred[0].item()]\n\n\ndef denormalizeTest(images, means, stds):\n    means = torch.tensor(means).reshape(3, 1, 1)\n    stds = torch.tensor(stds).reshape(3, 1, 1)\n    return images * stds + means","e92f2bf0":"plt.figure(figsize=[20,16])\nfor i in range(36):\n    img, _ = test_ds[i]\n    pred = pred_image(img, model)\n    \n    plt.subplot(6,6,i+1)\n    img = denormalizeTest(img, *stats).permute(1,2,0)\n    plt.imshow(img)\n    plt.title(f\"Prdicted : {pred}\")\n    plt.axis(\"off\")\nplt.show()","867acdf0":"from sklearn.metrics import classification_report, confusion_matrix","83c35ef1":"pred = []\nactual = []\nfor i in range(len(val_ds)):\n    img,label = val_ds[i]\n    actual.append(classes[label])\n    pred.append(pred_image(img, model))\nprint(\"Finished!\")","034316f8":"print(classification_report(pred, actual))","d6dc27fd":"plt.figure(figsize = [12,6])\nsns.heatmap(confusion_matrix(pred, actual), fmt = \"d\", annot = True, cmap = \"Blues\");","2fae0753":"## **Tests**","b177bd60":"**PLOTS**","cba06ecd":"**Predictions**","098aadff":"**Save the model.**","929ff203":"**Train Process**","771db941":"## **GPU Set Up**","f124a3f8":"**Confusion Matrix**","056e663e":"**Classification Report**","4f34ec61":"## **EDA**","5770c2f5":"**Thanks**","f73ff5cd":"## **Training**","cbc0e231":"## **Libraries**","3eb32335":"## **MODEL**","8397cd22":"## **Data Augmentation and Loading**"}}