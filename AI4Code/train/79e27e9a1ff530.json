{"cell_type":{"0692e3df":"code","4780cf4a":"code","3ea4ceb5":"code","0debfd82":"code","0da3a926":"code","9a1682f3":"code","147928b5":"code","713985f0":"code","6d4b87d5":"code","ea53091f":"code","ef11d66b":"code","d4d4bdeb":"code","e8bd3c3a":"code","f4313f7d":"code","9cf53b45":"code","a17b1cd6":"code","2ae1df0b":"code","313e4e05":"code","b43ea53b":"code","2b6299d2":"code","23e42194":"code","289f4e8d":"code","53588247":"code","3504231f":"code","9bc25298":"code","bd3df192":"code","b1398a93":"code","18482f81":"code","b08afdc6":"code","c12963b9":"code","05ddcc21":"code","4ca9b9b9":"code","7a8d2d25":"code","bf974edc":"code","d2165493":"code","69bcbc45":"code","97120f97":"code","d2514ed2":"code","0f4e7f43":"code","a3674c1a":"code","843cd94b":"code","4271702f":"code","c47c07f5":"code","b6ef5a6f":"code","6806cae7":"code","a31a771d":"code","00e78da6":"code","9401f247":"code","a9af1c96":"markdown","76b0295f":"markdown","2463e0ba":"markdown","5c96b4f5":"markdown","c1b16320":"markdown","04d46640":"markdown","a47ea8c6":"markdown","3a9c44f7":"markdown","e9668101":"markdown","1cd00df5":"markdown","7b72e370":"markdown","fa42f5e1":"markdown","33e13067":"markdown","8f4de4d6":"markdown","c867c0c2":"markdown","d1d212ea":"markdown","9312d602":"markdown","67d59d95":"markdown"},"source":{"0692e3df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4780cf4a":"# \/kaggle\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv\n# \/kaggle\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv\n# \/kaggle\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv\n# \/kaggle\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv\nplant_1_generation_df = pd.read_csv(\"\/kaggle\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv\")\nplant_1_sensor_df = pd.read_csv(\"\/kaggle\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv\")\nplant_2_generation_df = pd.read_csv(\"\/kaggle\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv\")\nplant_2_sensor_df = pd.read_csv(\"\/kaggle\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv\")","3ea4ceb5":"def df_exploration(df, df_name):\n    print(f\"First five rows of {df_name}:\\n{df.head()}\\n\")\n    print(f\"Columns in {df_name}:\\n{df.columns}\\n\")\n    print(f\"The dataframe contains {df.shape[0]} rows and {df.shape[1]} columns.\\n\")\n    print(f\"Statistical summary of {df_name}:\\n{df.describe()}\\n\")\n    print(f\"Statistic summary of object data of {df_name}:\\n{df.describe(exclude='number')}\\n\")","0debfd82":"# Explore plant_1_generation dataset\ndf_exploration(plant_1_generation_df, \"plant_1_generation_df\")","0da3a926":"df_exploration(plant_1_sensor_df, \"plant_1_sensor_df\")","9a1682f3":"df_exploration(plant_2_generation_df, \"plant_2_generation_df\")","147928b5":"df_exploration(plant_2_sensor_df, \"plant_2_sensor_df\")","713985f0":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.pairplot(plant_1_generation_df)\nplt.show()","6d4b87d5":"sns.pairplot(plant_1_sensor_df)\nplt.show()","ea53091f":"sns.pairplot(plant_2_generation_df)\nplt.show()","ef11d66b":"sns.pairplot(plant_2_sensor_df)\nplt.show()","d4d4bdeb":"import datetime\n# Let's take a look at some of the non-numeric data compared to the numeric data now\n# Start by converting the date and time column to datetime format\nplant_1_generation_df[\"DATE_TIME\"] = pd.to_datetime(plant_1_generation_df[\"DATE_TIME\"])\nplant_1_sensor_df[\"DATE_TIME\"] = pd.to_datetime(plant_1_sensor_df[\"DATE_TIME\"])\nplant_2_generation_df[\"DATE_TIME\"] = pd.to_datetime(plant_2_generation_df[\"DATE_TIME\"])\nplant_2_sensor_df[\"DATE_TIME\"] = pd.to_datetime(plant_2_sensor_df[\"DATE_TIME\"])\n\n","e8bd3c3a":"# Check the dtype of the DATE_TIME column to make sure we reformatted correctly\nplant_1_generation_df['DATE_TIME'].dtype","f4313f7d":"# Check a few DATE_TIME rows\nplant_1_generation_df[[\"DATE_TIME\", \"DC_POWER\"]]","9cf53b45":"# Create 4 scatter plots comparing DATE_TIME to DC_POWER and IRRADIATION levels\n# We want to see how the data looks across time.\nfig, axes = plt.subplots(2, 2, figsize=(10, 6))\nsns.scatterplot(plant_1_generation_df[\"DATE_TIME\"], plant_1_generation_df[\"DC_POWER\"], ax=axes[0,0])\nsns.scatterplot(plant_1_sensor_df[\"DATE_TIME\"], plant_1_sensor_df[\"IRRADIATION\"], ax=axes[0,1])\nsns.scatterplot(plant_2_generation_df[\"DATE_TIME\"], plant_2_generation_df[\"DC_POWER\"], ax=axes[1,0])\nsns.scatterplot(plant_2_sensor_df[\"DATE_TIME\"], plant_2_sensor_df[\"IRRADIATION\"], ax=axes[1,1])\nplt.show()","a17b1cd6":"# Create month feature in all datesets from DATE_TIME.month\nplant_1_generation_df[\"month\"] = pd.DatetimeIndex(plant_1_generation_df[\"DATE_TIME\"]).month\nplant_1_sensor_df[\"month\"] = pd.DatetimeIndex(plant_1_sensor_df[\"DATE_TIME\"]).month\nplant_2_generation_df[\"month\"] = pd.DatetimeIndex(plant_2_generation_df[\"DATE_TIME\"]).month\nplant_2_sensor_df[\"month\"] = pd.DatetimeIndex(plant_2_sensor_df[\"DATE_TIME\"]).month","2ae1df0b":"# Create day feature in all datasets from DATE_TIME.day\nplant_1_generation_df[\"day\"] = pd.DatetimeIndex(plant_1_generation_df[\"DATE_TIME\"]).day\nplant_1_sensor_df[\"day\"] = pd.DatetimeIndex(plant_1_sensor_df[\"DATE_TIME\"]).day\nplant_2_generation_df[\"day\"] = pd.DatetimeIndex(plant_2_generation_df[\"DATE_TIME\"]).day\nplant_2_sensor_df[\"day\"] = pd.DatetimeIndex(plant_2_sensor_df[\"DATE_TIME\"]).day","313e4e05":"# Create hour feature in all datasets from DATE_TIME.hour\nplant_1_generation_df[\"hour\"] = pd.DatetimeIndex(plant_1_generation_df[\"DATE_TIME\"]).hour\nplant_1_sensor_df[\"hour\"] = pd.DatetimeIndex(plant_1_sensor_df[\"DATE_TIME\"]).hour\nplant_2_generation_df[\"hour\"] = pd.DatetimeIndex(plant_2_generation_df[\"DATE_TIME\"]).hour\nplant_2_sensor_df[\"hour\"] = pd.DatetimeIndex(plant_2_sensor_df[\"DATE_TIME\"]).hour","b43ea53b":"# Create minute feature in all datasets from DATE_TIME.minute\nplant_1_generation_df[\"minute\"] = pd.DatetimeIndex(plant_1_generation_df[\"DATE_TIME\"]).minute\nplant_1_sensor_df[\"minute\"] = pd.DatetimeIndex(plant_1_sensor_df[\"DATE_TIME\"]).minute\nplant_2_generation_df[\"minute\"] = pd.DatetimeIndex(plant_2_generation_df[\"DATE_TIME\"]).minute\nplant_2_sensor_df[\"minute\"] = pd.DatetimeIndex(plant_2_sensor_df[\"DATE_TIME\"]).minute","2b6299d2":"# Look at a single inverter id to ensure that our datetime feature engineering worked\nplant_1_generation_df[plant_1_generation_df[\"SOURCE_KEY\"]==\"1BY6WEcLGh8j5v7\"]","23e42194":"# Let's compare our datetimes to the rest of the features again\nfig, axes = plt.subplots(2, 2, figsize=(10, 6))\nsns.scatterplot(plant_1_generation_df[\"month\"], plant_1_generation_df[\"DC_POWER\"], ax=axes[0,0])\nsns.scatterplot(plant_1_sensor_df[\"month\"], plant_1_sensor_df[\"IRRADIATION\"], ax=axes[0,1])\nsns.scatterplot(plant_2_generation_df[\"month\"], plant_2_generation_df[\"DC_POWER\"], ax=axes[1,0])\nsns.scatterplot(plant_2_sensor_df[\"month\"], plant_2_sensor_df[\"IRRADIATION\"], ax=axes[1,1])\nplt.show()","289f4e8d":"sns.pairplot(plant_1_generation_df)\nplt.show()","53588247":"sns.pairplot(plant_1_sensor_df)\nplt.show()","3504231f":"sns.pairplot(plant_2_generation_df)\nplt.show()","9bc25298":"sns.pairplot(plant_2_sensor_df)\nplt.show()","bd3df192":"# First order of business, let's check out what the deal is with the month descrepancies across\n# all of the datasets\nprint(plant_1_generation_df[\"month\"].value_counts())\nprint(plant_1_sensor_df[\"month\"].value_counts())\nprint(plant_2_generation_df[\"month\"].value_counts())\nprint(plant_2_sensor_df[\"month\"].value_counts())","b1398a93":"# Let's create a dataframe that holds only those rows that were recorded at the 23 hour and 45 minute\n# mark - this is the last recording in a day, and thus where we will find our total daily_yield\n# for any given day.\nplant_1_last_daily_recording = plant_1_generation_df[(plant_1_generation_df[\"hour\"]==23) & (plant_1_generation_df[\"minute\"]==45)]\nplant_2_last_daily_recording = plant_2_generation_df[(plant_2_generation_df[\"hour\"]==23) & (plant_2_generation_df[\"minute\"]==45)]\n\n# Now we can find the mean of the two last_daily_recording dataframes\nplant_1_mean_daily_yield = plant_1_last_daily_recording[\"DAILY_YIELD\"].mean()\nplant_2_mean_daily_yield = plant_2_last_daily_recording[\"DAILY_YIELD\"].mean()\nprint(f\"Mean daily yield for plant site 1: {plant_1_mean_daily_yield}\")\nprint(f\"Mean daily yield for plant site 2: {plant_2_mean_daily_yield}\")","18482f81":"# What is the total irradiation per day?\n# Let's get a look at our dataframe for a refresher\nplant_1_sensor_df","b08afdc6":"plant_1_sensor_may = plant_1_sensor_df[plant_1_sensor_df[\"month\"]==5]\nplant_1_sensor_june = plant_1_sensor_df[plant_1_sensor_df[\"month\"]==6]\nplant_2_sensor_may = plant_2_sensor_df[plant_2_sensor_df[\"month\"]==5]\nplant_2_sensor_june = plant_2_sensor_df[plant_2_sensor_df[\"month\"]==6]","c12963b9":"# Now using the newly created dataframes we can come up with the total number of days\n# accounted for in the data for each plant\nplant_1_days_in_may = len(plant_1_sensor_may[\"day\"].value_counts()) # could also have used .unique\nplant_1_days_in_june = len(plant_1_sensor_june[\"day\"].value_counts()) # could also have used .unique\nplant_2_days_in_may = len(plant_2_sensor_may[\"day\"].value_counts()) # could also have used .unique\nplant_2_days_in_june = len(plant_2_sensor_june[\"day\"].value_counts()) # could also have used .unique\nplant_1_total_days = plant_1_days_in_may + plant_1_days_in_june\nplant_2_total_days = plant_2_days_in_may + plant_2_days_in_june\nprint(plant_1_total_days, plant_2_total_days)","05ddcc21":"# Now let's find the irradiation sum for each plant\nplant_1_irrad_sum = plant_1_sensor_df[\"IRRADIATION\"].sum()\nplant_2_irrad_sum = plant_2_sensor_df[\"IRRADIATION\"].sum()\nprint(plant_1_irrad_sum, plant_2_irrad_sum)","4ca9b9b9":"# Now to find the total irradiation per day we divide our irradiation sums by the number of days\n# accounted for in the two plant's datasets\nplant_1_rad_per_day = plant_1_irrad_sum \/ plant_1_total_days\nplant_2_rad_per_day = plant_2_irrad_sum \/ plant_2_total_days\nprint(f\"Plant 1 has a total irradiation per day of {plant_1_rad_per_day}\")\nprint(f\"Plant 2 has a total irradiation per day of {plant_2_rad_per_day}\")","7a8d2d25":"# What is the max ambient and module temperature\n# Let's start by visualizing the ambient and module temperature for \n# each plant site\nfig, axes = plt.subplots(2, 2, figsize=(15, 10))\n# Graph for plant 1 sensor ambient temperature data in may and june\nsns.lineplot(x=plant_1_sensor_may[\"day\"] ,y=plant_1_sensor_may[\"AMBIENT_TEMPERATURE\"], ax=axes[0, 0])\nsns.lineplot(x=plant_1_sensor_june[\"day\"] ,y=plant_1_sensor_june[\"AMBIENT_TEMPERATURE\"], ax=axes[0, 0])\naxes[0,0].set_title(\"Plant 1 Ambient Temperature\")\naxes[0,0].legend((\"may\", \"june\"), loc='upper right', shadow=True)\n\n# Graph for plant 1 sensor module temperature data in may and june\nsns.lineplot(x=plant_1_sensor_may[\"day\"], y=plant_1_sensor_may[\"MODULE_TEMPERATURE\"], ax=axes[0, 1])\nsns.lineplot(x=plant_1_sensor_june[\"day\"], y=plant_1_sensor_june[\"MODULE_TEMPERATURE\"], ax=axes[0, 1])\naxes[0,1].set_title(\"Plant 1 Module Temperature\")\naxes[0,1].legend((\"may\", \"june\"), loc='upper right', shadow=True)\n\n# Graph for plant 2 sensor ambient temperature data in may and june\nsns.lineplot(x=plant_2_sensor_may[\"day\"], y=plant_2_sensor_may[\"AMBIENT_TEMPERATURE\"], ax=axes[1, 0])\nsns.lineplot(x=plant_2_sensor_june[\"day\"], y=plant_2_sensor_june[\"AMBIENT_TEMPERATURE\"], ax=axes[1, 0])\naxes[1,0].set_title(\"Plant 2 Ambient Temperature\")\naxes[1,0].legend((\"may\", \"june\"), loc='upper right', shadow=True)\n\n# Graph for plant 1 sensor module temperature data in may and june\nsns.lineplot(x=plant_2_sensor_may[\"day\"], y=plant_2_sensor_may[\"MODULE_TEMPERATURE\"], ax=axes[1, 1])\nsns.lineplot(x=plant_2_sensor_june[\"day\"], y=plant_2_sensor_june[\"MODULE_TEMPERATURE\"], ax=axes[1, 1])\naxes[1,1].set_title(\"Plant 2 Module Temperature\")\naxes[1,1].legend((\"may\", \"june\"), loc='upper right', shadow=True)\n\nplt.show()","bf974edc":"# Let's quantify the max temperatures now\nplant_1_max_amb_temp = plant_1_sensor_df[\"AMBIENT_TEMPERATURE\"].max()\nplant_1_max_mod_temp = plant_1_sensor_df[\"MODULE_TEMPERATURE\"].max()\nplant_2_max_amb_temp = plant_2_sensor_df[\"AMBIENT_TEMPERATURE\"].max()\nplant_2_max_mod_temp = plant_2_sensor_df[\"MODULE_TEMPERATURE\"].max()\n\nprint(f\"For Plant site 1 the max ambient temperature recorded was {plant_1_max_amb_temp}\")\nprint(f\"For Plant site 1 the max module temperature recorded was {plant_1_max_mod_temp}\")\nprint(f\"For Plant site 2 the max ambient temperature recorded was {plant_2_max_amb_temp}\")\nprint(f\"For Plant site 2 the max module temperature recorded was {plant_2_max_mod_temp}\")","d2165493":"# How many inverters are there for each plant?\n# This should be a simple calculation. All we need to do is create a list\n# of unique values for the SOURCE_KEY in both sites' generation datasets\nplant_1_inverter_count = plant_1_generation_df[\"SOURCE_KEY\"].unique()\nplant_2_inverter_count = plant_2_generation_df[\"SOURCE_KEY\"].unique()\nprint(f\"Plant 1 site has a total of {len(plant_1_inverter_count)} inverters.\")\nprint(f\"Plant 2 site has a total of {len(plant_2_inverter_count)} inverters.\")","69bcbc45":"# What is the maximum\/minimum amount of DC\/AC Power generated in a time interval\/day?\n# To solve this problem we need to find the sum of the last daily recording of the DAILY_YIELD column \n# for each unique inverter per day. For this we can use the may and june dataframes we created earlier \n# as well as the inverter list we made to solve the problem just prior to this one\n","97120f97":"# Create empty graph for storing total daily yields by day\nplant_1_daily_total_yield_may = {}\nplant_1_daily_total_yield_june = {}\nplant_2_daily_total_yield_may = {}\nplant_2_daily_total_yield_june = {}\n\n# Populate key values with keys that will match up to the days in our dataframe\nfor i in range(1, 32):\n    plant_1_daily_total_yield_may[i] = 0  # Set the value of these keys to 0\n    plant_1_daily_total_yield_june[i] = 0\n    plant_2_daily_total_yield_may[i] = 0\n    plant_2_daily_total_yield_june[i] = 0\n    \n# iterate through each day in plant_1_daily_recording list\nfor day in plant_1_daily_total_yield_may.keys():\n    temp_df = plant_1_last_daily_recording[(plant_1_last_daily_recording[\"day\"]==day) & (plant_1_last_daily_recording[\"month\"]==5)]\n    plant_1_daily_total_yield_may[day] = temp_df[\"DAILY_YIELD\"].sum()\n    temp_df = plant_1_last_daily_recording[(plant_1_last_daily_recording[\"day\"]==day) & (plant_1_last_daily_recording[\"month\"]==6)]\n    plant_1_daily_total_yield_june[day] = temp_df[\"DAILY_YIELD\"].sum()\n    \n    temp_df = plant_2_last_daily_recording[(plant_2_last_daily_recording[\"day\"]==day) & (plant_2_last_daily_recording[\"month\"]==5)]\n    plant_2_daily_total_yield_may[day] = temp_df[\"DAILY_YIELD\"].sum()\n    temp_df = plant_2_last_daily_recording[(plant_2_last_daily_recording[\"day\"]==day) & (plant_2_last_daily_recording[\"month\"]==6)]\n    plant_2_daily_total_yield_june[day] = temp_df[\"DAILY_YIELD\"].sum()","d2514ed2":"# Now that we have the daily_yield for every day with a record we can find the maximum and minimum\nplant_1_may_daily_yield_max = 0\nplant_1_june_daily_yield_max = 0\nplant_2_may_daily_yield_max = 0\nplant_2_june_daily_yield_max = 0\n\nfor val in plant_1_daily_total_yield_may.values():\n    if val > plant_1_may_daily_yield_max:\n        plant_1_may_daily_yield_max = val\n\nfor val in plant_1_daily_total_yield_june.values():\n    if val > plant_1_june_daily_yield_max:\n        plant_1_june_daily_yield_max = val\n\nfor val in plant_2_daily_total_yield_may.values():\n    if val > plant_2_may_daily_yield_max:\n        plant_2_may_daily_yield_max = val\n        \nfor val in plant_2_daily_total_yield_june.values():\n    if val > plant_2_june_daily_yield_max:\n        plant_2_june_daily_yield_max = val\n        \nprint(f\"The max daily power yield for the month of May at plant site 1 was {plant_1_may_daily_yield_max}\")\nprint(f\"The max daily power yield for the month of June at plant site 1 was {plant_1_june_daily_yield_max}\")\nprint(f\"The max daily power yield for the month of May at plant site 2 was {plant_2_may_daily_yield_max}\")\nprint(f\"The max daily power yield for the month of June at plant site 2 was {plant_2_june_daily_yield_max}\")","0f4e7f43":"# Now find the absolute max for each plant site\nplant_1_abs_max = max([plant_1_may_daily_yield_max, plant_1_june_daily_yield_max])\nplant_2_abs_max = max([plant_2_may_daily_yield_max, plant_2_june_daily_yield_max])\n\nprint(f\"The absolute max daily yield at plant site 1 was {plant_1_abs_max}\")\nprint(f\"The absolute max daily yield at plant site 2 was {plant_2_abs_max}\")","a3674c1a":"# For funsies let's look at the daily yield numbers visually\nfig, axes = plt.subplots(2, 2, figsize=(15, 10))\n\naxes[0,0].plot(list(plant_1_daily_total_yield_may.keys()), list(plant_1_daily_total_yield_may.values()))\naxes[0,0].set_title(\"Plant 1 Daily Yield Totals for May\")\n\naxes[0,1].plot(list(plant_1_daily_total_yield_june.keys()), list(plant_1_daily_total_yield_june.values()))\naxes[0,1].set_title(\"Plant 1 Daily Yield Totals for June\")\n\naxes[1,0].plot(list(plant_2_daily_total_yield_may.keys()), list(plant_2_daily_total_yield_may.values()))\naxes[1,0].set_title(\"Plant 2 Daily Yield Totals for May\")\n\naxes[1,1].plot(list(plant_2_daily_total_yield_june.keys()), list(plant_2_daily_total_yield_june.values()))\naxes[1,1].set_title(\"Plant 2 Daily Yield Totals for June\")\n\nplt.show()","843cd94b":"# Which inverter (source_key) has produced maximum DC\/AC power?\n# To solve this problem we will need the last daily yield dataframes\n# we created earlier.\nplant_1_source_key_yields = {}\nplant_2_source_key_yields = {}\n\nfor inverter in plant_1_last_daily_recording[\"SOURCE_KEY\"].unique():\n    temp_df = plant_1_last_daily_recording[plant_1_last_daily_recording[\"SOURCE_KEY\"]==inverter]\n    plant_1_source_key_yields[inverter] = temp_df[\"DAILY_YIELD\"].sum()\n    \nfor inverter in plant_2_last_daily_recording[\"SOURCE_KEY\"].unique():\n    temp_df2 = plant_2_last_daily_recording[plant_2_last_daily_recording[\"SOURCE_KEY\"]==inverter]\n    plant_2_source_key_yields[inverter] = temp_df2[\"DAILY_YIELD\"].sum()\n    \nplant_1_source_key_yields","4271702f":"plant_1_max_yield = 0\nplant_1_max_yield_inverter = \"\"\n\nfor inverter_val in plant_1_source_key_yields.items():\n    if inverter_val[1] > plant_1_max_yield:\n        plant_1_max_yield = inverter_val[1]\n        plant_1_max_yield_inverter = inverter_val[0]\n\nplant_2_max_yield = 0\nplant_2_max_yield_inverter = \"\"\n\nfor inverter_val in plant_2_source_key_yields.items():\n    if inverter_val[1] > plant_2_max_yield:\n        plant_2_max_yield = inverter_val[1]\n        plant_2_max_yield_inverter = inverter_val[0]\n        \nprint(f\"The plant 1 site inverter {plant_1_max_yield_inverter} had the greatest max yield of {plant_1_max_yield}\")\nprint(f\"The plant 2 site inverter {plant_2_max_yield_inverter} had the greatest max yield of {plant_2_max_yield}\")","c47c07f5":"# Let's visualize that\n# For funsies let's look at the daily yield numbers visually\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\naxes[0].plot(list(plant_1_source_key_yields.keys()), list(plant_1_source_key_yields.values()))\naxes[0].set_title(\"Plant 1 Max Yield Totals for Individual Inverters\")\n\naxes[1].plot(list(plant_2_source_key_yields.keys()), list(plant_2_source_key_yields.values()))\naxes[1].set_title(\"Plant 2 Max Yield Totals for Individual Inverters\")\n\nplt.show()\n","b6ef5a6f":"# Rank the inverters based on the DC\/AC power they produce\n# Using the data prior to this we can determine a ranking system\n# for our inverters\nplant_1_source_key_yields_df = pd.DataFrame(plant_1_source_key_yields.items(), columns=[\"Inverter_ID\", \"Max_Power_Yield\"])\nplant_2_source_key_yields_df = pd.DataFrame(plant_2_source_key_yields.items(), columns=[\"Inverter_ID\", \"Max_Power_Yield\"])\n\n# The following is an ordered list of best inverter to worst inverter based on max power yield\nprint(\"PLANT 1\")\nprint(plant_1_source_key_yields_df.sort_values(\"Max_Power_Yield\", ascending=False).reset_index(drop=True))\nprint()\nprint(\"PLANT 2\")\nprint(plant_2_source_key_yields_df.sort_values(\"Max_Power_Yield\", ascending=False).reset_index(drop=True))","6806cae7":"# Are there any empty values?\n# This is an easy problem to answer\nprint(plant_1_generation_df.isnull().sum())\nprint(plant_1_sensor_df.isnull().sum())\nprint(plant_2_generation_df.isnull().sum())\nprint(plant_2_sensor_df.isnull().sum())","a31a771d":"# There are no obvious empty values in any of the dataframes.\n# However, from all of the observations and graphs made above we can see that for each site there appears to be a number of days\n# at the beginning of the month in May and at the end of the month in June that show no data collection, with the exception of a single\n# day in May at plant site 1 on May 6th - perhaps this was simply just a test to prepare for the actual data collection process that would begin\n# on May 16?","00e78da6":"# Let's look at the data from the months prior to May and the months after June at plant site 1.\nprint(plant_1_generation_df[plant_1_generation_df[\"month\"] < 5][\"day\"].value_counts())\nprint(plant_1_generation_df[plant_1_generation_df[\"month\"] > 6][\"day\"].value_counts())\nprint(plant_1_generation_df[(plant_1_generation_df[\"month\"] == 5)][\"day\"].value_counts())\nprint(plant_1_generation_df[(plant_1_generation_df[\"month\"] == 6)][\"day\"].value_counts())","9401f247":"# Some interesting observations there. Data was gathered on the 6th day of every month of the year at plant site 1, with the only months \n# in which data was obtained outside of that 6th day being the months May and June. This could be for testing purposes or year-long research on a chosen day of the month. \n# If we wanted to include year-long research we would need to remove all days except for the 6th day of each month, and even then we would only be able to \n# use data from the first plant site. Whenever we are comparing data between the two plant sites I think it will be important to remove the months preceeding May and\n# the months proceeding June.","a9af1c96":"All recordings appear to have occurred in the year 2020. Let's do some feature engineering to create columns for the month, day, and time. Since all instances are in 2020 we can ignore the year.","76b0295f":"Some new observations based on the new month, day, hour, and minute features:\n\n1. There appears to be missing data across all features bettween days 1 and around 12 or 13. Looking into this further will yield more accurate numbers. Possibly due to a hold on gathering observations?\n\n2. Daily yields appear to be slightly higher around the middle of the year. Likely due to a more sunny season?\n\n3. Total yield shows a slow positively increasing trend through each passing month, as we would intuitively expect.\n\n4. Most of the data appears to have been collected within months 5 and 6 (May and June). Why? Higher solar radiation periods for better data collection?\n\n5. The DC and AC Power increases quickly as the hour of day increases, up to a certain point, then begins to decline as the hour increases. This is likely due to the sun's movement throughout the day. More sun mid-day, no sun early-day and late-day.\n\n6. The Daily yield begins a gradual increase as the hour increases, then begins a significant increase up to a certain point (around the same point that DC and AC Power begins its decline) then flattens out as DC and AC power fall back to lower points. Again this can be explained by the sun's movement throughout the day. The daily yield will start low, then as the hours of the day brings more sunlight, thus more AC\/DC power, daily yield will begin to increase. This increase will will begin to slow down as it gets later in the day and the amount of sunlight decreases, thus decreasing DC and AC power levels. Eventually this increase becomes so minimal as to become obsolete and we see a flatline in the daily increase.\n\n7. Total yield shows a steady increase as we get later in the year as well as later in the day, again this intuitively makes sense. Total yield shoul be continuously inreasing as time passes and more power is gained.","2463e0ba":"3. Understand the domain context and explore underlying patterns in the data","5c96b4f5":"The columns included in both plant_sensor datasets include:\n\n'DATE_TIME': The data and time of the recorded obseravation, taken in intervals of 15 minutes.\n\n'PLANT_ID': ID of the plant being observed. Single unique value per dataset\n\n'SOURCE_KEY': ID of the sensor panel for that plant. Single unique value for each sensor dataset - there is only one sensor panel to a plant with multiple sensors per panel. \n\n'AMBIENT_TEMPERATURE': Ambient temperature at the plant at time of recording. Also known in laymen's terms as \"air temperature\". Important calculation for system design and thermal analysis.\n\n'MODULE_TEMPERATURE': The temperature reading for that recorded module or solar panel.\n\n'IRRADIATION': Amount of irradiation for that 15-minute interval. Irradience in solar energy is the unit area power (electromagnetic radiation) recieved from the sun (https:\/\/en.wikipedia.org\/wiki\/Solar_irradiance).","c1b16320":"# **Task the 1st: Descriptive Analytics**","04d46640":"2. Explore each dataset - columns, counts, basic stats","a47ea8c6":"For the time being we will simply keep note of these differences. They could be important later on, especially if we intend to build a prediction model.","3a9c44f7":"The columns included in both plant_generation datasets include:\n\n\u2022 'DATE_TIME': The date and time of the recorded observation, taken in intervals of 15 minutes.\n\n\u2022 'PLANT_ID': ID of the plant being observed. Single unique value per dataset.\n\n\u2022 'SOURCE_KEY': ID of the inverter observed. Each inverter has multiple solar panels assigned to it. The inverter acts as the \"computer\" of the solar panel process, inverting DC (direct current) energy into AC (alternating current).\n\n\u2022 'DC_POWER': Record of direct current power the inverter generated during the 15-minute period from previous observation. Metric used: kW\n\n\u2022 'AC_POWER': Record of alternating current power the inverter generated during the 15-minute period from previous observation. Metric used: kW\n\n\u2022 'DAILY_YIELD': The sum of power generated throughout the day up to that recorded time.\n\n\u2022 'TOTAL_YIELD': The sum of the total power generated in that inverter's lifetime up to that recorded time.\n","e9668101":"4. Explore the data","1cd00df5":"Some observations of the plant_1_sensor_df pairplot:\n    \n1. Increasing ambient temperature is strongly correlated with increasing module temperature and increasing irradiation levels.\n\n2. Increasing module temperature is very strongly correlated with increasing irradiation levels. This leads us to conclude that increasing energy recieved from the sun has the effect of increasing module temperature as well as the surrounding air (ambient) temperature. This intuitively makes sense because higher levels of energy from the sun cause increasing temperatures.","7b72e370":"1. Load Data From CSV","fa42f5e1":"New observations after creation of new date features:\n\n1. Only two months have recorded observations. Again months 5 and 6 (May and June).\n\n2. As we observed in plant site 1's sensor data, Ambient Temperature, Module Temperature, and Irradiation all increase as the hour of day increases, up to a point, then begins to decline \u2013 likely the amount of sunlight provided throughout the day.","33e13067":"Given Tasks to Consider:\n\n# **Descriptive Analytics -**\n\nTask Details\n\n1. Load the data from the CSV files\n2. Explore each dataset - columns, counts, basic stats\n3. Understand the domain context and explore underlying patterns in the data\n4. Explore the data and try to answer questions like -\n\n    \u2022 What is the mean value of daily yield?\n    \n    \u2022 What is the total irradiation per day?\n    \n    \u2022 What is the max ambient and module temperature?\n    \n    \u2022 How many inverters are there for each plant?\n    \n    \u2022 What is the maximum\/minimum amount of DC\/AC Power generated in a time interval\/day?\n    \n    \u2022 Which inverter (source_key) has produced maximum DC\/AC power?\n    \n    \u2022 Rank the inverters based on the DC\/AC power they produce\n    \n    \u2022 Is there any missing data?\n    \nYou might have to pre-process the data to allow for some of the analysis (hint: date and time)\n\n# **Visualization and Further Exploration -**\n\nTask Details\n\n1. Create a fresh notebook with visualizations that help understand the data and underlying patterns.\nStart with graphs that explain the patterns for attributes independent of other variables. These will usually be tracked as changes of attributes against DATETIME, DATE, or TIME. Examples - how is DC or AC Power changing as time goes by? how is irradiation changing as time goes by? how are ambient and module temperature changing as time goes by? how does yield change as time goes by? Explore plotting variables against different granularities of DATETIME and which is the best option for each variable.\n\n2. Plot two variables against each other to discover degree of correlation between them. Try out different variable pairs - ambient and module temperature, DC and AC Power, Irradiation and module\/ambient temperature, irradiation and DC\/AC Power. Can you find different ways of visualizing the above relationships?\n\nAs always, you will be evaluated how thorough is your work. There are extra marks for creativity on this one - the more interesting and varied your graphs the more points you get.\n\n# **Competition -**\n\nTask Details\n\nYou will be evaluated on the following criteria -\n\n1. Thoroughness of your data analysis\n2. Quality of data visualization\n3. Understanding of tech as well as domain\n4. Are you providing actionable insights?\n5. Softer aspects - flow of the storyline, confidence in your outcomes, ability to justify your analysis and answer questions\n\n# **Tell A Story -**\n\nTask Details\n\nThis is probably the most important skill for a Data Scientist - the ability to communicate the story. You have worked hard over the last two tasks for understand the data and discover patterns and relationships. It is time to put all that to good use.\n\nFind one story worth telling based on all your work. Create a notebook that walks the viewer through the entire story, one step at a time.\n\nA few tips -\n\n\u2022 Pick an interesting conclusion that you want to arrive at\n\n\u2022 Build a logical progression from loading and pre-processing data to showing minor observations along the way and eventually building up to the grand finale\n\n\u2022 Substantiate your argument with data along the way (you are a data scientist not just a story teller :))\n\n\u2022 Every good story has some key elements - characters, setting, plot, complication and solution, try to build as many of them as you can.\n\n\u2022 Deliver for the aha moment! Give the user an insight that can potentially impact the business. If the viewer doesn't get that then they won't appreciate your effort.\n\nEvaluation\n\nYou will be graded on -\n\n\u2022 how engaging is your story?\n\n\u2022 how well did you substantiate it with data?\n\n\u2022 how interesting was the conclusion\/key insight?\n\n\u2022 how good were your visualizations?","8f4de4d6":"Some observations from the pairplot of plant_1_generation:\n\n1. DC power shows a near perfect positive correlation with AC power. This makes sense as the inverter makes the AC power dependent on the amount of DC power - its job is to invert DC to AC. \n\n2. We can see that DC and AC power both contribute to instances of DAILY_YIELD as well as TOTAL_YIELD, which intuitively makes sense as both DAILY_YIELD and TOTAL_YIELD should be direct results of AC\/DC power.","c867c0c2":"From the plant_2_generation_df pairplot and the plant_2_sensor_df pairplot we see very similar results as we saw in the plant_1_ dataframe pairplots allowing us to assume that both plants are operating in a very similar manner. An interesting thing of note, though it appears to be minor in the visualizations, is the correlation between ambient temperature and module temperature. Each feature appears to increase at a fairly positive rate to each other up to a certain point, then we see the module temperature begin to decrease marginally as ambient temperature continues to increase. As I mentioned, this is just slight and could be nothing, but it could also be indicitive of a possible temperature regulation system in place that keeps the module from rising above a certain level, or perhaps the material used to create the modules (the solar panels). A final thought on this, taking into consideration how heat and energy work, this could possibly also be caused by the modules shifting that energy from the sun down stream to the inverter, and then to further energy storage or management systems. The ambient temperature itself is not in a controlled environment and thus will continue to gain heat as the amount of energy obtained from the sun increases. The module temperature shifts that energy away, in a sense regulating its moment-to-moment temperature.","d1d212ea":"New observations based on new date features:\n\n1. It appears that at this plant site recordings were only made for two months, 5 and 6 (May and june). \n\n2. We see very similar observations in terms of correlations that we saw in the generation dataset for plant 1, between features DC Power, AC Power, and the time of day. \n\n3. The correlation between daily yield and the hour of the day seems drastically different at first glance; however, we can see that it undergoes the same positive correlation that we saw at plant site 1. The major difference here is that at plant site 2 we appear to start the day off with high levels of daily yield power collection. One possible explanation of this is that it is excess yield carried over from the previous day.","9312d602":"Both plant sites appear to have very similar daily yield means.","67d59d95":"New observations based on new date features:\n\n1. We can immediately see a glaring difference between this dataset and the previous dataset. In the month column, instead of having 12 values, as the previous dataset had, this dataset has only two values (5 and 6) indicating that there appears to only be records of observations for those two months. Incidently they are the same two months that had the most significant instances of observations in the prevoius dataset.\n\n2. As we would expect, we can see a positive correlation between Ambient Temperature, Module Temperature, and Irradiation as the hour of day increases, up to a certain point, then we see a negative correlation where the aforementioned features begin a decline as the hour of day increases. This can be explained in the same way as our first observation: the sun's movement through the sky throughout the day.\n\n3. Perhaps an important note, perhaps not: the days we saw missing in the previous dataset, around days 2-13, do not appear to be missing here. "}}