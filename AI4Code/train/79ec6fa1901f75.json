{"cell_type":{"759b3acc":"code","7462eb69":"code","29bce045":"code","05bcaf01":"code","4788ed1e":"code","23701ef0":"code","1128c521":"code","bdd84293":"code","99c115ce":"code","421b4d84":"code","b03dec23":"code","04de9d34":"code","6cb52a45":"code","1d8f026a":"code","b173d1dd":"code","4bef26bd":"markdown","0d78c993":"markdown","009f90af":"markdown","31d99adb":"markdown","e26d6f17":"markdown","42ca5fb0":"markdown","cf055867":"markdown","49afbf61":"markdown","f0db16a9":"markdown","482ebd96":"markdown"},"source":{"759b3acc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7462eb69":"import numpy as np\nimport pandas as pd","29bce045":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test.PassengerId","05bcaf01":"train.head()","4788ed1e":"def drop_columns(dataset):\n    dataset.drop([\"PassengerId\", \"Name\", \"Ticket\", \"Fare\", \"Cabin\"], axis = 1, inplace=True)\n    \ndrop_columns(train)\ndrop_columns(test)","23701ef0":"X = train.drop('Survived', axis=1)\ny = train['Survived']","1128c521":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nX[\"Sex\"] = le.fit_transform(X.Sex)","bdd84293":"X[\"Embarked\"].value_counts()\nX[\"Embarked\"].fillna(\"S\", inplace = True)\nX[\"Embarked\"] = le.fit_transform(X.Embarked)","99c115ce":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)","421b4d84":"from catboost import CatBoostClassifier\n\nclassifier = CatBoostClassifier()\nclassifier.fit(X_train, y_train)","b03dec23":"from sklearn.metrics import confusion_matrix, accuracy_score\n\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\n\naccuracy_score(y_test, y_pred)","04de9d34":"test.head()","6cb52a45":"test[\"Sex\"] = le.fit_transform(test.Sex)\n\nprint(test[\"Embarked\"].value_counts())\ntest[\"Embarked\"].fillna(\"S\", inplace = True)\ntest[\"Embarked\"] = le.fit_transform(test.Embarked)","1d8f026a":"prediction = classifier.predict(test)\nprediction","b173d1dd":"output = pd.DataFrame({'PassengerId': test_PassengerId, 'Survived': prediction})\noutput.to_csv('submission.csv', index=False)","4bef26bd":"## Viewing Test Data","0d78c993":"## Importing Basic Libraries","009f90af":"## Seperating Dependent Variable from Training Data","31d99adb":"## Viewing Dataset","e26d6f17":"## Encoding Data for Test Data","42ca5fb0":"## Encoding Categorical Columns in Training Data","cf055867":"## Using CatBoost Classifier for Classification","49afbf61":"## Importing Dataset","f0db16a9":"## Droping Columns","482ebd96":"## Splitting X and y into training and testing data"}}