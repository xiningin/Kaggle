{"cell_type":{"3c9d245c":"code","e472cb40":"code","1e433356":"code","f56da86d":"code","671143a6":"code","17f1f8fa":"code","0a1ef2ab":"code","0b99a190":"code","d09b65dd":"code","af39e2a8":"code","d7e75784":"code","e4b7c37f":"code","0413f0e0":"code","6e84ccbd":"code","9eddf9a3":"code","f15f0716":"code","af1fa019":"code","5339e2f9":"code","cfb86f2a":"code","828e043e":"code","8ca90056":"code","77914dc1":"code","12658efa":"code","f8b93518":"code","0c52c148":"code","7141592a":"code","0d4f50bb":"code","beb9ce90":"code","1ce2a51c":"code","ce120673":"code","5403fc44":"code","4b8890ca":"code","2ac37a97":"code","b414a853":"code","3eddb3ba":"code","2a9846fc":"code","69dc7f1a":"code","4edab283":"code","cc519027":"code","9ba66c79":"code","dbb7d648":"code","974109f6":"code","a02b4a35":"code","f2767069":"code","9c434a06":"code","71ab1e91":"code","7d5c9a7a":"code","cf6400f9":"code","9245b31f":"code","3d28e6bb":"code","2781da32":"markdown","4ad815bc":"markdown","d0024c6e":"markdown","b781d230":"markdown","eca40c5a":"markdown"},"source":{"3c9d245c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","e472cb40":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')","1e433356":"df_train.describe()","f56da86d":"df_train.columns","671143a6":"df_train.dtypes","17f1f8fa":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","0a1ef2ab":"#lets plot the distribution of Sales price\nsns.distplot(df_train['SalePrice'])","0b99a190":"print('Skewness: ', df_train['SalePrice'].skew())\nprint('Kurtosis: ', df_train['SalePrice'].kurt())","d09b65dd":"df_train['Age'] = 2019-df_train['YearBuilt']\ndf_train['Remod_Age'] = 2019-df_train['YearRemodAdd']\ndf_train['Age'].describe()\n\n#do the same for the testing set\ndf_test['Age'] = 2019-df_test['YearBuilt']\ndf_test['Remod_Age'] = 2019-df_test['YearRemodAdd']","af39e2a8":"df_train['Age'].head()","d7e75784":"#lets plot the Age VS SalePrice Graph, Since now they have linear relationship lets plot a scatter plot\nvar = 'Age'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis = 1)\ndata.plot.scatter(x = var, y = 'SalePrice', ylim = (0,800000))","e4b7c37f":"var = 'Remod_Age'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis = 1)\ndata.plot.scatter(x = var, y = 'SalePrice', ylim = (0,800000))","0413f0e0":"#drop the YearBuilt and YearRemodAdd columns from training and testing sets\ndf_train.drop(['YearBuilt','YearRemodAdd'], axis = 1)","6e84ccbd":"df_test.drop(['YearBuilt','YearRemodAdd'], axis = 1)","9eddf9a3":"#correlation matrix\ncorrmat = df_train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","f15f0716":"var = 'OverallQual'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(10, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","af1fa019":"var = 'GarageCars'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(10, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","5339e2f9":"var = 'FullBath'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(10, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","cfb86f2a":"var = 'TotRmsAbvGrd'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(10, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","828e043e":"var = 'Fireplaces'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(10, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","8ca90056":"var = 'KitchenAbvGr'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(10, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","77914dc1":"#lets calculate the Garage_Age\ndf_train['Garage_Age'] = 2019 - df_train['GarageYrBlt']\ndf_test['Garage_Age'] = 2019 - df_test['GarageYrBlt']\ndf_train['Garage_Age'].dtype","12658efa":"var = 'Garage_Age'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis = 1)\ndata.plot.scatter(x = var, y = 'SalePrice', ylim = (0,800000))","f8b93518":"var = 'MasVnrArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis = 1)\ndata.plot.scatter(x = var, y = 'SalePrice', ylim = (0,800000))","0c52c148":"var = 'TotalBsmtSF'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis = 1)\ndata.plot.scatter(x = var, y = 'SalePrice', ylim = (0,800000))","7141592a":"var = '1stFlrSF'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis = 1)\ndata.plot.scatter(x = var, y = 'SalePrice', ylim = (0,800000))","0d4f50bb":"var = 'GrLivArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis = 1)\ndata.plot.scatter(x = var, y = 'SalePrice', ylim = (0,800000))","beb9ce90":"var = 'GarageArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis = 1)\ndata.plot.scatter(x = var, y = 'SalePrice', ylim = (0,800000))","1ce2a51c":"var = 'EnclosedPorch'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis = 1)\ndata.plot.scatter(x = var, y = 'SalePrice', ylim = (0,800000))","ce120673":"df_train = df_train[['GarageArea', 'GarageCars', 'Fireplaces', 'TotRmsAbvGrd', 'FullBath', 'GrLivArea', '1stFlrSF', 'TotalBsmtSF', 'MasVnrArea', 'OverallQual','Age','Remod_Age', 'KitchenAbvGr', 'EnclosedPorch','Garage_Age','SalePrice']].copy()","5403fc44":"df_test = df_test[['GarageArea', 'GarageCars', 'Fireplaces', 'TotRmsAbvGrd', 'FullBath', 'GrLivArea', '1stFlrSF', 'TotalBsmtSF', 'MasVnrArea', 'OverallQual','Age','Remod_Age', 'KitchenAbvGr', 'EnclosedPorch','Garage_Age']].copy()","4b8890ca":"#lets check if there exist any missing value in out dataset\ndf_train.isna().any()","2ac37a97":"#Impute missing values in MasVnrArea using the mean of that variable\ndf_train['MasVnrArea'].fillna((df_train['MasVnrArea'].mean()), inplace = True)","b414a853":"#Impute missing values in Garage_Age using the mode of that variable\ndf_train['Garage_Age'].fillna((df_train['Garage_Age'].mode()[0]), inplace = True)","3eddb3ba":"df_train.isna().any()","2a9846fc":"#do the same for the testing data set\ndf_test.isna().any()","69dc7f1a":"df_test['GarageArea'].fillna((df_test['GarageArea'].mean()), inplace = True)\ndf_test['GarageCars'].fillna((df_test['GarageCars'].mode()[0]), inplace = True)\ndf_test['TotalBsmtSF'].fillna((df_test['TotalBsmtSF'].mean()), inplace = True)\ndf_test['MasVnrArea'].fillna((df_test['MasVnrArea'].mean()), inplace = True)\ndf_test['Garage_Age'].fillna((df_test['Garage_Age'].mode()[0]), inplace = True)","4edab283":"#Check whether successfully imputed or not\ndf_test.isna().any()","cc519027":"X = df_train.drop(['SalePrice'], axis = 1)\ny = df_train['SalePrice']","9ba66c79":"X = pd.get_dummies(X)\ndf_test = pd.get_dummies(df_test)","dbb7d648":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\nX_train, X_eval, y_train, y_eval = train_test_split(X,y,test_size = 0.2)","974109f6":"model = LinearRegression()\nmodel.fit(X_train,y_train)","a02b4a35":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\npred_eval = model.predict(X_eval)\nrmse = sqrt(mean_squared_error(y_eval,pred_eval))\n\nprint('RMSE: ', rmse)","f2767069":"def find_outliers_keys(x):\n    q1 = np.percentile(x, 25)\n    q3 = np.percentile(x, 75)\n    iqr = q3-q1   \n    floor = q1 - 1.5*iqr\n    ceiling = q3 + 1.5*iqr\n    outlier_indices = list(x.index[(x < floor)|(x > ceiling)])\n    outlier_values = list(x[outlier_indices])\n\n    return outlier_indices\nout = find_outliers_keys(df_train['TotalBsmtSF'])","9c434a06":"df_train = df_train.drop(out)","71ab1e91":"var = 'TotalBsmtSF'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis = 1)\ndata.plot.scatter(x = var, y = 'SalePrice', ylim = (0,800000))","7d5c9a7a":"#lets rebuild the model\nX = df_train.drop(['SalePrice'], axis = 1)\ny = df_train['SalePrice']\nX = pd.get_dummies(X)\nX_train, X_eval, y_train, y_eval = train_test_split(X,y,test_size = 0.2)\n\nmodel2 = LinearRegression()\nmodel2.fit(X_train,y_train)\n\npred_eval = model2.predict(X_eval)\nrmse = sqrt(mean_squared_error(y_eval,pred_eval))\n\nprint('RMSE: ', rmse)","cf6400f9":"from sklearn.ensemble import GradientBoostingRegressor\ngb_reg = GradientBoostingRegressor(n_estimators=2000, learning_rate=0.02,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=30, min_samples_split=30, \n                                   loss='huber')\ngb_reg.fit(X_train, y_train)\npred_eval = gb_reg.predict(X_eval)\nrmse = sqrt(mean_squared_error(y_eval,pred_eval))\n\nprint('RMSE: ', rmse)","9245b31f":"from sklearn.ensemble import RandomForestRegressor\n\nforest_reg = RandomForestRegressor(n_estimators=1000,max_features=14)\nforest_reg.fit(X_train,y_train);\npred_eval = forest_reg.predict(X_eval)\nrmse = sqrt(mean_squared_error(y_eval,pred_eval))\n\nprint('RMSE: ', rmse)","3d28e6bb":"import xgboost as xgb\n\nmodel_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)\nmodel_xgb.fit(X_train,y_train)\npred_eval = model_xgb.predict(X_eval)\nrmse = sqrt(mean_squared_error(y_eval,pred_eval))\n\nprint('RMSE: ', rmse)","2781da32":"Minimum value of Salesprice is greater than zero","4ad815bc":"It seems the RMSE is too high lets try handling the Outliers","d0024c6e":"Year built itself won't give much useful information. So lets create a new column which gives the age of each house.","b781d230":"This plot clearly tells \n\nThat Sale Price is highly Correlated with GarageArea, GarageCars, GarageYrBlt, Fireplaces, TotRmsAbvGrd, FullBath, GrLivArea, 1stFlrSF, TotalBsmtSF, MasVnrArea, OverallQual\n\nAlso Inversly correlated with Age,Remod_Age, KitchenAbvGr, EnclosedPorch\n\nLet's plot and see each of these variables with SalePrice\n","eca40c5a":"Cool we are doing good so far. Let's tweak it little more."}}