{"cell_type":{"dc177993":"code","592fd5ce":"code","58a03378":"code","a8ed4401":"code","ea9c2fbc":"code","7a3d11ca":"code","e7c27a80":"code","99c2e5df":"code","9c0052a8":"code","ce6b12c2":"code","c349908d":"code","b1b34764":"code","733cc1e8":"code","4d5fdc7b":"code","222ce182":"code","42eebe93":"markdown"},"source":{"dc177993":"# Important libraries\nimport os # Read files in environment\nimport numpy as np # Linear algebra\nimport pandas as pd # Data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sb # Plotting\nimport matplotlib.pyplot as plt # Plotting\nimport sklearn # ML \nfrom sklearn import preprocessing # Scaling and centering\nfrom sklearn.model_selection import train_test_split # Splitting dataset\nfrom sklearn.decomposition import PCA # PCA\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis # LDA","592fd5ce":"# Obtaining files\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","58a03378":"# Making dataframes\ntrain = pd.read_csv(\"..\/input\/hdfc-hiring-september-2019\/Train.csv\")\ntest = pd.read_csv(\"..\/input\/hdfc-hiring-september-2019\/Test.csv\")\n\n# Saving ID column\nMyColumn = test[\"Col1\"]","a8ed4401":"# Avoiding scientific notation\npd.set_option(\"display.float_format\", lambda x: \"%.3f\"%x)","ea9c2fbc":"# Checking data\ntrain.head(10)","7a3d11ca":"# Eliminating some columns with missing values\ntrain = train.loc[:, train.isnull().sum() < 0.1*train.shape[0]]\ncol = list(train.columns[2:])\ncol = [\"Col1\"] + col\ntest = test[col]\ntest.insert(loc = 1, column = \"Col2\", value = [\"\" for i in range(test.shape[0])])","e7c27a80":"# Filling in columns with missing values\ndef Fill(data):\n    for column in data.columns[2:]:\n        med = np.nanmedian(data[column].values)\n        data[column].fillna(med, inplace = True) \n    return data\n\ntrain = Fill(train)\ntest = Fill(test)","99c2e5df":"# Scaling and centering\n# Mean = 0\n# Pop. std. dev. = 1\n# Sum of sq. = No. of rows\ndef ScaleCenter(data):\n    data.iloc[:, 2:] = preprocessing.scale(data.iloc[:, 2:])\n    return data    \n\ntrain = ScaleCenter(train)\ntest = ScaleCenter(test)","9c0052a8":"# Finding optimal number of principal components\nX = train.iloc[:, 2:]\npca = PCA() \npca.fit(X) \nvar = pca.explained_variance_ratio_\nCumSum = np.cumsum(var) \nnum_pc = np.argmax(CumSum >= 0.99) + 1\n# Finding principal components on train data\npca = PCA(n_components = num_pc)\nPC_train = pca.fit_transform(X)\n# Using the same coefficients for test data\nPC_test = pca.transform(test.iloc[:, 2:]) \n\n# Make new DataFrame with apropriate column names\ncolumns = []\nfor i in range(num_pc):\n    columns.append(\"PC\" + str(i+1))\n    \ndef PCDF(data, PC, columns):\n    df = pd.DataFrame(data = PC, columns = columns)\n    pcdf = pd.concat([data[[\"Col2\"]], df], axis = 1)\n    return pcdf\n\ntrain = PCDF(train, PC_train, columns)\ntest = PCDF(test, PC_test, columns)","ce6b12c2":"# Scree plot\nvar = var*100\nvar_data = var[0:num_pc]\nplt.bar(x = range(num_pc), height = var_data)\nplt.xticks(rotation = \"vertical\")\nplt.ylim(0, var_data[0]+1)\nplt.show()","c349908d":"# Checking for class balance\nclass_data = train.Col2.value_counts()\nclass_data.plot(kind = \"bar\", color = [\"red\", \"blue\"])\nprint(class_data)","b1b34764":"# Splitting train data\ntrain_data, test_data, train_labels, test_labels = train_test_split(train[train.columns[1:]], train[\"Col2\"], test_size = 0.25)","733cc1e8":"# Modeling\nclassifier = LinearDiscriminantAnalysis()\nclassifier.fit(train_data, train_labels)\nprediction = classifier.predict(test_data)\nconfusion_matrix = sklearn.metrics.confusion_matrix(test_labels, prediction)\naccuracy = sklearn.metrics.accuracy_score(test_labels, prediction)\nf1 = sklearn.metrics.f1_score(test_labels, prediction)","4d5fdc7b":"# Using model for prediction\nclassifier.fit(train.iloc[:, 1:], train[\"Col2\"])\nprediction = classifier.predict(test.iloc[:, 1:])","222ce182":"# Saving predictions\ndata = pd.DataFrame({ \n    \"Col1\" : list(MyColumn.values),\n    \"Col2\" : list(prediction)\n})\ndata.to_csv(\"submit.csv\", index = False) ","42eebe93":"# Beginner's approach to PCA followed by Linear Discriminant Analysis"}}