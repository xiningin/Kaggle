{"cell_type":{"284d48a3":"code","a93f178e":"code","56290ed1":"code","94f25738":"code","3107b108":"code","9ecadfa9":"code","191baf7b":"code","19804cd1":"code","ea28451f":"code","28080e47":"code","9c1665a9":"code","a358d5cc":"code","22f9bc4d":"code","e112efb7":"code","dd7e238f":"code","14e0426d":"code","dea5c3c3":"code","6e9c674d":"code","2c936d17":"code","0a675cb7":"code","fb51d6cd":"code","f0a17973":"code","15584065":"code","51d9a263":"code","1aecccc6":"code","28e64ab7":"code","7f2caafd":"code","33d5bdf2":"code","b8459ae3":"code","4a6eb8b1":"code","16a12822":"code","7de6f4f4":"code","667fd3d5":"code","d97a1a98":"code","8c3827d6":"code","6c1066d6":"code","5eb69f77":"code","44ecf219":"code","ad005d17":"code","b139f5dc":"code","834d3648":"code","f1dfb83c":"code","8bf6f80e":"code","1ac5d479":"code","7191d24a":"code","02143ce0":"code","299c5b46":"code","f82c236d":"code","a4f87b12":"code","c23ef161":"code","b28562fa":"code","d156e3ae":"code","f090f3ab":"markdown","3f19087a":"markdown","7daf2693":"markdown","ab20a026":"markdown","2da8b79f":"markdown","09eea9bf":"markdown","eb49a8d3":"markdown","b86c773f":"markdown","0c3ec029":"markdown","f0516315":"markdown","5deef890":"markdown","c14a23de":"markdown","319b819c":"markdown","c85478e3":"markdown","da3c6786":"markdown","791c5e56":"markdown","67dd5e1d":"markdown","c2acfaec":"markdown","4a975891":"markdown","a27f557a":"markdown","e32fcd74":"markdown"},"source":{"284d48a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a93f178e":"names = ['TenneTTSO','50Hertz','TransnetBW','Amprion']\ninfileloc = '\/kaggle\/input\/wind-power-generation\/'\nwind_data_df = []\n\nfor filename in names:\n    infile = infileloc + filename + '.csv'\n    DF = pd.read_csv(infile, infer_datetime_format=True)\n#     print(infile)\n    wind_data_df.append(DF)\n\nwind_data_df[0]","56290ed1":"#Create a function to go through each df in wind data and return a time series dataframe in long format since they are currently in wide format\n\ndef return_ts_df(df, TSOname):\n    varname = TSOname\n    df = pd.melt(df, id_vars = 'Date', var_name = 'Time', value_name = varname)\n    df['Dates'] = df['Date'].astype(str) +' '+df['Time'].astype(str)\n    df['Dates'] = pd.to_datetime(df['Dates'], format = '%d\/%m\/%Y %H:%M:%S')\n    df.drop(columns=['Date','Time'], inplace=True)\n    cols = ['Dates',varname]\n    df = df[cols]\n    df = df.set_index('Dates')\n    df = df.sort_index()\n    df.reset_index(drop=False, inplace=True)\n    return df\n\nten_df = return_ts_df(wind_data_df[0],'TennetTSO')\nfiftyHz_df = return_ts_df(wind_data_df[1],'50Hertz')\ntransnet_df = return_ts_df(wind_data_df[2],'TransnetBW')\namprion_df = return_ts_df(wind_data_df[3],'Amprion')\n","94f25738":"ten_df[:10]","3107b108":"# print(ten_df.info())\n\n#Get some statistics\n\nprint(ten_df.describe())\nprint(fiftyHz_df.describe())\nprint(transnet_df.describe())\nprint(amprion_df.describe())","9ecadfa9":"from functools import reduce\n\n#combine dataframes\n\ndataframes = [ten_df,fiftyHz_df,transnet_df,amprion_df]\nwind_data_all = reduce(lambda x,y: pd.merge(x,y, on='Dates', how='outer'),dataframes)\n    \nwind_data_all","191baf7b":"wind_data_all.info()","19804cd1":"#Monthly wind data\nwind_data_all_M = wind_data_all.resample('M', on='Dates').mean()\nwind_data_all_M\n","ea28451f":"%matplotlib inline\n\nplt.style.use('seaborn-whitegrid')\nplt.figure(figsize=(15,12))\nsns.relplot(data=wind_data_all_M, kind = \"line\")\n\nplt.title(\"Total Monthly Wind Generation in Terra Watt Hour\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"TWH\")\nplt.show()","28080e47":"#Daily wind data\nwind_data_all_D = wind_data_all.resample('D', on='Dates').mean()\nwind_data_all_D","9c1665a9":"wind_data_all_D.reset_index(inplace=True)\nwind_data_all_D['month'] = wind_data_all_D['Dates'].dt.month\nwind_data_all_D['dayofweek_name'] = wind_data_all_D['Dates'].dt.day_name()\n\n#Officially spring is during the months of March, April and May in Germany. Summer is from June through to August. Autumn is during the months of September, October and November and winter is from December to February.\n\nseasons = ['Winter','Winter','Spring','Spring','Spring','Summer','Summer','Summer','Autumn','Autumn','Autumn','Winter']\nmonth_to_season = dict(zip(range(1,13), seasons))\n\nwind_data_all_D['Season'] = wind_data_all_D['Dates'].dt.month.map(month_to_season)\nwind_data_all_D","a358d5cc":"fig, ax = plt.subplots(figsize=(15,9))\n\nsns.lineplot(x=\"Dates\", \n             y=\"TennetTSO\",\n             data = wind_data_all_D,\n             color='r',\n#              hue = 'dayofweek_name', \n             dashes=False,\n             ax=ax)\nsns.lineplot(x=\"Dates\", \n             y=\"50Hertz\", \n             data = wind_data_all_D,\n             color='b',\n#              hue = 'dayofweek_name',\n             dashes=False,\n             ax=ax)   \nsns.lineplot(x=\"Dates\", \n             y=\"TransnetBW\", \n             data = wind_data_all_D,\n             color='g',\n#              hue = 'dayofweek_name', \n             dashes=False,\n             ax=ax) \nsns.lineplot(x=\"Dates\", \n             y=\"Amprion\", \n             data = wind_data_all_D,\n             color='y',\n#              hue = 'dayofweek_name',\n             dashes=False,\n             ax=ax) \nax.legend(['TennetTSO', '50Hertz','TransnetBW','Amprion'], facecolor='w')\nplt.title(\"Total Daily Wind Generation in Terra Watt Hour\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"TWH\")\nplt.show()","22f9bc4d":"wind_data_all_D","e112efb7":"wind_data_all_D.set_index('Dates',inplace=True)\nwind_data_all_D.drop(['month'],axis=1, inplace=True)","dd7e238f":"#Let's look at one of the seasons\nwind_data_all_D[wind_data_all_D['Season']=='Winter'].plot(subplots=True, sharex=True, figsize=(10,10))\n# wind_data_all_D[wind_data_all_D['Season']=='Spring'].plot(subplots=True, sharex=True, figsize=(10,10))\n\nplt.show()","14e0426d":"#Hourly wind data\nwind_data_all_H = wind_data_all.resample('H', on='Dates').mean()\nwind_data_all_H.reset_index(inplace=True)\nwind_data_all_H\n\n#save this dataframe for modeling later\nts = wind_data_all_H.copy(deep=True)","dea5c3c3":"wind_data_all_H['month'] = wind_data_all_H['Dates'].dt.month\nwind_data_all_H['dayofweek_name'] = wind_data_all_H['Dates'].dt.day_name()\nwind_data_all_H.head()","6e9c674d":"#using seasons and month to season mapping from earlier\n\nwind_data_all_H['Season'] = wind_data_all_H['Dates'].dt.month.map(month_to_season)","2c936d17":"wind_data_all_H[500:505]","0a675cb7":"#Recover default matplotlib settings \nimport matplotlib as mpl\nimport matplotlib.dates as mdates\nfrom matplotlib.dates import DateFormatter\n\n# Use white grid plot background from seaborn\nsns.set(context='notebook',style='whitegrid', font_scale=1.5)\n\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline","fb51d6cd":"# wind_data_all_H.plot()\n\nfig, ax = plt.subplots(figsize=(20,9))\n\nsns.lineplot(x=\"Dates\", \n             y=\"TennetTSO\",\n             data = wind_data_all_H,\n             color='r',\n#              hue = 'dayofweek_name', \n             dashes=False,\n             ax=ax)\nsns.lineplot(x=\"Dates\", \n             y=\"50Hertz\", \n             data = wind_data_all_H,\n             color='b',\n#              hue = 'dayofweek_name',\n             dashes=False,\n             ax=ax)   \nsns.lineplot(x=\"Dates\", \n             y=\"TransnetBW\", \n             data = wind_data_all_H,\n             color='g',\n#              hue = 'dayofweek_name', \n             dashes=False,\n             ax=ax) \nsns.lineplot(x=\"Dates\", \n             y=\"Amprion\", \n             data = wind_data_all_H,\n             color='y',\n#              hue = 'dayofweek_name',\n             dashes=False,\n             ax=ax) \nax.legend(['TennetTSO', '50Hertz','TransnetBW','Amprion'], facecolor='w')\nplt.title(\"Total Hourly Wind Generation in Terra Watt Hour\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"TWH\")\nplt.show()","f0a17973":"fig, ax = plt.subplots(figsize=(20,9))\n\nsns.lineplot(x=\"Dates\", \n             y=\"TennetTSO\",\n             data = wind_data_all_H,\n#              color='r',\n             hue = 'Season', \n#              style='Season',\n             dashes=False,\n             ax=ax)\n\nplt.title(\"Total Hourly Wind Generation in Terra Watt Hour\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"TWH\")\nplt.show()","15584065":"!pip install tsmoothie","51d9a263":"from tsmoothie.smoother import *\nfrom tsmoothie.utils_func import create_windows\n\n","1aecccc6":"## Use Kalman filter to smooth data for visualization \n\nsmoother = KalmanSmoother(component = 'level_longseason',\n                         component_noise ={'level':0.5,\n                                          'longseason':0.1},\n                         n_longseasons=365)\n\nsmoother.smooth(wind_data_all_H[['TennetTSO', '50Hertz','TransnetBW','Amprion']].T)\n","28e64ab7":"color = {0:'red', 1:'orange', 2:'green', 3:'purple'}\n\ncols = ['TennetTSO', '50Hertz','TransnetBW','Amprion']\n\nfor i, name in enumerate(wind_data_all_H[cols]):\n    plt.figure(figsize=(8,4))\n    plt.plot(wind_data_all_H.index, smoother.data[i], c=color[i], label=name, alpha=0.3)\n    plt.plot(wind_data_all_H.index, smoother.smooth_data[i], c=color[i], label=name+'smooth')\n    plt.legend()\n    plt.show\n\n","7f2caafd":"\nwind_data_all_H = wind_data_all_H.set_index('Dates')\nwind_data_all_H\n","33d5bdf2":"plt.figure(figsize=(15,7))\n# wind_data_all_H.TennetTSO.plot()\ndf = wind_data_all_H.reset_index()\nfig, (ax1,ax2,ax3,ax4) = plt.subplots(4,1, figsize=(15,7))\n\nax1.plot( 'Dates', 'TennetTSO', data=df, marker='', color='olive', linewidth=2, linestyle='dashed', label=\"TennetTSO\")\nax1.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc='lower left',ncol=2, mode=\"expand\", borderaxespad=0.)\n\nax2.plot( 'Dates', '50Hertz', data=df, marker='', color='green', linewidth=2, linestyle='dashed', label=\"50Hertz\")\nax2.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc='lower left',ncol=2, mode=\"expand\", borderaxespad=0.)\n\nax3.plot( 'Dates', 'TransnetBW', data=df, marker='', color='purple', linewidth=2, linestyle='dashed', label=\"TransnetBW\")\nax3.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc='lower left',ncol=2, mode=\"expand\", borderaxespad=0.)\n\nax4.plot( 'Dates', 'Amprion', data=df, marker='', color='red', linewidth=2, linestyle='dashed', label=\"Amprion\")\nax4.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc='lower left',ncol=2, mode=\"expand\", borderaxespad=0.)\n\nplt.show()","b8459ae3":"# wind_data_all_H.set_index('Dates',inplace=True)\n\ndata_v1 = wind_data_all_H[['TennetTSO', '50Hertz','TransnetBW','Amprion']]\ndata_v1","4a6eb8b1":"# compute the correlation matrix\n\ndf_corr = data_v1.corr(method='spearman')\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(df_corr, dtype=bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(6, 6))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(df_corr, mask=mask, cmap=cmap, vmax=1.0, annot=True, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","16a12822":"#import required python packages\n\nimport datetime\nimport lightgbm as lgb\nimport xgboost as xgb\nimport plotly.express as px\n\nfrom typing import Optional, List, Dict\nfrom fbprophet import Prophet\nfrom xgboost import plot_importance, plot_tree\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\nplt.style.use('fivethirtyeight')","7de6f4f4":"ts1 = ten_df.resample('H', on = 'Dates').mean().reset_index()\nts1 = ts1.rename(columns={'TennetTSO':'TWH_Generation'})\nts1","667fd3d5":"    #Officially spring is during the months of March, April and May in Germany. Summer is from June through to August. Autumn is during the months of September, October and November and winter is from December to February.\n\n    seasons = ['Winter','Winter','Spring','Spring','Spring','Summer','Summer','Summer','Autumn','Autumn','Autumn','Winter']\n    season_num = [4,4,1,1,1,2,2,2,3,3,3,4]\n    month_to_season_num = dict(zip(range(1,13), season_num))","d97a1a98":"month_to_season_num","8c3827d6":"def return_date_features(df, datetime_col):\n    \"\"\"\n    Create date related features for the datetime column that is passed \n    returns Input dataframe with additional time related feature columns\n    \"\"\"\n    df['date_hour'] = df[datetime_col].dt.floor('H')\n    df['date'] = df[datetime_col].dt.floor('D')\n    df['hour_of_day'] = df[datetime_col].dt.hour\n    df['day_of_week'] = df[datetime_col].dt.dayofweek\n    df['month_of_year'] = df[datetime_col].dt.month\n    df['day_of_year'] = df[datetime_col].dt.dayofyear\n    df['week_of_year'] = df[datetime_col].dt.isocalendar().week\n    \n    df['Season'] = df[datetime_col].dt.month.map(month_to_season_num)\n    \n    return df\n    ","6c1066d6":"ts1 = return_date_features(ts1, 'Dates')\nts1.head()","5eb69f77":"#plot the time series\nfig = ts1.plot(x=\"Dates\", y=\"TWH_Generation\", style='.', figsize=(15,5))","44ecf219":"#plotting additional aggregates for the features that were created\n\ndef lineplot_agg_grouped(df, group_col, target_col, y_label, agg_type = 'mean', x_ticks = 0):\n    \"\"\"\n    plots the aggregate value of a column in a dataframe grouped by another column\n    \"\"\"\n    agg_df = df.groupby([group_col]).agg({target_col:agg_type}).reset_index()\n    plt.figure(figsize=(6,4))\n    ax = sns.lineplot(data=agg_df, x=agg_df[group_col], y=target_col, marker='o')\n    ax.set(ylabel=y_label)\n    plt.xticks(rotation=x_ticks)\n    \n    return","ad005d17":"# plot average observations grouped by different features\n\nts_features = ['hour_of_day','day_of_week','Season']\n\nfor ts_feature in ts_features:\n    lineplot_agg_grouped(\n        df = ts1,\n        group_col = ts_feature,\n        target_col = 'TWH_Generation',\n        y_label = 'Average Generation (TWH)',\n        agg_type = 'mean',\n        x_ticks=0)\n    ","b139f5dc":"#splitting the train and test data\n\nsplit_date = '2020-07-22'\nts1['type'] = 'train'\nts1.loc[ts1['date']>= split_date, 'type'] = 'test'\ntrain = ts1.loc[ts1['type'] == 'train'].reset_index(drop=True)\ntest = ts1.loc[ts1['type'] == 'test'].reset_index(drop=True)\n","834d3648":"#plotting time series grouped by train and test datasets\nfig = px.scatter(ts1, x=\"Dates\", y=\"TWH_Generation\", hover_data=['day_of_week'], color='type')\nfig.update_traces(mode='markers+lines', marker_size=3)\nfig.show()","f1dfb83c":"def eval_accuracy(y_true, y_pred):\n    \"\"\"\n    y_true - actual values as pandas series\n    y_pred - predicted values as pandas series\n    return: dictionary with MAE, RMSE and MAPE metrics\n    \"\"\"\n    #mean absolute error (MAE)\n    mae = mean_absolute_error(y_true, y_pred)\n    \n    #root mean squared error (RMSE)\n    rmse = np.sqrt(mean_squared_error(y_true, y_pred))\n    \n    #mean absolute percentage error (MAPE)\n    mape = np.mean(np.abs((y_true-y_pred) \/ y_true)) * 100\n    \n    return {'MAE': round(mae, 3),\n           'RMSE': round(rmse, 3),\n           'MAPE': round(mape, 3)}\n\n    ","8bf6f80e":"#prophet with default parameters\n# https:\/\/facebook.github.io\/prophet\/docs\/diagnostics.html#hyperparameter-tuning\n#seasonality_prior_scale=1\nmodel_prophet = Prophet(changepoint_prior_scale= 0.5,seasonality_prior_scale=0.01)\nmodel_prophet.fit(train.rename(columns={'Dates':'ds', 'TWH_Generation':'y'}))\ntest_prophet = model_prophet.predict(df = test.rename(columns={'Dates':'ds', 'TWH_Generation':'y'}))","1ac5d479":"#check the predictions\n\ntest_prophet.head()","7191d24a":"# plot historical values and forecast values\n\nfig = model_prophet.plot(test_prophet, figsize=(8,5))","02143ce0":"fig = model_prophet.plot_components(test_prophet)","299c5b46":"f, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nax.scatter(test[\"Dates\"], test[\"TWH_Generation\"], color='r')\nfig = model_prophet.plot(test_prophet, ax=ax)","f82c236d":"eval_accuracy(test[\"TWH_Generation\"],test_prophet['yhat'])","a4f87b12":"# plot actual vs forecast in an interactive plot\n\ntest = pd.merge(left=test, right=test_prophet.rename(columns={'ds':\"Dates\",'yhat':'prediction_prophet'}), \n               on = \"Dates\",\n               how=\"left\")","c23ef161":"# plot\n\nfig = px.scatter(test, x=\"Dates\", y=[\"TWH_Generation\", \"prediction_prophet\"],\n                hover_data=[\"day_of_week\"])\nfig.update_traces(mode='markers+lines', marker_size=3)\nfig.show()","b28562fa":"#Cross-validation \nimport itertools\nimport time\nimport logging\nlogging.getLogger().setLevel(logging.ERROR)\nfrom fbprophet.diagnostics import cross_validation\nfrom fbprophet.diagnostics import performance_metrics\n\ndef run_prophet_cv(timeserie):\n  start_time = time.time()\n  cv_start_time = datetime.datetime.now() - datetime.timedelta(hours=7)\n#   series_name = timeserie.name\n#   timeserie = timeserie.reset_index()\n#   timeserie.columns = ['ds','y']\n  param_grid = {  \n                'changepoint_prior_scale': [0.001, 0.01, 0.1, 0.5],\n                'seasonality_prior_scale': [0.01, 0.1, 1.0, 10.0], \n                }\n  cutoffs = pd.to_datetime(['2020-04-22'])\n  # Generate all combinations of parameters\n  all_params = [dict(zip(param_grid.keys(), v)) for v in itertools.product(*param_grid.values())]\n  mapes = []  # Store the MAPEs for each params here\n\n  # Use cross validation to evaluate all parameters\n  # other performance metrics available like mse, rmse, mae, mape, mdape,smape,coverage\n  for params in all_params:\n      m = Prophet(**params).fit(timeserie)  # Fit model with given params\n      df_cv = cross_validation(m, cutoffs=cutoffs, horizon='90 days', parallel='threads')\n      df_p = performance_metrics(df_cv, rolling_window=1)\n      mapes.append(df_p['mape'].values[0])\n\n  # Find the best parameters\n  tuning_results = pd.DataFrame(all_params)\n  tuning_results['mape'] = mapes\n  # print('tuning results:\\n',tuning_results)\n\n  best_params = all_params[np.argmin(mapes)]\n  print('best param:',best_params)\n  print(\"---CV took %s seconds ----\" % (time.time() - start_time))\n  print(\"--- CV started at ----\", cv_start_time)\n  return best_params","d156e3ae":"f = run_prophet_cv(train.rename(columns={'Dates':'ds', 'TWH_Generation':'y'}))\nf","f090f3ab":"### Generating date related features","3f19087a":"# Hourly data","7daf2693":"#### Observations:\nAverage generation seems be higher during the day with sunrise hours having the lower portion of generation.\n\nWeekend generation is generally higher compared to weekdays. One guess is that this may be due to less curtailment on the weekends.\n\nGeneration in Summer (2) is least compared to all the other seasons. Autumn (3) is next followed by Spring (1) and the highest average generation is during the Winter (4) months.\n\n\n\n","ab20a026":"# Wind Generation Data EDA and Forecasting\n\nNotebook below explores the dataset containing wind generation in four of the German Transmission System Operators (TSOs)\n\n\n![German TSOs](https:\/\/www.cleanenergywire.org\/sites\/default\/files\/resize\/styles\/large\/public\/images\/factsheet\/130514-regelzonen-nep-800x535.jpg?itok=RE8S7NLK)\n\n*image credit:https:\/\/www.cleanenergywire.org","2da8b79f":"### Smoothing","09eea9bf":"# Time Series Modeling","eb49a8d3":"### Hyperparameter tuning using cross-validation","b86c773f":"best param: {'changepoint_prior_scale': 0.5, 'seasonality_prior_scale': 0.01}\n---CV took 203.51009392738342 seconds ----","0c3ec029":"They seem to be all correlated with each other.\n\n","f0516315":"Initial model is pretty terrible, so let's go back and figure out what parameters we can change","5deef890":"### Create an evaluation metric ","c14a23de":"Using default parameters for prophet model, we get: {'MAE': 52.079, 'RMSE': 86.857, 'MAPE': 179.253}\n\nadding yearly_seasonality=20 to model gives {'MAE': 109.27, 'RMSE': 135.33, 'MAPE': 568.851}\n\nreducing yearly_seasonality to 4 in the model gives {'MAE': 211.261, 'RMSE': 238.702, 'MAPE': 1226.523}\n\nchanging the model to use logistic growth with cap of 1000 and floor of 0 gives {'MAE': 56.184, 'RMSE': 96.313, 'MAPE': 110.319}\n\nregular model with seasonality_prior_scale set to 1 gives {'MAE': 52.17, 'RMSE': 86.31, 'MAPE': 187.787}\n\nregular model with changepoint_prior_scale set to 0.5 gives {'MAE': 53.286, 'RMSE': 84.874, 'MAPE': 223.09}\n\nregular model with changepoint_prior_scale=0.5, seasonality_prior_scale=1 gives{'MAE': 53.269, 'RMSE': 84.898, 'MAPE': 222.523}\n\nregular model with changepoint_prior_scale=0.5, seasonality_prior_scale=7 gives {'MAE': 53.372, 'RMSE': 84.818, 'MAPE': 225.125}\n\nregular model with 'changepoint_prior_scale': 0.5, 'seasonality_prior_scale': 0.01 gives {'MAE': 53.049, 'RMSE': 84.512, 'MAPE': 223.666}\n","319b819c":"Some more tuning is needed for this model to get better accuracy. \n\nInsights and ideas are welcome!\n\n---More to follow ---","c85478e3":"**Interesting tidbit from a google search:**\n\n> California is approximately 403,882 sq km, while Germany is approximately 357,022 sq km, making Germany 88.4% the size of California. Meanwhile, the population of California is ~37.3 million people (42.9 million more people live in Germany).\n\nThis may be the reason why the wind generation in all four of them appear to have similar profiles.\n","da3c6786":"Create a time series model with Facebook's Prophet package using the hourly generation data for Tennet TSO","791c5e56":"Let's work on the first time series of TenneT TSO","67dd5e1d":"# Look for any correlation","c2acfaec":"# Resample to Monthly wind data","4a975891":"### Let's look at the wind generation profile for one of the seasons","a27f557a":"# Daily data\n\n","e32fcd74":"## TS Forecasting with FB Prophet"}}