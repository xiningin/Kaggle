{"cell_type":{"e7a0b693":"code","a18cc2dd":"code","21749dae":"code","9b0a2ffa":"code","9db909f4":"code","db1dca07":"code","b8ae7266":"code","45b9dd23":"code","9a2e3db1":"code","1bc39230":"code","551cc5fd":"code","75f8b094":"code","7a1fb440":"code","dbfb5c7e":"code","c1caca75":"code","6f4829b4":"code","53643fc2":"code","3f6c2d03":"code","e9d4ae8d":"code","e6a464fb":"code","8aa7b7ab":"code","f0ec93e7":"code","909594a5":"code","a796db71":"code","203d4e36":"markdown"},"source":{"e7a0b693":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.api import VAR\nfrom statsmodels.tsa.stattools import adfuller\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom pandas.tseries.offsets import BDay, DateOffset\nimport random\nimport warnings\nwarnings.filterwarnings('ignore')","a18cc2dd":"df = pd.read_csv(\"..\/input\/inventory-data\/inventory_data.csv\")\nprint(df.shape)\ndf.head()","21749dae":"df['Date'] = pd.to_datetime(df['Date'])","9b0a2ffa":"df.set_index('Date', inplace=True)","9db909f4":"fig, ax = plt.subplots(1,1,figsize=(12,6))\ndf['Sales (NS)'].plot(color='blue')\ndf['Sales (GH)'].plot(color='red')","db1dca07":"# df.describe().transpose()\ndf.isnull().sum() \/ len(df) * 10","b8ae7266":"df[['Sales (NS)','Sales (GH)']].corr()","45b9dd23":"ts_df = df[['Sales (NS)','Sales (GH)']]","9a2e3db1":"# Split data\nsize = int(len(ts_df) * 0.8)\ntrain_df, test_df = ts_df.iloc[:size], ts_df.iloc[size:]","1bc39230":"# Check if it's stationary or non-stationary\ndef adf_test(col, signif = 0.05, name=\"\"):\n    output = adfuller(col, autolag='AIC')\n    p_value = output[1]\n    print(name)\n    print(f\"p-value: {round(p_value,4)}\")\n    if p_value <= signif:\n        print(\"Data is Stationary.\")\n    else:\n        print(\"Data is Non-Stationary.\")\n        \n    print(\"\\n\")\n    \n    \nfor name, col in train_df.iteritems():\n    adf_test(col,name=name)","551cc5fd":"# Modelling  \nmodel = VAR(train_df)\nmodel = model.fit(maxlags=20, ic='aic')\nmodel.summary()","75f8b094":"lag_order = model.k_ar\n\nnobs = 500  # how many days to predict sales for\nidx = pd.date_range(test_df.index[0], periods=nobs)  \n\nforecast = model.forecast(train_df.values[-lag_order:], steps=nobs) \nforecast_df = pd.DataFrame(np.round(forecast), index=idx, columns=['Sales (NS)_f','Sales (GH)_f'])","7a1fb440":"forecast_df","dbfb5c7e":"actual = test_df[['Sales (NS)','Sales (GH)']]\npredicted = forecast_df[['Sales (NS)_f','Sales (GH)_f']][:len(actual)] ","c1caca75":"mse = mean_squared_error(actual, predicted)\nrmse = np.square(mse)\nmae = mean_absolute_error(actual, predicted)\nprint(\"mse: \", mse)\nprint(\"rmse: \", rmse)\nprint(\"mae: \", mae)","6f4829b4":"# Search for future dates\ndate = '2024-02-29'\nforecast_df[forecast_df.index== date]","53643fc2":"Sales = pd.DataFrame({'Sales (NS)': train_df['Sales (NS)'].append(forecast_df['Sales (NS)_f']),\n                      'Sales (GH)': train_df['Sales (GH)'].append(forecast_df['Sales (GH)_f'])})\n\ndf = pd.concat([df.drop(['Sales (NS)','Sales (GH)'], axis=1), Sales], axis=1)","3f6c2d03":"def stock_reorder(item, warehouse, batch=0, business_days=0, days=0, unit=1, replenished=True, unlimited=False):\n    \"\"\" This function:\n        1.Completes current stocking for other dates (after 11\/10\/2021)\n        2.Predicts when re-order is necessary\"\"\"\n    \n    for i in range(len(df)-1): \n#         print(df[item][i],df[f'Sales ({warehouse})'].index[i])\n        if (df[f'Sales ({warehouse})'][i] * unit) > df[item][i]:\n            run_out_date = df['Sales (NS)'].index[i]\n            order_date = (run_out_date - DateOffset(days=days)) - BDay(business_days)\n            if replenished:\n                print(f'{item}: Re-order on {order_date}. Receives by {run_out_date}')\n                df[item][run_out_date] += batch\n            else:\n                print(f'NutriSense will run out on {run_out_date}')\n                df[item][i+1:] = df[item][i]\n                break\n                            \n        if unlimited:\n            df[item][i+1] = df[f'Sales ({warehouse})'][i+1] * unit\n        else:\n            df[item][i+1] = df[item][i] - (df[f'Sales ({warehouse})'][i] * unit)\n            \n            \n        \n\n## Uncomment the lines below to stock and predict reorders!\n\nstock_reorder(item='Box (NS)', warehouse='NS', batch=4000, business_days=18)\n# stock_reorder(item='Pamphlet (NS)', warehouse='NS', batch=4000, business_days=5, days=2)\n# stock_reorder(item='Patch (NS)', warehouse='NS', batch=8000, days=75, unit=2)\n# stock_reorder(item='CGM (NS)', warehouse='NS', unit=2, replenished=False)\n\n# stock_reorder(item='Box (GH)', warehouse='GH', batch=4000, business_days=18)\n# stock_reorder(item='Pamphlet (GH)', warehouse='GH', batch=4000, business_days=5, days=2)\n# stock_reorder(item='Patch (GH)', warehouse='GH', batch=8000, days=75, unit=2)\n# stock_reorder(item='CGM (GH)', warehouse='GH', unit=2, unlimited=True)","e9d4ae8d":"df","e6a464fb":"# Adding replacement kits (randomly)\ndf['Replacements'] = 0\nindices =  np.random.randint(low=0, high=len(df), size=int(len(df) * 0.25))\ndf['Replacements'][indices] = np.random.randint(low=0, high=10, size=int(len(df) * 0.25))","8aa7b7ab":"# Adding daily margin\nproduct_cost = 250\ncost = (df['Sales (NS)'] + df['Sales (GH)']) * product_cost\ncost -= df['Replacements'] * 250\nCOGSS = (df['Sales (NS)'] * 101.15) + (df['Sales (GH)'] * 115.15)\ndf['Margin (%)'] = round((cost - COGSS) \/ cost * 100, 2)\ndf","f0ec93e7":"# margin per product\nCOGS_NS, COGS_GH = 101.15, 115.15\ngross_margin_NS = (product_cost - COGS_NS) \/ product_cost * 100\ngross_margin_GH = (product_cost - COGS_GH) \/ product_cost * 100\n\nprint(f'Gross Margin per NutriSense 2 CGM Kit ($250): {round(gross_margin_NS,2)}%')\nprint(f'Gross Margin per giftHealth 2 CGM Kit ($250): {round(gross_margin_GH,2)}%')","909594a5":"output = df\noutput.to_csv('output.csv')","a796db71":"output","203d4e36":"#### "}}