{"cell_type":{"5290ccea":"code","4b27f27e":"code","e2b254b3":"code","8155004c":"code","28e89e5f":"code","40515079":"code","2aa47f07":"code","7e432eef":"code","79e5be3f":"code","53bfa9d2":"code","68704783":"code","1f476020":"code","d12602c4":"code","dcdaec4a":"code","13309971":"code","c4b474fb":"code","02358eb3":"code","0270d4db":"code","63989857":"code","11831989":"code","13cc78e4":"code","60340a5e":"code","1eb73cdd":"code","e06ad9b7":"code","3af1b316":"code","af4518a1":"code","7d0f67fe":"code","0bb27358":"code","712020d1":"code","c9bd3c2a":"code","62a08acb":"code","9a5ce2e4":"code","6438e9aa":"code","503f86a8":"code","fe0758f6":"code","6b8f638d":"code","7222e5ab":"code","0d98f3db":"code","04d76a5c":"code","3ccf4124":"code","f86fe8c4":"code","2c0ec7a1":"code","d0033290":"code","482ff0a5":"code","8f3106c0":"code","449ad411":"code","f88badf0":"code","ab0173bd":"code","1d1db940":"code","412e30d5":"markdown","3e4262db":"markdown","63bbcead":"markdown","6fbec00a":"markdown","77c8b729":"markdown","b058048d":"markdown","2bfe7cb9":"markdown","674fa45f":"markdown","25893963":"markdown","d678016b":"markdown","267250b6":"markdown","14a2612f":"markdown","8b418346":"markdown","489dfb3a":"markdown","916c427e":"markdown","1c5db7eb":"markdown"},"source":{"5290ccea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b27f27e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","e2b254b3":"df = pd.read_csv('..\/input\/hr-data-for-analytics\/HR_comma_sep.csv')\ndf.head()","8155004c":"df=df.rename(columns={'sales': 'department'})","28e89e5f":"df.columns","40515079":"df.describe().T","2aa47f07":"df.info()","7e432eef":"df.dtypes","79e5be3f":"df.shape","53bfa9d2":"df.isnull().any()","68704783":"df['left'].value_counts()\nsns.countplot(df.left)","1f476020":"print(df.salary.unique())","d12602c4":"df.salary.value_counts()","dcdaec4a":"df['department'].value_counts()","13309971":"sns.pairplot(df,hue= 'left')","c4b474fb":"pd.crosstab(df['department'],df['salary']).style.background_gradient('summer_r')","02358eb3":"plt.rcParams['figure.figsize']=(15,10)\ndf['department'].value_counts().plot(kind='bar',color='green')\n\nplt.ylabel('Count of department')\nplt.xlabel('Department')","0270d4db":"plt.rcParams['figure.figsize']=(25,20)\nplt.subplot(2,3,1)\nsns.boxplot(y=df['satisfaction_level'],x=df['department'])\n\nplt.subplot(2,3,2)\nsns.countplot(df['department'])","63989857":"def boxplot(x,i):\n    plt.subplot(5,2,i)\n    sns.boxplot(y=df[x])\nplt.figure(figsize=(15,20))    \n    \nboxplot('satisfaction_level',1)  \nboxplot('last_evaluation',2) \n\nplt.figure(figsize=(15,20))\nboxplot('number_project',1)\nboxplot('average_montly_hours',2)","11831989":"#Number project Vs left\n\nplt.rcParams['figure.figsize']=(15,5)\nplt.subplot(1,2,1)\nsns.boxplot(y=df['number_project'],x=df['left'])","13cc78e4":"sns.heatmap(df.corr(), annot=True,cbar=True,cmap='coolwarm')\n\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12);","60340a5e":"from sklearn.preprocessing import LabelEncoder\n\nle=LabelEncoder()\ndf['salary']=le.fit_transform(df['salary'])\ndf.head()","1eb73cdd":"df=pd.get_dummies(df,drop_first=True )\ndf.head()","e06ad9b7":"df.columns ","3af1b316":"x=df.loc[:,df.columns!='left']\ny=df.loc[:,df.columns=='left']\nx","af4518a1":"from sklearn.model_selection import train_test_split\n\nxtrain,xtest,ytrain,ytest= train_test_split(x,y,test_size=0.3,random_state=7)\nprint(xtrain.shape)\nprint(xtest.shape)","7d0f67fe":"from sklearn.preprocessing import MinMaxScaler\n\nsc=MinMaxScaler()\nxtrain=pd.DataFrame(sc.fit_transform(xtrain,ytrain ),index=xtrain.index,columns=xtrain.columns)\n\nxtrain.head()","0bb27358":"xtest=pd.DataFrame(sc.transform(xtest),index=xtest.index,columns=xtest.columns)\nxtest.head()","712020d1":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.naive_bayes import GaussianNB , MultinomialNB\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import cross_val_predict, cross_val_score\nfrom sklearn.metrics import precision_score,accuracy_score,confusion_matrix,f1_score,recall_score\nfrom sklearn.metrics import classification_report","c9bd3c2a":"rf_model=RandomForestClassifier(n_estimators=100)\nrf_model.fit(xtrain,ytrain)\n\npredict=rf_model.predict(xtest)\nrf_acc=accuracy_score(ytest,predict)\nrf_acc","62a08acb":"featimp=pd.Series(rf_model.feature_importances_,index=x.columns)\nprint(featimp)","9a5ce2e4":"Important_features = ['satisfaction_level','last_evaluation','number_project',\n                      'average_montly_hours','time_spend_company']\n","6438e9aa":"Important_features=df.iloc[:,:5]\nImportant_features.head()","503f86a8":"svm=SVC(C= 10, kernel= 'linear',random_state=22,class_weight={0:0.3 , 1:0.7})\nsvm.fit(xtrain,ytrain)\nsvm_pred=svm.predict(xtest)\nsvm_cm=confusion_matrix(ytest,svm_pred)\nacc_svm=accuracy_score(svm_pred,ytest)\n\nprint(acc_svm)\nprint(\"---------------------------------------\")\nprint(classification_report(svm_pred,ytest))","fe0758f6":"#class_weight for balancing\n\nDT=DecisionTreeClassifier(criterion= 'gini', max_depth= 5,\n                          min_samples_leaf= 2, min_samples_split= 3, splitter= 'best',\n                          random_state=22,class_weight={0:0.3 , 1:0.7})\nDT.fit(xtrain,ytrain)\n\npred_dt=DT.predict(xtest)\n\nacc_DT=accuracy_score(pred_dt,ytest)\nprint(acc_DT)\nprint(\"---------------------------------------\")\nprint(classification_report(pred_dt,ytest))","6b8f638d":"krange=list(range(1,25))\nscore=[]\n\nfor i in krange:\n    knn=KNeighborsClassifier(n_neighbors=i)\n    knn.fit(xtrain,ytrain)\n    pred=knn.predict(xtest)\n    score.append(accuracy_score(ytest,pred))\n    \nplt.plot(krange,score) \n\nplt.xlabel('Value of k for KNN')\nplt.ylabel('Accuracy Score')\n\nplt.title('Accuracy Scores for Values of k of k-Nearest-Neighbors')    \n    ","7222e5ab":"knn=KNeighborsClassifier(n_neighbors=4)\nknn.fit(xtrain,ytrain)\npred=knn.predict(xtest)\n\nacc_knn=accuracy_score(ytest,pred)\nprint(acc_knn)","0d98f3db":"GNB=GaussianNB()\nGNB.fit(xtrain,ytrain)\npred=GNB.predict(xtest)\n\nprint(confusion_matrix(ytest,pred))\n\nacc_GNB=accuracy_score(ytest,pred)\nprint(acc_GNB)\n","04d76a5c":"#RF with all features\n\nrf_model=RandomForestClassifier(n_estimators=100)\nscores2 = cross_val_score(rf_model, x , y , cv = 10, scoring = 'accuracy' ) \n\nrf_acc_with_all_feature=scores2.mean()\nrf_acc_with_all_feature\n","3ccf4124":"#RF with Important_features \n\nrf_model=RandomForestClassifier(n_estimators=100)\nscores2 = cross_val_score(rf_model, Important_features , y , cv = 10, scoring = 'accuracy' ) \n\nrf_acc_imp_feature=scores2.mean()\nrf_acc_imp_feature","f86fe8c4":"#DTree with all features\n\nDT = DecisionTreeClassifier(criterion = \"entropy\", max_depth = 4\n                            ,min_samples_split = 5,min_samples_leaf = 3,class_weight = {0:0.3 , 1:0.7})\n\nscores = cross_val_score(DT, x , y , cv = 10, scoring = 'f1' ) \nscores2 = cross_val_score(DT, x , y , cv = 10, scoring = 'accuracy' ) \n\nprint(scores.mean() )  \nacc_DT_all_feature=scores2.mean()\nprint(acc_DT_all_feature )\n\n\nscores","2c0ec7a1":"#DTree with Important_features \n\nDT = DecisionTreeClassifier(criterion = \"entropy\", max_depth = 4\n                            ,min_samples_split = 5,min_samples_leaf = 3,class_weight = {0:0.3 , 1:0.7})\n\nscores = cross_val_score(DT, Important_features , y , cv = 10, scoring = 'f1' ) \nscores2 = cross_val_score(DT, Important_features , y , cv = 10, scoring = 'accuracy' ) \n\nprint(scores.mean() )  \nacc_DT_imp_feature=scores2.mean()\nprint(acc_DT_imp_feature )\n\n\nscores","d0033290":"#KNN with all features\n\nknn = KNeighborsClassifier(n_neighbors=6)\nacc_knn= cross_val_score(knn,x,y,cv = 10,scoring='accuracy')\n\n#print(acc_knn3)\nacc_knn_all_feature=acc_knn.mean()\n\nacc_knn_all_feature","482ff0a5":"#KNN with Important_features \n\nknn = KNeighborsClassifier(n_neighbors=6)\nacc_knn= cross_val_score(knn, Important_features, y,cv = 10,scoring='accuracy')\n\n#print(acc_knn3)\nacc_knn_imp_feature=acc_knn.mean()\n\nacc_knn_imp_feature","8f3106c0":"#GNB with all features\n\nGNB = GaussianNB()\nscores = cross_val_score(GNB, x , y , cv =10 , scoring = 'accuracy')\n \nacc_GNB_all_feature=scores.mean()\n\nacc_GNB_all_feature","449ad411":"#GNB with Important_features\n\nGNB = GaussianNB()\nscores = cross_val_score(GNB, Important_features , y , cv =10 , scoring = 'accuracy')\n \nacc_GNB_imp_feature=scores.mean()\n\nacc_GNB_imp_feature","f88badf0":"sns.set_palette('Set2')\n\ntest_scores = []\ntrain_scores = []\n\nfor i in range(1,30):\n\n    knn = KNeighborsClassifier(i)\n    knn.fit(xtrain,ytrain)\n    \n    train_scores.append(knn.score(xtrain,ytrain))\n    test_scores.append(knn.score(xtest,ytest))\n\nplt.figure(figsize=(20,5))\np = sns.lineplot(range(1,30),train_scores,marker='*',label='Train Score')\np = sns.lineplot(range(1,30),test_scores,marker='o',label='Test Score')","ab0173bd":"models=[\"RandomForestClassifier\",\"DTree\",\"KNN\",\"Gaussian Naive Bays\"]\nAccuracy_Train_Test=[rf_acc,acc_DT,acc_knn,acc_GNB]\n\nAccuracy_with_all_features=[rf_acc_with_all_feature,acc_DT_all_feature,acc_knn_all_feature,acc_GNB_all_feature]    \n     \nAccuracy_with_important_features=[rf_acc_imp_feature,acc_DT_imp_feature,acc_knn_imp_feature,\n                                                  acc_GNB_imp_feature]   ","1d1db940":"score= pd.DataFrame({\"Classification Model\" :models,\"Accuracy Train_Test\":Accuracy_with_all_features,\n                     \"Accuracy with all features(Kfold)\":Accuracy_with_all_features,\n                    \"Accuracy with important features(Kfold)\":Accuracy_with_important_features})\nscore.sort_values(by= \"Accuracy Train_Test\",ascending=False).reset_index(drop=True)                    ","412e30d5":"### Cross Validation","3e4262db":"#### Correlation","63bbcead":"#### Missing Data","6fbec00a":"## ML  Algorithms ","77c8b729":"### KNN","b058048d":"### D Tree","2bfe7cb9":" #### feature_importances","674fa45f":"# Encoding","25893963":"### Logistic Regression","d678016b":"## Train Test Split","267250b6":"### Outlier","14a2612f":"## Scaling","8b418346":"### Naive_Bayes","489dfb3a":"### Random Forest","916c427e":"### Data Understanding ","1c5db7eb":"### EDA"}}