{"cell_type":{"394f4f61":"code","74879b9e":"code","8892d49e":"code","46123ea5":"code","17740d38":"code","f95b3de8":"code","42057048":"code","4d7e03ce":"code","4c1b8c12":"code","3bd10a08":"code","536bdcf4":"code","e611e26c":"code","ea7867dc":"code","5031bbf3":"code","f4016ebd":"code","4089fc73":"code","65990342":"code","47690e58":"code","9666e4d2":"code","979254e4":"code","c223b237":"code","eeab4138":"code","5a39d3a4":"code","4f8555ca":"code","a3bb2470":"code","65966324":"code","4d968fed":"markdown","b4558e79":"markdown","dfda31cc":"markdown","5ee4b2af":"markdown","45d1c8b6":"markdown","f0cbe45b":"markdown","f3a99008":"markdown","bcc064e3":"markdown","3de10c15":"markdown","5651ed30":"markdown","570eacaf":"markdown","ccbc88be":"markdown","42a5becc":"markdown","f64bd51f":"markdown","3b785485":"markdown","6427914b":"markdown","7e9ec553":"markdown","15184f16":"markdown","f169e8cb":"markdown","e523caa8":"markdown","034cfecd":"markdown","71529037":"markdown","56b73c7e":"markdown","c82038d0":"markdown","ded8b9cd":"markdown","c76c5b87":"markdown","a1ee1d0e":"markdown","9fd602eb":"markdown","3c6ed852":"markdown","880cf786":"markdown","b454eb55":"markdown","eafb8069":"markdown","55ea0019":"markdown","2ca705ae":"markdown","1908052a":"markdown","b7ba8d0a":"markdown","5a33703a":"markdown","2562ce47":"markdown","1e10d4fc":"markdown","04559f4c":"markdown","a40e6022":"markdown","4831996b":"markdown","91df16e9":"markdown","aa976140":"markdown","ede9f518":"markdown","144b492f":"markdown"},"source":{"394f4f61":"# Import libraries necessary for this project\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom IPython.display import display # Allows the use of display() for DataFrames\n\n# Pretty display for notebooks\n%matplotlib inline\n\n# Load the wholesale customers dataset\ntry:\n    data = pd.read_csv(\"..\/input\/customers\/customers.csv\")\n    data.drop(['Region', 'Channel'], axis = 1, inplace = True)\n    print(\"Wholesale customers dataset has {} samples with {} features each.\".format(*data.shape))\nexcept:\n    print(\"Dataset could not be loaded. Is the dataset missing?\")   \n\nimport warnings\nwarnings.filterwarnings('ignore')","74879b9e":"# Display a description of the dataset\ndisplay(data.describe())","8892d49e":"# Select three indices of our choice you wish to sample from the dataset\nindices = [138,209,377] # After trying several time randomly, using np.random.choice(440,3) to get significant varied three.\n\n# Create a DataFrame of the chosen samples\nsamples = pd.DataFrame(data.loc[indices], columns = data.keys()).reset_index(drop = True)\nprint(\"Chosen samples of wholesale customers dataset:\")\ndisplay(samples)","46123ea5":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\n\n# Make a copy of the DataFrame, using the 'drop' function to drop the given feature\nnew_data = data.drop(['Detergents_Paper'], axis=1, inplace = False)\n\n# Split the data into training and testing sets(0.25) using the given feature as the target\n# Set a random state.\nX_train, X_test, y_train, y_test = train_test_split(new_data, data['Detergents_Paper'],test_size=0.25, random_state=0)\n\n# Create a decision tree regressor and fit it to the training set\nregressor = DecisionTreeRegressor(random_state=0)\nregressor.fit(X_train,y_train)\n# Report the score of the prediction using the testing set\nscore = regressor.score(X_test,y_test)\nprint(\"Score:\",score)","17740d38":"# Produce a scatter matrix for each pair of features in the data\nfrom pandas.plotting import scatter_matrix\nscatter_matrix(data, alpha = 0.3, figsize = (14,8), diagonal = 'kde');","f95b3de8":"import seaborn as sss\nsss.heatmap(data.corr(), annot=True)\nsss.pairplot(data);","42057048":"from pandas.plotting import scatter_matrix\n\n# Scale the data using the natural logarithm\nlog_data = np.log(data)\n\n# Scale the sample data using the natural logarithm\nlog_samples = np.log(samples)\n\n# Produce a scatter matrix for each pair of newly-transformed features\nscatter_matrix(log_data, alpha = 0.3, figsize = (14,8), diagonal = 'kde');","4d7e03ce":"# Display the log-transformed sample data\ndisplay(log_samples)","4c1b8c12":"outliers = []\n# For each feature find the data points with extreme high or low values\nfor feature in log_data.keys():\n    \n    # Calculate Q1 (25th percentile of the data) for the given feature\n    Q1 = np.percentile(log_data[feature], 25.)\n    \n    # Calculate Q3 (75th percentile of the data) for the given feature\n    Q3 = np.percentile(log_data[feature], 75.)\n    \n    # Use the interquartile range to calculate an outlier step (1.5 times the interquartile range)\n    step = (Q3-Q1)*1.5\n    # Display the outliers\n    print(\"\\nData points considered outliers for the feature '{}':\\n\".format(feature))\n    feature_outliers = log_data[~((log_data[feature] >= Q1 - step) & (log_data[feature] <= Q3 + step))]\n    outliers += feature_outliers.index.tolist()\n    #display(feature_outliers)\n    print(\"{}:\".format(feature_outliers))\n# OPTIONAL: Select the indices for data points you wish to remove\n   \n# Remove the outliers, if any were specified\ngood_data = log_data.drop(log_data.index[outliers]).reset_index(drop = True)\nprint(\"Number of outliers (including duplicates): \", len(outliers))\nprint(\"New dataset with removed outliers has {} samples with {} features each.\".format(*good_data.shape))","3bd10a08":"def pca_results(good_data, pca):\n    '''\n    Create a DataFrame of the PCA results\n    Includes dimension feature weights and explained variance\n    Visualizes the PCA results\n    '''\n\n    # Dimension indexing\n    dimensions = dimensions = ['Dimension {}'.format(i) for i in range(1,len(pca.components_)+1)]\n\n    # PCA components\n    components = pd.DataFrame(np.round(pca.components_, 4), columns = list(good_data.keys()))\n    components.index = dimensions\n\n    # PCA explained variance\n    ratios = pca.explained_variance_ratio_.reshape(len(pca.components_), 1)\n    variance_ratios = pd.DataFrame(np.round(ratios, 4), columns = ['Explained Variance'])\n    variance_ratios.index = dimensions\n\n    # Create a bar plot visualization\n    fig, ax = plt.subplots(figsize = (14,8))\n\n    # Plot the feature weights as a function of the components\n    components.plot(ax = ax, kind = 'bar');\n    ax.set_ylabel(\"Feature Weights\")\n    ax.set_xticklabels(dimensions, rotation=0)\n\n\n    # Display the explained variance ratios\n    for i, ev in enumerate(pca.explained_variance_ratio_):\n        ax.text(i-0.40, ax.get_ylim()[1] + 0.05, \"Explained Variance\\n          %.4f\"%(ev))\n\n    # Return a concatenated DataFrame\n    return pd.concat([variance_ratios, components], axis = 1)","536bdcf4":"from sklearn.decomposition import PCA\n# TODO: Apply PCA by fitting the good data with the same number of dimensions as features\npca = PCA(n_components=6)\npca.fit(good_data)\n# TODO: Transform log_samples using the PCA fit above\npca_samples = pca.transform(log_samples)\n\n# Generate PCA results plot\npca_results = pca_results(good_data, pca)","e611e26c":"# Display sample log-data after having a PCA transformation applied\ndisplay(pd.DataFrame(np.round(pca_samples, 4), columns = pca_results.index.values))","ea7867dc":"def pca_results2(good_data, pca):\n    '''\n    Create a DataFrame of the PCA results\n    Includes dimension feature weights and explained variance\n    Visualizes the PCA results\n    '''\n\n    # Dimension indexing\n    dimensions = dimensions = ['Dimension {}'.format(i) for i in range(1,len(pca.components_)+1)]\n\n    # PCA components\n    components = pd.DataFrame(np.round(pca.components_, 4), columns = list(good_data.keys()))\n    components.index = dimensions\n\n    # PCA explained variance\n    ratios = pca.explained_variance_ratio_.reshape(len(pca.components_), 1)\n    variance_ratios = pd.DataFrame(np.round(ratios, 4), columns = ['Explained Variance'])\n    variance_ratios.index = dimensions\n\n    # Create a bar plot visualization\n    fig, ax = plt.subplots(figsize = (14,8))\n\n    # Plot the feature weights as a function of the components\n    components.plot(ax = ax, kind = 'bar');\n    ax.set_ylabel(\"Feature Weights\")\n    ax.set_xticklabels(dimensions, rotation=0)\n\n\n    # Display the explained variance ratios\n    for i, ev in enumerate(pca.explained_variance_ratio_):\n        ax.text(i-0.40, ax.get_ylim()[1] + 0.05, \"Explained Variance\\n          %.4f\"%(ev))\n\n    # Return a concatenated DataFrame\n    return pd.concat([variance_ratios, components], axis = 1)","5031bbf3":"#import visuals as vs\n\n# Apply PCA by fitting the good data with only two dimensions\npca = PCA(n_components=2)\npca.fit(good_data)\n# Transform the good data using the PCA fit above\nreduced_data = pca.transform(good_data)\n\n# Transform log_samples using the PCA fit above\npca_samples = pca.transform(log_samples)\n\n# Create a DataFrame for the reduced data\nreduced_data = pd.DataFrame(reduced_data, columns = ['Dimension 1', 'Dimension 2'])\npca_results2(good_data, pca)","f4016ebd":"# Display sample log-data after applying PCA transformation in two dimensions\ndisplay(pd.DataFrame(np.round(pca_samples, 4), columns = ['Dimension 1', 'Dimension 2']))","4089fc73":"def biplot(good_data, reduced_data, pca):\n    '''\n    Produce a biplot that shows a scatterplot of the reduced\n    data and the projections of the original features.\n    \n    good_data: original data, before transformation.\n               Needs to be a pandas dataframe with valid column names\n    reduced_data: the reduced data (the first two dimensions are plotted)\n    pca: pca object that contains the components_ attribute\n\n    return: a matplotlib AxesSubplot object (for any additional customization)\n    \n    This procedure is inspired by the script:\n    https:\/\/github.com\/teddyroland\/python-biplot\n    '''\n\n    fig, ax = plt.subplots(figsize = (14,8))\n    # scatterplot of the reduced data    \n    ax.scatter(x=reduced_data.loc[:, 'Dimension 1'], y=reduced_data.loc[:, 'Dimension 2'], \n        facecolors='b', edgecolors='b', s=70, alpha=0.5)\n    \n    feature_vectors = pca.components_.T\n\n    # we use scaling factors to make the arrows easier to see\n    arrow_size, text_pos = 7.0, 8.0,\n\n    # projections of the original features\n    for i, v in enumerate(feature_vectors):\n        ax.arrow(0, 0, arrow_size*v[0], arrow_size*v[1], \n                  head_width=0.2, head_length=0.2, linewidth=2, color='red')\n        ax.text(v[0]*text_pos, v[1]*text_pos, good_data.columns[i], color='black', \n                 ha='center', va='center', fontsize=18)\n\n    ax.set_xlabel(\"Dimension 1\", fontsize=14)\n    ax.set_ylabel(\"Dimension 2\", fontsize=14)\n    ax.set_title(\"PC plane with original feature projections.\", fontsize=16);\n    return ax","65990342":"# Create a biplot\nbiplot(good_data, reduced_data, pca)","47690e58":"\nfrom sklearn.mixture import GaussianMixture as GMM\n\nfrom sklearn.metrics import silhouette_score\n\ndef myGMM(k):\n    global clusterer, preds, centers, sample_preds\n    \n    # Apply your clustering algorithm of choice to the reduced data \n    clusterer = GMM(n_components=k, random_state=0)\n    clusterer.fit(reduced_data)\n\n    # Predict the cluster for each data point\n    preds = clusterer.predict(reduced_data)\n\n    # Find the cluster centers\n    centers = clusterer.means_ \n    \n    # Predict the cluster for each transformed sample data point\n    sample_preds = clusterer.predict(pca_samples)\n\n    # Calculate the mean silhouette coefficient for the number of clusters chosen\n    score = silhouette_score(reduced_data,preds)\n    return score\n\nresults = pd.DataFrame(columns=['Silhouette Score'])\nresults.columns.name = 'Number of Clusters'    \nfor k in range(2,16):\n    score = myGMM(k) \n    results = results.append(pd.DataFrame([score],columns=['Silhouette Score'],index=[k]))\n\ndisplay(results) ","9666e4d2":"display(results) ","979254e4":"import matplotlib.cm as cm\n\n\ndef cluster_results(reduced_data, preds, centers, pca_samples):\n    '''\n    Visualizes the PCA-reduced cluster data in two dimensions\n    Adds cues for cluster centers and student-selected sample data\n    '''\n\n    predictions = pd.DataFrame(preds, columns = ['Cluster'])\n    plot_data = pd.concat([predictions, reduced_data], axis = 1)\n\n    # Generate the cluster plot\n    fig, ax = plt.subplots(figsize = (14,8))\n\n    # Color map\n    cmap = cm.get_cmap('gist_rainbow')\n\n    # Color the points based on assigned cluster\n    for i, cluster in plot_data.groupby('Cluster'):   \n        cluster.plot(ax = ax, kind = 'scatter', x = 'Dimension 1', y = 'Dimension 2', \\\n                     color = cmap((i)*1.0\/(len(centers)-1)), label = 'Cluster %i'%(i), s=30);\n\n    # Plot centers with indicators\n    for i, c in enumerate(centers):\n        ax.scatter(x = c[0], y = c[1], color = 'white', edgecolors = 'black', \\\n                   alpha = 1, linewidth = 2, marker = 'o', s=200);\n        ax.scatter(x = c[0], y = c[1], marker='$%d$'%(i), alpha = 1, s=100);\n\n    # Plot transformed sample points \n    ax.scatter(x = pca_samples[:,0], y = pca_samples[:,1], \\\n               s = 150, linewidth = 4, color = 'black', marker = 'x');\n\n    # Set plot title\n    ax.set_title(\"Cluster Learning on PCA-Reduced Data - Centroids Marked by Number\\nTransformed Sample Data Marked by Black Cross\");\n","c223b237":"# Display the results of the clustering from implementation\nmyGMM(2)\ncluster_results(reduced_data, preds, centers, pca_samples)","eeab4138":"# Inverse transform the centers\nlog_centers = pca.inverse_transform(centers)\n\n# Exponentiate the centers\ntrue_centers = np.exp(log_centers)\n\n# Display the true centers\nsegments = ['Segment {}'.format(i) for i in range(0,len(centers))]\ntrue_centers = pd.DataFrame(np.round(true_centers), columns = data.keys())\ntrue_centers.index = segments\ndisplay(true_centers)","5a39d3a4":"sss.heatmap((true_centers-data.mean())\/data.std(ddof=0),square=True, annot=True, cbar=False)\nplt.figure()\nplt.axes().set_title(\"Segment 0\")\nsss.barplot(x=true_centers.columns.values,y=true_centers.iloc[0].values)\n\nplt.figure()\nplt.axes().set_title(\"Segment 1\")\nsss.barplot(x=true_centers.columns.values,y=true_centers.iloc[1].values)","4f8555ca":"# Display the predictions\nfor i, pred in enumerate(sample_preds):\n    print(\"Sample point\", i, \"predicted to be in Cluster\", pred)","a3bb2470":"def channel_results(reduced_data, outliers, pca_samples):\n    '''\n    Visualizes the PCA-reduced cluster data in two dimensions using the full dataset\n    Data is labeled by \"Channel\" and cues added for student-selected sample data\n    '''\n\n    # Check that the dataset is loadable\n    try:\n        full_data = pd.read_csv(\"customers.csv\")\n    except:\n        print(\"Dataset could not be loaded. Is the file missing?\")       \n        return False\n\n    # Create the Channel DataFrame\n    channel = pd.DataFrame(full_data['Channel'], columns = ['Channel'])\n    channel = channel.drop(channel.index[outliers]).reset_index(drop = True)\n    labeled = pd.concat([reduced_data, channel], axis = 1)\n    \n    # Generate the cluster plot\n    fig, ax = plt.subplots(figsize = (14,8))\n\n    # Color map\n    cmap = cm.get_cmap('gist_rainbow')\n\n    # Color the points based on assigned Channel\n    labels = ['Hotel\/Restaurant\/Cafe', 'Retailer']\n    grouped = labeled.groupby('Channel')\n    for i, channel in grouped:   \n        channel.plot(ax = ax, kind = 'scatter', x = 'Dimension 1', y = 'Dimension 2', \\\n                     color = cmap((i-1)*1.0\/2), label = labels[i-1], s=30);\n        \n    # Plot transformed sample points   \n    for i, sample in enumerate(pca_samples):\n        ax.scatter(x = sample[0], y = sample[1], \\\n               s = 200, linewidth = 3, color = 'black', marker = 'o', facecolors = 'none');\n        ax.scatter(x = sample[0]+0.25, y = sample[1]+0.3, marker='$%d$'%(i), alpha = 1, s=125);\n\n    # Set plot title\n    ax.set_title(\"PCA-Reduced Data Labeled by 'Channel'\\nTransformed Sample Data Circled\");","65966324":"# Display the clustering results based on 'Channel' data\nchannel_results(reduced_data, outliers, pca_samples)","4d968fed":"In the above code :-\n- I've  selected the feature named <b><font color='green'>( Detergents_Paper )<\/font><\/b> in attemp to predict\n- The reported prediction score was <b><font color='green'>( 72.9 % )<\/font><\/b>\n- Because of that the prediction score is some how high or<b> considerable<\/b>. Hence, other features may correlate well with our chosen feature <b><font color='green'>(Detergents_Paper )<\/font><\/b> i.e. we could conclude that it does not provide more information gain and it is<b><font color='red'> less important and not necessary<\/font><\/b> for identifying customer's spending habits.","b4558e79":"## Visualizing a Biplot\nA biplot is a scatterplot where each data point is represented by its scores along the principal components. The axes are the principal components (in this case `Dimension 1` and `Dimension 2`). In addition, the biplot shows the projection of the original features along the components. A biplot can help us interpret the reduced dimensions of the data, and discover relationships between the principal components and original features.\n\nThe code below produces a biplot of the reduced-dimension data.","dfda31cc":"### Observation\nThe code below shows how the log-transformed sample data has changed after having a PCA transformation applied to it in six dimensions. Observe the numerical value for the first four dimensions of the sample points. Consider if this is consistent with our initial interpretation of the sample points.","5ee4b2af":"### Observation\nThe code below shows how the log-transformed sample data has changed after having a PCA transformation applied to it using only two dimensions. Observe how the values for the first two dimensions remains unchanged when compared to a PCA transformation in six dimensions.","45d1c8b6":"as we noticed above that there are many data points existed as outliers for more than one feature such as:- \n\n- 154: An outlier for Delicatessen, Milk and Grocery.\n- 128: An outlier for Delicatessen and Fresh.\n- 75: An outlier for Detergents_Paper and Grocery.\n- 66: An outlier for Delicatessen and Fresh\n- 65: An outlier for Frozen and Fresh\n\nI think the reason behind these discovered outliers is the few points lies below below the IQR.And this which caused the mentioned outliers to be more deviating and making skewed data in multiple features. I think also,It will be good thing if we removed these outliers points from the overall data since They add no value to any predictive models, and would only skew the results. Because we hunt all thses outliers in a list,Using PCA algorithm could help removing them easily .","f0cbe45b":"We are using the scatter matrix as a reference for discussing the distribution of the dataset, specifically talking about the normality, outliers, large number of data points near 0 among others. If we need to sepearate out some of the plots individually to further accentuate our point, we may do so as well.\n* Are there any pairs of features which exhibit some degree of correlation? \n* Does this confirm or deny our suspicions about the relevance of the feature we attempted to predict? \n* How is the data for those features distributed?\n\nWe may ask, Is the data normally distributed? Where do most of the data points lie? We can use [corr()](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.corr.html) to get the feature correlations and then visualize them using a [heatmap](http:\/\/seaborn.pydata.org\/generated\/seaborn.heatmap.html) (the data that would be fed into the heatmap would be the correlation values, for eg: `data.corr()`) to gain further insight.","f3a99008":"### Principal Component Analysis (PCA)\n\nNow that the data has been scaled to a more normal distribution and has had any necessary outliers removed, we can now apply PCA to the `good_data` to discover which dimensions about the data best maximize the variance of features involved. In addition to finding these dimensions, PCA will also report the *explained variance ratio* of each dimension \u2014 how much variance within the data is explained by that dimension alone. Note that a component (dimension) from PCA can be considered a new \"feature\" of the space, however it is a composition of the original features present in the data.\n\nIn the code block below, we will implement the following:\n - Importing `sklearn.decomposition.PCA` and assigning the results of fitting PCA in six dimensions with `good_data` to `pca`.\n - Applying a PCA transformation of `log_samples` using `pca.transform`, and assigning the results to `pca_samples`.","bcc064e3":"### Feature Scaling\nIf data is not normally distributed, especially if the mean and median vary significantly (indicating a large skew), it is most [often appropriate](http:\/\/econbrowser.com\/archives\/2014\/02\/use-of-logarithms-in-economics) to apply a non-linear scaling \u2014 particularly for financial data. One way to achieve this scaling is by using a [Box-Cox test](http:\/\/scipy.github.io\/devdocs\/generated\/scipy.stats.boxcox.html), which calculates the best power transformation of the data that reduces skewness. A simpler approach which can work in most cases would be applying the natural logarithm.\n\nThe code block below, shows the following:\n - Assigning a copy of the data to `log_data` after applying logarithmic scaling. Use the `np.log` function for this.\n - Assigning a copy of the sample data to `log_samples` after applying logarithmic scaling. Again, use `np.log`.","3de10c15":"### Cluster Visualization\nOnce we've chosen the optimal number of clusters for our clustering algorithm using the scoring metric above, we can now visualize the results by executing the code block below. Note that, for experimentation purposes, we are welcome to adjust the number of clusters for our clustering algorithm to see various visualizations. The final visualization provided should, however, correspond with the optimal number of clusters. ","5651ed30":"## Clustering\n\nIn this section, we will choose to use either a K-Means clustering algorithm or a Gaussian Mixture Model clustering algorithm to identify the various customer segments hidden in the data. we will then recover specific data points from the clusters to understand their significance by transforming them back into their original dimension and scale. ","570eacaf":"# Applying Unsupervised Learning\n# In Customer Market Segmentation\n## By Yosry Negm\n\n<br><hr><br>\nIn this project, I will analyze a dataset containing data on various customers' annual spending amounts (reported in *monetary units*) of diverse product categories for internal structure. One goal of this project is to best describe the variation in the different types of customers that a wholesale distributor interacts with. Doing so would equip the distributor with insight into how to best structure their delivery service to meet the needs of each customer.\n\nThe dataset for this project can be found on the [UCI Machine Learning Repository](https:\/\/archive.ics.uci.edu\/ml\/datasets\/Wholesale+customers). For the purposes of this project, the features `'Channel'` and `'Region'` will be excluded in the analysis \u2014 with focus instead on the six product categories recorded for customers.\n\nThe code below loads the wholesale customers dataset, along with a few of the necessary Python libraries required for this project.","ccbc88be":"## Data Preprocessing\nIn this section, we will preprocess the data to create a better representation of customers by performing a scaling on the data and detecting (and optionally removing) outliers. Preprocessing data is often times a critical step in assuring that results we obtain from our analysis are significant and meaningful.","42a5becc":"### Feature Relevance\nOne interesting thought to consider is if one (or more) of the six product categories is actually relevant for understanding customer purchasing. That is to say, is it possible to determine whether customers purchasing some amount of one category of products will necessarily purchase some proportional amount of another category of products? We can make this determination quite easily by training a supervised regression learner on a subset of the data with one feature removed, and then score how well that model can predict the removed feature.\n\nIn the code block below, we will need to implement the following:\n - Assign `new_data` a copy of the data by removing a feature of your choice using the `DataFrame.drop` function.\n - Use `sklearn.cross_validation.train_test_split` to split the dataset into training and testing sets.\n   - Use the removed feature as your target label. Set a `test_size` of `0.25` and set a `random_state`.\n - Import a decision tree regressor, set a `random_state`, and fit the learner to the training data.\n - Report the prediction score of the testing set using the regressor's `score` function.","f64bd51f":"### Data Recovery\nEach cluster present in the visualization above has a central point. These centers (or means) are not specifically data points from the data, but rather the *averages* of all the data points predicted in the respective clusters. For the problem of creating customer segments, a cluster's center point corresponds to *the average customer of that segment*. Since the data is currently reduced in dimension and scaled by a logarithm, we can recover the representative customer spending from these data points by applying the inverse transformations.\n\nIn the code block below, we will implement the following:\n - Applying the inverse transform to `centers` using `pca.inverse_transform` and assigning the new centers to `log_centers`.\n - Applying the inverse function of `np.log` to `log_centers` using `np.exp` and assigning the true centers to `true_centers`.","3b785485":"The wolesale distributer can label the new customers as follows:-\n- First running an unsupervised clustering approach, such as GMM, to setup clusters.\n- Use this as a new feature - which cluster they are in. We can call this feature 'Customer Segment', and they could be assigned abritrary enumerated values e.g. 0 and 1 for our work here.\n- Then create new data points for each new customer, with all of their spending estimates.\n- Then use a Supervised learning technique, for example a Support Vector Machine (which does very well to seperate classified clusters) with a target variable of 'Customer Segment'.\n- Standard Supervised Learning optimizations could be used to tune the model - boosting, cross-validation etc.","6427914b":"By inspecting the above result of the selected three customers we could analyze the data as follows :-\n\n## First selected customer (No. 0 index 138):-\n- <b>Fresh:<\/b> <u>Slightly<\/u> above the average (<font color='green'><b> + <\/b><\/font>)\n- <b>Milk:<\/b> <u>Slightly<\/u> below the average (<font color='red'><b> - <\/b><\/font>)\n- <b>Grocery:<\/b> <u>Notably<\/u> above the average (<font color='green'><b> + + <\/b><\/font>) \n- <b>Frozen:<\/b> <font color='red'><b>Little<\/b><\/font>\n- <b>Detergents Papers:<\/b> <u>Notably<\/u> below the average (<font color='red'><b> - - <\/b><\/font>) \n- <b>Delicatessen:<\/b> <u>Notably<\/u> above the average (<font color='green'><b> + + <\/b><\/font>) <br>\nas we notice from the above look at the first selected customer total purchase cost breakdown ,it looks like that higher than the average goes in purchasing fresh foods ,grocery items and delicatessen so, we have items like vegtables,fruit ,meat .. etc. and it also gives the indication that the food is prepared freshly.Hence it suggests that this estibleshment may be a<b><font color='blue'> Resturant<\/font><\/b>.\n## Second selected customer (No. 1 index 209):-\n- <b>Fresh:<\/b> <u>Notably<\/u> below the average (<font color='red'><b> - - <\/b><\/font>)\n- <b>Milk:<\/b> <u>Notably<\/u> above the average (<font color='green'><b> + + <\/b><\/font>)\n- <b>Grocery:<\/b> <u>Notably<\/u> above the average (<font color='green'><b> + + <\/b><\/font>) \n- <b>Frozen:<\/b> <font color='green'><b>Slightly moderate<\/b><\/font>\n- <b>Detergents Papers:<\/b> <u>Notably<\/u> above the average (<font color='green'><b> + + <\/b><\/font>) \n- <b>Delicatessen:<\/b> <u>Slightly<\/u> below the average (<font color='red'><b> - <\/b><\/font>) <br>\nas we notice from the above look at the second selected customer total purchase cost breakdown ,it looks like that higher than the average goes in purchasing grocery items,Milk and detergents papers so, it suggests that this estibleshment may be a<b><font color='blue'> Supermarket<\/font><\/b> , Grocery shop or small retailer.\n## Third selected customer (No. 2 index 377):-\n- <b>Fresh:<\/b> <u>Exteremely<\/u> above the average (<font color='green'><b> + + + <\/b><\/font>)\n- <b>Milk:<\/b> <u>Notably<\/u> below the average (<font color='red'><b> - - <\/b><\/font>)\n- <b>Grocery:<\/b> <u>Notably<\/u> below the average (<font color='red'><b> - - <\/b><\/font>) \n- <b>Frozen:<\/b> <font color='green'><b>More<\/b><\/font>\n- <b>Detergents Papers:<\/b> <u>Exteremely<\/u> below the average (<font color='red'><b> - - - <\/b><\/font>) \n- <b>Delicatessen:<\/b> <u>Slightly<\/u> near the average (<font color='red'><b> - <\/b><\/font>) <br>\nas we notice from the above look at the third selected customer total purchase cost breakdown ,it looks like that higher than the average goes exteremly in purchasing fresh foods such as vegtables,greens,fruits,....etc. Hence, it suggests that this estibleshment may be a<b><font color='blue'> Farmers's Market<\/font><\/b>.","7e9ec553":"### Observation\nAfter applying a natural logarithm scaling to the data, the distribution of each feature should appear much more normal. For any pairs of features we may have identified earlier as being correlated, observe here whether that correlation is still present (and whether it is now stronger or weaker than before).\n\nThe code below shows how the sample data has changed after having the natural logarithm applied to it.","15184f16":"By inspecting the above result of the selected three customers we could analyze the data as follows :-\n## First selected customer (No. 0 index 138):-\n- My previous Guess: Restaurant because of Fresh Food,meat ,Milk.\n- Model Prediction:  Restaurant .\n- This agrees with my previous prediction. \n\n## Second selected customer (No. 1 index 209):-\n- My previous Guess: Supermarket because of high usage of Groceries.\n- Model Prediction:  Supermarket .\n- This agrees with my previous prediction. \n\n## Third selected customer (No. 2 index 377):-\n- My previous Guess: Farmers's Market because of Large amount of usage  Fresh Food.\n- Model Prediction:  Restaurant .\n- I missed here the right guess because I confused of the extereme volume of using Fresh and when revising again it looks like a rstaurant not farmer's market. \n\nFrom the above result we could say that our model works fine for accompanying data. The model seems to take valid logical interpretations.","f169e8cb":"### Implementation: Creating Clusters\nDepending on the problem, the number of clusters that we expect to be in the data may already be known. When the number of clusters is not known *a priori*, there is no guarantee that a given number of clusters best segments the data, since it is unclear what structure exists in the data \u2014 if any. However, we can quantify the \"goodness\" of a clustering by calculating each data point's *silhouette coefficient*. The [silhouette coefficient](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.silhouette_score.html) for a data point measures how similar it is to its assigned cluster from -1 (dissimilar) to 1 (similar). Calculating the *mean* silhouette coefficient provides for a simple scoring method of a given clustering.\n\nIn the code block below, we will implement the following:\n - Fiting a clustering algorithm to the `reduced_data` and assigning it to `clusterer`.\n - Predicting the cluster for each data point in `reduced_data` using `clusterer.predict` and assigning them to `preds`.\n - Finding the cluster centers using the algorithm's respective attribute and assigning them to `centers`.\n - Predicting the cluster for each sample data point in `pca_samples` and assigning them `sample_preds`.\n - Importing `sklearn.metrics.silhouette_score` and calculate the silhouette score of `reduced_data` against `preds`.\n   - Assigning the silhouette score to `score` and print the result.","e523caa8":"## Clusters that has the best silhouette score:-\nthe best silhouette score is achieved when using only 2 clusters.\n- For 2 Clusters, Silhouette score = 0.443 ( <b><font color='green'>Best score <\/font><\/b>)\n- For 3 Clusters, Silhouette score = 0.357\n- For 4 Clusters, Silhouette score = 0.292\n- For 5 Clusters, Silhouette score = 0.266\n- and so on.","034cfecd":"In this final section, we will investigate ways that we can make use of the clustered data. First, we will consider how the different groups of customers, the ***customer segments***, may be affected differently by a specific delivery scheme. Next, we will consider how giving a label to each customer (which *segment* that customer belongs to) can provide for additional features about the customer data. Finally, we will compare the ***customer segments*** to a hidden variable present in the data, to see whether the clustering identified certain relationships.","71529037":"## Conclusion","56b73c7e":"From the above figure we note that each component contributes in customer's spending habits as follows :- \n- The First Two principal components shows up 72.5 % of the variance in the data ( 49.9 + 22.6 ).\n- The First Four principal components shows up 92.8 % of the variance in the data ( 49.9 + 22.6 + 10.5 + 9.8 ).\n\n- we also note that the  first PC is wide variety overall the features and most prominent.It may represent Detergents Paper ,it looks like giving information gain to Milk, Grocery and Delicatassen in some how.But it perform worsely to predict Fresh and Frozen and another component is needed.and this may serve big supermarkets category.\n- We also note that second component works highly for Fresh and Frozen and supplements Delicatessen,However, It contributes with small gain for Milk ,Grocery and Detergents Paper.and this may serve hotels,resturants category.\n- For the third component it works well for Fresh and Detergents Paper but less for the remaining features.It serves for small shops,groceries and retailers.\n- The Fourth Component acts high for Frozen Detergents Paper but less for the rest.It may serve for big suppliers such as frozen food market suppliers.\n","c82038d0":"### Observation\n\nOnce we have the original feature projections (in red), it is easier to interpret the relative position of each data point in the scatterplot. For instance, a point the lower right corner of the figure will likely correspond to a customer that spends a lot on `'Milk'`, `'Grocery'` and `'Detergents_Paper'`, but not so much on the other product categories. \n\nFrom the biplot, which of the original features are most strongly correlated with the first component? What about those that are associated with the second component? Do these observations agree with the pca_results plot we obtained earlier?","ded8b9cd":"Companies will often run [A\/B tests](https:\/\/en.wikipedia.org\/wiki\/A\/B_testing) when making small changes to their products or services to determine whether making that change will affect its customers positively or negatively. The wholesale distributor is considering changing its delivery service from currently 5 days a week to 3 days a week. However, the distributor will only make this change in delivery service for customers that react positively. \n\n* So if we want to know How can the wholesale distributor use the customer segments to determine which customers, if any, would react positively to the change in delivery service?*\n\nCan we assume the change affects all customers equally? How can we determine which group of customers it affects the most?","c76c5b87":"### Visualize Feature Distributions\nTo get a better understanding of the dataset, we can construct a scatter matrix of each of the six product features present in the data. If we found that the feature you attempted to predict above is relevant for identifying a specific customer, then the scatter matrix below may not show any correlation between that feature and the others. Conversely, if we believe that feature is not relevant for identifying a specific customer, the scatter matrix might show a correlation between that feature and another feature in the data. The code block below to produce a scatter matrix.","a1ee1d0e":"* Considering the total purchase cost of each product category for the representative data points above, and referencing the statistical description of the dataset at the beginning of this project(specifically looking at the mean values for the various feature points). the set of establishments could each of the customer segments represent could be found as follows\n\n**Note:** A customer who is assigned to `'Cluster X'` should best identify with the establishments represented by the feature set of `'Segment X'`. Think about what each segment represents in terms their values for the feature points chosen. Reference these values with the mean values to get some perspective into what kind of establishment they represent.","9fd602eb":"## Advantages of K-means clustering algorithm;-\n- Simple, easy to implement. \n- Has fewer parameters,so it is much faster.\n- Easy to interpret the clustering results.\n- Efficient in terms of computational cost.\n- Suited for situations of large data,Also where clusters are easily seperable and non-uniform.\n\n## Advantages of GMM algorithm;-\n- More flexible in terms of cluster covariance.\n- Data points do not necessarilly have to be assigned rigidly.\n- Accommodates mixed membership\n- Data points with lower probability could be assigned to multiple clusters at once.\n- Able to assign non-spherical clusters.\n- Can be used to predict probabilities of events rather than rigid features.\n\nFrom the above scatter plot,we could see that  the data points appears to be some how uniform. many data points don't clearly belong to one particular cluster or another, so the best suggestion for our model is to use the<b><font color='green'>  Gaussian Mixture Model <\/font><\/b>algorithm.","3c6ed852":"By examining the above scatter matrix and the constructed heat map and pair plot for all of the features involved. We may get some clear insights over the underlying dataset as follows:-\n- Detergents Paper and Grocery are strongly correlated linearly.\n- Detergents Paper and Milk also,correlated linearly but in less degree.\n- Grocery and Milk are in linear correlation with similar degree.\nfrom the above clearification we could find that<b><font color='green'> Detergents Paper<\/font><\/b> is less contributing to expressing the figure of customer's spending habits as per accompanied data under investigation<b><font color='green'><u> as I cocluded before<\/u><\/font><\/b> since it is notable that this feature is correlated to milk and grocery and therefore it will not give more information gain if it used.\n- the data appear <b><font color='red'>not to have a normal distribution<\/font><\/b> but it looks like <u><b>skewed towards the origin<\/b><\/u> with <b><font color='green'>few outliers points<\/font><\/b> and in general it tends to be linear.","880cf786":"# Heat map and Pair plot","b454eb55":"If we ask questions like :\n\n* For each sample point, which customer segment from* **Question 8** *best represents it? \n* Are the predictions for each sample point consistent with this?*\n\nThe code block below will find which cluster each sample point is predicted to be.","eafb8069":"Considering the total purchase cost of each product category and the statistical description of the dataset above for our sample customers we may ask the questions :  \n\n* What kind of establishment (customer) could each of the three samples We've chosen represent?\n\nThinking of  Examples of establishments include places like markets, cafes, delis, wholesale retailers, among many others. We can use the mean values for reference to compare your samples with. The mean values are as follows:\n\n* Fresh: 12000.2977\n* Milk: 5796.2\n* Grocery: 3071.9\n* Detergents_paper: 2881.4\n* Delicatessen: 1524.8\n\nKnowing this, how do our samples compare? Does that help in driving our insight into what kind of establishments they might be? ","55ea0019":"### Selecting Samples\nTo get a better understanding of the customers and how their data will transform through the analysis, it would be best to select a few sample data points and explore them in more detail. In the code block below, I will add **three** indices of my choice to the `indices` list which will represent the customers to track. It is suggested to try different sets of samples until we obtain customers that vary significantly from one another.","2ca705ae":"Additional structure is derived from originally unlabeled data when using clustering techniques. Since each customer has a ***customer segment*** it best identifies with (depending on the clustering algorithm applied), we can consider *'customer segment'* as an **engineered feature** for the data. Assume the wholesale distributor recently acquired ten new customers and each provided estimates for anticipated annual spending of each product category. Knowing these estimates, the wholesale distributor wants to classify each new customer to a ***customer segment*** to determine the most appropriate delivery service.  \n* Also, if we asked How can the wholesale distributor label the new customers using only their estimated product spending and the **customer segment** data?\n\nA supervised learner could be used to train on the original customers. What would be the target variable?","1908052a":"Our Model suggested  two main customer categories:-\n- Cluster 0 : restaurants\/Hotels \/cafes ( Utilzes large amounts of fresh food ).\n- Cluster 1 : supermarkets \/ bulk distributors  ( Utilzes many of different items ).\nSo, It looks like that customers from<font color='red'> Cluster 0<\/font> who serve lots of fresh food are going to want<font color='red'>Morening  5-days a week delivery method<\/font> in order to keep food as fresh as possible. \nbut<font color='green'> Cluster 1<\/font> could be more <b>flexible <\/b>- they buy a more wide variety of perishable and non-perishable goods so do not necessarilly need a daily delivery and could be <font color='green'>evening 3 days a week delivery method<\/font>.hence, the Company could run A\/B tests and generalize. By picking a subset customers from each Cluster, they can evaluate feedback seperately. It could be established whether changing the delivery service is critical to each segment, and whether customers are happy with the change.If a trend is found in a particular cluster, it allows a business to make educated and targeted decisions that would benefit their customers going forward depending on their profile. This is as opposed to which would generalize the entire customer-base.","b7ba8d0a":"from the above illustrations we could conclude that:-\n- <u>Cluster 0 (Segment 0)<\/u>:\n It looks like representing restaurants or hotels serving fresh food due to the strong weight upon the Fresh category. however, the bulk lies below the overall population average, it is matches my previous prediction for what a Restaurant might looks like in the Data Explotation section.\n- <u>Cluster1 (Segment 1)<\/u>: has predominant quantities of Grocery items and Milk . The Milk and Grocery items in this cluster exceed the overall average observed in the Data Exploration section, which suggests the are bulk distributors or large resellers such as supermarkets or retailers.","5a33703a":"## Silhouette Scores of the Clusters :-\n\nThe silhouette score for several cluster numbers I tried is shown in the following table below :-","2562ce47":"## Feature Transformation\nIn this section we will use principal component analysis (PCA) to draw conclusions about the underlying structure of the wholesale customer data. Since using PCA on a dataset calculates the dimensions which best maximize variance, we will find which compound combinations of features best describe customers.","1e10d4fc":"We could think as follows:\n- Actual data seems to match very strongly our predicted clusters. It shows that the GMM clustering was successfully able to setup the main links perfectly. \n- Actual distribution has a less well defined seperation between clusters, but it can be stated with considerable confidence that data points with a very positive 1st PC (4<) and 2nd PC (2<) are most certainly a Retailer\/supermarkets . Data points with a very negative 1st PC (<-2) and 2nd PC (<-1) are resturants,cafes or hotels.\n- Yes, they are almost exactly the guesses I made regarding their classification - Cluster 0 I thought to be Restaurants and Cluster 1 being Supermarkets with little variation due to thinking about lots of Fresh.","04559f4c":"If we asked questions like :\n* How well does the clustering algorithm and number of clusters we've chosen compare to this underlying distribution of Hotel\/Restaurant\/Cafe customers to Retailer customers? \n* Are there customer segments that would be classified as purely 'Retailers' or 'Hotels\/Restaurants\/Cafes' by this distribution? \n* Would we consider these classifications as consistent with your previous definition of the customer segments?","a40e6022":"### Outlier Detection\nDetecting outliers in the data is extremely important in the data preprocessing step of any analysis. The presence of outliers can often skew results which take into consideration these data points. There are many \"rules of thumb\" for what constitutes an outlier in a dataset. Here, we will use [Tukey's Method for identfying outliers](http:\/\/datapigtechnologies.com\/blog\/index.php\/highlighting-outliers-in-your-data-with-the-tukey-method\/): An *outlier step* is calculated as 1.5 times the interquartile range (IQR). A data point with a feature that is beyond an outlier step outside of the IQR for that feature is considered abnormal.\n\nIn the code block below, we will implement the following:\n - Assigning the value of the 25th percentile for the given feature to `Q1`. Use `np.percentile` for this.\n - Assigning the value of the 75th percentile for the given feature to `Q3`. Again, use `np.percentile`.\n - Assigning the calculation of an outlier step for the given feature to `step`.\n - Optionally removing data points from the dataset by adding indices to the `outliers` list.\n\n**NOTE:** If we choose to remove any outliers, we should ensure that the sample data does not contain any of these points!  \nOnce we have performed this implementation, the dataset will be stored in the variable `good_data`.","4831996b":"### Dimensionality Reduction\nWhen using principal component analysis, one of the main goals is to reduce the dimensionality of the data \u2014 in effect, reducing the complexity of the problem. Dimensionality reduction comes at a cost: Fewer dimensions used implies less of the total variance in the data is being explained. Because of this, the *cumulative explained variance ratio* is extremely important for knowing how many dimensions are necessary for the problem. Additionally, if a signifiant amount of variance is explained by only two or three dimensions, the reduced data can be visualized afterwards.\n\nIn the code block below, we will implement the following:\n - Assigning the results of fitting PCA in two dimensions with `good_data` to `pca`.\n - Applying a PCA transformation of `good_data` using `pca.transform`, and assigning the results to `reduced_data`.\n - Applying a PCA transformation of `log_samples` using `pca.transform`, and assigning the results to `pca_samples`.","91df16e9":"## Data Exploration\nIn this section, I will begin exploring the data through visualizations and code to understand how each feature is related to the others. we will observe a statistical description of the dataset, considering the relevance of each feature, and selecting a few sample data points from the dataset which we will track through this project.\n\nThe code below is to observe a statistical description of the dataset. Note that the dataset is composed of six important product categories: **'Fresh'**, **'Milk'**, **'Grocery'**, **'Frozen'**, **'Detergents_Paper'**, and **'Delicatessen'**. Consider what each category represents in terms of products you could purchase.","aa976140":"Based on the definition above, we may ask :\n* Are there any data points considered outliers for more than one feature ? \n* Should these data points be removed from the dataset? \n* If any data points were added to the `outliers` list to be removed, and why.\n\nIf we have datapoints that are outliers in multiple categories think about why that may be and if they warrant removal. Also note how k-means is affected by outliers and whether or not this plays a factor in our analysis of whether or not to remove them.","ede9f518":"### Visualizing Underlying Distributions\n\nAt the beginning of this project, it was discussed that the `'Channel'` and `'Region'` features would be excluded from the dataset so that the customer product categories were emphasized in the analysis. By reintroducing the `'Channel'` feature to the dataset, an interesting structure emerges when considering the same PCA dimensionality reduction applied earlier to the original dataset.\n\nThe code block below shows how each data point is labeled either `'HoReCa'` (Hotel\/Restaurant\/Cafe) or `'Retail'` the reduced space. In addition, we will find the sample points are circled in the plot, which will identify their labeling.","144b492f":"First we construct a heat map and Axes Plots as helpers as follows:-"}}