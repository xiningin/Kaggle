{"cell_type":{"97ce6bbd":"code","aa4118b5":"code","96d7a1f2":"code","aab4d586":"code","1bd46fb7":"code","e97f429d":"code","a4cbfc8c":"code","cc93b172":"code","a758eac6":"code","398a2cc1":"code","43bf3b31":"code","fe48272c":"code","0d5f2765":"code","9032b116":"code","bc5fb50d":"code","9d62f600":"code","dafad565":"code","d031e21f":"code","53285ac2":"code","b0d92e4a":"code","68bbbbca":"code","a6ec7d24":"code","5925090e":"code","549b7f52":"code","95233428":"code","c3417074":"code","ea8b7d47":"code","6fc4a56a":"code","e7a5e533":"code","4813c2c2":"code","9d53a6ba":"code","5cf855f2":"markdown"},"source":{"97ce6bbd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","aa4118b5":"train_data= pd.read_csv('..\/input\/train.csv')\ntest_data = pd.read_csv('..\/input\/test.csv')\ngender_submisson = pd.read_csv('..\/input\/gender_submission.csv')","96d7a1f2":"train_data.head()","aab4d586":"test_data.info()","1bd46fb7":"train_data.info()","e97f429d":"# Update sex column to numerical\n\ntrain_data['Sex'] = train_data['Sex'].apply(lambda x: 1 if x=='male' else 0)\ntrain_data.head()","a4cbfc8c":"test_data['Sex'] = test_data['Sex'].apply(lambda x: 1 if x=='male' else 0)","cc93b172":"#print(train_data['Age'].values)\nmean_age = train_data.Age.mean()\ntrain_data['Age'].fillna(value = mean_age, inplace = True)","a758eac6":"#print(train_data['Age'].values)\nmean_age = test_data.Age.mean()\ntest_data['Age'].fillna(value = mean_age, inplace = True)","398a2cc1":"print(train_data['Age'].values)","43bf3b31":"train_data.isnull().sum()","fe48272c":"# Select the desired features\ntrain_data = train_data[[ 'PassengerId', 'Survived', 'Pclass','Name','Sex', 'Age', 'SibSp', 'Parch', 'Ticket','Fare'] ]\n# Select the desired features\ntest_data = test_data[[ 'PassengerId', 'Pclass','Name','Sex', 'Age', 'SibSp', 'Parch', 'Ticket','Fare'] ]","0d5f2765":"train_data.head()","9032b116":"# Create a Upper column\ntrain_data['Upper'] = train_data['Pclass'].apply(lambda x: 1 if x==1 else 0)\n\n# Create a Middle column\ntrain_data['Middle'] = train_data['Pclass'].apply(lambda x: 1 if x==2 else 0)\n\n# Create a Lower column\ntrain_data['Lower'] = train_data['Pclass'].apply(lambda x: 1 if x==3 else 0)","bc5fb50d":"# Create a Upper column\ntest_data['Upper'] = test_data['Pclass'].apply(lambda x: 1 if x==1 else 0)\n\n# Create a Middle column\ntest_data['Middle'] = test_data['Pclass'].apply(lambda x: 1 if x==2 else 0)\n\n# Create a Lower column\ntest_data['Lower'] = test_data['Pclass'].apply(lambda x: 1 if x==3 else 0)","9d62f600":"train_data.isnull().sum()","dafad565":"# Select the desired features\nselected_features = ['Sex', 'Age', 'Upper', 'Middle', 'Lower', 'SibSp', 'Parch', 'Fare'] #\n\n# Select the desired features\nfeatures = train_data[selected_features]\nsurvival = train_data['Survived']","d031e21f":"features.head()","53285ac2":"# Perform train, test, split\n\ntrain_features, test_features, train_labels, test_labels = train_test_split(features, survival, train_size = 0.8)","b0d92e4a":"test_data1 = test_data[selected_features]\n","68bbbbca":"test_data1.isnull().sum()","a6ec7d24":"#print(train_data['Age'].values)\nmean_fare = test_data1.Fare.mean()\ntest_data1['Fare'].fillna(value = mean_fare, inplace = True)","5925090e":"# Scale the feature data so it has mean = 0 and standard deviation = 1\nnormalize = StandardScaler()\ntrain_features = normalize.fit_transform(train_features)\ntest_features = normalize.transform(test_features)\ntest_data1 =normalize.transform(test_data1) ","549b7f52":"# Create and train the model\nmodel = LogisticRegression()\nmodel.fit(train_features, train_labels)","95233428":"# Score the model on the train data\nprint(model.score(train_features, train_labels))","c3417074":"# Score the model on the test data\nprint(model.score(test_features, test_labels))","ea8b7d47":"print(list(zip(selected_features, model.coef_[0])))","6fc4a56a":"prdctions=model.predict_proba(test_data1)[:,1]\nprint(prdctions)","e7a5e533":"print(gender_submisson.PassengerId)","4813c2c2":"my_submission = pd.DataFrame({'PassengerId': gender_submisson.PassengerId, 'Survived': prdctions})","9d53a6ba":"my_submission = [('PassengerId', gender_submisson.PassengerId),('Survived', model.predict_proba(test_features))      ]\n\nmy_submission = pd.DataFrame(my_submission)\nmy_submission.to_csv('my_submission.csv')\n","5cf855f2":"There are null values in Age,cabin,Embarked. Lets replace null values in Age with mean, Embarked with Mean and remove cabin"}}