{"cell_type":{"a9531336":"code","03f7d8bb":"code","06d3cec4":"code","5cdf1a4e":"code","c9a96624":"code","b09e031a":"code","6d84e752":"code","c03aa4b1":"code","0b6bc525":"code","7fbf0669":"code","c6b8dcc8":"code","06f17104":"code","df3714ab":"code","6c768696":"code","b645b9ae":"code","50af918c":"code","504e66a6":"code","68c07390":"code","268d3cd3":"code","a9513b64":"code","13a50fd6":"code","6db3d170":"code","8e7ba66b":"code","717837f1":"code","85c5e25d":"code","5ba54401":"code","4b0b8c39":"code","1fc0da16":"code","ea7410ac":"code","3628edad":"code","e1a6bca5":"markdown","d24984c2":"markdown","123875d9":"markdown","593b4728":"markdown","e8f1154d":"markdown","756dbc77":"markdown","7ef7a069":"markdown","6aac6726":"markdown","23cccef4":"markdown","f16a6bd0":"markdown","140d86f4":"markdown","33e6a25f":"markdown","43b57c3d":"markdown","2c7282d1":"markdown","4e42df25":"markdown","0203010e":"markdown"},"source":{"a9531336":"# general\nimport pandas as pd \nimport os\nimport numpy as np\nimport warnings \n\n# plotting \nimport matplotlib.pyplot as plt \nimport seaborn as sns \nplt.style.use('Solarize_Light2')\n\n#Modelling\nfrom sklearn.linear_model import Lasso,Ridge\nfrom sklearn.preprocessing import PolynomialFeatures as PF \nfrom sklearn.metrics import mean_squared_error as MSE\nfrom sklearn.metrics import mean_absolute_error as MAE\nfrom sklearn.model_selection import cross_validate\n\n\nwarnings.filterwarnings('ignore')","03f7d8bb":"def to_datetime(df,date_col,frmt = None):\n    '''convert a date column from dataframe to datetime object'''\n    \n    df[date_col] = pd.to_datetime(df[date_col],format = frmt)\n    \n    \n    # base year as 2020, 1 if year == 2021 :\n    y = df[date_col].dt.year - 2020\n    \n    # add a week number (the second term if year == 2021)\n    df['week'] = df[date_col].dt.week + (y * 52)\n    \n    df.drop(date_col,axis=1,inplace=True)\n    \n    return df    \n\n\n# plotting functions\ndef plot_deaths(country_dfs:list,country_name:list,color_dict:dict):\n    ''' plot of weekly deaths'''\n   \n    fig,ax=plt.subplots(figsize = (12,7))\n    \n    plt.title('Cumulative Deaths (weekly)')\n    for i,country in enumerate(country_dfs):\n        \n        name = country_name[i]\n        \n        temp_df = country.groupby('week').agg({'deaths':'max'})\n        \n        x=temp_df.index\n        y=temp_df.deaths\/1000\n        \n        plt.plot(x,y,label = name, color = color_dict[name])\n        \n        \n    plt.xlabel('Weeks since Start')\n    plt.ylabel('Number of deaths reported (in Thousands)')\n    plt.legend(fontsize= 'large')\n    plt.savefig('cm_deaths.png')\n    plt.show()\n\n    \ndef plot_cases(country_dfs:list,country_name:list,color_dict:dict):\n    '''plot a scatter plot of weekly cases'''\n   \n    fig,ax=plt.subplots(figsize = (12,7))\n    \n    plt.title('Cumulative cases (weekly)')\n    for i,country in enumerate(country_dfs):\n        \n        name = country_name[i]\n        temp_df = country.groupby('week').agg({'cases':'max'})\n        \n        x=temp_df.index\n        y=temp_df['cases']\/1000000\n        \n        plt.plot(x,y,label = name, color = color_dict[name])\n        \n        \n    plt.xlabel('Weeks since Start')\n    plt.ylabel('Number of cases reported(in millions)')\n    plt.legend(fontsize= 'large')\n    plt.savefig('cm_cases.png')\n    plt.show()\n    \n    \ndef plot_active_cases(country_dfs:list,country_name:list,color_dict:dict):\n    '''plot a scatter plot of weekly active cases'''\n   \n    fig,ax=plt.subplots(figsize = (12,7))\n    \n    plt.title('Active cases (weekly)')\n    for i,country in enumerate(country_dfs):\n        \n        name = country_name[i]\n        temp_df = country.groupby('week').agg({'active':'max'})\n        \n        x=temp_df.index\n        y=temp_df['active']\/1000\n        \n        plt.plot(x,y,label = name, color = color_dict[name])\n        \n        \n    plt.xlabel('Weeks since Start')\n    plt.ylabel('Number of cases active (in Thousands)')\n    plt.legend(fontsize= 'large')\n    plt.savefig('active_cases.png')\n    plt.show()\n\n\ndef plot_recoveries(country_dfs:list,country_name:list,color_dict:dict):\n    '''plot a scatter plot of weekly cases'''\n   \n    fig,ax=plt.subplots(figsize = (12,7))\n    \n    plt.title('Cumulative Recoveries (weekly)')\n    for i,country in enumerate(country_dfs):\n        \n        name = country_name[i]\n        \n        temp_df = country.groupby('week').agg({'recovered':'sum'})\n        \n        x=temp_df.index\n        y=temp_df['recovered']\/10000\n        \n        plt.plot(x,y,label = name, color = color_dict[name])\n        \n        \n    plt.xlabel('Weeks since Start')\n    plt.ylabel('Number of recoveries reported (in Ten Thousands)')\n    plt.legend(fontsize= 'large')\n    plt.savefig('cm_recoveries.png')\n    plt.show()\n\n    \n    \ndef plot_cfr(country_dfs:list,country_name:list,color_dict:dict):\n    '''plot a scatter plot of weekly cases'''\n   \n    fig,ax=plt.subplots(figsize = (12,7))\n    \n    plt.title('Case Fatality rate (weekly)')\n    for i,country in enumerate(country_dfs):\n        \n        name = country_name[i]\n        \n        temp_df = country.groupby('week').agg({'cfr':'mean'})\n\n        plt.plot(temp_df.index,temp_df['cfr'],label = name, color = color_dict[name])\n        \n        \n    plt.xlabel('Weeks since Start')\n    plt.ylabel('Mean Case Fatality Rate')\n    plt.legend(fontsize= 'large')\n    plt.savefig('cfr.png')\n    plt.show()\n    \n\ndef plot_m_cfr(country_dfs:list,country_name:list,color_dict:dict):\n    '''plot a scatter plot of weekly cases'''\n   \n    fig,ax=plt.subplots(figsize = (12,7))\n    \n    plt.title('Marginal Case Fatality rate (weekly)')\n    \n    for i,country in enumerate(country_dfs):\n        \n        name = country_name[i]\n        \n        temp_df = country.groupby('week').agg({'marginal_cfr':'mean'})\n\n        plt.plot(temp_df.index,temp_df['marginal_cfr'],label = name, color = color_dict[name])\n        \n        \n    plt.xlabel('Weeks since Start')\n    plt.ylabel('Mean Marginal Case Fatality Rate')\n    plt.legend(fontsize= 'large')\n    plt.savefig('marg_cfr.png')\n    plt.show()","06d3cec4":"brazil_covid = pd.read_csv('..\/input\/corona-virus-brazil\/brazil_covid19_macro.csv')\nindia_covid = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\nitaly_covid = pd.read_csv('..\/input\/covid19-in-italy\/covid19_italy_region.csv')\ns_korea = pd.read_csv('..\/input\/coronavirusdataset\/TimeProvince.csv')\n\n\n# add datetime feat \nbrazil_covid = to_datetime(brazil_covid,'date')\n\nbrazil_covid.drop(['monitoring','country'],axis=1,inplace=True)","5cdf1a4e":"# for the year 2020\n\n# 1) saving the populations of each country (in Millions) in these variables \n# 2) saving per capita gdp in terms of purchasing power parity $ \n# 3) saving healthcare budget as % of gdp \n\nstats_dict={    'india':  {'population':1378.6, 'gdp_ppp': 6390 ,'healthcare': 1.5},\n                'italy':  {'population':59.6,  'gdp_ppp': 42270 ,'healthcare': 9.7} ,\n                'brazil': {'population':211.76,'gdp_ppp': 14550 ,'healthcare': 9.5},\n                's_korea':{'population':51.78, 'gdp_ppp': 42250 ,'healthcare': 8}\n           }","c9a96624":"# grouping the India data together by date \nindia_cov = india_covid.groupby('Date').agg({'Cured': 'sum',\n                                             'Confirmed': 'sum',\n                                             'Deaths': 'sum'})\n# reset index\nindia_cov.reset_index(inplace=True)\n\n# adding datetime feat as above \nindia_cov= to_datetime(india_cov,'Date')\n\n\n# grouping the Italy provincial data by date\nitaly_cov = italy_covid.groupby('Date').agg({'CurrentPositiveCases': 'sum',\n                                             'NewPositiveCases': 'sum' ,\n                                             'Deaths': 'sum',\n                                             'Recovered':'sum',\n                                             'TotalPositiveCases':'sum'})\n# reset index\nitaly_cov.reset_index(inplace=True)\n\n# adding datetime feat as above \nitaly_cov= to_datetime(italy_cov,'Date')\n\n\n# grouping south koreas data\nskorea_cov = s_korea.groupby('date').agg({'confirmed': 'sum',\n                                          'deceased'  :'sum',\n                                          'released'  :'sum'})\n# reset index\nskorea_cov.reset_index(inplace=True)\n\n# adding datetime feat as above \nskorea_cov= to_datetime(skorea_cov,'date')\n\n","b09e031a":"# changing the variable names to match all the data \nindia_rename = {'Cured':'recovered',\n                'Confirmed':'cases',\n                'Deaths':'deaths'}\n\nitaly_rename = {'CurrentPositiveCases':'active' ,\n               'NewPositiveCases' : 'new_cases',\n               'Deaths': 'deaths' ,\n               'TotalPositiveCases': 'cases',\n               'Recovered' : 'recovered'\n               }\n\nskorea_rename = {'confirmed' : 'cases',\n                'deceased'   : 'deaths',\n                'released'   : 'recovered'}\n\n\n# rename columns \n\nindia_cov.rename(columns = india_rename,inplace=True)\nitaly_cov.rename(columns = italy_rename,inplace=True)\nskorea_cov.rename(columns = skorea_rename,inplace=True)","6d84e752":"\ndef new_cases(df):\n    '''calc new cases'''\n    \n    #shift by 1 row\n    shift = df.cases.shift(1)\n    \n    df['new_cases'] = df.cases - shift\n    \n    return df\n\ndef new_deaths(df):\n    '''calc new deaths'''\n    \n    #shift by 1 row\n    shift = df.deaths.shift()\n    \n    df['new_deaths'] = df.deaths - shift\n    \n    return df\n\ndef new_recovered(df):\n    '''calc new recoveries'''\n    \n    #shift by 1 row\n    shift = df.recovered.shift()\n    \n    df['new_recovered'] =  df.recovered - shift\n    \n    return df\n\ndef active_cases(df):\n    '''calc active cases'''\n    \n    df['active'] = df.cases - df.recovered\n    \n    return df\n\ndef case_recv_ratio(df):\n    '''calc ratio of new cases to recoveries'''\n    \n    df['crr'] = df['new_cases'] \/ (df['new_recovered']+1)\n    \n    return df\n\ndef cfr(df):\n    '''case fatality rate\n    Case fatality rate = deaths\/ cases'''\n    \n    df['cfr'] = df['deaths'] \/ (df['cases'] +1)\n    \n    return df\n\ndef marginal_cfr(df):\n    '''marginal case fatality rate(CFR can vary due to change in testing rate)    \n    marginal_cfr = new_deaths\/active_cases'''\n    \n    df['marginal_cfr']= df['new_deaths'] \/ (df['active']+1)\n    \n    return df\n    \n\ndef transform(df,transforms):\n    '''perform each function in list transforms on given df and returns a new df'''\n    \n    df1= df.copy(deep=True)\n    \n    # evaluate and perform each function in transform list \n    for transf in transforms:\n\n        df1=eval(f'{transf}(df1)')\n\n    return df1\n\n","c03aa4b1":"# operations on brazil data\ntransforms_1=['new_cases','new_deaths','new_recovered','active_cases','cfr','marginal_cfr','case_recv_ratio']\n\nbrazil_modelling=transform(df=brazil_covid,\n                         transforms=transforms_1)\n\n\n# dropping nan rows\nbrazil_modelling.dropna(axis=0,inplace=True)\n# reset index\nbrazil_modelling.reset_index(drop=True,inplace=True)\n","0b6bc525":"# operations on India data \ntransf_2 = ['active_cases', 'new_cases', 'new_deaths', 'new_recovered','cfr','marginal_cfr','case_recv_ratio']\n\nindia_modelling = transform(df=india_cov,\n                         transforms=transf_2)\n\n# restricting data to 2020 for plotting\nindia_modelling2 = india_modelling[india_modelling['week']<53]\n# dropping nan rows\nindia_modelling.dropna(axis=0,inplace=True)\n#reset index\nindia_modelling.reset_index(drop=True,inplace=True)\n","7fbf0669":"# operations on Italy data set \ntransf_3 = ['new_deaths', 'new_recovered','cfr','marginal_cfr','case_recv_ratio']\nitaly_modelling = transform(df=italy_cov,\n                         transforms=transf_3)\n# dropping nan rows\nitaly_modelling.dropna(axis=0,inplace=True)\n#reset index\nitaly_modelling.reset_index(drop=True,inplace=True)","c6b8dcc8":"# operations on south korea \ntransf_4 = ['active_cases', 'new_cases', 'new_deaths', 'new_recovered','cfr','marginal_cfr','case_recv_ratio']\nskorea_modelling = transform(df=skorea_cov,\n                         transforms=transf_4)\n# dropping nan rows\nskorea_modelling.dropna(axis=0,inplace=True)\n#reset index\nskorea_modelling.reset_index(drop=True,inplace=True)","06f17104":"# list of data frame\ncountries_df = [india_modelling2,italy_modelling,skorea_modelling]\n\ncountries_name = ['India','Italy','South Korea']\n\n# color representation dict for plots\ncolor_dict = {'India': 'k',\n             'Italy' : 'b',\n             'South Korea': 'g'}\n","df3714ab":"# comparison some socio economic factors \n\nplt.subplots(1,3,figsize=(24,6))\n\n# Population \nplt.subplot(1,3,1)\nplt.bar(x=list(stats_dict.keys()),height=[k['population'] for i,k in stats_dict.items()])\nplt.title('Population')\nplt.xlabel('Countries')\nplt.ylabel('Population in million')\n\n#GDP PPP\nplt.subplot(1,3,2)\nplt.bar(x=list(stats_dict.keys()),height=[k['gdp_ppp'] for i,k in stats_dict.items()])\nplt.title('Per capita GDP in terms of PPP')\nplt.xlabel('Countries')\nplt.ylabel('Per capita income in $ (PPP)')\n\n# % of national income as healthcare budget\nplt.subplot(1,3,3)\nplt.bar(x=list(stats_dict.keys()),height=[k['healthcare'] for i,k in stats_dict.items()])\nplt.title('Healtcare Budget as % of GDP')\nplt.xlabel('Countries')\nplt.ylabel('% of GDP exp for healthcare')\n\nplt.tight_layout()\n\nplt.savefig('fig1.png')\nplt.show()","6c768696":"#plot of cumulative cases\nplot_cases(countries_df,countries_name,color_dict)","b645b9ae":"#plot of cumulative deaths\nplot_deaths(countries_df,countries_name,color_dict)","50af918c":"# plot of cumalative recoveries\nplot_recoveries(countries_df,countries_name,color_dict)","504e66a6":"# plot active cases \nplot_active_cases(countries_df,countries_name,color_dict)","68c07390":"# plot case fatality rate#plot of cumulative cases\nplot_cfr(countries_df,countries_name,color_dict)","268d3cd3":"#plot marginal Case Fatality Rate \nplot_m_cfr(countries_df,countries_name,color_dict)","a9513b64":"# features to be used as predictors \n\n\nfeatures = [col for col in india_modelling.columns if (('death' not in col) and ('cfr' not in col))]\n\n# India data \nX_in = india_modelling[features]\ny_in = india_modelling['new_deaths']\n\n# italy data \nX_it = italy_modelling[features]\ny_it = italy_modelling['new_deaths']\n\n# south korea \nX_sk = skorea_modelling[features]\ny_sk = skorea_modelling['new_deaths']\n\n# brazil data \nX_br = brazil_modelling[features]\ny_br = brazil_modelling['new_deaths']\n\n","13a50fd6":"def add_polynomial_feats(df):\n    '''add polynomial features to the given dataset for time series data'''\n    \n    pf = PF(include_bias=False,degree = 3)\n    \n    week_data = pd.DataFrame(pf.fit_transform(df[['week']]),\n                             columns = ['week','week^2','week^3'],\n                             index = df.index)\n    \n    df.drop('week',axis=1,inplace=True)\n    \n    df = df.merge(week_data,left_index=True,right_index=True)\n    \n    return df\n    \n    \n# adding polynomial time series features \nX_in = add_polynomial_feats(X_in)\nX_it = add_polynomial_feats(X_it)\nX_br = add_polynomial_feats(X_br)\nX_sk = add_polynomial_feats(X_sk)\n\n\n# check if all cols match\n\nassert set(X_in.columns) == set(X_br.columns) == set(X_sk.columns) == set(X_it.columns) , 'columns donot match'","6db3d170":"def find_best_alpha(X,y,alpha_list,cv=3):\n    '''find the best fitting value of alpha using cross validation'''\n    \n    val_mse = []\n    \n    for alp in alpha_list:\n        rid = Ridge(alpha= alp,max_iter=10000,normalize=True)\n    \n        scores = cross_validate(rid,X,y,cv=cv,\n                            return_train_score=False,scoring = 'neg_mean_squared_error')\n\n        \n        val_mse.append((-1 * scores['test_score'].mean()))\n        \n    \n    #min mse \n    min_val_mse = min(val_mse)\n    \n    # best alpha\n    best_alpha = alpha_list[np.argmin(val_mse)]\n    \n    print(f'best alpha value is {best_alpha} ')\n    \n    return best_alpha\n    ","8e7ba66b":"def Ridge_model(X, y,name,alpha = None):\n    '''return a fitted Lasso regression model on given data  '''\n    \n    if alpha is None:\n        alphas = np.linspace(0.001,1000,100)\n        best_alpha = find_best_alpha(X,y,alphas)\n        \n    model = Ridge(alpha = best_alpha, normalize=True)\n    \n    #not considering a test set due to small dataset size \n    model.fit(X,y)\n    \n    train_mse = MAE(y,model.predict(X))\n    \n    print(f'Train Mean absoulte error for {name} is {train_mse}')\n    \n    return model\n    ","717837f1":"# Lasso model on Indian data \n\nmodel_india = Ridge_model(X_in, y_in,'Indian Model',alpha = None)","85c5e25d":"# Lasso model on Italy data\nmodel_italy= Ridge_model(X_it, y_it,'Italian Model')","5ba54401":"# Lasso model on Korean data\nmodel_skorea= Ridge_model(X_sk, y_sk,'South Korean Model')","4b0b8c39":"in_pred = model_india.predict(X_br)\nprint(f'Mean absoulte error on Brazils new deaths predictions with Indian Model is {MAE(y_br,in_pred)}')","1fc0da16":"it_pred = model_italy.predict(X_br)\nprint(f'Mean absoulte error on Brazils new deaths predictions with Italy Model is {MAE(y_br,it_pred)}')","ea7410ac":"sk_pred = model_skorea.predict(X_br)\nprint(f'Mean absoulte error on Brazils new deaths predictions with South Korean Model is {MAE(y_br,sk_pred)}')","3628edad":"plt.figure(figsize=(16,8))\n\nplt.title('Model Predictions')\n\n#italy model\nplt.scatter(x= X_br.week,y= it_pred, label = \"Italy Model Predictions\",color='b',s = 4)\n#south korea model\nplt.scatter(x= X_br.week,y= sk_pred, label = \"S.Korea Model Predictions\",color='g',s =4)\n#India model\nplt.scatter(x= X_br.week,y= in_pred, label = \"India Model Predictions\",color='k',s = 4)\n\n\n# Actual data \nplt.scatter(x= X_br.week,y= y_br, label = \"Actual data (Brazil)\",color='r',s =4)\n\nplt.legend(loc='upper left',fontsize= 'large')\nplt.xlim((10,80))\nplt.xlabel('Weeks from case 0')\nplt.ylabel('New Deaths')\n\n#save \nplt.savefig('models_pred.png')\nplt.show()","e1a6bca5":"# Imports ","d24984c2":"\n# Aggregating the data by date  ","123875d9":"# Loading Data ","593b4728":"# Testing model performance on Brazil data ","e8f1154d":"# Link to the Presentation Video : [ https:\/\/drive.google.com\/file\/d\/1ESl1O6J5El6hmG-quLQ2QcRKPIDMPss1\/view?usp=sharing ]\n\n* **The presentation slides are uploaded with this notebook**","756dbc77":"# Notebook Description\n* **1) Aggregating the data for countries, and making the features similar for modelling purposes** \n* **2) Exploratory Data Analysis with the COVID-19 data from India, Brazil and South Korea and Italy**\n* **There are some assumptions made, they may not be necessarily completely valid for the full data. They are :**\n    * **India went into lockdown early.**\n    * **Italy went into lockdown late.**\n    * **South Korea followed a good contact tracing policy**\n* **3) Making covid 19 models for countries (other than brazil) and evaluating on brazil**\n    ","7ef7a069":"# -------Data Processed till here ------","6aac6726":"# Building New Features","23cccef4":"**Rename columns in datasets, so that they match across all the datasets**","f16a6bd0":"# Exploratory data Analysis","140d86f4":"# Training the models","33e6a25f":"\n# Modelling with Lasso Regression Model ","43b57c3d":"# Name of People who have worked on this project : Viraj Kadam","2c7282d1":"\n* **1) Using new deaths as target variable, to be able to predict new deaths**\n* **2) dropping features with 'deaths' and 'case fatality rate' in them.**","4e42df25":"# Helper Functions ","0203010e":"# Plot Model predictions "}}