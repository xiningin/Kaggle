{"cell_type":{"381a5724":"code","9f9fe1f3":"code","6e08a307":"code","729a14ff":"code","61634d41":"code","d21a71b7":"code","4f202a9a":"code","044cb766":"code","fec6c0e9":"code","ce80ef48":"code","02e10008":"code","da7c6f68":"code","94fc9d29":"code","22c84ceb":"code","88bbed12":"code","c19b963a":"code","71bb5bb7":"code","7b0410d3":"code","8f255c14":"code","90bc71b7":"code","304f6516":"code","e7e34ad9":"code","8faaf476":"code","feb397c0":"code","00caaa86":"code","cd299b03":"code","1e213155":"code","96057335":"code","e5bed55d":"code","954c6abf":"code","745ffc97":"code","068df6a9":"code","5ddd236f":"code","ff602f25":"code","1dafbad5":"code","d30ad633":"code","feced326":"code","e2f21834":"code","7c606d67":"code","e6adca39":"code","215fe518":"code","8356627d":"markdown","915e6053":"markdown","e9867baa":"markdown","6db9ec27":"markdown","b6d2e3ab":"markdown","55d97374":"markdown","c26ef2c2":"markdown","54963967":"markdown","e7b6e5f4":"markdown","6dbbafdb":"markdown","a8f98fbe":"markdown","e8192ff5":"markdown","d3a47a90":"markdown","8bdf743a":"markdown","6bd73fb5":"markdown","2bf55d2b":"markdown","f1829c7d":"markdown","30163142":"markdown","0e651cf4":"markdown","3340755a":"markdown","d365fc9b":"markdown","d5adb403":"markdown","cdbcdc95":"markdown","671757df":"markdown","9ccbfc18":"markdown"},"source":{"381a5724":"# importing required modules\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff","9f9fe1f3":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.svm import SVR","6e08a307":"# reading train,test data \n\ntrain = pd.read_csv('..\/input\/random-linear-regression\/train.csv')\n\ntest = pd.read_csv('..\/input\/random-linear-regression\/test.csv')","729a14ff":"# check for any nan values\ndef missing_zero_values_table(df):\n    mis_val = df.isnull().sum()\n    mis_val_percent = round(df.isnull().mean().mul(100),2)\n    mz_table = pd.concat([mis_val,mis_val_percent],axis=1)\n    mz_table = mz_table.rename(columns = {df.index.name:'col_name',0:'Missing Values',1:'% of Total Values'})\n    mz_table['Data_type']=df.dtypes\n    mz_table=mz_table.sort_values('% of Total Values',ascending=False)\n    print(\"Your selected dataframe has ** \"+str(df.shape[1])+\" ** columns and ** \"+str(df.shape[0])+\" ** Rows.\\n\"\n                 \"There are ** \"+str(mz_table[mz_table.iloc[:,1] != 0].shape[0])+\n                  \" ** columns that have missing values. \\n\")\n    return mz_table.reset_index()","61634d41":"missing_zero_values_table(train)","d21a71b7":"train[train.isnull().any(axis=1)]","4f202a9a":"missing_zero_values_table(test)","044cb766":"train.describe().T","fec6c0e9":"px.box(train,y='x',points='all')","ce80ef48":"imputer = SimpleImputer(strategy='median')\nimputer.fit(train)","02e10008":"imputer.statistics_","da7c6f68":"train.median().values","94fc9d29":"X = imputer.transform(train)\ntrain = pd.DataFrame(X,columns=train.columns,\n                     index=train.index)","22c84ceb":"train[train.x == train.x.max()]","88bbed12":"# index 213\ntrain.drop([213],axis=\"index\",inplace=True)","c19b963a":"# spliting into labels and features\n\nx_train = train.iloc[:,0].values.reshape(-1,1)\ny_train = train.iloc[:,1].values.reshape(-1,1)\n\nx_test = test.iloc[:,0].values.reshape(-1,1)\ny_test = test.iloc[:,1].values.reshape(-1,1)","71bb5bb7":"px.scatter(x=train.x,y=train.y,title='scatter plot for train data')","7b0410d3":"px.scatter(x=train.x,y=train.y,title='scatter plot for test data')","8f255c14":"# creating object for LinearRegression()\nlin_reg = LinearRegression()\n# fitting the linear model for train data\nlin_reg.fit(x_train,y_train)","90bc71b7":"# predicting test data on trained model\ndata_predictions = lin_reg.predict(x_train)\nlin_mse = mean_squared_error(y_train,data_predictions)\nlin_rmse = np.sqrt(lin_mse)\nlin_rmse","304f6516":"data_pred = []\ntrain_x = []\nfor i in data_predictions.tolist():\n    data_pred.append(i[0])\nfor i in x_train:\n    train_x.append(i[0])","e7e34ad9":"fig = px.scatter(train, x='x', y='y', opacity=0.65)\nfig.add_traces(go.Scatter(x=train_x, y=data_pred, name='Regression Fit',line=dict(width=5)))\nfig.show()","8faaf476":"scores = cross_val_score(lin_reg,x_train,y_train,\n                        scoring='neg_mean_squared_error',cv=10)\nlin_rmse_scores = np.sqrt(-scores)","feb397c0":"def display_scores(scores):\n    print('Scores : ',scores)\n    print('Mean : ',scores.mean())\n    print('Standard deviation : ',scores.std())","00caaa86":"display_scores(lin_rmse_scores)","cd299b03":"svm_reg = SVR()\nsvm_reg.fit(x_train,y_train)","1e213155":"data_predictions = svm_reg.predict(x_train)\nsvm_mse = mean_squared_error(y_train,data_predictions)\nsvm_rmse = np.sqrt(svm_mse)\nsvm_rmse","96057335":"param_grid = [{\n    'fit_intercept':[False,True],'normalize':[True,False],'copy_X':[False,True],\n    'n_jobs':[-10,-1,1,10]\n}]","e5bed55d":"lin_reg = LinearRegression()\nrnd_search = RandomizedSearchCV(lin_reg, param_grid, n_iter =10, cv=9,\n                           scoring='neg_mean_squared_error',\n                           return_train_score=True)","954c6abf":"rnd_search.fit(x_train,y_train)","745ffc97":"rnd_search.best_estimator_","068df6a9":"cvres = rnd_search.cv_results_\nfor mean_score,params in zip(cvres['mean_test_score'],cvres['params']):\n    print(np.sqrt(-mean_score),params)","5ddd236f":"rnd_search.fit(x_train,y_train)","ff602f25":"final_model = rnd_search.best_estimator_","1dafbad5":"final_predictions = final_model.predict(x_test)","d30ad633":"final_mse = mean_squared_error(y_test,final_predictions)\nfinal_rmse = np.sqrt(final_mse)\nfinal_rmse","feced326":"final_model.score(y_test,final_predictions)","e2f21834":"finaldata_pred = []\ntest_x = []\nfor i in final_predictions.tolist():\n    finaldata_pred.append(i[0])\nfor i in x_test:\n    test_x.append(i[0])","7c606d67":"group_labels = ['distplot']\nff.create_distplot([finaldata_pred], group_labels)","e6adca39":"fig = px.scatter(test, x='x', y='y')\nfig.add_traces(go.Scatter(x=test_x, y=finaldata_pred, name='Regression Fit',line=dict(width=5)))\nfig.show()","215fe518":"# accuracy score for model\n\nfinal_model.score(y_test,final_predictions)","8356627d":"# Fine-Tune Your Model","915e6053":"# libraries\nI'm going to be using the LinearRegression feature from scikit-learn because that's what this whole dataset is about!\n\nAnd of course, I imported pandas, numpy, and matplotlib to read the csv files and visualize the data.\n","e9867baa":"It's good (not overfit and not underfit)  \nbut must be checked it again","6db9ec27":"# Training and Evaluating on the Training Set","b6d2e3ab":"Ok,Good","55d97374":"creating linear regression object","c26ef2c2":"Is that snooping bias ?? (we see test dataset)    \nAnyway it's not really important this dataset it's for learning","54963967":"# **Introduction**\n\n### hello everyone, in this notebook iam trying to play with 'LinearRegression' model of scikit library with a basic data set.\n\n","e7b6e5f4":"## If you like, an upvote would be deeply appreciated. Thanks! :)","6dbbafdb":"* Drop rows containing missing values\n* Drop rows containing outlier values\n* Dividing labels and features","a8f98fbe":"**Linear Regression** is better than support vector machine","e8192ff5":"**Better Evaluation Using Cross-Validation**","d3a47a90":"# Evaluate Your System on the Test Set","8bdf743a":"**1 - fill missing value**","6bd73fb5":"**You can zoom in for a better view**    \nThe x = 3530.157369 is just outlier data and other it's ok","2bf55d2b":"# Machine learning\n\n\nMachine Learning is the science of getting computers to learn and act like humans do, and improve their learning over time in autonomous fashion, by feeding them data and information in the form of observations and real-world interactions. There are many algorithm for getting machines to learn, from using basic decision trees to clustering to layers of artificial neural networks depending on what task you\u2019re trying to accomplish and the type and amount of data that you have available.\n\n![](https:\/\/www.thermofisher.com\/blog\/connectedlab\/wp-content\/uploads\/sites\/14\/2020\/01\/istock-962219860-2-scaled.jpg)","f1829c7d":"# Take a Quick Look at the Data Structure","30163142":"# Prepare the Data for Machine Learning Algorithms","0e651cf4":"**dividing labels and features**","3340755a":"# regression equation\n![](https:\/\/miro.medium.com\/max\/788\/1*wdhvF5Vax_9FULipI4N6Eg.png)","d365fc9b":"# Discover and Visualize the Data to Gain Insights","d5adb403":"**2- remove outlier value**  \nSimple way to find index of outlier values and then remove it :)  \nNO IQR , NO ZSCORE ","cdbcdc95":"## Result :\n### The model predict the output with 98.83% accuracy.","671757df":"ok , Good","9ccbfc18":"# linear regression\n\nLinear Regression is a statistical method that allows us to summarize and study relationships between a target variable (also known as dependent variable) on one or more predictors (also known as independent variables).\nThe objective is to estimate and\/or predict the mean value of the dependent variable (continuous) on the basis of the known values of the independent variables. And try to minimize the error as much as possible.\n\nIn statistics, linear regression is a linear approach to modelling the relationship between a scalar response and one or more explanatory variables (also known as dependent and independent variables).\n![](https:\/\/miro.medium.com\/max\/524\/1*h9jL8DpeRc13E3LBGZ-heg.png)"}}