{"cell_type":{"86e62bd7":"code","a4a0df39":"code","60aa5f32":"code","2168d4c7":"code","2361d4af":"code","98982015":"code","522a0ea9":"code","46fbf226":"code","ac6ffe90":"code","0af482f1":"code","b123a949":"code","d9f66aab":"code","29af94a6":"code","5a94c6d1":"code","0697e486":"code","ad157b71":"code","b4ca6e67":"code","68303bd2":"code","3150138c":"code","6d593f05":"code","c2f685e5":"code","eea0438b":"code","fc089ee6":"code","78d4e5a1":"code","7862a71a":"code","199d290e":"code","5bc80ac8":"code","92c5fa5f":"code","5154dd3b":"code","0e42bf95":"code","36a74bcc":"code","5c242ee2":"code","abb0ab83":"code","ef7d9ef4":"code","bc06cd45":"code","cae34752":"code","332ce7be":"code","25477401":"code","c2d2c542":"markdown","1154c2a6":"markdown","86dfc29f":"markdown","52ce822a":"markdown","f7858902":"markdown","cbfefd75":"markdown","1e439242":"markdown","e3b5676f":"markdown"},"source":{"86e62bd7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a4a0df39":"future = pd.read_csv('..\/input\/restaurant-business-rankings-2020\/Future50.csv')\nfuture.head()","60aa5f32":"future['Location'] = future.Location.apply(lambda x: x.split(', '))\nfuture['State'] = future.Location.str.slice(1,9).sum()\nfuture['City'] = future.Location.str.slice(0,1).sum()\nfuture['State'] = future.State.apply(lambda x: x.replace(\" \", \"\"))\nfuture['City'] = future.City.apply(lambda x: x.replace(\" \", \"\"))\nfuture.drop('Location', axis=1, inplace=True)","2168d4c7":"future.head()","2361d4af":"plt.subplots(figsize=(25,5))\n\nplt.subplot(1,2,2)\nfuture['City'].value_counts().plot(kind='bar').set_title('Cities')\n\nplt.subplot(1,2,1)\nfuture['State'].value_counts().plot(kind='bar').set_title('States')\n\nplt.show()","98982015":"colors = []\n\nfor i in future.groupby('State').Sales.sum():\n  if i > future.groupby('State').Sales.sum().mean():\n    colors.append('lightgreen')\n  else:\n    colors.append('lightblue')\n    \ncolors2 = []\n\nfor i in future.groupby('City').Sales.sum():\n  if i > future.groupby('City').Sales.sum().mean():\n    colors2.append('lightgreen')\n  else:\n    colors2.append('lightblue')","522a0ea9":"plt.subplots(figsize=(25,5))\n\nplt.subplot(1,2,1)\nfuture.groupby('City').Sales.sum().plot(kind='bar', color=colors2, title='Absolute Sales by Cities')\nplt.axhline(future.groupby('City').Sales.sum().mean(), ls='--', color='red', label='Mean')\nplt.legend()\n\nplt.subplot(1,2,2)\nfuture.groupby('State').Sales.sum().plot(kind='bar', color=colors, title='Absolute Sales by State')\nplt.axhline(future.groupby('State').Sales.sum().mean(), ls='--', color='red', label='Mean')\nplt.legend()\n\nplt.show()","46fbf226":"colors3 = []\n\nfor i in future.groupby('State').Sales.mean():\n  if i > future.groupby('State').Sales.mean().mean():\n    colors3.append('lightgreen')\n  else:\n    colors3.append('lightblue')\n    \ncolors4 = []\n\nfor i in future.groupby('City').Sales.mean():\n  if i > future.groupby('City').Sales.mean().mean():\n    colors4.append('lightgreen')\n  else:\n    colors4.append('lightblue')","ac6ffe90":"plt.subplots(figsize=(25,5))\n\nplt.subplot(1,2,1)\nfuture.groupby('City').Sales.mean().plot(kind='bar', color=colors4, title='Mean Sales by Cities')\nplt.axhline(future.groupby('City').Sales.mean().mean(), ls='--', color='red', label='Mean')\nplt.legend()\n\nplt.subplot(1,2,2)\nfuture.groupby('State').Sales.mean().plot(kind='bar', color=colors3, title='Mean Sales by State')\nplt.axhline(future.groupby('State').Sales.mean().mean(), ls='--', color='red', label='Mean')\nplt.legend()\n\nplt.show()","0af482f1":"from sklearn.preprocessing import LabelEncoder\n\nencoder = LabelEncoder()\nfuture['Franchising'] = encoder.fit_transform(future['Franchising'])\n\nfuture['YOY_Sales'] = future['YOY_Sales'].apply(lambda x: x.replace(\"%\",\"\"))\nfuture['YOY_Sales'] = future['YOY_Sales'].astype('float')\nfuture['YOY_Units'] = future['YOY_Units'].apply(lambda x: x.replace(\"%\",\"\"))\nfuture['YOY_Units'] = future['YOY_Units'].astype('float')","b123a949":"future.head()","d9f66aab":"fig, axs = plt.subplots(4,figsize=(25,5))\n\nplt.subplot(1,2,1)\nfuture[future['State'] == 'N.Y.'].groupby('Restaurant').Sales.sum().plot(kind='bar').set_title('Sales by Restaurant - State of New York')\nplt.subplot(1,2,2)\nfuture[future['State'] == 'Calif.'].groupby('Restaurant').Sales.sum().plot(kind='bar').set_title('Sales by Restaurant - State of California')\n\nfig.show()","29af94a6":"fig, axs = plt.subplots(4,figsize=(25,5))\n\nplt.subplot(1,2,1)\nfuture[future['State'] == 'Ohio'].groupby('Restaurant').Sales.sum().plot(kind='bar').set_title('Sales by Restaurant - State of Ohio')\nplt.subplot(1,2,2)\nfuture[future['State'] == 'Texas'].groupby('Restaurant').Sales.sum().plot(kind='bar').set_title('Sales by Restaurant - State of California')\n\nfig.show()","5a94c6d1":"independence = pd.read_csv('..\/input\/restaurant-business-rankings-2020\/Independence100.csv')\nindependence.head()","0697e486":"independence.isnull().sum()","ad157b71":"colors5 = []\n\nfor i in independence.groupby(['City','State']).Sales.mean():\n  if i > independence.groupby(['City','State']).Sales.mean().mean():\n    colors5.append('lightgreen')\n  else:\n    colors5.append('lightblue')","b4ca6e67":"plt.subplots(figsize=(25,5))\nindependence.groupby(['City','State']).Sales.mean().plot(kind='bar', color=colors5, ylabel='Sales').set_title(\"Mean Sales\")\nplt.axhline(independence.groupby(['City','State']).Sales.mean().mean(), ls='--', color='red')\nplt.show()","68303bd2":"plt.subplots(figsize=(14,7))\n\nplt.subplot(1,2,1)\nsns.scatterplot(x=independence.Sales, y=independence.Rank)\nplt.axvline(independence.Sales.mean(), ls='--', color='red', label='Mean')\nplt.legend()\n\nplt.subplot(1,2,2)\nsns.scatterplot(x=independence.Sales, y=independence['Meals Served'])\n\nplt.show()","3150138c":"sns.heatmap(independence.corr(), annot=True)","6d593f05":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score","c2f685e5":"x = independence.drop(['Restaurant','Sales','City','State'], axis=1)\ny = independence['Sales']","eea0438b":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2, random_state=0)\n\nforest = RandomForestRegressor()\nforest.fit(x_train, y_train)\n\npredicao = forest.predict(x_test)\n\nprint('MAE:', mean_absolute_error(y_test, predicao))\nprint('MSE:', mean_squared_error(y_test, predicao))\nprint(\"R\u00b2:\", r2_score(y_test, predicao))","fc089ee6":"print('True values:', y_test.mean())\nprint(\"Prediction values:\", predicao.mean())\nprint('Mean difference:', y_test.mean() - predicao.mean())","78d4e5a1":"top = pd.read_csv('..\/input\/restaurant-business-rankings-2020\/Top250.csv')\ntop.head()","7862a71a":"top.shape","199d290e":"top.isnull().sum()","5bc80ac8":"top.drop(['Content','Headquarters','Restaurant'], axis=1, inplace=True)","92c5fa5f":"top['Segment_Category'].value_counts()","5154dd3b":"plt.subplots(figsize=(14,7))\n\nplt.subplot(1,2,1)\nsns.scatterplot(x=top['Sales'], y=top['Rank']).set_title('Sales')\nplt.axvline(top['Sales'].mean(), ls='--', color='red')\n\nplt.subplot(1,2,2)\nsns.scatterplot(x=top[top['Segment_Category'] == 'Varied Menu'].Sales, y=top[top['Segment_Category'] == 'Varied Menu'].Rank).set_title('Sales by Varied Menu Segment Category')\nplt.axvline(top[top['Segment_Category'] == 'Varied Menu'].Sales.mean(), ls='--', color='red')\n\nfig.show()","0e42bf95":"top['YOY_Sales'] = top['YOY_Sales'].apply(lambda x: x.replace('%', \"\"))\ntop['YOY_Units'] = top['YOY_Units'].apply(lambda x: x.replace(\"%\", \"\"))\n\ntop['YOY_Sales'] = top['YOY_Sales'].astype('float')\ntop['YOY_Units'] = top['YOY_Units'].astype('float')","36a74bcc":"top.head()","5c242ee2":"sns.heatmap(top.corr(), annot=True)","abb0ab83":"dummie = pd.get_dummies(top['Segment_Category'])\ntop.drop(\"Segment_Category\", axis=1, inplace=True)\ntop = pd.concat((top, dummie), axis=1)","ef7d9ef4":"top.head()","bc06cd45":"from sklearn.ensemble import RandomForestRegressor","cae34752":"x = top.drop('Sales', axis=1)\n\ny = top['Sales']","332ce7be":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)\n\nforest = RandomForestRegressor()\nforest.fit(x_train, y_train)\n\npredicao2 = forest.predict(x_test)\n\nprint(\"MSE:\", mean_squared_error(y_test, predicao2))\nprint(\"MAE:\", mean_absolute_error(y_test, predicao2))\nprint(\"R\u00b2:\", r2_score(y_test, predicao2))","25477401":"print('True value:', y_test.mean())\nprint('Prediction:', predicao2.mean())","c2d2c542":"# Top #","1154c2a6":"# Future #","86dfc29f":"### The first thing to do is separate city and state in two new variables ###","52ce822a":"## Now to create a machine learning model I will analyze the correlation between the variables ##","f7858902":"### To create the machine learning model to predict Sales I will use RandomForestRegressor ##","cbfefd75":"## Transforming the data to create new variables ##","1e439242":"# Independence #","e3b5676f":"## Now we can analyze these two variables ##"}}