{"cell_type":{"685c7d1e":"code","571cfbe5":"code","04180dc4":"code","dd08680f":"code","3b13a2f0":"code","b9e9ede6":"code","37497183":"code","3d18a0fa":"code","7ec62a60":"code","c67f27fe":"code","5f177d00":"code","d5238626":"code","070cde33":"code","e484de2c":"code","2c16984f":"code","cfb79fff":"code","c0d71cbe":"code","832353d7":"code","824e479f":"markdown","05c2a85a":"markdown","0f27f030":"markdown","03815033":"markdown","14df3142":"markdown","dae750e1":"markdown","d560fb27":"markdown","f72516e8":"markdown","c245de2b":"markdown","f65c76f0":"markdown"},"source":{"685c7d1e":"# SETUP. You don't need to worry for now about what this code does or how it works. If you're ever curious about the \n# code behind these exercises, it's available under an open source license here: https:\/\/github.com\/Kaggle\/learntools\/\nimport sys; sys.path.insert(0, '..\/input\/learntools\/pseudo_learntools')\nfrom learntools.python import binder; binder.bind(globals())\nfrom learntools.python.ex6 import *\nprint('Setup complete.')\n","571cfbe5":"a = \"\"\nlength =0\nq0.a.check()","04180dc4":"b = \"it's ok\"\nlength = 7\nq0.b.check()","dd08680f":"c = 'it\\'s ok'\nlength = 7\nq0.c.check()","3b13a2f0":"d = \"\"\"hey\"\"\"\nlength = 3\nq0.d.check()","b9e9ede6":"e = '\\n'\nlength = 0\nq0.e.check()","37497183":"def is_valid_zip(zip_code):\n    \"\"\"Returns whether the input string is a valid (5 digit) zip code\n    \"\"\"\n    if len(zip_code)==5 and zip_code.isdigit():\n        return True\n    else:\n        return False\n    pass\n\nq1.check()","3d18a0fa":"#q1.hint()\n#q1.solution()","7ec62a60":"def word_search(doc_list, keyword):\n    \"\"\"\n    Takes a list of documents (each document is a string) and a keyword. \n    Returns list of the index values into the original list for all documents \n    containing the keyword.\n\n    Example:\n    doc_list = [\"The Learn Python Challenge Casino.\", \"They bought a car\", \"Casinoville\"]\n    >>> word_search(doc_list, 'casino')\n    >>> [0]\n    \"\"\"\n\n    m=[]\n    k = keyword.lower()\n    for i in range(len(doc_list)):\n        if k in doc_list[i].lower():\n            split=doc_list[i].lower().split() \n            if k in split or k+\".\" in split  or k+\",\" in split: \n                        m.append(i) # if (keyword.lower() in split_string[j]) and not split_string[j].lstrip(keyword).isalnum: return l,m,n\n                        \n    return m\nq2.check()","c67f27fe":"#q2.hint()\n#q2.solution()","5f177d00":"def multi_word_search(doc_list, keywords):\n    \"\"\"\n    Takes list of documents (each document is a string) and a list of keywords.  \n    Returns a dictionary where each key is a keyword, and the value is a list of indices\n    (from doc_list) of the documents containing that keyword\n\n    >>> doc_list = [\"The Learn Python Challenge Casino.\", \"They bought a car and a casino\", \"Casinoville\"]\n    >>> keywords = ['casino', 'they']\n    >>> multi_word_search(doc_list, keywords)\n    {'casino': [0, 1], 'they': [1]}\n    \"\"\"\n    dict = {}\n    for j in range(len(keywords)):\n        dict[keywords[j]]=word_search(doc_list, keywords[j])\n    \n    return dict\n\nq3.check()","d5238626":"#q3.solution()","070cde33":"def diamond(height):\n    \"\"\"Return a string resembling a diamond of specified height (measured in lines).\n    height must be an even integer.\n    \"\"\"\n    dia = int(height\/2)\n    top=[]\n    bottom=[]\n\n    def left_lines(n):\n        l=[]\n        for i in range(n):\n            l.append(\"\/\")\n        return \"\".join(l)    \n                     \n    def right_lines(n):\n        l=[]\n        for i in range(n):\n            l.append(\"\\\\\")\n        return \"\".join(l)                                  \n    \n    for i in range(dia):\n        j= dia - (i)\n        top.append((left_lines(i+1)+right_lines(i+1)).center(height))\n        bottom.append((right_lines(j)+left_lines(j)).center(height))        \n                     \n    first = \"\\n\".join(top)\n    second = \"\\n\".join(bottom)                     \n\n    return (first+\"\\n\"+ second)\n\nq4.check()","e484de2c":"d4 = \"\"\" \/\\\\ \n\/\/\\\\\\\\\n\\\\\\\\\/\/\n \\\\\/ \"\"\"\nprint(d4)","2c16984f":"#q4.hint()\n#q4.solution()","cfb79fff":"def conditional_roulette_probs(history):\n    \"\"\"\n\n    Example: \n    conditional_roulette_probs([1, 3, 1, 5, 1])\n    > {1: {3: 0.5, 5: 0.5}, \n       3: {1: 1.0},\n       5: {1: 1.0}\n      }\n    \"\"\"\n    dic_1={}\n    dic_2={}\n    prob={}\n    for i in history:\n        l=[]\n        for j in range(len(history)-1):\n            if history[j]==i:\n                l.append(history[j+1])\n        dic_1[i]=l \n    \n    for i in history:\n        for x in dic_1[i]:\n            prob[x] = (dic_1[i].count(x))\/len(dic_1[i])\n        dic_2[i]= prob        \n        prob={}\n    \n    return dic_2\n\n\nq5.check()","c0d71cbe":"q5.solution()","832353d7":"help(str)","824e479f":"We've provided an example height-4 diamond below as a Python string. It may help to inspect it in the console.","05c2a85a":"If you have any questions or just want to chat about Python, check out the [forum](https:\/\/kaggle.com\/learn-forum).\n\nWant feedback on your code? To share it with others or ask for help, you'll need to make it public. Save a version of your notebook that shows your current work by hitting the \"Commit & Run\" button. Once your notebook is finished running, go to the Settings tab in the panel to the left (you may have to expand it by hitting the [<] button next to the \"Commit & Run\" button) and set the \"Visibility\" dropdown to \"Public\".\n\nTomorrow is the last day of the challenge, in which I try to cram in as many useful miscellaneous bits of Python as possible that haven't fit into any of the day's themes so far (imports, debugging, files, operator overloading... anyt other requests?).","0f27f030":"Welcome to the exercises for day 6 (to go along with the day 6 tutorial notebook on [strings and dictionaries](https:\/\/www.kaggle.com\/colinmorris\/learn-python-challenge-day-6))\n\nRun the setup code below before working on the questions (and run it again if you leave this notebook and come back later).","03815033":"## 3.\n\nNow the researcher wants to supply multiple keywords to search for. Complete the function below to help her.\n\n(You're encouraged to use the `word_search` function you just wrote when implementing this function. Reusing code in this way makes your programs more robust and readable - and it saves typing!)","14df3142":"## 1.\n\nThere is a saying that \"Data scientists spend 80% of their time cleaning data, and 20% of their time complaining about cleaning data.\" Let's see if you can write a function to help clean US zip code data. Given a string, it should return whether or not that string represents a valid zip code. For our purposes, a valid zip code is any string consisting of exactly 5 digits.\n\nHINT: `str` has a method that will be useful here. Use `help(str)` to review a list of string methods.","dae750e1":"## 2.\n\nA researcher has gathered thousands of news articles. But she wants to focus her attention on articles including a specific word. Complete the function below to help her filter her list of articles.\n\nYour function should meet the following criteria\n\n- Do not include documents where the keyword string shows up only as a part of a larger word. For example, if she were looking for the keyword \u201cclosed\u201d, you would not include the string \u201cenclosed.\u201d \n- She does not want you to distinguish upper case from lower case letters. So the phrase \u201cClosed the case.\u201d would be included when the keyword is \u201cclosed\u201d\n- Do not let periods or commas affect what is matched. \u201cIt is closed.\u201d would be included when the keyword is \u201cclosed\u201d. But you can assume there are no other types of punctuation.","d560fb27":"# Exercises","f72516e8":"## 5. <span title=\"Spicy\" style=\"color: coral\">\ud83c\udf36\ufe0f\ud83c\udf36\ufe0f<\/span>\n\nDice may not have any memory, but apparently the roulette wheel at the Learn Challenge Casino does. You\u2019ve received a tip-off that the wheel has some exploitable bias where the probability of landing on a given number changes depending on the number previously landed on. Analyze a list containing a history of roulette spins. \n\nReturn a dictionary where the keys are numbers on the roulette wheel, and the values are dictionaries mapping numbers on the wheel to probabilities, such that `d[n1][n2]` is an estimate of the probability that the next spin will land on n2, given that the previous spin landed on n1.","c245de2b":"## 0. \n\nLet's start with a string lightning round to warm up. What are the lengths of the strings below?\n\nFor each of the five strings below, predict what `len()` would return when passed that string. Use the variable `length` to record your answer, then run the cell to check whether you were right.","f65c76f0":"## 4. <span title=\"Spicy\" style=\"color: coral\">\ud83c\udf36\ufe0f\ud83c\udf36\ufe0f<\/span>\n\nDiamonds are beautiful, but they are just so expensive. Write a python program to create counterfeit ASCII diamonds such as the following:\n```\n    \/\\\n   \/\/\\\\\n  \/\/\/\\\\\\\n \/\/\/\/\\\\\\\\\n\/\/\/\/\/\\\\\\\\\\\n\\\\\\\\\\\/\/\/\/\/\n \\\\\\\\\/\/\/\/\n  \\\\\\\/\/\/\n   \\\\\/\/\n    \\\/\n```\n\nYour function should allow the caller to choose the size of the diamond (in terms of number of lines). The above diamond has a height of 10. Here's a 4-line diamond:\n\n```\n \/\\ \n\/\/\\\\\n\\\\\/\/\n \\\/ \n```\n\n(You can assume your function will only be called with even numbers)"}}