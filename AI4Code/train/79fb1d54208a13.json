{"cell_type":{"ba80d6e4":"code","06dabefa":"code","6e103264":"code","2b98f978":"code","ab540399":"code","fdd807da":"code","35bebad3":"code","3710e1c7":"code","73a907e6":"code","d1755c71":"code","2f957492":"code","82e43a22":"code","c4b44ef0":"code","1b5d59c4":"code","a1b1a122":"code","e4aece55":"code","6c68fce1":"code","f87e38c5":"code","2436b110":"code","49f3c669":"code","f8f2279d":"code","a8b08d2d":"code","f01771e1":"code","4dd5a9b3":"code","c6f386cc":"code","5d3464a3":"code","50012fc0":"code","a360f0c8":"code","526ec638":"code","c4533054":"code","cbb68265":"code","a652b694":"code","f89c6a9a":"code","054d5e1a":"code","6740393d":"code","017ba866":"code","07e54aac":"code","ce475ae4":"code","d03a0cb6":"code","ac039e83":"markdown","d2ab34c8":"markdown","07acf6b3":"markdown","13d1a5fc":"markdown","78931d3b":"markdown","650aa06f":"markdown","43c8b974":"markdown","542ece24":"markdown","fc7c96c5":"markdown","61b2128b":"markdown","be85f373":"markdown","8111fa2e":"markdown","8b974d02":"markdown","fa6513f9":"markdown","ac1bc0c9":"markdown","726a8d2f":"markdown","435390bb":"markdown","3b9465cd":"markdown","1b76152a":"markdown","8e1981fb":"markdown","cf1d7113":"markdown","142895c9":"markdown","5d73486e":"markdown","1210d4be":"markdown","66a62ba6":"markdown","bd390cfe":"markdown","54f0a01e":"markdown","b4627d01":"markdown","62f9b1ac":"markdown"},"source":{"ba80d6e4":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport cv2","06dabefa":"from keras.utils import to_categorical, Sequence\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, Activation, BatchNormalization,GlobalAveragePooling2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.applications import ResNet50, MobileNet\nfrom tensorflow.keras.applications import EfficientNetB3\nimport tensorflow as tf","6e103264":"import warnings\nwarnings.filterwarnings(\"ignore\")","2b98f978":"path = '\/kaggle\/input\/ranzcr-clip-catheter-line-classification\/'\nos.listdir(path)","ab540399":"train = pd.read_csv(path+'train.csv')\ntrain_anno = pd.read_csv(path+'train_annotations.csv')\nsamp_subm = pd.read_csv(path+'sample_submission.csv')","fdd807da":"def plot_example(data, type_):\n    fig, axs = plt.subplots(1, 5, figsize=(25, 12))\n    fig.subplots_adjust(hspace = .2, wspace=.2)\n    axs = axs.ravel()\n    temp = data[data[type_]==1]\n    for i in range(5):\n        idx = temp.index[i]\n        image_id = temp.loc[idx, 'StudyInstanceUID']\n        image_file = cv2.imread(''.join([path, 'train\/', image_id, '.jpg']))\n        image_file = cv2.cvtColor(image_file, cv2.COLOR_BGR2RGB)\n        axs[i].imshow(image_file)\n        axs[i].set_title(type_)\n        axs[i].set_xticklabels([])\n        axs[i].set_yticklabels([])","35bebad3":"print('number of train samples:', len(train.index))\nprint('numebr of test samples:', len(samp_subm.index))\nprint('number of train images:', len(os.listdir(path+'train\/')))\nprint('number of test images:', len(os.listdir(path+'test\/')))\nprint('number of unique patient ids:', len(train['PatientID'].unique()))","3710e1c7":"image_size = 222\nimage_channel = 3\nnum_classes = 11\nlabels = train[train.columns[1:-1]].columns.tolist()","73a907e6":"train[train.columns[1:-1]].sum()","d1755c71":"plt.bar(x=labels, height=np.sum(train[labels], axis=0))\nplt.grid()\nplt.xticks(rotation=90)\nplt.show()","2f957492":"plot_example(train, 'ETT - Abnormal')","82e43a22":"plot_example(train, 'ETT - Borderline')","c4b44ef0":"plot_example(train, 'ETT - Normal')","1b5d59c4":"plot_example(train, 'NGT - Abnormal')","a1b1a122":"plot_example(train, 'NGT - Borderline')","e4aece55":"plot_example(train, 'NGT - Incompletely Imaged')","6c68fce1":"plot_example(train, 'NGT - Normal')","f87e38c5":"plot_example(train, 'CVC - Abnormal')","2436b110":"plot_example(train, 'CVC - Borderline')","49f3c669":"plot_example(train, 'CVC - Normal')","f8f2279d":"plot_example(train, 'Swan Ganz Catheter Present')","a8b08d2d":"class_weight = dict(zip(range(num_classes), train[labels].sum().values\/len(train.index)))","f01771e1":"class DataGenerator(Sequence):\n    def __init__(self, path, data, batch_size,\n                 image_size, image_channel, num_classes):\n        self.path = path\n        self.list_IDs = data['StudyInstanceUID']\n        self.labels = data[data.columns[1:12]]\n        self.batch_size = batch_size\n        self.image_size = image_size\n        self.image_channel = image_channel\n        self.num_classes = num_classes\n        self.indexes = np.arange(len(self.list_IDs))\n        \n    def __len__(self):\n        l = int(len(self.list_IDs)\/self.batch_size)\n        if l*self.batch_size < len(self.list_IDs):\n            l += 1\n        return l\n        \n    \n    def __getitem__(self, index):\n        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n        list_IDs_temp = [self.list_IDs[k] for k in indexes]\n        X, y = self.__data_generation(list_IDs_temp)\n        return X, y\n\n    \n    def __data_generation(self, list_IDs_temp):\n        X = np.zeros((self.batch_size, self.image_size, self.image_size, self.image_channel))\n        y = np.zeros((self.batch_size, self.num_classes), dtype=int)\n        for i, ID in enumerate(list_IDs_temp):\n            data_file = cv2.imread(''.join([self.path, ID, '.jpg']))\n            image = cv2.resize(data_file, (self.image_size, self.image_size))\n            X[i, ] = image\/255.\n            y[i, ] = self.labels.iloc[i]\n        return X, y","4dd5a9b3":"#weights='..\/input\/models\/mobilenet_1_0_224_tf_no_top.h5'","c6f386cc":"#conv_base = MobileNet(include_top=False,\n#                     weights=weights,\n#                     input_shape=(image_size, image_size, image_channel))\n#conv_base.trainable = True","5d3464a3":"#model = Sequential()\n#model.add(conv_base)\n#model.add(GlobalAveragePooling2D())\n#model.add(Dense(1024, activation='relu'))\n#model.add(Dense(1024, activation='relu'))\n#model.add(Dense(512, activation='relu'))\n#model.add(Dense(num_classes, activation='sigmoid'))","50012fc0":"weights = '..\/input\/models\/efficientnetb3_notop.h5'","a360f0c8":"conv_base = EfficientNetB3(include_top=False,\n                          weights=weights,\n                          input_shape=(image_size, image_size, image_channel))\nconv_base.trainable = True","526ec638":"model = Sequential()\nmodel.add(conv_base)\nmodel.add(GlobalAveragePooling2D())\nmodel.add(Dense(num_classes, activation='sigmoid'))","c4533054":"metrics = [tf.keras.metrics.AUC(name='auc', multi_label=True)]\nmodel.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=metrics)","cbb68265":"model.summary()","a652b694":"epochs = 5\nbatch_size = 64","f89c6a9a":"train_gen = DataGenerator(path+'train\/', train, batch_size, image_size, image_channel, num_classes)","054d5e1a":"history = model.fit_generator(generator=train_gen,\n                              epochs = epochs,\n                              workers=4)","6740393d":"test_gen = DataGenerator(path+'test\/', samp_subm, batch_size, image_size, image_channel, num_classes)","017ba866":"predict = model.predict_generator(test_gen, verbose=1)","07e54aac":"output = pd.DataFrame(predict, columns = labels)\noutput.insert(0, 'StudyInstanceUID', samp_subm['StudyInstanceUID'])\noutput.dropna(inplace=True)","ce475ae4":"output.to_csv('submission.csv', index=False)","d03a0cb6":"plt.bar(x=labels, height=np.sum(output[labels], axis=0))\nplt.grid()\nplt.xticks(rotation=90)\nplt.show()","ac039e83":"## ETT - Normal","d2ab34c8":"# Write Output","07acf6b3":"## NGT - Abnormal","13d1a5fc":"# Parameters","78931d3b":"## NGT - Borderline","650aa06f":"# Data Generator\nWe define a data generator to laod the data on demand.","43c8b974":"The distribution of the labels is unblanced.","542ece24":"## ETT - Borderline","fc7c96c5":"# Libraries","61b2128b":"## Swan Ganz Catheter Present","be85f373":"## MobileNet","8111fa2e":"There are less patients as samples. So for some patients there is more than one image.","8b974d02":"## CVC - Normal","fa6513f9":"## ETT - Abnormal","ac1bc0c9":"## EfficientNet","726a8d2f":"## CVC - Abnormal","435390bb":"# Class Weights","3b9465cd":"# Train Model","1b76152a":"# Define Model","8e1981fb":"# Path","cf1d7113":"## NGT - Incompletely Imaged","142895c9":"# EDA","5d73486e":"## NGT - Normal","1210d4be":"## CVC - Borderline","66a62ba6":"# Functions\nWe define some helper functions.","bd390cfe":"# Load Data","54f0a01e":"# Predict Test Data","b4627d01":"# Overview","62f9b1ac":"# Intro\nWelcome to the [RANZCR CLiP - Catheter and Line Position Challenge](https:\/\/www.kaggle.com\/c\/ranzcr-clip-catheter-line-classification\/data).\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/23870\/logos\/header.png)\n\nIn this competition, we will detect the presence and position of catheters and lines on chest x-rays.\n\nThere are 11 tagets to predict:\n* ETT - Abnormal - endotracheal tube placement abnormal\n* ETT - Borderline - endotracheal tube placement borderline abnormal\n* ETT - Normal - endotracheal tube placement normal\n* NGT - Abnormal - nasogastric tube placement abnormal\n* NGT - Borderline - nasogastric tube placement borderline abnormal\n* NGT - Incompletely Imaged - nasogastric tube placement inconclusive due to imaging\n* NGT - Normal - nasogastric tube placement borderline normal\n* CVC - Abnormal - central venous catheter placement abnormal\n* CVC - Borderline - central venous catheter placement borderline abnormal\n* CVC - Normal - central venous catheter placement normal\n* Swan Ganz Catheter Present\n\n<span style=\"color: royalblue;\">Please vote the notebook up if it helps you. Thank you. <\/span>"}}