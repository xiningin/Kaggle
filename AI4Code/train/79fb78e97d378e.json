{"cell_type":{"9c239d7c":"code","65ea9579":"code","8b39095f":"code","c9290654":"code","3876ebfa":"code","8ef020ea":"code","9cf798c0":"code","4bda9a68":"code","97731be8":"code","eae4d03f":"code","9aee9402":"code","86a14b3b":"code","ee9030aa":"code","7f1dedc0":"code","3349cb3e":"code","2509bb69":"code","653f7d71":"code","bfcb1fda":"code","cd9f1315":"code","2086a671":"code","1bc2b089":"code","56f7fedf":"code","000745b3":"code","cbfa018e":"code","e0c6798d":"code","70885503":"code","677c5321":"code","1220abe0":"code","d2452187":"code","d931ae40":"code","30c2bab3":"code","4437181f":"code","ba856dca":"code","b3985ea3":"code","2ab24487":"code","02ef3c19":"code","27d43cb7":"code","663ac04f":"code","deacd2b4":"code","745b8a71":"code","3b49fa42":"code","1e49bca5":"code","dd87a248":"code","65264f9d":"code","f51e0aea":"code","5fc36435":"code","05869551":"code","a188f052":"code","527aa896":"code","10c13ce2":"code","d3365706":"code","986760e1":"code","66363207":"code","08ca0c1f":"code","f1e0ec3d":"code","64a0575f":"code","dea2d075":"code","9086ff59":"code","0e60045f":"code","75eedaba":"code","9868db6b":"code","f7a551cd":"code","1e158f81":"code","c17606b6":"code","27813376":"code","01569da7":"code","34b01a09":"code","c8346a29":"code","6e5e4d34":"code","1dd448cc":"code","24d3c4b8":"code","0c5fdab4":"code","0fd99e31":"code","25cff6f0":"code","6d285e34":"code","aaf23c32":"code","113b1618":"code","a5f8845d":"code","9573eacd":"code","91cc0ccd":"code","e60a999a":"code","a646d62e":"code","b1fa8fd8":"code","dd6f2881":"code","5111a922":"code","75969df4":"code","11dcc0a9":"code","5ee6a092":"code","a67726ef":"code","795d8fe1":"code","77805dc2":"markdown","5af4b7fc":"markdown","1a57909b":"markdown","e93900fe":"markdown","5d437799":"markdown","bf97b061":"markdown","74317ce1":"markdown","9d3159d4":"markdown","48ede596":"markdown","a65ec6a7":"markdown","d2412d3e":"markdown","50421f9a":"markdown","5cc2bee3":"markdown","b2126ce6":"markdown","3997e588":"markdown","1e6d2aed":"markdown","40c29f5a":"markdown","437264c5":"markdown","fe40a6db":"markdown","627668cf":"markdown","8dfe3238":"markdown","1a51e979":"markdown","e9db9e7d":"markdown","bc60afcb":"markdown","0a006a95":"markdown","a609f26a":"markdown","fcbec34c":"markdown","55b3cafa":"markdown","68807607":"markdown","01425598":"markdown"},"source":{"9c239d7c":"import os\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\npd.set_option('max_rows', None)","65ea9579":"train_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")","8b39095f":"train_df.head()","c9290654":"test_df.head()","3876ebfa":"def plot_missing_data(dataset, title):\n    fig, ax = plt.subplots(figsize=(5,5))\n    plt.title(title)  \n    sns.heatmap(dataset.isnull(), cbar=False)","8ef020ea":"train_df.info()","9cf798c0":"plot_missing_data(train_df, \"Training Dataset\")","4bda9a68":"test_df.info()","97731be8":"plot_missing_data(test_df, \"Test Dataset\")","eae4d03f":"def bar_chart_stacked(dataset, feature, stacked = True):\n    survived = dataset[dataset['Survived']==1][feature].value_counts()\n    dead = dataset[dataset['Survived']==0][feature].value_counts()\n    df_survived_dead = pd.DataFrame([survived,dead])\n    df_survived_dead.index = ['Passengers Survived','Passengers Died']\n    ax = df_survived_dead.plot(kind='bar',stacked=stacked, figsize=(5,5))","9aee9402":"train_df['Survived'].value_counts()","86a14b3b":"train_df['Survived'].value_counts(normalize=True)","ee9030aa":"bar_chart_stacked(train_df, \"Survived\")","7f1dedc0":"train_df['Sex'].value_counts().to_frame()","3349cb3e":"bar_chart_stacked(train_df, \"Sex\")","2509bb69":"train_df.groupby('Sex').Survived.mean()","653f7d71":"bar_chart_stacked(train_df, 'Pclass')","bfcb1fda":"pd.pivot_table(train_df, index = 'Survived', columns = 'Pclass', values = 'Ticket' ,aggfunc ='count')","cd9f1315":"train_df.groupby(['Pclass']).Survived.mean().to_frame()","2086a671":"def bar_chart_compare(dataset, feature1, feature2=None, title = \"Survival rate by sex and class'\"):\n    plt.figure(figsize = [5,5])\n    plt.title(title)\n    g = sns.barplot(x=feature1, y='Survived', hue=feature2, ci=None, data=dataset).set_ylabel('Survival rate')","1bc2b089":"bar_chart_compare(train_df, \"Pclass\", \"Sex\")","56f7fedf":"pd.pivot_table(train_df, index = 'Survived', columns = ['Pclass', \"Sex\"], values = 'Ticket' ,aggfunc ='count')","000745b3":"train_df.groupby(['Pclass', \"Sex\"]).Survived.mean().to_frame()","cbfa018e":"def plot_distribution(dataset, feature, title, bins = 30, hist = True, fsize = (5,5)):\n    fig, ax = plt.subplots(figsize=fsize)\n    ax.set_title(title)\n    sns.distplot(train_df[feature], color='g', bins=bins, ax=ax)","e0c6798d":"def plot_kernel_density_estimate_survivors(dataset, feature1, title, fsize = (5,5)):\n    fig, ax = plt.subplots(figsize=fsize)\n    ax.set_title(title) \n    sns.kdeplot(dataset[feature1].loc[train_df[\"Survived\"] == 1],\n                shade= True, ax=ax, label='Survived').set_xlabel(feature1)\n    sns.kdeplot(dataset[feature1].loc[train_df[\"Survived\"] == 0],\n                shade=True, ax=ax, label=\"Died\")","70885503":"plot_distribution(train_df, \"Age\", \"Age Distribution Passengers\")","677c5321":"plot_kernel_density_estimate_survivors(train_df, \"Age\", \"Age Distribution Surived vs Died\")","1220abe0":"def plot_swarm_survivors(dataset, feature1, feature2, title, fize = (155)):\n    fig, ax = plt.subplots(figsize=(18,5))\n    # Turns off grid on the left Axis.\n    ax.grid(True)\n    plt.xticks(list(range(0,100,2)))\n    sns.swarmplot(y=feature1, x=feature2, hue='Survived',data=train_df).set_title(title)","d2452187":"plot_swarm_survivors(train_df, \"Sex\", \"Age\", \"Survivor Swarmplot for Age and Gender\")","d931ae40":"plot_swarm_survivors(train_df, \"Age\", \"Pclass\", \"Survivor Swarmplot for Age and Gender\")","30c2bab3":"train_df.Fare.describe()","4437181f":"plot_distribution(train_df, \"Fare\", \"Fare Distribution Passengers\")","ba856dca":"def plot_quartiles(dataset, feature, title, categories):\n    fig, axarr = plt.subplots(figsize=(5,5))\n    fare_ranges = pd.qcut(dataset[feature], len(categories), labels = categories) #. [0, .25, .5, .75, 1.]\n    axarr.set_title(title)\n    sns.barplot(x=fare_ranges, y=dataset.Survived, ci=None, ax=axarr).set_ylabel('Survival rate')","b3985ea3":"categories = ['Cheap', 'Standard', 'Expensive', 'Luxury']\n\nplot_quartiles(train_df, \"Fare\", \"Survival Rate by Fare Ranges\/Categories\", categories)","2ab24487":"plot_swarm_survivors(train_df, \"Fare\", \"Sex\",\"Survivor Swarmplot for Age and Gender\")","02ef3c19":"train_df.loc[train_df.Fare==0] ","27d43cb7":"len(train_df.loc[train_df.Fare==0])","663ac04f":"# Replace Fare == 0 with nan\ntrain_df.loc[train_df['Fare'] == 0, 'Fare'] = np.NaN\ntest_df.loc[train_df['Fare'] == 0, 'Fare'] = np.NaN","deacd2b4":"def show_countplot(dataset, feature, title, fsize = (5,5)):\n    fig, ax = plt.subplots(figsize=fsize)\n    sns.countplot(dataset[feature], ax=ax).set_title(title)\n    \ndef show_compare_countplot(dataset, feature1, feature2, title):\n    fig, ax = plt.subplots(figsize=(5,5))\n    p = sns.countplot(x = feature1, hue = feature2, data = dataset, ax=ax).set_title(title)   ","745b8a71":"bar_chart_stacked(train_df, 'Embarked') ","3b49fa42":"show_countplot(train_df, \"Embarked\", 'Passengers count by boarding point')","1e49bca5":"train_df['Embarked'].value_counts().to_frame()","dd87a248":"show_compare_countplot(train_df, \"Embarked\", \"Survived\", \"Survivor count by place of embarktion\")","65264f9d":"pd.pivot_table(train_df, index = 'Survived', columns = 'Embarked', values = 'Ticket' ,aggfunc ='count')","f51e0aea":"train_df.groupby(['Embarked']).Survived.mean().to_frame()","5fc36435":"show_compare_countplot(train_df, \"Embarked\", \"Pclass\", \"Passenger count by place of embarktion and class\")","05869551":"train_df.groupby(['Embarked', 'Pclass']).Survived.sum().to_frame()","a188f052":"show_compare_countplot(train_df, \"Embarked\", \"Sex\", \"Passenger count by place of embarktion and sex\")","527aa896":"train_df['SibSp'].value_counts().to_frame()","10c13ce2":"bar_chart_compare(train_df, \"SibSp\", title = \"Surival rate by siblings \/ spouses aboard the Titanic\")","d3365706":"train_df.groupby(['SibSp']).Survived.mean().to_frame()","986760e1":"show_countplot(train_df, \"SibSp\", 'SibSp Distribution', (15,3))","66363207":"show_compare_countplot(train_df, \"SibSp\", \"Survived\", \"Survivor count by number of siblings \/ spouses aboard the Titanic\")","08ca0c1f":"show_countplot(train_df, \"Parch\", 'Parch Distribution', (15,3))","f1e0ec3d":"bar_chart_compare(train_df, \"Parch\", title = \"Survival rate by Parch\")","64a0575f":"train_df.groupby(['Parch']).Survived.mean().to_frame()","dea2d075":"show_compare_countplot(train_df, \"Parch\", \"Survived\", \"Survivor count by Parch\")","9086ff59":"pd.unique(train_df['Name'])","0e60045f":"train_df['Title'] = train_df['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())\ntest_df['Title'] = test_df['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())","75eedaba":"train_df.head()","9868db6b":"train_df['Title'].value_counts().to_frame()","f7a551cd":"show_countplot(train_df, \"Title\", 'Title Distribution', (15,3))","1e158f81":"train_df['Title'].replace(['Mme', 'Ms', 'Lady', 'Mlle', 'the Countess', 'Dona'], 'Miss', inplace=True)\ntest_df['Title'].replace(['Mme', 'Ms', 'Lady', 'Mlle', 'the Countess', 'Dona'], 'Miss', inplace=True)\ntrain_df['Title'].replace(['Major', 'Col', 'Capt', 'Don', 'Sir', 'Jonkheer'], 'Mr', inplace=True)\ntest_df['Title'].replace(['Major', 'Col', 'Capt', 'Don', 'Sir', 'Jonkheer'], 'Mr', inplace=True)","c17606b6":"show_countplot(train_df, \"Title\", 'Title Distribution after substitution', (15,3))","27813376":"bar_chart_stacked(train_df, 'Title') ","01569da7":"bar_chart_compare(train_df, \"Title\", title = \"Survival rate by Title\")","34b01a09":"train_df[['Cabin', 'Ticket']]","c8346a29":"# Extract Leading Letter:\ntrain_df['Ticket_2letter'] = train_df.Ticket.apply(lambda x: x[:2])\ntest_df['Ticket_2letter'] = test_df.Ticket.apply(lambda x: x[:2])","6e5e4d34":"# Extract Ticket Lenght:\ntrain_df['Ticket_len'] = train_df.Ticket.apply(lambda x: len(x))\ntest_df['Ticket_len'] = test_df.Ticket.apply(lambda x: len(x))","1dd448cc":"# Extract Number of Cabins:\ntrain_df['Cabin_num'] = train_df.Ticket.apply(lambda x: len(x.split()))\ntest_df['Cabin_num'] = test_df.Ticket.apply(lambda x: len(x.split()))","24d3c4b8":"# Extract Leading Letter:\ntrain_df['Cabin_1letter'] = train_df.Ticket.apply(lambda x: x[:1])\ntest_df['Cabin_1letter'] = test_df.Ticket.apply(lambda x: x[:1])","0c5fdab4":"len(train_df['Ticket'].value_counts().to_frame())","0fd99e31":"len(train_df[\"Ticket_2letter\"].value_counts().to_frame())","25cff6f0":"len(train_df[\"Ticket_len\"].value_counts().to_frame())","6d285e34":"train_df.head()","aaf23c32":"len(train_df['Cabin'].value_counts().to_frame())","113b1618":"len(train_df['Cabin_num'].value_counts().to_frame())","a5f8845d":"train_df['Cabin_num'].value_counts().to_frame()","9573eacd":"len(train_df['Cabin_1letter'].value_counts().to_frame())","91cc0ccd":"train_df['Fam_size'] = train_df['SibSp'] + train_df['Parch'] + 1\ntest_df['Fam_size'] = test_df['SibSp'] + test_df['Parch'] + 1","e60a999a":"bar_chart_compare(train_df, \"Fam_size\", title = \"Survival rate by family size\")","a646d62e":"show_compare_countplot(train_df, \"Fam_size\", \"Survived\", \"Survivor count by family size\")","b1fa8fd8":"# Creation of four groups\ntrain_df['Fam_type'] = pd.cut(train_df.Fam_size, [0,1,4,7,11], labels=['Solo', 'Small', 'Big', 'Very big'])\ntest_df['Fam_type'] = pd.cut(test_df.Fam_size, [0,1,4,7,11], labels=['Solo', 'Small', 'Big', 'Very big'])","dd6f2881":"bar_chart_compare(train_df, \"Fam_type\", title = \"Surival rate by family type\")","5111a922":"show_compare_countplot(train_df, \"Fam_type\", \"Survived\", \"Survivor count by family type\")","75969df4":"y = train_df['Survived']\nfeatures = ['Pclass', 'Fare', 'Title', 'Embarked', 'Fam_type', 'Ticket_len', 'Ticket_2letter']\nX = train_df[features]\nX.head()","11dcc0a9":"numerical_cols = ['Fare']\ncategorical_cols = ['Pclass', 'Title', 'Embarked', 'Fam_type', 'Ticket_len', 'Ticket_2letter']\n\n# Inputing numerical values with median\nnumerical_transformer = SimpleImputer(strategy='median')\n\n# Inputing missing values with most frequent one for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\n# Bundle preprocessing and modeling code \ntitanic_pipeline = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('model', RandomForestClassifier(random_state=0, n_estimators=500, max_depth=10))\n])\n\n# Training\ntitanic_pipeline.fit(X,y)\n\nprint('Cross validation score: {:.3f}'.format(cross_val_score(titanic_pipeline, X, y, cv=10).mean()))","5ee6a092":"X_test = test_df[features]\nX_test.head()","a67726ef":"predictions = titanic_pipeline.predict(X_test)","795d8fe1":"output = pd.DataFrame({'PassengerId': test_df.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint('Your submission was successfully saved!')","77805dc2":"# 2. Exploratory data analysis","5af4b7fc":"## 2.11 Analyze Features Embarked & Sex together","1a57909b":"## 3.3 Feature Family Size","e93900fe":"## 2.1 Check missing values","5d437799":"## 3.4 Feature Family Type","bf97b061":"#### Observation:\nHere, we can see the even though the majority of the passenger were male, the majority of survivors were female. The key observation here is that the survival rate for female passengers is 4 times higher than the survival rate of male passengers.   ","74317ce1":"## 3.2 Cabin and Ticket","9d3159d4":"# 4. Training a classifier","48ede596":"#### Observation:\nFrom the plots and tables above it becomes clear that the Pclass is an important factor to consider.\n\n- Most passenger had class 3 tickets, yet only 24% of class 3 passengers survived.\n- Almost 63% of the passenger from class 1 survived. \n- Also approx 50% of the class 2 passenger survived.","a65ec6a7":"## 2.12 Analyze Feature SibSp:","d2412d3e":"#### Observation:\nAs the majority of passenger were we could infer that the majority of survivors were men.\n\nWe can check this assumption by looking at the bar chart below:","50421f9a":"#### Display train data","5cc2bee3":"##  2.12 Analyze Feature Parch","b2126ce6":"## 3.1 Feature Name:","3997e588":"# 1. Loading the dataset:","1e6d2aed":"#### Observation:\nHere, we can clearly see that the question was justified. Irrespective of the class the most important factor when it comes to surviving was gender. (At least between Sex and Pclass)\nHowever, men in class 1 had a significantly higher chance of survival when they bought class 1 tickets.\nThis just shows to say that we should keep both features as both yield insightful information that should help our model.\n- Survival Rate females 1. Class: 96,8%\n- Survival Rate females 2. Class: 92,1%\n- Survival Rate females 3. Class: 50% \n\n- Survival Rate male 1. Class: 36.8%\n  <br>(still significantly lower than 3. class females)","40c29f5a":"# 3. Feature engineering","437264c5":"# 0 set up","fe40a6db":"## 2.6 Analyze FeatureFeature Age & Sex together:","627668cf":"## 2.2 Analyze Feature Survived:","8dfe3238":"## 2.7 Analyze Features Age and Pclass together","1a51e979":"## 2.3 Analyze Feature Sex:","e9db9e7d":"#### Observation:\nAs expected the majority of passengers in the training data died. \nOnly 38% survived the disaster. So the training data suffers from data imbalance but it is not severe which is why I will not cosider techniques like sampling to tackle the imbalance.","bc60afcb":"## 2.5 Analyze Feature Age:","0a006a95":"## 2.8 Analyze Feature Fare:","a609f26a":"#### Observation:\nFrom the blots above we can see that both training as well as test dataset contain features with missing values. However, the most sparse features are Age as well as Cabin.\n\nAs we do not know the how mich information the features yield, further investigation is needed.","fcbec34c":"## 2.4 Analyze Feature Pclass:","55b3cafa":"#### 1. Let's try to understand how many people survived overall:","68807607":"#### Display test data","01425598":"## 2.10 Analyze Features Embarked & Pclass together"}}