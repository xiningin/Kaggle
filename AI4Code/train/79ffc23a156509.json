{"cell_type":{"5afaf8d6":"code","0769e4bd":"code","5012063b":"code","32f2edb6":"code","bf0fbb57":"code","1df6146f":"code","22fe54a1":"code","8241a522":"code","c9361979":"code","a3293a96":"code","31f5de5d":"code","dd142194":"code","f7e57936":"code","62f4ef3c":"code","c6edc20e":"code","4312a4c4":"code","7d762e4f":"code","f34276c4":"code","7471f8a7":"code","75a0ff18":"code","df5d2895":"code","5f0623fc":"code","928a1b83":"code","1d0a38e3":"code","01c2b181":"code","33570219":"code","8a1fe009":"code","249f4cbf":"code","4b6df95f":"code","c28a2382":"code","0d7f227a":"code","e3dc8f7d":"code","8cd7c740":"code","27c4bed8":"code","52984cf2":"code","23335a24":"code","23b5e17f":"code","09102494":"code","a9284e76":"code","dfa2bde3":"code","518958ba":"code","a75a81b5":"code","ac3e4b22":"code","d9beac1c":"code","2a6965ae":"code","1bc7bd8c":"code","4ff204a0":"code","80c3d5aa":"code","bc1c7b5f":"code","23e9e861":"code","be3c9a0b":"code","cef0f4ac":"code","a217b5df":"code","143b40e2":"code","3aecb03e":"code","5c1f447e":"code","95ecef74":"code","cd507e4c":"code","ecd54716":"code","9e414fcb":"code","a1f34463":"code","bacf7036":"code","f061c09a":"code","415bf4ff":"code","9cee9722":"code","247df0b2":"code","fbb42627":"code","f5d82f36":"code","f787c2de":"code","3788f47c":"code","b8e01ff0":"code","2ec9c19b":"code","7c9aa69d":"code","57d5653c":"code","ff1a46b5":"code","d311b567":"code","dfcf0357":"code","17003556":"code","b2a0612d":"code","9b06ca7a":"code","a39e84e4":"code","bb0f591f":"code","dae185bd":"markdown","ef0622f9":"markdown","0d0e935b":"markdown","c73d6906":"markdown","f1d067f1":"markdown","20b01f23":"markdown","dd848884":"markdown","db6134e0":"markdown","3d889b1d":"markdown","f5f63004":"markdown","def51f8a":"markdown","84b76227":"markdown","3af54cf0":"markdown","55523868":"markdown","f52534cf":"markdown","83c3c0f2":"markdown","598f247c":"markdown","30da314a":"markdown","df157fe5":"markdown"},"source":{"5afaf8d6":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRFRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import GridSearchCV","0769e4bd":"train_data = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")","5012063b":"print(\"Training data shape: \", train_data.shape)\nprint(\"Testing data shape: \", test_data.shape)","32f2edb6":"all_data = train_data.drop('SalePrice',axis=1).append(test_data)\nall_data.shape","bf0fbb57":"all_data['GarageYrBlt'].dtype","1df6146f":"all_data['LotFrontage'] = all_data['LotFrontage'].astype('float64')","22fe54a1":"numerical_columns = []\nobject_columns = []\nfor name, typed in zip(all_data.columns, all_data.dtypes):\n    if typed == 'object':\n        object_columns.append(name)\n    elif typed == 'int64' or typed == 'float64':\n        numerical_columns.append(name)\n    print(name, ' - ',typed)\n    \nextra_cat_columns = ['MSSubClass','GarageYrBlt', 'MoSold', 'YrSold']\nfor name in extra_cat_columns:\n    object_columns.append(name)","8241a522":"for name in object_columns:\n    #print(all_data[name].dtypes)\n    if all_data[name].dtypes == 'object':\n        all_data[name] = all_data[name].fillna('NaN')\n    elif all_data[name].dtypes == 'int64':\n        all_data[name] = all_data[name].fillna(999)\n    all_data[name] = label_encoder.fit_transform(all_data[name])\n#all_data.head()","c9361979":"missing_value_columns = []\nfor a,x in all_data.isna().sum().items():\n    if x>0:\n        print(a,x)\n        missing_value_columns.append(a)","a3293a96":"imputer = IterativeImputer(missing_values=np.nan,max_iter=10, initial_strategy='median', n_nearest_features=4)\nimputer_model = imputer.fit(all_data)","31f5de5d":"imputed_data = pd.DataFrame(data = imputer_model.transform(all_data), columns=list(all_data.columns))","dd142194":"for a,x in imputed_data.isna().sum().items():\n    if x>0:\n        print(a,x)","f7e57936":"imputed_data.head()","62f4ef3c":"final_train_data = imputed_data[:1460]\nfinal_train_data = final_train_data.merge(train_data[['Id','SalePrice']], on ='Id', how='left')\nfinal_train_data.head()","c6edc20e":"final_test_data = pd.DataFrame(data=imputed_data[1460:2919], columns=list(all_data.columns))","4312a4c4":"scaled_train_data = scaler.fit_transform(final_train_data.drop(['Id','SalePrice'], axis=1))\nx_train, x_val, y_train, y_val = train_test_split(scaled_train_data, final_train_data['SalePrice'], test_size=0.25, random_state=42)","7d762e4f":"print(len(x_train), len(y_train), len(x_val), len(y_val))","f34276c4":"lr = LinearRegression(normalize=True)\nmodel = lr.fit(x_train, y_train)","7471f8a7":"lr_prediction = model.predict(x_val)","75a0ff18":"model.score(x_train,y_train)","df5d2895":"plt.scatter(y_val, lr_prediction)\nplt.show()","5f0623fc":"print(\"Linear regression rmse score: \", np.sqrt(mean_squared_error(y_val, lr_prediction)))","928a1b83":"lasso = Lasso()\nparamgrid = {\n    'alpha':list(np.arange(0.85,1.01,0.01)),\n    'tol': list(np.arange(0,1.01, 0.01))\n}","1d0a38e3":"gscv = GridSearchCV(estimator=lasso, param_grid=paramgrid, cv= 5, n_jobs=-1, verbose=1)\ngscv.fit(x_train, y_train)","01c2b181":"gscv.best_params_","33570219":"lasso = Lasso(alpha=1.01, tol=0.15)\nmodel = lasso.fit(x_train, y_train)","8a1fe009":"model.score(x_train, y_train)","249f4cbf":"lasso_prediction = model.predict(x_val)\nprint(\"Lasso regression rmse score: \", np.sqrt(mean_squared_error(y_val, lasso_prediction)))","4b6df95f":"ridge = Ridge()\nparamgrid = {\n    'alpha':[0.1,0.3,0.5,0.7,1],\n    'tol': [0.1,0.3,0.5,0.7,1]\n}","c28a2382":"gscv = GridSearchCV(estimator=ridge, param_grid=paramgrid, cv= 5, n_jobs=-1, verbose=1)","0d7f227a":"gscv.fit(x_train, y_train)","e3dc8f7d":"gscv.best_params_","8cd7c740":"ridge = Ridge(alpha=1, tol=0.1, solver='cholesky')\nmodel = ridge.fit(x_train, y_train)","27c4bed8":"model.score(x_train, y_train)","52984cf2":"ridge_prediction = model.predict(x_val)","23335a24":"print(\"Ridge regression rmse score: \", np.sqrt(mean_squared_error(y_val, ridge_prediction)))","23b5e17f":"xgb = XGBRegressor()\nparamgrid = {'learning_rate':[0.1,0.3],\n            'max_depth': [5,11,20],\n            'min_child_weight': [7,11],\n            'subsample':[0.1,0.3,0.5],\n            'colsample_bytree':[0.3,0.5],\n            'n_estimators':[100,200],\n            'objective':['reg:squarederror']}","09102494":"gscv = GridSearchCV(estimator=xgb, param_grid=paramgrid, cv= 5, n_jobs=-1, verbose=1)","a9284e76":"gscv.fit(x_train, y_train)","dfa2bde3":"gscv.best_params_","518958ba":"xgb = XGBRegressor(learning_rate=0.1, colsample_bytree=0.3, max_depth=9, min_child_weight=11, n_estimators=100, objective = 'reg:squarederror', subsample=0.3)\nmodel = xgb.fit(x_train, y_train)","a75a81b5":"model.score(x_train,y_train)","ac3e4b22":"xgb_prediction = model.predict(x_val)","d9beac1c":"print(\"XGBoost rmse score: \", np.sqrt(mean_squared_error(y_val, xgb_prediction)))","2a6965ae":"xgbrf = XGBRFRegressor()\nmodel = xgbrf.fit(x_train, y_train)","1bc7bd8c":"model.score(x_train, y_train)","4ff204a0":"xgbrf_prediction = model.predict(x_val)","80c3d5aa":"print(\"XGBoostRF rmse score: \", np.sqrt(mean_squared_error(y_val, xgbrf_prediction)))","bc1c7b5f":"dtr = DecisionTreeRegressor()\nparamgrid = {'max_depth':[5,11,15],\n             'min_samples_leaf':[20,40,80],\n             'max_features':[20,40,60],\n             'max_leaf_nodes':[40,60,80]\n            }","23e9e861":"gscv = GridSearchCV(estimator=dtr, param_grid=paramgrid, cv= 5, n_jobs=-1, verbose=1)","be3c9a0b":"gscv.fit(x_train, y_train)","cef0f4ac":"gscv.best_params_","a217b5df":"dtr = DecisionTreeRegressor(max_depth=15, max_features=60, max_leaf_nodes=40, min_samples_leaf=20)\nmodel = dtr.fit(x_train, y_train)","143b40e2":"model.score(x_train, y_train)","3aecb03e":"dt_prediction = model.predict(x_val)\nprint(\"Decision Tree rmse score: \", np.sqrt(mean_squared_error(y_val, dt_prediction)))","5c1f447e":"rf = RandomForestRegressor()\nparamgrid = {'max_depth':[7,11,15],\n             'min_samples_leaf':[5,20,60],\n             'max_leaf_nodes':[5,20,60],\n            'n_estimators':[50,100,500]}","95ecef74":"gscv = GridSearchCV(estimator=rf, param_grid=paramgrid, cv= 5, n_jobs=-1, verbose=1)\ngscv.fit(x_train, y_train)","cd507e4c":"gscv.best_params_","ecd54716":"rf = RandomForestRegressor(max_depth=11, max_features=20, max_leaf_nodes=60, min_samples_leaf=5, min_samples_split=5, n_estimators=100)\nmodel = rf.fit(x_train, y_train)","9e414fcb":"model.score(x_train, y_train)","a1f34463":"rf_prediction = model.predict(x_val)\nprint(\"Decision Tree rmse score: \", np.sqrt(mean_squared_error(y_val, rf_prediction)))","bacf7036":"ada_booster = AdaBoostRegressor(XGBRegressor(learning_rate=0.1, colsample_bytree=0.3, max_depth=9, min_child_weight=11, n_estimators=100, objective = 'reg:squarederror', subsample=0.3), n_estimators=1200)\nmodel = ada_booster.fit(scaled_train_data, final_train_data['SalePrice'])","f061c09a":"model.score(scaled_train_data, final_train_data['SalePrice'])","415bf4ff":"ada_prediction = model.predict(x_val)\nprint(\"AdaBoost XGBoost rmse score: \", np.sqrt(mean_squared_error(y_val, ada_prediction)))","9cee9722":"ada_booster = AdaBoostRegressor(DecisionTreeRegressor(max_depth=15, max_features=40, max_leaf_nodes=40, min_samples_leaf=20), n_estimators=1200)\nmodel = ada_booster.fit(x_train,y_train)","247df0b2":"model.score(x_train, y_train)","fbb42627":"ada_prediction = model.predict(x_val)\nprint(\"AdaBoost DecisionTree rmse score: \", np.sqrt(mean_squared_error(y_val, ada_prediction)))","f5d82f36":"ada_booster = AdaBoostRegressor(XGBRFRegressor(), n_estimators=1000)\nmodel = ada_booster.fit(x_train,y_train)","f787c2de":"model.score(x_train, y_train)","3788f47c":"ada_prediction = model.predict(x_val)\nprint(\"AdaBoost XGBRF rmse score: \", np.sqrt(mean_squared_error(y_val, ada_prediction)))","b8e01ff0":"ada_booster = AdaBoostRegressor(RandomForestRegressor(max_depth=11, max_features=20, max_leaf_nodes=60, min_samples_leaf=5, min_samples_split=5, n_estimators=100), n_estimators=1000)\nmodel = ada_booster.fit(x_train,y_train)","2ec9c19b":"model.score(x_train, y_train)","7c9aa69d":"ada_prediction = model.predict(x_val)\nprint(\"AdaBoost XGBRF rmse score: \", np.sqrt(mean_squared_error(y_val, ada_prediction)))","57d5653c":"from sklearn.ensemble import StackingRegressor","ff1a46b5":"stack = [\n    ('lasso', Lasso(alpha=1.01, tol=0.15)),\n    ('rf',RandomForestRegressor(max_depth=11, max_features=20, max_leaf_nodes=60, min_samples_leaf=5, min_samples_split=5, n_estimators=100)),\n    ('xgb', XGBRegressor(learning_rate=0.1, colsample_bytree=0.3, max_depth=9, min_child_weight=11, n_estimators=100, objective = 'reg:squarederror', subsample=0.3))\n]\n\nstacked = StackingRegressor(estimators=stack,\n                           cv=5)","d311b567":"stacked_model = stacked.fit(x_train,y_train)\nstacked_model.score(x_train, y_train)","dfcf0357":"ada = AdaBoostRegressor(stacked, n_estimators=200)\nada.fit(x_train, y_train)","17003556":"ada.score(x_train, y_train)","b2a0612d":"submission.head()","9b06ca7a":"y_pred = ada.predict(scaler.transform(final_test_data.drop('Id', axis=1)))\ny_pred","a39e84e4":"submission['SalePrice'] = y_pred","bb0f591f":"submission.to_csv('submission.csv', index=False)","dae185bd":"AdaBoost on DecisionTree","ef0622f9":"## Submissions","0d0e935b":"# IMPORT LIBRARIES","c73d6906":"## XGBoost","f1d067f1":"## Stacking\n","20b01f23":"## XGBoost RF Regression","dd848884":"## Imputing missing values","db6134e0":"Adaboost on XGBoost","3d889b1d":"## Lasso Regression","f5f63004":"AdaBoost on Random Forest","def51f8a":"## Random Forest","84b76227":"# DATA","3af54cf0":"## Ridge Regression","55523868":"## AdaBoost","f52534cf":"Scaling data","83c3c0f2":"Adaboost on XGBRF","598f247c":"## Final Training and Test Data","30da314a":"## DecisionTree","df157fe5":"## Linear Regression"}}