{"cell_type":{"a4dc8740":"code","e5177fe0":"code","167294b2":"code","5252f10e":"code","e798927a":"code","acd8fd2e":"code","c26638a9":"code","e2d39b9b":"code","92bde85d":"code","304b3e9e":"code","7b802022":"code","baa60956":"code","5406da76":"code","50082fd1":"code","14fa6217":"code","c6e6cefd":"code","10b9e2b2":"code","0aabd006":"code","c1e0fe5f":"code","0162c5b2":"code","04ee068a":"code","b2cf1893":"code","6bf92764":"code","c4e85a9c":"code","b7a89b96":"code","f1fbf7c3":"code","8908c7b4":"code","8ebdef7a":"code","ff503c1e":"code","42572f7d":"code","217c280a":"code","cfae08a4":"code","2f6aae84":"code","09e92615":"code","1029bfb2":"code","cd022824":"code","5776eca1":"code","34b171e3":"code","e1858e8d":"code","c4a6acbf":"code","8e5c9332":"code","256eccab":"code","e31af1e8":"code","b0904ff8":"code","993dcac3":"code","3e362119":"code","60ec16db":"code","61b91272":"code","18fb2e7d":"code","25599a39":"code","86b53914":"code","0419d5d4":"code","76c40e63":"code","c05642f8":"code","cf274ec2":"code","1d8d6851":"code","82e989ee":"code","4bee0510":"code","b200da4c":"code","525875c4":"code","71eb7e58":"code","7c61b2b2":"code","f58ece08":"code","b6be36fa":"code","47f324c1":"code","ced80711":"code","479fe847":"code","1e3fd841":"code","beb5aa68":"code","ca1f0cc2":"code","30f2d73f":"code","c2f47a49":"code","a429f146":"code","69299c19":"code","8b226c06":"code","6a7016a9":"code","d1ce6730":"code","0835de94":"markdown","731411b8":"markdown","64317663":"markdown","e8be2c16":"markdown","e4b2c04b":"markdown","aff86a47":"markdown","b23017d8":"markdown","ef50bf28":"markdown","09b1aa85":"markdown","0293c506":"markdown","f75fd651":"markdown","669efd2d":"markdown","219328d8":"markdown","22412216":"markdown","d34be08a":"markdown","1256ab47":"markdown","748d7346":"markdown","30a71c31":"markdown","3b15823e":"markdown","22a2b65a":"markdown","9bd4765b":"markdown","6972c549":"markdown","ba328924":"markdown","8245e55e":"markdown","208d9571":"markdown","cc750904":"markdown","a14893bc":"markdown","4e7d609e":"markdown"},"source":{"a4dc8740":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #For Visualization \nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","e5177fe0":"iris = pd.read_csv(\"..\/input\/Iris.csv\")\niris.head()","167294b2":"iris.drop('Id',inplace=True,axis=1)","5252f10e":"iris.head()","e798927a":"iris.info()","acd8fd2e":"iris.describe()","c26638a9":"sns.scatterplot(x = 'SepalLengthCm', y = 'SepalWidthCm', data= iris ,hue='Species')\nplt.title('Sepal Length vs Sepal Width')\nplt.show()","e2d39b9b":"sns.scatterplot(x = 'PetalLengthCm', y = 'PetalWidthCm', data= iris ,hue='Species')\nplt.title('Petal Length vs Petal Width')\nplt.show()","92bde85d":"sns.scatterplot(x = 'PetalLengthCm', y = 'SepalLengthCm', data= iris ,hue='Species')\nplt.title('Petal Length vs Sepal Length')\nplt.show()","304b3e9e":"sns.scatterplot(x = 'PetalWidthCm', y = 'SepalWidthCm', data= iris ,hue='Species')\nplt.title('Petal Width vs Sepal Width')\nplt.show()","7b802022":"sns.countplot(x = 'Species', data = iris)\nplt.show()","baa60956":"sns.heatmap(data = iris.corr(),annot=True)\nplt.show()","5406da76":"sns.violinplot(y = 'PetalLengthCm', x = 'Species', data= iris, hue='Species')\nplt.show()","50082fd1":"sns.pairplot(data= iris, hue='Species',palette='Dark2')","14fa6217":"np.unique(iris['Species'])","c6e6cefd":"iris['Species'] = pd.Categorical(iris['Species'])\niris['Species'] = iris['Species'].cat.codes.apply(int)\nnp.unique(iris['Species'])","10b9e2b2":"iris.head()","0aabd006":"from sklearn.preprocessing import StandardScaler","c1e0fe5f":"scaler = StandardScaler()","0162c5b2":"scaler.fit(iris.drop('Species',axis=1))\nscaled_features = scaler.transform(iris.drop('Species',axis = 1))\niris_feat = pd.DataFrame(scaled_features,columns=iris.columns[:-1])","04ee068a":"iris_feat.head()","b2cf1893":"from sklearn.model_selection import train_test_split","6bf92764":"X = iris_feat \ny = iris['Species']","c4e85a9c":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","b7a89b96":"from sklearn.linear_model import LogisticRegression","f1fbf7c3":"log = LogisticRegression(solver='lbfgs',multi_class='auto')","8908c7b4":"log.fit(X_train,y_train)","8ebdef7a":"prediction_lr = log.predict(X_test)","ff503c1e":"from sklearn.metrics import classification_report,confusion_matrix,accuracy_score","42572f7d":"print(classification_report(y_test,prediction_lr))\nprint(confusion_matrix(y_test,prediction_lr))\nprint('Accuracy score is',accuracy_score(y_test,prediction_lr))","217c280a":"from sklearn.tree import DecisionTreeClassifier","cfae08a4":"dt = DecisionTreeClassifier()","2f6aae84":"dt.fit(X_train,y_train)","09e92615":"prediction_dt = dt.predict(X_test)","1029bfb2":"print(confusion_matrix(y_test,prediction_dt))\nprint(classification_report(y_test,prediction_dt))\nprint('Accuracy score is',accuracy_score(y_test,prediction_dt))","cd022824":"from sklearn.ensemble import RandomForestClassifier","5776eca1":"rf = RandomForestClassifier(n_estimators=200)","34b171e3":"rf.fit(X_train,y_train)","e1858e8d":"prediction_rf = rf.predict(X_test)","c4a6acbf":"print(confusion_matrix(y_test,prediction_rf))\nprint(classification_report(y_test,prediction_rf))\nprint('Accuracy score is',accuracy_score(y_test,prediction_rf))","8e5c9332":"from sklearn.svm import SVC","256eccab":"sv = SVC(gamma='auto')","e31af1e8":"sv.fit(X_train,y_train)","b0904ff8":"prediction_sv = sv.predict(X_test)","993dcac3":"print(confusion_matrix(y_test,prediction_sv))\nprint(classification_report(y_test,prediction_sv))\nprint('Accuracy score is',accuracy_score(y_test,prediction_sv))","3e362119":"from sklearn.model_selection import GridSearchCV","60ec16db":"param_grid = {'C':[0.1,1,10,100,1000], 'gamma':[1,.1,.01,.001,.0001]}","61b91272":"gs = GridSearchCV(SVC(),param_grid,verbose=5)","18fb2e7d":"gs.fit(X_train,y_train)","25599a39":"gs.best_params_ #Checking parameters","86b53914":"gs.best_estimator_","0419d5d4":"prediction_gs = gs.predict(X_test)","76c40e63":"print(confusion_matrix(y_test,prediction_gs))\nprint(classification_report(y_test,prediction_gs))\nprint('Accuracy score is',accuracy_score(y_test,prediction_gs))","c05642f8":"from sklearn.neighbors import KNeighborsClassifier","cf274ec2":"knn = KNeighborsClassifier(n_neighbors=1)","1d8d6851":"knn.fit(X_train,y_train)","82e989ee":"prediction_knn = knn.predict(X_test)","4bee0510":"print(confusion_matrix(y_test,prediction_knn))\nprint(classification_report(y_test,prediction_knn))\nprint('Accuracy score is',accuracy_score(y_test,prediction_knn))","b200da4c":"error_rate =[]\n\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","525875c4":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue',linestyle = 'dashed', marker = 'o', markerfacecolor = 'red',markersize = 10)\nplt.show()","71eb7e58":"knn = KNeighborsClassifier(n_neighbors=7)","7c61b2b2":"knn.fit(X_train,y_train)","f58ece08":"prediction_knn = knn.predict(X_test)","b6be36fa":"print(confusion_matrix(y_test,prediction_knn))\nprint(classification_report(y_test,prediction_knn))\nprint('Accuracy score is',accuracy_score(y_test,prediction_knn))","47f324c1":"import tensorflow as tf","ced80711":"iris_feat.columns #columns of iris_feat ","479fe847":"feat_col = []\n\nfor col in iris_feat.columns:\n    feat_col.append(tf.feature_column.numeric_column(col))","1e3fd841":"feat_col","beb5aa68":"input_fn = tf.estimator.inputs.pandas_input_fn(x = X_train, y = y_train,batch_size= 10, num_epochs= 10, shuffle=True)","ca1f0cc2":"classifier =tf.estimator.DNNClassifier(hidden_units=[15,15,15],n_classes=3,feature_columns=feat_col)","30f2d73f":"classifier.train(input_fn,steps= 50)","c2f47a49":"pred_fn = tf.estimator.inputs.pandas_input_fn(x = X_test,batch_size=len(X_test),shuffle=False)","a429f146":"prediction_dl =list( classifier.predict(input_fn=pred_fn))","69299c19":"prediction_dl","8b226c06":"final_pred = []\n\nfor pred in prediction_dl:\n    final_pred.append(pred['class_ids'][0])","6a7016a9":"final_pred","d1ce6730":"print(confusion_matrix(y_test,final_pred))\nprint(classification_report(y_test,final_pred))\nprint('Accuracy score is',accuracy_score(y_test,final_pred))","0835de94":"Train & Test Split","731411b8":"Now check pairwise correlation of columns","64317663":"Data Preprocessing","e8be2c16":"Pairplot","e4b2c04b":"Removing ID from iris dataframe","aff86a47":"Descriptive statistics of DataFrame","b23017d8":"1. Logistic Regression","ef50bf28":"Machine Learning","09b1aa85":"Need to collect class_ids to check model accuracy with y_test","0293c506":"Generating feature_columns","f75fd651":"Checking top 5 values of new dataframe","669efd2d":"Top 5 records of dataset","219328d8":"6. DNN classifier with tensorflow estimators","22412216":"Assigning X feature columns & y - Target column","d34be08a":"5. K Neighbors Classifier","1256ab47":"Converting target column into numerical values","748d7346":"3. Random Forest Classifier","30a71c31":"standardization of features","3b15823e":"2. Decision Tree Classifier","22a2b65a":"Now check the distribution of target column i.e. Species","9bd4765b":"Basic Visualization","6972c549":"1. Scatter plot","ba328924":"Summary of a DataFrame","8245e55e":"4. SVM & Gridsearch","208d9571":"As Iris Dataset is classification between three types of flowers. I am going to use logistic regression, Decision Tree Classifier, Random Forest Classifier, SVM & Gridsearch, K Neighbors Classifier & DNN classifier with tensorflow estimators.","cc750904":"The lowest error rate is at n_neighbors = 7,8,9,11 & 12 so running K Neighbors Classifier with n_neighbors = 7","a14893bc":"By plotting the graph of error rates determining most accurate value of n_neighbors","4e7d609e":"Voilin plot"}}