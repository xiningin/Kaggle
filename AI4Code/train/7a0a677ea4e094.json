{"cell_type":{"36b251ec":"code","a1b7ca6e":"code","1ed66e22":"code","17a4df77":"code","1c309420":"code","8b998500":"code","fd9ecb4d":"code","eaec57b5":"code","98225127":"code","b7fae008":"code","4414aae5":"code","71fdaed0":"code","fbe85f0c":"code","42b40657":"code","aac48c8f":"code","fbc55750":"code","bd1e0d87":"code","5ff95108":"code","9b83b4a9":"code","614f3b3a":"code","475ef72c":"code","47214897":"code","f95d3315":"code","37e0d3ca":"code","09b3f405":"code","84dd6ea7":"code","e0ef8383":"code","c42de01a":"code","3925ea20":"code","8a6ad132":"code","e62f6bfd":"code","4ff17ae9":"code","d9e6527b":"code","a1d2baea":"code","1e45f30a":"code","205a075d":"code","f0cda112":"code","b6d5e9df":"code","e0a4ab0a":"code","52820589":"code","c149191f":"code","4b243dd2":"code","262bee23":"code","fed57cd8":"code","3b03cdb9":"code","0f775433":"code","ae117a4d":"code","9386ba07":"code","fba580b0":"code","540d65f2":"code","4802810d":"code","1c89e8af":"code","898b3a17":"markdown","595065b1":"markdown","3ccc80ef":"markdown","402dbccb":"markdown","4197b99f":"markdown","c9dfc2c8":"markdown","bd007c07":"markdown","7f9b09d2":"markdown","0bbd76af":"markdown","aff41ccf":"markdown","32be509c":"markdown","ee9b1cd9":"markdown","afa82fee":"markdown","e7b0519b":"markdown","29d8a89f":"markdown","14fcfe2e":"markdown","19d8ddc1":"markdown","f931eabd":"markdown","068b9b34":"markdown"},"source":{"36b251ec":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nfrom matplotlib import pyplot\n\n%matplotlib inline\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\n\nfrom xgboost import XGBRegressor","a1b7ca6e":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","1ed66e22":"train.shape","17a4df77":"train.describe()","1c309420":"train.drop(['Id'], axis=1, inplace=True)","8b998500":"def show_missing_data(df):\n  df_nan = df.isnull().sum()[df.isnull().sum()>0].sort_values(ascending = False)\n  df_nan_per = df_nan \/ df.shape[0] * 100\n\n  print(pd.concat([df_nan, df_nan_per], \n                  axis=1, \n                  keys=['nan Amount', 'Percentage']))","fd9ecb4d":"train_tmp = train.drop(['SalePrice'], axis=1)\ntest_ids = test.Id\ntest = test.drop(['Id'], axis=1)\n\ntotal = pd.concat([train_tmp, test]).reset_index(drop=True)\n\nprint(show_missing_data(total))","eaec57b5":"fig, axs = plt.subplots(1, 2, figsize=(15,5))\n\nsns.countplot(total[pd.notna(total.PoolQC)].PoolQC, ax=axs[0])\nsns.countplot(total.PoolArea, ax=axs[1])\n\nplt.suptitle(\"Pool Quality vs Pool's Area\")\naxs[0].set_xlabel(\"Quality\")\naxs[1].set_xlabel(\"Area\")","98225127":"total.PoolQC = total.PoolQC.fillna('NA')\ntrain.PoolQC = train.PoolQC.fillna('NA')\ntest.PoolQC = test.PoolQC.fillna('NA')","b7fae008":"sns.countplot(total.PoolQC)","4414aae5":"def fillNAValues(na_list):\n  for elem in na_list:\n    total[elem] = total[elem].fillna('NA')\n    train[elem] = train[elem].fillna('NA')\n    test[elem] = test[elem].fillna('NA')","71fdaed0":"na_list = ['MiscFeature', 'Alley', 'Fence', 'GarageFinish', 'GarageQual', \n           'GarageCond', 'GarageType', 'BsmtQual', 'BsmtCond', \n           'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'FireplaceQu']","fbe85f0c":"fillNAValues(na_list)","42b40657":"total_lot = (total[(pd.notna(total.LotFrontage)) \n            & (total.LotFrontage < 200) \n            & (total.LotArea < 100000)]\n          [['LotFrontage','LotArea']])\n\ntotal_lot.plot.scatter(x='LotFrontage', y='LotArea')","aac48c8f":"regressor = LinearRegression()\nregressor.fit(total_lot.LotArea.to_frame(), total_lot.LotFrontage)\n\nlot_nan_total = total[pd.isnull(total.LotFrontage)].LotArea\nlot_nan_train = train[pd.isnull(train.LotFrontage)].LotArea\nlot_nan_test = test[pd.isnull(test.LotFrontage)].LotArea\n\nlot_pred_total = regressor.predict(lot_nan_total.to_frame())\nlot_pred_train = regressor.predict(lot_nan_train.to_frame())\nlot_pred_test = regressor.predict(lot_nan_test.to_frame())\n\ntotal.loc[total.LotFrontage.isnull(), 'LotFrontage'] = lot_pred_total\ntrain.loc[train.LotFrontage.isnull(), 'LotFrontage'] = lot_pred_train\ntest.loc[test.LotFrontage.isnull(), 'LotFrontage'] = lot_pred_test","fbc55750":"total_lot = (total[(pd.notna(total.LotFrontage)) \n            & (total.LotFrontage < 200) \n            & (total.LotArea < 100000)]\n          [['LotFrontage','LotArea']])\n\ntotal_lot.plot.scatter(x='LotFrontage', y='LotArea')","bd1e0d87":"total.plot.scatter(x='YearBuilt', y='GarageYrBlt')","5ff95108":"total.YearBuilt.corr(total.GarageYrBlt)","9b83b4a9":"total[total.YearBuilt==total.GarageYrBlt].count().YearBuilt.astype('float')\/total.shape[0]","614f3b3a":"total.GarageYrBlt = total.GarageYrBlt.fillna(total.YearBuilt)\ntrain.GarageYrBlt = train.GarageYrBlt.fillna(train.YearBuilt)\ntest.GarageYrBlt = test.GarageYrBlt.fillna(test.YearBuilt)","475ef72c":"total.loc[total.GarageYrBlt>2100, 'GarageYrBlt'] = total.YearBuilt\ntrain.loc[train.GarageYrBlt>2100, 'GarageYrBlt'] = train.YearBuilt\ntest.loc[test.GarageYrBlt>2100, 'GarageYrBlt'] = test.YearBuilt","47214897":"def replace_with_mode(dfs, cols):\n  for df in dfs:\n    for col in cols:\n      df[col] = df[col].fillna(df[col].mode()[0])","f95d3315":"dfs = [total, train, test]\nna_values = ['Electrical', 'Functional', 'Utilities', \n                'Exterior2nd', 'Exterior1st', 'KitchenQual',\n                'SaleType', 'MSZoning', 'MasVnrType', 'BsmtHalfBath',\n                'BsmtFullBath', 'TotalBsmtSF', 'BsmtUnfSF', \n                'BsmtFinSF2', 'BsmtFinSF1']\n\nreplace_with_mode(dfs, na_values)","37e0d3ca":"total.loc[total.MasVnrArea.isnull(),['MasVnrArea','MasVnrType']]","09b3f405":"total.MasVnrArea = total.MasVnrArea.fillna(0)\ntrain.MasVnrArea = train.MasVnrArea.fillna(0)\ntest.MasVnrArea = test.MasVnrArea.fillna(0)","84dd6ea7":"print(show_missing_data(total))","e0ef8383":"total.loc[total.GarageArea.isnull(),['GarageFinish', 'GarageCars', 'GarageArea']]","c42de01a":"total.GarageCars = total.GarageCars.fillna(0)\ntotal.GarageArea = total.GarageArea.fillna(0)\n\ntrain.GarageCars = train.GarageCars.fillna(0)\ntrain.GarageArea = train.GarageArea.fillna(0)\n\ntest.GarageCars = test.GarageCars.fillna(0)\ntest.GarageArea = test.GarageArea.fillna(0)","3925ea20":"total.groupby('BsmtHalfBath').BsmtHalfBath.count()","8a6ad132":"total.BsmtHalfBath = total.BsmtHalfBath.fillna(0)\ntotal.BsmtFullBath = total.BsmtFullBath.fillna(0)\n\ntrain.BsmtHalfBath = train.BsmtHalfBath.fillna(0)\ntrain.BsmtFullBath = train.BsmtFullBath.fillna(0)\n\ntest.BsmtHalfBath = test.BsmtHalfBath.fillna(0)\ntest.BsmtFullBath = test.BsmtFullBath.fillna(0)","e62f6bfd":"show_missing_data(total)\nshow_missing_data(train)\nshow_missing_data(test)","4ff17ae9":"train.SalePrice = np.log(train.SalePrice)","d9e6527b":"final_total = pd.get_dummies(total).reset_index(drop=True)\n\nfinal_total.shape\n\ny = train.SalePrice\nX = final_total.iloc[:len(y),:]\n\ntest = final_total.iloc[len(y):,:]\n\nprint(X.shape)\nprint(test.shape)","a1d2baea":"fig , ax = plt.subplots(figsize = (10, 5))\n\nsns.boxplot(X.OverallQual, y)","1e45f30a":"model_reg = LinearRegression()\nmodel_reg.fit(X,y)\n\naccuracies = cross_val_score(estimator=model_reg, X=X, y=y, cv=10)\nprint(accuracies.mean())","205a075d":"def print_cv_params(selecter_param, selecter_param_str, parameters):\n  \n  grid_search = GridSearchCV(estimator = model_xgb,\n                            param_grid = parameters,\n                            scoring = 'neg_mean_squared_error',\n                            cv = 10,\n                            n_jobs = -1)\n\n  grid_result = grid_search.fit(X, y)\n\n  print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n  means = grid_result.cv_results_['mean_test_score']\n  stds = grid_result.cv_results_['std_test_score']\n  params = grid_result.cv_results_['params']\n  for mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))\n\n  pyplot.errorbar(selecter_param, means, yerr=stds)\n  pyplot.title(\"XGBoost \"+ selecter_param_str + \" vs Mean Squared Error\")\n  pyplot.xlabel(selecter_param_str)\n  pyplot.ylabel('Mean Squared Error')","f0cda112":"model_xgb = XGBRegressor()","b6d5e9df":"n_estimators = range(50, 800, 150)\nparameters = dict(n_estimators=n_estimators)\n\nprint_cv_params(n_estimators, 'n_estimators', parameters)","e0a4ab0a":"learning_rate = np.arange(0.0, 0.2, 0.03)\nparameters = dict(learning_rate=learning_rate)\n\nprint_cv_params(learning_rate, 'learning_rate', parameters)","52820589":"max_depth = range(0, 7)\nparameters = dict(max_depth=max_depth)\n\nprint_cv_params(max_depth, 'max_depth', parameters)","c149191f":"min_child_weight = np.arange(0.5, 2., 0.3)\nparameters = dict(min_child_weight=min_child_weight)\n\nprint_cv_params(min_child_weight, 'min_child_weight', parameters)","4b243dd2":"gamma = np.arange(.001, .01, .003)\nparameters = dict(gamma=gamma)\n\nprint_cv_params(gamma, 'gamma', parameters)","262bee23":"subsample = np.arange(0.3, 1., 0.2)\nparameters = dict(subsample=subsample)\n\nprint_cv_params(subsample, 'subsample', parameters)","fed57cd8":"colsample_bytree = np.arange(.6, 1, .1)\nparameters = dict(colsample_bytree=colsample_bytree)\n\nprint_cv_params(colsample_bytree, 'colsample_bytree', parameters)","3b03cdb9":"parameters = {  \n                'colsample_bytree':[.6],\n                'subsample':[.9,1],\n                'gamma':[.004],\n                'min_child_weight':[1.1,1.3],\n                'max_depth':[3,6],\n                'learning_rate':[.15,.2],\n                'n_estimators':[1000],                                                                    \n                'reg_alpha':[0.75],\n                'reg_lambda':[0.45],\n                'seed':[42]\n}\n\ngrid_search = GridSearchCV(estimator = model_xgb,\n                        param_grid = parameters,\n                        scoring = 'neg_mean_squared_error',\n                        cv = 5,\n                        n_jobs = -1)\n\nmodel_xgb = grid_search.fit(X, y)\nbest_score = grid_search.best_score_\nbest_parameters = grid_search.best_params_","0f775433":"best_score","ae117a4d":"best_parameters","9386ba07":"accuracies = cross_val_score(estimator=model_xgb, X=X, y=y, cv=10)\naccuracies.mean()","fba580b0":"y_pred = model_xgb.predict(test)\ny_pred = np.floor(np.expm1(y_pred))","540d65f2":"submission = pd.concat([test_ids, pd.Series(y_pred)], \n                        axis=1,\n                        keys=['Id','SalePrice'])","4802810d":"submission.to_csv('sample_submission.csv', index = False)","1c89e8af":"submission","898b3a17":"## Scikit-learn Linear Regression","595065b1":"## Import libraries","3ccc80ef":"## Import data","402dbccb":"This means there's no garage. So the rest of the values should be 0","4197b99f":"## Missing data","c9dfc2c8":"By these graphs we can conclude that ''NA' values are not set. All the null values mean that basically the house has no pool. I'll proceed by filling all these values with 'NA' as the original description described.","bd007c07":"## Data conversion","7f9b09d2":"We are done with missing values!","0bbd76af":"So it follows a linear correlation. I'll execute a linear regression to replace the null values","aff41ccf":"With the GarageYrBlt, my first assumption is that it must be strongly correlated with the YearBuilt. So I'll use a scatterplot to check this out.","32be509c":"For the LotFrontage I'm going to analyze the LotArea","ee9b1cd9":"## XGBoost Regression","afa82fee":"Let's see what's the issue with the garage null values","e7b0519b":"This seems to be a constant, so I'll do the same with the rest of the columns that allow 'NA' values","29d8a89f":"It seems reasonable that in almost every sample the garage is either built the same year as the house or some years after. But just to dig a little bit further, I'll check the percentage of times that they are built on the same year. If the pecentage is high enough, I'll proceed by replacing the null values for the YearBuilt values.","14fcfe2e":"Now it is time to deal with MasVnrArea. This value is the masonry veneer.","19d8ddc1":"This means that null values were the once I've just replaced for the mode (None). So I'll turn them into 0","f931eabd":"And that GarageYrBlt is clearly an outlyer. So let's apply the same logic to it.","068b9b34":"Finally, we take care of BsmtHalfBath and BsmtFullBath "}}