{"cell_type":{"4bbcd928":"code","2d79729a":"code","b2888b02":"code","efc0524e":"code","79b1d662":"code","68c03664":"code","870bd5ab":"code","50abcae4":"code","0d61f314":"code","988d6b6a":"code","374cb6d8":"code","0c8b85e8":"code","b13bb049":"code","8d632d0b":"code","b8f6b821":"code","95b3b95e":"code","0e9b528e":"code","8b22f98c":"code","9f6612f4":"code","a7916e0f":"code","b370228e":"code","addf4c6f":"code","a3ed389a":"code","518e5f26":"code","a0c4b372":"code","1d4c4033":"code","c0e78426":"code","4ff889fe":"code","358360b0":"code","232cee7c":"code","c9a4397b":"code","452ba970":"markdown","10529d5d":"markdown","99607fdf":"markdown","ba073108":"markdown","cf81eed4":"markdown","599c34a1":"markdown","09f3cadf":"markdown"},"source":{"4bbcd928":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2d79729a":"import matplotlib.pyplot as plt # Importing matplotlib for plotting data\n%matplotlib inline","b2888b02":"import seaborn as sns","efc0524e":"df = pd.read_csv(\"\/kaggle\/input\/predicting-a-pulsar-star\/pulsar_stars.csv\")","79b1d662":"df.head()","68c03664":"df.describe()","870bd5ab":"inputs = df.drop(\"target_class\", axis=1)\nlabels = df['target_class']","50abcae4":"labels.head()","0d61f314":"labels.hist(bins=2) # We can see that there is not a lot of pulsar stars so the neural network is more likely to predict that something is not a pulsar","988d6b6a":"inputs.head()","374cb6d8":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F","0c8b85e8":"import torch.optim as optim","b13bb049":"len(inputs.columns)","8d632d0b":"class PulsarStarNN(nn.Module):\n    def __init__(self):\n        super(PulsarStarNN, self).__init__()\n        self.fc1 = nn.Linear(8, 100)\n        self.fc2 = nn.Linear(100, 100)\n        self.fc3 = nn.Linear(100, 2)\n        self.softmax = nn.Softmax(dim=1)\n    def forward(self, x):\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        return self.softmax(self.fc3(x))","b8f6b821":"from sklearn.model_selection import train_test_split","95b3b95e":"train_X, test_X, train_y, test_y = train_test_split(inputs, labels, test_size=0.25)","0e9b528e":"train_X = torch.tensor(train_X.values).float()","8b22f98c":"train_X","9f6612f4":"test_X = torch.tensor(test_X.values).float()\ntrain_y = torch.tensor(train_y.values).long()\ntest_y = torch.tensor(test_y.values).long()","a7916e0f":"train_y","b370228e":"net = PulsarStarNN()","addf4c6f":"net","a3ed389a":"criterion = nn.CrossEntropyLoss()\noptimizer = optim.SGD(net.parameters(), lr=0.01)","518e5f26":"losses = []","a0c4b372":"for epoch in range(1, 201):\n    optimizer.zero_grad()\n    outputs = net(train_X)\n    loss = criterion(outputs, train_y)\n    loss.backward()\n    optimizer.step()\n    losses.append(loss.item())\n    print(\"Epoch {}, Loss: {}\".format(epoch, loss.item()))","1d4c4033":"plt.plot(losses)","c0e78426":"pred_test = net(test_X)\n_, preds_y = torch.max(pred_test, 1)","4ff889fe":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report","358360b0":"accuracy_score(test_y, preds_y)","232cee7c":"print(classification_report(test_y, preds_y))","c9a4397b":"confusion_matrix(test_y, preds_y)","452ba970":"## Training the Network\n\nWe will train the neural network for 200 epochs. Watch the loss as it decreases","10529d5d":"Splitting data to inputs and labels.","99607fdf":"## Testing accuracy\n\nWe plot the losses and test the accuracy. It should get over 90%. You can also see that the loss stays the same after 100 epochs","ba073108":"We are splitting the data to training and testing here","cf81eed4":"## Exploring the Data.\nWe are exploring the data here. We call `df.describe` to see some statistics about the dataset","599c34a1":"## Building the Network\n\nWe are initializing the network below. We will use 3 fully connected layers. The first layer has an input shape of 8 because there are 8 fields","09f3cadf":"# Predicting a Pulsar Star using PyTorch\n\nWe will use PyTorch to predict whether the candidate is a pulsar star\n\nWe will import and load the data in the following cells"}}