{"cell_type":{"ecea3ef4":"code","2206a936":"code","c2657e1c":"code","89815280":"code","cd605c4b":"code","dfb278e5":"code","22f5d746":"code","72a01ec9":"code","306aacb5":"code","aab7e0be":"code","ff4e972c":"markdown","d40a6ad6":"markdown"},"source":{"ecea3ef4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import Imputer\n\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2206a936":"# load training data\ndf_train = pd.read_csv(\"\/kaggle\/input\/disease-classification-challenge\/train.csv\")\ndf_test = pd.read_csv('\/kaggle\/input\/disease-classification-challenge\/test.csv', index_col='Id')\n\ndisplay(df_train.head())\ndisplay(df_test.head())","c2657e1c":"# select columns\npredictor_cols = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', \n                  'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Outcome']\n# Create training predictors data\ndf_train = df_train[predictor_cols]\n\n\ndf_train.dropna(axis=0, subset=['Outcome'], inplace=True)\ny = df_train['Outcome']\nX = df_train.drop(['Outcome'], axis=1).select_dtypes(exclude=['object'])\ntrain_X, valid_X, train_y, valid_y = train_test_split(X.as_matrix(), y.as_matrix(), test_size=0.25)\n\nmy_imputer = Imputer()\ntrain_X = my_imputer.fit_transform(train_X)\nvalid_X = my_imputer.transform(valid_X)","89815280":"from xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error\n\n# model 1\nmy_model_1 = XGBRegressor()\nmy_model_1.fit(train_X, train_y, early_stopping_rounds=5, \n             eval_set=[(valid_X, valid_y)], verbose=False)\n\n# make predictions\npredictions_train = my_model_1.predict(train_X)\npredictions_valid = my_model_1.predict(valid_X)\n\n# print metrics\nprint(\"Mean Absolute Error Train: \" + str(mean_absolute_error(predictions_train, train_y)))\nprint(\"Mean Absolute Error Test: \" + str(mean_absolute_error(predictions_valid, valid_y)))","cd605c4b":"# model 2\nmy_model_2 = XGBRegressor(n_estimators=1000,learning_rate=0.05)\nmy_model_2.fit(train_X, train_y, early_stopping_rounds=5, \n             eval_set=[(valid_X, valid_y)], verbose=False)\n\n# make predictions\npredictions_train = my_model_2.predict(train_X)\npredictions_valid = my_model_2.predict(valid_X)\n\n# print metrics\nprint(\"Mean Absolute Error Train: \" + str(mean_absolute_error(predictions_train, train_y)))\nprint(\"Mean Absolute Error Test: \" + str(mean_absolute_error(predictions_valid, valid_y)))","dfb278e5":"# model 3\nmy_model_3 = XGBRegressor(n_estimators=1000,learning_rate=0.01)\nmy_model_3.fit(train_X, train_y, early_stopping_rounds=5, \n              eval_set=[(valid_X, valid_y)], verbose=False)\n\n# make predictions\npredictions_train = my_model_3.predict(train_X)\npredictions_valid = my_model_3.predict(valid_X)\n\n# print metrics\nprint(\"Mean Absolute Error Train: \" + str(mean_absolute_error(predictions_train, train_y)))\nprint(\"Mean Absolute Error Test: \" + str(mean_absolute_error(predictions_valid, valid_y)))\n","22f5d746":"# model 4\nmy_model_4 = XGBRegressor(n_estimators=1000,learning_rate=0.01)\nmy_model_4.fit(train_X, train_y, early_stopping_rounds=5, \n              eval_set=[(valid_X, valid_y)], verbose=False,\n              eval_metric = [\"auc\",\"mae\"])\n\n# make predictions\npredictions_train = my_model_4.predict(train_X)\npredictions_valid = my_model_4.predict(valid_X)\n\n# print metrics\nprint(\"Mean Absolute Error Train: \" + str(mean_absolute_error(predictions_train, train_y)))\nprint(\"Mean Absolute Error Test: \" + str(mean_absolute_error(predictions_valid, valid_y)))\n","72a01ec9":"# model 5\n# https:\/\/www.analyticsvidhya.com\/blog\/2016\/03\/complete-guide-parameter-tuning-xgboost-with-codes-python\/\nmy_model_5 = XGBRegressor(n_estimators=1000,\n                          learning_rate=0.01, \n                          colsample_bytree=0.8,\n                          objective='binary:logistic',\n                          max_depth = 7\n                         )\nmy_model_5.fit(train_X, train_y, early_stopping_rounds=5, \n              eval_set=[(valid_X, valid_y)], verbose=False,\n              eval_metric = [\"auc\",\"mae\"])\n\n# make predictions\npredictions_train = my_model_5.predict(train_X)\npredictions_valid = my_model_5.predict(valid_X)\n\n# print metrics\nprint(\"Mean Absolute Error Train: \" + str(mean_absolute_error(predictions_train, train_y)))\nprint(\"Mean Absolute Error Test: \" + str(mean_absolute_error(predictions_valid, valid_y)))\n","306aacb5":"display(train_X)","aab7e0be":"# Treat the test data in the same way as training data. In this case, pull same columns.\npredictor_cols = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', \n                  'Insulin', 'BMI', 'DiabetesPedigreeFunction']\n# Create training predictors data\ndf_test = df_test[predictor_cols]\ntest_X = df_test.as_matrix()\n# Use the model to make predictions\npredicted_submission = my_model_5.predict(test_X)\n# We will look at the predicted prices to ensure we have something sensible.\n#print(predicted_submission)\ndf_test['Id'] = df_test.index\n\n\n#Create a  DataFrame with the passengers ids and our prediction regarding whether they survived or not\nsubmission = pd.DataFrame({'Id':df_test['Id'],'Outcome':predicted_submission})\n\n#Visualize the first 5 rows\nsubmission.head()\n\n#Convert DataFrame to a csv file that can be uploaded\n#This is saved in the same directory as your notebook\nfilename = '..\/Diabetes Predictions 1.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","ff4e972c":"# Machine Learning Start","d40a6ad6":"# Generate Answer"}}