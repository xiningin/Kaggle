{"cell_type":{"bdfd2a25":"code","d3b8cbaf":"code","186cdd2b":"code","2e475467":"code","099e5b51":"code","65eeb978":"code","fe1d635c":"code","11015ed4":"code","db447da3":"code","5e3f5ab0":"code","e98b3f2b":"code","615c07cc":"code","94316654":"code","8e9e177f":"code","6c0cd811":"code","486654a8":"code","8bf05ca7":"markdown","68bfa1d8":"markdown","bc2be59a":"markdown","f201ffc7":"markdown","e1c90923":"markdown","8329e099":"markdown","94310b7c":"markdown","0b5fe8a4":"markdown","c8a89e66":"markdown","2a1d156a":"markdown","52b5bfe2":"markdown","1f4a1afc":"markdown","99a67814":"markdown","d18fd406":"markdown","f54937bc":"markdown","9c6b6b49":"markdown"},"source":{"bdfd2a25":"# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nimport sys\n\nimport calendar\nimport glob\nimport math\n\nimport numpy as np\nimport pandas as pd\nimport geopandas\nfrom shapely.geometry import Point, Polygon\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","d3b8cbaf":"YEAR = 2017 #Dataset is from 2017\n\n# Age\nAGE_RANGES = [\"<20\", \"20-29\", \"30-39\", \"40-49\", \"50-59\", \"60+\"]\nAGE_RANGES_LIMITS = [0, 20, 30, 40, 50, 60, np.inf]\nAGE_MIN = 0\nAGE_MAX = 100\n\n# Trip duration\nDURATION_MIN = 2                 #Assume a minimum duration of 2 seconds\nDURATION_MAX = 30 * 24 * 60 * 60 #Assume a maximum duration of 30 days\n\nUSERTYPES = [\"All\", \"Subscriber\", \"Customer\"]\n\n# Plotting\nFONT_SCALE = 1.5","186cdd2b":"df = pd.read_csv(\"\/kaggle\/input\/new-york-city-bike-share-dataset\/NYC-BikeShare-2015-2017-combined.csv\")\ndf.describe()","2e475467":"df['Start time'] = pd.to_datetime(df['Start Time'])\ndf['Stop Time'] = pd.to_datetime(df['Stop Time'])\ndf['Birth Year'] = pd.to_numeric(df['Birth Year'], downcast='integer')\ndf.drop(['Unnamed: 0'], axis=1, inplace=True)\ndf.head()","099e5b51":"df[\"ignore\"] = False\ndf[\"ignore_reason\"] = \"\"","65eeb978":"duplicates = df.duplicated(subset=None, keep='first')\ndf.insert(len(df.columns), \"duplicate\", duplicates, allow_duplicates = True)\nprint(\"Found {} duplicate rows\".format(len(df[duplicates])))","fe1d635c":"df.loc[df[\"Bike ID\"].isna(), \"ignore_reason\"] += \"Bike ID empty; \"\ndf.loc[df[\"Start Station ID\"].isna(), \"ignore_reason\"] += \"Start Station empty; \"\ndf.loc[df[\"End Station ID\"].isna(), \"ignore_reason\"] += \"End Station empty; \"\ndf.loc[~df[\"User Type\"].isin([\"Subscriber\", \"Customer\"]), \"ignore_reason\"] += \"User Type invalid; \"","11015ed4":"df[\"age\"] = YEAR - df[\"Birth Year\"]\nprint(\"Max age: {}.\".format(df[\"age\"].max()))\ndf.loc[df[\"age\"] > AGE_MAX, \"ignore_reason\"] += \"implausible age; \"\ndf.loc[df[\"age\"] < AGE_MIN, \"ignore_reason\"] += \"implausible age; \"\n\nprint(\"Min duration: {}.\".format(df[\"Trip Duration\"].min()))\ndf.loc[df[\"Trip Duration\"] < DURATION_MIN, \"ignore_reason\"] += \"Trip Duration implausible; \"\n\nprint(\"Max duration: {}.\".format(df[\"Trip Duration\"].max()))\ndf.loc[df[\"Trip Duration\"] > DURATION_MAX, \"ignore_reason\"] += \"Trip Duration implausible; \"\n\ndf.loc[df[\"duplicate\"] == True, \"ignore_reason\"] += \"duplicate; \"","db447da3":"df_subscribers = df[df[\"User Type\"] == \"Subscriber\"]\ndf_customers = df[df[\"User Type\"] == \"Customer\"]\nDATAFRAMES = [df, df_subscribers, df_customers]","5e3f5ab0":"from numpy.random import seed\nseed(42)","e98b3f2b":"for i in range(3):\n    dfr = DATAFRAMES[i]\n    print(USERTYPES[i])\n    print(dfr[\"Gender\"].describe())\n    with sns.plotting_context(\"notebook\", font_scale=FONT_SCALE):\n        f = sns.countplot(x = \"Gender\", data=DATAFRAMES[i])\n        plt.show()","615c07cc":"df[\"age_range\"] = pd.cut(df[\"age\"], AGE_RANGES_LIMITS, labels=AGE_RANGES)","94316654":"df_subscribers = df[df[\"User Type\"] == \"Subscriber\"]\ndf_customers = df[df[\"User Type\"] == \"Customer\"]\nDATAFRAMES = [df, df_subscribers, df_customers]","8e9e177f":"for i in range(3):\n    dfr = DATAFRAMES[i]\n    print(USERTYPES[i])\n    print(dfr[\"age\"].describe())\n    for x in AGE_RANGES:\n        print(\"Age {}: {}\".format(x, len(dfr[dfr[\"age_range\"] == x])))\n    with sns.plotting_context(\"notebook\", font_scale=FONT_SCALE):\n        f = sns.countplot(x = \"age_range\", data=DATAFRAMES[i])\n        f.get_figure().get_axes()[0].set_yscale('log')\n        plt.show()","6c0cd811":"df[\"station_total\"] = df.groupby([\"Start Station ID\"])[\"Start Station ID\"].transform(\"count\")\n\nmax_station_total = df[\"station_total\"].max()\ndf[\"station_total_plot\"] = 10 + 99 * df[\"station_total\"] \/ max_station_total #Marker size between 10 and 100\n    \ndf_subscribers = df[df[\"User Type\"] == \"Subscriber\"]\ndf_customers = df[df[\"User Type\"] == \"Customer\"]\nDATAFRAMES = [df, df_subscribers, df_customers]","486654a8":"for i in range(3):\n    dfr = DATAFRAMES[i]\n    print(USERTYPES[i])\n    \n    df_sample = dfr.sample(10000)\n    print(df_sample[\"station_total\"].describe())\n\n    geometry = [Point(xy) for xy in zip(df_sample[\"Start Station Longitude\"], df_sample[\"Start Station Latitude\"])]\n    gdf = geopandas.GeoDataFrame(df_sample, geometry=geometry)\n    f = gdf.plot(figsize=(12, 8), markersize=df_sample[\"station_total_plot\"])\n    plt.show()","8bf05ca7":"# Parameters","68bfa1d8":"## Distribution by gender","bc2be59a":"### Check for other implausible data:","f201ffc7":"Seed random numbers:","e1c90923":"# Classification\ntbc","8329e099":"# Data Validation","94310b7c":"### Check for empty cells:","0b5fe8a4":"## Distribution by time of year (month)\ntbc","c8a89e66":"### Check for duplicates:","2a1d156a":"## Distribution by time of day (hour)\ntbc","52b5bfe2":"Group customers by age range:","1f4a1afc":"# Data Analysis\n> Check for typical differences between subscribers and customers","99a67814":"## Distribution by age","d18fd406":"# Feature Extraction\ntbc","f54937bc":"## Distribution by start station\nTo speed-up plotting, take a subset of only 10.000 trips for plotting geodata","9c6b6b49":"## Load data:"}}