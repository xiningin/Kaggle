{"cell_type":{"60aeb044":"code","8417315f":"code","0ca0b16d":"code","c7faf911":"code","d90e6c4d":"code","dee8c7cc":"code","f3bdd1eb":"code","06ead8b5":"code","f2f36cb0":"code","a4a5dab4":"code","b5a294b6":"code","cb8a72b5":"code","02ac67cb":"code","8f7752d8":"code","1b7628ef":"code","7e3f963b":"code","323e4304":"code","f57c20fc":"code","42e5f9a0":"code","70ed3ea3":"code","5fff3e0e":"code","d271f483":"code","57e48974":"code","6567387f":"code","fb51f290":"markdown","57c9d540":"markdown","1d0ab6d7":"markdown","682792a7":"markdown","ba91bf8d":"markdown","eafba003":"markdown","7af7cff6":"markdown","76dd5658":"markdown","0e5ebae0":"markdown","2c7d4f89":"markdown"},"source":{"60aeb044":"import pandas as pd\nimport numpy as np","8417315f":"# file path\npath_train = '\/kaggle\/input\/titanic\/train.csv'\npath_test = '\/kaggle\/input\/titanic\/test.csv'\n\n# loading CSV\ndata = pd.read_csv(path_train)\ndata_test = pd.read_csv(path_test)","0ca0b16d":"# checking index and columns\n\ndata.head()\n# data.tail()","c7faf911":"# checking number of records, data types and number of non null elements\n\ndata.info()\nprint('*****')\ndata_test.info()","d90e6c4d":"# checking number of null elements\n\nprint(data.isnull().sum())\nprint('*****')\nprint(data_test.isnull().sum())","dee8c7cc":"#statistical report of numerical columns\n\ndata.describe()\n# data.describe(include='object')","f3bdd1eb":"#removing uninformative columns\ndata = data.drop(['Ticket', 'Name', 'PassengerId', 'Cabin'], axis=1)\n\n# adding new column\ndata['Sex_num'] = data.Sex.map({'male': 1, 'female': 0}).astype('float64') # binary gender representation\ndata['Age_missing'] = data.Age.isnull().astype('float64')\ndata['Age_bins'] = pd.cut(data.Age.values, [0, 10, 20, 30, 40, 50, 60, 70, 80])\ndata['Alone'] = (data.Parch + data.SibSp).map(lambda x : x == 0).astype('float64') # checking if passenger was alone or not\n\ndata.head()","06ead8b5":"# survival rate for single people vs. people with family\nax = pd.crosstab(data.Alone, data.Survived).plot.bar(stacked=True)","f2f36cb0":"# survival rate in different classes\nax = pd.crosstab(data.Pclass, data.Survived).plot.bar(stacked=True)\n\n# class rate in survival groups\nax = pd.crosstab(data.Survived, data.Pclass).plot.bar(stacked=True)","a4a5dab4":"# gender rate in survival groups\nax = pd.crosstab(data.Survived, data.Sex).plot.bar(stacked=True)\n\n# survival rate in gender groups\nax = pd.crosstab(data.Sex, data.Survived).plot.bar(stacked=True)","b5a294b6":"# age histogram of different fate groups\nax = data.groupby('Survived').Age.plot.hist(bins = 8, alpha = 0.3)","cb8a72b5":"# survival rate in different age bins\nax = pd.crosstab(data.Age_bins, data.Survived).plot.bar(stacked=True)\nax.set_title('Survival Rate in Age groups')","02ac67cb":"# exploring on age groups\nax = pd.crosstab(data.Age_bins, data.Sex).plot.bar()\nax.set_title('Gender and Age Distribution')\n\nax = pd.crosstab([data.Sex, data.Age_bins], data.Survived).plot.bar()","8f7752d8":"# exploring on age groups\nax = pd.crosstab([(data.Parch>=1) , (data.SibSp>=1)], data.Survived).plot.bar()","1b7628ef":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import KBinsDiscretizer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline","7e3f963b":"# loading CSV\ndata_train = pd.read_csv(path_train)\ndata_test = pd.read_csv(path_test)\n\n# keeping index of test dataset\nsubmission_index = data_test.PassengerId","323e4304":"#removing uninformative columns\ndata_train = data_train.drop(['Ticket', 'Name', 'PassengerId', 'Cabin'], axis=1)\ndata_test = data_test.drop(['Ticket', 'Name', 'PassengerId', 'Cabin'], axis=1)\n\n# adding new column\ndata_train['Age_missing'] = data_train.Age.isnull().astype('float64') # report of missing value\ndata_test['Age_missing'] = data_test.Age.isnull().astype('float64')\n# editing column types\ndata_train['Sex'] = data_train.Sex.map({'male': 1, 'female': 0}).astype('float64') # binary gender representation\ndata_test['Sex'] = data_test.Sex.map({'male': 1, 'female': 0}).astype('float64')\ndata_train['Parch'] = (data_train.Parch >= 1).astype('float64') # binary parch representation\ndata_test['Parch'] = (data_test.Parch >= 1).astype('float64')\ndata_train['SibSp'] = (data_train.SibSp >= 1).astype('float64') # binary sibsp representation\ndata_test['SibSp'] = (data_test.SibSp >= 1).astype('float64')\n\ndata_train.head()","f57c20fc":"# backup to keep data files unchanged\nX = data_train.copy() # creating a copy\nX_test = data_test.copy()\n\n# splitting to dependent and independent features\ny = X.Survived.values # target vector \/ dependent feature\nX = X.drop('Survived', axis=1) # independent features","42e5f9a0":"# transformation for categorical column\ntransformer_cat = Pipeline(steps =[('imputer', SimpleImputer(strategy= 'most_frequent')),\n                                   ('onehot', OneHotEncoder(handle_unknown= 'ignore'))\n                                  ])\n# transformation for numerical column\ntransformer_num = Pipeline(steps= [('imputer', SimpleImputer(strategy= 'mean')),\n                                   ('standard', StandardScaler())\n                                  ])\n# transformation package\npreprocessor = ColumnTransformer(transformers= [('categorical', transformer_cat, ['Pclass', 'Embarked']),\n                                                ('numerical', transformer_num, ['Age', 'Fare']),\n                                               ], remainder= 'passthrough')","70ed3ea3":"# transformation for categorical column\ntransformer_cat = Pipeline(steps =[('imputer', SimpleImputer(strategy= 'most_frequent')),\n                                   ('onehot', OneHotEncoder(handle_unknown= 'ignore'))\n                                  ])\n# transformation for numerical column\ntransformer_num = Pipeline(steps= [('imputer', SimpleImputer(strategy= 'mean')),\n                                   ('standard', StandardScaler())\n                                  ])\n\n# transformation for age column\ntransformer_age = Pipeline(steps= [('imputer', SimpleImputer(strategy= 'constant', fill_value= -10)),\n                                   ('biner', KBinsDiscretizer(n_bins= 9, encode= 'onehot-dense', strategy= 'uniform'))\n                                  ])\n# transformation package\npreprocessor = ColumnTransformer(transformers= [('categorical', transformer_cat, ['Pclass', 'Embarked']),\n                                                ('numerical', transformer_num, ['Fare']),\n                                                ('age', transformer_age, ['Age'])\n                                               ], remainder= 'passthrough')","5fff3e0e":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.metrics import confusion_matrix, accuracy_score","d271f483":"# model definition\nmodels = {'Logistic Regression': LogisticRegression(),\n          'Random Forest': RandomForestClassifier(n_estimators= 50, max_leaf_nodes= 25)}\n\n# pipeline package\nmodel_pipeline = Pipeline(steps= [('preprocessor', preprocessor),\n                                  ('model', models['Logistic Regression'])])\n\n# cross validation\nscores = cross_validate(model_pipeline, X, y, cv= 5,\n                        scoring= 'accuracy', return_train_score= True)\nprint('Train Accuracy', round(scores['train_score'].mean() * 100, 2), '%')\nprint('Validation Accuracy', round(scores['test_score'].mean() * 100, 2), '%')","57e48974":"#fitting on full data\nmodel_pipeline.fit(X, y)\n\n# predicting the full data to check its result\npred = model_pipeline.predict(X)\nprint(round(accuracy_score(y, pred) * 100, 2), '%')\n\n# confusion matrix \ncm = pd.DataFrame(confusion_matrix(y, pred), index = ['Really Died', 'Really Survived'], columns = ['Died', 'Survived'])\nprint(cm)\n\nprint(pred.mean())\nprint(y.mean())","6567387f":"# predicting the test data for submission\nsubmission_prediction = model_pipeline.predict(X_test)\n\n# creating output dataframe in a format of competition\noutput = pd.DataFrame({'PassengerId': submission_index, 'Survived': submission_prediction})\noutput.to_csv('submission.csv', index=False) # exporting CSV file","fb51f290":"## Checking Data","57c9d540":"## Alt 2","1d0ab6d7":"## Dataset Modifying","682792a7":"## EDA","ba91bf8d":"## Predicting Test Data","eafba003":"## Model Selection & Validation","7af7cff6":"## Full Training","76dd5658":"## Alt 1","0e5ebae0":"## Data Preproccessing","2c7d4f89":"## Loading Data"}}