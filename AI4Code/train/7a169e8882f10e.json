{"cell_type":{"b6a237ab":"code","496ceaa4":"code","10969717":"code","62827812":"code","a87c2d17":"code","acf60dca":"code","05ec90c7":"code","8ec7ca8b":"code","3f02b009":"markdown"},"source":{"b6a237ab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","496ceaa4":"import pandas as pd\nfrom pandas import DataFrame\nfrom sklearn.datasets import load_diabetes","10969717":"diabetes_obj = load_diabetes() # A function to load in the diabetes dataset\ndiabetes_obj.data    # Dataset preview","62827812":"diabetes_obj.feature_names, diabetes_obj.target_filename, diabetes_obj.data_filename #Preview Features Name in datasets ","a87c2d17":"np.unique(diabetes_obj.target) #Find unique value from target","acf60dca":"diabetes = DataFrame(diabetes_obj.data, columns=diabetes_obj.feature_names,\n                 index=pd.Index([i for i in range(diabetes_obj.data.shape[0])])).\\\n           join(DataFrame(diabetes_obj.target, columns=pd.Index([\"species\"]), index=pd.Index([i for i in range(diabetes_obj.target.shape[0])])))\ndiabetes #collaborating data and target so, we can easily know the information from the data","05ec90c7":"diabetes.count(), diabetes.mean(), diabetes.median() #Get Count, Mean, and Median Data Separated by dtype: int64,","8ec7ca8b":"diabetes.max(), diabetes.min(), diabetes.std() #find max, min, and standard deviation value from the data","3f02b009":"> **Descriptive Statistics**"}}