{"cell_type":{"daa4f5ce":"code","6f4b6b6d":"code","3a220cd5":"code","bb51f382":"code","8feca6df":"code","dd5a6433":"code","fdae3e78":"code","ce293a6f":"code","054b38b9":"code","007ce673":"code","c337373d":"code","8e6a27da":"code","1b883048":"code","127de5b1":"code","488e9a0e":"code","f88cead9":"code","7735ebb7":"code","2001540f":"code","a2d323ce":"code","69f10126":"code","a165a881":"code","0811d454":"code","33ddf350":"code","9c927adb":"code","ed15cf7f":"code","81dfb5d2":"code","f0f6ba06":"code","4e89c3cd":"code","590effcc":"code","d1856680":"code","d341489d":"code","917cd50c":"code","669793af":"code","b5a6f567":"code","940ca3f0":"code","7ef2a5bd":"code","83854312":"code","6b65ff33":"code","c7aa0d94":"code","3ae1645a":"code","9433d23b":"code","b7da0435":"code","66f55f61":"code","05ce0ae9":"code","55c8e09e":"code","a4536822":"code","e1fee6e9":"code","d0bea80d":"code","3cd0a625":"code","cc88a326":"code","ed7b2326":"code","e220220b":"code","100a5727":"code","e770b2fe":"code","3ce21104":"code","6c8a64dc":"code","7fd8d4a2":"code","d66277fc":"code","f2ea2f2c":"code","e41d01e5":"code","09081cdb":"code","da8f1a84":"code","60cb3fcb":"code","b9721e5a":"code","80d33aed":"code","ffc5c15e":"code","138642f4":"code","74446f07":"code","206f8505":"code","91354811":"code","0fd1a2ee":"code","97b9b905":"code","80bd334b":"code","799702f1":"code","8fc7ab7e":"code","5978e5a0":"code","f4ca3f33":"code","4d9790b9":"code","3e2f73e9":"code","284463a1":"code","58db3ccc":"code","9eb1ace6":"code","6090a754":"code","2b763497":"code","fdf113e0":"code","7a4d0951":"code","298a71ee":"code","b82991f3":"code","afdf807d":"code","d985f52f":"code","dd26366c":"code","12026802":"code","dd8c41d4":"code","ebf1cc8f":"code","d85598f3":"code","37017712":"code","68e45f64":"code","ea02c511":"code","98618dca":"code","19a536e1":"code","b12f51c9":"code","a551d720":"code","f4d4bc5f":"code","81ce70f8":"code","99eff874":"code","05aaf4a3":"code","a717da63":"code","438be517":"code","32487760":"code","71309559":"code","7193140e":"code","70c38149":"code","60c8d37e":"code","a7834af6":"code","44059fcd":"code","f40ee4eb":"code","4a389f26":"code","b55fb85f":"code","09ecadf6":"code","99a6db8d":"code","b5a9d5a1":"code","800f41c7":"code","74e77e96":"code","4642af97":"code","b45dc2c6":"code","76de803c":"code","38dc18b2":"code","7ac7caf9":"code","5c1dad29":"code","8384fce7":"code","da495a06":"code","7b9497c6":"code","a8c05b50":"code","42fb2dab":"code","58cdc27e":"code","47774619":"code","22cd8710":"code","a1d25995":"code","b93baa97":"code","78f156dd":"code","4bc585aa":"code","10dce89a":"code","a622acc9":"code","afe1fd29":"code","606d56a5":"code","a8886c33":"code","6cd7ce84":"code","b71945ce":"code","8122ed76":"code","8cb7e720":"code","4a139c94":"code","f95e10e3":"code","6fbeccaa":"code","1612206d":"code","99a25bae":"code","79fd493a":"code","443ef831":"code","b32753db":"code","7670170c":"code","fd964804":"code","56c309a8":"code","aa9843de":"code","361b207d":"code","4cc160ed":"code","f8aee889":"code","bf01ac46":"code","832d4a0d":"code","b312cf3d":"code","372109cb":"code","a9dee5c4":"code","e97fb269":"code","b87d2f8e":"code","a18f045b":"code","82743b24":"code","d36d231a":"code","9345d2fe":"code","549b45e4":"code","0e56c87d":"code","d9878eec":"code","39aaabaf":"code","e3bf1313":"code","f93d1f64":"code","6a9205dc":"code","e157c985":"code","a74baff5":"code","5794bc8d":"code","15044621":"code","9408b8bb":"code","6666ae58":"code","e0550692":"code","ec6da882":"code","aff3cb0e":"code","278e038c":"code","1a3e865e":"code","3868f332":"code","9cf5421a":"code","6b837f14":"code","251b7d52":"code","035a7681":"code","e7a9c820":"code","7247fae5":"code","1b757331":"code","e338b394":"code","722ccd94":"code","77bda6d7":"code","1727f66a":"code","75317926":"code","f2725504":"code","220b9188":"code","2b1e190e":"code","16300b7e":"code","4abd1e47":"code","789a01a1":"code","19e15de9":"code","d58eb187":"code","758f0946":"code","417822a1":"code","42bc02b0":"code","82da6221":"code","15410904":"code","1f9a1d87":"code","c5bd7b4e":"code","99f22d76":"code","b8c78033":"code","42007fdb":"code","82feb0dd":"code","c02843f6":"code","ebf5805f":"code","439e4e8d":"code","6e8dba85":"code","0a827f4a":"code","962f627c":"code","4cea6fcf":"code","3b406cb9":"code","03587f34":"code","409778aa":"code","ead27b61":"code","328e5f81":"code","b1285ebb":"code","1bce80d7":"code","9c41cd69":"code","8c56e063":"code","8a5cc424":"code","7267a360":"code","b21a4573":"code","1bdcfd11":"code","d859d0f4":"code","c8eaeab8":"code","5405e191":"code","0336ecb3":"code","d0d9575d":"code","8466e1f2":"code","a345e43b":"code","893c7f2f":"code","b110b194":"code","ed856898":"code","032d64a5":"code","d9ba5591":"code","606141bc":"code","0055ca3f":"code","484818b6":"code","065e394a":"code","358f3626":"code","1ff8bc79":"code","a57e81d9":"code","8e045583":"code","116f5aef":"code","8dae4a26":"code","d012a12a":"code","17b1af9a":"code","6a535caf":"code","79233c95":"code","5c0e7f12":"code","e1817db5":"code","3b9dc94a":"code","2c0cee21":"code","607926eb":"code","b7b36492":"code","27c10e10":"code","60d1081a":"code","9deb655d":"code","34f2e847":"code","4a09b871":"code","a9bffe2a":"code","44bfc909":"code","3584a367":"code","d015a427":"code","ddc7d099":"code","94927ef8":"code","dcc0398d":"code","3d671dee":"code","1dde5a98":"code","164a1d5d":"code","4fd33930":"code","ac60a21d":"code","d41ae5df":"code","b179275b":"code","9b46e4b8":"code","3e456f71":"code","5e075c31":"code","202f735c":"code","54461870":"code","129160e1":"code","92644131":"code","51a11109":"code","74f7160b":"code","33a36b69":"code","6294c908":"code","9d1679d4":"code","ee139007":"code","ad4996ab":"code","92ae3ba9":"code","d11c502e":"code","16283507":"code","6bcb32d5":"code","1a597147":"code","f3f7a378":"code","3961d856":"code","c24b32b3":"code","43c9a900":"code","ad7298f7":"code","ddd54104":"code","6cb9273d":"code","e2543c72":"code","0955916a":"code","9cad21f6":"code","66a48210":"code","3b14443e":"code","156b2ce1":"code","48d7103e":"code","6429fc69":"code","17b96b3f":"code","50037c2a":"code","ebc45a6d":"code","edc25c0f":"code","51bf3a83":"code","01a60db7":"code","489b3cfa":"code","020cd4cb":"code","53b3c867":"code","9c5e5b1b":"code","50c0b033":"code","186f84ea":"code","33404821":"code","44fe5a36":"code","e02f3d7e":"code","9b3aa142":"code","c05e47eb":"markdown","d23f6588":"markdown","b8b5ad0c":"markdown","e733de2e":"markdown","6b265ba6":"markdown","3b92a8d6":"markdown","eebda754":"markdown","07535272":"markdown","b19f5cc3":"markdown","c1fbe02a":"markdown","07d292b8":"markdown","6bb7e103":"markdown","ad2c81a6":"markdown","b7266b9c":"markdown","03acceaf":"markdown","1accd653":"markdown","972235c9":"markdown","47b4fa50":"markdown","aad153e1":"markdown","5c92d7bd":"markdown","2877c4e5":"markdown","ec95e68e":"markdown","a816a1e6":"markdown","a3bf7526":"markdown","657eac61":"markdown","5fc04526":"markdown","e3712e2a":"markdown","7c9eae93":"markdown","4a6b3cec":"markdown","ae033cf4":"markdown","07142bd3":"markdown","d44c69c0":"markdown","0d1ce1a6":"markdown","8d5bb3a5":"markdown","10cded0f":"markdown","8fe4a01b":"markdown","f7f297be":"markdown","63e3b428":"markdown","9fe05cc7":"markdown","14ad60a1":"markdown","d1906135":"markdown","a1e2d4dd":"markdown","4fdf49f5":"markdown","fff89118":"markdown","473e6b1d":"markdown","cfd03622":"markdown","a95f6e72":"markdown","2d8c3b7d":"markdown","17a18a9f":"markdown","3feb342c":"markdown","fd8addba":"markdown","bb73d090":"markdown","60ee7240":"markdown","1d582255":"markdown","21e233ce":"markdown","fffed67a":"markdown","bb67bb6c":"markdown","d0feb210":"markdown","eb370db5":"markdown","3b634046":"markdown","335b6048":"markdown","30a36d0b":"markdown","90302cf5":"markdown","0c4fe5c0":"markdown","23fbe6e8":"markdown","83adb888":"markdown","3043f752":"markdown","95c332a5":"markdown","265287aa":"markdown","9b9d0a46":"markdown","95cffcc0":"markdown","512d47d6":"markdown","d8c63eeb":"markdown","c020f885":"markdown","28a13740":"markdown","053413e8":"markdown","f1952b04":"markdown","92c92832":"markdown","8f7813e8":"markdown","ddc0f237":"markdown","c43f086f":"markdown","6e17ee37":"markdown"},"source":{"daa4f5ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6f4b6b6d":"import matplotlib.pyplot as plt\nimport math\nimport numpy as np\n%matplotlib inline","3a220cd5":"np.__version__","bb51f382":"lst=[1,2,3,4]","8feca6df":"lst","dd5a6433":"arr=np.array(lst)","fdae3e78":"arr[0]=arr[0]*10\narr","ce293a6f":"my_tuple=(12,23.5,3,4,5)\nmy_tuple2=(23,2+4j, 6.8,98.6)\narr2=np.array(my_tuple) #here all of the integers will be promoted into float numbers\narr3=np.array(my_tuple2) #here all of the elements in the array will be promoted into a complex number\nprint(arr2,arr3)","054b38b9":"lst=[[1,2,3],[23,32,34],[43,45,65]]\nlst","007ce673":"np.arange(0,20,2)","c337373d":"np.arange(30,dtype=float) # we can assing what kind of data type we want to create with np.arange() function","8e6a27da":"np.arange(10,dtype=complex) # here we create an array with complex numbers","1b883048":"# we can find the size of the array with len() function in python or with size builtin method in  numpy\nlen(np.arange(10,dtype=complex))","127de5b1":"np.arange(10,dtype=complex).size # here we can get the same result","488e9a0e":"np.zeros(4) #This creates an array with 4 zeros\n#Burada 4 lu 0 dizisi olusturuyoruz","f88cead9":"np.zeros((3,5,6))# we can create a matrices of zeros like this in a tuple,\n#first represents number of matrices, second is for rows and the third one is for columns \n#Burada cok boyutlu matrisler olusturabiliriz.Yapmamiz gereken bir parantez acarak icine kac sira ve sutun istedigimizi yazmak\n#Bu ornekte 3 boyutlu, 5 sira ve 6 sutundan olusan 0 dizisi olusturuyoruz\n#Numpy araylarinin kac boyutlu oldugunu icindeki parantes sayisina gore soyleriz:\n#Asagidakindakinde 3 parantes oldugundan 3 boyutludur ve bunlara matris denir","7735ebb7":"np.zeros((3,6)) #here we create 2 D array with zeros by 3 rows and 6 columns\n#Bu ornekte ise 2 parantezli yani 2 boyutlu 3 sira ve 6 kolondan olusan bir numpy O dizisi olusturuyoruz:","2001540f":"np.ones(6)","a2d323ce":"np.ones((3,4))","69f10126":"np.ones((3,4,5))","a165a881":"np.ones(10,dtype=\"int32\") #This will retursn integers instead of floating numbers because we changed the dtype parameter\n#Bu ondalikli sayi degil de tam sayi donecek cunku dtype parameterini degistirdik","0811d454":"np.zeros(5,dtype=complex) #This will return complex numbers\n#Bu sefer de data tipine kompleks sayi atadik:","33ddf350":"np.linspace(1,3,100) #here we create an array with evenly spaced 100 numbers between 1 and 3\n#Mesela burada 1 ile 3 arasinda birbirine esit uzaklikta 100 tane sayi uretiyoruz","9c927adb":"np.linspace(0,1,1000,dtype=complex) # we can choose datatype with dtype parameter inside the function\n#burada data tipini dtype ile secebiliriz, burada ben compleks sayi sectim\n#0 ile 1 arasinda 1000 tane kompleks sayi urettiriyorum.","ed15cf7f":"np.linspace(1.9,2.3,4) #we can assign also floating numbers as the start or stop value\n#burada baslangic ve bitis degerini ondalik sayi olarak da atayabilirim\n#Bu ornekte 1.9 ile 2.4 arasinda 4 esit aralikli sayi uretmesini istedim","81dfb5d2":"np.linspace(5,15,9,retstep=True) # if we choose retstep=True, it will also return the step size\n#Eger restep=True yazrsak belirledigimiz aralikta hangi aralikta sayi artirdigini da gosterir\n#Mesela bu ornegimizde asagida goruldugu uzere her sayinin bir onceki ve bir sonraki sayi arasindaki aralik 1.25 ","f0f6ba06":"np.eye(3)","4e89c3cd":"np.eye(7)\n#Dikkat edersek sol en ust ile sa\u00e5 en alt arasindaki kose boyunca hep 1 var ve diger sayilar 0\n#Burada 7 li dizi uretiyoruz usttekinde 3 lu uretmistik. Icindeki sayiyi degistirerek kacli dizi olusturacagimizi belirleriz","590effcc":"np.random.rand(9) #this created one dimensional arrays","d1856680":"np.random.rand(9,4) #this creates two dimensional arrays with 9 rows and 4 columns","d341489d":"np.random.rand(9,4,3) #this created 9 randomlu distrubited 3 Darrays with 4 rows and 3 columns","917cd50c":"np.random.randn(20) # this returns 1 D normally distributed numbers around 0","669793af":"np.random.randn(3,4) #this returns 2 D normally distributed numbers around 0","b5a6f567":"np.random.randn(3,4,2) #this returns 3 D normally distributed numbers around 0","940ca3f0":"np.random.randint(0,100) #this returns a single random integer between 0 and 100","7ef2a5bd":"np.random.randint(0,100,10) #this returns 10 random integers between 0 and 100","83854312":"arr=np.random.randint(0,1000,10)\narr","6b65ff33":"arr.reshape(2,5) #this returns my variable as two D array with two rows and 5 columns","c7aa0d94":"arr.max()","3ae1645a":"arr.argmax() #This returns the index of the maximum value of the array","9433d23b":"arr.min() #this returns the minimum value of the array","b7da0435":"arr.argmin() #Ths method returns the index of the minimum value of the array","66f55f61":"arr.shape #This method returns the the shape of the array, how many dimension and columns the array has","05ce0ae9":"arr2=arr.reshape(2,5)\narr2","55c8e09e":"arr2.shape #this shows that our array is 2D with 2 rows and 5 columns","a4536822":"# we can also learn how many dimensions an array has with a function of numpy\narr=np.arange(100).reshape(5,5,4)\narr.ndim #this shows that the array is 3 D","e1fee6e9":"arr.size #return number of elements","d0bea80d":"arr.dtype #return the data type of the array","3cd0a625":"arr2.dtype #this shows that our array is integer","cc88a326":"arr2.itemsize #This returns how many bytes the items have in the array","ed7b2326":"a=np.arange(6)\nb=np.arange(5,11)\nprint(a,b)\nnp.inner(a,b) ","e220220b":"a=a.reshape(2,3)\nb=b.reshape(2,3)\nprint(a,b)\nnp.inner(a,b)","100a5727":"new_array=np.arange(70).reshape(2,7,5)\nnew_array.sum() #return the sum of all elements in the array","e770b2fe":"a","3ce21104":"a.sum(axis=0) #This will returns the sum by column the array ","6c8a64dc":"a.sum(axis=1) #This will return the sum by rows","7fd8d4a2":"#It is like indexing with list\narr[2]","d66277fc":"arr[2:8]","f2ea2f2c":"arr[:5] #from the beginning to the fifth element of the array","e41d01e5":"arr[4:] # number from the fourth to the last one","09081cdb":"arr","da8f1a84":"# we can assign numbers from various indices\narr[0:3]=10 # here we assign 10 from the first to the third elemnt of the array\narr","60cb3fcb":"slice=arr[:5] \nslice","b9721e5a":"slice[:]=100 #\nslice","80d33aed":"arr","ffc5c15e":"arr_copy=arr.copy()\narr_copy","138642f4":"arr_copy[:]=100\narr_copy","74446f07":"# we can create our own array\narray_2d=np.array([[12,32,43],[23,43,5],[4556,67,76]])\narray_2d","206f8505":"# or we can use numpy functions\narray_2d_2=np.random.randint(0,100,10)","91354811":"array_2d_2","0fd1a2ee":"array_2d_2=array_2d_2.reshape(5,2)","97b9b905":"array_2d[0]","80bd334b":"array_2d[0][1]","799702f1":"arr=np.arange(35).reshape((7,5))\narr","8fc7ab7e":"arr[3][3]","5978e5a0":"array_2d[0,1] # I get the same number with this indexing type","f4ca3f33":"array_2d[1,2]","4d9790b9":"array_2d_2","3e2f73e9":"array_2d_2[:3, 1: ] # This will return the rows between 0 and 2 and the columns from the second one to the last","284463a1":"new_array=np.arange(50).reshape(5,10)\nnew_array","58db3ccc":"new_array[1:3, 4:6]","9eb1ace6":"my_arr=np.arange(100).reshape(5,5,4)\nmy_arr","6090a754":"my_arr[0]","2b763497":"my_arr[0,2] #This will return the third row of the first part of the array","fdf113e0":"#we can reach the columns by adding the third value \nmy_arr[0,2,3] #This will return the fourth column of the third row of the first part of the array","7a4d0951":"my_arr[0,2,:2] #This will return the first and second columns of the third row of the first part of the array ","298a71ee":"arr=np.random.randint(0,1000,20)\narr","b82991f3":"arr >100","afdf807d":"bool_arr= arr > 100\nbool_arr\n","d985f52f":"arr[bool_arr] # here we get only number that comply with the boolean array is true, or number bigger than 100\n#this return only the elements where the bolean array is true","dd26366c":"arr[arr>100] #this returns the number > 100","12026802":"arr[arr <100] #this returns the number < 100","dd8c41d4":"arr[arr % 2 == 0] #this returns only the even numbers","ebf1cc8f":"arr[arr % 2 == 1] #this returns only the odd numbers","d85598f3":"array_2d[array_2d > 30].reshape(2,3) #This returns the only numbers bigger than 30 and reshape it as 2d array with 2 rows and 3 columns","37017712":"arr=np.array([12,14,32,34,4,5,6,7,45,43,23])\narr[arr % 7 == 0] # return the number divisible by 7","68e45f64":"arr[(arr % 7 == 0) & (arr >10)] # return the number divisible by 7 and greater than 10","ea02c511":"my_tuple","98618dca":"#in python data structures, when we * with it will add the same elements at the end how many times we want\nmy_tuple *3 # thiw will enlarg my tuple 3 times ","19a536e1":"#However when we use the same * operation it will multiple every element in the numpy array\narr ","b12f51c9":"arr *3","a551d720":"arr3*4","f4d4bc5f":"arr=np.arange(1,11)\narr","81ce70f8":"arr+arr","99eff874":"arr-arr","05aaf4a3":"arr*arr","a717da63":"arr\/arr","438be517":"#If we do a mathematical operation, it will effect every index in the array\narr+100","32487760":"arr*2","71309559":"arr=np.arange(0,11)\narr","7193140e":"#If we divide 0 in the array with 0, it will return nan instead of giving an error and returns inf for the other numbers\narr\/arr","70c38149":"arr\/0","60c8d37e":"arr**3","a7834af6":"np.sqrt(arr) # we can get the squareroot of the array","44059fcd":"np.exp(arr) #this returns e exponetial of th numbers","f40ee4eb":"arr","4a389f26":"np.exp(4)","b55fb85f":"# We can also do trigonometric functions:\nnp.sin(arr)","09ecadf6":"np.cos(arr)","99a6db8d":"np.tan(arr)","b5a9d5a1":"np.log(arr) # we can also get the logaritma of the numbers in the array","800f41c7":"arr2=np.arange(20,31)\narr2","74e77e96":"np.add(arr2,34)# we can also use np function to do mathematical operations","4642af97":"np.subtract(arr2,25)","b45dc2c6":"arr2","76de803c":"np.negative(arr2)# we return negative all the number in the array","38dc18b2":"np.remainder(arr,4) #this returns the remainders of the numbers when divided by 4","7ac7caf9":"np.mod(arr2,5) #this returns the remainders according to mod 5","5c1dad29":"np.log(arr2)# natural logaritma with base e","8384fce7":"np.log10(arr2) #logaritma with base 10","da495a06":"arr1=np.array([12,23,43,54])\narr1","7b9497c6":"arr2=arr1\narr1 is arr2 #This shows that both of the arrays are equal and have the same address space in the memory","a8c05b50":"#We can test also with the id() function to be sure about whether the arrays have the same memory address space\nid(arr1)","42fb2dab":"id(arr2) #id() function also proves that they have the same memory location","58cdc27e":"# we can also test the value equality\narr1==arr2 #This shows that they have also the same values","47774619":"#for this reason a change one of the array will affect the other array\narr1[0]=0\narr1","22cd8710":"arr2 #as we can see, the changes are also made in the second array","a1d25995":"arr3=np.copy(arr1)\narr3","b93baa97":"arr1 #as we can see they have the same values","78f156dd":"arr1 is arr3 #This returns false because because they have just the same values but different arrays","4bc585aa":"id(arr1)","10dce89a":"id(arr3) #as we can see they have different memory address, so changes in one array will not affect the other one","a622acc9":"arr3[0]=100\narr3","afe1fd29":"arr1#The changes in the copied array have not any impact on the first array","606d56a5":"arr=np.arange(24).reshape(2,4,3)\narr","a8886c33":"np.append(arr,100) #It will add the element at the end of the array and create 1 D array","6cd7ce84":"#we can create another variable and append elements to it and reshape it\narr2=np.append(arr,[1,23,34,54,65,76])\narr2","b71945ce":"arr2=arr2.reshape(3,2,5)","8122ed76":"arr2","8cb7e720":"arr3=arr2.copy()*10 # here we create another array by multiplying every elemnent of the exisiting array and copying it","4a139c94":"arr3","f95e10e3":"arr2.shape","6fbeccaa":"arr3.shape ","1612206d":"#both arr2 and arr3 have the same shape, so we can append them and create a new array\narr4=np.append(arr2,arr3,axis=0) # here we create another array by adding exisiting array in axis=0\narr4  #axis=0 represents rows and add the value into the array's rows","99a25bae":"arr4.shape #Now we have 6 rows because axis=0 adds into the rows","79fd493a":"arr5.shape # Now we have 4 columns because axis=1 adds into the columns","443ef831":"arr6=np.append(arr2,arr3,axis=2) #axis=2 changes the elements in the 3 dimension\narr6","b32753db":"arr6.shape","7670170c":"arr7=np.array(arr6).reshape(60)\narr7","fd964804":"arr7.ndim","56c309a8":"np.insert(arr7,0,444) #this adds the value 444 into the first element of the array","aa9843de":"arr7=arr7.reshape(6,10)\narr7","361b207d":"np.insert(arr7,0,444,axis=1) #This add 444 into the first column of the array","4cc160ed":"np.insert(arr7,0,444,axis=0) #this insert 444 into the first row of the array","f8aee889":"#We can also insert values for 3 D arrays\narr7=arr7.reshape(3,5,4)\narr7","bf01ac46":"np.insert(arr7, 0, 444,axis=0)","832d4a0d":"np.insert(arr7,0,444,axis=1)","b312cf3d":"np.insert(arr7,0,444,axis=2)","372109cb":"arr7=arr7.reshape(60)\narr7","a9dee5c4":"np.delete(arr7,0,axis=0) #this will delete the first element in the 1D arrays","e97fb269":"arr7=arr7.reshape(6,10)\narr7","b87d2f8e":"np.delete(arr7,0,axis=0) #This will delete the first row of the array","a18f045b":"np.delete(arr7,0,axis=1) #This will delete the first column of the 2D array","82743b24":"arr7=arr7.reshape(3,5,4)\narr7","d36d231a":"np.delete(arr7,0,axis=0) #the first row is deleted","9345d2fe":"np.delete(arr7,0,axis=1)#This will delete every first row of the element of the array","549b45e4":"np.delete(arr7,0,axis=2) #This will delete the first columns of the array","0e56c87d":"arr7","d9878eec":"arr=np.arange(100)\narr","39aaabaf":"np.flip(arr) #The order of the array is upended","e3bf1313":"arr=arr.reshape(10,10)\narr","f93d1f64":"np.flip(arr)","6a9205dc":"np.flip(arr,axis=1)","e157c985":"np.fliplr(arr) #this function gives the same outcome","a74baff5":"np.flipud(arr)","5794bc8d":"arr=np.arange(24)\narr","15044621":"np.roll(arr,2) #Every element in the array rolled 2 placesto the right, the last two elements comes to the first place","9408b8bb":"np.roll(arr,-2) #If we use negative numbers, the rolling takes place to the opposite direction","6666ae58":"arr=arr.reshape(4,6) #np.roll() functions the same as for 2d and 3d arrays\narr","e0550692":"np.roll(arr,3)","ec6da882":"arr=arr.reshape(4,3,2)\narr","aff3cb0e":"np.roll(arr,1) ","278e038c":"np.rot90(arr)","1a3e865e":"arr=np.arange(24)\narr","3868f332":"np.transpose(arr) # np.transpose() function returns the array itself in 1d arrays ","9cf5421a":"arr=arr.reshape(4,6)\narr","6b837f14":"np.transpose(arr)# np.transpose() exchanges the rows with the columns","251b7d52":"arr=arr.reshape(2,3,4)\narr","035a7681":"np.transpose(arr)","e7a9c820":"arr=np.arange(24).reshape(4,6)\narr","7247fae5":"np.swapaxes(arr,0,1) #This gives the same result as np.transpose() function do","1b757331":"np.transpose(arr)","e338b394":"arr=arr.reshape(3,2,4)\narr","722ccd94":"np.swapaxes(arr,0,1)","77bda6d7":"np.swapaxes(arr,0,2)","1727f66a":"arr =np.linspace(0,2,24)\narr\n","75317926":"np.tile(arr,2) #This repeats the array two times and show the in the same array","f2725504":"arr=arr.reshape(4,6)\narr","220b9188":"np.tile(arr,2)","2b1e190e":"np.tile(arr.reshape(3,2,4),2)","16300b7e":"a1=np.arange(18)\na1\n","4abd1e47":"a2=np.arange(20,38)\na2","789a01a1":"np.concatenate((a1,a2)) # we have to write the array in a tuple when we use np.concatenate() function","19e15de9":"a1=a1.reshape(3,6)\na1","d58eb187":"a2=a2.reshape(3,6)\na2","758f0946":"np.concatenate((a1,a2),axis=0)#This concatenates arrays by addign new rows","417822a1":"np.concatenate((a1,a2),axis=1)#This concatenates arrays by addign new columns","42bc02b0":"a1=a1.reshape(2,3,3)\na1","82da6221":"a2=a2.reshape(2,3,3)\na2","15410904":"np.concatenate((a1,a2),axis=0)","1f9a1d87":"np.concatenate((a1,a2),axis=1)","c5bd7b4e":"np.concatenate((a1,a2),axis=2)","99f22d76":"arr=np.arange(100)\narr","b8c78033":"np.split(arr,2) #This will split 1d array into 2 1d array","42007fdb":"arr1,arr2=np.split(arr,2) #we get each of the separated arrays with these two variables\narr1","82feb0dd":"arr=np.arange(60).reshape(3,5,4)\narr","c02843f6":"np.split(arr,3) #this will create 3 equal 3d array","ebf5805f":"arr1,arr2,arr3=np.split(arr,3) # we can assign the splitted parts into new variables like this\narr1","439e4e8d":"np.split(arr,2,axis=2)","6e8dba85":"#we can also populate arrays with loops as follows:\narr=np.arange(24).reshape(4,3,2)\narr","0a827f4a":"for i in range(4):\n    arr[i]=np.random.randn(3,2)\narr","962f627c":"arr=np.arange(100).reshape(5,5,4)\narr","4cea6fcf":"for i in range(5):\n    arr[i]=np.random.randint(0,100) #here we populate our array with random integers between 0 and 100\narr","3b406cb9":"np.ravel(arr)","03587f34":"arr=np.copy(test_array)\narr","409778aa":"arr2=np.arange(9,18)\narr2","ead27b61":"np.add(arr,arr2) #the arrays should be in the same dimension with the same number of elements","328e5f81":"np.square(arr)","b1285ebb":"np.log10(arr)","1bce80d7":"np.exp(arr)","9c41cd69":"np.mod(arr,5)","8c56e063":"np.remainder(arr,5)","8a5cc424":"np.power(arr,arr2)","7267a360":"degrees=np.array([0,30,45,90,120,150,180,210,230,270,300,330,360])\ndegrees","b21a4573":"np.sin(degrees) #This is not working because we need to convert degrees into radians to make the functions work","1bdcfd11":"rad=np.radians(degrees)\nrad","d859d0f4":"np.sin(rad)","c8eaeab8":"np.cos(rad)","5405e191":"np.arctan(rad)","0336ecb3":"np.hypot(3,4) #This will return the hypotenus of two number in 90 degrees according to pytegoras theorem","d0d9575d":"print(arr)\nprint(\"********************\")\nprint(arr2)","8466e1f2":"np.greater(arr,arr2) #compare two numpy arrays and return True or False index by index inside arrays","a345e43b":"np.less(arr,arr2)","893c7f2f":"np.equal(arr,arr2)","b110b194":"arr3=arr2\/arr\narr3","ed856898":"np.isfinite(arr) #return True or false whether the elements in the array is finite or not","032d64a5":"np.isfinite(arr3) #this returns false for the first because it is infinite","d9ba5591":"np.isinf(arr3) #return True or false whether the elements in the array is infinite or not","606141bc":"np.isnan(arr)","0055ca3f":"arr4=np.negative(arr3)\narr4","484818b6":"np.fabs(arr4) #this returns absolute values of the elements of the array","065e394a":"np.nextafter(1.8, 2.0) # Return the next floating-point value after x1 towards x2, element-wise.","358f3626":"# two find the root of a quadratic function, we have to use 3 coefficient\n#For example to find the rootd of x**2 - 2x +1\nnp.roots([1,-2,1]) #It returns 1 as the root of the function as expected","1ff8bc79":"np.roots([1,-5,6]) # the roots of x**2 - 5x +6","a57e81d9":"np.roots([1,3,8]) # we can also find the roots which are complex numbers as follows:","8e045583":"np.roots([1, -12, 10, 7, -10]) #finding the roots of x**4 \u2212 11x**3 + 9x**2 + 11x \u2013 10","116f5aef":"def f(x):\n    return (x+1)**3 - (x)**3","8dae4a26":"f(2)","d012a12a":"np.testing.assert_equal(f(2),198) # This returns with error report","17b1af9a":"np.testing.assert_equal(f(2),19) #f(2) equals 19, but testing function returns nothing\n#In order to get the result we need to convert it to an universal function","6a535caf":"numpy_function=np.frompyfunc(f,1,1)\nnumpy_function","79233c95":"test_array=np.arange(9)\ntest_array","5c0e7f12":"numpy_function(test_array) # with our universal function we can use our f function and get the result for numpy arrays","e1817db5":"f(test_array)","3b9dc94a":"np.outer(test_array,test_array) # we get every combination of the product of the elements in the array","2c0cee21":"np.outer(f(test_array),f(test_array)) #This is the result of the our python function with np.outer()","607926eb":"np.outer(numpy_function(test_array),numpy_function(test_array)) #This is the result of the our numpy function with np.outer()","b7b36492":"def isinteger(x): #here we create our own function to determine whether a number is integer or not\n    return np.equal(np.mod(x,1),0)","27c10e10":"isinteger(9)","60d1081a":"isinteger(3.4)","9deb655d":"arr=np.linspace(1,3,12).reshape(4,3)\narr\n","34f2e847":"arr.T","4a09b871":"arr=np.array([1,7,19,37,61,91,127,169,217,271,331])\narr #Lets find the parttern in this array","a9bffe2a":"np.diff(arr,1) #This will return the first order difference between sequencial elements of the array\n#With the first order difference we can see the pattern in the array.","44bfc909":"np.diff(arr,2) #Here we can see that there is difference of 6 when it comes to the second order difference","3584a367":"np.diff(arr,3)","d015a427":"import sympy as  sm\n # with this way we can easily use all of the functions of the sympy library","ddc7d099":"from sympy.abc import x,y ","94927ef8":"sm.diff(x**3,x) #This returns the first derivative ","dcc0398d":"sm.diff(x**3,x,2) #this returns the second derivative","3d671dee":"sm.diff(x**3,x,3)","1dde5a98":"sm.diff(x**3,x,4) ","164a1d5d":"#The derivative above shows that there should be a relationship between our cubic function and the array pattern\n#In order to test this hypothesis, we will create another function to prove it\ndef test_hypo(x):\n    return (x+1)**3 - x**3","4fd33930":"test_hypo(arr)","ac60a21d":"test_hypo(np.arange(11))","d41ae5df":"arr # as we can see, our hypothesis and pattern for guessing the array design is true","b179275b":"import scipy as sp\nfrom scipy.stats import norm #This enables us to get normally distributed numbers","9b46e4b8":"random_numbers= sp.randn(99) #This is the same as np.random.rand()\nrandom_numbers","3e456f71":"type(random_numbers) # As we can see scip produces numpy arrays with its functions","5e075c31":"random_numbers.mean() # we can get the mean of the numbers with mean() function","202f735c":"random_numbers=np.random.randn(10000)","54461870":"np.mean(random_numbers)","129160e1":"random_numbers=np.random.randn(100000000)","92644131":"random_numbers.mean() #As we can see in these examples, the more we increase the number of the sample, the closer we come to the 0","51a11109":"random_numbers.max() # here we get maximum value","74f7160b":"random_numbers.min() # here we get minimum value","33a36b69":"np.min(random_numbers) # we can also use numpy function to find instead of methods","6294c908":"np.median(random_numbers)","9d1679d4":"#we can get these valus within a numpy array\nstatistical_values=np.array([np.min(random_numbers),np.max(random_numbers),np.median(random_numbers), np.std(random_numbers),np.mean(random_numbers)])\nstatistical_values","ee139007":"np.max(random_numbers)- np.mean(random_numbers)","ad4996ab":" np.mean(random_numbers) - np.min(random_numbers)","92ae3ba9":"print(\"Standart Deviation :\",np.std(random_numbers), \" and The variance of the array :\",np.var(random_numbers))","d11c502e":"# we can get all of these statistical information with just one function from scipy\nsp.stats.describe(random_numbers)","16283507":"my_dist=norm(loc=100,scale=15) #here we assign 100 as our mean and 15 as our standart deviation and can create any number we want\nlst=list()\nfor i in np.arange(10):\n    print(my_dist.rvs())\n    lst.append(my_dist.rvs())\n    ","6bcb32d5":"lst","1a597147":"arr=np.array(lst) #here we create our own numpy array by transforming the  random numbers in the list into a numpy array\narr ","f3f7a378":"data_set=np.random.randn(10000)\ndata_set\n","3961d856":"data_set.shape","c24b32b3":"plt.hist(data_set,50,facecolor=\"g\",alpha=0.75)\n#plt.axis([40,160,0,0.03])","43c9a900":"np.__version__","ad7298f7":"np.set_printoptions(precision=2)","ddd54104":"arr=np.linspace(0,4,10)\narr","6cb9273d":"np.flip(arr)","e2543c72":"arr[::-1] #This way also work","0955916a":"arr *3 # here we multiply every element by three times","9cad21f6":"np.tile(arr,3)#here we enlarge the array by three times","66a48210":"arr2=np.zeros(20)\narr2","3b14443e":"arr2[::5]","156b2ce1":"arr2[::5]=4\narr2","48d7103e":"arr=np.arange(9).reshape(3,3)\narr","6429fc69":"arr.T # we can do it with a method","17b96b3f":"np.transpose(arr) # or we can do it with a function","50037c2a":"np.eye(5)","ebc45a6d":"np.random.randint(0,100,30)","edc25c0f":"np.random.randint(0,100,30).mean()","51bf3a83":"arr=np.ones(64).reshape(8,8)\narr","01a60db7":"arr[1:-1,1:-1]=0\narr\n","489b3cfa":"arr=np.random.randn(10)\narr","020cd4cb":"np.sort(arr)","53b3c867":"np.max(arr)","9c5e5b1b":"arr.max()","50c0b033":"arr.max()= 44444 # we can not assign it with this way\narr","186f84ea":"arr=np.sort(arr) #with sorting\narr[-1]=44444\narr","33404821":"arr[arr.argmax()]=444444\narr","44fe5a36":"arr.flags.writeable=False # as we can see we can not assig any value after this operation\narr[0]=122","e02f3d7e":"arr=np.arange(9).reshape(3,3)\narr","9b3aa142":"for i, v in np.ndenumerate(arr):\n    print(i,v)","c05e47eb":"# 6.1. Math Function:","d23f6588":"split(ary, indices_or_sections, axis=0)\n    Split an array into multiple sub-arrays as views into `ary`.\n    Parameters\n    ----------\n    ary : ndarray\n        Array to be divided into sub-arrays.\n    indices_or_sections : int or 1-D array","b8b5ad0c":"We can add and remove elements in an array","e733de2e":"arr5=np.append(arr2,arr3,axis=1) #axis=1 represents columns and add the value into the array's columns\narr5","6b265ba6":"roll(a, shift, axis=None)\n    Roll array elements along a given axis.\n    \n    Elements that roll beyond the last position are re-introduced at\n    the first.\n    \n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    shift : The number of places by which elements are shifted.","3b92a8d6":"np.random.randint Return random integers from `low` (inclusive) to `high` (exclusive).","eebda754":"Create an 8x8 checker board with alternating zeros and ones","07535272":"# 6.Universal Functions in Numpy:","b19f5cc3":"Create a 5x5 identity matrix with integer components","c1fbe02a":"numpy.roots(p)[source]\nReturn the roots of a polynomial with coefficients given in p.\n\nThe values in the rank-1 array p are coefficients of a polynomial. If the length of p is n+1 then the polynomial is described by:\n\np[0] * x**n + p[1] * x**(n-1) + ... + p[n-1]*x + p[n]","07d292b8":"# 5.Joining and Splitting Arrays:","6bb7e103":"np.eye Return a 2-D array with ones on the diagonal and zeros elsewhere.\nBu fonksiyon kosegeni hep 1 olan 2 boyutlu array(dizi uretir)","ad2c81a6":"np.random.randn Return a sample (or samples) from the \"standard normal\" distribution.","b7266b9c":"Statistical Analysis","03acceaf":"arr.max() Return the maximum along a given axis.","1accd653":"np.linspace() can create evenly spaced array within a designated interval\nlinspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)\nnp.linspace() bir fonksiyondur ve belirledigimiz aralikta belirledigimiz sayida sayi uretmemizi saglar\nParantez icine ilk once baslangic degeri, sonra ulasmak istedigimiz deger ve sonra da kac adet sayi uretmek istedigimizi yazariz\n","972235c9":"Here is the list of data types in numpy:\nAsagida dtype olarak atayabilecegimiz tum numpy data tipleri ve kapsadiklari sayi araliklari var:\n1 bool_ (sadece dogru ya da yanlis)\n\nBoolean (True or False) stored as a byte\n\n2\t\nint_\n\nDefault integer type (same as C long; normally either int64 or int32)\n\n3\t\nintc\n\nIdentical to C int (normally int32 or int64)\n\n4\t\nintp\n\nInteger used for indexing (same as C ssize_t; normally either int32 or int64)\n\n5\t\nint8\n\nByte (-128 to 127)\n\n6\t\nint16\n\nInteger (-32768 to 32767)\n\n7\t\nint32\n\nInteger (-2147483648 to 2147483647)\n\n8\t\nint64\n\nInteger (-9223372036854775808 to 9223372036854775807)\n\n9\t\nuint8\n\nUnsigned integer (0 to 255)\n\n10\t\nuint16\n\nUnsigned integer (0 to 65535)\n\n11\t\nuint32\n\nUnsigned integer (0 to 4294967295)\n\n12\t\nuint64\n\nUnsigned integer (0 to 18446744073709551615)\n\n13\t\nfloat_\n\nShorthand for float64\n\n14\t\nfloat16\n\nHalf precision float: sign bit, 5 bits exponent, 10 bits mantissa\n\n15\t\nfloat32\n\nSingle precision float: sign bit, 8 bits exponent, 23 bits mantissa\n\n16\t\nfloat64\n\nDouble precision float: sign bit, 11 bits exponent, 52 bits mantissa\n\n17\t\ncomplex_\n\nShorthand for complex128\n\n18\t\ncomplex64\n\nComplex number, represented by two 32-bit floats (real and imaginary components)\n\n19\t\ncomplex128\n\nComplex number, represented by two 64-bit floats (real and imaginary components)","47b4fa50":"Indexing and Selecting with 2 D Arrays","aad153e1":"frompyfunc(func, nin, nout, *[, identity])\n    \n    Takes an arbitrary Python function and returns a NumPy ufunc.\nParameters\n    ----------\n    func : Python function object\n        An arbitrary Python function.\n    nin : int\n        The number of input arguments we are passing to the function\n    nout : int\n        The number of objects returned by `func`: number of scalars that our function will return","5c92d7bd":"Conditional Selection:","2877c4e5":"np.delete(arr, obj, axis=None) function ","ec95e68e":"# A Detailed Numpy Library Tutorial","a816a1e6":"we can create our own numpy array cia np.arange() method\narange([start,] stop[, step,], dtype=None)","a3bf7526":"np.ravel() function converts 2 or 3 d arrays into 1 d array","657eac61":"\nadd(x1, x2, \/[, out, where, casting, order, \u2026]) :Add arguments element-wise.\n\nsubtract(x1, x2, \/[, out, where, casting, \u2026]): Subtract arguments, element-wise.\n\nmultiply(x1, x2, \/[, out, where, casting, \u2026]): Multiply arguments element-wise.\n\nmatmul(x1, x2, \/[, out, casting, order, \u2026]): Matrix product of two arrays.\n\ndivide(x1, x2, \/[, out, where, casting, \u2026]): Returns a true division of the inputs, element-wise.\n\nlogaddexp(x1, x2, \/[, out, where, casting, \u2026]): Logarithm of the sum of exponentiations of the inputs.\n\nlogaddexp2(x1, x2, \/[, out, where, casting, \u2026]):Logarithm of the sum of exponentiations of the inputs in base-2.\n\ntrue_divide(x1, x2, \/[, out, where, \u2026]):Returns a true division of the inputs, element-wise.\n\nfloor_divide(x1, x2, \/[, out, where, \u2026]):Return the largest integer smaller or equal to the division of the inputs.\n\nnegative(x, \/[, out, where, casting, order, \u2026]): Numerical negative, element-wise.\n\npositive(x, \/[, out, where, casting, order, \u2026]):Numerical positive, element-wise.\n\npower(x1, x2, \/[, out, where, casting, \u2026]):First array elements raised to powers from second array, element-wise.\n\nfloat_power(x1, x2, \/[, out, where, \u2026]):First array elements raised to powers from second array, element-wise.\n\nremainder(x1, x2, \/[, out, where, casting, \u2026]):Return element-wise remainder of division.\n\nmod(x1, x2, \/[, out, where, casting, order, \u2026]):Return element-wise remainder of division.\n\nfmod(x1, x2, \/[, out, where, casting, \u2026]):Return the element-wise remainder of division.\n\ndivmod(x1, x2[, out1, out2], \/ [[, out, \u2026]): Return element-wise quotient and remainder simultaneously.\n\nabsolute(x, \/[, out, where, casting, order, \u2026]):Calculate the absolute value element-wise.\n\nfabs(x, \/[, out, where, casting, order, \u2026]):Compute the absolute values element-wise.\n\nrint(x, \/[, out, where, casting, order, \u2026]):Round elements of the array to the nearest integer.\n\nsign(x, \/[, out, where, casting, order, \u2026]):Returns an element-wise indication of the sign of a number.\n\nheaviside(x1, x2, \/[, out, where, casting, \u2026]):Compute the Heaviside step function.\n\nconj(x, \/[, out, where, casting, order, \u2026]):Return the complex conjugate, element-wise.\n\nconjugate(x, \/[, out, where, casting, \u2026]):Return the complex conjugate, element-wise.\n\nexp(x, \/[, out, where, casting, order, \u2026]):Calculate the exponential of all elements in the input array.\n\nexp2(x, \/[, out, where, casting, order, \u2026]):Calculate 2**p for all p in the input array.\n\nlog(x, \/[, out, where, casting, order, \u2026]):Natural logarithm, element-wise.\n\nlog2(x, \/[, out, where, casting, order, \u2026]):Base-2 logarithm of x.\n\nlog10(x, \/[, out, where, casting, order, \u2026]):Return the base 10 logarithm of the input array, element-wise.\n\nexpm1(x, \/[, out, where, casting, order, \u2026]):Calculate exp(x) - 1 for all elements in the array.\n\nlog1p(x, \/[, out, where, casting, order, \u2026]):Return the natural logarithm of one plus the input array, element-wise.\n\nsqrt(x, \/[, out, where, casting, order, \u2026]):Return the non-negative square-root of an array, element-wise.\n\nsquare(x, \/[, out, where, casting, order, \u2026]):Return the element-wise square of the input.\n\ncbrt(x, \/[, out, where, casting, order, \u2026]):Return the cube-root of an array, element-wise.\n\nreciprocal(x, \/[, out, where, casting, \u2026]):Return the reciprocal of the argument, element-wise.\n\ngcd(x1, x2, \/[, out, where, casting, order, \u2026]):Returns the greatest common divisor of |x1| and |x2|\n\nlcm(x1, x2, \/[, out, where, casting, order, \u2026]):Returns the lowest common multiple of |x1| and |x2|","5fc04526":"Some Exercises:\n","e3712e2a":"We can create our own normally distributed number with norm function from scipy.stats library\nnorm(loc=, scale=) creates a normal continuous random variable.\n |  \n |  The location (``loc``) keyword specifies the mean.\n |  The scale (``scale``) keyword specifies the standard deviation.","7c9eae93":"Create a sorted vector that contain 'n' random numbers","4a6b3cec":"Without sorting, replace largest element in random array with the value 44444","ae033cf4":"tile(A, reps)\n    Construct an array by repeating A the number of times given by reps.\n      Parameters\n    ----------\n    A : array_like\n        The input array.\n    reps : array_like\n        The number of repetitions of `A` along each axis.","07142bd3":"np.ones() and np.zeros() uses floating numbers as defalut data type, but we can change this with dtype parameter\nnp.ones() ve np.zeros() fonksiyonlari default deger olarak ondalikli sayi kullanir ama biz bunu tam sayi veya kompleks sayiya dtype parameteri ile degistirebiliriz:","d44c69c0":"When we use np.concatenate() function with 2D or 3D arrays, all the input array dimensions for the concatenation axis must match exactly","0d1ce1a6":"# 7.Special Exercises with Numpy:","8d5bb3a5":"All trigonometric functions use radians when an angle is called for. The ratio of degrees to radians is 180^{\\circ}\/\\pi.\n\nsin(x, \/[, out, where, casting, order, \u2026]): Trigonometric sine, element-wise.\n\ncos(x, \/[, out, where, casting, order, \u2026]): Cosine element-wise.\n\ntan(x, \/[, out, where, casting, order, \u2026]): Compute tangent element-wise.\n\narcsin(x, \/[, out, where, casting, order, \u2026]): Inverse sine, element-wise.\n\narccos(x, \/[, out, where, casting, order, \u2026]): Trigonometric inverse cosine, element-wise.\n\narctan(x, \/[, out, where, casting, order, \u2026]):Trigonometric inverse tangent, element-wise.\n\narctan2(x1, x2, \/[, out, where, casting, \u2026]):Element-wise arc tangent of x1\/x2 choosing the quadrant correctly.\n\nhypot(x1, x2, \/[, out, where, casting, \u2026]): Given the \u201clegs\u201d of a right triangle, return its hypotenuse.\n\nsinh(x, \/[, out, where, casting, order, \u2026]): Hyperbolic sine, element-wise.\n\ncosh(x, \/[, out, where, casting, order, \u2026]): Hyperbolic cosine, element-wise.\n\ntanh(x, \/[, out, where, casting, order, \u2026]): Compute hyperbolic tangent element-wise.\n\narcsinh(x, \/[, out, where, casting, order, \u2026]): Inverse hyperbolic sine element-wise.\n\narccosh(x, \/[, out, where, casting, order, \u2026]): Inverse hyperbolic cosine, element-wise.\n\narctanh(x, \/[, out, where, casting, order, \u2026]): Inverse hyperbolic tangent element-wise.\n\ndegrees(x, \/[, out, where, casting, order, \u2026]): Convert angles from radians to degrees.\n\nradians(x, \/[, out, where, casting, order, \u2026]): Convert angles from degrees to radians.\n\ndeg2rad(x, \/[, out, where, casting, order, \u2026]): Convert angles from degrees to radians.\n\nrad2deg(x, \/[, out, where, casting, order, \u2026]): Convert angles from radians to degrees.","10cded0f":"# 6.3. Comparison Functions:","8fe4a01b":"np.ones() creates an aray of ones\nBu fonksiyon np.zeros() ile ayni ozelliklere sahip, tek farki sadece 1'lerden olusan dizi olusturmasi","f7f297be":"Find the mean of a vector with 30 random elements. Can you guess the approximate value for the mean?","63e3b428":"Creating Magic Squares:","9fe05cc7":"numpy.insert(arr, obj, values, axis=None)[source]\nInsert values along the given axis before the given indices.\n obj : int, slice or sequence of ints","14ad60a1":"Numpy Attributes:","d1906135":"Create a 3x3 matrix whose elements equal 0 through 8","a1e2d4dd":"append(arr, values, axis=None)\n    Append values to the end of an array.","4fdf49f5":"with np.copy() function we can make a copy of a numpy array without affecting the copied array","fff89118":"Finding Patterns with Numpy","473e6b1d":"numpy.flip(m, axis=None)[source]\nReverse the order of elements in an array along the given axis.\n\nThe shape of the array is preserved, but the elements are reordered.","cfd03622":"# 2. Numpy Array Indexing and Selecting:","a95f6e72":" variable.reshape() Returns an array containing the same data with a new shape.","2d8c3b7d":"arr=np.array(lst)\narr","17a18a9f":"outer(a, b, out=None)\n    Compute the outer product of two vectors.\n    \n    Given two vectors, ``a = [a0, a1, ..., aM]`` and\n    ``b = [b0, b1, ..., bN]``,\n    the outer product [1]_ is::\n    \n      [[a0*b0  a0*b1 ... a0*bN ]\n       [a1*b0    .\n       [ ...          .\n       [aM*b0            aM*bN ]]","3feb342c":"Triple elements in array","fd8addba":"we can create specific types of arrays with np.zeros() or np.ones() methods\nnp.zeros() ile 0 lardan olusan numpy dizisi olustururuz","bb73d090":"concatenate((a1, a2, ...), axis=0, out=None)\n    \n    Join a sequence of arrays along an existing axis.","60ee7240":"There are two ways of indexing:The general format is arr_2d[row][col] or arr_2d[row,col]. I recommend usually using the comma notation for clarity.","1d582255":"Transpose like Functions\ntranspose(a, axes=None)\n    Reverse or permute the axes of an array; returns the modified array.","21e233ce":"# 6.4. Floating Functions:","fffed67a":"np.random.rand() creates randomly numbers between 0 and 1","bb67bb6c":"np.inner returns Inner product of two arrays.But arrays should be in the same dimension with the same length of elements","d0feb210":"We can do the same with the 3D arrays:","eb370db5":"Print enumerated values from a 3x3 NumPy array","3b634046":"Comparison functions\ngreater(x1, x2, \/[, out, where, casting, \u2026]):Return the truth value of (x1 > x2) element-wise.\n\ngreater_equal(x1, x2, \/[, out, where, \u2026]):Return the truth value of (x1 >= x2) element-wise.\n\nless(x1, x2, \/[, out, where, casting, \u2026]):Return the truth value of (x1 < x2) element-wise.\n\nless_equal(x1, x2, \/[, out, where, casting, \u2026]):Return the truth value of (x1 =< x2) element-wise.\n\nnot_equal(x1, x2, \/[, out, where, casting, \u2026]):Return (x1 != x2) element-wise.\n\nequal(x1, x2, \/[, out, where, casting, \u2026]):Return (x1 == x2) element-wise.\n\n","335b6048":"we need to make a copy of the original array before making changes because the changes in the second one will effect the original as we can see above","30a36d0b":"We can get the same result without using a variable as follows:","90302cf5":"swapaxes(a, axis1, axis2)\n    Interchange two axes of an array.","0c4fe5c0":"Make an array read-only (immutable)","23fbe6e8":"\ndiff(a, n=1, axis=-1, prepend=<no value>, append=<no value>)\n    Calculate the n-th discrete difference along the given axis.","83adb888":"What version of NumPy are you using?","3043f752":"Array indexing with arr_2d[row,col]:# They start with 0","95c332a5":"In a numpy every element should be in the same type, if not other elements are promoted automatically into the higher type","265287aa":"Create array with 20 zeros; every fifth element equals four","9b9d0a46":"Create and numpy array and Display array elements in reverse order","95cffcc0":"There are currently more than 60 universal functions defined in numpy on one or more types, covering a wide variety of operations.","512d47d6":"Indexing and Selecting Chunks of Array:","d8c63eeb":"# 1. Numpy Arrays , Creating and General Useful Methods","c020f885":"arr.argmax Return indices of the maximum values along the given axis.","28a13740":"# 3.Numpy Operations:","053413e8":"arr # as we can see above, the original array is not effected","f1952b04":"# 6.2. Trigonometric Functions:","92c92832":"# 4. Manipulating Arrays in Numpy:","8f7813e8":"Universal Functions:\nA universal function (or ufunc for short) is a function that operates on ndarrays in an element-by-element fashion, supporting array broadcasting, type casting, and several other standard features. \n\nEach universal function takes array inputs and produces array outputs by performing the core function element-wise on the inputs (where an element is generally a scalar, but can be a vector or higher-order sub-array for generalized ufuncs). ","ddc0f237":"Transpose the rows and columns","c43f086f":"\nisfinite(x, \/[, out, where, casting, order, \u2026]):Test element-wise for finiteness (not infinity or not Not a Number).\n\nisinf(x, \/[, out, where, casting, order, \u2026]):Test element-wise for positive or negative infinity.\n\nisnan(x, \/[, out, where, casting, order, \u2026]):Test element-wise for NaN and return result as a boolean array.\n\nisnat(x, \/[, out, where, casting, order, \u2026]):Test element-wise for NaT (not a time) and return result as a boolean array.\n\nfabs(x, \/[, out, where, casting, order, \u2026]): Compute the absolute values element-wise.\n\nsignbit(x, \/[, out, where, casting, order, \u2026]):Returns element-wise True where signbit is set (less than zero).\n\ncopysign(x1, x2, \/[, out, where, casting, \u2026]): Change the sign of x1 to that of x2, element-wise.\n\nnextafter(x1, x2, \/[, out, where, casting, \u2026]): Return the next floating-point value after x1 towards x2, element-wise.\n\nspacing(x, \/[, out, where, casting, order, \u2026]): Return the distance between x and the nearest adjacent number.\n\nmodf(x[, out1, out2], \/ [[, out, where, \u2026]):Return the fractional and integral parts of an array, element-wise.\n\nldexp(x1, x2, \/[, out, where, casting, \u2026]):Returns x1 * 2**x2, element-wise.\n\nfrexp(x[, out1, out2], \/ [[, out, where, \u2026]):Decompose the elements of x into mantissa and twos exponent.\n\nfmod(x1, x2, \/[, out, where, casting, \u2026]):Return the element-wise remainder of division.\n\nfloor(x, \/[, out, where, casting, order, \u2026]):Return the floor of the input, element-wise.\n\nceil(x, \/[, out, where, casting, order, \u2026]):Return the ceiling of the input, element-wise.\n\ntrunc(x, \/[, out, where, casting, order, \u2026]): Return the truncated value of the input, element-wise.\n\n","6e17ee37":"We can do some mathematical operations"}}