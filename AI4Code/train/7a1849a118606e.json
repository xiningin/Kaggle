{"cell_type":{"df2d3365":"code","54302d01":"code","ba8c4ecd":"code","240913a8":"code","cad036de":"code","a62d6b8b":"code","afa2cf51":"code","cb619cfb":"code","08c603cc":"code","775240db":"code","a4b65422":"code","b1e35c46":"code","9652b405":"code","75dfbce5":"code","95ecbe9a":"code","a9c8e8d2":"code","b1dea65b":"code","425be0b9":"code","231548cf":"code","c6cc3d33":"code","d9e751cc":"code","83cec74f":"code","c50c0b2e":"code","acfcbedd":"code","6d7ee485":"code","b07347c0":"code","37b44c2e":"code","9246e92e":"code","b5272be5":"code","026e77ba":"code","98b07c1d":"code","353ad6c2":"code","45181b35":"code","868ec688":"code","a4488cfe":"markdown","8bdd88f9":"markdown","29225172":"markdown","cbcf72ce":"markdown","d5628f80":"markdown","b5d12a94":"markdown","2323cb8c":"markdown","a62de4f2":"markdown","9c166577":"markdown","9db88f4f":"markdown","22cd7ca8":"markdown","9338cada":"markdown","e3fffeea":"markdown","b1ad4523":"markdown","17bbe3be":"markdown","bdaaeed8":"markdown","86b076ea":"markdown","27f31ea5":"markdown","6f20cd3f":"markdown","b384492e":"markdown","c58b011f":"markdown","a90974e2":"markdown","c64ccd4c":"markdown","0f760e1b":"markdown","69f07440":"markdown","236a684b":"markdown"},"source":{"df2d3365":"#Importing Libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\n%matplotlib inline\n","54302d01":"#Loading Dataset\nurl = '..\/input\/data-analysis-of-911-emergency-calls\/911.csv'\ndata = pd.read_csv(url, header='infer')","ba8c4ecd":"data.shape","240913a8":"#checking for null \/ missing values\ndata.isna().sum()","cad036de":"#dropping index with missing or null values\ndata = data.dropna()\n","a62d6b8b":"data.reset_index(inplace=True, col_level=1, drop=True)","afa2cf51":"data.head()","cb619cfb":"data = data.drop(columns=['desc','zip','e'], axis=1)","08c603cc":"# Function to extract emergency type\ndef extract_emergency_type(txt):\n    #res = re.findall(r\"^\\w+\",txt)\n    result = ''.join(re.findall(r\"^\\w+\",txt))\n    return result\n\n#Applying the function to column = title\ndata['type'] = data['title'].apply(extract_emergency_type)","775240db":"data.head()","a4b65422":"# drop column = title\ndata = data.drop(columns='title',axis=1)\n","b1e35c46":"# rename the column = twp\ndata = data.rename(columns={'twp':'area'})\n\n","9652b405":"# re-arrange the columns\ndata = data[['timeStamp','type','area','addr','lat','lng']]\n\n","75dfbce5":"#changing to lower case\ndata['type'] = data['type'].str.lower()\ndata['area'] = data['area'].str.lower()\ndata['addr'] = data['addr'].str.lower()","95ecbe9a":"data.head()","a9c8e8d2":"# -- Processing the TimeStamp column\n\ndata.timeStamp = pd.to_datetime(data.timeStamp, format='%Y-%m-%d %H:%M:%S')\ndata['year'] = data.timeStamp.apply(lambda x: x.year)\ndata['month'] = data.timeStamp.apply(lambda x: x.month)\ndata['day'] = data.timeStamp.apply(lambda x: x.day)\ndata['hour'] = data.timeStamp.apply(lambda x: x.hour)\n","b1dea65b":"data.head()","425be0b9":"#Taking backup\ndata_backup = data.copy()","231548cf":"# Emergencies per Month in 2016\nemrgncy_monthly = pd.DataFrame(data[data['year']==2016].groupby('month').size())\nemrgncy_monthly['MEAN'] = data[data['year']==2016].groupby('month').size().mean()\n\nplt.figure(figsize=(18,6))\ndata[data['year']==2016].groupby('month').size().plot(label='Emergencies per month')\nemrgncy_monthly['MEAN'].plot(color='red', linewidth=2, label='Average', ls='--')\nplt.title('Total Monthly Emergencies in 2016', fontsize=14)\nplt.xlabel('Month')\nplt.xticks(np.arange(1,9))\nplt.ylabel('Number of emergencies')\nplt.tick_params(labelsize=10)\nplt.legend(prop={'size':10})","c6cc3d33":"# Emergency Types per Month in 2016\nemrgncy_type_yrly = data[data['year']==2016].pivot_table(values='area', index='month', columns='type', aggfunc=len).plot(figsize=(15,6), linewidth=2)\nplt.title('Emergency Types per Month in 2016', fontsize=16)\nplt.xlabel('Month')\nplt.xticks(np.arange(1,9))\nplt.legend(prop={'size':10})\nplt.tick_params(labelsize=10)","d9e751cc":"#Daily Emergencies in July 2016\nemrgncy_daily = pd.DataFrame(data[(data['year']==2016) & (data['month']==7)].groupby('day').size())\nemrgncy_daily['MEAN'] = data[(data['year']==2016) & (data['month']==7)].groupby('day').size().mean()\n\nplt.figure(figsize=(18,6))\ndata[(data['year']==2016) & (data['month']==7)].groupby('day').size().plot(label='Emergencies per day in July')\nemrgncy_daily['MEAN'].plot(color='red', linewidth=2, label='Average', ls='--')\nplt.title('Daily Emergencies in July 2016', fontsize=14)\nplt.xlabel('Day')\nplt.xticks(np.arange(1,31))\nplt.ylabel('Number of emergencies')\nplt.tick_params(labelsize=10)\nplt.legend(prop={'size':10})","83cec74f":"# Emergency Types in month of July 2016\nemrgncy_type_mnthly = data[(data['year']==2016) & (data['month']==7)].pivot_table(values='area', index='day', columns='type', aggfunc=len).plot(figsize=(15,6), linewidth=2)\nplt.title('Emergency Types in month of July 2016', fontsize=16)\nplt.xlabel('Day')\nplt.xticks(np.arange(1,31))\nplt.legend(prop={'size':10})\nplt.tick_params(labelsize=10)","c50c0b2e":"#Hourly Emergencies on 25 July 2016\nemrgncy_hourly = pd.DataFrame(data[(data['year']==2016) & (data['month']==7) & (data['day']==25)].groupby('hour').size())\nemrgncy_hourly['MEAN'] = data[(data['year']==2016) & (data['month']==7) & (data['day']==25)].groupby('hour').size().mean()\n\nplt.figure(figsize=(18,6))\ndata[(data['year']==2016) & (data['month']==7) & (data['day']==25)].groupby('hour').size().plot(label='Emergencies on 25 July 2016')\nemrgncy_hourly['MEAN'].plot(color='red', linewidth=2, label='Average', ls='--')\nplt.title('Hourly Emergencies on 25 July 2016', fontsize=14)\nplt.xlabel('Hours')\nplt.xticks(np.arange(1,24))\nplt.ylabel('Number of emergencies')\nplt.tick_params(labelsize=10)\nplt.legend(prop={'size':10})","acfcbedd":"# Emergency Types on 25th July 2016\nemrgncy_type_hourly = data[(data['year']==2016) & (data['month']==7) & (data['day']==25)].pivot_table(values='area', index='hour', columns='type', aggfunc=len).plot(figsize=(15,6), linewidth=2)\nplt.title('Emergency Types on 25th July 2016', fontsize=16)\nplt.xlabel('Hours')\nplt.xticks(np.arange(1,24))\nplt.legend(prop={'size':10})\nplt.tick_params(labelsize=10)\n\n\n","6d7ee485":"# Emergency Types on 13th July 2016\nemrgncy_type_hourly = data[(data['year']==2016) & (data['month']==7) & (data['day']==13)].pivot_table(values='area', index='hour', columns='type', aggfunc=len).plot(figsize=(15,6), linewidth=2)\nplt.title('Emergency Types on 13th July 2016', fontsize=16)\nplt.xlabel('Hours')\nplt.xticks(np.arange(1,24))\nplt.legend(prop={'size':10})\nplt.tick_params(labelsize=10)","b07347c0":"# Emergencies per Type During New Year Time [Dec 2015- Jan 2016]\n\n#creating a specific dataframe\nny_df = data[(data['year'].isin(['2015','2016'])) & (data['month'].isin(['12','1']))]\n\nny_emergencies = ny_df.pivot_table(values='area', index='type', columns=['month','year'], aggfunc=len)\nny_emergencies.columns = ['Jan-2016','Dec-2015']\n\n\n# Using seaborn heatmap\nplt.figure(figsize=(6,6))\nplt.title('Emergencies per Type During New Year Time [Dec 2015- Jan 2016]', fontsize=14)\nplt.tick_params(labelsize=10)\nsns.heatmap(ny_emergencies, cmap='icefire', linecolor='grey',linewidths=0.1, cbar=False, annot=True, fmt=\".0f\")","37b44c2e":"#Creating a pivot table for Year = 2016\npercChng_2016 = data[data['year']==2016].pivot_table(values='area', index='month', columns='type', aggfunc=len)","9246e92e":"#Calculating the percentage change\npercChng_2016 = percChng_2016.pct_change()","b5272be5":"#dropping the index with NULL values\npercChng_2016 = percChng_2016.dropna()","026e77ba":"# Plotting the Heatmap - Percentage Change in Emergency Calls per Type in 2016\nplt.figure(figsize=(6,6))\nplt.title('Percentage Change in Emergency Calls per Type in 2016', fontsize=14)\nplt.tick_params(labelsize=10)\nax = sns.heatmap(percChng_2016, cmap='Blues', linecolor='grey',linewidths=0.1, cbar=False, annot=True, fmt=\".2%\")\n","98b07c1d":"# Geovisualization library\nimport folium\nfrom folium.plugins import CirclePattern, HeatMap, HeatMapWithTime, FastMarkerCluster","353ad6c2":"# Function to create a base map\n\ndef generateBaseMap(default_location=[40.0655815,-75.2430282], default_zoom_start=10):\n    base_map = folium.Map(location=default_location, control_scale=True, zoom_start=default_zoom_start,width='50%', height='50%', tiles=\"cartodbpositron\")\n    return base_map\n\n#Calling the function\nbase_map = generateBaseMap()","45181b35":"# Spatial Visualisation of Emergencies on 25 Jul 2016\nspt_df_25Jul2016 = data[(data['year']==2016) & (data['month']==7) & (data['day']==25)]\n\nfor i in range(0,len(spt_df_25Jul2016)):\n    \n    if spt_df_25Jul2016.iloc[i]['type'] == 'traffic':\n        folium.CircleMarker(location=[spt_df_25Jul2016.iloc[i]['lat'], spt_df_25Jul2016.iloc[i]['lng']],\n                      popup=spt_df_25Jul2016.iloc[i]['type'],radius = 2, color='#2ca25f',fill=True,    #Green\n                      fill_color='#2ca25f').add_to(base_map)\n    elif spt_df_25Jul2016.iloc[i]['type'] == 'ems':\n        folium.CircleMarker(location=[spt_df_25Jul2016.iloc[i]['lat'], spt_df_25Jul2016.iloc[i]['lng']],\n                      popup=spt_df_25Jul2016.iloc[i]['type'],radius = 2, color='#2b8cbe',fill=True,   #Blue \n                      fill_color='#2b8cbe').add_to(base_map)\n    else:\n         folium.CircleMarker(location=[spt_df_25Jul2016.iloc[i]['lat'], spt_df_25Jul2016.iloc[i]['lng']],\n                      popup=spt_df_25Jul2016.iloc[i]['type'],radius = 2, color='#f03b20',fill=True,   #Red\n                      fill_color='#f03b20').add_to(base_map)       \n    \n#Calling the base_map function\nbase_map","868ec688":"# Addiing Cluster Layer \nFastMarkerCluster(data=list(zip(spt_df_25Jul2016['lat'].values, spt_df_25Jul2016['lng'].values))).add_to(base_map)\nfolium.LayerControl().add_to(base_map)\n\n#Calling the function\nbase_map","a4488cfe":"***Emergency Types in month of July 2016***","8bdd88f9":"**Analysis:**\n1. Highest number of emergencies between 6 - 8 PM\n2. Lowest number of emergencies at 2 AM in morning","29225172":"**Spatial Visualisation**","cbcf72ce":"***Percentage Change in Emergency Calls per Type in 2016***","d5628f80":"**Analysis:**\nEMS Emergencies increased by 56.74% from Dec-2015 to Jan 2016\nFire Emergencies increased by 74.29% from Dec-2015 to Jan 2016\nTraffic Emergencies increased by 78.83% from Dec-2015 to Jan 2016\n\nThere was a drastic increase in Traffic Emergencies between Dec-2015 & Jan-2016","b5d12a94":"**Analysis:**\n* The hihgest type of emergencies in 2016 were EMS (Emergency Medical Services) & Traffic\n* Hihgest EMS & Traffic emergencies were in July 2016\n","2323cb8c":"**Analysis:**\n* Hihgest number of emergencies was between 25 - 26 July 2016\n* Lowest number of emergencies was between 2- 4 July 2016","a62de4f2":"**Analysis:**\nOn 25 Jul 2016, Fire & Traffic emergencies were highest between 5 - 8 PM\nOn 25 Jul 2016, Medical emergencies were lower compared to Fire & Traffic\n\nOn 13 Jul 2016, Traffic emergencies were highest between 4 - 5 PM\nOn 13 Jul 2016, Fire emergencies were lower compared to Traffic & EMS","9c166577":"***Emergencies per Type During New Year Time [Dec 2015- Jan 2016]***","9db88f4f":"**Analysis:**\n* January & June-July had \"above average\" number of emergencies\n* Number of emergencies fell to \"low\" in August","22cd7ca8":"***Hourly Emergencies on 25 July 2016***","9338cada":"***Emergencies per Month in 2016***","e3fffeea":"**Analysis & Visualisation of Year 2016**","b1ad4523":"***Daily Emergencies in July 2016***","17bbe3be":"Since the dataset has data only for December for 2015 & Jan - Aug for 2016, it is not possible to compare the yearly stats for the emergencies. \n\nTherefore I shall focus on the transition period i.e. Dec 2015 - Jan 2016.","bdaaeed8":"Looking at the dataset above, the following columns serves no purpose for my analysis\n* desc\n* zip\n* e\n\nHence I shall drop these columns.","86b076ea":"In my analysis, I'm more interested in \"type\" of emergencies rather than \"details\" of those emergencies. Hence creating a function to extract the emergency type from the column = title","27f31ea5":"***Emergency Types on 13th & 25th July 2016***","6f20cd3f":"**Analysis:**\n* Highest Emergency calls were made from Norristown on 25 July 2016\n* Least Emergency calls were made from Skippack on 25 July 2016\n","b384492e":"**Data Exploration & Clean up**","c58b011f":"**Processing the Time Stamp Column**","a90974e2":"Now, performing the following actions in that sequence:\n* Dropping the title column\n* Renaming the twp column\n* Re-arraning the columns\n* Changing text to lower case","c64ccd4c":"***Emergency Types per Month in 2016***","0f760e1b":"**Analysis:**\n* Certainly a drop in emergencies (all type) in August 2016\n* A big increase in FIRE Emergencies in June 2016\n* A very minor drop in TRAFFIC Emergencies in July 2016\n","69f07440":"**Analysis:**\n* Fire & Traffic emergencies were highest on 25 July 2016\n* Traffic emergencies were lowest on 24 July 2016, however there was a sharp rise on 25 July 2016\n* Traffc emergencies were also highest on 13 July 2016","236a684b":"**911 Emergency Calls  - Data Analysis & Spatial Visualisation**"}}