{"cell_type":{"f475f080":"code","b1fc5691":"code","7c73ab0a":"code","c39f35d6":"code","fd49f8ff":"code","d13a73df":"code","acc00ab9":"code","8907399f":"code","a06a57a6":"code","3f0a481b":"code","ef49c62f":"code","891bc19a":"code","5cff4b19":"code","9da8d52d":"code","bbd53db8":"code","73ad6fcb":"code","ea8c41b1":"code","72ae28a5":"code","6124025e":"code","7a3326ea":"code","d5bf062d":"code","aa7644a0":"code","e3df5466":"code","3daf6580":"code","275b885b":"code","9d242ecf":"code","d8c8308f":"code","77e43952":"code","7add52f3":"code","7730a110":"code","4111b4df":"code","edea491d":"code","833b2c60":"code","ce4e9f76":"code","99b9abfc":"code","4419bc96":"code","ca9a7c14":"code","d4b8fa28":"code","e6a9b102":"code","1c7a0efb":"code","cdda0b68":"code","d0d0d807":"code","8f63d7a3":"code","5d64b8a3":"code","55f30e37":"code","c2fb24db":"code","41a352c8":"code","f51f1ed6":"code","a977728b":"code","7ce39fd2":"code","44209e4d":"code","b249691a":"code","3d46e929":"code","aa29cb4e":"code","a47103a0":"code","619ebf50":"code","23bc6356":"code","ebef5f0b":"code","efe8bd3b":"code","e1197a39":"code","d7d7a20e":"code","7fbc5507":"code","55c3987f":"code","52c7f262":"code","645c6619":"code","da5fe6e3":"code","0412ece0":"code","d6951849":"code","97660749":"code","3ce1d56c":"code","330c6d5b":"code","9cf463f5":"code","0a8442c0":"code","e86b8326":"code","93ae3129":"code","e0d2a0ce":"markdown","80122b57":"markdown","38e15f8b":"markdown","3f4a0c86":"markdown","7290f5e0":"markdown","e0f51eca":"markdown","a1c9ada2":"markdown","cd6f24ea":"markdown","791c8c89":"markdown","bff1b66f":"markdown","d859431a":"markdown","07f3497f":"markdown","f7cde2cb":"markdown","0f558ffe":"markdown","cb8e6dbb":"markdown","df3376ac":"markdown","46d9962f":"markdown","8ceeb537":"markdown","612b0a64":"markdown","e9f8d190":"markdown","5d6ceaa4":"markdown","534eef65":"markdown"},"source":{"f475f080":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt ","b1fc5691":"mushrooms = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')","7c73ab0a":"mushrooms.head()","c39f35d6":"for col in mushrooms.columns:\n    print(col)","fd49f8ff":"mushrooms.info()","d13a73df":"mushrooms.shape","acc00ab9":"mushrooms.describe()","8907399f":"mushrooms.columns = ['class', 'cap-shape', 'cap-surface', 'cap-color', 'bruises', 'odor',\n       'gill-attachment', 'gill-spacing', 'gill-size', 'gill-color',\n       'stalk-shape', 'stalk-root', 'stalk-surface-above-ring',\n       'stalk-surface-below-ring', 'stalk-color-above-ring',\n       'stalk-color-below-ring', 'veil-type', 'veil-color', 'ring-number',\n       'ring-type', 'spore-print-color', 'population', 'habitat']\n\nfor i in mushrooms.columns:\n    print(f'{i} -> {mushrooms[i].unique()}')","a06a57a6":"my_tab = pd.crosstab(index=mushrooms[\"class\"],  # Make a crosstab\n                              columns=\"count\")      # Name the count column\n\nmy_tab","3f0a481b":"my_tab\/my_tab.sum()","ef49c62f":"mushrooms.isnull().sum()","891bc19a":"my_tab = pd.crosstab(mushrooms['cap-shape'], mushrooms['class'], margins=True)\n\nmy_tab\n","5cff4b19":"my_tab = pd.crosstab(mushrooms['cap-surface'], mushrooms['class'], margins=True)\n\nmy_tab","9da8d52d":"my_tab = pd.crosstab(mushrooms['cap-color'], mushrooms['class'], margins=True)\n\nmy_tab","bbd53db8":"my_tab = pd.crosstab(mushrooms['bruises'], mushrooms['class'], margins=True)\n\nmy_tab","73ad6fcb":"my_tab = pd.crosstab(mushrooms['odor'], mushrooms['class'], margins=True)\n\nmy_tab","ea8c41b1":"my_tab = pd.crosstab(mushrooms['gill-attachment'], mushrooms['class'], margins=True)\n\nmy_tab","72ae28a5":"my_tab = pd.crosstab(mushrooms['gill-spacing'], mushrooms['class'], margins=True)\n\nmy_tab\n","6124025e":"my_tab = pd.crosstab(mushrooms['gill-size'], mushrooms['class'], margins=True)\n\nmy_tab\n","7a3326ea":"my_tab = pd.crosstab(mushrooms['gill-color'], mushrooms['class'], margins=True)\n\nmy_tab\n\n","d5bf062d":"my_tab = pd.crosstab(mushrooms['stalk-shape'], mushrooms['class'], margins=True)\n\nmy_tab\n\n","aa7644a0":"my_tab = pd.crosstab(mushrooms['stalk-root'], mushrooms['class'], margins=True)\n\nmy_tab\n\n","e3df5466":"my_tab = pd.crosstab(mushrooms['stalk-surface-above-ring'], mushrooms['class'], margins=True)\n\nmy_tab\n\n","3daf6580":"my_tab = pd.crosstab(mushrooms['stalk-surface-below-ring'], mushrooms['class'], margins=True)\n\nmy_tab\n\n","275b885b":"my_tab = pd.crosstab(mushrooms['stalk-color-above-ring'], mushrooms['class'], margins=True)\n\nmy_tab\n","9d242ecf":"my_tab = pd.crosstab(mushrooms['stalk-color-below-ring'], mushrooms['class'], margins=True)\n\nmy_tab\n","d8c8308f":"my_tab = pd.crosstab(mushrooms['veil-type'], mushrooms['class'], margins=True)\n\nmy_tab\n","77e43952":"my_tab = pd.crosstab(mushrooms['veil-color'], mushrooms['class'], margins=True)\n\nmy_tab\n","7add52f3":"my_tab = pd.crosstab(mushrooms['ring-number'], mushrooms['class'], margins=True)\n\nmy_tab","7730a110":"my_tab = pd.crosstab(mushrooms['ring-type'], mushrooms['class'], margins=True)\n\nmy_tab","4111b4df":"my_tab = pd.crosstab(mushrooms['spore-print-color'], mushrooms['class'], margins=True)\n\nmy_tab","edea491d":"my_tab = pd.crosstab(mushrooms['population'], mushrooms['class'], margins=True)\n\nmy_tab","833b2c60":"my_tab = pd.crosstab(mushrooms['habitat'], mushrooms['class'], margins=True)\n\nmy_tab","ce4e9f76":"y = mushrooms['class'] \nx = mushrooms.loc[:, mushrooms.columns != 'class']","99b9abfc":"dum_x = pd.get_dummies(x)\ndum_x.head()","4419bc96":"dup = dum_x.duplicated()\n\ntrue_count = sum(dup)\n\ntrue_count","ca9a7c14":"corr = dum_x.corr()","d4b8fa28":"columns = np.full((corr.shape[0],), True, dtype=bool)\nfor i in range(corr.shape[0]):\n    for j in range(i+1, corr.shape[0]):\n        if corr.iloc[i,j] >= 0.9:\n            if columns[j]:\n                columns[j] = False\nselected_columns = dum_x.columns[columns]\ndata = dum_x[selected_columns]","e6a9b102":"dum_x.shape","1c7a0efb":"data.shape","cdda0b68":"same = set(dum_x.columns).intersection(set(data.columns))\ncol = dum_x.columns\n\nset(col) - set(same)","d0d0d807":"Del_cols = ['ring-number_n',\n 'ring-type_n',\n 'stalk-color-above-ring_c',\n 'stalk-color-above-ring_o',\n 'stalk-color-below-ring_c',\n 'stalk-color-below-ring_o',\n 'veil-color_w',\n 'veil-color_y'] \n\nfor col in Del_cols:\n    X = dum_x.drop(col, axis = 1)\n    \n","8f63d7a3":"X.head()","5d64b8a3":"y.head()","55f30e37":"from sklearn.preprocessing import LabelEncoder\n\nencoder = LabelEncoder()\ny=encoder.fit_transform(y)\ny","c2fb24db":"#train test split\nfrom sklearn.model_selection import train_test_split\n\n#metrics\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.model_selection import cross_validate\n\n#cross validation\nfrom sklearn.model_selection  import cross_val_score as CVS\n\n#ML models\nfrom xgboost import XGBClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\n","41a352c8":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.8, random_state = 1)","f51f1ed6":"log = LogisticRegression()\nlog.fit(X_train, y_train)\ny_pred = log.predict(X_test)","a977728b":"# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, y_pred)\n","7ce39fd2":"# Accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred)\n","44209e4d":"# Recall\nfrom sklearn.metrics import recall_score\nrecall_score(y_test, y_pred, average=None)\n","b249691a":"# Precision\nfrom sklearn.metrics import precision_score\nprecision_score(y_test, y_pred, average=None)","3d46e929":"# f1 score\nfrom sklearn.metrics import f1_score\nf1_score(y_test, y_pred)","aa29cb4e":"dt = DecisionTreeClassifier()\ndt.fit(X_train,y_train)\ny_pred = dt.predict(X_test)","a47103a0":"# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, y_pred)","619ebf50":"# Accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred)\n","23bc6356":"# Recall\nfrom sklearn.metrics import recall_score\nrecall_score(y_test, y_pred, average=None)\n","ebef5f0b":"# Precision\nfrom sklearn.metrics import precision_score\nprecision_score(y_test, y_pred, average=None)","efe8bd3b":"# f1 score\nfrom sklearn.metrics import f1_score\nf1_score(y_test, y_pred)","e1197a39":"rf = RandomForestClassifier(n_estimators=100, oob_score=True, random_state=123456)\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)","d7d7a20e":"# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, y_pred)","7fbc5507":"# Accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred)","55c3987f":"# Recall\nfrom sklearn.metrics import recall_score\nrecall_score(y_test, y_pred, average=None)\n","52c7f262":"# Precision\nfrom sklearn.metrics import precision_score\nprecision_score(y_test, y_pred, average=None)","645c6619":"# f1 score\nfrom sklearn.metrics import f1_score\nf1_score(y_test, y_pred)","da5fe6e3":"XGB = XGBClassifier()\nXGB.fit(X_train,y_train)\ny_pred = XGB.predict(X_test)\n","0412ece0":"# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, y_pred)","d6951849":"# Accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred)","97660749":"# Recall\nfrom sklearn.metrics import recall_score\nrecall_score(y_test, y_pred, average=None)\n\n","3ce1d56c":"# Precision\nfrom sklearn.metrics import precision_score\nprecision_score(y_test, y_pred, average=None)","330c6d5b":"# f1 score\nfrom sklearn.metrics import f1_score\nf1_score(y_test, y_pred)","9cf463f5":"from matplotlib import pyplot","0a8442c0":"from xgboost import XGBClassifier, plot_importance\n\nplot_importance(XGB)","e86b8326":"my_tab = pd.crosstab(mushrooms['gill-size'], mushrooms['class'], margins=True)\n\nmy_tab","93ae3129":"my_tab = pd.crosstab(mushrooms['odor'], mushrooms['class'], margins=True)\n\nmy_tab","e0d2a0ce":"# [data shape] \n\n### ==> 8124x23","80122b57":"# Missing Values\n\n<hr\/>\n\nfortunately there is no NaN or missing values in data ","38e15f8b":"# <span id=\"1\"><\/span> Overview\n<hr\/>\nWelcome to my kernel!\ud83d\ude42 \nIn this kernel, I try to detect Posonous mushrooms by using various models. As you can guess, there are various methods to suceed this and each method has pros and cons. \nI start with a very simple model and continue with more complex ones after EDA and a data mining process. I try to find the best model for detecting poisonous mushrooms.\n\nthis data is form kaggle [https:\/\/www.kaggle.com\/uciml\/mushroom-classification]\n\n\n<br\/>\n<img src=\"https:\/\/media.gettyimages.com\/illustrations\/poisonous-mushrooms-chromolithograph-1896-illustration-id478662992?s=2048x2048\" \/>","3f4a0c86":"# Feature Selection\n\n<hr\/>","7290f5e0":"# XGBoost","e0f51eca":"# XGBoost feature importance plot\n\n<hr\/>\n\nFeature importance are as belows. and as you can see, ordor is most important feature. \n\nWe look more detail in ordor feature, and realized that detecting poisonous mushrooms are extreme in ordor feature.","a1c9ada2":"# <span id=\"2\"><\/span> Reading the Dataset and Columns Description\n\n<hr\/>","cd6f24ea":"# **Detecting Poisonous Mushroom**","791c8c89":"from the analysis above the following columns are not needed so we will drop them. \n\nso we will create our another x data excluding the mentioned columns.","bff1b66f":"# Building a model with selected features\n\n<hr\/>\n\nas this is a classification problem, so I will use classification method. \n\nModels we will use : \n\n* Logistic Regression\n* Decision Tree \n* Random Forest\n* XGBoost \n* Support Vector Machines","d859431a":"# <span id=\"2\"><\/span> Poisonous Mushrooms Rate : 48%\n\n<hr\/>\n\naccording to frequency tables... \nthe rate of poisonous mushroom rate in the mushrooms data is 0.482029.","07f3497f":"put label on y","f7cde2cb":"# Random Forest ","0f558ffe":"| Column Name                | Description                                                 | Values              |    \n|----------------------------|-------------------------------------------------------------|----------------------\n| `class`                    | Edible or poisonous                                         | `e` = Edible, `p` = poisonous                    |\n| `cap-shape`                | The shape of the expanded, upper part of the mushroom       | `b`= bell, `c` = conical, `x` = convex, `f` = flat, `k` = knobbed, `s` = sunken |\n| `cap-surface`              | The structure of the upper part of the mushroom             | `f` = fibrous, `g` = grooves, `y` = scaly, `s` = smooth |\n| `cap-color`                | The color of the surface of the upper part of the mushroom  | `n` = brown, `b` = buff, `c` = cinnamon, `g` = gray, `r` = green, `p` = pink, `u` = purple, `e` = red, `w` = white, `y` = yellow |\n| `bruises`                  | Indicates of there are bruises on the mushroom              | `t` = yes, `f` = no |\n| `odor`                     | The smell the mushroom omits                                | `a` = almond, `l` = anise, `c` = creosote, `y` = fishy, `f`=foul, `m` = musty, `n` = none, `p` = pungent, `s` = spicy |\n| `gill-attachment`          | The way the gill is growing on the mushroom                 | `a`= attached, `d` = descending,`f` = free, `n` = notched |\n| `gill-spacing`             | The gap of space between each gill                          | `c` = close,`w` = crowded, `d` = distant |\n| `gill-size`                | The size of the gills                                       | `b` = broad, `n` = narrow |\n| `gill-color`               | The color of the gills                                      | `k` = black, `n` = brown, `b` = buff, `h` = chocolate, `g` = gray, `r` = green, `o` = orange, `p` = pink, `u` = purple, `e` = red, `w` = white , `y` = yellow |\n| `stalk-shape`              | The Stalk`s form                                            | `e` = enlarging, `t` = tapering |\n| `stalk-root`               | The root of the mushroom                                    | `b` = bulbous, `c` = club, `u` = cup, `e` = equal, `z` = rhizomorphs, `r` = rooted, `?` = missing |\n| `stalk-surface-above-ring` | The surface of the stalk above the mushrooms ring           | `f` = fibrous, `y` = scaly, `k` = silky, `s` = smooth |\n| `stalk-surface-below-ring`   | The surface of the stalk below the mushrooms ring           | `f` = fibrous, `y` = scaly, `k` = silky, `s` = smooth |\n| `stalk-color-above-ring` | The color of the stalk above the mushrooms ring               | `n` = brown, `b` = buff, `c` = cinnamon, `g` = gray, `o` = orange, `p` = pink, `e` = red, `w` = white, `y` = yellow |\n| `stalk-color-below-ring`   | The color of the stalk below the mushrooms ring             | `n` = brown, `b` = buff, `c` = cinnamon, `g` = gray, `o` = orange, `p` = pink, `e` = red, `w` = white, `y` = yellow |\n| `veil-type`                | The type of the mushroom`s veil                             | `p` = partial, `u` = universal |\n| `veil-color`               | The color of the mushroom`s veil                            | `n` = brown, `o` = orange, `w` = white, `y` = yellow |\n| `ring-number`              | The amount fo rings the mushroom has                        | `n`= none, `o` = one, `t` = two |\n| `ring-type`                | The type of the mushroom`s ring                             | `c` = cobwebby, `e` = evanescent, `f` = flaring, `l` = large ,`n` = none, `p` = pendant, `s` = sheathing, `z` = zone |\n| `spore-print-color`        | The color of the  mushromm`s spore                          | `k` = black, `n` = brown, `b` = buff, `h` = chocolate, `r` = green, `o` = orange, `u` = purple, `w` = white , `y` = yellow  |\n| `population`               | The populaotion spread                                      | `a` = abundant, `c` = clustered, `n` = numerous, `s` = scattered, `v` = several, `y` = solitary |\n| `habitat`                | The mushroom`s environment                                    | `g` = grasses, `l` = leaves, `m` = meadows, `p` = paths, `u` = urban, `w` = waste, `d` =  woods |","cb8e6dbb":"## 2. highly Correlated features\n\n<hr\/>\ncompare the correlation between features and remove one of two features that have a correlation higher than 0.9\n<hr\/>\n\nhighly correlated features in dummy data set \n\n* ring-number_n\n* ring-type_n\n* stalk-color-above-ring_c\n* stalk-color-above-ring_o\n* stalk-color-below-ring_c\n* stalk-color-below-ring_o\n* veil-color_w\n* veil-color_y\n\n","df3376ac":"# Encoding Categorical columns\n\n<hr\/>","46d9962f":"## 1. find duplicated values\n\n<hr\/> \n\nthere is no duplicated values in python.","8ceeb537":"# Decision Tree Classifier","612b0a64":"# Conclusion\n\n<hr\/>\n\nAs there are no big difference between models, we cannot choose the best model. \n\nBut in my experience, XGBoost model (Known as showing higher performance that Random Forest) seems best model regarding using different data. \n\nHowever we cannot decide only one best model with this mushroom data set. Because the score results are similar. \n","e9f8d190":"# [23 variables]\n\n* class : (classes: edible=e, poisonous=p)\n* cap-shape :  bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n* cap-surface : fibrous=f,grooves=g,scaly=y,smooth=s\n* cap-color : brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\n* bruises : bruises=t,no=f\n* odor : almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n* gill-attachment : attached=a,descending=d,free=f,notched=n\n* gill-spacing : enlarging=e,tapering=t\n* gill-size : bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n* gill-color : fibrous=f,scaly=y,silky=k,smooth=s\n* stalk-shape : enlarging=e,tapering=t\n* stalk-root :  bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n* stalk-surface-above-ring : fibrous=f,scaly=y,silky=k,smooth=s\n* stalk-surface-below-ring : fibrous=f,scaly=y,silky=k,smooth=s\n* stalk-color-above-ring : brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n* stalk-color-below-ring : brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n* veil-type :  partial=p,universal=u\n* veil-color : brown=n,orange=o,white=w,yellow=y\n* ring-number : none=n,one=o,two=t\n* ring-type: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n* spore-print-color :  black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n* population : abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n* habitat : grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d\n\n","5d6ceaa4":"# Logistic Regression","534eef65":"# features characters\n\n<hr\/>\n\nThe frequency table below is the frequency of edible mushrooms and poisonous mushrooms based on each variable. Later this table can be used as a basis for categorization."}}