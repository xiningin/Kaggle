{"cell_type":{"4a1632f6":"code","4c97dce9":"code","2907969f":"code","72fca21a":"code","45848878":"code","62f6e7d2":"code","8898b171":"code","49afa3e5":"code","00a52258":"code","7188358d":"code","918ab26a":"code","a3dc1e1a":"code","551c6e2c":"markdown","0b3ab4b6":"markdown","5703aaea":"markdown","fc3bdfb6":"markdown","9f155542":"markdown","ebf90a9b":"markdown","f039682f":"markdown","09470831":"markdown"},"source":{"4a1632f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4c97dce9":"import numpy as np\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Flatten, Add\nfrom keras.layers import Convolution2D, MaxPooling2D\nfrom keras.utils import np_utils\n","2907969f":"from sklearn.model_selection import train_test_split\nfrom tensorflow.python import keras\n\nimg_rows, img_cols = 28, 28\nnum_classes = 10\nbatch_size = 128\nnum_classes = 10\nepochs = 25\n\ndef prep_data(raw):\n    y = raw[:, 0]\n    out_y = keras.utils.to_categorical(y, num_classes)\n    \n    x = raw[:,1:]\n    num_images = raw.shape[0]\n    out_x = x.reshape(num_images, img_rows, img_cols, 1)\n    out_x = out_x \/ 255\n    return out_x, out_y","72fca21a":"# preparing the data for Training\nfashion_train_data = \"..\/input\/fashion-mnist_train.csv\"\nfashion_train = np.loadtxt(fashion_train_data, skiprows=1, delimiter=',')\nX_train, Y_train = prep_data(fashion_train)\n\n# preparing the data for Testing\nfashion_test_data = \"..\/input\/fashion-mnist_test.csv\"\nfashion_test = np.loadtxt(fashion_test_data, skiprows=1, delimiter=',')\nx_test, y_test = prep_data(fashion_test)","45848878":"from tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, Conv2D, Dropout,MaxPooling2D\n\nfashion_model = Sequential() \nfashion_model.add(Conv2D(32, kernel_size=(5, 5), activation='relu', input_shape=(img_rows,img_cols,1)))\nfashion_model.add(Conv2D(32, kernel_size=(3, 3), activation='relu'))\nfashion_model.add(MaxPooling2D(pool_size=(2, 2)) )\nfashion_model.add(Conv2D(32, kernel_size=(3, 3), activation='relu'))\nfashion_model.add(Dropout(0.2))\nfashion_model.add(Conv2D(10, 1, activation='relu'))\nfashion_model.add(Conv2D(10, 9))\nfashion_model.add(Flatten())\nfashion_model.add(Dense(128, activation='relu'))\nfashion_model.add(Dense(num_classes, activation='softmax'))","62f6e7d2":"fashion_model.summary()","8898b171":"fashion_model.compile(loss='categorical_crossentropy',\n             optimizer='adam',\n             metrics=['accuracy'])","49afa3e5":"visualize = fashion_model.fit(X_train, Y_train, batch_size=batch_size, epochs=epochs,validation_split = 0.2, verbose=1)","00a52258":"score = fashion_model.evaluate(x_test, y_test, verbose=0)\nprint(score)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","7188358d":"import matplotlib.pyplot as plt\n%matplotlib inline\naccuracy = visualize.history['acc']\nval_accuracy = visualize.history['val_acc']\nloss = visualize.history['loss']\nval_loss = visualize.history['val_loss']\nepochs = range(len(accuracy))\nplt.plot(epochs, accuracy, 'bo', label='Training accuracy')\nplt.plot(epochs, val_accuracy, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","918ab26a":"#get the predictions for the test data\npredicted_classes = fashion_model.predict_classes(x_test)\n\n#get the indices to be plotted\ny_true = fashion_test[:, 0]\ncorrect = np.nonzero(predicted_classes == y_true)[0]\nincorrect = np.nonzero(predicted_classes != y_true)[0]\n\n# adapt figure size to accomodate 18 subplots\nplt.rcParams['figure.figsize'] = (7,14)\n\nfigure_evaluation = plt.figure()\n\n# plot 6 correct predictions\nfor i, correct in enumerate(correct[:9]):\n    plt.subplot(6,3,i+1)\n    plt.imshow(x_test[correct].reshape(28,28), cmap='gray', interpolation='none')\n    plt.title(\n      \"Predicted: {}, Truth: {}\".format(predicted_classes[correct],\n                                        y_true[correct]))\n    plt.xticks([])\n    plt.yticks([])\n\n\n# plot 9 incorrect predictions\nfor i, incorrect in enumerate(incorrect[:6]):\n    plt.subplot(6,3,i+10)\n    plt.imshow(x_test[incorrect].reshape(28,28), cmap='gray', interpolation='none')\n    plt.title(\n      \"Predicted {}, Truth: {}\".format(predicted_classes[incorrect], \n                                       y_true[incorrect]))\n    plt.xticks([])\n    plt.yticks([])\n\n","a3dc1e1a":"from sklearn.metrics import classification_report\ntarget_names = [\"Class {}\".format(i) for i in range(num_classes)]\nprint(classification_report(y_true, predicted_classes, target_names=target_names))","551c6e2c":"## Evaluating the Model","0b3ab4b6":"## Training the Model on Fashion MNIST","5703aaea":"## Model Summary ","fc3bdfb6":"## Data Preparation","9f155542":"## Model  Architecture","ebf90a9b":"## Classification Report","f039682f":"## Visualization of the Results","09470831":"## Defining the Loss Function for Model"}}