{"cell_type":{"6efba333":"code","34a69ce0":"code","930a7ef8":"code","6ab53860":"code","1febfc7a":"code","0b30532b":"code","0f499833":"code","535d6bdc":"code","40b3eef6":"code","4010f14a":"code","5273fab7":"code","4c36c451":"code","0e1bebf6":"code","5566acf1":"code","f212c37f":"code","8bb284be":"code","dc6f5c8b":"code","4fdffa30":"code","8d42d3d4":"code","0fa18066":"code","115ab292":"code","b9e7e04a":"code","061b2d4b":"code","edaef938":"code","ed6dda5e":"code","a7da994b":"code","589578c0":"code","68af0f49":"code","002d3d26":"code","f7957963":"code","eeba313f":"code","4c0dbdc7":"code","867a0840":"code","9550616d":"code","45db1efe":"code","085bdfc0":"code","59d6907a":"code","ee1c3f24":"code","2a0b36ed":"code","30724530":"code","0c503611":"code","f2912baa":"code","06952b1a":"code","1acc40a0":"code","ee1d4ae3":"code","a43f3ce1":"code","7c497f93":"code","8cb2317a":"code","861293ce":"code","f207a93d":"code","a36f5212":"code","3b2954e2":"code","c14a0666":"code","f4f2d5cd":"code","cb6ffb72":"code","07cb2d3e":"code","722e9be7":"code","e80f916e":"code","fe532a35":"code","243213e9":"code","8c5a6767":"code","50267027":"code","1830058d":"code","7cfd20c4":"code","bfc30d96":"code","d9ead440":"code","0d4a3028":"code","2d6bffcc":"code","520cab3a":"code","b69221aa":"code","ad2def7b":"code","e1d6b7f7":"code","24897735":"code","b8936e7a":"code","831e20fb":"code","1ba46a21":"code","613888ba":"code","c25c636e":"code","7959ab60":"code","937b1121":"code","a60216f2":"code","ff4c34c7":"code","0c7e2614":"markdown","92463f11":"markdown","93249d51":"markdown","925dd10a":"markdown","ccd91c48":"markdown","ec9ff88f":"markdown","855fc447":"markdown","68fe2b7a":"markdown","0b45e673":"markdown","64bad8f6":"markdown","80b48324":"markdown","2037555f":"markdown","ec8eb32f":"markdown","d1d426b1":"markdown","bce13d52":"markdown","b7a412ef":"markdown","6005a999":"markdown","fd63c7ec":"markdown","38812db3":"markdown","8617b7bf":"markdown","18cbe954":"markdown","2f3c28d0":"markdown","afb30825":"markdown","687d43f8":"markdown","7ebd6573":"markdown","62bab188":"markdown","7997ec73":"markdown","3cffb668":"markdown","b7d547ef":"markdown","983c5e5a":"markdown","2eb9b295":"markdown","dbf7170c":"markdown","ddfedd26":"markdown","d82144aa":"markdown","865d8774":"markdown","1172d5d9":"markdown","15bb7291":"markdown","226dd970":"markdown","3f728c69":"markdown","49f378e5":"markdown","b46a42cc":"markdown","22048e2b":"markdown","ed9a989f":"markdown","4493e2cc":"markdown","804cdc91":"markdown","06ebb9fa":"markdown","5f732b2c":"markdown"},"source":{"6efba333":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","34a69ce0":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","930a7ef8":"train_df.columns","6ab53860":"train_df.head()","1febfc7a":"train_df.describe()","0b30532b":"train_df.info()","0f499833":"def bar_plot(variable):\n    \"\"\"\n    \n        input: variable ex:\"cinsiyet\"\n        output: bar plot & value count\n    \n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}:\/n{}\".format(variable,varValue))","535d6bdc":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","40b3eef6":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{}\/n\".format(train_df[c].value_counts()))","4010f14a":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable],bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distrubite with hist\".format(variable))\n    plt.show","5273fab7":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","4c36c451":"# plcass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","0e1bebf6":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","5566acf1":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","f212c37f":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","8bb284be":"# Age vs Survived\ntrain_df[[\"Age\",\"Survived\"]].groupby([\"Age\"], as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","dc6f5c8b":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1 st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3  rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        #Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c]<Q1-outlier_step) | (df[c]> Q3+outlier_step)].index\n        # store indices\n        outlier_indices.extend(outlier_list_col)\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i,v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","4fdffa30":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","8d42d3d4":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop=True)","0fa18066":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","115ab292":"train_df.columns[train_df.isnull().any()]","b9e7e04a":"train_df.isnull().sum()","061b2d4b":"train_df[train_df[\"Embarked\"].isnull()]","edaef938":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","ed6dda5e":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","a7da994b":"train_df[train_df[\"Fare\"].isnull()]","589578c0":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","68af0f49":"list1 = [\"SibSp\",  \"Parch\" , \"Fare\" , \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt=\".2f\")\nplt.show()","002d3d26":"g = sns.factorplot(x=\"SibSp\",y=\"Survived\",data=train_df,kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","f7957963":"g = sns.factorplot(x=\"Parch\",y=\"Survived\",data=train_df,kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","eeba313f":"g = sns.factorplot(x=\"Pclass\",y=\"Survived\",data=train_df,kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","4c0dbdc7":"g = sns.FacetGrid(train_df,col=\"Survived\")\ng.map(sns.distplot,\"Age\",bins=25)\nplt.show()","867a0840":"g = sns.FacetGrid(train_df,col=\"Survived\",row=\"Pclass\")\ng.map(plt.hist,\"Age\",bins=25)\ng.add_legend()\nplt.show()","9550616d":"g = sns.FacetGrid(train_df, row = \"Embarked\",size=2)\ng.map(sns.pointplot,\"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","45db1efe":"g= sns.FacetGrid(train_df,row=\"Embarked\",col=\"Survived\",size=2.5)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","085bdfc0":"train_df[train_df[\"Age\"].isnull()]","59d6907a":"sns.factorplot(x=\"Sex\",y=\"Age\",data=train_df,kind=\"box\")\n\nplt.show()","ee1c3f24":"sns.factorplot(x=\"Sex\",y=\"Age\",hue = \"Pclass\",data=train_df,kind=\"box\")\n\nplt.show()","2a0b36ed":"sns.factorplot(x=\"Parch\",y=\"Age\",data=train_df,kind=\"box\")\nsns.factorplot(x=\"SibSp\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","30724530":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","0c503611":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\"]].corr(), annot = True)\nplt.show()","f2912baa":"index_man_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_man_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"]==train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"]==(train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"]==train_df.iloc[i][\"Pclass\"])))].median()\n    age_med = train_df[\"Age\"].median()\n    if  not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i]=age_pred\n    else:\n        train_df[\"Age\"].iloc[i]=age_med","06952b1a":"train_df[\"Name\"].head(10)","1acc40a0":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","ee1d4ae3":"train_df[\"Title\"]","a43f3ce1":"# conver to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"lady\",\"the Countess\",\"Captan\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"Outher\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i ==\"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]","7c497f93":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation=60)\nplt.show()","8cb2317a":"g = sns.factorplot(x=\"Title\",y=\"Survived\", data = train_df,kind=\"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survived Probabilitiy\")\nplt.show()","861293ce":"train_df.drop(labels=[\"Name\"],axis=1,inplace=True)","f207a93d":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","a36f5212":"train_df.head()","3b2954e2":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","c14a0666":"train_df.head()","f4f2d5cd":"g = sns.factorplot(x=\"Fsize\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","cb6ffb72":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","07cb2d3e":"train_df.head(10)","722e9be7":"sns.countplot(x=\"family_size\",data=train_df)\nplt.show()","e80f916e":"g = sns.factorplot(x=\"family_size\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","fe532a35":"train_df = pd.get_dummies(train_df,columns=[\"family_size\"])\ntrain_df.head()","243213e9":"train_df[\"Embarked\"].head()","8c5a6767":"sns.countplot(x=\"Embarked\",data=train_df)\nplt.show()","50267027":"train_df = pd.get_dummies(train_df,columns=[\"Embarked\"])\ntrain_df.head()","1830058d":"train_df[\"Ticket\"].head(10)","7cfd20c4":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","bfc30d96":"train_df[\"Ticket\"].head(10)","d9ead440":"train_df = pd.get_dummies(train_df,columns=[\"Ticket\"],prefix=\"T\")\ntrain_df.head(10)","0d4a3028":"sns.countplot(x= \"Pclass\", data =train_df)\nplt.show()","2d6bffcc":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns=[\"Pclass\"])\ntrain_df.head()","520cab3a":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns=[\"Sex\"])\ntrain_df.head()","b69221aa":"train_df.drop(labels = [\"PassengerId\",\"Cabin\"],axis=1,inplace=True)","ad2def7b":"train_df.columns","e1d6b7f7":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score;","24897735":"train_df_len","b8936e7a":"test = train_df[train_df_len:]\ntest.drop(labels=[\"Survived\"],axis=1,inplace = True)","831e20fb":"test.head()","1ba46a21":"train = train_df[:train_df_len]\nX_train = train.drop(labels=[\"Survived\"],axis=1)\ny_train = train[\"Survived\"]\nX_train,x_test,y_train,y_test = train_test_split(X_train,y_train,test_size=0.33,random_state=42)\nprint(\"X_train\",len(X_train))\nprint(\"x_test\",len(x_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","613888ba":"logreg = LogisticRegression()\nlogreg.fit(X_train,y_train)\nacc_log_train=round(logreg.score(X_train,y_train)*100,2)\nacc_log_test=round(logreg.score(x_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testting Accuracy: % {}\".format(acc_log_test))","c25c636e":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","7959ab60":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","937b1121":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\");","a60216f2":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                       (\"rfc\",best_estimators[2]),\n                                       (\"lr\",best_estimators[3])],\n                                       voting = \"soft\",n_jobs=-1)\nvotingC = votingC.fit(X_train,y_train)\nprint(accuracy_score(votingC.predict(x_test),y_test))","ff4c34c7":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","0c7e2614":"* Passengers who pay higher fare have better survival. Fare can be used as categorical for training.","92463f11":"* small familiys have more chance to survive than large familys.","93249d51":"<a id = '13'><br>\n\n# SinSp -- Survived","925dd10a":"* age <= 10 has a high survival rate,\n* oldest passengers (80) survived,\n* large number of 20 years old did not survive,\n* most passengers are in 15-35 age range,\n* use age feature in training\n* use age distribution for missing value of age \n","ccd91c48":"<a id = '9'><br>\n## Find Missing Value","ec9ff88f":"<a id = '3'><br>\n# Univariate Variable Analysis   \n* Categorical Variable : Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable : Fare, Age and passangerId","855fc447":"<a id = '19'><br>\n## Embarked -- Sex -- Fare -- Survived","68fe2b7a":"<a id = '10'><br>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1    ","0b45e673":"<a id = '14'><br>\n# Parch -- Survived\n\n","64bad8f6":"<a id = '12'><br>\n* ## Correlation Between Sibsp -- Parch -- Fare -- Survived","80b48324":"* Pclass is import feature for model training.","2037555f":"Sex is not informative for age prediction, age distribution seems to be same.","ec8eb32f":"Age is not correlated with sex but it is correlated with parch,sibsp and class.","d1d426b1":"Fare feature seems to havve correlation with survived feature (0.26).","bce13d52":"<a id = '4'>\n## Categorical Variable\n","b7a412ef":"<a id = '23'><br>\n## Family Size","6005a999":"* float64(2): Fare ve Age\n\n* int64(5) : Pclass, sibsp, parch, passengerId and survived\n\n* object(5): Cabin, embarked, ticket, name and sex","fd63c7ec":"<a id = '16'><br>\n# Age -- Survived","38812db3":"1st class passenger are older than 2nd,and 2nd is older than 3rd class.","8617b7bf":"* Sibsp and Parch can be used for new feature extraction with th=3\n* samll familys have more chance to survive.\n* there is a std in survival of passenger with parch=3","18cbe954":"<a id = '1'>\n# Load and Check Data","2f3c28d0":"<a id = '30'><br>\n## Train - Test Split","afb30825":"<a id = '21'><br>\n# Feature Engineering  ","687d43f8":"<a id = '32'><br>\n## Hyperparameter Tunic -- Grid Search -- Cross Validation \nwe will compare 5 ml classifier an evalute mean accuracy accuracy of each of them by stratifed cross validation\n    \n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","7ebd6573":"<a id = '8'><br>\n# Missing Value\n\n* Find Missing Value\n* Fill Missing Value","62bab188":"<a id = '18'><br>\n## Embarked -- Sex -- Parch -- Survived","7997ec73":"<a id = '2'>\n# Veriable Description\n    \n1. PassengerId: unique id number to each passenger\n1. Survived: passenger survive(1) or died(0)\n1. Pclass: passenger class\n1. Name : name\n1. Sex : gender of passenger\n1. Age: age of passenger\n1. SibSp: number of siblings\/spouses\n1. Parch: number of parants\/children\n1. Ticket: ticket number \n1. Fare : amount of money spent on ticket\n1. Cabin: cabin category\n1. Embarked: pprt where passenger embarked (c= Cherbourg,Q = Queenstown, S=Southhampton\n  ","3cffb668":"# Introduction\nThe sinking of Titanic is one of the most notorious shipwrecks in the history. In 1912, during her voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passanger and crew.\n<font color = 'blue'>\n    \nContent : \n\n1. [Load and Check Data](#1)\n1. [Veriable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable ](#4)\n        * [Numerical Variable ](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detections](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation Between Sibsp -- Parch -- Fare -- Survived](#12)\n1. [SinSp -- Survived](#13)\n1. [Parch -- Survived](#14)\n1. [Pclass -- Survived](#15)\n1. [Age -- Survived](#16)\n1. [Pclass -- Survived -- Age](#17)\n1. [Embarked -- Sex -- Pclass -- Survived](#18)\n1. [Embarked -- Sex -- Fare -- Survived](#19)   \n1. [Fill Missing: Age Feature](#20)   \n1.  [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n1. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    *[Hyperparameter Tunic -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","b7d547ef":"<a id = '22'><br>\n## Name -- Title","983c5e5a":"<a id = '6'>\n\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived    \n* SibSp - Survived\n* Parch - Survived\n* Age - Survived","2eb9b295":"<a id = '5'>\n## Numerical Variable\n","dbf7170c":"<a id = '11'><br>\n# Visualization","ddfedd26":"<a id = '25'><br>\n## Ticket","d82144aa":"<a id = '20'><br>\n## Fill Missing: Age Feature","865d8774":"<a id = '24'><br>\n## Embarked","1172d5d9":"<a id = '29'><br>\n## Modeling","15bb7291":"<a id = '34'><br>\n## Prediction and Submission","226dd970":"<a id = '15'><br>\n# Pclass -- Survived","3f728c69":"* Female passenger have much better survival rate than males.\n* males have better survival rate in Pclass 3 in C.\n* embarked and sex will be used in training.","49f378e5":"* Having a lot of SibSp have less chance to survive.\n* if sibsp == 0 or 1 or 2, passaner has more chance to survive\n* we can consider a new feature descibing these categories","b46a42cc":"<a id = '17'><br>\n## Pclass -- Survived -- Age","22048e2b":"<a id = '28'><br>\n## Drop Passenger ID and Cabin","ed9a989f":"<a id = '6'><br>\n# Outlier Detections","4493e2cc":"<a id = '26'><br>\n## Pclass","804cdc91":"<a id = '33'><br>\n## Ensemble Modeling","06ebb9fa":"<a id = '31'><br>\n## Simple Logistic Regression","5f732b2c":"<a id = '27'><br>\n## Sex"}}