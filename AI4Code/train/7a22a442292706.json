{"cell_type":{"2c21c344":"code","611dcd0e":"code","f358e765":"code","793b10d5":"code","7e166106":"code","be06d94e":"code","c2110489":"code","7396f6f0":"code","9e5d5846":"code","ff39875f":"code","34ad5528":"code","b56954ef":"code","0bfea3ff":"code","59de9469":"code","ebd7a223":"code","2c2c3fd3":"code","d54b1451":"code","5dbe1e08":"code","78b1a4e9":"code","4def4363":"code","021bd761":"code","5cbdc4ab":"markdown"},"source":{"2c21c344":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","611dcd0e":"#importing libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings(action=\"ignore\")\nimport tensorflow as tf","f358e765":"tf.__version__","793b10d5":"df = pd.read_csv(\"\/kaggle\/input\/imdb-dataset-of-50k-movie-reviews\/IMDB Dataset.csv\")\ndf.head(10)","7e166106":"# shape of dataset\ndf.shape","be06d94e":"# checking for null values\ndf.isna().sum()","c2110489":"# info of our dataset\ndf.info()","7396f6f0":"# Encoding Sentiment column\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf[\"sentiment\"] = le.fit_transform(df[\"sentiment\"])\ndf.head()","9e5d5846":"df.sentiment.unique()","ff39875f":"sns.countplot(df[\"sentiment\"])","34ad5528":"df[\"sentiment\"].value_counts()","b56954ef":"# creating function for cleaning data\ndef standardize_text(df, content_field):\n    df[content_field] = df[content_field].str.replace(r\"http\\S+\", \"\")\n    df[content_field] = df[content_field].str.replace(r\"http\", \"\")\n    df[content_field] = df[content_field].str.replace(r\"@\\S+\", \"\")\n    df[content_field] = df[content_field].str.replace(r\"[^A-Za-z0-9(),!?@\\'\\`\\\"\\_\\n]\", \" \")\n    df[content_field] = df[content_field].str.replace(r\"@\", \"at\")\n    df[content_field] = df[content_field].str.lower()\n    return df","0bfea3ff":"standardize_text(df,\"review\")","59de9469":"# importing libraries for bag of words model\nimport re\nimport string\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.wordnet import WordNetLemmatizer","ebd7a223":"lemmatizer=WordNetLemmatizer()\ncorpus = []\nfor i in range(0,len(df)):\n    review = re.sub('[^a-zA-Z]', ' ', df['review'][i])\n    review = review.split()\n    review=[word for word in review if not word in set(stopwords.words('english'))]\n    review = [lemmatizer.lemmatize(word) for word in review]\n    review=' '.join(review)\n    corpus.append(review)","2c2c3fd3":"#applying tfidf on corpus\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ntfidf = TfidfVectorizer(ngram_range=(1, 3))\nX = tfidf.fit_transform(corpus)\ny = df[\"sentiment\"]","d54b1451":"# splitting dataset into training and testing set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","5dbe1e08":"# deep learning model\nfrom sklearn.svm import LinearSVC\nclassifier = LinearSVC()\nclassifier.fit(X_train, y_train)","78b1a4e9":"y_pred = classifier.predict(X_test)\ny_pred[:5]","4def4363":"# confusion matrix and accuracy score\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nacc = accuracy_score(y_pred, y_test)\nreport = classification_report(y_pred, y_test)\ncm = confusion_matrix(y_pred,y_test)\nsns.heatmap(cm, annot=True)\nprint(report)\nprint(\"Accuracy Score of SVC:\", acc*100,\"%\")","021bd761":"Author: Purvit Vashishtha","5cbdc4ab":"# **IMBD Reviews Sentiment Analysis**"}}