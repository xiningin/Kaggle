{"cell_type":{"e66210a9":"code","ba96c85c":"code","8d0dc97b":"code","bad7d9b0":"code","5cea9736":"code","0ad4d7ae":"code","40f729ae":"code","0fdeea69":"code","32a8cde5":"code","cf468e74":"code","765980ce":"code","1de90267":"code","39da7588":"code","a124c4db":"code","22cbfd26":"code","0df5c2a2":"code","4853e1a5":"code","23e30d90":"code","0b591fc6":"code","82c77936":"code","2eb1d97b":"code","3affb53c":"code","072e8396":"code","489529ab":"code","bbbb3a6f":"code","0b3f8dbe":"code","2423c56f":"code","2529bd0c":"code","0b482d1b":"code","2a17fa4f":"code","6000d580":"code","6ff7a951":"code","a1dbd317":"code","7c769796":"code","140cb276":"code","0a1211fc":"code","90a97be9":"code","c7d25efe":"code","fce21601":"code","d0d9297f":"code","92463383":"code","1fe47018":"code","c2397984":"code","b2fec12a":"code","1ed435d7":"code","091a28ff":"code","7369fde3":"code","b6eee961":"code","ed0dab23":"code","1f0f17e5":"code","810da50d":"markdown","7f5e787c":"markdown","425b9e3d":"markdown","5249acfb":"markdown","9e2531fa":"markdown","2edf386f":"markdown","aef4deab":"markdown","3d4e78ed":"markdown","396252e1":"markdown","42d78b03":"markdown","cb8aa3ae":"markdown","7bf1aca9":"markdown","030535ba":"markdown","a25c2d47":"markdown","d8355c51":"markdown","41e6c021":"markdown"},"source":{"e66210a9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ba96c85c":"wine_data = pd.read_csv('\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')\nwine_data.head()","8d0dc97b":"wine_data.shape","bad7d9b0":"#Check for null data\nwine_data.isnull().sum()","5cea9736":"sns.set()\nfig = plt.figure(figsize = [15,20])\ncols = ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol', 'quality']\ncnt = 1\nfor col in cols :\n    plt.subplot(4,3,cnt)\n    sns.distplot(wine_data[col],hist_kws=dict(edgecolor=\"k\", linewidth=1,color='grey'),color='red')\n    cnt+=1\nplt.show()  ","0ad4d7ae":"sns.pairplot(wine_data)\nplt.show()","40f729ae":"fig = plt.figure(figsize = [15,10])\nsns.heatmap(wine_data.corr(),annot = True, cmap = 'Greens', center = 0)\nplt.show()","0fdeea69":"sns.set_style(\"whitegrid\")\nfig = plt.figure(figsize = [15,20])\ncols = ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol']\ncnt = 1\nfor col in cols :\n    plt.subplot(4,3,cnt)\n    sns.barplot(data = wine_data, x = 'quality', y = col)\n    cnt+=1\nplt.show()  ","32a8cde5":"sns.set()\nfig = plt.figure(figsize = [15,20])\ncols = ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol', 'quality']\ncnt = 1\nfor col in cols :\n    plt.subplot(4,3,cnt)\n    sns.boxplot(data = wine_data, y = col)\n    cnt+=1\nplt.show()","cf468e74":"# Assuming a wine with quality > 6.5 is 'good' [1] & others are 'ordinary' [0]\nwine_data['quality'] = wine_data.quality.apply(lambda x : 1 if x > 6.5 else 0)","765980ce":"sns.countplot(data = wine_data, x = 'quality')\nplt.show()","1de90267":"sns.set()\nfig = plt.figure(figsize = [15,20])\ncols = ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol']\ncnt = 1\nfor col in cols :\n    plt.subplot(4,3,cnt)\n    sns.violinplot(x=\"quality\", y=col, data=wine_data)\n    cnt+=1\nplt.show()","39da7588":"from sklearn.model_selection import train_test_split\nimport statsmodels.api as sm\nfrom sklearn import metrics\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_selection import RFE\nfrom sklearn.preprocessing import StandardScaler\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.metrics import classification_report, confusion_matrix","a124c4db":"x = wine_data.drop('quality',1)\ny = wine_data['quality']","22cbfd26":"X_train, X_test, y_train, y_test = train_test_split(x, y, train_size=0.7, test_size=0.3)","0df5c2a2":"scaler = StandardScaler()\ncols = ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol']\nX_train[cols] = scaler.fit_transform(X_train[cols])\nX_test[cols] = scaler.fit_transform(X_test[cols])\nX_train.head()","4853e1a5":"logm1 = sm.GLM(y_train,(sm.add_constant(X_train)), family = sm.families.Binomial())\nres = logm1.fit()\nres.summary()","23e30d90":"logreg = LogisticRegression()\nrfe = RFE(logreg, n_features_to_select = 11)\nrfe = rfe.fit(X_train, y_train)\nlist(zip(X_train.columns, rfe.support_, rfe.ranking_))","0b591fc6":"col = X_train.columns[rfe.support_]\n\n# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","82c77936":"y_train_pred = res.predict(sm.add_constant(X_train)).values.reshape(-1)\ny_train_pred_final = pd.DataFrame({'quality':y_train.values, 'quality_prob':y_train_pred})\ny_train_pred_final.head()","2eb1d97b":"def draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return None","3affb53c":"draw_roc(y_train_pred_final.quality, y_train_pred_final.quality_prob)","072e8396":"numbers = [float(x)\/10 for x in range(10)]\nfor i in numbers:\n    y_train_pred_final[i]= y_train_pred_final.quality_prob.map(lambda x: 1 if x > i else 0)\ny_train_pred_final.head()","489529ab":"# Now let's calculate accuracy sensitivity and specificity for various probability cutoffs.\ncutoff_df = pd.DataFrame( columns = ['prob','accuracy','sensi','speci'])\n\n# TP = confusion[1,1] # true positive \n# TN = confusion[0,0] # true negatives\n# FP = confusion[0,1] # false positives\n# FN = confusion[1,0] # false negatives\n\nnum = [0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]\nfor i in num:\n    cm1 = metrics.confusion_matrix(y_train_pred_final.quality, y_train_pred_final[i] )\n    total1=sum(sum(cm1))\n    accuracy = (cm1[0,0]+cm1[1,1])\/total1\n    \n    speci = cm1[0,0]\/(cm1[0,0]+cm1[0,1])\n    sensi = cm1[1,1]\/(cm1[1,0]+cm1[1,1])\n    cutoff_df.loc[i] =[ i ,accuracy,sensi,speci]\nprint(cutoff_df)","bbbb3a6f":"# Let's plot accuracy sensitivity and specificity for various probabilities.\ncutoff_df.plot.line(x='prob', y=['accuracy','sensi','speci'])\nplt.show()","0b3f8dbe":"y_train_pred_final['final_predicted'] = y_train_pred_final.quality_prob.map( lambda x: 1 if x > 0.18 else 0)\ny_train_pred_final.head()","2423c56f":"X_test_sm = sm.add_constant(X_test)\ny_pred_log = res.predict(X_test_sm)\ny_pred_log","2529bd0c":"predictions_log = pd.DataFrame({'actual_quality' : y_test, 'quality_prob' : y_pred_log})\npredictions_log['pred_quality'] = predictions_log.quality_prob.map( lambda x: 1 if x > 0.18 else 0)\npredictions_log.drop(['quality_prob'],axis = 1, inplace = True)","0b482d1b":"metrics.accuracy_score(predictions_log.actual_quality, predictions_log.pred_quality)","2a17fa4f":"confusionMatrix = metrics.confusion_matrix(predictions_log.actual_quality, predictions_log.pred_quality)\nconfusionMatrix","6000d580":"print(classification_report(predictions_log.actual_quality, predictions_log.pred_quality))","6ff7a951":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV","a1dbd317":"# Split the data into training and testing data\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.3)","7c769796":"# Create a Decision Tree\ndt_basic = DecisionTreeClassifier(max_depth=10)\n# Fit the training data\ndt_basic.fit(x_train,y_train)\n# Predict based on test data\ny_preds = dt_basic.predict(x_test)","140cb276":"# Calculate Accuracy\naccuracy_value = metrics.accuracy_score(y_test,y_preds)\naccuracy_value","0a1211fc":"# Create and print confusion matrix\nconfusion_matrix(y_test,y_preds)","90a97be9":"print(classification_report(y_test,y_preds))","c7d25efe":"# Calculate the number of nodes in the tree\ndt_basic.tree_.node_count","fce21601":"# Create a Parameter grid\nparam_grid = {\n    'max_depth' : range(4,20,4),\n    'min_samples_leaf' : range(20,200,40),\n    'min_samples_split' : range(20,200,40),\n    'criterion' : ['gini','entropy'] \n}\nn_folds = 5","d0d9297f":"dtree = DecisionTreeClassifier()\ngrid = GridSearchCV(dtree, param_grid, cv = n_folds, n_jobs = -1,return_train_score=True)","92463383":"grid.fit(x_train,y_train)","1fe47018":"cv_result = pd.DataFrame(grid.cv_results_)\ncv_result.head()","c2397984":"grid.best_params_","b2fec12a":"grid.best_score_","1ed435d7":"best_grid = grid.best_estimator_\nbest_grid","091a28ff":"best_grid.fit(x_train,y_train)","7369fde3":"y_preds = best_grid.predict(x_test)","b6eee961":"# Calculate Accuracy\naccuracy_value = metrics.accuracy_score(y_test,y_preds)\naccuracy_value","ed0dab23":"# Create and print confusion matrix\nconfusion_matrix(y_test,y_preds)","1f0f17e5":"print(classification_report(y_test,y_preds))","810da50d":"A high positive correlation of 0.67 is observed between :\n1. fixed acidity & citric acid\n2. fixed acidity & density\n3. free sulfur dioxide & total sulfur dioxide\n\nfixed acidity & pH are negatively correlated with a high absolute magnitude of 0.68 .","7f5e787c":"Defining probabilities for range(0,0.9) with a step-size of 0.1 . This is done to find the most optimal cutoff to achieve balance among accuracy, specificity & sensitivity.","425b9e3d":"#### Testing for Decision Tree","5249acfb":"## EDA","9e2531fa":"Since accuracy, sensitivity & specificity attain a balance when the probability = 0.18, therefore, 0.18 is considered to be the threshold.","2edf386f":"#### Numerical Columns data distribution","aef4deab":"#### Hyperparameter tuning for Decision Trees","3d4e78ed":"## Logistic Regression","396252e1":"Since VIF for all features is <10, therefore all the features can be used in model building.","42d78b03":"A linear relationship can be observed for : \n1. fixed acidity vs density \n2. fixed acidity vs pH \n3. total sulfur dioxide vs free sulfur dioxide\n\nHowever 'quality' does not seem to be directly related to any other feature.","cb8aa3ae":"#### Testing for Logistic Regression","7bf1aca9":"There does not exists extreme differences between the outliers & upper & lower extremes.","030535ba":"An increase is observed in the following as the wine quality increases :\n> 1. citric acid\n> 2. sulphates\n> 3. alcohol\n\nAn decrease is observed in the following as the wine quality increases :\n> 1. volatile acidity\n> 2. chlorides\n> 3. pH","a25c2d47":"#### Scaling all the numerical features","d8355c51":"There is no null datapoint in the dataset.","41e6c021":"## Decision Tree "}}