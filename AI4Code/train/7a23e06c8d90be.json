{"cell_type":{"6e6af5a6":"code","37b7fc3d":"code","71c4ebd3":"code","cf03d208":"code","2e62c0c7":"code","ab8579ea":"code","d25e5555":"code","343d2e39":"code","80a490cf":"code","2bbe957d":"code","c8e97c0b":"code","1ceb06e9":"code","a199bcb9":"code","b4b98485":"code","6940087f":"code","e2d7a635":"code","74963c43":"code","0dbedc4e":"code","da2ecec3":"code","3098e155":"code","c28cff2a":"code","4165802e":"code","5457b226":"code","47750a7d":"code","f2061112":"code","4da0a5ca":"code","b4cf3052":"code","c22bcbec":"code","a3a764e4":"code","2b11846c":"code","1d438048":"code","e1a110d9":"code","79ed7a05":"code","015cb72b":"code","eae31d8a":"code","73b74cd0":"code","cce971a1":"code","f4fb568a":"code","50c19cfc":"code","d666d82f":"code","ee255cae":"code","ab846630":"code","c600e3dd":"code","99aa8bcc":"code","4cba4245":"code","8d7c6ac3":"code","8b7dc0a8":"code","407e2813":"code","7d563f15":"code","88c91fd5":"code","c526e117":"code","fb381c12":"markdown","4755d60b":"markdown","ba9a2757":"markdown","1e2ae294":"markdown","67558dec":"markdown","554a1096":"markdown","ff7a7e68":"markdown","ef2e72f1":"markdown","77445a13":"markdown","e70a6c3c":"markdown","1b8bc678":"markdown","5e1c1967":"markdown","37ac9df2":"markdown","49c0eec3":"markdown","21e2c052":"markdown","2111b033":"markdown","91f028f1":"markdown","0a5310ae":"markdown","f56100d8":"markdown","4947542d":"markdown","e9dd6ff0":"markdown","075570c9":"markdown","aba9f26f":"markdown","0efa1297":"markdown","3da200c4":"markdown","675d255c":"markdown","8b057ec9":"markdown","b21e6d78":"markdown","1cff2638":"markdown","11a4a89b":"markdown","7915d2e4":"markdown","146d45fd":"markdown","9206e493":"markdown","e756d630":"markdown","db2c4ced":"markdown","e9c5e363":"markdown","e3e66b78":"markdown","8ab87629":"markdown","7caf854c":"markdown","fe2c6a67":"markdown","9a5ab41a":"markdown","91add9bf":"markdown"},"source":{"6e6af5a6":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport seaborn as sns\nimport plotly.express as px\n%matplotlib inline\n\n# Make Plotly work in your Jupyter Notebook\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot \ninit_notebook_mode(connected = True)\n\nimport cufflinks as cf\n\n# Use Plotly locally\ncf.go_offline()","37b7fc3d":"df = pd.read_csv(\"\/kaggle\/input\/onlineretail\/OnlineRetail.csv\", encoding= 'unicode_escape')\ndf.head()","71c4ebd3":"df.info()","cf03d208":"df.isnull().sum()","2e62c0c7":"df = df.drop(columns=['CustomerID'])","ab8579ea":"df['Description'] = df['Description'].fillna('No Description')","d25e5555":"df.isnull().sum()","343d2e39":"df[\"InvoiceDate\"] = pd.to_datetime(df[\"InvoiceDate\"])","80a490cf":"df.describe().T","2bbe957d":"df[\"Year\"] = (df[\"InvoiceDate\"]).dt.year\ndf[\"Month\"] = (df[\"InvoiceDate\"]).dt.month\ndf[\"Day\"] = (df[\"InvoiceDate\"]).dt.day\ndf[\"Time\"] = df[\"InvoiceDate\"].dt.strftime('%H:%M')\ndf.head()","c8e97c0b":"df['DayName'] = df['InvoiceDate'].dt.day_name()","1ceb06e9":"df.DayName.value_counts()","a199bcb9":"df[\"DayNum\"] = df['InvoiceDate'].dt.dayofweek\ndf[\"IsWeekend\"] = (df[\"DayNum\"] >= 5).astype(int)\ndf.head()","b4b98485":"end_time = '17:00'\nstart_time = '09:00'\ndf[\"OfficeTime\"] = ((df['Time'] > start_time) & (df['Time'] < end_time)).astype(int)","6940087f":"df['Quantity'] = df['Quantity'].astype(str).str.replace('-', '').astype(int)","e2d7a635":"df['UnitPrice'] = df['UnitPrice'].astype(str).str.replace('-', '').astype(float)","74963c43":"df[\"Sale\"] = df[\"UnitPrice\"] * df[\"Quantity\"]","0dbedc4e":"fig = px.histogram(df, x = \"Country\")\nfig.update_layout(\n    plot_bgcolor = \"#EEEEEE\",\n    paper_bgcolor = \"#f6f5f5\",\n    xaxis = dict(\n        title_text = \"<b> Country <\/b>\",\n        titlefont = dict(size = 12),\n        categoryorder = 'total descending'\n    ),\n    yaxis = dict(\n        title_text = \"<b>Total orders placed<\/b>\",\n        titlefont = dict(size = 12)\n    ),\n    title_text = \"<b> Popular country to order online products <\/b>\",\n    title_font_size = 16,\n    title_font_color = \"black\",\n    title_pad_t = 5,\n    title_pad_l = 20,\n    )\n \n\nfig.update_yaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\nfig.update_xaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\n\nfig.show()\n","da2ecec3":"df_uk = df.loc[df[\"Country\"] == \"United Kingdom\"]\ndf_uk.shape","3098e155":"df_no_uk = df.loc[df[\"Country\"] != \"United Kingdom\"]\ndf_no_uk.shape","c28cff2a":"# Collections for each dataset\ndatasets = [df_uk, df_no_uk]\nnames = ['df_uk', 'df_no_uk']\n\n# Creating a DataFrame with useful information about all datasets\ndata_info = pd.DataFrame({})\ndata_info['dataset'] = names\ndata_info['n_rows'] = [df.shape[0] for df in datasets]\ndata_info['n_cols'] = [df.shape[1] for df in datasets]\ndata_info['null_amount'] = [df.isnull().sum().sum() for df in datasets]\ndata_info['qty_null_columns'] = [len([col for col, null in df.isnull().sum().items() if null > 0]) for df in datasets]\ndata_info['null_columns'] = [', '.join([col for col, null in df.isnull().sum().items() if null > 0]) for df in datasets]\n\ndata_info.style.background_gradient()","4165802e":"total_percent_uk = (df_uk.shape[0]\/df.shape[0]) * 100\nprint(\"UK percentage of total data\", total_percent_uk)","5457b226":"df_sale = df_no_uk.groupby([\"Country\",\"OfficeTime\", \"IsWeekend\"]).agg({\n    \"Sale\" : \"sum\"\n}).reset_index()","47750a7d":"fig = px.histogram(df_sale, x = \"Country\",y = \"Sale\", color = \"OfficeTime\", facet_col = \"IsWeekend\",\n                  color_discrete_map={'No': '#000080', \n                                      'Yes': '#FF9933'\n                  },\n                  )\nfig.update_layout(\n    plot_bgcolor = \"#EEEEEE\",\n    paper_bgcolor = \"#f6f5f5\",\n    \n    yaxis = dict(\n        title_text = \"<b>Total orders placed<\/b>\",\n        titlefont = dict(size = 12)\n    ),\n    title_text = \"<b> Orders placed <\/b>\",\n    title_font_size = 16,\n    title_font_color = \"black\",\n    title_pad_t = 5,\n    title_pad_l = 20,\n    )\n \n\nfig.update_yaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\nfig.update_xaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\",\n                title_text = \"<b>Country<\/b>\", titlefont = dict(size = 12))\n\nfig.show()\n\n\n\n","f2061112":"df_des = df_no_uk.groupby([\"Description\"]).agg({\n    \"Description\": \"count\",\n    \"Quantity\": \"sum\"\n})","4da0a5ca":"df_des.rename(columns = {\n    \"Description\" : \"Count\"\n}, inplace = True)","b4cf3052":"df_des_c = df_des.sort_values(\"Count\", ascending = False)\ndf_des_c","c22bcbec":"fig = px.bar(df_des_c[1:16], x = df_des_c[1:16].index, y = \"Count\")\nfig.update_layout(\n    plot_bgcolor = \"#EEEEEE\",\n    paper_bgcolor = \"#f6f5f5\",\n    autosize = False,\n    width = 1000,\n    height = 400,\n    xaxis = dict(\n        title_text = \"<b> Item Name <\/b>\",\n        titlefont = dict(size = 12),\n        categoryorder = 'total descending'\n    ),\n    yaxis = dict(\n        title_text = \"<b> Item Count <\/b>\",\n        titlefont = dict(size = 12)\n    ),\n    title_text = \"<b> Count of each item <\/b>\",\n    title_font_size = 16,\n    title_font_color = \"black\",\n    title_pad_t = 5,\n    title_pad_l = 20,\n    )\n \n\nfig.update_yaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\nfig.update_xaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\n\nfig.show()","a3a764e4":"df_des_q = df_des.sort_values(\"Quantity\", ascending = False)\ndf_des_q","2b11846c":"fig = px.bar(df_des_q[:15], x = df_des_q[:15].index, y = \"Quantity\")\nfig.update_layout(\n    plot_bgcolor = \"#EEEEEE\",\n    paper_bgcolor = \"#f6f5f5\",\n    autosize = False,\n    width = 1000,\n    height = 400,\n    xaxis = dict(\n        title_text = \"<b> Item Name <\/b>\",\n        titlefont = dict(size = 12),\n        categoryorder = 'total descending'\n    ),\n    yaxis = dict(\n        title_text = \"<b> Quantity Count <\/b>\",\n        titlefont = dict(size = 12)\n    ),\n    title_text = \"<b> Most Popular item according to quantity <\/b>\",\n    title_font_size = 16,\n    title_font_color = \"black\",\n    title_pad_t = 5,\n    title_pad_l = 20,\n    )\n \n\nfig.update_yaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\nfig.update_xaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\n\nfig.show()","1d438048":"df_month = df_no_uk.groupby([\"Month\",  \"Country\"])[[\"StockCode\", \"Sale\"]].agg({\n    \"StockCode\":\"count\",\n    \"Sale\":\"sum\"\n}).reset_index()\ndf_month","e1a110d9":"fig = px.bar(df_month, x = \"Month\", y = \"StockCode\", color_discrete_sequence= [\"#EE4B2B\"] * len(df_month))\nfig.update_layout(\n    plot_bgcolor = \"#EEEEEE\",\n    paper_bgcolor = \"#f6f5f5\",\n    autosize = False,\n    width = 1000,\n    height = 400,\n    xaxis = dict(\n        title_text = \"<b> Month Number <\/b>\",\n        titlefont = dict(size = 12),\n        categoryorder = 'total descending'\n    ),\n    yaxis = dict(\n        title_text = \"<b> StockCode Count <\/b>\",\n        titlefont = dict(size = 12)\n    ),\n    title_text = \"<b> Total count of StockCode for each month <\/b>\",\n    title_font_size = 16,\n    title_font_color = \"black\",\n    title_pad_t = 5,\n    title_pad_l = 20,\n    )\n \n\nfig.update_yaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\nfig.update_xaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\n\nfig.show()","79ed7a05":"fig = px.bar(df_month, x = \"Month\", y = \"Sale\", color_discrete_sequence = [\"#0047ab\"] * len(df_month))\nfig.update_layout(\n    plot_bgcolor = \"#EEEEEE\",\n    paper_bgcolor = \"#f6f5f5\",\n    autosize = False,\n    width = 1000,\n    height = 400,\n    xaxis = dict(\n        title_text = \"<b> Month Number <\/b>\",\n        titlefont = dict(size = 12),\n        categoryorder = 'total descending'\n    ),\n    yaxis = dict(\n        title_text = \"<b> Total Sale <\/b>\",\n        titlefont = dict(size = 12)\n    ),\n    title_text = \"<b> Month according to their total sale <\/b>\",\n    title_font_size = 16,\n    title_font_color = \"black\",\n    title_pad_t = 5,\n    title_pad_l = 20,\n    )\n \n\nfig.update_yaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\nfig.update_xaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\n\nfig.show()","015cb72b":"df_con = df_no_uk.groupby([\"Country\", \"DayName\"]).agg({\n    \"DayName\": \"count\"\n})\ndf_con.rename(columns = {\n    \"DayName\": \"DayNameCount\"\n}, inplace = True)\n\ndf_con = df_con.reset_index()\ndf_con","eae31d8a":"import plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(go.Bar(x = df_con[\"DayName\"], y =df_con[\"DayNameCount\"] ,\n                      marker=dict(color=\"#ab0047\"),\n                    name = \"\",\n                    hovertemplate =\n                            df_con[\"Country\"]+\n                            '<br>'+\n                            '%{y}',\n                    \n                        ))\n\nfig.update_layout(\n    plot_bgcolor = \"#ECECEC\",\n    title = \"<b>Shopping according to days in different countries<\/b>\",\n    title_font_size = 16,\n    title_font_color = \"black\",\n    title_pad_t = 5,\n    title_pad_l = 20,\n     xaxis = dict(\n        title_text = \"<b> Days <\/b>\",\n        titlefont = dict(size = 12),\n        categoryorder = 'total descending'\n    ),\n    yaxis = dict(\n        title_text = \"<b> Day Count <\/b>\",\n        titlefont = dict(size = 12),\n    ),\n    hoverlabel=dict(\n        bgcolor=\"white\",\n        font_size=16,\n        font_family=\"Rockwell\"\n    )\n)\n\nfig.update_yaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\nfig.update_xaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\n\n\nfig.show()","73b74cd0":"df_con = df_no_uk.groupby(\"Country\").agg({\n    \"Sale\":\"sum\",\n    \"Quantity\":\"sum\"\n}).reset_index()\ndf_con","cce971a1":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nx = df_con[\"Country\"]\ny1 = df_con[\"Sale\"]\ny2 = df_con[\"Quantity\"]\n\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig.add_trace(go.Scatter(x = x, y = y1, mode = \"lines+markers\", name = \"Sale\",\n                        line=dict(color='#EC2781', width=2)), secondary_y=False,)\nfig.add_trace(go.Scatter(x = x, y = y2, mode = \"lines+markers\", name = \"Quantity\",\n                        line=dict(color='#3C8DD6', width=2)), secondary_y=True,)\n\n\n\nfig.update_layout(\n    plot_bgcolor = \"#ECECEC\",\n    title = \"<b>Total quantity purchased and total sale for each country<\/b>\",\n    title_font_size = 16,\n    title_font_color = \"black\",\n    title_pad_t = 5,\n    title_pad_l = 20,\n     xaxis = dict(\n        title_text = \"<b> Countries <\/b>\",\n        titlefont = dict(size = 12)\n    ),\n    \n    hoverlabel=dict(\n        bgcolor=\"white\",\n        font_size=16,\n        font_family=\"Rockwell\"\n    )\n)\n\nfig.update_yaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\nfig.update_xaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\n\n# Set y-axes titles\nfig.update_yaxes(title_text=\"<b>Sale<\/b>\", secondary_y=False)\nfig.update_yaxes(title_text=\"<b>Quantity<\/b>\", secondary_y=True)\n\nfig.show()\n","f4fb568a":"df_p = df_no_uk.groupby(\"UnitPrice\").agg({\n    \"Quantity\":\"sum\"\n}).reset_index()\ndf_p","50c19cfc":"fig = px.scatter(x = df_p[\"UnitPrice\"], y =df_p[\"Quantity\"],  log_x=True )\n\nfig.update_layout(\n    plot_bgcolor = \"#ECECEC\",\n    title = \"<b>Total Quantity of products purchased according to their unit price<\/b>\",\n    title_font_size = 16,\n    title_font_color = \"black\",\n    title_pad_t = 5,\n    title_pad_l = 20,\n     xaxis = dict(\n        title_text = \"<b> Unit Price <\/b>\",\n        titlefont = dict(size = 12)\n    ),\n    yaxis = dict(\n        title_text = \"<b> Total Quantity <\/b>\",\n        titlefont = dict(size = 12)\n    ),\n    \n    hoverlabel=dict(\n        bgcolor=\"white\",\n        font_size=16,\n        font_family=\"Rockwell\"\n    )\n)\n\nfig.update_yaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\nfig.update_xaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\n\nfig.show()","d666d82f":"df_con1 = df_no_uk.groupby([ \"Country\", \"UnitPrice\"]).agg({\n    \"UnitPrice\":\"count\"\n}).rename(columns = {\n    \"UnitPrice\":\"TotalUnit\"\n}).reset_index()\n","ee255cae":"fig = px.bar(df_con1, x = df_con1[\"Country\"], y = df_con1[\"UnitPrice\"], color = df_con1[\"UnitPrice\"],\n             hover_data= [\"TotalUnit\"], log_y = True, color_continuous_scale=px.colors.sequential.Plasma)\n\n\nfig.update_layout(\n    plot_bgcolor = \"#ECECEC\",\n    title = \"<b>Items purchased by countries according to their unit price<\/b>\",\n    title_font_size = 16,\n    title_font_color = \"black\",\n    title_pad_t = 5,\n    title_pad_l = 20,\n     xaxis = dict(\n        title_text = \"<b> Countries <\/b>\",\n        titlefont = dict(size = 12)\n    ),\n    yaxis = dict(\n        title_text = \"<b> Count of Units <\/b>\",\n        titlefont = dict(size = 12)\n    ),\n    \n    hoverlabel=dict(\n        bgcolor=\"white\",\n        font_size=16,\n        font_family=\"Rockwell\"\n    )\n)\n\nfig.update_yaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\nfig.update_xaxes(showticklabels = True, showline = True, linewidth = 2, linecolor = \"black\")\n\nfig.show()","ab846630":"df_uk[\"Time\"] = pd.to_datetime(df_uk[\"Time\"])","c600e3dd":"fig = px.scatter(df_uk, x=\"Time\", y=\"Quantity\",  facet_row = \"DayName\",color = \"DayName\",\n             color_discrete_map={\n                \"Sunday\":\"#f032e6\",\n                \"Monday\":\"#e6194B\",\n                \"Tuesday\":\"#f58231\",\n                \"Wednesday\":\"#ffe119\",\n                \"Thrusday\":\"#bfef45\",\n                \"Friday\":\"#3cb44b\",\n             })\n\nfor annotation in fig.layout.annotations:\n    annotation.text = \"\"\n\n# hide subplot y-axis titles titles\nfor axis in fig.layout:\n    if type(fig.layout[axis]) == go.layout.YAxis:\n        fig.layout[axis].title.text = ''\n        \n\nfig.update_layout(title = \"<b>Distribution of sale each day according to time and quantity<\/b>\",\n                 plot_bgcolor = \"#ECECEC\")\n\nfig.show()","99aa8bcc":"df_mon = df_uk.groupby([\"Month\", \"DayName\", \"OfficeTime\"]).agg({\n    \"Quantity\":\"sum\",\n    \"Sale\":\"sum\",\n    \n}).reset_index()\ndf_mon","4cba4245":"df_sale = df_uk[df_uk[\"Year\"] == 2011].groupby(\"Month\").agg({\n    \"Sale\":\"sum\"\n}).reset_index()\ndf_sale","8d7c6ac3":"fig = go.Figure()\nfig.add_trace(go.Scatter(x = df_sale['Month'], y =df_sale[\"Sale\"] ,\n                    mode='lines',\n                    \n                    line=dict(color='firebrick', width=2)\n                        ))\n\n\nfig.update_layout(\n    plot_bgcolor = \"#ECECEC\",\n    title = \"<b>Sales in 2011<\/b>\",\n    xaxis_title = \"Country\",\n    yaxis_title = \"Total Sale\")\n\nfig.show()","8b7dc0a8":"df_uk_des = df_uk.groupby(\"Description\").agg({\n    \"Quantity\":\"sum\"\n}).sort_values(by=['Quantity'], ascending=False).reset_index()\ndf_uk_des[:10]","407e2813":"fig = px.bar(df_uk_des[:10], x = \"Description\", y = \"Quantity\",\n             color_discrete_sequence= [\"#ff6b00\"] * len(df_uk_des)\n            )\nfig.update_layout(\n        plot_bgcolor = \"#ECECEC\",\n        title = \"<\/b>Top 10 most ordered items in Uk<\/b>\",\n        yaxis_title = \"Total Items\",\n        xaxis_title = \"Item Description\")\n\nfig.show()","7d563f15":"df_uk_sale1 = df_uk[df_uk[\"Year\"] == 2011].groupby([\"DayName\", \"OfficeTime\"]).agg({\n    \"Sale\":\"sum\"\n}).reset_index()\ndf_uk_sale1","88c91fd5":"fig = px.histogram(df_uk_sale1, x = \"DayName\", y = \"Sale\", color=\"DayName\",\n                    color_discrete_sequence=px.colors.qualitative.G10,\n)\nfig.update_layout(\n        plot_bgcolor = \"#ECECEC\",\n        title = \"<\/b>Total Sales each day in Uk<\/b>\",\n        yaxis_title = \"Total Sale\",\n        xaxis_title = \"Day\")\nfig.show()","c526e117":"fig = px.bar(df_uk_sale1, x = \"OfficeTime\", y = \"Sale\")\nfig.update_layout(\n        plot_bgcolor = \"#ECECEC\",\n        title = \"<\/b>Distribution of sales according to office time<\/b>\",\n        yaxis_title = \"Total Sale\",\n        xaxis_title = \"Office Time\")\nfig.show()","fb381c12":"## Which month has highest sale","4755d60b":"# Import the libraries","ba9a2757":"# Non UK Countries","1e2ae294":"## Popular time, day and sale relation UK","67558dec":"United Kingdom is the highest purchaser compared to others. Let us create two dataframe one of UK and other without it.","554a1096":"### Checking total null values","ff7a7e68":"## Total Sales in UK in 2011","ef2e72f1":"### Quantity","77445a13":"#### Drop column","e70a6c3c":"Assuming that quantity should not be negative we will just remove the \"-\" sign from the quantity value.","1b8bc678":"## Is the product with less unit price ordered more","5e1c1967":"From above table we see that the most ordered product have unit price zero. It is not possible in real time situations. Hence we can conclude that:<br>\n1. Entry is wrong.\n2. Some offer is applicable on those products","37ac9df2":"## Which country has how much sale","49c0eec3":"## Total sales according to product description","21e2c052":"## Which Quantity is maximum according to description","2111b033":"## Splitting Invoice Date column into year, month, date and time column seperately","91f028f1":"## Creating Sale Column","0a5310ae":"In October the sale is maximum and also the stock code count is highest.","f56100d8":"### Unit Price","4947542d":"## Sale in 2011 according to DayName and OfficeTime","e9dd6ff0":"## Statistical description of data set","075570c9":"## Segregate day column as weekend or weekday","aba9f26f":"Customer ID and description has missing values. Invoice date is present as object type instead of date time.","0efa1297":"## Which country order cheap products more","3da200c4":"Here we see that Quantity and Unit price are in negative. This has to be seen later as these values should ideally be positive in nature.","675d255c":"## Information about the column type","8b057ec9":"From above we can see that UK greater than 90% of total data","b21e6d78":"## Which day is most popular in which country","1cff2638":"# EDA","11a4a89b":"This notebook tries to generate as many questions possible for the given dataset. Instead of focusing on data visualization I have tried to ask questions from the dataset. <br>\nIf you have some other questions which can also be asked please write in comment section. <br>\nAlso I will be publishing a topic modelling notebook based on description section of the dataframe. If you have any suggestions or preffered libraries of NLP do comment!!","7915d2e4":"## Popular Countries ","146d45fd":"## Check total sale in week in Non-UK","9206e493":"## In which month maximum shopping is done","e756d630":"### Analysing Description Column","db2c4ced":"Let us exclude the \"POSTAGE\" and plot other items.","e9c5e363":"## Changing Date column type","e3e66b78":"## Popular items according to description Non-UK","8ab87629":"## Checking negative value","7caf854c":"# UK","fe2c6a67":"## Segregate time column as office time or free time","9a5ab41a":"From the above graph it seems maximum products are ordered during office time and in week days.","91add9bf":"### Checking null values once again"}}