{"cell_type":{"23bfaf6b":"code","c6aa5741":"code","478dc22a":"code","4602a088":"code","8f68fca1":"code","ca2ca6a5":"code","49a395f9":"code","7caaee8c":"code","ee302e29":"code","6a680c04":"code","252d0b7b":"code","3f4a7bc2":"code","a71137e9":"code","c724b5ff":"code","42eac17e":"code","ac9c9977":"code","a3ea6763":"code","7d483a21":"code","4fd8f605":"code","66c8b3f4":"code","0ad66f0b":"code","cc1fab2c":"code","f151b0b9":"code","900ff1be":"code","36451e1b":"code","5f343f51":"code","a95fe6b6":"code","108c84d3":"markdown","8141de63":"markdown","bfed86b2":"markdown","80021809":"markdown","6961e3b7":"markdown","f364dc04":"markdown","b5c80f09":"markdown","fb17280c":"markdown","21d64331":"markdown","98576cd6":"markdown","5e707090":"markdown","d973d626":"markdown","f52672c2":"markdown","7053d0e3":"markdown","80f436f6":"markdown","f2ac8912":"markdown","7b134565":"markdown","56c9e8be":"markdown","d43f510f":"markdown"},"source":{"23bfaf6b":"import pandas as pd\nimport numpy as np\nimport os\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nimport xml.etree.ElementTree as et \nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_extraction import FeatureHasher\n\n\n\nimport warnings\nwarnings.filterwarnings('ignore')","c6aa5741":"\ntrain = pd.read_csv('..\/input\/car-crashes-severity-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/car-crashes-severity-prediction\/test.csv')\nweather = pd.read_csv('..\/input\/car-crashes-severity-prediction\/weather-sfcsv.csv')","478dc22a":"def read_xml(cols):\n\n    xtree = et.parse(\"..\/input\/car-crashes-severity-prediction\/holidays.xml\")\n    xroot = xtree.getroot()\n\n    df_cols = cols\n    rows = []\n\n    for node in xroot: \n        childs = list(node) \n        date = childs[0]\n        description = childs[1]\n        rows.append({\"date\": date.text, \"description\": description.text})\n\n\n    holiday = pd.DataFrame(rows, columns = df_cols)    \n    return holiday\n    \n","4602a088":"def add_time_features(df):\n\n    date=df['timestamp'].str.split().str[0]\n    time=df['timestamp'].str.split().str[1]\n    \n    Year=date.apply(lambda x : x.split(\"-\")[0]).astype(int)\n    Month=date.apply(lambda x : x.split(\"-\")[1])\n    Day=date.apply(lambda x : x.split(\"-\")[2])\n\n    Hour=time.apply(lambda x : x.split(\":\")[0])\n    Minute = time.apply(lambda x : x.split(\":\")[1])\n\n    df['date'] = date\n    df['Year']=Year\n    df['Month']=Month.astype(str).astype(int)\n    df['Day']=Day.astype(str).astype(int)\n    df['Hour']=Hour.astype(str).astype(int)\n    df['Minute']=Minute.astype(str).astype(int)\n    \n    return df\n    ","8f68fca1":"train.head()","ca2ca6a5":"train.shape","49a395f9":"train.describe()","7caaee8c":"train.info()","ee302e29":"train.Severity.value_counts()","6a680c04":"holiday = read_xml([\"date\", \"description\"])","252d0b7b":"train = add_time_features(train)\ntest = add_time_features(test)","3f4a7bc2":"train_holiday = pd.merge(train,holiday,how=\"left\")\ntest_holiday = pd.merge(test,holiday,how=\"left\")","a71137e9":"weather['timestamp'] = pd.to_datetime(weather[['Year', 'Month', 'Day','Hour']])\nweather = weather.drop_duplicates([\"timestamp\"])\nweather.drop(\"timestamp\",axis=1);","c724b5ff":"train_holiday_weather = pd.merge(train_holiday, weather,\n                                 left_on=['Year', 'Month', \"Day\",\"Hour\"],\n                                 right_on=['Year', 'Month', \"Day\",\"Hour\"],how=\"left\")\n\ntest_holiday_weather = pd.merge(test_holiday, weather,\n                                 left_on=['Year', 'Month', \"Day\",\"Hour\"],\n                                 right_on=['Year', 'Month', \"Day\",\"Hour\"],how=\"left\")\n\n","42eac17e":"train_holiday_weather['loc'] = (train_holiday_weather['Lng']+train_holiday_weather['Lat'])\/2\ntest_holiday_weather['loc'] = (test_holiday_weather['Lng']+test_holiday_weather['Lat'])\/2","ac9c9977":"cat = ['Bump','Crossing','Give_Way','Junction','No_Exit','Railway','Roundabout','Stop','Amenity',\"Selected\"]\n\nx_train = train_holiday_weather[cat].sum(1)\nx_test = test_holiday_weather[cat].sum(1)\n\ntrain_holiday_weather['cat_sum'] = x_train\ntest_holiday_weather['cat_sum'] = x_test","a3ea6763":"train_holiday_weather['is_holiday'] = train_holiday_weather['description'].replace(np.nan, 0)\ntrain_holiday_weather['is_holiday'] = train_holiday_weather['description'].apply(lambda x : 1 if x != 0 else 0)\n\ntest_holiday_weather['is_holiday'] = test_holiday_weather['description'].replace(np.nan, 0)\ntest_holiday_weather['is_holiday'] = test_holiday_weather['description'].apply(lambda x : 1 if x != 0 else 0)","7d483a21":"nhash = 5\nfh = FeatureHasher(n_features=nhash, input_type='string')\n# cat.append(\"Weather_Condition\")\n# cat.append(\"Side\")\n\ntrain_sp = fh.fit_transform(train_holiday_weather[cat])\ntest_sp = fh.fit_transform(test_holiday_weather[cat])\n\nnew_col = ['f'+str(i) for i in range(nhash)]\n\ntrain_df = pd.DataFrame(train_sp.toarray(), columns=new_col)\ntest_df = pd.DataFrame(test_sp.toarray(), columns=new_col)\n\ntrain_holiday_weather = pd.concat([train_holiday_weather, train_df], axis=1)\ntest_holiday_weather = pd.concat([test_holiday_weather, test_df], axis=1)","4fd8f605":"train_holiday_weather = train_holiday_weather.fillna(train_holiday_weather.median())\ntest_holiday_weather = test_holiday_weather.fillna(test_holiday_weather.median())\n\n# train_holiday_weather = train_holiday_weather.dropna(axis=1)\n# test_holiday_weather = test_holiday_weather.dropna(axis=1)","66c8b3f4":"cols_to_drop = [ 'timestamp_x','timestamp_y','date','Side',\"Selected\",\"description\",'Weather_Condition'\n               ,\"Wind_Chill(F)\",\"Precipitation(in)\",\"Temperature(F)\",\"Humidity(%)\",\"Wind_Speed(mph)\"\n                   ]\ntrain_holiday_weather = train_holiday_weather.drop(cols_to_drop,axis=1,errors='ignore')\ntest_holiday_weather = test_holiday_weather.drop(cols_to_drop,axis=1,errors='ignore')\n\n","0ad66f0b":"train_df, val_df = train_test_split(train_holiday_weather, test_size=0.2, random_state=42)\n# train_df = train_df.sample(frac=1,random_state=8)\nX_train = train_holiday_weather.drop(columns=['ID', 'Severity'])\ny_train = train_holiday_weather['Severity']\n\n\n\nX_val = val_df.drop(columns=['ID', 'Severity'])\ny_val = val_df['Severity']\n# Create an instance of the classifier\nclassifier = RandomForestClassifier(max_depth=2, random_state=42)\n\n# Train the classifier\nclassifier = classifier.fit(X_train, y_train)\nprint(\"The accuracy of the classifier on the validation set is \", (classifier.score(X_val, y_val)))\n","cc1fab2c":"# print (sorted(zip(map(lambda x: round(x,5), classifier.feature_importances_), X_train.columns), \n#              reverse=True))","f151b0b9":"# def model(data):\n#     train_df, val_df = train_test_split(data, test_size=0.2, random_state=42)\n# #     train_df = train_df.sample(frac=1,random_state=0)\n#     X_train = train_df.drop(columns=['ID', 'Severity'])\n#     y_train = train_df['Severity']\n\n#     X_val = val_df.drop(columns=['ID', 'Severity'])\n#     y_val = val_df['Severity']\n#     # Create an instance of the classifier\n#     classifier = RandomForestClassifier(max_depth=2, random_state=42)\n\n#     # Train the classifier\n#     classifier = classifier.fit(X_train, y_train)\n#     print(\"The accuracy of the classifier on the validation set is \", (classifier.score(X_val, y_val)))\n#     return classifier.score(X_val, y_val)","900ff1be":"# res = []\n# def run_model(train,test,n):\n\n#     nhash = n\n#     fh = FeatureHasher(n_features=n, input_type='string')\n\n#     train_sp = fh.fit_transform(train[cat])\n#     test_sp = fh.fit_transform(test[cat])\n\n#     new_col = ['f'+str(i) for i in range(nhash)]\n\n#     train_df = pd.DataFrame(train_sp.toarray(), columns=new_col)\n#     test_df = pd.DataFrame(test_sp.toarray(), columns=new_col)\n\n#     train = pd.concat([train, train_df], axis=1)\n#     test = pd.concat([test, test_df], axis=1)\n    \n#     train = train.fillna(train.median())\n#     test = test.fillna(test.median())\n\n    \n#     cols_to_drop = [ 'timestamp_x','timestamp_y','date','Side',\"Selected\",\"description\",'Weather_Condition'\n#                ,\"Wind_Chill(F)\",\"Precipitation(in)\",\"Temperature(F)\",\"Humidity(%)\",\"Wind_Speed(mph)\"\n#                    ]\n\n\n#     train = train.drop(cols_to_drop,axis=1,errors='ignore')\n#     test = test.drop(cols_to_drop,axis=1,errors='ignore')\n    \n#     res.append(model(train))\n\n    \n# for i in range(1,30):\n#      run_model(train_holiday_weather,test_holiday_weather,i)","36451e1b":"# max(res)","5f343f51":"ID = test_holiday_weather['ID']\ntest_holiday_weather = test_holiday_weather.drop(columns=['ID'])\nout = classifier.predict(test_holiday_weather)\nsubmission = pd.DataFrame({\"ID\":ID, \"Severity\":out})\nsubmission.to_csv('\/kaggle\/working\/clean_submission.csv', index=False)","a95fe6b6":"submission.shape[0] == test.shape[0]","108c84d3":"### Merging all with weather","8141de63":"### Adding is_holiday feature","bfed86b2":"### adding categorical sum feature","80021809":"### Adding lng+lat","6961e3b7":"### Adding time features to original datarame","f364dc04":"### read holiday xml ","b5c80f09":"### filling missing values","fb17280c":"# Feature Engineering","21d64331":"### using feature hashing","98576cd6":"preparing weather data for merge","5e707090":"doing the merge","d973d626":"### Perparing submission","f52672c2":"### Reading data ","7053d0e3":"### EDA ","80f436f6":"### Setup the environment","f2ac8912":"### Utils","7b134565":"### Merging Holiday with train&test dataset","56c9e8be":"### Drop columns","d43f510f":"# Building The Model"}}