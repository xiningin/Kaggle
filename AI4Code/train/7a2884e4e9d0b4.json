{"cell_type":{"66b2828c":"code","cbbdb47e":"code","b76759d0":"code","c7d7b3c7":"code","c8d7251c":"code","1ebdaef3":"code","64bf89ef":"code","e069695c":"code","005edc5d":"code","de4fde25":"code","d3da0fb7":"code","4070f325":"code","21efbf16":"code","a8e8dbe0":"code","eb59a63d":"code","3a501307":"code","e3cbcaf2":"code","360ddd06":"code","832da99b":"code","9b785e18":"code","494b6afc":"code","f215268a":"code","9577dd84":"code","96d1f1c9":"code","34192a52":"code","f7160e05":"code","3ffdfb1c":"code","6cc17257":"code","e416fd97":"code","b184f90e":"code","5b22e0d4":"code","f688e1fd":"code","e4a422e1":"code","5d2c9b55":"code","e157cd3b":"code","974d6fd5":"code","31cfb706":"code","7b94fd81":"code","c86e81d1":"code","cb16c538":"code","f61fa60b":"code","dca6fe71":"code","33c6af94":"code","279901e5":"code","1417c6cc":"code","4716725b":"code","91165440":"code","05d888d5":"code","8a23d366":"code","3561834a":"code","23442c23":"code","e7e62fe1":"code","ac4bae64":"code","09e0d43c":"markdown","8fdaa001":"markdown","c944c494":"markdown","e66ed1eb":"markdown","a707900e":"markdown","bae7668b":"markdown","d0bf3ae2":"markdown","fd4a20b0":"markdown","a62d4f31":"markdown","63ae6b62":"markdown","daffce06":"markdown","2b37a277":"markdown","a6a1a339":"markdown","566cde7a":"markdown"},"source":{"66b2828c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns \nimport plotly as py\nimport plotly.graph_objs as go\nfrom sklearn.cluster import KMeans\nimport warnings\nimport os\nwarnings.filterwarnings(\"ignore\")\npy.offline.init_notebook_mode(connected = True)\n#print(os.listdir(\"..\/input\"))","cbbdb47e":"df = pd.read_csv(r'..\/input\/Mall_Customers.csv')\ndf.head()","b76759d0":"df.describe()","c7d7b3c7":"plt.style.use('fivethirtyeight')","c8d7251c":"plt.figure(1 , figsize = (15 , 6))\nn = 0 \nfor x in ['Age' , 'Annual Income (k$)' , 'Spending Score (1-100)']:\n    n += 1\n    plt.subplot(1 , 3 , n)\n    plt.subplots_adjust(hspace =0.5 , wspace = 0.5)\n    sns.distplot(df[x] , bins = 20)\n    plt.title('Distplot of {}'.format(x))\nplt.show()","1ebdaef3":"labels = ['Female', 'Male']\nsize = [112, 88]\ncolors = ['lightgreen', 'orange']\nexplode = [0, 0.1]\n\nplt.style.use('seaborn-dark')\nplt.rcParams['figure.figsize'] = (7, 7)\nplt.pie(size, colors = colors, explode = explode, labels = labels, shadow = True, autopct = '%.2f%%')\nplt.title('A pie chart Representing the Gender', fontsize = 20)\nplt.axis('off')\nplt.legend()\nplt.show()","64bf89ef":"plt.figure(1 , figsize = (15 , 7))\nn = 0 \nfor x in ['Age' , 'Annual Income (k$)' , 'Spending Score (1-100)']:\n    for y in ['Age' , 'Annual Income (k$)' , 'Spending Score (1-100)']:\n        n += 1\n        plt.subplot(3 , 3 , n)\n        plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n        sns.regplot(x = x , y = y , data = df)\n        plt.ylabel(y.split()[0]+' '+y.split()[1] if len(y.split()) > 1 else y )\nplt.show()","e069695c":"plt.figure(1 , figsize = (15 , 6))\nfor gender in ['Male' , 'Female']:\n    plt.scatter(x = 'Age' , y = 'Annual Income (k$)' , data = df[df['Gender'] == gender] ,\n                s = 200 , alpha = 0.5 , label = gender)\nplt.xlabel('Age'), plt.ylabel('Annual Income (k$)') \nplt.title('Age vs Annual Income w.r.t Gender')\nplt.legend()\nplt.show()","005edc5d":"plt.figure(1 , figsize = (15 , 6))\nfor gender in ['Male' , 'Female']:\n    plt.scatter(x = 'Annual Income (k$)',y = 'Spending Score (1-100)' ,\n                data = df[df['Gender'] == gender] ,s = 200 , alpha = 0.5 , label = gender)\nplt.xlabel('Annual Income (k$)'), plt.ylabel('Spending Score (1-100)') \nplt.title('Annual Income vs Spending Score w.r.t Gender')\nplt.legend()\nplt.show()","de4fde25":"plt.figure(1 , figsize = (15 , 7))\nn = 0 \nfor cols in ['Age' , 'Annual Income (k$)' , 'Spending Score (1-100)']:\n    n += 1 \n    plt.subplot(1 , 3 , n)\n    plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n    sns.violinplot(x = cols , y = 'Gender' , data = df , palette = 'vlag')\n    sns.swarmplot(x = cols , y = 'Gender' , data = df)\n    plt.ylabel('Gender' if n == 1 else '')\n    plt.title('Boxplots & Swarmplots' if n == 2 else '')\nplt.show()","d3da0fb7":"'''Age and spending Score'''\nX1 = df[['Age' , 'Spending Score (1-100)']].iloc[: , :].values\ninertia = []\nfor n in range(1 , 11):\n    algorithm = (KMeans(n_clusters = n ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\n    algorithm.fit(X1)\n    inertia.append(algorithm.inertia_)","4070f325":"plt.figure(1 , figsize = (15 ,6))\nplt.plot(np.arange(1 , 11) , inertia , 'o')\nplt.plot(np.arange(1 , 11) , inertia , '-' , alpha = 0.5)\nplt.xlabel('Number of Clusters') , plt.ylabel('Inertia')\nplt.show()","21efbf16":"algorithm = (KMeans(n_clusters = 4 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\nalgorithm.fit(X1)\nlabels1 = algorithm.labels_\ncentroids1 = algorithm.cluster_centers_","a8e8dbe0":"h = 0.02\nx_min, x_max = X1[:, 0].min() - 1, X1[:, 0].max() + 1\ny_min, y_max = X1[:, 1].min() - 1, X1[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\nZ = algorithm.predict(np.c_[xx.ravel(), yy.ravel()]) ","eb59a63d":"plt.figure(1 , figsize = (15 , 7) )\nplt.clf()\nZ = Z.reshape(xx.shape)\nplt.imshow(Z , interpolation='nearest', \n           extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n           cmap = plt.cm.Pastel2, aspect = 'auto', origin='lower')\n\nplt.scatter( x = 'Age' ,y = 'Spending Score (1-100)' , data = df , c = labels1 , \n            s = 200 )\nplt.scatter(x = centroids1[: , 0] , y =  centroids1[: , 1] , s = 300 , c = 'red' , alpha = 0.5)\nplt.ylabel('Spending Score (1-100)') , plt.xlabel('Age')\nplt.show()","3a501307":"x_centroid = centroids1[: , 0]\ny_centroid = centroids1[: , 1]\n\n# 4 cohourts of users\nfor i in range(len(x_centroid)):\n    print('User Group ', i)\n    print('AGE', x_centroid[i])\n    print('Spending Score', y_centroid[i])\n    print('______________________________________________')","e3cbcaf2":"'''Annual Income and spending Score'''\nX2 = df[['Annual Income (k$)' , 'Spending Score (1-100)']].iloc[: , :].values\ninertia = []\nfor n in range(1 , 11):\n    algorithm = (KMeans(n_clusters = n ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\n    algorithm.fit(X2)\n    inertia.append(algorithm.inertia_)","360ddd06":"plt.figure(1 , figsize = (15 ,6))\nplt.plot(np.arange(1 , 11) , inertia , 'o')\nplt.plot(np.arange(1 , 11) , inertia , '-' , alpha = 0.5)\nplt.xlabel('Number of Clusters') , plt.ylabel('Inertia')\nplt.show()","832da99b":"algorithm = (KMeans(n_clusters = 5 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\nalgorithm.fit(X2)\nlabels2 = algorithm.labels_\ncentroids2 = algorithm.cluster_centers_","9b785e18":"h = 0.02\nx_min, x_max = X2[:, 0].min() - 1, X2[:, 0].max() + 1\ny_min, y_max = X2[:, 1].min() - 1, X2[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\nZ2 = algorithm.predict(np.c_[xx.ravel(), yy.ravel()]) ","494b6afc":"plt.figure(1 , figsize = (15 , 7) )\nplt.clf()\nZ2 = Z2.reshape(xx.shape)\nplt.imshow(Z2 , interpolation='nearest', \n           extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n           cmap = plt.cm.Pastel2, aspect = 'auto', origin='lower')\n\nplt.scatter( x = 'Annual Income (k$)' ,y = 'Spending Score (1-100)' , data = df , c = labels2 , \n            s = 200 )\nplt.scatter(x = centroids2[: , 0] , y =  centroids2[: , 1] , s = 300 , c = 'red' , alpha = 0.5)\nplt.ylabel('Spending Score (1-100)') , plt.xlabel('Annual Income (k$)')\nplt.show()","f215268a":"x_centroid2 = centroids2[: , 0]\ny_centroid2 = centroids2[: , 1]\n\n# 4 cohourts of users\nfor i in range(len(x_centroid2)):\n    print('User Group ', i)\n    print('Annual Income', x_centroid2[i])\n    print('Spending Score', y_centroid2[i])\n    print('______________________________________________')","9577dd84":"X3 = df[['Age' , 'Annual Income (k$)' ,'Spending Score (1-100)']].iloc[: , :].values\ninertia = []\nfor n in range(1 , 11):\n    algorithm = (KMeans(n_clusters = n ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\n    algorithm.fit(X3)\n    inertia.append(algorithm.inertia_)","96d1f1c9":"plt.figure(1 , figsize = (15 ,6))\nplt.plot(np.arange(1 , 11) , inertia , 'o')\nplt.plot(np.arange(1 , 11) , inertia , '-' , alpha = 0.5)\nplt.xlabel('Number of Clusters') , plt.ylabel('Inertia')\nplt.show()","34192a52":"algorithm = (KMeans(n_clusters = 6 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\nalgorithm.fit(X3)\nlabels3 = algorithm.labels_\ncentroids3 = algorithm.cluster_centers_","f7160e05":"df['label3'] =  labels3\ntrace1 = go.Scatter3d(\n    x= df['Age'],\n    y= df['Spending Score (1-100)'],\n    z= df['Annual Income (k$)'],\n    mode='markers',\n     marker=dict(\n        color = df['label3'], \n        size= 20,\n        line=dict(\n            color= df['label3'],\n            width= 2\n        ),\n        opacity=0.8\n     )\n)\ndata = [trace1]\nlayout = go.Layout(\n#     margin=dict(\n#         l=0,\n#         r=0,\n#         b=0,\n#         t=0\n#     )\n    title= 'Clusters',\n    scene = dict(\n            xaxis = dict(title  = 'Age'),\n            yaxis = dict(title  = 'Spending Score'),\n            zaxis = dict(title  = 'Annual Income')\n        )\n)\nfig = go.Figure(data=data, layout=layout)\npy.offline.iplot(fig)","3ffdfb1c":"x_centroid3 = centroids3[: , 0]\ny_centroid3 = centroids3[: , 1]\nz_centroid3 = centroids3[: , 2]\n\n# 4 cohourts of users\nfor i in range(len(x_centroid3)):\n    print('User Group ', i)\n    print('AGE', x_centroid3[i])\n    print('Spending Score', y_centroid3[i])\n    print('Annual Income', y_centroid3[i])\n    print('______________________________________________')","6cc17257":"df.head()","e416fd97":"df['Promo'] = np.random.choice(['Black Friday', 'Casual Promo1', 'Casual Promo2', 'Cyber Monday'], df.shape[0])","b184f90e":"df.head()","5b22e0d4":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\ndf['Promo'] = label_encoder.fit_transform(df['Promo'])","f688e1fd":"df.head()","e4a422e1":"X4 = df[['Age' , 'Annual Income (k$)' ,'Spending Score (1-100)', 'Promo']].iloc[: , :].values\ninertia = []\nfor n in range(1 , 11):\n    algorithm = (KMeans(n_clusters = n ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\n    algorithm.fit(X4)\n    inertia.append(algorithm.inertia_)","5d2c9b55":"plt.figure(1 , figsize = (15 ,6))\nplt.plot(np.arange(1 , 11) , inertia , 'o')\nplt.plot(np.arange(1 , 11) , inertia , '-' , alpha = 0.5)\nplt.xlabel('Number of Clusters') , plt.ylabel('Inertia')\nplt.show()","e157cd3b":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\npca.fit(X4)","974d6fd5":"transformed_data = pca.transform(X4)\ntransformed_data = pd.DataFrame(transformed_data,columns=['Dimension 1','Dimension 2'])\ntransformed_data.head()","31cfb706":"kmeans = KMeans(n_clusters=6)\nkmeans.fit(transformed_data)\nkmeans.predict(transformed_data)\n\nplt.scatter(transformed_data.iloc[:,0],transformed_data.iloc[:,1],c=kmeans.labels_,cmap='rainbow')\nplt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],color='black')\nplt.show()","7b94fd81":"from sklearn.mixture import GaussianMixture\ngmm = GaussianMixture(n_components=6)\ngmm.fit(transformed_data)\nlabels = gmm.predict(transformed_data)\n\nplt.scatter(transformed_data.iloc[:,0],transformed_data.iloc[:,1],c=labels,cmap='rainbow')\nplt.show()","c86e81d1":"\ncluster_proba_df = pd.DataFrame(gmm.predict_proba(transformed_data), columns = ['Cluster 1', 'Cluster 2', 'Cluster 3', 'Cluster 4', 'Cluster 5', 'Cluster 6'])\ncluster_proba_df['Belongs to'] = cluster_proba_df.idxmax(axis=1)\ncluster_proba_df.head()","cb16c538":"df['Cluster by 4 params'] = cluster_proba_df['Belongs to']\ndf.tail(20)","f61fa60b":"df.head()","dca6fe71":"df['subscribe'] = np.random.choice([0, 1], df.shape[0])","33c6af94":"# 1 - subscribed, 0 - unsubscribed\nlabel_encoder = LabelEncoder()\ndf['Gender'] = label_encoder.fit_transform(df['Gender'])\ndf.head()","279901e5":"y = df.subscribe\n\nx = df.drop(columns=['subscribe','CustomerID', 'label3', 'Cluster by 4 params'])\nimport lightgbm as lgb\nfrom sklearn.model_selection import train_test_split","1417c6cc":"x, x_test, y, y_test = train_test_split(x, y, test_size=0.2, random_state=42, stratify=y)","4716725b":"train_data = lgb.Dataset(x, label=y)\ntest_data = lgb.Dataset(x_test, label=y_test)","91165440":"parameters = {\n    'application': 'binary',\n    'objective': 'binary',\n    'metric': 'auc',\n    'is_unbalance': 'true',\n    'boosting': 'gbdt',\n    'num_leaves': 31,\n    'feature_fraction': 0.5,\n    'bagging_fraction': 0.5,\n    'bagging_freq': 20,\n    'learning_rate': 0.05,\n    'verbose': 0\n}\n\nmodel = lgb.train(parameters,\n                       train_data,\n                       valid_sets=test_data,\n                       num_boost_round=5000,\n                       early_stopping_rounds=100)","05d888d5":"x.head()","8a23d366":"data = [[0, 20, 50, 20, 0]] \nnew_customers = pd.DataFrame(data, columns = ['Gender', 'Age', 'Annual Income (k$)', 'Spending Score (1-100)', 'Promo'])","3561834a":"new_customers.head()","23442c23":"model.predict(new_customers)[0]","e7e62fe1":"data = [[1, 20, 25, 68, 1], [0, 58, 30, 30, 1], [1, 30, 35, 100, 0], [0, 26, 49, 14, 0], [0, 39, 2, 13, 4]]\nnew_customers = pd.DataFrame(data, columns = ['Gender', 'Age', 'Annual Income (k$)', 'Spending Score (1-100)', 'Promo'])","ac4bae64":"model.predict(new_customers)","09e0d43c":"### 2. Segmentation using  Annual Income and Spending Score","8fdaa001":"### 3.Segmentation using Age , Annual Income and Spending Score","c944c494":"### Count Plot of Gender","e66ed1eb":"## Data Visualization","a707900e":"### CUSTOMER UNSUBSCRIBE PREDICTION","bae7668b":"### Distribution of values in Age , Annual Income and Spending Score according to Gender","d0bf3ae2":"If value is close to 0 than the chance is bigger that customer will unsubscribe. To give more precise results A\/B test needed to find threshhold.\nE.G.  <= 0.4 = Unsubscribe.","fd4a20b0":"Due to data is absolutely random and syntetic results won't be very representative. But you can see the overall picture.","a62d4f31":"### 4.Segmentation using Age , Annual Income and Spending Score and Promo","63ae6b62":"### 1.Segmentation using Age and Spending Score","daffce06":"Likelihood that customer will unsubscribe is the maximum when it is closer to 0.","2b37a277":"### ADDING ANOTHER DATA e.g. campaigns by tag","a6a1a339":"### Ploting the Relation between Age , Annual Income and Spending Score","566cde7a":"### Histograms"}}