{"cell_type":{"2d439aad":"code","77ae32fe":"code","6518c3ec":"code","3196bcb0":"code","29ec4951":"code","cc658135":"code","eb162e90":"code","6847e1ee":"code","fae3c7a7":"code","8b496738":"code","d0510db3":"code","bfecc3ff":"code","cf2db2ba":"code","74d67bf1":"code","1bd87ba1":"code","07afe4ca":"code","c112f729":"code","34fc3b3f":"code","8b4a3a1a":"code","28ed178d":"code","45350d95":"code","d69f65a9":"code","9ffd21ed":"code","6bd40581":"code","9fc5c23b":"code","1c288eb8":"code","2aaba583":"code","62f5be74":"markdown"},"source":{"2d439aad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","77ae32fe":"import tensorflow as tf\nfrom tensorflow import keras\nfrom keras import Sequential\nfrom tensorflow.keras.optimizers import Adam\nfrom keras.layers import Flatten,Dense,Dropout,BatchNormalization\n\nfrom keras.layers import Conv1D,MaxPool1D\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix\n\n\nprint(tf.__version__)","6518c3ec":"df = pd.read_csv(\"\/kaggle\/input\/creditcardfraud\/creditcard.csv\")","3196bcb0":"df.describe()","29ec4951":"df['Class'].value_counts()","cc658135":"df.isnull().sum()","eb162e90":"df.head()","6847e1ee":"fraud_data = df[df['Class']==1]\nnon_fraud_data = df[df[\"Class\"]==0]","fae3c7a7":"non_fraud_data1 = non_fraud_data.sample(fraud_data.shape[0])\n\nnon_fraud_data1.shape","8b496738":"fraud_data.shape,non_fraud_data1.shape","d0510db3":"final_data = fraud_data.append(non_fraud_data1,ignore_index=True)\nfinal_data.shape","bfecc3ff":"features=final_data.drop(\"Class\",axis=1)\nlabel=final_data[\"Class\"]","cf2db2ba":"features.shape,label.shape","74d67bf1":"features_train,features_test,labels_train,labels_test = train_test_split(features,label,test_size=.25,random_state=41,stratify = label)","1bd87ba1":"features_train.shape,features_test.shape","07afe4ca":"scaler = StandardScaler()\nfeatures_train = scaler.fit_transform(features_train)\nfeatures_test = scaler.fit_transform(features_test)\n\n\n# converting features into dataframe\nfeatures_train = pd.DataFrame(features_train)\nfeatures_test = pd.DataFrame(features_test)\n","c112f729":"features_train = features_train.to_numpy()\nfeatures_test = features_test.to_numpy()","34fc3b3f":"features_train =features_train.reshape(features_train.shape[0],features_train.shape[1],1)\nfeatures_test =features_test.reshape(features_test.shape[0],features_test.shape[1],1)\n\nfeatures_train.shape,features_test.shape\n","8b4a3a1a":"epochs=50\nmodel=Sequential()\n\nmodel.add(Conv1D(32,2,activation='relu',input_shape=features_train[0].shape))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool1D(2))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv1D(64,2,activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool1D(2))\nmodel.add(Dropout(0.5))\n\n\n#flattening layer\nmodel.add(Flatten())\nmodel.add(Dense(64,activation=\"relu\"))\nmodel.add(Dropout(0.5))\n\n#final layer\nmodel.add(Dense(1,activation=\"sigmoid\"))\n","28ed178d":"model.summary()","45350d95":"model.compile(optimizer=Adam(lr=0.001),loss='binary_crossentropy',metrics=['accuracy'])","d69f65a9":"history =model.fit(features_train,labels_train,epochs=epochs,\n                    validation_data = (features_test,labels_test),verbose=1)","9ffd21ed":"def plot_learning_curve(history,epochs):\n    \n    epoch_range=range(1,epochs+1)\n    plt.plot(epoch_range,history.history['accuracy'])\n    plt.plot(epoch_range,history.history[\"val_accuracy\"])\n    plt.title(\"Model Accuracy\")\n    plt.xlabel(\"epochs\")\n    plt.ylabel(\"accuracy\")\n    plt.legend(\"train\",\"val\",loc=\"upper left\")\n    plt.show()\n    \n    \n     \n    plt.plot(epoch_range,history.history['loss'])\n    plt.plot(epoch_range,history.history['val_loss'])\n    plt.title('Model loss')\n    plt.ylabel('loss')\n    plt.xlabel('epoch')\n    plt.legend(['Train','Val'],loc='upper left')\n    plt.show()","6bd40581":"plot_learning_curve(history,epochs)","9fc5c23b":"final_acc = model.evaluate(features_train,labels_train)\nfinal_acc","1c288eb8":"pred = model.predict(features_test)\npred_label=pred.argmax(axis=1)\n","2aaba583":"cm=confusion_matrix(labels_test,pred.round())\ncm","62f5be74":"**The set is highly imbalanced as mentioned in the description and can be improved with a very simple process.**"}}