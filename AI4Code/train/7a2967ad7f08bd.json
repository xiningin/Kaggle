{"cell_type":{"9cc9881b":"code","eb262b58":"code","86180428":"code","35610e07":"code","9732e45f":"code","9de2a94e":"code","f719509f":"code","9508eb25":"code","28d1bf2d":"code","d2fe4dde":"code","de2aead3":"code","2516d709":"code","2f4a003a":"code","16862692":"code","818e9045":"code","26894f1b":"code","174cb139":"code","c0e716bf":"code","03f63def":"code","18607b9e":"code","6adbb8a6":"markdown","b114b9f4":"markdown","828d9c49":"markdown","988891c0":"markdown"},"source":{"9cc9881b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","eb262b58":"import tensorflow as tf\nfrom tensorflow import keras\nfrom keras.layers import Conv2D,MaxPooling2D,Dense,Flatten,Dropout\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\nimport matplotlib.pyplot as plt\nimport cv2,os,math","86180428":"train_data = '\/kaggle\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TRAIN'\ntest_data = '\/kaggle\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TEST'","35610e07":"print(os.listdir(train_data))\nprint(os.listdir(test_data))","9732e45f":"categories = ['EOSINOPHIL', 'LYMPHOCYTE', 'MONOCYTE', 'NEUTROPHIL']","9de2a94e":"os.listdir(train_data+'\/NEUTROPHIL')","f719509f":"def plot_images(img_path):\n    img = cv2.imread(img_path)\n    img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n    img = img.astype('float32')\/255.0\n    plt.imshow(img)\n    return\nplt.figure(figsize=(15,8))\nplt.subplot(221)\nplt.title('EOSINOPHIL');plt.axis('off');plot_images(train_data+'\/EOSINOPHIL\/_33_8228.jpeg')\nplt.subplot(222)\nplt.title('LYMPHOCYTE');plt.axis('off');plot_images(train_data+'\/LYMPHOCYTE\/_13_2787.jpeg')\nplt.subplot(223)\nplt.title('MONOCYTE');plt.axis('off');plot_images(train_data+'\/MONOCYTE\/_6_4213.jpeg')\nplt.subplot(224)\nplt.title('NEUTROPHIL');plt.axis('off');plot_images(train_data+'\/NEUTROPHIL\/_144_8668.jpeg')","9508eb25":"print('Training Samples Length')\nnum_samples = 0\nfor cell in os.listdir(train_data):\n    num_cells = len(os.listdir(os.path.join(train_data,cell)))\n    num_samples+=num_cells\n    print('cell :{0} length: {1}'.format(cell,num_cells))\nprint('Total Train Samples {}'.format(num_samples))\nprint('\\n'*2)\nprint('Testing Samples Length')\nnum_samples=0\nfor cell in os.listdir(test_data):\n    num_cells = len(os.listdir(os.path.join(test_data,cell)))\n    num_samples+=num_cells\n    print('cell :{0} length: {1}'.format(cell,num_cells))\nprint('Total Train Samples {}'.format(num_samples))","28d1bf2d":"train_datagen = ImageDataGenerator(rescale=1.\/255)","d2fe4dde":"test_datagen  = ImageDataGenerator(rescale=1.\/255)","de2aead3":"training_set = train_datagen.flow_from_directory(train_data,\n                                                target_size=(64,64),\n                                                batch_size=32,\n                                                color_mode='rgb',\n                                                shuffle=True,\n                                                seed = None,\n                                                class_mode='categorical'\n                                                )","2516d709":"test_set = train_datagen.flow_from_directory(test_data,\n                                                target_size=(64,64),\n                                                batch_size=32,\n                                                color_mode='rgb',\n                                                shuffle=True,\n                                                seed = None,\n                                                class_mode='categorical'\n                                                )","2f4a003a":"model = Sequential()\n\nmodel.add(Conv2D(filters=32,kernel_size=(3,3),input_shape=(64,64,3),activation='relu'))\n\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(64,kernel_size=(3,3),activation='relu'))\nmodel.add(MaxPooling2D((2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(64,kernel_size=(3,3),activation='relu'))\nmodel.add(MaxPooling2D((2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dense(4,activation='softmax'))\nmodel.summary()","16862692":"model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","818e9045":"history=model.fit_generator(training_set,steps_per_epoch=100,epochs=20,validation_data=test_set,validation_steps=100)","26894f1b":"print(history.history.keys())","174cb139":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model_accuracy')\nplt.xlabel('accuracy')\nplt.ylabel('epoch')\n\nplt.legend(['train','test'],loc='upper left')\nplt.show()","c0e716bf":"preds = model.predict_generator(test_set)","03f63def":"preds=np.argmax(preds,axis=1)","18607b9e":"preds","6adbb8a6":"## Image Preprocessing","b114b9f4":"## Build Our Model","828d9c49":"### Summary of Training and test samples","988891c0":"## Plot some Images"}}