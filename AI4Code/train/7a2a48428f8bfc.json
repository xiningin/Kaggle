{"cell_type":{"7576ff48":"code","746f8b1f":"code","0671b4b2":"code","44b8a332":"code","0c1f22fa":"code","2e0d1521":"code","fa4cc66e":"code","7e4a7fa1":"code","254bc5f7":"code","b72ec0e4":"code","60eef872":"code","21b3bd1c":"code","a1d2482d":"code","034548f5":"code","811186e5":"code","0a43d12d":"code","9b8c6d54":"markdown","e2843e3d":"markdown","39af18d0":"markdown","4e2c5058":"markdown","06b5a6e2":"markdown","e3cef2ac":"markdown","0679ea50":"markdown","be28e8ee":"markdown","75b8997b":"markdown","4ce88f10":"markdown","137edd60":"markdown","3892342b":"markdown","50ca45a2":"markdown","d1f4add0":"markdown","3aee0329":"markdown","3308b30f":"markdown","2795dbe7":"markdown","776e4cb5":"markdown","e34f3aca":"markdown"},"source":{"7576ff48":"x = \"hello world\"\nprint(x, type(x))\nx = 2\nprint(x, type(x))\nx = 2.0\nprint(x, type(x))\nx = 10j\nprint(x, type(x))\nx = [1, 2, 3]\nprint(x, type(x))\nx = (\"x\", \"y\")\nprint(x, type(x))\nx = range(5) # from 0 to n-1\nprint(x, type(x))\nx = {\"users\": 20}\nprint(x, type(x))\nx = {\"set1\", \"set2\"}\nprint(x, type(x))\nx = True\nprint(x, type(x))\nx = b\"Bytes\"\nprint(x, type(x))","746f8b1f":"with open('helloworld.txt', 'r') as f:\n    # dalsze przetwarzanie danych z pliku\n    print(f.readline())\n    #print(f.read())\n    #print(f.readlines())","0671b4b2":"print(f.readline())","44b8a332":"def funkcja():\n    pass # statement u\u017cywany w celu unikni\u0119cia b\u0142\u0119du, gdy nie mamy jeszcze zdefiniowanej tre\u015bci funkcji\n\nfunkcja()","0c1f22fa":"def funkcja(arg1, arg2): # parametry\n    return(arg1 + arg2)\n\nfunkcja(1, 5) # argumenty","2e0d1521":"def funkcja(*args): # parametry\n    return(sum(args))\n\nfunkcja(1, 5, 8, 9) # argumenty","fa4cc66e":"funkcja(1, 3) # argumenty","7e4a7fa1":"def funkcja(**args): # parametry\n    return(print(args))\n\nfunkcja(no1=1, no2=5, no3=8, no4=9) # argumenty","254bc5f7":"funkcja(no1=1, no2=0, no3=4, no4=5, no5=20) # argumenty","b72ec0e4":"def factorial(n):\n   if n == 0:\n       return 1\n   else:\n       return n*factorial(n-1)\n\nfactorial(3)","60eef872":"factorial(0)","21b3bd1c":"factorial(1)","a1d2482d":"# Tutaj zaimplementuj rekurencyjnie algorytm sortowania Quicksort.","034548f5":"class NowaKlasa:\n    \"Docstring\"\n    def __init__(self, attr = 0):\n        self.atrybut = attr # atrybuty klasy\n\n    def przedstaw_atrybut(self): # metody wewn\u0105trz klasy\n        print(\"Wartosc atrybutu wynosi: \" + str(self.atrybut))\n\nprint(NowaKlasa.__doc__)\nprint(NowaKlasa.przedstaw_atrybut)\n\nInstancja = NowaKlasa(0)\nInstancja.przedstaw_atrybut()\n\nInstancja2 = NowaKlasa(5)\nInstancja2.attr2 = 28\nInstancja2.przedstaw_atrybut()\nprint(Instancja2)\nprint(Instancja2.attr2)","811186e5":"del Instancja2.attr2\nprint(Instancja2.attr2)","0a43d12d":"del Instancja2\nprint(Instancja2)","9b8c6d54":"## **Biblioteki**\n\nBiblioteki znacz\u0105co usprawniaj\u0105 proces programowania i poprawiaj\u0105 jako\u015b\u0107 kodu.\n\nPython oferuje wiele bibliotek dla specjalist\u00f3w z dziedziny Data Science i ML.\nWiele z nich to \"must have\" dla programisty Pythona. W\u015br\u00f3d nich mo\u017cna wymieni\u0107:\n\n- TensorFlow: biblioteka do ML rozwijana przez Google, https:\/\/www.tensorflow.org\/\n- Scikit-Learn: jedna z najlepszych bibliotek do pracy ze z\u0142o\u017conymi danymi, powi\u0105zana z Numpy i Scipy, https:\/\/scikit-learn.org\/stable\/\n- Numpy: biblioteka do analizy danych, z interfejsem macierzowym, https:\/\/numpy.org\/\n- Keras: modele sieci neuronowych, https:\/\/keras.io\/\n- PyTorch: biblioteka ML, https:\/\/pytorch.org\/\n- SciPy: biblioteka ML, wykorzystywana przez in\u017cynier\u00f3w i developer\u00f3w, zawiera modu\u0142y do optymalizacji, algebry liniowej, statystyki, https:\/\/www.scipy.org\/\n- Pandas: biblioteka do grupowania i filtrowania danych, upraszcza proces analizy danych, https:\/\/pandas.pydata.org\/\n","e2843e3d":"## **Kaggle**\n\nhttps:\/\/www.kaggle.com\/competitions \/\/zadania i zawody\n\nhttps:\/\/www.kaggle.com\/learn\/intro-to-machine-learning \/\/podstawy ML\n\nhttps:\/\/www.kaggle.com\/kernels \/\/notebooks\n\nhttps:\/\/www.kaggle.com\/datasets \/\/zbiory danych\n\nhttps:\/\/www.kaggle.com\/learn\/overview \/\/kursy - tak\u017ce Python\n\nhttps:\/\/www.kaggle.com\/dansbecker\/getting-started-with-sql-and-bigquery \/\/jak po\u0142\u0105czy\u0107 si\u0119 z baz\u0105 danych na podstawie Big Query Google (wi\u0119cej na ten temat tu: https:\/\/googleapis.dev\/python\/bigquery\/latest\/magics.html)\n\n**Nasz zbi\u00f3r danych - Beijing PM2.5:**\nhttps:\/\/www.kaggle.com\/sid321axn\/beijing-multisite-airquality-data-set?select=PRSA_Data_Gucheng_20130301-20170228.csv\n\n**Oryginalne \u017ar\u00f3d\u0142o danych i opis:**\nhttps:\/\/archive.ics.uci.edu\/ml\/datasets\/Beijing+Multi-Site+Air-Quality+Data","39af18d0":"Je\u017celi liczba nazwanych argument\u00f3w nie jest zdefiniowana z g\u00f3ry, nale\u017cy u\u017cy\u0107 ** przed nazw\u0105 parametru.","4e2c5058":"Usuwanie instancji:","06b5a6e2":"**Argumenty i parametry**\n\nParametry to zmienne wewn\u0105trz nawias\u00f3w w definicji funkcji.\nArgumenty to warto\u015bci zmiennych przesy\u0142ane w momencie wywo\u0142ywania funkcji.","e3cef2ac":"**Wczytywanie danych z plik\u00f3w**\n\nhttps:\/\/docs.python.org\/3\/library\/functions.html#open\n\nU\u017cywamy wbudowanej funkcji <code>open<\/code>, w kt\u00f3rej wymaganym argumentem jest <code>path<\/code>, a opcjonalnym <code>mode<\/code>.\n\n```\nf = open(path, mode)\n```\n\n<code>mode<\/code> to tryb, w kt\u00f3rym otwarty jest plik, np. \n- <code>r<\/code> - open for reading,\n```\nf.read()\n```\n- <code>w<\/code> - open for writing. \n```\nf.write(something)\n```\n\nObowi\u0105zkiem programuj\u0105cego jest dopilnowa\u0107 p\u00f3\u017aniejszego zamkni\u0119cia pliku. Mo\u017cna to zrobi\u0107 na 2 sposoby: za pomoc\u0105 <code>try\/finally<\/code> lub za pomoc\u0105 <code>with<\/code>. Druga z tych opcji jest bardziej eleganckim rozwi\u0105zaniem i pozwala uzyska\u0107 lepsz\u0105 kontrol\u0119 nad obs\u0142ug\u0105 wyj\u0105tk\u00f3w.\n\n- metoda z <code>try\/finally<\/code>\n\n```\nf = open(path)\ntry:\n    # dalsze przetwarzanie danych z pliku\nfinally:\n    f.close()\n```\n\n- metoda z <code>with<\/code>\n\n```\nwith open(path, mode) as f:\n    # dalsze przetwarzanie danych z pliku\n```\n\n\n\n\n\n\n","0679ea50":"## **Jupyter Notebook**\n\nProjekt open source, interfejs do tworzenia notatnika z obliczeniami, wizualizacj\u0105 wynik\u00f3w, fragmentami kodu itp.\n\nhttps:\/\/jupyter.org\/\n\nPython mo\u017ce by\u0107 jednym z wielu j\u0105der obliczeniowych Jupytera.\n\n```\n$ pip install jupyter\n$ cd *\n$ jupyter notebook\n```\n\n---\n\nPrezentacja dzia\u0142ania","be28e8ee":"## **Podstawy programowania w Pythonie**\n\nPython jest j\u0119zykiem interpretowanym, nie kompilowanym.\n\nWci\u0119cia w kodzie s\u0105 bardzo wa\u017cne. Musi to by\u0107 min. 1 spacja, aby unikn\u0105\u0107 b\u0142\u0119d\u00f3w.\n\nUruchamianie kodu: linia po linii w konsoli lub program w pliku *.py\n```\n$ python\n$ >>> linia kodu...\n$ >>> exit()\n```\nLub:\n```\n$ python plik.py\n```\n\nKomentowanie kodu: <code># komentarz<\/code>\n\n---\n\n**Typy danych - przyk\u0142ady**\n\n- Text: <code>str<\/code>\n- Numeric: <code>int, float, complex<\/code>\n- Sequence: <code>list, tuple, range<\/code>\n- Mapping: <code>dict<\/code>\n- Set: <code>set<\/code>\n- Boolean: <code>bool<\/code>\n- Binary: <code>bytes<\/code>\n\nCasting: np. <code>x = str(100)<\/code>\n","75b8997b":"## **Markdown**\nJak formatowa\u0107 kom\u00f3rki z tekstem?\nhttps:\/\/github.com\/adam-p\/markdown-here\/wiki\/Markdown-Cheatsheet","4ce88f10":"Usuwanie atrybutu:","137edd60":"Rekurencja jest powszechnie stosowana w matematyce i programowaniu. \n\nZdefiniowana funkcja wywo\u0142uje sam\u0105 siebie, wi\u0119c nale\u017cy uwa\u017ca\u0107 na to, by nie zaprogramowa\u0107 funkcji 'nigdy nie ko\u0144cz\u0105cej si\u0119' lub obci\u0105\u017caj\u0105cej nadmiernie procesor.\n\nAby zdefiniowa\u0107 funkcj\u0119 rekurencyjnie, nale\u017cy zna\u0107 przypadek bazowy\/pocz\u0105tkowy oraz regu\u0142\u0119.\n\nJednym z popularnych przyk\u0142ad\u00f3w funkcji zdefiniowanych rekurencyjnie jest silnia.\n\n- przypadek bazowy: 0! = 1\n- regu\u0142a: n! = (n - 1)! * n, dla n > 1\n","3892342b":"## **WARSZTAT NR 1**","50ca45a2":"**Rekurencja**","d1f4add0":"**Klasy i obiekty**\n\nPython jest j\u0119zykiem zorientowanym obiektowo. Tego rodzaju j\u0119zyki programowania bazuj\u0105 na obiektach w przeciwie\u0144stwie do programowania proceduralnego, gdzie nacisk k\u0142adziony jest na funkcje.\n\nKlasa stanowi 'projekt' obiektu. Obiekt jest instancj\u0105 klasy. Na bazie jednej klasy mo\u017cna utworzy\u0107 wiele obiekt\u00f3w.\n\nDefinicj\u0119 klasy zaczyna si\u0119 od s\u0142owa kluczowego <code>class<\/code>. Jednocze\u015bnie zostaje utworzony obiekt danej klasy o tej samej nazwie. Atrybutami klasy mog\u0105 by\u0107 dane lub funkcje.","3aee0329":"Je\u017celi liczba argument\u00f3w nie jest zdefiniowana z g\u00f3ry, nale\u017cy u\u017cy\u0107 * przed nazw\u0105 parametru.","3308b30f":"## **GIT**\n\nhttps:\/\/git-scm.com\/download\/ \/\/ download\n\nhttps:\/\/github.com\/\n\n- R\u00f3\u017cnice pomi\u0119dzy Gitem a innymi systemami kontroli wersji\n\n---\n\nTrzy stany plik\u00f3w:\n- modified\n- staged\n- committed\n\n---\n\nProjekt w Gicie dzieli si\u0119 na:\n- working directory\n- \"index\"\n- .git directory\n\n---\n\n- Workflow\n\nmodify -> **working directory** -> stage -> **index** -> commit -> **.git repository**\n\n---\n\nGit config:\n```\n$ git config [--global] user.name \"X Y\"\n$ git config [--global] user.email xy@xy.com\n$ git config --list\n```\n\n---\n\nTworzenie  i u\u017cywanie repozytorium:\n```\n$ cd *\n$ git init\n$ git add *\n$ git status\n$ git diff\n$ git commit -m \"tell everyone why do you want to commit these files\"\n```\n\nKopiowanie repozytorium z serwera:\n```\n$ git clone https:\/\/* new_dir\n```\nlub\n```\ngit clone user@server:\/pathtorepo.git\n```\n\nOm\u00f3wienie najwa\u017cniejszych komend (**spr\u00f3buj prze\u0107wiczy\u0107 je w ramach zadania domowego!**)\n```\n$ git branch nazwa_brancha\n$ git checkout nazwa_brancha\n$ git merge nazwa_brancha\n$ git branch -a\n\n$ git branch --move nazwa_brancha nowa_nazwa_brancha\n$ git push --set-upstream origin nowa_nazwa_brancha\n$ git push origin --delete nazwa_brancha\n\n$ git pull [origin master]\n$ git fetch\n$ git remote show origin\n\n$ git diff > *.patch\n\n$ git log\n```\n","2795dbe7":"**Podstawowe funkcje i rekurencja**\n\nDefinicj\u0119 funkcji zaczyna si\u0119 od s\u0142owa kluczowego <code>def<\/code>.\n\nWa\u017cne, aby pami\u0119ta\u0107 o wci\u0119ciach. W przypadku Pythona jest to nie tylko kwestia 'kosmetyczna', ale te\u017c konieczna, aby kod nie zwr\u00f3ci\u0142 b\u0142\u0119du.","776e4cb5":"**Zadanie do realizacji w domu**\n\nhttp:\/\/algorytmy.ency.pl\/artykul\/quicksort\n","e34f3aca":"**Nazwy zmiennych**\n\n- Pocz\u0105tek nazw zmiennych: zawsze litera lub _\n\n- Camel\/Pascal\/Snake Case: myName, MyName, my_name"}}