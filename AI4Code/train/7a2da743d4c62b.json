{"cell_type":{"fc471e27":"code","fd7f3cfd":"code","106b6966":"code","f2e4e88f":"code","97a30e39":"code","25551b1d":"code","0a2ed20c":"code","e2eec7dc":"code","5052fb7d":"code","d1364bdb":"code","0b6dca39":"code","e5776721":"markdown"},"source":{"fc471e27":"%%capture\n!pip install pycaret[full]","fd7f3cfd":"import pandas as pd\nimport numpy as np \nfrom pycaret.regression import *","106b6966":"train = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv',index_col='row_id')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv',index_col='row_id')","f2e4e88f":"def pre_process(df):\n    \n    df['date'] = pd.to_datetime(df['date'])\n    df['week']= df['date'].dt.week\n    df['year'] = 'Y'+df['date'].dt.year.astype(str)\n    df['quarter'] = 'Q'+df['date'].dt.quarter.astype(str)\n    df['day'] = df['date'].dt.day\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df.loc[(df.date.dt.is_leap_year) & (df.dayofyear >= 60),'dayofyear'] -= 1\n    df['weekend'] = df['date'].dt.weekday >=5\n    df['weekday'] = 'WD' + df['date'].dt.weekday.astype(str)\n    df.drop(columns=['date'],inplace=True)   \n\npre_process(train)\npre_process(test)","97a30e39":"train.info(), test.info()","25551b1d":"# Credit to https:\/\/www.kaggle.com\/c\/web-traffic-time-series-forecasting\/discussion\/36414\ndef SMAPE(y_true, y_pred):\n    denominator = (y_true + np.abs(y_pred)) \/ 200.0\n    diff = np.abs(y_true - y_pred) \/ denominator\n    diff[denominator == 0] = 0.0\n    return np.mean(diff)","0a2ed20c":"reg = setup(data = train,\n            target = 'num_sold',\n            normalize=True,\n            normalize_method='robust',\n            transform_target = True,\n            data_split_shuffle = False, #so that we do not use \"future\" observations to predict \"past\" observations\n            create_clusters = False,\n            use_gpu = True,\n            silent = True,\n            fold=10,\n            n_jobs = -1)","e2eec7dc":"add_metric('SMAPE', 'SMAPE', SMAPE, greater_is_better = False)\ntop =compare_models(sort = 'SMAPE',n_select = 3, include = ['catboost','lightgbm','xgboost'])","5052fb7d":"blend = blend_models(top)\npredict_model(blend)","d1364bdb":"final_blend = finalize_model(blend)\npredict_model(final_blend)","0b6dca39":"preds = predict_model(final_blend, data=test)\nsub = pd.DataFrame(list(zip(test.index,preds.Label)),columns = ['row_id', 'num_sold'])\nsub.to_csv('submission.csv', index = False)\nprint(sub.head(),sub.describe())","e5776721":"This notebooks builds on the approach in https:\/\/www.kaggle.com\/mfedeli\/tabular-playground-series-jan-2022 - thanks for sharing!"}}