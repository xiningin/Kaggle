{"cell_type":{"40c0d31c":"code","36fb90bf":"code","b4545cb6":"code","0c1f5006":"code","3b4d0255":"code","aa8f577a":"code","b96bc510":"code","b53c68d9":"code","7d1f2f5b":"code","3bb53ae5":"code","022e0f83":"code","5f0b13db":"code","690025f1":"code","f9d42849":"code","504c4571":"code","bcd62fe4":"code","c3c5e44e":"code","9394f092":"code","889ecac6":"code","5b0832c5":"code","88487e33":"code","0dd83d20":"code","9206514a":"code","6628673a":"markdown","3c5f67b2":"markdown","e715850c":"markdown","64344e29":"markdown","1f1de210":"markdown"},"source":{"40c0d31c":"!pip install pyforest","36fb90bf":"from pyforest import *\nimport warnings\n\nwarnings.simplefilter(\"ignore\")","b4545cb6":"traindf = pd.read_csv('..\/input\/amazon-employee-access-challenge\/train.csv')\ntraindf.head()","0c1f5006":"testdf = pd.read_csv('..\/input\/amazon-employee-access-challenge\/test.csv')\ntestdf.head()","3b4d0255":"print('traindf.shape',traindf.shape)\nprint('testdf.shape',testdf.shape)","aa8f577a":"traindf.apply(lambda x: len(x.unique()))","b96bc510":"traindf['MGR_ID'].value_counts()","b53c68d9":"traindf['ACTION'].value_counts()","7d1f2f5b":"for i in traindf.describe().columns:\n    sns.boxplot(traindf[i].dropna())\n    plt.show()","3bb53ae5":"plt.figure(figsize=(13,7))\nsns.heatmap(traindf.corr(),annot=True,cmap='viridis',linewidth=1);","022e0f83":"y = traindf['ACTION']\nX= traindf.drop('ACTION', axis=1)\nX_test = testdf.drop('id',axis=1)","5f0b13db":"from sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.25, random_state=1) ","690025f1":"from catboost import CatBoostClassifier, Pool","f9d42849":"%%time\n\nparams = {'loss_function':'Logloss',\n          'eval_metric':'AUC',\n          'verbose':200,\n          'random_seed':1}\ncatmodel_1 = CatBoostClassifier(**params)\ncatmodel_1.fit(X_train, y_train, eval_set=(X_valid, y_valid), use_best_model=True);","504c4571":"categorical_features = list(range(X.shape[1]))\nprint(categorical_features)","bcd62fe4":"%%time\n\nparams = {'loss_function':'Logloss',\n          'eval_metric':'AUC',\n          'cat_features': categorical_features,\n          'verbose':200,\n          'random_seed':1}\ncatmodel_1 = CatBoostClassifier(**params)\ncatmodel_1.fit(X_train, y_train, eval_set=(X_valid, y_valid), use_best_model=True);","c3c5e44e":"from catboost import cv\n\n\nparams = {'loss_function':'Logloss',\n          'eval_metric':'AUC',\n          'verbose':200,\n          'random_seed':1}\n\ntotal_train_data = Pool(data=X,\n                        label=y,\n                        cat_features = categorical_features)\n\nscores = cv(pool=total_train_data,\n            params=params,\n            fold_count = 4,\n            seed = 1,\n            shuffle = True,\n            stratified = True)","9394f092":"feature_imp = catmodel_1.get_feature_importance(prettified=True)\nfeature_imp","889ecac6":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(12,6));\nsns.barplot(x='Importances', y='Feature Id', data=feature_imp)","5b0832c5":"predictions=catmodel_1.predict_proba(X_test)\npredictions","88487e33":"predictions=catmodel_1.predict(X_test)\nprint(predictions)","0dd83d20":"print(catmodel_1.score(X_valid, y_valid)*100)","9206514a":"Predictive_Model = pd.DataFrame({\n        \"Id\": testdf['id'],\n        \"Action\": catmodel_1.predict(X_test)})\nPredictive_Model.to_csv('amazon_predict.csv', index=False)","6628673a":"# Importing Library and loading Data","3c5f67b2":"## Boxplot","e715850c":"# Distribution of Features","64344e29":"## Cross Validation","1f1de210":"# Model Building"}}