{"cell_type":{"e3c0d541":"code","9b5a38ad":"code","4ec344d6":"code","ea653014":"code","c3d006fd":"code","bbe84e7d":"code","cf059941":"code","5a8cef07":"code","19749ffa":"code","b22be409":"code","8b4e394e":"code","728ac93b":"code","46ff3259":"code","d2f4f489":"code","7a2e9078":"code","58252f73":"code","04af3c25":"code","b6602bd1":"code","d649d78c":"code","e74c7a8c":"code","629512f8":"code","00f69a13":"code","804b1127":"code","5d8790ff":"code","647165d1":"code","b1e960c4":"code","64e55242":"code","d3f2d6b7":"code","6ec86303":"code","56d6e8df":"code","ac7b75b4":"code","5365a0f3":"code","ff09f036":"code","8c84e0ee":"code","4394bde7":"code","0eb7d94e":"code","eb8ef575":"code","8b0e17d0":"code","b362511a":"code","19f4ff3b":"code","fa616c3f":"code","42c62c47":"code","0646d639":"code","bed083f5":"code","84b978e9":"code","569b08f9":"code","753a3b75":"code","d595fe3b":"code","9bbf218d":"code","4d7776a3":"code","317b5a1d":"code","5da01eec":"code","2a47e928":"code","073130d0":"code","310592a3":"code","61e2efcc":"code","c4091349":"code","42a94cd2":"code","b25be196":"code","d698b2fd":"code","51792e70":"code","dbce8f6c":"code","7b503ed6":"code","86d9dc63":"code","374f0f7f":"code","d99b10f8":"code","5bacdb5c":"code","3cfb1c99":"markdown","fc07eee5":"markdown","97e06039":"markdown","2ecc7738":"markdown","db376795":"markdown","aad1d818":"markdown","e682b66f":"markdown","15addd1f":"markdown","9f801dcf":"markdown","e31aa0c2":"markdown","0ffcb337":"markdown","9942f8de":"markdown","93aaa8f8":"markdown","910196b3":"markdown","5638c35e":"markdown","26877f2b":"markdown","1d333307":"markdown","00e2b10d":"markdown","fb3139ad":"markdown","b1ce33b7":"markdown","fb6c4423":"markdown","97e8b5d9":"markdown","7341ee4e":"markdown","9e42c9f5":"markdown","4b67e84b":"markdown","ecad25e2":"markdown","bf00d854":"markdown","a65ace07":"markdown","2f78baab":"markdown","bf1291e8":"markdown","ddb7235f":"markdown","a97da78d":"markdown","0657c082":"markdown","ddc4a702":"markdown","99b45b4c":"markdown","2eb8469e":"markdown","fa928fe9":"markdown","90de2991":"markdown","3056b5f3":"markdown","cae0e136":"markdown","f13565da":"markdown"},"source":{"e3c0d541":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b5a38ad":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n","4ec344d6":"listings = pd.read_csv('..\/input\/melbourne-airbnb-open-data\/listings_summary_dec18.csv')","ea653014":"listings.head()","c3d006fd":"listings.shape","bbe84e7d":"listings.info()","cf059941":"## checking for the unique value -- to get the id columns\n## ID columns that have a unique value for each row\nfor col in listings.columns:\n    print('Unique values in {} is {}'.format(col,len(listings[col].unique())))","5a8cef07":"listings.set_index('id',inplace=True)\nlistings.head()","19749ffa":"## checking for the constant features and removing them\nlistings = listings.loc[:,listings.nunique() != 1]\n","b22be409":"## removing duplicate observations if present any\nprint(\"Number of observations before\"+ \": \" +  str(len(listings)))\nlistings.drop_duplicates(inplace=True)\nprint(\"Number of observations after\" + \": \" + str(len(listings)))","8b4e394e":"## dropping irrelevant features\n## name which is basically title description for the listings is a strong feature that can help to answer numerous questions but we will be not performing any textual analysis in this notebook. Therefore ignoring it for now\nlistings.drop(['name','host_name'],axis=1,inplace=True)","728ac93b":"listings.shape","46ff3259":"## percentage of missing values in each column\nlistings.isnull().sum()\/len(listings)","d2f4f489":"listings.drop(['neighbourhood_group','last_review'],axis=1,inplace=True)\n","7a2e9078":"listings.shape","58252f73":"listings.head()","04af3c25":"## replacing the missing value with 0\nlistings['reviews_per_month'].replace(np.NaN,0,inplace=True)","b6602bd1":"listings.isnull().any()","d649d78c":"# checking for the numerical columns\nlistings.columns[listings.dtypes != 'O']","e74c7a8c":"# checking the distribution of price column\nlistings['price'].describe()","629512f8":"plt.figure(figsize=(10,5))\nsns.boxplot(listings['price'])","00f69a13":"\nlen(listings[listings['price']==0])\/len(listings)*100","804b1127":"## excluding the observation having 0 price\nlistings = listings[listings['price'] != 0]","5d8790ff":"listings.shape","647165d1":"plt.figure(figsize=(10,5))\nsns.boxplot('room_type','price',data=listings)","b1e960c4":"listings[listings['room_type']=='Private room']['price'].describe()","64e55242":"listings[listings['room_type']=='Private room'][listings['price']>4000]","d3f2d6b7":"listings[listings['room_type']=='Private room'].groupby(['neighbourhood'])['price'].median().loc[['Boroondara','Melbourne']].plot(kind='bar')","6ec86303":"listings[listings['room_type']=='Private room'].groupby(['neighbourhood'])['price'].mean().loc[['Boroondara','Melbourne']].plot(kind='bar')","56d6e8df":"## checking for entire apartment\nlistings[listings['room_type']=='Entire home\/apt'][listings['price']>8000]","ac7b75b4":"listings[listings['room_type']=='Entire home\/apt'].groupby(['neighbourhood'])['price'].median().loc[['Darebin','Casey']].plot(kind='bar')","5365a0f3":"listings[listings['room_type']=='Entire home\/apt'].groupby(['neighbourhood'])['price'].mean().loc[['Darebin','Casey']].plot(kind='bar')","ff09f036":"## excluding the observation having price > 6000\nlistings[listings['price']<=6000]","8c84e0ee":"listings = listings[listings['price']<=6000]","4394bde7":"listings.shape","0eb7d94e":"listings.groupby(['neighbourhood'])['host_id'].count()","eb8ef575":"count_neighbours = listings.groupby(['neighbourhood'])['host_id'].count().sort_values(ascending=False)","8b0e17d0":"plt.figure(figsize=(10,7))\nsns.barplot(count_neighbours.values,count_neighbours.index)\n","b362511a":"\n## heatmap for locations\n\nimport folium\nfrom folium import plugins\nfrom folium.plugins import HeatMap\n## mappping the center of mMelbourne Region\nmap_heat = folium.Map(location = [-37.818792, 144.962490],\n                     zoom_start=13)\n\n","19f4ff3b":"# ensuring the latitude and logitude are float type\n# Ensure you're handing it floats\n\nlistings.info()","fa616c3f":"## df consisting of location features\n## ensure no null values are present -- already dealt with during preprocessing\nlisting_location = listings[['latitude','longitude']]\n\nlisting_location.head()","42c62c47":"# To folium \n# You'll need to give it a list of lat, lons, i.e. a list of lists. It should be like this. NaNs will also trip it up,\n\n# [[lat, lon],[lat, lon],[lat, lon],[lat, lon],[lat, lon]]\n\nfor index, row in listing_location.iterrows():\n    print(index,row);","0646d639":"# List comprehension to make out list of lists\nheat_data = [[row['latitude'],row['longitude']] for index,row in listing_location.iterrows()]\n# Plot it on the map\nHeatMap(heat_data).add_to(map_heat)\n\n# Display the map\nmap_heat\n","bed083f5":"listings.groupby(['neighbourhood'])['price'].mean().sort_values(ascending=False)","84b978e9":"plt.figure(figsize=(25,5))\nsns.scatterplot(x='neighbourhood',y='price',data=listings.sort_values('price',ascending=False),hue='room_type')\nplt.xticks(rotation=90);","569b08f9":"sns.distplot(listings[listings['room_type']=='Entire home\/apt']['price'],hist=False)\nplt.title('Price distribution of Entire home\/apt')","753a3b75":"sns.distplot(listings[listings['room_type']=='Private room']['price'],hist=False)\nplt.title('Price distribution of Private room')","d595fe3b":"sns.distplot(listings[listings['room_type']=='Shared room']['price'],hist=False)\nplt.title('Price distribution of Shared room')","9bbf218d":"listings['room_type'].unique()","4d7776a3":"plt.figure(figsize=(8,8))\nlistings[listings['room_type']=='Entire home\/apt'].groupby(['neighbourhood'])['price'].mean().sort_values(ascending=False).plot(kind='barh')\nplt.title('Average price for Entire Apartments\/home across suburbs');","317b5a1d":"plt.figure(figsize=(8,8))\nlistings[listings['room_type']=='Private room'].groupby(['neighbourhood'])['price'].mean().sort_values(ascending=False).plot(kind='barh')\nplt.title('Average price for Private room across suburbs');","5da01eec":"plt.figure(figsize=(8,8))\nlistings[listings['room_type']=='Shared room'].groupby(['neighbourhood'])['price'].mean().sort_values(ascending=False).plot(kind='barh')\nplt.title('Average price for Shared room across suburbs');","2a47e928":"plt.figure(figsize=(15,30))\nsns.boxplot('price','neighbourhood',data= listings,hue= 'room_type')","073130d0":"median_price = listings.groupby(['neighbourhood','room_type'])['price'].median().unstack()","310592a3":"median_price.index","61e2efcc":"plt.figure(figsize=(30,8))\n\n# set width of bar\nbarWidth = 0.25\n\n# Set position of bar on X axis\nr1 = np.arange(len(median_price))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\n\n\n# Make the plot\nplt.bar(r1, median_price['Entire home\/apt'], color='#7f6d5f', width=barWidth, edgecolor='white', label='Entire home\/apt')\nplt.bar(r2, median_price['Private room'], color='#557f2d', width=barWidth, edgecolor='white', label='Private room')\nplt.bar(r3, median_price['Shared room'], color='#2d7f5e', width=barWidth, edgecolor='white', label='Shared room')\n\n\n# Add xticks on the middle of the group bars\nplt.xlabel('Neighbourhood', fontsize=15)\nplt.ylabel('Price', fontsize=15)\nplt.xticks([r + barWidth for r in range(len(median_price))], ['Banyule', 'Bayside', 'Boroondara', 'Brimbank', 'Cardinia', 'Casey',\n       'Darebin', 'Frankston', 'Glen Eira', 'Greater Dandenong', 'Hobsons Bay',\n       'Hume', 'Kingston', 'Knox', 'Manningham', 'Maribyrnong', 'Maroondah',\n       'Melbourne', 'Melton', 'Monash', 'Moonee Valley', 'Moreland',\n       'Nillumbik', 'Port Phillip', 'Stonnington', 'Whitehorse', 'Whittlesea',\n       'Wyndham', 'Yarra', 'Yarra Ranges'],rotation=90)\n\nplt.title('Median prices for different room types across suburbs',fontweight='bold', fontsize=22)\n\n# Create legend & Show graphic\nplt.legend()\nplt.show()\n\n\n","c4091349":"# plotly\n# import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n\n\n# creating trace1\ntrace1 =go.Scatter(\n                    x = listings[listings['room_type']=='Entire home\/apt'].sort_values('price',ascending=False).head(20)['neighbourhood'],\n                    y = listings[listings['room_type']=='Entire home\/apt'].sort_values('price',ascending=False).head(20)['price'],\n                    mode = \"markers\",\n                    name = \"Entire home\/apt\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'))\n\n# creating trace2\ntrace2 =go.Scatter(\n                    x = listings[listings['room_type']=='Private room'].sort_values('price',ascending=False).head(20)['neighbourhood'],\n                    y = listings[listings['room_type']=='Private room'].sort_values('price',ascending=False).head(20)['price'],\n                    mode = \"markers\",\n                    name = \"Private room\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'))\n\n\n# creating trace3\ntrace3 =go.Scatter(\n                    x = listings[listings['room_type']=='Shared room'].sort_values('price',ascending=False).head(20)['neighbourhood'],\n                    y = listings[listings['room_type']=='Shared room'].sort_values('price',ascending=False).head(20)['price'],\n                    mode = \"markers\",\n                    name = \"Shared room\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'))\n\n\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Top 20 expensive listings',\n              xaxis= dict(title= 'Neighbourhood',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Price',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","42a94cd2":"# creating trace1\ntrace1 =go.Scatter(\n                    x = listings[listings['room_type']=='Entire home\/apt'].sort_values('price').head(50)['neighbourhood'],\n                    y = listings[listings['room_type']=='Entire home\/apt'].sort_values('price').head(50)['price'],\n                    mode = \"markers\",\n                    name = \"Entire home\/apt\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'))\n\n# creating trace2\ntrace2 =go.Scatter(\n                    x = listings[listings['room_type']=='Private room'].sort_values('price').head(50)['neighbourhood'],\n                    y = listings[listings['room_type']=='Private room'].sort_values('price').head(50)['price'],\n                    mode = \"markers\",\n                    name = \"Private room\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'))\n\n\n# creating trace3\ntrace3 =go.Scatter(\n                    x = listings[listings['room_type']=='Shared room'].sort_values('price').head(50)['neighbourhood'],\n                    y = listings[listings['room_type']=='Shared room'].sort_values('price').head(50)['price'],\n                    mode = \"markers\",\n                    name = \"Shared room\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'))\n\n\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Cheapest listings',\n              xaxis= dict(title= 'Neighbourhood',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Price',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","b25be196":"# creating trace1\ntrace1 =go.Scatter(\n                    x = listings[listings['room_type']=='Entire home\/apt'].sort_values('price')['neighbourhood'],\n                    y = listings[listings['room_type']=='Entire home\/apt'].sort_values('price')['price'],\n                    mode = \"markers\",\n                    name = \"Entire home\/apt\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'))\n\n# creating trace2\ntrace2 =go.Scatter(\n                    x = listings[listings['room_type']=='Private room'].sort_values('price')['neighbourhood'],\n                    y = listings[listings['room_type']=='Private room'].sort_values('price')['price'],\n                    mode = \"markers\",\n                    name = \"Private room\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'))\n\n\n# creating trace3\ntrace3 =go.Scatter(\n                    x = listings[listings['room_type']=='Shared room'].sort_values('price')['neighbourhood'],\n                    y = listings[listings['room_type']=='Shared room'].sort_values('price')['price'],\n                    mode = \"markers\",\n                    name = \"Shared room\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'))\n\n\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'All listings with Price',\n              xaxis= dict(title= 'Neighbourhood',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Price',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","d698b2fd":"trace1 = go.Bar(\n    y=listings['room_type'].value_counts(normalize=True).values,\n    x=listings['room_type'].value_counts(normalize=True).index,\n    name='Proportion of listings for each room type across Melbourne',\n    marker=dict(\n        color='darkblue'\n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    title='Proportion of listings for each room type across Melbourne',\n    font=dict(\n        size=16\n    ),\n    legend=dict(\n        font=dict(\n            size=16\n        )\n    )\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='barchart')","51792e70":"count = listings.groupby(['neighbourhood','room_type'])['room_type'].count().unstack()","dbce8f6c":"count.head(2)","7b503ed6":"count.replace(np.NaN,0,inplace=True)","86d9dc63":"count_proportion = count.div(count.sum(axis=1),axis=0)","374f0f7f":"count_proportion.head(2)","d99b10f8":"\ncount_proportion.plot(kind='bar',stacked=True,figsize=(25, 10));\n# Put a legend to the right of the current axis\nplt.legend(loc='center left', bbox_to_anchor=(1, 0.5));\n","5bacdb5c":"listings.head()","3cfb1c99":"## Data Preprocessing ","fc07eee5":"### Distribution of prices wrt to each room type","97e06039":"We will deal with:\n\n1) ID-Like Columns\n2) Constant Features\n3) Duplicate observations\n4) Other Irrelevant Features\n5) Reduntant Features\n6) Date and Time Features","2ecc7738":"First checking for the column having unique values that can be used as a index for our analysis. ID column seems to have unique value for each observation. Before that removing duplicate observations\n","db376795":"**It is clear that majority of the listings are in neighbourhood of Melbourne, Port Philip, Yarra and Stonnington making these councils\nthe hotspots for the airbnb business**\n\nOther question that can be asked from above analysis:\nWhat makes these suburbs thes hotspots for AirBnB -- nearby places, tourist spots, transport facities or any other. We will explore these areas in our next notebook where we will be analyzingh the textual features","aad1d818":"> As can be seen above, minimum price of 0 is unreal. This is a case of human error while entering the price (best possible way to exclude these listings or replace them with the median price value for each neighbourhood-- note it would be inappropriate to replace with the mean as we still don't know whgat are the facilities that each listings provide in this csv file)\n> \n> Also it can be seen that few listings have prices ranging to 12624, a detailed analysis of such listings to check what are these listings and what is the cause of such spike from the rest with limited set of features is performed below before excluding them.","e682b66f":"### Top expensive listings\n","15addd1f":"### **References**\n\n1. https:\/\/www.geeksforgeeks.org\/python-pandas-dataframe-drop_duplicates\/\n2. https:\/\/www.geeksforgeeks.org\/python-pandas-dataframe-set_index\/\n3. https:\/\/www.kaggle.com\/kanncaa1\/plotly-tutorial-for-beginners\n4. https:\/\/stackoverflow.com\/questions\/23415500\/pandas-plotting-a-stacked-bar-chart\n5. https:\/\/stackoverflow.com\/questions\/4700614\/how-to-put-the-legend-out-of-the-plot\n6. https:\/\/www.kaggle.com\/daveianhickey\/how-to-folium-for-maps-heatmaps-time-analysis\n","9f801dcf":"### How prices are varying across each suburb?\n","e31aa0c2":"### Cheapest listings","0ffcb337":"## Outliers Detection","9942f8de":"## Melbourne Airbnb Open Data\n\nAirbnb has successfully disrupted the traditional hospitality industry as more and more travelers decide to use Airbnb as their primary accommodation provider. Since its beginning in 2008, Airbnb has seen an enormous growth, with the number of rentals listed on its website growing exponentially each year. In Australia, no city is more popular than Melbourne. Melbourne was announced as 6th on the list of top ten cities for users globally in 2016 and has been one of the top cities for listings globally since then. As part of the InsideAirbnb initiative, this dataset describes the listing activity of homestays in Melbourne, VIC, Australia. The dataset was compiled on 07 Dec 2018.\n\nVacation rentals, also called short-stay rentals, are booming in Melbourne. Lots of us have used or at least know someone has used vacation rental apps like Airbnb, HomeAway, etc. \nAs a data scientist who also travells and hosts on Airbnb, I wanted to know what the market looks like in Melbourne, the most popular locations, amentities and so on. So I produced this report to share insights with the vacational rental community.","93aaa8f8":"We can see that there is a drastic difference in the prices for these listings. These can be due to the facilities provided by the host or in the room that makes it different from the others. \nFor our analysis purpose it will better to drop them as with this csv we are not able to extract any other information regarding these listings. Same is the case for the entire apts.","910196b3":"**Entire home\/apt**","5638c35e":"ID for each listing is unique, therefore setting it as index. Also lattitude and longitude has unique value which also emphasize that the all the listings are different and these features can be useful for our analysis therefore not removing them\n","26877f2b":"It is quite evident that there are number of outliers within each suburb that are deviating the average prices. **It will be good to make comparison on the median rather than the mean**","1d333307":"## **Price variation across neighbourhoods**","00e2b10d":"The above chart provides clear and relaible information about the price distribution for each room type within each suburb.\n\nPerforming analysis on granular level and check out the top expensive and cheapest listings to book.","fb3139ad":"## What are the room types and their distribution?","b1ce33b7":"So the first one is actually the real listings and has been reviewed once. \nWe can further check with the average price comparison for these 2 neighbourhoods.","fb6c4423":"Column Neighbourhood has all missing values - this column doesn't provide any info. Therefore better to drop this column.\n\nColumns last_review and reviews_per_month has missing value which can be due to fact that listings is new and no review yet have been posted for the listing id. Better to replace the NAN in reviews_per_month with 0 for that column while last_review is of no significance therefore it will better to drop this column","97e8b5d9":"Let's check what proportion of listings have price per night as 0.\nWe can see these are very less and can be excluded from our analysis.","7341ee4e":"### Average price comparison for each room type across each suburb","9e42c9f5":"## Future Work (separate notebooks)\n\n1. Analyzing textual information to find the answer to the questions:\n        a) Why some listings popular\n        b) Is the fancy title contributes to the listings popularity\n        c) What amenities in the listings contribute in higher pricing\n        d) What location in the neighbourhood suburbs lead to the increase number of listings\n        \n2. More in-depth analysis on the listings having unsual high values (outliers)","4b67e84b":"We can already observe there is great variation in the listings count for each room type? \nSince primary pupose ofthe AirBnB was to sublet or provide accomodation on sharing basis with the hosts with the aim to provide multicultural experience. We will check what proportion of listings abide by the company initial plans.","ecad25e2":"Average prices for Entire home or apartment are most expensive in the Bayside regions followed by Yarra Ranges while Darebin area is the cheapest region to sublet entire home or apartment. \nHowever Private rooms are most expensive in the Yarra Ranges while least expensive in Dandenong area.\nShared rooms are least expensive in the Frankston council.\n\n**The above visualization might give an idea with respect to average price comparison for different room types in all suburbs but can be misleading as the strength of listings are different in different suburbs and there might be a large variations across listings in each suburb that deviates the average prices.**","bf00d854":"We can already see the people are using AirBnB for money making business (which is correct) but are subletting their entire house\/apartments which is not the primary goal of the company as they wanted their users to experience multicultular diverse environment by sharing the accomodation with the people from different backgrounds.\n\n**Now let's check which suburb has the highest difference in the proportions rates for these room types.**","a65ace07":"There is infact a lot of variation in the prices for each room_type in whole of Melbourne. It would be more appropriate to look in the price variations across suburbs.","2f78baab":"**In this notebook we are only going to analyse the descriptive features that gives the single label information or numeric value information.\nThe dataset contains a lot of textual information such as title of the room listed, reviews and other such features that we are going to analyze in the separate notebook**","bf1291e8":"### Variation in the different room prices across Melbourne Region","ddb7235f":"# **Exploratory Data Analysis**\n","a97da78d":"> Proportion of missing values in each column","0657c082":"**Private room**","ddc4a702":"We will perform separate analysis on price distribution for each room type.\n\nWe can see there are 2 or 3 private rooms have unsual price and 1 Entire room\/apt which has been priced pretty high. Let check these unusual listings first","99b45b4c":"It is quite evident in almost every suburb high proportion oflistings are of Entire home\/apt or Private rooms. So if a person is looking for a shared room he might have to struggle a lot as these listings are very less in numbers.","2eb8469e":"## Which neightbourhood has maximum number of listings? (HotSpots for AirBnb businesses)","fa928fe9":"**Shared room**","90de2991":"Above figure gives a great estimation of how the price for different rooms are varying across each suburb. First 3 suburbs have high variation among the prices which can be due to the numerous reason and will be explored later.\n","3056b5f3":"# **All listings**","cae0e136":"*All missing values have been handled successfully.*","f13565da":"## Missing values"}}