{"cell_type":{"d26c7231":"code","b67b597a":"code","eaf2f590":"code","81b941ea":"code","afa3e24d":"code","b74ba3c0":"code","9d81c3ef":"code","ffb431a4":"code","514160e6":"code","d245d10d":"code","595f6f9a":"code","9cd4ac3b":"code","636a01aa":"code","fc24c9fc":"code","e56acd74":"markdown","d49635f6":"markdown","ee2f05bc":"markdown","4b5dc6af":"markdown","03e5a87a":"markdown","bff63130":"markdown"},"source":{"d26c7231":"%matplotlib inline\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import display\n\npd.set_option('max_colwidth', 500)\npd.set_option('max_columns', 100)\n\nimport gc\n\nimport glob\n\nimport pydicom\n\nfrom matplotlib import cm\nfrom matplotlib import pyplot as plt\n\nfrom sklearn.model_selection import StratifiedKFold, train_test_split, KFold, StratifiedShuffleSplit\n\nimport sys\nsys.path.insert(0, '..\/input\/siim-acr-pneumothorax-segmentation')\n\nfrom mask_functions import rle2mask #provided by competition\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport random\nseed = 1234\nrandom.seed(seed)\n\nfrom tqdm import tqdm, tqdm_notebook\ntqdm.pandas()\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom time import time, strftime, gmtime\n\nstart = time()\nprint(start)\n\nimport datetime\nprint(str(datetime.datetime.now()))","b67b597a":"print(os.listdir('..\/input\/siim-acr-pneumothorax-segmentation\/'), \n      os.listdir('..\/input\/siim-acr-pneumothorax-segmentation-data\/'))","eaf2f590":"#Sample Images\nprint(os.listdir('..\/input\/siim-acr-pneumothorax-segmentation\/sample images'))\nsample_imgs = glob.glob('..\/input\/siim-acr-pneumothorax-segmentation\/sample images\/*.dcm')\nprint(len(sample_imgs))","81b941ea":"#Sample Masks\nsample_masks = pd.read_csv('..\/input\/siim-acr-pneumothorax-segmentation\/sample images\/train-rle-sample.csv', \n                          header = None, index_col = 0)\n\nprint(sample_masks.shape)\ndisplay(sample_masks.head(10))","afa3e24d":"plt.figure(figsize = (10, 8))\n\nfor i in range(6):\n    plt.subplot(2, 3, i + 1)\n    file = sample_imgs[i]\n    img = pydicom.dcmread(file)\n    plt.title('Sex: {}, Age: {}, {}'.format(img.PatientSex, img.PatientAge, img.BodyPartExamined))\n    plt.imshow(img.pixel_array, cmap = plt.cm.bone)\n    #Getting Mask for the image\n    if sample_masks.loc[file.split('\/')[-1][:-4], 1] != '-1':\n        mask = rle2mask(sample_masks.loc[file.split('\/')[-1][:-4], 1], 1024, 1024).T\n        plt.imshow(mask, alpha = 0.3, cmap = 'Blues')\n    else:\n        plt.text(400, 1200, 'No Anomaly', fontsize = 12)","b74ba3c0":"print('Other information in a DICOM file:')\nprint(img.fix_meta_info)\n\ndel sample_imgs, sample_masks\ngc.collect()","9d81c3ef":"print(os.listdir('..\/input\/siim-acr-pneumothorax-segmentation-data\/pneumothorax\/'))\ntrain_path = '..\/input\/siim-acr-pneumothorax-segmentation-data\/pneumothorax\/dicom-images-train\/*\/*\/*.dcm'\ntest_path = '..\/input\/siim-acr-pneumothorax-segmentation-data\/pneumothorax\/dicom-images-test\/*\/*\/*.dcm'\ntrain_masks = '..\/input\/siim-acr-pneumothorax-segmentation-data\/pneumothorax\/train-rle.csv'","ffb431a4":"train_files = sorted(glob.glob(train_path))\ntest_files = sorted(glob.glob(test_path))\n\nprint('No. of train files: {}, test files: {}'.format(len(train_files), len(test_files)))","514160e6":"df_rles = pd.read_csv(train_masks)\nprint(df_rles.shape)\ndisplay(df_rles.head())","d245d10d":"df_rles.columns","595f6f9a":"from collections import defaultdict\n\nrle_dict = defaultdict(list)\nfor img_id, rle in zip(df_rles['ImageId'], df_rles[' EncodedPixels']):\n    rle_dict[img_id].append(rle)\n\nannotated = {k: v for k, v in rle_dict.items() if v[0] != ' -1'}\nmulti_annot = {k: v for k, v in rle_dict.items() if len(v) > 1}\n\nprint('No. of images with masks is {} out of {} total images'.format(len(annotated), len(rle_dict)))\nprint('No. of images with more than one mask: {}'.format(len(multi_annot)))\n#There is a image with 10 masks \n\nprint('No. of missing masks: {}'.format(len(train_files) - len(rle_dict)))\n#This missing files can be ignored as they are not chest X-rays (per discussion \n#https:\/\/www.kaggle.com\/c\/siim-acr-pneumothorax-segmentation\/discussion\/96993#latest-560352)\n\ndel df_rles\ngc.collect()","9cd4ac3b":"files = np.random.choice(train_files, 6)\n\nplt.figure(figsize = (12, 10))\n\nfor i, file in enumerate(files):\n    plt.subplot(2, len(files) \/\/ 2, i + 1)\n    img = pydicom.dcmread(file)\n    img_id = file.split('\/')[-1][:-4]\n    plt.title('Sex: {}, Age: {}, {}'.format(img.PatientSex, img.PatientAge, img.BodyPartExamined))\n    plt.imshow(img.pixel_array, cmap = plt.cm.bone)\n    #print(len(rle_dict[img_id]))\n    for rle in rle_dict[img_id]:\n        if rle != ' -1':\n            mask = rle2mask(rle, 1024, 1024).T\n            plt.imshow(mask, alpha = 0.3, cmap = 'Blues')\n        else:\n            #print('No Anamoly')\n            plt.text(400, 1200, 'No Anomaly', fontsize = 12)","636a01aa":"%%time\nfile_path = '..\/input\/siim-acr-pneumothorax-segmentation-data\/pneumothorax\/dicom-images-train\/*\/*\/'\n\nfiles = np.random.choice(list(multi_annot.keys()), 6)\n\nplt.figure(figsize = (12, 10))\n\nfor i, file in enumerate(files):\n    plt.subplot(2, len(files) \/\/ 2, i + 1)\n    img_path = glob.glob(file_path + file + '.dcm')\n    img = pydicom.dcmread(img_path[0])\n    plt.title('Sex: {}, Age: {}, {}'.format(img.PatientSex, img.PatientAge, img.BodyPartExamined))\n    plt.imshow(img.pixel_array, cmap = plt.cm.bone)\n    for rle in multi_annot[file]:\n        mask = rle2mask(rle, 1024, 1024).T\n        plt.imshow(mask, alpha = 0.3, cmap = 'Blues')\n\ndel file_path, files\ngc.collect()","fc24c9fc":"finish = time()\nprint(strftime(\"%H:%M:%S\", gmtime(finish - start)))","e56acd74":"__Readying the train, train masks and test sets__","d49635f6":"__Digital Imaging and Communications in Medicine (DICOM) standard is the de-facto solution to storing and exchanging medical image data__","ee2f05bc":"__Visualizing Images with their Masks (multiple)__","4b5dc6af":"__Visualizing Images with their masks (No mask and mask)__","03e5a87a":"__Loading RLE Pixels into a Dictionary__","bff63130":"- Thanks @Jesper for upoading the Dataset"}}