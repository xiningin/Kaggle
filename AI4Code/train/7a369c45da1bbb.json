{"cell_type":{"02445183":"code","5b70860d":"code","e5d45d46":"code","028798fa":"code","b0b849f9":"code","d788f0ab":"code","6d303e7c":"code","1cdffbaf":"code","74dfa253":"code","8af3c812":"code","64109864":"code","23e948ed":"code","52aba6bf":"code","91dec870":"code","b5790e08":"code","bfe2fb3a":"code","1a2072c6":"markdown","bf96296b":"markdown","4181ea78":"markdown","83e2ad0f":"markdown","69c50933":"markdown","363d7900":"markdown","281b5e9b":"markdown","d7992fb7":"markdown","551cbd12":"markdown","44a4838b":"markdown","913fa37e":"markdown"},"source":{"02445183":"# import libraries \n# data cleaning\nimport pandas as pd\nimport numpy as np\n\n#data visualization\nimport matplotlib as mpl\nimport plotly.graph_objects as go\nimport plotly.express as px\n\nimport plotly.offline as pyo\nimport plotly.graph_objs as go\n#visualazation libraries\nimport plotly.express as px\nimport plotly.offline as pyo\nimport plotly.graph_objs as go\n# Set notebook mode to work in offline\npyo.init_notebook_mode()\n\n#to close warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","5b70860d":"#this library necessary for map\nfrom urllib.request import urlopen\nimport json\nwith urlopen('https:\/\/raw.githubusercontent.com\/cihadturhan\/tr-geojson\/master\/geo\/tr-cities-utf8.json') as response:\n    cities = json.load(response)\n#cities[\"features\"][0]","e5d45d46":"#load data sets\ndf = pd.read_csv('..\/input\/trpopulation\/TRNufus.csv')\ndf_im = pd.read_csv('..\/input\/migratetr2\/MigRate.csv')\n","028798fa":"#column name configuration, actually this is not necessary for this short visualization but it helps me for standardization\ndf.rename(columns = {'Number':'id','City':'city','Pop':'pop', 'Year':'year'},inplace =True)","b0b849f9":"#this step needed for json data and csv data merge, these two data sets merge with id\ndf.set_index('Id', inplace=True)","d788f0ab":"\n\nfig = px.choropleth(df, geojson=cities, locations=df.index, color=\"pop\", \n                    hover_name=\"city\", animation_frame=df[\"year\"],color_continuous_scale=\"earth\",\n                    \n                         \n                           labels={'pop':'population'}\n                          )\n\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","6d303e7c":"fig = px.choropleth_mapbox(df, geojson=cities, locations=df.index, color=np.log10(df[\"pop\"]),hover_name=\"city\", animation_frame=df[\"year\"],\n                           color_continuous_scale=\"Viridis\",\n                           \n                           mapbox_style=\"carto-positron\",\n                           zoom=3, center = {\"lat\": 38.963745, \"lon\": 35.243322},\n                           opacity=0.7,\n                           labels={'color':'population','Id': 'city','population':'pop'}\n                          )\n\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","1cdffbaf":"fig = px.choropleth_mapbox(df, geojson=cities, locations=df.index, color=np.log10(df[\"pop\"]),hover_name=\"city\", animation_frame=df[\"year\"],\n                           color_continuous_scale='twilight',\n                           \n                           mapbox_style=\"carto-positron\",\n                           zoom=4, center = {\"lat\": 38.963745, \"lon\": 35.243322},\n                           opacity=0.7,\n                           labels={'color':'population','Id': 'city'}\n                          )\n\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","74dfa253":"df_im.rename(columns = {'Id':'id','City':'city','Rate':'rate', 'Year':'year'},inplace =True)","8af3c812":"df_im.set_index('id', inplace=True)","64109864":"import plotly.express as px\n\nfig = px.choropleth_mapbox(df_im, geojson=cities, locations=df_im.index, color='rate',hover_name=\"city\", animation_frame=df_im[\"year\"],\n                           color_continuous_scale='twilight',\n                           \n                           mapbox_style=\"carto-positron\",\n                           zoom=5, center = {\"lat\": 38.963745, \"lon\": 35.243322},\n                           opacity=0.7,\n                           labels={'color':'rate','id': 'city'}\n                          )\n\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n","23e948ed":"df_movie=pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")#reading file\ndf_movie.sample(10)#look at into file","52aba6bf":"df0 = df_movie[df_movie['type'] == 'Movie'] #select movies\nname = df0['duration']\ndf0['duration'] = [i.split(\" \")[0].strip() for i in name]#split number and text\ndf0['duration'] = df0['duration'].astype(str).astype(float)\n\nname2 = df0['country'].astype(str)\ndf0['Country'] = [i.split(\",\")[0].strip() for i in name2]#split number and text\n\n\ndf0 = df0.groupby(['Country',]).agg( { 'duration':'mean', }) #getting average duration each country or countries\ndf0.reset_index(inplace = True)\n","91dec870":"\nfig = px.choropleth(df0, locations=\"Country\", # used plotly express choropleth for animation plot\n                    color=\"duration\", \n                    locationmode='country names',\n                    hover_name=\"Country\",\n                    hover_data=['duration'],\n                    title = 'Average Duration of Movies',\n                   color_continuous_scale='OrRd')\n\n# adjusting size of map, legend place, and background colour\nfig.update_layout(\n    autosize=False,\n    width=1200,\n    height=600,\n    margin=dict(\n        l=50,\n        r=50,\n        b=100,\n        t=100,\n        pad=4\n    ),\n    template='seaborn',\n    paper_bgcolor=\"rgb(234, 234, 242)\",\n    legend=dict(\n        orientation=\"v\",\n        yanchor=\"auto\",\n        y=1.02,\n        xanchor=\"right\",\n        x=1\n))\n\nfig.show()\n# reference: https:\/\/plotly.github.io\/plotly.py-docs\/generated\/plotly.express.choropleth.html","b5790e08":"df_map = df0.copy() # do not lose 'df', I made copy of it\ndf_map['Duration'] = ['d<=80' if x<=80 else '80<d<=90' if (80)<x<=(90) else '90<d<=100' if (90)<x<=100 else '100<d<=110' if (100)<x<=110 else '110<d<=120' if 110<x<=120 else '120<d<=200' if 120<x<=200  else 'None' for x in df_map['duration']]\n# categorized each of temperature changes","bfe2fb3a":"fig = px.choropleth(df_map, locations=\"Country\", # used plotly express choropleth for animation plot\n                    color=\"Duration\", \n                    locationmode='country names',\n                    hover_name=\"Country\",\n                    hover_data=['Duration','duration'],\n                    \n                    labels={'duration':'Duration', 'Duration':'Duration category'},\n                    category_orders={'Duration':['d<=80','80<d<=90','90<d<=100','100<d<=110','110<d<=120','120<d<=200','None']},\n                    color_discrete_map={'d<=80':\"#ffffcc\",'80<d<=90':\"#d9f0a3\",'90<d<=100':\"#addd8e\",'100<d<=110':\"#78c679\",'110<d<=120':\"#31a354\",'120<d<=200': \"#006837\",'None':\"#252525\"},\n                    title = 'Average Duration of Movies',\n                   color_continuous_scale='OrRd')\n\n# adjusting size of map, legend place, and background colour\nfig.update_layout(\n    autosize=False,\n    width=1200,\n    height=600,\n    margin=dict(\n        l=50,\n        r=50,\n        b=100,\n        t=100,\n        pad=4\n    ),\n    template='seaborn',\n    paper_bgcolor=\"white\",\n    legend=dict(\n        orientation=\"v\",\n        yanchor=\"auto\",\n        y=1.02,\n        xanchor=\"right\",\n        x=1\n))\n\nfig.add_annotation(\n        x=0.3,\n        y=0.68,\n        text=\"USA\",\n        showarrow=True,\n        font=dict(\n            family=\"Courier New, monospace\",\n            size=16,\n            color=\"#ffffff\"\n            ),\n        align=\"center\",\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax=20,\n        ay=-30,\n        bordercolor=\"#c7c7c7\",\n        borderwidth=2,\n        borderpad=4,\n        bgcolor=\"#ff7f0e\",\n        opacity=0.8\n        )\n\n\nfig.show()\n# reference1: https:\/\/plotly.github.io\/plotly.py-docs\/generated\/plotly.express.choropleth.html\n#reference2: https:\/\/plotly.com\/python\/text-and-annotations\/#styling-and-coloring-annotations","1a2072c6":"# If you find it useful,  please upvote! Thanks!","bf96296b":"to clearly see change of the years, I used internal migration rate. And, As you can see below, it can be seen clearly, generally internal migration rate has been decreasing over the years for cities of Turkey.","4181ea78":"Getting json file with coordination of the place. The important thing here, you need an id variable in json data set to merge with the choropleth map. In this data set each id represents that each city. Additionally, I made this data set name is 'cities', I will use this file below to draw the map.","83e2ad0f":"For drawing a world map, you don't need to json file, country names or countries' ISO codes enough to draw it. For example, I chose the Netflix data set, and I used country names to draw it. The only numerical variable is the duration and it is given as an object, so firstly I made little bit data wrangling, I split number from text and convert to integer than I made a map with default options. Additionally, I also selected the first country from the country column, if I didn't do this step, it still could draw a map but hover information of countries looked a little bit confusing.","69c50933":"# Introduction \nThe aim of this notebook is to figure out how to draw a map with 'plotly' step by step.\n\n## Content\n1. [Custom Map with json](#1)\n     - [Animation of Turkey Population yearly](#1)\n     - [Turkey 2000-2019 internal migration rate](#2)\n1. [World Map with express plotly](#3)\n     - [Netflix data set, average movie duration](#3)\n\n\n","363d7900":"# Population of Turkey","281b5e9b":"In this map, I used \"choropleth_mapbox\" , and I could use zoom for Turkey. And, I used \"np.log10\" for population normalization to minimize  the effect of Istanbul population. So, slightly we can see change of colors over the years.","d7992fb7":"## Creating Discrete Legend \nIn this section, I wanted to draw a more clear map, so I created a new Duration column and split durations for six categories. Because most countries have an average duration of around 80 and 120 min, I split according to this gap. And, I also added an annotation for an example. I used 'category_orders' with the same sequence and I coloured them using a colour palette from [this useful website](https:\/\/colorbrewer2.org\/#type=sequential&scheme=YlGn&n=6).\n\n\n\n","551cbd12":"# WORLD MAP","44a4838b":"In the below map, I want to show that just choropleth does not provide make zoom, unfortuanetly. Additionally,  because Istanbul has the majortiy of population in Turkey over the years, the color scale does not change prominently. Because I made each city's id index, I used 'df.index', and my json file name is 'cities', so I used for geojson. For colour palette, you can choose any of [them](https:\/\/plotly.com\/python\/builtin-colorscales\/).","913fa37e":"# Turkey 2000-2019 internal migration rate"}}