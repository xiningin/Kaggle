{"cell_type":{"768fda43":"code","56a9bd20":"code","0da16bc1":"code","1629c092":"code","d9f4f8c3":"code","7f598e22":"code","176678df":"code","27059aa2":"code","252f7584":"code","157f5608":"code","e89cf443":"code","b880a2e1":"markdown","95421176":"markdown","3af1c378":"markdown","23bab273":"markdown","5b6145db":"markdown","434360cc":"markdown","23eff939":"markdown","cb744f61":"markdown","a2822c59":"markdown","ce31040d":"markdown","f74fd268":"markdown","80f8e53d":"markdown","5b60e6fa":"markdown"},"source":{"768fda43":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","56a9bd20":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n#from pandas.tools.plotting import scatter_matrix\nfrom pandas.plotting import autocorrelation_plot\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\nfrom mpl_toolkits.mplot3d import axes3d, Axes3D\nimport seaborn as sns\n\nfrom sklearn.preprocessing import scale\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import RobustScaler\n\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import NearestCentroid\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\n\nfrom itertools import product\nfrom sklearn import svm\n\nimport warnings\nwarnings.filterwarnings('ignore')\n# Any results you write to the current directory are saved as output.","0da16bc1":"mmscaler = MinMaxScaler()\nstandard_scaler = StandardScaler()\nrobust_scaler = RobustScaler()\n\nmusicdata = pd.read_csv('\/kaggle\/input\/2019-pr-midterm-musicclassification\/data_train.csv')\n\n#colab\n#musicdata = pd.read_csv('\/content\/input2\/data_train.csv')\n\n\nplot_label =['tempo', 'beats', 'chroma_stft', 'rmse',\n        'spectral_centroid', 'spectral_bandwidth', 'rolloff',\n        'zero_crossing_rate', 'mfcc1', 'mfcc2', 'mfcc3', 'mfcc4', 'mfcc5',\n        'mfcc6', 'mfcc7', 'mfcc8', 'mfcc9', 'mfcc10', 'mfcc11', 'mfcc12',\n        'mfcc13', 'mfcc14', 'mfcc15', 'mfcc16', 'mfcc17', 'mfcc18', 'mfcc19',\n        'mfcc20']\n\n#\ub354 \uac04\ud3b8\ud55c \uc870\uc6d0 \uad70\uc758 \ucf54\ub4dc\ub97c \ucc38\uace0\ud588\uc2b5\ub2c8\ub2e4.\ndata = musicdata.loc[:,:].values[:,1:-1]\nlabel = musicdata.values[:,-1]\n\nscale_data = scale(data)\nmmscaler_data = mmscaler.fit_transform(data)\nstandard_data = standard_scaler.fit_transform(data)\nrobust_data = robust_scaler.fit_transform(data)\n\nscale_df = pd.DataFrame(scale_data,columns=plot_label)\nmm_df = pd.DataFrame(mmscaler_data,columns=plot_label)\nstand_df = pd.DataFrame(standard_data,columns=plot_label)\nrobust_df = pd.DataFrame(robust_data,columns=plot_label)\n\nfig, ax0 = plt.subplots(ncols=1,figsize=(10,10))\nax0.set_title(\"scale\")\nsns.kdeplot(scale_df['tempo'],ax=ax0)\nsns.kdeplot(scale_df['beats'],ax=ax0)\nsns.kdeplot(scale_df['chroma_stft'],ax=ax0)\nsns.kdeplot(scale_df['rmse'],ax=ax0)\nsns.kdeplot(scale_df['spectral_centroid'],ax=ax0)\nsns.kdeplot(scale_df['spectral_bandwidth'],ax=ax0)\nsns.kdeplot(scale_df['mfcc1'],ax=ax0)\nsns.kdeplot(scale_df['mfcc2'],ax=ax0)\nsns.kdeplot(scale_df['mfcc3'],ax=ax0)\nsns.kdeplot(scale_df['mfcc4'],ax=ax0)\nsns.kdeplot(scale_df['mfcc5'],ax=ax0)\nsns.kdeplot(scale_df['mfcc6'],ax=ax0)\nsns.kdeplot(scale_df['mfcc7'],ax=ax0)\nsns.kdeplot(scale_df['mfcc8'],ax=ax0)\nsns.kdeplot(scale_df['mfcc9'],ax=ax0)\nsns.kdeplot(scale_df['mfcc10'],ax=ax0)\nsns.kdeplot(scale_df['mfcc11'],ax=ax0)\nsns.kdeplot(scale_df['mfcc12'],ax=ax0)\nsns.kdeplot(scale_df['mfcc13'],ax=ax0)\nsns.kdeplot(scale_df['mfcc14'],ax=ax0)\nsns.kdeplot(scale_df['mfcc15'],ax=ax0)\nsns.kdeplot(scale_df['mfcc16'],ax=ax0)\nsns.kdeplot(scale_df['mfcc17'],ax=ax0)\nsns.kdeplot(scale_df['mfcc18'],ax=ax0)\nsns.kdeplot(scale_df['mfcc19'],ax=ax0)\nsns.kdeplot(scale_df['mfcc20'],ax=ax0)\nplt.show()\n\nfig, ax1 = plt.subplots(ncols=1,figsize=(10,10))\nax1.set_title(\"MinMaxScaler\")\nsns.kdeplot(mm_df['tempo'],ax=ax1)\nsns.kdeplot(mm_df['beats'],ax=ax1)\nsns.kdeplot(mm_df['chroma_stft'],ax=ax1)\nsns.kdeplot(mm_df['rmse'],ax=ax1)\nsns.kdeplot(mm_df['spectral_centroid'],ax=ax1)\nsns.kdeplot(mm_df['spectral_bandwidth'],ax=ax1)\nsns.kdeplot(mm_df['mfcc1'],ax=ax1)\nsns.kdeplot(mm_df['mfcc2'],ax=ax1)\nsns.kdeplot(mm_df['mfcc3'],ax=ax1)\nsns.kdeplot(mm_df['mfcc4'],ax=ax1)\nsns.kdeplot(mm_df['mfcc5'],ax=ax1)\nsns.kdeplot(mm_df['mfcc6'],ax=ax1)\nsns.kdeplot(mm_df['mfcc7'],ax=ax1)\nsns.kdeplot(mm_df['mfcc8'],ax=ax1)\nsns.kdeplot(mm_df['mfcc9'],ax=ax1)\nsns.kdeplot(mm_df['mfcc10'],ax=ax1)\nsns.kdeplot(mm_df['mfcc11'],ax=ax1)\nsns.kdeplot(mm_df['mfcc12'],ax=ax1)\nsns.kdeplot(mm_df['mfcc13'],ax=ax1)\nsns.kdeplot(mm_df['mfcc14'],ax=ax1)\nsns.kdeplot(mm_df['mfcc15'],ax=ax1)\nsns.kdeplot(mm_df['mfcc16'],ax=ax1)\nsns.kdeplot(mm_df['mfcc17'],ax=ax1)\nsns.kdeplot(mm_df['mfcc18'],ax=ax1)\nsns.kdeplot(mm_df['mfcc19'],ax=ax1)\nsns.kdeplot(mm_df['mfcc20'],ax=ax1)\nplt.show()\n\nfig, ax2 = plt.subplots(ncols=1,figsize=(10,10))\nax2.set_title(\"standard_scaler\")\nsns.kdeplot(stand_df['tempo'],ax=ax2)\nsns.kdeplot(stand_df['beats'],ax=ax2)\nsns.kdeplot(stand_df['chroma_stft'],ax=ax2)\nsns.kdeplot(stand_df['rmse'],ax=ax2)\nsns.kdeplot(stand_df['spectral_centroid'],ax=ax2)\nsns.kdeplot(stand_df['spectral_bandwidth'],ax=ax2)\nsns.kdeplot(stand_df['mfcc1'],ax=ax2)\nsns.kdeplot(stand_df['mfcc2'],ax=ax2)\nsns.kdeplot(stand_df['mfcc3'],ax=ax2)\nsns.kdeplot(stand_df['mfcc4'],ax=ax2)\nsns.kdeplot(stand_df['mfcc5'],ax=ax2)\nsns.kdeplot(stand_df['mfcc6'],ax=ax2)\nsns.kdeplot(stand_df['mfcc7'],ax=ax2)\nsns.kdeplot(stand_df['mfcc8'],ax=ax2)\nsns.kdeplot(stand_df['mfcc9'],ax=ax2)\nsns.kdeplot(stand_df['mfcc10'],ax=ax2)\nsns.kdeplot(stand_df['mfcc11'],ax=ax2)\nsns.kdeplot(stand_df['mfcc12'],ax=ax2)\nsns.kdeplot(stand_df['mfcc13'],ax=ax2)\nsns.kdeplot(stand_df['mfcc14'],ax=ax2)\nsns.kdeplot(stand_df['mfcc15'],ax=ax2)\nsns.kdeplot(stand_df['mfcc16'],ax=ax2)\nsns.kdeplot(stand_df['mfcc17'],ax=ax2)\nsns.kdeplot(stand_df['mfcc18'],ax=ax2)\nsns.kdeplot(stand_df['mfcc19'],ax=ax2)\nsns.kdeplot(stand_df['mfcc20'],ax=ax2)\nplt.show()\n\nfig, ax3 = plt.subplots(ncols=1,figsize=(10,10))\nax3.set_title(\"robust_scaler\")\nsns.kdeplot(robust_df['tempo'],ax=ax3)\nsns.kdeplot(robust_df['beats'],ax=ax3)\nsns.kdeplot(robust_df['chroma_stft'],ax=ax3)\nsns.kdeplot(robust_df['rmse'],ax=ax3)\nsns.kdeplot(robust_df['spectral_centroid'],ax=ax3)\nsns.kdeplot(robust_df['spectral_bandwidth'],ax=ax3)\nsns.kdeplot(robust_df['mfcc1'],ax=ax3)\nsns.kdeplot(robust_df['mfcc2'],ax=ax3)\nsns.kdeplot(robust_df['mfcc3'],ax=ax3)\nsns.kdeplot(robust_df['mfcc4'],ax=ax3)\nsns.kdeplot(robust_df['mfcc5'],ax=ax3)\nsns.kdeplot(robust_df['mfcc6'],ax=ax3)\nsns.kdeplot(robust_df['mfcc7'],ax=ax3)\nsns.kdeplot(robust_df['mfcc8'],ax=ax3)\nsns.kdeplot(robust_df['mfcc9'],ax=ax3)\nsns.kdeplot(robust_df['mfcc10'],ax=ax3)\nsns.kdeplot(robust_df['mfcc11'],ax=ax3)\nsns.kdeplot(robust_df['mfcc12'],ax=ax3)\nsns.kdeplot(robust_df['mfcc13'],ax=ax3)\nsns.kdeplot(robust_df['mfcc14'],ax=ax3)\nsns.kdeplot(robust_df['mfcc15'],ax=ax3)\nsns.kdeplot(robust_df['mfcc16'],ax=ax3)\nsns.kdeplot(robust_df['mfcc17'],ax=ax3)\nsns.kdeplot(robust_df['mfcc18'],ax=ax3)\nsns.kdeplot(robust_df['mfcc19'],ax=ax3)\nsns.kdeplot(robust_df['mfcc20'],ax=ax3)\nplt.show()","1629c092":"sX_train, sX_test, sy_train, sy_test = train_test_split(scale_data,label,test_size=0.25, random_state=42)\nmX_train, mX_test, my_train, my_test = train_test_split(mmscaler_data,label,test_size=0.25, random_state=42)\nstX_train, stX_test, sty_train, sty_test = train_test_split(standard_data,label,test_size=0.25, random_state=42)\nroX_train, roX_test, roy_train, roy_test = train_test_split(robust_data,label,test_size=0.25, random_state=42)","d9f4f8c3":"parameters = {'kernel':['rbf'], 'C': [10], 'gamma': [ 0.05] ,'class_weight' : ['balanced']}\nsvc = svm.SVC(gamma=\"scale\")\nclf = GridSearchCV(svc, parameters, cv=5)\n\ns=clf.fit(sX_train,sy_train)\nm=clf.fit(mX_train,my_train)\nst=clf.fit(stX_train,sty_train)\nro=clf.fit(roX_train,roy_train)\n\nsy_predict=s.predict(sX_test)\nmy_predict=m.predict(mX_test)\nsty_predict=st.predict(stX_test)\nroy_predict=ro.predict(roX_test)","7f598e22":"mat1 = confusion_matrix(sy_test,sy_predict)\nsns.heatmap(mat1.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label');\n\nprint(classification_report(sy_test, sy_predict))","176678df":"mat2 = confusion_matrix(my_test,my_predict)\nsns.heatmap(mat2.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label');\n\nprint(classification_report(my_test, my_predict))","27059aa2":"mat3 = confusion_matrix(sty_test,sty_predict)\nsns.heatmap(mat3.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label');\n\nprint(classification_report(sty_test, sty_predict))","252f7584":"mat4 = confusion_matrix(roy_test,roy_predict)\nsns.heatmap(mat4.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label');\n\nprint(classification_report(roy_test, roy_predict))","157f5608":"parameters = {'kernel':['rbf'], 'C': [1,5,10,50,100,50,1000], 'gamma': [ 0.1,0.05,0.01,0.005,0.001,0.0005,0.0001] ,'class_weight' : ['balanced']}\nsvc = svm.SVC(gamma=\"scale\")\nclf = GridSearchCV(svc, parameters, cv=5)\n\ns=clf.fit(sX_train,sy_train)\nm=clf.fit(mX_train,my_train)\nst=clf.fit(stX_train,sty_train)\nro=clf.fit(roX_train,roy_train)\n\nsy_predict=s.predict(sX_test)\nmy_predict=m.predict(mX_test)\nsty_predict=st.predict(stX_test)\nroy_predict=ro.predict(roX_test)","e89cf443":"print(s.best_params_)\nprint(classification_report(sy_test, sy_predict))\n\nprint(m.best_params_)\nprint(classification_report(my_test, my_predict))\n\nprint(st.best_params_)\nprint(classification_report(sty_test, sty_predict))\n\nprint(ro.best_params_)\nprint(classification_report(roy_test, roy_predict))","b880a2e1":"# TRAIN VALIDATION SET\n\n### CTC - reference Jiwon kim optimal rbf kernel, c, gamma.","95421176":"# Scaler","3af1c378":"# \ub77c\uc774\ube0c\ub7ec\ub9ac IMPORT","23bab273":"## \uc608\uc0c1 : StandardScaler \uac00 \uac12\ub4e4\uac04\uc758 \ud45c\uc900\ud3b8\ucc28\uac00 \ud3c9\uade0\uc801\uc774\ubbc0\ub85c \uac00\uc7a5 \uc88b\uc740 \uc131\ub2a5\uc744 \ub74c \uac83 \uac19\ub2e4. \ud639\uc740 \ubc18\ub300\ub85c \uac00\uc7a5 \ucc28\uc774\uac00 \ub9ce\uc740, MinMaxScaler\uac00 \uac00\uc7a5 \uc88b\uc740 accraucy \ub97c \ub74c \uac83 \uac19\ub2e4.","5b6145db":"# MID CONCLUSION\n\n## - \ub85c\ubc84\uc2a4\ud2b8\uac00 \ub2e4\ub978 \uc2a4\ucf00\uc77c\ub7ec\uc5d0 \ube44\ud574 \ub354 \ub098\uc544\ubcf4\uc778\ub2e4.\n## - \uadf8\ub798\uc11c, \uc774\ubc88\uc5d4 \ucd5c\uc801\uc758 \ud30c\ub77c\ubbf8\ud130\ub97c \uac01\uac01\uc744 \ucc3e\uc544\ubcf4\uc558\ub2e4. ","434360cc":"# \ubcc0\ud654\uac00 \uc5c6\uace0 \ub85c\ubc84\uc2a4\ud2b8\uac00 \uac00\uc7a5 \uc815\ud655\uc131\uc774 \ub192\uc740 \uac83\uc73c\ub85c \ubcf4\uc544 \uc815\uaddc\ubd84\ud3ec\uc758 \ub370\uc774\ud130\uc77c \uc2dc\uc5d0 \ub85c\ubc84\uc2a4\ud2b8\uc758 \uc2a4\ucf00\uc77c\ub9c1\uc774 \uc88b\uc740 \ubc29\ubc95\uc73c\ub85c \uc0dd\uac01\ub41c\ub2e4.\n\n# \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc758 \uc81c\ucd9c\uc740 \ub2e4\ub978 \ubd84\ub4e4\uacfc \uc720\uc0ac\ud558\ubbc0\ub85c \ub118\uae30\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","23eff939":"# \uce90\uae00 \ud30c\uc77c \uc124\uc815","cb744f61":"# MaxMinScaler","a2822c59":"# RobustScaler","ce31040d":"# StandardScaler","f74fd268":"# \uc2a4\ucf00\uc77c\ub9c1\uc5d0 \ub300\ud55c \uace0\ucc30\n# (\uc5b4\ub5a4 \uc2a4\ucf00\uc77c\ub7ec\ub97c \uc4f8 \uac83\uc778\uac00?)\n\n### - \ub370\uc774\ud130 \ubaa8\ub378\ub9c1\ud558\uae30 \uc804\uc5d0\ub294 \ubc18\ub4dc\uc2dc \uc2a4\ucf00\uc77c\ub9c1 \uacfc\uc815\uc744 \uac70\uccd0\uc57c\ub41c\ub2e4. \uc774\ub294 \uc624\ubc84\ud50c\ub85c\uc6b0\ub098 \uc5b8\ub354\ud50c\ub85c\uc6b0\ub97c \ubc29\uc9c0\ud558\uace0 \ucd5c\uc801\ud654 \uacfc\uc815\uc5d0\uc11c\uc758 \uc548\uc804\uc131 \uc218\ub834 \uc18d\ub3c4\ub97c \ud5a5\uc0c1\uc2dc\ud0a8\ub2e4.\n\n### \ub300\ud45c\uc801 \uae30\ubc95\n\n### StandardScaler\t\n### - \uae30\ubcf8 \uc2a4\ucf00\uc77c. \ud3c9\uade0\uacfc \ud45c\uc900\ud3b8\ucc28 \uc0ac\uc6a9\n### MinMaxScaler\t\n### - \ucd5c\ub300\/\ucd5c\uc18c\uac12\uc774 \uac01\uac01 1, 0\uc774 \ub418\ub3c4\ub85d \uc2a4\ucf00\uc77c\ub9c1\n### MaxAbsScaler\t\n### - \ucd5c\ub300\uc808\ub300\uac12\uacfc 0\uc774 \uac01\uac01 1, 0\uc774 \ub418\ub3c4\ub85d \uc2a4\ucf00\uc77c\ub9c1\n### RobustScaler\t\n### - \uc911\uc559\uac12(median)\uacfc IQR(interquartile range) \uc0ac\uc6a9. \uc544\uc6c3\ub77c\uc774\uc5b4\uc758 \uc601\ud5a5\uc744 \ucd5c\uc18c\ud654\n\n### \uc774\uc911 \uae30\ubcf8 scaler \uc640 standard, minmax, robust\uc5d0 \ub300\ud574 \ub2e4\ub904\ubcf8\ub2e4.\n\n### \ub370\uc774\ud130 \ud615\ud0dc\uc5d0\ub294 \uc815\uaddc\ubd84\ud3ec \ud615\ud0dc \uc911\uc559\uc5d0 \ub9ce\uc740 \ubd84\ud3ec, \uc591\ucabd\uc73c\ub85c \ub098\ub220\uc9c4 \ubd84\ud3ec\uac00 \uc788\ub2e4.","80f8e53d":"# \ub370\uc774\ud130 \uc815\uc81c \ubc0f \uc2a4\ucf00\uc77c\ub9c1 \ud50c\ub78f \uc791\uc131","5b60e6fa":"# TRAIN VALIDATION SET\n\n### CTC - RANDOM_STATE = 42, TEST_SIZE = 0.25"}}