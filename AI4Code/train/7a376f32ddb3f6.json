{"cell_type":{"18fff600":"code","e3db49eb":"code","f7b730d4":"code","72362596":"code","9ceefd13":"code","ada76f4a":"code","33740357":"code","df95a568":"code","5607b824":"code","be67dc32":"code","e143810e":"code","97446a4b":"code","a98126e5":"code","51bbcba0":"code","858cf5b6":"code","23a608f0":"code","13e1e45d":"code","35647f6a":"code","74eb2091":"code","c0aba5d1":"code","59aa06a7":"code","4dc1632a":"code","0f52aae4":"code","a4f6acbb":"code","2813b8b7":"code","a138cddc":"code","61e18749":"code","61b7abe9":"code","c180ad32":"code","9919e17f":"code","90ddb509":"code","d408e47f":"code","5717219d":"code","b83853af":"code","a9161f68":"code","3108f1d2":"code","7c0a80b0":"code","55c764ff":"code","614c0767":"code","c57404b4":"code","8143152a":"code","69f05d6e":"code","a1e2e98f":"code","7ea1627c":"code","cde6fdde":"code","432c2dc1":"code","3c0d8d4b":"code","6f974e12":"code","6b19f822":"code","a69bbee8":"code","f1351beb":"code","b802d67f":"code","c0769b3c":"code","7accba7b":"code","cb339048":"code","77023d53":"code","6e788a42":"code","69677eda":"code","8d324fbe":"code","d29c4187":"code","5b3c2354":"code","7f5efea4":"code","608cfba6":"code","86bdfed7":"code","ff2e44ec":"code","c037d5da":"code","12d3e838":"code","57ce3602":"code","4dea962d":"code","3a85f586":"code","65905fe3":"code","58d7d8d5":"code","bebadab5":"code","dfaa4823":"code","d0e902f3":"code","7e16123a":"code","4fade026":"code","65d73a59":"code","d3880201":"code","e78024c7":"code","fcb3ad59":"code","07ed5090":"code","eb5854ab":"code","6b0c0ea2":"code","493a4ca8":"code","21c4ecb5":"code","32983487":"code","9520fa5f":"code","fd2e7559":"code","641162f1":"code","0fd5a459":"code","5daeb999":"code","d949346a":"code","1228e1ea":"code","0efb582c":"code","1a31445c":"code","1618d1ee":"code","437dd755":"code","1d2a4516":"code","00572b07":"code","fa7c7157":"code","5e91d8ac":"code","0e48e4a0":"code","4138f654":"code","0460a6a3":"code","4714505b":"code","2568fa2e":"code","ac6c11fa":"code","8803bcfe":"code","4088594c":"code","94065cb3":"code","662fdc68":"code","648de075":"code","83726b64":"code","592d1b78":"code","442c7084":"code","5ad8feb9":"code","ccac37c8":"code","b4232fa1":"code","9e00bd3a":"code","485caebd":"code","3c6c664f":"code","03bc9a80":"code","a49738d7":"code","082284ff":"markdown","43486dce":"markdown","4930deab":"markdown","976d69a7":"markdown","59e9b44d":"markdown","b823ef07":"markdown","2380c04d":"markdown","b76184c2":"markdown","40a3962f":"markdown","f8304d2a":"markdown","b3eb785b":"markdown","1704eaec":"markdown","5a04f748":"markdown","430cb738":"markdown","a271dc4e":"markdown","9c916731":"markdown","fcf86a94":"markdown","8c27d320":"markdown","01e441bb":"markdown","5a8b1fa1":"markdown","6b07df1e":"markdown","d77e2c2c":"markdown","71e8b98a":"markdown","a59900c5":"markdown","3944e012":"markdown","a18cdfd4":"markdown","cd4d7e38":"markdown","4cbf1d03":"markdown","6164c311":"markdown","5c05faba":"markdown","fe698fff":"markdown","d42e6ef0":"markdown","fc08f75d":"markdown","956b752c":"markdown","07a4a91c":"markdown","7db02607":"markdown","05124a9e":"markdown","76eb3b91":"markdown","42580f41":"markdown"},"source":{"18fff600":"import pandas as pd","e3db49eb":"# Your code goes here. Create a dataframe matching the above diagram and assign it to the variable fruit_sales.\nfruit_sales = pd.DataFrame({'Apples':pd.Series(data=[35,21],index=['2017 Sales']),'Bananas':pd.Series(data=[41,34],index=['2018 Sales'])})\n\nq2.check()\nfruit_sales","f7b730d4":"ser = pd.Series([100,2,3],['a','b','c'])\nser","72362596":"ser = pd.Series(data=[100, 200, 300, 400, 500], index=['tom', 'bob', 'nancy', 'dan', 'eric'])","9ceefd13":"ser","ada76f4a":"ser.index","33740357":"ser[['nancy','dan']]","df95a568":"ser['nancy']","5607b824":"ser[[4, 3, 1]]","be67dc32":"'bob' in ser","e143810e":"ser","97446a4b":"ser['dan']='suresh'","a98126e5":"ser * 2","51bbcba0":"ser['dan']=2000","858cf5b6":"ser","23a608f0":"ser ** 2\n#ser[['tom','bob']]**2\n","13e1e45d":"d = {'one' : pd.Series([100., 200., 300.], index=['apple', 'ball', 'clock']),\n     'two' : pd.Series([111., 222., 333., 4444.], index=['apple', 'ball', 'cerill', 'dancy'])}","35647f6a":"df = pd.DataFrame(d)\n#print(df)\ndf","74eb2091":"df.index","c0aba5d1":"df.columns","59aa06a7":"pd.DataFrame(d, index=['dancy', 'ball', 'apple'])","4dc1632a":"pd.DataFrame(d, index=['dancy', 'ball', 'apple'], columns=['two','five'])","0f52aae4":"data = [{'alex': 1, 'joe': 2}, {'ema': 5, 'dora': 10, 'alice':20}]","a4f6acbb":"pd.DataFrame(data)","2813b8b7":"pd.DataFrame(data, index=['orange', 'red'])","a138cddc":"pd.DataFrame(data, columns=['joe', 'dora','alice','a'])","61e18749":"df","61b7abe9":"df['one']","c180ad32":"df['three'] = df['one'] * df['two']\ndf","9919e17f":"df['flag'] = df['one'] > 250\ndf","90ddb509":"three = df.pop('three')","d408e47f":"three","5717219d":"df","b83853af":"del df['one']","a9161f68":"df","3108f1d2":"df.insert(1, 'copy_of_onee', df['two'])\ndf","7c0a80b0":"df['one_upper_half'] = df['two'][:2]\ndf","55c764ff":"# Note: Adjust the name of the folder to match your local directory\n\n!ls .\/movielens","614c0767":"!cat .\/movielens\/movies.csv","c57404b4":"movies = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv', sep=',')\n#print(type(movies))\nmovies.head()","8143152a":"# Timestamps represent seconds since midnight Coordinated Universal Time (UTC) of January 1, 1970\n\ntags = pd.read_csv('..\/input\/movielens-20m-dataset\/genome_tags.csv', sep=',')\ntags.head()","69f05d6e":"#ratings = pd.read_csv('.\/movielens\/ratings.csv', sep=',', parse_dates=['timestamp'])\nratings = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv', sep=',')\nratings.head()","a1e2e98f":"ratings","7ea1627c":"# For current analysis, we will remove timestamp (we will come back to it!)\n\ndel ratings['timestamp']\n#del tags['timestamp']","cde6fdde":"row = ratings.iloc[5]\nrow\n","432c2dc1":"col = ratings.ix[5]\ncol","3c0d8d4b":"#Extract 0th row: notice that it is infact a Series\n\nrow_0 = tags.iloc[5]\nrow_0\n#type(row_0)","6f974e12":"print(row_0)","6b19f822":"row_0.index","a69bbee8":"row_0['tagId']","f1351beb":"'rating' in row_0","b802d67f":"row_0.name","c0769b3c":"row_0 = row_0.rename('first_row')\nrow_0.name","7accba7b":"tags.head(10)","cb339048":"tags.index","77023d53":"tags.columns","6e788a42":"# Extract row 0, 11, 2000 from DataFrame\n\ntags.iloc[ [0,11,1127] ]","69677eda":"ratings","8d324fbe":"ratings['rating'].describe()","d29c4187":"ratings.describe()","5b3c2354":"ratings['rating'].mean()","7f5efea4":"ratings.mean()","608cfba6":"ratings.min()","86bdfed7":"ratings['rating'].max()","ff2e44ec":"ratings['rating'].std()","c037d5da":"ratings['rating'].mode()","12d3e838":"ratings.corr()","57ce3602":"filter_1 = ratings['rating'] > 5\n\nfilter_1.any()","4dea962d":"filter_1","3a85f586":"filter_2 = ratings['rating'] > 0\nfilter_2.all()","65905fe3":"movies.shape","58d7d8d5":"#is any row NULL ?\n\nmovies.isnull().any()","bebadab5":"ratings = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv', sep=',')","dfaa4823":"ratings.shape","d0e902f3":"#is any row NULL ?\n\nratings.isnull().any()","7e16123a":"tags.shape","4fade026":"#is any row NULL ?\n\ntags.isnull().any()","65d73a59":"tags = tags.dropna()","d3880201":"#Check again: is any row NULL ?\n\ntags.isnull().any()","e78024c7":"tags.shape","fcb3ad59":"%matplotlib inline\n\nratings.hist(column='rating', figsize=(15,10))","07ed5090":"ratings.boxplot(column='rating',figsize=(15,10))","eb5854ab":"tags['tag'].head()","6b0c0ea2":"movies[['title','genres']].head()\n","493a4ca8":"ratings[1000:1010]","21c4ecb5":"tags","32983487":"tag_counts = tags['tag'].value_counts()\ntag_counts.head(50)","9520fa5f":"tag_counts[:10].plot(kind='bar', figsize=(15,10))","fd2e7559":"is_highly_rated = ratings['rating'] >= 4.0\n\nratings[is_highly_rated][-5:]","641162f1":"is_animation = movies['genres'].str.contains('Animation')\n\nmovies[is_animation][5:15]","0fd5a459":"war = movies['genres'].str.contains('War')\nmovies[war]","5daeb999":"movies[is_animation].head(15)","d949346a":"ratings_count = ratings[['movieId','rating']].groupby('rating').count()\nratings_count","1228e1ea":"average_rating = ratings[['movieId','rating']].groupby('movieId').mean()\naverage_rating.tail()","0efb582c":"movie_count = ratings[['movieId','rating']].groupby('movieId').count()\nmovie_count.head()","1a31445c":"movie_count = ratings[['movieId','rating']].groupby('movieId').count()\nmovie_count.tail()","1618d1ee":"tags.head()","437dd755":"tags['movieId']=tags['tagId']\ntags","1d2a4516":"movies.head()","00572b07":"t = movies.merge(tags, on='movieId', how='inner')\nt.head()","fa7c7157":"avg_ratings = ratings.groupby('movieId', as_index=False).mean()\ndel avg_ratings['userId']\navg_ratings.head()","5e91d8ac":"box_office = movies.merge(avg_ratings, on='movieId', how='inner')\nbox_office.tail()","0e48e4a0":"is_highly_rated = box_office['rating'] >= 4.0\n\nbox_office[is_highly_rated][-5:]","4138f654":"is_comedy = box_office['genres'].str.contains('Comedy')\n\nbox_office[is_comedy][:5]","0460a6a3":"box_office[is_comedy & is_highly_rated][-5:]","4714505b":"movies.head()","2568fa2e":"movie_genres = movies['genres'].str.split('|', expand=True)","ac6c11fa":"movie_genres[:10]","8803bcfe":"movie_genres['isComedy'] = movies['genres'].str.contains('Comedy')","4088594c":"movie_genres[:10]","94065cb3":"movies['year'] = movies['title'].str.extract('.*\\((.*)\\).*', expand=True)","662fdc68":"movies.tail()","648de075":"tags = pd.read_csv('..\/input\/movielens-20m-dataset\/tag.csv', sep=',')","83726b64":"tags.dtypes","592d1b78":"tags.head(5)","442c7084":"tags['parsed_time'] = pd.to_datetime(tags['timestamp'], unit='s')","5ad8feb9":"\ntags['parsed_time'].dtype","ccac37c8":"tags.head(2)","b4232fa1":"greater_than_t = tags['parsed_time'] > '2015-02-01'\n\nselected_rows = tags[greater_than_t]\n\ntags.shape, selected_rows.shape","9e00bd3a":"tags.sort_values(by='parsed_time', ascending=True)[:10]","485caebd":"average_rating = ratings[['movieId','rating']].groupby('movieId', as_index=False).mean()\naverage_rating.tail()","3c6c664f":"joined = movies.merge(average_rating, on='movieId', how='inner')\njoined.head()\njoined.corr()","03bc9a80":"yearly_average = joined[['year','rating']].groupby('year', as_index=False).mean()\nyearly_average[:10]","a49738d7":"yearly_average[-20:].plot(x='year', y='rating', figsize=(15,10), grid=True)","082284ff":"<h1 style=\"font-size:1.5em;color:#2467C0\">Series<\/h1>","43486dce":"<p style=\"font-family: Arial; font-size:1.35em;color:#2462C0; font-style:bold\">\n\nDo some years look better for the box office movies than others? <br><br>\n\nDoes any data point seem like an outlier in some sense?\n\n<\/p>","4930deab":"<h1 style=\"font-size:2em;color:#2467C0\">Slicing Out Columns<\/h1>\n ","976d69a7":"<p style=\"font-family: Arial; font-size:1.35em;color:#2462C0; font-style:bold\"><br>\n\nAdd a new column for comedy genre flag\n\n<br> <\/p>","59e9b44d":"<h1 style=\"font-size:2em;color:#2467C0\">Group By and Aggregate <\/h1>","b823ef07":"<p style=\"font-family: Arial; font-size:1.75em;color:#2462C0; font-style:bold\">\npandas DataFrame<\/p>\n\n*pandas DataFrame* is a 2-dimensional labeled data structure.","2380c04d":"<p style=\"font-family: Arial; font-size:1.75em;color:#2462C0; font-style:bold\"><br>\n\n\nCombine aggregation, merging, and filters to get useful analytics\n<\/p>","b76184c2":"<p style=\"font-family: Arial; font-size:1.75em;color:#2462C0; font-style:bold\">\nCase Study: Movie Data Analysis<\/p>\n<br>This notebook uses a dataset from the MovieLens website. We will describe the dataset further as we explore with it using *pandas*. \n\n## Download the Dataset\n\n### Please note that **you will need to download the dataset**. \n\nAlthough the video for this notebook says that the data is in your folder, the folder turned out to be too large to fit on the edX platform due to size constraints.\n\nHere are the links to the data source and location:\n* **Data Source:** MovieLens web site (filename: ml-20m.zip)\n* **Location:** https:\/\/grouplens.org\/datasets\/movielens\/\n\nOnce the download completes, please make sure the data files are in a directory called **movielens** in your **Week-4-pandas** folder. \n\nLet us look at the files in this dataset using the UNIX command ls.\n","40a3962f":"More examples: http:\/\/pandas.pydata.org\/pandas-docs\/stable\/merging.html","f8304d2a":"war = movie['genres'].str.contains['war']","b3eb785b":"<h1 style=\"font-size:2em;color:#2467C0\">Average Movie Ratings over Time <\/h1>\n## Are Movie Ratings related to the Year of Launch?","1704eaec":"<p style=\"font-family: Arial; font-size:1.35em;color:#2462C0; font-style:bold\">\n\nData Type datetime64[ns] maps to either <M8[ns] or >M8[ns] depending on the hardware\n\n<\/p>","5a04f748":"That's nice! No NULL values!","430cb738":"<h1 style=\"font-size:1.5em;color:#2467C0\">DataFrames <\/h1>","a271dc4e":"<p style=\"font-family: Arial; font-size:1.35em;color:#2462C0; font-style:bold\">\n\nSelecting rows based on timestamps\n<\/p>","9c916731":"<h1 style=\"font-size:2em;color:#2467C0\">Vectorized String Operations<\/h1>\n","fcf86a94":"We have some tags which are NULL.","8c27d320":"<h1 style=\"font-size:2em;color:#2467C0\">Data Cleaning: Handling Missing Data<\/h1>","01e441bb":"<p style=\"font-family: Arial; font-size:1.75em;color:#2462C0; font-style:bold\">\nUse Pandas to Read the Dataset<br>\n<\/p>\n<br>\nIn this notebook, we will be using three CSV files:\n* **ratings.csv :** *userId*,*movieId*,*rating*, *timestamp*\n* **tags.csv :** *userId*,*movieId*, *tag*, *timestamp*\n* **movies.csv :** *movieId*, *title*, *genres* <br>\n\nUsing the *read_csv* function in pandas, we will ingest these three files.","5a8b1fa1":"<h1 style=\"font-size:2em;color:#2467C0\">Data Visualization<\/h1>","6b07df1e":"<p style=\"font-family: Arial; font-size:1.35em;color:#2462C0; font-style:bold\">\n\nSorting the table using the timestamps\n<\/p>","d77e2c2c":"<p style=\"font-family: Arial; font-size:1.25em;color:#2462C0; font-style:bold\">\nCreate DataFrame from dictionary of Python Series<\/p>","71e8b98a":"<h1 style=\"font-size:2em;color:#2467C0\">Parsing Timestamps<\/h1>","a59900c5":"<h1 style=\"font-size:2em;color:#2467C0\">Merge Dataframes<\/h1>","3944e012":"That's nice! No NULL values! Notice the number of lines have decreased.","a18cdfd4":"<p style=\"font-family: Arial; font-size:1.35em;color:#2462C0; font-style:bold\"><br>\n\nSplit 'genres' into multiple columns\n\n<br> <\/p>","cd4d7e38":"<h1 style=\"font-size:2em;color:#2467C0\">Descriptive Statistics<\/h1>\n\nLet's look how the ratings are distributed! ","4cbf1d03":"<h1 style=\"font-size:2em;color:#2467C0\">Filters for Selecting Rows<\/h1>","6164c311":"That's nice! No NULL values!","5c05faba":"<p style=\"font-family: Arial; font-size:1.35em;color:#2462C0; font-style:bold\"><br>\n\nMore here: http:\/\/pandas.pydata.org\/pandas-docs\/stable\/text.html#text-string-methods\n<br> <\/p>","fe698fff":"Timestamps are common in sensor data or other time series datasets.\nLet us revisit the *tags.csv* dataset and read the timestamps!\n","d42e6ef0":"<p style=\"font-family: Arial; font-size:1.75em;color:#2462C0; font-style:bold\">\nIntroduction to pandas Data Structures<\/p>\n<br>\n*pandas* has two main data structures it uses, namely, *Series* and *DataFrames*. \n\n<p style=\"font-family: Arial; font-size:1.75em;color:#2462C0; font-style:bold\">\npandas Series<\/p>\n\n*pandas Series* one-dimensional labeled array. \n","fc08f75d":"<p style=\"font-family: Arial; font-size:3.75em;color:purple; font-style:bold\"><br>\nPandas<\/p><br>\n\n*pandas* is a Python library for data analysis. It offers a number of data exploration, cleaning and transformation operations that are critical in working with data in Python. \n\n*pandas* build upon *numpy* and *scipy* providing easy-to-use data structures and data manipulation functions with integrated indexing.\n\nThe main data structures *pandas* provides are *Series* and *DataFrames*. After a brief introduction to these two data structures and data ingestion, the key features of *pandas* this notebook covers are:\n* Generating descriptive statistics on data\n* Data cleaning using built in pandas functions\n* Frequent data operations for subsetting, filtering, insertion, deletion and aggregation of data\n* Merging multiple datasets using dataframes\n* Working with timestamps and time-series data\n\n**Additional Recommended Resources:**\n* *pandas* Documentation: http:\/\/pandas.pydata.org\/pandas-docs\/stable\/\n* *Python for Data Analysis* by Wes McKinney\n* *Python Data Science Handbook* by Jake VanderPlas\n\nLet's get started with our first *pandas* notebook!","956b752c":"<h1 style=\"font-size:2em;color:#2467C0\">Data Structures <\/h1>","07a4a91c":"<p style=\"font-family: Arial; font-size:1.35em;color:#2462C0; font-style:bold\"><br>\n\nExtract year from title e.g. (1995)\n\n<br> <\/p>","7db02607":"<p style=\"font-family: Arial; font-size:1.75em;color:#2462C0; font-style:bold\"><br>\n\nImport Libraries\n<\/p>","05124a9e":"<p style=\"font-family: Arial; font-size:1.35em;color:#2462C0; font-style:bold\">\n\nUnix time \/ POSIX time \/ epoch time records \ntime in seconds <br> since midnight Coordinated Universal Time (UTC) of January 1, 1970\n<\/p>","76eb3b91":"<p style=\"font-family: Arial; font-size:1.25em;color:#2462C0; font-style:bold\">\nBasic DataFrame operations<\/p>","42580f41":"<p style=\"font-family: Arial; font-size:1.25em;color:#2462C0; font-style:bold\">\nCreate DataFrame from list of Python dictionaries<\/p>"}}