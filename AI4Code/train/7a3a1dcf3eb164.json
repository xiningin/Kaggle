{"cell_type":{"2fdf7789":"code","1a0ffa53":"code","b52de967":"code","1c7a5b11":"code","be9f2844":"code","ccbd74f3":"code","66a8a9d9":"code","fb18b91d":"code","de148a77":"code","c4f617b7":"code","a42febf6":"code","54fc2155":"code","ba065b20":"code","acca2675":"code","2626d796":"code","a766cddc":"code","8edafa94":"code","84e901d2":"code","6abafbdd":"code","cabba17c":"code","a6f95c90":"code","5d88de7e":"code","c75b810a":"code","6bef4ab0":"code","4ba89bd8":"code","c44af65d":"code","ee13d5ca":"markdown","e928e2a0":"markdown","311b3280":"markdown","a4996ff1":"markdown","be707f71":"markdown","522288c1":"markdown","ea4482a9":"markdown","f76a557d":"markdown","49f1eae1":"markdown","1df4944d":"markdown","44de5679":"markdown","7fc19537":"markdown","49579c89":"markdown","47dcf849":"markdown","57d553b4":"markdown","f0e00d31":"markdown","61a40808":"markdown","1be8abee":"markdown","8cfa62bf":"markdown"},"source":{"2fdf7789":"# Ignore  the warnings\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\n# data visualisation and manipulation\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\nimport missingno as msno\nimport pandas_profiling as pdp\n\n#configure\n# sets matplotlib to inline and displays graphs below the corressponding cell.\n%matplotlib inline  \nstyle.use('fivethirtyeight')\nsns.set(style='whitegrid',color_codes=True)\n\n#import the necessary modelling algos.\n\n#classifiaction.\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import LinearSVC,SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier,AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nimport xgboost as xgb\nimport lightgbm as lgbm\nimport catboost as cb\nfrom sklearn.ensemble import AdaBoostClassifier\n\n#model selection\nfrom sklearn.model_selection import train_test_split,cross_validate\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV\n\n#preprocessing\nfrom sklearn.preprocessing import MinMaxScaler,StandardScaler,LabelEncoder\n\n#evaluation metrics\nfrom sklearn.metrics import mean_squared_log_error,mean_squared_error, r2_score,mean_absolute_error # for regression\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score  # for classification\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import cross_val_score","1a0ffa53":"df = pd.read_csv('..\/input\/fetal-health-classification\/fetal_health.csv')\ndf.head()","b52de967":"df.shape","1c7a5b11":"df.info()","be9f2844":"df.isnull().sum()","ccbd74f3":"sns.countplot(data = df, x = 'fetal_health')","66a8a9d9":"bins = (0, 1.0, 3.0)\nbin_names = ['Normally', 'Carefully']\ndf['fetal_health'] = pd.cut(df['fetal_health'], bins = bins, labels = bin_names)","fb18b91d":"\nsns.countplot(data = df, x = 'fetal_health')","de148a77":"replace_values = {'Normally': 0,\n                 'Carefully': 1}\n\ndf = df.replace({'fetal_health': replace_values})","c4f617b7":"X = df.drop('fetal_health', axis = 1)\ny = df.fetal_health","a42febf6":"from imblearn.over_sampling import SMOTE\n\nsm = SMOTE()\nX_res, y_res = sm.fit_resample(X, y)\n\nprint(\"Before OverSampling, counts of label '1': {}\".format(sum(y==1)))\nprint(\"Before OverSampling, counts of label '0': {} \\n\".format(sum(y==0)))\n\nprint('After OverSampling, the shape of train_X: {}'.format(X_res.shape))\nprint('After OverSampling, the shape of train_y: {} \\n'.format(y_res.shape))\n\nprint(\"After OverSampling, counts of label '1': {}\".format(sum(y_res==1)))\nprint(\"After OverSampling, counts of label '0': {}\".format(sum(y_res==0)))","54fc2155":"sns.countplot(x = y_res, data = df)","ba065b20":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size = 0.2, random_state = 42)","acca2675":"%%time\n\ndtc = DecisionTreeClassifier()\ndtc.fit(X_train, y_train)\ndtc_pred = dtc.predict(X_test)\nprint(confusion_matrix(dtc_pred, y_test))\nprint('-----')\nprint(classification_report(dtc_pred, y_test))","2626d796":"%%time\n\nrf = RandomForestClassifier()\nrf.fit(X_train, y_train)\nrf_pred = rf.predict(X_test)\nprint(confusion_matrix(rf_pred, y_test))\nprint('-----')\nprint(classification_report(rf_pred, y_test))","a766cddc":"lr = LogisticRegression()\nlr.fit(X_train, y_train)\nlr_pred = lr.predict(X_test)\nprint(confusion_matrix(lr_pred, y_test))\nprint('-----')\nprint(classification_report(lr_pred, y_test))","8edafa94":"svc = SVC()\nsvc.fit(X_train, y_train)\nsvc_pred = svc.predict(X_test)\nprint(confusion_matrix(svc_pred, y_test))\nprint('-----')\nprint(classification_report(svc_pred, y_test))","84e901d2":"knn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\nknn_pred = knn.predict(X_test)\nprint(confusion_matrix(knn_pred, y_test))\nprint('-----')\nprint(classification_report(knn_pred, y_test))","6abafbdd":"cross_valid_scores = {}","cabba17c":"%%time\nparameters = {\n    \"max_depth\": [3, 5, 7, 9, 11, 13],\n}\n\nmodel_dtc = DecisionTreeClassifier(\n    random_state=42,\n    class_weight='balanced',\n)\n\nmodel_dtc = GridSearchCV(\n    model_dtc, \n    parameters, \n    cv=5,\n)\n\nmodel_dtc.fit(X_train, y_train)\nmodel_dtc_pred = model_dtc.predict(X_test)\nprint(classification_report(model_dtc_pred, y_test))\n\nprint('-----')\nprint(f'Best parameters {model_dtc.best_params_}')\nprint(\n    f'Mean cross-validated accuracy score of the best_estimator: ' + \\\n    f'{model_dtc.best_score_:.3f}'\n)\ncross_valid_scores['desicion_tree'] = model_dtc.best_score_\nprint('-----')","a6f95c90":"%%time\nparameters = {\n    \"n_estimators\": [5, 10, 15, 20, 25], \n    \"max_depth\": [3, 5, 7, 9, 11, 13],\n}\n\nmodel_rf = RandomForestClassifier(\n    random_state=42,\n    class_weight='balanced',\n)\n\nmodel_rf = GridSearchCV(\n    model_rf, \n    parameters, \n    cv=5,\n)\n\nmodel_rf.fit(X_train, y_train)\nmodel_rf_pred = model_rf.predict(X_test)\nprint(classification_report(model_rf_pred, y_test))\n\nprint('-----')\nprint(f'Best parameters {model_rf.best_params_}')\nprint(\n    f'Mean cross-validated accuracy score of the best_estimator: '+ \\\n    f'{model_rf.best_score_:.3f}'\n)\ncross_valid_scores['random_forest'] = model_rf.best_score_\nprint('-----')","5d88de7e":"%%time\nparameters = {\n    'max_depth': [3, 5, 7, 9], \n    'n_estimators': [5, 10, 15, 20, 25, 50, 100],\n    'learning_rate': [0.01, 0.05, 0.1]\n}\n\nmodel_xgb = xgb.XGBClassifier(\n    random_state=42, verbosity = 0\n)\n\nmodel_xgb = GridSearchCV(\n    model_xgb, \n    parameters, \n    cv=5,\n    scoring='accuracy',\n)\n\nmodel_xgb.fit(X_train, y_train)\nmodel_xgb_pred = model_xgb.predict(X_test)\nprint(classification_report(model_xgb_pred, y_test))\n\n\nprint('-----')\nprint(f'Best parameters {model_xgb.best_params_}')\nprint(\n    f'Mean cross-validated accuracy score of the best_estimator: ' + \n    f'{model_xgb.best_score_:.3f}'\n)\ncross_valid_scores['xgboost'] = model_xgb.best_score_\nprint('-----')","c75b810a":"%%time\nparameters = {\n    'n_estimators': [5, 10, 15, 20, 25, 50, 100],\n    'learning_rate': [0.01, 0.05, 0.1],\n    'num_leaves': [7, 15, 31],\n}\n\nmodel_lgbm = lgbm.LGBMClassifier(\n    random_state=42,\n    class_weight='balanced',\n)\n\nmodel_lgbm = GridSearchCV(\n    model_lgbm, \n    parameters, \n    cv=5)\n\nmodel_lgbm.fit(X_train, y_train)\nmodel_lgbm_pred = model_lgbm.predict(X_test)\nprint(classification_report(model_lgbm_pred, y_test))\n\nprint('-----')\nprint(f'Best parameters {model_lgbm.best_params_}')\nprint(\n    f'Mean cross-validated accuracy score of the best_estimator: ' + \n    f'{model_lgbm.best_score_:.3f}'\n)\ncross_valid_scores['lightgbm'] = model_lgbm.best_score_\nprint('-----')","6bef4ab0":"%%time\nparameters = {\n    \"n_estimators\": [5, 10, 15, 20, 25, 50, 75, 100], \n    \"learning_rate\": [0.001, 0.01, 0.1, 1.],\n}\n\nmodel_adaboost = AdaBoostClassifier(\n    random_state=42,\n)\n\nmodel_adaboost = GridSearchCV(\n    model_adaboost, \n    parameters, \n    cv=5,\n    scoring='accuracy',\n)\n\nmodel_adaboost.fit(X_train, y_train)\nmodel_adaboost_pred = model_adaboost.predict(X_test)\nprint(classification_report(model_adaboost_pred, y_test))\n\nprint('-----')\nprint(f'Best parameters {model_adaboost.best_params_}')\nprint(\n    f'Mean cross-validated accuracy score of the best_estimator: '+ \\\n    f'{model_adaboost.best_score_:.3f}'\n)\ncross_valid_scores['ada_boost'] = model_adaboost.best_score_\nprint('-----')","4ba89bd8":"%%time\nparameters = {\n    \"C\": [0.001, 0.01, 0.1, 1.],\n    \"penalty\": [\"l1\", \"l2\"]\n}\n\nmodel_lr = LogisticRegression(\n    random_state=42,\n    class_weight=\"balanced\",\n    solver=\"liblinear\",\n)\n\nmodel_lr = GridSearchCV(\n    model_lr, \n    parameters, \n    cv=5,\n    scoring='accuracy',\n)\n\nmodel_lr.fit(X_train, y_train)\nmodel_lr_pred = model_lr.predict(X_test)\nprint(classification_report(model_lr_pred, y_test))\n\nprint('-----')\nprint(f'Best parameters {model_lr.best_params_}')\nprint(\n    f'Mean cross-validated accuracy score of the best_estimator: ' + \n    f'{model_lr.best_score_:.3f}'\n)\ncross_valid_scores['logistic_regression'] = model_lr.best_score_\nprint('-----')","c44af65d":"%%time\nparameters = {\n    \"weights\": [\"uniform\", \"distance\"],\n}\n\nmodel_k_neighbors = KNeighborsClassifier(\n)\n\nmodel_k_neighbors = GridSearchCV(\n    model_k_neighbors, \n    parameters, \n    cv=5,\n    scoring='accuracy',\n)\n\nmodel_k_neighbors.fit(X_train, y_train)\nmodel_k_neighbors_pred = model_k_neighbors.predict(X_test)\nprint(classification_report(model_k_neighbors_pred, y_test))\n\nprint('-----')\nprint(f'Best parameters {model_k_neighbors.best_params_}')\nprint(\n    f'Mean cross-validated accuracy score of the best_estimator: ' + \n    f'{model_k_neighbors.best_score_:.3f}'\n)\ncross_valid_scores['k_neighbors'] = model_k_neighbors.best_score_\nprint('-----')","ee13d5ca":"## Decision Tree","e928e2a0":"# Grid Search","311b3280":"## Adaboost","a4996ff1":"## Logistic Regression","be707f71":"### Dividing fetal_health as normally and carefully for binary classification","522288c1":"# OverSampling","ea4482a9":"## XGBoost","f76a557d":"# Data loading and overview","49f1eae1":"## SVC","1df4944d":"## Logistic Regression","44de5679":"## My previous works:\n\n1. https:\/\/www.kaggle.com\/ivangavrilove88\/acc-0-94\n2. https:\/\/www.kaggle.com\/ivangavrilove88\/bin-acc-0-96\n\n\n## What I have improved:\n\n1. Changed quality metrics\n2. Fixed date imbalance\n2. Grid Search","7fc19537":"# Thanks for watching!\n\n# If you liked my work then upvoted of write your opinion","49579c89":"## KNN","47dcf849":"## LightGBM","57d553b4":"# Modeling","f0e00d31":"## Decision Tree","61a40808":"## KNN","1be8abee":"# Import Libs","8cfa62bf":"## Random Forest"}}