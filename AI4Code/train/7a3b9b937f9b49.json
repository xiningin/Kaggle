{"cell_type":{"6875e6ed":"code","7102b159":"code","f9023560":"code","ffc7ee21":"code","a7a93ca6":"code","a7303c99":"code","e6e1767a":"code","88632e15":"code","0e2f1f75":"code","aac00af2":"code","ecd92d5e":"code","8cf09d4b":"code","07f2082d":"code","a12ebef1":"code","228323ab":"code","f7aa4ccc":"code","dc6baba5":"code","3ca3b286":"code","9deb2696":"code","5ddfddd1":"code","91c56e0a":"code","dbe0f38d":"code","734c6e5b":"code","87c9f34a":"code","969e7d48":"code","0c26aa85":"code","572d7a9e":"code","bc405d67":"code","5ceadea1":"code","7ea94022":"code","b30c7094":"code","4819c08e":"code","bbc210f9":"code","ae0f5733":"code","e6c95e2b":"code","3b080ed2":"code","dd59bde5":"code","b44746e8":"code","ac1a44dc":"code","453c6ecb":"code","85f0edcf":"code","62bad83a":"code","8afcac7c":"code","c45af79b":"code","80242ae1":"code","1f3ced19":"code","ce025fb7":"code","e59d525f":"code","988c7037":"code","4f979f4f":"code","21edf85f":"code","ab598e43":"code","c50d1ff6":"code","6e4b5ee7":"code","b26b520f":"code","5694c99e":"code","47792269":"code","37c853e7":"code","979e15f5":"code","b8af2d52":"code","e52c6f3f":"code","eded4bae":"code","d5fbfdb0":"code","36c7fef9":"code","660bcb51":"code","e6028572":"code","f4d3d1f5":"code","4a7b54fa":"code","8236b4be":"code","b5a327a4":"code","56fbbbbe":"code","a591e3be":"code","1ab9518b":"code","427b06ab":"code","93bedc39":"code","5f5c0770":"code","9ceb100c":"code","46ca4bab":"code","24f509a9":"code","8f6fa9df":"code","5c98797c":"code","9d30c0de":"code","2c500c8b":"code","af06c01f":"code","02e6eafe":"code","f2c8a523":"code","8e3046c8":"code","766ba9f7":"code","c002b58e":"code","50e81077":"code","8d9d4aee":"code","7a3b9394":"markdown","7ce009cf":"markdown","c4218c58":"markdown","7c918638":"markdown","74f99b1a":"markdown"},"source":{"6875e6ed":"import numpy as np\nimport pandas as pd","7102b159":"# Passing ndarray to Pandas series\nd1 = np.arange(100,110)\npd.Series(d1)","f9023560":"#Customized Index values\nd2 = np.array(['a','b','c','d','e'])\npd.Series(d2,index=[1,2,3,4,5])","ffc7ee21":"#with Dictionary\nd3 = {\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}\npd.Series(d3)","a7a93ca6":"#Retrive elements\ndata = np.array(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\ns = pd.Series(data)","a7303c99":"s[:3]","e6e1767a":"s[-3:]","88632e15":"s[[0,2,4]]","0e2f1f75":"#creating a Dataframe\ndf = pd.DataFrame(\n                  {\"Name\":[\"a\",\"b\",\"c\",\"d\"],\n                  \"Age\" : [25,24,19,24]},\n                   index =[1,2,3,4])\ndf","aac00af2":"df = pd.DataFrame([['Ab', 25], ['Bb', 24], ['Cd', 19], ['Dd', 24]], columns=['Name','Age'])","ecd92d5e":"df","8cf09d4b":"ipl_data = {'Team': ['Riders', 'Riders', 'Devils', 'Devils', 'Kings', 'kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],\n            'Rank': [1, 2, 2, 3, 3, 4, 1, 1, 2, 4, 1, 2],\n            'Year': [2014, 2015, 2014, 2015, 2014, 2015, 2016, 2017, 2016, 2014, 2015, 2017],\n            'Points':[876, 789, 863, 673, 741, 812, 756, 788, 694, 701, 804, 690]}\ndf = pd.DataFrame(ipl_data)","07f2082d":"df","a12ebef1":"df.dtypes","228323ab":"df.ndim","f7aa4ccc":"df.shape","dc6baba5":"len(df)","3ca3b286":"df.size","9deb2696":"df.values","5ddfddd1":"df.head()","91c56e0a":"df.tail(2)","dbe0f38d":"#summerize data\ngrades = [48, 99, 75, 80, 42, 80, 72, 68, 36, 78]\n\ndf = pd.DataFrame({'ID': [\"x%d\" % r for r in range(10)],\n                   'Gender': ['F', 'M', 'F', 'M', 'F', 'M', 'F', 'M', 'M', 'M'],\n                   'ExamYear': ['2007', '2007', '2007', '2008', '2008', '2008', '2008', '2009', '2009', '2009'],\n                   'Class': ['algebra', 'stats', 'bio', 'algebra', 'algebra', 'stats', 'stats', 'algebra', 'bio', 'bio'],\n                   'Participated': ['yes', 'yes', 'yes', 'yes', 'no', 'yes', 'yes', 'yes', 'yes', 'yes'],\n                   'Passed': ['yes' if x > 50 else 'no' for x in grades],\n                   'Employed': [True, True, True, False, False, False, False, True, True, False],\n                   'Grade': grades})","734c6e5b":"df","87c9f34a":"df['Grade'].value_counts()","969e7d48":"df['ExamYear'].nunique()","0c26aa85":"df.describe()","572d7a9e":"#selectin the Data\ndf['Class']","bc405d67":"df[['ID','Class','Grade']]","5ceadea1":"df.Grade","7ea94022":"#subset observation\ndf[df.Gender == 'M']","b30c7094":"df[(df.Grade> 20) & (df.ExamYear == '2008') & (df.Participated == 'yes')]","4819c08e":"#index based slicing","bbc210f9":"grades = [48, 99, 75, 80, 42, 80, 72, 68]\n\ndf = pd.DataFrame({'ID': [\"x%d\" % r for r in range(8)],\n                   'Gender': ['F', 'M', 'F', 'M', 'F', 'M', 'F', 'M'],\n                   'ExamYear': ['2007', '2007', '2007', '2008', '2008', '2008', '2008', '2009'],\n                   'Class': ['algebra', 'stats', 'bio', 'algebra', 'algebra', 'stats', 'stats', 'algebra'],\n                   'Participated': ['yes', 'yes', 'yes', 'yes', 'no', 'yes', 'yes', 'yes'],\n                   'Passed': ['yes' if x > 50 else 'no' for x in grades],\n                   'Employed': [True, True, True, False, False, False, False, True],\n                   'Grade': grades},\n                 index = [\"x%d\" % r for r in range(8)])","ae0f5733":"df","e6c95e2b":"df.loc[:,'Grade']","3b080ed2":"df.loc[:,['ID', 'Grade']]","dd59bde5":"df.loc['x2']","b44746e8":"df.loc[['x1', 'x3', 'x5'],['ID', 'Grade','ExamYear']]","ac1a44dc":"#integer based iloc\ndf.iloc[:4]","453c6ecb":"df","85f0edcf":"df.iloc[1:5, 2:7]","62bad83a":"df = pd.DataFrame(\n    {\n        \"Name\": ['Ab', 'Bb', 'Cd', 'Dd', 'Ed', 'Fc'],\n        \"Age\" : [25, 24, 19, 24, np.nan, 28],\n        \"Score\" : [78, 84, 89, 74, 69, np.nan]},\n    index = [1, 2, 3, 4, 5, 6])    ","8afcac7c":"df","c45af79b":"df.dropna() #drop row cloumn with row data","80242ae1":"df['Age'].fillna(value = 15)","1f3ced19":"df","ce025fb7":"df.Age.mean()","e59d525f":"df2 = df['Age'].fillna(value = df.Age.mean())","988c7037":"df2","4f979f4f":"df['Age'] = df['Age'].fillna(value = df.Age.mean())","21edf85f":"df","ab598e43":"df['Score'] = df['Age'].fillna(value=df.Age.mean())","c50d1ff6":"df","6e4b5ee7":"pd.isnull(df)","b26b520f":"#wide long form\ndata = {'Name': ['John', 'Smith', 'Liz'], \n        'Weight': [150, 170, 110], \n        'BP': [120, 130, 100]}\n\nw_df = pd.DataFrame(data)","5694c99e":"w_df","47792269":"w_df.melt(id_vars='Name',var_name='key',value_name='value')","37c853e7":"data = {'patient': [1, 1, 1, 2, 2],\n        'obs': [1, 2, 3, 1, 2], \n        'treatment': [0, 1, 0, 1, 0],\n        'score': [6252, 24243, 2345, 2342, 23525]}\n\nLong_df = pd.DataFrame(data, columns = ['patient', 'obs', 'treatment', 'score'])","979e15f5":"Long_df","b8af2d52":"Long_df.pivot(index='patient', columns='obs', values='score')","e52c6f3f":"#making a new column","eded4bae":"data = {'Name': ['John', 'Smith', 'Liz', 'Andy', 'Dri'], \n        'Weight': [150, 170, 110, 56, 75], \n        'BP': [120, 130, 100, 110, 125]}\n\ndf = pd.DataFrame(data)","d5fbfdb0":"df","36c7fef9":"df = df.assign(BPw = lambda df: df.Weight \/ df.BP)","660bcb51":"df","e6028572":"df['BP2'] = df['Weight'] \/ df['BP']","f4d3d1f5":"df","4a7b54fa":"df['BP_hl'] = np.where(df['BP'] > 100 , 'high' , 'low')","8236b4be":"df","b5a327a4":"df.assign(st_weight = lambda df:df.Weight \/df.Weight.sum())","56fbbbbe":"ipl_data = {'Team': ['Riders', 'Riders', 'Devils', 'Devils', 'Kings', 'Kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],\n            'Year': [2014, 2015, 2014, 2015, 2014, 2015, 2016, 2017, 2016, 2014, 2015, 2017],\n            'Points':[876, 789, 863, 673, 741, 812, 756, 788, 694, 701, 804, 690]}\ndf = pd.DataFrame(ipl_data)","a591e3be":"df","1ab9518b":"df.groupby(['Team']).sum()","427b06ab":"df['ratio'] = df.groupby(['Team'], group_keys=False).apply(lambda g: g.Points\/(g.Points).sum())","93bedc39":"df","5f5c0770":"#concatenation\ndf_one = pd.DataFrame(\n    {'Name': ['A1', 'A2', 'A3', 'A4', 'A5'],\n     'subject_id':['S01','S02','S03','S04','S05'],\n     'Marks_scored':[78, 50, 77, 69, 78]},\n    index=[1, 2, 3, 4, 5])","9ceb100c":"df_two = pd.DataFrame(\n    {'Name': ['B1', 'B2', 'B3', 'B4', 'B5'],\n     'subject_id':['S01','S02','S03','S04','S05'],\n     'Marks_scored':[89, 85, 78, 87, 88]},\n    index=[1, 2, 3, 4, 5])","46ca4bab":"pd.concat([df_one,df_two])","24f509a9":"pd.concat([df_one, df_two], keys=['x','y'])","8f6fa9df":"pd.concat([df_one, df_two], keys=['x','y'], ignore_index=True)","5c98797c":"#append columns of Dataframe\npd.concat([df_one, df_two], axis = 1)","9d30c0de":"#Merging Dataframe","2c500c8b":"df_left = pd.DataFrame(\n    {'Student': ['St01', 'St02', 'St03', 'St01'],\n     'Subject': ['Mat', 'Phy', 'Phy', 'Phy'],\n     'Assign1': [54, 63, 56, 78],\n     'Assign2': [66, 65, 75, 85]})\n\ndf_right = pd.DataFrame(\n    {'Student': ['St01', 'St02', 'St01', 'St02'],\n     'Subject': ['Mat', 'Mat', 'Phy', 'Phy'],\n     'Assign3': [72, 56, 85, 96],\n     'Assign4': [78, 89, 56, 88]})","af06c01f":"df_left","02e6eafe":"df_right","f2c8a523":"pd.merge(df_left,df_right , on=['Student','Subject'])","8e3046c8":"df_right","766ba9f7":"#left join\npd.merge(df_left,df_right,on=['Student','Subject'] , how = 'left')","c002b58e":"#right join\npd.merge(df_left, df_right, on=['Student', 'Subject'], how = 'right')","50e81077":"#inner join\npd.merge(df_left, df_right, on=['Student', 'Subject'], how = 'inner')","8d9d4aee":"#outer join\npd.merge(df_left, df_right, on=['Student', 'Subject'], how = 'outer')","7a3b9394":"## Pandas Dataframe","7ce009cf":"# Pandas Python","c4218c58":"## Data wrangling with pandas","7c918638":"## Pandas Series","74f99b1a":"### Handling missing data"}}