{"cell_type":{"22190f3c":"code","5fa65d3d":"code","77492137":"code","15bd69a1":"code","2a90e926":"code","85fc5200":"code","d579ff8d":"code","eee46251":"code","15d6d5d7":"code","b1ff4f4a":"code","98099efb":"code","622573ce":"code","e4bb99ec":"code","d59ccc3b":"code","898d3586":"code","c7b5896f":"code","1ab50d23":"code","f0b996c3":"code","9ed9e93e":"code","83f7d352":"code","dd2573fd":"code","5eadc649":"code","b8987251":"code","cf12ab7d":"code","e7259ce7":"code","ebc707ac":"code","92f8747f":"code","02d0edfa":"code","19e85315":"code","5af3a91b":"code","af887b47":"markdown","aae4f041":"markdown","486abe86":"markdown","9ae4fe1d":"markdown"},"source":{"22190f3c":"\nimport numpy as np # linear algebra\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nsns.set()\n%matplotlib inline\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5fa65d3d":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n","77492137":"train.head()","15bd69a1":"test.drop(['Name', 'Cabin', 'Ticket', 'Embarked'], axis=1, inplace=True)\ntest.head()","2a90e926":"train.info()","85fc5200":"train.isnull().sum()","d579ff8d":"sns.set_theme(style='darkgrid')\nsns.heatmap(train.isnull(), )","eee46251":"train.drop(['Name', 'Cabin', 'Ticket', 'Embarked'], axis=1, inplace=True)","15d6d5d7":"train.head()","b1ff4f4a":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n\n        else:\n            return 24\n\n    else:\n        return Age\n    \n    \ntrain['Age'] = train[['Age','Pclass']].apply(impute_age,axis=1)\ntest['Age'] = test[['Age','Pclass']].apply(impute_age,axis=1)","98099efb":"train.isnull().sum()","622573ce":"train.columns","e4bb99ec":"train.info()","d59ccc3b":"sns.countplot(x='Sex',\n    hue=None,\n    data=train,\n    color='r')","898d3586":"plt.figure(figsize=(10,5))\n\nsns.countplot(x='Sex',\n    data=train,\n    color='b',\n    hue='Survived',)\n\nplt.title(\"People who Survived Based on Gender\")","c7b5896f":"plt.figure(figsize=(10,5))\n\nsns.countplot(x='Survived',hue='Pclass',data=train,palette='winter')","1ab50d23":"plt.figure(figsize=(12,7))\nsns.displot(train['Fare'], bins=30,color='r',height=7,\n    aspect=2, kde=True)\nplt.show()","f0b996c3":"plt.figure(figsize=(12,7))\n\nsns.boxplot(x='Pclass',\n    y='Age',\n    hue=None,\n    data=train,\n    )\nplt.title(\"Boxplot of Passenger Ages Based on Class\")","9ed9e93e":"plt.figure(figsize=(10,5))\n\nsns.countplot(x='SibSp',data=train,palette='summer')\nplt.title(\"Number of Siblings and Spouses on Board\")","83f7d352":"plt.figure(figsize=(10,5))\n\nsns.countplot(x='Parch',data=train,palette='winter')","dd2573fd":"#changing sex column into binary data\nlb = LabelEncoder()\ntrain['Sex'] = lb.fit_transform(train['Sex'])\ntrain","5eadc649":"#changing sex column into binary data\nlb = LabelEncoder()\ntest['Sex'] = lb.fit_transform(test['Sex'])\ntest","b8987251":"test['Fare'].fillna(test['Fare'].mean(), inplace = True)\ntest.isnull().sum()","cf12ab7d":"train.columns","e7259ce7":"X = train[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch','Fare']]\ny = train['Survived']","ebc707ac":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","92f8747f":"log_reg = LogisticRegression()\nlog_reg.fit(X_train, y_train)","02d0edfa":"predictions = log_reg.predict(test.drop('PassengerId', axis = 1))","19e85315":"Submission = pd.DataFrame({'PassengerID': test.PassengerId, 'Survived': predictions})\nSubmission","5af3a91b":"Submission.to_csv('submission.csv', index=False)","af887b47":"# **Logistic Model Predictions and Submission**","aae4f041":"# **Cleaning Data**","486abe86":"# **Training Data**","9ae4fe1d":"# **EDA**"}}