{"cell_type":{"df061248":"code","95a61cff":"code","e020b594":"markdown"},"source":{"df061248":"!pip install ultimate==2.1.2","95a61cff":"from __future__ import print_function\nfrom ultimate.mlp import MLP\n\nimport numpy as np\nimport sys, random\n\nratio = 2.2\n\nX = np.random.rand(50000, 5).astype(\"float32\") * 2 - 1 \nY = 50*(X[:,0]**3) + 20*(X[:,1]**2) + ratio*X[:,2] + 1*X[:,3] + 0*X[:,4]\n\nprint(\"X\", X.shape, X.min(), X.max())\nprint(\"Y\", Y.shape, Y.min(), Y.max())\n\nparam = {\n    'loss_type': 'mse',\n    'layer_size': [X.shape[1],16,16,16,1],\n    'activation': 'am2',\n    'output_range': [0, 1],\n    'output_shrink': 0.001,\n    'importance_mul': 0.0001,\n    'importance_out': True,\n    'rate_init': 0.02, \n    'rate_decay': 0.9, \n    'epoch_train': 50, \n    'epoch_decay': 1,\n    'verbose': 0,\n}\n\nmlp = MLP(param).fit(X, Y)\n\nprint(\"feature importances:\", mlp.feature_importances_)\n\nprint(\"nn ratio\", mlp.feature_importances_[2]\/mlp.feature_importances_[3], ratio)\n\nimport lightgbm as lgb\n\ngbm = lgb.LGBMRegressor(objective='regression',\n                        num_leaves=2**7, # 32\n                        learning_rate=0.05,\n                        n_estimators=100)\n\ngbm.fit(X, Y, eval_metric='rmse')  # rmse l1\n\nprint('feature importances:', list(gbm.feature_importances_))\nprint(\"lightgbm ratio\", gbm.feature_importances_[2]\/gbm.feature_importances_[3], ratio)","e020b594":"# Using neural network to calculate feature importance\nNeural network can calculate feature importance\n\nFollowing is a simple test"}}