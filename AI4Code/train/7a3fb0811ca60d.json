{"cell_type":{"3323b7ed":"code","e8193007":"code","e3b77789":"code","4b4752ef":"code","716c902f":"code","02dc661a":"code","40d7bf3e":"code","360297f9":"code","4ea51578":"code","2f0ddc6a":"code","fdf79848":"code","0295b33b":"code","77284ee7":"code","3f898cb7":"code","76f5375a":"markdown","a2c44ff3":"markdown","f16c9b89":"markdown","4427a46f":"markdown","928f2ce7":"markdown"},"source":{"3323b7ed":"# General Libs\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image\n#from tensorflow.keras.applications.inception_v3 import InceptionV3, preprocess_input\nfrom tensorflow.keras.applications.inception_resnet_v2 import InceptionResNetV2, preprocess_input\nfrom tensorflow.keras.layers import Dense, Flatten, MaxPooling2D, Conv2D, Dropout, BatchNormalization\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam, Adamax\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\n%matplotlib inline","e8193007":"# Alguns par\u00e2metros para leitura do dataset\nim_shape = (299,299)\n\nTRAINING_DIR = '..\/input\/amazon-fruits-small\/ds_frutas_am\/train'\nTEST_DIR = '..\/input\/amazon-fruits-small\/ds_frutas_am\/test'\n\nseed = 42\n\nBATCH_SIZE = 16","e3b77789":"#Using keras ImageGenerator and flow_from_directoty\n\n# Image dataset without augmentation\n#data_generator = ImageDataGenerator(preprocessing_function=preprocess_input, validation_split=0.2)\n# With augmentation\ndata_generator = ImageDataGenerator(\n        validation_split=0.1,\n        rotation_range=25,\n        width_shift_range=0.2,\n        height_shift_range=0.2,\n        preprocessing_function=preprocess_input,\n        shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True,\n        fill_mode='nearest')\nval_data_generator = ImageDataGenerator(preprocessing_function=preprocess_input,validation_split=0.2)","4b4752ef":"\n# Generator para parte train\ntrain_generator = data_generator.flow_from_directory(TRAINING_DIR, target_size=im_shape, shuffle=True, seed=seed,\n                                                     class_mode='categorical', batch_size=BATCH_SIZE, subset=\"training\")\n# Generator para parte valida\u00e7\u00e3o\nvalidation_generator = val_data_generator.flow_from_directory(TRAINING_DIR, target_size=im_shape, shuffle=False, seed=seed,\n                                                     class_mode='categorical', batch_size=BATCH_SIZE, subset=\"validation\")\n\n# Generator para dataset de teste\ntest_generator = ImageDataGenerator(preprocessing_function=preprocess_input)\ntest_generator = test_generator.flow_from_directory(TEST_DIR, target_size=im_shape, shuffle=False, seed=seed,\n                                                     class_mode='categorical', batch_size=BATCH_SIZE)\n\nnb_train_samples = train_generator.samples\nnb_validation_samples = validation_generator.samples\nnb_test_samples = test_generator.samples\nclasses = list(train_generator.class_indices.keys())\nprint('Classes: '+str(classes))\nnum_classes  = len(classes)","716c902f":"# Visualizando alguns exemplos do dataset por meio do Generator criado\nplt.figure(figsize=(15,15))\nfor i in range(9):\n    #gera subfigures\n    plt.subplot(330 + 1 + i)\n    batch = train_generator.next()[0]*255\n    image = batch[0].astype('uint8')\n    plt.imshow(image)\nplt.show()","02dc661a":"base_model = InceptionResNetV2(weights='imagenet', include_top=False, input_shape=(im_shape[0], im_shape[1], 3))\n\nx = base_model.output\nx = Flatten()(x)\nx = Dense(100, activation='relu')(x)\npredictions = Dense(num_classes, activation='softmax', kernel_initializer='random_uniform')(x)\n\nmodel = Model(inputs=base_model.input, outputs=predictions)\n\n# Freezing pretrained layers\nfor layer in base_model.layers:\n    layer.trainable=False\n    \noptimizer = Adam()\nmodel.compile(optimizer=optimizer,loss='categorical_crossentropy',metrics=['accuracy'])","40d7bf3e":"base_model = InceptionResNetV2(weights='imagenet', include_top=False, input_shape=(im_shape[0], im_shape[1], 3))\n\nx = base_model.output\nx = Conv2D(128, kernel_size=(3,3),activation='relu')(x)\nx = BatchNormalization()(x)\nx = MaxPooling2D(pool_size=(2,2))(x)\nx = Conv2D(256, kernel_size=(3,3),activation='relu')(x)\nx = BatchNormalization()(x)\nx = Dropout(0.2)(x)\nx = Flatten()(x)\nx = Dense(100, activation='relu')(x)\nx = Dropout(0.5)(x)\n\npredictions = Dense(num_classes, activation='softmax', kernel_initializer='random_uniform')(x)\n\nmodel = Model(inputs=base_model.input, outputs=predictions)\n\n# Freezing pretrained layers\nfor layer in base_model.layers:\n    layer.trainable=False\n    \noptimizer = Adam(\n    learning_rate=0.0001\n)\nmodel.compile(optimizer=optimizer,loss='categorical_crossentropy',metrics=['accuracy'])","360297f9":"epochs = 200\n\n# Saving the best model\ncallbacks_list = [\n    keras.callbacks.ModelCheckpoint(\n        filepath='model.h5',\n        monitor='val_loss', save_best_only=True, verbose=1),\n    keras.callbacks.EarlyStopping(monitor='val_loss', patience=10,verbose=1)\n]\n\nhistory = model.fit(\n        train_generator,\n        steps_per_epoch=nb_train_samples \/\/ BATCH_SIZE,\n        epochs=epochs,\n        callbacks = callbacks_list,\n        validation_data=validation_generator,\n        verbose = 1,\n        validation_steps=nb_validation_samples \/\/ BATCH_SIZE)","4ea51578":"#Vamos ver como foi o treino?\nimport matplotlib.pyplot as plt\n\nhistory_dict = history.history\nloss_values = history_dict['loss']\nval_loss_values = history_dict['val_loss']\n\nepochs_x = range(1, len(loss_values) + 1)\nplt.figure(figsize=(10,10))\nplt.subplot(2,1,1)\nplt.plot(epochs_x, loss_values, 'bo', label='Training loss')\nplt.plot(epochs_x, val_loss_values, 'b', label='Validation loss')\nplt.title('Training and validation Loss and Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\n#plt.legend()\nplt.subplot(2,1,2)\nacc_values = history_dict['accuracy']\nval_acc_values = history_dict['val_accuracy']\nplt.plot(epochs_x, acc_values, 'bo', label='Training acc')\nplt.plot(epochs_x, val_acc_values, 'b', label='Validation acc')\n#plt.title('Training and validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Acc')\nplt.legend()\nplt.show()","2f0ddc6a":"from tensorflow.keras.models import load_model\n# Load the best saved model\nmodel = load_model('model.h5')","fdf79848":"# Using the validation dataset\nscore = model.evaluate_generator(validation_generator)\nprint('Val loss:', score[0])\nprint('Val accuracy:', score[1])","0295b33b":"# Using the test dataset\nscore = model.evaluate_generator(test_generator)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","77284ee7":"import itertools\n\n#Plot the confusion matrix. Set Normalize = True\/False\ndef plot_confusion_matrix(cm, classes, normalize=True, title='Confusion matrix', cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.figure(figsize=(10,10))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        cm = np.around(cm, decimals=2)\n        cm[np.isnan(cm)] = 0.0\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","3f898cb7":"# Some reports\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport numpy as np\n\n#Confution Matrix and Classification Report\nY_pred = model.predict_generator(test_generator)#, nb_test_samples \/\/ BATCH_SIZE, workers=1)\ny_pred = np.argmax(Y_pred, axis=1)\ntarget_names = classes\n\n#Confution Matrix\ncm = confusion_matrix(test_generator.classes, y_pred)\nplot_confusion_matrix(cm, target_names, normalize=False, title='Confusion Matrix')\nprint('Classification Report')\nprint(classification_report(test_generator.classes, y_pred, target_names=target_names))","76f5375a":"# Imports de Libs","a2c44ff3":"This is a simple example using Transfer Learning for an image recognition problem.","f16c9b89":"------ADAM  -- weighted avg       0.87      0.80      0.81        30\n\n------ADAMAX weighted avg       0.88      0.87      0.86        30\n\n------ADAN  weighted avg       0.90      0.87      0.87        30\n\n--- ADAM learn=0.0001 weighted avg       0.81      0.77      0.77        30\n\n--- ADAM learn=0.0001 epocs=150 weighted avg       0.85      0.80      0.80        30\n\n--- ADAM learn=0.0001 epocs=150 2conv weighted avg       0.86      0.83      0.84        30\n\n--- ADAMAX learn=0.0001 epocs=150 2conv, batch_normalize weighted avg       0.87      0.87      0.87        30\n\n--- ADAMAX learn=0.001 epocs=150 2conv, batch_normalize weighted avg       0.85      0.83      0.83        30\n\n--- ADAMAX learn=0.001 epocs=150 conv, conv=64, batch_normalize weighted avg       0.81      0.73      0.73        30\n\n--- ADAMAX learn=0.0001 epocs=150 conv, conv=64, batch_normalize weighted avg       0.76      0.73      0.73        30\n\nvalidadtion_split=0.1\n\n--- ADAMAX learn=0.0001 epocs=150 conv, conv=32, batch_normalize weighted avg       0.82      0.77      0.75        30\n\n--- ADAMAX learn=0.001 epocs=150 conv, conv=32, batch_normalize weighted avg       0.85      0.83      0.83        30\n\n--- ADAMAX learn=0.001 epocs=150 conv, conv=64, batch_normalizeweighted avg       0.90      0.87      0.86        30\n\n--- ADAM learn=0.001 epocs=150 conv, conv=64, batch_normalize avg weighted avg       0.91      0.90      0.90        30\n\n\n--- ADAM learn=0.0001 epocs=150 conv, conv=64, batch_normalize weighted avg       0.88      0.87      0.86        30\n\n--- ADAM learn=0.001 epocs=150 conv, conv=64, batch_normalize, dropout(0.25)  weighted  avg       0.85      0.77      0.75        30\n\n--- ADAM learn=0.001 epocs=150 conv=64, conv=128, batch_normalize, dropout(0.25)  weighted avg       0.93      0.87      0.87        30\n\n--- ADAM learn=0.001 epocs=150 conv=64, conv=128, batch_normalize, weighted avg       0.78      0.77      0.77        30\n\n--- ADAM learn=0.0001 epocs=150 conv=64, conv=128, batch_normalize, weighted avg       0.88      0.87      0.86        30\n\n--- ADAM learn=0.0001 epocs=150 conv=64, conv=128, batch_normalize,dropout(0.25) weighted avg       0.85      0.83      0.83        30\n\n--- ADAM learn=0.0001 epocs=150 conv=64, conv=128, batch_normalize,dropout(0.5) weighted avg       0.86      0.83      0.84        30\n\n--- ADAM learn=0.001 epocs=150 conv=64, conv=128, batch_normalize,dropout(0.5) weighted avg       0.87      0.80      0.79        30\n\n--- ADAM learn=0.001 epocs=150 conv=128, conv=256, batch_normalize, weighted avg       0.82      0.77      0.75        30\n\n--- ADAM learn=0.01 epocs=150 conv=128, conv=256, batch_normalize weighted avg       0.75      0.63      0.62        30\n\n--- ADAM learn=0.1 epocs=150 conv=128, conv=256, batch_normalize RUIMM\n\n--- ADAM learn=0.0001 epocs=150 conv=128, conv=256, batch_normalize weighted avg       0.88      0.87      0.86        30\n\n--- ADAMAX learn=0.0001 epocs=200 conv=128, conv=256, batch_normalize weighted avg       0.83      0.80      0.81        30\n\n--- ADAMAX learn=0.001 epocs=200 conv=128 (3,3), conv=256(3,3), batch_normalize drpo(0.2) weighted avg       0.88      0.87      0.86        30\n\n--- ADAMAX learn=0.001 epocs=200 conv=128 (3,3), conv=256(3,3), batch_normalize drop(0.5) weighted avg       0.88      0.87      0.86        30\n\n--- ADAM learn=0.001 epocs=200 conv=128 (3,3), conv=256(3,3), batch_normalize drop(0.5) weighted avg       0.92      0.90      0.90        30\n\n--- ADAM learn=0.0001 epocs=200 conv=128 (3,3), conv=256(3,3), batch_normalize drop(0.5) weighted avg       0.94      0.90      0.91        30\n\n--- ADAM learn=0.0001 epocs=200 conv=128 (3,3), conv=256(2,2), batch_normalize drop(0.5) weighted avg       0.88      0.87      0.86        30\n\n--- ADAM learn=0.0001 epocs=200 conv=128 (3,3),drop(0.2) conv=256(3,3), batch_normalize drop(0.5) weighted avg       0.92      0.90      0.90        30\n\nDataGenerator (rotation=0.25)\n--- ADAM learn=0.0001 epocs=200 conv=128 (3,3),drop(0.2) conv=256(3,3), batch_normalize drop(0.5)weighted avg       0.95      0.93      0.94        30\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","4427a46f":"# Transfer Learning from a Deep Model","928f2ce7":"# Lendo o dataset"}}