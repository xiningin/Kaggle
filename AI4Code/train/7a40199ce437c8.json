{"cell_type":{"68578e9e":"code","c1f5f8a5":"code","6b74f0bf":"code","8829ffa3":"code","36b48538":"code","5e420270":"code","524c9b3d":"code","efcdb8e7":"code","bae5b978":"code","1ee964f4":"code","3078a74e":"code","115f4e60":"code","4b0f5b5a":"code","43928d35":"code","3cbca29b":"code","e6e41c10":"code","7dc22c1d":"code","9bac495e":"code","17392eba":"code","203d01e4":"code","e9ac5322":"code","80b1c640":"code","798e77af":"code","48e13695":"code","549dbaef":"code","3ae45abb":"code","3c9dd760":"code","f0a99e0e":"code","25d901d4":"code","43c231ff":"code","7fd886de":"code","e13263d0":"code","a98eeda8":"code","47e3d23e":"code","478d0176":"code","2cba99da":"code","26270b9e":"code","4dfd9795":"code","781ddf8f":"code","08b51f90":"code","5630676e":"code","4709d723":"code","6988f922":"code","0a8af09e":"code","4d131ea4":"code","cd3ae17f":"code","76c5af12":"code","7f39c02a":"code","914448de":"code","51207d35":"code","1791bb1e":"code","73ced1ac":"code","454426c6":"code","0757e7b6":"code","8a404053":"code","1ba6e02d":"code","1d04837e":"code","78ef4402":"code","f7d36ff4":"code","7bdef0ec":"code","588ec3e4":"code","b79874e8":"code","d305e05e":"code","c095011d":"code","09685b13":"code","3284ad6b":"code","105c331b":"code","b5129db2":"code","cc4ee398":"code","7dd44a24":"code","6e4f02ca":"code","9c29132e":"code","5e0bc527":"code","dcc3a8b9":"code","2cb4a886":"code","1db8be98":"code","9c993ba0":"code","935cd82f":"code","e3c03609":"code","ee908c12":"code","f5d59f76":"code","6b15cb1a":"code","b8d757ff":"code","c4f940c2":"code","c62c95b8":"code","d70f4eac":"code","3d311e6a":"code","8b4b8164":"code","f02a3162":"code","77929dbf":"code","2533e29e":"code","96854924":"code","aca3dba8":"code","8b18b1cc":"code","f7e07314":"code","37560832":"code","99252d68":"code","633e7c60":"code","91100e06":"code","4cfc6a94":"code","5b8f4904":"code","7b4ae395":"code","815c3daf":"code","c65def44":"code","be074721":"code","dd94e2b1":"code","44eb2fb9":"code","ef3fca22":"code","b3c628ad":"markdown","ff340038":"markdown","fc32c7df":"markdown","1c10cbdd":"markdown","80d710a1":"markdown","098a9106":"markdown","3080c1cb":"markdown","183da4c5":"markdown","10bcf391":"markdown","2d9748da":"markdown","f1ab8eb2":"markdown","689c7ee9":"markdown","d4352c49":"markdown","be686305":"markdown","dfa54e03":"markdown","36627ea0":"markdown","c3c766f7":"markdown","5fa1e047":"markdown","0c0382be":"markdown","4563df79":"markdown","cf3681b0":"markdown","a55ec83f":"markdown","67a463bf":"markdown","48db6fe4":"markdown","13270874":"markdown","9373c107":"markdown","e9097d43":"markdown","43e05244":"markdown","f80e7906":"markdown","fcdc08a1":"markdown","6e51cce0":"markdown","88cee7b3":"markdown","66a3ca9c":"markdown","4ab1da72":"markdown","ed1b665c":"markdown","0525f60f":"markdown","565634fb":"markdown","100989dd":"markdown","3b361d79":"markdown"},"source":{"68578e9e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_palette('Set2')\n\nimport datetime as dt\nimport dateutil\n\nimport importlib","c1f5f8a5":"df_dtype = {'airline':str,\n            'overall':'Int64',\n            'author':str,\n            'review_date':str,\n            'customer_review':str,\n            'aircraft':str,\n            'traveller_type':str,\n            'cabin':str,\n            'route':str,\n            'date_flown':str,\n            'seat_comfort':'Int64',\n            'cabin_service':'Int64',\n            'food_bev':'Int64',\n            'entertainment':'Int64',\n            'ground_service':'Int64',\n            'value_for_money':'Int64',\n            'recommended':str,\n           }","6b74f0bf":"df = pd.read_excel('..\/input\/skytrax-airline-reviews\/capstone_airline_reviews3.xlsx', dtype=df_dtype)\ndf.head()","8829ffa3":"df.shape","36b48538":"cols = df.columns.to_list()\nprint('Columns in the dataset:')\nprint(cols)","5e420270":"n_reviews = df.shape[0]\nprint('Number of customer reviews in the dataset: {:d}'.format(n_reviews))","524c9b3d":"df[['customer_review','route']].head()","efcdb8e7":"df.iloc[1,:]['customer_review']","bae5b978":"df.iloc[1,:]['route']","1ee964f4":"df_quick_fixes = df.copy()","3078a74e":"# Split the string by the first occurrence of '.' and get the second part of the string.\ndf_quick_fixes['customer_review_clean'] = df_quick_fixes['customer_review'].str.split('.',n=1,expand=True)[1]","115f4e60":"df_quick_fixes['customer_review_clean'].head()","4b0f5b5a":"df_quick_fixes.drop(columns=['customer_review'], inplace=True)","43928d35":"df_quick_fixes.head()","3cbca29b":"# For ease of access, we rename some columns\ndf_quick_fixes.rename(columns={'overall':'review_score', 'customer_review_clean':'review_text'}, inplace=True)","e6e41c10":"# Drop the author field as we don't need it.\ndf_quick_fixes.drop(columns=['author'], inplace=True)","7dc22c1d":"df_quick_fixes.head()","9bac495e":"# A copy so that the original one isn't manipulated\ndf_aug = df_quick_fixes.copy()","17392eba":"df_aug[['review_date','date_flown']].dtypes","203d01e4":"df_aug[['review_date','date_flown']].head()","e9ac5322":"# datetime timestamp\ndef get_review_date_timestamp(df_row):\n    \"\"\"\n    Return the timestamp of the review date.\n    \"\"\"\n    review_date_timestamp = None\n    if (str(df_row['review_date']) == 'nan'):\n        review_date_timestamp = None\n    else:\n        review_date_timestamp = dateutil.parser.parse(df_row['review_date'])\n    return review_date_timestamp","80b1c640":"df_aug['review_date_timestamp'] = df_aug.apply(lambda x: get_review_date_timestamp(x), axis=1)","798e77af":"df_aug[['review_date','review_date_timestamp']].head()","48e13695":"# Fetch the day\ndef get_review_date_day(df_row):\n    \"\"\"\n    Return the day of the review date.\n    \"\"\"\n    review_date_day = None\n    if (str(df_row['review_date_timestamp']) == 'NaT'):\n        review_date_day = None\n    else:\n        review_date_day = df_row['review_date_timestamp'].day\n    return review_date_day\n\n# Fetch the month\ndef get_review_date_month(df_row):\n    \"\"\"\n    Return the month of the review date.\n    \"\"\"\n    review_date_month = None\n    if (str(df_row['review_date_timestamp']) == 'NaT'):\n        review_date_month = None\n    else:\n        review_date_month = df_row['review_date_timestamp'].month\n    return review_date_month\n\n# Fetch the year\ndef get_review_date_year(df_row):\n    \"\"\"\n    Return the year of the review date.\n    \"\"\"\n    review_date_year = None\n    if (str(df_row['review_date_timestamp']) == 'NaT'):\n        review_date_year = None\n    else:\n        review_date_year = df_row['review_date_timestamp'].year\n    return review_date_year","549dbaef":"# Add other augmented features\ndf_aug['review_date_day'] = df_aug.apply(lambda x: get_review_date_day(x),axis=1)\ndf_aug['review_date_month'] = df_aug.apply(lambda x: get_review_date_month(x),axis=1)\ndf_aug['review_date_year'] = df_aug.apply(lambda x: get_review_date_year(x),axis=1)","3ae45abb":"df_aug[['review_date','review_date_timestamp','review_date_day','review_date_month','review_date_year']].head()","3c9dd760":"# Fetch the number of seconds the review date\ndef get_review_date_sec_epoch(df_row):\n    \"\"\"\n    Return the seconds since the epoch of the review date.\n    \"\"\"\n    review_date_sec_epoch = None\n    if (str(df_row['review_date_timestamp']) == 'NaT'):\n        review_date_sec_epoch = None\n    else:\n        review_date_sec_epoch = df_row['review_date_timestamp'].timestamp()\n    return review_date_sec_epoch","f0a99e0e":"df_aug['review_date_sec_epoch'] = df_aug.apply(lambda x: get_review_date_sec_epoch(x),axis=1)\ndf_aug[['review_date','review_date_timestamp','review_date_day','review_date_month','review_date_year','review_date_sec_epoch']].head()","25d901d4":"def get_date_flown_timestamp(df_row):\n    \"\"\"\n    Return the timestamp of the date flown.\n    \"\"\"\n    date_flown_timestamp = None\n    if (str(df_row['date_flown']) == 'nan'):\n        date_flown_timestamp = None\n    elif (isinstance(df_row['date_flown'],dt.datetime)):\n        date_flown_timestamp = df_row['date_flown']\n    else:\n        date_flown_timestamp = dateutil.parser.parse(df_row['date_flown'])\n    return date_flown_timestamp","43c231ff":"df_aug['date_flown_timestamp'] = df_aug.apply(lambda x: get_date_flown_timestamp(x), axis=1)","7fd886de":"df_aug[['date_flown','date_flown_timestamp']].head()","e13263d0":"def get_date_flown_day(df_row):\n    \"\"\"\n    Return the day of the date flown.\n    \"\"\"\n    date_flown_day = None\n    if (str(df_row['date_flown_timestamp']) == 'NaT'):\n        date_flown_day = None\n    else:\n        date_flown_day = df_row['date_flown_timestamp'].day\n    return date_flown_day\n\ndef get_date_flown_month(df_row):\n    \"\"\"\n    Return the month of the date flown.\n    \"\"\"\n    date_flown_month = None\n    if (str(df_row['date_flown_timestamp']) == 'NaT'):\n        date_flown_month = None\n    else:\n        date_flown_month = df_row['date_flown_timestamp'].month\n    return date_flown_month\n\ndef get_date_flown_year(df_row):\n    \"\"\"\n    Return the year of the date flown.\n    \"\"\"\n    date_flown_year = None\n    if (str(df_row['date_flown_timestamp']) == 'NaT'):\n        date_flown_year = None\n    else:\n        date_flown_year = df_row['date_flown_timestamp'].year\n    return date_flown_year","a98eeda8":"# Add some more features\ndf_aug['date_flown_day'] = df_aug.apply(lambda x: get_date_flown_day(x),axis=1)\ndf_aug['date_flown_month'] = df_aug.apply(lambda x: get_date_flown_month(x),axis=1)\ndf_aug['date_flown_year'] = df_aug.apply(lambda x: get_date_flown_year(x),axis=1)","47e3d23e":"def get_date_flown_sec_epoch(df_row):\n    \"\"\"\n    Return the seconds since the epoch of the date flown.\n    \"\"\"\n    date_flown_sec_epoch = None\n    if (str(df_row['date_flown_timestamp']) == 'NaT'):\n        date_flown_sec_epoch = None\n    else:\n        date_flown_sec_epoch = df_row['date_flown_timestamp'].timestamp()\n    return date_flown_sec_epoch","478d0176":"df_aug['date_flown_sec_epoch'] = df_aug.apply(lambda x: get_date_flown_sec_epoch(x),axis=1)\ndf_aug[['date_flown','date_flown_timestamp','date_flown_day','date_flown_month','date_flown_year','date_flown_sec_epoch']].head()","2cba99da":"def get_review_date_date_flown_distance_days(df_row):\n    \"\"\"\n    Return the time distance in days from the date flown to the review date.\n    \"\"\"\n    review_date_date_flown_distance_days = None\n    if (df_row['review_date_timestamp'] is None or df_row['date_flown_timestamp'] is None or df_row['review_date'] == pd.NaT or df_row['date_flown'] == pd.NaT or df_row['review_date_timestamp'] == np.NaN or df_row['date_flown_timestamp'] == np.NaN or str(df_row['review_date_timestamp']) == 'NaT' or str(df_row['date_flown_timestamp']) == 'NaT'):\n        review_date_date_flown_distance_days = None\n    else:\n        # print(df_row['review_date_timestamp'])\n        # print(df_row['date_flown_timestamp'])\n        # review_date_flown_distance = dt.datetime.fromtimestamp(df_row['review_date_timestamp'])-dt.datetime.fromtimestamp(df_row['date_flown_timestamp'])\n        review_date_date_flown_distance = df_row['review_date_timestamp']-df_row['date_flown_timestamp']\n        review_date_date_flown_distance_days = review_date_date_flown_distance.days\n    return review_date_date_flown_distance_days","26270b9e":"# Add the difference of days between the travel date and the review date\ndf_aug['review_date_date_flown_distance_days'] = df_aug.apply(lambda x: get_review_date_date_flown_distance_days(x),axis=1)\ndf_aug['review_date_date_flown_distance_days'].dtype","4dfd9795":"df_aug[['date_flown_timestamp','review_date_timestamp','review_date_date_flown_distance_days']].head()","781ddf8f":"# We will add another feature stating if the review is complete or not i.e. True if all fields are there and False otherwise\ndef get_completeness(df_row):\n    \"\"\"\n    Return true if the review contains all fields and false otherwise.\n    \"\"\"\n    is_complete = None\n    is_not_complete = df_row.isnull().any()\n    if (is_not_complete == True):\n        is_complete = False\n    else:\n        is_complete = True\n    return is_complete","08b51f90":"df_aug['is_complete'] = df_aug.apply(lambda x: get_completeness(x),axis=1)\ndf_aug['is_complete'].head()","5630676e":"# We will add 2 more features indicating the characters and words respectively.\ndef get_review_characters(df_row):\n    \"\"\"\n    Return the number of characters in the review.\n    \"\"\"\n    review_characters = None\n    if (str(df_row['review_text'])=='nan' or df_row['review_text'] is None):\n        review_characters = 0\n    else:\n        review_characters = len(df_row['review_text'])\n    return review_characters\n\ndef get_review_words(df_row):\n    \"\"\"\n    Return the number of words in the review.\n    \"\"\"\n    review_words = None\n    if (str(df_row['review_text'])=='nan' or df_row['review_text'] is None):\n        review_words = 0\n    else:\n        review_words = len(df_row['review_text'].split(' '))\n    return review_words","4709d723":"df_aug['review_characters'] = df_aug.apply(lambda x: get_review_characters(x),axis=1)\ndf_aug['review_words'] = df_aug.apply(lambda x: get_review_words(x),axis=1)","6988f922":"df_aug[['review_characters', 'review_words']].head()","0a8af09e":"df_aug['review_score'].unique()","4d131ea4":"df_aug['review_score'].describe()","cd3ae17f":"# We will classify the review score into one of the 3 categories: Positive, Neutral and Negative\ndef get_pos_neu_neg_review_score(df_row):\n    \"\"\"\n    Return:\n    - 'pos' if the review score is positive (>=7),\n    - 'neu' if the review score is neutral (5 or 6),\n    - 'neg' if the review score is negative (<=4).\n    \"\"\"\n    pos_neu_neg_review_score = None\n    if (df_row['review_score'] is None or str(df_row['review_score']) == '<NA>'):\n        pos_neu_neg_review_score = None\n    else:\n        if (df_row['review_score'] <= 4):\n            pos_neu_neg_review_score = 'neg'\n        elif (df_row['review_score'] > 4 and df_row['review_score'] <= 6):\n            pos_neu_neg_review_score = 'neu'\n        else:\n            pos_neu_neg_review_score = 'pos'\n    return pos_neu_neg_review_score","76c5af12":"df_aug['pos_neu_neg_review_score'] = df_aug.apply(lambda x: get_pos_neu_neg_review_score(x),axis=1)\ndf_aug[['review_score','pos_neu_neg_review_score']].head()","7f39c02a":"print('Number of unique values: {:d}'.format(df_aug['aircraft'].nunique()))\ndf_aug.groupby(['aircraft']).size().sort_values(ascending=False).reset_index(name='frequency')","914448de":"df_aug.drop(columns=['aircraft'],inplace=True)","51207d35":"def get_origin(df_row):\n    \"\"\"\n    Return the origin of the flight.\n    \"\"\"\n    origin = None\n    if str(df_row['route'])=='nan':\n        origin = None\n    else:\n        origin = df_row['route'].split(' to ')[0]\n    return origin\n\ndef get_destination(df_row):\n    \"\"\"\n    Return the destination of the flight.\n    \"\"\"\n    destination = None\n    if str(df_row['route'])=='nan':\n        destination = None\n    else:\n        # print(df_row['route'])\n        temp = df_row['route'].split(' to ')\n        # Standard case, there is a string before ' to ' and a string after ' to '.\n        if len(temp)==2:\n            destination = temp[1].split(' via ')[0]\n        # Special case, the second space in ' to ' is missing.\n        elif len(temp)==1:\n            temp2 = df_row['route'].split(' to')\n            if len(temp2)==2:\n                destination = temp2[1].split(' via ')[0]\n        else:\n            destination = None\n    return destination\n\ndef get_layover(df_row):\n    \"\"\"\n    Return the layover of the flight.\n    \"\"\"\n    layover = None\n    if str(df_row['route'])=='nan':\n        layover = None\n    else:\n        # print(df_row['route'])\n        temp = df_row['route'].split(' via ')\n        # There is no ' via ' in the route, no layover.\n        if len(temp) == 1:\n            layover = 'NA'\n        # There is a ' via ' in the route, layover available.\n        elif len(temp) == 2:\n            layover = temp[1]\n        else:\n            layover = None\n    return layover","1791bb1e":"df_aug['origin'] = df_aug.apply(lambda x: get_origin(x), axis=1)\ndf_aug['destination'] = df_aug.apply(lambda x: get_destination(x), axis=1)\ndf_aug['layover'] = df_aug.apply(lambda x: get_layover(x), axis=1)","73ced1ac":"# Add another feature if the flight has a layover\ndef has_layover(df_row):\n    \"\"\"\n    Return True if the review score corresponds to a flight with layover and False otherwise.\n    \"\"\"\n    layover = False\n    if df_row['layover'] is not None and str(df_row['layover']) != 'NA':\n        layover = True\n    return layover","454426c6":"df_aug['has_layover'] = df_aug.apply(lambda x: has_layover(x), axis=1)\ndf_aug[['route','origin','destination','layover','has_layover']].head()","0757e7b6":"df_aug.shape","8a404053":"df_aug[df_aug['has_layover']==False].shape","1ba6e02d":"df_aug[df_aug['has_layover']==True].shape","1d04837e":"df_aug['origin'].unique().tolist()","78ef4402":"df_aug.drop(columns=['route','origin','destination','layover'],inplace=True)","f7d36ff4":"df_aug['recommended'].unique()","7bdef0ec":"# Add a boolean feature indicating whether the flight is recommend by the user or not\ndef get_recommendation_bool(df_row):\n    \"\"\"\n    Return the Boolean value corresponding to the recommendation.\n    \"\"\"\n    rec_bool = None\n    if df_row['recommended'] == 'yes':\n        rec_bool = True\n    elif df_row['recommended'] == 'no':\n        rec_bool = False\n    else:\n        rec_bool = None\n    return rec_bool","588ec3e4":"df_aug['recommended_bool'] = df_aug.apply(lambda x: get_recommendation_bool(x), axis=1)\ndf_aug.drop(columns=['recommended'], inplace=True)\ndf_aug.rename(columns={'recommended_bool':'recommended'}, inplace=True)\ndf_aug.head()","b79874e8":"df_aug.drop(columns=['review_date','date_flown','review_date_timestamp','review_date_sec_epoch','date_flown_timestamp','date_flown_sec_epoch'], inplace=True)","d305e05e":"df_aug.head()","c095011d":"# Percentage of non-null values.\nfilling_rates = 100.*df_aug.count().sort_values(ascending=False)\/df_aug.shape[0]\nprint(filling_rates)","09685b13":"values_filling_rates = filling_rates.values\ntext_filling_rates = filling_rates.index.to_list()\nprint(text_filling_rates)","3284ad6b":"plt.figure(figsize=(6,6),dpi=100)\nsns.set(style=\"whitegrid\")\nax = sns.barplot(x=values_filling_rates, y=text_filling_rates,color=\"Red\")\nax.set(xlabel='Filling percentage (%)', ylabel='Feature')\nplt.tight_layout()\nplt.show()","105c331b":"df_without_na_1 = df_aug[df_aug['airline'].notna()].copy()\ndf_without_na_1.shape","b5129db2":"# Percentage of non-null values.\nfilling_rates_without_na_1 = 100.*df_without_na_1.count().sort_values(ascending=False)\/df_without_na_1.shape[0]\nprint(filling_rates_without_na_1)","cc4ee398":"values_filling_rates_without_na_1 = filling_rates_without_na_1.values\ntext_filling_rates_without_na_1 = filling_rates_without_na_1.index.to_list()\nprint(text_filling_rates)","7dd44a24":"plt.figure(figsize=(6,6),dpi=100)\nsns.set(style=\"whitegrid\")\nax = sns.barplot(x=values_filling_rates_without_na_1, y=text_filling_rates_without_na_1,color=\"Red\")\nax.set(xlabel='Filling percentage (%)', ylabel='Feature')\nplt.tight_layout()\nplt.show()","6e4f02ca":"df_without_na_2 = df_without_na_1.dropna(axis=0,how='any').copy()\ndf_without_na_2.shape","9c29132e":"n_reviews_without_na_2 = df_without_na_2.shape[0]\nprint('Number of customer reviews in the dataset, excluding all missing values: {:d}'.format(n_reviews_without_na_2))","5e0bc527":"f_reviews_without_na_2 = n_reviews_without_na_2\/n_reviews\nprint('Fraction of the original dataset: {:f}'.format(f_reviews_without_na_2))","dcc3a8b9":"df_for_training = df_without_na_2.copy()\ndf_for_training['is_complete'].unique()","2cb4a886":"df_for_training.drop(columns=['is_complete'], inplace=True)","1db8be98":"cols_for_training = df_for_training.columns.to_list()","9c993ba0":"feats_bool = ['recommended',\n              'has_layover']\nfeats_cat = ['airline',\n             'traveller_type',\n             'cabin','review_text',\n             'pos_neu_neg_review_score']\nfeats_num = [feat for feat in cols_for_training if feat not in feats_bool and feat not in feats_cat]","935cd82f":"print('Boolean features: \\n{}\\n'.format(feats_bool))\nprint('Categorical features: \\n{}\\n'.format(feats_cat))\nprint('Numerical features: \\n{}\\n'.format(feats_num))","e3c03609":"# Let's plot a correlation matrix among the features\ndef plot_cmap(matrix_values, figsize_w, figsize_h, filename):\n    \"\"\"\n    Plot a heatmap corresponding to the input values.\n    \"\"\"\n    if figsize_w is not None and figsize_h is not None:\n        plt.figure(figsize=(figsize_w,figsize_h))\n    else:\n        plt.figure()\n    cmap = sns.diverging_palette(240, 10, sep=20, as_cmap=True)\n    sns.heatmap(matrix_values, annot=True, fmt=\".2f\", cmap=cmap, vmin=-1, vmax=1)\n    plt.savefig(filename)\n    plt.show()\n    return cmap\ncorr_values = df_for_training[feats_num].dropna(axis=0,how='any').corr()\nplot_cmap(matrix_values=corr_values, \n          figsize_w=12, \n          figsize_h=12, \n          filename='.\/Corr.png')","ee908c12":"df_for_training_small = df_for_training.drop(columns=['review_words']).copy()","f5d59f76":"cols_for_training_small = df_for_training_small.columns.to_list()\nfeats_num_for_training_small = [feat for feat in cols_for_training_small if feat not in feats_bool and feat not in feats_cat]","6b15cb1a":"print('Boolean features: \\n{}\\n'.format(feats_bool))\nprint('Categorical features: \\n{}\\n'.format(feats_cat))\nprint('Numerical features: \\n{}\\n'.format(feats_num_for_training_small))","b8d757ff":"for col in df_for_training_small:\n    print('Column:', col)\n    print('Number of unique values:', df_for_training_small[col].nunique())\n    if (col != 'review_text' and col != 'review_date_date_flown_distance_days' and col != 'review_characters'):\n        print(df_for_training_small[col].unique())\n    print('')","c4f940c2":"for col in df_for_training_small:\n    print('Column:', col)\n    print('Number of unique values:', df_for_training_small[col].nunique())\n    if (col != 'review_text' and col != 'review_date_date_flown_distance_days' and col != 'review_characters'):\n        print(df_for_training_small.groupby([col]).size().sort_values(ascending=False))\n    print('')","c62c95b8":"def plot_bar(df,feat,filename,horizontal=False,figsize_w=None,figsize_h=None):\n    \"\"\"\n    Plot the bar of occurrences of each value of a given feature.\n    \"\"\"\n    print('Feature: {}'.format(feat))\n    keys_list = []\n    entries_list = []\n    keys = df[feat].unique()\n    entries_dict = {}\n    for key in keys:\n        entries_dict[key] = np.sum(df[feat]==key)\n    entries_dict_ordered = {k: v for k, v in sorted(entries_dict.items(), reverse=True, key=lambda item: item[1])}\n    keys_list = list(entries_dict_ordered.keys())\n    entries_list = list(entries_dict_ordered.values())\n    #print('Values of the feature:', keys_list)\n    #print('Frequencies of the feature:', entries_list)\n    if figsize_w is not None and figsize_h is not None:\n        plt.figure(figsize=(figsize_w,figsize_h))\n    else:\n        plt.figure(figsize=(6,6))\n    sns.set(style=\"whitegrid\")\n    if horizontal==True:\n        ax = sns.barplot(x=entries_list, y=keys_list,color=\"Red\")\n        ax.set(xlabel='Frequency', ylabel=feat)\n    else:\n        ax = sns.barplot(x=keys_list, y=entries_list,color=\"Red\")\n        ax.set(xlabel=feat, ylabel='Frequency')\n    plt.tight_layout()\n    plt.savefig(filename)\n    plt.show()\n    return\n","d70f4eac":"# Bar plot of occurrences of each value of each categorical feature.\nfor feat in feats_cat:\n    if (feat != 'review_text' and feat != 'origin_city' and feat != 'destination_city' and feat != 'layover_city'):\n        if (feat == 'airline'):\n            plot_bar(df=df_for_training_small,\n                              feat=feat,\n                              filename='.\/CatFeatureValues-'+feat+'.png',\n                              horizontal=True,\n                              figsize_w=15,\n                              figsize_h=15)\n        else:\n            plot_bar(df=df_for_training_small,\n                              feat=feat,\n                              filename='.\/CatFeatureValues-'+feat+'.png',\n                              horizontal=True,\n                              figsize_w=None,\n                              figsize_h=None)","3d311e6a":"df_same_review_text = df_for_training_small.groupby('review_text')['review_text'].count().reset_index(name='n_reviews').sort_values(by='n_reviews',ascending=False)\ndf_same_review_text[df_same_review_text['n_reviews']>1]","8b4b8164":"df_for_training_small[df_for_training_small['review_text']==df_same_review_text.loc[5845,:]['review_text']]\ndf_for_training_small[df_for_training_small['review_text']==df_same_review_text.loc[5845,:]['review_text']][feats_bool]\ndf_for_training_small[df_for_training_small['review_text']==df_same_review_text.loc[5845,:]['review_text']][feats_num_for_training_small]\ndf_for_training_small[df_for_training_small['review_text']==df_same_review_text.loc[5845,:]['review_text']][feats_cat]","f02a3162":"df_no_duplicates = df_for_training_small.drop_duplicates().copy()","77929dbf":"n_reviews_no_duplicates = df_no_duplicates.shape[0]\nprint('Number of customer reviews in the dataset, excluding all missing values and dropping duplicates: {:d}'.format(n_reviews_no_duplicates))\nf_reviews_no_duplicates = n_reviews_no_duplicates\/n_reviews\nprint('Fraction of the original dataset: {:f}'.format(f_reviews_no_duplicates))","2533e29e":"def plot_grouped_box(df,feat_x,feat_y,filename):\n    \"\"\"\n    Plot the distribution of feat_x for different values of feat_y.\n    \"\"\"\n    plt.figure(figsize=(6,6))\n    sns.set(style=\"whitegrid\")\n    ax = sns.catplot(data=df, x=feat_x, y=feat_y, kind='box', palette='Set2')\n    ax.set(xlabel=feat_x, ylabel=feat_y)\n    plt.tight_layout()\n    plt.savefig(filename)\n    plt.show()\n    return","96854924":"feat = 'review_score'\nplot_bar(df_no_duplicates,feat,'.\/Bar-'+feat+'.png')","aca3dba8":"feat_x = 'recommended'\nfeat_y = 'review_score'\nplot_grouped_box(df_no_duplicates,feat_x,feat_y,'.\/Box-'+feat_x+'-'+feat_y+'.png')","8b18b1cc":"feat_x = 'review_score'\nfeat_y = 'traveller_type'\nplot_grouped_box(df_no_duplicates,feat_x,feat_y,'.\/Box-'+feat_x+'-'+feat_y+'.png')","f7e07314":"feat_x = 'review_score'\nfeat_y = 'cabin'\nplot_grouped_box(df_no_duplicates,feat_x,feat_y,'.\/Box-'+feat_x+'-'+feat_y+'.png')","37560832":"feat = 'review_date_month'\nplot_bar(df_no_duplicates,feat,'.\/Bar-'+feat+'.png')","99252d68":"feat = 'review_date_year'\nplot_bar(df_no_duplicates,feat,'.\/Bar-'+feat+'.png')","633e7c60":"feat = 'date_flown_month'\nplot_bar(df_no_duplicates,feat,'.\/Bar-'+feat+'.png')","91100e06":"feat = 'date_flown_year'\nplot_bar(df_no_duplicates,feat,'.\/Bar-'+feat+'.png')","4cfc6a94":"def plot_hist(df,feat,bins,filename,x_min=None,x_max=None):\n    \"\"\"\n    Plot the histogram of occurrences of each value of a given feature.\n    \"\"\"\n    print('Feature: {}'.format(feat))\n    plt.figure(figsize=(6,6))\n    plt.hist(df[feat],bins=bins,color='red')\n    if x_min is not None and x_max is not None:\n        plt.xlim(x_min,x_max)\n    plt.xlabel(feat)\n    plt.ylabel('Entries \/ bin')\n    plt.savefig(filename)\n    plt.show()\n    return","5b8f4904":"feat = 'review_date_date_flown_distance_days'\nplot_hist(df=df_no_duplicates,\n          feat=feat,\n          bins=100,\n          x_min=-100,\n          x_max=400,\n          filename='.\/Hist-'+feat+'.png')","7b4ae395":"feat = 'review_characters'\nplot_hist(df=df_no_duplicates,\n          feat=feat,\n          bins=30,\n          filename='.\/Hist-'+feat+'.png')","815c3daf":"def plot_two_hists_comp_sns(df_1,df_2,label_1,label_2,feat,bins,title,x_label,y_label,filename):\n    \"\"\"\n    Plot two histograms of a given feature in two different datasets.\n    \"\"\"\n    plt.figure(figsize=(6,6))\n    sns.distplot(df_1[feat],hist=True,norm_hist=True,kde=False,label=label_1,bins=bins)\n    sns.distplot(df_2[feat],hist=True,norm_hist=True,kde=False,label=label_2,bins=bins)\n    plt.title(title)\n    plt.xlabel(x_label)\n    plt.ylabel(y_label)\n    plt.grid(False)\n    plt.legend(loc='best')\n    plt.savefig(filename)\n    plt.show()\n    return","c65def44":"df_recommended = df_no_duplicates[df_no_duplicates['recommended']==True].copy()\ndf_not_recommended = df_no_duplicates[df_no_duplicates['recommended']==False].copy()","be074721":"plot_two_hists_comp_sns(df_1=df_recommended,\n                        df_2=df_not_recommended,\n                        label_1='Recommended',\n                        label_2='Not recommended',\n                        feat='review_score',\n                        bins=10,\n                        title='Distribution of all customer reviews',\n                        x_label='Review score',\n                        y_label='Entries \/ bin',\n                        filename='.\/HistRecAndNotRec.png'\n                        )","dd94e2b1":"plot_two_hists_comp_sns(df_1=df_no_duplicates[df_no_duplicates['review_score']<=4],\n                        df_2=df_no_duplicates[df_no_duplicates['review_score']>=7],\n                        label_1='review score <= 4',\n                        label_2='review score >= 7',\n                        feat='review_characters',\n                        bins=30,\n                        title='Distribution of all customer reviews',\n                        x_label='Number of characters in the customer review',\n                        y_label='Entries \/ bin',\n                        filename='.\/HistReviewCharactersByReviewScore.png')","44eb2fb9":"# For the datatypes of the data we processed\ndf_no_duplicates_types = df_no_duplicates.dtypes.to_frame('dtypes').reset_index()","ef3fca22":"df_no_duplicates.to_csv('.\/PreprocessedDataLight.csv')\ndf_no_duplicates_types.to_csv('.\/PreprocessedDataLightTypes.csv')","b3c628ad":"## 10.5 Review Length","ff340038":"## 4.4 Manipulating the review scores","fc32c7df":"# About the Data\n\n![](https:\/\/cdn.britannica.com\/41\/123141-050-E6229449\/Air-New-Zealand-Boeing-747-400.jpg)\n\nThe first dataset is scraped from Skytrax (https:\/\/www.airlinequality.com), an international air transport rating organization based in the UK, whose mission is to improve the customer experience for airlines and airports across the world.\nThe dataset consists of individual reviews left by verified customers of most of the major airlines across the world.\n\nAn individual review contains part or all of the following information:\n\n* author\n* review date\n* route\n* date flown\n* type of traveller\n* service class\n* overall score of the travel experience\n* subscores related to specific aspects of the travel experience, in particular:\n    * food and beverage\n    * seat comfort\n    * cabin service\n    * ground service\n    * entertainment\n    * value for money\n* whether the customer would recommend the travel experience to other customers\n* comments in a free text format","1c10cbdd":"## 5.1 Iteration 1","80d710a1":"# 5. Handling NaNs","098a9106":"## 10.3 Flown Date","3080c1cb":"The preview of the dataset shows that the customer review field usually starts with a special character and a default text, followed by the same information displayed in the route field. We can strip this information away from the customer review field as it does not add any additional value.","183da4c5":"# 3. Preliminary fixes of the input data","10bcf391":"# 9. Check for duplicate review texts","2d9748da":"## 3.1 Cleaning the customer review text","f1ab8eb2":"## 4.5 Get separate columns for route, destination and layovers","689c7ee9":"# 7. Plotting the correlation matrix for the features","d4352c49":"## 10.7 Relationship between review score and length of the review text","be686305":"## 4.3 Review length","dfa54e03":"Here it seems that a passenger left multiple customer reviews, identical to each other. These duplicates must be dropped from the dataset before model training, as they do not add any useful information.","36627ea0":"Positive customer reviews tend to be shorter than negative customer reviews (see mean of the distribution of the number of characters in the customer review). The same trend is observed if using the number of words instead of the number of characters.","c3c766f7":"# 6. Features distributions into Boolean, Categorical and Numerical types","5fa1e047":"## 4.6 Handling the recommendation column","0c0382be":"Out of the total number of selected customer reviews (24563):\n\n* There are 81 distinct airlines, assuming the same airline does not have different abbreviations or ways to spell their name. The airlines are not equally represented in the dataset. The most represented airline is Cathay Pacific Airways and the least represented airline is QantasLink.\n* The review dates cover 31 days, 12 months and 5 years, from 2015 to 2019.\n* The dates flown cover 2 days, 12 months and 7 years, from 2013 to 2019. This means that passengers can submit a review several years after the date flown. Would it make sense to restrict the dataset to customer reviews submitted soon after the date flown? What could be the implications?\n* There are 22814 distinct review texts but 24563 selected customer reviews. This means that some reviews might be identical. This should be investigated more in detail.\n* The review score ranges from 1 to 10.\n* The review subscores range from 1 to 5.\n* There are 4 distinct traveller types (from the most represented to the least, solo leisure, couple leisure, business and family leisure).\n* There are 4 distinct cabins (from the most represented to the least, economy class, business class, premium economy and first class).","4563df79":"Now that we've added most of our engineered features, we can remove the ones we don't need like all the date columns.","cf3681b0":"## 10.6 Relation between recommendation and review score","a55ec83f":"## 10.4 Distance of days between date flown and review date","67a463bf":"# 2. Reading the data","48db6fe4":"## 3.2 Rename the columns and remove the irrelavant columns","13270874":"## 4.2 Check for completeness of review string","9373c107":"# 8. Unique value analysis for different categorical features","e9097d43":"# 10. Plotting the review scores ","43e05244":"We are down to 18% of the original data, because of the removal of the NaN values, but it is okay for us to train the model on clean data rather than NaN-filled messy data!","f80e7906":"## 5.2 Iteration 2","fcdc08a1":"# 1. Necessary Imports","6e51cce0":"# 4. Feature Engineering","88cee7b3":"## 10.1 Review Scores","66a3ca9c":"Now we're down to around 17% of the original data!! But it is all clean.","4ab1da72":"Few points of notice:\n\n* a positive correlation between the different types of review scores and subscores\n* a negative correlation between the length of the review text and the value of the different types of review scores and subscores\n* the similarity between using the number of characters and the number of words, from which we conclude that we can drop one of the two features","ed1b665c":"**Thanks for reading my work. Any comments and suggestions are more than welcome! You can also check the continuation of pre-processing in another notebook [here](https:\/\/www.kaggle.com\/divyansh22\/airline-review-data-preprocessing-pt-2-nlp) which makes the  work of this notebook as the base. A separate notebook for model training under work based on the output of the next notebook! If you liked the work, please show  the appreciation by upvoting!! Cheers!**","0525f60f":"# 11. Save the preprocessed dataset for further use.","565634fb":"The columns 'route', 'origin', 'destination' and 'layover' are ambiguous in the sense that these columns contain a mix of airport city, airport name and airport codes. So we need to remove these columns.","100989dd":"## 10.2 Review Date","3b361d79":"## 4.1 Handling the dates \n\nThe following features are added to the dataset:\n\n* review_date_timestamp\n* review_date_day\n* review_date_month\n* review_date_year\n* review_date_sec_epoch\n* date_flown_timestamp\n* date_flown_day\n* date_flown_month\n* date_flown_year\n* date_flown_sec_epoch\n* review_date_date_flown_distance_days"}}