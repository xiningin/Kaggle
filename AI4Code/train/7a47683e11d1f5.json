{"cell_type":{"aef5c23c":"code","5f89aca1":"code","c4c3fdcb":"code","481247aa":"code","8a182b2d":"code","a0012297":"code","9daadf3c":"code","74077711":"code","9f315d50":"code","198c622a":"code","7986a435":"code","347009bf":"code","280573f3":"code","4a8a8893":"code","475e8252":"code","75b4efd6":"code","209546d4":"code","5444d58f":"code","76a7d01d":"code","09d243e1":"code","f0871041":"code","4d6ea9c3":"code","53b622df":"code","f9c311d6":"code","c616b236":"code","8341f632":"code","29c809c1":"code","edfe3712":"code","0c62a435":"code","971e6885":"code","2c7e9535":"code","0b1c2ba3":"code","35193806":"code","49569062":"code","ce298d8d":"code","696a016b":"code","dfa66b51":"code","37d8c16f":"code","6608e42a":"code","3bfb5463":"code","5e517ecc":"code","ecde44ae":"code","94d8ad5e":"code","6800403f":"code","6433db20":"code","dbd9331b":"code","d51e441c":"code","d7b8e2be":"code","6ebdec91":"code","47e27b1b":"code","c19f129e":"code","c67f9264":"code","10f81849":"code","537b497a":"code","9b37fd8d":"code","920a6814":"code","bb0c8be1":"code","66c69b80":"code","86d9d46b":"code","6175b9cd":"code","65131d90":"code","ad8a59b1":"code","e3f69222":"code","f7174111":"code","d8b3a437":"code","f1be4771":"code","6932f207":"code","3cf2936a":"code","c3d6bf53":"code","07dedc1f":"code","494c25b0":"code","9cab8853":"code","585b7c1a":"code","004c5d9f":"code","4ee4b714":"code","9d5cbefc":"code","d1985c0f":"code","5eb3e793":"code","261295fb":"code","76a126d5":"code","eef80a90":"code","c43f603a":"code","c63055a8":"code","f4c68a7f":"code","a27452f1":"code","e1d96d15":"code","590a613b":"code","6ee12b3b":"code","2f6c34aa":"code","36e18dc7":"code","0c863cdd":"code","9e6bf290":"code","f491adf8":"code","ab2f93d8":"code","3e77429e":"code","f3ce703b":"code","308886df":"code","e222354d":"code","bd6bda11":"code","eff2e9da":"code","cdadb283":"code","17a6cfc1":"code","c564277f":"code","deb069ff":"code","c8386e62":"code","56cec72d":"code","7c96a48a":"code","24420ffc":"code","3437a528":"code","e2d23054":"code","08f0db76":"code","c4ce5b9a":"code","c66a1209":"code","60d8404e":"code","6fbace90":"code","3f4ec8e9":"code","0b6e0b80":"code","0c76f128":"code","81521076":"code","6fb23177":"code","cdadec19":"code","779c7155":"code","05204cb0":"code","88f0610b":"code","80728062":"code","08a19ad6":"code","872b7878":"code","242b587a":"code","47f75f3c":"code","24dd5b1b":"code","b07b27ea":"code","f038737f":"code","691350e1":"code","3fc899f1":"code","83f7edf9":"code","bdb8a201":"code","0dc05054":"code","43161f0a":"code","12ec5287":"code","dcfbcc7f":"code","7a7001aa":"markdown","844c0469":"markdown","69392279":"markdown","1257cc70":"markdown","892c0864":"markdown","c0ce4f9a":"markdown","22d8dc77":"markdown","854936d6":"markdown","793025a0":"markdown","1c4d004d":"markdown","25b0f793":"markdown","20cc9157":"markdown","3aef4c44":"markdown","846cd861":"markdown","c0b158e6":"markdown","c6201f74":"markdown","6586c855":"markdown","0ab8e968":"markdown","10d74857":"markdown","14d661ba":"markdown","58e2e42d":"markdown","9022e513":"markdown","56d0b55a":"markdown","6a463f63":"markdown","502a395a":"markdown","c49b2c77":"markdown","43518554":"markdown","dd7db0e7":"markdown","be99203b":"markdown","ed143ea5":"markdown","ccba9a69":"markdown","95797ccf":"markdown","d1ca6a64":"markdown","9912f34e":"markdown","d163291b":"markdown","7f11a611":"markdown","a0a9926f":"markdown","cc12d5c0":"markdown","ba81daad":"markdown","68891936":"markdown","0479484a":"markdown","c0c41b2a":"markdown","146cadae":"markdown","277d28ad":"markdown","87dc86af":"markdown","3abb6aba":"markdown","85584f82":"markdown","fbcee5f5":"markdown"},"source":{"aef5c23c":"import pandas as pd, numpy as np\nimport matplotlib.pyplot as plt, seaborn as sns\nimport math\nimport warnings\nwarnings.filterwarnings(\"ignore\")","5f89aca1":"application_record = pd.read_csv(\"\/kaggle\/input\/credit-card-approval-prediction\/application_record.csv\")\napplication_record.head()","c4c3fdcb":"application_record.shape","481247aa":"application_record.isnull().sum()","8a182b2d":"#Check for duplicate records\napplication_record[application_record.duplicated()]","a0012297":"#Gender proportion in applicants\ngender_val = application_record.CODE_GENDER.value_counts(normalize = True)\ngender_val","9daadf3c":"gender_val.plot.pie()\nplt.show()","74077711":"housing_val = application_record.NAME_HOUSING_TYPE.value_counts(normalize = True)\nhousing_val","9f315d50":"housing_val.plot.bar()\nplt.show()","198c622a":"#House Ownership percentage\nhousing_ownership_count = application_record.groupby(['CODE_GENDER','NAME_HOUSING_TYPE']).agg({'ID': 'count'})\nhousing_ownership_count","7986a435":"housing_ownership_percent = housing_ownership_count.groupby(level=0).apply(lambda x:100 * x \/ float(x.sum()))\nhousing_ownership_percent","347009bf":"housing_ownership_percent.sort_values(by = 'ID').plot.barh()\nplt.show()","280573f3":"#Education level and income relation\napplication_record.groupby([\"NAME_EDUCATION_TYPE\"]).AMT_INCOME_TOTAL.mean().sort_values(ascending=False).plot.barh()\nplt.show()","4a8a8893":"#Mean & Median of amount income \nprint(application_record.AMT_INCOME_TOTAL.mean())\nprint(application_record.AMT_INCOME_TOTAL.median())","475e8252":"credit_record = pd.read_csv(\"\/kaggle\/input\/credit-card-approval-prediction\/credit_record.csv\")\ncredit_record.head()","75b4efd6":"credit_record.shape","209546d4":"credit_record.info()","5444d58f":"credit_record.describe()","76a7d01d":"credit_record.STATUS.value_counts().plot.bar()\nplt.show()","09d243e1":"credit_record.MONTHS_BALANCE.value_counts().plot.hist()\nplt.show()","f0871041":"#Find out for how long each customer has had a card\ncredit_record['MONTHS_BALANCE'] = credit_record.MONTHS_BALANCE.apply(lambda x : x*(-1))\ncardholder_tenure = pd.DataFrame(credit_record.groupby('ID').agg({'MONTHS_BALANCE' : max}))\ncardholder_tenure.rename(columns = {'MONTHS_BALANCE':'CUST_FOR_MONTHS'},inplace = True)\ncardholder_tenure.head()","4d6ea9c3":"#Merging application_records & credit_record to get the number of months for which the customer has had a card.\ncust_data = pd.merge(application_record,cardholder_tenure,on = 'ID',how = 'inner')\ncust_data.head()","53b622df":"cust_data.shape","f9c311d6":"credit_record['STATUS'][credit_record[\"STATUS\"] == 'C'] = -1\ncredit_record['STATUS'][credit_record[\"STATUS\"] == 'X'] = -1\ncredit_record.head()","c616b236":"credit_record['STATUS'] = credit_record.STATUS.apply(lambda x : int(x))","8341f632":"credit_record.sort_values(by = 'STATUS',ascending = False,inplace = True)\ncredit_record.drop_duplicates(subset = ['ID'],inplace = True)\ncredit_record.shape","29c809c1":"credit_record['target'] = credit_record.STATUS.apply(lambda x : 0 if x>=2 else 1)\ncredit_record.drop(['STATUS','MONTHS_BALANCE'],axis = 1,inplace = True)\ncredit_record.head()","edfe3712":"credit_record.target.value_counts()","0c62a435":"#Merge DF to get final dataframe with all the columns\ncust_data = pd.merge(cust_data, credit_record, on = \"ID\", how = \"inner\")\ncust_data.shape","971e6885":"cust_data.head()","2c7e9535":"cust_data.columns","0b1c2ba3":"#Drop duplicated values\ncust_data.drop_duplicates(subset = ['CODE_GENDER', 'FLAG_OWN_CAR', 'FLAG_OWN_REALTY', 'CNT_CHILDREN',\n       'AMT_INCOME_TOTAL', 'NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE',\n       'NAME_FAMILY_STATUS', 'NAME_HOUSING_TYPE', 'DAYS_BIRTH',\n       'DAYS_EMPLOYED', 'FLAG_MOBIL', 'FLAG_WORK_PHONE', 'FLAG_PHONE',\n       'FLAG_EMAIL', 'OCCUPATION_TYPE', 'CNT_FAM_MEMBERS', 'CUST_FOR_MONTHS',\n       'target'],inplace = True)\ncust_data.shape","35193806":"pvt_tbl = pd.pivot_table(data = cust_data, index = ['OCCUPATION_TYPE'], columns = ['NAME_FAMILY_STATUS'], values = 'target', aggfunc = sum,  fill_value = 0)\nplt.figure(figsize=[10,10])\nhm = sns.heatmap(data = pvt_tbl, annot = True, fmt='.0f', linewidths=.2, center = 1600)\nbottom, top = hm.get_ylim()\nhm.set_ylim(bottom + 0.5, top - 0.5)\nplt.show()","49569062":"pvt_tbl = pd.pivot_table(data = cust_data, index = ['NAME_INCOME_TYPE'], columns = ['NAME_HOUSING_TYPE'], values = 'target', aggfunc = sum,  fill_value = 0)\nplt.figure(figsize=[10,6])\nhm = sns.heatmap(data = pvt_tbl, annot = True, fmt='.0f', linewidths=.2, center = 1600)\nbottom, top = hm.get_ylim()\nhm.set_ylim(bottom + 0.5, top - 0.5)\nplt.show()","ce298d8d":"cust_data.info()","696a016b":"cust_data.isnull().sum()","dfa66b51":"#Convert binary categorical columns to have integer value\ncust_data['CODE_GENDER'] = cust_data.CODE_GENDER.apply(lambda x : 0 if x == 'M' else 1)\ncust_data['FLAG_OWN_CAR'] = cust_data.FLAG_OWN_CAR.apply(lambda x : 0 if x == 'N' else 1)\ncust_data['FLAG_OWN_REALTY'] = cust_data.FLAG_OWN_REALTY.apply(lambda x : 0 if x == 'N' else 1)\ncust_data.head()","37d8c16f":"cust_data.describe()","6608e42a":"cust_data.FLAG_MOBIL.value_counts()","3bfb5463":"cust_data.drop('FLAG_MOBIL', axis = 1, inplace = True)\ncust_data.head()","5e517ecc":"#CNT_FAM_MEMBERS can not be float. Convert the column to int type\ncust_data['CNT_FAM_MEMBERS'] = cust_data['CNT_FAM_MEMBERS'].astype('int')\ncust_data.head()","ecde44ae":"def box_plot(df,col) :\n    sns.boxplot(data = df, y = col)\n    plt.show()","94d8ad5e":"boxplt_col = [\"DAYS_BIRTH\",\"DAYS_EMPLOYED\",\"AMT_INCOME_TOTAL\",\"CNT_FAM_MEMBERS\",\"CNT_CHILDREN\"]\nfor col in boxplt_col :\n    box_plot(cust_data,col)","6800403f":"#Checking outliers for DAYS_EMPLOYED column\ncust_data[cust_data['DAYS_EMPLOYED'] > 0]","6433db20":"cust_data[(cust_data['DAYS_EMPLOYED'] > 0) & (cust_data.NAME_INCOME_TYPE == 'Pensioner')].shape","dbd9331b":"#Convert the Integer columns to positive integers\ndef convert_to_positive(df,column) :\n    df[column] = df[column].apply(lambda x : x*-1)\n    return df","d51e441c":"continuous_variable = ['DAYS_BIRTH','DAYS_EMPLOYED']\nfor c in continuous_variable :\n    cust_data = convert_to_positive(cust_data,c)\ncust_data.head()","d7b8e2be":"#Convert DAYS to YEARS\ncust_data['EMP_YEARS'] = cust_data.DAYS_EMPLOYED\/365\ncust_data['AGE'] = cust_data.DAYS_BIRTH\/365\ncust_data.drop([\"DAYS_BIRTH\",\"DAYS_EMPLOYED\"],axis = 1,inplace = True)\ncust_data.head()","6ebdec91":"cust_data['EMP_YEARS'] = cust_data.EMP_YEARS.apply(lambda x : -1 if x<0 else x)","47e27b1b":"def bad_cust_proportion(col) :\n    bad_prop_cnt = cust_data.groupby([col,'target']).agg({'ID': 'count'})\n    bad_prop_percent = bad_prop_cnt.groupby(level=0).apply(lambda x:100 * x \/ float(x.sum()))\n    return bad_prop_percent","c19f129e":"bad_cust_proportion('FLAG_OWN_CAR')","c67f9264":"bad_cust_proportion('NAME_HOUSING_TYPE')","10f81849":"bad_cust_proportion('NAME_FAMILY_STATUS')","537b497a":"cust_data['OCCUPATION_TYPE'] = cust_data.OCCUPATION_TYPE.apply(lambda x : 'UNEMPLOYED' if pd.isnull(x) else x)\ncust_data.OCCUPATION_TYPE.value_counts()","9b37fd8d":"def calc_woe_iv(col) :\n    df = pd.DataFrame(columns = ['values','total','good','bad','event_rate','non_event_rate','per_total_events','per_total_non_events','WOE','IV'])\n    df['values'] = cust_data[col].unique()\n    df.set_index('values',inplace = True)\n    \n    values = cust_data[col].unique()\n    total_dict = dict(cust_data.groupby(col).size())\n    col_target_dict = dict(cust_data.groupby([col,'target']).size())\n    target_count = dict(cust_data.groupby(['target']).size())\n    \n    for value in values :\n        df.loc[value]['total'] = total_dict[value]\n        if (value,1) in col_target_dict:\n            df.loc[value]['good'] = col_target_dict[(value,1)]\n        else :\n            df.loc[value]['good'] = 0\n        \n        if (value,0) in col_target_dict:\n            df.loc[value]['bad'] = col_target_dict[(value,0)]\n        else :\n            df.loc[value]['bad'] = 0\n            \n        if df.loc[value]['bad'] == 0 :\n            df = df.drop([value])\n        \n    df['event_rate'] = df['good']\/df['total']\n    df['non_event_rate'] = df['bad']\/df['total']\n    \n    df['per_total_events'] = df['good']\/target_count[1]\n    df['per_total_non_events'] = df['bad']\/target_count[0]\n    \n    df['WOE'] = np.log(df.per_total_events.astype('float64')\/df.per_total_non_events.astype('float64'))\n    df['IV'] = (df['per_total_events'] - df['per_total_non_events']) * df['WOE']\n    \n    return df    ","920a6814":"iv_values = pd.DataFrame(columns = ['col_name','iv_value'])","bb0c8be1":"iv_values['col_name'] = cust_data.columns\niv_values.set_index(['col_name'],inplace = True)\niv_values.drop(['ID','target'],inplace = True)\niv_values","66c69b80":"CODE_GENDER_df = calc_woe_iv('CODE_GENDER')\niv_values.loc['CODE_GENDER'] = CODE_GENDER_df.IV.sum()\nprint(iv_values.loc['CODE_GENDER'])\nCODE_GENDER_df","86d9d46b":"FLAG_OWN_CAR_df = calc_woe_iv('FLAG_OWN_CAR')\niv_values.loc['FLAG_OWN_CAR'] = FLAG_OWN_CAR_df.IV.sum()\nprint(iv_values.loc['FLAG_OWN_CAR'])\nFLAG_OWN_CAR_df","6175b9cd":"FLAG_OWN_REALTY_df = calc_woe_iv('FLAG_OWN_REALTY')\niv_values.loc['FLAG_OWN_REALTY'] = FLAG_OWN_REALTY_df.IV.sum()\nprint(iv_values.loc['FLAG_OWN_REALTY'])\nFLAG_OWN_REALTY_df","65131d90":"FLAG_WORK_PHONE_df = calc_woe_iv('FLAG_WORK_PHONE')\niv_values.loc['FLAG_WORK_PHONE'] = FLAG_WORK_PHONE_df.IV.sum()\nprint(iv_values.loc['FLAG_WORK_PHONE'])\nFLAG_WORK_PHONE_df","ad8a59b1":"FLAG_PHONE_df = calc_woe_iv('FLAG_PHONE')\niv_values.loc['FLAG_PHONE'] = FLAG_PHONE_df.IV.sum()\nprint(iv_values.loc['FLAG_PHONE'])\nFLAG_PHONE_df","e3f69222":"FLAG_EMAIL_df = calc_woe_iv('FLAG_EMAIL')\niv_values.loc['FLAG_EMAIL'] = FLAG_EMAIL_df.IV.sum()\nprint(iv_values.loc['FLAG_EMAIL'])\nFLAG_EMAIL_df","f7174111":"NAME_INCOME_TYPE_df = calc_woe_iv('NAME_INCOME_TYPE')\niv_values.loc['NAME_INCOME_TYPE'] = NAME_INCOME_TYPE_df.IV.sum()\nprint(iv_values.loc['NAME_INCOME_TYPE'])\nNAME_INCOME_TYPE_df","d8b3a437":"NAME_EDUCATION_TYPE_df = calc_woe_iv('NAME_EDUCATION_TYPE')\niv_values.loc['NAME_EDUCATION_TYPE'] = NAME_EDUCATION_TYPE_df.IV.sum()\nprint(iv_values.loc['NAME_EDUCATION_TYPE'])\nNAME_EDUCATION_TYPE_df","f1be4771":"NAME_FAMILY_STATUS_df = calc_woe_iv('NAME_FAMILY_STATUS')\niv_values.loc['NAME_FAMILY_STATUS'] = NAME_FAMILY_STATUS_df.IV.sum()\nprint(iv_values.loc['NAME_FAMILY_STATUS'])\nNAME_FAMILY_STATUS_df","6932f207":"NAME_HOUSING_TYPE_df = calc_woe_iv('NAME_HOUSING_TYPE')\niv_values.loc['NAME_HOUSING_TYPE'] = NAME_HOUSING_TYPE_df.IV.sum()\nprint(iv_values.loc['NAME_HOUSING_TYPE'])\nNAME_HOUSING_TYPE_df","3cf2936a":"OCCUPATION_TYPE_df = calc_woe_iv('OCCUPATION_TYPE')\niv_values.loc['OCCUPATION_TYPE'] = OCCUPATION_TYPE_df.IV.sum()\nprint(iv_values.loc['OCCUPATION_TYPE'])\nOCCUPATION_TYPE_df","c3d6bf53":"cust_data.describe()","07dedc1f":"cust_data['cnt_child_category'] = cust_data.CNT_CHILDREN.apply(lambda x : '1+' if x>= 2 else str(x))","494c25b0":"CNT_CHILDREN_df = calc_woe_iv('cnt_child_category')\niv_values.loc['CNT_CHILDREN'] = CNT_CHILDREN_df.IV.sum()\nprint(iv_values.loc['CNT_CHILDREN'])\nCNT_CHILDREN_df","9cab8853":"bins = [0, 70000, 100000, 150000, 200000, 250000, 300000, 350000, 1600000]\nlabels = ['70000', '100000', '150000', '200000', '250000', '300000', '350000', '1600000']\ncust_data['income_bin'] = pd.cut(cust_data['AMT_INCOME_TOTAL'], bins = bins, labels = labels)\ncust_data.head()","585b7c1a":"cust_data.income_bin.value_counts()","004c5d9f":"AMT_INCOME_TOTAL_df = calc_woe_iv('income_bin')\niv_values.loc['AMT_INCOME_TOTAL'] = AMT_INCOME_TOTAL_df.IV.sum()\nprint(iv_values.loc['AMT_INCOME_TOTAL'])\nAMT_INCOME_TOTAL_df.sort_values(by = 'WOE',inplace = True)\nAMT_INCOME_TOTAL_df","4ee4b714":"cust_data.CNT_FAM_MEMBERS.value_counts()","9d5cbefc":"cust_data['cnt_family_bin'] = cust_data.CNT_FAM_MEMBERS.apply(lambda x : '3+' if x>= 4 else str(x))","d1985c0f":"CNT_FAM_MEMBERS_df = calc_woe_iv('cnt_family_bin')\niv_values.loc['CNT_FAM_MEMBERS'] = CNT_FAM_MEMBERS_df.IV.sum()\nprint(iv_values.loc['CNT_FAM_MEMBERS'])\nCNT_FAM_MEMBERS_df.sort_values(by = 'WOE',inplace = True)\nCNT_FAM_MEMBERS_df","5eb3e793":"bins = [-1, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60]\nlabels = ['0.5','1','1.5','2','2.5','3','3.5','4','4.5','5']\ncust_data['months_bin'] = pd.cut(cust_data['CUST_FOR_MONTHS'], bins = bins,labels = labels)\ncust_data.head()","261295fb":"cust_data.months_bin.value_counts()","76a126d5":"CUST_FOR_MONTHS_df = calc_woe_iv('months_bin')\niv_values.loc['CUST_FOR_MONTHS'] = CUST_FOR_MONTHS_df.IV.sum()\nprint(iv_values.loc['CUST_FOR_MONTHS'])\nCUST_FOR_MONTHS_df.sort_values(by = 'WOE',inplace = True)\nCUST_FOR_MONTHS_df","eef80a90":"bins = [-2, -1,  5, 10, 15,  20, 50]\nlabels = ['retired','5','10','15','20','20+']\ncust_data['emp_years_bin'] = pd.cut(cust_data['EMP_YEARS'], bins = bins, labels = labels)\ncust_data.head()","c43f603a":"cust_data.emp_years_bin.value_counts()","c63055a8":"EMP_YEARS_df = calc_woe_iv('emp_years_bin')\niv_values.loc['EMP_YEARS'] = EMP_YEARS_df.IV.sum()\nprint(iv_values.loc['EMP_YEARS'])\nEMP_YEARS_df.sort_values(by = 'WOE',inplace = True)\nEMP_YEARS_df","f4c68a7f":"bins = [19, 27, 30, 35, 40, 45, 50, 55, 62, 70]\nlabels = ['27','30','35','40','45','50','55','62','70']\ncust_data['age_bin'] = pd.cut(cust_data['AGE'], bins = bins,labels = labels)\ncust_data.head()","a27452f1":"cust_data.age_bin.value_counts()","e1d96d15":"AGE_df = calc_woe_iv('age_bin')\niv_values.loc['AGE'] = AGE_df.IV.sum()\nprint(iv_values.loc['AGE'])\nAGE_df.sort_values(by = 'WOE',inplace = True)\nAGE_df","590a613b":"iv_values.sort_values(by = 'iv_value',ascending=False,inplace = True)\niv_values","6ee12b3b":"cust_data.columns","2f6c34aa":"cust_data_train = cust_data[[ 'CODE_GENDER', 'FLAG_OWN_CAR', 'FLAG_OWN_REALTY','NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE',\n                             'NAME_FAMILY_STATUS', 'NAME_HOUSING_TYPE', 'FLAG_WORK_PHONE', 'FLAG_PHONE', 'FLAG_EMAIL',\n                             'OCCUPATION_TYPE', 'CUST_FOR_MONTHS', 'cnt_child_category', 'income_bin', 'cnt_family_bin',\n                             'months_bin', 'emp_years_bin', 'age_bin', 'target']]","36e18dc7":"def creatingDummyVariables(df, columns) :\n    # Creating a dummy variable for some of the categorical variables and dropping the first one.\n    dummy1 = pd.get_dummies(df[columns], drop_first=True)\n    \n    # Adding the results to the master dataframe\n    df1 = pd.concat([df, dummy1], axis=1)\n    \n    #Dropping the initial column\n    df1.drop(columns, axis = 1, inplace = True)\n    \n    return df1","0c863cdd":"cust_data_train = creatingDummyVariables(cust_data_train, ['NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE', 'NAME_FAMILY_STATUS','NAME_HOUSING_TYPE',\n                      'OCCUPATION_TYPE', 'cnt_child_category','income_bin', 'cnt_family_bin', 'months_bin',\n                      'emp_years_bin', 'age_bin'])","9e6bf290":"cust_data_train.head()","f491adf8":"from sklearn.model_selection import train_test_split\nimport statsmodels.api as sm\nfrom sklearn import metrics","ab2f93d8":"# Logistic regression model \ndef logisticReg (df) :\n    # Putting feature variable to X\n    X = df.drop(['target'], axis=1)\n    y = df['target']\n    \n    # Splitting the data into train and test\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, test_size=0.3)\n    \n    logm1 = sm.GLM(y_train,(sm.add_constant(X_train)), family = sm.families.Binomial())\n    res = logm1.fit()\n    return res","3e77429e":"res = logisticReg(cust_data_train)\nres.summary()","f3ce703b":"iv_values","308886df":"cust_data_train = cust_data[[ 'CODE_GENDER', 'FLAG_OWN_CAR', 'FLAG_OWN_REALTY','NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE',\n                             'NAME_FAMILY_STATUS', 'NAME_HOUSING_TYPE', 'FLAG_WORK_PHONE','OCCUPATION_TYPE',\n                             'CUST_FOR_MONTHS', 'income_bin', 'cnt_family_bin', 'months_bin', 'emp_years_bin', 'age_bin',\n                             'target']]","e222354d":"cust_data_train = creatingDummyVariables(cust_data_train, ['NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE', 'NAME_FAMILY_STATUS',\n                            'NAME_HOUSING_TYPE', 'OCCUPATION_TYPE', 'income_bin', 'cnt_family_bin',\n                            'months_bin', 'emp_years_bin', 'age_bin'])","bd6bda11":"res = logisticReg(cust_data_train)\nres.summary()","eff2e9da":"cust_data_train = cust_data[['FLAG_OWN_REALTY','NAME_INCOME_TYPE','NAME_FAMILY_STATUS', 'NAME_HOUSING_TYPE',\n                             'OCCUPATION_TYPE','CUST_FOR_MONTHS', 'months_bin', 'emp_years_bin', 'age_bin','target']]","cdadb283":"cust_data_train = creatingDummyVariables(cust_data_train, ['NAME_INCOME_TYPE', 'NAME_FAMILY_STATUS', 'NAME_HOUSING_TYPE', \n                            'OCCUPATION_TYPE', 'months_bin', 'emp_years_bin', 'age_bin'])","17a6cfc1":"res = logisticReg(cust_data_train)\nres.summary()","c564277f":"cust_data_train = cust_data[['FLAG_OWN_REALTY','NAME_INCOME_TYPE','NAME_FAMILY_STATUS', 'NAME_HOUSING_TYPE',\n                             'OCCUPATION_TYPE','CUST_FOR_MONTHS', 'months_bin', 'emp_years_bin', 'age_bin','target']]","deb069ff":"cust_data_train = creatingDummyVariables(cust_data_train, ['NAME_INCOME_TYPE', 'NAME_FAMILY_STATUS', 'NAME_HOUSING_TYPE', \n                            'OCCUPATION_TYPE', 'months_bin', 'emp_years_bin', 'age_bin'])","c8386e62":"# Putting feature variable to X\nX = cust_data_train.drop(['target'], axis=1)\ny = cust_data_train['target']\n    \n# Splitting the data into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, test_size=0.3)\n\nX_train_sm = sm.add_constant(X_train)\nlogm1 = sm.GLM(y_train, X_train_sm, family = sm.families.Binomial())\nres = logm1.fit()\nres.summary()","56cec72d":"y_train_pred = res.predict(X_train_sm).values.reshape(-1)\n\ny_train_pred_final = pd.DataFrame({'target':y_train.values, 'target_Prob':y_train_pred})\ny_train_pred_final['CustID'] = y_train.index\n\ny_train_pred_final.head()","7c96a48a":"def draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return None","24420ffc":"fpr, tpr, thresholds = metrics.roc_curve( y_train_pred_final.target, y_train_pred_final.target_Prob, drop_intermediate = False )","3437a528":"draw_roc(y_train_pred_final.target, y_train_pred_final.target_Prob)","e2d23054":"X_test_sm = sm.add_constant(X_test)\ny_test_pred = res.predict(X_test_sm)","08f0db76":"y_pred_1 = pd.DataFrame(y_test_pred)\ny_test_df = pd.DataFrame(y_test)\ny_test_df['ID'] = y_test_df.index\ny_pred_1.reset_index(drop=True, inplace=True)\ny_test_df.reset_index(drop=True, inplace=True)\ny_pred_final = pd.concat([y_test_df, y_pred_1],axis=1)\ny_pred_final.head()","c4ce5b9a":"# Renaming the column \ny_pred_final= y_pred_final.rename(columns={ 0 : 'Predicted_prob'})\n# Rearranging the columns\ny_pred_final = y_pred_final.reindex(['ID','target','Predicted_prob'], axis=1)\ny_pred_final.head()","c66a1209":"y_pred_final['final_predicted'] = y_pred_final.Predicted_prob.map(lambda x: 1 if x > 0.8 else 0)","60d8404e":"# Let's check the overall accuracy.\nmetrics.accuracy_score(y_pred_final.target, y_pred_final.final_predicted)","6fbace90":"confusionMatrix = metrics.confusion_matrix(y_pred_final.target, y_pred_final.final_predicted )\nconfusionMatrix","3f4ec8e9":"TP = confusionMatrix[1,1] # true positive \nTN = confusionMatrix[0,0] # true negatives\nFP = confusionMatrix[0,1] # false positives\nFN = confusionMatrix[1,0] # false negatives","0b6e0b80":"# Let's see the sensitivity of our logistic regression model\nTP \/ float(TP+FN)","0c76f128":"# Let us calculate specificity\nTN \/ float(TN+FP)","81521076":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV","6fb23177":"cust_data_train = cust_data[['ID', 'CODE_GENDER', 'FLAG_OWN_CAR', 'FLAG_OWN_REALTY', 'CNT_CHILDREN', 'AMT_INCOME_TOTAL',\n        'NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE', 'NAME_FAMILY_STATUS', 'NAME_HOUSING_TYPE', 'FLAG_WORK_PHONE',\n       'FLAG_PHONE', 'FLAG_EMAIL', 'OCCUPATION_TYPE', 'CNT_FAM_MEMBERS', 'CUST_FOR_MONTHS', 'EMP_YEARS', 'AGE', 'target']]","cdadec19":"cust_data_train = creatingDummyVariables(cust_data_train, ['NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE', 'NAME_FAMILY_STATUS',\n                            'NAME_HOUSING_TYPE', 'OCCUPATION_TYPE'])","779c7155":"x = cust_data_train.drop('target',1)\ny = cust_data_train['target']","05204cb0":"# Split the data into training and testing data\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.3)","88f0610b":"# Create a Decision Tree\ndt_basic = DecisionTreeClassifier(max_depth=10)","80728062":"# Fit the training data\ndt_basic.fit(x_train,y_train)","08a19ad6":"# Predict based on test data\ny_preds = dt_basic.predict(x_test)","872b7878":"# Calculate Accuracy\naccuracy_value = metrics.accuracy_score(y_test,y_preds)\naccuracy_value","242b587a":"# Create and print confusion matrix\nconfusion_matrix(y_test,y_preds)","47f75f3c":"print(classification_report(y_test,y_preds))","24dd5b1b":"# Calculate the number of nodes in the tree\ndt_basic.tree_.node_count","b07b27ea":"# Create a Parameter grid\nparam_grid = {\n    'max_depth' : range(5,20,5),\n    'min_samples_leaf' : range(50,210,50),\n    'min_samples_split' : range(50,210,50),\n    'criterion' : ['gini','entropy'] \n}","f038737f":"n_folds = 5","691350e1":"dtree = DecisionTreeClassifier()\ngrid = GridSearchCV(dtree, param_grid, cv = n_folds, n_jobs = -1,return_train_score=True)","3fc899f1":"grid.fit(x_train,y_train)","83f7edf9":"cv_result = pd.DataFrame(grid.cv_results_)\ncv_result.head()","bdb8a201":"grid.best_params_","0dc05054":"grid.best_score_","43161f0a":"best_grid = grid.best_estimator_\nbest_grid","12ec5287":"best_grid.fit(x_train,y_train)","dcfbcc7f":"best_grid.score(x_test,y_test)","7a7001aa":"#### a. NAME_INCOME_TYPE ","844c0469":"#### b.FLAG_OWN_CAR","69392279":"## Logistic Regression","1257cc70":"Housing ownership percentage for females is 90.89% while for males it is 87.58%. Females applicants have higher house ownership percentage.","892c0864":"### Model building","c0ce4f9a":"#### b. NAME_EDUCATION_TYPE","22d8dc77":"Since all the bins should have atleast 5% of the total observations, therefore dividing 'CNT_CHILDREN' into [0,1,1+] bins","854936d6":"## Decision Tree","793025a0":"#### e. FLAG_PHONE","1c4d004d":"## Application record EDA ","25b0f793":"#### c. FLAG_OWN_REALTY","20cc9157":"#### c. Removing all columns with IV_value < 0.02","3aef4c44":"### Hyperparameter tuning for Decision Trees","846cd861":"Mean of income = 87524.29 Median of income = 160780.50","c0b158e6":"#### e. OCCUPATION_TYPE","c6201f74":"#### d. NAME_HOUSING_TYPE","6586c855":"## Credit record EDA ","0ab8e968":"#### e. EMP_YEARS","10d74857":"### Run model on test data","14d661ba":"### Data preparation for Model training ","58e2e42d":"#### Dummy features for categorical values ","9022e513":"### 2. Categorical Variables ","56d0b55a":"#### b. AMT_INCOME_TOTAL","6a463f63":"The average income increases with the education level.","502a395a":"#### a. CNT_CHILDREN","c49b2c77":"#### f. AGE","43518554":"#### d. CUST_FOR_MONTHS","dd7db0e7":"Proportion of bad customers for people who own a car is less than those who don't own a car","be99203b":"Replacing all the EMP_YEARS for all pensioners to be -1.","ed143ea5":"### 1. Binary Variable ","ccba9a69":"#### c. CNT_FAM_MEMBERS","95797ccf":"People living on rent don't have the highest proportion of bad customers. People having 'Office apartment' have the highest proportion of bad customers","d1ca6a64":"## Calculating WOE & IV ","9912f34e":"Around 67.14% of the applicants are female","d163291b":"#### f. FLAG_EMAIL","7f11a611":"#### d. FLAG_WORK_PHONE","a0a9926f":"All the customers with a positive 'DAYS_EMPLOYED' are pensioners and represent a valid data.","cc12d5c0":"Single customers have a higher proportion of bad customers as compared to married customers","ba81daad":"#### b. Removing all columns with IV_value < 0.015","68891936":"#### a. Removing all the columns with IV_value < 0.005","0479484a":"### 3. Continuous Variables","c0c41b2a":"### Merging Credit & Application Data ","146cadae":"#### c. NAME_FAMILY_STATUS","277d28ad":"Since all the rows have FLAG_MOBIL as 1 so there is no variation available for this column and hence it would add any value to the model. Hence it can be dropped","87dc86af":"### Doing feature selection based on IV values","3abb6aba":"#### a. CODE_GENDER","85584f82":"#### Assuming that a person is consider a defaulter to bank if he has a payment withstanding for more than 60 days. So all the customers having STATUS >= 2 will be considered as defaulters or bad customers ","fbcee5f5":"### Plotting ROC "}}