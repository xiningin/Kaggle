{"cell_type":{"ece7bff0":"code","6c661700":"code","612aeb63":"code","3f5174ec":"code","b86bbccd":"code","20768bbf":"code","5f80570c":"code","bef4b926":"code","76c3e7d6":"code","88835ead":"code","e1996012":"code","91b59afd":"markdown","175c2595":"markdown"},"source":{"ece7bff0":"import pandas as pd \n\nu_cols =  ['user_id', 'age', 'sex', 'occupation', 'zip_code']\nusers = pd.read_csv('..\/input\/ml-100k\/u.user', sep='|', names=u_cols,\nencoding='latin-1')\n\nn_users = users.shape[0]\nprint('Number of users:', n_users)\n","6c661700":"r_cols = ['user_id', 'movie_id', 'rating', 'unix_timestamp']\n\nratings_base = pd.read_csv('..\/input\/ml-100k\/ua.base', sep='\\t', names=r_cols, encoding='latin-1')\nratings_test = pd.read_csv('..\/input\/ml-100k\/ua.test', sep='\\t', names=r_cols, encoding='latin-1')\n\nrate_train = ratings_base.as_matrix()\nrate_test = ratings_test.as_matrix()\nprint(ratings_base[0:20])\n\nprint('Number of traing rates:', rate_train.shape[0])\nprint('Number of test rates:', rate_test.shape[0])","612aeb63":"i_cols = ['movie id', 'movie title' ,'release date','video release date', 'IMDb URL', 'unknown', 'Action', 'Adventure',\n 'Animation', 'Children\\'s', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Fantasy',\n 'Film-Noir', 'Horror', 'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western']\n\nitems = pd.read_csv('..\/input\/ml-100k\/u.item', sep='|', names=i_cols,encoding='latin-1')\n\nn_items = items.shape[0]\nprint(\"Number of items:\",n_items)","3f5174ec":"X0 = items.as_matrix()\n#Th\u1ec3 lo\u1ea1i phim \u1edf 19 ph\u1ea7n t\u1eed cu\u1ed1i X_train_counts l\u00e0 ma tr\u1eadn 1682x19 1682 b\u1ed9 phim v\u00e0 19 th\u1ec3 lo\u1ea1i phim\nX_train_counts = X0[:, -19:]\nprint(X_train_counts.shape)","b86bbccd":"from sklearn.feature_extraction.text import TfidfTransformer\ntransformer = TfidfTransformer(smooth_idf=True, norm ='l2')\ntfidf = transformer.fit_transform(X_train_counts.tolist()).toarray()\nprint(X_train_counts[0])\n#M\u1ed7i h\u00e0ng l\u00e0 c\u00e1c profile c\u1ee7a c\u00e1c item (c\u00e1c b\u1ed9 phim)\nprint(tfidf[0])","20768bbf":"import numpy as np\ndef get_items_rated_by_user(rate_matrix, user_id):\n    \"\"\"\n    return (item_ids, scores)\n    \"\"\"\n    y = rate_matrix[:,0] # users\n    # L\u1ea5y ch\u1ec9 s\u1ed1 \u0111\u00e1nh gi\u00e1 c\u1ee7a user\n    # user_id b\u1eaft \u0111\u1ea7u = 1\n    ids = np.where(y == user_id +1)[0] \n    item_ids = rate_matrix[ids, 1] - 1 # ids - 1\n    scores = rate_matrix[ids, 2]\n    return (item_ids, scores)\nids, scores = get_items_rated_by_user(rate_train, 0)\nlist_head = np.concatenate((ids.reshape(len(ids),1), scores.reshape(len(scores),1)),axis = 1)[0:10]\nprint(list_head)","5f80570c":"from sklearn.linear_model import Ridge # m\u00f4 h\u00ecnh linear regression v\u1edbi regularization\n\nd = tfidf.shape[1] # data dimension\nW = np.zeros((d, n_users))\nb = np.zeros((1, n_users))\n\nfor n in range(n_users):    \n    ids, scores = get_items_rated_by_user(rate_train, n)\n    clf = Ridge(alpha=0.01, fit_intercept  = True)\n    Xhat = tfidf[ids, :]\n    \n    clf.fit(Xhat, scores) \n    W[:, n] = clf.coef_\n    b[0, n] = clf.intercept_","bef4b926":"#model d\u1ef1 \u0111o\u00e1n\nYhat = tfidf.dot(W) + b \n# print(Yhat[0])","76c3e7d6":"n = 100\nids, scores = get_items_rated_by_user(rate_test, 0)\nYhat[n, ids]\nprint('Rated movies ids:', ids )\nprint('True ratings:', scores)\nprint('Predicted ratings:', Yhat[ids, n])","88835ead":"from math import sqrt\ndef evaluate(Yhat, rates, W, b):\n    se = 0\n    cnt = 0\n    for n in range(n_users):\n        ids, scores_truth = get_items_rated_by_user(rates, n)\n        scores_pred = Yhat[ids, n]\n        e = scores_truth - scores_pred \n        se += (e*e).sum(axis = 0)\n        cnt += e.size \n    return sqrt(se\/cnt)\n","e1996012":"print('RMSE for training:', evaluate(Yhat, rate_train, W, b))\nprint('RMSE for test    :', evaluate(Yhat, rate_test, W, b))","91b59afd":"D\u00f9ng linear regression v\u1edbi input l\u00e0 1 ma tr\u1eadn feature v\u00e0 score \u0111\u00e1nh gi\u00e1 ","175c2595":"S\u1eed d\u1ee5ng h\u00e0m TD_IDF \u0111\u1ec3 chuy\u1ec3n \u0111\u1ed5i th\u00e0nh ma tr\u1eadn feature"}}