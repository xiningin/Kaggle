{"cell_type":{"a4956245":"code","511de62a":"code","fb221c34":"code","397c03be":"code","d8306857":"code","d5bf8e56":"code","6ff89b92":"code","bebafb1d":"code","9f27204c":"code","85cf9680":"code","dffb8d45":"code","969f8e18":"code","98fef978":"code","44745cdc":"code","060809e5":"code","5aadb7d3":"code","6727ab38":"code","989c4f09":"code","d2d5da1d":"code","2c283378":"markdown"},"source":{"a4956245":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom scipy.stats import norm\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import (RandomTreesEmbedding, RandomForestClassifier,\n                              GradientBoostingClassifier)\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve\nfrom sklearn.pipeline import make_pipeline\n\nimport os\nprint(os.listdir(\"..\/input\"))","511de62a":"df = pd.read_csv('..\/input\/train.csv', index_col='id')","fb221c34":"df.head()","397c03be":"df.shape","d8306857":"df.describe()","d5bf8e56":"df.target.value_counts()","6ff89b92":"for ix in range(2,12): # (2, 302) for all features\n    fig, ax = plt.subplots(figsize=(6,6))\n    sns.distplot(df.iloc[:,ix], ax=ax, fit=norm, rug=True);\n    plt.show()","bebafb1d":"def bootstrap(data, target, n=5):\n    samples = []\n    for i in range(n):\n        ix = range(len(data))\n        random_ixs = np.random.choice(ix, len(X), replace=True)\n        new_data, new_target = data[random_ixs, :], target[random_ixs]\n        samples.append((new_data, new_target))\n    return samples","9f27204c":"X = df.iloc[:, 1:].values\ny = df.target.values","85cf9680":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.5)\nbootstrap_samples = bootstrap(X_train, y_train, 1000)","dffb8d45":"n_estimator = 100","969f8e18":"list_y_pred_rt = []\nlist_y_pred_rf_lm = []\nlist_y_pred_grd_lm = []\nlist_y_pred_grd = []\nlist_y_pred_rf = []\n\nfor sample in bootstrap_samples:\n    X_train, y_train = sample\n    X_train, X_train_lr, y_train, y_train_lr = train_test_split(\n                                        X_train, y_train, test_size=0.5)\n    \n    rt = RandomTreesEmbedding(max_depth=3, n_estimators=n_estimator,\n                          random_state=0)\n    rt_lm = LogisticRegression(solver='lbfgs', max_iter=1000)\n    pipeline = make_pipeline(rt, rt_lm)\n    rf = RandomForestClassifier(max_depth=3, n_estimators=n_estimator)\n    rf_enc = OneHotEncoder(categories='auto')\n    rf_lm = LogisticRegression(solver='lbfgs', max_iter=1000)\n    grd = GradientBoostingClassifier(n_estimators=n_estimator)\n    grd_enc = OneHotEncoder(categories='auto')\n    grd_lm = LogisticRegression(solver='lbfgs', max_iter=1000)\n    \n    pipeline.fit(X_train, y_train)\n    rf.fit(X_train, y_train)\n    rf_enc.fit(rf.apply(X_train))\n    rf_lm.fit(rf_enc.transform(rf.apply(X_train_lr)), y_train_lr)\n    grd.fit(X_train, y_train)\n    grd_enc.fit(grd.apply(X_train)[:, :, 0])\n    grd_lm.fit(grd_enc.transform(grd.apply(X_train_lr)[:, :, 0]), y_train_lr)\n\n    y_pred_rt = pipeline.predict_proba(X_val)[:, 1]\n    y_pred_rf_lm = rf_lm.predict_proba(rf_enc.transform(rf.apply(X_val)))[:, 1]\n    y_pred_grd_lm = grd_lm.predict_proba(\n                        grd_enc.transform(grd.apply(X_val)[:, :, 0]))[:, 1]\n    y_pred_grd = grd.predict_proba(X_val)[:, 1]\n    y_pred_rf = rf.predict_proba(X_val)[:, 1]\n    \n    list_y_pred_rt.append(y_pred_rt)\n    list_y_pred_rf_lm.append(y_pred_rf_lm)\n    list_y_pred_grd_lm.append(y_pred_grd_lm)\n    list_y_pred_grd.append(y_pred_grd)\n    list_y_pred_rf.append(y_pred_rf)\n\ny_pred_rt = np.array(list_y_pred_rt).mean(axis=0)\ny_pred_rf_lm = np.array(list_y_pred_rf_lm).mean(axis=0)\ny_pred_grd_lm = np.array(list_y_pred_grd_lm).mean(axis=0)\ny_pred_grd = np.array(list_y_pred_grd).mean(axis=0)\ny_pred_rf = np.array(list_y_pred_rf).mean(axis=0)\n\nfpr_rt_lm, tpr_rt_lm, _ = roc_curve(y_val, y_pred_rt)\nfpr_rf_lm, tpr_rf_lm, _ = roc_curve(y_val, y_pred_rf_lm)\nfpr_grd_lm, tpr_grd_lm, _ = roc_curve(y_val, y_pred_grd_lm)\nfpr_grd, tpr_grd, _ = roc_curve(y_val, y_pred_grd)\nfpr_rf, tpr_rf, _ = roc_curve(y_val, y_pred_rf)","98fef978":"plt.figure(1)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr_rt_lm, tpr_rt_lm, label='RT + LR')\nplt.plot(fpr_rf, tpr_rf, label='RF')\nplt.plot(fpr_rf_lm, tpr_rf_lm, label='RF + LR')\nplt.plot(fpr_grd, tpr_grd, label='GBT')\nplt.plot(fpr_grd_lm, tpr_grd_lm, label='GBT + LR')\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='best')\nplt.show()","44745cdc":"test_df = pd.read_csv('..\/input\/test.csv', index_col='id')","060809e5":"test_df.head()","5aadb7d3":"X_test = test_df.values","6727ab38":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.5)\nbootstrap_samples = bootstrap(X_train, y_train, 1000)","989c4f09":"list_y_pred_rf_lm = []\n\nfor sample in bootstrap_samples:\n    X_train, y_train = sample\n    X_train, X_train_lr, y_train, y_train_lr = train_test_split(\n                                        X_train, y_train, test_size=0.5)\n    \n    rf = RandomForestClassifier(max_depth=3, n_estimators=n_estimator)\n    rf_enc = OneHotEncoder(categories='auto')\n    rf_lm = LogisticRegression(solver='lbfgs', max_iter=1000)\n\n    rf.fit(X_train, y_train)\n    rf_enc.fit(rf.apply(X_train))\n    rf_lm.fit(rf_enc.transform(rf.apply(X_train_lr)), y_train_lr)\n\n    y_pred_rf_lm = rf_lm.predict_proba(rf_enc.transform(rf.apply(X_test)))[:, 1]\n\n    list_y_pred_rf_lm.append(y_pred_rf_lm)\n\ny_pred_rf_lm = np.array(list_y_pred_rf_lm).mean(axis=0)","d2d5da1d":"submission = pd.DataFrame({\n    'id': np.arange(250,20000),\n    'target': y_pred_rf_lm\n})\nsubmission.to_csv(\"submission.csv\", index=False)","2c283378":"https:\/\/scikit-learn.org\/stable\/auto_examples\/ensemble\/plot_feature_transformation.html#sphx-glr-auto-examples-ensemble-plot-feature-transformation-py"}}