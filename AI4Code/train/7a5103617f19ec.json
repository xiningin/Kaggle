{"cell_type":{"763b3683":"code","6552d515":"code","4a116d1d":"code","bb66fbcd":"code","49d69112":"code","3906ff8b":"code","00cf1c6e":"code","bedb9a07":"code","1269c14d":"code","48ebac04":"markdown","7eac1c98":"markdown","4de2336d":"markdown","bded7325":"markdown","677e7ac9":"markdown","73553541":"markdown","bc823106":"markdown","78114f30":"markdown","6ade8fcc":"markdown","43fbb904":"markdown","a99faf80":"markdown","1d6f1550":"markdown"},"source":{"763b3683":"conda install -c conda-forge -c oce -c dlr-sc -c ifcopenshell ifcopenshell","6552d515":"import ifcopenshell","4a116d1d":"f = ifcopenshell.open(\"..\/input\/example-ifc-file\/Grethes-hus-bok-2.ifc\")","bb66fbcd":"## Here we use the by_type() function to test on the entities above\nno_walls = len(f.by_type(\"IfcWall\"))\nno_windows = len(f.by_type(\"IfcWindow\"))\nno_doors = len(f.by_type(\"IfcDoor\"))\nno_flo_segments = len(f.by_type(\"IfcFlowSegment\"))\n\nprint(\"There are {} walls, {} windows, {} doors and {} flow segments in the file\".format(no_walls,no_windows,no_doors,no_flo_segments))","49d69112":"# get the list of all object in file \"f\" of type IfcWall\nifc_wall_objects = f.by_type(\"IfcWall\")\n# get the first wall object in the list\na_wall = ifc_wall_objects[0]\n# print the ifc type of \"a_wall\"\nprint(\"a_wall is of type %s\"%(a_wall.is_a()))\n# Check if \"a_wall\" is of type IfcWall\nprint(\"\\nIt is %s that a_wall is of type IfcWall\"%(a_wall.is_a(\"IfcWall\")))","3906ff8b":"# print \"a_wall\"s Name attribute\nprint(\"The Name of a_wall is %s\"%(a_wall.Name))\n# print \"a_wall\"s Description attribute\nprint(\"The Description of a_wall is %s\"%(a_wall.Description))","00cf1c6e":"# Try with \"IfcBuildingElement\", \"IfcElement\", \"IfcProduct\" and \"IfcRoot\":\na_wall.is_a(\"IfcBuildingElement\")","bedb9a07":"# If our wall is inheriting from IfcRoot, it should have the following attributes:\nguid = a_wall.GlobalId\nowner_history = a_wall.OwnerHistory\nname = a_wall.Name\ndescription = a_wall.Description \n\nprint(\"GlobalId: {},\\nOwnerHistory: {},\\nName: {},\\nDescription: {}\".format(guid,owner_history,name,description))","1269c14d":"## OwningUser:\nowning_user = owner_history.OwningUser\n# attributes inherited from IfcPersonAndOrganization\nthe_person = owning_user.ThePerson\nthe_org = owning_user.TheOrganization\nroles = owning_user.Roles \nprint(\"Person: {}, \\nOrganization: {}, \\nRoles: {}\\n\".format(the_person,the_org,roles))\n\n## OwningApplication: \nowning_app = owner_history.OwningApplication\n# attributes inherited from IfcApplication\napp_dev = owning_app.ApplicationDeveloper\nversion = owning_app.Version\napp_f_name = owning_app.ApplicationFullName\napp_id = owning_app.ApplicationIdentifier\n\nprint(\"Developer: {},\\nVersion: {},\\nApp Name: {}, \\nApp id: {}\".format(app_dev,version,app_f_name,app_id))","48ebac04":"## The \".\" operator\n\nWhen you have an ifc object you can use the  `.` operator to access its attributes: \n```\nifc_object.Attribute\n```\n`Name` is a common Attribute of objects as well as `Description`.  \n","7eac1c98":"## Using the documentation\n\n### The by_type function\n\nYou might wonder what happens if you pass an entity to `by_type()` that is not defined in IFC schema. Then the **function returns an error**. This is because the `ifcopenshell` knows the IFC schema. Hence, when working with `ifcopenshell` [the documentation on the IFC schema defining the model you are working with](https:\/\/standards.buildingsmart.org\/IFC\/RELEASE\/IFC4\/ADD2_TC1\/HTML\/schema\/ifcsharedbldgelements\/lexical\/ifcwall.htm) is very usefull. \n\n### The is_a function\n\nIt is quite obvious that \n```\nwall_in_list_of_walls.is_a(\"IfcWall\")\n``` \nwould return `True` and \n``` \nwall_in_list_of_walls.is_a(\"IfcWindow\")\n```\nwould return `False`. However, did you notice that the type was `IfcWallStandardCase` but also of type `IfcWall`? What if you try:\n```\nwall_in_list_of_walls.is_a(\"IfcBuildingElement\")\n``` \n\nAlways Check [the documentation](https:\/\/standards.buildingsmart.org\/IFC\/RELEASE\/IFC4\/ADD2_TC1\/HTML\/schema\/ifcsharedbldgelements\/lexical\/ifcwall.htm) of the entities you are using and evaluate its inherritance graph.  ","4de2336d":"## The file.by_type function\n\nIn ifcopenshell the function `by_type()` can be applied on the file object. The argument for this function is an Ifc type. Like, eg.`IfcWall` or other ifc types in the schema. If the entity is in the file, the function will return a tuple listing up all the entities of that type in the file. If it is not in the file, the function returns an empty tuple. \n\nSince we have loaded an architectural model, entities such as `IfcWall`, `IfcWindow`, or `IfcDoor` are probable to be in the model; however `IfcFlowSegment` is not likely to be in this model. \n\nThis types are called *entities* and you can check all of them [here](https:\/\/standards.buildingsmart.org\/IFC\/RELEASE\/IFC4\/ADD2_TC1\/HTML\/link\/alphabeticalorder-entities.htm).","bded7325":"# Intro to some key functions in `ifcopenshell` and IFC documentation\n\n*This Notebook was originally published in [this repository](https:\/\/github.com\/bimfag\/intro-python-bim), please check it out to find more information about ifcOpenShell for python.*\n\nIfcopenshell is a library that can be used to parse and handle IFC model data. It works in both C++ and python, for both Ifc2x3 and IFC4. For a collection of information on IFC please refer to the [buildingSMART IFC pages](https:\/\/technical.buildingsmart.org\/standards\/ifc\/). \n\nIt might also be usefull to read up on the [Implementation Guides](https:\/\/technical.buildingsmart.org\/resources\/ifcimplementationguidance\/). The [ifcopenshell academy](http:\/\/academy.ifcopenshell.org\/) is a good resources as well. \n\nOne particular supportive tutorial for this notebook is the [Using The Parsing Functionality of Ifcopenshell Interactively Tutorial](http:\/\/academy.ifcopenshell.org\/using-the-parsing-functionality-of-ifcopenshell-interactively\/).\n\nThe topics for this notebook are: \n\n- [Opening an .ifc file and create a file object](#Opening-an-.ifc-file-and-create-a-file-object)\n- [The file.by_type function](#The-file.by_type-function)\n- [The is_a function](#The-is_a-function)\n- [The \".\" operator](#The-\".\"-operator)\n- [Using the documentation](#Using-the-documentation)\n- [Extra reading](#Extra-reading)","677e7ac9":"## The is_a function\n\nAnother usefull function in `ifcopenshell` is the `ifc_object.is_a()` that returns the IFC type of the `ifc_object`. It could also be used as \n```\nifc_object.is_a(\"particular ifc type\")\n```\nto check if the `ifc_object` you have is of a particular ifc type. If it is of the particular type, it returns `True` and `False` if its not. ","73553541":"# Extra reading\n- If you want to learn more about `ifcopenshell` and how to use it please check out the [complete course](https:\/\/github.com\/bimfag\/intro-python-bim).\n- Get familiar with the IFC documentation, you can find the schema specification (based on the IFC version you are using) [here](https:\/\/technical.buildingsmart.org\/standards\/ifc\/ifc-schema-specifications\/).\n- [IFC Implementation Guides](https:\/\/technical.buildingsmart.org\/resources\/ifcimplementationguidance\/)\n- [IfcOpenShell Academy](http:\/\/academy.ifcopenshell.org\/)\n- [\"Using the parsing functionality of IfcOpenShell interactively\" Tutorial](http:\/\/academy.ifcopenshell.org\/using-the-parsing-functionality-of-ifcopenshell-interactively\/)","bc823106":"And now we import the packages we are going to use in this notebook:","78114f30":"As showed above the `.` operator works directly on the schema attributes names. As described by the inherritance graph of the `IfcOwnerHistory` objects, `OwningUser` and `OwningApplication` are attributes for this object. These are of the type `IfcPersonAndOrganization` and `IfcApplication` respectively. ","6ade8fcc":"# Load packages\nFirst we are going to install the [`ifcopenshell`](http:\/\/ifcopenshell.org\/) package. *IfcOpenShell* is an open source software library that helps users and software developers to work with the IFC file format. The IFC file format can be used to describe building and construction data. The format is commonly used for Building Information Modelling (BIM).<br>\n<br>\nRun the following code to install the package in the curren environment:","43fbb904":"### The \".\" operator\n\nWhen you have a reference to a IFC type that is in your file using the `f.by_type()` function, you could refer to the documentation again to see what you could do with it. \n\n`ifcopenshell` supports the schema, and enables you to access the objects attributes through the `.` operator.\n\nSo looking into [the documentation of IfcWall](https:\/\/standards.buildingsmart.org\/IFC\/RELEASE\/IFC4\/ADD2_TC1\/HTML\/schema\/ifcsharedbldgelements\/lexical\/ifcwall.htm) again, we see that `IfcWall` is inherriting from `IfcRoot`, which gives the following attributes: \n\n* GlobalId \n* OwnerHistory\n* Name\n* Description ","a99faf80":"# Requirements\nBasic knowledge of Python is needed to follow this notebook. Check the [subjects listed in this course](https:\/\/www.kaggle.com\/learn\/python).","1d6f1550":"## Opening an .ifc file and create a file object\n\nWith ifcopenshell you could start interacting with a file through the `open()` function. The only argument to this function is a path to the `.ifc` file:"}}