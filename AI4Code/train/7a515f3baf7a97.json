{"cell_type":{"a64b35a0":"code","56e992ae":"code","b1fd0904":"code","986c430b":"code","863fd217":"code","393c3675":"code","29b0492c":"code","dd10ef26":"code","3272802a":"code","4e7b40fa":"code","65f62918":"code","ed5f894e":"code","a328d450":"code","857c2fab":"code","815af614":"code","53d83285":"code","f70fccad":"code","f3afff5b":"code","46745f9e":"code","0ff5b2cb":"code","e0b87d08":"code","94be0e97":"code","f94ea74d":"code","9edbfbec":"code","a908bdc2":"code","d4e68daf":"code","a0ff25c2":"code","9e3b802c":"code","d6a395e3":"code","cac4f400":"code","80c2e738":"code","f77cac04":"markdown","8e643a37":"markdown","cd874ef4":"markdown","c4b9823f":"markdown","c08c2294":"markdown","1d893efa":"markdown","dc49abfb":"markdown","a0350d36":"markdown","6064ea47":"markdown","c47cb8f6":"markdown","066943c8":"markdown","1cfd9019":"markdown","6fe6f607":"markdown","95c6e4fa":"markdown","75c47de5":"markdown","db55287c":"markdown"},"source":{"a64b35a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","56e992ae":"import matplotlib.pyplot as plt\nimport matplotlib.image as implt\nimport seaborn as sns\nimport cv2 as cv\nimport random\n\nfrom PIL import Image\n\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\n","b1fd0904":"data=pd.read_csv(\"\/kaggle\/input\/bee-vs-wasp\/kaggle_bee_vs_wasp\/labels.csv\")","986c430b":"data.label.unique()","863fd217":"data.label.value_counts()#we only need bees and wasps.","393c3675":"data=data[data.id<=8126]\ndata.label.value_counts()\n","29b0492c":"data.label.unique()","dd10ef26":"data.info()","3272802a":"data.head(10)#top 10","4e7b40fa":"data.tail(10)#end 10","65f62918":"data_bee_vs_wasp = \"..\/input\/bee-vs-wasp\/kaggle_bee_vs_wasp\"\n\ntrain_wasp = sorted(os.listdir(data_bee_vs_wasp +'\/wasp1'))\ntrain_bee =  sorted(os.listdir(data_bee_vs_wasp +'\/bee1'))\n\n\ntest_wasp = sorted(os.listdir(data_bee_vs_wasp +'\/wasp2'))\ntest_bee =  sorted(os.listdir(data_bee_vs_wasp +'\/bee2'))\n\nlist=[\"train_wasp\",\"train_bee\",\"test_wasp\",\"test_bee\"]\n\nwasp1=0\nwasp2=0\nbee1=0\nbee2=0\n\nfor i in train_wasp:\n    wasp1=wasp1+1\n    \nfor i in train_bee:\n    bee1=bee1+1\n    \nfor i in test_wasp:\n    wasp2=wasp2+1\n    \nfor i in test_bee:\n    bee2=bee2+1\n\nprint(\"train_wasp :\",wasp1)\nprint(\"test_wasp :\",wasp2)\nprint(\"train_bee :\",bee1)\nprint(\"test_bee :\",bee2)","ed5f894e":"count_wasp =wasp1+wasp2\ncount_bee=bee1+bee2\n\nlist_count=[count_wasp,count_bee]\n\nlist_count_veriable =[\"wasp\",\"bee\"]\n\nlist=[\"train_wasp\",\"train_bee\",\"test_wasp\",\"test_bee\"]\n\nfig = plt.figure()\nplt.bar(list_count_veriable,list_count,color=\"green\")\nplt.bar(list_count_veriable,list_count,color=\"green\")\nplt.xlabel(\"insect    \")\nplt.ylabel(\"values\")\nplt.show()\n","a328d450":"barWidth = 0.25\n \n# set height of bar\n\nbars1 = [wasp1,wasp2]\nbars2 = [ bee1,bee2]\n \n\nlist1=[\"train_wasp\",\"test_wasp\"]\nlist2=[\"train_bee\",\"test_bee\"]\n \n# Make the plot\nplt.bar(list1, bars1, color='yellow', width=barWidth, edgecolor='white', label='train')\nplt.bar(list2, bars2, color='green', width=barWidth, edgecolor='white', label='test')\n\n \n# Add xticks on the middle of the group bars\nplt.xlabel('group', fontweight='bold')\n\n \n# Create legend & Show graphic\nplt.legend()\nplt.show()\n","857c2fab":"list_img_wasp=[]\nx_list_wasp=[]\nlist_img_bee=[]\nx_list_bee=[]\n\nfor x in train_wasp:\n    x_list_wasp.append(x)\nfor i in range(1,2127):\n    list_img_wasp.append(implt.imread(data_bee_vs_wasp +'\/wasp1\/'+x_list_wasp[i]))\n\nfor y in train_bee:\n    x_list_bee.append(y)\nfor a in range(1,2469):\n    list_img_bee.append(implt.imread(data_bee_vs_wasp +'\/bee1\/'+x_list_bee[a]))\n","815af614":"#random wasp images\nw=10\nh=10\nfig=plt.figure(figsize=(15,15))\ncolumns = 4\nrows = 5\nfor i in range(1,21):\n    img = np.random.randint(2127, size=(h,w))\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(list_img_wasp[random.randint(1,2127)])#random values\n    converted_num = str(i) \n    plt.title(\"wasp -\"+converted_num)\n    i=int(i)\n    \nplt.show()","53d83285":"#random bee images\n\nw=10\nh=10\nfig=plt.figure(figsize=(15,15))\ncolumns = 4\nrows = 5\n\nfor i in range(1,21):\n    \n    img = np.random.randint(10, size=(h,w))\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(list_img_bee[random.randint(1,2469)])\n    converted_num = str(i) \n    plt.title(\"bee -\"+converted_num)\n    i=int(i)\n    \nplt.show()","f70fccad":"img_size = 50\nwasp_insect = []\nbee_insect = [] \nlabel = []\n\nfor i in train_wasp:\n    if os.path.isfile(data_bee_vs_wasp +'\/wasp1\/'+ i):\n        insect = Image.open(data_bee_vs_wasp +'\/wasp1\/'+ i).convert('L') #converting grey scale            \n        insect = insect.resize((img_size,img_size), Image.ANTIALIAS) #resizing to 50,50\n        insect = np.asarray(insect)\/255.0 #normalizing images\n        wasp_insect.append(insect)  \n        label.append(1) #label 1 for women\n           \n        \nfor i in train_bee:\n    if os.path.isfile(data_bee_vs_wasp+'\/bee1\/'+ i):\n        insect = Image.open(data_bee_vs_wasp+'\/bee1\/'+ i).convert('L')\n        insect = insect.resize((img_size,img_size), Image.ANTIALIAS)\n        insect = np.asarray(insect)\/255.0 #normalizing images\n        bee_insect.append(insect)  \n        label.append(0) #label 0 for men\n\n        \nx_train = np.concatenate((wasp_insect,bee_insect),axis=0) # training dataset\nx_train_label = np.asarray(label)# label array containing 0 and 1\nx_train_label = x_train_label.reshape(x_train_label.shape[0],1)\n\nprint(\"wasp_insect:\",np.shape(wasp_insect) , \"bee_insect:\",np.shape(bee_insect))\nprint(\"train_dataset:\",np.shape(x_train), \"train_values:\",np.shape(x_train_label))","f3afff5b":"img_size = 50\nwasp_insect = []\nbee_insect = [] \nlabel = []\n\n\nfor i in test_wasp:\n        if os.path.isfile(data_bee_vs_wasp +'\/wasp2\/'+ i):\n            insect = Image.open(data_bee_vs_wasp +'\/wasp2\/'+ i).convert('L')            \n            insect = insect.resize((img_size,img_size), Image.ANTIALIAS)\n            insect = np.asarray(insect)\/255.0\n            wasp_insect.append(insect)  \n            label.append(1)     \n\nfor i in test_bee:\n        if os.path.isfile(data_bee_vs_wasp+'\/bee2\/'+ i):\n            faces = Image.open(data_bee_vs_wasp+'\/bee2\/'+ i).convert('L')\n            faces = faces.resize((img_size,img_size), Image.ANTIALIAS)\n            faces = np.asarray(faces)\/255.0            \n            bee_insect.append(faces)\n            label.append(0)                       \n\nx_test = np.concatenate((wasp_insect,bee_insect),axis=0) # test dataset\nx_test_label = np.asarray(label) # corresponding labels\nx_test_label = x_test_label.reshape(x_test_label.shape[0],1)\n\nprint(\"wasp_insect:\",np.shape(wasp_insect), \"bee_insect:\",np.shape(bee_insect))\nprint(\"test_dataset:\",np.shape(x_test), \"test_values:\",np.shape(x_test_label))","46745f9e":"x = np.concatenate((x_train,x_test),axis=0) #train_data\ny = np.concatenate((x_train_label,x_test_label),axis=0) #test data\nx = x.reshape(x.shape[0],x.shape[1]*x.shape[2]) #flatten 3D image array to 2D\nprint(\"images:\",np.shape(x), \"labels:\",np.shape(y))","0ff5b2cb":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2, random_state=42)\nnumber_of_train = X_train.shape[0]\nnumber_of_test = X_test.shape[0]\n\nprint(\"train number:\",number_of_train, \"test number:\",number_of_test)","e0b87d08":"x_train = X_train.T\nx_test = X_test.T\ny_train = Y_train.T\ny_test = Y_test.T\nprint(\"x train: \",x_train.shape)\nprint(\"x test: \",x_test.shape)\nprint(\"y train: \",y_train.shape)\nprint(\"y test: \",y_test.shape)","94be0e97":"def initialize_weights_and_bias(dimension):\n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w, b","f94ea74d":"def sigmoid(z):\n    y_head = 1\/(1+np.exp(-z))\n    return y_head","9edbfbec":"def forward_backward_propagation(w,b,x_train,y_train):\n    # forward propagation\n    z = np.dot(w.T,x_train) + b    \n    y_head = sigmoid(z)    \n    loss = -(1-y_train)*np.log(1-y_head)-y_train*np.log(y_head)        \n    cost = (np.sum(loss))\/x_train.shape[1]  # x_train.shape[1]  is for scaling\n    \n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1] # x_train.shape[1]  is for scaling\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]                   # x_train.shape[1]  is for scaling\n    gradients = {\"derivative_weight\": derivative_weight,\"derivative_bias\": derivative_bias}\n    return cost,gradients","a908bdc2":"def update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    # updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iterarion):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 50 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","d4e68daf":"def predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is woman (y_head=1),\n    # if z is smaller than 0.5, our prediction is man (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n    return Y_prediction","a0ff25c2":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]  # 2500\n    w,b = initialize_weights_and_bias(dimension)\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    y_prediction_train = predict(parameters[\"weight\"],parameters[\"bias\"],x_train)\n\n    train_acc_lr = round((100 - np.mean(np.abs(y_prediction_train - y_train)) * 100),2)\n    test_acc_lr = round((100 - np.mean(np.abs(y_prediction_test - y_test)) * 100),2)\n    # Print train\/test Errors\n    print(\"train accuracy: %\", train_acc_lr)\n    print(\"test accuracy: %\", test_acc_lr)\n    return train_acc_lr, test_acc_lr\n    \n\ntrain_acc_lr, test_acc_lr = logistic_regression(x_train, y_train, x_test, y_test,learning_rate = 0.01, num_iterations = 100)#There is little change in the graph after this point(100).","9e3b802c":"from sklearn import linear_model\nlogreg = linear_model.LogisticRegression(random_state = 42,max_iter= 150)\nprint(\"test accuracy: {} \".format(logreg.fit(x_train.T, y_train.T).score(x_test.T, y_test.T)))\nprint(\"train accuracy: {} \".format(logreg.fit(x_train.T, y_train.T).score(x_train.T, y_train.T)))","d6a395e3":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nlogreg = LogisticRegression()\ntest_acc_logregsk = round(logreg.fit(x_train.T, y_train.T).score(x_test.T, y_test.T)* 100, 2)\ntrain_acc_logregsk = round(logreg.fit(x_train.T, y_train.T).score(x_train.T, y_train.T)* 100, 2)","cac4f400":"from sklearn.linear_model import Perceptron\n\nperceptron = Perceptron()\ntest_acc_perceptron = round(perceptron.fit(x_train.T, y_train.T).score(x_test.T, y_test.T)* 100, 2)\ntrain_acc_perceptron = round(perceptron.fit(x_train.T, y_train.T).score(x_train.T, y_train.T)* 100, 2)","80c2e738":"models = pd.DataFrame({\n    'Model': ['LR without sklearn','LR with sklearn', 'Perceptron'],\n    'Train Score': [train_acc_lr, train_acc_logregsk, train_acc_perceptron],\n    'Test Score': [test_acc_lr, test_acc_logregsk, test_acc_perceptron]})\nmodels.sort_values(by='Test Score', ascending=False)","f77cac04":"<a id=\"8\"><\/a> <br>\n# Optimization Algorithm with Gradient Descent","8e643a37":"<a id=\"9\"><\/a> <br>\n# Logistic Regression with Sklearn\n","cd874ef4":"# relationship between methods.\n<a ><img src=\"https:\/\/img-a.udemycdn.com\/redactor\/raw\/2020-10-21_00-39-24-18e50d9b543a68680d49c39cd488e772.jpg?v0_OALeJn3VekdpacVTE9Xi74LCJo_cRxUQYUdkG8JJtqI0fOjsljQrkPQNaaMZRnpDO3kPdZ9KRv9wjVqIIGdmCxduvpb8iKa87yMP28iREKPoBziTSVO7EadwIDQO17dzpicwiZkLB7I0IbADwvf8JvfMNsQe0AFToGWL35AI3hNww\" alt=\"1\" border=\"0\">","c4b9823f":"here we will use bee1 and wasps1 to train our dataset.\nWe will use bee2 and wasps2 to train the dataset.\n\nlabel wasp1 =train data.\n\nlabel wasp2 =test data.\n\nlabel bee1 =train data.\n\nlabel bee2 =test data.","c08c2294":"<a id=\"1\"><\/a> <br>\n# Importing Libraries","1d893efa":"<a id=\"4\"><\/a> <br>\n# Logistic Regression","dc49abfb":"<a id=\"6\"><\/a> <br>\n# Initializing parameters\n","a0350d36":"<a ><img src=\"https:\/\/ahmetasimsengul.files.wordpress.com\/2015\/05\/kuvpq.png\" alt=\"1\" border=\"0\">","6064ea47":"* [Importing Libraries](#1)\n\n* [Exploring the Dataset](#2)\n\n* [Processing Dataset](#3)\n\n* [Logistic Regression](#4)\n    * [Computation Graph](#5)\n    * [Initializing parameters](#6)\n    * [Forward Propagation](#7)\n        * Sigmoid Function\n        * Loss(error) Function\n        * Cost Function\n    * [Optimization Algorithm with Gradient Descent](#8)\n        * Backward Propagation\n        * Updating parameters\n    * [Logistic Regression with Sklearn](#9)\n    * [Summary and Questions in Minds](#10)\n ","c47cb8f6":"<a id=\"3\"><\/a> <br>\n# Processing Dataset","066943c8":"# # # # Additional info","1cfd9019":"<a id=\"7\"><\/a> <br>\n# Forward Propagation","6fe6f607":"# warning !!! If you skip the import section, go to (Importing Libraries).","95c6e4fa":"All our operations have a special method. I wrote this method below. The following 2 lines are linear regression summary.","75c47de5":"\n<a id=\"2\"><\/a> <br>\n# Exploring the Dataset","db55287c":"1. Logistic Regression Assumptions\n\n* Binary logistic regression requires the dependent variable to be binary.\n* For a binary regression, the factor level 1 of the dependent variable should represent the desired outcome.\n* Only the meaningful variables should be included.\n* The independent variables should be independent of each other. That is, the model should have little or no multicollinearity.\n* The independent variables are linearly related to the log odds.\n* Logistic regression requires quite large sample sizes.\n* Keeping the above assumptions in mind, let\u2019s look at our dataset."}}