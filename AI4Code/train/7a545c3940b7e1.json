{"cell_type":{"607351d3":"code","4f94383e":"code","8515c7a0":"code","f5144f19":"code","275db94e":"code","5533ddbd":"code","db50ff04":"code","51bd0660":"code","0cb338df":"code","8e6f0c7d":"code","a7567adf":"code","8dbb1b3f":"code","8a810095":"code","1327de53":"code","41079755":"code","fe690cb9":"markdown","0c329f90":"markdown"},"source":{"607351d3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pickle\nfrom collections import Counter\n\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.manifold import TSNE\nimport os\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom xgboost import XGBRegressor","4f94383e":"def load_year(y):\n    dtypes = pickle.load(open(\n        f'..\/input\/kdd2020-cpr\/{y}_dtypes.pkl', 'rb'\n    ))\n    del dtypes['date']\n    df = pd.read_csv(\n        f'..\/input\/kdd2020-cpr\/{y}.csv',\n        dtype=dtypes, parse_dates=['date']\n    )\n    return df","8515c7a0":"YEAR = 2018\nCOMPONENTS = 110\nXGB_ESTIMATORS = 60\nMAGICIAN = 'TruncatedSVD'","f5144f19":"%%time\ndf = load_year(YEAR)","275db94e":"pd.Series(df.dtypes).value_counts()","5533ddbd":"%%time\ndef drop_fullnull(df, inplace=False):\n    mask = df.isnull().all()\n    labels = df.columns[mask]\n    \n    shape = df.shape\n    print(labels)\n    if inplace:\n        df.drop(labels=labels, axis=1, inplace=True)\n    else:\n        df = df.drop(labels=labels, axis=1)\n    if labels.any():\n        if shape == df.shape:\n            print('lables:', labels)\n        else:\n            print(shape, df.shape)\n    return df\n\nclean = df\n# clean = drop_fullnull(df)\nclean.shape","db50ff04":"vclean = clean.copy()\nvclean.fillna(0, inplace=True)","51bd0660":"%%time\nmagician = TruncatedSVD(n_components=COMPONENTS, random_state=0)","0cb338df":"%%time\ncp = df.copy()\n\ncp.fillna(0, inplace=True)\n\nout_mask = df.columns.str.contains('output')\nout_cols = df.columns[df.columns.str.contains('output')]\ncp_out = cp.loc[:, out_mask]\ncp.drop(['id'] + out_cols.tolist(),\n        axis=1, inplace=True\n)\ncp['day'] = cp.date.dt.day\ncp['month'] = cp.date.dt.month\ncp['year'] = cp.date.dt.year\ncp.drop('date', inplace=True, axis=1)\n\nmagician.fit(cp)","8e6f0c7d":"out_cols.ravel()[[0,4,10,-1]]","a7567adf":"%%time\nmodel = XGBRegressor(\n    n_estimators=XGB_ESTIMATORS, random_state=0, n_jobs=-1,\n    learning_rate=.1, max_depth=10, tree_method='gpu_hist', verbosity=2,\n)\nclf = MultiOutputRegressor(model)\n\nclf.fit(pd.DataFrame(magician.transform(cp)), cp_out);","8dbb1b3f":"%%time\nd9 = load_year(2019)\nd9.shape","8a810095":"%%time\n\ndef svd_preprocess(df):\n    cp = df.copy()\n    ids = df.id.copy()\n    \n    cp.fillna(0, inplace=True)\n    cp.drop(['id'], axis=1, inplace=True, errors='ignore')\n    cp['day'] = cp.date.dt.day\n    cp['month'] = cp.date.dt.month\n    cp['year'] = cp.date.dt.year\n    cp.drop('date', inplace=True, axis=1)\n    return cp, ids\n\nX, ids = svd_preprocess(d9)\n\ndf_in = pd.DataFrame(magician.transform(X))\ndf_in.index = ids\ndf_in.head(1)","1327de53":"y_pred = clf.predict(df_in)\n\nout_cols_flat = out_cols.ravel()\nid_col = []\nfor i in ids:\n    id_col.extend([f'{i}_{sufix}' for sufix in out_cols_flat])","41079755":"df_sub = pd.DataFrame(\n    {'id':id_col , 'value':y_pred.ravel()}\n)\ndf_sub.to_csv(\n    f'submission-{YEAR}-{COMPONENTS}{MAGICIAN}-{XGB_ESTIMATORS}xgb.csv',\n    index=False\n)\npickle.dump(clf, open('clf.pkl', 'wb'))","fe690cb9":"## Define and train model","0c329f90":"## DataFrame sem colunas com apenas null"}}