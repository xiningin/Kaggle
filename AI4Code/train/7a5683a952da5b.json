{"cell_type":{"282d629f":"code","788e6c8d":"code","9a5e60e4":"code","623f5049":"code","704b56a1":"code","bc4045c5":"code","b3df67f6":"code","5770443d":"code","3dce69f8":"code","6ef0fc87":"code","58812c4e":"code","7ed371bd":"code","7d1d7072":"code","a7a6ba7c":"code","f9eb9d50":"code","b86a0883":"code","ef62effb":"code","36eb7cf1":"code","97079797":"code","eb19fe11":"code","efe7ec27":"code","4fd05112":"code","55e06334":"code","210ea213":"code","b2cdd11b":"code","6e7e5bb7":"code","e78e7b1b":"code","7a482e66":"code","b76552a0":"code","e55a4144":"code","8f890aa0":"code","1ed5d26f":"markdown"},"source":{"282d629f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport matplotlib.pyplot as plt\nimport seaborn as sns               # Provides a high level interface for drawing attractive and informative statistical graphics\n%matplotlib inline\nsns.set()\nfrom subprocess import check_output\n\nimport warnings                                            # Ignore warning related to pandas_profiling\nwarnings.filterwarnings('ignore') \n\ndef annot_plot(ax,w,h):                                    # function to add data to plot\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    for p in ax.patches:\n         ax.annotate(f\"{p.get_height() * 100 \/ df.shape[0]:.2f}%\", (p.get_x() + p.get_width() \/ 2., p.get_height()),\n         ha='center', va='center', fontsize=11, color='black', rotation=0, xytext=(0, 10),\n         textcoords='offset points') \ndef annot_plot(ax,w,h):                                    # function to add data to plot\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    for p in ax.patches:\n         ax.annotate(f\"{p.get_height() * 100 \/ new_df.shape[0]:.2f}%\", (p.get_x() + p.get_width() \/ 2., p.get_height()),\n         ha='center', va='center', fontsize=11, color='black', rotation=0, xytext=(0, 10),\n         textcoords='offset points') \n            \nimport os\nprint(os.listdir(\"..\/input\"))\n\n","788e6c8d":"df = pd.read_csv('..\/input\/data.csv')","9a5e60e4":"df.info()","623f5049":"df.isnull().sum()","704b56a1":"df.head()","bc4045c5":"df.nunique() #unique elements in dataset","b3df67f6":"# I choose interesting to me columns. Later I will use them for analysis.\nchosen_columns = [\n    'Name',\n    'Age',\n    'Nationality',\n    'Overall',\n    'Potential',\n    'Special',\n    'Acceleration',\n    'Aggression',\n    'Agility',\n    'Balance',\n    'BallControl',\n    'Body Type',\n    'Composure',\n    'Crossing',\n    'Curve',\n    'Club',\n    'Dribbling',\n    'FKAccuracy',\n    'Finishing',\n    'GKDiving',\n    'GKHandling',\n    'GKKicking',\n    'GKPositioning',\n    'GKReflexes',\n    'HeadingAccuracy',\n    'Interceptions',\n    'International Reputation',\n    'Jersey Number',\n    'Jumping',\n    'Joined',\n    'LongPassing',\n    'LongShots',\n    'Marking',\n    'Penalties',\n    'Position',\n    'Positioning',\n    'Preferred Foot',\n    'Reactions',\n    'ShortPassing',\n    'ShotPower',\n    'Skill Moves',\n    'SlidingTackle',\n    'SprintSpeed',\n    'Stamina',\n    'StandingTackle',\n    'Strength',\n    'Value',\n    'Vision',\n    'Volleys',\n    'Wage',\n    'Weak Foot',\n    'Work Rate'\n]","5770443d":"new_df = pd.DataFrame(df, columns = chosen_columns)","3dce69f8":"new_df.head()","6ef0fc87":"df['Body Type'].unique()","58812c4e":"df['Body Type'].fillna('Normal', inplace = True)","7ed371bd":"df['Body Type'].replace(to_replace = ['Messi','C. Ronaldo','Neymar', 'PLAYER_BODY_TYPE_25', 'Shaqiri','Akinfenwa','Courtois'], \n                        value = ['Normal','Normal','Normal','Normal','Normal','Normal','Normal'],inplace = True)","7d1d7072":"new_df.nunique()","a7a6ba7c":"new_df.describe()","f9eb9d50":"corr_df = new_df[['Age', 'Overall', 'Potential', 'Value', 'Wage',\n                'Acceleration', 'Aggression', 'Agility', 'Balance', 'BallControl', \n                'Body Type','Composure', 'Crossing','Dribbling', 'FKAccuracy', 'Finishing', \n                'HeadingAccuracy', 'Interceptions','International Reputation',\n                'Joined', 'Jumping', 'LongPassing', 'LongShots',\n                'Marking', 'Penalties', 'Position', 'Positioning',\n                'ShortPassing', 'ShotPower', 'Skill Moves', 'SlidingTackle',\n                'SprintSpeed', 'Stamina', 'StandingTackle', 'Strength', 'Vision',\n                'Volleys']]\n\ncorr = corr_df.corr()\nplt.figure(figsize = (25,16))\nheatmap = sns.heatmap(corr,annot = True, linewidths=.5)\nheatmap.set_title(label='Heatmap of dataset', fontsize=25)\nplt.show()","b86a0883":"plt.figure(figsize=(8,5))\nax = sns.countplot('Body Type', data = df)\nplt.ylabel('Number of players')\nannot_plot(ax,0.08,1)\n","ef62effb":"plt.figure(figsize=(8,5))\nax = sns.countplot('International Reputation', data = df)\nplt.ylabel('Number of players')\nannot_plot(ax,0.08,1)\n","36eb7cf1":"plt.figure(figsize=(8,5))\nax = sns.countplot('Preferred Foot', data = df)\nplt.ylabel('Number of players')\nannot_plot(ax,0.08,1)","97079797":"plt.figure(figsize=(8,5))\nax = sns.countplot('Skill Moves', data = df)\nplt.ylabel('Number of players')\nannot_plot(ax,0.08,1)","eb19fe11":"plt.figure(figsize=(8,5))\nax = sns.countplot('Weak Foot', data = df)\nplt.ylabel('Number of players')\nannot_plot(ax,0.08,1)","efe7ec27":"plt.figure(figsize=(8,5))\nax = sns.countplot('Work Rate', data = df)\nplt.ylabel('Number of players')\nplt.xticks(rotation = 45, ha = 'right')\nannot_plot(ax,0.08,1)","4fd05112":"def num_annot_plot(ax,w,h):                                    # function to add data to plot\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    for p in ax.patches:\n        ax.annotate('{0:.1f}'.format(p.get_height()), (p.get_x()+w, p.get_height()+h))\n","55e06334":"plt.figure(figsize=(22,12))\nax = sns.countplot('Age', data = df,palette='viridis')\nplt.ylabel('Number of players')\nplt.xticks(rotation = 45, ha = 'right')\nnum_annot_plot(ax,0.08,1)","210ea213":"plt.figure(figsize = (14,7))\nax = sns.countplot('Nationality', data = new_df ,order = new_df['Nationality'].value_counts()[:20].index,palette='viridis')\nplt.ylabel('Number of Players.')\nplt.xticks(rotation = 45, ha = 'right')\nnum_annot_plot(ax,0.08,1)\nplt.show()","b2cdd11b":"# The five eldest players\neldest = df.sort_values('Age', ascending = False)[['Name', 'Nationality', 'Age']].head(3)\neldest.set_index('Name', inplace=True)\nprint(eldest)","6e7e5bb7":"# The five youngest players\neldest = new_df.sort_values('Age', ascending = True)[['Name', 'Nationality', 'Age']].head(22)\neldest.set_index('Name', inplace=True)\nprint(eldest)","e78e7b1b":"plt.figure(figsize = (18,10))\nax = sns.countplot('Position', data = new_df ,order = new_df['Position'].value_counts().index,palette='viridis')\nplt.ylabel('Number of Players.')\nplt.xticks(rotation = 45, ha = 'right')\nnum_annot_plot(ax,0.08,1)\nplt.show()","7a482e66":"# The best player per position\ndisplay(HTML(df.iloc[df.groupby(df['Position'])['Overall'].idxmax()][['Name', 'Position']].to_html(index=False)))","b76552a0":"player_features = (\n    'Acceleration', 'Aggression', 'Agility', \n    'Balance', 'BallControl', 'Composure', \n    'Crossing', 'Dribbling', 'FKAccuracy', \n    'Finishing', 'GKDiving', 'GKHandling', \n    'GKKicking', 'GKPositioning', 'GKReflexes', \n    'HeadingAccuracy', 'Interceptions', 'Jumping', \n    'LongPassing', 'LongShots', 'Marking', 'Penalties'\n)\n\n# Top three features per position\nfor i, val in df.groupby(df['Position'])[player_features].mean().iterrows():\n    print('Position {}: {}, {}, {}'.format(i, *tuple(val.nlargest(3).index)))","e55a4144":"# Top 5 right-footed players\ndf[df['Preferred Foot'] == 'Right'][['Name','Overall']].head()","8f890aa0":"# Top 5 LEFT-footed players\ndf[df['Preferred Foot'] == 'Left'][['Name','Overall']].head()","1ed5d26f":"**As we can many positive corr b\/w diff-diff variables.**\n\nLets checkout some corr:\n\n**Positive Corr.**\n* Volleys - volleys are having good corr with ball control, Dribbing, Finishing, LongShots, Penalties, Positioning,   ShortPower, ShortPAssing, Skill moves. so we can say if Volleys are good , then ball control and other var will be good, or vice varsa. \n\n* Vision - if players vision is good then ball control, dribbing and other var will be good.\n\n**Negative Corr**\n* Strength - neg corr with balance, if Strength isn't good enough then Balance will be low.\n\nLike that we can compare other variables. :)"}}