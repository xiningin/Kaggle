{"cell_type":{"feeb68a5":"code","1175ad0f":"code","2e501e34":"code","ae3c8f97":"code","93d50d4e":"code","579efa63":"code","e515d69b":"code","fe3ccad6":"code","973ac325":"code","2e12e4e2":"code","11bceaa1":"code","c1b11a37":"code","deb7d2a3":"code","7e4c3147":"code","e0d6e843":"code","463b9b85":"code","582f5c08":"code","1e9fb5ce":"code","4757ec6d":"code","f315957e":"code","bf442bc2":"code","7b5faef6":"code","00f61b60":"code","76d05e26":"code","c0e7ea0d":"code","518da4b7":"code","7a88a8e9":"code","a70ca030":"code","c7118932":"code","add3426e":"code","69018ed0":"code","b670edad":"code","5245d543":"code","11a6a7d1":"code","c97632c7":"code","c23c9317":"code","d9c0212f":"code","c126033d":"code","e5a83bec":"code","0e11c3fd":"code","b9074945":"code","1408e4b0":"code","3aa00a5f":"code","e9d6a627":"code","cd9ff197":"code","30bcf2fc":"code","b25ec2d5":"code","4cc9416a":"code","1b560512":"code","b699b930":"code","5f192a9a":"code","6b1ccab1":"code","bdc432fc":"code","95f81996":"code","8d6dee25":"code","bab48549":"code","6aa1348b":"code","57d7f690":"code","967d7b97":"code","0d41893e":"code","efd5187d":"code","abc1cb46":"code","69f6d2f1":"code","1d27d707":"code","7daaf492":"code","2b152f88":"code","a2706c95":"code","84b2abf8":"code","0358d58b":"code","c131eedc":"code","3652c699":"code","3a833c0a":"code","d4ebc164":"code","2b332e62":"code","c2e8700f":"code","85042f11":"code","64391e80":"code","7abacf0c":"code","9bd74909":"code","48f49243":"code","5b22b15b":"code","e0cc8c65":"code","0be0bd22":"code","44dd4e3d":"code","1f456cb0":"code","4663ecdf":"code","ad58d45a":"code","055ea30d":"code","8f0fd2f6":"code","059150e5":"code","b7e300f3":"code","8cf37a71":"code","9ab94dab":"code","694d1546":"code","60c38f6e":"code","3000e24d":"code","bf4f89fa":"code","ba82eedc":"code","c26f9022":"code","d6b7ae77":"code","225410e6":"markdown","b9f2c9fe":"markdown","887ac140":"markdown","d9e4aa63":"markdown","cc1681c2":"markdown","b5a563f3":"markdown","86fc66de":"markdown","30b810ce":"markdown","38e5bebb":"markdown","2979aeac":"markdown","41cf3ed4":"markdown","cc5a7ea1":"markdown","02960715":"markdown","47b8676d":"markdown","9be66e0f":"markdown","cb34dd56":"markdown","92c8b9c3":"markdown","200553bd":"markdown","62349479":"markdown","9e0bec65":"markdown","cb06d0fc":"markdown","0bd5f4bd":"markdown","20b34ddb":"markdown","03323bf6":"markdown","2ddea725":"markdown","b3290d54":"markdown","a58a2920":"markdown","4abb77b3":"markdown","303cdd00":"markdown","004ceb07":"markdown","7f2429a4":"markdown","8b5e6735":"markdown"},"source":{"feeb68a5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\n\nimport os\n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n","1175ad0f":"# Reading the dataset\ntrain_house = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/housetrain.csv\")\n#Showing the data set\ntrain_house.head()","2e501e34":"# Summary of data Set\nprint(train_house.info())","ae3c8f97":"#Checking rows and columns\ntrain_house.shape","93d50d4e":"# checking Duplicates in dataframe\ntrain_house.duplicated() ","579efa63":"# Checking missing values\ntrain_house.isnull().sum()","e515d69b":"# Checking missing values\n#train_house.isnull().sum()\ndef missing(dff):\n    print (round((dff.isnull().sum() * 100\/ len(dff)),2).sort_values(ascending=False))\n\nmissing(train_house)","fe3ccad6":"#Dropping those which have more missing values (more than 50%)\ntrain_house.drop(\"Alley\",axis=1,inplace=True)\ntrain_house.drop(\"PoolQC\",axis=1,inplace=True)\ntrain_house.drop(\"Fence\",axis=1,inplace=True)\ntrain_house.drop(\"MiscFeature\",axis=1,inplace=True)\ntrain_house.drop(\"GarageYrBlt\",axis=1,inplace=True)","973ac325":"# Removing Id \ntrain_house.drop(\"Id\",axis=1,inplace=True)","2e12e4e2":"train_house.head()","11bceaa1":"train_house[\"LotFrontage\"]=train_house[\"LotFrontage\"].fillna(0)","c1b11a37":"#Filling Categorical Value with its mode\ntrain_house[\"FireplaceQu\"]=train_house[\"FireplaceQu\"].fillna(train_house[\"FireplaceQu\"].mode()[0])\ntrain_house[\"GarageType\"]=train_house[\"GarageType\"].fillna(train_house[\"GarageType\"].mode()[0])\ntrain_house[\"GarageFinish\"]=train_house[\"GarageFinish\"].fillna(train_house[\"GarageFinish\"].mode()[0])\ntrain_house[\"GarageQual\"]=train_house[\"GarageQual\"].fillna(train_house[\"GarageQual\"].mode()[0])\ntrain_house[\"GarageCond\"]=train_house[\"GarageQual\"].fillna(train_house[\"GarageCond\"].mode()[0])\n\n","deb7d2a3":"#Filling missing value\ntrain_house[\"BsmtQual\"]=train_house[\"BsmtQual\"].fillna(train_house[\"BsmtQual\"].mode()[0])\ntrain_house[\"MasVnrType\"]=train_house[\"MasVnrType\"].fillna(train_house[\"MasVnrType\"].mode()[0])\ntrain_house[\"MasVnrArea\"]=train_house[\"MasVnrArea\"].fillna(train_house[\"MasVnrArea\"].mode()[0])\n\n\n","7e4c3147":"# Checking missing values\n#train_house.isnull().sum()","e0d6e843":"#Dropping those rows which have high null values\ntrain_house.dropna(inplace=True)","463b9b85":"train_house.shape","582f5c08":"# Describing the data\n\ntrain_house.describe()\n\n","1e9fb5ce":"# Pairplot of all the numeric variables\nsns.pairplot(train_house)\nplt.show()","4757ec6d":"plt.figure(figsize=(25, 15))\nplt.subplot(3,3,1)\nsns.boxplot(x = 'Street', y = 'SalePrice', data = train_house)\nplt.subplot(3,3,2)\nsns.boxplot(x = 'MSZoning', y = 'SalePrice', data = train_house)\nplt.subplot(3,3,3)\nsns.boxplot(x = 'LotShape', y = 'SalePrice', data = train_house)\nplt.subplot(3,3,4)\nsns.boxplot(x = 'LandContour', y = 'SalePrice', data = train_house)\nplt.subplot(3,3,5)\nsns.boxplot(x = 'Utilities', y = 'SalePrice', data = train_house)\nplt.subplot(3,3,6)\nsns.boxplot(x = 'LotConfig', y = 'SalePrice', data = train_house)\nplt.show()\nplt.subplot(3,3,7)\nsns.boxplot(x = 'LandSlope', y = 'SalePrice', data = train_house)\nplt.subplot(3,3,8)\nsns.boxplot(x = 'Neighborhood', y = 'SalePrice', data = train_house)\nplt.subplot(3,3,9)\nsns.boxplot(x = 'Condition1', y = 'SalePrice', data = train_house)\nplt.show()","f315957e":"plt.figure(figsize=(25, 15))\nplt.subplot(3,3,1)\nsns.boxplot(x = 'Condition2', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,2)\nsns.boxplot(x = 'BldgType', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,3)\nsns.boxplot(x = 'HouseStyle', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,4)\nsns.boxplot(x = 'RoofStyle', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,5)\nsns.boxplot(x = 'RoofMatl', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,6)\nsns.boxplot(x = 'Exterior1st', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,7)\nsns.boxplot(x = 'Exterior2nd', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,8)\nsns.boxplot(x = 'MasVnrType', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,9)\nsns.boxplot(x = 'ExterQual', y = 'SalePrice', data = train_house)\nplt.show()","bf442bc2":"plt.figure(figsize=(25, 15))\nplt.subplot(3,3,1)\nsns.boxplot(x = 'PavedDrive', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,2)\nsns.boxplot(x = 'Foundation', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,3)\nsns.boxplot(x = 'BsmtQual', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,4)\nsns.boxplot(x = 'BsmtCond', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,5)\nsns.boxplot(x = 'BsmtExposure', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,6)\nsns.boxplot(x = 'BsmtFinType1', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,7)\nsns.boxplot(x = 'BsmtFinType2', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,8)\nsns.boxplot(x = 'Heating', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,9)\nsns.boxplot(x = 'HeatingQC', y = 'SalePrice', data = train_house)\nplt.show()","7b5faef6":"plt.figure(figsize=(25, 15))\nplt.subplot(3,3,1)\nsns.boxplot(x = 'CentralAir', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,2)\nsns.boxplot(x = 'Electrical', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,3)\nsns.boxplot(x = 'KitchenQual', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,4)\nsns.boxplot(x = 'Functional', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,5)\nsns.boxplot(x = 'FireplaceQu', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,6)\nsns.boxplot(x = 'GarageType', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,7)\nsns.boxplot(x = 'GarageFinish', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,8)\nsns.boxplot(x = 'GarageQual', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,9)\nsns.boxplot(x = 'GarageCond', y = 'SalePrice', data = train_house)\nplt.show()","00f61b60":"plt.figure(figsize=(25, 15))\nplt.subplot(3,3,1)\nsns.boxplot(x = 'PavedDrive', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,2)\nsns.boxplot(x = 'SaleType', y = 'SalePrice', data = train_house)\n#plt.show()\nplt.subplot(3,3,3)\nsns.boxplot(x = 'SaleCondition', y = 'SalePrice', data = train_house)\nplt.show()\n\n","76d05e26":"# creating dummy variables for categorical variables\n\n# subset all categorical variables\ncategorical = train_house.select_dtypes(include=['object'])\ncategorical.head()\n\n","c0e7ea0d":"# converting categorical values into dummies\ncat_dummies = pd.get_dummies(categorical, drop_first=True)\ncat_dummies.head()\n","518da4b7":"# drop categorical variables \ntrain_house = train_house.drop(list(categorical.columns), axis=1)","7a88a8e9":"# concat dummy variables with train_house df\ntrain_house = pd.concat([train_house, cat_dummies], axis=1)\ntrain_house.head()","a70ca030":"train_house.shape","c7118932":"\nfrom sklearn.preprocessing import scale\n\n#storing column names in cols, since column names are (annoyingly) lost after \n# scaling (the df is converted to a numpy array)\ncols = train_house.columns\ntrain_house = pd.DataFrame(scale(train_house))\ntrain_house.columns = cols\ntrain_house.columns","add3426e":"# printing data set\n\ntrain_house.head()","69018ed0":"from sklearn.model_selection import train_test_split\n\n#  The train and test data set always have the same rows, respectively\n\ndf_train, df_test = train_test_split(train_house, train_size = 0.7, test_size = 0.3, random_state = 100)","b670edad":"#Now Check the correlation coefficients to see which variables are highly correlated\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize = (26, 20))\nsns.heatmap(df_train.corr(), annot = True, cmap=\"YlGnBu\")\nplt.show()","5245d543":"#Dividing  X and Y sets for the model building\ny_train = df_train.pop(\"SalePrice\")\nX_train = df_train\n\nX_train.head()\n\n\n","11a6a7d1":"#Checking y_train rows and columns\ny_train.shape","c97632c7":"#Checking X_train rows and columns\nX_train.shape","c23c9317":"#Dividing  X and Y sets for the model building\ny_test = df_test.pop('SalePrice')\nX_test = df_test","d9c0212f":"# list of alphas to tune\nparams = {'alpha': [0.0001, 0.001, 0.01, 0.05, 0.1, \n 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0, \n 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20, 50, 100, 500, 1000 ]}\n\n\nridge = Ridge()\n\n# cross validation\nfolds = 10\nmodel_cv = GridSearchCV(estimator = ridge, \n                        param_grid = params, \n                        scoring= 'neg_mean_absolute_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)            \nmodel_cv.fit(X_train, y_train) ","c126033d":"cv_results = pd.DataFrame(model_cv.cv_results_)\ncv_results = cv_results[cv_results['param_alpha']<=200]\ncv_results","e5a83bec":"# plotting mean test and train scoes with alpha \ncv_results['param_alpha'] = cv_results['param_alpha'].astype('int32')\n\n# plotting\nplt.plot(cv_results['param_alpha'], cv_results['mean_train_score'])\nplt.plot(cv_results['param_alpha'], cv_results['mean_test_score'])\nplt.xlabel('alpha')\nplt.ylabel('Negative Mean Absolute Error')\nplt.title(\"Negative Mean Absolute Error and alpha\")\nplt.legend(['train score', 'test score'], loc='upper right')\nplt.show()","0e11c3fd":"alpha = 0.0001\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","b9074945":"alpha = 0.001\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","1408e4b0":"alpha = 0.01\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","3aa00a5f":"alpha = 0.05\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","e9d6a627":"alpha = 0.1\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","cd9ff197":"alpha = 0.2\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","30bcf2fc":"alpha = 0.3\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","b25ec2d5":"alpha = 0.4\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","4cc9416a":"alpha = 0.5\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","1b560512":"alpha = 0.6\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","b699b930":"alpha = 0.7\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","5f192a9a":"alpha = 0.8\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","6b1ccab1":"alpha = 0.9\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","bdc432fc":"alpha = 1.0\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","95f81996":"alpha = 2.0\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","8d6dee25":"alpha = 3.0\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","bab48549":"alpha = 4.0\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","6aa1348b":"alpha = 5.0\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","57d7f690":"alpha = 6.0\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","967d7b97":"alpha = 7.0\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","0d41893e":"alpha = 8.0\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","efd5187d":"alpha = 9.0\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","abc1cb46":"alpha = 10.0\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","69f6d2f1":"alpha = 11\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","1d27d707":"alpha = 12\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","7daaf492":"alpha = 13\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","2b152f88":"alpha = 14\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","a2706c95":"alpha = 15\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","84b2abf8":"alpha = 16\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","0358d58b":"alpha = 16\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","c131eedc":"alpha = 17\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","3652c699":"alpha = 18\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","3a833c0a":"alpha = 19\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","d4ebc164":"alpha = 20\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","2b332e62":"alpha = 21\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","c2e8700f":"alpha = 22\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","85042f11":"alpha = 23\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","64391e80":"alpha = 24\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","7abacf0c":"alpha = 25\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","9bd74909":"alpha = 26\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","48f49243":"alpha = 27\nridge = Ridge(alpha=alpha)\nridge.fit(X_train, y_train)\nridge.coef_","5b22b15b":"alpha = 28\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","e0cc8c65":"alpha = 29\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","0be0bd22":"alpha =30\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","44dd4e3d":"#finding r squared values of train data set\nimport sklearn.metrics as metrics\n\n# linear regression\nlm = LinearRegression()\nlm=Ridge(alpha=10)\nlm.fit(X_train, y_train)\n\n# predict\ny_train_pred = lm.predict(X_train)\nmetrics.r2_score(y_true=y_train, y_pred=y_train_pred)","1f456cb0":"#finding r squared values of test data set\ny_test_pred = lm.predict(X_test)\nmetrics.r2_score(y_true=y_test, y_pred=y_test_pred)","4663ecdf":"# Ridge model parameters\nmodel_parameters = list(ridge.coef_)\nmodel_parameters.insert(0, lm.intercept_)\nmodel_parameters = [round(x, 3) for x in model_parameters]\ncols = train_house.columns\ncols = cols.insert(0, \"constant\")\nlist(zip(cols, model_parameters))","ad58d45a":"lasso = Lasso()\n\n# cross validation\nmodel_cv = GridSearchCV(estimator = lasso, \n                        param_grid = params, \n                        scoring= 'neg_mean_absolute_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)            \n\nmodel_cv.fit(X_train, y_train) ","055ea30d":"cv_results = pd.DataFrame(model_cv.cv_results_)\ncv_results.head()","8f0fd2f6":"# plotting mean test and train scoes with alpha \ncv_results['param_alpha'] = cv_results['param_alpha'].astype('float32')\n\n# plotting\nplt.plot(cv_results['param_alpha'], cv_results['mean_train_score'])\nplt.plot(cv_results['param_alpha'], cv_results['mean_test_score'])\nplt.xlabel('alpha')\nplt.ylabel('Negative Mean Absolute Error')\n\nplt.title(\"Negative Mean Absolute Error and alpha\")\nplt.legend(['train score', 'test score'], loc='upper right')\nplt.show()","059150e5":"# Checking alpha value with 0.0001\nalpha =0.0001\n\nlasso = Lasso(alpha=alpha)\n        \nlasso.fit(X_train, y_train) \n","b7e300f3":"lasso.coef_","8cf37a71":"# Checking alpha value with 0.001\nalpha =0.001\n\nlasso = Lasso(alpha=alpha)\n        \nlasso.fit(X_train, y_train) \n\n","9ab94dab":"lasso.coef_","694d1546":"# Checking alpha value with 0.01\nalpha =0.01\n\nlasso = Lasso(alpha=alpha)\n        \nlasso.fit(X_train, y_train) \n\n","60c38f6e":"lasso.coef_","3000e24d":"# Checking alpha value with 0.02\nalpha =0.02\n\nlasso = Lasso(alpha=alpha)\n        \nlasso.fit(X_train, y_train) ","bf4f89fa":"lasso.coef_","ba82eedc":"# plot\ncv_results['param_alpha'] = cv_results['param_alpha'].astype('float32')\nplt.plot(cv_results['param_alpha'], cv_results['mean_train_score'])\nplt.plot(cv_results['param_alpha'], cv_results['mean_test_score'])\nplt.xlabel('alpha')\nplt.ylabel('r2 score')\nplt.xscale('log')\nplt.show()","c26f9022":"# lasso regression\nimport sklearn.metrics as metrics\nlm = Lasso(alpha=0.01)\nlm.fit(X_train, y_train)\n\n# predict\ny_train_pred = lm.predict(X_train)\nprint(metrics.r2_score(y_true=y_train, y_pred=y_train_pred))\ny_test_pred = lm.predict(X_test)\nprint(metrics.r2_score(y_true=y_test, y_pred=y_test_pred))","d6b7ae77":"# lasso model parameters\nmodel_parameters = list(lasso.coef_)\nmodel_parameters.insert(0, lm.intercept_)\nmodel_parameters = [round(x, 3) for x in model_parameters]\ncols = train_house.columns\ncols = cols.insert(0, \"constant\")\nlist(zip(cols, model_parameters))","225410e6":"##### Visualising Numeric Variables","b9f2c9fe":"#### Greater the coefficient values whether positive or negative....They  are the top variables affecting price","887ac140":"### Ridge Regression","d9e4aa63":"#### Lasso model parameters","cc1681c2":"##### GrLivArea', 0.278 : For Unit change in area,Price will change by .278 times\n\n##### OverallQual', 0.239 : For Unit change in Rates the overall material and finish of the house,Price will change by .239 times.\n\n##### Neighborhood_NoRidge', 0.123 : When change the location to Northridge,Price of the house will increase by .123 times\n\n##### GarageCars,0.108 : When we change the Size of garage in car capacity,Price of the house will increase by .108 times\n\n##### Neighborhood_NWAmes', 0.087 : When change the location to Northwest Ames,Price of the house will increase by .087 times\n\n##### RoofMatl_WdShake', 0.076 :When we change Roof material to Wood Shakes,Price of the house will increase by .076 times\n\n##### YearRemodAdd', 0.064 : Remodel date will increase the price of the house by .064 times.\n\n##### BsmtCond_TA', 0.059 :The basement condition is Typical - slight dampness allowed,then Price will change by .059 times.\n\n##### Neighborhood_Somerst', 0.059 : When change the location to Somerset,Price of the house will change  by .059 times\n\n##### Fireplaces', 0.046 : A change in Number of fireplaces,Price of the house will change  by .046 times\n\n##### SaleType_ConLw 0.042 : When change in the type of sale to  Contract Low Down payment and low interest,Price of the house will change  by .042 times\n\n##### Exterior1st_CBlock', 0.037 : When change in Exterior covering on house to Cinder Block ,Price of the house will change  by .037 times\n\n##### BsmtFinSF1', 0.036 :A change in Rating of basement finished area in square feet , will change the Price of the house by  .036 times.\n\n##### YearBuilt', 0.032 : Change in Year of built ,will change the Price of the house by  .032 times.\n\n##### Exterior2nd_HdBoard', 0.029 : When change in Exterior covering on house (if more than one material) to Hard Board,Price of the house will change  by .029 times\n\n##### Neighborhood_CollgCr', 0.023 : When change the location to College Creek,Price of the house will  change  by .023 times\n\n##### BsmtFinType1_BLQ', 0.021 :If  A change in Rating of basement finished area is Below Average Living Quarters ,then Price of the house will  change  by .021 times\n\n##### Exterior1st_BrkComm', 0.02 : If  A change in Exterior covering on house is Brick Commons ,then Price of the house will  change  by .02 times\n\n##### Functional_Sev 0.016 :If the Home functionality is Severely Damaged,then Price of the house will  change  by .016 times\n\n##### Functional_Mod', -0.004 : If the Home functionality is Moderate Deductions,then Price of the house will  change  by  -.004 times\n\n##### HeatingQC_Po', -0.005 : If  Heating quality and condition is Poor , then Price of the house will  change  by  -.005 times\n\n##### Heating_Grav', -0.009 : If type of heating is Gravity furnace\t,then Price of the house will  change  by  -.009 times\n\n##### BsmtQual_Gd', -0.023 : If height of the basement is good (90-99 inches),then Price of the house will  change  by  -.023 times\n\n##### BsmtFinType1_Rec', -0.025 : If Rating of basement finished area is Average Rec Room,then Price of the house will  change  by  -.025 times\n\n##### KitchenQual_Fa', -0.031 :If Kitchen quality is Fair ,then Price of the house will  change  by  -.031 times\n\n##### KitchenQual_Gd', -0.032 : If Kitchen quality is Good,then Price of the house will  change  by  -.032 times\n\n##### ExterQual_Gd', -0.034 : If quality of the material on the exterior is Good, then Price of the house will  change  by  -.034 times\n\n##### LotShape_IR2', -0.034 : If General shape of property is Moderately Irregular ,  then Price of the house will  change  by  -.034 times\n\n##### BsmtQual_Fa', -0.037 : If basement quality is fair ,then Price of the house will  change  by  -.037 times\n\n##### BsmtExposure_Mn', -0.051 : If garden level walls is Mimimum Exposure,then Price of the house will  change  by  -.051 times\n\n##### Condition2_PosA', -0.057 : If Proximity to various conditions is Adjacent to postive off-site feature ,then Price of the house will  change  by  -.057 times\n\n##### MSSubClass', -0.085 : If type of dwelling in the sale ,then Price of the house will  change  by  -.085 times\n\n\n\n\n\n\n","b5a563f3":"#### From this graph it is difficult to choose alpha value.So we can include small values to get to know what values alpha starts increasing","86fc66de":"#### The R squared value of the Ridge model is .92 on train data and R sqaured value of test data is .81..This is not good Model,may chance to include over fitting.","30b810ce":"### Data Preparation","38e5bebb":"### Lasso Regression","2979aeac":"##### In Lasso Regression from alpha value:0.01 it is increasing","41cf3ed4":"#### The data set has no null values","cc5a7ea1":"##### Checking missing values","02960715":"###  Model Building and Evaluation","47b8676d":"# Assignment- Advanced Regression\n\n#####   Which variables are significant in predicting the price  of a house\n    \n#####    How well those variables describe the price of a house\n\n\n","9be66e0f":"#### Dropping those which have more missing values (more than 50%)","cb34dd56":"##### Visualising Categorical Variables\u00b6\n\n##### Use Boxplot for Plotting Categorical Variables\n\n","92c8b9c3":"####  scaling the features","200553bd":"### Which variables are significant in predicting the price of a house","62349479":"###  Data Understanding and Exploration","9e0bec65":"####  Model with optimal alpha","cb06d0fc":"### Visualising the Data - Univariate Analysis","0bd5f4bd":"### How well those variables describe the price of a house.","20b34ddb":"#### Filling numerical missing values with 0","03323bf6":"####  Creating dummy variables for categorical variables\n\n","2ddea725":"#### If alpha value is 10, we get 92% r squaed value in train set and 81% variance is decribed by test data ","b3290d54":"#### No missing values ..All Missing values are handled","a58a2920":"#### From 2.0 the Alpha value keep increasing in ridge regression.But choose optimal alpha value as 10.Because from 10 r squred values keeps same.","4abb77b3":"#### From graph we can't identify alpha values..Let's check with small values","303cdd00":"### Ridge and Lasso Regression\n\nLet's  perform ridge and lasso regression.","004ceb07":" The R squared value of the Ridge model is .92 on train data  and  R sqaured value of test data is .81..This is not good Model,may chance to include over fitting,Multicollinearity and outliers.\n\nThe R squared value of the lasso model is .88 on train data  and  R sqaured value of test data is .87..This is a good Model.\n\nSo we select Lasso Regression model\n\n#### Lasso Regression model:\u2022\tLasso has reduced complexity by variable selection, and the error is also comparable to that in ridge regression. Thus, it has less complexity and will perform better than ridge regression.","7f2429a4":"### Splitting the Data into Training and Testing Sets","8b5e6735":"#### No Duplicate values in Data Frame"}}