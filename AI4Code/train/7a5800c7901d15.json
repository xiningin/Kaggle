{"cell_type":{"c8dbbada":"code","6c8ee364":"code","eb05a47a":"code","a5ab15f0":"code","8bdc7371":"code","5e2fe486":"code","602502e5":"code","d96f52d9":"code","03673f42":"code","7a8c4233":"code","0097e085":"code","7d4dcea8":"code","957a73e7":"code","4f7f4005":"markdown","abaea127":"markdown","40dfc30b":"markdown"},"source":{"c8dbbada":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import date, datetime\n#visualization libraries\nimport plotly.graph_objs as go\nimport plotly.express as px\n\n%matplotlib inline\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6c8ee364":"data = pd.read_csv('..\/input\/nba2k20-player-dataset\/nba2k20-full.csv')\ndata.head(5)","eb05a47a":"data.info()","a5ab15f0":"def prepare_data(data: pd.DataFrame):\n    '''\n        Preprocesses data\n    '''\n    def calculateAge(birthDate: str):\n        '''\n        calculates age of person, on given birth day\n        '''\n        datetime_object = datetime.strptime(birthDate, '%m\/%d\/%y')\n        today = date.today() \n        age = today.year - datetime_object.year -  ((today.month, today.day) < (datetime_object.month, datetime_object.day)) \n        return age \n    \n    data['jersey'] = data['jersey'].apply(lambda x: int(x[1:]))\n    data['age'] = data['b_day'].apply(calculateAge)\n    data['height'] = data['height'].apply(lambda x: float(x.split('\/')[1]))\n    data['weight'] = data['weight'].apply(lambda x: float(x.split('\/')[1].split(' ')[1]))\n    data['salary'] = data['salary'].apply(lambda x: float(x[1:]))\n    data['draft_round'].replace('Undrafted', 0, inplace = True)\n    data['draft_round'] = data['draft_round'].apply(int)\n    data['team'] = data['team'].fillna('No team')\n    data['college'] = data['college'].fillna('No education')\n    data.drop(['b_day', 'draft_peak'], axis = 1, inplace = True)","8bdc7371":"prepare_data(data)","5e2fe486":"def draw_plotly_court(fig, fig_width=600, margins=10):\n    '''\n    Plots basketball field\n    '''\n    def ellipse_arc(x_center=0.0, y_center=0.0, a=10.5, b=10.5, start_angle=0.0, \n                    end_angle=2 * np.pi, N=200, closed=False):\n        t = np.linspace(start_angle, end_angle, N)\n        x = x_center + a * np.cos(t)\n        y = y_center + b * np.sin(t)\n        path = f'M {x[0]}, {y[0]}'\n        for k in range(1, len(t)):\n            path += f'L{x[k]}, {y[k]}'\n        if closed:\n            path += ' Z'\n        return path\n\n    fig_height = fig_width * (470 + 2 * margins) \/ (500 + 2 * margins)\n    fig.update_layout(width=fig_width, height=fig_height)\n\n    # Set axes ranges\n    fig.update_xaxes(range=[-250 - margins, 250 + margins])\n    fig.update_yaxes(range=[-52.5 - margins, 417.5 + margins])\n\n    threept_break_y = 89.47765084\n    three_line_col = \"#000000\"\n    main_line_col = \"#000000\"\n    three_second_zone = \"#555b6e\"\n\n    fig.update_layout(\n        # Line Horizontal\n        margin=dict(l=20, r=20, t=20, b=20),\n        paper_bgcolor=\"white\",\n        plot_bgcolor=\"white\",\n        yaxis=dict(\n            scaleanchor=\"x\",\n            scaleratio=1,\n            showgrid=False,\n            zeroline=False,\n            showline=False,\n            ticks='',\n            showticklabels=False,\n            fixedrange=True,\n        ),\n        xaxis=dict(\n            showgrid=False,\n            zeroline=False,\n            showline=False,\n            ticks='',\n            showticklabels=False,\n            fixedrange=True,\n        ),\n        shapes=[\n            \n            dict(\n                type=\"rect\", x0=-250, y0=-52.5, x1=250, y1=417.5,\n                line=dict(color=main_line_col, width=1),\n                fillcolor='#9FC490',\n                layer='below'\n            ),\n            dict(\n                type=\"line\", x0=-85, y0=-52.5, x1=-60, y1=137.5,\n                line=dict(color=main_line_col, width=1),\n                layer='below'\n            ),\n            dict(\n                type=\"line\", x0=85, y0=-52.5, x1=60, y1=137.5,\n                line=dict(color=main_line_col, width=1),\n                layer='below'\n            ),\n            dict(\n                type=\"path\",\n                path=\" M -60,137.5 L60,137.5 L85,-52 L-85,-52, L-60, 137.5\",\n                fillcolor=three_second_zone,\n                line_color=main_line_col,\n                opacity = 0.8,\n                layer='below'\n            ),\n            dict(type=\"path\",\n                 path=ellipse_arc(y_center=137.5, a=60, b=60, start_angle=0, end_angle=-np.pi),\n                 line=dict(color='#FF934F', width=1, dash='dot') ),\n            dict(type=\"path\",\n                 path=ellipse_arc(y_center=137.5, a=60, b=60, start_angle=0, end_angle=np.pi),\n                 line=dict(color=main_line_col, width=1), layer='below', fillcolor='#dddddd',),\n            dict(\n                type=\"line\", x0=-60, y0=137.5, x1=60, y1=137.5,\n                line=dict(color=main_line_col, width=1),\n                layer='below'\n            ),\n\n            dict(\n                type=\"rect\", x0=-2, y0=-7.25, x1=2, y1=-12.5,\n                line=dict(color=\"#ec7607\", width=1),\n                fillcolor='#ec7607',\n            ),\n            dict(\n                type=\"circle\", x0=-7.5, y0=-7.5, x1=7.5, y1=7.5, xref=\"x\", yref=\"y\",\n                line=dict(color=\"#ec7607\", width=1),\n            ),\n            dict(\n                type=\"line\", x0=-30, y0=-12.5, x1=30, y1=-12.5,\n                line=dict(color=\"#ec7607\", width=1),\n            ),\n\n            dict(type=\"path\",\n                 path=ellipse_arc(a=40, b=40, start_angle=0, end_angle=np.pi),\n                 line=dict(color=main_line_col, width=1)),\n            dict(type=\"path\",\n                 path=ellipse_arc(a=237.5, b=237.5, start_angle=0.386283101, \n                                  end_angle=np.pi - 0.386283101),\n                 line=dict(color=main_line_col, width=1), layer='below'),\n            dict(\n                type=\"line\", x0=-220, y0=-52.5, x1=-220, y1=threept_break_y,\n                line=dict(color=three_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=-220, y0=-52.5, x1=-220, y1=threept_break_y,\n                line=dict(color=three_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=220, y0=-52.5, x1=220, y1=threept_break_y,\n                line=dict(color=three_line_col, width=1), layer='below'\n            ),\n\n            dict(\n                type=\"line\", x0=-250, y0=227.5, x1=-220, y1=227.5,\n                line=dict(color=main_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=250, y0=227.5, x1=220, y1=227.5,\n                line=dict(color=main_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=-86, y0=19.5, x1=-76, y1=17.5,\n                line=dict(color=main_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=-85, y0=29.5, x1=-75, y1=27.5,\n                line=dict(color=main_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=-80, y0=59.5, x1=-70, y1=57.5,\n                line=dict(color=main_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=-77, y0=89.5, x1=-67, y1=87.5,\n                line=dict(color=main_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=86, y0=19.5, x1=76, y1=17.5,\n                line=dict(color=main_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=85, y0=29.5, x1=75, y1=27.5,\n                line=dict(color=main_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=80, y0=59.5, x1=70, y1=57.5,\n                line=dict(color=main_line_col, width=1), layer='below'\n            ),\n            dict(\n                type=\"line\", x0=77, y0=89.5, x1=67, y1=87.5,\n                line=dict(color=main_line_col, width=1), layer='below'\n            ),\n\n            dict(type=\"path\",\n                 path=ellipse_arc(y_center=417.5, a=60, b=60, start_angle=-0, end_angle=-np.pi),\n                 line=dict(color=main_line_col, width=1), layer='below'),\n            \n\n        ]\n    )\n    return True","602502e5":"def plot_players(data: pd.DataFrame, fig: go.Figure):\n    '''\n    Plots players on basketball field\n    '''\n    if len(data) == 5:\n        data = data.set_index('position').T.to_dict()\n        x = [-110, 40, 0, -160, 160]\n        y = [70, 45, 260, 200, 150]\n        positions = ['C-F', 'C', 'G', 'G-F', 'F']\n        font_color = \"#000\"\n        marker_color = \"#DC602E\"\n        fig.add_trace(\n            go.Scatter(\n                x=x,\n                y=y,\n                mode='markers+text',\n                marker=dict(size=[30, 30, 30, 30, 30], color=marker_color),\n                text=positions,\n                hoverinfo = 'text',\n                hovertext = [data[positions[i]]['full_name'] + ', ' \n                             + str(data[positions[i]]['rating']) \n                             for i in range(len(data))]\n            )\n        )\n\n        for i in range(len(data)):\n            fig.add_annotation(x=x[i], y=y[i]+25,\n                              text=data[positions[i]]['full_name'] + ', ' \n                               + str(data[positions[i]]['rating']))\n           \n        fig.update_annotations(dict(\n                    xref=\"x\",\n                    yref=\"y\",\n                    showarrow=False,\n                    font=dict(\n                        family=\"sans serif\",\n                        size=16,\n                        color=font_color\n                    )\n        ))\n\n    fig.update_layout(showlegend=False)\n    return fig\n\n","d96f52d9":"data.loc[data['position'] == 'F-G', 'position'] = 'G-F'\ndata.loc[data['position'] == 'F-C', 'position'] = 'C-F'","03673f42":"df = data[['rating', 'team', 'position', 'country', 'full_name']]\ndf = df[df['country'] == 'USA']\nif len(df.groupby('position').rating.agg('idxmax')) < 5:\n    print('Not enough players')\nelse:\n    df = df.loc[df.groupby('position').rating.agg('idxmax')]\n    fig = go.Figure()\n    draw_plotly_court(fig)\n    fig = plot_players(df, fig)\n    layout = {'title' : 'top USA team'}\n    fig.update_layout(layout)\n    fig.show()\n","7a8c4233":"df = data[['rating', 'team', 'position', 'country', 'full_name']]\ndf = df[df['country'] == 'Canada']\nif len(df.groupby('position').rating.agg('idxmax')) < 5:\n    print('Not enough players')\nelse:\n    df = df.loc[df.groupby('position').rating.agg('idxmax')]\n    fig = go.Figure()\n    draw_plotly_court(fig)\n    fig = plot_players(df, fig)\n    layout = {'title' : 'top Canada team'}\n    fig.update_layout(layout)\n    fig.show()","0097e085":"df = data[['rating', 'team', 'position', 'country', 'full_name', 'salary']]\nif len(df.groupby('position').salary.agg('idxmax')) < 5:\n    print('Not enough players')\nelse:\n    df = df.loc[df.groupby('position').salary.agg('idxmax')]\n    fig = go.Figure()\n    draw_plotly_court(fig)\n    fig = plot_players(df, fig)\n    layout = {'title' : 'Most paid team'}\n    fig.update_layout(layout)\n    fig.show()","7d4dcea8":"df = data[['rating', 'team', 'position', 'country', 'full_name', 'height']]\nif len(df.groupby('position').height.agg('idxmax')) < 5:\n    print('Not enough players')\nelse:\n    df = df.loc[df.groupby('position').height.agg('idxmax')]\n    fig = go.Figure()\n    draw_plotly_court(fig)\n    fig = plot_players(df, fig)\n    layout = {'title' : 'Most high team'}\n    fig.update_layout(layout)\n    fig.show()","957a73e7":"df = data[['rating', 'team', 'position', 'country', 'full_name', 'age']]\nif len(df.groupby('position').age.agg('idxmax')) < 5:\n    print('Not enough players')\nelse:\n    df = df.loc[df.groupby('position').age.agg('idxmax')]\n    fig = go.Figure()\n    draw_plotly_court(fig)\n    fig = plot_players(df, fig)\n    layout = {'title' : 'Most oldest team'}\n    fig.update_layout(layout)\n    fig.show()","4f7f4005":"Let's take a look on data types","abaea127":"As we can see, we have only 2 int columns, but we have data, that we can preprocess to get numerical data","40dfc30b":"# **Field visualisation**"}}