{"cell_type":{"a96d87d4":"code","71537afc":"code","06a06fac":"code","3e38e4fc":"code","97ea5c5f":"code","1d3fdabe":"code","312cf72f":"code","df59937a":"code","4469c1e4":"code","70cf0051":"code","7afde310":"code","f50b1507":"code","c0075023":"code","06d0d4e4":"code","b0b33211":"code","a0d102b7":"code","1caf70b8":"code","58db9dd7":"code","af46143d":"code","229c9fbe":"markdown","6de5a938":"markdown","13234317":"markdown","957932f1":"markdown","223592dc":"markdown","86871682":"markdown","6075e9ce":"markdown","1a076217":"markdown","71aeef1f":"markdown","665210eb":"markdown","e3da59cd":"markdown","2d84e874":"markdown","08f75ac8":"markdown","2f2bd70b":"markdown"},"source":{"a96d87d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","71537afc":"df = pd.read_csv('..\/input\/default-of-credit-card-clients-dataset\/UCI_Credit_Card.csv')\ndf.head()","06a06fac":"df.columns","3e38e4fc":"df.shape","97ea5c5f":"#Check the info() of the dataset whether all the columns in dataset have the same datatype or not.\ndf.info()","1d3fdabe":"#Checking for missing values\ndf.isnull().sum()","312cf72f":"#Check the distribution of data\ndf['default.payment.next.month'].value_counts().plot.bar()","df59937a":"df['SEX'].value_counts().plot.bar()\n","4469c1e4":"sns.distplot(df['AGE'],kde=True,bins=30)\n","70cf0051":"df['EDUCATION'].value_counts().plot.bar()\n","7afde310":"df['MARRIAGE'].value_counts().plot.bar()\n","f50b1507":"sns.countplot(x='SEX', data=df,hue=\"default.payment.next.month\", palette=\"muted\")\n","c0075023":"sns.countplot(x='EDUCATION',data=df,hue=\"default.payment.next.month\",palette=\"muted\")\n","06d0d4e4":"sns.countplot(x='MARRIAGE',data=df,hue=\"default.payment.next.month\", palette=\"muted\")\n","b0b33211":"df.columns = df.columns.map(str.lower)\ncol_to_norm = ['limit_bal', 'age', 'bill_amt1', 'bill_amt2', 'bill_amt3', 'bill_amt4', 'bill_amt5', 'bill_amt6', 'pay_amt1', 'pay_amt2', 'pay_amt3', 'pay_amt4', 'pay_amt5', 'pay_amt6']\n#you can inbuilt StandardScalar() or MinMaxScalar() also\ndf[col_to_norm] = df[col_to_norm].apply(lambda x :( x-np.mean(x))\/np.std(x))\ndf.head()","a0d102b7":"correlation = df.corr()\nplt.subplots(figsize=(30,10))\nsns.heatmap(correlation, square=True, annot=True, fmt=\".1f\" )","1caf70b8":"df = df.drop([\"id\"],1)\nX = df.iloc[:,:-1].values\ny = df.iloc[:,-1].values\n#We split the data into train(0.75) and test(0.25) size.\n \nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.25,random_state = 1)\n","58db9dd7":"#Start with logistic regression model\nfrom sklearn.linear_model import LogisticRegression\nlogmodel = LogisticRegression(random_state=1)\nlogmodel.fit(X_train,y_train)\ny_pred = logmodel.predict(X_test)\nfrom sklearn.metrics import  accuracy_score, f1_score, precision_score, recall_score, roc_auc_score\nroc=roc_auc_score(y_test, y_pred)\nacc = accuracy_score(y_test, y_pred)\nprec = precision_score(y_test, y_pred)\nrec = recall_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\nresults = pd.DataFrame([['Logistic Regression', acc,prec,rec, f1,roc]],\ncolumns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score','ROC'])\nresults","af46143d":"#plotting the confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nsns.heatmap(cm, cmap=\"Blues\", annot=True,annot_kws={\"size\": 16})","229c9fbe":"It finds that The number of Male credit holder is less than Female.\n\n","6de5a938":"# **Importing Modules**","13234317":"# Correlation","957932f1":"# Predictive Modelling","223592dc":"For females, the count of default.payment.next.month = 0 is highter than males.\n\n","86871682":"# Data PreProcessing","6075e9ce":"It looks like most of the client's education level belongs to category 2,1 and 3.\n\n","1a076217":"# Loading Dataset","71aeef1f":"That's pretty great, we have columns of datatype int64 and float64 only. There is no object type data feature. Now let's check whether our dataset has missing values or not.","665210eb":"Let's do Scalling\n\n","e3da59cd":"We noticed that there is very less number of values for category 3 and 0.\n\n","2d84e874":"# Data Analysis","08f75ac8":"From the above result, you can conclude that many of the clients are not interested in a payment next month. Now let's go through some quick data analysis and look at the distribution of data of the other data features.","2f2bd70b":"There is a large number of clients whose age is between 25 to 40.\n\n"}}