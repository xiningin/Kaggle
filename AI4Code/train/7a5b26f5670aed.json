{"cell_type":{"e74b5d91":"code","2d9d0bb8":"code","a66b6f81":"code","c2494084":"code","1bdb4216":"code","0508a94f":"code","6bf92260":"code","bc18322a":"code","924a9403":"code","933cb6e0":"code","e2390231":"code","0c2b79c8":"code","6feecda7":"code","6b67b9fc":"code","9f5ca90c":"code","c471c185":"code","5b5f6bd3":"code","ac92ef56":"code","643ff397":"code","0be65bea":"code","c7740c5a":"code","8a605702":"code","3eda8be5":"code","8bf5b7a0":"code","2d511474":"code","643437ed":"code","c5e704a5":"code","ee6f5d0a":"code","5ae95dde":"code","50b0de03":"code","d3255dba":"markdown","84dfd3f1":"markdown","bd706284":"markdown","02a98e8c":"markdown","bb4611cd":"markdown","d0dcef62":"markdown","d94649c2":"markdown","f434a420":"markdown","8c2e7887":"markdown","9e66df66":"markdown"},"source":{"e74b5d91":"from keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\n\nimport tensorflow as tf\nnp.random.seed(0)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","2d9d0bb8":"INPUT_SOURCE = '\/kaggle\/input\/dogs-vs-cats'\nFAST_RUN = False\nIMAGE_WIDTH=224\nIMAGE_HEIGHT=224\nIMAGE_SIZE=(IMAGE_WIDTH, IMAGE_HEIGHT)\nIMAGE_CHANNELS=3\nFILE_PATH = '\/kaggle\/input\/dogs-vs-cats-redux-kernels-edition\/'","a66b6f81":"!rm -rf \".\/train\"\n!unzip -q \"\/kaggle\/input\/dogs-vs-cats-redux-kernels-edition\/train.zip\"","c2494084":"# Preparing the data\nfilenames = os.listdir(\".\/train\")\ncategories = []\nfor filename in filenames:\n    category = filename.split('.')[0]\n    if category == 'dog':\n        categories.append(1)\n    else:\n        categories.append(0)\n\ndf = pd.DataFrame({\n    'filename': filenames,\n    'category': categories\n})","1bdb4216":"df.head()","0508a94f":"df.shape","6bf92260":"# Distribution of count classes\nsns.set(style=\"white\")\nsns.countplot(df[\"category\"])","bc18322a":"sample = np.random.choice(df['filename'])\nimage = load_img(\".\/train\/\" + sample)\n# Each image is of different shapes and has 3 channel for RGB\nplt.imshow(image)\nplt.show()","924a9403":"df['category'] = df[\"category\"].replace({0: 'cat', 1: 'dog'}) ","933cb6e0":"# Splitting the data\ntrain_df, val_df = train_test_split(df, test_size=.2, stratify=df[\"category\"], random_state=42)\ntrain_df = train_df.reset_index()\nval_df = val_df.reset_index()","e2390231":"batch_size=32\ntotal_train = train_df.shape[0]\ntotal_validate = val_df.shape[0]","0c2b79c8":"train_datagen = ImageDataGenerator(\n    rotation_range=15,\n    rescale=1.\/255,\n    shear_range=0.1,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    \".\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size\n)","6feecda7":"validation_datagen = ImageDataGenerator(rescale=1.\/255)\nvalidation_generator = validation_datagen.flow_from_dataframe(\n    val_df, \n    \".\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size\n)","6b67b9fc":"class ConvBlock(tf.keras.Model):\n    def __init__(self, filters, kernel, strides, padding):\n        '''\n        Kh\u1edfi t\u1ea1o Convolution Block v\u1edbi c\u00e1c tham s\u1ed1 \u0111\u1ea7u v\u00e0o\n        \n        Parameters\n        ----------\n        filters: int\n            s\u1ed1 l\u01b0\u1ee3ng filter\n        kernel: int\n            k\u00edch th\u01b0\u1edbc kernel\n        strides: int\n            stride c\u1ee7a convolution layer\n        padding: str\n            Lo\u1ea1i padding c\u1ee7a convolution layer\n        \n        '''\n        \n        super(ConvBlock, self).__init__()\n        # T\u1ea1o layer Conv2D\n        self.cnn = tf.keras.layers.Conv2D(filters, kernel,  strides=strides,\n                                          activation='relu',\n                                          kernel_initializer='he_normal',\n                                          kernel_regularizer=tf.keras.regularizers.l2(1e-3),\n                                          padding=padding)\n\n        # T\u1ea1o layer MaxPool2D\n        self.pool = tf.keras.layers.MaxPool2D((2, 2))\n        \n        \n    def call(self, inputs):\n        '''\n        H\u00e0m n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi trong qu\u00e1 tr\u00ecnh forwarding c\u1ee7a m\u1ea1ng\n        \n        Parameters\n        ----------\n        inputs: tensor \u0111\u1ea7u v\u00e0o\n        \n        Returns\n        -------\n        tensor\n            gi\u00e1 tr\u1ecb \u0111\u1ea7u ra c\u1ee7a m\u1ea1ng\n        '''\n        \n        x = inputs\n        \n        x = self.cnn(x)\n        x = self.pool(x)\n\n        return x","9f5ca90c":"class CNN(tf.keras.Model):\n    def __init__(self, num_classes):\n        \n        super(CNN, self).__init__()\n        \n        self.block1 = ConvBlock(32, (3,3), (1,1), 'same')\n        self.block2 = ConvBlock(64, (3,3), (1,1), 'same')\n        self.block3 = ConvBlock(64, (3,3), (1,1), 'same')\n        self.block4 = ConvBlock(64, (3,3), (1,1), 'same')\n        self.block5 = ConvBlock(128, (3,3), (1,1), 'same')\n        self.block6 = ConvBlock(128, (3,3), (1,1), 'same')\n        \n        self.flatten = tf.keras.layers.Flatten()\n        \n        self.dropout = tf.keras.layers.Dropout(.25)\n        \n        self.dense2 = tf.keras.layers.Dense(512, activation='relu', kernel_initializer='he_normal')\n        \n        self.dense3 = tf.keras.layers.Dense(512, activation='relu', kernel_initializer='he_normal')\n        \n        self.dense1 = tf.keras.layers.Dense(num_classes)\n        \n\n    def call(self, inputs):\n        \n        x = inputs\n        \n        x = self.block1(x)\n        x = self.block2(x)\n        x = self.dropout(x)\n        x = self.block3(x)\n        x = self.block4(x)\n        x = self.dropout(x)\n        x = self.block5(x)\n        x = self.block6(x)\n        x = self.dropout(x)\n        \n        x = self.flatten(x)\n        x = self.dense2(x)\n        x = self.dropout(x)\n        x = self.dense3(x)\n        x = self.dense1(x)\n        \n        with tf.device('\/CPU:0'):\n            output = tf.nn.softmax(x)\n\n        return output","c471c185":"from tensorflow.python.client import device_lib\n\ndef get_available_gpus():\n    local_device_protos = device_lib.list_local_devices()\n    return [x.name for x in local_device_protos if x.device_type == 'GPU']\n\nget_available_gpus()","5b5f6bd3":"device = '\/GPU:0' if len(get_available_gpus()) > 0 else '\/CPU:0'\nprint(device)\nbatch_size = 32\nepochs = 100\nnum_classes = 2\nhistory = None\n\nwith tf.device(device):\n    # Kh\u1edfi t\u1ea1o model\n    model = CNN(num_classes)\n    \n    # T\u1ea1o callback \u0111\u1ec3 l\u01b0u model c\u00f3 accuracy tr\u00ean t\u1eadp validation t\u1ed1t nh\u1ea5t\n    mcp = tf.keras.callbacks.ModelCheckpoint(\"model_CNN_v1.h5\", monitor=\"val_accuracy\", verbose=2,\n                      save_best_only=True, save_weights_only=True)\n    es = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)\n    \n    # Compile model\n    learning_rate = 1e-3\n    decay_rate = learning_rate \/ epochs\n    optimizer = tf.keras.optimizers.Adam(learning_rate, decay_rate)\n    model.compile(optimizer=optimizer, loss=tf.keras.backend.categorical_crossentropy,\n                   metrics=['accuracy'])\n    \n    steps_per_epoch = total_train \/\/ batch_size\n    validation_steps = total_validate \/\/ batch_size\n\n    history = model.fit_generator(train_generator, \n                      steps_per_epoch = steps_per_epoch,\n                      epochs=epochs,\n                      validation_data=validation_generator, \n                      validation_steps=validation_steps,\n                      verbose=1,\n                      callbacks=[es, mcp])","ac92ef56":"fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12))\nax1.plot(history.history['loss'], color='b', label=\"Training loss\")\nax1.plot(history.history['val_loss'], color='r', label=\"validation loss\")\nax1.set_xticks(np.arange(1, epochs, 1))\nax1.set_yticks(np.arange(0, 1, 0.1))\n\nax2.plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax2.plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nax2.set_xticks(np.arange(1, epochs, 1))\n\nlegend = plt.legend(loc='best', shadow=True)\nplt.tight_layout()\nplt.show()","643ff397":"!rm -rf \".\/test\"\n!unzip -q \"\/kaggle\/input\/dogs-vs-cats-redux-kernels-edition\/test.zip\"","0be65bea":"test_filenames = os.listdir(\".\/test\")\ntest_df = pd.DataFrame({\n    'filename': test_filenames\n})\nnb_samples = test_df.shape[0]","c7740c5a":"test_gen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_gen.flow_from_dataframe(\n    test_df, \n    \".\/test\/\", \n    x_col='filename',\n    y_col=None,\n    class_mode=None,\n    target_size=IMAGE_SIZE,\n    batch_size=batch_size,\n    shuffle=False\n)","8a605702":"# Load best model\nmodel = CNN(num_classes)\n\n# Thi\u1ebft l\u1eadp k\u00edch th\u01b0\u1edbc input cho model\ndummy_x = tf.zeros((1, 224, 224, 3))\nmodel._set_inputs(dummy_x)\n\n# Load model \u0111\u00e3 l\u01b0u tr\u01b0\u1edbc \u0111\u00f3 trong qu\u00e1 tr\u00ecnh hu\u1ea5n luy\u1ec7n\nmodel.load_weights('model_CNN_v1.h5')\nprint(\"Model \u0111\u00e3 \u0111\u01b0\u1ee3c load\")","3eda8be5":"# Save model\nmodel.save(\"DogVsCatModelv2\")","8bf5b7a0":"predict = model.predict_generator(test_generator, steps=np.ceil(nb_samples\/batch_size))","2d511474":"test_df['category'] = np.argmax(predict, axis=-1)","643437ed":"label_map = dict((v,k) for k,v in train_generator.class_indices.items())\ntest_df['category'] = test_df['category'].replace(label_map)","c5e704a5":"test_df['category'] = test_df['category'].replace({ 'dog': 1, 'cat': 0 })","ee6f5d0a":"# Distribution of count classes\nsns.set(style=\"white\")\nsns.countplot(test_df[\"category\"])","5ae95dde":"submission_df = test_df.copy()\nsubmission_df['id'] = submission_df['filename'].str.split('.').str[0]\nsubmission_df['label'] = submission_df['category']\nsubmission_df.drop(['filename', 'category'], axis=1, inplace=True)\nsubmission_df.to_csv('submission.csv', index=False)","50b0de03":"# D\u1ecdn d\u1eb9p c\u00e1c file h\u00ecnh\nimport shutil\nshutil.rmtree(\".\/train\")\nshutil.rmtree(\".\/test\")","d3255dba":"### 2.1. Import data","84dfd3f1":"## 3. Build training model","bd706284":"### 2.3. Image augmentation","02a98e8c":"## 1. Config parameters","bb4611cd":"## 2. Preprocessing data","d0dcef62":"### 4. Visualize model performance","d94649c2":"### 5.2. Inferance","f434a420":"### 5.1. Prepare test data","8c2e7887":"### 2.2. Split train\/validation data","9e66df66":"## 5. Inference"}}