{"cell_type":{"e2f77ca3":"code","5c972d8b":"code","9c748e25":"code","4d9aac2f":"code","3501805c":"code","b59b0e3f":"markdown","befdf8aa":"markdown","071ea824":"markdown"},"source":{"e2f77ca3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5c972d8b":"# matplotlib configure\nplt.rcParams['image.cmap'] = 'gray'\n# Color from R ggplot colormap\ncolor = ['#6388b4', '#ffae34', '#ef6f6a', '#8cc2ca', '#55ad89', '#c3bc3f', '#bb7693', '#baa094', '#a9b5ae', '#767676']","9c748e25":"mnist = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\nlabel = mnist['label']\nmnist.drop(['label'], inplace=True, axis=1)","4d9aac2f":"%%time\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\n\nlda = LDA(n_components=2)\nlda.fit(mnist, label)\nmnist_lda = lda.transform(mnist)","3501805c":"import plotly.graph_objects as go\n\nfig = go.Figure()\n\nfor idx in range(10):\n    fig.add_trace(go.Scatter(\n        x = mnist_lda[:,0][label==idx],\n        y = mnist_lda[:,1][label==idx],\n        name=str(idx),\n        opacity=0.6,\n        mode='markers',\n        marker=dict(color=color[idx])\n        \n    ))\n\nfig.update_layout(\n    width = 800,\n    height = 800,\n    title = \"LDA result\",\n    yaxis = dict(\n      scaleanchor = \"x\",\n      scaleratio = 1\n    ),\n    legend=dict(\n        orientation=\"h\",\n        yanchor=\"bottom\",\n        y=1.02,\n        xanchor=\"right\",\n        x=1\n    )\n)\n\n\nfig.show()","b59b0e3f":"> Personally, it doesn't seem to be suitable for unstructured data.","befdf8aa":"## Dimension Reduction [2] : LDA\n\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/2\/27\/MnistExamples.png)\n\n- [\ud83c\udf9b Dimension Reduction [1] : PCA](https:\/\/www.kaggle.com\/subinium\/dimension-reduction-1-pca)\n- [\ud83c\udf9b Dimension Reduction [3] : T-SNE](https:\/\/www.kaggle.com\/subinium\/dimension-reduction-3-t-sne)\n- [\ud83c\udf9b Dimension Reduction [4] : UMAP](https:\/\/www.kaggle.com\/subinium\/dimension-reduction-4-umap)","071ea824":"## LDA & Result\n\n**LDA** stands forLinear Discriminant Analysis.\n\nLDA is supervised learning unlike PCA.\n\nSo, you need to give the feature and the correct answer separately to execute the function."}}