{"cell_type":{"2d85ce74":"code","1236dee4":"code","24dd8c61":"code","a78f9882":"code","e6295502":"code","8b1be104":"code","bd973b5a":"code","63ca0068":"code","b9b445a8":"code","b9473da3":"code","4c28bab5":"code","f4e68227":"code","7fa0a937":"code","1dc11b52":"code","36da160d":"code","7c8f8042":"code","d1f1fbc4":"code","56e10db8":"code","08a0550d":"code","ded1555c":"code","3d602200":"code","0ec6a71c":"code","98148004":"code","25308e37":"code","8208e410":"code","b2dc9eb4":"code","beb962ba":"code","0b630b68":"code","994a4849":"markdown","eef3c79c":"markdown","9692d403":"markdown","847ba4bf":"markdown","f5133504":"markdown","c97e6a85":"markdown","1bdc3397":"markdown","fbf31f37":"markdown","6dc4034d":"markdown","f0ea107a":"markdown","113044c7":"markdown","35858890":"markdown","386dea57":"markdown","fe393036":"markdown","a693147e":"markdown","eb9c0426":"markdown","41b3889d":"markdown","e390de77":"markdown","4450cfc0":"markdown","89e893ca":"markdown","c68aeea5":"markdown","6ae28f2c":"markdown"},"source":{"2d85ce74":"import pandas as pd\nimport numpy as np\nimport warnings\nfrom matplotlib import pyplot\n#from pandas import read_csv, set_option\nfrom pandas import Series, datetime\nfrom pandas.tools.plotting import scatter_matrix, autocorrelation_plot\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score, GridSearchCV, TimeSeriesSplit\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, mean_squared_error\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier, RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\nimport random\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom xgboost import XGBClassifier\nimport seaborn as sns","1236dee4":"# Loading the dataset to a dataframe\nsentence_file = \"..\/input\/headlinespolarity\/combined_stock_data.csv\"\nsentence_df = pd.read_csv(sentence_file, parse_dates=[1])","24dd8c61":"sentence_df.head()","a78f9882":"# Check the shape and data types of the dataframe\nprint(sentence_df.shape)\nprint(sentence_df.dtypes)","e6295502":"# Load the stock prices dataset into a dataframe and check the top 5 rows\nstock_prices = \"..\/input\/stocknews\/DJIA_table.csv\"\nstock_data = pd.read_csv(stock_prices, parse_dates=[0])\nstock_data.head()","8b1be104":"# Check the shape and datatypes of the stock prices dataframe\nprint(stock_data.shape)\nprint(stock_data.dtypes)","bd973b5a":"# Create a dataframe by merging the headlines and the stock prices dataframe\nmerged_dataframe = sentence_df[['Date', 'Label', 'Subjectivity', 'Objectivity', 'Positive', 'Negative', 'Neutral']].merge(stock_data, how='inner', on='Date', left_index=True)\n# Check the shape and top 5 rows of the merged dataframe\nprint(merged_dataframe.shape)\nmerged_dataframe.head()","63ca0068":"# Push the Label column to the end of the dataframe\ncols = list(merged_dataframe)\nprint(cols)\ncols.append(cols.pop(cols.index('Label')))\nmerged_dataframe = merged_dataframe.ix[:, cols]\nmerged_dataframe.head()","b9b445a8":"# Change the datatype of the volume column to float\n#merged_dataframe['Date'] = pd.to_datetime(merged_dataframe['Date'])\nmerged_dataframe['Volume'] = merged_dataframe['Volume'].astype(float)\nprint(cols)\n#merged_dataframe = merged_dataframe.set_index(['Date'])\nmerged_dataframe.index = merged_dataframe.index.sort_values()\nmerged_dataframe.head()","b9473da3":"# Check the statistics of the columns of the merged dataframe and check for outliers\nprint(merged_dataframe.describe())","4c28bab5":"# Plot a histogram for all the columns of the dataframe. This shows the frequency of values in all the columns\nsns.set()\nmerged_dataframe.hist(sharex = False, sharey = False, xlabelsize = 4, ylabelsize = 4, figsize=(10, 10))\npyplot.show()","f4e68227":"pyplot.scatter(merged_dataframe['Subjectivity'], merged_dataframe['Label'])\npyplot.xlabel('Subjectivity')\npyplot.ylabel('Stock Price Up or Down 0: Down, 1: Up')\npyplot.show()\npyplot.scatter(merged_dataframe['Objectivity'], merged_dataframe['Label'])\npyplot.xlabel('Objectivity')\npyplot.ylabel('Stock Price Up or Down 0: Down, 1: Up')\npyplot.show()\nmerged_dataframe['Subjectivity'].plot('hist')\npyplot.xlabel('Subjectivity')\npyplot.ylabel('Frequency')\npyplot.show()\nmerged_dataframe['Objectivity'].plot('hist')\npyplot.xlabel('Subjectivity')\npyplot.ylabel('Frequency')\npyplot.show()\nprint(\"Size of the Labels column\")\nprint(merged_dataframe.groupby('Label').size())","7fa0a937":"md_copy = merged_dataframe\nmd_copy = md_copy.replace(-1, np.NaN)\nimport missingno as msno\n# Nullity or missing values by columns\nmsno.matrix(df=md_copy.iloc[:,2:39], figsize=(20, 14), color=(0.42, 0.1, 0.05))","1dc11b52":"colormap = pyplot.cm.afmhot\npyplot.figure(figsize=(16,12))\npyplot.title('Pearson correlation of continuous features', y=1.05, size=15)\nsns.heatmap(merged_dataframe.corr(),linewidths=0.1,vmax=1.0, square=True, \n            cmap=colormap, linecolor='white', annot=True)\npyplot.show()","36da160d":"%matplotlib inline\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport warnings\n\nbin_col = merged_dataframe.columns\nzero_list = []\none_list = []\nfor col in bin_col:\n    zero_count = 0\n    one_count = 0\n    for ix, val in merged_dataframe[col].iteritems():\n        if merged_dataframe.loc[ix, 'Label'] == 0:\n            zero_count += 1\n        else:\n            one_count += 1\n    zero_list.append(zero_count)\n    one_list.append(one_count)\n    \ntrace1 = go.Bar(\n    x=bin_col,\n    y=zero_list ,\n    name='Zero count'\n)\ntrace2 = go.Bar(\n    x=bin_col,\n    y=one_list,\n    name='One count'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    barmode='stack',\n    title='Count of 1 and 0 in binary variables'\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='stacked-bar')","7c8f8042":"# Print the datatypes and count of the dataframe\nprint(merged_dataframe.dtypes)\nprint(merged_dataframe.count())\n# Change the NaN values to the mean value of that column\nnan_list = ['Subjectivity', 'Objectivity', 'Positive', 'Negative', 'Neutral']\nfor col in nan_list:\n    merged_dataframe[col] = merged_dataframe[col].fillna(merged_dataframe[col].mean())\n\n# Recheck the count\nprint(merged_dataframe.count())\n# Separate the dataframe for input(X) and output variables(y)\nX = merged_dataframe.loc[:,'Subjectivity':'Adj Close']\ny = merged_dataframe.loc[:,'Label']\n# Set the validation size, i.e the test set to 20%\nvalidation_size = 0.20\n# Split the dataset to test and train sets\n# Split the initial 70% of the data as training set and the remaining 30% data as the testing set\ntrain_size = int(len(X.index) * 0.7)\nprint(len(y))\nprint(train_size)\nX_train, X_test = X.loc[0:train_size, :], X.loc[train_size: len(X.index), :]\ny_train, y_test = y[0:train_size+1], y.loc[train_size: len(X.index)]\nprint('Observations: %d' % (len(X.index)))\nprint('X Training Observations: %d' % (len(X_train.index)))\nprint('X Testing Observations: %d' % (len(X_test.index)))\nprint('y Training Observations: %d' % (len(y_train)))\nprint('y Testing Observations: %d' % (len(y_test)))\npyplot.plot(X_train['Objectivity'])\npyplot.plot([None for i in X_train['Objectivity']] + [x for x in X_test['Objectivity']])\npyplot.show()\nnum_folds = 10\nscoring = 'accuracy'\n# Append the models to the models list\nmodels = []\nmodels.append(('LR' , LogisticRegression()))\nmodels.append(('LDA' , LinearDiscriminantAnalysis()))\nmodels.append(('KNN' , KNeighborsClassifier()))\nmodels.append(('CART' , DecisionTreeClassifier()))\nmodels.append(('NB' , GaussianNB()))\nmodels.append(('SVM' , SVC()))\nmodels.append(('RF' , RandomForestClassifier(n_estimators=50)))\nmodels.append(('XGBoost', XGBClassifier()))","d1f1fbc4":"# Evaluate each algorithm for accuracy\nresults = []\nnames = []\n'''\nfor name, model in models:\n    kfold = KFold(n_splits=num_folds, random_state=42)\n    cv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring=scoring)\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg) '''\n\nfor name, model in models:\n    clf = model\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)\n    accu_score = accuracy_score(y_test, y_pred)\n    print(name + \": \" + str(accu_score))","56e10db8":"# prepare the model LDA\nscaler = StandardScaler().fit(X_train)\nrescaledX = scaler.transform(X_train)\nmodel_lda = LinearDiscriminantAnalysis()\nmodel_lda.fit(rescaledX, y_train)\n# estimate accuracy on validation dataset\nrescaledValidationX = scaler.transform(X_test)\npredictions = model_lda.predict(rescaledValidationX)\nprint(\"accuracy score:\")\nprint(accuracy_score(y_test, predictions))\nprint(\"confusion matrix: \")\nprint(confusion_matrix(y_test, predictions))\nprint(\"classification report: \")\nprint(classification_report(y_test, predictions))\n\nmodel_xgb = XGBClassifier()\nmodel_xgb.fit(rescaledX, y_train)\n# estimate accuracy on validation dataset\nrescaledValidationX = scaler.transform(X_test)\npredictions = model_xgb.predict(rescaledValidationX)\nprint(\"accuracy score:\")\nprint(accuracy_score(y_test, predictions))\nprint(\"confusion matrix: \")\nprint(confusion_matrix(y_test, predictions))\nprint(\"classification report: \")\nprint(classification_report(y_test, predictions))\n","08a0550d":"# Generating the ROC curve\ny_pred_proba = model_lda.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)\nroc_auc = auc(fpr, tpr)\n\n# Plot ROC curve\nprint(\"roc auc is :\" + str(roc_auc))\npyplot.plot([0, 1], [0, 1], 'k--')\npyplot.plot(fpr, tpr)\npyplot.xlabel('False Positive Rate')\npyplot.ylabel('True Positive Rate')\npyplot.title('ROC Curve')\npyplot.show()\n\n# AUC score using cross validation\nkfold_val = KFold(n_splits=num_folds, random_state=42)\nauc_score = cross_val_score(model_lda, X_test, y_test, cv=kfold_val, scoring='roc_auc')\nprint(\"AUC using cross val: \" + str(auc_score))\nmean_auc = np.mean(auc_score)\nprint(\"Mean AUC score is: \" + str(mean_auc))","ded1555c":"# Scaling Random Forests\n\nmodel_rf = RandomForestClassifier(n_estimators=1000)\nmodel_rf.fit(rescaledX, y_train)\n# estimate accuracy on validation dataset\nrescaledValidationX = scaler.transform(X_test)\npredictions = model_rf.predict(rescaledValidationX)\nprint(\"accuracy score:\")\nprint(accuracy_score(y_test, predictions))\nprint(\"confusion matrix: \")\nprint(confusion_matrix(y_test, predictions))\nprint(\"classification report: \")\nprint(classification_report(y_test, predictions))\n","3d602200":"features = merged_dataframe.drop(['Label'],axis=1).columns.values\n\nx, y = (list(x) for x in zip(*sorted(zip(model_xgb.feature_importances_, features), \n                                                            reverse = False)))\ntrace2 = go.Bar(\n    x=x ,\n    y=y,\n    marker=dict(\n        color=x,\n        colorscale = 'Viridis',\n        reversescale = True\n    ),\n    name='Feature importance for XGBoost',\n    orientation='h',\n)\n\nlayout = dict(\n    title='Barplot of Feature importances for XGBoost',\n     width = 1000, height = 1000,\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ))\n\nfig1 = go.Figure(data=[trace2])\nfig1['layout'].update(layout)\npy.iplot(fig1, filename='plots')\n","0ec6a71c":"x, y = (list(x) for x in zip(*sorted(zip(model_rf.feature_importances_, features), \n                                                            reverse = False)))\ntrace2 = go.Bar(\n    x=x ,\n    y=y,\n    marker=dict(\n        color=x,\n        colorscale = 'Viridis',\n        reversescale = True\n    ),\n    name='Feature importance for Random Forests',\n    orientation='h',\n)\n\nlayout = dict(\n    title='Barplot of Feature importances for Random Forests',\n     width = 1000, height = 1000,\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ))\n\nfig1 = go.Figure(data=[trace2])\nfig1['layout'].update(layout)\npy.iplot(fig1, filename='plots')\n","98148004":"# XGBoost on Stock Price dataset, Tune n_estimators and max_depth\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import LabelEncoder\nimport matplotlib\n\nmatplotlib.use('Agg')\nmodel = XGBClassifier()\nn_estimators = [150, 200, 250, 450, 500, 550, 1000]\nmax_depth = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(max_depth)\nbest_depth = 0\nbest_estimator = 0\nmax_score = 0\nfor n in n_estimators:\n    for md in max_depth:\n        model = XGBClassifier(n_estimators=n, max_depth=md)\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n        score = accuracy_score(y_test, y_pred)\n        if score > max_score:\n            max_score = score\n            best_depth = md\n            best_estimator = n\n        print(\"Score is \" + str(score) + \" at depth of \" + str(md) + \" and estimator \" + str(n))\nprint(\"Best score is \" + str(max_score) + \" at depth of \" + str(best_depth) + \" and estimator of \" + str(best_estimator))\n","25308e37":"imp_features_df = merged_dataframe[['Low', \"Neutral\", 'Close', 'Objectivity', 'Date']]\nXi_train, Xi_test = X.loc[0:train_size, :], X.loc[train_size: len(X.index), :]\nclf = XGBClassifier(n_estimators=500, max_depth=3)\nclf.fit(Xi_train, y_train)\nyi_pred = clf.predict(Xi_test)\nscore = accuracy_score(y_test, yi_pred)\nprint(\"Score is \"+ str(score))\n","8208e410":"from sklearn.decomposition import PCA\n\npca = PCA(n_components=3)\npca.fit(X)\ntransformed = pca.transform(X)\n\ntransformed.shape\nprint(type(transformed))","b2dc9eb4":"pca_df = pd.DataFrame(transformed)\n\nX_train_pca, X_test_pca = pca_df.loc[0:train_size, :], pca_df.loc[train_size: len(X.index), :]\n\nclf = XGBClassifier(n_estimators=500, max_depth=3)\nclf.fit(X_train_pca, y_train)\ny_pred_pca = clf.predict(X_test_pca)\nscore = accuracy_score(y_test, y_pred_pca)\nprint(\"Score is \"+ str(score))\n","beb962ba":"pca_matrix = confusion_matrix(y_test, y_pred_pca)\npca_report = classification_report(y_test, y_pred_pca)\nprint(\"Confusion Matrix: \\n\" + str(pca_matrix))\nprint(\"Classification report: \\n\" + str(pca_report))","0b630b68":"# Generating the ROC curve\ny_pred_proba_pca = clf.predict_proba(X_test_pca)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_proba_pca)\nroc_auc = auc(fpr, tpr)\nprint(\"AUC score is \" + str(roc_auc))\n\n# Plot ROC curve\nprint(\"roc auc is :\" + str(roc_auc))\npyplot.plot([0, 1], [0, 1], 'k--')\npyplot.plot(fpr, tpr)\npyplot.xlabel('False Positive Rate')\npyplot.ylabel('True Positive Rate')\npyplot.title('ROC Curve')\npyplot.show()\n","994a4849":"<div class=\"span5 alert alert-info\">\n<p>\nPlotted histograms for individual columns to see the distribution of values.\n<br\/><br\/>\nThe x axis is the column values and the y axis is the frequency of those values.\n<\/p>\n<\/div>","eef3c79c":"<div class=\"span5 alert alert-info\">\n<h3>1. Data Preparation:<\/h3>\n<br\/>\nImported all the necessary modules for the project\n<br\/><br\/>\nLoaded the dataset as a dataframe and parsed the date column to be read by the dataframe as dates type\nChecked the top 5 rows of the dataframe to see how the columns are aligned.\n<br\/><br\/>\nThe 'combined_stock_data.csv' initially only had the headlines(Top1 through Top25). Each row was iterated over an algorithm which generated the Subjectivity, Objectivity, Positive, Negative, Neutral sentiments of the respective headlines of each row.\n<br\/><br\/>\nThe algorithm was accepting only a single sentence and was providing the respective sentiments in percentage. I modified the algorithm iterate over all of the individuals rows and simultaneously create the Subjectivity, Objectivity, Negative, Positive, Neutral values and assign itself to the columns in the dataframe.\n<br\/><br\/>\nThe headlines Top1 through Top25 were concatenated and then passed on to the algorithm\n<br\/><br\/>\nThe original algorithm : https:\/\/github.com\/nik0spapp\/usent\n<br\/><br\/>\nModified algorithm : https:\/\/github.com\/ShreyamsJain\/Stock-Price-Prediction-Model\/blob\/master\/Sentence_Polarity\/sentiment.py\n<br\/>\n<\/p>\n<\/div>","9692d403":"<div class=\"span5 alert alert-info\">\n<p>\nAs data distributions are in varying ranges, it would be good to scale all of our data and then use it to train our \nalgorithm.\n<br\/><br\/>\nLets print out the accuracy score, confusion matrix.\n    <\/p><\/div>","847ba4bf":"<div class=\"span5 alert alert-info\">\n<p>\nNow, we will iterate over all of the machine learning classifiers and in each loop , we will train against the\nalgorithm, predict the outputs with inputs from the testing split.\n<br\/><br\/>\nThe actual and the predicted outputs are compared to calculate the accuracy.\n<br\/><br\/>\nWe see that LDA seems to be giving a high accuracy score, but accuracy is still not the most trustworthy measure.\n<\/p><\/div>","f5133504":"<div class=\"span5 alert alert-info\">\n<p>\nBelow is the feature importance graph for Random Forests.\n<\/p>\n<\/div>","c97e6a85":"<div class=\"span5 alert alert-info\">\n<p>\n<h3>Fine Tuning XGBoost<\/h3>\n<br>\nAs of now the model that seems to be performing the best is the XGBoost model.\n<br\/><br\/>\nLets see if we can fine tune it further to increase the accuracy of the model.\n<\/p><\/div>","1bdc3397":"<div class=\"span5 alert alert-info\">\n<p>\n<h3>5. Feature Importances:<\/h3>\n<br\/>    \nBelow you can find the feature with highest to least important features plotted in the graph.\n<br\/><br\/>\nThis is for XGBoost.\n<\/p><\/div>","fbf31f37":"<div class=\"span5 alert alert-info\">\n<h3>PCA transformation:<\/h3>\n    <\/div>","6dc4034d":"<div class=\"span5 alert alert-info\">\n<p>\nMerged the 5 columns(Subjectivity, Objectivity, Positive, Negative, Neutral) with the stock_data dataframe.\n<br\/><br\/>\nValidated the merged dataframe to see the 2 dataframes are concatenated by checking the top 5 rows of the merged_dataframe.\n<\/p>\n<\/div> ","f0ea107a":"<div class=\"span5 alert alert-info\"><p>\n<h3>3.Feature inspection and filtering<\/h3>\n<br\/>\nLets check for NaN values in individual columns of the dataframe.\n<\/p>\n<\/div>","113044c7":"<div class=\"span5 alert alert-info\">\n<p>\n    <br\/>\nNow lets try and train our data using a TimeSeriesSplit which is specifically used for splitting the dataset to \ntraining and testing datasets.\n<br\/><br\/>\nBy specifying the number of splits, we can split the data on a sample of 40%, 70% and 100% of the dataset.\n<br\/><br\/>\nThe plots below shows the splits of the datasets and the respective number of samples in each split.\n<\/p>\n<\/div>","35858890":"<div class=\"span5 alert alert-info\">\n<p>\n<h3>4. Training<\/h3>\n<br\/>\nRecheck the dataframe to see if the dataset is ready for train.\n<br\/><br\/>\nThere are certain NaN values in many columns of the dataframe.\n<br\/><br\/>\nReplace the NaN values with the mean values of the respective column.\n<br\/><br\/>\nSplit the merged dataframe to inputs(X) and outputs(y)\n<br\/><br\/>\nIn our dataset, we have columns Subjectivity through Adj Close as inputs and the Label column output.\n<br\/><br\/>\nNow, we will split our dataset to training and test samples. Lets train out model on first 80% of the data \nand test our prediction model on remaining 20% of the data.\n<br\/><br\/>\nAs this is a time series, it is important we do not randomly pick training and testing samples.\n<br\/><br\/>\nLets consider a few machine learning algorithms to perform our training on.\nLogistic Regression\nLinear Discriminant Analysis\nK Nearest Neighbors\nDecision trees\nNaive Bayes\nSupport Vector Classifier\nRandom Forest Classifier\n<br\/><br\/>\nLets add all of these classifiers to a list 'models'\n<br\/><br\/>\nAfter splitting the dataset, we can see that there are 1393 samples for training and 597 samples for testing\n<\/p>\n<\/div>","386dea57":"<div class=\"span5 alert alert-info\">\n<h1>Stock Market Price Prediction with New Data<\/h1>\n\n<p><b>Breif Overview:<\/b> \n    <br\/><br\/>\nThe model created below is for prediction the stock prices of a Company.\n<br\/>\nThere are two datasets\n<br\/><br\/>\n1. Stock Prices Dataset for Dow Jones Inc\n<br\/><br\/>\n2. Top 25 headlines for everyday for the past 8 years\n<br\/><br\/>\nThe notebook is briefly summarized as follows:\n<br\/><br\/>\n1. Data Preparation - Preparing data for evaluation.\n<br\/><br\/>\n2. Data Quality Checks - Performing basic checks on data for better understanding of data.\n<br\/><br\/>\n3. Feature inspection and filtering - Correlation and feature Mutual information plots against the target variable. Inspection of the Binary, categorical and other variables.\n<br\/><br\/>\n4. Feature importance ranking via learning models\n<br\/><br\/>\n5. Training - training data against multiple machine learning algorthms and fine tuning a couple of algorithms for accuracy\n    <br\/>\n<\/p> <\/div>","fe393036":"<div class=\"span5 alert alert-info\">\n<p>\n<h4>Correlation Map for features:<\/h4>\n<br\/>\nNow, we will plot a heat map and a scatter matrix to see the correlation of the columns with each other.\n<br\/><br\/>\nYou can see the heat map with pearson correlation values in the plot below.\n<br\/><br\/>\nThis gave me a better understanding to see if there are any dependant variables or if any of the variables are highly correlated.\n<br\/><br\/>\nSome variables Subjectivity, Objectivity are negatively correlated. There are very few variables which seem to have a very high correlation. Thus, at this point we can conclude that we do not need any sort of dimensionality reduction technique to be applied.\n<\/p>\n<\/div>","a693147e":"<div class=\"span5 alert alert-info\">\n<p>\nChecked the shape and datatypes of the loaded dataset\n<\/p>\n<\/div>","eb9c0426":"<div class=\"span5 alert alert-info\">\n<p>\nWe have the Label(i.e the output column) column in the 2nd position.\n<br\/><br\/>\nLets move it to the end of the dataframe to have a clear view of inputs and outputs\n<\/p>\n<\/div>","41b3889d":"<div class=\"span5 alert alert-info\">\n<p>\n<h3>2. Data Quality Checks:<\/h3>\n<br\/>\nChecked the statistics of individual columns in the dataframe.\n<br\/><br\/>\nAs you can see below there are no outliers in any of the columns, however, some of the columns have NaN values\n<\/p>\n<\/div>","e390de77":"<div class=\"span5 alert alert-info\">\n<h3> Fine tuning with important features:<\/h3>","4450cfc0":"<div class=\"span5 alert alert-info\">\n<p>\nWe have the volumn column in Integer format. Lets change it to float, same as the rest of the columns so we do not have any difficulties in making calculations at a later point.\n<\/p>\n<\/div>","89e893ca":"<div class=\"span5 alert alert-info\">\n<p>\nPlot 1: Scatter plot of Stock Prices vs the Subjectivity.<br\/>\n        Stock Value of 0 means the Stock Value reduced since the previous day.<br\/>\n        Stock Value of 1 means the Stock Value increased or remained the same since the previous day.\n<br\/>        \nPlot 2: Scatter plot of Stock Prices vs the Objectivity.<br\/>\n        Stock Value of 0 means the Stock Value reduced since the previous day.<br\/>\n        Stock Value of 1 means the Stock Value increased or remained the same since the previous day.\n<br\/>                \nPlot 3: Histogram of Subjectivity column.<br\/>\n        The x axis are the values of Subjectivity and y axis is its respective frequency.<br\/>\n        The plot seems to be normally distributed.\n<br\/>       \nPlot 4: Histogram of Objectivity column.<br\/>\n        The x axis are the values of Objectivity and y axis is its respective frequency.<br\/>\n        The plot seems to be normally distributed.<br\/>\n    <\/p><\/div>","c68aeea5":"<div class=\"span5 alert alert-info\">\n<p>\nLoad the Dow Jones dataset to a dataframe stock_data which contains 8 years of Stock Price data.\n<br\/><br\/>\nParse the date as a date type and check the top 5 rows of the dataframe.\n<br\/><br\/>\nChecked the top 5 rows of the dataframe\n<\/p>\n<\/div>","6ae28f2c":"<div class=\"span5 alert alert-info\">\n<p>\nChecked the datatypes of all of the columns. Below is the list of data types\n<p>\n<\/div>"}}