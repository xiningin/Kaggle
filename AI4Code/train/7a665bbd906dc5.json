{"cell_type":{"48804be5":"code","c979dbb2":"code","cddade7b":"code","0c904f1b":"code","a6150466":"code","9357703c":"code","7c49aead":"code","c62d5ae8":"code","d71c0c57":"code","f1aa5b68":"code","d962b901":"code","66dd98af":"code","7517991e":"code","8f784693":"code","3657c646":"code","73978249":"code","db03bc49":"code","6bcd6976":"code","c4a195a5":"code","eb260f6f":"code","2eb5eab5":"code","884c98fe":"code","cb0a3ceb":"markdown"},"source":{"48804be5":"%%capture\n#suppress output and install the full pyCaret library\n!pip install pycaret[full]","c979dbb2":"## Basic packages\nimport pandas as pd\nimport numpy as np\n\n#pycaret\nfrom pycaret.regression import *","cddade7b":"#this is an aesthetic choice and just removes the many warnings that some functions and comands produce\n#it helps significantly declutter the workbook\nimport warnings\nwarnings.filterwarnings('ignore')","0c904f1b":"#import data into pandas DataFrames\ntrain = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv', index_col = 'row_id')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv', index_col = 'row_id')","a6150466":"#Credit to https:\/\/www.kaggle.com\/jaredfeng\/tps-jan22-inprog-v5\n\nholiday_path = '..\/input\/holidays-finland-norway-sweden-20152019\/Holidays_Finland_Norway_Sweden_2015-2019.csv'\n\ndef GetHoliday(holiday_path, df):\n    \"\"\"\n    Get a boolean feature of whether the current row is a holiday sale\n    \"\"\"\n    \n    holiday = pd.read_csv(holiday_path)\n    fin_holiday = holiday.loc[holiday.Country == 'Finland']\n    swe_holiday = holiday.loc[holiday.Country == 'Sweden']\n    nor_holiday = holiday.loc[holiday.Country == 'Norway']\n    df['fin holiday'] = df.date.isin(fin_holiday.Date).astype(int)\n    df['swe holiday'] = df.date.isin(swe_holiday.Date).astype(int)\n    df['nor holiday'] = df.date.isin(nor_holiday.Date).astype(int)\n    \n    df['holiday'] = np.zeros(df.shape[0]).astype(int)\n    df.loc[df.country == 'Finland', 'holiday'] = df.loc[df.country == 'Finland', 'fin holiday']\n    df.loc[df.country == 'Sweden', 'holiday'] = df.loc[df.country == 'Sweden', 'swe holiday']\n    df.loc[df.country == 'Norway', 'holiday'] = df.loc[df.country == 'Norway', 'nor holiday']\n    df.drop(['fin holiday', 'swe holiday', 'nor holiday'], axis=1, inplace=True)\n    return df\n\ntrain = GetHoliday(holiday_path, train)\ntest = GetHoliday(holiday_path, test)","9357703c":"# Credit to https:\/\/www.kaggle.com\/ranjeetshrivastav\/tps-jan-21-base-xgb\n# and https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\/notebook\n\ndef feature_eng(df):\n    df['date'] = pd.to_datetime(df['date'])\n    df['week']= df['date'].dt.week\n    df['year'] = 'Y' + df['date'].dt.year.astype(str)\n    df['quarter'] = 'Q' + df['date'].dt.quarter.astype(str)\n    df['day'] = df['date'].dt.day\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df.loc[(df.date.dt.is_leap_year) & (df.dayofyear >= 60),'dayofyear'] -= 1\n    df['weekend'] = df['date'].dt.weekday >=5\n    df['weekday'] = 'WD' + df['date'].dt.weekday.astype(str)\n    df.drop(columns=['date'],inplace=True)  \n\nfeature_eng(train)\nfeature_eng(test)","7c49aead":"train.dtypes","c62d5ae8":"# Credit to https:\/\/www.kaggle.com\/c\/web-traffic-time-series-forecasting\/discussion\/36414\ndef SMAPE(y_true, y_pred):\n    denominator = (y_true + np.abs(y_pred)) \/ 200.0\n    diff = np.abs(y_true - y_pred) \/ denominator\n    diff[denominator == 0] = 0.0\n    return np.mean(diff)","d71c0c57":"#setting up the pyCaret regression algorithm\nreg = setup(data = train,\n            target = 'num_sold',\n            train_size = 0.75, #75:25 train\/validation split\n            normalize = True, #normalisation helps some algorithms\n            normalize_method = 'robust', #resilient to outliers\n            transform_target = True, #applies transformation to target column\n            data_split_shuffle = False, #so that we do not use \"future\" observations to predict \"past\" observations\n            #create_clusters = True, #adds additional feature by assigning clusters\n            feature_interaction = True, #new features are created by interacting (a * b) all the numeric variables in the dataset\n            #use_gpu = True, #use GPU acceleration to train models\n            silent = True, #removes need for confirmation step\n            fold = 20, #number of cross-fold validation folds\n            n_jobs = -1) #use all processor threads","f1aa5b68":"#list all available models\nmodels()","d962b901":"#adds the metric created previously to the pyCaret suite of metrics\nadd_metric('SMAPE', 'SMAPE', SMAPE, greater_is_better = False)","66dd98af":"#compare_models(sort = 'MAPE')","7517991e":"#compares all models available and returns top N models to then be used\nN = 3\ntop = compare_models(sort = 'SMAPE', n_select = N)","8f784693":"#Voting Classifier that blends predictions of individial models\n#only uses training set and predicts on valiation set\nblend = blend_models(top)\npredict_model(blend);","3657c646":"# use test and validation to train model and predicts on validation set\nfinal_blend = finalize_model(blend)\npredict_model(final_blend);","73978249":"#model stacking\n#only uses training set and predicts on valiation set\n#stack = stack_models(top)\n#predict_model(stack);","db03bc49":"# use test and validation to train model and predicts on validation set\n#final_stack = finalize_model(stack)\n#predict_model(final_stack);","6bcd6976":"#tuned_top = [tune_model(i, optimize = 'MAPE', choose_better = True) for i in top]","c4a195a5":"#tuned_blend = blend_models(tuned_top)\n#predict_model(tuned_blend);","eb260f6f":"#final_tuned_blend = finalize_model(tuned_blend)\n#predict_model(final_tuned_blend);","2eb5eab5":"#create predictions for test observations\n\nunseen_predictions_blend = predict_model(final_blend, data=test)\nunseen_predictions_blend.head()","884c98fe":"#creates, saves, and prints the submission csv file\n\nassert(len(test.index)==len(unseen_predictions_blend))\n\nsub = pd.DataFrame(list(zip(test.index, unseen_predictions_blend.Label)),columns = ['row_id', 'num_sold'])\n\nsub.to_csv('submission.csv', index = False)\n\nprint(sub)","cb0a3ceb":"This notebooks incorporates the improvements upon my previous work made by https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\/notebook - thanks for elaborating on my work!"}}