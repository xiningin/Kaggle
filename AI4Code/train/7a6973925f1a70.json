{"cell_type":{"a0bd924c":"code","233b685c":"code","a8a029ea":"code","0fb3514f":"code","7c7a31ed":"code","770b44e3":"code","1eca2059":"code","f285de3c":"code","4c73c194":"code","34de8258":"code","9c3d5cad":"code","fa1ef62a":"code","b174886f":"code","83acc713":"code","9d086da6":"code","f39ad6e4":"code","e9b74324":"code","7ff7c740":"code","deee0076":"code","5b4175d9":"code","6988772c":"code","c4604398":"markdown","bf5868e2":"markdown","300b640f":"markdown","1184201b":"markdown","36329bbc":"markdown","7af8a76e":"markdown","1f786bec":"markdown","6a43915a":"markdown","1558843d":"markdown","3627f6eb":"markdown","75a5bed1":"markdown","81f1aaaf":"markdown","ba0e0c24":"markdown","9b5c68d9":"markdown","6035d67d":"markdown","0f7ca7ed":"markdown","61c56c52":"markdown","c425c9ed":"markdown","79013eb9":"markdown"},"source":{"a0bd924c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","233b685c":"dataframe = pd.read_csv(\"..\/input\/knn-data1\/KNN_Project_Data\")","a8a029ea":"dataframe.head()","0fb3514f":"sns.pairplot(dataframe, hue=\"TARGET CLASS\")","7c7a31ed":"from sklearn.preprocessing import StandardScaler","770b44e3":"scaler = StandardScaler()","1eca2059":"scaler.fit(dataframe.drop(\"TARGET CLASS\", axis=1))","f285de3c":"scaled_feat = scaler.transform(dataframe.drop(\"TARGET CLASS\", axis=1))\nscaled_feat","4c73c194":"df_feat = pd.DataFrame(scaled_feat, columns=dataframe.columns[:-1])\ndf_feat.head()","34de8258":"from sklearn.model_selection import train_test_split","9c3d5cad":"X = df_feat\ny = dataframe[\"TARGET CLASS\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)","fa1ef62a":"from sklearn.neighbors import KNeighborsClassifier","b174886f":"knn = KNeighborsClassifier(n_neighbors=1)","83acc713":"knn.fit(X_train, y_train)","9d086da6":"predictions = knn.predict(X_test)","f39ad6e4":"from sklearn.metrics import confusion_matrix, classification_report","e9b74324":"print(confusion_matrix(y_test, predictions))","7ff7c740":"print(classification_report(y_test, predictions))","deee0076":"error_rate = []\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train, y_train)\n    pred_new = knn.predict(X_test)\n    error_rate.append(np.mean(pred_new != y_test))","5b4175d9":"plt.figure(figsize=(15,4))\nplt.plot(range(1,40), error_rate)","6988772c":"knn = KNeighborsClassifier(n_neighbors=15)\nknn.fit(X_train, y_train)\npred_new = knn.predict(X_test)\nprint(confusion_matrix(y_test, predictions))\nprint(classification_report(y_test, predictions))","c4604398":"**Create a KNN model instance with n_neighbors=1**","bf5868e2":"# EDA\n\nSince this data is artificial, we'll just do a large pairplot with seaborn.\n\n**Use seaborn on the dataframe to create a pairplot with the hue indicated by the TARGET CLASS column.**","300b640f":"**Check the head of the dataframe.**","1184201b":"** Fit scaler to the features.**","36329bbc":"# Choosing a K Value\nLet's go ahead and use the elbow method to pick a good K Value!\n\n** Create a for loop that trains various KNN models with different k values, then keep track of the error_rate for each of these models with a list. Refer to the lecture if you are confused on this step.**","7af8a76e":"** Create a confusion matrix and classification report.**","1f786bec":"**Use the predict method to predict values using your KNN model and X_test.**","6a43915a":"**Fit this KNN model to the training data.**","1558843d":"# K Nearest Neighbors Project \n\n## Import Libraries\n**Import pandas,seaborn, and the usual libraries.**","3627f6eb":"**Now create the following plot using the information from your for loop.**","75a5bed1":"# Train Test Split\n\n**Use train_test_split to split your data into a training set and a testing set.**","81f1aaaf":"**Use the .transform() method to transform the features to a scaled version.**","ba0e0c24":"# Using KNN\n\n**Import KNeighborsClassifier from scikit learn.**","9b5c68d9":"** Create a StandardScaler() object called scaler.**","6035d67d":"**Convert the scaled features to a dataframe and check the head of this dataframe to make sure the scaling worked.**","0f7ca7ed":"## Get the Data\n** Read the 'KNN_Project_Data csv file into a dataframe **","61c56c52":"# Standardize the Variables\n\nTime to standardize the variables.\n\n** Import StandardScaler from Scikit learn.**","c425c9ed":"# Predictions and Evaluations\nLet's evaluate our KNN model!","79013eb9":"## Retrain with new K Value\n\n**Retrain your model with the best K value (up to you to decide what you want) and re-do the classification report and the confusion matrix.**"}}