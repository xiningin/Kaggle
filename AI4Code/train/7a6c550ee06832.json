{"cell_type":{"e278fce9":"code","a989e54d":"code","4e42456f":"code","ec1465eb":"code","e162d845":"code","102c0735":"code","143a60e8":"code","0e160565":"code","c92441b1":"code","8ffaadad":"code","e31f0d63":"code","172a2e12":"code","6cdc256e":"code","b267b065":"code","a63b248b":"code","83135e4b":"code","ad4cddf1":"code","fac4b27e":"code","f9ad0cde":"code","2aba0d30":"code","fcd56219":"code","58d7b3ac":"code","55a06161":"code","382f699a":"code","610cee7a":"code","abf263f8":"code","01146a22":"code","3a089a4a":"code","dc83e1b6":"code","70459490":"code","048da955":"code","872a7dc5":"code","ec167a3b":"code","bf8e0b95":"code","2052938a":"code","19f7de0f":"code","a0e1a11d":"code","3217fa05":"code","50034bff":"code","bd7d4395":"code","d9df1931":"code","ccf36d0f":"code","c5b5a7f1":"code","82ca146b":"code","842d3062":"code","efa8845e":"code","e7991a1c":"code","2ae2be99":"code","05ee7d5d":"code","8dc2cf02":"code","56baa32f":"code","2114ae64":"code","c4066307":"code","1b4aab9c":"code","e4a07c6d":"code","e4166ae4":"code","8faa60d4":"code","8860c4a7":"code","ff44ce9b":"code","585eaf47":"code","7f0c1ed6":"code","e8ce9d91":"code","0da5df7e":"code","f6e61543":"code","a9c60c33":"code","ba04d8a5":"code","017a91fe":"code","322c36af":"code","2e21f4d1":"code","1434fed4":"code","85463dc2":"code","dda8d4a0":"code","7140a477":"code","cb9cdf02":"code","3438daa4":"code","98f997c5":"code","ae37cea9":"code","c1ba046c":"code","e8438e32":"code","99aad247":"code","3f4a3a23":"code","68456520":"code","67176782":"code","c914f0d8":"code","b76ba1c7":"code","ba240b57":"code","a285c27b":"code","780bdb10":"code","1a0a89b3":"code","09ea0fea":"code","c8e96278":"code","1e29fa19":"code","145fce7a":"code","92ad4742":"code","78c4557f":"code","662a16a7":"code","d571c977":"code","d69ab45a":"code","98d53d7a":"code","6cfa6de3":"code","e7436d2e":"code","e9309867":"code","8069b2d8":"code","0d5664c5":"code","1dcb4a08":"code","07f6c795":"code","3af11c8e":"code","97bc2dc2":"code","f0828d8d":"code","c73dd66b":"code","2a073dfa":"code","f655f039":"code","341d8d59":"code","300be495":"code","3c436ad6":"code","65466dd0":"code","9ae6732b":"code","0d983882":"code","d9fe1cc2":"code","cb0675c1":"code","48148de1":"code","dacfd01d":"code","454c9e25":"code","2ac9ca5b":"code","c44facc2":"code","0ff698e1":"code","7283de03":"code","d36b2a85":"code","634003fd":"code","e9783fb6":"code","469cf411":"code","c1ec6fd3":"code","5045f4e1":"code","e700916f":"code","66e38b43":"code","706d3549":"code","d22903cf":"code","7fd5709d":"code","59f1ce7b":"code","b862637c":"code","b19e6b88":"code","1b32e2ed":"code","6e5028df":"code","8f3f99c6":"code","502175c6":"code","175fa1ed":"code","a70b2388":"code","968078ea":"code","35b8f246":"code","c583bf41":"code","adbc1cf1":"code","9cc2e3b7":"code","7a000119":"code","a9966be4":"code","e38e3f12":"code","72b7e6fa":"code","f2d425a3":"code","d4386d58":"code","c25a072d":"code","cc5cd19c":"code","6d2fef0b":"code","2cf7bcca":"code","d549a2ee":"code","ad819855":"code","4efd16db":"code","9c1e0813":"code","d526bc97":"code","82940b40":"code","f2554ddc":"code","41569bfe":"markdown","bb8ac0c3":"markdown","49726aa4":"markdown","334f7ab9":"markdown","69d9b53f":"markdown","e3e8686b":"markdown","abc11826":"markdown","de9c0bc6":"markdown","0a578af0":"markdown","88d44878":"markdown","c874f9e5":"markdown","71fd04fe":"markdown","c6f10436":"markdown","4092a87f":"markdown","ce2c356c":"markdown","6effc319":"markdown","b689925f":"markdown","8f2682e8":"markdown","909c3d83":"markdown","1da68737":"markdown","7feaccdc":"markdown","444cec9b":"markdown","54112f29":"markdown","006f2319":"markdown","e455558e":"markdown","949c89c4":"markdown","3a81842f":"markdown","aeb144e7":"markdown","5c1a119a":"markdown","9e1aa35c":"markdown","22da0e21":"markdown","180d0c14":"markdown","a770ad17":"markdown","71bddbbe":"markdown","f0ca2847":"markdown","3a4e6b98":"markdown","742d65a2":"markdown","5d5fa271":"markdown","3616751f":"markdown","72d0e233":"markdown","7381e105":"markdown","92f003cf":"markdown","4932abd9":"markdown","0f4aeef8":"markdown","2ac32ca2":"markdown","2ca41c18":"markdown","76dd9f18":"markdown","2538b14e":"markdown","18b25c16":"markdown"},"source":{"e278fce9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a989e54d":"train_df=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","4e42456f":"print('training dataframe shape',train_df.shape)\nprint('test dataframe shape',test_df.shape)","ec1465eb":"train_df.info()","e162d845":"test_df.isna().sum()","102c0735":"from collections import Counter\nsurvived_cntr=Counter(train_df['Survived'])\nprint(survived_cntr)\nprint('Percentage of people survived are %.3f%%'%(survived_cntr[1]\/(survived_cntr[0]+survived_cntr[1])*100))\nprint('Percentage of people not survived are %.3f%%'%(survived_cntr[0]\/(survived_cntr[0]+survived_cntr[1])*100))","143a60e8":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","0e160565":"train_df['Pclass'].value_counts()","c92441b1":"test_df['Pclass'].value_counts()","8ffaadad":"sns.countplot('Pclass',hue='Survived',data=train_df);\nplt.xlabel('Passenger Class',fontsize=15)\nplt.ylabel('Frequency of Passenger Class',fontsize=15)\nplt.title('Frequency of Passenger Class',fontsize=15)\nplt.show();","e31f0d63":"pclass3_survived=dict(train_df[train_df['Pclass']==3]['Survived'].value_counts())\nprint('Passenger Travelled in Class 3 their chance of surival percentage is %.3f%%'%(pclass3_survived[1]\/(pclass3_survived[1]+pclass3_survived[0])*100))\nprint('Passenger Travelled in Class 3 their chance of non surival percentage is %.3f%%'%(pclass3_survived[0]\/(pclass3_survived[1]+pclass3_survived[0])*100))","172a2e12":"pclass1_survived=dict(train_df[train_df['Pclass']==1]['Survived'].value_counts())\nprint('Passenger Travelled in Class 1 their chance of surival percentage is %.3f%%'%(pclass1_survived[1]\/(pclass1_survived[1]+pclass1_survived[0])*100))\nprint('Passenger Travelled in Class 1 their chance of non surival percentage is %.3f%%'%(pclass1_survived[0]\/(pclass1_survived[1]+pclass1_survived[0])*100))","6cdc256e":"pclass2_survived=dict(train_df[train_df['Pclass']==2]['Survived'].value_counts())\nprint('Passenger Travelled in Class 1 their chance of surival percentage is %.3f%%'%(pclass2_survived[1]\/(pclass2_survived[1]+pclass2_survived[0])*100))\nprint('Passenger Travelled in Class 1 their chance of non surival percentage is %.3f%%'%(pclass2_survived[0]\/(pclass2_survived[1]+pclass2_survived[0])*100))","b267b065":"from sklearn.preprocessing import LabelEncoder\nclass_lbl_enc=LabelEncoder()\nPclass_train=class_lbl_enc.fit_transform(train_df['Pclass'])\nPclass_test=class_lbl_enc.transform(test_df['Pclass'])","a63b248b":"Pclass_train=Pclass_train.reshape(-1,1)\nPclass_test=Pclass_test.reshape(-1,1)","83135e4b":"print('Pclass train',Pclass_train.shape)\nprint('Pclass test',Pclass_test.shape)","ad4cddf1":"train_df['Last_Name']=train_df['Name'].apply(lambda x:x.split(',')[0].strip())\ntrain_df['Prefix_Name']=train_df['Name'].apply(lambda x:x.split(',')[1].split('.')[0].strip())\ntrain_df['First_Name']=train_df['Name'].apply(lambda x:x.split(',')[1].split('.')[1].strip())","fac4b27e":"test_df['Last_Name']=test_df['Name'].apply(lambda x:x.split(',')[0].strip())\ntest_df['Prefix_Name']=test_df['Name'].apply(lambda x:x.split(',')[1].split('.')[0].strip())\ntest_df['First_Name']=test_df['Name'].apply(lambda x:x.split(',')[1].split('.')[1].strip())","f9ad0cde":"train_df['Prefix_Name']=train_df['Prefix_Name'].apply(lambda x:\"Miss\" if x=='Mlle' else x)\ntrain_df['Prefix_Name']=train_df['Prefix_Name'].apply(lambda x:\"Miss\" if x=='Ms' else x)\ntrain_df['Prefix_Name']=train_df['Prefix_Name'].apply(lambda x:\"Mrs\" if x=='Mme' else x)\ntrain_df['Prefix_Name']=train_df['Prefix_Name'].apply(lambda x:\"Mr\" if x=='Jonkheer' else x)\ntrain_df['Prefix_Name']=train_df['Prefix_Name'].apply(lambda x:\"NONE\" if x=='Dona' else x)\ntrain_df['Prefix_Name']=train_df['Prefix_Name'].apply(lambda x:\"NONE\" if x=='the Countess' else x)","2aba0d30":"test_df['Prefix_Name']=test_df['Prefix_Name'].apply(lambda x:\"Miss\" if x=='Mlle' else x)\ntest_df['Prefix_Name']=test_df['Prefix_Name'].apply(lambda x:\"Miss\" if x=='Ms' else x)\ntest_df['Prefix_Name']=test_df['Prefix_Name'].apply(lambda x:\"Mrs\" if x=='Mme' else x)\ntest_df['Prefix_Name']=test_df['Prefix_Name'].apply(lambda x:\"Mr\" if x=='Jonkheer' else x)\ntest_df['Prefix_Name']=test_df['Prefix_Name'].apply(lambda x:\"NONE\" if x=='Dona' else x)\ntest_df['Prefix_Name']=test_df['Prefix_Name'].apply(lambda x:\"NONE\" if x=='the Countess' else x)","fcd56219":"plt.figure(figsize=(10,8))\nsns.countplot(x='Prefix_Name',hue='Survived',data=train_df);\nplt.xlabel(['Mr','Mrs','Miss','Mstr','Don','Rev','Dr','Mjr','Lady','Sir','Col','Capt','None'],fontsize=15)\nplt.ylabel('Frequencies',fontsize=15)\nplt.title('Count of surviving based on the prefix Name',fontsize=15)\nplt.legend(loc='upper right');\nplt.show();","58d7b3ac":"from sklearn.preprocessing import OneHotEncoder\nprefix_name_ohe=OneHotEncoder()\ntransformed_prefix_name_train=prefix_name_ohe.fit_transform(train_df['Prefix_Name'].values.reshape(-1,1))\ntransformed_prefix_name_test=prefix_name_ohe.transform(test_df['Prefix_Name'].values.reshape(-1,1))\nprint(transformed_prefix_name_train.shape)\nprint(transformed_prefix_name_test.shape)","55a06161":"train_df['Sex'].value_counts()","382f699a":"test_df['Sex'].value_counts()","610cee7a":"plt.figure(figsize=(6,3))\nsns.countplot('Sex',hue='Survived',data=train_df)\nplt.xlabel('Sex category',fontsize=15)\nplt.ylabel('Frequencies',fontsize=15)\nplt.title('Count of surviving based on the Sex Category',fontsize=15)\nplt.legend(loc='upper right');\nplt.show();","abf263f8":"sex_ohe=OneHotEncoder()\ntransformed_sex_train=sex_ohe.fit_transform(train_df['Sex'].values.reshape(-1,1))\ntransformed_sex_test=sex_ohe.transform(test_df['Sex'].values.reshape(-1,1))","01146a22":"print(transformed_sex_train.shape)\nprint(transformed_sex_test.shape)","3a089a4a":"train_df['Age'].isna().sum()","dc83e1b6":"test_df['Age'].isna().sum()","70459490":"train_df['Age'].hist(bins=8);\nplt.xlabel('Age field',fontsize=15)\nplt.ylabel('Frequencies',fontsize=15)\nplt.title('Histogram of Age Field',fontsize=15)\nplt.show();","048da955":"from sklearn.impute import KNNImputer\nage_impute_train=KNNImputer(n_neighbors=5)\ntransformed_age_train=age_impute_train.fit_transform(train_df['Age'].values.reshape(-1,1))","872a7dc5":"age_impute_test=KNNImputer(n_neighbors=5)\ntransformed_age_test=age_impute_test.fit_transform(test_df['Age'].values.reshape(-1,1))","ec167a3b":"print(transformed_age_train.shape)\nprint(transformed_age_test.shape)","bf8e0b95":"train_df['SibSp'].value_counts()","2052938a":"test_df['SibSp'].value_counts()","19f7de0f":"plt.figure(figsize=(8,6))\nsns.countplot('SibSp',hue='Survived',data=train_df)\nplt.xlabel('Siblings or Spouse',fontsize=15)\nplt.ylabel('Frequencies',fontsize=15)\nplt.yticks(range(0,400,40))\nplt.title('Frequencies of Siblings or Spouse and their chance of Survival',fontsize=15)\nplt.legend(loc='upper right')\nplt.show();","a0e1a11d":"train_df[train_df['SibSp']==5]['Survived'].value_counts()","3217fa05":"train_df[train_df['SibSp']==8]['Survived'].value_counts()","50034bff":"SibSp_train=train_df['SibSp'].values.reshape(-1,1)\nSibSp_test=test_df['SibSp'].values.reshape(-1,1)","bd7d4395":"print(SibSp_train.shape)\nprint(SibSp_test.shape)","d9df1931":"train_df['Parch'].value_counts()","ccf36d0f":"test_df[\"Parch\"].value_counts()","c5b5a7f1":"plt.figure(figsize=(8,6))\nsns.countplot('Parch',hue='Survived',data=train_df)\nplt.xlabel('Parents or Children',fontsize=15)\nplt.ylabel('Frequencies',fontsize=15)\nplt.yticks(range(0,500,50))\nplt.title('Frequencies of Parents or Children and their chance of Survival',fontsize=15)\nplt.legend(loc='upper right')\nplt.show();","82ca146b":"train_df[train_df['Parch']==4]['Survived'].value_counts()","842d3062":"train_df[train_df['Parch']==6]['Survived'].value_counts()","efa8845e":"train_df.groupby(['Parch','Survived'])['PassengerId'].count()","e7991a1c":"Parch_train=train_df['Parch'].values.reshape(-1,1)\nParch_test=test_df['Parch'].values.reshape(-1,1)","2ae2be99":"print(Parch_train.shape)\nprint(Parch_test.shape)","05ee7d5d":"train_df['Ticket'].value_counts()","8dc2cf02":"test_df['Ticket'].value_counts()","56baa32f":"train_df['Ticket_Length']=train_df['Ticket'].apply(lambda x:len(x))","2114ae64":"test_df['Ticket_Length']=test_df['Ticket'].apply(lambda x:len(x))","c4066307":"train_df.groupby(['Ticket_Length','Survived']).count()","1b4aab9c":"train_df['Ticket_Contains_Alphabet']=train_df['Ticket'].apply(lambda x: 0 if x.isdigit() else 1)","e4a07c6d":"test_df['Ticket_Contains_Alphabet']=test_df['Ticket'].apply(lambda x: 0 if x.isdigit() else 1)","e4166ae4":"train_df.groupby(['Ticket_Contains_Alphabet','Survived']).count()","8faa60d4":"import re","8860c4a7":"train_df['Ticket_No_Chars']=train_df['Ticket'].apply(lambda x:re.sub('[A-Za-z.\/]','',x.strip()))","ff44ce9b":"test_df['Ticket_No_Chars']=test_df['Ticket'].apply(lambda x:re.sub('[A-Za-z.\/]','',x.strip()))","585eaf47":"Ticket_Length_train=train_df['Ticket_Length'].values.reshape(-1,1)\nTicket_Length_test=test_df['Ticket_Length'].values.reshape(-1,1)","7f0c1ed6":"Ticket_Contains_Alphabet_train=train_df['Ticket_Contains_Alphabet'].values.reshape(-1,1)\nTicket_Contains_Alphabet_test=test_df['Ticket_Contains_Alphabet'].values.reshape(-1,1)","e8ce9d91":"train_df['Fare'].describe()","0da5df7e":"test_df['Fare'].describe()","f6e61543":"sns.distplot(train_df['Fare'],bins=25,hist=True)\nplt.xlabel('Fare',fontsize=15)\nplt.ylabel('Density',fontsize=15)\nplt.title('Density of Fare',fontsize=15)\nplt.grid();\nplt.show();","a9c60c33":"print('0 25 50 75 and 100 percentiles are:')\nprint(np.percentile(train_df['Fare'],range(0,101,25)))\nprint('90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100 percentiles are:')\nprint(np.percentile(train_df['Fare'],range(90,101,1)))","ba04d8a5":"train_df['Fare_less_major']=train_df['Fare']<=77.9583","017a91fe":"fare_impute_test=KNNImputer(n_neighbors=5)\ntransformed_fare_impute_test=fare_impute_test.fit_transform(test_df['Fare'].values.reshape(-1,1))","322c36af":"fare_less_major_train=train_df['Fare_less_major'].values.reshape(-1,1)\nfare_less_major_train=np.array(fare_less_major_train,dtype=int)\nfare_less_major_train.shape","2e21f4d1":"transformed_fare_less_major_test=transformed_fare_impute_test<=77.9583","1434fed4":"transformed_fare_less_major_test=np.array(transformed_fare_less_major_test,dtype=int)","85463dc2":"transformed_fare_less_major_test.shape","dda8d4a0":"fare_train=train_df['Fare'].values.reshape(-1,1)\nfare_train.shape","7140a477":"fare_test=transformed_fare_impute_test\nfare_less_major_test=transformed_fare_less_major_test","cb9cdf02":"train_df.groupby(['Fare_less_major','Survived']).count()","3438daa4":"#90th percentile value is 77.9583 lets see how if the fare is higher than 90th percentile how is the rate of survival ?\nsns.countplot(x='Fare_less_major',hue='Survived',data=train_df);","98f997c5":"train_df['Cabin'].isna().sum()","ae37cea9":"test_df['Cabin'].isna().sum()","c1ba046c":"train_df['Cabin'].dtypes","e8438e32":"train_df['Cabin'].value_counts()","99aad247":"train_df[train_df['Cabin']=='B96 B98']['Survived'].value_counts()","3f4a3a23":"train_df['Copy_Cabin']=train_df['Cabin']","68456520":"train_df['Copy_Cabin'].fillna('NONE',inplace=True)","67176782":"test_df['Cabin'].fillna('NONE',inplace=True)","c914f0d8":"train_df['Cabin_contains_Alphabet']=train_df['Copy_Cabin'].apply(lambda x : re.findall('[A-Za-z]',x)[0] if x is not 'NONE' else x)","b76ba1c7":"test_df['Cabin_contains_Alphabet']=test_df['Cabin'].apply(lambda x : re.findall('[A-Za-z]',x)[0] if x is not 'NONE' else x)","ba240b57":"plt.figure(figsize=(8,5))\nsns.countplot('Cabin_contains_Alphabet',hue='Survived',data=train_df)\nplt.legend(loc='upper right')\nplt.xlabel('Cabin Letters',fontsize=15)\nplt.ylabel('Frequencies',fontsize=15)\nplt.title('Cabin Letters and Survival Frequencies',fontsize=15)\nplt.show();","a285c27b":"cabin_cnt_alpha_ohe=OneHotEncoder()\ntransformed_cabin_cnt_alpha_train=cabin_cnt_alpha_ohe.fit_transform(train_df['Cabin_contains_Alphabet'].values.reshape(-1,1))\ntransformed_cabin_cnt_alpha_test=cabin_cnt_alpha_ohe.transform(test_df['Cabin_contains_Alphabet'].values.reshape(-1,1))","780bdb10":"print(transformed_cabin_cnt_alpha_train.shape)\nprint(transformed_cabin_cnt_alpha_test.shape)","1a0a89b3":"train_df['Embarked'].isna().sum()","09ea0fea":"test_df['Embarked'].isna().sum()","c8e96278":"train_df['Embarked'].fillna('NONE',inplace=True)","1e29fa19":"train_df['Embarked'].value_counts()","145fce7a":"plt.figure(figsize=(8,5))\nsns.catplot('Embarked',hue='Survived',data=train_df,kind='count');\nplt.legend(loc='upper right')\nplt.xlabel('Embarked',fontsize=15)\nplt.ylabel('Frequencies',fontsize=15)\nplt.title('Embarked and Survival Frequencies',fontsize=15)\nplt.show();","92ad4742":"C_embarked=dict(train_df[train_df['Embarked']=='C']['Survived'].value_counts())\nprint('Not Survived percentage at Embarked C = %.3f%%'%((C_embarked[0])\/(C_embarked[0]+C_embarked[1])*100))\nprint('Survived percentage at Embarked C = %.3f%%'%((C_embarked[1])\/(C_embarked[0]+C_embarked[1])*100))","78c4557f":"Q_embarked=dict(train_df[train_df['Embarked']=='Q']['Survived'].value_counts())\nprint('Not Survived percentage at Embarked Q = %.3f%%'%((Q_embarked[0])\/(Q_embarked[0]+Q_embarked[1])*100))\nprint('Survived percentage at Embarked Q = %.3f%%'%((Q_embarked[1])\/(Q_embarked[0]+Q_embarked[1])*100))\n","662a16a7":"S_embarked=dict(train_df[train_df['Embarked']=='S']['Survived'].value_counts())\nprint('Not Survived percentage at Embarked S = %.3f%%'%((S_embarked[0])\/(S_embarked[0]+S_embarked[1])*100))\nprint('Survived percentage at Embarked S = %.3f%%'%((S_embarked[1])\/(S_embarked[0]+S_embarked[1])*100))","d571c977":"train_df[train_df['Embarked']=='NONE']['Survived'].value_counts()\nprint('Survived percentage at Embarked S = %.3f%%'%(100.00))","d69ab45a":"embarked_ohe=OneHotEncoder()\nembarked_train=embarked_ohe.fit_transform(train_df['Embarked'].values.reshape(-1,1))\nembarked_test=embarked_ohe.transform(test_df['Embarked'].values.reshape(-1,1))","98d53d7a":"print(embarked_train.shape)\nprint(embarked_test.shape)","6cfa6de3":"train_df.head()","e7436d2e":"print(list(train_df.columns))","e9309867":"Useful_Cols=['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked','Prefix_Name','Ticket_Length', 'Ticket_Contains_Alphabet', 'Fare_less_major','Cabin_contains_Alphabet']\ntrain_df[Useful_Cols].info()","8069b2d8":"embarked_train.dtype","0d5664c5":"from scipy.sparse import hstack,csr_matrix\nX=hstack((Pclass_train,  transformed_sex_train, transformed_age_train, SibSp_train, Parch_train,  fare_train,  embarked_train))\ny=train_df['Survived']","1dcb4a08":"print(X.shape)\nprint(y.shape)","07f6c795":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,stratify=y,test_size=0.3,random_state=42)","3af11c8e":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","97bc2dc2":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nmodel=RandomForestClassifier(random_state=42,class_weight={0:0.6,1:0.4})\nparameters={'n_estimators':[100,150,200,250,300,350,400,450,500],'min_samples_split':[2, 5, 10, 15, 100],'min_samples_leaf':[1, 2, 5, 10],\n           'max_depth': [None,5, 8, 15, 25, 30]}\nrandSearch=RandomizedSearchCV(model,parameters,cv=5,random_state=42,scoring='accuracy',return_train_score=True)\nrandSearch.fit(X_train,y_train)\nresults=pd.DataFrame.from_dict(randSearch.cv_results_)","f0828d8d":"results=results.sort_values(['param_max_depth'])","c73dd66b":"train_acc_mean_res=results['mean_train_score']\ntrain_acc_std_res=results['std_train_score']\ntest_acc_mean_res=results['mean_test_score']\ntest_acc_std_res=results['std_test_score']\nK=results['param_max_depth']\nresults","2a073dfa":"plt.figure(figsize=(10,6))\nplt.plot(K,train_acc_mean_res,label='train accuracy')\nplt.plot(K,test_acc_mean_res,label='test accuracy')\nplt.scatter(K,train_acc_mean_res,label='train accuracy points')\nplt.scatter(K,test_acc_mean_res,label='test accuracy points')\nplt.xlabel('training mean accuracy score',fontsize=15)\nplt.ylabel('testing mean accuracy score',fontsize=15)\nplt.title('training and testing mean accuracy score',fontsize=15)\nplt.legend();\nplt.show();","f655f039":"randSearch.best_params_","341d8d59":"model=RandomForestClassifier(class_weight={0:0.6,1:0.4},n_estimators=300,min_samples_split=2,max_depth=25,min_samples_leaf=2)\nmodel.fit(X_train,y_train)","300be495":"predicted_values=model.predict(X_test)","3c436ad6":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test,predicted_values))","65466dd0":"XTEST=hstack((Pclass_test,transformed_sex_test, transformed_age_test, SibSp_test, Parch_test,  fare_test,  embarked_test))","9ae6732b":"XTEST.shape","0d983882":"predicted_values=model.predict(XTEST)","d9fe1cc2":"test_id=test_df['PassengerId'].values","cb0675c1":"randomforest_df=pd.DataFrame(np.c_[test_id,predicted_values],columns=['PassengerId','Survived'])","48148de1":"randomforest_df.to_csv('.\/randomforest_submission.csv',index=False)","dacfd01d":"import xgboost as xgb","454c9e25":"parameters={'learning_rate':[0.01,0.001,0.0001],'colsample_bytree':[0.4,0.3,0.2,0.1,0.5,0.6],'n_estimators':list(range(100,1100,100)),\n           'max_depth':list(range(1,11,1)),'subsample':[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1],\n           }\nmodel=xgb.XGBClassifier(objective='binary:logistic')\nrandSearch=RandomizedSearchCV(model,parameters,cv=5,scoring='accuracy',random_state=42,return_train_score=True)\nrandSearch.fit(X_train,y_train)\nresults=pd.DataFrame(randSearch.cv_results_)","2ac9ca5b":"randSearch.best_params_","c44facc2":"model=xgb.XGBClassifier(learning_rate=0.01,colsample_bytree=0.6,subsample=0.6,objective='binary:logistic',n_estimators=1000,\n            max_depth=8,)\nmodel.fit(X_train,y_train)","0ff698e1":"predicted_values=model.predict(X_test)","7283de03":"accuracy_score(y_test,predicted_values)","d36b2a85":"predicted_values=model.predict(XTEST.tocsr())","634003fd":"xgb_df=pd.DataFrame(np.c_[test_id,predicted_values],columns=['PassengerId','Survived'])","e9783fb6":"xgb_df.to_csv('.\/xgb_submission.csv',index=False)","469cf411":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import PowerTransformer\npower_age=PowerTransformer()\ntransformed_age_train=power_age.fit_transform(transformed_age_train)","c1ec6fd3":"transformed_age_test=power_age.transform(transformed_age_test)","5045f4e1":"from sklearn.linear_model import LogisticRegression\nmodel=LogisticRegression(n_jobs=-1,class_weight={0:0.6,1:0.4})\nparameters={'tol':[1e-4,1e-5,1e-6],'C':[1e-5,1e-4,1e-3,1e-2,1e-1,1e0,1e1,1e2,1e3,1e4,1e5],'max_iter':list(range(100,1100,100))}\nrandSearch=RandomizedSearchCV(model,parameters,cv=5,scoring='accuracy',random_state=42,return_train_score=True)","e700916f":"randSearch.fit(X_train,y_train)\nresults=pd.DataFrame.from_dict(randSearch.cv_results_)\nresults=results.sort_values(['param_C'])","66e38b43":"mean_train_accuracy=results['mean_train_score']\nstd_train_accuracy=results['std_train_score']\nmean_test_accuracy=results['mean_test_score']\nstd_test_accuracy=results['std_test_score']\nK=results['param_C']\nplt.plot(K,mean_train_accuracy,label='train accuracy')\nplt.plot(K,mean_test_accuracy,label='test accuracy')\nplt.scatter(K,mean_train_accuracy,label='train accuracy')\nplt.scatter(K,mean_test_accuracy,label='test accuracy')\nplt.legend();\nplt.show();","706d3549":"randSearch.best_params_","d22903cf":"import warnings\nwarnings.filterwarnings('ignore')","7fd5709d":"model=LogisticRegression(tol=1e-6,max_iter=500,C=1)\nmodel.fit(X_train,y_train)","59f1ce7b":"predicted_values=model.predict(X_test)","b862637c":"accuracy_score(y_test,predicted_values)","b19e6b88":"predicted_TEST=model.predict(XTEST)","1b32e2ed":"log_df=pd.DataFrame(np.c_[test_id,predicted_TEST],columns=['PassengerId','Survived'])","6e5028df":"log_df.to_csv('.\/logistic_submission.csv',index=False)","8f3f99c6":"from sklearn.svm import SVC\nclass_wts={0:0.6,1:0.4}\nmodel=SVC(kernel='rbf',class_weight=class_wts)\n\nparameters={'tol':[1e-4,1e-5,1e-6],'C':[1e-5,1e-4,1e-3,1e-2,1e-1,1e0,1e1,1e2,1e3,1e4,1e5]}\nrandSearch=RandomizedSearchCV(model,parameters,cv=5,scoring='accuracy',random_state=42,return_train_score=True)","502175c6":"randSearch.fit(X_train,y_train)\nresults=pd.DataFrame.from_dict(randSearch.cv_results_)\nresults=results.sort_values(['param_C'])","175fa1ed":"mean_train_accuracy=results['mean_train_score']\nstd_train_accuracy=results['std_train_score']\nmean_test_accuracy=results['mean_test_score']\nstd_test_accuracy=results['std_test_score']\nK=results['param_C']\nplt.plot(K,mean_train_accuracy,label='train accuracy')\nplt.plot(K,mean_test_accuracy,label='test accuracy')\nplt.scatter(K,mean_train_accuracy,label='train accuracy')\nplt.scatter(K,mean_test_accuracy,label='test accuracy')\nplt.legend();\nplt.show();","a70b2388":"randSearch.best_params_","968078ea":"model=SVC(class_weight=class_wts,tol=1e-6,C=1e3,random_state=42,kernel='rbf')\nmodel.fit(X_train,y_train)","35b8f246":"predicted_values=model.predict(X_test)","c583bf41":"accuracy_score(y_test,predicted_values)","adbc1cf1":"predicted_TEST=model.predict(XTEST)\nsvm_df=pd.DataFrame(np.c_[test_id,predicted_TEST],columns=['PassengerId','Survived'])\nsvm_df.to_csv('.\/svm_submission.csv',index=False)","9cc2e3b7":"from sklearn.neighbors import KNeighborsClassifier\nneigh=KNeighborsClassifier(n_jobs=-1)\nparameters={'n_neighbors':list(range(3,52,2))}\nrandSearch=RandomizedSearchCV(neigh,parameters,cv=5,random_state=42,scoring='accuracy')","7a000119":"randSearch.fit(X_train,y_train)","a9966be4":"results=pd.DataFrame.from_dict(randSearch.cv_results_)","e38e3f12":"results=results.sort_values(['param_n_neighbors'])","72b7e6fa":"randSearch.best_params_","f2d425a3":"neighbors=KNeighborsClassifier(n_neighbors=13,n_jobs=-1)\nneighbors.fit(X_train,y_train)","d4386d58":"predicted=neighbors.predict(X_test)","c25a072d":"accuracy_score(y_test,predicted)","cc5cd19c":"from sklearn.naive_bayes import GaussianNB\ngnb=GaussianNB()\ngnb.fit(X_train.toarray(),y_train)\npredicted_values=gnb.predict(X_test.toarray())\naccuracy_score(y_test,predicted_values)","6d2fef0b":"predicted_values=gnb.predict(XTEST.toarray())\ngnb_df=pd.DataFrame(np.c_[test_id,predicted_values],columns=['PassengerId','Survived'])\ngnb_df.to_csv('.\/gnb_submission.csv',index=False)","2cf7bcca":"from mlxtend.classifier import StackingCVClassifier\nrandomforest=RandomForestClassifier(n_estimators=300,min_samples_split=2,max_depth=25,min_samples_leaf=2)\nxgbclassif=xgb.XGBClassifier(learning_rate=0.01,colsample_bytree=0.6,subsample=0.6,objective='binary:logistic',n_estimators=1000,\n            max_depth=8)\nlog_regress=LogisticRegression(tol=1e-6,max_iter=500,C=1)\nsvc_classif=SVC(class_weight=class_wts,tol=1e-6,C=1e3,random_state=42,kernel='rbf')\nneighbors=KNeighborsClassifier(n_neighbors=13,n_jobs=-1)\ngnb=GaussianNB()","d549a2ee":"stack = StackingCVClassifier(classifiers=(randomforest, xgbclassif, log_regress, svc_classif,neighbors),\n                            meta_classifier=randomforest, cv=12,\n                            #use_features_in_secondary=True,\n                            #store_train_meta_features=True,\n                            shuffle=False,\n                            random_state=42)","ad819855":"stack.fit(X_train, y_train)","4efd16db":"predicted_values=stack.predict(X_test)","9c1e0813":"accuracy_score(y_test,predicted_values)","d526bc97":"predicted_values=stack.predict(XTEST.tocsr())","82940b40":"stack_df=pd.DataFrame(np.c_[test_id,predicted_values],columns=['PassengerId','Survived'])\nstack_df.to_csv('.\/stack_submission.csv',index=False)","f2554ddc":"stack_df.shape","41569bfe":"* Lets apply one hot encoding or label encoding on the given data and check the process","bb8ac0c3":"# Support Vector Machines","49726aa4":"There are around 12 columns are present in the training dataframe and Survived is the target column which is int datatype.","334f7ab9":"* From the above plot, we could infer that most of passenger travelled in Class 3 next Class 1 and finally Class2\n* Since more people, travelled in Class3 lets check their chance of surival (interesting ....?)","69d9b53f":"* From the Sex category column, chance of surviving is more if Sex is Female.","e3e8686b":"# Observations","abc11826":"* If the Parch value is 1 then there is chance of Survival is best.\n* If the Parch value is 2 then there is chance of Survival is equal.\n* If the Parch value is 4 or 6 then the chance of Survival is meare.","de9c0bc6":"# Fare Column EDA","0a578af0":"<h1> Lets explore train dataset <\/h1>","88d44878":"* This is the accuracy score on cross validate data.","c874f9e5":"# PassengerClass PClass EDA","71fd04fe":"# Observations","c6f10436":"# Observations","4092a87f":"Looks like its not highly imbalanced dataset, Survived percentage is 38.3 and People who didnt survive percentage is 61.6","ce2c356c":"# Parch Field EDA","6effc319":"* Passenger where the borading point is not known, both are survived :D","b689925f":"# Stacking","8f2682e8":"* From the above stats, we coudl infer that Age, Cabin and Embarked are the columns which does contains nulls. we have to fill these values using some technique.","909c3d83":"* In the test dataset,there are columns like Age, Cabin and Fare fields which does contain null values.","1da68737":"# Ticket Field EDA","7feaccdc":"# Name Field EDA :P","444cec9b":"## Lets examine all the columns which we have created during our exploration.","54112f29":"# Observations","006f2319":"# Observations","e455558e":"# Observations","949c89c4":"* Mlle is changed to Miss\n* Ms is changed to Miss \n* Mme is changed to Mrs \n* Jonkheer is changed to Mr \n* after some fundamental research","3a81842f":"* Lets do the same percentage check for Class 2 as well.","aeb144e7":"* If the SibSp value is 1 then there is chance of Survival is best.\n* If the SibSp value is 2 then there is chance of Survival is better.\n* If the SibSp value is 5 or 8 then the chance of Survival is meare.","5c1a119a":"# Sex column EDA","9e1aa35c":"# Observations","22da0e21":"# Cabin Field EDA","180d0c14":"* Lets fill the 2 null values with None and check their chance of survival using count plots.","a770ad17":"# Age field EDA","71bddbbe":"# Gaussian NB","f0ca2847":"# Logistic Regression","3a4e6b98":"# Embarked Field EDA","742d65a2":"* There are majority of null values present in this field in the entire dataset.","5d5fa271":"# prediciton on actual test data","3616751f":"* There are missing or nan values in the field, we will have impute the data with some measure.","72d0e233":"# Using XGBOOST","7381e105":"# Working with Test Data","92f003cf":"* The Fare data following a exponential function, so we can apply a power law transformation on it.\n* Also, if The Fare amount is more than 77.9583 which is 90th percentile then the chance of survival is high.","4932abd9":"# Prediction on actual test.","0f4aeef8":"# SibSp Field EDA","2ac32ca2":"* If Prefix is Miss , then chance of survival is first highest.\n* If Prefix is Mrs , then chance of survival is second highest.\n* If Prefix is Master, the chanece of survival is third highest.\n* Looks like If the Prefix is Rev, then chance of survival is almost 0.\n* It an interesting column to consider.","2ca41c18":"# Prediction on actual test","76dd9f18":"# Observations","2538b14e":"* People who have no cabin information or NONE has very less chance of surival.\n* People travelled in B,C,D,E Cabin are having more chance of survival \n* People travelled in T cabin has no chance for survival.","18b25c16":"**Survival Percentage is more in Class 1 then Class 2 and finally in Class 3**"}}