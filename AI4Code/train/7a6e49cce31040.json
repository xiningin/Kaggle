{"cell_type":{"e744f4a8":"code","b9887a29":"code","4c6ad03f":"code","5d19caf8":"code","06a7922a":"code","19a16508":"code","b1d608d2":"code","f067385c":"code","126bcc31":"code","8554baf2":"code","3c654459":"code","8e296300":"markdown","823aad7d":"markdown","332f0b1e":"markdown","7a041896":"markdown","84d6b26d":"markdown","c3c4be9f":"markdown","89e13e29":"markdown"},"source":{"e744f4a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b9887a29":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import GridSearchCV, cross_validate, KFold\n\nimport xgboost as xgb\nimport matplotlib.pyplot as plt\n","4c6ad03f":"train = pd.read_csv(\"..\/input\/santander-customer-satisfaction\/train.csv\")\ntest = pd.read_csv(\"..\/input\/santander-customer-satisfaction\/test.csv\")","5d19caf8":"remove = []\nfor col in train.columns:\n    if train[col].std() == 0:\n        remove.append(col)\n        \ntrain.drop(remove, axis=1, inplace=True)\ntest.drop(remove, axis=1, inplace=True)","06a7922a":"remove = []\ncols = train.columns\nfor i in range(len(cols)-1):\n    v = train[cols[i]].values\n    for j in range(i+1,len(cols)):\n        if np.array_equal(v,train[cols[j]].values):\n            remove.append(cols[j])\n            \ntrain.drop(remove, axis=1, inplace=True)\ntest.drop(remove, axis=1, inplace=True)\ntrain = train.replace(-999999,2)\ntest = test.replace(-999999,2)","19a16508":"test_id = test.ID\ntest = test.drop([\"ID\"],axis=1)","b1d608d2":"train_df_0 = train[train['TARGET'] == 0]\ntrain_df_1 = train[train['TARGET'] == 1]","f067385c":"train_dfs = []\ntarget_df_length = len(train_df_1)\nfor i in range(len(train_df_0)\/\/(target_df_length*2)):\n    item_df = train_df_0[target_df_length*2*i:target_df_length*2*(i+1)]\n    train_dfs.append(item_df)","126bcc31":"from sklearn.utils import shuffle\n# for i in train_dfs[:1]:\n#     train_data_x = pd.concat([i,train_df_1]).drop(['TARGET','ID'],axis=1)\n#     train_data_y = [0]*len(i) + [1]*len(train_df_1)\n#     X, y = shuffle(train_data_x.values, train_data_y, random_state=0)\n#     model = xgb.XGBClassifier(max_depth = 5, n_estimators=160, learning_rate=0.02,nthread=4,\n#                 subsample=0.95, colsample_bytree=0.85)\n#     gscv = cross_validate(model, X, y, cv=5, scoring='roc_auc', n_jobs=-1)['test_score']\n#     print('Use model:{}'.format(model.__class__.__name__))\n#     print('Mean AUC:{:.5f}'.format(gscv.mean()))","8554baf2":"models = []\npreds = []\nfor i in train_dfs:\n    train_data_x = pd.concat([i,train_df_1]).drop(['TARGET','ID'],axis=1)\n    train_data_y = [0]*len(i) + [1]*len(train_df_1)\n    X, y = shuffle(train_data_x.values, train_data_y, random_state=0)\n    model = xgb.XGBClassifier(max_depth = 5, n_estimators=160, learning_rate=0.02,nthread=4,\n            subsample=0.95, colsample_bytree=0.85) #0.840 0.836 0.840 0.840 0.838\n    model.fit(X, y)\n    models.append(model)\n    pred = model.predict_proba(test.values)\n    preds.append(pred[:,1])","3c654459":"res = pd.DataFrame(preds).T\nres['sum'] = res.sum(axis=1)\nres['res1'] = res['sum']\/12\nsubmission = pd.DataFrame({\"ID\":test_id, \"TARGET\": res['res1']})\nsubmission.to_csv(\"submission.csv\", index=False)","8e296300":"\u5728\u6570\u636e\u5206\u6790\u8fc7\u7a0b\u4e2d\uff0c\u53d1\u73b0\u5b58\u572834\u4e2a\u5168\u4e3a0\u7684\u5217\uff0c\u5220\u9664\uff01","823aad7d":"\u5bfc\u5165\u9700\u8981\u7528\u5230\u7684\u5e93","332f0b1e":"\u7531\u4e8e\u6837\u672c\u5b58\u5728\u6781\u5ea6\u7684\u4e0d\u5747\u8861\uff0c\u5927\u81f4\u4e3a96:4\uff0c\n\n\u56e0\u6b64\u8003\u8651\u5206\u5272TARGET\u4e3a0\u7684\u6837\u672c\uff0c\u7136\u540e\u4e0eTARGET\u4e3a1\u7684\u6837\u672c\u8fdb\u884c\u8bad\u7ec3\uff0c\u5927\u81f42:1\u8fdb\u884c\u5212\u5206\u3002","7a041896":"\u5c06test\u6570\u636e\u96c6\u901a\u8fc7\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\uff0c\u6700\u540e\u6c4212\u4e2a\u6a21\u578b\u9884\u6d4b\u7ed3\u679c\u7684\u5e73\u5747\u503c\uff0c\u4fdd\u5b58\u540e\u63d0\u4ea4\u6210\u7ee9\u3002","84d6b26d":"\u5728\u6570\u636e\u5206\u6790\u8fc7\u7a0b\u4e2d\uff0c\u53d1\u73b0\u5b58\u572830\u591a\u4e2a\u6570\u636e\u5b8c\u5168\u91cd\u590d\u7684\u5217\uff0c\u5220\u9664\uff01\n\n\u66ff\u6362\u6389\u6570\u503c\u4e3a-999999\u7684\u503c","c3c4be9f":"\u4f7f\u7528\u4ea4\u53c9\u9a8c\u8bc1\u8fdb\u884c\u8c03\u53c2\uff0c\u76ee\u524d\u4f7f\u7528XGBoost\u6a21\u578b\u3002","89e13e29":"\u5c06\u5206\u5272\u768412\u7ec4\u6570\u636e\u4e0eTARGET\u4e3a1\u7684\u6570\u636e\u8fdb\u884c\u7ec4\u5408\uff0c\u5e76\u8fdb\u884c\u8bad\u7ec3\uff0c\u5f62\u621012\u4e2a\u8bad\u7ec3\u6a21\u578b\u3002"}}