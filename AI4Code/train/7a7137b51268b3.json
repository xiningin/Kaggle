{"cell_type":{"9ee64b80":"code","c3745d8a":"code","34d99f08":"code","135b17dd":"code","f773eeb9":"code","1bbcc546":"code","caab717e":"code","00fd9d96":"code","1ee4a932":"code","c64632de":"code","3b2e69f6":"code","8c0474e7":"code","1dcd7227":"code","d0711579":"code","3d2e304b":"code","39bbdffd":"code","6c12caef":"code","0163e6e1":"code","0134f62c":"code","15eb3634":"code","3256298f":"code","81d2d944":"code","716b93fd":"markdown","0d4899f3":"markdown","63b8f168":"markdown","53b51116":"markdown","b7aac758":"markdown","c0a8eb3a":"markdown","da08c6a1":"markdown","db4f330a":"markdown","69ca0916":"markdown","f7df8244":"markdown","70fccfa2":"markdown"},"source":{"9ee64b80":"!pip install pmdarima","c3745d8a":"import os\nimport warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\nimport seaborn as sns\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 10, 6\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom pmdarima.arima import auto_arima\n\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport math\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","34d99f08":"df = pd.read_csv('..\/input\/airpassengers\/AirPassengers.csv', index_col=['Month'], \n                 date_parser=lambda dates: pd.datetime.strptime(dates, '%Y-%m'),\n                 parse_dates=['Month'])\ndf","135b17dd":"df['Year'] = df.index.year\nm = df.groupby('Year').mean()\nm","f773eeb9":"sns.barplot(data=m, y='#Passengers', x=m.index)","1bbcc546":"for i in range(12):\n    plt.figure(figsize=(10,100))\n    plt.subplot(12,1,i+1)\n    sns.barplot(data= df.iloc[12*i:12*(i+1)], x=df.iloc[12*i:12*(i+1)].index.month, y='#Passengers')\n    plt.title(f'Bar plot for the year {1949+i}')","caab717e":"df.columns = ['Passengers', 'Year'] # To ease the writing we change the name of the passenger column","00fd9d96":"df.Passengers.plot(kind='line')","1ee4a932":"df.describe()","c64632de":"#Test for staionarity\ndef test_stationarity(timeseries):\n    #Determing rolling statistics\n    rolmean = timeseries.rolling(12).mean()\n    rolstd = timeseries.rolling(12).std()\n    #Plot rolling statistics:\n    plt.plot(timeseries, color='blue',label='Original')\n    plt.plot(rolmean, color='red', label='Rolling Mean')\n    plt.plot(rolstd, color='black', label = 'Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean and Standard Deviation')\n    plt.show(block=False)\n    \n    print(\"Results of dickey fuller test\")\n    adft = adfuller(timeseries,autolag='AIC')\n    # output for dft will give us without defining what the values are.\n    #hence we manually write what values does it explains using a for loop\n    output = pd.Series(adft[0:4],index=['Test Statistics','p-value','No. of lags used','Number of observations used'])\n    for key,values in adft[4].items():\n        output['critical value (%s)'%key] =  values\n    print(output)","3b2e69f6":"test_stationarity(df.Passengers)","8c0474e7":"result = seasonal_decompose(df.Passengers, model='multiplicative')\nfig = plt.figure()  \nfig = result.plot() ","1dcd7227":"df_log = np.log(df.Passengers)\nmoving_avg = df_log.rolling(12).mean()\nstd_dev = df_log.rolling(12).std()\nplt.legend(loc='best')\nplt.title('Moving Average')\nplt.plot(df_log, label='Original')\nplt.plot(std_dev, color =\"black\", label = \"Standard Deviation\")\nplt.plot(moving_avg, color=\"red\", label = \"Mean\")\nplt.legend()\n","d0711579":"plt.figure(figsize=(10,10))\nplt.subplot(2,1,1)\nplt.plot(df_log)\nplt.title('Log transformed')\nplt.subplot(2,1,2)\nplt.plot(df.Passengers)\nplt.title('Original')\nplt.tight_layout()","3d2e304b":"#split data into train and training set\ntrain_data, test_data = df_log[:int(len(df_log)*0.9)], df_log[int(len(df_log)*0.9):]\nplt.figure(figsize=(10,6))\nplt.grid(True)\nplt.xlabel('Years')\nplt.ylabel('# of Passengers')\nplt.plot(df_log, 'green', label='Train data')\nplt.plot(test_data, 'blue', label='Test data')\nplt.legend()\n","39bbdffd":"model_autoARIMA = auto_arima(train_data, start_p=0, start_q=0,\n                      test='adf',       # use adftest to find optimal 'd'\n                      max_p=3, max_q=3, # maximum p and q\n                      m=12,              # frequency of series\n                      d=None,           # let model determine 'd'\n                      seasonal=True,   # No Seasonality\n                      start_P=0, \n                      D=0, \n                      n_jobs=-1,\n                      trace=True,\n                      error_action='ignore',  \n                      suppress_warnings=True, \n                      stepwise=True)\nprint(model_autoARIMA.summary())\nmodel_autoARIMA.plot_diagnostics(figsize=(15,8))","6c12caef":"plot_pacf(train_data, lags=20)","0163e6e1":"plot_acf(train_data,lags=20)","0134f62c":"#Modeling\n# Build Model\nmodel = ARIMA(train_data, order=(1,0,1), seasonal_order=(1,0,1,12))  \nfitted = model.fit()  \nprint(fitted.summary())\n","15eb3634":"# Forecast\nfc = fitted.forecast(len(test_data))  # 95% conf","3256298f":"fc_series = pd.Series(fc, index=test_data.index)\n\nplt.figure(figsize=(15,10))\nplt.plot(train_data, label='training data')\nplt.plot(test_data, color = 'blue', label='Actual Test data')\nplt.plot(fc_series, color = 'orange',label='Predicted test data')\n\nplt.title('# of Passenger prediction')\nplt.xlabel('Time')\nplt.ylabel('# of Passengers')\nplt.legend(loc='upper left', fontsize=8)","81d2d944":"mse = mean_squared_error(test_data, fc)\nprint('MSE: '+str(mse))\nmae = mean_absolute_error(test_data, fc)\nprint('MAE: '+str(mae))\nrmse = math.sqrt(mean_squared_error(test_data, fc))\nprint('RMSE: '+str(rmse))\nmape = np.mean(np.abs(fc - test_data)\/np.abs(test_data))\nprint('MAPE: '+str(mape))\n","716b93fd":"The p-Value and comparision of test statistics with critical values concludes that the series is not stationary, as expected. Let us separate Trend and Seasonality from the series.","0d4899f3":"ACF seem to be geometric. Though to determine these parameters we will use autoarima.","63b8f168":"# Stationarity Checking","53b51116":"As we saw, series is not stationary, which one can check using Dickey-Fuller test, which we will do next.","b7aac758":"So that tells $p=1$ seem to be right choice.","c0a8eb3a":"I have no idea why it is plotting the same plot twice. Plot seem all great so let us model now and predict.","da08c6a1":"# AutoARIMA to get $p, d,q$","db4f330a":"We can see upward trend and seasonality within every year.","69ca0916":"Model seem to be doing an excellent job :)","f7df8244":"Thanks a lot for being here. This notebook is strongly motivated by the https:\/\/www.kaggle.com\/nageshsingh\/stock-market-forecasting-arima\nThanks a lot Nagesh.","70fccfa2":"Hence no. of passengers is rising each year."}}