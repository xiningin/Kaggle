{"cell_type":{"4850df30":"code","f71a864b":"code","ef345ad1":"code","2a6465c3":"code","24858060":"code","06a8fab2":"code","2f454d10":"code","be0f45f1":"code","65372731":"code","f1f13767":"code","6876532d":"code","d6311dc5":"markdown","09067aad":"markdown","982cde5d":"markdown","0d6683b7":"markdown","708fc813":"markdown","9c0a2cb7":"markdown","2f5855fa":"markdown","dbb11da2":"markdown","f886d38b":"markdown","88085729":"markdown"},"source":{"4850df30":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nimport glob\nimport json","f71a864b":"!ls \/kaggle\/input\/CORD-19-research-challenge","ef345ad1":"root_path = '\/kaggle\/input\/CORD-19-research-challenge'\nmetadata_path = f'{root_path}\/metadata.csv'\nmeta_df = pd.read_csv(metadata_path, dtype={\n    'pubmed_id': str,\n    'Microsoft Academic Paper ID': str, \n    'doi': str\n})\nmeta_df.head()","2a6465c3":"all_json = glob.glob(f'{root_path}\/**\/*.json', recursive=True)\nlen(all_json)","24858060":"with open(all_json[0]) as file:\n    first_entry = json.load(file)\n    print(json.dumps(first_entry, indent=4))","06a8fab2":"class FileReader:\n    def __init__(self, file_path):\n        with open(file_path) as file:\n            content = json.load(file)\n            self.paper_id = content['paper_id']\n            self.abstract = []\n            self.body_text = []\n            # Abstract\n            for entry in content['abstract']:\n                self.abstract.append(entry['text'])\n            # Body text\n            for entry in content['body_text']:\n                self.body_text.append(entry['text'])\n            self.abstract = '\\n'.join(self.abstract)\n            self.body_text = '\\n'.join(self.body_text)\n            # Extend Here\n            #\n            #\n    def __repr__(self):\n        return f'{self.paper_id}: {self.abstract[:200]}... {self.body_text[:200]}...'\nfirst_row = FileReader(all_json[0])\nprint(first_row)","2f454d10":"dict_ = {'paper_id': [], 'abstract': [], 'body_text': []}\nfor idx, entry in enumerate(all_json):\n    if idx % (len(all_json) \/\/ 10) == 0:\n        print(f'Processing index: {idx} of {len(all_json)}')\n    content = FileReader(entry)\n    dict_['paper_id'].append(content.paper_id)\n    dict_['abstract'].append(content.abstract)\n    dict_['body_text'].append(content.body_text)\ndf_covid = pd.DataFrame(dict_, columns=['paper_id', 'abstract', 'body_text'])\ndf_covid.head()","be0f45f1":"df_covid['abstract_word_count'] = df_covid['abstract'].apply(lambda x: len(x.strip().split()))\ndf_covid['body_word_count'] = df_covid['body_text'].apply(lambda x: len(x.strip().split()))\ndf_covid.head()","65372731":"df_covid.describe(include='all')","f1f13767":"df_covid.drop_duplicates(['abstract', 'body_text'], inplace=True)\ndf_covid.describe(include='all')","6876532d":"df_covid[['abstract_word_count', 'body_word_count']].plot(kind='box', title='Boxplot of Word Count', figsize=(10,6))\nplt.show()","d6311dc5":"## Clean Duplicates","09067aad":"## Fetch All of JSON File Path","982cde5d":"## Checking JSON Schema Structure","0d6683b7":"It seems that the JSON schema given is incorrect if we look into dumped first entry. The `abstract`, `body_text`, `bib_entries`, `ref_entries`, and `back_matter` are not the child of `metadata` key.","708fc813":"## Helper: File Reader Class","9c0a2cb7":"## Boxplot: Word Count","2f5855fa":"## Load the Data into DataFrame","dbb11da2":"## Loading Metadata","f886d38b":"## Adding the Word Count Column","88085729":"Based on the `unique` count on `abstract` and `body_text` it seems there some duplication that may caused by some group of authors publish their paper in the different journal (need deeper exploration)."}}