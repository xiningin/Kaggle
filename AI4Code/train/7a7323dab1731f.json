{"cell_type":{"8e3317d1":"code","d1aec8ba":"code","3289df66":"code","8783347e":"code","5a967e03":"code","dc9c6584":"code","aa6dc51d":"code","54518dcb":"code","9820a379":"code","ca2d4331":"code","d6e49186":"code","ab53930e":"code","d9ae6a49":"code","092a9048":"code","2d500493":"code","ad739ba9":"code","fed7508c":"code","5d3d4556":"code","464f3eb9":"code","9f3847d1":"code","21e028f5":"code","7f123f53":"code","f80acfc7":"code","b40d2267":"code","ba6ef278":"code","426c4e67":"code","c251fc40":"code","b3e10fa9":"markdown","14437b2d":"markdown","b04077d2":"markdown","bff7f1b4":"markdown","1e0a25b9":"markdown","93b1a308":"markdown","92d0d49a":"markdown","11a91f89":"markdown","f21ccc59":"markdown","7d73a0db":"markdown"},"source":{"8e3317d1":"##Arithmetic Operator(+,-,,\/,*,%,\/\/)\n##Addition\nprint(23+28)\na=23\nb=28\nd=26\nc=a+b\nprint(c)\n##Substraction\nprint(12897-3452)\ne=a-d\nprint(e)\n##Division\nprint(45673\/23)\nprint(round(45673\/23))\n##Modular\nprint(45678%234)\n##To the power\nprint(2**5)\n\n","d1aec8ba":"##Comparison Operator\nnum1=56\nnum2=120\nprint(num1==num2)\nprint(num1!=num2)\nprint(num1>num2)\nprint(num1<num2)","3289df66":"#Bitwise Operator\na=4\nb=8\nprint(a&b)\nprint(a|b)","8783347e":"# Logical Operator\na=True\nb=False\nprint(a and b)","5a967e03":"##Examples for Tuple\nt1=('a','b','c','d')\nprint(t1)\nprint(t1[1])\nprint(t1[:3])\nprint(t1[2:4])\nprint(t1[-2])\nprint(type(t1))","dc9c6584":"t1[1]=x  ##As unindexed unable to change the value indexwise,so it will throw the error","aa6dc51d":"t2=tuple(('a','b',1,'d'))\nprint(t2)\nprint(t2[1])\nprint(type(t2))\n","54518dcb":"t3=('a')\nt4=('a',)\nprint(type(t3))\nprint(type(t4))","9820a379":"##Examples of List and its operations\nl1=['a','b','c','d']\nprint(l1)\nprint(type(l1))\nl2=list([\"a\",'b','c',90])\nprint(l2)\nprint(type(l2))\nprint(l2[1])\nl3=[1,3,6,4,5,6,7,7,\"a\",\"apple\",90]\nprint(l3[5:10])\nprint(len(l3))\nl3.append('123')## append will add at the end\nprint(l3)\nl3.insert(1,'a')#insert can add at any position\nprint(l3)\nl3.remove('a')#Will remove first occurance\nprint(l3)\nl3.pop()#Will remove last element of the list\nprint(l3)\nl4=l3.copy()\nprint(l4)\nl5=l1+l4\nprint(l5)\nl5.append(l2)#Append as a list,list within list\nprint(l5)\nl5.extend(l2)\nprint(l5)#extend the list,will add at the end\nl5.reverse() ##Will reverse the list\nprint(l5)","ca2d4331":"##Examples of Dictionary and its operation\ndict1={\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nprint(dict1)\nprint(type(dict1))\nprint(dict1.keys())\nprint(dict1.values())\ndict1[\"year\"]=1970\nprint(dict1)\ndict1.update({'colr':'Red'})##will add the key & value to the dictionary\nprint(dict1)\ndict1.update({'colr':'White'})\nprint(dict1)\ndict1.pop('colr')\nprint(dict1)","d6e49186":"s1=set(['a','b','c'])##Unordered\nprint(s1)\nprint(type(s1))\nprint(s1[1])## Unindexed","ab53930e":"s2=set(['b','c','d'])\nprint(s2)","d9ae6a49":"print(s1-s2)\nprint(s2-s1)\nprint(s1.intersection(s2))\nprint(s1.union(s2))","092a9048":"print(s1)\nprint(s2)\nprint(s1.pop())\nprint(s1)\ns1.add('e')\nprint(s1)","2d500493":"import numpy as np\nprint(np.__version__)##checking numy version\na=np.array([1,2,3])\nprint(a)\nprint(type(a))\na0=np.array(12)##0-D array\na1=np.array([1,2,3,4,5])##1-D Array\na2=np.array([[1,2,3],[4,5,0]])##2-D Array\na3=np.array([[[1,2,3],[3,4,5]],[[0,2,4],[4,6,8]]])##3-D Array\nprint(a0)\nprint(a1)\nprint(a2)\nprint(a3)\nprint(a0.ndim)\nprint(a1.ndim)\nprint(a2.ndim)\nprint(a3.ndim)","ad739ba9":"##Accessing the array element\narr1 = np.array([2,4,8,6,10])##1D array\n\nprint(arr1[0])\nprint(arr1[1])\nprint(arr1[2] + arr[3])##Adding 2nd and 3rd element\n\narr2 = np.array([[3,5,7,9,11], [2,4,6,8,10]])## 2D array\nprint(arr2[0,3])## first row 3rd element","fed7508c":"##Array Slicing\nprint(arr1[1:3])\nprint(arr1[2:])","5d3d4556":"arr3 = np.array([11, 13, 15, 17, 19, 21, 23])\nprint(arr3[1:6:2])#From 1 to 6 th element,every 2nd element\nprint(arr3[1:6:3])#From 1 to 6 th element,every 3rd element\nprint(arr3[::2])##every alternate number from array\nprint(arr3[::3])##Every 3rd number from array","464f3eb9":"## Creating Copy of the array\narr = np.array([2, 4, 6, 8, 10])\nx = arr.copy() #Make a copy,but change in orginal arrary wil not reflect in copied array#Deep Copy\narr[0] = 23\n\nprint(arr)\nprint(x)\ny=arr.view() #Make a copy,change in original array will change in copied array#Swallow copy\narr[0]=45\nprint(arr)\nprint(y)","9f3847d1":"##Array Reshaping\narr = np.array([10,15,20,25,30,35,40,45,50,60,65,70])\nnewar1 = arr.reshape(3,4)\nnewar2 = arr.reshape(2, 3, 2)\n\nprint( \"Newarray1\",newar1)\nprint( \"Newarray1\",newar2)","21e028f5":"## Array Flattening(1 d array)\n\narr = np.array([[1,2,3],[2,4,6],[4,5,6]])\n\nnewar = arr.reshape(-1)\n\nprint(newar)","7f123f53":"import pandas as pd\n##Series\na1=pd.Series([1,2,3])\nprint(\"a1\", a1)\nprint(type(a1))\na2=pd.Series([1,2,'a','b','c'])\nprint(\"a2\",a2)\na3=pd.Series([1,2,'122','bcd','cdd'],index=['a','b','c','d','e'])\nprint(\"a3\",a3)","f80acfc7":"##dataframe\ndf1=pd.DataFrame([['a','b','c','d'],[1,2,3,4]])\nprint(type(df1))\nprint(df1)\ndict1={\n  \"brand\": [\"Ford\",'honda','maruti','hyundai','skoda','bmw'],\n  \"model\": [\"Mustang\",'BRV','alto','santro','skoda','bmw5'],\n  \"year\": [1964,1865,1989,1987,2011,1999]\n}\ndf2=pd.DataFrame(dict1,columns=['brand','model','year'])\nprint(df2)\nprint(df2.shape)\nprint(df2.head())\nprint(df2.info())\nprint(df2.dtypes)","b40d2267":"print(df2.columns.tolist())\n##Dataframe Slicing\nprint(df2[1:3])\nprint(df2[:2])\nprint(df2[::2])","ba6ef278":"print(df2.values)\nprint(df2.index)\nprint(df2.describe)\nprint(df2.columns)\nprint(df2.T)","426c4e67":"df3=pd.DataFrame(np.random.randn(6,4),index=list('abcdef'),columns=list('ABCD'))\nprint(df3)\nprint(df3.loc[['a','b'],:])\nprint(df3.loc[['a','b'],['B','C']])\nprint(df3.loc[:,['A']])\nprint(df3.loc['a']>0.03)\nprint(df3.loc['a',\"B\"])","c251fc40":"print(df3.iloc[:1])##Index\nprint(df3.iloc[2:4])","b3e10fa9":"# **Dictionary**\n\n* Key-Value pair\n* Key represents index, value represents definition\n* Unordered, changeable\n","14437b2d":"# **PYTHON BASICS FOR BEGINNERS** #\n\n* Introduction to Python\n* Python Installation\n* Basis Operators in Python\n* Hands On session for Basic Operator\n* Different Data Types of Python\n* Hands On Session on Data Types\n* Important Packages in Python used for Machine Learning\n* Exploratory Data Analysis using python\n\n# 1.**Python Introduction & Features**\n* Python was created by Guido Rossum in 1989.\n* Python is an interpreted, object oriented, high level programming language.\n* Features:\n     * It is simple & easy to learn, read & write\n     * It is an example of FLOSS(Free\/Libre & Open Source Software)\n     * It is portable in nature means supported with  many platform like Windows, LINUX,UNIX,MAC,Solaris\n     * It can invoke  C,C++ code and can be called from C++,Java. Extensible\n\n# **Python Installation**\nhttps:\/\/docs.anaconda.com\/anaconda\/install\/windows\/\n\nVarious IDE Used:\n* Jupyter Notebook\n* Spyder \n* Notepad++\n* Pycharm etc..\n\n","b04077d2":"# **Tuple**\n\n\n* A number of values separated by commas\n* Ordered\/Indexed\n* Immutable\n    *  Cannot assign values to individual items  of a tuple\n    *  However tuples can contain mutable objects such as lists\n\n","bff7f1b4":"# **Lists**\n* An ordered  & indexed group of items\n* Does not need to be same type(Can put number, strings in same list)\n* List notation\n* Ex:\n    A = [1,\u201dThis is a list\u201d, c, Donkey(\u201ckong\u201d)]","1e0a25b9":"# **Python DataType**\n![image.png](attachment:image.png)\n\n\n","93b1a308":"# Numpy\n* Stands for Numerical python\n* It is a general-purpose array-processing package\n* It provides a high-performance multidimensional array object, and tools for working with these arrays\n ","92d0d49a":"# Pandas\n*  It is a high-level data manipulation tool\n*  Its key data structure is called the DataFrame. \n* DataFrames allow you to store and manipulate tabular data in rows of observations and columns of variables.\n","11a91f89":"# Important packages\n* A Package is  basically a directory with python files which MUST contain a special file called __init__.py\u00a0\n* Some important packages:\n    * Numpy\n    * Pandas\n    * Sklearn\n    * Matplotlib\n    * Seaborn\n","f21ccc59":"# **operators in python**\n\n* Arithmetic Operator(+,-,*,\/,**,%,\/\/)\n* Assignment Operator(\/=,%=,\/\/=,**=)\n* Comparison Operator(>,<,==,!=)\n* Logical Operator(and, or, not)\n* Bitwise Operator(&,|,^,>>,<<)\n* Identity Operator(is, is not)\n* Membership Operator(in, not in)","7d73a0db":"# **Set**\n* An unordered & Unindexed collection with no duplicate elements\n* Mutable in nature\n* Basket = [\u2018apple\u2019, \u2018orange\u2019, \u2018apple\u2019, \u2018pear\u2019]\n* Fruit = set(basket)\n* Fruit \n* Set([\u2018orange\u2019, \u2018apple\u2019, \u2018pear\u2019])\n"}}