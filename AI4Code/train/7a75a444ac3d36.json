{"cell_type":{"a8a28f7c":"code","7376146a":"code","1e0e1f7b":"code","7473647a":"code","bdd3f54d":"code","4383a368":"code","3d845779":"code","4227a4d9":"code","63b0dbed":"code","fe493fe5":"code","2ae00be0":"code","807af58c":"markdown","a87123bf":"markdown","82e7a678":"markdown","fe701ef2":"markdown","ac686f83":"markdown","2ece925f":"markdown","145315ec":"markdown","6c0cc44d":"markdown","a6c3b026":"markdown","4bc97ece":"markdown","cd6a1289":"markdown"},"source":{"a8a28f7c":"import numpy as np \nimport pandas as pd \n\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import ensemble\nfrom sklearn import linear_model\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","7376146a":"def Datapreperation():\n    df = pd.read_csv(\"..\/input\/all-crypto-currencies\/crypto-markets.csv\")\n    bitcoin_df = pd.DataFrame(df.loc[df.name ==\"Bitcoin\", [\"date\", \"open\", \"close\", \"high\", \"low\"]]).set_index(\"date\")\n    bitcoin_df[\"close_nextday\"] = bitcoin_df[\"close\"].shift(periods = -1, fill_value = 0)\n    temp = bitcoin_df[[\"open\", \"close\", \"high\", \"low\"]]\n    temp = temp[1800:]\n    return bitcoin_df, temp","1e0e1f7b":"def TestTrainpreperation(bitcoin_df):\n    X = bitcoin_df[[\"open\", \"close\", \"high\", \"low\"]]\n    y = bitcoin_df[[\"close_nextday\"]]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n    return X_train, X_test, y_train, y_test","7473647a":"def RandomForestRegressor(bitcoin_df, X_train, X_test, y_train, y_test, temp, acc):\n    bitcoin_rfr = ensemble.RandomForestRegressor()\n    bitcoin_rfr.fit(X_train, y_train)\n    \n    acc.at[\"r2_score\", \"RandomForestRegressor\"] = metrics.r2_score(y_test, bitcoin_rfr.predict(X_test))\n    acc.at[\"mean_squared_error\", \"RandomForestRegressor\"] = metrics.mean_squared_error(y_test, bitcoin_rfr.predict(X_test))\n    \n    \n    results =pd.DataFrame(bitcoin_rfr.predict(temp))\n    results = results.rename(columns={0: \"Prediction_rfr\"})\n    results = results.set_index(temp.index)\n\n    bitcoin_df = bitcoin_df.join(results, how = \"left\")\n    return bitcoin_df, acc","bdd3f54d":"def AdaBoostRegressor(bitcoin_df, X_train, X_test, y_train, y_test, temp, acc):\n    bitcoin_abr = ensemble.AdaBoostRegressor()\n    bitcoin_abr.fit(X_train, y_train)\n    \n    acc.at[\"r2_score\", \"AdaBoostRegressor\"] = metrics.r2_score(y_test, bitcoin_abr.predict(X_test))\n    acc.at[\"mean_squared_error\", \"AdaBoostRegressor\"] = metrics.mean_squared_error(y_test, bitcoin_abr.predict(X_test))\n    \n    results =pd.DataFrame(bitcoin_abr.predict(temp))\n    results = results.rename(columns={0: \"Prediction_abr\"})\n    results = results.set_index(temp.index)\n\n    bitcoin_df = bitcoin_df.join(results, how = \"left\")\n    return bitcoin_df, acc","4383a368":"def ExtraTreesRegressor(bitcoin_df, X_train, X_test, y_train, y_test, temp, acc):\n    bitcoin_etr = ensemble.ExtraTreesRegressor()\n    bitcoin_etr.fit(X_train, y_train)\n    acc.at[\"r2_score\", \"ExtraTreesRegressor\"] = metrics.r2_score(y_test, bitcoin_etr.predict(X_test))\n    acc.at[\"mean_squared_error\", \"ExtraTreesRegressor\"] = metrics.mean_squared_error(y_test, bitcoin_etr.predict(X_test))\n    \n    results =pd.DataFrame(bitcoin_etr.predict(temp))\n    results = results.rename(columns={0: \"Prediction_etr\"})\n    results = results.set_index(temp.index)\n\n    bitcoin_df = bitcoin_df.join(results, how = \"left\")\n    return bitcoin_df, acc","3d845779":"def HistGradientBoostingRegressor(bitcoin_df, X_train, X_test, y_train, y_test, temp, acc):\n    bitcoin_hgbr = ensemble.HistGradientBoostingRegressor()\n    bitcoin_hgbr.fit(X_train, y_train)\n    acc.at[\"r2_score\", \"HistGradientBoostingRegressor\"] = metrics.r2_score(y_test, bitcoin_hgbr.predict(X_test))\n    acc.at[\"mean_squared_error\", \"HistGradientBoostingRegressor\"] = metrics.mean_squared_error(y_test, bitcoin_hgbr.predict(X_test))\n    \n    results =pd.DataFrame(bitcoin_hgbr.predict(temp))\n    results = results.rename(columns={0: \"Prediction_hgbr\"})\n    results = results.set_index(temp.index)\n\n    bitcoin_df = bitcoin_df.join(results, how = \"left\")\n    return bitcoin_df, acc","4227a4d9":"def GradientBoostingRegressor(bitcoin_df, X_train, X_test, y_train, y_test, temp, acc):\n    bitcoin_gtb = ensemble.GradientBoostingRegressor()\n    bitcoin_gtb.fit(X_test, y_test)\n    acc.at[\"r2_score\", \"GradientBoostingRegressor\"] = metrics.r2_score(y_test, bitcoin_gtb.predict(X_test))\n    acc.at[\"mean_squared_error\", \"GradientBoostingRegressor\"] = metrics.mean_squared_error(y_test, bitcoin_gtb.predict(X_test))\n    \n    results =pd.DataFrame(bitcoin_gtb.predict(temp))\n    results = results.rename(columns={0: \"Prediction_gtb\"})\n    results = results.set_index(temp.index)\n\n    bitcoin_df = bitcoin_df.join(results, how = \"left\")\n\n    return bitcoin_df, acc","63b0dbed":"def MultiTaskLasso(bitcoin_df, X_train, X_test, y_train, y_test, temp, acc):\n    bitcoin_ml = linear_model.MultiTaskLasso()\n    bitcoin_ml.fit(X_train, y_train)\n    acc.at[\"r2_score\", \"MultiTaskLasso\"] = metrics.r2_score(y_test, bitcoin_ml.predict(X_test))\n    acc.at[\"mean_squared_error\", \"MultiTaskLasso\"] = metrics.mean_squared_error(y_test, bitcoin_ml.predict(X_test))\n    \n    results =pd.DataFrame(bitcoin_ml.predict(temp))\n    results = results.rename(columns={0: \"Prediction_ml\"})\n    results = results.set_index(temp.index)\n\n    bitcoin_df = bitcoin_df.join(results, how = \"left\")\n\n    return bitcoin_df, acc","fe493fe5":"def MultiTaskElasticNet(bitcoin_df, X_train, X_test, y_train, y_test, temp, acc):\n    bitcoin_mten = linear_model.MultiTaskElasticNet()\n    bitcoin_mten.fit(X_train, y_train)\n    acc.at[\"r2_score\", \"MultiTaskElasticNet\"] = metrics.r2_score(y_test, bitcoin_mten.predict(X_test))\n    acc.at[\"mean_squared_error\", \"MultiTaskElasticNet\"] = metrics.mean_squared_error(y_test, bitcoin_mten.predict(X_test))\n    \n    results =pd.DataFrame(bitcoin_mten.predict(temp))\n    results = results.rename(columns={0: \"Prediction_mten\"})\n    results = results.set_index(temp.index)\n\n    bitcoin_df = bitcoin_df.join(results, how = \"left\")\n\n    return bitcoin_df, acc","2ae00be0":"score = pd.DataFrame(index = [\"r2_score\", \"mean_squared_error\"], columns= [\"RandomForestRegressor\", \"AdaBoostRegressor\", \"ExtraTreesRegressor\", \"GradientBoostingRegressor\", \"MultiTaskLasso\", \"MultiTaskElasticNet\" ])\n\nbitcoin_df, temp = Datapreperation()\n\nX_train, X_test, y_train, y_test = TestTrainpreperation(bitcoin_df)\n\nbitcoin_df, score = RandomForestRegressor(bitcoin_df, X_train, X_test, y_train, y_test, temp, score)\n\nbitcoin_df, score  = AdaBoostRegressor(bitcoin_df, X_train, X_test, y_train, y_test, temp, score)\n\nbitcoin_df, score  = ExtraTreesRegressor(bitcoin_df, X_train, X_test, y_train, y_test, temp, score)\n\n#bitcoin_df = HistGradientBoostingRegressor(bitcoin_df, X_train, X_test, y_train, y_test, temp, score)\n\nbitcoin_df,score = GradientBoostingRegressor(bitcoin_df, X_train, X_test, y_train, y_test, temp, score)\n\nbitcoin_df, score = MultiTaskLasso(bitcoin_df, X_train, X_test, y_train, y_test, temp, score)\n\nbitcoin_df, score = MultiTaskElasticNet(bitcoin_df, X_train, X_test, y_train, y_test, temp, score)\n\n\nprint(bitcoin_df[1800:])\nprint(score)\nprint(bitcoin_df[[\"close\", \"Prediction_rfr\",\"Prediction_abr\", \"Prediction_etr\", \"Prediction_gtb\", \"Prediction_ml\", \"Prediction_mten\"]].plot(title = \"Prediction comparision \"))","807af58c":"Dataset used: https:\/\/www.kaggle.com\/jessevent\/all-crypto-currencies","a87123bf":"**Output explanation:**\nThe outputs are two tables and one graph.\n1. Table: Contains all values for the temp prediction\n2. Table: Contains the general r2 and mean square error score for the test data\n3. Graph: Shows a graphical comparision for the data from the 1 table","82e7a678":"# ExtraTreesRegressor","fe701ef2":"# RandomForestRegressor","ac686f83":"# HistGradientBoostingRegressor","2ece925f":"# Multi task Elastic Net","145315ec":"# AdaBoostRegressor","6c0cc44d":"# MultiTask Lasso","a6c3b026":"# Index:\n1. Data processing\n2. RandomForestRegressor\n3. AdaBoostRegressor\n4. ExtraTreesRegressor\n5. HistGradientBoostingRegressor\n6. GradientBoostingRegressor\n7. MultiTaskLasso\n9. MultiTaskElasticNet","4bc97ece":"# Gradient tree boosting","cd6a1289":"# [WIP]Cryptocurrency prediction\nThis Notebooks contains different machine learning algorithms to predict the daily bitcoin value.\nIt is more like a test to find the most effective algorithm.\nThis notebook is still work in progress, so if you have alternatives that work better, dont hesitate to write them in the comments, I will add them later.\n"}}