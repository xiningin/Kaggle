{"cell_type":{"34ccfccb":"code","e05af100":"code","a9e16568":"code","320d2c5e":"code","6dfa400e":"code","ff39e537":"code","da48164e":"code","8d247a03":"code","4805fd60":"code","398e646d":"code","0bd3eeef":"code","5280d2e7":"code","adaa26b1":"markdown","8ce3d2f8":"markdown","94c2e5f2":"markdown","0cd84ec1":"markdown"},"source":{"34ccfccb":"import numpy","e05af100":"abs((numpy.sqrt(2)**2)-2)","a9e16568":"x=0.00000000001","320d2c5e":"if abs((numpy.sqrt(2)**2)-2) < x:\n    r = round(abs((numpy.sqrt(2)**2)-2))\n    print(\"\\n\", r)","6dfa400e":"%time sum(range(100000))","ff39e537":"%timeit sum(range(100000))","da48164e":"def sum_of_lists(N):\n    total = 0\n    for i in range(5):\n        L = [j ^ (j >> i) for j in range(N)]\n        total += sum(L)\n    return total\n%prun sum_of_lists(1000000)","8d247a03":"%load_ext line_profiler","4805fd60":"%lprun -f sum_of_lists sum_of_lists(5000)","398e646d":"%load_ext memory_profiler","0bd3eeef":"%memit sum_of_lists(1000000)","5280d2e7":"%%file mprun_demo.py\ndef sum_of_lists(N):\n    total = 0\n    for i in range(5):\n        L = [j ^ (j >> i) for j in range(N)]\n        total += sum(L)\n        del L # remove reference to L\n    return total\nfrom mprun_demo import sum_of_lists\n%mprun -f sum_of_lists sum_of_lists(1000000)","adaa26b1":"# HOMEWORK 1","8ce3d2f8":"> To fix the rounding error, I came up with the solution as follows: ","94c2e5f2":"* %time: Time the execution of a single statement\n* %timeit: Time repeated execution of a single statement for more accuracy\n* %prun: Run code with the profiler\n* %lprun: Run code with the line-by-line profiler\n* %memit: Measure the memory use of a single statement\n* %mprun: Run code with the line-by-line memory profiler","0cd84ec1":"# HOMEWORK 2"}}