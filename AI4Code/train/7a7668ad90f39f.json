{"cell_type":{"b15db450":"code","d9e8c326":"code","6b830881":"code","4798a2f6":"code","33d548df":"code","4999955a":"code","1257d0a5":"code","f0b5db48":"code","37af602b":"code","02c3a73c":"code","e501fed7":"code","058d463f":"code","2820e930":"code","53749725":"code","3a81bbde":"code","3fe0e906":"code","e9fe6b67":"code","e4942a3f":"code","e2d54d1b":"code","efbfc1b1":"code","109e1080":"code","17011b8f":"code","8d20b2f8":"code","46264677":"markdown","cde3eab4":"markdown","23b46dd8":"markdown","03935601":"markdown","0e30f317":"markdown","292203ee":"markdown","4cb725f4":"markdown","82d2129f":"markdown","76615327":"markdown","bcac7a39":"markdown","8c115687":"markdown","64623951":"markdown","8d1cac35":"markdown","95f1daf0":"markdown","2079c63b":"markdown","5b3ba71b":"markdown","d9d152ae":"markdown","e56ac41d":"markdown","f9f775e6":"markdown"},"source":{"b15db450":"import tensorflow as tf \nimport numpy as np \nimport matplotlib.pyplot as plt \ntf.__version__","d9e8c326":"img_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n                            #rotation_range=90,\n                            brightness_range=(0.5,1), \n                            #shear_range=0.2, \n                            #zoom_range=0.2,\n                            channel_shift_range=0.2,\n                            horizontal_flip=False,\n                            vertical_flip=False,\n                            rescale=1.\/255,\n                            validation_split=0.3)","6b830881":"root_dir = '..\/input\/mnistasjpg\/trainingSet\/trainingSet'\n\nimg_generator_flow_train = img_generator.flow_from_directory(\n    directory=root_dir,\n    target_size=(224, 224),\n    batch_size=16,\n    shuffle=True,\n    subset=\"training\")\n\nimg_generator_flow_valid = img_generator.flow_from_directory(\n    directory=root_dir,\n    target_size=(224, 224),\n    batch_size=16,\n    shuffle=True,\n    subset=\"validation\")","4798a2f6":"imgs, labels = next(iter(img_generator_flow_train))\nfor img, label in zip(imgs, labels):\n    plt.imshow(img)\n    plt.show()","33d548df":"base_model = tf.keras.applications.InceptionV3(input_shape=(224,224,3),\n                                               include_top=False,\n                                               weights = \"imagenet\"\n                                               )","4999955a":"base_model.trainable = False","1257d0a5":"model = tf.keras.Sequential([\n    base_model,\n    tf.keras.layers.MaxPooling2D(),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(10, activation=\"softmax\")\n])","f0b5db48":"model.summary()","37af602b":"model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate = 0.001),\n              loss = tf.keras.losses.CategoricalCrossentropy(),\n              metrics = [tf.keras.metrics.CategoricalAccuracy()])","02c3a73c":"model.fit(img_generator_flow_train, \n          validation_data=img_generator_flow_valid, \n          steps_per_epoch=20, epochs=20) ","e501fed7":"# Visualise train \/ Valid Accuracy\nplt.plot(model.history.history[\"categorical_accuracy\"], c=\"r\", label=\"train_accuracy\")\nplt.plot(model.history.history[\"val_categorical_accuracy\"], c=\"b\", label=\"test_accuracy\")\nplt.legend(loc=\"upper left\")\nplt.show()","058d463f":"# Visualise train \/ Valid Loss\nplt.plot(model.history.history[\"loss\"], c=\"r\", label=\"train_loss\")\nplt.plot(model.history.history[\"val_loss\"], c=\"b\", label=\"test_loss\")\nplt.legend(loc=\"upper left\")\nplt.show()","2820e930":"imgs, labels = next(iter(img_generator_flow_valid))","53749725":"for layer in model.layers:\n    print(layer.name)","3a81bbde":"base_model = model.layers[0]","3fe0e906":"tf.keras.utils.plot_model(base_model, show_shapes=True, show_layer_names=True)","e9fe6b67":"for layer in base_model.layers:\n    print(layer.name)","e4942a3f":"last_conv_layer_name = \"mixed10\"\nclassifier_layer_names = [layer.name for layer in model.layers][1:]","e2d54d1b":"# We start by setting up the dependencies we will use\n\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Display\nfrom IPython.display import Image\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm","efbfc1b1":"# The Grad-CAM algorithm\ndef get_img_array(img_path, size):\n    # `img` is a PIL image of size 299x299\n    img = keras.preprocessing.image.load_img(img_path, target_size=size)\n    # `array` is a float32 Numpy array of shape (299, 299, 3)\n    array = keras.preprocessing.image.img_to_array(img)\n    # We add a dimension to transform our array into a \"batch\"\n    # of size (1, 299, 299, 3)\n    array = np.expand_dims(array, axis=0)\n    return array\n\n\ndef make_gradcam_heatmap(\n    img_array, base_model, model, last_conv_layer_name, classifier_layer_names):\n    # First, we create a model that maps the input image to the activations\n    # of the last conv layer\n    last_conv_layer = base_model.get_layer(last_conv_layer_name)\n    last_conv_layer_model = keras.Model(base_model.inputs, last_conv_layer.output)\n\n    # Second, we create a model that maps the activations of the last conv\n    # layer to the final class predictions\n    classifier_input = keras.Input(shape=last_conv_layer.output.shape[1:])\n    x = classifier_input\n    for layer_name in classifier_layer_names:\n        x = model.get_layer(layer_name)(x)\n    classifier_model = keras.Model(classifier_input, x)\n\n    # Then, we compute the gradient of the top predicted class for our input image\n    # with respect to the activations of the last conv layer\n    with tf.GradientTape() as tape:\n        # Compute activations of the last conv layer and make the tape watch it\n        last_conv_layer_output = last_conv_layer_model(img_array)\n        tape.watch(last_conv_layer_output)\n        # Compute class predictions\n        preds = classifier_model(last_conv_layer_output)\n        top_pred_index = tf.argmax(preds[0])\n        top_class_channel = preds[:, top_pred_index]\n\n    # This is the gradient of the top predicted class with regard to\n    # the output feature map of the last conv layer\n    grads = tape.gradient(top_class_channel, last_conv_layer_output)\n\n    # This is a vector where each entry is the mean intensity of the gradient\n    # over a specific feature map channel\n    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))\n\n    # We multiply each channel in the feature map array\n    # by \"how important this channel is\" with regard to the top predicted class\n    last_conv_layer_output = last_conv_layer_output.numpy()[0]\n    pooled_grads = pooled_grads.numpy()\n    for i in range(pooled_grads.shape[-1]):\n        last_conv_layer_output[:, :, i] *= pooled_grads[i]\n\n    # The channel-wise mean of the resulting feature map\n    # is our heatmap of class activation\n    heatmap = np.mean(last_conv_layer_output, axis=-1)\n\n    # For visualization purpose, we will also normalize the heatmap between 0 & 1\n    heatmap = np.maximum(heatmap, 0) \/ np.max(heatmap)\n    return heatmap","109e1080":"# Print what the top predicted class is\npreds = model.predict(imgs)\npred_labels = tf.argmax(preds, axis = -1)\n\nprint(\"Prediction output:\", preds)\nprint(\"Predicted label:\", pred_labels)","17011b8f":"# Generate class activation heatmap\nheatmaps = []\n\nfor img in imgs:\n    heatmap = make_gradcam_heatmap(\n    tf.expand_dims(img,axis=0),\n        base_model, model, \n        last_conv_layer_name, \n        classifier_layer_names\n  )\n    heatmaps.append(heatmap)\n\n\n# Display heatmap\nplt.matshow(heatmaps[0])\nplt.show()\n","8d20b2f8":"from pathlib import Path\n\nfor img, pred_label, true_label, heatmap in zip(imgs, pred_labels, labels, heatmaps): \n    # We rescale heatmap to a range 0-255\n    heatmap = np.uint8(255 * heatmap)\n\n    # We use jet colormap to colorize heatmap\n    jet = cm.get_cmap(\"jet\")\n\n    # We use RGB values of the colormap\n    jet_colors = jet(np.arange(256))[:, :3]\n    jet_heatmap = jet_colors[heatmap]\n\n    # We create an image with RGB colorized heatmap\n    jet_heatmap = keras.preprocessing.image.array_to_img(jet_heatmap)\n    jet_heatmap = jet_heatmap.resize((img.shape[1], img.shape[0]))\n    jet_heatmap = keras.preprocessing.image.img_to_array(jet_heatmap)\n\n    # Superimpose the heatmap on original image\n    superimposed_img = jet_heatmap * 0.003 + img\n    superimposed_img = keras.preprocessing.image.array_to_img(superimposed_img)\n\n    # Save the superimposed image\n    save_path = \"saved_img.jpg\"\n    superimposed_img.save(save_path)\n\n    # Display Grad CAM\n    pred_file_path = np.argmax(img_generator_flow_valid.labels == pred_label)\n    pred_label_name = Path(img_generator_flow_valid.filepaths[pred_file_path]).parent.name\n\n    true_file_path = np.argmax(img_generator_flow_valid.labels == tf.argmax(true_label))\n    true_label_name = Path(img_generator_flow_valid.filepaths[true_file_path]).parent.name\n\n    print(\"Predicted label:\",pred_label_name)\n    print(\"True label:\", true_label_name)\n\n    display(Image(save_path))","46264677":"### Create imgs and labels","cde3eab4":"### Train the model","23b46dd8":"### Create heatmap","03935601":"# Transfer Learning ","0e30f317":"### Create model","292203ee":"### Visualize accuracy and loss","4cb725f4":"### Prepare ImageDataGenerator\nhttps:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/preprocessing\/image\/ImageDataGenerator","82d2129f":"### Predict","76615327":"# Transfer Learning for MNIST Classification\nThis notebook referred to the following notebook.<br\/>\nhttps:\/\/www.kaggle.com\/pierrelouisdanieau\/transfer-learning-on-images-with-tensorflow","bcac7a39":"### make_gradcam_heatmap","8c115687":"### Set the weights of the imported model","64623951":"### Predicted label and heatmap","8d1cac35":"### Visualize a batch of images","95f1daf0":"## What is Transfer Learning ?\nhttps:\/\/www.aismartz.com\/blog\/an-introduction-to-transfer-learning\/<br\/>\nTransfer learning is a method wherein a model developed for a particular task is used as a starting point for another task. By model here, we mean a neural network that is trained with data and knowledge gained while solving one problem. For example, the knowledge gained in learning to recognize crocodiles can be used to recognize alligators because they have a lot of features in common.","2079c63b":"### Prepare img_generator_flow","5b3ba71b":"# Preprocessing with ImageDataGenerator","d9d152ae":"# Interpretation with Grad Cam\n","e56ac41d":"### Import a pretrained model\nhttps:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/applications\/InceptionV3","f9f775e6":"### Compile model"}}