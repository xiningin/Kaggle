{"cell_type":{"72533376":"code","cddcad21":"code","546e01bb":"code","e0d6de8e":"code","5411454d":"code","3b7fff34":"code","2e45adb9":"code","32aa1664":"code","208dee90":"code","bdfae5ff":"code","6b9e6b49":"code","3f7e5cf3":"code","458bf2f7":"code","0312d79b":"code","c197ed94":"code","0648806a":"code","358e853c":"code","6740c014":"code","84d9da2b":"code","6fa765e6":"code","62915818":"code","a287abd7":"code","aff88e3e":"code","e53a7166":"code","e93ae30e":"code","763a697f":"code","cf9488cf":"code","36f3bfd8":"code","e7996e82":"code","dcc6e826":"code","0d419ca2":"code","bb3aee67":"code","939ca65b":"code","301e2e56":"code","ac345290":"code","0964ee67":"code","e18ddcb4":"code","ed95b725":"code","b814c07f":"code","6a4e958d":"markdown"},"source":{"72533376":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","cddcad21":"import pandas as pd\nimport numpy as np\nimport scipy as sp\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nfrom textblob import TextBlob, Word\nimport nltk\nfrom nltk.stem.snowball import SnowballStemmer\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","546e01bb":"df = [line.rstrip() for line in open('..\/input\/amazon_alexa.tsv')]\nprint (len(df))","e0d6de8e":"df = pd.read_csv('..\/input\/amazon_alexa.tsv', sep='\\t')\ndf.head()","5411454d":"df.describe().T","3b7fff34":"df.dtypes","2e45adb9":"df.verified_reviews[10]","32aa1664":"X = df.verified_reviews\ny = df.rating","208dee90":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)","bdfae5ff":"vect = TfidfVectorizer(stop_words='english')\ndtm = vect.fit_transform(df.verified_reviews)\nfeatures = vect.get_feature_names()\ndtm.shape","6b9e6b49":"review = TextBlob(df.verified_reviews[105])","3f7e5cf3":"review","458bf2f7":"review.words","0312d79b":"import nltk\n# list the sentences\nreview.sentences","c197ed94":"\nstemmer = SnowballStemmer('english')","0648806a":"# stem each word\nprint ([stemmer.stem(word) for word in review.words])","358e853c":"nltk.download('wordnet')","6740c014":"print ([word.lemmatize() for word in review.words])","84d9da2b":"# Function that accepts text and returns a list of lemmas\ndef split_into_lemmas(text):\n    text = text.lower()\n    words = TextBlob(text).words\n    return [word.lemmatize() for word in words]","6fa765e6":"split_into_lemmas","62915818":"vect = CountVectorizer(analyzer=split_into_lemmas)","a287abd7":"# Function that accepts a vectorizer and calculates the accuracy\ndef tokenize_test(vect):\n    X_train_dtm = vect.fit_transform(X_train)\n    print ('Features: ', X_train_dtm.shape[1])\n    X_test_dtm = vect.transform(X_test)\n    nb = MultinomialNB()\n    nb.fit(X_train_dtm, y_train)\n    y_pred_class = nb.predict(X_test_dtm)\n    print ('Accuracy: ', metrics.accuracy_score(y_test, y_pred_class))","aff88e3e":"tokenize_test(vect)","e53a7166":"print (vect.get_feature_names()[-50:])","e93ae30e":"print (vect.get_feature_names()[50:])","763a697f":"# polarity ranges from -1 (most negative) to 1 (most positive)\nreview.sentiment.polarity","cf9488cf":"# define a function that accepts text and returns the polarity\ndef detect_sentiment(text):\n    return TextBlob(text).sentiment.polarity","36f3bfd8":"# create a new DataFrame column for sentiment (WARNING: SLOW!)\ndf['sentiment'] = df.verified_reviews.apply(detect_sentiment)","e7996e82":"df.boxplot(column='sentiment', by='rating')","dcc6e826":"df[df.sentiment == 1].verified_reviews.head()","0d419ca2":"df[df.sentiment == -1].verified_reviews.head()","bb3aee67":"# negative sentiment in a 5-star review\ndf[(df.rating == 5) & (df.sentiment < -0.3)].head(1)","939ca65b":"# positive sentiment in a 1-star review\ndf[(df.rating == 1) & (df.sentiment > 0.5)].head(1)","301e2e56":"feature_cols = ['verified_reviews', 'variation', 'feedback', 'sentiment']\nX = df[feature_cols]\ny = df.rating","ac345290":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)","0964ee67":"vect = CountVectorizer()\nX_train_dtm = vect.fit_transform(X_train.verified_reviews)\nX_test_dtm = vect.transform(X_test.verified_reviews)","e18ddcb4":"print (X_train_dtm.shape)\nprint (X_test_dtm.shape)","ed95b725":"X_train.drop('verified_reviews', axis=1).shape","b814c07f":"logreg = LogisticRegression(C=1e9)\nlogreg.fit(X_train_dtm, y_train)\ny_pred_class = logreg.predict(X_test_dtm)\nprint (metrics.accuracy_score(y_test, y_pred_class))","6a4e958d":"**Lemmatization**"}}