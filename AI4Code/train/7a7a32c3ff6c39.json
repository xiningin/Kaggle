{"cell_type":{"ff98d709":"code","173254cc":"code","2413f370":"code","e3c76695":"code","be2557c6":"code","04e37327":"code","9286b8df":"code","99fe41ac":"code","bd844575":"code","6b6ca83a":"code","ccb35ac6":"code","cac31038":"code","38d2c54d":"code","ff75c883":"code","f61dad4e":"code","ad4fa672":"code","cfea3021":"markdown","0ffeead0":"markdown","10fb6754":"markdown","77fed2e0":"markdown","4e215e32":"markdown"},"source":{"ff98d709":"from pathlib import Path\nfrom fastai.vision import *\nfrom fastai.metrics import error_rate","173254cc":"bs = 128   # batch size\narch = models.resnet50","2413f370":"path = Path(os.path.join('..', 'input', 'food41'))\npath_h5 = path\npath_img = path\/'images'\npath_meta = path\/'meta\/meta'\npath_working = '\/kaggle\/working\/'\npath_last_model = Path(os.path.join('..', 'input', 'starter-food-images'))\n\n!ls {path}","e3c76695":"!ls {path_last_model}","be2557c6":"# Modify the from folder function in fast.ai to use the dictionary mapping from folder to space seperated labels\ndef label_from_folder_map(class_to_label_map):\n    return  lambda o: class_to_label_map[(o.parts if isinstance(o, Path) else o.split(os.path.sep))[-2]]","04e37327":"# Develop dictionary mapping from classes to labels\nclasses = pd.read_csv(path_meta\/'classes.txt', header=None, index_col=0,)\nlabels = pd.read_csv(path_meta\/'labels.txt', header=None)\nclasses['map'] = labels[0].values\nclasses_to_labels_map = classes['map'].to_dict()\nlabel_from_folder_food_func = label_from_folder_map(classes_to_labels_map)","9286b8df":"# Setup the training ImageList for the DataBunch\ntrain_df = pd.read_csv(path_meta\/'train.txt', header=None).apply(lambda x : x + '.jpg')\ntrain_image_list = ImageList.from_df(train_df, path_img)\n\n# Setup the validation ImageList for the DataBunch\nvalid_df = pd.read_csv(path_meta\/'test.txt', header=None).apply(lambda x : x + '.jpg')\nvalid_image_list = ImageList.from_df(valid_df, path_img)","99fe41ac":"def get_data(bs, size):\n    \"\"\"Function to return DataBunch with different batch and image sizes.\"\"\"\n    # combine training and validation image lists into one ImageList\n    data = (train_image_list.split_by_list(train_image_list, valid_image_list))\n    \n    tfms = get_transforms() # get all transformations\n\n    # label with function defined above using the mapping from folder name to labels\n    # perform transformations and turn into a DataBunch\n    data = data.label_from_func(label_from_folder_food_func).transform(\n        tfms, size=size).databunch(bs=bs,  num_workers = 0).normalize(\n        imagenet_stats)\n    return data\n\ndata = get_data(bs, 64)","bd844575":"# show a batch to get an idea of the images and labels\ndata.show_batch(rows=4, figsize=(10,9),)","6b6ca83a":"# print all labels in the dataset\nprint(data.classes)","ccb35ac6":"# setup data, model architecture, and metrics\nlearn = cnn_learner(data, arch, metrics=error_rate)","cac31038":"# model_dir is set to the path where DataBunch is located\n# Kaggle this needs to be set to '\/kaggle\/working\/'\nlearn.model_dir = path_working","38d2c54d":"learn.data = get_data(bs\/\/4, 412) #bs = 32\nlearn.purge();","ff75c883":"learn.load(path_last_model\/'stage-2-50-412');","f61dad4e":"learn.validate(learn.data.valid_dl)","ad4fa672":"learn.TTA()","cfea3021":"## Training the model","0ffeead0":"Use a ResNet50 CNN network architecture that the weights are pre-trained on ImageNet as the starting point to train the model. Error-rate metric is used to get the Top-1 score.","10fb6754":"## Imports and Params","77fed2e0":"## Setup the data","4e215e32":"Setup the path to the images, caption, and label information. Create a DataBunch that is both the training and validation information wrapped in a class with transformations to be performed included."}}