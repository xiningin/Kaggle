{"cell_type":{"d7094329":"code","c77dd4b3":"code","ac84316b":"code","abd0b6ae":"code","4a1d696f":"code","6da779b6":"code","14d7ce69":"code","5eb45d91":"code","68aaf776":"code","7d2d81e5":"code","f2b85138":"code","0ef61560":"code","69199f26":"code","672d04ea":"code","f4278b44":"code","d63fe371":"code","2948eadd":"code","95903ad4":"code","5adc864b":"code","d1f7dde3":"code","c670853f":"code","f6e2e474":"code","d4f8781d":"code","474aa2cf":"code","4fb91bae":"code","60df6350":"code","b235e793":"code","dfbdc24e":"code","69588b74":"code","a42da10e":"code","ed938366":"code","17c7c1ce":"code","a28234c0":"code","fd4ca289":"code","ad94c7a3":"code","3db204c1":"code","5d57ee4e":"code","e31a67e3":"code","20441652":"code","2b9b58df":"code","96e716e1":"code","42edeee8":"code","0014d1d8":"code","6a1f5363":"code","86ef979a":"code","823348ac":"code","419c58d8":"code","3cb0c1ec":"code","7bfe50cc":"code","639c6560":"code","908a1ea3":"code","192f145d":"code","57c03bff":"code","72d2e773":"code","e4d07722":"code","49940d82":"code","0d847c12":"code","9fd3b3a0":"code","d14d4096":"markdown","8899df4a":"markdown","f07e7048":"markdown","650fbccb":"markdown","26cdccbc":"markdown","5e50462f":"markdown","5ad64c61":"markdown","8678a1c1":"markdown","c77df849":"markdown","341453d9":"markdown","82d8c53f":"markdown","22372e0a":"markdown"},"source":{"d7094329":"import numpy as np\nimport pandas as pd\nfrom datetime import datetime\n\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import adfuller\n\nimport matplotlib.pyplot as plt\nimport matplotlib as m\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nm.rcParams['axes.labelsize'] = 18\nm.rcParams['xtick.labelsize'] = 12\nm.rcParams['ytick.labelsize'] = 12\nm.rcParams['text.color'] = 'black'\nm.rcParams['figure.figsize'] = 18, 10\n\nimport warnings\nwarnings.filterwarnings('ignore')","c77dd4b3":"data = pd.read_csv('..\/input\/energy-consumption\/household_power_consumption.txt',\n               sep=';',parse_dates={'data_hora' : ['Date', 'Time']}, infer_datetime_format=True, low_memory=False,\n                na_values=['nan','?'])","ac84316b":"data.head()","abd0b6ae":"data.info()","4a1d696f":"data.describe()","6da779b6":"# Separating the dates by: year, month, day, hour and day of the week\ndata['year'] = data['data_hora'].dt.year\ndata['month'] = data['data_hora'].dt.month\ndata['week'] = data['data_hora'].dt.week\ndata['day'] = data['data_hora'].dt.day\ndata['time'] = data['data_hora'].dt.hour\ndata['day_week'] = data['data_hora'].dt.dayofweek","14d7ce69":"# Finding out if the day is the weekend\ndef fds(data):\n    if data.dayofweek == 5 or data.dayofweek == 6:\n        return 1\n    else:\n        return 0","5eb45d91":"data['weekend'] = data['data_hora'].apply(fds)","68aaf776":"data = data.set_index('data_hora')","7d2d81e5":"data.head()","f2b85138":"data.columns = map(str.lower, data.columns)","0ef61560":"data.groupby('time')['global_active_power'].mean().plot.bar(color='c',title='Energy consumption per hour');","69199f26":"data.groupby('day_week')['global_active_power'].mean().plot.bar(color='c',title='Consumption per weekday');","672d04ea":"data.groupby('weekend')['global_active_power'].mean().plot.bar(\n    color='c', title='Consumption on weekdays and weekends');","f4278b44":"data.groupby('day')['global_active_power'].mean().plot.bar(color='c', title='Consumption per day');","d63fe371":"data.groupby('month')['global_active_power'].mean().plot.bar(color='c', title='Consumption per month');","2948eadd":"data.groupby('year')['global_active_power'].mean().plot.bar(color='c', title='onsumption per year')","95903ad4":"# Average hour\nmean_time = data.global_active_power.resample('H').mean()\n\n# Average day\nmean_day = data.global_active_power.resample('D').mean()\n\n# Average week\nmean_week =  data.global_active_power.resample('W').mean()\n\n# Average month\nmean_month = data.global_active_power.resample('M').mean()","5adc864b":"def plot_mean(x):\n    plt.figure(1)\n    plt.subplot(211)\n    x.hist()\n    plt.subplot(212)\n    x.plot(kind='kde')\n    plt.show()","d1f7dde3":"plot_mean(mean_time)","c670853f":"plot_mean(mean_day)","f6e2e474":"plot_mean(mean_week)","d4f8781d":"plot_mean(mean_month)","474aa2cf":"fig, axs = plt.subplots(4,1, figsize=(18,30))\nmean_time.plot(title='Average hourly consumption', color='r', ax=axs[0])\nmean_day.plot(title='Average consumption per day',  color='g', ax=axs[1])\nmean_week.plot(title='Average consumption per week', color='m', ax=axs[2])\nmean_month.plot(title='Average consumption per month',  color='b', ax=axs[3])\nplt.show()","4fb91bae":"decomposicao = seasonal_decompose(mean_month, period=12, model='multiplicative', extrapolate_trend='freq')\n\ntrend = decomposicao.trend\nseasonal = decomposicao.seasonal\nresidual = decomposicao.resid\n\nplt.subplot(411)\nplt.plot(mean_month, label='Original Series')\nplt.title('Multiplicative Decomposition')\nplt.legend(loc='best')\n\nplt.subplot(412)\nplt.plot(trend, marker='o',label='Trend')\nplt.legend(loc='best')\n\nplt.subplot(413)\nplt.plot(seasonal, marker='o',label='Seasonality')\nplt.legend(loc='best')\n\nplt.subplot(414)\nplt.plot(residual, marker='o',label='Residual')\nplt.legend(loc='best')\nplt.tight_layout()","60df6350":"decomposicao = seasonal_decompose(mean_month, period=12, model='aditive', extrapolate_trend='freq')\n\n\ntrend = decomposicao.trend\nseasonal = decomposicao.seasonal\nresidual = decomposicao.resid\n\nplt.subplot(411)\nplt.plot(mean_month, label='Original Serie', color='g')\nplt.title('Additive Decomposition')\nplt.legend(loc='best')\n\nplt.subplot(412)\nplt.plot(trend, marker='o',label='Trend', color='g')\nplt.legend(loc='best')\n\nplt.subplot(413)\nplt.plot(seasonal, marker='o',label='Seasonality', color='g')\nplt.legend(loc='best')\n\nplt.subplot(414)\nplt.plot(residual, marker='o',label='Residual', color='g')\nplt.legend(loc='best')\nplt.tight_layout()","b235e793":"def stationary_test(dados):\n    # Calculate moving statistics\n    rolmean = dados.rolling(window = 12).mean()\n    rolstd = dados.rolling(window = 12).std()\n\n    # Plot \n    orig = plt.plot(dados, color = 'blue', label = 'Original')\n    mean = plt.plot(rolmean, color = 'red', label = 'Moving average')\n    std = plt.plot(rolstd, color = 'black', label = 'Standard deviation')\n    plt.legend(loc = 'best')\n    plt.title('Moving Statistics - Mean and Standard Deviation')\n    plt.show()\n    \n    teste = adfuller(mean_month, autolag='AIC')\n\n    saida = pd.Series(teste[0:4], index=['Test Statistics','P-Value','Number of Lags Considered',\n                                          'Number of Observations Used'])\n\n    for key, value in teste[4].items():\n        saida['Critical Value (%s)'%key] = value\n\n    print(saida)\n\n    if saida[1]> 0.05:\n        print('\\nThe series is not stationary.')\n    else:\n        print('\\nThe series is stationary')\n        ","dfbdc24e":"stationary_test(mean_month)","69588b74":"def removing_seasonality(data, interval=1):\n    dif = []\n    for i in range(interval, len(data)):\n        value = data[i] - data[i - interval]\n        dif.append(value)\n    return dif","a42da10e":"data_dif = removing_seasonality(mean_month, 12)\nplt.plot(data_dif);","ed938366":"data_dif = pd.DataFrame(data_dif)\nstationary_test(data_dif)","17c7c1ce":"from fbprophet import Prophet","a28234c0":"train = mean_day.iloc[0:-30]\ntest = mean_day.iloc[-30:]","fd4ca289":"train = pd.DataFrame({'data':train.index,'valor':train.values})\ntest = pd.DataFrame({'data':test.index,'valor':test.values})","ad94c7a3":"train = train.rename(columns={'data':'ds', 'valor':'y'})\ntest = test.rename(columns={'data':'ds', 'valor':'y'})","3db204c1":"model = Prophet(interval_width=0.95, yearly_seasonality=True)\nmodel.fit(train)\npred = model.make_future_dataframe(periods=30, freq='D')\npred.count()","5d57ee4e":"# Forecast\nprev = model.predict(pred)\nprev[['ds','yhat','yhat_lower','yhat_upper']].tail()","e31a67e3":"prev.drop(columns = ['multiplicative_terms', \n                                        'multiplicative_terms_lower',\n                                        'multiplicative_terms_upper'], inplace = True)","20441652":"# Original Series\nplt.plot(mean_day[-60:].index, mean_day[-60:].values, label='Observed Values')\n\n# Forecast\nplt.plot(mean_day[-30:].index, prev[-30:]['yhat'].values, label='Model preview',alpha=0.7, color='red')\n\n# Confidence Interval\nplt.fill_between(mean_day[-30:].index, prev[-30:]['yhat_lower'].values, prev[-30:]['yhat_upper'].values,\n                color='k',alpha=0.1)\n\nplt.title('Model Prophet')\nplt.legend(loc='best')\nplt.xlabel('Date')\nplt.ylabel('Consumption')\nplt.show()","2b9b58df":"train = mean_day.iloc[0:-30]\ntest = mean_day.iloc[-30:]\n\ntrain = pd.DataFrame({'data':train.index,'valor':train.values})\ntest = pd.DataFrame({'data':test.index,'valor':test.values})\n\ntrain = train.rename(columns={'data':'ds', 'valor':'y'})\ntest = test.rename(columns={'data':'ds', 'valor':'y'})","96e716e1":"model = Prophet(interval_width=0.95, daily_seasonality=True)\nmodel.add_country_holidays(country_name='US')\nmodel.fit(train)\npred = model.make_future_dataframe(periods=30, freq='D')\npred.count()","42edeee8":"prev = model.predict(pred)","0014d1d8":"# Original Series\nplt.plot(mean_day[-60:].index, mean_day[-60:].values, label='Observed Values')\n\n# Forecast\nplt.plot(mean_day[-30:].index, prev[-30:]['yhat'].values, label='Model preview',alpha=0.7, color='red')\n\n# Confidence Interval\nplt.fill_between(mean_day[-30:].index, prev[-30:]['yhat_lower'].values, prev[-30:]['yhat_upper'].values,\n                color='k',alpha=0.1)\n\nplt.title('Model Prophet')\nplt.legend(loc='best')\nplt.xlabel('Date')\nplt.ylabel('Consumption')\nplt.show()","6a1f5363":"from keras.preprocessing.sequence import TimeseriesGenerator\nfrom keras.models import Sequential\nfrom keras.layers.core import Dense, Activation\nfrom keras.layers import LSTM, Bidirectional\nfrom sklearn.preprocessing import MinMaxScaler","86ef979a":"mean_day.dropna(inplace=True)","823348ac":"train = mean_day.iloc[0:-30]\ntest = mean_day.iloc[-30:]","419c58d8":"# Reshape\ntrain, test = np.array(train[0:-30]), np.array(test[-30:])\ntrain = train.reshape(-1,1)\ntest = test.reshape(-1,1)","3cb0c1ec":"\ntrain = train.astype('float32')\ntest = test.astype('float32')\n\n# Scale\nscaler = MinMaxScaler()\nscaler.fit(train)\ntrain = scaler.transform(train)\n\nscaler = MinMaxScaler()\nscaler.fit(test)\ntest = scaler.transform(test)","7bfe50cc":"# Hyperparameters\n\nepochs = 300\nentrada = 30\nsaida = 30\nfeatures = 1\nbatch = 30","639c6560":"generator = TimeseriesGenerator(train, train, length=saida, batch_size=batch)","908a1ea3":"model = Sequential()\nmodel.add(Bidirectional(LSTM(60, activation='relu', input_shape=(entrada,features))))\nmodel.add(Dense(50, activation='relu'))\nmodel.add(Dense(30))\nmodel.compile(optimizer='adam',loss='mean_squared_error')\nmodel.fit_generator(generator,epochs=epochs)","192f145d":"valor_prever = np.array(mean_day.iloc[-60:-30])\nvalor_prever = valor_prever.reshape(1,entrada,features)\nprevisao = model.predict(valor_prever)\nprevisao = scaler.inverse_transform(previsao)\nprevisao = previsao.flatten()","57c03bff":"vl_real = np.array(mean_day.iloc[-30:])","72d2e773":"plt.plot(previsao, label='Predict Value', color='red')\nplt.plot(vl_real, label='Real Value', color='blue')\nplt.title('LSTM Model')\nplt.legend(loc='best')\nplt.show()","e4d07722":"from keras.layers import GRU","49940d82":"model = Sequential()\nmodel.add(Bidirectional(GRU(60, activation='relu', input_shape=(entrada,features))))\nmodel.add(Dense(30))\nmodel.compile(optimizer='adam', loss='mean_squared_error')\nmodel.fit_generator(generator,epochs=epochs)","0d847c12":"valor_prever = np.array(mean_day.iloc[-60:-30])\nvalor_prever = valor_prever.reshape(1,entrada,features)\nprevisao = model.predict(valor_prever)\nprevisao = scaler.inverse_transform(previsao)\nprevisao = previsao.flatten()","9fd3b3a0":"plt.plot(previsao, label='Predict Value', color='red')\nplt.plot(vl_real, label='Real Value', color='blue')\nplt.title('GRU Model')\nplt.legend(loc='best')\nplt.show()","d14d4096":"# <p style=\"background-color:#ffffff; font-family:new time roman; font-size:150%; text-align:left; border-radius:  25px; color:#183816; padding-top:5px; padding-bottom:5px;\">GRU<\/p>","8899df4a":"# <p style=\"background-color:#ffffff; font-family:new time roman; font-size:150%; text-align:left; border-radius:  25px; color:#183816; padding-top:5px; padding-bottom:5px;\">Dickey-Fuller Test<\/p>","f07e7048":"# <p style=\"background-color:#ffffff; font-family:new time roman; font-size:150%; text-align:left; border-radius:  25px; color:#183816; padding-top:5px; padding-bottom:5px;\">Problem Definition<\/p>\n\nPredict how much energy will have to be produced in December 2010 to serve customers.\n\nWe have data from the year of December 2006 to the year of November 2010. The column Global_active_power is the target.","650fbccb":"# <p style=\"background-color:#ffffff; font-family:new time roman; font-size:150%; text-align:left; border-radius:  25px; color:#183816; padding-top:5px; padding-bottom:5px;\">Additive Decomposition<\/p>","26cdccbc":"# <p style=\"background-color:#ffffff; font-family:new time roman; font-size:150%; text-align:left; border-radius:  25px; color:#183816; padding-top:5px; padding-bottom:5px;\">Plot<\/p>","5e50462f":"# <p style=\"background-color:#ffffff; font-family:new time roman; font-size:150%; text-align:left; border-radius:  25px; color:#183816; padding-top:5px; padding-bottom:5px;\">Dickey-Fuller Test<\/p>","5ad64c61":"# <p style=\"background-color:#ffffff; font-family:new time roman; font-size:150%; text-align:left; border-radius:  25px; color:#183816; padding-top:5px; padding-bottom:5px;\">Multiplicative Decomposition<\/p>","8678a1c1":"# <p style=\"background-color:#ffffff; font-family:new time roman; font-size:150%; text-align:left; border-radius:  25px; color:#183816; padding-top:5px; padding-bottom:5px;\">Working with holiday<\/p>","c77df849":"# <p style=\"background-color:#ffffff; font-family:new time roman; font-size:150%; text-align:left; border-radius:  25px; color:#183816; padding-top:5px; padding-bottom:5px;\">Prophet<\/p>\n\nProphet is a time series model that uses trending, seasonality, and holidays as key components to forecast.\n\nProphet is mainly used for daily data and the dataset should only have two columns with their names ds and y the ds __column should always be in the format datetime(Datetime)'.__\n\n__Trend Parameters__\n\n- growth: 'linear' or 'logistic' specific to linear or logistical trend.\n- changepoints: List of dates in which to include possible change points (automatic if not specified).\n- n_changepoints: If change points are not provided, you can provide the number of change points to be added automatically.\n- changepoint_prior_scale: Parameter to change the flexibility of automatic selection of change points.\n\n__Seasonality and Holidays Parameters__\n\n- yearly_seasonality: Annual seasonality.\n- weekly_seasonality: Weekly seasonality.\n- daily_seasonality: Daily seasonality.\n- holidays: Dataframe containing the name and date of the holiday.\n- seasonality_prior_scale: Parameter to change the strength of the seasonality model.\n- holiday_prior_scale: Parameter to change the strength of the holiday model.\n\n__X and Y__\n\nProphet requires variable names in the time series to be:\n\n- y \u2013 Target\n- ds \u2013 Datetime","341453d9":"# <p style=\"background-color:#ffffff; font-family:new time roman; font-size:150%; text-align:left; border-radius:  25px; color:#183816; padding-top:5px; padding-bottom:5px;\">Resampling<\/p>","82d8c53f":"# <p style=\"background-color:#ffffff; font-family:new time roman; font-size:150%; text-align:left; border-radius:  25px; color:#183816; padding-top:5px; padding-bottom:5px;\">Recurring Neural Networks - LSTM (Long Short-Term Memor)<\/p>\n\nRecurring Neural Networks are great for working with sequential data. LSTM uses Backpropagation Through Time to overcome gradient dissipation. The model can be used to solve problems in sequence. The network has connected memory blocks that differ from other networks that have mathematical neurons. Its blocks contain gates that manage the state of the network.\n\nThere are 3 types of gates:\n* Forget Gate: Gate of Oblivion\n* Input Gate: Input Gate\n* Output Gate: Output Gate","22372e0a":"# <p style=\"background-color:#ffffff; font-family:new time roman; font-size:150%; text-align:left; border-radius:  25px; color:#183816; padding-top:5px; padding-bottom:5px;\">Removing seasonality<\/p>"}}