{"cell_type":{"9e0e59a9":"code","e6a5ff92":"code","a2b1ab74":"code","55fe2daa":"code","493a662c":"code","e37b272f":"code","d33cc726":"code","8fca4914":"code","b8891bba":"code","68507ae0":"code","de258175":"code","3dbfe4b0":"code","f565ca1c":"code","b97199cd":"code","522882cf":"code","1b8d836f":"code","88565b05":"code","a6220189":"code","a1ab41b1":"code","ad182a3f":"code","53d4bc01":"code","f6cd05be":"code","f57f2b6e":"code","d64c97f3":"code","325ad078":"code","7b61405b":"code","2b416b7e":"markdown"},"source":{"9e0e59a9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e6a5ff92":"file_path='..\/input\/titanic\/train.csv'\ndf= pd.read_csv(file_path, index_col='PassengerId')\ndf","a2b1ab74":"df.isna().sum()","55fe2daa":"df.Survived.value_counts()","493a662c":"from matplotlib import pyplot as plt\nimport seaborn as sns\nplt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\nsns.countplot(df.Survived)\nplt.title('Number of passenger Survived');\n\nplt.subplot(1,2,2)\nsns.countplot(x=\"Survived\", hue=\"Sex\", data=df)\nplt.title('Number of passenger Survived');","e37b272f":"for col in df.columns:\n    print(col, len(df[col].unique()))","d33cc726":"df.drop(columns=['Name', 'Cabin', 'Ticket'], inplace=True)\ndf","8fca4914":"df.isna().sum()","b8891bba":"df.Embarked.value_counts()","68507ae0":"df.Embarked.fillna('S', inplace=True)","de258175":"df.isna().sum()","3dbfe4b0":"df['Age'].fillna((df['Age'].mean()), inplace=True)   ","f565ca1c":"df.isna().sum()","b97199cd":"df","522882cf":"df.Sex.replace('male',0, inplace=True)\ndf.Sex.replace('female',1, inplace=True)\ndf.Embarked.replace('C',0, inplace=True)\ndf.Embarked.replace('S',1, inplace=True)\ndf.Embarked.replace('Q',2, inplace=True)","1b8d836f":"from sklearn.model_selection import train_test_split\ny = df.Survived\nX = df.drop(columns=['Survived'])\nX_train, X_test, y_train, y_test = train_test_split(X,y)\n","88565b05":"from sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.metrics import mean_absolute_error,accuracy_score, classification_report, f1_score\ncandidate_max_leaf_nodes = list(range(2,15, 1))\n\nresults={}\nfor i in candidate_max_leaf_nodes:\n    dt=DecisionTreeClassifier(max_leaf_nodes=i, random_state=1)\n    dt.fit(X_train, y_train)\n    pred=dt.predict(X_test)\n    acc=accuracy_score(y_true=y_test, y_pred=pred)\n    f1=f1_score(y_true=y_test, y_pred=pred)\n    print(i)\n    print(classification_report(y_true=y_test, y_pred=pred))\n    results[i] = f1","a6220189":"max(results,key=results.get),results[max(results,key=results.get)] ","a1ab41b1":"best_para = max(results, key=results.get)\nfinal_model = DecisionTreeClassifier(max_leaf_nodes=best_para)\nfinal_model.fit(X, y)\n","ad182a3f":"testpath = '..\/input\/titanic\/test.csv'\ntest_df = pd.read_csv(testpath, index_col='PassengerId')\ntest_df.drop(columns=['Name', 'Cabin', 'Ticket'], inplace=True)\ntest_df","53d4bc01":"test_df.isna().sum()","f6cd05be":"test_df.Age.fillna(df.Age.mean(), inplace=True)\ntest_df.Fare.fillna(df.Fare.mean(), inplace=True)","f57f2b6e":"test_df.Sex.replace('male', 0, inplace=True)\ntest_df.Sex.replace('female', 1, inplace=True)\ntest_df.Embarked.replace('C', 0, inplace=True)\ntest_df.Embarked.replace('S', 1, inplace=True)\ntest_df.Embarked.replace('Q', 2, inplace=True)\ntest_df","d64c97f3":"preds = final_model.predict(test_df)","325ad078":"test_out = pd.DataFrame({\n    'PassengerId': test_df.index, \n    'Survived': preds\n})\ntest_out","7b61405b":"test_out.to_csv('submission.csv', index=False)","2b416b7e":"**missing values** handling"}}