{"cell_type":{"6806fff5":"code","e74cdcd7":"code","ae902d30":"code","d4eba204":"code","6d587e18":"code","b2151c74":"code","23bff086":"code","115e6b3f":"code","93a5bb56":"code","c0ba2cdd":"code","b1f545ef":"code","5703a81c":"code","34f0b00a":"code","d0c0006c":"code","1ba481b9":"code","2e7983ce":"code","a5611f9b":"code","67246e65":"code","720dee43":"markdown","1528c78f":"markdown","12ae991f":"markdown","a9c5a269":"markdown","bb1ce3e9":"markdown","1c50569a":"markdown","5935d22f":"markdown","26c667b2":"markdown","95b31df9":"markdown","f04d0b7a":"markdown","93903d73":"markdown","3bfc98de":"markdown","1e622369":"markdown","1fce510f":"markdown"},"source":{"6806fff5":"#Loading the required modules\n \nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn import preprocessing\nfrom scipy.spatial.distance import cdist\nfrom sklearn.datasets import load_digits\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt","e74cdcd7":"df = pd.read_csv('..\/input\/toy-dataset\/toy_dataset.csv')","ae902d30":"df","d4eba204":"df.shape","6d587e18":"df.info()","b2151c74":"df.dtypes\n#df.isnull().sum()","23bff086":"# Conversion of data that alogorithm can perform \n\ndf[\"Gender\"] = df[\"Gender\"].astype('category')\ndf[\"City\"] = df[\"City\"].astype('category')\ndf[\"Illness\"] = df[\"Illness\"].astype('category')\ndf[\"Income\"] = df[\"Income\"].astype('int')\ndf.dtypes\n","115e6b3f":"df[\"Gender\"] = df[\"Gender\"].cat.codes\ndf[\"City\"] = df[\"City\"].cat.codes\ndf[\"Illness\"] = df[\"Illness\"].cat.codes\n","93a5bb56":"df.head()","c0ba2cdd":"# Have a look at datatypes again to check all are integers\ndf.dtypes","b1f545ef":"# Droping column which are not of any use\n\ndf.drop('Number',\n   axis='columns', inplace=True)\n\n\ndf.head()","5703a81c":"df.describe()","34f0b00a":"X = df.iloc[:,[0,1,2,3,4]].values\n\nwcss =[]\nfor i in range (1,11):\n  kmeans = KMeans(n_clusters = i, init = 'k-means++', max_iter =600, n_init = 10, random_state = 0)\n  kmeans.fit(X)\n  wcss.append(kmeans.inertia_)\n  \n  \nprint(X)\n\n#sns.scatterplot(Z[0],Z[1],hue=label,palette=\u2019inferno_r\u2019)","d0c0006c":"KMean= KMeans(n_clusters=5)\nKMean.fit(df)\nlabel=KMean.predict(df)","1ba481b9":"#Accuracy is low because of dataset we have :) Use your own datasets Like iris or others\n\nprint(f'Silhouette Score(n=5): {silhouette_score(X, label)}')","2e7983ce":"# Graph to visualize the Elbow Method to find the optimal number of cluster  \n\nplt.plot(range(1,11),wcss)\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WCSS')\nplt.show()","a5611f9b":"pca = PCA(n_components=2)\nX = pca.fit_transform(X)\n\nprint(X)","67246e65":"# Applying KMeans to the dataset with the optimal number of cluster\n\nkmeans=KMeans(n_clusters= 5, init = 'k-means++', max_iter = 600, n_init = 10, random_state = 0)\ny_kmeans = kmeans.fit_predict(X)\n\n# Visualising the clusters\n\nplt.figure(figsize=(15,7))\n\nsns.scatterplot(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], color = 'yellow', label = 'Cluster 1',s=50)\nsns.scatterplot(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], color = 'blue', label = 'Cluster 2',s=50)\nsns.scatterplot(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], color = 'green', label = 'Cluster 3',s=50)\nsns.scatterplot(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], color = 'black', label = 'Cluster 4',s=50)\nsns.scatterplot(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], color = 'orange', label = 'Cluster 5',s=50)\n\nsns.scatterplot(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], color = 'red', \n                label = 'Centroids',s=300,marker=',')\nplt.grid(False)\nplt.title('Clusters of Induivals')\nplt.xlabel('')\nplt.ylabel('')\nplt.legend()\nplt.show()\n","720dee43":"## Clustering ","1528c78f":"### Visualization","12ae991f":"## Importing libraries ","a9c5a269":"## Elbow method  ","bb1ce3e9":"## Data preprocessing ","1c50569a":"### loading dataset","5935d22f":"### PCA for dimensionaliy reduction to plot datapoints in 2D graph","26c667b2":"## Silhouette score","95b31df9":"## K Means","f04d0b7a":"#### Info of dataset (Details)","93903d73":"## Silhouette score to check accuracy of Clustering ","3bfc98de":"#### Converting data from categorial to numeric (Integers)\n","1e622369":"#### Now have a look at dataset","1fce510f":"#  K Means "}}