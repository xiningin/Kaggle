{"cell_type":{"5f52e133":"code","8274e410":"code","8e18fcb6":"code","a2867ef6":"code","fc177089":"code","ba522527":"code","ba17ee00":"code","3009ebfb":"code","9d96bcde":"code","4a72ff10":"code","e67f094b":"code","6d85239d":"code","dd8f1ebd":"code","5bc792d0":"code","4d665174":"code","79f8e6aa":"code","158ca603":"code","8bf6da7d":"code","7d8acd69":"code","78f359f2":"code","013b0e89":"code","0bba4ef3":"code","068bd6e1":"code","a76c09f0":"code","84a834d3":"code","755a1a89":"code","aa25ebd7":"code","7e885e72":"code","fc943a41":"code","f31bcdd6":"code","bca0e599":"code","1bbdecda":"code","be9d0c57":"code","f4f3554f":"code","859ab3eb":"code","3d444762":"code","5ba9debf":"code","cfbde893":"code","bc6a608c":"code","26f93142":"code","3b217c28":"code","a4082e5a":"code","8947467c":"code","bee7f222":"code","9be3d9c4":"code","e54c1500":"code","63815946":"code","76ceaf67":"code","60c29aba":"code","7ec0f965":"code","b6fd7b62":"code","32d04b13":"code","ba7b444a":"code","317e46e3":"markdown","22452ac7":"markdown","ec703588":"markdown","2c53e199":"markdown","34a0e04d":"markdown","17c8cbd0":"markdown","81a59a3c":"markdown","2af52270":"markdown","483eda27":"markdown","8c73f471":"markdown","54b7da2e":"markdown","32311d67":"markdown","eb0eab3e":"markdown","ce6dfed9":"markdown","885b98a3":"markdown","79f831df":"markdown"},"source":{"5f52e133":"!pip install https:\/\/github.com\/elyase\/geotext\/archive\/master.zip\n!pip install topojson\n    ","8274e410":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    #for filename in filenames:\n        #print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8e18fcb6":"!pip install country_converter --upgrade\n","a2867ef6":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom geotext import GeoText\nimport json\nimport topojson\nimport country_converter as coco\nfrom nltk.stem import LancasterStemmer, SnowballStemmer, RegexpStemmer, WordNetLemmatizer \n#this was part of the NLP notebook\nimport nltk\nnltk.download('punkt')\n#import sentence tokenizer\nfrom nltk import sent_tokenize\n#import word tokenizer\nfrom nltk import word_tokenize\n#list of stopwords\nfrom nltk.corpus import stopwords\nimport string\n#import geograpy\nimport emoji\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nfrom wordcloud import WordCloud,STOPWORDS","fc177089":"covid_df=pd.read_csv('..\/input\/covid19-tweets\/covid19_tweets.csv')","ba522527":"covid_df.head(\n)","ba17ee00":"covid_df.shape","3009ebfb":"Location_count=pd.DataFrame(covid_df['user_location'].value_counts())","9d96bcde":"Location_count.head()","4a72ff10":"Location_count.reset_index(inplace=True)","e67f094b":"Location_count.rename(columns={'index':'Location','user_location':'count'},inplace=True)","6d85239d":"Location_count.sort_values(by='count',inplace=True,ascending=False)","dd8f1ebd":"#Location_count","5bc792d0":"Count_graph=px.bar(x='count',y='Location',data_frame=Location_count[:15],color='Location')\nCount_graph.show()","4d665174":"Location_count.shape","79f8e6aa":"location=Location_count.loc[2]['Location']","158ca603":"print(GeoText(location).countries)","8bf6da7d":"Location_country=Location_count.copy()","7d8acd69":"Location_country['Location']=Location_country['Location'].apply(lambda x:x.replace(',',' '))","78f359f2":"#Location_country","013b0e89":"Location_country['Location']=Location_country['Location'].apply(lambda x:(GeoText(x).country_mentions))","0bba4ef3":"Location_country.head()","068bd6e1":"Location_country.drop(Location_country[Location_country['Location']=='[]'].index,inplace=True)","a76c09f0":"Location_country['Location']=Location_country['Location'].apply(lambda x:(x.keys()))","84a834d3":"Location_country['Location']=Location_country['Location'].apply(lambda x:list(x))","755a1a89":"Location_country.drop(Location_country.index[Location_country.Location.map(len)==0],inplace=True)","aa25ebd7":"#Location_country","7e885e72":"Location_country['Location']=Location_country['Location'].apply(lambda x:str(x[0]))","fc943a41":"#Location_country","f31bcdd6":"agg_func={'count':'sum'}\nLocation_country=Location_country.groupby(['Location']).aggregate(agg_func)","bca0e599":"Location_country.head()","1bbdecda":"Location_country.sort_values(by=['count'],ascending=False,inplace=True)\nLocation_country.reset_index(inplace=True)\nLocation_country.columns","be9d0c57":"#Location_country['Location']=Location_country['Location'].apply(lambda x:x[2:-2])","f4f3554f":"Count_graph=px.bar(x='Location',y='count',data_frame=Location_country[:15],color='Location')\nCount_graph.show()","859ab3eb":"cc = coco.CountryConverter()\nLocation_country['Location']=Location_country['Location'].apply(lambda x:cc.convert(names=x,to='ISO3'))","3d444762":"Location_country","5ba9debf":"india_states = json.load(open(\"..\/input\/country-state-geo-location\/countries.geo.json\", \"r\"))\nfig = px.choropleth(\n    Location_country,\n    locations=\"Location\",\n    geojson=india_states,\n    color=\"count\",\n    #hover_name=\"State or union territory\",\n    hover_data=[\"count\"],\n    title=\"number of tweets from each country\",\n)\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.show()","cfbde893":"tweets=pd.DataFrame(covid_df['text'])","bc6a608c":"tweets","26f93142":"import re\ndef char_is_emoji(character):\n    return character in emoji.UNICODE_EMOJI\n#does the text contain an emoji?\ndef text_has_emoji(text):\n    for character in text:\n        if character in emoji.UNICODE_EMOJI:\n            return True\n    return False\n#remove the emoji\ndef deEmojify(inputString):\n    return inputString.encode('ascii', 'ignore').decode('ascii')","3b217c28":"punct =[]\npunct += list(string.punctuation)\npunct += '\u2019'\npunct.remove(\"'\")\ndef remove_punctuations(text):\n    for punctuation in punct:\n        text = text.replace(punctuation, ' ')\n    return text","a4082e5a":"def nlp(df):\n    # lowercase everything\n    # get rid of '\\n' from whitespace\n    # regex remove hyperlinks\n    # removing '&gt;'\n    # check for emojis\n    # remov\n        # lowercase everything\n    df['token'] = df['text'].apply(lambda x: x.lower())\n    # get rid of '\\n' from whitespace \n    df['token'] = df['token'].apply(lambda x: x.replace('\\n', ' '))\n    # regex remove hyperlinks\n    df['token'] = df['token'].str.replace('http\\S+|www.\\S+', '', case=False)\n    # removing '&gt;'\n    df['token'] = df['token'].apply(lambda x: x.replace('&gt;', ''))\n    # Checking if emoji in tokens column, use for EDA purposes otherwise not necessary to keep this column\n    df['emoji'] = df['token'].apply(lambda x: text_has_emoji(x))\n    # Removing Emojis from tokens\n    #df['token'] = df['token'].apply(lambda x: deEmojify(x))\n    # remove punctuations\n    #df['token'] = df['token'].apply(remove_punctuations)\n    # remove ' s ' that was created after removing punctuations\n    df['token'] = df['token'].apply(lambda x: str(x).replace(\" s \", \" \"))\n    return df","8947467c":"tweets1=(nlp(tweets))","bee7f222":"(tweets1)","9be3d9c4":"comment_words=''\nfor val in tweets1.token: \n      \n    # typecaste each val to string \n    val = str(val) \n  \n    # split the value \n    tokens = val.split() \n      \n    # Converts each token into lowercase \n    for i in range(len(tokens)): \n        tokens[i] = tokens[i].lower() \n      \n    comment_words += \" \".join(tokens)+\" \"\n  \nwordcloud1 = WordCloud(width = 800, height = 800, \n                background_color ='white', \n                stopwords = STOPWORDS, \n                min_font_size = 10).generate(comment_words)\nplt.figure(figsize = (10,10), facecolor = None) \nplt.imshow(wordcloud1) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show() ","e54c1500":"def categoriser(diction):\n    if(diction['neg']>0):\n        return(\"Negative\")\n    elif(diction['pos']>0):\n        return('Positive')\n    else:\n        return('Neutral')","63815946":"def SentiAnlyser(df):\n    analyser= SentimentIntensityAnalyzer()\n    df['sentiment']=df['token'].apply(lambda x: analyser.polarity_scores(x))\n    df['sentiment']=df['sentiment'].apply(lambda x:categoriser(x))\n    return df","76ceaf67":"tweets2=SentiAnlyser(tweets1)","60c29aba":"tweets2.head()","7ec0f965":"tweets2.to_csv('.\/sentiment.csv')","b6fd7b62":"tweets2.iloc[22]","32d04b13":"tweet_sentiments=pd.DataFrame(tweets2['sentiment'].value_counts())\ntweet_sentiments.reset_index(inplace=True)\ntweet_sentiments.rename(columns={'index':'Sentiment','sentiment':'count'},inplace=True)\nfig=px.pie(tweet_sentiments,values='count',names='Sentiment',title=\"Sentiments of Tweets\")","ba7b444a":"fig.show()","317e46e3":"Let's try to understand the sentiment of tweets. ","22452ac7":"This is how the dataframe looks after aggregating the count(after factoring in the cities) for each country","ec703588":"![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F769452%2F35db2dd68238bfd958efdabebc9fef8f%2Fcovid-19-4961257_1280-e1586986896105.jpg?generation=1595760042647275&alt=media)","2c53e199":"Lets take a look at the number of twwets from different locations around the world","34a0e04d":"fuctions to remove emojis","17c8cbd0":"#### WordCloud","81a59a3c":"Since the beging of the Covid-19 pandemic a large number of people from different locations around the world have tweeted about it.\nThese tweets were collected using Twitter API and a Python script.In this kernel let's try to understand the pattern of tweets from different locations around the world.","2af52270":"## Sentiment Analysis","483eda27":"Import Required Libraries","8c73f471":"The below map shows number of tweets from each countries.","54b7da2e":"## Location Analysis","32311d67":"The information is a bit confusing since the locations treat countries and cities similarly","eb0eab3e":"Function to remove punctuations.","ce6dfed9":"The count for each country has changed after the values for all cities in countries is aggregated","885b98a3":"We'll use GeoText to extract the country which city belongs to , so that we can get a picture of number of tweets from each countries","79f831df":"Before we try to do our analysis some pre-processing is required on these tweets. "}}