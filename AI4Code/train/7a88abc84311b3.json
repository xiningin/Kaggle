{"cell_type":{"9d17f942":"code","0350d86e":"code","0886a511":"code","8a71140d":"code","43270dfb":"code","ddc12419":"code","8799e6fa":"code","463b8050":"code","cc0f8cad":"code","084e5e08":"code","eefc7576":"code","c48ccb5b":"markdown","d5c01a5c":"markdown","687428c3":"markdown","7f3a987b":"markdown","1ea607b7":"markdown","3e8b3a73":"markdown","38709cce":"markdown","29afe631":"markdown"},"source":{"9d17f942":"import numpy as np \nimport pandas as pd \n\nfrom sklearn import ensemble\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_validate,GridSearchCV\nimport xgboost as xgb\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder","0350d86e":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","0886a511":"drop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)","8a71140d":"train.info()","43270dfb":"y = train['Survived']\nX = train.drop(['Survived'], axis=1)\nX_test = test","ddc12419":"str_list = [] # empty list to contain columns with strings\nnum_list = []\nfor colname, colvalue in X.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)","8799e6fa":"params={\"n_estimators\":np.arange(100,200,100),\n        \"max_depth\":np.arange(1,5,2),\n        \"learning_rate\":[0.1,0.5]\n       }","463b8050":"xgb_est=xgb.XGBClassifier(booster='gbtree', \n                          random_state=24, \n                          objective='binary:logistic',\n                          eval_metric=\"auc\")\n\ngr_xgb_est=GridSearchCV( xgb_est,param_grid=params,cv=5,n_jobs=-1,verbose=10)","cc0f8cad":"numeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())])\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, num_list),\n        ('cat', categorical_transformer, str_list)])\nclf = Pipeline(steps=[('preprocessor', preprocessor),(\"model\", gr_xgb_est)])\nclf.fit(X, y)","084e5e08":"pred_test = clf.predict(X_test)","eefc7576":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = (pred_test > 0.5).astype(int)\nsubmission.to_csv('sub.csv', index=False)\nsubmission.head()","c48ccb5b":"# submit result","d5c01a5c":"# make model using auto pipe line","687428c3":"# split data ( input data \/ label data )","7f3a987b":"# load data ","1ea607b7":"# import libraries","3e8b3a73":"# GridSearch Best XGB","38709cce":"# predict test data using model","29afe631":"# preprocessing"}}