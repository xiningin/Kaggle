{"cell_type":{"791797f8":"code","36636370":"code","5704cc8d":"code","8036d93c":"code","0b6fb720":"code","723e0305":"code","3ee157fd":"code","e58c0c94":"code","d96042b4":"code","dd43cfd5":"code","4fab5cb6":"code","14320dad":"code","982e63a7":"code","0e0f8834":"code","d858a692":"code","6806d538":"code","335ad115":"code","0d951dff":"code","733f1280":"code","b8f68ff2":"code","2d922778":"code","193704b3":"code","daa25d50":"code","f8922cb1":"code","fd99d550":"code","c70b6f76":"code","24aceae7":"code","14221755":"code","f511a43c":"code","7278042d":"code","108a08b2":"code","3ec585a7":"code","9c7eef06":"code","62d1149a":"code","0ae08be7":"code","360ac75d":"code","1c2e4584":"code","786b9d04":"code","0a1dd023":"code","f5f240b5":"code","697cdce0":"code","e4d2a281":"code","e0f32c87":"code","e5f3c2f1":"code","25ee2983":"markdown","ef1037c6":"markdown","1686cb13":"markdown","a4681f44":"markdown","d58f1a24":"markdown","1688091d":"markdown","fa6b8c25":"markdown","761b593e":"markdown","5472d861":"markdown","18e22ad0":"markdown","e33299b1":"markdown","7151e2d4":"markdown","aa59e5b0":"markdown","61866cf0":"markdown","7c451c00":"markdown","2d5d485c":"markdown","5952ad35":"markdown","11edb4e3":"markdown"},"source":{"791797f8":"import pandas as pd\nimport numpy as np\nimport matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","36636370":"dataset = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')","5704cc8d":"dataset.head()","8036d93c":"dataset.info()","0b6fb720":"dataset.isnull().sum()","723e0305":"dataset.duplicated().sum()","3ee157fd":"dataset.drop(['name', 'host_name', 'last_review', 'id'], axis=1, inplace=True)","e58c0c94":"dataset.fillna({'reviews_per_month' : 0}, inplace=True)","d96042b4":"# Checking for nulls\ndataset.isnull().sum()","dd43cfd5":"dataset.describe()","4fab5cb6":"corr_matrix = dataset.corr()\n\n# Visualising all correlations\n\nplt.figure(figsize=(10, 8))\nax4 = sns.heatmap(\n    corr_matrix, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True,\n    cbar_kws={'label': 'Correlation'}) \n\nax4.set_title('Correlation Matrix of Attributes')","14320dad":"# Finding correlation between the price and independent variables\ncorr_matrix[\"price\"].sort_values(ascending=False)","982e63a7":"# Geographical plot of prices below $500\n\nprice_less_500 =dataset[dataset.price < 500]\n\nplt.figure(figsize=(12,10))\nnyc_img=plt.imread('..\/input\/new-york-city-airbnb-open-data\/New_York_City_.png', 0)\nplt.imshow(nyc_img,zorder=0,extent=[-74.26, -73.687, 40.49,40.92])\nax=plt.gca()\nprice_less_500.plot(kind='scatter', x='longitude', y='latitude', label='Listing', c='price', ax=ax, \n           cmap=plt.get_cmap('jet'), colorbar=True, alpha=0.3)\nplt.xlabel('Longitude', size=15)\nplt.ylabel('Latitude', size=15)\nplt.title('New York Airbnb 2019 Price Heat-map (< $500)', size=15)\nplt.show()","0e0f8834":"# Geographical plot of neighbourhood groups\n\nplt.figure(figsize=(12,10))\nsns.set_style(\"whitegrid\")\nplt.imshow(nyc_img,zorder=0,extent=[-74.26, -73.687, 40.49,40.92])\nax=plt.gca()\nax1 = sns.scatterplot(x='longitude', y='latitude', data=dataset, hue='neighbourhood_group', alpha=0.7)\nax1.set(xlabel='Longitude', ylabel='Latitude', title='Listings in Each Neighbourhood Group')\nplt.show()\n","d858a692":"# Bar count of listings in each neighbourhood group\n\nplt.figure(figsize=(12, 10))\nsns.set_style(\"whitegrid\")\nax2 = sns.catplot(x='neighbourhood_group', kind='count', data=dataset, palette=\"ch:.025\")\nax2.set(xlabel='Neighbourhood Group', ylabel='Number of Listings', title='Total listings in each neighbourhood group')","6806d538":"dataset['neighbourhood_group'].value_counts()","335ad115":"# Bar count of listings of room types\n\nplt.figure(figsize=(12, 10))\nsns.set_style(\"whitegrid\")\nax3 = sns.catplot(x='room_type', kind='count', data=dataset, palette='magma')\nax3.set(xlabel='Room Type', ylabel='Number of Listings', title='Total listings of Each Room Type')","0d951dff":"dataset['room_type'].value_counts()","733f1280":"# Bar count of listings of room types in each neighbourhood group\n\nplt.figure(figsize=(12, 10))\nax4 = sns.countplot(dataset['room_type'],hue=dataset['neighbourhood_group'], palette='mako')\nax4.set_xlabel('Room Type')\nax4.set_ylabel('Number of Listings')\nax4.set_title('Room Types for Each Neighbourhood Group')","b8f68ff2":"# Distribution of prices in neighbourhood groups\n\nax5 = sns.catplot(x=\"neighbourhood_group\", y=\"price\", kind=\"violin\", data=dataset)\nax5.set(xlabel='Neighbourhood Group', ylabel='Price', title='Distribtuion of Prices in Neighbourhood Groups (< $500)')\nplt.ylim(0, 500)","2d922778":"dataset.drop(['host_id'], axis=1, inplace=True)\ndataset.head()","193704b3":"# Splitting the data into independent and dependent variables\n\nX = dataset.iloc[:, dataset.columns != 'price'].values\ny = dataset.iloc[:, 5].values\ny = y.reshape(-1, 1)","daa25d50":"# Label encoding categorical variables\n\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nlabel_encode = LabelEncoder()\n\nX[:, 0] = label_encode.fit_transform(X[:, 0])\nX[:, 1] = label_encode.fit_transform(X[:, 1])\nX[:, 4] = label_encode.fit_transform(X[:, 4])\n\nX_labelenc = pd.DataFrame(X)","f8922cb1":"X_labelenc.head()","fd99d550":"# One hot encoding labeled variables\n\nhotencode = OneHotEncoder(categorical_features=[0, 1, 4])\n\ndataset_encoded = hotencode.fit_transform(X_labelenc).toarray()","c70b6f76":"dataset_encoded.shape","24aceae7":"# Converting array back into a dataframe\n\ndf = pd.DataFrame(dataset_encoded)\ndf.head()","14221755":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df, y, test_size = 0.2, random_state = 0)","f511a43c":"from sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)","7278042d":"from sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score, mean_absolute_error\nregressor=LinearRegression()\nregressor.fit(X_train,y_train)\ny_pred=regressor.predict(X_test)\n\nr2_score(y_test,y_pred)\n\nprint(\"\"\"\n        Mean Squared Error: {}\n        R-squared Score: {}\n        Mean Absolute Error: {}\n     \"\"\".format(\n        np.sqrt(metrics.mean_squared_error(y_test, y_pred)),\n        r2_score(y_test,y_pred) * 100,\n        mean_absolute_error(y_test,y_pred)\n        ))","108a08b2":"# Comparing actual values with predictions\n\nerror_airbnb = pd.DataFrame({\n        'Actual Values': np.array(y_test).flatten(),\n        'Predicted Values': y_pred.flatten()}).head(20)\n\nerror_airbnb.head(5)","3ec585a7":"from sklearn.tree import DecisionTreeRegressor\nDTree=DecisionTreeRegressor(min_samples_leaf=.0001)\nDTree.fit(X_train,y_train)\ny_pred2=DTree.predict(X_test)\nr2_score(y_test,y_pred2)\n\nprint(\"\"\"\n        Mean Squared Error: {}\n        R-squared Score: {}\n        Mean Absolute Error: {}\n     \"\"\".format(\n        np.sqrt(metrics.mean_squared_error(y_test, y_pred2)),\n        r2_score(y_test,y_pred2) * 100,\n        mean_absolute_error(y_test,y_pred2)\n        ))","9c7eef06":"# Comparing actual values with predictions\n\nerror_airbnb2 = pd.DataFrame({\n        'Actual Values': np.array(y_test).flatten(),\n        'Predicted Values': y_pred2.flatten()}).head(20)\n\nerror_airbnb2.head(5)","62d1149a":"from sklearn.model_selection import cross_val_score\nscores = cross_val_score(DTree, X_train, y_train, scoring=\"neg_mean_squared_error\", cv=10)\nDtree_rmse_scores = np.sqrt(-scores)","0ae08be7":"print(\"\"\"\n        Scores: {}\n        Mean: {}\n        Standard deviation: {}\n        \"\"\".format(\n        Dtree_rmse_scores,\n        Dtree_rmse_scores.mean(),\n        Dtree_rmse_scores.std())\n     )","360ac75d":"from sklearn.ensemble import RandomForestRegressor\nforest_reg = RandomForestRegressor()\nforest_reg.fit(X_train, y_train.ravel())\ny_pred3 = forest_reg.predict(X_test)\nr2_score(y_test,y_pred3)\n\nprint(\"\"\"\n        Mean Squared Error: {}\n        R-squared Score: {}\n        Mean Absolute Error: {}\n     \"\"\".format(\n        np.sqrt(metrics.mean_squared_error(y_test, y_pred3)),\n        r2_score(y_test,y_pred3) * 100,\n        mean_absolute_error(y_test,y_pred3)\n        ))","1c2e4584":"scores = cross_val_score(forest_reg, X_train, y_train.ravel(), scoring=\"neg_mean_squared_error\", cv=10)\nRforest_rmse_scores = np.sqrt(-scores)","786b9d04":"print(\"\"\"\n        Scores: {}\n        Mean: {}\n        Standard deviation: {}\n        \"\"\".format(\n        Rforest_rmse_scores,\n        Rforest_rmse_scores.mean(),\n        Rforest_rmse_scores.std())\n     )","0a1dd023":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = [\n    {'n_estimators': [3, 10, 30, 50], 'max_features': [2, 4, 6, 8]},\n    {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 4]}\n]\n\nforest_reg = RandomForestRegressor()\n\ngrid_search = GridSearchCV(forest_reg, param_grid, cv=5, scoring='neg_mean_squared_error')\n\ngrid_search.fit(X_train, y_train.ravel())","f5f240b5":"print(\"\"\"\n        Best parameters: {}\n        \"\"\".format(\n        grid_search.best_params_,)\n     )","697cdce0":"cvres = grid_search.cv_results_\nfor mean_score, params in zip(cvres['mean_test_score'], cvres['params']):\n    print(np.sqrt(-mean_score), params)","e4d2a281":"from sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import randint\n\nparam_dist = {\n        'n_estimators': randint(low=1, high=200),\n        'max_features': randint(low=1, high=8),\n    }\n\nrandom_search = RandomizedSearchCV(forest_reg, param_distributions=param_dist ,n_iter=10, cv=5, scoring='neg_mean_squared_error')\nrandom_search.fit(X_train, y_train.ravel())","e0f32c87":"print(\"\"\"\n        Best parameters: {}\n        \"\"\".format(\n        random_search.best_params_,)\n     )","e5f3c2f1":"cvres2 = random_search.cv_results_\nfor mean_score, params in zip(cvres['mean_test_score'], cvres2['params']):\n    print(np.sqrt(-mean_score), params)","25ee2983":"**Finding correlations between variables**","ef1037c6":"**Checking for null values and duplicate data**","1686cb13":"**Encoding categorical data**","a4681f44":"**Viewing data statistics**","d58f1a24":"**Splitting into Test and Training Set**","1688091d":"**Grid Search**","fa6b8c25":"**Feature Scaling**","761b593e":"**Randomized Search**","5472d861":"**Data preprocessing**","18e22ad0":"**Random Forest Regression**","e33299b1":"**Visualising the data**","7151e2d4":"**K-fold Cross validation**","aa59e5b0":"**Removing unneeded attributes and null values**","61866cf0":"**Importing the dataset**","7c451c00":"**Exploring the dataset**","2d5d485c":"**Decision Tree Regression**","5952ad35":"**Importing Libraries**","11edb4e3":"**Linear Regression**"}}