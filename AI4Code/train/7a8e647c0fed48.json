{"cell_type":{"e2784a73":"code","e30e6b9c":"code","022dc375":"code","4edb1a74":"code","068be1c5":"code","f0e2021a":"code","81f41ccd":"code","e68600b7":"code","431f9ae9":"code","ca9844a0":"code","7af401e1":"code","d43d6098":"code","14698abe":"code","90c7867d":"code","0b4f44c8":"code","86ccbb8a":"code","0cb1d8be":"code","14a83591":"code","c0ebe0af":"code","7c9a3b7b":"code","5a69c313":"code","a43a15b4":"code","5c5f3e79":"code","ecfd8c3b":"code","5f491d7d":"code","c44bf6f1":"code","7c6d6bab":"code","b6e884f0":"code","28f887c9":"code","3e20fd1f":"code","5d901e8c":"code","6abff0c2":"code","39ea65e5":"code","0be9c016":"code","994e9167":"code","0928b89b":"code","940b7eb4":"code","0cda86a9":"code","022dc004":"code","91d2a024":"code","48bb76a3":"code","adb05b2e":"code","ff76dd79":"code","001e2f23":"code","9247e265":"code","83753d00":"code","d7da4cab":"code","2c271d62":"code","b798b55b":"code","2cb0d2e7":"code","04b156dc":"code","5f27dd0b":"code","9d32d87c":"code","9975a6c4":"markdown","f43afd07":"markdown","398283fa":"markdown","a85bc246":"markdown","4bb3c52b":"markdown","e40cffa5":"markdown","bc63a6b6":"markdown","ffab20b8":"markdown","426538db":"markdown","4477ae5e":"markdown","ca7bbd01":"markdown","e294770f":"markdown","de0d468f":"markdown","810dfb73":"markdown","d76d99c3":"markdown","67be8ed2":"markdown","e9985c0e":"markdown","aee2b5b6":"markdown","c6e6d516":"markdown","b38bf47c":"markdown","625228f0":"markdown","218bd7ae":"markdown"},"source":{"e2784a73":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom pandas.api.types import is_string_dtype\nfrom pandas.api.types import is_numeric_dtype\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import model_from_json\n\nfrom sklearn.metrics import mean_squared_error","e30e6b9c":"print(os.listdir('..\/input'))","022dc375":"final_path = \"\/kaggle\/input\/house-prices-advanced-regression-techniques\/\"\nfiles = os.listdir(final_path)\nfiles","4edb1a74":"house_prices_train = pd.read_csv(final_path + 'train.csv')\nhouse_prices_train.head()","068be1c5":"house_prices_test = pd.read_csv(final_path + 'test.csv')\nhouse_prices_test.head()","f0e2021a":"house_prices_train.info()","81f41ccd":"# MSZoning, BldgType, and Neighborhood are objects and does not have nulls (probably require data transformation).\n# OverallQual, Lot Area, MSSubClass are integers and does not have nulls.","e68600b7":"house_prices_train['MSZoning'].describe()","431f9ae9":"house_prices_train['BldgType'].describe()","ca9844a0":"house_prices_train['Neighborhood'].describe()","7af401e1":"house_prices_train['OverallQual'].describe()","d43d6098":"house_prices_train['LotArea'].describe()","14698abe":"house_prices_train['MSSubClass'].describe()","90c7867d":"house_prices_train['MSZoning'].hist()","0b4f44c8":"house_prices_train['BldgType'].hist()","86ccbb8a":"house_prices_train['Neighborhood'].hist()","0cb1d8be":"house_prices_train['OverallQual'].hist()","14a83591":"house_prices_train['LotArea'].hist()","c0ebe0af":"house_prices_train['MSSubClass'].hist()","7c9a3b7b":"x = house_prices_train['OverallQual']\ny = house_prices_train['LotArea']\ncolors = house_prices_train['SalePrice']\nplt.scatter(x, y, c=colors, cmap='viridis')\nplt.colorbar()\nplt.xlabel('OverallQual')\nplt.ylabel('LotArea')\nplt.title(label='Sale Prices of Houses', fontsize=20, color='blue')\nplt.show()","5a69c313":"# Detect NaN values on dataframe:\ncols_with_nan = house_prices_train.columns[house_prices_train.isna().any()].tolist()\ncols_with_nan","a43a15b4":"# Getting NaN cols that are numeric\nnan_cols_numeric = [col for col in cols_with_nan if is_numeric_dtype(house_prices_train[col])]\nnan_cols_numeric","5c5f3e79":"# Replace NaN values on numeric cols\nfor col in nan_cols_numeric:\n    house_prices_train[col].fillna((house_prices_train[col].mean()), inplace=True)\nhouse_prices_train.head()","ecfd8c3b":"# Getting NaN cols that are string\nnan_cols_string = [col for col in cols_with_nan if is_string_dtype(house_prices_train[col])]\nnan_cols_string","5f491d7d":"# Replace NaN values on string cols\nfor col in nan_cols_string:\n    house_prices_train[col].fillna((house_prices_train[col].value_counts().index[0]), inplace=True)\nhouse_prices_train.head()","c44bf6f1":"# Reset dataframe index\nhouse_prices_train.reset_index()","7c6d6bab":"# Check again if exist NaN values (we are looking for an empty list):\ncols_with_nan = house_prices_train.columns[house_prices_train.isna().any()].tolist()\ncols_with_nan","b6e884f0":"# Detect NaN values on dataframe:\ncols_with_nan_test = house_prices_test.columns[house_prices_test.isna().any()].tolist()\ncols_with_nan_test","28f887c9":"# Getting NaN cols that are numeric\nnan_cols_numeric_test = [col for col in cols_with_nan_test if is_numeric_dtype(house_prices_test[col])]\nnan_cols_numeric_test","3e20fd1f":"# Replace NaN values on numeric cols\nfor col in nan_cols_numeric_test:\n    house_prices_test[col].fillna((house_prices_test[col].mean()), inplace=True)\nhouse_prices_test.head()","5d901e8c":"# Getting NaN cols that are string\nnan_cols_string_test = [col for col in cols_with_nan_test if is_string_dtype(house_prices_test[col])]\nnan_cols_string_test","6abff0c2":"# Replace NaN values on string cols\nfor col in nan_cols_string_test:\n    house_prices_test[col].fillna((house_prices_test[col].value_counts().index[0]), inplace=True)\nhouse_prices_test.head()","39ea65e5":"# Reset dataframe index\nhouse_prices_test.reset_index()","0be9c016":"# Check again if exist NaN values (we are looking for an empty list):\ncols_with_nan_test = house_prices_test.columns[house_prices_test.isna().any()].tolist()\ncols_with_nan_test","994e9167":"house_prices_train.info()","0928b89b":"ms_zoning_count = house_prices_train['MSZoning'].value_counts()\nhouse_prices_train['MSZoning'] = house_prices_train['MSZoning'].map(ms_zoning_count)\n\nbldg_type_count = house_prices_train['BldgType'].value_counts()\nhouse_prices_train['BldgType'] = house_prices_train['BldgType'].map(bldg_type_count)\n\nneighborhood_count = house_prices_train['Neighborhood'].value_counts()\nhouse_prices_train['Neighborhood'] = house_prices_train['Neighborhood'].map(neighborhood_count)\n\nhouse_prices_train.info()","940b7eb4":"house_prices_test.info()","0cda86a9":"ms_zoning_count_test = house_prices_test['MSZoning'].value_counts()\nhouse_prices_test['MSZoning'] = house_prices_test['MSZoning'].map(ms_zoning_count_test)\n\nbldg_type_count_test = house_prices_test['BldgType'].value_counts()\nhouse_prices_test['BldgType'] = house_prices_test['BldgType'].map(bldg_type_count_test)\n\nneighborhood_count_test = house_prices_test['Neighborhood'].value_counts()\nhouse_prices_test['Neighborhood'] = house_prices_test['Neighborhood'].map(neighborhood_count_test)\n\nhouse_prices_test.info()","022dc004":"x_train = house_prices_train[[\n    'MSZoning',\n    'BldgType',\n    'OverallQual',\n    'LotArea',\n    'MSSubClass',\n    'Neighborhood'\n]].copy()\n\nx_train = x_train.astype(\"float32\") \/ [255., 255., 255., 255., 255., 255.]\n\nx_train","91d2a024":"y_train = house_prices_train['SalePrice'].copy()\ny_train","48bb76a3":"x_test = house_prices_test[[\n    'MSZoning',\n    'BldgType',\n    'OverallQual',\n    'LotArea',\n    'MSSubClass',\n    'Neighborhood'\n]].copy()\n\nx_test = x_test.astype(\"float32\") \/ [255., 255., 255., 255., 255., 255.]\n\nx_test.describe()","adb05b2e":"print(f'Training data: {x_train.shape}')\nprint(f'Test data: {x_test.shape}')","ff76dd79":"model = keras.Sequential(\n    [\n        layers.Dense(512, activation='relu', input_shape=(x_train.shape[1],)),\n        layers.Dense(256, activation='relu'),\n        layers.Dense(128, activation='relu'),\n        layers.Dense(1)\n    ]\n)","001e2f23":"model.summary()","9247e265":"model.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])","83753d00":"history = model.fit(x_train, y_train, epochs=100, batch_size=1, verbose=1, validation_split=0.2)","d7da4cab":"model_json = model.to_json()\n\nwith open(\"model.json\", \"w\") as json_file:\n    json_file.write(model_json)\n    \nmodel.save_weights(\"model.h5\")\nprint(\"Saved model to disk\")","2c271d62":"# Load json and create model:\njson_file = open('model.json', 'r')\nloaded_model_json = json_file.read()\njson_file.close()\nloaded_model = model_from_json(loaded_model_json)\n\n# Load weights into new model:\nloaded_model.load_weights(\"model.h5\")\n\nprint(\"Loaded model from disk\")","b798b55b":"x = x_train.iloc[:5]\ny = y_train.iloc[:5]\ny_pred =  loaded_model.predict(x)\nprint(\"Predictions:\\n\", list(map(lambda x: x.item(), list(y_pred))))\nprint(\"Real Data:\\n\", list(y))","2cb0d2e7":"mse = mean_squared_error(y_train, loaded_model.predict(x_train))\nrmse = np.sqrt(mse)\nprint(f\"mse: {mse}, rmse: {rmse}\")","04b156dc":"predictions = loaded_model.predict(x_test)","5f27dd0b":"submission = pd.DataFrame({'Id':house_prices_test['Id'], 'SalePrice':list(map(lambda x: x.item(), list(predictions)))})\nsubmission","9d32d87c":"filename = 'sample_submission.csv'\nsubmission.to_csv(filename, index=False)","9975a6c4":"# Check the train data","f43afd07":"## Perceptron Architecture","398283fa":"## Compilation","a85bc246":"## Some predictions","4bb3c52b":"# Imports","e40cffa5":"# Predict the `SalePrice` column using Neural Networks","bc63a6b6":"# Encode Categorical on train data","ffab20b8":"## Loading","426538db":"# Import Data","4477ae5e":"# Tarea Semana 12","ca7bbd01":"# Part B","e294770f":"# Predict and Save","de0d468f":"# Model","810dfb73":"## Training","d76d99c3":"# Encode Categorical on test data","67be8ed2":"## Saving","e9985c0e":"# Elberth Adri\u00e1n Garro S\u00e1nchez (1-1644-0594)","aee2b5b6":"# Replace NaN on test data","c6e6d516":"## Measuring the error (RMSE)","b38bf47c":"# Define X and y","625228f0":"# Load Data","218bd7ae":"# Replace NaN on train data"}}