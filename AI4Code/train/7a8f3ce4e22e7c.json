{"cell_type":{"feec973a":"code","e5984fba":"code","d46575d2":"code","9342fae4":"code","d926bea5":"code","9c2e0c2c":"code","443898aa":"code","8ce39ef2":"code","ebd98d64":"code","5deb8a0d":"code","9f004cc2":"code","08936d6b":"code","6aff0e4e":"code","21a46919":"code","115653c4":"code","1c37d53e":"code","edd8a63e":"code","5270d7f1":"code","8679d880":"code","5df192e2":"code","af3c9793":"code","19d4c9c1":"code","69275550":"code","134e9dca":"code","6a59b583":"code","2838eb8f":"code","39cf555a":"code","dca55593":"code","7fac1938":"code","2663faca":"code","cc924c50":"code","8ff3f12c":"code","6d8e15a1":"code","01e40e95":"code","090baff5":"code","6fadbb89":"code","a776e8d4":"code","ac3e0583":"code","e828cbc5":"code","d6590c06":"code","3f4171f2":"code","346cc33c":"code","7de89e3b":"code","81608c62":"code","67b79dd5":"code","e457d42d":"code","5b25daa2":"code","80d642f7":"code","627cb3c6":"markdown","94227e3f":"markdown","68d897c8":"markdown","e84994d8":"markdown","ef01e8c2":"markdown","41b763e5":"markdown","08b8d978":"markdown","6f66eada":"markdown","427fe76c":"markdown","8d860636":"markdown","6a77daf0":"markdown","c83d442e":"markdown","d63a738a":"markdown","e26d6922":"markdown","57d430d1":"markdown","e4b601d6":"markdown","bf7084f4":"markdown","977c669f":"markdown","9682a2c1":"markdown","b305f2b1":"markdown","6ee9640a":"markdown","52b3a968":"markdown","2743aca9":"markdown","e1f960ce":"markdown"},"source":{"feec973a":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","e5984fba":"df = pd.read_csv('..\/input\/Pokemon.csv')","d46575d2":"df.head()","9342fae4":"df['Type 2'].fillna(df['Type 1'],inplace = True)","d926bea5":"def sep(x):\n    return x.split('Mega ')[0]","9c2e0c2c":"df['Name'] = df['Name'].apply(lambda x: sep(x))","443898aa":"for i in range(1,len(df['Name'])):\n    if df['Name'][i] == df['Name'][i-1]:\n        df['Name'][i] = 'Mega ' + df['Name'][i]","8ce39ef2":"df.head()","ebd98d64":"df.drop('#',inplace=True,axis=1)","5deb8a0d":"df.set_index('Name',inplace=True)","9f004cc2":"df.head()","08936d6b":"df[df['Total'] == df['Total'].max()]","6aff0e4e":"df[df['HP'] == df['HP'].max()]","21a46919":"df[df['Attack'] == df['Attack'].max()]","115653c4":"df[df['Defense'] == df['Defense'].max()]","1c37d53e":"df[df['Sp. Atk'] == df['Sp. Atk'].max()]","edd8a63e":"df[df['Sp. Def'] == df['Sp. Def'].max()]","5270d7f1":"df[df['Speed'] == df['Speed'].max()]","8679d880":"df.describe()","5df192e2":"a = df.groupby('Type 1')['Total'].idxmax()\nb = df.groupby('Type 1')['Total'].max()","af3c9793":"c = pd.DataFrame({'Name':a,'Total':b})\nc","19d4c9c1":"c.sort_values(by=['Total'])","69275550":"plt.figure(figsize=(11,6))\nsns.set()\nplt.title('Distribution of pokemon types')\nk = sns.countplot(x = 'Type 1',data=df)\nk.set_xticklabels(k.get_xticklabels(), rotation=45)\nplt.show()","134e9dca":"plt.figure(figsize=(11,6))\nsns.distplot(df['Total'],color='r')","6a59b583":"sns.set()\nplt.figure(figsize=(14,8))\nk = sns.boxplot(x='Type 1',y = 'Total', data = df)\nk.set_xticklabels(k.get_xticklabels(), rotation=45)\nplt.show()","2838eb8f":"plt.figure(figsize=(11,6))\nsns.set()\nplt.title('Count of pokemon by generations')\nk = sns.countplot(x = 'Generation',data=df)\nk.set_xticklabels(k.get_xticklabels(), rotation=45)\nplt.show()","39cf555a":"plt.figure(figsize=(8,8))\nj = df.iloc[:,2:9]\nsns.heatmap(j.corr(),square=True,robust=True,annot=True,cmap='jet')","dca55593":"def legend(x):\n    if x == True:\n        return 0\n    if x == False:\n        return 1","7fac1938":"df['Legendary'] = df['Legendary'].apply(lambda x: legend(x))","2663faca":"df.head()","cc924c50":"X = df.iloc[:,:10].values","8ff3f12c":"y = df.iloc[:,10].values","6d8e15a1":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import MinMaxScaler","01e40e95":"# Normalizing data\nscaler = MinMaxScaler(feature_range = (0, 1))\nX[:,2:9] = scaler.fit_transform(X[:,2:9])","090baff5":"a = pd.DataFrame(X)","6fadbb89":"b = pd.get_dummies(a, columns=[0,1,9])\nX = b.iloc[:,0:].values","a776e8d4":"from sklearn.ensemble import GradientBoostingClassifier","ac3e0583":"# Number of folds\nnum_folds = 10\nseed = 7\n\n# Number of trees\nnum_trees = 100\n\n# Separating by folds\nkfold = KFold(num_folds, True, random_state = seed)\n\n# Creating the model\nmodelo = GradientBoostingClassifier(n_estimators = num_trees, random_state = seed)\n\n# Cross Validation\nresultado = cross_val_score(modelo, X, y, cv = kfold)\n\n# Print \nprint(\"Accuracy: %.3f\" % (resultado.mean() * 100))","e828cbc5":"from sklearn.decomposition import PCA","d6590c06":"# Choosing attributes\npca = PCA(n_components = 4)\nfit = pca.fit(X)\n\n\nprint(\"Variance: %s\" % fit.explained_variance_ratio_)\nprint(np.sum(fit.explained_variance_ratio_))\np = []\nx = []\nfor i in range(1,25):\n    pca = PCA(n_components = i)\n    fit = pca.fit(X)\n    x.append(i)\n    p.append(np.sum(fit.explained_variance_ratio_))\nx_pca = pca.transform(X)","3f4171f2":"plt.grid(True)\nplt.scatter(x,p)\nplt.show()","346cc33c":"# Folds\nnum_folds = 10\nseed = 7\n\n# Number of trees\nnum_trees = 100\n\n# Folds in data\nkfold = KFold(num_folds, True, random_state = seed)\n\n# model\nmodelo = GradientBoostingClassifier(n_estimators = num_trees, random_state = seed)\n\n# Cross Validation\nresultado = cross_val_score(modelo, x_pca, y, cv = kfold)\n\n# Printing result with PCA\nprint(\"Accuracy: %.3f\" % (resultado.mean() * 100))","7de89e3b":"from xgboost import XGBClassifier","81608c62":"#model\nmodelo = XGBClassifier(n_estimators = num_trees, random_state = seed)\n\n# Cross Validation\nresultado = cross_val_score(modelo, X, y, cv = kfold)\n\n# # Printing result\nprint(\"Acur\u00e1cia: %.3f\" % (resultado.mean() * 100))","67b79dd5":"#model\nmodelo = XGBClassifier(n_estimators = num_trees, random_state = seed)\n\n# Cross Validation\nresultado = cross_val_score(modelo, x_pca, y, cv = kfold)\n\n## Printing result with PCA\nprint(\"Accuracy: %.3f\" % (resultado.mean() * 100))","e457d42d":"from sklearn.neural_network import MLPClassifier","5b25daa2":"# Model\nmodelo = MLPClassifier(hidden_layer_sizes=500,max_iter=3000,tol=1e-7,solver='adam')\n\n# Cross Validation\nresultado = cross_val_score(modelo, X, y, cv = kfold)\n\n# Print result\nprint(\"Accuracy: %.3f\" % (resultado.mean() * 100))","80d642f7":"# model\nmodelo = MLPClassifier(hidden_layer_sizes=500,max_iter=3000,tol=1e-7,solver='adam')\n\n# Cross Validation\nresultado = cross_val_score(modelo, x_pca, y, cv = kfold)\n\n# # Printing result with PCA\nprint(\"Accuracy: %.3f\" % (resultado.mean() * 100))","627cb3c6":"Max Sp.Atk","94227e3f":"First, let's convert True or False in Legendary to 0 and 1","68d897c8":"Total max status","e84994d8":"Let's check the best Pokemons by status","ef01e8c2":"Getting dummy variables for pokemon types and generation","41b763e5":"## Playing with Pandas, Seaborn and Machine Learning with Pokemon","08b8d978":"Distribution of types","6f66eada":"Check the best pokemon by total status and type 1 and put them in a DataFrame","427fe76c":"Sort the dataframe by status ","8d860636":"Step 2 - Spliting the name to put only Mega and the name","6a77daf0":"Using PCA","c83d442e":"HP max status","d63a738a":"Creating a matrix of correlation","e26d6922":"Histogram of total status","57d430d1":"Attack max status","e4b601d6":"Loading the Pokemon DataSet","bf7084f4":"Count of Pokemon by generation","977c669f":"Brief statistical description","9682a2c1":"Step 3 - Removing # and put the Pokemon's name as index","b305f2b1":"Step 1 - Filling Type 2 - NaN with the Type 1","6ee9640a":"Max defense ","52b3a968":"## Start to use Machine Learning to determinate if the pokemon is legendary or not","2743aca9":"Let's make a boxplot to check total status by type","e1f960ce":"Max Sp.Def"}}