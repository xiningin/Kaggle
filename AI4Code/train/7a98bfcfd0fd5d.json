{"cell_type":{"6846e378":"code","1dacbcf9":"code","f46e8f30":"code","afd4d9c6":"code","6b08da7f":"code","40edee9e":"code","acca04fc":"code","ec175a76":"code","ef7b8370":"code","65bc402f":"code","aa634ac9":"code","a5ec3816":"code","cd846728":"code","025735b5":"code","5c635128":"code","7c0367be":"code","ee4d41c6":"code","82bc938e":"code","e7650f6e":"code","5d117073":"code","aac8b352":"code","5d93aa9d":"code","50fe2049":"code","37425598":"code","b5c23892":"code","0098a5a5":"code","5ce12ee8":"code","bd5ad6a2":"code","179a73d8":"code","4866d6cd":"code","4506bc44":"code","79a00e87":"code","3980c6e0":"code","ad0117b4":"code","2d355a4e":"code","6a3c8d2d":"code","cbc1dedd":"code","bfd5a053":"code","6ad54abf":"code","48f4049a":"code","85b6a3dc":"code","d28403ce":"code","775d273e":"code","8e76cd9a":"code","1deb08f3":"code","9d0d53c3":"code","b409d8d2":"code","421f6b89":"code","9d62bc49":"code","fc3791e0":"code","c5872b1f":"code","ae430bf9":"code","9924dbdb":"code","0e9c2996":"markdown","9bb21c21":"markdown","b0c90cc4":"markdown","0e84f0a6":"markdown","fd7a257f":"markdown","8c1e54e9":"markdown","13f2fed3":"markdown","15705e25":"markdown","af1b450f":"markdown","031ed164":"markdown","e3f0ea07":"markdown","9909a725":"markdown","1a04f809":"markdown"},"source":{"6846e378":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1dacbcf9":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","f46e8f30":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","afd4d9c6":"train.head()","6b08da7f":"test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","40edee9e":"test.head()","acca04fc":"(train.isnull().sum()\/len(train))*100","ec175a76":"sns.heatmap(train.isnull(), yticklabels=False, cbar=False, cmap='viridis')","ef7b8370":"(test.isnull().sum()\/len(test))*100","65bc402f":"sns.heatmap(test.isnull(), yticklabels=False, cbar=False, cmap='viridis')","aa634ac9":"sns.set_style('whitegrid')","a5ec3816":"sns.countplot(x='Survived', hue='Sex', data=train, palette='RdBu_r')","cd846728":"sns.countplot(x='Survived', hue='Pclass', data=train)","025735b5":"sns.histplot(train.Age.dropna(), kde=False, bins=30)","5c635128":"sns.countplot(x='SibSp', data=train)","7c0367be":"train['Fare'].hist(bins=40, figsize=(10,4))\nplt.ylabel('Fare')","ee4d41c6":"plt.figure(figsize=(10,6))\nsns.boxplot(x='Pclass', y='Age', data=train)","82bc938e":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        \n        if Pclass == 1:\n            return 37\n        elif Pclass == 2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age","e7650f6e":"train['Age'] = train[['Age', 'Pclass']].apply(impute_age, axis=1)","5d117073":"test['Age'] = test[['Age', 'Pclass']].apply(impute_age, axis=1)","aac8b352":"sns.heatmap(train.isnull(), yticklabels=False, cbar=False, cmap='viridis')","5d93aa9d":"sns.heatmap(test.isnull(), yticklabels=False, cbar=False, cmap='viridis')","50fe2049":"train.drop('Cabin', axis=1, inplace=True)","37425598":"test.drop('Cabin', axis=1, inplace=True)","b5c23892":"train = train.apply(lambda x: x.fillna(x.value_counts().index[0]))","0098a5a5":"test = test.apply(lambda x: x.fillna(x.value_counts().index[0]))","5ce12ee8":"train.isnull().sum()","bd5ad6a2":"test.isnull().sum()","179a73d8":"sex = pd.get_dummies(train['Sex'], drop_first=True)","4866d6cd":"sex_test = pd.get_dummies(test['Sex'], drop_first=True)","4506bc44":"embark = pd.get_dummies(train['Embarked'], drop_first=True)","79a00e87":"embark_test = pd.get_dummies(test['Embarked'], drop_first=True)","3980c6e0":"train = pd.concat([train, sex, embark], axis=1)","ad0117b4":"test = pd.concat([test, sex_test, embark_test], axis=1)","2d355a4e":"train.head()","6a3c8d2d":"test.head()","cbc1dedd":"train.drop(['Name', 'Sex', 'Ticket', 'Embarked'], axis=1, inplace=True)","bfd5a053":"train.drop('PassengerId', axis=1, inplace=True)","6ad54abf":"test.drop(['Name', 'Sex', 'Ticket', 'Embarked'], axis=1, inplace=True)","48f4049a":"train.head()","85b6a3dc":"test.head()","d28403ce":"X_train = train.drop('Survived', axis=1)\ny_train = train['Survived']","775d273e":"X_test = test.drop('PassengerId', axis=1)\nsub = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ny_test = sub['Survived']","8e76cd9a":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nlogmodel = LogisticRegression(solver='liblinear')","1deb08f3":"logmodel.fit(X_train, y_train)","9d0d53c3":"y_pred = logmodel.predict(X_test)","b409d8d2":"lgr_acc = accuracy_score(y_pred,y_test)\nprint('Accuracy score for Logistic Regression: ',lgr_acc)","421f6b89":"from sklearn.ensemble import GradientBoostingClassifier\n","9d62bc49":"gbc = GradientBoostingClassifier()","fc3791e0":"gbc.fit(X_train, y_train)\ny_pred_gbc = gbc.predict(X_test)","c5872b1f":"gbc_acc = accuracy_score(y_pred_gbc, y_test)\nprint(\"Accuracy for Gradient boosting Classifier : \",gbc_acc)","ae430bf9":"submission = pd.DataFrame({\"PassengerId\": sub['PassengerId'], \"Survived\": y_pred})\nsubmission.to_csv('submission.csv', index=False)","9924dbdb":"submission.head()","0e9c2996":"# Gradient Boosting Classifier","9bb21c21":"# Exploratory Data Analysis","b0c90cc4":"There are no more missing values in the data.","0e84f0a6":"Most people on the ship were aged between 15 to 50.","fd7a257f":"# Categorical Variables Encoding","8c1e54e9":"# Missing Value Imputation","13f2fed3":"It looks like more females were survived than males and the reason could be men helped women first to get to safety.","15705e25":"It seems Passenger class 3 people were the most who didn't survive. The reason could be their rooms were in the lower decks of the ship and it took a lot of time to come to the deck of the ship.","af1b450f":"The Age column has around 20% missing data and Cabin column has 77% missing data in the train dataset.","031ed164":"# Importing Libraries and data","e3f0ea07":"Many people were either Single or had a Spouse or Sibling accompanying them.","9909a725":"The Age column has around 20% missing data and Cabin column has 78% missing data in the test dataset.","1a04f809":"# Building Logistic Regression Model"}}