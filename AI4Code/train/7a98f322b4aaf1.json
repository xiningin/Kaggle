{"cell_type":{"3aeab791":"code","c502f1d4":"code","1d227298":"code","2b612ab6":"code","3d38c14c":"code","1f67b0bc":"code","769b8a3e":"code","3df74942":"code","9bc26774":"code","a2282bdc":"code","a1c60918":"code","65c0c16b":"code","e24f5642":"code","e9dbf6e4":"code","ae22c67d":"code","9a6d665b":"code","78d05ff2":"code","b3d984c9":"code","f6a7de29":"code","4e18fde1":"code","a5837918":"code","6e0f0b7e":"code","dc301f22":"code","43f62028":"code","dda1fa67":"code","fbafd1f4":"code","8b50a733":"code","04f5fd34":"code","39d9f8e3":"code","1d0f4d0a":"code","eaee7778":"code","a8c6d558":"code","dceae2b1":"code","3314cf4f":"code","3f9acd8d":"code","c6c0b696":"code","f354aaf9":"code","c9910c15":"code","2333fa25":"code","5c0bdba4":"code","6ba7cd1c":"code","5be0315c":"code","19cc3470":"markdown","2f8aa958":"markdown","446fe817":"markdown","08a483fe":"markdown","8e0a5eb2":"markdown","5fa0884a":"markdown","227a4818":"markdown","f9242802":"markdown","5583b416":"markdown","bc6f3140":"markdown","329e4e12":"markdown","10f61ac4":"markdown","5226ea16":"markdown"},"source":{"3aeab791":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport zipfile\nimport cv2\nfrom skimage import io\n\nimport tensorflow as tf\nfrom tensorflow.python.keras import Sequential\nfrom tensorflow.keras import layers, optimizers\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.initializers import glorot_uniform\nfrom tensorflow.keras.utils import plot_model\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint, LearningRateScheduler\nimport tensorflow.keras.backend as K\n\nimport random\nimport glob\nfrom sklearn.preprocessing import StandardScaler, normalize\nfrom IPython.display import display","c502f1d4":"data = pd.read_csv('..\/input\/lgg-mri-segmentation\/kaggle_3m\/data.csv')\ndata.info()","1d227298":"data.head(10)","2b612ab6":"data_map = []\nfor sub_dir_path in glob.glob(\"\/kaggle\/input\/lgg-mri-segmentation\/kaggle_3m\/\"+\"*\"):\n    #if os.path.isdir(sub_path_dir):\n    try:\n        dir_name = sub_dir_path.split('\/')[-1]\n        for filename in os.listdir(sub_dir_path):\n            image_path = sub_dir_path + '\/' + filename\n            data_map.extend([dir_name, image_path])\n    except Exception as e:\n        print(e)","3d38c14c":"df = pd.DataFrame({\"patient_id\" : data_map[::2],\n                   \"path\" : data_map[1::2]})\ndf.head()","1f67b0bc":"df_imgs = df[~df['path'].str.contains(\"mask\")]\ndf_masks = df[df['path'].str.contains(\"mask\")]\n\n# File path line length images for later sorting\nBASE_LEN = 89 # len(\/kaggle\/input\/lgg-mri-segmentation\/kaggle_3m\/TCGA_DU_6404_19850629\/TCGA_DU_6404_19850629_ <-!!!43.tif)\nEND_IMG_LEN = 4 # len(\/kaggle\/input\/lgg-mri-segmentation\/kaggle_3m\/TCGA_DU_6404_19850629\/TCGA_DU_6404_19850629_43 !!!->.tif)\nEND_MASK_LEN = 9 # (\/kaggle\/input\/lgg-mri-segmentation\/kaggle_3m\/TCGA_DU_6404_19850629\/TCGA_DU_6404_19850629_43 !!!->_mask.tif)\n\n# Data sorting\nimgs = sorted(df_imgs[\"path\"].values, key=lambda x : int(x[BASE_LEN:-END_IMG_LEN]))\nmasks = sorted(df_masks[\"path\"].values, key=lambda x : int(x[BASE_LEN:-END_MASK_LEN]))\n\n# Sorting check\nidx = random.randint(0, len(imgs)-1)\nprint(\"Path to the Image:\", imgs[idx], \"\\nPath to the Mask:\", masks[idx])","769b8a3e":"# Final dataframe\nbrain_df = pd.DataFrame({\"patient_id\": df_imgs.patient_id.values,\n                         \"image_path\": imgs,\n                         \"mask_path\": masks\n                        })\ndef pos_neg_diagnosis(mask_path):\n    value = np.max(cv2.imread(mask_path))\n    if value > 0 : \n        return 1\n    else:\n        return 0\n    \nbrain_df['mask'] = brain_df['mask_path'].apply(lambda x: pos_neg_diagnosis(x))\nbrain_df","3df74942":"brain_df['mask'].value_counts()","9bc26774":"import plotly.graph_objects as go  # using plotly to create interactive plots\n\nfig = go.Figure([go.Bar(x=brain_df['mask'].value_counts().index, \n                        y=brain_df['mask'].value_counts(), \n                        width=[.4, .4]\n                       )\n                ])\nfig.update_traces(marker_color='rgb(158,202,225)', marker_line_color='rgb(8,48,107)',\n                  marker_line_width=4, opacity=0.4\n                 )\nfig.update_layout(title_text=\"Mask Count Plot\",\n                  width=700,\n                  height=550,\n                  yaxis=dict(\n                             title_text=\"Count\",\n                             tickmode=\"array\",\n                             titlefont=dict(size=20)\n                           )\n                 )\nfig.update_yaxes(automargin=True)\nfig.show()","a2282bdc":"for i in range(len(brain_df)):\n    if cv2.imread(brain_df.mask_path[i]).max() > 0:\n        break\n\nplt.figure(figsize=(8,8))\nplt.subplot(1,2,1)\nplt.imshow(cv2.imread(brain_df.mask_path[i]));\nplt.title('Tumor Location')\n\nplt.subplot(1,2,2)\nplt.imshow(cv2.imread(brain_df.image_path[i]));","a1c60918":"cv2.imread(brain_df.mask_path[i]).max(), cv2.imread(brain_df.mask_path[i]).min()","65c0c16b":"# Basic visualizations: Visualize the images (MRI and Mask) in the dataset separately \n\nfig, axs = plt.subplots(6,2, figsize=(16,26))\ncount = 0\nfor x in range(6):\n  i = random.randint(0, len(brain_df)) # select a random index\n  axs[count][0].title.set_text(\"Brain MRI\") # set title\n  axs[count][0].imshow(cv2.imread(brain_df.image_path[i])) # show MRI \n  axs[count][1].title.set_text(\"Mask - \" + str(brain_df['mask'][i])) # plot title on the mask (0 or 1)\n  axs[count][1].imshow(cv2.imread(brain_df.mask_path[i])) # Show corresponding mask\n  count += 1\n\nfig.tight_layout()","e24f5642":"count = 0\ni = 0\nfig,axs = plt.subplots(12,3, figsize=(20,50))\nfor mask in brain_df['mask']:\n    if (mask==1):\n        img = io.imread(brain_df.image_path[i])\n        axs[count][0].title.set_text(\"Brain MRI\")\n        axs[count][0].imshow(img)\n        \n        mask = io.imread(brain_df.mask_path[i])\n        axs[count][1].title.set_text(\"Mask\")\n        axs[count][1].imshow(mask, cmap='gray')\n        \n        img[mask==255] = (0,255,150)  # change pixel color at the position of mask\n        axs[count][2].title.set_text(\"MRI with Mask\")\n        axs[count][2].imshow(img)\n        count +=1\n    i += 1\n    if (count==12):\n        break\n        \nfig.tight_layout()","e9dbf6e4":"brain_df_train = brain_df.drop(columns=['patient_id'])\n# Convert the data in mask column to string format, to use categorical mode in flow_from_dataframe\nbrain_df_train['mask'] = brain_df_train['mask'].apply(lambda x: str(x))\nbrain_df_train.info()","ae22c67d":"from sklearn.model_selection import train_test_split\n\ntrain, test = train_test_split(brain_df_train, test_size=0.15)","9a6d665b":"from keras_preprocessing.image import ImageDataGenerator\n\nh,w = 256, 256\ndatagen = ImageDataGenerator(rescale=1.\/255., validation_split=0.1)\n\ntrain_generator = datagen.flow_from_dataframe(\n    train,\n    directory='.\/',\n    x_col='image_path',\n    y_col='mask',\n    subset='training',\n    class_mode='categorical',\n    batch_size=16,\n    shuffle=True,\n    target_size=(h,w)\n)\nvalid_generator = datagen.flow_from_dataframe(\n    train,\n    directory='.\/',\n    x_col='image_path',\n    y_col='mask',\n    subset='validation',\n    class_mode='categorical',\n    batch_size=16,\n    shuffle=True,\n    target_size=(h,w)\n)\ntest_datagen = ImageDataGenerator(rescale=1.\/255.)\ntest_generator = test_datagen.flow_from_dataframe(\n    test,\n    directory='.\/',\n    x_col='image_path',\n    y_col='mask',\n    class_mode='categorical',\n    batch_size=16,\n    shuffle=False,\n    target_size=(h,w)\n)","78d05ff2":"from tensorflow.keras.applications.resnet50 import ResNet50\nclf_model = ResNet50(weights='imagenet', include_top=False, input_tensor=Input(shape=(h,w,3)))\nclf_model.summary()","b3d984c9":"# before this i tried with trainable layer but the accuracy was less as compared\nfor layer in clf_model.layers:\n    layers.trainable = False","f6a7de29":"head = clf_model.output\nhead = AveragePooling2D(pool_size=(4,4))(head)\nhead = Flatten(name='Flatten')(head)\nhead = Dense(256, activation='relu')(head)\nhead = Dropout(0.3)(head)\nhead = Dense(256, activation='relu')(head)\nhead = Dropout(0.3)(head)\nhead = Dense(2, activation='softmax')(head)\n\nmodel = Model(clf_model.input, head)\nmodel.compile(loss = 'categorical_crossentropy', \n              optimizer='adam', \n              metrics= [\"accuracy\"]\n             )\nmodel.summary()","4e18fde1":"earlystopping = EarlyStopping(monitor='val_loss', \n                              mode='min', \n                              verbose=1, \n                              patience=15\n                             )\ncheckpointer = ModelCheckpoint(filepath=\"clf-resnet-weights.hdf5\", \n                               verbose=1, \n                               save_best_only=True\n                              )\nreduce_lr = ReduceLROnPlateau(monitor='val_loss',\n                              mode='min',\n                              verbose=1,\n                              patience=6,\n                              min_delta=0.0001,\n                              factor=0.2\n                             )\ncallbacks = [checkpointer, earlystopping, reduce_lr]","a5837918":"h = model.fit(train_generator, \n              steps_per_epoch= train_generator.n \/\/ train_generator.batch_size, \n              epochs = 60, \n              validation_data= valid_generator, \n              validation_steps= valid_generator.n \/\/ valid_generator.batch_size, \n              callbacks=[checkpointer, earlystopping])","6e0f0b7e":"# saving model achitecture in json file\nmodel_json = model.to_json()\nwith open(\"clf-resnet-model.json\", \"w\") as json_file:\n    json_file.write(model_json)","dc301f22":"h.history.keys()","43f62028":"plt.figure(figsize=(12,5))\nplt.subplot(1,2,1)\nplt.plot(h.history['loss']);\nplt.plot(h.history['val_loss']);\nplt.title(\"Classification Model LOSS\");\nplt.ylabel(\"loss\");\nplt.xlabel(\"Epochs\");\nplt.legend(['train', 'val']);\n\nplt.subplot(1,2,2)\nplt.plot(h.history['accuracy']);\nplt.plot(h.history['val_accuracy']);\nplt.title(\"Classification Model Acc\");\nplt.ylabel(\"Accuracy\");\nplt.xlabel(\"Epochs\");\nplt.legend(['train', 'val']);","dda1fa67":"_, acc = model.evaluate(test_generator)\nprint(\"Test accuracy : {} %\".format(acc*100))","fbafd1f4":"prediction = model.predict(test_generator)\n\npred = np.argmax(prediction, axis=1)\n#pred = np.asarray(pred).astype('str')\noriginal = np.asarray(test['mask']).astype('int')\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\naccuracy = accuracy_score(original, pred)\nprint(accuracy)\n\ncm = confusion_matrix(original, pred)\n\nreport = classification_report(original, pred, labels = [0,1])\nprint(report)\nplt.figure(figsize = (5,5));\nsns.heatmap(cm, annot=True);","8b50a733":"brain_df_mask = brain_df[brain_df['mask'] == 1]\nbrain_df_mask.shape","04f5fd34":"# creating test, train and val sets\nX_train, X_val = train_test_split(brain_df_mask, test_size=0.15)\nX_test, X_val = train_test_split(X_val, test_size=0.5)\nprint(\"Train size is {}, valid size is {} & test size is {}\".format(len(X_train), len(X_val), len(X_test)))\n\ntrain_ids = list(X_train.image_path)\ntrain_mask = list(X_train.mask_path)\n\nval_ids = list(X_val.image_path)\nval_mask= list(X_val.mask_path)","39d9f8e3":"class DataGenerator(tf.keras.utils.Sequence):\n  def __init__(self, ids , mask, image_dir='.\/', batch_size=16, img_h=h, img_w=w, shuffle=True):\n\n    self.ids = ids\n    self.mask = mask\n    self.image_dir = image_dir\n    self.batch_size = batch_size\n    self.img_h = img_h\n    self.img_w = img_w\n    self.shuffle = shuffle\n    self.on_epoch_end()\n\n  def __len__(self):\n    'Get the number of batches per epoch'\n\n    return int(np.floor(len(self.ids)) \/ self.batch_size)\n\n  def __getitem__(self, index):\n    'Generate a batch of data'\n\n    #generate index of batch_size length\n    indexes = self.indexes[index* self.batch_size : (index+1) * self.batch_size]\n\n    #get the ImageId corresponding to the indexes created above based on batch size\n    list_ids = [self.ids[i] for i in indexes]\n\n    #get the MaskId corresponding to the indexes created above based on batch size\n    list_mask = [self.mask[i] for i in indexes]\n\n\n    #generate data for the X(features) and y(label)\n    X, y = self.__data_generation(list_ids, list_mask)\n\n    #returning the data\n    return X, y\n\n  def on_epoch_end(self):\n    'Used for updating the indices after each epoch, once at the beginning as well as at the end of each epoch'\n    \n    #getting the array of indices based on the input dataframe\n    self.indexes = np.arange(len(self.ids))\n\n    #if shuffle is true, shuffle the indices\n    if self.shuffle:\n      np.random.shuffle(self.indexes)\n\n  def __data_generation(self, list_ids, list_mask):\n    'generate the data corresponding the indexes in a given batch of images'\n\n    # create empty arrays of shape (batch_size,height,width,depth) \n    #Depth is 3 for input and depth is taken as 1 for output becasue mask consist only of 1 channel.\n    X = np.empty((self.batch_size, self.img_h, self.img_w, 3))\n    y = np.empty((self.batch_size, self.img_h, self.img_w, 1))\n\n    #iterate through the dataframe rows, whose size is equal to the batch_size\n    for i in range(len(list_ids)):\n      #path of the image\n      img_path = str(list_ids[i])\n      \n      #mask path\n      mask_path = str(list_mask[i])\n      \n      #reading the original image and the corresponding mask image\n      img = io.imread(img_path)\n      mask = io.imread(mask_path)\n\n      #resizing and coverting them to array of type float64\n      img = cv2.resize(img,(self.img_h,self.img_w))\n      img = np.array(img, dtype = np.float64)\n      \n      mask = cv2.resize(mask,(self.img_h,self.img_w))\n      mask = np.array(mask, dtype = np.float64)\n\n      #standardising \n      img -= img.mean()\n      img \/= img.std()\n      \n      mask -= mask.mean()\n      mask \/= mask.std()\n      \n      #Adding image to the empty array\n      X[i,] = img\n      \n      #expanding the dimnesion of the image from (256,256) to (256,256,1)\n      y[i,] = np.expand_dims(mask, axis = 2)\n    \n    #normalizing y\n    y = (y > 0).astype(int)\n\n    return X, y\n\ntrain_data = DataGenerator(train_ids, train_mask)\nval_data = DataGenerator(val_ids, val_mask)","1d0f4d0a":"# lets create model now\ndef resblock(X, f):\n    '''\n    function for creating res block\n    '''\n    X_copy = X  #copy of input\n    \n    # main path\n    X = Conv2D(f, kernel_size=(1,1), kernel_initializer='he_normal')(X)\n    X = BatchNormalization()(X)\n    X = Activation('relu')(X)\n    \n    X = Conv2D(f, kernel_size=(3,3), padding='same', kernel_initializer='he_normal')(X)\n    X = BatchNormalization()(X)\n    \n    # shortcut path\n    X_copy = Conv2D(f, kernel_size=(1,1), kernel_initializer='he_normal')(X_copy)\n    X_copy = BatchNormalization()(X_copy)\n    \n    # Adding the output from main path and short path together\n    X = Add()([X, X_copy])\n    X = Activation('relu')(X)\n    \n    return X\n\ndef upsample_concat(x, skip):\n    '''\n    funtion for upsampling image\n    '''\n    X = UpSampling2D((2,2))(x)\n    merge = Concatenate()([X, skip])\n    \n    return merge","eaee7778":"h,w = 256, 256\ninput_shape = (h,w,3)\nX_input = Input(input_shape) #iniating tensor of input shape\n\n# Stage 1\nconv_1 = Conv2D(16, 3, activation='relu', padding='same', kernel_initializer='he_normal')(X_input)\nconv_1 = BatchNormalization()(conv_1)\nconv_1 = Conv2D(16, 3, activation='relu', padding='same', kernel_initializer='he_normal')(conv_1)\nconv_1 = BatchNormalization()(conv_1)\npool_1 = MaxPool2D((2,2))(conv_1)\n\n# stage 2\nconv_2 = resblock(pool_1, 32)\npool_2 = MaxPool2D((2,2))(conv_2)\n\n# Stage 3\nconv_3 = resblock(pool_2, 64)\npool_3 = MaxPool2D((2,2))(conv_3)\n\n# Stage 4\nconv_4 = resblock(pool_3, 128)\npool_4 = MaxPool2D((2,2))(conv_4)\n\n# Stage 5 (bottle neck)\nconv_5 = resblock(pool_4, 256)\n\n# Upsample Stage 1\nup_1 = upsample_concat(conv_5, conv_4)\nup_1 = resblock(up_1, 128)\n\n# Upsample Stage 2\nup_2 = upsample_concat(up_1, conv_3)\nup_2 = resblock(up_2, 64)\n\n# Upsample Stage 3\nup_3 = upsample_concat(up_2, conv_2)\nup_3 = resblock(up_3, 32)\n\n# Upsample Stage 4\nup_4 = upsample_concat(up_3, conv_1)\nup_4 = resblock(up_4, 16)\n\n# final output\nout = Conv2D(1, (1,1), kernel_initializer='he_normal', padding='same', activation='sigmoid')(up_4)\n\nseg_model = Model(X_input, out)\nseg_model.summary()","a8c6d558":"# Define a custom loss function for ResUNet model\n'''\nactual link for refrence (https:\/\/github.com\/nabsabraham\/focal-tversky-unet\/blob\/master\/losses.py)\n'''\nfrom keras.losses import binary_crossentropy\n\nepsilon = 1e-5\nsmooth = 1\n\ndef tversky(y_true, y_pred):\n    y_true_pos = K.flatten(y_true)\n    y_pred_pos = K.flatten(y_pred)\n    true_pos = K.sum(y_true_pos * y_pred_pos)\n    false_neg = K.sum(y_true_pos * (1-y_pred_pos))\n    false_pos = K.sum((1-y_true_pos)*y_pred_pos)\n    alpha = 0.7\n    return (true_pos + smooth)\/(true_pos + alpha*false_neg + (1-alpha)*false_pos + smooth)\n\ndef focal_tversky(y_true,y_pred):\n    y_true = tf.cast(y_true, tf.float32)\n    y_pred = tf.cast(y_pred, tf.float32)\n    \n    pt_1 = tversky(y_true, y_pred)\n    gamma = 0.75\n    return K.pow((1-pt_1), gamma)\n\ndef tversky_loss(y_true, y_pred):\n    return 1 - tversky(y_true,y_pred)","dceae2b1":"# compling model and callbacks functions\nadam = tf.keras.optimizers.Adam(lr = 0.05, epsilon = 0.1)\nseg_model.compile(optimizer = adam, \n                  loss = focal_tversky, \n                  metrics = [tversky]\n                 )\n#callbacks\nearlystopping = EarlyStopping(monitor='val_loss',\n                              mode='min', \n                              verbose=1, \n                              patience=20\n                             )\n# save the best model with lower validation loss\ncheckpointer = ModelCheckpoint(filepath=\"ResUNet-segModel-weights.hdf5\", \n                               verbose=1, \n                               save_best_only=True\n                              )\nreduce_lr = ReduceLROnPlateau(monitor='val_loss',\n                              mode='min',\n                              verbose=1,\n                              patience=6,\n                              min_delta=0.0001,\n                              factor=0.2\n                             )","3314cf4f":"h = seg_model.fit(train_data, \n                  epochs = 60, \n                  validation_data = val_data,\n                  callbacks = [checkpointer, earlystopping, reduce_lr]\n                 )","3f9acd8d":"# saving model achitecture in json file\nseg_model_json = seg_model.to_json()\nwith open(\"ResUNet-seg-model.json\", \"w\") as json_file:\n    json_file.write(seg_model_json)","c6c0b696":"h.history.keys()","f354aaf9":"plt.figure(figsize=(12,5))\nplt.subplot(1,2,1)\nplt.plot(h.history['loss']);\nplt.plot(h.history['val_loss']);\nplt.title(\"SEG Model focal tversky Loss\");\nplt.ylabel(\"focal tversky loss\");\nplt.xlabel(\"Epochs\");\nplt.legend(['train', 'val']);\n\nplt.subplot(1,2,2)\nplt.plot(h.history['tversky']);\nplt.plot(h.history['val_tversky']);\nplt.title(\"SEG Model tversky score\");\nplt.ylabel(\"tversky Accuracy\");\nplt.xlabel(\"Epochs\");\nplt.legend(['train', 'val']);","c9910c15":"test_ids = list(X_test.image_path)\ntest_mask = list(X_test.mask_path)\ntest_data = DataGenerator(test_ids, test_mask)\n_, tv = seg_model.evaluate(test_data)\nprint(\"Segmentation tversky is {:.2f}%\".format(tv*100))","2333fa25":"def prediction(test, model, model_seg):\n    '''\n    Predcition function which takes dataframe containing ImageID as Input and perform 2 type of prediction on the image\n    Initially, image is passed through the classification network which predicts whether the image has defect or not, if the model\n    is 99% sure that the image has no defect, then the image is labeled as no-defect, if the model is not sure, it passes the image to the\n    segmentation network, it again checks if the image has defect or not, if it has defect, then the type and location of defect is found\n    '''\n    # empty list to store results\n    mask, image_id, has_mask = [], [], []\n    \n    #itetrating through each image in test data\n    for i in test.image_path:\n        \n        img = io.imread(i)\n        #normalizing\n        img = img *1.\/255.\n        #reshaping\n        img = cv2.resize(img, (h,w))\n        # converting img into array\n        img = np.array(img, dtype=np.float64)\n        #reshaping the image from 256,256,3 to 1,256,256,3\n        img = np.reshape(img, (1,h,w,3))\n        \n        #making prediction for tumor in image\n        is_defect = model.predict(img)\n        \n        #if tumour is not present we append the details of the image to the list\n        if np.argmax(is_defect)==0:\n            image_id.append(i)\n            has_mask.append(0)\n            mask.append('No mask :)')\n            continue\n        \n        #Creating a empty array of shape 1,256,256,1\n        X = np.empty((1,h,w,3))\n        # read the image\n        img = io.imread(i)\n        #resizing the image and coverting them to array of type float64\n        img = cv2.resize(img, (h,w))\n        img = np.array(img, dtype=np.float64)\n        \n        # standardising the image\n        img -= img.mean()\n        img \/= img.std()\n        #converting the shape of image from 256,256,3 to 1,256,256,3\n        X[0,] = img\n        \n        #make prediction of mask\n        predict = model_seg.predict(X)\n        \n        # if sum of predicted mask is 0 then there is not tumour\n        if predict.round().astype(int).sum()==0:\n            image_id.append(i)\n            has_mask.append(0)\n            mask.append('No mask :)')\n        else:\n        #if the sum of pixel values are more than 0, then there is tumour\n            image_id.append(i)\n            has_mask.append(1)\n            mask.append(predict)\n            \n    return pd.DataFrame({'image_path': image_id,'predicted_mask': mask,'has_mask': has_mask})","5c0bdba4":"# making prediction\ndf_pred = prediction(test, model, seg_model)\ndf_pred","6ba7cd1c":"# merging original and prediction df\ndf_pred = test.merge(df_pred, on='image_path')\ndf_pred.head(10)","5be0315c":"#visualizing prediction\ncount = 0\nfig, axs = plt.subplots(15,5, figsize=(30,70))\n\nfor i in range(len(df_pred)):\n    if df_pred.has_mask[i]==1 and count<15:\n        #read mri images\n        img = io.imread(df_pred.image_path[i])\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        axs[count][0].imshow(img)\n        axs[count][0].title.set_text('Brain MRI')\n        \n        #read original mask\n        mask = io.imread(df_pred.mask_path[i])\n        axs[count][1].imshow(mask)\n        axs[count][1].title.set_text('Original Mask')\n        \n        #read predicted mask\n        pred = np.array(df_pred.predicted_mask[i]).squeeze().round()\n        axs[count][2].imshow(pred)\n        axs[count][2].title.set_text('AI predicted mask')\n        \n        #overlay original mask with MRI\n        img[mask==255] = (255,0,0)\n        axs[count][3].imshow(img)\n        axs[count][3].title.set_text('Brain MRI with original mask (Ground Truth)')\n        \n        #overlay predicted mask and MRI\n        img_ = io.imread(df_pred.image_path[i])\n        img_ = cv2.cvtColor(img_, cv2.COLOR_BGR2RGB)\n        img_[pred==1] = (0,255,150)\n        axs[count][4].imshow(img_)\n        axs[count][4].title.set_text('MRI with AI PREDICTED MASK')\n        \n        count +=1\n    if (count==15):\n        break\n\nfig.tight_layout()        ","19cc3470":"### creating final datset","2f8aa958":"# 10: SEGMENTATION MODEL EVALUATION","446fe817":"![alt text](https:\/\/drive.google.com\/uc?id=1WOmTUGT_3oN_ltzWlq9ofsw9E1eJwfwH)","08a483fe":"# 5: CRETING TEST, TRAIN & VAL SET","8e0a5eb2":"# 8: BUILDING A SEGMENTATION MODEL TO LOCALIZE TUMOR","5fa0884a":"# 9: TRAINING SEGMENTATION MODEL","227a4818":"the predictions made by AI are almost correct :)","f9242802":"![alt text](https:\/\/drive.google.com\/uc?id=10XpINWmLDApPhIjxq_o8aTbeRjXIQRTD)","5583b416":"# 7: CLASSIFIACTION MODEL EVALUATION","bc6f3140":"# 2: DATA VISUALIZATION","329e4e12":"# 1: IMPORTING LIBRARIES AND DATASET","10f61ac4":"# 11: SEGMENTATION MODEL PREFORMACE \n## (COMBINING CLASSIFICATION AND SEGMENTAION MODEL BUILDING PIPELINE)","5226ea16":"# 6: TRAIN A CLASSIFIER MODEL TO DETECT IF TUMOR EXISTS OR NOT"}}