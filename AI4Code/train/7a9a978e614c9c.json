{"cell_type":{"7c6df100":"code","24a24fa0":"code","59ded099":"code","af4413b8":"code","6a6f3917":"code","6f0ad341":"code","6a12915a":"code","0ecd91e7":"code","ef122244":"code","71623e1b":"code","8e215f81":"code","edd60216":"code","1b11b555":"code","a3887bae":"code","2e48a35d":"code","0bbd180f":"code","c3aa1ac8":"code","fb83d192":"code","8765e738":"code","f93b3a51":"code","d397bbd4":"code","8c9a1536":"code","032cb49a":"code","9966b337":"code","6c2facfe":"markdown","ab624ee1":"markdown","7de55af2":"markdown","4cf18acd":"markdown","051cf89a":"markdown","e3b4a431":"markdown","86c397ea":"markdown","c8aa30a2":"markdown","f2d16f4e":"markdown"},"source":{"7c6df100":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","24a24fa0":"df = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndf.head()","59ded099":"df.dtypes","af4413b8":"df.describe()","6a6f3917":"#df_train is a clean version of df\ndf_train = df","6f0ad341":"NaN_var = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']\ndf_train[NaN_var] = df_train[NaN_var].replace(0, np.nan) #replace the 0 value of NaN_var with NaN\ndf_train.head()","6a12915a":"p = df_train.hist(figsize=(20,10))","0ecd91e7":"df_train.isnull().sum()","ef122244":"df_train['Glucose'] = df_train['Glucose'].replace(np.nan, df_train['Glucose'].mean())\ndf_train['BloodPressure'] = df_train['BloodPressure'].replace(np.nan, df_train['BloodPressure'].mean())\ndf_train['SkinThickness'] = df_train['SkinThickness'].replace(np.nan, df_train['SkinThickness'].mean())\ndf_train['Insulin'] = df_train['Insulin'].replace(np.nan, df_train['Insulin'].mean())\ndf_train['BMI'] = df_train['BMI'].replace(np.nan, df_train['BMI'].mean())\ndf_train.head()","71623e1b":"p = df_train.hist(figsize=(20,10))","8e215f81":"from scipy import stats\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ncat_variables = df_train.drop(['Outcome'],axis=1).columns\nf = pd.melt(df_train, value_vars=cat_variables)\ng = sns.FacetGrid(f, col=\"variable\",  col_wrap=4, sharex=False, sharey=False, size = 5)\ng = g.map(sns.distplot, \"value\", fit=stats.norm)","edd60216":"x_var = \"Outcome\"\nfig, axes = plt.subplots(2,4, figsize=(20,10))\naxes = axes.flatten()\n\ni = 0\nfor t in cat_variables:\n    ax = sns.boxplot(x=x_var, y=t, data=df, orient='v', ax=axes[i])\n    i +=1","1b11b555":"sns.pairplot(df_train, hue = 'Outcome')","a3887bae":"corr = df.corr()\nfig, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corr, vmax=1, annot=True,square=True);\nplt.show()","2e48a35d":"print(corr.iloc[-1].sort_values(ascending=False).drop(\"Outcome\").head(10))\n#I am using the features with more than 0.1 correlation, but it seems like it means all features.\nvar = (corr.iloc[-1].sort_values(ascending=False).drop(\"Outcome\")>0.1).index","0bbd180f":"out = df_train.Outcome.value_counts()\nprint(out)\nprint(out\/df_train.shape[0])\nout.plot(kind='bar')\nplt.show()","c3aa1ac8":"from sklearn.preprocessing import StandardScaler ","fb83d192":"scaler = StandardScaler()\nX = pd.DataFrame(scaler.fit_transform(df_train[var]), columns=var)\nX.head()","8765e738":"from sklearn.model_selection import train_test_split\ny = df['Outcome'].values\nx_train, x_test, y_train, y_test = train_test_split(X,y, random_state=123, test_size=0.3, stratify=y)","f93b3a51":"from sklearn.neighbors import KNeighborsClassifier\n\ntrain_score=[]\ntest_score=[]\nfor i in range(1,26):\n    knn = KNeighborsClassifier(n_neighbors = i)\n    knn.fit(x_train,y_train)\n    \n    train_score.append(knn.score(x_train,y_train))\n    test_score.append(knn.score(x_test,y_test))\n    \nloc = np.where(train_score==max(train_score))\nprint('Max train score: {} and K = {}' .format(max(train_score), loc[0][0]+1))\n\nloc = np.where(test_score==max(test_score))\nprint('Max test score: {} and K = {}' .format(max(test_score), loc[0][0]+1))\n","d397bbd4":"plt.figure(figsize=(15,5))\nplt.plot(range(1,i+1), train_score, label='train set')\nplt.plot(range(1,i+1), test_score, label='test set')\nplt.legend()\nplt.show()","8c9a1536":"knn = KNeighborsClassifier(15)\n\nknn.fit(x_train,y_train)\nknn.score(x_test,y_test)","032cb49a":"from sklearn.metrics import confusion_matrix\n\ny_pred = knn.predict(x_test)\nconfusion_matrix(y_test,y_pred)\npd.crosstab(y_test, y_pred, rownames=['True'], colnames=['Predicted'], margins=True)","9966b337":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","6c2facfe":"### Standardize\nI am using normal standardization. Standardization is used to faster the training iteration.","ab624ee1":"# Training","7de55af2":"# Diabetes Classification Using KNN\nThis is my first ever project that I have shared. I am new in this field. I am looking forward to your advice. Thank you.","4cf18acd":"# Model Performance Analysis\nI am using confusion matrix evaluate the model performance. More infos about confusion matrix can be read <a href= \"https:\/\/towardsdatascience.com\/demystifying-the-confusion-matrix-d8ee2497da4d\">here<\/a>","051cf89a":"This is the histogram plot that show the distribution of the data.","e3b4a431":"I replace the the NaN values with its mean","86c397ea":"The distribution plot with the replaced value","c8aa30a2":"# EDA (Exploratory Data Analysis)","f2d16f4e":"# Data Wrangling\nFrom statistics descriptive, we know that the minimum value of several features is 0. For several features such as Glucose, BloodPressure, SkinThickness, Insulin, and BMI which is impossible. I almost trapped by this thinking there's no NaN value. TO make the data cleaning easier, I changed 0 value to NaN."}}