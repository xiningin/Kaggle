{"cell_type":{"7a6f5cf5":"code","f6067cbd":"code","2d619b85":"code","68438fad":"code","aef5db65":"code","1db5348a":"code","f97c3332":"code","ed5fa1d6":"code","16450503":"code","8ffa8292":"code","be9813ae":"code","5aac3cf7":"code","2c4e2825":"code","38423afb":"code","9279bc03":"code","46d233a9":"code","b8b47b07":"code","392fd6a3":"code","4d59b336":"code","e87a67f5":"code","2421d5fb":"code","90862ab5":"code","bbd4ee1e":"code","672f439e":"code","689a7f4d":"code","0c0d87a2":"markdown"},"source":{"7a6f5cf5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\n\nimport keras\nimport keras.backend as K","f6067cbd":"K.tensorflow_backend._get_available_gpus()","2d619b85":"from tensorflow.python.client import device_lib\nprint(device_lib.list_local_devices())","68438fad":"train_df = pd.read_csv(\"..\/input\/train.csv\")","aef5db65":"train_df.head()","1db5348a":"train_df.info()","f97c3332":"train_df[\"project_essay_1\"].head()","ed5fa1d6":" train_df[\"project_essay_2\"].head()","16450503":"def get_proj_essay(df):\n    return  df[\"project_essay_1\"].fillna('')+\" \"+ df[\"project_essay_2\"].fillna('')+ \" \"+ df[\"project_essay_3\"].fillna('')+\" \"+ df[\"project_essay_4\"].fillna('')+\" \"","8ffa8292":"get_proj_essay(train_df)","be9813ae":"def get_text(df):\n    return df[\"project_title\"].fillna('')+' '+get_proj_essay(df)","5aac3cf7":"get_text(train_df)","2c4e2825":"train, dev = train_test_split(train_df, random_state=123, shuffle=True, test_size=0.1)\nprint(\"Training data shape:\", train.shape)\nprint(\"Test data shape:\", dev.shape)","38423afb":"tokenizer = keras.preprocessing.text.Tokenizer()\ntokenizer.fit_on_texts(get_text(train))","9279bc03":"def preprocess_target(df):\n    return df[[\"project_is_approved\"]].copy()\ndef preprocess_data(df):\n    processed_df = df[[\"teacher_number_of_previously_posted_projects\"]].copy()\n    processed_df[\"project_title\"] = tokenizer.texts_to_sequences(df[\"project_title\"])\n    processed_df[\"project_essay\"] = tokenizer.texts_to_sequences(get_proj_essay(df))    \n    return processed_df","46d233a9":"processed_train  = preprocess_data(train)\nprocessed_target = preprocess_target(train)\nprocessed_target.shape, processed_train.shape","b8b47b07":"processed_dev  = preprocess_data(dev)\nprocessed_dev_target = preprocess_target(dev)\nprocessed_dev.shape, processed_dev_target.shape","392fd6a3":"processed_train[\"project_essay\"].apply(lambda x: len(x)).hist(bins=10)","4d59b336":"processed_train[\"project_essay\"].apply(lambda x: max(x) if len(x) > 0 else 0)","e87a67f5":"MAX_PROJECT_TITLE_SEQ_LEN = 12\nMAX_PROJECT_TITLE = processed_train[\"project_title\"].apply(lambda x: max(x) if len(x) > 0 else 0).max() + 1\n\nMAX_PROJECT_ESSAY_SEQ_LEN = 450\nMAX_PROJECT_ESSAY = processed_train[\"project_essay\"].apply(lambda x: max(x) if len(x) > 0 else 0).max() + 1\n\nMAX_TEXT = max([MAX_PROJECT_TITLE, MAX_PROJECT_ESSAY])","2421d5fb":"MAX_TEXT","90862ab5":"def get_keras_data(df):\n    return {\n        \"teacher_number_of_previously_posted_projects\": np.array(df[\"teacher_number_of_previously_posted_projects\"]),\n        \"project_title\": keras.preprocessing.sequence.pad_sequences(df[\"project_title\"], maxlen=MAX_PROJECT_TITLE_SEQ_LEN),\n        \"project_essay\": keras.preprocessing.sequence.pad_sequences(df[\"project_essay\"], maxlen=MAX_PROJECT_ESSAY_SEQ_LEN),\n    }\n\nX_train = get_keras_data(processed_train)\nX_dev = get_keras_data(processed_dev)","bbd4ee1e":"def create_rnn_model():\n    \n    #Input Layers\n    teacher_previous_projects = keras.layers.Input(shape=(1,), name = \"teacher_number_of_previously_posted_projects\")\n    proj_title = keras.layers.Input(shape=(MAX_PROJECT_TITLE_SEQ_LEN,), name=\"project_title\")\n    proj_essay = keras.layers.Input(shape=(MAX_PROJECT_ESSAY_SEQ_LEN,), name = \"project_essay\")\n    \n    emb_layer = keras.layers.Embedding(MAX_TEXT,50)\n    emb_project_title = emb_layer(proj_title)\n    emb_project_essay = emb_layer(proj_essay)\n    \n    #RNN Layers\n    rnn_project_title = keras.layers.GRU(8, activation = 'relu')(emb_project_title)\n    rnn_project_essay = keras.layers.GRU(16, activation = 'relu')(emb_project_essay)\n    \n    all_layers = keras.layers.concatenate([teacher_previous_projects,\n                                              rnn_project_title,\n                                              rnn_project_essay])\n    # Output layer\n    rnn_output = keras.layers.Dense(1, activation = 'sigmoid')(all_layers)\n    \n    return keras.models.Model(\n        inputs=[teacher_previous_projects,\n                proj_title,\n                proj_essay,\n               ],\n        output = rnn_output\n    )\nrnn_model = create_rnn_model()\nrnn_model.summary()","672f439e":"optimizer = keras.optimizers.Adam(lr=0.001)\nrnn_model.compile(optimizer=optimizer,\n                  loss=keras.losses.binary_crossentropy,\n                  metrics=[\"accuracy\"])\n\nfor i in range(3):\n    rnn_model.fit(X_train, processed_target,\n                 batch_size=(2 ** (i + 8)),\n                 epochs=1,\n                 validation_data=(X_dev, processed_dev_target))","689a7f4d":"preds = rnn_model.predict(X_dev, batch_size=512)\nauc_score = roc_auc_score(processed_dev_target, preds)\nprint(\"AUC for validation data: %.4f\" % (auc_score,))","0c0d87a2":"### References \n  [Simple RNN with keras](https:\/\/www.kaggle.com\/nvhbk16k53\/simple-rnn-with-keras)"}}