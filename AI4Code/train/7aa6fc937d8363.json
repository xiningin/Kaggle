{"cell_type":{"2e2f7602":"code","d681558d":"code","b30fc1ec":"code","bc88bd66":"code","5261350c":"code","f48f293f":"code","577c2f34":"code","3e195638":"code","fe93d974":"code","e56b28f5":"code","6efac9c4":"code","c5af4fb6":"code","a2ca1a3a":"code","02d795ca":"code","c93b409b":"code","32ab5f87":"code","0886a66d":"code","ff9770eb":"code","2997b5f3":"markdown","a0aec99c":"markdown","534fb840":"markdown","0182064d":"markdown"},"source":{"2e2f7602":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d681558d":"from PIL import Image\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D, Flatten, Dense","b30fc1ec":"from os import listdir\nfrom os.path import isfile, isdir, join\n\ndef get_imgs_data(mypath, return_file_names=False):\n    files = listdir(mypath) # \u53d6\u5f97\u6240\u6709\u6a94\u6848\u8207\u5b50\u76ee\u9304\u540d\u7a31\n    imgs_arr = []\n    file_names = []\n    for f in files:\n        if (not f[0]=='.') and (f[-4:]=='.png'):\n            img = Image.open(mypath+f)\n            img = img.resize((224, 224), Image.ANTIALIAS)\n            imgs_arr.append(np.array(img))\n            file_names.append(f[:-4])\n            \n    op_array =  np.clip(np.array(imgs_arr) \/ 127.5-1, -1, 1)\n    if return_file_names:\n        return op_array , file_names\n    return op_array \n\nX_test, ids_test = get_imgs_data(\"\/kaggle\/input\/aia-identifying-dogs-revised\/testing_set\/testing_set\/\", return_file_names=True); print(X_test.shape)\nids_test[:5]","bc88bd66":"classmap = pd.read_csv('\/kaggle\/input\/aia-identifying-dogs-revised\/classmap.csv', index_col=0, header=None).to_dict()[1]\nclassmap","5261350c":"X_train_list = [] \ny_train_list = []\nfor k in classmap.keys():\n    c_i =  classmap[k]\n    X_train_ = get_imgs_data(f\"\/kaggle\/input\/aia-identifying-dogs-revised\/training_set\/training_set\/{k}\/\"); print(f\"class [{c_i}]: \", X_train_.shape)\n    X_train_list.append(X_train_)\n    y_train_list.append(np.zeros(X_train_.shape[0])+c_i)\nX_train = np.concatenate(X_train_list, 0); print(f\"X_train: \", X_train.shape)\ny_train = np.concatenate(y_train_list, 0); print(f\"y_train: \", y_train.shape)\ndel X_train_list; del y_train_list","f48f293f":"y_train_categ = to_categorical(y_train); print(f\"y_train_categ: \", y_train_categ.shape)","577c2f34":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(\n    featurewise_center=True,\n    featurewise_std_normalization=True,\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True)\n\ndatagen.fit(X_train)","3e195638":"from tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import Dense, Conv2D, BatchNormalization, MaxPool2D, GlobalAveragePooling2D\nfrom tensorflow.keras.optimizers import RMSprop, Adam, SGD\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.applications import VGG16, MobileNet, InceptionV3\nfrom tensorflow.keras.layers import Input","fe93d974":"# this could also be the output a different Keras model or layer\ninput_tensor = Input(shape=(224, 224, 3))  # this assumes K.image_data_format() == 'channels_last'\nbase_model = InceptionV3(input_tensor=input_tensor, weights='imagenet', include_top=False)","e56b28f5":"x = base_model.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(1024, activation='relu')(x)\npredictions = Dense(7, activation='softmax')(x)\n\nmodel = Model(inputs=base_model.input, outputs=predictions)","6efac9c4":"# first: train only the top layers (which were randomly initialized)\n# i.e. freeze all convolutional InceptionV3 layers\nfor layer in base_model.layers:\n    layer.trainable = False","c5af4fb6":"opt = RMSprop(lr=3e-4)\nmodel.compile(optimizer=opt,\n              loss='categorical_crossentropy',\n              metrics=['accuracy']\n             )","a2ca1a3a":"epochs = 5\nmodel.fit_generator(datagen.flow(X_train, y_train_categ, batch_size=32),\n                    steps_per_epoch=len(X_train) \/ 32, \n                    epochs=epochs)","02d795ca":"# we chose to train the top 2 inception blocks, i.e. we will freeze\n# the first 249 layers and unfreeze the rest:\nfor layer in model.layers[:249]:\n    layer.trainable = False\nfor layer in model.layers[249:]:\n    layer.trainable = True","c93b409b":"# we need to recompile the model for these modifications to take effect\n# we use SGD with a low learning rate\nmodel.compile(optimizer=SGD(lr=0.0001, momentum=0.9), \n              loss='categorical_crossentropy',\n              metrics=['accuracy']\n             )","32ab5f87":"# we train our model again (this time fine-tuning the top 2 inception blocks\n# alongside the top Dense layers\nepochs = 10\nmodel.fit_generator(datagen.flow(X_train, y_train_categ, batch_size=32),\n                    steps_per_epoch=len(X_train) \/ 32, \n                    epochs=epochs)","0886a66d":"model_name = \"CNN_InceptionV3\"\npostfix = \"12\"","ff9770eb":"# save out\nfrom datetime import datetime\ny_pred_categ = model.predict(X_test)\ny_pred = np.argmax(y_pred_categ, 1)\ndf_op = pd.DataFrame({'id':ids_test, 'class': y_pred})\nt_str = datetime.strftime(datetime.now(), \"%Y%m%d%H%M%S\")\npth = f'{model_name}_submission_{postfix}_{t_str}.csv'\ndf_op.to_csv(pth, index=False) # real test score: 0.93\nprint(f'save scv: {pth}') \n# save out\npth = f'{model_name}_model_{postfix}_{t_str}.h5'\nmodel.save_weights(pth)\nprint(f'save model: {pth}')","2997b5f3":"# Load Data","a0aec99c":"# Data Augmentation","534fb840":"# Train","0182064d":"# Build Model"}}