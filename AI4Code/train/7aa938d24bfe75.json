{"cell_type":{"71ac9655":"code","cc882a88":"code","9f1fc0c6":"code","a1f720ed":"code","23ecf903":"code","8de8d48a":"code","8b4d3a5f":"code","748bb862":"code","f3767da9":"code","4a91b042":"code","006f289a":"code","447ad127":"code","7c75da27":"code","b6d73676":"code","773fe1f3":"markdown","9857c75e":"markdown","4312230d":"markdown","8b3ad11b":"markdown","e3a971bc":"markdown","4c1c6d55":"markdown"},"source":{"71ac9655":"import pandas as pd\nimport numpy as np\nimport time","cc882a88":"# \u0432\u0432\u043e\u0434\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u044b\nmatrix_a = [\n    [1, 2, 3], \n    [4, 5, 6]\n]\nmatrix_b = [\n    [7, 10, 13, -1], \n    [8, 11, 14, -2], \n    [9, 12, 15, -3]\n]\n\nmatrix_c = [\n    [1, 2],\n    [4, 5]\n]\nmatrix_d = [\n    [7, 10, 13, -1],\n    [8, 11, 14, -2]\n]\n\n# \u043a\u043e\u043b-\u0432\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432\nexp_num = 10001","9f1fc0c6":"def standart_matrix_multiply(A, B):\n    if len(A[0]) != len(B):\n      print(\"\u041e\u0448\u0438\u0431\u043a\u0430! \u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u043c\u0430\u0442\u0440\u0438\u0446\u044b, \u0442.\u043a. \u043e\u043d\u0438 \u043d\u0435 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b.\")\n      return\n    \n    rows_A = len(A)\n    cols_A = len(A[0])\n    rows_B = len(B)\n    cols_B = len(B[0])\n    \n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 C[rows_A x cols_B] (C[MxQ])\n    C = [[0 for row in range(cols_B)] for col in range(rows_A)]\n\n    for i in range(rows_A):\n        for j in range(cols_B):\n            for k in range(cols_A):\n                C[i][j] = C[i][j] + A[i][k] * B[k][j]\n                \n    return C","a1f720ed":"print('\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c, \u043c\u0430\u0442\u0440\u0438\u0446\u044b A, B')\nstart = time.process_time()\nfor i in range(exp_num - 1):\n    standart_matrix_multiply(matrix_a, matrix_b)\nelapsed = (time.process_time() - start)\nprint(f'\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f {exp_num} \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432: {elapsed} \u0441\u0435\u043a')\nprint(f'\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430: {elapsed \/ exp_num} \u0441\u0435\u043a')\nprint(f\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f: \\n{np.matrix(standart_matrix_multiply(matrix_a, matrix_b))}\")","23ecf903":"print('\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c, \u043c\u0430\u0442\u0440\u0438\u0446\u044b C, D')\nstart = time.process_time()\nfor i in range(exp_num - 1):\n    standart_matrix_multiply(matrix_c, matrix_d)\nelapsed = (time.process_time() - start)\nprint(f'\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f {exp_num} \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432: {elapsed} \u0441\u0435\u043a')\nprint(f'\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430: {elapsed \/ exp_num} \u0441\u0435\u043a')\nprint(f\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f: \\n{np.matrix(standart_matrix_multiply(matrix_c, matrix_d))}\")","8de8d48a":"#  A[M * N] * B [N * Q]\ndef vinograd_matrix_multiply(A, B):\n    if len(A[0]) != len(B):\n      print(\"\u041e\u0448\u0438\u0431\u043a\u0430! \u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u043c\u0430\u0442\u0440\u0438\u0446\u044b, \u0442.\u043a. \u043e\u043d\u0438 \u043d\u0435 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b.\")\n      return\n    \n    rows_A = len(A)     # a  M\n    cols_A = len(A[0])  # b  N\n    rows_B = len(B)     # b  N\n    cols_B = len(B[0])  # c  Q\n    \n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 C[rows_A x cols_B] (C[MxQ])\n    C = [[0 for row in range(cols_B)] for col in range(rows_A)]\n\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 row_factors \u0434\u043b\u044f A\n    row_factor_A = [0 for col in range(rows_A)]\n    for i in range(rows_A):\n        for j in range(cols_A \/\/ 2):\n            row_factor_A[i] = row_factor_A[i] + A[i][j * 2] * A[i][j * 2 + 1]\n    \n    # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 column_factors \u0434\u043b\u044f B\n    col_factor_B = [0 for row in range(cols_B)]\n    for i in range(cols_B):\n        for j in range(cols_A \/\/ 2):\n            col_factor_B[i] = col_factor_B[i] + B[j * 2][i] * B[j * 2 + 1][i]\n    \n    # \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b C\n    for i in range(rows_A):\n        for j in range(cols_B):\n            C[i][j] = -row_factor_A[i] - col_factor_B[j]\n            for k in range(cols_A \/\/ 2):\n                C[i][j] = C[i][j] + (A[i][2 * k] + B[2 * k + 1][j]) * (A[i][2 * k + 1] + B[2 * k][j])\n    \n    # \u043f\u0440\u0438\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0447\u043b\u0435\u043d\u043e\u0432 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u0447\u0435\u0442\u043d\u043e\u0439 \u043e\u0431\u0449\u0435\u0439 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438\n    if cols_A % 2 == 1:\n        for i in range(rows_A):\n            for j in range(cols_B):\n                C[i][j] = C[i][j] + A[i][cols_A - 1] * B[cols_A - 1][j]\n                \n                \n    return C","8b4d3a5f":"print('\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0412\u0438\u043d\u043e\u0433\u0440\u0430\u0434\u0430 \u0431\u0430\u0437\u043e\u0432\u044b\u0439, \u043c\u0430\u0442\u0440\u0438\u0446\u044b A, B')\nstart = time.process_time()\nfor i in range(exp_num - 1):\n    vinograd_matrix_multiply(matrix_a, matrix_b)\nelapsed = (time.process_time() - start)\nprint(f'\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f {exp_num} \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432: {elapsed} \u0441\u0435\u043a')\nprint(f'\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430: {elapsed \/ exp_num} \u0441\u0435\u043a')\nprint(f\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f: \\n{np.matrix(vinograd_matrix_multiply(matrix_a, matrix_b))}\")","748bb862":"print('\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0412\u0438\u043d\u043e\u0433\u0440\u0430\u0434\u0430 \u0431\u0430\u0437\u043e\u0432\u044b\u0439, \u043c\u0430\u0442\u0440\u0438\u0446\u044b C, D')\nstart = time.process_time()\nfor i in range(exp_num - 1):\n    vinograd_matrix_multiply(matrix_c, matrix_d)\nelapsed = (time.process_time() - start)\nprint(f'\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f {exp_num} \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432: {elapsed} \u0441\u0435\u043a')\nprint(f'\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430: {elapsed \/ exp_num} \u0441\u0435\u043a')\nprint(f\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f: \\n{np.matrix(vinograd_matrix_multiply(matrix_c, matrix_d))}\")","f3767da9":"# k * 2 ~ k << 1\ndef optimized_vinograd_matrix_multiply(A, B):\n    if len(A[0]) != len(B):\n        print(\"\u041e\u0448\u0438\u0431\u043a\u0430! \u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u043c\u0430\u0442\u0440\u0438\u0446\u044b, \u0442.\u043a. \u043e\u043d\u0438 \u043d\u0435 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b.\")\n        return\n    \n    rows_A = len(A)     # a  M\n    cols_A = len(A[0])  # b  N\n    rows_B = len(B)     # b  N\n    cols_B = len(B[0])  # c  Q\n    \n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 C[rows_A x cols_B] (C[MxQ])\n    C = [[0 for row in range(cols_B)] for col in range(rows_A)]\n\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 row_factors \u0434\u043b\u044f A\n    row_factor_A = [0 for col in range(rows_A)]\n    for i in range(rows_A):\n        for j in range(1, cols_A, 2):\n            row_factor_A[i] -= A[i][j - 1] * A[i][j]\n            \n    # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 column_factors \u0434\u043b\u044f B\n    col_factor_B = [0 for row in range(cols_B)]\n    for i in range(cols_B):\n        for j in range(1, cols_A, 2):\n            col_factor_B[i] -= B[j - 1][i] * B[j][i]\n            \n    # \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b C\n    for i in range(rows_A):\n        for j in range(cols_B):\n            buf = row_factor_A[i] + col_factor_B[j]\n            for k in range(1, cols_A, 2):\n                buf += (A[i][k - 1] + B[k][j]) * (A[i][k] + B[k - 1][j])\n            C[i][j] = buf\n                \n    # \u043f\u0440\u0438\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0447\u043b\u0435\u043d\u043e\u0432 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u0447\u0435\u0442\u043d\u043e\u0439 \u043e\u0431\u0449\u0435\u0439 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438\n    if cols_A % 2 == 1:\n        for i in range(rows_A):\n            for j in range(cols_B):\n                C[i][j] += A[i][cols_A - 1] * B[cols_A - 1][j]\n\n\n    return C","4a91b042":"print('\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0412\u0438\u043d\u043e\u0433\u0440\u0430\u0434\u0430 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439, \u043c\u0430\u0442\u0440\u0438\u0446\u044b A, B')\nstart = time.process_time()\nfor i in range(exp_num - 1):\n    optimized_vinograd_matrix_multiply(matrix_a, matrix_b)\nelapsed = (time.process_time() - start)\nprint(f'\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f {exp_num} \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432: {elapsed} \u0441\u0435\u043a')\nprint(f'\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430: {elapsed \/ exp_num} \u0441\u0435\u043a')\nprint(f\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f: \\n{np.matrix(optimized_vinograd_matrix_multiply(matrix_a, matrix_b))}\")","006f289a":"print('\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0412\u0438\u043d\u043e\u0433\u0440\u0430\u0434\u0430 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439, \u043c\u0430\u0442\u0440\u0438\u0446\u044b C, D')\nstart = time.process_time()\nfor i in range(exp_num - 1):\n    optimized_vinograd_matrix_multiply(matrix_c, matrix_d)\nelapsed = (time.process_time() - start)\nprint(f'\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f {exp_num} \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432: {elapsed} \u0441\u0435\u043a')\nprint(f'\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430: {elapsed \/ exp_num} \u0441\u0435\u043a')\nprint(f\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f: \\n{np.matrix(optimized_vinograd_matrix_multiply(matrix_c, matrix_d))}\")","447ad127":"ma = np.matrix(matrix_a)\nmb = np.matrix(matrix_b)\nmc = np.matrix(matrix_c)\nmd = np.matrix(matrix_d)\n\ndisplay(ma, mb, mc, md)","7c75da27":"print('\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 NumPy, \u043c\u0430\u0442\u0440\u0438\u0446\u044b A, B')\nstart = time.process_time()\nfor i in range(exp_num - 1):\n    ma * mb\nelapsed = (time.process_time() - start)\nprint(f'\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f {exp_num} \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432: {elapsed} \u0441\u0435\u043a')\nprint(f'\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430: {elapsed \/ exp_num} \u0441\u0435\u043a')\nprint(f\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f: \\n{ma * mb}\")","b6d73676":"print('\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 NumPy, \u043c\u0430\u0442\u0440\u0438\u0446\u044b C, D')\nstart = time.process_time()\nfor i in range(exp_num - 1):\n    mc * md\nelapsed = (time.process_time() - start)\nprint(f'\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f {exp_num} \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432: {elapsed} \u0441\u0435\u043a')\nprint(f'\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430: {elapsed \/ exp_num} \u0441\u0435\u043a')\nprint(f\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f: \\n{mc * md}\")","773fe1f3":"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f \u043c\u0430\u0442\u0440\u0438\u0446\n\n1. \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439\n1. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0412\u0438\u043d\u043e\u0433\u0440\u0430\u0434\u0430 \u0431\u0430\u0437\u043e\u0432\u044b\u0439\n1. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0412\u0438\u043d\u043e\u0433\u0440\u0430\u0434\u0430 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439","9857c75e":"# \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0412\u0438\u043d\u043e\u0433\u0440\u0430\u0434\u0430 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439","4312230d":"# \u0422\u0438\u043f\u044b \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445. \u041b\u04202","8b3ad11b":"# \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f \u043c\u0430\u0442\u0440\u0438\u0446","e3a971bc":"# \u0423\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0440\u0438\u0446 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 [NumPy](https:\/\/numpy.org\/)","4c1c6d55":"# \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0412\u0438\u043d\u043e\u0433\u0440\u0430\u0434\u0430 \u0431\u0430\u0437\u043e\u0432\u044b\u0439"}}