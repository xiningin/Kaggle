{"cell_type":{"84d42a68":"code","2d0f1a13":"code","babe97da":"code","681f7e89":"code","ebd5621a":"code","e4a3a08c":"code","0ff5a94e":"code","005244aa":"code","0dad44d3":"code","27ab789a":"code","1264c58f":"code","fae62f1c":"code","7804aa69":"code","e537c17a":"code","035f72cf":"code","088a7d0d":"code","3790609a":"code","6df23a39":"code","68e9a119":"code","37573347":"code","1dea6efa":"code","7b5169dd":"code","f3913863":"code","ca55e207":"code","5bb6b808":"code","109dc999":"code","1e5d6f31":"code","44646ad6":"code","ecb26665":"code","afa2c63a":"code","9c184eee":"code","b38ef35b":"code","11aa8248":"code","080e1970":"code","ef98e5b2":"code","306d25c7":"code","83ba38e2":"code","f0535109":"code","a2bd7f02":"code","9e5fccc5":"code","5eaae016":"code","e3f7251e":"code","b9395861":"code","af8e36ec":"code","0f9bdec2":"code","562dd2d1":"code","3fab8ec0":"code","90b39028":"code","c8a261c2":"code","cd1bbf4a":"code","f9325ae7":"code","03f5b16d":"code","47a2d6a2":"code","fb604d76":"code","1ed64f69":"code","cf148d6d":"code","995b624e":"code","69405ad3":"code","07f98817":"code","612e11d7":"code","e43c9673":"code","922e7b32":"code","b1610b86":"code","c8b142ba":"code","c342813c":"code","a0c3959d":"code","6b932140":"code","203928a3":"code","9ad6c52a":"code","d7b1de1a":"code","47fe975a":"code","c3a86f30":"code","9a24b605":"code","c10cc8cb":"code","f3c0dcaa":"code","5f4c8559":"code","e1b387f0":"markdown","49a03134":"markdown","3c78c3c3":"markdown","17983611":"markdown","e764d743":"markdown","82b78e50":"markdown","175ce4b5":"markdown","bccd362c":"markdown"},"source":{"84d42a68":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\n%matplotlib inline","2d0f1a13":"import os\nprint(os.listdir(\"..\/input\/bank-customer-churn-modeling\"))","babe97da":"data = pd.read_csv('..\/input\/bank-customer-churn-modeling\/Churn_Modelling.csv')","681f7e89":"data.info()","ebd5621a":"data.head(15)","e4a3a08c":"data.duplicated().sum()","0ff5a94e":"print(data.Gender.value_counts())\nprint(data.Gender.value_counts(normalize=True))\nsns.catplot(kind='count', data=data, x='Gender', height=6, aspect=1.3, hue=\"Exited\");","005244aa":"plt.figure(figsize=(18, 8))\nsns.countplot(x=data.Age, data=data);","0dad44d3":"plt.figure(figsize=(14, 8))\nsns.countplot(x='Tenure', data=data);","27ab789a":"plt.figure(figsize=(15, 8))\nsns.distplot(data.Balance);","1264c58f":"plt.figure(figsize=(15, 8))\nsns.boxplot(x='Exited', y='Balance', data=data);","fae62f1c":"data[data['Exited'] == 0]['Balance'].describe()","7804aa69":"data[data['Exited'] == 1]['Balance'].describe()","e537c17a":"print(data.NumOfProducts.value_counts())\nprint(data.NumOfProducts.value_counts(normalize=True))\nsns.catplot(kind='count', data=data, x='NumOfProducts', hue=\"Exited\", height=6, aspect=1.3);","035f72cf":"print(data.HasCrCard.value_counts())\nprint(data.HasCrCard.value_counts(normalize=True))\nsns.catplot(kind='count', data=data, x='HasCrCard', height=6, aspect=1.3, hue=\"Exited\");","088a7d0d":"print(data.IsActiveMember.value_counts())\nprint(data.IsActiveMember.value_counts(normalize=True))\nsns.catplot(kind='count', data=data, x='IsActiveMember', height=6, aspect=1.3, hue=\"Exited\");","3790609a":"data.EstimatedSalary.describe()","6df23a39":"sns.catplot(x='Exited', y='EstimatedSalary', data=data, height=6, aspect=2);","68e9a119":"plt.figure(figsize=(18, 8))\nsns.boxplot(x='EstimatedSalary', data=data);","37573347":"data[data['EstimatedSalary'] < 50000]['EstimatedSalary'].describe()","1dea6efa":"data[data['EstimatedSalary'] < 2000]['EstimatedSalary'].describe()","7b5169dd":"print(data.Exited.value_counts())\nprint(data.Exited.value_counts(normalize=True))\nsns.catplot(kind='count', data=data, x='Exited', height=6, aspect=1.3);","f3913863":"target = data['Exited']\ndata.drop(['RowNumber', 'CustomerId', 'Surname', 'Exited'], axis=1, inplace=True)","ca55e207":"l = list(data.columns)\n\nl.remove('Geography')\nl.remove('Gender')\nl.remove('NumOfProducts')\nl.remove('HasCrCard')\nl.remove('IsActiveMember')\nnumeric = l","5bb6b808":"numeric","109dc999":"data[numeric].head()","1e5d6f31":"data = pd.get_dummies(data, drop_first=True)","44646ad6":"data.head()","ecb26665":"from sklearn.preprocessing import StandardScaler","afa2c63a":"scaler = StandardScaler()\nscaler.fit(data[numeric])\ndata[numeric] = scaler.transform(data[numeric])","9c184eee":"data.head()","b38ef35b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import f1_score\nfrom sklearn.model_selection import train_test_split","11aa8248":"data, features_test, target, target_test = train_test_split(data, target, test_size=0.2, random_state=42)","080e1970":"features_train, features_valid, target_train, target_valid = train_test_split(data, target, test_size=0.25, random_state=42)","ef98e5b2":"features_train.shape","306d25c7":"features_valid.shape","83ba38e2":"model = LogisticRegression(solver='liblinear', random_state=42)\nmodel.fit(features_train, target_train)\nprediction = model.predict(features_valid)","f0535109":"f1_score(target_valid, prediction)","a2bd7f02":"from sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve","9e5fccc5":"proba = model.predict_proba(features_valid)\nproba = proba[:, 1]\nproba\nauc_roc = roc_auc_score(target_valid, proba)\nprint(auc_roc)","5eaae016":"fpr, tpr, thresholds = roc_curve(target_valid, proba)\n\nplt.figure(figsize=(12, 12))\nplt.plot([0, 1], [0, 1])\nplt.plot(fpr, tpr, linestyle='--')\n\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC-\u043a\u0440\u0438\u0432\u0430\u044f')\n\nplt.show()","e3f7251e":"from sklearn.ensemble import GradientBoostingClassifier","b9395861":"for i in range(1, 502, 50):\n    model = GradientBoostingClassifier(n_estimators=i, random_state=42)\n    model.fit(features_train, target_train)\n    print(i, model.score(features_valid, target_valid))","af8e36ec":"%%time\nmodel_gbc = GradientBoostingClassifier(n_estimators=200, random_state=42)\nmodel_gbc.fit(features_train, target_train)\nprint(model_gbc.score(features_train, target_train))\nprint(model_gbc.score(features_valid, target_valid))","0f9bdec2":"prediction = model_gbc.predict(features_valid)\nprediction","562dd2d1":"f1_score(target_valid, prediction)","3fab8ec0":"proba_gbc = model_gbc.predict_proba(features_valid)\nproba_gbc = proba_gbc[:, 1]\nproba_gbc","90b39028":"auc_roc = roc_auc_score(target_valid, proba_gbc)\nprint(auc_roc)","c8a261c2":"fpr, tpr, thresholds = roc_curve(target_valid, proba_gbc)","cd1bbf4a":"plt.figure(figsize=(12, 12))\nplt.plot([0, 1], [0, 1])\nplt.plot(fpr, tpr, linestyle='--')\n\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC-\u043a\u0440\u0438\u0432\u0430\u044f')\n\nplt.show()","f9325ae7":"from sklearn.utils import shuffle","03f5b16d":"def upsample(features, target, repeat):\n    features_zeros = features[target == 0]\n    features_ones = features[target == 1]\n    target_zeros = target[target == 0]\n    target_ones = target[target == 1]\n\n    features_upsampled = pd.concat([features_zeros] + [features_ones] * repeat)\n    target_upsampled = pd.concat([target_zeros] + [target_ones] * repeat)\n    \n    features_upsampled, target_upsampled = shuffle(\n        features_upsampled, target_upsampled, random_state=42)\n    \n    return features_upsampled, target_upsampled","47a2d6a2":"features_upsampled, target_upsampled = upsample(features_train, target_train, 4)","fb604d76":"print(features_train[target_train == 0].shape)\nprint(features_train[target_train == 1].shape)","1ed64f69":"print(features_upsampled[target_upsampled == 0].shape)\nprint(features_upsampled[target_upsampled == 1].shape)","cf148d6d":"model_lr = LogisticRegression(solver='liblinear', random_state=42)\nmodel_lr.fit(features_upsampled, target_upsampled)\npredicted_valid = model_lr.predict(features_valid)\n\nprint(\"F1:\", f1_score(target_valid, predicted_valid))","995b624e":"proba = model_lr.predict_proba(features_valid)\nproba = proba[:, 1]\nproba\nauc_roc = roc_auc_score(target_valid, proba)\nprint(auc_roc)","69405ad3":"fpr, tpr, thresholds = roc_curve(target_valid, proba)\n\nplt.figure(figsize=(12, 12))\nplt.plot([0, 1], [0, 1])\nplt.plot(fpr, tpr, linestyle='--')\n\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC-\u043a\u0440\u0438\u0432\u0430\u044f')\n\nplt.show()","07f98817":"%%time\nmodel_gbc = GradientBoostingClassifier(n_estimators=300, random_state=42)\nmodel_gbc.fit(features_upsampled, target_upsampled)\nprint(model_gbc.score(features_upsampled, target_upsampled))\nprint(model_gbc.score(features_valid, target_valid))","612e11d7":"prediction = model_gbc.predict(features_valid)\nprediction","e43c9673":"f1_score(target_valid, prediction)","922e7b32":"proba_gbc = model_gbc.predict_proba(features_valid)\nproba_gbc = proba_gbc[:, 1]\nproba_gbc","b1610b86":"auc_roc = roc_auc_score(target_valid, proba_gbc)\nprint(auc_roc)","c8b142ba":"fpr, tpr, thresholds = roc_curve(target_valid, proba_gbc)\n\nplt.figure(figsize=(12, 12))\nplt.plot([0, 1], [0, 1])\nplt.plot(fpr, tpr, linestyle='--')\n\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC-\u043a\u0440\u0438\u0432\u0430\u044f')\n\nplt.show()","c342813c":"model_final = LogisticRegression(solver='liblinear', random_state=42)\nmodel_final.fit(features_upsampled, target_upsampled)\nprediction = model_final.predict(features_test)","a0c3959d":"f1_score(target_test, prediction)","6b932140":"proba_final = model_final.predict_proba(features_test)\nproba_final = proba_final[:, 1]\nproba_final\nauc_roc = roc_auc_score(target_test, proba_final)\nprint(auc_roc)","203928a3":"fpr, tpr, thresholds = roc_curve(target_test, proba_final)\n\nplt.figure(figsize=(12, 12))\nplt.plot([0, 1], [0, 1])\nplt.plot(fpr, tpr, linestyle='--')\n\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC-\u043a\u0440\u0438\u0432\u0430\u044f')\n\nplt.show()","9ad6c52a":"model_gbc_final = GradientBoostingClassifier(n_estimators=300, random_state=42)\nmodel_gbc_final.fit(features_upsampled, target_upsampled)\nprint(model_gbc_final.score(features_upsampled, target_upsampled))\nprint(model_gbc_final.score(features_valid, target_valid))\nprint(model_gbc_final.score(features_test, target_test))","d7b1de1a":"prediction = model_gbc_final.predict(features_test)\nprediction","47fe975a":"f1_score(target_test, prediction)","c3a86f30":"proba_gbc_final = model_gbc_final.predict_proba(features_test)\nproba_gbc_final = proba_gbc_final[:, 1]\nproba_gbc_final","9a24b605":"auc_roc = roc_auc_score(target_test, proba_gbc_final)\nprint(auc_roc)","c10cc8cb":"fpr, tpr, thresholds = roc_curve(target_test, proba_gbc_final)\n\nplt.figure(figsize=(12, 12))\nplt.plot([0, 1], [0, 1])\nplt.plot(fpr, tpr, linestyle='--')\n\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC-\u043a\u0440\u0438\u0432\u0430\u044f')\n\nplt.show()","f3c0dcaa":"for alpha in np.linspace(0.1, 1.0, 10):\n    print(alpha)\n    kombo=alpha*proba_final+(1-alpha)*proba_gbc_final\n    auc_roc = roc_auc_score(target_test, kombo)\n    print(auc_roc)\n    kombo_final = np.rint(kombo)\n    print(f1_score(target_test, kombo_final))\n    print()","5f4c8559":"kombo=0.3*proba_final+(1-0.3)*proba_gbc_final\n\nfpr, tpr, thresholds = roc_curve(target_test, kombo)\n\nplt.figure(figsize=(12, 12))\nplt.plot([0, 1], [0, 1])\nplt.plot(fpr, tpr, linestyle='--')\n\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC-\u043a\u0440\u0438\u0432\u0430\u044f')\n\nplt.show()","e1b387f0":"# 1. EDA","49a03134":"## 3. Balancing - upsampling","3c78c3c3":"### Valid F1 score and ROC AUC better for GBClassifier than LogisticRegression[](http:\/\/)","17983611":"### EDA conslusion:\n\n- strange salary range - 11.58 - 199 992.48.\n- NumOfProducts from 3 to 4 just Exited clients.\n- Exited - 20%, non-exited - 80%. Unbalance of classes.","e764d743":"**EDA for each feature**","82b78e50":"> # Customer churn","175ce4b5":"## 4. Final testing","bccd362c":"## 2. FE and checking models"}}