{"cell_type":{"d3bf137d":"code","51982491":"code","efbdd282":"code","f7d3d0fe":"code","50b158c1":"code","114b25c4":"code","a644a078":"code","a284f74f":"code","81bdfb9e":"code","9a308c09":"code","92075807":"code","b72bf31d":"code","611e4fda":"code","e53836c8":"code","4d24d1dd":"code","b0185f19":"code","9ed6df5c":"code","3b76a5c5":"code","f57aafd8":"code","ab3232b3":"code","c934ff89":"code","1884b2f4":"code","26215e86":"code","8a0b5616":"code","80dd54ad":"code","d262b60b":"code","9566c0bc":"code","226ee007":"code","0805e006":"code","7bb0b789":"code","c19ba752":"code","dad8843c":"code","5d49a072":"code","060b7358":"code","3df7f4a9":"code","1abd62be":"code","661c5842":"code","2c40b2f0":"code","7e0c26d7":"code","7f779b92":"code","cf66739e":"code","9ac57cf0":"code","6958f964":"code","e3271755":"code","375ac74a":"code","d48c46d4":"code","b7eb3114":"code","99119aac":"code","adfff5ae":"code","f31aa2e6":"code","ca724af3":"markdown","29ddc210":"markdown","c55f30d4":"markdown","40da6c76":"markdown"},"source":{"d3bf137d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom ml_metrics import rmse\nfrom sklearn.metrics import mean_squared_error\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","51982491":"train_df=pd.read_csv('\/kaggle\/input\/neolen-house-price-prediction\/train.csv')\ntest_df=pd.read_csv('\/kaggle\/input\/neolen-house-price-prediction\/test.csv')\ntrain_df.head()","efbdd282":"train_df.info()","f7d3d0fe":"train_df.describe()","50b158c1":"train_df.isnull().sum()","114b25c4":"#train_df.dropna(axis=1, thresh=200, inplace=True)\n#train_df.info()","a644a078":"train_df.SalePrice.hist(bins=50,figsize=(12,4))\nplt.title('houses prices')\nplt.show()","a284f74f":"plt.scatter(train_df['LotArea'],train_df['SalePrice'])\nplt.show()","81bdfb9e":"sns.boxplot(x=train_df['LotArea']) ##there is outliers so we use median to fill nans\n","9a308c09":"train_df.YearBuilt.hist(bins=14, rwidth=.9, figsize=(12,4))\nplt.title('When were the houses built?')\nplt.show()","92075807":"#train_df.dropna(axis=0, subset=['SalePrice'], inplace=True)\n#y = train_df.SalePrice              \n#train_df.drop(['SalePrice'], axis=1, inplace=True)\n#y","b72bf31d":"numerical_columns = []\ncategorical_columns = []\nlow_cardinality_catrgorical_columns = []\nfor col in train_df.columns:\n    if train_df[col].dtype in ['int64', 'float64']:\n        numerical_columns.append(col)\n    elif train_df[col].dtype == \"object\":\n        categorical_columns.append(col)\n        if train_df[col].nunique() < 10:\n            low_cardinality_catrgorical_columns.append(col)","611e4fda":"train_df['Alley']","e53836c8":"train_df['Alley'].fillna('NoAlley', inplace=True)\ntest_df['Alley'].fillna('NoAlley', inplace=True)\nprint(train_df['Alley'].isnull().sum(), test_df['Alley'].isnull().sum())","4d24d1dd":"train_df['MasVnrType'].fillna('None', inplace=True)\ntest_df['MasVnrType'].fillna('None', inplace=True)\nprint(train_df['MasVnrType'].isnull().sum(), test_df['MasVnrType'].isnull().sum())","b0185f19":"train_df['MasVnrArea'].fillna(train_df['MasVnrArea'].median(), inplace=True)\ntest_df['MasVnrArea'].fillna(test_df['MasVnrArea'].median(), inplace=True)\nprint(train_df['MasVnrArea'].isnull().sum(), test_df['MasVnrArea'].isnull().sum())","9ed6df5c":"train_df['BsmtQual'].fillna('NoBas', inplace=True)\ntest_df['BsmtQual'].fillna('NoBas', inplace=True)\nprint(train_df['BsmtQual'].isnull().sum(), test_df['BsmtQual'].isnull().sum())","3b76a5c5":"train_df['BsmtCond'].fillna('NoBas', inplace=True)\ntest_df['BsmtCond'].fillna('NoBas', inplace=True)\nprint(train_df['BsmtCond'].isnull().sum(), test_df['BsmtCond'].isnull().sum())","f57aafd8":"train_df['BsmtExposure'].fillna('NoBas', inplace=True)\ntest_df['BsmtExposure'].fillna('NoBas', inplace=True)\nprint(train_df['BsmtExposure'].isnull().sum(), test_df['BsmtExposure'].isnull().sum())","ab3232b3":"train_df['BsmtFinType1'].fillna('NoBas', inplace=True)\ntest_df['BsmtFinType1'].fillna('NoBas', inplace=True)\nprint(train_df['BsmtFinType1'].isnull().sum(), test_df['BsmtFinType1'].isnull().sum())","c934ff89":"train_df['BsmtFinType2'].fillna('NoBas', inplace=True)\ntest_df['BsmtFinType2'].fillna('NoBas', inplace=True)\nprint(train_df['BsmtFinType2'].isnull().sum(), test_df['BsmtFinType2'].isnull().sum())","1884b2f4":"train_df['FireplaceQu'].fillna('NoFP', inplace=True)\ntest_df['FireplaceQu'].fillna('NoFP', inplace=True)\nprint(train_df['FireplaceQu'].isnull().sum(), test_df['FireplaceQu'].isnull().sum())","26215e86":"train_df['GarageType'].fillna('NoGarage', inplace=True)\ntest_df['GarageType'].fillna('NoGarage', inplace=True)\n\ntrain_df['GarageFinish'].fillna('NoGarage', inplace=True)\ntest_df['GarageFinish'].fillna('NoGarage', inplace=True)\n\ntrain_df['GarageQual'].fillna('NoGarage', inplace=True)\ntest_df['GarageQual'].fillna('NoGarage', inplace=True)\n\ntrain_df['GarageCond'].fillna('NoGarage', inplace=True)\ntest_df['GarageCond'].fillna('NoGarage', inplace=True)\n\ntrain_df['GarageYrBlt'].fillna(0, inplace=True)\ntest_df['GarageYrBlt'].fillna(0, inplace=True)","8a0b5616":"train_df['PoolQC'].fillna('NoPool', inplace=True)\ntest_df['PoolQC'].fillna('NoPool', inplace=True)\nprint(train_df['PoolQC'].isnull().sum(), test_df['PoolQC'].isnull().sum())","80dd54ad":"train_df['Fence'].fillna('NoFence', inplace=True)\ntest_df['Fence'].fillna('NoFence', inplace=True)\nprint(train_df['Fence'].isnull().sum(), test_df['Fence'].isnull().sum())","d262b60b":"train_df['LotFrontage'].fillna(train_df['LotFrontage'].median(), inplace=True)\ntest_df['LotFrontage'].fillna(test_df['LotFrontage'].median(), inplace=True)\nprint(train_df['LotFrontage'].isnull().sum(), test_df['LotFrontage'].isnull().sum())","9566c0bc":"df_train_clean = train_df.drop('MiscFeature', axis = 1)\ndf_test_clean = test_df.drop('MiscFeature', axis = 1)\n","226ee007":"df_train_clean.isnull().sum().sum()\ndf_train_clean.info()","0805e006":"df_train_clean.duplicated().sum()","7bb0b789":"df_test_clean.isnull().sum().sum()","c19ba752":"df_test_clean['Electrical'].fillna('SBrkr', inplace=True)","dad8843c":"df_test_clean['Electrical'].fillna('SBrkr', inplace=True)","5d49a072":"df_test_clean.isnull().sum().sum()","060b7358":"df_test_clean.duplicated().sum()","3df7f4a9":"df_train_clean.info()","1abd62be":"categorical_columns2 = ['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'SaleType', 'SaleCondition']\nfor cat in categorical_columns2:\n    df_train_clean[cat] = pd.factorize(df_train_clean[cat])[0].reshape(-1, 1)\n    df_test_clean[cat] = pd.factorize(df_test_clean[cat])[0].reshape(-1, 1)","661c5842":"df_train = df_train_clean.copy()\ndf_test = df_test_clean.copy()","2c40b2f0":"df_train.shape","7e0c26d7":"df_test.shape","7f779b92":"Y_train = df_train['SalePrice']\nX_train = df_train.drop('SalePrice', axis=1)","cf66739e":"X_train_0, X_valid_0, Y_train_0, Y_valid_0 = train_test_split(X_train, Y_train, train_size=0.8, test_size=0.2, random_state=0)","9ac57cf0":"LR_model_1 = LinearRegression()\nLR_model_1.fit(X_train_0, Y_train_0)","6958f964":"Y_pred_App1 = LR_model_1.predict(X_valid_0)","e3271755":"r_sq_1 = LR_model_1.score(X_valid_0, Y_valid_0)\nprint('Coefficient of Determination:', r_sq_1)","375ac74a":"print(\"RMSE (Appraoch 1):\")\nprint(np.sqrt(mean_squared_error(Y_pred_App1, Y_valid_0)))","d48c46d4":"Y_valid_log = pd.DataFrame(np.log(Y_valid_0))\nY_pred_log = pd.DataFrame(np.log(Y_pred_App1))\nY_log = pd.concat([Y_valid_log, Y_pred_log], axis=1)\nY_log.columns = ['Valid', 'Pred']\nY_log.dropna(inplace=True)","b7eb3114":"print(np.sqrt(mean_squared_error(Y_log.Pred, Y_log.Valid)))","99119aac":"df_test_intercept = df_test.copy()\ndf_test_intercept['intercept'] = 1\ndf_test_intercept.shape","adfff5ae":"X_valid_0.shape","f31aa2e6":"output = pd.DataFrame({'Id': X_valid_0.index,\n                       'SalePrice': Y_pred_App1})\noutput.to_csv('submission.csv', index=False)","ca724af3":"## Data overview","29ddc210":"# Data processing","c55f30d4":"## remove columns with many null values","40da6c76":"### **House prices range from 100k to 200k**"}}