{"cell_type":{"50c0d6b2":"code","e4e41b6f":"code","67edf36c":"code","b14390c1":"code","233e44f7":"code","a0ef8bb4":"code","51d9045e":"code","486df408":"code","42267ad3":"code","f8b6619e":"code","22f54f15":"code","585c2f54":"code","1c37f0ff":"code","6084895b":"code","b372255f":"code","cf5539cd":"code","97a9c937":"code","0bb93959":"code","3528c7a2":"code","dc5a5ce7":"code","1900deb9":"code","75a374c5":"code","e58affd6":"code","e49d8f80":"code","9c37550c":"code","5295639f":"code","463c6864":"code","93064b03":"code","45f3bb10":"code","d84ec71d":"code","065ffe12":"code","3690933d":"code","0e4d494a":"code","9cc4dd11":"code","97ebf0dc":"code","45ee5f7d":"code","547f1f83":"code","37dac427":"code","a5eaa854":"code","c885066b":"code","d94f9f9d":"code","9906a1f2":"code","fbd21774":"code","837493a4":"code","c64c3016":"code","7b29b5ae":"code","652099f4":"code","dc65a8ba":"code","59de81fa":"code","3feae3d2":"code","d600dbe6":"code","f6eb745f":"code","6982c318":"code","b6aa1bfa":"code","f1586787":"code","4a652594":"code","ff31ac03":"code","f64c67c4":"code","10f38f08":"code","b99b5b9b":"code","184474af":"code","199a8f92":"code","479a84e0":"code","dec14c95":"code","e07c7a4d":"code","2672a341":"code","6ba04c05":"code","897d55e5":"code","5c424c15":"code","1ccaa7b7":"code","67c7ce81":"code","8b807965":"code","52c8da0a":"code","6292546f":"code","90c755f2":"code","4708d106":"code","d5e03824":"code","bdcc5cd3":"code","abc0d71e":"code","b96e7ea7":"code","61171f00":"code","9f9c6ad2":"code","17469564":"code","411d5406":"code","30f9db1c":"code","cafd40b2":"code","f785dac9":"code","15415d51":"markdown","6681f685":"markdown","4577bbfc":"markdown","e3bd9390":"markdown","bc279bbd":"markdown","6a438c52":"markdown","d7d10f5a":"markdown","c8083ff3":"markdown","4dac3d37":"markdown","30addfd9":"markdown","07c3506f":"markdown","606d28eb":"markdown","fca80913":"markdown","6617df08":"markdown","668028c0":"markdown","4f71945a":"markdown","b3e97330":"markdown","4e8a01d2":"markdown","c8c319a4":"markdown","cc8998e5":"markdown","9bf0a5c1":"markdown","6ddef1db":"markdown","0da34eeb":"markdown","5110a815":"markdown","6769152c":"markdown","972649da":"markdown","fb417caa":"markdown","67a6f2df":"markdown","fa84f735":"markdown","5e35fcfe":"markdown","601b1780":"markdown","cc556f00":"markdown","0267f2e8":"markdown","8a8f8546":"markdown","b8e3954a":"markdown","60d20ee9":"markdown","1a3c2a72":"markdown","4887f634":"markdown","923dde64":"markdown","67fd3c82":"markdown","c1b80597":"markdown","95baadf6":"markdown","6445e002":"markdown","82e69062":"markdown","50aee381":"markdown","be26be82":"markdown","1fe46309":"markdown"},"source":{"50c0d6b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e4e41b6f":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_PassengerId = test_df[\"PassengerId\"]","67edf36c":"train_df.columns","b14390c1":"train_df.head()","233e44f7":"train_df.describe()","a0ef8bb4":"train_df.info()","51d9045e":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable, varValue))","486df408":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","42267ad3":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","f8b6619e":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distrubution with hist\".format(variable))\n    plt.show","22f54f15":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","585c2f54":"train_df[[\"Pclass\", \"Survived\"]]","1c37f0ff":"# Pclass vs Survived\ntrain_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","6084895b":"# Sex vs Survived\ntrain_df[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","b372255f":"# SibSp vs Survived\ntrain_df[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","cf5539cd":"# Parch vs Survived\ntrain_df[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","97a9c937":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","0bb93959":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","3528c7a2":"# drop outlier\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]), axis = 0).reset_index(drop = True)","dc5a5ce7":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis = 0).reset_index(drop = True)\n","1900deb9":"train_df.head()","75a374c5":"train_df.columns[train_df.isnull().any()]","e58affd6":"train_df.isnull().sum()","e49d8f80":"train_df[train_df[\"Embarked\"].isnull()]","9c37550c":"train_df.boxplot(column=\"Fare\", by = \"Embarked\")\nplt.show()","5295639f":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","463c6864":"train_df[train_df[\"Fare\"].isnull()]","93064b03":"np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"])","45f3bb10":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))\ntrain_df[train_df[\"Fare\"].isnull()]","d84ec71d":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")","065ffe12":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","3690933d":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","0e4d494a":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","9cc4dd11":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","97ebf0dc":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","45ee5f7d":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 2)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","547f1f83":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","37dac427":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","a5eaa854":"train_df[train_df[\"Age\"].isnull()]","c885066b":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","d94f9f9d":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = train_df, kind = \"box\")\nplt.show()","9906a1f2":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","fbd21774":"#train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]\n","837493a4":"sns.heatmap(train_df[[\"Age\", \"Sex\", \"SibSp\", \"Parch\", \"Pclass\"]].corr(), annot = True)","c64c3016":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\n\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","7b29b5ae":"train_df[train_df[\"Age\"].isnull()]","652099f4":"train_df[\"Name\"].head(10)","dc65a8ba":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","59de81fa":"train_df[\"Title\"].head(10)","3feae3d2":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","d600dbe6":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","f6eb745f":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","6982c318":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","b6aa1bfa":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","f1586787":"train_df.head()","4a652594":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","ff31ac03":"train_df.head()","f64c67c4":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","10f38f08":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","b99b5b9b":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","184474af":"train_df.head(10)","199a8f92":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","479a84e0":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","dec14c95":"train_df = pd.get_dummies(train_df, columns= [\"family_size\"])\ntrain_df.head()","e07c7a4d":"train_df[\"Embarked\"].head()","2672a341":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","6ba04c05":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","897d55e5":"train_df[\"Ticket\"].head(20)","5c424c15":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets\n    ","1ccaa7b7":"train_df[\"Ticket\"].head(10)","67c7ce81":"train_df.head()","8b807965":"train_df = pd.get_dummies(train_df, columns = [\"Ticket\"], prefix = \"T\")\ntrain_df.head()","52c8da0a":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","6292546f":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns = [\"Pclass\"])\ntrain_df.head()","90c755f2":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns = [\"Sex\"])\ntrain_df.head()\n                                               ","4708d106":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)\ntrain_df.columns","d5e03824":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","bdcc5cd3":"train_df_len","abc0d71e":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","b96e7ea7":"test.head()","61171f00":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test)) ","9f9c6ad2":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","17469564":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","411d5406":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","30f9db1c":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","cafd40b2":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","f785dac9":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","15415d51":"* Sex is not informative for age prediction, age distribution seems to be same.","6681f685":"<a id = \"17\"><\/a><br>\n## Pclass -- Survived -- Age","4577bbfc":"* pclass is important feature for model training.","e3bd9390":"<a id = \"29\"><\/a><br>\n# Modeling","bc279bbd":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","6a438c52":"<a id = \"28\"><\/a><br>\n## Drop Passenger ID and Cabin","d7d10f5a":"<a id = \"33\"><\/a><br>\n## Ensemble Modeling","c8083ff3":"<a id = \"18\"><\/a><br>\n## Embarked -- Sex -- Pclass -- Survived","4dac3d37":"<a id = \"30\"><\/a><br>\n## Train - Test Split","30addfd9":"<a id = \"24\"><\/a><br>\n## Embarked","07c3506f":"* SibSp and parch can be used for new feature extraction with th = 3\n* small families have more chance to survive.\n* There is a std in survival of passenger with march = 3","606d28eb":"<a id = \"25\"><\/a><br>\n## Ticket","fca80913":"<a id = \"13\"><\/a><br>\n## SibSp -- Survived","6617df08":"<a id = \"5\"><\/a><br>\n## Numerical Variable Analysis","668028c0":"<a id = \"12\"><\/a><br>\n## Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived\n","4f71945a":"* Having a lot of SibSp have less chance to survive.\n* if sibsp == 0 or 1 or 2, passenger has more chance to survive\n* we can consider a new feature describing these categories.","b3e97330":"# Introduction\nTitanic was one of the notorious shipwredcks. Unfortunately, RMS Titanic collided with an iceberg and sank in 1912. There was 1502 deaths out of 2224 passengers and crew.\n\n\n<font color = 'black'>\nContent:\n\n    \n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n    \n\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n    \n    \n6. [Visualization](#11)\n    \n    * [Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n    \n    \n7. [Feature Engineering](#21)\n    \n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n    \n    \n8. [Modeling](#29)\n    \n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction](#34) \n    ","4e8a01d2":"<a id = \"31\"><\/a><br>\n# Simple Logistis Regression","c8c319a4":"*This notebook is referencing dataiteam udemy course.","cc8998e5":"<a id = \"9\"><\/a><br>\n## Find Missing Value","9bf0a5c1":"Fare Feature seems to have correlation with survived feature (0.26).","6ddef1db":"<a id = \"10\"><\/a><br>\n## Fill Missing alue\n* Embarked 2 missing value\n* Fare has only 1","0da34eeb":"<a id = \"34\"><\/a><br>\n## Prediction","5110a815":"<a id = \"15\"><\/a><br>\n## Pclass -- Survived","6769152c":"<a id = \"22\"><\/a><br>\n## Name -- Title","972649da":"<a id = \"15\"><\/a><br>\n## Age -- Survived","fb417caa":"<a id = \"19\"><\/a><br>\n## Embarked -- Sex -- Fare -- Survived","67a6f2df":"<a id = \"20\"><\/a><br>\n## Fill Missing: Age Feature","fa84f735":"<a id = \"26\"><\/a><br>\n## Pclass","5e35fcfe":"* Female passengers have much better survival rate than males.\n* Males have better survival rate in pclass 3 in C.\n* Embarked and sex will be used in training.","601b1780":"<a id = \"2\"><\/a><br>\n# Variable Description\n\n1. PassengerId: unique id number to each passenger\n1. Survived: passenger survive(1) or died(0)\n1. Pclass: passenger class\n1. Name: name\n1. Sex: gender of passenger\n1. Age: age of passenger\n1. SibSp: number of siblings\/spouse\n1. Parch: number of parents\/children\n1. Ticket: ticket number\n1. Fare: amount of money spent on ticket\n1. Cabin: cabin category\n1. Embarked: port of where passenger embarked (C: Cherbourg, Q: Queenstown, S: Southampton)\n\n","cc556f00":"<a id = \"27\"><\/a><br>\n## Sex","0267f2e8":"<a id = \"8\"><\/a><br>\n# Missing Value\n\n* Find Missing Value\n* Fill Missing alue","8a8f8546":"<a id = \"11\"><\/a><br>\n# Visualization\n    ","b8e3954a":"<a id = \"21\"><\/a><br>\n# Feature Engineering","60d20ee9":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis\n * Categorical Variable Analysis: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp, Parch\n * Numerical Variable Analysis: PassengerId, Age, Fare","1a3c2a72":" Age is not correlated with sex but it is correlated with parch, sibsp and pclass.","4887f634":"<a id = \"14\"><\/a><br>\n## Parch -- Survived","923dde64":"* float64(2): Fare, Age\n* int64(5): PassengerId, Survived, Pclass, SibSp, Parch\n* object(5): Name, Sex, Ticket, Cabin, Embarked","67fd3c82":"<a id = \"7\"><\/a><br>\n# Outlier Detection","c1b80597":"<a id = \"4\"><\/a><br>\n## Categorical Variable Analysis","95baadf6":"* 1st class passengers are older than 2nd, and 2nd is older than 3rd class.","6445e002":"* age <= 10 has a high survival rate,\n* oldest passengers (80) survived,\n* large number of 20 years old did not survive,\n* most passengers are in 15-35 age range,\n* use age feature in training\n* use age distribution for missing value of age","82e69062":"<a id = \"1\"><\/a><br>\n# Load and Check Data","50aee381":"<a id = \"32\"><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation","be26be82":"* Passsengers who pay higher fare have better survival. Fare can be used as categorical for training.","1fe46309":"<a id = \"23\"><\/a><br>\n## Family Size"}}