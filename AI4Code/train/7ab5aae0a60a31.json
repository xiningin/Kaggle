{"cell_type":{"26d81950":"code","8fee1278":"code","a812ff8b":"code","54b3d5f0":"code","e09b9763":"code","b4a59e06":"code","7bba1ca9":"code","f5b9a232":"code","6b5a0498":"code","26fce946":"code","83126149":"code","efd93049":"code","3a141576":"code","d93f11db":"code","a52f288e":"code","b9083e2c":"code","9a0ff787":"code","dfadebda":"code","370ddab1":"code","da8dff46":"code","3a349c0f":"markdown","a8e5171d":"markdown","9c467f50":"markdown","d632e416":"markdown","4eff3f53":"markdown"},"source":{"26d81950":"import torch\nimport torchvision\nimport torch.nn as nn\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport torch.nn.functional as F\nfrom torchvision.datasets.utils import download_url\nfrom torch.utils.data import DataLoader, TensorDataset, random_split","8fee1278":"dataframe = pd.read_csv('..\/input\/bank-marketing-campaigns-dataset\/bank-additional-full.csv',sep=';')\ndataframe.head()","a812ff8b":"num_rows = dataframe.shape[0]\nprint('Number of instances:', num_rows)\nnum_cols = dataframe.shape[1]\nprint('Number of columns:', num_cols)","54b3d5f0":"input_cols = dataframe.columns.difference(['y'])\nprint('Input variables:', input_cols)\noutput_cols = ['y']\nprint('Output variable:', output_cols)\ncategorical_cols = dataframe.columns.difference(dataframe._get_numeric_data().columns)\nprint('Categorical variables:', categorical_cols)\n","e09b9763":"import seaborn as sns\n# Configuring styles\nsns.set_style(\"darkgrid\")\nplt.rcParams['font.size'] = 14\nplt.rcParams['figure.figsize'] = (9, 5)\nplt.rcParams['figure.facecolor'] = '#00000000'\n\nplt.title(\"Distribution of Subscriptions\")\nsns.countplot(x=\"y\", data=dataframe, palette=\"bwr\")\n","b4a59e06":"def dataframe_to_arrays(dataframe):\n    # Make a copy of the original dataframe\n    dataframe1 = dataframe.copy(deep=True)\n    # Convert non-numeric categorical columns to numbers\n    for col in categorical_cols:\n        dataframe1[col] = dataframe1[col].astype('category').cat.codes\n    # Extract input & outupts as numpy arrays\n    inputs_array = dataframe1[input_cols].to_numpy()\n    targets_array = dataframe1[output_cols].to_numpy()\n    return inputs_array, targets_array","7bba1ca9":"inputs_array, targets_array = dataframe_to_arrays(dataframe)\ninputs = torch.tensor(inputs_array, dtype= torch.float32)\ntargets = torch.tensor(targets_array, dtype= torch.long)\ntargets = targets.squeeze(dim=1)\ninputs,targets","f5b9a232":"dataset = TensorDataset(inputs, targets)    \n","6b5a0498":"val_percent = 0.2\nval_size = int(num_rows * val_percent)\ntrain_size = num_rows - val_size\n\ntrain_ds, val_ds = random_split(dataset, (train_size, val_size))","26fce946":"batch_size = 32\ntrain_loader = DataLoader(train_ds, batch_size, shuffle=True)\nval_loader = DataLoader(val_ds, batch_size,)\n","83126149":"class InsuranceModel(nn.Module):\n    def __init__(self, input_size, output_size):\n        super().__init__()\n        self.linear = nn.Linear(input_size, output_size)\n        \n    def forward(self, xb):\n        out = self.linear(xb)\n        return out\n    \n    def training_step(self, batch):\n        inputs, targets = batch \n        out = self(inputs)                       \n        loss = F.cross_entropy(out, targets)\n        return loss\n    \n    def validation_step(self, batch):\n        inputs, targets = batch\n        out = self(inputs)\n        loss = F.cross_entropy(out,targets)\n        acc = accuracy(out, targets)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc.detach()}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result, num_epochs):\n        # Print result every 20th epoch\n        if (epoch+1) % 20 == 0 or epoch == num_epochs-1:\n            print(\"Epoch [{}], val_loss: {:.4f}, val_acc: {:.4f}\".format(epoch+1, result['val_loss'], result['val_acc']))","efd93049":"input_size = len(input_cols)\noutput_size = 2\nmodel = InsuranceModel(input_size, output_size)\nmodel","3a141576":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\ndef evaluate(model, val_loader):\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.Adam):\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        result = evaluate(model, val_loader)\n        model.epoch_end(epoch, result, epochs)\n        history.append(result)\n    return history\n            ","d93f11db":"result = evaluate(model, val_loader) # Use the the evaluate function\nprint(result)","a52f288e":"epochs = 10\nlr = 0.01\nhistory1 = fit(epochs, lr, model, train_loader, val_loader)","b9083e2c":"epochs = 50\nlr = 0.001\nhistory1 = fit(epochs, lr, model, train_loader, val_loader)","9a0ff787":"epochs = 100\nlr = 0.01\nhistory1 = fit(epochs, lr, model, train_loader, val_loader)","dfadebda":"val_loss = evaluate(model, val_loader)\nval_loss","370ddab1":"def predict_single(input, target, model):\n    inputs = input.unsqueeze(0)\n    predictions = model(inputs)\n    prediction = predictions[0].detach()\n    print(\"Input:\", input)\n    print(\"Target:\", target)\n    print(\"Prediction:\", prediction)","da8dff46":"input, target = val_ds[1]\npredict_single(input, target, model)","3a349c0f":"# Step 1: Downloading & exploring the data","a8e5171d":"# #Step 2: Preparing the data for training\n","9c467f50":"## Step 3: Creating a model using PyTorch\n","d632e416":"## Step 5: Making predictions using the model\n","4eff3f53":"## Visualizing the data"}}