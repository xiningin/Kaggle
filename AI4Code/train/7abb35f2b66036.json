{"cell_type":{"a8952990":"code","f7a22ac7":"code","6dfb9720":"code","1442358a":"code","f4f56436":"code","ad59f8cb":"code","04fb3cb8":"code","e27a3dcc":"code","e1c4a2f4":"code","b572d7ad":"code","f9f24035":"code","364e816f":"code","0e047bfd":"code","adcd7d2c":"code","512417f8":"code","d9f3a665":"code","d3e58a3c":"code","ff1bf444":"code","f114c401":"code","feabf275":"code","422bee60":"code","e1512fad":"code","268fee2f":"code","6b9886da":"code","5ca14c89":"code","d903baec":"code","ff08e1dc":"code","91f3b418":"code","27c7f790":"code","382831dc":"code","56faad23":"code","c1376b62":"code","8137897e":"code","ec7a2b33":"markdown","edaae01d":"markdown","8736f111":"markdown","1128df2a":"markdown","4cb9a27b":"markdown","01efc860":"markdown","dbf6b272":"markdown","e6c528fb":"markdown","81c3680d":"markdown","3c72d726":"markdown","e9f84c86":"markdown","100a974f":"markdown","2028797c":"markdown","ac2e0604":"markdown","ddcc0707":"markdown","f226084c":"markdown","a928434a":"markdown","b0955ac0":"markdown","82f6b58b":"markdown","ce1766db":"markdown","5566bf8a":"markdown"},"source":{"a8952990":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f7a22ac7":"train_data = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","6dfb9720":"y = train_data['label']\nX = train_data.drop(['label'],axis=1)","1442358a":"del train_data","f4f56436":"X.isnull().all().unique()","ad59f8cb":"y.isnull().any()","04fb3cb8":"test_data.isnull().all().unique()","e27a3dcc":"label_val = y.value_counts()\nplt.figure(figsize=(12,6))\nsns.barplot(x=label_val.index,y=label_val.values)","e1c4a2f4":"X = X.values.reshape(-1,28,28,1)\ntest_data = test_data.values.reshape(-1,28,28,1)","b572d7ad":"plt.imshow(X[7][:,:,0])","f9f24035":"X = X \/ 255\ntest_data = test_data \/ 255","364e816f":"import warnings","0e047bfd":"warnings.filterwarnings('ignore')","adcd7d2c":"%%time\nfrom keras.models import Sequential","512417f8":"from keras.layers import Conv2D, Dense, Dropout, BatchNormalization, Flatten, MaxPool2D","d9f3a665":"from keras.utils.np_utils import to_categorical","d3e58a3c":"y = to_categorical(y,num_classes=10)","ff1bf444":"from keras.callbacks import ModelCheckpoint","f114c401":"checkpoint = ModelCheckpoint('BWeight.md5',monitor='val_loss',\n                            save_best_only=True)","feabf275":"model = Sequential()\n\nmodel.add(Conv2D(32,kernel_size=3,activation='relu',input_shape=(28,28,1)))\nmodel.add(Conv2D(32,kernel_size=3,activation='relu'))\nmodel.add(MaxPool2D())\nmodel.add(Conv2D(32,kernel_size=5,strides=2,padding='same',activation='relu'))\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(64,kernel_size=3,activation='relu'))\nmodel.add(Conv2D(64,kernel_size=3,activation='relu'))\nmodel.add(MaxPool2D())\nmodel.add(Conv2D(64,kernel_size=5,strides=2,padding='same',activation='relu'))\nmodel.add(Dropout(0.4))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(10, activation='softmax'))\n","422bee60":"model.compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","e1512fad":"from keras.preprocessing.image import ImageDataGenerator","268fee2f":"datagen = ImageDataGenerator(\n        featurewise_center=False,\n        samplewise_center=False,\n        featurewise_std_normalization=False,\n        samplewise_std_normalization=True,\n        zca_whitening=False,\n        zoom_range = 0.1,\n        width_shift_range=0.1,\n        height_shift_range=0.1,\n        horizontal_flip=False,\n        vertical_flip=False)\n","6b9886da":"datagen.fit(X)","5ca14c89":"size_batch = 86","d903baec":"from sklearn.model_selection import train_test_split","ff08e1dc":"X_train, X_val, y_train, y_val = train_test_split(\n...     X, y, test_size=0.1, random_state=42)","91f3b418":"history = model.fit_generator(datagen.flow(X_train,y_train, batch_size=size_batch),\n                              epochs = 10,\n                              validation_data = (X_val,y_val),\n                              verbose = 2,\n                              steps_per_epoch = X_train.shape[0] \/\/ size_batch,\n                              callbacks=[checkpoint])","27c7f790":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","382831dc":"model.load_weights('BWeight.md5')","56faad23":"FINAL_PREDS = model.predict_classes(test_data)","c1376b62":"results = pd.Series(FINAL_PREDS,name=\"Label\")","8137897e":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"mnist_cnn_keras.csv\",index=False)","ec7a2b33":"Therefore we dont have any null values in both our test and train data","edaae01d":"# Model building","8736f111":"Right now we have flat pixels but our image should be a 2d image with single channel ( since we have grayscale images)","1128df2a":"# Training","4cb9a27b":"Splitting the train data in train and validation splits","01efc860":"# Visualization","dbf6b272":"So lets reshape the arrays","e6c528fb":"Designing the model","81c3680d":"Loading data","3c72d726":"Checking for null values","e9f84c86":"Let's fit the model","100a974f":"lets add a checkpoint too , which can be used to save best weights","2028797c":"Plotting a single digit","ac2e0604":"# Data Preparation","ddcc0707":"Loading best weights","f226084c":"Distribution of labels is relatively similar","a928434a":"Compiling the model","b0955ac0":"Now we have the data to work with , so lets start building the model using Keras","82f6b58b":"# Predictions","ce1766db":"Lets plot the distributiom of labels","5566bf8a":"Now that we have our model ready , lets apply some data augmentation"}}