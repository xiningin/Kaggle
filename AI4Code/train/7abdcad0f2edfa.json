{"cell_type":{"713f0f7f":"code","775bb351":"code","97f01ba6":"code","f1293c84":"code","dfabfd5d":"code","4f4c1e86":"code","e85ae849":"code","7cb0cabe":"code","1f428f5f":"code","6788d031":"code","5c2299fd":"code","34bf4a60":"code","9cdd3c03":"code","9cb7632a":"code","518658c5":"code","cd8a086c":"code","5bbda6ab":"code","007163c6":"code","df7f4f9b":"code","3c22c661":"code","7dbd9fc2":"code","0429b4fa":"code","350d0b3a":"code","5f421fa0":"code","129215ab":"code","10d3a138":"code","5fc02eea":"code","e6656f23":"code","a2099aa9":"code","91115eb6":"code","99f3e785":"code","f1c5cb8c":"code","fc8aaee8":"code","f4617f4e":"code","d12d3111":"code","3f9acfb9":"code","89bd3978":"code","e90ed456":"code","18e47a0d":"code","489b6f7a":"code","a1c666b3":"code","a98c2697":"code","7ba09cac":"code","ce76fe09":"code","c2982ceb":"code","5c1af956":"code","e195fb0a":"markdown","a960a874":"markdown","6989eca3":"markdown","c45fc49f":"markdown","45b74362":"markdown","d61420a9":"markdown","514790ed":"markdown","45b4c7b8":"markdown","6208a1c5":"markdown"},"source":{"713f0f7f":"# Importing all required packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","775bb351":"estate = pd.DataFrame(pd.read_csv(\"..\/input\/real-estate-price\/real_estate_price_size_year_view.csv\"))","97f01ba6":"estate.head()","f1293c84":"estate.describe()","dfabfd5d":"import matplotlib.pyplot as plt\nimport seaborn as sns","4f4c1e86":"sns.pairplot(estate)\nplt.show()","e85ae849":"plt.figure(figsize=(20, 12))\nsns.regplot(x = 'size', y = 'price', data = estate)\nplt.show()","7cb0cabe":"\nplt.figure(figsize=(20, 12))\nplt.subplot(2,3,2)\nsns.boxplot(x = 'year', y = 'price', data = estate)\nplt.subplot(2,3,3)\nsns.boxplot(x = 'view', y = 'price', data = estate)\nplt.show()","1f428f5f":"estate['view']=estate['view'].map({'No sea view':1,'Sea view':0})","6788d031":"estate.head()","5c2299fd":"estate['year'].value_counts()","34bf4a60":"year = pd.get_dummies(estate['year'])","9cdd3c03":"year.head()","9cb7632a":"year = pd.get_dummies(estate['year'], drop_first = True)","518658c5":"estate = pd.concat([estate, year], axis = 1)","cd8a086c":"estate.head()","5bbda6ab":"estate.drop(['year'], axis = 1, inplace = True)","007163c6":"estate.head()","df7f4f9b":"from sklearn.model_selection import train_test_split\n\n# We specify this so that the train and test data set always have the same rows, respectively\nnp.random.seed(0)\ndf_train, df_test = train_test_split(estate, train_size = 0.7, test_size = 0.3, random_state = 100)","3c22c661":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()","7dbd9fc2":"num_vars = ['size','price']\n\ndf_train[num_vars] = scaler.fit_transform(df_train[num_vars])","0429b4fa":"df_train.head()","350d0b3a":"plt.figure(figsize=[10,10])\nsns.heatmap(df_train.corr(), annot = True, cmap=\"YlGnBu\")\nplt.show()","5f421fa0":"plt.figure(figsize=[10,10])\nsns.regplot(x = 'size', y = 'price', data = df_train)\nplt.show()","129215ab":"y_train = df_train.pop('price')\nX_train = df_train","10d3a138":"estate.columns","5fc02eea":"import statsmodels.api as sm\nX_train_lm = sm.add_constant(X_train)\n\nlr= sm.OLS(y_train, X_train_lm).fit()\n\nlr.params","e6656f23":"print(lr.summary())","a2099aa9":"from statsmodels.stats.outliers_influence import variance_inflation_factor","91115eb6":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","99f3e785":"X = X_train.drop(2009, 1,)","f1c5cb8c":"X_train_lm = sm.add_constant(X)\n\nlr_2 = sm.OLS(y_train, X_train_lm).fit()","fc8aaee8":"print(lr_2.summary())","f4617f4e":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","d12d3111":"y_train_price = lr_2.predict(X_train_lm)","3f9acfb9":"fig = plt.figure()\nsns.distplot((y_train - y_train_price), bins = 20)\nfig.suptitle('Error Terms', fontsize = 20)                  \nplt.xlabel('Errors', fontsize = 18)\nplt.show()","89bd3978":"num_vars = ['size','price']\n\ndf_test[num_vars] = scaler.transform(df_test[num_vars])","e90ed456":"df_test.head()","18e47a0d":"df_test.describe()","489b6f7a":"y_test = df_test.pop('price')\nX_test = df_test","a1c666b3":"X_test_m2 = sm.add_constant(X_test)","a98c2697":"y_pred_m2 = lr.predict(X_test_m2)","7ba09cac":"fig = plt.figure()\nsns.regplot(y_test, y_pred_m2)\nfig.suptitle('y_test vs y_pred', fontsize = 20)              # Plot heading \nplt.xlabel('y_test', fontsize = 18)                          # X-label\nplt.ylabel('y_pred', fontsize = 16)   \nplt.show()","ce76fe09":"from sklearn import metrics\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred_m2))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred_m2))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred_m2)))","c2982ceb":"df = pd.DataFrame({'Actual': y_test.values.flatten(), 'Predicted': y_pred_m2.values.flatten()})\ndf","5c1af956":"df1 = df.head(30)\ndf1.plot(kind='bar',figsize=(16,10))\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","e195fb0a":"## Load the data","a960a874":"## Create a dummy variable for 'view'","6989eca3":"You are given a real estate dataset. \n\nReal estate is one of those examples that every regression course goes through as it is extremely easy to understand and there is a (almost always) certain causal relationship to be found.\n\nThe data is located in the file: 'real_estate_price_size_year_view.csv'. \n\nWe are expected to create a multiple linear regression, using the new data. \n\nIn this exercise, the dependent variable is 'price', while the independent variables are 'size', 'year', and 'view'.\n","c45fc49f":"### Regression","45b74362":"### Declare the dependent and the independent variables","d61420a9":"## Import the relevant libraries","514790ed":"## Create the regression","45b4c7b8":"We can see that the equation of our best fitted line is:\n\nprice = 0.6869 * size + 0.1089 * year - 0.17213 * view  + 0.0698 * '2015' + 0.1009 * '2018' + 0.1685 \n","6208a1c5":"# Multiple Linear Regression with Dummies "}}