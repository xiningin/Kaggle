{"cell_type":{"a5db51cd":"code","3c8cd950":"code","9cc188fb":"code","726ea785":"code","aba9e178":"code","7cf67ccc":"code","b0573a4a":"code","595842e8":"code","8e016858":"code","0b4e6698":"code","9b77dc94":"code","788effc8":"code","382450cf":"code","c7565181":"code","cf74ad23":"code","6a0da93f":"code","6dba3378":"code","94985273":"code","f74dcdb2":"code","1fd8b64b":"code","99764080":"code","4a47e7af":"code","299958d4":"code","cf521855":"code","8d6fc4c5":"code","0fdb8bd0":"code","15e116d4":"code","74cf96e5":"code","b1757de7":"code","1945099c":"code","a6a93a90":"code","0bad53f1":"code","de388e00":"code","8e01b47f":"markdown","52296939":"markdown","34c80e1f":"markdown","2e9ac1e1":"markdown","3167668c":"markdown","ceb975e0":"markdown","3ee72524":"markdown","fe4a1e4b":"markdown","cbd9f784":"markdown","f709f641":"markdown","bf3b2848":"markdown","ce59765a":"markdown","0200630b":"markdown","aa312b41":"markdown","11e69821":"markdown","5a3a91fc":"markdown","df770f90":"markdown","087b0036":"markdown","36a9a179":"markdown","366c1b25":"markdown","60657f74":"markdown","26dd29de":"markdown","aac852b5":"markdown","76107df0":"markdown","d4c2ae0e":"markdown"},"source":{"a5db51cd":"\n#import libraries\nfrom __future__ import division\n\nfrom datetime import datetime, timedelta,date\nimport pandas as pd\n%matplotlib inline\nfrom sklearn.metrics import classification_report,confusion_matrix\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.cluster import KMeans\n\n\nimport plotly as py\nimport plotly.offline as pyoff\nimport plotly.graph_objs as go\n\nimport xgboost as xgb\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\n\nimport xgboost as xgb\n","3c8cd950":"#Read data\ntx_data = pd.read_csv('..\/input\/customer_segmentation\/customer_segmentation.csv', encoding='cp1252')","9cc188fb":"#initate plotly\npyoff.init_notebook_mode()\n\n#read data from csv and redo the data work we done before\ntx_data.head()","726ea785":"#converting the type of Invoice Date Field from string to datetime.\ntx_data['InvoiceDate'] = pd.to_datetime(tx_data['InvoiceDate'])","aba9e178":"#creating YearMonth field for the ease of reporting and visualization\ntx_data['InvoiceYearMonth'] = tx_data['InvoiceDate'].map(lambda date: 100*date.year + date.month)","7cf67ccc":"#calculate Revenue for each row and create a new dataframe with YearMonth - Revenue columns\ntx_data['Revenue'] = tx_data['UnitPrice'] * tx_data['Quantity']\ntx_revenue = tx_data.groupby(['InvoiceYearMonth'])['Revenue'].sum().reset_index()\ntx_revenue","b0573a4a":"#Visulaisation\nplot_data = [\n    go.Scatter(\n        x=tx_revenue['InvoiceYearMonth'],\n        y=tx_revenue['Revenue'],\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n        title='Montly Revenue',\n        xaxis_title=\"InvoiceYearMonth\",\n        yaxis_title=\"Revenue\",\n        \n)\n\n\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","595842e8":"#using pct_change() function to see monthly percentage change\ntx_revenue['MonthlyGrowth'] = tx_revenue['Revenue'].pct_change()\n\n#showing first 5 rows\ntx_revenue.head()","8e016858":"#visualization - line graph for monthly revenue growth\n\nplot_data = [\n    go.Scatter(\n        x=tx_revenue.query(\"InvoiceYearMonth < 201112\")['InvoiceYearMonth'], # since dec data is incomplete\n        y=tx_revenue.query(\"InvoiceYearMonth < 201112\")['MonthlyGrowth'],\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n        title='Montly Growth Rate'\n    )\n\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)\n","0b4e6698":"tx_data.describe()","9b77dc94":"tx_data['Country'].value_counts()","788effc8":"#creating a new dataframe with UK customers only\ntx_uk = tx_data.query(\"Country=='United Kingdom'\").reset_index(drop=True)\n\n#creating monthly active customers dataframe by counting unique Customer IDs\ntx_monthly_active = tx_uk.groupby('InvoiceYearMonth')['CustomerID'].nunique().reset_index()","382450cf":"print('tx_UK 2 Columns\\n',tx_uk.head(2),'\\n')\nprint('tx_monthly_Active 2 Columns\\n',tx_monthly_active.head(2),'\\n')","c7565181":"#plotting the number of unique customer IDs year and month wise\nplot_data = [\n    go.Bar(\n        x=tx_monthly_active['InvoiceYearMonth'],\n        y=tx_monthly_active['CustomerID'],\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n        xaxis_title = 'InvoiceYearMonth',\n    yaxis_title='Number of unique CustomerIDs year and month wise',\n        title='Monthly Active Customers'\n    )\n\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)\n","cf74ad23":"#create a new dataframe for no. of order by using quantity field\ntx_monthly_sales = tx_uk.groupby('InvoiceYearMonth')['Quantity'].sum().reset_index()\n\n#print the dataframe\ntx_monthly_sales","6a0da93f":"#plot\nplot_data = [\n    go.Bar(\n        x=tx_monthly_sales['InvoiceYearMonth'],\n        y=tx_monthly_sales['Quantity'],\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n            xaxis_title = 'InvoiceYearMonth',\n            yaxis_title='Quantity sold',\n            title='Monthly Total # of Order'\n    )\n\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","6dba3378":"# create a new dataframe for average revenue by taking the mean of it\ntx_monthly_order_avg = tx_uk.groupby('InvoiceYearMonth')['Revenue'].mean().reset_index()\n\n#print the dataframe\ntx_monthly_order_avg","94985273":"#plot the bar chart\nplot_data = [\n    go.Bar(\n        x=tx_monthly_order_avg['InvoiceYearMonth'],\n        y=tx_monthly_order_avg['Revenue'],\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n                xaxis_title = 'InvoiceYearMonth',\n            yaxis_title='Average Revenue',\n        title='Monthly Order Average'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)\n","f74dcdb2":"tx_min_purchase = tx_uk.groupby('CustomerID').InvoiceDate.min().reset_index()\ntx_min_purchase.columns = ['CustomerID','MinPurchaseDate']\ntx_min_purchase['MinPurchaseYearMonth'] = tx_min_purchase['MinPurchaseDate'].map(lambda date: 100*date.year + date.month)\n\n#merge first purchase date column to our main dataframe (tx_uk)\ntx_uk = pd.merge(tx_uk, tx_min_purchase, on='CustomerID')\n\ntx_uk.head()","1fd8b64b":"# create a column called User Type and assign New as default. Compare the person's invoice date with the minimum purchase \n# date for each row\n# For whichever row, invoice purchase date > min. purchase date, assign the person's user type to be existing in that row.\ntx_uk['UserType'] = 'New'\ntx_uk.loc[tx_uk['InvoiceYearMonth']>tx_uk['MinPurchaseYearMonth'],'UserType'] = 'Existing'","99764080":"#calculate the Revenue per month for each user type\ntx_user_type_revenue = tx_uk.groupby(['InvoiceYearMonth','UserType'])['Revenue'].sum().reset_index()","4a47e7af":"tx_user_type_revenue.head()","299958d4":"#filtering the dates and plot the result\ntx_user_type_revenue = tx_user_type_revenue.query('InvoiceYearMonth != 201012 and InvoiceYearMonth != 201112')\nplot_data = [\n    go.Scatter(\n        x=tx_user_type_revenue.query(\"UserType == 'Existing'\")['InvoiceYearMonth'],\n        y=tx_user_type_revenue.query(\"UserType == 'Existing'\")['Revenue'],\n        name = 'Existing'\n    ),\n    go.Scatter(\n        x=tx_user_type_revenue.query(\"UserType == 'New'\")['InvoiceYearMonth'],\n        y=tx_user_type_revenue.query(\"UserType == 'New'\")['Revenue'],\n        name = 'New'\n    )\n]\n\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n        title='New vs Existing',\n                    xaxis_title = 'InvoiceYearMonth',\n            yaxis_title='Revenue' \n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)\n","cf521855":"#create a dataframe that shows new user ratio - we also need to drop NA values (first month new user ratio is 0)\ntx_user_ratio = tx_uk.query(\"UserType == 'New'\").groupby(['InvoiceYearMonth'])['CustomerID'].nunique()\/tx_uk.query(\"UserType == 'Existing'\").groupby(['InvoiceYearMonth'])['CustomerID'].nunique() \ntx_user_ratio = tx_user_ratio.reset_index()\n\n#print the dafaframe\ntx_user_ratio","8d6fc4c5":"tx_user_ratio = tx_user_ratio.dropna()","0fdb8bd0":"#plot the result\nplot_data = [\n    go.Bar(\n        x=tx_user_ratio.query(\"InvoiceYearMonth>201101 and InvoiceYearMonth<201112\")['InvoiceYearMonth'],\n        y=tx_user_ratio.query(\"InvoiceYearMonth>201101 and InvoiceYearMonth<201112\")['CustomerID'],\n    )\n]\n#because first month is NAN value and december month has incomplete data\nplot_layout = go.Layout(\n        xaxis={\"type\": \"category\"},\n        title='New Customer Ratio'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","15e116d4":"#identify which users are active by looking at their revenue per month\ntx_user_purchase = tx_uk.groupby(['CustomerID','InvoiceYearMonth'])['Revenue'].sum().reset_index()\ntx_user_purchase.head()","74cf96e5":"#create retention matrix with crosstab\ntx_retention = pd.crosstab(tx_user_purchase['CustomerID'], tx_user_purchase['InvoiceYearMonth']).reset_index()\n\ntx_retention.head()","b1757de7":"#create an array of dictionary which keeps Retained & Total User count for each month\nmonths = tx_retention.columns[2:]\nmonths","1945099c":"# First we take the sum of all the unique IDs of customers in the selected month. If a person is not active in the selected month,\n# then his value will be zero for selected month. IF he is active then his value will be 1. This data is saved in TotalUserCount.\n# Then we take the RetainedUserCount. We will see the customers who are not only active in this month (since we dont want dead customers),\n# but also people who were active in previous month. And then we can take the sum of the people active in previous month and save it in Retained\n#User Count. Hence we will get the Retained User Count.\n\nretention_array = []\nfor i in range(len(months)-1):\n    retention_data = {}\n    selected_month = months[i+1]\n    prev_month = months[i]\n    retention_data['InvoiceYearMonth'] = int(selected_month)\n    retention_data['TotalUserCount'] = tx_retention[selected_month].sum()\n    retention_data['RetainedUserCount'] = tx_retention[(tx_retention[selected_month]>0) & (tx_retention[prev_month]>0)][prev_month].sum()\n    retention_array.append(retention_data)    ","a6a93a90":"retention_array","0bad53f1":"#convert the array to dataframe and calculate Retention Rate\ntx_retention = pd.DataFrame(retention_array)\ntx_retention['RetentionRate'] = tx_retention['RetainedUserCount']\/tx_retention['TotalUserCount']\ntx_retention.head()","de388e00":"#plot the retention rate graph\nplot_data = [go.Scatter(\n        x=tx_retention.query(\"InvoiceYearMonth<201112\")['InvoiceYearMonth'],\n        y=tx_retention.query(\"InvoiceYearMonth<201112\")['RetentionRate'],\n        name=\"organic\") ]\nplot_layout = go.Layout(xaxis={\"type\": \"category\"},\n        title='Monthly Retention Rate', xaxis_title = 'Invoice Year Month', yaxis_title = 'Retention Rate')\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","8e01b47f":"Everything looks good, we saw 36.5% growth previous month (December is excluded in the code since it hasn\u2019t been completed yet). But we need to identify what exactly happened on April. Was it due to less active customers or our customers did less orders? Maybe they just started to buy cheaper products? We can\u2019t say anything without doing a deep-dive analysis.\n","52296939":"<H3>5. Average Revenue per Order<\/H3> \n","34c80e1f":"<H2>KEY METRICES ABOUT MARKETING AND SALES <\/H2>","2e9ac1e1":"<h3>7. Monthly Retention Rate <\/h3>","3167668c":"Retention rate should be monitored very closely because it indicates how sticky is your service and how well your product fits the market. For making Monthly Retention Rate visualized, we need to calculate how many customers retained from previous month.\n\n**Monthly Retention Rate** = Retained Customers From Prev. Month\/Active Customers Total","ceb975e0":"First we should define what is a new customer. In our dataset, we can assume a new customer is whoever did his\/her first purchase in the time window we defined. We will do it monthly for this example.\n\nWe will be using .min() function to find our first purchase date for each customer and define new customers based on that. The code below will apply this function and show us the revenue breakdown for each group monthly.","3ee72524":"As we expected, Order Count is also declined in April (279k to 257k, -8%). We know that Active Customer Count directly affected Order Count decrease. At the end, we should definitely check our Average Revenue per Order as well.","fe4a1e4b":"To see the details Monthly Active Customers, we will follow the steps we exactly did for Monthly Revenue. Starting from this part, we will be focusing on UK data only (which has the most records). We can get the monthly active customers by counting unique CustomerIDs. The same analysis can be carried out for customers of other countries as well.","cbd9f784":"<H3> 6. New Customer Ratio <\/H3> \n","f709f641":"Even the monthly order average dropped for April (16.7 to 15.8). We observed slow-down in every metric affecting our Revenue","bf3b2848":"Retention table shows us which customers are active on each month (1 stands for active).\n","ce59765a":"Marketing and sales are very important drivers for any company. How do we as marketers understand how our product is doing? In this notebook we will tackle few key metrices that will help you guage the performance of your product.\n\n1. Monthly Revenue\n2. Monthly Revenue Growth Rate\n3. Monthly active customers\n4. Monthly active orders\n5. Average Revenue per Order\n6. New Customer Ratio\n7. Monthly Retention Rate","0200630b":"<h3> Feature Engineering <\/h3>","aa312b41":"<h3> 1. Monthly Revenue <\/h3>","11e69821":"New Customer Ratio has declined as expected (we assumed on Feb, all customers were New) and running around 20%.\n","5a3a91fc":"We have all the crucial information we need:\nCustomer ID\nUnit Price\nQuantity\nInvoice Date\nRevenue = Active Customer Count * Order Count * Average Revenue per Order\n","df770f90":"We have looked at our major metrics. Of course there are many more and it varies across industries. Let\u2019s continue investigating some other important metrics:\n\n* New Customer Ratio: a good indicator of if we are losing our existing customers or unable to attract new ones\n* Retention Rate: King of the metrics. Indicates how many customers we retain over specific time window. We will be showing examples for monthly retention rate and cohort based retention rate.","087b0036":"<h3> 3. Monthly Active Customers <\/h3>","36a9a179":"<h3> 4. Monthly Order Count <\/h3>","366c1b25":"Monthly Retention Rate significantly jumped from June to August and went back to previous levels afterwards.\n","60657f74":"<H3>2. Monthly Revenue Growth Rate<\/H3>","26dd29de":"Existing customers are showing a positive trend and tell us that our customer base is growing but new customers have a slight negative trend.","aac852b5":"<h2> Importing relevant packages and libraries <\/h2>","76107df0":"This clearly shows our revenue is growing especially Aug \u201811 onwards (and our data in December is incomplete). Absolute numbers are fine, let\u2019s figure out what is our Monthly Revenue Growth Rate:\n","d4c2ae0e":"In April, Monthly Active Customer number dropped to 817 from 923 (-11.5%).\n"}}