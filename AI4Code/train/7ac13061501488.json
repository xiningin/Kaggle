{"cell_type":{"a4c87adb":"code","feae2c2a":"code","f096e8e6":"code","18de6fab":"code","6b34e419":"code","a31a6a5b":"code","3e41039e":"code","41f930a9":"code","99e56c24":"code","1af7109a":"code","a4ad4740":"code","485943bb":"code","a9d123d3":"code","ed74cb06":"code","eb8f78ba":"code","6a8203c7":"code","d7ce7523":"code","aaecea01":"code","ee1078ee":"code","859c935a":"code","4a19bec3":"code","9e3fff22":"code","710c2ed0":"code","f5e2a5bb":"code","304b00be":"code","7bf8da4a":"code","07824af5":"code","539b6933":"code","af8a77be":"code","3f36b43a":"markdown","c33eaae3":"markdown","34338387":"markdown","5ac69e21":"markdown","037479fa":"markdown","ae95bbdd":"markdown","858c53c2":"markdown","703da54d":"markdown","1699bcc0":"markdown","43ae7cf2":"markdown","db281022":"markdown","4e9033cb":"markdown","cf951be6":"markdown"},"source":{"a4c87adb":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","feae2c2a":"import lightgbm as lgb\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.metrics import accuracy_score\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\nimport seaborn as sns \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score","f096e8e6":"train = pd.read_csv(\"..\/input\/av-healthcare2\/train.csv\")\ntest =  pd.read_csv(\"..\/input\/av-healthcare2\/test.csv\")\nsample_sub =  pd.read_csv(\"..\/input\/av-healthcare2\/sample_submission.csv\")\ndesc =  pd.read_csv(\"..\/input\/av-healthcare2\/train_data_dict.csv\")\ntest_copy = test","18de6fab":"train.head(2).append(train.head(2))","6b34e419":"train['Bed Grade'] = train['Bed Grade'].fillna(method=\"ffill\",axis=0)\ntrain['City_Code_Patient'] = train['City_Code_Patient'].fillna(method=\"ffill\",axis=0)      #filling missing values with forward fill\n\ntest['Bed Grade'] = test['Bed Grade'].fillna(method=\"ffill\",axis=0)\ntest['City_Code_Patient'] = test['City_Code_Patient'].fillna(method=\"ffill\",axis=0)\n\ntrain['Bed Grade'] = train['Bed Grade'].astype(np.int64)                                  # Converting object to int type\ntest['City_Code_Patient'] = test['City_Code_Patient'].astype(np.int64)","a31a6a5b":"# Combining train and test data for preprocessing \n\ntrain['is_train'] = 1\ntest['is_train'] = 0\ntest['Stay'] = None\nprint(train.shape, test.shape)\n","3e41039e":"#!pip install category_encoders\n\nimport category_encoders as ce\n\ndf_data = pd.concat((train,test))\n\nencoder = ce.OrdinalEncoder(return_df = True)\ndf_data['Ward_Facility_Code'] = encoder.fit_transform(df_data['Ward_Facility_Code'])        # Using ordinal encoders to encode categorical variables \n  \nencoder = ce.OrdinalEncoder(return_df = True)\ndf_data['Type of Admission'] = encoder.fit_transform(df_data['Type of Admission'])\n\nencoder = ce.OrdinalEncoder(return_df = True)\ndf_data['Severity of Illness'] = encoder.fit_transform(df_data['Severity of Illness'])","41f930a9":"# Encoding age feature\n\nval = { '0-10':1, '11-20': 2,'21-30':3,'31-40':4,'41-50':5,'51-60':6,'61-70':7,'71-80':8,'81-90':9,'91-100':10   }\ndf_data['Age'] = df_data['Age'].map(val)\ndf_data['Age'].value_counts()","99e56c24":"# Creating age bins using Age feature\n\nval1 = { 1:'Young', 2: 'Young',3:'Adult',4:'Adult',5:'Adult',6:'Aged',7:'Aged',8:'Aged',9:'Aged',10:'Aged'   }\ndf_data['Age_group'] = df_data['Age'].map(val1)\n\ndf_data['Age_group'].value_counts()","1af7109a":"ob_col = df_data.select_dtypes(['object']).columns.tolist()   # Selecting object features for label encoding \n\nob_col.remove(\"Stay\")\nle = preprocessing.LabelEncoder() \n\nfor col in ob_col:\n    df_data[col] = le.fit_transform(df_data[col])\n\ndf_data.head(2)","a4ad4740":"\ncat=test_copy.select_dtypes(['object']).columns.tolist()\ncat.append('Age_group')\ncat","485943bb":"df_data['Unique_hosp_per_patient']=df_data.groupby(['patientid'])['Hospital_code'].transform('nunique') \ndf_data['Unique_patitent_per_hosp']=df_data.groupby(['Hospital_code'])['patientid'].transform('nunique') \ndf_data['hosp_per_city']=df_data.groupby(['City_Code_Hospital'])['Hospital_code'].transform('nunique') \ndf_data['total_hosp_city_same_type']=df_data.groupby(['City_Code_Hospital'])['Hospital_type_code'].transform('nunique') \ndf_data['Ward_Type_Severity of Illness'] = df_data.groupby(['Ward_Type','Severity of Illness'])['patientid'].transform('nunique')\ndf_data['Unique_dept_per_patient']=df_data.groupby(['patientid'])['Department'].transform('nunique') \ndf_data['Severity of Illness_dept'] = df_data.groupby(['Severity of Illness','Department'])['patientid'].transform('nunique')\ndf_data['Severity of Illness_age_grp'] = df_data.groupby(['Severity of Illness','Age_group'])['patientid'].transform('nunique')\ndf_data['hos_vis_diffcity'] = df_data.groupby('patientid')['City_Code_Hospital'].transform('nunique') \n","a9d123d3":"df_data['visit_same_hos_type'] = df_data.groupby('patientid')['Hospital_type_code'].transform('count') \ndf_data['Severity of Illness_age'] = df_data.groupby(['Severity of Illness','Age'])['patientid'].transform('count')\ndf_data['total_cases_per_patient'] = df_data.groupby('patientid')['case_id'].transform('count')\ndf_data['visit_same_hos'] = df_data.groupby('Hospital_code')['patientid'].transform('count') \ndf_data['freq_patients'] = df_data.groupby('patientid')['patientid'].transform('count') \ndf_data['visit_same_dep_type'] = df_data.groupby('patientid')['Department'].transform('count') \n","ed74cb06":"df_data['mean_admission'] = df_data.groupby('patientid')['Admission_Deposit'].transform('mean') \ndf_data['bill_per_patitent']=df_data.groupby(['patientid'])['Admission_Deposit'].transform('sum') \ndf_data['median_admission'] = df_data.groupby('patientid')['Admission_Deposit'].transform('median') \ndf_data['min_Severity of Illness_pat'] = df_data.groupby('patientid')['Severity of Illness'].transform('min')\ndf_data['max_Severity of Illness_pat'] = df_data.groupby('patientid')['Severity of Illness'].transform('max')\ndf_data['max_bed_pat'] = df_data.groupby(['patientid'])['Bed Grade'].transform('max')\ndf_data['max_vis_pat'] = df_data.groupby(['patientid'])['Visitors with Patient'].transform('max')\n\n\ndf_data.isnull().sum()\n","eb8f78ba":"df_data['Age_group'] = df_data['Age_group'].astype(\"int64\")\n\n\ndf_train, df_test = df_data[df_data.is_train == 1], df_data[df_data.is_train == 0]\ndf_train.drop(['is_train'], inplace=True, axis=1)                   # Splitting back train and set sets \ndf_test.drop(['is_train'], inplace=True, axis=1)\ndf_test.drop(['Stay'], inplace=True, axis=1)\n\nle = preprocessing.LabelEncoder()\ndf_train['Stay'] = le.fit_transform(df_train['Stay'])\n\ndf_train['Stay'] = df_train['Stay'].astype(int)","6a8203c7":"corr_m = df_train.corr()                                # Checking correlation between target and features \ncorr_m['Stay'].sort_values(ascending = True)","d7ce7523":"\nX = df_train.drop(['Stay','case_id','patientid'],axis=1)\ny = df_train['Stay']\n\nX_train, X_test, y_train,y_test = train_test_split(X, y, test_size=0.30, random_state=42, shuffle=True, stratify=df_train['Stay'])\n\n","aaecea01":"feature_cols = df_train.columns.tolist()\nfeature_cols.remove('Stay')\nfeature_cols.remove('case_id')\nfeature_cols.remove('patientid')\n\n\nlabel_col = 'Stay'\nprint(\"Feature cols\")\nprint(\" \")\nprint(feature_cols)\nprint(\" \")\nprint('Catagorical columns')\nprint(\" \")\ncat_cols = cat\nprint(cat_cols)","ee1078ee":"# Parameters used for Light GBM model\n\nparams = {}\nparams['learning_rate'] = 0.06\nparams['max_depth'] = 50\nparams['n_estimators'] = 500\nparams['objective'] = 'multiclass'\nparams['boosting_type'] = 'gbdt'\nparams['subsample'] = 0.7\nparams['random_state'] = 42\nparams['colsample_bytree']=0.7\nparams['min_data_in_leaf'] = 55\nparams['reg_alpha'] = 1.6\nparams['reg_lambda'] = 1.1","859c935a":"clf = lgb.LGBMClassifier( **params ,n_jobs = -1, is_unbalanced = True)\n\nclf.fit(X_train, y_train, eval_metric='multi_error', verbose=False)\n\neval_score_acc = accuracy_score(y_test, clf.predict(X_test))\n\nprint('ACC: {}'.format(eval_score_acc))","4a19bec3":"# Training the model and checking with 5 fold cv\n\nclf = lgb.LGBMClassifier(**params,n_jobs= -1)\nscore = cross_val_score(clf , X_train, y_train , cv = 5 , n_jobs = -1,verbose = 1 )\nscore","9e3fff22":"# Training model with whole dataset\n\nclf = lgb.LGBMClassifier( **params ,n_jobs = -1, is_unbalanced = True, )\n\nclf.fit(X, y, eval_metric='multi_error', verbose=False)\n\ndf_test = df_test.drop(['case_id','patientid'],axis=1)\nlgbm= clf.predict_proba(df_test)","710c2ed0":"plt.rcParams['figure.figsize'] = (12,8)\nlgb.plot_importance(clf)\nplt.show() ","f5e2a5bb":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\nbestfeatures = SelectKBest(score_func=chi2,k=20)\nfit = bestfeatures.fit(X,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n\nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Features','Score']\nfeatureScores['Score'] = round(featureScores['Score'],2)\nfeatureScores.sort_values(by = 'Score', ascending= False)\n","304b00be":"#!pip install catboost\n\nfrom catboost import CatBoostClassifier\n","7bf8da4a":"cb = CatBoostClassifier(loss_function = 'MultiClass', objective= 'MultiClass',learning_rate = 0.09,\n                        eval_metric = 'Accuracy', early_stopping_rounds=20 )\n\n#cb.fit(X_train,y_train )\n\nscore = cross_val_score(cb  , X_train, y_train , cv = 5 , n_jobs = -1,verbose = 0 )\n#score\n\n","07824af5":"cb.fit(X,y,silent = True) \ncat_boost = cb.predict_proba(df_test)","539b6933":"# Giving weights for blending purpose \n\nw1 = 0.6\nw2 = 0.4","af8a77be":"# Blending catboost and lightGBM models \n\nfinal = (w1*cat_boost) + (w2*lgbm) \nlabel = clf.classes_\nlabel = label.tolist()\nblend = np.argmax(final,axis = 1)\n\npreds = le.inverse_transform(blend) \n\n\ntest1 = test_copy\nsubmit = pd.DataFrame({'case_id': test1.case_id, 'Stay': preds})\nprint(submit)\nsubmit.to_csv('blend_lgbm_cb.csv', index=False)","3f36b43a":"# Encoding Categorical variables","c33eaae3":"# Problem Statement : Janatahack: Healthcare Analytics II\n\n*Recent Covid-19 Pandemic has raised alarms over one of the most overlooked area to focus: Healthcare Management. While healthcare management has various use cases for using data science, patient length of stay is one critical parameter to observe and predict if one wants to improve the efficiency of the healthcare management in a hospital.*[](http:\/\/)\n\n*This parameter helps hospitals to identify patients of high LOS risk (patients who will stay longer) at the time of admission. Once identified, patients with high LOS risk can have their treatment plan optimized to miminize LOS and lower the chance of staff\/visitor infection. Also, prior knowledge of LOS can aid in logistics such as room and bed allocation planning.*\n\n*Suppose you have been hired as Data Scientist of HealthMan \u2013 a not for profit organization dedicated to manage the functioning of Hospitals in a professional and optimal manner. The task is to accurately predict the Length of Stay for each patient on case by case basis so that the Hospitals can use this information for optimal resource allocation and better functioning. The length of stay is divided into 11 different classes ranging from 0-10 days to more than 100 days.*","34338387":"# Catboost model","5ac69e21":"# Light GBM Model","037479fa":"# Blending Catboost and Light GBM ","ae95bbdd":"# Splitting data for training the model","858c53c2":" # Feature selection ","703da54d":"# Feature creation","1699bcc0":"# Missing value imputation","43ae7cf2":" # Library imports","db281022":"# Dataset","4e9033cb":"   *  **Public LB rank     :   23**\n   *  **Private LB rank    :   24**\n   \n   **Link to Leaderboard  :  http:\/\/datahack.analyticsvidhya.com\/contest\/janatahack-healthcare-analytics-ii\/#LeaderBoard**","cf951be6":"![image.png](attachment:image.png)"}}