{"cell_type":{"a1344d55":"code","f5bfc106":"code","c89ff782":"code","f9238b95":"code","6fb3aa51":"code","9b4f637b":"code","106cc761":"code","61348fc4":"code","ada621d0":"code","ba82681c":"markdown","055c3cab":"markdown","de446f35":"markdown","1f345f59":"markdown","30702111":"markdown","927819ec":"markdown","4abadfe4":"markdown","2843f657":"markdown","4099f147":"markdown","85c19d4d":"markdown","523b30c6":"markdown","899bcf70":"markdown"},"source":{"a1344d55":"!pwd","f5bfc106":"!mkdir image","c89ff782":"# This should not work!\n!cd image\/","f9238b95":"!pwd","6fb3aa51":"!ls","9b4f637b":"!wget -O mandrill.png https:\/\/upload.wikimedia.org\/wikipedia\/commons\/c\/c1\/Wikipedia-sipi-image-db-mandrill-4.2.03.png","106cc761":"!cp mandrill.png baboon.png","61348fc4":"!rm mandrill.png\n!rm -rf image","ada621d0":"!ls","ba82681c":"## 2. Bash commands","055c3cab":"\n#### 4.1 Numpy\n<div align=\"center\"><img src=\"https:\/\/cdn.analyticsvidhya.com\/wp-content\/uploads\/2017\/02\/17084443\/numpy_project_page.jpg\" width=\"400\"><\/div>\n\nNumPy is one of the most essential Python Libraries for scientific computing and it is used heavily for the applications of Machine Learning and Deep Learning. NumPy stands for NUMerical PYthon. Machine learning algorithms are computationally complex and require multidimensional array operations. NumPy provides support for large multidimensional array objects and various tools to work with them.\n\nVarious other libraries which we are going to discuss further like Pandas, Matplotlib and Scikit-learn are built on top of this amazing library! We have just the right resource for you to get started with NumPy\n\n[The Ultimate NumPy Tutorial for Data Science Beginners](https:\/\/www.analyticsvidhya.com\/blog\/2020\/04\/the-ultimate-numpy-tutorial-for-data-science-beginners\/?utm_source=top-python-libraries-ram&utm_medium=blog&utm_campaign=blackbelt)\n\n#### 4.2 MatplotLib\n<div align=\"center\"><img src=\"https:\/\/cdn.analyticsvidhya.com\/wp-content\/uploads\/2020\/03\/matplotlib.png\" width=\"400\"><\/div>\n\nMatplotlib is the most popular library for exploration and data visualization in the Python ecosystem. Every other library is built upon this library.\n\nMatplotlib offers endless charts and customizations from histograms to scatterplots, matplotlib lays down an array of colors, themes, palettes, and other options to customize and personalize our plots. matplotlib is useful whether you\u2019re performing data exploration for a machine learning project or building a report for stakeholders, it is surely the handiest library!\n\nIf you are just starting out, we have a few resources that will help you get started\n\n[A Beginner\u2019s Guide to matplotlib for Data Visualization and Exploration in Python](https:\/\/www.analyticsvidhya.com\/blog\/2020\/02\/beginner-guide-matplotlib-data-visualization-exploration-python\/?utm_source=top-python-libraries-ram&utm_medium=blog&utm_campaign=blackbelt) \\\n[10 matplotlib Tricks to Master Data Visualization in Python](https:\/\/www.analyticsvidhya.com\/blog\/2020\/05\/10-matplotlib-tricks-data-visualization-python\/?utm_source=top-python-libraries-ram&utm_medium=blog&utm_campaign=blackbelt)\n\n#### 4.3 OpenCv\n<div align=\"center\"><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/3\/32\/OpenCV_Logo_with_text_svg_version.svg\/1200px-OpenCV_Logo_with_text_svg_version.svg.png\" width=\"200\"><\/div>\n\nOpenCV is a huge open-source library for computer vision, machine learning, and image processing. OpenCV supports a wide variety of programming languages like Python, C++, Java, etc. It can process images and videos to identify objects, faces, or even the handwriting of a human. When it is integrated with various libraries, such as Numpy which is a highly optimized library for numerical operations, then the number of weapons increases in your Arsenal i.e whatever operations one can do in Numpy can be combined with OpenCV.\n\n[Official website](https:\/\/opencv.org\/)\n\n#### 4.4 Scipy\n<div align=\"center\"><img src=\"https:\/\/cdn.analyticsvidhya.com\/wp-content\/uploads\/2020\/11\/scipy-logo.png\" width=\"200\"><\/div>\n\nSciPy (Scientific Python) is the go-to library when it comes to scientific computing used heavily in the fields of mathematics, science, and engineering. It is equivalent to using Matlab which is a paid tool.\n\nSciPy as the Documentation says is \u2013 \u201cprovides many user-friendly and efficient numerical routines such as routines for numerical integration and optimization.\u201d It is built upon the NumPy library.\n\n[Official website](https:\/\/www.scipy.org\/)\n\n#### 4.5 Sklearn\n<div align=\"center\"><img src=\"https:\/\/cdn.analyticsvidhya.com\/wp-content\/uploads\/2017\/02\/17085331\/scikit-learn-logo.png\" width=\"400\"><\/div>\n\nSklearn is the Swiss Army Knife of data science libraries. It is an indispensable tool in your data science armory that will carve a path through seemingly unassailable hurdles. In simple words, it is used for making machine learning models.\n\nScikit-learn is probably the most useful library for machine learning in Python. The sklearn library contains a lot of efficient tools for machine learning and statistical modeling including classification, regression, clustering, and dimensionality reduction.\n\nSklearn is a compulsory Python library you need to master. Analytics Vidhya offers a free course on it. You can check out the resources here\n\n[Getting Started with scikit-learn (sklearn) for Machine Learning](https:\/\/courses.analyticsvidhya.com\/bundles\/certified-ai-ml-blackbelt-plus?utm_source=top-python-libraries-ram&utm_medium=blog&utm_campaign=blackbelt) \\\n[7 Impressive Scikit-learn Hacks, Tips and Tricks for Data Science](https:\/\/www.analyticsvidhya.com\/blog\/2020\/05\/7-scikit-learn-hacks-tips-tricks\/?utm_source=top-python-libraries-ram&utm_medium=blog&utm_campaign=blackbelt)\n\n#### 4.6 Pandas\n<div align=\"center\"><img src=\"https:\/\/cdn.analyticsvidhya.com\/wp-content\/uploads\/2017\/02\/17084214\/pandas_logo.png\" width=\"400\"><\/div>\n\nFrom Data Exploration to visualization to analysis \u2013 Pandas is the almighty library you must master!\n\nPandas is an open-source package. It helps you to perform data analysis and data manipulation in Python language. Additionally, it provides us with fast and flexible data structures that make it easy to work with Relational and structured data.\n\nIf you are new to Pandas, you should definitely check out this free course\n\n[Pandas for Data Analysis](https:\/\/courses.analyticsvidhya.com\/courses\/pandas-for-data-analysis-in-python?utm_source=top-python-libraries-ram&utm_medium=blog&utm_campaign=blackbelt)\n\n#### 4.7 Seaborn\n<div align=\"center\"><img src=\"https:\/\/files.ai-pool.com\/a\/21155149cb560f48f085a21264277c3c.png\" width=\"200\"><\/div>\n\nSeaborn is a free and open-source data visualization library based on Matplotlib. Many data scientists prefer seaborn over matplotlib due to its high-level interface for drawing attractive and informative statistical graphics.\n\nSeaborn provides easy functions that help you focus on the plot and now how to draw it. Seaborn is an essential library you must master. Here\u2019s a great resource to checkout\n\n[Become a Data Visualization Whiz with this Comprehensive Guide to Seaborn in Python](https:\/\/www.analyticsvidhya.com\/blog\/2019\/09\/comprehensive-data-visualization-guide-seaborn-python\/?utm_source=top-python-libraries-ram&utm_medium=blog&utm_campaign=blackbelt)\n\n#### 4.8 NiBabel\n<div align=\"center\"><img src=\"https:\/\/nipy.org\/nibabel\/_static\/nibabel-logo.svg\" width=\"200\"><\/div>\n\nThis package provides read and write access to some common medical and neuroimaging file formats, including: ANALYZE (plain, SPM99, SPM2 and later), GIFTI, NIfTI1, NIfTI2, CIFTI-2, MINC1, MINC2, AFNI BRIK\/HEAD, MGH and ECAT as well as Philips PAR\/REC. We can read and write FreeSurfer geometry, annotation and morphometry files. There is some very limited support for DICOM. NiBabel is the successor of PyNIfTI.\n\nThe various image format classes give full or selective access to header (meta) information and access to the image data is made available via NumPy arrays.\n\n[Official website](https:\/\/nipy.org\/nibabel\/)\n\n#### 4.9 Pytorch\n<div align=\"center\"><img src=\"https:\/\/miro.medium.com\/max\/1400\/1*myMaRWYYzlFYnLfRyqAC3w.png\" width=\"400\"><\/div>\n\nMany data science enthusiasts hail Pytorch as the best deep learning framework (that\u2019s a debate for later on). It has helped accelerate the research that goes into deep learning models by making them computationally faster and less expensive.\n\nPyTorch is a Python-based library that provides maximum flexibility and speed. Some of the features of Pytorch are as follows\n\nProduction Ready \\\nDistributed Training \\\nRobust Ecosystem \\\nCloud support \n\nExcited? You can learn more about PyTorch here\n\n[Introduction to PyTorch for Deep Learning [FREE COURSE]](https:\/\/courses.analyticsvidhya.com\/courses\/introduction-to-pytorch-for-deeplearning?utm_source=top-python-libraries-ram&utm_medium=blog&utm_campaign=blackbelt) \\\n[A Beginner-Friendly Guide to PyTorch and How it Works from Scratch](https:\/\/www.analyticsvidhya.com\/blog\/2019\/09\/introduction-to-pytorch-from-scratch\/?utm_source=top-python-libraries-ram&utm_medium=blog&utm_campaign=blackbelt)\n\n#### 4.10 TensorFlow\n<div align=\"center\"><img src=\"https:\/\/cdn.analyticsvidhya.com\/wp-content\/uploads\/2019\/02\/Tensorflow.png\" width=\"400\"><\/div>\n\nOver the years, TensorFlow, developed by the Google Brain team has gained traction and become the cutting edge library when it comes to machine learning and deep learning. TensorFlow had its first public release back in 2015. At the time, the evolving deep learning landscape for developers & researchers was occupied by Caffe and Theano. In a short time, TensorFlow emerged as the most popular library for deep learning.\n\nTensorFlow is an end-to-end machine learning library that includes tools, libraries, and resources for the research community to push the state of the art in deep learning and developers in the industry to build ML & DL powered applications.\n\nTo be a future-ready data scientist here are a few resources to learn TensorFlow\n\n[Deep Learning Guide: Introduction to Implementing Neural Networks using TensorFlow in Python](https:\/\/www.analyticsvidhya.com\/blog\/2016\/10\/an-introduction-to-implementing-neural-networks-using-tensorflow\/?utm_source=top-python-libraries-ram&utm_medium=blog&utm_campaign=blackbelt) \\\n[TensorFlow 2.0 Tutorial for Deep Learning](https:\/\/www.analyticsvidhya.com\/blog\/2020\/03\/tensorflow-2-tutorial-deep-learning\/?utm_source=top-python-libraries-ram&utm_medium=blog&utm_campaign=blackbelt)","de446f35":"Time and experience are necessary for writing seamless Python scripts. Nonetheless, we need you to have a beginner-level understanding of this popular programming language in our course.\nWe will not be able to cover all the details about Python due to time constraints. However, as a result of completing the [Python tutorial course on Kaggle](https:\/\/www.kaggle.com\/learn\/python), you can now understand most of the coding components of the course.","1f345f59":"#### 1.1 Starting a session\nAfter creating a notebook, you may open it, but the session will not start automatically. Instead, you should press the power button in order to start your session.\n\n<div align=\"center\"><img src=\"https:\/\/github.com\/soroush361\/AoE_BME\/blob\/main\/power.png?raw=true\" \/><\/div>\n\nAfter starting the session, you'll see a panel like the below picture.\n\n<div align=\"center\"><img src=\"https:\/\/github.com\/soroush361\/AoE_BME\/blob\/main\/started.png?raw=true\" \/><\/div>\n\nYou may also see how many resources Kaggle servers are assigned to your current session.\n\n<div align=\"center\"><img src=\"https:\/\/github.com\/soroush361\/AoE_BME\/blob\/main\/hardwares.png?raw=true\" \/><\/div>\n\nRemember, after starting a session, you'll have 9 hours to write your scripts, and after that, it will be restarted. Moreover, if you've been inactive for more than 40min, you'll receive a message, and your notebook will be restarted.\n\n#### 1.2 Adding data\nAdding data has been explained in the pre-lecture slides.\n\n#### 1.3 Markdown, LaTex, and code blocks\nIn Kaggle notebooks, you may add a Markdown block, which is just formatted text, and code blocks to write your codes.\n\n<div align=\"center\"><img src=\"https:\/\/github.com\/soroush361\/AoE_BME\/blob\/main\/code_markdown.png?raw=true\" \/><\/div>\n\nMarkdown block\n\n<div align=\"center\"><img src=\"https:\/\/github.com\/soroush361\/AoE_BME\/blob\/main\/markdown_block.png?raw=true\" \/><\/div>\n\nCode block\n\n<div align=\"center\"><img src=\"https:\/\/github.com\/soroush361\/AoE_BME\/blob\/main\/code_block.png?raw=true\" \/><\/div>\n\nIn markdown blocks, you can use LaTex by using `$` for the inline formula or `$$` for the new-line formula.\nExample: \nThis is an inline formula, $y=\\frac{1}{2}x+\\pi$\n\nThis is a newline formula:\n$$\ny=\\sin{x}+\\mu\n$$\n\nDouble click on Markdown blocks to edit it.\n\n#### 1.4 Save a notebook\nTo save your notebook, you should click on the \"Save Version\" button on the top-right side of the window.\n\n<div align=\"center\"><img src=\"https:\/\/github.com\/soroush361\/AoE_BME\/blob\/main\/save_button.png?raw=true\" \/><\/div>\n\nThis will open a panel like the following picture.\n\n<div align=\"center\"><img src=\"https:\/\/github.com\/soroush361\/AoE_BME\/blob\/main\/save_panel.png?raw=true\" \/><\/div>\n\nIf you save as \"Save & Run All (Commit)\", you'll make a version of your notebook and may always come back and edit it. But, be careful if you have a long-running script as it may take a long time to save the version.\nThe other option is to save it as it is by choosing the \"Quick Save\" option. The next time you open your notebook, you'll see the latest version of it.\n\n<div align=\"center\"><img src=\"https:\/\/github.com\/soroush361\/AoE_BME\/blob\/main\/quick_save_panel.png?raw=true\" \/><\/div>\n\n\n#### 1.5 Share notebook and make it public\nYou may also share your notebook with your collaborators by clicking on the \"Share\" button:\n\n<div align=\"center\"><img src=\"https:\/\/github.com\/soroush361\/AoE_BME\/blob\/main\/share_button.png?raw=true\" \/><\/div>\n\nThen find whom you want to share the notebook with by clicking on \"Add collaborators.\"\n\n<div align=\"center\"><img src=\"https:\/\/github.com\/soroush361\/AoE_BME\/blob\/main\/share_panel.png?raw=true\" \/><\/div>\n\n<div align=\"center\"><img src=\"https:\/\/github.com\/soroush361\/AoE_BME\/blob\/main\/share_panel_people.png?raw=true\" \/><\/div>\n\nBut if you wish to make your notebook publicly available, on the same panel, choose the \"Public\" option.\n\n<div align=\"center\"><img src=\"https:\/\/github.com\/soroush361\/AoE_BME\/blob\/main\/share_panel_public.png?raw=true\" \/><\/div>\n\nRemember, you'll need to make your assignments' notebook public and then submit the \"Public url\" in the CourseWorks.\n\n<div align=\"center\"><img src=\"https:\/\/github.com\/soroush361\/AoE_BME\/blob\/main\/share_panel_public_url.png?raw=true\" \/><\/div>\n\n\n#### 1.6 Enable GPU and Internet\nThe default setting of each newly created notebook is set to access the internet through the notebook. This means that either the notebook will have access to online resources via code or markdowns or not. For the purpose of this course, make sure you have internet access.\n\n<div align=\"center\"><img src=\"https:\/\/github.com\/soroush361\/AoE_BME\/blob\/main\/internet.png?raw=true\" \/><\/div>\n\nThe notebooks are not allowed to use GPU resources unless you activate them through the \"Accelerator\" setting. Remember, each Kaggle account will have limited hours of GPU quota, which may vary between 32 hours\/week up to 50 hours\/week. Therefore, enable the GPU whenever you need it, such as running the training script.\n\n<div align=\"center\"><img src=\"https:\/\/github.com\/soroush361\/AoE_BME\/blob\/main\/gpu.png?raw=true\" \/><\/div>\n\n<div align=\"center\"><img src=\"https:\/\/github.com\/soroush361\/AoE_BME\/blob\/main\/gpu_quota.png?raw=true\" \/><\/div>\n\n\nRemember changing the accelerator causes the notebook to be restarted.","30702111":"## 4. Python libraries\nMost of the contents in this section were borrowed from [This webpage](https:\/\/www.analyticsvidhya.com\/blog\/2020\/11\/top-13-python-libraries-every-data-science-aspirant-must-know-and-their-resources\/).","927819ec":"For a complete bash commands cheat sheet, go to [this link](https:\/\/cheatography.com\/davechild\/cheat-sheets\/linux-command-line\/).","4abadfe4":"## 1. Notebook environment","2843f657":"## Kaggle environment and Python programming tutorial\n#### Sections:\n1. Notebook environment\n2. Bash commands\n3. Python language\n4. Python libraries\n5. Read and display an image in python\n6. Simple image processing (Denoising with low-pass filters)\n","4099f147":"## 3. Python language","85c19d4d":"According to the pre-lecture slides, you should have your Kaggle account, and you should be able to create a notebook like this one.","523b30c6":"Kaggle notebooks are running on a Linux OS. Thus, you can use bash commands in code blocks. All you need is to add an exclamation mark before the command, like `!bash`.\n\nSome of the bash commands that we may use are listed below:\n\nA. Print current working directory: `pwd` \\\nB. Make a directory: `mkdir` \\\nC. Change current directory: `cd` (will not work on Kaggle for security reasons) \\\nD. Print the list of files and folders in the current directory: `ls` \\\nE. Copy a file: `cp` \\\nF. Move\/rename a file: `mv` \\\nG. Remove a file: `rm` \\\nH. Download a file from the internet: `wget`\n\nCheck the scripts below:","899bcf70":"# Deep Learning in Biomedical Imaging\n## BMENE4460-2022-1"}}