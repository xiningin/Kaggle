{"cell_type":{"a96d2474":"code","9692a1ba":"code","cb1987fc":"code","27133ee0":"code","115dcbc9":"code","ee42bea3":"code","58d9b7a6":"code","e62f8834":"code","84c699ec":"code","963dbd63":"code","29265155":"code","1bf375ec":"code","0fcbb93f":"code","780f5695":"code","fd2d4e7c":"code","d39b6107":"code","0ac76d9f":"code","7ce91b51":"code","ea71adc2":"code","00ae407c":"code","56c32cfc":"code","b8c2c2de":"code","25858d5c":"code","c5155d97":"code","accb3202":"code","a0aa83e5":"code","a6b626ea":"code","6bd3c88c":"code","b7902f67":"code","97ba376e":"code","b8d96a5a":"code","d06434e0":"code","ae120147":"code","ae6cbe21":"code","9c8a1c58":"code","395e6591":"code","6afaaaf0":"code","e394f0b8":"code","848caea7":"code","8500e374":"code","36d1bbce":"code","3ba94229":"code","6812be43":"code","fad5872a":"code","ff67ce50":"code","d702e74b":"code","9f4542ff":"code","e1800919":"code","f85ec1bb":"code","291f4063":"code","9cee14b5":"markdown","ce4af21d":"markdown","76ea6094":"markdown","356ada29":"markdown","645bb60c":"markdown","58b0669a":"markdown","5b84af6a":"markdown","3ccf7592":"markdown","9d472e94":"markdown","118a1650":"markdown","1bd20636":"markdown","74d7bc59":"markdown","fd87a7c1":"markdown","804e05cb":"markdown","09dc93e7":"markdown","d6c9a082":"markdown","2333dced":"markdown","9ec06445":"markdown","67aa718f":"markdown","3c18ee60":"markdown","d4d206ec":"markdown","ad1cca02":"markdown"},"source":{"a96d2474":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9692a1ba":"import nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom wordcloud import WordCloud,STOPWORDS\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize,sent_tokenize\nfrom bs4 import BeautifulSoup\nimport re,string,unicodedata\nfrom keras.preprocessing import text, sequence\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom string import punctuation\nimport keras\nfrom keras.models import Sequential\nimport tensorflow as tf\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\nimport tensorflow as tf","cb1987fc":"# \/kaggle\/input\/covid-19-nlp-text-classification\/Corona_NLP_test.csv\n# \/kaggle\/input\/covid-19-nlp-text-classification\/Corona_NLP_train.csv\n\ntrain_data = pd.read_csv('\/kaggle\/input\/covid-19-nlp-text-classification\/Corona_NLP_train.csv',\n                        encoding='latin_1')\ntest_data = pd.read_csv(\"\/kaggle\/input\/covid-19-nlp-text-classification\/Corona_NLP_test.csv\",encoding='latin_1')","27133ee0":"train_data.head()","115dcbc9":"test_data.head()","ee42bea3":"# check for null value in train_data\nsns.heatmap(train_data.isnull());","58d9b7a6":"# check for null values in test data\nsns.heatmap(test_data.isnull());","e62f8834":"train_data.drop_duplicates(inplace= True)\ntest_data.drop_duplicates(inplace=True)\n","84c699ec":"train_data.dropna(inplace=True)\ntest_data.dropna(inplace=True)","963dbd63":"# copy the dataset into new data\ntrain_df = train_data.copy()\ntest_df = test_data.copy()","29265155":"train_df.head()","1bf375ec":"print(train_df.isnull().sum())\nprint(\"*\"*50)\nprint(test_df.isnull().sum())","0fcbb93f":"train_data.columns","780f5695":"sns.set_style(\"whitegrid\")\nsns.set(rc={'figure.figsize':(11,4)})","fd2d4e7c":"sns.countplot(train_df['Sentiment'])","d39b6107":"train_df.shape, test_df.shape","0ac76d9f":"def change_sen(sentiment):\n    if sentiment == \"Extremely Positive\":\n        return 'positive'\n    elif sentiment == \"Extremely Negative\":\n        return 'negative'\n    elif sentiment == \"Positive\":\n        return 'positive'\n    elif sentiment == \"Negative\":\n        return 'negative'\n    else:\n        return 'netural'","7ce91b51":"train_df['Sentiment'] = train_df['Sentiment'].apply(lambda x: change_sen(x))\ntest_df['Sentiment'] = test_df['Sentiment'].apply(lambda x: change_sen(x))","ea71adc2":"sns.countplot(train_df['Sentiment'])","00ae407c":"sns.countplot(test_df['Sentiment'])","56c32cfc":"# load stop words\nstop_word = stopwords.words('english')","b8c2c2de":"def clean(text):\n\n    #     remove urls\n    text = re.sub(r'http\\S+', \" \", text)\n\n    #     remove mentions\n    text = re.sub(r'@\\w+',' ',text)\n\n    #     remove hastags\n    text = re.sub(r'#\\w+', ' ', text)\n\n    #     remove digits\n    text = re.sub(r'\\d+', ' ', text)\n\n    #     remove html tags\n    text = re.sub('r<.*?>',' ', text)\n    \n    #     remove stop words \n    text = text.split()\n    text = \" \".join([word for word in text if not word in stop_word])\n    \n      \n    return text","25858d5c":"train_df['OriginalTweet'] = train_df['OriginalTweet'].apply(lambda x: clean(x))\ntest_df['OriginalTweet'] = test_df['OriginalTweet'].apply(lambda x: clean(x))","c5155d97":"train_df.head()","accb3202":"df_train = train_df.iloc[:,4:]\ndf_test = test_df.iloc[:,4:]","a0aa83e5":"df_train.head()","a6b626ea":"l = {\"netural\":0, \"positive\":1,\"negative\":2}","6bd3c88c":"df_train['Sentiment'] = df_train['Sentiment'].map(l)\ndf_test['Sentiment']  = df_test['Sentiment'].map(l)","b7902f67":"df_train.head()","97ba376e":"x_train = df_train['OriginalTweet'].copy()\nx_test = df_test['OriginalTweet'].copy()\n\ny_train = df_train['Sentiment'].copy()\ny_test = df_test['Sentiment'].copy()","b8d96a5a":"x_train.shape, y_train.shape,x_test.shape, y_test.shape","d06434e0":"max_len = np.max(x_train.apply(lambda x :len(x)))","ae120147":"max_len","ae6cbe21":"tokenizer = Tokenizer()","9c8a1c58":"tokenizer.fit_on_texts(x_train)\nvocab_length = len(tokenizer.word_index) + 1\n\nx_train = tokenizer.texts_to_sequences(x_train)\nx_test = tokenizer.texts_to_sequences(x_test)\n\nx_train = pad_sequences(x_train, maxlen=max_len, padding='post')\nx_test = pad_sequences(x_test, maxlen=max_len, padding='post')","395e6591":"print(\"Vocab length:\", vocab_length)\nprint(\"Max sequence length:\", max_len)","6afaaaf0":"embedding_dim = 16","e394f0b8":"model = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_length, embedding_dim, input_length=max_len),\n    tf.keras.layers.Bidirectional(tf.keras.layers.GRU(256, return_sequences=True)),\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dropout(0.4),\n    tf.keras.layers.Dense(3, activation='softmax')\n])\n# opt = tf.keras.optimizers.Adam(learning_rate=0.01)\nmodel.compile(loss='categorical_crossentropy',optimizer=\"adam\",metrics=['accuracy'])","848caea7":"print(model.summary())","8500e374":"tf.keras.utils.plot_model(model)","36d1bbce":"x_train.shape, x_test.shape, y_train.shape, y_test.shape","3ba94229":"from keras.utils import to_categorical\n\ny_train = to_categorical(y_train, 3)\ny_test = to_categorical(y_test, 3)","6812be43":"num_epochs = 10\nhistory = model.fit(x_train, y_train, epochs=num_epochs, \n                    validation_data=(x_test, y_test))","fad5872a":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']","ff67ce50":"print(f\"Accuracy on training data is:- {acc[-1]*100} %\")\nprint(f\"Loss {loss[-1]*100}\")\n\nprint(f\"Accuracy on validation data is:- {val_acc[-1]*100} %\")\nprint(f\"Loss {val_loss[-1]*100}\")\n","d702e74b":"epochs = range(len(acc))\n\nplt.plot(epochs, acc,'b',label='training acc')\nplt.plot(epochs, val_acc, 'r', label='validation acc')\nplt.legend()\nplt.show()\n\n\nplt.plot(epochs, loss,'b',label='training loss')\nplt.plot(epochs, val_loss, 'r', label='validation loss')\nplt.legend()\nplt.show()\n","9f4542ff":"pred = model.predict_classes(x_test)","e1800919":"cm = confusion_matrix(np.argmax(y_test,1),pred)\ncm","f85ec1bb":"sns.heatmap(cm,annot=True)","291f4063":"print(classification_report(np.argmax(y_test,1),pred))","9cee14b5":"### Applying the change_sen function\/method  \ud83d\ude1d ","ce4af21d":"### Now time for \"Data Clearning and processing\"  \ud83e\udd2f ","76ea6094":"## Confusion Matrix  \ud83e\udd14 ","356ada29":"## Classification Report  \ud83e\udd2b ","645bb60c":"## Thanks for Watching!!  \ud83d\ude4f \n\n- Happy Learning \ud83d\ude0d ","58b0669a":"## Loading Necessary libraries \ud83d\ude03","5b84af6a":"## check if any null value exists? \ud83e\udd28","3ccf7592":"## Making checkpoint \ud83e\uddd0","9d472e94":"## Model training \ud83e\udd71 \ud83d\ude34","118a1650":"## if you've learned something from this kernal then please \"UPVOTE\"  \ud83e\udd2d ","1bd20636":"## Plotting  \ud83e\udd2a ","74d7bc59":"## Model Accuracy and loss  \ud83d\ude35 ","fd87a7c1":"## drop duplicate and 'NA' value\/s \ud83d\ude44","804e05cb":"#### Maxiumn lenght of sequence  \ud83d\ude27 ","09dc93e7":"### We only need \"OriginalTweet\" and \"Sentiment\"\n\n \ud83d\ude2c \n\n##### so only taking these columns","d6c9a082":"**As we can see we have 5 types of sentiment (but we can make extremely positive into positive and extremely negative into negative )**  \ud83d\ude0e","2333dced":"## performing small EDA \ud83e\udd29","9ec06445":"## Check for any null value\/s  \ud83d\ude36","67aa718f":"### now mapping the sentiment  \ud83e\udd20 \n- 0: Netural \n- 1: Positive\n- 2: Negative","3c18ee60":"## Reading the dataset \ud83d\ude01","d4d206ec":"### Tokenizer initlization  \ud83e\udd11 ","ad1cca02":"## Model Creation  \ud83d\ude0d "}}