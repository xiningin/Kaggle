{"cell_type":{"22684196":"code","379ee539":"code","cc89864f":"code","0b296006":"code","b600ff78":"code","c7a949c0":"code","acd86873":"code","6e2e94da":"code","375b2db8":"code","e8f90d8c":"code","d8b243dd":"code","cffdc7e1":"code","58eab6d4":"code","ec69a720":"code","8aaabfcc":"code","53023830":"code","01ea1bcf":"code","62a0b866":"code","174e7789":"code","b1d28d4b":"code","a9499df2":"code","576bebf6":"code","d03e9a72":"code","87803072":"code","31a9768d":"code","91273d6b":"code","b951ae1a":"code","ff0a0434":"code","81067ccc":"code","13127294":"code","51ceae6f":"code","1c88d787":"code","89a7c089":"code","d9094c89":"code","dac715cc":"markdown","21e0f726":"markdown","9c1bf776":"markdown","6c77a864":"markdown","4efb2901":"markdown","eafa025c":"markdown"},"source":{"22684196":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sbn\npd.set_option('display.max_columns', 5000)\npd.set_option('display.max_rows',5000)\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","379ee539":"family_df = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv')\nsample_sub = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/sample_submission.csv')\n","cc89864f":"sample_sub.head()","0b296006":"family_df.head()","b600ff78":"family_df.n_people.value_counts().plot(kind = 'bar',figsize = (15,7))","c7a949c0":"family_df.isnull().sum()","acd86873":"family_df[family_df['choice_0']> 100]","6e2e94da":"sbn.pairplot(family_df)","375b2db8":"sbn.distplot(family_df.choice_0)","e8f90d8c":"plt.figure(figsize = (16,5))\nsbn.distplot(family_df.choice_1)","d8b243dd":"plt.figure(figsize=(16, 6))\nax = sbn.distplot(family_df.choice_1)\n","cffdc7e1":"plt.figure(figsize = (16,6))\nsbn.boxplot(x = family_df.n_people,y = family_df.choice_0)","58eab6d4":"plt.figure(figsize = (16,6))\nsbn.boxplot(x = family_df.n_people,y = family_df.choice_9)","ec69a720":"plt.figure(figsize = (16,6))\nsbn.boxplot(x = family_df.n_people,y = family_df.choice_2)","8aaabfcc":"family_df[family_df.choice_0==1]['n_people'].sum()","53023830":"family_df.groupby(['choice_0'])['n_people'].agg(sum).plot(kind = 'bar',figsize = (16,6))","01ea1bcf":"\nfor index, row in family_df.iterrows():\n    #print(row)\n    hash_value = {}\n    for (columnName, columnData) in row.iteritems():\n        if (columnName != 'family_id') & (columnName != 'n_people'):\n            hash_value[columnData] = 1+ hash_value.get(columnData,0)\n            if hash_value[columnData] > 1:\n                row[columnName] = -1\n                #print(columnName)\n\n            \n ","62a0b866":"family_df.values[(family_df == -1).values]","174e7789":"family_df.groupby(['choice_1'])['n_people'].agg(sum).plot(kind = 'bar',figsize = (16,6))","b1d28d4b":"family_df.groupby(['choice_2'])['n_people'].agg(sum).plot(kind = 'bar',figsize = (16,6))","a9499df2":"days_people = {}\nfor index, row in family_df.iterrows():\n    for (columnName, columnData) in row.iteritems():\n        if (columnName != 'family_id') & (columnName != 'n_people'):\n            days_people[\"days_\"+str(columnData )] = row['n_people'] + days_people.get(\"days_\"+str(columnData),0)\n\n\n               ","576bebf6":"days_people_df = pd.DataFrame.from_dict(list(days_people.items()))\ndays_people_df.columns = ['days_before_xmas','n_people_interested']","d03e9a72":"days_people_df.sort_values(by=['n_people_interested'], ascending=False).plot(x = 'days_before_xmas',y ='n_people_interested',  kind = 'bar',figsize = (16,6),)","87803072":"(family_df.n_people.sum(),family_df.shape)","31a9768d":"days_family = {}\nfor index, row in family_df.iterrows():\n    for (columnName, columnData) in row.iteritems():\n        if (columnName != 'family_id') & (columnName != 'n_people'):\n            days_family[\"days_\"+str(columnData )] = 1 + days_family.get(\"days_\"+str(columnData),0)\n            \ndays_family_df = pd.DataFrame.from_dict(list(days_family.items()))\ndays_family_df.columns = ['days_before_xmas','n_family_interested']","91273d6b":"days_family_df.sort_values(by=['n_family_interested'], ascending=False).plot(x = 'days_before_xmas',y ='n_family_interested',  kind = 'bar',figsize = (16,6),)","b951ae1a":"family_df.n_people.sum()","ff0a0434":"def check_lowest_cost_day(row,n_alloc):\n    flag = 0\n    min_people = 100000\n    day = 101\n    for columnName,columnData in row.iteritems():\n        if (columnName != 'family_id') and (columnName != 'n_people'):\n            if flag == 0:\n                flag = 1\n                min_ = n_alloc.get(columnData,0) + row['n_people'] \n            else:\n                min_ = n_alloc.get(columnData,0) + row['n_people'] \n            if (min_people > min_) and (min_ < 300):\n                min_people = min_\n                day = columnData\n    \n    if min_people == 100000:\n        #print(\"outer\")\n        return min(n_allocated, key=n_allocated.get)\n    return day\n                        \n            ","81067ccc":"results_dict = {}\nn_allocated = {i:0 for i in range(1,101)}\n\nfor index, row in family_df.iterrows():\n    day = check_lowest_cost_day(row,n_allocated)\n    results_dict[row['family_id']] = day\n    n_allocated[day] = n_allocated.get(day,0) + row['n_people']\n    ","13127294":"results = pd.DataFrame.from_dict(list(results_dict.items()))\nresults.columns = ['family_id','assigned_day']","51ceae6f":"results_famil_df = results.merge(family_df,on='family_id',how = 'inner')","1c88d787":"results_famil_df.groupby(['assigned_day'])['n_people'].agg(sum)","89a7c089":"results.assigned_day.value_counts().plot(kind = 'bar', figsize = (16,6))","d9094c89":"results.to_csv('submission.csv', index=False)","dac715cc":"Check any family's choice is repeatative","21e0f726":"Please upVote, if you like the work.","9c1bf776":"Every one wants gifts just before X-mas day","6c77a864":"All Peoples Interests Vs Visiting Day\nMost of the people interested in 1 Day before X-Mas","4efb2901":"Number of family interests Vs Days\n* More than 50% of families expecting day 1 should visit.","eafa025c":"No repetative choices from familys'"}}