{"cell_type":{"5c508cd5":"code","ebffd183":"code","5610a9da":"code","9f64c7b0":"code","97384a6e":"code","20788869":"code","3bbeda0f":"code","fff88d0c":"code","25c510df":"code","f87b4621":"code","531ebe97":"code","d7a91b04":"code","3be3ed9b":"code","d0bff990":"code","139ad41a":"code","1ab176ee":"code","382d468a":"code","9ce851ef":"code","03a025ca":"code","fc1420d9":"markdown","8cfc4a8a":"markdown","54e12a44":"markdown","2d82898d":"markdown","5f701e28":"markdown","493d9557":"markdown","790eedad":"markdown","5f405c4b":"markdown","9ee7a661":"markdown","d2539412":"markdown","8bb44a85":"markdown","ff90eb46":"markdown","b0c0daaf":"markdown"},"source":{"5c508cd5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ebffd183":"df = pd.read_csv('..\/input\/medium-post-titles\/medium_post_titles.csv')\ndf","5610a9da":"df.info()","9f64c7b0":"df.isna().sum() ","97384a6e":"df.drop(df[df.subtitle.isna()].index, inplace=True) #Rows with missing values are cleared\nlen(df)","20788869":"df.reset_index(drop=True, inplace=True)\ndf","3bbeda0f":"df.describe()","fff88d0c":"df.title[0]+\" \"+df.subtitle[0]","25c510df":"df[\"text\"] = \"\"\nfor row in range(len(df)):\n    df[\"text\"][row] = df.title[row]+\" \"+df.subtitle[row]\ndf    ","f87b4621":"df.drop(columns=['title','subtitle','subtitle_truncated_flag'], inplace=True)","531ebe97":"import re\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n\ndef preprocessing(text):\n    text = re.sub(r'\\W+',' ',text)\n    text = re.sub(r'\\s+',' ',text)    \n    text = text.lower()\n    result = ''\n    for word in word_tokenize(text):\n        if word not in list(stopwords.words('english')):\n            result += word + ' '\n            \n    return result","d7a91b04":"df[\"text\"] = df.text.apply(preprocessing)","3be3ed9b":"df","d0bff990":"df.category.unique()","139ad41a":"len(df.category.unique())","1ab176ee":"import matplotlib.pyplot as plt\n\nf, ax = plt.subplots(figsize=(18,20))\nplt.barh(df.category.unique(), df.category.value_counts(), height=0.75, align='center')\nplt.xlabel('Medium Post Counts by Category')\nplt.ylabel('Categories')\nplt.show()","382d468a":"from sklearn.model_selection import train_test_split\n\nX = df.text\ny = df.category\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","9ce851ef":"model = Pipeline([\n    ('vect', CountVectorizer()),\n    ('tfidf', TfidfTransformer()),\n    ('clf', LogisticRegression(n_jobs=1, C=1e5))\n])\n\n\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)\n\nprint('accuracy: ', accuracy_score(y_pred, y_test))","03a025ca":"from sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.metrics import classification_report, accuracy_score\n\nmodel = Pipeline([\n    ('vect', CountVectorizer()),\n    ('tfidf', TfidfTransformer()),\n    ('clf', SGDClassifier(loss='hinge', penalty='l2', alpha=1e-3, random_state=42, max_iter=50, tol=0.001))\n])\n\n\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)\n\nprint('accuracy: ', accuracy_score(y_pred, y_test))","fc1420d9":"We split the data into two parts as train set and test set.","8cfc4a8a":"We did not get a high accuracy rate from the models we trained. This is because the text data we have is insufficient and the number of target variables is high.","54e12a44":"**Linear Support Vector Machine**","2d82898d":"# **Finally, classification!**","5f701e28":"**Text Preprocessing**","493d9557":"**Logistic Regression**","790eedad":"When we delete the missing values, we fix the corruption in the index values.","5f405c4b":"Now we will combine the contents of the title and subtitle columns and make them into one column. The reason we do this is because the small amount of data we have for the category classification process causes the success rate to decrease. This process increases the amount of data we have at least a little bit.","9ee7a661":"\"subtitle\" column of the data have 1487 examples what is missing value.","d2539412":"**What is the data? Let's look**","8bb44a85":"How many missing value in the data?","ff90eb46":"We delete columns that we don't need.","b0c0daaf":"We have 93 target value(class). It is really huge amount!  "}}