{"cell_type":{"27bb0e08":"code","d74c7126":"code","cba26b91":"code","dcd9c015":"code","e495245e":"code","8136850d":"code","86a1ef82":"code","4f713844":"code","90c73af4":"code","20b773d9":"code","acfee913":"code","4b983c38":"code","14c98e8d":"code","ff5de98a":"code","84ddeb14":"code","ab28f9e8":"code","c0c4d8a7":"code","8e57827a":"code","4a3827dc":"code","3ae7aeca":"code","a1ab83ff":"code","cfec5e24":"code","d4c317df":"code","f64d7b42":"code","90f2807b":"code","3bb2c04a":"code","ddf26a1e":"code","6e940794":"markdown","b75be8bf":"markdown","bdcfd6e1":"markdown","e96aa51b":"markdown","0077072d":"markdown","ae44a4ae":"markdown","735ee315":"markdown","368c0657":"markdown","4e88da89":"markdown","f08389ef":"markdown","3cc863b7":"markdown","fdb241da":"markdown","25fcd96c":"markdown"},"source":{"27bb0e08":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport seaborn as sns\n\nfrom fbprophet import Prophet\n\nfrom statsmodels.graphics.tsaplots import plot_pacf, plot_acf\n\nimport datetime\n\nfrom sklearn.model_selection import train_test_split\nfrom catboost import CatBoostRegressor \nimport shap\nfrom catboost import Pool\n\n","d74c7126":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","cba26b91":"#train\ndata = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv\", low_memory=False)#, nrows=10000)\n\n#test\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv\", low_memory=False)","dcd9c015":"test","e495245e":"data.describe().transpose()","8136850d":"data.info()","86a1ef82":"fig, ax = plt.subplots(1,1, figsize=(10,8))\nsns.heatmap(data.corr(method = 'pearson'), annot=True, ax=ax, cmap='Blues_r')\nplt.show()","4f713844":"sns.pairplot(data[['sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5',\n       'target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']])","90c73af4":"# Typecast datetime form object to datetime field and make index\ndata.index = pd.to_datetime(data.pop('date_time'))\ntest.index = pd.to_datetime(test.pop('date_time'))","20b773d9":"#Ploting target field on timeline\ntargets = ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']\nfor t in targets:\n    my_alpha=0.25\n    fig, ax = plt.subplots(figsize=(12,3))\n    ax.scatter(data.index, data[t], alpha=my_alpha, \n               color='darkred', s=4)\n    ax.xaxis.set_major_locator(plt.MaxNLocator(20)) # reduce number of x-axis labels\n    plt.xticks(rotation=90)\n    plt.title(t)\n    plt.grid()\n    plt.tight_layout()\nplt.show()","acfee913":"features_num = test.columns\nfor f in features_num:\n    plt.figure(figsize=(14,4))\n    ax1 = plt.subplot(2,1,1)\n    ax1.scatter(data.index, data[f], alpha=my_alpha, color='blue', s=4)\n    ax1.scatter(test.index, test[f], alpha=my_alpha, color='green', s=4)\n    plt.title(f)\n    plt.grid()","4b983c38":"from statsmodels.graphics.tsaplots import plot_acf\nplot_acf(data['target_carbon_monoxide'], lags=200)","14c98e8d":"plot_acf(data['target_benzene'], lags=200)","ff5de98a":"plot_acf(data['target_nitrogen_oxides'], lags=200)","84ddeb14":"# Prophet for target_benzene\ndf = data[['deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1',\n       'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5',\n       'target_benzene']]\ndf = df.reset_index(level=0)\ndf.columns = ['ds','deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1',\n       'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5',\n       'y']\np = Prophet(seasonality_mode='additive')\np.fit(df)\nfuture = p.make_future_dataframe(periods=2246, freq='h')\nfuture['floor'] =  0 \nforecast = p.predict(future)\n\n# Add prediction on train data\ndata = data.merge(forecast[['ds','yhat']][:-2246], how=\"inner\", right_on=\"ds\", left_index=True)\ndata = data.rename(columns={'yhat':'yhat_benzene_oxide'})\ndata.index = data.pop('ds')\n\n# Add prediction on test data\ntest = test.merge(forecast[['ds','yhat']][-2246:], how=\"inner\", right_on=\"ds\", left_index=True)\ntest = test.rename(columns={'yhat':'yhat_benzene_oxide'})\ntest.index = test.pop('ds')","ab28f9e8":"# Prophet for target_carbon_monoxide\ndf = data[['deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1',\n       'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5',\n       'target_carbon_monoxide']]\ndf = df.reset_index(level=0)\ndf.columns = ['ds','deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1',\n       'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5',\n       'y']\np = Prophet(seasonality_mode='additive')\np.fit(df)\nfuture = p.make_future_dataframe(periods=2246, freq='h')\nfuture['floor'] =  0 \nforecast = p.predict(future)\n\n# Add prediction on train data\ndata = data.merge(forecast[['ds','yhat']][:-2246], how=\"inner\", right_on=\"ds\", left_index=True)\ndata = data.rename(columns={'yhat':'yhat_monoxide'})\ndata.index = data.pop('ds')\n\n# Add prediction on test data\ntest = test.merge(forecast[['ds','yhat']][-2246:], how=\"inner\", right_on=\"ds\", left_index=True)\ntest = test.rename(columns={'yhat':'yhat_monoxide'})\ntest.index = test.pop('ds')","c0c4d8a7":"# Prophet for target_nitrogen_oxides\ndf = data[['deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1',\n       'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5',\n       'target_nitrogen_oxides']]\ndf = df.reset_index(level=0)\ndf.columns = ['ds','deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1',\n       'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5',\n       'y']\np = Prophet(seasonality_mode='additive')\np.fit(df)\nfuture = p.make_future_dataframe(periods=2246, freq='h')\nfuture['floor'] =  0 \nforecast = p.predict(future)\n\n# Add prediction on train data\ndata = data.merge(forecast[['ds','yhat']][:-2246], how=\"inner\", right_on=\"ds\", left_index=True)\ndata = data.rename(columns={'yhat':'yhat_nitrogen_oxide'})\ndata.index = data.pop('ds')\n\n# Add prediction on test data\ntest = test.merge(forecast[['ds','yhat']][-2246:], how=\"inner\", right_on=\"ds\", left_index=True)\ntest = test.rename(columns={'yhat':'yhat_nitrogen_oxide'})\ntest.index = test.pop('ds')","8e57827a":"# Make cyclic feature for time\ntimestamp_s = data.index.map(datetime.datetime.timestamp)\ntimestamp_t_s = test.index.map(datetime.datetime.timestamp)\n\nday = 24*60*60\nweek = day * 7\n\n# 1 day\ndata['Day sin'] = np.sin(timestamp_s * (2*np.pi\/day))\ndata['Day cos'] = np.cos(timestamp_s * (2*np.pi\/day))\n\n# 1 week\ndata['Week sin'] = np.sin(timestamp_s * (2*np.pi\/week))\ndata['Week cos'] = np.cos(timestamp_s * (2*np.pi\/week))\n\n\n# 1 day\ntest['Day sin'] = np.sin(timestamp_t_s * (2*np.pi\/day))\ntest['Day cos'] = np.cos(timestamp_t_s * (2*np.pi\/day))\n\n# 1 week\ntest['Week sin'] = np.sin(timestamp_t_s * (2*np.pi\/week))\ntest['Week cos'] = np.cos(timestamp_t_s * (2*np.pi\/week))","4a3827dc":"X = data[['sensor_1','sensor_2','sensor_3','sensor_4','sensor_5','deg_C','relative_humidity','absolute_humidity','Day sin', 'Day cos', 'Week cos','yhat_monoxide']]\ny = data['target_carbon_monoxide']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nparams={'iterations':25000,\n       'learning_rate':0.02,\n       'loss_function':'RMSE',\n       'eval_metric':'RMSE',\n       'verbose':200,\n        'od_type':\"Iter\", #overfit detector\n        'od_wait':200, # most recent best iteration to wait before 500\n       'use_best_model':True}\n\nmodelc = CatBoostRegressor(**params)\nmodelc.fit(X_train, y_train, eval_set=(X_test, y_test),\n         use_best_model=True,\n         plot=True,\n         early_stopping_rounds=100,\n         verbose=False)","3ae7aeca":"shape_values = modelc.get_feature_importance(Pool(X_test, label=y_test),type=\"ShapValues\")\nexpected_value = shape_values[0,-1]\nshape_values = shape_values[:,:-1]\nshap.summary_plot(shape_values, X_test)","a1ab83ff":"X = data[['sensor_1','sensor_2','sensor_3','sensor_4','sensor_5','relative_humidity','absolute_humidity','Day sin', 'Day cos','Week sin','Week cos','yhat_benzene_oxide']]\ny = data['target_benzene']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\nparams={'iterations':20000,\n       'learning_rate':0.01,\n       'loss_function':'RMSE',\n       'eval_metric':'RMSE',\n       'verbose':200,\n        'od_type':\"Iter\", #overfit detector\n        'od_wait':200, # most recent best iteration to wait before 500\n       'use_best_model':True}\n\nmodelb = CatBoostRegressor(**params)\nmodelb.fit(X_train, y_train, eval_set=(X_test, y_test),\n         use_best_model=True,\n         plot=True,\n         early_stopping_rounds=100,\n         verbose=False)","cfec5e24":"shape_values = modelb.get_feature_importance(Pool(X_test, label=y_test),type=\"ShapValues\")\nexpected_value = shape_values[0,-1]\nshape_values = shape_values[:,:-1]\nshap.summary_plot(shape_values, X_test)","d4c317df":"X = data[['sensor_1','sensor_2','sensor_3','sensor_4','sensor_5','deg_C','relative_humidity','absolute_humidity','Day sin', 'Day cos', 'Week cos','yhat_nitrogen_oxide']]\n#X = data[['sensor_2']]\ny = data['target_nitrogen_oxides']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nparams={'iterations':20000,\n       'learning_rate':0.02,\n       'loss_function':'RMSE',\n       'eval_metric':'RMSE',\n       'verbose':200,\n        'od_type':\"Iter\", #overfit detector\n        'od_wait':200, # most recent best iteration to wait before 500\n       'use_best_model':True}\n\n#model = Pipeline([('LR',CatBoostRegressor(**params))])\nmodeln = CatBoostRegressor(**params)\nmodeln.fit(X_train, y_train, eval_set=(X_test, y_test),\n         use_best_model=True,\n         plot=True,\n         early_stopping_rounds=200,\n         verbose=False)","f64d7b42":"shape_values = modeln.get_feature_importance(Pool(X_test, label=y_test),type=\"ShapValues\")\nexpected_value = shape_values[0,-1]\nshape_values = shape_values[:,:-1]\nshap.summary_plot(shape_values, X_test)","90f2807b":"my_submission = pd.DataFrame({'date_time': test.index, 'target_carbon_monoxide': modelc.predict(test), 'target_benzene':modelb.predict(test), 'target_nitrogen_oxides':modeln.predict(test)})","3bb2c04a":"data = data.reset_index().rename(columns = {'ds':'date_time'})\nmy_submission = pd.concat([data[['date_time','target_carbon_monoxide','target_benzene','target_nitrogen_oxides']][-1:],my_submission]).reset_index(drop=True)","ddf26a1e":"my_submission.to_csv('submission.csv', index=False)","6e940794":"Let see timeline plot of features with test data.\nBlue is showing train data and green is test date","b75be8bf":"We can divide target in 3 part basis of pattern.\n1. Before Aug'10\n2. Aug'10\n3. After Aug'10","bdcfd6e1":"Now let's check Autocorrelation","e96aa51b":"Prophet for target_benzene","0077072d":"# **Heat Map**","ae44a4ae":"The Pattern do exist. Yeah!!\n\nI have use Prophet to get trend and seasonlity as feature","735ee315":"> feature sensor_1, sensor_2, sensor_4, sensor_5 have good +ve corelation with all 3 feature\n> feature sensor_3 has good -ve corelation too.\n> This could turnout to very useful feature in model.\n\n> Let try see on scattern plot","368c0657":"# Model","4e88da89":"Using CatBoost Regression","f08389ef":"**The scalloped shape is season and decrease pattern is incidation of trend.**\nWe can see treand at 24(at day) and 174(at week)\n\nLet also see for other 2 targets","3cc863b7":"Prophet for target_nitrogen_oxides","fdb241da":"Prophet for target_carbon_monoxide","25fcd96c":"# EDA"}}