{"cell_type":{"12b27f24":"code","22a33d87":"code","3d8c0e66":"code","166a36e7":"code","9a37f9be":"code","5e250167":"code","82d099f1":"code","1349242a":"code","fc53d720":"code","3f3183e9":"code","ba3b3332":"code","b9d2193e":"code","d57e9889":"code","01861394":"code","43bfe7d5":"code","d475ed47":"code","8a5e9d77":"code","6ac5073d":"code","c166b7f6":"code","de330582":"code","2d5e572c":"code","dd7a77a8":"code","2615ca3a":"code","5521a31a":"code","1c07cf8e":"code","4987df85":"code","a52c0c7c":"code","2f2c1fb6":"code","fb243663":"code","304245e8":"code","cfdee773":"code","8d70569e":"code","c058d789":"code","97ee3d98":"code","e8008fbe":"code","acbc2ea3":"code","5f3ba209":"code","f07de508":"code","3c6a8f6c":"code","7b74ab07":"code","8f15d008":"code","151fd0ac":"code","6ab3ed70":"code","66bf6e9e":"markdown","7cf513e6":"markdown","c3c35513":"markdown","9b8b26f8":"markdown","4adffba8":"markdown","e3f5c144":"markdown","ed1da2a6":"markdown","f582a6df":"markdown","ee4fc2c1":"markdown","b72953fc":"markdown","6a69715e":"markdown","7940fb71":"markdown","7ca5d4e2":"markdown","d47c7e53":"markdown","55a3e0e4":"markdown","b6d09021":"markdown","bdbf0322":"markdown","bb6078b3":"markdown","97fc5264":"markdown","5c1f2890":"markdown","7811fce9":"markdown"},"source":{"12b27f24":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\n# _______________________________\n\nsub961 = pd.read_csv(\"..\/input\/rain961\/RAIN961.csv\") \n\nsub968 = pd.read_csv(\"..\/input\/rainforest-post-process-lb-0-970\/submission_with_pp.csv\") \n","22a33d87":"def generate(main, support, coeff):\n    g1 = main.copy()\n    g2 = main.copy()\n    g3 = main.copy()\n    g4 = main.copy()\n    \n    for i in main.columns[1:]:\n        lm, Is = [], []                \n        lm = main[i].tolist()\n        ls = support[i].tolist() \n        \n        res1, res2, res3, res4 = [], [], [], []          \n        for j in range(len(main)):\n            res1.append(max(lm[j] , ls[j]))\n            res2.append(min(lm[j] , ls[j]))\n            res3.append((lm[j] + ls[j]) \/ 2)\n            res4.append((lm[j] * coeff) + (ls[j] * (1.- coeff)))\n            \n        g1[i] = res1\n        g2[i] = res2\n        g3[i] = res3\n        g4[i] = res4\n        \n    return g1,g2,g3,g4","3d8c0e66":"def generate1(main, support, coeff):\n    \n    g = main.copy()    \n    for i in main.columns[1:]:\n        \n        res = []\n        lm, Is = [], []        \n        lm = main[i].tolist()\n        ls = support[i].tolist()  \n        \n        for j in range(len(main)):\n            res.append((lm[j] * coeff[i]) + (ls[j] * (1.- coeff[i])))            \n        g[i] = res\n        \n    return g","166a36e7":"def drawing(main, support, generated, column_number):\n    \n    X  = main.iloc[:, column_number]\n    Y1 = support.iloc[:, column_number]\n    Y2 = generated.iloc[:, column_number]\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nOn the X axis >>> main\\n\\nOn the Y axis >>> support\\n')           \n    plt.scatter(X, Y1, s=3)\n    plt.show() \n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nOn the X axis >>> main\\n\\nOn the Y axis >>> generated\\n')           \n    plt.scatter(X, Y2, s=3)\n    plt.show()     ","9a37f9be":"def drawing1(main, support, generated, column_number):\n    \n    X  = main.iloc[:, column_number]\n    Y1 = support.iloc[:, column_number]\n    Y2 = generated.iloc[:, column_number]\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nBlue | X axis >> main | Y axis >> support\\n\\nOrange | X axis >> main | Y axis >> generated\\n') \n    \n    plt.scatter(X, Y1, s=3)    \n    plt.scatter(X, Y2, s=3)\n    \n    plt.show()     ","5e250167":"# print(sub968.mean() , sub961.mean())\n\nm1 = sub968.mean() + sub961.mean()\n\nm1mean = m1.mean()\n\nm2 = m1 \/ m1mean\n\nm2","82d099f1":"m3 = m2.copy()\nfor k in range(24):\n    m3[k] = 1.00\n\n# m3    ","1349242a":"m4 = m3.copy()\n\nm4[0]   = 0.00\n\nm4[1]   = 0.00\n\nm4[4]   = 0.00\n\nm4[8]   = 0.00\n\nm4[11]  = 0.00\n\nm4[14]  = 0.00\n\nm4[18]  = 0.00\n\nm4[20]  = 0.00\n\nm4[21]  = 0.00\n","fc53d720":"m4[15]   = 1.30\n\nm4","3f3183e9":"d = generate1(sub968, sub961, m4)","ba3b3332":"sub968.describe()","b9d2193e":"sub961.describe()","d57e9889":"drawing1(sub968, sub961, d, 1)","01861394":"drawing1(sub968, sub961, d, 2)","43bfe7d5":"drawing1(sub968, sub961, d, 3)","d475ed47":"drawing1(sub968, sub961, d, 4)","8a5e9d77":"drawing1(sub968, sub961, d, 5)","6ac5073d":"drawing1(sub968, sub961, d, 6)","c166b7f6":"drawing1(sub968, sub961, d, 7)","de330582":"drawing1(sub968, sub961, d, 8)","2d5e572c":"drawing1(sub968, sub961, d, 9)","dd7a77a8":"drawing1(sub968, sub961, d, 10)","2615ca3a":"drawing1(sub968, sub961, d, 11)","5521a31a":"drawing1(sub968, sub961, d, 12)","1c07cf8e":"drawing1(sub968, sub961, d, 13)","4987df85":"drawing1(sub968, sub961, d, 14)","a52c0c7c":"drawing1(sub968, sub961, d, 15)","2f2c1fb6":"drawing1(sub968, sub961, d, 16)","fb243663":"drawing1(sub968, sub961, d, 17)","304245e8":"drawing1(sub968, sub961, d, 18)","cfdee773":"drawing1(sub968, sub961, d, 19)","8d70569e":"drawing1(sub968, sub961, d, 20)","c058d789":"drawing1(sub968, sub961, d, 21)","97ee3d98":"drawing1(sub968, sub961, d, 22)","e8008fbe":"drawing1(sub968, sub961, d, 23)","acbc2ea3":"drawing1(sub968, sub961, d, 24)","5f3ba209":"d.describe()","f07de508":"# print(d.mean() , sub961.mean())\n\nn1 = d.mean() + sub961.mean()\n\nn1mean = n1.mean()\n\nn2 = n1 \/ n1mean\n\nn2","3c6a8f6c":"n3 = n2.copy()\nfor k in range(24):\n    n3[k] = 0.95\n\n# n3   ","7b74ab07":"n4 = n3.copy()\n\nn4[2]   = 0.80\n\nn4[6]   = 0.80\n\nn4[19]  = 0.70\n\nn4[22]  = 0.80\n\nn4[23]  = 0.80\n\nn4","8f15d008":"e = generate1(d, sub961, n4)","151fd0ac":"e.describe()","6ab3ed70":"sub = e\nsub.to_csv(\"submission.csv\", index=False)\n\nd.to_csv(\"submission1.csv\", index=False)\ne.to_csv(\"submission2.csv\", index=False)\n\n!ls","66bf6e9e":"### - At the end of the challenge, Mr. [@meaninglesslives](https:\/\/www.kaggle.com\/meaninglesslives) shared his notebook. He won third place in the challenge. The score of the notebook published in the first version is \"public score 0.96171 and private score 0.96460\". Thanks for sharing the results, we congratulate him too.\n\nhttps:\/\/www.kaggle.com\/meaninglesslives\/rfcx-minimal?scriptVersionId=54514070\n\n### - Then Mr. [@cdeotte](https:\/\/www.kaggle.com\/cdeotte) released another notebook and with a great trick, raised the previous notebook's private score above 0.970. We also thank him for sharing this trick.\n\nhttps:\/\/www.kaggle.com\/cdeotte\/rainforest-post-process-lb-0-970\n\nhttps:\/\/www.kaggle.com\/c\/rfcx-species-audio-detection\/discussion\/220389\n\n# An important question:\n\n### Does this trick improve all the results (all the columns)?\n\n### No, of course the results of some columns are getting worse.\n\n### This means that the results of some columns get very good and the results of some columns get worse, but in this challenge (and usually) the overall results improve.\n\n### To prove this, we wrote this notebook and share it with you. Our method is very simple. We first identified nine columns, the results of which will be reduced by performing this trick.\n\n### S0, S1, S4, S8, S11, S14, S18, S20, S21\n\n### Then we transferred the results of these columns from the original notebook (the first notebook) and replaced these results exactly with the results of the second notebook, and finally saved the entire result in the \"d\" file. That is, in file \"d\", a trick is applied for the results of 15 columns and no trick is applied for the results of 9 columns. The scores of the \"d\" file are as follows:\n\n### \"d\" : [(Private Score: 0.97915) , (Public Score: 0.97373)]\n\n### As you can see, this trick is not good for the results of these nine columns, and we got a much better score with the results of the original notebook (first version). Please note that in order to be able to compare, we used exactly the results of the first version of the original notebook.\n\n### In the end, we were able to easily improve the results once again with our own method. We saved the final results in the \"e\" file. The scores of the \"e\" file are as follows:\n\n### \"e\" : [(Private Score: 0.98022) , (Public Score: 0.97490)]\n\n","7cf513e6":"<div>\n    <h1 align=\"center\"> Comparative Method - Part(A)<\/h1><\/h1>\n    <h2 align=\"center\">Rainforest Connection Species Audio Detection<\/h2>\n    <h3 align=\"center\">By: Somayyeh Gholami & Mehran Kazeminia<\/h3>\n<\/div>","c3c35513":"<div class=\"alert alert-success\">  \n<\/div>","9b8b26f8":"## Result\n\n## [(Score: 0.968) , (Score: 0.961)] >>> d\n\n## d : [(Private Score: 0.97915) , (Public Score: 0.97373)]","4adffba8":"<div class=\"alert alert-success\">  \n<\/div>","e3f5c144":"<div class=\"alert alert-success\">  \n<\/div>","ed1da2a6":"# Comparative Method\n","f582a6df":"## Result  \n\n## [(Private Score: 0.97892) , (Public Score: 0.97309)]\n","ee4fc2c1":"<div class=\"alert alert-success\">  \n<\/div>","b72953fc":"## Result\n\n## [(Score: 0.973) , (Score: 0.961)] >>> e\n\n## e : [(Private Score: 0.98022) , (Public Score: 0.97490)]","6a69715e":"<div class=\"alert alert-success\">  \n<\/div>","7940fb71":"# Description:","7ca5d4e2":"<div class=\"alert alert-success\">  \n<\/div>","d47c7e53":"## If you find this work useful, please don't forget upvoting :)","55a3e0e4":"## Result \n\n## [(Private Score: 0.97975) , (Public Score: 0.97444)]","b6d09021":"<div class=\"alert alert-success\">  \n<\/div>","bdbf0322":"## Result \n\n## [(Private Score: 0.97915) , (Public Score: 0.97373)]","bb6078b3":"<div class=\"alert alert-success\">  \n<\/div>","97fc5264":"# Import & Data Set","5c1f2890":"# Submission\n","7811fce9":"# Functions"}}