{"cell_type":{"50aeced8":"code","90b0a3dc":"code","f4c92769":"code","44d8434c":"code","4c00bcf7":"code","593b48b3":"code","25e57662":"code","e4f6fcd2":"code","d211e499":"code","6efc27da":"code","181e5980":"markdown","4a7e46a8":"markdown","04b68306":"markdown","24db8d33":"markdown","f0b34583":"markdown"},"source":{"50aeced8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","90b0a3dc":"# csv \ud30c\uc77c\uc744 pandas data DataFrame \uc790\ub8cc\ud615 \ubcc0\uc218\uc5d0 \ub85c\ub4dc\nsample=pd.read_csv('\/kaggle\/input\/2021-ai-w4-p2\/sample.csv')\ntrain=pd.read_csv('\/kaggle\/input\/2021-ai-w4-p2\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/2021-ai-w4-p2\/test.csv')","f4c92769":"# train data\uc5d0\uc11c feature\uc640 label\uc744 \ubd84\ub9ac\ud558\uc5ec \uac00\uacf5\nX_train=train.drop(['label'], axis=1)\nX_test=test\ny_train=train['label']\n\nprint(X_train.shape)\nprint(X_test.shape)","44d8434c":"# ================================================================================================\n# version2\uc5d0 \uc0ac\uc6a9\ud560 encoder table \uc0dd\uc131\ud558\ub294 \ubc95\n# ================================================================================================\nencodertable = {} # encoder table \ubcc0\uc218 \uc120\uc5b8. table\uc740 python dictionary \uc790\ub8cc\ud615\uc744 \uc0ac\uc6a9\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\nreverse_encodertable = {} # \uc5ed\ubcc0\ud658\uc744 \uc704\ud55c table \uc785\ub2c8\ub2e4\nprint(type(y_train)) # pandas\uc758 Series \ud615\uc2dd\uc778 y_train\uc5d0\uc11c\nprint(type(y_train.values)) # label\ub370\uc774\ud130\uc778 values\ub97c \uaebc\ub0b4\uc635\ub2c8\ub2e4. ({Series data}.values)\n# \uc774\ud6c4, y_train\uc758 \uac12\uc5d0\uc11c \uc911\ubcf5\uc744 \uc81c\uac70\ud558\uc5ec \uace0\uc720\ud55c label\uc744 \ud655\uc778\ud569\ub2c8\ub2e4. python list\ub97c set(\uc9d1\ud569) \ud615\uc2dd\uc73c\ub85c \ubc14\uafb8\uc5b4\uc8fc\uba74 \ub429\ub2c8\ub2e4\nprint( '\ud3b8\uc758\ub97c \uc704\ud574\uc11c ',type(set(y_train.values)),'\ud615\uc2dd\uc758 \ub370\uc774\ud130\ub97c \ub2e4\uc2dc ', type(list(set(y_train.values))) , '\ud0c0\uc785\uc73c\ub85c \ubc14\uafb8\uc5b4 \uc90d\ub2c8\ub2e4.' )\nunique_label = list(set(y_train.values))\nfor idx, u_label in enumerate(unique_label): # python built-in \ud568\uc218\uc778 enumerate\ub97c \uc774\uc6a9\ud574 \ucf54\ub4dc\ub97c \uc791\uc131\ud569\ub2c8\ub2e4. \ucc38\uace0 [https:\/\/docs.python.org\/3\/library\/functions.html#enumerate]\n    encodertable[u_label] = idx\n    reverse_encodertable[idx] = u_label\n    \n# encoder table\uc744 \uc644\uc131\ud588\uc2b5\ub2c8\ub2e4\nprint(encodertable)","4c00bcf7":"from sklearn.preprocessing import OrdinalEncoder\nusevserion = 2 # table\uc744 \uc774\uc6a9\ud55c encoder\ub97c \uc0ac\uc6a9\ud558\ub824\uba74 2\ub85c, sklearn\uc758 encoder\ub97c \uc0ac\uc6a9\ud558\ub824\uba74 1\ub85c \uc124\uc815 \ud574\uc8fc\uc138\uc694.\n\nif usevserion == 1:\n    # Version 1 OrdinalEncoder\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.\n    # =======================================================================================================================\n    enc = OrdinalEncoder()  # encoder instance \uc120\uc5b8\n    y_train = enc.fit_transform(np.array(y_train).reshape(-1,1))\n    #\uc774\ud6c4 \ud559\uc2b5\uc744 \uc704\ud55c y_train data shape \ubcc0\ud658\n    y_train = y_train.squeeze()\n    # =======================================================================================================================\nelif usevserion == 2:\n    # Version 2 \uc9c1\uc811 Encoding \uc744 \uc9c4\ud589\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.\n    # =======================================================================================================================\n    new_y_train=[]\n    y_train = y_train.values\n    for y_str in y_train:\n        new_y_train.append(encodertable[y_str])\n    del y_train\n    y_train = np.array(new_y_train)\n    # =======================================================================================================================\n\n","593b48b3":"import torch\nimport torch.optim as optim\n\n# DataFrame \uc790\ub8cc\ud615\uc5d0\uc11c torch \uc790\ub8cc\ud615\uc73c\ub85c \ubcc0\ud658\nx_train = torch.FloatTensor(X_train.values.tolist())\ny_train = torch.LongTensor(y_train)\nx_test =  torch.FloatTensor(X_test.values.tolist())","25e57662":"import torch\nimport torch.optim as optim\nimport torch.nn.functional as F\n\n# \ud559\uc2b5 \ubcc0\uc218 \ucd08\uae30\ud654\nW = torch.zeros((7, 22), requires_grad = True)  # (Nx7) \uc758 \ub370\uc774\ud130\ub97c (Nx22)\ub85c\nb = torch.zeros(22, requires_grad = True)\n# W*X+b\n# \ubcc0\uc218 \ucd5c\uc801\ud654\ub97c \uc704\ud55c \uc54c\uace0\ub9ac\uc998, learning rate = 1\noptimizer = optim.SGD([W,b], lr = 0.001)\n\n\nnp_epochs = 1000\nfor epoch in range(np_epochs + 1):\n    # \uac00\uc124 \ud568\uc218(\ubaa8\ub378). \ub2e4\uc911 \ubd84\ub958 \ubaa8\ub378\uc774\ubbc0\ub85c softmax \ud568\uc218\n    hypothesis = F.softmax(x_train.matmul(W)+b, dim=1)\n    \n    ## cost \ud45c\ud604\ubc88 1\ubc88 \uc608\uc2dc\n    #y_one_hot = torch.zeros(len(y_train), 22)\n    #y_one_hot.scatter_(1, y_train.unsqueeze(1), 1)\n    #cost = (y_one_hot * -torch.log(hypothesis)).sum(dim=1).mean()\n            \n    ##cost \ud45c\ud604\ubc88 2\ubc88 \uc608\uc2dc\n    cost = F.cross_entropy((x_train.matmul(W)+b), y_train)\n\n    # cost\ub85c H(x) \uac1c\uc120\n    optimizer.zero_grad()\n    cost.backward()\n    optimizer.step()\n    \n    # 100\ubc88 \ub9c8\ub2e4 \ub85c\uadf8 \ucd9c\ub825\n    if epoch % 100 == 0:\n        print(\"Epoch {:4d}\/{} Cost:{:.6f}\".format(epoch, np_epochs, cost.item()))\n        \n#1. cost\uac00 \uc218\ub834\ud560\ub54c \uae4c\uc9c0","e4f6fcd2":"# train data\ub85c \ud559\uc2b5\uc774 \ucda9\ubd84\uc774 \uc774\ub8e8\uc5b4\uc84c\ub294\uc9c0 \uac80\uc99d.\nhypothesis = F.softmax(x_train.matmul(W) + b, dim=1)\npredict = torch.argmax(hypothesis, dim=1)\n\ncorrect_prediction = predict.float() == y_train\naccuracy = correct_prediction.sum().item() \/ len(correct_prediction)\nprint(\"The model has an accuracy of {:2.2f}% for the train set.\".format(accuracy * 100))\nprint(\"\ub9de\uc740 \uc608\uce21 \uac1c\uc218 ({}) \/ \uc804\uccb4 \uc694\uc18c \uac1c\uc218 ({})\".format(correct_prediction.sum().item(), len(correct_prediction)))","d211e499":"# \uc81c\ucd9c\uc744 \uc704\ud55c test data \uc608\uce21 \nhypothesis = F.softmax(x_test.matmul(W) + b, dim=1)\npredict = torch.argmax(hypothesis, dim=1)\n\nif usevserion == 1:\n    # Version 1 OrdinalEncoder\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.\n    # =======================================================================================================================\n    predict = enc.inverse_transform(predict.reshape(-1,1))\n    # =======================================================================================================================\nelif usevserion == 2:\n    # Version 2 \uc9c1\uc811 Encoding \uc744 \uc9c4\ud589\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.\n    # =======================================================================================================================\n    new_predict = []\n    for q in predict:\n        new_predict.append(reverse_encodertable[q.item()])\n    del predict\n    predict = new_predict\n    # =======================================================================================================================\n\nsample['label'] = predict","6efc27da":"sample.to_csv('sumbit.csv', index = False)","181e5980":"predict \uacb0\uacfc\ub97c \uc5ed \ubcc0\ud658\ud558\ub294 \ubd80\ubd84\uc785\ub2c8\ub2e4","4a7e46a8":"# \ubaa8\ub378 \ud559\uc2b5","04b68306":"# Label Encoder\n\n\uc800\ud76c\uac00 \uc0ac\uc6a9\ud560 \uc120\ud615\ubd84\ub958\ubaa8\ub378\uc740 Loss\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574 label\uc744 string\uc774 \uc544\ub2cc \uc5f0\uc0b0 \uac00\ub2a5\ud55c \ud615\ud0dc(int, float)\ub85c \ubcc0\ud658\ud574\uc8fc\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n\ubcc0\ud658\uc744 \uc704\ud574 \uae30\uacc4\ud559\uc2b5 \uc2dc\uac04\uc5d0 \ubc30\uc6b4 sklearn \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 preprocessing\uc758 Encoder\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uadf8 \uc678\uc5d0\ub3c4 \uc804\ucc98\ub9ac\uc2dc\uc5d0 sklearn\uc758 \ub2e4\uc591\ud55c preprocessing \ubaa8\ub4c8\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc73c\ub2c8 [sklearn](https:\/\/scikit-learn.org\/stable\/modules\/classes.html#module-sklearn.preprocessing) \uacf5\uc2dd \ud398\uc774\uc9c0\ub97c \ucc38\uc870\ud558\uc138\uc694.\n\n\uadf8 \uc678\uc5d0\ub3c4 \uc9c1\uc811 label encoding\uc744 \uc9c4\ud589\ud558\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nVersion 2\uc5d0\uc11c Table \ud615\uc2dd\uc73c\ub85c label encoder\ub97c \uad6c\ud604\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. ","24db8d33":"# \ubaa8\ub378 \ud3c9\uac00","f0b34583":"# \ub370\uc774\ud130 \ub85c\ub4dc"}}