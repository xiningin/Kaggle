{"cell_type":{"56dabeb9":"code","3900c37d":"code","59f56a25":"code","b24f2a3d":"code","410174d4":"code","f2a7abc8":"code","c2848d64":"code","34ad40a2":"code","d07c52f6":"code","c5eff578":"code","cab0ff50":"code","b97f83e7":"code","2a0252dc":"code","2403a393":"code","ae0e7b3d":"code","9630a163":"code","d3f409ce":"code","327cf3a8":"code","6e458f82":"code","0320b928":"code","b3e86d8c":"code","743d6c14":"code","e6a0d332":"code","96d9835e":"code","b4b4c798":"code","56efad71":"code","ac3a2c87":"code","9cc97c65":"code","2a319766":"code","e9f03161":"code","ca164594":"markdown","ab5a47d7":"markdown","5ba41a41":"markdown","9dfb3b5f":"markdown","57fd6554":"markdown","649168f3":"markdown","4d36c0ff":"markdown","22681767":"markdown","6d8640df":"markdown","04089d84":"markdown","61574897":"markdown","4fa0cac5":"markdown","2dcdd99e":"markdown","8379d143":"markdown","53f432bd":"markdown"},"source":{"56dabeb9":"dataPath = '..\/input\/differentcars'","3900c37d":"# Import Libraries\nimport tensorflow as tf\nimport tensorflow.keras as keras\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.applications.mobilenet import preprocess_input, decode_predictions\nfrom tensorflow.keras.applications.mobilenet_v2 import MobileNetV2\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Dense\nfrom sklearn.metrics import classification_report, confusion_matrix","59f56a25":"import numpy as np\nimport cv2\nimport glob\nimport random\n\nfrom IPython.display import Image\nimport matplotlib.pyplot as plt","b24f2a3d":"TargetSize = (224,224) \ndef prepare_image(filepath):\n    img = cv2.imread(filepath)\n    img_resized = cv2.resize(img, TargetSize, interpolation=cv2.INTER_CUBIC)\n    img_result  = cv2.cvtColor(img_resized, cv2.COLOR_BGR2RGB)\n    return img_result","410174d4":"dirList = glob.glob(dataPath+'\/*') # list of all directories in dataPath\ndirList.sort() # sorted in alphabetical order\nprint(dirList)","f2a7abc8":"Y_data = []\nfor i in range(len(dirList)):\n    fileList = glob.glob(dirList[i]+'\/*')\n    [Y_data.append(i) for file in fileList]\nprint(Y_data)","c2848d64":"X_data = []\nfor i in range(len(dirList)):\n    fileList = glob.glob(dirList[i]+'\/*')\n    [X_data.append(prepare_image(file)) for file in fileList]\nX_data = np.asarray(X_data)\nprint(X_data.shape)","34ad40a2":"## random shuffle\nfrom sklearn.utils import shuffle\nX_data, Y_data = shuffle(X_data, Y_data, random_state=0)","d07c52f6":"print(Y_data)","c5eff578":"testNum = random.randint(0,len(X_data))\nprint(testNum)\nplt.imshow(X_data[testNum])","cab0ff50":"num_classes = len(dirList) \nlabels = [dir.replace(dataPath+\"\/\", \"\") for dir in dirList]\nprint(labels)","b97f83e7":"equilibre = []\n[equilibre.append(Y_data.count(i)) for i in range(len(dirList))]\nprint(equilibre)","2a0252dc":"# plot the circle of value counts in dataset\nplt.figure(figsize=(5,5))\nmy_circle=plt.Circle( (0,0), 0.5, color='white')\nplt.pie(equilibre, labels=labels, colors=['red','green','blue'],autopct='%1.1f%%')\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","2403a393":"# Data Normalisation\nX_train = X_data \/ 255.0\nprint(X_train.shape)","ae0e7b3d":"# One-hot encoding\nY_train = to_categorical(Y_data)\nprint(Y_train.shape)","9630a163":"input_shape = (224, 224, 3)","d3f409ce":"# use MobieNet V2 as base model\nbase_model=MobileNetV2(input_shape=(224,224,3),weights='imagenet',include_top=False) \n\n# add Fully-Connected Layers to Model\nx=base_model.output\nx=GlobalAveragePooling2D()(x)\nx=Dense(1024,activation='relu')(x) # FC layer 1\nx=Dense(64,activation='relu')(x)   # FC layer 2\npreds=Dense(num_classes,activation='softmax')(x) #final layer with softmax activation\n\nmodel=Model(inputs=base_model.input,outputs=preds)\nmodel.summary()","327cf3a8":"# Check layers no. & name\nfor i,layer in enumerate(model.layers):\n    print(i,layer.name)","6e458f82":"# set extra layers to trainable \nfor layer in model.layers[:155]:\n    layer.trainable=False\nfor layer in model.layers[155:]:\n    layer.trainable=True","0320b928":"# Compile Model\nmodel.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])","b3e86d8c":"# Train Model (target is loss <0.01)\nbatch_size= 16\nnum_epochs = 10\nhistory = model.fit(X_train,Y_train,batch_size=batch_size,epochs=num_epochs)","743d6c14":"# Save Model\nmodel.save('tl_animes.h5')","e6a0d332":"def classify_worms(imageFile):\n    testData = prepare_image(imageFile).reshape(1,224,224,3)\n    testData = testData \/ 255.0\n    predictions = model.predict(testData)\n#    print(predictions[0])\n    maxindex = int(np.argmax(predictions))\n    print(predictions[0][maxindex],labels[maxindex])\n    return labels[maxindex]","96d9835e":"imageFile=dirList[0]+'\/01.jpg'\nplt.imshow(prepare_image(imageFile))\nclassify_worms(imageFile)","b4b4c798":"imageFile=dirList[1]+'\/01.jpg'\nplt.imshow(prepare_image(imageFile))\nclassify_worms(imageFile)","56efad71":"imageFile=dirList[2]+'\/01.jpg'\nplt.imshow(prepare_image(imageFile))\nclassify_worms(imageFile)","ac3a2c87":"Y_pred = model.predict(X_train)\ny_pred = np.argmax(Y_pred,axis=1)\n#y_label= [labels[k] for k in y_pred]\ncm = confusion_matrix(Y_data, y_pred)\nprint(cm)","9cc97c65":"import itertools\ndef plot_confusion_matrix(cm,\n                          target_names,\n                          title='Confusion matrix',\n                          cmap=None,\n                          normalize=True):\n    accuracy = np.trace(cm) \/ float(np.sum(cm))\n    misclass = 1 - accuracy\n\n    if cmap is None:\n        cmap = plt.get_cmap('Blues')\n\n    plt.figure(figsize=(8, 6))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n\n    if target_names is not None:\n        tick_marks = np.arange(len(target_names))\n        plt.xticks(tick_marks, target_names, rotation=45)\n        plt.yticks(tick_marks, target_names)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n    thresh = cm.max() \/ 1.5 if normalize else cm.max() \/ 2\n        \n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        if normalize:\n            plt.text(j, i, \"{:0.4f}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n        else:\n            plt.text(j, i, \"{:,}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))\n    plt.show()","2a319766":"plot_confusion_matrix(cm, \n                      normalize=False,\n                      target_names = labels,\n                      title=\"Confusion Matrix, not Normalized\")","e9f03161":"print(classification_report(Y_data, y_pred, target_names=labels))","ca164594":"## Plot Confusion Matrix","ab5a47d7":"### check 1 picture per category","5ba41a41":"# Car Classification\n## Transfer Learning : Mobilenet V2","9dfb3b5f":"* Accuracy  = TP+TN \/ TP+FP+FN+TN\n* Precision = TP \/ TP+FP\n* Recall    = TP \/ TP+FN","57fd6554":"### shuffle data","649168f3":"## Load MobileNet v2 model & add FC-layers","4d36c0ff":"## Dataset = cars (toyota, bmw, tesla)","22681767":"### show all layers (no. & name)","6d8640df":"## Prepare Data","04089d84":"## Weighted Average Recall\n![image.png](attachment:image.png)\n* TP : True  Positive\n* FP : False Positive\n* TN : True  Negative\n* FN : False Negative","61574897":"## Test Model","4fa0cac5":"## Save Model","2dcdd99e":"## Data Normalisation","8379d143":"### check entire dataset","53f432bd":"### set FC-layers to trainable"}}