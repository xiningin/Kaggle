{"cell_type":{"e7fe5838":"code","2ee01209":"code","08d38b44":"code","2c75d671":"code","c7f15cda":"code","2186ac26":"code","be26a6b4":"code","4b5c43e9":"code","b42a857a":"code","6a37ac6f":"code","87fb4b05":"code","6c869ab1":"code","8ed564e2":"code","d078d4f2":"code","a10e3d88":"code","8a0c6ccb":"code","d52c3c2c":"code","40aefb51":"code","1016af37":"code","d867e33e":"code","ed4acd30":"code","4c892de0":"code","925c6fc6":"code","d50dcaf3":"code","f9d39513":"code","352b917f":"code","7a3e0d40":"code","50f995a0":"code","f7ee6187":"code","5c31d137":"code","abe36d7d":"code","0b6d2fb1":"code","17b20d4a":"code","0d60f418":"code","da1eadd9":"code","b81d03fc":"code","0e164b0b":"code","f766d6f1":"code","ea3bfd24":"code","b1a97cc5":"code","5dd70d92":"code","21f4ba10":"code","7d7af403":"code","bfb44773":"code","24a217ae":"code","251261a7":"code","3c060105":"code","f4b96bb1":"code","b042ffcc":"code","f4ed7a0d":"code","41d32af0":"code","2aa27f12":"code","0bee716f":"code","e70c1b86":"code","e35326f9":"code","f5d97c46":"code","db91f3c1":"code","a3e6d516":"code","acfb4186":"code","cfbc216b":"code","1e0ff8bc":"code","b202676b":"code","05d7b972":"code","362ffdcb":"code","3eb91465":"code","183ab281":"code","775ebe82":"code","c49f26b6":"code","64603237":"code","98bd3836":"code","9665165e":"code","c4450094":"code","464b9edd":"code","b155d995":"code","30dbea5e":"code","35db0ca1":"code","78b61bcb":"code","1da18b27":"code","72143f35":"code","cf0f8600":"code","88e23036":"code","32d89031":"code","4ffc15c5":"code","1df87939":"code","77b9cba2":"code","98286cc4":"code","b97f591a":"code","9cb5db85":"code","3afe457c":"code","312d3f98":"markdown","5bee8bd1":"markdown","eedb0321":"markdown","15010bec":"markdown","9b97d22d":"markdown","1135ceb6":"markdown","98f46f23":"markdown","0396f908":"markdown","885ed794":"markdown","bdeeadea":"markdown","a52087f1":"markdown","414087f1":"markdown","b785c8a8":"markdown","2dafd065":"markdown","36bed2b4":"markdown","5931620e":"markdown","8426140d":"markdown","ecd7e4a8":"markdown","81ef692b":"markdown","ecb0ba64":"markdown","d084225a":"markdown","e305de0f":"markdown","32f14ad4":"markdown","e02f32ee":"markdown","29b549bd":"markdown","92821d9f":"markdown","9654d799":"markdown","50a8b759":"markdown","36573399":"markdown","28e53ec2":"markdown","30df8f48":"markdown","6b0182c5":"markdown","d72d4e1c":"markdown","2e44d8b2":"markdown","e9a5439c":"markdown","2227f56d":"markdown","6b214916":"markdown","3603b1aa":"markdown","776619e0":"markdown","4cef9148":"markdown","f12541a0":"markdown","91c9b65a":"markdown","2d3ba998":"markdown","27f85c54":"markdown","05802642":"markdown","f52e13e1":"markdown","3ba38e20":"markdown"},"source":{"e7fe5838":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\") # plt.style.available => if you write this you can see the other styles\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2ee01209":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_passengerId = test_df[\"PassengerId\"]","08d38b44":"train_df.columns","2c75d671":"train_df.head()","c7f15cda":"train_df.describe()","2186ac26":"train_df.info()","be26a6b4":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: barplot & value count\n        \n    \"\"\"\n    # get features\n    var = train_df[variable]\n    # count number of categoricalvariable (value\/sample)\n    varValue = var.value_counts()\n    # visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{} \\n{}\".format(variable, varValue))","4b5c43e9":"categorical1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in categorical1:\n    bar_plot(c)","b42a857a":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))","6a37ac6f":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","87fb4b05":"# Pcalss vs Survived\ntrain_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)","6c869ab1":"# Sex vs Survived\ntrain_df[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)","8ed564e2":"# SibSp vs Survived\ntrain_df[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)","d078d4f2":"# Parch vs Survived\ntrain_df[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)","a10e3d88":"# Embarked vs Survived\ntrain_df[[\"Embarked\",\"Survived\"]].groupby([\"Embarked\"], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)","8a0c6ccb":"train_df.head()","d52c3c2c":"def detect_outliers(df, features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col =  df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    #print(outlier_indices)\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","40aefb51":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","1016af37":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df, [\"Age\",\"SibSp\",\"Parch\",\"Fare\"]), axis=0,).reset_index(drop=True)","d867e33e":"train_df = pd.concat([train_df, test_df], axis = 0).reset_index(drop=True)","ed4acd30":"train_df.head()","4c892de0":"train_df.columns[train_df.isnull().any()]","925c6fc6":"train_df.isnull().sum()","d50dcaf3":"train_df[train_df[\"Embarked\"].isnull()]","f9d39513":"train_df.boxplot(column=\"Fare\", by=\"Embarked\")\nplt.show()","352b917f":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","7a3e0d40":"train_df[train_df[\"Fare\"].isnull()]","50f995a0":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))\ntrain_df[train_df[\"Fare\"].isnull()]","f7ee6187":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot=True, fmt=\".2f\")","5c31d137":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data=train_df, kind=\"bar\", size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","abe36d7d":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data=train_df, size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","0b6d2fb1":"g = sns.factorplot(x=\"Pclass\", y=\"Survived\", kind=\"bar\", data=train_df, size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","17b20d4a":"g = sns.FacetGrid(train_df, col=\"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","0d60f418":"g = sns.FacetGrid(train_df, col=\"Survived\", row=\"Pclass\", size=2)\ng.map(plt.hist, \"Age\", bins=25)\ng.add_legend()\nplt.show()","da1eadd9":"g = sns.FacetGrid(train_df, row=\"Embarked\", size=2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","b81d03fc":"g = sns.FacetGrid(train_df, row=\"Embarked\", col=\"Survived\", size=2.3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","0e164b0b":"train_df[train_df[\"Age\"].isnull()]","f766d6f1":"sns.factorplot(x=\"Sex\", y=\"Age\", kind=\"box\", data=train_df)\nplt.show()","ea3bfd24":"sns.factorplot(x=\"Sex\", y=\"Age\", hue=\"Pclass\", kind=\"box\", data=train_df)\nplt.show()","b1a97cc5":"sns.factorplot(x=\"Parch\", y=\"Age\", kind=\"box\", data=train_df)\nsns.factorplot(x=\"SibSp\", y=\"Age\", kind=\"box\", data=train_df)\nplt.show()","5dd70d92":"train_df[\"Sex\"] = [1 if i ==\"male\" else 0 for i in train_df[\"Sex\"]]","21f4ba10":"sns.heatmap(train_df[[\"Age\", \"Sex\", \"SibSp\", \"Parch\", \"Pclass\"]].corr(), annot=True)\nplt.show()","7d7af403":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","bfb44773":"train_df[train_df[\"Age\"].isnull()]","24a217ae":"age_pred","251261a7":"train_df[\"Name\"].head(10)","3c060105":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","f4b96bb1":"train_df[\"Title\"].head(10)","b042ffcc":"# convert to catogorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\", \"the Contes\", \"Capt\", \"Col\", \"Don\", \"Dr\", \"Major\", \"Rev\", \"Sir\", \"Jonkheer\", \"Dona\"], \"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","f4ed7a0d":"sns.countplot(x=\"Title\", data=train_df)\nplt.xticks(rotation = 60)\nplt.show()","41d32af0":"g = sns.factorplot(x=\"Title\", y=\"Survived\", data=train_df, kind=\"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","2aa27f12":"train_df.drop(labels=[\"Name\"], axis=1, inplace=True)","0bee716f":"train_df.head()","e70c1b86":"#train_df = pd.get_dummies(train_df, columns=[\"Title\"])\ntrain_df.head()","e35326f9":"train_df.head()","f5d97c46":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","db91f3c1":"train_df.head()","a3e6d516":"g = sns.factorplot(x=\"Fsize\", y=\"Survived\", data=train_df, kind=\"bar\")\ng.set_ylabels(\"Survived\")\nplt.show()","acfb4186":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","cfbc216b":"train_df.head(10)","1e0ff8bc":"sns.countplot(x=\"family_size\", data=train_df)\nplt.show()","b202676b":"g = sns.factorplot(x=\"family_size\", y=\"Survived\", data=train_df, kind=\"bar\")\ng.set_ylabels(\"Surtvival\")\nplt.show()","05d7b972":"#train_df = pd.get_dummies(data=train_df, columns=[\"family_size\"])\ntrain_df.head()","362ffdcb":"train_df[\"Embarked\"].head()","3eb91465":"sns.countplot(x=\"Embarked\", data=train_df)\nplt.show()","183ab281":"#train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\nl = []\nfor i in train_df[\"Embarked\"]:\n    if i == \"S\":\n        l.append(0)\n    elif i == \"C\":\n        l.append(1)\n    else:\n        l.append(2)\ntrain_df[\"Embarked\"] = l\ntrain_df.head()","775ebe82":"train_df[\"Ticket\"].head(15)","c49f26b6":"tickets=[]\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\" \").replace(\"\/\", \" \").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","64603237":"train_df[\"Ticket\"].head(15)","98bd3836":"train_df.head()","9665165e":"sns.countplot(x=\"Ticket\", data= train_df)\nplt.xticks(rotation=60)\nplt.show()","c4450094":"train_df = pd.get_dummies(train_df, columns=[\"Ticket\"], prefix=\"T\")\ntrain_df.head(10)","464b9edd":"sns.countplot(x=\"Pclass\", data=train_df)\nplt.show()","b155d995":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\n#train_df = pd.get_dummies(data=train_df, columns=[\"Pclass\"])\ntrain_df.head()","30dbea5e":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\n#train_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","35db0ca1":"train_df.drop(labels=[\"PassengerId\", \"Cabin\"], axis=1, inplace=True)","78b61bcb":"train_df.columns","1da18b27":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","72143f35":"train_df_len = train_df[\"Survived\"][train_df[\"Survived\"]!= \"NaN\"].count()","cf0f8600":"train_df_len","88e23036":"test = train_df[train_df_len:]\ntest.drop(labels=[\"Survived\"], axis=1, inplace=True)","32d89031":"test.head()","4ffc15c5":"train = train_df[:train_df_len]\nx_train = train.drop(labels=[\"Survived\"], axis=1)\ny_train = train[\"Survived\"]\nx_train, x_test, y_train, y_test = train_test_split(x_train, y_train, test_size=0.33, random_state=42)\nprint(\"x_train len: \",len(x_train))\nprint(\"x_test len: \",len(x_test))\nprint(\"y_train len: \",len(y_train))\nprint(\"y_test len: \",len(y_test))\nprint(\"test: \", len(test))","1df87939":"logreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\nacc_log_train = round(logreg.score(x_train,y_train)*100,2)\nacc_log_test = round(logreg.score(x_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","77b9cba2":"random_state=42\nclassifier=[DecisionTreeClassifier(random_state=random_state),\n           SVC(random_state = random_state),\n           RandomForestClassifier(random_state=random_state),\n           LogisticRegression(random_state=random_state),\n           KNeighborsClassifier()]\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                 \"max_depth\" : range(1,20,2)}\n\nsvc_param_grid = {\"kernel\":[\"rbf\"],\n                  \"gamma\":[0.001, 0.01, 0.1, 1],\n                  \"C\":[1,10,50,100,200,300,1000]}\nrf_param_grid = {\"max_features\":[1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\":[\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\":np.linspace(1,19,10, dtype=int).tolist(),\n                 \"weights\":[\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\", \"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","98286cc4":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid = classifier_param[i], cv = StratifiedKFold(n_splits=10), scoring=\"accuracy\", n_jobs=-1, verbose=1)\n    clf.fit(x_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","b97f591a":"print(cv_result)\ncv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\", \"RandomForestClassifier\",\"LogisticRegression\", \"KNeighborsClassifier\"]})\n\ng = sns.barplot(x=\"Cross Validation Means\", y=\"ML Models\", data=cv_results)\ng.set_xlabel(\"Means Accuracy\")\ng.set_title(\"Cross Validation Scores\")\nplt.show()","9cb5db85":"votingC = VotingClassifier(estimators=[(\"dt\",best_estimators[0]),\n                                      (\"rf\",best_estimators[2]),\n                                      (\"lr\",best_estimators[3])],\n                                      voting=\"soft\", n_jobs=-1)\nvotingC = votingC.fit(x_train,y_train)\nprint(accuracy_score(votingC.predict(x_test),y_test))","3afe457c":"test_survived = pd.Series(votingC.predict(test), name=\"Survived\").astype(int)\nresults = pd.concat([test_passengerId, test_survived], axis=1)\nresults.to_csv(\"titanic.csv\", index = False)","312d3f98":"* age <= 10 has a high survival rate.\n* oldest passengers (80) survived.\n* large number of 20 years old did not survive.\n* most passengers are in 15-35 age range.\n* use age feature in training\n* use age distribution for missing value of age","5bee8bd1":"<a id = \"1\" ><\/a><br>\n# Load and Check Data","eedb0321":"* Passengers who pay higher fare have better survival. Fare can be used as categorical for training.","15010bec":"<a id=\"24\"><\/a><br>\n## Embarked","9b97d22d":"<a id=\"29\"><\/a><br>\n# Modelling","1135ceb6":"<a id=\"8\"><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","98f46f23":"<a id=\"14\"><\/a><br>\n# Parch -- Survived","0396f908":"Age is not corelated with sex but it is corelated with parch, sibsp, pclass","885ed794":"* having a lot of SibSp have lass chance to survive.\n* if SibSp == 0 or 1 or 2, passenger has more chance to survive.\n* we can consider a new feature describeing these categories","bdeeadea":"<a id=\"18\"><\/a><br>\n## Embarked -- Sex -- Pclass -- Survived","a52087f1":"<a id=\"21\"><\/a><br>\n# Feature Engineering","414087f1":"<a id=\"32\"><\/a><br>\n## Hyperparameter Tuning -- Griid Search -- Cross Validation\nWe will compare 5 ml classifier and evaluate mean accuracy of each of them by straitified cross validation.\n\n* Decision Tree\n* SVB\n* Random Forest\n* KNN\n* Logistic Regression","b785c8a8":"* Female passenger have much better survival rate than males.\n* Male have better survival rate in pclass 3 in C.","2dafd065":"<a id=\"23\"><\/a><br>\n## Family Size","36bed2b4":"<a id=\"13\"><\/a><br>\n## SibSp -- Survived","5931620e":"# Introduction\nThe sinking of the Titanic is one of the most notorious shipwreck in the history. In 1912, during her voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew.\n\n<font color = \"lightblue\">\n    Content :\n    \n1. [Load and Check Data](#1)\n1. [Variable Describtion](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable:](#4)\n        * [Numerical Variable:](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualizationa](#11)\n    * [Corelation Between SibSp -- Parch -- Age -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n1. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop PassengerId and Cabin](#28)\n1. [Modelling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistid Regression](#31)\n    * [Hyperparameter Tuning -- Griid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","8426140d":"<a id=\"17\"><\/a><br>\n## Pclass -- Survived -- Age","ecd7e4a8":"<a id = \"4\"><\/a><br>\n## Catagorical Variable","81ef692b":"<a id=\"33\"><\/a><br>\n## Ensemble Modeling","ecb0ba64":"<a id=\"19\"><\/a><br>\n## Embarked -- Sex -- Fare -- Survived","d084225a":"<a id=\"28\"><\/a><br>\n## Drop PassengerId and Cabin","e305de0f":"<a id=\"30\"><\/a><br>\n## Train - Test Split","32f14ad4":"Small families has more cahnce to survive than larger families.","e02f32ee":"<a id=\"9\"><\/a><br>\n## Find Missing Value","29b549bd":"<a id=\"20\"><\/a><br>\n## Fill Missing: Age Feature","92821d9f":"* float64(2) : Fare and Age\n* int64(5) : Pclass, Sibsp, Parch, PassengerId, and Survived\n* object(5) : Cabin, Embarked, Ticket, Name and Sex","9654d799":"1st class passengers are older than 2nd, and 2nd is older than 3rd class.","50a8b759":"Fare feature seems to have corelation with survived feature (0.26).","36573399":"* Pclass is important feature for model training.","28e53ec2":"<a id=\"12\"><\/a><br>\n## Corelation Between SibSp -- Parch -- Age -- Survived","30df8f48":"Sex is not informative for Age prediction, age distibution seems to be same.","6b0182c5":"<a id = \"7\"><\/a><br>\n# Outlier Detection","d72d4e1c":"<a id=\"16\"><\/a><br>\n## Age -- Survived","2e44d8b2":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* Sibsp - Survived\n* Parch - Survived\n* Embarked vs Survived","e9a5439c":"<a id=\"10\"><\/a><br>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","2227f56d":"<a id=\"31\"><\/a><br>\n## Simple Logistid Regression","6b214916":"<a id=\"15\"><\/a><br>\n## Pclass -- Survived","3603b1aa":"<a id=\"34\"><\/a><br>\n## Prediction and Submission","776619e0":"<a id=\"22\"><\/a><br>\n## Name -- Title","4cef9148":"<a id =\"2\"><\/a><br>\n# Variable Describtion\n\n1. Passenger Id:  unic \u0131dentify number to each passenger\n1. Survived:  passenger survived(1) or died(0)\n1. Pclass:  passenger class\n1. Name:  name\n1. Sex :  gender of passengers\n1. Age:  age of passengers\n1. SibSp:  number of siblings\/spouses\n1. Parch:  number of parrents\/childre\n1. Ticket:  ticket number\n1. Fare:  amount of money spent on ticket\n1. Cabin:  cabin category\n1. Embarked:  port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)","f12541a0":"<a id=\"26\"><\/a><br>\n## Pclass","91c9b65a":"<a id=\"25\"><\/a><br>\n## Ticket","2d3ba998":"<a id=\"27\"><\/a><br>\n## Sex","27f85c54":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable\n* Numerical Variable","05802642":"<a id = \"5\"><\/a><br>\n## Numerical Variable","f52e13e1":"* SibSp and Parch can be used for new feature extraction with th = 3\n* small families have more chance to survive.\n* there is a std in survival of passenger with parch = 3","3ba38e20":"<a id=\"11\"><\/a><br>\n# Visualization"}}