{"cell_type":{"a2af2fba":"code","6f9c8f09":"code","d5359ebf":"code","10385c82":"code","c41167a9":"code","af7a9543":"code","6a796f0d":"code","1e8477aa":"code","ac4f645e":"code","df844e21":"code","e95dd504":"code","20aa2240":"code","e0845102":"code","5cb24c35":"code","aa1f3b1d":"code","41d53142":"code","380cbaac":"code","7796978b":"code","cd2dd416":"code","6a605445":"code","c2fa77b6":"markdown","12e5f40f":"markdown","3b154a33":"markdown","8fd32e31":"markdown","9f909a45":"markdown"},"source":{"a2af2fba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #MATLAB\nfrom tqdm.notebook import tqdm \nimport cv2\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6f9c8f09":"import plotly.graph_objs as go\nfrom plotly.offline import iplot\ndef plot(x,y,type='scatter',title=\"title\",xlabel=\"x\",ylabel=\"y\"):\n    if type=='scatter':\n        data = go.Scatter(x=x, y=y)\n    elif type=='bar':\n        data = go.Bar(x=x, y=y)\n        \n        layout = go.Layout(title=title, xaxis=dict(title=xlabel), yaxis=dict(title=ylabel))\n        fig = go.Figure(data=[data], layout=layout)\n        iplot(fig)","d5359ebf":"import tarfile\n\n#tarfile, which is the library to handle the tar files\n#here the trained files are compressed ,So we need to extracted specific path for that,\n\n\ndef extract(tarfile_name,path):\n    open_tar=tarfile.open(tarfile_name)\n    \n    if tarfile.is_tarfile(tarfile_name):\n        open_tar.extractall(path)\n        \n    else:\n        print(\"the file is not supported\")\n        \n#extract data\n\nextract(\"\/kaggle\/input\/facial-expression-recognition-challenge\/fer2013.tar\",\".\")","10385c82":"#read metadata\nmeta_df = pd.read_csv('.\/fer2013\/fer2013.csv')\n\n","c41167a9":"meta_df","af7a9543":"emotions = ['Angry', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']\n","6a796f0d":"meta_df = meta_df.rename(columns={\"emotion\":\"label\",\"pixels\":\"image\"})\n","1e8477aa":"meta_df['emotion'] = meta_df['label'].apply(lambda x: emotions[int(x)])\n","ac4f645e":"meta_df","df844e21":"meta_df.drop(columns=['Usage'],inplace=True)","e95dd504":"meta_df","20aa2240":"# Check data\nid = 12\nimage = np.reshape(np.array(meta_df.image[id].split()).astype(int),(48,48))\nplt.imshow(image)\nprint(meta_df.emotion[id])","e0845102":"plot(x=meta_df.emotion.unique().tolist(),\ny=meta_df.groupby('emotion').count().label.tolist(),\ntype='bar',\ntitle='Emotion Distribution',\nxlabel='Emotions',\nylabel='Count')","5cb24c35":"meta_df","aa1f3b1d":"# Find the average of all emotions counts","41d53142":"m = meta_df.groupby('label').count().mean().values[0]\nprint(\"Mean of all emotion counts: \" + str(m))","380cbaac":"oversampled = pd.DataFrame()\nfor emotion in emotions:\n    print('\\n' + emotion)\n    l = len(meta_df[meta_df.emotion==emotion])\n    print('Before sampling: ' + str(l))\n    \n    if (l>=m):\n        dft = meta_df[meta_df.emotion==emotion].sample(int(m))\n        oversampled = oversampled.append(dft)\n        print('Ater sampling: ' + str(len(dft)))\n    else:\n        frac = int(m\/l)\n        dft = pd.DataFrame()\n        for i in range(frac+1):\n            dft = dft.append(meta_df[meta_df.emotion==emotion])\n        dft = dft[dft.emotion==emotion].sample(int(m))\n        oversampled = oversampled.append(dft)\n        print('Ater sampling: ' + str(len(dft)))\n        \noversampled = oversampled.sample(frac=1).reset_index().drop(columns=['index'])","7796978b":"plot(x=oversampled.emotion.unique().tolist(),\n     y=oversampled.groupby('emotion').count().label.tolist(), \n     type='bar',\n     title='Emotion Distribution',\n     xlabel='Emotions',\n     ylabel='Count')","cd2dd416":"## Export process Data","6a605445":"oversampled.to_csv('metadata_processed.csv', index=False)","c2fa77b6":"## Plotly","12e5f40f":"## Process Metadata","3b154a33":"## DATA I\/O","8fd32e31":"## oversample","9f909a45":"## vislualize Emotions Distribution"}}