{"cell_type":{"16d754d1":"code","f832b626":"code","1a046f9c":"code","eaff981e":"code","afa6c478":"code","5f88beee":"code","942f5378":"code","36553511":"code","3735729c":"code","987354aa":"code","0260acb7":"code","344b7833":"code","df313eb4":"code","36bca108":"code","d92ab934":"code","9c73d618":"code","ac115d50":"code","50aea50a":"code","692091c8":"code","b7ad96ed":"code","014a4882":"code","2133539f":"code","f49a6e16":"code","f7e4644d":"code","2496c5aa":"code","d5ebaa7d":"code","c3bbd88d":"code","1bcf76c8":"code","05fd59ee":"code","a2290fc4":"code","d24f4d53":"code","3184df51":"code","869925ef":"code","9d9d3bac":"code","d3f1c15d":"code","c974751b":"code","974f5a7d":"code","c92deed4":"code","715c7310":"code","29c84620":"code","8813bf20":"code","b9eb3694":"code","52f5b649":"code","783ed0a8":"code","4117a395":"code","363d856a":"code","fd556bbd":"code","baba7f43":"code","d3d05c4e":"code","be53c8d5":"code","e422d481":"code","6d72b36e":"code","6216e422":"code","ad4166a1":"code","1d39acb5":"code","7ac4278d":"code","049b79b5":"code","51aca30f":"code","321a0686":"code","15abaae3":"code","79bd5fec":"code","a1a4b6f1":"code","f0ac774e":"code","2afda03a":"code","e1c11938":"code","030c57b7":"code","2f176ba3":"code","763cb8c8":"code","7569a4c9":"code","442d1a46":"code","6ed67814":"code","da90ad32":"code","a0a8d5a2":"code","f1c6f936":"code","21690615":"code","a98219ec":"code","c2391cce":"code","851a3f02":"markdown","21b59ebe":"markdown","2b5066d4":"markdown","c1888e99":"markdown","fa57b93b":"markdown","d08c068d":"markdown","86fecdd3":"markdown","3071c91a":"markdown","ab71e36a":"markdown"},"source":{"16d754d1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport sklearn.metrics as sm\nimport sklearn.preprocessing as sp\nimport sklearn.svm as SVM\nimport sklearn.linear_model as Linear\nfrom sklearn.neighbors import KNeighborsClassifier as knn\nfrom sklearn.ensemble import RandomForestClassifier as RFC\nfrom sklearn.model_selection import train_test_split as split","f832b626":"gender=pd.read_csv(\"D:\\\\Data\\\\Kaggle Competitions\\\\Machine Learning Titanic\\\\gender_submission.csv\")\ntest=pd.read_csv(\"D:\\\\Data\\\\Kaggle Competitions\\\\Machine Learning Titanic\\\\test.csv\")\ntrain=pd.read_csv(\"D:\\\\Data\\\\Kaggle Competitions\\\\Machine Learning Titanic\\\\train.csv\")","1a046f9c":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","eaff981e":"train.info()","afa6c478":"train[train['Age'].isnull()]","5f88beee":"pc1_mean=round((train['Age'][train['Pclass']==1]).mean())\npc2_mean=round((train['Age'][train['Pclass']==2]).mean())\npc3_mean=round((train['Age'][train['Pclass']==3]).mean())","942f5378":"train['Age'][train['Pclass']==1]=(train['Age'][train['Pclass']==1]).fillna(pc1_mean)\ntrain['Age'][train['Pclass']==2]=(train['Age'][train['Pclass']==2]).fillna(pc2_mean)\ntrain['Age'][train['Pclass']==3]=(train['Age'][train['Pclass']==3]).fillna(pc3_mean)","36553511":"train","3735729c":"print(train['Embarked'].value_counts())\nprint('-------------')\nprint(train['Sex'].value_counts())","987354aa":"train=pd.get_dummies(data=train, prefix=['sex', 'emb', 'pcls'], columns=['Sex', 'Embarked', 'Pclass'])\ntrain.head(2)","0260acb7":"train.drop(columns=['Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'sex_male', 'emb_S', 'pcls_3'], inplace=True)\ntrain.head(2)","344b7833":"pf=sp.PolynomialFeatures()\npoly=pd.DataFrame(pf.fit_transform(train[['Age', 'Fare']]))","df313eb4":"pf.get_feature_names(input_features=['Age', 'Fare'])","36bca108":"poly.columns=['1', 'Age', 'Fare', 'Age^2', 'Age_Fare', 'Fare^2']\npoly.drop(columns=['1'], inplace=True)\npoly.head(3)","d92ab934":"train=train.drop(columns=['Age', 'Fare']).merge(poly, left_index=True, right_index=True)\ntrain.head(3)","9c73d618":"x_train,x_test, y_train, y_test=split(train.drop(columns=['Survived','PassengerId']), train['Survived'], test_size=0.25, random_state=25)","ac115d50":"x_train.reset_index(drop=True, inplace=True)\ny_train.reset_index(drop=True, inplace=True)\nx_test.reset_index(drop=True, inplace=True)\ny_test.reset_index(drop=True, inplace=True)","50aea50a":"x_train.columns","692091c8":"rb=sp.RobustScaler()\nsctr=pd.DataFrame(rb.fit_transform(x_train[['Age', 'Fare', 'Age^2', 'Age_Fare', 'Fare^2']]),\ncolumns=['Age', 'Fare', 'Age^2', 'Age_Fare', 'Fare^2'])\nx_train=x_train.drop(columns=['Age', 'Fare', 'Age^2', 'Age_Fare', \n        'Fare^2']).merge(sct, left_index=True, right_index=True)\nx_train.head()","b7ad96ed":"scts=pd.DataFrame(rb.transform(x_train[['Age', 'Fare', 'Age^2', 'Age_Fare', 'Fare^2']]),\ncolumns=['Age', 'Fare', 'Age^2', 'Age_Fare', 'Fare^2'])\nx_test=x_test.drop(columns=['Age', 'Fare', 'Age^2', 'Age_Fare', \n        'Fare^2']).merge(scts, left_index=True, right_index=True)\nx_test.head()","014a4882":"# Logistic Regression\nlor1=Linear.LogisticRegression(penalty='none')","2133539f":"# Model 1\nlor1.fit(x_train, y_train)\nsm.accuracy_score(y_test, lor1.predict(x_test))","f49a6e16":"sm.balanced_accuracy_score(y_test, lor1.predict(x_test))","f7e4644d":"# Model 2\nscores=[]\nvalues=[]\na=0\nwhile (a<1):\n    prd=(pd.DataFrame(lor1.predict_proba(x_test))[1]>a).astype(np.int8)\n    scores.append(sm.balanced_accuracy_score(y_test, prd))\n    values.append(a)\n    a+=0.01   ","2496c5aa":"sns.lineplot(values,scores)","d5ebaa7d":"np.max(scores)","c3bbd88d":"scores.index(0.7829960214495761)","1bcf76c8":"values[82]","05fd59ee":"# Model 3\nlor2=Linear.LogisticRegressionCV(cv=5, Cs=[0.1,1,2,3,4,5,6,7,8,9,10,100,1000,10000], penalty='l1',l1_ratios=[0.1,0.2, 0.3,0.4 ,0.5,0.6,0.7,0.8,0.9], solver='saga', max_iter=100000)\nlor2.fit(x_train, y_train)\nsm.balanced_accuracy_score(y_test, lor2.predict(x_test))","a2290fc4":"# Model 4\nscores_2=[]\nvalues_2=[]\nb=0\nwhile (b<1):\n    prd_2=(pd.DataFrame(lor2.predict_proba(x_test))[1]>b).astype(np.int8)\n    scores_2.append(sm.balanced_accuracy_score(y_test, prd_2))\n    values_2.append(b)\n    b+=0.01","d24f4d53":"np.max(scores_2)","3184df51":"scores_2.index(0.7749091852620653)","869925ef":"values_2[33]","9d9d3bac":"sns.lineplot(values_2,scores_2)","d3f1c15d":"# Model 5\nlor3=Linear.LogisticRegressionCV(cv=5, Cs=[0.1,1,2,3,4,5,6,7,8,9,10,100,1000,10000], penalty='l2', l1_ratios=[0.1,0.2, 0.3,0.4 ,0.5,0.6,0.7,0.8,0.9],solver='saga', max_iter=100000)\nlor3.fit(x_train, y_train)\nsm.balanced_accuracy_score(y_test, lor3.predict(x_test))","c974751b":"# Model 6\nscores_3=[]\nvalues_3=[]\nc=0\nwhile (c<1):\n    prd_3=(pd.DataFrame(lor3.predict_proba(x_test))[1]>c).astype(np.int8)\n    scores_3.append(sm.balanced_accuracy_score(y_test, prd_3))\n    values_3.append(c)\n    c+=0.01","974f5a7d":"np.max(scores_3)","c92deed4":"scores_3.index(np.max(scores_3))","715c7310":"values_3[73]","29c84620":"sns.lineplot(values_3,scores_3)","8813bf20":"# Model 7\nlor4=Linear.LogisticRegressionCV(cv=5, Cs=[0.1,0.12,0.16,0.18,1,], penalty='elasticnet', l1_ratios=[0.1,0.2, 0.3,0.4 ,0.5,0.6,0.7,0.8,0.9], solver='saga', max_iter=100000)\nlor4.fit(x_train, y_train)\nsm.balanced_accuracy_score(y_test, lor4.predict(x_test))","b9eb3694":"lor4.l1_ratio_","52f5b649":"# Model 8\nscores_4=[]\nvalues_4=[]\nd=0\nwhile (d<1):\n    prd_4=(pd.DataFrame(lor4.predict_proba(x_test))[1]>d).astype(np.int8)\n    scores_4.append(sm.balanced_accuracy_score(y_test, prd_4))\n    values_4.append(d)\n    d+=0.01","783ed0a8":"np.max(scores_4)","4117a395":"scores_4.index(np.max(scores_4))","363d856a":"values_4[45]","fd556bbd":"sns.lineplot(values_4,scores_4)","baba7f43":"# Model 9 \nsvc=SVM.SVC(C=10)\nsvc.fit(x_train, y_train)\nprint(sm.accuracy_score(y_test, svc.predict(x_test)))\nprint(sm.balanced_accuracy_score(y_test, svc.predict(x_test)))\nprint('--------------------\\n')\nprint(sm.classification_report(y_test, svc.predict(x_test)))","d3d05c4e":"# Model 10\nscores_5=[]\nvalues_5=[]\ne=1\nwhile (e<300):\n    knc=knn(n_neighbors=e)\n    knc.fit(x_train,y_train)\n    scores_5.append(sm.balanced_accuracy_score(y_test, knc.predict(x_test)))\n    values_5.append(e)\n    e+=1","be53c8d5":"np.max(scores_5)","e422d481":"scores_5.index(np.max(scores_5))","6d72b36e":"sns.lineplot(values_5, scores_5)","6216e422":"# Model 10 --not suggested\nscores_6=[]\nvalues_6=[]\nf=50\nwhile (f<300):\n    rfc=RFC(n_estimators=f)\n    rfc.fit(x_train,y_train)\n    scores_6.append(sm.balanced_accuracy_score(y_test, rfc.predict(x_test)))\n    values_6.append(f)\n    f+=1","ad4166a1":"np.max(scores_6)","1d39acb5":"scores_6.index(np.max(scores_6))","7ac4278d":"sns.lineplot(values_6, scores_6)","049b79b5":"test.head()","51aca30f":"test.info()","321a0686":"test['Age'][test['Pclass']==1]=(test['Age'][test['Pclass']==1]).fillna(pc1_mean)\ntest['Age'][test['Pclass']==2]=(test['Age'][test['Pclass']==2]).fillna(pc2_mean)\ntest['Age'][test['Pclass']==3]=(test['Age'][test['Pclass']==3]).fillna(pc3_mean)","15abaae3":"test=pd.get_dummies(data=test, prefix=['sex', 'emb', 'pcls'], columns=['Sex', 'Embarked', 'Pclass'])\ntest.head()","79bd5fec":"test.drop(columns=['Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'sex_male', 'emb_S', 'pcls_3'], inplace=True)\ntest.head(2)","a1a4b6f1":"test[test['Fare'].isnull()]","f0ac774e":"t=pd.read_csv(\"D:\\\\Data\\\\Kaggle Competitions\\\\Machine Learning Titanic\\\\train.csv\")\nt.head(2)","2afda03a":"(t['Fare'][t['Pclass']==3]).mean()\n","e1c11938":"test['Fare'].fillna(13.6755, inplace=True)","030c57b7":"x_train.columns","2f176ba3":"poly2=pd.DataFrame(pf.transform(test[['Age', 'Fare']]))\npoly2.columns=['1','Age', 'Fare','Age^2', 'Age_Fare', 'Fare^2']\npoly2.drop(columns=['1'], inplace=True)\npoly2.head(3)","763cb8c8":"poly2=pd.DataFrame(rb.transform(poly[['Age', 'Fare', 'Age^2', 'Age_Fare', 'Fare^2']]),\ncolumns=['Age', 'Fare', 'Age^2', 'Age_Fare', 'Fare^2'])\ntest=test.drop(columns=['Age','Fare']).merge(poly2, left_index=True, right_index=True)\ntest.head()","7569a4c9":"# Model 1--save pred as .csv\nmodel_1=pd.DataFrame()\nmodel_1['PassengerId']=test['PassengerId']\nmodel_1['Survived']=pd.DataFrame(lor1.predict(test.drop(columns=['PassengerId'])))\nmodel_1.head()","442d1a46":"model_1.to_csv(path_or_buf=\"D:\\\\Data\\\\Kaggle Competitions\\\\Machine Learning Titanic\\\\My Models' predictios\\\\model1.csv\",index=False)","6ed67814":"# to check table we saved\npd.read_csv(\"D:\\\\Data\\\\Kaggle Competitions\\\\Machine Learning Titanic\\\\My Models' predictios\\\\model1.csv\")","da90ad32":"# Model 2 save pred as .csv\nmodel_2=pd.DataFrame()\nmodel_2['PassengerId']=test['PassengerId']\nmodel_2['Survived']=(pd.DataFrame(lor1.predict_proba(test.drop(columns=['PassengerId'])))[1]>0.82).astype(np.int8)\nmodel_2.head()","a0a8d5a2":"model_2.to_csv(path_or_buf=\"D:\\\\Data\\\\Kaggle Competitions\\\\Machine Learning Titanic\\\\My Models' predictios\\\\model2.csv\",index=False)\npd.read_csv(\"D:\\\\Data\\\\Kaggle Competitions\\\\Machine Learning Titanic\\\\My Models' predictios\\\\model2.csv\")","f1c6f936":"# Model 3--save pred as .csv\nmodel_3=pd.DataFrame()\nmodel_3['PassengerId']=test['PassengerId']\nmodel_3['Survived']=pd.DataFrame(lor2.predict(test.drop(columns=['PassengerId'])))\nmodel_3.head()","21690615":"model_3.to_csv(path_or_buf=\"D:\\\\Data\\\\Kaggle Competitions\\\\Machine Learning Titanic\\\\My Models' predictios\\\\model3.csv\",index=False)\npd.read_csv(\"D:\\\\Data\\\\Kaggle Competitions\\\\Machine Learning Titanic\\\\My Models' predictios\\\\model3.csv\")","a98219ec":"import dill","c2391cce":"dill.dump_session('Self_Study\/Kaggle Competition\/titanic_models.pkl')","851a3f02":"##### ----------------------------------------------------------------------------------------------------","21b59ebe":"### ------------------------------------------------------------------------------------------------------------","2b5066d4":"### -----------------------","c1888e99":"### ---------------------------------------------","fa57b93b":"### --------------------------------------------------","d08c068d":"### -------------------------------","86fecdd3":"### ----------------------------------------------------------","3071c91a":"### ---------------------------------------------------------","ab71e36a":"## ------------------------------------"}}