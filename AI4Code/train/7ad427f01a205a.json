{"cell_type":{"b2624789":"code","7454c48c":"code","93119223":"code","b0382cbd":"code","96d89e6a":"code","36863994":"code","1a4f9fc0":"code","266cd022":"code","45b14efc":"code","dac4e850":"code","f6f13060":"code","d1a2d2ac":"code","34eeb2f0":"code","29210570":"code","581df3cc":"code","320ae359":"code","160c5a90":"code","f1de9221":"code","4ce4bb61":"code","b9cc2758":"code","64bfc796":"code","028f92e3":"code","e2290023":"code","af641ef2":"code","f571c4e8":"code","0656b51a":"code","7411940b":"code","e8ed6ee2":"code","1fa2da3a":"code","70abb146":"code","fe9cfe23":"code","5bbe2fe9":"code","f98e3088":"code","0b903b1a":"code","c4881e79":"code","cd9a212e":"code","4bce69d3":"code","b3bd46ae":"code","ec49ebe0":"code","3b79d6a8":"markdown","25129f79":"markdown","3eff8953":"markdown","e09ad5cd":"markdown","fc50691f":"markdown","9fd96391":"markdown","62275c32":"markdown","8e1264bc":"markdown","47ea812a":"markdown","fa8e12fe":"markdown","0e8be5b1":"markdown","b1deb9dc":"markdown","5a0195b5":"markdown","c799d274":"markdown","a3bb9382":"markdown"},"source":{"b2624789":"import os","7454c48c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","93119223":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report","b0382cbd":"# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier","96d89e6a":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","36863994":"df = pd.read_csv('..\/input\/wine-reviews\/winemag-data-130k-v2.csv')","1a4f9fc0":"df = df.drop(['Unnamed: 0'], axis=1)","266cd022":"print('Shape: ', df.shape)\ndf.head()","45b14efc":"%%html\n<div class='tableauPlaceholder' id='viz1580309606698' style='position: relative'>\n    <noscript>\n        <a href='https:&#47;&#47;www.kaggle.com&#47;zynicide&#47;wine-reviews#winemag-data-130k-v2.csv'>\n            <img alt=' ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Wi&#47;WineDashboard_15802909636010&#47;WineDashboard&#47;1_rss.png' style='border: none' \/>\n        <\/a>\n    <\/noscript>\n    <object class='tableauViz'  style='display:none;'>\n        <param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> \n        <param name='embed_code_version' value='3' \/> \n        <param name='site_root' value='' \/>\n        <param name='name' value='WineDashboard_15802909636010&#47;WineDashboard' \/>\n        <param name='tabs' value='yes' \/><param name='toolbar' value='yes' \/>\n        <param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Wi&#47;WineDashboard_15802909636010&#47;WineDashboard&#47;1.png' \/> \n        <param name='animate_transition' value='yes' \/>\n        <param name='display_static_image' value='yes' \/>\n        <param name='display_spinner' value='yes' \/>\n        <param name='display_overlay' value='yes' \/>\n        <param name='display_count' value='yes' \/>\n    <\/object><\/div>                \n    <script type='text\/javascript'>                    \n        var divElement = document.getElementById('viz1580309606698');                    \n        var vizElement = divElement.getElementsByTagName('object')[0];                    \n        if ( divElement.offsetWidth > 800 ) { vizElement.style.minWidth='1500px';vizElement.style.maxWidth='100%';vizElement.style.minHeight='850px';vizElement.style.maxHeight=(divElement.offsetWidth*0.75)+'px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.minWidth='1500px';vizElement.style.maxWidth='100%';vizElement.style.minHeight='850px';vizElement.style.maxHeight=(divElement.offsetWidth*0.75)+'px';} else { vizElement.style.width='100%';vizElement.style.minHeight='1300px';vizElement.style.maxHeight=(divElement.offsetWidth*1.77)+'px';}                     \n        var scriptElement = document.createElement('script');                    \n        scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    \n        vizElement.parentNode.insertBefore(scriptElement, vizElement);                \n    <\/script>","dac4e850":"df.head()","f6f13060":"# create target\n\ndf.loc[df['points'] <= 89, 'points'] = 0\ndf.loc[df['points'] > 89, 'points'] = 1","d1a2d2ac":"# count of target\n\nprint('Avg wine: ', len(df.loc[df['points']==0]))\nprint('Luxury Wine: ', len(df.loc[df['points']==1]))","34eeb2f0":"# select columns\n\ncolumns = ['country', 'price', 'province', 'variety', 'points']\ndata = df[columns]","29210570":"data.head()","581df3cc":"data.isna().sum()","320ae359":"# replace nan values with average of columns\n\ndata.price = data.price.fillna(data.price.mean())","160c5a90":"# replace nan values with Unknown\n\ndata = data.fillna('Unknown')","f1de9221":"data.isna().sum() ","4ce4bb61":"# one hot encoding\n\ncountry = pd.get_dummies(data['country'], prefix = 'country')\nprovince = pd.get_dummies(data['province'], prefix = 'province')\nvariety = pd.get_dummies(data['variety'], prefix = 'variety')","b9cc2758":"target = data['points']\ndata = data['price']\ndata = pd.concat([data, country], axis=1)\ndata = pd.concat([data, province], axis=1)\ndata = pd.concat([data, variety], axis=1)","64bfc796":"data.shape","028f92e3":"# Split data into random train and test subsets\n\nX_train, X_test, Y_train, Y_test = train_test_split(\n    data, \n    target, \n    test_size=0.33, \n    random_state=42\n)","e2290023":"def report(model):\n    Y_pred = model.predict(X_test)\n    return print(classification_report(Y_test, Y_pred))","af641ef2":"# Logistic Regression\n\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\n\nacc_log = round(logreg.score(X_test, Y_test) * 100, 2)\nacc_log","f571c4e8":"report(logreg)","0656b51a":"coeff_df = pd.DataFrame(data.columns.delete(0))\ncoeff_df.columns = ['Feature']\ncoeff_df[\"Correlation\"] = pd.Series(logreg.coef_[0])\n\ncoeff_df.sort_values(by='Correlation', ascending=False)","7411940b":"# Linear SVC\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\n\nacc_linear_svc = round(linear_svc.score(X_test, Y_test) * 100, 2)\nacc_linear_svc","e8ed6ee2":"report(linear_svc)","1fa2da3a":"# Decision Tree\n\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\n\nacc_decision_tree = round(decision_tree.score(X_test, Y_test) * 100, 2)\nacc_decision_tree","70abb146":"report(decision_tree)","fe9cfe23":"# Random Forest\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\n\nacc_random_forest = round(random_forest.score(X_test, Y_test) * 100, 2)\nacc_random_forest","5bbe2fe9":"report(random_forest)","f98e3088":"bdt = AdaBoostClassifier(DecisionTreeClassifier(max_depth=1),\n                         algorithm=\"SAMME\",\n                         n_estimators=200)\n\nbdt.fit(X_train, Y_train)\n\nacc_bdt = round(bdt.score(X_test, Y_test) * 100, 2)\nacc_bdt","0b903b1a":"report(bdt)","c4881e79":"clf_gb = GradientBoostingClassifier(n_estimators=100, \n                                 max_depth=1, \n                                 random_state=0)\nclf_gb.fit(X_train, Y_train)\n\nacc_clf_gb = round(clf_gb.score(X_test, Y_test) * 100, 2)\nacc_clf_gb","cd9a212e":"report(clf_gb)","4bce69d3":"mlp = MLPClassifier(solver='lbfgs', \n                    alpha=1e-5, \n                    hidden_layer_sizes=(21, 2), \n                    random_state=1)\n\nmlp.fit(X_train, Y_train)\n\nacc_mlp = round(mlp.score(X_test, Y_test) * 100, 2)\nacc_mlp","b3bd46ae":"report(mlp)","ec49ebe0":"models = pd.DataFrame({\n    'Model': ['Logistic Regression', \n              'Random Forest',   \n              'Linear SVC', \n              'Decision Tree',\n             'AdaBoostClassifier', 'GradientBoostingClassifier'],\n    'Score': [acc_log, \n              acc_random_forest,   \n              acc_linear_svc, acc_decision_tree,\n             acc_bdt, acc_clf_gb]})\nmodels.sort_values(by='Score', ascending=False)","3b79d6a8":"### Random Forest","25129f79":"### Decision Tree","3eff8953":"### Evalution models","e09ad5cd":"### AdaBoostClassifier","fc50691f":"### 1. Import","9fd96391":"### MLPClassifier","62275c32":"### Work in progress...","8e1264bc":"### Modeling","47ea812a":"### 2. Read data","fa8e12fe":"###### Logistic Regression","0e8be5b1":"### 4. Data preparation","b1deb9dc":"###### Linear SVC","5a0195b5":"### GradientBoostingClassifier","c799d274":"### 3. Visualization\n\nNote:\nI did visualization with [Tableau Public](https:\/\/public.tableau.com)","a3bb9382":"**About task:**\n\nI will learn model for binary classification:\n* wine with point >89 - **Luxury Wine**\n* wine with point <=89 - **Avg wine**\n\nAs 1st step, we will use the next columns:\n* country\n* price\n* province\n* variety"}}