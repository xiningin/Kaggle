{"cell_type":{"1adc1bdc":"code","a6acb1f4":"code","bb6b0483":"code","00971384":"code","2a7d66d1":"code","7387dd3e":"code","b098cefb":"code","8308e078":"code","44a6e744":"code","66471576":"code","edb934e9":"code","46d5e01b":"code","6f89c960":"code","743435dd":"code","3b53c343":"code","d84495c5":"code","4ca96ac3":"code","24681aa3":"code","4fc9d535":"code","86310451":"code","11c2c990":"code","c375afa3":"code","373109f6":"code","78d0bdcd":"code","5bc5e869":"code","647a54c1":"code","f0e034dd":"code","cc367249":"code","f592c6a5":"markdown"},"source":{"1adc1bdc":"import numpy as np \nimport pandas as pd \nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a6acb1f4":"PATH_WEEK2='\/kaggle\/input\/covid19-global-forecasting-week-2'\ndf_train = pd.read_csv(f'{PATH_WEEK2}\/train.csv')\ndf_test = pd.read_csv(f'{PATH_WEEK2}\/test.csv')","bb6b0483":"df_train.head()","00971384":"df_test.head()","2a7d66d1":"df_train.rename(columns={'Country_Region':'Country'}, inplace=True)\ndf_test.rename(columns={'Country_Region':'Country'}, inplace=True)\n\ndf_train.rename(columns={'Province_State':'State'}, inplace=True)\ndf_test.rename(columns={'Province_State':'State'}, inplace=True)","7387dd3e":"df_train['Date'] = pd.to_datetime(df_train['Date'], infer_datetime_format=True)\ndf_test['Date'] = pd.to_datetime(df_test['Date'], infer_datetime_format=True)","b098cefb":"df_train.info()","8308e078":"df_test.info()","44a6e744":"y1_Train = df_train.iloc[:, -2]\ny1_Train.head()","66471576":"y2_Train = df_train.iloc[:, -1]\ny2_Train.head()","edb934e9":"EMPTY_VAL = \"EMPTY_VAL\"\n\ndef fillState(state, country):\n    if state == EMPTY_VAL: return country\n    return state","46d5e01b":"#X_Train = df_train.loc[:, ['State', 'Country', 'Date']]\nX_Train = df_train.copy()\n\nX_Train['State'].fillna(EMPTY_VAL, inplace=True)\nX_Train['State'] = X_Train.loc[:, ['State', 'Country']].apply(lambda x : fillState(x['State'], x['Country']), axis=1)\n\nX_Train.loc[:, 'Date'] = X_Train.Date.dt.strftime(\"%m%d\")\nX_Train[\"Date\"]  = X_Train[\"Date\"].astype(int)\n\nX_Train.head()","6f89c960":"#X_Test = df_test.loc[:, ['State', 'Country', 'Date']]\nX_Test = df_test.copy()\n\nX_Test['State'].fillna(EMPTY_VAL, inplace=True)\nX_Test['State'] = X_Test.loc[:, ['State', 'Country']].apply(lambda x : fillState(x['State'], x['Country']), axis=1)\n\nX_Test.loc[:, 'Date'] = X_Test.Date.dt.strftime(\"%m%d\")\nX_Test[\"Date\"]  = X_Test[\"Date\"].astype(int)\n\nX_Test.head()","743435dd":"from sklearn import preprocessing\n\nle = preprocessing.LabelEncoder()","3b53c343":"X_Train.Country = le.fit_transform(X_Train.Country)\nX_Train['State'] = le.fit_transform(X_Train['State'])\n\nX_Train.head()","d84495c5":"X_Test.Country = le.fit_transform(X_Test.Country)\nX_Test['State'] = le.fit_transform(X_Test['State'])\n\nX_Test.head()","4ca96ac3":"df_train.head()","24681aa3":"df_train.loc[df_train.Country == 'Afghanistan', :]","4fc9d535":"df_test.tail()","86310451":"from warnings import filterwarnings\nfilterwarnings('ignore')","11c2c990":"le = preprocessing.LabelEncoder()","c375afa3":"from xgboost import XGBRegressor\nimport lightgbm as lgb","373109f6":"countries = X_Train.Country.unique()\n\ndf_out = pd.DataFrame({'ForecastId': [], 'ConfirmedCases': [], 'Fatalities': []})\ndf_out2 = pd.DataFrame({'ForecastId': [], 'ConfirmedCases': [], 'Fatalities': []})\n\nfor country in countries:\n    states = X_Train.loc[X_Train.Country == country, :].State.unique()\n    #print(country, states)\n    # check whether string is nan or not\n    for state in states:\n        X_Train_CS = X_Train.loc[(X_Train.Country == country) & (X_Train.State == state), ['State', 'Country', 'Date', 'ConfirmedCases', 'Fatalities']]\n        \n        y1_Train_CS = X_Train_CS.loc[:, 'ConfirmedCases']\n        y2_Train_CS = X_Train_CS.loc[:, 'Fatalities']\n        \n        X_Train_CS = X_Train_CS.loc[:, ['State', 'Country', 'Date']]\n        \n        X_Train_CS.Country = le.fit_transform(X_Train_CS.Country)\n        X_Train_CS['State'] = le.fit_transform(X_Train_CS['State'])\n        \n        X_Test_CS = X_Test.loc[(X_Test.Country == country) & (X_Test.State == state), ['State', 'Country', 'Date', 'ForecastId']]\n        \n        X_Test_CS_Id = X_Test_CS.loc[:, 'ForecastId']\n        X_Test_CS = X_Test_CS.loc[:, ['State', 'Country', 'Date']]\n        \n        X_Test_CS.Country = le.fit_transform(X_Test_CS.Country)\n        X_Test_CS['State'] = le.fit_transform(X_Test_CS['State'])\n        \n        # XGBoost\n        model1 = XGBRegressor(n_estimators=2000)\n        model1.fit(X_Train_CS, y1_Train_CS)\n        y1_pred = model1.predict(X_Test_CS)\n        \n        model2 = XGBRegressor(n_estimators=2000)\n        model2.fit(X_Train_CS, y2_Train_CS)\n        y2_pred = model2.predict(X_Test_CS)\n        \n        # LightGBM\n        model3 = lgb.LGBMRegressor(n_estimators=2000)\n        model3.fit(X_Train_CS, y1_Train_CS)\n        y3_pred = model3.predict(X_Test_CS)\n        \n        model4 = lgb.LGBMRegressor(n_estimators=2000)\n        model4.fit(X_Train_CS, y2_Train_CS)\n        y4_pred = model4.predict(X_Test_CS)\n        \n        df = pd.DataFrame({'ForecastId': X_Test_CS_Id, 'ConfirmedCases': y1_pred, 'Fatalities': y2_pred})\n        df2 = pd.DataFrame({'ForecastId': X_Test_CS_Id, 'ConfirmedCases': y3_pred, 'Fatalities': y4_pred})\n        df_out = pd.concat([df_out, df], axis=0)\n        df_out2 = pd.concat([df_out2, df2], axis=0)\n    # Done for state loop\n# Done for country Loop","78d0bdcd":"df_out.ForecastId = df_out.ForecastId.astype('int')\ndf_out2.ForecastId = df_out2.ForecastId.astype('int')","5bc5e869":"df_out['ConfirmedCases'] = (1\/2)*(df_out['ConfirmedCases'] + df_out2['ConfirmedCases'])\ndf_out['Fatalities'] = (1\/2)*(df_out['Fatalities'] + df_out2['Fatalities'])","647a54c1":"df_out['ConfirmedCases'] = df_out['ConfirmedCases'].round().astype(int)\ndf_out['Fatalities'] = df_out['Fatalities'].round().astype(int)","f0e034dd":"df_out.tail()","cc367249":"df_out.to_csv('submission.csv', index=False)","f592c6a5":"# Acknowledgements\n\n- Built-upon https:\/\/www.kaggle.com\/ranjithks\/19-lines-of-code-result-better-score\/notebook\n- Modifications: added LightGBM, blended XGBoost & LightGBM predictions and tweaked hyperparameters"}}