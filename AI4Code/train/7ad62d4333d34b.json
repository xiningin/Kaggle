{"cell_type":{"e13c434a":"code","a761c230":"code","81e60742":"code","533e4bda":"code","33a5c901":"code","0ca6ea10":"code","b95a7e37":"code","d77dd754":"code","c9539ebe":"code","b57e30d0":"code","24d0a46c":"code","ea811d89":"code","8b5c3d7f":"markdown","92bfd149":"markdown"},"source":{"e13c434a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport tensorflow as tf\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a761c230":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntrain.head()","81e60742":"print(train.shape)\nprint(test.shape)","533e4bda":"train_y = train['label'].astype('float32')\ntrain_x = train.drop(['label'], axis = 'columns').astype('int32')\ntest_x = test.astype('float32')\ntrain_x.shape, train_y.shape, test_x.shape","33a5c901":"train_x = train_x.values.reshape(-1, 28, 28, 1)\ntrain_x = train_x\/255.0\ntest_x = test_x.values.reshape(-1, 28, 28, 1)\ntest_x = test_x\/255.0\ntrain_x.shape, test_x.shape","0ca6ea10":"train_y = tf.keras.utils.to_categorical(train_y, 10)\ntrain_y.shape","b95a7e37":"train['label'].head(5)","d77dd754":"train_y[0:5, :]","c9539ebe":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3, 3), activation = 'relu', input_shape = (28, 28, 1)),\n    tf.keras.layers.Conv2D(32, (3, 3), activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Conv2D(64, (3, 3), activation = 'relu', padding = 'Same'),\n    tf.keras.layers.Conv2D(64, (3, 3), activation = 'relu', padding = 'Same'),\n    tf.keras.layers.MaxPooling2D(pool_size = (2, 2), strides = (2, 2)),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Conv2D(64, (3, 3), activation = 'relu', padding = 'Same'),\n    tf.keras.layers.Conv2D(64, (3, 3), activation = 'relu', padding = 'Same'),\n    tf.keras.layers.MaxPooling2D(pool_size = (2, 2), strides = (2, 2)),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(256, activation = 'relu'),\n    tf.keras.layers.Dense(256, activation = 'relu'),\n    tf.keras.layers.Dropout(0.50),\n    tf.keras.layers.Dense(10, activation = 'softmax')    \n])\n\nmodel.summary()","b57e30d0":"class myCallBack(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs = {}):\n        if(logs.get('accuracy') > 0.999):\n            print(\"\\nHigh accuracy!!!, RDX710\")\n            self.model.stop_training = True\n            \ncallbacks = myCallBack()\n\nOptimizer = tf.keras.optimizers.Adam(\n            learning_rate = 0.0005,\n            beta_1 = 0.9,\n            beta_2 = 0.999,\n            epsilon = 1e-07,\n            name = 'Adam'\n)\nmodel.compile(optimizer = Optimizer, loss = 'categorical_crossentropy', metrics = ['accuracy'])\nmodel.fit(train_x, train_y, batch_size = 50, epochs = 20, callbacks = [callbacks])","24d0a46c":"results = model.predict(test_x)\nresults = np.argmax(results, axis = 1)\nresults = pd.Series(results, name = 'Label')","ea811d89":"submit = pd.concat([pd.Series(range(1, 28001), name = \"ImageId\"), results], axis = 1)\nsubmit.to_csv(\"submit.csv\", index = False)","8b5c3d7f":"## Creating model","92bfd149":"## One hot encoding"}}