{"cell_type":{"348cc498":"code","459fcd15":"code","ea2bef56":"code","f7778ed1":"code","738b4fa4":"code","77383bbd":"code","03474a3c":"code","f77c921e":"code","bc0e2404":"code","9e20e756":"code","357e89d1":"code","5c47f274":"code","8be10606":"code","f7c7c89d":"code","5ef48e60":"code","5800ba5c":"code","dd926560":"code","71f9ad22":"code","598f1082":"markdown","c16d8815":"markdown","b30fdcc1":"markdown","974e03b2":"markdown","730cb6b5":"markdown","5eac17da":"markdown"},"source":{"348cc498":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","459fcd15":"dataset = pd.read_csv('..\/input\/car-purchase-data\/Car_Purchasing_Data.csv',encoding='ISO-8859-1')","ea2bef56":"dataset.head()","f7778ed1":"import seaborn as sns\nsns.pairplot(dataset)","738b4fa4":"X=dataset.drop([\"Customer Name\", \"Customer e-mail\",\"Country\",\"Car Purchase Amount\"],axis=1)","77383bbd":"print(X)","03474a3c":"y = dataset[\"Car Purchase Amount\"]\nprint(y)\ny.shape","f77c921e":"y = y.values.reshape(-1,1)\ny.shape","bc0e2404":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_scaled = scaler.fit_transform(X)\ny_scaled = scaler.fit_transform(y)\nprint(X_scaled)\n","9e20e756":"from sklearn.model_selection import train_test_split\nX_trian,X_test,y_train,y_test = train_test_split(X_scaled,y_scaled,test_size=0.3)","357e89d1":"import tensorflow.keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# initializing the model\nmodel=Sequential()\n# adding layers\nmodel.add(Dense(25, input_dim=5, activation='relu'))\nmodel.add(Dense(25, activation='relu'))\nmodel.add(Dense(1, activation='linear'))\n# printing the summary\nmodel.summary()","5c47f274":"model.compile(optimizer='adam',loss='mean_squared_error')","8be10606":"epochs_hist = model.fit(X_trian,y_train,batch_size=25,epochs=50,validation_split=.2,verbose=1)","f7c7c89d":"print(epochs_hist.history.keys())","5ef48e60":"import matplotlib.pyplot as plt\nplt.plot(epochs_hist.history['loss'])\nplt.plot(epochs_hist.history['val_loss'])\n\nplt.title('Model Loss Progression During Training\/Validation')\nplt.ylabel('Training and Validation Losses')\nplt.xlabel('Epoch Number')\nplt.legend(['Training Loss', 'Validation Loss'])","5800ba5c":"y_pred = model.predict(X_test)","dd926560":"np.set_printoptions(precision=2)\ny_test= scaler.inverse_transform(y_test)\ny_pred= scaler.inverse_transform(y_pred)\ndf=np.concatenate((y_pred.reshape(-1,1), y_test.reshape(-1,1)),1)","71f9ad22":"final = pd.DataFrame(data=df, columns=[\"Predicted\", \"Actual\"])\nprint(final)","598f1082":"**Normalizing the values to improve the accuracy**","c16d8815":"**Dropping unnecessary columns**","b30fdcc1":"**Importing the data**","974e03b2":"We would develop a regression model using Artificial Neural Network to predict the total dollar amount that customers are willing to pay to purchase a car given the following attributes:\n\n* Customer Name\n* Customer e-mail\n* Country\n* Gender\n* Age\n* Annual Salary \n* Credit Card Debt \n* Net Worth \n\n**The model should predict: Car Purchase Amount **\n","730cb6b5":"**Validating the model**","5eac17da":"> **Training the Model**"}}