{"cell_type":{"557fc5cc":"code","026c0e67":"code","7687ee3d":"code","95fcfe96":"code","b9d709a8":"code","8ae4b5b0":"code","0f7359f0":"code","3d2bd573":"code","c111260f":"markdown","f946bfec":"markdown","5c7db7cc":"markdown","5fb8eb7a":"markdown","8439a113":"markdown","8c59ec35":"markdown","7430fc53":"markdown"},"source":{"557fc5cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport gym # for environment\nimport random\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","026c0e67":"env = gym.make('FrozenLake-v0').env\nenv.render()","7687ee3d":"env.observation_space","95fcfe96":"env.action_space","b9d709a8":"act = env.action_space.sample()\nenv.step(act)","8ae4b5b0":"# to create deterministic (not slippery) envirenment we can use the codes below\n#from gym.envs.registration import register\n#register (\n#    id = 'FrozenLakeNotSlippery-v0',\n#    entry_point = 'gym.envs.toy_text:FrozenLakeEnv', \n#    kwargs = {'map_name' : '4x4', 'is slippery' : False},\n#    max_episode_steps = 100,\n#    reward_threshold = 0.78, # optimum .8196\n#)","0f7359f0":"# hyperparameters\nalpha = 0.08 # learning rate\ngamma = 0.95 # discount rate\nepsilon = 0.13 # \n\n# initialization\ntime_step = 0\nepisodes = 50000\n\n# plotting metrix\nreward_list = []\n\n# initialize Q table\nq_table = np.zeros([env.observation_space.n, env.action_space.n])\n\nfor i in range(1,episodes):\n    \n    state = env.reset() # reset environment for each episode\n    time_step += 1 \n    reward_count = 0\n    \n    # update Q funtion\n    while True: \n        \n        # Choose action using epsilon greedy\n        if random.uniform(0,1) < epsilon:\n            action = env.action_space.sample()\n        else:\n            action = np.argmax(q_table[state])\n            \n        # action process and take reward \/ observation\n        next_state, reward, done, _ = env.step(action)\n        \n        old_q_value = q_table[state, action]\n        next_max_q_value = np.max(q_table[next_state])\n        \n        # update Q value\n        new_q_value = (1 - alpha) * old_q_value + alpha * (reward + gamma * next_max_q_value)\n        \n        # update Q table\n        q_table[state, action] = new_q_value\n        \n        # update state\n        state = next_state\n        \n        # we will use it for visualization purposes \n        if reward == -10:\n            dropouts += 1\n        \n        # find total reward\n        reward_count += reward\n        \n        if done:\n            break\n    \n    if i%100 == 0:\n        reward_list.append(reward_count)\n        print('Episode: {}, Reward: {}'.format(i, reward_count) )\n        ","3d2bd573":"import matplotlib.pyplot as plt\nplt.scatter(np.arange(len(reward_list)), reward_list)","c111260f":"The environment\u2019s **step** function returns exactly what we need. In fact, step returns four values. These are:\n\n- **observation** (object): an environment-specific object representing your observation of the environment. For example, pixel data from a camera, joint angles and joint velocities of a robot, or the board state in a board game.\n- **reward** (float): amount of reward achieved by the previous action. The scale varies between environments, but the goal is always to increase your total reward.\n- **done** (boolean): whether it\u2019s time to reset the environment again. Most (but not all) tasks are divided up into well-defined episodes, and done being True indicates the episode has terminated. (For example, perhaps the pole tipped too far, or you lost your last life.)\n- **info** (dict): diagnostic information useful for debugging. It can sometimes be useful for learning (for example, it might contain the raw probabilities behind the environment\u2019s last state change). However, official evaluations of your agent are not allowed to use this for learning.","f946bfec":"**Q function update**\n\n![](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/47fa1e5cf8cf75996a777c11c7b9445dc96d4637)","5c7db7cc":"**Q Learning**","5fb8eb7a":"**Q Learning Algorithm**","8439a113":"Actions: \n\n- LEFT = 0\n- DOWN = 1\n- RIGHT = 2\n- UP = 3","8c59ec35":"**Algorith**\n\n![](https:\/\/www.cse.unsw.edu.au\/~cs9417ml\/RL1\/images\/qalg.gif)","7430fc53":"**An Example of Q table**\n\n![](https:\/\/miro.medium.com\/max\/682\/1*g0rUy9yjg7UNJgUcVRdzvg.jpeg)"}}