{"cell_type":{"f915862d":"code","1b5d322e":"code","66371000":"code","1914f7a0":"code","c614e75a":"code","590ea949":"code","743fe538":"code","7a82e76f":"code","ae5edda9":"code","a479b080":"code","a6c38ed7":"code","28fbabc5":"code","4670e46c":"code","ddce13a3":"code","d9f64712":"code","3063981f":"code","63b2879f":"code","489995c0":"code","373d765c":"code","b3e4d8cc":"code","56ebabe3":"code","b5c3594f":"code","331b2670":"code","80cafd4e":"code","2c883a8a":"code","8fc8b91a":"markdown","afbb41e3":"markdown","f2d148e1":"markdown","4598f4ba":"markdown","ed1b6355":"markdown","62fba419":"markdown","7309aabb":"markdown","b881a8cc":"markdown","7a07f0c9":"markdown","15194b70":"markdown","6e283953":"markdown","27ba04a4":"markdown"},"source":{"f915862d":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom scipy import signal\nimport seaborn as sns\nimport glob","1b5d322e":"train_labels = pd.read_csv(\"..\/input\/predict-volcanic-eruptions-ingv-oe\/train.csv\")\ntrain_labels.head()","66371000":"print(\"Total segment files: {}\".format(len(train_labels['segment_id'])))\ntrain_labels.dtypes","1914f7a0":"df_example = pd.read_csv(\"..\/input\/predict-volcanic-eruptions-ingv-oe\/train\/1003154738.csv\")\ndf_example.head()\n\ndata_columns = list(df_example.columns)\n\nprint('Index Dataframe Shape: {}'.format(df_example.shape))\nprint('Column Headers:\\n')\nprint(data_columns)\ndf_example.describe()","c614e75a":"fig, axs = plt.subplots(nrows=5, ncols=2)\nfig.set_size_inches(20,10)\nfig.subplots_adjust(hspace=0.5)\n\nfor col,ax in zip(data_columns, axs.flatten()):\n    ax.plot(range(len(df_example[col])),df_example[col])\n    ax.set_title(col)","590ea949":"plt.figure(figsize=(10,6))\nplt.title('PSD')\nplt.xlabel('Frequency')\nplt.ylabel('Power')\nplt.tight_layout()\n\nexample_PSD = []\n\nfor col in data_columns:\n    col_mean = df_example[col].mean()\n    df_example[col].fillna(col_mean, inplace=True)\n    freq, psd = signal.welch(df_example[col],500)\n    plt.loglog(freq,psd)\n    example_PSD.append(psd)\n    \nplt.legend(data_columns)\n\nprint('Length of PSD: {}'.format(len(psd)))","743fe538":"example_PSD = np.transpose(example_PSD)\nprint(\"Transposed PSD array shape: {}\".format(example_PSD.shape))\ndf_PSD = pd.DataFrame(data=example_PSD, columns=data_columns)\ndf_PSD.head()","7a82e76f":"train_input = []\ni=0\n\nfor segment in train_labels['segment_id']:\n    output_psd = []\n    dataframe = pd.read_csv(f'..\/input\/predict-volcanic-eruptions-ingv-oe\/train\/{segment}.csv')\n    for col in data_columns:\n        freq, psd = signal.welch(dataframe[col],100)\n        output_psd = np.append(output_psd,psd)\n    \n    train_input = np.append(train_input,output_psd)\n    \n    i=i+1\n    #print('Manipulating segment {}, {} out of {}'.format(segment,i,len(train_labels['segment_id'])))\n\nnum_features = len(output_psd)\ntrain_input = np.reshape(train_input,(i,num_features))\nprint('Finalized input shape: {}'.format(train_input.shape))","ae5edda9":"print(\"Shape of training input: {}\".format(train_input.shape))","a479b080":"test_sample = pd.read_csv(\"..\/input\/predict-volcanic-eruptions-ingv-oe\/sample_submission.csv\")\ntest_sample.head()","a6c38ed7":"test_input = []\nk=0\n\nfor segment in test_sample['segment_id']:\n    output_psd = []\n    dataframe = pd.read_csv(f'..\/input\/predict-volcanic-eruptions-ingv-oe\/test\/{segment}.csv')\n    for col in data_columns:\n        freq, psd = signal.welch(dataframe[col],100)\n        output_psd = np.append(output_psd,psd)\n    \n    test_input = np.append(test_input,output_psd)\n    \n    k=1+k\n    #print('Manipulating segment {}, {} out of {}'.format(segment,k,len(test_sample['segment_id'])))\n\n\nnum_features = len(output_psd)\ntest_input = np.reshape(test_input,(-1,num_features))\nprint('Finalized input shape: {}'.format(test_input.shape))","28fbabc5":"print(\"Shape of test input: {}\".format(test_input.shape))","4670e46c":"from scipy import stats\n\nks_value = []\np_value = []\nindex = range(0,1290)\n\nfor i in index:\n    train = train_input[:,i]\n    test = test_input[:,i]\n    statistic,pvalue = stats.ks_2samp(train,test)\n    ks_value = np.append(ks_value,statistic)\n    p_value = np.append(p_value,pvalue)\n    \nsensor_ks = np.reshape(ks_value,(-1,129))\nsensor_p = np.reshape(p_value,(-1,129))\n\nsensor_array = []\nfor i in range(len(data_columns)):\n    sensor_array = np.append(sensor_array,np.full((129),i+1))\n    \nsensor_df = pd.DataFrame({'sensor_id':sensor_array,'ks_value':ks_value,'p_value':p_value})\n\nfig, axes = plt.subplots(1, 2,figsize=(15, 5))\nfig.suptitle(\"K Statistic and P-values for Train and Test\")\nsns.stripplot(ax=axes[0],x='sensor_id',y='ks_value',data=sensor_df)\nsns.stripplot(ax=axes[1],x='sensor_id',y='p_value',data=sensor_df)","ddce13a3":"fig, axs = plt.subplots(nrows=5, ncols=2)\nfig.set_size_inches(20,10)\nfig.subplots_adjust(hspace=0.5)\n\nindex_3 = test_input[3,:]\nindex_7 = test_input[7,:]\n\nindex_3 = np.reshape(index_3,(10,129))\nindex_3 = np.transpose(index_3)\nindex_3 = pd.DataFrame(data=index_3,columns=data_columns)\n\nindex_7 = np.reshape(index_7,(10,129))\nindex_7 = np.transpose(index_7)\nindex_7 = pd.DataFrame(data=index_7,columns=data_columns)\n\nfor col,ax in zip(data_columns, axs.flatten()):\n    ax.loglog(freq,index_3[col])\n    ax.loglog(freq,index_7[col])\n    ax.set_title(col)","d9f64712":"train_input = np.nan_to_num(train_input)\ntest_input = np.nan_to_num(test_input)\ny_train = train_labels['time_to_eruption']\n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(train_input)\n\nX_train = scaler.transform(train_input)\nX_test = scaler.transform(test_input)","3063981f":"from sklearn.decomposition import KernelPCA\ntransformer = KernelPCA(n_components=100,kernel=\"linear\")\ntrain_transformed = transformer.fit_transform(X_train)\ntest_transformed = transformer.transform(X_test)\n\ncombo_input = np.vstack((train_transformed,test_transformed))\n\ntrain_seg_list = train_labels['segment_id'].to_list()\ntest_seg_list = test_sample['segment_id'].to_list()\ncombo_seg = np.array(train_seg_list)\ncombo_seg = np.append(combo_seg,test_seg_list)\ncombo_seg","63b2879f":"from sklearn.covariance import EmpiricalCovariance, MinCovDet\n\nrobust_cov = MinCovDet().fit(combo_input[:,:])\n\nm = robust_cov.mahalanobis(combo_input[:,:])","489995c0":"plt.figure(figsize=(20,12))\nplt.title('Train versus Test Scatter of Principal Components')\nplt.xlabel('PCA Component 1')\nplt.ylabel('PCA Component 2')\n\ncm = plt.cm.get_cmap('viridis')\nplt.scatter(train_transformed[:,0],train_transformed[:,1], c=m[:train_input.shape[0]], cmap=cm,s=100)\nplt.scatter(test_transformed[:,0],test_transformed[:,1], c=m[train_input.shape[0]:], cmap=cm,marker=\"P\",s=100)\nplt.colorbar()\n\ntest_x = test_transformed[:,0]\ntest_y = test_transformed[:,1]\n\nfor i,x,y in zip(range(0,len(test_sample['segment_id'])),test_x,test_y):\n    if ((x > 50) | (y > 50)):\n        label = test_sample['segment_id'][i]\n        #plt.annotate(label,(x,y),ha=\"left\")\n        \ntrain_x = train_transformed[:,0]\ntrain_y = train_transformed[:,1]\n        \nfor i,x,y in zip(range(0,len(train_labels['segment_id'])),train_x,train_y):\n    if ((x > 50) | (y > 50)):\n        label = train_labels['segment_id'][i]\n        #plt.annotate(label,(x,y),ha=\"left\")\n        #outlier_list.append(label)\nplt.legend(['train','test'])\nplt.show()","373d765c":"outlier_list = []\nplt.figure(figsize=(20,12))\nplt.title('Train versus Test Scatter of Principal Components')\nplt.xlabel('PCA Component 1')\nplt.ylabel('PCA Component 2')\n\ncm = plt.cm.get_cmap('viridis')\nplt.scatter(train_transformed[:,0],train_transformed[:,1],alpha=.6)\nplt.scatter(test_transformed[:,0],test_transformed[:,1], alpha=.4)\n\n\ntest_x = test_transformed[:,0]\ntest_y = test_transformed[:,1]\n\nfor i,x,y in zip(range(0,len(test_sample['segment_id'])),test_x,test_y):\n    if ((x > 100) | (y>100)):\n        label = test_sample['segment_id'][i]\n        plt.annotate(label,(x,y),ha=\"left\")\n        \ntrain_x = train_transformed[:,0]\ntrain_y = train_transformed[:,1]\n        \nfor i,x,y in zip(range(0,len(train_labels['segment_id'])),train_x,train_y):\n    if ((x > 100) | (y>100)):\n        label = train_labels['segment_id'][i]\n        plt.annotate(label,(x,y),ha=\"left\")\n        outlier_list.append(label)\nplt.legend(['train','test'])\nplt.show()","b3e4d8cc":"# List of unclustered segments.\n\noutlier_list","56ebabe3":"#from sklearn.model_selection import cross_val_score\n#from sklearn.model_selection import RepeatedKFold\n#from sklearn.ensemble import RandomForestRegressor\n\n#model = RandomForestRegressor(max_features=700,criterion='mae',random_state=42,\n#                              max_samples=0.8,n_jobs=-1,min_samples_leaf=3)\n\n#cv = RepeatedKFold(n_splits=5, n_repeats=3, random_state=1)\n\n#n_scores = cross_val_score(model,X_train,y_train,scoring='neg_mean_absolute_error',\n#                          cv=cv, n_jobs=-1, error_score='raise',\n#                          verbose=10)\n\n#print('MAE: %.3f (%.3f)' % (np.mean(n_scores), np.std(n_scores)))","b5c3594f":"import joblib\nfrom joblib import dump,load\nmodel = joblib.load('..\/input\/reg-model\/original_reg_model.joblib')","331b2670":"model.fit(X_train,y_train)","80cafd4e":"predictions = model.predict(X_test).astype('int64')\ndf_submit = test_sample.copy()\ndf_submit['time_to_eruption'] = abs(predictions)\ndf_submit.head(10)","2c883a8a":"print(\"Minimum event time is: {}\".format(df_submit['time_to_eruption'].min()))\nprint(\"Maximum event time is: {}\".format(df_submit['time_to_eruption'].max()))\ndf_submit.to_csv('submission.csv',index=False)","8fc8b91a":"## Nonlinear Kernal PCA\n\nWith the high number of features, I used a Nonlinear PCA to reduce the number of featurs in order to better visualize the relationship between train and test segments.","afbb41e3":"## Generate Training DataFrame\n\nWe'll conduct the power spectral density function on every segment id and flatten it out. We should end up with an array of 4431 samples of 1290 features.","f2d148e1":"## Training and Test Uniformity and Distribution\n\nThere seems to be a discrepency between the distribution of data between the two sets. We'll do a ks_2samp test to illustrate that. We'll take a look at this for each of the 129 features for the 10 sensors and plot it against the 10 sensors.","4598f4ba":"10 sensors with 60001 readings. We also see a significant amount of NaN in there as well. Let's plot the time series data.","ed1b6355":"There are a few sensors that have decent variation and have non-uniform distribution mong the train and test data. We can also plot the features and see we have not addressed the `NaN` within the tables.","62fba419":"## Import and Explore Sample Training File\n\nWe'll take a look at a single `segment_id` to review a file example. At the same time importing the `train.csv` file.","7309aabb":"The random forest appears to handle the missing sensors better. I've had scores with CV and LB differencing by 5M but with this model I've at least been able to reduce the gap between the CV & LB by less than 3 million. One option may be to explore other feature characteristics that align the train and test set better.","b881a8cc":"We see there is a wide scattering between number of test and training segments. Most pronounced is there is a high concentration of training semgents along the y axis which have no similar training sets. This may be due to the high number of 'NaN' in the test set.","7a07f0c9":"We are going to build a feature set for each `segment_id` using the spectral density. This approach evaluates the magnitude of a signal over the range of frequencies. With 100 Hz as the sampling rate, the `signal.welch` function returns 129 features for each sample totaling 1290 features. This is far more manageable than the 60001 features per sensor. This characterizes the event into the plot shown below for each `segment_id`.","15194b70":"## Generate Testing DataFrame\n\nNow we'll do the exact same for all the test data. The files will be read in sequence of the `sample_submission.csv`.","6e283953":"## Standard Scaler\n\nThe best performance I found was simply replacing the `NaN` with zeroes. Below I conduced a Nonlinear Kernal PCA to reduce the features and better compair test\/train segments. I had tried a KNN Imputer but it seems there is too much variation between the test\/train segments to help in the modell itself. ","27ba04a4":"## Random Forest Regression"}}