{"cell_type":{"038cdc1a":"code","8823548f":"code","d73e18e9":"code","6cce3be7":"code","42a4600d":"code","560a8344":"code","fdf3220e":"code","2b0bf2c1":"code","a511e93f":"code","0bf5ec0d":"code","ccc88317":"code","61d79aff":"code","a7aefd37":"code","688c3c0f":"code","32474110":"code","e24c83ca":"code","f063170a":"code","b61b1564":"code","a6614280":"code","54c68d9e":"code","af01f28c":"code","859fa8e3":"code","69df9014":"code","77a11084":"code","1243707c":"code","ef6507bf":"code","8008b3a4":"code","352a207d":"code","a5a91116":"code","ecc66080":"code","f169852b":"code","42cf1d04":"code","7b6cb964":"code","57ee0bbe":"code","99a095da":"code","8c5294a4":"code","7932aafb":"markdown","ed22831f":"markdown","67d9d511":"markdown","9074ec8f":"markdown","c081a77f":"markdown","2a22a469":"markdown","acfa154f":"markdown","d41f671d":"markdown","d579a72d":"markdown","6171c33f":"markdown","4626da88":"markdown","4481891a":"markdown","9e4597cf":"markdown","49748347":"markdown","fc42f5df":"markdown","640e92bd":"markdown","7b71bb3f":"markdown","16434245":"markdown","f53f086b":"markdown","4ab08d4a":"markdown","16d908c5":"markdown","d13925fa":"markdown","76ef0fac":"markdown","e748b147":"markdown","2953161b":"markdown"},"source":{"038cdc1a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport cv2 \nimport matplotlib.pyplot as plt # plotting purpose\nimport os # files processing\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8823548f":"Data_dir = '..\/input\/finger-recognition-dataset\/samples_of_fingers'\ncategories = [\"one-samples\", \"two-samples\", \"Three-samples\", \"Four-samples\"]","d73e18e9":"for category in categories:\n    path = os.path.join(Data_dir, category) # join data directory path to category directory\n    for img in os.listdir(path):\n        img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE) # join image path to category path and read it as gray scale\n        plt.imshow(img_array, cmap = \"gray\") # Display\n        break\n    break","6cce3be7":"img_array","42a4600d":"img_array.shape","560a8344":"img_size = 50\n\nnew_array = cv2.resize(img_array, (img_size, img_size)) # resizes the image to 50","fdf3220e":"plt.imshow(new_array, cmap = \"gray\") \nplt.show()","2b0bf2c1":"training_data = []\n\ndef load_data():\n    for category in categories:\n        path = os.path.join(Data_dir, category)\n        num_class = categories.index(category)\n        for img in os.listdir(path):\n            try:\n                img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)\n                new_array = cv2.resize(img_array, (img_size, img_size))\n                training_data.append([new_array, num_class])\n            except Exception as e:\n                pass","a511e93f":"load_data()","0bf5ec0d":"print(training_data[: 10])","ccc88317":"print(len(training_data))","61d79aff":"import random\nrandom.shuffle(training_data)","a7aefd37":"print(training_data[:10])","688c3c0f":"for labels in training_data[:10]:\n    print(labels[1])","32474110":"X = []\ny = []\nfor features, labels in training_data:\n    X.append(features)\n    y.append(labels)","e24c83ca":"import numpy as np\nX  = np.array(X).reshape(-1, img_size, img_size, 1)","f063170a":"X.shape","b61b1564":"import keras","a6614280":"y = keras.utils.to_categorical(y, num_classes=4)","54c68d9e":"model = keras.Sequential([\n    keras.layers.Conv2D(256, (3,3), strides = (1,1), padding = \"valid\", input_shape = (50, 50, 1)),\n    keras.layers.MaxPooling2D(2,2),\n    \n    keras.layers.Conv2D(128, (3,3), strides = (1,1), padding = \"valid\"),\n    keras.layers.MaxPooling2D(2,2),\n    \n    keras.layers.Conv2D(64, (3,3), strides = (1,1), padding = \"valid\"),\n    keras.layers.MaxPooling2D(2,2),\n    \n    keras.layers.Flatten(),\n    keras.layers.Dense(64, activation = \"relu\"),\n    keras.layers.Dense(4, activation = \"softmax\")\n])\n\nmodel.compile(optimizer = \"Adam\", loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])","af01f28c":"model.fit(X, y, epochs = 5)","859fa8e3":"y_pred = model.predict(X)","69df9014":"y_pred","77a11084":"y_pred.shape","1243707c":"for i in range(len(y_pred)):\n    for j in range(4):\n        if y_pred[i][j] >=0.50:\n            y_pred[i][j] = 1\n        else:\n            y_pred[i][j] = 0","ef6507bf":"y_pred","8008b3a4":"# for i in range(len(y_pred)):\n#     for j in range(4):\n#         if y_pred[i][j] == 1:\n#             print(j+1)","352a207d":"y_pred","a5a91116":"loss, acc = model.evaluate(X, y)\nprint(\"Loss : \", loss)\nprint(\"Accuarcy : \", acc)","ecc66080":"img = '..\/input\/finger-recognition-dataset\/samples_of_fingers\/Four-samples\/101.jpg'\nimg_array_1 = cv2.imread(img, cv2.IMREAD_GRAYSCALE)\nimg_array_1 = cv2.resize(img_array_1, (50,50))\nplt.imshow(img_array_1, cmap = \"gray\")\nplt.show()\nimg_array_1 = np.array(img_array_1).reshape(-1, img_size, img_size, 1)","f169852b":"y_pred_1 = model.predict(img_array_1)","42cf1d04":"y_pred_1","7b6cb964":"for i in range(len(y_pred_1)):\n    for j in range(4):\n        if y_pred_1[i][j] >=0.50:\n            y_pred_1[i][j] = 1\n        else:\n            y_pred_1[i][j] = 0","57ee0bbe":"for i in range(len(y_pred_1)):\n    for j in range(4):\n        if y_pred_1[i][j] == 1:\n            print(\"This is \",j+1)","99a095da":"img_1 = \"..\/input\/finger-recognition-dataset\/samples_of_fingers\/one-samples\/105.jpg\"","8c5294a4":"img_array_2 = cv2.imread(img_1, cv2.IMREAD_GRAYSCALE)\nimg_array_2 = cv2.resize(img_array_2, (50,50))\nplt.imshow(img_array_2, cmap = \"gray\")\nplt.show()\nimg_array_2 = np.array(img_array_2).reshape(-1, img_size, img_size, 1)\ny_pred_2 = model.predict(img_array_2)\nfor i in range(len(y_pred_2)):\n    for j in range(4):\n        if y_pred_2[i][j] >=0.50:\n            y_pred_2[i][j] = 1\n        else:\n            y_pred_2[i][j] = 0\n            \nfor i in range(len(y_pred_2)):\n    for j in range(4):\n        if y_pred_2[i][j] == 1:\n            print(\"This is\",j+1)","7932aafb":"As we know, in predictions array there are some predction scores. Let's make a threshold value.","ed22831f":"Have a look at the accuracy and loss of our model. ","67d9d511":"We have a dataset of having four category images i.e. one-sample, two-samples, three-samples, four-samples.","9074ec8f":"Here is the data directory path and in that there are four sub-directories:\n1. One-sample\n2. Two-sample\n3. Three-sample\n4. Four-sample","c081a77f":"In this notebook, we have used OpenCV and Keras library for making model. Just you can give a image of finger and the model predict whether it is one, two, three or four.\nYou can see model's accuracy is 98.639% \ud83d\ude0e\ud83d\ude0e\ud83d\ude0e\ud83d\ude0e\ud83d\ude0e\ud83d\ude0e\ud83d\ude0e\ud83d\ude0e","2a22a469":"If you have other ideas of having larger accuracy than I have. Then please comment and show your notebooks.","acfa154f":"Let's initializes a array which contains all the array of images in all the categories.\nI have made a function of loading data .","d41f671d":"We reshape the array X into the image shape i.e. (no_of_training_examples, image_size, image_size, 1).\n1 is for gray scale and if you want to read all images in coloured you can use 3 instead of 1 in the reshape function.","d579a72d":"Till then **Enjoy Machine Learning**","6171c33f":"Now, all fine we look forward to all categories and convert images into its corresponding array.","4626da88":"Assign the data to X and labels to y arrays.","4481891a":"Have a look at our predictions.","9e4597cf":"Have a look at the training data of model.","49748347":"Now, for all images we fixed the size of image is 50. ","fc42f5df":"In this dataset, we have four categories and these categories are in a series i.e. first we have four sample images then all the images are of four. So, we shuffle the data by using random.shuffle","640e92bd":"We test the images on our model and see it is correct or not.","7b71bb3f":"And add on the layers in the keras model and compile the model.","16434245":"# Finger Recoginition Model","f53f086b":"Have a look at 50 * 50 size image.","4ab08d4a":"**Importing Libraries**","16d908c5":"Have a look at the array of image.","d13925fa":"First, we read only one image and display this image as Gray Scale.","76ef0fac":"Let's start the training part of our model.","e748b147":"In keras library, there is a fuction to_categorical which do the one hot encoding.","2953161b":"Here we start making model using keras."}}