{"cell_type":{"f2b366ba":"code","ef11dba2":"code","d3b48296":"code","ad0ff10b":"code","5e745f76":"code","2e707e91":"code","ac56b028":"code","68944418":"code","2198fb29":"code","d115798e":"code","ce5b1e06":"code","9621e53b":"code","c70a605b":"code","6bf5d741":"code","a763fdff":"code","87b439f6":"code","826a7ba4":"code","ebb101f4":"code","10bc2756":"code","77b120c6":"code","21771d3d":"code","87e3c984":"code","d3957f3a":"code","2c3c50fc":"code","7d5d5767":"code","40837c48":"code","172c1332":"code","803a9b76":"code","7d748d3f":"code","36ea523f":"code","01dd37b5":"code","3e5e187f":"markdown","37330060":"markdown","70dc1f83":"markdown","ae52724a":"markdown","14d2b138":"markdown","42c9f2d7":"markdown","b4660f38":"markdown","5df36b38":"markdown"},"source":{"f2b366ba":"import os\nprint(os.listdir(\"..\/input\"))\n\nimport numpy as np\nimport pandas as pd\n# import lightgbm as lgb\n\nIDIR = '..\/input\/'","ef11dba2":"print('loading prior')\npriors = pd.read_csv(IDIR + 'order_products__prior.csv', dtype={\n            'order_id': np.int32,\n            'product_id': np.uint16,\n            'add_to_cart_order': np.int16,\n            'reordered': np.int8})\n\nprint('loading train')\ntrain = pd.read_csv(IDIR + 'order_products__train.csv', dtype={\n            'order_id': np.int32,\n            'product_id': np.uint16,\n            'add_to_cart_order': np.int16,\n            'reordered': np.int8})\n\nprint('loading orders')\norders = pd.read_csv(IDIR + 'orders.csv', dtype={\n        'order_id': np.int32,\n        'user_id': np.int32,\n        'eval_set': 'category',\n        'order_number': np.int16,\n        'order_dow': np.int8,\n        'order_hour_of_day': np.int8,\n        'days_since_prior_order': np.float32})\n\nprint('loading products')\nproducts = pd.read_csv(IDIR + 'products.csv', dtype={\n        'product_id': np.uint16,\n        'order_id': np.int32,\n        'aisle_id': np.uint8,\n        'department_id': np.uint8},\n#         usecols=['product_id', 'aisle_id', 'department_id']\n                      )\n\nprint('priors {}: {}'.format(priors.shape, ', '.join(priors.columns)))\nprint('orders {}: {}'.format(orders.shape, ', '.join(orders.columns)))\nprint('train {}: {}'.format(train.shape, ', '.join(train.columns)))","d3b48296":"print(\"Original train mean reorder [no grouping]:\", train.reordered.mean())\nprint(\"Original train mean reorder [order grouping]:\", train.groupby(\"order_id\")[\"reordered\"].mean().mean())\nprint(\"Original train mean reorder [product grouping]:\", train.groupby(\"product_id\")[\"reordered\"].mean().mean())","ad0ff10b":"orders.nunique()","5e745f76":"orders[\"user_count\"] = orders.groupby(\"user_id\")[\"order_id\"].transform(\"count\")","2e707e91":"# orders.user_count.describe()\norders.user_count.hist()","ac56b028":"orders = orders.loc[(orders.user_count > 10) ] #  & (orders.user_count <96)\norders.shape","68944418":"orders.user_count.hist()","2198fb29":"orders.nunique()","d115798e":"import random\n\nsample_users = random.sample(set(orders.user_id),50123)\nlen(sample_users)                 ","ce5b1e06":"orders = orders.loc[orders.user_id.isin(sample_users)]\norders.shape","9621e53b":"orders.head()","c70a605b":"train.head()","6bf5d741":"train.shape","a763fdff":"train.loc[train.order_id.isin(orders.order_id)].shape","87b439f6":"train = train.loc[train.order_id.isin(orders.order_id)]\nprint(train.shape)","826a7ba4":"train[\"product_count\"] = train.groupby(\"product_id\")[\"reordered\"].transform(\"count\")\ntrain[\"product_count\"].hist()","ebb101f4":"train[\"product_count\"].describe()","10bc2756":"print(\"Group filt train mean reorder [no grouping]:\", train.reordered.mean())\nprint(\"Group filt train mean reorder [order grouping]:\", train.groupby(\"order_id\")[\"reordered\"].mean().mean())\nprint(\"Group filt train mean reorder [product grouping]:\", train.groupby(\"product_id\")[\"reordered\"].mean().mean())","77b120c6":"train = train.loc[train[\"product_count\"]>2]\nprint(train.shape)","21771d3d":"train[\"product_count\"].describe()","87e3c984":"products.shape","d3957f3a":"print(\"Original train mean reorder [no grouping]:\", train.reordered.mean())\nprint(\"Original train mean reorder [order grouping]:\", train.groupby(\"order_id\")[\"reordered\"].mean().mean())\nprint(\"Original train mean reorder [product grouping]:\", train.groupby(\"product_id\")[\"reordered\"].mean().mean())","2c3c50fc":"train[\"product_count\"] = train.groupby(\"product_id\")[\"reordered\"].transform(\"count\")\norders[\"user_count\"] = orders.groupby(\"user_id\")[\"order_id\"].transform(\"count\")","7d5d5767":"df_prior = pd.read_csv(IDIR + 'order_products__prior.csv', dtype={\n            'order_id': np.int32,\n            'product_id': np.uint16,\n            'add_to_cart_order': np.int16,\n            'reordered': np.int8})\nprint(df_prior.shape)\ndf_prior.head()","40837c48":"df_prior = df_prior.loc[df_prior.order_id.isin(orders.order_id)]\nprint(df_prior.shape)","172c1332":"df_prior.reordered.mean()","803a9b76":"## Filter by items also\ndf_prior = df_prior.loc[df_prior.product_id.isin(train.product_id)]\nprint(df_prior.shape)\ndf_prior.head()","7d748d3f":"df_prior.reordered.mean().round(2)","36ea523f":"df_prod = pd.read_csv(IDIR + 'products.csv')\nprint(df_prod.shape)\n\ndf_prod = df_prod.merge(pd.read_csv(IDIR + 'aisles.csv'),on=\"aisle_id\")\ndf_prod = df_prod.merge(pd.read_csv(IDIR + 'departments.csv'),on=\"department_id\")\n\nprint(df_prod.shape)\ndf_prod.head()","01dd37b5":"train.to_csv(\"instacart_train_sample_50k.csv.gz\",index=False,compression=\"gzip\")\norders.to_csv(\"instacart_orders_sample_50k.csv.gz\",index=False,compression=\"gzip\")\ndf_prior.to_csv(\"instacart_priorOrders_sample_50k.csv.gz\",index=False,compression=\"gzip\")\n\ndf_prod.to_csv(\"products.csv.gz\",index=False,compression=\"gzip\")","3e5e187f":"* Randomly downsample by user","37330060":"## Merge product metadata tables\n* No reason not to have them in one table\n","70dc1f83":"## Prior orders\n* 32 million rows~ : larger data!\n* Historical data\n* Filter by orders we have left (after user level filtering)","ae52724a":"* Filter the very frequent and very \"small\" users\n* Leaves us with ~ 30%\n* This will likely make any local CV results irreperesentative of real evaluation! ","14d2b138":"## Downsample data for fast experiments\n* Note that downsampling non randomly will bias results strongly. \n* Will want to add W2V embeddings - https:\/\/www.kaggle.com\/omarito\/word2vec-for-products-analysis-0-01-lb","42c9f2d7":"## Export data\n* Don't forget to get the metadata seperately! ","b4660f38":"#### recalculate count feature without \"external knowledge\"","5df36b38":"## Filter low count products (i.e very rare)"}}