{"cell_type":{"c636720a":"code","9c0836c1":"code","7b25fb38":"markdown","36021325":"markdown"},"source":{"c636720a":"import pandas as pd\n\nclass predictSeason():\n    def __init__(self, pred_df, season=2021, PRINT=False):\n        assert 'ID' in pred_df.columns, \"Column 'ID' is not found in your input DataFrame. Check your spelling and capitalization.\"\n        assert 'Pred' in pred_df.columns, \"Column 'Pred' is not found in your input DataFrame. Check your spelling and capitalization.\"\n        assert str(season) in pred_df['ID'].str.slice(0, 4).unique(), f\"{season} season not found in your prediction DataFrame.\"\n        \n        try:\n            self.teams_df = pd.read_csv(f\"..\/input\/ncaam-march-mania-2021-spread\/MDataFiles_Stage{STAGE}_Spread\/MTeams.csv\")\n            self.seeding_df = pd.read_csv(f\"..\/input\/ncaam-march-mania-2021-spread\/MDataFiles_Stage2_Spread\/MNCAATourneySeeds.csv\")\n        except:\n            raise Exception(\"Some files are not found. Ensure the file paths are correct.\")\n            \n        try:\n            self.year_df = self.seeding_df[self.seeding_df['Season'] == season]\n        except:\n            raise Exception(f\"The {season} season is out of range, please try again.\")\n            \n        self.pred_df = pred_df\n        self.season = season\n        self.PRINT = PRINT\n        self.res_list = []\n        \n    def predict_id(self, id1, id2):\n        \"\"\"\n        Returns a boolean stating whether the team with id1 wins.\n        \"\"\"\n        \n        id_str = f\"{self.season}_{min(id1, id2)}_{max(id1, id2)}\"\n        pred = self.pred_df.loc[self.pred_df['ID'] == id_str]['Pred'].iloc[0]\n        res = True if pred >= 0 else False\n        res = (1-res) if id1 > id2 else res\n        return res\n    \n    def team_id(self, id_test):\n        \"\"\"\n        Returns the name of a team with a certain ID.\n        \"\"\"\n        \n        return self.teams_df.loc[self.teams_df['TeamID'] == id_test]['TeamName'].iloc[0]\n    \n    def playin_round(self, id_tuple, div_df, playin_df, seed, div):\n        \"\"\"\n        Handles logic for playin round (before Round of 64).\n        \"\"\"\n        \n        id1, id2 = id_tuple\n        \n        final_res = self.predict_id(id1, id2)\n\n        team1 = f\"{seed} {self.team_id(id1)}\"\n        team2 = f\"{seed} {self.team_id(id2)}\"\n        \n        final_res_str = \"won\" if final_res >= 0 else \"lost\"\n        self.res_list.append([team1, team2, team1 if final_res else team2, \"play-in\", div])\n        print(f\"Play-in round, seeds {team1} played {team2} and {final_res_str}.\") if self.PRINT else 0\n        \n        return div_df.append(playin_df.loc[playin_df['TeamID'] == id1] if final_res else playin_df.loc[playin_df['TeamID'] == id2])\n    \n    def predict_div(self, div):\n        \"\"\"\n        Simulate and return the division winner.\n        \"\"\"\n        \n        div_df = self.year_df.loc[self.year_df['Seed'].str.contains(div)]\n        div_df['Seed'] = div_df['Seed'].str.replace(div, '')\n        div_df['Seed'] = div_df['Seed'].str.lstrip('0')\n\n        # Check for play-in rounds\n        playin_df = div_df.loc[div_df['Seed'].str.len() > 2]\n\n        if len(playin_df):         \n            div_df = div_df.loc[div_df['Seed'].str.len() <= 2]\n            playin_df['Seed'] = playin_df['Seed'].str.slice(0, 2)\n            seed = playin_df.iloc[0]['Seed']\n            id_first = playin_df.iloc[:2]['TeamID'].tolist()\n            div_df = self.playin_round(id_first, div_df, playin_df, seed, div)\n            \n            if len(playin_df) == 4:\n                id_second = playin_df.iloc[-2:]['TeamID'].tolist()\n                div_df = self.playin_round(id_second, div_df, playin_df, 16, div)\n\n        matchup_df = div_df[['Seed', 'TeamID']].set_index('Seed')\n        play_list = [1, 16, 8, 9, 5, 12, 4, 13, 6, 11, 3, 14, 7, 10, 2, 15] # This initial order handles all of the logic we need for the bracket\n        round_num = 64\n\n        while True:\n            \"\"\"\n            Continue until there's a division winner.\n            \"\"\"\n            \n            tmp_list = []\n            for i in range(0, len(play_list), 2):\n                seed1 = str(play_list[i])\n                seed2 = str(play_list[i+1])\n\n                id1 = matchup_df.loc[seed1]['TeamID']\n                id2 = matchup_df.loc[seed2]['TeamID']\n\n                final_res = self.predict_id(id1, id2)\n\n                team1 = f\"{seed1} {self.team_id(id1)}\"\n                team2 = f\"{seed2} {self.team_id(id2)}\"\n\n                final_res_str = \"won\" if final_res else \"lost\"\n                self.res_list.append([team1, team2, team1 if final_res else team2, f\"R{int(round_num)}\", div])\n                print(f\"Seed {team1} played seed {team2} and {final_res_str}.\") if self.PRINT else 0\n\n                tmp_list.append(seed1 if final_res else seed2)\n\n            play_list = tmp_list.copy()\n            round_num \/= 2\n            \n            if len(play_list) <= 1:\n                break\n\n        return matchup_df.loc[play_list[0]]['TeamID']\n    \n    def predict_tour(self):\n        \"\"\"\n        Driver function for creating the bracket. Run this and only this function.\n        \"\"\"\n        \n        div_list = ['W', 'X', 'Y', 'Z']\n        div_winners = {}\n        for div in div_list:\n            print(f\"Division {div}\") if self.PRINT else 0\n            winning_seed = self.predict_div(div)\n            div_winners[div] = winning_seed\n            print(\"\\n\") if self.PRINT else 0\n        \n        # Under the assumption that Division W always plays Division X in the Final Four\n        \n        id1 = div_winners['W']\n        id2 = div_winners['X']\n        id3 = div_winners['Y']\n        id4 = div_winners['Z']\n        \n        team1 = self.team_id(id1)\n        team2 = self.team_id(id2)\n        team3 = self.team_id(id3)\n        team4 = self.team_id(id4)\n        \n        # F4 W & X\n        final_res_1 = self.predict_id(id1, id2)\n        final_res_str_1 = \"won\" if final_res_1 else \"lost\"\n        f4_winner_1 = [id1, team1] if final_res_1 else [id2, team2]\n        self.res_list.append([team1, team2, team1 if final_res_1 else team2, \"R4\", \"F4\"])\n        print(f\"{team1} played {team2} and {final_res_str_1}.\") if self.PRINT else 0\n        \n        # F4 Y & Z\n        final_res_2 = self.predict_id(id3, id4)\n        final_res_str_2 = \"won\" if final_res_2 else \"lost\"\n        f4_winner_2 = [id3, team3] if final_res_2 else [id4, team4]\n        self.res_list.append([team3, team4, team3 if final_res_2 else team4, \"R4\", \"F4\"])\n        print(f\"{team3} played {team4} and {final_res_str_2}.\") if self.PRINT else 0\n        \n        # Championship\n        champ_res_final = self.predict_id(f4_winner_1[0], f4_winner_2[0])\n        champ_res_str = \"won\" if champ_res_final else \"lost\"\n        champion = f4_winner_1[1] if champ_res_final else f4_winner_2[1]\n        self.res_list.append([f4_winner_1[1], f4_winner_2[1], champion, \"R2\", \"Finals\"])\n        print(f\"THE CHAMPION FOR THE {self.season} SEASON IS {champion}!!!\")\n        \n        res_df = pd.DataFrame(data=self.res_list, columns=[\"Team 1\", \"Team 2\", \"Winner\", \"Round\", \"Division\"])\n        return res_df","9c0836c1":"pred_df = model.predict(X) # my DataFrame of predictions\nmy_season = predictSeason(pred_df)\nres_df = my_season.predict_tour() # store all the results\npd.set_option('display.max_rows', 68) # set so you can see all of the rows in the DataFrame\nres_df","7b25fb38":"<h3> Example Code <\/h3>","36021325":"# Generate a March Madness Bracket\n\nIf you are seeing this before March 20, 2021, I've created a public ESPN March Madness brackets group <a href=\"https:\/\/fantasy.espn.com\/tournament-challenge-bracket\/2021\/en\/group?redirect=tcmen%3A%2F%2Fx-callback-url%2FshowGroup%3FgroupID%3D4123218&ex_cid=tcmen2021_email&groupID=4123218&inviteuser=ezU2NUJEOTAyLUU5MzktNDhCNC05QkQ5LTAyRTkzOTI4QjQxRn0%3D&invitesource=email\"> <strong>here<\/strong><\/a>, so feel free to join! If you do decide to join, please only submit brackets that your model generated so as to not ruin the integrity of the competition.\n\n<h2> How do I generate the DataFrame of predictions? <\/h2>\n\nSave your predictions in the following csv\/Pandas DataFrame format. Ensure your columns are named exactly ```ID``` and ```Pred```; otherwise, the code won't work.\n\n<img src=\"https:\/\/lh3.googleusercontent.com\/2ovFfUcFoM4m8E75N-z4bv7mCXRT4mtZpBxC8OlZJE_kXO58K_G1KAHirByQku0qfmg-t44=s1000\">\n\n> Example input DataFrame\n\nInitialize the ```predictSeason``` class with your DataFrame of predictions and use the ```predict_tour``` method to obtain the DataFrame of results. Example code is shown below:\n```\npred_df = model.predict(X) # my DataFrame of predictions\nmy_season = predictSeason(pred_df)\nres_df = my_season.predict_tour() # store all the results\npd.set_option('display.max_rows', 68) # set so you can see all of the rows in the DataFrame\nres_df\n```\n\nThe other parameters you can initialize for the ```predictSeason``` class are:\n* ```season (int)``` where $\\text{season} \\in [2003, 2019] \\cup [2021]$. Change this variable if you would like to use your model to predict the bracket for a different season. I've tested this for about half of the possible years, so please let me know if there's a season where this code fails. Additionally, if you do decide to do this, ensure that ```pred_df``` has the predictions for that season! \n* ```PRINT (bool)```. If set to ```True```, the result of each game will be printed to the terminal.\n\n<h2> How do I use my DataFrame of simulated tournament games to fill out my March Madness bracket? <\/h2>\n\nFirst, ensure your output DataFrame looks like mine in the image below:\n\n<img src=\"https:\/\/lh3.googleusercontent.com\/ApjWyH9IBpqDtXUK9IDyOM2u6y9AHgKhJymc8wZMtf2PS4azFeKo2wnH1qczoraOd0Yhpw=s1000\">\n\n> Example DataFrame of simulated tournament games\n\nThe results are shown from top to bottom in the following order: ```play-in, R64, R32, R16, R8 (div winner)``` for all 4 divisions in the order ```W, X, Y, Z```, and then the final four\/championship winners. I personally read the list from top to bottom and keep track of the seeds as I go. For clarity, there are two additional columns, ```Round``` and ```Division```, which should help you navigate the bracket creation process and allow you to make your predictions accordingly.\n\n<h2> Bugs\/Questions <\/h2>\n    \nIf you find any bugs with the code or have any questions, please let me know in the comments section!"}}