{"cell_type":{"5fc3d10e":"code","c145da2a":"code","13ac0f92":"code","263a9fef":"code","321d1ec9":"code","e3bc4da2":"code","ff01d255":"code","bbebe0e0":"markdown","215e60d5":"markdown"},"source":{"5fc3d10e":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","c145da2a":"book_train_path='..\/input\/optiver-realized-volatility-prediction\/book_train.parquet'\ntrain=pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\n","13ac0f92":"def get_volatility(wap_val):\n    s=np.log(wap_val)\n    s=np.diff(s)\n    s=(s**2).sum()\n    s=np.sqrt(s)\n    return s\n\ndef get_volatility_per_minute(row):\n    seconds_in_bucket=np.array(row.seconds_in_bucket)\n    wap=np.array(row.wap)\n    rv=[]\n    \n    for i in np.arange(60, 601, 60):\n        s=i-60; e=i\n        time_idx=np.where(seconds_in_bucket[(seconds_in_bucket>=s) & (seconds_in_bucket<=e)])[0]\n        wap_val=wap[time_idx]\n        if len(wap_val) == 0:\n            rv.append(0)\n            continue\n        rv.append( get_volatility(wap_val))\n    return rv\n\ndef get_bucket_volatility():\n    all_df=pd.DataFrame()\n    for i, filepath in enumerate(os.listdir(book_train_path)):\n        if i == 10:\n            break\n        path=os.path.join(book_train_path, filepath)\n        stock_id=int(filepath.split('=')[-1])\n        \n        df=pd.read_parquet(path)\n        df['stock_id']=stock_id\n        df['wap'] = (df['bid_price1'] * df['ask_size1'] + df['ask_price1'] * df['bid_size1'])\n        df['wap'] \/= (df['ask_size1']+df['bid_size1'])\n        \n        \n        \n        df=df.groupby(['stock_id', 'time_id'])[['seconds_in_bucket', 'wap']].agg(list).reset_index()\n        df['min_rv'] = df.apply(get_volatility_per_minute, axis=1)\n        df['bucket_rv']=df['wap'].apply(get_volatility)\n        \n        df=df[['stock_id', 'time_id', 'min_rv', 'bucket_rv']].copy()\n        all_df=pd.concat([all_df, df])\n    return all_df","263a9fef":"%%time\nbucket_df=get_bucket_volatility()\nbucket_df=bucket_df.merge(train)\n\nbucket_df.head()","321d1ec9":"def visualize_bucket_volatility(stock_id, time_id):\n    sample_df=bucket_df[(bucket_df.stock_id==stock_id) & (bucket_df.time_id==time_id)].copy()\n    min_rv=sample_df.min_rv.values[0]\n    bucket_rv=sample_df.bucket_rv.values[0]\/2\n    target=sample_df.target.values[0]\/2\n\n    plt.figure(figsize=(10, 5))\n    plt.plot(min_rv+[bucket_rv], color='g', label='Bucket RV')\n    plt.plot(min_rv+[target], color='r', label='Target')\n    \n    plt.plot(min_rv, color='b')\n    plt.legend(loc='upper left')\n    plt.title(\"StockId:{} - Time Id:{}\".format(stock_id, time_id))\n    plt.show()","e3bc4da2":"bucket_df['rv_diff']=bucket_df['target'] - bucket_df['bucket_rv']\nbucket_df.head()","ff01d255":"visualize_bucket_volatility(97, 5)\nvisualize_bucket_volatility(97, 31)\n","bbebe0e0":"# Work In Progress...","215e60d5":"> Lets get the volatility for every 1-min in the bucket."}}