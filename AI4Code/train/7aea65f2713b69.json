{"cell_type":{"b4c4e9fc":"code","51946647":"code","886c11a7":"code","a3914e43":"code","21d21970":"code","88346054":"code","665aacdd":"code","ab574519":"code","92549a0f":"code","ff9834fc":"code","ec647d48":"code","69d072cb":"code","57ca07d2":"code","d5615fbe":"code","99ceabd9":"code","2c68f877":"code","1a5f2bee":"markdown","5132e39e":"markdown","c5db620e":"markdown","c599ec45":"markdown","3674ba99":"markdown","fdaa711c":"markdown","36883073":"markdown","3fc0a36a":"markdown"},"source":{"b4c4e9fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","51946647":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.core.display import HTML\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()","886c11a7":"def Correlation_heat_map(df):\n    ax = sns.heatmap(df.corr(), vmin = -1, vmax = 1)\n    labels = [t.get_text() for t in ax.get_xticklabels()]\n    ax.set_xticklabels(labels, rotation=30, horizontalalignment=\"right\")\n    sns.set(rc={'figure.figsize':(10,10)}, font_scale=1.4)","a3914e43":"def desc(df, name):\n    cm = sns.light_palette(\"gray\", as_cmap=True)\n    display(HTML('<h2><B><span style=\"padding-left: 30%\";>' + f\"{name} shape {df.shape}\" + \"<\/span><\/h2>\"))    \n    desc = pd.DataFrame(\n            {\n                'dtypes' : df.dtypes,\n                'nunique': df.nunique(),\n                \"nans\": df.isna().sum()\n            }\n        ).reset_index(level=0).merge(df.describe().T.reset_index(level=0), how = 'left').sort_values('nunique')\n    style1 = desc.style.background_gradient(cmap=cm, subset=['nunique'])\n    style2 = desc.style.set_properties(**{'font-weight': 'bold'}, subset = ['index'])\n    style2.use(style1.export())\n    display(style2)\n    return desc","21d21970":"calendar = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv')\nsales_train = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')\nsell_prices = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv')","88346054":"desc(calendar, 'calendar');\ndesc(sell_prices, 'sell_prices');\ndisplay(HTML('<h2><B><span style=\"padding-left: 30%\";>' + f\"sales_train shape {sales_train.shape}\" + \"<\/span><\/h2>\"))\ndisplay(sales_train.head(5))","665aacdd":"labels = ['FOODS', 'HOBBIES', 'HOUSEHOLD']\nsales_by_cat = sales_train.groupby('cat_id').sum()\nsales_by_cat= sales_by_cat.T.reset_index()\nsales_by_cat.columns = ['d', 'FOODS', 'HOBBIES', 'HOUSEHOLD']\nsales_by_cat = sales_by_cat.merge(calendar[['date', 'd']])\nsales_by_cat = sales_by_cat.drop('d', axis = 1)\nsales_by_cat = sales_by_cat.set_index('date')\nsales_by_cat.index = pd.to_datetime(sales_by_cat.index)\n","ab574519":"sales_by_cat.resample('W').mean().plot(figsize = (20,12))\nplt.title(\"Distribution of sales by categories in every store\", fontdict={'size': 25});\n","92549a0f":"display(HTML('<h2><B><span style=\"padding-left: 20%\";>' + \"Days when no store sold food or household category product\" + \"<\/span><\/h2>\"))\ncalendar.loc[calendar.d.str[2:].astype('int').isin(np.where(sales_by_cat == 0)[0])]","ff9834fc":"sales_by_cat = None\nlabels = None","ec647d48":"store_cat = sales_train.groupby(['store_id', 'cat_id'],as_index=True).sum()\nlabels = store_cat.index","69d072cb":"c = 1\nplt.figure(figsize=(23,40))\nfor i in store_cat.index.get_level_values(0).unique():\n    plt.subplot(5,2,c)\n    c +=1\n    temp = store_cat.loc[i].T.reset_index()\n    temp.columns = ['d', 'FOODS', 'HOBBIES', 'HOUSEHOLD']\n    temp = temp.merge(calendar[['date', 'd']])\n    temp = temp.drop('d', axis = 1)\n    temp = temp.set_index('date')\n    temp.index = pd.to_datetime(temp.index)\n    plt.title(i)\n    temp.resample('W').mean().plot(ax = plt.gca())\n    plt.legend(loc='best')","57ca07d2":"store_gr = sales_train.groupby(['store_id'],as_index=True).sum()\nstore_gr = store_gr.T.reset_index()\nstore_gr.columns = ['d', 'CA_1', 'CA_2', 'CA_3', 'CA_4', 'TX_1', 'TX_2', 'TX_3', 'WI_1',\n       'WI_2', 'WI_3']\nstore_gr = store_gr.merge(calendar[['d','date']]).drop('d',axis=1)\nstore_gr = store_gr.set_index('date')\nstore_gr.index = pd.to_datetime(store_gr.index)\n\nplt.figure(figsize=(23,13))\nplt.title('Distribution of sales by every store (two month resample)', fontdict={'size': 25})\nstore_gr.resample('2M').mean().plot(ax = plt.gca())\nplt.xlabel('Date', fontdict = {'size': 20});\n","d5615fbe":"store_cat = None\nstore_gr = None\nlabels = None","99ceabd9":"plt.figure(figsize = (20,7))\nplt.title('Price distribution by category', fontdict={'size':20})\nplt.xlim(0,22)\nsns.distplot(sell_prices.loc[sell_prices.item_id.str.contains('HOBBIES')].sell_price, label='HOBBIES')\nsns.distplot(sell_prices.loc[sell_prices.item_id.str.contains('FOODS')].sell_price, label='FOODS')\nsns.distplot(sell_prices.loc[sell_prices.item_id.str.contains('HOUSEHOLD')].sell_price, label='HOUSEHOLD')\nplt.legend(loc = 'best')\n","2c68f877":"plt.figure(figsize = (16,13))\nplt.title('Price distribution by dept id', fontdict={'size':20})\n\nplt.subplot(3,1,1)\nplt.xlim(0,16)\nsns.distplot(sell_prices.loc[sell_prices.item_id.str.contains('HOBBIES_1')].sell_price, label='HOBBIES_1')\nsns.distplot(sell_prices.loc[sell_prices.item_id.str.contains('HOBBIES_2')].sell_price, label='HOBBIES_2')\nplt.xlabel('')\n\nplt.legend(loc = 'best')\n\n\nplt.subplot(3,1,2)\nplt.xlim(0,22)\nsns.distplot(sell_prices.loc[sell_prices.item_id.str.contains('HOUSEHOLD_1')].sell_price, label='HOUSEHOLD_1')\nsns.distplot(sell_prices.loc[sell_prices.item_id.str.contains('HOUSEHOLD_2')].sell_price, label='HOUSEHOLD_2')\nplt.xlabel('')\nplt.legend(loc = 'best')\n\n\nplt.subplot(3,1,3)\nplt.xlim(0,13)\nsns.distplot(sell_prices.loc[sell_prices.item_id.str.contains('FOODS_1')].sell_price, label='FOODS_1')\nsns.distplot(sell_prices.loc[sell_prices.item_id.str.contains('FOODS_2')].sell_price, label='FOODS_2')\nsns.distplot(sell_prices.loc[sell_prices.item_id.str.contains('FOODS_3')].sell_price, label='FOODS_3')\nplt.xlabel('Sell Price', fontdict={'size': 13})\nplt.legend(loc = 'best')\n","1a5f2bee":"# Basic analysis","5132e39e":"People do not prone to buy households and hobbies at 24 of december (Christmas Eve)","c5db620e":"## Price distribution","c599ec45":"# Imports","3674ba99":"# Functions","fdaa711c":"## Desc","36883073":"\n## Store distribution ","3fc0a36a":"## Category distribution"}}