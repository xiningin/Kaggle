{"cell_type":{"45dfb410":"code","9c0ed52c":"code","ed7f2700":"code","565ab66b":"code","a1806288":"code","69fdd8da":"code","3fa38f79":"code","a22dcc9f":"code","dba92bb2":"code","22e48edf":"code","bb2c1ef3":"code","a50e2614":"code","e1fd47da":"code","fd3877e0":"code","115dacb4":"code","60f54319":"code","460da48d":"code","d58866e3":"code","a75af01b":"code","ea22da5c":"code","4d84df9a":"code","1469c1e3":"code","ae80ff74":"code","146a5b08":"code","1c9a2c5f":"markdown","35794542":"markdown","f6eeab3b":"markdown","a4921a20":"markdown","2f18abdb":"markdown","7fd7d340":"markdown","16841977":"markdown","cc03b5fd":"markdown","ea8833b4":"markdown","6b24c3e0":"markdown","80a344a6":"markdown","b7895150":"markdown","cd4f5301":"markdown"},"source":{"45dfb410":"import numpy as np\nimport pandas as pd\nimport warnings\nfrom sklearn.metrics.pairwise import cosine_similarity\nwarnings.filterwarnings('ignore')","9c0ed52c":"anime = pd.read_csv(\"..\/input\/anime.csv\")\nanime.head()","ed7f2700":"# only select tv show and movie\nprint(anime.shape)\nanime = anime[(anime['type'] == 'TV') | (anime['type'] == 'Movie')]\nprint(anime.shape)","565ab66b":"# only select famous anime, 75% percentile\nm = anime['members'].quantile(0.75)\nanime = anime[(anime['members'] >= m)]\nanime.shape","a1806288":"rating = pd.read_csv(\"..\/input\/rating.csv\")\nrating.head()","69fdd8da":"rating.shape","3fa38f79":"rating.loc[rating.rating == -1, 'rating'] = np.NaN\nrating.head()","a22dcc9f":"anime_index = pd.Series(anime.index, index=anime.name)\nanime_index.head()","dba92bb2":"joined = anime.merge(rating, how='inner', on='anime_id')\njoined.head()","22e48edf":"joined = joined[['user_id', 'name', 'rating_y']]\n\npivot = pd.pivot_table(joined, index='name', columns='user_id', values='rating_y')\npivot.head()","bb2c1ef3":"pivot.shape","a50e2614":"pivot.dropna(axis=1, how='all', inplace=True)\npivot.head()","e1fd47da":"pivot.shape","fd3877e0":"pivot_norm = pivot.apply(lambda x: x - np.nanmean(x), axis=1)\npivot_norm.head()","115dacb4":"# fill NaN with 0\npivot_norm.fillna(0, inplace=True)\npivot_norm.head()","60f54319":"# convert into dataframe to make it easier\nitem_sim_df = pd.DataFrame(cosine_similarity(pivot_norm, pivot_norm), index=pivot_norm.index, columns=pivot_norm.index)\nitem_sim_df.head()","460da48d":"def get_similar_anime(anime_name):\n    if anime_name not in pivot_norm.index:\n        return None, None\n    else:\n        sim_animes = item_sim_df.sort_values(by=anime_name, ascending=False).index[1:]\n        sim_score = item_sim_df.sort_values(by=anime_name, ascending=False).loc[:, anime_name].tolist()[1:]\n        return sim_animes, sim_score","d58866e3":"animes, score = get_similar_anime(\"Steins;Gate\")\nfor x,y in zip(animes[:10], score[:10]):\n    print(\"{} with similarity of {}\".format(x, y))","a75af01b":"# predict the rating of anime x by user y\ndef predict_rating(user_id, anime_name, max_neighbor=10):\n    animes, scores = get_similar_anime(anime_name)\n    anime_arr = np.array([x for x in animes])\n    sim_arr = np.array([x for x in scores])\n    \n    # select only the anime that has already rated by user x\n    filtering = pivot_norm[user_id].loc[anime_arr] != 0\n    \n    # calculate the predicted score\n    s = np.dot(sim_arr[filtering][:max_neighbor], pivot[user_id].loc[anime_arr[filtering][:max_neighbor]]) \\\n            \/ np.sum(sim_arr[filtering][:max_neighbor])\n    \n    return s","ea22da5c":"predict_rating(3, \"Steins;Gate\")","4d84df9a":"predict_rating(3, \"Cowboy Bebop\")","1469c1e3":"# recommend top n_anime for user x based on item collaborative filtering algorithm\ndef get_recommendation(user_id, n_anime=10):\n    predicted_rating = np.array([])\n    \n    for _anime in pivot_norm.index:\n        predicted_rating = np.append(predicted_rating, predict_rating(user_id, _anime))\n    \n    # don't recommend something that user has already rated\n    temp = pd.DataFrame({'predicted':predicted_rating, 'name':pivot_norm.index})\n    filtering = (pivot_norm[user_id] == 0.0)\n    temp = temp.loc[filtering.values].sort_values(by='predicted', ascending=False)\n\n    # recommend n_anime anime\n    return anime.loc[anime_index.loc[temp.name[:n_anime]]]","ae80ff74":"get_recommendation(3)","146a5b08":"get_recommendation(5)","1c9a2c5f":"# Join the data","35794542":"# Read the data","f6eeab3b":"## Get Recommendation","a4921a20":"# Create a pivot table","2f18abdb":"# Create index for anime name","7fd7d340":"# Replacing missing rating with NaN","16841977":"# Item Based Collaborative Filtering\n![banner](https:\/\/raw.githubusercontent.com\/varian97\/Anime-Recommender-System\/master\/image.png)","cc03b5fd":"# Item Based Collaborative Filtering","ea8833b4":"# Center the mean around 0 (centered cosine \/ pearson)","6b24c3e0":"Compared to the user based collaborative filtering, the recommendation given may be very different. As we know, in the user based, so many user did not rate the anime. In the item based however, I think it is more robust because there is no anime that never rated by users.","80a344a6":"## Helper Function","b7895150":"## Calculate Similar Items","cd4f5301":"# Drop all users that never rate an anime"}}