{"cell_type":{"6e9159a4":"code","88047da2":"code","5acdf755":"code","901096ec":"code","18246c0b":"code","50840ddc":"code","a14495ae":"code","c968b0ff":"code","48769665":"code","08eaafa7":"code","7196335b":"code","df0cb8f6":"code","c76718d2":"code","d13ec59b":"code","1efb69f8":"code","f0b90d76":"code","59bc24a8":"code","6f240f87":"markdown","dbaa618a":"markdown","586c27b7":"markdown","0918288d":"markdown","2accff04":"markdown","dd42fbc4":"markdown","d2e54334":"markdown"},"source":{"6e9159a4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","88047da2":"# Loading the data\ndf = pd.read_csv('\/kaggle\/input\/tv-marketing-data\/tvmarketing.csv')","5acdf755":"# Let's check the length of the data\nlen(df)","901096ec":"# Check out the head of the dataframe\ndf.head()","18246c0b":"# Let's check stats of the model\ndf.describe()","50840ddc":"# Now let's try to make a scatter plot of the data\nsns.scatterplot(df['TV'],df['Sales'])","a14495ae":"# Let's check if we have any missing value in the data\ndf.isnull().sum()","c968b0ff":"# Now divide the data into depenedent(output) and independent(features\/input) variables\n# X-----> feature     &      y------>output\n\nX = df.iloc[:,0] \ny = df.iloc[:,1]","48769665":"# First of all split the data into train and test set\nfrom sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test = train_test_split(X, y, test_size = 0.3, random_state = 56)","08eaafa7":"X_train.shape","7196335b":"X_train = X_train.values.reshape(-1,1)\ny_train = y_train.values.reshape(-1,1)\nX_test = X_test.values.reshape(-1,1)\ny_test = y_test.values.reshape(-1,1)","df0cb8f6":"# Lets's import the linear regression algorithm\nfrom sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()","c76718d2":"# Let's make the linear model by fitting on to the data\nmodel = lr.fit(X_train, y_train)","d13ec59b":"# Let's predict\ny_pred = model.predict(X_test)","1efb69f8":"# Let's compare predicted and actual values\ndf = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred.flatten()})\ndf\n","f0b90d76":"# Let's plot these results\nplt.scatter(X_test, y_test,  color='blue')\nplt.plot(X_test, y_pred, color='red', linewidth=2)\nplt.show()","59bc24a8":"# Let's check our model's performance in terms of different metrices\nfrom sklearn import metrics\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","6f240f87":"### Now let's apply our linear regression algorithm. ","dbaa618a":"It's pretty clear from the plot that as the advertising budget got increased the sales went up.","586c27b7":"Since, our algorith will require 2-D data to operate open. So let's change the shape of the train and test sets","0918288d":"## This data contains problem of linear regression. So, we will use the linear regresssion to predict the sales. Let's see how","2accff04":"### In linear regression our algorith strives to find the best fit line for the data so that the error between the actual data points and predit best fit line points should be minimum.","dd42fbc4":"### Thanks to all and give an upvote if you like the work","d2e54334":"No missing values let's move forward"}}