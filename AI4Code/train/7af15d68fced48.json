{"cell_type":{"2178f96d":"code","0f0dd8c7":"code","8bbf04e3":"code","f43d85d6":"code","3c4cede5":"code","a491e5be":"code","c7b52cf0":"code","4b395707":"code","0786b24e":"code","b3e8a172":"code","a1d2d485":"code","04fa11b3":"code","816f17b2":"code","6a986e46":"code","93d1e568":"code","b60abf9b":"code","8017711a":"code","1e871a69":"code","4a990b26":"code","e3365bd3":"code","ca8c2a20":"code","4bbdcdd8":"code","c352be50":"code","288d8641":"code","b4da6836":"code","56258d80":"code","8a8d7e79":"code","b2ab34b0":"code","33f596b3":"code","205699ca":"code","3578305a":"code","48cc4d88":"code","66ff7d9e":"markdown","7d44e4fa":"markdown","e39cff70":"markdown","ae7d07e3":"markdown","0cc4045a":"markdown","80e3ae2c":"markdown","12863fb0":"markdown","3dc8506d":"markdown","76b041a9":"markdown"},"source":{"2178f96d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0f0dd8c7":"import os\nimport os.path as osp\nimport sys\nfrom tqdm import tqdm_notebook as tqdm\nfrom IPython.display import display, clear_output","8bbf04e3":"%%time\npath = '\/kaggle\/input\/data-science-bowl-2019\/'\ntrain_df = pd.read_csv(osp.join(path, 'train.csv'))\ntest_df = pd.read_csv(osp.join(path, 'test.csv'))\ntrain_labels_df = pd.read_csv(osp.join(path, 'train_labels.csv'))\nspecs_df = pd.read_csv(osp.join(path, 'specs.csv'))\nsub_df = pd.read_csv(osp.join(path, 'sample_submission.csv'))","f43d85d6":"def show_df_info(df):\n    display(df.head(2), df.columns, df.shape)","3c4cede5":"show_df_info(train_df)","a491e5be":"show_df_info(train_labels_df)","c7b52cf0":"def get_shared_columns(df_1, df_2):\n    return [x for x in df_1.columns if x in df_1.columns and x in df_2.columns]\n    \nshares_column_names = get_shared_columns(train_labels_df, train_df)\ndisplay(shares_column_names)","4b395707":"show_df_info(test_df)","0786b24e":"get_shared_columns(train_labels_df, test_df)","b3e8a172":"get_shared_columns(train_df, test_df)","a1d2d485":"show_df_info(specs_df)","04fa11b3":"display(get_shared_columns(specs_df, train_df),\n        get_shared_columns(specs_df, train_labels_df),\n        get_shared_columns(specs_df, test_df))","816f17b2":"show_df_info(sub_df)","6a986e46":"accuracy_group = np.array(train_labels_df['accuracy_group'])\ndisplay(set(accuracy_group))","93d1e568":"%%time\ntrain = pd.merge(train_df, train_labels_df, on = ['game_session', 'installation_id', 'title'])\nshow_df_info(train)","b60abf9b":"%%time\ntrain = pd.merge(train, specs_df, on = ['event_id'])\nshow_df_info(train)","8017711a":"%%time\ntest = pd.merge(test_df, sub_df, on=['installation_id'])\nshow_df_info(test)","1e871a69":"%%time\ntest = pd.merge(test, specs_df, on=['event_id'])\nshow_df_info(test)","4a990b26":"columns = get_shared_columns(train, test)\nid_str = 'installation_id'\ntarget_str = 'accuracy_group'\nfeatures = [column for column in columns if column not in [id_str, target_str]]\n\ndisplay(columns, len(columns), features, len(features))","e3365bd3":"%%time\nfeatures_numbers = [len(set(train[feature])) for feature in features]\ndisplay(features, features_numbers)","ca8c2a20":"from fastai import *\nfrom fastai.tabular import *","4bbdcdd8":"dep_var = 'accuracy_group'\ncat_names = features\ncont_names = []\nprocs = [FillMissing, Categorify, Normalize]","c352be50":"from sklearn.model_selection import StratifiedKFold\n\nn_splits = 3\nskf = StratifiedKFold(n_splits=n_splits, shuffle=True)","288d8641":"%%time\ntrain_id = train[id_str]\nx = train[features]\ny = train[target_str]\ndisplay(x.shape, y.shape)","b4da6836":"val = TabularList.from_df(train.iloc[int(865447*0.8):865447].copy(), path=path, cat_names=cat_names, cont_names=cont_names)","56258d80":"%%time\ndata = (TabularList.from_df(train, path=path, cat_names=cat_names, cont_names=cont_names, procs=procs)\n                           .split_by_idx(list(range(int(865447*0.8),865447)))\n                           .label_from_df(cols=dep_var)\n                           .add_test(val, label=0)\n                           .databunch())","8a8d7e79":"learn = tabular_learner(data, layers=[200,100], metrics=accuracy)","b2ab34b0":"learn.fit_one_cycle(2, 1e-3)","33f596b3":"# train_index_list = []\n# val_index_list = []\n# for train_index, val_index in skf.split(x, y):\n#     train_index_list.append(train_index)\n#     val_index_list.append(val_index)","205699ca":"# Get the random results\naccuracy_group_list = np.random.randint(2, 4, size=(sub_df.shape[0], 1))\naccuracy_group_list","3578305a":"sub_df['accuracy_group'] = accuracy_group_list\nsub_df.head()","48cc4d88":"sub_df.to_csv('submission.csv', index=False)","66ff7d9e":"# 2 Feature engineering","7d44e4fa":"# 3 Model","e39cff70":"So, we have a problem with 4 classes\n\nNow, we join some table for getting the training dataset.","ae7d07e3":"**Almost columns are categorical feature, oh my god!**","0cc4045a":"# 4 submission","80e3ae2c":"# 1 EDA","12863fb0":"Firstly, I don't want to do feature enginneering. I will use the NN to solve this problem.","3dc8506d":"```python\nIndex(['event_id', 'game_session', 'timestamp', 'event_data',\n       'installation_id', 'event_count', 'event_code', 'game_time', 'title',\n       'type', 'world'],\n      dtype='object')\n```\n\n```python\nIndex(['game_session', 'installation_id', 'title', 'num_correct',\n       'num_incorrect', 'accuracy', 'accuracy_group'],\n      dtype='object')\n```","76b041a9":"**What is the classes?**\n"}}