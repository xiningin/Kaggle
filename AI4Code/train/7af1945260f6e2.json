{"cell_type":{"39de16b8":"code","19a5dc75":"code","5d9b235e":"code","6ce36e1d":"code","1628ddf1":"code","d14c15fa":"code","ab876a1e":"code","23411cb9":"code","31e6dace":"code","0e679699":"code","2488fb5e":"code","3700fa1e":"code","3475b833":"code","051379e8":"code","bec62f6e":"code","1ea5af84":"code","4727f9fb":"code","91f9bc26":"code","aeb50c8d":"code","f65e31e9":"code","cadbb056":"code","f0dfd2cb":"code","ae4cab55":"markdown","d21b8f4f":"markdown","10a6ed83":"markdown","35e34c31":"markdown","8565f295":"markdown","0832565e":"markdown","6adb76b3":"markdown","55c0405d":"markdown","1325e568":"markdown","a2680727":"markdown","bb55414f":"markdown","f152d442":"markdown","e17c83f7":"markdown"},"source":{"39de16b8":"# check directory of input\nimport os\nprint(os.listdir(\"\/kaggle\/input\/\"))","19a5dc75":"# check directory of sign-language-mnist\nprint(os.listdir(\"\/kaggle\/input\/sign-language-mnist\"))","5d9b235e":"from IPython.display import Image\nImage(\"\/kaggle\/input\/sign-language-mnist\/amer_sign2.png\")","6ce36e1d":"Image(\"\/kaggle\/input\/sign-language-mnist\/american_sign_language.PNG\")","1628ddf1":"# Import Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow.keras import models, layers\nfrom tensorflow.keras.utils import to_categorical","d14c15fa":"# Read Dataset\ntrain = pd.read_csv('..\/input\/sign-language-mnist\/sign_mnist_train.csv')\ntest = pd.read_csv('..\/input\/sign-language-mnist\/sign_mnist_test.csv')","ab876a1e":"# show data format\ntrain.head()","23411cb9":"# get labels \nlabels = train['label']","31e6dace":"# droping the label coloumn from the training set\ntrain.drop('label', axis = 1, inplace = True)\nprint(train.shape)","0e679699":"# Reshape\nx_train = train.values.reshape(train.shape[0],28,28,1)","2488fb5e":"# Show a reshape image\nplt.imshow(x_train[0].reshape(28,28), cmap='gray')","3700fa1e":"# explore the label distribution of training images\nplt.figure(figsize = (18,8))\nsns.countplot(x =labels)","3475b833":"# one-hot encoding\nlabels = to_categorical(labels)\nprint(labels.shape)","051379e8":"# Split Dataset into Train and Test\nx_train, x_test, y_train, y_test = train_test_split(x_train, labels, test_size = 0.2, random_state = 2)","bec62f6e":"# Normalize Dataset\nx_train = x_train \/ 255.0\nx_test = x_test \/ 255.0","1ea5af84":"print(x_train.shape)\nprint(x_test.shape)","4727f9fb":"num_classes = 25\ninput_shape = (28,28,1)","91f9bc26":"# Build Model\nmodel = models.Sequential()\n\nmodel.add(layers.Conv2D(64, kernel_size=(3,3), padding='same', activation = 'relu', input_shape=input_shape ))\nmodel.add(layers.MaxPooling2D(pool_size = (2, 2)))\n\nmodel.add(layers.Conv2D(64, kernel_size = (3, 3), padding='same', activation = 'relu'))\nmodel.add(layers.MaxPooling2D(pool_size = (2, 2)))\n\nmodel.add(layers.Conv2D(64, kernel_size = (3, 3), padding='same', activation = 'relu'))\nmodel.add(layers.MaxPooling2D(pool_size = (2, 2)))\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(128, activation = 'relu'))\nmodel.add(layers.Dropout(0.20))\nmodel.add(layers.Dense(num_classes, activation = 'softmax'))\n\nmodel.summary()","aeb50c8d":"# Compile Model\nmodel.compile(loss = 'categorical_crossentropy', optimizer = 'adam' , metrics = ['accuracy'])","f65e31e9":"# Train Model\nbatch_size = 128\nnum_epochs = 20\n\nhistory = model.fit(x_train, y_train, batch_size=batch_size, epochs=num_epochs, validation_data = (x_test, y_test))","cadbb056":"# Show Train History\nkeys=history.history.keys()\nprint(keys)\n\ndef show_train_history(hisData,t1,t2): \n    plt.plot(hisData.history[t1])\n    plt.plot(hisData.history[t2])\n    plt.title('Training History')\n    plt.ylabel('value')\n    plt.xlabel('epoch')\n    plt.legend([t1, t2], loc='upper left')\n    plt.show()\n\nshow_train_history(history, 'loss', 'val_loss')\nshow_train_history(history, 'accuracy', 'val_accuracy')","f0dfd2cb":"# Test Accuracy\nscore = model.evaluate(x_test, y_test, verbose = 0)\nprint('Test loss: ', score[0])\nprint('Test accuracy: ', score[1])","ae4cab55":"## Read Dataset","d21b8f4f":"## Train Model","10a6ed83":"# Sign-Language MNIST","35e34c31":"## Data exploration","8565f295":"## Training History","0832565e":"## American Sign Language (ASL)","6adb76b3":"## Prepare Data","55c0405d":"each picture is 28x28 pixels","1325e568":"## Evaluate Model","a2680727":"## Build CNN model","bb55414f":"## Introduction ","f152d442":"Each letter indicates a sign produced by our fingers.","e17c83f7":"*As you can see each one is almost equally distributed !*"}}