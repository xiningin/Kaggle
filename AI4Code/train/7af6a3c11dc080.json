{"cell_type":{"b9b002eb":"code","dc8417bc":"code","41896e51":"code","8b722d79":"code","5b0b4652":"code","8be8059c":"code","f25700a4":"code","b6fb24ba":"code","4a8502ec":"code","e5b7e251":"code","028a2dc8":"code","44421035":"code","ed2ea115":"code","16dd0e3c":"code","5ed731c2":"code","4d1bdd6e":"code","182dc3e4":"code","9b6437bb":"code","7741ec7d":"code","d710bf18":"code","b0caf155":"code","d5d11fe3":"code","26030daa":"code","1091540d":"code","bbe19f55":"code","0e2b5f95":"code","8c9b0759":"code","9aba4dc6":"code","52c5072c":"code","b419a8b2":"code","68347c99":"code","1dec8283":"code","b9537646":"code","9986afa5":"code","a9677296":"code","ff50a22a":"code","e1554a73":"code","813f2b06":"code","0f987493":"code","a40d9cbc":"code","12663442":"code","1be1561f":"code","9011cbb5":"code","d2a9d3d4":"code","dbc6a060":"code","b39c5196":"code","25d04766":"code","e79f95ab":"code","77779bf8":"code","0ca7e5ed":"code","1ed5a63e":"code","047894d8":"code","df4c604d":"code","e4a9dc3a":"code","ede21caa":"code","bc7a24be":"code","8954b239":"code","3b43b577":"code","68bb1187":"code","8f85791f":"code","bb1e8eb7":"code","abf93e1c":"code","05a4af45":"code","492dc535":"code","df363d04":"code","5c20217c":"code","7cbf9660":"code","d33253d9":"code","13c349e3":"code","9c42195e":"code","47cdbd4a":"code","75b267d3":"code","518d2bc2":"code","17672fc4":"code","d9f0da35":"code","bfadc612":"code","56657ffa":"code","ee5ba1c1":"code","c864a1eb":"code","7b03f121":"code","5141b6af":"code","c96909fa":"code","56519445":"code","99eccb1a":"code","c5b77d44":"code","ec675cc2":"code","181f74f2":"markdown","2ca4ec22":"markdown","70f09165":"markdown","594e1683":"markdown","64ec4a62":"markdown","6fcb7c52":"markdown","cede550e":"markdown","46f17492":"markdown","89bda46e":"markdown","e58a94b9":"markdown","d7340b57":"markdown","06e414f8":"markdown","4cc7d0ff":"markdown","b6340be8":"markdown","fa5498f0":"markdown","8c9da78f":"markdown"},"source":{"b9b002eb":"#Let\u2019s use a for loop to print out each name in a list of magicians:\n\n\nmagicians = ['alice', 'david', 'carolina'] \n","dc8417bc":"for magician in magicians:\n  print(magician)","41896e51":"for magician in magicians:\n  print(f'{magician.title()},That was great trick!')","8b722d79":"for magician in magicians:\n  print(f'{magician.title()},That was great trick!')\n  print(f\"I can't wait to see your next trick, {magician.title()}.\\n\")","5b0b4652":" for magician in magicians:\n  print(f'{magician.title()},That was great trick!')\n  print(f\"I can't wait to see your next trick, {magician.title()}.\\n\")\n \n print(\"Thank you, everyone. That was a great magic show!\")","8be8059c":"\n#LIST\n\n#Example :\n\npizza=  ['pizza1','pizza2','pizza3']\n","f25700a4":"for pizzas in pizza:\n  print(f\"{pizzas.title()},I like pepperonipizza!\")\n  print(f'What kind of the pizza u like,{pizzas.title()}.')\n  \nprint(\"i love the pizza.........\")","b6fb24ba":"#for the value or integer \n\n#using the range function \n\nfor i in range(1,5):\n  print(i)","4a8502ec":"#Using range() to Make a List of Numbers\n#normal\nnum=list(range(0,5))\nprint(num)\n\n#for the even number \nnum=list(range(0,5,2))\nprint(num)\n\n\n#for the odd number \nnum=list(range(0,5,1))\nprint(num)","e5b7e251":"#square method \n\nsquares=[]\n\nfor i in range(1,5):\n  square= i**2\n  squares.append(square)\n  \nprint(squares)","028a2dc8":"#we can write same code in this ways \n\nsquares = []\n\nfor i in range(1,11):\n  squares.append(i**2)\n\nprint(squares)","44421035":"\n#list of the number \ndigits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n\n","ed2ea115":"print(max(digits))\n\nprint(min(digits))\n\n\nsum(digits)","16dd0e3c":"#List Comprehensions\nsquares = [i**2 for i in range(1, 11)]\nprint(squares)\n\n","5ed731c2":"# Q1=Counting to Twenty: Use a for loop to print the numbers from 1 to 20,\n\n# Q2=One Million: Make a list of the numbers from one to one million, and then use a for loop to print the numbers. (If the output is taking too long, stop it by\n#pressing ctrl-C or by closing the output window.)\n\n#Q3=Make a list of the numbers from one to one million,and then use min() and max() to make sure your list actually starts at one and\n#ends at one million. Also, use the sum() function to see how quickly Python canadd a million numbers.\n\n#Q4:Use the third argument of the range() function to make a list of the odd numbers from 1 to 20. Use a for loop to print each number.\n\n#Q5:Make a list of the multiples of 3 from 3 to 30. Use a for loop to print the numbers in your list.\n\n#Q6:A number raised to the third power is called a cube. For example,\n#the cube of 2 is written as 2**3 in Python. Make a list of the first 10 cubes (that is, the cube of each integer from 1 through 10), and use a for loop to print outthe value of each cube.\n\n#Q6:Use a list comprehension to generate a list of the first 10 cubes.","4d1bdd6e":"#Q1 \n\nfor i in range(1,20):\n  print(i)","182dc3e4":"\n\n#for i in range(1,1000000):\n  #print(i)","9b6437bb":"#q5\nnum=[]\n\nfor i in range(0,11):\n  number=  i**3\n  num.append(number)\nprint(num)","7741ec7d":"#q6 comprensive list \n\ncube= [i**3 for i in range(0,10)]\nprint(cube)","d710bf18":"#Looping Through a Slice\n\nplayers = ['charles', 'martina', 'michael', 'florence', 'eli'] ","b0caf155":"print(\"Here the list of the player\")\nfor player in players[:4]:\n  print(player.title())\n","d5d11fe3":"#Copying a List:you\u2019ll want to start with an existing list and make an entirely new list  based on the first one\nmy_foods = ['pizza', 'falafel', 'carrot cake']\nfriend_food=my_foods[:]","26030daa":"print(\"My favorite food are :\")\nprint(my_foods)\n\n\nprint(\"My friend favorite food are:\")\nprint(friend_food)","1091540d":"#add the new string \n\nmy_foods.append(\"mango\")\n\n\nfriend_food.append(\"ice cream\")\n","bbe19f55":"print(\"My favorite food are :\")\nprint(my_foods)\n\n\nprint(\"My friend favorite food are:\")\nprint(friend_food)","0e2b5f95":"#if -else case \n\ncars = ['audi', 'bmw', 'subaru', 'toyota']\nfor car in cars:\n if car == 'bmw':\n  print(car.upper())\n else:\n  print(car.title())","8c9b0759":"#checking the iniquality \nrequested_topping = 'mushrooms'\n\n\nif requested_topping != 'anchovies':\n  print(\"Hold the anchovies!\")\n","9aba4dc6":"ans =17\n\nif ans !=20:\n  print(\"That is not correct. Please try again later\")","52c5072c":"\n#  and, or \n\na =22\nb=18\n\nprint(a>=21 and b>=21)\nprint(a>=21 or b>=21)\n","b419a8b2":"#check the thing in available in list \n\nlist = ['mushrooms', 'onions', 'pineapple']","68347c99":"'mushrooms' in list ","1dec8283":"'satyam' in  list ","b9537646":"#using the banned list of the customer \n\nblist = ['Dinesh','Sarvesh','Suraj']\n\nuser='Satyam'\n","9986afa5":"if user not in  blist:\n  print(f\"{user.title()}, you can post a response if you wish.\")","a9677296":"requested_toppings = ['mushrooms', 'green peppers', 'extra cheese']\n\n\nfor requested_topping in requested_toppings:\n  \n print(f\"Adding {requested_topping}.\")\nprint(\"\\nFinished making your pizza!\")","ff50a22a":"for requested_topping in requested_toppings:\n  \n if requested_topping == 'green peppers':\n  print(\"Sorry, we are out of green peppers right now.\")\nelse:\n print(f\"Adding {requested_topping}.\")\nprint(\"\\nFinished making your pizza!\")","e1554a73":"#Checking That a List Is Not Empty\n\nrequested_toppings = []","813f2b06":"if requested_toppings:\n for requested_topping in requested_toppings:\n  print(f\"Adding {requested_topping}.\")\n  print(\"\\nFinished making your pizza!\")\nelse:\n print(\"Are you sure you want a plain pizza?\")","0f987493":"#multiple list \n\navailable_toppings = ['mushrooms', 'olives', 'green peppers','pepperoni', 'pineapple', 'extra cheese']\n\nrequested_toppings = ['mushrooms', 'french fries', 'extra cheese']","a40d9cbc":"for requested_topping in requested_toppings:\n  if requested_topping in available_toppings:\n    print(f\"adding {requested_topping}.\")\n  else:\n    print(f\"Sorry,we dont have {requested_topping}.\")\nprint(\"Finish making pizza \")","12663442":"#dictionary \n\n#key and value \n\n\nfavorite_languages = {'jen': 'python','sarah': 'c','edward': 'ruby','phil': 'python'}","1be1561f":"for key, value in favorite_languages.items():\n print(f\"\\nKey: {key}\")\n print(f\"Value: {value}\")","9011cbb5":"for name, language in favorite_languages.items():\n print(f\"{name.title()}'s favorite language is {language.title()}.\")","d2a9d3d4":"#Looping Through All the Keys in a Dictionary\n\nfor name in favorite_languages.keys():\n  print(name.title())","dbc6a060":"#all the value in dictonary \nfor language in favorite_languages.values():\n  print(language.title())","b39c5196":" friends = ['phil', 'sarah']\nfor name in favorite_languages.keys():\n  print(name.title())\n\n if name in friends:\n  language = favorite_languages[name].title()\n  print(f\"\\t{name.title()}, I see you love {language}!\")\n","25d04766":"if 'erin' not in favorite_languages:\n  print(\"Erin, Please take our poll\")","e79f95ab":"#Looping Through a Dictionary\u2019s Keys in a Particular Order\n\nfavorite_languages","77779bf8":"for name in sorted(favorite_languages.keys()):\n  print(f'{name.title()},Thank you for the taking poll.')","0ca7e5ed":"#Nesting: we can do for all list and tuple and dictionary \n\nalien_0 = {'color': 'green', 'points': 5}\nalien_1 = {'color': 'yellow', 'points': 10}\nalien_2 = {'color': 'red', 'points': 15}","1ed5a63e":"#merge all list \n\naliens = [alien_0, alien_1, alien_2]","047894d8":"for alien in aliens:\n print(alien)","df4c604d":"#use range() to create a fleet of 30 aliens\n\n# Make an empty list for storing aliens.\n\naliens = []\n\n# Make 30 green aliens.\nfor alien_number in range(30):\n  new_alien = {'color': 'green', 'points': 5, 'speed': 'slow'}\n  aliens.append(new_alien)\n\n","e4a9dc3a":"# Show the first 5 aliens.\nfor alien in aliens[:5]:\n print(alien)\nprint(\"...\")","ede21caa":"# Show how many aliens have been created.\nprint(f\"Total number of aliens: {len(aliens)}\")\n","bc7a24be":"for alien in aliens[:3]:\n if alien['color'] == 'green':\n  alien['color'] = 'yellow'\n  alien['speed'] = 'medium'\n  alien['points'] = 10\n","8954b239":"# Show the first 5 aliens.\nfor alien in aliens[:5]:\n print(alien)\nprint(\"...\")","3b43b577":"\nfor alien in aliens[0:3]:\n if alien['color'] == 'green':\n  alien['color'] = 'yellow'\n  alien['speed'] = 'medium'\n  alien['points'] = 10\n elif alien['color'] == 'yellow':\n  alien['color'] = 'red'\n  alien['speed'] = 'fast'\n  alien['points'] = 15","68bb1187":"for alien in aliens[:5]:\n print(alien)\nprint(\"...\")","8f85791f":"#A List in a Dictionary\n## Store information about a pizza being ordered.\n\npizza = {'crust': 'thick','toppings': ['mushrooms', 'extra cheese']}\n","bb1e8eb7":"# Summarize the order.\nprint(f\"You ordered a {pizza['crust']}-crust pizza \"\n \"with the following toppings:\")\n","abf93e1c":"for topping in pizza['toppings']:\n print(\"\\t\" + topping)\n","05a4af45":"\n\n\nusers = {'aeinstein': {'first': 'albert','last': 'einstein','location': 'princeton',},'mcurie': {'first': 'marie','last': 'curie','location': 'paris',}}","492dc535":"for username, user_info in users.items():\n  print(f\"\\nUsername: {username}\")\n  full_name = f\"{user_info['first']} {user_info['last']}\"\n  location = user_info['location']\n  print(f\"\\tFull name: {full_name.title()}\")\n  print(f\"\\tLocation: {location.title()}\")","df363d04":"#How the input() Function Works\nmessage = input(\"Tell me something, and I will repeat it back to you: \")\nprint(message)","5c20217c":"name = input(\"Please enter your name: \")\nprint(f\"\\nHello, {name}!\")\n","7cbf9660":"age = input(\"how old you are :\")\nprint(\"age : \",age)","d33253d9":"height=input(\"What is your hight ? \")\nheight=int(height)\n\n\nprint(\"\\n Height :\",height)\nif height>48:\n  print(\"\\n You are tall enough to ride.\")\nelse:\n  print(\"\\n You will able to ride when you will be little older\")","13c349e3":"#The Modulo Operator\n\n4 % 3,5 % 3,6 % 3,7 % 3","9c42195e":"number = input(\"Enter a number, and I'll tell you if it's even or odd: \")\nnumber = int(number)\n\nif number % 2 == 0:\n print(f\"\\nThe number {number} is even.\")\nelse:\n print(f\"\\nThe number {number} is odd.\")","47cdbd4a":"#Restaurant Seating:\n\n\npeople =input(\"How many people are in Dinner Group\")\npeople=int(people)\n\nif people>8:\n  print(\"\\n Please wait for the table Otherwise.\\nreport that their table is ready.\")\nelse:\n  print(\"\\nPlease take Tabel.\\nTable is Ready for the Dinner.\")\n","75b267d3":"#You can use a while loop to count up through a series of numbers. For example, the following while loop counts from 1 to 5:\ncurrent_number = 0\n\nwhile current_number <= 5:\n print(\"current num =\",current_number*5)\n current_number += 1","518d2bc2":"prompt = \"\\nTell me something, and I will repeat it back to you:\"\nprompt += \"\\nEnter 'quit' to end the program. \"","17672fc4":"message = \"\"\nwhile message != 'quit':\n message = input(prompt)\n print(message)","d9f0da35":"prompt = \"\\nTell me something, and I will repeat it back to you:\"\nprompt += \"\\nEnter 'quit' to end the program. \"\n\nmessage = \"\"\nwhile message != 'quit':\n message = input(prompt)\n\n if message != 'quit':\n  print(message)","bfadc612":"prompt = \"\\nTell me something, and I will repeat it back to you:\"\nprompt += \"\\nEnter 'quit' to end the program. \"","56657ffa":"#flag\n\nactive=True\nwhile active:\n  message=input(prompt)\n  if message =='quit':\n    active=False\n  else:\n    print(message)\n\n","ee5ba1c1":"#Using break to Exit a Loop\n\nprompt=\"\\n Please Enter The City You Visited\"\nprompt +=\"\\n(Enter 'quit' when you are finished.) \"\n\nwhile True:\n  city=input(prompt)\n  if city == 'quit':\n    break\n  else:\n    print(f\"I'd love to go to {city.title()}!\")","c864a1eb":"#Using continue in a Loop\n","7b03f121":"#if i need to print only the odd number \n\ncurrent_number =0\nwhile current_number<10:\n  current_number +=1\n  if current_number % 2==0:\n    continue\n  print(current_number)\n \n","5141b6af":"\nage =input(\"Please Enter the age of the Person\")\nage=int(age)\n\nif age<3 :\n  print(\"The Ticket is free!\")\n\nelif age <=12:\n  print(\"The Ticket price is : $10\")\n\nelif age>12:\n  print('The ticket Price is : $15')\n\n\n\n","c96909fa":"#Using a while Loop with Lists and Dictionaries\n\n","56519445":"# Start with users that need to be verified,\n#users.py # and an empty list to hold confirmed users.\n\n\nunconfirmed_users = ['alice', 'brian', 'candace']\nconfirmed_users = []\n\n#verify the user until the unconfirmed user no more \n\n#Move the verify user the to the confirmed_user list \n\nwhile unconfirmed_users:\n  current_user=unconfirmed_users.pop()\n\n  print(f\"Verifying User :{current_user.title()}\")\n  confirmed_users.append(current_user)\n","99eccb1a":"# Display all confirmed users.\nprint(\"\\nThe following users have been confirmed:\")\nfor confirmed_user in confirmed_users:\n print(confirmed_user.title())","c5b77d44":"#@Removing All Instances of Specific Values from a List\n\npets = ['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']\n\nprint(pets)\n\nwhile 'cat' in pets:\n pets.remove('cat')\n\nprint(pets)\n","ec675cc2":"responses = {}\n\n\n# Set a flag to indicate that polling is active.\npolling_active = True\n\nwhile polling_active:\n # Prompt for the person's name and response.\n name = input(\"\\nWhat is your name? \")\n response = input(\"Which mountain would you like to climb someday? \")\n\n\n #Store the response in the dictionary.\n responses[name] = response\n\n # Find out if anyone else is going to take the poll.\n repeat = input(\"Would you like to let another person respond? (yes\/ no \/ Yes \/ No) \")\n if repeat == 'no' or \"No\":\n  polling_active = False\n\n\n\n# Polling is complete. Show the results.\nprint(\"\\n--- Poll Results ---\")\n\nfor name, response in responses.items():\n print(f\"{name} would like to climb {response}.\")\n\n ","181f74f2":"#WHILE LOOP \n#Input","2ca4ec22":"These aliens all have the same characteristics, but Python considers each one a separate object, which allows us to modify each alien\nindividually.\nHow might you work with a group of aliens like this? Imagine that one\naspect of a game has some aliens changing color and moving faster as the\ngame progresses. When it\u2019s time to change colors, we can use a for loop and\nan if statement to change the color of aliens. For example, to change the\nfirst three aliens to yellow, medium-speed aliens worth 10 points each, we\ncould do this:","70f09165":"#Using a Flag\nIn the previous example, we had the program perform certain tasks while\na given condition was true. But what about more complicated programs in\nwhich many different events could cause the program to stop running?\nFor example, in a game, several different events can end the game.\nWhen the player runs out of ships, their time runs out, or the cities they\nwere supposed to protect are all destroyed, the game should end. It needs\nto end if any one of these events happens. If many possible events might\noccur to stop the program, trying to test all these conditions in one while\nstatement becomes complicated and difficult.\nFor a program that should run only as long as many conditions are true,\nyou can define one variable that determines whether or not the entire program is active. This variable, called a flag, acts as a signal to the program. We\ncan write our programs so they run while the flag is set to True and stop running when any of several events sets the value of the flag to False. As a result,\nour overall while statement needs to check only one condition: whether or\nnot the flag is currently True. Then, all our other tests (to see if an event has\noccurred that should set the flag to False) can be neatly organized in the rest\nof the program.\nLet\u2019s add a flag to parrot.py from the previous section. This flag, which\nwe\u2019ll call active (though you can call it anything), will monitor whether or\nnot the program should continue running:","594e1683":"#while\nThe for loop takes a collection of items and executes a block of code once\nfor each item in the collection. In contrast, the while loop runs as long as,\nor while, a certain condition is true. ","64ec4a62":"Rather than breaking out of a loop entirely without executing the rest of its\ncode, you can use the continue statement to return to the beginning of the\nloop based on the result of a conditional test. For example, consider a loop\nthat counts from 1 to 10 but prints only the odd numbers in that range:","6fcb7c52":"So far, we\u2019ve worked with only one piece of user information at a time. We\nreceived the user\u2019s input and then printed the input or a response to it.\nThe next time through the while loop, we\u2019d receive another input value\nand respond to that. But to keep track of many users and pieces of information, we\u2019ll need to use lists and dictionaries with our while loops.\nA for loop is effective for looping through a list, but you shouldn\u2019t modify\na list inside a for loop because Python will have trouble keeping track of the\nitems in the list. To modify a list as you work through it, use a while loop.\nUsing while loops with lists and dictionaries allows you to collect, store, and\norganize lots of input to examine and report on later. ","cede550e":"#if -else case ","46f17492":"You could expand this loop by adding an elif block that turns yellow\naliens into red, fast-moving ones worth 15 points each. Without showing the\nentire program again, that loop would look like this:","89bda46e":"**MATHEMATICAL**: [ +, - ,* ,\/ ,% ,^, ** ,% ,()] \n\n**RELATIONAL** : [ > , <,  >= , <= ] [ RETURNS THE LOGICAL VALUE ] \n\n**COMPARISON**: [ == ]\n\n**LOGICAL** : [AND & OR | NOT !]","e58a94b9":"We first define a dictionary called users with two keys: one each for the\nusernames 'aeinstein' and 'mcurie'. The value associated with each key is a\ndictionary that includes each user\u2019s first name, last name, and location. At u\nwe loop through the users dictionary. Python assigns each key to the variable\nusername, and the dictionary associated with each username is assigned to the\nvariable user_info. Once inside the main dictionary loop, we print the username at v.\nAt w we start accessing the inner dictionary. The variable user_info,\nwhich contains the dictionary of user information, has three keys: 'first',\n'last', and 'location'. We use each key to generate a neatly formatted full\nname and location for each person, and then print a summary of what we\nknow about each user x:\n","d7340b57":"#The approach described earlier for generating the list squares consisted ofusing three or four lines of code.\n\n #A list comprehension allows you to generate this same list in just one line of code. \n\nA list comprehension combines the for loop and the creation of new elements into one line, and automatically\nappends each new element. \n\nList comprehensions are not always presented to beginners, but I have included them here because you\u2019ll most likely see them as soon as you start looking at other people\u2019s code.","06e414f8":"Rather than putting a dictionary inside a list, it\u2019s sometimes useful to put\na list inside a dictionary. For example, consider how you might describe a\npizza that someone is ordering. If you were to use only a list, all you could\nreally store is a list of the pizza\u2019s toppings. With a dictionary, a list of toppings can be just one aspect of the pizza you\u2019re describing.\nIn the following example, two kinds of information are stored for each\npizza: a type of crust and a list of toppings. The list of toppings is a value\nassociated with the key 'toppings'. To use the items in the list, we give the\nname of the dictionary and the key 'toppings', as we would any value in the\ndictionary. Instead of returning a single value, we get a list of toppings:","4cc7d0ff":"#Moving Items from One List to Another\nConsider a list of newly registered but unverified users of a website. After\nwe verify these users, how can we move them to a separate list of confirmed\nusers? One way would be to use a while loop to pull users from the list of\nunconfirmed users as we verify them and then add them to a separate list of\nconfirmed users. Here\u2019s what that code might look like:\n","b6340be8":"Movie Tickets: A movie theater charges different ticket prices depending on\na person\u2019s age. If a person is under the age of 3, the ticket is free; if they are\n\nbetween 3 and 12, the ticket is $10; and if they are over age 12, the ticket is\n$15. Write a loop in which you ask users their age, and then tell them the cost\nof their movie ticket.","fa5498f0":"#Letting the User Choose When to Quit","8c9da78f":"7-1. Rental Car: Write a program that asks the user what kind of rental car they\nwould like. Print a message about that car, such as \u201cLet me see if I can find you a Subaru.\u201d\n\n7-2. Restaurant Seating: Write a program that asks the user how many people\nare in their dinner group. If the answer is more than eight, print a message saying they\u2019ll have to wait for a table. Otherwise, report that their table is ready.\n\n\n7-3. Multiples of Ten: Ask the user for a number, and then report whether the\nnumber is a multiple of 10 or not."}}