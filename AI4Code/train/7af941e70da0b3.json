{"cell_type":{"b4736fd3":"code","67ab5b28":"code","35386d88":"code","7688f2c1":"code","9aacaefc":"code","246c3f4c":"code","cec111f7":"code","316d6b50":"code","b8596ab9":"code","36c1c38e":"code","b6c72c0f":"code","81ba4940":"code","61d7e30e":"code","f2fcd0d6":"code","c683d020":"code","933c25a4":"code","4da6f178":"code","22a268ad":"code","666812a9":"code","89d868e8":"code","eb15078e":"code","a148b864":"code","d88c1898":"code","9bd44057":"code","9f3b6d3c":"code","d58a281c":"code","e6226418":"code","7836e51f":"code","f3957a61":"code","712948a0":"code","4f37b984":"markdown","404048fb":"markdown","95d86b17":"markdown","b20d8bbd":"markdown","f7da6755":"markdown"},"source":{"b4736fd3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport os \nimport glob as gb\nimport cv2\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67ab5b28":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nimport tensorflow as tf\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\n\nsns.set(style='white', context='notebook', palette='deep')","35386d88":"tf.__version__","7688f2c1":"train_data = pd.read_csv('..\/input\/nicht-mnist\/train.csv',header=None, index_col=0)\ntrain_data","9aacaefc":"test_data = pd.read_csv('..\/input\/nicht-mnist\/test.csv',header=None, index_col=0)\ntest_data","246c3f4c":"train_data[1] = pd.Categorical(train_data[1])\ntrain_data[1] = train_data[1].cat.codes\ntrain_data[1]","cec111f7":"df_test = train_data.sample(frac=0.3, random_state=7)\ndf_train = train_data.drop(df_test.index)","316d6b50":"y_train = df_train.iloc[:,0]\nx_train = df_train.iloc[:,1:]\ny_val = df_train.iloc[:,0]\nx_val = df_train.iloc[:,1:]","b8596ab9":"x_train","36c1c38e":"y_train.value_counts()","b6c72c0f":"train_data.isnull().any().sum(), test_data.isnull().any().sum()","81ba4940":"len(y_train.value_counts())","61d7e30e":"x_train = x_train \/ 255.0 \nx_val = x_val \/ 255.0 ","f2fcd0d6":"x_train_np = np.vstack([[np.array(r).astype('uint8').reshape(28,28, 1) for i, r in x_train.iterrows()] ] )\nx_val_np = np.vstack([[np.array(r).astype('uint8').reshape(28,28, 1) for i, r in x_val.iterrows()] ] )","c683d020":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","933c25a4":"model.build()\nmodel.summary()","4da6f178":"optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","22a268ad":"model.compile(optimizer = optimizer , loss = \"SparseCategoricalCrossentropy\", metrics=[\"accuracy\"])","666812a9":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","89d868e8":"epochs = 20\nbatch_size = 10","eb15078e":"datagen = ImageDataGenerator(\n        rotation_range=10,\n        zoom_range = 0.1,\n        width_shift_range=0.1,\n        height_shift_range=0.1)\n\n\ndatagen.fit(x_train_np)","a148b864":"history = model.fit_generator(datagen.flow(x_train_np,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (x_val_np,y_val),\n                              verbose = 2, steps_per_epoch=x_train_np.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","d88c1898":"model.evaluate(x_val_np,  y_val, verbose=2)","9bd44057":"test_data = test_data \/ 255.0\ntest_data","9f3b6d3c":"x_test_np = np.vstack([[np.array(r).astype('uint8').reshape(28,28, 1) for i, r in test_data.iterrows()] ] )","d58a281c":"model.predict(x_test_np)","e6226418":"preds = np.argmax(model.predict(x_test_np), axis=1).tolist()","7836e51f":"class_labels = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\npred_labes = pd.Series([class_labels[p] for p in preds])\npred_labes","f3957a61":"out_df = pd.DataFrame({\n    'Id': test_data.index,\n    'target': pred_labes\n})\nout_df","712948a0":"out_df.to_csv('my_submission.csv', index=False)\nprint('Done!!!')","4f37b984":"# Normalization.","404048fb":"# Load data.","95d86b17":"# import deep learning & machine learning libraries.","b20d8bbd":"# Reshaping.","f7da6755":"# Check for null and missing values."}}