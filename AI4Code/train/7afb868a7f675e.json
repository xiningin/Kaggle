{"cell_type":{"a49af4f6":"code","860893a9":"code","ab43dcdc":"code","2591442e":"code","0118dbda":"code","9b3c1cd4":"code","b355ede3":"code","44f81761":"code","ca4b8183":"code","881efa03":"code","7882ba63":"code","4eaa64d0":"code","44535ef1":"markdown"},"source":{"a49af4f6":"# importing necessary libraries\nimport pandas as pd\nimport warnings # current version of seaborn generates a bunch of warnings that we'll ignore\nwarnings.filterwarnings(\"ignore\")\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set(style=\"white\", color_codes=True)\n\n# loading dataset provided with the original notebook\niris = pd.read_csv(\"..\/input\/Iris.csv\") # the iris dataset is now a Pandas DataFrame\n","860893a9":"# Let's see how many examples we have of each species\niris[\"Species\"].value_counts()","ab43dcdc":"# Since Iris is already a Pandas data frame, we can use any Pandas functions with .function.\n# We'll use this to make a scatterplot of the Iris features.\niris.plot(kind=\"scatter\", x=\"SepalLengthCm\", y=\"SepalWidthCm\")\n# The kind of plot one should use is dictated by the dataset. It's not useful to visualize this data with a line plot.\niris.plot(kind=\"line\", x=\"SepalLengthCm\", y=\"SepalWidthCm\")","2591442e":"# We can also use the seaborn library to make a similar plot\n# A seaborn jointplot shows bivariate scatterplots and univariate histograms in the same figure\nsns.jointplot(x=\"SepalLengthCm\", y=\"SepalWidthCm\", data=iris, size=6)","0118dbda":"# One piece of information missing in the plots above is what species each plant is\n# We'll use seaborn's FacetGrid to color the scatterplot by species\nsns.FacetGrid(iris, hue=\"Species\", size=5) \\\n   .map(plt.scatter, \"SepalLengthCm\", \"SepalWidthCm\") \\\n   .add_legend()\n# Another BAD example of choices for attributes\nsns.FacetGrid(iris, hue=\"SepalLengthCm\", size=5) \\\n   .map(plt.scatter, \"Species\", \"SepalWidthCm\") \\\n   .add_legend()","9b3c1cd4":"# We can look at an individual feature in Seaborn through a boxplot\nsns.boxplot(x=\"Species\", y=\"PetalLengthCm\", data=iris)","b355ede3":"# One way we can extend this plot is adding a layer of individual points on top of\n# it through Seaborn's striplot\n# \n# We'll use jitter=True so that all the points don't fall in single vertical lines\n# above the species\n#\n# Saving the resulting axes as ax each time causes the resulting plot to be shown\n# on top of the previous axes\nax = sns.boxplot(x=\"Species\", y=\"SepalWidthCm\", data=iris)\nax = sns.stripplot(x=\"Species\", y=\"SepalWidthCm\", data=iris, edgecolor=\"blue\")\n\n# Jittering can be used to scatter points, which are laying on top of each other\n\nax = sns.boxplot(x=\"Species\", y=\"SepalWidthCm\", data=iris)\nax = sns.stripplot(x=\"Species\", y=\"SepalWidthCm\", data=iris,jitter=True, edgecolor=\"blue\")\n","44f81761":"# A violin plot combines the benefits of the previous two plots and simplifies them\n# Denser regions of the data are fatter, and sparser thiner in a violin plot\nsns.violinplot(x=\"Species\", y=\"PetalLengthCm\", data=iris, size=6)","ca4b8183":"# A final seaborn plot useful for looking at univariate relations is the kdeplot,\n# which creates and visualizes a kernel density estimate of the underlying feature\nsns.FacetGrid(iris, hue=\"Species\", size=7) \\\n   .map(sns.kdeplot, \"PetalLengthCm\") \\\n   .add_legend()","881efa03":"# Another useful seaborn plot is the pairplot, which shows the bivariate relation\n# between each pair of features\n# \n# From the pairplot, we'll see that the Iris-setosa species is separataed from the other\n# two across all feature combinations\nsns.pairplot(iris.drop(\"Id\", axis=1), hue=\"Species\", size=2)","7882ba63":"# The diagonal elements in a pairplot show the histogram by default\n# We can update these elements to show other things, such as a kde\nsns.pairplot(iris.drop(\"Id\", axis=1), hue=\"Species\", size=3, diag_kind=\"kde\")","4eaa64d0":"# Now that we've covered seaborn, let's go back to some of the ones we can make with Pandas\n# We can quickly make a boxplot with Pandas on each feature split out by species\niris.drop(\"Id\", axis=1).boxplot(by=\"Species\", figsize=(12, 8))","44535ef1":"## This notebook demonstrates some ways to visualize data with python. It's based on [this notebook](http:\/\/)https:\/\/www.kaggle.com\/benhamner\/python-data-visualizations\/data and was edited by Joe Triassi\n\nPersonal Information\nName: Joe Triassi\nMatrikelnummer: 5228196\nCourse: Objektorientierte Programmierung LV 3.2 (ZEDAT_M_5501E22_19W)\nDozent: Kiril Ralinovski\nSemester: WiSe 19\/20\n\nWe will use 3 libraries, that weren't introduced in the course. \nPandas, as a tool for data processing. Also matplotlib and seaborn, for statistical data visualization.\n\nThis Notebook was helpful to revisit data visualization. I tweaked some of the Graphs and tried to fully understand the code, without cutting it down too much."}}