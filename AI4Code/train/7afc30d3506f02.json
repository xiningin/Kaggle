{"cell_type":{"783a67d1":"code","7a6d7c83":"code","20b06295":"code","f63c32d0":"code","0f43e5ea":"code","809759ed":"code","d48c1ea0":"code","e143310c":"code","6e7788eb":"code","e9fc791c":"code","cc10a207":"code","b5c3b639":"code","294f69f6":"code","260d64b7":"code","13f46253":"code","72888785":"code","231af80d":"code","95a86041":"code","45ab1ae3":"code","96b27df3":"code","6ee96a3e":"code","65b20a84":"code","50bbcd81":"code","c10e17c3":"code","759e336d":"code","5817bd25":"code","4b7385da":"code","f0843e5d":"code","af9a8b27":"code","cdcc6ff0":"markdown","a8cff7ee":"markdown","8ba9ef8d":"markdown","ffd84eb4":"markdown","dd7f7f34":"markdown","ca61d262":"markdown","eb495724":"markdown","d6d585b8":"markdown","db0a029b":"markdown","728e5436":"markdown","31efde39":"markdown","e58c9e9c":"markdown","b5c88d08":"markdown","a1027fdb":"markdown","f1d5d75c":"markdown","b722422f":"markdown","c4bb9d59":"markdown","31970e99":"markdown","b43caf8a":"markdown","4f3c0438":"markdown","0c94069b":"markdown","1b577b5a":"markdown","c463b5ff":"markdown","190405c8":"markdown","62adcd43":"markdown"},"source":{"783a67d1":"from IPython.display import Image","7a6d7c83":"Image(\"..\/input\/kernelassets\/pexels-rosemary-ketchum-1464230.jpg\")","20b06295":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pandas_profiling import ProfileReport\nimport warnings\nfrom tqdm.notebook import tqdm\n\nfrom plotly import express as px\nfrom plotly import graph_objs as go\nfrom plotly import figure_factory as ff\n\nfrom colorama import Fore, Style\n\nfrom geopy.geocoders import Nominatim\n\nwarnings.simplefilter(\"ignore\")\nplt.style.use(\"fivethirtyeight\")\ngeolocator = Nominatim(user_agent=\"police-shooting-viz\")","f63c32d0":"def cout(string: str, color=Fore.RED):\n    \"\"\"\n    Utility function to string in colors\n    \"\"\"\n    print(color+string+Style.RESET_ALL)","0f43e5ea":"def statistics(dataframe, column):\n    cout(f\"The Average value in {column} is: {dataframe[column].mean():.2f}\", Fore.RED)\n    cout(f\"The Standard Deviation of {column} is: {dataframe[column].std():.2f}\", Fore.LIGHTCYAN_EX)\n    cout(f\"The Maximum value in {column} is: {dataframe[column].max()}\", Fore.BLUE)\n    cout(f\"The Minimum value in {column} is: {dataframe[column].min()}\", Fore.YELLOW)\n    cout(f\"The 25th Quantile of {column} is: {dataframe[column].quantile(0.25)}\", Fore.GREEN)\n    cout(f\"The 50th Quantile of {column} is: {dataframe[column].quantile(0.50)}\", Fore.CYAN)\n    cout(f\"The 75th Quantile of {column} is: {dataframe[column].quantile(0.75)}\", Fore.MAGENTA)","809759ed":"# Let's read the data\ndata = pd.read_csv(\"..\/input\/us-police-shootings\/shootings.csv\")\ndata.head()","d48c1ea0":"# Get Date and Month from the Data and store it in a seperate column\nall_year = []\nall_months = []\n\nmonths = {\n    '01':'January',\n    '02':'February',\n    '03':'March',\n    '04':'April',\n    '05':'May',\n    '06':'June',\n    '07':'July',\n    '08':'August',\n    '09':'September',\n    '10':'October',\n    '11':'November',\n    '12':'December'\n}\n\ndef get_date(datetime):\n    date = str(datetime)\n    year = datetime[:4]\n    month = datetime[5:7]\n    return year, months[month]\n\nfor date in data['date']:\n    yr, mn = get_date(date)\n    all_year.append(yr)\n    all_months.append(mn)\n\ndata['year'] = all_year\ndata['month'] = all_months","e143310c":"# Year BarPlot\ntargets = data['year'].value_counts().tolist()\nvalues = list(dict(data['year'].value_counts()).keys())\n\nfig = px.bar(\n    x=values,\n    y=targets,\n    color=values,\n    labels={'x':'Years', 'y':'Number of Incidents'},\n    title=\"Number of Incidents over years\"\n)\n\nfig.show()","6e7788eb":"# Months BarPlot\ntargets = data['month'].value_counts().tolist()\nvalues = list(dict(data['month'].value_counts()).keys())\n\nfig = px.bar(\n    x=values,\n    y=targets,\n    color=values,\n    labels={'x':'Months', 'y':'Number of Incidents'},\n    title=\"Number of Incidents over months\"\n)\n\nfig.show()","e9fc791c":"# Pie Chart to see the manner of death\ntargets = data['manner_of_death'].value_counts().tolist()\nvalues = list(dict(data['manner_of_death'].value_counts()).keys())\n\nfig = px.pie(\n    values=targets, \n    names=values,\n    title='Manner of Death in Police Shootings',\n    color_discrete_sequence=['gray', 'black']\n)\nfig.show()","cc10a207":"# Months BarPlot\ntargets = data['armed'].value_counts().tolist()\nvalues = list(dict(data['armed'].value_counts()).keys())\n\nfig = px.bar(\n    x=values,\n    y=targets,\n    color=values,\n    labels={'x':'Armament Type', 'y':'Number of Incidents'},\n    title=\"Number of Incidents with different armaments\"\n)\n\nfig.show()","b5c3b639":"statistics(data, \"age\")","294f69f6":"# Let's plot the age column too\nplt.style.use(\"classic\")\nsns.distplot(data['age'], color='blue')\nplt.title(f\"Age Distribution [\\u03BC : {data['age'].mean():.2f} years | \\u03C3 : {data['age'].std():.2f} years]\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Count\")\nplt.show()","260d64b7":"plt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(16, 6))\nsns.kdeplot(data.loc[data['gender'] == 'M', 'age'], label = 'Male',shade=True)\nsns.kdeplot(data.loc[data['gender'] == 'F', 'age'], label = 'Female',shade=True)\n\n# Labeling of plot\nplt.xlabel('Age')\nplt.ylabel('Density')\nplt.title('Distribution of Ages for Male and Female Individuals')\nplt.show()","13f46253":"# Pie Chart to see gender of individuals\ntargets = data['gender'].value_counts().tolist()\nvalues = list(dict(data['gender'].value_counts()).keys())\n\nfig = px.pie(\n    values=targets, \n    names=values,\n    title='Gender of Individuals in Police Shootings',\n    color_discrete_sequence=['blue', 'magenta']\n)\nfig.show()","72888785":"targets = data[data['gender']=='F']['armed'].value_counts().tolist()\nvalues = list(dict(data[data['gender']=='F']['armed'].value_counts()).keys())\n\nfig = px.pie(\n    values=targets, \n    names=values,\n    title='Armaments held by Women during Shootings',\n)\nfig.show()","231af80d":"# Pie Chart to see the manner of death\ntargets = data['race'].value_counts().tolist()\nvalues = list(dict(data['race'].value_counts()).keys())\n\nfig = px.pie(\n    values=targets,\n    names=values,\n    title='Races of individuals in Police Shootings',\n)\n\nfig.show()","95a86041":"# First, let's make a new dataframe with only cities arrange according to number of incidents uniquely\ncity_names = dict(data['city'].value_counts()).keys()\ncity_incidents = data['city'].value_counts().tolist()\n\ncity_df = pd.DataFrame()\ncity_df['name'] = city_names\ncity_df['incidents'] = city_incidents\ncity_df.head()","45ab1ae3":"# Let's add the corresponding longitude and latitude to the cities.\nlongs, lats = [], []\nerr_idx = []\nfor idx, city in tqdm(enumerate(city_df['name'])):\n    loc = geolocator.geocode(city)\n    try:\n        longs.append(loc.longitude)\n        lats.append(loc.latitude)\n    except:\n        err_idx.append(idx)\n        \ncity_df = city_df.drop(err_idx)\ncity_df['lat'] = lats\ncity_df['lon'] = longs","96b27df3":"# Draw a bubble map for city of incidents.\ncity_df['text'] = city_df['name'] + '<br>Incidents: ' + (city_df['incidents']).astype(str)\nlimits = [(0, 4), (5, 12), (12, 22), (22, 33), (33, 43)]\ncolors = [\"royalblue\",\"crimson\",\"lightseagreen\",\"orange\",\"lightgrey\"]\ncities = []\n\nfig = go.Figure()\n\nfor i in range(len(limits)):\n    lim = limits[i]\n    df_sub = city_df[lim[0]:lim[1]]\n    fig.add_trace(go.Scattergeo(\n        locationmode = 'USA-states',\n        lon = df_sub['lon'],\n        lat = df_sub['lat'],\n        text = df_sub['text'],\n        marker = dict(\n            size = df_sub['incidents'],\n            color = colors[i],\n            line_color='rgb(40,40,40)',\n            line_width=0.5,\n            sizemode = 'area'\n        ),\n        name = '{0} - {1}'.format(lim[0],lim[1])))\n\nfig.update_layout(\n        title_text = 'Police Shooting Incident across US Cities<br>(Click legend to toggle traces)',\n        showlegend = True,\n        geo = dict(\n            scope = 'usa',\n            landcolor = 'rgb(200, 200, 200)',\n        )\n    )\n\nfig.show()","6ee96a3e":"# Just like the cities, we will make a new dataframe\nstate_names = dict(data['state'].value_counts()).keys()\nstate_incidents = data['state'].value_counts().tolist()\n\nstate_df = pd.DataFrame()\nstate_df['state'] = state_names\nstate_df['incidents'] = state_incidents\nstate_df.head()","65b20a84":"# Choropleth map\nfig = go.Figure(data=go.Choropleth(\n    locations=state_df['state'], # Spatial coordinates\n    z = state_df['incidents'].astype(int), # Data to be color-coded\n    locationmode = 'USA-states', # set of locations\n    colorscale = 'amp', # color scale\n    colorbar_title = \"Incidents Density\", # title for the color bar\n))\n\nfig.update_layout(\n    title_text = 'Police Shooting Incidents Across US States', # title for the plot\n    geo_scope='usa', # limite map scope to USA\n)\n\nfig.show()","50bbcd81":"# Pie Chart to see the manner of death\ntargets = data['signs_of_mental_illness'].value_counts().tolist()\nvalues = list(dict(data['signs_of_mental_illness'].value_counts()).keys())\n\nfig = px.pie(\n    values=targets,\n    names=values,\n    title='Signs of Mental Illness in individuals',\n    color_discrete_sequence=['blue', 'red']\n)\n\nfig.show()","c10e17c3":"# Pie Chart to see the manner of death\ntargets = data['threat_level'].value_counts().tolist()\nvalues = list(dict(data['threat_level'].value_counts()).keys())\n\nfig = px.pie(\n    values=targets,\n    names=values,\n    title='Threat Level Posed by Individuals',\n    color_discrete_sequence=['orange', 'yellow', 'gold']\n)\n\nfig.show()","759e336d":"# Pie Chart to see the manner of death\ntargets = data['flee'].value_counts().tolist()\nvalues = list(dict(data['flee'].value_counts()).keys())\n\nfig = px.pie(\n    values=targets,\n    names=values,\n    title='How Individuals were Fleeing the Crime Scene',\n)\n\nfig.show()","5817bd25":"# Pie Chart to see the manner of death\ntargets = data['body_camera'].value_counts().tolist()\nvalues = list(dict(data['body_camera'].value_counts()).keys())\n\nfig = px.pie(\n    values=targets,\n    names=values,\n    title='Possession of Body Camera',\n)\n\nfig.show()","4b7385da":"# Months BarPlot\ntargets = data['arms_category'].value_counts().tolist()\nvalues = list(dict(data['arms_category'].value_counts()).keys())\n\nfig = px.bar(\n    x=values,\n    y=targets,\n    color=values,\n    labels={'x':'Armament Type', 'y':'Number of Incidents'},\n    title=\"Number of Incidents with different armaments\"\n)\n\nfig.show()","f0843e5d":"profile = ProfileReport(data, title=\"Pandas Profiling Report\")","af9a8b27":"profile.to_notebook_iframe()","cdcc6ff0":"## State of Incident\nLet's now turn towards individual states of United States and see how number of police shooting incidents vary from state to state.","a8cff7ee":"# Introduction","8ba9ef8d":"## What Armaments do Women Individuals had?\nLet's see what sort of armaments women individuals had on them.","ffd84eb4":"## Fleeing\nLet's see if how individuals involved were fleeing the crime scene","dd7f7f34":"## Race \nLet's take a look at the race of the individual.","ca61d262":"## Signs of Mental Illness\nLet's see if the shot individual had any signs of mental illness","eb495724":"As we can see, most individuals are between `25-40` years old with an average one being 36 Years old.","d6d585b8":"# EDA\nLet's start doing EDA through each column","db0a029b":"# Thank you!\n\nPlease correct me if I\u2019ve made any mistakes in EDA, modelling or maybe explaining some concept since I am a beginner and prone to making mistakes.","728e5436":"## Arms Category\nLet's also look at the category of arms possessed by individuals.","31efde39":"# Installation and Imports","e58c9e9c":"We can see that only a quarter of shot individuals had any signs of mental illness.","b5c88d08":"There are 12 cities that couldn't be geocoded by geopy, so we will drop them from `city_df` since there absence will not make much of a difference anyways.","a1027fdb":"## City of Incident\nLet's draw up an interactive bubble map with the city of incidents.","f1d5d75c":"## Armament Type\nLet's look if the individual that was shot had any sort of armaments on them.","b722422f":"## Gender\nLet's now take a look at Gender","c4bb9d59":"This notebook covers a moderately detained analysis of US Police Shootings on the Dataset provided. Hope you find it useful and learn how to make interactive notebooks just like this one!","31970e99":"## Age vs Gender\nLet's see a KDE Plot to see how age and gender are related, if at all","b43caf8a":"## Date\nI will not plot whole date but rather only the month and the year of the shootings.\nFor this, we will draw Year and Month Barplots seperately.","4f3c0438":"## Threat Level\nLet's see the threat level posed by the involved individual.","0c94069b":"## Body Camera\nNow we look at what number of them had body camera on them.","1b577b5a":"As we can see, there is a very clear imbalance when it comes to gender of individuals who were shot in confrentation with police.","c463b5ff":"## Manner of Death\nLet's look at the manner of death of the individuals","190405c8":"## Pandas Profiling\nFinally, let's look at the Pandas Profiling Report","62adcd43":"## Age\nLet's look at the general trends of age of individuals"}}