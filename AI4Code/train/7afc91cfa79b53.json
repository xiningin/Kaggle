{"cell_type":{"246182ae":"code","8acdb30b":"code","a592b059":"code","29c115aa":"code","35693497":"code","d116b68e":"code","6879a37d":"code","ce626e95":"code","62ff3135":"code","ab7305bf":"code","0051f640":"code","29904690":"code","42984748":"code","93500b19":"code","496025c2":"code","ec6259ae":"code","18e025dc":"markdown","be7a8808":"markdown","947bb035":"markdown","9a7f6308":"markdown","fa03d34d":"markdown","49e18444":"markdown","0f0e2e73":"markdown","61214eb7":"markdown","f0466323":"markdown"},"source":{"246182ae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8acdb30b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","a592b059":"dataset = pd.read_csv('\/kaggle\/input\/wine-customer-segmentation\/Wine.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values","29c115aa":"print(X)","35693497":"print(y)","d116b68e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","6879a37d":"print(X_train)","ce626e95":"print(y_train)","62ff3135":"print(X_test)","ab7305bf":"print(y_test)","0051f640":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","29904690":"from sklearn.decomposition import PCA\npca = PCA(n_components = 2)\nX_train = pca.fit_transform(X_train)\nX_test = pca.transform(X_test)","42984748":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)","93500b19":"from sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","496025c2":"from matplotlib.colors import ListedColormap\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green', 'blue')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n                c = ListedColormap(('red', 'green', 'blue'))(i), label = j)\nplt.title('Logistic Regression (Training set)')\nplt.xlabel('PC1')\nplt.ylabel('PC2')\nplt.legend()\nplt.show()","ec6259ae":"from matplotlib.colors import ListedColormap\nX_set, y_set = X_test, y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green', 'blue')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n                c = ListedColormap(('red', 'green', 'blue'))(i), label = j)\nplt.title('Logistic Regression (Test set)')\nplt.xlabel('PC1')\nplt.ylabel('PC2')\nplt.legend()\nplt.show()","18e025dc":"**IMPORTING DATASET**","be7a8808":"**IMPORTING LIBRARIES**","947bb035":"**APPLYING PCA**","9a7f6308":"**TRAINING THE LOGISTIC REGRESSION MODEL ON TRAINING SET**","fa03d34d":"**SPLITTING THE TEST AND TRAINING SET**","49e18444":"**FEATURE SCALING**","0f0e2e73":"**VISUALIZING TRAINING SET RESULTS**","61214eb7":"**VISUALISING TEST SET RESULTS**","f0466323":"**MAKING THE CONFUSION MATRIX**"}}