{"cell_type":{"520a7dfe":"code","cbb6e874":"code","6808cb59":"code","fec5d802":"code","cecaee60":"code","08aa4866":"code","244afe07":"code","bc7754bd":"code","9179fa85":"code","323f6b14":"code","4909664a":"code","51809c49":"code","112ff9b0":"code","a29f2213":"code","7f561b8a":"code","049aa092":"code","01f49c4c":"code","26444372":"code","8a3fb01a":"code","de8a7fe2":"code","31b8ddaa":"code","6526331c":"code","70759c83":"code","32d77ab2":"code","34ecb581":"code","351c9bc8":"code","dc14cbd3":"code","7427d97a":"code","67421c2e":"code","7a2b4c5d":"code","d50fe9f5":"code","d827d7ae":"code","9b6743b3":"code","53c54bdd":"code","bdf71490":"code","1c7fa53b":"code","1325f1b5":"code","1d2b03f1":"code","3f85f970":"code","93b8494f":"code","aca39ea7":"code","c517ff7a":"code","d1cc2614":"code","e40c0f85":"code","eece148c":"code","bdaf7f8d":"code","381e4695":"code","d80dd394":"markdown"},"source":{"520a7dfe":"!pip install seaborn","cbb6e874":"pip install plotly","6808cb59":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fec5d802":"df=pd.read_csv('train.csv')\ntest_df=pd.read_csv('test.csv')","cecaee60":"df","08aa4866":"test_df","244afe07":"df.isnull().sum()","bc7754bd":"test_df.isnull().sum()","9179fa85":"df.describe()","323f6b14":"test_df.describe()","4909664a":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(12,10))\nsns.set_style(\"ticks\")\nsns.histplot(data=df, x=\"SalePrice\", bins=50,cbar=True)","51809c49":"sns.set_style(\"whitegrid\")\ndata = np.random.normal(size=(20, 6)) + np.arange(6) \/ 2\nsns.boxplot(data=data);","112ff9b0":"def sinplot(flip=1):\n    x = np.linspace(0, 14, 100)\n    for i in range(1, 7):\n        plt.plot(x, np.sin(x + i * .5) * (7 - i) * flip)","a29f2213":"sns.set_style(\"dark\")\nsinplot()","7f561b8a":"df.shape","049aa092":"test_df.shape","01f49c4c":"df['SalePrice']","26444372":"df['SalePrice']= np.log1p(df['SalePrice'])","8a3fb01a":"df['SalePrice']","de8a7fe2":"plt.figure(figsize=(12,8))\nsns.set_style(\"whitegrid\")\nsns.histplot(data=df, x=\"SalePrice\", bins=70,cbar=True,color=\"purple\")","31b8ddaa":"plt.figure(figsize=(12,8))\nsns.boxplot(data=df, x=\"SalePrice\",color=\"orange\")","6526331c":"#Statistical Values\ndf[\"SalePrice\"].describe() ","70759c83":"##Finding missing values\nnull_data = pd.DataFrame(len(df['Id']) - df.isnull().sum(), columns = ['SalePrice'])\n\ntrace = go.Bar(x = null_data.index, y = null_data['SalePrice'] ,opacity = 0.9, marker=dict(color = 'hotpink', line=dict(color='#000000',width=0.4)))\n\nmiss = dict(title =  \"Missing Values\")\n                    \nfig = dict(data = [trace], layout=miss)\npy.iplot(fig)\n","32d77ab2":"df[\"FireplaceQu\"].value_counts()","34ecb581":"df[\"FireplaceQu\"].fillna(\"Gd\",inplace=True)","351c9bc8":"df['LotFrontage']=df['LotFrontage'].fillna(df['LotFrontage'].mean())","dc14cbd3":"df['MasVnrType']=df['MasVnrType'].fillna(df['MasVnrType'].mode()[0])\ndf['MasVnrArea']=df['MasVnrArea'].fillna(df['MasVnrArea'].mode()[0])","7427d97a":"df.drop(['Id','Alley','GarageYrBlt','PoolQC','Fence','MiscFeature'],axis=1,inplace=True)","67421c2e":"df.isnull().sum()","7a2b4c5d":"df.drop([\"Exterior2nd\",\"Condition2\",\"BsmtFinType2\",\"Utilities\", 'HouseStyle',\n         'RoofMatl', 'Exterior1st',  'Heating', 'Electrical', 'Functional', \n        'GarageQual'],axis=1,inplace=True) # We drop 3 columns because they have the same information with some columns\ndf.head()","d50fe9f5":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","d827d7ae":"pred_df = pd.concat([df, test_df], axis=0)","9b6743b3":"pred_df.head()","53c54bdd":"pred_df.shape","bdf71490":"pred_df.count()","1c7fa53b":"X=df.drop(\"SalePrice\",axis=1)\nX = X.value\nX.shape","1325f1b5":"X","1d2b03f1":"!pip install scikit-learn","3f85f970":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train,y_test=train_test_split(X,y, test_size=0.05,random_state=42)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","93b8494f":"df_train=pred_df.iloc[:1422,:]\ndf_test=pred_df.iloc[1422:,:]\ndf_test.drop(['SalePrice'],axis=1,inplace=True)","aca39ea7":"x=df_train.drop(['SalePrice'],axis=1)\ny=df_train[['SalePrice']]","c517ff7a":"test_df['LotFrontage']=test_df['LotFrontage'].fillna(test_df['LotFrontage'].mean())\ntest_df['MSZoning']=test_df['MSZoning'].fillna(test_df['MSZoning'].mode()[0])\ntest_df['BsmtCond']=test_df['BsmtCond'].fillna(test_df['BsmtCond'].mode()[0])\ntest_df['BsmtQual']=test_df['BsmtQual'].fillna(test_df['BsmtQual'].mode()[0])\ntest_df['FireplaceQu']=test_df['FireplaceQu'].fillna(test_df['FireplaceQu'].mode()[0])\ntest_df['GarageType']=test_df['GarageType'].fillna(test_df['GarageType'].mode()[0])\ntest_df['GarageFinish']=test_df['GarageFinish'].fillna(test_df['GarageFinish'].mode()[0])\ntest_df['GarageQual']=test_df['GarageQual'].fillna(test_df['GarageQual'].mode()[0])\ntest_df['GarageCond']=test_df['GarageCond'].fillna(test_df['GarageCond'].mode()[0])\ntest_df['MasVnrType']=test_df['MasVnrType'].fillna(test_df['MasVnrType'].mode()[0])\ntest_df['MasVnrArea']=test_df['MasVnrArea'].fillna(test_df['MasVnrArea'].mode()[0])\ntest_df['BsmtExposure']=test_df['BsmtExposure'].fillna(test_df['BsmtExposure'].mode()[0])\ntest_df['BsmtFinType2']=test_df['BsmtFinType2'].fillna(test_df['BsmtFinType2'].mode()[0])\ntest_df.drop(['Id','Alley','GarageYrBlt','PoolQC','Fence','MiscFeature'],axis=1,inplace=True)","d1cc2614":"test_df.loc[:, test_df.isnull().any()].head()","e40c0f85":"test_df['Utilities']=test_df['Utilities'].fillna(test_df['Utilities'].mode()[0])\ntest_df['Exterior1st']=test_df['Exterior1st'].fillna(test_df['Exterior1st'].mode()[0])\ntest_df['Exterior2nd']=test_df['Exterior2nd'].fillna(test_df['Exterior2nd'].mode()[0])\ntest_df['BsmtFinType1']=test_df['BsmtFinType1'].fillna(test_df['BsmtFinType1'].mode()[0])\ntest_df['BsmtFinSF1']=test_df['BsmtFinSF1'].fillna(test_df['BsmtFinSF1'].mean())\ntest_df['BsmtFinSF2']=test_df['BsmtFinSF2'].fillna(test_df['BsmtFinSF2'].mean())\ntest_df['BsmtUnfSF']=test_df['BsmtUnfSF'].fillna(test_df['BsmtUnfSF'].mean())\ntest_df['TotalBsmtSF']=test_df['TotalBsmtSF'].fillna(test_df['TotalBsmtSF'].mean())\ntest_df['BsmtFullBath']=test_df['BsmtFullBath'].fillna(test_df['BsmtFullBath'].mode()[0])\ntest_df['BsmtHalfBath']=test_df['BsmtHalfBath'].fillna(test_df['BsmtHalfBath'].mode()[0])\ntest_df['KitchenQual']=test_df['KitchenQual'].fillna(test_df['KitchenQual'].mode()[0])\ntest_df['Functional']=test_df['Functional'].fillna(test_df['Functional'].mode()[0])\ntest_df['GarageCars']=test_df['GarageCars'].fillna(test_df['GarageCars'].mean())\ntest_df['GarageArea']=test_df['GarageArea'].fillna(test_df['GarageArea'].mean())\ntest_df['SaleType']=test_df['SaleType'].fillna(test_df['SaleType'].mode()[0])","eece148c":"columns=['MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood',\n         'Condition2','BldgType','Condition1','HouseStyle','SaleType',\n        'SaleCondition','ExterCond',\n         'ExterQual','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n        'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','Heating','HeatingQC',\n         'CentralAir',\n         'Electrical','KitchenQual','Functional',\n         'FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive']","bdaf7f8d":"x=df_train.drop(['SalePrice'],axis=1)\ny=df_train[['SalePrice']]","381e4695":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.33,random_state=0)","d80dd394":"### Return a boolean same-sized object indicating if the values are NA. NA values, such as None or numpy.NaN, gets mapped to True values. "}}