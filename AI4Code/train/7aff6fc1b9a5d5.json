{"cell_type":{"7f8c769b":"code","6ea05373":"code","81884b99":"code","30a6a0f2":"code","08d8ef5b":"code","eb05a11d":"code","071104db":"code","a1ec7044":"code","5177fd2b":"code","59399652":"code","e9ce1f41":"code","a427893e":"code","dcbed3ed":"code","049601d5":"code","a5a04935":"code","f3b57a6b":"code","5d810fd9":"code","ee1fb5bf":"code","a7382377":"code","77a27b4b":"code","0add202a":"code","27925a43":"code","609a7de1":"code","008c388b":"code","0322383e":"code","9eae9435":"code","449cd42f":"code","6f58cc39":"code","2d5ec171":"code","3be07a78":"code","485e9cf3":"code","05e20ac5":"code","77dcd77f":"code","78b60aa6":"code","1381ca67":"code","b39dee8d":"code","650019ad":"code","44e80da6":"code","6455939c":"code","be4350fb":"code","ec7f0c1f":"code","f7a71479":"code","0d58bd96":"markdown","f51e8cfe":"markdown","1baf55bd":"markdown","3f09f01d":"markdown","68f6a6e3":"markdown","d81491dd":"markdown","9e5f8b7c":"markdown","e39c32fe":"markdown","5188ab2b":"markdown"},"source":{"7f8c769b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6ea05373":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.set_option('display.max_rows', None)","81884b99":"df_Train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf_Test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","30a6a0f2":"df_Train.head()","08d8ef5b":"df_Train.describe()","eb05a11d":"df_Test.describe()","071104db":"df_Train.info()","a1ec7044":"print(\"Shape\")\nprint(\"Training data : \", df_Train.shape)\nprint(\"Test data     : \", df_Test.shape)","5177fd2b":"s = (df_Train.dtypes == 'object')\nobject_cols = list(s[s].index)\nprint(\"Categorical variables:\\n\")\nprint(object_cols)\n\ns = (df_Train.dtypes == 'int')\nnum_cols = list(s[s].index)\nprint(\"\\nInteger variables:\\n\")\nprint(num_cols)\n\ns = (df_Train.dtypes == 'float')\nnum_cols = list(s[s].index)\nprint(\"\\nReal variables:\\n\")\nprint(num_cols)","59399652":"df = [df_Train,df_Test]\ndf_combined = pd.concat(df).reset_index(drop=True)","e9ce1f41":"df_combined.head()","a427893e":"print(df_combined.isnull().sum())","dcbed3ed":"plt.figure(figsize=(18,6))\nplt.title('Heatmap of missing values')\nsns.heatmap(df_combined.isnull(),yticklabels=False,cbar=False,cmap='viridis')","049601d5":"unique_values = []\nfor col in object_cols:\n  unique_values.append(df_combined[col].unique().size)\nplt.figure(figsize=(18,6))\nplt.title('No. Unique values of Categorical Features')\nplt.xticks(rotation=90)\nsns.barplot(x=object_cols,y=unique_values)","a5a04935":"plt.figure(figsize=(18,36))\nplt.title('Categorical Features: Distribution')\nplt.xticks(rotation=90)\nindex = 1\nfor col in object_cols:\n  y = df_combined[col].value_counts()\n  plt.subplot(11,4,index)\n  plt.xticks(rotation=90)\n  sns.barplot(x=list(y.index), y=y)\n  index +=1","f3b57a6b":"df_combined.drop(columns='Id',inplace=True); print('Drop Id \\n')\ndf_combined['MSZoning'] = df_combined['MSZoning'].fillna(df_combined['MSZoning'].mode()[0])\ndf_combined['LotFrontage'] = df_combined['LotFrontage'].fillna(df_combined['LotFrontage'].mean())\ndf_combined.drop(columns='Alley',inplace=True); print('Drop Alley \\n')\n\n#df_combined['Utilities'] = df_combined['Utilities'].fillna(df_combined['Utilities'].mode()[0])\nprint(df_combined['Utilities'].value_counts())\ndf_combined.drop(columns='Utilities',inplace=True); print('Drop Utilities \\n')\n\ndf_combined['Exterior1st'] = df_combined['Exterior1st'].fillna(df_combined['Exterior1st'].mode()[0])\ndf_combined['Exterior2nd'] = df_combined['Exterior2nd'].fillna(df_combined['Exterior2nd'].mode()[0])\ndf_combined['MasVnrType'] = df_combined['MasVnrType'].fillna(df_combined['MasVnrType'].mode()[0])\ndf_combined['MasVnrArea'] = df_combined['MasVnrArea'].fillna(df_combined['MasVnrArea'].mean())\ndf_combined['Electrical'] = df_combined['Electrical'].fillna(df_combined['Electrical'].mode()[0])\ndf_combined['KitchenQual'] = df_combined['KitchenQual'].fillna(df_combined['KitchenQual'].mode()[0])\ndf_combined['Functional'] = df_combined['Functional'].fillna(df_combined['Functional'].mode()[0])\n\ndf_combined.loc[(df_combined['Fireplaces'] != 0) & (df_combined['FireplaceQu'].isnull()) ][['FireplaceQu','Fireplaces']]\ndf_combined['FireplaceQu'] = df_combined['FireplaceQu'].fillna('NA'); print('FirePlaceQu: Fill NA values for missing values \\n')\n\ndf_combined.loc[(df_combined['PoolQC'].isnull()) & df_combined['PoolArea']>0][['PoolQC','PoolArea']]\ndf_combined.at[2599,'PoolQC'] = df_combined['PoolQC'].mode()[0]; print('PoolQC: Use mode for missing value with non-zero PoolAre \\n')\ndf_combined['PoolQC'] = df_combined['PoolQC'].fillna('NA'); print('PoolQC: Use NA for remaining missing values \\n')\n\ndf_combined['SaleType'].fillna(df_combined['SaleType'].mode()[0],inplace=True)\ndf_combined.drop(columns=['Fence','MiscFeature','SalePrice'],inplace=True); print('Drop Fence, MiscFeature and SalePrice\\n')\n\n# Basement Features\n#df_combined.loc[df_combined['BsmtQual'].isnull()][['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinSF1','BsmtFinType2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath']].head()\n#df_combined.loc[df_combined['TotalBsmtSF'].isnull()][['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinSF1','BsmtFinType2','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath']]\nprint('Fill missing values of Basement features with NA or 0 \\n')\ndf_combined['BsmtQual'] = df_combined['BsmtQual'].fillna('NA')\ndf_combined['BsmtCond'] = df_combined['BsmtCond'].fillna('NA')\ndf_combined['BsmtExposure'] = df_combined['BsmtExposure'].fillna('NA')\ndf_combined['BsmtFinType1'] = df_combined['BsmtFinType1'].fillna('NA')\ndf_combined['BsmtFinType2'] = df_combined['BsmtFinType2'].fillna('NA')\n\ndf_combined['BsmtFinSF1'] = df_combined['BsmtFinSF1'].fillna(int(0))\ndf_combined['BsmtFinSF2'] = df_combined['BsmtFinSF2'].fillna(int(0))\ndf_combined['BsmtUnfSF'] = df_combined['BsmtUnfSF'].fillna(int(0))\ndf_combined['TotalBsmtSF'] = df_combined['TotalBsmtSF'].fillna(int(0))\ndf_combined['BsmtFullBath'] = df_combined['BsmtFullBath'].fillna(int(0))\ndf_combined['BsmtHalfBath'] = df_combined['BsmtHalfBath'].fillna(int(0))\n\n# Garage Features\n# df_combined.loc[df_combined['GarageCond'].isnull()][['GarageType','GarageYrBlt','GarageFinish','GarageCars','GarageArea','GarageQual','GarageCond']].head()\nprint('Fill missing values of Garage features with NA or 0 \\n')\ndf_combined['GarageType'] = df_combined['GarageType'].fillna('NA')\ndf_combined['GarageFinish'] = df_combined['GarageFinish'].fillna('NA')\ndf_combined['GarageCond'] = df_combined['GarageCond'].fillna('NA')\ndf_combined['GarageQual'] = df_combined['GarageQual'].fillna('NA')\ndf_combined['GarageCars'] = df_combined['GarageCars'].fillna(int(0))\ndf_combined['GarageArea'] = df_combined['GarageArea'].fillna(int(0))\ndf_combined['GarageYrBlt'] = df_combined['GarageYrBlt'].fillna(int(0))","5d810fd9":"df_combined.head()","ee1fb5bf":"print(df_combined.isnull().sum().sum())","a7382377":"from sklearn.preprocessing import OneHotEncoder","77a27b4b":"s = (df_combined.dtypes == 'object')\nobject_cols = list(s[s].index)\nprint(\"Categorical variables:\\n\")\nprint(object_cols)\nprint('\\nNo. of. categorical features: ',len(object_cols))","0add202a":"OH_encoder = OneHotEncoder(sparse=False)\nOH_cols = pd.DataFrame(OH_encoder.fit_transform(df_combined[object_cols]))\nOH_cols.index = df_combined.index\nOH_cols.columns = OH_encoder.get_feature_names()\ndf_final = df_combined.drop(object_cols, axis=1)\ndf_final = pd.concat([df_final, OH_cols], axis=1)","27925a43":"df_final.head()","609a7de1":"# Check that the shapes are consistent\n\nprint('df_final shape:', df_final.shape)\nprint('df_train shape:', df_Train.shape)\nprint('df_test shape:',  df_Test.shape)\n\nX_Train = pd.DataFrame(df_final[:1460]).copy()\nX_Test  = pd.DataFrame(df_final[1460:]).copy()\nY_Train = df_Train['SalePrice']\n\nprint('\\nCheck that the datasets are consistent:\\n')\nprint('X_train shape', X_Train.shape)\nprint('Y_train shape:', Y_Train.shape)\nprint('X_test shape:',  X_Test.shape)","008c388b":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_valid, Y_train, Y_valid = train_test_split(X_Train, Y_Train, train_size=0.8, test_size=0.2,random_state=0)","0322383e":"from sklearn.ensemble import RandomForestRegressor\nmodel_RFR = RandomForestRegressor()\nmodel_RFR.fit(X_train, Y_train)\nY_pred = model_RFR.predict(X_valid)\nprint(mean_absolute_error(Y_valid, Y_pred))","9eae9435":"from sklearn.ensemble import GradientBoostingRegressor\n\nmodel_GBR = GradientBoostingRegressor()\nmodel_GBR.fit(X_train, Y_train)\nY_pred = model_GBR.predict(X_valid)\nprint(mean_absolute_error(Y_valid, Y_pred))","449cd42f":"from sklearn.linear_model import SGDRegressor\n\nmodel_SGD = SGDRegressor()\nmodel_SGD.fit(X_train, Y_train)\nY_pred = model_SGD.predict(X_valid)\nprint(mean_absolute_error(Y_valid, Y_pred))","6f58cc39":"import warnings\nwarnings.filterwarnings('ignore')\n\nfrom xgboost import XGBRegressor\n\nmodel_XGBR = XGBRegressor(learning_rate=0.03,n_estimators=200)\nmodel_XGBR.fit(X_train,Y_train)\nY_pred = model_XGBR.predict(X_valid)\nprint(mean_absolute_error(Y_valid, Y_pred))","2d5ec171":"plt.figure()\nplt.title('Comparison of Sale Price of Predicted and Actual values')\nplt.scatter(Y_Train,model_RFR.predict(X_Train),label='Random Forest')\nplt.scatter(Y_Train,model_GBR.predict(X_Train),label='GBR')\nplt.scatter(Y_Train,model_XGBR.predict(X_Train),label='XGB')\nplt.legend()","3be07a78":"import warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import GridSearchCV\nmodel = XGBRegressor()\n\nn_estimators   = [100, 200, 500]\nlearning_rates = [0.03,0.1,0.3]\n\n# Define the grid of hyperparameters to search\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'learning_rate':learning_rates,\n    }\n\n\ngrid_cv = GridSearchCV(estimator = model,\n            param_grid = hyperparameter_grid,\n            scoring = 'neg_mean_absolute_error',\n            return_train_score = True)","485e9cf3":"grid_cv.fit(X_Train,Y_Train)","05e20ac5":"grid_cv.best_score_","77dcd77f":"grid_cv.best_estimator_","78b60aa6":"regressor = grid_cv.best_estimator_\nY_pred = regressor.predict(X_valid)\nprint(mean_absolute_error(Y_valid, Y_pred))","1381ca67":"plt.figure()\nplt.title('Comparison of Sale Price of Predicted and Actual values')\nplt.scatter(Y_Train,model_RFR.predict(X_Train),label='Random Forest')\nplt.scatter(Y_Train,model_GBR.predict(X_Train),label='GBR')\nplt.scatter(Y_Train,model_XGBR.predict(X_Train),label='XGB')\nplt.scatter(Y_Train,regressor.predict(X_Train),label='Best model')\nplt.legend()","b39dee8d":"Y_Pred = regressor.predict(X_Test)","650019ad":"Y_Pred","44e80da6":"Y_Pred.shape","6455939c":"sub = pd.DataFrame()\nsub['Id'] = df_Test['Id']\nsub['SalePrice'] = Y_Pred","be4350fb":"sub.head()","ec7f0c1f":"sub.tail()","f7a71479":"sub.to_csv('Submission.csv',index=False)","0d58bd96":"## Model selection and prediction","f51e8cfe":"## Read data files","1baf55bd":"## Preparation of Submission Data","3f09f01d":"## Import necessary libraries","68f6a6e3":"The following features have a large number of mising values:\n'Alley', 'FireplaceQu', 'PoolQC', 'Fence', and 'MiscFeature'","d81491dd":"### Fill up missing values:\n\n* Drop the features 'Alley', 'Fence', and 'MiscFeature'.\n\n* Drop 'Utilities' feature, as all but one have the value 'AllPub'\n\n* All entries with missing 'FirePlaceQu' have 'Fireplaces' = 0. Hence fill missing values with 'NA'.\n\n* All but one entries with missing 'PoolQC' value have 'PoolArea' = 0. Use mode for missing value with non-zero PoolArea. Use 'NA' for the rest of the entries. \n\n* Basement features: Fill missing values with 'NA' or '0'.\n\n* Garage features: Fill missing values with 'NA' or '0'. \n\n* Remaining Integer and Real features: fill up missing values with mean of the corresponding feature.\n\n* Remaining Categorical features: fill up missing values with mode of the corresponding feature.","9e5f8b7c":"Check that all missing values have been taken care of.","e39c32fe":"## Data Preprocessing\n\n### Import Onehot encoder to encode categorical features","5188ab2b":"## Missing Values:\n\n### Combine training and test data into a single dataframe"}}