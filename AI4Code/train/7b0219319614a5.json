{"cell_type":{"1300b992":"code","fa363e08":"code","0d896ddf":"code","92f73698":"code","c39336b5":"code","f82a993a":"code","df3baa7b":"code","6c6c80bd":"code","bdaf0519":"code","d64a9353":"code","da9d3090":"code","28acc3bc":"code","24a99551":"code","e4d2f6ad":"code","c57acb26":"code","ba658093":"code","78b8f0f8":"code","67739667":"code","3e620951":"code","78123081":"code","1889caea":"code","e5dc5974":"code","93bb0c93":"code","014be4db":"code","8ffce9e2":"code","e7634dc1":"code","935fd7a9":"code","7b1f3c28":"code","a4ce580d":"code","da2bd7aa":"code","758b2754":"code","2518aadc":"code","f98813f5":"code","5ec5fbe7":"code","559cc4bb":"code","bcd32916":"code","c2c835a3":"markdown","0c049366":"markdown","775fb7f3":"markdown","564f1ee7":"markdown","e3f7b36c":"markdown","cfa20408":"markdown","5d34eb80":"markdown","6cba3519":"markdown","bc1c6780":"markdown","1be6b546":"markdown","c3d0c12b":"markdown","55f8a84f":"markdown"},"source":{"1300b992":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fa363e08":"from sklearn.model_selection import train_test_split\nfrom sklearn import datasets\nimport math","0d896ddf":"# \u0e42\u0e2b\u0e25\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e21\u0e39\u0e25 csv \u0e43\u0e2b\u0e49\u0e21\u0e32\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e23\u0e39\u0e1b\u0e02\u0e2d\u0e07 pandas dataframe\ndata = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')","92f73698":"#\u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25 5 \u0e15\u0e31\u0e27\u0e41\u0e23\u0e01\ndata.head()\n#\u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25 10 \u0e15\u0e31\u0e27\u0e41\u0e23\u0e01\ndata.head(10)\n#\u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25\u0e41\u0e1a\u0e1a\u0e2a\u0e38\u0e48\u0e21 5 \u0e15\u0e31\u0e27\ndata.sample()","c39336b5":"#\u0e41\u0e2a\u0e14\u0e07\u0e02\u0e19\u0e32\u0e14\u0e02\u0e2d\u0e07\u0e15\u0e32\u0e23\u0e32\u0e07 (#row,#columns)\ndata.shape","f82a993a":"display(data['Species'].value_counts().reset_index())","df3baa7b":"# Drop \u0e2b\u0e23\u0e37\u0e2d \u0e25\u0e1a column \u0e17\u0e35\u0e48\u0e23\u0e32\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e43\u0e0a\u0e49\n\n# 1. \u0e42\u0e0a\u0e27\u0e4c\u0e40\u0e09\u0e22\u0e46\u0e41\u0e15\u0e44\u0e21\u0e48\u0e25\u0e1a\u0e08\u0e23\u0e34\u0e07\u0e46\ndata.drop('Species',axis=1)\n# 2. \u0e25\u0e1a \u0e41\u0e25\u0e49\u0e27\u0e2d\u0e31\u0e1e\u0e40\u0e14\u0e17\u0e43\u0e2a\u0e48 \u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23 data \u0e40\u0e25\u0e22\ndata = data.drop('Species',axis=1)\n# 3. \u0e25\u0e1a \u0e41\u0e25\u0e49\u0e27\u0e2d\u0e31\u0e1e\u0e40\u0e14\u0e17\u0e43\u0e2a\u0e48 \u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23 data \u0e40\u0e25\u0e22\ndata.drop('Species',axis=1,inplace = True)","6c6c80bd":"# \u0e41\u0e22\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 X: Feature , Y: Label \u0e2b\u0e23\u0e37\u0e2d \u0e04\u0e33\u0e15\u0e2d\u0e1a \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e0a\u0e49\u0e43\u0e19\u0e01\u0e32\u0e23\u0e1d\u0e36\u0e01\u0e2a\u0e2d\u0e19 Model\n# f(x) = y  => mx + b = y \nX = data.drop('Species',axis=1)\ny = data['Species']","bdaf0519":"X_train.head(),y_train.head()","d64a9353":"print(X_train.shape,y_train.shape)","da9d3090":"print(X_test.shape,y_test.shape)","28acc3bc":"K=5","24a99551":"# \u0e41\u0e1a\u0e48\u0e07\u0e41\u0e22\u0e01\u0e02\u0e49\u0e41\u0e21\u0e39\u0e25\u0e1d\u0e36\u0e01\u0e2a\u0e2d\u0e19 (train) \u0e41\u0e25\u0e30 \u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e14\u0e2a\u0e2d\u0e1a (test\/ blind test)\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.33, random_state = 42)","e4d2f6ad":"X_train.head(),y_train.head()","c57acb26":"def euclidean(a,b):\n    dist = 0.0\n    for i in range(len(a)):\n        dist = dist + pow(a[i]-b[i],2) \n        dist = np.sqrt(dist)\n    #print(dist)\n    return dist","ba658093":"# initail matrix 0\ndist_mat = np.zeros(X_train.shape[0]*X_test.shape[0]).reshape((X_train.shape[0], X_test.shape[0]))\n\nfor j in range(X_test.shape[0]): # [0,1,....,n_test-1]\n    for i in range(X_train.shape[0]): # [0,1,....,n_train-1]\n        dist_mat[i][j] = euclidean(X_train.iloc[i][:],X_test.iloc[j][:])\n        \ny_test_pred_idx = dist_mat.argmin(axis=0)","78b8f0f8":"a = X_train.iloc[0,:]\nb = X_train.iloc[41,:]\nc = X_train.iloc[3,:]\nD = X_test.iloc[0,:] # \u0e2a\u0e34\u0e48\u0e07\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e23\u0e39\u0e49 \u0e08\u0e30\u0e2b\u0e32\u0e27\u0e48\u0e32\u0e2d\u0e22\u0e39\u0e48 class \u0e44\u0e2b\u0e19?","67739667":"for i in range(len(a)):\n    print('a',i,\":\",a[i],',',b[i],' - ',a[i]-b[i])","3e620951":"dist = 0.0\nfor i in range(len(a)): # Summation\n    dist = dist + np.power(a[i]-b[i],2)\n    print('a',i,\":\",a[i],',',b[i],' - ',a[i]-b[i],' dist = ', dist)\nfinal_dis = np.sqrt(dist)   \nprint('final_dis = ',final_dis)","78123081":"def eucli_dist(v1,v2):\n    dist = 0.0\n    for i in range(len(v1)): # Summation\n        dist = dist + np.power(v1[i]-v2[i],2)\n        #print('a',i,\":\",v1[i],',',v2[i],' - ',v1[i]-v2[i],' dist = ', dist)\n    final_dis = np.sqrt(dist)   \n    #print('final_dis = ',final_dis)\n    return final_dis","1889caea":"print('dist D,a :', eucli_dist(D,a))\nprint('dist D,b :', eucli_dist(D,b))\nprint('dist D,c :', eucli_dist(D,c))","e5dc5974":"# Time Complexity KKN = n^2\n# T(n) = n_train x n_test <= n^2 ","93bb0c93":"k = 1\ntest_idx = 0\nsort_idx = dist_mat[:,test_idx].argsort(axis=0)[:k]\ndisplay(y_train.iloc[sort_idx].value_counts().reset_index())","014be4db":"# Predict","8ffce9e2":"# predict\ny_train.iloc[sort_idx].value_counts().reset_index().loc[0,'index']","e7634dc1":"vote_class = y_train.iloc[sort_idx].value_counts().reset_index()\nvote_class","935fd7a9":"# dist_mat[train_idx,test_idx]\nfor k in range(5,25):\n    count_correct = 0\n    for i in range(y_test.shape[0]):\n        sort_idx = dist_mat[:,i].argsort(axis=0)[:k]\n        pred_class = y_train.iloc[sort_idx].value_counts().reset_index().loc[0,'index']\n        true_class = y_test.iloc[i]\n\n        if pred_class == true_class:\n            count_correct = count_correct+1\n\n        #print('test ',i,' : ',pred_class)\n    print('K=',k,'-> Accuracy ',count_correct\/y_test.shape[0]*100,'%')","7b1f3c28":"# Insert Column\n# X_test[\"target\"] = y_test\n# X_test.insert(2, \"target\", y_test, True) ","a4ce580d":"display(y_train.value_counts().reset_index())","da2bd7aa":"X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.33, random_state = 42)","758b2754":"X_train.head(),y_train.head()","2518aadc":"prototype_df2 = pd.DataFrame(data = X_train[y_train == 'Iris-versicolor'].median(axis=0)).T\nprototype_df2 = prototype_df2.append(pd.DataFrame(X_train[y_train == 'Iris-virginica'].median()).T)\nprototype_df2 = prototype_df2.append(pd.DataFrame(X_train[y_train == 'Iris-setosa'].mean()).T)","f98813f5":"prototype_df2","5ec5fbe7":"prototype_y = pd.DataFrame(data = ['Iris-versicolor'])\nprototype_y = prototype_y.append(['Iris-virginica'])\nprototype_y = prototype_y.append(['Iris-setosa'])","559cc4bb":"# initail matrix 0\ndist_mat = np.zeros(prototype_df2.shape[0]*X_test.shape[0]).reshape((prototype_df2.shape[0], X_test.shape[0]))\n\nfor j in range(X_test.shape[0]): # [0,1,....,n_test-1]\n    for i in range(prototype_df2.shape[0]): # [0,1,....,n_train-1]\n        dist_mat[i][j] = euclidean(prototype_df2.iloc[i][:],X_test.iloc[j][:])\n        \ny_test_pred_idx = dist_mat.argmin(axis=0)","bcd32916":"count_correct = 0\nfor i in range(y_test.shape[0]):\n    min_idx = dist_mat[:,i].argmin(axis=0)\n    \n    pred_class = prototype_y.iloc[min_idx,0]\n    true_class = y_test.iloc[i]\n    \n    if pred_class == true_class:\n        count_correct = count_correct+1\n        \n    print('test ',i,' : ',pred_class)\nprint('Accuracy ',count_correct\/y_test.shape[0]*100,'%')","c2c835a3":"# 1. C : number of class [Label checking]","0c049366":"# 2. Seperate X to train\/test [We already did in last section]","775fb7f3":"# 3. Calculate Euclidean distance fron test -> train","564f1ee7":"# 1.Define K","e3f7b36c":"# 3. Calculate Prototype","cfa20408":"# K Mean","5d34eb80":"# **KNN**","6cba3519":"* **Import Library**","bc1c6780":"# 3. Calculate Euclidean distance fron test -> prototype","1be6b546":"# 2. Seperate X to train\/test *[We already did in last section]*","c3d0c12b":"### Example","55f8a84f":"# 4. Prediction"}}