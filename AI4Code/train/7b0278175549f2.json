{"cell_type":{"7c37570f":"code","97ec6374":"code","33d2653a":"code","e1272247":"code","fa83932a":"code","d41eafd8":"code","1d68900b":"code","339d92e5":"code","0b47bc10":"code","61405d96":"code","fe9c8937":"code","afda5d38":"code","117c9b9d":"code","6d3001bf":"code","072f416d":"code","483515fb":"code","75c330a1":"code","7460551a":"code","324518b2":"code","9e23d01c":"code","2fce7a67":"code","3a9ca2d3":"code","2d17ae9c":"code","970328f5":"code","b58e181b":"code","08c4800d":"code","eb65e4bf":"code","d8798a51":"code","8023cce9":"code","2f0d8e15":"code","a79004a5":"code","4114e6d6":"code","e7942897":"code","cea7ad91":"code","e04ebaa2":"code","a1f9fc16":"code","62b1e244":"code","4d176198":"code","2aff1fe3":"code","987f831d":"code","2d2a262f":"code","c0ae908d":"code","a1a84498":"code","4e5be6d5":"code","2cc79078":"code","5a465b4a":"code","3eafcc82":"code","e33fe6e7":"code","db67490c":"code","d51a8b52":"code","0e72e3cc":"code","df3e9d4d":"code","0b416425":"code","46b8486f":"markdown","d7eacecb":"markdown","7a314242":"markdown","a8888de6":"markdown","f2a9be3e":"markdown","c95c3e86":"markdown","3e4f06b6":"markdown","5db49f70":"markdown","e6f324ee":"markdown","0bfe0e5a":"markdown","d73874f4":"markdown","1227d59e":"markdown","8b8ff808":"markdown","f7864e84":"markdown","6267c37a":"markdown","537b08f9":"markdown","0ed2ecbb":"markdown","96849ae2":"markdown","57821620":"markdown","e9851fa6":"markdown","fc55eee0":"markdown","981f8853":"markdown","12c151c1":"markdown","a8884ef2":"markdown"},"source":{"7c37570f":"# Import Libraries\n\nimport pandas as pd\n\n# For Association Rules Learning & Apriori \n# !pip install mlxtend\nfrom mlxtend.frequent_patterns import apriori, association_rules\n\n# Setting Configurations:\n\npd.set_option('display.max_columns', None)\npd.set_option('display.float_format', lambda x: '%.3f' % x)\n\n# Import Warnings:\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.simplefilter(action='ignore', category=DeprecationWarning)","97ec6374":"!pip install openpyxl","33d2653a":"df_ = pd.read_excel('..\/input\/online-retail-dataset\/online_retail_II.xlsx', sheet_name='Year 2010-2011')\ndf = df_.copy()","e1272247":"df.head()","fa83932a":"## Data Preprocessing\n\ndf.info()","d41eafd8":"df.isna().sum() ","1d68900b":"df.dropna(inplace=True)","339d92e5":"df.shape","0b47bc10":"df.describe().T","61405d96":"# Let's first determine cancelled transactions (Invoice Id contains value \"C\") and then remove them:\n\ndf_Invoice = pd.DataFrame({\"Invoice\":[row for row in df[\"Invoice\"].values if \"C\"  not in str(row)]})\ndf_Invoice.head()\ndf_Invoice = df_Invoice.drop_duplicates(\"Invoice\")\n","fe9c8937":"# The transactions except cancelled transactions:\ndf = df.merge(df_Invoice, on = \"Invoice\")\n","afda5d38":"# Outlier Detection:\n\n\n# Outlier de\u011ferler i\u00e7in bask\u0131lama yap\u0131lacak low ve up limit belirleyelim:\ndef outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\n\n# Replace outliers with thresholds\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n  ","117c9b9d":"df.dtypes","6d3001bf":"num_cols = [col for col in df.columns if df[col].dtypes in [\"int64\",\"float64\"] and \"ID\" not in col]\n\nprint(num_cols)","072f416d":"for col in num_cols:\n    replace_with_thresholds(df, col)","483515fb":"df.describe().T","75c330a1":"df = df[df[\"Quantity\"] > 0]\ndf = df[df[\"Price\"] > 0]","7460551a":"# Unique Number of Products (with Description)\n\ndf.Description.nunique()","324518b2":"# Unique Number of Products (with StockCode)\n\ndf.StockCode.nunique()","9e23d01c":"# 1st Step\ndf_product = df[[\"Description\",\"StockCode\"]].drop_duplicates()\ndf_product = df_product.groupby([\"Description\"]).agg({\"StockCode\":\"count\"}).reset_index()\ndf_product.sort_values(\"StockCode\", ascending=False).head()","2fce7a67":"df_product.rename(columns={'StockCode':'StockCode_Count'},inplace=True)\n\ndf_product = df_product[df_product[\"StockCode_Count\"]>1]","3a9ca2d3":"df = df[~df[\"Description\"].isin(df_product[\"Description\"])]","2d17ae9c":"print(df.StockCode.nunique())\nprint(df.Description.nunique())","970328f5":"# 2nd Step\ndf_product = df[[\"Description\",\"StockCode\"]].drop_duplicates()\ndf_product = df_product.groupby([\"StockCode\"]).agg({\"Description\":\"count\"}).reset_index()\ndf_product.rename(columns={'Description':'Description_Count'},inplace=True)","b58e181b":"df_product = df_product.sort_values(\"Description_Count\", ascending=False)\ndf_product.head()","08c4800d":"df_product = df_product[df_product[\"Description_Count\"] > 1] \n\ndf_product.head()","eb65e4bf":"df = df[~df[\"StockCode\"].isin(df_product[\"StockCode\"])]","d8798a51":"# Now each stock code represents a single product:\n\nprint(df.StockCode.nunique())\nprint(df.Description.nunique())","8023cce9":"df = df[~df[\"StockCode\"].str.contains(\"POST\", na=False)]","2f0d8e15":"df_germany = df[df[\"Country\"] == \"Germany\"]\ndf_germany.shape","a79004a5":"def create_invoice_product_df(dataframe, id=False):\n    if id:\n        return dataframe.groupby(['Invoice', \"StockCode\"])['Quantity'].sum().unstack().fillna(0). \\\n            applymap(lambda x: 1 if x > 0 else 0)\n    else:\n        return dataframe.groupby(['Invoice', 'Description'])['Quantity'].sum().unstack().fillna(0). \\\n            applymap(lambda x: 1 if x > 0 else 0)","4114e6d6":"# df_germany.pivot_table(values=['Quantity'],  index=\"Invoice\", columns=[\"StockCode\"],aggfunc=\"sum\").fillna(0).applymap(lambda x: 1 if x > 0 else 0).head()\n\n# df_germany.groupby(['Invoice', \"StockCode\"])['Quantity'].sum().unstack().fillna(0).applymap(lambda x: 1 if x > 0 else 0).head()","e7942897":"# Invoice - product matrix:\n\ngr_inv_pro_df = create_invoice_product_df(df_germany, id=True)\ngr_inv_pro_df.head()","cea7ad91":"# Let's define a function to find the product name corresponding to the stock code:\n\ndef check_id(dataframe, stockcode):\n    product_name = dataframe[dataframe[\"StockCode\"] == stockcode][\"Description\"].unique()[0]\n    return stockcode, product_name","e04ebaa2":"check_id(df_germany, 10002)","a1f9fc16":"check_id(df_germany, 47480)","62b1e244":"check_id(df_germany, 22977)","4d176198":"frequent_itemsets = apriori(gr_inv_pro_df, min_support=0.01, use_colnames=True)","2aff1fe3":"frequent_itemsets.head()","987f831d":"rules = association_rules(frequent_itemsets, metric=\"support\", min_threshold=0.01)\n\nrules.sort_values(\"support\", ascending=False).head(5)\n","2d2a262f":"sorted_rules = rules.sort_values(\"lift\", ascending=False)","c0ae908d":"product_id = 22492\n\ncheck_id(df, product_id)","a1a84498":"product_id = 22554\nrecommendation_list = []\n\n\nfor idx, product in enumerate(sorted_rules[\"antecedents\"]):\n    # antecendent tuple oldu\u011fu i\u00e7in listeye \u00e7evirelim ve liste i\u00e7inde arayal\u0131m:\n    for j in list(product):\n        if j == product_id:\n            # bu yakalad\u0131\u011f\u0131m\u0131z integer de\u011ferin indexi ne ise (idx) consequentte onu arayaca\u011f\u0131z, buldu\u011fumuz sat\u0131rlar i\u00e7in ilk \u00fcr\u00fcn\u00fc [0]  \u00f6nerelim \n            recommendation_list.append(list(sorted_rules.iloc[idx][\"consequents\"])[0])\n            recommendation_list = list( dict.fromkeys(recommendation_list) )","4e5be6d5":"list_top5 = recommendation_list[0:5]\nlist_top5","2cc79078":"# Let's show the product names of top 5 recommended products:\n\nfor elem in list_top5:\n    print(check_id(df_germany,elem))","5a465b4a":"# Import & Filter Data:\n\ndef data_filter(dataframe, country=False, Country=\"\"):\n    if country:\n        dataframe = dataframe[dataframe[\"Country\"] == Country]\n    return dataframe","3eafcc82":"def outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\n\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n    \n    \ndef data_prep(dataframe):\n    \n    # Data preprocessing:\n    dataframe.dropna(inplace=True)\n    \n    # Delete if the product name contains \"POST\":\n    dataframe = dataframe[~dataframe[\"StockCode\"].str.contains(\"POST\", na=False)]\n    \n    dataframe = dataframe[~dataframe[\"Invoice\"].str.contains(\"C\", na=False)]\n    dataframe = dataframe[dataframe[\"Quantity\"] > 0]\n    dataframe = dataframe[dataframe[\"Price\"] > 0]\n    replace_with_thresholds(dataframe, \"Quantity\")\n    replace_with_thresholds(dataframe, \"Price\")\n    return dataframe\n\n \n# Invoice Product Matrix:\ndef create_invoice_product_df(dataframe, id=False):\n    if id:\n        return dataframe.groupby(['Invoice', \"StockCode\"])['Quantity'].sum().unstack().fillna(0). \\\n            applymap(lambda x: 1 if x > 0 else 0)\n    else:\n        return dataframe.groupby(['Invoice', 'Description'])['Quantity'].sum().unstack().fillna(0). \\\n            applymap(lambda x: 1 if x > 0 else 0) \n    \n    \n# Find Product name with Stock Code:\n\ndef check_id(dataframe, stockcode):\n    product_name = dataframe[dataframe[\"StockCode\"] == stockcode][\"Description\"].unique()[0]\n    return stockcode, product_name\n\n\n# Apriori Algorithm & ARL Rules:\n\ndef apriori_alg(dataframe, support_val=0.01):\n    inv_pro_df = create_invoice_product_df(dataframe, id=True)\n    frequent_itemsets = apriori(inv_pro_df, min_support=support_val, use_colnames=True)\n    rules = association_rules(frequent_itemsets, metric=\"support\", min_threshold=support_val)\n    sorted_rules =  rules.sort_values(\"support\", ascending=False) \n    return sorted_rules\n    \n    \n  \n         \ndef recommend_product(dataframe, product_id, support_val= 0.01, num_of_products=5):\n    sorted_rules = apriori_alg(dataframe, support_val)\n    recommendation_list = []  \n    for idx, product in enumerate(sorted_rules[\"antecedents\"]):\n        for j in list(product):\n            if j == product_id:\n                recommendation_list.append(list(sorted_rules.iloc[idx][\"consequents\"])[0])\n                recommendation_list = list( dict.fromkeys(recommendation_list) )\n    return(recommendation_list[0:num_of_products])","e33fe6e7":"# Data Preparation: \ndf = df_.copy()\n\ndf = data_prep(df)\ndf = data_filter(df,country=True,Country=\"Germany\")\ndf.head()","db67490c":"def recommendation_system_func(dataframe,support_val=0.01, num_of_products= 5 ):\n    product_id = input(\"Enter a product id:\")\n    \n    if product_id in list(dataframe[\"StockCode\"].astype(\"str\").unique()):\n        product_list = recommend_product(dataframe, int(product_id), support_val, num_of_products)\n        if len(product_list) == 0:\n            print(\"There is no product can be recommended!\")\n        else:\n            print(\"Related products with product id -\" , product_id , \"can be seen below:\")\n        \n            for i in range(0, len(product_list[0:num_of_products])):\n                print(check_id(dataframe, product_list[i]))\n            \n    else:\n        print(\"Invalid Product Id, try again!\")\n","d51a8b52":"# Enter product id - 1 (22326)\n\nrecommendation_system_func(df)","0e72e3cc":"# Enter product id - 2 (22725)\n\nrecommendation_system_func(df)","df3e9d4d":"# Enter product id - 3 (22809)\n\nrecommendation_system_func(df)","0b416425":"# Enter product id - 4 (2256523)\n\nrecommendation_system_func(df)","46b8486f":"Let's explain the metrics we see in the table above:\n\n* **antecedent support:** If X is called antecendent,  'antecedent support' computes the proportion of transactions that contain the antecedent X.\n* **consequent support:** If Y is called consequent,  'consequent support' computes the proportion of transactions that contain the antecedent Y.\n* **support:** 'support' computes the proportion of transactions that contain the antecedent X and Y.\n* **confidence:** Probability of buying Y when X is bought.\n* **lift:** Represents how many times the probability of getting Y increases when X is received.","d7eacecb":"# 3. Determination of Association Rules","7a314242":"Let's delete stock codes that represent multiple products:","a8888de6":"We'll handle sales data of Germany as an example:  ","f2a9be3e":"Each product and related products can be stored at the database level and an integrated structure can be established with the purchasing processes. Thus, while a customer is purchasing product A, the first 3 products related to this product can be offered as an offer by calling the relevant product from the database. \n\n","c95c3e86":"***What is next?***","3e4f06b6":"Calculate the support values for every possible configuration of items (thereshold of support has been chosen 0.01 (1%))\n","5db49f70":"# **Dataset Story:**\n\n\u2022 The Online Retail II data set, which includes the sales data of the UK-based online sales store, was used.\n\n\u2022 Sales data between 01\/12\/2009 - 09\/12\/2011 are included in the data set.\n\n\u2022 The product catalog of this company includes souvenirs.","e6f324ee":"***Let's bring the top 5 most preferred products together with the product with id 22492.***","0bfe0e5a":"# **Market Basket Analysis with Apriori Algorithm**\n\n![image.png](attachment:e98d7aef-bab0-4cfb-a682-23da690cfd72.png)","d73874f4":"Let's sort dataframe by lift:","1227d59e":"# 1. Import Data & Data Preprocessing","8b8ff808":"# 4.Suggesting a Product to Users at the Basket Stage","f7864e84":"# **Variables Descriptions:**\n\n\u2022 InvoiceNo: Invoice Number -> If this code starts with C, it means that the operation has been canceled.\n\n\u2022 StockCode: Product Code -> Unique number for each product\n\n\u2022 Description: Product name\n\n\u2022 Quantity: Number of products -> how many of the products on the invoices were sold.\n\n\u2022 InvoiceDate\n\n\u2022 UnitePrice\n\n\u2022 CustomerID: Unique customer number\n\n\u2022 Country","6267c37a":"# **Association Rule Learning (ARL)**\n\nIn today's world where the number of customers and transactions are increasing, it has become more valuable to create meaningful results from data and for developing marketing strategies. Revealing hidden patterns in the data in order to be able to compete better and maximize profit in the face of intense competition in the market, and to establish value-oriented long-term relationships with customers, makes a great contribution to determining marketing strategies. \n\nHowever, the development of rule-based strategies is no longer possible in big data world, offering the right product to the right customer at the right time; it forms the basis of cross-selling and loyalty programs within the scope of customer retention and increasing lifetime value. Therefore, it has been crucial point for companies making product offers by using these patterns of association and developing effective marketing strategies Market Basket analysis is one of the association rule applications. It allows us to predict the products that customers tend to buy in the future by developing a pattern from their past behavior and habits. \n\nThere are different algorithms to be used for Association Rules Learning. One of them is the Apriori algorithm. In this project, product association analysis will be handled with **\u201cApriori Algorithm\u201d** and the most suitable product offers will be made for the customer who is in the sales process, using the sales data of an e-commerce company.","537b08f9":"The unique values of these 2 variables (Description & StockCode) should be equal, because each stock code represents a product:","0ed2ecbb":"***If user buys a product whose id is 22492, which products do you recommend?***","96849ae2":"We can develop different strategies at the product offer stage. \n\nFor example, When X is bought, we can sort according to the probability of buying Y (confidence) and make a product offer, or we can make an offer according to how many times the probability of sales over the lift increases. We can also make a product recommendation with a hybrid filtering where support, lift and confidence are used together. \n","57821620":"Let's delete products with more than one stock code:","e9851fa6":"The post statement in the stock code shows the postage cost, let's delete it as it is not a product:","fc55eee0":"# 2.Preparing Invoice-Product Matrix fot ARL Data Structure","981f8853":"# 6. FUNCTIONALIZATION:","12c151c1":"# **Business Problem:**\n\nSuggesting products to users at the basket stage. In this study, we will apply Market Basket analysis using the Apriori algorithm. In this context, we will consider the work in 5 steps:\n\n**1.** Import Data & Data Preprocessing\n\n**2.** Preparing Invoice-Product Matrix fot ARL Data Structure  \n\n**3.** Determination of Association Rules\n\n**4.** Suggesting appropriate product offers to customers at the basket stage \n\n**5.** Functionalization \n ","a8884ef2":"**First, define a function for recommending a product:**"}}