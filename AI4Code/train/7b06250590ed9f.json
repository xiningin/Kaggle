{"cell_type":{"71b64734":"code","34b6100a":"code","b98dc3a5":"code","4c0ee835":"code","cae9515d":"code","dcea6b25":"code","f75bb678":"code","660a58be":"code","e0a4a7fb":"code","a00c23ef":"markdown","097822b8":"markdown","cdbf5f48":"markdown"},"source":{"71b64734":"# Import Libraries\n\nimport numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt    \n\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn import metrics\n\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","34b6100a":"# Import data\n\nuse_cols = ['airline_sentiment', 'text', 'airline']\n\ndf = pd.read_csv('\/kaggle\/input\/twitter-airline-sentiment\/Tweets.csv', usecols = use_cols)\n\ndf.head()","b98dc3a5":"# Lets process the text\n\nstop_words = stopwords.words('english')\n\ndf['text_without_stopwords'] = df['text'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop_words)]))\n\ncountVect = CountVectorizer(min_df= 10)\n\nbinaryVector = countVect.fit_transform(df.text_without_stopwords)","4c0ee835":"# Seperate dataset into test and train\n\ny = df.airline_sentiment\nX = binaryVector\n\ntrain_X, test_X, train_y, test_y = train_test_split(X, y, random_state=123)\n\nprint([x.shape for x in [train_X, test_X, train_y, test_y]])","cae9515d":"# Now for testing the naive bayes model\n\nMNB = MultinomialNB()\nMNB.fit(train_X, train_y)\n\npredicted = MNB.predict(test_X)\naccuracy_score = metrics.accuracy_score(predicted, test_y)\nconfusion_count = metrics.confusion_matrix(predicted, test_y)\n\n\nprint('Accuracy: ',accuracy_score,'\\n')\nprint('Confusion Matrix:\\n',confusion_count)","dcea6b25":"# Lets plot the results properly\n\nconfusion = metrics.confusion_matrix(predicted, test_y, normalize = 'true')\n\nax= plt.subplot()\nsns.heatmap(confusion, annot=True, fmt='g', ax=ax);  #annot=True to annotate cells, ftm='g' to disable scientific notation\n\n# labels, title and ticks\nax.set_xlabel('Predicted labels');ax.set_ylabel('True labels'); \nax.set_title('Confusion Matrix'); \nax.xaxis.set_ticklabels(['negative', 'neutral', 'positive']); ax.yaxis.set_ticklabels(['negative', 'neutral', 'positive']);","f75bb678":"# Lets look for the most important words\n\nneg_class_prob_sorted = MNB.feature_log_prob_[0, :].argsort()[::-1]\npos_class_prob_sorted = MNB.feature_log_prob_[1, :].argsort()[::-1]\n\nprint('Negative words:\\n', np.take(countVect.get_feature_names(), neg_class_prob_sorted[:25]))\nprint('\\nPositive words:\\n', np.take(countVect.get_feature_names(), pos_class_prob_sorted[:25]))","660a58be":"#These words show a number of airline names so lets compare this with the positive \/ negative associations for each airline.\n\npiv = df.pivot_table(index=['airline'], columns='airline_sentiment', aggfunc='size', fill_value=0)\npiv","e0a4a7fb":"piv.plot(kind='bar')\nplt.show()","a00c23ef":"The accuracy looks good as does the confusion matrix. It seems especially strong on positive and negative sentiments but weaker on those that are neutral. \nThis is to be expected.","097822b8":"We would expect from this to see more positive association with Delta, Southwest and Virgin, and more negative assocation with American, US Airways and United.\n\nThis can be seen to some extent as Southwest and Virgin hold higher places on the positive list and American, US Airways and United higher on the negative list (when compared to themselves). However the difference in passenger numbers blunts this effect, an example of this is United which holds the most negative sentiments and the third most positive. ","cdbf5f48":"## This notebook is a practice of using Naive Bayes for explanatory sentiment analysis\n\n#### Contents:\n* Importing libraries and data\n* Processing the text into binary vectors\n* Seperate the data into test and train\n* Fit Multinomial Naive Bayes and check against test data\n* Plotting the confusion matrix with Seaborn\n* Finding the most important predictors for positive and negative sentiments\n* Checking the predictors against the airline results"}}