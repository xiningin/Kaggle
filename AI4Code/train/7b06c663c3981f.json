{"cell_type":{"6b88c38c":"code","6381ee20":"code","a002453d":"code","58b91876":"code","ffd26985":"code","4eb43037":"code","c029a2f8":"code","d4607e88":"code","6c75e19e":"code","4aa64a5f":"code","72db429e":"code","3f132f54":"code","3e80c02f":"code","dc9232ff":"code","63ddcc03":"code","eedb7692":"code","d93fa5a6":"code","2ebd2602":"code","e4256bbe":"code","ad44c341":"code","e7411e11":"code","2f263f32":"code","e04fca49":"code","54a0e3f6":"code","76aad4ee":"code","66af1b85":"code","0cb59f8c":"code","6d516a04":"code","24cef74e":"code","b471d702":"markdown","50c865dd":"markdown","c70f4fd0":"markdown","ad146999":"markdown","295fca00":"markdown","70dc1dbc":"markdown","5b64ec90":"markdown","07a79617":"markdown","741b8df3":"markdown","f908bae8":"markdown","0d200824":"markdown"},"source":{"6b88c38c":"# packages\n\n# standard\nimport numpy as np\nimport pandas as pd\n\n# plot\nimport matplotlib.pyplot as plt\nimport seaborn as sns","6381ee20":"# load data\ndf = pd.read_csv('..\/input\/colorectal-cancer-patients\/crc.txt', sep='\\t')\ndf","a002453d":"# remove empty rows\/columns\ndf = df.drop('Unnamed: 9', axis=1)\ndf = df.drop('Unnamed: 10', axis=1)\ndf = df.drop('Unnamed: 11', axis=1)\ndf = df.drop(index=62, axis=0)\ndf","58b91876":"# structure of data frame\ndf.info()","ffd26985":"features_num = ['Age (in years)', 'DFS (in months)']","4eb43037":"# basic stats\ndf[features_num].describe(percentiles=[0.1,0.25,0.5,0.75,0.9])","c029a2f8":"# plot distributions\nfor f in features_num:\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10,7))\n    \n    ax1.hist(df[f])\n    ax1.grid()\n    ax1.set_title('Histogram of ' + f)\n    \n    ax2.boxplot(df[f], vert=False)\n    ax2.grid()   \n    ax2.set_title('Boxplot of ' + f)\n    \n    plt.show()","d4607e88":"# correlations\ncorr_pearson = df[features_num].corr(method='pearson')\ncorr_spearman = df[features_num].corr(method='spearman')\n\nfig = plt.figure(figsize = (8,6))\nsns.heatmap(corr_pearson, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Pearson Correlation')\nplt.show()\n\nfig = plt.figure(figsize = (8,6))\nsns.heatmap(corr_spearman, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Spearman Correlation')\nplt.show()","6c75e19e":"plt.scatter(df['Age (in years)'], df['DFS (in months)'])\nplt.title('DFS vs Age')\nplt.xlabel('Age')\nplt.ylabel('DFS (months)')\nplt.grid()\nplt.show()","4aa64a5f":"features_cat = ['Dukes Stage', 'Gender', 'Location', \n                'DFS event', 'Adj_Radio', 'Adj_Chem']","72db429e":"for f in features_cat:\n    df[f].value_counts().sort_index().plot(kind='bar')\n    plt.title(f)\n    plt.grid()\n    plt.show()","3f132f54":"# load data\ndf_gene = pd.read_csv('..\/input\/colorectal-cancer-patients\/crc_ge.txt', \n                      sep='\\t')\ndf_gene.head()","3e80c02f":"df_gene = df_gene.transpose()\n# let's check the result:\ndf_gene.head()","dc9232ff":"# use first content row as column headers\ncol_names = df_gene.iloc[0].tolist()\ndf_gene.columns = col_names\n# now remove redundant first row\ndf_gene = df_gene.drop(axis=0, index='ID_REF')","63ddcc03":"# add ID_REF (as first column) by copying index\ndf_gene.insert(loc=0, column='ID_REF', value=df_gene.index)\n\n# and reset index\ndf_gene = df_gene.reset_index(drop=True)\n\n# convert to numerical\nfeatures_gene_num = df_gene.columns.tolist()[1:]\ndf_gene[features_gene_num] = df_gene[features_gene_num].astype(float)","eedb7692":"df_gene","d93fa5a6":"# basic stats\ndf_gene[features_gene_num].describe()","2ebd2602":"# boxplot of all variables\nfor i in range(38):\n    print('Columns', 50*i+1 , 'to', 50*i+50)\n    df_gene.iloc[:,50*i+1:50*i+50+1].plot(kind='box', figsize=(15,5))\n    plt.xticks(rotation=90)\n    plt.grid()\n    plt.show()\n    \n# separate plot for incomplete last block\nprint('Columns', 1901 , 'to', 1935)\ndf_gene.iloc[:,1901:1935+1].plot(kind='box', figsize=(15,5))\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()","e4256bbe":"# calc correlation matrix\ncorr_pearson = df_gene[features_gene_num].corr(method='pearson')\n# mask lower triangle to avoid redundant values later\ncorr_pearson = corr_pearson.mask(np.tril(np.ones(corr_pearson.shape)).astype(np.bool))","ad44c341":"# convert matrix in data frame\ndf_corr = pd.DataFrame(corr_pearson).melt(var_name='x2', \n                                          value_name='corr_p',\n                                          ignore_index=False)\ndf_corr.insert(loc=0, column='x1', value=df_corr.index)\n\n# remove redundancies\ndf_corr = df_corr[~df_corr.corr_p.isna()]\n\n# reset index\ndf_corr = df_corr.reset_index(drop=True)","e7411e11":"# show result\ndf_corr","2f263f32":"# distribution of correlations\ndf_corr.corr_p.plot(kind='hist', bins=100)\nplt.title('Distribution of Correlations')\nplt.grid()\nplt.show()","e04fca49":"# top 10 positive correlations\ndf_corr.nlargest(10, columns='corr_p')","54a0e3f6":"# show example plot\nv1 = '1553185_at'\nv2 = '1553186_x_at'\nplt.scatter(df_gene[v1],df_gene[v2],alpha=.5)\nplt.title(v2+' vs '+v1)\nplt.grid()\nplt.show()","76aad4ee":"# top 10 negative correlations\ndf_corr.nsmallest(10, columns='corr_p')","66af1b85":"# show example plot\nv1 = '1552386_at'\nv2 = '1553105_s_at'\nplt.scatter(df_gene[v1],df_gene[v2],alpha=.5)\nplt.title(v2+' vs '+v1)\nplt.grid()\nplt.show()","0cb59f8c":"# left join\ndf_combined = df.join(other=df_gene.set_index('ID_REF'), on='ID_REF', how='left')","6d516a04":"df_combined","24cef74e":"# export for potential external processing\ndf_combined.to_csv('df_combined.csv')","b471d702":"### Now this looks good!","50c865dd":"<a id='6'><\/a>\n# Combine two files","c70f4fd0":"# Table of Contents\n* [Patient Data - Import and Preparation](#1)\n* [Patient Data - Numerical Variables](#2)\n* [Patient Data - Categorical Variables](#3)\n* [Gene Expression Data - Import and Preparation](#4)\n* [Gene Expression Data - EDA](#5)\n* [Combine two files](#6)","ad146999":"<a id='5'><\/a>\n# Gene Expression Data - EDA","295fca00":"<a id='2'><\/a>\n# Patient Data - Numerical Variables","70dc1dbc":"<a id='1'><\/a>\n# Patient Data - Import and Preparation","5b64ec90":"### Plot all variables","07a79617":"### Correlation","741b8df3":"### Ok, we need to transpose this to align with the patients' data","f908bae8":"<a id='3'><\/a>\n# Patient Data - Categorical Variables","0d200824":"<a id='4'><\/a>\n# Gene Expression Data - Import and Preparation"}}