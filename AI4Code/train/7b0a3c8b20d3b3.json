{"cell_type":{"250e39ff":"code","d6b2ba07":"code","20100ca3":"code","46c20550":"code","28395a42":"code","a5fadef4":"code","c4f44943":"markdown","ba4b3f53":"markdown","20340e4d":"markdown","dd64bdf3":"markdown","8bc2a570":"markdown","c997b252":"markdown","c27682e8":"markdown","a15fdfc8":"markdown"},"source":{"250e39ff":"import numpy as np\nimport pandas as pd\nimport pandas_profiling as pdp\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV \nfrom sklearn.preprocessing import LabelEncoder","d6b2ba07":"shopping_df = pd.read_csv('..\/input\/shoppingdata\/shopping-data.csv')\nshopping_profile_df = pdp.ProfileReport(shopping_df)","20100ca3":"shopping_profile_df","46c20550":"le_gender = LabelEncoder()\nshopping_df.Genre = le_gender.fit_transform(shopping_df.Genre)\nX = shopping_df.iloc[:,:-1].values\ny = shopping_df.iloc[:,-1].values","28395a42":"objective = \"reg:linear\"\nseed = 100\nn_estimators = 100\nlearning_rate = 0.2\ngamma = 0.1\nsubsample = 0.8\ncolsample_bytree = 0.8\nreg_alpha = 1\nreg_lambda = 1\nsilent = False\n\nparameters = {}\nparameters['objective'] = objective\nparameters['seed'] = seed\nparameters['n_estimators'] = n_estimators\nparameters['learning_rate'] = learning_rate\nparameters['gamma'] = gamma\nparameters['colsample_bytree'] = colsample_bytree\nparameters['reg_alpha'] = reg_alpha\nparameters['reg_lambda'] = reg_lambda\nparameters['silent'] = silent\n\nscores = []\n\ncv_params = {'max_depth': [i for i in range(2,20)],\n             'min_child_weight': [i for i in range(1,45)]\n            }\n\ngbm = GridSearchCV(xgb.XGBRegressor(\n                                        objective = objective,\n                                        seed = seed,\n                                        n_estimators = n_estimators,\n                                        learning_rate = learning_rate,\n                                        gamma = gamma,\n                                        subsample = subsample,\n                                        colsample_bytree = colsample_bytree,\n                                        reg_alpha = reg_alpha,\n                                        reg_lambda = reg_lambda,\n                                        silent = silent\n\n                                    ),\n                    \n                    param_grid = cv_params,\n                    iid = False,\n                    scoring = \"neg_mean_squared_error\",\n                    cv = 5,\n                    verbose = True\n)\n\ngbm.fit(X,y)","a5fadef4":"print(\"Best score: \",gbm.best_score_)\nprint(\"Best params: \",gbm.best_params_)","c4f44943":"# 3. Preparing Data for Modelling","ba4b3f53":"# THE-END","20340e4d":"Thanks for reading my kernel..This is just baseline more work to come soon.","dd64bdf3":"# 2. Exploratory Data Analysis","8bc2a570":"# 4. Results","c997b252":"From the above results we can say that if more input data is provided then we can get better results.","c27682e8":"Since the Genre column is text, we have to covert it into Numbers.","a15fdfc8":"# 1. Necessary Imports"}}