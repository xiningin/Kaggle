{"cell_type":{"da3d0595":"code","b5317919":"code","7c39069b":"code","ca16ee17":"code","556c6e3e":"code","1970ac2f":"code","d9528c0c":"code","ae652d51":"code","f52b4e0d":"code","3246c6a9":"code","f9cdb238":"code","a860dbde":"code","c0bebe89":"code","d9a6cb79":"code","e5b55e23":"code","cca97fce":"code","c4b02883":"code","efaad820":"code","a22d1654":"code","be3c1f2d":"code","097b7d17":"code","908b6bca":"code","3338de85":"code","f4d6d722":"code","fad7e3be":"code","1a6a05d5":"code","ac610fee":"code","cd3d3c70":"code","1695c116":"code","eb075775":"code","7a3e9d54":"code","2fdd1cc9":"code","23b998d8":"code","dd624b2d":"markdown"},"source":{"da3d0595":"import numpy as np\nimport pandas as pd\n\nfrom category_encoders import CountEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import train_test_split\n\nfrom tqdm.notebook import tqdm\nimport lightgbm as lgb\nfrom lightgbm import LGBMRegressor\n\nimport matplotlib.pyplot as plt\nimport shap\nimport re","b5317919":"#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))","7c39069b":"SAMPLE_SUBMISSION_PATH = '\/kaggle\/input\/data-science-summer2-osaka\/sample_submission.csv'\nWIKI_PATH = '\/kaggle\/input\/data-science-summer2-osaka\/wiki.csv'\nUSER_X_ANIME_PATH = '\/kaggle\/input\/data-science-summer2-osaka\/user_x_anime.csv'\nTRAIN_PATH = '\/kaggle\/input\/data-science-summer2-osaka\/train.csv'\nTEST_PATH = '\/kaggle\/input\/data-science-summer2-osaka\/test.csv'","ca16ee17":"df_train = pd.read_csv(TRAIN_PATH)\ndf_test = pd.read_csv(TEST_PATH)","556c6e3e":"pd.get_option(\"display.max_columns\")\npd.set_option('display.max_columns', 100)","1970ac2f":"df_train.shape, df_test.shape","d9528c0c":"df_train.head(2)","ae652d51":"df_test.tail(2)","f52b4e0d":"y_train = df_train.Score\nX_train = df_train.drop(['Score'], axis=1)\nX_test = df_test.copy()","3246c6a9":"df_train.Score.describe()","f9cdb238":"# y_train \u306e Histogram\nplt.hist(y_train,bins=50)","a860dbde":"# \u4f8b\uff09\u3000\u5e74\u4ee3\u5225\u30d5\u30e9\u30b0\u8ffd\u52a0 (train)\nX_train['Premiered_year'] = 0\nX_train['Premiered_nendai_1980'] = 0\nX_train['Premiered_nendai_2000'] = 0\nX_train['Premiered_nendai_2021'] = 0\n\nfor i in range(len(X_train.Premiered)):\n    if X_train['Premiered'].iloc[i] == 'Unknown':\n        X_train['Premiered_year'].iloc[i] = -999\n    else:\n        X_train['Premiered_year'].iloc[i] = re.sub(r\"\\D\", \"\", X_train['Premiered'].iloc[i]).replace(' ','')\n        \nX_train['Premiered_year'] = X_train['Premiered_year'].astype(int)\n\nfor i in range(len(X_train.Premiered)):\n    if X_train['Premiered_year'].iloc[i] < 1980:\n        X_train['Premiered_nendai_1980'].iloc[i] = 1\n    if 1980 <= X_train['Premiered_year'].iloc[i] <= 2000:\n        X_train['Premiered_nendai_2000'].iloc[i] = 1        \n    if X_train['Premiered_year'].iloc[i] > 2000:\n        X_train['Premiered_nendai_2021'].iloc[i] = 1\n\nX_train['Premiered_year_diff'] =  2021 - X_train['Premiered_year']   \nfor i in range(len(X_train.Premiered_year_diff)):\n    if X_train['Premiered_year_diff'].iloc[i] > 3000:\n        X_train['Premiered_year_diff'].iloc[i] = -999","c0bebe89":"# (\u7d9a\u304d: test)\nX_test['Premiered_year'] = 0\nX_test['Premiered_nendai_1980'] = 0\nX_test['Premiered_nendai_2000'] = 0\nX_test['Premiered_nendai_2021'] = 0\n\nfor i in range(len(X_test.Premiered)):\n    if X_test['Premiered'].iloc[i] == 'Unknown':\n        X_test['Premiered_year'].iloc[i] = -999\n    else:\n        X_test['Premiered_year'].iloc[i] = re.sub(r\"\\D\", \"\", X_test['Premiered'].iloc[i]).replace(' ','')\n        \nX_test['Premiered_year'] = X_test['Premiered_year'].astype(int)\n\nfor i in range(len(X_test.Premiered)):\n    if X_test['Premiered_year'].iloc[i] < 1980:\n        X_test['Premiered_nendai_1980'].iloc[i] = 1\n    if 1980 <= X_test['Premiered_year'].iloc[i] <= 2000:\n        X_test['Premiered_nendai_2000'].iloc[i] = 1        \n    if X_test['Premiered_year'].iloc[i] > 2000:\n        X_test['Premiered_nendai_2021'].iloc[i] = 1\n\nX_test['Premiered_year_diff'] =  2021 - X_test['Premiered_year']   \nfor i in range(len(X_test.Premiered_year_diff)):\n    if X_test['Premiered_year_diff'].iloc[i] > 3000:\n        X_test['Premiered_year_diff'].iloc[i] = -999","d9a6cb79":"cats = []\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \n        print(col, X_train[col].nunique())","e5b55e23":"def aired_datetime(air):\n    try:\n        d = pd.to_datetime('2021-08-01') - pd.to_datetime(air.split(' to ')[0])\n        d \/= pd.Timedelta('1d')\n    except:\n        d = -9999\n    return d","cca97fce":"X_train['Aired'] = X_train['Aired'].apply(aired_datetime)\nX_test['Aired'] = X_test['Aired'].apply(aired_datetime)","c4b02883":"X_train.head(2)","efaad820":"X_test.tail(2)","a22d1654":"# Count Encoding\ncats = []\n\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \nce = CountEncoder(cols=cats)\n\nX_train = ce.fit_transform(X_train)\nX_test = ce.transform(X_test)","be3c1f2d":"cats","097b7d17":"#\u3000\u4e0d\u8981\u30ab\u30e9\u30e0\u524a\u9664\nX_train.drop(['MAL_ID', 'English name'], axis=1, inplace=True)\nX_test.drop(['MAL_ID', 'English name'], axis=1, inplace=True)","908b6bca":"X_train_, X_val, y_train_, y_val = train_test_split(X_train, y_train, test_size=0.3, random_state=71)","3338de85":"model = LGBMRegressor(learning_rate=0.03, n_estimators=1000, random_state=71)","f4d6d722":"model.fit(X_train_, y_train_, eval_set=[(X_val, y_val)], eval_metric='rmse', early_stopping_rounds=30)","fad7e3be":"y_pred_val = model.predict(X_val)\ny_pred_val","1a6a05d5":"best_iter = model.best_iteration_\nmodel = LGBMRegressor(learning_rate=0.03, n_estimators=best_iter, random_state=71)\nmodel.fit(X_train, y_train)","ac610fee":"y_pred_train = model.predict(X_train)\ny_pred_train","cd3d3c70":"y_pred_test = model.predict(X_test)\ny_pred_test","1695c116":"submission = pd.read_csv(SAMPLE_SUBMISSION_PATH, index_col=0)\nsubmission.Score = y_pred_test","eb075775":"submission","7a3e9d54":"submission.to_csv('submission.csv')","2fdd1cc9":"plt.scatter(y_train, y_pred_train, alpha = 0.5)\nplt.plot(np.linspace(0, 10, 100), np.linspace(0, 10, 100), \"red\")\nplt.show()","23b998d8":"shap.initjs()\n\nexplainer = shap.TreeExplainer(model=model, feature_perturbation='tree_path_dependent', model_output='raw')\n\nshap_values = explainer.shap_values(X=X_train)\n\nshap.summary_plot(shap_values, X_train, plot_type=\"bar\")","dd624b2d":"***\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0***"}}