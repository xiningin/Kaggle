{"cell_type":{"020fc449":"code","a5281111":"code","225091e5":"code","48fa7f60":"code","7530a254":"code","0dd49ea4":"code","6e1d7998":"code","83f9c6dc":"code","b437cdb5":"code","477d5989":"code","c15c38c6":"code","918dde52":"code","c5610fa9":"code","a98ab3bc":"code","60e27614":"code","5fea1ace":"code","1f48f3ab":"code","48ef5f79":"code","acedbda1":"code","1f1bc821":"code","e7462ed2":"code","51c24e34":"code","4ddede8c":"code","934b2951":"code","578cb369":"code","06e90a02":"code","d84b5f7b":"code","0cf0f952":"code","dd8cbc93":"code","4c871220":"code","d9aae6bc":"code","d4201120":"code","9d6a4104":"code","51085b13":"code","1eedffaf":"code","4da8c9c2":"code","dbfe9f68":"code","d67eac94":"code","7dc11ca3":"code","c3704f9a":"code","3287ddfb":"code","7f0d557d":"code","f7b63d9d":"code","b82469db":"code","a235c2f7":"code","a18418f4":"code","abd0bbd5":"code","65bd786d":"code","f8ec27c9":"code","e0eb3ea9":"code","f0b9b95b":"code","601c6546":"markdown","d1ac680b":"markdown","69d02176":"markdown","d795217a":"markdown","89c828bd":"markdown","1b4b1a4f":"markdown","1343b8a5":"markdown","0b780649":"markdown","036479ae":"markdown","52fd5d0b":"markdown","f4be07b1":"markdown","987920f5":"markdown","38c7b426":"markdown","d5411ee0":"markdown","ceda1a53":"markdown","c2da9c49":"markdown","ebc69303":"markdown"},"source":{"020fc449":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a5281111":"df = pd.read_csv('..\/input\/traintitanicknn\/train.csv')","225091e5":"df.head(2)","48fa7f60":"df.info()","7530a254":"df.describe()","0dd49ea4":"sns.pairplot(data=df)","6e1d7998":"df.corr()","83f9c6dc":"sns.heatmap(df.corr(), cmap=\"YlGnBu\")","b437cdb5":"sns.displot(df['Survived'], kde=True)","477d5989":"sns.displot(df['Age'], kde=True)","c15c38c6":"sns.scatterplot(data=df, x=df['Age'], y=df['Pclass'], hue=df['Survived'])","918dde52":"sns.boxplot(data=df, x=df['Age'], y=df['Pclass'])","c5610fa9":"sns.rugplot(data=df, x=df['Age'],y=df['Survived'])","a98ab3bc":"sns.scatterplot(data=df, x=df['Age'], y=df['Survived'], hue=df['Pclass'])","60e27614":"sns.countplot(df['Survived'], hue=df['Pclass'])","5fea1ace":"sns.kdeplot(data=df, x=df['Fare'], y=df['Pclass'])","1f48f3ab":"df.shape","48ef5f79":"def null_counter(df):\n    null_percent = df.isna().sum() \/ len(df) * 100\n    return null_percent","acedbda1":"null = null_counter(df)\nnull","1f1bc821":"df = df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)","e7462ed2":"df['Age'] = df['Age'].fillna(df['Age'].mean())","51c24e34":"df = df.dropna()","4ddede8c":"df.head()","934b2951":"from sklearn.compose import make_column_transformer\nfrom sklearn.preprocessing import MinMaxScaler, OneHotEncoder","578cb369":"transformer = make_column_transformer(\n    (MinMaxScaler(), ['Fare', 'Parch', 'SibSp', 'Pclass', 'Age']),\n    (OneHotEncoder(handle_unknown='ignore'), ['Sex', 'Embarked'])\n)","06e90a02":"X = df.drop('Survived', axis=1)\ny = df['Survived']","d84b5f7b":"from sklearn.model_selection import train_test_split\ntrain_x, test_x, train_y, test_y = train_test_split(X, y, test_size=0.15, random_state=42)","0cf0f952":"transformer.fit(train_x)","dd8cbc93":"train_x = transformer.transform(train_x)\ntest_x = transformer.transform(test_x)","4c871220":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics","d9aae6bc":"train_scores = []\ntest_scores = []\nfor k in range(1, 10):\n    neigh = KNeighborsClassifier(n_neighbors=k)\n    neigh.fit(train_x, train_y)\n    train_scores.append(metrics.accuracy_score(train_y, neigh.predict(train_x)))\n    test_scores.append(metrics.accuracy_score(test_y, neigh.predict(test_x)))","d4201120":"train_scores","9d6a4104":"test_scores","51085b13":"scores_dict = {\n    'Train Score':train_scores,\n    'Test Score':test_scores\n}\n\npd.DataFrame(scores_dict)","1eedffaf":"plt.scatter(x=train_scores, y=test_scores, color='b')\nplt.xlabel('train score')\nplt.ylabel('test score')","4da8c9c2":"sns.scatterplot(x=train_scores, y=test_scores, hue=range(1, 10))","dbfe9f68":"fig = plt.figure(figsize=(6, 4))\nax1 = fig.add_subplot(111)\nax1.scatter(x=range(1, 10), y=train_scores, color='r', label='Train Score')\nax1.scatter(x=range(1, 10), y=test_scores, color='g', label='Test Score')\nplt.xlabel('number of neighbors')\nplt.legend()","d67eac94":"errors = []\nfor i in range(0, 9): errors.append(train_scores[i] - test_scores[i])","7dc11ca3":"errors","c3704f9a":"plt.plot(range(1, 10), errors)\nplt.xlabel('number of neighbors')\nplt.ylabel('Error')","3287ddfb":"from sklearn.model_selection import cross_val_score\ncross_scores = []\nfor i in range(1, 10):\n    neigh2 = KNeighborsClassifier(n_neighbors=i).fit(train_x, train_y)\n    cross_scores.append(cross_val_score(neigh2, train_x, train_y, cv=5, scoring='accuracy'))","7f0d557d":"def show_cross_val_scores(cross_scores=cross_scores):\n    mean_scores = []\n    for i in range(0, 9):\n        mean_scores.append(cross_scores[i].mean())\n    df_scores = pd.DataFrame({'number of neighbors':range(1, 10), 'mean of scors':mean_scores})\n    return df_scores       ","f7b63d9d":"df_scores = show_cross_val_scores()\ndf_scores","b82469db":"final_model = KNeighborsClassifier(n_neighbors=4)\nfinal_model.fit(train_x, train_y)\nyhat_final = final_model.predict(test_x)\nyhat_train_final = final_model.predict(train_x)","a235c2f7":"# accuracy score\nmetrics.accuracy_score(test_y, yhat_final)","a18418f4":"# recall\nmetrics.recall_score(test_y, yhat_final)","abd0bbd5":"# precision\nmetrics.precision_score(test_y, yhat_final)","65bd786d":"from sklearn.metrics import plot_confusion_matrix, plot_precision_recall_curve, plot_roc_curve","f8ec27c9":"plot_confusion_matrix(final_model, test_x, test_y)","e0eb3ea9":"plot_precision_recall_curve(final_model, test_x, test_y)","f0b9b95b":"plot_roc_curve(final_model, test_x, test_y)","601c6546":"*import libraries*","d1ac680b":"### preprocessing Data","69d02176":"**X and y**","d795217a":"#### fill age columns `nan` values","89c828bd":"### getting general information about data","1b4b1a4f":"### creating model with diffrent number of ks to find optimal number of neighbors","1343b8a5":"**correlations**","0b780649":"drop `missing values`","036479ae":"### Final Model","52fd5d0b":"#### dropping columns","f4be07b1":"## plotting for more exploration","987920f5":"**train-test-split**","38c7b426":"#### evaluating **`Final Model`**","d5411ee0":"## Build, train and evaluate Model","ceda1a53":"**creating a function to calculate null values**","c2da9c49":"# Titanic prediction with KNN","ebc69303":"**reading csv file**"}}