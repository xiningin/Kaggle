{"cell_type":{"3b3156fa":"code","9bc87ee0":"code","a1a90bcd":"code","156efd3a":"code","7f3571d3":"code","b3b5df3c":"code","518d1b26":"markdown","e1f2c23f":"markdown","bf6c4720":"markdown"},"source":{"3b3156fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n%matplotlib inline\nprint(os.listdir(\"..\/input\"))\n\ninputData = pd.read_csv(r\"..\/input\/eeg_clean.csv\");","9bc87ee0":"print(inputData.dtypes)\nprint(inputData.columns)\nprint(\"Data shape:\",inputData.shape)\nprint(inputData.head())\nprint(inputData.describe())\nprint(inputData.info())\n# Check for any nulls\nprint(inputData.isnull().sum())\n","a1a90bcd":"\ninputData['eye']=inputData[\"eye\"].astype('category')\ninputData[\"eye\"] = inputData[\"eye\"].cat.codes\nfrom sklearn.model_selection import train_test_split\nsplitRatio = 0.2\ntrain , test = train_test_split(inputData,test_size = splitRatio,random_state = 123,shuffle=True)\n\nplt.figure(figsize=(12,6))\nplt.subplot(121)\ntrain[\"eye\"].value_counts().plot.pie(labels = [\"1-open\",\"0-closed\"],\n                                              autopct = \"%1.0f%%\",\n                                              shadow = True,explode=[0,.1])\nplt.title(\"proportion of target class in train data\")\nplt.ylabel(\"\")\nplt.subplot(122)\ntest[\"eye\"].value_counts().plot.pie(labels = [\"1-open\",\"0-closed\"],\n                                             autopct = \"%1.0f%%\",\n                                             shadow = True,explode=[0,.1])\nplt.title(\"proportion of target class in test data\")\nplt.ylabel(\"\")\nplt.show()\n\n","156efd3a":"print (\"***********************\")\nprint (\"RAW DATA AND PREDICTION\")\nprint (\"***********************\")\n","7f3571d3":"\ntrain_X = train[[x for x in train.columns if x not in [\"eye\"]]]\ntrain_Y = train[[\"eye\"]]\ntest_X  = test[[x for x in test.columns if x not in [\"eye\"]]]\ntest_Y  = test[[\"eye\"]]","b3b5df3c":"\n\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score,roc_curve,auc\n\n\nclassifier =  XGBClassifier(\n learning_rate =0.1,\n n_estimators=1000,\n max_depth=10,\n min_child_weight=1,\n gamma=0.015,\n subsample=0.8,\n colsample_bytree=0.8,\n reg_alpha=0.005,\n objective= 'binary:logistic',\n nthread=4,\n scale_pos_weight=1,\n seed=27,\n random_state=777,\n )\n# we need to use values.ravel to ensure the labels are sent to classifier correctly\nclassifier.fit(train_X,train_Y.values.ravel())\nprint(classifier)\n\npredictions = classifier.predict(test_X)\nprint (\"\\naccuracy_score :\",accuracy_score(test_Y,predictions))\nprint (\"\\nclassification report :\\n\",(classification_report(test_Y,predictions)))\nplt.figure(figsize=(13,10))\nplt.subplot(221)\nsns.heatmap(confusion_matrix(test_Y,predictions),annot=True,fmt = \"d\",linecolor=\"k\",linewidths=3)\nplt.title(\"CONFUSION MATRIX\",fontsize=20)\npredicting_probabilites = classifier.predict_proba(test_X)[:,1]\nfpr,tpr,thresholds = roc_curve(test_Y,predicting_probabilites)\nplt.subplot(222)\nplt.plot(fpr,tpr,label = (\"Area_under the curve :\",auc(fpr,tpr)),color = \"r\")\nplt.plot([1,0],[1,0],linestyle = \"dashed\",color =\"k\")\nplt.legend(loc = \"best\")\nplt.title(\"ROC - CURVE & AREA UNDER CURVE\",fontsize=20)    \ndataframe = pd.DataFrame(classifier.feature_importances_,train_X.columns).reset_index()\ndataframe = dataframe.rename(columns={\"index\":\"features\",0:\"coefficients\"})\ndataframe = dataframe.sort_values(by=\"coefficients\",ascending = False)\nplt.subplot(223)\nax = sns.barplot(x = \"coefficients\" ,y =\"features\",data=dataframe,palette=\"husl\")\nplt.title(\"FEATURE IMPORTANCES\",fontsize =20)\nfor i,j in enumerate(dataframe[\"coefficients\"]):\n    ax.text(.011,i,j,weight = \"bold\")\nplt.show()\n","518d1b26":"# Seperating Predictor and target variables","e1f2c23f":"# XGBOOST classification","bf6c4720":"# Lets convert the open\/closed category for eye into integers"}}