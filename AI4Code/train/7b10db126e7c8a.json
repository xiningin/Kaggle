{"cell_type":{"8a8f02dd":"code","7268df5a":"code","b4481187":"code","ce74eb05":"code","4c91246b":"code","d70662d0":"code","2b4419c7":"code","0b9cc46f":"code","ca2d73c4":"code","5ca7031a":"code","c262a685":"code","515aa275":"code","47ece0aa":"code","b000ce3b":"code","e96786fc":"code","954511e7":"code","33614f47":"markdown"},"source":{"8a8f02dd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7268df5a":"#iporting the datasets and and converting into a dataframe\ndataset1=pd.read_csv(\"..\/input\/random-linear-regression\/train.csv\")\ndataset2=pd.read_csv(\"..\/input\/random-linear-regression\/test.csv\")","b4481187":"dataset1.head()","ce74eb05":"dataset2.head()","4c91246b":"#to check if there is any missing value in the training set\ndataset1.isnull().sum()","d70662d0":"#there is one missing value in y so we can just drop it using dropna\ndataset1.dropna(inplace=True)\n","2b4419c7":"#to check if there is any missing value in the test set\ndataset2.isnull().sum()","0b9cc46f":"\ndataset1.describe()","ca2d73c4":"#now to check if there is a linear relationship between x and y\n%matplotlib inline\nimport matplotlib.pyplot as plt","5ca7031a":"plt.scatter(dataset1.x,dataset1.y,edgecolor=\"orange\")\nplt.xlabel(\"value of x\")\nplt.ylabel(\"value of y\")\nplt.title(\"relationship between x and y\")\nplt.show()","c262a685":"#from the graph we can say that there is a strong linear relationship between x and y \n#so now we can apply the linear model\n","515aa275":"X_train = dataset1.x.values.reshape(-1,1)\ny_train = dataset1.y.values.reshape(-1,1)\nX_test  = dataset2.x.values.reshape(-1,1)\ny_test  = dataset2.y.values.reshape(-1,1)","47ece0aa":"from sklearn.linear_model import LinearRegression\n\nlogmodel=LinearRegression()\nlogmodel.fit(X_train,y_train)\ny_pred_train=logmodel.predict(X_train)","b000ce3b":"#plotting the y_pred values against the X_train\nplt.scatter(X_train,y_train)\nplt.plot(X_train,y_pred_train,color=\"orange\",linewidth=3)\nplt.title(\"train_data_prediction\")\nplt.show()","e96786fc":"#let us now check the accuracy of the training set\nlogmodel.score(X_train,y_train)","954511e7":"#let us check the accuracy of the test set\nlogmodel.score(X_test,y_test)","33614f47":"#splitting the data into train and test"}}