{"cell_type":{"49296e3f":"code","8c4a6830":"code","34524198":"code","310fdfaa":"code","ce771b41":"code","c0c2c9ea":"code","17a3e9f0":"code","272eff72":"code","60a418b2":"code","42abb650":"code","3988ce92":"code","918c7bd9":"code","2b9125de":"code","87f47198":"code","e5e50375":"code","534212d2":"code","823585d5":"code","2c5c45ca":"code","af6340c6":"code","2171a39e":"code","f975517d":"code","619502fe":"code","f78f8a7e":"code","7186dc51":"code","4746f53c":"code","c2acda92":"code","752a6751":"code","784acc8c":"code","3e926760":"code","64a272b6":"code","25cde8c9":"code","40d9e7f4":"code","6f5b7c2b":"code","e371b144":"code","8b303ef2":"code","3d41378f":"code","b583e33c":"markdown","5af161bc":"markdown","241667db":"markdown","2f87a20b":"markdown","01e57674":"markdown","665a61e4":"markdown","fa6a7397":"markdown","a763f5e2":"markdown"},"source":{"49296e3f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom pandas.api.types import is_string_dtype, is_numeric_dtype\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import forest\n\nimport math\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8c4a6830":"PATH = '\/kaggle\/input\/edmonton-property-assessment-data-2020\/property_2020.csv'","34524198":"df_raw = pd.read_csv(PATH)\ndf_raw.shape","310fdfaa":"df_raw.head(1)","ce771b41":"df_raw[\"Assessed Value\"] = df_raw[\"Assessed Value\"].replace(0, 1)\ndf_raw[\"Assessed Value\"] = np.log(df_raw[\"Assessed Value\"])","c0c2c9ea":"df = df_raw.copy()","17a3e9f0":"# check cardinality\nfor i in df.columns:\n    if df[i].dtype.name == 'object':\n        print(i, df[i].nunique(), '[OBJECT]')\n    else: \n        print(i, df[i].nunique())","272eff72":"# change column dtypes string, change to cat\nfor label, col in df.items():\n    if label in ['Suite', 'Street Name', 'Neighbourhood']:\n        df[label] = col.astype('category').cat.as_ordered()","60a418b2":"# check cardinality of categories\nfor i in df.columns:\n    if df[i].dtype.name == 'category':\n        print(i, df[i].nunique())","42abb650":"hot_columns = ['Assessment Class', 'Ward', 'Garage']\ndf = pd.get_dummies(df, columns=hot_columns, dummy_na=True);","3988ce92":"df.head()","918c7bd9":"df.dtypes[0:9]","2b9125de":"for i in df.columns:\n    if df[i].isna().sum() > 0:\n        print(i, df[i].isna().sum(), '\\t', 'min value:', df[i].min(), 'max value:', df[i].max())","87f47198":"# turn to codes\ncats = [\"Suite\", \"Street Name\", \"Neighbourhood\"]\nfor name in cats:\n    df[name] = pd.Categorical(df[name]).codes+1","e5e50375":"df[\"House Number\"] = df[\"House Number\"].fillna(0)\ndf[\"Neighbourhood ID\"] = df[\"Neighbourhood ID\"].fillna(0)","534212d2":"for i in df.columns:\n    if df[i].isna().sum() > 0:\n        print(i, df[i].isna().sum())","823585d5":"df.head()","2c5c45ca":"df_y = df[\"Assessed Value\"]\ndf_X = df.drop(\"Assessed Value\", axis=1)","af6340c6":"df_X.head()","2171a39e":"X_train, X_valid, y_train, y_valid = train_test_split(df_X, df_y, test_size = 0.3)","f975517d":"y_train.isna().sum()","619502fe":"# Activate Random forest tree subsetting\n# from the old fastai 0.7 library*\n# https:\/\/github.com\/fastai\/fastai\/blob\/master\/old\/fastai\/structured.py\ndef set_rf_samples(n):\n    \"\"\" Changes Scikit learn's random forests to give each tree a random sample of\n    n random rows.\n    \"\"\"\n    forest._generate_sample_indices = (lambda rs, n_samples:\n        forest.check_random_state(rs).randint(0, n_samples, n))\n\ndef reset_rf_samples():\n    \"\"\" Undoes the changes produced by set_rf_samples.\n    \"\"\"\n    forest._generate_sample_indices = (lambda rs, n_samples:\n        forest.check_random_state(rs).randint(0, n_samples, n_samples))\n\n","f78f8a7e":"set_rf_samples(20000)","7186dc51":"# Score printer from fastML lesson 1\n# https:\/\/github.com\/fastai\/fastai\/blob\/master\/courses\/ml1\/lesson1-rf.ipynb\ndef rmse(x,y): \n    return math.sqrt(((x-y)**2).mean())\n\ndef print_score(m):\n    res = [rmse(m.predict(X_train), y_train), rmse(m.predict(X_valid), y_valid),\n                m.score(X_train, y_train), m.score(X_valid, y_valid)]\n    if hasattr(m, 'oob_score_'): res.append(m.oob_score_)\n    print('rmse:[ Training  |  Validation ]  |  score: [Train  |  Valid ] ')\n    print(res)","4746f53c":"m = RandomForestRegressor(n_estimators=100, max_features=0.5, n_jobs=-1)\n%time m.fit(X_train, y_train)\n#print_score(m)","c2acda92":"print_score(m)","752a6751":"def rf_feat_importance(m, df):\n    return pd.DataFrame({'cols':df.columns, 'imp':m.feature_importances_}\n                       ).sort_values('imp', ascending=False)\n\n\n\nfi = rf_feat_importance(m, df_X); fi[:12]","784acc8c":"fi.plot('cols', 'imp', figsize=(10, 6), legend=False)","3e926760":"def plot_fi(fi):\n    return fi.plot('cols', 'imp', 'barh', figsize=(12, 10), legend=False)\n\nplot_fi(fi[:25]);","64a272b6":"to_keep = fi[fi.imp>0.0025].cols; len(to_keep)","25cde8c9":"df_keep = df[to_keep].copy()\nX_train, X_valid, y_train, y_valid = train_test_split(df_keep, df_y, test_size=0.25, random_state=42)","40d9e7f4":"m = RandomForestRegressor(n_estimators=60, min_samples_leaf=10, n_jobs=-1, max_features=math.log(2), oob_score=False)\n%time m.fit(X_train, y_train)\n%time print_score(m)","6f5b7c2b":"fi = rf_feat_importance(m, df_keep)\nplot_fi(fi);","e371b144":"import matplotlib.pyplot as plt","8b303ef2":"house_num = df_keep[\"House Number\"]\nprice = df_y\n\nfig, ax = plt.subplots(figsize=(12, 10))\nax.scatter(house_num[::10], price[::10], alpha=0.3)\n\nax.set(xlabel='House Number', ylabel='Assessed Value',\n       title='House Numbers vs Value')\nax.grid()\n\nplt.show()","3d41378f":"house_num = df_keep[\"Account Number\"]\nprice = df_y\n\nfig, ax = plt.subplots(figsize=(12, 10))\nax.scatter(house_num[::10], price[::10], alpha=0.3)\n\nax.set(xlabel='Account', ylabel='Assessed Value',\n       title='Account Number vs Value')\nax.grid()\n\nplt.show()","b583e33c":"One-hot `Assessment Class`, `Ward`, and `Garage`.","5af161bc":"## Data Background\n- around 400k rows of data.  That seems like a lot of properties?","241667db":"### Fix NaN values\nOne-hot columns already done, but numerics still not done. All these are technically categorical, so using a signal value.\n\nTurn everything to codes?","2f87a20b":"### Train random forest","01e57674":"## Edmonton Property EDA\nThis notebook includes EDA on edmonton's 2020 property data\n- feature importance from random forests\n- other stuff?","665a61e4":"### Do Random Train Test split","fa6a7397":"### Pre-processing","a763f5e2":"Plan is to make make `Suite`, `Street Name`, and `Neighbourhood` into categories, turn rest into one hots. Remember categories also works best for ordinals. **Possibly make Neighbourhood one hot.**"}}