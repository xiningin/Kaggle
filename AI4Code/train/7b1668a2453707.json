{"cell_type":{"c92232b1":"code","a990d85f":"code","564554f1":"code","73c8e552":"code","8551d5c1":"code","29b587d8":"code","59c7dcf3":"code","22562348":"code","d1da051a":"code","8e1a9ea9":"code","eec74903":"code","5fa0be39":"code","1975b9e9":"code","d070ab7d":"code","87b76bc3":"code","ed17137e":"code","ceaf6e72":"code","0dcfd470":"code","b69c4550":"code","24ee0082":"code","d2524c2d":"markdown","7367fa0a":"markdown","2046951f":"markdown","17517470":"markdown","2c15722b":"markdown","07aa9dad":"markdown","e56aba24":"markdown","5868608b":"markdown","775aa18c":"markdown","c3f77f70":"markdown","9f5d6f80":"markdown"},"source":{"c92232b1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a990d85f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import MaxNLocator\nimport matplotlib.ticker as mtick","564554f1":"df=pd.read_csv(\"\/kaggle\/input\/the-fincen-files\/transactions_map.csv\",index_col='id')","73c8e552":"fmt = '${x:,.0f}'\ntick = mtick.StrMethodFormatter(fmt)\nncols=2\ndf['begin_date']=pd.to_datetime(df['begin_date'])\ndf['end_date']=pd.to_datetime(df['end_date'])\ndf['year']=df['begin_date'].dt.year","8551d5c1":"def SumNumberYearlyST (df):\n    labels_year, frequencies_year = np.unique(df['year'][~np.isnan(df['year'])], return_counts = True)\n    #labels=labels_year.astype(int)\n    plt.figure(figsize = (10,10))\n    plt.plot(labels_year,frequencies_year)\n    plt.title('Number of Suspicious Transactions per Year')\n    plt.xticks(np.arange(min(labels_year), max(labels_year)+2, 2))\n    plt.yticks(np.arange(min(frequencies_year)-1,max(frequencies_year),50))\n    plt.xlabel('Year')\n    plt.ylabel('Number of ST')\n    plt.show()","29b587d8":"SumNumberYearlyST (df)","59c7dcf3":"def NumberST(df, dire, top): \n    labels_org_con, frequencies_org_con =np.unique(df[dire+'_iso'], return_counts = True)\n    count_sort_ind = np.argsort(-frequencies_org_con)\n    plt.figure(figsize = (15,15))\n    plt.bar(labels_org_con[count_sort_ind][:top],frequencies_org_con[count_sort_ind][:top])\n    plt.title(f'Number of Suspicious Transactions in {dire} Country'.title())\n    plt.yticks(np.arange(min(frequencies_org_con[count_sort_ind][:top])-20,max(frequencies_org_con),100))\n    plt.xlabel(f'Top {top} {dire} Country'.title())\n    plt.ylabel('Number of ST')\n    plt.show()","22562348":"NumberST(df,'originator', 5)    ","d1da051a":"def HighestST(df, dire, top):\n    df1=(df.groupby([dire +'_iso'])['amount_transactions'].sum()\/1000000).round(0).nlargest(top).reset_index()\n    ax=df1.plot.bar(dire +'_iso', 'amount_transactions', fontsize=15,\n                    figsize = (15,15),title=f'Amount of Suspicious Transactions in {dire} Country'.title(),\n                    xlabel=f'Top {top} {dire} Country'.title(),ylabel='Amound of ST')\n    ax.yaxis.set_major_formatter(tick) ","8e1a9ea9":"HighestST(df,'beneficiary',5 )","eec74903":"##by transaction amount over year\ndef STyearly(df,dire, top):\n    df1=(df.groupby([dire +'_iso'])['amount_transactions'].sum()\/1000000).round(0).nlargest(top).reset_index()\n    toplist=list(df1[dire+'_iso'])\n    df2=df[['year', dire+'_iso','amount_transactions']].loc[df[dire+'_iso'].isin(toplist)]\n    top_year=(df2.groupby([dire+'_iso','year'])['amount_transactions'].sum()\/1000000).round(2).reset_index()\n    top_year.set_index('year', inplace=True)\n    top_year.index.astype(int)\n    grouped = top_year.groupby(dire+'_iso')\n    nrows = int(np.ceil(grouped.ngroups\/ncols))\n    fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(15,15), sharex=True, sharey=True)\n    for (key, ax) in zip(grouped.groups.keys(), axes.flatten()):\n        grouped.get_group(key).plot(ax=ax)\n        ax.legend([key],loc='upper right', frameon=False)\n        ax.yaxis.set_major_formatter(tick) \n    ax.xaxis.set_major_locator(MaxNLocator(integer=True)) \n    plt.show() ","5fa0be39":"STyearly(df,'beneficiary', 10)","1975b9e9":"##worldmaps of occurrence##\nimport geopandas as gpd\nimport geoplot as gplt\nimport geoplot.crs as gcrs\nimport mapclassify as mc","d070ab7d":"world = gpd.read_file(gplt.datasets.get_path('world'))\nworld = world[world.id !='-99']","87b76bc3":"world_points=world.copy()\nworld_points['centroid'] = world_points.centroid\nworld_points = world_points.set_geometry('centroid')","ed17137e":"from shapely.geometry import MultiPoint\ncountry_sum=(df.groupby(['originator_iso','beneficiary_iso'])['amount_transactions'].agg(sum)\/100000).reset_index()\nmap_network = world_points.merge(country_sum, left_on=\"id\", right_on=\"originator_iso\")\nmap_network = world_points.merge(map_network, left_on=\"id\", right_on=\"beneficiary_iso\")","ceaf6e72":"def mapST(df,dire):\n    country_sum=df.groupby([dire+'_iso'])['amount_transactions'].agg(sum)\/100000\n    map_st = world.merge(country_sum, left_on=\"id\", right_on=dire+'_iso')\n    scheme = mc.UserDefined(map_st['amount_transactions'], bins=[2500, 5000, 10000, 50000])\n    gplt.choropleth(\n        map_st, hue='amount_transactions',\n        edgecolor='lightgray', linewidth=1,\n        cmap='rainbow', legend=True, legend_kwargs={'loc': 'lower left', 'fontsize':15},\n        scheme=scheme, figsize=(15,15),\n        legend_labels=['< $2,500 million','$2,500-5,000 million', '$5,000-10,000 million', '$10,000-50,000 million',\n             '>$50,000 million'])\n    plt.title(\"Sum of ST by Country between 2000 and 2017\",fontsize=20)\n    plt.show()","0dcfd470":"mapST(df,'beneficiary')","b69c4550":"###ST Flows###    \ndef CountrySTFlow(df, dire, country, top):\n    \n    ###ST flowing in or out from a Country###\n    df2=df[df[dire+'_iso']==country]\n    df2['multi'] = [MultiPoint([x, y]) for x, y in zip(df2.centroid_y, df2.centroid_x)]\n    df2=df2.set_geometry('multi')\n    df2=df2.nlargest(top, columns=['amount_transactions'])\n    scheme = mc.JenksCaspall(df2['amount_transactions'])\n    lc=[f'${x:,.0f} million' for x in df2['amount_transactions']] \n    ax = gplt.sankey(df2, projection=gcrs.WebMercator(),\n                hue='amount_transactions', scheme=scheme, cmap='Dark2', \n                legend=True,legend_kwargs={'loc': 'lower left', 'fontsize':10},\n                legend_labels=lc, figsize=(12,12), linestyles=':')\n    gplt.polyplot(world, ax=ax, facecolor='lightgray', edgecolor='white')\n    plt.title(f\"Sum of top {top} ST of {country} {dire.title()} between 2000 and 2017\",fontsize=15)\n    plt.show()","24ee0082":"CountrySTFlow(map_network, 'beneficiary', 'USA', 5)","d2524c2d":"Flow map showing ST sending out and coming in a country","7367fa0a":"The yearly highest ST amount","2046951f":"Import geographical analysis packages","17517470":"The highest ST amount","2c15722b":"Setting up central points for countries","07aa9dad":"Generate multipoints for ST flow plots","e56aba24":"Basic map showing sum ST by country","5868608b":"dire is the direction of stranscations, either 'originator' or 'beneficiary', top (int) is the highest ST occurrence.","775aa18c":"Set up datetime format and currency format","c3f77f70":"There are many missing values in the column of 'number of suspicious transactions' (ST), so I used the occurrence of ST instead. The function can work with datasets that have the same structure and variable names.","9f5d6f80":"Obtain world map"}}