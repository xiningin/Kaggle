{"cell_type":{"d4a74926":"code","8bce30e8":"code","73893352":"code","31bad990":"code","e4b30c3f":"code","2635d289":"code","29a63b0e":"code","fcc8420c":"code","5ffa40ae":"code","2a316d70":"code","ef957237":"code","f7b9a636":"code","267e434b":"code","1bd01e69":"code","8d21b6e7":"code","1fb978c8":"code","fc88b36c":"code","87e313a9":"code","14a5773b":"code","a2eee93a":"code","c0e531d6":"markdown","bd35e62d":"markdown","5146ccac":"markdown","2e62a2f7":"markdown","714b258a":"markdown","eb092ac4":"markdown","84fa7920":"markdown","47ef7865":"markdown","fd930963":"markdown"},"source":{"d4a74926":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\nimport missingno as msno\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8bce30e8":"df = pd.read_csv('..\/input\/nndss-tuberculosis\/nndss-table-iii.-tuberculosis.csv')\ndf.head()","73893352":"val = ['Tuberculosis\u2020, Current quarter', 'MMWR Quarter', 'Tuberculosis\u2020, Previous 4 quarters Min', 'Tuberculosis\u2020, Previous 4 quarters Max']\nplt.figure(figsize=(15,15))\nplt.subplots_adjust(right=1.5)\nfor i in range(5):\n    plt.subplot(2,3,i+1), sns.countplot(x=val[i], hue='MMWR Year', data = df)\n    plt.legend(['Not Tuberculosis', 'Tubercuosis'], loc='upper center', prop={'size': 10})\n    plt.title('Count of Tuberculosis in {} Feature'.format(val[i]), size=10, y=1.05)","31bad990":"surv = df['MMWR Year'] == 1\n\nsns.distplot(df[~surv]['Tuberculosis\u2020, Previous 4 quarters Max'], label='Tuberculosis Max', hist=True, color='#e74c3c')\nsns.distplot(df[surv]['Tuberculosis\u2020, Previous 4 quarters Min'], label='Tuberculosis Min', hist=True, color='#2ecc71')\n\nplt.legend()\nplt.title('Tuberculosis Distribution')\n\n        \nplt.show()","e4b30c3f":"plt.figure(figsize=(14,6))\nplt.plot(range(0,len(df[~surv]['Tuberculosis\u2020, Previous 4 quarters Min'])), df[~surv]['Tuberculosis\u2020, Previous 4 quarters Min'], color='blue', animated=True, linewidth=1)\nplt.plot(range(0,len(df[surv]['Tuberculosis\u2020, Previous 4 quarters Max'])), df[surv]['Tuberculosis\u2020, Previous 4 quarters Max'], color='red', animated=True, linewidth=1)\nplt.xlabel('Tuberculosis\u2020, Previous 4 quarters Max', fontsize=14)\nplt.ylabel('Tuberculosis\u2020, Previous 4 quarters Min', fontsize=14)\nplt.legend(['Tuberculosis'])\nplt.title('Distribution of Tuberculosis')\nplt.show()","2635d289":"fig ,ax=plt.subplots(2,2,figsize=(14,12))\nsns.barplot('Tuberculosis\u2020, Previous 4 quarters Min','Tuberculosis\u2020, Previous 4 quarters Max',data=df,ax=ax[0][0])\nax[0][0].set_title('Tuberculosis 4 Quarters Min and Max')\nsns.pointplot('Tuberculosis\u2020, Previous 4 quarters Min','Tuberculosis\u2020, Previous 4 quarters Max',data=df,ax=ax[0][1])\nax[0][1].set_title('Tuberculosis\u2020, Previous 4 quarters')\nsns.countplot('Tuberculosis\u2020, Previous 4 quarters Min',hue='Tuberculosis\u2020, Previous 4 quarters Max',data=df,ax=ax[1][0])\nax[1][0].set_title('Tuberculosis\u2020, Previous 4 quarters')\nsns.pointplot('MMWR Year','MMWR Quarter',data=df,ax=ax[1][1])\nax[1][1].set_title('Tuberculosis Year & Quarter')\nplt.show()","29a63b0e":"sns.countplot(x='Tuberculosis\u2020, Previous 4 quarters Min', hue='Reporting area', data = df)","fcc8420c":"! apt remove -y openjdk-11-jre-headless","5ffa40ae":"!apt install -y openjdk-8-jdk openjdk-8-jre","2a316d70":"!java -version","ef957237":"!pip install pyspark","f7b9a636":"import re\nfrom pylab import *\nfrom pyspark.sql.functions import udf, concat, col, lit\nfrom pyspark import SparkConf, SparkContext\nfrom pyspark.sql import SparkSession, SQLContext\nfrom pyspark.sql.types import *\nimport pyspark.sql.functions as F","267e434b":"#Creating spark session\nsc = SparkContext.getOrCreate(SparkConf().setMaster(\"local[*]\"))\nfrom pyspark.sql import SparkSession\nspark = SparkSession \\\n    .builder \\\n    .getOrCreate()\nsqlContext = SQLContext(sc)\n\nfrom pyspark.ml.feature import StringIndexer\nfrom pyspark.ml.feature import VectorAssembler\nfrom pyspark.ml.feature import Normalizer\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.ml.classification import GBTClassifier\nfrom pyspark.ml.classification import DecisionTreeClassifier\nfrom pyspark.ml.classification import LinearSVC\nfrom pyspark.ml.classification import RandomForestClassifier\nfrom pyspark.ml.classification import MultilayerPerceptronClassifier\nfrom pyspark.ml.classification import MultilayerPerceptronClassifier","1bd01e69":"fig,axes = plt.subplots(1,1,figsize=(20,5))\nsns.heatmap(df.isna(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","8d21b6e7":"ax = msno.dendrogram(df)","1fb978c8":"msno.heatmap(df)","fc88b36c":"# filling missing values with NA\ndf[['Tuberculosis\u2020, Current quarter', 'Tuberculosis\u2020, Current quarter, flag', 'Tuberculosis\u2020, Previous 4 quarters Min, flag', 'Tuberculosis\u2020, Previous 4 quarters Max, flag', 'Tuberculosis\u2020, Cum 2017, flag', 'Tuberculosis\u2020, Cum 2016, flag', 'Location2']] = df[['Tuberculosis\u2020, Current quarter', 'Tuberculosis\u2020, Current quarter, flag', 'Tuberculosis\u2020, Previous 4 quarters Min, flag', 'Tuberculosis\u2020, Previous 4 quarters Max, flag', 'Tuberculosis\u2020, Cum 2017, flag', 'Tuberculosis\u2020, Cum 2016, flag', 'Location 2']].fillna('NA')","87e313a9":"dfs = np.split(df, [len(df)], axis=0)","14a5773b":"train = dfs[0]\ntrain.shape","a2eee93a":"train = sqlContext.createDataFrame(train)","c0e531d6":"Das War's Kaggle Notebook Runner: Mar\u00edlia Prata   @mpwolke","bd35e62d":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSTK2fleZOLf9dpnTmRljUGZ380Fgy3XgBF1Q&usqp=CAU)\ntwitter.com","5146ccac":"#Attempt to use Spark ML. Though I failed.","2e62a2f7":"#Codes from Utcarsh Agrawal https:\/\/www.kaggle.com\/utcarshagrawal\/titanic-spark-ml-magic\/data","714b258a":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQCobG0BmNYxlDMK1WjIgleyp9IQ1MMzL2fUA&usqp=CAU)\nyk-health.org","eb092ac4":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcT4wY_gvOEqdVdpHHlb1MynjeFGVS4sH6Q5-w&usqp=CAU)\nkaggle.com","84fa7920":"Heatmap shows the correlation of missingness between every 2 column\n\nA value near -1 means if one variable appears then the other variable is very likely to be missing. A value near 0 means there is no dependence between the occurrence of missing values of two variables. A value near 1 means if one variable appears then the other variable is very likely to be present.","47ef7865":"#the National Notifiable Diseases Surveillance System (NNDSS)\n\nTo protect Americans from serious disease, the National Notifiable Diseases Surveillance System (NNDSS) helps public health monitor, control, and prevent about 120 diseases. These diseases are important to monitor nationwide and include infectious diseases such as Zika, foodborne outbreaks such as E. coli, and noninfectious conditions such as lead poisoning. About 3,000 public health departments gather and use data on these diseases to protect their local communities. Through NNDSS, CDC receives and uses these data to keep people healthy and defend America from health threats. \nNNDSS is a multifaceted program that includes the surveillance system for collection, analysis, and sharing of health data. It also includes policies, laws, electronic messaging standards, people, partners, information systems, processes, and resources at the local, state, territorial, and national levels. https:\/\/wwwn.cdc.gov\/nndss\/","fd930963":"A dendogram plot is a tree diagram of missingness that reveals trends deeper than the pairwise ones visible in the correlation heatmap.\n\nFor detailed explanation you can refer to: https:\/\/github.com\/ResidentMario\/missingno"}}