{"cell_type":{"e9551460":"code","ef012aa2":"code","51df7f4f":"code","ee3ccaee":"code","72a806f3":"code","0ccd32d4":"code","1d9d4c9e":"code","2669a214":"code","72c9250e":"code","5756864a":"code","722b4df9":"code","3a7f36bb":"code","e9922f95":"code","b3be0900":"code","68c5f329":"code","9ec85568":"code","a7d08651":"code","ed49594c":"code","f7e43205":"code","8ce6eb38":"code","d392c6a9":"code","ca9731a1":"code","253daa84":"code","0a49e9ed":"code","77a7cfb5":"code","100b8a50":"code","3e334d67":"code","2390c651":"code","b7f6867d":"code","25f5efdd":"code","5d35bc04":"code","b03e3db9":"code","a13eeac1":"code","c239f10a":"code","92185c3b":"code","76aad326":"markdown","74b05e21":"markdown","73eee105":"markdown","8c17c6f5":"markdown","683b0e6b":"markdown","ac9321e0":"markdown","b8da22e0":"markdown","71e4c9f1":"markdown","98c959cd":"markdown","9bafdeb3":"markdown","5281bec3":"markdown","44b4667c":"markdown","6c4e89b9":"markdown","303f39ab":"markdown","185f35f8":"markdown","448f8739":"markdown","164b9c94":"markdown","c154e993":"markdown","316ee8f9":"markdown","2cc310e3":"markdown","dcca9934":"markdown","2f271ac6":"markdown","fb8306dc":"markdown"},"source":{"e9551460":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sys\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom tqdm.notebook import tqdm\nfrom catboost import CatBoostRegressor\nimport re\n\nfrom sklearn.base import clone\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\n","ef012aa2":"print('Python       :', sys.version.split('\\n')[0])\nprint('Numpy        :', np.__version__)","51df7f4f":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","ee3ccaee":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","72a806f3":"VERSION    = 5\nDIR_TRAIN  = '..\/input\/sfcarprice\/' # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b \u043a \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0443 \u0441\u0432\u043e\u0439 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\nDIR_TEST   = '..\/input\/sf-dst-car-price\/'\nVAL_SIZE   = 0.1   # 33%\nN_FOLDS    = 5\n\n# CATBOOST\nITERATIONS = 6000\nLR         = 0.05","0ccd32d4":"!ls ..\/input\/","1d9d4c9e":"train = pd.read_csv(DIR_TRAIN+'BMW_train.csv') # \u043c\u043e\u0439 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\ntest = pd.read_csv(DIR_TEST+'test.csv')\nsample_submission = pd.read_csv(DIR_TEST+'sample_submission.csv')","2669a214":"train = train.dropna(subset = ['price', 'name'])\ntrain['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].fillna('3 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435', inplace = True)\ntrain['\u041f\u0422\u0421'].fillna('\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b', inplace = True)\n","72c9250e":"def preproc_data(df_input):\n    '''includes several functions to pre-process the predictor data.'''\n    \n    df_output = df_input.copy()\n    \n    # ################### \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 ############################################################## \n    # \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u044b\u0435 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n    df_output.drop(['id', '\u0422\u0430\u043c\u043e\u0436\u043d\u044f', '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435', 'vehicleConfiguration'], axis=1, inplace=True,)\n    \n    \n    # \u0432 \u044f\u0432\u043d\u043e\u043c \u0432\u0438\u0434\u0435 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 INT \u043e\u0431\u044a\u0435\u043c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f \u0438 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c\n    df_output['enginePower'] = df_output['enginePower'].apply(lambda x: int(x[:-4]))\n    df_output['engineDisplacement'] = df_output['engineDisplacement'].apply(lambda x: \n                                                                            0 if x == 'undefined LTR' else 10 * float(x[:-4]))\n\n    # ################### fix ############################################################## \n    # \u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u0437 float \u0432 int (\u0438\u043d\u0430\u0447\u0435 catboost \u0432\u044b\u0434\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443)\n    for feature in ['modelDate', 'numberOfDoors', 'mileage', 'productionDate', 'enginePower', 'engineDisplacement']:\n        df_output[feature]=df_output[feature].astype('int32')\n    \n\n    \n    # ################### Feature Engineering ####################################################\n    # \u0442\u0443\u0442 \u0432\u0430\u0448 \u043a\u043e\u0434 \u043d\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0442\u0447\u0435\u0439\n    # \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a = \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043e\u043f\u0446\u0438\u0439\n    df_output['lenConfiguration'] = df_input['\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f'].apply(lambda x: len(configuration_parsing(x)))\n    \n    # ################### Clean #################################################### \n    # \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0449\u0435 \u043d\u0435 \u0443\u0441\u043f\u0435\u043b\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \n    df_output.drop(['description', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435', '\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f'], axis=1, inplace=True,)\n    \n    # V5 - \u0443\u0431\u0435\u0440\u0435\u043c name, \u0432\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445\n    #df_output.drop(['name'], axis=1, inplace=True)\n    \n    return df_output\n\n###################################################\ndef configuration_parsing(txt):\n    configuration = []\n    pattern = r'\\\"values\\\":\\[(.+?)\\]}'\n    for txt_elem in re.findall(pattern, txt):\n        pattern_txt_elem = r'\\\"(.+?)\\\"'\n        for config_item in re.findall(pattern_txt_elem, txt_elem):\n            configuration.append(config_item)\n    return configuration","5756864a":"# \u043a\u043e\u0434 \u0434\u043b\u044f one-hot-encoding \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u0438\nset_configuration = set()\nfor i in range(train.shape[0]):\n    txt = train['\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f'].iloc[i]\n    lst = configuration_parsing(txt)\n    set_configuration.update(set(lst))\n\nfor i in range(test.shape[0]):\n    txt = test['\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f'].iloc[i]\n    lst = configuration_parsing(txt)\n    set_configuration.update(set(lst))\n    \ntrain = train.reindex(columns = train.columns.tolist() + list(set_configuration))\ntest = test.reindex(columns = test.columns.tolist() + list(set_configuration))\n\nfor col in set_configuration:\n    train[col] = train['\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f'].apply(lambda x: 1 if col in configuration_parsing(x) else 0)\n    test[col] = test['\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f'].apply(lambda x: 1 if col in configuration_parsing(x) else 0)","722b4df9":"train_preproc = preproc_data(train)\nX_sub = preproc_data(test)","3a7f36bb":"train_preproc.drop(['URL'], axis=1, inplace=True,) # \u0443\u0431\u0440\u0430\u043b \u043b\u0438\u0448\u043d\u0438\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446, \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0435\u0442 \u0432 test\u0435","e9922f95":"X = train_preproc.drop(['price'], axis=1,)\ny = 0.95 * train_preproc.price.values","b3be0900":"cat_features_ids = ['bodyType', 'brand', 'color', 'fuelType', 'name',\n         'vehicleTransmission', '\u041f\u0440\u0438\u0432\u043e\u0434', '\u0420\u0443\u043b\u044c', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b', '\u041f\u0422\u0421']","68c5f329":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=VAL_SIZE, shuffle=True, random_state=RANDOM_SEED)","9ec85568":"# Keep list of all categorical features in dataset to specify this for CatBoost\n# cat_features_ids = np.where(X_train.apply(pd.Series.nunique) < 3000)[0].tolist()\ncat_features_ids = ['bodyType', 'brand', 'color', 'fuelType', 'name',\n         'vehicleTransmission', '\u041f\u0440\u0438\u0432\u043e\u0434', '\u0420\u0443\u043b\u044c', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b', '\u041f\u0422\u0421']","a7d08651":"model = CatBoostRegressor(iterations = ITERATIONS,\n                          learning_rate = LR,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE']\n                         )\nmodel.fit(X_train, y_train,\n         cat_features=cat_features_ids,\n         eval_set=(X_test, y_test),\n         verbose_eval=100,\n         use_best_model=True,\n         plot=True\n         )","ed49594c":"model.save_model('catboost_single_model_baseline.model')","f7e43205":"features_importances = pd.DataFrame(data = model.feature_importances_, index = X.columns, columns = ['FeatImportant'])\nfeatures_importances.sort_values(by = 'FeatImportant', ascending = False).head(20)","8ce6eb38":"predict_submission = model.predict(X_sub)\npredict_submission","d392c6a9":"sample_submission['price'] = predict_submission\nsample_submission.to_csv(f'submission_v{VERSION}.csv', index=False)\nsample_submission.head(10)","ca9731a1":"def cat_model(y_train, X_train, X_test, y_test):\n    model = CatBoostRegressor(iterations = ITERATIONS,\n                              learning_rate = LR,\n                              eval_metric='MAPE',\n                              random_seed = RANDOM_SEED,)\n    model.fit(X_train, y_train,\n              cat_features=cat_features_ids,\n              eval_set=(X_test, y_test),\n              verbose=False,\n              use_best_model=True,\n              plot=False)\n    \n    return(model)\n\n\ndef mape(y_true, y_pred):\n    return np.mean(np.abs((y_pred-y_true)\/y_true))","253daa84":"submissions = pd.DataFrame(0,columns=[\"sub_1\"], index=sample_submission.index) # \u043a\u0443\u0434\u0430 \u043f\u0438\u0448\u0435\u043c \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u044b \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\nscore_ls = []\nsplits = list(KFold(n_splits=N_FOLDS, shuffle=True, random_state=RANDOM_SEED).split(X, y))\n\nfor idx, (train_idx, test_idx) in tqdm(enumerate(splits), total=N_FOLDS,):\n    # use the indexes to extract the folds in the train and validation data\n    X_train, y_train, X_test, y_test = X.iloc[train_idx], y[train_idx], X.iloc[test_idx], y[test_idx]\n    # model for this fold\n    model = cat_model(y_train, X_train, X_test, y_test,)\n    # score model on test\n    test_predict = model.predict(X_test)\n    test_score = mape(y_test, test_predict)\n    score_ls.append(test_score)\n    print(f\"{idx+1} Fold Test MAPE: {mape(y_test, test_predict):0.3f}\")\n    # submissions\n    submissions[f'sub_{idx+1}'] = model.predict(X_sub)\n    model.save_model(f'catboost_fold_{idx+1}.model')\n    \nprint(f'Mean Score: {np.mean(score_ls):0.3f}')\nprint(f'Std Score: {np.std(score_ls):0.4f}')\nprint(f'Max Score: {np.max(score_ls):0.3f}')\nprint(f'Min Score: {np.min(score_ls):0.3f}')","0a49e9ed":"submissions.head(10)","77a7cfb5":"submissions['blend'] = (submissions.sum(axis=1))\/len(submissions.columns)\n# sample_submission['price'] = np.around(submissions['blend'].values, decimals = -4) # \u043e\u043a\u0440\u0443\u0433\u043b\u0438\u043b\u0438 \u0434\u043e 10 \u0442\u044b\u0441\nsample_submission['price'] = np.ceil(submissions['blend'].values \/ 10000) * 10000 # \u043e\u043a\u0440\u0443\u0433\u043b\u0438\u043b\u0438 \u0434\u043e 10 \u0442\u044b\u0441\n# sample_submission['price'] = submissions['blend'].values","100b8a50":"sample_submission.to_csv(f'submission_blend_v{VERSION}_BMW.csv', index=False)\nsample_submission.head(10)","3e334d67":"def compute_meta_feature(model, X_train, X_test, y_train, cv):\n    \"\"\"\n    Computes meta-features usinf the classifier cls\n    \n    :arg model: scikit-learn classifier\n    :arg X_train, y_train: training set\n    :arg X_test: testing set\n    :arg cv: cross-validation folding\n    \"\"\"\n    \n    X_meta_train = np.zeros_like(y_train, dtype = np.float32)\n    for train_fold_index, predict_fold_index in cv.split(X_train):\n        X_fold_train, X_fold_predict = X_train[train_fold_index], X_train[predict_fold_index]\n        y_fold_train = y_train[train_fold_index]\n        \n        folded_model = clone(model)\n        folded_model.fit(X_fold_train, y_fold_train)\n        X_meta_train[predict_fold_index] = folded_model.predict(X_fold_predict)\n        \n    meta_model = clone(model)\n    meta_model.fit(X_train, y_train)\n    \n    X_meta_test = meta_model.predict_proba(X_test)[:,1]\n    \n    return X_meta_train, X_meta_test","2390c651":"n_foldes = 5\ncv = KFold(n_splits=n_foldes, shuffle=True)\n\n\nX_meta_train_features = []\nX_meta_test_features = []\n\n# 1 - catboost\n# \u0442\u0443\u0442 \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0443 \u043e\u0442 \u0432\u0441\u0435\u0433\u043e \u0425,\u0443 - \u0431\u0435\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u043a\u043e\u0442 \u0432\u043d\u0430\u0447\u0430\u043b\u0435 \u0441\u0434\u0435\u043b\u0430\u043b\u0438. \u041c\u044b \u0442\u0430\u043a 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442\u0431\u0440\u043e\u0441\u0438\u043b\u0438\n# \u0438 \n\nmodel = CatBoostRegressor(iterations = ITERATIONS,\n                          learning_rate = LR,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE']\n                         )\n\nX_meta_train = np.zeros_like(y, dtype = np.float32)\nX_meta_test = np.zeros(len(X_sub), dtype = np.float32)\nfor train_fold_index, predict_fold_index in cv.split(X):\n    X_fold_train, X_fold_predict = X.iloc[train_fold_index], X.iloc[predict_fold_index]\n    y_fold_train = y[train_fold_index]\n\n    folded_model = clone(model)\n    folded_model.fit(X_fold_train, y_fold_train,\n                     cat_features=cat_features_ids,\n                     eval_set=(X_test, y_test),\n                     verbose_eval=1000,\n                     use_best_model=True,\n                     plot=False\n)\n    X_meta_train[predict_fold_index] = folded_model.predict(X_fold_predict)\n    X_meta_test += folded_model.predict(X_sub)\n    \n'''\n# \u0414\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043d\u0430 \u0442\u0435\u0441\u0442\u0435 \u044f \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0430\u043b\u0430 \u043c\u043e\u0434\u0435\u043b\u044c, \u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u0432\u0437\u044f\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043f\u043e \u0444\u043e\u043b\u0430\u0434\nmeta_model = clone(model)\nmeta_model.fit(X_train, y_train,\n             cat_features=cat_features_ids,\n             eval_set=(X_test, y_test),\n             verbose_eval=1000,\n             use_best_model=True,\n             plot=True\n)\n'''\n\nX_meta_test = X_meta_test \/ n_foldes\n\nX_meta_train_features.append(X_meta_train)\nX_meta_test_features.append(X_meta_test)\n\n# randomForestRegressor\n\n# LinearRegressor l1\n\n# LinearRegressor l2","b7f6867d":"X.drop(cat_features_ids, axis = 1).info()","25f5efdd":"# 2 - randomForestRegressor\n\nmodel = RandomForestRegressor(n_estimators=300, random_state=42)\n\nX_meta_train = np.zeros_like(y, dtype = np.float32)\nX_train_num = X.drop(cat_features_ids, axis = 1)\n#X_test_num = X_test.drop(cat_features_ids, axis = 1)\nX_sub_num = X_sub.drop(cat_features_ids, axis = 1)\n\nfor train_fold_index, predict_fold_index in cv.split(X_train_num):\n    X_fold_train, X_fold_predict = X_train_num.iloc[train_fold_index], X_train_num.iloc[predict_fold_index]\n    y_fold_train = y[train_fold_index]\n\n    folded_model = clone(model)\n    folded_model.fit(X_fold_train, y_fold_train)\n    X_meta_train[predict_fold_index] = folded_model.predict(X_fold_predict)\n\nmeta_model = clone(model)\nmeta_model.fit(X_train_num, y)\n\nX_meta_test = meta_model.predict(X_sub_num)\n\nX_meta_train_features.append(X_meta_train)\nX_meta_test_features.append(X_meta_test)\n\n","5d35bc04":"# 3 LinearRegressor\n# \u0447\u0442\u043e-\u0442\u043e \u0435\u0440\u0443\u043d\u0434\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0430\u0441\u044c, \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0447\u0442\u043e \u0441 \u043d\u0435\u0439 - \u0432 \u043e\u0442\u0432\u0435\u0442\u0430\u0445 \u0442\u0435\u0441\u0442\u0430 \u0431\u044b\u043b\u043e \u043e\u0442\u0440\u0438\u0446 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 20!!!\n# \u043c\u043e\u0436\u0435\u0442 \u0432\u0437\u044f\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 - \u0433\u043e\u0434, \u043f\u0440\u043e\u0431\u0435\u0433, \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438\n\n\nmodel = LinearRegression(normalize = True)\n\nX_meta_train = np.zeros_like(y, dtype = np.float32)\n\nfor train_fold_index, predict_fold_index in cv.split(X_train_num):\n    X_fold_train, X_fold_predict = X_train_num.iloc[train_fold_index], X_train_num.iloc[predict_fold_index]\n    y_fold_train = y[train_fold_index]\n\n    folded_model = clone(model)\n    folded_model.fit(X_fold_train, y_fold_train)\n    X_meta_train[predict_fold_index] = folded_model.predict(X_fold_predict)\n\nmeta_model = clone(model)\nmeta_model.fit(X_train_num, y)\n\nX_meta_test = meta_model.predict(X_sub_num)\n\nX_meta_train_features.append(X_meta_train)\nX_meta_test_features.append(X_meta_test)\n\n","b03e3db9":"stacked_features_train = np.vstack(X_meta_train_features[:2]).T\nstacked_features_test = np.vstack(X_meta_test_features[:2]).T","a13eeac1":"stacked_features_test[:10,:]","c239f10a":"X_meta_test_features[0].max()","92185c3b":"final_model = LinearRegression()\nfinal_model.fit(stacked_features_train, y)\nsample_submission['price'] = np.floor(final_model.predict(stacked_features_test) \/ 10000) * 10000 \nsample_submission.to_csv(f'submission_stack_v{VERSION}_BMW.csv', index=False)\nsample_submission.head(10)\n","76aad326":"### Submissions blend","74b05e21":"\u0412\u043e\u0442 \u0442\u0430\u043a \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043e \u0441\u0442\u0430\u0440\u0442\u0430, \u0434\u0430\u0436\u0435 \u043d\u0435 \u0442\u0440\u043e\u0433\u0430\u044f \u0441\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043d\u0435 \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 catboosta, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u0443\u0440\u043e\u0432\u043d\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 14%!","73eee105":"# CatBoost\n![](https:\/\/pbs.twimg.com\/media\/DP-jUCyXcAArRTo.png:large)   \n\n\n\u0423 \u043d\u0430\u0441 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435. \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0442\u0430\u043a\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0431\u044b\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0430 \u043e\u0447\u0435\u043d\u044c \u0443\u0434\u043e\u0431\u043d\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 CatBoost \u043e\u0442 \u042f\u043d\u0434\u0435\u043a\u0441\u0430. [https:\/\/catboost.ai](http:\/\/)     \n\u041d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 **CatBoost \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u043b\u0443\u0447\u0448\u0438\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0434\u043b\u044f \u0442\u0430\u0431\u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445!**\n\n#### \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0432\u0438\u0434\u0435\u043e \u043e CatBoost (\u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c):\n* [\u0414\u043e\u043a\u043b\u0430\u0434 \u043f\u0440\u043e CatBoost](https:\/\/youtu.be\/9ZrfErvm97M)\n* [\u0421\u0432\u0435\u0436\u0438\u0439 \u0422\u0443\u0442\u043e\u0440\u0438\u0430\u043b \u043e\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u044b CatBoost (\u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c)](https:\/\/youtu.be\/wQt4kgAOgV0) ","8c17c6f5":"# Bonus\n![](https:\/\/github.com\/itLek\/sfml\/raw\/7e34d290e81921bcaa9d52a2236ec9c43b928e35\/HW_lesson_03\/img\/ml.png)\n## CV\n\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u0431\u0435\u0436\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u043c\u043e\u0434\u0435\u043b\u0438, \u043f\u043e\u0433\u043e\u0432\u043e\u0440\u0438\u043c \u043e \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 ([CV](https:\/\/ru.wikipedia.org\/wiki\/\u041f\u0435\u0440\u0435\u043a\u0440\u0451\u0441\u0442\u043d\u0430\u044f_\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430))\n\n\u041a\u043e\u0433\u0434\u0430 \u043c\u044b \u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438, \u043c\u044b \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 (X_test), \u0447\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a \u043f\u043e\u0434\u0433\u043e\u043d\u0443 \u043f\u043e\u0434 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. \u0412 \u0438\u0442\u043e\u0433\u0435 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c\u00a0\u041f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 (**overfitting**).     \n\u0427\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u044d\u0442\u043e\u0433\u043e, \u043c\u043e\u0436\u043d\u043e \u0441\u0440\u0430\u0437\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u00a0\u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u043f\u043e \u0444\u043e\u043b\u0434\u0430\u043c (\u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435\u00a0*\u041a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439 Machine Learning\u00a0>\u041c\u043e\u0434\u0443\u043b\u044c 7. \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\u00a0>7.2. \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438*).\u00a0\n\n\u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u041f\u0440\u0438\u043c\u0435\u0440, \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 5 \u0444\u043e\u043b\u0434\u0430\u0445, \u0441 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438.","683b0e6b":"### Postprocessing","ac9321e0":"* > \u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f \"\u0432\u043e \u0432\u0441\u0435 \u0442\u044f\u0436\u043a\u0438\u0435\" \u0441\u043e \u0421\u0442\u0435\u043a\u0438\u043d\u0433\u043e\u043c, \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u044e \u043f\u043e\u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 Feature Engineering-\u043e\u043c.\n* > \u041f\u0440\u0438 Stacking-e \u041e\u0447\u0435\u043d\u044c \u0432\u0430\u0436\u043d\u043e \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0434\u0443\u043c\u0430\u0442\u044c \u0438 \u0432\u044b\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0447\u0435\u0442\u043a\u0438\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 CV, \u0447\u0442\u043e\u0431 \u043d\u0435 \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0443\u0442\u0435\u0447\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438.\u00a0  \n\u041d\u0430 \u043a\u0440\u0430\u0439\u043d\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439, \u043c\u043e\u0436\u043d\u043e \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0433\u043e\u0442\u043e\u0432\u044b\u043c\u0438 \u043f\u0430\u043a\u0435\u0442\u0430\u043c\u0438 \u0441 \u0443\u0436\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u043c Stacking-\u043e\u043c: [vecstack](https:\/\/github.com\/vecxoz\/vecstack), [mlxtend](http:\/\/rasbt.github.io\/mlxtend\/user_guide\/regressor\/StackingCVRegressor\/),  [H2O](http:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-docs\/downloading.html)","b8da22e0":"## Train Split","71e4c9f1":"\u0412 \u0438\u0442\u043e\u0433\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 **MAPE 13%** \u043d\u0430 \u041b\u0411!","98c959cd":"## \u0421at features\nCatBoost \u0443\u043c\u0435\u0435\u0442 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043d\u043e \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u0438\u0445 \u0443\u043a\u0430\u0437\u0430\u0442\u044c:","9bafdeb3":"# Submission","5281bec3":"## Data Preprocessing","44b4667c":"## Fit","6c4e89b9":"# Setup","303f39ab":"## Stacking \n\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0437\u0431\u0435\u0440\u0435\u043c\u0441\u044f, \u0447\u0442\u043e-\u0436\u0435 \u0442\u0430\u043a\u043e\u0435 \u044d\u0442\u043e\u0442 Stacking. \n#### \u041d\u0430\u0447\u043d\u0435\u043c \u0441 \u0410\u043d\u0441\u0430\u043c\u0431\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439:     \n\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0432\u044b \u043e\u0431\u0443\u0447\u0438\u043b\u0438 \u0420\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438. \u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0438\u0445 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0432\u0437\u0432\u0435\u0448\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043f\u043e \u0432\u0441\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044f\u043c. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c, \u0447\u0435\u043c \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 - \u0442\u0435\u043c \u043b\u0443\u0447\u0448\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c. \u0421\u043c\u043e\u0442\u0440\u0438 \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0430 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435 \n![](https:\/\/github.com\/rasbt\/mlxtend\/raw\/master\/docs\/sources\/img\/ensemble_decision_regions_2d.png)\n\n#### \u0410 \u0442\u0435\u043f\u0435\u0440\u044c Stacking:\n\u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043e\u0442 \u0440\u0430\u0437\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043f\u043e\u0447\u0435\u043c\u0443 \u0431\u044b \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u043a\u0430\u043a \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\/\u0444\u0438\u0442\u0447\u0438 \u0438 \u043d\u0435 **\u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u043e\u0432\u0435\u0440\u0445 \u044d\u0442\u0438\u0445 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043d\u043e\u0432\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c**? \u042d\u0442\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0438\u0434\u0435\u044f Stacking-a. \n![](https:\/\/miro.medium.com\/max\/1892\/0*GHYCJIjkkrP5ZgPh.png)\n\u0414\u0430\u043b\u0435\u0435 \u0435\u0433\u043e \u0435\u0449\u0435 \u043c\u043e\u0436\u043d\u043e \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e \u0443\u0441\u043b\u043e\u0436\u043d\u044f\u0442\u044c. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0430\u0445 \u0438\/\u0438\u043b\u0438 \u0441 \u0440\u0430\u0437\u043d\u044b\u043c \u0441\u043e\u0441\u0442\u0430\u0432\u043e\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (bagging), \u0438\u043b\u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u044f \u0443\u0440\u043e\u0432\u043d\u0438 \u0441\u0442\u0435\u043a\u0438\u043d\u0433\u0430. \u0412 \u0438\u0442\u043e\u0433\u0435 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0447\u0442\u043e-\u0442\u043e \u043c\u043e\u043d\u0441\u0442\u0440\u0443\u043e\u0437\u043d\u043e\u0435 \u0432\u0440\u043e\u0434\u0435 \u044d\u0442\u043e\u0433\u043e:\n![](https:\/\/blogs.sas.com\/content\/subconsciousmusings\/files\/2017\/05\/stackedapproach.png)\n\n### Kaggle DarkSide\n\u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043f\u043e\u0431\u0435\u0434\u043d\u044b\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u043d\u0430 kaggle \u0441\u0435\u0439\u0447\u0430\u0441 \u0438\u0434\u0435\u0442 \u0441\u043e \u0441\u0442\u0435\u043a\u0438\u043d\u0433\u043e\u043c. \u0418 \u044d\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043c\u0438\u043d\u0443\u0441 kaggle, \u0442\u0430\u043a \u043a\u0430\u043a \u0437\u0430\u0432\u0435\u0441\u0442\u0438 \u0442\u0430\u043a\u043e\u0433\u043e \u043c\u043e\u043d\u0441\u0442\u0440\u0430, \u0432 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u0435\u043d, \u043d\u0430 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u043d\u043b\u0430\u0439\u043d \u0441\u0435\u0440\u0432\u0438\u0441, \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0435\u0440\u0435\u0430\u043b\u044c\u043d\u043e (\u044f \u0443\u0436\u0435 \u043c\u043e\u043b\u0447\u0443 \u043f\u0440\u043e \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f). \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0441\u0430\u043c \u0441\u0442\u0435\u043a\u0438\u043d\u0433 \u043e\u0431\u044b\u0447\u043d\u043e \u043d\u0435 \u0438\u0433\u0440\u0430\u0435\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u0443\u044e \u0440\u043e\u043b\u044c, \u043d\u043e \u043e\u043d \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u043e\u043a\u0438\u043d\u0443\u0442\u044c \u0434\u043e\u043b\u0438 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043a\u0440\u0438\u0442\u0438\u0447\u043d\u044b\u043c\u0438.\n\n<img src=\"http:\/\/www.quickmeme.com\/img\/c4\/c4a179d0532ea1e02136d050ec961bd873597f7b70d561693cac4c161d06b26a.jpg\">","185f35f8":"<img src=\"https:\/\/whatcar.vn\/media\/2018\/09\/car-lot-940x470.jpg\"\/>\n\n## \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043f\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c\n*\u042d\u0442\u043e\u0442 \u041d\u043e\u0443\u0442\u0431\u0443\u043a \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u041f\u0440\u0438\u043c\u0435\u0440\u043e\u043c\/\u0428\u0430\u0431\u043b\u043e\u043d\u043e\u043c (Baseline) \u043a \u044d\u0442\u043e\u043c\u0443 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044e \u0438 \u043d\u0435 \u0441\u043b\u0443\u0436\u0438\u0442 \u0433\u043e\u0442\u043e\u0432\u044b\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c!*   \n\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043a\u0430\u043a \u043e\u0441\u043d\u043e\u0432\u0443 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.\n\n\n> **baseline** \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u0430\u043a \u0448\u0430\u0431\u043b\u043e\u043d, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u0430\u043a \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0441 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438 \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u041c\u041b \u043d\u0430\u0447\u0438\u043d\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0439. \u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u0441\u0430\u043c\u043e\u043c\u0443 \u041c\u041b, \u0430 \u043d\u0435 \u0442\u0440\u0430\u0442\u0438\u0442\u044c \u0446\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u0447\u0438\u0441\u0442\u043e \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \n    \u0422\u0430\u043a\u0436\u0435 baseline \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0445\u043e\u0440\u043e\u0448\u0435\u0439 \u043e\u043f\u043e\u0440\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u043e\u0439 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435. \u0415\u0441\u043b\u0438 \u0442\u0432\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0445\u0443\u0436\u0435 baseline - \u0442\u044b \u044f\u0432\u043d\u043e \u0434\u0435\u043b\u0430\u0435\u0448\u044c \u0447\u0442\u043e-\u0442\u043e \u043d\u0435 \u0442\u043e \u0438 \u0441\u0442\u043e\u0438\u0442 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u043e\u0439 \u043f\u0443\u0442\u044c) ","448f8739":"# \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u0438\u0441\u0430\u0442\u044c \u0432\u0435\u0441\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u044d\u0442\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0432\u0435\u043b \u0438\u0445 \u0447\u0435\u0440\u0435\u0437 nunique(). \u0438 \u0442\u0430\u043a \u0441\u043e\u0439\u0434\u0435\u0442)\nX_train.nunique()","164b9c94":"# \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0434\u0438\u0441\u043a\u0438, \u043a\u043b\u0438\u043c\u0430\u0442, \u043a\u043e\u043b-\u0432\u043e \u043c\u0435\u0441\u0442 \u0432 \u043e\u0440\u0434\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0444\u0438\u0447\u0438\n(### - \u044d\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442)\ncols_disks = ['\u0414\u0438\u0441\u043a\u0438 12', '\u0414\u0438\u0441\u043a\u0438 13', '\u0414\u0438\u0441\u043a\u0438 14', '\u0414\u0438\u0441\u043a\u0438 15', '\u0414\u0438\u0441\u043a\u0438 16', '\u0414\u0438\u0441\u043a\u0438 17', '\u0414\u0438\u0441\u043a\u0438 18',\n              '\u0414\u0438\u0441\u043a\u0438 19', '\u0414\u0438\u0441\u043a\u0438 20', '\u0414\u0438\u0441\u043a\u0438 21', '\u0414\u0438\u0441\u043a\u0438 22', '\u0414\u0438\u0441\u043a\u0438 23', '\u0414\u0438\u0441\u043a\u0438 24']\ncols_climat = [ '\u041a\u043b\u0438\u043c\u0430\u0442-\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c 1-\u0437\u043e\u043d\u043d\u044b\u0439', '\u041a\u043b\u0438\u043c\u0430\u0442-\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c 2-\u0437\u043e\u043d\u043d\u044b\u0439']\ntrain['disks'] = 0\ntest['disks'] = 0\nfor col in cols_disks:\n    train['disks'] = train['disks'] + train[col].apply(lambda x: int(col[-2:] if x == 1 else 0))\n    test['disks'] = test['disks'] + test[col].apply(lambda x: int(col[-2:] if x == 1 else 0))\ntrain.drop(cols_disks, axis = 1, inplace = True)\ntest.drop(cols_disks, axis = 1, inplace = True)\n\n\n\ncols_seats = ['\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442: 2', '\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442: 4', '\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442: 5',\n               '\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442: 6', '\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442: 7', '\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442: 9']\ntrain['seats'] = 0\ntest['seats'] = 0\nfor col in cols_seats:\n    train['seats'] = train['seats'] + train[col].apply(lambda x: int(col[-1] if x == 1 else 0))\n    test['seats'] = test['seats'] + test[col].apply(lambda x: int(col[-1] if x == 1 else 0))\ntrain.drop(cols_seats, axis = 1, inplace = True)\ntest.drop(cols_seats, axis = 1, inplace = True)\n\n\n\ncols_climat = [ '\u041a\u043b\u0438\u043c\u0430\u0442-\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c 1-\u0437\u043e\u043d\u043d\u044b\u0439', '\u041a\u043b\u0438\u043c\u0430\u0442-\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c 2-\u0437\u043e\u043d\u043d\u044b\u0439']\ntrain['climat'] = 0\ntest['climat'] = 0\nfor col in cols_climat:\n    train['climat'] = train['climat'] + train[col].apply(lambda x: int(col[16] if x == 1 else 0))\n    test['climat'] = test['climat'] + test[col].apply(lambda x: int(col[16] if x == 1 else 0))\ntrain.drop(cols_climat, axis = 1, inplace = True)\ntest.drop(cols_climat, axis = 1, inplace = True)","c154e993":"## Stacking ","316ee8f9":"# What's next?\n\u0418\u043b\u0438 \u0447\u0442\u043e \u0435\u0449\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c, \u0447\u0442\u043e\u0431 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n\n* \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u043b\u0438 \u043a\u0430\u043a \u0435\u0449\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n* \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n* \u041f\u043e\u0434\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0435\u0449\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n* \u041f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438\n* \u041f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 ML\n* \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0410\u043d\u0441\u0430\u043c\u0431\u043b\u044c \u043c\u043e\u0434\u0435\u043b\u0435\u0439, Blending, Stacking","2cc310e3":"# Data","dcca9934":"X_train.columns","2f271ac6":"\u041f\u043e\u043c\u043d\u0438\u043c, \u0447\u0442\u043e \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f, \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442. \u0412 \u044d\u0442\u043e\u043c \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435 \u043c\u044b \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0441\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u043c\u044b \u0443\u0436\u0435 \u0432\u0441\u0435 \u0441\u043e\u0431\u0440\u0430\u043b\u0438 \u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0438 \u0441\u0432\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0447\u0435\u0440\u0435\u0437 \"Add Data\", \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u0441\u0430\u043c\u043e\u043c\u0443 ML.","fb8306dc":"### Submission"}}