{"cell_type":{"fe1ac93a":"code","928fba67":"code","5074e061":"code","a2a78368":"code","2f411f20":"code","46751e0a":"code","88cc9aa0":"code","0753cab3":"code","f2cc2257":"code","d443f005":"code","20dea443":"code","95b04171":"code","4b3b6e31":"code","d048e4c3":"code","8c1c5820":"code","8d9d84ff":"code","aa59763f":"code","d8de37d5":"code","4223e04a":"code","c0c0942b":"code","0ce9bfc6":"code","fcabea0a":"code","f0b2e145":"code","0952ebf5":"code","81a2abea":"code","e2166a14":"code","466919da":"code","98f21ee1":"code","42475cd5":"code","c0b10242":"markdown","f6f4f5c7":"markdown","b1ba98eb":"markdown","82e9b9d7":"markdown","9ef650e4":"markdown","c5b9f0a5":"markdown","99540a0d":"markdown","be78af68":"markdown","b9671d90":"markdown","8e195cbf":"markdown","890aa66a":"markdown","52d0852e":"markdown","db0567f1":"markdown"},"source":{"fe1ac93a":"# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import mean_squared_error, r2_score","928fba67":"df=pd.read_csv('..\/input\/bostonhoustingmlnd\/housing.csv')","5074e061":"df.head(10).T","a2a78368":"df.info()","2f411f20":"tabcorr = df.corr()  ","46751e0a":"tabcorr","88cc9aa0":"plt.figure(figsize=(12,12))\nsns.heatmap(abs(tabcorr), cmap=\"coolwarm\")","0753cab3":"sns.clustermap(abs(tabcorr), cmap=\"coolwarm\")","f2cc2257":"from scipy.cluster import hierarchy as hc\n\ncorr = 1 - df.corr()\ncorr_condensed = hc.distance.squareform(corr)\nlink = hc.linkage(corr_condensed, method='ward')\nplt.figure(figsize=(12,12))\nden = hc.dendrogram(link, labels=df.columns, orientation='left', leaf_font_size=10)","d443f005":"correlations = tabcorr.MEDV\nprint(correlations)","20dea443":"correlations = correlations.drop(['MEDV'],axis=0)","95b04171":"print(abs(correlations).sort_values(ascending=False))","4b3b6e31":"X = df.drop(['MEDV'], axis=1)\ny = df.MEDV\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)","d048e4c3":"from sklearn.linear_model import LinearRegression\nlm = LinearRegression()\nlm.fit(X_train, y_train)            # apprentissage\ny_pred = lm.predict(X_test)         # pr\u00e9diction sur l'ensemble de test","8c1c5820":"plt.figure(figsize=(12,12))\nplt.scatter(y_test, y_pred)\nplt.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()], color='red', linewidth=3)\nplt.xlabel(\"Prix\")\nplt.ylabel(\"Prediction de prix\")\nplt.title(\"Prix reels vs predictions\")","8d9d84ff":"sns.distplot(y_test-y_pred)","aa59763f":"# On peut calculer l'erreur sur les moindres carr\u00e9s :\nprint(np.sqrt(mean_squared_error(y_test, y_pred)))","d8de37d5":"lm.score(X_test,y_test)","4223e04a":"X = df.drop(['MEDV'], axis=1)\ny = df.MEDV\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)","c0c0942b":"from sklearn import ensemble\nrf = ensemble.RandomForestRegressor()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)\nprint(rf.score(X_test,y_test))","0ce9bfc6":"plt.figure(figsize=(12,12))\nplt.scatter(y_test, y_rf)\nplt.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()], color='red', linewidth=3)\nplt.xlabel(\"Prix\")\nplt.ylabel(\"Prediction de prix\")\nplt.title(\"Prix reels vs predictions\")","fcabea0a":"sns.distplot(y_test-y_rf)","f0b2e145":"print(np.sqrt(mean_squared_error(y_test, y_rf)))","0952ebf5":"rf.score(X_test,y_test)","81a2abea":"import xgboost as XGB\nxgb  = XGB.XGBRegressor()\nxgb.fit(X_train, y_train)\ny_xgb = xgb.predict(X_test)","e2166a14":"plt.figure(figsize=(12,12))\nplt.scatter(y_test, y_xgb)\nplt.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()], color='red', linewidth=3)\nplt.xlabel(\"Prix\")\nplt.ylabel(\"Prediction de prix\")\nplt.title(\"Prix reels vs predictions\")","466919da":"sns.distplot(y_test-y_xgb)","98f21ee1":"print(np.sqrt(mean_squared_error(y_test, y_xgb)))","42475cd5":"print(xgb.score(X_test,y_test))","c0b10242":"Nous pouvons constater un tr\u00e8s nette am\u00e9lioration du score ainsi qu'une erreur sur les moindres carr\u00e9s plus faible","f6f4f5c7":"# Prix des maisons \u00e0 Boston","b1ba98eb":"## Regression par for\u00eats al\u00e9atoires","82e9b9d7":"## XGBoost","9ef650e4":"Pour visualiser l'ensemble du tableau de corr\u00e9lations, on utilise une \"carte de temp\u00e9ratures\" (heatmap) :","c5b9f0a5":"On remarque qu'il ne manque aucune valeur et que toutes les valeurs sont sous forme de flottant","99540a0d":"Dendrogramme des relations entre les caract\u00e9ristiques","be78af68":"## Recherche de corr\u00e9lations","b9671d90":"Le score \u00e9tant assez faible, nous allons tenter de l'am\u00e9liorer en utilisant RandomForest","8e195cbf":"## R\u00e9gression lin\u00e9aire multiple","890aa66a":"On peut remarque une bonne corr\u00e9lation entre le prix des maison et les colonnes LSTAT ainsi que RM","52d0852e":"On peut aussi regrouper les param\u00e8tres par clusters class\u00e9s par proximit\u00e9 :","db0567f1":"Les r\u00e9sultats sont l\u00e9g\u00e8rement inf\u00e9rieur \u00e0 RandomForest mais restent bien sup\u00e9rieur \u00e0 la r\u00e9gression lin\u00e9aire multiple"}}