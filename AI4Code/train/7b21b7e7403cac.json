{"cell_type":{"d3702444":"code","de705ea4":"code","90bf813b":"code","4d6a2682":"code","e6b6d016":"code","c392f1a0":"code","c2afd1d7":"code","99a7ada7":"code","60e9ffab":"code","8e205c45":"code","251d377e":"code","e4849773":"code","eb0bc90b":"code","18d43349":"code","cbe29946":"code","d368cbb3":"code","65891224":"code","6a7a2038":"code","bb1658b7":"code","043ed89e":"code","49f92c26":"code","015fe5f9":"code","979fa163":"code","06508c83":"code","2deb674a":"code","c1d0b1c1":"code","034d1bd6":"code","6efd9e5c":"code","e32db0c7":"code","a95f45ea":"code","a6b4fcdd":"code","1584beec":"code","c99633ca":"code","adde281a":"code","05075f70":"code","7f7ff6bb":"code","13d252ea":"code","db5ef845":"code","8bd6bea4":"code","334743b5":"markdown","5b0ae9fe":"markdown","2761e594":"markdown","2af17a46":"markdown","6d3413cd":"markdown","04f29ed9":"markdown"},"source":{"d3702444":"import os\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.image import imread\n\n# Technically not necessary in newest versions of jupyter\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split","de705ea4":"os.chdir('..\/input\/digit-recognizer\/')","90bf813b":"!ls","4d6a2682":"train = pd.read_csv('train.csv')\ntest =pd.read_csv('test.csv')","e6b6d016":"train.head()","c392f1a0":"test.head()","c2afd1d7":"# put labels into y_train variable\nY_train = train[\"label\"]\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1) \n ","99a7ada7":"# plot some samples\nimg = X_train.iloc[0].as_matrix()\nimg = img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(train.iloc[0,0])\nplt.axis(\"off\")\nplt.show()","60e9ffab":"len(X_train) ","8e205c45":"# Normalize the data\nX_train = X_train \/ 255.0\ntest = test \/ 255.0\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","251d377e":"#reshaping the data\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","e4849773":"# We need to translate this to be \"one hot encoded\" so our CNN can understand, otherwise it will think this is some sort of regression problem on a continuous axis.\nfrom tensorflow.keras.utils import to_categorical\nY_train = to_categorical(Y_train, num_classes = 10)\n","eb0bc90b":"Y_train[0]","18d43349":"from sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=42)\n","cbe29946":"X_train[1]","d368cbb3":"Y_train[1]","65891224":"plt.imshow(X_train[1][:,:,0],cmap='gray')","6a7a2038":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Activation, Dropout, Flatten, Dense, Conv2D, MaxPool2D\nfrom tensorflow.keras.callbacks import EarlyStopping\n\n","bb1658b7":"model = Sequential()\n\n# CONVOLUTIONAL LAYER\nmodel.add(Conv2D(filters=16, kernel_size=(4,4),input_shape=(28, 28, 1), activation='relu',))\n# POOLING LAYER\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(filters=32, kernel_size=(4,4),input_shape=(28, 28, 1), activation='relu',))\n# POOLING LAYER\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\n\n\nmodel.add(Flatten())\n\n\nmodel.add(Dense(128, activation='relu'))\n\n# LAST LAYER IS THE CLASSIFIER, THUS 10 POSSIBLE CLASSES\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy']) ","043ed89e":"model.summary()","49f92c26":"early_stop = EarlyStopping(monitor='val_loss',patience=2)","015fe5f9":"epochs = 10  # for better result increase the epochs\nbatch_size = 128\n\nmodel.fit(X_train,Y_train,epochs=10,validation_data=(X_val,Y_val),callbacks=[early_stop],batch_size = batch_size, steps_per_epoch=X_train.shape[0] \/\/ batch_size)","979fa163":"losses = pd.DataFrame(model.history.history)","06508c83":"losses.head()","2deb674a":"losses[['accuracy','val_accuracy']].plot()","c1d0b1c1":"losses[['loss','val_loss']].plot()","034d1bd6":"from sklearn.metrics import classification_report,confusion_matrix","6efd9e5c":"Y_pred = np.argmax((model.predict(X_val)),axis=1)","e32db0c7":"Y_pred","a95f45ea":"true_Y = np.argmax(Y_val,axis=1)","a6b4fcdd":"true_Y","1584beec":"print(classification_report(Y_pred,true_Y))","c99633ca":"plt.figure(figsize=(10,6))\nsns.heatmap(confusion_matrix(Y_pred,true_Y),annot=True)","adde281a":"# predict on test data\ntest_pred = model.predict(test)\n\nresults = np.argmax(test_pred,axis = 1)\n\nmy_pred = pd.Series(results,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),my_pred],axis = 1)\n\n","05075f70":"submission","7f7ff6bb":"!cd -","13d252ea":"os.chdir('\/kaggle\/')","db5ef845":"cd working","8bd6bea4":"submission.to_csv(\"ravirajsinh45.csv\", index=False ,header=True)","334743b5":"# Evaluate the Model","5b0ae9fe":"# Creating the Model\n","2761e594":"# Trian and validation split","2af17a46":"# Training of model","6d3413cd":"# Data preparation","04f29ed9":"# submission"}}