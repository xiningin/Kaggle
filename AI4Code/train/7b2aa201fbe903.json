{"cell_type":{"a42b9d94":"code","c36b0d59":"code","4fc04bf3":"code","7bbaa56b":"code","42f17e14":"code","e5f0c42e":"code","b8ca15cf":"code","b7e1f0fd":"code","23b45879":"code","b20021c9":"code","68df7713":"code","30d35628":"code","d3e150b4":"code","5d9d44d6":"code","4a6547fd":"markdown","0240f342":"markdown","50bdfedb":"markdown","566c0eff":"markdown","50388399":"markdown","b1f58603":"markdown","20ff5cd2":"markdown","4fe9eeec":"markdown","adfb0c12":"markdown","bd84055a":"markdown","32fa2e06":"markdown","3adce5e5":"markdown","3def356e":"markdown","3a77d81d":"markdown","ee30626c":"markdown","6c17f757":"markdown"},"source":{"a42b9d94":"conda install -c conda-forge -c oce -c dlr-sc -c ifcopenshell ifcopenshell","c36b0d59":"import pandas as pd\nimport ifcopenshell\nimport random","4fc04bf3":"data = pd.read_csv(\"\/kaggle\/input\/example-ifc-file\/ifc_parsed_data.csv\")\ndata.head()","7bbaa56b":"random.uniform(500, 5000)","42f17e14":"# A random number\nnumber = random.uniform(500, 5000)\n# Let's round it to 2 decimal\nrounded_number = round(number, 2)\nrounded_number","e5f0c42e":"def create_random_number(min, max):\n    return round(random.uniform(min, max), 2)","b8ca15cf":"# First, we get the numbers from 1 to 10. This can be done with \"range\" (last number is excluded and by default starts in 0)\nmy_numbers = range(11)\n# And now we create the list with list comprehension\n[2*number for number in my_numbers]","b7e1f0fd":"# First, we get the length of our dataset\nlast_number = len(data)\n# Now we create the list to iterate over\nmy_numbers = range(last_number)\n# And finally, we create the colum in pour dataset\ndata[\"price\"] = [create_random_number(500, 5000) for i in my_numbers]\n\ndata.head()","23b45879":"data.groupby(\"element_type\").count()","b20021c9":"data.groupby(\"element_type\")[\"element_id\"].count()","68df7713":"data.groupby(\"element_type\")[\"price\"].mean()","30d35628":"# First, we group and obtain the mean\nmean_price_serie = data.groupby(\"element_type\")[\"price\"].mean()\n# Then, we convert it into a dataframe\nmean_price = pd.DataFrame(mean_price_serie)\n# And we reset the index\nmean_price.reset_index(inplace=True)\n# We rename the column\nmean_price.rename(columns={\"price\":\"mean_price\"}, inplace=True)\n# Check it out\nmean_price","d3e150b4":"data1 = pd.merge(data, mean_price, how=\"left\", on=\"element_type\")\ndata1.head()","5d9d44d6":"# Get the unique values\nunique_element_type = data1.element_type.unique()\nunique_bdg_name = data1.bdg_name.unique()\n# Print it\nprint(f\"Unique element types: {unique_element_type}\\n\\nUnique building names: {unique_bdg_name}\")","4a6547fd":"This can be done with any function we want (insted of using `2*number`). In our case, we want to create a random number with the function `create_random_number` for each row of our dataset:","0240f342":"# Load packages\nFirst we are going to install the `ifcopenshell` package. IfcOpenShell is an open source software library that helps users and software developers to work with the IFC file format. The IFC file format can be used to describe building and construction data. The format is commonly used for Building Information Modelling (BIM).\n\nRun the following code to install the package in the curren environment:","50bdfedb":"# Requirements\nBasic knowledge of Python and Pandas is needed to follow this notebook. Check the subjects listed in these courses:\n\n- [Python course](https:\/\/www.kaggle.com\/learn\/python)\n- [Pandas course](https:\/\/www.kaggle.com\/learn\/pandas)\n- Check out [this](https:\/\/www.kaggle.com\/ponybiam\/introduction-to-ifcopenshell-functions) and [this](https:\/\/www.kaggle.com\/ponybiam\/ifc-parsing-example) notebooks to get familiar with the package `ifcopenshell`.","566c0eff":"An now we have to add the column to our dataset. We need to create a random value for each row in our dataset; a very usefull Python feature can accomplish this task easily: [list comprehensions](https:\/\/www.kaggle.com\/colinmorris\/loops-and-list-comprehensions). For example, let's create a list with the double of each number from 0 to 10:","50388399":"And now is time to merge. We will need:\n\n- Two dataframes\n- A common column, present in both dataframe, to merge over\n- How to join\n\nHere is illustrated how two datasets can be joined ([image source](https:\/\/data36.com\/pandas-tutorial-3-important-data-formatting-methods-merge-sort-reset_index-fillna\/)):\n![joining](https:\/\/data36.com\/wp-content\/uploads\/2018\/08\/4-pandas-merge-inner-outer-left-right-768x579.png)\n\nWe want to add the `mean_price` column to our dataset: this could be accomplished with a left join of `mean_price` dataframe on `data` dataframe.","b1f58603":"And we get a pandas series in return. Let's calculate the mean price:","20ff5cd2":"And now we import the packages we are going to use in this notebook:","4fe9eeec":"## Unique values\nWhen you group by a column, you get as index the unique values of that column. But, what if only need the unique values? We don't need to group the data in order to get it, we can use the method `unique`, that can  be applied to any serie. For example, let's fin the unique values of the columns `element_type` and `bdg_name`:","adfb0c12":"Here, as we didn't specified which column we want to count, you get the count for each one of the columns in our dataset (and we get a pandas dataframe in return). Let's try out choosing only one:","bd84055a":"Try running it several times: you will obtain a different value each time. We don't need so many decimals for our dataset, we can use the `round` function to get only 2:","32fa2e06":"We can create a simple function that gets through both steps:","3adce5e5":"# Load dataset\nWe are going to use the parsed IFC files we obtained in our [previous notebook](https:\/\/www.kaggle.com\/ponybiam\/ifc-parsing-example). We exported the file as `ifc_parsed_data.csv`:","3def356e":"## Grouping\nNow that we have the price of each element, how can we get the **mean price of each element type**? We can use the method `groupby`; keep this method always in mind cause you are going to use it a lot.\n\nYou need two things to group your data:\n- column (or columns) to group by (of course)\n- an aggregation function\n\nLet's start by counting how many elements if each `element_type` we have in our dataset:","3a77d81d":"Now we are going to add some fake data; the only purpose of this is to have a continuous variable to play around with some Pandas functions. Imagine we have a column name `price` with the cost of each element. We are going to create this column with a random value between 500 and 5000 (this, for sure, won't be realistic!) with the function `uniform` from the package `random` ([documentation here](https:\/\/docs.python.org\/3\/library\/random.html#random.uniform)). Let's try it out:","ee30626c":"## Merging\nImagine we want to add the mean price to our dataset. We shoul add to each row the corresponden mean price (depending on the element type). Forthis purpose we can create a dataset with the mean prices and merge it with our original dataset. This is called *merging* or *joining*; I strongly suggest [checking out the documentatio](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.merge.html), this is another of the methods you will me using a lot.\n\nFirst we create a dataset with our mean prices:","6c17f757":"# Dataset exploration\n- [Grouping](#Grouping)\n- [Merging](#Merging)\n- [Unique values](#Unique-values)\n- count values by building \n- sorting by price\n- fill nan in description using map\n- new_id concating strings"}}