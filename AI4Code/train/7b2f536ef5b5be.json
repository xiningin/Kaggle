{"cell_type":{"9692e1d9":"code","cf099758":"code","f497985b":"code","07366ead":"code","94078ad8":"code","5a78b238":"markdown","570b4358":"markdown","cf22de88":"markdown","fdad93f4":"markdown"},"source":{"9692e1d9":"from __future__ import print_function, division\n\nfrom keras.datasets import mnist\nfrom keras.layers import Input, Dense, Reshape, Flatten, Dropout\nfrom keras.layers import BatchNormalization, Activation, ZeroPadding2D\nfrom keras.layers.advanced_activations import LeakyReLU\nfrom keras.layers.convolutional import UpSampling2D, Conv2D\nfrom keras.models import Sequential, Model\nfrom keras.optimizers import Adam\n\nimport matplotlib.pyplot as plt\n\nimport sys\n\nimport numpy as np\n\nimport os\n\nfrom PIL import Image, ImageSequence\n\nfrom matplotlib.pyplot import imshow","cf099758":"os.listdir('..\/input\/')","f497985b":"def load_data():\n        data = []\n        paths = []\n        for r, d, f in os.walk(r'..\/input\/anime-faces\/data\/data'):\n            for file in f:\n                if '.png' in file:\n                    paths.append(os.path.join(r, file))\n\n        for path in paths:\n            img = Image.open(path)\n            x = np.array(img)\n            x = x[...,:3]\n            if(x.shape == (64,64,3)):\n                data.append(x)\n\n        x_train = np.array(data)\n        x_train = x_train.reshape(len(data),64,64,3)\n        return x_train","07366ead":"class DCGAN():\n    def __init__(self):\n        # Input shape\n        self.img_rows = 64\n        self.img_cols = 64\n        self.channels = 3\n        self.img_shape = (self.img_rows, self.img_cols, self.channels)\n        self.latent_dim = 50\n\n        optimizer = Adam(0.0002, 0.5)\n\n        # Build and compile the discriminator\n        self.discriminator = self.build_discriminator()\n        self.discriminator.compile(loss='binary_crossentropy',\n            optimizer=optimizer,\n            metrics=['accuracy'])\n\n        # Build the generator\n        self.generator = self.build_generator()\n        generator = self.generator\n\n        # The generator takes noise as input and generates imgs\n        z = Input(shape=(self.latent_dim,))\n        img = self.generator(z)\n\n        # For the combined model we will only train the generator\n        self.discriminator.trainable = False\n\n        # The discriminator takes generated images as input and determines validity\n        valid = self.discriminator(img)\n\n        # The combined model  (stacked generator and discriminator)\n        # Trains the generator to fool the discriminator\n        self.combined = Model(z, valid)\n        self.combined.compile(loss='binary_crossentropy', optimizer=optimizer)\n\n    def build_generator(self):\n\n        model = Sequential()\n        model.add(Dense(64 * 4 * 4, activation=\"relu\", input_dim=self.latent_dim))\n        model.add(Reshape((4, 4, 64)))\n        model.add(UpSampling2D())\n        model.add(Conv2D(64, kernel_size=3, padding=\"same\"))\n        model.add(BatchNormalization(momentum=0.8))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(UpSampling2D())\n        model.add(Conv2D(64, kernel_size=3, padding=\"same\"))\n        model.add(BatchNormalization(momentum=0.8))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(UpSampling2D())\n        model.add(Conv2D(64, kernel_size=3, padding=\"same\"))\n        model.add(BatchNormalization(momentum=0.8))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(UpSampling2D())\n        model.add(Conv2D(64, kernel_size=3, padding=\"same\"))\n        model.add(BatchNormalization(momentum=0.8))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Conv2D(64, kernel_size=(3,3), padding=\"same\"))\n        model.add(BatchNormalization(momentum=0.8))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Conv2D(3, kernel_size=(2,2), padding=\"same\"))\n        model.add(LeakyReLU(alpha=0.2))\n        model.summary()\n\n        noise = Input(shape=(self.latent_dim,))\n        img = model(noise)\n\n        return Model(noise, img)\n\n    def build_discriminator(self):\n\n        model = Sequential()\n\n        model.add(Conv2D(32, kernel_size=3, strides=2, input_shape=self.img_shape, padding=\"same\"))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Dropout(0.25))\n        model.add(Conv2D(64, kernel_size=3, strides=2, padding=\"same\"))\n        model.add(BatchNormalization(momentum=0.8))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Dropout(0.25))\n        model.add(Conv2D(128, kernel_size=3, strides=2, padding=\"same\"))\n        model.add(BatchNormalization(momentum=0.8))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Dropout(0.25))\n        model.add(Conv2D(256, kernel_size=3, strides=1, padding=\"same\"))\n        model.add(BatchNormalization(momentum=0.8))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Dropout(0.25))\n        model.add(Flatten())\n        model.add(Dense(1, activation='sigmoid'))\n\n        model.summary()\n\n        img = Input(shape=self.img_shape)\n        validity = model(img)\n\n        return Model(img, validity)\n    \n\n    def train(self, epochs, batch_size=128, save_interval=50):\n\n        # Load the dataset\n        X_train = load_data()\n\n        #normalize pixel values\n        X_train = X_train \/ 256\n\n        # Adversarial ground truths\n        valid = np.ones((batch_size, 1))\n        fake = np.zeros((batch_size, 1))\n\n        for epoch in range(epochs):\n\n            # ---------------------\n            #  Train Discriminator\n            # ---------------------\n\n            # Select a random half of images\n            idx = np.random.randint(0, X_train.shape[0], batch_size)\n            imgs = X_train[idx]\n\n            # Sample noise and generate a batch of new images\n            noise = np.random.normal(0, 1, (batch_size, self.latent_dim))\n            gen_imgs = self.generator.predict(noise)\n\n            # Train the discriminator (real classified as ones and generated as zeros)\n            d_loss_real = self.discriminator.train_on_batch(imgs, valid)\n            d_loss_fake = self.discriminator.train_on_batch(gen_imgs, fake)\n            d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)\n\n            # ---------------------\n            #  Train Generator\n            # ---------------------\n\n            # Train the generator (wants discriminator to mistake images as real)\n            g_loss = self.combined.train_on_batch(noise, valid)\n\n            # Plot the progress\n            print (\"%d [D loss: %f, acc.: %.2f%%] [G loss: %f]\" % (epoch, d_loss[0], 100*d_loss[1], g_loss))","94078ad8":"dcgan = DCGAN()\n#dcgan.train(epochs=15000, batch_size=60, save_interval=100)","5a78b238":"# Generating Anime Faces with Deep Convolutional Generative Adversarial Networks With Keras\nThis is the code for training a DCGAN to generate anime faces. Although I didn't train the model on here, I trained it locally. There is a link to a Jupyter Notebook with the loss values at the bottom of the page. The results of the model are shown there as well","570b4358":"# Sampling Through Latent Space of Generator\n![sample1](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/perfectloop1.gif)\n![sample2](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/perfectloop2.gif)\n![sample3](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/perfectloop3.gif)\n![sample4](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/perfectloop4.gif)\n# Generator Model\n![gen](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/generator.JPG)\n\n# Discriminator Model\n![disc](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/discriminator.JPG)\n\n# Training\n![training](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/training.gif)\n\n# Results\n![pic](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/image_101037.png)\n![pic](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/image_108400.png)\n![pic](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/image_136257.png)\n![pic](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/image_140609.png)\n![pic](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/image_147776.png)\n![pic](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/image_162085.png)\n![pic](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/image_201763.png)\n![pic](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/image_205310.png)\n![pic](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/image_207384.png)\n![pic](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/image_242376.png)\n![pic](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/image_24908.png)\n![pic](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/image_34030.png)\n![pic](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/image_54458.png)\n![pic](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/image_66887.png)\n![pic](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/image_80884.png)\n![pic](https:\/\/raw.githubusercontent.com\/vee-upatising\/Anime-DCGAN\/master\/results\/image_9288.png)\n\n\n\n# [View Notebook](https:\/\/nbviewer.jupyter.org\/github\/vee-upatising\/Anime-DCGAN\/blob\/master\/Anime%20DCGAN.ipynb)","cf22de88":"Trained for 15000 epochs locally. Results shown below","fdad93f4":"Adding every image into an array and getting rid of that pesky 4th alpha channel that pngs have"}}