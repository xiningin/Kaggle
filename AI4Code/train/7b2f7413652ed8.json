{"cell_type":{"02db4e31":"code","d59f3d33":"code","07703997":"code","4ea7e490":"code","1b45d34d":"code","f82baa47":"code","87616bdb":"code","a70ae451":"code","41a302b1":"code","cb9bf216":"code","c4fde52a":"code","762d0f5a":"code","8bccaee6":"code","00b8817f":"code","cee1729a":"code","cb7de109":"code","78316dbb":"code","801a93e8":"code","53272842":"code","2cc98cf3":"code","555e3bc9":"code","71d7247d":"code","07f01a02":"code","d8312729":"code","1aa3d54b":"code","86986710":"code","07e30f2c":"code","9ed931f8":"code","7158b12f":"code","eb27e3f9":"code","8ff136be":"code","1d0e0c38":"code","bd3a5fab":"code","20b9b139":"code","53257759":"code","4ae6fff6":"code","c6cf1674":"code","c3e9b93d":"code","4b9a5d0f":"code","b608c14d":"code","b6f5c039":"code","5b5fe856":"code","97fc93eb":"code","0a3edac7":"code","1428404d":"code","512d4bc9":"code","8518d079":"code","4b7d9303":"code","c46580f0":"code","cc6a5d3d":"code","fa0fa9df":"code","73ed14c6":"code","f1c87609":"code","7368fa59":"code","453b55da":"code","b8bf996d":"code","3c11b04e":"code","398c33dc":"code","ddc6805c":"code","df00fe57":"code","8e8f6714":"code","f549e303":"code","2c17ee03":"code","08b1d7aa":"code","cffab084":"code","2183a873":"code","c9c1731c":"markdown","3ffd44a4":"markdown","44b984b6":"markdown","78b55dce":"markdown","6e556c6d":"markdown","cb5b6f30":"markdown","b2f65feb":"markdown","3d00bc03":"markdown","81cb2e84":"markdown","7afff83d":"markdown","4ef86c1f":"markdown","fd1606f5":"markdown","d4ed92f8":"markdown","5c84b269":"markdown","5812401f":"markdown","ee7d47fa":"markdown","5735f81f":"markdown","c3032a2d":"markdown","a74bfff5":"markdown","8aee0a45":"markdown","f67cfb0c":"markdown","b4e9a362":"markdown","b58a6ce6":"markdown","8e90e459":"markdown","27afd3c0":"markdown","2b24e2e8":"markdown","51314dec":"markdown","dbdb77c3":"markdown","961a42e1":"markdown","1c7cd5bf":"markdown","d232c5bf":"markdown","889f4c81":"markdown","5122ad80":"markdown","19348562":"markdown","aac41a8f":"markdown","cd272b87":"markdown","b5fe594a":"markdown","f6a5be24":"markdown","eba93ca0":"markdown"},"source":{"02db4e31":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d59f3d33":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom plotly.offline import iplot\nfrom plotly import tools\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.offline as py\nimport plotly.figure_factory as ff\npy.init_notebook_mode(connected=True)\n%matplotlib inline \nimport matplotlib.patches as mpatches\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nplt.show()\npd.set_option('display.max_rows', 5000)\npd.set_option('display.max_columns', 500)","07703997":"\ntrain_data = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/train.csv\")\nprint(\"Train Data Size \", train_data.shape)\nspecs_data = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/specs.csv\")\nprint(\"Specs Data size \",specs_data.shape)\ntrain_labels = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train_labels.csv')\nprint(\"Train Lables size \",train_labels.shape)\ntest_data = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/test.csv')\nprint(\"Test size \",test_data.shape)\nsample_submission = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv')\nprint(\"Sample_submission  size \",sample_submission.shape)","4ea7e490":"# Features\nprint(\"\\nTrain_Data columns \",train_data.columns)\nprint(\"\\nSpecs_Data columns \",specs_data.columns)\nprint(\"\\nTrain_Labels columns \",train_labels.columns)\nprint(\"\\nTest_Data columns \",test_data.columns)\nprint(\"\\nSample_submission columns \",sample_submission.columns)","1b45d34d":"# explore about Target feature : Accuracy_group\nacc_grp = train_labels.groupby(['accuracy_group'])['game_session'].count().reset_index()\ndisplay(acc_grp)\nfig = go.Figure(data = [go.Pie(labels = acc_grp.accuracy_group,values = acc_grp.game_session)])\nfig.show()","f82baa47":"title_grp = train_labels.groupby(['title'])['game_session'].count().reset_index()\ndisplay(title_grp)\nfig = go.Figure(data = [go.Pie(labels = title_grp.title,values = title_grp.game_session)])\nfig.show()","87616bdb":"game_grp = train_labels.groupby(['title','accuracy_group'])['installation_id'].count().reset_index()\ndisplay(game_grp)","a70ae451":"# Plotting with Sunburst Chart\n# I manually created this list from the above table data.\nfig =go.Figure(go.Sunburst(\n    ids = ['Bird Measurer (Assessment)',\"BM0\",\"BM1\",\"BM2\",\"BM3\",'Cart Balancer (Assessment)',\"CB0\",\"CB1\",\"CB2\",\"CB3\",'Cauldron Filler (Assessment)',\"CF0\",\"CF1\",\"CF2\",\"CF3\",'Chest Sorter (Assessment)',\"CS0\",\"CS1\",\"CS2\",\"CS3\",'Mushroom Sorter (Assessment)', \"MS0\", \"MS1\", \"MS2\", \"MS3\"],\n    labels=['Bird Measurer ',\"0\",\"1\",\"2\",\"3\",'Cart Balancer ',\"0\",\"1\",\"2\",\"3\",'Cauldron Filler ',\"0\",\"1\",\"2\",\"3\", 'Chest Sorter ',\"0\",\"1\",\"2\",\"3\", 'Mushroom Sorter ', \"0\", \"1\", \"2\", \"3\"],\n    parents=[\"\", \"Bird Measurer (Assessment)\", 'Bird Measurer (Assessment)', 'Bird Measurer (Assessment)', 'Bird Measurer (Assessment)',\"\", 'Cart Balancer (Assessment)', 'Cart Balancer (Assessment)', 'Cart Balancer (Assessment)', 'Cart Balancer (Assessment)',\"\", 'Cauldron Filler (Assessment)', 'Cauldron Filler (Assessment)', 'Cauldron Filler (Assessment)', 'Cauldron Filler (Assessment)',\"\", 'Chest Sorter (Assessment)', 'Chest Sorter (Assessment)', 'Chest Sorter (Assessment)', 'Chest Sorter (Assessment)', \"\",'Mushroom Sorter (Assessment)', 'Mushroom Sorter (Assessment)', 'Mushroom Sorter (Assessment)', 'Mushroom Sorter (Assessment)'],\n    values=[2746,886, 778, 389, 693, 4151,576, 353, 470, 2752, 4055,421, 459, 630, 2545, 2981,1752, 466, 256, 507, 3757, 594, 355, 460, 2348],\n    branchvalues=\"total\",\n))\nfig.update_layout(margin = dict(t=0, l=0, r=0, b=0))\nfig.show()","41a302b1":"# Explore the Train_data with Quntitative and Qualitative variables\nprint(\"Qualitative\/Categorical Columns:\")\ncate_cols = train_data.select_dtypes(include=['object']).columns\nprint(cate_cols)\nprint(\"\\nQuntitative\/Numerical Columns:\")\nnum_cols  = train_data.select_dtypes(exclude = ['object']).columns\nprint(num_cols)","cb9bf216":"# Explore Numercial Variables\ntrain_data.groupby('game_session')['event_count'].count()\ngame = train_data[train_data['game_session']=='fffe9cd0cc5b076b']\ngame.shape","c4fde52a":"game.head(2)","762d0f5a":"print(\"Unique installation ids:\")\nprint(train_data.installation_id.nunique())\nprint(train_labels.installation_id.nunique())\nprint(\"\\nUnique Game Sessions:\")\nprint(train_data.game_session.nunique())\nprint(train_labels.game_session.nunique())\nprint(\"\\nUnique Titles:\")\nprint(train_data.title.nunique())\nprint(train_labels.title.nunique())","8bccaee6":"#Merging the Traindata and labels\nmerge_data = pd.merge(train_data, train_labels, on = ['installation_id','game_session','title'])\nprint(merge_data.shape)","00b8817f":"merge_data.head(2)","cee1729a":"event_count = train_data['title'].value_counts().reset_index()\nevent_count['index'] = event_count['index'].astype('category')\n#print(event_count)\n#fig = go.Figure([go.Bar(x=list(event_count['index']), y=list(event_count['title']))])\nfig = px.bar(event_count[0:10], x='index', y='title',\n             hover_data=['title'], color='index',\n             labels={'title':'Event Count'}, height=400)\nfig.show()","cb7de109":"event_count = test_data['title'].value_counts().reset_index()\nevent_count['index'] = event_count['index'].astype('category')\n#print(event_count)\n#fig = go.Figure([go.Bar(x=list(event_count['index']), y=list(event_count['title']))])\nfig = px.bar(event_count[0:10], x='index', y='title',\n             hover_data=['title'], color='index',\n             labels={'title':'Event Count'}, height=400)\nfig.show()","78316dbb":"fig = px.bar(event_count[-10:], x='index', y='title',\n             hover_data=['title'], color='index',\n             labels={'title':'Event Count'}, height=400)\nfig.show()","801a93e8":"type_count = train_data['type'].value_counts().reset_index()\ntotal = len(train_data)\ntype_count['percent'] = round((type_count['type']\/total)*100,2)\nprint(type_count)\n\nfig = px.bar(type_count, x='index', y='type',\n             hover_data=['index','percent'], color='type',\n             labels={'type':'Type Count'}, height=400)\nfig.show()","53272842":"type_count = test_data['type'].value_counts().reset_index()\ntotal = len(test_data)\ntype_count['percent'] = round((type_count['type']\/total)*100,2)\nprint(type_count)\n\nfig = px.bar(type_count, x='index', y='type',\n             hover_data=['index','percent'], color='type',\n             labels={'type':'Type Count'}, height=400)\nfig.show()","2cc98cf3":"type_count = train_data['world'].value_counts().reset_index()\ntotal = len(train_data)\ntype_count['percent'] = round((type_count['world']\/total)*100,2)\nprint(type_count)\n\nfig = px.bar(type_count, x='index', y='world',\n             hover_data=['index','percent'], color='world',\n             labels={'world':'World Count'}, height=400)\nfig.show()","555e3bc9":"type_count = test_data['world'].value_counts().reset_index()\ntotal = len(test_data)\ntype_count['percent'] = round((type_count['world']\/total)*100,2)\nprint(type_count)\n\nfig = px.bar(type_count, x='index', y='world',\n             hover_data=['index','percent'], color='world',\n             labels={'world':'World Count'}, height=400)\nfig.show()","71d7247d":"train_data['timestamp'] = pd.to_datetime(train_data['timestamp'])\ntrain_data['date'] = train_data['timestamp'].dt.date\ntrain_data['month'] = train_data['timestamp'].dt.month\ntrain_data['hour'] = train_data['timestamp'].dt.hour\ntrain_data['year'] = train_data['timestamp'].dt.year\ntrain_data['dayofweek'] = train_data['timestamp'].dt.dayofweek\ntrain_data['weekofyear'] = train_data['timestamp'].dt.weekofyear\ntrain_data['dayofyear'] = train_data['timestamp'].dt.dayofyear\ntrain_data['quarter'] = train_data['timestamp'].dt.quarter\ntrain_data['is_month_start'] = train_data['timestamp'].dt.is_month_start","07f01a02":"print(train_data['year'].unique())\nprint(train_data['month'].unique())\nprint(train_data['date'].nunique())","d8312729":"month_count = train_data.groupby(['month'])['installation_id'].count().reset_index()\ntotal = len(train_data)\nmonth_count['percent'] = round((month_count['installation_id']\/total)*100,2)\nfig = px.bar(month_count, x='month', y='installation_id',\n             hover_data=['month','percent'], color='installation_id',\n             labels={'installation_id':'Installation Count'}, height=400)\nfig.show()","1aa3d54b":"date_count = train_data.groupby(['date'])['installation_id'].count().reset_index()\nfig = go.Figure(data=go.Scatter(x=date_count['date'], y=date_count['installation_id']))\nfig.show()","86986710":"hour_count = train_data.groupby(['hour'])['installation_id'].count().reset_index()\nfig = go.Figure(data=go.Scatter(x=hour_count['hour'], y=hour_count['installation_id']))\nfig.show()","07e30f2c":"week_count = train_data.groupby(['weekofyear'])['installation_id'].count().reset_index()\nfig = go.Figure(data=go.Scatter(x=week_count['weekofyear'], y=week_count['installation_id']))\nfig.show()","9ed931f8":"week_type_count = train_data.groupby(['weekofyear','type'])['installation_id'].count().reset_index()\n#print(week_type_count)\nfig = px.line(week_type_count, x=\"weekofyear\", y=\"installation_id\", color='type')\nfig.show()","7158b12f":"date_type_count = train_data.groupby(['date','type'])['installation_id'].count().reset_index()\nfig = px.line(date_type_count, x=\"date\", y=\"installation_id\", color='type')\nfig.show()","eb27e3f9":"merge_data['timestamp'] = pd.to_datetime(merge_data['timestamp'])\nmerge_data['date'] = merge_data['timestamp'].dt.date\nmerge_data['month'] = merge_data['timestamp'].dt.month\nmerge_data['hour'] = merge_data['timestamp'].dt.hour\nmerge_data['year'] = merge_data['timestamp'].dt.year\nmerge_data['dayofweek'] = merge_data['timestamp'].dt.dayofweek\nmerge_data['weekofyear'] = merge_data['timestamp'].dt.weekofyear\nmerge_data['dayofyear'] = merge_data['timestamp'].dt.dayofyear\nmerge_data['quarter'] = merge_data['timestamp'].dt.quarter\nmerge_data['is_month_start'] = merge_data['timestamp'].dt.is_month_start","8ff136be":"date_title_count = merge_data.groupby(['dayofweek','title'])['game_session'].count().reset_index()\nfig = px.line(date_title_count, x=\"dayofweek\", y=\"game_session\", color='title')\nfig.show()","1d0e0c38":"date_title_count = merge_data.groupby(['hour','title'])['game_session'].count().reset_index()\nfig = px.line(date_title_count, x=\"hour\", y=\"game_session\", color='title')\nfig.show()","bd3a5fab":"date_title_count = merge_data.groupby(['title'])['game_time'].count().reset_index()\nprint(date_title_count)\nfig = px.line(date_title_count, x=\"title\", y=\"game_time\")\nfig.show()","20b9b139":"date_title_count = test_data.groupby(['title'])['game_time'].count().reset_index()\ndate_title_count.sort_values(by=['game_time'], inplace = True, ascending = True)\nprint(date_title_count)\nfig = px.line(date_title_count, x=\"title\", y=\"game_time\")\nfig.show()","53257759":"merge_data.dtypes","4ae6fff6":"merge_data['event_code'] = merge_data['event_code'].astype('category')\nevent_count = merge_data.groupby(['event_code'])['event_count'].count().reset_index()\nevent_count.sort_values(by = ['event_count'], inplace = True)\nprint(event_count)\n\nplt.figure(figsize=(20,10))\nax = sns.barplot(x='event_code', y='event_count', data=event_count)\nax","c6cf1674":"data = train_data[train_data['event_code']==4030]\ndata.shape\nprint(data['title'].value_counts())\nprint(data['type'].value_counts())\nprint(data['world'].value_counts())","c3e9b93d":"game= train_data.groupby(['world'])['game_time'].max().reset_index()\ngame.sort_values(by = ['game_time'], inplace = True, ascending=False)\nfig = px.bar(game, x='world', y='game_time',\n             hover_data=['world'], color='game_time',\n             labels={'game_time':'Game Time'}, height=400)\nfig.show()","4b9a5d0f":"game= train_data.groupby(['title'])['game_time'].max().reset_index()\ngame.sort_values(by = ['game_time'], inplace = True, ascending=False)\nfig = px.bar(game[0:10], x='game_time', y='title', orientation = 'h',\n             hover_data=['title'], color='game_time',\n             labels={'game_time':'Game Time'}, height=400)\nfig.show()","b608c14d":"# Correlation \ntrain_data.dtypes","b6f5c039":"#sns.pairplot(merge_data[['event_count','game_time']])\n#sns.show()\n#merge_data['game_session'].value_counts()\ngame_sess = merge_data[merge_data['game_session']=='a229f001486f628c']\ngame_sess.shape\nfig = px.scatter(game_sess, x=\"event_count\", y=\"game_time\")\nfig.show()","5b5fe856":"world_type = train_data.groupby(['world','type'])['game_session'].count().reset_index()\nworld_type\nplt.figure(figsize=(20,7))\nax = sns.barplot(x=\"world\", y=\"game_session\", hue=\"type\", data=world_type)","97fc93eb":"world_type = train_data.groupby(['world','type'])['game_time'].mean().reset_index()\nworld_type\nplt.figure(figsize=(20,7))\nax = sns.barplot(x=\"world\", y=\"game_time\", hue=\"type\", data=world_type)","0a3edac7":"world_type = train_data.groupby(['world','type'])['event_count'].count().reset_index()\nworld_type\nplt.figure(figsize=(20,7))\nax = sns.barplot(x=\"world\", y=\"event_count\", hue=\"type\", data=world_type)","1428404d":"world_type = merge_data.groupby(['world','title'])['game_session'].count().reset_index()\nworld_type\nplt.figure(figsize=(20,7))\nax = sns.barplot(x=\"world\", y=\"game_session\", hue=\"title\", data=world_type)","512d4bc9":"# getting unique counts\ndef get_unique(data, feat):\n    return data[feat].nunique()\n\nfor col in train_labels.columns.values:\n    print(\"unique number of values in \",col)\n    print(get_unique(train_labels,col))","8518d079":"for col in train_data.columns.values:\n    print(\"unique number of values in \",col)\n    print(get_unique(train_data,col))","4b7d9303":"max_play = merge_data.groupby(['installation_id'])['event_count'].max().reset_index()\nmax_play.sort_values(by = ['event_count'], inplace = True, ascending = False)\nprint(max_play[0:10])\n\nfig = px.bar(max_play[0:10], x='event_count', y='installation_id', orientation = 'h',\n             hover_data=['installation_id'], color='installation_id',\n             labels={'event_count':'Event Count'}, height=400, title = 'Higher games played in a device')\nfig.show()","c46580f0":"min_play = merge_data.groupby(['installation_id'])['event_count'].min().reset_index()\nmin_play.sort_values(by = ['event_count'], inplace = True, ascending = True)\nmin_play\n\nfig = px.bar(min_play[0:10], x='installation_id', y='event_count',\n             hover_data=['installation_id'], color='installation_id',\n             labels={'event_count':'Event Count'}, height=400)\nfig.show()","cc6a5d3d":"min_play['event_count'].value_counts()","fa0fa9df":"one = train_data.query('installation_id==\"d0fe2b52\"')\none.shape","73ed14c6":"merge_data.query('installation_id==\"d0fe2b52\"').head(1)","f1c87609":"data_2000 = train_data[train_data['event_code']==2000]\nworld_event = data_2000.groupby(['world'])['event_code'].value_counts()\nworld_event","7368fa59":"ass_data = merge_data.groupby(['world'])['event_id'].count()\nass_data","453b55da":"\nmax_game = train_data.groupby(['game_session'])['game_time'].max().reset_index()\nmax_game.sort_values(by=['game_time'], inplace= True, ascending = False)\n\nmax_game['hrs'] =  pd.to_timedelta(max_game['game_time'], unit='ms')\nprint(max_game['hrs'][0:10])","b8bf996d":"evnt_time = train_data.groupby('event_code')['game_time'].max().reset_index()\nevnt_time.sort_values(by = ['game_time'], inplace = True, ascending = False)\nevnt_time\nplt.figure(figsize=(20,7))\nax = sns.barplot(x=\"event_code\", y=\"game_time\", hue=\"event_code\", data=evnt_time[0:10])","3c11b04e":"corr_data = merge_data.corr()\nplt.figure(figsize=(20,20))\nax = sns.heatmap(\n    corr_data, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n);","398c33dc":"# Exploring Test Dataset.\ntest_data.shape\ntitle_ins = test_data.groupby('title')['game_session'].count().reset_index()\ntitle_ins.sort_values(by=['game_session'], inplace = True, ascending = False)\nprint(title_ins[0:10])\n\nfig = px.bar(title_ins[0:10], x='title', y='game_session',\n             hover_data=['title'], color='title',\n             labels={'game_session':'Event Count'}, height=400, title = 'Highly played Games')\nfig.show()","ddc6805c":"title_game = train_data.groupby(['title'])['game_time'].mean().reset_index()\ntitle_game.sort_values(by=['game_time'], inplace = True, ascending =False)\ntitle_game","df00fe57":"fig = px.bar(title_game[0:25], x=\"game_time\", y=\"title\", orientation='h', title = 'Top Titles with game time')\nfig.show()","8e8f6714":"train_data.columns","f549e303":"test_data['timestamp'] = pd.to_datetime(test_data['timestamp'])\ntest_data['date'] = test_data['timestamp'].dt.date\ntest_data['month'] = test_data['timestamp'].dt.month\ntest_data['hour'] = test_data['timestamp'].dt.hour\ntest_data['year'] = test_data['timestamp'].dt.year\ntest_data['dayofweek'] = test_data['timestamp'].dt.dayofweek\ntest_data['weekofyear'] = test_data['timestamp'].dt.weekofyear\ntest_data['dayofyear'] = test_data['timestamp'].dt.dayofyear\ntest_data['quarter'] = test_data['timestamp'].dt.quarter\ntest_data['is_month_start'] = test_data['timestamp'].dt.is_month_start","2c17ee03":"dd = test_data.groupby('date')['type'].value_counts()\ndd = dd.reset_index(name='count')\ndd\nfig = px.line(dd, x=\"date\", y=\"count\", color='type')\nfig.show()","08b1d7aa":"dd = train_data.groupby('date')['type'].value_counts()\ndd = dd.reset_index(name='count')\ndd\nfig = px.line(dd, x=\"date\", y=\"count\", color='type')\nfig.show()","cffab084":"dd = test_data.groupby('date')['world'].value_counts()\ndd = dd.reset_index(name='count')\ndd\nfig = px.line(dd, x=\"date\", y=\"count\", color='world')\nfig.show()","2183a873":"dd = train_data.groupby('date')['world'].value_counts()\ndd = dd.reset_index(name='count')\ndd\nfig = px.line(dd, x=\"date\", y=\"count\", color='world')\nfig.show()","c9c1731c":"## Date and Accuracy related features having high correlation. all others are not correlated. It is good to use Random Forest which is good with non-correlated features.","3ffd44a4":"# Data Exploration","44b984b6":"## Almost similar trend in type from Train and Test","78b55dce":"## Peak time was 7 in the evening. Most of the kids started playing at 10 in the morning and gradually increased upto night 11. even few kids played the game at 1AM. It may be because of timezone change or that game not played by the parent not by kid. ;)","6e556c6d":"## Looks like Chest Sorter is toughest and Bird Measurer is tougher. Most of the kids didnt clear the assessment in the first attempt","cb5b6f30":"# Top 10 games session active for 3 days.","b2f65feb":"## Activity based games are played most.","3d00bc03":"## Similar Kernals : https:\/\/www.kaggle.com\/c\/data-science-bowl-2019\/discussion\/122039","81cb2e84":"## most assessment happened in 5th day of a week. Weekend happiness :)","7afff83d":"## 3614 kids are just installed the app and not even played a single game or watched a video.","4ef86c1f":"## Training : Top 10 games played most. Looks like super intesting games with mostly animals, especially dinosaur.","fd1606f5":"## Based on the previous chart, even its correlated(game time and event count) few cases are having little high game time.","d4ed92f8":"# Libraries","5c84b269":"## Top 10 Time consumed Games.","5812401f":"## kids are interested in playing games related to hills. so many games provided in that segment.","ee7d47fa":"## one thing to note on Sep 27th, Games and Activity high, but the Assessment is low.","5735f81f":"## 50% of kids achieved in the first attempt itself.\n\n## 24% of kids failed to clear the assessment in the first attempt itself.","c3032a2d":"## Based on the above two table, kids who entered the game, minimum 2 times attended the assesment by average. ","a74bfff5":"## Peak installation was September 27th. Because of this: PBS KIDS Family Event At O'Neill Public Library.","8aee0a45":"## Highest game time took by TREETOPCITY","f67cfb0c":"## Except Cart Balancer All other game have high time. because it is easiest. High number of first attempt winners are belonged to this Title.","b4e9a362":"## definitly there should be an offer or an event must happend.","b58a6ce6":"## Event Count and Game Time is highly correlated(Common one ;))","8e90e459":"## kids mostly interested in interactive things like Game and Activity. Wathcing videos is boring ;)","27afd3c0":"## September last week. Already we knew the reason.","2b24e2e8":"## Why Chest sorter and Bird Measurer is little low compare to all others? let dig more. ","51314dec":"# Introduction\n\n![image.png](attachment:image.png)\n\nThe intent of the competition is to use the gameplay data to forecast how many attempts a child will take to pass a given assessment.\n\n\n***My Data Exploration would be towards how to view the dataset in terms of improve the game or pointing out the existing games pro's and con's.***\n\n## If you think, this kernel is useful, plz upvote.","dbdb77c3":"## Good number of games and activities in each world. Introduction world is having only videos.","961a42e1":"# More to explore....","1c7cd5bf":"## Training : Top 10 least played games. ","d232c5bf":"## you like it plz **upvote**\n\n## you have suggestions to improve, please **comment**\n\n# Happy Learning :)","889f4c81":"## Test : Top 10 games played most","5122ad80":"## two event codes having highest count. let explore further.","19348562":"## In all 3 world, the Assessment time is almost same. then Game and Activity. It depends on how many sub categories inside game and activity.","aac41a8f":"## Similar trend in World too.","cd272b87":"## Both Training and Test dataset has similiar range of game types","b5fe594a":"## In terms of assessment, each world is having its own Title. title is not common to all world","f6a5be24":"## In a day most of the assessment happened for 3PM ot 12PM.","eba93ca0":"# Data Loading"}}