{"cell_type":{"7d8749d3":"code","629886f1":"code","90cd5830":"code","6a287e48":"code","d4c43781":"code","5f04065b":"code","4bf12ff7":"code","2c5bbc45":"code","c468ce99":"code","31c31486":"code","a175f0e6":"code","8cf9610d":"code","0ff47792":"code","26db6fd9":"code","8083ef64":"code","a7cd7a20":"code","932fd704":"code","a902c994":"code","57d93892":"code","3d922e2c":"code","d8d56d32":"code","bc062306":"code","7baa3a3c":"code","4928ee75":"code","7331254b":"code","75b4fe1a":"code","f808e6e0":"code","9a922e8a":"code","9984859d":"code","fc4774f9":"code","39c24cb8":"code","a91bd58d":"code","9bcf3487":"code","fbb7a5b3":"code","7d90528e":"code","96b58ad5":"code","67500216":"code","9bd66844":"code","4f742ab2":"code","7ab6bc3e":"code","6eb8798d":"code","1eedc7e5":"code","ead7dae3":"code","bbd968aa":"code","970e9684":"code","f5e2222c":"code","e6948f03":"code","18eb2ea2":"code","7950531e":"code","5ea1b058":"code","e36ca200":"code","ff837152":"code","d20f33aa":"code","4c257c62":"code","b243d34a":"code","1316b0f4":"code","08e50bf3":"code","2cf474a7":"code","892d27f1":"code","17c578aa":"code","3e44df82":"code","c305232d":"code","1e5ce9d6":"code","88b52c95":"code","c9d29561":"code","070d79dd":"code","556ba738":"code","0d605139":"code","1e9db3c1":"code","5750dab3":"code","8936bdc9":"code","59af1a22":"code","40c65cb8":"code","e20ccc94":"code","33d5425d":"code","4c1b602f":"code","2a2be170":"markdown","eec9102a":"markdown","2e8d89ed":"markdown","b7d4b722":"markdown","e2b119cc":"markdown","78549915":"markdown","5ff4252e":"markdown","e6f5f3de":"markdown","0ca41cf1":"markdown","6b333ca8":"markdown","7db940a0":"markdown","b5b98957":"markdown","26219dc9":"markdown","1e1d6bf6":"markdown","6b84a6b7":"markdown","f4225613":"markdown","3db0c255":"markdown","d68068c8":"markdown","e5936b17":"markdown","f10972b0":"markdown","27e22642":"markdown","0deca1b3":"markdown","d16b8a59":"markdown","cfa2f98d":"markdown","4a023da8":"markdown"},"source":{"7d8749d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","629886f1":"file = open('\/kaggle\/input\/ense32020\/files\/adult.data', 'r')","90cd5830":"def chr_int(a):\n    if a.isdigit():\n        return int(a)\n    else:\n        return 0\n                \ndata=[]\nfor line in file:\n     data1=line.split(', ')\n     if len(data1)==15:\n        data.append([chr_int(data1[0]),data1[1],chr_int(data1[2]),data1[3],chr_int(data1[4]),data1[5],data1[6],\\\n            data1[7],data1[8],data1[9],chr_int(data1[10]),chr_int(data1[11]),chr_int(data1[12]),data1[13],\\\n            data1[14]])","6a287e48":"print (data[1:2])\n","d4c43781":"df = pd.DataFrame(data) #  Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes \n\ndf.columns = ['age', 'type_employer', 'fnlwgt', 'education', \n                \"education_num\",\"marital\", \"occupation\", \"relationship\", \"race\",\"sex\",\n                \"capital_gain\", \"capital_loss\", \"hr_per_week\",\"country\",\"income\"]\ndf.head()","5f04065b":"df.tail()","4bf12ff7":"df.shape\n","2c5bbc45":"counts = df.groupby('country').size()\n\nprint (counts) ","c468ce99":"counts = df.groupby('age').size() # grouping by age\nprint (counts)","31c31486":"ml = df[(df.sex == 'Male')] # grouping by sex\nml.shape\nml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\nml1.shape","a175f0e6":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\nml1.shape","8cf9610d":"fm =df[(df.sex == 'Female')]\nfm.shape","0ff47792":"fm1 =df[(df.sex == 'Female')&(df.income=='>50K\\n')]\nfm1.shape","26db6fd9":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","8083ef64":"print ('The average age of men is: ', ml['age'].mean(), '.' )\nprint ('The average age of women is: ', fm['age'].mean(), '.')","a7cd7a20":"print ('The average age of high-income men is: ', ml1['age'].mean(), '.' )\nprint ('The average age of high-income women is: ', fm1['age'].mean(), '.')","932fd704":"ml_mu = ml['age'].mean()\nfm_mu = fm['age'].mean()\nml_var = ml['age'].var()\nfm_var = fm['age'].var()\nml_std = ml['age'].std()\nfm_std = fm['age'].std()\n\nprint ('Statistics of age for men: mu:', ml_mu, 'var:', ml_var, 'std:', ml_std)\nprint ('Statistics of age for women: mu:', fm_mu, 'var:', fm_var, 'std:', fm_std)","a902c994":"ml_mu_hr = ml['hr_per_week'].mean()\nfm_mu_hr = fm['hr_per_week'].mean()\nml_var_hr = ml['hr_per_week'].var()\nfm_var_hr = fm['hr_per_week'].var()\nml_std_hr = ml['hr_per_week'].std()\nfm_std_hr = fm['hr_per_week'].std()\n\nprint ('Statistics of hours per week for men: mu:', ml_mu_hr, 'var:', ml_var_hr, 'std:', ml_std_hr)\nprint ('Statistics of hours per week for women: mu:', fm_mu_hr, 'var:', fm_var_hr, 'std:', fm_std_hr)","57d93892":"ml_median= ml['age'].median()\nfm_median= fm['age'].median()\n\nprint (\"Median age per men and women: \", ml_median, fm_median)","3d922e2c":"ml_median_age= ml1['age'].median()\nfm_median_age= fm1['age'].median()\n\nprint (\"Median age per men and women with high-income: \", ml_median_age, fm_median_age)","d8d56d32":"ml_median_hr= ml['hr_per_week'].median()\nfm_median_hr= fm['hr_per_week'].median()\nprint (\"Median hours per week per men and women: \", ml_median_hr, fm_median_hr)","bc062306":"import matplotlib.pyplot as plt\nml_age=ml['age']\nml_age.hist( histtype='stepfilled', bins=20)","7baa3a3c":"fm_age=fm['age']\nfm_age.hist( histtype='stepfilled', bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Female samples',fontsize=15)\nplt.show()","4928ee75":"import seaborn as sns\nfm_age.hist(histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Samples',fontsize=15)\nplt.show()","7331254b":"fm_age.hist(density=True, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=True, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('PMF',fontsize=15)\nplt.show()","75b4fe1a":"ml_age.hist(density=True, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","f808e6e0":"fm_age.hist(density=True, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","9a922e8a":"ml_age.hist(density=True, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","9984859d":"fm_age.hist(density=True, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","fc4774f9":"ml_age.hist(bins=10, density=True, histtype='stepfilled', alpha=.5)   # default number of bins = 10\nfm_age.hist(bins=10, density=True, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","39c24cb8":"ml_age.hist(density=True, histtype='step', cumulative=True,  linewidth=3.5, bins=20)\nfm_age.hist(density=True, histtype='step', cumulative=True,  linewidth=3.5, bins=20, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","a91bd58d":"print (\"The mean sample difference is \", ml_age.mean() - fm_age.mean())\n","9bcf3487":"df['age'].median()","fbb7a5b3":"len(df[(df.income == '>50K\\n') & (df['age'] < df['age'].median() - 15)])","7d90528e":"len(df[(df.income == '>50K\\n') & (df['age'] > df['age'].median() + 35)])","96b58ad5":"df2 = df.drop(df.index[(df.income=='>50K\\n') & (df['age']>df['age'].median() +35) & (df['age'] > df['age'].median()-15)])\n\ndf2.shape","67500216":"ml1_age=ml1['age']\nfm1_age=fm1['age']","9bd66844":"ml2_age = ml1_age.drop(ml1_age.index[(ml1_age >df['age'].median()+35) & (ml1_age>df['age'].median() - 15)])\n\nfm2_age = fm1_age.drop(fm1_age.index[(fm1_age > df['age'].median()+35) & (fm1_age > df['age'].median()- 15)])","4f742ab2":"mu2ml = ml2_age.mean()\nstd2ml = ml2_age.std()\nmd2ml = ml2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income male population\n\nprint (\"Men statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", ml2_age.min(), \"Max:\",ml2_age.max())","7ab6bc3e":"mu3ml = fm2_age.mean()\nstd3ml = fm2_age.std()\nmd3ml = fm2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income female population\nprint (\"Women statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", fm2_age.min(), \"Max:\",fm2_age.max())","6eb8798d":"print ('The mean difference with outliers is: %4.2f.'% (ml_age.mean() - fm_age.mean()))\nprint (\"The mean difference without outliers is: %4.2f.\"% (ml2_age.mean() - fm2_age.mean()))","1eedc7e5":"plt.figure(figsize=(13.4,5))\n\ndf.age[(df.income == '>50K\\n')].plot(alpha=.25, color='blue')\ndf2.age[(df2.income == '>50K\\n')].plot(alpha=.45,color='red')\n\nplt.ylabel('Age')\nplt.xlabel('Samples')","ead7dae3":"import numpy as np\n\ncountx,divisionx = np.histogram(ml2_age, density=True)\ncounty,divisiony = np.histogram(fm2_age, density=True)","bbd968aa":"import matplotlib.pyplot as plt\n\nval = [(divisionx[i]+divisionx[i+1])\/2 for i in range(len(divisionx)-1)]\n\nplt.plot(val, countx-county,'o-')\nplt.title('Differences in promoting men vs. women')\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Differences',fontsize=15)\nplt.show()","970e9684":"print (\"Remember:\\n We have the following mean values for men, women and the difference:\\nOriginally: \", ml_age.mean(), fm_age.mean(),  ml_age.mean()- fm_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"For high-income: \", ml1_age.mean(), fm1_age.mean(), ml1_age.mean()- fm1_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"After cleaning: \", ml2_age.mean(), fm2_age.mean(), ml2_age.mean()- fm2_age.mean()) # The difference between the mean values of male and female populations.)\n\nprint (\"\\nThe same for the median:\")\nprint (ml_age.median(), fm_age.median(), ml_age.median()- fm_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml1_age.median(), fm1_age.median(), ml1_age.median()- fm1_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml2_age.median(), fm2_age.median(), ml2_age.median()- fm2_age.median()), # The difference between the mean values of male and female populations.)","f5e2222c":"def skewness(x):\n    res=0\n    m=x.mean()\n    s=x.std()\n    for i in x:\n        res+=(i-m)*(i-m)*(i-m)\n    res\/=(len(x)*s*s*s)\n    return res\n\nprint (\"The skewness of the male population is:\", skewness(ml2_age))\nprint (\"The skewness of the female population is:\", skewness(fm2_age))","e6948f03":"def pearson(x):\n    return 3*(x.mean()-x.median())\/x.std()\n\nprint (\"The Pearson's coefficient of the male population is:\", pearson(ml2_age))\nprint (\"The Pearson's coefficient of the female population is:\", pearson(fm2_age))","18eb2ea2":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\n\nml2 = ml1.drop(ml1.index[(ml1['age']>df['age'].median() +35)&(ml1['age']> df['age'].median()- 15)])\n\nfm2 = fm1.drop(fm1.index[(fm1['age']> df['age'].median() + 35)& (fm1['age']> df['age'].median() - 15)])\n\nprint (ml2.shape, fm2.shape)","7950531e":"print (\"Men grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(ml2_age[ml2_age<41])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(ml2_age[ml2_age >44])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(ml2_age[(ml2_age>40) & (ml2_age< 45)])\/float(len(ml2_age.index)))),\"%.\")","5ea1b058":"print (\"Women grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(fm2_age[fm2_age <41])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(fm2_age[fm2_age >44])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(fm2_age[(fm2_age>40) & (fm2_age< 45)])\/float(len(fm2_age.index)))),\"%.\")","e36ca200":"print (\"The male mean:\", ml2_age.mean())\nprint (\"The female mean:\", fm2_age.mean())","ff837152":"ml2_young = len(ml2_age[(ml2_age<41)])\/float(len(ml2_age.index))\nfm2_young  = len(fm2_age[(fm2_age<41)])\/float(len(fm2_age.index))\nprint (\"The relative risk of female early promotion is: \", 100*(1-ml2_young\/fm2_young))","d20f33aa":"ml2_elder = len(ml2_age[(ml2_age>44)])\/float(len(ml2_age.index))\nfm2_elder  = len(fm2_age[(fm2_age>44)])\/float(len(fm2_age.index))\nprint (\"The relative risk of male late promotion is: \", 100*ml2_elder\/fm2_elder)","4c257c62":"l = 3\nx=np.arange(0,2.5,0.1)\ny= 1- np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential CDF: $\\lambda$ =%.2f'% l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","b243d34a":"from __future__ import division\nimport scipy.stats as stats\n\nl = 3\nx=np.arange(0,2.5,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential PDF: $\\lambda$ =%.2f'% l, fontsize=15)\nplt.xlabel('x', fontsize=15)\nplt.ylabel('PDF', fontsize=15)\nplt.show()","1316b0f4":"l = 0.25\n\nx=np.arange(0,25,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential: $\\lambda$ =%.2f' %l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('PDF',fontsize=15)\nplt.show()","08e50bf3":"u=6 # mean\ns=2 # standard deviation\n\nx=np.arange(0,15,0.1)\n\ny=(1\/(np.sqrt(2*np.pi*s*s)))*np.exp(-(((x-u)**2)\/(2*s*s)))\n\nplt.plot(x,y,'-')\nplt.title('Gaussian PDF: $\\mu$=%.1f, $\\sigma$=%.1f'%(u,s),fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('Probability density',fontsize=15)\nplt.show()","2cf474a7":"fig, ax = plt.subplots(1, 4, sharey=True, squeeze=True, figsize=(14, 5))\nx = np.linspace(0, 1, 100)\nfor i in range(4):\n    f = np.mean(np.random.random((10000, i+1)), 1)\n    m, s = np.mean(f), np.std(f, ddof=1)\n    fn = (1\/(s*np.sqrt(2*np.pi)))*np.exp(-(x-m)**2\/(2*s**2))  # normal pdf            \n    ax[i].hist(f, 40, density=True, color=[0, 0.2, .8, .6]) \n    ax[i].set_title('n=%d' %(i+1))\n    ax[i].plot(x, fn, color=[1, 0, 0, .6], linewidth=5)\nplt.suptitle('Demonstration of the central limit theorem for a uniform distribution', y=1.05)\nplt.show()","892d27f1":"from scipy.stats.distributions import norm\n\n# Some random data\ny = np.random.random(15) * 10\nx = np.linspace(0, 10, 100)\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\ny = np.r_[x1, x2] # r_ Translates slice objects to concatenation along the first axis.\nx = np.linspace(min(y), max(y), 100)\n\n# Smoothing parameter\ns = 0.4\n\n# Calculate the kernels\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'go', ms=10)","17c578aa":"from scipy.stats import kde\n\nx1 = np.random.normal(-1, 0.5, 15)\n\n# parameters: (loc=0.0, scale=1.0, size=None)\n\nx2 = np.random.normal(6, 1, 10)\ny = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\n\nx = np.linspace(min(y), max(y), 100)\ns = 0.4   # Smoothing parameter\n\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\n# Calculate the kernels\ndensity = kde.gaussian_kde(y)\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'bo', ms=10)","3e44df82":"xgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(y, bins=28, density=True)\nplt.plot(xgrid, density(xgrid), 'r-')","c305232d":"# Create a bi-modal distribution with a mixture of Normals.\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\n\n# Append by row\nx = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\nplt.hist(x, bins=18, density=True)","1e5ce9d6":"Density = kde.gaussian_kde(x)\nxgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(x, bins=18, density=True)\nplt.plot(xgrid, Density(xgrid), 'r-')","88b52c95":"x = np.random.normal(0.0, 1.0, 10000)\na = plt.hist(x,50,density='True')","c9d29561":"print ('The empirical mean of the sample is ', x.mean())","070d79dd":"NTs=200\nmu=0.0\nvar=1.0\nerr = 0.0\nNPs=1000\nfor i in range(NTs):\n    x = np.random.normal(mu, var, NPs)\n    err += (x.mean()-mu)**2\n\nprint ('MSE: ', err\/NTs)","556ba738":"def Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nX = [5, -1, 3.3, 2.7, 12.2]\nX= np.array(X)\nY = [10, 12, 8, 9, 11]\n\nprint (\"Cov(X, X) = %.2f\" % Cov(X, X))\nprint (\"Var(X) = %.2f\" % np.var(X))\n\nprint (\"Cov(X, Y) = %.2f\" % Cov(X, Y))","0d605139":"MAXN=100\nMAXN=40\n\nX=np.array([[1,9],[3, 2], [5,3],[5.5,4],[6,4],[6.5,4],[7,3.5],[7.5,3.8],[8,4],\n[8.5,4],[9,4.5],[9.5,7],[10,9],[10.5,11],[11,11.5],[11.5,12],[12,12],[12.5,12],[13,10]])","1e9db3c1":"plt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('Economic growth(T)',fontsize=15)\nplt.ylabel('Stock market returns(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","5750dab3":"X=np.array([[1,8],[2, 7], [3,6],[4,8],[5,8],[6,7],[7,7],[8,5],[9,5],[10,6],[11,4],[12,5],[13,3],[14,2],[15,2],[16,1]])\n\nplt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('World Oil Production(T)',fontsize=15)\nplt.ylabel('Gasoline prices(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","8936bdc9":"def Corr(X, Y):\n    assert len(X) == len(Y)\n    return Cov(X, Y) \/ np.prod([np.std(V) for V in [X, Y]])\n\nprint (\"Corr(X, X) = %.5f\" % Corr(X, X))\n\nY=np.random.random(len(X))\n\nprint (\"Corr(X, Y) = %.5f\" % Corr(X, Y))","59af1a22":"def list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nl = [7, 1, 2, 5]\nprint (\"ranks: \", list2rank(l))\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nX = [10, 20, 30, 40, 1000]\nY = [-70, -1000, -50, -10, -20]\nplt.plot(X,'ro')\nplt.plot(Y,'go')\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X, Y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X, Y))","40c65cb8":"X=np.array([[10.0, 8.04,10.0, 9.14, 10.0, 7.46, 8.0, 6.58],\n[8.0,6.95, 8.0, 8.14, 8.0, 6.77, 8.0, 5.76],\n[13.0,7.58,13.0,8.74,13.0,12.74,8.0,7.71],\n[9.0,8.81,9.0,8.77,9.0,7.11,8.0,8.84],\n[11.0,8.33,11.0,9.26,11.0,7.81,8.0,8.47],\n[14.0,9.96,14.0,8.10,14.0,8.84,8.0,7.04],\n[6.0,7.24,6.0,6.13,6.0,6.08,8.0,5.25],\n[4.0,4.26,4.0,3.10,4.0,5.39,19.0,12.50],\n[12.0,10.84,12.0,9.13,12.0,8.15,8.0,5.56],\n[7.0,4.82,7.0,7.26,7.0,6.42,8.0,7.91],\n[5.0,5.68,5.0,4.74,5.0,5.73,8.0,6.89]])","e20ccc94":"plt.subplot(2,2,1)\nplt.scatter(X[:,0],X[:,1],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","33d5425d":"plt.subplot(2,2,2)\nplt.scatter(X[:,2],X[:,3],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.subplot(2,2,3)\nplt.scatter(X[:,4],X[:,5],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","4c1b602f":"plt.subplot(2,2,4)\nplt.scatter(X[:,6],X[:,7],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.gcf().set_size_inches((10,10))","2a2be170":"*Question 17: Show the graphics and an explain the result.\n\nSame as before but for females.","eec9102a":"*Question 21: Explain the result\n\nThe formula for skewness is a statistic that measures the asymmetry of the set of n data samples, xi. \n\nThe skewness of the male population is: 0.26 \/\/\nThe skewness of the female population is: 0.38\n\nThis means that for both skewness is >0, being larger in women, so the distribution extends further to the right than to the left.","2e8d89ed":"*Question 14: Show the graphics and an explain the result.\n\nThe normalized values for males","b7d4b722":"*Question 4: Describe an explain the result.\n\nthe command .shape shows us the number of data samples (in rows, in this case 32561) and features (in columns in this case 15)","e2b119cc":"*Question 5: How many items are there for USA? and for Mexico?\n\nUnited-States                 29170 \/\/ \nMexico                          643\n","78549915":"*Question 15: Show the graphics and an explain the result.\n\nThe normalized values for females","5ff4252e":"*Question 3: Describe and explain the result. Compare with the previous one.\n\nWith 'df.tail()' we basically are printing the last 5 values of our list (now he have a list because we have created it when we converted the raw data into pandas dataframe). So basically what changes in this new line of code compared with the previous one is the data printed, here we can see that te indexes of the data objects are 32556, 32557, etc and before it was from 1 to 5","e6f5f3de":"*Question 1: What is the obtained result? What did you ask for in the previous command? Explain.\n\nThe results are the values from the position 1 (included) to 2 (excluded).","0ca41cf1":"*Question 22: What do you obtained as result?\n\nMSE measures the average squared difference between the estimator \u02c6\u03b8 and\nthe parameter \u03b8, a somewhat reasonable measure of performance for an estimator. The above error obtained is relatively very small.","6b333ca8":"*Question 16: Show the graphics and an explain the result.\n\nHere we find the cumulative sum of the normalized values per age. As we have been seen, the age groups with more representation are theones in between 20 and 40 years old.","7db940a0":"*Question 10: Describe an explain the result.\n\nThe median is a value separating the higher half from the lower half of a data sample, a population or a probability distribution. For a data set, it may be thought of as \"the middle\" value. \n","b5b98957":"*Question 9: Describe an explain the result.\n\nHere the variance and the standard deviation are calculated. The Standard Deviation is a measure of how spread out numbers are. The Variance is the average of the squared differences from the Mean.\n\nResults: If we take a quick look to the std deviation and the mean values we can easily see that the coefficient of variation (CV=standard deviation \/ mean) is less than 1 which can be considered low which means that the data \n\n","26219dc9":"*Question 19: Show the graphics and an explain the result.\n\nThe The cumulative distribution function (CDF) for both men and women. Here we find than the womwn are more represented for the younger groups and the mwn have a greater weight in middle and older group ages.\n","1e1d6bf6":"**Exercise**: Obtain for the Anscombe's quartet [2] given in the figures bellow, the different estimators (mean, variance, covariance for each pair, Pearson's correlation and Spearman's rank correlation.**","6b84a6b7":"*Question 7:  Describe an explain the result.\n\nHere basically we have been grouping the data between the different sex (male or female) and also by the level of income, we have separeted the people which their income is greater than 50k from the rest. In the last step, we have calculated the percentages of people with high income from the total and the percentage of men and women with high income. \n\nResults: We can see that almost 1\/4 of the total dataset have earnings greater that 50k. Furthermore, rate of men with high income is 3 times the women with high income (30 and 10 respectively).","f4225613":"*Question 20: Explain the result.\n\nThe mean difference between men and women is 2.57 ages, which means that in this dataset the mean age of men is 2.57 years higher than in women (older men registered compared to women) ","3db0c255":"*Question 8: Describe an explain the result.\n\nHere we are calculating the mean value (add up all the numbers, then divide by how many numbers there are) of the age value of men and women and same but with high income. We can observe from th results that the average age of men in higher as the one of women in this dataset. Also we can see that the average age of high-income in men is higher than in women.","d68068c8":"*Question 6: What is the age of the most represented people?\n\nThe most represented group of people are the ones with 20 years old, with a representation of 753.","e5936b17":"*Question 2: Describe an explain the result.\n\nIn these last lines of code we basically have converted the raw data obtained before to a new dataframe format called Pandas, with this new format the data is better clasified and organized.","f10972b0":"*Question 13. Show the graphics and an explain the result.\n\nIf density is True , the weights are normalized, so that the integral of the density over the range remains 1. If True , then a histogram is computed where each bin gives the counts in that bin plus all bins for smaller values. The last bin gives the total number of datapoints.","27e22642":"*Question 11. Show the graphics and an explain the result.\n\nHere the histogram shows that for women the most numerous groups are between 20 (being this the highest) and 40.","0deca1b3":"*Question 21: What does the figure shows?\n\nThe free parameters of kernel density estimation are the kernel, which specifies the shape of the distribution placed at each point, and the kernel bandwidth, which controls the size of the kernel at each point.\n\nFrom the grapgh we can conclude that between the points -2 an 0 the data has a clear gaussian distribution. Also between the points 4 and 8 we can find the data arrenged in a gaussian distribution.","d16b8a59":"*Question 12. Show the graphics and an explain the result.\n\n\n","cfa2f98d":"*Question 18: Show the graphics and an explain the result.\n","4a023da8":"*Question 10:  Show the graphics and an explain the result.\n\nThe histogram shows that the age group more numerous is people between 30-35 years old."}}