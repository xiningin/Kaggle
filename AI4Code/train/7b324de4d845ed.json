{"cell_type":{"ff6e52de":"code","621151cd":"code","91b145e0":"code","0d6d6938":"code","8b8e4300":"code","49aaa2f1":"code","24c261a3":"code","d86b7b28":"code","fa168ec1":"code","7ac7c8cb":"code","565c868b":"code","e3d7dab7":"code","4b0d589e":"markdown","61de609f":"markdown","5f010190":"markdown","0fbb4df5":"markdown","f37612f6":"markdown"},"source":{"ff6e52de":"import numpy as np\nimport pandas as pd\nimport os\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom tqdm import tqdm_notebook\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_absolute_error\npd.options.display.precision = 15\n\nimport lightgbm as lgb\nimport time\nimport datetime\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold, KFold, RepeatedKFold\nfrom sklearn import metrics\nfrom sklearn import linear_model\nimport gc\nimport warnings\nwarnings.filterwarnings(\"ignore\")","621151cd":"## Andrew's utils\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df\n\n\ndef group_mean_log_mae(y_true, y_pred, types, floor=1e-9):\n    \"\"\"\n    Fast metric computation for this competition: https:\/\/www.kaggle.com\/c\/champs-scalar-coupling\n    Code is from this kernel: https:\/\/www.kaggle.com\/uberkinder\/efficient-metric\n    \"\"\"\n    maes = (y_true-y_pred).abs().groupby(types).mean()\n    return np.log(maes.map(lambda x: max(x, floor))).mean()\n    \n\ndef train_model_regression(X, X_test, y, params, folds, model_type='lgb', eval_metric='mae', columns=None, plot_feature_importance=False, model=None,\n                               verbose=10000, early_stopping_rounds=200, n_estimators=50000):\n    \"\"\"\n    A function to train a variety of regression models.\n    Returns dictionary with oof predictions, test predictions, scores and, if necessary, feature importances.\n    \n    :params: X - training data, can be pd.DataFrame or np.ndarray (after normalizing)\n    :params: X_test - test data, can be pd.DataFrame or np.ndarray (after normalizing)\n    :params: y - target\n    :params: folds - folds to split data\n    :params: model_type - type of model to use\n    :params: eval_metric - metric to use\n    :params: columns - columns to use. If None - use all columns\n    :params: plot_feature_importance - whether to plot feature importance of LGB\n    :params: model - sklearn model, works only for \"sklearn\" model type\n    \n    \"\"\"\n    columns = X.columns if columns is None else columns\n    X_test = X_test[columns]\n    \n    # to set up scoring parameters\n    metrics_dict = {'mae': {'lgb_metric_name': 'mae',\n                        'catboost_metric_name': 'MAE',\n                        'sklearn_scoring_function': metrics.mean_absolute_error},\n                    'group_mae': {'lgb_metric_name': 'mae',\n                        'catboost_metric_name': 'MAE',\n                        'scoring_function': group_mean_log_mae},\n                    'mse': {'lgb_metric_name': 'mse',\n                        'catboost_metric_name': 'MSE',\n                        'sklearn_scoring_function': metrics.mean_squared_error}\n                    }\n\n    \n    result_dict = {}\n    \n    # out-of-fold predictions on train data\n    oof = np.zeros(len(X))\n    \n    # averaged predictions on train data\n    prediction = np.zeros(len(X_test))\n    \n    # list of scores on folds\n    scores = []\n    feature_importance = pd.DataFrame()\n    \n    # split and train on folds\n    for fold_n, (train_index, valid_index) in enumerate(folds.split(X)):\n        print(f'Fold {fold_n + 1} started at {time.ctime()}')\n        if type(X) == np.ndarray:\n            X_train, X_valid = X[columns][train_index], X[columns][valid_index]\n            y_train, y_valid = y[train_index], y[valid_index]\n        else:\n            X_train, X_valid = X[columns].iloc[train_index], X[columns].iloc[valid_index]\n            y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n            \n        if model_type == 'lgb':\n            model = lgb.LGBMRegressor(**params, n_estimators = n_estimators, n_jobs = -1)\n            model.fit(X_train, y_train, \n                    eval_set=[(X_train, y_train), (X_valid, y_valid)], eval_metric=metrics_dict[eval_metric]['lgb_metric_name'],\n                    verbose=verbose, early_stopping_rounds=early_stopping_rounds)\n            \n            y_pred_valid = model.predict(X_valid)\n            y_pred = model.predict(X_test, num_iteration=model.best_iteration_)\n            \n        if model_type == 'xgb':\n            train_data = xgb.DMatrix(data=X_train, label=y_train, feature_names=X.columns)\n            valid_data = xgb.DMatrix(data=X_valid, label=y_valid, feature_names=X.columns)\n\n            watchlist = [(train_data, 'train'), (valid_data, 'valid_data')]\n            model = xgb.train(dtrain=train_data, num_boost_round=20000, evals=watchlist, early_stopping_rounds=200, verbose_eval=verbose, params=params)\n            y_pred_valid = model.predict(xgb.DMatrix(X_valid, feature_names=X.columns), ntree_limit=model.best_ntree_limit)\n            y_pred = model.predict(xgb.DMatrix(X_test, feature_names=X.columns), ntree_limit=model.best_ntree_limit)\n        \n        if model_type == 'sklearn':\n            model = model\n            model.fit(X_train, y_train)\n            \n            y_pred_valid = model.predict(X_valid).reshape(-1,)\n            score = metrics_dict[eval_metric]['sklearn_scoring_function'](y_valid, y_pred_valid)\n            print(f'Fold {fold_n}. {eval_metric}: {score:.4f}.')\n            print('')\n            \n            y_pred = model.predict(X_test).reshape(-1,)\n        \n        if model_type == 'cat':\n            model = CatBoostRegressor(iterations=20000,  eval_metric=metrics_dict[eval_metric]['catboost_metric_name'], **params,\n                                      loss_function=metrics_dict[eval_metric]['catboost_metric_name'])\n            model.fit(X_train, y_train, eval_set=(X_valid, y_valid), cat_features=[], use_best_model=True, verbose=False)\n\n            y_pred_valid = model.predict(X_valid)\n            y_pred = model.predict(X_test)\n        \n        oof[valid_index] = y_pred_valid.reshape(-1,)\n        if eval_metric != 'group_mae':\n            scores.append(metrics_dict[eval_metric]['sklearn_scoring_function'](y_valid, y_pred_valid))\n        else:\n            scores.append(metrics_dict[eval_metric]['scoring_function'](y_valid, y_pred_valid, X_valid['type']))\n\n        prediction += y_pred    \n        \n        if model_type == 'lgb' and plot_feature_importance:\n            # feature importance\n            fold_importance = pd.DataFrame()\n            fold_importance[\"feature\"] = columns\n            fold_importance[\"importance\"] = model.feature_importances_\n            fold_importance[\"fold\"] = fold_n + 1\n            feature_importance = pd.concat([feature_importance, fold_importance], axis=0)\n\n    prediction \/= folds.n_splits\n    \n    print('CV mean score: {0:.4f}, std: {1:.4f}.'.format(np.mean(scores), np.std(scores)))\n    \n    result_dict['oof'] = oof\n    result_dict['prediction'] = prediction\n    result_dict['scores'] = scores\n    \n    if model_type == 'lgb':\n        if plot_feature_importance:\n            feature_importance[\"importance\"] \/= folds.n_splits\n            cols = feature_importance[[\"feature\", \"importance\"]].groupby(\"feature\").mean().sort_values(\n                by=\"importance\", ascending=False)[:50].index\n\n            best_features = feature_importance.loc[feature_importance.feature.isin(cols)]\n\n            plt.figure(figsize=(16, 12));\n            sns.barplot(x=\"importance\", y=\"feature\", data=best_features.sort_values(by=\"importance\", ascending=False));\n            plt.title('LGB Features (avg over folds)');\n            \n            result_dict['feature_importance'] = feature_importance\n        \n    return result_dict","91b145e0":"file_folder = '..\/input\/champs-scalar-coupling' \ntrain = pd.read_csv(f'{file_folder}\/train.csv')\ntest = pd.read_csv(f'{file_folder}\/test.csv')\nsub = pd.read_csv(f'{file_folder}\/sample_submission.csv')\nstructures = pd.read_csv(f'{file_folder}\/structures.csv')","0d6d6938":"path = '..\/input\/parallelization-of-coulomb-yukawa-interaction'\nstructures_yukawa = pd.read_csv(f'{path}\/structures_yukawa.csv')\nstructures = pd.concat([structures, structures_yukawa], axis=1)\ndel structures_yukawa","8b8e4300":"y = train['scalar_coupling_constant']\ntrain = train.drop(columns = ['scalar_coupling_constant'])","49aaa2f1":"def map_atom_info(df_1, df_2, atom_idx):\n    df = pd.merge(df_1, df_2, how = 'left',\n                  left_on  = ['molecule_name', f'atom_index_{atom_idx}'],\n                  right_on = ['molecule_name',  'atom_index'])\n    \n    df = df.drop('atom_index', axis=1)\n    return df\n\n    \ndef find_dist(df):\n    df_p_0 = df[['x_0', 'y_0', 'z_0']].values\n    df_p_1 = df[['x_1', 'y_1', 'z_1']].values\n    \n    df['dist'] = np.linalg.norm(df_p_0 - df_p_1, axis=1)\n    df['dist_inv2'] = 1\/df['dist']**2\n    df['dist_x'] = (df['x_0'] - df['x_1']) ** 2\n    df['dist_y'] = (df['y_0'] - df['y_1']) ** 2\n    df['dist_z'] = (df['z_0'] - df['z_1']) ** 2\n    return df\n\ndef find_closest_atom(df):    \n    df_temp = df.loc[:,[\"molecule_name\",\n                      \"atom_index_0\",\"atom_index_1\",\n                      \"dist\",\"x_0\",\"y_0\",\"z_0\",\"x_1\",\"y_1\",\"z_1\"]].copy()\n    df_temp_ = df_temp.copy()\n    df_temp_ = df_temp_.rename(columns={'atom_index_0': 'atom_index_1',\n                                       'atom_index_1': 'atom_index_0',\n                                       'x_0': 'x_1',\n                                       'y_0': 'y_1',\n                                       'z_0': 'z_1',\n                                       'x_1': 'x_0',\n                                       'y_1': 'y_0',\n                                       'z_1': 'z_0'})\n    df_temp_all = pd.concat((df_temp,df_temp_),axis=0)\n\n    df_temp_all[\"min_distance\"]=df_temp_all.groupby(['molecule_name', \n                                                     'atom_index_0'])['dist'].transform('min')\n    df_temp_all[\"max_distance\"]=df_temp_all.groupby(['molecule_name', \n                                                     'atom_index_0'])['dist'].transform('max')\n    \n    df_temp = df_temp_all[df_temp_all[\"min_distance\"]==df_temp_all[\"dist\"]].copy()\n    df_temp = df_temp.drop(['x_0','y_0','z_0','min_distance'], axis=1)\n    df_temp = df_temp.rename(columns={'atom_index_0': 'atom_index',\n                                         'atom_index_1': 'atom_index_closest',\n                                         'dist': 'distance_closest',\n                                         'x_1': 'x_closest',\n                                         'y_1': 'y_closest',\n                                         'z_1': 'z_closest'})\n    df_temp = df_temp.drop_duplicates(subset=['molecule_name', 'atom_index'])\n    \n    for atom_idx in [0,1]:\n        df = map_atom_info(df,df_temp, atom_idx)\n        df = df.rename(columns={'atom_index_closest': f'atom_index_closest_{atom_idx}',\n                                        'distance_closest': f'distance_closest_{atom_idx}',\n                                        'x_closest': f'x_closest_{atom_idx}',\n                                        'y_closest': f'y_closest_{atom_idx}',\n                                        'z_closest': f'z_closest_{atom_idx}'})\n        \n    df_temp= df_temp_all[df_temp_all[\"max_distance\"]==df_temp_all[\"dist\"]].copy()\n    df_temp = df_temp.drop(['x_0','y_0','z_0','max_distance'], axis=1)\n    df_temp= df_temp.rename(columns={'atom_index_0': 'atom_index',\n                                         'atom_index_1': 'atom_index_farthest',\n                                         'dist': 'distance_farthest',\n                                         'x_1': 'x_farthest',\n                                         'y_1': 'y_farthest',\n                                         'z_1': 'z_farthest'})\n    df_temp = df_temp.drop_duplicates(subset=['molecule_name', 'atom_index'])\n        \n    for atom_idx in [0,1]:\n        df = map_atom_info(df,df_temp, atom_idx)\n        df = df.rename(columns={'atom_index_farthest': f'atom_index_farthest_{atom_idx}',\n                                        'distance_farthest': f'distance_farthest_{atom_idx}',\n                                        'x_farthest': f'x_farthest_{atom_idx}',\n                                        'y_farthest': f'y_farthest_{atom_idx}',\n                                        'z_farthest': f'z_farthest_{atom_idx}'})\n    return df\n\n\ndef add_cos_features(df):\n    \n    df[\"distance_center0\"] = np.sqrt((df['x_0']-df['c_x'])**2 \\\n                                   + (df['y_0']-df['c_y'])**2 \\\n                                   + (df['z_0']-df['c_z'])**2)\n    df[\"distance_center1\"] = np.sqrt((df['x_1']-df['c_x'])**2 \\\n                                   + (df['y_1']-df['c_y'])**2 \\\n                                   + (df['z_1']-df['c_z'])**2)\n    \n    df['distance_c0'] = np.sqrt((df['x_0']-df['x_closest_0'])**2 + \\\n                                (df['y_0']-df['y_closest_0'])**2 + \\\n                                (df['z_0']-df['z_closest_0'])**2)\n    df['distance_c1'] = np.sqrt((df['x_1']-df['x_closest_1'])**2 + \\\n                                (df['y_1']-df['y_closest_1'])**2 + \\\n                                (df['z_1']-df['z_closest_1'])**2)\n    \n    df[\"distance_f0\"] = np.sqrt((df['x_0']-df['x_farthest_0'])**2 + \\\n                                (df['y_0']-df['y_farthest_0'])**2 + \\\n                                (df['z_0']-df['z_farthest_0'])**2)\n    df[\"distance_f1\"] = np.sqrt((df['x_1']-df['x_farthest_1'])**2 + \\\n                                (df['y_1']-df['y_farthest_1'])**2 + \\\n                                (df['z_1']-df['z_farthest_1'])**2)\n    \n    vec_center0_x = (df['x_0']-df['c_x'])\/(df[\"distance_center0\"]+1e-10)\n    vec_center0_y = (df['y_0']-df['c_y'])\/(df[\"distance_center0\"]+1e-10)\n    vec_center0_z = (df['z_0']-df['c_z'])\/(df[\"distance_center0\"]+1e-10)\n    \n    vec_center1_x = (df['x_1']-df['c_x'])\/(df[\"distance_center1\"]+1e-10)\n    vec_center1_y = (df['y_1']-df['c_y'])\/(df[\"distance_center1\"]+1e-10)\n    vec_center1_z = (df['z_1']-df['c_z'])\/(df[\"distance_center1\"]+1e-10)\n    \n    vec_c0_x = (df['x_0']-df['x_closest_0'])\/(df[\"distance_c0\"]+1e-10)\n    vec_c0_y = (df['y_0']-df['y_closest_0'])\/(df[\"distance_c0\"]+1e-10)\n    vec_c0_z = (df['z_0']-df['z_closest_0'])\/(df[\"distance_c0\"]+1e-10)\n    \n    vec_c1_x = (df['x_1']-df['x_closest_1'])\/(df[\"distance_c1\"]+1e-10)\n    vec_c1_y = (df['y_1']-df['y_closest_1'])\/(df[\"distance_c1\"]+1e-10)\n    vec_c1_z = (df['z_1']-df['z_closest_1'])\/(df[\"distance_c1\"]+1e-10)\n    \n    vec_f0_x = (df['x_0']-df['x_farthest_0'])\/(df[\"distance_f0\"]+1e-10)\n    vec_f0_y = (df['y_0']-df['y_farthest_0'])\/(df[\"distance_f0\"]+1e-10)\n    vec_f0_z = (df['z_0']-df['z_farthest_0'])\/(df[\"distance_f0\"]+1e-10)\n    \n    vec_f1_x = (df['x_1']-df['x_farthest_1'])\/(df[\"distance_f1\"]+1e-10)\n    vec_f1_y = (df['y_1']-df['y_farthest_1'])\/(df[\"distance_f1\"]+1e-10)\n    vec_f1_z = (df['z_1']-df['z_farthest_1'])\/(df[\"distance_f1\"]+1e-10)\n    \n    vec_x = (df['x_1']-df['x_0'])\/df['dist']\n    vec_y = (df['y_1']-df['y_0'])\/df['dist']\n    vec_z = (df['z_1']-df['z_0'])\/df['dist']\n    \n    df[\"cos_c0_c1\"] = vec_c0_x*vec_c1_x + vec_c0_y*vec_c1_y + vec_c0_z*vec_c1_z\n    df[\"cos_f0_f1\"] = vec_f0_x*vec_f1_x + vec_f0_y*vec_f1_y + vec_f0_z*vec_f1_z\n    \n    df[\"cos_c0_f0\"] = vec_c0_x*vec_f0_x + vec_c0_y*vec_f0_y + vec_c0_z*vec_f0_z\n    df[\"cos_c1_f1\"] = vec_c1_x*vec_f1_x + vec_c1_y*vec_f1_y + vec_c1_z*vec_f1_z\n    \n    df[\"cos_center0_center1\"] = vec_center0_x*vec_center1_x \\\n                              + vec_center0_y*vec_center1_y \\\n                              + vec_center0_z*vec_center1_z\n    \n    df[\"cos_c0\"] = vec_c0_x*vec_x + vec_c0_y*vec_y + vec_c0_z*vec_z\n    df[\"cos_c1\"] = vec_c1_x*vec_x + vec_c1_y*vec_y + vec_c1_z*vec_z\n    \n    df[\"cos_f0\"] = vec_f0_x*vec_x + vec_f0_y*vec_y + vec_f0_z*vec_z\n    df[\"cos_f1\"] = vec_f1_x*vec_x + vec_f1_y*vec_y + vec_f1_z*vec_z\n    \n    df[\"cos_center0\"] = vec_center0_x*vec_x + vec_center0_y*vec_y + vec_center0_z*vec_z\n    df[\"cos_center1\"] = vec_center1_x*vec_x + vec_center1_y*vec_y + vec_center1_z*vec_z\n\n    return df\n\ndef add_dist_features(df):\n    # Andrew's features selected\n    df[f'molecule_atom_index_0_dist_mean'] = df.groupby(['molecule_name', 'atom_index_0'])['dist'].transform('mean')\n    df[f'molecule_atom_index_0_dist_mean_diff'] = df[f'molecule_atom_index_0_dist_mean'] - df['dist']\n    df[f'molecule_atom_index_0_dist_min'] = df.groupby(['molecule_name', 'atom_index_0'])['dist'].transform('min')\n    df[f'molecule_atom_index_0_dist_min_diff'] = df[f'molecule_atom_index_0_dist_min'] - df['dist']\n    df[f'molecule_atom_index_0_dist_std'] = df.groupby(['molecule_name', 'atom_index_0'])['dist'].transform('std')\n\n    df[f'molecule_atom_index_1_dist_mean'] = df.groupby(['molecule_name', 'atom_index_1'])['dist'].transform('mean')\n    df[f'molecule_atom_index_1_dist_mean_diff'] = df[f'molecule_atom_index_1_dist_mean'] - df['dist']\n    df[f'molecule_atom_index_1_dist_min'] = df.groupby(['molecule_name', 'atom_index_1'])['dist'].transform('min')\n    df[f'molecule_atom_index_1_dist_min_diff'] = df[f'molecule_atom_index_1_dist_min'] - df['dist']\n    df[f'molecule_atom_index_1_dist_std'] = df.groupby(['molecule_name', 'atom_index_1'])['dist'].transform('std')\n    \n    df[f'molecule_type_dist_mean'] = df.groupby(['molecule_name', 'type'])['dist'].transform('mean')\n    df[f'molecule_type_dist_mean_diff'] = df[f'molecule_type_dist_mean'] - df['dist']\n    \n    return df\n\n\ndef dummies(df, list_cols):\n    for col in list_cols:\n        df_dummies = pd.get_dummies(df[col], drop_first=True, \n                                    prefix=(str(col)))\n        df = pd.concat([df, df_dummies], axis=1)\n    return df\n\n\ndef add_qm9_features(df):\n    data_qm9 = pd.read_pickle('..\/input\/quantum-machine-9-qm9\/data.covs.pickle')\n    to_drop = ['type', \n               'linear', \n               'atom_index_0', \n               'atom_index_1', \n               'scalar_coupling_constant', \n               'U', 'G', 'H', \n               'mulliken_mean', 'r2', 'U0']\n    data_qm9 = data_qm9.drop(columns = to_drop, axis=1)\n    data_qm9 = reduce_mem_usage(data_qm9,verbose=False)\n    df = pd.merge(df, data_qm9, how='left', on=['molecule_name','id'])\n    del data_qm9\n    \n    df = dummies(df, ['type', 'atom_1'])\n    return df\n\ndef get_features(df, struct):\n    for atom_idx in [0,1]:\n        df = map_atom_info(df, struct, atom_idx)\n        df = df.rename(columns={'atom': f'atom_{atom_idx}',\n                            'x': f'x_{atom_idx}',\n                            'y': f'y_{atom_idx}',\n                            'z': f'z_{atom_idx}'})\n        struct['c_x'] = struct.groupby('molecule_name')['x'].transform('mean')\n        struct['c_y'] = struct.groupby('molecule_name')['y'].transform('mean')\n        struct['c_z'] = struct.groupby('molecule_name')['z'].transform('mean')\n\n    df = find_dist(df)\n    df = find_closest_atom(df)\n    df = add_cos_features(df)\n    df = add_dist_features(df)\n    df = add_qm9_features(df)\n    \n    return df\n","24c261a3":"good_columns = ['type',\n 'dist_C_0_x',\n 'dist_C_1_x',\n 'dist_C_2_x',\n 'dist_C_3_x',\n 'dist_C_4_x',\n 'dist_F_0_x',\n 'dist_F_1_x',\n 'dist_F_2_x',\n 'dist_F_3_x',\n 'dist_F_4_x',\n 'dist_H_0_x',\n 'dist_H_1_x',\n 'dist_H_2_x',\n 'dist_H_3_x',\n 'dist_H_4_x',\n 'dist_N_0_x',\n 'dist_N_1_x',\n 'dist_N_2_x',\n 'dist_N_3_x',\n 'dist_N_4_x',\n 'dist_O_0_x',\n 'dist_O_1_x',\n 'dist_O_2_x',\n 'dist_O_3_x',\n 'dist_O_4_x',\n 'dist_C_0_y',\n 'dist_C_1_y',\n 'dist_C_2_y',\n 'dist_C_3_y',\n 'dist_C_4_y',\n 'dist_F_0_y',\n 'dist_F_1_y',\n 'dist_F_2_y',\n 'dist_F_3_y',\n 'dist_F_4_y',\n 'dist_H_0_y',\n 'dist_H_1_y',\n 'dist_H_2_y',\n 'dist_H_3_y',\n 'dist_H_4_y',\n 'dist_N_0_y',\n 'dist_N_1_y',\n 'dist_N_2_y',\n 'dist_N_3_y',\n 'dist_N_4_y',\n 'dist_O_0_y',\n 'dist_O_1_y',\n 'dist_O_2_y',\n 'dist_O_3_y',\n 'dist_O_4_y',\n 'dist_inv2',\n 'distance_closest_0',\n 'distance_closest_1',\n 'distance_farthest_0',\n 'distance_farthest_1',\n 'cos_c0_c1', 'cos_f0_f1','cos_c0_f0', 'cos_c1_f1',\n 'cos_center0_center1', 'cos_c0', 'cos_c1', 'cos_f0', 'cos_f1',\n 'cos_center0', 'cos_center1',\n 'molecule_atom_index_0_dist_mean',\n 'molecule_atom_index_0_dist_mean_diff',\n 'molecule_atom_index_0_dist_min',\n 'molecule_atom_index_0_dist_min_diff',\n 'molecule_atom_index_0_dist_std',\n 'molecule_atom_index_1_dist_mean',\n 'molecule_atom_index_1_dist_mean_diff',\n 'molecule_atom_index_1_dist_min',\n 'molecule_atom_index_1_dist_min_diff',\n 'molecule_atom_index_1_dist_std',\n 'molecule_type_dist_mean',\n 'molecule_type_dist_mean_diff',\n 'rc_A',\n 'rc_B',\n 'rc_C',\n 'mu',\n 'alpha',\n 'homo',\n 'lumo',\n 'gap',\n 'zpve',\n 'Cv',\n 'freqs_min',\n 'freqs_max',\n 'freqs_mean',\n 'mulliken_min',\n 'mulliken_max',\n 'mulliken_atom_0',\n 'mulliken_atom_1']\n\ngiba_columns = ['inv_dist0',\n 'inv_dist1',\n 'inv_distP',\n 'inv_dist0R',\n 'inv_dist1R',\n 'inv_distPR',\n 'inv_dist0E',\n 'inv_dist1E',\n 'inv_distPE',\n 'linkM0',\n 'linkM1',\n 'min_molecule_atom_0_dist_xyz',\n 'mean_molecule_atom_0_dist_xyz',\n 'max_molecule_atom_0_dist_xyz',\n 'sd_molecule_atom_0_dist_xyz',\n 'min_molecule_atom_1_dist_xyz',\n 'mean_molecule_atom_1_dist_xyz',\n 'max_molecule_atom_1_dist_xyz',\n 'sd_molecule_atom_1_dist_xyz',\n 'coulomb_C.x',\n 'coulomb_F.x',\n 'coulomb_H.x',\n 'coulomb_N.x',\n 'coulomb_O.x',\n 'yukawa_C.x',\n 'yukawa_F.x',\n 'yukawa_H.x',\n 'yukawa_N.x',\n 'yukawa_O.x',\n 'vander_C.x',\n 'vander_F.x',\n 'vander_H.x',\n 'vander_N.x',\n 'vander_O.x',\n 'coulomb_C.y',\n 'coulomb_F.y',\n 'coulomb_H.y',\n 'coulomb_N.y',\n 'coulomb_O.y',\n 'yukawa_C.y',\n 'yukawa_F.y',\n 'yukawa_H.y',\n 'yukawa_N.y',\n 'yukawa_O.y',\n 'vander_C.y',\n 'vander_F.y',\n 'vander_H.y',\n 'vander_N.y',\n 'vander_O.y',\n 'distC0',\n 'distH0',\n 'distN0',\n 'distC1',\n 'distH1',\n 'distN1',\n 'adH1',\n 'adH2',\n 'adH3',\n 'adH4',\n 'adC1',\n 'adC2',\n 'adC3',\n 'adC4',\n 'adN1',\n 'adN2',\n 'adN3',\n 'adN4',\n 'NC',\n 'NH',\n 'NN',\n 'NF',\n 'NO']","d86b7b28":"lbl = LabelEncoder()\nlbl.fit(list(train['type'].values) + list(test['type'].values))\ntrain['type'] = lbl.transform(list(train['type'].values))\ntest['type'] = lbl.transform(list(test['type'].values))","fa168ec1":"n_fold = 3\nseed = round(time.time())\nfolds = KFold(n_splits=n_fold, shuffle=True, random_state=seed)\n\nparams = {'num_leaves': 400,\n          'objective': 'huber',\n          'max_depth': 9,\n          'learning_rate': 0.12,\n          \"boosting_type\": \"gbdt\",\n          \"subsample_freq\": 1,\n          \"subsample\": 0.8,\n          \"metric\": 'mae',\n          \"verbosity\": -1,\n          'lambda_l1': 0.8,\n          'lambda_l2': 0.2,\n          'feature_fraction': 0.6,\n         }","7ac7c8cb":"X_short = pd.DataFrame({'ind': list(train.index), \n                        'type': train['type'].values,\n                        'oof': [0] * len(train), \n                        'target': y.values})\nX_short_test = pd.DataFrame({'ind': list(test.index), \n                             'type': test['type'].values, \n                             'prediction': [0] * len(test)})","565c868b":"%%time\nCV_score = 0\n###Iters###    [1JHC, 1JHN, 2JHC, 2JHH, 2JHN, 3JHC, 3JHH, 3JHN]\nn_estimators = [5000, 2500, 3000, 2500, 2500, 3000, 2500, 2500]\n\n\nfor t in train['type'].unique():\n    type_ = lbl.inverse_transform([t])[0]\n    print(f'\\nTraining of type {t}: {type_}.')\n    index_type = (train['type'] == t)\n    index_type_test = (test['type'] == t)\n    \n    X_t = train.loc[index_type].copy()\n    X_test_t = test.loc[index_type_test].copy()\n    y_t = y[index_type]\n    \n    print(f'Generating features...')\n    start_time = time.time()\n    \n    ## Generating features from the public kernels, just by type\n    ## no memory reduction is needed\n    X_t = get_features(X_t, structures.copy())\n    X_t = X_t[good_columns].fillna(0.0)\n    \n    X_test_t = get_features(X_test_t, structures.copy())\n    X_test_t = X_test_t[good_columns].fillna(0.0)\n    \n    ## load Giba's features just for type t by getting rows to be excluded when initiating read_csv\n    rows_to_exclude = np.where(index_type==False)[0]+1 # retain the header row\n    rows_to_exclude_test = np.where(index_type_test==False)[0]+1\n    train_giba_t = pd.read_csv('..\/input\/giba-molecular-features\/train_giba.csv\/train_giba.csv',\n                        header=0, skiprows=rows_to_exclude, usecols=giba_columns)\n    test_giba_t = pd.read_csv('..\/input\/giba-molecular-features\/test_giba.csv\/test_giba.csv',\n                       header=0, skiprows=rows_to_exclude_test, usecols=giba_columns)\n    \n    X_t = pd.concat((X_t, train_giba_t), axis=1)\n\n    X_test_t = pd.concat((X_test_t,test_giba_t), axis=1) \n    \n    del train_giba_t, test_giba_t\n    gc.collect()\n    \n    print(f'Done in {(time.time() - start_time):.2f} seconds for {X_t.shape[1]} features.')\n    ## feature generation done\n    \n    \n    result_dict_lgb = train_model_regression(X=X_t, X_test=X_test_t, \n                                              y=y_t, params=params, \n                                              folds=folds, \n                                              model_type='lgb', \n                                              eval_metric='mae', \n                                              plot_feature_importance=False,\n                                              verbose=2000, early_stopping_rounds=200, \n                                              n_estimators=n_estimators[t])\n    del X_t, X_test_t\n    gc.collect()\n    \n    X_short.loc[X_short['type'] == t, 'oof'] = result_dict_lgb['oof']\n    X_short_test.loc[X_short_test['type'] == t, 'prediction'] = result_dict_lgb['prediction']\n    \n    ## manually computing the cv score\n    CV_score += np.log(np.array(result_dict_lgb['scores']).mean())\/8 # total 8 types","e3d7dab7":"sub['scalar_coupling_constant'] = X_short_test['prediction']\ntoday = str(datetime.date.today())\nsub.to_csv(f'LGB_{today}_{CV_score:.4f}.csv', index=False)","4b0d589e":"# Summary\n\nIf you feel 16GB memory is too small for >200 features bond-wise, you are not alone. In this kernel, we updated Andrew's workflow by generating features for each type to save memory. No `reduce_mem_usage` by Andrew is used (except when importing QM9), so every computation is retained its `np.float64` default accuracy. \n\nWithin the loop of the training for each type, first the features are generated for a minimal passed train\/test dataframe, then [Giba's features](https:\/\/www.kaggle.com\/scaomath\/lgb-giba-features-qm9-custom-objective-in-python) are loaded using the format of a kernel I made earlier. Finally the [Yukawa potentials](https:\/\/www.kaggle.com\/scaomath\/parallelization-of-coulomb-yukawa-interaction) are added as well using `structures` dataframe by type to save a tons of memory.\n\nJust wrapping your feature generation into a function you are good to go.\n\n\n### References:\n- [Brute force feature engineering](https:\/\/www.kaggle.com\/artgor\/brute-force-feature-engineering)\n- [Keras Neural Net for CHAMPS](https:\/\/www.kaggle.com\/todnewman\/keras-neural-net-for-champs)\n- [Giba R + data.table + Simple Features](https:\/\/www.kaggle.com\/titericz\/giba-r-data-table-simple-features-1-17-lb)","61de609f":"# Training by type with time seed\nWe use different numbers of iterations for different type, after running the label encoder\n```\ntrain['type'].unique() = [0, 3, 1, 4, 2, 6, 5, 7]\n```\nHence the current the number of iteration `N` config (in order) is:\n\n> Type 0 = `1JHC`. <br>\n> Type 1 = `1JHN`. <br>\n> Type 2 = `2JHC`. <br>\n> Type 3 = `2JHH`. <br>\n> Type 4 = `2JHN`. <br>\n> Type 5 = `3JHC`. <br>\n> Type 6 = `3JHH`. <br>\n> Type 7 = `3JHN`. <br>","5f010190":"# Feature generation funcs\n\nThe features here are:\n\n- First the `type` is encoded by a label encoder.\n- The merging template and selected features from [Andrew's brute force feature engineering](https:\/\/www.kaggle.com\/artgor\/brute-force-feature-engineering)\n- Cosine features originally from [Effective feature](https:\/\/www.kaggle.com\/kmat2019\/effective-feature) and expanded in [Keras Neural Net for CHAMPS](https:\/\/www.kaggle.com\/todnewman\/keras-neural-net-for-champs), I simplified the generation procedure by removing unnecessary `pandas` operations since vanilla `numpy` arrays operation is faster.\n- QM9 dataset from [Quantum Machine 9 - QM9](https:\/\/www.kaggle.com\/zaharch\/quantum-machine-9-qm9).\n- Parallelization computed [Yukawa potentials](https:\/\/www.kaggle.com\/scaomath\/parallelization-of-coulomb-yukawa-interaction).\n- Giba's features from [Giba R + data.table + Simple Features](https:\/\/www.kaggle.com\/titericz\/giba-r-data-table-simple-features-1-17-lb), which I now export the features to a dataset: [Giba molecular features](https:\/\/www.kaggle.com\/scaomath\/giba-molecular-features).","0fbb4df5":"# Libraries and functions","f37612f6":"## Data loading and overview"}}