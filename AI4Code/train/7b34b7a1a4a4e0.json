{"cell_type":{"42aacb84":"code","2e216f69":"code","50a18dcb":"code","996cbfb5":"code","1b157b8a":"code","788710b5":"code","bb180045":"code","4857a1de":"code","d8c70863":"code","eaea7d5f":"code","911b5cb5":"code","66c4172e":"code","1942bc57":"code","079b14f1":"code","556cffb7":"code","89d526c2":"markdown","f7a42627":"markdown"},"source":{"42aacb84":"import json\nimport pickle\nfrom functools import partial\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import make_scorer\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import Lasso","2e216f69":"pd.options.display.float_format = '{:,.2f}'.format\nplt.rcParams['figure.figsize'] = 12, 8\nRANDOM_STATE=43","50a18dcb":"df = pd.read_csv(r'..\/input\/auto-ru-car-ads-parsed\/data1.csv')\nprint(f\"{df.shape}\")","996cbfb5":"def mape(y_true, y_pred):\n    \"\"\"\u043e\u0446\u0435\u043d\u043a\u0430 MEAN ABSOLUTE PERCENTAGE ERROR, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438\"\"\"\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\n    \ndef fit_and_score_model(model, X, y):\n    \"\"\"\u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0442\u0440\u0435\u0445 \u0444\u043e\u043b\u0434\u0430\u0445. \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u0440\u0435\u0434\u044e\u044e \u043e\u0446\u0435\u043d\u043a\u0443, \u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u043d\u0430 \u0444\u043e\u043b\u0434\u0430\u0445\"\"\"\n    \n    kf = KFold(n_splits=3, shuffle=True, random_state=RANDOM_STATE)\n    cv_results = cross_val_score(\n        model, X, y, cv=kf, n_jobs=-1, scoring=make_scorer(mape))\n    \n    model.fit(X_train,y)\n    train_score = mape(y, model.predict(X_train))\n    \n    print(\"#\"*100)\n    print(model)\n    print(f\"train shape {X.shape}\")\n    print(f\"cat_cols={cat_cols}\")\n    print(f\"num_cols={num_cols}\")\n    print(\"#\"*100)\n    print(f\"Train result: {train_score}\")\n    print(f'CV result: {np.mean(cv_results)} ({cv_results})')\n    print(\"#\"*100)\n\n\ndef make_submit_file(model, X_test, file_name='predict.csv'):\n    \"\"\"\u0437\u0430\u043f\u0438\u0448\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 \u0444\u0430\u0439\u043b, \u0433\u043e\u0442\u043e\u0432\u044b\u0439 \u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u043d\u0430 kaggle\"\"\"\n    pred = np.round(model.predict(X_test))\n    answer = pd.Series(pred, index=df[~df.is_train].sell_id, name='price')\n    answer.to_csv(file_name, index_label='sell_id')\n\n\ndef prepare_data(categorical_columns: list, numerical_columns: list):\n    \"\"\"\u0412\u044b\u0442\u0430\u0449\u0438\u043c \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 df\n    \u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c dummy \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\n    \u043a \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c \u0428\u043a\u0430\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\"\"\"\n    X = df.loc[:, categorical_columns+numerical_columns+['is_train']]\n\n    X = pd.get_dummies(X, columns=categorical_columns)\n    X[numerical_columns] = StandardScaler().fit_transform(X[numerical_columns])\n    \n    X_train = X[X.is_train == 1].drop('is_train', axis=1)\n    X_test = X[X.is_train == 0].drop('is_train', axis=1)\n\n    y = df[df.is_train].price\n\n    return X_train, X_test, y","1b157b8a":"def feature_enginering_version1(df: pd.DataFrame):\n    \"\"\"\u0437\u0430\u043f\u0438\u0448\u0435\u043c \u0441\u044e\u0434\u0430 \u0432\u0441\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u0430\u043b\u0438 \u0432 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0430\n    1) \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043b\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u043e\u043b\u0435 engineDisplacement \u0434\u043b\u044f \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043a\u0430\u0440\u043e\u0432\n    2) \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u0446\u0435\u043d\u044b\n    3) \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u0441\u0432\u0435\u0440\u043d\u0443\u0442\u0443\u044e \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0442\u0438\u043f \u043a\u0443\u0437\u043e\u0432\u0430 bodyType_cut\n    4) \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a enginePower_log - \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u043e\u0442 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\n    5) \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u0440\u043e\u0431\u0435\u0433 \u0440\u0430\u0432\u0435\u043d 0 mileage_is_0\n    6) \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u043e\u0442 \u043f\u0440\u043e\u0431\u0435\u0433\u0430\"\"\"\n    \n    df.loc[df.fuelType == '\u044d\u043b\u0435\u043a\u0442\u0440\u043e',\n           'engineDisplacement'] = df.loc[df.fuelType == '\u044d\u043b\u0435\u043a\u0442\u0440\u043e',\n                                          'engineDisplacement'].fillna(0)\n\n    df[\"price_log\"] = np.log(df[df.is_train==1].price)\n    \n    bodyTypes = {\n        '\u0432\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439': '\u0432\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a',\n        '\u0432\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a 5 \u0434\u0432.': '\u0432\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a',\n        '\u0441\u0435\u0434\u0430\u043d': '\u0441\u0435\u0434\u0430\u043d',\n        '\u043b\u0438\u0444\u0442\u0431\u0435\u043a': '\u0445\u044d\u0442\u0447\u0431\u0435\u043a',\n        '\u0445\u044d\u0442\u0447\u0431\u0435\u043a 5 \u0434\u0432.': '\u0445\u044d\u0442\u0447\u0431\u0435\u043a',\n        '\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b 5 \u0434\u0432.': '\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b',\n        '\u043c\u0438\u043d\u0438\u0432\u044d\u043d': '\u043c\u0438\u043d\u0438\u0432\u044d\u043d',\n        '\u043a\u0443\u043f\u0435': '\u043a\u0443\u043f\u0435',\n        '\u043a\u043e\u043c\u043f\u0430\u043a\u0442\u0432\u044d\u043d': '\u043c\u0438\u043d\u0438\u0432\u044d\u043d',\n        '\u0445\u044d\u0442\u0447\u0431\u0435\u043a 3 \u0434\u0432.': '\u0445\u044d\u0442\u0447\u0431\u0435\u043a',\n        '\u043f\u0438\u043a\u0430\u043f \u0434\u0432\u043e\u0439\u043d\u0430\u044f \u043a\u0430\u0431\u0438\u043d\u0430': '\u043f\u0438\u043a\u0430\u043f',\n        '\u0432\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a 3 \u0434\u0432.': '\u0432\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a',\n        '\u043a\u0443\u043f\u0435-\u0445\u0430\u0440\u0434\u0442\u043e\u043f': '\u043a\u0443\u043f\u0435',\n        '\u043a\u0430\u0431\u0440\u0438\u043e\u043b\u0435\u0442': '\u043a\u0430\u0431\u0440\u0438\u043e\u043b\u0435\u0442',\n        '\u0440\u043e\u0434\u0441\u0442\u0435\u0440': '\u0440\u043e\u0434\u0441\u0442\u0435\u0440',\n        '\u0444\u0443\u0440\u0433\u043e\u043d': '\u0444\u0443\u0440\u0433\u043e\u043d',\n        '\u043c\u0438\u043a\u0440\u043e\u0432\u044d\u043d': '\u043c\u0438\u043d\u0438\u0432\u044d\u043d',\n        '\u0441\u0435\u0434\u0430\u043d-\u0445\u0430\u0440\u0434\u0442\u043e\u043f': '\u0441\u0435\u0434\u0430\u043d',\n        '\u0441\u0435\u0434\u0430\u043d 2 \u0434\u0432.': '\u0441\u0435\u0434\u0430\u043d',\n        '\u043f\u0438\u043a\u0430\u043f \u043e\u0434\u0438\u043d\u0430\u0440\u043d\u0430\u044f \u043a\u0430\u0431\u0438\u043d\u0430': '\u043f\u0438\u043a\u0430\u043f',\n        '\u043b\u0438\u043c\u0443\u0437\u0438\u043d': '\u043b\u0438\u043c\u0443\u0437\u0438\u043d',\n        '\u043f\u0438\u043a\u0430\u043f \u043f\u043e\u043b\u0443\u0442\u043e\u0440\u043d\u0430\u044f \u043a\u0430\u0431\u0438\u043d\u0430': '\u043f\u0438\u043a\u0430\u043f',\n        '\u0432\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439': '\u0432\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a',\n        '\u0442\u0430\u0440\u0433\u0430': '\u0440\u043e\u0434\u0441\u0442\u0435\u0440',\n        '\u0444\u0430\u0441\u0442\u0431\u0435\u043a': '\u0445\u044d\u0442\u0447\u0431\u0435\u043a',\n        '\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b 3 \u0434\u0432.1': '\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b',\n    }\n    df['bodyType_cut'] = df.bodyType.map(bodyTypes)\n\n    df['enginePower_log'] = np.log(df.enginePower)\n\n    df['mileage_is_0'] = (df.mileage == 0)\n    df['mileage_log'] = np.log(df.mileage + 1)","788710b5":"feature_enginering_version1(df)","bb180045":"def feature_enginering_version2(df: pd.DataFrame):\n    \"\"\"\u0437\u0430\u043f\u0438\u0448\u0435\u043c \u0441\u044e\u0434\u0430 \u0432\u0441\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u0430\u043b\u0438 \u0432 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0430\n    1) \u0412 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 model_name_cut \u0432\u0441\u0435 \u0440\u0435\u0434\u043a\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043d\u0435 \u0432 \u0422\u041e\u041f 50) \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 RARE_MODEL\n    2) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 diff_date_model_production \u0438 diff_date_model_production_log\n    3) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0443\u044e \u043a\u043e\u043b\u043e\u043d\u043a\u0443 owners\n    4) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 own_time_is_na\"\"\"\n    \n    df.model_name = df.model_name.str.replace(' ', '_')\n    \n    df['model_name_cut_50'] = df.model_name\n    top_models = df.model_name.value_counts()[:50].index\n    df.loc[~df.model_name.isin(top_models), 'model_name_cut_50'] = 'RARE_MODEL'\n    \n    df['model_name_cut_450'] = df.model_name\n    top_models = df.model_name.value_counts()[:450].index\n    df.loc[~df.model_name.isin(top_models), 'model_name_cut_450'] = 'RARE_MODEL'\n    \n    df['diff_date_model_production'] = df.productionDate-df.modelDate\n    df['diff_date_model_production_log'] = np.log(df.diff_date_model_production-np.min(df.diff_date_model_production)+1)\n    \n    mask = (df['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] == '\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e') & (df.mileage == 0)\n    df.loc[mask, '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = \"\u041d\u043e\u0432\u0430\u044f \u043c\u0430\u0448\u0438\u043d\u0430\"\n    mask = (df['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] == '\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e') & (df.mileage != 0)\n    df.loc[mask, '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = \"2\\xa0\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430\"\n    \n    owners_map = {\n        '\u041d\u043e\u0432\u0430\u044f \u043c\u0430\u0448\u0438\u043d\u0430':0,\n        '1\\xa0\u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446':1,\n        '2\\xa0\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430':2,\n        '3 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435':3    \n    }\n    df['owners'] = df['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].map(owners_map)\n    \n    df['own_time_is_na'] = df['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'].isna()","4857a1de":"feature_enginering_version2(df)","d8c70863":"def parse_dict_column(row, column_name):\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0430\u0440\u0441\u0438\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u044f\u0447\u0435\u0439\u043a\u0435.\n    \u0415\u0441\u043b\u0438 \u044d\u0442\u043e train \u0441\u0442\u0440\u043e\u043a\u0430 \u0442\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e eval\n    \u0415\u0441\u043b\u0438 \u044d\u0442\u043e test - \u0442\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043c\u0435\u0442\u043e\u0434\u043e\u043c json.loads\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 dict \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f.\n    \u0418\u043b\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 None \u0435\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e, \u0438\u043b\u0438 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043f\u0443\u0441\u0442\u043e\u0439\"\"\"\n    if row[column_name] is np.nan:\n        value = None\n    elif row.is_train:\n        value = eval(row[column_name])\n    else:\n        value = json.loads(row[column_name])\n    \n    return value if value else None\n\ndef create_dataframe_from_json_column(df, column_name):\n    \"\"\"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438\u0437 \u043a\u043e\u043b\u043e\u043d\u043a\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f json(dict) \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \"\"\"\n    series_ = df.apply(partial(parse_dict_column, column_name=column_name), axis=1)\n    dataframe_ = series_.apply(pd.Series)\n    return dataframe_\n\ndef get_top100_equipment_features():\n    return [\n        'engine-proof', 'tinted-glass', 'airbag-driver', 'aux', 'isofix',\n        'electro-window-front', 'ashtray-and-cigarette-lighter',\n        'airbag-passenger', 'computer', 'high-beam-assist', 'seat-transformation',\n        'isofix-front', 'wheel-power', 'alarm', 'lock', 'door-sill-panel',\n        'fabric-seats', 'electro-mirrors', 'airbag-rear-side',\n        'electro-window-back', 'steel-wheels', 'ptf', '16-inch-wheels',\n        'rain-sensor', 'airbag-side', 'audiosystem-cd', 'dark-interior',\n        'cooling-box', 'condition', 'abs', 'power-child-locks-rear-doors',\n        'front-seats-heat', 'wheel-configuration2', 'wheel-configuration1',\n        '12v-socket', 'park-assist-r', 'cruise-control', 'asr', 'esp', 'usb',\n        'light-sensor', 'drl', 'alloy-wheel-disks', 'tyre-pressure',\n        'mirrors-heat', 'driver-seat-updown', 'wheel-heat', 'bluetooth', 'immo',\n        'windscreen-heat', 'climate-control-2', 'adaptive-light', 'multi-wheel',\n        'xenon', 'heated-wash-system', 'front-centre-armrest', 'body-mouldings',\n        'combo-interior', 'rear-seats-heat', 'knee-airbag', 'hcc',\n        'airbag-curtain', 'light-cleaner', 'leather-gear-stick', 'wheel-leather',\n        'auto-mirrors', 'third-rear-headrest', 'roller-blind-for-rear-window',\n        'spare-wheel', 'navigation', 'folding-front-passenger-seat',\n        'programmed-block-heater', 'passenger-seat-updown', 'sport-seats',\n        'front-seat-support', '18-inch-wheels', 'volume-sensor', 'hatch',\n        'music-super', 'automatic-lighting-control', 'paint-metallic',\n        'climate-control-1', 'roof-rails', '17-inch-wheels', 'sport-pedals', 'gbo',\n        'park-assist-f', 'feedback-alarm', 'passenger-seat-electric', 'leather',\n        'electro-trunk', 'driver-seat-memory', 'keyless-entry', 'rear-camera',\n        'led-lights', '15-inch-wheels', 'audiosystem-tv', 'seats-7', 'auto-park',\n        'apple-carplay'\n    ]\n\ndef feature_enginering_add_equipment_features(df):\n    \"\"\"\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u043d\u043e\u0432\u044b\u0435 \u0444\u0438\u0447\u0438 \u0438\u0437 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 equipment_dict, \u0432\u043e\u0437\u043c\u044c\u043c\u0435\u043c \u043d\u0435 \u0432\u0441\u0435 \u0430 \u0422\u041e\u041f 100 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\"\"\"\n    \n    equipment_dataframe = create_dataframe_from_json_column(df, 'equipment_dict')\n    equipment_dataframe.fillna(False, inplace=True)\n    \n    return pd.concat([df, equipment_dataframe[get_top100_equipment_features()]],\n          axis=1)","eaea7d5f":"%%time\ndf = feature_enginering_add_equipment_features(df)","911b5cb5":"cat_cols = ['bodyType', 'brand', 'fuelType', 'color', 'model_name',\n            'vehicleTransmission', 'vendor', '\u041f\u0422\u0421', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b', '\u041f\u0440\u0438\u0432\u043e\u0434', '\u0420\u0443\u043b\u044c'] \nnum_cols = ['productionDate', 'numberOfDoors',\n            'enginePower_log', 'mileage_log', 'diff_date_model_production'] + get_top100_equipment_features()","66c4172e":"X_train, X_test, y = prepare_data(cat_cols, num_cols)","1942bc57":"model = RandomForestRegressor(2000, random_state=RANDOM_STATE, verbose=True)","079b14f1":"%%time\nfit_and_score_model(model, X_train, y)","556cffb7":"make_submit_file(model, X_test, \"5.2_random_forest_2000.csv\") # 12.88","89d526c2":"# Car Price prediction\n\n**\u0410\u0432\u0442\u043e\u0440: \u0417\u0430\u0431\u043e\u043b\u043e\u0442\u0438\u043d \u0420\u043e\u043c\u0430\u043d <rzabolotin@gmail.com>**","f7a42627":"\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0431\u0440\u0430\u043d\u044b \u0438 \u0441\u0434\u0435\u043b\u0430\u043d\u0430 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0430\u044f \u043f\u0440\u0435\u0434\u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430.  \n\n\u0412 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u0432\u043a\u043b\u044e\u0447\u0438\u043b \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0443 \u043c\u043e\u0434\u0435\u043b\u044c, \u0447\u0442\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n\n\u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u044d\u0442\u0430\u043f\u044b (EDA, \u0432\u044b\u0431\u043e\u0440 \u043c\u043e\u0434\u0435\u043b\u0438, \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u0444\u0438\u0447) \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c [\u043c\u043e\u0451\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u043d\u0430 github](https:\/\/github.com\/rzabolotin\/skillfactory_DS\/tree\/main\/module_6_car_price_prediction)"}}