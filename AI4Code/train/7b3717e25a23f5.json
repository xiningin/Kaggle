{"cell_type":{"4918f23b":"code","9c44bcc0":"code","f39a9175":"code","354952fb":"code","3a49aec3":"code","02b647ed":"code","1d202092":"code","38e2eda4":"code","e1e01805":"code","69fd9672":"code","b1c3c915":"code","e1df07fe":"code","f6c58613":"code","ae71da0e":"code","34c8d544":"code","c5a8815f":"code","99a85c6f":"code","e84b5778":"code","397fe8dc":"code","1d3ac8d2":"code","e384b431":"code","10b8fb60":"code","f1163a5d":"code","a89c61b6":"code","564a5695":"code","a72cdc72":"code","fafcbfe9":"code","0ff4717e":"code","08030617":"code","66d0e89b":"code","3a9cee34":"code","98cfd6da":"code","48dfc15b":"code","12de452f":"code","e7822905":"code","48b178a6":"code","ca20eea8":"code","447b7410":"code","b5103f67":"code","7b8960c6":"code","2f6af452":"code","ff671a6f":"code","796ef2fa":"code","6de653ba":"code","64850751":"code","c7feda41":"code","04f5649e":"code","7870a282":"code","ba6d34e0":"markdown","f9ba009a":"markdown"},"source":{"4918f23b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9c44bcc0":"data = pd.read_csv('\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\ndata","f39a9175":"data.drop(columns = ['CustomerID'],inplace = True)","354952fb":"data.isnull().sum()","3a49aec3":"nom_col = [0]","02b647ed":"from sklearn.preprocessing import OneHotEncoder,OrdinalEncoder\nfrom sklearn.compose import make_column_transformer\nfrom sklearn import set_config\ntrans = make_column_transformer((OneHotEncoder(sparse = False),nom_col),\n                                remainder = 'passthrough')\nset_config(display = 'diagram')\ntrans","1d202092":"from sklearn.cluster import KMeans\nfrom sklearn.pipeline import make_pipeline\nalgorithm = KMeans(n_clusters = 3)\npipe = make_pipeline(trans,algorithm)","38e2eda4":"algorithm","e1e01805":"pipe","69fd9672":"pipe.fit(data)","b1c3c915":"algorithm.labels_","e1df07fe":"algorithm.cluster_centers_","f6c58613":"algorithm.n_iter_","ae71da0e":"from sklearn.cluster import KMeans\nkm = KMeans(n_clusters = 3)","34c8d544":"k = range(1,10)","c5a8815f":"data['Gender']= pd.get_dummies(data.Gender,drop_first = True)\nkm.fit(data)","99a85c6f":"km.labels_","e84b5778":"km.cluster_centers_","397fe8dc":"km.n_iter_","1d3ac8d2":"X=data","e384b431":"from sklearn.cluster import KMeans\nfrom sklearn import metrics\nfrom scipy.spatial.distance import cdist\nimport numpy as np\nimport matplotlib.pyplot as plt","10b8fb60":"distortions = []\ninertias = []\nmapping1 = {}\nmapping2 = {}\nK = range(1, 10)\n \nfor k in K:\n    # Building and fitting the model\n    kmeanModel = KMeans(n_clusters=k).fit(X)\n    kmeanModel.fit(X)\n \n    distortions.append(sum(np.min(cdist(X, kmeanModel.cluster_centers_,\n                                        'euclidean'), axis=1)) \/ X.shape[0])\n    inertias.append(kmeanModel.inertia_)\n \n    mapping1[k] = sum(np.min(cdist(X, kmeanModel.cluster_centers_,\n                                   'euclidean'), axis=1)) \/ X.shape[0]\n    mapping2[k] = kmeanModel.inertia_","f1163a5d":"for key, val in mapping1.items():\n    print(f'{key} : {val}')","a89c61b6":"plt.plot(K, distortions, 'bx-')\nplt.xlabel('Values of K')\nplt.ylabel('Distortion')\nplt.title('The Elbow Method using Distortion')\nplt.show()","564a5695":"for key, val in mapping2.items():\n    print(f'{key} : {val}')","a72cdc72":"plt.plot(K, inertias, 'bx-')\nplt.xlabel('Values of K')\nplt.ylabel('Inertia')\nplt.title('The Elbow Method using Inertia')\nplt.show()","fafcbfe9":"from sklearn.metrics import silhouette_score\nimport matplotlib.pyplot as plt","0ff4717e":"range_n_clusters = [2, 3, 4, 5, 6, 7, 8]\nsilhouette_avg = []\nfor num_clusters in range_n_clusters:\n \n # initialise kmeans\n kmeans = KMeans(n_clusters=num_clusters)\n kmeans.fit(data)\n cluster_labels = kmeans.labels_\n \n # silhouette score\n silhouette_avg.append(silhouette_score(data, cluster_labels))\nplt.barh(range_n_clusters,silhouette_avg)\nplt.xlabel('Values of K') \nplt.ylabel('Silhouette score') \nplt.title('Silhouette analysis For Optimal k')\nplt.show()","08030617":"silhouette_avg","66d0e89b":"silhouette_avg.index(max(silhouette_avg))           # 4th cluster fits the data very well ","3a9cee34":"silhouette_avg[silhouette_avg.index(max(silhouette_avg))] ","98cfd6da":"from sklearn.cluster import AgglomerativeClustering\nimport scipy.cluster.hierarchy as shc\ndend = shc.dendrogram(shc.linkage(data,method='ward'))","48dfc15b":"Ag = AgglomerativeClustering(n_clusters = 5)\npipe_Ag = make_pipeline(trans,Ag)\npipe_Ag","12de452f":"pipe_Ag.fit(data)","e7822905":"from sklearn.cluster import DBSCAN\nDb = DBSCAN(6,min_samples = 4)\npipe_Db = make_pipeline(trans,Db)\npipe_Db","48b178a6":"pipe_Db.fit(data)  ","ca20eea8":"Db.labels_    #-1 is noisy points","447b7410":"Db.labels_.max()","b5103f67":"Db.labels_","7b8960c6":"from sklearn.decomposition import PCA\npca = PCA(n_components = 2)\ndata_2 = pca.fit_transform(data)\ndata_2","2f6af452":"import seaborn as sns","ff671a6f":"sns.pairplot(data)","796ef2fa":"sns.jointplot(data_2[0],data_2[1])","6de653ba":"pca.components_","64850751":"pca.explained_variance_ratio_","c7feda41":"data","04f5649e":"from sklearn.decomposition import PCA\n\npca=PCA(n_components=2)\npc=pca.fit_transform(data)\n\npdf=pd.DataFrame(data=pc,columns=['principal component 1','principal component 2'])\ntarget=pd.DataFrame(km.labels_,columns=['target'])\ndata=pd.concat([pdf,target],axis=1)\ndata.head()","7870a282":"import matplotlib.pyplot as plt\n\nfig = plt.figure(figsize = (8,8))\nax = fig.add_subplot(1,1,1) \nax.set_xlabel('Principal Component 1', fontsize = 15)\nax.set_ylabel('Principal Component 2', fontsize = 15)\nax.set_title('Visualizing', fontsize = 20)\ntargets = [0,1,2]\ncolors = ['r', 'g','b']\nfor target, color in zip(targets,colors):\n    indicesToKeep = data['target'] == target\n    ax.scatter(data.loc[indicesToKeep,'principal component 1']\n               , data.loc[indicesToKeep,'principal component 2']\n               , c = color\n               , s = 50)\nax.legend(targets)\nax.grid()","ba6d34e0":"## INERTIA","f9ba009a":"## DISORTION"}}