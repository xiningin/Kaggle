{"cell_type":{"c1e4007f":"code","d9a1faaf":"code","a41396bb":"code","c03af421":"code","0fd09f90":"code","bb3561d1":"code","77aad69e":"code","5e36c3ac":"code","a3be56cc":"code","2bf759e2":"code","f22471e2":"code","b40fd7fd":"code","5b0b8739":"code","0a96fad8":"code","50626afe":"code","f0a2f217":"code","31e81000":"code","43765eb5":"code","1567e1ac":"code","43b99ffc":"code","dc7f7f6d":"code","ad20fffa":"code","39b36d34":"code","d7475f73":"code","b143f007":"code","27cc4705":"code","2029a02b":"markdown","1d889062":"markdown","6fe651c4":"markdown","ac9a86bf":"markdown","a8448206":"markdown","f087f5f5":"markdown","72ee6656":"markdown","d46a895d":"markdown","ff66b4c4":"markdown","f2fe01fe":"markdown","53b5bc80":"markdown","a318916f":"markdown","41e3f60e":"markdown","14efb4fc":"markdown","ab9c0247":"markdown","ea4b3c91":"markdown","169c1eb5":"markdown","879994a1":"markdown","14a400f8":"markdown","2d5df763":"markdown","37c1b2eb":"markdown","146c4d94":"markdown","aca44102":"markdown","0b1ab5c3":"markdown","ff647197":"markdown","5f0137ef":"markdown","849ea18e":"markdown","0d9851b1":"markdown"},"source":{"c1e4007f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nsns.set_style('whitegrid')\n\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d9a1faaf":"df = pd.read_csv('..\/input\/montcoalert\/911.csv') ","a41396bb":"df['zip'].value_counts().head(5)","c03af421":"df['twp'].value_counts().head(5)","0fd09f90":"df['title'].nunique()","bb3561d1":"df['Reason'] = df['title'].apply(lambda title: title.split(':')[0])","77aad69e":"df['Reason'].value_counts()","5e36c3ac":"sns.countplot(x='Reason',data=df,palette='viridis')","a3be56cc":"type(df['timeStamp'].iloc[0])","2bf759e2":"df['timeStamp'] = pd.to_datetime(df['timeStamp'])","f22471e2":"df['Hour'] = df['timeStamp'].apply(lambda time: time.hour)\ndf['Month'] = df['timeStamp'].apply(lambda time: time.month)\ndf['Day of Week'] = df['timeStamp'].apply(lambda time: time.dayofweek)","b40fd7fd":"dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\ndf['Day of Week'] = df['Day of Week'].map(dmap)","5b0b8739":"sns.countplot(x='Day of Week',data=df,hue='Reason',palette='viridis')","0a96fad8":"# To relocate the legend\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","50626afe":"sns.countplot(x='Month',data=df,hue='Reason',palette='viridis')","f0a2f217":"# To relocate the legend\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","31e81000":"byMonth = df.groupby('Month').count()\nbyMonth.head()","43765eb5":"# Could be any column\nbyMonth['twp'].plot()","1567e1ac":"sns.lmplot(x='Month',y='twp',data=byMonth.reset_index())","43b99ffc":"df['Date']=df['timeStamp'].apply(lambda t: t.date())","dc7f7f6d":"df.groupby('Date').count()['twp'].plot()\nplt.tight_layout()","ad20fffa":"df[df['Reason']=='Traffic'].groupby('Date').count()['twp'].plot()\nplt.title('Traffic')\nplt.tight_layout()\n\ndf[df['Reason']=='Fire'].groupby('Date').count()['twp'].plot()\nplt.title('Fire')\nplt.tight_layout()\n\ndf[df['Reason']=='EMS'].groupby('Date').count()['twp'].plot()\nplt.title('EMS')\nplt.tight_layout()","39b36d34":"dayHour = df.groupby(by=['Day of Week','Hour']).count()['Reason'].unstack()\ndayHour.head()","d7475f73":"plt.figure(figsize=(12,6))\nsns.heatmap(dayHour,cmap='viridis')","b143f007":"sns.clustermap(dayHour,cmap='viridis')","27cc4705":"dayMonth = df.groupby(by=['Day of Week','Month']).count()['Reason'].unstack()\ndayMonth.head()\n\nplt.figure(figsize=(12,6))\nsns.heatmap(dayMonth,cmap='viridis')\n\nsns.clustermap(dayMonth,cmap='viridis')","2029a02b":"> Take a look at the 'title' column, how many unique title codes are there?","1d889062":"Did you notice something strange about the Plot?\n> * It is missing some months! 9,10, and 11 are not there.\n","6fe651c4":"___\nNow let us begin to focus on time information. What is the data type of the objects in the timeStamp column?\n","ac9a86bf":"Now groupby this Date column with the count() aggregate and create a plot of counts of 911 calls.","a8448206":"Now create a HeatMap using this new DataFrame.","f087f5f5":"Now create a clustermap using this DataFrame.","72ee6656":">What are the top 5 zipcodes for 911 calls?","d46a895d":"> Now see if you can use seaborn's lmplot() to create a linear fit on the number of calls per month. Keep in mind you may need to reset the index to a column.","ff66b4c4":"Now repeat these same plots and operations, for a DataFrame that shows the Month as the column.","f2fe01fe":"Now recreate this plot but create 3 separate plots with each plot representing a Reason for the 911 call","53b5bc80":"## Basic Questions","a318916f":"Now use seaborn to create a countplot of 911 calls by Reason.","41e3f60e":">In the titles column there are \"Reasons\/Departments\" specified before the title code. These are EMS, Fire, and Traffic. Use .apply() with a custom lambda expression to create a new column called \"Reason\" that contains this string value.","14efb4fc":"Now do the same for Month:","ab9c0247":"Now use seaborn to create a countplot of the Day of Week column with the hue based off of the Reason column.","ea4b3c91":"> You should have seen that these timestamps are still strings. Use [pd.to_datetime](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.to_datetime.html) to convert the column from strings to DateTime objects.","169c1eb5":"What is the most common Reason for a 911 call based off of this new column?","879994a1":"Create a new column called 'Date' that contains the date from the timeStamp column. You'll need to use apply along with the .date() method.","14a400f8":"## Creating new features","2d5df763":"You can now grab specific attributes from a Datetime object by calling them. For example:\n> * time = df['timeStamp'].iloc[0]\n> * time.hour","37c1b2eb":"____\n> Now let's move on to creating  heatmaps with seaborn and our data. We'll first need to restructure the dataframe so that the columns become the Hours and the Index becomes the Day of the Week. There are lots of ways to do this, but I would recommend trying to combine groupby with an [unstack](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.unstack.html) method. Reference the solutions if you get stuck on this!\n","146c4d94":"> Notice how the Day of Week is an integer 0-6. Use the .map() with this dictionary to map the actual string names to the day of the week: dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}","aca44102":"> What are the top 5 townships (twp) for 911 calls?","0b1ab5c3":"For example, if the title column value is EMS: BACK PAINS\/INJURY , the Reason column value would be EMS.","ff647197":"> You should have noticed it was missing some Months, let's see if we can maybe fill in this information by plotting the information in another way, possibly a simple line plot that fills in the missing months, in order to do this, we'll need to do some work with pandas...","5f0137ef":"> You can use Jupyter's tab method to explore the various attributes you can call. Now that the timestamp column are actually DateTime objects, use .apply() to create 3 new columns called Hour, Month, and Day of Week. You will create these columns based off of the timeStamp column, reference the solutions if you get stuck on this step.","849ea18e":"## Data and Setup","0d9851b1":"Now create a gropuby object called byMonth, where you group the DataFrame by the month column and use the count() method for aggregation. Use the head() method on this returned DataFrame. "}}