{"cell_type":{"87a27855":"code","5626c684":"code","25823f0f":"code","f4a6b179":"code","1198c345":"code","3192caad":"code","bf2dafd4":"code","a5fd32ff":"code","4c99eb0a":"code","4b4935e6":"markdown","225d505c":"markdown","bc28a161":"markdown","235bc4cc":"markdown","dbf297b5":"markdown","474e6f83":"markdown","b3942a44":"markdown","1669e9ba":"markdown","6afd6635":"markdown"},"source":{"87a27855":"from pathlib import Path\n\nimport numpy as np\nimport pandas as pd\n\nfrom matplotlib import pyplot as plt\nimport seaborn\n%matplotlib inline","5626c684":"input_dir = Path('..\/input')\n\ntrain = pd.read_csv(input_dir \/ 'train.csv', index_col=0)\n\n# Split targets from inputs.\ntrain_targets = train[['target']].copy()\ntrain_inputs = train.drop('target', axis=1)\n\ntrain.head()","25823f0f":"test_inputs = pd.read_csv(input_dir \/ 'test.csv', index_col=0)\ntest_inputs.head()","f4a6b179":"#\u00a0Check dimensions\ntrain_inputs.shape, test_inputs.shape","1198c345":"fig, ax = plt.subplots(figsize=(15, 10))\n\n# Plot individual histograms.\nfor col in train_inputs:\n    x = train_inputs[col].values \n    freq, bins = np.histogram(x, bins=10)\n    ax.plot(bins[:-1], freq, color='gray', alpha=0.1)\n    \n# Plot normal distribution for shape comparison.\ndef gaussian(x, m=0, s=1, norm=1):\n    return norm * np.exp(-((x - m) ** 2) \/ s)\n\n# Range for plotting.\nminimum = train_inputs.values.min()\nmaximum = train_inputs.values.max()\nx = np.linspace(minimum, maximum, 10)\n\n# Handpicked values for illustration.\nmean = -0.25\nstdev = 2\nnorm = 55\ny = gaussian(x, m=mean, s=stdev, norm=norm)\nax.plot(x, y, color='r', label='Gaussian(-0.25, 2)')\n\nax.set_xlabel('Value')\nax.set_ylabel('Freq')\nax.set_title('Distribution of training variables')\nax.legend(loc='upper right')\nax.grid()\n","3192caad":"from scipy.stats import shapiro\n\n# Test for normality in each column using Shapiro-Wilks.\nnon_norm_cols = []\nfor col in train_inputs:\n    x = train_inputs[col].values\n    stat, pval = shapiro(x)\n    \n    if pval < 0.05:\n        print('P-val {0:.2f} ==> evidence column {1} not normally distributed'.format(pval, col))\n        non_norm_cols.append(col)\n        ","bf2dafd4":"fig, ax = plt.subplots(figsize=(15, 8))\ntrain_inputs[non_norm_cols].hist(ax=ax, bins=10);","a5fd32ff":"fig, ax = plt.subplots(figsize=(12, 10))\nseaborn.heatmap(train_inputs.corr(), cmap='bwr', vmin=-1, vmax=1, ax=ax)","4c99eb0a":"from sklearn.decomposition import PCA\n\n# Try different numbers of components and plot falloff in variance.\npca = PCA(n_components=200)\nx = train_inputs.values\nx_trans = pca.fit_transform(x)\nn_comps = list(range(0, 200))\nvar = []\n    \nfor n in n_comps:\n    var.append(pca.explained_variance_ratio_[:n].sum())\n    \nfig, ax = plt.subplots(figsize=(10, 5))\nax.plot(n_comps, var)\nax.set_xlabel('N components')\nax.set_ylabel('Sum of explained variance')\nax.set_title('Explained variance versus number of principle components')\nax.grid()","4b4935e6":"It is clear there are no strong linear correlations between any of the columns. Thus, it seems that the training inputs represent 250 samples from something like a multivariate Gaussian distribution, where each dimension is independent of the others. In other words, we have 250 samples of 300 iid Gaussian random variables.","225d505c":"## Dimensionality reduction\nThe biggest obstacle to overcome is the high dimensionality relative to the number of samples; it seems sensible to try and reduce the dimensionality if we are to train any type of model given the data we have available.\n\nSee how the total explained variance changes with number of principle components in PCA.","bc28a161":"## Collinearity\nFor completeness, check for linear correlations (Pearson) and plot a heatmap.","235bc4cc":"# Overview\nThis notebook creates a model from a training dataset of 250 samples of 300 variables with binary labels and generates predictions for a dataset of nearly 20,000 samples.","dbf297b5":"# Exploration\nUnderstand the properties of the data and gather information that can be leveraged for modelling.\n\n## Distributions\nLook at the distributions of variables and test for normality.","474e6f83":"# Load data\nGet the data from the csv's provide by Kaggle (clone using the API command `kaggle competitions download dont-overfit-ii`).","b3942a44":"Just from looking at the plots, it is pretty clear why the distributions returns a significant Shapiro-Wilks. However, since they are not too far away from a normal distribution (i.e. they are generally peaked about a mean and fall off to either side), we shall ignore these for now and consider all of the variables to be approximately Guassian.","1669e9ba":"A fairly naive approach of putting a Guassian (with some hand picked parameters) over the top seems to get a fairly reasonable approximation for the average shape of the distributions; but, there are clearly quite a few variables where this gives a poor approximation.","6afd6635":"So there's reason to believe most of the columns approximately follow a normal distribution. Lets look at the ones with evidence to the contrary."}}