{"cell_type":{"bb4f90fb":"code","866e93a6":"code","4ec1edcc":"code","10fd823a":"code","ce2ba7ea":"code","28bdc1a6":"code","d68fdf79":"code","4a24e1d4":"code","8edfe0c9":"code","22bd7c3c":"code","5a2d1bf8":"code","469ad9e7":"markdown","70b0a111":"markdown","d6b0d3e2":"markdown","09f55401":"markdown","a7975739":"markdown","95e485f9":"markdown","75bc6b50":"markdown"},"source":{"bb4f90fb":"!pip install -U torch==1.4+cu100 torchvision==0.5+cu100 -f https:\/\/download.pytorch.org\/whl\/torch_stable.html \n!pip install cython pyyaml==5.1\n!pip install -U 'git+https:\/\/github.com\/cocodataset\/cocoapi.git#subdirectory=PythonAPI'\nimport torch, torchvision\ntorch.__version__\n!gcc --version","866e93a6":"# install detectron2:\n!pip install detectron2 -f https:\/\/dl.fbaipublicfiles.com\/detectron2\/wheels\/cu100\/index.html","4ec1edcc":"import detectron2\nfrom detectron2.utils.logger import setup_logger\nsetup_logger()\n\n# import some common libraries\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\n# import some common detectron2 utilities\nfrom detectron2 import model_zoo\nfrom detectron2.engine import DefaultPredictor\nfrom detectron2.config import get_cfg\nfrom detectron2.utils.visualizer import Visualizer\nfrom detectron2.data import MetadataCatalog","10fd823a":"!ls microcontroller-detection","ce2ba7ea":"import pandas as pd\n\ndf = pd.read_csv('..\/input\/microcontroller-detection\/Microcontroller Detection\/train_labels.csv')\n\ndf.head()","28bdc1a6":"import os\nimport numpy as np\nimport json\nfrom detectron2.structures import BoxMode\nimport itertools\nimport cv2\n\n# write a function that loads the dataset into detectron2's standard format\ndef get_microcontroller_dicts(csv_file, img_dir):\n    df = pd.read_csv(csv_file)\n    df['filename'] = df['filename'].map(lambda x: img_dir+x)\n\n    classes = ['Raspberry_Pi_3', 'Arduino_Nano', 'ESP8266', 'Heltec_ESP32_Lora']\n\n    df['class_int'] = df['class'].map(lambda x: classes.index(x))\n\n    dataset_dicts = []\n    for filename in df['filename'].unique().tolist():\n        record = {}\n        \n        height, width = cv2.imread(filename).shape[:2]\n        \n        record[\"file_name\"] = filename\n        record[\"height\"] = height\n        record[\"width\"] = width\n\n        objs = []\n        for index, row in df[(df['filename']==filename)].iterrows():\n          obj= {\n              'bbox': [row['xmin'], row['ymin'], row['xmax'], row['ymax']],\n              'bbox_mode': BoxMode.XYXY_ABS,\n              'category_id': row['class_int'],\n              \"iscrowd\": 0\n          }\n          objs.append(obj)\n        record[\"annotations\"] = objs\n        dataset_dicts.append(record)\n    return dataset_dicts","d68fdf79":"from detectron2.data import DatasetCatalog, MetadataCatalog\n\nclasses = ['Raspberry_Pi_3', 'Arduino_Nano', 'ESP8266', 'Heltec_ESP32_Lora']\n\nfor d in [\"train\", \"test\"]:\n    DatasetCatalog.register('microcontroller\/' + d, lambda d=d: get_microcontroller_dicts('..\/input\/microcontroller-detection\/Microcontroller Detection\/' + d + '_labels.csv', '..\/input\/microcontroller-detection\/Microcontroller Detection\/' + d+'\/'))\n    MetadataCatalog.get('microcontroller\/' + d).set(thing_classes=classes)\nmicrocontroller_metadata = MetadataCatalog.get('microcontroller\/train')","4a24e1d4":"import random\nfrom detectron2.utils.visualizer import Visualizer\n\ndataset_dicts = DatasetCatalog.get('microcontroller\/train')\nfor d in random.sample(dataset_dicts, 10):\n    img = cv2.imread(d[\"file_name\"])\n    v = Visualizer(img[:, :, ::-1], metadata=microcontroller_metadata, scale=0.5)\n    v = v.draw_dataset_dict(d)\n    plt.figure(figsize = (14, 10))\n    plt.imshow(cv2.cvtColor(v.get_image()[:, :, ::-1], cv2.COLOR_BGR2RGB))\n    plt.show()","8edfe0c9":"from detectron2.engine import DefaultTrainer\nfrom detectron2.config import get_cfg\n\ncfg = get_cfg()\ncfg.merge_from_file(model_zoo.get_config_file(\"COCO-Detection\/faster_rcnn_R_101_FPN_3x.yaml\"))\ncfg.DATASETS.TRAIN = ('microcontroller\/train',)\ncfg.DATASETS.TEST = ()   # no metrics implemented for this dataset\ncfg.DATALOADER.NUM_WORKERS = 2\ncfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url(\"COCO-Detection\/faster_rcnn_R_101_FPN_3x.yaml\")\ncfg.SOLVER.IMS_PER_BATCH = 2\ncfg.SOLVER.MAX_ITER = 1000\ncfg.MODEL.ROI_HEADS.NUM_CLASSES = 4\n\nos.makedirs(cfg.OUTPUT_DIR, exist_ok=True)\ntrainer = DefaultTrainer(cfg) \ntrainer.resume_or_load(resume=False)\ntrainer.train()","22bd7c3c":"cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, \"model_final.pth\")\ncfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5   # set the testing threshold for this model\ncfg.DATASETS.TEST = ('microcontroller\/test', )\npredictor = DefaultPredictor(cfg)","5a2d1bf8":"from detectron2.utils.visualizer import ColorMode\nimport random\n\ndataset_dicts = DatasetCatalog.get('microcontroller\/test')\nfor d in random.sample(dataset_dicts, 5):    \n    im = cv2.imread(d[\"file_name\"])\n    outputs = predictor(im)\n    v = Visualizer(im[:, :, ::-1], metadata=microcontroller_metadata, scale=0.8)\n    v = v.draw_instance_predictions(outputs[\"instances\"].to(\"cpu\"))\n    plt.figure(figsize = (14, 10))\n    plt.imshow(cv2.cvtColor(v.get_image()[:, :, ::-1], cv2.COLOR_BGR2RGB))\n    plt.show()","469ad9e7":"## Register data-set\n\nIn order to use a dataset with Detectron2 we need to register it. For more information check out the [official documentation](https:\/\/detectron2.readthedocs.io\/tutorials\/datasets.html#register-a-dataset).","70b0a111":"## Use model for inference\n\nNow, we can perform inference on our validation set by creating a predictor object.","d6b0d3e2":"We can check if our code works correctly by plotting a few images.","09f55401":"# Detectron2 Detect Microcontrollers","a7975739":"## Get data","95e485f9":"## Train model\n\nNow, let's fine-tune a pretrained FasterRCNN object detection model to detect the different microcontrollers.","75bc6b50":"## Install detectron2"}}