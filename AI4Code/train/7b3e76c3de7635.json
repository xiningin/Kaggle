{"cell_type":{"658ee0a9":"code","f60aefc1":"code","50021fe5":"code","b91143c1":"code","54fa099e":"code","f5672cc1":"code","e8d126b5":"code","6ae4ced9":"code","59161b30":"code","7e739507":"code","cf788cba":"code","08742ee8":"code","f98359c5":"code","f55aa22d":"code","9e08fbed":"code","2f5c1073":"code","8d78f882":"code","7ee9e208":"code","4d1d5f80":"code","11d1ffc6":"code","b6d0043c":"code","0587451e":"code","cba25747":"code","61cf1948":"code","21fb7fb5":"code","a681d272":"code","9511d2f7":"code","b2b20e00":"code","0f7b84ea":"code","93d2883e":"code","471b4094":"code","673150d8":"code","207fe657":"code","57123b60":"code","7cc8822c":"code","fff5074b":"code","3a77ec1e":"markdown","ad7aad17":"markdown","28f1107c":"markdown","86dea9dc":"markdown","63e84d3f":"markdown","7cbeda72":"markdown","f213e11c":"markdown","ca1f68ce":"markdown","f19d4106":"markdown","322f4f12":"markdown","42523bd7":"markdown","be1ce566":"markdown","e8618145":"markdown","888264e1":"markdown","e6c4d94c":"markdown","9dd59e3f":"markdown","fa3af5b1":"markdown","60caa9a4":"markdown","4f86eff2":"markdown","562e51d8":"markdown","cbb79fec":"markdown","ea2aac10":"markdown","cf11b4a6":"markdown","6c6971c2":"markdown","dd1a161c":"markdown","176b140f":"markdown","45e19bba":"markdown"},"source":{"658ee0a9":"!pip install pyspark","f60aefc1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\nimport random\nimport os\n\nfrom pyspark.sql import SparkSession \nfrom pyspark.ml  import Pipeline     \nfrom pyspark.sql import SQLContext  \nfrom pyspark.sql.functions import mean,col,split, col, regexp_extract, when, lit\nfrom pyspark.ml.feature import StringIndexer, VectorAssembler\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\nfrom pyspark.ml.feature import QuantileDiscretizer","50021fe5":"# Create SparkSession\nspark = SparkSession.builder.appName('recommender_system').getOrCreate()","b91143c1":"# load the dataset and create sprk dataframe\ndf=spark.read.csv('..\/input\/movierating\/movie_ratings_df.csv',inferSchema=True,header=True)\n# Using limit(), or select() or show() to view the data. I often use limit()\n# Using toPandas() method to return Pyspark DataFrame as Pandas table\ndf.limit(3).toPandas()","54fa099e":"df.printSchema()","f5672cc1":"from pyspark.ml.feature import StringIndexer, IndexToString\nstringIndexer = StringIndexer(inputCol='title', outputCol='title_new')\n# Applying stringindexer object on dataframe movie title column\nmodel = stringIndexer.fit(df)\n#creating new dataframe with transformed values\nindexed = model.transform(df)\n#validate the numerical title values\nindexed.limit(5).toPandas()","e8d126b5":"# split the data into training and test datatset\ntrain, test = indexed.randomSplit([0.75,0.25])\nfrom pyspark.ml.recommendation import ALS\n\n#Training the recommender model using train datatset\nrec=ALS( maxIter=10\n        ,regParam=0.01\n        ,userCol='userId'\n        ,itemCol='title_new'\n        ,ratingCol='rating'\n        ,nonnegative=True\n        ,coldStartStrategy=\"drop\")\n\n#fit the model on train set\nrec_model=rec.fit(train)\n\n#making predictions on test set \npredicted_ratings=rec_model.transform(test)\npredicted_ratings.limit(5).toPandas()","6ae4ced9":"# Importing Regression Evaluator to measure RMSE\nfrom pyspark.ml.evaluation import RegressionEvaluator\n# create Regressor evaluator object for measuring accuracy\nevaluator=RegressionEvaluator(metricName='rmse',predictionCol='prediction',labelCol='rating')\n# apply the RE on predictions dataframe to calculate RMSE\nrmse=evaluator.evaluate(predicted_ratings)\n# print RMSE error\nprint(rmse)","59161b30":"# First we need to create dataset of all distinct movies \nunique_movies=indexed.select('title_new').distinct()\n\n#create function to recommend top 'n' movies to any particular user\ndef top_movies(user_id,n):\n    \"\"\"\n    This function returns the top 'n' movies that user has not seen yet but might like \n    \n    \"\"\"\n    #assigning alias name 'a' to unique movies df\n    a = unique_movies.alias('a')\n    \n    #creating another dataframe which contains already watched movie by active user \n    watched_movies=indexed.filter(indexed['userId'] == user_id).select('title_new')\n    \n    #assigning alias name 'b' to watched movies df\n    b=watched_movies.alias('b')\n    \n    #joining both tables on left join \n    total_movies = a.join(b, a.title_new == b.title_new,how='left')\n    \n    #selecting movies which active user is yet to rate or watch\n    remaining_movies=total_movies.where(col(\"b.title_new\").isNull()).select(a.title_new).distinct()\n    \n    \n    #adding new column of user_Id of active useer to remaining movies df \n    remaining_movies=remaining_movies.withColumn(\"userId\",lit(int(user_id)))\n    \n    \n    #making recommendations using ALS recommender model and selecting only top 'n' movies\n    recommendations=rec_model.transform(remaining_movies).orderBy('prediction',ascending=False).limit(n)\n    \n    \n    #adding columns of movie titles in recommendations\n    movie_title = IndexToString(inputCol=\"title_new\", outputCol=\"title\",labels=model.labels)\n    final_recommendations=movie_title.transform(recommendations)\n    \n    #return the recommendations to active user\n    return final_recommendations.show(n,False)","7e739507":"# Test: recommend 5 movies for user of id=60\ntop_movies(60,5)","cf788cba":"# Firstly we create sparkSession (like a container)\nspark = SparkSession.builder.appName('Play with pyspark ML on titatic_dataset').getOrCreate()\n# After creating spark, we use spark.read.csv to read dataset, like pandas.read_csv\ndf = spark.read.csv('..\/input\/titanic\/train.csv',header = 'True',inferSchema='True')","08742ee8":"df.limit(3).toPandas()","f98359c5":"df.printSchema()","f55aa22d":"pandas_df = df.toPandas()\n\nplt.figure(figsize=(10,5))\nplt.title('Age distribution among all Pasengers')\nsns.distplot(pandas_df['Age']);","9e08fbed":"from pyspark.sql.functions import isnan, when, count, col\ndf.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) for c in df.columns]).show()","2f5c1073":"# Because Cabin column has a lot missing value ( > 50%) so we can remove it\ndf = df.drop(\"Cabin\")","8d78f882":"df = df.withColumn(\"Initial\",regexp_extract(col(\"Name\"),\"([A-Za-z]+)\\.\",1))\ndf.limit(3).toPandas()","7ee9e208":"# There are some misspelled Initials like Mlle or Mme that stand for Miss. we will replace them with Miss and same thing for other values.\ndf = df.replace(['Mlle','Mme', 'Ms', 'Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],\n                        ['Miss','Miss','Miss','Mr','Mr',  'Mrs',  'Mrs',  'Other',  'Other','Other','Mr','Mr','Mr'])\n\n# Checking the average age by Initials\ndf.groupby('Initial').avg('Age').collect()","4d1d5f80":"# Assigning missing values in age feature based on average age of Initials\ndf = df.withColumn(\"Age\",when((df[\"Initial\"] == \"Miss\")   & (df[\"Age\"].isNull()), 22).otherwise(df[\"Age\"]))\ndf = df.withColumn(\"Age\",when((df[\"Initial\"] == \"Other\")  & (df[\"Age\"].isNull()), 46).otherwise(df[\"Age\"]))\ndf = df.withColumn(\"Age\",when((df[\"Initial\"] == \"Master\") & (df[\"Age\"].isNull()), 5).otherwise( df[\"Age\"]))\ndf = df.withColumn(\"Age\",when((df[\"Initial\"] == \"Mr\")     & (df[\"Age\"].isNull()), 33).otherwise(df[\"Age\"]))\ndf = df.withColumn(\"Age\",when((df[\"Initial\"] == \"Mrs\")    & (df[\"Age\"].isNull()), 36).otherwise(df[\"Age\"]))","11d1ffc6":"# Embarked columns has two missing values, let check it\ndf.groupBy(\"Embarked\").count().show()","b6d0043c":"# As we can see, Majority Passengers boarded from \"S\". We can assign missing value with \"S\"\ndf = df.na.fill({\"Embarked\" : 'S'})\n# Check again the missing value status\ndf.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) for c in df.columns]).show()","0587451e":"df = df.withColumn(\"Family_Size\",col('SibSp')+col('Parch')) # Create new column: Family_size\ndf = df.withColumn('Alone',lit(0))  # Create new column: Alone and assign 0 default value to Alone column\ndf = df.withColumn(\"Alone\",when(df[\"Family_Size\"] == 0, 1).otherwise(df[\"Alone\"]))\n\n# converting Sex, Embarked & Initial columns from string to number using StringIndexer\nindexers = [StringIndexer(inputCol=column, outputCol=column+\"_index\").fit(df) for column in [\"Sex\",\"Embarked\",\"Initial\"]]\npipeline = Pipeline(stages=indexers)\ndf = pipeline.fit(df).transform(df)","cba25747":"df.limit(3).toPandas()","61cf1948":"# Now we drop columns that not needed for modelling\ndf = df.drop(\"PassengerId\",\"Name\",\"Ticket\",\"Cabin\",\"Embarked\",\"Sex\",\"Initial\")\n\n# Before modelling in Pyspark, we need to put all features to Vector using Pyspark VectorAssembler\nfeature = VectorAssembler(inputCols = df.columns[1:],outputCol=\"features\")\nfeature_vector= feature.transform(df)\nfeature_vector.limit(3).toPandas()","21fb7fb5":"# for data split in pyspark, we can use df.randomSplit()\n(train_df, test_df) = feature_vector.randomSplit([0.8, 0.2],seed = 11)","a681d272":"train_df.printSchema()","9511d2f7":"# Select features column for features training and 'Survived' as label to predict\ntitanic_df = feature_vector.select(['features','Survived'])\n# Split the dataset to train_df and test_df\ntrain_df,test_df = titanic_df.randomSplit([0.75,0.25])","b2b20e00":"# LOAD PYSPARK LIBRARIES\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.ml.tuning import ParamGridBuilder, TrainValidationSplit\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.evaluation import BinaryClassificationEvaluator\nfrom pyspark.ml.tuning import CrossValidator, ParamGridBuilder\nfrom sklearn.metrics import roc_curve,auc\n\n# DEFINE ALGORITHM \nlr = LogisticRegression(labelCol=\"Survived\")\n\n# DEFINE GRID PARAMETERS\nparamGrid = ParamGridBuilder().addGrid(lr.regParam, (0.01, 0.1))\\\n                              .addGrid(lr.maxIter, (5, 10))\\\n                              .addGrid(lr.tol, (1e-4, 1e-5))\\\n                              .addGrid(lr.elasticNetParam, (0.25,0.75))\\\n                              .build()\n\n# DEFINE CROSS VALIDATION WITH PARAMETERS\ntvs = TrainValidationSplit( estimator=lr\n                           ,estimatorParamMaps=paramGrid\n                           ,evaluator=MulticlassClassificationEvaluator(labelCol='Survived')\n                           ,trainRatio=0.8)\nmodel = tvs.fit(train_df)\nmodel_predictions= model.transform(test_df)\n\nprint('Accuracy: ', MulticlassClassificationEvaluator(labelCol='Survived',metricName='accuracy').evaluate(model_predictions))\nprint('Precision: ',MulticlassClassificationEvaluator(labelCol='Survived',metricName='weightedPrecision').evaluate(model_predictions))\n","0f7b84ea":"from pyspark.mllib.evaluation import BinaryClassificationMetrics as metric\nfrom pyspark import SparkContext\nsc =SparkContext.getOrCreate()   # We need to create SparkContext\nresults = model_predictions.select(['probability', 'Survived'])\n \n## prepare score-label set\nresults_collect = results.collect()\nresults_list = [(float(i[0][0]), 1.0-float(i[1])) for i in results_collect]\nscoreAndLabels = sc.parallelize(results_list)\n \nmetrics = metric(scoreAndLabels)\nprint(\"The ROC score is : \", metrics.areaUnderROC)","93d2883e":"from sklearn.metrics import roc_curve, auc\n \nfpr = dict()\ntpr = dict()\nroc_auc = dict()\n \ny_test = [i[1] for i in results_list]\ny_score = [i[0] for i in results_list]\n \nfpr, tpr, _ = roc_curve(y_test, y_score)\nroc_auc = auc(fpr, tpr)\n \n%matplotlib inline\nplt.figure()\nplt.plot(fpr, tpr, label='ROC curve (area = %0.2f)' % roc_auc)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Area under the ROC Curve')\nplt.legend(loc=\"lower right\")\nplt.show()","471b4094":"\nfrom pyspark.ml.classification import RandomForestClassifier\nfrom pyspark.ml.tuning import ParamGridBuilder, TrainValidationSplit\nrf = RandomForestClassifier(labelCol='Survived')\nparamGrid = ParamGridBuilder()\\\n                                .addGrid(rf.maxDepth, [5, 10, 20]) \\\n                                .addGrid(rf.maxBins, [20, 32, 50]) \\\n                                .addGrid(rf.numTrees, [20, 40, 60 ]) \\\n                                .addGrid(rf.impurity, [\"gini\", \"entropy\"]) \\\n                                .addGrid(rf.minInstancesPerNode, [1, 5, 10]) \\\n                                .build()\n\n\ntvs = TrainValidationSplit( estimator=rf\n                           ,estimatorParamMaps=paramGrid\n                           ,evaluator=MulticlassClassificationEvaluator(labelCol='Survived')\n                           ,trainRatio=0.8)\nmodel = tvs.fit(train_df)\nmodel_predictions= model.transform(test_df)\n\n\nprint('Accuracy: ', MulticlassClassificationEvaluator(labelCol='Survived',metricName='accuracy').evaluate(model_predictions))\nprint('Precision: ',MulticlassClassificationEvaluator(labelCol='Survived',metricName='weightedPrecision').evaluate(model_predictions))","673150d8":"sc =SparkContext.getOrCreate()   # We need to create SparkContext\nresults = model_predictions.select(['probability', 'Survived'])\n \n## prepare score-label set\nresults_collect = results.collect()\nresults_list = [(float(i[0][0]), 1.0-float(i[1])) for i in results_collect]\nscoreAndLabels = sc.parallelize(results_list)\n \nmetrics = metric(scoreAndLabels)\nprint(\"The ROC score is : \", metrics.areaUnderROC)","207fe657":"fpr = dict()\ntpr = dict()\nroc_auc = dict()\n \ny_test = [i[1] for i in results_list]\ny_score = [i[0] for i in results_list]\n \nfpr, tpr, _ = roc_curve(y_test, y_score)\nroc_auc = auc(fpr, tpr)\n \n%matplotlib inline\nplt.figure()\nplt.plot(fpr, tpr, label='ROC curve (area = %0.2f)' % roc_auc)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Area under the ROC Curve')\nplt.legend(loc=\"lower right\")\nplt.show()","57123b60":"\n# from pyspark.ml.classification import GBTClassifier\n# gbt = GBTClassifier(labelCol=\"Survived\")\n# paramGrid = ParamGridBuilder()\\\n#                             .addGrid(gbt.maxDepth, [5, 10, 20]) \\\n#                             .addGrid(gbt.maxBins, [20, 32, 50]) \\\n#                             .addGrid(gbt.maxIter, [10, 20, 30]) \\\n#                             .addGrid(gbt.minInstancesPerNode, [1, 5, 10]) \\\n#                             .build()\n    \n# tvs = TrainValidationSplit(estimator=gbt\n#                            , estimatorParamMaps=paramGrid\n#                             ,evaluator=MulticlassClassificationEvaluator(labelCol='Survived')\n#                             ,trainRatio=0.8)\n# model = tvs.fit(train_df)\n# model_predictions= model.transform(test_df)\n# print('Accuracy: ', MulticlassClassificationEvaluator(labelCol='Survived',metricName='accuracy').evaluate(model_predictions))\n# print('Precision: ',MulticlassClassificationEvaluator(labelCol='Survived',metricName='weightedPrecision').evaluate(model_predictions))\n","7cc8822c":"# sc =SparkContext.getOrCreate()   # We need to create SparkContext\n# results = model_predictions.select(['probability', 'Survived'])\n \n# ## prepare score-label set\n# results_collect = results.collect()\n# results_list = [(float(i[0][0]), 1.0-float(i[1])) for i in results_collect]\n# scoreAndLabels = sc.parallelize(results_list)\n \n# metrics = metric(scoreAndLabels)\n# print(\"The ROC score is: \", metrics.areaUnderROC)","fff5074b":"# fpr = dict()\n# tpr = dict()\n# roc_auc = dict()\n \n# y_test = [i[1] for i in results_list]\n# y_score = [i[0] for i in results_list]\n \n# fpr, tpr, _ = roc_curve(y_test, y_score)\n# roc_auc = auc(fpr, tpr)\n \n# %matplotlib inline\n# plt.figure()\n# plt.plot(fpr, tpr, label='ROC curve (area = %0.2f)' % roc_auc)\n# plt.plot([0, 1], [0, 1], 'k--')\n# plt.xlim([0.0, 1.0])\n# plt.ylim([0.0, 1.05])\n# plt.xlabel('False Positive Rate')\n# plt.ylabel('True Positive Rate')\n# plt.title('Area under the ROC Curve')\n# plt.legend(loc=\"lower right\")\n# plt.show()","3a77ec1e":"## Logistic regression","ad7aad17":"### Visualizing AUC metrics","28f1107c":"Spark aims at light_speed, ease-of-use, extensibility in very large data system. Companies with large data center often deploy model on Spark in order to get the robust and scalable benefit on production level.\nSpark has introduced high-level APIs in Java, Scala, Python, and R. \nI use Pyspark for the familiarity. \n\n![Spark-in-Big-Data-Pipeline.png](attachment:Spark-in-Big-Data-Pipeline.png)\n\nThis kernel focusing on <font color=\"red\"><b>Data processing<\/b><\/font> in  PySparkSQL\/DataFrame and <font color=\"red\"><b>modelling<\/b><\/font> with Spark Machine learning (Mlib) library.\n\n\nThank you for reading my work and hoping you like it","86dea9dc":"## Gradient Boosted Tree\n\nIf you want to run the below part, just uncomment it. I dit it in order to reduce the time of committing the kernel.","63e84d3f":"### For visualization,before using visual library (matplotlib, seaborn, ..)we need to convert SparkDataframe to PandasDataFrame ","7cbeda72":"### Evaluating ROC metric","f213e11c":"### We using PysparkDataFrame.na.fill() to fill a value to specific column","ca1f68ce":"### As we can see, the title column is stored as string type. To work with pyspark Mlib library, we need to convert string type to numeric values","f19d4106":"<a class=\"anchor\" id=\"0.1\"><\/a>\n\n# **Table of Contents**\n\n\n1.\t[Movie Recommendation with Pyspark](#1)\n2.\t[Classification model in Pyspark](#2)\n    - 2.1\t[EDA in Pyspark](#2.1)\n    - 2.2   [Machine learning in Pyspark](#2.2)","322f4f12":"### Visualizing AUC metrics","42523bd7":"### We use Alternating least squares (ALS) algorithm in Pyspark Ml library for recommendation. To read more, you can visit at https:\/\/spark.apache.org\/docs\/2.2.0\/ml-collaborative-filtering.html","be1ce566":"To replace these NaN values, we can assign them the mean age of the dataset.But the problem is, there were many people with many different ages. \n\nIn 'Name' feature, we can see that the names have a salutation like Mr or Mrs. Thus we can assign the mean values of Mr and Mrs to the respective groups\n\n**Using the Regex \"\"[A-Za-z]+).\" we extract the initials from the Name. It looks for strings which lie between A-Z or a-z and followed by a .(dot).**","e8618145":"## **2.2 Machine learning in pyspark** <a class=\"anchor\" id=\"2.2\"><\/a>\n\n[Go back to table of contents](#0.1)\n\n\n### Just for practising, I'll use some of learning algorithm\n\n1. LogisticRegression\n \n1. RandomForestClassifier\n\n1. Gradient-boosted tree classifier ","888264e1":"### Pyspark.toPandas() method allow us to return SparkDataFrame as Pandas table display","e6c4d94c":"### After training, now is the time to recommend top movies which user might like ","9dd59e3f":"### Evaluating ROC metrics","fa3af5b1":"## **2.1 EDA in Pyspark** <a class=\"anchor\" id=\"2.1\"><\/a>\n\n[Go back to table of contents](#0.1)","60caa9a4":"### Evaluating ROC metric","4f86eff2":"## Our task: given a user, we predict and return a list of movies recommendation for that user to watch.\n\n### We use: **printSchema()** to quick overview of features datatype","562e51d8":"# **1. Movie Recommendation with Pyspark** <a class=\"anchor\" id=\"1\"><\/a>\n\n[Go back to table of contents](#0.1)\n\nFirstly, We need to create a spark container by calling SparkSession. This step is necessary before doing anything","cbb79fec":"## Random Forest","ea2aac10":"I hope you find this notebook beneficial and enjoyable","cf11b4a6":"### Evaluate the training","6c6971c2":"## Checking null values in Pyspark\n\n* isnan() is a function of the pysparq.sql.function package, we have to set which column we want to use as an argument of the function. \n* isNull()\" belongs to pyspark.sql.Column package, to check the null status of a column\n\nTo check null in Pyspark, we use both function above","dd1a161c":"### Visualizing AUC metrics","176b140f":"# **2. Classification model in Pyspark** <a class=\"anchor\" id=\"2\"><\/a>\n\n[Go back to table of contents](#0.1)\n\nWe using Titanic dataset for familiar playing with data based on Pyspark DataFrame","45e19bba":"#### After handling missing values, we do some simple feature engineering\n#### in Feature engineering, we can use Pyspark multiple condition with syntax: \"When otherwise\"\n#### To learn more about multiple condition in pyspark, you can visit at https:\/\/sparkbyexamples.com\/spark\/spark-case-when-otherwise-example\/"}}