{"cell_type":{"8531c610":"code","63350b2d":"code","423bf3b2":"code","c20b8b79":"code","8c6c282e":"code","984670ab":"code","8cf04d00":"code","52bd3dbb":"code","6bd3e760":"code","2d1341bb":"code","1a23eb45":"code","5a6eaac8":"code","d441225c":"code","0ed6da48":"code","232499db":"code","37814dbe":"code","1c11b801":"code","1000cd9b":"code","715bcf7e":"code","c8b7655f":"code","6d024282":"code","8d868fe5":"code","a0e6f988":"code","c9124042":"code","ec9543d5":"markdown","e674f926":"markdown","b0fc3d03":"markdown","79cccba4":"markdown","dee623c9":"markdown","2942487b":"markdown","f90577ee":"markdown","ea2120e2":"markdown","712b4c12":"markdown","2b379cc5":"markdown","bfb4e14e":"markdown","8fc93d39":"markdown","131b35dd":"markdown","4b61fbd4":"markdown"},"source":{"8531c610":"# from mpl_toolkits.mplot3d import Axes3D\n# from sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\nimport pandas as pd\nimport geopandas as gpd\n\nimport folium\nfrom folium import Choropleth\nfrom folium.plugins import HeatMap","63350b2d":"dirname = '..\/input\/covid19-colombia-httpswwwdatosgovco\/rows.csv'\ndata_covid_prev = pd.read_csv(dirname, index_col='ID de caso')\ndata_covid=data_covid_prev\n# data_covid[data_covid['Fecha de muerte']=='-   -']\ndata_covid['Fecha de muerte']=data_covid['Fecha de muerte'].replace('-   -','')\ndata_covid['Fecha de muerte'].unique()","423bf3b2":"# dirname = '..\/input\/covid19-colombia-httpswwwdatosgovco\/rows.csv'\n# data_covid_prev = pd.read_csv(dirname, index_col='ID de caso')\n# data_covid=data_covid_prev\n\n# # Ajustando los DataTime\n\ndata_covid['fecha reporte web']=pd.to_datetime(data_covid_prev['fecha reporte web'])\ndata_covid['Fecha recuperado']=pd.to_datetime(data_covid_prev['Fecha recuperado'])\ndata_covid['Fecha de muerte']=pd.to_datetime(data_covid_prev['Fecha de muerte'])\n# data_covid['FIS']=pd.to_datetime(data_covid['FIS'])\ndata_covid['fecha reporte web']=pd.to_datetime(data_covid_prev['fecha reporte web'])\n\n# Faltan datos de diagnostico, hay nan\ndata_covid[data_covid['fecha reporte web'].isnull()]\ndata_covid['fecha reporte web']=data_covid['fecha reporte web'].fillna(method='ffill')\ndata_covid0=data_covid.copy()\ndata_covid_alt=data_covid.copy()","c20b8b79":"\n# data_covid['Fecha diagnostico']=data_covid['Fecha diagnostico'].replace('Sin dato', '2020-05-29')\ndata_covid.index=pd.to_datetime(data_covid['fecha reporte web'],format='%Y-%m-%d')\n\ndata_covid=data_covid.sort_index()\ndata_covid[data_covid.index.notna()].tail()","8c6c282e":"pG=data_covid.replace([np.nan,'nan'],np.nan).loc[:,['Departamento o Distrito ','fecha reporte web','Fecha recuperado','Fecha de muerte']].groupby(['Departamento o Distrito '])\naux=lambda p: sum((p['Fecha recuperado']).map(lambda pe: len(pe)>1))\n# pG.apply(lambda p: sum((p['Fecha recuperado']).map(lambda pe: len(pe)>1)))\npG2=pG.apply(lambda p: p.count())\n# pG.agg(['min','max'])\n# ##############\n\npG3=pd.DataFrame()\npG3['Enfermos']=pG2['Departamento o Distrito ']-(pG2['Fecha recuperado']+pG2['Fecha de muerte'])\npG3['Recuperados']=pG2['Fecha recuperado']\npG3['Muertes']=pG2['Fecha de muerte']\n\nindex_sorted=pG3.sum(axis=1).sort_values(ascending=False)\n\npG3.sort_values(by='Enfermos',ascending=True).plot(kind='barh',figsize = (12,8),stacked=True)","984670ab":"pG4=pG3.div(pG3.sum(axis=1), axis=0)\npG4.sort_values(by='Enfermos',ascending=True).plot(kind='barh',figsize = (12,8),stacked=True)\nplt.title('Tasas: actualmente Enfermos vs Recuperados vs Muertos')\npG5=pG4\npG5['Total']=pG3.sum(axis=1)","8cf04d00":"plt.figure(figsize=(16,50))\nvalores=pG5.sort_values(by='Enfermos',ascending=True)\nanchura=valores.Total\nplt.barh((anchura.rolling(2).sum().fillna(2)*0.5+2000).cumsum(),height=anchura,width=valores.Enfermos,tick_label=valores.index)\nplt.barh((anchura.rolling(2).sum().fillna(2)*0.5+2000).cumsum(),height=anchura,left=valores.Enfermos,width=valores.Recuperados)#,tick_label=valores.index\nplt.barh((anchura.rolling(2).sum().fillna(2)*0.5+2000).cumsum(),height=anchura,left=valores.Enfermos+valores.Recuperados,width=valores.Muertes)#,tick_label=valores.index\n\nfor ith in range(len(valores)):\n    fS=int(anchura[ith])\/\/1500\n#     print(fS)\n    plt.text(0.5,(anchura.rolling(2).sum().fillna(2)*0.5+2000).cumsum()[ith],'{}'.format(str(valores.index[ith])),fontsize=fS,horizontalalignment='center') \nplt.show()","52bd3dbb":"infectados_ubicacion=pd.DataFrame(data_covid['Ciudad de ubicaci\u00f3n'].value_counts())\ninfectados_ubicacion2=infectados_ubicacion.sort_values(by='Ciudad de ubicaci\u00f3n',ascending=True)\ninfectados_ubicacion.iloc[[9,8,7,6,5,4,3,2,1,0]].plot(kind='barh',figsize = (12,8))\n\nplt.title('Figura 1. Afectados por ciudad')","6bd3e760":"# https:\/\/requests.readthedocs.io\/es\/latest\/\nimport requests\n\nurl=\"https:\/\/gist.githubusercontent.com\/john-guerra\/43c7656821069d00dcbc\/raw\/be6a6e239cd5b5b803c6e7c2ec405b793a9064dd\/Colombia.geo.json\"\n# url=\"https:\/\/raw.githubusercontent.com\/finiterank\/mapa-colombia-js\/master\/colombia-municipios.json\"\ndata = requests.get(url)\n\ndata_geo=gpd.GeoDataFrame().from_features(data.json())\n# data_geo=data.json()['objects']['mpios']\n\n# data_geo.PERIMETER.index=data_geo.PERIMETER.index.map(lambda a : str(a))\n","2d1341bb":"pG9=pG2\npG9.loc['Atl\u00e1ntico']=pG9.loc['Atl\u00e1ntico']+pG9.loc['Barranquilla D.E.']\npG9.loc['Cundinamarca']=pG9.loc['Cundinamarca']+pG9.loc['Bogot\u00e1 D.C.']\npG9.loc['Valle del Cauca']=pG9.loc['Valle del Cauca']+pG9.loc['Buenaventura D.E.']\npG9.loc['Magdalena']=pG9.loc['Magdalena']+pG9.loc['Santa Marta D.T. y C.']\npG9.loc['Bol\u00edvar']=pG9.loc['Bol\u00edvar']+pG9.loc['Cartagena D.T. y C.']","1a23eb45":"data_geo['new']=[pG9.loc[data_covid.groupby(['Codigo departamento']).first().loc[int(data_geo.DPTO[i])]['Departamento o Distrito ']][0] for i in range(len(data_geo.DPTO))]\ndata_geo.index=data_geo.index.map(lambda a : str(a))\n# Faltan los \"departamentos\" que pucieron como ciudades D.C","5a6eaac8":"# Create a base map\nm = folium.Map(location=[4.570868 , -74.297333], tiles='cartodbpositron', zoom_start=5.5)\n\n# Add a choropleth map to the base map\nChoropleth(geo_data=data_geo.geometry.__geo_interface__, \n           data=data_geo.new, \n           key_on=\"feature.id\", \n           fill_color='YlOrRd', \n           legend_name='Casos de covid-19'\n          ).add_to(m)\n\n# Display the map\nm","d441225c":"# data_covid_alt=data_covid0[data_covid0['Departamento o Distrito ']=='Antioquia']","0ed6da48":"new_0=data_covid_alt.groupby(['fecha reporte web'])['Estado'].value_counts()\nnew_0=new_0.unstack()\nnew_0=new_0.fillna(0)\n# new_0\ngraf2=new_0.div(new_0.sum(axis=1), axis=0)\ngraf2=graf2.loc[:,['Asintom\u00e1tico','Leve','Moderado','Grave','Fallecido']]\n# graf2.plot(kind='area',stacked=True,alpha=0.1)","232499db":"total_x_diag=data_covid_alt.groupby(['fecha reporte web'])['fecha reporte web'].count()\nrecup_x_diag=data_covid_alt.groupby(['fecha reporte web'])['Fecha recuperado'].apply(lambda p : sum(~np.isnan(p.values)))\nmuert_x_diag=data_covid_alt.groupby(['fecha reporte web'])['Fecha de muerte'].apply(lambda p : sum(~np.isnan(p.values)))\n","37814dbe":"# plt.figure()\ngraf=pd.DataFrame()\ngraf['Muertes']=muert_x_diag\ngraf['Recuperados']=recup_x_diag\ngraf['Actualmente']=total_x_diag-(recup_x_diag+muert_x_diag)\ngraf[graf.index!='nan'].plot(kind='bar',stacked=True,figsize=(16,6))\n# graf2.plot(kind='area',stacked=True,alpha=0.6,figsize=(16,2))\nplt.plot(0, 0, label='First Line')","1c11b801":"Data_Diagnosticados=pd.Series(data_covid['fecha reporte web'].value_counts())\n# muertos\nData_Muertos=pd.Series(data_covid['Fecha de muerte'][1:].value_counts())\n# Recuperados\nData_Recuperados=pd.Series(data_covid['Fecha recuperado'].value_counts())\n# Data_Muertos\n\nData_Diagnosticados_acum=Data_Diagnosticados.sort_index(ascending=True).cumsum()\nData_Muertos_acum=Data_Muertos[1:].sort_index(ascending=True).cumsum()\nData_Recuperados_acum=Data_Recuperados[1:].sort_index(ascending=True).cumsum()\ndf = pd.concat([Data_Muertos_acum,Data_Recuperados_acum,Data_Diagnosticados_acum], axis=1,sort=True)\ndf.plot(figsize=(12,8),stacked=False)\nplt.title('Figura 3. Casos acumulados de muertes, recuperados y diagnosticados')\ndf.to_csv('pruebaSave.csv')","1000cd9b":"cols=data_covid[data_covid['Fecha de muerte'].map(lambda p: len(str(p)) > 8)].columns\n(data_covid[data_covid['Fecha de muerte'].map(lambda p: len(str(p)) > 8)][cols[3]].value_counts()).sort_values(ascending=True).plot.barh(figsize=(14,8)) #principales muertos por ciudad\nmuerte_edad=data_covid[data_covid['Fecha de muerte'].map(lambda p: len(str(p)) > 8)][cols[5]].value_counts()\/data_covid[cols[5]].value_counts() #principales muertos por ciudad\nplt.title('Figura 4. Muertos totales por ciudad')\nplt.show()\nmuerte_edad.sort_index(ascending=True).plot.bar(figsize=(14,8))\n\nplt.title('Figura 4.5. Muertes por edad')\ndata_covid[data_covid['Fecha de muerte'].map(lambda p: len(str(p)) > 8)][cols[5]].value_counts().sort_index(ascending=True).plot.bar(figsize=(14,8))\nplt.show()\n\nplt.title('Figura 5. Ratio de muertes por edad')\nmuerte_edad.plot.bar(figsize=(14,8))\nplt.show()\n\nplt.title('Figura 5.1. Muertes importado\/relacionado')\ndata_covid[data_covid['Fecha de muerte'].map(lambda p: len(str(p)) > 8)][cols[7]].value_counts().plot.bar(figsize=(14,8))\nplt.show()\n\nplt.title('Figura 5.2 Muertes seg\u00fan el sexo')\ndata_covid[data_covid['Fecha de muerte'].map(lambda p: len(str(p)) > 8)][cols[6]].value_counts().plot.bar(figsize=(14,8))\nplt.show()\n\n","715bcf7e":"((data_covid[data_covid['Fecha de muerte'].map(lambda p: len(str(p)) > 8)][cols[3]].value_counts()\/data_covid[cols[3]].value_counts()).sort_values(ascending=True)).plot.barh(figsize=(14,8))\nplt.title('Figura 7: Porcentaje de muertos por departamentos')","c8b7655f":"# print('Solo 4 personas se han registrado como no tienen fecha de Primeros sintomas...\\n',(data_covid['FIS']).map(lambda p: len(p)>8).value_counts())\n# print('Se han diagnosticado m\u00e1s de 2000 como asintom\u00e1ticas...\\n',(data_covid['Estado'].value_counts()))\n(data_covid['Estado'].value_counts().sort_values(ascending=True).plot.barh(figsize=(14,8)))","6d024282":"for ciudad_n in range(len(data_covid['Ciudad de ubicaci\u00f3n'].unique())):\n# ciudad_n=7\n    print(sorted(data_covid['Ciudad de ubicaci\u00f3n'].unique())[ciudad_n])\n    data_covid[data_covid['Ciudad de ubicaci\u00f3n']==sorted(data_covid['Ciudad de ubicaci\u00f3n'].unique())[ciudad_n]]['fecha reporte web'].value_counts().sort_index(ascending=True).plot(figsize=(12,3),kind='bar')\n    plt.title(sorted(data_covid['Ciudad de ubicaci\u00f3n'].unique())[ciudad_n])\n    plt.show()","8d868fe5":"for departamento_n in range(len(data_covid['Departamento o Distrito '].unique())):\n#     departamento_n=7\n    print(sorted(data_covid['Departamento o Distrito '].unique())[departamento_n],'\\r\\n')\n    data_covid[data_covid['Departamento o Distrito ']==sorted(data_covid['Departamento o Distrito '].unique())[departamento_n]]['fecha reporte web'].value_counts().sort_index(ascending=True).plot(figsize=(16,3),kind='bar')\n#     data_covid[data_covid['Departamento o Distrito ']==data_covid['Departamento o Distrito '].unique()[departamento_n]]['Fecha diagnostico'].value_counts().sort_values(ascending=True).cumsum().plot(figsize=(12,8))\n    plt.title(sorted(data_covid['Departamento o Distrito '].unique())[departamento_n])\n    plt.show()","a0e6f988":"data_covid[data_covid['Ciudad de ubicaci\u00f3n']=='Monter\u00eda']['Edad'].value_counts().sort_index().plot(kind='bar',figsize=(16,8))\n# plt.title('Monter\u00eda')\n# plt.show()","c9124042":"data_covid[data_covid['Ciudad de ubicaci\u00f3n']=='Monter\u00eda'][data_covid[data_covid['Ciudad de ubicaci\u00f3n']=='Monter\u00eda']['Fecha de muerte']!='nan']['Edad'].value_counts().sort_index().plot(kind='bar',figsize=(16,8))\n","ec9543d5":"Casos acumulados","e674f926":"# Departamentos m\u00e1s afectadas","b0fc3d03":"# Buscar Departamento presionando Ctrl + F","79cccba4":"\n# Riesgo del caso","dee623c9":"# MAPA","2942487b":"## Introducci\u00f3n\nEsto es una prueba de escarbar datos","f90577ee":"# Diagn\u00f3stico, muertes y recuperados (Diario)","ea2120e2":"# Recursos","712b4c12":"# # \u00bfQuienes se est\u00e1n muriendo?","2b379cc5":"# Buscar municipio\/ciudad presionando Ctrl + F","bfb4e14e":"datos tomados de:\nhttps:\/\/www.datos.gov.co\/api\/views\/gt2j-8ykr\/rows.csv","8fc93d39":"* Vista preliminar de los \u00faltimos casos de coronavirus.","131b35dd":"# Ratio de muertes seg\u00fan el departamento","4b61fbd4":"# Diagn\u00f3stico, muertes y recuperados (Acumulado)"}}