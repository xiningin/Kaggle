{"cell_type":{"2affc5ce":"code","8e6cbaad":"code","6cf19830":"code","7b417e38":"code","ab1136b9":"code","8c2268ee":"code","1c6959a2":"code","fd661e4c":"code","2c16b8e9":"code","729c9bf6":"code","cec142b2":"code","4e97c780":"code","a648c8a1":"code","47120f37":"code","32650e80":"code","d48e43f8":"code","ccb40506":"code","5e83d3a3":"code","72e7ff8c":"code","4b8601b6":"code","4242ff62":"code","791ab3ed":"code","32e383df":"code","113bd943":"code","3a5ca200":"code","da55e7ad":"code","910fa14a":"code","4becfc86":"code","e9ce0bbc":"code","33e6c61e":"code","c30cd93f":"code","90153878":"code","addcc756":"code","b4f8801c":"code","9cca26e9":"code","afc1ef5f":"code","104b6518":"code","292ab8ad":"code","a7041273":"code","5f8b118f":"code","f98d7c3f":"code","8ab77c6c":"code","266f8174":"code","db4314c7":"code","b446c557":"code","8f08e6fb":"code","ef2e9e38":"code","5eca23f8":"code","ef617643":"code","dd93449f":"code","f15193ab":"code","c01e69d2":"code","2405e930":"code","f89a7928":"code","f64af28b":"code","46cd8fce":"code","c7f6c3bb":"code","573dce20":"code","811d9dc7":"code","eaa264bf":"code","cf96da5b":"code","a291a2a3":"code","4013be9e":"code","ecbf850f":"code","4931b607":"code","71f785ae":"code","5f1e60a7":"code","8db81265":"code","84db0d56":"code","7dd0bd8c":"code","146209b4":"code","66bdb692":"code","855361a3":"code","028f6285":"code","a4184fcf":"code","f8884f74":"code","0ac76f24":"code","aac1bf8f":"code","5ab58094":"code","acdb2fae":"code","a1f67550":"code","db78f610":"code","493a1734":"code","47bdbcc7":"code","36274765":"code","6d8e8f4c":"code","1e789fb6":"code","7481fa67":"code","41c8c215":"code","b34754e3":"code","ba6f692d":"code","adf6f2c7":"code","1d3d4eac":"code","984fa768":"code","7a02697a":"code","8596fce1":"code","5767355a":"code","4c507c3d":"code","c315f7b6":"code","3156d9ab":"code","9de164db":"code","1571348d":"code","9f42f400":"code","e03997eb":"code","f0e0f9db":"code","180bb3bd":"markdown"},"source":{"2affc5ce":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', 500)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        path = os.path.join(dirname, filename) \n        print(path)","8e6cbaad":"data = pd.read_csv(path)\nprint(data.shape)\ndata.head()","6cf19830":"#classe imbalance\ndata['fraud_reported'].value_counts()","7b417e38":"#replace Y:1,N:0\ndata['fraud_reported'] = pd.Series(map(lambda x: dict(Y=1, N=0)[x],\n              data['fraud_reported'].values.tolist()), data.index)","ab1136b9":"#bar plot of target\nimport matplotlib.pyplot as plt\n%matplotlib inline\ndata['fraud_reported'].value_counts().plot(kind = 'bar', figsize = (4,3))","8c2268ee":"def levels(df):\n    return (pd.DataFrame({'dtype':df.dtypes, \n                         'levels':df.nunique(), \n                         'uni_values':[df[x].unique() for x in df.columns],\n                         'null_values':df.isna().sum(),\n                         'unique':df.nunique()}))\nlevels(data)","1c6959a2":"data.drop('_c39',axis=1,inplace=True)","fd661e4c":"data.replace('?','oth',inplace=True)","2c16b8e9":"import seaborn as sns\n\nsns.boxplot(data.fraud_reported,data.months_as_customer,orient='v')","729c9bf6":"data.groupby('fraud_reported').agg({'months_as_customer':'std'})","cec142b2":"df = data.sort_values('months_as_customer').reset_index(drop=True)\nfig_dims = (20, 10)\nfig, ax =plt.subplots(4,1,figsize=fig_dims)\nsns.countplot(df.months_as_customer.loc[0:199],orient='v',hue=df['fraud_reported'], ax=ax[0])\nsns.countplot(df.months_as_customer.loc[200:399],orient='v',hue=df['fraud_reported'], ax=ax[1])\nsns.countplot(df.months_as_customer.loc[400:699],orient='v',hue=df['fraud_reported'], ax=ax[2])\nsns.countplot(df.months_as_customer.loc[700:],orient='v',hue=df['fraud_reported'], ax=ax[3])\nplt.xticks(rotation=90)\nfig.show()","4e97c780":"data['months_as_customer'].max()","a648c8a1":"bins = [-1, 60, 120, 180, 240, 300, 360, 420, 480]\ndata['year_bin'] = pd.cut(data['months_as_customer'], bins)","47120f37":"plt.figure(figsize=(10,3))\nsns.countplot(data.year_bin,orient='v',hue=data['fraud_reported'])","32650e80":"data.drop('months_as_customer',axis=1,inplace=True)","d48e43f8":"sns.boxplot(data.fraud_reported,data.policy_number,orient='v')","ccb40506":"data.groupby('fraud_reported').agg({'policy_number':'std'})","5e83d3a3":"data.drop('policy_number',axis=1,inplace=True)","72e7ff8c":"sns.countplot(data.policy_state,orient='v',hue=data['fraud_reported'])","4b8601b6":"plt.figure(figsize=(10,5))\nsns.countplot(data.umbrella_limit,orient='v',hue=data['fraud_reported'])","4242ff62":"data[['incident_city','incident_location','fraud_reported']].head(10)","791ab3ed":"plt.figure(figsize=(10,5))\nsns.countplot(data.incident_city,orient='v',hue=data['fraud_reported'])","32e383df":"sns.countplot(data.incident_state,orient='v',hue=data['fraud_reported'])","113bd943":"plt.figure(figsize=(10,5))\nsns.countplot(data.incident_type,orient='v',hue=data['fraud_reported'])","3a5ca200":"data['pin']= data[\"incident_location\"].str.slice(0,4,1)","da55e7ad":"data.drop('incident_location',axis=1,inplace=True)","910fa14a":"data['pin']","4becfc86":"data.pin.nunique()","e9ce0bbc":"df = data[['pin','fraud_reported']][data['pin'].isin(data['pin'].value_counts()[data['pin'].value_counts()>1].index)]","33e6c61e":"plt.figure(figsize=(25,5))\nsns.countplot(df.pin,orient='v',hue=df['fraud_reported'])","c30cd93f":"df = data[['pin','fraud_reported']][data['pin'].isin(data['pin'].value_counts()[data['pin'].value_counts()==1].index)]\nplt.figure(figsize=(25,3))\nsns.countplot(df.pin.loc[:50],orient='v',hue=df['fraud_reported'])","90153878":"plt.figure(figsize=(25,3))\nsns.countplot(df.pin.loc[51:100],orient='v',hue=df['fraud_reported'])","addcc756":"data['pin'].max()","b4f8801c":"sns.boxplot(data.fraud_reported,data.pin.astype('int'),orient='v')","9cca26e9":"bins = [0,2000,4000,6000,8000,10000]\ndata['pin_bin'] = pd.cut(data['pin'].astype('int'), bins)\ndata.drop('pin',axis=1,inplace=True)","afc1ef5f":"plt.figure(figsize=(20,3))\nsns.countplot(data.pin_bin,orient='v',hue=data['fraud_reported'])","104b6518":"plt.figure(figsize=(20,3))\nsns.countplot(data.insured_occupation,orient='v',hue=data['fraud_reported'])","292ab8ad":"plt.figure(figsize=(20,3))\nsns.countplot(data.insured_education_level,orient='v',hue=data['fraud_reported'])","a7041273":"plt.figure(figsize=(20,3))\nsns.countplot(data.insured_hobbies,orient='v',hue=data['fraud_reported'])\nplt.xticks(rotation=30)","5f8b118f":"df = data.groupby('insured_hobbies')['fraud_reported'].value_counts().unstack().reset_index()\ndf['ratio_1\/0'] = df[1]\/df[0]\ndf","f98d7c3f":"df.sort_values('ratio_1\/0')","8ab77c6c":"data = data.merge(df[['insured_hobbies','ratio_1\/0']], on = 'insured_hobbies', how='left')","266f8174":"data['insured_hobbies'][data['ratio_1\/0']<=0.15] = 'h1'\ndata['insured_hobbies'][(data['ratio_1\/0']>0.15)&(data['ratio_1\/0']<=0.25)] = 'h2'\ndata['insured_hobbies'][(data['ratio_1\/0']>0.25)&(data['ratio_1\/0']<=0.35)] = 'h3'\ndata['insured_hobbies'][(data['ratio_1\/0']>0.35)&(data['ratio_1\/0']<=0.45)] = 'h4'\ndata['insured_hobbies'][(data['ratio_1\/0']>0.45)&(data['ratio_1\/0']<=3)] = 'h5'\ndata['insured_hobbies'][(data['ratio_1\/0']>3)] = 'h6'","db4314c7":"plt.figure(figsize=(20,3))\nsns.countplot(data.insured_hobbies,orient='v',hue=data['fraud_reported'])\nplt.xticks(rotation=30)","b446c557":"plt.figure(figsize=(20,3))\nsns.countplot(data.age,orient='v',hue=data['fraud_reported'])","8f08e6fb":"sns.boxplot(data.fraud_reported,data.age,orient='v')","ef2e9e38":"bins = [18, 22, 35, 50, 65]\ndata['age_bin'] = pd.cut(data['age'], bins)","5eca23f8":"data.drop('age',axis=1,inplace=True)","ef617643":"plt.figure(figsize=(10,3))\nsns.countplot(data.age_bin,orient='v',hue=data['fraud_reported'])","dd93449f":"data['policy_bind_date'] = pd.to_datetime(data['policy_bind_date'])\ndata['incident_date'] = pd.to_datetime(data['incident_date'])","f15193ab":"data['policy_age'] = data['incident_date'] - data['policy_bind_date']\ndata['policy_age'] = data['policy_age'].astype('str')\ndata['policy_age'] = data['policy_age'].str.slice(0,-5,1)","c01e69d2":"sns.boxplot(data.fraud_reported,data.policy_age.astype('int')\/365,orient='v')","2405e930":"data['policy_age'].astype('int').max()\/365","f89a7928":"bins = [-1, 5, 10, 15, 20, 26]\ndata['policy_age_bin'] = pd.cut(data['policy_age'].astype('int')\/365, bins)\ndata.drop('policy_age',axis=1,inplace=True)","f64af28b":"plt.figure(figsize=(10,3))\nsns.countplot(data.policy_age_bin,orient='v',hue=data['fraud_reported'])","46cd8fce":"data['age_at_incident'] = data['incident_date'].astype('str').str.slice(0,4,1).astype('int') - data['auto_year']","c7f6c3bb":"data.drop(['policy_bind_date','incident_date','auto_year'],axis=1,inplace=True)","573dce20":"plt.figure(figsize=(10,3))\nsns.countplot(data.age_at_incident,orient='v',hue=data['fraud_reported'])","811d9dc7":"sns.boxplot(data.fraud_reported,data.insured_zip\/1000,orient='v')","eaa264bf":"bins = [42.5, 45, 50, 65]\ndata['insured_zip_bin'] = pd.cut(data['insured_zip']\/10000, bins)","cf96da5b":"plt.figure(figsize=(10,3))\nsns.countplot(data.insured_zip_bin,orient='v',hue=data['fraud_reported'])","a291a2a3":"data.drop('insured_zip',axis=1,inplace=True)","4013be9e":"plt.figure(figsize=(10,3))\nsns.countplot(data.incident_hour_of_the_day,orient='v',hue=data['fraud_reported'])","ecbf850f":"data['incident_hour_of_the_day'][data['incident_hour_of_the_day']==0]=24\nbins = [0, 6, 9, 13, 17, 25]\ndata['incident_hour_bin'] = pd.cut(data['incident_hour_of_the_day'], bins)\ndata.drop('incident_hour_of_the_day',axis=1,inplace=True)","4931b607":"plt.figure(figsize=(10,3))\nsns.countplot(data.incident_hour_bin,orient='v',hue=data['fraud_reported'])","71f785ae":"plt.figure(figsize=(15,3))\nsns.countplot(data.auto_make,orient='v',hue=data['fraud_reported'])","5f1e60a7":"plt.figure(figsize=(25,3))\nsns.countplot(data.auto_model,orient='v',hue=data['fraud_reported'])\nplt.xticks(rotation=90)","8db81265":"data['auto_make_model']=data['auto_make']+'_'+data['auto_model']\nplt.figure(figsize=(25,3))\nsns.countplot(data.auto_make_model,orient='v',hue=data['fraud_reported'])\nplt.xticks(rotation=90)","84db0d56":"data.drop(['auto_make','auto_model'],axis=1,inplace=True)","7dd0bd8c":"sns.boxplot(data.fraud_reported,data.policy_annual_premium,orient='v')","146209b4":"bins = [0, 500, 1000, 1500, 2500]\ndata['premium_bin'] = pd.cut(data['policy_annual_premium'], bins)\ndata.drop('policy_annual_premium',axis=1,inplace=True)","66bdb692":"plt.figure(figsize=(25,3))\nsns.countplot(data.premium_bin,orient='v',hue=data['fraud_reported'])","855361a3":"plt.figure(figsize=(25,3))\nsns.countplot(data.police_report_available,orient='v',hue=data['fraud_reported'])","028f6285":"plt.figure(figsize=(25,3))\nsns.countplot(data.witnesses,orient='v',hue=data['fraud_reported'])","a4184fcf":"# Compute the correlation matrix\ncorr = data.corr()\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.9, vmin=-.9, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","f8884f74":"#total_claim_amount is caused by summation of injury_claim, property_claim, vehicle_claim. As it does occur before, we shall drop.\ndata.drop('total_claim_amount',axis=1,inplace=True)","0ac76f24":"data.columns","aac1bf8f":"x = data.copy().drop(\"fraud_reported\",axis=1)\ny = data[\"fraud_reported\"]","5ab58094":"num_cols = ['capital-gains','capital-loss','injury_claim', 'property_claim', 'vehicle_claim','ratio_1\/0']\ncat_cols = x.columns.difference(num_cols)","acdb2fae":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2, random_state = 200)","a1f67550":"x_train.shape,x_test.shape,y_train.shape,y_test.shape","db78f610":"from sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\nscale.fit(x_train[num_cols])\nx_train[num_cols] = scale.transform(x_train[num_cols])\nx_test[num_cols] = scale.transform(x_test[num_cols])","493a1734":"from sklearn.preprocessing import LabelEncoder\ncols = ['umbrella_limit','insured_occupation','age_at_incident','auto_make_model']\nimport bisect\nfor col in cols:\n    le = LabelEncoder()\n    x_train[col] = le.fit_transform(x_train[col])\n    x_test[col] = x_test[col].map(lambda s: 'other' if s not in le.classes_ else s)\n    le_classes = le.classes_.tolist()\n    #bisect.insort_left(le_classes, 'other')\n    le.classes_ = le_classes\n    x_test[col] = le.transform(x_test[col])","47bdbcc7":"cat_cols = x_train[cat_cols].columns.difference(cols)\ncat_cols","36274765":"x_train = pd.get_dummies(x_train,columns=cat_cols,drop_first=False,)\nx_test = pd.get_dummies(x_test,columns=cat_cols,drop_first=False,)","6d8e8f4c":"x_train.shape,x_test.shape,y_train.shape,y_test.shape","1e789fb6":"x_train.columns.difference(x_test.columns)","7481fa67":"x_test.columns.difference(x_train.columns)","41c8c215":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(random_state=200,max_iter=2000)\nlr.fit(x_train,y_train)\ntrain_pred_lr = lr.predict(x_train)\ntest_pred_lr = lr.predict(x_test)","b34754e3":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score, f1_score\ncm = confusion_matrix(y_test, test_pred_lr)\nprint(\"Accuracy on train is:\",accuracy_score(y_train,train_pred_lr))\nprint(\"Accuracy on test is:\",accuracy_score(y_test,test_pred_lr))","ba6f692d":"from sklearn.metrics import classification_report\n# making a classification report\nprint(\"===============Classification report for test===============\")\ncr = classification_report(y_test,  test_pred_lr)\nprint(cr)\n\n# making a confusion matrix\ncm = confusion_matrix(y_test, test_pred_lr)\nsns.heatmap(cm, annot = True, cmap = 'copper',fmt='g')\nplt.show()","adf6f2c7":"print(\"===============Classification report for train===============\")\ncr = classification_report(y_train,  train_pred_lr)\nprint(cr)\n\n# making a confusion matrix\ncm = confusion_matrix(y_train, train_pred_lr)\nsns.heatmap(cm, annot = True, cmap = 'copper',fmt='g')\nplt.show()","1d3d4eac":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc\ndtc.fit(x_train, y_train)\ntrain_pred_dtc = dtc.predict(x_train)\ntest_pred_dtc = dtc.predict(x_test)","984fa768":"print(\"Accuracy on train is:\",accuracy_score(y_train,train_pred_dtc))\nprint(\"Accuracy on test is:\",accuracy_score(y_test,test_pred_dtc))","7a02697a":"dtc","8596fce1":"confusion_matrix(y_test, test_pred_dtc)","5767355a":"from sklearn.model_selection import GridSearchCV\nparameters={'max_depth':range(2,20,3)}\ndt_grid = GridSearchCV(DecisionTreeClassifier(),param_grid=parameters,n_jobs=-1,cv=10)\ndt_grid.fit(x_train,y_train)\nprint(dt_grid.best_score_)\nprint(dt_grid.best_params_)\ntrain_pred_dt_grid = dt_grid.predict(x_train)\ntest_pred_dt_grid = dt_grid.predict(x_test)","4c507c3d":"print(\"Accuracy on train is:\",accuracy_score(y_train,train_pred_dt_grid))\nprint(\"Accuracy on test is:\",accuracy_score(y_test,test_pred_dt_grid))","c315f7b6":"%%time\nfrom sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier()\nrfc\n\nparameters={'n_estimators':[100,300],\n           'max_features':range(10,71,20),\n           'max_depth':[2, 5,9,13],\n           'bootstrap':[True,False]}\nrf = GridSearchCV(rfc,param_grid=parameters,n_jobs=-1,cv=10,scoring='accuracy')\nrf.fit(x_train,y_train)","3156d9ab":"rf.best_params_","9de164db":"rfgrid = rf.best_estimator_\nrfgrid.fit(x_train,y_train)","1571348d":"train_pred_rfgrid = rfgrid.predict(x_train)\ntest_pred_rfgrid = rfgrid.predict(x_test)","9f42f400":"print(\"Accuracy on train is:\",accuracy_score(y_train,train_pred_rfgrid))\nprint(\"Accuracy on test is:\",accuracy_score(y_test,test_pred_rfgrid))","e03997eb":"# making a classification report\ncr = classification_report(y_test,  test_pred_rfgrid)\nprint(cr)\n\n# making a confusion matrix\ncm = confusion_matrix(y_test, test_pred_rfgrid)\nsns.heatmap(cm, annot = True, cmap = 'copper',fmt='g')\nplt.show()","f0e0f9db":"cr = classification_report(y_train,  train_pred_rfgrid)\nprint(cr)\n\n# making a confusion matrix\ncm = confusion_matrix(y_train, train_pred_rfgrid)\nsns.heatmap(cm, annot = True, cmap = 'copper',fmt='g')\nplt.show()","180bb3bd":"Looks like people having hobbies like playing Chess or Cross-fit have numerous frauds."}}