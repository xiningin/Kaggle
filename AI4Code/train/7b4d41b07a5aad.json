{"cell_type":{"dccb2a98":"code","55150536":"code","5b49a196":"code","ce6aecf1":"code","dde3a005":"code","2b04d648":"code","e3b2ae94":"code","bf4613f4":"code","5a068c06":"code","fb15330c":"code","97ab686f":"code","79b68b56":"code","cbfc079a":"code","a8aa5e54":"code","2cdd05c4":"code","242ac67f":"code","ea3d02f0":"code","a3b73b0d":"code","3310e9aa":"code","f7d5cdad":"code","6ed1e21a":"code","fa36c8c8":"code","2feccc14":"code","503d83bc":"code","391f83df":"code","40e6b813":"code","fbb4299b":"code","5c8c0fed":"code","ffc88ba7":"code","d922e502":"code","2e747772":"code","8473d1cf":"code","5342f1bc":"code","55a4d512":"code","2da46618":"code","982e2a90":"markdown","e89dc793":"markdown","c483181a":"markdown","471ad39b":"markdown","bcb3737e":"markdown","860acb1e":"markdown","4cd0f33e":"markdown","5c1c7f37":"markdown","4b28b4b8":"markdown","00b49521":"markdown","3efb119f":"markdown","e486dbc4":"markdown","07eda334":"markdown","cf1537fb":"markdown","51eb1354":"markdown","746835c6":"markdown","36104fa5":"markdown","c769dbe2":"markdown","6df2dcb8":"markdown","8a40d3b1":"markdown","d52f76b8":"markdown","f274ecfa":"markdown","48ccdd69":"markdown","e23b2082":"markdown","797a5eef":"markdown"},"source":{"dccb2a98":"import numpy as np \nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\nimport plotly.express as px\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","55150536":"train_df = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/train.csv')\ntest_df = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/test.csv')\nsample_submission = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/sample_submission.csv')","5b49a196":"train_df","ce6aecf1":"train_df.info()","dde3a005":"train_df.describe()","2b04d648":"train_df.shape","e3b2ae94":"train_df.isnull().sum()","bf4613f4":"train_df.Response.value_counts()","5a068c06":"# for the independent numeric variables, we plot the histogram to check the distribution of the variables\n# Note: the hist() function considers the numeric variables only, by default\n# we drop the target variable using drop()\n# 'axis=1' drops the specified column\n\ntrain_df.drop('Response', axis = 1).hist()\nplt.tight_layout()\nplt.figure(figsize = (15,10))\n# display the plot\nplt.show()","fb15330c":"df_target = train_df['Response'].copy()\ndf_target.value_counts()\n\n# plot the countplot of the variable 'diagnosis'\nsns.countplot(x = df_target)\nplt.text(x = 0.95, y = df_target.value_counts()[1] + 1, s = str(round((df_target.value_counts()[0])*100\/len(df_target),2)) + '%')\nplt.text(x = -0.05, y = df_target.value_counts()[0] +1, s = str(round((df_target.value_counts()[1])*100\/len(df_target),2)) + '%')\n\nplt.title('Count Plot for Target Variable (Diagnosis)', fontsize = 15)\nplt.xlabel('Target Variable', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)\n\n# to show the plot\nplt.show()","97ab686f":"def get_uniques(df, columns):\n    return {column: list(df[column].unique()) for column in columns}","79b68b56":"categorical_features = ['Gender', 'Vehicle_Age', 'Vehicle_Damage']\n\nget_uniques(train_df, categorical_features)","cbfc079a":"binary_features = ['Gender', 'Vehicle_Damage']\n\nordinal_features = ['Vehicle_Age']","a8aa5e54":"def binary_encode(df, column, positive_label):\n    df = df.copy()\n    df[column] = df[column].apply(lambda x: 1 if x == positive_label else 0)\n    return df","2cdd05c4":"train_df = binary_encode(train_df, 'Gender', 'Male')\ntest_df = binary_encode(test_df, 'Gender', 'Male')\n\ntrain_df = binary_encode(train_df, 'Vehicle_Damage', 'Yes')\ntest_df = binary_encode(test_df, 'Vehicle_Damage', 'Yes')","242ac67f":"def ordinal_encode(df, column, ordering):\n    df = df.copy()\n    df[column] = df[column].apply(lambda x: ordering.index(x))\n    return df","ea3d02f0":"age_ordering = ['< 1 Year', '1-2 Year', '> 2 Years']\n\ntrain_df = ordinal_encode(train_df, 'Vehicle_Age', age_ordering)\ntest_df = ordinal_encode(test_df, 'Vehicle_Age', age_ordering)","a3b73b0d":"test_ids = test_df['id'].tolist()\n\ntrain_df = train_df.drop('id', axis=1)\ntest_df = test_df.drop('id', axis=1)","3310e9aa":"X = train_df.drop('Response', axis=1)\ny = train_df['Response']","f7d5cdad":"X.plot(kind='box', figsize=(20, 10), logy=True)","6ed1e21a":"scaler = MinMaxScaler()\n\nX = scaler.fit_transform(X)\ntest_df = scaler.fit_transform(test_df)","fa36c8c8":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7)","2feccc14":"y.sum() \/ len(y)","503d83bc":"X_train.shape , y_train.shape","391f83df":"inputs = tf.keras.Input(shape=(10,))\nx = tf.keras.layers.Dense(64, activation='relu')(inputs)\nx = tf.keras.layers.Dense(64, activation='relu')(x)\noutputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)","40e6b813":"model.summary()","fbb4299b":"model.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=[tf.keras.metrics.AUC(name='auc')]\n)","5c8c0fed":"batch_size = 64\nepochs = 25\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=batch_size,\n    epochs=epochs,\n    callbacks=[tf.keras.callbacks.ReduceLROnPlateau()]\n)","ffc88ba7":"fig = px.line(\n    history.history, y=['loss', 'val_loss'], \n    labels={'index': 'Epoch', 'value': 'Loss'}, \n    title='Training History')\nfig.show()","d922e502":"model.evaluate(X_test, y_test)","2e747772":"preds = model.predict(test_df)","8473d1cf":"preds = list(map(lambda x: np.int(x[0]),  preds >= 0.5))","5342f1bc":"submission = pd.concat([pd.Series(test_ids), pd.Series(preds)], axis=1)\nsubmission.columns = ['id', 'Response']","55a4d512":"submission","2da46618":"submission.to_csv('.\/submission.csv')","982e2a90":"**Encoding Categorical features , binary features and ordinal features.**","e89dc793":"**Distribution of dependent variable.**","c483181a":"**We are getting an AUC of 0.85 and loss of 0.2689 which is pretty good.**","471ad39b":"**Only 12% people of the whole dataset have responded.**","bcb3737e":"**Loss and val loss are decreasing overtime and seems to converge.**","860acb1e":"**Checking the number of rows and columns**","4cd0f33e":"**Binary Encoding**","5c1c7f37":"**We have 381109 instances and 12 features in our dataset**","4b28b4b8":"**The above plot shows that there is imbalance in the target variable.**","00b49521":"**Variables Definition**","3efb119f":"**Classify categorical features to be encoded**","e486dbc4":"**Compiling the model**","07eda334":"**Task Details**\n\nYour client is an Insurance company that has provided Health Insurance to its customers now they need your help in building a model to predict whether the policyholders (customers) from past year will also be interested in Vehicle Insurance provided by the company.\n\nFor example, you may pay a premium of Rs. 5000 each year for a health insurance cover of Rs. 200,000\/- so that if, God forbid, you fall ill and need to be hospitalised in that year, the insurance provider company will bear the cost of hospitalisation etc. for upto Rs. 200,000. Now if you are wondering how can company bear such high hospitalisation cost when it charges a premium of only Rs. 5000\/-, that is where the concept of probabilities comes in picture. For example, like you, there may be 100 customers who would be paying a premium of Rs. 5000 every year, but only a few of them (say 2-3) would get hospitalised that year and not everyone. This way everyone shares the risk of everyone else.\n\nJust like medical insurance, there is vehicle insurance where every year customer needs to pay a premium of certain amount to insurance provider company so that in case of unfortunate accident by the vehicle, the insurance provider company will provide a compensation (called \u2018sum assured\u2019) to the customer.\n\nBuilding a model to predict whether a customer would be interested in Vehicle Insurance is extremely helpful for the company because it can then accordingly plan its communication strategy to reach out to those customers and optimise its business model and revenue.\n\nNow, in order to predict, whether the customer would be interested in Vehicle insurance, you have information about demographics (gender, age, region code type), Vehicles (Vehicle Age, Damage), Policy (Premium, sourcing channel) etc.\n\n**Evaluation Metric**\n\nThe evaluation metric for this hackathon is ROC_AUC score.","cf1537fb":"**Ordinal Encoding**","51eb1354":"**Distribution of numeric independent variables.**","746835c6":"**Building the Model**","36104fa5":"**Splitting the dataset**","c769dbe2":"**Using Mix Max Scaler to scale down the independent features**","6df2dcb8":"id - Unique ID for the customer\n\nGender - Gender of the customer\n\nAge - Age of the customer\n\nDriving_License - 0 : Customer does not have DL, 1 : Customer already has DL\n\nRegion_Code - Unique code for the region of the customer\n\nPreviously_Insured - 1 : Customer already has Vehicle Insurance, 0 : Customer doesn't have Vehicle Insurance\n\nVehicle_Age - Age of the Vehicle\n\nVehicle_Damage - 1 : Customer got his\/her vehicle damaged in the past. 0 : Customer didn't get his\/her vehicle damaged in the past.\n\nAnnual_Premium - The amount customer needs to pay as premium in the year\n\nPolicySalesChannel - Anonymized Code for the channel of outreaching to the customer ie. Different Agents, Over Mail, Over Phone, In Person, etc.\n\nVintage - Number of Days, Customer has been associated with the company\n\nResponse - 1 : Customer is interested, 0 : Customer is not interested","8a40d3b1":"Considering input shape to be 10 as we have 10 features.","d52f76b8":"**Splitting and Scaling**","f274ecfa":"We can infer from above that there are no missing values.","48ccdd69":"**Let's check for outliers before choosing a scaler**","e23b2082":"**Considering a threshold of 0.5. If the probability of being positive is greater than 50% we will have 1 else 0**","797a5eef":"**Checking for missing values**"}}