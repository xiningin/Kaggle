{"cell_type":{"01ceb85a":"code","5ed78be3":"code","2d46c1a4":"code","a0280453":"code","80802f78":"code","921bb75f":"code","e3f9735f":"code","5598af9f":"code","fe10ff63":"code","b2da2fb5":"code","c7c986ab":"code","9f53c7b2":"code","2bb40863":"code","2ddb0ca2":"code","7261a187":"code","b509e0e7":"code","acfce966":"code","85227690":"code","51f5c51f":"code","59cbd987":"code","2b3a71c4":"code","40c3e22a":"markdown","e35348cc":"markdown","64673a35":"markdown"},"source":{"01ceb85a":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n#\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5ed78be3":"data = pd.read_csv('..\/input\/g-research-crypto-forecasting\/train.csv') \nasset_details = pd.read_csv('..\/input\/g-research-crypto-forecasting\/asset_details.csv') ","2d46c1a4":"data.info()","a0280453":"asset_details.info()","80802f78":"def get_estimator(price_data, estimator,trading_periods,window=7*24*60):\n    window=7*24*60\n    if estimator == 'Parkinson':\n        rs = (1.0 \/ (4.0 * math.log(2.0))) * ((price_data['High'] \/ price_data['Low']).apply(np.log)) ** 2.0\n    elif estimator == 'GarmanKlass':\n        log_hl = (price_data['High'] \/ price_data['Low']).apply(np.log)\n        log_co = (price_data['Close'] \/ price_data['Open']).apply(np.log)\n        rs = 0.5 * log_hl ** 2 - (2 * math.log(2) - 1) * log_co ** 2\n    elif estimator == 'YangZhang':\n        log_ho = (price_data['High'] \/ price_data['Open']).apply(np.log)\n        log_lo = (price_data['Low'] \/ price_data['Open']).apply(np.log)\n        log_co = (price_data['Close'] \/ price_data['Open']).apply(np.log)\n        log_oc = (price_data['Open'] \/ price_data['Close'].shift(1)).apply(np.log)\n        log_oc_sq = log_oc ** 2\n        log_cc = (price_data['Close'] \/ price_data['Close'].shift(1)).apply(np.log)\n        log_cc_sq = log_cc ** 2\n        rs = log_ho * (log_ho - log_co) + log_lo * (log_lo - log_co)\n\n    def f(v):\n        return (trading_periods * v.mean()) ** 0.5\n    \n    result = pd.DataFrame()\n\n    result['vol'] = rs.rolling(\n        window=window,\n        center=False\n    ).parallel_apply(func=f)\n\n    result['timestamp'] = price_data['timestamp']\n\n    return result.dropna()","921bb75f":"#from tqdm import tqdm\n\n\nimport matplotlib.pyplot as plt\nfrom IPython.display import HTML\nfrom matplotlib.animation import ArtistAnimation, FuncAnimation\n\n%matplotlib inline\n\nfrom pandarallel import pandarallel\npandarallel.initialize(progress_bar=False)\n\nvolatilities = {\n        'YangZhang':\"red\",\n        'GarmanKlass':\"green\",\n        'Parkinson':\"blue\"\n}\n\nperiods = 30*24*60\n\nexs = data['Asset_ID'].value_counts()\nprint(exs)","e3f9735f":"def print_vol_graph(asset, volatilities, periods):\n    \n    #plotly\n    #fig = make_subplots(rows=3, cols=1)\n    \n    #matplotlib\n    fig, axes = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(16,5), dpi= 80)\n    fig.subplots_adjust(hspace=0.5)\n    \n    asset_name = asset_details.loc[asset_details['Asset_ID']==asset]['Asset_Name'].values[0]\n    row_n = 0\n    for vf in volatilities.keys():\n        vol = get_estimator(data.loc[data['Asset_ID']==int(asset)],vf,periods)\n        axes[row_n].plot(\n            vol['vol'],\n            color=volatilities[vf],\n            linewidth=1\n        )\n        axes[row_n].set_ylabel(\" {} \".format(vf))\n        \n        #fig.add_trace(go.Scatter(x=vol['timestamp'], y=vol['vol'],\n        #              name = \"{} volatility\".format(vf),\n        #              line=dict(color=volatilities[vf], width=1)),\n        #              row=row_n,\n        #              col=1\n        #             )\n        row_n+=1\n    #fig.update_layout(height=700, width=900, title_text=\"{} volatilities\".format(asset_name))\n    #fig.show()\n    fig.suptitle(\"{} volatilities\".format(asset_name))\n    ","5598af9f":"print_vol_graph(0, volatilities, periods)","fe10ff63":"print_vol_graph(1, volatilities, periods)","b2da2fb5":"print_vol_graph(2, volatilities, periods)","c7c986ab":"print_vol_graph(3, volatilities, periods)","9f53c7b2":"print_vol_graph(4, volatilities, periods)","2bb40863":"print_vol_graph(5, volatilities, periods)","2ddb0ca2":"print_vol_graph(6, volatilities, periods)","7261a187":"print_vol_graph(7, volatilities, periods)","b509e0e7":"print_vol_graph(8, volatilities, periods)","acfce966":"print_vol_graph(9, volatilities, periods)","85227690":"print_vol_graph(10, volatilities, periods)","51f5c51f":"print_vol_graph(11, volatilities, periods)","59cbd987":"print_vol_graph(12, volatilities, periods)","2b3a71c4":"print_vol_graph(13, volatilities, periods)","40c3e22a":"**for the sake of memory efficiency lets not use plotly this time**","e35348cc":"**Plot 3 types of volatilities (monthly, 7-day rolling window) for each asset out of 14**","64673a35":"Just parallelised different volatitlites from\n[here](https:\/\/github.com\/jasonstrimpel\/volatility-trading)\nand made them all-in-one function"}}