{"cell_type":{"a847bd92":"code","fb97fbd9":"code","06057a25":"code","62795c0f":"code","fcde6dec":"code","73d63522":"code","4f3ba925":"markdown"},"source":{"a847bd92":"%%time\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fb97fbd9":"%%time\n# Install Pytrends\n!pip install pytrends","06057a25":"%%time\n# Import PyTrend\nfrom pytrends.request import TrendReq\nfrom pytrends import dailydata","62795c0f":"%%time\ndef extract_data(start_date: str, end_date: str, search_terms: list, countries:list) -> pd.DataFrame:\n    \"\"\"\n    A simple function to extract information as the score and unscaled_score for a list of search terms.\n    and specified list of countries for a specified start and end date\n    informatio is aggregated by day.\n    \n    Args: \n        start_date: Start date for the data extraction\n        end_date: End date for the data extraction\n        search_terms: A list of strings containing the search items example = ['hat', 'mug', 'sticker'] \n        countries: A list of strings containing the countries example = ['FI', 'SE']\n    \n    Returns: \n        search_df: Combined DataFrame of all the searched terms by country\n    \n    \"\"\"\n    start_date = pd.Timestamp(start_date)\n    end_date = pd.Timestamp(end_date)\n    \n    search_df = pd.DataFrame()\n\n    counter = 1\n    for search_term in search_terms:\n        for country in countries:\n            print('Extracting:',counter,'\/', len(search_terms) * len(countries), '...')\n            df = dailydata.get_daily_data(search_term, \n                                          start_year = start_date.year, \n                                          start_mon  = start_date.month, \n                                          stop_year  = end_date.year, \n                                          stop_mon   = end_date.month, \n                                          geo        = country,\n                                          verbose    = False\n                                         )\n\n            df['date'] = df.index\n            df['search_word'] = search_term\n            df['country'] = country\n            df['score'] = df[search_term]\n            df['score_unscaled'] = df[search_term + '_unscaled']\n            df = df[['date', 'search_word', 'country', 'score', 'score_unscaled']]\n            search_df = search_df.append(df)\n            counter += 1\n            \n    search_df = search_df.reset_index(drop=True)\n    print('...')\n    print('Extraction Completed!')\n    return search_df","fcde6dec":"%%time\nexample_df = extract_data(start_date = '01-01-2015', end_date = '01-01-2015', search_terms = ['hat', 'mug'], countries = ['FI', 'SE'])","73d63522":"%%time\nexample_df.sample(10)","4f3ba925":"# Extracting Google Search Data - PyTrends\nThe Following Notebook demonstrate how to use PyTrends to extract daily information form Google Search...<\/br>\nI've created a simple funtions that can extract multiple terms and countries and merge the results using the https:\/\/pypi.org\/project\/pytrends\/ libraries..."}}