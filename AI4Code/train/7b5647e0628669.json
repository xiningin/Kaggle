{"cell_type":{"3e47c52d":"code","598753c5":"code","dbb949cd":"code","bfb110b6":"code","724da9e2":"code","61f54d9b":"code","e5df3e38":"code","d3f82da2":"code","c9f659f2":"code","df92d64c":"code","1437ed4e":"code","872b2027":"markdown","537f5648":"markdown","43ae9b44":"markdown"},"source":{"3e47c52d":"!wget https:\/\/www.tbi.univie.ac.at\/RNA\/download\/ubuntu\/ubuntu_18_04\/viennarna_2.4.15-1_amd64.deb\n!apt-get install .\/viennarna_2.4.15-1_amd64.deb -y\n!git clone https:\/\/github.com\/DasLab\/arnie\n\n!\/opt\/conda\/bin\/python3.7 -m pip install --upgrade pip\n!git clone https:\/\/www.github.com\/DasLab\/draw_rna draw_rna_pkg\n!cd draw_rna_pkg && python setup.py install","598753c5":"import os\nimport sys\n\n!echo \"vienna_2: \/usr\/bin\" > arnie.conf\n!echo \"TMP: \/kaggle\/working\/tmp\" >> arnie.conf\n!mkdir -p \/kaggle\/working\/tmp\nos.environ[\"ARNIEFILE\"] = f\"\/kaggle\/working\/arnie.conf\"\nsys.path.append('\/kaggle\/working\/draw_rna_pkg\/')\nsys.path.append('\/kaggle\/working\/draw_rna_pkg\/ipynb\/')","dbb949cd":"%load_ext autoreload\n%autoreload 2\n%pylab inline\n\nimport seaborn as sns\nsns.set_context('poster')\nsns.set_style('white')\nimport numpy as np\nfrom arnie.pfunc import pfunc\nfrom arnie.free_energy import free_energy\nfrom arnie.bpps import bpps\nfrom arnie.mfe import mfe\nimport arnie.utils as utils\nfrom decimal import Decimal\nimport pandas as pd\nfrom draw import draw_struct\nfrom arnie.mea.mea import MEA","bfb110b6":"train = pd.read_json('..\/input\/stanford-covid-vaccine\/train.json', lines=True)\nsequence = train.sequence.values[0]\nsequence","724da9e2":"mfe_structure = mfe(sequence)\nprint(mfe_structure)","61f54d9b":"draw_struct(sequence, mfe_structure)","e5df3e38":"reactivity = np.zeros(len(sequence))\nreactivity68 = train.reactivity.values[0]\nreactivity[:len(reactivity68)] = reactivity68\ndraw_struct(sequence, mfe_structure, c = reactivity, cmap='plasma')\n# yellow = higher reactivity, blue = lower reactivity","d3f82da2":"bp_matrix = bpps(sequence)\nplt.imshow(bp_matrix, origin='lower left', cmap='gist_heat_r')","c9f659f2":"p_unp_vec = 1 - np.sum(bp_matrix, axis=0)\nplot(p_unp_vec)\nxlabel('Sequence position')\nylabel('p(unpaired)')","df92d64c":"draw_struct(sequence, mfe_structure, c = p_unp_vec, cmap='plasma')\n# yellow = higher unpaired probability, blue = higher paired probability","1437ed4e":"for i in range(10):\n    print(i)\n    sequence = train.sequence.values[i]\n    ground_truth_struct = train.structure.values[i]\n    bp_matrix = bpps(sequence)\n    \n    for log_gamma in range(-10,10):\n        mea_mdl = MEA(bp_matrix,gamma=10**log_gamma)\n        [exp_sen, exp_ppv, exp_mcc, exp_fscore] = mea_mdl.score_expected()\n        [sen, ppv, mcc, fscore] = mea_mdl.score_ground_truth(ground_truth_struct)\n\n        print(\"%d %d %s %.2f %.2f\" % (ground_truth_struct == mea_mdl.structure, log_gamma, mea_mdl.structure, exp_mcc, mcc))\n        if log_gamma == 0:\n            print(\"    %s\" % ground_truth_struct)\n            print(\"    %s\" % mfe(sequence))","872b2027":"## Following is based on https:\/\/github.com\/DasLab\/arnie\/blob\/master\/notebooks\/start_here.ipynb","537f5648":"## Preparation","43ae9b44":"## Setting"}}