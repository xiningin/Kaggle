{"cell_type":{"5ebd9f1b":"code","89f40a99":"code","37b90820":"code","43d41c80":"code","d6a32603":"code","7431ce28":"code","a473c326":"code","3418e00e":"code","43243806":"code","93fa0e30":"code","c29c8210":"code","8acb2c61":"code","ee0cb395":"code","451e8254":"code","0e24bb8a":"code","4df58728":"code","e903b104":"code","76fd4cf8":"code","d3e2d97b":"code","61271acd":"code","161d8ed4":"code","f21be5ad":"code","403b34ee":"code","8d8f90a1":"code","d4b8cefa":"code","a5129bd5":"code","666f2a17":"code","ef5e6645":"code","cbb336a1":"code","ee67298e":"code","5ef3ec84":"code","b984c269":"code","732a7eb6":"code","cb743a84":"code","61cb31f8":"code","d616d8ad":"code","fcc4be79":"code","53e3ba9d":"code","e7922f45":"code","f48ad8ed":"code","2e97e2cf":"code","89527f25":"code","6361601c":"code","1204b2fd":"code","cddf265c":"code","0f36f60c":"code","a4be267a":"code","20600924":"code","183f7702":"code","5e2756ab":"markdown","a7192c04":"markdown","3cc0f36a":"markdown","747d79eb":"markdown","c2ebe56c":"markdown","d59cd91f":"markdown","3e90b3b7":"markdown","131e37fb":"markdown","ba91ad69":"markdown","53e279f0":"markdown","45af5f53":"markdown","d8ddfe8e":"markdown"},"source":{"5ebd9f1b":"# Installing Prophet\n\n! pip install prophet","89f40a99":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport random\n\n# Importing Prophet\nfrom fbprophet import Prophet\n\n# importing module\nimport warnings\n  \n# adding entry into the specifications\n# of the warnings filter.\nwarnings.filterwarnings('ignore')","37b90820":"df= pd.read_csv('..\/input\/avocado-prices\/avocado.csv')\ndf","43d41c80":"df.info()","d6a32603":"df.describe()","7431ce28":"sns.heatmap(df.isnull(), yticklabels= False,cbar= False , cmap='viridis' )\n# there is no null value","a473c326":"import plotly.offline as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True)\nfrom plotly import tools\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", message=\"numpy.dtype size changed\")","3418e00e":"# we saw there are 2 type of Avocardo Lets check their percentage\n\nType=df.groupby('type')['Total Volume'].agg('sum')\n\nvalues=[Type['conventional'],Type['organic']]\nlabels=['conventional','organic']\n\ntrace=go.Pie(labels=labels,values=values)\npy.iplot([trace])","43243806":"plt.figure(figsize=(14,10))\nsns.scatterplot(x='Total Volume', y = 'AveragePrice', hue= 'type', data= df)","93fa0e30":"con=df[df['type']=='conventional'].groupby('year')['Total Volume'].agg('mean')\norg=df[df['type']=='organic'].groupby('year')['Total Volume'].agg('mean')\n\ntrace1=go.Bar(x=con.index,y=con,name=\"Conventional\",\n             marker=dict(\n        color='rgb(58,200,225)',\n        line=dict(\n            color='rgb(8,48,107)',\n            width=1.5),\n        ),\n    opacity=0.7)\n\ntrace2=go.Bar(x=con.index,y=org,name=\"Organic\",\n             marker=dict(\n        color='rgb(158,202,225)',\n        line=dict(\n            color='rgb(8,48,107)',\n            width=1.5),\n        ),\n    opacity=0.7)\n\ndata=[trace1,trace2]\n\nlayout=go.Layout(barmode=\"stack\",title=\"Organic vs. Conventional (Mean Volume)\",\n                yaxis=dict(title=\"Volume\"))\nfig=go.Figure(data=data,layout=layout)\npy.iplot(fig)","c29c8210":"import seaborn as sns\n# Split Date into 3 different columns\n\ndf['Year'], df['Month'],  df['Day'] = df['Date'].str.split('-').str\n\n# compare month wise price of avocado \n# organic and conventional \n\ndf['Month'] = df['Month'].replace({'01': 'January', '02': 'February', '03': 'March', '04': 'April', '05': 'May', \n                                   '06': 'June', '07': 'July', '08': 'August', '09': 'September', '10': 'October', \n                                   '11': 'November', '12': 'December'})\n\n\nax = sns.catplot(x=\"Month\", y=\"AveragePrice\", hue=\"type\", \n            kind=\"box\", data=df, height=8.5, linewidth=2.5, aspect=2.8,palette=\"Set2\");","8acb2c61":"sns.pairplot(df.iloc[:,8:11], palette=\"husl\",height=5.5)","ee0cb395":"df.region.unique().sum()","451e8254":"# Sort by date\ndf = df.sort_values('Date')\ndf","0e24bb8a":"# Date vs average price\n\nplt.figure(figsize=(20,10))\nplt.xticks(np.arange(df.shape[0])[::5], df.Date[::5], rotation = 45)\nplt.plot(df['Date'], df['AveragePrice'])\nplt.tick_params(axis='x', which='major', labelsize=10)\nplt.tight_layout()\nplt.savefig('timeseries.png')\n# uncomment to get grid plt.grid()\n","4df58728":"''' #converting dataframe to array\ndate = pd.Series(df['Date'])\nx=type(date.to_numpy())\n\n# Age price\nav= pd.Series(df['AveragePrice'])\ny=type(date.to_numpy())\n\nprint(y)'''","e903b104":"'''#converting dataframe to array\ndate = pd.Series(df['Date'])\nx=type(date.to_numpy())\n\n# Age price\nav= pd.Series(df['AveragePrice'])\ny=type(date.to_numpy())\n                 \n\nplt.figure(figsize=(20,10))\nplt.xticks(rotation = 90)\nplt.xticks(np.arange(0, len(x)+1, 5))\nplt.plot(x, y)\nplt.tick_params(axis='x', which='major', labelsize=10)\nplt.tight_layout()\n# uncomment to get grid plt.grid()'''\n","76fd4cf8":"# correlation version region and price\nplt.figure(figsize=[20,15])\nplot= sns.countplot(x= 'region', data= df)\nplt.xticks(rotation = 90)\n# plt.setp(plot.get_xticklabels(),rotation=90)\n# Was returning lots of None, so decided to go with\n# Didn't work plt.xticks(rotation = 90, np.array(0,4,step=5))\n","d3e2d97b":"region_list=list(df.region.unique())\naverage_price=[]\n\nfor i in region_list:\n    x=df[df.region==i]\n    region_average=sum(x.AveragePrice)\/len(x)\n    average_price.append(region_average)\n\ndf1=pd.DataFrame({'region_list':region_list,'average_price':average_price})\nnew_index=df1.average_price.sort_values(ascending=False).index.values\nsorted_data=df1.reindex(new_index)\n\nplt.figure(figsize=(24,10))\nax=sns.barplot(x=sorted_data.region_list,y=sorted_data.average_price)\n\nplt.xticks(rotation=90)\nplt.xlabel('Region')\nplt.ylabel('Average Price')\nplt.title('Average Price of Avocado According to Region')","61271acd":"filter1=df.region!='TotalUS'\ndf1=df[filter1]\n\nregion_list=list(df1.region.unique())\naverage_total_volume=[]\n\nfor i in region_list:\n    x=df1[df1.region==i]\n    average_total_volume.append(sum(x['Total Volume'])\/len(x))\ndf3=pd.DataFrame({'region_list':region_list,'average_total_volume':average_total_volume})\n\nnew_index=df3.average_total_volume.sort_values(ascending=False).index.values\nsorted_data1=df3.reindex(new_index)\n\nplt.figure(figsize=(22,10))\nax=sns.barplot(x=sorted_data1.region_list,y=sorted_data1.average_total_volume)\n\nplt.xticks(rotation=90)\nplt.xlabel('Region')\nplt.ylabel('Average of Total Volume')\nplt.title('Average of Total Volume According to Region')","161d8ed4":"sns.countplot(x= 'year', data= df)","f21be5ad":"# Since Prophet require only 2 columns namely\n# Data and Avg Price\n# Lets create new df for prophet only\n\nprophet_df= df[['Date', 'AveragePrice']]\nprophet_df","403b34ee":"# Prophet expect Date in its variable as DS and target variable as Y to operate. This how it was designed.\n# Thus have to rename our column names in prophet_df\nprophet_df= prophet_df.rename(columns={'Date' :'ds' , 'AveragePrice':'y'})\nprophet_df","8d8f90a1":"prophet_df.info()","d4b8cefa":"prophet_df.describe()","a5129bd5":"# Intantiate (represent as or by an instance.) the Prophet object to lets say m \n# P IN PROPHET IS ALWAYS CAPS\nm = Prophet()","666f2a17":"m.fit(prophet_df)","ef5e6645":"# Forecast the future\nfuture = m.make_future_dataframe(periods = 365)\nforecast = m.predict(future)","cbb336a1":"forecast","ee67298e":"plt.figure(figsize=(12,8)) # 8 is hight\n\nplt.xticks(np.arange(prophet_df.shape[0])[::5], prophet_df.ds[::5], rotation=90)\nplt.scatter(prophet_df['ds'],prophet_df['y'] )","5ef3ec84":"figure = m.plot( forecast, xlabel= 'Date', ylabel= 'Price')","b984c269":"m.plot( forecast, xlabel= 'Date', ylabel= 'Price')","732a7eb6":"figure = m.plot_components(forecast)","cb743a84":"# Lets check if Price of Avocardo is raised due to rise in demand.\n\nfig = plt.figure(figsize=(20, 15))\n\nax = fig.add_subplot(121)\nax2 = fig.add_subplot(122)\n\nx = df['AveragePrice']\ny = df['Date']\nz = df['Total Volume']\n\nax.plot(x, color='blue')\nax.plot(y, color='black')\nax2.plot(y, color='black')\nax2.plot(z, color='green')\n\n'''ax.set_xticks(np.arange(0, len(x)+1, 5))\nax.set_yticks(np.arange(0, max(y), 2))\nax2.set_xticks(np.arange(0, len(x)+1, 25))\nax2.set_yticks(np.arange(0, max(y), 25))'''\n","61cb31f8":"# Sub set\ndf_chicago= df[df['region']== 'Chicago']\ndf_chicago","d616d8ad":"# Sort by date\ndf_chicago= df_chicago.sort_values('Date')\ndf_chicago","fcc4be79":"#\nplt.figure(figsize=(10,8))\nplt.xticks(np.arange(df_chicago.shape[0])[::5], df_chicago.Date[::5], rotation=90)\nplt.plot(df_chicago['Date'], df_chicago['AveragePrice'])","53e3ba9d":"plt.figure(figsize=(10,8))\n\n# plt.xticks(np.arange(df_chicago.shape[0])[::X], df_chicago.Date[::X], rotation=90)\n# X represents interval\nplt.xticks(np.arange(df_chicago.shape[0])[::5], df_chicago.Date[::5], rotation=90)\n\nplt.plot(df_chicago['Date'], df_chicago['Total Volume'])","e7922f45":"# fig = plt.figure(figsize=(25, 20))\n# Total Volume = Total no of avocado sold\n\nx= df_chicago['Date']\ny= df_chicago['AveragePrice']\nz= df_chicago['Total Volume']\nafig, (ax1, ax2) = plt.subplots(2, figsize=(15,10), sharex=True)\nplt.xticks(np.arange(df_chicago.shape[0])[::10], df_chicago.Date[::10], rotation=90)\nfig.suptitle('price and volume')\nax1.plot(x, y)\nax2.plot(x, z)\n","f48ad8ed":"df_chicago.head(1)","2e97e2cf":"df_con = df_chicago[df_chicago['type']== 'conventional']\ndf_con","89527f25":"# Organic\ndf_or = df_chicago[df_chicago['type']== 'organic']\ndf_or","6361601c":"# Plotting both prices simultaneously of organic and con\n\nX =df_or['Date']\ny= df_or['AveragePrice']\nz= df_con['AveragePrice']\n\nplt.figure(figsize=(20,8))\nplt.xticks(np.arange(df_or.shape[0])[::5], df_or.Date[::5], rotation=90)\nplt.plot(X, y, color='r', label='Organic')\nplt.plot(X, z, color='g', label='Conventional')\n  \n# Naming the x-axis, y-axis and the whole graph\nplt.xlabel(\"Date\")\nplt.ylabel(\"Price\")\nplt.title(\"Price of organic vs Conventional\")\n  \n# Adding legend, which helps us recognize the curve according to it's color\nplt.legend()\n\n# Placing figsize over here didn't worked but placing it above .plot worked as charme\n\n# To load the display window\nplt.show()\n\n# Pro tip ALWAYS PLACE FIGSIZE BEFORE plt.plot.\n","1204b2fd":"df_con= df_con.rename(columns ={'Date':'ds', 'AveragePrice':'y'})\ndf_con = df_con[['ds', 'y']]\ndf_con","cddf265c":"m1=Prophet()","0f36f60c":"m1.fit(df_con)","a4be267a":"future = m.make_future_dataframe(periods=365)\nforecast= m1.predict(future)","20600924":"forecast","183f7702":"figure = m1.plot(forecast, xlabel ='Date', ylabel = 'Price')","5e2756ab":"## Prediction for Chicago ","a7192c04":"* Here we can clearly see the cost of Organic Avocado is higher than Conventional avocado.","3cc0f36a":"We can see there are definatly some Outlier\n* n statistics, an outlier is a data point that differs significantly from other observations. An outlier may be due to variability in the measurement or it may indicate experimental error; the latter are sometimes excluded from the data set. An outlier can cause serious problems in statistical analyses.\n* **When we predicted the price of avocado on avg it showed it was going down but in case of Chicago it is going down but fall is low compared to previous prediction.**","747d79eb":"* We can see only 2.81% of all Avocado sold is organic\n* Thus we can conclude the price of Organic Avocado won't affect the price over all \n* So it might be better if we drop it","c2ebe56c":"## EDA","d59cd91f":"* Why cost of Avocardo increase in month of Oct?\n* Why cost of avocardo decreases in january?\n* **Are related with harvesting period?**","3e90b3b7":"**Here we can observe price of Avocado is inversely proportional to volume of sold avocard.**\n* lets compare price of organic avocardo with ","131e37fb":"### Checking for Chicago","ba91ad69":"## Setting Axis-Level Tick Frequency in Matplotlib\nYou can use the set_xticks() and set_yticks() functions on the returned Axes instance when adding subplots to a Figure. Let's create a Figure with two axes and change the tick frequency on them separately:","53e279f0":"Prophet showed us the trends what are we expecting what are the **Trends**.\n* Last row dates to **25th March 2019** Though original data had prices till 25th March 2018 only\n* yhat_upper = upper limit.\n* yhat_lower = lower limit.","45af5f53":"## Make Predictions","d8ddfe8e":"# Aim: To understand how to use FB_Prophet\n* We won't be able to critically analyse the reason for price fall or rise during certain time of year. \n                Reason Being\n                1. We don't know from where these Avocardos are coming\n                2. Thus don't know about its harvesting time.\n                3. Though we have voume of avocardo in transaction. Lets see how we can get that in our favour\n* **And remember Prophet works best with SEASONAL DATA**\n* This is why I think predicting price of Avocado will be best fit as supply of Avocado is dependent on season of harvesting."}}