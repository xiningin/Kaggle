{"cell_type":{"fc27f271":"code","478520cf":"code","fa7f1fca":"code","37cb5692":"code","fa3ef44a":"code","a656d50a":"code","523560cf":"code","68ef3ab7":"code","9e3e0a1f":"code","e5e76313":"code","3b99a171":"code","0bf780a2":"code","3bd323f4":"code","54908eb5":"code","b0fe956c":"code","3472ef89":"code","9623ca8f":"code","f57067d5":"code","95cbf065":"code","dc67fb89":"code","528a88b5":"code","aec52e81":"markdown"},"source":{"fc27f271":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","478520cf":"df1 = pd.read_csv('\/kaggle\/input\/recipes-from-reddit\/Recipes.csv')\ndf2 = pd.read_csv('\/kaggle\/input\/recipes-from-reddit\/Recipes_2.csv')","fa7f1fca":"df1.shape","37cb5692":"df1.info()","fa3ef44a":"df1.head()","a656d50a":"df2.shape","523560cf":"df2.info()","68ef3ab7":"df2.head()","9e3e0a1f":"df1 = df1.append(df2, ignore_index = True)","e5e76313":"df1.shape","3b99a171":"df1.head()","0bf780a2":"df1.info()","3bd323f4":"df1.describe()","54908eb5":"df1.columns","b0fe956c":"df1['num_comments'].value_counts()","3472ef89":"plt.figure(figsize=(20, 8))\ndf1['num_comments'].hist(bins=80)\nplt.xlabel('Number of comments')\nplt.ylabel('Frequency')\nplt.title('Number of comments per recipes')\nplt.show()","9623ca8f":"df1['n_char'].value_counts()","f57067d5":"plt.figure(figsize=(20, 8))\ndf1['n_char'].hist(bins=80)\nplt.xlabel('Number of Characters')\nplt.ylabel('Frequency')\nplt.title('Number of Characters per recipes')\nplt.show()","95cbf065":"plt.figure(figsize= (20,8))\nplt.plot(df1['n_char'], df1['num_comments'], linestyle='none', marker='o', color='b')\nplt.show()","dc67fb89":"plt.figure(figsize=(10,6))\nplt.boxplot(df1['n_char'])\nplt.ylabel('Value')\nplt.title(\"Simple Box Plot\")","528a88b5":"plt.figure(figsize=(10,6))\nplt.boxplot(df1['num_comments'])\nplt.ylabel('Value')\nplt.title(\"Simple Box Plot\")","aec52e81":"# Merge DataFrames"}}