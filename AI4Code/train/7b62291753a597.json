{"cell_type":{"83d9548f":"code","41d6a0e2":"code","e3e8e948":"code","53b27e21":"code","595c539b":"code","e31c3d3f":"code","3b81eded":"code","0281570d":"code","de047e9e":"code","42366456":"code","b1090dc3":"code","cc58d8ff":"code","31176646":"code","e5d94ffd":"code","b71e71a9":"code","34aa2a66":"markdown"},"source":{"83d9548f":"import pandas as pd\nimport time\nimport numpy as np\nfrom lightgbm import LGBMRegressor\nfrom sklearn.linear_model import LinearRegression\nimport gresearch_crypto\nimport gc\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\nTRAIN_CSV = '\/kaggle\/input\/g-research-crypto-forecasting\/train.csv'\nASSET_DETAILS_CSV = '\/kaggle\/input\/g-research-crypto-forecasting\/asset_details.csv'\n\ndef read_csv_strict(file_name='\/kaggle\/input\/g-research-crypto-forecasting\/train.csv'):\n    df = pd.read_csv(file_name)\n    df['datetime'] = pd.to_datetime(df['timestamp'], unit='s')\n    df = df[df['datetime'] > '2019-12-1 00:00:00' ].set_index('timestamp')\n    df = df[df['datetime'] < '2021-06-13 00:00:00' ]\n    \n    return df","41d6a0e2":"df_train = read_csv_strict()\nasset=[]\nfor i in range(14):\n    asset.append(df_train[df_train['Asset_ID']==i])\ndel df_train","e3e8e948":"def log_return(series, periods=1):\n    return np.log1p(series).diff(periods=periods)\ndef get_features(data):\n    \n    data['Upper_Shadow'] = data['High'] - np.maximum(data['Close'], data['Open'])\n    data['Lower_Shadow'] = np.minimum(data['Close'], data['Open']) - data['Low']\n    \n    \n    data['volume2count'] = data['Volume'] \/ (data['Count'] + 1)\n    \n    data['Low_15min']=(pd.concat([data['Low'].shift(i) for i in range(16)],axis=1)).min(axis=1)\n    data['High_15min']=(pd.concat([data['High'].shift(i) for i in range(16)],axis=1)).max(axis=1)\n\n    data['Upper_Shadow_15min'] = data['High_15min'] - np.maximum(data['Close'], data['Open'])\n    data['Lower_Shadow_15min'] = np.minimum(data['Close'], data['Open']) - data['Low_15min']\n    \n    for i in [1,2,15,16]:\n        data['Target-'+str(i)]=data['Target'].shift(i)\n    \n    for i in [1,15,45,60]:\n        data['lr'+str(i)]=log_return(data['Close'], periods=i)\n        data['lrv'+str(i)]=log_return(data['VWAP'], periods=i)\n    \n    data['Close_position']=(data['Close']-data['Low'])\/(data['High']-data['Low']+1)\n    data['Close_position_15min']=(data['Close']-data['Low_15min'])\/(data['High_15min']-data['Low_15min']+1)\n    \n    data['Open_position']=(data['Open']-data['Low'])\/(data['High']-data['Low']+1)\n    data['Open_position_15min']=(data['Open']-data['Low_15min'])\/(data['High_15min']-data['Low_15min']+1)   \n    \n    data['h\/h15']=(data['High']\/data['High_15min']).transform(np.log1p)\n    data['l\/l15']=(data['Low']\/data['Low_15min']).transform(np.log1p)\n    for c in ['High','Low','VWAP','High_15min','Low_15min']:\n        data['Close\/'+c]=(data['Close']\/data[c]).transform(np.log1p)\n    for c in ['Open','High','Low','Close','VWAP','High_15min','Low_15min']:\n        data[c]=data[c].transform(np.log1p)\n    \n    return 0","53b27e21":"for a in asset :\n    get_features(a)\n    a.replace(-np.inf, np.nan,inplace=True)\n    a.replace(np.inf, np.nan,inplace=True)\n    a.dropna(inplace=True)","595c539b":"features=asset[1].columns.difference(['Asset_ID','Target','datetime'])","e31c3d3f":"x=[]\nfor i in range (14):\n    x.append( asset[i].loc[:, features].values)\n    x[i] = StandardScaler().fit_transform(x[i])","3b81eded":"principal_df=[]\nfor k in range(14):\n    pca_df = PCA(0.95)\n    principalComponents_df = pca_df.fit_transform(x[k])\n    principal_df .append( pd.DataFrame(data = principalComponents_df\n                 , columns = ['feature '+str(i) for i in range(1,principalComponents_df.shape[1]+1)]))","0281570d":"for k in range(14):\n    principal_df[k]['timestamp']=asset[k].reset_index()['timestamp']\n    principal_df[k]=principal_df[k].set_index('timestamp')\ndel x","de047e9e":"y=[]\nfor i in range(14):\n    y.append(asset[i].Target)","42366456":"models=[]\nfor i in range(14):\n    models.append(LinearRegression())","b1090dc3":"\nfor i in range(14):\n    models[i].fit(principal_df[i][:200000],y[i][:200000])\n        ","cc58d8ff":"preds=[]\nfor i in range(14):\n    pred=(models[i].predict(principal_df[i][200000:210000]))\n    preds.append(pred)","31176646":"for i in range(14):\n    pred=pd.Series(preds[i].reshape(10000,))\n    true=pd.Series(y[i][200000:210000].reset_index().Target)\n    print('for asset'+str(i))\n    print(pd.DataFrame({'pred':pred,'true':true}).corr().iloc[1,0])","e5d94ffd":"import matplotlib.pyplot as plt\ni=500\nx=240000\nplt.plot(principal_df[1][x:x+i].index,y[1][x:x+i])\nplt.plot(principal_df[1][x:x+i].index, models[1].predict(principal_df[1][x:x+i]))","b71e71a9":"i=500\nx=240000\nplt.plot(principal_df[0][x:x+i].index,y[0][x:x+i])\nplt.plot(principal_df[0][x:x+i].index, models[0].predict(principal_df[0][x:x+i]))","34aa2a66":"FE"}}