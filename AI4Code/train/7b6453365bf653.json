{"cell_type":{"accec81d":"code","49cd9354":"code","502c28cd":"code","86b6a8e0":"code","8f507336":"code","a80c60b7":"code","6a2ca680":"code","cf430a39":"code","5a2fdd80":"code","aa9c4304":"code","6d613bf3":"code","16d043a5":"markdown","db6d06aa":"markdown","3eef630d":"markdown","3fa57b2a":"markdown","15c1e8b2":"markdown"},"source":{"accec81d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","49cd9354":"pip install bigjson","502c28cd":"pip install pycairo","86b6a8e0":"import bigjson\nfrom igraph import *\nimport igraph as ig\nfrom cairo import *\nimport matplotlib.pyplot as plt","8f507336":"count  = 0\nreferences_dict = {'id':[],\n                  'title':[],\n                  'doc_type':[],\n                  'publisher':[],\n                  'venue_name':[],\n                  'venue_ID':[],\n                  'references':[]}\n\nwith open('..\/input\/citation-network-dataset\/dblp.v12.json', 'rb') as f:\n    j = bigjson.load(f)\n    while count<130:\n        element = j[count]\n        if 'references' in element.keys():\n            for i,val in enumerate(element['references']):\n                references_dict['references'].append(element['references'][i])\n                references_dict['id'].append(element['id'])\n                references_dict['title'].append(element['title'])\n                if element['publisher'] != \"\":\n                     references_dict['publisher'].append(element['publisher'])\n                else:\n                     references_dict['publisher'].append(np.nan)\n                if element['doc_type'] != \"\":\n                    references_dict['doc_type'].append(element['doc_type'])\n                else:\n                    references_dict['doc_type'].append(np.nan)\n                if 'venue' in element.keys():\n                    if 'raw' in element['venue'].keys():\n                        references_dict['venue_name'].append(element['venue']['raw'])\n                    else:\n                        references_dict['venue_name'].append(np.nan)\n                    if 'id' in element['venue'].keys():\n                        references_dict['venue_ID'].append(element['venue']['id'])\n                    else:\n                        references_dict['venue_ID'].append(np.nan)\n                else:\n                    references_dict['venue_name'].append(np.nan)\n                    references_dict['venue_ID'].append(np.nan)\n\n        else:\n            references_dict['references'].append(np.nan)\n            references_dict['id'].append(element['id'])\n            references_dict['title'].append(element['title'])\n            \n            if element['publisher'] != \"\":\n                references_dict['publisher'].append(element['publisher'])\n            else:\n                references_dict['publisher'].append(np.nan)\n            \n            if element['doc_type'] != \"\":\n                    references_dict['doc_type'].append(element['doc_type'])\n            else:\n                    references_dict['doc_type'].append(np.nan)\n                \n            if 'venue' in element.keys():\n                    if 'raw' in element['venue'].keys():\n                        references_dict['venue_name'].append(element['venue']['raw'])\n                    else:\n                        references_dict['venue_name'].append(np.nan)\n                    if 'id' in element['venue'].keys():\n                        references_dict['venue_ID'].append(element['venue']['id'])\n                    else:\n                        references_dict['venue_ID'].append(np.nan)\n            else:\n                    references_dict['venue_name'].append(np.nan)\n                    references_dict['venue_ID'].append(np.nan)\n        \n        count = count + 1","a80c60b7":"data = pd.DataFrame.from_dict(references_dict)\ndata.head(5)","6a2ca680":"reference_doc = pd.concat([data.loc[:,['id', 'doc_type']].drop_duplicates(), data[data['references'].notna()].loc[:, ['references', 'doc_type']].rename(columns = {'references': 'id'})],axis = 0).sort_values(by=['id'])\nreference_list = list(reference_doc['id'].values)\ndoc_list = list(reference_doc['doc_type'].values)\ncount = len(reference_list)","cf430a39":"references_graph = Graph(directed = False)\nreferences_graph.add_vertices(count)\nreferences_graph.vs['id_reference'] = reference_list\nreferences_graph.vs['doc_type'] = doc_list","5a2fdd80":"def add_edge(x):\n    \"\"\"\n    This function adds an edge (u,v) with: \n    u = index of 'id' vertex\n    v = index of 'references' vertex, with duplicate values being considered different \n    \"\"\"\n    references_graph.add_edge(reference_list.index(x.id),reference_list.index(x.references))\n    return x.id,x.references","aa9c4304":"temp = data[data['references'].notna()].apply(add_edge, axis = 1)","6d613bf3":"color_dict = {\"Conference\": \"blue\", \n              \"Journal\": \"red\", \n              \"Repository\": \"green\",\n               np.nan: \"purple\",\n              'Patent': 'orange',\n              'Other': 'black'}\n\nx = list(str(i) for i in color_dict.keys())\ny = [5 for i in range(len(x))]\nfig = plt.figure(figsize = (3,1.5))\nax1 = plt.axes(frameon=False)\nax1.axes.get_xaxis().set_visible(False)\nplt.barh(x,y, \n         color = list(color_dict.values()))\nplt.show()\n\nreferences_graph.vs[\"color\"] = [color_dict.get(doc_type,'black') for doc_type in references_graph.vs[\"doc_type\"]]\nig.plot(references_graph,\n        vertex_size=7)","16d043a5":"## **Network Visualizations**\n* The graph below shows a small network of publications (number = 130) along with their references\n* Color indicates the 'doc_type' of the publication; each reference has been colored with the same color as its source i.e., the concered publication\n* As expected, majority of references are refered only once in the small subset; a few have around 2 publications refering them","db6d06aa":"## **Data Preparation**\n**Note**: We will consider only **<=130** publications due to low computational cost and clearer visualizations formed by smaller subset","3eef630d":"## **Citation Network Analysis**\n**Note**: This is an ongoing personal research project. More modifications will be included in future versions","3fa57b2a":"#### The loop below is inefficient and renders the required results in a lot of time (needs work)","15c1e8b2":"#### We keep unique values in the **id** column and non-null values in **references** colunmn along with corresponding values of **doc_type** column"}}