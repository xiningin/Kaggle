{"cell_type":{"6f3c2da2":"code","bcf3cb40":"code","d6d0122d":"code","63272faf":"code","abd31f09":"code","2fd16d3c":"code","c3dfdf62":"code","0dcfdf1b":"code","e4c6a804":"code","3f2acb35":"code","09e176e2":"code","182e8422":"code","f439daee":"code","1a95f0c6":"markdown","75679996":"markdown","3b981a96":"markdown","d593ccf2":"markdown","0efc215b":"markdown","672f98ce":"markdown","fbe5eba1":"markdown","5abf0413":"markdown","7ad2df9e":"markdown"},"source":{"6f3c2da2":"for i in 7:\n    print(i)","bcf3cb40":"for i in range(7):\n    print(i)","d6d0122d":"#Though it is iterable, it is not a iterator\nnext(range(7))","63272faf":"#converting iterable to iterator\na = iter(range(7))","abd31f09":"next(a)","2fd16d3c":"# cube of a number\ndef generate_cube(n):\n    for i in range(n):\n        c = i**3\n        yield c\n\ngenerate_cube(4)","c3dfdf62":"for i in generate_cube(4):\n    print(i)","0dcfdf1b":"next(generate_cube(4))","e4c6a804":"q = iter(generate_cube(4))","3f2acb35":"next(q)","09e176e2":"#Fibonacci series\ndef gen_fibo(n):\n    a, b = 1, 1\n    for i in range(n):\n        yield a\n        a, b = b, a+b","182e8422":"gen_fibo(10)","f439daee":"for i in gen_fibo(10):\n    print(i)","1a95f0c6":"Now it is converted to an itmerator","75679996":"Differencr between for loop and next() is that for loop knows when to end the loop whereas next() always searches for the next element and it will show an error if no element is present","3b981a96":"Iterable is an object, which one can iterate over. It generates an Iterator when passed to iter() method. Iterator is an object, which is used to iterate over an iterable object using __next__() method. Iterators have __next__() method, which returns the next item of the object.\n\nNote that every iterator is also an iterable, but not every iterable is an iterator.","d593ccf2":"# Iterable, Iterator, Generator ","0efc215b":"A generator-function is defined like a normal function, but whenever it needs to generate a value, it does so with the yield keyword rather than return. If the body of a def contains yield, the function automatically becomes a generator function.","672f98ce":"Difference between return statement and yield is that return statement returns the value directly whereas yield returns object ","fbe5eba1":"next() always returns 0 which means that generator is not an iterator. To convert it we will use iter()","5abf0413":"Here we can see that generator is iterable, now let us see whether it is a iterator or not","7ad2df9e":"#### Generator"}}