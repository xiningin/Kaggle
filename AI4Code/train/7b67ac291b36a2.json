{"cell_type":{"4277289e":"code","d0f0e3cb":"code","fc42ef5a":"code","7667e896":"code","45c46c08":"code","6df778af":"code","a5b5093c":"code","625d7e04":"code","fe30b53a":"code","210c504a":"code","a727fd08":"code","87277aa9":"code","606bb313":"code","d6f110ce":"code","a04f1143":"code","7f6b22bc":"code","896f56ac":"code","c0616c11":"code","f6b8a4ac":"code","f47da45c":"code","a8d120be":"code","a19ce8cc":"code","93a3689d":"code","f0566aff":"code","70abf27c":"code","27ed1f9a":"code","6c47e350":"code","120cef03":"code","e0143e50":"code","c6427647":"code","4da20b3a":"code","df541cdc":"code","4ddf9f36":"code","34fbfeb1":"markdown","cdd066d7":"markdown","cfee5e5b":"markdown","def61b9c":"markdown","1e3b2723":"markdown","09fdf82d":"markdown","123bf27f":"markdown"},"source":{"4277289e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf","d0f0e3cb":"data = pd.read_csv('..\/input\/summer-products-and-sales-in-ecommerce-wish\/summer-products-with-rating-and-performance_2020-08.csv')","fc42ef5a":"data","7667e896":"columns_to_drop = ['title', 'title_orig', 'currency_buyer', 'shipping_option_name', 'urgency_text', 'merchant_title', 'merchant_name','merchant_info_subtitle',\n                   'merchant_id', 'merchant_profile_picture', 'product_url', 'product_picture', 'product_id', 'tags', 'has_urgency_banner', 'theme', 'crawl_month', 'origin_country']","45c46c08":"data.drop(columns_to_drop, axis=1, inplace=True)","6df778af":"data","a5b5093c":"data.isnull().sum()","625d7e04":"data['product_variation_size_id'].value_counts()","fe30b53a":"size_ordering = ['XXS', 'XS', 'S', 'M', 'L', 'XL', 'XXL']","210c504a":"def ordinal_encode(data, column, ordering):\n    return data[column].apply(lambda x: ordering.index(x) if x in ordering else None)","a727fd08":"data['product_variation_size_id'] = ordinal_encode(data, 'product_variation_size_id', size_ordering)","87277aa9":"data['product_variation_size_id']","606bb313":"data['product_color'].unique()","d6f110ce":"pd.get_dummies(data['product_color'])","a04f1143":"def onehot_encode(data, column):\n    dummies = pd.get_dummies(data[column])\n    data = pd.concat([data, dummies], axis=1)\n    data.drop(column, axis=1, inplace=True)\n    return data","7f6b22bc":"data = onehot_encode(data, 'product_color')","896f56ac":"(data.dtypes == 'object').sum()","c0616c11":"data.isnull().sum()","f6b8a4ac":"null_columns = ['rating_five_count', 'rating_four_count', 'rating_three_count',\n                'rating_two_count', 'rating_one_count', 'product_variation_size_id']","f47da45c":"for column in null_columns:\n    data[column] = data[column].fillna(data[column].mean())","a8d120be":"data.isnull().sum().sum()","a19ce8cc":"data","93a3689d":"y = data['units_sold']\nX = data.drop('units_sold', axis=1)","f0566aff":"scaler = MinMaxScaler()\nX = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)","70abf27c":"y.unique()","27ed1f9a":"encoder = LabelEncoder()\n\ny = encoder.fit_transform(y)\ny_mappings = {index: label for index, label in enumerate(encoder.classes_)}\ny_mappings","6c47e350":"y","120cef03":"X","e0143e50":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8)","c6427647":"inputs = tf.keras.Input(shape=(124,))\nx = tf.keras.layers.Dense(16, activation='relu')(inputs)\nx = tf.keras.layers.Dense(16, activation='relu')(x)\noutputs = tf.keras.layers.Dense(15, activation='softmax')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\n\nmodel.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)\n\n\nbatch_size = 32\nepochs = 160\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=batch_size,\n    epochs=epochs,\n    verbose=0\n)","4da20b3a":"plt.figure(figsize=(14, 10))\n\nepochs_range = range(1, epochs + 1)\ntrain_loss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.plot(epochs_range, train_loss, label=\"Training Loss\")\nplt.plot(epochs_range, val_loss, label=\"Validation Loss\")\n\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.legend('upper right')\n\nplt.show()","df541cdc":"np.argmin(val_loss)","4ddf9f36":"model.evaluate(X_test, y_test)","34fbfeb1":"# Training","cdd066d7":"## Encoding","cfee5e5b":"# Preprocessing","def61b9c":"# Getting Started","1e3b2723":"## Scaling","09fdf82d":"## Missing Values","123bf27f":"### A little more encoding"}}