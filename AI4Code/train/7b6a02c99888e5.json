{"cell_type":{"e4a289d8":"code","0d255b29":"code","41f60d1b":"code","85af7bbc":"code","80f4ef63":"code","3e6861d1":"code","a13c73f1":"code","38cf812b":"code","7a89ef51":"code","8b21bd8b":"code","468da2db":"code","609fb729":"code","2ba71475":"code","1d55c0e2":"code","02d83592":"code","dd11d754":"code","8b5253b0":"code","91f0cd07":"code","bafcb4fb":"code","86d790c7":"code","5eaa57d4":"code","6ad9344f":"code","db88b465":"code","bae6c6ab":"code","0c6186e9":"code","5da021c9":"code","e0d6f485":"code","9b9e9e37":"code","f6910c7b":"code","980b367c":"code","910df2c7":"code","71387d06":"code","008738d6":"code","fe3feda7":"code","8eb50be8":"code","ed59b15f":"code","10ff77bf":"code","cfe5ffa2":"code","91c487c2":"code","fba334be":"code","00c0a4a1":"code","9da32a82":"code","17cc3471":"code","cebcfdfb":"code","49aa6670":"markdown","8ec38a8e":"markdown","d08d9ddd":"markdown","c07b8346":"markdown","73b68311":"markdown","24fec3fc":"markdown","d76efeb6":"markdown","2ad53b8e":"markdown","7d5a2611":"markdown"},"source":{"e4a289d8":"import sklearn","0d255b29":"import pandas as pd","41f60d1b":"import matplotlib.pyplot as plt","85af7bbc":"traindata = pd.read_csv(\"\/kaggle\/input\/adult-pmr3508\/train_data.csv\",\n        sep=',',\n        engine='python',\n        na_values=\"?\")","80f4ef63":"traindata.shape","3e6861d1":"traindata.describe()","a13c73f1":"testdata = pd.read_csv(\"\/kaggle\/input\/adult-pmr3508\/test_data.csv\",\n        sep=r'\\s*,\\s*',\n        engine='python',\n        na_values=\"?\")","38cf812b":"testdata.shape","7a89ef51":"traindata.head()","8b21bd8b":"testdata.head()\n","468da2db":"traindata[\"native.country\"].value_counts()\n","609fb729":"traindata[\"age\"].value_counts().plot(kind=\"bar\")","2ba71475":"traindata[\"sex\"].value_counts().plot(kind=\"pie\")\n","1d55c0e2":"traindata[\"education\"].value_counts().plot(kind=\"bar\")\n","02d83592":"traindata[\"occupation\"].value_counts().plot(kind=\"bar\")\n","dd11d754":"def percent(colum):\n    return colum*100\/\/float(colum[-1])\ntargetxage = pd.crosstab(traindata[\"age\"],traindata[\"income\"],margins=True)\ntargetxage.apply(percent,axis=1).plot()","8b5253b0":"\ntargetxeducationnum = pd.crosstab(traindata[\"education.num\"],traindata[\"income\"],margins=True)\ntargetxeducationnum.apply(percent,axis=1).plot()","91f0cd07":"targetxeducationnum = pd.crosstab(traindata[\"income\"],traindata[\"sex\"],margins=True)\ntargetxeducationnum.apply(percent,axis=0)","bafcb4fb":"targetxeducationnum = pd.crosstab(traindata[\"sex\"],traindata[\"income\"],margins=True)\ntargetxeducationnum.apply(percent,axis=1).plot()","86d790c7":"#Aqui vamos transformar os labels Sex e Races que s\u00e3o strings em floats, a partir da associa\u00e7\u00e3o com sua porcentagem de apari\u00e7\u00e3o\nno_number = [\"Male\",\"Female\"]\nnumber = [\"3\",\"1\"]\nraces=[\"Asian-Pac-Islander\",\"White\",\"Black\",\"Amer-Indian-Eskimo\",\"Other\"]\nperc=[\"26\", \"25\", \"12\", \"11\",\"9\"]\nno_number += races\nnumber += perc\ndef num_func(label):\n    for i in range(len(number)):\n        if label == no_number[i]:\n            return number[i]\n    return label","5eaa57d4":"#A partir da fun\u00e7\u00e3o .apply da Pandas, podemos aplicar ao CSV a nossa altera\u00e7\u00e3o num\u00e9rica\ntraindata[\"sex\"] = traindata[\"sex\"].apply(num_func)\ntraindata[\"race\"] = traindata[\"race\"].apply(num_func)\ntestdata[\"sex\"] = testdata[\"sex\"].apply(num_func)\ntestdata[\"race\"] = testdata[\"race\"].apply(num_func)\n","6ad9344f":"ntraindata = traindata.dropna()\n","db88b465":"ntraindata","bae6c6ab":"ntestdata = testdata\nntestdata.shape","0c6186e9":"Xtrain = ntraindata[[\"age\",\"education.num\",\"sex\", \"race\", \"capital.gain\", \"capital.loss\", \"hours.per.week\"]]\n","5da021c9":"Ytrain = ntraindata.income\n","e0d6f485":"Xtest = ntestdata[[\"age\",\"education.num\",\"sex\", \"race\", \"capital.gain\", \"capital.loss\", \"hours.per.week\"]]\n","9b9e9e37":"from sklearn.neighbors import KNeighborsClassifier\n","f6910c7b":"\nknn = KNeighborsClassifier(n_neighbors=24, p=1)\n%time #para medirmos o tempo de processamento","980b367c":"from sklearn.model_selection import cross_val_score #cross validation\nfrom sklearn.linear_model import LogisticRegression #Regress\u00e3o Log\u00edstica\nfrom sklearn.ensemble import RandomForestClassifier #Random Forest \n","910df2c7":"\nlogistic = LogisticRegression(solver = 'lbfgs', C = 1.0, penalty = 'l2', warm_start =  True)\n%time #para medirmos o tempo de processamento\n","71387d06":"\nforest = RandomForestClassifier(n_estimators = 400, max_depth = 12)\n%time #para medirmos o tempo de processamento","008738d6":"scoresKNN = cross_val_score(knn, Xtrain, Ytrain, cv=10)\nscoresKNN\n","fe3feda7":"scoresLogistic = cross_val_score(logistic, Xtrain, Ytrain, cv=10)\nscoresLogistic\n\n","8eb50be8":"scoresForest = cross_val_score(forest, Xtrain, Ytrain, cv=5)\nscoresForest","ed59b15f":"knn.fit(Xtrain,Ytrain)\n%time","10ff77bf":"logistic.fit(Xtrain, Ytrain)\n%time","cfe5ffa2":"forest.fit(Xtrain, Ytrain)\n%time","91c487c2":"YtestPredknn = knn.predict(Xtest)\nYtestPredlog = logistic.predict(Xtest)\nYtestPredforest = forest.predict(Xtest)","fba334be":"import numpy as np","00c0a4a1":"accuracy1 = np.mean(scoresKNN)\naccuracy2 = np.mean(scoresLogistic)\naccuracy3 = np.mean(scoresForest)","9da32a82":"print(\"KNN accuracy=\", accuracy1)\nprint(\"Logistic accuracy=\", accuracy2)\nprint(\"Random Forest accuracy=\", accuracy3)","17cc3471":"if (accuracy1>accuracy2 and accuracy1>accuracy3):\n    id_index = pd.DataFrame({'Id' : list(range(len(YtestPredknn)))})\n    income = pd.DataFrame({'income' : YtestPredknn})\n    print(\"KNN has the best accuracy\")\nif not (accuracy1>accuracy2 and accuracy1>accuracy3):\n    if accuracy1<accuracy2:\n        id_index = pd.DataFrame({'Id' : list(range(len(YtestPredlog)))})\n        income = pd.DataFrame({'income' : YtestPredlog})\n        print(\"Logistic has the best accuracy\")\n    else:\n        id_index = pd.DataFrame({'Id' : list(range(len(YtestPredforest)))})\n        income = pd.DataFrame({'income' : YtestPredforest})\n        print(\"Forest has the best accuracy\")\nresult = income\nresult","cebcfdfb":"result.to_csv(\"submission.csv\", index = True, index_label = 'Id')","49aa6670":"<p> Correla\u00e7\u00e3o entre N\u00edvel de Educa\u00e7\u00e3o e Renda <\/p>","8ec38a8e":"<p> Podemos encontrar a seguir algumas an\u00e1lises gr\u00e1ficas da distribui\u00e7\u00e3o de Pa\u00edses, Idade, Sexo, Renda, Educa\u00e7\u00e3o, Ocupa\u00e7\u00e3o e sua poss\u00edvel correla\u00e7\u00e3o com a renda anual <\/p>","d08d9ddd":"<p> Correla\u00e7\u00e3o entre Idade e Renda <\/p>","c07b8346":"<h1> Data Preparation <\/h1> ","73b68311":"<h1> Vamos testar aqui tr\u00eas classificadores: <\/h1>\n    <p> 1) K-Nearest-Neighbors\n        \u00c9 conhecido por ser um classificador simples, que faz sua decis\u00e3o a partir da proximidade com o n\u00famero k de vizinhos, por\u00e9m sua acur\u00e1cia acaba n\u00e3o sendo uma das melhores. Seu tempo de processamento pode ser afetado com o aumento de k. \n    <\/p>\n    <p> 2) Regress\u00e3o Log\u00edstica\n        Utiliza-se regress\u00e3o log\u00edstica para predi\u00e7\u00f5es em que a vari\u00e1vel dependente (ou seja, predita) \u00e9 bin\u00e1ria, bem como nesse exemplo. Possui grande semelhan\u00e7a com a regress\u00e3o linear.\n    <\/p>\n    3) Florestas Aleat\u00f3rias\n        \u00c9 conhecido por possuir uma alta taxa de acur\u00e1cia, por\u00e9m sua interpretabilidade come\u00e7a a ser afetada quando s\u00e3o utilizadas muitas \u00e1rvores para o treino. \n    ","24fec3fc":"<h1> An\u00e1lises Gr\u00e1ficas <\/h1>","d76efeb6":"<p> Um dos t\u00f3picos mais importantes atualmente no que tange a renda \u00e9 a diferen\u00e7a entre sal\u00e1rios de homens e mulheres. Vemos que apenas 10% das mulheres ganham mais que 50k mensais, sendo que as mulheres representam 33% da base. <\/p> ","2ad53b8e":"<h1>An\u00e1lise de Processamento da Base Adult Income<\/h1>\n<p> Faremos agora o processamento da base utilizando 3 m\u00e9todos distintos e avaliando suas respostas <p>\n","7d5a2611":"<p> An\u00e1lise de Renda por sexo <\/p>"}}