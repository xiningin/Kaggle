{"cell_type":{"4e3b13d7":"code","90534501":"code","549d1647":"code","e26ec058":"code","46ea64f9":"code","6c98b999":"code","5bee09fe":"code","696b4d2c":"code","ae200cf8":"code","59202ba1":"code","7d902fbc":"code","0f8f71be":"code","534feaf6":"code","d3be2211":"code","8c261819":"code","16ffd50d":"code","228dd534":"code","a42dca14":"code","eb5b39d6":"code","bb8651a0":"code","d0bf431b":"code","5ca39823":"markdown","d99a8693":"markdown","8d913c96":"markdown","5d2816b1":"markdown","5ab0491a":"markdown","ce589c1e":"markdown","67d4557d":"markdown","e75e6416":"markdown","1893f4f2":"markdown","7ffcd2fe":"markdown","addde568":"markdown","9c3530a8":"markdown","3829b46c":"markdown","885e308e":"markdown","5d5ac4b2":"markdown","71d2c21f":"markdown","1013ec16":"markdown","969cf0e3":"markdown"},"source":{"4e3b13d7":"#Generic Libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os,re\nimport random\nfrom PIL import Image \n\n# TensorFlow \/ Keras Libraries\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.utils import to_categorical\nfrom keras.preprocessing import image\nfrom keras.utils import to_categorical\nfrom keras.layers. normalization import BatchNormalization\n\n#Plotting Libraries\nimport matplotlib.pyplot as plt\n\n#SKLearn Libraries\nfrom sklearn.model_selection import train_test_split\n\n#Garbage Collect\nimport gc\n\n#Show Progress Library\nfrom tqdm import tqdm","90534501":"#Define Directory Path\ntrain_images = '..\/input\/baldclassificationselected\/data\/input\/BaldClassification\/'\ntest_images = '..\/input\/baldclassificationselected\/data\/input\/BaldClassification\/test\/'\ncsv_files = '..\/input\/baldclassificationselected\/data\/input\/BaldClassification\/'\n","549d1647":"#Loading Training Data\ntrainData_url = f'{csv_files}\/train.csv'\ntrain_data = pd.read_csv(trainData_url, header='infer')","e26ec058":"#Creating Test-Data (image names) from test-folder\ntest_d = []\nfor subdir, dirs, files in os.walk(test_images):\n    for f in files:\n        test_d.append(f)\n\ntest_data = pd.DataFrame(test_d, columns= [\"TestData\"])","46ea64f9":"#Check for records\nprint(\"Total Records in Training Dataset: \", train_data.shape[0])\nprint(\"Total Records in Testing Dataset: \", test_data.shape[0])","6c98b999":"#Check for null values\nprint(\"Null\/Missing Values in Training Dataset: \",train_data.isna().sum())","5bee09fe":"#Check for total labels in Training Dataset\ntrain_data.groupby('label').size()","696b4d2c":"#Load Train Images \ntrain_image = []\nfor i in tqdm(range(train_data.shape[0])):\n    img = image.load_img(f'{train_images}' + train_data['image_path'][i],target_size=(150,150,3))\n    img = image.img_to_array(img)\n    #img = img\/255 \n    train_image.append(img)\n    \n#Array of Training Images    \ntraining_images = np.array(train_image)","ae200cf8":"#Load Test Images\ntest_image = []\nfor i in tqdm(range(test_data.shape[0])):\n    img = image.load_img(f'{test_images}' + test_data['TestData'][i],target_size=(150,150,3))\n    img = image.img_to_array(img)\n   # img = img\/255 \n    test_image.append(img)\n    \n#Array of Training Images    \ntesting_images = np.array(test_image)","59202ba1":"training_images = training_images \/ 255.0\n\ntesting_images = testing_images \/ 255.0","7d902fbc":"#Visualizing a random image\n\ndef random_img():\n    \n    fig = plt.figure(figsize=(10,10))\n    plt.subplots_adjust(hspace = 0.9)\n    \n    plt.subplot(221)\n    ax1 = plt.imshow(training_images[random.randint(0, 6720)])\n    plt.colorbar()\n    plt.title(\"Random Image from Training set\", fontsize=12)\n    plt.grid(False)\n\n    plt.subplot(222)\n    ax2 = plt.imshow(testing_images[random.randint(0, 2729)])\n    plt.colorbar()\n    plt.title(\"Random Image from Testing set\", fontsize=12)\n    plt.grid(False)\n    \n    \n    plt.show()","0f8f71be":"#Visualize a random image from training image array\nrandom_img()","534feaf6":"training_trgt = np.array(train_data.drop('image_path',axis=1))","d3be2211":"print(\"Total Records in Training Target Dataset: \", training_trgt.shape[0])","8c261819":"model = Sequential()\n\nmodel.add(Conv2D(32, kernel_size = (3, 3), activation='relu', input_shape=(150, 150, 3)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(64, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(64, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(96, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(32, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(BatchNormalization())\n\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(2, activation = 'softmax'))","16ffd50d":"#model = keras.models.load_model(\"..\/input\/output\/ImgClassificationModel\")","228dd534":"model.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), optimizer='nadam', metrics = ['accuracy'])","a42dca14":"#Training the model on training data i.e. Training Images & Training Labels aka Target\nmodel.fit(training_images, training_trgt, batch_size = 50, epochs = 10, verbose = 1)","eb5b39d6":"#Predicting Labels\npredictions_class = model.predict_classes(testing_images)\n#Predicting Values\npredictions_val = model.predict(testing_images)\n\n#Storing the Predicted Labels & Values to Test Dataset\ntest_data['Predictions'] = predictions_class\ntest_data['PredVals'] = predictions_val.tolist()\n","bb8651a0":"def display_random_prediction():\n    \n    class_names = ['Bald','Not Bald']  # Define the Class Names for Binary Classification \n    \n    index = np.random.randint(test_data.shape[0])   #Randomly generating an index number\n    \n   \n    fn = test_data.TestData[index]      #Storing the filename for randomly generated index\n    lb = test_data.Predictions[index]   #Storing the Predictions for randomly generated index\n\n\n    \n    #Load Image\n    test_img = image.load_img(f'{test_images}' + fn,target_size=(150,150,3))\n    test_img = image.img_to_array(test_img)\n    test_img = test_img\/255.0\n    \n    #Plot Image\n    plt.figure()\n    plt.grid(False)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(test_img)\n    \n    # Add the image to a batch where it's the only member.\n    test_img = (np.expand_dims(test_img,0))\n\n    # Make Prediction on the singl image\n    pred_single_val = model.predict(test_img)\n    pred_single_lb = np.argmax(pred_single_val[0])\n    \n    #print(\"value: \",pred_single_val, \"----\", \"class:\",pred_single_class)\n    \n\n    #Plot Title with Prediction\n    plt.title(\"{} - {:2.1f}%\".format(class_names[pred_single_lb], 100*np.max(pred_single_val) ), fontsize=13)\n    \n    ","d0bf431b":"display_random_prediction()","5ca39823":"# Libraries","d99a8693":"# Explore Images","8d913c96":"# Scaling Images\n\nNote: Its always a best practice to scale the images before feeding to neural network","5d2816b1":"# Train Model","5ab0491a":"# Basic EDA","ce589c1e":"# Load Images","67d4557d":"# Build Model\n\nBuilding the neural network requires configuring the layers of the model, then compiling the model. The basic building block of a neural network is the layer. Layers extract representations from the data fed into them.","e75e6416":"# Compile Model","1893f4f2":"Note: It seems that the images & its predictions are not aligned properly in the test_data dataset which is why it may seem that prediction is flawed when we do the \"Random Display\". However, as we know from the model training it is not the case. The further task would be to fine tune the model & ofcourse re-align the test_data","7ffcd2fe":"# Load Data","addde568":"# Basic Image Classification (using Keras)\n\nIn this notebook we're going to perform a basic image classification using Keras on the [Bald Classification data](https:\/\/www.kaggle.com\/zcwjack\/baldclassificationselected). This notebook is intended as a tutorial\/beginner guide for people interested in performing image classification. If you find this notebook helpful then please consider it to **UPVOTE** :-). \n\nAs always, I will try to keep this notebook clean,well commented & organized for easy reading..\n","9c3530a8":"### This appears to be an equally distributed \"Binary Classified\" dataset, where 0 = Not Bald & 1 = Is Bald. We will build a model that will return the 'label' of a given test image. But before that, We will have to load & pre-process the train image data","3829b46c":"# Making Predictions (with Test Data)","885e308e":"### This model has reached an accuracy of about ~ 96% on the training data.","5d5ac4b2":"### Conclusion: There are no null\/missing values","71d2c21f":"# Define Directories","1013ec16":"**Note: Creating a Test_Data dataframe from the Test Image (test_images) folder. The only reason for doing this is because the files (image_path column) in the test.csv are not in the same order as the files in test folder. And since we are going to use the test folder as our test-dataset to validate the model, it is only logical to use it for creating the dataframe.**","969cf0e3":"# Define Target\n\nIn this step, we are going to define the target which is the label column in the train dataset\n"}}