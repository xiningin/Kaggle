{"cell_type":{"8c3a3410":"code","184c7963":"code","99ebe547":"code","8355d54b":"code","368b5167":"code","400ad453":"code","63dd9e17":"code","83225f84":"code","b1c4460b":"code","004be20c":"code","487a9ea5":"code","646198c9":"code","8c4fa1db":"code","3042b627":"code","e0442c9c":"code","69dd3351":"code","054a0f50":"code","1ca2058d":"code","73227009":"code","d27f3727":"code","e491b44a":"code","3519ac4a":"code","49f9f72f":"code","45e6544d":"code","194ade83":"code","a465a8e7":"markdown","2279d9b9":"markdown","122812d8":"markdown","30153eab":"markdown","7d78f4bc":"markdown","7dfceed7":"markdown","c09f131f":"markdown","c38f868c":"markdown","f3c1ae6b":"markdown","d793cfcc":"markdown","755301a7":"markdown"},"source":{"8c3a3410":"## librarary\n!pip install calmap\nimport os\nimport pandas as pd\nimport plotly.express as px\n#os.listdir('..\/m5-forecasting-uncertainty\/')\n\nimport seaborn as sns\n\nimport numpy as np; np.random.seed(sum(map(ord, 'calmap')))\nimport pandas as pd\nimport calmap\nimport matplotlib.pyplot as plt\nimport math\n\ncalendar= pd.read_csv('..\/input\/m5-forecasting-accuracy\/calendar.csv')\nsell_prices = pd.read_csv('..\/input\/m5-forecasting-accuracy\/sell_prices.csv')\nsales = pd.read_csv('..\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')","184c7963":"calendar.event_name_1.unique()","99ebe547":"calendar.event_name_2.unique()","8355d54b":"calendar['event_true_1'] = calendar.event_name_1.notna()\ncalendar['event_true_2'] = calendar.event_name_2.notna()\n\ncalendar['event_true_all'] = calendar.event_true_1 + calendar.event_true_2\ncalendar['event_true_all'] = calendar.event_true_all.apply(lambda x: x>0)\ncalendar['event_true_all'] = calendar.event_true_all.astype('int')\ncalendar['date'] = pd.to_datetime(calendar.date)\n\nevents_series = pd.Series(calendar.event_true_all.values, index=calendar.date)","368b5167":"calendar['event_name_all'] = calendar.event_name_1.fillna('') + '_' +calendar.event_name_2.fillna('')\ncalendar['event_name_all'] = calendar.event_name_all.apply(lambda x: x[:-1] if x[len(x)-1] == '_' else x)","400ad453":"calmap.calendarplot(events_series, monthticks=2, daylabels='MTWTFSS',\n                    dayticks=[0, 2, 4, 6], cmap='tab20',\n                    fillcolor='grey', linewidth=0,\n                    fig_kws=dict(figsize=(12, 12)))\nplt.show()","63dd9e17":"d_list = calendar[calendar.event_true_all==1].d.values\nyear_list = calendar[calendar.event_true_all == 1].year.values\nname_list = calendar[calendar.event_true_all == 1].event_name_all\n\nbarplot_pd = pd.DataFrame({'Year': year_list, 'd': d_list, 'Name': name_list}).reset_index()","83225f84":"barplot_pd=barplot_pd[:154]","b1c4460b":"def get_daily_average(d, dep):\n    return sales[sales.dept_id==dep][d].mean()","004be20c":"for dept in sales.dept_id.unique():\n    barplot_pd[dept] = barplot_pd.d.apply(lambda x: get_daily_average(x, dept))","487a9ea5":"\nf, axes = plt.subplots(3,3, figsize=(15,10))\n\nbarplot_pd = barplot_pd.sort_values('HOBBIES_1', ascending=False)\nsns.barplot(barplot_pd.HOBBIES_1[:10], barplot_pd.Name[:10], ax=axes[0,0])\nbarplot_pd = barplot_pd.sort_values('HOBBIES_2', ascending=False)\nsns.barplot(barplot_pd.HOBBIES_2[:10], barplot_pd.Name[:10], ax=axes[0,1])\nbarplot_pd = barplot_pd.sort_values('HOUSEHOLD_1', ascending=False)\nsns.barplot(barplot_pd.HOUSEHOLD_1[:10], barplot_pd.Name[:10], ax=axes[1,0])\nbarplot_pd = barplot_pd.sort_values('HOUSEHOLD_2', ascending=False)\nsns.barplot(barplot_pd.HOUSEHOLD_2[:10], barplot_pd.Name[:10], ax=axes[1,1])\nbarplot_pd = barplot_pd.sort_values('FOODS_1', ascending=False)\nsns.barplot(barplot_pd.FOODS_1[:10], barplot_pd.Name[:10], ax=axes[2,0])\nbarplot_pd = barplot_pd.sort_values('FOODS_2', ascending=False)\nsns.barplot(barplot_pd.FOODS_2[:10], barplot_pd.Name[:10], ax=axes[2,1])\nbarplot_pd = barplot_pd.sort_values('FOODS_3', ascending=False)\nsns.barplot(barplot_pd.FOODS_3[:10], barplot_pd.Name[:10], ax=axes[2,2])\nplt.tight_layout()","646198c9":"group_calendar = calendar[calendar.date < pd.datetime(2016, 4, 25)].groupby(['year', 'event_true_all', 'event_name_all'])\\\n.agg({'d': lambda x: list(x)})\\\n.reset_index()","8c4fa1db":"def get_avg_year_value(d_list):\n    my_dict = dict((d,'mean') for d in d_list)\n    all_means = sales.groupby('cat_id').agg(my_dict).values\n    return all_means.mean()","3042b627":"group_calendar['avg_sale_unit'] = group_calendar.d.apply(lambda x: get_avg_year_value(x))","e0442c9c":"joined_group_calendar = \\\ngroup_calendar[group_calendar.event_true_all==1]\\\n.merge(group_calendar[group_calendar.event_true_all==0][['year', 'avg_sale_unit']]\\\n.rename({'avg_sale_unit': 'non_event_avg_sale_unit'}, axis=1), on='year')","69dd3351":"joined_group_calendar['ratio'] = joined_group_calendar.avg_sale_unit \/ joined_group_calendar.non_event_avg_sale_unit","054a0f50":"plt.style.use('ggplot')\nplot_pd_1 = joined_group_calendar\\\n.groupby('event_name_all').agg({'ratio': 'mean'}, axis=1).sort_values('ratio', ascending=False)\n\n","1ca2058d":"plt.figure(figsize=(8,10))\nsns.barplot(x=plot_pd_1.ratio, y=plot_pd_1.index)\nplt.vlines(x=1, ymin=-2, ymax=33, linestyles='-.', color='darkblue')\nplt.text(0.99, -0.8, 'average sale unit on non-event day',\n        verticalalignment='bottom', horizontalalignment='right',\n        color='darkblue', fontsize=15)\nplt.show()","73227009":"def get_avg_category(d_list, category):\n    my_dict = dict((d,'mean') for d in d_list)\n    all_means = sales.groupby('cat_id').agg(my_dict).mean(axis=1)[category]\n    return all_means","d27f3727":"for category in sales.cat_id.unique():\n    group_calendar[category] = group_calendar['d'].apply(lambda x: get_avg_category(x, category))\n    ","e491b44a":"plot_pd_2 = group_calendar.groupby('event_name_all')\\\n.agg({'HOBBIES':'mean', 'HOUSEHOLD':'mean', 'FOODS': 'mean'}).reset_index()","3519ac4a":"plot_pd_2 = plot_pd_2.merge(calendar[['event_name_all', 'event_type_1']], on='event_name_all', how='left')\\\n.drop_duplicates().dropna()","49f9f72f":"\n\nfig = px.scatter_3d(plot_pd_2, x='HOUSEHOLD', y='FOODS', z='HOBBIES',\n              color='event_type_1', hover_data=['event_name_all'])\nfig.update_layout(margin=dict(l=1, r=1, b=1, t=1))\nfig.show()","45e6544d":"fig = px.scatter(plot_pd_2, x=\"FOODS\", y=\"HOBBIES\", color='event_type_1', \\\n                 size=[0.1]*34)\nfig.show()","194ade83":"plot_pd_2.groupby('event_type_1').mean().plot.bar(figsize=(10,5))\nplt.ylabel('Holiday effect')\nplt.show()","a465a8e7":"$$holiday\\,  effect = \\frac{holiday\\,  average \\, sale}{non-holiday\\,  average \\, sale} $$","2279d9b9":"## <a id=tag3>Events vs non events total sales<\/a>\n\n\nHere I used a ratio beween event sales and average daily sales as a indicator of 'holiday effect'. If the ratio > 1, that means people buy more during holidays than usual. It turns out **Labor day oversales the most.  **","122812d8":"A few notebooks here discussed about the effect of SNAP (Supplemental Nutrition Assistance Program) days, but I am particularly interested in the effect of **events & festivities**. So here is a series of visualization...","30153eab":"This shows that the patterns for different holidays are similar; **Food is the theme of holidays, especially for sporting events**","7d78f4bc":"There are four types of festivals: **National, Religious, Sporting and Cultural**. Below is a calendar view all the events. ","7dfceed7":"Halloween has the highest amount of sales in HOBBIES category; Lent Start wins in the FOODS_1 category. I am curious about what kind of goods in FOODS_2 category; why Presidents day and Columbus day on this list?","c09f131f":"## <a id=tag2>Daily sales on events by category (TOP10) <\/a>","c38f868c":"# Table of Contents\n\n### [Introduction](#tag1)\n\n### [Daily sales of events by category](#tag2)\n\n### [Event sale vs non-event day sale: Labor day oversales\ud83d\udee0](#tag3)\n\n### [Event and product categories: big sports holidays are all about food\ud83c\udfc8\ud83c\udf55](#tag4)\n\n### More to come..\n","f3c1ae6b":"Here are all the names of festivals:","d793cfcc":"## <a id=tag4> Events & associated categories <\/a>\n\nBelow are 3-D and 2-D scatterplot where each event category is mapped on the 'holiday effect' ratio indicator. It is hard to get a clear separation on the 3-d plot, except the fact that **sales decreases a lot during big holidays (christmas, thanksgiving and new year)**","755301a7":"## <a id=tag1>Introduction<\/a>"}}