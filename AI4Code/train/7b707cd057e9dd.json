{"cell_type":{"b9c5aaa4":"code","f60bea01":"code","28562e2b":"code","b7d5f5e5":"code","92c4574b":"code","440641ef":"code","7c3448a7":"code","8111c346":"code","2da90216":"code","52faecd4":"code","22b9be2a":"code","76031f81":"code","a7f04e79":"code","e47b6d2c":"code","bf30e1db":"code","2aedb149":"code","234d0222":"markdown","b5beee77":"markdown","371a8a14":"markdown","7325ff81":"markdown"},"source":{"b9c5aaa4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n#Import packages\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f60bea01":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain.head()","28562e2b":"test.head()","b7d5f5e5":"train.describe()","92c4574b":"train.isna().sum() \/ train.shape[0]","440641ef":"train.dtypes","7c3448a7":"train.groupby('Survived').count()","8111c346":"def neighbours_survived_percentage(passager, n_neighbours, df):\n    \n    df['Ticket'] = pd.to_numeric(df['Ticket'], errors='coerce')\n    df.sort_values(by=['Ticket'], inplace=True)\n    \n    if passager + n_neighbours + 1 < df.shape[0]:\n        df_neighbours = df[passager+1:passager+n_neighbours+1] \n    else:\n        df_neighbours = df[passager - n_neighbours - 1:passager]\n        \n    survived = df_neighbours[df_neighbours.Survived == 1].shape[0]\n    died = df_neighbours[df_neighbours.Survived == 0].shape[0]\n    \n    return survived \/ (survived + died)","2da90216":"from sklearn.preprocessing import LabelEncoder\n\nclass MultiColumnLabelEncoder:\n    def __init__(self,columns = None):\n        self.columns = columns # array of column names to encode\n\n    def fit(self,X,y=None):\n        return self # not relevant here\n\n    def transform(self,X):\n        '''\n        Transforms columns of X specified in self.columns using\n        LabelEncoder(). If no columns specified, transforms all\n        columns in X.\n        '''\n        output = X.copy()\n        if self.columns is not None:\n            for col in self.columns:\n                output[col] = LabelEncoder().fit_transform(output[col])\n        else:\n            for colname,col in output.iteritems():\n                output[colname] = LabelEncoder().fit_transform(col)\n        return output\n\n    def fit_transform(self,X,y=None):\n        return self.fit(X,y).transform(X)","52faecd4":"from sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\n\ndef features_engineering(df):\n    \"\"\"\n    Features engineering\n    \"\"\"\n    #df.drop(['PassengerId', 'Name', 'Cabin'], axis=1, inplace=True)\n    df.drop([ 'Name', 'Cabin'], axis=1, inplace=True)\n    # keep features by dtypes\n    num_cols = list(df.select_dtypes(include=['int64', 'float64']).columns)\n    cat_cols = list(df.select_dtypes(include=['object']).columns)\n    \n    # imputation categorical features : most_frequent\n    cat_transformer = SimpleImputer(strategy = 'most_frequent')\n    cat_cols_impute = pd.DataFrame(cat_transformer.fit_transform(df[cat_cols]), columns = cat_cols)\n\n    # imputation numerical features : median\n    num_transformer = SimpleImputer(strategy = 'median')\n    num_cols_impute = pd.DataFrame(num_transformer.fit_transform(df[num_cols]), columns = num_cols)\n\n    # merge numeric and categorical after transformation\n    X_features = pd.concat([cat_cols_impute, num_cols_impute], axis=1, join='inner')\n\n    # Encode categorical features\n    X_features = MultiColumnLabelEncoder(columns = cat_cols).fit_transform(X_features)\n\n    return X_features","22b9be2a":"train_features = features_engineering(train)\ntest_features = features_engineering(test)","76031f81":"train_features.head(5)","a7f04e79":"from sklearn.model_selection import train_test_split\n\nX_train = train_features.drop('Survived', axis=1)\ny_train = train_features['Survived']\nX_test=test_features","e47b6d2c":"sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)","bf30e1db":"## Support Vector Machine ##\n    # Lien de l'explication de la fonction sur le package Sk-learn : https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.svm.SVC.html\nfrom sklearn.svm import SVC    \nfrom sklearn.metrics import roc_auc_score, roc_curve\nimport matplotlib.pyplot as plt\nsvc = SVC(probability=True, C = 1.5, gamma = 'auto', kernel = 'rbf')\nsvc.fit(X_train, y_train)\nprint(\"Accuracy du SVM : %s\"%(round(svc.score(X_train, y_train)*100,2)))\nprint(\"\\n ------------------------------------------------------------ \\n\")\na=svc.predict(X_test).astype(int)\nsubmission = pd.DataFrame({\"PassengerId\": test[\"PassengerId\"], \"Survived\": a})\nsubmission.to_csv('Soumission_SVM.csv', index=False)\n    # Ce mod\u00e8le obtient un score de 78.94 % sur l'\u00e9chantillon test. Il performe donc la regression malgr\u00e9 les param\u00e8tres par d\u00e9faut. Nous allons donc essayer d'am\u00e9liorer ce mod\u00e8le en le customisant.","2aedb149":"# Mise en place du GRID-SEARCH :\nparams = {\"n\" : None, \"AUC\" : 0, \"Acc\" : 0, \"Soumission\" : None}\nfor kernel in ['linear', 'poly', 'rbf', 'sigmoid']:\n    for gamma in ['auto', 'scale']:\n        for c in [0.5, 0.8, 1, 1.2, 1.5]:\n            svc_cust = SVC(probability=True, C = c, gamma = gamma, kernel = kernel)\n            svc_cust.fit(X_train, y_train)\n        if round(svc_cust.score(X_train, y_train) * 100, 2) > params['Acc'] and round(roc_auc_score(y_train, [x[1] for x in svc_cust.predict_proba(X_train)]),2) > params['AUC']:\n            params['parametres'] = [kernel, gamma, c]\n            params['AUC'] = round(roc_auc_score(y_train, [x[1] for x in svc_cust.predict_proba(X_train)]),2)\n            params['Acc'] = round(svc_cust.score(X_train, y_train) * 100, 2)\n            params['Soumission'] = pd.DataFrame({\"PassengerId\": test[\"PassengerId\"], \"Survived\": svc_cust.predict(X_test)})\n            print('Accuracy am\u00e9lior\u00e9e : %s'%params['Acc'])\n            \nprint(\"\\n ------------------------------------------------------------ \\n\")\nprint(\"Le meilleur mod\u00e8le \u00e0 l'issue du grid search utilise n = %s et obtient en score un AUC de %s et une Accuracy de %s\"%(params['parametres'], params['AUC'], params['Acc']))","234d0222":"Feature extractor","b5beee77":"Exploratory data analysis","371a8a14":"Classifier","7325ff81":"> ****"}}