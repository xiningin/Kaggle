{"cell_type":{"04a962fe":"code","9276369d":"code","3cb8cca0":"code","93f926d1":"code","814f9a06":"code","c426848c":"code","41a5c38a":"code","3f1822a1":"code","c96b2bd1":"code","2a662977":"markdown","be54b550":"markdown","9e830f71":"markdown","e19e0539":"markdown","e09acee2":"markdown","16a21566":"markdown","e93e6062":"markdown","2d5810b7":"markdown","72085400":"markdown","dcf5ca97":"markdown","6f6a4e71":"markdown","f529a94a":"markdown"},"source":{"04a962fe":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom scipy import stats # for box-cox tracnsformantion\nfrom mlxtend.preprocessing import minmax_scaling # for minmax scaling\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nnp.random.seed(0) # for reproducibility","9276369d":"df = pd.read_csv('\/kaggle\/input\/kickstarter-projects\/ks-projects-201801.csv')","3cb8cca0":"# generate 1000 data points randomly drawn from an exponential distribution\noriginal_data = np.random.exponential(size = 1000)\n\n# min-max scale the data between 0-1\nscaled_data = minmax_scaling(original_data, columns = [0])\n\n# plot both together to compare\nfig, ax = plt.subplots(1,2)\nsns.distplot(original_data, ax = ax[0])\nax[0].set_title(\"Original Data\")\nsns.distplot(scaled_data, ax = ax[1])\nax[1].set_title(\"Scaled data\")","93f926d1":"# normalize the exponential data with boxcox\nnormalized_data = stats.boxcox(original_data)\n\n# plot both together to compare\nfig, ax = plt.subplots(1, 2)\nsns.distplot(original_data, ax = ax[0])\nax[0].set_title(\"Original data\")\nsns.distplot(normalized_data[0], ax = ax[1])\nax[1].set_title(\"Normalized data\")","814f9a06":"# select the usd_goal_real column\nusd_goal = df.usd_goal_real\n\n# scale the goals from 0 to 1\nscaled_data = minmax_scaling(usd_goal, columns = [0])\n\n# plot the original and scaled data to compare\nfig, ax = plt.subplots(1,2)\nsns.distplot(df.usd_goal_real, ax = ax[0])\nax[0].set_title(\"Original data\")\nsns.distplot(scaled_data, ax = ax[1])\nax[1].set_title(\"Scaled data\")","c426848c":"df.columns","41a5c38a":"# select the goal column\ngoal = df.goal\n\n# scale the goals from 0 to 1\nscaled_data = minmax_scaling(goal, columns = [0])\n\n# plot the original and scaled data to compare\nfig, ax = plt.subplots(1,2)\nsns.distplot(df.goal, ax = ax[0])\nax[0].set_title(\"Original data\")\nsns.distplot(scaled_data, ax = ax[1])\nax[1].set_title(\"Scaled data\")","3f1822a1":"# get the index of all positive pledges (Box-Cox only takes postive values)\nindex_of_positive_pledges = df.usd_pledged_real > 0\n\n# get only positive pledges (using their indexes)\npositive_pledges = df.usd_pledged_real.loc[index_of_positive_pledges]\n\n# normalize the pledges (w\/ Box-Cox)\nnormalized_pledges = stats.boxcox(positive_pledges)[0]\n\n# plot both together to compare\nfig, ax=plt.subplots(1,2)\nsns.distplot(positive_pledges, ax=ax[0])\nax[0].set_title(\"Original Data\")\nsns.distplot(normalized_pledges, ax=ax[1])\nax[1].set_title(\"Normalized data\")","c96b2bd1":"# get the index of all positive pledges (Box-Cox only takes postive values)\nindex_of_positive_pledges = df.pledged > 0\n\n# get only positive pledges (using their indexes)\npositive_pledges = df.pledged.loc[index_of_positive_pledges]\n\n# normalize the pledges (w\/ Box-Cox)\nnormalized_pledges = stats.boxcox(positive_pledges)[0]\n\n# plot both together to compare\nfig, ax=plt.subplots(1,2)\nsns.distplot(positive_pledges, ax=ax[0])\nax[0].set_title(\"Original Data\")\nsns.distplot(normalized_pledges, ax=ax[1])\nax[1].set_title(\"Normalized data\")","2a662977":"## For data click [Here](https:\/\/www.kaggle.com\/kemical\/kickstarter-projects)","be54b550":"You can see that scaling changed the scales of the plots dramatically (but not the shape of the data: it looks like most campaigns have small goals but a few have very large ones)","9e830f71":"## Practice scaling<a id='3'><\/a>\nTo practice scaling and normalization, we're going to be using a dataset of Kickstarter campaigns. (Kickstarter is a website where people can ask people to invest in various projects and concept products.)\n\nLet's start by scaling the goals of each campaign, which is how much money they were asking for.","e19e0539":"## Scaling vs. Normalization : What is the difference?<a id='2'><\/a>\n\nOne of the reasons that it's easy to get confuse between scaling and normalization is because the terms are sometimes used interchangeably and, to make it even more confusing, they are very similar! In both cases, you're transforming the values of numeric variables so that the transformed data points have specific helpful properties. The difference is that, in scaling, you are changing the range of your data while in normalization you are change the shape of the distribution of your data. Let's talk a little more in-depth about each of these options.","e09acee2":"It's not perfect (it looks like a lot pledges got very few pledges) but it is much closer to normal!","16a21566":"## Get our environment setup<a id='1'><\/a>","e93e6062":"Notice that the shape of the data doesn't change, but that instead of ranging from 0 to 7, it now ranges from 0 to 1.","2d5810b7":"## Scaling\n\nThis means that you're transforming your data so that it fits within a specific scale, like 0-100 or 0-1. You want to scale the data when you are using methods based on measures of how far apart data points, like SVM or KNN. With these algorithms, a change of \"1\" in any numeric feature is given the same importance.\n\nFor example, you might be looking at the prices of some products in both Yen and US Dollars. One US Dollar is worth about 100 Yen, but if you don't scale your prices methods like SVM or KNN will consider a difference in price of 1 Yen as important as a difference of 1 US Dollar! This clearly doesn't fit with our intuitions of the world. With currency, you can convert between currencies. But what about if you're looking at something like height and weight? It's not entirely clear how many pounds should equal one inch (or how many kilograms should equal one meter).\n\nBy scaling your variables, you can help compare different variables on equal footing. To help solidify what scaling looks like, let's look at a made-up example. (Don't worry, we'll work with real data in just a second, this is just to help illustrate my point.)","72085400":"# 5 days of Data cleaning challenge.\n\n\n\n## Day 2 : Scale and Normalize Data\nHere's what we're going to do today:\n\n* [Get our environment set up](#1)\n* [Scaling vs. Normalization: What's the difference?](#2)\n* [Practice scaling](#3)\n* [Practice normalization](#4)\n\nLet's get started!","dcf5ca97":"## Practice Normalization<a id='4'><\/a>\nOk, now let's try practicing normalization. We're going to normalize the amount of money pledged to each campaign.","6f6a4e71":"## Normalization\nScaling just changes the range of your data. Normalization is a more radical transformation. The point of normalization is to change your observations so that they can be described as a normal distribution.\n\nNormal distribution: Also known as the \"bell curve\", this is a specific statistical distribution where a roughly equal observations fall above and below the mean, the mean and the median are the same, and there are more observations closer to the mean. The normal distribution is also known as the Gaussian distribution.\n\nIn general, you'll only want to normalize your data if you're going to be using a machine learning or statistics technique that assumes your data is normally distributed. Some examples of these include t-tests, ANOVAs, linear regression, linear discriminant analysis (LDA) and Gaussian naive Bayes. (Pro tip: any method with \"Gaussian\" in the name probably assumes normality.)\n\nThe method were using to normalize here is called the Box-Cox Transformation. Let's take a quick peek at what normalizing some data looks like:","f529a94a":"Notice that the shape of our data has changed. Before normalizing it was almost L-shaped. But after normalizing it looks more like the bell. "}}