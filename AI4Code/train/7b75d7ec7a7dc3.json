{"cell_type":{"e89a1f5b":"code","98f0369c":"code","2cbe0a7a":"code","e47ec011":"code","e6f7c3aa":"code","6ace228c":"code","74f4ddc1":"code","31e202f2":"code","a719d193":"code","cb2163c2":"code","f798d10b":"code","d460cc2a":"code","038867fc":"code","712b26e7":"code","7034bba3":"code","41b2f8a8":"code","a94e1539":"markdown","55951821":"markdown","914a15fe":"markdown","5d9f0462":"markdown","7b9c76f3":"markdown","646cf59a":"markdown","16a03fed":"markdown","746a062f":"markdown","a65ad60c":"markdown","3b54b443":"markdown","15016be4":"markdown","6a31694d":"markdown","3c3ec01a":"markdown","6cea57b6":"markdown"},"source":{"e89a1f5b":"!pip install deepspeed\n!pip install nltk\n!pip install contractions\n!pip install wandb","98f0369c":"%%bash\ncat <<'EOT' > ds_config_zero3.json\n{\n    \"fp16\": {\n        \"enabled\": true,\n        \"loss_scale\": 0,\n        \"loss_scale_window\": 1000,\n        \"initial_scale_power\": 16,\n        \"hysteresis\": 2,\n        \"min_loss_scale\": 1\n    },\n    \"optimizer\": {\n        \"type\": \"AdamW\",\n        \"params\": {\n            \"lr\": 1e-4,\n            \"betas\": [0.9, 0.999],\n            \"eps\": 1.0e-8,\n            \"weight_decay\": 1e-6\n        }\n    },\n\n    \"scheduler\": {\n        \"type\": \"WarmupDecayLR\",\n        \"params\": {\n            \"warmup_min_lr\": 3e-6,\n            \"warmup_max_lr\": 3e-5,\n            \"warmup_num_steps\": 20\n        }\n    },\n\n    \"zero_optimization\": {\n     \"stage\": 2,\n     \"offload_optimizer\": {\n         \"device\": \"cpu\",\n         \"pin_memory\": false\n     },\n     \"allgather_partitions\": true,\n     \"allgather_bucket_size\": 2e6,\n     \"reduce_scatter\": true,\n     \"reduce_bucket_size\": 2e6,\n     \"overlap_comm\": true,\n     \"contiguous_gradients\": true\n  }\n}\nEOT","2cbe0a7a":"from transformers import RobertaTokenizer, RobertaModel\nimport os\nimport numpy as np\nimport torch\n\n\nos.environ['MASTER_ADDR'] = 'localhost'\nos.environ['MASTER_PORT'] = '9994' # modify if RuntimeError: Address already in use\nos.environ['RANK'] = \"0\"\nos.environ['LOCAL_RANK'] = \"0\"\nos.environ['WORLD_SIZE'] = \"1\"","e47ec011":"def set_seed(seed=42):\n    '''Sets the seed of the entire notebook so results are the same every time we run.\n    This is for REPRODUCIBILITY.'''\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    # When running on the CuDNN backend, two further options must be set\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n    # Set a fixed value for the hash seed\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    \nset_seed()","e6f7c3aa":"import pandas as pd\ndf = pd.read_csv(\"..\/input\/jigsaw-toxic-severity-rating\/validation_data.csv\")\ndf.head()","6ace228c":"import string\nimport random\nfrom sklearn.model_selection import StratifiedKFold\n\nskf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\nfor fold, ( _, val_) in enumerate(skf.split(X=df, y=df.worker)):\n    df.loc[val_ , \"kfold\"] = int(fold)\n    \ndf[\"kfold\"] = df[\"kfold\"].astype(int)\ndf.head()","74f4ddc1":"import nltk\nfrom nltk.tokenize import word_tokenize\nimport re\nimport contractions\n\nRE_COMBINATIONS = {\n    '\\n':' ',\n    'https?:\/\/\\S+|www\\.\\S+':' link ',\n    '[\/.]':' ',\n    '[ .-]':' ',\n    '([A-Za-z])\\1{2,}':'\\1',\n    '([A-Za-z]{1,})([*!?\\'])\\2{2,}([A-Za-z]{1,})':'\\1\\2\\3',\n}\n\n\nclass JigsawDataset(torch.utils.data.Dataset):\n    def __init__(self, df, tokenizer, max_length):\n        self.df = df\n        self.max_len = max_length\n        self.tokenizer = tokenizer\n        self.more_toxic = df['more_toxic'].values\n        self.less_toxic = df['less_toxic'].values\n        \n    def __len__(self):\n        return len(self.more_toxic)\n    \n    def transform_text(self,text):\n        #removing common errors specific to this dataset\n        global RE_COMBINATIONS\n        for i in RE_COMBINATIONS.items():\n            text = re.sub(i[0],i[1],text)\n        \n        #uncontracting words :D\n        text = ' '.join([contractions.fix(word) for word in text.lower().split()])\n        \n        #removing any punctuations\n        text = list(map(lambda x:x if x.isalpha() else '',word_tokenize(text)))\n        text = [word for word in text if word != '']\n        \n        return ' '.join(text)\n        \n    def __getitem__(self, index):\n        more_toxic = self.transform_text(self.more_toxic[index])\n        less_toxic = self.transform_text(self.less_toxic[index])\n        \n        inputs_more_toxic = self.tokenizer.encode_plus(\n                                more_toxic,\n                                truncation=True,\n                                add_special_tokens=True,\n                                max_length=self.max_len,\n                                padding='max_length'\n                            )\n        inputs_less_toxic = self.tokenizer.encode_plus(\n                                less_toxic,\n                                truncation=True,\n                                add_special_tokens=True,\n                                max_length=self.max_len,\n                                padding='max_length'\n                            )\n        target = 1\n        \n        more_toxic_ids = inputs_more_toxic['input_ids']\n        more_toxic_mask = inputs_more_toxic['attention_mask']\n        \n        less_toxic_ids = inputs_less_toxic['input_ids']\n        less_toxic_mask = inputs_less_toxic['attention_mask']\n        \n        \n        return {\n            'more_toxic_ids': torch.tensor(more_toxic_ids, dtype=torch.long),\n            'more_toxic_mask': torch.tensor(more_toxic_mask, dtype=torch.long),\n            'less_toxic_ids': torch.tensor(less_toxic_ids, dtype=torch.long),\n            'less_toxic_mask': torch.tensor(less_toxic_mask, dtype=torch.long),\n            'target': torch.tensor(target, dtype=torch.long)\n        }\n\n","31e202f2":"MAX_LENGTH = 190\ndef prepare_datasets(fold):\n    df_train = df[df.kfold != fold].reset_index(drop=True)\n    df_valid = df[df.kfold == fold].reset_index(drop=True)\n    \n    train_dataset = JigsawDataset(df_train, tokenizer=tokenizer, max_length=MAX_LENGTH)\n    valid_dataset = JigsawDataset(df_valid, tokenizer=tokenizer, max_length=MAX_LENGTH)\n    \n    return train_dataset, valid_dataset","a719d193":"tokenizer = RobertaTokenizer.from_pretrained('roberta-large')\n\nclass JigsawModel(torch.nn.Module):\n    def __init__(self):\n        super(JigsawModel, self).__init__()\n        self.model = RobertaModel.from_pretrained('roberta-large')\n        self.fc = torch.nn.Linear(1024,1) #LazyLinear won't work with huggingface trainer\n        \n    def forward(self, ids, mask):        \n        out = self.model(input_ids=ids,attention_mask=mask,\n                         output_hidden_states=False)\n        outputs = self.fc(out.pooler_output)\n        return outputs","cb2163c2":"from torch import nn\nimport os\nfrom kaggle_secrets import UserSecretsClient\nimport wandb\nfrom transformers import Trainer, TrainingArguments\n\nclass MarginRankingLossTrainer(Trainer):\n    \n    def criterion(self,outputs1, outputs2, targets):\n        return nn.MarginRankingLoss(margin=0.5)(outputs1, outputs2, targets)\n    \n    def compute_loss(self, model, data, return_outputs=False):\n        \n        more_toxic_ids = data['more_toxic_ids']\n        more_toxic_mask = data['more_toxic_mask']\n        less_toxic_ids = data['less_toxic_ids']\n        less_toxic_mask = data['less_toxic_mask']\n        targets = data['target']\n        \n        batch_size = more_toxic_ids.size(0)\n\n        more_toxic_outputs = model(more_toxic_ids, more_toxic_mask)\n        less_toxic_outputs = model(less_toxic_ids, less_toxic_mask)\n        loss = self.criterion(more_toxic_outputs, less_toxic_outputs, targets)\n        \n        return loss\n    \n    def prediction_step(self,model,inputs,prediction_loss_only=True,ignore_keys=None,**kwargs):\n        inputs = self._prepare_inputs(inputs)\n        with torch.no_grad():\n            loss = self.compute_loss(model,inputs)\n        return (loss,None,None)\n        \n\nuser_secrets = UserSecretsClient()\nos.environ[\"WANDB_API_KEY\"] = user_secrets.get_secret(\"wandb_key\")\nos.environ[\"WANDB_PROJECT\"] = \"Jigsaw-Kaggle\"\n\ntraining_arguments = TrainingArguments(\n    output_dir='.\/results',          \n    num_train_epochs=1,\n    prediction_loss_only=True,\n    per_device_train_batch_size=24,\n    eval_accumulation_steps=4,\n    gradient_accumulation_steps=4,\n    warmup_steps=20,               \n    weight_decay=0.01,\n    logging_strategy=\"steps\",\n    logging_steps=1,\n    deepspeed=\"ds_config_zero3.json\",\n    report_to=\"wandb\"\n)\n\ntrain_dataset,valid_dataset = prepare_datasets(0)\ntrainer = MarginRankingLossTrainer(\n    model=JigsawModel(),                         \n    args=training_arguments,  \n    train_dataset = train_dataset,\n    eval_dataset = valid_dataset\n)","f798d10b":"%%wandb --height=800\nimport wandb\nwandb.init(name=\"deepspeed_hf_trainer\")","d460cc2a":"import wandb\nimport torch\nimport gc\ntrainer.train()\ntorch.cuda.empty_cache()\ngc.collect()\nwandb.run","038867fc":"import torch\nimport gc\ntorch.cuda.empty_cache()\ngc.collect()","712b26e7":"trainer.evaluate()\nwandb.run","7034bba3":"wandb.finish()","41b2f8a8":"import torch\nimport gc\ntorch.cuda.empty_cache()\ngc.collect()\ntrainer.save_model()","a94e1539":"## <h1 style = \"font-family: garamond; font-size: 35px; font-style: normal; letter-spcaing: 3px; border-width:5px; color:#90afc5; border-style: inset; border-radius: 100px 100px; border-color: #2a3132; padding:5px; text-align:center\">  Creating a config file for training the model <\/h1>","55951821":"## <h1 style = \"font-family: garamond; font-size: 35px; font-style: normal; letter-spcaing: 3px; border-width:5px; color:#90afc5; border-style: inset; border-radius: 100px 100px; border-color: #2a3132; padding:5px; text-align:center\">  Setting up environment variables for deepspeed <\/h1>","914a15fe":"<img style=\"display: block;margin-left: auto; margin-right: auto; width: 50%;\" src=\"https:\/\/img.shields.io\/badge\/Upvote-If%20you%20like%20my%20work-07b3c8?style=for-the-badge&logo=kaggle\">","5d9f0462":"## <h1 style = \"font-family: garamond; font-size: 35px; font-style: normal; letter-spcaing: 3px; border-width:5px; color:#90afc5; border-style: inset; border-radius: 100px 100px; border-color: #2a3132; padding:5px; text-align:center\"> Defineing the model <\/h1>","7b9c76f3":"## <h1 style = \"font-family: garamond; font-size: 35px; font-style: normal; letter-spcaing: 3px; border-width:5px; color:#90afc5; border-style: inset; border-radius: 100px 100px; border-color: #2a3132; padding:5px; text-align:center\"> Evaluating <\/h1>","646cf59a":"## <h1 style = \"font-family: garamond; font-size: 35px; font-style: normal; letter-spcaing: 3px; border-width:5px; color:#90afc5; border-style: inset; border-radius: 100px 100px; border-color: #2a3132; padding:5px; text-align:center\">  Loading data <\/h1>","16a03fed":"## <h1 style = \"font-family: garamond; font-size: 35px; font-style: normal; letter-spcaing: 3px; border-width:5px; color:#90afc5; border-style: inset; border-radius: 100px 100px; border-color: #2a3132; padding:5px; text-align:center\">  Live wandb monitering <\/h1>","746a062f":"## <h1 style = \"font-family: garamond; font-size: 35px; font-style: normal; letter-spcaing: 3px; border-width:5px; color:#90afc5; border-style: inset; border-radius: 100px 100px; border-color: #2a3132; padding:5px; text-align:center\"> Datasets <\/h1>","a65ad60c":"## <h1 style = \"font-family: garamond; font-size: 35px; font-style: normal; letter-spcaing: 3px; border-width:5px; color:#90afc5; border-style: inset; border-radius: 100px 100px; border-color: #2a3132; padding:5px; text-align:center\">  Creating dataset <\/h1>","3b54b443":"## <h1 style = \"font-family: garamond; font-size: 35px; font-style: normal; letter-spcaing: 3px; border-width:5px; color:#90afc5; border-style: inset; border-radius: 100px 100px; border-color: #2a3132; padding:5px; text-align:center\"> Setting seeds <\/h1>","15016be4":"## <h1 style = \"font-family: garamond; font-size: 35px; font-style: normal; letter-spcaing: 3px; border-width:5px; color:#90afc5; border-style: inset; border-radius: 100px 100px; border-color: #2a3132; padding:5px; text-align:center\">  Training the model using deepspeed <\/h1>","6a31694d":"# <span><h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; color:chartreuse; border-style: inset; border-color: limegreen;border-radius:30px; text-align:center; border-width:8px; padding:20px;\"> Huggingface + Deepspeed Starter<\/h1><\/span>","3c3ec01a":"## <h1 style = \"font-family: garamond; font-size: 35px; font-style: normal; letter-spcaing: 3px; border-width:5px; color:#90afc5; border-style: inset; border-radius: 100px 100px; border-color: #2a3132; padding:5px; text-align:center\"> Installing Libraries<\/h1>","6cea57b6":"> * This notebook is obviously inspired from [Pytorch Jigsaw Starter](https:\/\/www.kaggle.com\/debarshichanda\/pytorch-w-b-jigsaw-starter) and [$#!++Y patterns in NLP data](https:\/\/www.kaggle.com\/samarthagarwal23\/y-patterns-in-nlp-data)\n> * It uses deepspeed along with huggingface trainer for training the model. Thus, larger models can be finetuned with this method.\n> * feel free to upvote my first ever well produced notebook if you like it \u30c4"}}