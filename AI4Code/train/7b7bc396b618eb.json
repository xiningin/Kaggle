{"cell_type":{"04845f8f":"code","f2a96f05":"code","af475ba5":"code","ad12807b":"code","85bf0da9":"code","ceaa51c7":"code","7289fcc1":"code","baa1e2d7":"code","3f670f7e":"code","17e8a3fe":"markdown","8de1107b":"markdown","c9256bba":"markdown","04efd605":"markdown","9e534027":"markdown","09e28aa9":"markdown","17fa0d8e":"markdown","5c563d7c":"markdown"},"source":{"04845f8f":"!pip install mip\n\nimport os\nimport pandas as pd\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\nimport mip.model as mip\nfrom matplotlib.collections import LineCollection","f2a96f05":"def excess_return(returns,price,X_1,C):\n    import mip.model as mip\n    T=returns.shape[0]\n    z=[]\n    for t in range(1,T+1):\n        portfolio_return=[]\n        for j in range(1,returns.shape[1]):\n            r_jt=returns[\"security_{}\".format(j)][t]\n            q_jT=price[\"security_{}\".format(j)][T]\n            portfolio_return.append(r_jt*q_jT*X_1[\"security_{}\".format(j)])\n        benchmark_return=returns[\"index\"][t]*C\n        z.append(mip.xsum(portfolio_return)-benchmark_return)\n    return (mip.xsum(z)\/T)\n\ndef deviation(price,returns,C,X_1,t):\n    import mip.model as mip\n    theta=C\/price[\"index\"].iloc[-1]\n    z=[] #For d\n    for j in range(1,returns.shape[1]):\n        q_jt=price[\"security_{}\".format(j)][t]\n        z.append(q_jt*X_1[\"security_{}\".format(j)])\n    return (theta*price[\"index\"][t]-mip.xsum(z))","af475ba5":"file=5\nprice=pd.read_csv(\"..\/input\/index_{}.csv\".format(file))\n#price=price[0:201]\nreturns=(price-price.shift(1))\/price.shift(1)\nreturns.drop([0],axis=0,inplace=True)","ad12807b":"C=100000 #Capital available\ntau=0 #Additional Cash Fund\nlamda=0.1 # lower_bound for capital invested in jth stock\nnuh=0.3  # upper_bound\nk= 12 #Cardinality Constraint\npho=0.2 #Transaction Cost Proportion\nc_b=0.01 #Constant for buying cost\nc_s=0.01 #Constant for selling cost\nf=min(price.min())\/3 #Fixed Txn Cost\nxii=0.25 #Proportion cosntant for TrE\n\n\"\"\" Create the input variables \"\"\"\nn=price.shape[1]-1\nX_0=np.zeros((n,1)) #Gives units of jth stock in original portfolio\nT=200 #Input for training\ntheta=C\/price[\"index\"][T]\nfor j in random.sample(range(1,n+1),k):\n    X_0[j-1]=(C\/k)\/price[\"security_{}\".format(j)].iloc[0]","85bf0da9":"\"\"\"Initialisation Phase\"\"\"\n\nfailure=False\n#Solve LP Relaxation\nLP = mip.Model(\"Linear Relaxation of EIT\",mip.MAXIMIZE)\n\n#Gives units of jth stock in rebalaced portfolio\nX_1 = {x:LP.add_var(name=\"x1_{}\".format(x),var_type=\"C\",lb=0,ub=0) for x in list(returns.columns)[1:]}\n#Binary Variable depicting if investor holds stock j\ny = {x:LP.add_var(name=\"y_{}\".format(x),var_type=\"C\",lb=0,ub=1) for x in list(returns.columns)[1:]}\n#Binary Variable depicting if stock j is traded\nw={x:LP.add_var(name=\"w_{}\".format(x),var_type=\"C\",lb=0,ub=1) for x in list(returns.columns)[1:]}\n#Buying cost of jth stock\nb= {x:LP.add_var(name=\"b_{}\".format(x),var_type=\"C\",lb=0) for x in list(returns.columns)[1:]}\n#Selling cost of jth stock\ns= {x:LP.add_var(name=\"s_{}\".format(x),var_type=\"C\",lb=0) for x in list(returns.columns)[1:]}\n#Downside Devaition\nd={x:LP.add_var(name=\"d_t{}\".format(x),var_type=\"C\",lb=0) for x in list(returns.index)}\n#Upside Devaition\nu={x:LP.add_var(name=\"u_t{}\".format(x),var_type=\"C\",lb=0) for x in list(returns.index)}","ceaa51c7":"\"\"\" Objective \"\"\"\nLP+=excess_return(returns,price,X_1,C)\n\n\"\"\" Constarints \"\"\"    \nfor j in range(1,returns.shape[1]):\n    stock=\"security_{}\".format(j)\n    q_jT=price[stock][T]\n    #Constraint from eqn. 5\n    LP+=(lamda*C*y[stock]<= X_1[stock]*q_jT)\n    LP+=(X_1[stock]*q_jT <=nuh*C*y[stock])\n    #Constraint from eqn. 8\n    LP+=(b[stock]-s[stock]==(X_1[stock]*q_jT-X_0[j-1]*q_jT))\n    #Constraint from eqn. 9\n    LP+=(b[stock]+s[stock]==nuh*C*w[stock])\n    #LP+=(b[stock]<=(nuh*C-X_0[j-1]*q_jT)*w[stock]) #Eqn 14\n    #LP+=(s[stock]<=X_0[j-1]*q_jT*w[stock]) # Eqn 15\n\n\n#Constraint from eqn. 6\nLP+=(mip.xsum(y.values())<=k)\n\nstocks=[\"security_{}\".format(j) for j in range(1,returns.shape[1])]\n#Constraint from eqn. 7\nLP+=(mip.xsum([X_1[stock]*price[stock][T] for stock in stocks])==C)\n\n#Constraint from eqn. 10\nLP+=(mip.xsum([c_b*b[stock]+c_s*s[stock]+f*w[stock] for stock in stocks])<=pho*C)\n\n\nfor t in range(1,T+1):\n    #Constraint from eqn. 4\n    LP+=(d[t]-u[t]==deviation(price,returns,C,X_1,t))\n\n#Constraint from eqn. 16\nLP+=(mip.xsum([d[t]+u[t] for t in range(1,T+1)])<=xii*C)","7289fcc1":"print(\"Optimisastion Status={}\".format(str(LP.optimize())))\n\nresult=pd.DataFrame()\nfor stock in stocks:\n    temp=pd.DataFrame()\n    temp[\"security\"]=[stock]\n    temp[\"X_0\"]=X_0[int(stock.split('_')[-1])-1]\n    temp[\"X_1\"]=[X_1[stock].x]\n    temp[\"y\"]=[y[stock].x]\n    temp[\"w\"]=[w[stock].x]\n    temp[\"b\"]=[b[stock].x]\n    temp[\"s\"]=[s[stock].x]\n    result=result.append(temp,ignore_index=True)\n\nresult.to_csv(\"result.csv\",index=False)","baa1e2d7":"LP.write(\"EIT_mip.lp\")","3f670f7e":"#Calulation\nq_T=price.iloc[T][1:]\nw=result[\"X_1\"].values*q_T.values\nw=(w\/np.sum(w))\n#Initialisation\nindex=[1]\ntracking=[1]\nportfolio_return=[]\n#Looping\nfor t in returns.index:\n    index.append((1+returns[\"index\"][t])*index[-1])\n    portfolio_return.append(sum(w*returns.loc[t][1:].values))\n    tracking.append((1+portfolio_return[-1])*tracking[-1])\n#Plotting\nplot_df=pd.DataFrame()\nplot_df[\"index_value\"]=index\nplot_df[\"portfolio_value\"]=tracking\nplot_df[\"time_period\"]=list(price.index)\nplot_df.index=price.index\nfig, ax = plt.subplots()\nax.set_xlim(0,price.shape[0])\ntry:\n    ax.set_ylim(-0.3, 1.1*max(index+tracking))\nexcept:\n    print (\"Error in file={}\".format(file))\nind_1=plot_df[[\"time_period\",\"index_value\"]][0:T].values\nind_2=plot_df[[\"time_period\",\"index_value\"]][T:].values\nport_1=plot_df[[\"time_period\",\"portfolio_value\"]][0:T].values\nport_2=plot_df[[\"time_period\",\"portfolio_value\"]][T:].values\nplt.plot(ind_1[:,0],ind_1[:,1],color=(57\/255,62\/255,68\/255,0.7),label=\"Index\")\nplt.plot(port_1[:,0],port_1[:,1],color=(255\/255,87\/255,86\/255,0.43),label=\"Tracking Portfolio\")\nax.axvspan(T,price.shape[0],color=(57\/255,62\/255,68\/255),alpha=0.025,label=\"Outside of Time\")\nplt.axvline(x=T,color=(0,.20,.40))\nplt.legend(frameon=False,loc=2)\ncols=[(57\/255,62\/255,68\/255,0.8),(255\/255,87\/255,86\/255,0.8)]\nlc = LineCollection([ind_2,port_2],linewidths=(2,2),colors=cols,linestyles=[\"solid\",\"solid\"])\nax.add_collection(lc)\nplt.fill_between(x=ind_2[:,0], y1=port_2[:,1]+3*np.std(portfolio_return[T:]),\n                  y2=port_2[:,1]-3*np.std(portfolio_return),\n                  color=(255\/255,87\/255,86\/255,0.2))\nplt.title(\"Index vs Tracking Portfolio for index=1\")\n","17e8a3fe":"### Read the input index file","8de1107b":"### Define the functions for Excess Return and Deviation Calculation","c9256bba":"### Define the Linear Relaxation of EIT and necessary problem variables","04efd605":"### Visualize Results","9e534027":"### Solve the problem and collect the results\n##### Optimization status, which can be OPTIMAL(0), ERROR(-1), INFEASIBLE(1), UNBOUNDED(2). When optimizing problems with integer variables some additional cases may happen, FEASIBLE(3) for the case when a feasible solution was found but optimality was not proved, INT_INFEASIBLE(4) for the case when the lp relaxation is feasible but no feasible integer solution exists and NO_SOLUTION_FOUND(5) for the case when an integer solution was not found in the optimization.","09e28aa9":"### Add Objective and Constraints","17fa0d8e":"### Write the LP problem to a file","5c563d7c":"### Define Parameters of the model and create input vars"}}