{"cell_type":{"a128b37b":"code","d482102e":"code","57fbf448":"code","8094b11f":"code","ed0eff9d":"code","31f97086":"code","8af51348":"code","5e834735":"code","aa6c7cea":"code","3b43a930":"code","9555485e":"code","bc028ea0":"code","7b21a59e":"code","c3d350b0":"code","fe205833":"code","6a53f331":"code","414a30bc":"code","f2402725":"code","c5d562b1":"code","b9495b13":"code","eede098b":"code","a3e8d77f":"code","f5d5b335":"code","cda4ad0e":"code","1838b3ce":"code","a8b23b21":"code","f6a4f769":"code","ffc5a798":"code","38213c80":"code","32595a9e":"code","63f0a97e":"code","376be86b":"code","d941baf2":"code","c9f21b97":"code","c466811d":"code","91ad6bc2":"code","50187d47":"code","5d808b3a":"code","c51dea9b":"code","39b852d6":"code","3f4c5a6b":"code","29916db2":"code","06bdaa12":"code","d6ad6263":"code","28267d14":"code","fce9d3fd":"code","e4b1778c":"code","439ff130":"code","9026688d":"code","80a11b75":"code","4590ca18":"code","0964ff90":"code","fdd35343":"code","0128d52b":"code","98b9a1f5":"code","535c5b12":"code","d4d15955":"code","cbc18e0e":"code","b86f8384":"code","8a707dd7":"code","a3b470d7":"markdown","afbe544b":"markdown","05ccc391":"markdown","2cb01d78":"markdown","2845f5a8":"markdown","e3cf9871":"markdown"},"source":{"a128b37b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d482102e":"iris = pd.read_csv('..\/input\/Iris.csv')","57fbf448":"iris.head(2)","8094b11f":"iris.tail(2)","ed0eff9d":"iris.info()","31f97086":"iris1 = iris.drop(\"Id\",axis=1)","8af51348":"#Renaming columns\niris1.columns=['sepal_length','sepal_width','petal_length','petal_width','species']","5e834735":"iris1.head(1)","aa6c7cea":"iris1.dtypes","3b43a930":"#changing the data type of species to category\niris1['species']=iris1['species'].astype('category')\niris1.dtypes","9555485e":"iris1.species.unique()","bc028ea0":"iris2 = pd.DataFrame(iris1.species.value_counts())\niris2","7b21a59e":"iris1.shape","c3d350b0":"iris2.shape","fe205833":"iris1.describe()","6a53f331":"iris1.size","414a30bc":"iris1.isnull().sum()","f2402725":"iris1.species =iris1.species.map({'Iris-setosa':0,'Iris-versicolor':1, 'Iris-virginica':2})","c5d562b1":"iris1.head(2)","b9495b13":"#Realtion between sepal length and width\n#iris1.plot(kind='scatter',x='species', y='sepal_length')\n\nfig = iris1[iris1.species==0].plot(kind='scatter', x='sepal_length', y='sepal_width', color='orange', label='Setosa')\niris1[iris1.species==1].plot(kind='scatter', x='sepal_length', y='sepal_width', color='blue',label='versicolor',ax=fig)\niris1[iris1.species==2].plot(kind='scatter', x='sepal_length', y='sepal_width', color='green',label='veriginica',ax=fig)\nfig.set_xlabel(\"Sepal Length\")\nfig.set_ylabel(\"Sepal Width\")\nfig.set_title(\"Sepal Length Vs Width\")\n","eede098b":"#relation between petal length and width\nfig = iris1[iris1.species==0].plot(kind='scatter', x='petal_length', y='petal_width', color='orange', label='Setosa')\niris1[iris1.species==1].plot(kind='scatter', x='petal_length', y='petal_width', color='blue',label='versicolor',ax=fig)\niris1[iris1.species==2].plot(kind='scatter', x='petal_length', y='petal_width', color='green',label='versicolor',ax=fig)\nfig.set_xlabel(\"Petal Length\")\nfig.set_ylabel(\"Petal Width\")\nfig.set_title(\"Petal Length Vs Width\")","a3e8d77f":"iris1.hist(edgecolor='black')","f5d5b335":"iris1_data = iris1.iloc[:,:4]\niris1_data.head(2)","cda4ad0e":"iris1_target = iris1.loc[:,'species']\ntype(iris1_target)","1838b3ce":"X,y = iris1_data, iris1_target","a8b23b21":"#using train_test_split \nX_train, X_test, y_train,y_test = train_test_split(X, y,test_size=.2, random_state=0)","f6a4f769":"#using logistic regression\nlog = LogisticRegression().fit(X_train, y_train)","ffc5a798":"y_pred = log.predict(X_test)","38213c80":"logreg_score = accuracy_score(y_test,y_pred)\nlogreg_score","32595a9e":"#using KNeighborclassifer\nmodel = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(X_train,y_train)","63f0a97e":"y_pred_k = model.predict(X_test)","376be86b":"knn_score = accuracy_score(y_test,y_pred_k)\nknn_score","d941baf2":"k_range=range(1,31)\nscores = []\nfor k in k_range:\n    knn = KNeighborsClassifier(n_neighbors = k)\n    knn.fit(X_train,y_train)\n    y_pred = knn.predict(X_test)\n    scores.append(accuracy_score(y_test,y_pred))","c9f21b97":"%matplotlib inline\nplt.plot(k_range,scores)\nplt.xlabel('value of k')\nplt.ylabel('scores')","c466811d":"knn = KNeighborsClassifier(n_neighbors=15)\nknn.fit(X_train,y_train)\ny_pred = knn.predict(X_test)\ny_pred","91ad6bc2":"knn = KNeighborsClassifier(n_neighbors = 5)\nscores= cross_val_score(knn, X,y,cv=10, scoring='accuracy')\nscores","50187d47":"scores.mean()","5d808b3a":"k_range=range(1,31)\nk_scores = []\nfor k in k_range:\n    knn = KNeighborsClassifier(n_neighbors = k)\n    scores = cross_val_score(knn, X,y,cv=10,scoring='accuracy')\n    k_scores.append(scores.mean())\nk_scores","c51dea9b":"%matplotlib inline\nplt.plot(k_range,k_scores)\nplt.xlabel('value of k')\nplt.ylabel('scores')","39b852d6":"#applying the best params from teh kfold \nknn = KNeighborsClassifier(n_neighbors = 20)\nscores= cross_val_score(knn, X,y,cv=10, scoring='accuracy')\nscores.mean()","3f4c5a6b":"k_range = range(1,31)\nparam_grid = dict(n_neighbors=k_range)\nparam_grid","29916db2":"grid= GridSearchCV(knn,param_grid,cv=10,scoring='accuracy')","06bdaa12":"grid.fit(X,y)","d6ad6263":"grid.cv_results_.keys()","28267d14":"grid.best_estimator_","fce9d3fd":"grid.best_params_","e4b1778c":"grid.best_score_","439ff130":"#applying the best params from the grid search \nknn = KNeighborsClassifier(n_neighbors = 13)\nknn.fit(X,y)\nX.head(2)\nX.shape\n#predict the y for input [3,5,4,2]\nknn.predict([[3,5,4,2]])","9026688d":"k_range = range(1,31)\nweight_options = ['uniform','distance']","80a11b75":"param_grid = dict(n_neighbors=k_range,weights=weight_options)\nparam_grid","4590ca18":"grid.fit(X,y)","0964ff90":"grid.best_params_","fdd35343":"grid.best_score_","0128d52b":"grid.predict([[3,5,4,13]])","98b9a1f5":"param_dist = dict(n_neighbors=k_range, weights=weight_options)","535c5b12":"rand = RandomizedSearchCV(knn,param_dist, cv=10,scoring= 'accuracy',n_iter = 10, random_state = 5)\nrand.fit(X,y)\nrand.cv_results_.keys()","d4d15955":"rand.best_params_","cbc18e0e":"rand.best_score_","b86f8384":"rand.best_index_\nrand.best_estimator_","8a707dd7":"best_scores = []\nfor _ in range(20):\n    rand = RandomizedSearchCV(knn,param_dist,cv =10,scoring='accuracy',n_iter=10)\n    rand.fit(X,y)\n    best_scores.append(rand.best_score_)\nbest_scores","a3b470d7":"Cross validation","afbe544b":"Observation\nThough randomizedSearchCV executed only 10 combinations, it was able to find the best combination (score= 0.98) which was given by the grid search CV.","05ccc391":"grid = GridSearchCV(knn,param_grid,cv=10,scoring='accuracy')","2cb01d78":"Randomised search cv","2845f5a8":"Decision Tree classifier","e3cf9871":"GridSearchCV"}}