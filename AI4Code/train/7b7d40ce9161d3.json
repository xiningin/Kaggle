{"cell_type":{"b5ce03d5":"code","1c23e58b":"code","8022b6ea":"code","ba2bb43f":"code","25c136eb":"code","65a6f88f":"code","aa2adfec":"code","990e7bf9":"code","ddab68ab":"code","411001db":"code","781d97bf":"code","ef42863b":"code","3cadfede":"code","ed7257dc":"code","e70fced1":"code","987f7128":"code","8cd59065":"code","71d56737":"code","3690eddb":"code","5cf3c677":"code","fdfdbc1c":"code","cf4ba6e6":"code","4bb30d7f":"code","9bdefee4":"code","3a6727ba":"code","bed3539e":"code","4e70c073":"code","6e5fe663":"code","9074b27c":"code","3b240378":"code","b4b20f62":"code","07514062":"code","032f2cb4":"code","9d496486":"code","5215af80":"code","951b9015":"markdown","b6b4f5dc":"markdown","10fc63e1":"markdown","081c2710":"markdown","d4f47231":"markdown","bd4052f7":"markdown","a415af3a":"markdown","5d3b82cd":"markdown","6d42c676":"markdown","f4b387b8":"markdown","79ec418f":"markdown","e72f37fc":"markdown","48357c25":"markdown","77b5e967":"markdown","9f3098e9":"markdown"},"source":{"b5ce03d5":"import numpy as np \nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.metrics import accuracy_score,classification_report,f1_score\n\nfrom sklearn.impute import SimpleImputer\n\n\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.model_selection import GridSearchCV\nfrom xgboost.sklearn import XGBRegressor\nprint('Compelete Imports')","1c23e58b":"#File Path Full\nfile_path_train='..\/input\/titanic\/train.csv'\nfile_path_test='..\/input\/titanic\/test.csv'\n\n# Read the train data\ndf_train = pd.read_csv(file_path_train,index_col='PassengerId')\n# Read the test data\ndf_test=pd.read_csv(file_path_test,index_col='PassengerId')\n\n\nprint('Read Done!')\n","8022b6ea":"df_test.columns","ba2bb43f":"# Remove rows with missing target, separate target from predictors\n\ndf_train.dropna(axis=0, subset=['Survived'], inplace=True)\n# define target\ny = df_train.Survived\n# Remove target colum\nX = df_train.drop(['Survived'], axis=1)\nX_test=df_test\n","25c136eb":"X.head()","65a6f88f":"X_test.head()","aa2adfec":"category_colums=[colum for colum in X.columns if X[colum].dtype == 'object']\nlen(category_colums)","990e7bf9":"X.drop(columns=['Name', 'Cabin', 'Ticket'],inplace=True)\nX_test.drop(columns=['Name', 'Cabin', 'Ticket'],inplace=True)","ddab68ab":"# Get list of categorical variables\ns = (X.dtypes == 'object')\nobject_cols = list(s[s].index)\n\nprint(\"Categorical variables:\")\nprint(object_cols)","411001db":"cols_with_missing = [col for col in X.columns\n                     if X[col].isnull().any()]\nlen(cols_with_missing)","781d97bf":"# Function for comparing different approaches\ndef score_dataset(X_train, X_valid, y_train, y_valid):\n    model = RandomForestClassifier(n_estimators=100, random_state=0)\n    model.fit(X_train, y_train)\n    preds = model.predict(X_valid)\n    return accuracy_score(y_valid, preds)","ef42863b":"cols_with_missing = [col for col in X.columns\n                     if X[col].isnull().any()]\ncols_with_missing","3cadfede":"# Imputation\nmy_imputer = SimpleImputer(strategy='most_frequent')\nimputed_X = pd.DataFrame(my_imputer.fit_transform(X))\nimputed_X_test = pd.DataFrame(my_imputer.transform(X_test))\n\n# Imputation removed column names; put them back\nimputed_X.columns = X.columns\nimputed_X_test.columns = X_test.columns\n","ed7257dc":"imputed_X\n","e70fced1":"imputed_X_test","987f7128":"cols_with_missing_imputed_X = [col for col in imputed_X.columns\n                     if imputed_X[col].isnull().any()]\ncols_with_missing_imputed_X","8cd59065":"# Make copy to avoid changing original data \nimputed_X_lable = imputed_X.copy()\nimputed_X_test_lable = imputed_X_test.copy()\n\n# Apply label encoder to each column with categorical data\nlabel_encoder = LabelEncoder()\nfor col in object_cols:\n    imputed_X_lable[col] = label_encoder.fit_transform(imputed_X[col])\n    imputed_X_test_lable[col] = label_encoder.transform(imputed_X_test[col])","71d56737":"imputed_X_lable","3690eddb":"imputed_X_lable.isna().sum()","5cf3c677":"y","fdfdbc1c":"X_train, X_valid, y_train, y_valid=train_test_split(imputed_X_lable,y)","cf4ba6e6":"max_depth =list(range(2, 20,1))\nmax_depth","4bb30d7f":"results = {}\nfor i in max_depth:\n    dt = DecisionTreeClassifier(max_leaf_nodes=i, random_state=1)\n    dt.fit(X_train, y_train)\n    preds = dt.predict(X_valid)\n    acc = accuracy_score(y_true=y_valid, y_pred=preds)\n    f1 = f1_score(y_true=y_valid, y_pred=preds)\n    print(i)\n    print(classification_report(y_true=y_valid, y_pred=preds))\n    print('-----------------------')\n    results[i] = f1","9bdefee4":"results","3a6727ba":"max(results, key=results.get)","bed3539e":"results[max(results, key=results.get)]","4e70c073":"best_max_leaf_node = max(results, key=results.get)\nbest_max_leaf_node","6e5fe663":"final_model = DecisionTreeClassifier(max_leaf_nodes=best_max_leaf_node)\nfinal_model.fit(imputed_X_lable, y)","9074b27c":"imputed_X_test_lable","3b240378":"imputed_X_test_lable.isna().sum()","b4b20f62":"my_preds_test=final_model.predict(imputed_X_test_lable)\nmy_preds_test","07514062":"my_preds_test.shape","032f2cb4":"imputed_X_test_lable.shape","9d496486":"test_out = pd.DataFrame({\n    'PassengerId': X_test.index, \n    'Survived': my_preds_test\n})","5215af80":"test_out.to_csv('submission.csv', index=False)","951b9015":"##  Imputation","b6b4f5dc":"## count columns with Categories variables ","10fc63e1":"# OutPut","081c2710":"# Submission","d4f47231":"# My Imports","bd4052f7":"# Setup hyper-parameters","a415af3a":"# Split","5d3b82cd":"# final Model","6d42c676":"## Prediction","f4b387b8":"# Import my dataSet Train_test","79ec418f":"# Function for comparing different approaches\n","e72f37fc":"## get columns with missing values","48357c25":"**We don't need Name column beacause it's not necessary**","77b5e967":"### best max_leaf_node","9f3098e9":"## Label Encoding"}}