{"cell_type":{"9cd7a5f5":"code","5694b8ed":"code","c34d3c7a":"code","61c14a23":"code","5d9aa95f":"code","277e576f":"code","5ce0ff60":"code","d1ffa961":"markdown","eae07207":"markdown","415fd2e6":"markdown"},"source":{"9cd7a5f5":"# provide a country and its population here\ncountry = 'France'\ncountry_population = 67000000","5694b8ed":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom scipy import integrate, optimize\n\nsubmission_example = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-2\/submission.csv\")\ntest = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-2\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-2\/train.csv\")","c34d3c7a":"def sir_model(y, x, beta, gamma):\n    sus = -beta * y[0] * y[1] \/ N\n    rec = gamma * y[1]\n    inf = -(sus + rec)\n    return sus, inf, rec\n\ndef fit_odeint(x, beta, gamma):\n    return integrate.odeint(sir_model, (sus0, inf0, rec0), x, args=(beta, gamma))[:,1]","61c14a23":"def fit_sir_country(country, country_pop, initial_date, additional_sim_days):\n    \"\"\"\n    Fit the SIR curve with real values of a country starting from the initial_date\n    \n    Returns:\n    remaining_to_peak = remaining days before we reach the peak of infections\n    ydata = real infection data\n    fitted = simulated infection data\n    xdata = days vector of real data\n    xdata2 = extended vector of days taking into consideration future predictions\n    \"\"\"\n    population = float(country_pop)\n    confirmed_total_date_country = train[train['Country_Region']==country].groupby(['Date']).agg({'ConfirmedCases':['sum']})\n    fatalities_total_date_country = train[train['Country_Region']==country].groupby(['Date']).agg({'Fatalities':['sum']})\n    total_date_country = confirmed_total_date_country.join(fatalities_total_date_country)\n    country_df = total_date_country[(initial_date+1):]\n    country_df['day_count'] = list(range(1,len(country_df)+1))\n\n    ydata = [i for i in country_df.ConfirmedCases['sum'].values]\n    xdata = country_df.day_count\n    ydata = np.array(ydata, dtype=float)\n    xdata = np.array(xdata, dtype=float)\n\n    N = population\n    inf0 = ydata[0]\n    sus0 = N - inf0\n    rec0 = 0.0\n    \n    def sir_model(y, x, beta, gamma):\n        sus = -beta * y[0] * y[1] \/ N\n        rec = gamma * y[1]\n        inf = -(sus + rec)\n        return sus, inf, rec\n\n    def fit_odeint(x, beta, gamma):\n        return integrate.odeint(sir_model, (sus0, inf0, rec0), x, args=(beta, gamma))[:,1]\n\n    sim_length = len(xdata) + additional_sim_days # Length of simulation\n    xdata2 = np.arange(1,sim_length)\n    popt, pcov = optimize.curve_fit(fit_odeint, xdata, ydata)\n    fitted = fit_odeint(xdata2, *popt)\n    print(\"Initial Start day : \", initial_date, \" Optimal parameters: beta =\", popt[0], \" and gamma = \", popt[1])\n    remaining_to_peak = np.argmax(fitted) - len(xdata)\n    print(\"   Remaining days to reach global peak infected cases : \", remaining_to_peak)\n    return remaining_to_peak, ydata, fitted, xdata, xdata2","5d9aa95f":"# Fit SIR to the corresponding country and for the initial simulation start date\nremaining_to_peak, ydata, fitted, xdata, xdata2 = fit_sir_country(country, country_population, 10, 40)\nplt.plot(xdata, ydata, 'o', label='Real data')\nplt.plot(xdata2, fitted, label='SIR prediction')\nplt.title(\"Fit of SIR model to the country infected cases\")\nplt.ylabel(\"Population infected\")\nplt.xlabel(\"Days\")\nplt.legend(loc='best')\nplt.show()","277e576f":"remaining_days = []\n# Loop on different initial start date for the simulation\nfor i in range(2,20):\n    remaining_to_peak, _, _, _, _ = fit_sir_country(country, country_population, i, 40)\n    remaining_days.append(remaining_to_peak)\nprint(remaining_days)","5ce0ff60":"from scipy import stats\n\ndef rmNegative(L):\n    index = len(L) - 1\n    while index >= 0:\n        if L[index] < 0:\n            del L[index]\n        index = index - 1\n\nrmNegative(remaining_days)\nstats.describe(remaining_days)\nprint(\"On average, the peak of infected cases in \", country, \" is coming in : \", np.mean(remaining_days) ,\"days\")","d1ffa961":"# Predict remaining days before reaching peak\nIn this Notebook, I used SIR model to predict the remaining days needed before reaching the peak of infections in a given country.\n\nThis value can be used as a feature to train your ML model.\n\nReference for SIR model : [https:\/\/www.kaggle.com\/saga21\/covid-global-forecast-sir-model-ml-regressions\/notebook](https:\/\/www.kaggle.com\/saga21\/covid-global-forecast-sir-model-ml-regressions\/notebook)","eae07207":"Expand to see code needed to make our SIR model fit with the real data of the given country :","415fd2e6":"Here, we can see that -sometimes- we get negative duration values for some simulations. This is due to a bad fit between real data and SIR model. We can remove the negative values from that list and calculate the mean of the list to get an idea about the remaining days before the peak."}}