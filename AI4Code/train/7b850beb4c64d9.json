{"cell_type":{"5d3bfc3e":"code","f3fb538f":"code","796ae1b7":"code","2ce57200":"code","57643745":"code","5d5e6f0a":"code","8320f149":"code","2878b798":"code","cbf18556":"code","e740163f":"code","1095595a":"code","9f2e17a5":"code","cfcd62be":"code","841a6062":"code","8b63a06a":"code","7cc842a9":"code","c4f9ae9d":"code","c090be2f":"code","963c5479":"code","a13ed986":"code","e9abfbc1":"markdown","033f9101":"markdown","c5ed861b":"markdown","cafd3a6b":"markdown","e43581ae":"markdown","328e5cf5":"markdown","c9461bb4":"markdown","4e458940":"markdown","b2cb91db":"markdown","fef92208":"markdown","341fb730":"markdown","a00821a4":"markdown","fa5101f3":"markdown","49c7756d":"markdown"},"source":{"5d3bfc3e":"# 786\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nimport plotly.graph_objs as go\n\nimport plotly as py\nfrom plotly import tools\nfrom plotly.offline import iplot\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f3fb538f":"dt = pd.read_csv(\"..\/input\/pakistan-corona-virus-citywise-data\/PK COVID-19-30apr.csv\", encoding = \"ISO-8859-1\", parse_dates=[\"Date\"])\nprint(\"Data Dimensions are: \", dt.shape)\nprint(dt.head)","796ae1b7":"dt.info()","2ce57200":"dt['Travel_history'].unique\ndt['Travel_history'].fillna('Unknown',  inplace=True)","57643745":"dt = dt.sort_values('Date')\ndt['Deaths']=dt['Deaths'].astype(int)\ndt['Cases']=dt['Cases'].astype(int)\ndt['Recovered']=dt['Recovered'].astype(int)\n\ndt.loc[dt.Province == \"khyber Pakhtunkhwa\", \"Province\"] = \"Khyber Pakhtunkhwa\"\ndt.loc[dt.Travel_history == \"Tableegi Jamaat\", \"Travel_history\"] = \"Tableeghi Jamaat\"","5d5e6f0a":"pdc = dt.groupby('Date')['Cases'].sum().reset_index()\npdd = dt.groupby('Date')['Deaths'].sum().reset_index()#.drop('Date', axis=1)\npdr = dt.groupby('Date')['Recovered'].sum().reset_index()#.reset_index()#.drop('Date', axis=1)\n\np = pd.DataFrame(pdc) \np['Deaths'] = pdd['Deaths']\np['Recovered'] = pdr['Recovered']\n\n#Cumulative Sum\np['Cum_Cases'] = p['Cases'].cumsum() \np['Cum_Deaths'] = p['Deaths'].cumsum()\np['Cum_Recovered'] = p['Recovered'].cumsum()\n\nprbind = pd.DataFrame(pdc) \nprbind['Type'] = 'Cases'\nprbind.rename(columns={'Cases': 'Count'}, inplace=True)\n\npdd['Type'] = 'Deaths'\npdd.rename(columns={'Deaths': 'Count'}, inplace=True)\nprbind =prbind.append(pdd)\n\npdr['Type'] = 'Recovered'\npdr.rename(columns={'Recovered': 'Count'}, inplace=True)\nprbind =prbind.append(pdr)\n\ndel pdc, pdd, pdr\n","8320f149":"p['Dateofmonth'] = p['Date'].dt.day\np['Month'] = p['Date'].dt.month\np['Week'] = p['Date'].dt.week\np['Dayofweek'] = p['Date'].dt.dayofweek # 0 = monday.\np['Weekdayflg'] = (p['Dayofweek'] \/\/ 5 != 1).astype(float)\np['Month'] = p['Date'].dt.month\np['Quarter'] = p['Date'].dt.quarter\np['Dayofyear'] = p['Date'].dt.dayofyear\np.head(10)","2878b798":"fig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(x=p['Date'], y=p['Cases'],\n                    mode='lines+markers',\n                    name='Cases'))\nfig.add_trace(go.Scatter(x=p['Date'], y=p['Deaths'],\n                    mode='lines+markers',\n                    name='Deaths'))\nfig.add_trace(go.Scatter(x=p['Date'], y=p['Recovered'],\n                    mode='lines+markers',\n                    name='Recoveries'))\n\nfig.show()","cbf18556":"fig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(x=p['Date'], y=p['Cum_Cases'],\n                    mode='lines+markers',\n                    name='Cases'))\nfig.add_trace(go.Scatter(x=p['Date'], y=p['Cum_Deaths'],\n                    mode='lines+markers',\n                    name='Deaths'))\nfig.add_trace(go.Scatter(x=p['Date'], y=p['Cum_Recovered'],\n                    mode='lines+markers',\n                    name='Recoveries'))\n\nfig.show()","e740163f":"px.box(prbind, x='Type', y='Count')","1095595a":"n = dt.groupby(['Date' ,'Province'])['Cases'].sum().reset_index()\npx.box(n, y=\"Cases\", color = \"Province\")","9f2e17a5":"n = dt.groupby(['Date' ,'Travel_history'])['Cases'].sum().reset_index()\npx.box(n, y=\"Cases\", color = \"Travel_history\")","cfcd62be":"px.scatter(p, x= 'Date', y = 'Cases', trendline = \"ols\")","841a6062":"n = dt.groupby(['Date' ,'Province'])['Cases'].sum().reset_index()\nfig = px.scatter(n, x=\"Date\", y=\"Cases\", color=\"Province\", trendline=\"lowess\")\nfig.show()","8b63a06a":"n = dt.query(\"Province == 'Sindh' or Province == 'Punjab'\")\nn = n.groupby(['Date', 'Travel_history' ,'Province'])['Cases'].sum().reset_index()\nfig = px.scatter(n, x=\"Date\", y=\"Cases\", facet_col=\"Province\", color=\"Travel_history\", trendline=\"ols\")\nfig.show()\n\nresults = px.get_trendline_results(fig)\n#print(results)\n\nresults.query(\"Province == 'Sindh' or Province == 'Punjab'\").px_fit_results.iloc[0].summary()","7cc842a9":"n = dt.groupby('Date')['Cases'].sum().reset_index()\npx.density_contour(dt,x=\"Date\",y=\"Cases\",marginal_x=\"histogram\",marginal_y=\"histogram\")","c4f9ae9d":"fig = go.Figure()\nx = dt[\"Date\"]\ny = dt[\"Cases\"]\nfig.add_trace(go.Histogram2dContour(\n        x = x,\n        y = y,\n        colorscale = 'Reds',\n        xaxis = 'x',\n        yaxis = 'y'\n    ))\nfig.add_trace(go.Scatter(\n        x = x,\n        y = y,\n        xaxis = 'x',\n        yaxis = 'y',\n        mode = 'markers',\n        marker = dict(\n            color = 'black',\n            size = 2\n        )\n    ))","c090be2f":"n = dt.groupby(['Date' ,'Province','City', 'Travel_history'])['Cases'].sum().reset_index()\npx.scatter(n, x= 'Date', y = 'Cases', color=\"Travel_history\", size =\"Cases\",  hover_data=['Province','City'])","963c5479":"n = dt.groupby(['Date' ,'Province'])['Cases'].sum().reset_index()\npx.line(n, x='Date', y='Cases', color='Province')","a13ed986":"# cases by date\ncases_perdate = np.asarray(dt.groupby('Date')['Cases'].sum())\n\n# 7 day moving average of cases by date\nms_average = pd.Series(cases_perdate).rolling(window=7).mean()\n#ms_average = np.asarray(ms_average.drop(ms_average.index[0:6]))\nms_average = np.round(ms_average, 0)\n\ndt_dates = np.arange('2019-02', '2019-05', dtype='datetime64[D]')\ndt_range = dt_dates[25:81]\n\ntrace_date = go.Scatter(\n             x = dt_dates,\n             y = cases_perdate,\n             mode = 'lines',\n             name = 'Cases',\n             line = dict(\n                 color = 'rgb(215, 0, 0)',\n                 width = 3)\n             )\n\ntrace_mean = go.Scatter(\n             x = dt_range,\n             y = ms_average,\n             mode = 'lines',\n             name = 'Average',\n             line = dict(\n                 color = 'rgb(215, 0, 0)',\n                 width = 5),\n             opacity = 0.33\n             )\n\nlayout = go.Layout(\n         title = 'Covid Cases by Date in Pakistan <br>'\n                 '<sub>Hover & Rescale Plot to Desired Dates<\/sub>',\n         showlegend = False,\n         xaxis = dict(\n             rangeslider = dict(thickness = 0.05),\n             type = 'date',\n             showline = True,\n             showgrid = False\n         ),\n         yaxis = dict(\n             range = [0, 56],\n             autotick = False,\n             tick0 = 10,\n             dtick = 10,\n             showline = True,\n             showgrid = False)\n         )\n\ndata = [trace_date, trace_mean]\nfigure = dict(data = data, layout = layout)\niplot(figure)","e9abfbc1":"Let's have a look at the trendlines for Sindh and Punjab Provinces","033f9101":"**Guys, If you want to continue from here, you can fork this kernel and continue your analysis. **\n\n### Way Forward\n1. Analysis of Death and Recoveries \n2. Weekday and Weekend Analysis\n3. Trends in Province and Top 10 Cities\n4. Analysis with Travel_History\n5. Weekly Moving Average Analysis","c5ed861b":"## Data Loading & Preparation","cafd3a6b":"### Few new features extracted","e43581ae":"#### Daily cases vs deaths vs recoveries","328e5cf5":"## Exploratory Analysis","c9461bb4":"#### Cumulative Sums of Daily cases vs deaths vs recoveries","4e458940":"Type casting variables and fixing one Province value","b2cb91db":"### Trendlines in each Province","fef92208":"Let's have a holistic view of all cases with Travel History","341fb730":"### Density Analysis\nWe need to look into the density of the erupted cases over time","a00821a4":"Travel history has less records, we will fill NAs with Unknown","fa5101f3":"### Growth Analysis\nLet's have a look at scatter plot of cases with OLS trendline.","49c7756d":"#### Sindh & Punjab "}}