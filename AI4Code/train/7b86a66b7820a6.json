{"cell_type":{"87f0421f":"code","08bc49db":"code","9d04b6f9":"code","c3d9b6fa":"code","adf9f9fd":"code","a85a0687":"code","373aaec4":"code","27e89032":"code","b39d8836":"code","be978636":"code","6c0a7f1f":"code","35e586c3":"markdown","5ea47068":"markdown","090df2aa":"markdown","b1953602":"markdown"},"source":{"87f0421f":"import numpy as np \nimport matplotlib.pyplot as plt \nimport cv2\nimport glob\n\n# This is a bit of magic to make matplotlib figures appear inline in the notebook\n# rather than in a new window.\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (19.0, 17.0) # set default size of plots\nplt.rcParams['image.interpolation'] = 'nearest'\nplt.rcParams['image.cmap'] = 'gray'\n\n# Some more magic so that the notebook will reload external python modules;\n# see http:\/\/stackoverflow.com\/questions\/1907993\/autoreload-of-modules-in-ipython\n%load_ext autoreload\n%autoreload 2","08bc49db":"data_dir = r'\/kaggle\/input\/dataset\/dataset\/'\nclasses = ['broadleaf', 'grass', 'soil', 'soybean'] \n\nnum_file = 1100 \nall_files = [] \nnum_data =num_file*len(classes)\nY = np.zeros(num_data)\n\n\nfor i, cls in enumerate(classes):\n    all_files += [f for f in glob.glob(data_dir+cls+'\/*.tif')][:num_file]\n    Y[i*num_file:(i+1)*num_file] = i # label all classes with int [0.. len(classes)]\n\n    \n# Image dimension\nim_width = 230\nim_height = 230 \nim_channel = 3\ndim = im_width * im_height * im_channel\n\nX = np.ndarray(shape=(num_data, im_width, im_height, im_channel), dtype=np.uint8)\n\nfor idx, file in enumerate(all_files):\n    X[idx] = cv2.resize(cv2.imread(file), (im_width, im_height))\n\nX_train = np.empty(shape=(4000,im_width, im_height, im_channel), dtype=np.uint8)\nX_val = np.empty(shape=(200,im_width, im_height, im_channel), dtype=np.uint8)\nX_test = np.empty(shape=(200,im_width, im_height, im_channel), dtype=np.uint8)\n\ny_train = np.empty(4000)\ny_val = np.empty(200)\ny_test = np.empty(200) \n\nfor i, cls in enumerate(classes): \n    X_test[50*i:50*(i+1)] = X[np.where(Y == i)[0][:50]]\n    X_val[50*i:50*(i+1)] = X[np.where(Y == i)[0][50:100]]\n    X_train[1000*i:1000*(i+1)] = X[np.where(Y == i)[0][100:]]\n    \n    y_test[50*i:50*(i+1)] = i\n    y_val[50*i:50*(i+1)] = i\n    y_train[1000*i:1000*(i+1)] = i\n    \ndel Y \ndel X","9d04b6f9":"\ndef color_space_transform(imgs, space=['hsv','cive','exg','exr']):\n    '''\n    imgs: N inputs image shape (N, D0, D1, D2,..)\n    space: list of transformation that will be compute and return. \n    return result = {} \n    '''\n    available_space = ['hsv','cive','exg','exr']\n    for s in space: \n        if(s not in available_space): \n            print(s+'is not available')\n            quit()\n    N = imgs.shape[0] if len(imgs.shape) == 4 else 1\n    if(N == 1): imgs = np.reshape(imgs, (1,imgs.shape[0],imgs.shape[1], imgs.shape[2]))\n        \n    imgs = imgs.astype('float32')\n    result = {} \n    #create  memory\n    for s in space:\n        if(s == \"hsv\"): result[s] = np.zeros(imgs.shape,dtype='float32')\n        else: result[s] = np.zeros((N, imgs.shape[1], imgs.shape[2]),dtype='float32')\n    \n    for i in range(N):\n        for s in space:\n            if(s == 'hsv'):\n                result[s][i] = cv2.cvtColor(imgs[i], cv2.COLOR_BGR2HSV)\n            elif(s == 'cive'):\n                p_blue, p_green, p_red= cv2.split(imgs[i]) # For BGR image # For RGB image\n                result[s][i] = 0.881*p_green + 0.441*p_red + 0.385*p_blue - 18.78745\n            elif(s == 'exg'):\n                p_blue, p_green, p_red= cv2.split(imgs[i]) # For BGR image # For RGB image\n                result[s][i] = 2 * p_green - p_red - p_blue\n            elif(s == 'exr'):\n                 p_blue, p_green, p_red= cv2.split(imgs[i]) # For BGR image # For RGB image\n                 result[s][i] = 1.4 * p_red - p_green\n    return result","c3d9b6fa":"# Convert to Hsv and cive for example \nX_transform = color_space_transform(X_train[0:4000], space=['hsv','cive','exg','exr'])\n\n#And plot to visualize some \n# Visualize some images \n# Make sure that everything when OK\nclasses = ['broadleaf', 'grass', 'soil', 'soybean']\nn_class = len(classes)\nsamples_per_class = 4\n\nprint(\"HSV color space\")\nfor y, cls in enumerate(classes):\n    idxes = np.flatnonzero(y == y_train[0:4000])\n    idxes = np.random.choice(idxes, samples_per_class, replace = False)\n    for i, idx in enumerate(idxes):\n        plt_idx = i * n_class + y + 1\n        plt.subplot(samples_per_class,n_class, plt_idx)\n        plt.imshow(X_transform['hsv'][idx])\n        if(i==0): plt.title(cls)\n\nplt.show()","adf9f9fd":"print(\"cive color space\")\nfor y, cls in enumerate(classes):\n    idxes = np.flatnonzero(y == y_train[0:4000])\n    idxes = np.random.choice(idxes, samples_per_class, replace = False)\n    for i, idx in enumerate(idxes):\n        plt_idx = i * n_class + y + 1\n        plt.subplot(samples_per_class,n_class, plt_idx)\n        plt.imshow(X_transform['cive'][idx])\n        if(i==0): plt.title(cls)\n\nplt.show()","a85a0687":"#Shuffle training index\ntrain_idxs = np.random.permutation(X_train.shape[0])\ny_train  = y_train[train_idxs]\nX_train = X_train[train_idxs]\n\nX_train = np.reshape(X_train, (X_train.shape[0], -1)).astype('float64')\nX_test = np.reshape(X_test, (X_test.shape[0], -1)).astype('float64')\nX_val = np.reshape(X_val, (X_val.shape[0], -1)).astype('float64')\nX_dev = X_train[0:100].astype('float64')\nX_tiny = X_train[100:110].astype('float64')\ny_dev = y_train[0:100] \ny_tiny = y_train[100:110] \n\nprint(\"X_train shape\", X_train.shape, \"| y_train shape:\", y_train.shape)\nprint(\"X_test shape\", X_test.shape, \"| y_test shape:\", y_test.shape)\nprint(\"X_val shape\", X_val.shape, \"| y_val shape:\", y_val.shape)\nprint(\"X_dev shape\", X_dev.shape, \"| y_dev shape:\", y_dev.shape)\nprint(\"X_tiny shape\", X_tiny.shape, \"| y_tiny shape:\", y_tiny.shape)","373aaec4":"# Visualize some images \n# Make sure that everything when OK\nclasses = ['broadleaf', 'grass', 'soil', 'soybean']\nn_class = len(classes)\nsamples_per_class = 4\n\n\nfor y, cls in enumerate(classes):\n    idxes = np.flatnonzero(y == y_train)\n    idxes = np.random.choice(idxes, samples_per_class, replace = False)\n    for i, idx in enumerate(idxes):\n        plt_idx = i * n_class + y + 1\n        plt.subplot(samples_per_class,n_class, plt_idx)\n        plt.imshow(X_train[idx].reshape(im_width, im_height, im_channel).astype('uint8'))\n        if(i==0): plt.title(cls)\n\nplt.show()","27e89032":"# Visualize some images \n# Make sure that everything when OK\nclasses = ['broadleaf', 'grass', 'soil', 'soybean']\nn_class = len(classes)\nsamples_per_class = 4\n\n\nfor y, cls in enumerate(classes):\n    idxes = np.flatnonzero(y == y_val)\n    idxes = np.random.choice(idxes, samples_per_class, replace = False)\n    for i, idx in enumerate(idxes):\n        plt_idx = i * n_class + y + 1\n        plt.subplot(samples_per_class,n_class, plt_idx)\n        plt.imshow(X_val[idx].reshape(im_width, im_height, im_channel).astype('uint8'))\n        if(i==0): plt.title(cls)\n\nplt.show()","b39d8836":"#first: compute the mean image\nmean_image = np.mean(X_train, axis=0) #axis=0. stack horizontally\nplt.figure(figsize=(4,4))\nplt.imshow(mean_image.reshape((im_width, im_height, im_channel)).astype('uint8'))\nplt.show()","be978636":"#Second subtract the mean image from train and test data \nX_train -= mean_image\nX_val -= mean_image \nX_test -= mean_image\nX_dev -= mean_image\nX_tiny -= mean_image","6c0a7f1f":"#Third append the bias dimension using linear algebra trick\nX_train = np.hstack([X_train, np.ones((X_train.shape[0], 1))])\nX_val = np.hstack([X_val, np.ones((X_val.shape[0], 1))])\nX_test = np.hstack([X_test, np.ones((X_test.shape[0], 1))])\nX_dev = np.hstack([X_dev, np.ones((X_dev.shape[0], 1))])\nX_tiny = np.hstack([X_tiny, np.ones((X_tiny.shape[0], 1))])\n\nprint(\"X_train shape\", X_train.shape)\nprint(\"X_test shape\", X_test.shape)\nprint(\"X_val shape\", X_val.shape)\nprint(\"X_dev shape\", X_dev.shape)\nprint(\"X_tiny shape\", X_tiny.shape)","35e586c3":"## Convert Image to difference space.\n- HSV \n- excess green \n- Excess red \n- CIVE(Color index of vegetation extraction ","5ea47068":"# Preprocessing \/ Load the data \n","090df2aa":"p# Extract feature on data","b1953602":"# Subtract out the mean image "}}