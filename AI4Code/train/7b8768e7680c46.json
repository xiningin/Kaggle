{"cell_type":{"d89ad526":"code","0b03be56":"code","5c5d2107":"code","e65b40b3":"code","b514a927":"code","fef01977":"code","021731bf":"code","4db02798":"code","54edd42a":"code","8a258c05":"code","551cc887":"code","2a667aa5":"code","d22bde31":"code","e1c981ab":"code","ca7a30fc":"code","7a1ff603":"code","3e7afcec":"code","4deceb8f":"code","13279984":"code","1f50ffe9":"code","da6bf886":"code","c9039057":"code","9f0dfb30":"code","f55acb63":"code","52841351":"code","95ee6571":"code","4421fbec":"code","d749c737":"code","847c50ea":"code","43aa12cf":"code","a473b35e":"code","e24e7101":"code","05406b95":"code","9a698e33":"code","8561679e":"code","c2ad57c7":"code","47de9d91":"code","c5848bff":"code","40b80fb3":"code","33fccc47":"code","55a6befa":"code","45b6c38d":"code","712d133d":"code","d5a1d067":"code","99a64bca":"code","79b569a6":"code","1421d157":"code","7974d72a":"code","17ed6395":"code","24fb38a0":"code","4b4aba9c":"code","d3fe4db6":"code","67dc6486":"code","b8e785c2":"markdown","fb0a1ce1":"markdown","9a381510":"markdown","9ca6e852":"markdown","cd702c10":"markdown","5389b4ee":"markdown","8561c05c":"markdown","7e1d0ace":"markdown","5b919b44":"markdown","cfe5bf83":"markdown","0dd19b29":"markdown","0b111287":"markdown","3d914f8f":"markdown","11f0fd42":"markdown","b051f490":"markdown"},"source":{"d89ad526":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b03be56":"import seaborn as sns\nimport pickle\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import r2_score, accuracy_score, roc_curve, auc","5c5d2107":"!ls ..\/input\/ieee-fraud-detection\/","e65b40b3":"train_id = pd.read_csv(\"..\/input\/ieee-fraud-detection\/train_identity.csv\")\ntrain_tra = pd.read_csv(\"..\/input\/ieee-fraud-detection\/train_transaction.csv\")\ntest_id = pd.read_csv(\"..\/input\/ieee-fraud-detection\/test_identity.csv\")\ntest_tra = pd.read_csv(\"..\/input\/ieee-fraud-detection\/test_transaction.csv\")\n\ndata = train_tra.merge(train_id, how='left')\ntest = test_tra.merge(test_id, how='left')\n# data = pd.concat([train_id,train_tra])\n# test = pd.concat([test_id,test_tra])\n# train_id.head()","b514a927":"a=['id_17', 'id_02', 'id_19', 'id_05']\nfor i in a:\n    data.drop(i, inplace = True, axis = 1)","fef01977":"a=['isFraud', 'id_17', 'id_02', 'id_19', 'id_05']\nfor i in a:\n    print(i in data)","021731bf":"test.head()","4db02798":"test_id = test['TransactionID']\ntest_id","54edd42a":"data.head()","8a258c05":"'isFraud' in data.columns","551cc887":"test.head()","2a667aa5":"del train_tra, train_id, test_tra, test_id","d22bde31":"data.shape","e1c981ab":"data.isnull().sum()\/len(data) * 100","ca7a30fc":"for i in data.columns:\n    if data[i].isnull().sum() \/ len(data) * 100 > 80:\n#         print(i)\n        data.drop(i, inplace = True, axis = 1)","7a1ff603":"data.head()","3e7afcec":"data.isnull().sum()\/len(data) * 100","4deceb8f":"for i in data.columns:\n    data[i] = data[i].fillna(data[i].mode()[0])","13279984":"data.describe()","1f50ffe9":"data['isFraud'].value_counts()","da6bf886":"cor = data.corr()","c9039057":"rel = cor['isFraud'].sort_values(ascending = False)\nrel","9f0dfb30":"data.info()","f55acb63":"l = []\nfor i in range (len(rel)):\n    if rel[i] > 0:\n        l.append(rel.index[i])","52841351":"la = LabelEncoder()\no = []\nfor i in data.columns:\n    if data.dtypes[i] == 'O':\n        o.append(i)\no","95ee6571":"for i in o:\n    data[i] = la.fit_transform(data[i])","4421fbec":"data.info()","d749c737":"x = data[l]\nx.drop('isFraud', inplace = True, axis = 1)\nx.head()","847c50ea":"y = data['isFraud']\ny","43aa12cf":"del data","a473b35e":"over = SMOTE()\nx, y = over.fit_resample(x, y)","e24e7101":"y.value_counts()","05406b95":"x.describe()","9a698e33":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 42)","8561679e":"ra = RandomForestClassifier(n_estimators = 200)\nra.fit(x_train, y_train)","c2ad57c7":"predicted = ra.predict(x_train)\nprint(\"Accuracy using Random Forest is {} %\".format(accuracy_score(predicted, y_train)*100))","47de9d91":"predicted = ra.predict(x_test)\nprint(\"Accuracy using Random Forest is {} %\".format(accuracy_score(predicted, y_test)*100))","c5848bff":"fpr, tpr, threshold= roc_curve(y_test, predicted, pos_label=1)\nplt.plot(fpr, tpr)\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\"ROC curve\")\nplt.show()\nprint(\"AUC value is {} \".format(auc(fpr, tpr)))","40b80fb3":"x.shape","33fccc47":"del x_train, x_test, y_train, y_test","55a6befa":"test.shape","45b6c38d":"for i in test.columns:\n    if test[i].isnull().sum() \/ len(test) * 100 > 80:\n#         print(i)\n        test.drop(i, inplace = True, axis = 1)","712d133d":"test.isnull().sum()\/len(test) * 100","d5a1d067":"for i in test.columns:\n    test[i] = test[i].fillna(test[i].mode()[0])","99a64bca":"test.info()","79b569a6":"o = []\nfor i in test.columns:\n    if test.dtypes[i] == 'O':\n        o.append(i)\no","1421d157":"for i in o:\n    test[i] = la.fit_transform(test[i])","7974d72a":"test.info()","17ed6395":"l.remove('isFraud')\nl","24fb38a0":"x_test_pre = test[l]\npredicted = ra.predict(x_test_pre)","4b4aba9c":"x_test_pre.shape","d3fe4db6":"submit = pd.DataFrame(data = {'TransactionID' : test_id, 'isFraud' :predicted})\nsubmit","67dc6486":"submit.to_csv(\"submission1.csv\", index = False)\nsubmit.head()","b8e785c2":"Class Balancing","fb0a1ce1":"Visualizing AUC curve","9a381510":"# Loading Libraries","9ca6e852":"# Applying Random Forest","cd702c10":"# Preprocessing of Testing Data","5389b4ee":"Saving the final results","8561c05c":"Converting objects into integers","7e1d0ace":"# Loading Dataset","5b919b44":"# Making Predictions on Testing Data","cfe5bf83":"Converting object into integers","0dd19b29":"# Seprating Related and Unrelated columns","0b111287":"# Building Model","3d914f8f":"Checking accuracy on training data","11f0fd42":"# Preprocessing","b051f490":"Checking accuracy on testing data"}}