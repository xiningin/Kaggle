{"cell_type":{"baeaf1db":"code","e6c323eb":"code","f92a72b6":"code","a009b84c":"code","d94b72a0":"code","22f3e07d":"code","f0d0cb35":"code","7e580957":"code","deb6f6ed":"code","099361c2":"code","eb6f5508":"code","9f308259":"code","80b36405":"code","045378a6":"markdown","13912f1c":"markdown","280b4539":"markdown","76420c19":"markdown","f2472548":"markdown","7cd17814":"markdown","fffba7fe":"markdown","7c3bb785":"markdown","fedeea16":"markdown","3137017e":"markdown","c8e09477":"markdown","4c201ca1":"markdown","cd86166a":"markdown","4aa0683f":"markdown","ab191844":"markdown","ea4a4ab7":"markdown","b1013cdd":"markdown"},"source":{"baeaf1db":"import pandas as pd\nimport numpy as np\nnp.random.seed(0)\n\nfrom os.path import join\nimport random\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\n%matplotlib inline\nimport itertools\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau, EarlyStopping","e6c323eb":"sns.set(style = 'white' , context = 'notebook' , palette = 'deep')\nrcParams['figure.figsize'] = 10,6","f92a72b6":"data_path = \"..\/input\/digit-recognizer\/\"\ntrain  = pd.read_csv(join(data_path,\"train.csv\"))\ntest  = pd.read_csv(join(data_path,\"test.csv\"))","a009b84c":"Y_train = train[\"label\"]\nX_train = train.drop(labels = [\"label\"], axis = 1)\ndel train\n\np = sns.countplot(Y_train)","d94b72a0":"def process_data(data):\n    data = data\/255.0\n    data = data.values.reshape(-1,28,28,1)\n    return data\n\nX_train = process_data(X_train)\nY_train = to_categorical(Y_train,num_classes = 10)","22f3e07d":"def plot_image(size,images):\n    if len(images)!= size[0]*size[1]:\n        raise Exception(\"number of images doesn't match the size of plot\")\n    fig, ax = plt.subplots(size[0],size[1],figsize=(10,10))\n    for i in range(size[0]):\n        for j in range(size[1]):\n            ax[i][j].imshow(images[i*size[1]+j][:,:,0], cmap = \"gray_r\")\n\nimages = random.sample(list(X_train),9)\nplot_image((3,3),images)","f0d0cb35":"num = 5 #make it 10\nmodel = [0]*num\nfor i in  range(num):\n    model[i] = Sequential()\n    model[i].add(Conv2D(filters = 32, kernel_size = (5,5), padding = \"same\", activation = \"relu\", input_shape = (28,28,1)))\n    model[i].add(BatchNormalization())\n    model[i].add(Conv2D(filters = 32, kernel_size = (5,5), padding = \"same\", activation = \"relu\"))\n    model[i].add(BatchNormalization())\n    model[i].add(MaxPool2D(pool_size = (2,2)))\n    model[i].add(Dropout(0.25))\n    model[i].add(Conv2D(filters = 64, kernel_size = (3,3), padding = \"same\", activation = \"relu\"))\n    model[i].add(BatchNormalization())\n    model[i].add(Conv2D(filters = 64, kernel_size = (3,3), padding = \"same\", activation = \"relu\"))\n    model[i].add(BatchNormalization())\n    model[i].add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\n    model[i].add(Dropout(0.25))\n    model[i].add(Conv2D(filters = 64, kernel_size = (3,3), padding = \"same\", activation = \"relu\"))\n    model[i].add(BatchNormalization())\n    model[i].add(Dropout(0.25))\n    model[i].add(Flatten())\n    model[i].add(Dense(1024, activation = \"relu\"))\n    model[i].add(BatchNormalization())\n    model[i].add(Dropout(0.25))\n    model[i].add(Dense(10, activation = \"softmax\"))\n    model[i].compile(optimizer = \"adam\", loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])\nmodel[0].summary()","7e580957":"datagen = ImageDataGenerator(featurewise_center = False,\n                             samplewise_center = False,\n                             featurewise_std_normalization = False,\n                             samplewise_std_normalization = False,\n                             zca_whitening = False,\n                             rotation_range = 10,\n                             zoom_range = 0.1,\n                             width_shift_range = 0.1,\n                             height_shift_range = 0.1,\n                             horizontal_flip = False,\n                             vertical_flip = False\n                            )","deb6f6ed":"epochs = 32\nbatch_size = 256\nhistory = [0]*num\nfor i in range(num):\n    random_seed = i\n    X_train_, X_val_, Y_train_, Y_val_ = train_test_split(X_train, Y_train, test_size = 0.2, random_state=random_seed)\n    learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy',\n                                                patience=3,\n                                                verbose=1,\n                                                factor=0.5,\n                                                min_lr=0.00001)\n    early_stopping = EarlyStopping(monitor='val_accuracy',\n                                   min_delta=0,\n                                   patience=10, \n                                   verbose =1, \n                                   mode='auto')\n    history[i] = model[i].fit_generator(datagen.flow(X_train_, Y_train_, batch_size = batch_size), epochs = epochs, validation_data = (X_val_,Y_val_), verbose = 1, steps_per_epoch = X_train.shape[0]\/\/batch_size, callbacks=[learning_rate_reduction,early_stopping])\n    print(\"CNN {0:d}: Epochs={1:d}, Train accuracy={2:.5f}, Validation accuracy={3:.5f}\".format(i+1,epochs,max(history[i].history['accuracy']),max(history[i].history['val_accuracy'])))    ","099361c2":"def predict(X_data):\n    results = np.zeros((X_data.shape[0],10))\n    for j in range(num):\n        results = results + model[j].predict(X_data)\n    return results","eb6f5508":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n    \nY_pred = predict(X_val_)\nY_pred_classes = np.argmax(Y_pred,axis = 1) \nY_true = np.argmax(Y_val_,axis = 1) \nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \nplot_confusion_matrix(confusion_mtx, classes = range(10)) ","9f308259":"test = process_data(test)\nresults = predict(test)\nresults = np.argmax(results,axis = 1)","80b36405":"results = pd.Series(results,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"keras_cnn_mnist_aug_ensemble2.csv\",index=False)","045378a6":"### Reshape X_train and convert Y_train to Categorical","13912f1c":"### Please upvote if helpful","280b4539":"### Data Augmentation using Keras ImageDataGenerator","76420c19":"### Generate Table and save Results to CSV File","f2472548":"### Predict Function to Combine Results of all Models (#Ensemble)","7cd17814":"### Plot Confusion Matrix for last set of Validation Data","fffba7fe":"### Load Train and Test data ","7c3bb785":"### Define Batch & Epoch and Train all Models","fedeea16":"### Run on Test Data","3137017e":"### Import Stuffs","c8e09477":"# Digit Recognizer | CNN | Augmentation | Ensemble | All I did for 99.757% Accuracy","4c201ca1":"### Prepare Train data and show Category distribution","cd86166a":"### Visualise few random Images","4aa0683f":"### Set parameters for Seaborn and Matplotlib","ab191844":"## Got Accuracy of 0.99757","ea4a4ab7":"### Build 10 CNN Models","b1013cdd":"### First one... consider upvoting if helpful"}}