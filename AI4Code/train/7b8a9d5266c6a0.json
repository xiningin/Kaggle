{"cell_type":{"9633a131":"code","c244867e":"code","91a75c09":"code","aec96621":"code","31e261c1":"code","f9f66d60":"code","498aaf4a":"code","eb374702":"code","0d488ae8":"code","bc46de91":"code","9c108f87":"code","639facd5":"code","d4634fd3":"code","cc6c86cb":"code","788112b8":"code","1bad223f":"markdown","0606fe37":"markdown","41a7089c":"markdown","82ec18aa":"markdown","5a53ffb0":"markdown","f33b2c57":"markdown","3f45f1a3":"markdown","c9c2be91":"markdown","d3766974":"markdown","3670fe65":"markdown","e3acdf00":"markdown"},"source":{"9633a131":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns; \n%matplotlib inline\nimport matplotlib.pyplot as plt\n\nprint('Files in this dataset')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","c244867e":"points_df = pd.read_csv('\/kaggle\/input\/indian-premier-league-ipl-all-seasons\/points_table.csv', index_col=None)","91a75c09":"print('Points Data Frame shape {}'.format(points_df.shape))","aec96621":"print('Points table for 2020 season')\npoints_df.head(8)","31e261c1":"matcheswon_pivot = points_df.pivot_table(index='short_name', \n                              columns='season', \n                              values='matcheswon', fill_value=0)\n\nf = plt.figure(figsize=(10, 8))\ngs = f.add_gridspec(1, 1)\n\nwith sns.axes_style(\"whitegrid\"):\n    #sns.set_context(\"notebook\", font_scale=1.2, rc={\"lines.linewidth\": 2.5})\n    ax = f.add_subplot(gs[0, 0])\n    g1 = sns.heatmap(matcheswon_pivot, annot=True, fmt=\"g\", cmap='rocket')\n    g1.set_facecolor(\"#fdb913\")\n    g1.axes.set_title(\"Number of matches won\",fontsize=20)\n    g1.set_xlabel(\"Season\",fontsize=18)\n    g1.set_ylabel(\"Team\",fontsize=18)        \n    g1.set_xticklabels(g1.get_xticklabels(), rotation=70)\n    g1.set_yticklabels(g1.get_yticklabels(), rotation=0)","f9f66d60":"summary_df = pd.read_csv('\/kaggle\/input\/indian-premier-league-ipl-all-seasons\/all_season_summary.csv', index_col=None)\nprint('Summary Data Frame shape {}'.format(summary_df.shape))","498aaf4a":"pd.set_option('max_columns', None)\nsummary_df.head()","eb374702":"f = plt.figure(figsize=(10, 8))\ngs = f.add_gridspec(1, 1)\nwith sns.axes_style(\"darkgrid\"):\n    ax = f.add_subplot(gs[0, 0])    \n    g1 = sns.countplot(x=\"season\",data=summary_df, palette=['#808282'])\n    g1.axes.set_title(\"Total games per season\",fontsize=20)\n    g1.set_xlabel(\"Season\",fontsize=18)\n    g1.set_ylabel('# Games',fontsize=20)","0d488ae8":"def calculateWinPercentage():\n    teams = ['MI', 'DC', 'SRH', 'RR', 'KKR', 'KXIP', 'CSK', 'RCB', 'RPS', 'GL', 'PWI', 'Kochi']\n    win_percent = []\n    for team in teams:\n        row = {}\n        team_df = summary_df.loc[summary_df['home_team'].str.contains(team) | summary_df['away_team'].str.contains(team)]\n        games = len(team_df.index)        \n        win = team_df.apply(lambda x : True if x['winner'] == team else False, axis = 1) \n        num_wins = len(win[win == True].index)         \n        row['team'] = team\n        row['total_games'] = games\n        row['total_wins'] = num_wins\n        row['win_pct'] = (num_wins \/ games) * 100\n        win_percent.append(row)\n    return win_percent\nwin_percent = calculateWinPercentage()\n#print(win_percent)\nwinpct_df = pd.DataFrame(win_percent, index=None) \nwinpct_df = winpct_df.sort_values('total_wins',ascending=False).reset_index()\nwinpct_df","bc46de91":"f = plt.figure(figsize=(16, 5))\ngs = f.add_gridspec(1, 2)\nwith sns.axes_style(\"darkgrid\"):\n    ax = f.add_subplot(gs[0, 0])    \n    g1 = sns.barplot(y=\"team\",x=\"total_wins\",data=winpct_df, palette=[\"#005ea0\"])\n    g1.axes.set_title(\"Most wins\",fontsize=20)\n    g1.set_xlabel(\"# Wins\",fontsize=18)\n    g1.set_ylabel('Team',fontsize=20)\nwinpct_df2 = winpct_df.sort_values('win_pct',ascending=False).reset_index()    \nwith sns.axes_style(\"darkgrid\"):\n    ax = f.add_subplot(gs[0, 1])    \n    g1 = sns.barplot(y=\"team\",x=\"win_pct\",data=winpct_df2,palette=[\"#fdb913\"])\n    g1.axes.set_title(\"Win percetage\",fontsize=20)\n    g1.set_xlabel(\"% Wins\",fontsize=18)\n    g1.set_ylabel('Team',fontsize=20)    ","9c108f87":"f = plt.figure(figsize=(10, 8))\ngs = f.add_gridspec(1, 1)\nwith sns.axes_style(\"darkgrid\"):\n    #sns.set_context(\"notebook\", font_scale=1.0, rc={\"lines.linewidth\": 3.5})    \n    ax = f.add_subplot(gs[0, 0])    \n    g1 = sns.countplot(y=\"venue_name\", data=summary_df, palette=\"rocket\", order = summary_df['venue_name'].value_counts().index)\n    #ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n    #ax.set_yticklabels(ax.get_yticklabels(), rotation=0)\n    #g1.set_facecolor(\"#fdb913\")\n    g1.axes.set_title(\"Matches played at different venue\",fontsize=20)\n    g1.set_xlabel(\"Number of matches\",fontsize=18)\n    g1.set_ylabel(None,fontsize=20)\n    ax.set_xticks(range(0,100,10))","639facd5":"def TossWinVsGameWin():  \n    toss = summary_df[['season','toss_won', 'decision','winner']]\n    toss['toss_influenced_outcome'] = toss.apply(lambda x : True if x['toss_won'] == x['winner'] else False, axis = 1) \n    return toss\ntoss = TossWinVsGameWin()","d4634fd3":"f = plt.figure(figsize=(20, 2))\ngs = f.add_gridspec(1, 2)\nwith sns.axes_style(\"darkgrid\"):\n    ax = f.add_subplot(gs[0, 0])    \n    g1 = sns.countplot(y=\"decision\",data=toss, palette='magma')\n    g1.axes.set_title(\"What does the team do after winning toss?\",fontsize=20)\n    g1.set_ylabel(None,fontsize=18)\n    g1.set_xlabel('Count',fontsize=20)\nwith sns.axes_style(\"darkgrid\"):\n    ax = f.add_subplot(gs[0, 1])    \n    g1 = sns.countplot(y=\"toss_influenced_outcome\", data=toss, palette='magma')\n    g1.axes.set_title(\"Did winning toss help teams to win the game?\",fontsize=20)\n    g1.set_ylabel(None,fontsize=18)\n    g1.set_yticklabels(['No','Yes'])\n    g1.set_xlabel('Count',fontsize=20)    ","cc6c86cb":"summary_pom = summary_df.loc[summary_df['pom'] != 'None'] # Remove the abandoned games\nf = plt.figure(figsize=(14,8))\ngs = f.add_gridspec(1, 1)\nwith sns.axes_style(\"darkgrid\"):\n    ax = f.add_subplot(gs[0, 0])    \n    g1 = sns.countplot(y=\"pom\",data=summary_pom, palette='magma', order = summary_pom['pom'].value_counts().iloc[:20].index)\n    g1.axes.set_title(\"Top 20 all time player of the match award winners\",fontsize=20)\n    g1.set_ylabel(None,fontsize=18)\n    g1.set_xlabel('Count',fontsize=20)","788112b8":"def Captaincy():\n    captaincy_data = []\n    for index, match in summary_df.iterrows():\n        row = {}\n        if summary_df.at[index, 'home_team'] == summary_df.at[index, 'winner']:\n            row['winning_captain'] = summary_df.at[index, 'home_captain']\n            row['winning_team'] = summary_df.at[index, 'home_team']\n        elif summary_df.at[index, 'away_team'] == summary_df.at[index, 'winner']:\n            row['winning_captain'] = summary_df.at[index, 'away_captain']\n            row['winning_team'] = summary_df.at[index, 'away_team']     \n        captaincy_data.append(row)\n    return captaincy_data\ncaptaincy_data = Captaincy()\ncap_df = pd.DataFrame(captaincy_data, index=None) \nf = plt.figure(figsize=(14,12))\ngs = f.add_gridspec(1, 1)\nwith sns.axes_style(\"darkgrid\"):\n    ax = f.add_subplot(gs[0, 0])    \n    g1 = sns.countplot(y=\"winning_captain\",data=cap_df, palette='viridis_r', order = cap_df['winning_captain'].value_counts().index)\n    g1.axes.set_title(\"Most wins by a captain\",fontsize=20)\n    g1.set_ylabel(None,fontsize=18)\n    g1.set_xlabel('Count',fontsize=20)","1bad223f":"# Team performance\nLet's explore how teams performed overall. Its interesting to visualize that the most wins does not translate into similar win percentage. That is due to the fact that some teams did not play all the seasons especially Chennai Super Kings and Rajathan Royals.\n\nIts evident that why there is a **fierece rivalry between Chennai Super Kings and Mumbai Indians**\n\n","0606fe37":"# Introducing the IPL Dataset\n\nFollowing are the csv files in this data set and brief description \n1. points_table.csv - Provides the points table of all seasons. Smallest file of the dataset\n1. all_season_summary.csv - Contains summary of all matches across season. Good to look into results of each game, scores, player of the match, venue, toss information, etc\n1. all_season_details.csv - Provides detailed ball-by-ball data of every match across all seasobs. Largest file of the dataset\n1. all_season_bowling_card.csv - Provides bowling stats of all matches across seasons\n1. all_season_batting_card.csv - Provides batting stats of all matches across seasons\n\nFilter by season to look into each specific season data.\n\nThis notebook provides a bird's-eye view of the points table and summary data files","41a7089c":"# Venues\nIPL did travel overseas to South Africa and UAE !","82ec18aa":"# Toss Advantage\nIts interesting to see that though the teams choose to bowl first after winning the toss, it does not have much influence in the out come of the game\n","5a53ffb0":"# Player of the match\n","f33b2c57":"# Matches Summary","3f45f1a3":"# Total games per season","c9c2be91":"# Points table for 2020 season","d3766974":"## Points Table\n> Let's look at the points table. The simple file to start with","3670fe65":"# Captaincy","e3acdf00":"## Matches won across all seasons"}}