{"cell_type":{"7fa86cfb":"code","96fa8314":"code","2cdb32a3":"code","c70939b6":"code","d30390c1":"code","2be2597c":"code","47408c1d":"code","93798468":"code","7de22d28":"code","df4744cf":"code","03c2c324":"code","5e7976d6":"code","695f464b":"code","776b1d65":"code","e51337b3":"code","40197368":"code","e3c1eab8":"code","c683ac29":"code","0f347fed":"code","3795110f":"code","867a6f12":"code","e0aa9997":"code","3c947464":"code","f63ef1f6":"code","cb48d0dc":"code","8e786569":"code","d8fcf21a":"code","2ed10cbc":"code","a363a57c":"code","edb95333":"code","9382dc91":"code","3010873e":"code","6b2fc26b":"code","e8fc5dee":"code","1bfedb0c":"code","7b3ccfa5":"code","7e6b21ae":"code","a0e86d15":"code","4a5cb36b":"code","314d6ae6":"code","bd7ba66d":"code","03c31c78":"code","78065f27":"code","c6dcc075":"code","56d9e1bd":"code","b1d00a22":"code","430e08a4":"code","cf7af0e7":"markdown","d6e825f4":"markdown","9a1c8f6a":"markdown","0221e410":"markdown","7a83b245":"markdown","d1761b96":"markdown","2eb7b87d":"markdown","7b2659ec":"markdown","9eb6edf1":"markdown","1702eea3":"markdown","6f57bc99":"markdown","4e8de0a8":"markdown","3a1f058d":"markdown","5718f443":"markdown","d971563b":"markdown","c24b5f67":"markdown","3d42cf4d":"markdown","2ebe0212":"markdown","9ff8e079":"markdown","52421089":"markdown","624a3bf0":"markdown","ed398ecd":"markdown","926036f6":"markdown","fce941a2":"markdown","2b309c05":"markdown","704df1cd":"markdown","f6042d23":"markdown","f8e625a2":"markdown","98656071":"markdown","0c1bddba":"markdown","937412a4":"markdown","ceb536f3":"markdown","f8d51793":"markdown","1e8c513c":"markdown","df050cd3":"markdown","a1fea08d":"markdown","5ebfceec":"markdown"},"source":{"7fa86cfb":"#!pip install XGBoost\n#!pip install lightgbm\n#!pip install catboost\n#!pip install imbalanced-learn","96fa8314":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn.metrics\n\nfrom scipy.stats import mannwhitneyu\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import train_test_split, ShuffleSplit, cross_val_score, learning_curve\nfrom sklearn.model_selection import KFold, GridSearchCV, RandomizedSearchCV\nfrom sklearn.metrics import classification_report, f1_score, precision_score, recall_score\nfrom sklearn.model_selection import StratifiedKFold, GridSearchCV, RandomizedSearchCV\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nimport xgboost as xgb, lightgbm as lgbm, catboost as catb\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nTRAIN_PATH = '..\/input\/gb-credit-default\/train.csv'\nTEST_PATH = '..\/input\/gb-credit-default\/test.csv'\nSUBMIT_PATH = '..\/input\/gb-credit-default\/sample_submission.csv'","2cdb32a3":"def res_var_uniq(df, v_types=['object']):\n    df_str_features = df.select_dtypes(include=v_types)\n    for i in df_str_features:\n        print('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 ' + i + '\\n')\n        print(df[i].value_counts())\n        print()\n\n\ndef res_var_hist_dist(df, v_types=['float64', 'int64'], v_bins=20):\n    df_num_features = df.select_dtypes(include=v_types)\n    fig, axs = plt.subplots(len(df_num_features.columns), 1, figsize=(16,121))\n\n    j=0\n    for i in df_num_features:\n        axs[j].hist(df[i], bins=v_bins)\n        axs[j].set_title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 ' + i)\n        axs[j].set_xlabel(i)\n        axs[j].set_ylabel('Count')\n        j+=1\n        print()\n        \n\ndef balance_df_by_target(df, target_name, method='over'):\n\n    assert method in ['over', 'under', 'tomek', 'smote'], '\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0441\u044d\u043c\u043f\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f'\n    \n    target_counts = df[target_name].value_counts()\n\n    major_class_name = target_counts.argmax()\n    minor_class_name = target_counts.argmin()\n\n    disbalance_coeff = int(target_counts[major_class_name] \/ target_counts[minor_class_name]) - 1\n    if method == 'over':\n        for i in range(disbalance_coeff):\n            sample = df[df[target_name] == minor_class_name].sample(target_counts[minor_class_name])\n            df = df.append(sample, ignore_index=True)\n            \n    elif method == 'under':\n        df_ = df.copy()\n        df = df_[df_[target_name] == minor_class_name]\n        tmp = df_[df_[target_name] == major_class_name]\n        df = df.append(tmp.iloc[\n            np.random.randint(0, tmp.shape[0], target_counts[minor_class_name])\n        ], ignore_index=True)\n\n    elif method == 'tomek':\n        from imblearn.under_sampling import TomekLinks\n        tl = TomekLinks()\n        X_tomek, y_tomek = tl.fit_sample(df.drop(columns=target_name), df[target_name])\n        df = pd.concat([X_tomek, y_tomek], axis=1)\n    \n    elif method == 'smote':\n        from imblearn.over_sampling import SMOTE\n        smote = SMOTE()\n        X_smote, y_smote = smote.fit_sample(df.drop(columns=target_name), df[target_name])\n        df = pd.concat([X_smote, y_smote], axis=1)\n\n    return df.sample(frac=1) \n\ndef get_classification_report(y_train_true, y_train_pred, y_test_true, y_test_pred):\n    print('TRAIN\\n\\n' + classification_report(y_train_true, y_train_pred))\n    print('TEST\\n\\n' + classification_report(y_test_true, y_test_pred))\n    \ndef show_feature_importances(feature_names, feature_importances, get_top=None):\n    feature_importances = pd.DataFrame({'feature': feature_names, 'importance': feature_importances})\n    feature_importances = feature_importances.sort_values('importance', ascending=False)\n       \n    plt.figure(figsize = (20, len(feature_importances) * 0.355))\n    \n    sns.barplot(feature_importances['importance'], feature_importances['feature'])\n    \n    plt.xlabel('Importance')\n    plt.title('Importance of features')\n    plt.show()\n    \n    if get_top is not None:\n        return feature_importances['feature'][:get_top].tolist()\n    \ndef evaluate_preds(model, X_train, X_test, y_train, y_test):\n    y_train_pred = model.predict(X_train)\n    y_test_pred = model.predict(X_test)\n    get_classification_report(y_train, y_train_pred, y_test, y_test_pred)\n    \ndef distr_real(X_train, X_test, NUM_FEATURES):\n    figsize = (15, 3)\n    for column in NUM_FEATURES:\n        plt.figure(figsize=figsize)\n        sns.set(font_scale=0.8)\n        sns.kdeplot(X_train[column], shade=True, label='train', color='r')\n        sns.kdeplot(X_test[column], shade=True, label='test', color='g')\n        print(column)\n        print(mannwhitneyu(X_train[column], X_test[column]))\n        plt.legend()\n        plt.show()\n        \ndef show_learning_curve_plot(estimator, X, y, cv=3, n_jobs=-1, train_sizes=np.linspace(.1, 1.0, 5)):\n\n    train_sizes, train_scores, test_scores = learning_curve(estimator, X, y, \n                                                            cv=cv, \n                                                            scoring='f1',\n                                                            train_sizes=train_sizes, \n                                                            n_jobs=n_jobs)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n\n    plt.figure(figsize=(15,8))\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1, color=\"r\")\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n             label=\"Training score\")\n    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n             label=\"Cross-validation score\")\n\n    plt.title(f\"Learning curves ({type(estimator).__name__})\")\n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")     \n    plt.legend(loc=\"best\")\n    plt.grid()\n    plt.show()\n    \ndef show_proba_calibration_plots(y_predicted_probs, y_true_labels):\n    preds_with_true_labels = np.array(list(zip(y_predicted_probs, y_true_labels)))\n\n    thresholds = []\n    precisions = []\n    recalls = []\n    f1_scores = []\n\n    for threshold in np.linspace(0.1, 0.9, 9):\n        thresholds.append(threshold)\n        precisions.append(precision_score(y_true_labels, list(map(int, y_predicted_probs > threshold))))\n        recalls.append(recall_score(y_true_labels, list(map(int, y_predicted_probs > threshold))))\n        f1_scores.append(f1_score(y_true_labels, list(map(int, y_predicted_probs > threshold))))\n\n    scores_table = pd.DataFrame({'f1':f1_scores,\n                                 'precision':precisions,\n                                 'recall':recalls,\n                                 'probability':thresholds}).sort_values('f1', ascending=False).round(3)\n  \n    figure = plt.figure(figsize = (15, 5))\n\n    plt1 = figure.add_subplot(121)\n    plt1.plot(thresholds, precisions, label='Precision', linewidth=4)\n    plt1.plot(thresholds, recalls, label='Recall', linewidth=4)\n    plt1.plot(thresholds, f1_scores, label='F1', linewidth=4)\n    plt1.set_ylabel('Scores')\n    plt1.set_xlabel('Probability threshold')\n    plt1.set_title('Probabilities threshold calibration')\n    plt1.legend(bbox_to_anchor=(0.25, 0.25))   \n    plt1.table(cellText = scores_table.values,\n               colLabels = scores_table.columns, \n               colLoc = 'center', cellLoc = 'center', loc = 'bottom', bbox = [0, -1.3, 1, 1])\n\n    plt2 = figure.add_subplot(122)\n    plt2.hist(preds_with_true_labels[preds_with_true_labels[:, 1] == 0][:, 0], \n              label='Another class', color='royalblue', alpha=1)\n    plt2.hist(preds_with_true_labels[preds_with_true_labels[:, 1] == 1][:, 0], \n              label='Main class', color='darkcyan', alpha=0.8)\n    plt2.set_ylabel('Number of examples')\n    plt2.set_xlabel('Probabilities')\n    plt2.set_title('Probability histogram')\n    plt2.legend(bbox_to_anchor=(1, 1))\n\n    plt.show()","c70939b6":"df_train = pd.read_csv(TRAIN_PATH, sep=',')\ndf_test = pd.read_csv(TEST_PATH)\n\nprint(df_train.shape, df_test.shape)","d30390c1":"df_train.info()","2be2597c":"df_test.info()","47408c1d":"X = df_train.drop(columns='Credit Default')\ny = df_train['Credit Default']\nX.info()","93798468":"X.describe()","7de22d28":"v_types=['float64', 'int64']\nres_var_hist_dist(df_train, v_types, 20)","df4744cf":"res_var_uniq(X)","03c2c324":"NUM_FEATURES = df_train.select_dtypes(exclude='object').columns.tolist()[:-1]\ndistr_real(df_train, df_test, NUM_FEATURES)","5e7976d6":"CAT_FEATURE = df_train.select_dtypes(include='object').columns.tolist()[:-1]\nfigsize = (15, 3)\nfor num_el in NUM_FEATURES:\n    for col in CAT_FEATURE:\n        plt.figure(figsize=figsize)\n        sns.pointplot(x=col, y=num_el, data=df_train, capsize=.1, label='train', color='r')\n        sns.pointplot(x=col, y=num_el, data=df_test, capsize=.1, label='test', color='g')\n        plt.title(col) \n        plt.show()","695f464b":"# df2 = df_train[(df_train[\"Annual Income\"]<4500000)]\n# res_var_hist_dist(df2, v_types, 20)\n# print(df2['Annual Income'].count())","776b1d65":"# df_train['Tax Liens'].value_counts()","e51337b3":"# df_train['Number of Open Accounts'].loc[(df_train['Number of Open Accounts'] > 30)].value_counts()","40197368":"# df_train['Years of Credit History'].loc[(df_train['Years of Credit History'] > 50)].value_counts()","e3c1eab8":"# df2 = df_train[(df_train[\"Maximum Open Credit\"]<4500000)]\n# df2[\"Maximum Open Credit\"].value_counts()\n# df2[\"Maximum Open Credit\"].count()\n# res_var_hist_dist(df2, v_types, 20)","c683ac29":"# df_train['Number of Credit Problems'].value_counts()","0f347fed":"# df_train['Months since last delinquent'].loc[(df_train['Months since last delinquent'] > 90)].value_counts()","3795110f":"# df_train['Bankruptcies'].value_counts()","867a6f12":"# df2 = df_train[(df_train[\"Current Loan Amount\"]>4500000)]\n# df2[\"Current Loan Amount\"].value_counts()\n# df2[\"Current Loan Amount\"].count()\n# res_var_hist_dist(df2, v_types, 20)","e0aa9997":"# df2 = df_train[(df_train[\"Current Credit Balance\"]<2000000)]\n# df2[\"Current Credit Balance\"].value_counts()\n# df2[\"Current Credit Balance\"].count()\n# res_var_hist_dist(df2, v_types, 20)","3c947464":"# df2 = df_train[(df_train[\"Monthly Debt\"]>80000)]\n# df2[\"Current Credit Balance\"].value_counts()\n# df2[\"Current Credit Balance\"].count()\n# res_var_hist_dist(df2, v_types, 20)","f63ef1f6":"# df2 = df_train[(df_train[\"Credit Score\"]>1000)]\n# df2[\"Credit Score\"].value_counts()\n# df2[\"Credit Score\"].count()\n# res_var_hist_dist(df2, v_types, 20)","cb48d0dc":"# df_train['Credit Score'].value_counts()","8e786569":"TARGET_NAME = 'Credit Default'\nBASE_FEATURE_NAMES = df_train.drop(TARGET_NAME, axis=1).columns.tolist()\n\ncorr_with_target = df_train[BASE_FEATURE_NAMES + [TARGET_NAME]].corr().iloc[:-1, -1].sort_values(ascending=False)\n\nplt.figure(figsize=(10, 8))\n\nsns.barplot(x=corr_with_target.values, y=corr_with_target.index)\n\nplt.title('Correlation with target variable')\nplt.show()","d8fcf21a":"class dataPrepare:\n\n    def __init__(self):\n        self.medians = None  # \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0432\u0441\u0435 \u043c\u0435\u0434\u0438\u0430\u043d\u044b\n        self.mode = None  # \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0432\u0441\u0435 \u043c\u043e\u0434\u044b\n        self.q995 = None  # \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0432\u0441\u0435 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0438\n        \n    def fit(self, X):\n        self.medians = X.median()  # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n        self.mode = X.mode()  # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u043e\u0434\n        self.q995 = X.quantile(0.995)  # \u0420\u0430\u0441\u0447\u0435\u0442 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0435\u0439  \n    \n    def transform(self, X):\n        \n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c Annual Income\n        '''\n        \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0445\u0432\u043e\u0441\u0442 \u0441\u043f\u0440\u0430\u0432\u0430 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044f 0.995\n        \u0412\u0441\u0435 \u0447\u0442\u043e \u0432\u044b\u0445\u043e\u0434\u0438\u0442 \u0437\u0430 \u0440\u0430\u043c\u043a\u0438 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0430\u043c\u0438\n        \n        '''\n        X.loc[X['Annual Income'] > self.q995['Annual Income'], 'Annual Income'] = np.NaN\n        X.loc[(X['Annual Income'].isna()), 'Annual Income'] = self.medians['Annual Income']\n        \n        # Tax Liens \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u043c \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435\n        \n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c Number of Open Accounts\n        '''\n        \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0445\u0432\u043e\u0441\u0442 \u0441\u043f\u0440\u0430\u0432\u0430 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044f 0.995\n        \u0412\u0441\u0435 \u0447\u0442\u043e \u0432\u044b\u0445\u043e\u0434\u0438\u0442 \u0437\u0430 \u0440\u0430\u043c\u043a\u0438 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0430\u043c\u0438\n        \n        '''\n        X.loc[X['Number of Open Accounts'] > self.q995['Number of Open Accounts'], 'Number of Open Accounts'] = np.NaN\n        X.loc[(X['Number of Open Accounts'].isna()), 'Number of Open Accounts'] = self.medians['Number of Open Accounts']\n        \n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c Maximum Open Credit\n        '''\n        \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c 0.995\n        \u0412\u0441\u0435 \u0447\u0442\u043e \u0432\u044b\u0445\u043e\u0434\u0438\u0442 \u0437\u0430 \u0440\u0430\u043c\u043a\u0438 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0430\u043c\u0438\n        \n        '''\n        X.loc[X['Maximum Open Credit'] > self.q995['Maximum Open Credit'], 'Maximum Open Credit'] = np.NaN\n        X.loc[(X['Maximum Open Credit'].isna()), 'Maximum Open Credit'] = self.medians['Maximum Open Credit']\n        \n        # Number of Credit Problems \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u043c \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435\n        \n        # !!!!!!!!!!!!!!!!!!! \n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c Months since last delinquent\n        # \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0438\u0442\u044c \u043d\u0430 \u043a\u043b\u0430\u0441\u044b, \u0442.\u043a. \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043e\u0437\u043d\u0430\u0447\u0430\u0442\u044c, \u0447\u0442\u043e \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u0435\u043a \u043d\u0435 \u0431\u044b\u043b\u043e. \n        # \u0418 \u043c\u043e\u0436\u043d\u043e \u0443\u0447\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0440\u043e\u0433. \n        # \u0414\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 9999 \u0434\u043b\u044f nan.\n        # \u0412 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u043c \u0438\u0442\u043e\u0433\u0435 \u0431\u0443\u0434\u0435\u0442 \u0443\u0434\u0430\u043b\u0435\u043d\u043e \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n        X.loc[(X['Months since last delinquent'].isna()), 'Months since last delinquent'] = 9999\n               \n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c Bankruptcies\n        # \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0441\u0442\u043e\u0438\u0442 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u043d\u0430 \u043a\u043b\u0430\u0441\u0441\u044b\n        # \u0412 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u043c \u0438\u0442\u043e\u0433\u0435 \u0431\u0443\u0434\u0435\u0442 \u0443\u0434\u0430\u043b\u0435\u043d\u043e \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n        X.loc[(X['Bankruptcies'].isna()), 'Bankruptcies'] = 0\n        \n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c Current Loan Amount\n        '''\n        \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c \u043d\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u0442 \u043e\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u0443\u044e \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0443, \u043e\u0441\u043d\u043e\u0432\u044b\u0432\u0430\u044f\u0441\u044c \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435.\n        \u0412\u0441\u0435 \u0447\u0442\u043e \u0432\u044b\u0445\u043e\u0434\u0438\u0442 \u0437\u0430 \u0440\u0430\u043c\u043a\u0438 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438\n        \n        '''\n        # X.loc[X['Current Loan Amount'] > self.q995['Current Loan Amount'], 'Current Loan Amount'] = np.NaN\n        X.loc[(X['Current Loan Amount'].isna()), 'Current Loan Amount'] = self.medians['Current Loan Amount']\n        X.loc[(X['Current Loan Amount'] > 4500000), 'Current Loan Amount'] = self.medians['Current Loan Amount']\n        \n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c Current Credit Balance\n        '''\n        \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c 0.995\n        \u0412\u0441\u0435 \u0447\u0442\u043e \u0432\u044b\u0445\u043e\u0434\u0438\u0442 \u0437\u0430 \u0440\u0430\u043c\u043a\u0438 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0430\u043c\u0438\n        \n        '''\n        X.loc[X['Current Credit Balance'] > self.q995['Current Credit Balance'], 'Current Credit Balance'] = np.NaN\n        X.loc[(X['Current Credit Balance'].isna()), 'Current Credit Balance'] = self.medians['Current Credit Balance']\n        \n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c Monthly Debt\n        '''\n        \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c 0.995\n        \u0412\u0441\u0435 \u0447\u0442\u043e \u0432\u044b\u0445\u043e\u0434\u0438\u0442 \u0437\u0430 \u0440\u0430\u043c\u043a\u0438 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0430\u043c\u0438\n        \n        '''\n        X.loc[X['Monthly Debt'] > self.q995['Monthly Debt'], 'Monthly Debt'] = np.NaN\n        X.loc[(X['Monthly Debt'].isna()), 'Monthly Debt'] = self.medians['Monthly Debt']\n        \n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c Credit Score\n        '''\n        \u0411\u0430\u043b\u043b\u043e\u0432 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u043d\u0435 \u0431\u044b\u0432\u0430\u044c \u0431\u043e\u043b\u044c\u0448\u0435 1000. \u041d\u0430 \u043b\u0438\u0446\u043e \u043e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f - \u043b\u0438\u0448\u043d\u0438\u0439 0.\n        \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 1000 \u043d\u0430 10.\n        \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c 0.995\n        \u0412\u0441\u0435 \u0447\u0442\u043e \u0432\u044b\u0445\u043e\u0434\u0438\u0442 \u0437\u0430 \u0440\u0430\u043c\u043a\u0438 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438  \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0430\u043c\u0438\n        \n        '''\n        # TODO \u041f\u0435\u0440\u0435\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0430 ML\n        X.loc[(X['Credit Score'] > 1000), 'Credit Score'] = X['Credit Score']\/10\n        X.loc[X['Credit Score'] > self.q995['Credit Score'], 'Credit Score'] = np.NaN\n        X.loc[(X['Credit Score'].isna()), 'Credit Score'] = self.medians['Credit Score']\n        \n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c Years in current job\n        X.loc[(X['Years in current job'].isna()), 'Years in current job'] = self.mode['Years in current job'][0]\n\n        return X","2ed10cbc":"class dataDummies:\n\n    def __init__(self):\n        self.mode = None  # \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0432\u0441\u0435 \u043c\u043e\u0434\u044b\n        \n    def fit(self, X):\n        self.mode = X.mode()  # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u043e\u0434\n        self.medians = X.median()  # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n    \n    def transform(self, X, method_type = 'other'):\n        \n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c Tax Liens\n        if 'Tax Liens' in X.columns:\n            X['Tax_Liens_Cat'] = 0\n            X.loc[(X['Tax Liens'] == 0), 'Tax_Liens_Cat'] = 'tax_none'\n            X.loc[(X['Tax Liens'] >= 1) | (X['Tax Liens'] <= 6), 'Tax_Liens_Cat'] = 'tax_middle'\n            X.loc[(X['Tax Liens'] >= 7), 'Tax_Liens_Cat'] = 'tax_high'\n            X.drop('Tax Liens', axis=1, inplace=True)\n         \n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c Number of Credit Problems\n        if 'Number of Credit Problems' in X.columns:\n            X['Credit_problem_cat'] = 0\n            X.loc[(X['Number of Credit Problems'] == 0), 'Credit_problem_cat'] = 'cp_none'\n            X.loc[(X['Number of Credit Problems'] >= 1) | (X['Number of Credit Problems'] <= 3), 'Credit_problem_cat'] = 'cp_middle'\n            X.loc[(X['Number of Credit Problems'] >= 3), 'Credit_problem_cat'] = 'cp_high'\n            X.drop('Number of Credit Problems', axis=1, inplace=True)\n            \n        X.loc[(X['Home Ownership'] == 'Have Mortgage'), 'Home Ownership'] = 'Home Mortgage'\n        \n        enum_feature = X.select_dtypes(include=['object', 'category', 'bool'])\n        enum_feature = enum_feature.columns.tolist()\n        \n        # \u0414\u0430\u043d\u043d\u0430\u044f \u0432\u0435\u0442\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0430\u0441\u044c \u0434\u043b\u044f \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u043e\u0432\n        if method_type == 'other':  \n            # X.drop('Current Loan Amount', axis=1, inplace=True)\n            # X.drop('Years in current job', axis=1, inplace=True)\n            # X.drop('Purpose', axis=1, inplace=True)\n            # X.drop('Monthly Debt', axis=1, inplace=True)\n            # X.drop('Long Term', axis=1, inplace=True)\n            # X.drop('Short Term', axis=1, inplace=True)\n            # bool, int64, float64, object, category, timedelta64, datetime64\n        \n            # \u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0432 dummie \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\n            for i in enum_feature:\n                X = pd.concat([X, pd.get_dummies(X[i])], axis=1)\n                X.drop(i, axis=1, inplace=True)\n            \n            X.rename(columns={'< 1 year': 'less_1_year', '10+ years': 'more_10_years'}, inplace=True)\n        # \u0414\u0430\u043d\u043d\u0430\u044f \u0432\u0435\u0442\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f catboost\n        elif method_type == 'cat_boost':\n            df_train[enum_feature] = df_train[enum_feature].astype('str')\n            \n            \n        return X","a363a57c":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ndf_train = pd.read_csv(TRAIN_PATH)\ndf_test = pd.read_csv(TEST_PATH)\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u043f\u0440\u043e\u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\nd_prepare = dataPrepare()\nd_prepare.fit(df_train)\n\nd_dummies = dataDummies()\nd_dummies.fit(df_train)\n\n# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ndf_train = d_prepare.transform(df_train)\ndf_test = d_prepare.transform(df_test)\n\ndf_train = d_dummies.transform(df_train, 'cat_boost')\ndf_test = d_dummies.transform(df_test, 'cat_boost')","edb95333":"df_train.info()","9382dc91":"df_test.info()","3010873e":"res_var_hist_dist(df_train, v_types, 20)","6b2fc26b":"NUM_FEATURES = df_train.select_dtypes(exclude='object').columns.tolist()[:-1]\ndistr_real(df_train, df_test, NUM_FEATURES)","e8fc5dee":"CAT_FEATURE = df_train.select_dtypes(include='object').columns.tolist()[:-1]\nfor num_el in NUM_FEATURES:\n    for col in CAT_FEATURE:\n        plt.figure(figsize=figsize)\n        sns.pointplot(x=col, y=num_el, data=df_train, capsize=.1, label='train', color='r')\n        sns.pointplot(x=col, y=num_el, data=df_test, capsize=.1, label='test', color='g')\n        plt.title(col) \n        plt.show()","1bfedb0c":"TARGET_NAME = 'Credit Default'\nBASE_FEATURE_NAMES = df_train.drop(TARGET_NAME, axis=1).columns.tolist()\n\ncorr_with_target = df_train[BASE_FEATURE_NAMES + [TARGET_NAME]].corr().iloc[:-1, -1].sort_values(ascending=False)\n\nplt.figure(figsize=(10, 8))\n\nsns.barplot(x=corr_with_target.values, y=corr_with_target.index)\n\nplt.title('Correlation with target variable')\nplt.show()","7b3ccfa5":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ndf_train = pd.read_csv(TRAIN_PATH)\ndf_test = pd.read_csv(TEST_PATH)\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u043f\u0440\u043e\u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\nd_prepare = dataPrepare()\nd_prepare.fit(df_train)\n\nd_dummies = dataDummies()\nd_dummies.fit(df_train)\n\n# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ndf_train = d_prepare.transform(df_train)\ndf_test = d_prepare.transform(df_test)\n\ndf_train = d_dummies.transform(df_train, 'cat_boost')\ndf_test = d_dummies.transform(df_test, 'cat_boost')","7e6b21ae":"TARGET_NAME = 'Credit Default'\nBASE_FEATURE_NAMES = df_train.drop(TARGET_NAME, axis=1).columns.tolist()\n\ndf_balanced = balance_df_by_target(df_train, TARGET_NAME, method='over')\ndf_balanced[TARGET_NAME].value_counts()","a0e86d15":"X = df_balanced[BASE_FEATURE_NAMES]\ny = df_balanced[TARGET_NAME]\n                \nX_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, test_size=0.30, random_state=21)","4a5cb36b":"NUM_FEATURE_NAMES = X_train.select_dtypes(include=['float64']).columns.tolist()\nNUM_FEATURE_NAMES","314d6ae6":"CAT_FEATURE_NAMES = X_train.select_dtypes(include=['object', 'category', 'bool']).columns.tolist()\nCAT_FEATURE_NAMES","bd7ba66d":"# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0440\u0430\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0438 \u0432\u044b\u0431\u043e\u0440\u043e\u043a \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0430\u043c\ndisbalance = y_train.value_counts()[0] \/ y_train.value_counts()[1]\n\n# \u041e\u0431\u043e\u0437\u043d\u0430\u0447\u0438\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0431\u0435\u043b\u0438 CatBoost\nCAT_FEATURE_NAMES = ['Home Ownership',\n                     'Years in current job',\n                     'Purpose',\n                     'Term',\n                     'Tax_Liens_Cat',\n                     'Credit_problem_cat']\n\n# \u041e\u0431\u043e\u0437\u043d\u0430\u0447\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0446\u0435\u043b\u043e\u043c\nTOTAL_FEATURE_NAME = ['Annual Income',\n                      'Number of Open Accounts',\n                      'Years of Credit History',\n                      'Maximum Open Credit',\n                      'Months since last delinquent',\n                      'Bankruptcies',\n                      'Current Loan Amount',\n                      'Current Credit Balance',\n                      'Monthly Debt',\n                      'Credit Score',\n                      'Home Ownership',\n                      'Years in current job',\n                      'Purpose',\n                      'Term',\n                      'Tax_Liens_Cat',\n                      'Credit_problem_cat'\n                     ]\n\n# \u041e\u0442\u0431\u0435\u0440\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0438 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0432\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043e\u043a\nX_train = X_train[TOTAL_FEATURE_NAME]\nX_test = X_test[TOTAL_FEATURE_NAME]\n\n# \u0417\u0430\u0444\u0438\u043a\u0441\u0440\u0443\u0435\u043c \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438\nparams = {\n     'class_weights':[1, disbalance], \n     'silent':True,\n     'random_state':21,\n     'cat_features':CAT_FEATURE_NAMES,\n     'eval_metric':'F1',\n     'early_stopping_rounds':80\n}\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0430\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. \u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d \u0432\u0440\u0443\u0447\u043d\u0443\u044e.\nmodel_catb = catb.CatBoostClassifier(**params,\n                                     iterations=1000,\n                                     max_depth=4,\n                                     reg_lambda=0.5,\n                                    )\n\n# \u041e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c\nmodel_catb.fit(X_train, y_train, plot=True, eval_set=(X_test, y_test))\n\n# \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\ny_train_pred = model_catb.predict(X_train)\ny_test_pred = model_catb.predict(X_test)\n\n# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e\nget_classification_report(y_train, y_train_pred, y_test, y_test_pred)","03c31c78":"important_features_top = show_feature_importances(X_train.columns, model_catb.feature_importances_, get_top=48)","78065f27":"show_learning_curve_plot( model_catb, X_train, y_train)","c6dcc075":"y_test_pred_probs = model_catb.predict_proba(X_test)\nshow_proba_calibration_plots(y_test_pred_probs[:, 1], y_test)","56d9e1bd":"# %%time\n# import multiprocessing\n# n_jobs_v = multiprocessing.cpu_count()-1\n\n# parameters = [{'n_estimators': [300, 500, 700, 1000],\n#                'max_depth': np.arange(3, 7),\n#                'reg_lambda':[0.1, 0.5, 0.7, 0.9, 5, 50, 80]}]\n\n# f_params = {'class_weights':[1, disbalance],'silent':True,'random_state':21,'cat_features':CAT_FEATURE_NAMES,'eval_metric':'F1','early_stopping_rounds':80}\n\n# #model_catb = catb.CatBoostClassifier(**f_params)\n\n# from sklearn.model_selection import GridSearchCV\n\n# gcv = GridSearchCV(estimator = catb.CatBoostClassifier(**f_params),\n#                    param_grid = parameters,\n#                    scoring = 'f1',\n#                    cv = StratifiedKFold(n_splits=3, random_state=21, shuffle=True),\n#                    n_jobs=multiprocessing.cpu_count()-1)\n\n# gcv.fit(X_train, y_train)\n# gcv.best_params_","b1d00a22":"X = X[TOTAL_FEATURE_NAME]\ndf_test = df_test[TOTAL_FEATURE_NAME]\n\n# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\nfinal_model = catb.CatBoostClassifier(**params,\n                                     iterations=1000,\n                                     max_depth=4,\n                                     reg_lambda=0.5)\n\n# \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\nfinal_model.fit(X, y)\n\n# \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\ny_test_preds_cat = final_model.predict(df_test)","430e08a4":"submit = pd.read_csv(SUBMIT_PATH)\nsubmit['Credit Default'] = y_test_preds_cat\nsubmit.to_csv('cat_submit.csv', index=False)","cf7af0e7":"\u041d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u0441\u0438\u043b\u044c\u043d\u043e\u0435 \u0441\u0438\u043b\u044c\u043d\u043e\u0435 \u0432\u043b\u0438\u044f\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 Current Loan Amount, \u0447\u0442\u043e, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e, \u0432\u044b\u0437\u044b\u0432\u0432\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435. \u041f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u043c \u0440\u0435\u0433\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0448\u0442\u0440\u0430\u0444\u0430\u043c\u0438.","d6e825f4":"### \u0412\u044b\u0432\u043e\u0434\u044b\n\n\u0412 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u043e\u043b\u044f\u0445\n\n- Annual Income                 5943 non-null\n- Months since last delinquent  3419 non-null\n- Bankruptcies                  7486 non-null\n- Credit Score                  5943 non-null\n \n\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 Annual Income \u0438 Credit Score \u0438\u043c\u0435\u044e\u0442 \u043e\u0434\u0438\u043d\u0430\u043e\u043a\u043e\u0432\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u0447\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0441\u043b\u0443\u0436\u0438\u0442\u044c \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u043c, \u0447\u0442\u043e \u044d\u0442\u0438 \u043b\u044e\u0434\u0438 \u0432\u0437\u044f\u043b\u0438 \u043a\u0440\u0435\u0434\u0438\u0442 \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437.\n\nTrain \u0438 Test \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u0445\u043e\u0436\u0438. \u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 Bankruptcies \u0438 Months since last delinquent \u0438\u043c\u0435\u044e\u0442 \u043e\u0447\u0435\u043d\u044c \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438. \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0438\u0445 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0438 \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0441\u043d\u043e\u0432\u0430.\n\n\u041d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u043d\u0438\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432\u0438\u0434\u0435\u043d \u0440\u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d \u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 Years in current job, Bankruptcies, Purpose. \u0412\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u0438\u0445 \u0442\u043e\u0436\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0443\u0434\u0430\u043b\u0438\u0442\u044c. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0441\u043b\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u0438\u0437\u0430\u0446\u0438\u0438.\n \n\n#### \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\n- \u041f\u0440\u0438\u0437\u043d\u0430\u043a Annual Income \u0438\u043c\u0435\u0435\u0442 \u0434\u043b\u0438\u043d\u043d\u044b\u0439 \u0445\u0432\u043e\u0441\u0442 \u043f\u043e\u0441\u043b\u0435 45 000 000. \u0414\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0432\u044b\u043a\u0438\u043d\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0435 45 000 000 \u0438\u0437 \u0432\u044b\u0431\u043e\u0440\u043e\u043a, \u0430 nan \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0430\u043c\u0438.\n- Tax Liens \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435. \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0438 \u0432\u0432\u0435\u0434\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0433\u0434\u0435 0 - none, 1-3 - low, 4-6 - medium, >=7 - high. \u0418 \u0443\u0434\u0430\u043b\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446\n- Number of Open Accounts. \u0414\u043b\u0438\u043d\u043d\u044b\u0439 \u0445\u0432\u043e\u0441\u0442 \u0441\u043f\u0440\u0430\u0432\u0430. \u0423\u0434\u0430\u043b\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0435 33.\n- Maximum Open Credit. \u0415\u0441\u043b\u0438 \u043a\u0440\u0435\u0434\u0438\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 4 500 000 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043c\u0435\u0434\u0438\u0430\u043d\u0443. \u041b\u0438\u0431\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0442\u0431\u0440\u043e\u0441\u0438\u043c.\n- Number of Credit Problems. \u0420\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u043d\u0430 \u043a\u043b\u0430\u0441\u0441\u044b 0 - none, 1 - low, 2-3 - middle, >3 - high \u0438 \u0443\u0434\u0430\u043b\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446\n- Months since last delinquent. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0438\u0442\u044c \u043d\u0430 \u043a\u043b\u0430\u0441\u044b, \u0442.\u043a. \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043e\u0437\u043d\u0430\u0447\u0430\u0442\u044c, \u0447\u0442\u043e \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u0435\u043a \u043d\u0435 \u0431\u044b\u043b\u043e. \u0418 \u043c\u043e\u0436\u043d\u043e \u0443\u0447\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0440\u043e\u0433. \u0414\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 9999 \u0434\u043b\u044f nan.\n- Bankruptcies. \u0414\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438. \u041f\u043e\u043a\u0430 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439\n- Current Loan Amount. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 4 500 000 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443.\n- Current Credit Balance. \u0412\u043e\u0437\u044c\u043c\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 2 000 000 \u0434\u043b\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f.\n- Monthly Debt. \u0412\u043e\u0437\u044c\u043c\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 80 000 \u0434\u043b\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f.\n- Credit Score. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0435 1000 \u043f\u043e\u0434\u0435\u043b\u0438\u043c \u043d\u0430 10.","9a1c8f6a":"### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","0221e410":"####  \u0412\u044b\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","7a83b245":"### 3.5. \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u043d\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 <a clacc='anchor' id='eda_dist_of_cat'>","d1761b96":"## 5. \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test <a clacc='anchor' id='split'>","2eb7b87d":"#### \u041f\u043e\u0434\u0431\u043e\u0440 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","7b2659ec":"### 4.1. \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430, \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438\u0441\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438","9eb6edf1":"#### \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435","1702eea3":"\u041b\u0443\u0447\u0448\u0435 \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u0432\u0441\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443","6f57bc99":"### 3.6. \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 <a clacc='anchor' id='eda_target'>","4e8de0a8":"\u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0431\u044b\u043b\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043e \u0432\u044b\u0448\u0435. \u041e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0431\u0440\u0430\u043b \u0443\u0436\u0435 \u0432 \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0441 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u043c\u0438. \u0423\u0440\u0435\u0437\u0430\u043b \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044f\u043c, \u043b\u0438\u0431\u043e \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0435, \u0437\u0430\u0442\u0435\u043c \u0431\u0440\u0430\u043b \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u0438\u043b\u0438 \u043c\u043e\u0434\u0443. \u0411\u044b\u043b\u0430 \u0438\u0434\u0435\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u043d\u043e \u043e\u0431\u044a\u0435\u043c \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u044b\u043b \u043d\u0435\u0441\u043e\u0438\u0437\u043c\u0435\u0440\u0438\u043c\u043e \u043c\u0430\u043b \u0434\u043b\u044f \u043f\u043e\u0432\u044b\u0448\u0435\u043d\u0438\u0435 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0442\u0430\u043a\u0438\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c.","3a1f058d":"### \u0412\u044b\u0432\u043e\u0434\n\n\u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \"\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u0435\", \u0445\u043e\u0442\u044f \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u043f\u043e \u043c\u043e\u0435\u043c\u0443 \u0436\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d\u0438\u044e \u0435\u0441\u0442\u044c \u0434\u0438\u0441\u0431\u0430\u043b\u0430\u043d\u0441.\n\n\u041f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0430\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043a\u0430\u0440\u0442\u0438\u043d\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0430\u0441\u044c \u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 Years in current job, Bankruptcies, Purpose \u043d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0443\u0447\u0438\u0442\u0432\u044b\u0430\u0442\u044c \u0432 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438, \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u043b\u043e\u0441\u044c.\n","5718f443":"\u041d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 Current Loan Amount, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0431\u0443\u0434\u0435\u043c \u0448\u0442\u0440\u0430\u0444\u043e\u0432\u0430\u0442\u044c.","d971563b":"## 8. \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 <a clacc='anchor' id='prediction'>","c24b5f67":"### 3.3. \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 <a clacc='anchor' id='eda_nom'>","3d42cf4d":"#### \u041e\u0431\u0437\u043e\u0440 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","2ebe0212":"#### \u0414\u0430\u043b\u0435\u0435 \u0431\u0443\u0434\u0435\u043c \u043e\u0447\u0438\u0449\u0430\u0442\u044c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043e\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438.","9ff8e079":"## 3. EDA <a clacc='anchor' id='eda'>","52421089":"####  \u0420\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 train \u0438 test","624a3bf0":"#### \u0412\u044b\u0432\u043e\u0434 \u043f\u043e \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n\n\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0442 \u0440\u0430\u043d\u0435\u0435 \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u0438 \u0435\u0449\u0435 \u0440\u0430\u0437 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 Months since last delinquent \u0438 Bankruptcies \u043d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438.","ed398ecd":"#### \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432","926036f6":"## 1. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <a clacc='anchor' id='lib_func'>","fce941a2":"#### \u0412\u044b\u0431\u043e\u0440 \u043f\u043e\u0440\u043e\u0433\u0430 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430","2b309c05":"### \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\n#### \u0424\u0430\u0439\u043b\u044b\n- train.csv - \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n- test.csv - \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n- sampleSubmission.csv - \u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n\n#### \u041f\u043e\u043b\u044f\n- Home Ownership - \u0434\u043e\u043c\u043e\u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435\n- Annual Income - \u0433\u043e\u0434\u043e\u0432\u043e\u0439 \u0434\u043e\u0445\u043e\u0434\n- Years in current job - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b\n- Tax Liens - \u043d\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u0435 \u043e\u0431\u0440\u0435\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n- Number of Open Accounts - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432\n- Years of Credit History - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438\n- Maximum Open Credit - \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u0440\u0435\u0434\u0438\u0442 (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e \u0431\u044b\u043b\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443)\n- Number of Credit Problems - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u043c\n- Months since last delinquent - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n- Bankruptcies - \u0431\u0430\u043d\u043a\u0440\u043e\u0442\u0441\u0442\u0432\u0430\n- Purpose - \u0446\u0435\u043b\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n- Term - \u0441\u0440\u043e\u043a \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n- Current Loan Amount - \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430 (\u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0435\u0449\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u0432\u044b\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0443)\n- Current Credit Balance - \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 (\u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u043e\u0436\u0435\u0442 \u0442\u0440\u0430\u0442\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442 \u0441 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0430)\n- Monthly Debt - \u0435\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439 \u0434\u043e\u043b\u0433\n- Credit Score - \u0431\u0430\u043b\u043b\u044b \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430\n- Credit Default - \u0444\u0430\u043a\u0442 \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432 (0 - \u043f\u043e\u0433\u0430\u0448\u0435\u043d \u0432\u043e\u0432\u0440\u0435\u043c\u044f, 1 - \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0430)","704df1cd":"## 4. \u041a\u043b\u0430\u0441\u0441\u044b \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432  <a clacc='anchor' id='data_prepare'>","f6042d23":"\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u0443\u0436\u0435 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u044b \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438\u0437 \u043a\u0440\u043e\u0441\u0441\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0440\u0443\u0447\u043d\u043e\u0439 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0438.","f8e625a2":"# \u041a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 Credit Default\n\n### \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435\n- [1. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438](#lib_func)\n- [2. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445](#data)\n- [3. EDA](#eda)\n    * [3.1. \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e Data Frame](#eda_def)\n    * [3.2. \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#eda_material)\n    * [3.3. \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#eda_nom)\n    * [3.4. \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u043d\u0438\u044f \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#eda_dist_of_real)\n    * [3.5. \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u043d\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#eda_dist_of_cat)\n    * [3.6. \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439](#eda_target)\n- [4. \u041a\u043b\u0430\u0441\u0441\u044b \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432](#data_prepare)\n- [5. \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test](#split)\n- [6. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438](#modeling)\n- [7. \u041a\u0440\u043e\u0441\u0441\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f](#crossvalid)\n- [8. \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435](#prediction)","98656071":"## 7. \u041a\u0440\u043e\u0441\u0441\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f <a clacc='anchor' id='crossvalid'>","0c1bddba":"### 3.1. \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e Data Frame <a clacc='anchor' id='eda_def'>","937412a4":"####  \u0412\u044b\u0434\u0435\u043b\u0438\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0438 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0438","ceb536f3":"### 3.4. \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u043d\u0438\u044f \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 <a clacc='anchor' id='eda_dist_of_real'>","f8d51793":"### \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","1e8c513c":"## 2. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 <a class='anchor' lib='data'>","df050cd3":"## 6. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 <a clacc='anchor' id='modeling'>","a1fea08d":"#### \u0420\u0430\u0441\u0447\u0435\u0442 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n\n\u0417\u0430\u0431\u0435\u0433\u0430\u044f \u0432\u043f\u0435\u0440\u0435\u0434, \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u0430\u0432\u0430\u043b\u0438 \u0445\u043e\u0440\u043e\u0448\u0443\u044e \u043c\u0435\u0442\u0440\u0438\u043a\u0443 \u043d\u0430 \u0442\u0435\u0441\u0442\u0435, \u043e\u043a\u043e\u043b\u043e 0,68, \u043d\u043e \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u043b\u043e \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u043a\u043e\u043b\u043e 10%, \u0447\u0442\u043e \u0441\u0432\u043e\u0434\u0438\u043b\u043e \u043d\u0430 \u043d\u0435\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0443 \u043d\u0430 kaggle. \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0431\u044b\u043b \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d \u0440\u0443\u0447\u043d\u043e\u0439 \u043f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u043f\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u0434\u043b\u044f \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u043b\u0443\u0447\u0448\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043d\u0430 kaggle. \u0422\u0430\u043a\u0436\u0435 \u0432\u044b\u044f\u0432\u0438\u043b\u0430\u0441\u044c \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c, \u0447\u0442\u043e \u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0442\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430 kaggle \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u0430  \u0443\u0440\u043e\u0432\u043d\u044e \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0432 \u0445\u0443\u0434\u0448\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0435 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f 3%, \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430 kaggle \u0441\u0442\u0430\u043b\u0430 \u0445\u0443\u0436\u0435 \u043d\u0430 3%.\n\n##### \u0412\u044b\u0432\u043e\u0434 \u043c\u0435\u0442\u0440\u0438\u043a\n- CPU times: user 24.8 s, sys: 2.04 s, total: 26.9 s\n- Wall time: 13min 40s\n- {'max_depth': 6, 'n_estimators': 1000, 'reg_lambda': 0.9}","5ebfceec":"### 3.2. \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 <a clacc='anchor' id='eda_material'>"}}