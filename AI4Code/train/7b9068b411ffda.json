{"cell_type":{"e3b146b3":"code","fc8c981e":"code","20703432":"code","5546bb80":"code","b484eaee":"code","0bac3b42":"code","51e2864f":"code","2c00be60":"code","e7d33086":"code","cee64baa":"code","387d3e04":"code","d4a47db7":"code","36e7a568":"code","a1347ef1":"code","4e0c7856":"code","4969aff4":"code","5e1db460":"code","da70a9ac":"code","9d423ac6":"markdown","f8cccdb5":"markdown","d0804296":"markdown","879946b9":"markdown","f465a6e8":"markdown","bdf44120":"markdown","3fec3e19":"markdown"},"source":{"e3b146b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc8c981e":"train=pd.read_csv(\"\/kaggle\/input\/mnist-in-csv\/mnist_train.csv\")\nprint(train.shape)\ntrain.head()","20703432":"test=pd.read_csv(\"\/kaggle\/input\/mnist-in-csv\/mnist_test.csv\")\nprint(test.shape)\ntest.head()","5546bb80":"X_train=train.drop(labels=[\"label\"],axis=1)\nY_train=train[\"label\"]","b484eaee":"plt.figure(figsize=(15,7))\ng=sns.countplot(Y_train,palette=\"colorblind\")","0bac3b42":"img = X_train.iloc[60].values.reshape(28,28)\nimg.shape\nplt.imshow(img,cmap='gray')\nplt.axis(\"off\")\nplt.show()","51e2864f":"Y_train.value_counts()","2c00be60":"X_test=test.drop(labels=[\"label\"],axis=1)\nY_test=test[\"label\"]","e7d33086":"X_train=X_train\/225.0\nX_test=X_test\/225.0\nprint(\"X_train: \",X_train.shape)\nprint(\"X_test shape: \",X_test.shape)","cee64baa":"X_train=X_train.values.reshape(-1,28,28,1)\nX_test=X_test.values.reshape(-1,28,28,1)\nprint(\"X_train shape: \",X_train.shape)\nprint(\"X_test shape: \",X_test.shape)","387d3e04":"from keras.utils.np_utils import to_categorical\nY_train=to_categorical(Y_train,num_classes=10)","d4a47db7":"Y_train","36e7a568":"Y_test=to_categorical(Y_test,num_classes=10)","a1347ef1":"from sklearn.model_selection import train_test_split\nX_train,X_val,Y_train,Y_val=train_test_split(X_train,Y_train,test_size=0.1,random_state=2)\nprint(\"x_train: \",X_train.shape)\nprint(\"x_test: \",X_val.shape)\nprint(\"y_train: \",Y_train.shape)\nprint(\"x_test: \",Y_val.shape)","4e0c7856":"from sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\nmodel.add(Conv2D(filters=32,kernel_size=(3,3),padding='Same',activation='relu',input_shape=(28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters=32,kernel_size=(3,3),padding='Same',activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding=\"Same\",activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))\n\nmodel.compile(optimizer=\"rmsprop\",loss=\"categorical_crossentropy\",metrics=[\"accuracy\"])\nbatch_size=32\nepochs=100","4969aff4":"datagen=ImageDataGenerator(featurewise_center=False,\n                           samplewise_center=False,\n                           featurewise_std_normalization=False,\n                           samplewise_std_normalization=False,\n                           zca_whitening=False,\n                           rotation_range=5,\n                           zoom_range=0.1,\n                           width_shift_range=0.1,\n                           height_shift_range=0.1,\n                           horizontal_flip=False,\n                           vertical_flip=False)\ndatagen.fit(X_train)","5e1db460":"history=model.fit_generator(datagen.flow(X_train,Y_train,batch_size=batch_size),\n                            epochs=epochs,validation_data=(X_val,Y_val),\n                            steps_per_epoch=1600\/\/batch_size)","da70a9ac":"print(history.history.keys())\nplt.plot(history.history[\"loss\"], label = \"Train Loss\")\nplt.plot(history.history[\"val_loss\"], label = \"Validation Loss\")\nplt.legend()\nplt.show()\nplt.figure()\nplt.plot(history.history[\"accuracy\"], label = \"Train acc\")\nplt.plot(history.history[\"val_accuracy\"], label = \"Validation acc\")\nplt.legend()\nplt.show()","9d423ac6":"## **-Reshape**","f8cccdb5":"## **-Fit Model**","d0804296":"## **-Label Encoding**","879946b9":"## **-Train Test Split**","f465a6e8":"## **-CNN Model**","bdf44120":"## **-Evaluate the Model**","3fec3e19":"## **-Normalization**"}}