{"cell_type":{"279c8c81":"code","30bbf85f":"code","e2dc9fd2":"code","489c869e":"code","2e79b425":"code","562b6d8e":"code","1bbcff66":"code","706df1de":"code","ad9b1f04":"code","ea95365c":"code","c3ed30df":"code","5172ecc3":"code","b49d1e0f":"code","4904df3b":"code","2f8d3f20":"code","17b678da":"code","bbe12089":"code","51e2ff84":"code","d48a0607":"code","21f3d57e":"code","5f2eda25":"code","be8d4fdd":"code","656b9a4e":"code","120d54d2":"code","aeb51d08":"code","c19489da":"code","f4f1833b":"code","68f1dd7f":"code","bc205e7a":"code","51c536e0":"code","51c06517":"code","51431a16":"code","9846e106":"code","2bae4a32":"code","2274ba22":"code","6310ae35":"code","fe342c4c":"markdown","110f73a2":"markdown","0069491f":"markdown","1683cb19":"markdown","bec3c22e":"markdown"},"source":{"279c8c81":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns ; sns.set()\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","30bbf85f":"df = pd.read_csv(\"\/kaggle\/input\/ibm-hr-analytics-attrition-dataset\/WA_Fn-UseC_-HR-Employee-Attrition.csv\")\ndf.head()","e2dc9fd2":"df.isna().sum()","489c869e":"df.drop([\"StandardHours\", \"EmployeeCount\",\"EmployeeNumber\"],axis=1,inplace=True)\ndf[\"Attrition\"].replace({\"Yes\" : 1, \"No\" : 0},inplace=True)","2e79b425":"plt.figure(figsize=(20,18))\nsns.heatmap(df.corr(),annot=True);","562b6d8e":"sns.countplot(x=df[\"Attrition\"])\nplt.xticks([0,1],[\"No\",\"Yes\"]);","1bbcff66":"df.corr()[\"Attrition\"].abs().sort_values(ascending=False).iloc[1:].head(10)","706df1de":"sns.distplot(df[\"DistanceFromHome\"],kde=False)\nmedian_dis = df[\"DistanceFromHome\"].median()\nplt.axvline(median_dis,c=\"r\",label=\"Median\")\nplt.title(\"Distribution of Distance\")\nplt.legend()\nplt.show()","ad9b1f04":"sns.catplot(x=\"Attrition\",y=\"DistanceFromHome\",data=df)\nplt.xticks([0,1],[\"No\",\"Yes\"])\nplt.show()","ea95365c":"sns.catplot(x=\"JobLevel\",kind=\"count\",col=\"Attrition\",data=df);","c3ed30df":"sns.distplot(df[\"TotalWorkingYears\"],kde=False)\nmean_wr = df[\"TotalWorkingYears\"].mean()\nplt.axvline(mean_wr,c=\"r\",label=\"Mean\")\nplt.legend()\nplt.show()","5172ecc3":"sns.catplot(x=\"JobLevel\",y=\"TotalWorkingYears\",hue=\"Attrition\",data=df,palette=\"Set2\")\nplt.title(\"How job level and total working years effect the attrition\");","b49d1e0f":"sns.distplot(df[\"MonthlyIncome\"],kde=False)\nmean_inc = df[\"MonthlyIncome\"].mean()\nplt.axvline(mean_inc,c=\"r\",label=\"Mean Income\")\nplt.legend()\nplt.show()","4904df3b":"sns.catplot(x=\"JobLevel\",y=\"MonthlyIncome\",data=df)\nplt.title(\"Job level on monthly income\")\nplt.show()","2f8d3f20":"corr = df.corr().loc[\"MonthlyIncome\",\"TotalWorkingYears\"]\nplt.scatter(df[\"MonthlyIncome\"],df[\"TotalWorkingYears\"],label=f\"Corr : {corr}\")\nplt.title(\"Is there any correlation between total working years and income? \")\nplt.xlabel(\"Income\")\nplt.ylabel(\"Total Working Years\")\nplt.legend()\nplt.show()","17b678da":"corr2 = df.corr().loc[\"MonthlyIncome\",\"Age\"]\nplt.scatter(df[\"MonthlyIncome\"],df[\"Age\"],c=\"g\",label=f\"Corr : {corr2}\")\nplt.title(\"Is there any correlation between age and income? \")\nplt.xlabel(\"Income\")\nplt.ylabel(\"Age\")\nplt.legend()\nplt.show()","bbe12089":"sns.countplot(x=\"JobSatisfaction\",hue=\"Attrition\",data=df)\nplt.xticks([0,1,2,3],['Low','Medium','High','Very High'])\nplt.title(\"Job Satisfaction on Attrition\")\nplt.show()","51e2ff84":"sns.countplot(x=\"JobInvolvement\",hue=\"Attrition\",data=df)\nplt.xticks([0,1,2,3],['Low','Medium','High','Very High'])\nplt.title(\"Job Involvement on Attrition\")\nplt.show()","d48a0607":"sns.countplot(x=\"Education\",hue=\"Attrition\",data=df)\nplt.xticks([0,1,2,3,4],[\"Below College\",\"College\",\"Bachelor\",\"Master\",\"Doctor\"])\nplt.title(\"Education Level on Attrition\")\nplt.show()","21f3d57e":"df.select_dtypes(object)","5f2eda25":"df.groupby(\"Department\").mean()[\"Attrition\"].multiply(100).plot.barh()\nplt.title(\"Attrition rate per department\")\nplt.legend()\nplt.show()","be8d4fdd":"sns.catplot(x=\"Attrition\",kind=\"count\",col=\"Gender\",data=df);","656b9a4e":"df.groupby(\"JobRole\").mean()[\"Attrition\"].multiply(100).plot.barh();","120d54d2":"ohe_cols = list(df.select_dtypes(object).columns)\n\ndf = pd.get_dummies(df,columns=ohe_cols,drop_first=True)\ndf.head()","aeb51d08":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier","c19489da":"X = df.drop(\"Attrition\",axis=1).values\ny = df[\"Attrition\"].values","f4f1833b":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=0)\nscaler = MinMaxScaler()\n\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","68f1dd7f":"rf = RandomForestClassifier(random_state=0)\nknn = KNeighborsClassifier()\nlog = LogisticRegression()\nxgb = XGBClassifier(random_state=0)\n\nfor i in [rf, knn, log, xgb]:\n    cv = cross_val_score(i,X_train,y_train,cv=5)\n    print(f\"CV score of {str(i)} : {cv.mean()}\")","bc205e7a":"log_params = {\"penalty\" : [\"l1\", \"l2\", \"elasticnet\", \"none\"],\n              \"C\" : [0.1,1,10]}\ngs1 = GridSearchCV(log,param_grid=log_params,cv=5)\ngs1.fit(X_train,y_train)\nprint(\"Best score : \",gs1.best_score_)\nprint(\"Best parameters : \",gs1.best_params_)","51c536e0":"rf_params = {\"n_estimators\" : [100,150,200,250,300],\n             \"criterion\" : [\"gini\",\"entropy\"],\n             \"max_features\" : [\"auto\", \"sqrt\", \"log2\"],\n             \"max_depth\": list(range(1,11))}\n\ngs2 = GridSearchCV(rf,param_grid=rf_params,cv=5)\ngs2.fit(X_train,y_train)\nprint(\"Best score : \",gs2.best_score_)\nprint(\"Best parameters : \",gs2.best_params_)","51c06517":"clf = LogisticRegression(C=1,penalty=\"l2\")\nclf.fit(X_train,y_train)\nprediction = clf.predict(X_test)","51431a16":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report","9846e106":"# In order to labels aren't in similar count the accuracy score is not enough for us.\n# We will look at precision, recall scores.\n\nprint(\"Accuracy of test : \",accuracy_score(y_test,prediction))","2bae4a32":"plt.figure(figsize=(4,3))\nsns.heatmap(confusion_matrix(y_test,prediction),annot=True,cmap=\"Blues\")\nplt.title(\"Confusion Matrix\");","2274ba22":"print(classification_report(y_test,prediction))","6310ae35":"feature_imp = list(clf.coef_[0])\nfeatures = list(df.drop(\"Attrition\",axis=1).columns)\n\nplt.figure(figsize=(16,10))\nplt.barh(list(range(44)),feature_imp,label=\"Features strength\")\nplt.yticks(list(range(44)),features)\nplt.legend()\nplt.show()","fe342c4c":"### Education \n * Below College\n * College\n * Bachelor\n * Master\n * Doctor","110f73a2":"### Job Involvement \n * Low \n * Medium\n * High\n * Very High","0069491f":"### Let's take a look at importance of features : \n\nThis will help us to understand the this HR Analysis of Attrition.","1683cb19":"### Job Satisfaction\n * Low \n * Medium\n * High\n * Very High","bec3c22e":"As we see Logistic Regression performs better with optimum hyperparameters.."}}