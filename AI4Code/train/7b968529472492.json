{"cell_type":{"716deda9":"code","2641d0d6":"code","54ef81ec":"code","8af500e7":"code","5bfba8a4":"code","5298b393":"code","833abe98":"code","e4068206":"code","45af18c2":"code","292b1481":"code","cb74b1b9":"code","1839673d":"code","0a7ff631":"code","f8ce8d6c":"code","517c4a44":"code","f3016a72":"code","29796c70":"code","0a994c0c":"code","966691c7":"code","ea110c1e":"code","aba04bf3":"code","b43eaf36":"code","7c4d2a0e":"code","06f4b994":"code","19fee67c":"code","120a6911":"code","a8a6d682":"markdown","1d6f9de7":"markdown","4121fcc0":"markdown","19a8abeb":"markdown","35a8cf63":"markdown"},"source":{"716deda9":"import pandas as pd\nimport numpy as np \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","2641d0d6":"train_df= pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/train.csv')\ntest_df= pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/test.csv')","54ef81ec":"train_df.shape, test_df.shape","8af500e7":"train_df.head()","5bfba8a4":"train_df.duplicated().sum()","5298b393":"train_df.info()","833abe98":"test_df.head()","e4068206":"test_df.duplicated().sum()","45af18c2":"test_df.info()","292b1481":"plt.figure(figsize=(10,5))\nsns.countplot(x=\"target\", data=train_df, palette=('magma'))\nplt.show()","cb74b1b9":"num_features = train_df[['cont0', 'cont1', 'cont2', 'cont3', 'cont4', 'cont5', 'cont6', 'cont7', 'cont8', 'cont9', 'cont10']]","1839673d":"num_features.head()","0a7ff631":"num_features.hist(figsize = (11,11), color=\"#008080\")","f8ce8d6c":"plt.figure(figsize = (10,8))\nsns.heatmap(num_features.corr(), annot=True, cmap='magma')\nplt.title('Numerical Features Correlation')\nplt.show()","517c4a44":"cat_features = train_df[['cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7', 'cat8', 'cat9', 'cat10', 'cat11', 'cat12', 'cat13', 'cat14', 'cat15', 'cat16', 'cat17', 'cat18']]","f3016a72":"cat_features.head()","29796c70":"for i in cat_features:\n    plt.figure(figsize=(14,4))\n    train_df[i].value_counts().plot(kind='bar', color=\"#008080\")\n    plt.title(i)\n    plt.show()","0a994c0c":"from sklearn.preprocessing import LabelEncoder\nfor i in train_df.columns:\n    if train_df[i].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(train_df[i].values) + list(test_df[i].values))\n        train_df[i] = lbl.transform(train_df[i].values)\n        test_df[i] = lbl.transform(test_df[i].values)","966691c7":"x = train_df.drop(['target'],axis=1)\ny = train_df['target']","ea110c1e":"from sklearn.preprocessing import StandardScaler\nsc= StandardScaler()\nx_scaled= sc.fit_transform(x)","aba04bf3":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x_scaled, y, test_size=0.30)","b43eaf36":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=200, max_depth=9, random_state=1)\nrf.fit(x_train, y_train)\npredictions = rf.predict(x_test)","7c4d2a0e":"from sklearn.metrics import roc_auc_score\nscore = roc_auc_score(y_test, predictions)\nscore","06f4b994":"rf1 = RandomForestClassifier(n_estimators=200, max_depth=7, random_state=1)\nrf1.fit(x_scaled, y)\npredictions1 = rf1.predict(test_df)","19fee67c":"submission = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/sample_submission.csv', index_col='id')\nsubmission.head()","120a6911":"submission['target'] = rf1.predict_proba(test_df)[:, 1]\nsubmission.to_csv('random_forest.csv')","a8a6d682":"**Let' collate numerical columns and find their distribution**","1d6f9de7":"### **Exploratory Data Analysis**","4121fcc0":"### **Model Building**","19a8abeb":"### **Data Analysis**","35a8cf63":"**Let' collate catagorical columns and find their distribution**"}}