{"cell_type":{"4a89bfe6":"code","a747a0e4":"code","2b2fdf4a":"code","79282f4f":"code","284663f5":"code","eb27251c":"code","67edde4e":"code","b42a3650":"code","c6ab5665":"code","16fa5d43":"code","8faaffd5":"code","b025012a":"code","918ae0db":"code","0444e242":"code","30a2cea6":"code","1edb0547":"code","e7552a76":"code","3bc629c5":"code","7ee1a103":"code","e678f5a0":"code","81e4129a":"code","8d37961b":"code","d47d0f5d":"code","4cf60f1f":"code","d56688dd":"code","61bd1204":"markdown","5012daf8":"markdown","e43bb55e":"markdown"},"source":{"4a89bfe6":"import xgboost as xgb\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sb\nimport matplotlib.pyplot as plt\n\nimport statsmodels.api as sm\nimport scipy.stats as st\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.mlab as mlab\n%matplotlib inline\n\nfrom sklearn import datasets, linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\n#print(os.listdir(\"..\/input\"))","a747a0e4":"def showCorr(df):\n    fig = plt.subplots(figsize = (10,10))\n    sb.set(font_scale=1.5)\n    sb.heatmap(df.corr(),square = True,cbar=True,annot=True,annot_kws={'size': 10})\n    plt.show()","2b2fdf4a":"treino_base = pd.read_csv('..\/input\/dataset_treino.csv')\ntreino = treino_base.copy()\ntreino.describe().T","79282f4f":"teste_base = pd.read_csv('..\/input\/dataset_teste.csv')\nteste = teste_base.copy()\nteste.info()","284663f5":"treino.head()","eb27251c":"sb.countplot(x='ENERGY STAR Score',data=treino)","67edde4e":"featuresTeste = [\n    \"Postal Code\",\n    \"Latitude\",\n    \"Longitude\",\n    \"DOF Gross Floor Area\",\n    \"Year Built\",\n    \"Number of Buildings - Self-reported\",\n    \"Occupancy\",\n    \"Site EUI (kBtu\/ft\u00b2)\",\n    \"Property GFA - Self-Reported (ft\u00b2)\",\n    \"Source EUI (kBtu\/ft\u00b2)\",\n    \"Community Board\",\n    \"Council District\",\n    \"Census Tract\",\n    \"Weather Normalized Site EUI (kBtu\/ft\u00b2)\",\n    \"Weather Normalized Site Electricity Intensity (kWh\/ft\u00b2)\",\n    \"Weather Normalized Source EUI (kBtu\/ft\u00b2)\",\n    \"Weather Normalized Site Natural Gas Use (therms)\",\n    \"Weather Normalized Site Electricity (kWh)\",\n    \"Water Use (All Water Sources) (kgal)\",\n    \"Water Intensity (All Water Sources) (gal\/ft\u00b2)\",\n    \"Total GHG Emissions (Metric Tons CO2e)\",    \n    \"Direct GHG Emissions (Metric Tons CO2e)\",\n    \"Indirect GHG Emissions (Metric Tons CO2e)\",\n    \"Electricity Use - Grid Purchase (kBtu)\",\n    \"Natural Gas Use (kBtu)\",\n    \"Manhattan\", \"Queens\", \"Brooklyn\", \"Staten Island\"]\n\nfeaturesTreino = featuresTeste + [\"ENERGY STAR Score\"]","b42a3650":"def setCity(df):\n    lista = df[\"Borough\"].value_counts()\n    for item in lista.index:\n        df[item] = df[\"Borough\"] == item\n        df[item] = df[item].astype(int)\n    return df","c6ab5665":"def setPostalCode(df):\n    df[\"Postal Code\"] = df[\"Postal Code\"].str.replace(\"-\", \"\")\n    df[\"Postal Code\"] = df[\"Postal Code\"].astype(int)  \n    return df","16fa5d43":"def setMean(df, features):\n    df = df.replace('Not Available',np.nan, regex=True)\n    for item in features:\n        if df[item].dtype == \"object\":\n            df[item] = df[item].astype(float)\n\n    for item in features:\n        df[item] = df[item].fillna(df[item].mean())        \n    \n    return df","8faaffd5":"def setGeneralData(df, features):    \n    df[\"Number of Buildings - Self-reported\"][df[\"Number of Buildings - Self-reported\"] > 30 ] = 30\n    df[\"Number of Buildings - Self-reported\"][df[\"Number of Buildings - Self-reported\"] <= 0] = 1\n    df[\"Occupancy\"][df[\"Occupancy\"] <= 0] = 1\n    df[\"Site EUI (kBtu\/ft\u00b2)\"][df[\"Site EUI (kBtu\/ft\u00b2)\"] <= 0] = 1\n    df[\"Property GFA - Self-Reported (ft\u00b2)\"][df[\"Property GFA - Self-Reported (ft\u00b2)\"] >= 2500000] = 2500000\n    df[\"Source EUI (kBtu\/ft\u00b2)\"][df[\"Source EUI (kBtu\/ft\u00b2)\"] < 1] = 1\n    df[\"Year Built\"][df[\"Year Built\"] < 1800] = 1800\n    df[\"Year Built\"][df[\"Year Built\"] > 2015] = 2015    \n    df = df.round(2)\n    \n    return df","b025012a":"showCorr(treino)","918ae0db":"treino.head()","0444e242":"treino = setPostalCode(treino)\nteste = setPostalCode(teste)\n\ntreino = setCity(treino)\nteste = setCity(teste)\n\ntreino = setMean(treino, featuresTreino)\nteste = setMean(teste, featuresTeste)\n\ntreino = setGeneralData(treino, featuresTreino)\nteste = setGeneralData(teste, featuresTeste)\n\nprint(treino.shape)\nprint(teste.shape)\ntreino = treino.filter(items=featuresTreino)\nteste = teste.filter(items=featuresTeste)\nprint(treino.shape)\nprint(teste.shape)\n\nshowCorr(treino)","30a2cea6":"showCorr(treino)","1edb0547":"treino.dtypes","e7552a76":"X_train, X_test, y_train, y_test = train_test_split(treino.drop(columns=['ENERGY STAR Score']), pd.DataFrame(treino[\"ENERGY STAR Score\"]))","3bc629c5":"finalModel = xgb.XGBClassifier(max_depth=10, learning_rate=0.1, n_estimators=1000, n_jobs=50)\nfinalModel","7ee1a103":"finalModel.fit(X_train, y_train, eval_metric='mae')","e678f5a0":"y_pred = finalModel.predict(X_test)\nprint(\"Mean squared error: %.2f\" % mean_squared_error(y_test, y_pred))\nprint('Variance score: %.2f' % r2_score(y_test, y_pred))","81e4129a":"y_test['ENERGY STAR Score'] = finalModel.predict(X_test).round()\ny_test.classe = y_test[\"ENERGY STAR Score\"].astype(int)\nsb.countplot(x='ENERGY STAR Score',data= y_test)","8d37961b":"teste.head()","d47d0f5d":"envio_final = pd.DataFrame(teste_base[\"Property Id\"])\nenvio_final['score'] = finalModel.predict(teste).round()\nenvio_final['score'] = envio_final[\"score\"].astype(int)\nsb.countplot(x='score',data=envio_final)\nenvio_final.describe().T","4cf60f1f":"envio_final.score[envio_final.score < 1] = 1\nenvio_final.score[envio_final.score > 100] = 100\nsb.countplot(x='score',data=envio_final)","d56688dd":"envio_final.to_csv('final.csv', index=False)","61bd1204":"# NYC Building Energy Benchmarking","5012daf8":"# Generete Model","e43bb55e":"# Preparando Submission"}}