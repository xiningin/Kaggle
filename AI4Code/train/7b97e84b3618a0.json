{"cell_type":{"b3c4498d":"code","abe9df76":"code","cdd53027":"code","99f3609f":"code","0515df30":"code","65a77062":"code","ba1914d8":"code","0ad2f429":"code","304e67b3":"code","d74eb3ee":"code","42530a92":"code","5b720af6":"markdown"},"source":{"b3c4498d":"# Import Packages\nimport numpy as np \nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import log_loss\nimport os","abe9df76":"# Setting paths\nroot_path = '\/kaggle\/input\/tabular-playground-series-jun-2021'\ntrain_path = os.path.join(root_path, 'train.csv')\ntest_path = os.path.join(root_path, 'test.csv')\nsample_sub_path = os.path.join(root_path, 'sample_submission.csv')\n","cdd53027":"# Set seed\nseed = 10","99f3609f":"# Read training data\ndf_train = pd.read_csv(train_path)\n\n# Convert classes to numeric\ndf_train['target'] = df_train['target'].str[-1]","0515df30":"# Target histogram to check class distribution\ndf_train['target'].hist()","65a77062":"# X and y for training set\nX = df_train.iloc[:, 1:-1]\ny = df_train[['target']]\n\n# Check the shape of the dataset\nprint(f'Training set shape: {X.shape}')","ba1914d8":"# Are all columns numeric?\nfor col in X.columns:\n    if df_train[col].dtypes != 'int64':\n        print(col)","0ad2f429":"# Creating validation split\nX_train, X_val, y_train, y_val = train_test_split(X, y,\n                                                    test_size=0.2,\n                                                    stratify=y,\n                                                    random_state=seed)\n\n# Checking split shapes\nprint(f'X_train shape: {X_train.shape}\\nX_test shape: {X_val.shape}')","304e67b3":"# Creating the Random Forest\nrf = RandomForestClassifier(random_state=seed,\n                            n_estimators=1000,\n                           max_depth=4)\n\n# print(y_train.values.ravel().shape)\n\n# Fitting the model to the data\nrf.fit(X_train, y_train.values.ravel())\n\n# predict_proba to get probabilities per class\ny_pred = rf.predict_proba(X_val)\n\n# Evaluation\nlogloss = log_loss(y_val, y_pred)\nprint(f'Log loss: {logloss}')","d74eb3ee":"# Reading test data\ndf_test = pd.read_csv(test_path)\n\n# Creating testing set\nX_test = df_test.iloc[:, 1:]","42530a92":"# Creating predictions to be submitted\npredictions = rf.predict_proba(X_test)\nsub = pd.DataFrame(predictions, columns=['Class_1','Class_2','Class_3','Class_4','Class_5','Class_6','Class_7','Class_8','Class_9'])\nsub = pd.concat([df_test['id'], sub], axis=1)\nsub.head()\n\n# Creating submission\nsub.to_csv('submission.csv', index=False)","5b720af6":"So we've got 200 000 rows and 75 features!"}}