{"cell_type":{"d94ad7b9":"code","e67aa2ce":"code","da347bd1":"code","f2538d3f":"code","42a2971e":"code","2822e16a":"code","03877862":"code","8dda3eb3":"code","28eee418":"code","8ca89a04":"code","17dacd7b":"code","cf092b28":"code","3a938071":"code","9c7a226b":"code","55a21435":"code","cab7365b":"code","599f816d":"code","72380eb6":"code","430a2d1c":"code","5637d2db":"markdown","af7526e9":"markdown"},"source":{"d94ad7b9":"import numpy as np\nimport pandas as pd\nimport os\nimport cv2\nfrom matplotlib import pyplot as plt\n\nfrom tqdm import tqdm\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")","e67aa2ce":"img_dir='..\/input\/tensorflow-great-barrier-reef\/train_images\/video_0'","da347bd1":"train=pd.read_csv('..\/input\/tensorflow-great-barrier-reef\/train.csv')\ntrain","f2538d3f":"train0=train[train['video_id']==0]\nprint(train0['annotations'].unique().tolist()[3])\nprint(len(train0))","42a2971e":"import ast\nstri=train0.loc[100,'annotations'][1:-1]\ndicti = ast.literal_eval(stri)\nprint(dicti)\nprint(dicti['width'])","2822e16a":"DICT0=[]\nfor i in range(len(train0)):\n    if train0.loc[i,'annotations']!='[]':\n        stri=train0.loc[i,'annotations'][1:-1]\n        DICT0+= [ast.literal_eval(stri)]\n    else:\n        DICT0+=[{}]\nprint(DICT0[50:55])","03877862":"impaths=[]\nfor i in range(len(train0)):\n    impaths+=[os.path.join(img_dir,str(i)+'.jpg')]","8dda3eb3":"images0=[]\n#for i in tqdm(range(len(impaths))):\nfor i in tqdm(range(200)):\n    images0+=[cv2.imread(impaths[i])]","28eee418":"#!mkdir source0","8ca89a04":"print(type(DICT0[16]))\nDICT0[16]","17dacd7b":"print(type(DICT0[50]))\nDICT0[50]","cf092b28":"def draw_box(num0):\n    \n    impath=impaths[num0]\n    image=cv2.imread(impath)\n    #H,W=image.shape[0],image.shape[1]\n    #file=impath[0:-4].split('\/')[-1]\n    #print(file, DICT0[num0])\n\n    item = DICT0[num0]       \n    if item!={} and type(item)==dict:\n        x=item['x']\n        y=item['y']\n        w=item['width'] \n        h=item['height']\n        x0=int(x-w\/2)\n        y0=int(y-h\/2)\n        x1=int(x+w\/2)\n        y1=int(y+h\/2)\n\n        cv2.rectangle(image,(x0,y0),(x1,y1),(0,0,255),4) \n        #print('dict')\n\n    elif item!={} and type(item)==tuple:\n        for item2 in item:\n            x=item2['x']\n            y=item2['y']\n            w=item2['width'] \n            h=item2['height']\n            x0=int(x-w\/2)\n            y0=int(y-h\/2)\n            x1=int(x+w\/2)\n            y1=int(y+h\/2)\n\n            cv2.rectangle(image,(x0,y0),(x1,y1),(0,0,255),4)\n            #print('tuple')\n\n        #cv2.imwrite('\/kaggle\/working\/source0\/'+file+'.png',image)        \n        #plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n        #plt.show() \n        \n    return image","3a938071":"images1=[]\n#for i in tqdm(range(len(impaths))):\nfor i in tqdm(range(200)):\n    images1+=[draw_box(i)]","9c7a226b":"fig=plt.figure(figsize=(10,10))\n#plt.axis('off')\nplt.imshow(cv2.cvtColor(images0[16],cv2.COLOR_BGR2RGB))","55a21435":"fig=plt.figure(figsize=(10,10))\n#plt.axis('off')\nplt.imshow(cv2.cvtColor(images1[16],cv2.COLOR_BGR2RGB))","cab7365b":"len(images1)","599f816d":"from matplotlib import animation, rc\nrc('animation', html='jshtml')","72380eb6":"def create_animation(ims):\n    \n    fig=plt.figure(figsize=(12,6))\n    plt.axis('off')\n    im=plt.imshow(cv2.cvtColor(ims[0],cv2.COLOR_BGR2RGB))\n    \n    def animate_func(i):\n        im.set_array(cv2.cvtColor(ims[i],cv2.COLOR_BGR2RGB))\n        return [im]\n\n    return animation.FuncAnimation(fig, animate_func, frames=len(ims), \n                                   interval=1000\/\/8)","430a2d1c":"create_animation(images1[10:70])","5637d2db":"# Animation\nhttps:\/\/matplotlib.org\/stable\/api\/animation_api.html","af7526e9":"# Great Barrier Reef Animation\nhttps:\/\/www.kaggle.com\/stpeteishii\/wind-turbines-yolo-annotation-view"}}