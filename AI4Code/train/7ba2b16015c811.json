{"cell_type":{"023dd236":"code","ac7dcb49":"code","d934a63c":"code","275dc05a":"code","b86e1ce4":"code","fbb5bf55":"code","ca049457":"code","8abb49d4":"code","4dec8ed2":"code","53326518":"code","afad9239":"code","9a399e6f":"code","be54785b":"code","152cba7c":"code","8d91e17e":"code","b5a3ea22":"code","e9f43fb0":"code","3b67522e":"code","7b82fbd5":"code","70296a16":"code","00cc2522":"code","db2c9acf":"code","a1d8d197":"code","af486302":"code","af4eec35":"code","43dfad06":"code","c0852ffa":"code","1da2f564":"code","2b281e9f":"code","d929adac":"code","8eb8c5af":"code","8bd543a2":"code","7a2e99b2":"code","f6397312":"code","f720368e":"code","921696d5":"code","5e968907":"code","829d6b7d":"code","3fc306e3":"code","66f7d256":"code","37d9c956":"code","8df9e1db":"code","ebf3b609":"code","21ed6a1a":"code","f1a3fcf8":"code","f2c5c6a0":"code","56bfda68":"code","37ace749":"code","019853d4":"code","ba55f8a4":"code","abdd7ca8":"code","3dc47c23":"code","b88078b4":"code","db3d277e":"code","b5eaada6":"code","8181abe0":"code","bfac5174":"code","fecde1ed":"code","6d97308a":"code","9b175e6b":"code","98e890d8":"code","698755b0":"code","ac0f53d1":"code","6734f7dd":"code","69a8a486":"code","208903cc":"code","7372b705":"code","46bb073d":"markdown","4c1d2fa9":"markdown","8e1490c1":"markdown","84a50dbc":"markdown","b809fd36":"markdown","67e47e92":"markdown","b8c6fc21":"markdown","54544bcd":"markdown","c2ff067a":"markdown","0f127471":"markdown","9b1efd26":"markdown","9ae9c0f7":"markdown","c85a962f":"markdown","05f167ee":"markdown","7dec7a76":"markdown","ae4c7dde":"markdown","0424bbc5":"markdown","8648eb76":"markdown","727c7e56":"markdown","2e17dd8f":"markdown","4efd92bc":"markdown","e2438128":"markdown","16d00af5":"markdown","2fd0fad6":"markdown","f42d3ea1":"markdown","ffbd1174":"markdown","69319d35":"markdown","c994d835":"markdown","76f410be":"markdown","9bd7016f":"markdown","b98f3108":"markdown","dca643ca":"markdown","28e5cf6c":"markdown","8683f61a":"markdown","7b029593":"markdown","72e9c08f":"markdown","00b3eb94":"markdown","2d801fe1":"markdown","c99380ac":"markdown","8450c569":"markdown","102d15bb":"markdown","625f7c2b":"markdown","c55c0e76":"markdown","d82da3a5":"markdown","6b1b2fe7":"markdown","1061d379":"markdown","6831bc9f":"markdown","83a38183":"markdown","086b1352":"markdown","e41859fd":"markdown","f31539f2":"markdown","2d585df9":"markdown","55b7180d":"markdown","0bcba032":"markdown","83bdaaf2":"markdown","968f5029":"markdown","1398a907":"markdown","9bf5f9b9":"markdown","ddc7fffe":"markdown","a23344cb":"markdown","43967cbf":"markdown","15218d28":"markdown","59a1b53d":"markdown"},"source":{"023dd236":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ac7dcb49":"d_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\nd_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","d934a63c":"d_train.head(2)","275dc05a":"d_train.shape","b86e1ce4":"d_test.shape","fbb5bf55":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","ca049457":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport matplotlib.style as style\nimport plotly.express as px\nimport warnings\nwarnings.filterwarnings('ignore')","8abb49d4":"d_train.describe(include='all').T","4dec8ed2":"d_train.describe()","53326518":"d_test.isnull().sum().sort_values()","afad9239":"d_train['YrSold'] = d_train['YrSold'].apply(str)\nd_train['MoSold'] = d_train['MoSold'].apply(str)\nd_test['YrSold'] = d_test['YrSold'].apply(str)\nd_test['MoSold'] = d_test['MoSold'].apply(str)","9a399e6f":"d_test.columns","be54785b":"# categorical data\ncat_cols=np.array(d_test.columns[d_test.dtypes == object])\n\nfor feature in cat_cols:\n    d_train[feature].fillna(d_train[feature].mode()[0], inplace=True)\n    d_test[feature].fillna(d_test[feature].mode()[0], inplace=True)    \n\n# categorical data\nnum_cols=np.array(d_test.columns[d_test.dtypes != object])\nfor feature in num_cols:\n    d_train = d_train.fillna(0)\n    d_test = d_test.fillna(0)\n    \nd_train = d_train.fillna(\"Other\")\nd_test = d_test.fillna(\"Other\")","152cba7c":"d_train.plot(subplots=True, sharex = True, figsize=(20,50))","8d91e17e":"d_train.corr()['SalePrice'].sort_values(ascending=False)","b5a3ea22":"style.use('ggplot')\nsns.set_style('whitegrid')\nplt.subplots(figsize = (30,30))\n\n## Plotting heatmap. Generate a mask for the lower triangle (taken from seaborn example gallery)\nmask = np.zeros_like(d_train.corr(), dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(d_train.corr(), cmap=sns.diverging_palette(20, 220, n=200), annot=True, mask=mask, center = 0, );\nplt.title(\"Heatmap of all the Features of Train data set\", fontsize = 25);","e9f43fb0":"sns.set(style=\"ticks\")\nx = d_train['SalePrice']\nf, (ax_box, ax_hist) = plt.subplots(2, sharex=True, gridspec_kw={\"height_ratios\": (.15, .85)}, figsize=(12,7))\n\nsns.boxplot(x, ax=ax_box)\nsns.distplot(x, ax=ax_hist)\nplt.axvline(x = x.mean(), c = 'red')\nplt.axvline(x = x.median(), c = 'green')\n\nax_box.set(yticks=[])\nsns.despine(ax=ax_hist)\nsns.despine(ax=ax_box, left=True)\nplt.show()\nprint(\"Skewness: %f\" % d_train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % d_train['SalePrice'].kurt())","3b67522e":"sns.set(style=\"ticks\")\n\nx = (np.log1p(d_train['SalePrice']))\nf, (ax_box, ax_hist) = plt.subplots(2, sharex=True, gridspec_kw={\"height_ratios\": (.15, .85)}, figsize=(12,7))\n\nsns.boxplot(x, ax=ax_box)\nsns.distplot(x, ax=ax_hist)\nplt.axvline(x = x.mean(), c = 'red')\nplt.axvline(x = x.median(), c = 'green')\n\nax_box.set(yticks=[])\nsns.despine(ax=ax_hist)\nsns.despine(ax=ax_box, left=True)\nplt.show()","7b82fbd5":"fig = px.box(d_train, x=\"OverallQual\", y=\"SalePrice\")\nfig.show()","70296a16":"yprop = 'SalePrice'\nxprop = 'OverallQual'\nh= 'LotArea'\npx.scatter(d_train, x=xprop, y=yprop, color=h, marginal_y=\"violin\", marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\")","00cc2522":"yprop = 'SalePrice'\nxprop = 'LotArea'\nh= 'OverallCond'\npx.scatter(d_train, x=xprop, y=yprop, color=h, marginal_y=\"violin\", marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\")","db2c9acf":"d_train = d_train.drop(d_train[(d_train['SalePrice']>740000) & (d_train['SalePrice']<756000)].index).reset_index(drop=True)","a1d8d197":"df = px.data.gapminder()\nfig = px.scatter(d_train, y=\"SalePrice\", x=\"LotArea\", size=\"SalePrice\", color=\"TotalBsmtSF\",\n           hover_name=\"LotArea\", log_x=True, log_y=True, size_max=20)\nfig.show()","af486302":"df = px.data.iris()\nfig = px.scatter(d_train, x=\"1stFlrSF\", y=\"SalePrice\", color=\"GarageCars\", marginal_y=\"violin\",\n           marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\")\nfig.show()","af4eec35":"d_train = d_train.drop(d_train[(d_train['1stFlrSF']>4690) & (d_train['1stFlrSF']<4700)].index).reset_index(drop=True)","43dfad06":"sns.jointplot(data=d_train, x='GrLivArea', y='SalePrice', kind='reg', height=8)","c0852ffa":"d_train = d_train.drop(d_train[(d_train['GrLivArea']>4000) & (d_train['SalePrice']<250000)].index).reset_index(drop=True)","1da2f564":"fig = px.violin(d_train, y=\"SalePrice\", x=\"GarageCars\", color=None, box=True, points=\"all\", hover_data=d_train.columns)\nfig.show()","2b281e9f":"d_train = d_train.drop(d_train[(d_train['GarageCars']>3) & (d_train['SalePrice']<290000)].index).reset_index(drop=True)","d929adac":"fig = px.scatter(d_train, x=\"GarageArea\", y=\"SalePrice\", color=\"OverallCond\", marginal_y=\"violin\",\n           marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\")\nfig.show()","8eb8c5af":"d_train = d_train.drop(d_train[(d_train['GarageArea']>1240) & (d_train['GarageArea']<1400)].index).reset_index(drop=True)","8bd543a2":"plt.figure(figsize=[15,20])\nfeafures = ['LotArea','MSSubClass','OverallQual','OverallCond','ExterQual','ExterCond','BsmtQual','BsmtExposure','BsmtFinType1','BsmtFinType2','HeatingQC','KitchenQual']\nn=1\nfor f in feafures:\n    plt.subplot(6,2,n)\n    sns.boxplot(x=f,y='SalePrice',data = d_train)\n    plt.title(\"Sale Price in function of {}\".format(f))\n    n=n+1\nplt.tight_layout()\nplt.show()","7a2e99b2":"from scipy.stats import ttest_ind\n\ndef Series_stats(var, category, prop1, prop2):\n# Step 1: State the null and alternative hypothesis and select a level of significance is 5% or 0.05\n# Step 2: Collect data and calculate the values of test statistic\n    s1 = d_train[(d_train[category]==prop1)][var]\n    s2 = d_train[(d_train[category]==prop2)][var]\n    t, p = ttest_ind(s1,s2,equal_var = False)\n\n    print(\"Two-sample t-test: t={}, p={}\".format(round(t,5),p))\n# Step 3: Compare the probability associated with the test statistic with level of significance specified\n    if ((p < 0.05) and (np.abs(t) > 1.96)):\n        print(\"\\n REJECT the Null Hypothesis and state that: \\n at 5% significance level, the mean {} of {}-{} and {}-{} are not equal.\".format(var, prop1, category, prop2, category))\n        print(\"\\n YES, the {} of {}-{} differ significantly from {}-{} in the current dataset.\".format(var, prop1, category, prop2, category))\n        print(\"\\n The mean value of {} for {}-{} is {} and for {}-{} is {}\".format(var, prop1, category, round(s1.mean(),2), prop2, category, round(s2.mean(),2)))\n    else:\n        print(\"\\n FAIL to Reject the Null Hypothesis and state that: \\n at 5% significance level, the mean {} of {} - {} and {} - {} are equal.\".format(var, prop1, category, prop2, category))\n        print(\"\\n NO, the {} of {}-{} NOT differ significantly from {}-{} in the current dataset\".format(var, prop1, category, prop2, category))\n        print(\"\\n The mean value of {} for {}-{} is {} and for {}-{} is {}\".format(var, prop1, category, round(s1.mean(),2), prop2, category, round(s2.mean(),2)))","f6397312":"Series_stats('SalePrice','OverallQual',1,10)","f720368e":"Series_stats('SalePrice','LotArea',8450,13175)","921696d5":"Series_stats('SalePrice','Street','Pave', 'Grvl')","5e968907":"d_test.Functional.unique()","829d6b7d":"Check = pd.DataFrame(index=None, columns=['Feature','Missing from Test to Train', 'Items'])\ncols=np.array(d_test.columns[d_test.dtypes == object])\nfor fe in cols:\n    listtrain = d_train[fe]\n    listtest = d_test[fe]\n    Check = Check.append(pd.Series({'Feature':fe, 'Missing from Test to Train': len(set(listtest).difference(listtrain)), 'Items':set(listtest).difference(listtrain) }),ignore_index=True )\nCheck","3fc306e3":"d_train.head(2)","66f7d256":"d_train.isnull().sum()","37d9c956":"d_test.isnull().sum()","8df9e1db":"Check = pd.DataFrame(index=None, columns=['Feature','Missing from Test to Train', 'Items'])\ncols=np.array(d_test.columns[d_test.dtypes == object])\nfor fe in cols:\n    listtrain = d_train[fe]\n    listtest = d_test[fe]\n    Check = Check.append(pd.Series({'Feature':fe, 'Missing from Test to Train': len(set(listtest).difference(listtrain)), 'Items':set(listtest).difference(listtrain) }),ignore_index=True )\nCheck","ebf3b609":"f_train = ['MSSubClass', 'MSZoning', 'LotArea', 'Street','LotShape', 'LandContour', 'Utilities', 'LotConfig',\n           'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'OverallQual', \n           'OverallCond', 'YearBuilt', 'YearRemodAdd', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd',\n           'MasVnrType', 'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure',\n           'BsmtFinType1', 'BsmtFinSF1', 'BsmtFinType2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating', 'HeatingQC', \n           'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF', 'GrLivArea', 'BsmtFullBath', 'FullBath', 'HalfBath', \n           'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual', 'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'GarageType',\n           'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual', 'GarageCond', 'PavedDrive', \n           'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', 'MoSold', 'YrSold', 'SaleType', 'SaleCondition', 'SalePrice']\nf_test = ['MSSubClass', 'MSZoning', 'LotArea', 'Street','LotShape', 'LandContour', 'Utilities', 'LotConfig',\n           'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'OverallQual', \n           'OverallCond', 'YearBuilt', 'YearRemodAdd', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd',\n           'MasVnrType', 'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure',\n           'BsmtFinType1', 'BsmtFinSF1', 'BsmtFinType2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating', 'HeatingQC', \n           'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF', 'GrLivArea', 'BsmtFullBath', 'FullBath', 'HalfBath', \n           'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual', 'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'GarageType',\n           'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual', 'GarageCond', 'PavedDrive', \n           'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', 'MoSold', 'YrSold', 'SaleType', 'SaleCondition']\ndf_train = pd.DataFrame(d_train, columns=f_train)\ndf_test = pd.DataFrame(d_test, columns=f_test)","21ed6a1a":"from scipy.stats import norm, skew\n\nnumeric_feats = df_test.dtypes[df_test.dtypes != 'object'].index\nskewed_feats = df_test[numeric_feats].apply(lambda x: skew(x)).sort_values(ascending=False)\nhigh_skew = skewed_feats[abs(skewed_feats) > 1]\nhigh_skew","f1a3fcf8":"for feature in high_skew.index:\n    df_train[feature] = np.log1p(df_train[feature])\n    df_test[feature] = np.log1p(df_test[feature])","f2c5c6a0":"import copy\ntrain=copy.deepcopy(df_train)\ntest=copy.deepcopy(df_test)\n\ncols=np.array(df_train.columns[df_train.dtypes != object])\nfor i in train.columns:\n    if i not in cols:\n        train[i]=train[i].map(str)\n        test[i]=test[i].map(str)\ntrain.drop(columns=cols,inplace=True)\ntest.drop(columns=np.delete(cols,len(cols)-1),inplace=True)","56bfda68":"df_train.head(3)","37ace749":"from sklearn.preprocessing import LabelEncoder\nfrom collections import defaultdict\n\n# build dictionary function\ncols = np.array(df_train.columns[df_train.dtypes != object])\nd    = defaultdict(LabelEncoder)\n\n# only for categorical columns apply dictionary by calling fit_transform \ntrain = train.apply(lambda x: d[x.name].fit_transform(x))\ntest  = test.apply(lambda x: d[x.name].transform(x))\ntrain[cols] = df_train[cols]\ntest[np.delete(cols,len(cols)-1)]=df_test[np.delete(cols,len(cols)-1)]","019853d4":"train.head(2)","ba55f8a4":"test.head(2)","abdd7ca8":"test['YrBltAndRemod']=test['YearBuilt']+test['YearRemodAdd']\ntest['TotalSF']=test['TotalBsmtSF'] + test['1stFlrSF'] + test['2ndFlrSF']\ntest['Total_sqr_footage'] = (test['BsmtFinSF1'] + test['1stFlrSF'] + test['2ndFlrSF'])\ntest['Total_Bathrooms'] = (test['FullBath'] + (0.5 * test['HalfBath']) +test['BsmtFullBath'] )\ntest['Total_porch_sf'] = (test['OpenPorchSF'] + test['EnclosedPorch'] +test['WoodDeckSF'])\n\ntrain['YrBltAndRemod']=train['YearBuilt']+train['YearRemodAdd']\ntrain['TotalSF']=train['TotalBsmtSF'] + train['1stFlrSF'] + train['2ndFlrSF']\ntrain['Total_sqr_footage'] = (train['BsmtFinSF1']  +train['1stFlrSF'] + train['2ndFlrSF'])\ntrain['Total_Bathrooms'] = (train['FullBath'] + (0.5 * train['HalfBath']) +train['BsmtFullBath'] )\ntrain['Total_porch_sf'] = (train['OpenPorchSF'] + train['EnclosedPorch'] +train['WoodDeckSF'])","3dc47c23":"from sklearn import metrics\nfrom sklearn import model_selection\nfrom sklearn import preprocessing\nfrom sklearn.datasets import make_classification\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost.sklearn import XGBRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor,AdaBoostRegressor,BaggingRegressor, RandomForestRegressor\nimport xgboost as xgb\nimport lightgbm as lgb","b88078b4":"def Errors(model, X_train, y_train, X_test, y_test):\n    ATrS =  model.score(X_train,y_train)\n    ATeS = model.score(X_test,y_test)\n    RMSE = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\n    MSE = mean_squared_error(y_test, y_pred)\n    return ATrS, ATeS, RMSE, MSE","db3d277e":"train.isnull().sum()","b5eaada6":"X = train.drop(columns=['SalePrice']).values\ny = np.log1p(train[\"SalePrice\"])\nZ = test.values\n\nscaler = preprocessing.StandardScaler().fit(X)\nscaler.transform(X) \nscaler.transform(Z)","8181abe0":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.00001, random_state = 12)\nX_train1, X_test1, y_train1, y_test1 = train_test_split(X, y, test_size = 0.25, random_state = 12)","bfac5174":"Acc = pd.DataFrame(index=None, columns=['model','Root Mean Squared  Error','Accuracy on Traing set','Accuracy on Testing set', 'Mean square error'])\nregressors = [['DecisionTreeRegressor',DecisionTreeRegressor()],\n              ['XGBRegressor', XGBRegressor()],\n              ['CatBoostRegressor', CatBoostRegressor(verbose= False)],\n              ['LGBMRegressor',lgb.LGBMRegressor()],\n              ['GradientBoostingRegressor',GradientBoostingRegressor()],\n              ['ExtraTreesRegressor',ExtraTreesRegressor()]]\n\nfor mod in regressors:\n    name = mod[0]\n    model = mod[1]\n    model.fit(X_train1,y_train1)\n    y_pred = model.predict(X_test1)\n    ATrS, ATeS, RMSE, MSE = Errors(model, X_train1, y_train1, X_test1, y_test1)\n    Acc = Acc.append(pd.Series({'model':name, 'Root Mean Squared  Error': RMSE,'Accuracy on Traing set':ATrS,'Accuracy on Testing set':ATeS, 'Mean square error':MSE}),ignore_index=True )\n    \nAcc.sort_values(by='Mean square error')","fecde1ed":"def Graph_prediction(n, y_actual, y_predicted):\n    y = np.exp(y_actual)\n    y_total = np.expm1(y_predicted)\n    number = n\n    aa=[x for x in range(number)]\n    plt.figure(figsize=(25,10)) \n    plt.plot(aa, y[:number], '.', label=\"actual\")\n    plt.plot(aa, y_total[:number], 'o', label=\"prediction\")\n    plt.xlabel('SalePrice prediction of first {} Houses'.format(number), size=15)\n    plt.legend(fontsize=15)\n    plt.show()","6d97308a":"GBR = GradientBoostingRegressor(n_estimators=8000, learning_rate=0.003, max_depth=4, max_features='sqrt', min_samples_leaf=10,\n                                min_samples_split=5, loss='huber', random_state =42)  \n\nGBR.fit(X_train,y_train)\nATrS, ATeS, RMSE, MSE = Errors(GBR, X_train1, y_train1, X_test1, y_test1)\nprint(\"Root Mean Squared: {}, Accuracy Train set: {},Accuracy Test set: {}, Mean square error: {}\".format(RMSE, ATrS, ATeS, MSE))\nresult1 = GBR.predict(Z)","9b175e6b":"from sklearn.model_selection import GridSearchCV\ngbr = GradientBoostingRegressor()\nparams = {'loss': ['ls','huber'], \n          'learning_rate': [0.01, 0.012, 0.015], \n          'max_depth': [2, 3, 4], \n          'min_samples_leaf' : [9, 10, 12],\n          'min_samples_split' : [2, 3, 4]}\n#gs = GridSearchCV(estimator = gbr, param_grid = params, scoring = 'explained_variance', cv = 10, n_jobs = -1)\n#gs.fit(X_train,y_train)\n#print(\"Best Score:\", gs.best_score_)\n#print(\"Best Parameters :\",gs.best_params_)","98e890d8":"from catboost import CatBoostRegressor\nimport numpy as np\n\ntrain_data = X_train\ntrain_labels = y_train\n\nmodel = CatBoostRegressor()\n\ngrid = {'iterations': [7000, 8000],'learning_rate': [0.001, 0.0045, 0.01, 0.1],\n        'depth': [2, 3, 4],'l2_leaf_reg': [1, 2],'random_seed': [12]}\n\n#grid_search_result = model.grid_search(grid, X=train_data, y=train_labels, plot=True)","698755b0":"params = {'iterations': 12000,'learning_rate': 0.008,'depth': 6,'l2_leaf_reg': 2,'eval_metric':'RMSE',\n          'verbose': False,'random_seed': 12}\n         \nCBR = CatBoostRegressor(**params)\nCBR.fit(X_train,y_train)\n\nATrS, ATeS, RMSE, MSE = Errors(CBR, X_train1, y_train1, X_test1, y_test1)\nprint(\"Root Mean Squared: {}, Accuracy Train set: {},Accuracy Test set: {}, Mean square error: {}\".format(RMSE, ATrS, ATeS, MSE))\nresult2 = CBR.predict(Z)","ac0f53d1":"import xgboost as xgb\nfrom bayes_opt import BayesianOptimization\nfrom sklearn.metrics import mean_squared_error\n\ndtrain = xgb.DMatrix(X_train, label=y_train)\ndtest = xgb.DMatrix(X_test)\n\ndef xgb_evaluate(learning_rate, max_depth, gamma, subsample, colsample_bytree, reg_alpha):\n    params = {'learning_rate':learning_rate,\n              'max_depth': int(max_depth),\n              'gamma': gamma,\n              'subsample':subsample,\n              'colsample_bytree': colsample_bytree,\n              'reg_alpha':reg_alpha}\n    cv_result = xgb.cv(params, dtrain, num_boost_round=100, nfold=3)    \n    \n    # Bayesian optimization only knows how to maximize, not minimize, so return the negative RMSE\n    return -1.0 * cv_result['test-rmse-mean'].iloc[-1]\nmodel = xgb.XGBRegressor()\noptimizer = BayesianOptimization(xgb_evaluate, {'learning_rate':(0.005, 0.03),\n                                                'max_depth':(2, 4),\n                                                'gamma':(0., 0.3),\n                                                'subsample':(0.5,1),\n                                                'colsample_bytree':(0.3,0.8),\n                                                'reg_alpha':(0.005, 0.02)})\n# Use the expected improvement acquisition function to handle negative numbers\n# Optimally needs quite a few more initiation points and number of iterations\n#optimizer.maximize(init_points=5, n_iter=15)\n#optimizer.max","6734f7dd":"XGBR = xgb.XGBRegressor(colsample_bytree=0.46, gamma=0.047, learning_rate=0.05, max_depth=4, min_child_weight=1.8, \n                 n_estimators=5000,reg_alpha=0.46, reg_lambda=0.85,subsample=0.52, random_state = 7, nthread = -1)\n\nXGBR.fit(X_train,y_train)\n    \nATrS, ATeS, RMSE, MSE = Errors(XGBR, X_train1, y_train1, X_test1, y_test1)\nprint(\"Root Mean Squared: {}, Accuracy Train set: {},Accuracy Test set: {}, Mean square error: {}\".format(RMSE, ATrS, ATeS, MSE))\nresult3 = XGBR.predict(Z)","69a8a486":"LGBMR = lgb.LGBMRegressor(objective='regression', num_leaves=5,learning_rate=0.01, n_estimators=4000,max_bin=200, \n                         bagging_fraction=0.8,bagging_freq=4, bagging_seed=8,feature_fraction=0.2,feature_fraction_seed=10,\n                         min_sum_hessian_in_leaf = 15,verbose=-1,random_state=12)\nLGBMR.fit(X_train,y_train)\n    \nATrS, ATeS, RMSE, MSE = Errors(LGBMR, X_train1, y_train1, X_test1, y_test1)\nprint(\"Root Mean Squared: {}, Accuracy Train set: {},Accuracy Test set: {}, Mean square error: {}\".format(RMSE, ATrS, ATeS, MSE))\nresult4 = LGBMR.predict(Z)","208903cc":"Graph_prediction(300, y_train, GBR.predict(X_train))","7372b705":"result = np.expm1((result1 + result2 + result3 + result4)\/4)\nsub = pd.DataFrame()\nsub = pd.DataFrame({'Id':d_test.Id,'SalePrice':result}) \nsub.to_csv('submission.csv',index=False)\nsub.head(3)","46bb073d":"# Section I: DATA PREPROCESSING & EDA","4c1d2fa9":"# 4. Statistical (if any)","8e1490c1":"# (a) SalePrice\n- the property's sale price in dollars. This is the target variable that we are trying to predict.\n\nDistribution plots are very useful to check how well a variable is distributed in the dataset. Let\u2019s now produce a distribution plot using the \u2018distplot\u2019 combined with the 'boxplot' function to check the distribution of the \u2018SalePrice\u2019 variable in the dataset.","84a50dbc":"Now, we fill all NaN values (on the numerical columns) using the mean value of corresponding columns, by applying the fillna, and do not forget to implement the same action on the test data set.","b809fd36":"Street: Type of road access","67e47e92":"In this Kernel, we do not discuss in deep about the Models' parameters, we just applied the standard or refer to previous recommendations. Let's copy the database.","b8c6fc21":"We could observe that: 'LowQualFinSF', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'KitchenAbvGr', '3SsnPorch', 'PoolArea', 'MiscVal' are VERY unbalanced, and we shoudl to find out a solution to handle with these columns in the modeling section.","54544bcd":"# (e) 1stFlrSF: \nFirst Floor square feet","c2ff067a":"# 2. Data cleaning: dealing with NaN or Null or missing data\n\nIn this step, we start with removing all the null\/NaN values that contain in our dataset. We can do this in Python using the \u2018dropna\u2019 function. We have different approaches to dealing with missing data, in this work, we assumpte that:\n\n+ We will drop all columns where the data missing ratio > 20%. We could observe below that \"Alley\", \"FireplaceQu\", \"Fence\", \"MiscFeature\", \"PoolQC\" are probaly the 5 first columns we will remove. Also, \"LotFrontage\" could be the next column that we have to consider.\n+ Dealing with the numerical missing data by replacing column's mean value, and the object columns will be considered in the next section.","0f127471":"Now, importing some basic Librairies we might use ...","9b1efd26":"# 1. Importing Data and Libraries","9ae9c0f7":"# Baseline Models (Regressor)","c85a962f":"# 1. Feature Selection, data handling\n\nAs we said before, in this process we are going to define the \u2018X_train\u2019 variable (independent variable) and the \u2018y_train\u2019 variable (dependent variable). After defining the variables, we will use them to split the data into a train set and test set. Splitting the data can be done using the \u2018train_test_split\u2019 function provided by scikit-learn in Python.","05f167ee":"Based on the summary above, we have total 1460 rows of data, 80 and 81 columns for the test and the data sets. Before we get into dealing with missing data, we will explore our dataset:\n\n+ We have to check which one have impact on the target value?\n+ But, wow ! 80 columns, so we would love to show all columns and rows, because it's easier to follow & check, by setting the following ...","7dec7a76":"Now, let see our final results on data processing results !","ae4c7dde":"Now, using the \u2018describe\u2019 function we can get a statistical view of the data like mean, median, standard deviation, and so on.","0424bbc5":"Now, we feel better with the current dataset and take a look over the data trend by using the subplots ...","8648eb76":"Now, check to confirm again, if there is any NaN or missing value in the datasets!","727c7e56":"# Data Visualization\n\nIn this process, we are going to produce three different types of charts including heatmap, scatter plot, and a distribution plot. Heatmaps are very useful to find relations between two variables in a dataset. Heatmap can be easily produced using the \u2018heatmap\u2019 function provided by the seaborn package in python.","2e17dd8f":"# (c) OverallCond: \nOverall condition rating","4efd92bc":"Like heatmap, a scatter plot is also used to observe linear relations between two variables in a dataset. In a scatter plot, the dependent variable is marked on the x-axis and the independent variable is marked on the y-axis. In our case, the \u2018SalePrice\u2019 attribute is the dependent variable, and every other are the independent variables.","e2438128":"Hyperparameter tuning has to with setting the value of parameters that the algorithm cannot learn on its own. As such, these are constants that you set as the researcher. The problem is that you are not any better at knowing where to set these values than the computer. Therefore, the process that is commonly used is to have the algorithm use several combinations  of values until it finds the values that are best for the model. Having said this, there are several hyperparameters we need to tune, and they are as follows.\n\n+ number of estimators: The number of estimators is show many trees to create. The more trees the more likely to overfit. \n+ learning rate: The learning rate is the weight that each tree has on the final prediction.\n+ subsample: Subsample is the proportion of the sample to use.\n+ max depth: Max depth was explained previously.\n\nWhat we will do now is make an instance of the GradientBoostingRegressor. Next, we will create our grid with the various values for the hyperparameters. We will then take this grid and place it inside GridSearchCV function so that we can prepare to run our model.","16d00af5":"At this stage, we decided to select 61 variables and remove all following columns from the model: 'LowQualFinSF', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'KitchenAbvGr', '3SsnPorch', 'PoolArea', 'MiscVal'.","2fd0fad6":"# 4. Model's Parameters tuning","f42d3ea1":"Using the \u2018read_csv\u2019 function provided by the Pandas package, we can import the data into our python environment. After importing the data, we can use the \u2018head\u2019 function to get a glimpse of our dataset.","ffbd1174":"# 6. Submission","69319d35":"# (k) LotArea: \nLot size in square feet and other variables.","c994d835":"# Section II: HOUSE PRICE MODEL","76f410be":"Yes, we could confirm our observation above in this Table.","9bd7016f":"The missing values are very similar in both datasets. So, we decide to remove 5 columns in both datasets.","b98f3108":"Take a deepcopy on both full datasets, and then map all objects columns by applying the map(str) function.","dca643ca":"Define the errors function, that help to calculate the accuracy of each model.","28e5cf6c":"As recommended by the author of the data, Outlinear in the GrLivArea should be removed. The author stated that \u201cI would recommend removing any houses with more than 4000 square feet from the data set (which eliminates these five unusual observations) before assigning it to students.\u201d It makes sense that people would pay for the more living area. What doesn't make sense is the two datapoints in the bottom-right of the plot. We need to take care of this! What we will do is remove these outliers manually.","8683f61a":"# (d) TotalBsmtSF: \nTotal square feet of basement area","7b029593":"Now, check again to make sure before going to the next step.","72e9c08f":"# (f) GrLivArea: \nAbove grade (ground) living area square feet","00b3eb94":"# 3. Data Spliting: Training and Testing\n\nWe split our dataset into training, testing data with a 90:10 split ratio (As learned from school, this ratio should be 70:30 or 80:20, but we experience here this ratio is better :) ). The splitting was done by picking at random which results in a balance between the training data and testing data amongst the whole dataset. This is done to avoid overfitting and enhance generalization. Finaly, we selected 61 characters in the dataset to train the model.","2d801fe1":"# (b) OverallQual: \nOverall material and finish quality","c99380ac":"Suprising! 4-car garages result in less Sale Price? That doesn't make much sense. Let's remove these outliers.","8450c569":"As the OverallQua increases, price of the houses also increase. That makes sense.","102d15bb":"But, we have to import Libaries for this section first !","625f7c2b":"We \"feel\" MUCH BETTER with the conversion of SalePrice into LOGARITH function, it's NOT PERFECT yet, but this is one of the simplest way to obtain a NORMAL DISTRIBUTION funtion, so we will apply this in the next section do train the model in the modeling section. ","c55c0e76":"(b) Does the SalePrice of LotArea (Lot size in square feet) 8450 and 13175 sqf are equal?","d82da3a5":"+ Red line in histogram indicates the mean of the SalePrice and the Green line indicates the median.\n+ Looking at the kurtosis score, we can see that there is a very nice peak. However, looking at the skewness score, we can see that the SalePrices deviate from the normal distribution. \n+ We want our data to be as \"normal\" as possible. This is just because the Machine Learning DOES  LIKE ONLY the NORMAL DISTRIBUTION.\n+ For conclusion, this is a right skewed distribution or called a positive skew distribution. That\u2019s because the tail is longer on the positive direction of the number line. A histogram is right skewed if the peak of the histogram veers to the left. Therefore, the histogram\u2019s tail has a positive skew to the right.\n\nLet's check a simplest way to correct the distribution of SalePrice by taking logarithm of the value.","6b1b2fe7":"# 7. Conclusion\n\nThis Kernel investigates different models for housing price prediction. Different types of Machine Learning methods including CatBoostRegressor, GradientBoostingRegressor and LightGBM and two techniques in machine learning are compared and analyzed for optimal solutions. Eventhough all of those methods achieved desirable results, different models have their own pros and cons. \n\nThe GradientBoostingRegressor is probably the best one and has been selected for this problem. The BayesianOptimization method is simple but performsa lot better than the three other availabel methods due to the generalization.\n\nFinally, the CatBoostRegressor is the best choice when parametrerization is the top priority.","1061d379":"# 2. Data Labeling\n\nAs you might know by this setp, we can\u2019t have text in our data if we\u2019re going to run any kind of model on it. So before we can run a model, we need to make this data ready for the model and to convert this kind of categorical text data into model-understandable: \"numerical data\", we use the Label Encoder class.","6831bc9f":"In the first setp, all missing values in the object column are replace with the most common value in the column.","83a38183":"NOT BAD at ALL !\n\nYEAH ! We concluded some first observations that the SALEPRICE seem to be strongly-POSITIVE correlated to:\n\n+ OverallQual\n+ TotalBsmtSF\n+ 1stFlrSF\n+ GrLivArea\n+ GarageCars, and\n+ GarageArea\n\nwhich means that as one variable increases, the SalePrice value also increases. OK, let's stop here to select these variables to analyse, there are probably other variable that should be considered in deep.\n\nThe main issue of the current problem is to be the choice of the right FEATURES and related to the TARGET value and NOT only the definition of complex relationships between them, we will discuss deeper in the next section.","086b1352":"So now, we have train data, test data. After fitting our data to different models we can check the score of our data and the prediction is MUCH LOWER than our aim of 90%. So how do we achieve that target?\n\nIn this Kernel, we used a different method, which is very important for weak prediction models such as this. This might seem to be a bit advanced but if understood is a really brilliant tool to enable better predictions.\n\nFor building a prediction model, many experts use Gradient Boosting regression, CatbootRegressor, ... and we will check these models in the next section.\n\nFor illustration purpose, we defined a function to compare the acutal and predicted SalePrice on the same Graphic.","e41859fd":"+ As we can see from all the above representation that many factors are affecting the prices of the house, like square feet which increases the price of the house and even location influencing the prices of the house.\n+ Now that we are familiar with all these representation and can tell our own story let us move and create a model to which would predict the price of the house based upon the other factors. ","f31539f2":"In this section, we will check some hypothesis on the influence of independent variables on the target parameter. \n+ Hypothesis is checked at level of signidicant of 5%\n+ Test statistic parameters are calculated using the ttest_ind from scipy.stats Library.","2d585df9":"We could see that, there are two main groups of correlated variables: POSITIVE and NEGATIVE.\nNow, we want to see something more beautiful, such as graphics. ","55b7180d":"Again with the top & bottom two data-points. Let's remove these outliers.","0bcba032":"# 3. Data visualization, variable correlations: key variable parameters?","83bdaaf2":"# Introduction\n\nEstimating the sale prices of houses is one of the basic projects to have on our Data Science CV. By finishing this Kernel, we will be able to predict continuous variables using various types of regressor algorithm. In this work, we want to perform the steps of data analysis and build a House price prediction model in the simplest, easiest and straight way, according to which:\n\n+ Understand the problem: We will look at each variable and analyze philosophy about their meaning and importance to this problem.\n\n+ We'll focus on 'SalePrice' variable and try to know a little more about it, making the simplest adjustment to be able to apply basic Machine Learning.\n\n+ Independent variable: we will try to understand the relationship of the dependent variable and the independent variable.\n\n+ Basic data cleaning: We will clean up the data set and process the missing data, outliers and categorize variables. We don't go in the same direction as all the other Kagglers did by merging the train set and the test set BUT we do separately, assuming the test set is unknown, the cleaning goal of the test data set is just to prediction manipulation is performed.\n\n+ Statists: We will check to see if our data meets the assumptions required by most variable multivariate techniques.\n\n# Now, it's time to have fun!","968f5029":"We use train data and test data: train data to train our machine and test data to see if it has learnt the data well or not.\n\nAnd DO NOT forget to fixing \"skewed\" features. Here, we fix all of the skewed data to be more normal so that our models will be more accurate when making predictions: HOPELY :)\n\nAnd, we create a DataFrame to store all the calculation results, including model name and errors.","1398a907":"# (h) GarageArea: \nSize of garage in square feet","9bf5f9b9":"# (g) GarageCars: \nSize of garage in car capacity","ddc7fffe":"Now, Quick check on the test data set ...","a23344cb":"One of our most time consuming operations when doing this Kernel is processing the data in order to perform House-price prediction step using the testdataset. There are a lot of null or NaN values or object variables present in the test file that don't appear in the train file and we got errors during LabelEncoding or final prediction step. That is why, we proceed to the next step: checking the difference between train set and test data set.","43967cbf":"Before processing null values in the object columns, we try to check the correlation between SalePrice and all other numerical variables by using the corr() function:","15218d28":"We are going to break everything into logical steps that allow us to ensure the cleanest, most realistic data for our model to make accurate predictions from. The layout of the Notebook is summarized as below:\n\n# Section I: DATA PREPROCESSING & EDA\n\n1. Importing Data and Libraries\n2. Data cleaning: dealing with NaN or Null or missing data\n3. Data visualization, variable correlations: key variable parameters?\n4. Statistical (if any)\n\n# Section II: HOUSE PRICE MODEL\n\n1. Feature Selection, data handling & data Split\n2. Data Labeling\n3. Data spliting: training and testing\n4. Selected \"Best Model\"\n5. Model's Parameters tuning\n6. Submission\n7. Conclusion","59a1b53d":"(a) Doe the SalePrice of House that OverallQual of 1 and 2 are equal?"}}