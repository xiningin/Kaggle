{"cell_type":{"14446de3":"code","4636481d":"code","9c9e2b61":"code","fc8670d9":"code","3549a1a7":"code","477cc48a":"code","db2e975d":"code","5127afbf":"code","8256cc71":"code","cb8883b2":"code","2ec69154":"code","eab1f95b":"code","cf506047":"code","671b5a49":"code","f4f2e834":"code","27b60ac4":"code","4eeaeebf":"code","6034c976":"code","e222f2e3":"code","43dff5cb":"code","88667dbc":"code","752a1b39":"code","a03cf4a2":"code","486ad901":"markdown","6349759c":"markdown","97aba705":"markdown","5b274361":"markdown","72caf5b4":"markdown","27640266":"markdown","2799630d":"markdown","8028ba7e":"markdown","8b0d0134":"markdown","02c9f89d":"markdown","5c54c630":"markdown","90bf02cf":"markdown","6ce8b223":"markdown","1e511f8c":"markdown","4e732d3c":"markdown","c24ee3de":"markdown","245e50d4":"markdown","0d1783a3":"markdown","46713989":"markdown","0f3b172f":"markdown","8c347c7c":"markdown","d2fdb75b":"markdown","8ad51ba8":"markdown","f71644a4":"markdown","87398fae":"markdown","8df03a92":"markdown","4131cfa7":"markdown"},"source":{"14446de3":"!pip install toloka-kit==0.1.7\n!pip install crowd-kit==0.0.4\n!pip install pandas\n!pip install ipyplot\n\nimport datetime\nimport os\nimport sys\nimport time\nimport logging\n\nimport ipyplot\nimport pandas\nimport numpy as np\n\nimport toloka.client as toloka\nimport toloka.client.project.template_builder as tb\nfrom crowdkit.aggregation import DawidSkene\n\nlogging.basicConfig(\n    format='[%(levelname)s] %(name)s: %(message)s',\n    level=logging.INFO,\n    stream=sys.stdout,\n)","4636481d":"toloka_client = toloka.TolokaClient(input(\"Enter your token:\"), 'PRODUCTION')  # Or switch to 'SANDBOX'\nprint(toloka_client.get_requester())","9c9e2b61":"project = toloka.Project(\n    assignments_issuing_type='AUTOMATED',\n    public_name='Is it a cat or a dog?',\n    public_description='Look at the picture and decide whether there is a cat or a dog.',\n)","fc8670d9":"image_viewer = tb.ImageViewV1(url=tb.InputData(path='image'), ratio=[1, 1], rotatable=True)\n\nradio_group_field = tb.ButtonRadioGroupFieldV1(\n    data=tb.OutputData(path='result'),\n    validation=tb.RequiredConditionV1(hint='choose one of the options'),\n    options=[\n        tb.GroupFieldOption(label='Cat', value='cat'),\n        tb.GroupFieldOption(label='Dog', value='dog'),\n        tb.GroupFieldOption(label='Other', value='other'),\n    ]\n)\n\ntask_width_plugin = tb.TolokaPluginV1(\n    layout=tb.TolokaPluginV1.TolokaPluginLayout(\n        kind='scroll', \n        task_width=500,\n    )\n)\n\nhot_keys_plugin = tb.HotkeysPluginV1(\n    key_1=tb.SetActionV1(data=tb.OutputData(path='result'), payload='cat'),\n    key_2=tb.SetActionV1(data=tb.OutputData(path='result'), payload='dog'),\n    key_3=tb.SetActionV1(data=tb.OutputData(path='result'), payload='other'),\n)\n\nproject_interface = toloka.project.view_spec.TemplateBuilderViewSpec(\n    config=tb.TemplateBuilder(\n        view=tb.ListViewV1(items=[image_viewer, radio_group_field]),\n        plugins=[task_width_plugin, hot_keys_plugin],\n    )\n)","3549a1a7":"input_specification = {'image': toloka.project.field_spec.UrlSpec()}\noutput_specification = {'result': toloka.project.field_spec.StringSpec()}\n\nproject.task_spec = toloka.project.task_spec.TaskSpec(\n    input_spec=input_specification,\n    output_spec=output_specification,\n    view_spec=project_interface,\n)","477cc48a":"project.public_instructions = \"\"\"<p>Decide what category the image belongs to.<\/p>\n<p>Select \"<b>Cat<\/b>\" if the picture contains one or more cats.<\/p>\n<p>Select \"<b>Dog<\/b>\" if the picture contains one or more dogs.<\/p>\n<p>Select \"<b>Other<\/b>\" if:<\/p>\n<ul><li>the picture contains both cats and dogs<\/li>\n<li>the picture is a picture of animals other than cats and dogs<\/li>\n<li>it is not clear whether the picture is of a cat or a dog<\/li>\n<\/ul>\"\"\"","db2e975d":"project = toloka_client.create_project(project)","5127afbf":"pool = toloka.Pool(\n    project_id=project.id,\n    # Give the pool any convenient name. You are the only one who will see it.\n    private_name='Pool 1',\n    may_contain_adult_content=False,\n    # Set the price per task page.\n    reward_per_assignment=0.01,\n    will_expire=datetime.datetime.utcnow() + datetime.timedelta(days=365),\n    # Overlap. This is the number of users who will complete the same task.\n    defaults=toloka.Pool.Defaults(default_overlap_for_new_task_suites=3),\n    # Time allowed for completing a task page\n    assignment_max_duration_seconds=600,\n)","8256cc71":"pool.filter = toloka.filter.Languages.in_('EN')","cb8883b2":"pool.quality_control.add_action(\n    collector=toloka.collectors.Income(),\n    conditions=[toloka.conditions.IncomeSumForLast24Hours >= 20],\n    action=toloka.actions.RestrictionV2(\n        scope=toloka.user_restriction.UserRestriction.PROJECT,\n        duration=1,\n        duration_unit='DAYS',\n        private_comment='No need more answers from this performer',\n    )\n)\n\npool.quality_control.add_action(\n    collector=toloka.collectors.SkippedInRowAssignments(),\n    conditions=[toloka.conditions.SkippedInRowCount >= 10],\n    action=toloka.actions.RestrictionV2(\n        scope=toloka.user_restriction.UserRestriction.PROJECT,\n        duration=1,\n        duration_unit='DAYS',\n        private_comment='Lazy performer',\n    )\n)\n\npool.quality_control.add_action(\n    collector=toloka.collectors.MajorityVote(answer_threshold=2, history_size=10),\n    conditions=[\n        toloka.conditions.TotalAnswersCount >= 4,\n        toloka.conditions.CorrectAnswersRate < 75,\n    ],\n    action=toloka.actions.RestrictionV2(\n        scope=toloka.user_restriction.UserRestriction.PROJECT,\n        duration=10,\n        duration_unit='DAYS',\n        private_comment='Too low quality',\n    )\n)\n\npool.quality_control.add_action(\n    collector=toloka.collectors.GoldenSet(),\n    conditions=[\n        toloka.conditions.GoldenSetCorrectAnswersRate < 60.0,\n        toloka.conditions.GoldenSetAnswersCount >= 3\n    ],\n    action=toloka.actions.RestrictionV2(\n        scope=toloka.user_restriction.UserRestriction.PROJECT,\n        duration=10,\n        duration_unit=toloka.user_restriction.DurationUnit.DAYS,\n        private_comment='Golden set'\n    )\n)","2ec69154":"pool.set_mixer_config(\n    real_tasks_count=9,\n    golden_tasks_count=1,\n    training_tasks_count=0\n)","eab1f95b":"pool = toloka_client.create_pool(pool)","cf506047":"!curl https:\/\/tlk.s3.yandex.net\/dataset\/cats_vs_dogs\/toy_dataset.tsv --output dataset.tsv\n\ndataset = pandas.read_csv('dataset.tsv', sep='\\t')\n\nprint(f'\\nDataset contains {len(dataset)} rows\\n')\n\ndataset = dataset.sample(frac=1).reset_index(drop=True)\n\nipyplot.plot_images(\n    images=[row['url'] for _, row in dataset.iterrows()],\n    labels=[row['label'] for _, row in dataset.iterrows()],\n    max_images=12,\n    img_width=300,\n)","671b5a49":"golden_dataset, task_dataset = np.split(dataset, [15], axis=0)","f4f2e834":"golden_tasks = [\n    toloka.task.Task(\n        pool_id=pool.id,\n        input_values={'image': row['url']},\n        known_solutions = [\n            toloka.task.BaseTask.KnownSolution(\n                output_values={'result': row['label']}\n            )\n        ],\n        infinite_overlap=True,\n    )\n    for i, row in golden_dataset.iterrows()\n]","27b60ac4":"tasks = [\n    toloka.task.Task(\n        pool_id=pool.id,\n        input_values={'image': url},\n    )\n    for url in task_dataset['url']\n]","4eeaeebf":"created_tasks = toloka_client.create_tasks(golden_tasks + tasks, allow_defaults=True)\nprint(len(created_tasks.items))","6034c976":"pool = toloka_client.open_pool(pool.id)\nprint(pool.status)","e222f2e3":"pool_id = pool.id\n\ndef wait_pool_for_close(pool_id, minutes_to_wait=1):\n    sleep_time = 60 * minutes_to_wait\n    pool = toloka_client.get_pool(pool_id)\n    while not pool.is_closed():\n        op = toloka_client.get_analytics([toloka.analytics_request.CompletionPercentagePoolAnalytics(subject_id=pool.id)])\n        op = toloka_client.wait_operation(op)\n        percentage = op.details['value'][0]['result']['value']\n        print(\n            f'   {datetime.datetime.now().strftime(\"%H:%M:%S\")}\\t'\n            f'Pool {pool.id} - {percentage}%'\n        )\n        time.sleep(sleep_time)\n        pool = toloka_client.get_pool(pool.id)\n    print('Pool was closed.')\n\nwait_pool_for_close(pool_id)","43dff5cb":"answers = []\n\nfor assignment in toloka_client.get_assignments(pool_id=pool_id, status='ACCEPTED'):\n    for task, solution in zip(assignment.tasks, assignment.solutions):\n        answers.append([task.input_values['image'], solution.output_values['result'], assignment.user_id])\n\nprint(f'answers count: {len(answers)}')","88667dbc":"# Prepare dataframe\nanswers_df = pandas.DataFrame(answers, columns=['task', 'label', 'performer'])\n# Run aggregation\npredicted_answers = DawidSkene(n_iter=20).fit_predict(answers_df)\n\nprint(predicted_answers)","752a1b39":"predicted_answers = predicted_answers.sample(frac=1)\nimages = predicted_answers.index.values\nlabels = predicted_answers.values\nstart_with = 0","a03cf4a2":"if start_with >= len(predicted_answers):\n    print('no more images')\nelse:\n    ipyplot.plot_images(\n        images=images[start_with:],\n        labels=labels[start_with:],\n        max_images=12,\n        img_width=300,\n    )\n\n    start_with += 12","486ad901":"Aggregation results using the Dawid-Skene model","6349759c":"\u0421reate toloka-client instance. All api calls will go through it. More about OAuth token in our [Learn the basics example](https:\/\/github.com\/Toloka\/toloka-kit\/tree\/main\/examples\/0.getting_started\/0.learn_the_basics) [![Open In Colab](https:\/\/colab.research.google.com\/assets\/colab-badge.svg)](https:\/\/colab.research.google.com\/github\/Toloka\/toloka-kit\/blob\/main\/examples\/0.getting_started\/0.learn_the_basics\/learn_the_basics.ipynb)","97aba705":"Create task interface","5b274361":"## Creating new project","72caf5b4":"Select English-speaking performers","27640266":"Get responses\n\nWhen all the tasks are completed, look at the responses from performers.","2799630d":"# Image binary classification via Toloka (crowdsourcing aproach)\n","8028ba7e":"Prepare environment and import all we'll need.","8b0d0134":"Set data specification. And set task interface to project.","02c9f89d":"Look at the results.\n\nSome preparations for displaying the results","5c54c630":"## Pool creation\nSpecify the [pool parameters.](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/pool_poolparams.html)","90bf02cf":"Create control tasks. In small pools, control tasks should account for 10\u201320% of all tasks.\n\nTip. Make sure to include different variations of correct responses in equal amounts.","6ce8b223":"Note: The cell below can be run several times.","1e511f8c":"Upload tasks","4e732d3c":"Specify\tthe number of tasks per page. For example: 9 main tasks and 1 control task.","c24ee3de":"## Preparing and uploading tasks\n\nThis example uses a small data set with images.\n\nThe dataset used is collected by Toloka team and distributed under a Creative Commons Attribution 4.0 International license\n[![License: CC BY 4.0](https:\/\/img.shields.io\/badge\/License-CC%20BY%204.0-lightgrey.svg)](https:\/\/creativecommons.org\/licenses\/by\/4.0\/).\n\nDataset looks like:\n<table  align=\"center\">\n  <tr><td>\n    <img src=\"https:\/\/github.com\/Toloka\/toloka-kit\/blob\/main\/examples\/1.computer_vision\/image_classification\/img\/dataset_preview.png?raw=true\"\n         alt=\"Dataset preview\"  width=\"1000\">\n  <\/td><\/tr>\n  <tr><td align=\"center\">\n    <b>Figure 2.<\/b> Dataset preview.\n  <\/td><\/tr>\n<\/table>","245e50d4":"Wait until the pool is completed.","0d1783a3":"Create pool tasks","46713989":"Create pool","0f3b172f":"Create a project.","8c347c7c":"Divide the dataset into two. One for tasks and one for [Control tasks](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/task_markup.html).\n\nNote. Control tasks are tasks with the correct response known in advance. They are used to track the performer's quality of responses. The performer's response is compared to the response you provided. If they match, it means the performer answered correctly.","d2fdb75b":"You can go to the project page and in web-interface you can see something like this:\n<table  align=\"center\">\n  <tr><td>\n    <img src=\"https:\/\/github.com\/Toloka\/toloka-kit\/blob\/main\/examples\/1.computer_vision\/image_classification\/img\/created_project.png?raw=true\"\n         alt=\"Project interface\"  width=\"1000\">\n  <\/td><\/tr>\n  <tr><td align=\"center\">\n    <b>Figure 1.<\/b> What the project interface might look like.\n  <\/td><\/tr>\n<\/table>","8ad51ba8":"**You** can see the labeled images. Some possible results are shown in figure 3 below.\n\n<table  align=\"center\">\n  <tr><td>\n    <img src=\"https:\/\/github.com\/Toloka\/toloka-kit\/blob\/main\/examples\/1.computer_vision\/image_classification\/img\/possible_results.png?raw=true\"\n         alt=\"Possible results\"  width=\"1000\">\n  <\/td><\/tr>\n  <tr><td align=\"center\">\n    <b>Figure 3.<\/b> Possible results.\n  <\/td><\/tr>\n<\/table>","f71644a4":"Start the pool.\n\n**Important.** Remember that real Toloka performers will complete the tasks.\nDouble check that everything is correct\nwith your project configuration before you start the pool","87398fae":"## Receiving responses","8df03a92":"Write short and simple \tinstructions.","4131cfa7":"Set up [Quality control](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/control.html). Add basic controls. And Golden Set\taka Control tasks. Ban performers who give incorrect responses to control tasks."}}