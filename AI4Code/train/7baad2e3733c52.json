{"cell_type":{"1a057147":"code","f92ebd78":"code","21718373":"code","521a259e":"code","3fd42fbe":"code","9151302a":"code","4bd1b793":"code","8fb5e540":"code","7f54a11c":"code","9bc5995c":"code","585dba89":"code","3f72c1af":"code","e8a769da":"code","ca362171":"code","5b56a6bb":"code","91cdb239":"code","b4120f96":"code","153c7f4f":"code","4f0cda33":"code","1a8483c3":"code","d5316b18":"code","9de84e11":"code","dbf08039":"code","df386425":"code","c0d4a7b3":"code","321388a4":"code","5f1370c9":"markdown","9f6a8d02":"markdown","c703f407":"markdown","64c5b601":"markdown","ebc1c712":"markdown","7a64b219":"markdown","7a38becb":"markdown","48774d8c":"markdown","7076f548":"markdown","e1bf6f98":"markdown","3a2f3392":"markdown","a1e9398c":"markdown","c3694d0f":"markdown","3e6e1535":"markdown","14a2b8d7":"markdown","ce3ced38":"markdown","60527d2e":"markdown"},"source":{"1a057147":"import pandas as pd\nimport pickle\nimport numpy as np\nfrom fastai.collab import *\nfrom pprint import pprint\nimport matplotlib.pyplot as plt\nimport umap\nfrom scipy import stats\n%matplotlib inline","f92ebd78":"# the original csv from https:\/\/raw.githubusercontent.com\/beefsack\/bgg-ranking-historicals\/master\/\n# The column ID is used in API calls to retrieve the game reviews\ngames = pd.read_csv('..\/input\/2019-05-02.csv')\ngames.describe()\ngames.sort_values('Users rated',ascending=False,inplace=True)\ngames.rename(index=str, columns={\"Bayes average\": \"Geekscore\",'Name':'name'}, inplace=True)\ngames[:10]","21718373":"reviews = pd.read_csv('..\/input\/bgg-13m-reviews.csv',index_col=0)\nprint(len(reviews))\nreviews.head()","521a259e":"reviews['rating'].hist(bins=10)\nplt.xlabel('rating of review')\nplt.ylabel('number of reviews')\nplt.show()","3fd42fbe":"games_by_all_users = reviews.groupby('name')['rating'].agg(['mean','count']).sort_values('mean',ascending=False)\ngames_by_all_users['rank']=games_by_all_users.reset_index().index+1\nprint(len(games_by_all_users))\n\ngames_by_all_users = games_by_all_users.merge(games[['name','Geekscore']],how='left',left_on=['name'], right_on=['name'])\ngames_by_all_users.head()","9151302a":"x = games_by_all_users['rank']\ny = games_by_all_users['mean']\nplt.figure(num=None, figsize=(7, 3), facecolor='w', edgecolor='k')\nplt.scatter(x, y,s=0.5)\nplt.xlabel('sorted games by average rating')\nplt.ylabel('average rating')\nplt.show()  # or plt.savefig(\"name.png\")","4bd1b793":"games_by_all_users[['mean','Geekscore']].hist(bins=10)\nplt.xlabel('averge rating of game')\nplt.ylabel('number of games')\nplt.show()","8fb5e540":"x = games_by_all_users['count']\ny = games_by_all_users['Geekscore']\ny2 = games_by_all_users['mean']\n\ndf = pd.DataFrame({'X' : x, 'Y' : y})  #we build a dataframe from the data\ndata_cut = pd.cut(df.X,bins=[1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100,1000,10000,100000])           #we cut the data following the bins\ngrp = df.groupby(by = data_cut)        #we group the data by the cut\nret = grp.aggregate(np.median)         #we produce an aggregate representation (median) of each bin\n\n\ndf2 = pd.DataFrame({'X' : x, 'Y' : y2})  #we build a dataframe from the data\ndata_cut = pd.cut(df2.X,bins=[1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100,1000,10000,100000])           #we cut the data following the bins\ngrp = df2.groupby(by = data_cut)        #we group the data by the cut\nret2 = grp.aggregate(np.median)         #we produce an aggregate representation (median) of each bin\n\n#plotting\nplt.figure(num=None, figsize=(10, 4), facecolor='w', edgecolor='k')\nplt.xscale('log')\nplt.scatter(df2.X,df2.Y,alpha=.5,s=0.5)\nplt.plot(ret.X,ret.Y,'g--',lw=4,alpha=0.5)\nplt.plot(ret2.X,ret2.Y,'r--',lw=4,alpha=0.5)\nplt.xlabel('number of reviews')\nplt.ylabel('average rating of game')\nplt.show()","7f54a11c":"reviews_by_user_count = reviews.groupby('user')['rating'].agg(['mean','count']).sort_values('count',ascending=False).reset_index()\nprint(len(reviews_by_user_count))\nreviews_by_user_count.head()","9bc5995c":"reviews_by_user_count['count'].hist(log=True)\nplt.xlabel('number of users')\nplt.ylabel('number of reviews written')","585dba89":"# select users that reviewed more than cutoff games\ncutoff = 500\nactive_users = reviews_by_user_count[reviews_by_user_count['count']>cutoff]\nactive_users = active_users['user']\nreviews_by_active_users = reviews[reviews['user'].isin(active_users)]\nprint(len(reviews_by_active_users))\nreviews_by_active_users.head()","3f72c1af":"count_user, count_review = reviews[['user','name']].nunique()\nprint('density',len(reviews)\/(count_user*count_review))\ncount_user, count_review = reviews_by_active_users[['user','name']].nunique()\nprint('density', len(reviews_by_active_users)\/(count_user*count_review))","e8a769da":"games_rated_by_active_users = reviews_by_active_users.groupby('name')['rating'].agg(['mean','count']).sort_values('mean',ascending=False)\ngames_rated_by_active_users['rank']=games_rated_by_active_users.reset_index().index+1\n\nprint('{} users original, with {} reviews'.format(reviews['user'].nunique(),len(reviews)))\nprint('{} users left({}% of the userbase), with {} reviews (this is {} of all reviews)'.format(len(active_users),len(active_users)\/reviews['user'].nunique(),len(reviews_by_active_users),len(reviews_by_active_users)\/len(reviews)))","ca362171":"games_rated_by_active_users['mean'].hist()\ngames_by_all_users['mean'].hist()","5b56a6bb":"x = reviews_by_user_count['count']\ny = reviews_by_user_count['mean']\nplt.xscale('log')\n\nplt.hist2d(x, y, bins=[np.logspace(np.log10(30),np.log10(1000),40),np.linspace(5,10,num=40)], cmap=plt.cm.jet)\nplt.colorbar()\nplt.xlabel('Number of reviews written')\nplt.ylabel('Average score of user')\nplt.show()","91cdb239":"merge = games_rated_by_active_users[['mean','count']].merge(games_by_all_users[['name','mean','count', 'Geekscore']],how='outer',left_index=True, right_on=['name'],suffixes=('active','all'),indicator=True)\n\nmerge['delta_active_all']=merge['meanactive']-merge['meanall']\nmerge['proportion_active']=merge['countactive']\/merge['countall']\nmerge.sort_values('countall',ascending=False)[:5]","b4120f96":"merge['delta_active_all'].median()","153c7f4f":"corr = merge.corr()\ncorr.style.background_gradient(cmap='coolwarm')","4f0cda33":"y = merge['meanall']\nx = merge['proportion_active']\n\ndf = pd.DataFrame({'X' : x, 'Y' : y})  #we build a dataframe from the data\ndata_cut = pd.cut(df.X,bins=np.linspace(0,1,num=10))   \ngrp = df.groupby(by = data_cut)        #we group the data by the cut\nret = grp.aggregate(np.median)         #we produce an aggregate representation (median) of each bin\n\n#plotting\nplt.figure(num=None, figsize=(10, 4), facecolor='w', edgecolor='k')\nplt.scatter(df.X,df.Y,alpha=.5,s=0.5)\nplt.plot(ret.X,ret.Y,'g--',lw=4,alpha=0.5)\nplt.xlabel('proportion of reviews given by active users')\nplt.ylabel('average rating of game')\nplt.show()","1a8483c3":"x = merge['countall']\ny = merge['proportion_active']\n\ndf = pd.DataFrame({'X' : x, 'Y' : y})  #we build a dataframe from the data\ndata_cut = pd.cut(df.X,bins=np.logspace(0,5,num=30))           #we cut the data following the bins\ngrp = df.groupby(by = data_cut)        #we group the data by the cut\nret = grp.aggregate(np.median)         #we produce an aggregate representation (median) of each bin\n\n#plotting\nplt.figure(num=None, figsize=(10, 4), facecolor='w', edgecolor='k')\nplt.xscale('log')\nplt.scatter(df.X,df.Y,alpha=.5,s=0.5)\nplt.plot(ret.X,ret.Y,'g--',lw=4,alpha=0.5)\nplt.xlabel('number of reviews for a game')\nplt.ylabel('proportion of reviews given by active users')\nplt.show()","d5316b18":"merged_reviews = reviews.merge(reviews_by_user_count,how='left',on='user',suffixes=('','user'),indicator=True)\ngames_test = merged_reviews.groupby('name')[['rating','count']].agg(['mean','median','count']).sort_values(('count', 'count'),ascending=False)\ngames_test[:5]","9de84e11":"corr = games_test.corr()\ncorr.style.background_gradient(cmap='coolwarm')","dbf08039":"games_test['count','median'].hist(bins=50)","df386425":"games_test = games_test.sort_values(('count', 'median'),ascending=True)\ngames_test[games_test['rating', 'count']>0][:30]","c0d4a7b3":"y = games_test[games_test['rating', 'count']>0]['rating', 'mean']\nx = games_test[games_test['rating', 'count']>0]['count', 'median']\n\ndf = pd.DataFrame({'X' : x, 'Y' : y})  #we build a dataframe from the data\ndata_cut = pd.cut(df.X,bins=np.logspace(0,3,num=40))   \ngrp = df.groupby(by = data_cut)        #we group the data by the cut\nret = grp.aggregate(np.median)         #we produce an aggregate representation (median) of each bin\n\n#plotting\nplt.figure(num=None, figsize=(10, 4), facecolor='w', edgecolor='k')\nplt.xscale('log')\nplt.scatter(df.X,df.Y,alpha=.5,s=0.5)\nplt.plot(ret.X,ret.Y,'g--',lw=4,alpha=0.5)\nplt.xlabel(\"median number of reviews of a game's userbase (the higher the more active the userbase of a game)\")\nplt.ylabel('average score for a game')\nplt.show()","321388a4":"x = games_test['rating', 'count']\ny = games_test['count', 'median']\n\n\ndf = pd.DataFrame({'X' : x, 'Y' : y})  #we build a dataframe from the data\ndata_cut = pd.cut(df.X,bins=np.logspace(0,5,num=30))   \ngrp = df.groupby(by = data_cut)        #we group the data by the cut\nret = grp.aggregate(np.median)         #we produce an aggregate representation (median) of each bin\n\n#plotting\nplt.figure(num=None, figsize=(10, 4), facecolor='w', edgecolor='k')\nplt.xscale('log')\nplt.scatter(df.X,df.Y,alpha=.5,s=0.5)\nplt.plot(ret.X,ret.Y,'g--',lw=4,alpha=0.5)\nplt.xlabel('number of reviews per game')\nplt.ylabel(\"median number of reviews of a game's userbase\")\nplt.show()","5f1370c9":"Plotted on a logaritmic scale, obviously most of the games don't have that many reviews. There appears to be a slight positive correlation between the amount of reviews and the average score. The red score marks the average score, the green the 'Geekscore', which again penalizes for a lower amount of ratings. ","9f6a8d02":"The more active the userbase, the lower the average score a game receives.","c703f407":"Hi, I hope you enjoy this kernel. \nYour comments & votes are very much appreciated! Especially tips on how to improve are very much welcome!!\nJesse","64c5b601":"Aside from the obvious correlations between the set of reviews by active users and all reviews, a few things stand out:\n- The geekscore has a higher correlation with the number of reviews (count) than the average score given (mean). Is this is problem?\n- The more the reviews of games consist of active users, the lower the score (fairly low negative correlation)","ebc1c712":"Catan has a mean rating of 7.2, with median score of 7.0 and 84613 reviews. The users that reviewed it rated on average 105 games, with a median of 51.\nThe median is the best metric to gauge how active the users are, since it filters away the effect of extremely active users on the mean.","7a64b219":"The active users with >500 reviews per user make up 1% of the userbase, but almost submit 15% of all the reviews. Their scores per game are about 0.33 points lower compared to the whole population. To me this suggests they are more critical, since we are comparing per game. E.g. Catan has a mean score of 7.21 (meanall), but a mean score of 6.79 by the active users, leading to a delta of 0.43 (delta_active_all). Furthermore, the reviews of active users make up 3% of the reviews for Catan (proportion_active)","7a38becb":"Here you see the effect again of games with a very high amount of ratings.\n\nAll in all, making causal inferences based on a historical data is like threading on thin ice. I do think experienced users give lower ratings, so are more critical. But concluding that games are ending up with a lower average rating because of these experienced reviewers is probably a step too far.\n\nThat's it. I enjoyed making my first dataset and kernel. Would appreciate any comments!!","48774d8c":"This makes sense, since games like Catan that have a huge number of reviews (85268) by majority are rated by casual users, since there are only about 2700 active users with >500 reviews.\n\nA more 'clean' way to investigate this is to investigate per game how active it userbase is. How active users are can be defined by the mean number of reviews of the userbase.","7076f548":"Most of the users have between 0-500 reviews, however there are some enthusiasts with >4000 reviews! That's some real dedication right there! User 'leffe dubbel' has rated in total 5984 games, just wow!","e1bf6f98":"Nice distribution, lets investigate.","3a2f3392":"Games seem to get a slightly higher shore when rated by all users","a1e9398c":"The wall of shame: these games are all reviewed by users that are suspiciously inactive. Probably rated by fake accounts. But also not so many reviews. Kill the unicorns managed to get 200 though, with an median user that reviewed only 4 games.","c3694d0f":"Again, positive correlations for the number of reviews and scores, and negative correlations for the activity of the users that rated a game and the score","3e6e1535":"If we compute the average rating of the games, it's even more visible that the ratings are really centered around the mean which is 6.4. The Geekscore is a score which penalizes games when they have few reviews, since the uncertainty around their 'true' score is higher. This is reflected in a lower average score of 5.6","14a2b8d7":"This graph shows that users with many reviews tend to give lower scores compared to users that are less active (r2=0.09). Two explainations arise:\n- Active users simply rate more games, so they also play more bad games. Vice versa, casual users just play good games\n- Active users are more critical of games, so tend to give lower scores","ce3ced38":"As you can see,most of the reviews are between a 6 and a 10.","60527d2e":"Here you see the small effect that active users have on a lower average score of a game"}}