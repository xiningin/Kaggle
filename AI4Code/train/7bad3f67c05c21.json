{"cell_type":{"08e249b3":"code","82e1cb2d":"code","5ec7aac2":"code","4772e611":"code","cccf9d4a":"code","799f89c8":"code","b9890073":"code","0cca3335":"code","b1a28fdd":"code","8fd8b200":"code","23e6f953":"code","8b2d671a":"code","0c352aca":"code","52d78953":"code","0aa509ab":"code","6c020a9d":"code","a9d1b4bf":"code","86913afc":"code","6f414285":"code","3a33d0ba":"code","4ccdf24b":"code","3f019a82":"code","6fc80fd8":"code","d5980050":"code","36bacd9d":"code","6ce9e71a":"code","3b26c93f":"code","7a865b79":"code","39306311":"code","8f0f8d50":"code","d4c63f17":"code","b20d3689":"code","d430c705":"code","70bacb16":"code","e3866321":"code","156240a5":"code","0b5325a5":"code","1141e4f5":"code","13b4c4bf":"code","c5f71c84":"code","287c3ba3":"code","2e8ca513":"code","df5c3abf":"code","6b2381a5":"code","432e469b":"code","a002835d":"code","63bc2161":"code","25c95cc5":"code","bfae25f6":"code","e35c8c43":"code","06f31ea8":"code","4720b38d":"code","f33a6a1e":"code","3f7ff58a":"code","44248bb8":"code","ffe6777c":"code","9c1c57be":"code","527c4307":"code","a7232e17":"code","b9cd2c1e":"code","17bc0259":"code","60d75182":"code","37eaf1b4":"code","6897c5a6":"code","c85d6ad4":"code","b291747b":"code","14f9f40e":"code","24aa8c53":"code","e39a7c45":"code","a2ae41fc":"code","143853e9":"code","4d2fe72d":"code","c4bfd225":"code","22826d77":"code","4c557bc6":"code","94d0a9ad":"code","b6d5160d":"code","c9acd87a":"code","b4bb66e8":"code","376af2f6":"code","a0c402fa":"code","4109eeac":"code","f2d0b767":"code","390b5e97":"code","a9674af7":"code","7f07450e":"code","7ec9de1f":"code","f49261ae":"code","4715a0e2":"code","75ac4d9e":"code","dfdcce98":"code","aaa4d753":"code","db89d7e1":"code","e4986255":"code","a70a9261":"code","acd7af5e":"code","882699b3":"code","660dcea2":"code","30d71388":"code","f8c9268b":"code","06d711ae":"code","dbe0abad":"code","44151cc0":"code","996b57ce":"code","cff75744":"code","a96d8766":"code","912d4254":"code","0e7bcbc7":"code","281b4d4d":"code","bbf80336":"code","77272e91":"code","de3aedcb":"code","004fea78":"code","57ee006c":"code","afa706f4":"code","453c2542":"code","93c0fd12":"code","b4d38dc7":"code","747dae91":"code","1a58c597":"code","0dc2dd36":"code","ab84d063":"code","1b0951e2":"code","4951e494":"code","d2588be7":"code","c696a4fc":"code","f9de9449":"code","6a64ff97":"code","da7c387b":"code","0781153f":"code","39832871":"code","9db38602":"code","5457c563":"code","652cb5cd":"code","d8e148be":"code","bb51f528":"code","a3ffdecb":"code","8dc6a1a3":"code","9ba2b598":"code","f95cf860":"code","a11e476e":"code","69b18b77":"markdown","b2013e51":"markdown","908676d5":"markdown","29e2db20":"markdown","df4eb390":"markdown","7671e26f":"markdown","a2f3ac31":"markdown","724366a8":"markdown","1f35c3a4":"markdown","083e61a5":"markdown","19dcf74c":"markdown","784767af":"markdown","6ca7f198":"markdown","8f80dcd3":"markdown","8ef97e26":"markdown","0f995f82":"markdown","6ccf85a1":"markdown","6a013283":"markdown","c997be7c":"markdown","f45a4de3":"markdown","63c3187b":"markdown","c3807c6d":"markdown","2baf74a9":"markdown","387d7368":"markdown","1cb730e5":"markdown","9207bdec":"markdown","28ad479f":"markdown","6aba7aae":"markdown","edf49e1c":"markdown","b910b7ef":"markdown","f89ac1b4":"markdown","72450e94":"markdown","c97ef985":"markdown","3b630f2c":"markdown","fc9e45d3":"markdown","ef2de8d9":"markdown","6453b6a8":"markdown","2292e246":"markdown","147592f5":"markdown","e9ab03df":"markdown","6c2b5ca7":"markdown"},"source":{"08e249b3":"import os #operating system \u7684\u7f29\u5199 \u65b9\u4fbf\u64cd\u4f5c\u521b\u5efa\u6587\u4ef6\u5939\u7b49\u7cfb\u7edf\u7b49\u7ea7\u7684\u64cd\u4f5c\nimport tarfile #\u65b9\u4fbf\u6253\u5f00\u538b\u7f29\u5305\nfrom six.moves import urllib #\u65b9\u4fbf\u4eceurl\u83b7\u53d6\u6570\u636e\nimport pandas as pd","82e1cb2d":"DOWNLOAD_ROOT = \"https:\/\/raw.githubusercontent.com\/ageron\/handson-ml\/master\/\" #\u83b7\u53d6\u6570\u636e\u7684\u6839\u76ee\u5f55\nHOUSING_PATH = os.path.join(\"datasets\", \"housing\") #\u5bfc\u5165\u6570\u636e\u65f6\u5019\u7684\u8def\u5f84\nHOUSING_URL = DOWNLOAD_ROOT + \"datasets\/housing\/housing.tgz\" #\u6570\u636e\u7684url\n\ndef fetch_housing_data(housing_url=HOUSING_URL, housing_path=HOUSING_PATH):\n    os.makedirs(housing_path, exist_ok=True) #\u521b\u5efa\u6587\u4ef6\u5939\n    tgz_path = os.path.join(housing_path, \"housing.tgz\") #\u6570\u636e\u6587\u4ef6\u7684\u672c\u5730\u8def\u5f84\n    urllib.request.urlretrieve(housing_url, tgz_path) #\u5c06\u7ebf\u4e0a\u6570\u636e\u5bfc\u5165\u5230\u672c\u5730\n    housing_tgz = tarfile.open(tgz_path) #\u6253\u5f00\u538b\u7f29\u5305\n    housing_tgz.extractall(path=housing_path) #\u5c06\u538b\u7f29\u5305\u6240\u6709\u6587\u4ef6\u89e3\u538b\u7f29\u5230\u6307\u5b9a\u8def\u5f84\n    housing_tgz.close() #\u5173\u95ed\u538b\u7f29\u5305","5ec7aac2":"fetch_housing_data() #\u6267\u884c\u8fd9\u4e2a\u51fd\u6570\uff0c\u83b7\u53d6\u6570\u636e\u6587\u4ef6","4772e611":"\n\ndef load_housing_data(housing_path=HOUSING_PATH):\n    csv_path = os.path.join(housing_path, \"housing.csv\") #\u901a\u8fc7\u8def\u5f84\u548c\u6587\u4ef6\u540d\u83b7\u53d6\u6587\u4ef6\n    return pd.read_csv(csv_path)","cccf9d4a":"housing = load_housing_data()","799f89c8":"housing.info()","b9890073":"housing.ocean_proximity.value_counts()","0cca3335":"housing.describe()","b1a28fdd":"import matplotlib.pyplot as plt\nhousing.hist(bins = 50, figsize=(20,15))","8fd8b200":"import numpy as np","23e6f953":"def split_train_test(data,test_ratio):\n    shuffled_indices = np.random.premutation(len(data))\n    test_set_size = int(len(data)*test_ration)\n    test_indices= shuffled_indices[:test_set_size]\n    train_indices = shuffled_indices[test_set_size:]\n    return data.iloc[train_indices], data.iloc[test_indices]","8b2d671a":"# Divide by 1.5 to limit the number of income categories\nhousing[\"income_cat\"] = np.ceil(housing[\"median_income\"] \/ 1.5)\n# Label those above 5 as 5\nhousing[\"income_cat\"].where(housing[\"income_cat\"] < 5, 5.0, inplace=True)","0c352aca":"housing.head()","52d78953":"from sklearn.model_selection import StratifiedShuffleSplit","0aa509ab":"split_housing = StratifiedShuffleSplit(n_splits=1, test_size=.2,random_state=100)\nfor train_index, test_index in split_housing.split(housing, housing[\"income_cat\"]):\n    strat_train_set = housing.loc[train_index]\n    strat_test_set = housing.loc[test_index]","6c020a9d":"housing[\"income_cat\"].value_counts()\/len(housing)","a9d1b4bf":"train_index","86913afc":"for x in (strat_test_set,strat_train_set):\n    x.drop(['income_cat'],axis = 1, inplace = True)","6f414285":"housing = strat_train_set.copy()","3a33d0ba":"housing","4ccdf24b":"housing.plot(kind='scatter',x='longitude',y='latitude',alpha = 0.1,s=housing['population']\/100,label='population'\n             ,c='median_house_value',cmap=plt.get_cmap('rainbow'),colorbar=True,figsize=(15,10),sharex=False)\n#cmap \u662fcolor map\uff0chttps:\/\/matplotlib.org\/gallery\/color\/colormap_reference.html \u4ee5\u4e0a\u94fe\u63a5\u6709\u6240\u6709color map\u7684\u5f62\u5f0f\nplt.legend()","3f019a82":"corr_matrix = housing.corr()","6fc80fd8":"corr_matrix","d5980050":"corr_matrix[\"median_house_value\"].sort_values()","36bacd9d":"import pandas as pd ","6ce9e71a":"from pandas.plotting import scatter_matrix","3b26c93f":"attributes=[\"median_house_value\",\"median_income\",\"total_rooms\",\"housing_median_age\"]\nscatter_matrix(housing[attributes],figsize=(10,10))","7a865b79":"housing.plot(kind=\"scatter\",y=\"median_house_value\",x='median_income',alpha=0.1)","39306311":"housing['rooms_per_household']=housing['total_rooms']\/housing['households']\nhousing['bedrooms_per_room']=housing['total_bedrooms']\/housing['total_rooms']\nhousing['population_per_household']=housing['population']\/housing['households']\n","8f0f8d50":"corr_matrix = housing.corr()","d4c63f17":"corr_matrix[\"median_house_value\"].sort_values()","b20d3689":"housing = strat_train_set.drop(\"median_house_value\",axis=1)\nhousing_labels = strat_train_set[\"median_house_value\"].copy()#\u5c06\u6570\u636e\u4e2d\u7684label\u5217\u5355\u72ec\u63d0\u51fa\u65b9\u4fbf\u540e\u7eed\u6b65\u9aa4\u4f7f\u7528","d430c705":"from sklearn.impute import SimpleImputer ","70bacb16":"imputer = SimpleImputer(strategy=\"median\")","e3866321":"housing_num = housing.drop('ocean_proximity',axis= 1)","156240a5":"imputer.fit(housing_num)","0b5325a5":"imputer.statistics_","1141e4f5":"housing_num.median()","13b4c4bf":"X = imputer.transform(housing_num)","c5f71c84":"X","287c3ba3":"housing_tr = pd.DataFrame(X,columns=housing_num.columns)","2e8ca513":"housing_tr","df5c3abf":"housing_transform = imputer.fit_transform(housing_num)","6b2381a5":"housing_transform","432e469b":"from sklearn.preprocessing import LabelEncoder","a002835d":"encoder = LabelEncoder()","63bc2161":"housing_cat = housing['ocean_proximity']","25c95cc5":"housing_cat","bfae25f6":"# \u5c06\u4ee5\u4e0a\u7684\u4e8c\u7ef4\u6570\u636e\u96c6\u5408\u901a\u8fc7encoder\u8f6c\u4e3a\u6570\u5b57\u7684\u4e00\u4e2a\u6570\u5217\nhousing_cat_encoded = encoder.fit_transform(housing_cat)","e35c8c43":"housing_cat_encoded","06f31ea8":"print(encoder.classes_)","4720b38d":"from sklearn.preprocessing import OneHotEncoder","f33a6a1e":"encoder = OneHotEncoder()","3f7ff58a":"housing_cat_1hot = encoder.fit_transform(housing_cat_encoded.reshape(-1,1))","44248bb8":"housing_cat_1hot","ffe6777c":"housing_cat_encoded.reshape(-1,1)","9c1c57be":"housing_cat_1hot.toarray()","527c4307":"from sklearn.preprocessing import LabelBinarizer","a7232e17":"encoder = LabelBinarizer(sparse_output = True) #\u8fd9\u91cc\u7684sparse_output\u662f\u4e3a\u4e86\u4fdd\u8bc1\u6240\u5f97\u7ed3\u679c\u662f\u7a00\u758f\u77e9\u9635\uff0c\u5982\u679c\u53bb\u6389\uff0c\u7ed3\u679c\u4fbf\u662fnumpy\u4e8c\u7ef4\u6570\u7ec4","b9cd2c1e":"housing_cat_1hot = encoder.fit_transform(housing_cat)","17bc0259":"housing_cat_1hot","60d75182":"from sklearn.base import BaseEstimator, TransformerMixin #\u6dfb\u52a0\u8fd9\u4e24\u4e2afunction\u7684\u76ee\u7684\u662f\u66f4\u597d\u7684\u8c03\u6574\u53c2\u6570","37eaf1b4":"rooms_ix,bedrooms_ix,population_ix,household_ix = 3,4,5,6","6897c5a6":"class CombinedAttributesAdder(BaseEstimator, TransformerMixin):\n    #\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u591a\u529f\u80fd\u7684class\uff0c\u8fd9\u6837\u66f4\u65b9\u4fbf\u8fd0\u884c\u66f4\u591a\u7684pipeline\u6216\u8005function\n    def __init__(self,add_bedrooms_per_room = True):\n        self.add_bedrooms_per_room = add_bedrooms_per_room\n    def fit(self,X,y=None):\n        return self\n    def transform(self, X, y=None):\n        rooms_per_household = X[:,rooms_ix]\/X[:,household_ix]\n        population_per_household = X[:,population_ix]\/X[:,household_ix]\n        if self.add_bedrooms_per_room:\n            bedrooms_per_room = X[:,bedrooms_ix]\/X[:,rooms_ix]\n            return np.c_[X,rooms_per_household,population_per_household,bedrooms_per_room]\n        else:\n            return np.c_[X,rooms_per_household,population_per_household]\n","c85d6ad4":"attr_adder = CombinedAttributesAdder(add_bedrooms_per_room=False)\nhousing_extra_attribs = attr_adder.transform(housing.values)","b291747b":"from sklearn.preprocessing import FunctionTransformer\n\ndef add_extra_features(X, add_bedrooms_per_room=True):\n    rooms_per_household = X[:, rooms_ix] \/ X[:, household_ix]\n    population_per_household = X[:, population_ix] \/ X[:, household_ix]\n    if add_bedrooms_per_room:\n        bedrooms_per_room = X[:, bedrooms_ix] \/ X[:, rooms_ix]\n        return np.c_[X, rooms_per_household, population_per_household,\n                     bedrooms_per_room]\n    else:\n        return np.c_[X, rooms_per_household, population_per_household]\n\nattr_adder = FunctionTransformer(add_extra_features, validate=False,\n                                 kw_args={\"add_bedrooms_per_room\": False})\nhousing_extra_attribs = attr_adder.fit_transform(housing.values)","14f9f40e":"housing_extra_attribs = pd.DataFrame(\n    housing_extra_attribs,\n    columns=list(housing.columns)+[\"rooms_per_household\", \"population_per_household\"],\n    index=housing.index)\nhousing_extra_attribs.head()","24aa8c53":"from sklearn.pipeline import Pipeline","e39a7c45":"from sklearn.preprocessing import StandardScaler","a2ae41fc":"#\u5bf9\u6570\u5b57\u7c7b\u578b\u7684\u6570\u636e\u8fdb\u884cpipeline\u8f6c\u6362\nnum_pipline= Pipeline([\n    ('imputer',SimpleImputer(strategy=\"median\")),#\u8f6c\u6362\u5668\n    ('attribs_adder',CombinedAttributesAdder()),#\u8f6c\u6362\u5668\n    ('std_scaler',StandardScaler()),#\u4f30\u7b97\u5668\n])","143853e9":"housing_num_tr = num_pipline.fit(housing_num)#\u5c06pipeline\u5e94\u7528\u5230\u6570\u636e\uff0c\u5e76\u4e14\u5f97\u5230\u76f8\u5173\u53c2\u6570\uff0c\u5982median\u503c","4d2fe72d":"housing_num_tr=num_pipline.transform(housing_num)#\u5c06\u76f8\u5e94\u8f6c\u6362\u5e94\u7528\u5230\u6570\u636e\uff0c\u4ee5\u6b64\u5f97\u5230\u6e05\u7406\u540e\u7684\u6570\u636e","c4bfd225":"from sklearn.pipeline import FeatureUnion","22826d77":"housing_num","4c557bc6":"\nnum_attribs = list(housing_num) \ncat_attribs = [\"ocean_proximity\"]","94d0a9ad":"#Newer:\nfrom sklearn.compose import ColumnTransformer\nfull_pipeline = ColumnTransformer([\n    ('num',num_pipline,num_attribs),\n    ('cat',OneHotEncoder(),cat_attribs),\n])\n\nhousing_prepared = full_pipeline.fit_transform(housing)","b6d5160d":"housing_prepared","c9acd87a":"housing_prepared.shape","b4bb66e8":"from sklearn.linear_model import LinearRegression","376af2f6":"lin_reg = LinearRegression()","a0c402fa":"lin_reg.fit(housing_prepared, housing_labels)","4109eeac":"some_labels = housing_labels.iloc[:5]","f2d0b767":"some_data = housing.iloc[:5]","390b5e97":"some_data_prepared = full_pipeline.transform(some_data)","a9674af7":"lin_reg.predict(some_data_prepared)","7f07450e":"from sklearn.metrics import mean_squared_error","7ec9de1f":"housing_predictions = lin_reg.predict(housing_prepared)","f49261ae":"lin_mse = mean_squared_error(housing_labels, housing_predictions)","4715a0e2":"lin_rmse = np.sqrt(lin_mse)","75ac4d9e":"lin_rmse","dfdcce98":"from sklearn.tree import DecisionTreeRegressor","aaa4d753":"tree_reg = DecisionTreeRegressor()","db89d7e1":"tree_reg.fit(housing_prepared,housing_labels)","e4986255":"housing_predictions = tree_reg.predict(housing_prepared)","a70a9261":"tree_mse = mean_squared_error(housing_labels,housing_predictions)","acd7af5e":"tree_rmse = np.sqrt(tree_mse)","882699b3":"tree_rmse","660dcea2":"from sklearn.model_selection import cross_val_score","30d71388":"scores = cross_val_score(tree_reg,housing_prepared, housing_labels,\n                        scoring=\"neg_mean_squared_error\", cv = 10)","f8c9268b":"rmse_scores = np.sqrt(-scores)","06d711ae":"rmse_scores","dbe0abad":"def display_scores(scores):\n    print(\"Scores:\", scores)\n    print(\"Mean:\",scores.mean())\n    print(\"Standard deviation:\", scores.std())","44151cc0":"display_scores(rmse_scores)","996b57ce":"# \u5e94\u7528\u4e8e\u7ebf\u6027\u56de\u5f52\u6a21\u578b\uff1a","cff75744":"lin_scores = cross_val_score(lin_reg,housing_prepared, housing_labels,\n                            scoring = \"neg_mean_squared_error\", cv = 10)","a96d8766":"lin_rmse_scores = np.sqrt(-lin_scores)","912d4254":"display_scores(lin_rmse_scores)","0e7bcbc7":"from sklearn.ensemble import RandomForestRegressor","281b4d4d":"forest_reg = RandomForestRegressor()","bbf80336":"forest_reg.fit(housing_prepared,housing_labels)","77272e91":"scores = cross_val_score(forest_reg,housing_prepared, housing_labels,\n                        scoring=\"neg_mean_squared_error\", cv = 10)","de3aedcb":"forest_rmse_scores = np.sqrt(-scores)","004fea78":"display_scores(forest_rmse_scores)","57ee006c":"from sklearn.model_selection import GridSearchCV","afa706f4":"param_grid = [\n    {'n_estimators':[3,10,30],'max_features':[2,4,6,8]},\n    {'bootstrap':[True],'n_estimators':[3,10],'max_features':[2,3,4]},\n    \n]","453c2542":"forest_reg = RandomForestRegressor()","93c0fd12":"grid_search = GridSearchCV(forest_reg,param_grid,cv = 5,\n                          scoring='neg_mean_squared_error', return_train_score=True)","b4d38dc7":"grid_search.fit(housing_prepared,housing_labels)","747dae91":"grid_search.best_params_","1a58c597":"grid_search.best_estimator_","0dc2dd36":"cvres = grid_search.cv_results_","ab84d063":"for mean_score, params in zip(cvres[\"mean_test_score\"],cvres[\"params\"]):\n    print(np.sqrt(-mean_score),params)","1b0951e2":"pd.DataFrame(grid_search.cv_results_)","4951e494":"from sklearn.model_selection import RandomizedSearchCV","d2588be7":"from scipy.stats import randint","c696a4fc":"param_distribs = {\n        'n_estimators': randint(low=1, high=200),\n        'max_features': randint(low=1, high=8),\n    } # \u548c\u7f51\u683c\u641c\u7d22\u7684\u903b\u8f91\u7c7b\u4f3c\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u8bbe\u7f6e\u597d\u9700\u8981\u641c\u7d22\u7684\u53c2\u6570\u8303\u56f4\n\n","f9de9449":"forest_reg = RandomForestRegressor()","6a64ff97":"rnd_search = RandomizedSearchCV(forest_reg,param_distributions=param_distribs,\n                               n_iter= 10, cv = 5, scoring=\"neg_mean_squared_error\")#\u540c\u6837\u548c\u7f51\u683c\u641c\u7d22\u7c7b\u4f3c","da7c387b":"rnd_search.fit(housing_prepared,housing_labels)","0781153f":"#\u4f7f\u7528\u540c\u6837\u7684\u65b9\u6cd5\u6765\u770b\u8bad\u7ec3\u7ed3\u679c\u7684\u5206\u6570\u5206\u522b\u662f\u591a\u5c11\u4fbf\u4e8e\u6bd4\u8f83\ncvres = rnd_search.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(np.sqrt(-mean_score), params)","39832871":"feature_importances = grid_search.best_estimator_.feature_importances_","9db38602":"feature_importances","5457c563":"extra_attribs = [\"rooms_per_hhold\", \"pop_per_hhold\", \"bedrooms_per_room\"]\ncat_encoder = full_pipeline.named_transformers_[\"cat\"]\ncat_one_hot_attribs = list(cat_encoder.categories_[0])\nattributes = num_attribs + extra_attribs + cat_one_hot_attribs\nsorted(zip(feature_importances, attributes), reverse=True)","652cb5cd":"final_model = grid_search.best_estimator_","d8e148be":"X_test = strat_test_set.drop(\"median_house_value\", axis = 1) # \u5c06\u7279\u5f81\u5217\u5355\u72ec\u53d6\u51fa","bb51f528":"y_test = strat_test_set[\"median_house_value\"].copy() #\u5c06label\u5217\u5355\u72ec\u53d6\u51fa","a3ffdecb":"X_test_prepared = full_pipeline.transform(X_test)","8dc6a1a3":"final_prediction = final_model.predict(X_test_prepared)","9ba2b598":"final_mse = mean_squared_error(y_test, final_prediction)","f95cf860":"final_rmse = np.sqrt(final_mse)","a11e476e":"final_rmse","69b18b77":"####    \u5982\u4e0a\uff0c\u4fbf\u628a\u672c\u4e3a\u6587\u5b57\u7684\u4e00\u5217\u8f6c\u5316\u4e3a\u4ee50,1,2,3\u7b49\u6570\u5b57\u4e3a\u4ee3\u8868\u7684\u7c7b\u522b\u5217\n#### encoder.classes_\u53ef\u4ee5\u67e5\u770b\u6bcf\u4e2a\u6570\u5b57\u5bf9\u5e94\u7684\u7c7b\u522b\u5206\u522b\u662f\u4ec0\u4e48","b2013e51":"from sklearn.base import BaseEstimator, TransformerMixin","908676d5":"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u6211\u4eec\u60f3\u7528fit_tranform\u6765\u5e94\u7528\u4e0a\u9762\u7684function\uff0c\u6211\u4eec\u5fc5\u987b\u5c06\u6211\u4eec\u60f3\u8981\u8f93\u5165\u7684\u7ed3\u679c\u53d8\u6210\u4e8c\u7ef4\u6570\u7ec4\uff0c\u5c31\u5982housing_cat\u4e00\u6837","29e2db20":"# --------------\u2191\u8fd9\u91cc\u6709\u4e9b\u95ee\u9898\uff0c\u8bb0\u5f97\u56de\u5934\u590d\u4e60\u94bb\u7814\u2191------------------","df4eb390":"### TransformerMixin \u662f\u4e3a\u4e86\u76f4\u63a5\u4f7f\u7528fit_transform\uff1b \n### BaseEstimator\u662f\u4e3a\u4e86\u81ea\u52a8\u8c03\u6574\u8d85\u53c2\u6570\uff0c\u5728\u672c\u4f8b\u4e2d\u8d85\u53c2\u6570\u4e3aadd_bedrooms_per_room","7671e26f":"# \u5fae\u8c03\u6a21\u578b\uff01","a2f3ac31":"## \u4f7f\u7528LebalBinarizer\u53ef\u4ee5\u4e00\u6b21\u6027\u5b8c\u6210\u4e0a\u8ff0\u8f6c\u6362","724366a8":"\u4f7f\u7528fit\u5c06imputer\u9002\u914d\u5230\u76f8\u5e94\u7684\u6570\u636e\u96c6\u5408","1f35c3a4":"# \u8bad\u7ec3\u6a21\u578b\uff01","083e61a5":"## \u65b9\u6cd5\u4e00\uff1a\u6700\u5c0f\u503c-\u6700\u5927\u7f29\u653e\n\u53c8\u79f0\u4e3a\u5f52\u4e00\u5316\uff0c\u5c06\u503c\u7f29\u653e\u4e3a0\u52301\u4e4b\u95f4\u7684\u503c\u3002\n### \u4e3a\u6b64\uff0csklearn\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8f6c\u6362\u5668\uff1aMinMaxScaler,\u5982\u679c\u4f60\u4e0d\u60f3\u8303\u56f4\u662f0\u52301\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u6574\u8d85\u53c2\u6570feature_range\u6765\u66f4\u6539","19dcf74c":"\u4ee5\u4e0a\u4fbf\u662f\u628a\u5f97\u5230\u7684\u65b0\u6570\u7ec4\u7684\u6570\u636e\u653e\u5230dataframe\u4e2d\u7684\u6240\u6709\u6b65\u9aa4\n\u5982\u679c\u60f3\u4e00\u6b65\u5c06imputer\u7684\u7ed3\u679c\u5e26\u5165\u5230\u6570\u636e\u96c6\u5408\u4e2d\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528fit_transform()","784767af":"## \u81ea\u5b9a\u4e49\u8f6c\u6362\u5668\n\u5176\u4f5c\u7528\u4fbf\u662f\u7b80\u5316\u6570\u636e\u6e05\u7406\u6d41\u7a0b\uff0c\u66f4\u5feb\u5f97\u5230\u6709\u52a9\u4e8e\u673a\u5668\u5b66\u4e60\u7684\u6570\u636e","6ca7f198":"num_pipeline = Pipeline([\n    ('selector',DataFrameSelector(num_attribs)),#\u6570\u636e\u9009\u62e9\u5668\n    ('imputer',SimpleImputer(strategy=\"median\")),#\u8f6c\u6362\u5668\n    ('attribs_adder',CombinedAttributesAdder()),#\u8f6c\u6362\u5668\n    ('std_scaler',StandardScaler()),#\u4f30\u7b97\u5668\n])\n\ncat_pipeline = Pipeline([\n    ('selector',DataFrameSelector(cat_attribs)),\n    ('Labelizer',OneHotEncoder(sparse=False)),\n])\n\nfull_pipeline = FeatureUnion(transformer_list=[\n    ('num_pipeline',num_pipeline),\n    ('cat_pipeline',cat_pipeline),\n])","8f80dcd3":"\u5c06\u6240\u9700\u8981\u7684\u4e24\u79cd\u6570\u636e\u7684\u8868\u5934\u5206\u522b\u5efa\u7acblist","8ef97e26":"class DataFrameSelector(BaseEstimator,TransformerMixin):\n    def __init__(self,attribute_names):\n        self.attribute_names = attribute_names\n    def fit(self,X,y=None):\n        return self\n    def transform(self,X):\n        return X[self.attribute_names].values","0f995f82":"# \u901a\u8fc7\u6d4b\u8bd5\u96c6\u8bc4\u4f30\u7cfb\u7edf","6ccf85a1":"### \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0chousing_cat_1hot\u8f93\u51fa\u7684\u662f\u4e00\u4e2a\u7a00\u758f\u77e9\u9635\uff0c\u4e4b\u6240\u4ee5\u8fd9\u6837\u4f7f\u7528\uff0c\u662f\u56e0\u4e3a\u5f53\u6211\u4eec\u6709\u4e0a\u5343\u4e2a\u6570\u636e\u884c\u65f6\uff0c\u6bcf\u884c\u7684\u7c7b\u522b\u5217\u90fd\u662f\u6709\u4e00\u5b9a\u6570\u91cf\u76840\u548c\u4e00\u4e2a1\u7ec4\u6210\uff0c\u5360\u7528\u5185\u5b58\u5b58\u50a80\u662f\u5f88\u611a\u8822\u7684\uff0c\u7a00\u758f\u77e9\u9635\u7684\u4f5c\u7528\u5c31\u662f\u53ea\u5b58\u50a8\u975e0\u7684\u5143\u7d20\u4f4d\u7f6e\uff0c\u6211\u4eec\u8fd8\u4f9d\u7136\u53ef\u4ee5\u6309\u7167\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u7684\u65b9\u5f0f\u4f7f\u7528\u5b83\uff0c\u5982\u679c\u6211\u4eec\u6267\u610f\u60f3\u8981\u5c06\u5b83\u8f6c\u6362\u4e3anumpy\u6570\u7ec4\uff0c\u53ef\u8c03\u7528toarray\uff08\uff09","6a013283":"## \u4f7f\u7528Pipeline\uff0c\u8ba9\u6570\u636e\u8f6c\u6362\u7684\u6b65\u9aa4\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u6267\u884c","c997be7c":"# --------------\u2193\u8fd9\u91cc\u6709\u4e9b\u95ee\u9898\uff0c\u8bb0\u5f97\u56de\u5934\u590d\u4e60\u94bb\u7814\u2193------------------","f45a4de3":"# \u6570\u636e\u6e05\u7406\n\n## missing value\uff1a\n## \u653e\u5f03\u76f8\u5e94\u7684\u884c\n## \u653e\u5f03\u6574\u5217\n## \u5c06missing value\u66ff\u6362\u4e3a\u67d0\u4e2a\u503c","63c3187b":"## \u4f7f\u7528\u53e6\u5916\u4e00\u4e2a\u6a21\u578b\u8bad\u7ec3","c3807c6d":"\u4e00\u4e2a\u66ff\u4ee3\u65b9\u6cd5\uff1a","2baf74a9":"## \u8fc7\u5ea6\u62df\u5408\uff01\uff08overfitting) - \u4f7f\u7528cross validation","387d7368":"## \u968f\u673a\u641c\u7d22\uff01","1cb730e5":"\u7531\u4e8e\u4e2d\u4f4d\u6570\u53ea\u80fd\u5728numeric\u7684\u6570\u636e\u4e0a\u8fdb\u884c\u8ba1\u7b97\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6240\u6709\u5217\u90fd\u662fnumeric\u7684\u6570\u636e\u96c6\u5408","9207bdec":"\u4ee5\u4e0a\u6b65\u9aa4\u4ea6\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528fit_transform\u8f6c\u6362","28ad479f":"## \u65b9\u6cd5\u4e8c\uff1a \u6807\u51c6\u5316\n\u6807\u51c6\u5316\u4e0d\u4f1a\u628a\u503c\u7ed1\u5b9a\u5230\u67d0\u4e2a\u8303\u56f4\uff0c\u5bf9\u67d0\u4e9b\u7b97\u6cd5\u6765\u8bf4\u8fd9\u53ef\u80fd\u662f\u4e2a\u95ee\u9898\uff08\u5982\uff1a\u795e\u7ecf\u7f51\u7edc\u7684\u8f93\u5165\u8303\u56f4\u901a\u5e38\u662f0\u52301\uff09\u3002\n\u4f18\u70b9\u662f\u6807\u51c6\u5316\u7684\u65b9\u6cd5\u53d7\u5f02\u5e38\u503c\u7684\u5f71\u54cd\u66f4\u5c0f\u3002\u539f\u56e0\u662f\u5f02\u5e38\u503c\u5f71\u54cd\u7684\u5e73\u5747\u503c\u4f1a\u5728\u6b64\u65b9\u6cd5\u4e2d\u6d88\u6389\u3002\n### \u8f6c\u5316\u5668\u4e3aStandadScaler","6aba7aae":"## \u81f3\u6b64\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u53ef\u4ee5\u5904\u7406\u6570\u5b57\u6570\u636e\u7684pipeline\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u5728pipeline\u4e2d\u52a0\u5165LabelBinarizer:\n    \n    \n### \u4e3a\u4e86\u65b9\u4fbf\u5c06\u6570\u5b57\u7c7b\u6570\u636e\u548clabel\u7c7b\u6570\u636e\u540c\u65f6\u56ca\u62ec\u5230pipeline\u4e2d\u53bb\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528FeatureUnion\u6765\u5b9e\u73b0\u8fd9\u4e2a\u7ed3\u5408","edf49e1c":"## \u8001\u7248\u672c\u7684\u8f6c\u6362\uff1a","b910b7ef":"### \u4f7f\u7528RMSE\u6765\u6d4b\u91cf\u56de\u5f52\u6a21\u578b\uff1a","f89ac1b4":"# \u5bf9\u4e8e\u6587\u672c\u7c7b\u5217\uff0c\u6211\u4eec\u66f4\u613f\u610f\u5c06\u4ed6\u4eec\u88c5\u6362\u6210\u6570\u5b57\uff0c\u8fd9\u6837\u66f4\u65b9\u4fbf\u6765\u8bad\u7ec3\u6570\u636e\n\n### LabelEncoder:","72450e94":"## \u91cd\u8981\u7684\u662f\uff0c\u7f29\u653e\u5668\u540c\u5176\u4ed6\u8f6c\u5316\u5668\u4e00\u6837\uff0c\u4ec5\u7528\u6765\u62df\u5408\u8bad\u7ec3\u96c6\uff0c\u800c\u4e0d\u662f\u5b8c\u6574\u7684\u6570\u636e\u96c6\uff08\u5305\u62ec\u6d4b\u8bd5\u96c6\uff09\u3002","c97ef985":"# \u6bcf\u4e2a\u5c5e\u6027\u7684\u76f8\u5bf9\u91cd\u8981\u7a0b\u5ea6","3b630f2c":"### Scikit learn \u4e2d\u6709\u4e00\u4e2a\u5f88\u597d\u5730\u6559\u7a0b\u5904\u7406missing values\uff1a imputer","fc9e45d3":"## \u65b0\u7248\u672c\u7684\u8f6c\u6362\uff1a","ef2de8d9":"## \u7279\u5f81\u7f29\u653e\n### \u4e3a\u4e86\u8ba9\u6570\u636e\u4e4b\u95f4\u7684\u6bd4\u4f8b\u5dee\u5f02\u4e0d\u8981\u8fc7\u5927\uff08\u8fc7\u5927\u901a\u5e38\u4f1a\u5bfc\u81f4\u6027\u80fd\u8868\u73b0\u4e0d\u4f73\uff09\uff0c\u6211\u4eec\u9700\u8981\u628a\u67d0\u4e9b\u7279\u5f81\u5217\u8fdb\u884c\u7f29\u653e\uff0c\u6ce8\uff1a\u76ee\u6807\u503c\u901a\u5e38\u4e0d\u9700\u8981\u7f29\u653e","6453b6a8":"\u4ece\u4ee5\u4e0a\u56fe\u4e2d\u53ef\u77e5\uff1a\u623f\u5c4b\u5e74\u9f84\u7684\u4e2d\u4f4d\u6570\u4ee5\u53ca\u623f\u5c4b\u4ef7\u503c\u7684\u4e2d\u4f4d\u6570\u88ab\u8bbe\u7f6e\u4e86\u4e0a\u9650\uff0c\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u67f1\u72b6\u56fe\u4f1a\u663e\u5f97\u5341\u5206\u7a81\u5140\u3002\u89e3\u51b3\u65b9\u6848\u4e00\u822c\u4e3a\u4e24\u79cd\uff1a\u53bb\u6389\u6700\u5927\u503c\u5f97\u6240\u6709\u6570\u636e\u6216\u8005\u91cd\u65b0\u6536\u96c6\u8fd9\u4e9b\u6570\u636e\n\u53e6\u5916\uff0c\u5f88\u591a\u56fe\u90fdskew to the right\uff0c\u5728\u673a\u5668\u5b66\u4e60\u4e2d\u6211\u4eec\u66f4\u504f\u5411\u4e8e\u5c06\u5176\u7edf\u4e00\u6210\u6b63\u6001\u5206\u5e03\u4ee5\u63d0\u9ad8\u8bad\u7ec3\u7684\u51c6\u786e\u5ea6","2292e246":"### \u4f46\u662f\u4ee5\u4e0a\u65b9\u6cd5\u5e26\u6765\u7684\u95ee\u9898\u662f\uff0c\u5f53\u673a\u5668\u5b66\u4e60\u78b0\u5230\u7c7b\u522b1 \u548c2 \u65f6\uff0c\u7b97\u6cd5\u4f1a\u8ba4\u4e3a1 \u548c 2 \u6bd41 \u548c4 \u66f4\u4e3a\u76f8\u4f3c\u3002\n\n### \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5f15\u5165dummy variable: OneHotEncoder","147592f5":"housing.dropna(subset= ['total_bedrooms']) #1\nhousing.drop('total_bedrooms',axis=1) #2\nmedian=housing['total_bedrooms'].median() #3\nhousing[\"total_bedrooms\"].fillna(median)","e9ab03df":"\u731c\u6d4b\uff1a\u4ee5\u4e0a\u6b65\u9aa4\u662f\u4e3a\u4e86\u6bd4\u8f83\u6240\u6709\u6570\u636e\u7684\u4e2d\u4f4d\u6570\u662f\u5426\u548cimputer\u5f97\u5230\u7684\u4e2d\u4f4d\u6570\u76f8\u540c\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u65b0\u6570\u636e\u8f93\u5165\u8fdb\u6765\u4e4b\u540e\u4e2d\u4f4d\u6570\u6709\u6240\u6539\u53d8\u5bfc\u81f4\u7684\u7ed3\u679c\u4e0d\u4e00\u81f4","6c2b5ca7":"### \u786e\u5b9a\u51b3\u7b56\u6811\u7684\u786e\u662f\u8fc7\u5ea6\u62df\u5408\u4e86\uff01"}}