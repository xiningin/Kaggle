{"cell_type":{"994bc5a1":"code","0426889c":"code","e65cec94":"code","c210c189":"code","8b32a159":"code","d42eeead":"code","964f3bf9":"code","3c8b4d30":"code","fc57b4f6":"code","9d74fec0":"code","9ce4b56e":"code","e8ecd164":"code","0bbf3814":"code","0578a444":"code","4ea05529":"code","56ad518f":"code","60b23456":"code","20f63166":"markdown","7361896e":"markdown","bbbbdc0f":"markdown","a3fba51c":"markdown","e730255e":"markdown","6921ef6f":"markdown","49e96840":"markdown","881e6943":"markdown","595f287b":"markdown","6b185321":"markdown"},"source":{"994bc5a1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n#Visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline        \n\n#DS\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\n\n#ML\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.utils import shuffle","0426889c":"gender_submission = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","e65cec94":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_df.head(5)","c210c189":"test_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_df.head(5)","8b32a159":"train_df.drop(['PassengerId'], axis=1, inplace=True)\ntrain_df.describe()","d42eeead":"train_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","964f3bf9":"train_df[[\"Pclass\", \"Survived\"]].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","3c8b4d30":"train_df['Sex_clean'] = train_df['Sex'].astype('category').cat.codes\ntest_df['Sex_clean'] = test_df['Sex'].astype('category').cat.codes","fc57b4f6":"train_df['Embarked'].fillna('S', inplace=True)\n\ntrain_df['Embarked_clean'] = train_df['Embarked'].astype('category').cat.codes\ntest_df['Embarked_clean'] = test_df['Embarked'].astype('category').cat.codes","9d74fec0":"train_df['Family'] = 1 + train_df['SibSp'] + train_df['Parch']\ntest_df['Family'] = 1 + test_df['SibSp'] + test_df['Parch']\n\ntrain_df['Solo'] = (train_df['Family'] == 1)\ntest_df['Solo'] = (test_df['Family'] == 1)","9ce4b56e":"train_df['FareBin'] = pd.qcut(train_df['Fare'], 5)\ntest_df['FareBin'] = pd.qcut(test_df['Fare'], 5)\n\ntrain_df['Fare_clean'] = train_df['FareBin'].astype('category').cat.codes\ntest_df['Fare_clean'] = test_df['FareBin'].astype('category').cat.codes","e8ecd164":"train_df['Title'] = train_df['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\ntest_df['Title'] = test_df['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\n\ntrain_df['Title'] = train_df['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Other')\ntest_df['Title'] = test_df['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Other')\n\ntrain_df['Title'] = train_df['Title'].replace('Mlle', 'Miss')\ntrain_df['Title'] = train_df['Title'].replace('Ms', 'Miss')\ntrain_df['Title'] = train_df['Title'].replace('Mme', 'Mrs')\n\ntest_df['Title'] = test_df['Title'].replace('Mlle', 'Miss')\ntest_df['Title'] = test_df['Title'].replace('Ms', 'Miss')\ntest_df['Title'] = test_df['Title'].replace('Mme', 'Mrs')\n\ntrain_df['Title_clean'] = train_df['Title'].astype('category').cat.codes\ntest_df['Title_clean'] = test_df['Title'].astype('category').cat.codes","0bbf3814":"train_df[\"Age\"].fillna(train_df.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest_df[\"Age\"].fillna(test_df.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\n\ntrain_df.loc[ train_df['Age'] <= 10, 'Age_clean'] = 0\ntrain_df.loc[(train_df['Age'] > 10) & (train_df['Age'] <= 16), 'Age_clean'] = 1\ntrain_df.loc[(train_df['Age'] > 16) & (train_df['Age'] <= 20), 'Age_clean'] = 2\ntrain_df.loc[(train_df['Age'] > 20) & (train_df['Age'] <= 26), 'Age_clean'] = 3\ntrain_df.loc[(train_df['Age'] > 26) & (train_df['Age'] <= 30), 'Age_clean'] = 4\ntrain_df.loc[(train_df['Age'] > 30) & (train_df['Age'] <= 36), 'Age_clean'] = 5\ntrain_df.loc[(train_df['Age'] > 36) & (train_df['Age'] <= 40), 'Age_clean'] = 6\ntrain_df.loc[(train_df['Age'] > 40) & (train_df['Age'] <= 46), 'Age_clean'] = 7\ntrain_df.loc[(train_df['Age'] > 46) & (train_df['Age'] <= 50), 'Age_clean'] = 8\ntrain_df.loc[(train_df['Age'] > 50) & (train_df['Age'] <= 60), 'Age_clean'] = 9\ntrain_df.loc[ train_df['Age'] > 60, 'Age_clean'] = 10\n\n# Test\ntest_df.loc[ test_df['Age'] <= 10, 'Age_clean'] = 0\ntest_df.loc[(test_df['Age'] > 10) & (test_df['Age'] <= 16), 'Age_clean'] = 1\ntest_df.loc[(test_df['Age'] > 16) & (test_df['Age'] <= 20), 'Age_clean'] = 2\ntest_df.loc[(test_df['Age'] > 20) & (test_df['Age'] <= 26), 'Age_clean'] = 3\ntest_df.loc[(test_df['Age'] > 26) & (test_df['Age'] <= 30), 'Age_clean'] = 4\ntest_df.loc[(test_df['Age'] > 30) & (test_df['Age'] <= 36), 'Age_clean'] = 5\ntest_df.loc[(test_df['Age'] > 36) & (test_df['Age'] <= 40), 'Age_clean'] = 6\ntest_df.loc[(test_df['Age'] > 40) & (test_df['Age'] <= 46), 'Age_clean'] = 7\ntest_df.loc[(test_df['Age'] > 46) & (test_df['Age'] <= 50), 'Age_clean'] = 8\ntest_df.loc[(test_df['Age'] > 50) & (test_df['Age'] <= 60), 'Age_clean'] = 9\ntest_df.loc[ test_df['Age'] > 60, 'Age_clean'] = 10","0578a444":"cabin = {\n    'A': 0,\n    'B': 1,\n    'C': 2,\n    'D': 3,\n    'E': 4,\n    'F': 5,\n    'G': 6,\n    'T': 7\n}\n\ntrain_df['Cabin_clean'] = train_df['Cabin'].str[:1]\ntrain_df['Cabin_clean'] = train_df['Cabin_clean'].map(cabin)\ntrain_df['Cabin_clean'] = train_df.groupby('Pclass')['Cabin_clean'].transform('median')\n\ntest_df['Cabin_clean'] = test_df['Cabin'].str[:1]\ntest_df['Cabin_clean'] = test_df['Cabin_clean'].map(cabin)\ntest_df['Cabin_clean'] = test_df.groupby('Pclass')['Cabin_clean'].transform('median')","4ea05529":"feature = [\n    'Pclass',\n    'SibSp',\n    'Parch',\n    'Sex_clean',\n    'Embarked_clean',\n    'Family',\n    'Title_clean',\n    'Age_clean',\n    'Cabin_clean',\n    'Fare_clean',\n]\n\nlabel = [\n    'Survived',\n]","56ad518f":"from sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\n\nX_train = train_df[feature]\nY_train = train_df[label]\nY_train = Y_train.values.ravel()\nX_test = test_df[feature]\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)\n\nclf = RandomForestClassifier(n_estimators=1000, max_depth=5, random_state=0)\ncross_val_score(clf, X_train, Y_train, cv=k_fold, scoring='accuracy', ).mean()","60b23456":"clf.fit(X_train, Y_train)\ngender_submission['Survived'] = clf.predict(X_test)\ngender_submission.to_csv('submission_update.csv',index=False)","20f63166":"**Survivial rate based on gender**","7361896e":"**Fare**","bbbbdc0f":"**Cabin**","a3fba51c":"**Survival rate based on Pclass**","e730255e":"**Sex**","6921ef6f":"**Feature \/ Label**","49e96840":"**Family**","881e6943":"**Age**","595f287b":"**Embarked**","6b185321":"**Title**"}}