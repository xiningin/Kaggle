{"cell_type":{"a5df892f":"code","8605456e":"code","22b8f8a0":"code","fec598b8":"code","add926de":"code","39075ffb":"code","96246707":"code","39ebf5ca":"markdown","4ed7cd9f":"markdown","35b5caa4":"markdown","0af81cb9":"markdown","c3d7c2e7":"markdown"},"source":{"a5df892f":"# Read dataset\n# Note: only majority-English speaking countries are analyzed,\n# because the detector was trained only on English headlines.\n\nimport pandas as pd\n\nCA = pd.read_csv(\"..\/input\/youtube-new\/CAvideos.csv\")\nUS = pd.read_csv(\"..\/input\/youtube-new\/USvideos.csv\")\nGB = pd.read_csv(\"..\/input\/youtube-new\/GBvideos.csv\")\n\n# Annotate each country's respective trending videos ...\nCA['country'] = \"Canada\"\nUS['country'] = \"United States\"\nGB['country'] = \"Great Britain\"\n\n# ... and merge them into one dataframe ...\ntitle_df = pd.concat([\n    CA[['country', 'title', 'category_id']],\n    US[['country', 'title', 'category_id']],\n    GB[['country', 'title', 'category_id']]\n]).reset_index(drop = True)\n\n# ... and display.\ntitle_df","8605456e":"# Read categories from JSON ...\nimport json\nwith open(\"\/kaggle\/input\/youtube-new\/US_category_id.json\") as f:\n    category = json.load(f)\n\n# ... then create a dictionary that maps category_id\n# into a human-readable category ...\ncategory_id = {item['id']: item['snippet']['title']\n               for item in category['items']}\n\n# ... and show the resulting dictionary.\ncategory_id","22b8f8a0":"# Change category_id into human-readable category string\n# using the dictionary created in previous cell\ntitle_df['category'] = title_df['category_id'].astype(str).replace(category_id)\ntitle_df","fec598b8":"# Import necessary classes ...\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.pipeline import make_pipeline\nfrom pickle import load\n\n# ... and load the pretrained feature extractor and model...\nwith open('..\/input\/reusable-simple-classifiers-95-cv-acc\/tfidfvectorizer.pkl', 'rb') as f:\n    vec = load(f)\n\nwith open('..\/input\/reusable-simple-classifiers-95-cv-acc\/gradientboostingclf.pkl', 'rb') as f:\n    gb_clf = load(f)\n\n# ... then put (feature extractor, classifier) into pipeline\n# so feature extraction will happen automatically on prediction.\nmodel_pipeline = make_pipeline(vec, gb_clf)","add926de":"# Use the pretrained clickbait classifier to predict\n# the probability of a video having clickbaity title ...\ntitle_df['clickbaitiness'] = model_pipeline.predict_proba(title_df['title'])[:, 1]\n\n# ... and divide into eleven 'levels' of clickbaitiness 0 to 10\ntitle_df['clickbait_level'] = pd.cut(title_df['clickbaitiness'], 11, labels = False)\ntitle_df","39075ffb":"# Finally some visualization.\n# Plot the distribution of clickbaitiness over trending videos in\n# Canada, United States, and Great Britain\nimport seaborn as sns\n\nsns.kdeplot(data = title_df, x = 'clickbaitiness', hue = 'country')","96246707":"# Separate non-clickbait and very clickbait videos\nvery_clickbait = title_df[title_df['clickbait_level'] > 8]\nnot_clickbait = title_df[title_df['clickbait_level'] < 2]\n\n\nfrom matplotlib import pyplot as plt\n\n# Make a plot about these two groups.\n# Define a side-by-side subplots ...\nfig, ax = plt.subplots(1, 2, figsize = (15, 5))\n\n# .. make one graph, put it on ax[0]; first subplot, left side ...\nsns.countplot(\n    data = not_clickbait, y = 'category', ax = ax[0],\n    order = sorted(not_clickbait['category'].unique())\n).set_title('Trending video, but LOW clickbait level (0-1)')\n\n# ... and make the other graph, put it on ax[1]; second subplot, right side ...\nsns.countplot(\n    data = very_clickbait, y = 'category', ax = ax[1],\n    order = sorted(very_clickbait['category'].unique())\n).set_title('Trending video, HIGH clickbait level (9-10)')\n\n# ... and setup the axis ranges to get better right-left view ...\n_, xmax_left = ax[0].get_xlim()\n_, xmax_right = ax[1].get_xlim()\n\nxmax = max(xmax_left, xmax_right)\n\n# ... then set the ranges on x-axis ...\n# (note: this reverses the left plot so it \"grows to the left\")\nax[0].set_xlim(xmax, 0)\nax[1].set_xlim(0, xmax)\n\n# ... manage the label positions of the rightside plot ...\n# (this moves the label and tick to the right, clearing the middle gap\n# between two plots)\nax[1].yaxis.set_label_position('right')\nax[1].yaxis.tick_right()\n\n# ... and lastly keep the two plots tight (not overly spaced).\nplt.tight_layout()","39ebf5ca":"It looks like most of trending videos are either not clickbaity at all *or* very clickbaity. Most have near 0% or near 100% predicted clickbaitiness. Some other videos lie in-between.\n\nRelative by country, trending in United States has slightly more clickbait videos. The distribution of density is higher on 1.0 and lower on 0.0 compared to other English-speaking countries, although it is to be noted that this difference is slight and the overall shape of distribution is similar.\n\nThe interesting question is then: **why such two major groups?** If there are two groups of trending videos (clickbait and not clickbait), **what are those videos from both groups like?**\n\n<br>\n\nNote: I have strong suspicion that non-clickbait but trending videos are *music videos*. Let's do some visualization.","4ed7cd9f":"It is shown that category **Music** dominates the non-clickbait portion of trending videos. Yeah, it's sure right. Music videos kind of show up in trending easily because ... it's *music*. It's listenable, repeatable, etc. Titles of music videos are generally not for luring and baiting clicks.\n\nIn other news, we get to see the categories that make up trending. **Entertainment** dominates on both non-clickbait (behind Music) and clickbait groups. Entertainment is the one category that uses clickbait titles the most times (see graph on right, Entertainment is the longest among the rest.)\n\nIt's good to see some **Science and Technology** and **Education**-tagged videos are on trending. Although not on par with other non-Educational categories, it's still heartwarming to know.","35b5caa4":"# Visuals: the *clickbaitiness* of trending videos","0af81cb9":"# Introduction\n\nIn this notebook, we will attempt to show whether clickbait is consistently enough to make trending.\n\nThe challenge on determining if a video can be classified as clickbait is that we don't have a variable denoting it in this dataset; we'll need try to use some other methods.\n\nLucky for us, there exists a clickbait and non-clickbait title collections dataset here on Kaggle, which then I used (prior to this notebook) to train simple clickbait detectors. We can attempt to use that.\n\nI try to keep this notebook as light and fun as possible. Let's go!","c3d7c2e7":"# Remarks and Closing\n\nIt is worth remembering that the pretrained clickbait detector may not perfectly pick up YouTube-specific clickbaits because it was fitted using dataset of clickbait vs non-clickbait **article\/news headlines**.\n\nThere are a lot more to explore about YouTube trending section:\n\n- Does Entertainment *really* have that many trending videos? Do they really belong to category Entertainment, or is it just because Entertainment is such a catch-all term? After all, the entire YouTube is, to some extent, *entertainment*.\n\n- Are videos still new or'recently posted' by the time it goes trending? Can old videos go trending?\n\n- ...\n\nHowever, I'll stop here to keep this notebook simple and not too overwhelming.\n\nI hope this notebook has been useful and fun. Feel free to upvote and fork if you like what I'm doing. Have fun and happy data-sciencing!"}}