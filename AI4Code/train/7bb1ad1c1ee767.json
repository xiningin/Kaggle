{"cell_type":{"a5bd7774":"code","925dffd6":"code","faf3e1a4":"code","342f0832":"code","0a9fd22b":"code","3e2cbb9b":"code","e04976de":"code","787462c8":"code","73d20c34":"code","7a203d19":"code","139b60d1":"code","4afe4a5e":"code","83ad12d0":"code","5876b8a1":"code","0d974b89":"code","42917be5":"code","bb99e2b0":"code","7782bb66":"code","c0fd20d6":"code","d0f870f1":"code","6126b678":"code","f4a62ae9":"code","d5a74e28":"code","5eba944e":"code","a9ac933c":"code","20024540":"code","adc8a868":"code","3e83481a":"code","fdd0f8e8":"code","3e4bb980":"code","3893e1ed":"code","4f3bcb5c":"code","c77088ab":"code","14258975":"code","0a7feb62":"code","68332173":"code","1d036d02":"code","06506e50":"code","7fed1e13":"code","ad0b4186":"code","6873397e":"code","d8152490":"code","74ac2396":"code","2534225a":"code","37f1c90b":"code","b176e751":"code","e99b72a0":"code","8d03ddb0":"code","a398fa18":"code","2b9a303c":"code","94c47a02":"code","7fe5740f":"code","10f11460":"code","a32f287a":"code","ec9a087c":"code","bbae7313":"code","23832a42":"code","3924e6e6":"code","70beca3f":"code","104b2db1":"code","d59c44b5":"code","963eddc9":"code","e679612d":"code","1be84d04":"code","20a0904b":"code","2c999747":"code","9fccb05f":"code","eedd3e33":"code","65f61e41":"code","c122fdac":"code","455c4d85":"code","2e401586":"code","4c4d4d82":"code","a688a61d":"code","cec11c94":"code","f182218b":"code","468c38e9":"code","f5632244":"code","2378aab0":"code","ec1484ab":"code","64d3bd9b":"code","19e66334":"code","51ccad72":"code","c1c5c7ab":"code","b092a72c":"code","1f19792e":"code","640e2fb5":"code","26b0401e":"code","054f7613":"code","c4a650db":"code","3e0e2528":"code","48a6e5c5":"code","7aaefb1f":"code","93e5f5c7":"code","ab516bf4":"code","145f672d":"code","c54488eb":"code","cd45384a":"code","3b23afbe":"code","72780c29":"code","cf4a62a4":"code","1851c90f":"code","7560ce90":"code","e2e96253":"code","7e0c84be":"code","9a42b612":"code","3b2490cb":"code","c7d1f957":"code","fd953115":"code","f13dbc88":"code","ab5e5d14":"code","cead43df":"code","c04b0764":"code","e6c4ffe0":"code","b5719269":"code","981a6e13":"code","8b3cb505":"code","09302b31":"code","96442972":"code","cf2dcec6":"code","a4a642c5":"code","47902622":"code","4c2bf81a":"code","73268c5c":"code","5c9a019f":"code","1979599d":"code","e5cc12f9":"code","031defe2":"code","b9a0a7a4":"code","05215f87":"code","7807cd9a":"code","be2660a4":"code","83602a61":"code","7725499c":"code","c0a2c3a5":"code","ca44b7b5":"code","c5eafbe1":"code","a9920b58":"code","a1281324":"code","85f19328":"code","f7e17233":"code","8ee01514":"code","6d880af3":"code","ce8b8e95":"code","dbac5037":"code","4e73190d":"code","41a3c744":"code","68a75847":"code","88819472":"code","60211bc6":"code","5835f824":"code","9101591b":"code","6fc189cb":"code","af9b225a":"code","85c153d2":"code","55bb4bb6":"code","413e3932":"code","96a507cf":"code","6e9f65b0":"markdown","ab6f5eaf":"markdown","e8063f4e":"markdown","35c4b481":"markdown","2b0e30f8":"markdown","5209a978":"markdown","052930b5":"markdown","bd06d2fe":"markdown","5b1ded2b":"markdown","0f1131f3":"markdown","55b67ad8":"markdown","5ffa3b6d":"markdown","59df55bb":"markdown","315a160a":"markdown","c70b955d":"markdown","336ca6e6":"markdown","9672e6f4":"markdown","1eaf9719":"markdown","e1d9bd16":"markdown","b74f060b":"markdown","af45c32b":"markdown","8b28ccde":"markdown","1e2bafe9":"markdown","90f1adbc":"markdown","e9dbb69a":"markdown","33e991f1":"markdown","64d53027":"markdown","6a384c69":"markdown","c6f3df32":"markdown","0e563681":"markdown","81e409d0":"markdown","72c24c4a":"markdown","3697bbbb":"markdown","1f333acb":"markdown","e2e48068":"markdown","d8138607":"markdown","7508c55f":"markdown","a2764426":"markdown","699276b5":"markdown","42107a90":"markdown","83a9c589":"markdown","4c500bad":"markdown","e2e2669a":"markdown","879b944f":"markdown","f4b20a46":"markdown","8eb52510":"markdown","46ed0d02":"markdown","8b249084":"markdown","51444065":"markdown","eb205868":"markdown","1cf2a0e3":"markdown","512a10f4":"markdown","3b6a3a04":"markdown","b84070fb":"markdown","b43ea8da":"markdown","dc238a14":"markdown","e97ec81c":"markdown","3263b550":"markdown","5dc837e8":"markdown","6ec78980":"markdown","8591beed":"markdown","18bdcc74":"markdown","3796c739":"markdown","d0124701":"markdown","77ea88e1":"markdown","cd64eb9c":"markdown","2d854a7a":"markdown","6a02cac8":"markdown","2dcba249":"markdown","11ff2e61":"markdown","7289a253":"markdown","e7db6317":"markdown","6f17d413":"markdown"},"source":{"a5bd7774":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set_style('darkgrid')\nfrom wordcloud import WordCloud\nfrom datetime import datetime\nimport os \nimport datetime\nfrom collections import Counter\nimport ast\nimport os\npd.set_option(\"display.max_columns\", 120)\npd.set_option(\"display.max_rows\", 120)","925dffd6":"train = pd.read_csv('..\/input\/tmdb-box-office-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/tmdb-box-office-prediction\/test.csv')\nsubmission = pd.read_csv(\"..\/input\/tmdb-box-office-prediction\/sample_submission.csv\")","faf3e1a4":"train","342f0832":"train.shape","0a9fd22b":"test.shape","3e2cbb9b":"train = train.drop(['poster_path'],axis = 1)\ntest = test.drop(['poster_path'],axis = 1)","e04976de":"train.loc[train['id'] == 16,'revenue'] = 192864          # Skinning\ntrain.loc[train['id'] == 90,'budget'] = 30000000         # Sommersby          \ntrain.loc[train['id'] == 118,'budget'] = 60000000        # Wild Hogs\ntrain.loc[train['id'] == 149,'budget'] = 18000000        # Beethoven\ntrain.loc[train['id'] == 313,'revenue'] = 12000000       # The Cookout \ntrain.loc[train['id'] == 451,'revenue'] = 12000000       # Chasing Liberty\ntrain.loc[train['id'] == 464,'budget'] = 20000000        # Parenthood\ntrain.loc[train['id'] == 470,'budget'] = 13000000        # The Karate Kid, Part II\ntrain.loc[train['id'] == 513,'budget'] = 930000          # From Prada to Nada\ntrain.loc[train['id'] == 797,'budget'] = 8000000         # Welcome to Dongmakgol\ntrain.loc[train['id'] == 819,'budget'] = 90000000        # Alvin and the Chipmunks: The Road Chip\ntrain.loc[train['id'] == 850,'budget'] = 90000000        # Modern Times\ntrain.loc[train['id'] == 1007,'budget'] = 2              # Zyzzyx Road \ntrain.loc[train['id'] == 1112,'budget'] = 7500000        # An Officer and a Gentleman\ntrain.loc[train['id'] == 1131,'budget'] = 4300000        # Smokey and the Bandit   \ntrain.loc[train['id'] == 1359,'budget'] = 10000000       # Stir Crazy \ntrain.loc[train['id'] == 1542,'budget'] = 1              # All at Once\ntrain.loc[train['id'] == 1570,'budget'] = 15800000       # Crocodile Dundee II\ntrain.loc[train['id'] == 1571,'budget'] = 4000000        # Lady and the Tramp\ntrain.loc[train['id'] == 1714,'budget'] = 46000000       # The Recruit\ntrain.loc[train['id'] == 1721,'budget'] = 17500000       # Cocoon\ntrain.loc[train['id'] == 1865,'revenue'] = 25000000      # Scooby-Doo 2: Monsters Unleashed\ntrain.loc[train['id'] == 1885,'budget'] = 12             # In the Cut\ntrain.loc[train['id'] == 2091,'budget'] = 10             # Deadfall\ntrain.loc[train['id'] == 2268,'budget'] = 17500000       # Madea Goes to Jail budget\ntrain.loc[train['id'] == 2491,'budget'] = 6              # Never Talk to Strangers\ntrain.loc[train['id'] == 2602,'budget'] = 31000000       # Mr. Holland's Opus\ntrain.loc[train['id'] == 2612,'budget'] = 15000000       # Field of Dreams\ntrain.loc[train['id'] == 2696,'budget'] = 10000000       # Nurse 3-D\ntrain.loc[train['id'] == 2801,'budget'] = 10000000       # Fracture\ntrain.loc[train['id'] == 335,'budget'] = 2 \ntrain.loc[train['id'] == 348,'budget'] = 12\ntrain.loc[train['id'] == 470,'budget'] = 13000000 \ntrain.loc[train['id'] == 513,'budget'] = 1100000\ntrain.loc[train['id'] == 640,'budget'] = 6 \ntrain.loc[train['id'] == 696,'budget'] = 1\ntrain.loc[train['id'] == 797,'budget'] = 8000000 \ntrain.loc[train['id'] == 850,'budget'] = 1500000\ntrain.loc[train['id'] == 1199,'budget'] = 5 \ntrain.loc[train['id'] == 1282,'budget'] = 9               # Death at a Funeral\ntrain.loc[train['id'] == 1347,'budget'] = 1\ntrain.loc[train['id'] == 1755,'budget'] = 2\ntrain.loc[train['id'] == 1801,'budget'] = 5\ntrain.loc[train['id'] == 1918,'budget'] = 592 \ntrain.loc[train['id'] == 2033,'budget'] = 4\ntrain.loc[train['id'] == 2118,'budget'] = 344 \ntrain.loc[train['id'] == 2252,'budget'] = 130\ntrain.loc[train['id'] == 2256,'budget'] = 1 \ntrain.loc[train['id'] == 2696,'budget'] = 10000000\n\n\ntest.loc[test['id'] == 6733,'budget'] = 5000000\ntest.loc[test['id'] == 3889,'budget'] = 15000000\ntest.loc[test['id'] == 6683,'budget'] = 50000000\ntest.loc[test['id'] == 5704,'budget'] = 4300000\ntest.loc[test['id'] == 6109,'budget'] = 281756\ntest.loc[test['id'] == 7242,'budget'] = 10000000\ntest.loc[test['id'] == 7021,'budget'] = 17540562       #  Two Is a Family\ntest.loc[test['id'] == 5591,'budget'] = 4000000        # The Orphanage\ntest.loc[test['id'] == 4282,'budget'] = 20000000       # Big Top Pee-wee\ntest.loc[test['id'] == 3033,'budget'] = 250 \ntest.loc[test['id'] == 3051,'budget'] = 50\ntest.loc[test['id'] == 3084,'budget'] = 337\ntest.loc[test['id'] == 3224,'budget'] = 4  \ntest.loc[test['id'] == 3594,'budget'] = 25  \ntest.loc[test['id'] == 3619,'budget'] = 500  \ntest.loc[test['id'] == 3831,'budget'] = 3  \ntest.loc[test['id'] == 3935,'budget'] = 500  \ntest.loc[test['id'] == 4049,'budget'] = 995946 \ntest.loc[test['id'] == 4424,'budget'] = 3  \ntest.loc[test['id'] == 4460,'budget'] = 8  \ntest.loc[test['id'] == 4555,'budget'] = 1200000 \ntest.loc[test['id'] == 4624,'budget'] = 30 \ntest.loc[test['id'] == 4645,'budget'] = 500 \ntest.loc[test['id'] == 4709,'budget'] = 450 \ntest.loc[test['id'] == 4839,'budget'] = 7\ntest.loc[test['id'] == 3125,'budget'] = 25 \ntest.loc[test['id'] == 3142,'budget'] = 1\ntest.loc[test['id'] == 3201,'budget'] = 450\ntest.loc[test['id'] == 3222,'budget'] = 6\ntest.loc[test['id'] == 3545,'budget'] = 38\ntest.loc[test['id'] == 3670,'budget'] = 18\ntest.loc[test['id'] == 3792,'budget'] = 19\ntest.loc[test['id'] == 3881,'budget'] = 7\ntest.loc[test['id'] == 3969,'budget'] = 400\ntest.loc[test['id'] == 4196,'budget'] = 6\ntest.loc[test['id'] == 4221,'budget'] = 11\ntest.loc[test['id'] == 4222,'budget'] = 500\ntest.loc[test['id'] == 4285,'budget'] = 11\ntest.loc[test['id'] == 4319,'budget'] = 1\ntest.loc[test['id'] == 4639,'budget'] = 10\ntest.loc[test['id'] == 4719,'budget'] = 45\ntest.loc[test['id'] == 4822,'budget'] = 22\ntest.loc[test['id'] == 4829,'budget'] = 20\ntest.loc[test['id'] == 4969,'budget'] = 20\ntest.loc[test['id'] == 5021,'budget'] = 40 \ntest.loc[test['id'] == 5035,'budget'] = 1 \ntest.loc[test['id'] == 5063,'budget'] = 14 \ntest.loc[test['id'] == 5119,'budget'] = 2 \ntest.loc[test['id'] == 5214,'budget'] = 30 \ntest.loc[test['id'] == 5221,'budget'] = 50 \ntest.loc[test['id'] == 4903,'budget'] = 15\ntest.loc[test['id'] == 4983,'budget'] = 3\ntest.loc[test['id'] == 5102,'budget'] = 28\ntest.loc[test['id'] == 5217,'budget'] = 75\ntest.loc[test['id'] == 5224,'budget'] = 3 \ntest.loc[test['id'] == 5469,'budget'] = 20 \ntest.loc[test['id'] == 5840,'budget'] = 1 \ntest.loc[test['id'] == 5960,'budget'] = 30\ntest.loc[test['id'] == 6506,'budget'] = 11 \ntest.loc[test['id'] == 6553,'budget'] = 280\ntest.loc[test['id'] == 6561,'budget'] = 7\ntest.loc[test['id'] == 6582,'budget'] = 218\ntest.loc[test['id'] == 6638,'budget'] = 5\ntest.loc[test['id'] == 6749,'budget'] = 8 \ntest.loc[test['id'] == 6759,'budget'] = 50 \ntest.loc[test['id'] == 6856,'budget'] = 10\ntest.loc[test['id'] == 6858,'budget'] =  100\ntest.loc[test['id'] == 6876,'budget'] =  250\ntest.loc[test['id'] == 6972,'budget'] = 1\ntest.loc[test['id'] == 7079,'budget'] = 8000000\ntest.loc[test['id'] == 7150,'budget'] = 118\ntest.loc[test['id'] == 6506,'budget'] = 118\ntest.loc[test['id'] == 7225,'budget'] = 6\ntest.loc[test['id'] == 7231,'budget'] = 85\ntest.loc[test['id'] == 5222,'budget'] = 5\ntest.loc[test['id'] == 5322,'budget'] = 90\ntest.loc[test['id'] == 5350,'budget'] = 70\ntest.loc[test['id'] == 5378,'budget'] = 10\ntest.loc[test['id'] == 5545,'budget'] = 80\ntest.loc[test['id'] == 5810,'budget'] = 8\ntest.loc[test['id'] == 5926,'budget'] = 300\ntest.loc[test['id'] == 5927,'budget'] = 4\ntest.loc[test['id'] == 5986,'budget'] = 1\ntest.loc[test['id'] == 6053,'budget'] = 20\ntest.loc[test['id'] == 6104,'budget'] = 1\ntest.loc[test['id'] == 6130,'budget'] = 30\ntest.loc[test['id'] == 6301,'budget'] = 150\ntest.loc[test['id'] == 6276,'budget'] = 100\ntest.loc[test['id'] == 6473,'budget'] = 100\ntest.loc[test['id'] == 6842,'budget'] = 30\ntest.loc[test['id'] == 3829,'release_date'] = '05\/01\/2000'","787462c8":"train.info()","73d20c34":"train.describe()","7a203d19":"train.isna().sum()","139b60d1":"test.isna().sum()","4afe4a5e":"dict_columns = ['belongs_to_collection', 'genres', 'production_companies',\n                'production_countries', 'spoken_languages', 'Keywords', 'cast', 'crew']\n\ndef text_to_dict(df):\n    for column in dict_columns:\n        df[column] = df[column].apply(lambda x: {} if pd.isna(x) else ast.literal_eval(x) )\n    return df\n        \ntrain = text_to_dict(train)\ntest = text_to_dict(test)","83ad12d0":"train['runtime']=train['runtime'].fillna(train['runtime'].mean())\ntest['runtime']=test['runtime'].fillna(test['runtime'].mean())","5876b8a1":"sns.jointplot(x='budget',y='revenue',data = train,kind = 'reg', height=11, ratio=4,\n             joint_kws = {'ci' : None});","0d974b89":"sns.jointplot(x='popularity',y='revenue',data = train, height=11, ratio=4);","42917be5":"sns.jointplot(x=\"runtime\", y=\"revenue\", data=train, height=11, ratio=4);","bb99e2b0":"train.revenue.describe()","7782bb66":"sns.distplot(train.revenue)","c0fd20d6":"test['budget']=np.log1p(test['budget'])\ntrain['budget']=np.log1p(train['budget'])\n\ntrain['revenue']=np.log1p(train['revenue'])","d0f870f1":"sns.distplot(train.revenue)","6126b678":"# splitting the 'release_date' string to month, date and year\ntrain[['release_month','release_day','release_year']]=train['release_date'].str.split('\/',expand=True).replace(np.nan, -1).astype(int)\n# the dataset consists of data from 1900s to 2017 \n# so since we are only goven the year in 2 digits we add the respective centuries (eg : 12 -> 2012 )\n\ntrain.loc[ (train['release_year'] <= 20) & (train['release_year'] < 100), \"release_year\"] += 2000\n# eg: 75 -> 1975\ntrain.loc[ (train['release_year'] > 20)  & (train['release_year'] < 100), \"release_year\"] += 1900\n# getting the day of week and quarter of the year\nreleaseDate = pd.to_datetime(train['release_date']) \ntrain['release_dayofweek'] = releaseDate.dt.dayofweek\ntrain['release_quarter'] = releaseDate.dt.quarter","f4a62ae9":"# same for the test set\ntest[['release_month','release_day','release_year']]=test['release_date'].str.split('\/',expand=True).replace(np.nan, -1).astype(int)\ntest.loc[ (test['release_year'] <= 20) & (test['release_year'] < 100), \"release_year\"] += 2000\ntest.loc[ (test['release_year'] > 20)  & (test['release_year'] < 100), \"release_year\"] += 1900\nreleaseDate = pd.to_datetime(test['release_date']) \ntest['release_dayofweek'] = releaseDate.dt.dayofweek\ntest['release_quarter'] = releaseDate.dt.quarter","d5a74e28":"plt.figure(figsize = (18,12))\nsns.countplot(train['release_year'].sort_values())\nplt.title(\"Movie releases by year\")\nplt.xticks(fontsize=12,rotation=90)\nplt.show()","5eba944e":"plt.figure(figsize=(18,12))\nsns.countplot(train['release_month'].sort_values())\nplt.title(\"Release Month Count\")\nloc, labels = plt.xticks()\nloc, labels = loc, [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\nplt.xticks(loc, labels,fontsize=20)\nplt.show()","a9ac933c":"plt.figure(figsize=(20,12))\nsns.countplot(train['release_day'].sort_values())\nplt.title(\"Release Day Count\")\nplt.xticks(fontsize=20)\nplt.show()","20024540":"plt.figure(figsize=(18,12))\nsns.countplot(train['release_dayofweek'].sort_values())\nplt.title(\"Total movies released on Day Of Week\",fontsize=20)\nloc, labels = plt.xticks()\nloc, labels = loc, [\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\",\"Sun\"]\nplt.xticks(loc, labels,fontsize=20)\nplt.show()","adc8a868":"plt.figure(figsize=(20,12))\nsns.countplot(train['release_quarter'].sort_values())\nplt.title(\"Total movies released in a quarter\",fontsize=20)\nplt.xticks(ticks=[0,1,2,3],labels=['Jan-Mar','Apr-June','july-Sept','oct-dec'])\nplt.show()","3e83481a":"plt.figure(figsize= (18,12))\nsns.lineplot(x='release_year',y='revenue',data = train)\nplt.title(\"Release year vs Revenue\")\nplt.show()","fdd0f8e8":"plt.figure(figsize= (18,12))\nsns.lineplot(x='release_year',y='budget',data = train)\nplt.title(\"Release year vs Budget\")\nplt.show()","3e4bb980":"plt.figure(figsize= (18,12))\nsns.lineplot(x='release_year',y='budget',data = train,label = 'budget')\nsns.lineplot(x='release_year',y='revenue',data = train,label = 'revenue')\nplt.legend()\nplt.show()","3893e1ed":"plt.figure(figsize= (18,12))\nsns.lineplot(x='release_month',y='revenue',data = train)\nplt.title(\"Release month vs Revenue\")\nplt.show()","4f3bcb5c":"plt.figure(figsize= (18,12))\nsns.lineplot(x='release_dayofweek',y='revenue',data = train)\nplt.title(\"Release day vs Revenue\")\nplt.show()","c77088ab":"plt.figure(figsize= (18,12))\nsns.lineplot(x='release_year',y='runtime',data = train)\nplt.title(\"Release year vs Runtime\")\nplt.show()","14258975":"plt.figure(figsize= (18,12))\nsns.lineplot(x='release_year',y='popularity',data = train)\nplt.title(\"Release year vs popularity\")\nplt.show()","0a7feb62":"plt.figure(figsize = (18,12))\nsns.countplot(train.original_language)\nplt.show()","68332173":"train['status'].value_counts()","1d036d02":"train['is_released'] = train['status'].apply(lambda x: 1 if x == 'Released' else 0)\ntest['is_released'] = test['status'].apply(lambda x: 1 if x == 'Released' else 0)","06506e50":"train['has_homepage'] = train['homepage'].apply(lambda x: 0 if pd.isna(x) else 1)\ntest['has_homepage'] = test['homepage'].apply(lambda x: 0 if pd.isna(x) else 1)","7fed1e13":"train = train.drop(['homepage'],axis = 1)\ntest = test.drop(['homepage'],axis = 1)","ad0b4186":"plt.figure(figsize = (18,12))\nsns.countplot(train['has_homepage'],palette='winter')\nplt.show()","6873397e":"sns.catplot(x = 'has_homepage',y='revenue',data = train,kind = 'violin',palette='winter')","d8152490":"train['has_a_tagline'] = train['tagline'].apply(lambda x: 0 if pd.isna(x) else 1)\ntest['has_a_tagline'] = test['tagline'].apply(lambda x: 0 if pd.isna(x) else 1)","74ac2396":"plt.figure(figsize = (18,12))\nsns.countplot(train['has_a_tagline'],palette='winter')\nplt.show()","2534225a":"sns.catplot(x = 'has_a_tagline',y='revenue',data = train,palette='winter')","37f1c90b":"train['originallang_en'] = train['original_language'].apply(lambda x: 1 if x == 'en'else 0)\ntest['originallang_en'] = test['original_language'].apply(lambda x: 1 if x == 'en'else 0)","b176e751":"plt.figure(figsize = (18,12))\nsns.countplot(train['originallang_en'],palette='winter')\nplt.show()","e99b72a0":"sns.catplot(x = 'originallang_en',y='revenue',data = train,palette='winter')","8d03ddb0":"plt.figure(figsize = (18,12))\nsns.heatmap(train.corr(),annot = True,cmap = 'Blues');","a398fa18":"train['belongs_to_collection'].apply(lambda x: len(x) if x != {} else 0).value_counts()","2b9a303c":"train['collection_name'] = train['belongs_to_collection'].apply(lambda x: x[0]['name'] if x != {} else '')","94c47a02":"train['has_collection'] = train['belongs_to_collection'].apply(lambda x: len(x) if x != {} else 0)","7fe5740f":"test['collection_name'] = test['belongs_to_collection'].apply(lambda x: x[0]['name'] if x != {} else '')\ntest['has_collection'] = test['belongs_to_collection'].apply(lambda x: len(x) if x != {} else 0)","10f11460":"train = train.drop(['belongs_to_collection'], axis=1)\ntest = test.drop(['belongs_to_collection'], axis=1)","a32f287a":"train['genres'].apply(lambda x: len(x) if x != {} else 0).value_counts()","ec9a087c":"genre_list = list(train['genres'].apply(lambda x: [i['name'] for i in x] if x != {} else []))","bbae7313":"plt.figure(figsize = (12,8))\ntext = ' '.join(i for j in genre_list for i in j)\nword_cld = WordCloud(max_font_size=None, background_color='black', collocations=False,\n                      width=1200, height=1000).generate(text)\nplt.imshow(word_cld)\nplt.title(\"Top Genres\")\nplt.axis(\"off\")\nplt.show();","23832a42":"Counter([i for j in genre_list for i in j])","3924e6e6":"train['num_genres'] = train['genres'].apply(lambda x:len(x) if x!= {} else 0)","70beca3f":"train['all_genres'] = train['genres'].apply(lambda x: ' '.join(sorted([i['name'] for i in x])) if x != {} else '')","104b2db1":"top_genres =[ m[0] for m in Counter([i for j in genre_list for i in j]).most_common(20)]\nfor g in top_genres:\n    train['genre_' + g] = train['all_genres'].apply(lambda x: 1 if g in x else 0)","d59c44b5":"test['num_genres'] = test['genres'].apply(lambda x: len(x) if x != {} else 0)\ntest['all_genres'] = test['genres'].apply(lambda x: ' '.join(sorted([i['name'] for i in x])) if x != {} else '')\nfor g in top_genres:\n    test['genre_' + g] = test['all_genres'].apply(lambda x: 1 if g in x else 0)\n","963eddc9":"plt.figure(figsize = (12, 12))\ntext = ' '.join(train['original_title'].values)\nwordcloud = WordCloud(max_font_size=None, background_color='black', width=1200, height=1000).generate(text)\nplt.imshow(wordcloud)\nplt.title('Top words in titles')\nplt.axis(\"off\")\nplt.show()","e679612d":"plt.figure(figsize = (12, 12))\ntext = ' '.join(train['overview'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color='black', width=1200, height=1000).generate(text)\nplt.imshow(wordcloud)\nplt.title('Top words in overview')\nplt.axis(\"off\")\nplt.show()","1be84d04":"train['production_companies'].apply(lambda x: len(x) if x!= {} else 0 ).value_counts()","20a0904b":"company_list = list(train['production_companies'].apply(lambda x:[i['name'] for i in x] if x != {} else []).values)","2c999747":"Counter([i for j in company_list for i in j]).most_common(30)","9fccb05f":"train['num_companies'] = train['production_companies'].apply(lambda x: len(x) if x != {} else 0)","eedd3e33":"train['all_production_companies'] = train['production_companies'].apply(lambda x: ' '.join(sorted([i['name'] for i in x])) if x != {} else '')\ntop_companies = [m[0] for m in Counter([i for j in company_list for i in j]).most_common(30)]\nfor g in top_companies:\n    train['production_company_' + g] = train['all_production_companies'].apply(lambda x: 1 if g in x else 0)","65f61e41":"test['num_companies'] = test['production_companies'].apply(lambda x: len(x) if x != {} else 0)\ntest['all_production_companies'] = test['production_companies'].apply(lambda x: ' '.join(sorted([i['name'] for i in x])) if x != {} else '')\nfor g in top_companies:\n    test['production_company_' + g] = test['all_production_companies'].apply(lambda x: 1 if g in x else 0)","c122fdac":"train = train.drop(['production_companies', 'all_production_companies'], axis=1)\ntest = test.drop(['production_companies', 'all_production_companies'], axis=1)","455c4d85":"print('Number of production countries in films')\ntrain['production_countries'].apply(lambda x: len(x) if x != {} else 0).value_counts()","2e401586":"list_of_countries = list(train['production_countries'].apply(lambda x: [i['name'] for i in x] if x != {} else []).values)\nCounter([i for j in list_of_countries for i in j]).most_common(25)","4c4d4d82":"train['num_countries'] = train['production_countries'].apply(lambda x: len(x) if x != {} else 0)\n","a688a61d":"train['all_countries'] = train['production_countries'].apply(lambda x: ' '.join(sorted([i['name'] for i in x])) if x != {} else '')\ntop_countries = [m[0] for m in Counter([i for j in list_of_countries for i in j]).most_common(25)]\nfor g in top_countries:\n    train['production_country_' + g] = train['all_countries'].apply(lambda x: 1 if g in x else 0)","cec11c94":"test['num_countries'] = test['production_countries'].apply(lambda x: len(x) if x != {} else 0)\ntest['all_countries'] = test['production_countries'].apply(lambda x: ' '.join(sorted([i['name'] for i in x])) if x != {} else '')\nfor g in top_countries:\n    test['production_country_' + g] = test['all_countries'].apply(lambda x: 1 if g in x else 0)","f182218b":"train = train.drop(['production_countries', 'all_countries'], axis=1)\ntest = test.drop(['production_countries', 'all_countries'], axis=1)","468c38e9":"print('Number of spoken languages in films')\ntrain['spoken_languages'].apply(lambda x: len(x) if x != {} else 0).value_counts()","f5632244":"list_of_languages = list(train['spoken_languages'].apply(lambda x: [i['name'] for i in x] if x != {} else []).values)\nCounter([i for j in list_of_languages for i in j]).most_common()","2378aab0":"train['num_languages'] = train['spoken_languages'].apply(lambda x: len(x) if x != {} else 0)","ec1484ab":"train['all_languages'] = train['spoken_languages'].apply(lambda x: ' '.join(sorted([i['name'] for i in x])) if x != {} else '')\ntop_languages = [m[0] for m in Counter([i for j in list_of_languages for i in j]).most_common(30)]\nfor g in top_languages:\n    train['language_' + g] = train['all_languages'].apply(lambda x: 1 if g in x else 0)","64d3bd9b":"test['num_languages'] = test['spoken_languages'].apply(lambda x: len(x) if x != {} else 0)\ntest['all_languages'] = test['spoken_languages'].apply(lambda x: ' '.join(sorted([i['name'] for i in x])) if x != {} else '')\nfor g in top_languages:\n    test['language_' + g] = test['all_languages'].apply(lambda x: 1 if g in x else 0)","19e66334":"train = train.drop(['spoken_languages', 'all_languages'], axis=1)\ntest = test.drop(['spoken_languages', 'all_languages'], axis=1)","51ccad72":"print('Number of Keywords in films')\ntrain['Keywords'].apply(lambda x: len(x) if x != {} else 0).value_counts().head(10)","c1c5c7ab":"list_of_keywords = list(train['Keywords'].apply(lambda x: [i['name'] for i in x] if x != {} else []).values)","b092a72c":"plt.figure(figsize = (12,8))\ntext = ' '.join(i for j in list_of_keywords  for i in j)\nwordcld = WordCloud(max_font_size=None, background_color='black', collocations=False,\n                      width=1200, height=1000).generate(text)\nplt.imshow(wordcld)\nplt.title(\"Top Genres\")\nplt.axis(\"off\")\nplt.show();","1f19792e":"train['num_Keywords'] = train['Keywords'].apply(lambda x: len(x) if x != {} else 0)","640e2fb5":"train['all_Keywords'] = train['Keywords'].apply(lambda x: ' '.join(sorted([i['name'] for i in x])) if x != {} else '')\ntop_keywords = [m[0] for m in Counter([i for j in list_of_keywords for i in j]).most_common(30)]\nfor g in top_keywords:\n    train['keyword_' + g] = train['all_Keywords'].apply(lambda x: 1 if g in x else 0)","26b0401e":"test['num_Keywords'] = test['Keywords'].apply(lambda x: len(x) if x != {} else 0)\ntest['all_Keywords'] = test['Keywords'].apply(lambda x: ' '.join(sorted([i['name'] for i in x])) if x != {} else '')\nfor g in top_keywords:\n    test['keyword_' + g] = test['all_Keywords'].apply(lambda x: 1 if g in x else 0)","054f7613":"train = train.drop(['Keywords', 'all_Keywords'], axis=1)\ntest = test.drop(['Keywords', 'all_Keywords'], axis=1)","c4a650db":"print('Number of casted persons in films')\ntrain['cast'].apply(lambda x: len(x) if x != {} else 0).value_counts().head(10)","3e0e2528":"list_of_cast_names = list(train['cast'].apply(lambda x: [i['name'] for i in x] if x != {} else []).values)\nCounter([i for j in list_of_cast_names for i in j]).most_common(15)","48a6e5c5":"list_of_cast_genders = list(train['cast'].apply(lambda x: [i['gender'] for i in x] if x != {} else []).values)\nCounter([i for j in list_of_cast_genders for i in j]).most_common()","7aaefb1f":"list_of_cast_characters = list(train['cast'].apply(lambda x: [i['character'] for i in x] if x != {} else []).values)\nCounter([i for j in list_of_cast_characters for i in j]).most_common(15)","93e5f5c7":"train['num_cast'] = train['cast'].apply(lambda x: len(x) if x != {} else 0)","ab516bf4":"plt.figure(figsize=(16, 8))\nplt.scatter(train['num_cast'], train['revenue'])\nplt.title('Number of cast members vs revenue');","145f672d":"top_cast_names = [m[0] for m in Counter([i for j in list_of_cast_names for i in j]).most_common(15)]\nfor g in top_cast_names:\n    train['cast_name_' + g] = train['cast'].apply(lambda x: 1 if g in str(x) else 0)","c54488eb":"train['genders_0_cast'] = train['cast'].apply(lambda x: sum([1 for i in x if i['gender'] == 0]))\ntrain['genders_1_cast'] = train['cast'].apply(lambda x: sum([1 for i in x if i['gender'] == 1]))\ntrain['genders_2_cast'] = train['cast'].apply(lambda x: sum([1 for i in x if i['gender'] == 2]))","cd45384a":"top_cast_characters = [m[0] for m in Counter([i for j in list_of_cast_characters for i in j]).most_common(15)]\nfor g in top_cast_characters:\n    train['cast_character_' + g] = train['cast'].apply(lambda x: 1 if g in str(x) else 0)","3b23afbe":"test['num_cast'] = test['cast'].apply(lambda x: len(x) if x != {} else 0)\nfor g in top_cast_names:\n    test['cast_name_' + g] = test['cast'].apply(lambda x: 1 if g in str(x) else 0)\ntest['genders_0_cast'] = test['cast'].apply(lambda x: sum([1 for i in x if i['gender'] == 0]))\ntest['genders_1_cast'] = test['cast'].apply(lambda x: sum([1 for i in x if i['gender'] == 1]))\ntest['genders_2_cast'] = test['cast'].apply(lambda x: sum([1 for i in x if i['gender'] == 2]))","72780c29":"for g in top_cast_characters:\n    test['cast_character_' + g] = test['cast'].apply(lambda x: 1 if g in str(x) else 0)","cf4a62a4":"train = train.drop(['cast'], axis=1)\ntest = test.drop(['cast'], axis=1)","1851c90f":"print('Number of crew members')\ntrain['crew'].apply(lambda x: len(x) if x != {} else 0).value_counts().head(10)","7560ce90":"list_of_crew_names = list(train['crew'].apply(lambda x: [i['name'] for i in x] if x != {} else []).values)\nCounter([i for j in list_of_crew_names for i in j]).most_common(15)","e2e96253":"list_of_crew_jobs = list(train['crew'].apply(lambda x: [i['job'] for i in x] if x != {} else []).values)\nCounter([i for j in list_of_crew_jobs for i in j]).most_common(15)","7e0c84be":"list_of_crew_genders = list(train['crew'].apply(lambda x: [i['gender'] for i in x] if x != {} else []).values)\nCounter([i for j in list_of_crew_genders for i in j]).most_common(15)","9a42b612":"list_of_crew_departments = list(train['crew'].apply(lambda x: [i['department'] for i in x] if x != {} else []).values)\nCounter([i for j in list_of_crew_departments for i in j]).most_common(14)","3b2490cb":"train['num_crew'] = train['crew'].apply(lambda x: len(x) if x != {} else 0)","c7d1f957":"plt.figure(figsize=(16, 8))\nplt.scatter(train['num_crew'], train['revenue'])\nplt.title('Number of crew members vs revenue');","fd953115":"top_crew_names = [m[0] for m in Counter([i for j in list_of_crew_names for i in j]).most_common(15)]\nfor g in top_crew_names:\n    train['crew_name_' + g] = train['crew'].apply(lambda x: 1 if g in str(x) else 0)","f13dbc88":"train['genders_0_crew'] = train['crew'].apply(lambda x: sum([1 for i in x if i['gender'] == 0]))\ntrain['genders_1_crew'] = train['crew'].apply(lambda x: sum([1 for i in x if i['gender'] == 1]))\ntrain['genders_2_crew'] = train['crew'].apply(lambda x: sum([1 for i in x if i['gender'] == 2]))","ab5e5d14":"top_crew_jobs = [m[0] for m in Counter([i for j in list_of_crew_jobs for i in j]).most_common(15)]\nfor j in top_crew_jobs:\n    train['jobs_' + j] = train['crew'].apply(lambda x: sum([1 for i in x if i['job'] == j]))\ntop_crew_departments = [m[0] for m in Counter([i for j in list_of_crew_departments for i in j]).most_common(15)]\nfor j in top_crew_departments:\n    train['departments_' + j] = train['crew'].apply(lambda x: sum([1 for i in x if i['department'] == j])) ","cead43df":"test['num_crew'] = test['crew'].apply(lambda x: len(x) if x != {} else 0)\nfor g in top_crew_names:\n    test['crew_name_' + g] = test['crew'].apply(lambda x: 1 if g in str(x) else 0)\ntest['genders_0_crew'] = test['crew'].apply(lambda x: sum([1 for i in x if i['gender'] == 0]))\ntest['genders_1_crew'] = test['crew'].apply(lambda x: sum([1 for i in x if i['gender'] == 1]))\ntest['genders_2_crew'] = test['crew'].apply(lambda x: sum([1 for i in x if i['gender'] == 2]))\nfor j in top_crew_jobs:\n    test['jobs_' + j] = test['crew'].apply(lambda x: sum([1 for i in x if i['job'] == j]))\nfor j in top_crew_departments:\n    test['departments_' + j] = test['crew'].apply(lambda x: sum([1 for i in x if i['department'] == j])) ","c04b0764":"from sklearn.preprocessing import OneHotEncoder","e6c4ffe0":"cat_cols = ['original_language','collection_name']","b5719269":"encoder = OneHotEncoder(sparse=False, handle_unknown='ignore')\nencoder.fit(train[cat_cols])","981a6e13":"encoded_cols = list(encoder.get_feature_names(cat_cols))\nprint(encoded_cols)","8b3cb505":"new_train = train.copy()\nnew_test = test.copy()","09302b31":"new_train[encoded_cols] = encoder.transform(new_train[cat_cols])\nnew_test[encoded_cols] = encoder.transform(new_test[cat_cols])","96442972":"train = new_train.copy()\ntest = new_test.copy()","cf2dcec6":"train['bud_runtime']=(train['budget']+1)\/(train['runtime']+1)\n\ntrain['bud_year']=(train['budget']+1)\/(train['release_year']+1)\n\ntrain['bud_popularity']=(train['budget']+1)\/(train['popularity']+1)\n\ntrain['runtime_year']=(train['runtime']+1)\/(train['release_year']+1)\n\ntrain['popularity_year']=(train['popularity']+1)\/(train['release_year']+1)","a4a642c5":"test['bud_runtime']=(test['budget']+1)\/(test['runtime']+1)\n\ntest['bud_year']=(test['budget']+1)\/(test['release_year']+1)\n\ntest['bud_popularity']=(test['budget']+1)\/(test['popularity']+1)\n\ntest['runtime_year']=(test['runtime']+1)\/(test['release_year']+1)\n\ntest['popularity_year']=(test['popularity']+1)\/(test['release_year']+1)","47902622":"train = train.drop(['crew'], axis=1)\ntest = test.drop(['crew'], axis=1)","4c2bf81a":"train = train.drop(['imdb_id','release_date', 'status'], axis=1)\ntest = test.drop(['imdb_id','release_date', 'status'], axis=1)","73268c5c":"train = train.drop(['genres','all_genres'], axis=1)\ntest = test.drop(['genres','all_genres'], axis=1)","5c9a019f":"train.shape, test.shape","1979599d":"y = train['revenue']","e5cc12f9":"X = train.drop(['original_language','overview','tagline','title','id','revenue','original_title'],axis = 1)","031defe2":"test = test.drop(['original_language','overview','tagline','title','id','original_title'],axis = 1)","b9a0a7a4":"X = X.drop(['collection_name'],axis = 1)","05215f87":"test = test.drop(['collection_name'],axis = 1)","7807cd9a":"X.shape,y.shape,test.shape","be2660a4":"from sklearn.model_selection import train_test_split\nX_train,X_val,y_train,y_val= train_test_split(X,y,test_size=0.2,random_state=39)","83602a61":"from sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression","7725499c":"linreg=LinearRegression()\nlinreg.fit(X_train,y_train)","c0a2c3a5":"lr_pred=linreg.predict(X_val)","ca44b7b5":"lr_rmse= mean_squared_error(y_val, lr_pred, squared=False)\nlr_rmse","c5eafbe1":"linreg.fit(X,y)\nlr_full = linreg.predict(test)","a9920b58":"lr_full","a1281324":"lr_full = np.array(lr_full, dtype=np.float128)","85f19328":"lr_full = np.expm1(lr_full)","f7e17233":"submission['revenue'] = lr_full\nsubmission.to_csv(\"lr.csv\", index=False)","8ee01514":"from sklearn.ensemble import RandomForestRegressor\nrf_model = RandomForestRegressor(random_state=42, \n                                  max_features='auto', \n                                  n_estimators= 50, \n                                  min_samples_leaf=2)","6d880af3":"rf_model.fit(X_train,y_train)","ce8b8e95":"rf_pred = rf_model.predict(X_val)","dbac5037":"rf_rmse= mean_squared_error(y_val, rf_pred, squared=False)\nrf_rmse","4e73190d":"rf_model.fit(X,y)\nrf_pred_full = rf_model.predict(test)\nrf_pred_full = np.expm1(rf_pred_full)","41a3c744":"submission['revenue'] = rf_pred_full\nsubmission.to_csv(\"rf.csv\", index=False)","68a75847":"import re\nregex = re.compile(r\"\\[|\\]|<\", re.IGNORECASE)","88819472":"X_train.columns = [regex.sub(\"_\", col) if any(x in str(col) for x in set(('[', ']', '<'))) else col for col in X_train.columns.values]","60211bc6":"X.columns = [regex.sub(\"_\", col) if any(x in str(col) for x in set(('[', ']', '<'))) else col for col in X.columns.values]","5835f824":"test.columns = [regex.sub(\"_\", col) if any(x in str(col) for x in set(('[', ']', '<'))) else col for col in test.columns.values]","9101591b":"import xgboost as xgb\nxgb_model = xgb.XGBRegressor(objective = 'reg:linear',\n                                  eta = 0.01,\n                                  max_depth = 3,\n                                  min_child_weight = 3,\n                                  subsample = 0.8,\n                                  gamma = 1.45,\n                                  colsample_bytree = 0.7,\n                                  eval_metric = 'rmse',\n                                  seed = 42,\n                                  n_estimators = 3000)","6fc189cb":"xgb_model.fit(X_train, y_train)\nxgb_pred = xgb_model.predict(X_val)","af9b225a":"xgb_rmse= mean_squared_error(y_val, xgb_pred, squared=False)\nxgb_rmse","85c153d2":"xgb_model.fit(X,y)\nxgb_full = rf_model.predict(test)","55bb4bb6":"xgb_full = np.array(xgb_full, dtype=np.float128)","413e3932":"xgb_full = np.expm1(xgb_full)","96a507cf":"submission['revenue'] = xgb_full\nsubmission.to_csv(\"xgb.csv\", index=False)","6e9f65b0":"Encoding the top 25 countries","ab6f5eaf":"converting strings to dictionary","e8063f4e":"Doing the same for the test set","35c4b481":"## Importing libraries","2b0e30f8":"Applying the same to the test set","5209a978":"## overview","052930b5":"Looks like most of the movies have 1 or 2 production companies","bd06d2fe":"Gender of the cast","5b1ded2b":"## Lets start with 'belongs_to_collection' column","0f1131f3":"2396 values in this column are empty, 604 contrain information about the collections.","55b67ad8":"Encoding the top 30 companies","5ffa3b6d":"## RandomForest","59df55bb":"encoding for most common keywords","315a160a":"Encoding the most common crew jobs and departments","c70b955d":"encoding the genres which appear the most","336ca6e6":"Same for the test set","9672e6f4":"Characters played","1eaf9719":"list of most common languages","e1d9bd16":"Dropping the 'spoken_languages' column ","b74f060b":"counting missing values","af45c32b":"Now lets make a list of genres to find out which genres are the most popular","8b28ccde":"now we can drop the 'production_companies' column","1e2bafe9":"How many production companies are involved in making films","90f1adbc":"Most popular ones are","e9dbb69a":"Dropping the cast column","33e991f1":"# TMDB Box Office Prediction\n![](https:\/\/i.imgur.com\/P1pc13n.jpg)","64d53027":"## Cast","6a384c69":"Doing the same for the test set","c6f3df32":"## Creating Models","0e563681":"Creating Number of crew members column","81e409d0":"Adding a collection_name column which will tell if the movie belongs to a specific colllection<br>\n1 : if movie belongs to a collection<br>\n0 : if it does'nt belong to any collection","72c24c4a":"Now we dont need the 'belongs_to_collection' column do we will drop it in both the sets","3697bbbb":"## Now lets deal with then 'genres' column\none movie can have multiple genres","1f333acb":"## EDA","e2e48068":"## spoken_languages column","d8138607":"Encoding the top cast names","7508c55f":"Crew jobs","a2764426":"only 4 movies are rumored the rest are released","699276b5":"Crew genders","42107a90":"making a column for the number of companies involved in making the movie","83a9c589":"Encoding the most common languages","4c500bad":"same for the test set","e2e2669a":"Does having a homepage eaffect the revenue","879b944f":"Now doing the same for the test set","f4b20a46":"Dropping a few columns","8eb52510":"Encoding the cast according to their Genders","46ed0d02":"## keywords","8b249084":"These are the most watched genres","51444065":"most of the movies dont have a homepage","eb205868":"Encoding the characters played","1cf2a0e3":"## production_countries column","512a10f4":"## Linear Regression","3b6a3a04":"Dropping the Keywords column","b84070fb":"Number of languages spoken in movies","b43ea8da":"0 is unspecified, 1 is female, and 2 is male","dc238a14":"I think we can drop the poster path","e97ec81c":"## Original title wordcloud for the most common titles","3263b550":"How many genres do films have","5dc837e8":"Counting  missing values","6ec78980":"Adding additional Features","8591beed":"Adding a collection_name column which contains name of the collection (for eg: 'Hot Tub Time Machine Collection')","18bdcc74":"Column for number of keywords","3796c739":"Lets create a column which shows how many genres does a movie belongs to","d0124701":"## Crew column","77ea88e1":"Imputing the missing values for 'runtime' by the average values in the dataset.","cd64eb9c":"We dont need the genre column any more so we can drop it from both the sets","2d854a7a":"## Now lets take the 'production_companies' column","6a02cac8":"The discussion section has the data which was missing or wrong in the real data set ","2dcba249":"Creating number column for the cast","11ff2e61":"Dropping the 'production_countries' column","7289a253":"## XGB","e7db6317":"People like to watch movies which have moderate runtime neither too high nor too low","6f17d413":"We can plot a word cloud to show the genres which are the most popular"}}