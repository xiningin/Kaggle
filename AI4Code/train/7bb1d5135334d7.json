{"cell_type":{"8f73c7c3":"code","7c386c49":"code","293cde91":"code","0e1e86e1":"code","d190eabc":"code","8c7ce9e0":"code","33056dd9":"code","8e826bfb":"code","efbd4823":"code","6e3edc05":"code","bd7744b4":"code","4592a9de":"code","fdb460c8":"code","1481f087":"code","3d560cc8":"code","df8ab1df":"code","4aa19201":"markdown","7873dd0d":"markdown"},"source":{"8f73c7c3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7c386c49":"df = pd.read_csv(\"\/kaggle\/input\/heart-disease-prediction-using-logistic-regression\/framingham.csv\")","293cde91":"df.head()","0e1e86e1":"df.info()","d190eabc":"plt.figure(figsize=(20,10))\nsns.heatmap(df.corr(),annot = True, cmap = 'coolwarm')\n","8c7ce9e0":"std_corr = df.corr()\nstd_corr['TenYearCHD'].sort_values(ascending = False)","33056dd9":"df.isnull().sum()","8e826bfb":"# Separating X(input) and Y(output) from dataset\n# dropping education and currentSmoker variables as it is leastly correlated.\ndf_X = df.drop(columns = ['education','TenYearCHD','currentSmoker'], axis=1)\ny = df['TenYearCHD']\n\nX = df_X.fillna({'cigsPerDay': 0, 'BPMeds': 0 ,'totChol': df_X['totChol'].std(),\n                 'BMI':df_X['BMI'].mean(), 'glucose':df_X['glucose'].mean(),\n                 'heartRate' : df_X['heartRate'].std()})","efbd4823":"X.isnull().sum()","6e3edc05":"#Split the data into training set and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)","bd7744b4":"from sklearn.linear_model import LogisticRegression\nlog_reg = LogisticRegression(solver = 'liblinear')\nlog_reg.fit(X_train, y_train)\n\ny_pred = log_reg.predict(X_test)","4592a9de":"print(\"prediction:\", y_pred[:15])\nprint(\"actual:\", list(y[:15]))","fdb460c8":"from sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nconf_mat = confusion_matrix(y_true = y_test, y_pred=y_pred)\nprint(conf_mat)\n\nprint(\"Accuracy of test set:\",metrics.accuracy_score(y_test, y_pred))\nprint(\"Accuracy of train set:\",metrics.accuracy_score(y_train, log_reg.predict(X_train)))\nprint(\"Precision:\",metrics.precision_score(y_test, y_pred))\nprint(\"Recall:\",metrics.recall_score(y_test, y_pred))","1481f087":"acc = metrics.accuracy_score(y_test, y_pred)\nprint(\"Accuracy of Logistic Model is:\",acc * 100)","3d560cc8":"#lasso regression\nlasso_reg = LogisticRegression(penalty = 'l1', solver = 'liblinear')\nlasso_reg.fit(X_train, y_train)\n\nprint(lasso_reg.score(X_train, y_train),lasso_reg.score(X_test, y_test))\n","df8ab1df":"#Decisiion tree model\nfrom sklearn.tree import DecisionTreeRegressor\ntree_reg = DecisionTreeRegressor(random_state = 0)\ntree_reg.fit(X_train, y_train)\n\nprint(tree_reg.score(X_train, y_train),lasso_reg.score(X_test, y_test))\n","4aa19201":"# Data Cleaning","7873dd0d":"# Applying Models to training data"}}