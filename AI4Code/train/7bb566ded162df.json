{"cell_type":{"1fd928ce":"code","32e5655d":"code","849ac5eb":"code","54dff9c3":"code","f4d51adc":"code","84e2a2d1":"code","2ffb0cbc":"code","ba946afb":"code","52fa2a11":"code","4f7036db":"code","78e31afb":"code","5d334c4b":"code","128796d4":"code","f5b16f7c":"code","7ef9abde":"code","0bf273a6":"code","f7fee7c9":"code","d6cbc92b":"code","4c3ddc1b":"code","2ad26c99":"code","5fba3f81":"markdown","e6c3b531":"markdown","57a1ba68":"markdown","d6811806":"markdown","bfc879d6":"markdown","f06f0c19":"markdown"},"source":{"1fd928ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","32e5655d":"import matplotlib.pyplot as plt\n%matplotlib inline","849ac5eb":"df_train = pd.read_csv(\"\/kaggle\/input\/covid19-local-us-ca-forecasting-week-1\/ca_train.csv\")\ndf_train.head(5)","54dff9c3":"df_test = pd.read_csv(\"\/kaggle\/input\/covid19-local-us-ca-forecasting-week-1\/ca_test.csv\")","f4d51adc":"def from_date_to_day(train, test):\n    date_train = pd.to_datetime(train[\"Date\"])\n    \n    beginning = date_train.min()\n    \n    days_train = date_train - beginning\n    train[\"Day\"] = days_train.dt.days\n    \n    date_test = pd.to_datetime(test[\"Date\"])\n    days_test = date_test - beginning\n    test[\"Day\"] = days_test.dt.days","84e2a2d1":"from_date_to_day(df_train, df_test)","2ffb0cbc":"# get rid of log(0) problem\ndef log_rectified(x):\n    return np.log(max(x, 0) + 1.0)\n\nnp_log_rectified = np.vectorize(log_rectified)\n\ndef inv_log_rectified(x):\n    return np.exp(x) - 1.0\n\nnp_inv_log_rectified = np.vectorize(inv_log_rectified)","ba946afb":"def plot_log_cases(data):\n    \n    X = data[\"Day\"].unique()\n    y = np_log_rectified(data.groupby(\"Day\").ConfirmedCases.sum())\n    \n    plt.plot(X, y, 'bo')","52fa2a11":"plot_log_cases(df_train)","4f7036db":"from scipy import interpolate\nclass Model:\n    def __init__(self, train, target):\n        X = np.arange(0, train.Day.max() + 1)\n        y_log = np_log_rectified(train.groupby(\"Day\")[target].sum()[X])\n        \n        self.f1 = interpolate.interp1d(X, y_log, fill_value=\"extrapolate\", kind=\"linear\")\n    \n    def predict(self, test):\n        return self.f1(test)","78e31afb":"def plot_prediction(data, model, target):\n    X = np.linspace(0,65,100)\n    y_pred = np_inv_log_rectified(model.predict(X))\n    \n    days = data[\"Day\"].unique()\n    y = data.groupby(\"Day\")[target].sum()\n    \n    plt.plot(days, y, 'bo')\n    plt.plot(X, y_pred)","5d334c4b":"def plot_error(data, model, target):\n    days = data[\"Day\"].unique()\n    y = data.groupby(\"Day\")[target].sum()\n    \n    y_pred = np_inv_log_rectified(model.predict(days))\n    \n    plt.plot(days, abs(y - y_pred))","128796d4":"model_case = Model(df_train, \"ConfirmedCases\")\nplot_prediction(df_train, model_case, \"ConfirmedCases\")","f5b16f7c":"plot_error(df_train, model_case, \"ConfirmedCases\")","7ef9abde":"model_fatal = Model(df_train, \"Fatalities\")\nplot_prediction(df_train, model_fatal, \"Fatalities\")","0bf273a6":"plot_error(df_train, model_fatal, \"Fatalities\")","f7fee7c9":"pred_cases = np_inv_log_rectified(model_case.predict(df_test.Day)).astype(int)\npred_fatal = np_inv_log_rectified(model_fatal.predict(df_test.Day)).astype(int)","d6cbc92b":"submission = pd.concat(\n    [ pd.Series(np.arange(1, df_test.ForecastId.max() + 1)),\n     pd.Series(pred_cases),\n     pd.Series(pred_fatal)],\n    axis=1)","4c3ddc1b":"submission.head(5)","2ad26c99":"submission.to_csv('submission.csv', header=['ForecastId', 'ConfirmedCases', 'Fatalities'], index=False)","5fba3f81":"# Feature engineering","e6c3b531":"# Submission","57a1ba68":"## Visualize model error","d6811806":"# Insights","bfc879d6":"# Modelling","f06f0c19":"=> linear interpolation is possible"}}