{"cell_type":{"b3e21689":"code","1b7f3545":"code","88af3fa5":"code","c7ece706":"code","b65e03bd":"code","1beb8be8":"code","b4652f05":"code","67752124":"code","545a63fb":"code","76e639c6":"code","dbc7be4f":"markdown","194a4404":"markdown","3b0b923e":"markdown","582bf788":"markdown","9d603006":"markdown","530860de":"markdown","393a3af9":"markdown","8a6dab39":"markdown","5361d40e":"markdown","2f747402":"markdown","7e1cf422":"markdown","f49bd75f":"markdown","5dcda4eb":"markdown","6f8c79c8":"markdown","792a02d3":"markdown","25dbdc84":"markdown"},"source":{"b3e21689":"import pandas as pd\n\ndf=pd.read_json(r'..\/input\/wiki-climate.json', encoding='utf-8')\ndf = df[['name', 'population', 'country', 'gps_lat', 'gps_lon', 'location', 'year mean C', 'year mean C stdev']]\ndf[['population', 'gps_lat', 'gps_lon', 'year mean C','year mean C stdev']] = \\\n    df[['population', 'gps_lat', 'gps_lon', 'year mean C','year mean C stdev']].apply(pd.to_numeric)\ndf=df.dropna()","1b7f3545":"import folium\nimport matplotlib.pyplot as plt\nimport matplotlib\n\nnorm = matplotlib.colors.Normalize(vmin=df['year mean C'].min(), vmax=df['year mean C'].max())\ncw=plt.get_cmap('coolwarm')\n\nm = folium.Map(location=[0,0], zoom_start=2)\nfor _, row in df.iterrows():\n    color = matplotlib.colors.rgb2hex(cw(norm(row['year mean C']))[:3]),\n    folium.Circle(\n        radius = 4000,\n        location = [row['gps_lat'], row['gps_lon']],\n        color = color,\n        fill = True,\n        fill_opacity = 1,\n  ).add_to(m)\nm","88af3fa5":"norm = matplotlib.colors.Normalize(vmin=df['year mean C stdev'].min(), vmax=df['year mean C stdev'].max())\ncw=plt.get_cmap('Greys')\n\nm = folium.Map(location=[0,0], zoom_start=2)\nfor _, row in df.iterrows():\n    color = matplotlib.colors.rgb2hex(cw(norm(row['year mean C stdev']))[:3]),\n    folium.Circle(\n        radius = 4000,\n        location = [row['gps_lat'], row['gps_lon']],\n        color = color,\n        fill = True,\n        fill_opacity = 1,\n  ).add_to(m)\nm","c7ece706":"import numpy as np\nimport matplotlib.pyplot as plt\n\nplt.scatter(df['year mean C'], df['year mean C stdev'])\nplt.xlabel('Mean temp [\u00b0C]')\nplt.ylabel('Mean temp stdev')\nplt.show()","b65e03bd":"m,b = np.polyfit(df['year mean C'], df['year mean C stdev'], 1)\ndf['residue_stdev']=df['year mean C stdev'] - (m*df['year mean C']+b)\ndisplay(df[(df.population>500000)][['name', 'residue_stdev']].sort_values('residue_stdev')[0:10])\ndisplay(df[(df.population>500000)][['name', 'residue_stdev']].sort_values('residue_stdev', ascending=False)[0:10])","1beb8be8":"plt.scatter(df['gps_lat'], df['year mean C'])\nplt.xlabel('Latitude [\u00b0]')\nplt.ylabel('Mean temp [C]')\nplt.show()","b4652f05":"plt.scatter(df['gps_lat'].abs(), df['year mean C'])\nplt.xlabel('Latitude (absolute) [\u00b0]')\nplt.ylabel('Mean temp [C]')\nplt.show()","67752124":"z = np.polyfit(df['gps_lat'].abs(), df['year mean C'], 3)\np = np.poly1d(z)\ndf['residue_lat']=df['year mean C'] - p(df['gps_lat'])\n\nplt.scatter(df['gps_lat'].abs(), df['year mean C'])\nplt.plot(df['gps_lat'].abs(), p(df['gps_lat'].abs()), '.', color='red')\nplt.xlabel('Latitude (absolute) [\u00b0]')\nplt.ylabel('Mean temp [C]')\nplt.show()\n\ndisplay(df[(df.population>500000)][['name', 'residue_lat']].sort_values('residue_lat')[0:10])\ndisplay(df[(df.population>500000)][['name', 'residue_lat']].sort_values('residue_lat', ascending=False)[0:10])","545a63fb":"display(df[(df.population>500000) & (df.gps_lat>0)][['name', 'residue_lat', 'gps_lat']].sort_values('residue_lat', ascending=False)[0:10])","76e639c6":"from sklearn.preprocessing import normalize\n\ndf['metric'] = \\\n    normalize(df['residue_stdev'][:,np.newaxis], axis=0).ravel() * \\\n    normalize(df['year mean C'][:,np.newaxis], axis=0).ravel() \ndisplay(df[(df.population>1000000)][['country','name', 'residue_stdev', 'year mean C', 'metric']].sort_values('metric')[0:30])","dbc7be4f":"OK, since there is symetry in geographical latitude, let's just look at absolute values, plot that, find linear regression and see what are anomalies:","194a4404":"> Note: Data in this example is obtained by scraping Wikidata and Wikipedia, using [this Python script](https:\/\/github.com\/stalker314314\/wiki-climate).\n\n# What is best city to live in?\n\nSo, for a change, let's focus on a climate when deciding a place to live. Not sure about you, but I liked San Francisco climate - no matter what month it is, it is always fairly warm. So, I figured out what I want is low temperature fluctuations (stdev), but I also do care about real temperature - I don't want to be in Yakutsk, no matter if stdev is 0 and temperature is constantly -10.0\u00b0C throughtout the year\u2744\ufe0f\u2744\ufe0f\u2744\ufe0f!:) So, let's see where this will get us:)","3b0b923e":"So, Mecca and Medina, besides being holiest of all places\ud83d\udd4c, are also warmest places in northern hemisphere (relative to their location to equator). Wonder if there is correlation between their place in religion and climate\ud83e\udd14","582bf788":"## Load all temperatures from all cities","9d603006":"## Mean temperature vs latitude","530860de":"## Mean temperatures worldwide","393a3af9":"## Month over month mean temperature deviation","8a6dab39":"Yep, there is definitevely something going on. Let's use linear regression and let's try to *normalize* this stdev (so, in a away, it isn't correlated to mean temperatures).\n\nLet's also find top 10 cities (with population > 500.000) where there is highest residue of that linear regression, just to see if this is working","5361d40e":"# So, where to live?\n\nAs we said, we want to maximize two dimensions from this dataset:\n* Low temperature oscilations (and, as we already saw, we want normalized values, which is basically residue of mean temp stdev, from first scatter plot)\n* Warm climate\n\nSo, to do this, to me it seemed most logical to just normalize those two dimensions, multiply them and see what we get? So, here it is, only cities with more than 1.000.000 souls:","2f747402":"This is definitevely not linear regression, but 3rd degree polynomials is doing nice job (reference: my \ud83d\udc40:)\n\nAlso, I think, because Earth is kind of sphere (shh, don't tell anyone), this should have to do something with cosine function, not polynomials of 3rd degree:)","7e1cf422":"OK, this is weird. It seems that there are more deviation in temperatures if you are in colder areas. This means we cannot just take stdev of temperatures, put it in formula and get best city to live in (because we will favor places towards equator). Let's draw scatter plot of mean temperatures and standard deviations and see if there is actually some correlation there or not.","f49bd75f":"How to read this data? Well, cities with high negative residue are the ones that are predicted to have high temperature variations over the years, but they instead have very low temperature variations. You can see that they are anomalies because they are high in mountains ([Andes](https:\/\/en.wikipedia.org\/wiki\/Altiplano), [Mexico](https:\/\/en.wikipedia.org\/wiki\/Nevado_de_Toluca), ...), but there is also San Francisco creeping in here. This is good sign we are onto something. Regarding second table, seems that these places are mostly in dry, desert areas with extremely high fluctuation in temperature over the year. I mean, just look at that first city - [Turpan](https:\/\/en.wikipedia.org\/wiki\/Turpan#Climate), c'mon, from -7\u00b0C in January to +32\u00b0C in July, it's unreal!\ud83e\udd2a","5dcda4eb":"## Mean temperature vs mean temperature deviation","6f8c79c8":"So, South America, here I come:)\n\nAnyone wants to include mean precipitation in this equation, I don't like rain either?:)\n\nAdding GDP of country (there is `city_wd` column in this dataset, to get Wikidata reference) into this equation is left as an exercise to the reader:)","792a02d3":"So, if you want to live as close to equator and still feel chills, go for [Shigatse](https:\/\/en.wikipedia.org\/wiki\/Shigatse) in Tibet. If you want to be warm, but in far, far places, go to [Melbourne](https:\/\/en.wikipedia.org\/wiki\/Melbourne).\n\nBTW, since it was fishy to me that only cities from southern hemisphere were included in second table (probably because we didn't fit well since we didn't use cosine), here is same list again, but with northern hemisphere only:","25dbdc84":"At this point, let me move you, dear reader, to small sidetrack that is **not** important for analysis in which city to live, but was interesting to me. If you look at the first map, you will probably eyeball that temperatures are correlated with latitude - higher you go, colder it gets. I mean, dough, captain obvious here. But exactly how is this thing correlated and can we spot some anomalies over these latitudes? Let's draw scatter plot to see corellation of mean temperature vs latitude"}}