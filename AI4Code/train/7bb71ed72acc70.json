{"cell_type":{"f33ea07f":"code","661241e2":"code","6864006f":"code","9280924c":"code","6b6347e6":"code","5c92d83e":"code","14139f48":"code","73346424":"code","2ae3c427":"code","68b1fddb":"code","e2e92763":"code","e2c4efc8":"code","c29414e3":"code","e0dfb93b":"code","a876908d":"markdown","713f24c2":"markdown","9f542007":"markdown","07895494":"markdown","fc2b3fce":"markdown","36fb4e97":"markdown","fea886b9":"markdown","4bd31f77":"markdown","bc9c5240":"markdown","290d7d6f":"markdown","2e5d2916":"markdown","a39c2574":"markdown","f6c5eb63":"markdown","4fb3dd86":"markdown"},"source":{"f33ea07f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom keras.preprocessing.image import ImageDataGenerator, load_img\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport random\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","661241e2":"filenames = os.listdir(\"..\/input\/train\/train\")\ncategories = []\nfor filename in filenames:\n    category = filename.split('.')[0]\n    if category == 'dog':\n        categories.append(1)\n    else:\n        categories.append(0)\n\ndf = pd.DataFrame({\n    'filename': filenames,\n    'category': categories\n})\ndf.head()","6864006f":"sample = random.choice(filenames)\nimage = load_img(\"..\/input\/train\/train\/\"+sample)\nplt.imshow(image)","9280924c":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Activation, Dropout, Flatten, Dense\n\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=(256, 256, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(32, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n# the model so far outputs 3D feature maps (height, width, features)\n\nmodel.add(Flatten())  # this converts our 3D feature maps to 1D feature vectors\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nmodel.summary()","6b6347e6":"train_df, validate_df = train_test_split(df, test_size=0.1)\ntrain_df = train_df.reset_index()\nvalidate_df = validate_df.reset_index()\n\n# validate_df = validate_df.sample(n=10).reset_index() # use for fast testing code purpose\n# train_df = train_df.sample(n=100).reset_index() # use for fast testing code purpose\n\ntotal_train = train_df.shape[0]\nbatch_size=15","5c92d83e":"train_datagen = ImageDataGenerator(\n    horizontal_flip=True,\n    rescale=1.\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    rotation_range=20\n)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    \"..\/input\/train\/train\/\", \n    x_col='filename',\n    y_col='category',\n    class_mode='binary',\n    batch_size=batch_size\n)","14139f48":"validation_datagen = ImageDataGenerator(rescale = 1.\/255)\nvalidation_generator = validation_datagen.flow_from_dataframe(\n    validate_df, \n    \"..\/input\/train\/train\/\", \n    x_col='filename',\n    y_col='category',\n    class_mode='binary',\n    batch_size=batch_size\n)","73346424":"plt.figure(figsize=(12, 12))\nfor X_batch, y_batch in train_generator:\n    for i in range(0, 9):\n        plt.subplot(3, 3, i+1)\n        image = X_batch[i]\n        plt.imshow(image)\n    plt.tight_layout()\n    plt.show()\n    break","2ae3c427":"model.fit_generator(\n    train_generator, \n    epochs=30,\n    validation_data=validation_generator,\n    steps_per_epoch=total_train\/\/batch_size\n)","68b1fddb":"model.save_weights(\"model.h5\")","e2e92763":"test_filenames = os.listdir(\"..\/input\/test1\/test1\")\ntest_df = pd.DataFrame({\n    'filename': test_filenames\n})\n# test_df = test_df.sample(n=10).reset_index() \nnb_samples = test_df.shape[0]\n","e2c4efc8":"test_gen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_gen.flow_from_dataframe(\n    test_df, \n    \"..\/input\/test1\/test1\/\", \n    x_col='filename',\n    class_mode=None,\n    batch_size=batch_size,\n    shuffle=False\n)","c29414e3":"predict = model.predict_generator(test_generator, steps=np.ceil(nb_samples\/batch_size)).astype('int64')\ntest_df['category'] = predict\nsample_test = test_df.sample(n=9).reset_index()\nsample_test.head()\nplt.figure(figsize=(12, 12))\nfor index, row in sample_test.iterrows():\n    filename = row['filename']\n    category = row['category']\n    img = load_img(\"..\/input\/test1\/test1\/\"+filename, target_size=(256, 256))\n    plt.subplot(3, 3, index+1)\n    plt.imshow(img)\n    plt.xlabel(filename + '(' + \"{}\".format(category) + ')')\nplt.tight_layout()\nplt.show()","e0dfb93b":"submission_df = test_df.copy()\nsubmission_df['id'] = submission_df['filename'].str.split('.').str[0]\nsubmission_df['label'] = submission_df['category']\nsubmission_df.drop(['filename', 'category'], axis=1, inplace=True)\nsubmission_df.to_csv('submission.csv', index=False)","a876908d":"# Build Model\n[Reference](https:\/\/blog.keras.io\/building-powerful-image-classification-models-using-very-little-data.html)","713f24c2":"### Prepare Test and Train Data","9f542007":"# See sample image","07895494":"# See sample generated images","fc2b3fce":"# Save Model","36fb4e97":"# Create Testing Generator","fea886b9":"### Validation Generator","4bd31f77":"# Fit Model","bc9c5240":"# Prepare Testing Data","290d7d6f":"# Prepare Traning Data","2e5d2916":"# Import Library","a39c2574":"# Submission","f6c5eb63":"# Traning Generator","4fb3dd86":"# Predict"}}