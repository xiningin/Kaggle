{"cell_type":{"afcf0de5":"code","7b7e57c9":"code","f2b0e7e7":"code","49e8af3a":"code","e5fb5534":"code","bbad3fe1":"code","80c953c2":"code","42561239":"code","81c4f3c0":"code","7032f247":"code","28270820":"markdown","c78995fc":"markdown","b8d041cf":"markdown","b901805b":"markdown","4fed9bff":"markdown","5d9a72b8":"markdown","fe189217":"markdown","7d3e2b3c":"markdown","6b4843df":"markdown"},"source":{"afcf0de5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7b7e57c9":"read_train_data = pd.read_csv('..\/input\/titanic\/train.csv')\nprint(read_train_data)","f2b0e7e7":"# Excluding Categorical Variables\nnumeric_train_data = read_train_data\nprint(numeric_train_data)\n\nprint(type(numeric_train_data.columns))\n# Splitting Features and Target Variables\n# feature_names = list(sorted(set(numeric_train_data.columns).difference(set(['PassengerId', 'Survived', 'Name', 'Ticket', 'Cabin']))))\nfeature_names = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']\nprint(\"-------------------feature names-------------------\")\nprint(feature_names)\ny = numeric_train_data.Survived\nX = pd.DataFrame(numeric_train_data[feature_names])\n\nprint(X)\nprint(y)","49e8af3a":"col_with_missing_values_categorical_val = [col for col in X.columns\n                          if (X[col].isnull().any() & (X[col].dtype == 'object'))]\nprint(col_with_missing_values_categorical_val)\n\nX[col_with_missing_values_categorical_val] = X[col_with_missing_values_categorical_val].fillna(\"Unknown\")\n\nprint(X)","e5fb5534":"# Encoding Categorical Data 'Sex' using get_dummies()\ncol_with_categorical_data = [col for col in X.columns\n                            if (X[col].dtype=='object')]\ndummies = pd.get_dummies(X[col_with_categorical_data])\nmerged = pd.concat([X,dummies], axis=1)\nX = merged.drop(col_with_categorical_data, axis=1)\nprint(X.head(62))","bbad3fe1":"from sklearn.impute import SimpleImputer\n\n# Finding Missing Value Column\ncol_with_missing_values = [col for col in X.columns\n                          if (X[col].isnull().any())]\nprint(col_with_missing_values)\n\n# Simple Imputation\nmy_imputer = SimpleImputer(missing_values=np.nan, strategy='mean')\nimputed_X = pd.DataFrame(my_imputer.fit_transform(X))\n\nimputed_X.columns = X.columns\n\nprint(imputed_X)","80c953c2":"from sklearn.model_selection import train_test_split\n\nimputed_X_train, imputed_X_test, y_train, y_test = train_test_split(imputed_X, y, test_size=0.2, random_state=0)\n\nprint(imputed_X_train)\nprint(imputed_X_test)\nprint(y_train)\nprint(y_test)","42561239":"from sklearn.preprocessing import StandardScaler\n\nsc_age = StandardScaler()\nsc_fare = StandardScaler()\n\nimputed_X_train['Age'] = sc_age.fit_transform(imputed_X_train['Age'].values.reshape(-1,1))\nimputed_X_train['Fare'] = sc_fare.fit_transform(imputed_X_train['Fare'].values.reshape(-1,1))\n\nimputed_X_test['Age'] = sc_age.transform(imputed_X_test['Age'].values.reshape(-1,1))\nimputed_X_test['Fare'] = sc_fare.transform(imputed_X_test['Fare'].values.reshape(-1,1))\n\n\nprint(imputed_X_train)\nprint(imputed_X_test)","81c4f3c0":"from sklearn.ensemble import RandomForestClassifier\n# from xgboost import XGBClassifier\nfrom sklearn.metrics import mean_absolute_error\n\n# Fitting Data (Model: RandomForestClassifier)\n#model = XGBClassifier(random_state=0)\nmodel = RandomForestClassifier(bootstrap=True, max_depth=80, max_features=3, min_samples_leaf=3, min_samples_split=10, n_estimators=1000, random_state=0)\n#model = RandomForestClassifier(random_state=1)\nmodel.fit(imputed_X_train, y_train)\npredicted_y = model.predict(imputed_X_test)\n\nprint(predicted_y)\n\n# Finding Mean Absolute Error\ncalculate_mae = mean_absolute_error(y_test, predicted_y)\nprint(calculate_mae)","7032f247":"test_data = pd.read_csv('..\/input\/titanic\/test.csv')\n\nprint(feature_names)\nX_test = pd.DataFrame(test_data[feature_names])\n\ncol_with_missing_values_categorical_val_test = [col for col in X_test.columns\n                          if (X_test[col].isnull().any() & (X_test[col].dtype == 'object'))]\nprint(col_with_missing_values_categorical_val_test)\n\ncol_with_categorical_data_test = [col for col in X_test.columns\n                            if (X_test[col].dtype=='object')]\ndummies_test = pd.get_dummies(X_test[col_with_categorical_data_test])\nmerged_test = pd.concat([X_test,dummies_test], axis=1)\nX_test = merged_test.drop(col_with_categorical_data_test, axis=1)\nX_test['Embarked_Unknown'] = 0\nprint(X_test)\n\ncol_with_missing_values_test = [col for col in X_test.columns\n                          if (X_test[col].isnull().any())]\nprint(col_with_missing_values_test)\n\nimputed_X_test_data = pd.DataFrame(my_imputer.fit_transform(X_test))\n\nimputed_X_test_data.columns = X_test.columns\nprint(imputed_X_test)\n\nimputed_X_test_data['Age'] = sc_age.transform(imputed_X_test_data['Age'].values.reshape(-1,1))\nimputed_X_test_data['Fare'] = sc_fare.transform(imputed_X_test_data['Fare'].values.reshape(-1,1))\n\nprint(imputed_X_test_data)\n\n\ntest_preds = model.predict(imputed_X_test_data)\n\nprint(type(test_preds))\nprint(test_preds)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId,\n                       'Survived': test_preds})\noutput.to_csv('.\/submission.csv', index=False)\nprint(pd.read_csv('.\/submission.csv'))","28270820":"# Handling Missing Values: Numeric Values","c78995fc":"# Handling Missing Values: Categorical Variables","b8d041cf":"# **Test Data Analysis**","b901805b":"# Splitting Dataset into Train and Test Data","4fed9bff":"# Encoding Categorical Data","5d9a72b8":"# Fitting Data (Model: XGBClassifier)","fe189217":"# Feature Scaling","7d3e2b3c":"# Feature Selection","6b4843df":"# Reading Data Frame"}}