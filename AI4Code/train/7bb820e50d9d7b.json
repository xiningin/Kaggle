{"cell_type":{"6942d9b6":"code","53fe76b2":"code","b6a4a96d":"code","b1dfc7ac":"code","22f2f31c":"code","73282d36":"code","f1281896":"code","7c167949":"code","0650c8c0":"code","76d60f1f":"code","d9af5102":"code","3d188dda":"code","2bfe218e":"code","229e086b":"code","38399c18":"code","2724a51b":"code","f9cdc99c":"code","b6669aca":"code","c6821d00":"code","27304c2d":"code","13242222":"code","0b991c8b":"code","5f3c3d3b":"code","c79d50a4":"code","879e4d67":"code","0d16c947":"code","249ba8ec":"code","06a89686":"code","b6059d0b":"markdown","e20f70a6":"markdown","780aa05d":"markdown","cefb7092":"markdown","ea32b61e":"markdown","962e5f32":"markdown","b7aa68ae":"markdown","5dae606d":"markdown","2360f6c9":"markdown","b28afc54":"markdown","38ff6c3c":"markdown","4421c509":"markdown","cfc2e7e0":"markdown","3cc7892c":"markdown","320d27b0":"markdown","71d9b51f":"markdown","dd452e5d":"markdown","4bfc5cb7":"markdown","9d26ebf4":"markdown","8b709efe":"markdown","46e88e15":"markdown","f612bf2d":"markdown","d45bb537":"markdown","a4748887":"markdown","bc6a593a":"markdown","eb0b8f61":"markdown"},"source":{"6942d9b6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\nimport os\nimport glob as gb\nimport cv2\nimport tensorflow as tf\nimport keras","53fe76b2":"### for Kaggle\ntrainpath = '..\/input\/intel-image-classification\/seg_train\/'\ntestpath = '..\/input\/intel-image-classification\/seg_test\/'\npredpath = '..\/input\/intel-image-classification\/seg_pred\/'\n\n### for Jupyter\n# trainpath = ''\n# testpath = ''\n# predpath = ''","b6a4a96d":"for folder in  os.listdir(trainpath + 'seg_train') : \n    files = gb.glob(pathname= str( trainpath +'seg_train\/\/' + folder + '\/*.jpg'))\n    print(f'For training data , found {len(files)} in folder {folder}')","b1dfc7ac":"for folder in  os.listdir(testpath +'seg_test') : \n    files = gb.glob(pathname= str( testpath +'seg_test\/\/' + folder + '\/*.jpg'))\n    print(f'For testing data , found {len(files)} in folder {folder}')","22f2f31c":"files = gb.glob(pathname= str(predpath +'seg_pred\/*.jpg'))\nprint(f'For Prediction data , found {len(files)}')","73282d36":"code = {'buildings':0 ,'forest':1,'glacier':2,'mountain':3,'sea':4,'street':5}\n\ndef getcode(n) : \n    for x , y in code.items() : \n        if n == y : \n            return x    ","f1281896":"size = []\nfor folder in  os.listdir(trainpath +'seg_train') : \n    files = gb.glob(pathname= str( trainpath +'seg_train\/\/' + folder + '\/*.jpg'))\n    for file in files: \n        image = plt.imread(file)\n        size.append(image.shape)\npd.Series(size).value_counts()","7c167949":"size = []\nfor folder in  os.listdir(testpath +'seg_test') : \n    files = gb.glob(pathname= str( testpath +'seg_test\/\/' + folder + '\/*.jpg'))\n    for file in files: \n        image = plt.imread(file)\n        size.append(image.shape)\npd.Series(size).value_counts()","0650c8c0":"size = []\nfiles = gb.glob(pathname= str(predpath +'seg_pred\/*.jpg'))\nfor file in files: \n    image = plt.imread(file)\n    size.append(image.shape)\npd.Series(size).value_counts()","76d60f1f":"s = 100","d9af5102":"X_train = []\ny_train = []\nfor folder in  os.listdir(trainpath +'seg_train') : \n    files = gb.glob(pathname= str( trainpath +'seg_train\/\/' + folder + '\/*.jpg'))\n    for file in files: \n        image = cv2.imread(file)\n        image_array = cv2.resize(image , (s,s))\n        X_train.append(list(image_array))\n        y_train.append(code[folder])","3d188dda":"print(f'we have {len(X_train)} items in X_train')","2bfe218e":"plt.figure(figsize=(20,20))\nfor n , i in enumerate(list(np.random.randint(0,len(X_train),36))) : \n    plt.subplot(6,6,n+1)\n    plt.imshow(X_train[i])   \n    plt.axis('off')\n    plt.title(getcode(y_train[i]))","229e086b":"X_test = []\ny_test = []\nfor folder in  os.listdir(testpath +'seg_test') : \n    files = gb.glob(pathname= str(testpath + 'seg_test\/\/' + folder + '\/*.jpg'))\n    for file in files: \n        image = cv2.imread(file)\n        image_array = cv2.resize(image , (s,s))\n        X_test.append(list(image_array))\n        y_test.append(code[folder])\n        ","38399c18":"print(f'we have {len(X_test)} items in X_test')","2724a51b":"plt.figure(figsize=(20,20))\nfor n , i in enumerate(list(np.random.randint(0,len(X_test),36))) : \n    plt.subplot(6,6,n+1)\n    plt.imshow(X_test[i])    \n    plt.axis('off')\n    plt.title(getcode(y_test[i]))","f9cdc99c":"X_pred = []\nfiles = gb.glob(pathname= str(predpath + 'seg_pred\/*.jpg'))\nfor file in files: \n    image = cv2.imread(file)\n    image_array = cv2.resize(image , (s,s))\n    X_pred.append(list(image_array))       ","b6669aca":"print(f'we have {len(X_pred)} items in X_pred')","c6821d00":"plt.figure(figsize=(20,20))\nfor n , i in enumerate(list(np.random.randint(0,len(X_pred),36))) : \n    plt.subplot(6,6,n+1)\n    plt.imshow(X_pred[i])    \n    plt.axis('off')","27304c2d":"X_train = np.array(X_train)\nX_test = np.array(X_test)\nX_pred_array = np.array(X_pred)\ny_train = np.array(y_train)\ny_test = np.array(y_test)\n\nprint(f'X_train shape  is {X_train.shape}')\nprint(f'X_test shape  is {X_test.shape}')\nprint(f'X_pred shape  is {X_pred_array.shape}')\nprint(f'y_train shape  is {y_train.shape}')\nprint(f'y_test shape  is {y_test.shape}')","13242222":"KerasModel = keras.models.Sequential([\n        keras.layers.Conv2D(200,kernel_size=(3,3),activation='relu',input_shape=(s,s,3)),\n        keras.layers.Conv2D(150,kernel_size=(3,3),activation='relu'),\n        keras.layers.MaxPool2D(4,4),\n        keras.layers.Conv2D(120,kernel_size=(3,3),activation='relu'),    \n        keras.layers.Conv2D(80,kernel_size=(3,3),activation='relu'),    \n        keras.layers.Conv2D(50,kernel_size=(3,3),activation='relu'),\n        keras.layers.MaxPool2D(4,4),\n        keras.layers.Flatten() ,    \n        keras.layers.Dense(120,activation='relu') ,    \n        keras.layers.Dense(100,activation='relu') ,    \n        keras.layers.Dense(50,activation='relu') ,        \n        keras.layers.Dropout(rate=0.5) ,            \n        keras.layers.Dense(6,activation='softmax') ,    \n        ])","0b991c8b":"KerasModel.compile(optimizer ='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])","5f3c3d3b":"print('Model Details are : ')\nprint(KerasModel.summary())","c79d50a4":"epochs = 50\nThisModel = KerasModel.fit(X_train, y_train, epochs=epochs,batch_size=64,verbose=1)","879e4d67":"ModelLoss, ModelAccuracy = KerasModel.evaluate(X_test, y_test)\n\nprint('Test Loss is {}'.format(ModelLoss))\nprint('Test Accuracy is {}'.format(ModelAccuracy ))","0d16c947":"y_pred = KerasModel.predict(X_test)\n\nprint('Prediction Shape is {}'.format(y_pred.shape))","249ba8ec":"y_result = KerasModel.predict(X_pred_array)\n\nprint('Prediction Shape is {}'.format(y_result.shape))","06a89686":"plt.figure(figsize=(20,20))\nfor n , i in enumerate(list(np.random.randint(0,len(X_pred),36))) : \n    plt.subplot(6,6,n+1)\n    plt.imshow(X_pred[i])    \n    plt.axis('off')\n    plt.title(getcode(np.argmax(y_result[i])))","b6059d0b":"and to show random redicted pictures & its predicting category\n","e20f70a6":"\n_______\n\nnow to predict X test","780aa05d":"ok , since almost all of pictures are 150,150,3 , we can feel comfort in using all pictures in our model , after resizing it in a specific amount","cefb7092":"so how the model looks like ? ","ea32b61e":"great\n\nnow it's time to redict X Predict","962e5f32":"now to compile the model , using adam optimizer , & sparse categorical crossentropy loss","b7aa68ae":"_____\nnow for prediction folder","5dae606d":"now to read all pictues in six categories in training folder, ans use OpenCV to resize it , and not to forget to assign the y value , from the predefined function ","2360f6c9":"great , now how many items in X_train ","b28afc54":"ok , how about the test folder","38ff6c3c":"also with Prediction data , without having title ofcourse","4421c509":"______\n\nok , almost all of them are 150,150,3 , how about test images ? ","cfc2e7e0":"how is the final loss & accuracy\n","3cc7892c":"ok , only 80% accuracy & can be increased by tuning the hyperparameters\n","320d27b0":"now to build the CNN model by Keras , using Conv2D layers , MaxPooling & Denses","71d9b51f":"_____\n\n# Checking Images\n\nnow we need to heck the images sizes , to know ow they looks like\n\nsince we have 6 categories , we first need to create a dictionary with their names & indices , also create a function to get the code back","dd452e5d":"# Reading Images\n\nnow it's time to read all images & convert it into arrays\n\nfirst we'll create a variable s , which refer to size , so we can change it easily \n\nlet's use now size = 100 , so it will be suitable amount to contain accuracy without losing so much time in training","4bfc5cb7":"now how about the images sizes in train folder","9d26ebf4":"now to define the path ( to swtich it between jupyter notebook & kaggle kernel)","8b709efe":"now to train the model , lets use 50 epochs now","46e88e15":"also we have have a look to random pictures in X_train , and to adjust their title using the y value","f612bf2d":"great , now to repeat same steps exactly in test data","d45bb537":"almost same ratios , now to prediction images ","a4748887":"# Open Folders\n\nnow let's first check the Train folder to have a look to its content","bc6a593a":"# Image Classification Using CNN\nBy : Hesham Asem\n\n________\n\nwe'll build a CNN using Keras to use it classifying thousands of pictures in six different categories\n\nData link : https:\/\/www.kaggle.com\/puneet6060\/intel-image-classification\n\nfirst to import libraries\n","eb0b8f61":"________\n\n# Building The Model \n\nnow we need to build the model to train our data\n\nfirst to convert the data into arrays using numpy"}}