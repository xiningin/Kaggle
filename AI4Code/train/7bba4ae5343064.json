{"cell_type":{"4a56cb6a":"code","e0d67de3":"code","56be6251":"code","5fccc00b":"code","c67574b1":"code","25fe99d0":"code","0b9c1e4f":"code","9f7fb9b4":"code","62333e20":"code","ead884e2":"code","8fe2c867":"code","1a15d249":"code","7f3478ff":"code","68be6566":"code","e928a049":"code","82ce9e56":"code","bf939bde":"code","29050c10":"code","0563b072":"code","cb79a1d9":"code","e841db6f":"code","48536cd1":"code","9c397d1a":"code","7d07538b":"code","bb351e29":"code","1071692e":"code","884b0acb":"markdown","83ae470b":"markdown","fad4eec1":"markdown","37172bbb":"markdown","7134ab80":"markdown","c7ac4824":"markdown","ba1199cf":"markdown","12eb1586":"markdown","b355e255":"markdown"},"source":{"4a56cb6a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e0d67de3":"data = pd.read_csv(\"..\/input\/house-price\/House_Price.csv\").dropna()\ndata.head()","56be6251":"data = data.drop([\"Unnamed: 4\", \"BHK\", \"Unnamed: 6\", \"Unnamed: 7\"], axis=1)\ndata.head()","5fccc00b":"# numerating square\ndata[\"Total_Sq.ft\"] = [float(square.split(\" \")[0]) for square in data[\"Total_Sq.ft\"].to_list()]\n\n# numerating price per sq. ft.\nlst = data[\"Price_per_sq.ft\"].to_list()\nunnecessary_values = list(pd.Series([value for value in lst if len(value.split(\" \"))!=2]).unique())\nneeded_indexes = [lst.index(value) for value in lst if value not in unnecessary_values]\ndata = data.take(needed_indexes)\ndata[\"Price_per_sq.ft\"] = [float(value.split(\" \")[0].replace(\"\u20b9\", \"\")) for value in data[\"Price_per_sq.ft\"]]\n\n# numerationg flat price\nCr = [1 if(value.split(\" \")[1]==\"Cr\") else 0 for value in data[\"Flat_Price\"].to_list()]\nL = [1 if(value.split(\" \")[1]==\"L\") else 0 for value in data[\"Flat_Price\"].to_list()]\nFlat_Price = [float(value.split(\" \")[0].replace(\"\u20b9\", \"\")) for value in data[\"Flat_Price\"].to_list()]\ndata[\"Flat_Price\"] = Flat_Price\ndata[\"Cr\"] = Cr\ndata[\"L\"] = L\n\n# numerating EMI\nLacs = [1 if(value.split(\" \")[1]==\"Lacs\") else 0 for value in data[\"EMI_Starts\"].to_list()]\nK = [1 if(value.split(\" \")[1]==\"K\") else 0 for value in data[\"EMI_Starts\"].to_list()]\nEMI_Starts = [float(value.split(\" \")[0].replace(\"\u20b9\", \"\")) for value in data[\"EMI_Starts\"].to_list()]\ndata[\"EMI_Starts\"] = EMI_Starts\ndata[\"Lacs\"] = Lacs\ndata[\"K\"] = K\n\ndata.head()","c67574b1":"# trying to find fictive parameters\nhouse_types = data[\"HOUSE_TYPE\"].unique().tolist()\nPurposes = data[\"Purpose\"].unique().tolist()\nArea_Types = data[\"Area_Type\"].unique().tolist()\nOwner_types = data[\"Owner_type\"].unique().tolist()\n\nprint(house_types)\nprint(Purposes)\nprint(Area_Types)\nprint(Owner_types)","25fe99d0":"needed_indexes = [data[\"Location\"].to_list().index(value) for value in data[\"Location\"].to_list() if len(value.split(\", \"))==2]\ndata = data.take(needed_indexes)\n\n# dropping fictive parameters\ndata = data.drop([\"HOUSE_TYPE\", \"Purpose\", \"Area_Type\", \"Owner_name\"], axis=1)\n\n# forming City and Region parameters\ncities_column = [value.split(\", \")[0] for value in data[\"Location\"].to_list()]\n\nregions_column = [value.split(\", \")[1] for value in data[\"Location\"].to_list()]\n\ndata[\"City\"] = cities_column\ndata[\"Region\"] = regions_column\ndata = data.drop(\"Location\", axis=1)\n\ndata.head()","0b9c1e4f":"# Owner type enumeration\ndata[\"Owner_type\"] = [Owner_types.index(value) for value in data[\"Owner_type\"].to_list()]\n\n# City enumeration\ncities = data[\"City\"].unique().tolist()\ndata[\"City\"] = [cities.index(value) for value in data[\"City\"].to_list()]\n\ndata.head()","9f7fb9b4":"print(data[\"Region\"].unique())","62333e20":"data = data.drop(\"Region\", axis=1)\ndata.head()","ead884e2":"#full dataset preprocessing\ndata.columns = [\"Flat_Price\", \"EMI_Starts\", \"BHK_Value\", \"Total_Sq.ft\", \"Price_per_sq.ft\", \"Owner_type\", \"Cr\", \"L\", \"Lacs\", \"K\", \"City\"]\ndata = data.astype(\"float\")\n\ndata.head()","8fe2c867":"Y = data[\"EMI_Starts\"]\nX = data.drop(\"EMI_Starts\", axis=1)","1a15d249":"sns.heatmap(X.corr())","7f3478ff":"data = data.drop([\"Cr\", \"K\", \"L\"], axis=1)\n\nY = data[\"EMI_Starts\"]\nX = data.drop(\"EMI_Starts\", axis=1)\n\nsns.heatmap(X.corr())","68be6566":"data.info()","e928a049":"from sklearn.linear_model import LinearRegression\nfrom sklearn import metrics","82ce9e56":"lin_reg_pr_model = LinearRegression().fit(X, Y)\npredict = lin_reg_pr_model.predict(X)\nprint( \"MSE: {}\\nMAE: {}\\nR^2: {}\".format(metrics.mean_squared_error(Y, predict), metrics.mean_absolute_error(Y, predict), metrics.r2_score(Y, predict)) )","bf939bde":"from sklearn.linear_model import Ridge, Lasso, ElasticNet","29050c10":"ridge_reg_pr_model = Ridge(alpha=0.33).fit(X, Y)\npredict = ridge_reg_pr_model.predict(X)\nprint( \"MSE: {}\\nMAE: {}\\nR^2: {}\".format(metrics.mean_squared_error(Y, predict), metrics.mean_absolute_error(Y, predict), metrics.r2_score(Y, predict)) )","0563b072":"elasticnet_reg_pr_model = ElasticNet().fit(X, Y)\npredict = elasticnet_reg_pr_model.predict(X)\nprint( \"MSE: {}\\nMAE: {}\\nR^2: {}\".format(metrics.mean_squared_error(Y, predict), metrics.mean_absolute_error(Y, predict), metrics.r2_score(Y, predict)) )","cb79a1d9":"from sklearn.neural_network import MLPRegressor","e841db6f":"ann_model = MLPRegressor((225, 244, 225, 244, 100, 25), activation=\"tanh\").fit(X, Y)\npredict = ann_model.predict(X)\nprint( \"MSE: {}\\nMAE: {}\\n\".format(metrics.mean_squared_error(Y, predict), metrics.mean_absolute_error(Y, predict)) )","48536cd1":"from sklearn.ensemble import VotingRegressor","9c397d1a":"regressors = [(\"lr\", LinearRegression()), (\"en\", ElasticNet(alpha=0.55, l1_ratio=0.75)), (\"ann\", MLPRegressor((25, 25, 25), activation=\"tanh\"))]\nregressors += [(\"lasso\", Lasso()), (\"ridge\", Ridge(alpha=0.25))]\n\nvoting_reg_model = VotingRegressor(regressors).fit(X, Y)\npredict = voting_reg_model.predict(X)\nprint( \"MSE: {}\\nMAE: {}\\n\".format(metrics.mean_squared_error(Y, predict), metrics.mean_absolute_error(Y, predict)) )","7d07538b":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import AdaBoostRegressor","bb351e29":"tree_model = DecisionTreeRegressor().fit(X, Y)\npredict = tree_model.predict(X)\nprint( \"MSE: {}\\nMAE: {}\\n\".format(metrics.mean_squared_error(Y, predict), metrics.mean_absolute_error(Y, predict)) )","1071692e":"adaboost_model = AdaBoostRegressor().fit(X, Y)\npredict = adaboost_model.predict(X)\nprint( \"MSE: {}\\nMAE: {}\\n\".format(metrics.mean_squared_error(Y, predict), metrics.mean_absolute_error(Y, predict)) )","884b0acb":"We see, that simple linear regression gives better result again. At the end let's try to test AdaBoost and desicion trees.","83ae470b":"# Part 2\n**Predict model selection**","fad4eec1":"# Part 1\n**Data reading and primary cleaning and data preprocessing**","37172bbb":"After experimenting I saw that linear regression models can give better results in prediction. But what if we combine regressors using voting regression?","7134ab80":"**As we see, best results in EMI prediction we can have, if we will use AdaBoost or decision tree as prediction model.**","c7ac4824":"As we see, linear models can give not enough quality. Let's try ANNs.","ba1199cf":"**Now let try to build and test some prediction models.** Let's start with linear regression.","12eb1586":"**Firstly let drop some well-correlated parameters.**","b355e255":"As we see, linear regression is not very good. So let's try Ridge and elastic-net regression."}}