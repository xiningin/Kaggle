{"cell_type":{"b3480efe":"code","d6c07391":"code","5bc7d61e":"code","c38daa3a":"code","18809f1a":"code","73e58fd8":"code","0894ae5f":"code","fdcf7711":"code","c6950491":"markdown","18e257d0":"markdown"},"source":{"b3480efe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d6c07391":"data = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')\nprint(data.shape)\ndata.head()","5bc7d61e":"data.info()","c38daa3a":"X = data.iloc[:,:8].values\nY = data.iloc[:,-1].values\n\nscaler = StandardScaler()\nscaler.fit_transform(X)","18809f1a":"x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size=20,random_state = 3)\ndt = DecisionTreeClassifier()\ndt.fit(x_train,y_train)","73e58fd8":"y_pred = dt.predict(x_test)\nprint(\"Accuracy score = \",accuracy_score(y_test,y_pred))\nconfusion_matrix(y_test,y_pred)","0894ae5f":"# Declare parameters dictionary\nparams_dict = {\n    \"criterion\" : ['gini','entropy'],\n    \"max_depth\" : [1,2,3,4,5,6,7,None]\n}\n\ngs = GridSearchCV(dt,param_grid = params_dict,cv = 10)\ngs.fit(x_train,y_train)","fdcf7711":"# Finding the best parameter values and corresponding accuracy score\nprint(gs.best_params_)","c6950491":"## Using Grid Search to get the best hyperparameters to tune the classifier to.","18e257d0":"## Training the classifier"}}