{"cell_type":{"3965f96e":"code","070a2808":"code","765a79c7":"code","85c5f687":"code","753ad944":"code","037824d2":"code","c2df3d4d":"code","8414babe":"code","a63ff5c9":"code","e157ec69":"code","87d40b43":"code","7d654862":"code","00d23cfd":"code","605c2e80":"code","8a95b3d0":"code","7b60a319":"code","c35bc098":"code","3a1bc45f":"code","8843a00c":"code","200c77c7":"code","a8ecdc8e":"code","8cabf661":"markdown","d8fce581":"markdown","0dbbc74b":"markdown","6e51a3bd":"markdown","cd15721a":"markdown","b1ac9370":"markdown","ab95b599":"markdown","2393f84e":"markdown"},"source":{"3965f96e":"!pip install rapidfuzz -qq","070a2808":"import pandas as pd\nsub = pd.read_csv('..\/input\/wikipedia-image-caption\/sample_submission.csv')\nsub.head(10)","765a79c7":"captions = pd.read_csv('..\/input\/wikipedia-image-caption\/test_caption_list.csv')\nprint(len(captions))\ncaptions.head()","85c5f687":"test = pd.read_csv('..\/input\/wikipedia-image-caption\/test.tsv', sep='\\t')\ntest.head()","753ad944":"for i in range(5):\n    print(test.image_url.loc[i])","037824d2":"ls ..\/input\/wikipedia-image-caption\/image_data_test\/image_pixels","c2df3d4d":"tst0 = pd.read_csv('..\/input\/wikipedia-image-caption\/image_data_test\/image_pixels\/test_image_pixels_part-00000.csv', sep='\\t', header=None)\ntst0.head()","8414babe":"import base64 \nfrom PIL import Image\nimport io\n\nimage_64_decode = base64.b64decode(tst0[1].loc[0])\nimg = Image.open(io.BytesIO(image_64_decode))\nimg","a63ff5c9":"import datatable as dt\ntrain0 = dt.fread('..\/input\/wikipedia-image-caption\/train-00000-of-00005.tsv')\ntrain0.head()","e157ec69":"from urllib.parse import unquote\n\nt = test.image_url.loc[2]\n\ndef convert(t):\n    t = t.rsplit('\/',1)[1]\n    t = unquote(t)\n    t = t.replace('_', ' ')\n    t = t + ' [SEP]'\n    return(t)","87d40b43":"for i in range(5):\n    print(f'target: {train0[i,-1]}')\n    print(f'prediction: {convert(train0[i,1])}')\n    print()","7d654862":"test['prediction'] = test['image_url'].apply(convert)","00d23cfd":"test.head()","605c2e80":"CAPTIONS = captions.caption_title_and_reference_description.values.tolist()\nlen(CAPTIONS)","8a95b3d0":"from rapidfuzz import process, fuzz","7b60a319":"%%time\n\nfor i in range(5):\n    s = test.prediction.loc[i]\n    print(f'image_url: {s}')\n    res = process.extract(s, CAPTIONS, scorer=fuzz.ratio, processor=None, limit=5)\n    print(f'closest captions:')\n    for c in res:\n        print(c[0])\n    print('*'*60)\n    print()  ","c35bc098":"def find_closest_match(s):\n    res = process.extract(s, CAPTIONS, scorer=fuzz.ratio, processor=None, limit=5)\n    res = [x[0] for x in res]\n    return res","3a1bc45f":"from tqdm.auto import tqdm\ntqdm.pandas()","8843a00c":"test['caption_title_and_reference_description'] = test['prediction'].progress_apply(find_closest_match)","200c77c7":"sub = test[['id', 'caption_title_and_reference_description']]\nsub = sub.explode('caption_title_and_reference_description')\nsub.head()","a8ecdc8e":"sub.to_csv('submission.csv', index=False)","8cabf661":"We've now been able to score above 0.0000 on the leaderboard. To be honest, I'm not sure if using page_url is expected by the host so I asked that question on the forum. For sure, the more challenging and interesting aspect is matching the captions directly with images, and we'll try to tackle that next :) ","d8fce581":"Let's take a look at some of the **test images**. It looks like we have the test image data in 5 csv files, and these include links to the images (upload and commons varieties) as well as the base64 string encoded version of the images. ","0dbbc74b":"## Test data\n\nLet's start with **sample submission**. We have an *id* column and *caption_title_and_reference_description* column, and for each id we predict 5 captions. We need to select them from a predefined set of captions we'll see next.","6e51a3bd":"## Train data\n\nThanks to [this kernel](https:\/\/www.kaggle.com\/udbhavpangotra\/reading-the-data-datatable-works-like-a-charm) for showing how to accelerate data reading with datatable, please give it an upvote! Here we have a bunch of columns including page and image urls, as well as what looks as our target: caption_title_and_reference_description. There is a [SEP] string at the end of each entry here, or in the middle if multiple entries are provided. Not fully sure where this is coming from. \n","cd15721a":"The test file contains a list of id's and image urls. Let's print a few of those urls. ","b1ac9370":"## Baseline\n\nLooking at the train data, it seems that there is a connect between page url and our target. We also have page url in our test data, so let's try to exploit that and make a caption prediction only based on page url, without looking at the image. We'll verify that heuristic on train data, then we'll try to fuzzy match that caption prediction with the list of test captions.","ab95b599":"# Wikipedia - Image\/Caption Matching EDA\n\nThis looks like a very interesting competition (too bad it doesn't award points!!). Let's try to take a look at the data and try to submit a super simple baseline to check if our understanding is fine.\n\n**Note this is a new version, previously we've helped discover some issues with test data :)**","2393f84e":"## to be continued ..."}}