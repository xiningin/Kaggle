{"cell_type":{"1819e7a5":"code","8c2bbce2":"code","b5fa2127":"markdown"},"source":{"1819e7a5":"from multiprocessing import Pool\nfrom queue import Queue\nimport psutil\n\nclass MP_Algorithm():\n    \n    def __init__(self, num_of_processes, priority=None):\n        self._q_jobs = Queue()\n        self._jobs_pool = Pool(processes=num_of_processes)\n        if priority is not None:\n            self._setPriority(priority)\n            \n    def __del__(self):\n        self._jobs_pool.close()\n        self._jobs_pool.terminate()\n        self._jobs_pool.join()\n            \n    def _setPriority(self, priority):\n        for proc in self._jobs_pool._pool:\n            p = psutil.Process(proc.pid)\n            p.nice(priority)\n\n    def callAlgorithm(self, func, args):\n        job = self._jobs_pool.apply_async(func=func, args=args)\n        self._q_jobs.put(job)\n        \n    def Wait_GetNextResult(self):\n        if not self._q_jobs.empty():\n            job = self._q_jobs.get()   # get the next job\n            return job.get()           # get the returned values from the job\n            \n    def Wait_GetAllResults(self):\n        results = []\n        while not self._q_jobs.empty():\n            job = self._q_jobs.get()   # get the next job\n            results.append(job.get())  # get returned values from the job\n        return results\n    \n    def Wait_GetResults_iterator(self):\n        while not self._q_jobs.empty():\n            job = self._q_jobs.get()   # get the next job\n            yield job.get()            # get returned values from the job\n    \n    \n","8c2bbce2":"    \nimport time\n\ndef CalcPi(a, mod, n):\n    s=0\n    for i in range(a, n, mod):\n        s += 4 \/ (i * 4 + 1) - 4 \/ (i * 4 + 3)\n    return s\n\n#############################################################################\n\nN = 4000000\nMOD = 100\n########################## Single core example ##############################\n\ndef Single_Core():\n    \n    t0 = time.time()\n    s=0\n    \n    for i in range(MOD):\n        s += CalcPi(i, MOD, N)\n\n    t1 = time.time()\n    print(f'  Single core time laps = {t1 - t0} \\t PI = {s}')\n\n#########################  Same example with Multicore   ######################\ndef Multicore():\n    \n    mp_algo = MP_Algorithm(4, priority=1)  # Activate 4 jobs\n    \n    t0 = time.time()\n    s=0\n    \n    for i in range(MOD):\n        mp_algo.callAlgorithm(func=CalcPi, args=(i, MOD, N))  # calling the function in parallel \n        \n    for res in mp_algo.Wait_GetResults_iterator():            # Collecting the results\n        s += res\n\n    t1 = time.time()\n    print(f'  Multicore time laps = {t1 - t0} \\t PI = {s}')\n##############################################################################\nSingle_Core()\nMulticore()","b5fa2127":"# Example code of speed comparision - Single Core vs Multicore: "}}