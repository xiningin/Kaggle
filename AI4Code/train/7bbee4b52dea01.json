{"cell_type":{"919a421a":"code","dcb3695c":"code","bfce9c8c":"code","878cfdf8":"code","4c96809e":"code","097832c8":"code","121d33c3":"code","b84dfd2e":"code","84f987ea":"code","a3e9d09d":"code","78c8fa2b":"code","6e0d1fcb":"markdown","616bd298":"markdown","c67f7eef":"markdown","85ec242d":"markdown","59fb3440":"markdown","9f02181c":"markdown","e514645a":"markdown","2acfa4e6":"markdown","9b84b996":"markdown","7f18bdf9":"markdown","f0c55159":"markdown"},"source":{"919a421a":"import csv\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom tensorflow.python.framework import ops\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing","dcb3695c":"def load_data(train_path, test_path):\n    \"\"\"\n    method for data loading\n    :param train_path: path for the train set file\n    :param test_path: path for the test set file\n    :return: a 'pandas' array for each set\n    \"\"\"\n\n    train_data = pd.read_csv(train_path)\n    test_data = pd.read_csv(test_path)\n\n    print(\"number of training examples = \" + str(train_data.shape[0]))\n    print(\"number of test examples = \" + str(test_data.shape[0]))\n    print(\"train shape: \" + str(train_data.shape))\n    print(\"test shape: \" + str(test_data.shape))\n\n    return train_data, test_data\n\n\ndef output_submission(test_ids, predictions, id_column, predction_column, file_name):\n    \"\"\"\n    :param test_ids: vector with test dataset ids\n    :param predictions: vector with test dataset predictions\n    :param id_column: name of the output id column\n    :param predction_column: name of the output predction column\n    :param file_name: string for the output file name\n    :return: output a csv with ids ands predictions\n    \"\"\"\n\n    print('Outputting submission...')\n    with open('submissions\/' + file_name, 'w') as submission:\n        writer = csv.writer(submission)\n        writer.writerow([id_column, predction_column])\n        for test_id, test_prediction in zip(test_ids, predictions):\n            writer.writerow([test_id, test_prediction])\n    print('Output complete')\n\n\ndef pre_process_data(df):\n    \"\"\"\n    Perform a number of pre process functions on the data set\n    :param df: pandas data frame\n    :return: processed data frame\n    \"\"\"\n    # one-hot encode categorical values\n    df = pd.get_dummies(df)\n\n    return df\n\n\ndef mini_batches(train_set, train_labels, mini_batch_size):\n    \"\"\"\n    Generate mini batches from the data set (data and labels)\n    :param train_set: data set with the examples\n    :param train_labels: data set with the labels\n    :param mini_batch_size: mini batch size\n    :return: mini batches\n    \"\"\"\n    set_size = train_set.shape[0]\n    batches = []\n    num_complete_minibatches = set_size \/\/ mini_batch_size\n\n    for k in range(0, num_complete_minibatches):\n        mini_batch_x = train_set[k * mini_batch_size: (k + 1) * mini_batch_size]\n        mini_batch_y = train_labels[k * mini_batch_size: (k + 1) * mini_batch_size]\n        mini_batch = (mini_batch_x, mini_batch_y)\n        batches.append(mini_batch)\n\n    # Handling the end case (last mini-batch < mini_batch_size)\n    if set_size % mini_batch_size != 0:\n        mini_batch_x = train_set[(set_size - (set_size % mini_batch_size)):]\n        mini_batch_y = train_labels[(set_size - (set_size % mini_batch_size)):]\n        mini_batch = (mini_batch_x, mini_batch_y)\n        batches.append(mini_batch)\n\n    return batches","bfce9c8c":"def create_placeholders(input_size, output_size):\n    \"\"\"\n    Creates the placeholders for the tensorflow session.\n    :param input_size: scalar, input size\n    :param output_size: scalar, output size\n    :return: X  placeholder for the data input, of shape [None, input_size] and dtype \"float\"\n    :return: Y placeholder for the input labels, of shape [None, output_size] and dtype \"float\"\n    \"\"\"\n\n    x = tf.placeholder(shape=(None, input_size), dtype=tf.float32, name=\"X\")\n    y = tf.placeholder(shape=(None, output_size), dtype=tf.float32, name=\"Y\")\n\n    return x, y\n\n\ndef forward_propagation(x, parameters, keep_prob=1.0, hidden_activation='relu'):\n    \"\"\"\n    Implement forward propagation with dropout for the [LINEAR->RELU]*(L-1)->LINEAR-> computation\n    :param x: data, pandas array of shape (input size, number of examples)\n    :param parameters: output of initialize_parameters()\n    :param keep_prob: probability to keep each node of the layer\n    :param hidden_activation: activation function of the hidden layers\n    :return: last LINEAR value\n    \"\"\"\n\n    a_dropout = x\n    n_layers = len(parameters) \/\/ 2  # number of layers in the neural network\n\n    for l in range(1, n_layers):\n        a_prev = a_dropout\n        a_dropout = linear_activation_forward(a_prev, parameters['w%s' % l], parameters['b%s' % l], hidden_activation)\n\n        if keep_prob < 1.0:\n            a_dropout = tf.nn.dropout(a_dropout, keep_prob)\n\n    al = tf.matmul(a_dropout, parameters['w%s' % n_layers]) + parameters['b%s' % n_layers]\n\n    return al\n\n\ndef linear_activation_forward(a_prev, w, b, activation):\n    \"\"\"\n    Implement the forward propagation for the LINEAR->ACTIVATION layer\n    :param a_prev: activations from previous layer (or input data): (size of previous layer, number of examples)\n    :param w: weights matrix: numpy array of shape (size of current layer, size of previous layer)\n    :param b: bias vector, numpy array of shape (size of the current layer, 1)\n    :param activation: the activation to be used in this layer, stored as a text string: \"sigmoid\" or \"relu\"\n    :return: the output of the activation function, also called the post-activation value\n    \"\"\"\n\n    a = None\n    if activation == \"sigmoid\":\n        z = tf.matmul(a_prev, w) + b\n        a = tf.nn.sigmoid(z)\n\n    elif activation == \"relu\":\n        z = tf.matmul(a_prev, w) + b\n        a = tf.nn.relu(z)\n\n    elif activation == \"leaky relu\":\n        z = tf.matmul(a_prev, w) + b\n        a = tf.nn.leaky_relu(z)\n\n    return a\n\n\ndef initialize_parameters(layer_dims):\n    \"\"\"\n    :param layer_dims: python array (list) containing the dimensions of each layer in our network\n    :return: python dictionary containing your parameters \"w1\", \"b1\", ..., \"wn\", \"bn\":\n                    Wl -- weight matrix of shape (layer_dims[l], layer_dims[l-1])\n                    bl -- bias vector of shape (layer_dims[l], 1)\n    \"\"\"\n\n    parameters = {}\n    n_layers = len(layer_dims)\n\n    for l in range(1, n_layers):\n        parameters['w' + str(l)] = tf.get_variable('w' + str(l), [layer_dims[l - 1], layer_dims[l]],\n                                                   initializer=tf.contrib.layers.xavier_initializer())\n        parameters['b' + str(l)] = tf.get_variable('b' + str(l), [layer_dims[l]], initializer=tf.zeros_initializer())\n\n    return parameters\n\n\ndef compute_cost(z3, y):\n    \"\"\"\n    :param z3: output of forward propagation (output of the last LINEAR unit)\n    :param y: \"true\" labels vector placeholder, same shape as Z3\n    :return: Tensor of the cost function (RMSE as it is a regression)\n    \"\"\"\n\n    cost = tf.sqrt(tf.reduce_mean(tf.square(y - z3)))\n\n    return cost\n\n\ndef predict(data, parameters):\n    \"\"\"\n    make a prediction based on a data set and parameters\n    :param data: based data set\n    :param parameters: based parameters\n    :return: array of predictions\n    \"\"\"\n\n    init = tf.global_variables_initializer()\n    with tf.Session() as sess:\n        sess.run(init)\n\n        dataset = tf.cast(tf.constant(data), tf.float32)\n        fw_prop_result = forward_propagation(dataset, parameters)\n        prediction = fw_prop_result.eval()\n\n    return prediction\n\n\ndef rmse(predictions, labels):\n    \"\"\"\n    calculate cost between two data sets\n    :param predictions: data set of predictions\n    :param labels: data set of labels (real values)\n    :return: percentage of correct predictions\n    \"\"\"\n\n    prediction_size = predictions.shape[0]\n    prediction_cost = np.sqrt(np.sum(np.square(labels - predictions)) \/ prediction_size)\n\n    return prediction_cost\n\n\ndef rmsle(predictions, labels):\n    \"\"\"\n    calculate cost between two data sets\n    :param predictions: data set of predictions\n    :param labels: data set of labels (real values)\n    :return: percentage of correct predictions\n    \"\"\"\n\n    prediction_size = predictions.shape[0]\n    prediction_cost = np.sqrt(np.sum(np.square(np.log(predictions + 1) - np.log(labels + 1))) \/ prediction_size)\n\n    return prediction_cost\n\n\ndef l2_regularizer(cost, l2_beta, parameters, n_layers):\n    \"\"\"\n    Function to apply l2 regularization to the model\n    :param cost: usual cost of the model\n    :param l2_beta: beta value used for the normalization\n    :param parameters: parameters from the model (used to get weights values)\n    :param n_layers: number of layers of the model\n    :return: cost updated\n    \"\"\"\n\n    regularizer = 0\n    for i in range(1, n_layers):\n        regularizer += tf.nn.l2_loss(parameters['w%s' % i])\n\n    cost = tf.reduce_mean(cost + l2_beta * regularizer)\n\n    return cost\n\n\ndef build_submission_name(layers_dims, num_epochs, lr_decay,\n                          learning_rate, l2_beta, keep_prob, minibatch_size, num_examples):\n    \"\"\"\n    builds a string (submission file name), based on the model parameters\n    :param layers_dims: model layers dimensions\n    :param num_epochs: model number of epochs\n    :param lr_decay: model learning rate decay\n    :param learning_rate: model learning rate\n    :param l2_beta: beta used on l2 normalization\n    :param keep_prob: keep probability used on dropout normalization\n    :param minibatch_size: model mini batch size (0 to do not use mini batches)\n    :param num_examples: number of model examples (training data)\n    :return: built string\n    \"\"\"\n    submission_name = 'ly{}-epoch{}.csv' \\\n        .format(layers_dims, num_epochs)\n\n    if lr_decay != 0:\n        submission_name = 'lrdc{}-'.format(lr_decay) + submission_name\n    else:\n        submission_name = 'lr{}-'.format(learning_rate) + submission_name\n\n    if l2_beta > 0:\n        submission_name = 'l2{}-'.format(l2_beta) + submission_name\n\n    if keep_prob < 1:\n        submission_name = 'dk{}-'.format(keep_prob) + submission_name\n\n    if minibatch_size != num_examples:\n        submission_name = 'mb{}-'.format(minibatch_size) + submission_name\n\n    return submission_name\n\n\ndef plot_model_cost(train_costs, validation_costs, submission_name):\n    \"\"\"\n    :param train_costs: array with the costs from the model training\n    :param validation_costs: array with the costs from the model validation\n    :param submission_name: name of the submission (used for the plot title)\n    :return:\n    \"\"\"\n    plt.plot(np.squeeze(train_costs), label='Train cost')\n    plt.plot(np.squeeze(validation_costs), label='Validation cost')\n    plt.ylabel('cost')\n    plt.xlabel('iterations (per tens)')\n    plt.title(\"Model: \" + submission_name)\n    plt.legend()\n    plt.show()","878cfdf8":"def model(train_set, train_labels, validation_set, validation_labels, layers_dims, learning_rate=0.01, num_epochs=1001,\n          print_cost=True, plot_cost=True, l2_beta=0., keep_prob=1.0, hidden_activation='relu', return_best=False,\n          minibatch_size=0, lr_decay=0):\n    \"\"\"\n    :param train_set: training set\n    :param train_labels: training labels\n    :param validation_set: validation set\n    :param validation_labels: validation labels\n    :param layers_dims: array with the layer for the model\n    :param learning_rate: learning rate of the optimization\n    :param num_epochs: number of epochs of the optimization loop\n    :param print_cost: True to print the cost every 500 epochs\n    :param plot_cost: True to plot the train and validation cost\n    :param l2_beta: beta parameter for the l2 regularization\n    :param keep_prob: probability to keep each node of each hidden layer (dropout)\n    :param hidden_activation: activation function to be used on the hidden layers\n    :param return_best: True to return the highest params from all epochs\n    :param minibatch_size: size of th mini batch\n    :param lr_decay: if != 0, sets de learning rate decay on each epoch\n    :return parameters: parameters learnt by the model. They can then be used to predict.\n    :return submission_name: name for the trained model\n    \"\"\"\n\n    ops.reset_default_graph()  # to be able to rerun the model without overwriting tf variables\n\n    input_size = layers_dims[0]\n    output_size = layers_dims[-1]\n    num_examples = train_set.shape[0]\n    n_layers = len(layers_dims)\n    train_costs = []\n    validation_costs = []\n    best_iteration = [float('inf'), 0]\n    best_params = None\n\n    if minibatch_size == 0 or minibatch_size > num_examples:\n        minibatch_size = num_examples\n\n    num_minibatches = num_examples \/\/ minibatch_size\n\n    if num_minibatches == 0:\n        num_minibatches = 1\n\n    submission_name = build_submission_name(layers_dims, num_epochs, lr_decay, learning_rate, l2_beta, keep_prob,\n                                            minibatch_size, num_examples)\n\n    x, y = create_placeholders(input_size, output_size)\n    tf_valid_dataset = tf.cast(tf.constant(validation_set), tf.float32)\n    parameters = initialize_parameters(layers_dims)\n\n    fw_output_train = forward_propagation(x, parameters, keep_prob, hidden_activation)\n    train_cost = compute_cost(fw_output_train, y)\n\n    fw_output_valid = forward_propagation(tf_valid_dataset, parameters, keep_prob, hidden_activation)\n    validation_cost = compute_cost(fw_output_valid, validation_labels)\n\n    if l2_beta > 0:\n        train_cost = l2_regularizer(train_cost, l2_beta, parameters, n_layers)\n        validation_cost = l2_regularizer(validation_cost, l2_beta, parameters, n_layers)\n\n    if lr_decay != 0:\n        global_step = tf.Variable(0, trainable=False)\n        learning_rate = tf.train.inverse_time_decay(learning_rate, global_step=global_step, decay_rate=lr_decay,\n                                                    decay_steps=1)\n        optimizer = tf.train.AdamOptimizer(learning_rate).minimize(train_cost, global_step=global_step)\n    else:\n        optimizer = tf.train.AdamOptimizer(learning_rate).minimize(train_cost)\n\n    init = tf.global_variables_initializer()\n\n    with tf.Session() as sess:\n        sess.run(init)\n\n        for epoch in range(num_epochs):\n            train_epoch_cost = 0.\n            validation_epoch_cost = 0.\n\n            minibatches = mini_batches(train_set, train_labels, minibatch_size)\n\n            for minibatch in minibatches:\n                (minibatch_X, minibatch_Y) = minibatch\n                feed_dict = {x: minibatch_X, y: minibatch_Y}\n\n                _, minibatch_train_cost, minibatch_validation_cost = sess.run(\n                    [optimizer, train_cost, validation_cost], feed_dict=feed_dict)\n\n                train_epoch_cost += minibatch_train_cost \/ num_minibatches\n                validation_epoch_cost += minibatch_validation_cost \/ num_minibatches\n\n            if print_cost is True and epoch % 500 == 0:\n                print(\"Train cost after epoch %i: %f\" % (epoch, train_epoch_cost))\n                print(\"Validation cost after epoch %i: %f\" % (epoch, validation_epoch_cost))\n\n            if plot_cost is True and epoch % 10 == 0:\n                train_costs.append(train_epoch_cost)\n                validation_costs.append(validation_epoch_cost)\n\n            if return_best is True and validation_epoch_cost < best_iteration[0]:\n                best_iteration[0] = validation_epoch_cost\n                best_iteration[1] = epoch\n                best_params = sess.run(parameters)\n\n        if return_best is True:\n            parameters = best_params\n        else:\n            parameters = sess.run(parameters)\n\n        print(\"Parameters have been trained, getting metrics...\")\n\n        train_rmse = rmse(predict(train_set, parameters), train_labels)\n        validation_rmse = rmse(predict(validation_set, parameters), validation_labels)\n        train_rmsle = rmsle(predict(train_set, parameters), train_labels)\n        validation_rmsle = rmsle(predict(validation_set, parameters), validation_labels)\n\n        print('Train rmse: {:.4f}'.format(train_rmse))\n        print('Validation rmse: {:.4f}'.format(validation_rmse))\n        print('Train rmsle: {:.4f}'.format(train_rmsle))\n        print('Validation rmsle: {:.4f}'.format(validation_rmsle))\n\n        submission_name = 'tr_cost-{:.2f}-vd_cost{:.2f}-'.format(train_rmse, validation_rmse) + submission_name\n\n        if return_best is True:\n            print('Lowest rmse: {:.2f} at epoch {}'.format(best_iteration[0], best_iteration[1]))\n\n        if plot_cost is True:\n            plot_model_cost(train_costs, validation_costs, submission_name)\n\n        return parameters, submission_name","4c96809e":"TRAIN_PATH = '..\/input\/houseprices-log\/train_cleaned.csv'\nTEST_PATH = '..\/input\/houseprices-log\/test_cleaned.csv'\n\ntrain, test = load_data(TRAIN_PATH, TEST_PATH)\n\n# get the labels values\ntrain_raw_labels = train['SalePrice'].to_frame().as_matrix()","097832c8":"# pre process data sets\ntrain_pre = pre_process_data(train)\ntest_pre = pre_process_data(test)\n\n# drop unwanted columns\ntrain_pre = train_pre.drop(['Id', 'SalePrice'], axis=1)\ntest_pre = test_pre.drop(['Id'], axis=1)\n\n# align both data sets (by outer join), to make they have the same amount of features,\n# this is required because of the mismatched categorical values in train and test sets\ntrain_pre, test_pre = train_pre.align(test_pre, join='outer', axis=1)\n\n# replace the nan values added by align for 0\ntrain_pre.replace(to_replace=np.nan, value=0, inplace=True)\ntest_pre.replace(to_replace=np.nan, value=0, inplace=True)\n\ntrain_pre = train_pre.as_matrix().astype(np.float)\ntest_pre = test_pre.as_matrix().astype(np.float)","121d33c3":"# scale values\nstandard_scaler = preprocessing.StandardScaler()\ntrain_pre = standard_scaler.fit_transform(train_pre)\ntest_pre = standard_scaler.fit_transform(test_pre)\n\nX_train, X_valid, Y_train, Y_valid = train_test_split(train_pre, train_raw_labels, test_size=0.3, random_state=1)","b84dfd2e":"# hyperparameters\ninput_size = train_pre.shape[1]\noutput_size = 1\nnum_epochs = 14001\nlearning_rate = 0.0001\nlayers_dims = [input_size, 512, 256, 64, output_size]","84f987ea":"parameters, submission_name = model(X_train, Y_train, X_valid, Y_valid, layers_dims, num_epochs=num_epochs,\n                                    learning_rate=learning_rate, print_cost=True, plot_cost=True, l2_beta=10,\n                                    keep_prob=0.7, minibatch_size=0, return_best=True)","a3e9d09d":"prediction = list(map(lambda val: float(val), predict(test_pre, parameters)))\nprediction = list(map(lambda val: np.expm1(val), prediction))","78c8fa2b":"submission = pd.DataFrame({\"Id\":test.Id.values})\nsubmission[\"SalePrice\"] = prediction\nsubmission.to_csv(\"submission.csv\", index=False)","6e0d1fcb":"### Load data","616bd298":"# House Prices - Deep Learning aproach\n\n### obs: this code is from my github(https:\/\/github.com\/dimitreOliveira\/HousePrices) that's why it's so modular\n### obs2: kernel with the EDA and data pre process at https:\/\/www.kaggle.com\/dimitreoliveira\/house-prices-eda-first-kernel","c67f7eef":"### Normalize data","85ec242d":"> ### DEPENDENCIES","59fb3440":"### Model parameters","9f02181c":"### Make predictions","e514645a":"### Train model","2acfa4e6":"### MODEL","9b84b996":"### DATASET METHODS","7f18bdf9":"### Pre process data","f0c55159":"### AUXILIARY MODEL METHODS"}}