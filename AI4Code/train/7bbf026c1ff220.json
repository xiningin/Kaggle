{"cell_type":{"8155d4d1":"code","ceeea5ab":"code","b2287cc2":"code","9eb5675f":"code","c883dab5":"markdown","7073446e":"markdown","1b11e592":"markdown","a4d171ca":"markdown","c3a63ead":"markdown"},"source":{"8155d4d1":"import pandas as pd\n\n# Reading users' Bank Account, Credit Card, Device and Orders data from csv\nbank_accounts = pd.read_csv('..\/input\/scl2020-workshops\/scl-competition\/ptr-rd2-ungrd-rd2\/bank_accounts.csv')\ncredit_cards = pd.read_csv('..\/input\/scl2020-workshops\/scl-competition\/ptr-rd2-ungrd-rd2\/credit_cards.csv')\ndevices = pd.read_csv('..\/input\/scl2020-workshops\/scl-competition\/ptr-rd2-ungrd-rd2\/devices.csv')\norders = pd.read_csv('..\/input\/scl2020-workshops\/scl-competition\/ptr-rd2-ungrd-rd2\/orders.csv')\n\n# Displaying dataframes\ndisplay(bank_accounts)\ndisplay(credit_cards)\ndisplay(devices)\ndisplay(orders)","ceeea5ab":"# !python -m pip install networkx\nimport networkx as nx\n\n# Create a graph with 'user_id' as nodes and edges to connect\n# 'user_ids' that share the same 'bank_account', 'credit_card' or 'device'\nusers_graph = nx.Graph()\n\ndef add_user_id_link(G, user_id1, user_id2, attr1, attr2):\n    \"\"\"\n    Function to add link in graph G for user_id1 and user_id2\n    if they share the same 'attr' ('device', 'credit_card' or 'bank_account')\n    \"\"\"\n    if attr1 == attr2:\n        G.add_edge(user_id1, user_id2)\n\nfor df in [bank_accounts, credit_cards, devices]:\n    # Ensure that 'bank_account', 'credit_card' and 'device' are str\n    df.iloc[:,1] = df.iloc[:,1].astype('str')\n\n    # Sorting by 'bank_account', 'credit_card' and 'device'\n    df.sort_values(df.columns[1], inplace=True)\n\n    # Compare if consecutive rows have the same 'user_id'\n    # by adding shifted rows as new columns to easily compare consecutive rows\n    df_next_row = df.shift(1)\n    df_next_row.columns = df.columns + '2'\n    df_combined = pd.concat([df, df_next_row], axis='columns')\n\n    # If consecutive rows (columns 1 & 2 vs 3 & 4) share the same\n    # 'bank_account', 'credit_card' or 'device', add link on users_graph\n    df_combined.apply(lambda row: add_user_id_link(users_graph, row['userid'], row['userid2'], row.values[1], row.values[3]), axis=1)","b2287cc2":"def is_fraud(G, buyer_id, seller_id):    \n    \"\"\"\n    Function to detect frauds by checking if there exists a path \n    from buyer_id node to seller_id node in users_graph.\n    \"\"\"\n    # Check if both buyer_id and seller_id are in users_graph\n    if G.has_node(buyer_id) and G.has_node(seller_id):\n        # Check if there is a path from buyer_id to seller_id\n        if buyer_id in nx.algorithms.descendants(G, seller_id):\n            return 1\n    return 0\n\norders['is_fraud'] = orders.apply(lambda row: is_fraud(users_graph, row.buyer_userid, row.seller_userid), axis=1)\ndisplay(orders)","9eb5675f":"df_frauds = orders[['orderid', 'is_fraud']]\ndf_frauds.to_csv('..\\output\\ans.csv', index=False)","c883dab5":"[](http:\/\/)# Shopee Best Coders 2019 (Undergraduate) Round 2 - Fraud Detection\n\nIn this notebook, I will attempt to solve this challenge https:\/\/www.kaggle.com\/c\/opn-rd2-acv\/overview using Graph data structure.\n\nA mirrored repo is also available on my kaggle link https:\/\/github.com\/justinusj\/fraud-detection\/tree\/main","7073446e":"## 3. Detecting fraudulent activities using users_graph","1b11e592":"## 2. Setting up a graph of 'user_ids' called 'users_graph'","a4d171ca":"## 4. Saving orderids and fraudulent flags as csv","c3a63ead":"## 1. Reading users data into dataframes"}}