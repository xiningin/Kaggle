{"cell_type":{"e8ccdb58":"code","efb7539d":"code","71297083":"code","64b7d5ad":"code","43c258fc":"code","025b7ba5":"code","db48fa7f":"code","1fbceb98":"code","68dea66e":"code","11207963":"code","ba8e7f60":"code","affe24a5":"markdown"},"source":{"e8ccdb58":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt","efb7539d":"# Create 4 dataframes, one for each suit of cards\nd1_card = {'card_num':list(range(2,15))}\n\ndf1_card = pd.DataFrame(data=d1_card)\n\ndf1_card['symbol'] = 'Hearts'\n\nd2_card = {'card_num':list(range(2,15))}\n\ndf2_card = pd.DataFrame(data=d2_card)\n\ndf2_card['symbol'] = 'Spades'\n\nd3_card = {'card_num':list(range(2,15))}\n\ndf3_card = pd.DataFrame(data=d3_card)\n\ndf3_card['symbol'] = 'Diamonds'\n\nd4_card = {'card_num':list(range(2,15))}\n\ndf4_card = pd.DataFrame(data=d4_card)\n\ndf4_card['symbol'] = 'Clubs'\n\n\n#Combine the 52 cards together\n\nframes = [df1_card, df2_card, df3_card, df4_card]\n\ndf_cards = pd.concat(frames, ignore_index=True)\n\n\n#Create a new column that will change values 11-14 to their respective face card value\n\ndf_cards['face_value'] = df_cards[['card_num']].apply(lambda x: 'J' if x['card_num'] == 11\\\n                                                else ('Q' if x['card_num'] == 12\\\n                                                    else ('K' if x['card_num'] == 13\\\n                                                        else ('A' if x['card_num'] == 14 else x['card_num']\\\n                                                             )\\\n                                                         )\\\n                                                     )\\\n                                               , axis=1\n                                               )\n\n# Let's not start with the cards ordered.  Let's give one quick shuffle.\ndf_cards = df_cards.sample(frac=1, random_state=0).reset_index()\n\ndf_cards","71297083":"# In the example above, we see the final Ace is located at the 37th index, \n# or the 38th card that is drawn.  Let's double check that this can be\n# captured easily and accurately.\n\n# Pull cards that are Aces, find the Max index and add 1 to that value\ndf_cards[df_cards.face_value == 'A'].index.max() + 1","64b7d5ad":"# In this example, the random_state will change to a 1\n# The last Ace is the final, or 52nd, card\ndf_cards.sample(frac=1, random_state=1).reset_index()","43c258fc":"# Let's take the same deck and shuffle it in the same manner \n# (by changing the random_state) and checking the placement of the final Ace.\nshuffle_1 = df_cards.sample(frac=1, random_state=1).reset_index()\n\nshuffle_1[shuffle_1.face_value == 'A'].index.max() + 1","025b7ba5":"# Another test, using 2 as the random_state\ndf_cards.sample(frac=1, random_state=2).reset_index()","db48fa7f":"# Just as above, the final Ace is at index 41, or the 42nd card.\nshuffle_2 = df_cards.sample(frac=1, random_state=2).reset_index()\n\nshuffle_2[shuffle_2.face_value == 'A'].index.max() + 1","1fbceb98":"# A list to house results.  For each iteration\/deck of cards, an integer will be appended\n# which will show the numbered placement of the final Ace.\nlast_ace = []\n\nfor n in range(0,10000):\n    # Since n will go up by 1 for each iteration, that value will then be put \n    # into the sample() function as the random_state argument.\n    # This will allow for the cards to be shuffled differently\n    # and will also allow for anyone using the same process\n    # to be able to reproduce the results.\n    shuffled_deck = df_cards.sample(frac=1, random_state=n).reset_index()\n    \n    #Find the index of the last Ace and add 1 to that index to get the card number\n    last_ace.append(shuffled_deck[shuffled_deck.face_value == 'A'].index.max() + 1)\n\n# A quick histogram to show the results\nplt.hist(last_ace, bins=((max(last_ace) - min(last_ace))+1))","68dea66e":"results = pd.DataFrame(pd.Series(last_ace).value_counts()).reset_index()","11207963":"results.rename(columns={'index':'final_ace_placement', 0:'ace_count'}, inplace=True)\n\n# Since a cumsum() will be used, the order of the rows matters\nresults.sort_values(by='final_ace_placement', inplace=True)\n\nresults['cumulative_deck_count'] = results.ace_count.cumsum()\n\n# Create a column that will show the probability of pulling all 4 aces\n# by that number card or prior\nresults['cumulative_probability'] = results['cumulative_deck_count'] \/ results['ace_count'].sum()\n\nresults","ba8e7f60":"results[results.final_ace_placement == 26]","affe24a5":"## Looking at the example above, there's roughly a 5.6% chance of having all 4 aces in the top\/first half of the deck.  When run with 1 million decks, the results are just under 5.5%."}}