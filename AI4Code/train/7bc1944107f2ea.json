{"cell_type":{"de0cdf43":"code","55701349":"code","36ce4e30":"code","4127b779":"code","2843cbd0":"code","bae5ca4a":"code","c8fd4f8e":"code","e9d10cef":"code","84971e3c":"markdown","17eb81c5":"markdown","0638f73e":"markdown","787058d0":"markdown","5d74e315":"markdown","3dab0009":"markdown","917ece64":"markdown","6f1fc7c6":"markdown","aa0aa3a6":"markdown","6a3979e6":"markdown"},"source":{"de0cdf43":"import matplotlib.pyplot as plt\nfrom tqdm import tqdm\nimport numpy as np\nimport cv2 \nimport os\n\nDATADIR = \"\/kaggle\/input\/sign-language-for-alphabets\/Sign Language for Alphabets\/\"\nCATEGORIES = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\",\n              \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"unknown\"]\n\nfor category in CATEGORIES:\n    path = os.path.join(DATADIR,category)  # create path to categories\n    for img in os.listdir(path):\n      # iterate over each image\n      # convert to array\n      img_array = cv2.imread(os.path.join(path,img) ,cv2.IMREAD_GRAYSCALE)  \n      plt.imshow(img_array, cmap='gray')  # graph it\n      plt.show()  # display!\n\n      break  # we just want one for now so break\n    break  #...and one more!","55701349":"IMG_SIZE = 64\n\nnew_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))\nplt.imshow(new_array, cmap='gray')\nplt.show() # Show resize image","36ce4e30":"training_data = []\n\ndef create_training_data():\n    for category in CATEGORIES:  # do a,b,c, .....\n\n        path = os.path.join(DATADIR,category)  # create path to categories\n        class_num = CATEGORIES.index(category)  # get the classification\n\n        for img in tqdm(os.listdir(path)):  # iterate over each image\n            try:\n                img_array = cv2.imread(os.path.join(path,img) ,cv2.IMREAD_GRAYSCALE)  # convert to array\n                new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))  # resize to normalize data size\n                training_data.append([new_array, class_num])  # add this to our training_data\n            except Exception as e:  # in the interest in keeping the output clean...\n                pass\n            \ncreate_training_data() # call function","4127b779":"import random\nrandom.shuffle(training_data)\n\n# Check\nfor sample in training_data[:10]:\n    print(sample[1])","2843cbd0":"X = []\nY = []\n\nfor features,label in training_data:\n    X.append(features)\n    Y.append(label)\n\nprint(X[0].reshape(-1, IMG_SIZE, IMG_SIZE, 1))\n\nX = np.array(X).reshape(-1, IMG_SIZE, IMG_SIZE, 1)","bae5ca4a":"import pickle\n\npickle_out = open(\"\/kaggle\/working\/X.pickle\",\"wb\")\npickle.dump(X, pickle_out)\npickle_out.close()\n\npickle_out = open(\"\/kaggle\/working\/Y.pickle\",\"wb\")\npickle.dump(Y, pickle_out)\npickle_out.close()","c8fd4f8e":"import tensorflow as tf\nfrom tensorflow.keras.datasets import cifar10\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\nfrom tensorflow.keras.callbacks import TensorBoard\nimport time\n\nimport pickle\n\nNAME = \"Alphabets-CNN-Model-{}\".format(str(time.ctime())) # Model Name\n\n# Load pickel data\npickle_in = open(\"\/kaggle\/working\/X.pickle\",\"rb\")\nX = pickle.load(pickle_in)\nX = np.array(X).reshape(-1, IMG_SIZE, IMG_SIZE, 1)\n\npickle_in = open(\"\/kaggle\/working\/Y.pickle\",\"rb\")\nY = pickle.load(pickle_in)\nY = np.array(Y)\n\nX = X\/255.0\n\nmodel = Sequential()\n\nmodel.add(Conv2D(16, (2,2), input_shape=X.shape[1:], activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\nmodel.add(Conv2D(32, (3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(3, 3), strides=(3, 3), padding='same'))\nmodel.add(Conv2D(64, (5,5), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(5, 5), strides=(5, 5), padding='same'))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(27, activation='softmax')) # size must be equal to number of classes i.e. 27\n\ntensorboard = TensorBoard(log_dir=\"\/kaggle\/working\/logs\/{}\".format(NAME))\n\nmodel.compile(loss='sparse_categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n\nmodel.fit(X, Y, batch_size=32, epochs=10, validation_split=0.2, callbacks=[tensorboard])","e9d10cef":"model.save(\"\/kaggle\/working\/{}.model\".format(NAME))","84971e3c":"## Save Model","17eb81c5":"## Appending data into X and Y lists","0638f73e":"## Shuffle","787058d0":"## Resize","5d74e315":"## Create training data","3dab0009":"## Load Data","917ece64":"## Pickle","6f1fc7c6":"# Sign Language Model Training for Alphabets\n\nIn this kernel, I will show you how to use and train model for [Sign Language for Alphabets Dataset](https:\/\/www.kaggle.com\/muhammadkhalid\/sign-language-for-alphabets)","aa0aa3a6":"## Start Training","6a3979e6":"# Done"}}