{"cell_type":{"8c1afd8e":"code","920e6e32":"code","be82ccb7":"code","754ff59c":"code","51b027ae":"code","4a360c83":"code","523849f5":"code","c597bf6d":"code","a440d606":"code","d294d0c0":"code","8ff27bdb":"code","511fa0ba":"code","a9fecc9b":"code","cb4aaaea":"code","cd990c6a":"code","bd54c5ab":"code","a9ddefc5":"code","8d0df5bd":"code","b6a4d037":"code","67d014fa":"code","5dd459e5":"code","f00aba2c":"code","ef5cc3b4":"code","5871fa54":"code","a6d6da23":"code","36e0611c":"code","905ffa62":"code","c8948bb0":"code","4edca7b3":"code","af381274":"code","45268dbf":"code","258cd34e":"code","497478a5":"code","476dab8e":"code","9c6070e7":"code","9ae8d51c":"code","0aca80b8":"code","6be3b629":"code","c3d0776f":"code","fbaebfb1":"code","b7dafedf":"code","f903389f":"code","27dea675":"code","a5548220":"code","803fe64b":"code","7c221a88":"code","059e6c58":"code","a26ffd59":"code","2b89b430":"code","72b43660":"code","a55437ea":"code","3572592a":"code","1404b917":"code","495192ac":"code","19853a1f":"code","23989a2f":"code","1f271a27":"code","335d3402":"code","47c6530b":"code","afc56759":"code","84dc139a":"code","ec26c93c":"code","99a2bc6a":"code","732e2b76":"code","56680cb4":"code","7c3e35a7":"code","79c5f3ed":"code","8d038117":"code","2b2d3400":"code","05991e96":"code","a04fc26d":"code","07953a51":"code","e79267cc":"code","4dd9153a":"code","00a9ae35":"code","a36f5293":"code","6adb1b1d":"code","a97a64cf":"code","52562753":"code","60c11f1c":"code","475e95cd":"code","17614d4d":"code","852406bf":"code","c13d8e7f":"code","a3ad3d70":"code","28eca4f3":"code","411b9c38":"code","09360fdb":"code","cb130911":"code","783bcffd":"code","f7cbea91":"code","d7599175":"code","ce9b5f4c":"code","83689fff":"code","24d4323b":"code","5f0646b8":"code","431da8c0":"code","907e44f0":"code","4552aff2":"code","1afa03ee":"code","6a97ff7d":"code","bdcf1c98":"code","a3ec22fa":"code","ae862348":"code","9f4d7ed6":"code","c8b48ec0":"markdown","dd330dd7":"markdown","5b22668f":"markdown","3733352f":"markdown","d2b24a4a":"markdown","67cfa7d6":"markdown","9c61e112":"markdown","8af11d62":"markdown","67cbb79b":"markdown","dc5171be":"markdown","5367477e":"markdown","6e2be8fb":"markdown","4fa91aff":"markdown","88aac32c":"markdown","5aff2d93":"markdown"},"source":{"8c1afd8e":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.preprocessing import RobustScaler, StandardScaler\n\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n\nimport unidecode\nimport nltk\nfrom nltk.stem.snowball import SnowballStemmer\nfrom nltk.tokenize import RegexpTokenizer\nfrom sklearn.feature_extraction import text\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","920e6e32":"def calc_smooth_mean(df, df2, by, on, m):\n    # Compute the global mean\n    mean = df[on].mean()\n\n    # Compute the number of values and the mean of each group\n    agg = df.groupby(by)[on].agg(['count', 'mean'])\n    counts = agg['count']\n    means = agg['mean']\n\n    # Compute the \"smoothed\" means\n    smooth = (counts * means + m * mean) \/ (counts + m)\n\n    # Replace each value by the according smoothed mean\n    return df[by].map(smooth),df2[by].map(smooth)","be82ccb7":"df = pd.read_csv('\/kaggle\/input\/wine-reviews\/winemag-data-130k-v2.csv')","754ff59c":"df.info()","51b027ae":"df.head()","4a360c83":"df=df.drop('Unnamed: 0',1)","523849f5":"df.describe(include = 'all')","c597bf6d":"print(sum(df.duplicated()))","a440d606":"df = df.drop_duplicates().reset_index(drop=True)\n\ndf.describe(include = 'all')","d294d0c0":"df = df[~df.description.isin(df[df.description.duplicated()].description)].sort_values(by='description')","8ff27bdb":"plt.figure(num = None, figsize=(21,6))\nsns.countplot(x = df.points, color='tab:blue')\nplt.show()","511fa0ba":"print('1\u00ba Quartile: ', df['points'].quantile(q = 0.25))\nprint('2\u00ba Quartile: ', df['points'].quantile(q = 0.50))\nprint('3\u00ba Quartile: ', df['points'].quantile(q = 0.75))\nprint('4\u00ba Quartile: ', df['points'].quantile(q = 1.00))\n#Calculate the outliers:\n  # Interquartile range, IQR = Q3 - Q1\n  # lower 1.5*IQR whisker = Q1 - 1.5 * IQR \n  # Upper 1.5*IQR whisker = Q3 + 1.5 * IQR\n    \nprint('Qualities above: ', df['points'].quantile(q = 0.75) + \n                      3*(df['points'].quantile(q = 0.75) - df['points'].quantile(q = 0.25)), 'are outliers')\n\nupper = df['points'].quantile(q = 0.75) + 3*(df['points'].quantile(q = 0.75) - df['points'].quantile(q = 0.25))\n\nprint('Qualities below: ', df['points'].quantile(q = 0.25) - \n                      3*(df['points'].quantile(q = 0.75) - df['points'].quantile(q = 0.25)), 'are outliers')\n","a9fecc9b":"plt.figure(num = None, figsize=(21,6))\nsns.boxenplot(y = df.price, color='tab:blue')\nplt.show()","cb4aaaea":"plt.figure(num = None, figsize=(21,10))\nsns.regplot(x=df['price'], y=df['points'], color='tab:blue')\nplt.show()","cd990c6a":"plt.figure(num = None, figsize=(21,10))\nsns.regplot(x=np.log(df['price']), y=df['points'], color='tab:blue')\nplt.show()","bd54c5ab":"df['price'] = np.log(df['price'])","a9ddefc5":"df['price'] = df['price'].fillna(df['price'].mean())","8d0df5bd":"fig, (ax1,ax2) = plt.subplots(nrows = 2, ncols=1, figsize=(21,12))\nsns.countplot(x = df.country, color='tab:blue', order = df.groupby(['country']).size().sort_values(ascending=False).reset_index().iloc[0:10,0], ax=ax1)\nsns.countplot(x = df.country, color='tab:blue', order = df.groupby(['country']).size().sort_values(ascending=True).reset_index().iloc[0:10,0], ax=ax2)\nplt.subplots_adjust(hspace=0.25)","b6a4d037":"other_nations = list(df.groupby(['country']).size().sort_values(ascending=True).reset_index(name='quantity')[df.groupby(['country']).size().sort_values(ascending=True).reset_index(name='quantity').quantity<50].country.values)","67d014fa":"df.country = df.country.apply(lambda x: 'Other' if x in other_nations else x)","5dd459e5":"df.country.unique()","f00aba2c":"plt.figure(num = None, figsize=(21,6))\nsns.countplot(x = df.country, color='tab:blue', order = df.groupby(['country']).size().sort_values(ascending=False).reset_index().iloc[:,0])\nplt.show()","ef5cc3b4":"df[pd.isnull(df.country)].province.values","5871fa54":"df = df[~pd.isnull(df.country)]","a6d6da23":"plt.figure(num = None, figsize=(21,10))\nsns.boxenplot(y = 'points', x='country', data = df, palette='pastel', order = df.groupby(['country']).size().sort_values(ascending=False).reset_index().iloc[:,0])\nplt.show()","36e0611c":"fig, (ax1,ax2) = plt.subplots(nrows = 2, ncols=1, figsize=(21,12))\nsns.countplot(x = df.province, color='tab:blue', order = df.groupby(['province']).size().sort_values(ascending=False).reset_index().iloc[0:10,0], ax=ax1)\nsns.countplot(x = df.province, color='tab:blue', order = df.groupby(['province']).size().sort_values(ascending=True).reset_index().iloc[0:10,0], ax=ax2)\nplt.subplots_adjust(hspace=0.25)","905ffa62":"np.size(df.province.unique())","c8948bb0":"other_provinces = list(df.groupby(['province']).size().sort_values(ascending=True).reset_index(name='quantity')[df.groupby(['province']).size().sort_values(ascending=True).reset_index(name='quantity').quantity<30].province.values)","4edca7b3":"df.province = df.province.apply(lambda x: 'Other' if x in other_provinces else x)","af381274":"np.size(df.province.unique())","45268dbf":"plt.figure(num = None, figsize=(21,10))\nsns.boxenplot(y = 'points', x='province', data = df, palette='pastel', order = df.groupby(['province']).size().sort_values(ascending=False).reset_index().iloc[0:20,0])\nplt.show()","258cd34e":"fig, (ax1,ax2) = plt.subplots(nrows = 2, ncols=1, figsize=(21,12))\nsns.countplot(x = df.region_1, color='tab:blue', order = df.groupby(['region_1']).size().sort_values(ascending=False).reset_index().iloc[0:10,0], ax=ax1)\nsns.countplot(x = df.region_1, color='tab:blue', order = df.groupby(['region_1']).size().sort_values(ascending=True).reset_index().iloc[0:10,0], ax=ax2)\nplt.subplots_adjust(hspace=0.25)","497478a5":"np.size(df.region_1.unique())","476dab8e":"len(df.groupby(['region_1']).size().sort_values(ascending=True).reset_index(name='quantity')[df.groupby(['region_1']).size().sort_values(ascending=False).reset_index(name='quantity').quantity<30])","9c6070e7":"plt.figure(num = None, figsize=(21,10))\nsns.boxenplot(y = 'points', x='region_1', data = df, palette='pastel',order = df.groupby(['region_1']).size().sort_values(ascending=False).reset_index().iloc[0:20,0])\nplt.show()","9ae8d51c":"df.region_1 = df.region_1.fillna('No_region')","0aca80b8":"fig, (ax1,ax2) = plt.subplots(nrows = 2, ncols=1, figsize=(21,12))\nsns.countplot(x = df.region_2, color='tab:blue', order = df.groupby(['region_2']).size().sort_values(ascending=False).reset_index().iloc[0:10,0], ax=ax1)\nsns.countplot(x = df.region_2, color='tab:blue', order = df.groupby(['region_2']).size().sort_values(ascending=True).reset_index().iloc[0:10,0], ax=ax2)\nplt.subplots_adjust(hspace=0.25)","6be3b629":"df.region_2 = df.region_2.fillna('No_region')","c3d0776f":"plt.figure(num = None, figsize=(21,10))\nsns.boxenplot(y = 'points', x='region_2', data = df, palette='pastel', order = df.groupby(['region_2']).size().sort_values(ascending=False).reset_index().iloc[:,0])\nplt.show()","fbaebfb1":"df['designation'] = df.designation.str.lower()","b7dafedf":"fig, (ax1,ax2) = plt.subplots(nrows = 2, ncols=1, figsize=(21,12))\nsns.countplot(x = df.designation, color='tab:blue', order = df.groupby(['designation']).size().sort_values(ascending=False).reset_index().iloc[0:10,0], ax=ax1)\nsns.countplot(x = df.designation, color='tab:blue', order = df.groupby(['designation']).size().sort_values(ascending=True).reset_index().iloc[0:10,0], ax=ax2)\nplt.subplots_adjust(hspace=0.25)","f903389f":"np.size(df.designation.unique())","27dea675":"len(df.groupby(['designation']).size().sort_values(ascending=True).reset_index(name='quantity')[df.groupby(['designation']).size().sort_values(ascending=False).reset_index(name='quantity').quantity<30])","a5548220":"plt.figure(num = None, figsize=(21,10))\nsns.boxenplot(y = 'points', x='designation', data = df, palette='pastel',order = df.groupby(['designation']).size().sort_values(ascending=False).reset_index().iloc[0:20,0])\nplt.show()","803fe64b":"df.designation = df.designation.fillna('No_region')","7c221a88":"fig, (ax1,ax2) = plt.subplots(nrows = 2, ncols=1, figsize=(21,12))\nsns.countplot(x = df.variety, color='tab:blue', order = df.groupby(['variety']).size().sort_values(ascending=False).reset_index().iloc[0:10,0], ax=ax1)\nsns.countplot(x = df.variety, color='tab:blue', order = df.groupby(['variety']).size().sort_values(ascending=True).reset_index().iloc[0:10,0], ax=ax2)\nplt.subplots_adjust(hspace=0.25)","059e6c58":"np.size(df.variety.unique())","a26ffd59":"other_varieties = list(df.groupby(['variety']).size().sort_values(ascending=True).reset_index(name='quantity')[df.groupby(['variety']).size().sort_values(ascending=True).reset_index(name='quantity').quantity<50].variety.values)","2b89b430":"df.variety = df.variety.apply(lambda x: 'Other' if x in other_varieties else x)","72b43660":"np.size(df.variety.unique())","a55437ea":"plt.figure(num = None, figsize=(21,10))\nsns.boxenplot(y = 'points', x='variety', data = df, palette='pastel', order = df.groupby(['variety']).size().sort_values(ascending=False).reset_index().iloc[0:25,0])\nplt.show()","3572592a":"fig, (ax1,ax2) = plt.subplots(nrows = 2, ncols=1, figsize=(21,12))\nsns.countplot(x = df.winery, color='tab:blue', order = df.groupby(['winery']).size().sort_values(ascending=False).reset_index().iloc[0:10,0], ax=ax1)\nsns.countplot(x = df.winery, color='tab:blue', order = df.groupby(['winery']).size().sort_values(ascending=True).reset_index().iloc[0:10,0], ax=ax2)\nplt.subplots_adjust(hspace=0.25)","1404b917":"np.size(df.winery.unique())","495192ac":"plt.figure(num = None, figsize=(21,10))\nsns.boxenplot(y = 'points', x='winery', data = df, palette='pastel', order = df.groupby(['winery']).size().sort_values(ascending=False).reset_index().iloc[0:25,0])\nplt.show()","19853a1f":"df.groupby(['taster_name','taster_twitter_handle']).size()","23989a2f":"df[df.taster_name.isnull()].taster_twitter_handle.unique()","1f271a27":"df = df.drop('taster_twitter_handle',1)","335d3402":"fig, (ax1,ax2) = plt.subplots(nrows = 2, ncols=1, figsize=(21,12))\nsns.countplot(x = df.taster_name, color='tab:blue', order = df.groupby(['taster_name']).size().sort_values(ascending=False).reset_index().iloc[0:10,0], ax=ax1)\nsns.countplot(x = df.taster_name, color='tab:blue', order = df.groupby(['taster_name']).size().sort_values(ascending=True).reset_index().iloc[0:10,0], ax=ax2)\nplt.subplots_adjust(hspace=0.25)","47c6530b":"plt.figure(num = None, figsize=(21,10))\nsns.boxenplot(y = 'points', x='taster_name', data = df, palette='pastel', order = df.groupby(['taster_name']).size().sort_values(ascending=False).reset_index().iloc[:,0])\nplt.show()","afc56759":"other_tasters = list(df.groupby(['taster_name']).size().sort_values(ascending=True).reset_index(name='quantity')[df.groupby(['taster_name']).size().sort_values(ascending=True).reset_index(name='quantity').quantity<50].taster_name.values)","84dc139a":"df.taster_name = df.taster_name.apply(lambda x: 'Other' if x in other_tasters else x)","ec26c93c":"df.taster_name = df.taster_name.fillna('Unknown')","99a2bc6a":"df_all_geo = pd.concat([df.iloc[:,[2,6,11]],pd.get_dummies(df.iloc[:,[0,3,4,5,7,8,10]])],axis=1)","732e2b76":"correlations = df_all_geo.corr()\n\n#plt.figure(figsize=(16, 12))\n#sns.heatmap(correlations)\n#plt.show()\n\ncouples = {}\ndrop_c = []\nfor i, r in correlations.iterrows():\n    for j, x in r.iteritems():\n        if i != j and np.abs(x) > 0.9 and i not in drop_c and j not in drop_c:\n            couples[(i, j)] = (correlations.loc[i, j])\n            drop_c.append(j)\n\nprint(drop_c)\n\ndf_all_geo = df_all_geo.drop(drop_c,1)\n","56680cb4":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(df_all_geo.drop('points',1),df_all_geo.points,test_size=0.3)","7c3e35a7":"x_train['designation'],x_test['designation'] = calc_smooth_mean(pd.concat([x_train,y_train],axis=1),pd.concat([x_test,y_test],axis=1),'designation','points',9)\nx_train['region_1'],x_test['region_1'] = calc_smooth_mean(pd.concat([x_train,y_train],axis=1),pd.concat([x_test,y_test],axis=1),'region_1','points',9)\nx_train['winery'],x_test['winery'] = calc_smooth_mean(pd.concat([x_train,y_train],axis=1),pd.concat([x_test,y_test],axis=1),'winery','points',9)","79c5f3ed":"x_test['designation'] = x_test['designation'].fillna(x_test['designation'].mean())\nx_test['region_1'] = x_test['region_1'].fillna(x_test['region_1'].mean())\nx_test['winery'] = x_test['winery'].fillna(x_test['winery'].mean())","8d038117":"ENet = make_pipeline(StandardScaler(), ElasticNet(alpha=0.0005, l1_ratio=.99, random_state=0, max_iter=10000))","2b2d3400":"ENet.fit(x_train,y_train)","05991e96":"y_pred = ENet.predict(x_test)","a04fc26d":"np.sqrt(mean_squared_error(y_test, y_pred))","07953a51":"r2_score(y_test, y_pred)","e79267cc":"plt.figure(num = None, figsize=(21,10))\nsns.regplot(x=y_test, y=y_pred, color='tab:blue')\nplt.ylim(80,100)\nplt.show()","4dd9153a":"df_coeff = pd.DataFrame(zip(x_train.columns, ENet[1].coef_),columns=['feature','coeff'])\nplt.figure(num = None, figsize=(21,12))\nsns.barplot(x='coeff', y='feature', data=df_coeff.reindex(df_coeff.coeff.abs().sort_values(ascending=False).index).head(25), color='steelblue')\nplt.show()","00a9ae35":"df.description.iloc[:1].values","a36f5293":"df['len_description'] = df.description.apply(lambda x: len(x.split()))","6adb1b1d":"df.sort_values(by='len_description').head(15)","a97a64cf":"plt.figure(num = None, figsize=(21,10))\nsns.boxenplot(y = 'len_description', x='taster_name', data = df, palette='pastel', order = df.groupby(['taster_name']).size().sort_values(ascending=False).reset_index().iloc[:,0])\nplt.xticks(rotation=30)\nplt.show()","52562753":"plt.figure(num = None, figsize=(21,10))\nsns.regplot(x=df['len_description'], y=df['points'], color='tab:blue')\nplt.show()","60c11f1c":"df.description = df.description.str.lower()\n\ndecoded_descr = []\nfor descriptions in df.description:\n    decoded_descr.append(unidecode.unidecode(descriptions))\n\ndf.description = decoded_descr","475e95cd":"punc = ['.', ',', '\"', \"'\", '?', '!', ':', ';', '(', ')', '[', ']', '{', '}',\"%\", \"_\", '-', 'it', \"it's\", \"isn't\", 'wine', \"you'll\"]\nstop_words = text.ENGLISH_STOP_WORDS.union(punc)\ndesc = df['description'].values\nstemmer = SnowballStemmer('english')\ntokenizer = RegexpTokenizer(r'[a-zA-Z\\']+') #solo stringhe che iniziano con lettere\n\ndef tokenize(text):\n    return [stemmer.stem(word) for word in tokenizer.tokenize(text.lower()) if word not in stop_words]\n\nvectorizer = TfidfVectorizer(tokenizer = tokenize, max_features = 500,ngram_range=(1,2))\n\nX = vectorizer.fit_transform(desc)\nwords = vectorizer.get_feature_names()","17614d4d":"print(words)","852406bf":"df_word = pd.concat([df['points'].reset_index(drop=True), df['len_description'].reset_index(drop=True), pd.DataFrame(X.todense(), columns = words)], axis=1)","c13d8e7f":"correlations = df_word.corr()\n\n#plt.figure(figsize=(16, 12))\n#sns.heatmap(correlations)\n#plt.show()\n\ncouples = {}\ndrop_c = []\nfor i, r in correlations.iterrows():\n    for j, x in r.iteritems():\n        if i != j and np.abs(x) > 0.9 and i not in drop_c and j not in drop_c:\n            couples[(i, j)] = (correlations.loc[i, j])\n            drop_c.append(j)\n\nprint(drop_c)\n\ndf_word = df_word.drop(drop_c,1)\n","a3ad3d70":"x_train, x_test, y_train, y_test = train_test_split(df_word.iloc[:,1:],df_word.iloc[:,0],test_size=0.3)","28eca4f3":"ENet = make_pipeline(StandardScaler(), ElasticNet(alpha=0.0005, l1_ratio=.99, random_state=0, max_iter=10000))","411b9c38":"ENet.fit(x_train,y_train)","09360fdb":"y_pred = ENet.predict(x_test)","cb130911":"np.sqrt(mean_squared_error(y_test, y_pred))","783bcffd":"r2_score(y_test, y_pred)","f7cbea91":"plt.figure(num = None, figsize=(21,10))\nsns.regplot(x=y_test, y=y_pred, color='tab:blue')\nplt.ylim(80,100)\nplt.show()","d7599175":"df_coeff = pd.DataFrame(zip(x_train.columns, ENet[1].coef_),columns=['feature','coeff'])\nplt.figure(num = None, figsize=(21,12))\nsns.barplot(x='coeff', y='feature', data=df_coeff.reindex(df_coeff.coeff.abs().sort_values(ascending=False).index).head(25), color='steelblue')\nplt.show()","ce9b5f4c":"df_test = pd.concat([df.reset_index(drop=True), pd.DataFrame(X.todense(), columns = words)], axis=1)","83689fff":"df_test = df_test.drop('description',1)","24d4323b":"df_dummy = pd.concat([df_test[['designation','winery','region_1']],pd.get_dummies(df_test.drop('designation',1).drop('region_1',1).drop('winery',1).drop('title',1))],axis=1)","5f0646b8":"correlations = df_dummy.corr()\n\n#plt.figure(figsize=(16, 12))\n#sns.heatmap(correlations)\n#plt.show()\n\ncouples = {}\ndrop_c = []\nfor i, r in correlations.iterrows():\n    for j, x in r.iteritems():\n        if i != j and np.abs(x) > 0.9 and i not in drop_c and j not in drop_c:\n            couples[(i, j)] = (correlations.loc[i, j])\n            drop_c.append(j)\n\nprint(drop_c)\n\ndf_dummy = df_dummy.drop(drop_c,1)\n","431da8c0":"x_train, x_test, y_train, y_test = train_test_split(df_dummy.drop('points',1),df_dummy.points,test_size=0.3)","907e44f0":"x_train['designation'],x_test['designation'] = calc_smooth_mean(pd.concat([x_train,y_train],axis=1),pd.concat([x_test,y_test],axis=1),'designation','points',9)\nx_train['region_1'],x_test['region_1'] = calc_smooth_mean(pd.concat([x_train,y_train],axis=1),pd.concat([x_test,y_test],axis=1),'region_1','points',9)\nx_train['winery'],x_test['winery'] = calc_smooth_mean(pd.concat([x_train,y_train],axis=1),pd.concat([x_test,y_test],axis=1),'winery','points',9)\n\nx_test['designation'] = x_test['designation'].fillna(x_test['designation'].mean())\nx_test['region_1'] = x_test['region_1'].fillna(x_test['region_1'].mean())\nx_test['winery'] = x_test['winery'].fillna(x_test['winery'].mean())","4552aff2":"ENet = make_pipeline(StandardScaler(), ElasticNet(alpha=0.0005, l1_ratio=.99, random_state=0, max_iter=10000))","1afa03ee":"ENet.fit(x_train,y_train)","6a97ff7d":"y_pred = ENet.predict(x_test)","bdcf1c98":"np.sqrt(mean_squared_error(y_test, y_pred))","a3ec22fa":"r2_score(y_test, y_pred)","ae862348":"plt.figure(num = None, figsize=(21,10))\nsns.regplot(x=y_test, y=y_pred, color='tab:blue')\nplt.ylim(80,100)\nplt.xlim(80,100)\nplt.show()","9f4d7ed6":"df_coeff = pd.DataFrame(zip(x_train.columns, ENet[1].coef_),columns=['feature','coeff'])\nplt.figure(num = None, figsize=(21,15))\nsns.barplot(x='coeff', y='feature', data=df_coeff.reindex(df_coeff.coeff.abs().sort_values(ascending=False).index).head(50), color='steelblue')\nplt.show()","c8b48ec0":"#### Variety","dd330dd7":"#### Region_1","5b22668f":"# Put it All together","3733352f":"#### Region_2","d2b24a4a":"# Target","67cfa7d6":"## Prediction using Category features and Price","9c61e112":"#### Taster","8af11d62":"#### Winery","67cbb79b":"## Predict Quality from Descriptions","dc5171be":"#### Designation","5367477e":"#### Country","6e2be8fb":"#### Province","4fa91aff":"# Feature EDA","88aac32c":"# Description Analysis","5aff2d93":"#### Price"}}