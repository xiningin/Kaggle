{"cell_type":{"579ea098":"code","b7a99810":"code","838ce33c":"code","e1f1ecbb":"code","7649d39c":"code","8b97b771":"code","b7bad009":"code","2e266319":"code","5f4c8250":"code","12edf107":"code","12f4f331":"code","ac9bdc0c":"code","be2fb64d":"code","94a1b0ff":"code","e8a7efcd":"code","58b392ef":"code","c9c84235":"code","3c1679e0":"code","56c0f342":"code","9830cebb":"code","747a3f4d":"code","20d7e0de":"code","5b96c7ff":"code","ab47724f":"code","f8153870":"code","20571f3d":"code","a07a939c":"markdown","19658798":"markdown","60b77142":"markdown","7a497334":"markdown","ba99343f":"markdown","fd3962c3":"markdown","396538bf":"markdown","dd562c35":"markdown","c0920d3d":"markdown","3432566c":"markdown","d63938b2":"markdown","d542f7c7":"markdown","d8d67b2e":"markdown","2dbf9183":"markdown","d66a1793":"markdown","4dce1b78":"markdown","eec67f9f":"markdown","817226ef":"markdown","2835c94c":"markdown","c8eddc0c":"markdown","c602c570":"markdown","8156ddd3":"markdown"},"source":{"579ea098":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b7a99810":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns","838ce33c":"BTCUSDT_FILE = '\/kaggle\/input\/binance-full-history\/BTC-TUSD.parquet'\n\nCHANGE = 'change (%)'","e1f1ecbb":"# !pip install ray\n# !pip install dask[ray]","7649d39c":"import dask\nimport dask.dataframe as dd\nimport ray\n\nfrom ray.util.dask import ray_dask_get\n\n# ray.init(ignore_reinit_error=True)\n# dask.config.set(scheduler=ray_dask_get)","8b97b771":"df = dd.read_parquet(BTCUSDT_FILE,\n                     dtype={\n                         'open_time': np.datetime64,\n                         'open': np.float32,\n                         'high': np.float32,\n                         'low': np.float32,\n                         'close': np.float32,\n                         'volume': np.float32,\n                         'quote_asset_volume': np.float32,\n                         'number_of_trades': np.uint16,\n                         'taker_buy_base_asset_volume': np.float32,\n                         'taker_buy_quote_asset_volume': np.float32\n})\ndf.describe()","b7bad009":"df.head(n=5)","2e266319":"df = df[df.columns[:5]]\ndf.head()","5f4c8250":"def apply_change(df: dask.dataframe.DataFrame):\n    \"\"\"\n    Returns a new DataFrame with an additional column - % change between close and open for each entry.\n    \"\"\"\n    result = dd.DataFrame.copy(df)\n    result[CHANGE] = (result['close'] - result['open']) \/ result['open'] * 100\n    return result","12edf107":"df_1min = apply_change(df)\ndf_1min.tail(n=5)","12f4f331":"sns.set(rc={'figure.figsize':(11.7,8.27)})\n\ndef display_changes(df: dask.dataframe.DataFrame):\n    plt.xticks(rotation=45) \n    sns.lineplot(data=df, x='open_time', y=CHANGE)\n    \ndisplay_changes(df_1min.tail(n=20))","ac9bdc0c":"# this_year_df = \ndisplay_changes(df_1min.compute().loc['2021-01-01':'2021-02-01', :]) # 1 month","be2fb64d":"display_changes(df_1min.compute().loc['2021-01-01':'2021-01-10', :]) # 10 days\n","94a1b0ff":"display_changes(df_1min.compute().loc['2021-01-01':'2021-01-01', :]) # 1 day","e8a7efcd":"display_changes(df_1min.compute().loc['2021-01-01 04:00:00':'2021-01-01 05:00:00', :]) # 1 hour","58b392ef":"DISPLAY_LAST = 100","c9c84235":"def group_df(df: dd.DataFrame, freq: str = '1min'):\n    \"\"\"\n    Return a DataFrame grouped by the provided frequency. \n    This aims to represent candle stick with larger interval (equal to `freq`).\n    To achieve this a custom aggregation must be applied for each column in a group.\n    For example, `open` should be the first entry in the group and `close` - the last one. \n    `volume` should be the sum of all 1min volumns in this time window (freq).\n    \n    For an explanation of available `freq`s check the Pandas `Grouper` class.\n    \"\"\"\n    return df.groupby(pd.Grouper(freq=freq)).agg({\n        'open': 'first',\n        'high': 'max',\n        'low': 'min',\n        'close': 'last',\n        'volume': 'sum'\n    })\n\ngroup_df(df_1min, '1min').tail()","3c1679e0":"df_1min.tail()","56c0f342":"df_1min = apply_change(group_df(df, freq='1min'))\ndisplay_changes(\n    df_1min.tail(DISPLAY_LAST)\n)\ndf_1min.tail()","9830cebb":"df_5min = apply_change(group_df(df, freq='5min'))\ndisplay_changes(\n    df_5min.tail(DISPLAY_LAST)\n)\ndf_5min.tail()","747a3f4d":"df_30min = apply_change(group_df(df, freq='30min'))\ndisplay_changes(\n    df_30min.tail(DISPLAY_LAST)\n)\ndf_30min.tail()","20d7e0de":"df_1h = apply_change(group_df(df, freq='1h'))\ndisplay_changes(\n    df_1h.tail(DISPLAY_LAST)\n)\ndf_1h.tail()","5b96c7ff":"df_2h = apply_change(group_df(df, freq='2h'))\ndisplay_changes(\n    df_2h.tail(DISPLAY_LAST)\n)\ndf_2h.tail()","ab47724f":"df_6h = apply_change(group_df(df, freq='6h'))\ndisplay_changes(\n    df_6h.tail(DISPLAY_LAST)\n)\ndf_6h.tail()","f8153870":"df_12h = apply_change(group_df(df, freq='12h'))\ndisplay_changes(\n    df_12h.tail(DISPLAY_LAST)\n)\ndf_12h.tail()","20571f3d":"df_24h = apply_change(group_df(df, freq='24h'))\ndisplay_changes(\n    df_24h.tail(DISPLAY_LAST)\n)\ndf_24h.tail()","a07a939c":"## % change (up or down)\n\nThe differnce (in %) between `close` and `open` could be a useful measure. Next, we'll explore how that metric changes for different time intervals - 1 min, 5 min, 30 min, 1h, 24h, etc. Also, it may be useful to \"zoom in\" on a specific timeframe, like the past 3 months.","19658798":"Let's try with a narrower window - 10 days.","60b77142":"## 24h","7a497334":"And 1 hour:","ba99343f":"## Conclusion\nWhat can we say about the BTC-USDT trading pair based on thie visualisation?\n\n* One probable conclusion is that smaller time intervals bring smaller changes in the price of BTC. So if you want to base your algorithms on a larger % change you may need to wait for and observe larger time intervals - 6h+.\n","fd3962c3":"## 5min","396538bf":"## 30 min\n","dd562c35":"## 1h ","c0920d3d":"The two outputs above are a simple test check that the `group_df` function applies proper aggregation to each group.","3432566c":"The graph is so dense that it doesn't make much sense, except maybe to see the range - from -3% to about 3%.\n","d63938b2":"# 1min\n","d542f7c7":"Next: let's try to \"fabricate\" candle sticks with different width (time window): 5 min, 30 min, 1h, etc.","d8d67b2e":"# Groups\nNow, let's create groups that represent larget candle sticks, like 5min, 30min, 1h, etc.\n\nAs seen above, the data is too large to make sense to plot all of it in a single plot, so the last `DISPLAY_LAST` entries for each group would be visualised.","2dbf9183":"# About\n\nThis notebook would explore the change (in %) of the  BTC-USDT pair in each open-close window (\"candle stick\").\nAs the data is saved with 1 minute intervals we'll try to re-create candle sticks with different widths, e.g. time intervals with different length - 5 minutes, 30 minutes, 24 hours, etc.\n\nThis exploration may lead to other ideas and questions but I'd try to limit this notebook to this specific feature of the trading pair.","d66a1793":"## 12h","4dce1b78":"## Remove some columns\nThese columns are not the focus of the current experiments.\n\n**TODO** explore what these columns represent actually.\n\n```\nquote_asset_volume\nnumber_of_trades\ntaker_buy_base_asset_volume\ntaker_buy_quote_asset_volume\n```","eec67f9f":"As we can see the data is too dense and doesn\\'t draw neatly in the graph. Maybe we should try zooming in.\n\nFirst, let's try zooming in to a 1 month window.","817226ef":"As we can see the 1 minute candle sticks are so many that it doesn't make much sense to display all of their change % values. The information is still useful for machine reading but not much for eyeballing.\n","2835c94c":"## 2h\n","c8eddc0c":"Still dense, so let's try with 1 day.","c602c570":"## 6h","8156ddd3":"# Notes\nThis notebook is a simple exploration of the data and there is no guarantee there are no bugs. Always double check the code if you want to rely somehow on it."}}