{"cell_type":{"8e51a402":"code","3e3d8bd1":"code","d492da7b":"code","8695fe12":"code","06779948":"code","75ae81f5":"code","c14f204c":"code","e357c5d7":"code","9a0c1ff3":"code","cc33f5a8":"code","e49c8388":"code","5430baed":"code","5e37ca15":"code","4e556d70":"code","18b6b0f0":"code","e4a8b122":"markdown","aca8fecd":"markdown","b1f87201":"markdown","98e0c0ca":"markdown","3d5d02c5":"markdown","f5577a5e":"markdown","c3efcc2d":"markdown"},"source":{"8e51a402":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3e3d8bd1":"import numpy as np\nimport pandas as pd","d492da7b":"import matplotlib.pyplot as plt\n\nimport matplotlib\nmatplotlib.rcParams['mathtext.fontset'] = 'stix'\nmatplotlib.rcParams['font.family'] = 'sans-serif'\nmatplotlib.rcParams['font.size'] = 12","8695fe12":"# preprocessing libraries\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\n\n# model selection libraries\nfrom sklearn.model_selection import train_test_split\n\n# machine learning libraries\nfrom sklearn.ensemble import RandomForestClassifier\n\n# postprocessing and checking-results libraries\nfrom sklearn.metrics import confusion_matrix, classification_report","06779948":"from imblearn.over_sampling import RandomOverSampler","75ae81f5":"def plotConfusionMatrix(dtrue,dpred,classes,title = 'Confusion Matrix',\\\n                        width = 0.75,cmap = plt.cm.Blues):\n  \n    cm = confusion_matrix(dtrue,dpred)\n    cm = cm.astype('float') \/ cm.sum(axis = 1)[:,np.newaxis]\n\n    fig,ax = plt.subplots(figsize = (np.shape(classes)[0] * width,\\\n                                       np.shape(classes)[0] * width))\n    im = ax.imshow(cm,interpolation = 'nearest',cmap = cmap)\n\n    ax.set(xticks = np.arange(cm.shape[1]),\n           yticks = np.arange(cm.shape[0]),\n           xticklabels = classes,\n           yticklabels = classes,\n           title = title,\n           aspect = 'equal')\n    \n    ax.set_ylabel('True',labelpad = 20)\n    ax.set_xlabel('Predicted',labelpad = 20)\n\n    plt.setp(ax.get_xticklabels(),rotation = 90,ha = 'right',\n             va = 'center',rotation_mode = 'anchor')\n\n    fmt = '.2f'\n\n    thresh = cm.max() \/ 2.0\n\n    for i in range(cm.shape[0]):\n        for j in range(cm.shape[1]):\n            ax.text(j,i,format(cm[i,j],fmt),ha = 'center',va = 'center',\n                    color = 'white' if cm[i,j] > thresh else 'black')\n    plt.tight_layout()\n    plt.show()","c14f204c":"df = pd.read_csv('..\/input\/fetal-health-classification\/fetal_health.csv')\ndf.drop_duplicates(inplace = True)\n\ny = LabelEncoder().fit_transform(df['fetal_health'])\nX = df.drop(columns = ['fetal_health'],axis = 1)","e357c5d7":"count = np.zeros(3)\nfor i in range(3):\n    count[i] = np.where(y == i)[0].size\n    \nplt.subplots(figsize = (6.0,6.0))\nplt.bar(np.arange(3),count,color = 'orange',edgecolor = 'black')\nplt.xticks(np.arange(3),('N','S','P'))\nplt.xlabel('Fetal State')\nplt.ylabel('Number of Instances')\nplt.show()","9a0c1ff3":"scaler = StandardScaler().fit(X)\nXnorm = scaler.transform(X)","cc33f5a8":"Xtrain,Xtest,ytrain,ytest = train_test_split(Xnorm,y,test_size = 0.30,stratify = y,shuffle = True,random_state = 21)","e49c8388":"Xtrain,ytrain = RandomOverSampler(random_state = 21).fit_resample(Xtrain,ytrain)","5430baed":"clf = RandomForestClassifier(random_state = 21).fit(Xtrain,ytrain)","5e37ca15":"ypred = clf.predict(Xtest)","4e556d70":"print(classification_report(ytest,ypred))","18b6b0f0":"plotConfusionMatrix(ytest,ypred,classes = np.array(['N','S','P']),width = 1.5,cmap = plt.cm.binary)","e4a8b122":"Rescaling the input values to unit norm is required for a fast convergence during the learning process &mdash; in this case, `Xnorm` represents the **input** vector `X` in its **normalized** version.","aca8fecd":"In order to solve the problem related to the imbalance of the dataset the function `RandomOverSampler` is used to equalize the number of samples for each of the classes **N**, **S** and **P**.","b1f87201":"A 70% of the **input** vector `Xnorm` is used to train the classifier model.","98e0c0ca":"The model has an accuracy of 94% as can be seen through the `classification_report`.","3d5d02c5":"# Fetal Health Condition Dataset\n\nThis **notebook** explain the use of the [Fetal Health Classification](https:\/\/www.kaggle.com\/andrewmvd\/fetal-health-classification) dataset and a **Random Forest Classifier** to automaticaly detect the **fetal health condition** based on CTG information.\n\n\n# Dataset Information\n\n2126 fetal **cardiotocograms** (CTG) were automatically processed and the respective diagnostic features measured. The CTG were also classified by three expert obstetricians and a **consensus classification label** assigned to each of them. Classification was both with respect to a **morphologic pattern (A, B, C. ...)** and to a **fetal state (N, S, P)**. Therefore the dataset can be used either for 10-class or 3-class experiments.\n\n## Inputs\n\nThe dataset contains a total of 21 inputs below described:\n\n> > 1. FHR baseline (beats per minute);\n2. number of accelerations per second;\n3. number of fetal movements per second;\n4. number of uterine contractions per second;\n5. number of light decelerations per second;\n6. number of severe decelerations per second;\n7. number of prolongued decelerations per second;\n8. percentage of time with abnormal short term variability;\n9. mean value of short term variability;\n10. percentage of time with abnormal long term variability;\n11. mean value of long term variability;\n12. width of FHR histogram;\n13. minimum of FHR histogram;\n14. maximum of FHR histogram;\n15. number of histogram peaks;\n16. number of histogram zeros;\n17. histogram mode;\n18. histogram mean;\n19. histogram median;\n20. histogram variance; and\n21. histogram tendency.\n\n## Target Variable\n\nThis notebook uses the **fetal state** as the **target variable**. As above mentioned, fetal state is classified according to 3 situations (**N** &mdash; Normal, **S** &mdash; Suspect or **P** &mdash; Pathologic).\n\n","f5577a5e":"The dataset is **imbalanced** as can be seen in the bar-chart below depicted.","c3efcc2d":"The variables `X` and `y` are defined as the **input** and the **label** vectors, respectively."}}