{"cell_type":{"551ddf6d":"code","9f5cb08d":"code","bd3c27e3":"code","0d8a6e0d":"code","15d378f9":"code","bc4d3860":"code","9146f6d9":"code","38c31471":"code","a5bf52b4":"markdown"},"source":{"551ddf6d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9f5cb08d":"import torch\nimport torch.nn as nn","bd3c27e3":"class SelfAttention(nn.Module):\n    def __init__(self, embed_size, heads):\n        super(SelfAttention,self).__init__()\n        self.embed_size = embed_size\n        self.heads = heads\n        self.head_dim = embed_size \/\/ heads\n        \n        assert (\n            self.head_dim * heads == embed_size\n        ), \"Embedding size needs to be divisible by heads\"\n        \n        self.values = nn.Linear(self.head_dim,self.head_dim,bias = False)\n        self.keys = nn.Linear(self.head_dim, self.head_dim, bias = False)\n        self.queries = nn.Linear(self.head_dim, self.head_dim, bias=False)\n        self.fc_out = nn.Linear(heads * self.head_dim, embed_size)\n        \n    def forward(self,values,keys,query,mask):\n        N = query.shape[0]\n        value_len,key_len,query_len = values.shape[1],keys.shape[1],query.shape[1]\n        \n        values = values.reshape(N,value_len,self.heads,self.head_dim)\n        keys = keys.reshape(N,key_len,self.heads,self.head_dim)\n        queries = queries.reshape(N,query_len,self.heads,self.head_dim)\n        \n\n        values = self.values(values)  \n        keys = self.keys(keys)  \n        queries = self.queries(query)\n        \n        #Matrix multiplication.\n        energy = torch.einsum(\"nqhd,nkhd->nhqk\", [queries, keys])\n        \n        if mask is not None:\n            energy = energy.masked_fill(mask == 0, float(\"-1e20\"))\n            \n        attention = torch.softmax(energy \/ (self.embed_size ** (1 \/ 2)), dim=3)\n        \n        out = self.fc_out(out)\n        \n        return out\n        ","0d8a6e0d":"class TransformerBlock(nn.Module):\n    def __init__(self, embed_size, heads, dropout, forward_expansion):\n        super(TransformerBlock,self).__init__()\n        self.attention = SelfAttention(embed_size, heads)\n        self.norm1 = nn.LayerNorm(embed_size)\n        self.norm2 = nn.LayerNorm(embed_size)\n        \n        self.feed_forward = nn.Sequential(\n            nn.Linear(embed_size, forward_expansion * embed_size),\n            nn.ReLU(),\n            nn.Linear(forward_expansion * embed_size, embed_size),\n        )\n        \n        self.dropout = nn.Dropout(dropout)\n        \n    def forward(self, value, key, query, mask):\n        attention = self.attention(value, key, query, mask)\n\n        x = self.dropout(self.norm1(attention + query))\n        forward = self.feed_forward(x)\n        out = self.dropout(self.norm2(forward + x))\n        return out","15d378f9":"class Encoder(nn.Module):\n    def __init__(\n        self,\n        src_vocab_size,\n        embed_size,\n        num_layers,\n        heads,\n        device,\n        forward_expansion,\n        dropout,\n        max_length,\n    ):\n\n        super(Encoder, self).__init__()\n        self.embed_size = embed_size\n        self.device = device\n        self.word_embedding = nn.Embedding(src_vocab_size, embed_size)\n        self.position_embedding = nn.Embedding(max_length, embed_size)\n\n        self.layers = nn.ModuleList(\n            [\n                TransformerBlock(\n                    embed_size,\n                    heads,\n                    dropout=dropout,\n                    forward_expansion=forward_expansion,\n                )\n                for _ in range(num_layers)\n            ]\n        )\n\n        self.dropout = nn.Dropout(dropout)","bc4d3860":"class DecoderBlock(nn.Module):\n    def __init__(self, embed_size, heads, forward_expansion, dropout, device ):\n        super(DecoderBlock, self).__init__()\n        self.norm = nn.LayerNorm(embed_size)\n        self.attention = SelfAttention(embed_size, heads)\n        self.transformer_block = TransformerBlock(embed_size, heads, dropout, forward_expansion )\n        \n        self.dropout = nn.Dropout(dropout)\n        \n    def forward(self, x, value, key, src_mask, trg_mask):\n        self.attention = attention(x,x,x,trg_mask)\n        query = self.dropout(self.norm(attention + x))\n        out = self.transformer_block(value, key, query, src_mask)\n        return out","9146f6d9":"class Decoder(nn.Module):\n    def __init__(\n        self,\n        trg_vocab_size,\n        embed_size,\n        num_layers,\n        heads,\n        forward_expansion,\n        dropout,\n        device,\n        max_length,\n    ):\n        super(Decoder, self).__init__()\n        self.device = device\n        self.word_embedding = nn.Embedding(trg_vocab_size, embed_size)\n        self.position_embedding = nn.Embedding(max_length, embed_size)\n\n        self.layers = nn.ModuleList(\n            [\n                DecoderBlock(embed_size, heads, forward_expansion, dropout, device)\n                for _ in range(num_layers)\n            ]\n        )\n        self.fc_out = nn.Linear(embed_size, trg_vocab_size)\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, x, enc_out, src_mask, trg_mask):\n        N, seq_length = x.shape\n        positions = torch.arange(0, seq_length).expand(N, seq_length).to(self.device)\n        x = self.dropout((self.word_embedding(x) + self.position_embedding(positions)))\n\n        for layer in self.layers:\n            x = layer(x, enc_out, enc_out, src_mask, trg_mask)\n\n        out = self.fc_out(x)\n\n        return out\n","38c31471":"class Transformer(nn.Module):\n    def __init__(\n        self,\n        src_vocab_size,\n        trg_vocab_size,\n        src_pad_idx,\n        trg_pad_idx,\n        embed_size=512,\n        num_layers=6,\n        forward_expansion=4,\n        heads=8,\n        dropout=0,\n        device=\"cpu\",\n        max_length=100,\n    ):\n\n        super(Transformer, self).__init__()\n\n        self.encoder = Encoder(\n            src_vocab_size,\n            embed_size,\n            num_layers,\n            heads,\n            device,\n            forward_expansion,\n            dropout,\n            max_length,\n        )\n\n        self.decoder = Decoder(\n            trg_vocab_size,\n            embed_size,\n            num_layers,\n            heads,\n            forward_expansion,\n            dropout,\n            device,\n            max_length,\n        )\n\n        self.src_pad_idx = src_pad_idx\n        self.trg_pad_idx = trg_pad_idx\n        self.device = device\n\n    def make_src_mask(self, src):\n        src_mask = (src != self.src_pad_idx).unsqueeze(1).unsqueeze(2)\n        # (N, 1, 1, src_len)\n        return src_mask.to(self.device)\n\n    def make_trg_mask(self, trg):\n        N, trg_len = trg.shape\n        trg_mask = torch.tril(torch.ones((trg_len, trg_len))).expand(\n            N, 1, trg_len, trg_len\n        )\n\n        return trg_mask.to(self.device)\n\n    def forward(self, src, trg):\n        src_mask = self.make_src_mask(src)\n        trg_mask = self.make_trg_mask(trg)\n        enc_src = self.encoder(src, src_mask)\n        out = self.decoder(trg, enc_src, src_mask, trg_mask)\n        return out\n\n\nif __name__ == \"__main__\":\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    print(device)\n\n    x = torch.tensor([[1, 5, 6, 4, 3, 9, 5, 2, 0], [1, 8, 7, 3, 4, 5, 6, 7, 2]]).to(\n        device\n    )\n    trg = torch.tensor([[1, 7, 4, 3, 5, 9, 2, 0], [1, 5, 6, 2, 4, 7, 6, 2]]).to(device)\n\n    src_pad_idx = 0\n    trg_pad_idx = 0\n    src_vocab_size = 10\n    trg_vocab_size = 10\n    model = Transformer(src_vocab_size, trg_vocab_size, src_pad_idx, trg_pad_idx, device=device).to(\n        device\n    )\n   \n    ","a5bf52b4":"![image.png](attachment:image.png)"}}