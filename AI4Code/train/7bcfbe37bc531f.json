{"cell_type":{"39381f7a":"code","039dd961":"code","ec15f88f":"code","59026ba7":"code","7dbada5f":"code","7c88444e":"code","7520b0f7":"code","9fe25baa":"code","9b397eef":"code","96ab1def":"code","403e50b6":"code","c13bb22e":"code","e8265a5b":"code","744761e8":"code","ed806d6a":"code","433f9bb2":"code","26d32aeb":"code","8a9e3536":"code","c7f71bf3":"code","2d9d19d3":"code","5105c609":"code","f3b8da81":"code","f739cf57":"code","4fe1b885":"code","968f0c4e":"code","7d27832f":"code","b9916999":"code","a29362ad":"markdown","10ea0191":"markdown","df88e1cd":"markdown","89af7165":"markdown","981a3061":"markdown","d371a452":"markdown","407b4764":"markdown","3b1a04b6":"markdown","d33841ea":"markdown"},"source":{"39381f7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","039dd961":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ec15f88f":"df = pd.read_csv('\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/jigsaw-toxic-comment-train.csv')\ndf.info()","59026ba7":"df.head()","7dbada5f":"# dropping id and comment text\ndf_toxic = df.drop(['id', 'comment_text'], axis=1)\n# calculating total count of each category comments\ncounts = []\ncategories = list(df_toxic.columns.values)\nfor i in categories:\n    counts.append((i, df_toxic[i].sum()))\ndf_stats = pd.DataFrame(counts, columns=['category', 'count'])\ndf_stats","7c88444e":"# df_toxic.sum().plot(kind=\"bar\")\n\nsns.set(style=\"whitegrid\")\nsns.barplot(x='category', y='count', data=df_stats, palette=\"summer\")\nplt.title(\"Number Of Comments For Each Tag\")\nplt.show()","7520b0f7":"rowsums = df_toxic.iloc[:,:].sum(axis=1)\nvalcount = rowsums.value_counts()\nvalcount.plot.bar()\nplt.xlabel(\"# of labels tagged to\")\nplt.ylabel(\"# of comments\")\nplt.title(\"Comments that have multiple labels tagged\")\nplt.show()\n\nprint(valcount[0]*100\/sum(valcount),\"% comments have no labels associated to them.\")","9fe25baa":"lens = df.comment_text.str.len()\nsns.distplot(lens)\nplt.title(\"Distribution for Lengths of Comments\")\nplt.show()","9b397eef":"print(\"# Of Vacant Comments : \", df['comment_text'].isnull().sum())","96ab1def":"df['comment_text'][0]","403e50b6":"sns.heatmap(df.corr(), square=True, cmap='nipy_spectral')\nplt.show()","c13bb22e":"df.to_pickle('cleaned_data.pkl')","e8265a5b":"from sklearn.model_selection import train_test_split\nimport seaborn as sns\nimport matplotlib.pyplot","744761e8":"df = pd.read_pickle('cleaned_data.pkl')\ndf.head()","ed806d6a":"labels = ['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']","433f9bb2":"\ntrain, test = train_test_split(df, test_size=0.33, random_state=42, shuffle=True)","26d32aeb":"train.shape, test.shape","8a9e3536":"X_train = train['comment_text']\nX_test = test['comment_text']","c7f71bf3":"accuracies = [[],[],[]]","2d9d19d3":"from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\ncvec = CountVectorizer()\ntvec = TfidfTransformer()\nmodel1 = MultinomialNB()","5105c609":"X_train = tvec.fit_transform(cvec.fit_transform(X_train))\nX_test = tvec.transform(cvec.transform(X_test))","f3b8da81":"X_train.shape, X_test.shape","f739cf57":"\nfor category in labels:\n    model1.fit(X_train, train[category])\n    accuracy = model1.score(X_test, test[category])\n    accuracies[0].append(accuracy)\n    print(\"Accuracy For {0} Class Is {1}%\".format(category,round(accuracy*100,2)))","4fe1b885":"\nfrom sklearn.svm import LinearSVC\nmodel2 = LinearSVC()\nfor category in labels:\n    model2.fit(X_train, train[category])\n    accuracy = model2.score(X_test, test[category])\n    accuracies[1].append(accuracy)\n    print(\"Accuracy For {0} Class Is {1}%\".format(category,round(accuracy*100,2)))","968f0c4e":"from sklearn.linear_model import LogisticRegression\nmodel3 = LogisticRegression(n_jobs=1, solver='liblinear')\nfor category in labels:\n    model3.fit(X_train, train[category])\n    accuracy = model3.score(X_test, test[category])\n    accuracies[2].append(accuracy)\n    print(\"Accuracy For {0} Class Is {1}%\".format(category,round(accuracy*100,2)))","7d27832f":"accuracies = pd.DataFrame(accuracies)\nfig = accuracies.plot.bar(figsize=(16, 5), grid=True)\nplt.xticks(np.arange(3),('Multinomial Naive Bayes','Linear Support Vector Classifier','Logistic Regression'),rotation=0)\nplt.legend(labels)\nplt.show()","b9916999":"for i in range(3):\n    print(\"Model -\",i+1,\"... Aggregate Accuracy -\",np.mean(accuracies.iloc[i,:]))","a29362ad":"Thus, we can see that model0 performs best overall by a very slight margin. It is a multinomial naive bayes classifier.","10ea0191":"Linear Support Vector Classifier","df88e1cd":"Multinomial Naive Bayes","89af7165":"Machine Learning Pipeline","981a3061":"Logistic Regression Classifier","d371a452":"This shows that the number of comments in each category is extremely unbalanced. We can further check whether each comment has been tagged or not?","407b4764":"This indicates that most of the comments are of lengths less than 500, while some are of length 5000 as well.","3b1a04b6":"Exploratory Data Analysis","d33841ea":"This essentially shows that a large amount of the entire dataset is tagged to none of the six labels."}}