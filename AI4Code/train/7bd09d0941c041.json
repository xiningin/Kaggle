{"cell_type":{"cc608c85":"code","61cdec8f":"code","753a8602":"code","9d155173":"code","d98ef522":"code","3f2f87e3":"code","60d3ccd9":"code","163af9c8":"code","34f57af5":"code","0363bce6":"code","9f744749":"code","2d3ede2d":"code","521eb7ca":"code","5774ea98":"code","a51ab565":"code","8195f822":"code","00cefc10":"code","a063bff6":"code","fd1bac08":"code","5d421612":"code","41e4c32f":"code","b0379e62":"code","10b30c34":"code","808b7d2b":"code","809a80ca":"code","b7569bed":"code","dc291a3a":"code","c6689976":"code","f595e115":"code","7a8ce425":"code","c357589c":"code","9fd9b47f":"code","662ab9a4":"code","0190ef9e":"code","4a85baa0":"code","556ae7fd":"code","71fdc016":"markdown","6ef1a354":"markdown","ff2714a5":"markdown","f7aac82c":"markdown","525d1085":"markdown","53654b2e":"markdown","f3b8b303":"markdown"},"source":{"cc608c85":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","61cdec8f":"car = pd.read_csv('\/kaggle\/input\/vehicle-dataset-from-cardekho\/car data.csv')\ncar.head()","753a8602":"# Dataset shape - rows, columns\ncar.shape","9d155173":"# statistical summary of features\n\ncar.describe(include= 'all')","d98ef522":"car.info()","3f2f87e3":"car.isnull().sum()","60d3ccd9":"# From age column we can get how old cat it is\n\ncar['age_car'] = 2020 - car['Year']","163af9c8":"# Now drop year column as we have acquired the needed information from the year column\n\ncar.drop('Year', axis = 1, inplace = True)\n\ncar.head()","34f57af5":"# import libraries for visualization\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","0363bce6":"# Target columns\n\nsns.distplot(car['Selling_Price'])\nplt.show()","9f744749":"sns.pairplot(car)\nplt.show()","2d3ede2d":"sns.heatmap(car.corr(), annot = True)\nplt.show()","521eb7ca":"car.columns","5774ea98":"sns.barplot('Fuel_Type', 'Selling_Price' , data = car)\nplt.show()","a51ab565":"sns.barplot('Seller_Type', 'Selling_Price' , data = car)\nplt.show()","8195f822":"sns.barplot('Transmission', 'Selling_Price' , data = car)\nplt.show()","00cefc10":"sns.lmplot('Selling_Price', 'Present_Price', data = car)\nplt.show()","a063bff6":"sns.lmplot('Selling_Price', 'Kms_Driven', data = car)\nplt.show()","fd1bac08":"sns.barplot('age_car', 'Selling_Price', data = car)\nplt.show()","5d421612":"sns.barplot('Owner','Selling_Price', data = car)\nplt.show()\n","41e4c32f":"car.Fuel_Type.replace(regex={\"Petrol\":\"0\",\"Diesel\":\"1\",\"CNG\":\"2\"},inplace=True)\ncar.Seller_Type.replace(regex={\"Dealer\":\"0\",\"Individual\":\"1\"},inplace=True)\ncar.Transmission.replace(regex={\"Manual\":\"0\",\"Automatic\":\"1\"},inplace=True)\ncar[[\"Fuel_Type\",\"Seller_Type\",\"Transmission\"]]=car[[\"Fuel_Type\",\"Seller_Type\",\"Transmission\"]].astype(int)","b0379e62":"car.drop('Car_Name',axis = 1, inplace = True)","10b30c34":"car.head()","808b7d2b":"car.info()","809a80ca":"from sklearn.model_selection import train_test_split\nX = car.drop('Selling_Price', axis = 1)\ny = car['Selling_Price']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state = 42)","b7569bed":"X_train.shape, X_test.shape","dc291a3a":"y_train.shape, y_test.shape","c6689976":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\n\n\nlr = LinearRegression()\nmodel1 = lr.fit(X_train, y_train)\n\ny_pred1 = model1.predict(X_test)\npred1 = pd.DataFrame(y_pred1)","f595e115":"r2_score(y_test, y_pred1)","7a8ce425":"# plot original vs predicted values\nplt.figure(figsize = (14, 6))\nindex=y_test.reset_index()[\"Selling_Price\"]\nax=index.plot(label=\"original_values\")\nax=pred1[0].plot(label = \"predicted_values\")\nplt.legend(loc='upper right')\nplt.title(\"test VS pred\")\nplt.xlabel(\"indexes\")\nplt.ylabel(\"values\")\nplt.show()","c357589c":"from sklearn.ensemble import RandomForestRegressor\n\nrfr = RandomForestRegressor()\nmodel2 = rfr.fit(X_train, y_train)\n\ny_pred2 = model2.predict(X_test)\npred2 = pd.DataFrame(y_pred2)","9fd9b47f":"r2_score(y_test, y_pred2)","662ab9a4":"# plot original vs predicted values\nplt.figure(figsize = (14, 6))\nindex=y_test.reset_index()[\"Selling_Price\"]\nax=index.plot(label=\"original_values\")\nax=pred2[0].plot(label = \"predicted_values\")\nplt.legend(loc='upper right')\nplt.title(\"test VS pred\")\nplt.xlabel(\"indexes\")\nplt.ylabel(\"values\")\nplt.show()","0190ef9e":"from sklearn.tree import DecisionTreeRegressor\n\ndtr = DecisionTreeRegressor()\nmodel3 = dtr.fit(X_train, y_train)\n\ny_pred3 = model3.predict(X_test)\npred3 = pd.DataFrame(y_pred3)","4a85baa0":"r2_score(y_test, y_pred3)","556ae7fd":"# plot original vs predicted values\nplt.figure(figsize = (14, 6))\nindex=y_test.reset_index()[\"Selling_Price\"]\nax=index.plot(label=\"original_values\")\nax=pred3[0].plot(label = \"predicted_values\")\nplt.legend(loc='upper right')\nplt.title(\"test VS pred\")\nplt.xlabel(\"indexes\")\nplt.ylabel(\"values\")\nplt.show()","71fdc016":"### ***we will now visualize features wirth target***","6ef1a354":"### From this we can observe that the selling_price and present_price are correlated with each other.\n### car_age and kms_driven are correlated with each other.","ff2714a5":"### ***From this we can observe that Selling_price increase as Present_Price increase***","f7aac82c":"## Visualization of Data","525d1085":"### *Lesser the kms_driven more the selling_price*","53654b2e":"### Split the data using train test split","f3b8b303":"***From the above models and graph we can observe that the random forest regressor gives better predictions when compared with linear and decision tree regressors***"}}