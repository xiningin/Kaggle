{"cell_type":{"7144725a":"code","594b57b7":"code","3e7ef0d3":"code","ef81b4f7":"code","803bd37a":"code","d1d7d93c":"code","c4fdb89c":"code","6281e4b3":"code","e08ae569":"code","93ff366a":"code","57eba8ab":"code","3eb16a55":"markdown","004d6ba8":"markdown"},"source":{"7144725a":"import numpy as np\nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# =================================\npd.set_option('display.max_columns', 500)\n\nimport pandas_profiling\nfrom sklearn.preprocessing import LabelEncoder\nimport xgboost as xgb\n\n## thanks to Thien for this code which was taken from https:\/\/www.kaggle.com\/suoires1\/fraud-detection-eda-and-modeling\n\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","594b57b7":"%%time\ndata_dir = \"\/kaggle\/input\/ieee-fraud-detection\/\"\nfiles = [\"train_identity.csv\", \"train_transaction.csv\", \"test_identity.csv\", \"test_transaction.csv\"]\ndf_train_ident, df_train_trans, df_test_ident, df_test_trans = [\n    pd.read_csv(os.path.join(data_dir, f), index_col='TransactionID') for f in files]","3e7ef0d3":"%%time\n# join transactions with identities and validate no transaction is lost\ndf_train = df_train_trans.join(df_train_ident, how=\"left\")\nassert df_train_trans.shape[0] == df_train.shape[0]\n\ndf_test = df_test_trans.join(df_test_ident, how=\"left\")\nassert df_test_trans.shape[0] == df_test.shape[0]","ef81b4f7":"%%time\n# optimising memory\ndf_train=reduce_mem_usage(df_train)\ndf_test=reduce_mem_usage(df_test)\n","803bd37a":"# export it\ndf_train.to_pickle(\"\/kaggle\/input\/train.pkl\")\ndf_test.to_pickle(\"\/kaggle\/input\/test.pkl\")","d1d7d93c":"print(os.listdir(\"\/kaggle\/input\"))","c4fdb89c":"df_train_ = pd.read_pickle(\"\/kaggle\/input\/train.pkl\")\ndf_test_ = pd.read_pickle(\"\/kaggle\/input\/test.pkl\")","6281e4b3":"del(df_test_)\ndel(df_train_)","e08ae569":"df_train_.shape","93ff366a":"categorical_cols = X_train.select_dtypes('category').columns\nfor col in categorical_cols:\n    X_train[col] = X_train[col].cat.add_categories('not_known')#.fillna(\"None\")\n    X_test[col] = X_test[col].cat.add_categories('not_known')#.fillna(\"None\")","57eba8ab":"for col in df_train.select_dtypes('object').columns:\n    no_new_cats = len(set(df_test[col].unique())-set(df_train[col].unique()))\n    if no_new_cats > 0:\n        print(f\"Column {col} has {no_new_cats} new categories in test set\")\n","3eb16a55":"## Data prep","004d6ba8":"# Data Validations\n- do all categories in train exist in test?"}}