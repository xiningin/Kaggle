{"cell_type":{"93225625":"code","b88dde38":"code","b37b56d9":"code","57d0c6d6":"code","9fa64721":"code","d0aa745b":"code","0ce89cf4":"code","50c0c7f7":"code","75e1091d":"code","6230b0be":"code","f000b88f":"code","b776b36b":"code","32ab35de":"code","05296fdb":"code","a82d46e0":"code","a38f3e14":"code","818d5392":"code","069a4465":"markdown"},"source":{"93225625":"import tensorflow as tf\nfrom tensorflow.keras import datasets,layers,models\nimport matplotlib.pyplot as plt\nimport numpy as np","b88dde38":"(x_train,y_train),(x_test,y_test) = datasets.cifar10.load_data()  # loading the cifar10 dataset\n","b37b56d9":"print(x_train.shape)   # checking shapes of the training set and test set.\nprint(y_train.shape)\nprint(x_test.shape)\ny_test.shape","57d0c6d6":"classes = [\"airplane\", \"automobile\" , \"bird\", \"cat\", \"deer\", \"dog\" , \"frog\", \"horse\", \"ship\", \"truck\"]","9fa64721":"y_train= y_train.reshape(-1,) # reshaping y_train","d0aa745b":"def sample(x,y,index):\n    plt.figure(figsize =(15,2))\n    plt.imshow(x[index])\n    plt.xlabel(classes[y[index]])\n    ","0ce89cf4":"sample(x_train, y_train , 1)","50c0c7f7":"x_train = x_train  \/ 255     # normalising the data\nx_test = x_test \/ 255","75e1091d":"# building a simple ANN \n\nmodel = models.Sequential([\n          \n    layers.Flatten(input_shape = (32,32,3)),\n    layers.Dense(3000, activation=\"relu\"),\n    layers.Dense(1000, activation = \"relu\"),\n    layers.Dense(10, activation = \"softmax\")\n])\n\nmodel.compile(optimizer='SGD',\n             loss='sparse_categorical_crossentropy',\n             metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs = 5)","6230b0be":"model.fit(x_train, y_train, epochs = 15)","f000b88f":"# evaluating the model on test set\n\nmodel.evaluate(x_test, y_test)","b776b36b":"# building CNN model\n\n# convolution and maxpool layers\n\ncnn_model = models.Sequential([\n    \n    layers.Conv2D(filters= 32, kernel_size= (3,3), activation = 'relu', input_shape=(32,32,3)),\n    layers.MaxPooling2D((2,2)),\n    \n    layers.Conv2D(filters= 64, kernel_size= (3,3), activation = 'relu', input_shape=(32,32,3)),\n    layers.MaxPooling2D((2,2)),\n    \n    # fully connected layers\n    \n    layers.Flatten(),\n    layers.Dense(128, activation = 'relu'),\n    layers.Dense(10 , activation = 'softmax')\n    \n    \n])\n\ncnn_model.compile(optimizer='adam',\n             loss='sparse_categorical_crossentropy',\n             metrics=['accuracy'])","32ab35de":"cnn_model.fit(x_train, y_train , epochs = 10)","05296fdb":"cnn_model.evaluate(x_test, y_test)          # evaluating the cnn model performance on test data","a82d46e0":"y_test = y_test.reshape(-1,)\n","a38f3e14":"y_pred = cnn_model.predict(x_test)  # predicting the labels for our test data using predict function.\ny_pred[:10]","818d5392":"y_classes = [np.argmax(element) for element in y_pred]\nprint(y_classes[:5])\ny_test[:5]","069a4465":"# Image classification using CNN with CIFAR10 dataset"}}