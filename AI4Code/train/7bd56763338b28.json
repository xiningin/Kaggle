{"cell_type":{"2feb60c6":"code","953f9e0f":"code","3f2f0dde":"code","9d93e954":"code","27f55b46":"code","c4486094":"code","57c7c58a":"code","9aba5708":"code","9f79105e":"code","5ff26eae":"code","806f88af":"code","cd7636bf":"code","e49d133c":"code","dbe2475b":"code","9a79c5b9":"code","a636c97e":"code","cccb722f":"code","ca17fd8b":"code","06247de1":"code","3d72e916":"code","cbeff6d1":"code","bc436494":"code","4ae5ca53":"code","43a1663d":"markdown","a9df2503":"markdown","bd24c28d":"markdown","bb4523db":"markdown","bb966a76":"markdown"},"source":{"2feb60c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","953f9e0f":"import pandas as pd\nimport numpy as np \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom datetime import datetime\nfrom sklearn import preprocessing\nfrom xgboost import XGBRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor ","3f2f0dde":"path = '\/kaggle\/input\/covid19-global-forecasting-week-3\/'\ntrain = pd.read_csv(path+'train.csv')\ntest = pd.read_csv(path+'test.csv')","9d93e954":"#Displaying the first 5 rows of the dataset\ntrain.head()","27f55b46":"#Displaying first 5 rows of the dataset\ntest.head()","c4486094":"#Checking the null values in train-data\ntrain.isnull().sum()","57c7c58a":"#Checking the Null values in test-data\ntest.isnull().sum()","9aba5708":"#importing some extra libraries\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.dates as mdates\n#from fbprophet import Prophet","9f79105e":"#Checking the affected cases\ncase = train.groupby('Country_Region')['ConfirmedCases'].max().sort_values(ascending=False).to_frame()\ncase.style.background_gradient(cmap='GnBu')","5ff26eae":"#Taking the top 10 countries\ncase=case.reset_index().head(10)","806f88af":"#Plotting a bar chart for top 10 countries\nplt.figure(figsize =(10,10))\nsns.set_color_codes(\"muted\")\nchart=sns.barplot(x='Country_Region',y='ConfirmedCases',data=case,label=\"Total Number of Cases\")\nfor item in chart.get_xticklabels():\n    item.set_rotation(90)","cd7636bf":"#making scatterplot using plotly\nfig = go.Figure(data=go.Scatter(x=case['Country_Region'], y=case['ConfirmedCases'],\nmode='lines+markers',hovertemplate = \"Cases: %{y}<br> %{x}<extra><\/extra>\",showlegend = False))\nfig.show()","e49d133c":"#Basic Descreptive Statistics\ntrain.loc[:, ['ConfirmedCases', 'Fatalities']].describe()","dbe2475b":"#Converting datetime to integer\ntrain[\"Date\"] = train[\"Date\"].apply(lambda x: x.replace(\"-\",\"\"))\ntrain[\"Date\"]  = train[\"Date\"].astype(int)\ntest[\"Date\"] = test[\"Date\"].apply(lambda x: x.replace(\"-\",\"\"))\ntest[\"Date\"]  = test[\"Date\"].astype(int)","9a79c5b9":"#Makinga a function for Null Values\nEMPTY_VAL = \"EMPTY_VAL\"\ndef fillState(state, country):\n    if state == EMPTY_VAL: return country\n    return state","a636c97e":"train['Province_State'].fillna(EMPTY_VAL, inplace=True)\ntrain['Province_State'] = train.loc[:, ['Province_State', 'Country_Region']].apply(lambda x : fillState(x['Province_State'], x['Country_Region']), axis=1)\ntest['Province_State'].fillna(EMPTY_VAL, inplace=True)\ntest['Province_State'] = test.loc[:, ['Province_State', 'Country_Region']].apply(lambda x : fillState(x['Province_State'], x['Country_Region']), axis=1)","cccb722f":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\ntrain['Country_Region'] = le.fit_transform(train['Country_Region'])\n\ntrain['Province_State'] = le.fit_transform(train['Province_State'])\n\ntest['Country_Region'] = le.fit_transform(test['Country_Region'])\n\ntest['Province_State'] = le.fit_transform(test['Province_State'])","ca17fd8b":"#taking unique countries only\ncountries = train['Country_Region'].unique()","06247de1":"def build_model_1():\n    model = RandomForestRegressor(n_estimators = 100, random_state = 0) \n    return model\n\ndef build_model_2():\n    model = XGBRegressor(n_estimators=1000)\n    return model\n\ndef build_model_3():\n    model = DecisionTreeRegressor(random_state=1)\n    return model\n\ndef build_model_4():\n    model = LogisticRegression()\n    return model\n\ndef build_model_5():\n    model = LinearRegression()\n    return model\n\ndef build_model_6():\n    model = LGBMRegressor(random_state=5)\n    return model\n\ndef build_model_7():\n    model = LGBMRegressor(iterations=2)\n    return model","3d72e916":"out = pd.DataFrame({'ForecastId': [], 'ConfirmedCases': [], 'Fatalities': []})","cbeff6d1":"for country in range(len(countries)):\n    country_train = train.loc[train['Country_Region'] == countries[country]]\n    country_test = test.loc[test['Country_Region'] == countries[country]]\n    print(\"Current Country: \", countries[country])\n    \n#     print(current_country_df_train.head(2))\n#     print(current_country_df_test.head(2))\n    \n    # Create X and Y\n    xtrain = country_train[['Country_Region', 'Province_State', 'Date']].to_numpy()\n    y1train = country_train[['ConfirmedCases']].to_numpy()\n    y2train = country_train[['Fatalities']].to_numpy()\n    xtest = country_test[['Country_Region', 'Province_State', 'Date']].to_numpy()\n    \n    y1train = y1train.reshape(-1)\n    y2train = y2train.reshape(-1)\n#   print(X_train.shape, Y1_train.shape, Y2_train.shape)\n#   print(X_train.shape, Y1_train.reshape(-1), Y2_train.shape)\n    \n    \n    model1 = build_model_2()\n    model1.fit(xtrain, y1train)\n    res_cnf_cls = model1.predict(xtest)\n    \n    \n    model2 = build_model_2()\n    model2.fit(xtrain, y2train)\n    res_fac = model2.predict(xtest)\n    \n    country_test_Id = country_test.loc[:, 'ForecastId']\n    country_test_Id = country_test_Id.astype(int)\n    \n    ans = pd.DataFrame({'ForecastId': country_test_Id, 'ConfirmedCases': res_cnf_cls, 'Fatalities': res_fac})\n    out = pd.concat([out, ans], axis=0)\n   \n    \n#     if country == 1:\n#         break","bc436494":"out[\"ForecastId\"] = out[\"ForecastId\"].astype(int)","4ae5ca53":"out.to_csv('submission.csv', index=False)","43a1663d":"# Making a training and prediction model","a9df2503":"# Importing the required libraries","bd24c28d":"# Data pre-processing","bb4523db":"# Making a model\n","bb966a76":"# Output Data Frame"}}