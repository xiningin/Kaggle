{"cell_type":{"54da838e":"code","615d9864":"code","5ca4e935":"code","5d359c0b":"code","b07129f7":"code","31cebf0d":"code","96714365":"code","82a7fb5e":"code","6d32b821":"code","b3446241":"code","10cc7a38":"code","036d806e":"code","ba0762f6":"code","cd8830c6":"code","56b6ca29":"code","6ebcf5ec":"code","724239da":"code","98304cd5":"code","92918151":"code","4a7c9e72":"code","4e7c3d2e":"code","51f0979b":"code","0dd2aaa8":"code","0ee0b539":"code","47529d61":"code","6fcc80d3":"code","5b7c8baf":"markdown","577d742a":"markdown","3252df43":"markdown","bee4509c":"markdown","b90fc29e":"markdown","b90aaf7b":"markdown","d0eb82c6":"markdown","6db97b54":"markdown","1f06cac2":"markdown","c2568e5c":"markdown","4de606f3":"markdown","b8fd5bf7":"markdown","c01b79fa":"markdown","5993036e":"markdown"},"source":{"54da838e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","615d9864":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler,LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,confusion_matrix\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense","5ca4e935":"BC_df = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')\nprint(\"The shape of our dataset :\"+str(BC_df.shape))\nBC_df.head()","5d359c0b":"#print all the columns of the dataset\nprint(BC_df.columns)","b07129f7":"# drop the unnecessary columns as:id\nBC_df.drop(columns={'id'},inplace = True)\n","31cebf0d":"BC_df.describe()","96714365":"BC_df.info()","82a7fb5e":"BC_df.isnull().sum()","6d32b821":"# visualizing the missing values using missingo\nimport missingno as msno\nmsno.matrix(BC_df)\nplt.show()","b3446241":"# drop the Unnamed: 32 column\nBC_df.dropna(axis=1,inplace=True)","10cc7a38":"# print the shape of the dataset after dropping the Unnamed: 32 column\nBC_df.shape","036d806e":"diagnosis_set = set(BC_df['diagnosis'])\nprint(diagnosis_set)","ba0762f6":"# Checking for imbalance \nBC_count = BC_df['diagnosis'].value_counts()\nprint(BC_count)\nplt.figure(figsize=(10,5))\ng = sns.countplot(BC_df['diagnosis'])\ng.set_xticklabels(['Benign','Malignant'])\nplt.show()","cd8830c6":"X = BC_df.drop(columns={'diagnosis'})\nX","56b6ca29":"y = BC_df['diagnosis']\ny","6ebcf5ec":"#using SMOTE from imblearn\nimport imblearn\nfrom imblearn.over_sampling import SMOTE\nsmote = SMOTE(random_state=0)\nX_res, y_res = smote.fit_resample(X,y)\nprint('Resampled dataset shape %s' % y_res.value_counts())\n\n","724239da":"print(y_res)","98304cd5":"enoder = LabelEncoder().fit(y_res)\ny_res = enoder.transform(y_res)\n# BC_df.head()\ny_res\n#Note that the value for M -> 1 | B -> 0","92918151":"x_train,x_test,y_train,y_test = train_test_split(X_res,y_res,\n                                test_size=0.2,random_state=0)\nprint('Shape of the training set:'+\" \"+str(x_train.shape))\nprint('Size of the training set:'+\" \"+str(x_train.shape[0]))\n\nprint('Shape of the testing set:'+\" \"+str(x_test.shape))\nprint('Size of the testing set:'+\" \"+str(x_test.shape[0]))","4a7c9e72":"scaler = StandardScaler().fit(x_train)\ntrain_scaled = scaler.transform(x_train)\ntest_scaled = scaler.transform(x_test)\n","4e7c3d2e":"model = Sequential([\n    Dense(32 ,activation='relu',input_shape=(30,)),\n    Dense(32 ,activation='relu'),\n    Dense(1,activation='sigmoid')\n])\nmodel.summary()","51f0979b":"model.compile(optimizer='sgd',\n             loss='binary_crossentropy',\n             metrics=['accuracy'])\nmodel.fit(train_scaled , y_train \n         ,epochs=100,batch_size=32 )\nmodel.save('model_breast_cancer.h5')","0dd2aaa8":"pretrained_model = keras.models.load_model('.\/model_breast_cancer.h5')\neval_score = pretrained_model.evaluate(test_scaled,y_test)\nprint('The loss of the evaluation :'+' '+str(eval_score[0]))\nprint('The accuracy of the evaluation :'+' '+str(eval_score[1]))\n","0ee0b539":"y_pred = pretrained_model.predict_classes(test_scaled)\ny_pred","47529d61":"target_list=['benign','malignant']\nclassification_report(y_true=y_test,y_pred=y_pred\n                      ,output_dict = True,target_names=target_list)","6fcc80d3":"CV = confusion_matrix(y_true=y_test,y_pred=y_pred)\nsns.heatmap(CV,annot=True )\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.show()","5b7c8baf":"## Define the features(x) and class_label(y)","577d742a":"## Preprocessing our tarining set","3252df43":"## Dealing imbalance dataset \n* Benign ->357\n* malignant ->212","bee4509c":"## Importing libraries ","b90fc29e":"## Check for the missing values and deal with them","b90aaf7b":"## Get the data ready for training it via the model","d0eb82c6":"## Evaluation the performance of our model","6db97b54":"## Get a statistical insight about our dataset","1f06cac2":"## Predict the testset","c2568e5c":"## Build the model ","4de606f3":"> ###### Our data has diagnosis as [label class] where ; \n* B -> Benign  \n* M -> malignant","b8fd5bf7":"## Exploratory Data analysis","c01b79fa":"## Spliiting the dataset to training set(80%)and testing set(20%)","5993036e":"#### **Note:**The column of the Unnamed: 32 has null values ; meanwhile the others don't have any null value , so we will drop the whole column(Unnamed: 32)"}}