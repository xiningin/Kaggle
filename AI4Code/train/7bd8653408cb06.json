{"cell_type":{"2953fea6":"code","41fde87b":"code","be766046":"code","60bfc0c0":"code","74551ce1":"code","7f55cb71":"code","e895b02f":"code","2dde3d1c":"code","e3ef0420":"code","4ab6d114":"code","1dc8ea8e":"code","ce8eefdc":"code","18fbb245":"code","994807d6":"code","6b15293d":"code","13363143":"code","344c2410":"code","744fc842":"code","00cdb115":"code","6a7c1e16":"code","12e166bd":"code","0066d024":"code","595a00c1":"code","7c0cd1a6":"markdown","9406c9f8":"markdown","b107bd18":"markdown","1c2168fa":"markdown","ed088702":"markdown","f97ed7e8":"markdown","159dd834":"markdown"},"source":{"2953fea6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","41fde87b":"from spacy.lang.en.stop_words import STOP_WORDS\ndf = pd.read_csv('..\/input\/quora-insincere-questions-classification\/train.csv')\ndf[\"question_text\"] = df['question_text'].str.replace('[^\\w\\s]','')\ndf[\"question_text\"] = df['question_text'].str.replace('\\d+', '')\ndf[\"question_text\"] = df['question_text'].str.lower()\ndf['question_text'] = df['question_text'].apply(lambda x: ' '.join([item for item in x.split() if item not in STOP_WORDS]))\n\n\ndf_test = pd.read_csv(\"..\/input\/quora-insincere-questions-classification\/test.csv\")\ndf_test['question_text']=df_test['question_text'].str.replace('[^\\w\\s]','')\ndf_test[\"question_text\"] = df_test['question_text'].str.replace('\\d+', '')\ndf_test[\"question_text\"] = df_test['question_text'].str.lower()\ndf_test['question_text'] = df_test['question_text'].apply(lambda x: ' '.join([item for item in x.split() if item not in STOP_WORDS]))\n","be766046":"df.head()","60bfc0c0":"df_majority = df[df.target==0]\ndf_minority = df[df.target==1]\n\n# # Downsample majority class\n# df_majority_downsampled = resample(df_majority, \n#                                  replace=False,    # sample without replacement\n#                                  n_samples=80810,     # to match minority class\n#                                  random_state=173) # reproducible results\n# df_majority_downsampled.info()\n# df = pd.concat([df_majority_downsampled,df_minority])\n\n# Downsample majority class\ndf_majority_updampled = resample(df_minority, \n                                 replace=True,    # sample without replacement\n                                 n_samples=1225312,     # to match minority class\n                                 random_state=173) # reproducible results\ndf = pd.concat([df_majority_updampled,df_majority])","74551ce1":"df.info()","7f55cb71":"df.isnull().sum()","e895b02f":"len(df)","2dde3d1c":"df['target'].value_counts()","e3ef0420":"from gensim.parsing.preprocessing import remove_stopwords\n\ndf[\"question_text\"] = df[\"question_text\"].str.lower()\ndf_test['question_text'] = df_test['question_text'].str.lower()\n\ndf['question_text'] = df['question_text'].apply(remove_stopwords)\ndf_test['question_text'] = df_test['question_text'].apply(remove_stopwords)\n\ndf.head()","4ab6d114":"from gensim.utils import simple_preprocess\n\n# Tokenize the text column to get the new column 'tokenized_text'\ndf['tokenized_text'] = [simple_preprocess(line, deacc=True) for line in df['question_text']] \ndf_test['tokenized_text'] = [simple_preprocess(line, deacc=True) for line in df_test['question_text']] \n\nprint(df['tokenized_text'].head(10))","1dc8ea8e":"from gensim.parsing.porter import PorterStemmer\nporter_stemmer = PorterStemmer()\n# Get the stemmed_tokens\n# df['stemmed_tokens'] = [porter_stemmer.stem(word) for word in df['question_text']]\n# df['stemmed_tokens'].head(10)\n\ndf['stemmed_tokens'] = [[porter_stemmer.stem(word) for word in tokens] for tokens in df['tokenized_text'] ]\ndf_test['stemmed_tokens'] = [[porter_stemmer.stem(word) for word in tokens] for tokens in df_test['tokenized_text'] ]\n\ndf['stemmed_tokens'].head(10)","ce8eefdc":"from sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nX = df['stemmed_tokens']\nX_TEST = df_test['stemmed_tokens']\ny = df['target']\n\nX_TFIDF = X.apply(lambda x : \" \".join(x))\nX_TEST_TFIDF = X_TEST.apply(lambda x : \" \".join(x))\n\nvectorizer = TfidfVectorizer()\nX_train_tfidf = vectorizer.fit_transform(X_TFIDF)\nX_test_tfidf = vectorizer.transform(X_TEST_TFIDF)\n\n\nX_train, X_test, y_train, y_test = train_test_split(X_train_tfidf,y, test_size=0.33,random_state=42)\nprint(X_train_tfidf.shape)\nprint(X_test_tfidf.shape)","18fbb245":"from sklearn.svm import LinearSVC","994807d6":"clf = LinearSVC()","6b15293d":"clf.fit(X_train,y_train)","13363143":"predictions = clf.predict(X_test)\npredictions","344c2410":"from sklearn.metrics import confusion_matrix, classification_report","744fc842":"print(confusion_matrix(y_test,predictions))","00cdb115":"print(classification_report(y_test,predictions))","6a7c1e16":"from sklearn import metrics\nmetrics.accuracy_score(y_test,predictions)","12e166bd":"test_prediction = clf.predict(X_test_tfidf)\ntest_prediction","0066d024":"df_result = pd.DataFrame({'qid':df_test['qid'].to_numpy(), 'prediction':test_prediction})\ndf_result","595a00c1":"df_result.to_csv('submission.csv', index=False)","7c0cd1a6":"## Tried upsampling and downsampling. Both provided same result.","9406c9f8":"## Tokenization","b107bd18":"## Performing Stopwords removal and other operations on the data available.","1c2168fa":"## Stemming the data","ed088702":"## TF-IDF Vectorizer","f97ed7e8":"## Implementing LinearSVC","159dd834":"## Used gensim to do stopwords removal again. \nThis is done because of the fact that the number of stopwords are less in nltk."}}