{"cell_type":{"2d8c9be6":"code","cb33d7ec":"code","a6f29899":"code","c14355de":"code","668225d9":"code","0fc3895d":"code","f0ca78d7":"code","f1605d76":"code","be924c58":"code","f9682f01":"code","0e2efbeb":"code","f49208ce":"code","bf830712":"code","ceddc802":"code","1a6dba24":"code","4083045f":"code","9cdb53de":"code","330bb3f1":"code","c24cd4cd":"code","6ed93499":"markdown","574a3cc1":"markdown","187cd9f7":"markdown","03d98251":"markdown","b945fb87":"markdown","71cd8d2a":"markdown","72d56bbe":"markdown","ee632e2d":"markdown","e1ae32ba":"markdown","66125604":"markdown","cc18651e":"markdown","32602423":"markdown","5561fc35":"markdown","54070aff":"markdown","53bf5821":"markdown","6cf6d85e":"markdown","748ae481":"markdown","6041310b":"markdown","2271a730":"markdown","06dde8da":"markdown","ec883575":"markdown","95592945":"markdown"},"source":{"2d8c9be6":"!pip install MLB-StatsAPI","cb33d7ec":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport random\nimport statsapi\n\nimport pymc3 as pm\nimport arviz as az\nimport graphviz\n\nimport warnings\nwarnings.filterwarnings('ignore')","a6f29899":"print(statsapi.team_leaders(141,'ops',limit=6,season=2021))","c14355de":"schedule = statsapi.schedule(team=141,start_date='04\/01\/2021',end_date='06\/29\/2021')\n\ngame_ids = []\n\nfor i in range(len(schedule)):\n    game_ids.append(schedule[i]['game_id'])","668225d9":"box_stats = []\n\nfor i in game_ids:\n    box_stats.append(statsapi.boxscore_data(i, timecode=None))","0fc3895d":"home = [i['home']['players'] for i in box_stats if i['teamInfo']['home']['id'] == 141]\naway = [i['away']['players'] for i in box_stats if i['teamInfo']['away']['id'] == 141]","f0ca78d7":"ids = {\n    666182: 'Bichette',\n    665489: 'Vlad',\n    606192: 'Teoscar',\n    543760: 'Semien',\n    543807: 'Springer',\n    624415: 'Biggio',\n    545341: 'Grichuk'\n}\n\nall_games = home + away\n\nall_games_stats = {}\n\nfor i,j in ids.items():\n    all_games_stats[j] = []\n\nfor i,j in ids.items():\n    for k in range(len(all_games)):\n        try:\n            all_games_stats[j].append(all_games[k]['ID' + str(i)]['stats'])\n        except:\n            pass","f1605d76":"player_stats = {}\n\nfor i,j in ids.items():\n    player_stats[j] = [[], [], [], [], [], [], [], []]\n    \nfor i,j in all_games_stats.items():\n    for k in range(len(j)):\n        try:\n            player_stats[i][0].append(j[k]['batting']['runs'])\n            player_stats[i][1].append(j[k]['batting']['hits'])\n            player_stats[i][2].append(j[k]['batting']['homeRuns'])\n            player_stats[i][3].append(j[k]['batting']['baseOnBalls'])\n            player_stats[i][4].append(j[k]['batting']['doubles'])\n            player_stats[i][5].append(j[k]['batting']['atBats'])\n            player_stats[i][5].append(j[k]['batting']['triples'])\n            player_stats[i][5].append(j[k]['batting']['rbi'])\n        except:\n            pass","be924c58":"def get_df(i):\n    df = pd.concat({k: pd.Series(v[i])  for k, v in player_stats.items()})\n    df = df.reset_index()\n    df.columns = ['Name', 'Game_Number', 'Statistic']\n    return df\n\ndf_runs = get_df(0)\ndf_hits = get_df(1)\ndf_hr = get_df(2)\ndf_bb = get_df(3)\ndf_db = get_df(4)\ndf_ab = get_df(5)\ndf_tp = get_df(6)\ndf_rbi = get_df(7)","f9682f01":"df_pivot = df_runs.pivot(index='Game_Number', columns='Name', values='Statistic')\nfig, axarr = plt.subplots(2,3, figsize=(16,12))\n\naxarr[0,0].scatter(df_pivot.index,np.cumsum(df_pivot.loc[:,'Bichette']))\naxarr[0,0].set_title('Bichette Culmative Runs')\n\naxarr[0,1].scatter(df_pivot.index,np.cumsum(df_pivot.loc[:,'Vlad']))\naxarr[0,1].set_title('Vlad Culmative Runs')\n\naxarr[1,0].scatter(df_pivot.index,np.cumsum(df_pivot.loc[:,'Semien']))\naxarr[1,0].set_title('Semien Culmative Runs')\n\naxarr[1,1].scatter(df_pivot.index,np.cumsum(df_pivot.loc[:,'Teoscar']))\naxarr[1,1].set_title('Teoscar Culmative Runs')\n\naxarr[1,2].scatter(df_pivot.index,np.cumsum(df_pivot.loc[:,'Grichuk']))\naxarr[1,2].set_title('Grichuk Culmative Runs')\n\naxarr[0,2].scatter(df_pivot.index,np.cumsum(df_pivot.loc[:,'Biggio']))\naxarr[0,2].set_title('Biggio Culmative Runs');","0e2efbeb":"def get_bayes_projection(player, df):\n\n    basic_model = pm.Model()\n    alpha = 0\n    X1 = df[df.Name == player]['Game_Number']\n    Y = np.cumsum(df[df.Name == player]['Statistic'])\n    beta = np.mean(df[df.Name == player]['Statistic'])\n\n    with basic_model:\n        alpha = pm.Normal('alpha', mu=0, sd=1)\n        beta = pm.Normal('beta', mu=1.5, sd=1, shape=1)\n        sigma = pm.HalfNormal('sigma', sd=1)\n        mu = alpha + beta[0]*X1 \n        Y_obs = pm.Normal('Y_obs', mu=mu, sd=sigma, observed=Y)\n        step = pm.NUTS()\n        trace = pm.sample(2000, step)\n\n    return trace","f49208ce":"trace_vlad = get_bayes_projection('Vlad', df_hr)\ntrace_sem = get_bayes_projection('Semien', df_hr)\ntrace_bichtte = get_bayes_projection('Bichette', df_hr)\ntrace_teo = get_bayes_projection('Teoscar', df_hr)\ntrace_girchuk = get_bayes_projection('Grichuk', df_hr)\ntrace_biggio = get_bayes_projection('Biggio', df_hr)","bf830712":"def get_estimate_bayes(trace):\n    return az.summary(trace).iloc[1][0]*162 + az.summary(trace).iloc[0][0]","ceddc802":"print('HR projected for Vlad: ' + str(get_estimate_bayes(trace_vlad)))\nprint('HR projected for Semien: ' + str(get_estimate_bayes(trace_sem)))\nprint('HR projected for Bichette: ' + str(get_estimate_bayes(trace_bichtte)))\nprint('HR projected for Teoscar: ' + str(get_estimate_bayes(trace_teo)))\nprint('HR projected for Girchuk: ' + str(get_estimate_bayes(trace_girchuk)))\nprint('HR projected for Biggio: ' + str(get_estimate_bayes(trace_biggio)))","1a6dba24":"def get_obp_bayes(trace_hits, trace_bb, ab):\n    return (get_estimate_bayes(trace_hits) + get_estimate_bayes(trace_bb))\/(ab + get_estimate_bayes(trace_bb))\n    \ndef get_slg_bayes(trace_db, trace_hr, trace_hits, trace_tp, ab):\n    try: \n        return ((2*get_estimate_bayes(trace_db) + 3* get_estimate_bayes(trace_tp) + 4*get_estimate_bayes(trace_hr) + \n                (get_estimate_bayes(trace_hits) -get_estimate_bayes(trace_db)-\n                     get_estimate_bayes(trace_tp) -get_estimate_bayes(trace_hr))\/ab))\n    except:\n        return (2*get_estimate_bayes(trace_db) + 4*get_estimate_bayes(trace_hr) + \n                (get_estimate_bayes(trace_hits) -get_estimate_bayes(trace_db)-get_estimate_bayes(trace_hr)))\/ab\n    \ndef get_runs_created_bayes(trace_db, trace_hr, trace_tp, trace_hits, trace_bb, ab):\n    return get_slg_bayes(trace_db, trace_hr, trace_hits, trace_tp, ab)*get_obp_bayes(trace_hits, trace_bb, ab)*ab\n\ndef get_ops_bayes(trace_db, trace_hr, trace_tp, trace_hits, trace_bb, ab):\n    return get_slg_bayes(trace_db, trace_hr, trace_hits, trace_tp, ab) + get_obp_bayes(trace_hits, trace_bb, ab)","4083045f":"def get_estimate(df, player):\n    \n    x =  np.linspace(0,len(df[df.Name == player]),len(df[df.Name == player]))\n    y = np.cumsum(df[df.Name == player].Statistic.values)\n    slope, intercept, r_value, p_value, std_err = stats.linregress(x,y)\n    return slope*(len(df[df.Name == player])+86) + intercept","9cdb53de":"print(\"Projected Hits Bichette: \" + str(get_estimate(df_hits, 'Bichette')))\nprint(\"Projected Hits Vlad: \" + str(get_estimate(df_hits, 'Vlad')))\nprint(\"Projected Hits Teoscar: \" + str(get_estimate(df_hits, 'Teoscar'))) \nprint(\"Projected Hits Grichuk: \" + str(get_estimate(df_hits, 'Grichuk')))\nprint(\"Projected Hits Biggio: \" + str(get_estimate(df_hits, 'Biggio')))\nprint(\"Projected Hits Semien: \" + str(get_estimate(df_hits, 'Semien')))","330bb3f1":"print(\"Projected BA Bichette: \" + str(get_estimate(df_hits, 'Bichette')\/600))\nprint(\"Projected BA Vlad: \" + str(get_estimate(df_hits, 'Vlad')\/600))\nprint(\"Projected BA Teoscar: \" + str(get_estimate(df_hits, 'Teoscar')\/550)) \nprint(\"Projected BA Grichuk: \" + str(get_estimate(df_hits, 'Grichuk')\/600))\nprint(\"Projected BA Biggio: \" + str(get_estimate(df_hits, 'Biggio')\/550))\nprint(\"Projected BA Semien: \" + str(get_estimate(df_hits, 'Semien')\/600))","c24cd4cd":"def get_obp(player, ab):\n    return (get_estimate(df_hits, player) + get_estimate(df_bb, player))\/(ab + get_estimate(df_bb, player))\n    \ndef get_slg(player, ab):\n    try: \n        return ((2*get_estimate(df_db, player) + 3* get_estimate(df_tp, player) + 4*get_estimate(df_hr, player) + \n                (get_estimate(df_hits, player) -get_estimate(df_db, player)-\n                     get_estimate(df_tp, player) -get_estimate(df_hr, player))\/ab))\n    except:\n        return (2*get_estimate(df_db, player) + 4*get_estimate(df_hr, player) + \n                (get_estimate(df_hits, player) -get_estimate(df_db, player)-get_estimate(df_hr, player)))\/ab\n    \ndef get_runs_created(player, ab):\n    return get_slg(player, ab)*get_obp(player, ab)*ab\n\ndef get_ops(player, ab):\n    return get_slg(player, ab) + get_obp(player, ab)","6ed93499":"# **Visualization of the Data**","574a3cc1":"*this will be up in a few days* -Eli","187cd9f7":"# **Prediction: OLS regression**","03d98251":"That's all for now (remember, the training data is from May 29, so based on the performance of player since then *cough* Girchuk turned back into a pumpkin *cough* these projections may seem light or too aggressive), I'll be back later to attempt more complex bayesian models. ","b945fb87":"You'll notice the projection for the bayesian model are very similar to those from OLS regression. This is very encouraging (although, in the future I'll attempt more complex models)","71cd8d2a":"# **Data Collection & Cleaning**","72d56bbe":"Now I can project batting average by dividing the number of hits by around 600 (the average number of atbats of a player per season).","ee632e2d":"Here I use the api to make a call for all the games so far in the regular season of the Toronto Blue Jays.","e1ae32ba":"This function performs ordinary least squares regression based on the dataframe and player you give it. ","66125604":"Summary of the results for Bayesian Linear Regression: ","cc18651e":"![Screen Shot 2021-05-30 at 12.13.45 AM.png](attachment:ac39786a-0a89-4bfa-ab77-19195ff6030a.png)![](http:\/\/)","32602423":"I now create a new dictionary storing some of the key statistics I'm going to project.","5561fc35":"I separate the boxscore data based on whether the Jays were the home or away team (this was just an easy way for me to discard the data from the other teams).","54070aff":"Here is a quick summary of the results for OLS linear regression:","53bf5821":"I'm using the Mlb-Stats API to get the most up to date statistics for the 2021 season for several Toronto Blue Jays Hitters. The idea is then to project these stats forward to what they might be at the end of the year based on what they've done so far (50ish games out of the 162 game reason). \n\nThese stats are projected based on data from the beginning of the season until May 29th.","6cf6d85e":"To calculate advanced stats:","748ae481":"The above code gets us a game_id for each game in the schedule- I loop through the list of game_ids and append the box score data to an empty list.","6041310b":"Below is an example call to the api - note that 141 is the team_id which can be found using the following call: statsapi.lookup_team('tor')","2271a730":"I initiate a dictionary with the player id (which can be found with a call to the api) and the last name of the player. I append the batting statistics for that player to a new dictionary called all_games_stats.","06dde8da":"Hits Estimates","ec883575":"# **Prediction: Bayesian Linear regression with PYMC3**","95592945":"These functions are used to calculate the other advanced statistics"}}