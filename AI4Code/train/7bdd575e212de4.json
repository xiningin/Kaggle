{"cell_type":{"02f9de10":"code","18be9d57":"code","20f7a6b2":"code","71726113":"code","0441f077":"code","f0ac0496":"code","27179d10":"code","101794d5":"code","c536b956":"code","554f4ce8":"code","d16ee72e":"code","f0ce2fc4":"code","5fc72d6d":"code","c83b9e09":"code","9640d209":"code","64d0536b":"code","93c60fd1":"code","03aff21d":"code","7c819950":"code","a322e21d":"code","5aeb2c89":"code","2101df07":"code","305ed33d":"code","bd35cbe1":"code","b1081797":"code","58937f94":"code","a7a24bc8":"code","032873ab":"code","a859de69":"code","074d147b":"code","8a468e19":"code","eebbcd70":"code","2e37fae8":"code","3cfc3bfa":"markdown","f36711c2":"markdown","8c6fa1ea":"markdown","483da5c5":"markdown","5ae66535":"markdown","2bdc485a":"markdown","1ec210a0":"markdown","9fb59ce2":"markdown","07ad85e4":"markdown","7337ca1c":"markdown","28870f46":"markdown","252446c1":"markdown","12864d20":"markdown","9c5988f9":"markdown","6efd4f5c":"markdown","8c432317":"markdown","5ec54fb1":"markdown"},"source":{"02f9de10":"# Fork\u5143\n\u6ce8\u91c8\uff1a \u672c\u8a18\u4e8b\u306f https:\/\/www.kaggle.com\/nitindatta\/pulmonary-embolism-dicom-preprocessing-eda \u3092\u548c\u8a33\u3057\u305f\u7269\u3067\u3059\u3002","18be9d57":"!conda install -c conda-forge gdcm -y","20f7a6b2":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom IPython.display import HTML\n\nsns.set_style('darkgrid')\nimport pydicom\nimport scipy.ndimage\nimport gdcm\nimport imageio\nfrom IPython import display\n\n\nfrom skimage import measure \nfrom mpl_toolkits.mplot3d.art3d import Poly3DCollection\nfrom skimage.morphology import disk, opening, closing\nfrom tqdm import tqdm\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.figure_factory as ff\nfrom plotly.graph_objs import *\ninit_notebook_mode(connected=True) \nfrom PIL import Image\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\nfrom os import listdir, mkdir","71726113":"basepath = \"..\/input\/rsna-str-pulmonary-embolism-detection\/\"\nlistdir(basepath)","0441f077":"train = pd.read_csv(basepath + \"train.csv\")\ntest = pd.read_csv(basepath + \"test.csv\")","f0ac0496":"train.shape, test.shape","27179d10":"train.head().T","101794d5":"print(\"Number of unique Study instances are\", train['StudyInstanceUID'].nunique())\nprint(\"Number of unique Series instances are\", train['SeriesInstanceUID'].nunique())","c536b956":"print('Null values in train data:',train.isnull().sum().sum())\nprint('Null values in test data:',test.isnull().sum().sum())","554f4ce8":"train.info()","d16ee72e":"test.info()","f0ce2fc4":"def load_scans(dcm_path):\n    files = listdir(dcm_path)\n    f = [pydicom.dcmread(dcm_path + \"\/\" + str(file)) for file in files]\n    return f","5fc72d6d":"example = basepath + \"train\/\" + train.StudyInstanceUID.values[0] +'\/'+ train.SeriesInstanceUID.values[0]\nfile_names = listdir(example)","c83b9e09":"scans = load_scans(example)","9640d209":"scans[0]","64d0536b":"plt.figure(figsize=(12,6))\nfor n in range(5):\n    image = scans[n].pixel_array.flatten()\n    rescaled_image = image * scans[n].RescaleSlope + scans[n].RescaleIntercept\n    sns.distplot(image.flatten());\nplt.title(\"HU unit distributions for 5 examples\");","93c60fd1":"# dicom\u753b\u50cf\u306e\u30ed\u30fc\u30c9\ndef load_slice(path):\n    slices = [pydicom.read_file(path + '\/' + s) for s in listdir(path)]\n    slices.sort(key = lambda x: float(x.ImagePositionPatient[2]))\n    try:\n        slice_thickness = np.abs(slices[0].ImagePositionPatient[2] - slices[1].ImagePositionPatient[2])\n    except:\n        slice_thickness = np.abs(slices[0].SliceLocation - slices[1].SliceLocation)\n        \n    for s in slices:\n        s.SliceThickness = slice_thickness\n        \n    return slices\n\n# HU\u914d\u5217\u306b\u5909\u63db\ndef transform_to_hu(slices):\n    images = np.stack([file.pixel_array for file in slices])\n    images = images.astype(np.int16)\n\n    # convert ouside pixel-values to air:\n    # I'm using <= -1000 to be sure that other defaults are captured as well\n    images[images <= -1000] = 0\n    \n    # convert to HU\n    for n in range(len(slices)):\n        \n        intercept = slices[n].RescaleIntercept\n        slope = slices[n].RescaleSlope\n        \n        if slope != 1:\n            images[n] = slope * images[n].astype(np.float64)\n            images[n] = images[n].astype(np.int16)\n            \n        images[n] += np.int16(intercept)\n    \n    return np.array(images, dtype=np.int16)\n\ndef resample(image, scan, new_spacing=[1,1,1]):\n    spacing = np.array([float(scans_0[0].SliceThickness), \n                        float(scans_0[0].PixelSpacing[0]), \n                        float(scans_0[0].PixelSpacing[0])])\n\n\n    resize_factor = spacing \/ new_spacing\n    new_real_shape = image.shape * resize_factor\n    new_shape = np.round(new_real_shape)\n    real_resize_factor = new_shape \/ image.shape\n    new_spacing = spacing \/ real_resize_factor\n    \n    image = scipy.ndimage.interpolation.zoom(image, real_resize_factor)\n    \n    return image, new_spacing\n\ndef make_mesh(image, threshold=-300, step_size=1):\n    p = image.transpose(2,1,0)\n    verts, faces, norm, val = measure.marching_cubes_lewiner(p, threshold, step_size=step_size, allow_degenerate=True)\n    return verts, faces\n\n\ndef plt_3d(verts, faces):\n    print(\"Drawing\")\n    x,y,z = zip(*verts) \n    fig = plt.figure(figsize=(10, 10))\n    ax = fig.add_subplot(111, projection='3d')\n\n    # Fancy indexing: `verts[faces]` to generate a collection of triangles\n    mesh = Poly3DCollection(verts[faces], linewidths=0.05, alpha=1)\n    face_color = [1, 1, 0.9]\n    mesh.set_facecolor(face_color)\n    ax.add_collection3d(mesh)\n\n    ax.set_xlim(0, max(x))\n    ax.set_ylim(0, max(y))\n    ax.set_zlim(0, max(z))\n#     ax.set_axis_bgcolor((0.7, 0.7, 0.7))\n    ax.set_facecolor((0.7,0.7,0.7))\n    plt.show()\n","03aff21d":"sns.set_style('white')\nhu_scans = transform_to_hu(scans)\n\nfig, ax = plt.subplots(1,2,figsize=(15,4))\n\n\nax[0].set_title(\"CT-scan in HU\")\nax[0].imshow(hu_scans[0], cmap=\"plasma\")\nax[1].set_title(\"HU values distribution\");\nsns.distplot(hu_scans[0].flatten(), ax=ax[1],color='red', kde_kws=dict(lw=2, ls=\"--\",color='blue'));\nax[1].grid(False)","7c819950":"first_patient = load_slice('..\/input\/rsna-str-pulmonary-embolism-detection\/train\/0003b3d648eb\/d2b2960c2bbf')\nfirst_patient_pixels = transform_to_hu(first_patient)\n\ndef sample_stack(stack, rows=6, cols=6, start_with=10, show_every=5):\n    fig,ax = plt.subplots(rows,cols,figsize=[18,20])\n    for i in range(rows*cols):\n        ind = start_with + i*show_every\n        ax[int(i\/rows),int(i % rows)].set_title(f'slice {ind}')\n        ax[int(i\/rows),int(i % rows)].imshow(stack[ind],cmap='bone')\n        ax[int(i\/rows),int(i % rows)].axis('off')\n    plt.show()\n\nsample_stack(first_patient_pixels)","a322e21d":"imageio.mimsave(\"\/tmp\/gif.gif\", first_patient_pixels, duration=0.1)\ndisplay.Image(filename=\"\/tmp\/gif.gif\", format='png')","5aeb2c89":"first_patient_scan = '..\/input\/rsna-str-pulmonary-embolism-detection\/train\/0003b3d648eb\/d2b2960c2bbf'\nscans_0 = load_scans(first_patient_scan)\nimgs_after_resamp, spacing = resample(first_patient_pixels, scans_0, [1,1,1])\nv, f = make_mesh(imgs_after_resamp, threshold = 350)\nplt_3d(v, f)","2101df07":"im_path = []\ntrain_path = '..\/input\/rsna-str-pulmonary-embolism-detection\/train\/'\nfor i in listdir(train_path): \n    for j in listdir(train_path + i):\n        x = i+'\/'+j\n        im_path.append(x)","305ed33d":"def get_window_value(feature):\n    if type(feature) == pydicom.multival.MultiValue:\n        return np.int(feature[0])\n    else:\n        return np.int(feature)\n\npixelspacing_r = []\npixelspacing_c = []\nslice_thicknesses = []\nids = []\nid_pth = []\nrow_values = []\ncolumn_values = []\nwindow_widths = []\nwindow_levels = []\n\nfor i in im_path:\n    ids.append(i.split('\/')[0]+'_'+i.split('\/')[1])\n    example_dcm = listdir(train_path  + i + \"\/\")[0]\n    id_pth.append(train_path + i)\n    dataset = pydicom.dcmread(train_path + i + \"\/\" + example_dcm)\n    \n    window_widths.append(get_window_value(dataset.WindowWidth))\n    window_levels.append(get_window_value(dataset.WindowCenter))\n    \n    spacing = dataset.PixelSpacing\n    slice_thicknesses.append(dataset.SliceThickness)\n    \n    row_values.append(dataset.Rows)\n    column_values.append(dataset.Columns)\n    pixelspacing_r.append(spacing[0])\n    pixelspacing_c.append(spacing[1])\n    \nscan_properties = pd.DataFrame(data=ids, columns=[\"ID\"])\nscan_properties.loc[:, \"rows\"] = row_values\nscan_properties.loc[:, \"columns\"] = column_values\nscan_properties.loc[:, \"area\"] = scan_properties[\"rows\"] * scan_properties[\"columns\"]\nscan_properties.loc[:, \"pixelspacing_r\"] = pixelspacing_r\nscan_properties.loc[:, \"pixelspacing_c\"] = pixelspacing_c\nscan_properties.loc[:, \"pixelspacing_area\"] = scan_properties.pixelspacing_r * scan_properties.pixelspacing_c\nscan_properties.loc[:, \"slice_thickness\"] = slice_thicknesses\nscan_properties.loc[:, \"id_pth\"] = id_pth\nscan_properties.loc[:, \"window_width\"] = window_widths\nscan_properties.loc[:, \"window_level\"] = window_levels\nscan_properties.head().T","bd35cbe1":"sns.set_style('darkgrid')\nfig, ax = plt.subplots(1,2,figsize=(20,5))\nsns.distplot(pixelspacing_r, ax=ax[0], color='green', kde_kws=dict(lw=3, ls=\"--\",color='red'))\nax[0].set_title(\"Pixel spacing distribution \\n in row direction \")\nax[0].set_ylabel(\"Counts in train\")\nax[0].set_xlabel(\"mm\")\nsns.distplot(pixelspacing_c, ax=ax[1], color=\"Blue\",kde_kws=dict(lw=3, ls=\"--\",color='red'))\nax[1].set_title(\"Pixel spacing distribution \\n in column direction\");\nax[1].set_ylabel(\"Counts in train\");\nax[1].set_xlabel(\"mm\");","b1081797":"scan_properties[\"r_distance\"] = scan_properties.pixelspacing_r * scan_properties.rows\nscan_properties[\"c_distance\"] = scan_properties.pixelspacing_c * scan_properties[\"columns\"]\nscan_properties[\"area_cm2\"] = 0.1* scan_properties[\"r_distance\"] * 0.1*scan_properties[\"c_distance\"]\nscan_properties[\"slice_volume_cm3\"] = 0.1*scan_properties.slice_thickness * scan_properties.area_cm2","58937f94":"fig, ax = plt.subplots(1,2,figsize=(20,5))\nsns.distplot(scan_properties.area_cm2, ax=ax[0], color=\"Limegreen\",kde_kws=dict(lw=3, ls=\"--\",color='red'))\nsns.distplot(scan_properties.slice_volume_cm3, ax=ax[1], color=\"Mediumseagreen\",kde_kws=dict(lw=3, ls=\"--\",color='red'))\nax[0].set_title(\"CT-slice area in $cm^{2}$\")\nax[1].set_title(\"CT-slice volume in $cm^{3}$\")\nax[0].set_xlabel(\"$cm^{2}$\")\nax[1].set_xlabel(\"$cm^{3}$\");","a7a24bc8":"scan_properties.head(3).T","032873ab":"scan_properties.describe().T","a859de69":"scan_properties.to_csv('Pulmonary_Embolism_CT_scans_data.csv',index=False)","074d147b":"scan_cols = scan_properties.copy()\nscan_cols.drop(['rows','columns','area'],axis=1,inplace=True)\n\ncorr = scan_cols.corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    f, ax = plt.subplots(figsize=(10, 10))\n    ax = sns.heatmap(corr,mask=mask,square=True,linewidths=.8,cmap=\"viridis\",annot=True)","8a468e19":"cols = train.copy()\ncols.drop(['StudyInstanceUID','SeriesInstanceUID','SOPInstanceUID'],axis=1,inplace=True)\ncolumns = cols.columns","eebbcd70":"fig, ax = plt.subplots(7,2,figsize=(16,28))\nfor i,col in enumerate(columns): \n    plt.subplot(7,2,i+1)\n    sns.countplot(cols[col],palette='hot')   ","2e37fae8":"corr = cols.corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    f, ax = plt.subplots(figsize=(12, 12))\n    ax = sns.heatmap(corr,mask=mask,square=True,linewidths=.8,cmap=\"summer\",annot=True)","3cfc3bfa":"# \u30c7\u30fc\u30bf\u6982\u8981\n\n\n* `StudyInstanceUID` - \u30c7\u30fc\u30bf\u5185\u306e\u5404\u691c\u67fb\u306e\u4e00\u610f\u306eID\u3002\n* `SeriesInstanceUID` - \u691c\u67fb\u4e2d\u306e\u5404\u30b7\u30ea\u30fc\u30ba\u306b\u56fa\u6709\u306eID\u3067\u3059\u3002\n* `SOPInstanceUID` - \u691c\u67fb\u5185\u306e\u5404\u753b\u50cf\u306b\u56fa\u6709\u306eID\u3067\u3059\u3002\n* `pe_present_on_image` - \u753b\u50cf\u30ec\u30d9\u30eb\u3067\uff0c\u753b\u50cf\u4e0a\u306bPE\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u793a\u3057\u307e\u3059\uff0e\n* `negative_exam_for_pe` - \u691c\u67fb\u30ec\u30d9\u30eb\u3067\u3001PE\u304c\u5b58\u5728\u3059\u308b\u753b\u50cf\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u793a\u3057\u307e\u3059\u3002\n* `qa_motion` - \u691c\u67fb\u3067\u653e\u5c04\u7dda\u6280\u5e2b\u304c\u30e2\u30fc\u30b7\u30e7\u30f3\u30a2\u30fc\u30c1\u30d5\u30a1\u30af\u30c8\u306e\u554f\u984c\u3092\u6307\u6458\u3057\u305f\u304b\u3069\u3046\u304b\u3092\u793a\u3057\u307e\u3059\u3002\n* `qa_contrast` - \u653e\u5c04\u7dda\u6280\u5e2b\u304c\u691c\u67fb\u3067\u9020\u5f71\u306b\u554f\u984c\u304c\u3042\u308b\u3068\u6307\u6458\u3057\u305f\u304b\u3069\u3046\u304b\u3092\u793a\u3057\u307e\u3059\u3002\n* `flow_artifact` - \u53c2\u8003\u5024\n* `rv_lv_ratio_gte_1` - \u691c\u67fb\u30ec\u30d9\u30eb, \u691c\u67fb\u306b\u542b\u307e\u308c\u308b RV\/LV \u6bd4\u304c >= 1 \u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u793a\u3057\u307e\u3059.\n* `rv_lv_ratio_lt_1` - \u691c\u67fb\u30ec\u30d9\u30eb, \u691c\u67fb\u306b\u542b\u307e\u308c\u308bRV\/LV\u6bd4\u304c1\u672a\u6e80\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u793a\u3057\u307e\u3059.\n* `leftsided_pe` - \u691c\u67fb\u4e2d\u306e\u753b\u50cf\u306e\u5de6\u5074\u306b PE \u304c\u5b58\u5728\u3059\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n* `chronic_pe` - \u691c\u67fb\u30ec\u30d9\u30eb\u306e PE \u304c\u6162\u6027\u7684\u306a\u3082\u306e\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n* `true_filling_defect_not_pe` - PE \u3067\u306f\u306a\u3044\u75be\u60a3\u3092\u793a\u3057\u307e\u3059\u3002\n* `rightsided_pe` - \u8a66\u9a13\u30ec\u30d9\u30eb\u3067\u3001\u8a66\u9a13\u4e2d\u306e\u753b\u50cf\u306e\u53f3\u5074\u306b PE \u304c\u5b58\u5728\u3059\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n* `acute_and_chronic_pe` - \u8a66\u9a13\u306b\u542b\u307e\u308c\u308bPE\u304c\u6025\u6027\u304a\u3088\u3073\u6162\u6027\u306e\u4e21\u65b9\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n* `central_pe` - \u8a66\u9a13\u306e\u753b\u50cf\u306e\u4e2d\u5fc3\u90e8\u306b PE \u304c\u5b58\u5728\u3059\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n* `indeterminate` - \u691c\u67fb\u306f PE \u306b\u5bfe\u3057\u3066\u9670\u6027\u3067\u306f\u306a\u3044\u304c\u3001QA \u306e\u554f\u984c\u306b\u3088\u308a\u8a66\u9a13\u30ec\u30d9\u30eb\u306e\u6700\u7d42\u7684\u306a\u30e9\u30d9\u30eb\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3067\u304d\u306a\u304b\u3063\u305f\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002","f36711c2":"### 1\u56de\u306eCT\u30b9\u30ad\u30e3\u30f3\u3067\u30ab\u30d0\u30fc\u3055\u308c\u308b\u7269\u7406\u7684\u306a\u9818\u57df\u3068\u30b9\u30e9\u30a4\u30b9\u91cf\n\n\u3055\u3066\u3001ct-scan\u3067\u30ab\u30d0\u30fc\u3055\u308c\u308b\u7269\u7406\u7684\u306a\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306e\u3044\u304f\u3064\u304b\u306e\u91cd\u8981\u306a\u91cf\u304c\u308f\u304b\u308a\u307e\u3057\u305f!","8c6fa1ea":"\ud83d\udccc \u7814\u7a76\u3068\u7cfb\u5217\u306e\u4e21\u65b9\u304c\u540c\u3058\u6570\u3067\u3042\u308b\u305f\u3081\u3001\u5404\u7814\u7a76\u306b\u306f1\u3064\u306e\u7cfb\u5217\u3057\u304b\u306a\u3044\u3068\u63a8\u8ad6\u3067\u304d\u307e\u3059\u3002\n\nNULL\u5024\u3001\u5404\u5217\u306e\u30bf\u30a4\u30d7\u3001\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u306a\u3069\u306e\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001\u3044\u304f\u3064\u304b\u306e\u30b5\u30cb\u30c6\u30a3\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u307e\u3059\n\n### \u6b20\u640d\u5024\u306f\u5b58\u5728\u3059\u308b\u304b","483da5c5":"\u9806\u756a\u306b\u4e26\u3079\u30665\u679a\u305a\u3064\u98db\u3070\u3057\u3066\u3001\u3088\u308a\u591a\u304f\u306e\u7a2e\u985e\u306e\u30b9\u30e9\u30a4\u30b9\u3092\u898b\u3089\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002","5ae66535":"<font color=\"red\" size=5><center>RSNA-STR Pulmonary Embolism Detection - \u80ba\u585e\u6813\u75c7\u691c\u77e5 -<\/center><\/font>","2bdc485a":"### pixelspacing(\u30d4\u30af\u30bb\u30eb\u9593\u9694)\n* dicom \u30d5\u30a1\u30a4\u30eb\u306b\u3042\u308b pixelspacing \u5c5e\u6027\u306f\u91cd\u8981\u306a\u5c5e\u6027\u3067\u3059\u3002\u3053\u308c\u306f\u30011\u3064\u306e\u30d4\u30af\u30bb\u30eb\u304c\u3069\u306e\u304f\u3089\u3044\u306e\u7269\u7406\u7684\u306a\u8ddd\u96e2\u3092\u30ab\u30d0\u30fc\u3057\u3066\u3044\u308b\u304b\u3092\u6559\u3048\u3066\u304f\u308c\u307e\u3059\u3002\u6a2a\u65ad\u30b9\u30e9\u30a4\u30b9\u306e\u5e73\u9762\u5185\u306eX\u65b9\u5411\u3068Y\u65b9\u5411\u3092\u8a18\u8ff0\u3059\u308b2\u3064\u306e\u5024\u3057\u304b\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n* 1\u4eba\u306e\u60a3\u8005\u306e\u5834\u5408\u3001\u3053\u306e\u30d4\u30af\u30bb\u30eb\u9593\u9694\u306f\u901a\u5e38\u3001\u3059\u3079\u3066\u306e\u30b9\u30e9\u30a4\u30b9\u3067\u540c\u3058\u3067\u3059\u3002\n* \u3057\u304b\u3057\u3001\u60a3\u8005\u306e\u9593\u3067\u306f\u533b\u5e2b\u3084\u30af\u30ea\u30cb\u30c3\u30af\u306e\u500b\u4eba\u7684\u307e\u305f\u306f\u7d44\u7e54\u7684\u306a\u597d\u307f\u306b\u3088\u3063\u3066\u30d4\u30af\u30bb\u30eb\u9593\u9694\u304c\u7570\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u3001\u307e\u305f\u30b9\u30ad\u30e3\u30ca\u30fc\u306e\u30bf\u30a4\u30d7\u306b\u3082\u4f9d\u5b58\u3057\u307e\u3059\u3002\u305d\u306e\u7d50\u679c\u3001\u80ba\u306e\u30b5\u30a4\u30ba\u30672\u3064\u306e\u753b\u50cf\u3092\u6bd4\u8f03\u3057\u305f\u5834\u5408\u3001\u81ea\u52d5\u7684\u306b\u5927\u304d\u3044\u65b9\u304c\u81d3\u5668\u306e\u7269\u7406\u7684\u306a\u30b5\u30a4\u30ba\u304c\u5927\u304d\u3044\u3053\u3068\u3092\u610f\u5473\u3059\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002","1ec210a0":"# Introduction \n\n\u3053\u306e\u30ce\u30fc\u30c8\u3067\u306f\u3001DICOM\u30d5\u30a1\u30a4\u30eb\u3068CT\u30b9\u30ad\u30e3\u30f3\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\u307e\u305f\u3001seaborn\u3068matplotlib\u3092\u4f7f\u3063\u3066\u8868\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\u3057\u307e\u3059\u3002\u6700\u5f8c\u306b\u4f55\u304c\u8ffd\u52a0\u3067\u3067\u304d\u308b\u304b\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\n### **\u80ba\u585e\u6813\u75c7(Pulmonary Embolism; PE)\u3068\u306f**\n*\u3000\u80ba\u585e\u6813\u75c7\u306f\u3001\u8840\u6db2\u306e\u304b\u305f\u307e\u308a\uff08\u8840\u6813\uff09\u3084\u3001\u307e\u308c\u306b\u4ed6\u306e\u56fa\u5f62\u7269\u304c\u8840\u6db2\u306e\u6d41\u308c\u306b\u4e57\u3063\u3066\u80ba\u306e\u52d5\u8108\uff08\u80ba\u52d5\u8108\uff09\u306b\u904b\u3070\u308c\u3001\u305d\u3053\u3092\u3075\u3055\u3044\u3067\u3057\u307e\u3046\uff08\u585e\u6813\uff09\u75c5\u6c17\u3067\u3059\u3002\n* \u80ba\u585e\u6813\u75c7\u306e\u75c7\u72b6\u306b\u306f\u3001\u606f\u5207\u308c\u3001\u7279\u306b\u606f\u3092\u5438\u3046\u3068\u304d\u306e\u80f8\u306e\u75db\u307f\u3001\u8840\u75f0\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002\n* \u307b\u3068\u3093\u3069\u306e\u5834\u5408\u3001\u80ba\u585e\u6813\u75c7\u306f\u3001\u8db3\u304b\u3089\u79fb\u52d5\u3057\u305f\u8840\u6813\u306b\u3088\u3063\u3066\u5f15\u304d\u8d77\u3053\u3055\u308c\u307e\u3059\u3002\uff08\u30a8\u30b3\u30ce\u30df\u30fc\u30af\u30e9\u30b9\u75c7\u5019\u7fa4\u306b\u3088\u3063\u3066\u3082\u80ba\u585e\u6813\u75c7\u306f\u5f15\u304d\u8d77\u3053\u3055\u308c\u307e\u3059\u3002\n\n\n<font color=\"red\" size=3>\u3053\u306e\u30ab\u30fc\u30cd\u30eb\u304c\u5f79\u306b\u7acb\u3066\u305f\u306a\u3089\u3001Upvote\u3057\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u5e78\u3044\u3067\u3059\u3002<\/font>","9fb59ce2":"### dicom\u30c7\u30fc\u30bf\u306e\u4f8b","07ad85e4":"CT\u30b9\u30ad\u30e3\u30f3\u306b\u3064\u3044\u3066\n\n* CT\u30b9\u30ad\u30e3\u30f3\u306f\u3001X\u7dda\u3092\u7167\u5c04\u3055\u308c\u305f\u7269\u4f53\u3084\u7d44\u7e54\u306e\u653e\u5c04\u7dda\u5bc6\u5ea6\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n* \u6a2a\u65b9\u5411\u306e\u30b9\u30e9\u30a4\u30b9\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u7570\u306a\u308b\u65b9\u5411\u304b\u3089\u6e2c\u5b9a\u3092\u884c\u3063\u305f\u5f8c\u3001\u30b9\u30ad\u30e3\u30f3\u3092\u518d\u69cb\u6210\u3057\u307e\u3059\u3002\n* CT\u30b9\u30ad\u30e3\u30f3\u306f\u3059\u3067\u306bHU\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n* CT\u30b9\u30ad\u30e3\u30f3\u3067\u306f\u7d044000\u500b\u306e\u30b0\u30ec\u30fc\u5024\u304c\u5f97\u3089\u308c\u308b\u304c\u3001\u305d\u308c\u306f\u6211\u3005\u306e\u76ee\u3067\u306f\u6349\u3048\u3089\u308c\u306a\u3044\u3002\u305d\u3053\u3067\u3001\u6211\u3005\u306f\"windowing\"\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n* \u6c34\u306fHU 0\u3001\u7a7a\u6c17\u306f-1000\n","7337ca1c":"\ud83d\udccc \u4e0a\u306e\u30b0\u30e9\u30d5\u3067\u306f\u30015\u3064\u306e\u4f8b\u306e\u753b\u7d20\u5206\u5e03\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u6b21\u306b\u3001CT\u30b9\u30ad\u30e3\u30f3\u753b\u50cf\u3068\u5408\u308f\u305b\u3066\u753b\u7d20\u914d\u5217\u5206\u5e03\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002","28870f46":"\ud83d\udccc \u30b0\u30e9\u30d5\u304b\u3089\u3001\u7a7a\u6c17\u306f\u7d04-1000\u306eHU\u3092\u6301\u3061\u3001\u6b21\u306b\u9ad8\u3044\u306e\u306f\u6c34\u3067\u3042\u308b\u3053\u3068\u304b\u3089\u3001\u9762\u7a4d\u306e\u5927\u90e8\u5206\u304c\u7a7a\u6c17\u3067\u6e80\u305f\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u63a8\u5bdf\u3067\u304d\u307e\u3059\u3002HU\u306f\u7d040","252446c1":"# Acknowledgements\n1. [Excellent work of Laura Fink](https:\/\/www.kaggle.com\/allunia\/pulmonary-fibrosis-dicom-preprocessing)\n2. [Insights used by prk007](https:\/\/www.kaggle.com\/prk007\/insights-from-tabular-and-image-data)\n3. [3D reconstruction by Md. Redwan Karim Sony](https:\/\/www.kaggle.com\/redwankarimsony\/rsna-str-3d-stacking-3d-plot-segmentation\/comments)","12864d20":"\u7570\u5e38\u306a\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u304c\u898b\u3089\u308c\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u5024\u306e\u307b\u3068\u3093\u3069\u304c\u3001\u3044\u304f\u3064\u304b\u306e\u7279\u5fb4\u3092\u9ad8\u5ea6\u306b\u76f8\u95a2\u3055\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u3001\u5f97\u3089\u308c\u305f\u5024\u3060\u304b\u3089\u3067\u3059\u3002","9c5988f9":"\u6211\u3005\u306f\u3001\u5024\u304c\u672c\u5f53\u306b\u60a3\u8005\u304b\u3089\u60a3\u8005\u306b\u591a\u304f\u306e\u9055\u3044\u304c\u3042\u308b\u3053\u3068\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059! \u5f7c\u3089\u306fmm\u3067\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001CT\u30b9\u30ad\u30e3\u30f3\u306f\u901a\u5e38\u3001512\u884c\u3068\u5217\u306e\u5024\u3092\u30ab\u30d0\u30fc\u3057\u3066\u3044\u307e\u3059\u3002","6efd4f5c":"## Utility Functions","8c432317":"### \u6b20\u640d\u5024\u306a\u3057","5ec54fb1":"\u7d04240MB\u306e\u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\u3092\u7528\u3044\u308b\u3002"}}