{"cell_type":{"11800050":"code","10e36508":"code","7d4cbb6a":"code","5bb64a86":"code","c2eb1f8e":"code","2a77771a":"code","0d9bb8dd":"code","5f4e4b00":"code","bb623225":"code","e4ceaf5b":"code","f4e63e58":"code","145257d5":"code","b2bfbc4e":"code","6adb648f":"code","c7732479":"code","4899e018":"code","e2c8514c":"code","ff29a641":"code","24d179b6":"code","fc44ba4a":"code","e6edc993":"code","87963641":"code","23378783":"code","38af0b4a":"code","963c95d4":"code","e78e4d0c":"code","beca0e9b":"code","60e425f6":"code","ab907fd3":"code","0a43bb8b":"code","f16dcd69":"code","a7858c1f":"code","b6a10bac":"code","2a4a135c":"code","b8ccd12c":"markdown","f8bbbf1e":"markdown","c462dfcc":"markdown","fabcf556":"markdown","6200cedb":"markdown","16b70755":"markdown","336809c0":"markdown","caf698b8":"markdown","cc2083bc":"markdown","32b85246":"markdown","a0bb1bae":"markdown","953b8ec2":"markdown","34d056ce":"markdown","30b67393":"markdown","7bb40ad6":"markdown","3efb57db":"markdown","b91e252c":"markdown","e183df88":"markdown","45a964be":"markdown","f5be3a7c":"markdown","f870d8e1":"markdown","e31dac38":"markdown","01122d95":"markdown","3c80117b":"markdown","5259ee20":"markdown","cd5537a3":"markdown"},"source":{"11800050":"# import the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt","10e36508":"# lets create a numpy array\nimg = np.array([[0,0,0],\n                [1,0,1],\n                [1,0,1]])\n\n# so we can see that img is a numpy array containing some values of 0's and 1's","7d4cbb6a":"# but how does this look when we show it as an image\nplt.imshow(img,cmap = 'gray')","5bb64a86":"img = np.array([[1,0,1],\n                [0,0,0],\n                [1,0,1]])","c2eb1f8e":"plt.imshow(img,cmap = 'gray')","2a77771a":"img = np.array([[1,0,1],\n                [0,1,0],\n                [1,0,1]])","0d9bb8dd":"plt.imshow(img,cmap = 'gray')","5f4e4b00":"img.shape\n# note that the shape of img is (3,3). ie it has 2 dimensions.","bb623225":" # we will create an array again, this time, there's a small difference\n    \nnp.random.seed(0) # setting the seed to get same random values \ntemp = np.random.rand(3,3,3) # creates an array having shape of (3,3,3) containing values from 0 to 1\nimg = np.where(temp>0.5,1,0) # for simplicity we will convert each value to 0 or 1\nimg = img*255 # multiplying by 255, to get a range of 0 to 255","e4ceaf5b":"# lets print the img\nimg","f4e63e58":"# what image does img contains....\nplt.imshow(img)","145257d5":"img.shape","b2bfbc4e":"img[0][0]","6adb648f":"img[0][1]","c7732479":"def separate_channels(img):\n  shape = img.shape\n\n  red = np.zeros(shape)\n  red[:,:,0] = img[:,:,0]\n  red = red.astype('int')\n\n  green = np.zeros(shape)\n  green[:,:,1] = img[:,:,1]\n  green = green.astype('int')\n\n  blue = np.zeros(shape)\n  blue[:,:,2] = img[:,:,2]\n  blue = blue.astype('int')\n  \n  plt.figure(figsize = (24,6))\n\n  plt.subplot(1,3,1)\n  plt.imshow(red)\n  plt.title('Red Channel')\n\n  plt.subplot(1,3,2)\n  plt.imshow(green)\n  plt.title('Green Channel')\n\n  plt.subplot(1,3,3)\n  plt.imshow(blue)\n  plt.title('Blue Channel')","4899e018":"separate_channels(img)","e2c8514c":"plt.figure(figsize = (10,6))\nplt.imshow(img)","ff29a641":"img = np.random.rand(20,20,3)\nimg = (img*255).astype(np.int)\n","24d179b6":"plt.figure(figsize = (10,6))\nplt.imshow(img)","fc44ba4a":"separate_channels(img)","e6edc993":"def increase_channel_effect(img,channel,value,return_image = False,increase = True):\n  temp = np.copy(img)\n  channel_values = {'red':0,'green':1,'blue':2}\n  current_channel = channel_values[channel]\n\n  img_channel = temp[:,:,current_channel]\n  \n  if increase: \n    img_channel += (img_channel*value).astype('int')\n  else:\n    img_channel -= (img_channel*value).astype('int')\n\n  temp[:,:,current_channel] = img_channel\n\n  if return_image:\n    return temp\n  else:\n    plt.imshow(temp) ","87963641":"# lets increase the blue content in the image by 70%\nincrease_channel_effect(img,'blue',0.7)","23378783":"# increasing red contect in the image by 90%\nincrease_channel_effect(img,'red',0.9)","38af0b4a":"img = plt.imread('..\/input\/kids-image\/kids.jpeg')","963c95d4":"type(img)","e78e4d0c":"def show_image(image):\n  plt.figure(figsize = (12,8))\n  plt.xticks([])\n  plt.yticks([])\n  plt.imshow(image)","beca0e9b":"show_image(img)","60e425f6":"# increase red channel by 80%\nimg = img.astype('int')\nreddish = increase_channel_effect(img,'red',0.8,return_image=True)\nshow_image(reddish)","ab907fd3":"# increase blue channel by 80%\n\nbluish = increase_channel_effect(img,'blue',0.8,return_image=True)\nshow_image(bluish)","0a43bb8b":"# increase green channel by 80%\ngreenish = increase_channel_effect(img,'green',0.8,return_image=True)\nshow_image(greenish)","f16dcd69":"show_image(img)","a7858c1f":"# decreasing blue channel by 60%\nless_bluish = increase_channel_effect(img,'blue',0.6,return_image=True,increase\n                                       = False)\nshow_image(less_bluish)","b6a10bac":"# decreasing red channel by 60%\nless_reddish = increase_channel_effect(img,'red',0.6,return_image=True,increase\n                                       = False)\nshow_image(less_reddish)","2a4a135c":"# decreasing green channel by 60%\nless_greenish = increase_channel_effect(img,'green',0.6,return_image=True,increase\n                                       = False)\nshow_image(less_greenish)","b8ccd12c":"Before talking about how we might have got this image, its important to note on thing. Unlike in grayscale images, the shape of img is (3,3,3)..","f8bbbf1e":"We can conclude this from the plots above, for each pixel, all the three channels are firing, its just the degree that varies, for some pixels, red is more visible then other two, for some pixels the value of green is more then the other two","c462dfcc":"## In this notebook, we will understand the concepts of pixel in an interactive way.\n- How do we deal with images in python.\n- Greyscale image \n- Colored image\n- Different channels in a colored image\n- Using these basic concepts for real world application.\n\n### All of these will be done using numpy","fabcf556":"## Colored images","6200cedb":"# PLaying around with pixels","16b70755":"# I hope you enjoyed the notebook. Feedbacks and improvements are highly welcome","336809c0":"Having known the concept of how channels combine to give us the final image, lets see how we can use these channels to modify the original image. ","caf698b8":"- Basically, when we see an image, we see colors, humans, grass, or even emotions. But for a computer, image is always some numbers stacked together. These numbers can be considered as pixels.","cc2083bc":"According to wikipedia - In digital imaging, a pixel is a smallest addressable element in a raster image, or the smallest addressable element in an all points addressable display device; so it is the smallest controllable element of a picture represented on the screen.","32b85246":"![](https:\/\/uidesign.gbtcdn.com\/gb_blog\/2821\/What-are-pixels.jpg)","a0bb1bae":"## Although in real world, things are not really that smooth, it isn't as simple as whether a channel fires or not. Infact each channel has a value between 0 and 255. \nWe can now have a wide range of color combinations. ","953b8ec2":"Just see how reducing the green content makes the red and blue to show up more","34d056ce":"Lets define a function separate_channels which takes input an image, and separates the values of red,green and blue channel and plots them.","30b67393":"In the above section, we saw how are basic grayscale images stored in arrays, and what does the value pixel means. \n\nNow, lets extend this concept and see how we deal with colored images","7bb40ad6":"## Understanding channels in detail.","3efb57db":"## Playing around with channels","b91e252c":"Namaste","e183df88":"### Now, lets try some other combinations","45a964be":"- increase_channel_effect(img,'red',0.8) - will increase the value of red content in the image by 80%\n- increase_channel_effect(img, 'red', 0.4, increase = False) - will decrease the red contect in the image by 40%","f5be3a7c":"We can see that there is an extra dimension.\n\n### What does this extra dimension represent?\n\nIn gray scale images, we visualized it as a 3*3 array, where each cell contains values from 0 to 1. 0 being black and i being white. \n\nHowever, in this case, each cell now has 3 values instead of 1. (see the cell below)","f870d8e1":"To understand what's going on, we will make use of the following anology. \n- For each channel, a pixel either fires or not\n    - So, in the red channel of this image, we can see that the first cell fires, the cell in the second row and first col does't fire and the complete last column does not fire\n- For each pixel in the image, just see which channel are firing, the resulting pixel color would be a combination of those whose values are firing.\n    - For the first upper left pixel, all the three channels are firing, so, the resulting color would be a combination of all the three colors. (red + blue + green = white)\n    - For the pixel in first col and second row, red doesn't fire, green fires and so does blue, the resultin g pixel would be (green + blue) = cyan...(i had to google it)\n    - Similarly, the lower right pixel, red and blue are not firing, only green is, so the final pixel is green","e31dac38":"This represents the three channels (reg,green,blue). So, each pixel can be visualized containing 3 values, its red content, its green content, and its blue content.\n\n- so, a pixel having value [255,0,0] would be -> red\n- [0,255,0] would be green\n- [0,0,255] would be blue\n- [255,255,0] would be combination of red and green..(guess the color)....drumrolls....YELLOW\n- [255,0,255] would be combination of read and blue, which is purple","01122d95":"Although, we can see the blue value and read value increasing in the first and second image respectively, lets see how this works on a real image, not just random collection of pixels","3c80117b":"We will define a function, which takes input as the image, the channel, value, return image, increase","5259ee20":"## Using Real image","cd5537a3":"From the above image, we can visualize that the above image consists of 3*3 squares, the blocks having value of 1 are white in color, while blocs having value 0 are black in color. \n\nAnd this gives us some idea about how numpy arrays are used to store images."}}