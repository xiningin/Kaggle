{"cell_type":{"9eeb463d":"code","8a2d453f":"code","4ee0889b":"code","772270c9":"code","7e68561f":"code","c08e2986":"code","1434e146":"code","0cb02816":"code","3624a5a9":"code","0da3a2d5":"code","1be7f3ae":"code","14a0e5a6":"code","7cf837ae":"code","24779ada":"code","3c82c95a":"code","52cc40da":"code","93dbc51b":"code","ed9faa99":"code","89d529b0":"code","b79a7179":"code","a74d7040":"code","800e8a3b":"code","c85a1c1f":"code","fcc676d0":"code","badb95d6":"code","97b70b95":"code","72bcded1":"code","0d4d5fe9":"code","d8f177cb":"code","39e9786d":"code","b0e90dc1":"code","bc221d4f":"code","36e8f231":"code","c108252d":"code","8ca948fd":"code","93d084b2":"code","05e3b2ae":"code","deab52c0":"code","8aff10e7":"code","64cf7cc5":"code","120583a7":"code","40bb3704":"code","d7d888d5":"code","bac733ba":"code","10ec702f":"code","63585843":"code","e4697394":"markdown","626649bb":"markdown","7b810f8e":"markdown","d68f4913":"markdown","fa5d4773":"markdown","bc2f184a":"markdown","7ccb0cd1":"markdown"},"source":{"9eeb463d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8a2d453f":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","4ee0889b":"print (\"Train data shape:\", train.shape)\nprint (\"Test data shape:\", test.shape)","772270c9":"train.head()","7e68561f":"import matplotlib.pyplot as plt\nplt.style.use(style='ggplot')\nplt.rcParams['figure.figsize'] = (10, 6)","c08e2986":"train.SalePrice.describe()","1434e146":"print (\"Skew is:\", train.SalePrice.skew())\nplt.hist(train.SalePrice, color='blue')\nplt.show()","0cb02816":"target = np.log(train.SalePrice)\nprint (\"Skew is:\", target.skew())\nplt.hist(target, color='blue')\nplt.show()","3624a5a9":"numeric_features = train.select_dtypes(include=[np.number])\nnumeric_features.dtypes","0da3a2d5":"corr = numeric_features.corr()\nprint (corr['SalePrice'].sort_values(ascending=False)[:5], '\\n')\nprint (corr['SalePrice'].sort_values(ascending=False)[-5:])","1be7f3ae":"train.OverallQual.unique()","14a0e5a6":"quality_pivot = train.pivot_table(index='OverallQual',\n                  values='SalePrice', aggfunc=np.median)","7cf837ae":"quality_pivot","24779ada":"quality_pivot.plot(kind='bar', color='blue')\nplt.xlabel('Overall Quality')\nplt.ylabel('Median Sale Price')\nplt.xticks(rotation=0)\nplt.show()","3c82c95a":"plt.scatter(x=train['GrLivArea'], y=target)\nplt.ylabel('Sale Price')\nplt.xlabel('Above grade (ground) living area square feet')\nplt.show()","52cc40da":"plt.scatter(x=train['GarageArea'], y=target)\nplt.ylabel('Sale Price')\nplt.xlabel('Garage Area')\nplt.show()","93dbc51b":"train = train[train['GarageArea'] < 1200]","ed9faa99":"plt.scatter(x=train['GarageArea'], y=np.log(train.SalePrice))\nplt.xlim(-200,1600) # This forces the same scale as before\nplt.ylabel('Sale Price')\nplt.xlabel('Garage Area')\nplt.show()","89d529b0":"nulls = pd.DataFrame(train.isnull().sum().sort_values(ascending=False)[:25])\nnulls.columns = ['Null Count']\nnulls.index.name = 'Feature'\nnulls","b79a7179":"print (\"Unique values are:\", train.MiscFeature.unique())","a74d7040":"categoricals = train.select_dtypes(exclude=[np.number])\ncategoricals.describe()","800e8a3b":"print (\"Original: \\n\")\nprint (train.Street.value_counts(), \"\\n\")","c85a1c1f":"train['enc_street'] = pd.get_dummies(train.Street, drop_first=True)\ntest['enc_street'] = pd.get_dummies(train.Street, drop_first=True)","fcc676d0":"print ('Encoded: \\n')\nprint (train.enc_street.value_counts())","badb95d6":"condition_pivot = train.pivot_table(index='SaleCondition', values='SalePrice', aggfunc=np.median)\ncondition_pivot.plot(kind='bar', color='blue')\nplt.xlabel('Sale Condition')\nplt.ylabel('Median Sale Price')\nplt.xticks(rotation=0)\nplt.show()","97b70b95":"def encode(x):\n    return 1 if x == 'Partial' else 0","72bcded1":"train['enc_condition'] = train.SaleCondition.apply(encode)\ntest['enc_condition'] = test.SaleCondition.apply(encode)","0d4d5fe9":"condition_pivot = train.pivot_table(index='enc_condition', values='SalePrice', aggfunc=np.median)\ncondition_pivot.plot(kind='bar', color='blue')\nplt.xlabel('Encoded Sale Condition')\nplt.ylabel('Median Sale Price')\nplt.xticks(rotation=0)\nplt.show()","d8f177cb":"data = train.select_dtypes(include=[np.number]).interpolate().dropna()","39e9786d":"sum(data.isnull().sum() != 0)","b0e90dc1":"X = data.drop(['SalePrice', 'Id'], axis=1)\ny = np.log(train.SalePrice)","bc221d4f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=.33)","36e8f231":"from sklearn import linear_model\nlr = linear_model.LinearRegression()","c108252d":"model = lr.fit(X_train, y_train)","8ca948fd":"print (\"R^2 is: \\n\", model.score(X_test, y_test))","93d084b2":"predictions = model.predict(X_test)","05e3b2ae":"from sklearn.metrics import mean_squared_error\nprint ('RMSE is: \\n', mean_squared_error(y_test, predictions))","deab52c0":"actual_values = y_test\nplt.scatter(predictions, actual_values, alpha=.7,\n            color='b') #alpha helps to show overlapping data\nplt.xlabel('Predicted Price')\nplt.ylabel('Actual Price')\nplt.title('Linear Regression Model')\nplt.show()","8aff10e7":"for i in range (-2, 3):\n    alpha = 10**i\n    rm = linear_model.Ridge(alpha=alpha)\n    ridge_model = rm.fit(X_train, y_train)\n    preds_ridge = ridge_model.predict(X_test)\n\n    plt.scatter(preds_ridge, actual_values, alpha=.75, color='b')\n    plt.xlabel('Predicted Price')\n    plt.ylabel('Actual Price')\n    plt.title('Ridge Regularization with alpha = {}'.format(alpha))\n    overlay = 'R^2 is: {}\\nRMSE is: {}'.format(\n                    ridge_model.score(X_test, y_test),\n                    mean_squared_error(y_test, preds_ridge))\n    plt.annotate(s=overlay,xy=(12.1,10.6),size='x-large')\n    plt.show()","64cf7cc5":"submission = pd.DataFrame()\nsubmission['Id'] = test.Id","120583a7":"feats = test.select_dtypes(\n        include=[np.number]).drop(['Id'], axis=1).interpolate()","40bb3704":"predictions = model.predict(feats)","d7d888d5":"final_predictions = np.exp(predictions)","bac733ba":"print (\"Original predictions are: \\n\", predictions[:5], \"\\n\")\nprint (\"Final predictions are: \\n\", final_predictions[:5])","10ec702f":"submission['SalePrice'] = final_predictions\nsubmission.head()","63585843":"submission.to_csv('submission1.csv', index=False)","e4697394":"# Exploratory Data Analysis","626649bb":"## Using Ridge Regression","7b810f8e":"## Handling NULL Values","d68f4913":"## Transform Features","fa5d4773":"# Submission","bc2f184a":"# Evaluating the performance","7ccb0cd1":"# Building Linear Model"}}