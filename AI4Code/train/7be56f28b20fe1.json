{"cell_type":{"bfa4a6b5":"code","68d75c8d":"code","5eef2565":"code","d0696fab":"code","c9468c62":"code","c04fb47f":"code","56c1d6be":"code","27ad193e":"code","787b695e":"code","b45d0f2b":"code","e73c6598":"code","ae6f0749":"code","9c31b285":"code","dec6ff72":"code","b2ed1421":"code","7b0487b7":"code","4069b59d":"code","60e1f14a":"code","dcde4f4b":"code","11bb0a30":"code","e4790bae":"code","cd6ade62":"code","e47b2a01":"code","3d413923":"code","39e62fe8":"code","7582a9fb":"code","9ca5e5c4":"code","ac80ae52":"code","42aeee94":"code","3efa41e1":"code","e147b870":"code","f2f2abc4":"code","06027cff":"code","c3a9a582":"code","6877a72e":"code","598cffc7":"code","b84b75f8":"code","00c174bd":"code","141f3ccf":"code","05b7cd58":"code","04972dff":"code","8273295a":"code","069cf577":"code","35abdc2c":"code","b5daeb3c":"code","73582491":"code","ff082222":"code","7020c382":"code","d511cbbc":"code","953dd54d":"code","0921aaf5":"code","30d9e74c":"code","4e8a803f":"code","0600a494":"code","782c1ae5":"code","00176b02":"code","e3e5f19c":"code","933876a8":"code","495fb578":"code","6a5d913c":"code","ec66c8f5":"code","4b6ef83e":"code","ab92f1c4":"code","634df7a0":"code","091ab52f":"code","cf870e0a":"code","880459bd":"code","407ffa23":"code","801d4624":"code","1904cb6b":"code","f87bd9f7":"code","5421d492":"markdown","d8c71741":"markdown","95fc204a":"markdown","356c9157":"markdown","4fccb71c":"markdown","5899d28f":"markdown","8de258ad":"markdown","638891d0":"markdown","b74f48c5":"markdown","42e033c5":"markdown","ce268ab3":"markdown","0191c347":"markdown","b51265d6":"markdown","d8c88e18":"markdown","c319391d":"markdown","ba6a6952":"markdown","dcabb98b":"markdown","4b3965b4":"markdown","ee9236be":"markdown","589f6a16":"markdown","517d0192":"markdown","a41af850":"markdown","353b4ab7":"markdown","b4b0e9f2":"markdown","c3a6f84c":"markdown","d4879fb6":"markdown","d1e3f173":"markdown","ed0aba31":"markdown","eea4118c":"markdown","ae51960a":"markdown","fb1bcb26":"markdown","67a56ff0":"markdown","6fe943a4":"markdown","de213fc3":"markdown","47efa950":"markdown","8c3a9961":"markdown"},"source":{"bfa4a6b5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings \nwarnings.filterwarnings('ignore')\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_selection import chi2,SelectKBest\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor","68d75c8d":"df=pd.read_csv('..\/input\/supply-chain-analysis-and-modeling\/SCMS_Delivery_History_Dataset.csv')\n# we are making a copy of data set so that the original data set is conserved\ndf1=df.copy()","5eef2565":"pd.set_option('display.max_columns', None)\ndf.head()","d0696fab":"df.shape #33 columns and 10324 rows","c9468c62":"df.info()","c04fb47f":"#columns with float values \ndf[['Line Item Value','Pack Price','Unit Price','Weight (Kilograms)','Freight Cost (USD)']]=df[['Line Item Value','Pack Price','Unit Price','Weight (Kilograms)','Freight Cost (USD)']].apply(pd.to_numeric,errors='coerce')","56c1d6be":"# columns with datetime, altough we do not need these columns as we are not going to perform the time series analysis\ndf[['PQ First Sent to Client Date','PO Sent to Vendor Date','Scheduled Delivery Date','Delivered to Client Date','Delivery Recorded Date']]=df[['PQ First Sent to Client Date','PO Sent to Vendor Date','Scheduled Delivery Date','Delivered to Client Date','Delivery Recorded Date']].apply(pd.to_datetime,errors='coerce')","27ad193e":"df.info()","787b695e":"df.isna().sum()","b45d0f2b":"#calculating %null values in each column\n((df.isna().sum())\/10324)*100","e73c6598":"plt.figure(figsize=(20,7))\nsns.heatmap(df.isnull(),cbar=False,cmap='viridis')","ae6f0749":"numerical_columns=[]\nfor column in df.columns:\n    if (df[column].dtype=='int64') or (df[column].dtype=='float64'):\n        numerical_columns.append(column)","9c31b285":"numerical_columns","dec6ff72":"for column in numerical_columns:\n    sns.histplot(df[column])\n    plt.show()","b2ed1421":"for column in numerical_columns:\n    sns.boxplot(df[column])\n    plt.xlabel(column)\n    plt.show()","7b0487b7":"df.corr()","4069b59d":"#we can observe that the correlation of 'Weight (Kilograms)','Line Item Quantity','Pack Price' and 'Line Item Insurance (USD) \n# is strong with the target variable 'Freight Cost (USD)' ","60e1f14a":"# we say that if the no. of classes is less than 10 then the column is a categorical column\ncategorical_columns=[]\nfor column in df.columns:\n    if(len(df[column].unique())<10):\n        categorical_columns.append(column)\n    else:\n        continue","dcde4f4b":"categorical_columns","11bb0a30":"print('No. of unique categories in every column\\n')\nfor i in categorical_columns:\n    print(i,':',len(df[i].unique()),'\\n')\n    ","e4790bae":"import warnings\nwarnings.filterwarnings('ignore')\nfor i  in categorical_columns:\n        print('Feature name:',i,' \\n unique elements of this column are',df[i].unique())\n        sns.countplot(df[i])\n        plt.xlabel(i)\n        plt.ylabel('count')\n        plt.show()\n        print('\\n\\n\\n')","cd6ade62":"for column in categorical_columns:\n    g=df.groupby(column)\n    for name,df1 in g:\n        plt.bar(name,df1['Freight Cost (USD)'].mean())\n        plt.ylabel('avg.Frieght cost')\n    plt.xlabel(column)\n    plt.show()","e47b2a01":"g=df.groupby('First Line Designation')\nfor name,df1 in g:\n    if name=='No':\n        print(df1['Freight Cost (USD)'])","3d413923":"sns.pairplot(df[numerical_columns])","39e62fe8":"# AS I observed that there are some values in these two columns having zero value which is not permissible\ndf=df[(df['Weight (Kilograms)']>0) & (df['Line Item Value']>0)]","7582a9fb":"#dropping the 'First Line Designation' as discussed during data exploration\ndf.drop('First Line Designation',axis=1,inplace=True)","9ca5e5c4":"#dropping the columns with all the features as null\ndf = df.dropna(how='all')","ac80ae52":"# let's first drop the categorical variables with too many classes\ndropped_categorical=[]\nfor i in df.columns:\n    if(len(df[i].unique())>10 and df[i].dtype=='object'):\n        dropped_categorical.append(i)\n        df.drop(i,axis=1,inplace=True)","42aeee94":"print('categorical features dropped having too many classes:',dropped_categorical)","3efa41e1":"# dropping 'ID' column as it is of no use\ndf.drop('ID',axis=1,inplace=True)","e147b870":"df.info()","f2f2abc4":"# we observe that there is almost 96 % correlation between 'Line Item Insurance (USD)' and 'Line Item Value'  and the former value has many missing values\n# thus dropping 'Line Item Insurance (USD)' feature\ndf.drop('Line Item Insurance (USD)',axis=1,inplace=True)","06027cff":"# we cannot hancle the missing values in the targer columns itself. thus dropping the columns having na values in this column\ndf = df.dropna(subset=['Freight Cost (USD)'])","c3a9a582":"df.info()","6877a72e":"df.drop(['PQ First Sent to Client Date','PO Sent to Vendor Date','Scheduled Delivery Date','Delivered to Client Date', 'Delivery Recorded Date'],axis=1,inplace=True)","598cffc7":"df.info()","b84b75f8":"df['Shipment Mode']=df['Shipment Mode'].fillna('Air')","00c174bd":"df.info()","141f3ccf":"df['Weight (Kilograms)'].fillna(df['Weight (Kilograms)'].median(),inplace=True)","05b7cd58":"df.corr()","04972dff":"#removing 'Unit of Measure (Per Pack) , Pack Price and Unit Price' column as these have nearly zero correaltion with target column and using  domain knowledge , i can say that these are not relevant features for the prediction\ndf.drop(['Unit of Measure (Per Pack)' , 'Pack Price','Unit Price'],axis=1,inplace=True)","8273295a":"# distinguishing numerical variables to make boxplots\nnumerical_var=[column for column in df.columns if df[column].dtype=='float64' or df[column].dtype=='int64']","069cf577":"%matplotlib inline\nfor index,column in enumerate(df[numerical_var].columns):\n    fig=plt.figure(figsize=(10,40))\n    plt.subplot(7,1,index+1)\n    sns.boxenplot(df[column])\n    plt.xlabel(column)","35abdc2c":"# deleting outliers using the Inter Quartile Range\nfor column in numerical_var:\n    Q1=df[column].quantile(0.25)\n    Q3=df[column].quantile(0.75)\n    iqr_value=Q3-Q1\n    lower_bound=Q1-(1.5*iqr_value)\n    upper_bound=Q3+(1.5*iqr_value)\n    df=df[(df[column]>lower_bound) & (df[column]<upper_bound)]","b5daeb3c":"df.info()","73582491":"%matplotlib inline\nfor index,column in enumerate(df[numerical_var].columns):\n    fig=plt.figure(figsize=(10,40))\n    plt.subplot(7,1,index+1)\n    sns.boxenplot(df[column])\n    plt.xlabel(column)","ff082222":"sns.pairplot(df)","7020c382":"for column in numerical_var:\n    sns.histplot(df[column])\n    plt.show()","d511cbbc":"## Hmm ! Log normal distribution\nfor column in numerical_var:\n    df[column]=np.log10(df[column])\n","953dd54d":"for column in numerical_var:\n    sns.histplot(df[column])\n    plt.show()","0921aaf5":"sns.pairplot(df)","30d9e74c":"sns.heatmap(df.corr(),annot=True)\nplt.show()","4e8a803f":"df.info()","0600a494":"df.columns","782c1ae5":"for column  in df.columns:\n    if(df[column].dtype =='object'):\n        le=LabelEncoder()\n        df[column]=le.fit_transform(df[column])","00176b02":"chi2_features=SelectKBest(chi2,k=3)","e3e5f19c":"Xkbestfeatures=chi2_features.fit_transform(df[[ 'Fulfill Via', 'Vendor INCO Term', 'Shipment Mode','Product Group', 'Sub Classification']],df[['Freight Cost (USD)']].astype('int64'))","933876a8":"Xkbestfeatures","495fb578":"X_train, X_test, y_train, y_test=train_test_split(df.drop(['Freight Cost (USD)','Managed By','Product Group','Fulfill Via'],axis=1),df[['Freight Cost (USD)']],test_size=0.2)","6a5d913c":"X_train","ec66c8f5":"params=[{'n_neighbors':list(range(1,50))}]","4b6ef83e":"knn=KNeighborsRegressor()\ncv_knn=GridSearchCV(estimator=knn,param_grid=params)\n","ab92f1c4":"cv_knn.fit(X_train,y_train)","634df7a0":"cv_knn.best_params_","091ab52f":"cv_knn.score(X_test,y_test)","cf870e0a":"params=[{'n_estimators':[10,20,30,40,50,60,70,80,90,100],'max_depth':list(range(0,20))}]","880459bd":"rf=RandomForestRegressor()","407ffa23":"rf_cv=GridSearchCV(estimator=rf,param_grid=params)","801d4624":"rf_cv.fit(X_train,y_train)","1904cb6b":"rf_cv.score(X_test,y_test)","f87bd9f7":"rf_cv.best_params_","5421d492":"# Modifications and suggetions are welcome","d8c71741":"#### OHH!! Too many outliers, will get back to them during the cleaning phase","95fc204a":"### Pretty much unbalanced data","356c9157":"### we can see that all are Nan values, So there is no meaning of having this column\n### we will  delete it in cleaning phase","4fccb71c":"### Outliers check","5899d28f":"#### we dont need the columns having datetime datatype as we are not perform time series forecasting here","8de258ad":"# I could not get more than 0.6 score on this data set\n# But I'am satisfied as this is a dataset from real scenerio","638891d0":"# Feature selection\n# we are going to use the chi2 test for feature selection","b74f48c5":"# Label Encoding","42e033c5":"### Hmm! looks like there are many log normal distributions.","ce268ab3":"# importing data","0191c347":"### Vizualising null values","b51265d6":"### Now, all the columns are in their respective data type and we are good to go.","d8c88e18":"#### for shipment mode column , we are going to fill it missing places with most common mode of transportation","c319391d":"### The top categorical features are Vendor INCO Term,Shipment Mode,Sub Classification as the values of same are present above","ba6a6952":"## changed alot","dcabb98b":"#### Replacing the null values in column 'Weight (Kilograms)' with the median value","4b3965b4":"# some info about the data","ee9236be":"### Yellow horizontal lines represents the null values.\n### Shipment Mode, PQ First Sent to Client Date, PO Sent to Vendor Date , Dosage, Weight (Kilograms), Freight Cost (USD) and Line Item Insurance (USD) have many null values. We will deal with them while performing data cleaning","589f6a16":"# Random forest regressor","517d0192":"# we observe that the correlations improved after data cleaning and distribution change","a41af850":"### lets's look at the avg. frieght cost for each category of categorical columns","353b4ab7":"# Data Cleaning","b4b0e9f2":"points to be noted:\n 1. Almost all the deliveries are managed by PMO-US, thus we'll be removing this column\n 2.","c3a6f84c":"# Understanding numerical features","d4879fb6":"# Converting to respective data types of columns","d1e3f173":"#  Don't forget to give an upvote if you enjoyed  :)","ed0aba31":"# Treatment of outliers","eea4118c":"### Calculating percentage of null values in each column","ae51960a":"# Train test split","fb1bcb26":"###  handling missing and Na values ","67a56ff0":"# K nearest neighbour regressor","6fe943a4":"\n### Oh! why the last bar graph giving only one bar?\n### that means the frieght cost is not defined where 'First Line Designation' is categorised as 'No', let's see","de213fc3":"### Null and missing values check","47efa950":"## All became nearly normally distributed :)","8c3a9961":"# Let's move to  the categorical variables"}}