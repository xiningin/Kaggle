{"cell_type":{"8349a5b1":"code","6c7e45b1":"code","407e0e49":"code","5f5d7785":"code","2c758948":"code","e3426043":"code","126d57fe":"code","c50eb992":"code","9f04dbbc":"code","4ef6a879":"code","fb2453e9":"code","b5244b5c":"code","0201452c":"code","2fb4b0a7":"code","fbc75eaa":"code","984653ec":"code","72837efb":"code","6e1a746e":"code","965a1f06":"code","46d57e39":"code","11596aa5":"code","c8fd6db4":"code","640e1541":"code","3c8265b3":"markdown","ace64482":"markdown","6bff23b1":"markdown","0ffd5f4c":"markdown","dcf522f9":"markdown","56340e03":"markdown","c8965d38":"markdown","286f3bd3":"markdown","2a5d52e7":"markdown","59b3d7b7":"markdown","b731b289":"markdown","25cbf09d":"markdown","0b3106e7":"markdown"},"source":{"8349a5b1":"#Import important libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport statistics \nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.model_selection import train_test_split,cross_val_score,KFold\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\n\nsns.set_style('whitegrid')\npd.set_option('display.max_columns',None)","6c7e45b1":"# Read the data set\ntrain_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')\nprint(train_data.shape,test_data.shape)","407e0e49":"# View the data set\ntrain_data.head(2)","5f5d7785":"# check for null records in train data\ntrain_data.isnull().sum()","2c758948":"# check for null records in test data\ntest_data.isnull().sum()","e3426043":"# see the dist plot for Age variable\nf,ax=plt.subplots(1,2,figsize=(7,3))\nsns.distplot(train_data.Age,ax=ax[0])\nax[0].set_title('Age Distribution for Train Data')\n\nsns.distplot(test_data.Age,ax=ax[1])\nax[1].set_title('Age Distribution for Test Data')","126d57fe":"# Imputing train and test data\ntrain_data['Age'].fillna(np.nanmedian(train_data.Age),inplace=True,axis=0)\ntest_data['Age'].fillna(np.nanmedian(test_data.Age),inplace=True,axis=0)","c50eb992":"# Distribution of Embarked column\nsns.countplot(x='Embarked',hue='Survived',data=train_data)","9f04dbbc":"# Imputing train data for Embarked and test data for Fare\ntrain_data['Embarked'].fillna(statistics.mode(train_data.Embarked),inplace=True,axis=0)\ntest_data['Fare'].fillna(np.nanmedian(test_data.Fare),inplace=True,axis=0)","4ef6a879":"# One hot encoding for both train and test data\n\nOHE_cols = ['Sex','Embarked']\ntrain_data = pd.get_dummies(data=train_data,columns=OHE_cols,drop_first=True )\ntest_data = pd.get_dummies(data=test_data,columns=OHE_cols,drop_first=True )","fb2453e9":"# Creating new column\ntrain_data['Travel_alone'] = train_data['SibSp'] + train_data['Parch']\ntest_data['Travel_alone'] = test_data['SibSp'] + test_data['Parch']\n\ntrain_data['Travel_Alone'] = np.where(train_data.Travel_alone >0 ,0,1)\ntest_data['Travel_Alone'] = np.where(test_data.Travel_alone >0 ,0,1)","b5244b5c":"drop_colms = ['PassengerId','Name','Ticket','Cabin','SibSp','Parch']\n\ntest_data.drop(columns=drop_colms,inplace=True,axis=1)\ntrain_data.drop(columns=drop_colms,inplace=True,axis=1)","0201452c":"train_data.head(1)","2fb4b0a7":"test_data.head(1)","fbc75eaa":"# Dividing data to x and y variables\nX = train_data.drop('Survived',axis =1).values\ny = train_data['Survived']","984653ec":"# train and test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, \n                                                random_state=101)","72837efb":"# using k-fold cross validation to check the accuracy of the model\nk_fold = KFold(n_splits=5, shuffle=True, random_state=0)\nlr_clf = LogisticRegression()\nscoring = 'accuracy'\nresults = cross_val_score(lr_clf, x_train, y_train, cv=k_fold, n_jobs=1, scoring=scoring)\nresults","6e1a746e":"solvers = ['newton-cg', 'lbfgs', 'liblinear']\npenalty = ['l2']\nc_values = [100, 10, 1.0, 0.1, 0.01]\n\n# define grid search\ngrid = dict(solver=solvers,penalty=penalty,C=c_values)\ngrid_search = GridSearchCV(estimator=lr_clf, param_grid=grid, n_jobs=-1, cv=k_fold, scoring='accuracy',error_score=0)\ngrid_result = grid_search.fit(x_train, y_train)","965a1f06":"# summarize results\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","46d57e39":"# Build the model using best params\n\nlr_clf_final = LogisticRegression(C= 0.1, penalty='l2', solver='newton-cg')\nlr_clf_final.fit(x_train, y_train)","11596aa5":"# predict the y values and see the accuracy score\n\npred_final = lr_clf_final.predict(x_test)\naccuracy_score(y_test,pred_final)","c8fd6db4":"test_pred = lr_clf_final.predict(test_data)","640e1541":"test_data1 = pd.read_csv('..\/input\/titanic\/test.csv')\nsubmission_df = pd.DataFrame({'PassengerId' : test_data1[\"PassengerId\"],'Survived' : test_pred})\nsubmission = submission_df.to_csv('submission.csv',index=False)","3c8265b3":"#### Age","ace64482":"### One Hot Encoding","6bff23b1":"         Age is right skewed, hence we will impute with the median","0ffd5f4c":"### Run the model on test data","dcf522f9":"### Dropping Unwanted Columns","56340e03":"### HyperParameter Tuning","c8965d38":"### Model Building using K-fold Cross Validation","286f3bd3":"#### Embarked","2a5d52e7":"### Splitting the data into trsining and testing","59b3d7b7":"      Imputing with the most frequent value = s","b731b289":"### Missing Value Imputation","25cbf09d":"### Derived Column Creation","0b3106e7":"    Both SibSp and Parch relate to traveling with family.\n    For simplicity's and to avoid multicollinearity,\n    we will combine the effect of these variables into one categorical predictor: \n    whether or not that individual was traveling alone."}}