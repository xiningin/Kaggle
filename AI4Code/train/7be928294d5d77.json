{"cell_type":{"eb11890b":"code","2d28857e":"code","e625c5fa":"code","3fe0d587":"code","beacce66":"code","03f72dd4":"code","d934090a":"code","67e44e0c":"code","7f41c01b":"code","c0c3d49c":"code","520e64b1":"code","f2647c59":"code","24b9b975":"code","c15ef4d1":"code","e3abd604":"code","f8c1aded":"code","a8ee6b0f":"code","a1fd6815":"code","0bc0788c":"markdown","48904af0":"markdown","c58bebdc":"markdown","dca42ab6":"markdown","f82e49a4":"markdown","d8027aad":"markdown","3cf54b67":"markdown","9102f372":"markdown","22f5eb3f":"markdown","eee3d812":"markdown","ade8d521":"markdown","193cc6b0":"markdown","ee2f5ed0":"markdown","b89541d2":"markdown","60cdcea2":"markdown","2e47df69":"markdown","9d5346b7":"markdown","31c491c5":"markdown","8231d3e6":"markdown"},"source":{"eb11890b":"import numpy as np\nimport pandas as pd\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings('ignore')","2d28857e":"df = pd.read_excel('..\/input\/covid19\/Kaggle_Sirio_Libanes_ICU_Prediction.xlsx')\ndf.sample(10)","e625c5fa":"print('{:,} rows and {:,} cols'.format(*df.shape))\nprint('{:,} unique patients'.format(df.PATIENT_VISIT_IDENTIFIER.nunique()))","3fe0d587":"# source: https:\/\/www.kaggle.com\/leocanela\/getting-to-know-the-data-eda\n\n## Separating features columns like the starter notebook\ncomorb_lst = [i for i in df.columns if \"DISEASE\" in i]\ncomorb_lst.extend([\"HTN\", \"IMMUNOCOMPROMISED\", \"OTHER\"])\n\ndemo_lst = [i for i in df.columns if \"AGE_\" in i]\ndemo_lst.append(\"GENDER\")\n\nvitalSigns_lst = df.iloc[:,193:-2].columns.tolist()\n\nlab_lst = df.iloc[:,13:193].columns.tolist()","beacce66":"# convert age percentile to ordinal\npcts = sorted(df.AGE_PERCENTIL.unique())\nage_percentile_encoding = {k: i for i, k in enumerate(pcts)}\ndf.AGE_PERCENTIL = df.AGE_PERCENTIL.replace(age_percentile_encoding)","03f72dd4":"df = df\\\n    .sort_values(by=['PATIENT_VISIT_IDENTIFIER', 'WINDOW'])\\\n    .groupby('PATIENT_VISIT_IDENTIFIER', as_index=False)\\\n    .fillna(method='ffill')\\\n    .fillna(method='bfill')","d934090a":"# ICU per window\npd.crosstab(df.WINDOW, df.ICU)","67e44e0c":"# discar unreliable data (admitted 0-2)\nmask_unreliable = (df.WINDOW == '0-2') & (df.ICU == 1)\ntraining_data = df.loc[~mask_unreliable]\n\n# ICU admitted after window 0-2 or not\nicu_above_2 = training_data.groupby('PATIENT_VISIT_IDENTIFIER')\\\n    .agg({'ICU': max})\\\n    .reset_index()\\\n    .rename(columns={'ICU': 'ICU_NEW'})\n    \n# merge back to original df\ntraining_data = training_data.merge(icu_above_2, on=['PATIENT_VISIT_IDENTIFIER'], how='left')","7f41c01b":"# valid cases per window\npd.crosstab(training_data.WINDOW, training_data.ICU)","c0c3d49c":"# keep only features from 0-2 hour window\nmask_02 = training_data.WINDOW == '0-2'\ntraining_data = training_data.loc[mask_02]\n\n# valid cases for training\npd.crosstab(training_data.WINDOW, training_data.ICU_NEW)","520e64b1":"training_data.shape","f2647c59":"# holdout\nfrom sklearn import model_selection, metrics\n\ndf_train, df_holdout = model_selection.train_test_split(training_data, \n                                                        test_size=0.1, \n                                                        stratify=training_data.ICU_NEW,\n                                                        random_state=2020)","24b9b975":"def print_results(model, train, test, th=0.5):\n    # train test X and y\n    Xtrain, ytrain = train\n    Xtest, ytest = test\n    # results df\n    results = pd.DataFrame(columns=['ROC-AUC', 'Precision', 'Recall'], index=['Train', 'Test'])\n    # metrics\n    results.loc['Train', 'ROC-AUC'] = metrics.roc_auc_score(ytrain, model.predict(Xtrain))\n    results.loc['Test', 'ROC-AUC'] = metrics.roc_auc_score(ytest, model.predict(Xtest))\n    # precision\n    results.loc['Train', 'Precision'] = metrics.precision_score(ytrain, model.predict(Xtrain) > th)\n    results.loc['Test', 'Precision'] = metrics.precision_score(ytest, model.predict(Xtest) > th)\n    # recall\n    results.loc['Train', 'Recall'] = metrics.recall_score(ytrain, model.predict(Xtrain) > th)\n    results.loc['Test', 'Recall'] = metrics.recall_score(ytest, model.predict(Xtest) > th)\n    # output\n    print(results)","c15ef4d1":"# fit logreg\nimport statsmodels.api as sm\n\n# features and target\nage_list = ['AGE_PERCENTIL', 'GENDER']\nX_train = df_train[age_list]\nX_test = df_holdout[age_list]\ny_train = df_train['ICU_NEW']\ny_test = df_holdout['ICU_NEW']\n\n# model\nlogit1 = sm.GLM(y_train, sm.add_constant(X_train), \n                family=sm.families.Binomial()).fit()\n\n# results\nprint_results(logit1, (sm.add_constant(X_train), y_train), \n                      (sm.add_constant(X_test), y_test))\nprint()\nprint(logit1.summary2())","e3abd604":"# to simplify, we will create a single variable - patient has comorbities or not\ndf_train['COMORB'] = df_train[comorb_lst].max(axis=1)\ndf_holdout['COMORB'] = df_holdout[comorb_lst].max(axis=1)\n\n# features and target\nX_train = df_train[age_list + ['COMORB']]\nX_test = df_holdout[age_list + ['COMORB']]\ny_train = df_train['ICU_NEW']\ny_test = df_holdout['ICU_NEW']\n\n# model\nlogit2 = sm.GLM(y_train, sm.add_constant(X_train), \n                family=sm.families.Binomial()).fit()\n\n# results\nprint_results(logit2, (sm.add_constant(X_train), y_train), \n                      (sm.add_constant(X_test), y_test))\nprint()\nprint(logit2.summary2())","f8c1aded":"# features and target\nX_train = df_train[age_list + comorb_lst]\nX_test = df_holdout[age_list + comorb_lst]\ny_train = df_train['ICU_NEW']\ny_test = df_holdout['ICU_NEW']\n\n# model\nlogit3 = sm.GLM(y_train, sm.add_constant(X_train), \n                family=sm.families.Binomial()).fit()\n\n# results\nprint_results(logit3, (sm.add_constant(X_train), y_train), \n                      (sm.add_constant(X_test), y_test))\nprint()\nprint(logit3.summary2())","a8ee6b0f":"# model with demographics and vital signs (mean only)\nvitalSigns_mean = [v for v in vitalSigns_lst if v.endswith('_MEAN')]\n\n# centered vital_signs\nvital_signs_mean_centered = list()\nfor v in vitalSigns_mean:\n    centered = v + '_CENTERED'\n    vital_signs_mean_centered.append(centered)\n    mu = df_train[v].mean()\n    df_train[centered] = df_train[v] - mu\n    df_holdout[centered] = df_holdout[v] - mu\n\n# features and target\nage_list = ['AGE_PERCENTIL', 'GENDER']\nX_train = df_train[age_list + vital_signs_mean_centered]\nX_test = df_holdout[age_list + vital_signs_mean_centered]\ny_train = df_train['ICU_NEW']\ny_test = df_holdout['ICU_NEW']\n\n# model\nlogit4 = sm.GLM(y_train, sm.add_constant(X_train), \n                 family=sm.families.Binomial()).fit()\n\n# results\nprint_results(logit4, (sm.add_constant(X_train), y_train), \n                      (sm.add_constant(X_test), y_test))\nprint()\nprint(logit4.summary2())","a1fd6815":"# new blood pressure variable\ndf_train['BLOODPRESSURE_MEAN'] = df_train['BLOODPRESSURE_DIASTOLIC_MEAN_CENTERED'] ** 2 + df_train['BLOODPRESSURE_SISTOLIC_MEAN_CENTERED'] ** 2\ndf_holdout['BLOODPRESSURE_MEAN'] = df_holdout['BLOODPRESSURE_DIASTOLIC_MEAN_CENTERED'] ** 2 + df_holdout['BLOODPRESSURE_SISTOLIC_MEAN_CENTERED'] ** 2\n\n# interactions\ndf_train['OXYGEN_RESPIRATORY_MEAN'] = df_train['RESPIRATORY_RATE_MEAN_CENTERED'] * df_train['OXYGEN_SATURATION_MEAN_CENTERED']\ndf_holdout['OXYGEN_RESPIRATORY_MEAN'] = df_holdout['RESPIRATORY_RATE_MEAN_CENTERED'] * df_holdout['OXYGEN_SATURATION_MEAN_CENTERED']\n\n# new vars\nvital_signs2 = ['HEART_RATE_MEAN_CENTERED', 'TEMPERATURE_MEAN_CENTERED', \n                'RESPIRATORY_RATE_MEAN_CENTERED', 'OXYGEN_SATURATION_MEAN_CENTERED',\n                'BLOODPRESSURE_MEAN', 'OXYGEN_RESPIRATORY_MEAN']\n\n# features and target\nage_list = ['AGE_PERCENTIL', 'GENDER']\nX_train = df_train[age_list + vital_signs2]\nX_test = df_holdout[age_list + vital_signs2]\ny_train = df_train['ICU_NEW']\ny_test = df_holdout['ICU_NEW']\n\n# model\nlogit5 = sm.GLM(y_train, sm.add_constant(X_train), \n                family=sm.families.Binomial()).fit()\n\n# results\nprint_results(logit5, (sm.add_constant(X_train), y_train), \n                      (sm.add_constant(X_test), y_test))\nprint()\nprint(logit5.summary2())","0bc0788c":"Without specialist's careful interpretation is hard to know if the signs of these estimations make sensy (medically).\nRespiratory rate, blood pressure and oxygen saturation seem to relate more to ICU risk.  \n\nRespiratory rate increase relate to an increase of ICU risk. Decrease in oxygen saturation also increases ICU risk.\nSistolic and Diastolic blood pressure are hard to interpret for a layman as myself, but I know that they are used together. Since the features are scaled and we not know the real value of each one we cannot rely on known measurements (such as 130\/80). We know that we can kind of draw a healthy (elliptical\/circular) region (see [Figure 1, Flint *et al*, 2019](https:\/\/www.eshonline.org\/esh-content\/uploads\/2019\/08\/1.-Effect-of-Systolic-and-Diastolic-Blood-Pressure-on-Cardiovascular-Outcomes.pdf)). So we will use them as a single feature defined as the sum of squares (i.e. $DiastolicPressure^2 + SistolicPressure^2$).\n\nMoreover, following [good practices from Gelman](http:\/\/vulstats.ucsd.edu\/pdf\/Gelman.ch-05.logistic-regression.pdf), we will interact the variables with large coefficients (`RESPIRATORY_RATE_MEAN` and `OXYGEN_SATURATION_MEAN`, since blood pressure variables will create a new one).\n\nHeart rate is not statistically significant, but let's see how it changes with these new modifications.","48904af0":"Hear rate continued to be not statistically significant, so we might remove it.\nOxygen saturation, temperature and bood pressure are also not stat significant, but their coefficient signs make sense - i.e. less oxygen saturation and higher temperatures increases ICU risk. Higher blood pressure (circular) proxy also increase risk, since we can interpret as the radius of the circular region the pressure is and the origin is the mean sistolic and diastolic rates - threfore, increase radius means the patient is far away from the mean (not necessarily healthy) region. The interaction between ocygen and respiratory is also stat significant, but its coefficient is hard to interpret since both varibales vary distinctively and their range might also be not coupled.\n\nThe performance metrics are 70% ROC-AUC, 82% precision and 53% recall, measure on the holdout set.","c58bebdc":"## Group of features","dca42ab6":"## Window  \nAs stated in [data description section](https:\/\/www.kaggle.com\/S%C3%ADrio-Libanes\/covid19), a model with only the \"0-2 window\" is more clincally relevant, so we will follow their suggestion.\n\nMoreover, as warned by the authors as well, we should be aware when the target variable (`ICU`) is 1, since we cannot be sure about the events' order, i.e. we are not sure if lab results were ready before the ICU admission. Therefore, if a patient was admitted at window 0-2, we would discard the data. We will consider a patient ICU adimtted if was happened at any posterior window but we will use only 0-2 window's features.","f82e49a4":"# Load data","d8027aad":"# Modelling  ","3cf54b67":"**Lab Results**  \nAs a layman, it would be nearly impossible to interpret their effects alone and there are numerous lab features.\n\nML techniques will be more suited for it and I will add them later.","9102f372":"**Demographics + mean Vital Signs**","22f5eb3f":"Not only the coefficient is not statistically significant but its magnitude is near-zero, so it does not help the model in any way. Let's try another model, but now with all flags.","eee3d812":"**Only with demographics**","ade8d521":"None of the commorbities seem to be statistically significant, but Disease grouping 4 seem to have a large coefficient. Anyway, let's move on without them for a while.","193cc6b0":"No invalid cases (`ICU = 1` and `WINDOW = '0-2'`)","ee2f5ed0":"# Preprocessing","b89541d2":"**Demographics + Comorbities**","60cdcea2":"The simplest model tell us that the risk of being admitted to the ICU increases as ages increases and it is smaller for women.  ","2e47df69":"## Missing data  \nAs suggested by [dataset's authors](https:\/\/www.kaggle.com\/S%C3%ADrio-Libanes\/covid19), patient's missing data can be filled by neighbouring windows. Therefore, we would do an iterative approach by applying a foward fill followed by backward fill.","9d5346b7":"We should end up with 385 - 32 = 353 rows (No. unique patients - admitted 0-2 window)","31c491c5":"## Logistic regression - Baseline  \nLet's try logistic regression (with statsmodels) to get a better understando of variable linear contributions.  \nFor this model, we will use a simple (random stratified) holdout test to evaluate our performance.","8231d3e6":"We ended up, as expected, with 353 rows."}}