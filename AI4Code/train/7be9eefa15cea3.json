{"cell_type":{"8f49d3d0":"code","9fc3400d":"code","5f30cc06":"code","00564874":"code","6afc1083":"code","e89ec5d4":"code","3eca1799":"code","84233381":"code","0d1c175b":"code","acd93b6c":"code","d8c0ccdd":"code","f2f09791":"code","946398b6":"code","ddcbfed8":"code","2c3e6fc5":"code","64678819":"code","a84a3bc2":"code","73e3be64":"code","ad56c895":"code","af71b752":"code","995bdc37":"code","3127119b":"code","d714547c":"code","bebacc1d":"code","8acd1151":"code","94f3832a":"code","2bbd2856":"code","ef5484f2":"code","a05a8927":"code","45f09d28":"code","bcc090ea":"code","17f395d7":"code","5b052056":"code","dfcf1994":"code","e643ba8e":"code","2431f91c":"code","41b8346d":"code","a1fad858":"code","d4e195b7":"code","00edc151":"code","64ba8828":"code","c116172d":"code","eda077de":"code","1768744f":"code","76d05aae":"code","8db6d8bb":"code","ca43a254":"code","fe66c14f":"code","b84c9aa0":"code","73e4dd9f":"code","2400ce1b":"code","a0914021":"code","db31e365":"code","182774bf":"code","fdbfa57e":"code","0617addc":"markdown","263c03cd":"markdown","79ebe44c":"markdown","7b843669":"markdown","00a95c91":"markdown","8b1a3519":"markdown","f0e638d8":"markdown","a10a9a1e":"markdown","81e5f77a":"markdown","3b84a38f":"markdown","31bf2e10":"markdown","a776be91":"markdown","a455586e":"markdown","15909bcc":"markdown","c22fc2fd":"markdown","1edfe567":"markdown","dfe2df8f":"markdown","f8267a62":"markdown","bfd76ba6":"markdown","1910ba81":"markdown","b71125c2":"markdown","fe1e58c4":"markdown","0aba1148":"markdown","b0d4bb26":"markdown","5b699494":"markdown","892f7cde":"markdown","9075a182":"markdown","30aed443":"markdown","0bd7cee0":"markdown","da038b68":"markdown","27b93986":"markdown","863bfddc":"markdown","a97ef542":"markdown","40d6ba5e":"markdown","f5a08a5d":"markdown","fcfdb606":"markdown","a7c153b0":"markdown","50fc87f5":"markdown","c2945124":"markdown","bf052889":"markdown","f61568a3":"markdown","2f3d410e":"markdown","6236c4b8":"markdown","a8fc197f":"markdown","afcbe902":"markdown","dcc41189":"markdown","f913fdf9":"markdown","20ca2fe7":"markdown","c3844575":"markdown","702debef":"markdown","9f1a2d04":"markdown","87a3b9d4":"markdown","45120496":"markdown","f55aa948":"markdown","05f55489":"markdown","d2eae5bc":"markdown","15f8c51c":"markdown","dd2bbc49":"markdown","8fa9afe7":"markdown","67b69aab":"markdown"},"source":{"8f49d3d0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import display,HTML\nfrom math import sqrt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","9fc3400d":"hour_df=pd.read_csv('..\/input\/hour.csv')\nhour_df.head()","5f30cc06":"hour_df.shape","00564874":"hour_df.dtypes","6afc1083":"hour_df.rename(columns={'instant':'rec_id','dteday':'datetime','holiday':'is_holiday','workingday':'is_workingday',\n                        'weathersit':'weather_condition','hum':'humidity','mnth':'month',\n                        'cnt':'total_count','hr':'hour','yr':'year'},inplace=True)\nhour_df.head()","e89ec5d4":"hour_df.describe()","3eca1799":"hour_df['datetime']=pd.to_datetime(hour_df.datetime)\n\nhour_df['season']=hour_df.season.astype('category')\nhour_df['year']=hour_df.year.astype('category')\nhour_df['month']=hour_df.month.astype('category')\nhour_df['hour']=hour_df.hour.astype('category')\nhour_df['is_holiday']=hour_df.is_holiday.astype('category')\nhour_df['weekday']=hour_df.weekday.astype('category')\nhour_df['is_workingday']=hour_df.is_workingday.astype('category')\nhour_df['weather_condition']=hour_df.weather_condition.astype('category')\n","84233381":"fig,ax=plt.subplots(figsize=(20,8))\nsns.set_style('white')\n\nsns.pointplot(x='hour',y='total_count',data=hour_df[['hour','total_count','season']],hue='season',ax=ax)\nax.set_title('Season wise hourly distribution of counts')\nplt.show()\nfig,ax1=plt.subplots(figsize=(20,8))\nsns.boxplot(x='hour',y='total_count',data=hour_df[['hour','total_count']],ax=ax1)\nax1.set_title('Season wise hourly distribution of counts')\nplt.show()","0d1c175b":"fig,ax=plt.subplots(figsize=(20,8))\nsns.pointplot(x='hour',y='total_count',data=hour_df[['hour','total_count','weekday']],hue='weekday')\nax.set_title('Weekday wise hourly distribution of counts')\nplt.show()","acd93b6c":"fig,ax1=plt.subplots(figsize=(20,8))\nsns.barplot(x='month',y='total_count',data=hour_df[['month','total_count']],ax=ax1)\nax1.set_title('Monthly distribution of counts')\nplt.show()\nfig,ax2=plt.subplots(figsize=(20,8))\nsns.barplot(x='month',y='total_count',data=hour_df[['month','total_count','season']],hue='season',ax=ax2)\nax2.set_title('Season wise monthly distribution of counts')\nplt.show()","d8c0ccdd":"fig,ax=plt.subplots(figsize=(20,8))\nsns.violinplot(x='year',y='total_count',data=hour_df[['year','total_count']])\nax.set_title('Yearly wise distribution of counts')\nplt.show()\nfig,(ax1,ax2) = plt.subplots(ncols=2,figsize=(20,5))\nsns.barplot(data=hour_df,x='is_holiday',y='total_count',hue='season',ax=ax1)\nax1.set_title('is_holiday wise distribution of counts')\nsns.barplot(data=hour_df,x='is_workingday',y='total_count',hue='season',ax=ax2)\nax2.set_title('is_workingday wise distribution of counts')\nplt.show()","f2f09791":"fig,ax=plt.subplots(figsize=(20,8))\n\nsns.boxplot(data=hour_df[['temp','windspeed','humidity']])\nax.set_title('temp_windspeed_humidity distribution')\nplt.show()","946398b6":"fig,(ax1,ax2,ax3)=plt.subplots(nrows=3,figsize=(20,10))\nsns.boxplot(x='hour',y='total_count',data=hour_df[['hour','total_count']],ax=ax1)\nax1.set_title('Hourly wise distribution of outliers')\n\nsns.barplot(x='month',y='total_count',data=hour_df[['month','total_count']],ax=ax2)\nax2.set_title('Monthly wise distribution of outliers')\n\nsns.violinplot(x='year',y='total_count',data=hour_df[['year','total_count']],ax=ax3)\nax3.set_title('Yearly wise distribution of outliers')\nplt.show()","ddcbfed8":"correMtr=hour_df[[\"temp\",\"atemp\",\"humidity\",\"windspeed\",\"total_count\"]].corr()\nmask=np.array(correMtr)\nmask[np.tril_indices_from(mask)]=False\nfig,ax=plt.subplots(figsize=(20,5))\nsns.heatmap(correMtr,mask=mask,vmax=0.8,square=True,annot=True,ax=ax)\nax.set_title('Correlation matrix of attributes')\nplt.show()","2c3e6fc5":"from sklearn import preprocessing,metrics,linear_model\nfrom sklearn.model_selection import cross_val_score,cross_val_predict,train_test_split","64678819":"X_train,X_test,y_train,y_test= train_test_split(hour_df.iloc[:,0:-3],hour_df['total_count'],test_size=0.3,random_state=42)\n\nX_train=X_train.reset_index() \ny_train=y_train.reset_index()\n\nX_test=X_test.reset_index() \ny_test=y_test.reset_index() \n\nprint(X_train.shape,X_test.shape,y_train.shape,y_test.shape)\nprint(y_train.head())\nprint(y_test.head())","a84a3bc2":"import scipy\nfrom scipy import stats\nstats.probplot(y_train.total_count.tolist(),dist='norm',plot=plt)\nplt.show()","73e3be64":"training_features=X_train[['season','is_holiday','is_workingday','weather_condition','hour','month','year','weekday','temp','atemp','humidity','windspeed']]\ncategorical_features=['season','is_holiday','is_workingday','weather_condition']\nnumerical_features=[['temp','atemp','humidity','windspeed','hour','month','year','weekday']]","ad56c895":"training_attributes=pd.get_dummies(training_features,columns=categorical_features)\ntraining_attributes.head()","af71b752":"X_train=training_attributes\ny_train=y_train.total_count.values\nlr=linear_model.LinearRegression()","995bdc37":"lr.fit(X_train,y_train)","3127119b":"predict=cross_val_predict(lr,X_train,y_train,cv=3)\n\nfig,ax=plt.subplots(figsize=(20,8))\nax.scatter(y_train,y_train-predict)\nax.axhline(lw=2,color='black')\nax.set_title('Cross validation prediction plot')\nax.set_xlabel('Observed')\nax.set_ylabel('Residual')\nplt.show()","d714547c":"r2_scores = cross_val_score(lr, X_train, y_train, cv=3)\nmse_scores = cross_val_score(lr, X_train, y_train, cv=3,scoring='neg_mean_squared_error')\nprint(r2_scores)\nprint(mse_scores) ","bebacc1d":"sns.set_style('whitegrid')\nfig,ax=plt.subplots(figsize=(10,5))\nax.plot([i for i in range(len(r2_scores))],r2_scores,lw=2 )\nax.set_xlabel('R-squared')#coefficeint of determination\nax.set_ylabel('Iterated')\nax.set_title('Cross validation scores,Avg:{}'.format(np.average(r2_scores)))\nplt.show()","8acd1151":"test_features= X_test[['season','is_holiday','weather_condition','is_workingday','hour','weekday','month','year','temp','atemp','humidity','windspeed']]\nnumeric_features = ['temp','humidity','windspeed','hour','weekday','month','year']\ntest_cat_features =  ['season','is_holiday','weather_condition','is_workingday']","94f3832a":"test_attributes=pd.get_dummies(test_features,columns=test_cat_features)\ntest_attributes.head()","2bbd2856":"X_test=test_attributes\ny_test=y_test.total_count.values\nlr.fit(X_test,y_test)","ef5484f2":"y_pred=lr.predict(X_test)","a05a8927":"\nrmse=sqrt(metrics.mean_squared_error(y_test,y_pred))\nprint(rmse)\nmae=metrics.mean_absolute_error(y_test,y_pred)\nprint(mae)","45f09d28":"fig, ax = plt.subplots()\nax.scatter(y_test, y_test-y_pred)\nax.axhline(lw=2,color='black')\nax.set_xlabel('Observed')\nax.set_ylabel('Residuals')\nax.title.set_text(\"Residual Plot\")\nplt.show()","bcc090ea":"X_train=training_attributes\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\ndtr=DecisionTreeRegressor(min_samples_split=2,max_leaf_nodes=40)","17f395d7":"dtr.fit(X_train,y_train)","5b052056":"dtr.score(X_train,y_train)","dfcf1994":"from sklearn import tree\nimport pydot\nimport graphviz\n\ndot_data = tree.export_graphviz(dtr, out_file=None) \ngraph = graphviz.Source(dot_data) \ngraph","e643ba8e":"from scipy.stats import randint as sp_randint\nparam_random = {\"criterion\": [\"mse\", \"mae\"],\n              \"min_samples_split\": sp_randint(1, 5, 10),\n              \"max_depth\": [2, 6, 8],\n              \"min_samples_leaf\": sp_randint(5, 10,20),\n              \"max_leaf_nodes\": sp_randint( 10, 20, 40),\n              }","2431f91c":"X_train=training_attributes\n\nrandomized_cv_dtr = RandomizedSearchCV(dtr, param_random, cv=3,random_state=32)","41b8346d":"randomized_cv_dtr.fit(X_train,y_train)","a1fad858":"print(randomized_cv_dtr.best_score_)\nprint(randomized_cv_dtr.best_params_)","d4e195b7":"df=pd.DataFrame(data=randomized_cv_dtr.cv_results_)\ndf.head()","00edc151":"fig,ax = plt.subplots()\nsns.pointplot(data=df[['mean_test_score',\n                           'param_max_leaf_nodes',\n                           'param_max_depth']],\n             y='mean_test_score',x='param_max_depth',\n             hue='param_max_leaf_nodes',ax=ax)\nax.set(title=\"Effect of Depth and Leaf Nodes on Model Performance\")\nplt.show()","64ba8828":"predicted = randomized_cv_dtr.best_estimator_.predict(X_train)\nresiduals = y_train.flatten()-predicted\nfig, ax = plt.subplots()\nax.scatter(y_train.flatten(), residuals)\nax.axhline(lw=2,color='black')\nax.set_xlabel('Observed')\nax.set_ylabel('Residual')\nplt.show()","c116172d":"r2_scores = cross_val_score(randomized_cv_dtr.best_estimator_, X_train, y_train, cv=3)\nprint(r2_scores)\nmse_scores = cross_val_score(randomized_cv_dtr.best_estimator_, X_train, y_train, cv=3,scoring='neg_mean_squared_error')\nprint(mse_scores)","eda077de":"best_dtr_model = randomized_cv_dtr.best_estimator_\npred = best_dtr_model.predict(X_test)","1768744f":"\nrmse=sqrt(metrics.mean_squared_error(y_test,pred))\nprint(rmse)\nmae=metrics.mean_absolute_error(y_test,pred)\nprint(mae)","76d05aae":"fig, ax = plt.subplots()\nax.scatter(y_test.flatten(), y_test.flatten()-pred)\nax.axhline(lw=2,color='black')\nax.set_xlabel('Observed')\nax.set_ylabel('Residual')\nplt.show()\n","8db6d8bb":"from sklearn.ensemble import RandomForestRegressor\nX_train=training_attributes\nrf=RandomForestRegressor(n_estimators=200)","ca43a254":"rf.fit(X_train,y_train)","fe66c14f":"rf.score(X_train,y_train)","b84c9aa0":"predict=cross_val_predict(rf,X_train,y_train,cv=3)\n\nfig,ax=plt.subplots(figsize=(20,8))\nax.scatter(y_train,y_train-predict)\nax.axhline(lw=2,color='black')\nax.set_title('Cross validation prediction plot')\nax.set_xlabel('Observed')\nax.set_ylabel('Residual')\nplt.show()","73e4dd9f":"r2_scores = cross_val_score(rf, X_train, y_train, cv=3)\nprint(r2_scores)\nmse_scores = cross_val_score(rf, X_train, y_train, cv=3,scoring='neg_mean_squared_error')\nprint(mse_scores)","2400ce1b":"sns.set_style('whitegrid')\nfig,ax=plt.subplots(figsize=(10,5))\nax.plot([i for i in range(len(r2_scores))],r2_scores,lw=2 )\nax.set_xlabel('R-squared')#coefficeint of determination\nax.set_ylabel('Iterated')\nax.set_title('Cross validation scores,Avg:{}'.format(np.average(r2_scores)))\nplt.show()","a0914021":"X_test=test_attributes\nrf_pred=rf.predict(X_test)\nrf_pred","db31e365":"rmse=sqrt(metrics.mean_squared_error(y_test,rf_pred))\nprint(rmse)\nmae=metrics.mean_absolute_error(y_test,rf_pred)\nprint(mae)","182774bf":"fig, ax = plt.subplots()\nax.scatter(y_test, y_test-rf_pred)\nax.axhline(lw=2,color='black')\nax.set_xlabel('Observed')\nax.set_ylabel('Residual')\nplt.show()","fdbfa57e":"Bike_df1=pd.DataFrame(y_test,columns=['y_test'])\nBike_df2=pd.DataFrame(rf_pred,columns=['rf_pred'])\nBike_predictions=pd.merge(Bike_df1,Bike_df2,left_index=True,right_index=True)\nBike_predictions.to_csv('Bike_Rental_Count.csv')\nBike_predictions","0617addc":"**Random forest accuracy score**","263c03cd":"Model evalution metrics","79ebe44c":"Correlation matrix for better understanding between different attributes of the data.","7b843669":"**Residual plot**","00a95c91":"Describe the dataset","8b1a3519":"Randomized search cv with cross validation","f0e638d8":"Normality test(probability plot)","a10a9a1e":"Split the test dataset to categorical and numerical features","81e5f77a":"Outliers distribution","3b84a38f":"Regression analysis","31bf2e10":"fit the model","a776be91":"Split the training dataset","a455586e":"predict the model","15909bcc":"From the R-squared or coefficient of determination is 0.39 on average for 3-fold cross validation and it means\nthat predictor is only able to explain 39% of the variance in the target variable.\n","c22fc2fd":"fit the training model","1edfe567":"Residual plot","dfe2df8f":"Parameter hypertuning  results","f8267a62":"Test data performance","bfd76ba6":"**Random Forest**","1910ba81":"Season wise hourly distribution of counts","b71125c2":"**Predict the model**","fe1e58c4":"Residual plot","0aba1148":"Bike sharing demand prediction","b0d4bb26":"Attributes distribution and trends","5b699494":"fit the model","892f7cde":"From the cross validation prediction plot, we observed that it violates the homoscedasticity assumption\nand it is nothing but if all the random variables sequence or vector have the same finite variance.","9075a182":"Type casting the datetime and categorical attributes","30aed443":"Cross validation scores","0bd7cee0":"Plot the learned model","da038b68":"Exploratery data analysis","27b93986":"**Cross validation prediction**","863bfddc":"When we compare the root mean squared error and mean absolute error of all 3 models, the random forest model has less root mean squared error and mean absolute error. So, finally random forest model is best for predicting the bike rental count on daily basis.","a97ef542":"**Root mean squared error and mean absolute error**","40d6ba5e":"Effect of depth and leaf nodes on model performance","f5a08a5d":"R-squared and mean squared error scores","fcfdb606":"model best score and best parameters","a7c153b0":"R-squared and mean squared error scores","50fc87f5":"Yearly wise distribution of counts","c2945124":"Model evaluation metrics","bf052889":"**Final model for predicting the bike rental count on daily basis**","f61568a3":"Decoding the test attributes","2f3d410e":"Decision tree regression accuracy score","6236c4b8":"Root mean squared error and mean absolute error","a8fc197f":"Decision tree regressor","afcbe902":"Import the necessary libraries","dcc41189":"Trained the Random Search CV model","f913fdf9":"**R-squared and mean squared error scores**","20ca2fe7":"Linear regression","c3844575":"Weekday wise hourly distribution of counts","702debef":"Residual plot","9f1a2d04":"From the linear regression anaysis, we can conclude that model not suitable for this problem due \nnon linearirty of data.","87a3b9d4":"Rename the attributes for better understanding","45120496":"**Root mean squared error and mean absolute error**","f55aa948":"Split the features into categorical and numerical features","05f55489":"Cross validation prediction","d2eae5bc":"Setting the model for testing","15f8c51c":"**Fit the model**","dd2bbc49":"Monthly distribution of counts","8fa9afe7":"fit the model","67b69aab":"Decoding the training features"}}