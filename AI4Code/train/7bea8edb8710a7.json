{"cell_type":{"afa6d819":"code","435c275b":"code","cf70366d":"code","f4814e1d":"code","0960e6a2":"code","afbed99d":"code","c4fe97e0":"code","e3f7e544":"code","9ab1961f":"code","ad073262":"code","b24d02c9":"code","031a9b7d":"code","382e44ba":"code","b6439364":"code","9e8622f3":"code","f7f76874":"code","b5bae228":"code","2aa53423":"code","fe14dd4b":"code","52b29449":"code","217db741":"code","49e8fc52":"code","a3ac2a67":"code","2a4f39ea":"code","f04f5922":"code","be91bfb8":"code","d51f2eaa":"code","424eeb97":"code","59cf570b":"code","3e4fbe18":"code","6d327ec9":"code","d4055edf":"code","4e5510c0":"code","53968938":"code","b704e4c1":"code","21db7351":"code","a5528f7d":"code","10f2d88f":"code","df675cc4":"code","589fbeae":"code","70bc98f4":"code","a4ca95aa":"code","e7bd2523":"code","f95f3b90":"code","8ea804b8":"code","0696f2dc":"code","9ad5a080":"code","b7412cb3":"code","140ad5fb":"markdown","bbfe6f31":"markdown","8100c2ff":"markdown","b36bcd18":"markdown","410c2785":"markdown","7236c716":"markdown","b2887988":"markdown","4ae5df95":"markdown","6b0d1578":"markdown","81d43689":"markdown","8fb30e95":"markdown","5a210950":"markdown","c1ee35fe":"markdown","eb961681":"markdown","fa435b06":"markdown","7472bd24":"markdown","2ebb08b5":"markdown","e93ec537":"markdown","ca3ee8ad":"markdown","fa122a01":"markdown","1a8b3e48":"markdown","f50dffd1":"markdown","18cee66f":"markdown","41484799":"markdown","46e2ec90":"markdown","81644e59":"markdown","71790ab0":"markdown","742ba76c":"markdown","8dc1d7e3":"markdown","65fddfe3":"markdown","fe34715d":"markdown","4f2035fb":"markdown","5af73abb":"markdown","4809eef3":"markdown","1456d240":"markdown","d1e237e8":"markdown","66d30069":"markdown","4162137a":"markdown","257a9d72":"markdown","80cc394a":"markdown","06a1550a":"markdown","fc2bd5d6":"markdown","26d4ed94":"markdown","80d754b2":"markdown"},"source":{"afa6d819":"from IPython.core.display import display, HTML, Javascript\nimport IPython.display","435c275b":"# General Essential Libraries:\nimport numpy as np \nimport pandas as pd \n\nimport seaborn as sns \nsns.set(style = \"whitegrid\")\nimport matplotlib.pyplot as plt \n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom IPython.core.display import display, HTML, Javascript\nimport IPython.display","cf70366d":"# Libraries for interactive visualisation: \nimport plotly.figure_factory as ff \nimport  plotly.offline as py\nimport plotly.graph_objs as go \n\nfrom plotly.offline import download_plotlyjs,init_notebook_mode, iplot, plot\nfrom plotly import tools \npy.init_notebook_mode(connected = True)\n\nimport cufflinks as cf \ncf.go_offline()","f4814e1d":"# Libraries for Machine Learning Algroithyms:\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import OneHotEncoder \n\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor","0960e6a2":"df_train = pd.read_csv(\"..\/input\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/test.csv\")","afbed99d":"# Header of Training set \ndf_train.head(3)","c4fe97e0":"# Header of Test Set \ndf_test.head(3)","e3f7e544":"# Information of the Training set: \n#df_train.info()","9ab1961f":"# Information of the Test set: \n#df_test.info()","ad073262":"# General Description of Numberical Columns of the Entire Set (Training and Testing)\ndf = pd.concat([df_train,df_test], axis = 0)\ndf.drop(\"SalePrice\", axis =1, inplace=True )\ndf.describe()","b24d02c9":"round(df_train[\"SalePrice\"].describe(),2)","031a9b7d":"df_types = df.dtypes.value_counts()\nprint(df_types)\n\nplt.figure(figsize = (14,4))\nsns.barplot(x = df_types.index, y = df_types.values)\nplt.title(\"Data Type Distribution\")","382e44ba":"num_col = df.select_dtypes(include=(\"float64\", \"int64\"))\ncat_col = df.select_dtypes(include=(\"object\"))","b6439364":"# Correalation plot in order to identify the relationship between the Numberical Features:\nplt.figure(figsize=(20,10))\nsns.heatmap(df_train.corr(), linewidths=.1, annot=True, cmap='magma')\ndf_train.corr()[\"SalePrice\"].sort_values(ascending = False).head(5)","9e8622f3":"fig, (ax1, ax2) =plt.subplots(nrows=2, ncols=1, figsize = (15,10))\n\nsns.heatmap(cat_col.isnull(), cbar = False, annot = False, cmap =\"cividis\", yticklabels=False, ax=ax1)\nplt.title(\"Missing Values in Categorical Columns\")\nsns.heatmap(num_col.isnull(), cbar = False, annot = False, cmap =\"cividis\", yticklabels=False)\nplt.title(\"Missing Values in Numberical Columns\")\nplt.tight_layout()\n","f7f76874":"mat = df_train[[\"SalePrice\", \"LotFrontage\", \"TotalBsmtSF\",\"GrLivArea\",\"OverallQual\" ]]\nmat[\"index\"] = np.arange(len(mat))\n\nfig = ff.create_scatterplotmatrix(mat, diag=\"box\", index=\"index\", colormap_type=\"seq\", colormap=\"Jet\", \n                                 height = 900, width = 1100)\npy.iplot(fig)","b5bae228":"hist_data = [df_train[\"SalePrice\"]]\nlabel = [\"Sales Price\"]\ncolor = [\"navy\"]\n\nfig = ff.create_distplot(hist_data, label, colors = color, show_hist=False)\nfig[\"layout\"].update(title =\"Sale Price Distribution\") \npy.iplot(fig)","2aa53423":"for i in cat_col.columns:\n    print(cat_col[i].value_counts(), \"\/n\")","fe14dd4b":"def uni(col):\n    out = []\n    for i in col:\n        if i not in out:\n            out.append(i)\n    return(out)\n\"\"\"\"\"\"\ncolors1 = [\"#a9fcca\",\"#d6a5ff\", \"#639af2\", \"#fca6da\", \"#f4d39c\", \"orange\", \"#7af9ad\",\"green\", \"maroon\", \"#3498db\", \"#95a5a6\", \"#e74c3c\", \"#34495e\",\"#df6a84\",\"#ad2543\",\"#223f08\", \"#DF3A01\", \"#045FB4\",\"#088A4B\",\"#FE2E64\" ]\n''''''\ndef bar_pie (col, colors = colors1,\n            main_title = \"Main Title\", x_label = \"X Label\", y = \"Y label\", do_x = [.6,.9], do_y = [.9,.2]):\n    \n    col_count = df[col].value_counts()\n    \n    trace = go.Bar(x = col_count.index, y = col_count.values, marker=dict(color = colors))\n    \n    trace1 = go.Pie(labels= col_count.index, values=col_count.values, hole= 0.6, textposition=\"outside\", marker=dict(colors = colors),\n               domain = dict(x = do_x, y = do_y), name = \"title\", )\n    \n    data = [trace, trace1]\n    layout = go.Layout(title= main_title)\n    fig = go.Figure(data =data, layout = layout)\n    iplot(fig)\n\n\"\"\"\"\"\"\ndef price(col):\n    if col in range(0, 150000):\n        return(\"Low\")\n    elif col in range(15000, 300000):\n        return(\"Medium\")\n    else:\n        return(\"High\")\ndf_train[\"Price\"] =df_train[\"SalePrice\"].apply(lambda x: price(x))\ndf_train.head(4)\n\n''''''\n","52b29449":"neig_hood= uni(df[\"Neighborhood\"])\nsale_cond = uni(df[\"SaleCondition\"])\nqual = uni(df[\"OverallQual\"])\nme = df_train.groupby(\"Neighborhood\").agg({\"SalePrice\":np.mean}).reset_index()","217db741":"cat_col.columns.values","49e8fc52":"num_col.columns.values","a3ac2a67":"bar_pie(col=\"HouseStyle\", main_title=\"House Style Frequency\")","2a4f39ea":"mon_d = {1:\"Jan\", 2:\"Feb\",3:\"Mar\",4:\"Aprl\",5:\"May\",6:\"Jun\",7:\"July\",8:\"Aug\",9:\"Sep\",10:\"Oct\",11:\"Nov\",12:\"Dex\"}\ndf[\"Month\"] = df[\"MoSold\"].map(mon_d)\n\nbar_pie(col=\"Month\", main_title=\"Number of Houses sold very Month\", do_x= [.9,.9] ,do_y= [.9,.4])","f04f5922":"data = []\nfor i in neig_hood:\n    data.append(go.Box(y = df_train[df_train[\"Neighborhood\"]==i][\"SalePrice\"], name = i))\n\nlayout = go.Layout(title = 'Sales Price based on Neighborhood', \n                   xaxis = dict(title = 'Neighborhood'), \n                   yaxis = dict(title = 'Sale Price'))\nfig = dict(data = data, layout = layout)\npy.iplot(fig)","be91bfb8":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(18,7))\nsns.violinplot( x= df_train[\"Exterior1st\"], y=df_train[\"SalePrice\"], ax=ax[0])\nplt.title(\"Sales Price VS Exterior Distibution\")\nplt.xticks(rotation =90)\n\nsns.boxplot( x= df_train[\"Exterior2nd\"], y=df_train[\"SalePrice\"], ax=ax[1])\nplt.xticks(rotation =90)\nplt.title(\"Sales Price VS Exterior Distibution\")\nplt.tight_layout()","d51f2eaa":"data = []\nfor i in qual:\n    data.append(go.Box(y = df_train[df_train[\"OverallQual\"]==i][\"SalePrice\"], name = i,  boxpoints='all',\n            jitter=0.5,\n            whiskerwidth=0.2,\n            marker=dict(\n                size=2,\n            ),\n            line=dict(width=1),\n        ))\nlayout = go.Layout(title = 'Sales Price based on Overall Quality', xaxis=dict(title =\"Ouality grade\"), yaxis=dict(title =\"Sales Price\"))\n\nfig = dict(data = data, layout = layout)\npy.iplot(fig)","424eeb97":"yr_built = uni(df[\"YearBuilt\"])\ndata = []\nfor i in yr_built:\n    data.append(go.Box(y = df_train[df_train[\"YearBuilt\"]==i][\"SalePrice\"], name = i,  boxpoints='all',\n            jitter=0.5,\n            whiskerwidth=0.2,\n            marker=dict(\n                size=2,\n            ),\n            line=dict(width=1),\n        ))\nlayout = go.Layout(title = 'Sales Price based on Year Built', xaxis=dict(title =\"Years\"), yaxis=dict(title =\"Sales Price\"))\n\nfig = dict(data = data, layout = layout)\npy.iplot(fig)","59cf570b":"yr_rem = uni(df[\"YearRemodAdd\"])\ndata = []\nfor i in yr_rem:\n    data.append(go.Violin(y = df_train[df_train[\"YearRemodAdd\"]==i][\"SalePrice\"], name = i))\nlayout = go.Layout(title = 'Sales Price of Renovated Houses', xaxis=dict(title =\"Years\"), yaxis=dict(title =\"Sales Price\"))\n\nfig = dict(data = data, layout = layout)\npy.iplot(fig)","3e4fbe18":"num_col.columns","6d327ec9":"df_train.corr()[\"SalePrice\"].sort_values()","d4055edf":"price_uni = uni(df_train[\"Price\"])\nqual = uni(df[\"OverallQual\"])\nbuil_type = uni(df_train[\"BldgType\"])","4e5510c0":"data1 = []\nfor item, colors in zip(buil_type, [\"lime\",\"deepskyblue\",\"#d6a5ff\", \"#639af2\", \"#fca6da\", \"#f4d39c\", \"orange\", \"#7af9ad\"]):\n    \n    tem_df = df_train[df_train[\"BldgType\"]== item]\n\n    data1.append(go.Scatter(x = tem_df[\"LotArea\"], y = tem_df[\"SalePrice\"], name=item, mode= \"markers\",opacity = 0.75,\n                             marker = dict(line = dict(color = 'black', width = 0.5))))\nlayout = go.Layout(title = 'Sales Price vs Lot Area ', xaxis = dict(title = 'Lot Area'), \n                   yaxis = dict(title = 'Sales Price'))\n\nfig = go.Figure(data = data1, layout = layout)\npy.iplot(fig)\n","53968938":"df_train.corr()[\"SalePrice\"].sort_values(ascending=False).head(10)","b704e4c1":"fig, ((ax1, ax2), (ax3, ax4))  = plt.subplots(nrows=2,ncols=2, figsize=(20,8))\nsns.scatterplot(x= df_train[\"LotArea\"], y = df_train[\"SalePrice\"], ax= ax1, hue = df_train[\"Price\"])\nsns.scatterplot(x= df_train[\"GrLivArea\"], y = df_train[\"SalePrice\"], ax=ax2,hue = df_train[\"Price\"])\nsns.scatterplot(x= df_train[\"GarageArea\"], y = df_train[\"SalePrice\"], ax=ax3,hue = df_train[\"Price\"])\nsns.scatterplot(x= df_train[\"TotalBsmtSF\"], y = df_train[\"SalePrice\"], ax=ax4, hue = df_train[\"Price\"])\nplt.tight_layout()","21db7351":"df_train[\"Utilities\"].value_counts()","a5528f7d":"plt.figure(figsize = (18,9))\nsns.swarmplot(x= df_train[\"GarageCars\"], y = df_train[\"SalePrice\"])","10f2d88f":"# Total Houses sold in dollars:\ndf_train.groupby(\"YrSold\")[\"SalePrice\"].sum()","df675cc4":"# Boxplot of Sales Price Vs Years\n#sns.boxplot(data = df_train, x = \"YrSold\", y =\"SalePrice\")\n\ntrace = go.Box( y = df_train[df_train[\"YrSold\"]==2006][\"SalePrice\"], \n              name = \"2006\")\ntrace1 = go.Box( y = df_train[df_train[\"YrSold\"]==2007][\"SalePrice\"],\n               name = \"2007\")\ntrace2 = go.Box( y = df_train[df_train[\"YrSold\"]==2008][\"SalePrice\"],\n               name = \"2008\")\ntrace3 = go.Box( y = df_train[df_train[\"YrSold\"]==2009][\"SalePrice\"],\n               name = \"2009\")\ntrace4 = go.Box( y = df_train[df_train[\"YrSold\"]==2010][\"SalePrice\"],\n               name = \"2010\")\n\nlayout = go.Layout(title = \"Yearly Sale Prices\", \n                   yaxis=dict(title = \"Sales Price\"), \n                  xaxis=dict(title = \"Years\"))\n\ndata = [trace, trace1, trace2, trace3, trace4]\n\nfig = go.Figure(data= data, layout=layout)\npy.iplot(fig)","589fbeae":"sns.boxplot(data = df_train, x = \"MoSold\", y =\"SalePrice\")","70bc98f4":"df_train.head(1)","a4ca95aa":"sns.boxplot(data = df_train, x = \"HouseStyle\", y =\"SalePrice\")","e7bd2523":"plt.figure(figsize=(20,15))\nsns.boxplot(data = df_train, x = \"YearBuilt\", y =\"SalePrice\")\nplt.xticks(rotation = \"90\")","f95f3b90":"df[\"YearBuilt\"].value_counts()","8ea804b8":"tot_cel = np.product(df.shape)\ntot_cel\nmiss_cel = df.isnull().sum().sum()\ntotal_missing = (miss_cel\/tot_cel)*100\nprint(f\"Total percent of missing values in the data is: {round(total_missing)}%\")","0696f2dc":"print(df.isnull().any().value_counts(),\"\\nTherefore, the total columns having missing values are 34\")","9ad5a080":"# Data Frame of all the features having missing values with percentage:\ntotal = df_train.isnull().sum().sort_values(ascending= False)\n\nperc = df_train.isnull().sum() \/ df_train.isnull().count()*100\nperc1 = (round(perc, 2).sort_values(ascending = False))\n\nmissing_data = pd.concat([total, perc1, df_train.isnull().sum(), df_test.isnull().sum()], axis=1,  keys=[\"Total Missing Values\", \"Percantage %\", \"Missing values in Train\", \"Missing values in Test\"])\nmissing_data.sort_values(by=\"Total Missing Values\", ascending=False).head(20)","b7412cb3":"plt.figure(figsize=(20,5))\nsns.heatmap(df.isnull(),cbar= False, yticklabels=False, cmap = \"cividis\")\n\n# Ploting the top features based on their missing values\ntrace1 = go.Bar(x = missing_data.index, y = missing_data[\"Total Missing Values\"].values,\n               marker = dict(color = df[\"YearRemodAdd\"],\n                            colorscale = \"Picnic\"))\n\nlayout = go.Layout(title=\"Total Missing Values Plot\", \n                   yaxis= dict(title =\"Percatnage (%)\"))\n\ndata = [trace1]\n\nfig = go.Figure(data= data , layout= layout)\npy.iplot(fig)\n","140ad5fb":"<h2> <em> #A Comparison between Violin Plot and Box Plots<\/h2><\/em>\n<h2> <strong># Sales Prices based on Year built<\/strong><\/h2>","bbfe6f31":"## # **Creating functions for effecient data visualisation:**\n<strong>\n","8100c2ff":"<h1>2.c) Datatypes and its distribution<\/h1>","b36bcd18":"<h2># Before moving further let's take a look at missing values in Numberical and Categorical columns:<\/h2>","410c2785":"## ** What is EDA (Exploratory Data Analysis)?** \n<strong>It is considered to be 1st step towards data science. It is a comparatively new area of Statistics. Classical statistics focuses on exclusively on **inference**. While EDA is an approach to identify the characteristics of the data itself. A sometimes complex set of procedures are being followed for drawing conclusions about large populations based on small samples by the means of EDA.<\/strong>\n###  **Interested in getting deeper understanding about EDA?** \n**Read Book Exploratory Data Analysis [Tukey-1977]**\n\n<img src=\"https:\/\/i.imgur.com\/RPtnBxf.png\" width=\"300\"\/>","7236c716":" <h1><strong>4 Data Preprocessing<\/h1><\/strong>","b2887988":"<h1>1. Importing the Libraries<\/h1><strong>","4ae5df95":"<h1>3. a. Correlation matric for numerical data<\/h1>","6b0d1578":"<h2> # ** 1. Bar Plots: House Style Frequency**<\/h2>\n**Let's take a look at House Style columns and make a Bar Plot of it**","81d43689":"<h3>Observation:<\/h3> What we can observe from this plot?\n<p>\u2022  We can clearly see, the number of houses which were built after 2000 are more likely to be expensive. So, we can assume because of factors like; they might have more amenities or these houses could be more modernize based on current market trends etc. Nonetheless, we can get a decent picture of the trend here. \n ","8fb30e95":"**Therefore, we have 43 categorical columns in our dataset. Some of them are Binary, General Categorical and Ordinal types**\n\n**I will be exploring each one of them to get a better understanding and will try to explain there distinguish characteristics best in my knowledge in this sections**\n\n## # **So what plots are mostly use for Categorical Columns?**\n**Generally Categorical columns are those which are assigned to a specific category (name,type, locaction etc) and the related to some other features with values**.\n**We can visualise Categorical Columns by following (the most common ones)**:\n1. **Box Plots** (These are generally the most comman used plots for Categorical Columns)\n2. **Violin Plots**: These are same as box plot but **they have kernel desnsity distribution on both the side**. \n3.**Bar Plots**: Basic bar plots\n4. **Swarn Plots** \n5.  **Strip Pltots**: Similar to swarn plots but without the spread. \n\n**I will try to use each one of them in this stage along with explaination of the data type present in those plots**.\n","5a210950":"## **Why Correlation Matrix?**\n**It helps to get a better understanding of all variable and their relation with each other. Features which have higher linearity either positive or negative tends to have high positive and high negative Person's correlation coefficient. However, the above matrix can not be used for inference as there might a lot of outliears in the data set which does not capture the true characteristics of the data and moreover correlation coefficient are very sensitive to outliers which we have not removed or replaced yet! Nonetheless, matrix in general helps to get an understanding of missing values and anomalies in the data set in early stage.**\n\n### Top 10 features correlated with our target variable:\n1. Over All Quality (OverallQual) with correlation = 0.79\n2. OverallQual = 0.790982\n3. GarageCars = 0.640409\n4. GarageArea  = 0.62343\n5. TotalBsmtSF = 0.613581\n6. 1stFlrSF = 0.605852\n7. FullBath = 0.560664\n8. TotRmsAbvGrd = 0.533723\n9. YearBuilt = 0.5228974\n","c1ee35fe":"## #**2. Box plots: Neighborhood**\n### # **One of the main factor in property evaluation is the Location. Let's see how Sales Prices varies from place to place.**","eb961681":"<h3>Key Notes:<\/h3>\n<strong>As we can see  we have 37 integer and float data type columns which can be used for  predicting the target variable and we have 43 object data type columns which we can use to identify relationship between the feature. However, in order to use these columns for our Machine Learning algorithms we need to Encode them later in our Data Preprocessing stage<\/strong>","fa435b06":"<h2>Work under progress!!<\/h2>\n\n<h2>Quote:<\/h2> If you investigate the data long enough, sooner or later it will confess!","7472bd24":"<strong>Please Note:<\/strong> The new columns which I have created in this cell is in my main Data frame (which I am using for visualisation), not  in the train\/test set. Hence, we do not have to worry about the addition redundant column we have created.\n<h3>Observation:<\/h3>\n<strong>Tends to look like in the middle of the year May, June, July  house are more likely to be sold, which makes sense as alot of people usually like to invest by the end of fiscal year cycle and during the holidays. INTERESTING<\/strong>","2ebb08b5":"<h3>**All the light color represents the missing values in the respective columns**<\/h3>","e93ec537":" <strong>Step 1:<\/strong> <p><strong>Identifying the total percentage of the missing values in both the data set, exculding the target variable<\/p><\/strong>","ca3ee8ad":"## **# What is Central Limit Theorem and how it is implimented?**:\n### ** CLT: As the sample size increase, the sample mean approaches a normal distribution (Gaussian Curve). It is far most important theorem in Statistics because in *Statistics or Machine Learning* we assume that our distribuiton is normally distributed.** \n**A-lot MAchine Learning algorithms such as Linear Regression assume that the sample\/population distribution is normally distributed.** Therefore, it is always a good practive to  check the distribution of the given data features. \n\n### **#Which Leads to a term called Parametric and Non-Parametric**\n**Parametric: I assume that the population follows a distribution based on fixed parameters. While Non-Parametric opposite.**","fa122a01":"<h2># What is Statistical Learning?<\/h2>\n<strong>It refers to set of tools for understanding the data. These tools can be classified as supervised or unsupervised.<\/strong>\n    \n a. **Supervised**: It involves building statistical models for **predicting or estimating** an output based on one or more input variables\/features. \n\nb. **Unsupervised**: And, in a breif description in these problems. There are input varaibles but no supervising output. We gernerally don't have labeled data and we try to group together the similar data points based on their characteristics\/features\n\n\n<h2># How we can use statistical learning?<\/h2>\nOur motive is to understand our objective. <strong>Stastistical Learning can be used for two reason creating inference  or predictions models.<\/strong> Machine learning is not always about making predictions but rather it can be majorly used for building inference about features and finding the relationship among features and target variable (<strong>Let's say function (f)<\/strong>).\n<p><strong>Function f:<\/strong> f is a fixed but unknown functions of features X1,...Xp with the realtion to our target variable y. <strong>f functions presents the systematic information that features(X) provide about Y. As mentioned earlier our two main reasons that we may to wish to estimate f are prediction and inference.<\/strong>. And, before standing diving in any project we should be interested in answering the following questions:<\/p>\n<ul> \n    <strong><li>Which predictors are assciated with our target varaible and why?<\/li><\/strong>\n  <strong>  <li>Which predictors are assciated with our target varaible and why?<\/li><\/strong>\n   <strong> <li>Can the relationship between Y and each predictor be adequately summarized using a linear equation, or it is more complicated?<\/li><\/strong>\n    <\/ul>\n","1a8b3e48":"<h2> Key Points<\/h2>\n <p>\u2022 In Boxplots the top and bottom represents 75th and 25th perecentile resp., which can give us an idea of the distribution of the varaible and can be used in side by side display to compare distribution<\/p>\n <p>\u2022  Vioplots can be considered as enhancement of the boxplots and the density estimate because it show the density on the y-axis. The advantage of Violin plot is that it can show nuance in the distribution which can not be interpreted properly from the boxplots. However, the boxplots clearly shows the outliers in the data. \n <p>\u2022 EDA of all the variables is one of the key factors for efficient analysis, as it helps to get a better understanding of our data.<\/p>\n \n \n <p>\u2022  We can go on and on and explore more characteristics of the Categorical variables but for this kernel, I decided to touch some very basic of Categorical Variable Visualisation.<\/p>","f50dffd1":"<h2>Part 1: Visualising the Categorical Varibles:<\/h2>\n<strong> # **As mentioned earlier as we know by know generally a data has two data types  numberical and categorical.** <\/strong>\n**Let's dive in and explore some characteristics of the categorical data in our dataset**. \n\n**Step 1** Identifying the total number of categorical columns we have in our data set!","18cee66f":"<h3><strong>Step 4:<\/h3><\/strong><p><strong>Visualising the missing values along with there respective coulmns<\/p><\/strong>\n","41484799":"Creating 2 new variable for each data type. This will help us to manipulate the data in an effecient manner. ","46e2ec90":"## # **Scaterplot Matrix w.r.t Sales Price**","81644e59":"**As we can see on x-axis we have a categorical values which are the type of houses in the data set. While on the y-axis are the total number of observations for those respective types.**\n**It seems to look like highest number of listing are for 1 story apartments 1471 followed to 2 stories with value of 872. Which makes sense as majority of the appartments tends to be small due to higher requirement and high return on investment.**","71790ab0":"<h1>2. Importing and Understanding the Data Set<h2>","742ba76c":"<h3><strong>Step 3:<\/h3><\/strong><p><strong>Creating a table of columns with maximum missing values<\/p><\/strong>\n","8dc1d7e3":"##  **Important Key Terms:** \n**Before we get in further detail and start our brief Exploartory Data Analysis. I would like to mention some key terms for data types**. \n### **There are two type of basic structured data: numberic and categorical and they are further sub categories which are very important to understand.**\n **1. Continous**: Data that can take on any value in an interval\n **2. Discrete:** Which can take only interger values. \n **3. Categorical**: Data which can take only set of possible. \n **4. Binary**: It is a special case of categorical data that **take only one or two vales**\n **5. Ordinal**: Categorical data that a intituitive ordering. These are very important to be identified during the EDA because a feature having **Ordinal Data** tends to have more relationship with another features as the values increases by. \n \n ### ** Let's take look at all the above mentioned data types in our data set to get a deeper understanding**\n","65fddfe3":"<strong>As the plot shows, it is clear as the quality of the houses improves the sales prices goes proportionally.<\/strong>","fe34715d":"This is one of my learning competitions. Throughout this notebook I will be experimenting with a lot different techniques in order to clear out my own doubts in most feasible way  possible. \nBy all means this kernel is not directed towards optimisation. Rather, it is focused more towards implementation of different techniques presented in Machine Learning. I will try to highlight the insights that I have learned from this competion. \nIn addtition, I will try to explore the advantages and disadvantages of each model in my experience. \n<h4>Through out this kernel. I will be touching some topic about statistical learning and its significance in the world. I have been reading few of the data science books and with the help of this kernel I will be sharing some usefull information that you might like.<\/h4>\n<img src = \"https:\/\/i.imgur.com\/FCXWhmy.png\" width=\"500\"\/>","4f2035fb":"# 3.Exploratory Data Analysis[^](#0) <a id = \"1\"><\/a> <br>","5af73abb":"<strong>Step 2:<\/strong> <strong><p>Identifying the columns with missing values:<\/strong><\/p>","4809eef3":"## **[Structure consists of 7 stages:](#0)**<a id =\"0\"><\/a><\/br>\n## [1. Importing the Libraries](#1)\n    a. Pandas, Numpy\n    b. Matplotlib, Seaborn, Plotly\n    c. Scikit Learn \n    \n## [2. Importing and understanding the Dataset:](#2)\n    a. Understanding the Data and its Datatypes\n    b. Basic Statistical Analysis \n    c. Datatypes and its distrinution\n    \n## [3. Exploratory Data Analysis:](#3)\n    a. Univariate Analysis \n    b. Bivaraite Analysis \n    c. Multivariate Analysis \n    d. Target Varaible Characteristics\n    \n## [4. Data Preprocessing:](#4)\n    a. Target Variable \n    b. Outliers\n    c. Missing Values\n    d. Feature Engineering \n    e. Feature Scaling \n    f. Encoding \n    g. Cross-Validation\n    \n## [5. Model Selections:](#5)\n    a. Regressions \n    b. Neural Networks \n    \n## [6. Model Evaluation:](#6)\n    a. Metrics: RMSE\n    \n## [7. Model Tuning](#7)\n    a. Hyperparameters ","1456d240":"<h2> # Let's understand the characteristics of our Numberical Columns<\/h2>\n<h2> Part 2 EDA: Visualising the Numberical Columns<\/h2>","d1e237e8":"## **As we can see there are few outiers in the dataset. Which we will be removing in the data preprocessing stage:**","66d30069":"<h3>Estimating the location for our target variable<\/h3>","4162137a":"<strong>Total percentage of missing values in the both the dataset (training, testing) is 6%. Which is comparitely very less as compare to the problems I have done in past. Hence, we don't have to worry about in finding the most optimal technique to replace the missing values, we can simply impute the missing values with any possible technique without any high impact on the accuracy.<\/strong>\n","257a9d72":"<img src = \"https:\/\/i.imgur.com\/FCXWhmy.png\" width=\"500\"\/>","80cc394a":"<h1>2.b Concatenating both the data set (Training and Testing)<\/h1>","06a1550a":"  ## **#Estimates of Locations: where STATISTICS comes in place**\n  ### **Variables with measured data always have thousand of distinct values. A basic step in exploring the data is getting a \"TYPICAL VALUE\" for each feature: an estimate of where the most of the data is located.**\n  \n  **How can we estimate the location of a varaible? (By location I mean, where the majority of the data is being placed in terms of values)**\n  ***Mean, Median, Outliers etc they all help us to get better understanding about the location of the values of the data. Therefore, Box Plots are very usefull because they helps to identifying the location of the values in a given feature.**","fc2bd5d6":"<h2><stong>4.a  the Missing Values:<\/h2><\/strong>\n","26d4ed94":"## # **Distribution of the Target variable (Sales Price)**","80d754b2":"<h2> <strong># Number of Houses Sold every Month<\/strong><\/h2>"}}