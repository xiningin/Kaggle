{"cell_type":{"ac9be26f":"code","7ec7aa15":"code","8e159e6b":"code","c3e95550":"code","dc419078":"code","2efa4a9d":"code","c5e439b5":"code","cf658170":"code","d210d93d":"code","7b7f42c7":"code","6b56f80d":"code","218758e4":"code","6769b22b":"code","fcc83084":"code","f956cea6":"code","01287cef":"code","e8280e6f":"code","06476faa":"markdown","beaffc9c":"markdown","6cfcb705":"markdown","75e5695b":"markdown","fe9aa8f4":"markdown","aef547cf":"markdown"},"source":{"ac9be26f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7ec7aa15":"df = pd.read_csv('\/kaggle\/input\/fetal-health-classification\/fetal_health.csv')\ndf.head()","8e159e6b":"df.info()","c3e95550":"df.describe()","dc419078":"df.columns","2efa4a9d":"X= df.drop('fetal_health',axis=1)\ny = df['fetal_health']\nprint(f'X shape: {X.shape}')\nprint(f'y shape: {y.shape}')","c5e439b5":"import seaborn as sns\n\nsns.countplot(df['fetal_health'])","cf658170":"df.notnull().sum()","d210d93d":"X.iloc[0,:]","7b7f42c7":"import numpy as np\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.model_selection import StratifiedKFold\n\n\nskf = StratifiedKFold(n_splits=5,shuffle=True,random_state=101)\nlr = BernoulliNB()\nlst_accu_stratified = []\nprint(skf)\n\nfor train_index, test_index in skf.split(X, y):\n    #print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n    X_train_fold, X_test_fold = X.iloc[train_index], X.iloc[test_index]\n    y_train_fold, y_test_fold = y[train_index], y[test_index]\n    lr.fit(X_train_fold, y_train_fold) \n    lst_accu_stratified.append(lr.score(X_test_fold, y_test_fold)) ","6b56f80d":"# Print the output. \nprint('List of possible accuracy:', lst_accu_stratified) \nprint('\\nMaximum Accuracy That can be obtained from this model is:', \n      max(lst_accu_stratified)*100, '%') \nprint('\\nMinimum Accuracy:', \n      min(lst_accu_stratified)*100, '%') \nprint('\\nOverall Accuracy:', \n      np.mean(lst_accu_stratified)*100, '%') \nprint('\\nStandard Deviation is:', np.std(lst_accu_stratified)) ","218758e4":"from sklearn.neighbors import  KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n\nknn_model =  KNeighborsClassifier(n_neighbors=3)\nrf_model = RandomForestClassifier()\ngb_model = GradientBoostingClassifier()","6769b22b":"knn_acc = []\nrf_acc = []\ngb_acc=[]\n\nfor train_index, test_index in skf.split(X, y):\n    #print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n    X_train_fold, X_test_fold = X.iloc[train_index], X.iloc[test_index]\n    y_train_fold, y_test_fold = y[train_index], y[test_index]\n    knn_model.fit(X_train_fold, y_train_fold) \n    rf_model.fit(X_train_fold, y_train_fold) \n    gb_model.fit(X_train_fold, y_train_fold) \n    knn_acc.append(knn_model.score(X_test_fold, y_test_fold)) \n    rf_acc.append(rf_model.score(X_test_fold, y_test_fold)) \n    gb_acc.append(gb_model.score(X_test_fold, y_test_fold)) \n    \n# Print the output. \nprint('List of possible accuracy in KNN:', knn_acc) \nprint('\\nMaximum Accuracy That can be obtained from this model is:', \n      max(knn_acc)*100, '%') \nprint('\\nMinimum Accuracy:', \n      min(knn_acc)*100, '%') \nprint('\\nOverall Accuracy:', \n      np.mean(knn_acc)*100, '%') \nprint('\\nStandard Deviation is:', np.std(knn_acc)) \n\nprint('\\n\\n')\nprint('List of possible accuracy in Random Forest:', rf_acc) \nprint('\\nMaximum Accuracy That can be obtained from this model is:', \n      max(rf_acc)*100, '%') \nprint('\\nMinimum Accuracy:', \n      min(rf_acc)*100, '%') \nprint('\\nOverall Accuracy:', \n      np.mean(rf_acc)*100, '%') \nprint('\\nStandard Deviation is:', np.std(rf_acc)) \n\nprint('\\n\\n')\nprint('List of possible accuracy in Gradient boosting classifier:', gb_acc) \nprint('\\nMaximum Accuracy That can be obtained from this model is:', \n      max(gb_acc)*100, '%') \nprint('\\nMinimum Accuracy:', \n      min(gb_acc)*100, '%') \nprint('\\nOverall Accuracy:', \n      np.mean(gb_acc)*100, '%') \nprint('\\nStandard Deviation is:', np.std(gb_acc)) ","fcc83084":"from sklearn.model_selection import GridSearchCV\n\nparameters = {'learning_rate':[0.1, 1,0.01],'n_estimators':[100,200,300]}\nclf = GridSearchCV(gb_model, parameters)","f956cea6":"sorted(clf.cv_results_.keys())","01287cef":"# gb_acc=[]\n\n# for train_index, test_index in skf.split(X, y):\n#     #print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n#     X_train_fold, X_test_fold = X.iloc[train_index], X.iloc[test_index]\n#     y_train_fold, y_test_fold = y[train_index], y[test_index]\n#     clf.fit(X_train_fold, y_train_fold) \n#     gb_acc.append(clf.score(X_test_fold, y_test_fold)) \n    \n# # Print the output. \n# print('List of possible accuracy in Gradient boosting classifier:', gb_acc) \n# print('\\nMaximum Accuracy That can be obtained from this model is:', \n#       max(gb_acc)*100, '%') \n# print('\\nMinimum Accuracy:', \n#       min(gb_acc)*100, '%') \n# print('\\nOverall Accuracy:', \n#       np.mean(gb_acc)*100, '%') \n# print('\\nStandard Deviation is:', np.std(gb_acc)) ","e8280e6f":"clf.best_estimator_","06476faa":"HYPERPARAMETER TUNNING","beaffc9c":"# Gradient boosting classifier performs best with 94.87% accuracy ","6cfcb705":"# We got base score of 84%","75e5695b":"**Our target column is skewed so we need to use stratified cv**","fe9aa8f4":"# **Data processing and feature selection**","aef547cf":"# We have got total 95.2% accuracy using Gradient boosting algorithm"}}