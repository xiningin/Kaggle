{"cell_type":{"1d249328":"code","0fe90a88":"code","e8d260d2":"code","07ffa3a2":"code","68a5589f":"code","d4aaf1d9":"code","97bfc206":"code","6c2d6b58":"code","7a212e35":"code","f64e0fa1":"code","695001b5":"code","1c6fefdc":"code","983d1455":"code","5bedc016":"code","4e4db6c3":"code","4dd08dc6":"code","b5898e69":"code","95bf8fb2":"code","c45a9d6b":"code","d8b9a1bc":"code","e76860c7":"code","3a995324":"code","3ba11694":"code","ec84c9de":"code","7c862e82":"code","663db663":"code","b170eec1":"code","88a76f95":"code","32efdd1d":"code","64c2016a":"code","f39039f9":"code","0f5798e0":"code","4476228e":"code","38d8238a":"code","3e281176":"code","853870a9":"code","362559d3":"code","ecfd5e13":"code","3d765c3d":"code","bda22478":"code","24636f7a":"code","23e0080f":"code","906f71e8":"code","ffdaaa31":"code","d2d7bc47":"code","f5d9d4e3":"code","b1fe6022":"code","92bbf6b2":"code","3a1cbf98":"code","4b6297d0":"code","5a4342ee":"code","1ad8ab39":"code","aa77209e":"code","4951aea3":"code","1dac019f":"code","4ae92f55":"code","7cdb36a4":"code","37884a42":"code","9ff26537":"code","b7eac90c":"code","e59fbf53":"code","839908f6":"code","92bc915c":"code","0e0a9574":"code","1fb340c5":"code","ceb3e48e":"code","1d3c9b1a":"code","386cb289":"code","f7c34e4c":"code","4b7ca9d2":"code","b05ae74c":"code","3a885056":"code","0533ef9b":"code","d78f05b1":"code","140dbc58":"code","2a2915af":"code","5e60d4ad":"code","974e0506":"code","2893115e":"code","0bb11638":"code","02953086":"code","977240b7":"code","5eca7046":"code","4f7b6186":"code","c7307dfd":"code","68b0c68e":"code","eaf300c1":"code","b1381fb4":"code","d2b076d5":"code","c3dc137a":"code","3b327cb2":"code","a96adcb9":"code","acee447c":"code","d3d86d90":"code","fd211109":"code","4cfab3e3":"code","d0baeda8":"code","68c124cd":"code","e17486cb":"code","0a251d6b":"code","15bca1b7":"code","e214a995":"code","7032e308":"code","3df5d56b":"code","760c4f0f":"code","42096758":"code","be7cbd06":"code","b9ad4162":"code","510310f2":"code","d91303b3":"code","d282bdcb":"markdown","a9cce940":"markdown","fab1804e":"markdown","eec15be0":"markdown","a94530c2":"markdown","222e72e5":"markdown","8b0ab0c3":"markdown","b774dc2d":"markdown","bc51ee09":"markdown","abb38e84":"markdown","120a025e":"markdown","02e545fb":"markdown","22b59e49":"markdown","e0b8ec44":"markdown","60ea9122":"markdown","8fcaed91":"markdown","58203f84":"markdown","5d2711ba":"markdown","5b67501b":"markdown","cfd84980":"markdown","9c15dd45":"markdown","75ce1711":"markdown","2274ae64":"markdown","113d2c2c":"markdown","8e81f796":"markdown","d9d1ace9":"markdown","ee9745d5":"markdown","0292d0e2":"markdown","8770bbd4":"markdown","68a817e0":"markdown","dd67dab6":"markdown","d9259863":"markdown","eba101e9":"markdown","87476409":"markdown","937bf37c":"markdown","b9d57fc3":"markdown","4d4a40fb":"markdown","0e80092d":"markdown"},"source":{"1d249328":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0fe90a88":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_rows', 11000)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e8d260d2":"brand_data_org = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/bmw.csv')","07ffa3a2":"# Using a copy to play on the safe side, making sure the inital Dataframe won't be modified","68a5589f":"brand_data = brand_data_org.copy()","d4aaf1d9":"brand_data.info()","97bfc206":"# no nulls with appropriate data types","6c2d6b58":"brand_data.describe(include='all')","7a212e35":"# We have 24 unique models but most of the cars are 3 Series\n# 3 different transmission types but most of the cars are Manual transmission\n# 5 different fuel types but most of the cars are running on Diesel\n# It is strange to see min mileage is 1 for used cars!!\n# mpg max = 470!!!! It is not logic to have cars with more than 100 miles per gallon\n# It is also strange to see engine size equal to zero but may be this can be true for electric cars only\n# Let us explore the data in more details","f64e0fa1":"fig, axes = plt.subplots(figsize=(15,8),nrows=2, ncols=3)\nsns.histplot(brand_data['year'],ax=axes[0,0])\nsns.histplot(brand_data['mileage'],ax=axes[0,1])\nsns.histplot(brand_data['tax'],ax=axes[0,2])\nsns.histplot(brand_data['mpg'],ax=axes[1,0])\nsns.histplot(brand_data['engineSize'],ax=axes[1,1])\nsns.histplot(brand_data['price'],ax=axes[1,2])","695001b5":"## year:       Left Skewed, most used cars are between 2015 to 2020\n\n## mileage:    Right Skewed, since most cars are 5 years old. High correlation between mileage and year is clear.\n##             it is also not logic to have mileage of used cars with values very close to zero or even below 50 miles \n##             (as an assumption)\n\n## tax:        Nothing specific can be concluded, however no correlation with any other field can be noticed\n\n## mpg:        Right Skewed, as mentioned above it is strange to have cars with such extremely excessive fuel consumption \n##             (>100 mpg!!) normally, 80 mpg are the max acceptable consumption which can be achieved by Hybrid cars. \n##             Accordingly, anything above 80 will be considered as outliers\n\n## engineSize: Most used cars engine sizes are between 1.5 to 2 (Peak at 2) \n\n## price:      Right Skewed, since most cars are 5 years old. ","1c6fefdc":"fields_correlation = sns.heatmap(brand_data.corr(), cmap=\"YlGnBu\", annot=True)","983d1455":"sns.pairplot(brand_data, kind=\"reg\",plot_kws={'line_kws':{'color':'red'}, 'scatter_kws': {'alpha': 0.1}},diag_kind=\"hist\")","5bedc016":"## -Year & Price are +vely correlated - Recent cars sold at higher prices. Logic \n##  (refer to below graphs year vs mean mileage & year vs mean price)\n\n## -Year & mileage are -vely correlated - As the cars gets older (Year decrease) the mileage driven by the car increases. Logic \n##  (refer to below graph mean price vs [mileage grouped by year])\n##  As year and mileage are highly correlated (High Multicollinearity Excpeted), accordingly year will be dropped after \n##  finishing the preprocessing of data\n\n## -Tax has no significant correlation with any of the other features except with mpg. Tax feature is likely to be dropped out.\n\n## -mpg has no significant correlation with any othe features. \n##  It makes sense that cars with bigger engine size has lower mpg. Surpisingly, low correlation with engine size.  \n##  This maybe due to the different fuel and transmission types.  \n\n## -mpg feature is likely to be dropped as well. \n\n## -Year, mileage, enginesize are the most relevant features affecting car price.","4e4db6c3":"year_mile_avgprice=pd.DataFrame\nyear_mile_avgprice=year_mile_avgprice({'mean_price' : brand_data.groupby( [\"year\",'mileage'] ).mean()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)","4dd08dc6":"import itertools\nmarker = itertools.cycle((',', '+', '.', 'o', '*','s','p','X','d','h','v','^','<','>','1','2','3','4','8','|','_','x')) \nyear_set=sorted(set(year_mile_avgprice['year']), reverse=True)\nplt.figure(figsize=(17,8))\nfor year in year_set:\n     selected_data = year_mile_avgprice.loc[year_mile_avgprice['year'] == year]\n     plt.scatter(selected_data['mileage'], selected_data['mean_price'],marker = next(marker), label=year)\nplt.xlabel('mileage')\nplt.ylabel('mean price')\nplt.legend()","b5898e69":"# Generally, as the the car gets older it is most likely to have been driven more mileages \n# and consequently th mean price get lower\n# Despite the heatmap above shows that years is a bit higher in relation with price than mileage but \n# it is most likely to drop year column instead, because same year includes wide range of mileages\n# however a specific mileage values covers a narrow range of years","95bf8fb2":"brand_data.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","c45a9d6b":"## As shown above a large portion of the prices are considered as outliers\n## This could be due to several reasons:\n## 1. Wide range of models\n## 2. Wide range of engine sizes\n## 3. Wide range of years and mileage\n\n## Therefore, it is not wise to drop all these outliers at this stage","d8b9a1bc":"## Lets try to filter the data for prices above 45,000 and apply box plot again.","e76860c7":"brand_data_above45=brand_data[brand_data['price']>45000]\nbrand_data_above45.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","3a995324":"len(brand_data_above45['price'])","3ba11694":"# now we have only 558 outliers (above 45,000). Dataset total len=10668","ec84c9de":"## Lets try to filter the data for prices above 75,000 and apply box plot again.","7c862e82":"brand_data_above75=brand_data[brand_data['price']>75000]\nbrand_data_above75.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","663db663":"len(brand_data_above75['price'])","b170eec1":"# now we have only 18 outliers (above 75,000). Dataset total len=10781\n# we have one outlier which is also visualized in mileage year mean price graph above (year 2015)","88a76f95":"## Since the number of outliers are very small compared to the total length of the main dataframe (10781 )\n## It is also expected that this number may also reduce further after completing the preprocessing of data\n## The remaining outliers will be eliminated as it will not have much impact on the model.","32efdd1d":"brand_data.boxplot(column=['mileage'], by=['fuelType'],figsize=(15,5),vert=0)","64c2016a":"## First, I do not know what \"Other\" could be !!\n## Most cars are diesel with more mileage compared to other fuel types, however, cars with OTHER fuel type! has the highest \n## mean mileage.","f39039f9":"brand_data.boxplot(column=['mpg'], by=['fuelType'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","0f5798e0":"## Hybrid, Electric and Other offers more miles per gallon upto shocking values","4476228e":"brand_data.boxplot(column=['mpg'], by=['transmission'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","38d8238a":"## Here manual transmission provides a bit more efficient performance","3e281176":"brand_data.boxplot(column=['mpg'], by=['engineSize'],figsize=(15,5))","853870a9":"## it is logic to see cars with zero engine size as we have electric cars\n## Generally, it is logic to observe decrease in mpg with respect to increase in engine size however it is not so clear here!!\n## The first three boxplot are remarkably high and it is assumed to be representing hybrid, electric and other fuelt ype cars\n## This will be investigated below but let us count the data features to exculde any minorities that could distbure\n## the visualization","362559d3":"fig, axes = plt.subplots(figsize=(20,12),nrows=2, ncols=2)\nvis_models = brand_data.groupby(['model']).count()['price'].sort_values(ascending=False)\nvis_ftyp = brand_data.groupby(['fuelType']).count()['price'].sort_values(ascending=False)\nvis_trans = brand_data.groupby(['transmission']).count()['price'].sort_values(ascending=False)\nvis_engS = brand_data.groupby(['engineSize']).count()['price']\nvis_models.plot(ax=axes[0,0],kind='bar',title = 'Count')\nvis_ftyp.plot(ax=axes[0,1],kind='bar',title = 'Count')\nvis_engS.plot(ax=axes[1,0],kind='bar',title = 'Count')\nvis_trans.plot(ax=axes[1,1],kind='bar',rot=360,title = 'Count')","ecfd5e13":"## There are many models that are very few in numbers \n## which maybe not enough for the model to be able to accurately \n## predict their price later.\n## The same also applies on the engineSize. \n## it is also noticeable that most of the cars are of size 2.\n## Most users prefer semi-automatic and automatic cars rather than the manual ones. \n## There are not enoguh records for other and electric cars, accordingly it will be filtered out for better visulaization \n## of features affecting the mpg of a car and will also be dropped later.","3d765c3d":"## Now let us check the effect of the fuel type and transmission along with engine size on the mpg of the car\n## but in order to have good visualization, I will visualize engine size vs mpg for each specific fuel type and transmission\n## I will also remove engine size = zero and Hybrid casrs as well","bda22478":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Automatic']\ndf=df[df['fuelType']!='Other']\ndf=df[df['fuelType']!='Electric']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","24636f7a":"## Here mpg it is better visualized the decrease of mpg as engine size increases but still it seems to be of no effect from \n## 3.2 to 6.6!!\n## Most the boxplot of Hybrid cars @ engine size 3 is strange ( the variation is very high )\n## the overall mpg range for hybrid cars seems exaggerated","23e0080f":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Semi-Auto']\ndf=df[df['fuelType']!='Other']\ndf=df[df['fuelType']!='Electric']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","906f71e8":"## For Semi automatic cars, same comments applies","ffdaaa31":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Manual']\ndf=df[df['fuelType']!='Other']\ndf=df[df['fuelType']!='Electric']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","d2d7bc47":"## No hybrid cars with manual transmission\n## Here the diesel is clearly providing better performance than petrol and the decrease in mpg \n## is more clear as engine size increase","f5d9d4e3":"brand_data.boxplot(column=['price'], by=['year'],figsize=(15,5))","b1fe6022":"## As shown the range of prices is higher for recent cars","92bbf6b2":"brand_data.boxplot(column=['price'], by=['model'],figsize=(15,5),rot=45)","3a1cbf98":"## we do not have so many outliers in price per model ","4b6297d0":"fig, axes = plt.subplots(figsize=(15,12),nrows=2, ncols=2)\nvis_models = brand_data.groupby(['model']).mean()['price'].sort_values(ascending=False)\nvis_trans = brand_data.groupby(['transmission']).mean()['price'].sort_values(ascending=False)\nvis_ftyp = brand_data.groupby(['fuelType']).mean()['price'].sort_values(ascending=False)\nvis_engS = brand_data.groupby(['engineSize']).mean()['price'].sort_values(ascending=False)\nvis_models.plot(ax=axes[0,0],kind='bar',title = 'mean price')\nvis_engS.plot(ax=axes[0,1],kind='bar',title = 'mean price')\nvis_trans.plot(ax=axes[1,0],kind='bar',rot=360,title = 'mean price')\nvis_ftyp.plot(ax=axes[1,1],kind='bar',rot=360,title = 'mean price')","5a4342ee":"# As concluded above that tax and mpg has no correlation with price or any other feature\n# Tax and mpg columns will be dropped","1ad8ab39":"brand_notax=brand_data.drop(['tax'], axis=1)","aa77209e":"brand_notaxmpg=brand_notax.drop(['mpg'], axis=1)","4951aea3":"brand_notaxmpg.head()","1dac019f":"## there are some zero entries in the mileage. We are concerned with used cars\n## Accordingly we will delete any car below 50 mileage records","4ae92f55":"mile_min = 50\nbrand_mile = brand_notaxmpg[brand_notaxmpg['mileage']>=mile_min]","7cdb36a4":"sns.histplot(brand_mile['mileage'])","37884a42":"## we will try to remove the mileage outliers by keeping the records upto 99% quartile","9ff26537":"mile_skewness=brand_mile['mileage'].skew(axis = 0, skipna = True)","b7eac90c":"if mile_skewness>1:\n    q = brand_mile['mileage'].quantile(0.99)\n    brand_mile= brand_mile[brand_mile['mileage']<q]\nelif mile_skewness<-1:\n    q = brand_mile['mileage'].quantile(0.01)\n    brand_mile= brand_mile[brand_data_mile['mileage']>q]","e59fbf53":"sns.histplot(brand_mile['mileage'])","839908f6":"sns.histplot(brand_mile['year'])","92bc915c":"## we will try to remove the year outliers by keeping the records above 1% quartile","0e0a9574":"brand_year=brand_mile.copy()\nyear_skewness=brand_year['year'].skew(axis = 0, skipna = True)","1fb340c5":"if year_skewness>1:\n    q = brand_year['year'].quantile(0.99)\n    brand_year= brand_year[brand_year['year']<q]\nelif year_skewness<-1:\n    q = brand_year['year'].quantile(0.01)\n    brand_year= brand_year[brand_year['year']>q]","ceb3e48e":"sns.histplot(brand_year['year'])","1d3c9b1a":"sns.histplot(brand_year['engineSize'])","386cb289":"# We can drop Zero enginesizes or any above 5","f7c34e4c":"brand_engsZ=brand_year.copy()","4b7ca9d2":"brand_engsZ = brand_engsZ[brand_engsZ.engineSize != 0]\nbrand_engsZ.drop(brand_engsZ.index[brand_engsZ['engineSize'] > 5], inplace = True)","b05ae74c":"sns.histplot(brand_engsZ['engineSize'])","3a885056":"brand_fuel=brand_engsZ.copy()\nbrand_fuel = brand_fuel[brand_fuel.fuelType != 'Electric']\nbrand_fuel = brand_fuel[brand_fuel.fuelType != 'Other']","0533ef9b":"vis_ftyp = brand_fuel.groupby(['fuelType']).count()['price'].sort_values(ascending=False)","d78f05b1":"vis_ftyp.plot(kind='bar')\nplt.show()","140dbc58":"# Electric and Other Cars have been dropped","2a2915af":"brand_models=brand_fuel.copy()","5e60d4ad":"vis_models = brand_models.groupby(['model']).count()['price'].sort_values(ascending=False)","974e0506":"vis_models.plot(kind='bar')\nplt.show()","2893115e":"# there are still some models with very few records\n# I will filter those model with only 1 record for now","0bb11638":"brand_model_count=pd.DataFrame\n\nbrand_model_count=brand_model_count({'counts' : brand_models.groupby( [ \"model\"] ).size()}).reset_index()\n\nmin_count=1\n\ncounts_sum=brand_model_count['counts'].sum(axis=0)\nbrand_model_count.drop(brand_model_count[brand_model_count.counts >= min_count].index, inplace=True)\n\na=brand_model_count['model'].tolist()\n\nfor i in range (0,len(a)):\n    brand_models.drop(brand_models[brand_models.model == a[i]].index,inplace=True)\n\nvis_audi_models = brand_models.groupby(['model']).count()['price'].sort_values(ascending=False)\n\nvis_audi_models.plot(kind='bar')\nplt.show()","02953086":"sns.histplot(brand_models['price'])","977240b7":"brand_models.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch =True,vert=0)","5eca7046":"# After these processing no remarkable effect is noticed on the price boxplot compared to the pervious one","4f7b6186":"price_skewness=brand_models['price'].skew(axis = 0, skipna = True)\nprice_skewness","c7307dfd":"# price is still highly skewed, we will try to visualize price with model and year for more better spotting of outliers","68b0c68e":"brand_models.boxplot(column=['price'], by=['model','year'],figsize=(30,5),rot=90)","eaf300c1":"# we need to remove price outliers based on model type and year (Assuming that those are the most effective features).\n# we are going to calculate filter between 90% & 95% of each model_year price distribution \n# and exclude the rest in case the price variation is high (coefficient of varitaion >0.7)","b1381fb4":"model_cstat=pd.DataFrame\nmodel_mstat=pd.DataFrame\nmodel_sdstat=pd.DataFrame\nmodel_cstat=model_cstat({'cnt_price' : brand_models.groupby( [ \"model\",\"year\"] ).count()[\"price\"]}).reset_index()\nmodel_mstat=model_mstat({'mean_price' : brand_models.groupby( [ \"model\",\"year\"] ).mean()[\"price\"]}).reset_index()\nmodel_sdstat=model_sdstat({'std_price' : brand_models.groupby( [ \"model\",\"year\"] ).std()[\"price\"]}).reset_index()\nmodel_stats1 = pd.merge(model_cstat, model_mstat, on=[\"model\", \"year\"])\nmodel_stats2 = pd.merge(model_stats1, model_sdstat, on=[\"model\", \"year\"])\n\nmodel_stats2['std_price'] = model_stats2['std_price'].fillna(0)\n\nmodels_prices=brand_models.copy()\n\nmodels_prices = models_prices.merge(model_stats2, how='inner', left_on=[\"model\", \"year\"], right_on=[\"model\",\"year\"])\nx=1.5\ny=0.7\nmodels_prices['var_coeff']=models_prices['std_price']\/models_prices['mean_price']\nmodels_prices['price_L95']=models_prices['mean_price']-x*models_prices['std_price']\nmodels_prices['price_R95']=models_prices['mean_price']+x*models_prices['std_price']\nmodels_prices['price_L95'] =models_prices['price_L95'].astype(int)\nmodels_prices['price_R95'] =models_prices['price_R95'].astype(int)\n\ndef drop_price(models_prices):\n\n    if (models_prices['var_coeff']>y) and (models_prices['cnt_price'] <4):\n        return 'drop'\n    elif (models_prices['price'] > models_prices['price_R95']) or (models_prices['price'] < models_prices['price_L95']):\n        return 'drop'\n    else:\n        return 'keep'\nmodels_prices['drop_price'] = models_prices.apply(drop_price, axis = 1)\nmodels_prices = models_prices[models_prices.drop_price !='drop']","d2b076d5":"models_prices.boxplot(column=['price'], by=['model','year'],figsize=(30,5),rot=90)","c3dc137a":"price_skewness=models_prices['price'].skew(axis = 0, skipna = True)\nprice_skewness","3b327cb2":"# Skewness slightly decreased and as you can see only the oultiers of specific model and year has been cleaned.","a96adcb9":"# Let us calculate the percentage of records removed out of the original dataset","acee447c":"data_removed_perct=100*(len(brand_data)-len(models_prices))\/len(brand_data)\ndata_removed_perct","d3d86d90":"# Data removed is a bit high but accepted","fd211109":"Brand_preprocessed=models_prices.copy()","4cfab3e3":"Brand_preprocessed=Brand_preprocessed.reset_index(drop=True)","d0baeda8":"Brand_preprocessed.info()","68c124cd":"Brand_preprocessed.columns.values","e17486cb":"cols=['price','model', 'year', 'transmission', 'mileage', 'fuelType',\n      'engineSize', 'cnt_price', 'mean_price', 'std_price',\n      'var_coeff', 'price_L95', 'price_R95', 'drop_price']","0a251d6b":"brand_arranged=Brand_preprocessed.copy()\nbrand_arranged=Brand_preprocessed[cols]","15bca1b7":"brand_arranged=brand_arranged.drop(['cnt_price', 'mean_price', 'std_price',\n       'var_coeff', 'price_L95', 'price_R95', 'drop_price'], axis=1)","e214a995":"brand_arranged.describe(include='all')","7032e308":"year_model_mmile=pd.DataFrame\nyear_model_mmile=year_model_mmile({'mean_mileage' : brand_arranged.groupby( [\"year\",'model'] ).mean()[\"mileage\"]}).reset_index().sort_values(by='year',ascending=True)","3df5d56b":"model_set=sorted(set(year_model_mmile['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mmile.loc[year_model_mmile['model'] == model]\n     plt.plot(selected_data['year'], selected_data['mean_mileage'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('mean mileage')\nplt.legend()","760c4f0f":"## Generally, mileage is higher for older cars","42096758":"year_model_mprice=pd.DataFrame\nyear_model_mprice=year_model_mprice({'mean_price' : brand_arranged.groupby( [\"year\",'model'] ).mean()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mprice.loc[year_model_mprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['mean_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('mean price')\nplt.legend()\nplt.show()","be7cbd06":"year_model_mnprice=pd.DataFrame\nyear_model_mnprice=year_model_mnprice({'min_price' : brand_arranged.groupby( [\"year\",'model'] ).min()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mnprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mnprice.loc[year_model_mnprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['min_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('min price')\nplt.legend()\nplt.show()","b9ad4162":"year_model_mxprice=pd.DataFrame\nyear_model_mxprice=year_model_mxprice({'max_price' : brand_arranged.groupby( [\"year\",'model'] ).max()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mxprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mxprice.loc[year_model_mxprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['max_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('max price')\nplt.legend()\nplt.show()","510310f2":"brand_final=brand_arranged.drop(['year'], axis=1)","d91303b3":"# The remaining brands has been explored and preproceesed in the same manner and saved as csv\n\n  # https:\/\/www.kaggle.com\/enginsights\/vw-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/vauxhall-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/hyundai-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/audi-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/mercedes-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/skoda-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/toyota-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/ford-preprocessing-and-exploration\n\n# All CSVs of processed data of all brands will be imported to separate notebook where a regression model is applied\n\n# Please refer to 100K UK Used Cars Model\n\n  # https:\/\/www.kaggle.com\/enginsights\/100k-uk-used-cars-model","d282bdcb":"### Year-Model vs Min Price","a9cce940":"### Year-Model Vs Mean Mileage","fab1804e":"### Price and model","eec15be0":"### mileage vs mean price [grouped by year]","a94530c2":"### Year-Model vs Mean Price","222e72e5":"## Preprocessing","8b0ab0c3":"### Year Feature","b774dc2d":"### Fuel Type and mpg","bc51ee09":"## Dropping Unwanted Fields","abb38e84":"### Mean Price vs Other Features","120a025e":"# Packages","02e545fb":"### price and year ","22b59e49":"### Model","e0b8ec44":"### Tax feature","60ea9122":"# Loading Data","8fcaed91":"## Additional Graphs after Processing Data","58203f84":"### Data Fields Distribution Graphs","5d2711ba":"## Brand","5b67501b":"## Finding Correlations","cfd84980":"### Correlogram for additional visulatization of the relation between each two features ","9c15dd45":"### mpg and transmission","75ce1711":"### Preocessing Checkpoint","2274ae64":"## Re-arranging Columns","113d2c2c":"### Count of Features","8e81f796":"### Engine Size feature","d9d1ace9":"### Price","ee9745d5":"## Further Exploration of Data (Categorical Features and Outliers Visulaization)","0292d0e2":"#### Observations","8770bbd4":"## Copying Datasets","68a817e0":"# Exploring Dataset","dd67dab6":"### Fuel Type and Mileage","d9259863":"### mpg, fuel type and transmission","eba101e9":"### Year-Model vs Max Price","87476409":"### Mileage feature","937bf37c":"### Fuel Type","b9d57fc3":"### mpg and engine size","4d4a40fb":"### Price","0e80092d":"## Data Exploration"}}