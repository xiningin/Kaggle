{"cell_type":{"ef346f84":"code","b8c1ee66":"code","4a6fb8ad":"code","9032e952":"code","411a7025":"code","b5c4ff2a":"code","0f5033a2":"code","8a47e08b":"code","48e944eb":"code","15dc0f8c":"code","72e6b8a8":"code","255f2552":"code","c8700666":"code","6b15d867":"code","de4aa104":"code","1bb01848":"code","4b6e664a":"code","e3b31a91":"code","0c7b2eb4":"code","30f06178":"code","aaeb0c30":"code","d922638c":"code","3c439e14":"markdown","7de4c0e1":"markdown","bdf4d07b":"markdown","752b9bc9":"markdown","eecee9a3":"markdown","15ce7feb":"markdown","04e56fc4":"markdown","aba45ef6":"markdown"},"source":{"ef346f84":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b8c1ee66":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import confusion_matrix,classification_report,roc_auc_score,roc_curve\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nimport matplotlib.pyplot as plt\nimport seaborn as sns","4a6fb8ad":"df = pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")\ndf.head()","9032e952":"df.isnull().sum()","411a7025":"df.describe().T","b5c4ff2a":"diabetes = df.copy()\n\ndiabetes[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = diabetes[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)","0f5033a2":"diabetes.isnull().sum()","8a47e08b":"df.hist(figsize=(15,15))","48e944eb":"diabetes['Glucose'].fillna(diabetes['Glucose'].median(), inplace = True)\ndiabetes['BloodPressure'].fillna(diabetes['BloodPressure'].mean(), inplace = True)\ndiabetes['SkinThickness'].fillna(diabetes['SkinThickness'].mean(), inplace = True)\ndiabetes['Insulin'].fillna(diabetes['Insulin'].median(), inplace = True)\ndiabetes['BMI'].fillna(diabetes['BMI'].median(), inplace = True)","15dc0f8c":"diabetes.describe().T","72e6b8a8":"diabetes.hist(figsize=(15,15))","255f2552":"print(diabetes['Outcome'].value_counts())\nsns.countplot(diabetes['Outcome'])","c8700666":"plt.figure(figsize=(15,15))\ncorr = diabetes.corr()\nsns.heatmap(corr,annot=True)","6b15d867":"X = diabetes.drop('Outcome',axis=1)\ny = diabetes['Outcome']","de4aa104":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)","1bb01848":"scale = MinMaxScaler()\nX_train = scale.fit_transform(X_train)\nX_test = scale.fit_transform(X_test)","4b6e664a":"lg = LogisticRegression()\nlg.fit(X_train,y_train)\nlg_pred = lg.predict(X_test)","e3b31a91":"p = sns.heatmap(pd.DataFrame(confusion_matrix(y_test, lg_pred)), annot=True,fmt='g')\nplt.title('Confusion matrix',y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\n","0c7b2eb4":"print(classification_report(y_test,lg_pred))","30f06178":"y_pred_proba = lg.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)","aaeb0c30":"plt.plot([0,1],[0,1],'--')\nplt.plot(fpr,tpr, label='LG')\nplt.xlabel('fpr')\nplt.ylabel('tpr')\nplt.title('Logistic Regression ROC curve')\nplt.show()","d922638c":"print(\"The AUC score for the given model is :\",roc_auc_score(y_test,y_pred_proba))","3c439e14":"****Ahh !! Null values are there we will replace them by their mean or median based on their distributions shown below****","7de4c0e1":"* **WOW! no null values are present ! but.....**","bdf4d07b":"**As you can see all the features are correlated with outcome hence,we will use them all for our model**","752b9bc9":"**As you saw in the Dataframe There are 0 values in Some Columns**\n* Glucose\n* BloodPressure\n* SkinThickness\n* Insulin\n* BMI\n\n**This is not possible as these values cannot be zero ..these are null values**","eecee9a3":"**The recall rate of 0 is more as there are high in number compared to 1**","15ce7feb":"**Great ! Null values are replaced now we can carry on**","04e56fc4":"**Do Upvote the notebook if you find it useful...Share your views to improve the model in the comments section <3**","aba45ef6":"**Creating a copy of data**"}}