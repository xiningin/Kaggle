{"cell_type":{"a5bf9af0":"code","8e5d6094":"code","f16e7954":"code","3bbcd1fe":"code","02f50766":"code","2850627c":"code","e13b636d":"code","d18dff12":"code","d5662ec2":"code","a264165d":"code","b2012cba":"code","1342d0be":"code","12c2b8fc":"code","5a4c4e0f":"code","553b564e":"code","15b73ef1":"code","ce6533b7":"code","caa137c2":"code","b0870316":"code","c327bee7":"code","f72e95b7":"code","84b2d607":"code","b44b8eb0":"code","2f677e41":"code","927bbd03":"code","dcb8bda9":"code","9bd14d72":"code","d07d4827":"code","25c44bae":"code","2da3378e":"code","16375d1f":"code","d5203e8c":"code","c11f7e93":"code","3974d72b":"code","f270ced6":"code","cc4fc5c5":"code","6d50f0a7":"code","a2063692":"code","9d387c00":"code","d543dc26":"code","3ee47a64":"code","1047df4f":"code","cd2347a5":"code","06371da9":"code","fa50aa2e":"code","d329128b":"code","54066a50":"code","139bcebc":"code","113533a4":"code","3409c8c8":"code","b4973651":"code","98face62":"code","1dfc5fe0":"code","c07670b1":"code","b48f989d":"code","85d7b837":"code","2d70d699":"code","439413ca":"code","3efbba95":"code","3f485818":"code","3941db3b":"code","5828a9bb":"code","5125b360":"code","dad891c5":"code","52570c0d":"code","6d59cc1f":"code","16bf2058":"code","7f2344ef":"code","517ac2ee":"code","506b9beb":"code","8c617686":"code","ac7ed9c8":"code","f8ec21cd":"code","94fd004a":"code","cbca976d":"code","f4914400":"code","12df2216":"code","e6f9fbe9":"code","b135b6c8":"code","91c56b38":"code","55951d54":"code","8337c171":"code","20a41fe0":"code","d7c87c3a":"code","e04ebff6":"code","3e7f2e2d":"code","433014f0":"code","a30d0c0c":"code","10d4c854":"code","ae38563f":"code","e7e7cf10":"code","36e5dbf2":"code","ca309408":"code","98f29721":"code","9c04c277":"code","91227136":"code","d3827bcf":"code","6f8dead4":"code","60c8b336":"code","7f2afb9b":"code","e7a2d55e":"code","76b2a954":"code","92b807e4":"code","4fbab329":"code","b7c93db2":"code","5ca1d1cf":"code","f15c6caa":"code","3eb21f1b":"code","a930fb78":"code","068dd97d":"code","9c9fb5f2":"code","3dae7663":"code","a44d1098":"code","5901c17a":"code","e666de3e":"code","c58783b2":"code","4afa589f":"code","015b06c2":"code","78138b8a":"code","d3c80fd4":"code","e1ae60b5":"code","6ec12be8":"code","9c6b80b4":"code","0daf064b":"code","12608f3d":"code","f7048642":"code","591b725b":"code","768ad608":"code","aafa0d53":"code","711f3d51":"code","8b831a7d":"code","e01bfa74":"code","28293099":"code","bf69760e":"code","7aefe5e6":"code","04f622fc":"code","e68f1ea1":"code","7408b106":"code","c67cd9a9":"code","ffcac1f5":"code","84102afb":"code","b234c086":"code","898d5750":"code","5d32f977":"code","7b1269bf":"code","89eeb54e":"code","70762ba3":"code","88e7b7da":"code","99d315cf":"code","585a0905":"code","f6885436":"code","c9a72bb6":"code","cd740de8":"code","53b42779":"code","336764b7":"code","77b53757":"code","3f31d87d":"code","518fde57":"code","810f1acf":"code","f58ec249":"code","b2a55218":"code","616a297c":"code","7d9f8e0e":"code","61574591":"code","1db2925b":"code","aea88132":"code","27562046":"code","a170aa4b":"code","cb8bbca6":"code","c2c89e9a":"code","802313fe":"code","76c07a1b":"code","ee11a5bb":"code","744684a4":"code","fd413b02":"code","2fb24df9":"code","202821da":"code","6bd96bc9":"code","1d81d775":"code","866cadae":"code","a0b4261f":"code","d1c3fdf9":"code","2833acf9":"code","0e508d64":"code","9bfd87d0":"code","72be6a5e":"code","d5ad8035":"code","5877279c":"code","6985d88b":"code","96991eb5":"code","80131c70":"code","bd8a6e7d":"code","33a513be":"code","aafb581d":"markdown","100ac722":"markdown","bf2d4acc":"markdown","26f80e49":"markdown","aef8d1d9":"markdown","a87dd183":"markdown","0097f2e4":"markdown","17aef37d":"markdown","6de1c74e":"markdown","3fc9e7a0":"markdown","e19002f1":"markdown","2bb325ec":"markdown","9b950939":"markdown","3bb997c3":"markdown","b840723d":"markdown","ac6feb9d":"markdown","a8a1b818":"markdown","74e6172b":"markdown","ac3363c4":"markdown","fb4b0a87":"markdown","d34d172d":"markdown","63249fff":"markdown","2f832089":"markdown","1aa881cd":"markdown","ba61bdd2":"markdown","f688c5ab":"markdown","6543f0e0":"markdown","85fb48d8":"markdown","e72a33d4":"markdown","3489b8ca":"markdown","5463133a":"markdown","efcc3130":"markdown","709ab876":"markdown","17173e97":"markdown","691f2a94":"markdown","9b0c9caa":"markdown","5230e6e1":"markdown","5dbf821b":"markdown","cd84291d":"markdown","98eeb524":"markdown","ef2e4cd1":"markdown","4233f509":"markdown","40379ffa":"markdown","8bc28679":"markdown","d1328f32":"markdown","d909c4e1":"markdown","fdc416d4":"markdown","32526252":"markdown","60c2877f":"markdown","f00db16f":"markdown","ef6f5eab":"markdown","93fdf3d1":"markdown","d1602137":"markdown","05dab26b":"markdown","e60edbaf":"markdown","aa6064b4":"markdown","fcf616f4":"markdown","d9fe39b2":"markdown","e5ab57f6":"markdown","e2a4f858":"markdown","66cfb0e6":"markdown","f2b0650f":"markdown","37b94635":"markdown","3f4428ea":"markdown","c2c560be":"markdown","ddd82498":"markdown","a3d03bf8":"markdown","3be43823":"markdown"},"source":{"a5bf9af0":"%matplotlib inline\n\n# Numerical libraries\nimport numpy as np  \n\n# to handle data in form of rows and columns \nimport pandas as pd  \n\n# preprocessing\nfrom sklearn.preprocessing import StandardScaler\n\n\n#Sklearn package's data splitting function which is based on random function\nfrom sklearn.model_selection import train_test_split\n\n# calculate accuracy measures and confusion matrix\nfrom sklearn import metrics  \n\n# importing ploting libraries\nimport matplotlib.pyplot as plt   \n\n#importing seaborn for statistical plots\nimport seaborn as sns\n\n# Label encoder \nfrom sklearn.preprocessing import LabelEncoder\n\n# Support Vector Classifier\nfrom sklearn.svm import SVC\n\n# PCA Related\nfrom sklearn.decomposition import PCA\n\n# To calculate the accuracy score of the model\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\n# Cross Validation related\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\n\n","8e5d6094":"#load the csv file and make the data frame\ndf = pd.read_csv('\/kaggle\/input\/vehicle\/vehicle.csv')","f16e7954":"df.head()","3bbcd1fe":"df.shape\n# 846 rows, 19 columns","02f50766":"# Check data type and other imp information of each column\ndf.info()","2850627c":"# All fields are numeric except class- no need to convert data types\n# There are missing values in many columns like circularity, distance circularity, radius ratio .. etc","e13b636d":"# Explore distribution of vehicle in each class\ndf['class'].value_counts()","d18dff12":"# Cars are almost double in number as compared to bus and van. van is least in number","d5662ec2":"#Label encode the target class\nlabelencoder = LabelEncoder()\ndf['class'] = labelencoder.fit_transform(df['class'])\ndf['class'].value_counts()","a264165d":"#1-car\n#0-bus\n#2-van","b2012cba":"\nsns.pairplot(df,diag_kind='kde',hue='class')","1342d0be":"df.corr()","12c2b8fc":"# Heatmap\n#Correlation Matrix\ncorr = df.corr() # correlation matrix\nlower_triangle = np.tril(corr, k = -1)  # select only the lower triangle of the correlation matrix\nmask = lower_triangle == 0  # to mask the upper triangle in the following heatmap\n\nplt.figure(figsize = (15,8))  # setting the figure size\nsns.set_style(style = 'white')  # Setting it to white so that we do not see the grid lines\nsns.heatmap(lower_triangle, center=0.5, cmap= 'Blues', annot= True, xticklabels = corr.index, yticklabels = corr.columns,\n            cbar= False, linewidths= 1, mask = mask)   # Da Heatmap\nplt.xticks(rotation = 50)   # Aesthetic purposes\nplt.yticks(rotation = 20)   # Aesthetic purposes\nplt.show()","5a4c4e0f":"df.describe().T","553b564e":"#Columns having missing values\nmissing_values_cols=df.columns[df.isnull().any()]\n# Number of missing values in each column\ndf[missing_values_cols].isnull().sum()","15b73ef1":"#List all the rows having missing value in any of the single or multiple columns\n\ndf[df.isnull().any(axis=1)][missing_values_cols].head()","ce6533b7":"df[df.isnull().any(axis=1)][missing_values_cols].shape","caa137c2":"df[df['circularity'].isnull()][missing_values_cols]","b0870316":"# 5 rows have missing vales for circularity. one of the 5 rows alsq has missing value for distance_circularity. \n# Another row has missing values for scaled valiance and skewness_about.1. One of the row has missing value for scaled_radius_of_gyration.\n# We will drop those rows which has missing value in any other coulmn as well apart from circularity which is 3. \n# will impute missing value in rest 2 rows.","c327bee7":"# Row 105,118,266 has missing values in more than 1 column. drop those\ndf.drop([105,118,266], inplace=True)","f72e95b7":"# Now lets Check the class level of remaining 2 rows- we will replace the value with median value of the corresponding class\ndf.loc[5].loc['class'],df.loc[396].loc['class']","84b2d607":"# Belong to Bus Class\nMedian_circularity_bus=df['circularity'][df['class']==0].median()\nMedian_circularity_bus","b44b8eb0":"df['circularity'].fillna(Median_circularity_bus, inplace=True)","2f677e41":"# Douple Check if missing values have been teated for curcularity\ndf[df['circularity'].isnull()][missing_values_cols]","927bbd03":"# Missing value for Circularity treated","dcb8bda9":"df[df['distance_circularity'].isnull()][missing_values_cols]","9bd14d72":"# 3 rows have missing values. row 207 has missing  values in more than 1 column- we will drop this\n# row 35, 319 have missing values in just one column, We will fill it woth median of the corresponding class","d07d4827":"df.drop(207, inplace=True)","25c44bae":"df.shape","2da3378e":"# Now lets Check the class lavel of remeining 2 rows- we will replace the value with median value of the corresponding class\ndf.loc[35].loc['class'],df.loc[319].loc['class']","16375d1f":"Median_distance_circularity_van=df['distance_circularity'][df['class']==2].median()\nMedian_distance_circularity_bus=df['distance_circularity'][df['class']==0].median()\nMedian_distance_circularity_van,Median_distance_circularity_bus","d5203e8c":"df.loc[35]=df.loc[35].replace(np.nan,Median_distance_circularity_van)","c11f7e93":"df.loc[319]=df.loc[319].replace(np.nan,Median_distance_circularity_bus)","3974d72b":"df.loc[[35,319]]","f270ced6":"# Double Check if missing values have been handled\ndf[df['distance_circularity'].isnull()][missing_values_cols]\n\n","cc4fc5c5":"#Missing values handled for dian_distance_circularity","6d50f0a7":"df[df['radius_ratio'].isnull()][missing_values_cols]","a2063692":"# For all the rows with missing radius_ratio only radius ratio is having missing values all the other columns have values.\n# We will not drop any rather replace with median of corresponding class.","9d387c00":"df.loc[[9,78,159,287,345,467]]['class']","d543dc26":"# Lets find median value for car, bus,van\nMedian_distance_radius_ratio_van=df['radius_ratio'][df['class']==2].median()\nMedian_distance_radius_ratio_bus=df['radius_ratio'][df['class']==0].median()\nMedian_distance_radius_ratio_car=df['radius_ratio'][df['class']==1].median()\nMedian_distance_radius_ratio_van,Median_distance_radius_ratio_bus,Median_distance_radius_ratio_car","3ee47a64":"# replace rows 9,159 and 467 with car median, 78,345 with bus median and 287 with  van","1047df4f":"df.loc[[9,159,467]]=df.loc[[9,159,467]].replace(np.nan,Median_distance_radius_ratio_car)","cd2347a5":"df.loc[[9,159,467]]","06371da9":"df.loc[[78,345 ]]=df.loc[[ 78,345 ]].replace(np.nan,Median_distance_radius_ratio_bus)","fa50aa2e":"df.loc[[78,345 ]]","d329128b":"df.loc[287]=df.loc[287].replace(np.nan,Median_distance_radius_ratio_van)","54066a50":"df.loc[[287]]","139bcebc":"df[df['pr.axis_aspect_ratio'].isnull()][missing_values_cols]","113533a4":"# There are 2 rows with missing values. One row has missing value in one more column in addityion to pr.axis_aspect_ratio\n# We will drop that row but treat the missing value in pr.axis_aspect_ratio with median of corresponding class","3409c8c8":"# drop row 222\ndf.drop(222, inplace=True)","b4973651":"df.loc[19]['class']","98face62":"\nMedian_distance_pr_axis_aspect_ratio_car=df['pr.axis_aspect_ratio'][df['class']==1].median()\nMedian_distance_pr_axis_aspect_ratio_car","1dfc5fe0":"df.loc[19]=df.loc[19].replace(np.nan,Median_distance_pr_axis_aspect_ratio_car)","c07670b1":"df[df['pr.axis_aspect_ratio'].isnull()][missing_values_cols]","b48f989d":"df[df['scatter_ratio'].isnull()][missing_values_cols]","85d7b837":"# Only one row and 2 cols have missing value in that row including scatter_ratio\n# we will drop this row","2d70d699":"df.drop(249, inplace=True)","439413ca":"df[df['elongatedness'].isnull()][missing_values_cols]","3efbba95":"df.loc[215]['class']","3f485818":"Median_distance_elongatedness_car=df['elongatedness'][df['class']==1].median()\nMedian_distance_elongatedness_car","3941db3b":"df.loc[215]=df.loc[215].replace(np.nan,Median_distance_elongatedness_car)","5828a9bb":"df[df['elongatedness'].isnull()][missing_values_cols]","5125b360":"df[df['pr.axis_rectangularity'].isnull()][missing_values_cols]","dad891c5":"# 3 rows have missing values for pr.axis_rectangularity and only this column has missing value\n# We will replace this with median value of the corresponding class","52570c0d":"#lets loom at class level of the missing rows\ndf.loc[[70,237,273]]['class']","6d59cc1f":"Median_distance_pr_axis_rectangularity_van=df['pr.axis_rectangularity'][df['class']==2].median()\nMedian_distance_pr_axis_rectangularity_car=df['pr.axis_rectangularity'][df['class']==1].median()\nMedian_distance_pr_axis_rectangularity_bus=df['pr.axis_rectangularity'][df['class']==0].median()\nMedian_distance_pr_axis_rectangularity_van,Median_distance_pr_axis_rectangularity_car,Median_distance_pr_axis_rectangularity_bus","16bf2058":"df.loc[70]=df.loc[70].replace(np.nan,Median_distance_pr_axis_rectangularity_car)\ndf.loc[237]=df.loc[237].replace(np.nan,Median_distance_pr_axis_rectangularity_bus)\ndf.loc[273]=df.loc[273].replace(np.nan,Median_distance_pr_axis_rectangularity_van)","7f2344ef":"# Double Check if missing values have been treated\ndf[df['pr.axis_rectangularity'].isnull()][missing_values_cols]","517ac2ee":"df[df['scaled_variance'].isnull()][missing_values_cols]","506b9beb":"# 2 rows have missing values for scaled_variance, no other columns have missing values for these rows. We will replace with median\n# of corresponding class","8c617686":"df.loc[[372,522]]['class']","ac7ed9c8":"Median_distance_scaled_variance_van=df['scaled_variance'][df['class']==2].median()\nMedian_distance_scaled_variance_car=df['scaled_variance'][df['class']==1].median()\nMedian_distance_scaled_variance_van,Median_distance_scaled_variance_car","f8ec21cd":"df.loc[372]=df.loc[372].replace(np.nan,Median_distance_scaled_variance_van)\ndf.loc[522]=df.loc[522].replace(np.nan,Median_distance_scaled_variance_car)","94fd004a":"df[df['scaled_variance'].isnull()][missing_values_cols]","cbca976d":"df[df['scaled_variance.1'].isnull()][missing_values_cols]","f4914400":"# 2 rows have missing values for scaled_variance, no other columns have missing values for these rows. We will replace with median\n# of corresponding class","12df2216":"df.loc[[308,496]]['class']","e6f9fbe9":"Median_distance_scaled_variance1_car=df['scaled_variance.1'][df['class']==1].median()\nMedian_distance_scaled_variance1_car","b135b6c8":"df.loc[[308,496]]=df.loc[[ 308,496]].replace(np.nan,Median_distance_scaled_variance1_car)","91c56b38":"df[df['scaled_variance.1'].isnull()][missing_values_cols]","55951d54":"df[df['scaled_radius_of_gyration.1'].isnull()][missing_values_cols]","8337c171":"# there are 4  rows with scaled_radius_of_gyration.1 as missing values\n# row with index 66 has missing values in 2 columns- will be dropped\n# Other 3 rows missing values will be replaced with median value of cotresponding class","20a41fe0":"# Drop row 66\ndf.drop(66, inplace=True)","d7c87c3a":"df.loc[[77,192,329]]['class']\n","e04ebff6":"Median_distance_radius_gyr1_car=df['scaled_radius_of_gyration.1'][df['class']==1].median()\nMedian_distance_radius_gyr1_car","3e7f2e2d":"df.loc[[77,192,329]]=df.loc[[ 77,192,329]].replace(np.nan,Median_distance_radius_gyr1_car)","433014f0":"df[df['scaled_radius_of_gyration.1'].isnull()][missing_values_cols]","a30d0c0c":"df[df['skewness_about'].isnull()][missing_values_cols]","10d4c854":"# 3 rows have missing values  in skewness_about column , no other column has missing value for these rows. \n# we will replace these values with median of the corresponding class","ae38563f":"df.loc[[141,177,285]]['class']","e7e7cf10":"Median_distance_skewness_about_car=df['skewness_about'][df['class']==1].median()\nMedian_distance_skewness_about_bus=df['skewness_about'][df['class']==0].median()\nMedian_distance_skewness_about_car,Median_distance_skewness_about_bus","36e5dbf2":"df.loc[[141,177]]=df.loc[[141,177]].replace(np.nan,Median_distance_skewness_about_bus)","ca309408":"df.loc[[285]]=df.loc[[285]].replace(np.nan,Median_distance_skewness_about_car)","98f29721":"df[df['skewness_about'].isnull()][missing_values_cols]","9c04c277":"df[df['skewness_about.1'].isnull()][missing_values_cols]","91227136":"#  No longer Missing values- corresponding row\n#has been dropped while treating other missing values","d3827bcf":"df[df['skewness_about.2'].isnull()][missing_values_cols]","6f8dead4":"# One row has missing value for skewness_about.2 and no other value is missing for that row\n# Lets replace that value with median of the corresponding class","60c8b336":"df.loc[419]['class']","7f2afb9b":"Median_distance_skewness_about2_car=df['skewness_about.2'][df['class']==1].median()\nMedian_distance_skewness_about2_car","e7a2d55e":"df.loc[[419]]=df.loc[[419]].replace(np.nan,Median_distance_skewness_about2_car)","76b2a954":"df[df['skewness_about.2'].isnull()][missing_values_cols]","92b807e4":"df.describe().T","4fbab329":"# Split data into train and test set. Outlier treatment will be done only on train set\n# We will divide into feature and target set during PCA and model building","b7c93db2":"#Split into Train -Test set\ntest_size = 0.30 # taking 70:30 training and test set\nseed = 7  # Random number seeding for reapeatability of the code\ndf_train, df_test= train_test_split(df, test_size=test_size, random_state=seed)\ndf_train.shape, df_test.shape","5ca1d1cf":"## function to find outliers and quantile values.\n# We will analyse each of the outliers and follow below strategy\n# 1. High outliers if close to max value will be replaced with max value of the corresponding class\n# 2. if high outlier is much above 75 Quantile value- we will drop that row from our analysis\n# 3. Low outlier if close to min value will be replaced by min value of the corresponding class\n# 4. low outlier if much lower than 25 quantile value will be dropped fromm analysis\n\ndef handleOutlier(aSeries):\n    \n    q1 = aSeries.quantile(0.25)\n    q3 = aSeries.quantile(0.75)\n   \n    iqr = q3-q1 #Interquartile range\n    fence_low  = q1-1.5*iqr\n    fence_high = q3+1.5*iqr\n    outliers_low = aSeries[(aSeries < fence_low)]\n    outliers_high= aSeries[(aSeries > fence_high)]\n    \n    print (\"25th Quantile value: \", q1)\n    print('Outlier low Count =', outliers_low.count())\n    print('List of Low outliers: \\n')\n    print(outliers_low)\n\n    print (\"75th Quantile value: \", q3)\n    print('Outlier High Count = ', outliers_high.count())\n    print('List of High outliers: \\n')\n    print(outliers_high)\n    ","f15c6caa":"fig,(ax1,ax2) = plt.subplots(nrows=1,ncols=2)\nfig.set_size_inches(20,4)\nsns.distplot(df_train['compactness'],ax=ax1)\nax1.set_title(\"Distribution Plot\")\n\nsns.boxplot(df_train['compactness'],ax=ax2)\nax2.set_title(\"Box Plot\")","3eb21f1b":"handleOutlier(df_train['compactness'])","a930fb78":"#Lets see the complete row\ndf_train.loc[[44]]","068dd97d":"#class is car. Lets observe few rows with class car- in terms of max values as it is high outlier\ndf_train[df_train['class']==1]['compactness'].sort_values( ascending=False).head(5)","9c9fb5f2":"# There are values like 117,116 so we will not treat this outlier. 119 does not seem to be do far.","3dae7663":"fig,(ax1,ax2) = plt.subplots(nrows=1,ncols=2)\nfig.set_size_inches(20,4)\nsns.distplot(df_train['circularity'],ax=ax1)\nax1.set_title(\"Distribution Plot\")\n\nsns.boxplot(df_train['circularity'],ax=ax2)\nax2.set_title(\"Box Plot\")","a44d1098":"fig,(ax1,ax2) = plt.subplots(nrows=1,ncols=2)\nfig.set_size_inches(20,4)\nsns.distplot(df_train['distance_circularity'],ax=ax1)\nax1.set_title(\"Distribution Plot\")\n\nsns.boxplot(df_train['distance_circularity'],ax=ax2)\nax2.set_title(\"Box Plot\")","5901c17a":"fig,(ax1,ax2) = plt.subplots(nrows=1,ncols=2)\nfig.set_size_inches(20,4)\nsns.distplot(df_train['radius_ratio'],ax=ax1)\nax1.set_title(\"Distribution Plot\")\n\nsns.boxplot(df_train['radius_ratio'],ax=ax2)\nax2.set_title(\"Box Plot\")","e666de3e":"# There are certain outliers on the right side( high ouliers).Lets analyse them and make decision on their treatment\n handleOutlier(df_train['radius_ratio'])","c58783b2":"# Lets observe full rows for these outliers\ndf_train.loc[[37,135,388]]","4afa589f":"# All these are for class van. Lets observe maximum radius_ratio for class van\ndf_train[df_train['class']==2]['radius_ratio'].sort_values( ascending=False).head(8)","015b06c2":"# values of radius ratio for outlier are far away  from the max value 250. Lets replace these values with 250\ndf_train.loc[[37,135,388],'radius_ratio']=250.0","78138b8a":"#Double check the values if replaced correctly\ndf_train.loc[[37,135,388]]","d3c80fd4":"#All Done for radius ratio!","e1ae60b5":"fig,(ax1,ax2) = plt.subplots(nrows=1,ncols=2)\nfig.set_size_inches(20,4)\nsns.distplot(df_train['pr.axis_aspect_ratio'],ax=ax1)\nax1.set_title(\"Distribution Plot\")\n\nsns.boxplot(df_train['pr.axis_aspect_ratio'],ax=ax2)\nax2.set_title(\"Box Plot\")","6ec12be8":" handleOutlier(df_train['pr.axis_aspect_ratio'])","9c6b80b4":"# Lets observe full rows for these outliers\ndf_train.loc[[4,37,135,291,388,523,706]]","0daf064b":"# Index 4  belongs to class Bus while others belong to class van. Lets observe max values of this column for\n#both bus and van","12608f3d":"# Lets Check for Bus first\ndf_train[df_train['class']==0]['pr.axis_aspect_ratio'].sort_values( ascending=False).head(8)","f7048642":"# For bus we can see values around 75 and max value 76. It is better to drop this row as the values 103 is\n#significantly higher","591b725b":"df_train.drop(4, inplace=True)","768ad608":"# Lets Check for van now first\ndf_train[df_train['class']==2]['pr.axis_aspect_ratio'].sort_values( ascending=False).head(20)","aafa0d53":"##From 72 to 97 it is big jump in value and then other outlier values are even higher upto 138. It is better to drop \n#these rows","711f3d51":"df_train.drop([37,135,291,388,523,706], inplace=True)","8b831a7d":"fig,(ax1,ax2) = plt.subplots(nrows=1,ncols=2)\nfig.set_size_inches(20,4)\nsns.distplot(df_train['max.length_aspect_ratio'],ax=ax1)\nax1.set_title(\"Distribution Plot\")\n\nsns.boxplot(df_train['max.length_aspect_ratio'],ax=ax2)\nax2.set_title(\"Box Plot\")","e01bfa74":" handleOutlier(df_train['max.length_aspect_ratio'])","28293099":"# Lets observe full rows for these outliers\ndf_train.loc[[391,127,815,544]]","bf69760e":"# row with index 391 is for van and others are for bus. lets observe max values as ouliers are hgh in nature","7aefe5e6":"# Lets Check for van now first\ndf_train[df_train['class']==2]['max.length_aspect_ratio'].sort_values( ascending=False).head(20)","04f622fc":"# Outlier is double the max value which is 12. better drop this row","e68f1ea1":"df_train.drop(391, inplace=True)","7408b106":"# Lets Check for bus now\ndf_train[df_train['class']==0]['max.length_aspect_ratio'].sort_values( ascending=False).head(20)","c67cd9a9":"# Again for bus max length aspect ratio is 8 and Junp from 8 to 19\/22 is too high. Lets drop this outlier from train set","ffcac1f5":"df_train.drop([127,815,544], inplace=True)","84102afb":"fig,(ax1,ax2) = plt.subplots(nrows=1,ncols=2)\nfig.set_size_inches(20,4)\nsns.distplot(df_train['scatter_ratio'],ax=ax1)\nax1.set_title(\"Distribution Plot\")\n\nsns.boxplot(df_train['scatter_ratio'],ax=ax2)\nax2.set_title(\"Box Plot\")","b234c086":"fig,(ax1,ax2) = plt.subplots(nrows=1,ncols=2)\nfig.set_size_inches(20,4)\nsns.distplot(df_train['elongatedness'],ax=ax1)\nax1.set_title(\"Distribution Plot\")\n\nsns.boxplot(df_train['elongatedness'],ax=ax2)\nax2.set_title(\"Box Plot\")","898d5750":"fig,(ax1,ax2) = plt.subplots(nrows=1,ncols=2)\nfig.set_size_inches(20,4)\nsns.distplot(df_train['pr.axis_rectangularity'],ax=ax1)\nax1.set_title(\"Distribution Plot\")\n\nsns.boxplot(df_train['pr.axis_rectangularity'],ax=ax2)\nax2.set_title(\"Box Plot\")","5d32f977":"fig,(ax1,ax2) = plt.subplots(nrows=1,ncols=2)\nfig.set_size_inches(20,4)\nsns.distplot(df_train['max.length_rectangularity'],ax=ax1)\nax1.set_title(\"Distribution Plot\")\n\nsns.boxplot(df_train['max.length_rectangularity'],ax=ax2)\nax2.set_title(\"Box Plot\")","7b1269bf":"fig,(ax1,ax2) = plt.subplots(nrows=1,ncols=2)\nfig.set_size_inches(20,4)\nsns.distplot(df_train['scaled_variance'],ax=ax1)\nax1.set_title(\"Distribution Plot\")\n\nsns.boxplot(df_train['scaled_variance'],ax=ax2)\nax2.set_title(\"Box Plot\")","89eeb54e":"fig,(ax1,ax2) = plt.subplots(nrows=1,ncols=2)\nfig.set_size_inches(20,4)\nsns.distplot(df_train['scaled_variance.1'],ax=ax1)\nax1.set_title(\"Distribution Plot\")\n\nsns.boxplot(df_train['scaled_variance.1'],ax=ax2)\nax2.set_title(\"Box Plot\")","70762ba3":"handleOutlier(df_train['scaled_variance.1'])","88e7b7da":"# Lets observe full row for this outliers\ndf_train.loc[[85]]","99d315cf":"# The outlier belongs to class car. Lets observe max values as it is high outlier\ndf_train[df_train['class']==0]['scaled_variance.1'].sort_values( ascending=False).head(8)","585a0905":"fig,(ax1,ax2) = plt.subplots(nrows=1,ncols=2)\nfig.set_size_inches(20,4)\nsns.distplot(df_train['scaled_radius_of_gyration.1'],ax=ax1)\nax1.set_title(\"Distribution Plot\")\n\nsns.boxplot(df_train['scaled_radius_of_gyration.1'],ax=ax2)\nax2.set_title(\"Box Plot\")","f6885436":" handleOutlier(df_train['scaled_radius_of_gyration.1'])","c9a72bb6":"# Lets observe full row for this outliers\ndf_train.loc[[687,734,492,834,515,351,41,231,232,160,553,79,568,612,230,655,420,463,790,47,381]]\n","cd740de8":"# Lets observe full row for this outliers for class Bus\ndf_train.loc[[687,734,492,834,515,351,41,231,232,160,553,79,568,612,230,655,420,463,790,47,381]][df_train['class']==0]","53b42779":"# The outlier belongs to class car. Lets observe max values as it is high outlier\ndf_train[df_train['class']==0]['scaled_radius_of_gyration.1'].sort_values( ascending=False).head(20)","336764b7":"# Values ouliers for buses are almost in range of max. We will neithr delete them nor replace them-leave as is","77b53757":"# Lets observe full row for this outliers for class van\ndf_train.loc[[687,734,492,834,515,351,41,231,232,160,553,79,568,612,230,655,420,463,790,47,381]][df_train['class']==2]","3f31d87d":"# The outliers belong to class van. Lets observe max values as it is high outlier\ndf_train[df_train['class']==2]['scaled_radius_of_gyration.1'].sort_values( ascending=False).head(20)","518fde57":"# Values ouliers for vans are almost in range of max. We will neither delete them nor replace them-leave as is","810f1acf":"# Lets observe full row for this outliers for class car\ndf_train.loc[[687,734,492,834,515,351,41,231,232,160,553,79,568,612,230,655,420,463,790,47,381]][df_train['class']==1]","f58ec249":"# The outlier belongs to class car. Lets observe max values as it is high outlier\ndf_train[df_train['class']==1]['scaled_radius_of_gyration.1'].sort_values( ascending=False).head(20)","b2a55218":"# Values ouliers for cars are almost in range of max. We will neither delete them nor replace them-leave as is","616a297c":"fig,(ax1,ax2) = plt.subplots(nrows=1,ncols=2)\nfig.set_size_inches(20,4)\nsns.distplot(df_train['skewness_about'],ax=ax1)\nax1.set_title(\"Distribution Plot\")\n\nsns.boxplot(df_train['skewness_about'],ax=ax2)\nax2.set_title(\"Box Plot\")","7d9f8e0e":"fig,(ax1,ax2) = plt.subplots(nrows=1,ncols=2)\nfig.set_size_inches(20,4)\nsns.distplot(df_train['skewness_about.1'],ax=ax1)\nax1.set_title(\"Distribution Plot\")\n\nsns.boxplot(df_train['skewness_about.1'],ax=ax2)\nax2.set_title(\"Box Plot\")","61574591":" handleOutlier(df_train['skewness_about.1'])","1db2925b":"#Lets observe the full row of the outlier\ndf_train.loc[[132]]\n# Outlier belongs to class 1 that is car","aea88132":"##Lets observe max values for car class\ndf_train[df_train['class']==1]['skewness_about.1'].sort_values( ascending=False).head(20)","27562046":"fig,(ax1,ax2) = plt.subplots(nrows=1,ncols=2)\nfig.set_size_inches(20,4)\nsns.distplot(df_train['skewness_about.2'],ax=ax1)\nax1.set_title(\"Distribution Plot\")\n\nsns.boxplot(df_train['skewness_about.2'],ax=ax2)\nax2.set_title(\"Box Plot\")","a170aa4b":"fig,(ax1,ax2) = plt.subplots(nrows=1,ncols=2)\nfig.set_size_inches(20,4)\nsns.distplot(df_train['hollows_ratio'],ax=ax1)\nax1.set_title(\"Distribution Plot\")\n\nsns.boxplot(df_train['hollows_ratio'],ax=ax2)\nax2.set_title(\"Box Plot\")","cb8bbca6":"df_train.shape","c2c89e9a":"df_train.describe().T","802313fe":"# Divide train and test set into feature and target sets\nX_train=df_train.drop(labels='class', axis=1)\ny_train=df_train['class']\nX_test=df_test.drop(labels='class', axis=1)\ny_test=df_test['class']\nX_train.shape,y_train.shape, X_test.shape, y_test.shape","76c07a1b":"sc = StandardScaler()","ee11a5bb":"sc.fit(X_train) # Fit scaler in train set","744684a4":"# transform train set\n#Transform X_train\nX_train_std=sc.transform(X_train)\n#Transform X_test ( with same fit as train) to prevent data leak\nX_test_std=sc.transform(X_test)","fd413b02":"# Covariance Matrix\ncov_matrix = np.cov(X_train_std.T)\n\nprint('Covariance Matrix \\n%s', cov_matrix)","2fb24df9":"eig_vals, eig_vecs = np.linalg.eig(cov_matrix)\nprint('Eigen Vectors \\n%s', eig_vecs)\nprint('\\n Eigen Values \\n%s', eig_vals)","202821da":"print(\"Eigen Values:\")\npd.DataFrame(eig_vals).transpose()","6bd96bc9":"tot = sum(eig_vals)\nvar_exp = [( i \/tot ) * 100 for i in sorted(eig_vals, reverse=True)]\ncum_var_exp = np.cumsum(var_exp)   # array of size =  as many PC dimensions\nprint(\"Cumulative Variance Explained\", cum_var_exp)","1d81d775":"# Ploting \nplt.figure(figsize=(15 , 6))\nplt.bar(range(1, eig_vals.size + 1), var_exp, alpha = 0.5, align = 'center', label = 'Individual explained variance')\nplt.step(range(1, eig_vals.size + 1), cum_var_exp, where='mid', label = 'Cumulative explained variance')\nplt.ylabel('Explained Variance Ratio')\nplt.xlabel('Principal Components')\nplt.legend(loc = 'best')\nplt.tight_layout()\nplt.show()","866cadae":"# Make a set of (eigenvalue, eigenvector) pairs\neig_pairs = [(eig_vals[index], eig_vecs[index]) for index in range(len(eig_vals))]\n\n# Sort the (eigenvalue, eigenvector) pairs from highest to lowest with respect to eigenvalue by default take first field for sorting\neig_pairs.sort(reverse=True)\n\n\n# Note: always form pair of eigen vector and values  first before sorting...\n\n# Extract the descending ordered eigenvalues and eigenvectors\neigvalues_sorted = [eig_pairs[index][0] for index in range(len(eig_vals))]\neigvectors_sorted = [eig_pairs[index][1] for index in range(len(eig_vals))]","a0b4261f":"#Dimesionality reduction \n\nP_reduce = np.array(eigvectors_sorted[0:8]).transpose()   # Selecting first 8 eigen vector out if 18\n\nProj_train_data = np.dot(X_train_std,P_reduce)   # projecting training data onto the eight eigen vectors\n\nProj_test_data = np.dot(X_test_std,P_reduce)    # projecting test data onto the eight eigen vectors","d1c3fdf9":"#Check shapes of train and test new feature and target set after PCA\nProj_train_data.shape,y_train.shape,Proj_test_data.shape,y_test.shape","2833acf9":"# Use SVM\n\nfrom sklearn.svm import SVC\n\n# Building a Support Vector Machine on train data\nsvc_model = SVC(C= .1, kernel='linear', gamma= 1)\nsvc_model.fit(Proj_train_data, y_train)\n\nprediction = svc_model.predict(Proj_test_data)","0e508d64":"# check the accuracy on the training set\nprint(svc_model.score(Proj_train_data, y_train))\nprint(svc_model.score(Proj_test_data, y_test))","9bfd87d0":"print(\"Confusion Matrix:\\n\",confusion_matrix(prediction,y_test))","72be6a5e":"# Building a Support Vector Machine on train data\nsvc_model = SVC(kernel='rbf')\nsvc_model.fit(Proj_train_data, y_train)\n\nprediction = svc_model.predict(Proj_test_data)","d5ad8035":"print(svc_model.score(Proj_train_data, y_train))\nprint(svc_model.score(Proj_test_data, y_test))","5877279c":"print(\"Confusion Matrix:\\n\",confusion_matrix(prediction,y_test))","6985d88b":"#With Hyper Parameters Tuning\n#2-3,SVM\n#importing modules\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import svm\n#making the instance\nmodel=svm.SVC()\n#Hyper Parameters Set\nparams = {'C': [0.01, 0.05, 0.5, 1], \n      #    'gamma':[0.01, 0.02 , 0.03 , 0.04, 0.05],\n          'kernel': ['linear','rbf']}\n#Making models with hyper parameters sets\ngs = GridSearchCV(model, param_grid=params, n_jobs=-1,cv=10)\n#Learning\ngs.fit(Proj_train_data,y_train)\n","96991eb5":"#The best hyper parameters set\nprint(\"Best Hyper Parameters:\\n\",gs.best_params_)","80131c70":"num_folds = 10\nseed = 7\n\nkfold = KFold(n_splits=num_folds, random_state=seed)\nmodel = gs\nresults = cross_val_score(gs,Proj_train_data,y_train, cv=kfold)\nprint(results)\nprint(\"Accuracy: %.3f%% (%.3f%%)\" % (results.mean()*100.0, results.std()*100.0))","bd8a6e7d":"#plt.hist(results,normed= True)\nsns.distplot(results,kde=True,bins=10)\nplt.xlabel(\"Accuracy\")\nplt.show()\n# confidence intervals\nalpha = 0.95                             # for 95% confidence \np = ((1.0-alpha)\/2.0) * 100              # tail regions on right and left .25 on each side indicated by P value (border)\nlower = max(0.0, np.percentile(results, p))  \np = (alpha+((1.0-alpha)\/2.0)) * 100\nupper = min(1.0, np.percentile(results, p))\nprint('%.1f confidence interval %.1f%% and %.1f%%' % (alpha*100, lower*100, upper*100))","33a513be":"prediction=gs.predict(Proj_test_data)\nprint(\"Accuracy:\",metrics.accuracy_score(prediction,y_test))\n#evaluation(Confusion Metrix)\nprint(\"Confusion Matrix:\\n\",metrics.confusion_matrix(y_test,prediction))\n","aafb581d":"#### skewness_about.1","100ac722":"### Pairplot","bf2d4acc":"### Test Accuracy with Hypertuned parameter ","26f80e49":"No Outliers for hollows_ratio","aef8d1d9":"#### hollows ratio","a87dd183":"#### Scatter Ratio","0097f2e4":"#### pr.axis_aspect_ratio","17aef37d":"#### skewness_about","6de1c74e":"No Outlier in max.length_rectangularity","3fc9e7a0":" #### Missing Treatment Values for circularity","e19002f1":"No Outliers for skewness_about.2","2bb325ec":"#### Data Frame Summary Statistics after missing values treatment","9b950939":" lot of high outliers","3bb997c3":"#### Missing Treatment Values for elongatednes","b840723d":"#### Missing Treatment Values for scaled_variance.1","ac6feb9d":"## Modelling,Hyperparameter tuning & Cross Validation","a8a1b818":"\nFrom above we can see that there are no outliers in distance_circularity column but in distribution plot we can see that there are two peaks and we can see that there is right skewness because long tail is at the right side(mean>median)","74e6172b":"No Outlier in scaled_variance","ac3363c4":"#### Distance Circularity","fb4b0a87":"From above we can see that there are no outliers in circularity","d34d172d":"#### max.length_rectangularity","63249fff":"### Correlation & Heatmap","2f832089":"#### max.length_aspect_ratio","1aa881cd":"#### Missing Treatment Values for scaled_radius_of_gyration.1","ba61bdd2":"There are total 33 rows with missng values in one or more of 14 columns","f688c5ab":"#### Missing Treatment Values for pr.axis_aspect_ratio ","6543f0e0":"#### Missing Treatment Values for radius_ratio","85fb48d8":"#### radius_ratio","e72a33d4":"#### Compactness","3489b8ca":"here are many high outliers. Lets observe each of them and treat them","5463133a":"Value is well in range of max value of skewness_about.1 for cars. we will not delete or replace it","efcc3130":"There is one high outlier","709ab876":"From above table it is clear that there are missing values in many columns-circularity,distance_circularity,radius_ratio\nscatter_ratio,elongatedness,pr.axis_rectangularity,scaled_variance,scaled_variance,scaled_radius_of_gyration,scaled_radius_of_gyration.1\nskewness_about,skewness_about.skewness_about.2\t","17173e97":"#### Missing Values Treatment for skewness_about","691f2a94":"#### scaled_radius_of_gyration.1","9b0c9caa":"With Linear Kernel","5230e6e1":"#### Missing Values Treatment for skewness_about.1","5dbf821b":"#### elongatedness","cd84291d":"#### scaled_variance.1","98eeb524":"**Overview:**\nThe data contains features extracted from the silhouette of vehicles in different angles. \nFour \"Corgie\" model vehicles were used for the experiment: a double decker bus, Cheverolet van, Saab 9000 and an Opel Manta 400 cars. \nThis particular combination of vehicles was chosen with the expectation that the bus, van and either one of the cars would be readily \ndistinguishable, but it would be more difficult to distinguish between the cars.\n\n**Objective:**\nThe purpose is to classify a given silhouette as one of three types of vehicle, using a set of features extracted from the silhouette. \nThe vehicle may be viewed from one of many different angles.","ef2e4cd1":"#### Circularity","4233f509":"There is one outlier in scaled_Variance.1","40379ffa":"### Outlier Treatment","8bc28679":"### Hyper Parameter Tuning","d1328f32":"#### Missing Treatment Values for distance_circularity","d909c4e1":"#### Missing Values Treatment for skewness_about.2","fdc416d4":"No Outlier in elongetdness","32526252":"#### scaled_variance","60c2877f":"#### skewness_about.2","f00db16f":"#### Missing Treatment Values for scatter_ratio","ef6f5eab":"## EDA","93fdf3d1":"With Rbf","d1602137":"### Missing Values Treatment: \nFind individual row with missing values in each of the columns and then we will make decision on whether to drop or not\u00b6","05dab26b":"Looking at the confusion matrix, model predicts all the vans correctly through Silhoutte(100%) 59\/62 buses are predicted correctly(95 %) 129\/138 cars are predicted correctyy(93.5%)\n\nTest Accuracy(95.64%) is well in range of 95% confidence interval(86.8% to 99.6%)","e60edbaf":"There are values in contnuity like 982,987, 962 hence 998 does not look very high. We will leave this outlier as is.\n\n","aa6064b4":"No outlier in skewness_about field","fcf616f4":"**Inferences:**\n* Spread of compactness is least for van. mean compactness is highest for car. For Bus compactness is right skewed indicating that less number of buses have high compactness.\n* Mean circularity is higher for cars\n* Mean distance_circularity is also higher for cars\n* Mean radius_ratio is higher for cars, followed by Bus. It is least for vans\n* pr.axis_aspect_ratio is has almost same distribution for car, van and buses\n* max.length_aspect_ratio is almost same for cars and vans, lower for buses\n* Mean scatter ratio is highest for cars, followed by bus and van\n* Mean elomngatedness is highest for vans folowed by bus and car\n* pr.axis_rectangularity is highest for cars, followed by bus and then vans\n* distribution of max.length_rectangularity is almost same for cars, bus and vans\n* Mean scaled variance is highest for cars followed by bus then vans\n* Mean scaled variance1 is highest for cars followed by bus then vans\n* 'scaled_radius_of_gyration', 'scaled_radius_of_gyration.1', 'skewness_about', 'skewness_about.1', 'skewness_about.2', have almost similar distribution for cars, buses and vans.\n* 'hollows_ratio' is lower for buses as compared to cars and vans\n* Many columns have lonmg tails indicating outliers\n* pr.axis_aspect ratio and radius ratio varies strongly +ve for van. for cars and buses it varies in small range- mostly cpuld like\n* Scatter ratio & Scaled_variance1 has almost perfect positive linear relationship\n* Many features show high correlation indicating that we need to drop multiple features- we will use PCA for the same","d9fe39b2":"#### pr.axis_rectangularity","e5ab57f6":"*K-fold cross validation( On train set using tuned Hyper parameter i.e gs*","e2a4f858":" First 8 principal components explain 98% of the variance in the data. ","66cfb0e6":"## PCA & Dimensionality Reduction","f2b0650f":"#### Missing Treatment Values for scaled_variance","37b94635":"#### Missing Treatment Values for pr.axis_rectangularity","3f4428ea":"#### Only 7\/846 rows i.e 0.8 % record has been dropped -should be okay","c2c560be":"No Outlier in pr_axis_rectangularity","ddd82498":"### Final shape and statistic of train set after missing values and outlier treatmen","a3d03bf8":"**Inference from heat map:**\n\nFrom above correlation matrix we can see that there are many features which are highly correlated. if we see carefully then scaled_variance.1 and scatter_ratio has correlation of 1 and many other features are also there which having more than 0.9(positive or negative) correlation e.g sekweness_abou2 and hollows_ratio, scaled variance & scaled_variance1, elongatedness & scaled variance, elongatedness & scaled variance1 etc.\n\nThere are lot of dimensions with correlation above +- 0.7 and it is difficult to determine which dimensions to drop manually. We will use PCA to determine it.\n\n","3be43823":"No Outlier in scatter ratio"}}