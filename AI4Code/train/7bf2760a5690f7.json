{"cell_type":{"b747e4f4":"code","ad4a7e8d":"code","84ab97d8":"code","0b3424d6":"code","adfd75de":"code","b796442e":"code","0adb59b2":"code","37bf23dc":"code","21815a4d":"code","9c662a5a":"code","db6a9eb3":"code","cf59ce1b":"code","d3df8341":"code","03223668":"code","50175e5c":"code","69c87884":"code","6d0cd659":"code","c61ea739":"code","885f4e28":"code","d30a9294":"code","20aa03c8":"code","8327fd57":"markdown","e7cb31f8":"markdown","05c34e4e":"markdown","97161723":"markdown","149052c5":"markdown","a3f65048":"markdown","c4b31c29":"markdown","70c83759":"markdown","44844237":"markdown","0f2b29d4":"markdown","c4563988":"markdown","037b5d15":"markdown","d7c6540f":"markdown","c8cd41e2":"markdown","0080f4ea":"markdown","34dadab0":"markdown","773c25e5":"markdown","4718f740":"markdown","a3a90951":"markdown"},"source":{"b747e4f4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pylab\n%matplotlib inline\n\nfrom scipy import stats\nimport sklearn\nimport statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom statsmodels.stats import diagnostic as diag\nfrom sklearn.linear_model import LinearRegression\n\n\n\nimport math","ad4a7e8d":"df=pd.read_csv(\"..\/input\/baking-ice-cream-cones\/icecreamcone.csv\")\ndf.head()","84ab97d8":"df.set_index('codeNum',inplace=True)\ndf","0b3424d6":"df.dtypes","adfd75de":"df=df.astype(float)\ndf.dtypes","b796442e":"df.isna().any()","0adb59b2":"corr=df.corr()\ndisplay(corr)","37bf23dc":"#plot a heat map\nsns.heatmap(corr,xticklabels=corr.columns,yticklabels=corr.columns,cmap='RdBu')","21815a4d":"df_before=df\nX1= df_before.drop('viscosity',axis=1)\n# For each X, calculate VIF and save in dataframe\nvif = pd.DataFrame()\nvif[\"VIF Factor\"] = [variance_inflation_factor(X1.values, i) for i in range(X1.shape[1])]\nvif[\"features\"] = X1.columns\n\ndisplay(vif)","9c662a5a":"df_after= df.drop('protein',axis=1)\nX2= df_after.drop('viscosity',axis=1)\n# For each X, calculate VIF and save in dataframe\nvif1 = pd.DataFrame()\nvif1[\"VIF Factor\"] = [variance_inflation_factor(X2.values, i) for i in range(X2.shape[1])]\nvif1[\"features\"] = X2.columns\n\ndisplay(vif1)","db6a9eb3":"#plot the scatter matrix\npd.plotting.scatter_matrix(df_after,alpha=0.3)\nplt.show()","cf59ce1b":"desc_df=df.describe()","d3df8341":"desc_df.loc['+3std']=desc_df.loc['mean']+(desc_df.loc['std']*3)\ndesc_df.loc['-3std']=desc_df.loc['mean']-(desc_df.loc['std']*3)\ndesc_df","03223668":"d1=df['ash']\nplt.boxplot(d1)","50175e5c":"d2=df['moisture']\nplt.boxplot(d2)","69c87884":"X=df.drop(['viscosity','protein'],axis=1)\nY= df[['viscosity']]\nX","6d0cd659":"lm = sm.add_constant(X)","c61ea739":"result = sm.OLS(Y,lm).fit()\nresult.summary()","885f4e28":"#Run white's test\nimport statsmodels.stats.diagnostic as sm_diagnostic\n_,pval, _, f_pval=sm_diagnostic.het_white(result.resid,result.model.exog)\nprint(pval, f_pval)","d30a9294":"#Test for autocorrelation\n\nfrom statsmodels.stats.stattools import durbin_watson\n# calculate the lag (optional)\nlag= min(10, len(X)\/\/5)\nprint(\"The number of lags will be{}\".format(lag))\nprint()\n\n# run ljung Box test for no autocorrelation of residuals\n\ntest_results= diag.acorr_ljungbox(result.resid, lags=lag)\nprint(test_results)\n\n# grab the p value and test statistics\nibvalue, p_val = test_results\n# print the results of the test\nif min(p_val)>0.05:\n    print(\"The lowest p_value found was {:.4}\".format(min(p_val)))\n    print(\"We fail to reject null hypothesis, there is no autocorrelation\")\n    print()\nelse:\n    print(\"The lowest p_value found was {:.4}\".format(min(p_val)))\n    print(\"We reject null hypothesis, there no autocorrelation\")\n    print()\n\n# plot autocorrelation\nsm.graphics.tsa.plot_acf(result.resid)\nplt.show()\n","20aa03c8":"#Check for the normality of the residuals\nsm.qqplot(result.resid, line='s')\npylab.show()\n\n# check that mean of residuals is approx zero\nmean_residuals= sum(result.resid)\/len(result.resid)\nmean_residuals","8327fd57":"# Checking Any Null Value","e7cb31f8":"# Describe The Original Dataset","05c34e4e":"**Description:**\n\n**Model Relating Viscosity to moisture, protein, and ash contents in flour used in baking ice cream cones.**\n\n**Model: V = b0 + b1M + b2P + b3A**","97161723":"# Checking for autocorrelation\n\nTo test autocorrelation , we use statsmodels.stats.diagnostic module and use Ljung - Box test for no autocorrelation of residuals.\n\nH0: The data are random.\n\nH1: The data are not random.\n\nWe want the p value that will retain the null hypothesis\n\nTo use Ljung - Box test, we call acorr_ljungbox function, pass through the result.resid and define the lags.\n\nA rule of thumb for calculating lags for non-seasonal time series is min(10,(num_obs\/\/5)\n\nWe can also visually check autocorrelation by using statsmodels.graphic module to plot a graph of the autocorrelation factor.\n\nhttps:\/\/www.statsmodels.org\/stable\/generated\/statsmodels.stats.diagnostic.acorr_ljungbox.html","149052c5":"**Add The Standard Deviation Metric**","a3f65048":"# Setting Datatype Of Dataframe To Float","c4b31c29":"# Evaluating the model","70c83759":"### Checking for normally distributed residuals\n\nThis is done by plotting QQ plot.\n\nWe require the data should lie very closely to the line so that the normality assumption is satisfied.\n\n### Checking the mean of residuals equal to zero","44844237":"# Checking Multicollinearity In The Data\n\nMulticollinearity means variables are behaving so similarly that it is not possible to identify which variable has hat impact on the model.","0f2b29d4":"# Change Index To Month Number","c4563988":"**White\u2019s Lagrange Multiplier Test for Heteroscedasticity**\n\nThe null hypothesis for White's test is that the variances for the errors are equal.\n\nresid: array_like\n\nresiduals, square of it is used as endogenous variable\n\nexog: array_like\n\npossible explanatory variables for variance, squares and\n interaction terms are included in the auxilliary regression.\n\nReturns:\n\nlm: float\nlagrange multiplier statistic\n\nlm_pvalue :float\np-value of lagrange multiplier test\n\nfvalue: float\nf-statistic of the hypothesis that the error variance does not depend on x. This is an alternative test variant not the original LM test.\n\nf_pvalue:float\np-value for the f-statistic\n","037b5d15":"# Build The Model","d7c6540f":"## Print Correlation Matrix Of Our Dataframe","c8cd41e2":"**The output for p value shows that the null hypothesis is retained.**\n\n**No heteroskedasticity.**","0080f4ea":"Looking at heatmap alongwith correlation matrix we identify that ash and protein are very highly correlated. corr=1\n\n**To be more systematic, we will use variance_inflation_factor method defined by statsmodel API**\n\n*If VIF>=5 for variables, then they should be removed from the model.*","34dadab0":"**Checking for Heteroskedasticity**\n\nstatsmodels.stats.diagnostic.het_white(resid, exog, retres=False)\n\n\n\n","773c25e5":"**Model Assumptions**\n\n1. Regression residuals must be normally distributed.\n\n2. A linear relationship is assumed between dependent and independent variables.\n\n3. Residuals are homoskedastic (error terms are constant)\n\n4. Absence of multicollinearity\n\n5. No autocorrelation of the residuals","4718f740":"## Plotting heat map: Heat map gives the idea about correlation of variables in the dataset.\n\nDiagonally we should have a dark colour which shows perfect correlation.","a3a90951":"From output, we observe that moisture and protein have VIF infinity\n\nSo, we drop column moisture"}}