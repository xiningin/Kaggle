{"cell_type":{"25837c0e":"code","9b5108ed":"code","af653af7":"code","4766caac":"code","eda0d0ec":"code","cb72705d":"code","5113db09":"code","3e16c25e":"code","18cf74bb":"code","628136b7":"code","5e8bfbf8":"code","4367d89e":"code","14a5b63d":"code","1d5e5efb":"code","98b748c0":"code","5695453b":"code","251892aa":"code","444f35c8":"code","a9045063":"code","c2c9f75a":"code","a884f09c":"code","1646af21":"code","644c437c":"code","8ad3d7a6":"code","1a86c6c0":"code","0a44eb28":"code","4328f04b":"code","d75fada1":"code","9f084159":"code","79c8463b":"code","d3d4944a":"code","0fd2bf29":"code","b07c4942":"code","339ae8d9":"code","46f6626e":"code","0e66f3c8":"code","0929ef00":"code","cce92f3a":"code","f5a20dcd":"code","eb5c597d":"code","72191fd4":"code","71bf0e76":"code","8c457bb3":"code","b18b20f0":"code","95446ccd":"code","1e9adb24":"code","102e1cda":"code","1851cc5a":"code","2a2e5ad7":"code","73443f1a":"code","611b1ecc":"code","5063ba0d":"code","9c65266c":"code","b0f694e5":"code","3c9bee67":"code","6ee17595":"code","e93fa3f1":"code","5d88279a":"code","a0fc63ea":"code","0985d7b2":"code","42e0a6a9":"code","b2cf07a5":"code","b116f65f":"code","dc17de4a":"code","afcb9617":"code","8e4d114b":"code","39c99082":"code","f025bfb4":"code","830b3f93":"code","dbb52aab":"code","a23128cb":"code","6a49c04c":"code","c643909b":"code","4ddea22d":"code","6c4999b1":"code","e962c063":"code","4709ad0d":"code","1cc6d2fe":"markdown","3f8d3e38":"markdown","08bf330a":"markdown","a3b699a7":"markdown","27ba04a4":"markdown","bfbb7276":"markdown","3f867ed8":"markdown","ca1c8f58":"markdown","d60961ac":"markdown","9703100f":"markdown","54162a74":"markdown","8f006ef7":"markdown","1913e90e":"markdown","a4ab09fd":"markdown","9bd689b1":"markdown","4aa4e467":"markdown","08bf8b2a":"markdown","400f9a03":"markdown","ea7180db":"markdown","2bb47a0d":"markdown","0b283ec1":"markdown","95b474c9":"markdown","e4d64871":"markdown","224d7617":"markdown","426a1490":"markdown","492a4d6e":"markdown","27a2e830":"markdown","1c2839be":"markdown","442f007f":"markdown","c4077daa":"markdown","8175937b":"markdown","fba38511":"markdown","77e6c987":"markdown","8807b738":"markdown","dadfb188":"markdown","4ae1ac4c":"markdown","99659dc3":"markdown","b15e6969":"markdown","b453b2a7":"markdown","faf463cf":"markdown","00a01732":"markdown","8c8683d6":"markdown","32d7596f":"markdown","be31d31f":"markdown","bfb9692d":"markdown","fa868952":"markdown","bff7c6b0":"markdown","454ca0be":"markdown","a1cee04c":"markdown"},"source":{"25837c0e":"# Supress Warnings\nimport warnings\nwarnings.filterwarnings('ignore')","9b5108ed":"#Import the relevant libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm  \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.metrics import r2_score","af653af7":"pd.set_option('display.max_rows', None )\npd.set_option('display.max_columns', None)\npd.set_option('display.width', None)","4766caac":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","eda0d0ec":"# Importing bike.csv\nbike = pd.read_csv('..\/input\/bikesharing\/day.csv')","cb72705d":"# Display first few rows of application data\nbike.head()","5113db09":"# Data Dimensions\nbike.shape","3e16c25e":"# Display null value percentage of bike data\ndisplay(round(100*(bike.isnull().sum()\/len(bike.index)), 2))","18cf74bb":"# Display datatypes\ndisplay(bike.info())  ","628136b7":"# Dropping unnecessary and redundant columns\nbike.drop([\"instant\",\"dteday\", \"casual\", \"registered\"],axis =1, inplace = True) \nbike.head()","5e8bfbf8":"# Data Dimensions\nbike.shape","4367d89e":"# list of columns\nbike.columns","14a5b63d":"# Checking datatypes \nbike.info()","1d5e5efb":"# describing variables\nbike.describe()","98b748c0":"numerical = ['temp', 'atemp', 'hum', 'windspeed',]\nplt.figure(figsize =(12,6))\nfor i in enumerate(numerical):\n    plt.subplot(2,2, i[0]+1)\n    sns.boxplot(x= i[1], data = bike)","5695453b":"df_num = bike[[ 'temp', 'atemp', 'hum', 'windspeed','cnt']]\nsns.pairplot(df_num)\nplt.show()","251892aa":"plt.figure(figsize=(20,4))\nplt.subplot(131)\nsns.countplot(x= 'season', data = bike)\nplt.subplot(132)\nsns.countplot(x= 'mnth', data = bike)\nplt.subplot(133)\nsns.countplot(x= 'weekday', data = bike)\nplt.show()","444f35c8":"plt.figure(figsize=(16,4))\nplt.subplot(141)\nsns.countplot(x= 'yr', data = bike)\nplt.subplot(142)\nsns.countplot(x= 'holiday', data = bike)\nplt.subplot(143)\nsns.countplot(x= 'workingday', data = bike)\nplt.subplot(144)\nsns.countplot(x= 'weathersit', data = bike)\nplt.show()","a9045063":"plt.figure(figsize=(12, 8))\nplt.subplot(2,2,1)\nsns.boxplot(x = 'yr', y = 'cnt', data = bike)\nplt.subplot(2,2,2)\nsns.boxplot(x = 'holiday', y = 'cnt', data = bike)\nplt.subplot(2,2,3)\nsns.boxplot(x = 'workingday', y = 'cnt', data = bike)\nplt.subplot(2,2,4)\nsns.boxplot(x = 'weathersit', y = 'cnt', data = bike)\nplt.show()","c2c9f75a":"plt.figure(figsize=(16, 4))\nplt.subplot(121)\nsns.boxplot(x = 'season', y = 'cnt', data = bike)\nplt.subplot(122)\nsns.boxplot(x = 'weekday', y = 'cnt', data = bike)\nplt.show()\n","a884f09c":"plt.figure(figsize=(10,4))\nsns.boxplot(x = 'mnth', y = 'cnt', data = bike)\nplt.show()","1646af21":"plt.figure(figsize = (16,10))        # Size of the figure\nsns.heatmap(bike.corr(),annot = True,cmap=\"YlGnBu\")\nplt.show()","644c437c":"# Check the housing dataframe now\nbike.head()","8ad3d7a6":"bike[\"season\"].value_counts()","1a86c6c0":"bike[\"yr\"].value_counts()","0a44eb28":"bike[\"mnth\"].value_counts()","4328f04b":"bike[\"holiday\"].value_counts()","d75fada1":"bike[\"weekday\"].value_counts()","9f084159":"bike[\"workingday\"].value_counts()","79c8463b":"bike[\"weathersit\"].value_counts()","d3d4944a":"# Dummufying variables\nbike_new = pd.get_dummies(data=bike, columns=['weathersit', 'weekday', 'mnth', 'season'], drop_first = True)\nbike_new.head()","0fd2bf29":"bike_new.info()","b07c4942":"# We specify this so that the train and test data set always have the same rows, respectively\nnp.random.seed(0)\ndf_train, df_test = train_test_split(bike_new, train_size = 0.70, random_state = 42)","339ae8d9":"df_train.shape","46f6626e":"df_test.shape","0e66f3c8":"bike_new.shape","0929ef00":"scaler = MinMaxScaler()","cce92f3a":"df_train.head()","f5a20dcd":"# Apply scaler() to all the columns except the 'yes-no' and 'dummy' variables\nnum_vars = ['temp', 'hum', 'windspeed','cnt','atemp']\ndf_train[num_vars] = scaler.fit_transform(df_train[num_vars])","eb5c597d":"df_train.head()","72191fd4":"# Describing data\ndf_train.describe()","71bf0e76":"# Plotting heatmap of dataframe\nplt.figure(figsize = (25, 20))\nsns.heatmap(round(df_train.corr(),2), annot = True, cmap=\"YlGnBu\")\nplt.show()","8c457bb3":"# Dividing into X and Y sets for the model building\nimport copy\ntrain_plot = copy.copy(df_train)\ny_train = df_train.pop('cnt')\nX_train = df_train","b18b20f0":"# Running RFE with the output number of the variable equal to 15\nlm = LinearRegression()\nlm.fit(X_train, y_train)\nrfe = RFE(lm, 15)             # running RFE\nrfe = rfe.fit(X_train, y_train)","95446ccd":"# List of variables after applying RFE\nlist(zip(X_train.columns,rfe.support_,rfe.ranking_))","1e9adb24":"# List of variables to be considered for model building\ncol = X_train.columns[rfe.support_]\ncol","102e1cda":"# List of variables to be removed from data set\nX_train.columns[~rfe.support_]","1851cc5a":"# Creating X_test dataframe with RFE selected variables\nX_train_rfe = X_train[col]\nX_train_vif = X_train[col]","2a2e5ad7":"# Adding a constant variable \nX_train_rfe = sm.add_constant(X_train_rfe)\nlm_1 = sm.OLS(y_train,X_train_rfe).fit()   # Running the linear model","73443f1a":"# Summary of our linear model\nprint(lm_1.summary())","611b1ecc":"# Defining function to check vif\ndef vif_show(X_vif):\n    vif = pd.DataFrame()\n    vif['Features'] = X_vif.columns\n    vif['VIF'] = [variance_inflation_factor(X_vif.values, i) for i in range(X_vif.shape[1])]\n    vif['VIF'] = round(vif['VIF'], 2)\n    vif = vif.sort_values(by = \"VIF\", ascending = False)\n    print(vif)","5063ba0d":"vif_show(X_train_vif)","9c65266c":"X_train_rfe = X_train_rfe.drop([\"atemp\"], axis = 1)\nX_train_vif = X_train_vif.drop([\"atemp\"], axis = 1)\ncol_to_drop = ['atemp']\nlm_2 = sm.OLS(y_train,X_train_rfe).fit()  ","b0f694e5":"print(lm_2.summary())","3c9bee67":"vif_show(X_train_vif)","6ee17595":"X_train_rfe = X_train_rfe.drop([\"hum\"], axis = 1)\nX_train_vif = X_train_vif.drop([\"hum\"], axis = 1)\ncol_to_drop.append('hum')\nlm_3 = sm.OLS(y_train,X_train_rfe).fit()  ","e93fa3f1":"print(lm_3.summary())","5d88279a":"vif_show(X_train_vif)","a0fc63ea":"X_train_rfe = X_train_rfe.drop([\"season_3\"], axis = 1)\nX_train_vif = X_train_vif.drop([\"season_3\"], axis = 1)\ncol_to_drop.append('season_3')\nlm_4 = sm.OLS(y_train,X_train_rfe).fit()  ","0985d7b2":"print(lm_4.summary())","42e0a6a9":"vif_show(X_train_vif)","b2cf07a5":"X_train_rfe = X_train_rfe.drop([\"mnth_12\"], axis = 1)\nX_train_vif = X_train_vif.drop([\"mnth_12\"], axis = 1)\ncol_to_drop.append('mnth_12')\nlm_5 = sm.OLS(y_train,X_train_rfe).fit()  ","b116f65f":"print(lm_5.summary())","dc17de4a":"vif_show(X_train_vif)","afcb9617":"X_train_rfe = X_train_rfe.drop([\"mnth_11\"], axis = 1)\nX_train_vif = X_train_vif.drop([\"mnth_11\"], axis = 1)\ncol_to_drop.append('mnth_11')\nlm_6 = sm.OLS(y_train,X_train_rfe).fit()  ","8e4d114b":"print(lm_6.summary())","39c99082":"vif_show(X_train_vif)","f025bfb4":"y_train_pred = lm_6.predict(X_train_rfe)","830b3f93":"# Plotting Error terms of train data\nfig = plt.figure()\nsns.distplot((y_train - y_train_pred), bins = 20)\nfig.suptitle('Error Terms', fontsize = 20)                  # Plot heading \nplt.xlabel('Errors', fontsize = 18)# X-label\nplt.show()","dbb52aab":"res = y_train - y_train_pred\n#res = res.abs()\nplt.scatter(y_train_pred,res)\nplt.xlabel('predicted value', fontsize = 18)\nplt.ylabel('residuals', fontsize = 18)\nplt.show()","a23128cb":"df_test[num_vars] = scaler.transform(df_test[num_vars])","6a49c04c":"y_test = df_test.pop('cnt')\nX_test = df_test","c643909b":"# Dropping unwanted columns\nX_test_new = X_test[col]\nX_test_new.drop(col_to_drop, axis = 1 , inplace = True)\n# Adding a constant variable \nX_test_new = sm.add_constant(X_test_new)","4ddea22d":"# Making predictions\ny_pred = lm_6.predict(X_test_new)","6c4999b1":"# Calculating test data R^2\nr2 = r2_score(y_test, y_pred)\nprint(r2)","e962c063":"# n is number of rows in X\nn = X_test_new.shape[0]\n# Number of features (predictors, p) is the shape along axis 1\np = X_test_new.shape[1]\n# We find the Adjusted R-squared using the formula\nadjusted_r2 = 1-(1-r2)*(n-1)\/(n-p-1)\nadjusted_r2","4709ad0d":"# Plotting y_test and y_pred to understand the spread.\nfig = plt.figure()\nplt.scatter(y_test,y_pred)\nfig.suptitle('y_test vs y_pred', fontsize=20)              # Plot heading \nplt.xlabel('y_test', fontsize=18)                          # X-label\nplt.ylabel('y_pred', fontsize=16)                          # Y-label\nplt.show()","1cc6d2fe":"## Importing and Understanding Data","3f8d3e38":"### Building model using statsmodel, for the detailed statistics","08bf330a":"## Splitting the Data into Training and Testing Sets","a3b699a7":"The model will be a good way for management to understand the demand dynamics of a new market considering the below variables with more importance while planning.\n\n- windspeed \n- temp \n- season_4\n- yr\n- weathersit_2","27ba04a4":"##### Model No 2\n- Rebuilding the model without `atemp`","bfbb7276":"##### Model No 1\n","3f867ed8":"# Building  model","ca1c8f58":"### Dropping unnecessary and redundant columns\n- instant: record index , we can drop this columns\n- dteday: date, We have month, year columns so we can drop this.\n- casual: count of casual users\n- registered: count of registered users\n\nOur objective is to find total count of users irrespective of registration. So we can drop 'casual' & 'registered' columns","d60961ac":"A bike-sharing system is a service in which bikes are made available for shared use to individuals on a short term basis for a price or free. Many bike share systems allow people to borrow a bike from a \"dock\" which is usually computer-controlled wherein the user enters the payment information, and the system unlocks it. This bike can then be returned to another dock belonging to the same system.","9703100f":"A US bike-sharing provider BoomBikes has recently suffered considerable dips in their revenues due to the ongoing Corona pandemic. The company is finding it very difficult to sustain in the current market scenario. So, it has decided to come up with a mindful business plan to be able to accelerate its revenue as soon as the ongoing lockdown comes to an end, and the economy restores to a healthy state. ","54162a74":"## Import the relevant libraries","8f006ef7":" **R2 & adjusted R2 for Train & Test set**","1913e90e":"## Problem Statement","a4ab09fd":"We are required to model the demand for shared bikes with the available independent variables. It will be used by the management to understand how exactly the demands vary with different features. They can accordingly manipulate the business strategy to meet the demand levels and meet the customer's expectations. Further, the model will be a good way for management to understand the demand dynamics of a new market.","9bd689b1":"# Data Preparation","4aa4e467":"**Value count of all categorical variables**","08bf8b2a":"#### Heat-map of dataframe to show the relation between variables","400f9a03":"They have contracted a consulting company to understand the factors on which the demand for these shared bikes depends. Specifically, they want to understand the factors affecting the demand for these shared bikes in the American market. The company wants to know:\n- Which variables are significant in predicting the demand for shared bikes.\n- How well those variables describe the bike demands","ea7180db":"##### Model No 5\n- Rebuilding the model without `mnth_12`","2bb47a0d":"# Visualising the Data","0b283ec1":"From above data we can understand that\n\nlist of categorical variables are\n    1. season\n    2. month \n    3. weekday\n    4. weather sit\nlist of continuos variables\n    1. temp\n    2. atemp\n    3. hum\n    4. wind speed\nBinary Variables ( 0 or 1)\n    1. year (yr)\n    2. holiday\n    3. working day \nour target variable\n   Cnt","95b474c9":"## Solution","e4d64871":"**Pairplot of all the numeric variables.**","224d7617":"**Checking VIF**\n\nVariance Inflation Factor or VIF, gives a basic quantitative idea about how much the feature variables are correlated with each other. It is an extremely important parameter to test our linear model. The formula for calculating `VIF` is:\n\n### $ VIF_i = \\frac{1}{1 - {R_i}^2} $","426a1490":"- R^2 score of train data = 0.813\n- Adjusted R^2 of train data = 0.803\n- R^2 score of test data = 0.813\n- Adjusted R^2 of train data = 0.803","492a4d6e":"The most important step - understanding the data.\n\nIf there is some obvious multicollinearity going on, this is the first place to catch it\nHere's where we'll also identify if some predictors directly have a strong association with the outcome variable\nWe'll visualise our data using matplotlib and seaborn.\n\nVisualising Numeric Variables\nLet's make a pairplot of all the numeric variables","27a2e830":"### Dividing into X and Y sets for the model building","1c2839be":"##### Model No 4\n- Rebuilding the model without `season_3`","442f007f":"#### Rescaling the Features","c4077daa":"### Dummy Variables","8175937b":"In such an attempt, BoomBikes aspires to understand the demand for shared bikes among the people after this ongoing quarantine situation ends across the nation due to Covid-19. They have planned this to prepare themselves to cater to the people's needs once the situation gets better all around and stand out from other service providers and make huge profits.","fba38511":"### Univariate and Bivariate Analysis","77e6c987":"Using RFE(Recursive feature elimination) and manual (hybrid) approach","8807b738":"#### Dividing into X_test and y_test","dadfb188":"'temp', 'atemp' are highly correlated with variable 'cnt'","4ae1ac4c":"##### Model No 6\n- Rebuilding the model without `mnth_11`","99659dc3":"\nSo, now to check if the error terms are also normally distributed (which is infact, one of the major assumptions of linear regression), let us plot the histogram of the error terms and see what it looks like.","b15e6969":"# Bike Sharing","b453b2a7":"**We generally want a VIF that is less than 5**","faf463cf":"**The residuals are following the normally distributed with a mean 0.**","00a01732":"## Model Evaluation","8c8683d6":"### Business Goal:","32d7596f":"#### Univariate analysis of categorical columns","be31d31f":"'temp' and 'atemp' are highly correlated","bfb9692d":"**VIF for all the features is less than 5**","fa868952":"## Making Predictions on test data","bff7c6b0":"#### Bivariate analysis of categorical columns","454ca0be":"##### Model No 3\n- Rebuilding the model without `hum`","a1cee04c":"## Residual Analysis of the train data"}}