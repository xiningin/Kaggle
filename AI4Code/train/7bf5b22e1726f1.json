{"cell_type":{"a0ecc491":"code","f9c876c7":"code","5c7bcff9":"code","0a347e3f":"code","23049990":"code","289cd2c2":"code","87c97a4d":"code","92e8e73f":"code","1267bc34":"code","a2f1c80b":"code","5fdad1b4":"code","e2e2cc13":"code","be7e3a1e":"code","7d0c5935":"code","27181ffc":"code","a5014578":"code","35dad554":"code","d94733c5":"code","0a7a4e24":"code","88ffb663":"code","6f0d8a04":"code","b495e1a5":"code","9aeb872e":"code","9d6c6ef5":"code","43475981":"code","e0ab0282":"code","73ec22ae":"code","25763513":"code","a7de71a9":"code","d0daace2":"code","c2f3e096":"code","eadcac63":"code","f82d3a2c":"code","dd7ceccb":"markdown","2e17daaf":"markdown","f2b6c39e":"markdown","c64b045d":"markdown","44f699df":"markdown","108b7e8f":"markdown","a63dedef":"markdown","dd0ab6a2":"markdown","6385af89":"markdown","699e087a":"markdown","1fb40ecf":"markdown","9474ecae":"markdown","81390be2":"markdown","4cf70096":"markdown","662ef016":"markdown","ad6ab331":"markdown","556e4518":"markdown","c3d26e1c":"markdown","32d5a761":"markdown","65ac4198":"markdown","84464263":"markdown","b1508d65":"markdown","978e7c13":"markdown","80d6282d":"markdown","d9222160":"markdown","e9982a51":"markdown","0bdc5bc4":"markdown","aff4dbf0":"markdown","91352ae6":"markdown"},"source":{"a0ecc491":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nplt.style.use(\"ggplot\")\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f9c876c7":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv\")\nsub = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/sample_submission.csv\")\ntrain.head()","5c7bcff9":"train.info()","0a347e3f":"train.describe()","23049990":"train.isnull().sum()","289cd2c2":"year = train['date_time'].apply(lambda year: year.split(\"-\")[0])\nyear.unique()","87c97a4d":"hour = train['date_time'].apply(lambda year: year.split(\" \")[1].split(\":\")[0])\ntrain[\"Hour\"] = hour\ntrain[\"Hour\"] = train[\"Hour\"].astype(\"int\")\ntrain[\"Hour\"].unique()","92e8e73f":"def time_conv(hour):\n    if hour in range(5,13):\n        h = \"Morning\"\n        return h\n    elif hour in range(13,18):\n        h = \"Afternoon\"\n        return h\n    elif hour in range(18,21):\n        h = \"Evening\"\n        return h\n    elif hour in  [21,22,23,0,1,2,3,4]:\n        h = \"Night\"\n        return h\n\nHR = train['Hour'].apply(time_conv)\ntrain[\"Time\"] = HR\nHR.unique()","1267bc34":"!pip install seaborn==0.10.0\nimport seaborn as sns\nsns.__version__","a2f1c80b":"import plotly.graph_objects as go\nplt.figure(figsize=(16,6))\nsns.lineplot(x = train[\"date_time\"][:1000],\n             y = train[\"relative_humidity\"][:1000],hue = \"Time\",data = train\n             )\nplt.xticks([\"\"])\nplt.show()","5fdad1b4":"fig,ax = plt.subplots(figsize=(16,6))\nsns.lineplot(x = train[\"date_time\"][:1000],\n             y = train[\"deg_C\"][:1000],hue = \"Time\",data = train\n             )\nplt.xticks([\"\"])\nplt.show()","e2e2cc13":"plt.figure(figsize=(16,6))\ntarget_label = ['target_carbon_monoxide','target_benzene','target_nitrogen_oxides']\nfor i in range(3):\n    plt.subplot(1,3,i+1)\n    y = target_label[i]\n    sns.scatterplot(data = train,x=train[\"deg_C\"], y = train[y],hue = train[\"Time\"])\n\nplt.suptitle(\"Relation between deg_c and the 3 target classes\",x=0.5,y = 1.04)    \nplt.tight_layout()\nplt.show()","be7e3a1e":"plt.figure(figsize=(16,6))\ntarget_label = ['target_carbon_monoxide','target_benzene','target_nitrogen_oxides']\nfor i in range(3):\n    plt.subplot(1,3,i+1)\n    y = target_label[i]\n    sns.scatterplot(data = train,x=train[\"sensor_1\"], y = train[y],hue = train[\"Time\"])\n\nplt.suptitle(\"Sensor_1's relation with 3 target variables\",x=0.5,y = 1.04)    \nplt.tight_layout()\nplt.show()","7d0c5935":"plt.figure(figsize=(16,6))\ntarget_label = ['target_carbon_monoxide','target_benzene','target_nitrogen_oxides']\nfor i in range(3):\n    plt.subplot(1,3,i+1)\n    y = target_label[i]\n    sns.scatterplot(data = train,x=train[\"sensor_2\"], y = train[y],hue = train[\"Time\"])\n\nplt.suptitle(\"Sensor_2's relation with 3 target variables\",x=0.5,y = 1.04)    \nplt.tight_layout()\nplt.show()","27181ffc":"plt.figure(figsize=(16,6))\ntarget_label = ['target_carbon_monoxide','target_benzene','target_nitrogen_oxides']\nfor i in range(3):\n    plt.subplot(1,3,i+1)\n    y = target_label[i]\n    sns.scatterplot(data = train,x=train[\"sensor_3\"], y = train[y],hue = train[\"Time\"])\n\nplt.suptitle(\"Sensor_3's relation with 3 target variables\",x=0.5,y = 1.04)    \nplt.tight_layout()\nplt.show()","a5014578":"plt.figure(figsize=(16,6))\ntarget_label = ['target_carbon_monoxide','target_benzene','target_nitrogen_oxides']\nfor i in range(3):\n    plt.subplot(1,3,i+1)\n    y = target_label[i]\n    sns.scatterplot(data = train,x=train[\"sensor_4\"], y = train[y],hue = train[\"Time\"])\n\nplt.suptitle(\"Sensor_4's relation with 3 target variables\",x=0.5,y = 1.04)    \nplt.tight_layout()\nplt.show()","35dad554":"plt.figure(figsize=(16,6))\ntarget_label = ['target_carbon_monoxide','target_benzene','target_nitrogen_oxides']\nfor i in range(3):\n    plt.subplot(1,3,i+1)\n    y = target_label[i]\n    sns.scatterplot(data = train,x=train[\"sensor_5\"], y = train[y],hue = train[\"Time\"])\n\nplt.suptitle(\"Sensor 5's relation with 3 target variables\",x=0.5,y = 1.04)    \nplt.tight_layout()\nplt.show()","d94733c5":"corr_mat = train.corr()\nmask = np.array(corr_mat)\nmask[np.tril_indices_from(mask)] = False\nfig = plt.gcf()\nfig.set_size_inches(16,9)\nsns.heatmap(corr_mat,mask = mask,square = True,annot= True,cbar = True)\nplt.show()","0a7a4e24":"plt.figure(figsize=(16,8))\nfeatures = train.columns[1:9]\nfor i,col in enumerate(features):\n    plt.subplot(2,4,i+1)\n    sns.distplot(train[col])\nplt.suptitle(\"Distribution of Features\",x=0.5,y=1.03)\nplt.tight_layout()\nplt.show()","88ffb663":"plt.figure(figsize=(16,5))\nfor i,col in enumerate(target_label):\n    plt.subplot(1,3,i+1)\n    sns.distplot(train[col])\nplt.suptitle(\"Distribution of Target Classes\",x=0.5,y=1.03)\nplt.tight_layout()\nplt.show()","6f0d8a04":"fig,ax = plt.subplots(figsize=(16,6))\nsns.lineplot(x = train[\"date_time\"][:1000],\n             y = train[\"target_carbon_monoxide\"][:1000],hue = \"Time\",data = train\n             )\nplt.xticks([\"\"])\nplt.show()","b495e1a5":"fig,ax = plt.subplots(figsize=(16,6))\nsns.lineplot(x = train[\"date_time\"][:1000],\n             y = train[\"target_benzene\"][:1000],hue = \"Time\",data = train\n             )\nplt.xticks([\"\"])\nplt.show()","9aeb872e":"fig,ax = plt.subplots(figsize=(16,6))\nsns.lineplot(x = train[\"date_time\"][:1000],\n             y = train[\"target_nitrogen_oxides\"][:1000],hue = \"Time\",data = train\n             )\nplt.xticks([\"\"])\nplt.show()","9d6c6ef5":"import warnings\nwarnings.filterwarnings('ignore')\ntrain_col = train.columns[1:9]\nx = train[train_col]\nx[\"Time\"] = train[\"Time\"]\ntarget_col = train.columns[9:12]\ny = train[target_col]","43475981":"x = pd.get_dummies(x,drop_first = True)\nx.head()","e0ab0282":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_log_error\nfrom xgboost import XGBRegressor","73ec22ae":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)","25763513":"hour = test['date_time'].apply(lambda year: year.split(\" \")[1].split(\":\")[0])\ntest[\"Hour\"] = hour\ntest.head(2)","a7de71a9":"test[\"Hour\"] = test[\"Hour\"].astype(\"int\")\nHR_T = test['Hour'].apply(time_conv)\ntest[\"Time\"] = HR_T\nHR_T.unique()","d0daace2":"test.drop([\"Hour\",\"date_time\"],axis=1,inplace=True)\ntest = pd.get_dummies(test,drop_first = True)\ntest.head(2)","c2f3e096":"xgb = XGBRegressor()\n\nclf=xgb.fit(x_train,y_train[\"target_carbon_monoxide\"])\nsub[\"target_carbon_monoxide\"] = clf.predict(test)\n\nclf=xgb.fit(x_train,y_train[\"target_benzene\"])\nsub[\"target_benzene\"] = clf.predict(test)\n\nclf=xgb.fit(x_train,y_train[\"target_nitrogen_oxides\"])\nsub[\"target_nitrogen_oxides\"] = clf.predict(test)","eadcac63":"sub.head(2)","f82d3a2c":"sub.to_csv(\"Submision.csv\", index = False)","dd7ceccb":">Observation:\n- Seems like **Nitrogen Oxides** stays high at Morning most of the time\n- Stays low at Night, Evening and Afternoon most of the time","2e17daaf":"> Our date time column is a combination of year, month , day and hour. So we can make a new feature called **Hour** from our date time column and check if there is any relation between **Hour** and the other features like, is the amount of temperature, relative humidity, or target features increase or decrease in a certain period of time in a day. Then may be it'll be helpfull for making a good model.","f2b6c39e":"> <h4>Sensor 4's relation with 3 target variables:<\/h4>","c64b045d":"> Observation:\n- Looks like Sensor 4 is highly correlated with benzene and carbon monoxide, as it increases benzene and carbon monoxide also increases. \n- But it not much correlated with nitrogen oxides","44f699df":"> <h4>Distribution of features:<\/h4>","108b7e8f":"- So, we don't have any null values in our dataset","a63dedef":"> Observation:\n- Seems like Sensor 2 is also highly correlated with all 3 target variables","dd0ab6a2":"> Observation:\n- Seems like there is no Relation between deg_c and the 3 target Variables","6385af89":"> <h4>Distribution of Target Classes:<\/h4>","699e087a":"> <h4>Correlation between Features:<\/h4>","1fb40ecf":"- This dataset contains value of 2 years 2010 & 2011","9474ecae":"> <h3>Let's now divide the hour into different time period of a day<\/h3>","81390be2":">Observation:\n- Seems like **Carbon Monoxide** stays high at Morning and Evening\n- Stays low at Night and Afternoon most of the time","4cf70096":">Observation:\n- Looks like Sensor 5 is also positively correlated with all 3 target variables","662ef016":"> In this competition you have to predict the values of air pollution measurements over time, based on basic weather information (temperature and humidity) and the input values of 5 sensors.\nThe three target values that you have to predict are: target_carbon_monoxide, target_benzene, and target_nitrogen_oxides.","ad6ab331":"> Separating hour from test dataset:","556e4518":"> Observation:\n- Sensor_1 has a positive relationship with all 3 target variables\n- As Sensor_1 increases the amount of all 3 target variables also increases","c3d26e1c":"> <h4>Is there any relation between Time and 3 target variables?<\/h4>","32d5a761":"---\n\n<h1 style=\"text-align: center;font-size: 40px;\">TPS-July 2021: EDA with Baseline<\/h1>\n\n---\n\n<center><img src=\"https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/26480\/logos\/header.png?t=2021-04-09-00-57-05\n\"width=\"1000\" height=\"600\"><\/center>\n\n---","65ac4198":"> <h4>Simple XGBRegressor Baseline:<\/h4>","84464263":"> Observations:\n- The temperature stays low at Night\n- Goes High at Afternoon and Evening","b1508d65":"> <h4>Sensor_2's relation with 3 target variables:<\/h4>","978e7c13":"> <h4>Let's check, we have any Null values in our dataset or Not:<\/h4>","80d6282d":"> <h4>Sensor_1's relation with 3 target variables:<\/h4>","d9222160":"> <h4>Sensor 5's relation with 3 target variables:<\/h4>","e9982a51":"> Observation:\n- Sensor 3 is negatively correlated with all 3 target variables\n- As Sensor 3 increases the amount of all 3 target variables decreases   ","0bdc5bc4":">Observation:\n- Seems like, amount of  **Benzene** also stays high at Morning and Evening\n- Stays low at Night and Afternoon most of the time","aff4dbf0":"> <h3>Relation between deg_c and the 3 target classes<\/h3>","91352ae6":"> <h4>Sensor 3's relation with 3 target variables:<\/h4>"}}