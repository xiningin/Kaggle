{"cell_type":{"22e29c20":"code","b579ff18":"code","0da119a2":"code","d089f49d":"code","898c6ef3":"code","4be0f7e4":"code","da454d06":"code","0dcdd3fd":"code","9839de2e":"code","56fea05b":"code","b9e136d3":"code","de5f9fbd":"markdown","7667d35a":"markdown"},"source":{"22e29c20":"! pip uninstall -y kaggle\n! pip install --upgrade pip\n! pip install kaggle==1.5.6","b579ff18":"! mkdir -p ~\/.kaggle\n! cp kaggle.json ~\/.kaggle\/\n! chmod 600 ~\/.kaggle\/kaggle.json\n! kaggle -v","0da119a2":"! kaggle competitions download -c ai-project-life-environment","d089f49d":"!unzip ai-project-life-environment.zip","898c6ef3":"import torch\nimport torch.nn as nn\nimport pandas as pd\nimport numpy as np\nimport random\nimport math\nfrom sklearn.preprocessing import MinMaxScaler\n\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\nif device == 'cuda':\n  torch.cuda.manual_seed_all(111)","4be0f7e4":"train = pd.read_csv('train data.csv')\n\ntrain","da454d06":"xtrain = train.loc[:, [i for i in train.keys()[1:-1]]]\nytrain = train[train.keys()[-1]]\n\nxtrain = np.array(xtrain)\nytrain = np.array(ytrain).reshape(-1,1)\n\n\nxtrain = torch.FloatTensor(xtrain).to(device)\nytrain = torch.FloatTensor(ytrain).to(device)","0dcdd3fd":"xtrain","9839de2e":"#random seed\ntorch.manual_seed(1)\nrandom.seed(1)\n\n#hidden layer\nlin1 = nn.Linear(7,4)\nlin2 = nn.Linear(4,1)\n\nnn.init.xavier_uniform_(lin1.weight)\nnn.init.xavier_uniform_(lin2.weight)\n\nrelu = nn.ReLU()\n\n\n#model\nmodel = nn.Sequential(lin1, relu, dropout,\n                      lin2).to(device)\n\nepochs = 15000\nlr = 1e-4\n\nloss = nn.MSELoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr = lr)\n\nfor epoch in range(epochs+1):\n  H = model(xtrain)\n  cost = loss(H, ytrain)\n\n  optimizer.zero_grad()\n  cost.backward()\n  optimizer.step()\n\n  if epoch % 1000 == 0:\n    print('Epoch:', '%05d'%epoch, 'Cost: {:.5f}'.format(cost.item()))\n\nprint('Finished')","56fea05b":"test = pd.read_csv('test data.csv')\n\nxtest = test.loc[:, [i for i in test.keys()[1:]]]\nxtest = np.array(xtest)\n\nxtest = torch.from_numpy(xtest).float().to(device)\n\nH = model(xtest)\n\npredic = H.cpu().detach().numpy().reshape(-1,1)\n\nsubmit = pd.read_csv('submit sample.csv')\nfor i in range(len(submit)):\n  submit['Expected'][i] = predic[i]\n\nsubmit","b9e136d3":"submit.to_csv('submit.csv',mode='w',index=False)\n! kaggle competitions submit -c ai-project-life-environment -f submit.csv -m \"submit\"","de5f9fbd":"NN\ubd84\ub958 \uc0ac\uc6a9","7667d35a":"train data \uc77d\uc5b4\uc624\uae30"}}