{"cell_type":{"e386b774":"code","14911d82":"code","c7ce3c50":"code","9254c0a8":"code","57c9ab3d":"code","ba6bc385":"code","2ec3d9a2":"code","c37b4c62":"code","3e57634e":"code","53032c14":"code","0a884b9b":"code","8105e36c":"code","daf83a1f":"code","d20a9196":"code","f4cff50c":"code","8c14a0c4":"code","2a99a782":"code","e3ca0143":"code","226a6cf8":"code","9951113a":"code","54c17cb5":"code","c792f0f5":"code","18744706":"code","22a1b4ff":"code","b4e8ecdd":"code","e26c83cb":"code","4c5334ff":"code","ea97966d":"code","3d407967":"code","a0d40681":"code","7649f064":"code","8604a53e":"code","790c90c0":"code","fb3560ef":"code","d1c84f6f":"code","d9d69a36":"code","a474efa9":"code","a025c42a":"code","8bf34593":"code","2d3cf3a5":"code","2eec3a1d":"code","f772cbd1":"code","6b148111":"code","4aec2f3d":"code","598a30f8":"code","18f60e11":"code","7cdfb5f7":"code","7a629e18":"code","f59effc4":"code","4597862a":"code","1b8903b5":"code","fef5914d":"code","7d6e5fe2":"code","04cdb0e8":"code","2b3fe507":"code","b28c5690":"code","6a5cc202":"code","0ba4af30":"code","dec69f67":"code","300422d8":"code","599e04ef":"code","e97dafc4":"code","6dcb16f4":"code","6b9ce7e1":"code","b586f81a":"code","aad29703":"code","a3bff77e":"code","4d054073":"code","98ef393e":"code","1b79bcc1":"code","c2732b97":"markdown","5dccb04e":"markdown","4d357687":"markdown","ef91de22":"markdown","16889450":"markdown"},"source":{"e386b774":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","14911d82":"data = pd.read_csv(\"..\/input\/WorldCupMatches.csv\")\n","c7ce3c50":"data.info()","9254c0a8":"data.columns","57c9ab3d":"data.corr()","ba6bc385":"f,ax = plt.subplots(figsize=(13, 13))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","2ec3d9a2":"data.head(10)","c37b4c62":"# this function rewrite the given list if the entries have space between the words\ndef f(liste):\n    liste1=[]\n    for i in (liste):\n        if len(i.split())==2:\n            i=i.split()[0]+\"_\"+i.split()[1]\n            \n        elif len(i.split())==3:\n            i=i.split()[0]+\"_\"+i.split()[1]+\"_\"+i.split()[2]\n        else:\n            i=i.split()[0]\n        liste1.append(i)\n    return liste1\n        ","3e57634e":"data.columns","53032c14":"# use the function f on the columns of the data\n# for now I couldn't find any way to write the function as list comprehension\ndata.columns=[f(data.columns)]","0a884b9b":"data.head()","8105e36c":"#what is the meaning of multiindex? ","daf83a1f":"data.columns","d20a9196":"data.describe()","f4cff50c":"data.info()","8c14a0c4":"#add new column to data\n#df=data.head(100)\n\n#data1=df.set_index([\"Stage\",\"Home_Team_Goals\"])\n\n#df[\"Total_Goals\"]=df.Home_Team_Goals + df.Away_Team_Goals\n\n#df[\"Home_Team_Total_Goals\"]=[df[\"Home_Team_Goals\"]+df[\"Half-time_Home_Goals\"]]\n#data[\"Away_Team_Total_Goals\"]=data.Away_Team_Goals+data.Half-time_Away_Goals","2a99a782":"data2=pd.read_csv(\"..\/input\/WorldCups.csv\")","e3ca0143":"data2.head(10)","226a6cf8":"data2.info()","9951113a":"data2","54c17cb5":"data2.GoalsScored.plot(kind=\"line\", color=\"r\", linestyle=\":\",figsize=(10,10))\nplt.ylabel(\"GoalsScored\")\nplt.title(\"Line Plot\")\nplt.show()\n\n","c792f0f5":"data3 = data2.set_index([\"Country\",\"Winner\"]) ","18744706":"data3","22a1b4ff":"goal_mean=sum(data2.GoalsScored)\/len(data2.GoalsScored)\nprint(goal_mean)\ndata2[\"GoalLevel\"]=[\"high\" if i> goal_mean else \"low\" for i in data2.GoalsScored]\n","b4e8ecdd":"data2.head()","e26c83cb":"data2.loc[:,[\"GoalsScored\",\"GoalLevel\"]]","4c5334ff":"data2.MatchesPlayed.plot(kind=\"hist\",color=\"b\",label=\"MatchesPlayed\")\nplt.legend(loc='upper left')\nplt.xlabel(\"MatchesPlayed\")\nplt.show()","ea97966d":"data2.plot(kind='scatter', x='MatchesPlayed', y='GoalsScored',alpha = 0.5,color = 'red')\nplt.xlabel('MatchesPlayed')              \nplt.ylabel('GoalsScored')\nplt.title('MatchesPlayed-GoalsScored Scatter Plot') \nplt.show()","3d407967":"data2.boxplot(column='GoalsScored',by = 'MatchesPlayed')\nplt.show()","a0d40681":"#subplots\ndata2.plot(grid=True, alpha=0.9,subplots=True, figsize=(10,10)) \nplt.show()","7649f064":"#melting\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\ndata_new=data2.head(10)\nmelted = pd.melt(frame=data_new,id_vars = 'Winner', value_vars= ['GoalsScored',\"QualifiedTeams\",\"MatchesPlayed\"])\nmelted","8604a53e":"#concetenating data\ndata5=data2.head()\ndata6=data2.tail()\nconcat_data=pd.concat([data5,data6],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconcat_data","790c90c0":"concat_data_col1=pd.concat([data5.GoalsScored,data5.GoalLevel],axis=1), #axis=1 means concat datas by columns\nconcat_data_col1","fb3560ef":"df1=data2[\"GoalsScored\"].head()\ndf2=data2[\"GoalLevel\"].head()\nconcat_data_col2=pd.concat([df1,df2],axis=1)\nconcat_data_col2","d1c84f6f":"data7=data2.loc[:,[\"GoalsScored\",\"QualifiedTeams\",\"MatchesPlayed\"]]\ndata7.plot()\nplt.show()","d9d69a36":"data7.plot(subplots=True)\nplt.show()","a474efa9":"#scatter plot\ndata7.plot(kind=\"scatter\",x=\"MatchesPlayed\",y=\"QualifiedTeams\")\nplt.show()","a025c42a":"data7","8bf34593":"#histogram plot\ndata7.plot(kind=\"hist\",y=\"GoalsScored\",bins=20,range= (0,150),figsize=(8,8),color=\"purple\")\nplt.title(\"GoalsScored Histogram Plot\")\nplt.xlabel(\"Goals\")\nplt.show()","2d3cf3a5":"# histogram subplot with non cumulative and cumulative\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata7.plot(kind = \"hist\",y = \"GoalsScored\",bins = 20,range= (0,180),normed = True,ax = axes[0])\ndata7.plot(kind = \"hist\",y = \"GoalsScored\",bins = 20,range= (0,180),normed = True,ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt.show()","2eec3a1d":"data2.head()","f772cbd1":"# histogram subplot with non cumulative and cumulative\nfig,axes=plt.subplots(nrows=2,ncols=1)\ndata5.plot(kind=\"hist\",y=\"MatchesPlayed\",bins=20,ax=axes[0])\ndata5.plot(kind=\"hist\",y=\"MatchesPlayed\",bins=20,ax=axes[1],cumulative=True)\nplt.savefig('graph1.png')\nplt.show()","6b148111":"data2.head()","4aec2f3d":"data2[\"GoalsScored\"]","598a30f8":"# indexing using square brackets\ndata2[\"GoalsScored\"][0]","18f60e11":"# using column attribute and row label\ndata2.GoalsScored[2]","7cdfb5f7":"# using loc accessor\ndata2.loc[0,[\"GoalsScored\"]]","7a629e18":"# using loc accessor\ndata2.loc[4,[\"GoalsScored\"]]","f59effc4":"# Selecting only some columns\ndata2[[\"GoalsScored\",\"QualifiedTeams\",\"Attendance\"]]\n","4597862a":"# or we can use this method to get some columns\ndata7=data2.loc[:,[\"QualifiedTeams\",\"GoalsScored\",\"MatchesPlayed\"]]\ndata7","1b8903b5":"data2.head()","fef5914d":"# Slicing and indexing series\ndata2.loc[0:10,\"GoalsScored\":\"Attendance\"] ","7d6e5fe2":"# Reverse slicing \ndata2.loc[10:0:-1,\"GoalsScored\":\"Attendance\"] ","04cdb0e8":"# From something to end\ndata2.loc[0:10,\"GoalsScored\":] ","2b3fe507":"# From beginning to something\ndata2.loc[0:10,:\"Fourth\"] ","b28c5690":"data2","6a5cc202":"#filtering data frames\nboolean=data2.GoalsScored > 100\ndata2[boolean]","0ba4af30":"# Combining filters\nfirst_filter=data2.GoalsScored >80\nsecond_filter=data2.MatchesPlayed >40\ndata2[first_filter & second_filter]","dec69f67":"data2[data2.GoalsScored <90]","300422d8":"data2.GoalsScored[data2.QualifiedTeams < 16]","599e04ef":"# transfroming data and list comprehension\ndata2[\"GoalMean\"]=[round(data2.GoalsScored[i]\/data2.MatchesPlayed[i],2) for i in range(len(data2.GoalsScored))]","e97dafc4":"data2","6dcb16f4":"#index object\nprint(data2.index.name)\ndata2.index.name=\"IndexName\"\ndata2.head()","6b9ce7e1":"# Overwrite index\n# if we want to modify index we need to change all of them.\n# first copy of our data to data3 then change index \ndata8 = data2.copy()\n# lets make index start from 100. It is not remarkable change but it is just example\ndata8.index = range(1,21,1)\ndata8","b586f81a":"# Setting index : type 1 is outer type 2 is inner index\ndata9 = data2.set_index([\"Winner\",\"Year\"]) \ndata9","aad29703":"data10=data2.set_index([\"Winner\",\"GoalMean\"])\ndata10","a3bff77e":"data2.describe()","4d054073":"data2.groupby(\"GoalsScored\").mean()","98ef393e":"data2.groupby(\"QualifiedTeams\").GoalMean.min()","1b79bcc1":"data2.groupby(\"MatchesPlayed\")[[\"GoalMean\",\"Attendance\"]].max()","c2732b97":"B\u00f6l\u00fcm 6 ve B\u00f6l\u00fcm 7 ye ait \u00f6dev","5dccb04e":"or we can use the following code","4d357687":"**This kernel provides an overview of the world cup history.(1930-2014)","ef91de22":"There is a problem due to the user defined function f !!","16889450":"Data Science ve Python Dersi B\u00f6l\u00fcm4-B\u00f6l\u00fcm5 Dersleri \u00d6devi"}}