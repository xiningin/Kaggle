{"cell_type":{"c7e5c6d8":"code","55944ab6":"code","bb63dfed":"code","c9988d6c":"code","2f8ff094":"code","1d7b1eb5":"code","50d12570":"code","7eaf0721":"markdown","d2c6c54e":"markdown","d2e6b18a":"markdown","7724c8b5":"markdown","0085feb7":"markdown","f04615c9":"markdown","cadd543d":"markdown","3ad377b1":"markdown","d9d07471":"markdown","e6441a1b":"markdown"},"source":{"c7e5c6d8":"# Import python packages\nimport os, sys\nimport pandas as pd,numpy as np\nimport re\nimport spacy\nfrom os import walk\nimport shutil\nfrom shutil import copytree, ignore_patterns\nfrom spacy import displacy\nfrom collections import Counter\nimport en_core_web_sm\nnlp = en_core_web_sm.load()\nimport xml.etree.cElementTree as ET\nfrom collections import OrderedDict\nimport json\nfrom __future__ import unicode_literals, print_function\nimport plac\nimport random\nfrom pathlib import Path\nfrom spacy.util import minibatch, compounding\nfrom spacy.matcher import Matcher\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nfrom datetime import date\nimport calendar\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom itertools import takewhile, tee\nimport itertools\nimport nltk, string\nfrom nltk.tokenize import word_tokenize\nfrom nltk.tag import pos_tag\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.tokenize import RegexpTokenizer\nfrom nltk.corpus import stopwords\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom nltk.cluster.util import cosine_distance\nimport networkx as nx\nfrom PIL import Image,ImageFilter \nfrom IPython.display import display, HTML, Javascript\n\n%matplotlib inline","55944ab6":"bulletin_dir = \"..\/input\/data-science-for-good-city-of-los-angeles\/cityofla\/CityofLA\/Job Bulletins\"\nadditional_data_dir = '..\/input\/data-science-for-good-city-of-los-angeles\/cityofla\/CityofLA\/Additional data'\nSTOP_WORDS = stopwords.words('english')\nTREE_ID = 1 #Used to plot interactive graphs\n\njob_titles = pd.read_csv(additional_data_dir+'\/job_titles.csv', header=None)\njob_class_df = pd.read_csv('..\/input\/dsfg-cityofla-analysis-and-solution\/job_class_submission.csv')\ndata_dictionary = pd.read_csv('..\/input\/dsfg-cityofla-analysis-and-solution\/data_dictionary_submission.csv')\n\njob_class_df.fillna('', inplace=True)","bb63dfed":"def createEdges (job_class_df):\n    edge_cols = ['JOB_CLASS_TITLE','EXP_JOB_CLASS_TITLE','EXPERIENCE_LENGTH','EXPERIENCE_LEN_UNIT']\n\n    df_edges = job_class_df[edge_cols]\n\n    #EXP_JOB_CLASS_TITLE consists of job classes separated with ',' (e.g. SYSTEMS ANALYST, MANAGEMENT ANALYST)\n    #Spliting these values and creating rows for each job class\n    s = df_edges[\"EXP_JOB_CLASS_TITLE\"].str.split(',', expand=True).stack()\n    i = s.index.get_level_values(0)\n    df_edges = df_edges.loc[i].copy()\n    df_edges[\"EXP_JOB_CLASS_TITLE\"] = s.values\n\n    df_edges['EXP_JOB_CLASS_TITLE'] = df_edges['EXP_JOB_CLASS_TITLE'].apply(lambda x: x.strip())\n\n    df_edges = pd.DataFrame(df_edges.groupby(edge_cols).size().reset_index(name='Freq'))\n    df_edges.drop(columns='Freq', inplace=True)\n\n    #remove exp_job_class_title if it is same as job_class_title\n    df_edges.loc[df_edges['JOB_CLASS_TITLE']==df_edges['EXP_JOB_CLASS_TITLE'],'EXP_JOB_CLASS_TITLE']=''\n\n    #To find implicit links\n    #For job classes like 'Senior Systems Analyst' - junior level job class will be like 'Systems Analyst', if the title exists\n    #Find senior job_class that doesn't have junior level exp_job_class_title \n    job_without_juniors = []\n    for job_class in df_edges['JOB_CLASS_TITLE'].unique():\n        if job_class.startswith('SENIOR'):\n            exist = False\n            junior_level = job_class.replace('SENIOR','').strip()\n            for exp_job in df_edges[df_edges['JOB_CLASS_TITLE']==job_class]['EXP_JOB_CLASS_TITLE']:\n                if exp_job.strip()==junior_level:\n                    exist = True\n                    break\n            if not exist:\n                #add only those titles that are actually job_titles\n                if junior_level in map(str.strip,job_titles[0].values):\n                    job_without_juniors.append([job_class,junior_level,'',''])\n\n    df_edges = df_edges.append(pd.DataFrame(job_without_juniors,\n                                           columns = edge_cols), ignore_index=True)\n\n    #df_edges.head()\n    return df_edges\n\ndef getLowerJobEdges(job_title, data):\n    \"\"\"Lower edges or the job titles that can be promoted to job_title.\n    \n    Parameters\n    ----------\n    job_title : str\n        job class title for which lower job classes are to be searched in data\n    data : DataFrame\n        dataframe used to search lower job classes\n    \n    Returns\n    -------\n    list : [tuple,str]\n        tuple - edge tuple (source, target)\n        str - edge label\n    \"\"\"\n    \n    result = []\n    for index,e in data.iterrows():\n        if e['JOB_CLASS_TITLE'] == job_title and e['EXP_JOB_CLASS_TITLE']!='':\n            result.append([(e['EXP_JOB_CLASS_TITLE'],e['JOB_CLASS_TITLE']),\n                          str(e['EXPERIENCE_LENGTH'])+' '+e['EXPERIENCE_LEN_UNIT']])\n            result.extend(getLowerJobEdges(e['EXP_JOB_CLASS_TITLE'], data))\n    return result\n\ndef getUpperJobEdges(job_title, data):\n    \"\"\"Upper edges or the job titles that a job_title can be promoted to.\n    \n    Parameters\n    ----------\n    job_title : str\n        job class title for which upper job classes are to be searched in data\n    data : DataFrame\n        dataframe used to search upper job classes\n    \n    Returns\n    -------\n    list : [tuple,str]\n        tuple - edge tuple (source, target)\n        str - edge label\n    \"\"\"\n    \n    result = []\n    for index,e in data.iterrows():\n        if e['EXP_JOB_CLASS_TITLE'] == job_title:\n            result.append([(e['EXP_JOB_CLASS_TITLE'],e['JOB_CLASS_TITLE']),\n                          str(e['EXPERIENCE_LENGTH'])+' '+e['EXPERIENCE_LEN_UNIT']])\n            result.extend(getUpperJobEdges(e['JOB_CLASS_TITLE'], data))\n    return result\n\ndef getEdges(job_title, data):\n    \"\"\"Edges or job titles that a job_title can be promoted to\/from.\n    \n    Parameters\n    ----------\n    job_title : str\n        job title to search for edges\n    data : DataFrame\n        dataframe used to search upper job classes\n    \n    Returns\n    -------\n    list : [tuple,str]\n        tuple - edge tuple (source, target)\n        str - edge label\n    \"\"\"\n    \n    edges = []\n    edges = getLowerJobEdges(job_title, data)\n    edges.extend(getUpperJobEdges(job_title, data))\n    return edges\n\ndef plotGraph(G):\n    \"\"\"Plots a networkx graph\n    \n    Parameters\n    ----------\n    G : networkx Graph\n    \"\"\"\n    \n    plt.figure(figsize=(12, 12)) \n    plt.axis('off')\n    pos = nx.circular_layout(G)\n    nx.draw_networkx(G, pos, with_labels=True, \n                    node_color='blue', font_size=8, node_size=10000, width = 2)\n    \n    #Uncomment below to draw edge labels\n    #nx.draw_networkx_edge_labels(G, label_pos=.5, pos=pos)\n    \n    plt.show()\n\ndef getPromotionalPaths(df_edges, job_class_df, job_title, candidateDataDf=pd.DataFrame):    \n    if 'JOB_CLASS_TITLE' in candidateDataDf.columns:\n        #only first row will be considered and searched for promotional paths\n        job_title = candidateDataDf['JOB_CLASS_TITLE'].iloc[0]\n    if job_title == '':\n        print('No job title assigned.')\n        return\n    \n    job_nodes = job_class_df[job_class_df['JOB_CLASS_TITLE']==job_title][['JOB_CLASS_TITLE',\n                                                                          'EXP_JOB_CLASS_TITLE']]\n    job_node_names = [n[0] for index,n in job_nodes.iterrows()]\n    job_edges = getEdges(job_title, df_edges)\n    \n    eligibilityCheckFrames = {}\n    for edge in job_edges:\n        #print(edge)\n        if edge[0][0] == job_title:\n            eligibilityCheckFrames[edge[0][1]] = checkEligibility(job_title=edge[0][1], job_class_df = job_class_df, candidateDataDf=candidateDataDf)\n    \n    job_edge_names = [e[0] for e in job_edges]\n    \n    #set edge labels\n    experience_dict={}\n    for edge in job_edges:\n        experience_dict[edge[0]] = edge[1]\n\n    #networkx directed graph for promotion path visuals\n    G = nx.DiGraph()\n    G.add_nodes_from(job_node_names)\n    G.add_edges_from(job_edge_names)\n    nx.set_edge_attributes(G, experience_dict, 'Experience')\n\n    result = {\n              \"job_title\" : job_title,\n              \"prom_messages\" : eligibilityCheckFrames,\n              \"interact_graph\" : showInteractivePromotionalPaths(df_edges, job_title),\n              \"static_graph\" : G\n            }\n    return result\n\ndef viewOutput(response):\n    display(HTML(\"<br>\"))\n    display(HTML(\"<center><h2><b>Promotions availability search output for : \" + response[\"job_title\"].title() + \"<\/b><\/h2><\/center>\"))\n    #display(HTML(response[\"prom_messages\"]))\n    eligibilityCheckFrames = response[\"prom_messages\"]\n    if len(eligibilityCheckFrames)>0:\n        eligibilityCheckFrames = OrderedDict(sorted(eligibilityCheckFrames.items(), key=lambda kv: len(kv[1])))\n        \n        for key in eligibilityCheckFrames.keys():\n            if len(eligibilityCheckFrames[key])==0:\n                display(HTML(\"<b>Candidate is eligible for promotion for : <u>\" + key.title() + \"<\/u><\/b>\"))\n            else:\n                display(HTML(\"To be eligible for promotion for : <b>\" + key.title() + \"<\/b>, below requirements needs to be fulfilled.\"))\n                df = eligibilityCheckFrames[key]\n                df.index = np.arange(1,len(df)+1)\n                df['EXPERIENCE_LENGTH'] = df['EXPERIENCE_LENGTH'].fillna('0')\n                display(df)\n        display(HTML(\"<br><br><b>Note: <\/b><i>Only experience and license details are matched for the above results. Please check with the concerned department for other requirement details.<\/i>\"))\n        #display(HTML(plotGraph(response[\"static_graph\"])))\n        \n        display(HTML(response[\"interact_graph\"]))\n    else:\n        display(HTML(\"<b>Current criteria doesn't match for any job class level promotion<\/b>\"))\n        display(HTML(\"<h4>Paths connected with \" + response[\"job_title\"].title() + \" job title are shown below.<\/h4>\"))\n        display(HTML(plotGraph(response[\"static_graph\"])))\n    \ndef showPromotionalPaths(df_edges, job_class_df, job_title, candidateDataDf=pd.DataFrame):\n    \"\"\"Displays eligible\/proposed promotions. Future promotion paths are also displayed as a directed graph.\n    \n    Parameters\n    ----------\n    candidateDatadf : DataFrame\n        Dataframe consisting of data for a candidate to be searched for available promotions. Only first row will be considered.\n    df_edges : DataFrame\n        Dataframe consisting of all available data edges from all job classes\n    \"\"\"\n    \n    if 'JOB_CLASS_TITLE' in candidateDataDf.columns:\n        #only first row will be considered and searched for promotional paths\n        job_title = candidateDataDf['JOB_CLASS_TITLE'].iloc[0]\n    if job_title == '':\n        print('No job title assigned.')\n        return\n    \n    job_nodes = job_class_df[job_class_df['JOB_CLASS_TITLE']==job_title][['JOB_CLASS_TITLE',\n                                                                          'EXP_JOB_CLASS_TITLE']]\n    job_node_names = [n[0] for index,n in job_nodes.iterrows()]\n    job_edges = getEdges(job_title, df_edges)\n    \n    for edge in job_edges:\n        if edge[0][0] == job_title:\n            checkEligibility(job_title=edge[0][1], job_class_df = job_class_df, candidateDataDf=candidateDataDf) #check and print eligiblity for explicit promotions\n    \n    job_edge_names = [e[0] for e in job_edges]\n    \n    #set edge labels\n    experience_dict={}\n    for edge in job_edges:\n        experience_dict[edge[0]] = edge[1]\n\n    #networkx directed graph for promotion path visuals\n    G = nx.DiGraph()\n    G.add_nodes_from(job_node_names)\n    G.add_edges_from(job_edge_names)\n    nx.set_edge_attributes(G, experience_dict, 'Experience')\n\n    #print(nx.info(G))\n    plotGraph(G)\n\nclass Experience:\n    \"\"\"A class to represent experience details\n    \n    Attributes\n    ----------\n    expLength : float\n        experience length\n    expLengthUnit : str\n        unit for experience length (e.g. year\/month\/hour)\n    fullTimePartTime : str\n        type of experience (FULL_TIME\/PART_TIME)\n    paidVolunteer : str\n        type of experience (PAID\/VOLUNTEER)\n    experience : str\n        Represents the experience text by concatenating other attributes\n    errMsg : str\n        Represents the errors\/mismatch occured while comparing two experiences. Blank if matched.\n    \n    Methods\n    -------\n    compare(objCandidateExperience)\n        Compares self with another experience object(i.e. objCandidateExperience) and returns errMsg accordingly\n    getExperience\n        Outputs a string representing the experience text\n    getErrMsg\n        Outputs a message to be displayed in case of comparison mismatch\n    \"\"\"\n    \n    def __init__(self, dfJobClassRow):\n        \"\"\"\n        \n        Parameters\n        ----------\n        dfJobClassRow : Series\n            Row of Job Class dataframe, containing experience related columns\n        \"\"\"\n        if dfJobClassRow['EXPERIENCE_LENGTH']=='':\n            self.expLength = 0\n        else:\n            self.expLength = float(dfJobClassRow['EXPERIENCE_LENGTH'])\n        \n        self.expLengthUnit = dfJobClassRow['EXPERIENCE_LEN_UNIT']\n        self.fullTimePartTime = dfJobClassRow['FULL_TIME_PART_TIME']\n        self.paidVolunteer = dfJobClassRow['PAID_VOLUNTEER']\n        self.experience = self.getExperience()\n        self.errMsg = ''\n    \n    def compare(self, objCandidateExperience):\n        \"\"\"Compares self with another experience class object\n        \n        Parameters\n        ----------\n        objCandidateExperience : Experience\n            object for Experience class created for a candidate\n        \n        Returns\n        -------\n        errMsg : str\n            blank if matched, else mismatched experience requirement string\n        \"\"\"\n        \n        if self.experience == objCandidateExperience.experience:\n            self.errMsg = ''\n        else:\n            if self.expLength == objCandidateExperience.expLength and self.expLengthUnit == objCandidateExperience.expLengthUnit:\n                if self.fullTimePartTime == objCandidateExperience.fullTimePartTime:\n                    if objCandidateExperience.paidVolunteer in self.paidVolunteer:\n                        self.errMsg = ''\n                    else:\n                        self.errMsg = self.getErrorMsg()\n                else:\n                    if objCandidateExperience.fullTimePartTime in self.fullTimePartTime:\n                        if objCandidateExperience.paidVolunteer in self.paidVolunteer.contains:\n                            self.errMsg = ''\n                        else:\n                            self.errMsg = self.getErrorMsg()\n                    else:\n                        self.errMsg = self.getErrorMsg()\n            elif self.expLengthUnit == objCandidateExperience.expLengthUnit:\n                if self.expLength < objCandidateExperience.expLength:\n                    if self.fullTimePartTime == objCandidateExperience.fullTimePartTime:\n                        if objCandidateExperience.paidVolunteer in self.paidVolunteer:\n                            self.errMsg = ''\n                        else:\n                            self.errMsg = self.getErrorMsg()\n                    else:\n                        if objCandidateExperience.fullTimePartTime in self.fullTimePartTime:\n                            if objCandidateExperience.paidVolunteer in self.paidVolunteer.contains:\n                                self.errMsg = ''\n                            else:\n                                self.errMsg = self.getErrorMsg()\n                        else:\n                            self.errMsg = self.getErrorMsg()\n                else:\n                    self.errMsg = self.getErrorMsg()\n            else:\n                self.errMsg = self.getErrorMsg()\n        #print(self.experience, objCandidateExperience.experience)\n        return self.errMsg\n    \n    def getExperience(self):\n        \"\"\"Outputs a string representing the experience text\n        \n        Returns\n        -------\n        str - string representing the experience text\n        \"\"\"\n        \n        return ' '.join([str(float(self.expLength) if self.expLength != '' else self.expLength),\n                         self.expLengthUnit,\n                         self.fullTimePartTime.replace('|','\/'),\n                         self.paidVolunteer.replace('|','\/')])\n    \n    def getErrorMsg(self):\n        \"\"\"Outputs a message to be displayed in case of comparison mismatch\"\"\"\n        \n        return self.experience + ' experience is required for this job class.'\n\nclass License:\n    \"\"\"A class to represent license details\n    \n    Attributes\n    ----------\n    driverLicReq : str\n        whether driver's license is required for a job class or not. In case of candidate, it should be 'R' if one holds a license\n    driverLicType : str\n        license types hold by candidate\/ license types required for a job class\n    additionalLic : str\n        additional licenses hold by candidate\/ required for a job class\n    license : str\n        Represents the license text by concatenating other attributes\n    errMsg : str\n        Represents the errors\/mismatch occured while comparing two licenses. Blank if matched.\n    \n    Methods\n    -------\n    compare(objCandidateLicense)\n        Compares self with another license object(i.e. objCandidateLicense) and returns errMsg accordingly\n    getLicense\n        Outputs a string representing the license text\n    getErrMsg\n        Outputs a message to be displayed in case of comparison mismatch\n    \"\"\"\n    \n    def __init__(self, dfJobClassRow):\n        \"\"\"\n        \n        Parameters\n        ----------\n        dfJobClassRow : Series\n            Row of Job Class dataframe, containing license related columns\n        \"\"\"\n        \n        if 'DRIVERS_LICENSE_REQ' in dfJobClassRow:\n            self.driverLicReq = dfJobClassRow['DRIVERS_LICENSE_REQ']\n        else:\n            self.driverLicReq = 'R'\n        self.driverLicType = dfJobClassRow['DRIV_LIC_TYPE']\n        self.additionalLic = dfJobClassRow['ADDTL_LIC']\n        self.license = self.getLicense()\n        self.errMsg = ''\n    \n    def compare(self, objCandidateLicense):\n        \"\"\"Compares self with another license class object\n        \n        If DRIVERS_LICENSE_REQ is 'P', then this will consider it as a match\n        Additional licenses are not compared in this method.\n        \n        Parameters\n        ----------\n        objCandidateLicense : License\n            object for License class created for a candidate\n        \n        Returns\n        -------\n        errMsg : str\n            blank if matched, else mismatched license requirement string\n        \"\"\"\n        \n        if self.driverLicReq == 'P' or self.driverLicReq == '':\n            self.errMsg = ''\n        else:\n            if self.driverLicType == '' and objCandidateLicense.driverLicReq == 'R':\n                self.errMsg = ''            \n            elif objCandidateLicense.driverLicType in self.driverLicType:\n                self.errMsg = ''\n            else:\n                self.errMsg = self.getErrorMsg()\n        \n        return self.errMsg\n    \n    def getLicense(self):\n        \"\"\"Outputs a string representing the license text\n        \n        Returns\n        -------\n        str - string representing the license text\n        \"\"\"\n        \n        return self.driverLicType\n    \n    def getErrorMsg(self):\n        \"\"\"Outputs a message to be displayed in case of comparison mismatch\"\"\"\n        \n        if self.driverLicType != '':\n            return self.driverLicType + ' license is required for this job class.'\n        else:\n            return 'A valid California driver\\'s license is required for this job class.'\n\nclass JobClass:\n    \"\"\"A class to represent job class details\n    \n    Attributes\n    ----------\n    jobClassTitle : str\n        job class title\/ current job class of candidate\n    examType : str\n        OPEN, INT_DEPT_PROM, DEPT_PROM, OPEN_INT_PROM ('' if not provided)\n    selectionCriteria : str\n        selection criteria for a job class ('' if not provided)\n    requirementSetId : str\n        requirement set id ('' if not provided)\n    requirementSubSetId : str\n        requirement sub set id ('' if not provided)\n    experience : Experience\n        experience details for job class\n    license : License\n        license details for job class\n    errMsg : str\n        Represents the errors\/mismatch occured while comparing two licenses. Blank if matched.\n    \n    Methods\n    -------\n    compare(candidateJobClass)\n        Compares self with another JobClass object(i.e. candidateJobClass) and returns errMsg accordingly\n    \"\"\"\n    \n    def __init__(self, dfJobClassRow):\n        \"\"\"\n        \n        Parameters\n        ----------\n        dfJobClassRow : Series\n            Row of Job Class dataframe, containing job class columns\n        \"\"\"\n        \n        if 'JOB_CLASS_TITLE' in dfJobClassRow:\n            self.jobClassTitle = dfJobClassRow['JOB_CLASS_TITLE']\n        else:\n            self.jobClassTitle = 'CandidateJobClass'\n        if 'EXAM_TYPE' in dfJobClassRow:\n            self.examType = dfJobClassRow['EXAM_TYPE']\n        else:\n            self.examType = ''\n        if 'SELECTION_CRITERIA' in dfJobClassRow:\n            self.selectionCriteria = dfJobClassRow['SELECTION_CRITERIA']\n        else:\n            self.selectionCriteria = ''\n        self.expJobClassTitle = dfJobClassRow['EXP_JOB_CLASS_TITLE']\n        if 'REQUIREMENT_SET_ID' in dfJobClassRow:\n            self.requirementSetId = dfJobClassRow['REQUIREMENT_SET_ID']\n        else:\n            self.requirementSetId = ''\n        if 'REQUIREMENT_SUBSET_ID' in dfJobClassRow:\n            self.requirementSubSetId = dfJobClassRow['REQUIREMENT_SUBSET_ID']\n        else:\n            self.requirementSubSetId = ''\n        self.experience = Experience(dfJobClassRow)\n        self.license = License(dfJobClassRow)\n        self.errMsg = ''\n    \n    def compare(self, candidateJobClass):\n        \"\"\"Compares experience, license details of a candidate job class with self\n        \n        Parameters\n        ----------\n        candidateJobClass : JobClass\n            JobClass object for candidate to be compared\n        Returns\n        -------\n        errMsg : str\n            blank if matched, else mismatched requirements string\n        \"\"\"\n        \n        self.errMsg = self.errMsg + ' ' + self.experience.compare(candidateJobClass.experience)\n        self.errMsg = self.errMsg + ' ' + self.license.compare(candidateJobClass.license)\n        return self.errMsg.strip()\n\ndef checkRequirements(data, candidateJobClass):\n    \"\"\"Matches the requirements of the job class with supplied candidate job class data\n    \n    Parameters\n    ----------\n    data : DataFrame\n        job class data with the data_dictionary fields (requirements to match to be eligible for the promotion)\n    candidateJobClass : JobClass\n        candidate data with which the requirements will be matched\n    \n    Returns\n    -------\n    list [errMsg, conj]\n        a row for each requirement in data\n        errMsg - blank if matches the requirements, else contains not matched requirement texts\n        conj - conjuction to be checked with other requirements (i.e.or\/and)\n    \"\"\"\n    \n    conj = ''\n    result = []\n\n    for index,row in data.iterrows():\n        conj = row['REQUIREMENT_CONJ']\n        if conj == '':\n            conj = 'and'\n        \n        jobClass = JobClass(row)\n        errMsg = jobClass.compare(candidateJobClass)\n        result.append([errMsg, conj])\n    return result\n\ndef matchRequirements(requirementsResult):\n    \"\"\"Applies conjuctions on multiple requirements(checkRequirements result) \n    \n    Parameters\n    ----------\n    requirementsResult : list\n        [errMsg, conj]\n        errMsg - blank for matched requirements, else contains not matched requirement texts\n        conj - conjuction to be checked with other requirements (i.e.or\/and)\n    \n    Returns\n    -------\n    errMsg, conj\n        errMsg - blank if all requirements matched, else ';' separated message for all unmatched requirements\n        conj - last conjuction to be matched with other requirements(if any). Will be used if first called for sub-requirements\n    \"\"\"\n    \n    resultErrList = [] \n    resultRequirementsMatch = False\n    conj = ''\n    for row in requirementsResult:\n        errMsg = row[0]\n        conj = row[1]\n        currentRequirementsMatch = False\n        if len(errMsg)==0:\n            currentRequirementsMatch = True\n        else:\n            resultErrList.append(errMsg)\n            currentRequirementsMatch = False\n        if conj=='or':\n            if not resultRequirementsMatch:\n                if currentRequirementsMatch:\n                    resultErrList = []\n                    resultRequirementsMatch = True\n        elif conj=='and':\n            if not currentRequirementsMatch:\n                resultRequirementsMatch = False\n        else:\n            resultRequirementsMatch = currentRequirementsMatch\n    return ';'.join(resultErrList),conj\n\ndef checkEligibility(job_title, job_class_df, candidateDataDf):\n    \"\"\"For a job title, compares all the requirements for all the explicitly mentioned promotions in job class dataframe.\n    \n    Prints messages based on requirements match\/mismatch.\n    \n    Parameters\n    ----------\n    job_title : str\n        job title of the candidate to be searched and matched with the requirements\n    \"\"\"\n    \n    job_title = job_title\n    single_job_class_df = job_class_df[job_class_df['JOB_CLASS_TITLE'] == job_title]\n    single_job_class_df = single_job_class_df.iloc[::-1] #reverse the dataframe\n    candidate_job_class = JobClass(candidateDataDf.iloc[0])\n    prevRqmntId = ''\n    result = []\n    i = 0\n    for index,row in single_job_class_df.iterrows(): \n        rqmntId = ''\n        if row['REQUIREMENT_SUBSET_ID'] != '':\n            rqmntId = row['REQUIREMENT_SET_ID']\n            if prevRqmntId == '':\n                prevRqmntId = rqmntId\n                data = single_job_class_df[single_job_class_df['REQUIREMENT_SET_ID'] == rqmntId]\n                rqmntChk = checkRequirements(data, candidate_job_class)\n                errMsg,conj = matchRequirements(rqmntChk)\n                conj = data['REQUIREMENT_CONJ'].iloc[0]\n                result.append([errMsg,conj])\n            if rqmntId != prevRqmntId:\n                prevRqmntId = rqmntId  \n                data = single_job_class_df[single_job_class_df['REQUIREMENT_SET_ID'] == rqmntId]\n                rqmntChk = checkRequirements(data, candidate_job_class)\n                errMsg,conj = matchRequirements(rqmntChk)\n                conj = data['REQUIREMENT_CONJ'].iloc[0]\n                result.append([errMsg,conj])\n        else:\n            rqmntId = ''\n            data = pd.DataFrame(row).transpose()\n            rqmntChk = checkRequirements(data, candidate_job_class)\n            errMsg,conj = rqmntChk[0][0],rqmntChk[0][1]\n            result.append([errMsg,conj])\n    #print(result)\n    errMsg,conj = matchRequirements(result)\n    resultDataFrame = pd.DataFrame()\n    resultColumns = ['EXPERIENCE_LENGTH','EXPERIENCE_LEN_UNIT','FULL_TIME_PART_TIME','PAID_VOLUNTEER','DRIVERS_LICENSE_REQ','DRIV_LIC_TYPE','REQUIREMENT_CONJ']\n    msg = ''\n    if errMsg.strip() != '':\n        resultDataFrame = job_class_df[job_class_df['JOB_CLASS_TITLE']==job_title][resultColumns]\n    return resultDataFrame\n\ndef getTreeFormattedChildren(df, title):\n    if title=='':\n        print('No job title provided')\n        return\n    resultList = []\n    result = {}\n    result['name'] = str(title.title())\n    children = df[df['name']==title]['children'].values\n    if len(children)>0:\n        for child in children:\n            resultList.append(getTreeFormattedChildren(df, child))\n        result['children'] = resultList\n    else:\n        return result\n    return result\n\ndef getTreeHTML(data, title):\n    global TREE_ID\n    treeId = str(TREE_ID)\n    treeHtml = \"\"\"\n    <!DOCTYPE html>\n    <meta charset=\"utf-8\">\n    <style>\n    .node circle {\n      fill: #fff;\n      stroke: steelblue;\n      stroke-width: 3px;\n    }\n\n    .node text { font: 8px sans-serif; }\n\n    .node--internal text {\n      text-shadow: 0 1px 0 #fff, 0 -1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff;\n    }\n\n    .link {\n      fill: none;\n      stroke: #ccc;\n      stroke-width: 2px;\n    }\n    <\/style>\n    <body>\n    <div style=\"font: 20px sans-serif; color: #42374D\"><b>Promotional Paths<\/b><\/div>\n    <div id=\"fd\"\"\"+treeId+\"\"\"\"><\/div>\n    <div style=\"font: 16px sans-serif; color: #42374D\"><b>Above graph is interactive. Click on nodes to view more detailed paths<\/b><\/div>\n    <script>\n    require.config({\n        paths: {\n            d3: \"https:\/\/d3js.org\/d3.v4.min\"\n         }\n     });\n\n    require([\"d3\"], function(d3) {\n    var treeData =\n      \"\"\"+json.dumps(getTreeFormattedChildren(data, title))+\"\"\"\n\n    \/\/ Set the dimensions and margins of the diagram\n    var margin = {top: 20, right: 90, bottom: 30, left: 90},\n        width = 960 - margin.left - margin.right,\n        height = 800 - margin.top - margin.bottom;\n\n    \/\/ append the svg object to the body of the page\n    \/\/ appends a 'group' element to 'svg'\n    \/\/ moves the 'group' element to the top left margin\n    var svg = d3.select(\"#fd\"\"\"+treeId+\"\"\"\").append(\"svg\")\n        .attr(\"width\", width + margin.right + margin.left)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", \"translate(\"\n              + margin.left + \",\" + margin.top + \")\");\n\n    var i = 0,\n        duration = 750,\n        root;\n\n    \/\/ declares a tree layout and assigns the size\n    var treemap = d3.tree().size([height, width]);\n\n    \/\/ Assigns parent, children, height, depth\n    root = d3.hierarchy(treeData, function(d) { return d.children; });\n    root.x0 = height \/ 2;\n    root.y0 = 0;\n\n    \/\/ Collapse after the second level\n    root.children.forEach(collapse);\n\n    update(root);\n\n    \/\/ Collapse the node and all it's children\n    function collapse(d) {\n      if(d.children) {\n        d._children = d.children\n        d._children.forEach(collapse)\n        d.children = null\n      }\n    }\n\n    function update(source) {\n\n      \/\/ Assigns the x and y position for the nodes\n      var treeData = treemap(root);\n\n      \/\/ Compute the new tree layout.\n      var nodes = treeData.descendants(),\n          links = treeData.descendants().slice(1);\n\n      \/\/ Normalize for fixed-depth.\n      nodes.forEach(function(d){ d.y = d.depth * 180});\n\n      \/\/ ****************** Nodes section ***************************\n\n      \/\/ Update the nodes...\n      var node = svg.selectAll('g.node')\n          .data(nodes, function(d) {return d.id || (d.id = ++i); });\n    \n      \/\/ Enter any new modes at the parent's previous position.\n      var nodeEnter = node.enter().append('g')\n          .attr('class', 'node')\n          .attr(\"transform\", function(d) {\n            return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n        })\n        .on('click', click);\n\n      \/\/ Add Circle for the nodes\n      nodeEnter.append('circle')\n          .attr('class', 'node')\n          .attr('r', 1e-6)\n          .style(\"fill\", function(d) {\n              return d._children ? \"lightsteelblue\" : \"#fff\";\n          });\n\n      \/\/ Add labels for the nodes\n      nodeEnter.append('text')\n          .attr(\"dy\", \".35em\")\n          .attr(\"x\", function(d) {\n              return d.children || d._children ? -13 : 13;\n          })\n          .attr(\"text-anchor\", function(d) {\n              return d.children || d._children ? \"end\" : \"start\";\n          })\n          .text(function(d) { return d.data.name; });\n\n      \/\/ UPDATE\n      var nodeUpdate = nodeEnter.merge(node);\n\n      \/\/ Transition to the proper position for the node\n      nodeUpdate.transition()\n        .duration(duration)\n        .attr(\"transform\", function(d) { \n            return \"translate(\" + d.y + \",\" + d.x + \")\";\n         });\n\n      \/\/ Update the node attributes and style\n      nodeUpdate.select('circle.node')\n        .attr('r', 10)\n        .style(\"fill\", function(d) {\n            return d._children ? \"lightsteelblue\" : \"#fff\";\n        })\n        .attr('cursor', 'pointer');\n\n\n      \/\/ Remove any exiting nodes\n      var nodeExit = node.exit().transition()\n          .duration(duration)\n          .attr(\"transform\", function(d) {\n              return \"translate(\" + source.y + \",\" + source.x + \")\";\n          })\n          .remove();\n\n      \/\/ On exit reduce the node circles size to 0\n      nodeExit.select('circle')\n        .attr('r', 1e-6);\n\n      \/\/ On exit reduce the opacity of text labels\n      nodeExit.select('text')\n        .style('fill-opacity', 1e-6);\n\n      \/\/ ****************** links section ***************************\n\n      \/\/ Update the links...\n      var link = svg.selectAll('path.link')\n          .data(links, function(d) { return d.id; });\n\n      \/\/ Enter any new links at the parent's previous position.\n      var linkEnter = link.enter().insert('path', \"g\")\n          .attr(\"class\", \"link\")\n          .attr('d', function(d){\n            var o = {x: source.x0, y: source.y0}\n            return diagonal(o, o)\n          });\n\n      \/\/ UPDATE\n      var linkUpdate = linkEnter.merge(link);\n\n      \/\/ Transition back to the parent element position\n      linkUpdate.transition()\n          .duration(duration)\n          .attr('d', function(d){ return diagonal(d, d.parent) });\n\n      \/\/ Remove any exiting links\n      var linkExit = link.exit().transition()\n          .duration(duration)\n          .attr('d', function(d) {\n            var o = {x: source.x, y: source.y}\n            return diagonal(o, o)\n          })\n          .remove();\n\n      \/\/ Store the old positions for transition.\n      nodes.forEach(function(d){\n        d.x0 = d.x;\n        d.y0 = d.y;\n      });\n\n      \/\/ Creates a curved (diagonal) path from parent to the child nodes\n      function diagonal(s, d) {\n\n        path = `M ${s.y} ${s.x}\n                C ${(s.y + d.y) \/ 2} ${s.x},\n                  ${(s.y + d.y) \/ 2} ${d.x},\n                  ${d.y} ${d.x}`\n\n        return path\n      }\n\n      \/\/ Toggle children on click.\n      function click(d) {\n        if (d.children) {\n            d._children = d.children;\n            d.children = null;\n          } else {\n            d.children = d._children;\n            d._children = null;\n          }\n        update(d);\n      }\n    }\n    });\n    <\/script>\n    <\/body>\n    \"\"\"\n    \n    TREE_ID = TREE_ID + 1\n    return treeHtml\n\ndef showInteractivePromotionalPaths(df_edges, job_title):\n    treeEdges = getEdges(data=df_edges, job_title=job_title)\n    edges = []\n    for edge in treeEdges:\n        edges.append((edge[0][0],edge[0][1]))\n    \n    treeEdges = pd.DataFrame(edges, columns=['name','children'])\n    treeEdges = treeEdges.groupby(['name','children']).size().reset_index(name='Freq')\n    return getTreeHTML(treeEdges, job_title)","c9988d6c":"#Test CandidateJobClass\ndata = {'JOB_CLASS_TITLE': 'WATER UTILITY WORKER',\n        'EXP_JOB_CLASS_TITLE': 'WATER UTILITY WORKER',\n        'EXPERIENCE_LENGTH': '1',\n        'EXPERIENCE_LEN_UNIT': 'years',\n        'FULL_TIME_PART_TIME': 'FULL_TIME',\n        'PAID_VOLUNTEER': 'PAID',\n        'DRIVERS_LICENSE_REQ': 'R',\n        'DRIV_LIC_TYPE': '',\n        'ADDTL_LIC': 'NA'}\ncandidate_job_class_df = pd.DataFrame(data=data, index=[0])\ndf_edges = createEdges(job_class_df)\n\nresponse = getPromotionalPaths(df_edges, job_class_df, '', candidate_job_class_df)\nviewOutput(response)","2f8ff094":"#Test CandidateJobClass\ndata = {'JOB_CLASS_TITLE': 'WATER UTILITY WORKER',\n        'EXP_JOB_CLASS_TITLE': 'WATER UTILITY WORKER',\n        'EXPERIENCE_LENGTH': '3',\n        'EXPERIENCE_LEN_UNIT': 'years',\n        'FULL_TIME_PART_TIME': 'FULL_TIME',\n        'PAID_VOLUNTEER': 'PAID',\n        'DRIVERS_LICENSE_REQ': 'R',\n        'DRIV_LIC_TYPE': '',\n        'ADDTL_LIC': 'NA'}\ncandidate_job_class_df = pd.DataFrame(data=data, index=[0])\ndf_edges = createEdges(job_class_df)\n\nresponse = getPromotionalPaths(df_edges, job_class_df, '', candidate_job_class_df)\nviewOutput(response)","1d7b1eb5":"#Test CandidateJobClass\ndata = {'JOB_CLASS_TITLE': '311 DIRECTOR',\n        'EXP_JOB_CLASS_TITLE': '311 DIRECTOR',\n        'EXPERIENCE_LENGTH': '3',\n        'EXPERIENCE_LEN_UNIT': 'years',\n        'FULL_TIME_PART_TIME': 'FULL_TIME',\n        'PAID_VOLUNTEER': 'PAID',\n        'DRIVERS_LICENSE_REQ': 'R',\n        'DRIV_LIC_TYPE': '',\n        'ADDTL_LIC': 'NA'}\ncandidate_job_class_df = pd.DataFrame(data=data, index=[0])\ndf_edges = createEdges(job_class_df)\nresponse = getPromotionalPaths(df_edges, job_class_df, '', candidate_job_class_df)\nviewOutput(response)","50d12570":"#Test CandidateJobClass\ndata = {'JOB_CLASS_TITLE': 'SENIOR PERSONNEL ANALYST',\n        'EXP_JOB_CLASS_TITLE': 'SENIOR PERSONNEL ANALYST',\n        'EXPERIENCE_LENGTH': '1',\n        'EXPERIENCE_LEN_UNIT': 'years',\n        'FULL_TIME_PART_TIME': 'FULL_TIME',\n        'PAID_VOLUNTEER': 'PAID',\n        'DRIVERS_LICENSE_REQ': 'R',\n        'DRIV_LIC_TYPE': '',\n        'ADDTL_LIC': 'NA'}\ncandidate_job_class_df = pd.DataFrame(data=data, index=[0])\ndf_edges = createEdges(job_class_df)\nresponse = getPromotionalPaths(df_edges, job_class_df, '', candidate_job_class_df)\nviewOutput(response)","7eaf0721":"<hr>\n# <b>Example of WATER UTILITY WORKER with 3 years of experience<\/b>","d2c6c54e":"# Data Science for Good: City of Los Angeles","d2e6b18a":"<hr>\n**Features**\n1. Provided details of a candidate, the application searches the job_class data for the available job titles to which the candidate can be promoted to.\n2. Provided clear data and logics, details can be easily added to the comparison matrices with simple tweaks in the code.\n    - If someone follows through the code, below is an explanation on how to add a new comparison detail to the search criteria.\n3. Logic takes care of the requirement conjunctions used in the bulletins text.\n\n**Areas of improvement**\n1. The comparison only takes experience and licence details into consideration. Provided some master data and clear comparison logics more details can be added to the comparison matrices.\n\n<br><br><br><br>\n**Steps to add new comparison detail in search criteria:**\ne.g. to add Education details('COURSE_COUNT')\n1. Create a new class \"Education\" with the following signature\n<pre>\n    class Education:\n        def __init__(self, dfJobClassRow):\n            ##define fields here\n            ##self.courseCount = dfJobClassRow['COURSE_COUNT'] --from job_class data\n        def compare(self, objCandidateEducation):\n            ##define comparison logic here\n            ##e.g.\n            if self.courseCount == objCandidateEducation.courseCount:\n                self.errMsg = ''\n            else:\n                self.errMsg = self.getErrorMsg()\n        def getErrorMsg(self):\n            ##set a message here in case of comparison mismatch\n<\/pre>\n2. Add following in JobClass\n<pre>\n    #in init() method\n    self.education = Education(dfJobClassRow)\n    \n    #in compare() method\n    self.errMsg = self.errMsg + ' ' + self.education.compare(candidateJobClass.education)\n<\/pre>\n3. Add columns in CandidateJobClass\n<pre>\n    data = {'JOB_CLASS_TITLE': 'WATER UTILITY WORKER',\n        'EXP_JOB_CLASS_TITLE': 'WATER UTILITY WORKER',\n        'EXPERIENCE_LENGTH': '3',\n        'EXPERIENCE_LEN_UNIT': 'years',\n        'FULL_TIME_PART_TIME': 'FULL_TIME',\n        'PAID_VOLUNTEER': 'PAID',\n        'DRIVERS_LICENSE_REQ': 'R',\n        'DRIV_LIC_TYPE': '',\n        'ADDTL_LIC': 'NA',\n        'COURSE_COUNT': '1'} --<b>New Column<\/b>\n<\/pre>\n4. Run execution commands","7724c8b5":"<hr>\n# <b>Example of WATER UTILITY WORKER with 1 years of experience<\/b>","0085feb7":"Based on the above results, 3 years experience is required to be eligible for promotion for job class: **Water Service Supervisor**. So let's check the results for a candidate with 3 years of experience.","f04615c9":"<hr>\n# <b>Example of 311 DIRECTOR with 3 years of experience<\/b>\n\nBelow is an example where promotional paths are not found for the job title.\n<br><br>In that case, a static graph will be shown wherein all the connected paths to the searched job title, are visible.","cadd543d":"**Master configurations**","3ad377b1":"[Back to main kernel](https:\/\/www.kaggle.com\/tyagit3\/dsfg-cityofla-analysis-and-solution).\n\n<h1><b>Promotional Paths<\/b><\/h1>\n\nThis is an attempt for better visualization of different promotional paths available for a particular job title.\n\n**Promotional paths are displayed here as an interactive graph**\n- Each node represents a job title\n- Edge is the connection between two job titles\n- Direction of the edge shows the next level job title\n- Clicking on a node will allow it to expand and display next level promotion paths, if available\n\nIn order to check available promotions and visualise different paths for a job title, I've tried to create a sample application. Example runs are shown below.","d9d07471":"Here it can be seen that no edge goes out of the searched job title.\n\n<hr>\n# <b>Example of SENIOR PERSONNEL ANALYST with 1 years of experience<\/b>","e6441a1b":"<h1><b>Application<\/b><\/h1>\n<br>\n<div style='background:#ECE3E3;padding:30px;'>\n    Check for available promotional paths for a candidate\/job_title.\n<br>Prints messages for unfulfilled requirement sets for available promotion job titles.\n<br><br>\n<b>Required configurations to execute<\/b>:<br>\n    <pre>\n#import libraries\n#set master configurations\ndata = {'JOB_CLASS_TITLE': 'WATER UTILITY WORKER',\n        'EXP_JOB_CLASS_TITLE': 'WATER UTILITY WORKER',\n        'EXPERIENCE_LENGTH': '1',\n        'EXPERIENCE_LEN_UNIT': 'years',\n        'FULL_TIME_PART_TIME': 'FULL_TIME',\n        'PAID_VOLUNTEER': 'PAID',\n        'DRIVERS_LICENSE_REQ': 'R',\n        'DRIV_LIC_TYPE': '',\n        'ADDTL_LIC': 'NA'}\n\n#sample candidate job class data\ncandidate_job_class_df = pd.DataFrame(data=data, index=[0])  \n#edges for graph\ndf_edges = createEdges(job_class_df)\n    <\/pre>\n<br>\n<b>Command to execute<\/b>: <br>\n    <pre>response = getPromotionalPaths(df_edges, job_class_df, '', candidate_job_class_df)\nviewOutput(response)<\/pre>\n<br>\n<\/div>"}}