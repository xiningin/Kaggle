{"cell_type":{"7d7aa6da":"code","2193dc94":"code","6819a755":"code","2e69d160":"code","7c3038de":"code","2e781906":"code","7076f232":"code","02bb64cd":"code","8f707789":"code","7d06d813":"code","67cc52c7":"code","ee40125a":"markdown"},"source":{"7d7aa6da":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxEQEhUQEhIVFRUVEBcYGBYVEhgVFhUXFxcYGB4XGhUkHikgGholHhUaITIhJS0sLi4uGCE3ODMsNyotLisBCgoKDg0OGxAQGy4lICYyLTE1LS0yLy0tLS0tLS4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAOEA4QMBIgACEQEDEQH\/xAAbAAEAAwADAQAAAAAAAAAAAAAAAQUGAwQHAv\/EAEYQAAIBAwMCBAMEBgYGCwAAAAECAwAEEQUSIRMxBhRBUSJhcQcVMoFCUmJykaEjJDWCscEWM1Nzs\/AlJjQ2Q0RjdZKy0f\/EABkBAQEBAQEBAAAAAAAAAAAAAAACAQMFBP\/EACARAQEAAgMAAwEBAQAAAAAAAAABAhESITFBUWGBEyL\/2gAMAwEAAhEDEQA\/APJaUpXqPgKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKkVFSKBSlKBSlbey8HLJo8t7n+sKyzBPUW3xJnHsxVnB9kFTllMfVY42sRSvqJgCCVDAHlSSAfkSCCPyNbrxTpNhb6fZXUVqepdxkndcSssZCjO0Z55Pr\/ADpctWQmO4wdKVvYdJsDo7akbT+lW46W3zEwj5YDdjdns3bNMstGOO2CpUuQSSAAMngZwPlzz\/GoqklK1n2a+H4r67C3HECD4+cbmkOyNM+5Y5H7prP6zpz2s8ts\/wCKKQoT747N9CMH86mZTem8brbp0rc+CNIsbq1vZp7Ys9pAJAUuJE6nDnDDJA\/B3Hv2ri8K2emajMLNreW1lkDdKWO5aZdwUttdHHbCnkH+Hep\/0968Vw\/WLpV1B4YuHvvu1cGUTtGT+iApOZD+yFG73\/OrLWpLCxma1htlujE22Sed5MSOPxCONGUIoPGTk8VXP6Zx+2TpWv1Dw9Dc2J1OyVkETbbm3ZjJ0jxiSNzyU5Bwef4V27LTLBtIm1BrU9aK4EQUXEojbcYwGI3Z7Sds849Kn\/SN4MLSue2mRX3PEJFzyhd14+TA7hj8\/wA61msW2m297cQtbN0YIjtXzMm+aUiMqC+fhHxk8DsD3qrlrrTJjtjKVv8ARNM0640+8vjZMrWxUBBeSlX3c8n0rNalLZSW4aGAwTrcAMpuGmV4mRzuG4DBDKAfqPesme\/htw18qWlKVaA1FSaigUpSgVIqKkUClKUHd0XTWup47dTgyOAW9FXuzn5KoJ\/KvSvC12qamzm4szazx+WEK3kTEQqAsKhM8t8IGB\/tGrD+H7+0gin6huBPNA0SNHFGyRKxG48yqWLKMdhgE1SQ4DAlmUBs7lUMy49Qu4An8x9a5ZY8nTGzGO\/4m0c2V1Nan\/w5CFPuh5Q\/mpH55rX+Ov7I0j\/dN\/gK6XjzxFYak0UyC5jmWNUdmhiKyKP0sCXhhk\/I9vnXJrXiPTbqztLNvOr5VcB1hgO\/IAPwmbjke9Z3ddN67YcCvQYP+7Mn\/uI\/+yVn\/PafBBMtuLp7iWPph5kiSOONiN+ArsdzKNuT7+nNWtr4i09dMOmP5s7p+qZUhhHO4EAIZu2Fx3rct34MZJ8sQBStPpV7pds5mUXksqKTEskUKRiXB2u+JGJCnBwPb1qj0rodVTdGUxgguI1VnfB5XLMoGefi5q+X4jj+tT92yQ2dvHHcW0MryC7k6tykTqQAIBtPOFXL8+sn8LH7XLJZfLapHtZbiLpyGNg6CVBxhhwcjcM\/+nWO8TX8dzdS3EZcrI+4CRFRkHYJhWYEKoUA5Hbt76HSPElkumSabci5ffJ1FZIo9sL8EbcygsMgnkDO4+9c9Waq9y9LD7LmUWerF1LKLRdyhtpYbZcgNg4PzwafZxqumpdIFt5Ibh8pBLJN5iON3G0ZTCcnJGfnjIzVb4S8Q2Nlb3cEnmnN1H0y0cMS7FAcZGZjk\/Hn\/wDa6+hahpVpMlzsvJ3jYNGjrDFHvHZmIdicHBHzHrWXHe\/Wy6013gCyltdeuIrpw8xhkYSDtIXaN9wHplT29MEeleX6mpE0oPfryZ+u85\/nVle+KbiS+OoghJuoGUDlVCjaEx6rt4Pvk+9WOsXenX8puWkls5HIMsfQ68bP6tGysCM+zDvVSXG7rLZlNRffZawWw1Zn\/wBX5dc57Z6c3H15H8q6Omn\/AKuXfy1CP\/G3qq1TxFElr93WSusBffNLJgS3D+mVHCRjAwuc8DPrl4V8RRQwXFjdI7W1zglo8dSKQYw6g8H8I4\/ZHftWcb7+kynjLtWh+0D+0rr\/AHi\/8NKmCLTIW6pnmuQrZWFbYwBiOQJJGY4XtnaM4zVPqN69xLJPIcvI5dsdssc4A9AO1dJ3dpvU03HhD+w9V\/ej\/wABXn1bLQvENnb6fdWL+ZL3WCXWGLbGQAAMGbLDI78fSsfIBk4JIzwSNpI9yMnB+WTWYe0z8j5pSlWgNRUmooFKUoFSKipFApSlB3dH0ua7mW3gQvI54A9B6sT6KPU1dX+jafaMYZ7uWaVThxaQoY42Hdeo7jeQeDgVr\/szh8ppWoamv+t2SIjeqiNAePqz5\/uivKRXOW5W\/jpZMZGrn8KQNZT6hb3glSHYDE0RjlVnkVcONxGMMSCO+KrfDfhua+ZyhWOKJd008h2xRKBnJPqcAnA\/lXSsNQeFZkXlZ4emwz7OrhvqCn8zXpPiCEWfhu3ij4N1JG8hHBbeDLg+4wir9BWW3Hr7JJe2LFppWen5u6z\/ALYWi9LPv0+p1Nv864PE3hqawKFyskUq7oZ4zmKVcZ4PocEHH+NUter+HoxeeG7mOTk2ryvGTyVKKJRj24Zl+hplbhqmOsumc8MeB4b63mulvjGtuMyq9nkqAu7I2zHcMA\/PjtXFong2C\/LR2eoI8yoWEU1s8BcD9Vt7A\/5VpPsniZ9O1REUszR4VQMkkxSAAD1NV3gPw\/Lp9zHqGoYtIYd5HWIV5XKMuxE\/EeGJ7enGc1Nyu72qSddMNdWTwytDMGjZH2uNoZlwecDIDe45APv61rn8C262Cam2oMIXIAHkSXDFiuCBNjuDznFUPjLV1vb6e6QELI42g99qIqAkehITOPnW+uLaSXwxAkaPI3XztRS7YEz5O0DNVnbqMxk3WVl8DNJaNfWVwt3FGT1FEbRTR4GTmIk5wOeD25GaoNE0ie9mW3t03yN+QUDuzN+io9\/8SRn1L7L4n0uzu7y9BhjkChEkG132huyHnLF9oHyPpXU+z6LymiX18mBK6yKrDuqooUAH95mP8KnnZtvCVj7vS9NtnMMt3PM6ttdraBOkhHBAZ3BfHuB6V8a14VaGBb2CUXNq529VUKNG+cbJYySUPp3I+mRWdAr1T7DsTi+sZBuilhQlT2y25GP1I2\/\/ABFVlvGbTjrK6ZPwP4Tj1SU24ujDKIy+1rbepUMFOHEoOfiHcDv64rltfCtnLcG0TUx1eoY16lk8cbOCRtEnUODkYGRzVv8AYpEY9VdCclLWZSfcrJGM\/wAq6UPgy8N4880ZtrdLtpHnnIjRUEpYEZOSTxj61Ny\/6vapOp0zniPQZ9Pna3uFwwAIIOVdT2ZT6jv+YNVdbb7WPE0OoXamD4o4YygftvJYsSB+qOAD681ktNsXuZY7eMfHLIqL9WOMn5DufkK6428d1zyk3qLl\/Cco00apztNz09uP0PwiTP7\/AMNZ2vZ\/DGsw3s15omR5Xywit\/pCux2+rEhx+7Xj15avDI8Mgw8bsjD9pSQfyyKnDK3cqs8ZJuOGlKV0cw1FSaigUpSgVIqKkUClKUHqv2U3SXdje6QzBXkR2jyfxCRApx+6yqT8mry+6tnhdopUKSI21lbgqR\/z+dWGkadf5S5tbe6O1spLDBKwyODh1XB9QR9Qa2NzrWqzgeb0QXLqMCSXTZt\/5kAfwGBXLfG2x11yk2wVtYvIkkgwEiUFmbIGScKg45dj2H1JwATXpVxP95eHlWP4pbFk3p67Y8jcB6jptn+6fasnq9nqtztVrC4SNCSkMNhLFEhPchAnLH9Y5Pzr40aw1ezkE1vaXqP2OLSYhh+qylMMvyNLq97JNdaZuvULS5+7vDzrJxLfu\/TQ\/iKOFTfj22KTn9oe9Umy73dX\/R8dX9byN308+\/l89P8AlVdrGn6veSGa4tb2RyMZNpKAo\/VVQmFX5Cst5eknHxqfswH\/AEZqvt0j\/wAGSuH7P9Tiv7ZtDuzwwJtpD3RhltgPuDkj3GV9q6ejahrFnC9vBpbLHJneDp9y5fI2nczEk8ce3tis+dA1HeJE0+6iIYMojtLgBCuMFdwJHIz379vas1Lbuq7kjo6zpctpO9tMuHjbB9mHoy+6kcg16LeysnhiBlYqRcjBUlSP6Z+xFU+uX2sXwXzWlNKVGA5065WTHfG9SDgn07d6+pdR1hrUWLaU3lwBiP7uuRjBzkNnduzznOfnW271vTJNbYi4uJJCDI7uR2LuXI+hJr0z7NLlbvTr3ScgSskjxAnG4Mo7fR1GfkwrCN4Z1Akn7vuxz2FpPgfIZXNctpoWpwussdneo6HKstrMGU+4Oz8vnVZcbNbTjyl8UzoVJVgQQSCDwQQcEEe4NemfZJOLC3vdUm4jCJHH6dR13MVX35KL9c+1VF09\/O3VudDaaXjMpsruJnIxzIsZVXPHqK6Wtw6xeBFksrpY4xiOGOxljhjH7KBO\/wAzk1OV5TVbJx7i3+xJy2pszHLG0lJPzLxEn+NfPg\/xMlteXNnc4a0ubmZXDcqjM7Lv\/dPCn8j6V0vDT6tpxL2+mSiRl2mR7C5dyuc49gOB2A7DOartV0jULiRpW0ydGdizdKyuFVmY5JKnIB+mO9ZZLbtXciPHHhh9NuWhOTG3xQv6Mh9M\/rL2P5H1rueCpFs4p9TdA\/TAghUkrummHxHcORtjycjn4hXek1DWpLZLObTZJ4oxhetp07OMcDEgwQQOMjBwK4Lp9UktlsjpLCFWLKq6dcqyuRjeHznd8znPrmt31q1nHV3HT0jxPbWk0dxFp0avG2QRdXJI9DgFyDwTweOau\/tj0tRcRahFzFeRBsjtvCjn6shU\/wB01lI\/DV+CCdPu2wRwbSfB+RwoOPoRWnv9U1me3W0k0otCoUKn3bcDZtG0FSDlSAcZBzzS6mUsJuzVYGlSykEggggkEEYII4II9CDUV2cQ1FSaigUpSgVIqKkUClKUFnpN9d5WCG7khXnAN4beJe5PJYKuf5k1fT2OroY0N+S0uzpourBncSEBWVRLkqc\/iHGMmsdWzE6ef0pt64W0sAx3DCle4J9CPXNc85306Y3pUwahqTmULd3OYI3kk\/rcowsZCsfx84LDgd6sZbfVE\/HqIQ7FbY+sKjgMocZQy5BKkHHzr6tdYSQagnl7WLNlcAPGJFdz1E+HLSMDnvgD0qz8QQTSuGis7GZTawATPMglyIEU\/wDmF5U5A+H09ajd+lyfrN6TealdMyR3k4KRNIxkvniVUUgEl2cAfiFdm5XVUMQ83M4nk6cbxagZYmkyBs6iyFQ3I4P+Rrg8HRF2u4gV3Pps6LudUDMWjwNxIGTj3q00uHyaRQTSR9SXVLWUIsqSdKOLeDI7KSq7uoABnspqr6yeOja\/e0hl\/rc6LDIY5JJdQaKJZASNnUaQKW4PAzSYaukjxNc3O5Ldp8i9cq0KDcXRw+1xjttJ7Ed67+pKt4vTiaNng1G7doHmWLrpLKGEiOWAPClTg5AORXYHlonKIY0caPeLIiXLTxxu27ZGkjMRkrglVPcmp5fjdfrpCz1Ux9b7yXp79m\/75TbvI3bd3WxuxzjvVfJc6otst4bm66LymNW83Lywz+jvyB8LDPY7TUW\/xaZ0lK721ZMKWAPNuVz8lycZ7VqJb2xlaTS0eQA2q20cjNH5fq25aRJQe+WkL8k876dys\/rJX2p6jBsEl3cjqQpKv9blOY5BlTw3BI9O9THqOpNC9wLu56cbojHzcmQz5KjG\/J\/CasfEWkTTpazRiNkTS7ZWPmIVKskfxKULhsj2xXFoN+kOn3W6OGUm6t8RzbiCNsnxBVdSSPfOOarc11Gdy+uGKfVX6Gy4u3Nzu6QW7kJbYxVsjf8ACAQeTgYBPauXUfvWCMzNeTPGr7WeHUTOsbHsr7JDsJ+dW0WrQvHbK3Qt+tp19ACm5Y4HllIVmBZmRWxgkn9MntVVb2TWMF2Z3izPbGGOJJklaRjIjdXCsQETaSCcHJ4rN\/jf6+r+LWILpbGS4uRO5XaovZGB3kgHcHxjg\/TBrk8pqw6m++eMRTmFjLqnSHUChioLSANwc8VofEmqRNNPdiRDLazXEEeHBZvMMvTkX3VA9xz6YWvnVHMovBDFa3JOsyNtnlUKE6KjqL\/SpnnjOTU8r9Kk\/WMvtXvoXKNfzMQAd0V+8qcjPDq5B\/yq18lrWP8AtM+\/p7+h94HzOzGd3lup1O3OMZ+VUt8GguleWGJNskchihZWj2qQdoId++08Fj39K0b6dnUPvEXUHlvNi46\/XTcF6gfp9LPU6uPg24q70mK+zOpyxLP94MkbswUzap0SxTAbCvICcZH8arbjW75GZDfXBKsRlLyR1OPVXD4YfMVc3+txra25FtbS77m9fbMrsYlaSMqoCuuMg+v6vFZF2yScAZJOB2HyHyrcJb7E53XlGYkkkkknJJOSSfUn1NRSldHMNRUmooFKUoFSKipFApSlAq6\/0TvdnU6Bx0+pt3x9XZ339Hd1MY57dqqbdwrqxXcFdSV\/WAIJH54xWx1PRpZb2W+W5RLeSWSZbsTJlUfdhQgcSdQA9PYOfyqMsrKrGSs\/pnhy6uEEscY2Ftqs8kcYdh+ihdhvP0pa+G7qQyqIgpgZVlEskcWxmzgHew5O09qtb3TpL+G0a22OIrRYZI2ljjaJ1ZizlWYfC+Q24Z+fIq3v9UhEN1kRXPTj06JizuFmkjV1aRWVlZgDgbs\/o+2Km55fC+MZY+F7vqJD0xukjaRD1ojGyJ+JhLu2YXHPPFH8LXYMY6at1ZRGhjmikUyEZCFlchSRzzithb3MTSQTRLGtn93XgWBW2tHKYm6sbuSWLMdpD+oxjtVFoXiOGOW3jSBbeAX0M0p6rzM2zKjLMOFUOxwB61nLOlxxZy1sZJepsXPSiaR+QNqKVUtyecFhwOeasZfC14sZkaHAWLqMvUj6ix4zvMO7eFwc8jtVrbaXJYpeyTlFSS0eCIrLHIZmkljIKKrEldqliTjFW9xbiV3luBCU6DY1OC46EjDpFV3QBzvduI2TaCcn0rbnfg4Rg7SwklEjRruEURkfkDagIBPJ55YcDmot7GSRJZFXKQoGkOQNqswUHBPPJ9KvvBETSLexLjfJpsiqpZV3MXj+EEkCuSy0+W1tdQSZQjPaR7QXRi39Ovbaxqrl3YyYqmfw7dJcJaPEVmkClELL8QcZBDZ24OD6+lTp\/h26nUyJGNgfZveSOJS47qrOwDH6Zr0OLUorjVBBM6hreeOW2lJG3b0ozJblvY8uvsyketZie186lqYo0nW3SSOW266wsGMsjb8kj4X3A7lzyMGo55N4RnLjR7iMzB4ypt9nVBIBTqMFX15yWHbPBz2r6sdEuJxG0ce4SySInxKNzxIJGHJ4wpByeK1d3BE7XVnBIpkksLUBGuuqvVhlV3gSdjtO1RgDOOOK5\/Dq+Vewtpiiyi4vJmUSI3TR7YIu9gSAzFDgZ9vet53RwjJ6b4au7hFliiBVyQm6WOMyEcEIrMC\/PHA719WPhe6nUtGifCG3BriFHQIxVtyM4ZcEeoq+0S3aa2tVMNveRquCxmFrPaHeSUMnUBKDO8Egjn5V09KMa3OohJTInkbwJI7ZaXLLhix\/Ex759e9OWRxilutFnjG4oCOuIQY5EkBlKBwg2sdxww7epx34rnv\/AAxdwI0skQCpjqYkjdot3bqIrFk\/MCr7wnqEVvb20khAVdZJJ7lA1qFEmO+FY5z+zVVL4duLdJ5JZkiTpMAyTq5uyxGI1CPllbGSW4GOac7tnGOBvC14IzIYeBH1CvUj6ojxneYd28DHPbtVNXo7W4lfq3AhaPoHGpwXPl5cCIqC0IkO+TgIUK5Nebr2H0qsMrfWZY6TSlKtAaipNRQKUpQKkVFKCaVFTQKjA74596UoBAPcVNRSgYFTUUoAUD0pgd8UpQ2kjPeoCgelKUE1BAPcUpQSfaoAHalKAVB9KmopQTUAD2pSgbR3xU0pQKUpQDUUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQf\/2Q==',width=400,height=400)","2193dc94":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6819a755":"df = pd.read_csv('..\/input\/japaneseenglish-subtitle-corpus\/dev', sep='\\t', error_bad_lines=False)\ndf.head()","2e69d160":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSOISgc5rCQ0axyOcX5mv71sW1H3Ei3wfrLFWM9Hob6QcYlDBeW',width=400,height=400)","7c3038de":"df1 = pd.read_csv('..\/input\/japaneseenglish-subtitle-corpus\/train', sep='\\t', error_bad_lines=False)\ndf1.head()","2e781906":"df2 = pd.read_csv('..\/input\/japaneseenglish-subtitle-corpus\/test', sep='\\t', error_bad_lines=False)\ndf2.head()","7076f232":"df.dtypes","02bb64cd":"risks = df2['\u307b\u307c\u7121\u95a2\u4fc2\u3067\u3059'].unique()\nrisks","8f707789":"import plotly.offline as pyo\nimport plotly.graph_objs as go\nlowerdf2 = df2.groupby('or the relative risk of drugs').size()\/df2['\u307b\u307c\u7121\u95a2\u4fc2\u3067\u3059'].count()*100\nlabels = lowerdf2.index\nvalues = lowerdf2.values\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.6)])\nfig.show()","7d06d813":"sns.countplot(df2[\"\u307b\u307c\u7121\u95a2\u4fc2\u3067\u3059\"])\nplt.xticks(rotation=90)\nplt.show()","67cc52c7":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df1.\u30b9\u30ea\u30d0\u30f3\u4eba\u3067\u3059)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","ee40125a":"Kaggle Notebook Runner: Mar\u00edlia Prata @mpwolke"}}