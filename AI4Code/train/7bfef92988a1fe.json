{"cell_type":{"7082e118":"code","d765fb54":"code","3b188c61":"code","d8687e16":"code","baae1e00":"code","e51db016":"code","892fa880":"code","ff66429f":"code","be1499cb":"code","dad59963":"code","7b1aa2b4":"code","406c5519":"code","351f4268":"code","60eaf49c":"code","cea96bc2":"code","a66fd25e":"code","af2b1f6e":"code","c6c82329":"code","47603d53":"code","d2844900":"code","1e7aea8d":"code","c7f2dee4":"code","7a3db7c9":"code","ede2acb1":"code","7f73378f":"code","bd570fe3":"code","d1aa3375":"code","84ca1cbe":"code","69ff15fe":"code","a3d187f3":"code","ce0bc48b":"code","a7fe5382":"code","69669e08":"code","d625942a":"code","688b8fdd":"code","49f885a3":"code","c6772ab7":"code","83793f52":"code","6715adbe":"code","3d4be550":"code","8c0b5299":"code","dcc20e86":"code","d135f9a1":"code","9a1fd892":"code","2180742a":"code","2dffbd94":"code","ba6c2d29":"code","f8389ed5":"code","d27106aa":"code","384c00ee":"code","8ca46110":"code","097c2455":"code","8a15d10d":"code","e0bbaed8":"code","e72f3cef":"code","a9a66db3":"code","3c075801":"code","3c8122b5":"code","0d1d1b3c":"code","fc0c7cf6":"code","0599fd07":"code","a2d033c3":"code","b375815e":"code","a9cf84ca":"code","bb5c295c":"code","cc9c0755":"code","3f561538":"code","b0682187":"code","5647b18c":"code","cff2fd10":"code","74a3750c":"code","45d9246f":"code","585bf0f2":"code","f5cf21a1":"code","678ec334":"code","e33f3172":"code","913be7ab":"code","c7821d60":"code","16148011":"code","6601ffcd":"code","4a5ed860":"code","dee52808":"code","56111411":"code","ed4fd12e":"code","bd388fe0":"code","ebea5fe2":"code","4db16550":"code","8198b0b3":"markdown","d9d4d6d0":"markdown","94425676":"markdown","00d09108":"markdown","0ecbd6bf":"markdown","bee16ebe":"markdown","7e64aa02":"markdown","362e7dfb":"markdown","af71d850":"markdown","656b8905":"markdown","166c58b3":"markdown","04daa3d1":"markdown","607d8759":"markdown","ce7ff583":"markdown","feeca556":"markdown","e3191c57":"markdown","f04c4405":"markdown","cb78aaf1":"markdown","68c00e77":"markdown","5e0e1017":"markdown","ed84c2c4":"markdown","53e7be5e":"markdown","133c83ae":"markdown","cf901d7c":"markdown","248b4173":"markdown","5f548585":"markdown","6eecd239":"markdown","596415e9":"markdown","1c718c50":"markdown","3d89dec7":"markdown","498299f4":"markdown","aa872604":"markdown","b315a7f4":"markdown","a2ba2012":"markdown","dfeb3592":"markdown","4902929a":"markdown","a2063bed":"markdown","76ccc884":"markdown","b596b1aa":"markdown","d0daf7bc":"markdown","80745493":"markdown","ed372448":"markdown","99f2de5e":"markdown","b262a8e3":"markdown","b833276b":"markdown","c3c27f14":"markdown","979fdbd2":"markdown","d7254efd":"markdown","9bec6f28":"markdown","f2415753":"markdown","358e92b2":"markdown","a5dd45ca":"markdown","c5174844":"markdown","8563ce22":"markdown","626e05d1":"markdown","a292e299":"markdown","eac2fbc0":"markdown","8c027e0d":"markdown","9c800cb8":"markdown","85d1630d":"markdown","e628ccad":"markdown","e3521d94":"markdown","d826e98b":"markdown","e7669ea7":"markdown","e915b0be":"markdown","af48d01a":"markdown","7e1bb2d8":"markdown"},"source":{"7082e118":"from urllib.request import urlopen\nimport json\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px \n","d765fb54":"census = pd.read_csv('https:\/\/www2.census.gov\/programs-surveys\/popest\/datasets\/2010-2019\/counties\/totals\/co-est2019-alldata.csv', encoding = \"ISO-8859-1\")","3b188c61":"census.head()","d8687e16":"census.columns.values.tolist()","baae1e00":"census.dtypes","e51db016":"census_state = census[census.COUNTY == 0]\n\ncensus = census[census.COUNTY != 0]","892fa880":"census_state.head()","ff66429f":"census.head()","be1499cb":"#FIPS data needs to be stored as a string\ncensus[\"STATE\"] = census[\"STATE\"].astype(str)\ncensus[\"COUNTY\"] = census[\"COUNTY\"].astype(str)\n\n#These loops allow us to insert any missing 0s on the beginning of state of county codes.\nfor i in range(len(census)):\n    if len(census[\"STATE\"].iloc[i]) < 2:\n        census[\"STATE\"].iloc[i] = \"0\"+census[\"STATE\"].iloc[i]\n\nfor j in range(2):\n    for i in range(len(census)):\n        if len(census[\"COUNTY\"].iloc[i]) < 3:\n            census[\"COUNTY\"].iloc[i] = \"0\"+census[\"COUNTY\"].iloc[i]\n","dad59963":"census[\"STATE\"].iloc[1]","7b1aa2b4":"census[\"FIPS\"]= census[\"STATE\"]+census[\"COUNTY\"]","406c5519":"census_pop = census[[\"FIPS\",\"POPESTIMATE2019\",\"CTYNAME\"]].copy()","351f4268":"census_pop.head()","60eaf49c":"url = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_US.csv'   \n\ncovid = pd.read_csv(url)\n\ncovid.head()","cea96bc2":"covid = covid.dropna()\n\n#This will get rid of the decimal point\ncovid[\"FIPS\"] = covid[\"FIPS\"].astype(int)\n\n#FIPS need to be stored as a string\ncovid[\"FIPS\"] = covid[\"FIPS\"].astype(str)\n\n#This allows us to place the lead 0 on if it was missing\nfor i in range(len(covid)):\n    if len(covid[\"FIPS\"].iloc[i]) < 5:\n        covid[\"FIPS\"].iloc[i] = \"0\"+covid[\"FIPS\"].iloc[i]\n","a66fd25e":"covid.head()","af2b1f6e":"covid_new = pd.merge(covid, census_pop, how=\"left\", on=['FIPS'])\n\ncovid_new.head()","c6c82329":"covid_new = covid_new.dropna()","47603d53":"len(covid_new)","d2844900":"covid_new.columns.values.tolist()","1e7aea8d":"covid_data = covid_new.loc[:,\"1\/22\/20\":]\n\ncovid_data['State'] = covid_new['Province_State']\n\ncovid_data['FIPS'] = covid_new['FIPS']\n\ncovid_data.head()","c7f2dee4":"with urlopen('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/geojson-counties-fips.json') as response:\n    counties = json.load(response)\n","7a3db7c9":"covid_alabama = covid_data.loc[covid_data[\"State\"]==\"Alabama\"]","ede2acb1":"len(covid_alabama)","7f73378f":"covid_alabama = covid_alabama.loc[:, (covid_alabama != 0).any(axis=0)]","bd570fe3":"covid_alabama = covid_alabama.drop([\"POPESTIMATE2019\", \"State\",\"CTYNAME\"],axis=1)","d1aa3375":"covid_alabama.head()","84ca1cbe":"col_alabama_list = covid_alabama.columns.values.tolist()\n\ndel col_alabama_list[-1]","69ff15fe":"covid_alabama_tidy = pd.melt(covid_alabama,id_vars = ['FIPS'], value_vars = col_alabama_list)\n\ncovid_alabama_tidy.head()","a3d187f3":"covid_alabama_tidy.rename(columns = {'variable':'Date','value':'Cases'}, inplace = True)","ce0bc48b":"covid_alabama_tidy = pd.merge(covid_alabama_tidy, census_pop, how=\"left\", on=['FIPS'])","a7fe5382":"covid_alabama_tidy['Date'] =  pd.to_datetime(covid_alabama_tidy['Date'], format='%m\/%d\/%y')\ncovid_alabama_tidy['Date'] = covid_alabama_tidy['Date'].astype(str)\ncovid_alabama_tidy_sort = covid_alabama_tidy.sort_values(by=[\"FIPS\",\"Date\"])","69669e08":"covid_alabama_tidy_sort.head()","d625942a":"covid_alabama_tidy_sort.rename(columns = {'POPESTIMATE2019':'Population','CTYNAME':'County'}, inplace = True)","688b8fdd":"covid_alabama_tidy_sort[\"Cases per 100,000\"] = (covid_alabama_tidy_sort[\"Cases\"]\/covid_alabama_tidy_sort[\"Population\"])*100000\n\ncovid_alabama_tidy_sort","49f885a3":"#The state code for Alabama is 01.  Use the appropriate state code for the state you wish to visualize.\nres_alabama = [i for i in counties['features'] if not (i['properties']['STATE'] != '01')] \n\nalabama = {'type': 'FeatureCollection', 'features': res_alabama}","c6772ab7":"fig = px.choropleth_mapbox(covid_alabama_tidy_sort, geojson=alabama, locations='FIPS', color='Cases', animation_frame=\"Date\",\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, covid_alabama_tidy_sort['Cases'].max()),\n                           mapbox_style=\"carto-positron\",\n                           center = {'lat':32.318231,'lon':-86.902298},\n                           zoom = 5,\n                           opacity=0.5,\n                           hover_name = 'County',\n                           hover_data = ['Population'],\n                           title = \"COVID-19 Cases in Alabama from the Date of the First Case\"\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\n#This speeds up the transition when playing the animation.\nfig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 250\nfig.show()","83793f52":"fig = px.choropleth_mapbox(covid_alabama_tidy_sort, geojson=alabama, locations='FIPS', color='Cases per 100,000', animation_frame=\"Date\",\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, covid_alabama_tidy_sort['Cases per 100,000'].max()),\n                           mapbox_style=\"carto-positron\",\n                           center = {'lat':32.318231,'lon':-86.902298},\n                           zoom = 5,\n                           opacity=0.5,\n                           hover_name = 'County',\n                           hover_data = ['Population','Cases'],\n                           title = \"COVID-19 Cases Per 100,000 People in Alabama from the Date of the First Case\"\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\nfig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 250\nfig.show()","6715adbe":"fig = px.line(covid_alabama_tidy_sort,x = \"Date\", y='Cases per 100,000', line_group='County', color='County')\n\nfig.update_layout(title = \"COVID-19 Cases Per 100,000 People in Alabama from the Date of the First Case\")\nfig.update_xaxes(rangeslider_visible=True)\nfig.show()","3d4be550":"covid_ny = covid_data.loc[covid_data[\"State\"]==\"New York\"]\n\ncovid_ny = covid_ny.loc[:, (covid_ny != 0).any(axis=0)]\n\ncovid_ny = covid_ny.drop([\"POPESTIMATE2019\", \"State\",\"CTYNAME\"],axis=1)\n\ncol_ny_list = covid_ny.columns.values.tolist()\n\ndel col_ny_list[-1]\n\ncovid_ny_tidy = pd.melt(covid_ny,id_vars = ['FIPS'], value_vars = col_ny_list)\n\ncovid_ny_tidy.rename(columns = {'variable':'Date','value':'Cases'}, inplace = True)\n\ncovid_ny_tidy = pd.merge(covid_ny_tidy, census_pop, how=\"left\", on=['FIPS'])\n\ncovid_ny_tidy['Date'] =  pd.to_datetime(covid_ny_tidy['Date'], format='%m\/%d\/%y')\ncovid_ny_tidy['Date'] = covid_ny_tidy['Date'].astype(str)\ncovid_ny_tidy_sort = covid_ny_tidy.sort_values(by=[\"FIPS\",\"Date\"])\n\ncovid_ny_tidy_sort.rename(columns = {'POPESTIMATE2019':'Population','CTYNAME':'County'}, inplace = True)\n\ncovid_ny_tidy_sort[\"Cases per 100,000\"] = (covid_ny_tidy_sort[\"Cases\"]\/covid_ny_tidy_sort[\"Population\"])*100000\n\ncovid_ny_tidy_sort","8c0b5299":"res_ny = [i for i in counties['features'] if not (i['properties']['STATE'] != '36')] \n\nny = {'type': 'FeatureCollection', 'features': res_ny}","dcc20e86":"fig = px.choropleth_mapbox(covid_ny_tidy_sort, geojson=ny, locations='FIPS', color='Cases', animation_frame=\"Date\",\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, covid_ny_tidy_sort['Cases'].max()),\n                           mapbox_style=\"carto-positron\",\n                           center = {'lat':43.299428,'lon':-74.217933},\n                           zoom = 5,\n                           opacity=0.5,\n                           hover_name = 'County',\n                           hover_data = ['Population'],\n                           title = \"COVID-19 Cases in New York from the Date of the First Case\"\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\nfig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 250\nfig.show()","d135f9a1":"nyc_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/nychealth\/coronavirus-data\/master\/boro\/boroughs-case-hosp-death.csv')","9a1fd892":"nyc_data.head()","2180742a":"nyc_data_case = nyc_data.drop(['BK_HOSPITALIZED_COUNT','BK_DEATH_COUNT',\n                              'BX_HOSPITALIZED_COUNT','BX_DEATH_COUNT',\n                              'MN_HOSPITALIZED_COUNT','MN_DEATH_COUNT',\n                              'QN_HOSPITALIZED_COUNT','QN_DEATH_COUNT',\n                              'SI_HOSPITALIZED_COUNT','SI_DEATH_COUNT'],axis=1)","2dffbd94":"nyc_data_case.head()","ba6c2d29":"nyc_data_case['bk_cumulative_sum'] = nyc_data_case['BK_CASE_COUNT'].cumsum()\nnyc_data_case['bx_cumulative_sum'] = nyc_data_case['BX_CASE_COUNT'].cumsum()\nnyc_data_case['mn_cumulative_sum'] = nyc_data_case['MN_CASE_COUNT'].cumsum()\nnyc_data_case['qn_cumulative_sum'] = nyc_data_case['QN_CASE_COUNT'].cumsum()\nnyc_data_case['si_cumulative_sum'] = nyc_data_case['SI_CASE_COUNT'].cumsum()","f8389ed5":"nyc_data_case = nyc_data_case.drop(['BK_CASE_COUNT','BX_CASE_COUNT','MN_CASE_COUNT','QN_CASE_COUNT','SI_CASE_COUNT'],axis=1)","d27106aa":"nyc_data_case.set_index('DATE_OF_INTEREST',inplace=True)\nnyc_data_case_t = nyc_data_case.transpose()","384c00ee":"nyc_data_case_t","8ca46110":"nyc_data_case_t[\"FIPS\"] = [\"36047\",\"36005\",\"36061\",\"36081\",\"36085\"]","097c2455":"nyc_data_case_t","8a15d10d":"covid_ny = covid_data.loc[covid_data[\"State\"]==\"New York\"]\n\ncovid_ny = covid_ny.loc[:,\"2\/29\/20\":]\ncovid_ny = covid_ny.drop([\"POPESTIMATE2019\", \"State\",\"CTYNAME\"],axis=1)\n\n#This if statement is when you are pulling data from CSSE that was updated before nychealth\nif len(nyc_data_case_t.columns.values) < len(covid_ny.columns.values):\n    nyc_data_case_t.insert(len(nyc_data_case_t.columns)-1,\"Temp\",nyc_data_case_t.iloc[:,-2])\n\ncovid_ny.loc[covid_ny[\"FIPS\"]==\"36005\"] = nyc_data_case_t.loc[nyc_data_case_t[\"FIPS\"]==\"36005\"].values\ncovid_ny.loc[covid_ny[\"FIPS\"]==\"36047\"] = nyc_data_case_t.loc[nyc_data_case_t[\"FIPS\"]==\"36047\"].values\ncovid_ny.loc[covid_ny[\"FIPS\"]==\"36061\"] = nyc_data_case_t.loc[nyc_data_case_t[\"FIPS\"]==\"36061\"].values\ncovid_ny.loc[covid_ny[\"FIPS\"]==\"36081\"] = nyc_data_case_t.loc[nyc_data_case_t[\"FIPS\"]==\"36081\"].values\ncovid_ny.loc[covid_ny[\"FIPS\"]==\"36085\"] = nyc_data_case_t.loc[nyc_data_case_t[\"FIPS\"]==\"36085\"].values\n\ncovid_ny = covid_ny.loc[:, (covid_ny != 0).any(axis=0)]\n\ncol_ny_list = covid_ny.columns.values.tolist()\n\ndel col_ny_list[-1]\n\ncovid_ny_tidy = pd.melt(covid_ny,id_vars = ['FIPS'], value_vars = col_ny_list)\n\ncovid_ny_tidy.rename(columns = {'variable':'Date','value':'Cases'}, inplace = True)\n\ncovid_ny_tidy = pd.merge(covid_ny_tidy, census_pop, how=\"left\", on=['FIPS'])\n\ncovid_ny_tidy['Date'] =  pd.to_datetime(covid_ny_tidy['Date'], format='%m\/%d\/%y')\ncovid_ny_tidy['Date'] = covid_ny_tidy['Date'].astype(str)\ncovid_ny_tidy_sort = covid_ny_tidy.sort_values(by=[\"FIPS\",\"Date\"])\n\ncovid_ny_tidy_sort.rename(columns = {'POPESTIMATE2019':'Population','CTYNAME':'County'}, inplace = True)\n\ncovid_ny_tidy_sort[\"Cases per 100,000\"] = (covid_ny_tidy_sort[\"Cases\"]\/covid_ny_tidy_sort[\"Population\"])*100000\n\ncovid_ny_tidy_sort","e0bbaed8":"fig = px.choropleth_mapbox(covid_ny_tidy_sort, geojson=ny, locations='FIPS', color='Cases', animation_frame=\"Date\",\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, covid_ny_tidy_sort['Cases'].max()),\n                           mapbox_style=\"carto-positron\",\n                           center = {'lat':43.299428,'lon':-74.217933},\n                           zoom = 5,\n                           opacity=0.5,\n                           hover_name = 'County',\n                           hover_data = ['Population'],\n                           title = \"COVID-19 Cases in New York from the Date of the First Case\"\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\nfig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 250\nfig.show()","e72f3cef":"fig = px.choropleth_mapbox(covid_ny_tidy_sort, geojson=ny, locations='FIPS', color='Cases per 100,000', animation_frame=\"Date\",\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, covid_ny_tidy_sort['Cases per 100,000'].max()),\n                           mapbox_style=\"carto-positron\",\n                           center = {'lat':43.299428,'lon':-74.217933},\n                           zoom = 5,\n                           opacity=0.5,\n                           hover_name = 'County',\n                           hover_data = ['Population','Cases'],\n                           title = \"COVID-19 Cases Per 100,000 people in New York from the Date of the First Case\"\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\nfig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 250\nfig.show()","a9a66db3":"fig = px.choropleth_mapbox(covid_ny_tidy_sort, geojson=ny, locations='FIPS', color='Cases per 100,000', animation_frame=\"Date\",\n                           color_continuous_scale=\"Viridis\",\n                           #range_color=(0, covid_ny_tidy_sort['Cases per 100,000'].max()),\n                           mapbox_style=\"carto-positron\",\n                           center = {'lat':43.299428,'lon':-74.217933},\n                           zoom = 5,\n                           opacity=0.5,\n                           hover_name = 'County',\n                           hover_data = ['Population','Cases'],\n                           title = \"COVID-19 Cases Per 100,000 people in New York from the Date of the First Case\"\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\nfig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 250\nfig.show()","3c075801":"fig = px.line(covid_ny_tidy_sort,x = \"Date\", y='Cases per 100,000', line_group='County', color='County')\n\nfig.update_layout(title = \"COVID-19 Cases Per 100,000 People in New York from the Date of the First Case\")\nfig.update_xaxes(rangeslider_visible=True)\nfig.show()","3c8122b5":"covid_fl = covid_data.loc[covid_data[\"State\"]==\"Florida\"]\n\ncovid_fl = covid_fl.loc[:, (covid_fl != 0).any(axis=0)]\n\ncovid_fl = covid_fl.drop([\"POPESTIMATE2019\", \"State\",\"CTYNAME\"],axis=1)\n\ncol_fl_list = covid_fl.columns.values.tolist()\n\ndel col_fl_list[-1]\n\ncovid_fl_tidy = pd.melt(covid_fl,id_vars = ['FIPS'], value_vars = col_fl_list)\n\ncovid_fl_tidy.rename(columns = {'variable':'Date','value':'Cases'}, inplace = True)\n\ncovid_fl_tidy = pd.merge(covid_fl_tidy, census_pop, how=\"left\", on=['FIPS'])\n\ncovid_fl_tidy['Date'] =  pd.to_datetime(covid_fl_tidy['Date'], format='%m\/%d\/%y')\ncovid_fl_tidy['Date'] = covid_fl_tidy['Date'].astype(str)\ncovid_fl_tidy_sort = covid_fl_tidy.sort_values(by=[\"FIPS\",\"Date\"])\n\ncovid_fl_tidy_sort.rename(columns = {'POPESTIMATE2019':'Population','CTYNAME':'County'}, inplace = True)\n\ncovid_fl_tidy_sort[\"Cases per 100,000\"] = (covid_fl_tidy_sort[\"Cases\"]\/covid_fl_tidy_sort[\"Population\"])*100000\n\nres_fl = [i for i in counties['features'] if not (i['properties']['STATE'] != '12')] \n\nfl = {'type': 'FeatureCollection', 'features': res_fl}","0d1d1b3c":"fig = px.choropleth_mapbox(covid_fl_tidy_sort, geojson=fl, locations='FIPS', color='Cases per 100,000', animation_frame=\"Date\",\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, covid_fl_tidy_sort['Cases per 100,000'].max()),\n                           mapbox_style=\"carto-positron\",\n                           center = {'lat':27.664827,'lon':-81.515754},\n                           zoom = 5,\n                           opacity=0.5,\n                           hover_name = 'County',\n                           hover_data = ['Population'],\n                           title = \"COVID-19 Cases Per 100,000 People in Florida from the Date of the First Case\"\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\nfig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 250\nfig.show()","fc0c7cf6":"fig = px.line(covid_fl_tidy_sort,x = \"Date\", y='Cases per 100,000', line_group='County', color='County')\n\nfig.update_layout(title = \"COVID-19 Cases Per 100,000 People in Florida from the Date of the First Case\")\nfig.update_xaxes(rangeslider_visible=True)\nfig.show()","0599fd07":"deaths = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_US.csv\")","a2d033c3":"deaths.head()","b375815e":"deaths = deaths.dropna()\ndeaths[\"FIPS\"] = deaths[\"FIPS\"].astype(int)\ndeaths[\"FIPS\"] = deaths[\"FIPS\"].astype(str)\n\nfor i in range(len(deaths)):\n    if len(deaths[\"FIPS\"].iloc[i]) < 5:\n        deaths[\"FIPS\"].iloc[i] = \"0\"+deaths[\"FIPS\"].iloc[i]\n","a9cf84ca":"deaths_new = pd.merge(deaths, census_pop, how=\"left\", on=['FIPS'])\n\ndeaths_new = deaths_new.dropna()","bb5c295c":"deaths_data = deaths_new.loc[:,\"1\/22\/20\":]\n\ndeaths_data['State'] = deaths_new['Province_State']\n\ndeaths_data['FIPS'] = deaths_new['FIPS']\n\ndeaths_data.head()","cc9c0755":"deaths_fl = deaths_data.loc[deaths_data[\"State\"]==\"Florida\"]\n\ndeaths_fl = deaths_fl.loc[:, (deaths_fl != 0).any(axis=0)]\n\ndeaths_fl = deaths_fl.drop([\"POPESTIMATE2019\", \"State\",\"CTYNAME\"],axis=1)\n\ncol_deaths_fl_list = deaths_fl.columns.values.tolist()\n\ndel col_deaths_fl_list[-1]\n\ndeaths_fl_tidy = pd.melt(deaths_fl,id_vars = ['FIPS'], value_vars = col_deaths_fl_list)\n\ndeaths_fl_tidy.rename(columns = {'variable':'Date','value':'Deaths'}, inplace = True)\n\ndeaths_fl_tidy = pd.merge(deaths_fl_tidy, census_pop, how=\"left\", on=['FIPS'])\n\ndeaths_fl_tidy['Date'] =  pd.to_datetime(deaths_fl_tidy['Date'], format='%m\/%d\/%y')\ndeaths_fl_tidy['Date'] = deaths_fl_tidy['Date'].astype(str)\ndeaths_fl_tidy_sort = deaths_fl_tidy.sort_values(by=[\"FIPS\",\"Date\"])\n\ndeaths_fl_tidy_sort.rename(columns = {'POPESTIMATE2019':'Population','CTYNAME':'County'}, inplace = True)\n\ndeaths_fl_tidy_sort[\"Deaths per 100,000\"] = (deaths_fl_tidy_sort[\"Deaths\"]\/deaths_fl_tidy_sort[\"Population\"])*100000\n\ndeaths_fl_tidy_sort\n\nres_fl = [i for i in counties['features'] if not (i['properties']['STATE'] != '12')] \n\nfl = {'type': 'FeatureCollection', 'features': res_fl}","3f561538":"fig = px.choropleth_mapbox(deaths_fl_tidy_sort, geojson=fl, locations='FIPS', color='Deaths per 100,000', animation_frame=\"Date\",\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, deaths_fl_tidy_sort['Deaths per 100,000'].max()),\n                           mapbox_style=\"carto-positron\",\n                           center = {'lat':27.664827,'lon':-81.515754},\n                           zoom = 5,\n                           opacity=0.5,\n                           hover_name = 'County',\n                           hover_data = ['Population'],\n                           title = \"COVID-19 Deaths Per 100,000 People in Florida from the Date of the First Case\"\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\nfig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 250\nfig.show()","b0682187":"fig = px.line(deaths_fl_tidy_sort,x = \"Date\", y='Deaths per 100,000', line_group='County', color='County')\n\nfig.update_layout(title = \"COVID-19 Deaths Per 100,000 People in Florida from the Date of the First Case\")\nfig.update_xaxes(rangeslider_visible=True)\nfig.show()","5647b18c":"deaths_fl_tidy_sort.head()","cff2fd10":"all_data_fl = pd.merge(covid_fl_tidy_sort, deaths_fl_tidy_sort, how=\"left\", on=['FIPS','Date'])","74a3750c":"all_data_fl = all_data_fl.dropna()","45d9246f":"all_data_fl = all_data_fl.drop(['Population_y','County_y'],axis=1)","585bf0f2":"all_data_fl.rename(columns = {'Population_x':'Population','County_x':'County'}, inplace = True)\n\nall_data_fl.head()","f5cf21a1":"all_data_fl['Deaths per Case'] = all_data_fl['Deaths']\/all_data_fl['Cases']\n\nall_data_fl['Deaths per Case'] = all_data_fl['Deaths per Case'].fillna(0)\nall_data_fl['Deaths per Case'] = all_data_fl['Deaths per Case'].replace([np.inf],0)","678ec334":"all_data_fl.head()","e33f3172":"fig = px.choropleth_mapbox(all_data_fl, geojson=fl, locations='FIPS', color='Deaths per Case', animation_frame=\"Date\",\n                           color_continuous_scale=\"Viridis\",\n                           #range_color=(0, all_data_fl['Deaths per Case'].max()),\n                           mapbox_style=\"carto-positron\",\n                           center = {'lat':27.664827,'lon':-81.515754},\n                           zoom = 5,\n                           opacity=0.5,\n                           hover_name = 'County',\n                           hover_data = ['Population','Cases','Deaths'],\n                           title = \"COVID-19 Deaths Per Confirmed Case in Florida from the Date of the First Case\"\n                          )\nfig.update_layout(margin={\"r\":20,\"t\":30,\"l\":20,\"b\":20})\nfig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 250\nfig.show()","913be7ab":"#fig.write_html(\"florida_deaths_per_case_choropleth.html\")","c7821d60":"fig = px.line(all_data_fl,x = \"Date\", y='Deaths per Case', line_group='County', color='County')\n\nfig.update_layout(title = \"COVID-19 Deaths Per Confirmed Case in Florida from the Date of the First Case\")\nfig.update_xaxes(rangeslider_visible=True)\nfig.show()","16148011":"all_data_fl[\"Percent Change Cases\"] = all_data_fl[\"Cases\"].pct_change()","6601ffcd":"all_data_fl['Percent Change Cases'] = all_data_fl['Percent Change Cases'].fillna(0)\nall_data_fl['Percent Change Cases'] = all_data_fl['Percent Change Cases'].replace([np.inf,-np.inf],0)\n\nall_data_fl.head()","4a5ed860":"all_data_fl.loc[all_data_fl['Date'] == '2020-03-08', 'Percent Change Cases'] = 0","dee52808":"all_data_fl.loc[all_data_fl['Date'] == '2020-03-08']","56111411":"fig = px.line(all_data_fl,x = \"Date\", y='Percent Change Cases', line_group='County', color='County')\n\nfig.update_layout(title = \"COVID-19 Percent Change in Cases in Florida from the Date of the First Case\")\nfig.update_xaxes(rangeslider_visible=True)\nfig.show()","ed4fd12e":"all_data_fl[\"Percent Change Deaths\"] = all_data_fl[\"Deaths\"].pct_change()\nall_data_fl['Percent Change Deaths'] = all_data_fl['Percent Change Deaths'].fillna(0)\nall_data_fl['Percent Change Deaths'] = all_data_fl['Percent Change Deaths'].replace([np.inf,-np.inf],0)\n\nall_data_fl.loc[all_data_fl['Date'] == '2020-03-08', 'Percent Change Cases'] = 0","bd388fe0":"all_data_fl.sample(5)","ebea5fe2":"fig = px.choropleth_mapbox(all_data_fl, geojson=fl, locations='FIPS', color='Percent Change Deaths', animation_frame=\"Date\",\n                           color_continuous_scale=\"Viridis\",\n                           #range_color=(all_data_fl['Percent Change Deaths'].min(), all_data_fl['Percent Change Deaths'].max()),\n                           mapbox_style=\"carto-positron\",\n                           center = {'lat':27.664827,'lon':-81.515754},\n                           zoom = 5,\n                           opacity=0.5,\n                           hover_name = 'County',\n                           hover_data = ['Population','Cases','Deaths'],\n                           title = \"COVID-19 Percent Change in Deaths in Florida from the Date of the First Case\"\n                          )\nfig.update_layout(margin={\"r\":20,\"t\":30,\"l\":20,\"b\":20})\nfig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 250\nfig.show()","4db16550":"covid_data[\"Cases per 100,000 for 7\/24\/2020\"] = covid_data[\"7\/24\/20\"]\/covid_data[\"POPESTIMATE2019\"]\n\n\n#The New York City Data is not fixed in this and the data is just removed\nfig = px.choropleth_mapbox(covid_data, geojson=counties, locations='FIPS', color='Cases per 100,000 for 7\/24\/2020',\n                           color_continuous_scale=\"Viridis\",\n                           mapbox_style=\"carto-positron\",\n                           zoom=3, center = {\"lat\": 37.0902, \"lon\": -95.7129},\n                           opacity=0.5,\n                           labels={'Cases per 100,000 for 7\/24\/2020':'Cases per 100,000'},\n                           title = \"COVID-19 Cases Per 100,000 People on 7\/24\/2020\",\n                           hover_name = \"CTYNAME\",\n                           hover_data = [\"State\",\"7\/24\/20\"]\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","8198b0b3":"This matches the number of US Counties including the District of Columbia.\n\nNow, let's look at the column names here to see where we start.","d9d4d6d0":"From this time-series, we can asee there was a large surge in cases from March into May and then the rate of new cases begin to slow down.","94425676":"The first date being used to collect data by the CSSE is January 22, 2020.  A good amount of those early dates have no cases in the US, but we will keep them all for now.  As previously mentioned, we really just need the dated columns and `FIPS`.  However, we will keep the `Province_State` column so we can easily break out data for individual states.","00d09108":"There are a couple things we want to do.  We want to start our visualization on the first confirmed case in the state.  So, we want to drop any of the date columns that all 0s.  We are then going to use `pd.melt()` to turn our set into a tidy set.  We are going to drop the population estimate column and place it back in to make this work.  We will also drop the state column as that is no longer needed.\n\n(As a note, it may seem odd that we added the population data just to take it away.  If we wanted to plot country wide maps for individual dates, the `covid_data` dataframe allows us to do that quickly and efficiently.)","0ecbd6bf":"### Census Data","bee16ebe":"With the data as is, we can also plot other styles of visualizations.  We can have a time-series.  If you wish to include or exclude a county, just click on the list to the right.","7e64aa02":"### Combining Cases and Deaths","362e7dfb":"Now the FIPS code is proper for use with our choropleth maps. ","af71d850":"Now we are ready to go.","656b8905":"Now we can insert our FIPS code.","166c58b3":"Now let's restrict our scope to just Florida the same way as before.","04daa3d1":"### Visualizing COVID-19 Deaths in Florida","607d8759":"### Preprocessing","ce7ff583":"Let's first gather some population data.  This data is provided from the [US Census Bureau](https:\/\/www.census.gov\/data\/datasets\/time-series\/demo\/popest\/2010s-counties-total.html) and contains multiple different fields.  Although the last Census took place in 2010, they provide estimates for every county in each US State.  For this project, we will be using the latest estiemate, which is for 2019.","feeca556":"## Packages","e3191c57":"## Data Upload and Preprocessing","f04c4405":"## Conclusion","cb78aaf1":"Plotly maintains a collection of [datasets](https:\/\/github.com\/plotly\/datasets).  The one we will be focusing on is the geojson information for every county and territory in the United States.  However, we plan on plotting individual states.  So, this file will need to be processed for every state individually when we want to plot them.","68c00e77":"## Jason Gumaer","5e0e1017":"Let's merge these two dataframes together.","ed84c2c4":"## Visualizing COVID-19 in Florida","53e7be5e":"### Preprocessing","133c83ae":"Now let's combine the two sources of data, cases and deaths, to create a ratio and visualize that.","cf901d7c":"The important column for us to use are going to be the `POPESTIMATE2019`.  However, we are also going to use the columns `STATE` and `COUNTY` to create FIPS codes.\n\nFirst, we can see from the head that not only does this contain county data, but data for entire states.  For instance, the first entry is the information for the entire state of Alabama.  We are going to split this out and create a dataframe for state data if it is desirable to create a US map for states.  We will focus on counties.\n\nAnother problem for this data as well as our COVID-19 data is that FIPS codes are 5 digit strings.  The state is a two digits and the county is a three digits.  One issue is that we have two columns that we need to combine and convert into a string.  However, because the columns are identified as integers, the 0 in front of the two digit code is drop.  For insance, Alabama should be listed as 01, but since it is an integer, it is only listed as 1.","248b4173":"## COVID-19 Deaths in Florida","5f548585":"We can see that there are going to be similar issues with this data like the Census data.  First, the FIPS codes are registered as floats in this case.  This means there is an extra decimal place as well as issues with beginning 0s.  We are also not going to need the majority of the identifiers besides the FIPS and the number of cummulative cases for each data.  Let's fix the FIPS code first.","6eecd239":"### COVID-19 Cases Data","596415e9":"Now we can included our data from the Census by joining the two dataframes along the `FIPS` column.","1c718c50":"If you can find it, Trousdale County in Tennessee skews this pretty hard with a 13% infection rate.","3d89dec7":"From this, we can see that the counties that have a major city like Mobile and Birmingham, tend to have more cases.  This makes sense from a sheer population and population density standpoint.\n\nTo counter this, let's check the same visualization, except using cases per 100,000 people.","498299f4":"With our combined dataframe, we can also look at percent change in cases and deaths with a little more processing.","aa872604":"We are almost all set to visualize.  The only thing left to do is to work with our geojson data.\n\nThe current geojson file pulled `counties` is a nested dictionary that contains a list of all the data for each county.  We only want the data for Alabama.  So, we are going to deconstruct this nested dictionary, only grab the Alabama information, and reconstruct the dictionary in the proper format.","b315a7f4":"We should be all good to go now.  Let's plot the two maps like we did for Alabama.","a2ba2012":"So, there is going to be a problem with the list of dates under `variable`.  When we pass this list through the plotly code, the animation frame is going to be based on this column.  We need to make sure that it is sorted by the `FIPS` with the dates chronologically.  In the current date form, that is not possible.  We will convert it into the standard date form.  We should also get our population data back and rename some of these columns.","dfeb3592":"We should be used to the process from the previous two examples.  Luckily, we won't run into a problem like we did with New York.","4902929a":"It could also be useful if we had a scale that is changing.  That will make it a less effective animation, but will produce better individual plots when using the scroll bar for individual dates.","a2063bed":"### The purpose of creating this Notebook was for the Data Science graduate curriculum at Indiana University, I-590 Data Visualization, Summer 2020","76ccc884":"## Visualizing Cases in Alabama","b596b1aa":"Now we can do a similar process for percent change in deaths.","d0daf7bc":"### Alabama Choropleth Maps","80745493":"Let's attempt to do the same thing except with COVID related deaths.  This just requires taking another file from CSSE and manipulating it in the same way.","ed372448":"Now we need to have a rolling total like our data from CSSE.","99f2de5e":"We will just go through the same steps we did for Alabama in a more condenced format and see what happens.","b262a8e3":"Last thing we want to do with this is to create a new column based on the population data.  One way of viewing COVID cases is just by using the raw number of cases.  However, since we are creating a map, we want to remove any bias based on the population of each county.  So, we will create a column for cases per 100,000 residents.  We will then make two maps, one for raw cases and the other for cases per 100,000.","b833276b":"We want to pull just the data for Alabama from our COIVD-19 dataframe.  We can also confirm that the we have the correct number of counties for the state.","c3c27f14":"The goal for this project is to create animated choropleth maps to show COVID-19 cases and deaths for individual states at the county level.  We will be utilizing plotly express and mapbox to create interactive visualizations with publicly provided data.  At the end, we will have a method to create a visualization for every state in the United States.","979fdbd2":"We will be utilizing [Plotly Express' Choropleth visualization tool using Mapbox](https:\/\/plotly.github.io\/plotly.py-docs\/generated\/plotly.express.choropleth_mapbox.html).  This is a simple and straight forward visualization tool that allows us to accomplish everything we want in a few lines of code.\n\nFirst, we will plot the number of cases in every county.  The visualization will have a scroll bar for us to select the data we wish.  At any point, we can hover over an individual county and view the data for that specified date.","d7254efd":"### Preprocessing","9bec6f28":"Next we want to make this dataframe look as much like our COVID-19 data from CSSE.  So we want the dates to be our columns.","f2415753":"From here, there are a few things that we can do with this information.  That being said, our goal is to plot a time-series choropleth map for individual states.  We also want to make this data tidy with our variable being the date.  Let's do a run with just the state of Alabama and then adapt the same process for other states.  This will require a bit more preprocessing.","358e92b2":"As you can see, we have a problem here.  The CSSE data has all 5 bouroughs of New York City condensed onto Manhattan.  We will need to fix that by pulling some additional data.\n\nNYC Health happens to keep records on COVID-19 infromation on their [website](https:\/\/www1.nyc.gov\/site\/doh\/covid\/covid-19-data.page).  This will end up being a little complicated as we now need to merge two formats togther.","a5dd45ca":"# Visualizing COVID-19 County Level Data for Individual States","c5174844":"### New York Choropleth Maps","8563ce22":"This contains the information we need.  It starts on Februray 29, which is the first date of a record case and it is generally well updated.  It contains information for all 5 burrows which match up to the counties that had improper information.\n\nWe are just focusing on cases currently.  So, let's drop the columns that currently don't matter.","626e05d1":"Let's try and do this for some other states now that we have a methodology down.","a292e299":"Looks like the first confirmed case occured on March 13, 2020.  Now let's tidy this up.","eac2fbc0":"### Looking at Percent Change in Cases and Deaths","8c027e0d":"### Visualizing Deaths per Confirmed Case in Florida","9c800cb8":"We can see that there is going to be some issues here as our Census data only contained information for the counties of US States, not territories.  So territories like Puerto Rico do not have population data.  We will drop those territories as well.","85d1630d":"### Florida Choropleth Map","e628ccad":"This paints a very different picture.  Lowndes county appears to be hit hardest now with more than 5% of its population testing positive for COVID-19.  Although there are still a lot of cases in those high population counties, they all have less than 2.5% confirmed cases in their populations.  It would be interesting to follow up on Lowndes county and see how a sparsely populated county, less than 10,000 people, could have such a high rate.  It is possible there was an outbreak in one of the major population centers there.","e3521d94":"Finally, we can splice in our data to our other dataframe and try tidying everything up again.  Since the NYC Health has a starting case on Februrary 29 and that is earlier than the CSSE data, we will start our dataframe there.\n\nLooking over the [documentation](https:\/\/github.com\/nychealth\/coronavirus-data) for the NYC data, it is hard to tell when they update their files.  However, the timestamps suggest they update their files around 1pm Eastern. The CSSE data is updated around 11pm Eastern (they state about 3:30 GMT).  That means there is a possibility for the CSSE data to have an additional date which means our information will not match.  To rectify this, we will just copy the last row of data in the NYC information if the lenghts don't match up.","d826e98b":"### County Geojson Data","e7669ea7":"In this notebook we have created a method for tracking COVID-19 cases and deaths at the county level for individual states.  This method can be applied to any US State.  If you wish to track it in US Territories, such as Puerto Rico, you can still use the CSSE data, but the Census data is insufficient.\n\nThis method could also be applied to the entire country if you wish to visualize all of the counties at once.  However, this was decided against for a couple reason.  One, there are over 3000 counties and over 4 months of data.  The processing time to run the code would be quite long to plot an animated map.  Two, there is large variety across the country in cases and population.  So, the contrast could be low.  However, we can include on map for the entire US below for one particular date.","e915b0be":"## Visualizing Cases in New York","af48d01a":"### Preprocessing","7e1bb2d8":"Let's take a peek at the COVID-19 data provided from [Center for Systems Science and Engineering (CSSE) at Johns Hopkins University](https:\/\/github.com\/CSSEGISandData\/COVID-19).  The first file we will be looking at are confirmed cases in a time series format for the US sepearate by counties and territories."}}