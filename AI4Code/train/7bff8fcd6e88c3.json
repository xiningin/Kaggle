{"cell_type":{"62f28a6b":"code","354f1ae4":"code","f1946365":"code","7c89aa8b":"code","3c642978":"code","6b636302":"code","62f82f24":"code","510cac90":"code","a5e24a5a":"code","dd23b3ee":"code","f0a455fa":"code","b37ebabb":"code","815da6ac":"code","80704f06":"code","23ffc9b4":"code","f7b4ecac":"code","cbf7aaf7":"code","1b099a73":"markdown","f094a2c8":"markdown","c4c70594":"markdown","6fc9693a":"markdown","341194a3":"markdown"},"source":{"62f28a6b":"import pandas as pd\nfrom datetime import datetime\nimport plotly.express as px\nimport plotly.graph_objects as go","354f1ae4":"movies_data = pd.read_csv('..\/input\/movietweetings\/movies.dat', delimiter='::', engine='python', header=None, names = ['Movie ID', 'Movie Title', 'Genre'])\nusers_data = pd.read_csv('..\/input\/movietweetings\/users.dat', delimiter='::', engine='python', header=None, names = ['User ID', 'Twitter ID'])\nratings_data = pd.read_csv('..\/input\/movietweetings\/ratings.dat', delimiter='::', engine='python', header=None, names = ['User ID', 'Movie ID', 'Rating', 'Rating Timestamp'])","f1946365":"print(\"The movies dataset has {0} rows and {1} columns\".format(movies_data.shape[0], movies_data.shape[1]))\nprint(\"The users dataset has {0} rows and {1} columns\".format(users_data.shape[0], movies_data.shape[1]))\nprint(\"The ratings dataset has {0} rows and {1} columns\".format(ratings_data.shape[0], movies_data.shape[1]))","7c89aa8b":"pd.concat(g for _, g in movies_data.groupby(\"Movie ID\") if len(g) > 1)","3c642978":"cleared_movies = movies_data.drop_duplicates('Movie ID')","6b636302":"merged_data = ratings_data.merge(cleared_movies, how = 'inner', on = ['Movie ID'])\nmerged_data.head()","62f82f24":"time_info = []\n\nfor i in range(merged_data.shape[0]):\n    ts = int(merged_data.iloc[i]['Rating Timestamp'])\n    current_info = [datetime.utcfromtimestamp(ts).strftime('%Y-%m-%d'), datetime.utcfromtimestamp(ts).strftime('%m'), datetime.utcfromtimestamp(ts).strftime('%Y'), datetime.utcfromtimestamp(ts).strftime('%H:%M:%S')]\n    time_info.append(current_info)","510cac90":"merged_data[['Date', 'Month', 'Year', 'Time']] = pd.DataFrame(time_info)","a5e24a5a":"merged_data = merged_data.drop('Rating Timestamp', axis=1)","dd23b3ee":"merged_data.head()","f0a455fa":"genre_data = pd.DataFrame(merged_data.groupby('Genre')['Movie ID'].nunique()).reset_index()","b37ebabb":"fig = go.Figure(data=[go.Pie(labels=genre_data.head(5)['Genre'], values=genre_data.head(5)['Movie ID'])])\nfig.show()","815da6ac":"fig = px.box(merged_data, y=\"Rating\")\nfig.show()","80704f06":"date_count = pd.DataFrame(merged_data.groupby('Date')['User ID'].count()).reset_index()\ndate_count = date_count.sort_values('Date')","23ffc9b4":"fig = px.line(date_count, x='Date', y='User ID')\nfig.show()","f7b4ecac":"genre = {}\n\nfor i in range(merged_data.shape[0]):\n    genre_data = merged_data.iloc[i]['Genre']\n    \n    if pd.isna(genre_data) == False:\n        try:\n            if '|' in genre_data:\n                genre_list = genre_data.split('|')\n\n                for key in genre_list:\n                    if key in genre:\n                        genre[key]+=1\n                    else:\n                        genre[key]=1            \n\n            else:\n                if genre_data in genre:\n                    genre[genre_data]+=1\n                else:\n                    genre[genre_data]=1\n        except:\n            print(genre_data)","cbf7aaf7":"fig = go.Figure(data=[go.Pie(labels=list(genre.keys()), values=list(genre.values()))])\nfig.show()","1b099a73":"Checking whether movies dataset has duplicate rows","f094a2c8":"### Merging Movies and Ratings","c4c70594":"Removing the duplicates from the dataset","6fc9693a":"### Extract Info from Timestamp","341194a3":"### Data Insights"}}