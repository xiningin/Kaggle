{"cell_type":{"a4fcce4e":"code","2304b471":"code","b8795a2d":"code","8224619c":"code","33178fce":"code","0a98cc01":"code","2d291303":"code","6547567c":"code","cf835fe4":"code","abc40406":"code","d2cc6478":"code","4e1f1fef":"code","656813cc":"code","bd2e6f4b":"code","f7a46265":"code","0157edb3":"code","eb4344d0":"code","2739e121":"code","33492e6c":"code","6a015568":"code","d891dc7e":"code","09f501ff":"code","6a644348":"code","37454c21":"code","4359d210":"code","646429c2":"code","d7122700":"markdown","e6403c6a":"markdown","99cd1825":"markdown","bc030929":"markdown","588001b1":"markdown","63f3e93b":"markdown","af6c7204":"markdown","69041d4a":"markdown","b2588545":"markdown","7f86bdcf":"markdown","5a5730e2":"markdown","09eda0ba":"markdown","5ff70d1f":"markdown","2b8612ae":"markdown","32d1a77f":"markdown","e278618d":"markdown","ff40ba81":"markdown","f78eb2ac":"markdown","b64bfb80":"markdown","3bbacd71":"markdown","c544bd8c":"markdown","1f12edc4":"markdown","a1e4dcbb":"markdown","162705ab":"markdown"},"source":{"a4fcce4e":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2304b471":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport xgboost as xgb\nfrom sklearn.metrics import accuracy_score, SCORERS\nfrom sklearn.model_selection import GridSearchCV\nimport random","b8795a2d":"df_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ndf_submissions = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ndf_train.head()","8224619c":"fig, axes = plt.subplots(nrows=1, ncols=2,figsize=(16, 8))\n\nax = sns.distplot(df_train.loc[(df_train['Survived']==1) & (df_train['Sex']=='female'), 'Age'].dropna(), bins=18, label = 'survived', ax = axes[0], kde =False, color=\"green\")\nax = sns.distplot(df_train.loc[(df_train['Survived']==0) & (df_train['Sex']=='female'), 'Age'].dropna(), bins=40, label = 'not survived', ax = axes[0], kde =False, color=\"red\")\nax.legend()\nax.set_title('Female')\nax = sns.distplot(df_train.loc[(df_train['Survived']==1) & (df_train['Sex']=='male'), 'Age'].dropna(), bins=18, label = 'survived', ax = axes[1], kde = False, color=\"green\")\nax = sns.distplot(df_train.loc[(df_train['Survived']==0) & (df_train['Sex']=='male'), 'Age'].dropna(), bins=40, label = 'not survived', ax = axes[1], kde = False, color=\"red\")\nax.legend()\nax.set_title('Male');","33178fce":"percent_missing = df_train.isnull().sum() * 100 \/ len(df_train)\nmissing_value_df = pd.DataFrame({'column_name': df_train.columns,\n                                 'percent_missing': percent_missing})\nmissing_value_df","0a98cc01":"percent_missing = df_test.isnull().sum() * 100 \/ len(df_test)\nmissing_value_df = pd.DataFrame({'column_name': df_test.columns,\n                                 'percent_missing': percent_missing})\nmissing_value_df","2d291303":"age_concat = pd.concat([df_train['Age'], df_test['Age']])\n\ndf_age_non_missing = age_concat.dropna()\nage_mean = df_age_non_missing.mean()\nage_std = df_age_non_missing.std()\n\ndf_age_missing_train = df_train['Age'].isna()\ndf_age_missing_train = pd.DataFrame(data=df_age_missing_train.values, columns=['age_bool'])\ndf_age_missing_train = df_age_missing_train.loc[df_age_missing_train['age_bool'] == True, :]\ndf_age_missing_train = df_age_missing_train.index.tolist()\n\ndf_age_missing_test = df_test['Age'].isna()\ndf_age_missing_test = pd.DataFrame(data=df_age_missing_test.values, columns=['age_bool'])\ndf_age_missing_test = df_age_missing_test.loc[df_age_missing_test['age_bool'] == True, :]\ndf_age_missing_test = df_age_missing_test.index.tolist()\n\n\nfor idx, row in df_train.iterrows():\n    if idx in df_age_missing_train:\n        df_train.loc[idx, 'Age'] = int(random.uniform(age_mean - age_std, age_mean + age_std))\n        \nfor idx, row in df_test.iterrows():\n    if idx in df_age_missing_test:\n        df_test.loc[idx, 'Age'] = int(random.uniform(age_mean - age_std, age_mean + age_std))    ","6547567c":"embarked_concat = pd.concat([df_train['Embarked'], df_test['Embarked']])\nmost_occured_embarked = embarked_concat.mode().values[0]\n\ndf_train['Embarked'] = df_train['Embarked'].fillna(most_occured_embarked)\n\ndf_test['Embarked'] = df_test['Embarked'].fillna(most_occured_embarked)","cf835fe4":"df_test['Fare'].fillna(df_test['Fare'].dropna().median(), inplace=True)","abc40406":"df_train['size_of_family'] = df_train['Parch'] + df_train['SibSp']\ndf_test['size_of_family'] = df_test['Parch'] + df_test['SibSp']\n\ndf_train[['size_of_family', 'Survived']].groupby(['size_of_family'], as_index=False).mean().sort_values(by='Survived', ascending=False)","d2cc6478":"df_train['size_of_family'] = df_train['size_of_family'].apply(lambda x: 0 if x==0 else (1 if ((x>0)&(x<=3)) else 2))\ndf_train.drop(['Parch', 'SibSp'], axis=1, inplace=True)\n\ndf_test['size_of_family'] = df_test['size_of_family'].apply(lambda x: 0 if x==0 else (1 if ((x>0)&(x<=3)) else 2))\ndf_test.drop(['Parch', 'SibSp'], axis=1, inplace=True)","4e1f1fef":"df_train['Sex'] = df_train['Sex'].apply(lambda x: 0 if x=='male' else 1)\ndf_test['Sex'] = df_test['Sex'].apply(lambda x: 0 if x=='male' else 1)","656813cc":"one_hot_Embarked = pd.get_dummies(df_train['Embarked'], prefix='Embarked')\ndf_train = pd.concat([df_train.drop(['Embarked'], axis=1), one_hot_Embarked], axis=1)\n\none_hot_Embarked = pd.get_dummies(df_test['Embarked'], prefix='Embarked')\ndf_test = pd.concat([df_test.drop(['Embarked'], axis=1), one_hot_Embarked], axis=1)","bd2e6f4b":"df_train['split_age'] = pd.cut(df_train['Age'], 6)\ndf_train[['split_age', 'Survived']].groupby(['split_age'], as_index=False).mean().sort_values(by='split_age', ascending=True)","f7a46265":"df_train['Age'] = df_train['Age'].apply(lambda x: 0 if x<=9 else(1 if ((x>9)&(x<=60)) else 2))\ndf_test['Age'] = df_test['Age'].apply(lambda x: 0 if x<=9 else(1 if ((x>9)&(x<=60)) else 2))","0157edb3":"df_train['split_Fare'] = pd.qcut(df_train['Fare'], 5)\ndf_train[['split_Fare', 'Survived']].groupby(['split_Fare'], as_index=False).mean().sort_values(by='split_Fare', ascending=True)","eb4344d0":"df_train['Fare'] = df_train['Fare'].apply(lambda x: 0 if x<=10.5 else(1 if ((x>10.5)&(x<=39.688)) else 2))\ndf_test['Fare'] = df_test['Fare'].apply(lambda x: 0 if x<=10.5 else(1 if ((x>10.5)&(x<=39.688)) else 2))","2739e121":"df_train['Title'] = df_train.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\ndf_test['Title'] = df_test.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\ndf_train.groupby(['Title'])['PassengerId'].count()","33492e6c":"df_train['Title'] = df_train['Title'].replace(['Lady', 'Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\ndf_train['Title'] = df_train['Title'].replace('Mlle', 'Miss')\ndf_train['Title'] = df_train['Title'].replace('Ms', 'Miss')\ndf_train['Title'] = df_train['Title'].replace('Mme', 'Mrs')\n\ndf_test['Title'] = df_test['Title'].replace(['Lady', 'Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\ndf_test['Title'] = df_test['Title'].replace('Mlle', 'Miss')\ndf_test['Title'] = df_test['Title'].replace('Ms', 'Miss')\ndf_test['Title'] = df_test['Title'].replace('Mme', 'Mrs')\n    \ndf_train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","6a015568":"one_hot_title = pd.get_dummies(df_train['Title'], prefix='Title')\ndf_train = pd.concat([df_train.drop(['Title'], axis=1), one_hot_title], axis=1)\n\none_hot_title = pd.get_dummies(df_test['Title'], prefix='Title')\ndf_test = pd.concat([df_test.drop(['Title'], axis=1), one_hot_title], axis=1)","d891dc7e":"df_train.drop(['PassengerId', 'Ticket', 'Cabin', 'split_age', 'split_Fare', 'Name'], axis=1, inplace=True)\ndf_test.drop(['PassengerId', 'Ticket', 'Cabin', 'Name'], axis=1, inplace=True)","09f501ff":"parameters = {\n    'n_estimators': [100,500],\n    'max_depth': [3,5],\n    'learning_rate': [0.01,0.1]\n}","6a644348":"X = df_train.drop(['Survived'], axis=1)\ny = df_train[\"Survived\"]\n\nmodel = xgb.XGBClassifier()\nclf = GridSearchCV(model, parameters, n_jobs=-1, \n                   scoring='accuracy',\n                   verbose=1)\nclf.fit(X, y)","37454c21":"clf.best_params_","4359d210":"X = df_train.drop(['Survived'], axis=1)\ny = df_train[\"Survived\"]\n\nmodel = xgb.XGBClassifier(n_estimators = 100, max_depth = 3, learning_rate = 0.1)\nmodel.fit(X, y)\npredictions_test = model.predict(df_test)\nprediction_train = model.predict(X)\nprint(accuracy_score(y, prediction_train))","646429c2":"output = pd.DataFrame({'PassengerId': df_submissions.PassengerId, 'Survived': predictions_test})\noutput.to_csv('my_submission_4.csv', index=False)\nprint(\"Submission saved\")","d7122700":"## Fill na","e6403c6a":"One hot encoding these values","99cd1825":"## Data Preparation","bc030929":"**Fare :** We will take the median value","588001b1":"**Drop useless columns**","63f3e93b":"**Age :** A simple way is to generate random numbers between mean and standard deviation.","af6c7204":"**There are plenty of titles that are very rare so we will combine them**","69041d4a":"**Split the Fare**","b2588545":"These two columns represents the numbers of family members present in the Titanic. So we can group them :","7f86bdcf":"**For fun, we can try an hypothesis : women and children would have had a better chance of survival**","5a5730e2":"* The column '**Cabin**' has 77% of missing values => Drop this column\n* The column '**Age**', **'Fare'** and '**Embarked**' have enough values => Fill these values","09eda0ba":"# Model","5ff70d1f":"Best parameters : ","2b8612ae":"We can group several values and drop the following columns : 'Parch', 'SibSp'\n* 0\n* 0<x<=3\n* \\>3","32d1a77f":"**Split the age**","e278618d":"**Embarked :** We will take the most occured value.","ff40ba81":"* n_estimators = 100\n* max_depth = 3\n* learning_rate = 0.1","f78eb2ac":"**Transform column 'Sex' into binary column**","b64bfb80":"# DATA","3bbacd71":"## Get the data","c544bd8c":"**Specific preparation for Parch and SibSp**","1f12edc4":"**Try to extract value from column 'Name'**","a1e4dcbb":"**One hot encoding for Embarked**","162705ab":"# IMPORT"}}