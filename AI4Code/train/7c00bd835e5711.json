{"cell_type":{"84dfded7":"code","90abf301":"code","f6a6022f":"code","0902736e":"code","bebb1018":"code","fdd9f5ef":"code","e8982f50":"code","997a795a":"code","de4f7f20":"code","02369399":"code","03ae80c9":"code","fe257e8a":"code","1d21a4a1":"code","887eb099":"code","c0174260":"code","29c62a79":"code","0bb5ffbf":"code","c53731c6":"code","9842a308":"code","01f4e197":"code","df1c3661":"code","017c77bc":"code","6174f4d8":"code","32bc9ece":"code","95c2faf8":"code","0e2436a1":"code","99126011":"code","38750fd9":"code","fe9b1b9b":"code","c73fc8ab":"code","b10080a4":"code","ca45b218":"code","4ad03a44":"code","caa1fb2c":"code","07fe6dd7":"code","52b9034c":"markdown","d8900cfd":"markdown","62893a43":"markdown","501f09a9":"markdown","da0a902f":"markdown"},"source":{"84dfded7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfrom tqdm import tqdm_notebook as tqdm\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","90abf301":"fpath = '\/kaggle\/input\/santa-2019-workshop-scheduling\/family_data.csv'\ndata = pd.read_csv(fpath)\n\n# fpath = '\/kaggle\/input\/santa-2019-workshop-scheduling\/sample_submission.csv'\n# submission = pd.read_csv(fpath, index_col='family_id')\n\n# thanks for https:\/\/www.kaggle.com\/cweed28\/reduce-memory-usage to reduce memory\n\ndata['family_id'] = data['family_id'].astype('uint16')\ndata[data.drop('family_id',axis=1).columns] = data[data.drop('family_id',axis=1).columns].astype('uint8')\n\nnew_memory = data.memory_usage().sum() \/ (1024**2 )\nprint(f'{new_memory:.4f} MB ')","f6a6022f":"fpath = '\/kaggle\/input\/santa-2019-workshop-scheduling\/sample_submission.csv'\nsubmission = pd.read_csv(fpath)","0902736e":"data.head()","bebb1018":"submission.head()","fdd9f5ef":"! pip install munkres","e8982f50":"from munkres import Munkres","997a795a":"def get_choice_cost(choice, n):\n    if choice == 0:\n        return int(0)\n    elif choice == 1:\n        return int(50)\n    elif choice == 2:\n        return int(50+9*n)\n    elif choice == 3:\n        return int(100+9*n)\n    elif choice == 4:\n        return int(200+9*n)\n    elif choice == 5:\n        return int(200+18*n)\n    elif choice == 6:\n        return int(300+18*n)\n    elif choice == 7:\n        return int(300+36*n)\n    elif choice == 8:\n        return int(400+36*n)\n    elif choice == 9:\n        return int(500+(36+199)*n)\n    else:\n        return int(500+434*n)","de4f7f20":"def get_weights():\n    #dff = CSV.read(\"family_data.csv\")\n    \n\n    # preference cost matrix\n    preference_mat = np.zeros((5000,5000))\n    preference_mat = preference_mat.astype(int)\n    # first fill every column with the maximum cost for that family\n    for ind,row in data.iterrows():\n        preference_mat[ind] = get_choice_cost(10, row['n_people'])\n    for ind,row in data.iterrows():\n        for i in range(10):\n            \n            \n            choice =  row[f'choice_{i}']\n            choice_cost = get_choice_cost(i, row['n_people'])\n            for k in range(((choice-1)*50),(choice)*50):\n                preference_mat[ind,k] = choice_cost\n    preference_mat = preference_mat.astype(int)\n    return preference_mat\n                \n                    \n                    \n\n\n","02369399":"data.columns","03ae80c9":"data.info()","fe257e8a":"# from cachetools import cached, TTLCache  # 1 - let's import the \"cached\" decorator and the \"TTLCache\" object from cachetools\n# cache = TTLCache(maxsize=100, ttl=300)","1d21a4a1":"#weights = get_weights()","887eb099":"weights = get_weights()\n","c0174260":"# weights = weights[:200,:200]\nweights = weights.astype('uint16')","29c62a79":"from tqdm import tqdm_notebook as tqdm","0bb5ffbf":"!pip install lapsolver","c53731c6":"from lapsolver import solve_dense\nrids, cids = solve_dense(weights)","9842a308":"submission['assigned_day'] = np.ceil(cids\/50)","01f4e197":"# one of the row has 0 ; lets make it 100 since 100 days has 49 entries\n\nind1 = submission[submission['assigned_day'] == 0].index[0]\n","df1c3661":"ind1","017c77bc":"submission.columns","6174f4d8":"submission['assigned_day'].value_counts()","32bc9ece":"submission.loc[3195,'assigned_day']","95c2faf8":"submission.loc[ind1,'assigned_day']= 100","0e2436a1":"submission['assigned_day'].value_counts()","99126011":"submission['assigned_day'] = submission['assigned_day'].astype(int)","38750fd9":"submission['assigned_day'].value_counts()","fe9b1b9b":"submission.head()","c73fc8ab":"submission.to_csv(\"submission_hungarian.csv\",index = False)","b10080a4":"\n# from munkres import Munkres, print_matrix\n# m = Munkres()\n# #def main_run():\n# # weights = get_weights()\n# # weights = weights[:10,:10]\n\n# #assignment, cost = hungarian(weights)\n# indexes = m.compute(weights)\n# #print_matrix(weights, msg='Lowest cost through this matrix:')\n# total = 0\n# # for row, column in indexes:\n# #     value = weights[row][column]\n# #     total += value\n# #     #print(f'({row}, {column}) -> {value}')\n# # print(f'total cost: {total}')","ca45b218":"# family_size_dict = data[['n_people']].to_dict()['n_people']\n\n# cols = [f'choice_{i}' for i in range(10)]\n# choice_dict = data[cols].T.to_dict()\n\n# N_DAYS = 100\n# MAX_OCCUPANCY = 300\n# MIN_OCCUPANCY = 125\n\n# # from 100 to 1\n# days = list(range(N_DAYS,0,-1))","4ad03a44":"# family_size_ls = list(family_size_dict.values())\n# choice_dict_num = [{vv:i for i, vv in enumerate(di.values())} for di in choice_dict.values()]\n\n# # Computer penalities in a list\n# penalties_dict = {\n#     n: [\n#         0,\n#         50,\n#         50 + 9 * n,\n#         100 + 9 * n,\n#         200 + 9 * n,\n#         200 + 18 * n,\n#         300 + 18 * n,\n#         300 + 36 * n,\n#         400 + 36 * n,\n#         500 + 36 * n + 199 * n,\n#         500 + 36 * n + 398 * n\n#     ]\n#     for n in range(max(family_size_dict.values())+1)\n# } ","caa1fb2c":"# def cost_function(prediction):\n#     penalty = 0\n\n#     # We'll use this to count the number of people scheduled each day\n#     daily_occupancy = {k:0 for k in days}\n    \n#     # Looping over each family; d is the day, n is size of that family, \n#     # and choice is their top choices\n#     for n, d, choice in zip(family_size_ls, prediction, choice_dict_num):\n#         # add the family member count to the daily occupancy\n#         daily_occupancy[d] += n\n\n#         # Calculate the penalty for not getting top preference\n#         if d not in choice:\n#             penalty += penalties_dict[n][-1]\n#         else:\n#             penalty += penalties_dict[n][choice[d]]\n\n#     # for each date, check total occupancy\n#     #  (using soft constraints instead of hard constraints)\n#     for v in daily_occupancy.values():\n#         if (v > MAX_OCCUPANCY) or (v < MIN_OCCUPANCY):\n#             penalty += 100000000\n\n#     # Calculate the accounting cost\n#     # The first day (day 100) is treated special\n#     accounting_cost = (daily_occupancy[days[0]]-125.0) \/ 400.0 * daily_occupancy[days[0]]**(0.5)\n#     # using the max function because the soft constraints might allow occupancy to dip below 125\n#     accounting_cost = max(0, accounting_cost)\n    \n#     # Loop over the rest of the days, keeping track of previous count\n#     yesterday_count = daily_occupancy[days[0]]\n#     for day in days[1:]:\n#         today_count = daily_occupancy[day]\n#         diff = abs(today_count - yesterday_count)\n#         accounting_cost += max(0, (daily_occupancy[day]-125.0) \/ 400.0 * daily_occupancy[day]**(0.5 + diff \/ 50.0))\n#         yesterday_count = today_count\n\n#     penalty += accounting_cost\n\n#     return penalty","07fe6dd7":"# # Start with the sample submission values\n# best = submission['assigned_day'].tolist()\n# start_score = cost_function(best)\n\n\n# new = best.copy()\n# # loop over each family\n# for fam_id, _ in enumerate(tqdm(best)):\n#     # loop over each family choice\n#     for pick in range(10):\n#         day = choice_dict[fam_id][f'choice_{pick}']\n#         temp = new.copy()\n#         temp[fam_id] = day # add in the new pick\n#         if cost_function(temp) < start_score:\n#             new = temp.copy()\n#             start_score = cost_function(new)\n\n# submission['assigned_day'] = new\n# score = cost_function(new)\n# submission.to_csv(f'submission_{score}.csv')\n# print(f'Score: {score}')","52b9034c":"## Read in the family information and sample submission","d8900cfd":"This is based on Ole's idea . The guy is genius.\n\nhttps:\/\/www.kaggle.com\/wikunia\n\nhttps:\/\/opensourc.es\/blog\/kaggle-santa-2019's ","62893a43":"also thanks to Vlamidir for idea to use lapsolver . ","501f09a9":"I will add more details in notebook . This is a starter and based on below idea from Ole. It is detailed in his blog.\n\n**Okay now my idea was that we simply put 50 families into each day and hope that it fits the hard constraint of 125\u2264Nd\u2264300. Most families have 4 people which you can also see in the Santa finances notebook so I guessed it might work.\n****\nThis is of course just a rough estimation but if 50 families would be correct for each day this would be optimal for the preference cost and we shouldn't be too bad for the accounting as the fluctuation between two days should be okay.**","da0a902f":"I will update further based on his ideas"}}