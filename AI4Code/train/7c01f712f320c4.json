{"cell_type":{"bec1d0e6":"code","0378201d":"code","9e015725":"code","435f9fe4":"code","b16655d8":"code","684c300e":"code","96408119":"code","60254578":"code","79562f68":"code","02d5244e":"code","67a10d35":"code","319e34e0":"code","80e55bec":"code","1ba7eecf":"code","b2608f8f":"code","9888cbb4":"code","303aaf04":"code","2866655d":"code","886143de":"code","291a3fe5":"markdown","4196281b":"markdown","b59be15d":"markdown","874236bb":"markdown","5218a900":"markdown","439db27d":"markdown","4ece8662":"markdown","14dd942e":"markdown","2f888b3b":"markdown","d5b686b4":"markdown","ca0bbc35":"markdown","2dc58b9b":"markdown","7cc5953d":"markdown","b474ca21":"markdown","acd2bc53":"markdown","cf1142af":"markdown","3ccadc7c":"markdown","39fc7b5d":"markdown","da8cf1b7":"markdown","25e863f4":"markdown","deb658e2":"markdown","8b6807a2":"markdown","7d03da26":"markdown","b36a2a7f":"markdown"},"source":{"bec1d0e6":"# Disable warnings in Anaconda\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Matplotlib forms basis for visualization in Python\nimport matplotlib.pyplot as plt\n\n# We will use the Seaborn library\nimport seaborn as sns\nsns.set()\n\n# Graphics in SVG format are more sharp and legible\n%config InlineBackend.figure_format = 'svg' \n\n# Increase the default plot size and set the color scheme\nplt.rcParams['figure.figsize'] = 8, 5\nplt.rcParams['image.cmap'] = 'viridis'\nimport pandas as pd","0378201d":"df = pd.read_csv('..\/input\/video_games_sales.csv').dropna()\nprint(df.shape)","9e015725":"df.info()","435f9fe4":"df['User_Score'] = df['User_Score'].astype('float64')\ndf['Year_of_Release'] = df['Year_of_Release'].astype('int64')\ndf['User_Count'] = df['User_Count'].astype('int64')\ndf['Critic_Count'] = df['Critic_Count'].astype('int64')","b16655d8":"useful_cols = ['Name', 'Platform', 'Year_of_Release', 'Genre', \n               'Global_Sales', 'Critic_Score', 'Critic_Count',\n               'User_Score', 'User_Count', 'Rating'\n              ]\ndf[useful_cols].head()","684c300e":"df[[x for x in df.columns if 'Sales' in x] + \n   ['Year_of_Release']].groupby('Year_of_Release').sum().plot();","96408119":"df[[x for x in df.columns if 'Sales' in x] + \n   ['Year_of_Release']].groupby('Year_of_Release').sum().plot(kind='bar', rot=45);","60254578":"# `pairplot()` may become very slow with the SVG format\n%config InlineBackend.figure_format = 'png' \nsns.pairplot(df[['Global_Sales', 'Critic_Score', 'Critic_Count', \n                 'User_Score', 'User_Count']]);","79562f68":"%config InlineBackend.figure_format = 'svg'\nsns.distplot(df['Critic_Score']);","02d5244e":"sns.jointplot(x='Critic_Score', y='User_Score', \n              data=df, kind='scatter');","67a10d35":"top_platforms = df['Platform'].value_counts().sort_values(ascending=False).head(5).index.values\nsns.boxplot(y=\"Platform\", x=\"Critic_Score\", \n            data=df[df['Platform'].isin(top_platforms)], orient=\"h\");","319e34e0":"platform_genre_sales = df.pivot_table(\n                        index='Platform', \n                        columns='Genre', \n                        values='Global_Sales', \n                        aggfunc=sum).fillna(0).applymap(float)\nsns.heatmap(platform_genre_sales, annot=True, fmt=\".1f\", linewidths=.5);","80e55bec":"from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly\nimport plotly.graph_objs as go\n\ninit_notebook_mode(connected=True)","1ba7eecf":"years_df = df.groupby('Year_of_Release')[['Global_Sales']].sum().join(\n    df.groupby('Year_of_Release')[['Name']].count())\nyears_df.columns = ['Global_Sales', 'Number_of_Games']","b2608f8f":"# Create a line (trace) for the global sales\ntrace0 = go.Scatter(\n    x=years_df.index,\n    y=years_df['Global_Sales'],\n    name='Global Sales'\n)\n\n# Create a line (trace) for the number of games released\ntrace1 = go.Scatter(\n    x=years_df.index,\n    y=years_df['Number_of_Games'],\n    name='Number of games released'\n)\n\n# Define the data array\ndata = [trace0, trace1]\n\n# Set the title\nlayout = {'title': 'Statistics for video games'}\n\n# Create a Figure and plot it\nfig = go.Figure(data=data, layout=layout)\niplot(fig, show_link=False)","9888cbb4":"plotly.offline.plot(fig, filename='years_stats.html', show_link=False);","303aaf04":"# Do calculations and prepare the dataset\nplatforms_df = df.groupby('Platform')[['Global_Sales']].sum().join(\n    df.groupby('Platform')[['Name']].count()\n)\nplatforms_df.columns = ['Global_Sales', 'Number_of_Games']\nplatforms_df.sort_values('Global_Sales', ascending=False, inplace=True)","2866655d":"# Create a bar for the global sales\ntrace0 = go.Bar(\n    x=platforms_df.index,\n    y=platforms_df['Global_Sales'],\n    name='Global Sales'\n)\n\n# Create a bar for the number of games released\ntrace1 = go.Bar(\n    x=platforms_df.index,\n    y=platforms_df['Number_of_Games'],\n    name='Number of games released'\n)\n\n# Get together the data and style objects\ndata = [trace0, trace1]\nlayout = {'title': 'Market share by gaming platform'}\n\n# Create a `Figure` and plot it\nfig = go.Figure(data=data, layout=layout)\niplot(fig, show_link=False)","886143de":"data = []\n\n# Create a box trace for each genre in our dataset\nfor genre in df.Genre.unique():\n    data.append(\n        go.Box(y=df[df.Genre == genre].Critic_Score, name=genre)\n    )\n    \n# Visualize\niplot(data, show_link=False)","291a3fe5":"As an option, you can save the plot in an html file:","4196281b":"Using `plotly`, you can also create other types of visualization. Even with default settings, the plots look quite nice. Additionally, the library makes it easy to modify various parameters: colors, fonts, captions, annotations, and so on.","b59be15d":"Next, print the summary of the `DataFrame` to check data types and to verify everything is non-null.","874236bb":"The resulting `DataFrame` contains 6825 examples and 16 columns. Let\u2019s look at the first few entries with the `head()` method to check that everything has been parsed correctly. To make it more convenient, I have listed only the variables that we will use in this notebook.","5218a900":"### Article outline\n\n1. [Dataset](#1.-Dataset)\n2. [DataFrame.plot](#2.-DataFrame.plot)\n3. [Seaborn](#3.-Seaborn)\n4. [Plotly](#4.-Plotly)\n5. [Demo assignment](#5.-Demo-assignment)\n6. [Useful resources](#6.-Useful-resources)","439db27d":"## 3. Seaborn\n\nNow, let's move on to the `Seaborn` library. `seaborn` is essentially a higher-level API based on the `matplotlib` library. Among other things, it differs from the latter in that it contains more adequate default settings for plotting. By adding `import seaborn as sns; sns.set()` in your code, the images of your plots will become much nicer. Also, this library contains a set of complex tools for visualization that would otherwise (i.e. when using bare `matplotlib`) require quite a large amount of code.\n\n#### pairplot()\n\nLet's take a look at the first of such complex plots, a *pairwise relationships plot*, which creates a matrix of scatter plots by default. This kind of plot helps us visualize the relationship between different variables in a single output.","4ece8662":"It is worth spending a bit more time to discuss how to interpret a box plot. Its components are a *box* (obviously, this is why it is called a *box plot*), the so-called *whiskers*, and a number of individual points (*outliers*).\n\nThe box by itself illustrates the interquartile spread of the distribution; its length determined by the $25\\% \\, (\\text{Q1})$ and $75\\% \\, (\\text{Q3})$ percentiles. The vertical line inside the box marks the median ($50\\%$) of the distribution. \n\nThe whiskers are the lines extending from the box. They represent the entire scatter of data points, specifically the points that fall within the interval $(\\text{Q1} - 1.5 \\cdot \\text{IQR}, \\text{Q3} + 1.5 \\cdot \\text{IQR})$, where $\\text{IQR} = \\text{Q3} - \\text{Q1}$ is the [interquartile range](https:\/\/en.wikipedia.org\/wiki\/Interquartile_range).\n\nOutliers that fall out of the range bounded by the whiskers are plotted individually.\n\n#### heatmap()\n\nThe last type of plot that we will cover here is a *heat map*. A heat map allows you to view the distribution of a numerical variable over two categorical ones. Let\u2019s visualize the total sales of games by genre and gaming platform.","14dd942e":"#### Box plot\n\n`plotly` also supports *box plots*. Let\u2019s consider the distribution of critics' ratings by the genre of the game.","2f888b3b":"#### Line plot\n\nFirst of all, let\u2019s build a *line plot* showing the number of games released and their sales by year.","d5b686b4":"## 5. Demo assignment\nTo practice with visual data analysis, you can complete [this assignment](https:\/\/www.kaggle.com\/kashnitsky\/a2-demo-analyzing-cardiovascular-data) where you'll be analyzing cardiovascular disease data.\n\n## 6. Useful resources\n- The same notebook as an interactive web-based [Kaggle Kernel](https:\/\/www.kaggle.com\/kashnitsky\/topic-2-part-2-seaborn-and-plotly)\n- [\"Plotly for interactive plots\"](https:\/\/nbviewer.jupyter.org\/github\/Yorko\/mlcourse.ai\/blob\/master\/jupyter_english\/tutorials\/plotly_tutorial_for_interactive_plots_sankovalev.ipynb) - a tutorial by Alexander Kovalev within mlcourse.ai (full list of tutorials is [here](https:\/\/mlcourse.ai\/tutorials))\n- [\"Bring your plots to life with Matplotlib animations\"](https:\/\/nbviewer.jupyter.org\/github\/Yorko\/mlcourse.ai\/blob\/master\/jupyter_english\/tutorials\/bring_your_plots_to_life_with_matplotlib_animations_kyriacos_kyriacou.ipynb) - a tutorial by Kyriacos Kyriacou within mlcourse.ai\n- [\"Some details on Matplotlib\"](https:\/\/nbviewer.jupyter.org\/github\/Yorko\/mlcourse.ai\/blob\/master\/jupyter_english\/tutorials\/some_details_in_matplotlib_pisarev_ivan.ipynb) - a tutorial by Ivan Pisarev within mlcourse.ai\n- Main course [site](https:\/\/mlcourse.ai), [course repo](https:\/\/github.com\/Yorko\/mlcourse.ai), and YouTube [channel](https:\/\/www.youtube.com\/watch?v=QKTuw4PNOsU&list=PLVlY_7IJCMJeRfZ68eVfEcu-UcN9BbwiX)\n- Medium [\"story\"](https:\/\/medium.com\/open-machine-learning-course\/open-machine-learning-course-topic-2-visual-data-analysis-in-python-846b989675cd) based on this notebook\n- Course materials as a [Kaggle Dataset](https:\/\/www.kaggle.com\/kashnitsky\/mlcourse)\n- If you read Russian: an [article](https:\/\/habrahabr.ru\/company\/ods\/blog\/323210\/) on Habrahabr with ~ the same material. And a [lecture](https:\/\/youtu.be\/vm63p8Od0bM) on YouTube\n- Here is the official documentation for the libraries we used: [`matplotlib`](https:\/\/matplotlib.org\/contents.html), [`seaborn`](https:\/\/seaborn.pydata.org\/introduction.html) and [`pandas`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/).\n- The [gallery](http:\/\/seaborn.pydata.org\/examples\/index.html) of sample charts created with `seaborn` is a very good resource.\n- Also, see the [documentation](http:\/\/scikit-learn.org\/stable\/modules\/manifold.html) on Manifold Learning in `scikit-learn`.\n- Efficient t-SNE implementation [Multicore-TSNE](https:\/\/github.com\/DmitryUlyanov\/Multicore-TSNE).\n- \"How to Use t-SNE Effectively\", [Distill.pub](https:\/\/distill.pub\/2016\/misread-tsne\/).","ca0bbc35":"<center>\n<img src=\"https:\/\/habrastorage.org\/files\/fd4\/502\/43d\/fd450243dd604b81b9713213a247aa20.jpg\">\n    \n## [mlcourse.ai](https:\/\/mlcourse.ai) \u2013 Open Machine Learning Course \n\nAuthor: [Egor Polusmak](https:\/\/www.linkedin.com\/in\/egor-polusmak\/). Translated and edited by Alena Sharlo, [Artem Trunov](https:\/\/www.linkedin.com\/in\/datamove), [Anastasia Manokhina](https:\/\/www.linkedin.com\/in\/anastasiamanokhina\/), and [Yuanyuan Pao](https:\/\/www.linkedin.com\/in\/yuanyuanpao\/). This material is subject to the terms and conditions of the [Creative Commons CC BY-NC-SA 4.0](https:\/\/creativecommons.org\/licenses\/by-nc-sa\/4.0\/) license. Free use is permitted for any non-commercial purpose.","2dc58b9b":"Note that the implementation of the `plot()` method in `pandas` is based on `matplotlib`.","7cc5953d":"## 1. Dataset\n\nFirst, we will set up our environment by importing all necessary libraries. We will also change the display settings to better show plots.","b474ca21":"We see that `pandas` has loaded some of the numerical features as `object` type. We will explicitly convert those columns into `float` and `int`.","acd2bc53":"#### Bar chart\n\nLet's use a *bar chart* to compare the market share of different gaming platforms broken down by the number of new releases and by total revenue.","cf1142af":"`Figure` is the main class and a work horse of visualization in `plotly`. It consists of the data (an array of lines called `traces` in this library) and the style (represented by the `layout` object). In the simplest case, you may call the `iplot` function to return only `traces`.\n\nThe `show_link` parameter toggles the visibility of the links leading to the online platform `plot.ly` in your charts. Most of the time, this functionality is not needed, so you may want to turn it off by passing `show_link=False` to prevent accidental clicks on those links.","3ccadc7c":"As you can see, the distribution histograms lie on the diagonal of the matrix. The remaining charts are scatter plots for the corresponding pairs of features.\n\n#### distplot()\n\nIt is also possible to plot a distribution of observations with `seaborn`'s `distplot()`. For example, let's look at the distribution of critics' ratings: `Critic_Score`. By default, the plot displays a histogram and the [kernel density estimate](https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation).","39fc7b5d":"Now, let\u2019s load the dataset that we will be using into a `DataFrame`. I have picked a dataset on video game sales and ratings from [Kaggle Datasets](https:\/\/www.kaggle.com\/rush4ratio\/video-game-sales-with-ratings).\nSome of the games in this dataset lack ratings; so, let\u2019s filter for only those examples that have all of their values present.","da8cf1b7":"Using the `kind` parameter, you can change the type of the plot to, for example, a *bar chart*. `matplotlib` is generally quite flexible for customizing plots. You can change almost everything in the chart, but you may need to dig into the [documentation](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.plot.html) to find the corresponding parameters. For example, the parameter `rot` is responsible for the rotation angle of ticks on the x-axis (for vertical plots):","25e863f4":"#### jointplot()\n\nTo look more closely at the relationship between two numerical variables, you can use *joint plot*, which is a cross between a scatter plot and histogram. Let's see how the `Critic_Score` and `User_Score` features are related.","deb658e2":"## 4. Plotly\n\nWe have examined some visualization tools based on the `matplotlib` library. However, this is not the only option for plotting in `Python`. Let\u2019s take a look at the `plotly` library. Plotly is an open-source library that allows creation of interactive plots within a Jupyter notebook without having to use Javascript.\n\nThe real beauty of interactive plots is that they provide a user interface for detailed data exploration. For example, you can see exact numerical values by mousing over points, hide uninteresting series from the visualization, zoom in onto a specific part of the plot, etc.\n\nBefore we start, let\u2019s import all the necessary modules and initialize `plotly` by calling the `init_notebook_mode()` function.","8b6807a2":"# <center>Topic 2. Visual data analysis in Python\n## <center>Part 2. Overview of Seaborn, Matplotlib and Plotly libraries","7d03da26":"#### boxplot()\n\nAnother useful type of plot is a *box plot*. Let's compare critics' ratings for the top 5 biggest gaming platforms.","b36a2a7f":"## 2. DataFrame.plot()\n\nBefore we turn to Seaborn and Plotly, let\u2019s discuss the simplest and often most convenient way to visualize data from a `DataFrame`: using its own `plot()` method.\n\nAs an example, we will create a plot of video game sales by country and year. First, let\u2019s keep only the columns we need. Then, we will calculate the total sales by year and call the `plot()` method on the resulting `DataFrame`."}}