{"cell_type":{"bc967644":"code","6913ce96":"code","13c3b84e":"code","b536f040":"code","6a3e4e3b":"code","4626cfe2":"code","bd98fd33":"code","0fdcd5f0":"code","912ff9ea":"code","2318ad44":"code","50e99c19":"code","d4103e31":"code","98ac7915":"code","8696c19a":"code","05850e79":"code","d3b2ebc4":"code","64a30c99":"code","a985db72":"code","3bbbb27d":"code","839a0fe4":"code","7257671a":"code","f1ac9679":"code","c7fc788c":"code","d3e8d183":"code","c7c62d01":"code","2f65106c":"code","efdab406":"code","f8105b40":"code","cd6b58c6":"code","df729746":"code","b13700dd":"code","09b202e0":"code","be05555a":"code","b1b4e3ca":"code","1a1f62f7":"code","ad15fa8e":"code","44aa5aea":"code","04babcc7":"code","316716c9":"code","7a2b96c4":"code","277fc5ad":"code","b7927b78":"code","5a2a041b":"code","c620631b":"code","d530cc55":"code","3b5fed5e":"code","34f98935":"code","86ddfe52":"code","6aaeefa5":"code","548937fc":"code","cd758160":"code","0e77f789":"code","51848ce0":"code","56855652":"code","c8ab6fe5":"code","b102a0dd":"code","0e46d740":"code","166fbca7":"code","ce4f12c6":"code","fe60f486":"code","996b9533":"code","e26baf6d":"code","aae660bf":"code","44a794c3":"code","5ee21653":"markdown","548fcc00":"markdown","25aeaae0":"markdown","0b814263":"markdown","b9168530":"markdown","6a157e47":"markdown","17291090":"markdown","5374a1bf":"markdown","faf3dbac":"markdown","1070fd1c":"markdown","48df5b07":"markdown","ca88fe1e":"markdown","274f7d5a":"markdown","01ce6a97":"markdown","04847b1a":"markdown","adc7237c":"markdown","aa748c16":"markdown","1d9e7a0c":"markdown","188a1053":"markdown","e2d07dc1":"markdown","90046c47":"markdown","6b101c2d":"markdown","6a448c17":"markdown","aa09313a":"markdown","007d618b":"markdown","bcfb1ec4":"markdown","351feeba":"markdown","194558fe":"markdown","4bf9fcb2":"markdown","151afffe":"markdown","a8d2590e":"markdown","48fa7a44":"markdown","53eb80ca":"markdown","8f88c691":"markdown","968177ae":"markdown","03a71de3":"markdown","d478dd8c":"markdown","40669feb":"markdown","9583c02b":"markdown","16266004":"markdown","4aabeea4":"markdown"},"source":{"bc967644":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6913ce96":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import RidgeCV, LassoCV, Ridge, Lasso\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nimport seaborn as sns","13c3b84e":"# definir quantidade de colunas e linhas da tab\npd.set_option('display.max_columns', 500)\npd.set_option(\"display.max_rows\", 10000)\n\n# omitir os warnings\nnp.warnings.filterwarnings('ignore')\n\n# mudar formato de n\u00famero no describe()\npd.set_option('display.float_format', lambda x: '%.4f' % x)","b536f040":"# Carregando os dados\ndf = pd.read_csv('\/kaggle\/input\/costa-rican-household-poverty-prediction\/train.csv')\nvalid = pd.read_csv('\/kaggle\/input\/costa-rican-household-poverty-prediction\/test.csv')\n\ndf.shape, valid.shape","6a3e4e3b":"# Juntando os dataframes\ndf_all = df.append(valid)\n\nprint('Linhas: ' + str(df_all.shape[0]))\nprint('Colunas: ' + str(df_all.shape[1]))","4626cfe2":"def histograma(var,linf,sup,inter=1):\n    plt.figure(figsize=(15,5))\n\n    plt.subplot(1, 2, 1)\n    base_evasao_0 = base_evasao[base_evasao['FL_EVADIDO'] == 0]\n    base_evasao_1 = base_evasao[base_evasao['FL_EVADIDO'] == 1]\n    plt.hist(base_evasao_0[var],bins=list(range(linf, sup, inter)),label='N\u00e3o evadido')\n    plt.hist(base_evasao_1[var],bins=list(range(linf, sup, inter)),label='Evadido')\n    plt.legend()\n    plt.title(var)\n\n    plt.subplot(1, 2, 2)\n    sns.boxplot(x='FL_EVADIDO',y=var, data=base_evasao)\n    plt.title(var)","bd98fd33":"def exploratoria(var):\n    print(df_all[var].describe())\n    \n    plt.figure(figsize=(10,5))\n\n    plt.subplot(1, 2, 1)\n    sns.boxplot(x='Target',y=var,data=df_all)\n    plt.title(var)\n\n    plt.subplot(1, 2, 2)\n    df_all[var].hist(bins=50)\n    plt.title(var)","0fdcd5f0":"def ks(data=None,target=None, prob=None):\n    data['target0'] = 1 - data[target]\n    data['bucket'] = pd.qcut(data[prob], 10, duplicates='drop')\n    grouped = data.groupby('bucket', as_index = False)\n    kstable = pd.DataFrame()\n    kstable['min_prob'] = grouped.min()[prob]\n    kstable['max_prob'] = grouped.max()[prob]\n    kstable['events']   = grouped.sum()[target]\n    kstable['nonevents'] = grouped.sum()['target0']\n    kstable = kstable.sort_values(by=\"min_prob\", ascending=False).reset_index(drop = True)\n    kstable['event_rate'] = (kstable.events \/ data[target].sum()).apply('{0:.2%}'.format)\n    kstable['nonevent_rate'] = (kstable.nonevents \/ data['target0'].sum()).apply('{0:.2%}'.format)\n    kstable['cum_eventrate']=(kstable.events \/ data[target].sum()).cumsum()\n    kstable['cum_noneventrate']=(kstable.nonevents \/ data['target0'].sum()).cumsum()\n    kstable['KS'] = np.round(kstable['cum_eventrate']-kstable['cum_noneventrate'], 3) * 100\n\n    #Formating\n    kstable['cum_eventrate']= kstable['cum_eventrate'].apply('{0:.2%}'.format)\n    kstable['cum_noneventrate']= kstable['cum_noneventrate'].apply('{0:.2%}'.format)\n    print(len(kstable))\n    kstable.index = range(1,len(kstable)+1)\n    kstable.index.rename('Decile', inplace=True)\n    pd.set_option('display.max_columns', 9)\n    print(kstable)\n    \n    #Display KS\n    from colorama import Fore\n    print(Fore.RED + \"KS is \" + str(max(kstable['KS']))+\"%\"+ \" at decile \" + str((kstable.index[kstable['KS']==max(kstable['KS'])][0])))\n    return(kstable)","912ff9ea":"print(df_all.columns)","2318ad44":"# Visualizar os campos que possuem valores nulos\ndf_null = df_all.isnull().sum()\ndf_null[df_all.isnull().sum() != 0]","50e99c19":"print(df_all['v2a1'].describe())\ndf_all['v2a1'].fillna(df_all['v2a1'].mean(),inplace=True)","d4103e31":"df_all['Target'] == 1","98ac7915":"print(df_all['v18q1'].mode()[0])\ndf_all['v18q1'].value_counts()","8696c19a":"df_all['v18q1'].fillna(df_all['v18q1'].mode()[0],inplace=True)","05850e79":"print(df_all['rez_esc'].mode()[0])\ndf_all['rez_esc'].value_counts()","d3b2ebc4":"df_all['rez_esc'].fillna(df_all['rez_esc'].mode()[0],inplace=True)","64a30c99":"print(df_all['meaneduc'].mean())\ndf_all['meaneduc'].describe()","a985db72":"df_all['meaneduc'].fillna(df_all['meaneduc'].mean(),inplace=True)","3bbbb27d":"print(df_all['SQBmeaned'].mean())\ndf_all['SQBmeaned'].describe()","839a0fe4":"df_all['SQBmeaned'].fillna(df_all['SQBmeaned'].mean(),inplace=True)","7257671a":"df_all['Target'].value_counts(), df_all['Target'].value_counts(normalize=True)","f1ac9679":"exploratoria('v2a1')","c7fc788c":"exploratoria('agesq')","d3e8d183":"exploratoria('SQBage')","c7c62d01":"exploratoria('SQBedjefe')","2f65106c":"exploratoria('SQBescolari')","efdab406":"exploratoria('SQBmeaned')","f8105b40":"treino = df_all[~df_all['Target'].isnull()]\nvalid = df_all[df_all['Target'].isnull()]","cd6b58c6":"'''\n# Separar os dataframes\ntreino, teste = df_all[~df_all['Target'].isnull()], df_all[df_all['Target'].isnull()]\n\ntreino.shape, teste.shape\n'''","df729746":"# Separando as colunas para treinamento\ncols = [c for c in df_all.columns if c not in ['Target','Id','idhogar','dependency','edjefe','edjefa']]","b13700dd":"y_var = treino['Target']\nx_var = treino[cols]\n#x_var = train[['v2a1','hacdor','rooms']]","09b202e0":"reg = LassoCV()\nreg.fit(x_var, y_var)\nprint(\"Best alpha using built-in LassoCV: %f\" % reg.alpha_)\nprint(\"Best score using built-in LassoCV: %f\" %reg.score(x_var,y_var))\ncoef = pd.Series(reg.coef_, index = x_var.columns)","be05555a":"print(\"Lasso picked \" + str(sum(coef != 0)) + \" variables and eliminated the other \" +  str(sum(coef == 0)) + \" variables\")","b1b4e3ca":"%%time\nimp_coef = coef.sort_values()\nimport matplotlib\nmatplotlib.rcParams['figure.figsize'] = (8.0, 10.0)\nimp_coef.plot(kind = \"barh\")\nplt.title(\"Sele\u00e7\u00e3o de vari\u00e1veis usando Regress\u00e3o LASSO - Vari\u00e1veis dummies\")","1a1f62f7":"imp_coef[abs(imp_coef) != 0]","ad15fa8e":"variaveis = sorted(imp_coef[abs(imp_coef) != 0].index)","44aa5aea":"#create a single data frame with both features and target by concatonating\nboston_df=pd.concat([x_var[variaveis], y_var], axis=1)\nboston_df.head()\n\n#Visualize corelations\nimport seaborn as sns\nplt.figure(figsize=(12,10))\nax=sns.heatmap(abs(boston_df.corr()), annot=True, cmap=sns.cubehelix_palette(20,  light=0.95, dark=0.15))\nax.xaxis.tick_top\nplt.show()","04babcc7":"x_treino, x_teste, y_treino, y_teste = train_test_split(x_var, y_var, test_size=0.20, random_state=27)","316716c9":"x_treino.shape, x_teste.shape","7a2b96c4":"metricas = pd.DataFrame()\nmetricas['modelo'] = []\nmetricas['acuracia'] = []\nmetricas['ks'] = []","277fc5ad":"cols_mod = ['v2a1','agesq','SQBage','SQBedjefe','SQBescolari','SQBmeaned']\n\ny_mod_treino = y_treino\nx_mod_treino = x_treino[cols_mod]\n\ny_mod_teste = y_teste\nx_mod_teste = x_teste[cols_mod]","b7927b78":"# Instanciar o modelo\nrf = RandomForestClassifier(n_jobs=-1, n_estimators=200, random_state=42)","5a2a041b":"# Treinando o modelo\nrf.fit(x_mod_treino, y_mod_treino)\nacuracia = rf.score(x_mod_treino, y_mod_treino)\nprint('O modelo obteve %0.4f de acur\u00e1cia.' % acuracia)","c620631b":"acuracia = rf.score(x_mod_teste, y_mod_teste)\nprint('O modelo obteve %0.4f de acur\u00e1cia.' % acuracia)","d530cc55":"y_logistic_train = rf.predict(x_mod_teste)\nprob_logistic_train = rf.predict_proba(x_mod_teste)[:,1]\n\nks_table = pd.DataFrame()\nks_table['Target'] = y_logistic_train\nks_table['PROB_LOGISTIC'] = prob_logistic_train\n\nks_logistica_train = ks(data=ks_table,target=\"Target\", prob=\"PROB_LOGISTIC\")\nks_logistica_train = ks_logistica_train['KS'].max()","3b5fed5e":"d = {'modelo': ['Random Forest'], 'acuracia': [acuracia], 'ks': [ks_logistica_train]}\ndf = pd.DataFrame(data=d)\nmetricas = metricas.append(df)\nmetricas","34f98935":"from sklearn.ensemble import GradientBoostingClassifier\n\ngbm = GradientBoostingClassifier(n_estimators=200, learning_rate=1.0, max_depth=1, random_state=42)","86ddfe52":"gbm.fit(x_mod_treino, y_mod_treino)\nacuracia = gbm.score(x_mod_treino, y_mod_treino)\nprint('O modelo obteve %0.4f de acur\u00e1cia.' % acuracia)","6aaeefa5":"acuracia = gbm.score(x_mod_teste, y_mod_teste)\nprint('O modelo obteve %0.4f de acur\u00e1cia.' % acuracia)","548937fc":"y_logistic_train = gbm.predict(x_mod_teste)\nprob_logistic_train = gbm.predict_proba(x_mod_teste)[:,1]\n\nks_table = pd.DataFrame()\nks_table['Target'] = y_logistic_train\nks_table['PROB_LOGISTIC'] = prob_logistic_train\n\nks_logistica_train = ks(data=ks_table,target=\"Target\", prob=\"PROB_LOGISTIC\")\nks_logistica_train = ks_logistica_train['KS'].max()","cd758160":"d = {'modelo': ['Gradient Boosting'], 'acuracia': [acuracia], 'ks': [ks_logistica_train]}\ndf = pd.DataFrame(data=d)\nmetricas = metricas.append(df)\nmetricas","0e77f789":"# Trabalhando com XGBoost\nfrom xgboost import XGBClassifier\n\nxgb = XGBClassifier(n_estimators=200, learning_rate=0.09, random_state=42)","51848ce0":"xgb.fit(x_mod_treino, y_mod_treino)\nacuracia = gbm.score(x_mod_treino, y_mod_treino)\nprint('O modelo obteve %0.4f de acur\u00e1cia.' % acuracia)","56855652":"acuracia = xgb.score(x_mod_teste, y_mod_teste)\nprint('O modelo obteve %0.4f de acur\u00e1cia.' % acuracia)","c8ab6fe5":"y_logistic_train = xgb.predict(x_mod_teste)\nprob_logistic_train = xgb.predict_proba(x_mod_teste)[:,1]\n\nks_table = pd.DataFrame()\nks_table['Target'] = y_logistic_train\nks_table['PROB_LOGISTIC'] = prob_logistic_train\n\nks_logistica_train = ks(data=ks_table,target=\"Target\", prob=\"PROB_LOGISTIC\")\nks_logistica_train = ks_logistica_train['KS'].max()","b102a0dd":"d = {'modelo': ['XGBoost'], 'acuracia': [acuracia], 'ks': [ks_logistica_train]}\ndf = pd.DataFrame(data=d)\nmetricas = metricas.append(df)\nmetricas","0e46d740":"# Trabalhando com AdaBoost\nfrom sklearn.ensemble import AdaBoostClassifier\n\nabc = AdaBoostClassifier(n_estimators=200, learning_rate=1.0, random_state=42)","166fbca7":"abc.fit(x_mod_treino, y_mod_treino)\nacuracia = abc.score(x_mod_treino, y_mod_treino)\nprint('O modelo obteve %0.4f de acur\u00e1cia.' % acuracia)","ce4f12c6":"#gbm.fit(x_mod_teste, y_mod_teste)\nacuracia = abc.score(x_mod_teste, y_mod_teste)\nprint('O modelo obteve %0.4f de acur\u00e1cia.' % acuracia)","fe60f486":"y_logistic_train = abc.predict(x_mod_teste)\nprob_logistic_train = abc.predict_proba(x_mod_teste)[:,1]\n\nks_table = pd.DataFrame()\nks_table['Target'] = y_logistic_train\nks_table['PROB_LOGISTIC'] = prob_logistic_train\n\nks_logistica_train = ks(data=ks_table,target=\"Target\", prob=\"PROB_LOGISTIC\")\nks_logistica_train = ks_logistica_train['KS'].max()","996b9533":"d = {'modelo': ['Adaboost'], 'acuracia': [acuracia], 'ks': [ks_logistica_train]}\ndf = pd.DataFrame(data=d)\nmetricas = metricas.append(df)\nmetricas","e26baf6d":"valid[cols_mod].isnull().sum()","aae660bf":"#%% faz predi\u00e7\u00e3o com dataframe de teste\nvalid[\"Target\"] = xgb.predict(valid[cols_mod]).astype(int)\n\nvalid[\"Target\"].value_counts(normalize=True)","44a794c3":"valid[['Id', 'Target']].to_csv('submission.csv', index=False)","5ee21653":"#### Teste","548fcc00":"#### Treino","25aeaae0":"#### KS","0b814263":"#### KS","b9168530":"SQBage (age squared)","6a157e47":"## ***AN\u00c1LISE EXPLORAT\u00d3RIA***","17291090":"#### Treino","5374a1bf":"## ***INFORMA\u00c7\u00c3O DOS DADOS***","faf3dbac":"# Adaboost","1070fd1c":"#### Treino","48df5b07":"# XGBoost","ca88fe1e":"### Matriz de correla\u00e7\u00e3o","274f7d5a":"var: v18q1","01ce6a97":"## ***CONFIGURA\u00c7\u00d5ES INICIAIS***","04847b1a":"#### KS","adc7237c":"## ***SPLIT DA BASE***","aa748c16":"## ***MODELAGEM***","1d9e7a0c":"#### Teste","188a1053":"#### Tratamento dos nulos","e2d07dc1":"# Random Forest","90046c47":"var: meaneduc","6b101c2d":"#### KS","6a448c17":"var: SQBmeaned","aa09313a":"#### Teste","007d618b":"# Gradient Boosting","bcfb1ec4":"O XGBoost foi escolhido por ter o maior ks e a maior acur\u00e1cia.","351feeba":"SQBescolari (escolari squared)","194558fe":"## ***CARREGAR OS DADOS***","4bf9fcb2":"SQBmeaned (square of the mean years of education of adults (>=18) in the household)","151afffe":"SQBedjefe (edjefe squared, edjefe: years of education of male head of household)","a8d2590e":"#### Treino","48fa7a44":"#### Teste","53eb80ca":"#### Quantidade de nulos","8f88c691":"#### Base modelagem","968177ae":"fun\u00e7\u00f5es","03a71de3":"agesq (Age squared)","d478dd8c":"v2a1 (Monthly rent payment)","40669feb":"# Base de valida\u00e7\u00e3o","9583c02b":"## ***SELE\u00c7\u00c3O DE VARI\u00c1VEIS***","16266004":"var: rez_esc","4aabeea4":"var: v2a1"}}