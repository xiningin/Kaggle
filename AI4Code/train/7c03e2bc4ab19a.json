{"cell_type":{"e9498fbe":"code","78796cfa":"code","bc137a38":"code","4f3991bb":"code","1523a6ff":"code","4558db95":"code","06c480c1":"code","9a6e2a6d":"code","19b888bc":"code","a31e4949":"code","c2f70fb2":"code","788123fa":"code","2a7dc8bc":"code","0a27e9a7":"code","85fe3fc9":"code","f8f169f6":"code","d73a986d":"code","7660a20a":"code","9b306cc1":"code","f55467a4":"code","06902e2f":"code","b960f41d":"code","2f18ac79":"code","9edaefd9":"code","a659fb92":"code","16e2c98f":"code","f733cb39":"code","d6a8a82d":"code","9f94fcc1":"code","04eb5d81":"code","65f48e25":"code","963fb2c0":"code","75e94e5b":"code","76fd4590":"markdown","70b76bca":"markdown","a16de88a":"markdown"},"source":{"e9498fbe":"from PIL import Image\nimport numpy as np\nimport os\nimport cv2\nimport keras\nfrom keras.utils import np_utils\nfrom imblearn.over_sampling import SMOTE\nfrom keras.preprocessing.image import ImageDataGenerator \nimport tensorflow.keras.layers as Layers\nimport tensorflow.keras.models as Models\nimport tensorflow.keras.optimizers as Optimizers\nimport sklearn.utils as shuffle\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom tensorflow.keras.layers import Conv2D, Dense, MaxPool2D, Flatten, LeakyReLU, BatchNormalization, Dropout, Input\nimport tensorflow as tf","78796cfa":"Images = []\nLabels = []\nParasitized = os.listdir(\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL\/\")\nfor p in Parasitized:\n    try:\n        image = cv2.imread(\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL\/\" + p)\n        images = Image.fromarray(image, 'RGB')\n        images = images.resize((150,150))\n        Images.append(np.array(images))\n        Labels.append(0)\n    except AttributeError:\n        print('')\nUninfected = os.listdir(\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\/\")\nfor u in Uninfected:\n    try:\n        image = cv2.imread(\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\/\" + u)\n        images = Image.fromarray(image, 'RGB')\n        images = images.resize((150,150))\n        Images.append(np.array(images))\n        Labels.append(1)\n    except AttributeError:\n        print('')","bc137a38":"Images = np.array(Images)\nLabels = np.array(Labels)   ","4f3991bb":"print(Images.shape)\nprint(Labels.shape)","1523a6ff":"def show_images(image, label):\n    fig = plt.figure(figsize = (10,10))\n    fig.suptitle('25 Images from the dataset' ,fontsize = 20)\n    for i in range(25):\n        index = np.random.randint(Images.shape[0])\n        plt.subplot(5,5,i+1)\n        plt.imshow(image[index])\n        plt.xticks([]) #Scale doesn't appear\n        plt.yticks([]) #Scale doesn't apper\n        plt.title((label[index]))\n        plt.grid(False)\n    plt.show()","4558db95":"show_images(Images, Labels)","06c480c1":"category = ['NORMAL', 'PNEUMONIA']\n_,count = np.unique(Labels, return_counts = True)\npd.DataFrame({'data': count}, index = category).plot.bar()\nplt.show()","9a6e2a6d":"Labels = keras.utils.to_categorical(Labels, 2)","19b888bc":"model = Models.Sequential()\nmodel.add(Layers.Conv2D(64, kernel_size = (3,3), activation = 'relu', input_shape = (150,150,3)))\nmodel.add(Layers.Conv2D(64, kernel_size = (3,3), activation = 'relu'))\nmodel.add(Layers.MaxPool2D(3,3))\nmodel.add(Layers.Dropout(0.2))\nmodel.add(Layers.Conv2D(64, kernel_size = (3,3) , activation = 'relu'))\nmodel.add(Layers.Conv2D(64, kernel_size = (3,3) , activation = 'relu'))\nmodel.add(Layers.MaxPool2D(3,3))\nmodel.add(Layers.Conv2D(64, kernel_size = (3,3) , activation = 'relu'))\nmodel.add(Layers.Conv2D(64, kernel_size = (3,3) , activation = 'relu'))\nmodel.add(Layers.MaxPool2D(3,3))\nmodel.add(Layers.Flatten())\nmodel.add(Layers.Dense(512, activation = 'relu'))\nmodel.add(Layers.Dense(256, activation = 'relu'))\nmodel.add(Layers.Dropout(0.2))\nmodel.add(Layers.Dense(2, activation = 'softmax'))\nmodel.compile(optimizer = Optimizers.RMSprop(lr=0.0001), loss = 'binary_crossentropy', metrics = ['accuracy'])\nmodel.summary()","a31e4949":"trained = model.fit(Images,Labels,epochs=30,validation_split=0.30)","c2f70fb2":"plt.plot(trained.history['accuracy'])\nplt.plot(trained.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(trained.history['loss'])\nplt.plot(trained.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","788123fa":"train_generator = ImageDataGenerator(rescale = 1\/255, zoom_range = 0.3, horizontal_flip = True, rotation_range = 30)\ntrain_generator = train_generator.flow(Images, Labels, batch_size = 64, shuffle = False)","2a7dc8bc":"history = model.fit_generator(train_generator, epochs = 30, shuffle = False)","0a27e9a7":"plt.plot(history.history['accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train'], loc='upper left')\nplt.show()","85fe3fc9":"Val_Images = []\nVal_Labels = []\nParasitized = os.listdir(\"..\/input\/chest-xray-pneumonia\/chest_xray\/val\/NORMAL\/\")\nfor p in Parasitized:\n    try:\n        image = cv2.imread(\"..\/input\/chest-xray-pneumonia\/chest_xray\/val\/NORMAL\/\" + p)\n        images = Image.fromarray(image, 'RGB')\n        images = images.resize((150,150))\n        Val_Images.append(np.array(images))\n        Val_Labels.append(0)\n    except AttributeError:\n        print('')\nUninfected = os.listdir(\"..\/input\/chest-xray-pneumonia\/chest_xray\/val\/PNEUMONIA\/\")\nfor u in Uninfected:\n    try:\n        image = cv2.imread(\"..\/input\/chest-xray-pneumonia\/chest_xray\/val\/PNEUMONIA\/\" + u)\n        images = Image.fromarray(image, 'RGB')\n        images = images.resize((150,150))\n        Val_Images.append(np.array(images))\n        Val_Labels.append(1)\n    except AttributeError:\n        print('')","f8f169f6":"Val_Images = np.array(Val_Images)\nVal_Labels = np.array(Val_Labels)","d73a986d":"print(Val_Images.shape)\nprint(Val_Labels.shape)","7660a20a":"Val_Labels = keras.utils.to_categorical(Val_Labels, 2)","9b306cc1":"test_generator = ImageDataGenerator(rescale = 1\/255)\ntest_generator = test_generator.flow(Val_Images, Val_Labels, batch_size = 64, shuffle = False)","f55467a4":"evaluate = model.evaluate(Val_Images, Val_Labels, verbose = 1)","06902e2f":"print( \"Accuracy: \"  + str(evaluate[1] * 100) + \"%\")","b960f41d":"evaluate2 = model.evaluate_generator(test_generator, verbose = 10)","2f18ac79":"print( \"Accuracy: \"  + str(evaluate2[1] * 100) + \"%\")","9edaefd9":"train_datagen=ImageDataGenerator(\n    rescale=1\/255.0,\n    rotation_range=7,\n    width_shift_range=0.5,\n    height_shift_range=0.45,\n    shear_range=0.2,\n    zoom_range=0.45,\n    horizontal_flip=True\n    \n)\ntest_datagen=ImageDataGenerator(\n    rescale=1\/255.0\n)","a659fb92":"train_set=train_datagen.flow_from_directory('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/',\n                                                 target_size=(150, 150),\n                                                 batch_size=32,\n                                                 shuffle=True,\n                                                 class_mode='binary')","16e2c98f":"val_set=test_datagen.flow_from_directory('..\/input\/chest-xray-pneumonia\/chest_xray\/val\/',\n                                         target_size=(150,150),\n                                         batch_size=32,\n                                         class_mode='binary'\n                                        )","f733cb39":"inception=tf.keras.applications.inception_v3.InceptionV3(include_top=False,input_shape=(150,150,3),weights='imagenet')\nlayer=inception.get_layer('mixed7')\nx=tf.keras.layers.Flatten()(layer.output)\nx=tf.keras.layers.Dense(units=1024,activation='relu')(x)\nx=tf.keras.layers.Dense(units=512,activation='relu')(x)\nx=tf.keras.layers.Dense(1)(x)\nout=tf.keras.layers.Activation(activation='sigmoid')(x)\nmodel=tf.keras.Model(inputs=inception.input,outputs=out)\nmodel.compile(optimizer=tf.keras.optimizers.RMSprop(lr=0.0001),loss='binary_crossentropy',metrics=['accuracy','mae'])\n","d6a8a82d":"model.summary()","9f94fcc1":"class MyThresholdCallback(tf.keras.callbacks.Callback):\n    def __init__(self, threshold):\n        super(MyThresholdCallback, self).__init__()\n        self.threshold = threshold\n\n    def on_epoch_end(self, epoch, logs=None): \n        val_acc = logs[\"val_accuracy\"]\n        if val_acc >= self.threshold:\n            self.model.stop_training = True","04eb5d81":"my_callback = MyThresholdCallback(threshold=0.93)\nhistory = model.fit_generator(train_set,\n                    epochs=30,\n                    validation_data=val_set,\n                    callbacks=[my_callback]\n                    )","65f48e25":"test_set=test_datagen.flow_from_directory('..\/input\/chest-xray-pneumonia\/chest_xray\/test\/',\n                                          target_size=(150,150),\n                                          batch_size=1,\n                                          class_mode='binary',\n                                          shuffle=False\n)","963fb2c0":"predict=model.evaluate(test_set)","75e94e5b":"print( \"Accuracy: \"  + str(predict[1] * 100) + \"%\")","76fd4590":"Imbalance class problem would have to solve it using Image Augumentation.","70b76bca":"# Data Loading","a16de88a":"# Model Building"}}