{"cell_type":{"23b93d0d":"code","34cd4c6a":"code","cbc3e577":"code","f77653a0":"code","d1f01ea4":"code","e3b7490e":"code","5ddbc022":"code","4a522b1b":"code","5ff22304":"code","45567fd4":"code","c869b6b5":"code","7d17dc7b":"code","6a351130":"code","93245920":"code","2534b3dc":"code","a3a3f1c0":"code","f71095c2":"code","45126905":"code","6c0cb4e1":"code","a18c1dbe":"code","d7f3c1bf":"code","3e0c890f":"code","00a1f11e":"code","9004687e":"markdown","fe331eb1":"markdown","ded12f38":"markdown","cf8f81f6":"markdown","b4b1bf2a":"markdown","c7012b99":"markdown","4159354e":"markdown","12604bdb":"markdown","c1d8a1fd":"markdown","351df2c6":"markdown","19e1fb30":"markdown","2d33bdab":"markdown","327a8f70":"markdown","b92d15de":"markdown","ff0de218":"markdown","7792fc74":"markdown","53201d6c":"markdown","a908b681":"markdown","e65179ef":"markdown"},"source":{"23b93d0d":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom seaborn import countplot\nimport matplotlib.pyplot as plt\nfrom keras import optimizers\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, Activation, BatchNormalization\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix","34cd4c6a":"def plot_metrics_primary(acc, val_acc, loss, val_loss):\n    fig, (ax1, ax2) = plt.subplots(1, 2, sharex='col', figsize=(20,7))\n\n    ax1.plot(acc, label='Train Accuracy')\n    ax1.plot(val_acc, label='Validation accuracy')\n    ax1.legend(loc='best')\n    ax1.set_title('Accuracy')\n\n    ax2.plot(loss, label='Train loss')\n    ax2.plot(val_loss, label='Validation loss')\n    ax2.legend(loc='best')\n    ax2.set_title('Loss')\n\n    plt.xlabel('Epochs')\n    \n    \ndef plot_confusion_matrix(cnf_matrix, labels): \n    cnf_matrix_norm = cnf_matrix.astype('float') \/ cnf_matrix.sum(axis=1)[:, np.newaxis]\n    df_cm = pd.DataFrame(cnf_matrix_norm, index=labels, columns=labels)\n    plt.figure(figsize=(20,7))\n    sns.heatmap(df_cm, annot=True, fmt='.2f', cmap=\"Blues\")","cbc3e577":"TRAIN_PATH = '..\/input\/train.csv'\nTEST_PATH = '..\/input\/test.csv'\nSUBMISSION_NAME = 'submission.csv'\n\n# Model parameters\nBATCH_SIZE = 64\nEPOCHS = 45\nLEARNING_RATE = 0.001\nHEIGHT = 28\nWIDTH = 28\nCANAL = 1\nN_CLASSES = 10","f77653a0":"train = pd.read_csv(TRAIN_PATH)\ntest = pd.read_csv(TEST_PATH)\nlabels = train['label']\ntrain = train.drop(['label'], axis=1)","d1f01ea4":"train.head(5)","e3b7490e":"train.shape","5ddbc022":"countplot(labels)","4a522b1b":"labels.value_counts()","5ff22304":"# Reshape image in 3 dimensions (height, width, canal)\ntrain = train.values.reshape(-1,HEIGHT,WIDTH,CANAL)\ntest = test.values.reshape(-1,HEIGHT,WIDTH,CANAL)\n# Turn labels into np arrays\nlabels = labels.values","45567fd4":"train.shape","c869b6b5":"for i in range(9):\n    plt.subplot(330 + (i+1))\n    plt.imshow(train[i][:,:,0], cmap=plt.get_cmap('gray'))\n    plt.tight_layout()\n    plt.title(labels[i]);","7d17dc7b":"labels = pd.get_dummies(labels).values","6a351130":"train = train \/ 255.0\ntest = test \/ 255.0","93245920":"x_train, x_val, y_train, y_val = train_test_split(train, labels, test_size=0.1, random_state=1)","2534b3dc":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False,  # randomly flip images\n        rotation_range=15,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.15, # Randomly zoom image \n        width_shift_range=0.15,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.15)  # randomly shift images vertically (fraction of total height)\n\ndatagen.fit(x_train)","a3a3f1c0":"model = Sequential()\n\nmodel.add(Conv2D(filters=32, kernel_size=(5,5),padding='Same', input_shape=(HEIGHT, WIDTH, CANAL)))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Conv2D(filters=32, kernel_size=(5,5),padding='Same'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3,3),padding='Same'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Conv2D(filters=64, kernel_size=(3,3),padding='Same'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(256))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(N_CLASSES, activation = \"softmax\"))\n\noptimizer = optimizers.adam(lr=LEARNING_RATE)\nmodel.compile(optimizer=optimizer , loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","f71095c2":"print('Dataset size: %s' % train.shape[0])\nprint('Epochs: %s' % EPOCHS)\nprint('Learning rate: %s' % LEARNING_RATE)\nprint('Batch size: %s' % BATCH_SIZE)\nprint('Input dimension: (%s, %s, %s)' % (HEIGHT, WIDTH, CANAL))","45126905":"x_train[0].shape","6c0cb4e1":"history = model.fit_generator(datagen.flow(x_train,y_train, batch_size=BATCH_SIZE),\n                              epochs=EPOCHS, validation_data=(x_val, y_val),\n                              verbose=2, steps_per_epoch=x_train.shape[0] \/\/ BATCH_SIZE)","a18c1dbe":"plot_metrics_primary(history.history['acc'], history.history['val_acc'], history.history['loss'], history.history['val_loss'])","d7f3c1bf":"cnf_matrix = confusion_matrix(np.argmax(y_val, axis=1), model.predict_classes(x_val))\nplot_confusion_matrix(cnf_matrix, range(10))","3e0c890f":"predictions = model.predict_classes(test)","00a1f11e":"submission = pd.DataFrame({\"ImageId\": list(range(1, len(predictions) + 1)), \"Label\": predictions})\nsubmission.to_csv(SUBMISSION_NAME, index=False)\nsubmission.head(10)","9004687e":"### One-hot encode the labels","fe331eb1":"### Data augmentation\n* Data augmentation is used to create more data from the current set we have, here, using the Keras API for data augmentation (ImageDataGenerator), we can generate more samples while feeding the model, the new data is created adding some noise to the real data.\n* In this case data augmentation seems to be very useful, as we saw most of the data seems to be the original one but with a bit of distortion.","ded12f38":"### Auxiliar functions","cf8f81f6":"### Normalize data\n* Normalizing data should improve our model convergence time.","b4b1bf2a":"As we can see we have 42000 records on the train data, and our data is just a bunch of pixels (784 per image to be more exactly), each image comes as a 28x28 matrix of pixels.\n\nLet's take a look at our train data by label category.","c7012b99":"### Parameters","4159354e":"### Split data in train and validation (90% ~ 10%)","12604bdb":"A good way to evaluate a classification model is to take a look at the model confusion matrix, this way we can have a better insight on what our model is getting right and what not.","c1d8a1fd":"It seems we had pretty good results, we don't have any big confusion between labels, nice!\n\nFinally let's predict the test data and output our predictions.","351df2c6":"### Load data","19e1fb30":"We have less labels 5 but luckily we won't have to deal with highly imbalanced data, this will make our work easier.","2d33bdab":"### Dependencies","327a8f70":"### Model","b92d15de":"For a human label these would be a easy task, but can our model perform well enought?","ff0de218":"### Reshape data","7792fc74":"Let's take a look at our model loss and accuracy training graph.","53201d6c":"Would be better to visualize some of the records as a images.","a908b681":"Let's take a look at our model parameters:","e65179ef":"### Let's take a look at the data"}}