{"cell_type":{"36f9dbeb":"code","a82a625c":"code","df340d81":"code","5cab980b":"code","742a0d84":"code","d34a5fc5":"code","83c6f0d2":"code","ef8a7629":"code","1db8ab5b":"code","ca1e301e":"code","03739511":"code","7bf3cac1":"code","88ad6796":"code","677e3b07":"code","f8ac14c6":"code","54cbfd47":"code","3964d8c6":"code","e1f69130":"code","39802848":"code","f5354bd0":"code","291bbe9a":"code","f1a88b9c":"code","29fd544a":"code","2d95a962":"code","aef5a5a2":"code","c5bb2c57":"code","9a6b94f3":"code","1a3631a3":"code","f0debf85":"code","232ec1e7":"code","0c283a1f":"code","a7bfc6be":"markdown","5fee784f":"markdown"},"source":{"36f9dbeb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a82a625c":"import cv2\n\nX_img = []\ny_p = []\ndef create_training_set(label, path):\n    img = cv2.imread(path, cv2.IMREAD_COLOR)\n    img = cv2.resize(img, (150,150))\n    X_img.append(np.array(img))\n    y_p.append(str(label))","df340d81":"df_train = pd.read_csv('..\/input\/train.csv')","5cab980b":"X = df_train['id_code']\ny = df_train['diagnosis']","742a0d84":"from tqdm import tqdm\n\nTRAIN_DIR = '..\/input\/train_images'\nfor id_code, diagnosis in tqdm(zip(X,y)):\n    path = os.path.join(TRAIN_DIR, '{}.png'.format(id_code))\n    create_training_set(diagnosis, path)","d34a5fc5":"from keras.utils import to_categorical\n\nY = to_categorical(y_p)\nX= np.array(X_img)\nX=X\/255","83c6f0d2":"from keras.preprocessing.image import ImageDataGenerator\n\nfeat_extraction = ImageDataGenerator(\n    featurewise_center=True,\n    featurewise_std_normalization=True,\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True)\n\n# compute quantities required for featurewise normalization\n# (std, mean, and principal components if ZCA whitening is applied)\nfeat_extraction.fit(X)","ef8a7629":"from sklearn.model_selection import train_test_split\n\nX_train, X_valid, Y_train, Y_valid = train_test_split(X, Y, test_size=0.2, random_state=22)\n\n    ","1db8ab5b":"y.hist()","ca1e301e":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization, GlobalAveragePooling2D\nfrom keras.layers import Dropout, Flatten, Dense, GaussianDropout\nfrom keras.constraints import maxnorm\nfrom keras import regularizers, optimizers\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters=16, kernel_size=2, padding='same', activation='relu', input_shape=(150,150,3)))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=32, kernel_size=2, padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=64, kernel_size=2, padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(GlobalAveragePooling2D())\n\nmodel.add(Dense(5, activation='softmax'))\n","03739511":"model.summary()","7bf3cac1":"from keras.optimizers import Adam, SGD, Adagrad, Adadelta, RMSprop\n\nmodel.compile(optimizer= Adam(lr=0.001), loss='categorical_crossentropy', metrics=['accuracy'])","88ad6796":"batch_size =50\nepochs= 50","677e3b07":"from keras.callbacks import ModelCheckpoint\n\ncheckpointer =  ModelCheckpoint(filepath= 'CNN_keras.hdf5', verbose=1, save_best_only=True)\n\n#model_history = model.fit_generator(feat_extraction.flow(X_train, Y_train, batch_size=batch_size),\n #        epochs= epochs, validation_data=feat_extraction.flow(X_valid, Y_valid, batch_size= batch_size),\n  #       callbacks= [checkpointer], verbose=1, steps_per_epoch=X_train.shape[0]\/\/batch_size, validation_steps=X_train.shape[0]\/\/batch_size )\n\n\nmodel_history=model.fit(X_train, Y_train, \n          validation_data=(X_valid, Y_valid),\n          epochs=epochs, batch_size=batch_size, callbacks=[checkpointer], verbose=1)\n\n\n","f8ac14c6":"import matplotlib.pyplot as plt\n# list all data in history\nprint(model_history.history.keys())\n# summarize history for accuracy\nplt.plot(model_history.history['acc'])\nplt.plot(model_history.history['val_acc'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(model_history.history['loss'])\nplt.plot(model_history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()","54cbfd47":"os.listdir('..\/input\/test_images\/')[0:5]","3964d8c6":"test_image = cv2.imread('..\/input\/test_images\/3d4d693f7983.png', cv2.IMREAD_COLOR)\ntest_image = cv2.resize(test_image, (150,150))\nimport matplotlib.pyplot as plt\n\nplt.imshow(test_image)","e1f69130":"test_X = np.array(test_image)\ntest_X = test_X\/255","39802848":"pred_test= model.predict(np.expand_dims(test_X,axis=0))","f5354bd0":"pred_test","291bbe9a":"test_df = pd.read_csv('..\/input\/test.csv')\ntest_df.head()","f1a88b9c":"test_ids = test_df['id_code']","29fd544a":"test_images = []\ndef create_test_set(path):\n    img = cv2.imread(path,cv2.IMREAD_COLOR)\n    img = cv2.resize(img, (150,150))\n\n    test_images.append(np.array(img))","2d95a962":"from tqdm import tqdm\nfor id_code in tqdm(test_ids):\n    path = os.path.join('..\/input\/test_images','{}.png'.format(id_code))\n    create_test_set(path)","aef5a5a2":"from keras.models import load_model\nmodel=load_model('CNN_keras.hdf5')","c5bb2c57":"test_X=np.array(test_images)\ntest_X=test_X\/255\nfeat_extraction.fit(test_X)\npredictions=model.predict(test_X)","9a6b94f3":"pred = np.argmax(predictions, axis=1)\npred","1a3631a3":"np.unique(pred)","f0debf85":"submission_cnn = pd.DataFrame({'id_code' : test_ids , 'diagnosis' : pred})","232ec1e7":"submission_cnn.head()","0c283a1f":"submission_cnn.to_csv(\"submission.csv\",index=False)","a7bfc6be":"#Modelling","5fee784f":"Feature Extraction"}}