{"cell_type":{"ef34e3c8":"code","2a201d58":"code","f66d1c1b":"code","4146befe":"code","a906d052":"code","c81348d1":"code","97bac76f":"code","0be9a3aa":"code","870f1fa6":"code","0800398b":"code","2df8b9d0":"code","099bbd10":"code","e040b2c2":"code","4140d361":"code","3656d73f":"code","0f50c492":"code","54058762":"code","3fe20838":"code","fe63ceca":"code","14d4c48f":"code","fe0f3052":"code","1b22d143":"code","604906b0":"code","04835be6":"code","de70c1fc":"code","20ecb24c":"code","2f219109":"code","35efe3f8":"code","28ad4f74":"code","3a993f56":"code","086a4201":"code","2a7db489":"code","352f56c4":"code","4dec4de7":"code","f1b1ca47":"code","fde404ae":"code","024e6b2b":"code","b64926b6":"code","f5b27f19":"code","4f3e83e1":"code","c5ad3698":"code","9405ca0b":"code","d618173b":"code","0de328cd":"code","5bd05464":"code","a5dc565e":"code","bd0a57c4":"code","0953fa8a":"code","96bde985":"code","f04b9287":"markdown","b5983fa7":"markdown","cdef511f":"markdown","ea234aad":"markdown","ff522c1e":"markdown","63e9b072":"markdown","9aa2ee83":"markdown","5f7cdefc":"markdown","8b59c5d8":"markdown","25884696":"markdown","92c38e36":"markdown"},"source":{"ef34e3c8":"import numpy as np \nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2a201d58":"#data.head() is provides outputs the first 5 lines of code to us\ndata = pd.read_csv(\"..\/input\/pyhton-exercises\/iris.csv\")\ndata.head()","f66d1c1b":"# tail shows last 5 rows\ndata.tail()","4146befe":"#This code gives us columns of names and features.\ndata.columns","a906d052":"# shape gives number of rows and columns in a tuble\ndata.shape","c81348d1":"# info gives data type like dataframe,\n#number of sample or row, number of feature or column,\n#feature types and memory usage\n\ndata.info()","97bac76f":"#if we want to look frequency of iris types\nprint(data.value_counts(dropna = False))","0be9a3aa":"data.describe()","870f1fa6":"#visual exploratory data analysis\ndata.boxplot(column = \"SepalWidthCm\",by = \"PetalLengthCm\")","0800398b":"melted = pd.melt(frame=data,id_vars = 'Id', value_vars= ['SepalWidthCm','SepalWidthCm'])\nmelted","2df8b9d0":"melted.pivot(index = 'Id', columns = 'variable',values='value')","099bbd10":"data1 = data.head()\ndata2= data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_data_row","e040b2c2":"data1 = data['SepalLengthCm'].head()\ndata2= data['SepalWidthCm'].head()\nconc_data_col = pd.concat([data1,data2],axis =1) # axis = 1 : adds dataframes in column\nconc_data_col","4140d361":"data.dtypes","3656d73f":"data['Id'] = data['Id'].astype('int')\ndata.dtypes","0f50c492":"data.info()","54058762":"data[\"SepalLengthCm\"].value_counts(dropna =False)","3fe20838":"# Lets drop nan values\ndata1=data   # also we will use data to fill missing value so I assign it to data1 variable\ndata1[\"SepalLengthCm\"].dropna(inplace = True)  # inplace = True means we do not assign it to new variable. Changes automatically assigned to data\n# So does it work ?","fe63ceca":"#  Lets check with assert statement\n# Assert statement:\nassert 1==1 # return nothing because it is true","14d4c48f":"country = [\"Turkey\",\"Germany\"]\ncountryCode = [\"+90\",\"+49\"]\nlabelList = [\"country\",\"countryCode\"]\nlistCol = [country,countryCode]\nzipFormat = list(zip(labelList,listCol))\ndataDic = dict(zipFormat)\ndf = pd.DataFrame(dataDic)\ndf","fe0f3052":"#for adding new columns \ndf[\"capital\"] = [\"Ankara\",\"Berlin\"]\ndf","1b22d143":"df[\"enflationValue\"] = [\"82.81%\",\"0.5%\"]\ndf","604906b0":"data1 = data.loc[:,[\"SepalLengthCm\",\"SepalWidthCm\",\"PetalLengthCm\",\"PetalWidthCm\"]]\ndata1.plot()","04835be6":"data1.plot(subplots = True)","de70c1fc":"data1.plot(kind = \"scatter\",x=\"PetalLengthCm\",y = \"PetalWidthCm\")\nplt.show()","20ecb24c":"data1.plot(kind = \"hist\",y = \"PetalLengthCm\",bins = 50,range= (0,250))","2f219109":"fig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"PetalLengthCm\",bins = 50,range= (0,250),ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"PetalLengthCm\",bins = 50,range= (0,250),ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","35efe3f8":"data.describe()","28ad4f74":"#indexing pandas time series\ntime_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) \ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","3a993f56":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\ndata2 = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\ndata2= data2.set_index(\"date\")\ndata2 ","086a4201":"print(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","2a7db489":"data2.resample(\"A\").mean()","352f56c4":"data2.resample(\"M\").mean()","4dec4de7":"data2.resample(\"M\").first().interpolate(\"linear\")","f1b1ca47":"data2.resample(\"M\").mean().interpolate(\"linear\")","fde404ae":"data = pd.read_csv('..\/input\/pyhton-exercises\/iris.csv')\ndata= data.set_index(\"Id\")\ndata.head()","024e6b2b":"data[[\"SepalLengthCm\",\"SepalWidthCm\"]]","b64926b6":"data.loc[1:10,\"SepalLengthCm\":\"SepalWidthCm\"]","f5b27f19":"#reverse version\ndata.loc[10:1:-1,\"SepalLengthCm\":\"SepalWidthCm\"]","4f3e83e1":"boolean = data.SepalLengthCm > 5.2\ndata[boolean]","c5ad3698":"def square(n):\n    return n**2\ndata.SepalLengthCm.apply(square)","9405ca0b":"#we can use lambda function via square function which is much easier.","d618173b":"data1 = data.set_index([\"SepalLengthCm\",\"PetalLengthCm\"]) \ndata1.head(100)","0de328cd":"dic = {\"names\": [\"student1\",\"student2\",\"student3\"],\"gender\": [\"F\",\"M\",\"F\"],\"country\":[\"Turkey\",\"Spain\",\"America\"]}\ndf = pd.DataFrame(dic)\ndf","5bd05464":"df.pivot(index = \"names\",columns = \"gender\",values = \"country\")","a5dc565e":"df1 = df.set_index([\"names\",\"gender\"])\ndf1","bd0a57c4":"# level determines indexes\ndf1.unstack(level=0)","0953fa8a":"pd.melt(df,id_vars=\"names\",value_vars=[\"country\",\"gender\"])","96bde985":"df.info()","f04b9287":"MISSING DATA and TESTING WITH ASSERT","b5983fa7":"DATA TYPES","cdef511f":"pivoting data frames","ea234aad":"DATA ANALYSIS\n","ff522c1e":"PIVOTING DATA\n","63e9b072":"TIDY DATA","9aa2ee83":"VISUAL EXPLORATORY DATA ANALYSIS","5f7cdefc":"\nCONCATENATING DATA","8b59c5d8":"**DIAGNOSE DATA FOR CLEANING**","25884696":"transforming data","92c38e36":"hierarchical indexing"}}