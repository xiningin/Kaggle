{"cell_type":{"79e92695":"code","0243bb9f":"code","27ba7c57":"code","75b51da3":"code","ec6776d5":"code","6f2f250d":"code","c45bcd53":"code","9390d67d":"code","11fd67c9":"code","08a440f7":"code","2b2ae4b2":"code","0f14bdd5":"code","11184380":"code","86022874":"code","2c9d7aa0":"code","78479922":"code","50b52b57":"code","752933bd":"code","da6d69f0":"code","0958c4c1":"code","d36c5ab5":"code","24131146":"code","efe4d467":"code","690c69be":"code","0be8de0c":"code","fa736c71":"code","4a418a3d":"code","fd385fbe":"code","8f384e9c":"code","e4bbb496":"code","4557a51c":"code","0a01de16":"code","68aad3de":"code","73253400":"code","a38d9804":"code","c298566c":"code","4f3bc295":"code","2e9c34ec":"code","8dcf193e":"code","fbff4692":"code","97a9865f":"code","7563e789":"code","699f15b5":"code","b15e8c90":"code","1dff94df":"code","8b7453d6":"code","3b85a7ab":"code","5aeddf76":"code","4fdab6b7":"code","9e66400e":"code","6863784e":"code","67ed3390":"code","454104b6":"code","ad5013b4":"code","73edb7e0":"code","7011d683":"markdown","44b25a63":"markdown","09b10895":"markdown","708ab927":"markdown","3ebc5a52":"markdown","d9d5a3a1":"markdown","e4f735f1":"markdown","4efae315":"markdown","c0d2db66":"markdown","8fd329cc":"markdown","4bd937c4":"markdown","ba8610fd":"markdown","2f9eb19f":"markdown","5a04cbdc":"markdown","7a5f8796":"markdown","031079f1":"markdown","1d3df05e":"markdown","aaaf24c2":"markdown","19cdc062":"markdown","ca28df75":"markdown","88b85833":"markdown","02809199":"markdown","12481565":"markdown","a0680ad0":"markdown","1e59d04b":"markdown","a76ddf5f":"markdown","3914d8cc":"markdown","2a9e94b9":"markdown","fe028729":"markdown","5506b32a":"markdown","400ca833":"markdown","6c3607cc":"markdown","2d72554b":"markdown","8c49722c":"markdown","baf160ac":"markdown","751061c0":"markdown","ccef0377":"markdown","ff30f636":"markdown","9b3b9b42":"markdown","b6d8379d":"markdown","8e75f592":"markdown","2fc524de":"markdown","a12b6e13":"markdown","c41a8095":"markdown","fb73b795":"markdown"},"source":{"79e92695":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Disabling warnings\nimport warnings\nwarnings.simplefilter(\"ignore\")","0243bb9f":"import os\nprint(os.listdir('..\/input\/titanic'))","27ba7c57":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","75b51da3":"# data size\nprint(\"Train Data Size: \", train_df.shape)\nprint(\"Test Data Size:  \", test_df.shape)","ec6776d5":"combine = [train_df, test_df]\nprint(train_df.columns.values)","6f2f250d":"# preview the data\ntrain_df.head()","c45bcd53":"train_df.tail()","9390d67d":"# Show if any NAN data\ntrain_df.isnull().sum()","11fd67c9":"test_df.isnull().sum()","08a440f7":"train_df.info()","2b2ae4b2":"test_df.info()","0f14bdd5":"train_df.describe()","11184380":"\ntrain_df.describe(include=['O'])","86022874":"train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)\n","2c9d7aa0":"train_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)\n","78479922":"train_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)\n","50b52b57":"train_df[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)\n","752933bd":"sns.countplot(x='Survived', hue='Sex', data=train_df)\n","da6d69f0":"g = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","0958c4c1":"grid = sns.FacetGrid(train_df, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","d36c5ab5":"# grid = sns.FacetGrid(train_df, col='Embarked')\ngrid = sns.FacetGrid(train_df, row='Embarked', size=2.2, aspect=1.6)\ngrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')\ngrid.add_legend()","24131146":"# grid = sns.FacetGrid(train_df, col='Embarked', hue='Survived', palette={0: 'k', 1: 'w'})\ngrid = sns.FacetGrid(train_df, row='Embarked', col='Survived', size=2.2, aspect=1.6)\ngrid.map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)\ngrid.add_legend()","efe4d467":"\nprint(\"Before\", train_df.shape, test_df.shape, combine[0].shape, combine[1].shape)\n\n\ntrain_df = train_df.drop(['Ticket', 'Cabin'], axis=1)\ntest_df = test_df.drop(['Ticket', 'Cabin'], axis=1)\ncombine = [train_df, test_df]\n\n\"After\", train_df.shape, test_df.shape, combine[0].shape, combine[1].shape","690c69be":"for dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(train_df['Title'], train_df['Sex'])","0be8de0c":"for dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    \ntrain_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","fa736c71":"title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n\ntrain_df.head()","4a418a3d":"train_df = train_df.drop(['Name', 'PassengerId'], axis=1)\ntest_df = test_df.drop(['Name'], axis=1)\ncombine = [train_df, test_df]\ntrain_df.shape, test_df.shape","fd385fbe":"for dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n\ntrain_df.head()","8f384e9c":"# grid = sns.FacetGrid(train_df, col='Pclass', hue='Gender')\ngrid = sns.FacetGrid(train_df, row='Pclass', col='Sex', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend()","e4bbb496":"\nguess_ages = np.zeros((2,3))\nguess_ages","4557a51c":"for dataset in combine:\n    for i in range(0, 2):\n        for j in range(0, 3):\n            guess_df = dataset[(dataset['Sex'] == i) & (dataset['Pclass'] == j+1)]['Age'].dropna()\n\n            # age_mean = guess_df.mean()\n            # age_std = guess_df.std()\n            # age_guess = rnd.uniform(age_mean - age_std, age_mean + age_std)\n\n            age_guess = guess_df.median()\n\n            # Convert random age float to nearest .5 age\n            guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n            \n    for i in range(0, 2):\n        for j in range(0, 3):\n            dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),\\\n                    'Age'] = guess_ages[i,j]\n\n    dataset['Age'] = dataset['Age'].astype(int)\n\ntrain_df.head()","0a01de16":"train_df['AgeBand'] = pd.cut(train_df['Age'], 5)\ntrain_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)","68aad3de":"for dataset in combine:    \n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age']\ntrain_df.head()","73253400":"train_df = train_df.drop(['AgeBand'], axis=1)\ncombine = [train_df, test_df]\ntrain_df.head()","a38d9804":"for dataset in combine:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n\ntrain_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)","c298566c":"for dataset in combine:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n\ntrain_df[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()","4f3bc295":"train_df = train_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ntest_df = test_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ncombine = [train_df, test_df]\n\ntrain_df.head()","2e9c34ec":"for dataset in combine:\n    dataset['Age*Class'] = dataset.Age * dataset.Pclass\n\ntrain_df.loc[:, ['Age*Class', 'Age', 'Pclass']].head(10)","8dcf193e":"freq_port = train_df.Embarked.dropna().mode()[0]\nfreq_port","fbff4692":"for dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n    \ntrain_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)","97a9865f":"for dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ntrain_df.head()","7563e789":"\ntest_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace=True)\ntest_df.head()","699f15b5":"train_df['FareBand'] = pd.qcut(train_df['Fare'], 4)\ntrain_df[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)","b15e8c90":"for dataset in combine:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\ntrain_df = train_df.drop(['FareBand'], axis=1)\ncombine = [train_df, test_df]\n    \ntrain_df.head(10)","1dff94df":"test_df.head(10)\n","8b7453d6":"X_train = train_df.drop(\"Survived\", axis=1)\nY_train = train_df[\"Survived\"]\nX_test  = test_df.drop(\"PassengerId\", axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape","3b85a7ab":"# Logistic Regression\n\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_log","5aeddf76":"coeff_df = pd.DataFrame(train_df.columns.delete(0))\ncoeff_df.columns = ['Feature']\ncoeff_df[\"Correlation\"] = pd.Series(logreg.coef_[0])\n\ncoeff_df.sort_values(by='Correlation', ascending=False)","4fdab6b7":"\n# Support Vector Machines\n\nsvc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train) * 100, 2)\nacc_svc","9e66400e":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn","6863784e":"# Decision Tree\n\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","67ed3390":"\n# Random Forest\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","454104b6":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest','Decision Tree'],\n    'Score': [acc_svc, acc_knn, acc_log, \n              acc_random_forest,acc_decision_tree]})\nmodels.sort_values(by='Score', ascending=False)","ad5013b4":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nsubmission.head()","73edb7e0":"submission.to_csv('_submission.csv', index=False)\n","7011d683":"#### Correlating categorical and numerical features\n\nObservations.\n\n- Higher fare paying passengers had better survival.\n- Port of embarkation correlates with survival rates.\n\nDecisions.\n\n- Consider banding Fare feature.","44b25a63":" We can not remove the AgeBand feature.","09b10895":"- Ticket is a mix of numeric and alphanumeric data types.\n- Cabin is alphanumeric.\n- Name feature may contain errors or typos as there are several ways used to describe a name.","708ab927":"We can replace many titles with a more common name or classify them as Rare.\n\n","3ebc5a52":"# Reading Data\nCombining these datasets to run certain operations on both datasets together","d9d5a3a1":"Now droping the Name feature from training and testing datasets and PassengerId feature in the training dataset.\n\n","e4f735f1":"# Support Vector Machines","4efae315":" Convert the Fare feature to ordinal values based on the FareBand.\n\n","c0d2db66":"# Visulizing Data\n\nCorrelating numerical features\u00b6\nObservations.\n\n- Infants (Age <=4) had high survival rate.\n- Oldest passengers (Age = 80) survived.\n- Large number of 15-25 year olds did not survive.\n- Most passengers are in 15-35 age range.\n\nDecisions.\n\n- We should consider Age in our model training.\n- Complete the Age feature for null values .\n- We should band age groups.","8fd329cc":"# Analyze by describing data\nChecking which features are available in the dataset","4bd937c4":"Now iterating over Sex (0 or 1) and Pclass (1, 2, 3) to calculate guessed values of Age for the six combinations","ba8610fd":"# Submitting\n","2f9eb19f":"#### Correlating categorical features\nNow we can correlate categorical features with our solution goal.\n\nObservations.\n\n- Female passengers had much better survival rate than males.\n- Exception in Embarked=C where males had higher survival rate. This could be a correlation between Pclass and Embarked and in turn Pclass and Survived, not necessarily direct correlation between Embarked and Survived.\n- Males had better survival rate in Pclass=3 when compared with Pclass=2 for C and Q ports.\n- Ports of embarkation have varying survival rates for Pclass=3 and among male passengers.\n\nDecisions.\n\n- Add Sex feature to model training.\n- Complete and add Embarked feature to model training.","5a04cbdc":"# Correcting \n- Dropping features\n\nWe want to drop the Cabin and Ticket features","7a5f8796":"We can also create an artificial feature combining Pclass and Age.","031079f1":"We can not create FareBand.","1d3df05e":"Empty array to contain guessed Age values based on Pclass x Gender combinations.","aaaf24c2":"# k-Nearest Neighbors algorithm","19cdc062":"- Cabin & Age: Embarked features contain a number of null values in that order for the training dataset.\n\n- Cabin: Age are incomplete in case of test dataset.\n\n- Seven features are integer OR floats. Six in case of test dataset.\n\n- Five features are strings (object).","ca28df75":"### Completing a categorical feature\u00b6\nEmbarked feature takes S, Q, C values based on port of embarkation.The Training dataset has two missing values. Simply filling these with the most common occurance","88b85833":"\n## Model, predict and solve\n \n for Supervised Learning plus Classification and Regression, our choice of models to are:\n\n- Logistic Regression\n- KNN or k-Nearest Neighbors\n- Support Vector Machines\n- Decision Tree\n- Random Forrest\n","02809199":"# Model evaluation\n","12481565":"\nLet us replace Age with ordinals based on these bands.","a0680ad0":" # Random Forests\n The model confidence score is the highest among models evaluated so far. So will use this model's output (Y_pred) for creating    competition submission of results.\n\n","1e59d04b":"\nLet us create Age bands and determine correlations with Survived.","a76ddf5f":" # Create new feature combining existing features\n Creating new feature for FamilySize = Parch + SibSp. to drop Parch and SibSp from our datasets.\n\n\n","3914d8cc":"Droping Parch, SibSp, and FamilySize features in favor of IsAlone.","2a9e94b9":"# Decision tree","fe028729":"While both Decision Tree and Random Forest score the same, we choose to use Random Forest as they correct for decision trees' habit of overfitting to their training set.","5506b32a":"Creating another feature called IsAlone.","400ca833":"### Converting a categorical feature\n\nStarting by converting Sex feature to a new feature called Gender where female=1 and male=0.","6c3607cc":"We can convert the categorical titles to ordinal.\n\n","2d72554b":"# Analyze by pivoting features\nquickly analyzing feature correlations by pivoting features against each other.At this stage can be done for features which do not have any empty values. It also makes sense doing so only for features which are categorical (Sex), ordinal (Pclass) or discrete (SibSp, Parch) type.\n\nPclass significant correlation (>0.5) among Pclass=1 and Survived.\nSex Sex=female had very high survival rate at 74%","8c49722c":"\n- Sex is highest positivie coefficient,\n- Inversely as Pclass increases, probability of Survived=1 decreases the most.\n- This way Age*Class is a good artificial feature to model as it has second highest negative correlation with Survived","baf160ac":"Note:\n    The model confidence score is the highest among models evaluated so far.\n\n","751061c0":"### After Checking the data we note there 2 types of columns:\n- Categorical: Survived, Sex, and Embarked. Ordinal: Pclass\n- Continous: Age, Fare. Discrete: SibSp, Parch.","ccef0377":"# Wrangle data\u00b6\n\n- Now executing our decisions and assumptions for correcting\n- Creating, and completing goals.\n\n\n","ff30f636":"# Logistic regression\u00b6\n","9b3b9b42":"### Completing a numerical continuous feature\u00b6\nNow estimating and completing features with missing or null values.first doing this for the Age feature.\n\nThere is correlation among Age, Gender, and Pclass. So Guess Age values using median values for Age across sets of Pclass and Gender feature combinations. So, median Age for Pclass=1 and Gender=0, Pclass=1 and Gender=1, and so on\n","b6d8379d":" And the test dataset.\n\n","8e75f592":" ### Quick completing and converting a numeric feature\u00b6\n We may also want round off the fare to two decimals as it represents currency.\n\n","2fc524de":"## Converting categorical feature to numeric\nNow converting the EmbarkedFill feature by creating a new numeric Port feature.","a12b6e13":"Note:\n\nKNN confidence score is better than Logistics Regression but worse than SVM.\n\n","c41a8095":"#### Creating new feature extracting from existing\u00b6\nIn the following code we extract Title feature using regular expressions. The RegEx pattern (\\w+\\.) matches the first word which ends with a dot character within Name feature. The expand=False flag returns a DataFrame.\n\nWhen I plot Title, Age, and Survived, we note the following observations.\n\n- Most titles band Age groups accurately. For example: Master title has Age mean of 5 years.\n- Survival among Title Age bands varies slightly.\n- Certain titles mostly survived (Mme, Lady, Sir) or did not (Don, Rev, Jonkheer).\n- So I have decided to retain the new Title feature for model training.","fb73b795":"#### Correlating numerical and ordinal features\nCombining multiple features for identifying correlations using a single plot. This can be done with numerical and categorical features which have numeric values.\n\nObservations.\n\n- Pclass=3 had most passengers, however most did not survive\n- Infant passengers in Pclass=2 and Pclass=3 mostly survived.\n- Most passengers in Pclass=1 survived.\n- Pclass varies in terms of Age distribution of passengers.\n\nDecisions.\n\n- Consider Pclass for model training"}}