{"cell_type":{"4a15eb37":"code","2fde3e82":"code","272ee0c6":"code","478bcc01":"code","979ab817":"code","ce0f2cdf":"code","62a542db":"code","1cc10faf":"code","30e9a7f6":"code","e74fe150":"code","a6be5789":"code","a8196eb5":"code","36a2a836":"code","de794ee8":"code","294dd50d":"code","417cd4b2":"code","bf4cd4ef":"code","53c6b8aa":"code","4c7b0c54":"code","966af546":"markdown","a2ee1136":"markdown","da24afc1":"markdown","a328fa08":"markdown","fe155b90":"markdown"},"source":{"4a15eb37":"import sys\n\nimport numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nplt.rcParams.update({'font.size':13})\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.ensemble import RandomForestRegressor as RFR\nfrom sklearn.metrics import mean_absolute_error as mae\n\nimport gc\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","2fde3e82":"class NBConfig:\n    general = {\n        \"seed\": 2021,\n        \"folds\": 5\n    }\n    method = {\n        \"jobs\": 4, \n        \"criterion\": \"mse\",\n        \"samples\": 0.7,\n        \"feat_frac\": 0.6,\n        \"depth\": 20,\n        \"n_trees\": 222,\n        \"leafSize\": 1,\n        \"costs\": 0.0\n    }","272ee0c6":"trainpath = \"..\/input\/ventilator-pressure-prediction\/train.csv\"\ntestpath = \"..\/input\/ventilator-pressure-prediction\/test.csv\"\nsamsubpath = \"..\/input\/ventilator-pressure-prediction\/sample_submission.csv\"\ntrain, test, samSub = pd.read_csv(trainpath, index_col=\"id\"), pd.read_csv(testpath, index_col=\"id\"), pd.read_csv(samsubpath)","478bcc01":"print(\"train shape is: \" + str(train.shape))\nprint(\"test shape is: \" + str(test.shape))","979ab817":"train.tail()","ce0f2cdf":"train.describe()","62a542db":"train[\"timeDiff\"] = train[\"time_step\"].groupby(train[\"breath_id\"]).diff(1).fillna(-1)\ntest[\"timeDiff\"] = test[\"time_step\"].groupby(test[\"breath_id\"]).diff(1).fillna(-1)","1cc10faf":"train[\"maxu_in\"] = train[[\"breath_id\", \"u_in\"]].groupby(\"breath_id\").transform(\"max\")[\"u_in\"]\ntest[\"maxu_in\"] = test[[\"breath_id\", \"u_in\"]].groupby(\"breath_id\").transform(\"max\")[\"u_in\"]","30e9a7f6":"def ByBreath(method: str, DF, lags=None, center=False, fillNas=-1):\n\n    output = pd.DataFrame()\n    if center == True:\n        c = \"c\"\n    else:\n        c = \"\"\n    \n    if method == \"mean\":\n        if lags is None:\n            sys.exit(\"specify lags\")\n        for l in lags:\n            agg = \\\n            DF[[\"breath_id\", \"u_in\", \"u_out\"]].groupby(\"breath_id\").rolling(window=l, center=center).mean().fillna(fillNas)\n            output[[\"{0}mu_in_l{1}\".format(c, l), \"{0}mu_out_l{1}\".format(c, l)]] = agg[[\"u_in\", \"u_out\"]]\n            gc.collect()\n            \n    elif method == \"max\":\n        if lags is None:\n            sys.exit(\"specify lags\")\n        for l in lags:\n            agg = \\\n            DF[[\"breath_id\", \"u_in\"]].groupby(\"breath_id\").rolling(window=l, center=center).max().fillna(fillNas)  \n            output[[\"{0}mxu_in_l{1}\".format(c, l)]] = agg[[\"u_in\"]]\n            gc.collect()\n            \n    elif method == \"min\":\n        if lags is None:\n            sys.exit(\"specify lags\")\n        for l in lags:\n            agg = \\\n            DF[[\"breath_id\", \"u_in\"]].groupby(\"breath_id\").rolling(window=l, center=center).min().fillna(fillNas)  \n            output[[\"{0}miu_in_l{1}\".format(c, l)]] = agg[[\"u_in\"]]\n            gc.collect()\n            \n    elif method == \"std\":\n        if lags is None:\n            sys.exit(\"specify lags\")\n        for l in lags:\n            agg = \\\n            DF[[\"breath_id\", \"u_in\"]].groupby(\"breath_id\").rolling(window=l, center=center).std().fillna(fillNas)  \n            output[\"{0}su_in_l{1}\".format(c, l)] = agg[\"u_in\"]\n            gc.collect()\n            \n    elif method == \"shift\":\n        if lags is None:\n            sys.exit(\"specify lags\")\n        for l in lags:\n            agg = \\\n            DF[[\"breath_id\", \"u_in\", \"u_out\"]].groupby(\"breath_id\").shift(l).fillna(fillNas)  \n            output[[\"sftu_in_l{0}\".format(l), \"sftu_out_l{0}\".format(l)]] = agg[[\"u_in\", \"u_out\"]]\n            gc.collect()     \n        \n    elif method == \"diff\":\n        if lags is None:\n            sys.exit(\"specify lags\")\n        for l in lags:\n            agg = \\\n            DF[[\"breath_id\", \"u_in\"]].groupby(\"breath_id\").diff(l).fillna(fillNas)  \n            output[\"du_in_l{0}\".format(l)] = agg[\"u_in\"]\n            gc.collect()  \n            \n    elif method == \"log\":\n        output[\"lgu_in\"] = np.log1p(DF[\"u_in\"].values)\n        gc.collect()  \n        \n    elif method == \"cumsum\":\n            agg = \\\n            DF[[\"breath_id\", \"u_in\", \"u_out\"]].groupby(\"breath_id\").cumsum() \n            output[[\"csu_in\", \"csu_out\"]] = agg[[\"u_in\", \"u_out\"]]\n            gc.collect()   \n            \n    elif method == \"area\":\n            agg = \\\n            DF[[\"time_step\", \"u_in\", \"breath_id\"]]\n            agg[\"area\"] = agg[\"time_step\"] * agg[\"u_in\"]\n            output[\"area\"] = agg.groupby(\"breath_id\")[\"area\"].cumsum()\n            gc.collect()   \n            \n    elif method == \"centering\":\n            agg = \\\n            DF[[\"u_in\", \"breath_id\"]].groupby(\"breath_id\").transform('mean')#does not aggregate like just mean()\n            output[\"cenu_in\"] = DF[\"u_in\"] - agg[\"u_in\"]\n            gc.collect()  \n\n    print(c + method + \" created\")\n    return output","e74fe150":"def assignment(DF, mDF):\n    DF = DF.copy()\n    colNames = mDF.columns\n    for n in colNames:\n        DF[\"{0}\".format(n)] = mDF[\"{0}\".format(n)].values\n    gc.collect()\n    return DF","a6be5789":"train = assignment(train, ByBreath(\"area\", train))\ntrain = assignment(train, ByBreath(\"mean\", train, lags=[6,9]))\ntrain = assignment(train, ByBreath(\"mean\", train, center=True, lags=[6]))\ntrain = assignment(train, ByBreath(\"max\", train, lags=[9]))\ntrain = assignment(train, ByBreath(\"min\", train, lags=[9]))\ntrain = assignment(train, ByBreath(\"diff\", train, lags=[1,2]))\ntrain = assignment(train, ByBreath(\"log\", train))\ntrain = assignment(train, ByBreath(\"std\", train, lags=[6]))\ntrain = assignment(train, ByBreath(\"shift\", train, lags=[-2,-1,1,2]))\ntrain = assignment(train, ByBreath(\"cumsum\", train))\ntrain = assignment(train, ByBreath(\"centering\", train))\n\ntest = assignment(test, ByBreath(\"area\", test))\ntest = assignment(test, ByBreath(\"mean\", test, lags=[6,9]))\ntest = assignment(test, ByBreath(\"mean\", test, center=True, lags=[6]))\ntest = assignment(test, ByBreath(\"max\", test, lags=[9]))\ntest = assignment(test, ByBreath(\"min\", test, lags=[9]))\ntest = assignment(test, ByBreath(\"diff\", test, lags=[1,2]))\ntest = assignment(test, ByBreath(\"log\", test))\ntest = assignment(test, ByBreath(\"std\", test, lags=[6]))\ntest = assignment(test, ByBreath(\"shift\", test, lags=[-2,-1,1,2]))\ntest = assignment(test, ByBreath(\"cumsum\", test))\ntest = assignment(test, ByBreath(\"centering\", test))","a8196eb5":"train.nunique().to_frame()","36a2a836":"test.nunique().to_frame()","de794ee8":"train.reset_index(drop=True, inplace=True)\ny = train.pressure\nuniTarg = np.array(sorted(y.unique()))\nnames = [c for c in train.columns if c not in [\"breath_id\", \"u_out\", \"pressure\", \"sftu_out_l-1\", \"sftu_out_l-2\"]]\ntrain, test = train[names], test[names]\ngc.collect()","294dd50d":"kf = KFold(\n    n_splits=NBConfig.general[\"folds\"], \n    random_state=NBConfig.general[\"seed\"], \n    shuffle=True\n)","417cd4b2":"k=0\n\nimportances = []\n\nfor train_index, test_index in kf.split(train):\n    \n    print(\"Fold: \" + str(k+1))\n    X_train, X_test = train.loc[train_index], train.loc[test_index]\n    print(\"Train observations: \" + str(X_train.shape[0]) + \"\\n\" + \n          \"Test observations: \" + str(X_test.shape[0]))\n    y_train, y_test = y[train_index], y[test_index]\n    gc.collect()\n    reg = RFR(\n        random_state=NBConfig.general[\"seed\"], \n        n_jobs=NBConfig.method[\"jobs\"], \n        criterion=NBConfig.method[\"criterion\"],\n        max_samples=NBConfig.method[\"samples\"],\n        max_features=NBConfig.method[\"feat_frac\"],\n        max_depth=NBConfig.method[\"depth\"],\n        n_estimators=NBConfig.method[\"n_trees\"],\n        min_samples_leaf=NBConfig.method[\"leafSize\"],\n        ccp_alpha=NBConfig.method[\"costs\"],\n        verbose=0\n    )\n    \n    reg.fit(X_train, y_train); gc.collect()\n    \n    pred_KFold = reg.predict(X_test)\n    \n    score = mae(pred_KFold, y_test)\n    print(\"RF score: \" + str(score))\n    \n    imps = reg.feature_importances_\n    importances.append(imps)\n    \n    if k == 0:\n        samSub.pressure = reg.predict(test[names]) \/ NBConfig.general[\"folds\"] \n    else:\n        samSub.pressure = samSub.pressure + reg.predict(test[names]) \/ NBConfig.general[\"folds\"] \n    \n    k+=1\n    \ndel(train, test)","bf4cd4ef":"impts = pd.DataFrame(importances, columns=names)\nmeans = impts.mean(axis=0).to_frame(name=\"means\")\nstds = impts.std(axis=0)\nmeans[\"stds\"] = stds\nmeans.sort_values(by=\"means\", ascending=True, inplace=True)\n\nfig, ax = plt.subplots(figsize=(15,15))\nmeans.means.plot.barh(yerr=means.stds.values, ax=ax)\nax.set_title(\"Mean Feature Importances with Standard Deviation\")\nax.set_ylabel(\"Mean decrease in impurity\")\nfig.tight_layout()","53c6b8aa":"samSub[\"pressure\"] = samSub.pressure.map(lambda x: uniTarg[np.argmin(((uniTarg - x)**2))])","4c7b0c54":"samSub[[\"id\", \"pressure\"]].to_csv(\"sampleSubmission\", index=False)\nsamSub.head()","966af546":"**Define a function for flexible feature engineering**","a2ee1136":"# Feature Engineering","da24afc1":"# Post Processing and Submission","a328fa08":"Number of unique values after feature engineering","fe155b90":"# Random Forest Approach"}}