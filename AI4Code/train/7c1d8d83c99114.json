{"cell_type":{"c773649d":"code","24a97e91":"code","93ea58ac":"code","2727d0f5":"code","d5e5f26e":"code","8cf88457":"code","828d4d2d":"code","66834dd8":"code","c3b2ef40":"code","50628555":"code","9edd0c63":"code","26c1bbda":"code","6de7a0fb":"code","6fbea0ab":"code","57a47a3d":"code","e608abfc":"code","94df161c":"code","ae3f50e0":"code","042cb188":"code","a033244e":"code","d17bfcf7":"code","9b2a3def":"code","7646733c":"code","bf94ca87":"code","9aa04069":"code","490f5561":"code","c4d1ce23":"code","d444beb5":"code","4dc30ee9":"code","90d38185":"code","66f9d784":"code","0e8d8ad2":"code","b22104ba":"code","87cc985a":"code","a4a41fdc":"code","aacf4344":"code","ff36695e":"code","9c209cf5":"code","6c990ec1":"code","209d0915":"code","a77b5e38":"markdown","e1d4c7cc":"markdown","a76dfac5":"markdown","02f2aa87":"markdown","3d49fd10":"markdown","21ae3043":"markdown"},"source":{"c773649d":"import numpy as np\nimport pandas as pd","24a97e91":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import ExtraTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB","93ea58ac":"from lightgbm import LGBMClassifier\n#import xgboost as xgb","2727d0f5":"from sklearn.cross_validation import train_test_split","d5e5f26e":"from sklearn.metrics import f1_score","8cf88457":"# DecisionTreeClassifier\n\ndef function_DecisionTreeClassifier(X_train, Y_train, X_test, Y_test):\n    \n    # fit\n    dec_tree = DecisionTreeClassifier()\n    dec_tree = dec_tree.fit(X_train, Y_train)\n\n    # predict\n    dec_tree_pred = dec_tree.predict(X_test)\n    \n    # score\n    dec_tree_score = f1_score(Y_test, dec_tree_pred, average=None)\n    dec_tree_score_micro = f1_score(Y_test, dec_tree_pred, average='micro')\n    \n    return dec_tree_score, dec_tree_score_micro","828d4d2d":"# ExtraTreeClassifier\n\ndef function_ExtraTreeClassifier(X_train, Y_train, X_test, Y_test):\n    \n    # fit\n    ext_tree = ExtraTreeClassifier()\n    ext_tree = ext_tree.fit(X_train, Y_train)\n\n    # predict\n    ext_tree_pred = ext_tree.predict(X_test)\n    \n    # score\n    ext_tree_score = f1_score(Y_test, ext_tree_pred, average=None)\n    ext_tree_score_micro = f1_score(Y_test, ext_tree_pred, average='micro')\n    \n    return ext_tree_score, ext_tree_score_micro","66834dd8":"# RandomForestClassifier\n\ndef function_RandomForestClassifier(X_train, Y_train, X_test, Y_test):\n    \n    # fit\n    ran_for = RandomForestClassifier()\n    ran_for = ran_for.fit(X_train, Y_train)\n\n    # predict\n    ran_for_pred = ran_for.predict(X_test)\n    \n    # score\n    ran_for_score = f1_score(Y_test, ran_for_pred, average=None)\n    ran_for_score_micro = f1_score(Y_test, ran_for_pred, average='micro')\n    \n    return ran_for_score, ran_for_score_micro","c3b2ef40":"# LGBMClassifier\n\ndef function_LGBMClassifier(X_train, Y_train, X_test, Y_test):\n    \n    # fit\n    lgbm = LGBMClassifier()\n    lgbm = lgbm.fit(X_train, Y_train)\n\n    # predict\n    lgbm_pred = lgbm.predict(X_test)\n    \n    # score\n    lgbm_score = f1_score(Y_test, lgbm_pred, average=None)\n    lgbm_score_micro = f1_score(Y_test, lgbm_pred, average='micro')\n    \n    return lgbm_score, lgbm_score_micro\n","50628555":"# BernoulliNB\n\ndef function_BernoulliNB(X_train, Y_train, X_test, Y_test):\n    \n    # fit\n    bernoulli = BernoulliNB()\n    bernoulli = bernoulli.fit(X_train, Y_train)\n\n    # predict\n    bernoulli_pred = bernoulli.predict(X_test)\n    \n    # score\n    bernoulli_score = f1_score(Y_test, bernoulli_pred, average=None)\n    bernoulli_score_micro = f1_score(Y_test, bernoulli_pred, average='micro')\n    \n    return bernoulli_score, bernoulli_score_micro","9edd0c63":"# KNeighborsClassifier\n\ndef function_KNeighborsClassifier(X_train, Y_train, X_test, Y_test):\n    \n    # fit\n    kn = KNeighborsClassifier()\n    kn = kn.fit(X_train, Y_train)\n\n    # predict\n    kn_pred = kn.predict(X_test)\n    \n    # score\n    kn_score = f1_score(Y_test, kn_pred, average=None)\n    kn_score_micro = f1_score(Y_test, kn_pred, average='micro')\n    \n    return kn_score, kn_score_micro","26c1bbda":"# GaussianNB\n\ndef function_GaussianNB(X_train, Y_train, X_test, Y_test):\n    \n    # fit\n    gaus = GaussianNB()\n    gaus = gaus.fit(X_train, Y_train)\n\n    # predict\n    gaus_pred = gaus.predict(X_test)\n    \n    # score\n    gaus_score = f1_score(Y_test, gaus_pred, average=None)\n    gaus_score_micro = f1_score(Y_test, gaus_pred, average='micro')\n    \n    return gaus_score, gaus_score_micro","6de7a0fb":"df = pd.read_csv('..\/input\/data.csv')","6fbea0ab":"df = df.drop('Unnamed: 0',1)\ndf = df.drop('Unnamed: 0.1',1)\ndf = df.drop('Unnamed: 0.1.1',1)","57a47a3d":"df.columns","e608abfc":"df = df[[\n    'DAY_OF_WEEK', \n    'DISTRICT', \n    'HOUR', \n    'Lat', \n    'Long', \n    'MONTH',\n    'REPORTING_AREA', \n    'Day', \n    'Night', \n    'ToNight', \n    'ToDay', \n    'temperatureMin', \n    'temperatureMax', \n    'precipitation', \n    'snow',\n    'temperatureDifference', \n    'clust_50', \n    'clust_100', \n    'clust_200',\n    'Universities_colleges_distance_25',\n    'Universities_colleges_distance_min',\n    'Universities_colleges_number_near', \n    'Public_schools_distance_25',\n    'Public_schools_distance_min', \n    'Public_schools_number_near',\n    'Non-Public_schools_distance_25', \n    'Non-Public_schools_distance_min',\n    'Non-Public_schools_number_near',\n    'OFFENSE_CODE_GROUP'\n]]","94df161c":"df.isnull().sum()","ae3f50e0":"df['OFFENSE_CODE_GROUP'].value_counts().head(11)","042cb188":"list_offense_code_group = (\n    'Motor Vehicle Accident Response',\n    'Larceny',\n    #'Medical Assistance',\n    #'Simple Assault',\n    #'Violations',\n    #'Investigate Person',\n    #'Vandalism',\n    'Drug Violation',\n    #'Larceny From Motor Vehicle',\n    #'Towed'\n)","a033244e":"df_model = pd.DataFrame()","d17bfcf7":"i = 0\n\nwhile i < len(list_offense_code_group):\n\n    df_model= df_model.append(df.loc[df['OFFENSE_CODE_GROUP'] == list_offense_code_group[i]])\n    \n    i+=1","9b2a3def":"df.shape","7646733c":"df_model.shape","bf94ca87":"df_model.columns","9aa04069":"# DAY_OF_WEEK\n\ndf_model['DAY_OF_WEEK'] = df_model['DAY_OF_WEEK'].map({\n    'Tuesday':2, \n    'Saturday':6, \n    'Monday':1, \n    'Sunday':7, \n    'Thursday':4, \n    'Wednesday':3,\n    'Friday':5\n})\n\ndf_model['DAY_OF_WEEK'].unique()","490f5561":"df_model.fillna(0, inplace = True)","c4d1ce23":"df_model.isnull().sum()","d444beb5":"y = df_model['OFFENSE_CODE_GROUP']","4dc30ee9":"y.unique()","90d38185":"y = y.map({\n    'Motor Vehicle Accident Response':1, \n    'Larceny':2, \n    #'Medical Assistance':2,\n    #'Simple Assault':2, \n    #'Violations':2, \n    #'Investigate Person':2, \n    #'Vandalism':2,\n    'Drug Violation':3, \n    #'Larceny From Motor Vehicle':2, \n    #'Towed':2\n})","66f9d784":"x = df_model.drop('OFFENSE_CODE_GROUP', 1)","0e8d8ad2":"x.columns","b22104ba":"# Split dataframe into random train and test subsets\n\nX_train, X_test, Y_train, Y_test = train_test_split(\n    x,\n    y, \n    test_size = 0.1,\n    random_state=42\n)\n\nprint(X_train.shape, Y_train.shape)\nprint(X_test.shape, Y_test.shape)","87cc985a":"function_DecisionTreeClassifier(X_train, Y_train, X_test, Y_test)","a4a41fdc":"function_ExtraTreeClassifier(X_train, Y_train, X_test, Y_test)","aacf4344":"# [0.67536206, 0.66611859, 0.64440994]), 0.66576\n\nfunction_RandomForestClassifier(X_train, Y_train, X_test, Y_test)","ff36695e":"function_LGBMClassifier(X_train, Y_train, X_test, Y_test)","9c209cf5":"function_BernoulliNB(X_train, Y_train, X_test, Y_test)","6c990ec1":"function_KNeighborsClassifier(X_train, Y_train, X_test, Y_test)","209d0915":"function_GaussianNB(X_train, Y_train, X_test, Y_test)","a77b5e38":"### More information. My [GitHub](https:\/\/github.com\/OleksandrKosovan\/predicting-boston-offense)","e1d4c7cc":"# Split data","a76dfac5":"# Functions","02f2aa87":"# Import","3d49fd10":"# Data","21ae3043":"# Modeling"}}