{"cell_type":{"dc76d78e":"code","25d35987":"code","8d2febcd":"code","634916ed":"code","33e36a5b":"code","a7e586e8":"code","2bc55bde":"code","ca71aea4":"code","17fa090d":"code","0277f0a7":"code","c7cc689d":"code","f2ed0052":"code","bd3f3ffc":"code","be6457a5":"code","971457c0":"code","e45dd0b7":"code","f10ac43d":"code","0ae2850f":"code","4adeec59":"code","50c099f4":"code","bf0edd8a":"code","7ef5bb1c":"code","473d12f0":"code","d26a43ab":"code","f2e60fba":"code","c0062346":"code","5525e73f":"code","64b0404c":"code","e49b3bcb":"code","c9c2db60":"code","3a4d2755":"code","1e500f52":"code","4bdfd790":"code","eb61f9da":"markdown","e062fe3a":"markdown","4ae79ac9":"markdown","79992820":"markdown","84e87f33":"markdown","0efb385c":"markdown","02c13864":"markdown","11ed23b7":"markdown","4e9b3b6d":"markdown","3a58ccf2":"markdown","459b8c0f":"markdown","df50ce14":"markdown"},"source":{"dc76d78e":"from IPython.display import Image\nimport os\n!ls ..\/input\/\n\nImage(\"..\/input\/inputimages\/download.png\")","25d35987":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","8d2febcd":"diamond_data = pd.read_csv('..\/input\/diamonds\/diamonds.csv', encoding=\"windows-1252\")","634916ed":"diamond_data.head()","33e36a5b":"diamond_data.tail()","a7e586e8":"diamond_data.describe()","2bc55bde":"diamond_data.info()","ca71aea4":"diamond_data.columns","17fa090d":"print( diamond_data.carat.min() )\n\nprint( diamond_data.carat.max() )","0277f0a7":"print( diamond_data.cut.unique() )\n\nprint( diamond_data.color.unique() )\n\nprint( diamond_data.clarity.unique() )","c7cc689d":"diamond_data.depth.unique() #clear data","f2ed0052":"diamond_data.price.unique()","bd3f3ffc":"print( diamond_data.x.unique() )\nprint( diamond_data.y.unique() )\nprint( diamond_data.z.unique() ) #clear data","be6457a5":"diamond_data.info()\n#Here the Unnamed: 0 column is not necessarily required.\n#diamond_data.drop(['Unnamed: 0'],, axis=1,inplace=True )","971457c0":"diamond_data.drop(['Unnamed: 0'], axis=1, inplace=True) # we delete the unnecessary column and get the info again\n\ndiamond_data.info()","e45dd0b7":"diamond_data.corr()","f10ac43d":"import seaborn as sns\n\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(diamond_data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","0ae2850f":"g = sns.jointplot(diamond_data.carat[:150], diamond_data.price[:150], kind=\"kde\", height=7) #CPU couldn't handle 53000 values\n#so just to show we took the first 150 values\np= sns.jointplot( x='carat',y='price',data=diamond_data,linewidth=0.1 ,ratio=3 ,height=8 )\n#plt.savefig('graph.png')\nplt.show()","4adeec59":"\nax = sns.violinplot(x=\"cut\", y=\"price\", data=diamond_data,height=15 )\n","50c099f4":"diamond_data.head()","bf0edd8a":"\n#ax = sns.countplot(x=\"depth\", hue=\"cut\", data=diamond_data[:5],palette=\"Paired\")\ng = sns.catplot( x='color',hue=\"cut\", data=diamond_data[:150],kind=\"count\",height=10)\n","7ef5bb1c":"#Find the most valuable color of diamond \ndiamond_color=list( diamond_data.color.unique() )\n\ndiamond_color # first we extracted the unique colors of diamonds in the dataset \n\naverage_prices_ofEachColor=[] # created an empty list of average prices of each color\n\nfor each in diamond_color:\n    x=diamond_data[ diamond_data['color']==each ] #extract the same color from the dataframe\n    current_avg=sum( x.price ) \/ len( x ) #calculate the average by dividing sum to it's length\n    average_prices_ofEachColor.append( current_avg ) # append list what we've found in the previous row\n    \nprint( average_prices_ofEachColor )\n\nnew_frame1=pd.DataFrame({\"Color_Of_Diamond\":diamond_color,\"Average_Price_Of_Diamond\":average_prices_ofEachColor })\n#created a new framework which indicates the color of diamond and the average prices of each\n#print( new_frame1 ) #see what we've found\n\ny=new_frame1.Average_Price_Of_Diamond.max() # find the maximum value in the Average Price Of Diamond Column\nz=new_frame1[ new_frame1['Average_Price_Of_Diamond']==y ] #extract the name of the value\n\nmost_valuable_color=str( z.Color_Of_Diamond ).split()[1] \nprint(\"\\nMost valuable type of diamond according to Colors is \",str( z.Color_Of_Diamond ).split()[1] )\n\nnew_frame1","473d12f0":"diamond_data.head()","d26a43ab":"#Find the most valuable cut type of diamond \n\ncut_types_list=list( diamond_data.cut.unique() ) #First extract the unique types of cuts\n\ncut_types_list # see what are these types\n\naverage_prices_list=[] # created an empty list of average_prices_list\n\nfor each in cut_types_list: \n    x=diamond_data[ diamond_data['cut']==each ] # extract the same type of cut for each type in the list cut_types_list \n    current_avg=sum( x.price )\/len( x ) #calculate averages\n    average_prices_list.append( current_avg ) # append result to the  average_prices_list\nnew_frame2=pd.DataFrame({\"Cut_Type_Of_Diamond\":cut_types_list,\"Average_Price_Of_Diamond\":average_prices_list })\n#created a new dataframe which contains Cut_Type_Of_Diamond and Average_Price_Of_Diamond as a column\n#print( new_frame2 )\ny=new_frame2.Average_Price_Of_Diamond.max() # find the maximum value in the Average Price Of Diamond Column\nz=new_frame2[ new_frame2['Average_Price_Of_Diamond']==y ] #extract the name of the value\nprint(\"\\nMost valuable type of diamond according to Cut Types is \",str( z.Cut_Type_Of_Diamond ).split()[1] )\n\nmost_valuable_cutType=str( z.Cut_Type_Of_Diamond ).split()[1] \nnew_frame2  ","f2e60fba":"#Find the most valuable clarity of diamond\n\nclarity_list=list( diamond_data.clarity.unique() )\n\naverage_prices_list=[]\n\nfor each in clarity_list:\n    x=diamond_data[ diamond_data['clarity']==each ]\n    current_avg=sum( x.price )\/len( x )\n    average_prices_list.append( current_avg )\n    \nnew_frame3=pd.DataFrame({\"Clarity_Of_Diamond\":clarity_list,\"Average_Price_Of_Diamond\":average_prices_list})\n\ny=new_frame3['Average_Price_Of_Diamond'].max()\nz=new_frame3[ new_frame3[\"Average_Price_Of_Diamond\"]==y ]\n\nprint(\"Most valuable type of diamond according to clarity is: \",str( z.Clarity_Of_Diamond ).split()[1] )\n\nmost_valuable_clarity=str( z.Clarity_Of_Diamond ).split()[1] \nnew_frame3\n  ","c0062346":"valuable=diamond_data[(diamond_data['cut']==most_valuable_cutType ) & (diamond_data['color']==most_valuable_color) & (diamond_data['clarity']==most_valuable_clarity) ]\nz=valuable.carat.max()\n\nvaluable[ valuable['carat']==z ]\n\n#According to the average results we've found here' are the diamonds ","5525e73f":"#most common three cut types of diamonds\n#most common three colors of diamonds\n#most common three clarities of diamonds\n#most common three depths of diamonds\n\nfrom collections import Counter\n\ncolor_count=Counter( list( diamond_data.color ) )\nmost_common_colors = color_count.most_common(3)  \n\ncut_count=Counter( list( diamond_data.cut) )\nmost_common_cuts=cut_count.most_common(3)\n\nclarity_count=Counter( list( diamond_data.clarity ) )\nmost_common_clarity=clarity_count.most_common(3)\n\ndepth_count=Counter( list( diamond_data.depth ) )\nmost_common_depth=depth_count.most_common(3)\n\nx1,y1 = zip(*most_common_colors)\nx1,y1 = list(x1),list(y1)\n\nx2,y2 = zip(*most_common_cuts )\nx2,y2 = list(x2),list(y2)\n\nx3,y3 = zip(*most_common_clarity )\nx3,y3 = list(x3),list(y3)\n\nx4,y4 = zip(*most_common_depth )\nx4,y4 = list(x4),list(y4)\n\nfig, axes = plt.subplots(nrows=2, ncols=2)\n\n\n\nsns.barplot(ax=axes[0,0],x=x1, y=y1,palette = sns.cubehelix_palette(len(x)))\nsns.barplot(ax=axes[0,1],x=x2, y=y2,palette = sns.cubehelix_palette(len(x)))\nsns.barplot(ax=axes[1,0],x=x3, y=y3,palette = sns.cubehelix_palette(len(x)))\nsns.barplot(ax=axes[1,1],x=x4, y=y4,palette = sns.cubehelix_palette(len(x)))\n\n","64b0404c":"diamond_data.color.unique()","e49b3bcb":"#Percentage of Colors In Each Cut Type\n#First we create empty lists for each type of colors\ncolorE=[]\ncolorI=[]\ncolorJ=[]\n\ncolorH=[]\ncolorF=[]\ncolorG=[]\ncolorD=[]\n\n#we have already found the unique cut types \nfor each in cut_types_list:\n    x=diamond_data[ diamond_data['cut']==each ]  #for each type we are looking for each number of colors  \n    colorE.append( len( x[ x['color']=='E'] ) )\n    colorI.append( len( x[ x['color']=='I'] ) )\n    colorJ.append( len( x[ x['color']=='J'] ) )\n    colorH.append( len( x[ x['color']=='H'] ) )\n    colorF.append( len( x[ x['color']=='F'] ) )\n    colorG.append( len( x[ x['color']=='G'] ) )\n    colorD.append( len( x[ x['color']=='D'] ) )\n    \nf,ax = plt.subplots(figsize = (10,10))\nsns.barplot(x=colorE,y=cut_types_list,color='red',alpha = 0.5,label='E' )\nsns.barplot(x=colorI,y=cut_types_list,color='blue',alpha = 0.7,label='I')\nsns.barplot(x=colorJ ,y=cut_types_list,color='cyan',alpha = 0.6,label='J')\nsns.barplot(x=colorH,y=cut_types_list,color='pink',alpha = 0.6,label='H')\nsns.barplot(x=colorF,y=cut_types_list,color='yellow',alpha = 0.6,label='F')\nsns.barplot(x=colorG,y=cut_types_list,color='green',alpha = 0.6,label='G')\nsns.barplot(x=colorD,y=cut_types_list,color='purple',alpha = 0.6,label='D')\n\n\nax.legend(loc='lower right',frameon = True)     # legendlarin gorunurlugu\nax.set(xlabel=' Percentage Of Colors', ylabel='Types Of Cuts',title = \"Percentage of Colors In Each Cut Type \")\n    \n","c9c2db60":"\nlabels = diamond_data.cut.value_counts().index\ncolors = ['grey','blue','red','yellow','green']\nexplode = [0,0,0,0,0]\nsizes = diamond_data.cut.value_counts().values\n\n# visual\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Diamonds According To Cut Types',color = 'blue',fontsize = 15)","3a4d2755":"diamond_data.head()","1e500f52":"sns.boxplot(x=\"cut\", y=\"carat\", hue=\"color\", data=diamond_data[:1000], palette=\"PRGn\")\nplt.show()","4bdfd790":"sns.swarmplot(x=\"clarity\", y=\"carat\",hue=\"cut\", data=diamond_data[:1000],palette=\"PRGn\")\nplt.show()","eb61f9da":"A carat is a unit of weight for diamonds and other gemstones.The higher the carat, the more expensive the diamond is going to be.","e062fe3a":"In this dataset we are given carat,cut,color,clarity,depth,table,price,x,y and z as a column.","4ae79ac9":"First, we are reading data from diamond.csv file with read_csv() function.","79992820":"With **describe()** method gives the information about just the numerical data.","84e87f33":"**Diamonds Dataset - Project 2**","0efb385c":"With **info()** method we had the column names and types.","02c13864":"We can see ;\n\n->the types of cuts by using the **unique()** method.It can be **'Ideal', 'Premium', 'Good'**, **'Very Good'**  or **'Fair'**.<br>\n->the types of colors are  **'E' 'I' 'J' 'H' 'F' 'G' 'D'** <br>\n->the types of clarity are **'SI2' 'SI1' 'VS1' 'VS2' 'VVS2' 'VVS1' 'I1''IF'** <br>","11ed23b7":"In the above graph we can see each color separately with their cut types.<br>\nIn color **E** , we have 'Very Good' cut type mostly and 'Fair'cut type at least.<br>\nIn color **I** , we have 'Ideal' cut type mostly and 'Good'cut type at least.<br>\nIn color **J** , we have 'Very Good' cut type mostly and 'Premium' type at least.<br>\nIn color **H** , we have 'Fair-Ideal' cut type mostly and 'Premium-Very Good'cut type at least.<br>\nIn color **F** , we have 'Very Good' cut type mostly and 'Good'cut type at least.<br>\nIn color **G** , we have 'Ideal' cut type mostly and 'Fair' type at least.<br>\nIn color **D** , we have 'Very Good' cut type mostly and 'Premium-Good' type at least.<br>\n\n","4e9b3b6d":"head() method gives us the first 5 rows of the dataset.","3a58ccf2":"tail() method gives us the last 5 rows of the dataset.","459b8c0f":"In the [0,0] graph we can see the **most common color of diamonds is 'G'.**<br>\nIn the [0,1] graph we can see the **most common cut type of diamonds is 'Ideal'.**<br>\nIn the [1,0] graph we can see the **most common clarity of diamonds is 'SI1'.**<br>\nIn the [1,1] graph we can see the **most common depth of diamonds is '61.8'.**<br>\n","df50ce14":"As we can see above the diamond can take the values between 0.2 and 5.01 in carat column."}}