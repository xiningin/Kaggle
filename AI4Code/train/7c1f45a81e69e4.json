{"cell_type":{"6f900f64":"code","edb297b6":"code","0a26a6ec":"code","a36c4037":"code","7c8e81a9":"code","45aa9d70":"code","e140741d":"code","0fd037f0":"code","5359844a":"code","614f9310":"code","b440283d":"code","7bfe043d":"code","f1ddb411":"code","cc09515c":"code","99c5d503":"code","1ce65120":"code","a8bf3b92":"code","dec2a6eb":"code","8afdcf5a":"code","fa814132":"code","cbff64ad":"code","830af7f9":"code","81075374":"code","85794ea2":"code","7b416619":"code","ba71408e":"code","a25de61e":"code","9d7f29e3":"code","48d4a8f4":"code","22bb7a96":"markdown","691615bd":"markdown","c3b308d7":"markdown","8edfd0fd":"markdown","7096c3fb":"markdown","52e95cf7":"markdown","277ab74d":"markdown","9027ab1d":"markdown","7cb343ec":"markdown","858db619":"markdown","1e257c49":"markdown","98e1013e":"markdown","b40cc711":"markdown","06b9673d":"markdown","167753f7":"markdown","9135e299":"markdown","6943b762":"markdown"},"source":{"6f900f64":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","edb297b6":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import  preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report,confusion_matrix, accuracy_score,classification_report\nfrom sklearn.tree import export_graphviz\nimport six\nfrom sklearn import tree\n# Convert to png using system command (requires Graphviz)\nfrom subprocess import call\n# Display in jupyter notebook\nfrom IPython.display import Image\nfrom sklearn.cluster import KMeans\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nheart=pd.read_csv('..\/input\/heart.csv')","0a26a6ec":"heart.shape","a36c4037":"# 1.3 \uba85\ubaa9\ud615 \uc790\ub8cc\uc758 \uc790\ub8cc\ud615\uc744 \ubb38\uc790\ub85c \ubcc0\ud658\n#\uc704\uc758 \uc124\uba85\uc744 \uc77d\uace0 \uba85\ubaa9\ud615 \uc790\ub8cc\ub97c \ubc14\uafd4\uc8fc\uba74\uc11c \uacb0\uce21\uce58\uac00 \ucd94\uac00\ub41c\ub2e4\nheart.cp = heart.cp.replace([0,1,2,3],['no_pain','Atypical angina','Angina pain','Typical angina'])#\uac00\uc2b4\ud1b5\uc99d \uc720\ud615\nheart.restecg = heart.restecg.replace([0,1,2],['Left ventricular hypertrophy','nomal','ST-T wave abnormal'])#\uc548\uc815 \uc2ec\uc804\ub3c4 \uacb0\uacfc\nheart.slope = heart.slope.replace([0,1,2],['descent','plane','Increase'])\nheart.thal= heart.thal.replace([0,1,2,3],[np.nan,'Resolved Defects','nomal','Resolveable Defects'])","7c8e81a9":"heart.info()","45aa9d70":"heart.head(10)","e140741d":"heart.isnull().sum()# Null\uac12 \ud655\uc778, \ud608\uad00\uc218\uc640 \uacb0\ud568\uc744 \ub098\ud0c0\ub0b4\ub294 \ud30c\ub77c\uba54\ud130\uc5d0\uc11c \uacb0\uce21\uce58\ub97c \uac01\uac01 5,2\uac1c \ud655\uc778","0fd037f0":"sns.pairplot(heart.dropna(), hue='target')","5359844a":"fig,ax=plt.subplots(1, 2, figsize = (14,7))\nsns.countplot(data=heart, x='target', ax=ax[0],palette='cool')\nax[0].set_xlabel(\"having heart Disease?\")\nax[0].set_ylabel(\"Count\")\nax[0].set_title(\"Heart Disease Count\")\nheart['target'].value_counts().plot.pie(explode=[0,0.05],startangle=90, autopct='%0.1f%%',ax=ax[1],cmap='cool')\nplt.title(\"Heart Disease\")","614f9310":"print(heart['target'].value_counts())\ntarget_df=heart[heart.target==1]\nnontarget_df=heart[heart.target==0]","b440283d":"searchList=['sex','cp','fbs','restecg','exang','slope','ca','thal']\n# \uba85\ubaa9\ud615 \ubcc0\uc218 \ub9ac\uc2a4\ud2b8","7bfe043d":"def showdetail(index):\n    if index is 'sex':\n        plt.text(-1,-1,'0 -> female 1 -> male',fontsize=15,bbox=dict(facecolor='gray', alpha=0.5))\n    elif index is 'fbs':\n        plt.text(-1,-1,'0 -> Low blood sugar 1 ->  High blood sugar',fontsize=15,bbox=dict(facecolor='gray', alpha=0.5))        \n    elif index is 'exang':    \n        plt.text(-1,-1,'0 -> False 1 ->True',fontsize=15,bbox=dict(facecolor='gray', alpha=0.5))        \n    elif index is 'ca':    \n        plt.text(-1,-1,'0 ~ 3 -> blood vessel\\'s num 4 -> Na',fontsize=15,bbox=dict(facecolor='gray', alpha=0.5))        \n\nfig,ax=plt.subplots(len(searchList), 3, figsize = (20,7*len(searchList)))\naxnum=1\n#explode=[0.02  for x in range(len(heart[index].cat.categories))],\nfor index in searchList:\n    plt.subplot(len(searchList),3,axnum)\n    plt.title('target\\'s '+index)\n    target_df[index].dropna().value_counts().sort_index().plot.pie(\n                                                      autopct='%0.1f%%')\n    showdetail(index)\n    axnum+=1\n    \n    plt.subplot(len(searchList),3,axnum)    \n    plt.title('nontarget\\'s '+index)\n    nontarget_df[index].dropna().value_counts().sort_index().plot.pie(\n                                                         autopct='%0.1f%%')\n    showdetail(index)\n    axnum+=1\n    \n    plt.subplot(len(searchList),3,axnum)    \n    plt.title('all\\'s '+index)\n    heart[index].dropna().value_counts().sort_index().plot.pie(\n                                                  autopct='%0.1f%%')\n    showdetail(index)    \n    axnum+=1","f1ddb411":"continually_index = heart.describe().columns\ncontinually_index","cc09515c":"continually_index = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']# \uc5f0\uc18d\ud615 \uc790\ub8cc\nfig,ax=plt.subplots(len(continually_index), 1, figsize = (14,7*len(continually_index)))\nlist_couint=1\nfor index in continually_index:\n    plt.subplot(len(continually_index),1,list_couint)\n    plt.title(index)\n    sns.distplot(target_df[index],bins=20, kde=True, rug=True, color='red',label='target')\n    sns.distplot(nontarget_df[index],bins=20,kde=True, rug=True,color='blue',label='nontarget')\n    sns.distplot(heart[index],bins=20,kde=True, rug=True,color='gray',label='all')\n    plt.legend()\n    list_couint+=1\n    \n    ","99c5d503":"plt.figure(figsize=(15, 45))\nplt.subplot(3,1,1)\nsns.heatmap(target_df.dropna().corr(), annot = True,cmap='Blues')\nplt.title('target\\'s Correlation Table', fontsize = 22)\nplt.subplot(3,1,2)\nsns.heatmap(nontarget_df.dropna().corr(), annot = True,cmap='Blues')\nplt.title('nontarget\\'s Correlation Table', fontsize = 22)\nplt.subplot(3,1,3)\nsns.heatmap(heart.dropna().corr(), annot = True,cmap='Blues')\nplt.title('All\\'s Correlation Table', fontsize = 22)\n","1ce65120":"target_df.dropna().corr(), nontarget_df.dropna().corr(), heart.dropna().corr()","a8bf3b92":"heart1=pd.read_csv('..\/input\/heart.csv')\nheart2=pd.read_csv('..\/input\/heart.csv')\ntargets=heart1.target\nheart1=heart1.drop('target',axis=1)\nheart1.head(10)\nscaler = preprocessing.RobustScaler()\nheart1=scaler.fit_transform(heart1)\nfig,ax=plt.subplots(len(['age', 'trestbps', 'chol', 'thalach', 'oldpeak']), 1)\n#\uc5f0\uc18d\ud615 \uc790\ub8cc\ub4e4\uc758 \uc774\uc0c1\uce58 \ud655\uc778\nlist_couint=1\nfor index in ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']:\n    plt.subplot(len(['age', 'trestbps', 'chol', 'thalach', 'oldpeak']),1,list_couint)\n    plt.title(index)\n    sns.boxplot(heart[index])\n    list_couint+=1","dec2a6eb":"# \uc2a4\ucf00\uc77c\ub9c1 -\uc54c\uace0\ub9ac\uc998\uc5d0 \uc801\uc6a9\ud558\uae30\uc5d0 \uc55e\uc11c\uc11c \ubaa8\ub378\ub9c1\uc5d0 \uc54c\ub9de\uc744 \ud615\ud0dc\ub85c \ub370\uc774\ud130\ub97c \ucc98\ub9ac\nfrom sklearn.preprocessing import RobustScaler\nscaler = preprocessing.RobustScaler() \nscaler.fit_transform(heart2)\nfeature = scaler.fit_transform(heart2)\n","8afdcf5a":"def elbow(X):\n    sse = []\n\n    for i in range(1,11):\n        km = KMeans(n_clusters=i,algorithm='auto', random_state=42)\n        km.fit(X)\n        sse.append(km.inertia_)\n\n    plt.plot(range(1,11), sse, marker='o')\n    plt.xlabel('n_clusters label') \n    plt.ylabel('SSE')\n    plt.show()\n\nelbow(feature)","fa814132":"import numpy as np\nfrom sklearn.metrics import silhouette_samples\nfrom sklearn.datasets import make_blobs\nfrom matplotlib import cm\n\n# \uc774\ucf54\ub4dc\uc5d0\uc11c \ub370\uc774\ud130 X\uc640 X\ub97c \uc784\uc758\uc758 \ud074\ub7ec\uc2a4\ud130 \uac1c\uc218\ub85c \uacc4\uc0b0\ud55c k-means \uacb0\uacfc\uc778\n# y\ndef plotSilhouette(X, y_km):\n    cluster_labels = np.unique(y_km)\n    n_clusters = cluster_labels.shape[0]\n    silhouette_vals = silhouette_samples(X, y_km, metric = 'euclidean')\n    y_ax_lower, y_ax_upper = 0, 0\n    yticks = []\n\n    for i, c in enumerate(cluster_labels):\n        c_silhouette_vals = silhouette_vals[y_km == c]\n        c_silhouette_vals.sort()\n        y_ax_upper += len(c_silhouette_vals)\n        color = cm.jet(i\/n_clusters)\n\n        plt.barh(range(y_ax_lower, y_ax_upper), c_silhouette_vals, height=1.0,\n                edgecolor='none', color=color)\n        yticks.append((y_ax_lower + y_ax_upper)\/2)\n        y_ax_lower += len(c_silhouette_vals)\n    \n    silhoutte_avg = np.mean(silhouette_vals)\n    plt.title(\"silhoutte_avg: {:5.2f}\".format(silhoutte_avg))\n    plt.axvline(silhoutte_avg, color = 'red', linestyle='--')\n    plt.yticks(yticks, cluster_labels+1)\n    plt.ylabel('n_clusters label')\n    plt.xlabel('silhouette value')\n    plt.show()\n\nX, y = make_blobs(n_samples=150, n_features=2, centers=3, cluster_std=0.5,\n                  shuffle=True, random_state=0)\nkm = KMeans(n_clusters=2, algorithm='auto', random_state=42)\nkm2 = KMeans(n_clusters=3, algorithm='auto', random_state=42)\nkm3 = KMeans(n_clusters=4, algorithm='auto', random_state=42)\ny_km = km.fit_predict(heart2)\ny_km2 = km2.fit_predict(heart2)\ny_km3 = km3.fit_predict(heart2)\nplotSilhouette(heart2, y_km)\nplotSilhouette(heart2, y_km2)\nplotSilhouette(heart2, y_km3)","cbff64ad":"from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=2, init='k-means++', max_iter=100,algorithm='auto').fit(heart1)\nkmeans_target = len(kmeans.labels_[kmeans.labels_== 1])\nkmeans_nontarget = len(kmeans.labels_[kmeans.labels_== 0])\nprint(kmeans_target,kmeans_nontarget)","830af7f9":"kmeans_se=pd.Series(kmeans.labels_)\nfig,ax=plt.subplots(2,2, figsize = (20,20))\nplt.subplot(2,2,3)\nheart['target'].dropna().value_counts().plot.pie()\nplt.text(0,-1,'0 -> nontarget 1-> target',fontsize=15,bbox=dict(facecolor='gray', alpha=0.5))\nplt.title('Input data')\nplt.subplot(2,2,4)\nkmeans_se.dropna().value_counts().plot.pie()\nplt.text(0,-1,'0 -> target 1-> nontarget',fontsize=15,bbox=dict(facecolor='gray', alpha=0.5))\nplt.title('K-means\\'s result')\n\n\nplt.subplot(2,2,1)\nheart['target'].dropna().value_counts().plot.bar()\nplt.text(0,1,'0 -> nontarget 1-> target',fontsize=15,bbox=dict(facecolor='gray', alpha=0.5))\nplt.title('Input data')\nplt.subplot(2,2,2)\nkmeans_se.dropna().value_counts().plot.bar()\nplt.text(0,1,'0 -> target 1-> nontarget',fontsize=15,bbox=dict(facecolor='gray', alpha=0.5))\nplt.title('K-means\\'s result')","81075374":"# \uba3c\uc800 \uc0dd\uc131\ub41c \uacb0\uacfc\ub97c \ub370\uc774\ud130 \ud504\ub808\uc784\uc73c\ub85c \ubcc0\ud658\ud55c\ub2e4.\nfeature_df = pd.DataFrame(heart2)","85794ea2":"import numpy as np\nfrom sklearn.manifold import TSNE\n\n# 2\uac1c\uc758 \ucc28\uc6d0\uc73c\ub85c \ucd95\uc18c\n#\ub370\uc774\ud130\uc758 \ubd84\ub958\ub97c \uc2dc\uac01\ud654\ud574\uc11c \ud655\uc778\ud558\uace0 \uc2f6\uc73c\ub098, \n#\ub2e4\ucc28\uc6d0\uc758 \ub370\uc774\ud130\ub97c \ub208\uc73c\ub85c \ud655\uc778\ud558\uae30\ub780 \ubd88\uac00\ub2a5\uc5d0 \uac00\uae5d\ub2e4. \n#\ub2e8, \ucc28\uc6d0\uc744 \uc904\uc774\uba74 \uac00\ub2a5\ud558\ub2e4. \n#\ucc28\uc6d0\uc744 \ucd95\uc18c\ud558\uc5ec feature\ub97c 2\ub85c \uc904\uc778 \ud6c4 \uadf8\ub798\ud504\ub97c \uadf8\ub824 \ud655\uc778\ud574\ubcfc \uc218 \uc788\ub2e4.\ntransformed = TSNE(n_components=2).fit_transform(feature_df)\ntransformed.shape","7b416619":"xs = transformed[:,0]\nys = transformed[:,1]\ncolors=np.array( ['red','blue'])\nbins = np.arange(xs.shape[0]) % 2\nfig,ax=plt.subplots(1,1, figsize = (15,15))\nplt.scatter(xs,ys,c=colors[bins])#\ub77c\ubca8\uc740 \uc0c9\uc0c1\uc73c\ub85c \ubd84\ub958\ub428\n","ba71408e":"X_train, X_test, y_train, y_test = train_test_split(heart1,\n                                                    targets\n                                                    ,test_size=0.3\n                                                    ,random_state =0\n                                                   )\n\nprint(len(X_train),len(X_test),len(y_train),len(y_test))\n\n\n# \ud559\uc2b5\nforest = RandomForestClassifier(n_estimators=100, random_state = 1)\nforest.fit(X_train, y_train)\n\n# \uc608\uce21\ny_pred = forest.predict(X_test)\n#print(y_pred)\n#print(list(y_test))\n# from sklearn import metrics \n\nprint('test \uac2f\uc218 : ',len(y_test),'error : ',(y_test!=y_pred).sum())\nprint('\uc815\ud655\ub3c4 :',accuracy_score(y_test, y_pred))\n# print(\"Accuracy on training set: {:.3f}\".format(forest.score(X_train, y_train)))\n# print(\"Accuracy on test set: {:.3f}\".format(forest.score(X_test, y_test)))\n\n\nprint(classification_report(y_test,y_pred))\n#https:\/\/frhyme.github.io\/machine-learning\/clf_%ED%8F%89%EA%B0%80%ED%95%98%EA%B8%B0\/\n# precision : \uc608\uce21\ud55c \uac12\uc911 \ub9de\uc740\uac12\uc758 \ube44\uc728\n# recall    : \uc2e4\uc81c 0\ub610\ub294 1\uc778\uac12\uc774 0\ub610\ub294 1\ub85c \ud310\ubcc4\ub41c \ube44\uc728\n# f1-score  : precision, recall \uc758 \ud3c9\uac00\n# support   : \ud574\ub2f9 \ud074\ub798\uc2a4\uc5d0 \uc788\ub294 \uc2e4\uc81c \uc751\ub2f5\uc758 \uc0d8\ud50c \uc218","a25de61e":"estimator = forest.estimators_[0]\nexport_graphviz(estimator, out_file='tree.dot', \n                feature_names = heart.columns[:13],\n                class_names = heart.columns[-1],\n                rounded = True, proportion = False, \n                precision = 2, filled = True)","9d7f29e3":"call(['dot', '-Tpng', 'tree.dot', '-o', 'tree.png', '-Gdpi=600'])","48d4a8f4":"Image(filename = 'tree.png')","22bb7a96":"### \uc704\uc758 \uacb0\uacfc\ub97c \ud1b5\ud574 \uc54c\uc218 \uc788\ub294\uc810\n- \uc704\uc758 \uadf8\ub798\ud504\ub294 RED : \uc2ec\uc7a5\ubcd1\uc774 \uc788\ub294 \uadf8\ub8f9, BLUE : \uc2ec\uc7a5\ubcd1\uc774 \uc5c6\ub294 \uadf8\ub8f9, GRAY : \uc804\uccb4\uadf8\ub8f9 \uc73c\ub85c \ub098\ub204\uc5b4 \uc2dc\uac01\uc801\uc73c\ub85c \uac01 \uadf8\ub8f9\ubcc4 \ucc28\uc774\ub97c \uc2dc\uac01\uc801\uc73c\ub85c \uc27d\uac8c \ubcf4\uc5ec\uc900\ub2e4. \uc704\uc758 \uadf8\ub798\ud504\uc5d0\uc11c \uc138 \uadf8\ub798\ud504\uac00 \ube44\uc2b7\ud558\uac8c \uacc2\uce60\uacbd\uc6b0 \ud574\ub2f9 \ub370\uc774\ud130\ub294 \uc2ec\uc7a5\ubcd1\uc5d0 \uc601\ud5a5\uc744 \ub07c\uce58\uc9c0 \uc54a\ub294\ub2e4\uace0 \uc720\ucd94\ud560\uc218 \uc788\uc73c\uba70, \ud070 \ucc28\uc774\ub97c \ubcf4\uc77c\uacbd\uc6b0 \uc2ec\uc7a5\ubcd1\uc5d0 \uc601\ud5a5\uc744 \ub07c\uce5c\ub2e4\uace0 \uc720\ucd94\ud560 \uc218 \uc788\ub2e4\n\n- \uc2ec\uc7a5\ubcd1\uacfc \ub098\uc774\uc758 \uad00\uacc4\uc5d0\uc11c \uc80a\uc740 \uc0ac\ub78c\ub4e4\uc5d0\uac8c\uc11c \ube44\uad50\uc801 \ub9ce\uc774 \ubc1c\uc0dd\ud55c\ub2e4\ub294\uac83\uc744 \uc720\ucd94\ud560\uc218 \uc788\uc5c8\ub2e4.\n- \uc2ec\uc7a5\ubcd1\uacfc \ud3c9\uc0c1\uc2dc \ud608\uc555\uacfc\uc758 \uad00\uacc4\ub294 \uc5c6\ub2e4\ub294\uac83\uc744 \uc720\ucd94\ud560\uc218 \uc788\uc5c8\ub2e4.\n- \uc2ec\uc7a5\ubcd1\uacfc \ud608\uc911 \ucf5c\ub808\uc2a4\ud14c\ub864 \ub18d\ub3c4\uac04\uc758 \uad00\uacc4\ub85c\uc368 \uc2ec\uc7a5\ubcd1\uc774 \uc788\ub294 \uc0ac\ub78c\ub4e4\uc758 \uadf8\ub8f9\uc774 \uc870\uae08\ub354 \ub0ae\uc740 \ud608\uc911 \ucf5c\ub808\uc2a4\ud14c\ub864 \ub18d\ub3c4\ub97c \uac00\uc9c0\ub294\uac83\uc744 \uc54c\uc218 \uc788\uc5c8\ub2e4\n- \uc2ec\uc7a5\ubcd1\uc744 \uac00\uc9c4 \uadf8\ub8f9\uc5d0\uc11c \ucd5c\ub300 \uc2ec\ubc15\uc218\uac00 \ub354 \ub192\uac8c \ub098\ud0c0\ub098\ub294\uac83\uc744 \uc54c\uc218 \uc788\uc5c8\ub2e4.\n- \uc548\uc815\ub418\uae30\uae4c\uc9c0 \uc6b4\ub3d9\uc73c\ub85c \uc720\ubc1c\ub418\ub294 ST\uc758 \uacbd\uc6b0 \uc2ec\uc7a5\ubcd1\uc774 \uc788\ub294 \uadf8\ub8f9\uc774 \ub354\uc6b1 \ube60\ub974\uac8c \ub098\ud0c0\ub098\ub294\uac83\uc73c\ub85c \ud655\uc778\ub41c\ub2e4","691615bd":"- \uc2ec\uc7a5\ubcd1\uc774 \uc788\ub294 \uadf8\ub8f9\uc5d0\uc120 \ub098\uc774\uc640 \ucd5c\ub300 \uc2ec\ubc15\uc218\uac00 \ub192\uc740 \uc74c\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ubcf4\uc600\uc73c\uba70, \ub098\uc774\uc640 \ud3c9\uc0c1\uc2dc \ud608\uc555\uac04\uc5d0 \uc591\uc758 \uc0c1\uad00\ub3c4\ub97c \ubcf4\uc600\ub2e4\n- \uc2ec\uc7a5\ubcd1\uc774 \uc5c6\ub294 \uadf8\ub8f9\uc5d0\uc120 \ud3c9\uc0c1\uc2dc \uc2ec\ubc15\uc218\uc640 \ub098\uc774\uac00 \uc591\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ubcf4\uc600\ub2e4.\n- \uadf8\ub9ac\uace0 \uc804\uccb4 \uadf8\ub8f9\uc5d0\uc120 \ub098\uc774\uc640 \ucd5c\ub300 \uc2ec\ubc15\uc218\uac00 \ub192\uc740 \uc74c\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ubcf4\uc774\uace0, \uc548\uc815\ub418\uae30\uae4c\uc9c0 \uc6b4\ub3d9\uc73c\ub85c \uc720\ubc1c\ub418\ub294 ST\uc640 \ucd5c\ub300 \uc2ec\ubc15\uc218\uac00 \uc74c\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ubcf4\uc600\ub2e4","c3b308d7":"- \uc704\ub97c \ud1b5\ud574\uc11c \ub370\uc774\ud130\ub4e4\uc758 \ubd84\ud3ec\ub97c \uc54c\uc218 \uc788\uc5c8\uc73c\ub098. \uba85\ubaa9\ud615 \ubcc0\uc218\uc640 \uc591\uc801 \ubcc0\uc218\uac00 \uc11e\uc5ec\uc788\uc73c\uba70, \ubaa8\ub4e0 \ub370\uc774\ud130\ub4e4\uc774 \ud55c\ubc88\uc5d0 \ucd9c\ub825\ub418\uc5b4 \ubcf4\uae30\uac00 \ud798\ub4e4\ub2e4.\n- \uba85\ubaa9\ud615 \ubcc0\uc218\uc640 \uc591\uc801 \ubcc0\uc218\ub97c \ub098\ub204\uc5b4 \uc815\ub9ac\ud558\uc5ec \uc2dc\uac01\ud654\ud558\uc790","8edfd0fd":"- \uc804\uccb4 \uc778\uad6c\uc911 \uc9c8\ubcd1\uc774 \ubc1c\uc0dd\ud55c \uc0ac\ub78c\uc740 \ucd1d \uc778\uad6c\uc758 54.5%\ub97c \ucc28\uc9c0\ud558\uace0 \uc788\ub2e4.\n- \uc2ec\uc7a5\ubcd1\uc774 \uc788\ub294 \uadf8\ub8f9\uacfc \uc5c6\ub294 \uadf8\ub8f9\uc744 \uae30\uc900\uc73c\ub85c \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud558\uc5ec\ubcf4\uc790","7096c3fb":"### \uba85\ubaa9\ud615 \ubcc0\uc218","52e95cf7":"### 2.3 \uc591\uc801 \ubcc0\uc218\ub4e4\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ud30c\uc545\ud558\uae30 \uc704\ud55c \uc0c1\uad00\uacc4\uc218 \ud14c\uc774\ube14","277ab74d":"# INDEX(EDA)\n## 1. \ub370\uc774\ud130\uc14b \uc18c\uac1c. \ubc0f \uc0ac\uc6a9 \ud328\ud0a4\uc9c0\n## 2. \uc790\ub8cc\uc5d0 \ub300\ud55c \uc18c\uac1c\n### 2.1 \uc5b4\ub5a0\ud55c \ubcc0\uc218\uac00 \uc788\ub294\uac00?\n- \uba85\ubaa9\ud615 \ubcc0\uc218\n- \uc591\uc801 \ubcc0\uc218\n\n### 2.2 \uac01 \ubcc0\uc218\uc758 \ud615\ud0dc\n- \uc804\uccb4 \ubcc0\uc218\n- \uba85\ubaa9\ud615 \ubcc0\uc218\n- \uc591\uc801 \ubcc0\uc218\n\n### 2.3 \uc591\uc801 \ubcc0\uc218\ub4e4\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ud30c\uc545\ud558\uae30 \uc704\ud55c \uc0c1\uad00\uacc4\uc218 \ud14c\uc774\ube14\n\n## 3. k-means\n- \uc5d8\ubcf4\uc6b0(elbow) \uae30\ubc95\n- \uc2e4\ub8e8\uc5e3(silhouette) \uae30\ubc95\n- k-means \uc804 \/ \ud6c4 \uc2dc\uac01\ud654 \ube44\uad50\n- k-means \uc0b0\uc810\ub3c4 \uc2dc\uac01\ud654 \n\n## 4. \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8\n- \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8 \uac1c\ub150\n- \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8 \ud559\uc2b5\n- \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8 \uc2dc\uac01\ud654","9027ab1d":"## Kmeans Clustering (k-\ud3c9\uade0 \uad70\uc9d1\ud654)\n\n### -\uad70\uc9d1 \ubd84\uc11d\uc744 \ud560 \ub54c \ud65c\uc6a9\ub418\ub294 \uae30\ubcf8 \uc54c\uace0\ub9ac\uc998\uc774\ub2e4.\n### - k\uac1c\uc758 \uc13c\ud2b8\ub85c\uc774\ub4dc\ub97c \uae30\uc900\uc73c\ub85c \ud074\ub7ec\uc2a4\ud2b8\ub9c1\uc744 \uc9c4\ud589\ud558\uc5ec k\uac1c\uc758 \uc9d1\ub2e8\uc744 \ub9cc\ub4e0\ub2e4.\n\n## \uc5d8\ubcf4\uc6b0 \uae30\ubc95\n\n### \uc5ec\ub7ec k\uac1c\ub97c \ud14c\uc2a4\ud2b8\ud574 \ubcf4\uba74 obj\uac00 \uae09\uaca9\ud788 \uc904\uc5b4\ub4e4\ub2e4\uac00 \uac11\uc790\uae30 \uc644\ub9cc\ud574 \uc9c0\ub294 \uacbd\uacc4\uac00 \ub098\ud0c0\ub098\ub294\ub370\n### \uadf8 \uacbd\uacc4\uac00 \ub098\ud0c0\ub098\uba74 \uadf8 \ud3ec\uc778\ud2b8\ub97c k\uac1c\ub85c \uc0bc\ub294\ub2e4.","7cb343ec":"### \uc591\uc801 \ubcc0\uc218","858db619":"### \uc2ec\uc7a5\ubcd1 \ubc1c\ubcd1\uc5ec\ubd80\uc5d0 \ub530\ub978 \ubd84\ub958","1e257c49":"### \uc804\uccb4 \ub370\uc774\ud130\ub4e4\uc758 \ubd84\ud3ec \uc2dc\uac01\ud654","98e1013e":"### \uc704\uc758 \uacb0\uacfc\ub97c \ud1b5\ud574\uc11c \uc54c\uc218 \uc788\ub294 \ucd94\ub860\n- \uc704\uc758 \uadf8\ub798\ud504\ub4e4\uc740 \uac01\uac01 \uc2ec\uc7a5\ubcd1\uc774 \uc788\ub294 \uadf8\ub8f9 \uc2ec\uc7a5\ubcd1\uc774 \uc5c6\ub294 \uad6c\ub8f9, \uc804\uccb4 \uadf8\ub8f9\uc758 \uac01\uac01 \ub370\uc774\ud130\ubcc4 \ube44\uc728\uc744 \ub098\ud0c0\ub0b8\ub2e4. \uc138 \ube44\uc728\uc774 \ubaa8\ub450 \ube44\uc2b7\ud55c \ubaa8\uc591\uc744 \ub098\ud0c0\ub0bc \uacbd\uc6b0 \ud574\ub2f9 \ub370\uc774\ud130\ub294 \uc2ec\uc7a5\ubcd1\uc5d0 \uc601\ud5a5\uc744 \ub07c\uce58\uc9c0 \uc54a\ub294\ub2e4\uace0 \uc0dd\uac01\ud560\uc218 \uc788\uc73c\uba70, \ucc28\uc774\uac00 \uc788\uc744 \uacbd\uc6b0 \uc2ec\uc7a5\ubcd1\uc5d0 \uc601\ud5a5\uc744 \ub07c\uce5c\ub2e4\uace0 \uc720\ucd94\ud560\uc218 \uc788\ub2e4.\n- \uc2ec\uc7a5\ubcd1\uc774 \uc788\ub294 \uc0ac\ub78c\uacfc \uc2ec\uc7a5\ubcd1\uc774 \uc5c6\ub294 \uc0ac\ub78c\uc740 \ub0a8\uc131\uc774 \ub354 \ub9ce\ub2e4. \ud558\uc9c0\ub9cc \ud45c\ubcf8\uc5d0 \uc788\ub294 \ub0a8\uc131\uacfc \uc5ec\uc131\uc774 68.3%\uc640 31.7%\ub85c\uc368 2\ubc30\uc774\uc0c1 \ucc28\uc774\uac00 \ub098\ubbc0\ub85c \uc774 \uc790\uccb4\ub9cc\uc73c\ub85c \ub0a8\uc131\ubcf4\ub2e4 \uc5ec\uc131\uc774 \uc2ec\uc7a5\ubcd1\uc5d0 \uc798 \uac78\ub9b4\uc218 \uc788\ub2e4 \ub77c\ub294 \uac00\uc124\uc744 \uc138\uc6b0\uae30\uc5d4 \ubd80\uc801\ud569\ud558\ub2e4\uace0 \uc0dd\uac01\ud560\uc218 \uc788\ub2e4.\n- \uac00\uc2b4\ud1b5\uc99d\uc758 \uc720\ud615\uc744 \ubcf4\uac8c\ub420 \uacbd\uc6b0 \uc2ec\uc7a5\ubcd1\uc774 \uc788\ub294 \uc0ac\ub78c\ub4e4\uc758 \uacbd\uc6b0 76.4%\uc758 \uc0ac\ub78c\ub4e4\uc774 \uac00\uc2b4\ud1b5\uc99d\uc744 \uac00\uc9c0\uba70 \uc2ec\uc7a5\ubcd1\uc774 \uc5c6\ub294 \uc0ac\ub78c\uc758 \uacbd\uc6b0 24.6%\uc758 \uc0ac\ub78c\uc774 \uac00\uc2b4\ud1b5\uc99d\uc744 \uac00\uc9c0\uace0 \uc788\ub294\uac83\uc73c\ub85c\ubcf4\uc544 \uac00\uc2b4\ud1b5\uc99d\uacfc \uc2ec\uc7a5\ubcd1\uc0ac\uc774\uc5d0 \uad00\uacc4\uac00 \uc788\uc74c\uc744 \uc720\ucd94\ud560 \uc218 \uc788\ub2e4\n- \uacf5\ubcf5\uc2dc \ud608\ub2f9\uc774 120mg\/dl\uc774 \ub118\ub294 \uc0ac\ub78c. \uc989 \ub2f9\ub1e8\ud658\uc790\uc758 \uacbd\uc6b0 \uc2ec\uc7a5\ubcd1\uc744 \uac00\uc9c4\uc0ac\ub78c\uacfc \uac00\uc9c0\uc9c0 \uc54a\uc740 \uc0ac\ub78c\uc774 \ube44\uc2b7\ud55c \ubd84\ud3ec\ub97c \ubcf4\uc774\uba70 \uc2ec\uc7a5\ubcd1\uacfc \ubb34\uad00\ud558\ub2e4\uace0 \uc720\ucd94\ud574\ubcfc\uc218 \uc788\ub2e4\n- \uc548\uc804 \uc2e0\uc804\ub3c4 \uac80\uc0ac \uacb0\uacfc\ub610\ud55c \uc2ec\uc7a5\ubcd1\uc744 \uac00\uc9c4 \uc0ac\ub78c\uacfc \uac00\uc9c0\uc9c0 \uc54a\uc740 \uadf8\ub8f9\uac04 \uc815\uc0c1\uc801\uc778 \uc0ac\ub78c\uc758 \ube44\uc728\uc774 58.2%, 40.6%\ub85c\uc368 \ucc28\uc774\ub97c \ubcf4\uc774\uba70 \uc88c\uc2ec\uc2e4 \ube44\ub300\uc5d0 \ud574\ub2f9\ud558\ub294 \uc0ac\ub78c\ub4e4\ub610\ud55c 41.2%, 57.2%\ub85c\uc368 \uc2e0\uc804\ub3c4 \uac80\uc0ac \uacb0\uacfc\uac00 \uc2ec\uc7a5\ubcd1\uacfc \uad00\uacc4\uac00 \uc788\uc74c\uc744 \uc720\ucd94\ud560\uc218 \uc788\ub2e4.\n- \uc2ec\uc7a5\ubcd1\uc774 \uc788\ub294 \uc0ac\ub78c\uacfc \uc5c6\ub294 \uc0ac\ub78c\uac04 \ud611\uc2ec\uc99d \uc720\ubc1c\uac00\ub2a5\uc131\uc774 \ub192\uc740 \uc6b4\ub3d9\uc744 \ud558\uc600\ub294\uc9c0\uc5d0 \ub300\ud55c \uc870\uc0ac\uacb0\uacfc \uc2ec\uc7a5\ubcd1\uc774 \uc788\ub294 \uadf8\ub8f9\uc758 \uc0ac\ub78c\ub4e4\uc774 \ud611\uc2ec\uc99d\uc744 \uc720\ubc1c\ud558\ub294 \uc6b4\ub3d9\uc744 \ud55c \uc0ac\ub78c\ub4e4\uc774 \uc801\uace0 \uc2ec\uc7a5\ubcd1\uc774 \uc5c6\ub294 \uc0ac\ub78c\ub4e4 \uadf8\ub8f9\uc740 \uc0c1\ub300\uc801\uc73c\ub85c \ub9ce\uc740\uac83\uc744 \ubcf4\uc544 \uc6b4\ub3d9\uc5ec\ubd80\ub610\ud55c \uc2ec\uc7a5\ubcd1\uacfc \uad00\uacc4\uac00 \uc788\uc74c\uc744 \uc720\ucd94\ud574 \ubcfc\uc218 \uc788\ub2e4.\n- \uc2ec\uc7a5\ubcd1\uc744 \uac00\uc9c4 \uc0ac\ub78c\uacfc \uac00\uc9c0\uc9c0 \uc54a\uc740\uc0ac\ub78c\uac04\uc5d0 \ucd5c\ub300 \uc6b4\ub3d9 ST segment\uc758 \uae30\uc6b8\uae30\ub97c \ubcf4\uc558\uc744\ub54c \uac00\uc9c0\uc9c0\uc54a\uc740 \uc0ac\ub78c\uacfc \uac00\uc9c4 \uadf8\ub8f9\uc774 \uac01\uac01 64.8% 25.4% \uc99d\uac00\ud558\ub294\uac83\uc744 \uc54c\uc218 \uc788\uc5c8\uc73c\uba70 \ud3c9\ud0c4\ud55c \uae30\uc6b8\uae30\ub97c \uac00\uc9c4 \uc0ac\ub78c\uc740 29.7% 65.9%\ub97c \uac00\uc9c0\uba70 \uac10\uc18c\ud558\ub294 \uadf8\ub798\ud504\ub97c \uac00\uc9c4 \uc0ac\ub78c\uc740 5.5% 8.7%\ub85c\uc368 \ud070 \ucc28\uc774\ub97c \ubcf4\uc774\uc9c0 \uc54a\ub294\uac83\uc744 \ubcf4\uc544 \uc2ec\uc7a5\ubcd1\uacfc \ucd5c\ub300 \uc6b4\ub3d9 ST segment\uc758 \uae30\uc6b8\uae30\uc758 \uad00\uacc4\ub294 \ucd5c\ub300 \uc6b4\ub3d9 ST segment\uc758 \uae30\uc6b8\uae30\uac00 \uc0c1\uc2b9\ud558\ub294 \uc0ac\ub78c\uc758 \uacbd\uc6b0 \uc2ec\uc7a5\ubcd1\uc758 \ubc1c\uc0dd\uc728\uc774 \ub192\ub2e4\ub294\uac83\uc744 \uc737\ud560\uc218 \uc788\ub2e4.\n- \ud615\uad11 \ud22c\uc2dc\ub41c \uc8fc\uc694 \ud608\uad00\uc758 \uc218\uc758 \ubd84\ud3ec\ub97c \ubcf4\uac8c \ub420 \uacbd\uc6b0 \uc2ec\uc7a5\ubcd1\uc774 \uc788\ub294 \uadf8\ub8f9\uc740 19.3%\uc758 \uc0ac\ub78c\ub4e4\uc774 1\uac1c\uc774\uc0c1\uc758 \ud615\uad11 \ud22c\uc2dc\ub41c \ud608\uad00\uc218\ub97c \uac00\uc9c0\uba70 \uc2ec\uc7a5\ubcd1\uc774 \uc5c6\ub294 \uadf8\ub8f9\uc758 \uc0ac\ub78c\ub4e4\uc740 34.1%\uc758 \uc0ac\ub78c\ub4e4\uc774 1\uac1c\uc774\uc0c1\uc758 \ud615\uad11\ud22c\uc2dc\ub41c \ud608\uad00\uc218\ub97c \uac00\uc9c4\ub2e4. \uc774\ub97c \ud1b5\ud574 \uc2ec\uc7a5\ubcd1\uacfc \ud615\uad11 \ud22c\uc2dc\ub41c \uc8fc\uc694 \ud608\uad00\uc758 \uc218\ub294 \ubb34\uad00\ud558\uc9c0 \uc54a\ub2e4\ub294\uac83\uc744 \uc720\ucd94\ud560 \uc218 \uc788\ub2e4\n- \uc2ec\uc7a5\ubcd1\uc744 \uac00\uc9c4 \uadf8\ub8f9\uacfc \uac00\uc9c0\uc9c0 \uc54a\uc740 \uadf8\ub8f9\uac04 \uacb0\ud568\uc744 \uac00\uc9c0\uace0 \ud574\uacb0\ud560\uc218 \uc788\ub294\uc9c0, \uc5c6\ub294\uc9c0\uc5d0 \ub300\ud55c \ud45c\uc5d0\uc11c \uc2ec\uc7a5\ubcd1\uc744 \uac00\uc9c4 \uc0ac\ub78c\uadf8\ub8f9\uc5d0\uc11c \uc815\uc0c1\uc801\uc778 \uc0ac\ub78c\uc744 \ub9ce\uc774 \ucc3e\uc544 \ubcfc \uc218 \uc788\uc5c8\uc73c\uba70, \uc2ec\uc7a5\ubcd1\uc744 \uac00\uc9c0\uc9c0 \uc54a\uc740 \uadf8\ub8f9\uc758 \uc0ac\ub78c\ub4e4\uc740 \uadf9\ubcf5\uac00\ub2a5\ud55c \uacb0\ud568\uc744 \uac00\uc9c4 \uc0ac\ub78c\ub4e4\uc758 \ube44\uc728\uc774 \ub192\uc740\uac83\uc744 \uc54c\uc218 \uc788\uc5c8\uc73c\uba70, \uc774\ubbf8 \ubb38\uc81c\ub97c \ud574\uacb0\ud55c \uc0ac\ub78c\uc758 \uacbd\uc6b0 \uc2ec\uc7a5\ubcd1\uc774 \uc5c6\ub294 \uc0ac\ub78c \uadf8\ub8f9\uc5d0\uc11c \ub354 \ub192\uc740 \ube44\uc728\uc744 \ubcf4\uc600\ub2e4\n","b40cc711":"## 2.2 \uc790\ub8cc\uac00 \uc5b4\ub5a0\ud55c \ud615\ud0dc\ub97c \ub744\ub294\uac00?","06b9673d":"## 1. \uc81c\uacf5\ub41c DataSet\uc758 \uc124\uba85 \ubc0f \uc0ac\uc6a9 \ud328\ud0a4\uc9c0\n#### age : \ub098\uc774\n#### sex : \uc131\ubcc4(0 : \uc5ec\uc131; 1 : \ub0a8\uc131)\n#### cp : \uac00\uc2b4\ud1b5\uc99d \uc720\ud615(0 = \uc99d\uc0c1 \uc5c6\uc74c ; 1 = \ube44\uc804\ud615\uc801 \ud611\uc2ec\uc99d; 2 = \ube44\ud611\uc2ec\uc99d \ud1b5\uc99d; 3 = \uc804\ud615\uc801\uc778 \ud611\uc2ec\uc99d)\n#### trestbps : \ud3c9\uc2dc \ud608\uc555 \n#### chol : \ud608\uc911 \ucf5c\ub808\uc2a4\ud14c\ub864 \ub18d\ub3c4\n#### fbs : \uacf5\ubcf5\uc2dc \ud608\ub2f9 > 120mg\/dl(0 = False; 1 = True)\n#### restecg : \uc548\uc815 \uc2ec\uc804\ub3c4 \uacb0\uacfc(0 = \uc88c\uc2ec\uc2e4 \ube44\ub300; 1 = \uc815\uc0c1; 2 = ST-T\ud30c \ube44\uc815\uc0c1)\n#### thalach : \ucd5c\ub300 \uc2ec\ubc15\uc218\n#### exang : \ud611\uc2ec\uc99d \uc720\ubc1c \uc6b4\ub3d9(0 = no; 1 = yes)\n#### old peak : \ube44\uad50\uc801 \uc548\uc815\ub418\uae30\uae4c\uc9c0 \uc6b4\ub3d9\uc73c\ub85c \uc720\ubc1c\ub418\ub294 ST\n#### slope : \ucd5c\ub300 \uc6b4\ub3d9 ST segment\uc758 \uae30\uc6b8\uae30(0 = \ud558\uac15; 1 = \ud3c9\uba74; 2 = \uc0c1\uc2b9)\n#### ca : \ud615\uad11 \ud22c\uc2dc\ub41c \uc8fc\uc694 \ud608\uad00\uc758 \uc218(0~3; 4 = NA)\n#### thal : 0 = NA; 1 = \ud574\uacb0\ub41c \uacb0\ud568; 2 = \uc815\uc0c1; 3 = \ud574\uacb0\uac00\ub2a5\ud55c \uacb0\ud568\n#### target : \uc2ec\uc7a5\ubcd1 \uc9c4\ub2e8(0 = False; 1 = True)","167753f7":"### \uba85\ubaa9\ud615 \uc790\ub8cc\n  'sex','cp','fbs','restecg','exang','slope','ca','thal'\n \n### \uc5f0\uc18d\ud615 \uc790\ub8cc\n  'age','chol','trestbps','thalach','oldpeak'","9135e299":"## 2 \uc790\ub8cc\uc5d0 \ub300\ud55c \uc18c\uac1c\n### 2.1 \uc5b4\ub5a4 \ubcc0\uc218\uac00 \uc788\ub294\uac00?","6943b762":"# \uc2e4\ub8e8\uc5e3 \uae30\ubc95\n\n### - \uc2e4\ub8e8\uc5e3 \uac12\uc740 \ud55c \ud074\ub7ec\uc2a4\ud130 \uc548\uc758 \ub370\uc774\ud130\ub4e4\uc774 \ub2e4\ub978 \ud074\ub7ec\uc2a4\ud130\uc640 \ube44\uad50\ud574\uc11c \uc5bc\ub9c8\ub098 \ube44\uc2b7\ud55c\uac00\ub97c \ub098\ud0c0\ub0b8\ub2e4.\n#### 1. \ud074\ub7ec\uc2a4\ud130 \uc548\uc758 \uac70\ub9ac\uac00 \uc9e7\uc744 \uc218\ub85d \uc88b\uace0(cohesion), \ub2e4\ub978 \ud074\ub7ec\uc2a4\ud130\uc640\uc758 \uac70\ub9ac\ub294 \uba40\uc218\ub85d \uc88b\ub2e4(separation)\n#### 2. \uc2e4\ub8e8\uc5e3\uc740 -1 \ubd80\ud130 1\uc0ac\uc774\uc758 \uac12\uc744 \uac00\uc9c4\ub2e4. (\uc2e4\ub8e8\uc5e3\uc774 1\uc77c\uc218\ub85d \uc798 \ubd80\ud569\ud558\ub294 \uac70\uace0, -1\uc77c\uc218\ub85d \ud544\uc694\uc5c6\ub294 \ub370\uc774\ud130)\n#### 3. \ub192\uc744 \uc218\ub85d \uc88b\ub2e4."}}