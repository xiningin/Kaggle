{"cell_type":{"343a1e19":"code","3391952e":"code","eebc161f":"code","a6fc1d39":"code","fd9ea8a3":"code","01a2e6d5":"code","9f6cd73f":"code","a6ecd52a":"code","579606f3":"code","77c6c721":"code","0d6c732a":"code","91eaf420":"code","cb77b051":"code","c086ec11":"code","df1a24f9":"code","53c88abb":"code","a07327f7":"markdown","457f4fed":"markdown","9057a954":"markdown","843289aa":"markdown","ab0fc93e":"markdown","d05a6cac":"markdown","6c67a23a":"markdown","018a2ae6":"markdown","483302ef":"markdown","b2c3d9af":"markdown"},"source":{"343a1e19":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.decomposition import PCA\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import Dropout\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3391952e":"X_train = pd.read_csv(\"..\/input\/r-street-quant-challenge\/train_data.csv\")\ny_train = pd.read_csv(\"..\/input\/r-street-quant-challenge\/train_target.csv\")\nX_test = pd.read_csv(\"..\/input\/r-street-quant-challenge\/test_data.csv\")\nX_test_copy = X_test\nX_train.head()","eebc161f":"X_train.describe()","a6fc1d39":"X_train.isnull().sum()","fd9ea8a3":"import datetime\nimport time\n\nX_train.date = X_train.date.str.slice(0,19)\nX_train['date'] = X_train['date'].apply(lambda x: datetime.datetime.strptime(x,'%Y-%m-%d %H:%M:%S'))\nX_train['date'] = X_train['date'].apply(lambda x: x.timestamp())\nX_train.head()","01a2e6d5":"sc = MinMaxScaler(feature_range = (-1, 1))\nX_train = sc.fit_transform(X_train)\nX_train","9f6cd73f":"y_train.drop(['Id'], axis=1, inplace=True)\ny_train","a6ecd52a":"y_train = sc.fit_transform(y_train)\ny_train","579606f3":"X_train, y_train = np.asarray(X_train).astype('float32'), np.asarray(y_train).astype('float32')\nX_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\ny_train = np.reshape(y_train, (y_train.shape[0], y_train.shape[1], 1))","77c6c721":"regressor = Sequential()\nregressor.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))\nregressor.add(Dropout(0.2))\nregressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))\nregressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))\nregressor.add(LSTM(units = 50))\nregressor.add(Dropout(0.2))\nregressor.add(Dense(units = 1))\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error', metrics= [\"mean_squared_error\"])\nregressor.fit(X_train, y_train, epochs = 100, batch_size = 32)","0d6c732a":"X_test.date = X_test.date.str.slice(0,19)\nX_test['date'] = X_test['date'].apply(lambda x: datetime.datetime.strptime(x,'%Y-%m-%d %H:%M:%S'))\nX_test['date'] = X_test['date'].apply(lambda x: x.timestamp())\nX_test = StandardScaler().fit_transform(X_test)\nX_test = np.asarray(X_test).astype('float32')\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\nX_test","91eaf420":"y_test = regressor.predict(X_test)\ny_test","cb77b051":"y_test = sc.inverse_transform(y_test)\ny_test","c086ec11":"for i in range(len(y_test)):\n    if y_test[i]>0.5:\n        y_test[i]=1\n    elif y_test[i]<=0.5:\n        y_test[i]=0\ny_pred_obj = pd.DataFrame(data = y_test, columns=['target'])\ny_pred_obj['Id'] = X_test_copy['Id']\ny_pred_obj = y_pred_obj.reindex(columns=['Id', 'target'])\ny_pred_obj['target'] = y_pred_obj['target'].apply(lambda x: int(x))\ny_pred_obj","df1a24f9":"y_pred_obj.describe()","53c88abb":"y_pred_obj.to_csv(\"\/kaggle\/working\/submission.csv\", index=False)","a07327f7":"Writing the predicted target values onto a csv file in the working directory for submission","457f4fed":"Analysing the values of X_train and checking if there are any null values","9057a954":"Preprocessing date from string to datetime object to integer","843289aa":"Creating a LSTM model for prediction","ab0fc93e":"Transforming the training dataset using min max scaling ","d05a6cac":"Transforming the predicted target values into the original form of 0s and 2s","6c67a23a":"Reading the given input datasets","018a2ae6":"Predicting target values","483302ef":"Preprocessing test data to use in the model","b2c3d9af":"Using the given stock market data to predict the target values - 1 signifies that the probability of the market going up in the next time-stamp is 1, and 0 signifies that the probability is 0."}}