{"cell_type":{"1ee53a20":"code","cf2d569f":"code","a6bdbdcb":"code","36b5ca15":"code","6c82d524":"code","db4734de":"code","5ff52bf8":"code","386aba25":"code","bb56bc37":"code","0d15a317":"code","07af4411":"code","c0514b19":"code","ca22178c":"code","d0de774e":"code","eeea9ba8":"code","0b421b2b":"code","86db680d":"code","2d1cae99":"code","dbf18973":"code","d8f932b0":"code","69df98a8":"code","f80b2386":"code","9b34a9aa":"code","03f66a95":"code","16d2ea8a":"code","c394efe6":"code","f28eccc1":"code","47b18c7d":"code","d0881519":"code","29681422":"code","c9df81ee":"code","4917c5d5":"code","6e7f36a1":"code","ca46e6dc":"markdown","71040f46":"markdown","7539bf3a":"markdown","0ce73e34":"markdown","c32d2970":"markdown","39e35ac7":"markdown","ffcf0238":"markdown","436398c6":"markdown","3f61f823":"markdown","2143e69f":"markdown","c26b19b9":"markdown"},"source":{"1ee53a20":"params = {'legend.fontsize': 'x-large',\n          'figure.figsize': (15, 5),\n         'axes.labelsize': 'x-large',\n         'axes.titlesize':'x-large',\n         'xtick.labelsize':'x-large',\n         'ytick.labelsize':'x-large'}\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","cf2d569f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.rcParams.update(params)\nimport h5py\nimport random\nfrom tqdm.notebook import tqdm\nimport nibabel as nib\nfrom glob import glob\nfrom scipy.stats import ks_2samp","a6bdbdcb":"f = h5py.File('\/kaggle\/input\/trends-assessment-prediction\/fMRI_test\/20305.mat','r')","36b5ca15":"f.keys()","6c82d524":"data = f['SM_feature']\n#array = data.value   \narray = data[()]\narray.shape   # it is 4D tensor","db4734de":"stats = pd.DataFrame({\"Min\" : array.min() , \"Max\" : array.max() , 'Std': array.std() , 'Mean' : array.mean()}, index = ['Values'])\nprint(stats)","5ff52bf8":"f, ax = plt.subplots(1,4)\nf.set_size_inches(25, 10)\nfor i in range(4):\n    ax[i].imshow(array[i*5, :, 10, :], cmap = 'gray')","386aba25":"# Highlighting the values \n\nf, ax = plt.subplots(1,4)\nf.set_size_inches(25, 10)\nfor i in range(4):\n    Temp = array[i*10, :, 10, :] !=0  \n    ax[i].imshow(Temp)","bb56bc37":"list_train_path = glob(\"\/kaggle\/input\/trends-assessment-prediction\/fMRI_train\/*\")\nlist_test_path = glob(\"\/kaggle\/input\/trends-assessment-prediction\/fMRI_test\/*\")\n","0d15a317":"print(f\"Number of Train .mat files - {len(list_train_path)}\" )\nprint(f\"Number of Test .mat files  - {len(list_test_path)}\" )","07af4411":"f, ax = plt.subplots(1,3)\nf.set_size_inches(25, 10)\n\nfor counter, i in enumerate(random.choices(list_train_path, k = 3)):\n    array_iter = h5py.File(i,'r')['SM_feature'][()]\n    ax[counter].hist(array_iter.flatten(), bins = 20, \n                     color = 'orange', edgecolor = 'black')","c0514b19":"f, ax = plt.subplots(1,3)\nf.set_size_inches(25, 10)\n\nfor counter, i in enumerate(random.choices(list_test_path, k = 3)):\n    array_iter = h5py.File(i,'r')['SM_feature'][()]\n    ax[counter].hist(array_iter.flatten(), bins = 20, \n                     color = 'orange', edgecolor = 'black')","ca22178c":"df_loading = pd.read_csv(\"\/kaggle\/input\/trends-assessment-prediction\/loading.csv\")  # This data consist of both train as well test information\ndf_fnc = pd.read_csv(\"\/kaggle\/input\/trends-assessment-prediction\/fnc.csv\")            # This data consist of both train as well test information\ndf_train_score = pd.read_csv(\"\/kaggle\/input\/trends-assessment-prediction\/train_scores.csv\")   # This data consist of only train information","d0de774e":"df_train_score.head()","eeea9ba8":"df_loading.head()","0b421b2b":"df_fnc.head()","86db680d":"df_loading_train = df_loading[df_loading.Id.isin(df_train_score.Id)]\ndf_loading_test = df_loading[~df_loading.Id.isin(df_train_score.Id)]","2d1cae99":"print(df_loading_train.shape)\ndf_loading_train.head()","dbf18973":"print(df_loading_test.shape)\ndf_loading_test.head()","d8f932b0":"df_fnc_train = df_fnc[df_fnc.Id.isin(df_train_score.Id)]\ndf_fnc_test = df_fnc[~df_fnc.Id.isin(df_train_score.Id)]","69df98a8":"print(df_fnc_train.shape)\ndf_fnc_train.head()","f80b2386":"print(df_fnc_test.shape)\ndf_fnc_test.head()","9b34a9aa":"df_train_loading_fcn = pd.merge(df_loading_train, df_fnc_train, on = 'Id', how = 'inner')\ndf_test_loading_fcn =   pd.merge(df_loading_test, df_fnc_test, on = 'Id', how = 'inner')\n\nprint(df_train_loading_fcn.shape)\nprint(df_test_loading_fcn.shape)","03f66a95":"columns = df_train_loading_fcn.columns\ndf_test_loading_fcn = df_test_loading_fcn[columns]","16d2ea8a":"p_value = .000005   # you can change the p-value and experiment\nlist_p_value =[]\n\nfor i in tqdm(columns[1:]):\n    list_p_value.append(ks_2samp(df_test_loading_fcn[i] , df_train_loading_fcn[i])[1])\n\nSe = pd.Series(list_p_value, index = columns[1:]).sort_values() \nlist_dissimilar = list(Se[Se < p_value].index)","c394efe6":"len(list_dissimilar)","f28eccc1":"for i in tqdm(range(len(list_dissimilar))[::2]):\n    f, ax = plt.subplots(1,2)\n    f.set_size_inches(20, 8)\n\n    try:\n        ax[0].hist(df_train_loading_fcn[list_dissimilar[i]], bins = 20, edgecolor = 'black', color = 'red')\n        ax[0].hist(df_test_loading_fcn[list_dissimilar[i]], bins = 20, edgecolor = 'black', alpha = .5, color = 'blue')\n        ax[0].title.set_text(list_dissimilar[i])\n\n        ax[1].hist(df_train_loading_fcn[list_dissimilar[i+1]], bins = 20, edgecolor = 'black', color = 'red')\n        ax[1].hist(df_test_loading_fcn[list_dissimilar[i+1]], bins = 20, edgecolor = 'black', alpha = .5, color = 'blue')\n        ax[1].title.set_text(list_dissimilar[i+1])\n        \n#         ax[2].hist(df_train_loading_fcn[list_dissimilar[i+2]], bins = 20, edgecolor = 'black', color = 'red')\n#         ax[2].hist(df_test_loading_fcn[list_dissimilar[i+2]], bins = 20, edgecolor = 'black', alpha = .5, color = 'blue')\n#         ax[2].title.set_text(list_dissimilar[i+2])\n    \n    except:\n        pass\n\n ","47b18c7d":"img = nib.load(\"\/kaggle\/input\/trends-assessment-prediction\/fMRI_mask.nii\")","d0881519":"img.shape","29681422":"img.get_data_dtype()","c9df81ee":"hdr = img.header","4917c5d5":"hdr","6e7f36a1":"hdr.get_xyzt_units()","ca46e6dc":"## Reading using h5py","71040f46":"## Plotting Distribution of Values :: Flattening into 1D array","7539bf3a":"## Exploring CSV Files","0ce73e34":"## Checking some statistics","c32d2970":"## Plotting few random planes ","39e35ac7":"## Merging Train and Test : Loading and FNC","ffcf0238":"## K-S Test to check the similarity of train and test distribution","436398c6":"## Getting data and checking shape","3f61f823":"## Splitting the DataFrame into Train and Test","2143e69f":"## Checking its keys","c26b19b9":"## Plotting Distribution Train (red) vs Test (blue)"}}