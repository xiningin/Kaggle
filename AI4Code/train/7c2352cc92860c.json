{"cell_type":{"9d7f92f6":"code","8f0f384d":"code","0c923265":"code","5776332e":"code","9dacb91d":"code","d66a7090":"code","859022ea":"code","8320de11":"code","40c62075":"code","3be19dec":"code","792abf57":"code","165bf5d9":"code","55c9feac":"code","d0dab9fe":"code","5203d561":"code","d4e830b2":"code","0092867b":"code","bd3a9740":"code","cb76d824":"code","549ddb78":"code","2b0e472d":"code","a60aa9e6":"code","3413e840":"code","b13a4813":"code","99c5c871":"code","907886a0":"code","5fa453d5":"code","67070a34":"code","f8986458":"code","e6236a11":"code","8e10eaa7":"code","0c8ee302":"code","30952cb3":"code","56dd263c":"code","6ed4b1e6":"code","e9c4c341":"code","ba3ebcb8":"code","a27891e4":"code","1448ab2f":"code","ea8bc3c0":"code","722df3d6":"code","7cb3909b":"code","e95306e3":"code","19624805":"code","ccabada2":"code","c24a037e":"code","c8542ffb":"code","a913d571":"code","14c472fe":"code","b032b991":"code","4c1efb89":"code","aa5bf82a":"code","95e6cfdd":"code","12599b11":"markdown","899fa17a":"markdown","c2a7feff":"markdown","45397a25":"markdown","f507615d":"markdown","204d6930":"markdown","5d20f4fa":"markdown","110ba72b":"markdown","a5d669a5":"markdown","1c8c59aa":"markdown","15d749a4":"markdown"},"source":{"9d7f92f6":"#\u5bfc\u5165\u5904\u7406\u6570\u636e\u5305\nimport numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\n#\u5bfc\u5165\u6570\u636e\n#\u8bad\u7ec3\u6570\u636e\u96c6\ntrain = pd.read_csv('..\/input\/machine-learning-hebei-north-university-big-data\/train.csv')\n#\u6d4b\u8bd5\u6570\u636e\u96c6\ntest = pd.read_csv('..\/input\/machine-learning-hebei-north-university-big-data\/test.csv')\nprint('\u8bad\u7ec3\u6570\u636e\u96c6\uff1a',train.shape,' \u6d4b\u8bd5\u6570\u636e\u96c6\uff1a',test.shape)","8f0f384d":"full = train.append(test,ignore_index='True')\nprint('\u5408\u5e76\u540e\u7684\u6570\u636e\u96c6\uff1a',full.shape)","0c923265":"full.head()","5776332e":"full.describe()","9dacb91d":"full.info()","d66a7090":"full['Age']=full['Age'].fillna(full['Age'].mean())\nfull['Fare']=full['Fare'].fillna(full['Fare'].mean())","859022ea":"full['Embarked'].head()","8320de11":"full['Embarked'].value_counts()","40c62075":"full['Embarked']= full['Embarked'].fillna('S')","3be19dec":"full.info()","792abf57":"full['Cabin']=full['Cabin'].fillna('U')\n","165bf5d9":"full['Sex']=full['Sex'].map({'male':1,'female':0})\nfull['Sex'].head()","55c9feac":"EmbarkedDf = pd.DataFrame()\nEmbarkedDf = pd.get_dummies(full['Embarked'],prefix='Embarked')\nEmbarkedDf.head()","d0dab9fe":"full = pd.concat([full,EmbarkedDf],axis=1)\nfull=full.drop('Embarked',axis=1)","5203d561":"PclassDf = pd.DataFrame()\nPclassDf=pd.get_dummies(full['Pclass'],prefix='Pclass')\nPclassDf.head()","d4e830b2":"full=pd.concat([full,PclassDf],axis=1)\nfull=full.drop('Pclass',axis=1)","0092867b":"#\u5b9a\u4e49\u51fd\u6570\uff1a\u4ece\u59d3\u540d\u4e2d\u83b7\u53d6\u5934\u8854\ndef getTitle(name):\n    str1 = name.split(',')[1]\n    str2 = str1.split('.')[0]\n    #strip() \u65b9\u6cd5\u7528\u4e8e\u79fb\u9664\u5b57\u7b26\u4e32\u5934\u5c3e\u6307\u5b9a\u7684\u5b57\u7b26\uff08\u9ed8\u8ba4\u4e3a\u7a7a\u683c\uff09\n    str3=str2.strip()\n    return str3\n\nTitleDf=pd.DataFrame()\nfull['Name']=full['Name'].map(getTitle)\nfull['Name'].head()","bd3a9740":"title_mapDict = {\n                    \"Capt\":       \"Officer\",\n                    \"Col\":        \"Officer\",\n                    \"Major\":      \"Officer\",\n                    \"Jonkheer\":   \"Royalty\",\n                    \"Don\":        \"Royalty\",\n                    \"Sir\" :       \"Royalty\",\n                    \"Dr\":         \"Officer\",\n                    \"Rev\":        \"Officer\",\n                    \"the Countess\":\"Royalty\",\n                    \"Dona\":       \"Royalty\",\n                    \"Mme\":        \"Mrs\",\n                    \"Mlle\":       \"Miss\",\n                    \"Ms\":         \"Mrs\",\n                    \"Mr\" :        \"Mr\",\n                    \"Mrs\" :       \"Mrs\",\n                    \"Miss\" :      \"Miss\",\n                    \"Master\" :    \"Master\",\n                    \"Lady\" :      \"Royalty\"\n                    }\nfull['Name']=full['Name'].map(title_mapDict)\nTitleDf = pd.get_dummies(full['Name'])\nTitleDf.head()","cb76d824":"full = pd.concat([full,TitleDf],axis=1)\nfull= full.drop('Name',axis=1)","549ddb78":"CabinDf = pd.DataFrame()\nfull['Cabin'] = full['Cabin'].map(lambda a:a[0])\nCabinDf = pd.get_dummies(full['Cabin'],prefix='Cabin')\nCabinDf.head()","2b0e472d":"full = pd.concat([full,CabinDf],axis=1)\nfull = full.drop('Cabin',axis =1)","a60aa9e6":"FamilyDf=pd.DataFrame()\nFamilyDf['FamilySize']= full['Parch']+full['SibSp']+1","3413e840":"FamilyDf['Family_Small']=FamilyDf['FamilySize'].map(lambda a:1 if a == 1 else 0)\nFamilyDf['Family_Medium']=FamilyDf['FamilySize'].map(lambda a:1 if 2 <= a <=4 else 0)\nFamilyDf['Family_Large']=FamilyDf['FamilySize'].map(lambda a:1 if a >= 5 else 0)\nFamilyDf.head()","b13a4813":"full = pd.concat([full,FamilyDf],axis=1)\nfull.head()","99c5c871":"#\u76f8\u5173\u6027\u77e9\u9635\ncorrDf = full.corr() \ncorrDf","907886a0":"corrDf['Survived'].sort_values(ascending=False)","5fa453d5":"import seaborn as sns\nfig = plt.figure(figsize=(10,7))\nax=sns.heatmap(corrDf,vmin=-1,annot=False,cmap=\"rainbow\")","67070a34":"full_X = pd.concat([TitleDf,PclassDf,FamilyDf,full['Fare'],CabinDf,EmbarkedDf,full['Sex']],axis=1)\nfull_X.head()","f8986458":"#\u539f\u59cb\u6570\u636e\u96c6\u6709891\u884c\nsourceRow = 891;\nsource = full.loc[0:sourceRow-1,:]","e6236a11":"Sur_m = source.loc[source['Sex']==1,'Survived'].value_counts()\nSur_f = source.loc[source['Sex']==0,'Survived'].value_counts()\nSexDf = pd.DataFrame({'male':Sur_m,'female':Sur_f})\nSexDf","8e10eaa7":"fig = plt.figure(figsize=(10,4))\n# \u7ed8\u5236\u56fe1\nax1 = plt.subplot(1,2,1)\n#\u5bf9\u8f6c\u7f6e\u540e\u7684\u6570\u636e\u96c6\u753b\u56fe\nSexDf.T.plot(ax=ax1,kind = 'bar',stacked = True,color=['orange','olivedrab'],fontsize=12)\nplt.title('Sex and Survival Num')\nplt.xlabel('Sex')\nplt.ylabel('Survival Num')\nplt.xticks(rotation = 0)\nplt.legend(labels=['Not Survived','Survived'])\n# \u7ed8\u5236\u56fe2\nax2 = plt.subplot(1,2,2)\nfor i in SexDf.columns:\n    SexDf.loc['Survived Rate',i] = SexDf.loc[1,i]\/SexDf[i].sum()\nSexDf.loc['Survived Rate'].plot(ax=ax2,kind='bar', color='olivedrab',fontsize=12)\nplt.title('Sex and Survival Rate')\nplt.xlabel('Sex')\nplt.ylabel('Survival Rate')\nplt.xticks(rotation = 0)\nplt.show()","0c8ee302":"Sur_m = source.loc[source['Sex']==1,'Survived'].value_counts()\nSur_f = source.loc[source['Sex']==0,'Survived'].value_counts()\nSexDf = pd.DataFrame({'male':Sur_m,'female':Sur_f})\nSexDf","30952cb3":"fig = plt.figure(figsize = (10,4))\n# \u7ed8\u5236\u56fe1\nax1 = plt.subplot(1,2,1)\nEmbarkedDf.T.plot(ax=ax1,kind='bar',stacked=True, color=['orange','olivedrab'],fontsize=12)\nplt.title('Embarked and Survived Num')\nplt.xlabel('Embarked')\nplt.ylabel('Survived Num')\nplt.xticks(rotation=0)\nplt.legend(labels=['Not Survived','Survived'])\n# \u7ed8\u5236\u56fe2\nax2 = plt.subplot(1,2,2)\nfor i in EmbarkedDf.columns:\n    EmbarkedDf.loc['Survived Rate',i]=EmbarkedDf.loc[1,i]\/EmbarkedDf[i].sum()\nEmbarkedDf.loc['Survived Rate'].plot(ax=ax2,kind='bar',color='olivedrab',fontsize=12)\nplt.title('Embarked and Survival Rate')\nplt.xlabel('Embarked')\nplt.ylabel('Survival Rate')\nplt.xticks(rotation=0)\nplt.show()","56dd263c":"Sur_P1 = source.loc[source['Pclass_1']==1,'Survived'].value_counts()\nSur_P2 = source.loc[source['Pclass_2']==1,'Survived'].value_counts()\nSur_P3 = source.loc[source['Pclass_3']==1,'Survived'].value_counts()\nPclassDf = pd.DataFrame({'Pclass_1':Sur_P1,'Pclass_2':Sur_P2,'Pclass_3':Sur_P3})\nPclassDf","6ed4b1e6":"fig = plt.figure(figsize=(12,5))\n# \u7ed8\u5236\u56fe1\nax1 = plt.subplot(1,2,1)\nPclassDf.T.plot(ax=ax1,kind='bar',stacked=True, color=['orange','olivedrab'],fontsize=12)\nplt.title('Pclass and Survived Num')\nplt.xlabel('Pclass')\nplt.ylabel('Survived Num')\nplt.xticks(rotation=0)\nplt.legend(labels=['Not Survived','Survived'])\n# \u7ed8\u5236\u56fe2\nax2 = plt.subplot(1,2,2)\nfor i in PclassDf.columns:\n    PclassDf.loc['Survived Rate',i]=PclassDf.loc[1,i]\/PclassDf[i].sum()\nPclassDf.loc['Survived Rate'].plot(ax=ax2,kind='bar',color='olivedrab',fontsize=12)\nplt.title('Pclass and Survival Rate')\nplt.xlabel('Pclass')\nplt.ylabel('Survival Rate')\nplt.xticks(rotation=0)\nplt.show()","e9c4c341":"Sur_Master = source.loc[source['Master']==1,'Survived'].value_counts()\nSur_Miss = source.loc[source['Miss']==1,'Survived'].value_counts()\nSur_Mr = source.loc[source['Mr']==1,'Survived'].value_counts()\nSur_Mrs = source.loc[source['Mrs']==1,'Survived'].value_counts()\nSur_Officer = source.loc[source['Officer']==1,'Survived'].value_counts()\nSur_Royalty = source.loc[source['Royalty']==1,'Survived'].value_counts()\nStatusDf = pd.DataFrame({'Master':Sur_Master,'Miss':Sur_Miss,'Mr':Sur_Mr,\n                        'Mrs':Sur_Mrs,'Officer':Sur_Officer,'Royalty':Sur_Royalty})\nStatusDf\n","ba3ebcb8":"fig = plt.figure(figsize=(12,5))\n#\u7ed8\u5236\u56fe1\nax1 = plt.subplot(1,2,1)\nStatusDf.T.plot(ax=ax1, kind='bar',stacked=True, color=['orange','olivedrab'],fontsize=12)\nplt.title('Status and Survived Num')\nplt.xlabel('Status')\nplt.ylabel('Survived Num')\nplt.xticks(rotation =0)\nplt.legend(labels=['Not Survived','Survived'])\n#\u7ed8\u5236\u56fe2\nax2 = plt.subplot(1,2,2)\nfor i in StatusDf.columns:\n    StatusDf.loc['Survived Rate',i]=StatusDf.loc[1,i]\/StatusDf[i].sum()\nStatusDf.loc['Survived Rate'].plot(ax = ax2,kind='bar',color = 'olivedrab',fontsize=12)\nplt.title('Status and Survived Rate')\nplt.xlabel('Status')\nplt.ylabel('Survived Rate')\nplt.xticks(rotation=0)\nplt.show()","a27891e4":"source['Fare'].describe()","1448ab2f":"#\u5bf9\u4e58\u5ba2\u6309\u7167\u8239\u7968\u4ef7\u683c\u7684\u56db\u5206\u4f4d\u6570\u8fdb\u884c\u5206\u6bb5\nbins=[0,8,15,31,600]\nsource['FareLevel']=pd.cut(source['Fare'],bins,labels=['0-8','8-15','15-31','31-600'])\nSur_F1 = source.loc[source['FareLevel']=='0-8','Survived'].value_counts()\nSur_F2 = source.loc[source['FareLevel']=='8-15','Survived'].value_counts()\nSur_F3 = source.loc[source['FareLevel']=='15-31','Survived'].value_counts()\nSur_F4 = source.loc[source['FareLevel']=='31-600','Survived'].value_counts()\nFareDf = pd.DataFrame({'0-8':Sur_F1,'8-15':Sur_F2,'15-31':Sur_F3,'31-600':Sur_F4})\nFareDf","ea8bc3c0":"fig = plt.figure(figsize=(12,5))\n#\u7ed8\u5236\u56fe1\nax1 = plt.subplot(1,2,1)\nFareDf.T.plot(ax=ax1, kind='bar',stacked=True, color=['orange','olivedrab'],fontsize=12)\nplt.title('Fare and Survived Num')\nplt.xlabel('Fare')\nplt.ylabel('Survived Num')\nplt.xticks(rotation =0)\nplt.ylim(0, 300)\nplt.legend(labels=['Not Survived','Survived'])\n#\u7ed8\u5236\u56fe2\nax2 = plt.subplot(1,2,2)\nfor i in FareDf.columns:\n    FareDf.loc['Survived Rate',i]=FareDf.loc[1,i]\/FareDf[i].sum()\nFareDf.loc['Survived Rate'].plot(ax = ax2,kind='bar',color = 'olivedrab',fontsize=12)\nplt.title('Fare and Survived Rate')\nplt.xlabel('Fare')\nplt.ylabel('Survived Rate')\nplt.xticks(rotation=0)\nplt.show()","722df3d6":"Sur_small=source.loc[source['Family_Small']==1,'Survived'].value_counts()\nSur_medium=source.loc[source['Family_Medium']==1,'Survived'].value_counts()\nSur_large=source.loc[source['Family_Large']==1,'Survived'].value_counts()\nFamilyDf=pd.DataFrame({'Family_Small':Sur_small,'Family_Medium':Sur_medium,'Family_Large':Sur_large})\nFamilyDf","7cb3909b":"fig = plt.figure(figsize=(12,5))\n#\u7ed8\u5236\u56fe1\nax1 = plt.subplot(1,2,1)\nFamilyDf.T.plot(ax=ax1, kind='bar',stacked=True, color=['orange','olivedrab'],fontsize=12)\nplt.title('Family and Survived Num')\nplt.xlabel('Family')\nplt.ylabel('Survived Num')\nplt.xticks(rotation =0)\nplt.legend(labels=['Not Survived','Survived'])\n#\u7ed8\u5236\u56fe2\nax2 = plt.subplot(1,2,2)\nfor i in FamilyDf.columns:\n    FamilyDf.loc['Survived Rate',i]=FamilyDf.loc[1,i]\/FamilyDf[i].sum()\nFamilyDf.loc['Survived Rate'].plot(ax = ax2,kind='bar',color = 'olivedrab',fontsize=12)\nplt.title('Family and Survived Rate')\nplt.xlabel('Family')\nplt.ylabel('Survived Rate')\nplt.xticks(rotation=0)\nplt.show()","e95306e3":"Sex_FS=(source.loc[source['Family_Small']==1,'Sex'].value_counts())\/source['Family_Small'].sum()\nSex_FM=(source.loc[source['Family_Medium']==1,'Sex'].value_counts())\/source['Family_Medium'].sum()\nSex_FL=(source.loc[source['Family_Large']==1,'Sex'].value_counts())\/source['Family_Large'].sum()\nFamilySexDf=pd.DataFrame({'Family_Small':Sex_FS,'Family_Medium':Sex_FM,'Family_Large':Sex_FL})\nFamilySexDf","19624805":"fig = plt.figure(figsize=(10,5))\nFamilySexDf.T.plot(kind='barh', color=['pink','cornflowerblue'],fontsize=12)\nplt.title('Family and Sex')\nplt.xlabel('Rate')\nplt.ylabel('Family')\nplt.xticks(rotation =0)\nplt.legend(labels=['female','male'])\nplt.show()","ccabada2":"def get_pclass(row):\n    for c in PclassDf.columns:\n        if row[c]==1:\n            return c\nsource['Pclass']=source.apply(get_pclass, axis=1)\nPclass_FS=(source.loc[source['Family_Small']==1,'Pclass'].value_counts())\/source['Family_Small'].sum()\nPclass_FM=(source.loc[source['Family_Medium']==1,'Pclass'].value_counts())\/source['Family_Medium'].sum()\nPclass_FL=(source.loc[source['Family_Large']==1,'Pclass'].value_counts())\/source['Family_Large'].sum()\nFamilyPclassDf=pd.DataFrame({'Family_Small':Pclass_FS,'Family_Medium':Pclass_FM,'Family_Large':Pclass_FL})\nFamilyPclassDf\n","c24a037e":"FamilyPclassDf.T.plot(kind='barh',color=['yellowgreen','darkgreen','darkorange'],fontsize=12)\nplt.title('Family and Pclass')\nplt.xlabel('Rate')\nplt.ylabel('Family')\nplt.xticks(rotation=0)\nplt.show()","c8542ffb":"#\u539f\u59cb\u6570\u636e\u96c6\uff1a\u7279\u5f81\nsource_X = full_X.loc[0:sourceRow-1,:]\n#\u539f\u59cb\u6570\u636e\u96c6\uff1a\u6807\u7b7e\nsource_y = full.loc[0:sourceRow-1,'Survived']\n#\u9884\u6d4b\u6570\u636e\u96c6\uff1a\u7279\u5f81\npred_X = full_X.loc[sourceRow:,:]\nprint('\u539f\u59cb\u6570\u636e\u96c6\uff1a',source_X.shape)\nprint('\u9884\u6d4b\u6570\u636e\u96c6\uff1a',pred_X.shape)","a913d571":"from sklearn.model_selection import train_test_split\ntrain_X,test_X,train_y,test_y = train_test_split(source_X,source_y,train_size=0.8)\nprint ('\u539f\u59cb\u6570\u636e\u96c6\u7279\u5f81\uff1a',source_X.shape, '\u8bad\u7ec3\u6570\u636e\u96c6\u7279\u5f81\uff1a',train_X.shape ,'\u6d4b\u8bd5\u6570\u636e\u96c6\u7279\u5f81\uff1a',test_X.shape)\nprint ('\u539f\u59cb\u6570\u636e\u96c6\u6807\u7b7e\uff1a',source_y.shape, '\u8bad\u7ec3\u6570\u636e\u96c6\u6807\u7b7e\uff1a',train_y.shape ,'\u6d4b\u8bd5\u6570\u636e\u96c6\u6807\u7b7e\uff1a',test_y.shape)","14c472fe":"from sklearn.svm import SVC, LinearSVC\nmodel = SVC()","b032b991":"model.fit(train_X,train_y)","4c1efb89":"model.score(test_X,test_y)","aa5bf82a":"pred_y = model.predict(pred_X)","95e6cfdd":"pred_y=pred_y.astype(int)\n#\u4e58\u5ba2id\npassenger_id = full.loc[sourceRow:,'PassengerId']\n#\u6570\u636e\u6846\uff1a\u4e58\u5ba2id\uff0c\u9884\u6d4b\u751f\u5b58\u60c5\u51b5\u7684\u503c\npredDf = pd.DataFrame( \n    { 'PassengerId': passenger_id , \n     'Survived': pred_y } )\npredDf.shape\npredDf.head()\n#\u4fdd\u5b58\u7ed3\u679c\npredDf.to_csv( 'titanic_pred.csv' , index = False )","12599b11":"\u6570\u636e\u5206\u6790","899fa17a":"\u8bad\u7ec3\u6a21\u578b","c2a7feff":"\u6570\u636e\u9884\u5904\u7406","45397a25":"\u7279\u5f81\u9009\u62e9","f507615d":"\u6570\u636e\u6e05\u6d17","204d6930":"\u903b\u8f91\u56de\u5f52\u7b97\u6cd5\u8fdb\u884c\u9884\u6d4b\u3002","5d20f4fa":"\u6784\u5efa\u6a21\u578b","110ba72b":"\u5206\u7c7b\u6570\u636e","a5d669a5":"\u5206\u7c7b\u6570\u636e\uff1a\u6709\u76f4\u63a5\u7c7b\u522b\u7684","1c8c59aa":"\u8bc4\u4f30\u6a21\u578b","15d749a4":"\u65b9\u6848\u5b9e\u65bd"}}