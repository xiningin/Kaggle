{"cell_type":{"a11ed851":"code","2834f7f8":"code","e4662d19":"code","29309d1a":"code","bb53ece5":"code","64496c88":"code","9eb1590b":"code","e50c4ad3":"code","17662eef":"code","b98fcdeb":"code","885d98b1":"code","d006e2c4":"code","bd839cb5":"code","3da4733a":"code","f8c08f6d":"code","6f1404e3":"code","80f120e6":"code","1e7aaec5":"code","a838b79c":"code","350d9cd4":"code","0d6d616c":"code","48cca7b5":"code","95b9e025":"code","95142964":"code","5ac23031":"code","ecc32ed7":"code","318872c6":"code","91a0fb7c":"code","b17643fb":"code","d9a1154d":"code","36640757":"code","525c3920":"code","c9deaf4a":"code","f1212ddd":"code","a83db51e":"code","297c95ff":"code","b79badbb":"code","411da1b0":"code","96449933":"code","d88d62d1":"code","421652fe":"code","9a43fbda":"code","7ba4253c":"code","4c047531":"code","49caa75e":"code","9a85506e":"markdown","fc0c371f":"markdown","92f65c0b":"markdown","1666dbfc":"markdown","f53fd3b9":"markdown","2adb2793":"markdown","3b21346e":"markdown","1e5bff1a":"markdown","58aa5ecd":"markdown","159c0703":"markdown","11dad0dd":"markdown","a79c6b88":"markdown","9f482883":"markdown","9a56560b":"markdown","fa4ba7e5":"markdown","3182d76f":"markdown","a3d3cc34":"markdown","2e3fd4cf":"markdown","a2c13a94":"markdown","8d6e33a9":"markdown","4b3c22e9":"markdown","4573ea5b":"markdown","9843c015":"markdown","e24be960":"markdown","be9b62f3":"markdown","f541769f":"markdown","81f8040c":"markdown","d251740f":"markdown","f6ba3e23":"markdown","64359804":"markdown","7c313438":"markdown","19e83785":"markdown","b6483505":"markdown"},"source":{"a11ed851":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2834f7f8":"a=[1,2,3,4]\nplt.plot(a)\nplt.show()","e4662d19":"plt.style.available","29309d1a":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","bb53ece5":"train_df.columns","64496c88":"train_df.head()","9eb1590b":"train_df.describe()","e50c4ad3":"train_df.info()","17662eef":"def bar_plot (variable):\n    \"\"\"\n        input : variable ex : \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    #get feature\n    var = train_df[variable]\n    #count number of categorical variable\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}:\\n{}\".format(variable,varValue))","b98fcdeb":"category1 = [\"Survived\", \"Sex\",\"Pclass\"]\nfor c in category1:\n    bar_plot(c)","885d98b1":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","d006e2c4":"def plot_hist(variable):\n    plt.figure(figsize =(9,3))\n    plt.hist(train_df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()\n    ","bd839cb5":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","3da4733a":"# Pclass vs Survived\n\ntrain_df [[\"Pclass\", \"Survived\"]].groupby ([\"Pclass\"], as_index = False).mean().sort_values(by =\"Survived\", ascending =False)","f8c08f6d":"# Sex vs Survived\n\ntrain_df [[\"Sex\", \"Survived\"]].groupby ([\"Sex\"], as_index = False).mean().sort_values(by =\"Survived\", ascending =False)","6f1404e3":"# SibSp vs Survived\n\ntrain_df [[\"SibSp\", \"Survived\"]].groupby ([\"SibSp\"], as_index = False).mean().sort_values(by =\"Survived\", ascending =False)","80f120e6":"# Parch vs Survived\n\ntrain_df [[\"Parch\", \"Survived\"]].groupby ([\"Parch\"], as_index = False).mean().sort_values(by =\"Survived\", ascending =False)","1e7aaec5":"def detect_outliers(df, features):\n    outlier_indices=[]\n    \n    for c in features:\n        #1 quartile\n        Q1 = np.percentile(df[c], 25)\n        #3 quartile\n        Q3 = np.percentile(df[c], 75)\n        # IQR\n        IQR = Q3 - Q1\n        #Outlier Step\n        outlier_step = IQR * 1.5\n        #detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 - outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v>2)\n    \n    return multiple_outliers","a838b79c":"train_df.loc[detect_outliers(train_df, [\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","350d9cd4":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df, [\"Age\",\"SibSp\",\"Parch\",\"Fare\"]), axis=0).reset_index(drop=True)","0d6d616c":"train_df","48cca7b5":"train_df_len = len(train_df)\ntrain_df= pd.concat([train_df, test_df], axis=0).reset_index(drop=True)","95b9e025":"train_df.columns[train_df.isnull().any()]","95142964":"train_df.isnull().sum()","5ac23031":"train_df[train_df[\"Embarked\"].isnull()]","ecc32ed7":"train_df.boxplot(column=\"Fare\", by = \"Embarked\")","318872c6":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","91a0fb7c":"train_df[train_df[\"Fare\"].isnull()]","b17643fb":"### train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))\ntrain_df[train_df[\"Fare\"].isnull()]","d9a1154d":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt=\".2f\" )\nplt.show()","36640757":"g = sns.factorplot(x=\"SibSp\", y=\"Survived\", data=train_df, kind=\"bar\", size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","525c3920":"g = sns.factorplot(x=\"Parch\", y=\"Survived\", data=train_df, kind=\"bar\", size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","c9deaf4a":"g = sns.factorplot(x=\"Pclass\", y=\"Survived\", data=train_df, kind=\"bar\", size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","f1212ddd":"g = sns.FacetGrid(train_df, col=\"Survived\")\ng.map(sns.distplot, \"Age\", bins=30)\nplt.show()","a83db51e":"g = sns.FacetGrid(train_df, col=\"Survived\", row=\"Pclass\", size=2)\ng.map(sns.distplot, \"Age\", bins=25)\nplt.show()","297c95ff":"g = sns.FacetGrid(train_df, row=\"Embarked\", size=2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\nplt.show()","b79badbb":"g = sns.FacetGrid(train_df, row=\"Embarked\", col=\"Survived\", size=2.3)\ng.map(sns.barplot,\"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","411da1b0":"train_df[train_df[\"Age\"].isnull()]","96449933":"sns.factorplot(x=\"Sex\", y=\"Age\", data=train_df, kind=\"box\")\nplt.show()","d88d62d1":"sns.factorplot(x=\"Sex\", y=\"Age\", hue=\"Pclass\", data=train_df, kind=\"box\")\nplt.show()","421652fe":"sns.factorplot(x=\"Parch\", y=\"Age\", data=train_df, kind=\"box\")\nsns.factorplot(x=\"SibSp\", y=\"Age\", data=train_df, kind=\"box\")\nplt.show()","9a43fbda":"train_df[\"Sex\"]=[1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","7ba4253c":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot=True)\nplt.show()","4c047531":"index_nan_age =list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][(train_df[\"SibSp\"]==train_df.iloc[i][\"SibSp\"])&(train_df[\"Parch\"]==train_df.iloc[i][\"Parch\"])&(train_df[\"Pclass\"]==train_df.iloc[i][\"Pclass\"])].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n            train_df[\"Age\"].iloc[i]=age_med","49caa75e":"train_df[train_df[\"Age\"].isnull()]","9a85506e":"Sex is not informative for age prediction, age distribution seems to be same.","fc0c371f":"<a id = '1'>\n    \n# Load and Check Data","92f65c0b":"<a id = '16'>\n\n# Age -- Survived","1666dbfc":"* Age >= 10 has a high survival rate\n* Oldest passenger (80) survived\n* Large number of 20 years old did not survive\n* Most passengers are in 15-35 age range\n* Use age feature as a training\n* Use age distribution for missing value of ages","f53fd3b9":"* SibSp and Parch can be used for new feature extraction with th=3\n* small families have more chance to survive\n* there is a std in survival of passenger with parch=3","2adb2793":"* Having a lot of SibSp have less change to survive\n* If SibSp == 0 or 1 or 2, passanger has more chance to survive\n* We can consider a new feature describing these categories","3b21346e":"* float64(2): Fare ve Age\n* int64(5): Pclass, sibsp, parch, passengerId and survived\n* object(5): Cabin, embarked, ticket, name and sex","1e5bff1a":"<a id = '17'>\n\n# Age -- Survived -- Age","58aa5ecd":"<a id = '9'>\n\n### Find Missing Value","159c0703":"# Introduction\nThe sinking of Titanic is one of the most notorious shipwrecks all the history. In 1912, during her voyage, Titanic sank after colliding with an iceberg, 1502 out of 2224 passengers and crew killed.\n\nThis exploring data analysis is focusing machine learning bases. We are trying to learn what we gonna use in machine learning tools and models.\n\n<font color ='blue'>\nContent:\n    \n1. [Load and Check Data](#1)\n2. [Variable Desc](#2)\n    * [Univariate Variable Analysis](#3)\n    * [Categorical Variable](#4)\n    * [Numerical Variable](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detectiton](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Visualization](#11)\n    * [Corelation Between SibSp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Age -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing Age Feature](#20)","11dad0dd":"<a id = '15'>\n\n# Pclass -- Survived","a79c6b88":"<a id = '7'>\n    \n## Outlier Detectiton","9f482883":"Age is not correlated with sex but it is correlated with parch, sibsp and pclass","9a56560b":"<a id = '19'>\n\n# Embarked -- Sex -- Fare -- Survived","fa4ba7e5":"<a id = '12'>\n\n## Corelation Between Sibsp -- Parch -- Age -- Fare -- Survived","3182d76f":"* Passengers who pay higher fare have better survival. Fare can be used categorcal for training","a3d3cc34":"<a id = '5'>\n    \n## Numerical Variable","2e3fd4cf":"<a id = '18'>\n\n# Embarked -- Sex -- Pclass -- Survived","a2c13a94":"<a id = '11'>\n\n# Visualization","8d6e33a9":"<a id = '10'>\n\n### Fill Missing Value\n* Embarked has 2 missing values\n* Fare has only 1","4b3c22e9":"<a id = '14'>\n\n# Parch -- Survived","4573ea5b":"<a id = '6'>\n\n## Basic Data Analysis\n* Pclass - Survived\n* Sex -Survived\n* SibSp - Survived\n* Parch - Survived","9843c015":"<a id = '4'>\n\n## Categorical Variable","e24be960":"* Pclass is important for model training","be9b62f3":"All null data has been filled with most related datas","f541769f":"<a id = '2'>\n    \n# Variable Description\n    \n1. PassengerId: Unique ID\n1. Survived: Dead or alive\n1. Pclass: Class\n1. Name\n1. Sex\n1. Age\n1. SibSp: Number of siblings or spouses\n1. Parch: Number of parent or children\n1. Ticket\n1. Fare\n1. Cabin\n1. Embarked: Ports that passengers embarked (C: Cherbourg, Q: Queenstown, S: Southhampton)\n    ","81f8040c":"1st class passengers are older than 2nd class, and 2nd is older than 3rd class.","d251740f":"Fare feature seems to have correlation with survived feature (0.26)","f6ba3e23":"<a id = '13'>\n\n# SibSp -- Survived","64359804":" <a id = '3'>\n \n ## Univariate Variable\n     Categorical Variable: Survived, Sex, Pclass, ...\n     Numerical Variable: Age, Fare, ...\n ","7c313438":"<a id = '20'>\n\n# Fill Missing Age Feature","19e83785":"* Female passengers have much better survival rate then males\n* Male passengers have better survival rate in pclass 3 in C\n* Embarked and sex will be used in training","b6483505":"<a id = '8'>\n\n# Missing Value\n\n* Find Missing Value\n* Fill Missing Value"}}