{"cell_type":{"1bf22bc8":"code","91c9a8d3":"code","fee3b1b4":"code","43355402":"code","8e707fea":"code","4a77e592":"code","10625348":"code","c04dfec9":"code","3bfcdbd6":"code","c55fc603":"code","4e176958":"code","33a01d19":"code","b6a4d3eb":"code","e7e2b4e7":"code","7795cf22":"code","fdbaccbf":"code","e43e755d":"code","76c664a8":"code","dd11e32f":"code","0ec556fe":"code","9f254dd3":"code","f478d4ba":"code","fc793445":"code","c0b14113":"code","6b887d91":"code","b87b82d5":"code","e8540dc4":"code","30c47309":"code","9ec29b67":"code","7007f6e1":"code","ee4ec0b5":"code","d7839e7d":"code","716179dc":"code","ef8b5870":"code","6e7869c1":"code","853ebe93":"code","e9d2273a":"code","0312b556":"code","fd6200b8":"code","0c098b12":"code","b13f444c":"code","28d789ff":"code","227beb12":"code","c075b31f":"code","fc1514e3":"markdown","280f5543":"markdown","3f6ce4f9":"markdown","199a5b82":"markdown","b2eb3749":"markdown","282a9014":"markdown","677b4f98":"markdown","c8921958":"markdown","7b497738":"markdown","2856b0f6":"markdown","193a4deb":"markdown"},"source":{"1bf22bc8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","91c9a8d3":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')","fee3b1b4":"train_df.head()","43355402":"train_df.tail()","8e707fea":"test_df.head()","4a77e592":"train_df.shape, test_df.shape","10625348":"train_df.info()","c04dfec9":"test_df.info()","3bfcdbd6":"train_df.describe()","c55fc603":"train_df.describe(include=['O'])","4e176958":"test_df.describe()","33a01d19":"test_df.describe(include=['O'])","b6a4d3eb":"train_df.isna().sum()","e7e2b4e7":"test_df.isna().sum()","7795cf22":"train_df['Age'] = train_df['Age'].fillna(train_df['Age'].median())\ntest_df['Age'] = test_df['Age'].fillna(test_df['Age'].median())","fdbaccbf":"train_df['Embarked'].value_counts()","e43e755d":"train_df['Embarked'] = train_df['Embarked'].fillna('S')","76c664a8":"train_df = train_df.drop(columns=['Cabin'])\ntest_df = test_df.drop(columns=['Cabin'])","dd11e32f":"test_df['Fare'] = test_df['Fare'].fillna(test_df['Fare'].median())","0ec556fe":"### with missing age, if they have family memeber\n### ","9f254dd3":"sns.scatterplot(data=train_df, x=\"Age\", y=\"Fare\")","f478d4ba":"sns.boxplot(x=train_df[\"Fare\"])","fc793445":"sns.violinplot(x=train_df[\"Fare\"])","c0b14113":"train_df[\"Premium_Fare\"] = 0\ntest_df[\"Premium_Fare\"] = 0","6b887d91":"train_df.loc[train_df[\"Fare\"]>150, \"Premium_Fare\"] = 1\ntest_df.loc[test_df[\"Fare\"]>150, \"Premium_Fare\"] = 1","b87b82d5":"train_df.loc[train_df[\"Fare\"]>150, \"Fare\"] = 150\ntest_df.loc[test_df[\"Fare\"]>150, \"Fare\"] = 150","e8540dc4":"g = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","30c47309":"corr_mat = train_df.drop(columns='PassengerId').corr()\ncorr_mat","9ec29b67":"cmap = sns.color_palette(\"vlag\", as_cmap=True)\nsns.heatmap(corr_mat, cmap=cmap, vmin=-1, vmax=1,annot=True)","7007f6e1":"f, ax = plt.subplots(3, 1, figsize=(12, 12))\n\nsns.histplot(train_df.loc[train_df['Pclass']==1, 'Fare'], kde=True, ax=ax[0])\nax[0].set_title('Fares in Pclass 1')\n\nsns.histplot(train_df.loc[train_df['Pclass']==2, 'Fare'], kde=True, ax=ax[1])\nax[1].set_title('Fares in Pclass 2')\n\nsns.histplot(train_df.loc[train_df['Pclass']==3, 'Fare'], kde=True, ax=ax[2])\nax[2].set_title('Fares in Pclass 3')\n\nplt.show()","ee4ec0b5":"train_df['Family'] = train_df['SibSp'] + train_df['Parch']\ntest_df['Family'] = test_df['SibSp'] + test_df['Parch']","d7839e7d":"train_df['Alone']=0\ntrain_df.loc[train_df['Family']==0,'Alone'] = 1\n\ntest_df['Alone']=0\ntest_df.loc[test_df['Family']==0,'Alone'] = 1","716179dc":"target = 'Survived'\ncat_feat = [\n    'Sex',\n    'Embarked'\n]\nnum_feat = [\n    'Pclass',\n    'Age',\n    'SibSp',\n    'Parch',\n    'Family',\n    'Alone',\n    'Fare',\n    'Premium_Fare'\n]","ef8b5870":"train_cat_df = pd.get_dummies(train_df[cat_feat], drop_first=True, dtype=float)\ntest_cat_df = pd.get_dummies(test_df[cat_feat], drop_first=True, dtype=float)","6e7869c1":"X_train = pd.concat([train_df[num_feat].astype(float), train_cat_df], axis=1)\nX_test = pd.concat([test_df[num_feat].astype(float), test_cat_df], axis=1)","853ebe93":"y_train = train_df[target]","e9d2273a":"X_train.info()","0312b556":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","fd6200b8":"log_reg = LogisticRegression()\nlog_reg.fit(X_train, y_train)","0c098b12":"# rand_for = RandomForestClassifier()\n# rand_for.fit(X_train, y_train)","b13f444c":"# y_pred = rand_for.predict(X_test)","28d789ff":"y_pred = log_reg.predict(X_test)","227beb12":"submission_df = pd.DataFrame({\"PassengerId\": test_df[\"PassengerId\"], \"Survived\": y_pred})","c075b31f":"submission_df.to_csv('submission.csv', index=False)","fc1514e3":"## First Look","280f5543":"# Try AutoGluon!","3f6ce4f9":"### Handling Missing Values","199a5b82":"## Load Data","b2eb3749":"## EDA","282a9014":"### Sex column","677b4f98":"Binned Fare Survived Statistics","c8921958":"### Fare","7b497738":"## Modelling","2856b0f6":"## Feature Engineering","193a4deb":"### Choosing Features"}}