{"cell_type":{"6db281ce":"code","6a92860b":"code","10f7ca39":"code","ae999e39":"code","4c534122":"code","f44dcbcd":"code","c979eaf5":"code","64033e13":"code","adff6647":"code","3f4270d9":"code","199fba90":"code","e3b431f9":"code","d29c1aa5":"code","0d24d574":"code","738419ca":"code","bc772ed8":"code","c1f09cee":"code","57caa219":"code","10bc2d08":"code","f2360f52":"code","da7e1910":"code","1b414fbf":"code","996871c8":"code","16bb0c32":"code","333f1ac3":"code","0f42f672":"code","948ae528":"code","390c8f65":"code","d0d03c29":"code","1d123927":"code","f68e81b2":"code","3f63a22b":"code","b446f1f1":"markdown","097eaf7f":"markdown","e0a62c63":"markdown","c3ddee6b":"markdown","7b425e0a":"markdown","8cee3de5":"markdown","1e5c5d1b":"markdown"},"source":{"6db281ce":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\n\nimport xgboost as xgb\nimport lightgbm as lgbm\nimport catboost as cb\n\nnp.random.seed(42)","6a92860b":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\n\ntrain_df.shape, test_df.shape","10f7ca39":"train_df.head()","ae999e39":"used_columns = ['Pclass', 'Name', 'Sex', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Embarked']","4c534122":"y_train = train_df[['Survived']]\ny_train.shape","f44dcbcd":"y_train.head()","c979eaf5":"X_all = train_df[used_columns].append(test_df[used_columns])\nX_all.shape","64033e13":"X_all.head()","adff6647":"X_all.isna().sum()","3f4270d9":"X_all['Embarked'].value_counts()","199fba90":"X_all['Embarked'].fillna('S', inplace=True)\nX_all['Fare'].fillna(X_all['Fare'].median(), inplace=True)","e3b431f9":"X_all['Title'] = X_all['Name'].str.extract(' ([A-Za-z]+)\\.')\nX_all['Title'] = X_all['Title'].replace(['Ms', 'Mlle'], 'Miss')\nX_all['Title'] = X_all['Title'].replace(['Mme', 'Countess', 'Lady', 'Dona'], 'Mrs')\nX_all['Title'] = X_all['Title'].replace(['Dr', 'Major', 'Col', 'Sir', 'Rev', 'Jonkheer', 'Capt', 'Don'], 'Mr')","d29c1aa5":"# X_all = pd.concat([X_all, pd.get_dummies(X_all[['Sex', 'Embarked']])], axis=1)\nX_all[\"Sex\"] = X_all[\"Sex\"].map({\"male\": 1, \"female\": 0}).astype(int)    \nX_all[\"Embarked\"] = X_all[\"Embarked\"].map({\"S\": 1, \"C\": 2, \"Q\": 3}).astype(int)    \nX_all['Title'] = X_all['Title'].map({'Mr': 0, 'Miss': 1, 'Mrs': 2, 'Master': 3}).astype(int)   ","0d24d574":"X_all['TicketNumber'] = X_all['Ticket'].str.split()\nX_all['TicketNumber'] = X_all['TicketNumber'].str[-1]\nX_all['TicketNumber'] = LabelEncoder().fit_transform(X_all['TicketNumber'])","738419ca":"X_all.head()","bc772ed8":"X_all.drop(['Name', 'Ticket'], axis=1, inplace=True)\nX_all.head()","c1f09cee":"X_all['FamilySize'] = X_all['SibSp'] + X_all['Parch'] + 1\nX_all['IsAlone'] = X_all['FamilySize'].apply(lambda x: 1 if x == 1 else 0)\n# X_all['SquaredFare'] = X_all['Fare'] ** 2\nX_all.head()","57caa219":"categorical_columns = ['Sex', 'Parch', 'Embarked', 'Title', 'TicketNumber', 'IsAlone']","10bc2d08":"X_train = X_all[0:y_train.shape[0]]\nX_test = X_all[y_train.shape[0]:]\nX_train.shape, y_train.shape, X_test.shape","f2360f52":"# X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=0)\n# X_train.shape, X_val.shape, y_train.shape, y_val.shape","da7e1910":"y_train = np.ravel(y_train)\n# y_val = np.ravel(y_val)","1b414fbf":"%%time\nparameters = {\n    \"criterion\": [\"gini\", \"entropy\"],\n    \"max_depth\": [1, 2, 3, 5, 10, None], \n    \"min_samples_split\": [2, 3, 5, 10],\n    \"min_samples_leaf\": [1, 5, 10, 20]\n}\n\ntree_model = GridSearchCV(DecisionTreeClassifier(), parameters, cv=5).fit(X_train, y_train)\nprint(accuracy_score(y_train, tree_model.predict(X_train)))\nprint(tree_model.best_score_)\n# print(accuracy_score(y_val, tree_model.predict(X_val)))\nprint(tree_model.best_params_)\nprint(tree_model.best_estimator_)","996871c8":"%%time\nparameters = {\n    \"n_estimators\": [2, 4, 5, 8, 10, 15], \n    \"criterion\": [\"gini\", \"entropy\"],\n    \"max_features\": [\"auto\", \"log2\"], \n    \"max_depth\": [1, 2, 3, 5, 10], \n    \"min_samples_split\": [2, 3, 5, 10],\n    \"min_samples_leaf\": [1, 5, 10, 20]\n}\n\nforest_model = GridSearchCV(RandomForestClassifier(), parameters, cv=5).fit(X_train, y_train)\nprint(accuracy_score(y_train, forest_model.predict(X_train)))\nprint(forest_model.best_score_)\n# print(accuracy_score(y_val, forest_model.predict(X_val)))\nprint(forest_model.best_params_)\nprint(forest_model.best_estimator_)","16bb0c32":"%%time\nparameters = {\n    'max_depth': [3, 4, 5, 6, 7, 8], \n    'n_estimators': [5, 10, 20, 50, 100],\n    'learning_rate': np.linspace(0.02,0.16,8)\n}\n\nxgb_model = GridSearchCV(xgb.XGBClassifier(), parameters, cv=5).fit(X_train, y_train)\nprint(accuracy_score(y_train, xgb_model.predict(X_train)))\nprint(xgb_model.best_score_)\n# print(accuracy_score(y_val, xgb_model.predict(X_val)))\nprint(xgb_model.best_params_)\nprint(xgb_model.best_estimator_)","333f1ac3":"%%time\nparameters = {'n_estimators': [5, 50, 100],\n              'learning_rate': np.linspace(0.02,0.16,4),\n              'num_leaves': [31, 61],\n              'min_data_in_leaf': [20, 30, 40],\n              'max_depth': range(3,8),\n}\n\nlgbm_model = GridSearchCV(lgbm.LGBMClassifier(), parameters, cv=5).fit(X_train, y_train, categorical_feature=categorical_columns)\nprint(accuracy_score(y_train, lgbm_model.predict(X_train)))\nprint(lgbm_model.best_score_)\n# print(accuracy_score(y_val, lgbm_model.predict(X_val)))\nprint(lgbm_model.best_params_)\nprint(lgbm_model.best_estimator_)","0f42f672":"%%time\nparameters = {'iterations': [10, 50, 100],\n              'learning_rate': np.linspace(0.02,0.16,4),\n              'depth': range(4,10)\n}\n\ncb_model = GridSearchCV(cb.CatBoostClassifier(verbose=False), parameters, cv=5).fit(X_train, y_train)\nprint(accuracy_score(y_train, cb_model.predict(X_train)))\nprint(cb_model.best_score_)\n# print(accuracy_score(y_val, cb_model.predict(X_val)))\nprint(cb_model.best_params_)\nprint(cb_model.best_estimator_)","948ae528":"submission = pd.DataFrame(\n    {\n        'PassengerId': test_df['PassengerId'], \n        'Survived': tree_model.predict(X_test) \n    }\n)\nsubmission.to_csv(\"submission_tree.csv\", index=False)\n\nsubmission = pd.DataFrame(\n    {\n        'PassengerId': test_df['PassengerId'], \n        'Survived': forest_model.predict(X_test)\n    }\n)\nsubmission.to_csv(\"submission_forest.csv\", index=False)\n\nsubmission = pd.DataFrame(\n    {\n        'PassengerId': test_df['PassengerId'], \n        'Survived': xgb_model.predict(X_test) \n    }\n)\nsubmission.to_csv(\"submission_xgb.csv\", index=False)\n\nsubmission = pd.DataFrame(\n    { \n        'PassengerId': test_df['PassengerId'], \n        'Survived': lgbm_model.predict(X_test) \n    }\n)\nsubmission.to_csv(\"submission_lgbm.csv\", index=False)\n\nsubmission = pd.DataFrame(\n    { \n        'PassengerId': test_df['PassengerId'], \n        'Survived': cb_model.predict(X_test).astype(int)\n    }\n)\nsubmission.to_csv(\"submission_cb.csv\", index=False)","390c8f65":"tree_test_pred = tree_model.predict(X_test)\nforest_test_pred = forest_model.predict(X_test)\nxgb_test_pred = xgb_model.predict(X_test)\nlgbm_test_pred = lgbm_model.predict(X_test)\ncb_test_pred = cb_model.predict(X_test)\n\nmean_test_pred = np.round((tree_test_pred + forest_test_pred + xgb_test_pred + lgbm_test_pred + cb_test_pred) \/ 5)\n\nsubmission = pd.DataFrame(\n    { \n        'PassengerId': test_df['PassengerId'], \n        'Survived': mean_test_pred.astype(int)\n    }\n)\nsubmission.to_csv(\"submission_mean.csv\", index=False)","d0d03c29":"tree_train_pred = tree_model.predict(X_train)\nforest_train_pred = forest_model.predict(X_train)\nxgb_train_pred = xgb_model.predict(X_train)\nlgbm_train_pred = lgbm_model.predict(X_train)\ncb_train_pred = cb_model.predict(X_train)","1d123927":"base_pred = pd.DataFrame({\n    'tree':tree_train_pred.ravel(), \n    'forest':forest_train_pred.ravel(), \n    'xgb':xgb_train_pred.ravel(), \n    'lgbm':lgbm_train_pred.ravel(),\n    'cb': cb_train_pred.ravel()\n})\n\ntest_pred = pd.DataFrame({\n    'tree':tree_test_pred.ravel(), \n    'forest':forest_test_pred.ravel(), \n    'xgb':xgb_test_pred.ravel(), \n    'lgbm':lgbm_test_pred.ravel(),\n    'cb': cb_test_pred.ravel()\n})","f68e81b2":"%%time\nfrom sklearn.svm import SVC\nparameters = {\n    'kernel': ['linear', 'poly', 'rbf'],\n    'C': [0.1, 0.5, 1,10,100,1000], \n    'gamma': [1, 0.1, 0.001, 0.0001, 'auto'],\n    'degree': [3, 4, 5]\n}\n\nfinal_model = GridSearchCV(SVC(), parameters, cv=5).fit(base_pred, y_train)\nprint(accuracy_score(y_train, final_model.predict(base_pred)))\nprint(final_model.best_score_)\n# print(accuracy_score(y_val, xgb_model.predict(X_val)))\nprint(final_model.best_params_)\nprint(final_model.best_estimator_)","3f63a22b":"final_pred = final_model.predict(test_pred)\n\nsubmission = pd.DataFrame(\n    { \n        'PassengerId': test_df['PassengerId'], \n        'Survived': final_pred\n    }\n)\nsubmission.to_csv(\"submission_final.csv\", index=False)","b446f1f1":"*If you like this, please upvote the original one, too.*","097eaf7f":"### XGBoost","e0a62c63":"### Decision tree","c3ddee6b":"### Random forest","7b425e0a":"### CatBoost","8cee3de5":"### LightGBM","1e5c5d1b":"### Stacking"}}