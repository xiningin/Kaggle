{"cell_type":{"48ee2b3d":"code","d2c13524":"code","6ed3062e":"code","fafedb4d":"code","1616d93f":"code","e8f6ef78":"code","31420f4c":"code","deed6f90":"code","b43a691c":"code","8e8a45f0":"code","41ba3da3":"code","69357de6":"markdown","36b4c751":"markdown"},"source":{"48ee2b3d":"import numpy as np \nimport pandas as pd \n\nfrom datetime import datetime\nimport plotly.express as px\nimport math","d2c13524":"dataset = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv', parse_dates=['ObservationDate', 'Last Update'])\n\ndfConfirmed = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\ndfRecovered = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')\ndfDeaths = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\ndfConfirmed.fillna(0, inplace=True)\ndfRecovered.fillna(0, inplace=True)\ndfDeaths.fillna(0, inplace=True)","6ed3062e":"dataset['ObservationDate'] = dataset['ObservationDate'].apply(lambda x: datetime.combine(x.date(), datetime.min.time()))\ndataset['Country\/Region'] = dataset['Country\/Region'].apply(lambda x: x.strip().replace(\"('\", '').replace(\"',)\", ''))\ntmp = dataset[['ObservationDate', 'Country\/Region', 'Confirmed', 'Deaths']].groupby(['ObservationDate', 'Country\/Region']).sum()\ntmp = tmp.unstack(1).fillna(0)\n","fafedb4d":"tmp.sort_index(inplace=True)\ncumsum = tmp.copy(deep=True)\ncumsum = tmp.cumsum(axis=0)\ndataset = cumsum.T.unstack().T.reset_index()\nfor i, d in enumerate(sorted(dataset['ObservationDate'].unique())):\n    dataset.loc[dataset['ObservationDate']==d,'days'] = i","1616d93f":"#increase 0 values to apply log scale\ndataset_log = dataset.copy(deep=True)\ndataset_log.loc[dataset_log.Confirmed == 0, 'Confirmed'] = dataset_log.loc[dataset_log.Confirmed == 0, 'Confirmed'] + 0.1\ndataset_log.loc[dataset_log.Deaths == 0, 'Deaths'] = dataset_log.loc[dataset_log.Deaths == 0, 'Deaths'] + 0.1","e8f6ef78":"fig = px.scatter(dataset_log\n           , y=\"Deaths\"\n           , x=\"Confirmed\"\n           , animation_frame=\"days\"\n           , color=\"Country\/Region\"\n           , hover_name=\"Country\/Region\"\n           , range_y=[0.1,dataset_log.Deaths.max()+5000]\n           , range_x = [0.1,dataset_log.Confirmed.max()+5000]\n           , text=\"Country\/Region\"\n           , size=len(dataset_log)*[20]\n           , log_x=True\n           , log_y=True\n           , title='Time-lapse of COVID-19 by Country'\n          )\nfig.show()","31420f4c":"def reshape(df, value):\n    return df.melt(id_vars=['Lat','Long','Province\/State','Country\/Region'], \n                var_name=\"Date\", \n                value_name=value)\n\ndef prepare_data_country(df):\n    df.Date = pd.to_datetime(df.Date)\n    df.loc[:,'Date'] = df.loc[:,'Date'].dt.date\n    #df.Date = df.Date.dt.to_pydatetime()\n\n    df.loc[df['Province\/State'] == 0, 'Country\/State'] = df.loc[df['Province\/State'] == 0, 'Country\/Region']\n    df.loc[df['Province\/State'] != 0, 'Country\/State'] = df.loc[df['Province\/State'] != 0, 'Country\/Region'] \\\n                                                        + '-' \\\n                                                        + df.loc[df['Province\/State'] != 0, 'Province\/State']    \n    df.drop(['Country\/Region', 'Province\/State'], axis=1, inplace=True)\n    df.set_index(['Lat','Long','Date','Country\/State'], inplace=True)\n    return df","deed6f90":"dfConfirmed = reshape(dfConfirmed, 'Confirmed')\ndfRecovered = reshape(dfRecovered, 'Recovered')\ndfDeaths = reshape(dfDeaths, 'Deaths')\n\ndfConfirmed = prepare_data_country(dfConfirmed)\ndfRecovered = prepare_data_country(dfRecovered)\ndfDeaths = prepare_data_country(dfDeaths)","b43a691c":"dfMap = pd.concat([dfConfirmed, dfRecovered, dfDeaths], axis=1\n         , join='inner')\ndfMap.reset_index(inplace=True)\ndfMap.sort_values('Date', inplace=True)\ndfMap['Date'] =dfMap['Date'].apply(lambda x: x.strftime('%Y-%m-%d'))","8e8a45f0":"dfMap.loc[dfMap['Recovered']>0, 'Recovered_log'] = dfMap.loc[dfMap['Recovered']>0, 'Recovered'].apply(lambda x: math.log(x))\ndfMap.loc[dfMap['Confirmed']>0, 'Confirmed_log'] = dfMap.loc[dfMap['Confirmed']>0, 'Confirmed'].apply(lambda x: math.log(x))\ndfMap.fillna(0, inplace=True)","41ba3da3":"fig = px.scatter_mapbox(dfMap[dfMap.Confirmed > 0], \n                        lat=\"Lat\", \n                        lon=\"Long\", \n                        hover_name=\"Country\/State\", \n                        hover_data=[\"Confirmed\",\"Deaths\",\"Recovered\"], \n                        animation_frame=\"Date\",\n                        color='Recovered_log',\n                        size='Confirmed_log',\n                        size_max=15,\n                        zoom=0.6,height=600\n                       )\n\nfig.update_layout(title='Time-lapse of COVID-19: confirmed and recovered cases and deaths',\n                  font=dict(size=16)\n                 )\nfig.update_layout(mapbox_style=\"open-street-map\", mapbox_center_lon=0)\nfig.update_layout(margin={\"r\":10,\"t\":35,\"l\":0,\"b\":0})\n\n\nfig.show()","69357de6":"2. **Animated World Map**","36b4c751":"1. **Animated Scatter Plot**"}}