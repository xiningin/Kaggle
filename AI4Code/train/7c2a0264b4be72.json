{"cell_type":{"c6ea8434":"code","7dd96dbc":"code","fe4cdabf":"code","a8dbcb71":"code","219ae34d":"code","0c78eda9":"code","8d2f5f74":"code","d43992ff":"code","564c7408":"code","31e6b7ea":"code","6af7e358":"code","2b1b4bc3":"code","ea36cfc6":"code","938f845c":"code","1175f12e":"code","163df744":"code","193e51d2":"code","cf77576f":"code","c0e4381a":"code","57e0cbe1":"code","b5426df0":"code","80b94f4c":"code","f6b0f8dd":"code","3c3ea058":"code","0bf7eee0":"code","1e06cae4":"code","b7c080e1":"code","ad0fb4de":"code","0e58ebc3":"code","302b0025":"code","55aa3860":"code","7bb79cfb":"code","6a6e5e97":"code","5d2607c5":"code","ab24c09f":"code","0448cbb0":"markdown","be6fb12b":"markdown","c1d8bb4c":"markdown","e78a8e70":"markdown","774d85dc":"markdown","7a44ecf9":"markdown","45462a8e":"markdown","5b852c02":"markdown","d3d8a999":"markdown","d44aa545":"markdown","80a80f10":"markdown","95d68363":"markdown","ee09d7c4":"markdown","44e99927":"markdown","99a6fdbd":"markdown"},"source":{"c6ea8434":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7dd96dbc":"import multiprocessing\nimport seaborn as sns\nimport email\nimport matplotlib.pyplot as plt","fe4cdabf":"df = pd.read_csv(\"\/kaggle\/input\/enron-email-dataset\/emails.csv\")","a8dbcb71":"# view first 5 rows of the dataset\ndf.head()","219ae34d":"# get shape of the data\ndf.shape","0c78eda9":"# a sample email\nprint(df.loc[1]['message'])","8d2f5f74":"# transform the email into correct format\nmessage = df.loc[1]['message']\ne = email.message_from_string(message)\n\ne.items()","d43992ff":"# get date\ne.get('Date')","564c7408":"# show message body\ne.get_payload()","31e6b7ea":"# now we add those fields into our 'df' dataframe\ndef get_field(field, messages):\n    column = []\n    for message in messages:\n        e = email.message_from_string(message)\n        column.append(e.get(field))\n    return column","6af7e358":"df['date'] = get_field(\"Date\", df['message'])\ndf['subject'] = get_field(\"Subject\", df['message'])\ndf['X-Folder'] = get_field(\"X-Folder\", df['message'])\ndf['X-From'] = get_field(\"X-From\", df['message'])\ndf['X-To'] = get_field(\"X-To\", df['message'])\ndf.head(3)","2b1b4bc3":"def body(messages):\n    column = []\n    for message in messages:\n        e = email.message_from_string(message)\n        column.append(e.get_payload())\n    return column\n\ndf['body'] = body(df['message'])\ndf.head(3)","ea36cfc6":"df['file'][:10]","938f845c":"def employee(file):\n    column = []\n    for string in file:\n        column.append(string.split(\"\/\")[0])\n    return column\n\ndf['employee'] = employee(df['file'])\ndf.head(3)","1175f12e":"print(\"number of folders: \", df.shape[0])\nprint(\"number of unique folders: \", df['X-Folder'].unique().shape[0])","163df744":"unique_emails = pd.DataFrame(df['X-Folder'].value_counts())\nunique_emails.reset_index(inplace=True)\n\n\nunique_emails.columns = ['folder_name', 'count']\n# top 20 folders\nunique_emails.iloc[:20,:]","193e51d2":"plt.figure(figsize=(10,6))\nsns.barplot(x='count', y='folder_name', data=unique_emails.iloc[:20, :], palette=\"Blues_d\")\nplt.title(\"Top 20 folders\")\nplt.xlabel(\"Count\")\nplt.ylabel(\"Folder_Name\")\nplt.show()","cf77576f":"top_20 = pd.DataFrame(df['employee'].value_counts()[:20])\ntop_20.reset_index(inplace=True)\ntop_20.columns = [\"Employee_name\", \"Counts\"]\ntop_20","c0e4381a":"plt.figure(figsize=(10,8))\n\nsns.barplot(y=\"Employee_name\", x=\"Counts\", data=top_20, palette=\"Blues_d\")\nplt.title(\"Top 20 highest email sender employee\")\nplt.xlabel(\"Count\")\nplt.ylabel(\"Employee_name\")\nplt.show()","57e0cbe1":"import datetime\nfrom dateutil import parser\n\n# this is sample example\nx = parser.parse(\"Fri, 4 May 2001 13:51:00 -0700 (PDT)\")\nprint(x.strftime(\"%d-%m-%Y %H:%M:%S\"))","b5426df0":"def change_type(dates):\n    column = []\n    \n    for date in dates:\n        column.append(parser.parse(date).strftime(\"%d-%m-%Y %H:%M:%S\"))\n    return column\n\ndf['date'] = change_type(df['date'])\ndf.head(2)","80b94f4c":"print(df['X-Folder'][0])\n\n# we only want last folder name\ndf['X-Folder'][0].split(\"\\\\\")[-1]","f6b0f8dd":"def preprocess_folder(folders):\n    column = []\n    for folder in folders:\n        if (folder is None or folder == \"\"):\n            column.append(np.nan)\n        else:\n            column.append(folder.split(\"\\\\\")[-1].lower())\n    return column\n\ndf['X-Folder'] = preprocess_folder(df['X-Folder'])\ndf.head(2)","3c3ea058":"# count unique folders\nprint(\"Unique Foldes: \", len(df['X-Folder'].unique()))\n\n# view some of them\ndf['X-Folder'].unique()[0:20]","0bf7eee0":"def replace_empty_with_nan(subject):\n    column = []\n    for val in subject:\n        if (val == \"\"):\n            column.append(np.nan) \n        else:\n            column.append(val)\n    return column","1e06cae4":"df['subject'] = replace_empty_with_nan(df['subject'])\ndf['X-To'] = replace_empty_with_nan(df['X-To'])","b7c080e1":"df.isnull().sum()","ad0fb4de":"# calculate percentage of missing values\nmiss = df.isnull().sum()\nmiss = miss[miss>0]\nmiss = miss \/ df.shape[0]\nmiss","0e58ebc3":"# drop missing value rows\ndf.dropna(axis=0, inplace=True)","302b0025":"df.isnull().sum(), df.shape","55aa3860":"df.head(3)","7bb79cfb":"cols_to_drop = ['file','message','date','X-From','X-To','employee']","6a6e5e97":"df.drop(cols_to_drop, axis=1, inplace=True)","5d2607c5":"df.head()","ab24c09f":"# save the data\ndf.to_csv(\"cleaned_data.csv\", index=False)","0448cbb0":"### Employee Names","be6fb12b":"Drop the following columns:\n- file\n- message\n- date\n- X-From\n- X-To\n- employee","c1d8bb4c":"### Load Data","e78a8e70":"### Extract headers","774d85dc":"**date : column**","7a44ecf9":"## Data Cleaning and Transformation","45462a8e":"**Replace empty missing values in subject with np.nan**","5b852c02":"### Import necessary libraries","d3d8a999":"**Visualize top 20 highest email sender employees**","d44aa545":"**Column : X-Folder**","80a80f10":"### Extract Message Body","95d68363":"### Data Exploration","ee09d7c4":"**Let's see top 20 highest email sender employee**","44e99927":"### Look into X-Folder","99a6fdbd":"### Visualize top 20 folders"}}