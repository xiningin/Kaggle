{"cell_type":{"4bd0c82d":"code","f5c593dc":"code","8fa6df1c":"code","2edd6c20":"code","83cb9e2d":"code","a8ec0fcc":"code","80e0a779":"markdown","09e5d397":"markdown","01bb0185":"markdown","e70e167a":"markdown","c3334a95":"markdown","7da8f728":"markdown"},"source":{"4bd0c82d":"import numpy as np  # linear algebra\nimport pandas as pd  # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\ndf = pd.read_parquet(\"..\/input\/ubiquant-parquet\/train_low_mem.parquet\")","f5c593dc":"from sklearn.model_selection._split import _BaseKFold, indexable, _num_samples\nfrom sklearn.utils.validation import _deprecate_positional_args\n\n# https:\/\/github.com\/getgaurav2\/scikit-learn\/blob\/d4a3af5cc9da3a76f0266932644b884c99724c57\/sklearn\/model_selection\/_split.py#L2243\nclass GroupTimeSeriesSplit(_BaseKFold):\n    \"\"\"Time Series cross-validator variant with non-overlapping groups.\n    Provides train\/test indices to split time series data samples\n    that are observed at fixed time intervals according to a\n    third-party provided group.\n    In each split, test indices must be higher than before, and thus shuffling\n    in cross validator is inappropriate.\n    This cross-validation object is a variation of :class:`KFold`.\n    In the kth split, it returns first k folds as train set and the\n    (k+1)th fold as test set.\n    The same group will not appear in two different folds (the number of\n    distinct groups has to be at least equal to the number of folds).\n    Note that unlike standard cross-validation methods, successive\n    training sets are supersets of those that come before them.\n    Read more in the :ref:`User Guide <cross_validation>`.\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of splits. Must be at least 2.\n    max_train_size : int, default=None\n        Maximum size for a single training set.\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from sklearn.model_selection import GroupTimeSeriesSplit\n    >>> groups = np.array(['a', 'a', 'a', 'a', 'a', 'a',\\\n                           'b', 'b', 'b', 'b', 'b',\\\n                           'c', 'c', 'c', 'c',\\\n                           'd', 'd', 'd'])\n    >>> gtss = GroupTimeSeriesSplit(n_splits=3)\n    >>> for train_idx, test_idx in gtss.split(groups, groups=groups):\n    ...     print(\"TRAIN:\", train_idx, \"TEST:\", test_idx)\n    ...     print(\"TRAIN GROUP:\", groups[train_idx],\\\n                  \"TEST GROUP:\", groups[test_idx])\n    TRAIN: [0, 1, 2, 3, 4, 5] TEST: [6, 7, 8, 9, 10]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a']\\\n    TEST GROUP: ['b' 'b' 'b' 'b' 'b']\n    TRAIN: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] TEST: [11, 12, 13, 14]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a' 'b' 'b' 'b' 'b' 'b']\\\n    TEST GROUP: ['c' 'c' 'c' 'c']\n    TRAIN: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\\\n    TEST: [15, 16, 17]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a' 'b' 'b' 'b' 'b' 'b' 'c' 'c' 'c' 'c']\\\n    TEST GROUP: ['d' 'd' 'd']\n    \"\"\"\n\n    @_deprecate_positional_args\n    def __init__(self, n_splits=5, *, max_train_size=None):\n        super().__init__(n_splits, shuffle=False, random_state=None)\n        self.max_train_size = max_train_size\n\n    def split(self, X, y=None, groups=None):\n        \"\"\"Generate indices to split data into training and test set.\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where n_samples is the number of samples\n            and n_features is the number of features.\n        y : array-like of shape (n_samples,)\n            Always ignored, exists for compatibility.\n        groups : array-like of shape (n_samples,)\n            Group labels for the samples used while splitting the dataset into\n            train\/test set.\n        Yields\n        ------\n        train : ndarray\n            The training set indices for that split.\n        test : ndarray\n            The testing set indices for that split.\n        \"\"\"\n        if groups is None:\n            raise ValueError(\"The 'groups' parameter should not be None\")\n        X, y, groups = indexable(X, y, groups)\n        n_samples = _num_samples(X)\n        n_splits = self.n_splits\n        n_folds = n_splits + 1\n        group_dict = {}\n        u, ind = np.unique(groups, return_index=True)\n        unique_groups = u[np.argsort(ind)]\n        n_samples = _num_samples(X)\n        n_groups = _num_samples(unique_groups)\n        for idx in np.arange(n_samples):\n            if groups[idx] in group_dict:\n                group_dict[groups[idx]].append(idx)\n            else:\n                group_dict[groups[idx]] = [idx]\n        if n_folds > n_groups:\n            raise ValueError(\n                (\n                    \"Cannot have number of folds={0} greater than\"\n                    \" the number of groups={1}\"\n                ).format(n_folds, n_groups)\n            )\n        group_test_size = n_groups \/\/ n_folds\n        group_test_starts = range(\n            n_groups - n_splits * group_test_size, n_groups, group_test_size\n        )\n        for group_test_start in group_test_starts:\n            train_array = []\n            test_array = []\n            for train_group_idx in unique_groups[:group_test_start]:\n                train_array_tmp = group_dict[train_group_idx]\n                train_array = np.sort(\n                    np.unique(\n                        np.concatenate((train_array, train_array_tmp)), axis=None\n                    ),\n                    axis=None,\n                )\n            train_end = train_array.size\n            if self.max_train_size and self.max_train_size < train_end:\n                train_array = train_array[train_end - self.max_train_size : train_end]\n            for test_group_idx in unique_groups[\n                group_test_start : group_test_start + group_test_size\n            ]:\n                test_array_tmp = group_dict[test_group_idx]\n                test_array = np.sort(\n                    np.unique(np.concatenate((test_array, test_array_tmp)), axis=None),\n                    axis=None,\n                )\n            yield [int(i) for i in train_array], [int(i) for i in test_array]","8fa6df1c":"from catboost import CatBoostRegressor\nfrom scipy import stats\nfrom sklearn.metrics import mean_squared_error\n\ndef train_model(df, train, test, gpu=False):\n    model = CatBoostRegressor(task_type=\"GPU\")\n\n    X = df.loc[train].drop([\"row_id\", \"time_id\", \"target\"], axis=1)\n    y = df.loc[train, \"target\"]\n\n    X_test = df.loc[test].drop([\"row_id\", \"time_id\", \"target\"], axis=1)\n    y_test = df.loc[test, \"target\"]\n    \n    model.fit(X, y, verbose=False, eval_set=(X_test, y_test), use_best_model=True)\n\n    preds = model.predict(X_test)\n    mse = mean_squared_error(preds, y_test)\n    df_preds = df.loc[test].copy()\n    df_preds['prediction'] = preds\n    corr = df_preds.groupby('time_id').apply(lambda x: stats.pearsonr(x['target'], x['prediction'])[0]).mean()  # Competition metric\n    return model, mse, corr","2edd6c20":"import numpy as np\nimport gc\n\nN_SPLITS = 5\ndict_results = {\"trainmin\": [], \"trainmax\": [], \"mse_test\": [], \"corr\": []}\nmodels = []\ni = 0\nfor train, test in GroupTimeSeriesSplit(n_splits=N_SPLITS).split(\n    df, groups=df[\"time_id\"]\n):\n    model, mse, corr = train_model(df, train, test, gpu=True)\n    dict_results[\"trainmin\"].append(df.loc[train].time_id.min())\n    dict_results[\"trainmax\"].append(df.loc[train].time_id.max())\n    dict_results[\"mse_test\"].append(mse)\n    dict_results[\"corr\"].append(corr)\n    models.append(model)\n    gc.collect()","83cb9e2d":"df_results = pd.DataFrame(dict_results)\ndisplay(df_results)","a8ec0fcc":"import ubiquant\n\nWEIGHTS = [0., 0., 0., 0., 1.]  # Just use the last one for now\nassert (sum(WEIGHTS) == 1 and len(WEIGHTS) == N_SPLITS)\n\nenv = ubiquant.make_env()\niter_test = env.iter_test()\nfor (test_df, sample_prediction_df) in iter_test:\n    X = test_df.drop(\"row_id\", axis=1)\n    pred = 0\n    i = 0\n    for model in models:\n        pred += model.predict(X) * WEIGHTS[i]\n        i += 1\n    sample_prediction_df[\"target\"] = pred \n    env.predict(sample_prediction_df)","80e0a779":"## Time aware CV split\n\nWe use GroupTimeSeriesSplit in order to take into account the chronology of data. The difference between this implementation and sklearn's TimeSeriesSplit is that you do not get overlapping time_ids. So, each fold will have a non-overlapping chronologically aware set of time_ids.","09e5d397":"### Training N-CV\n\nSet yourself the desired number of splits.","01bb0185":"### Results\n\nJust display the results.","e70e167a":"### Inference\n\nNow let's use the API to predict on online data. You can set your own weights.","c3334a95":"# GroupTimeSeriesCV - Catboost GPU\n\n### Load data from parquet dataset\n\nWe will use the [dataset](https:\/\/www.kaggle.com\/robikscube\/ubiquant-parquet) from @robikscube to have a lighter dataframe to deal with. The parquet dataset was created during an stream session on his Twitch if you feel curious about how to build it.","7da8f728":"### Training function\n\nWe will use CatBoost with GPU as accelerator as a baseline model. We compute and store the competition metric as well for every fold."}}