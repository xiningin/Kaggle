{"cell_type":{"c63ac80f":"code","59512cdd":"code","4bdda8f4":"code","6ed1937c":"code","d615832b":"code","614a76b4":"code","4b09b93a":"code","bdd4e4fe":"code","a252b63c":"code","2b2acf71":"code","b86a8f34":"code","fa85ecbc":"code","62d01180":"code","d5b3e257":"code","7120e04d":"code","66e15789":"code","e3a1aa82":"code","c9f6b7dc":"code","47cfc721":"code","d38b9b75":"code","8e0dca80":"code","90706df2":"code","07cdff8b":"code","6b47b605":"code","0081bdea":"code","1c8fcfaa":"code","e823d398":"code","b1ecd6af":"code","9bb8b46d":"code","b0ac3a84":"code","93b7a171":"code","29618ec7":"code","314bb3af":"code","c4e20e93":"code","880a3e79":"code","72c1eca9":"code","a8a8b464":"code","18b22ccd":"code","027dd740":"markdown","5b6941d9":"markdown","70a291d1":"markdown","92752b9d":"markdown","a77b33fa":"markdown","68becf90":"markdown","5fa69787":"markdown","646577b9":"markdown","dfcd8d78":"markdown","ecceafb0":"markdown","40203fcf":"markdown","7eec465b":"markdown","10b2ed24":"markdown","a8b39aa0":"markdown","03fec9ce":"markdown","2d45468f":"markdown"},"source":{"c63ac80f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59512cdd":"import math\nimport random\nimport numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew \n\n\nimport pickle\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import explained_variance_score\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.linear_model import LinearRegression, Ridge, \\\n                                 RidgeCV, Lasso, LassoCV, \\\n                                 ElasticNet, ElasticNetCV","4bdda8f4":"df_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv', header = 0)\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndf_actual = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","6ed1937c":"df_train.head()","d615832b":"print(df_train.shape)\nprint(df_test.shape)\nprint(df_actual.shape)","614a76b4":"# Only numerical values (Checked manually)\n\nX = df_train[['MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearBuilt',\n             'YearRemodAdd', 'MasVnrArea', 'ExterQual', 'ExterCond','BsmtQual','BsmtCond', 'BsmtExposure' ,'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'CentralAir',\n             '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n             'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars',\n             'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch',\n             'PoolArea', 'MiscVal', 'MoSold','YrSold', 'BsmtFinType1','BsmtFinType2', 'HeatingQC','KitchenQual',\n              'FireplaceQu','GarageFinish','GarageQual','GarageCond','PavedDrive', 'PoolQC','Fence'\n              ]]\n\nY = df_test[['MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearBuilt',\n             'YearRemodAdd', 'MasVnrArea', 'ExterQual', 'ExterCond','BsmtQual','BsmtCond', 'BsmtExposure' ,'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'CentralAir',\n             '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n             'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars',\n             'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch',\n             'PoolArea', 'MiscVal', 'MoSold','YrSold', 'BsmtFinType1','BsmtFinType2', 'HeatingQC','KitchenQual',\n              'FireplaceQu','GarageFinish','GarageQual','GarageCond','PavedDrive', 'PoolQC','Fence'\n              ]]\n\nX_target = df_train[['SalePrice']]\n\nX","4b09b93a":"labels_1 = {'CentralAir' : {\"Y\": 1 , \"N\":0}}\nX.replace(labels_1 , inplace= True)\nY.replace(labels_1 , inplace= True)\n\nlabels_2 = {'HeatingQC' : {\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(labels_2 , inplace= True)\nY.replace(labels_2 , inplace= True)\n\nlabels_3 = {'ExterQual' : {\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(labels_3 , inplace= True)\nY.replace(labels_3 , inplace= True)\n\nlabels_4 = {'ExterCond' : {\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(labels_4 , inplace= True)\nY.replace(labels_4 , inplace= True)\n\n\nlabels_5 = {'BsmtQual' : {\"NA\":0,\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(labels_5 , inplace= True)\nY.replace(labels_5 , inplace= True)\n\nlabels_6 = {'BsmtCond' : {\"NA\":0,\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(labels_6 , inplace= True)\nY.replace(labels_6 , inplace= True)\n\nlabels_7 = {'BsmtExposure' : {\"NA\":0,\"No\":1, \"Mn\":2, \"Av\":3, \"Gd\":4}}\nX.replace(labels_7 , inplace= True)\nY.replace(labels_7 , inplace= True)\n\nlabels_8 = {'BsmtFinType1' : {\"NA\":0,\"Unf\":1, \"LwQ\":2, \"Rec\":3, \"BLQ\":4, \"ALQ\":5, \"GLQ\":6}}\nX.replace(labels_8 , inplace= True)\nY.replace(labels_8 , inplace= True)\n\nlabels_9 = {'BsmtFinType2' : {\"NA\":0,\"Unf\":1, \"LwQ\":2, \"Rec\":3, \"BLQ\":4, \"ALQ\":5, \"GLQ\":6}}\nX.replace(labels_9 , inplace= True)\nY.replace(labels_9 , inplace= True)\n\nlabels_10 = {'HeatingQC' : {\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(labels_10 , inplace= True)\nY.replace(labels_10 , inplace= True)\n\nlabels_11 = {'KitchenQual' : {\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(labels_11 , inplace= True)\nY.replace(labels_11 , inplace= True)\n\nlabels_12 = {'FireplaceQu' : {\"NA\":0,\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(labels_12 , inplace= True)\nY.replace(labels_12 , inplace= True)\n\nlabels_13 = {'GarageFinish' : {\"NA\":0,\"Unf\":1, \"RFn\":2, \"Fin\":3}}\nX.replace(labels_13 , inplace= True)\nY.replace(labels_13 , inplace= True)\n\nlabels_14 = {'GarageQual' : {\"NA\":0,\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(labels_14 , inplace= True)\nY.replace(labels_14 , inplace= True)\n\nlabels_15 = {'GarageCond' : {\"NA\":0,\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(labels_15 , inplace= True)\nY.replace(labels_15 , inplace= True)\n\nlabels_16 = {'PavedDrive' : {\"N\":0,\"P\":1, \"Y\":2}}\nX.replace(labels_16 , inplace= True)\nY.replace(labels_16 , inplace= True)\n\nlabels_17 = {'PoolQC' : {\"NA\":0, \"Fa\":1, \"TA\":2, \"Gd\":3, \"Ex\":4}}\nX.replace(labels_17 , inplace= True)\nY.replace(labels_17 , inplace= True)\n\nlabels_18 = {'Fence' : {\"NA\":0, \"MnWw\":1, \"GdWo\":2, \"MnPrv\":3, \"GdPrv\":4}}\nX.replace(labels_18 , inplace= True)\nY.replace(labels_18 , inplace= True)","bdd4e4fe":"X","a252b63c":"print(X.shape)\nprint(Y.shape)","2b2acf71":"from sklearn.impute import SimpleImputer # Imputation transformer for completing missing values.\nimport numpy as np","b86a8f34":"ImputedModule = SimpleImputer(missing_values = np.nan, strategy = 'mean')\nImputedX = ImputedModule.fit(X)\nX = ImputedX.transform(X)\n\nImputedY = ImputedModule.fit(Y)\nY = ImputedX.transform(Y)","fa85ecbc":"print(X.shape)\nprint(Y.shape)","62d01180":"mean = X.mean(axis=0)\nX -= mean\nstd = X.std(axis=0)\nX \/= std\n\nY -= mean\nY \/= std","d5b3e257":"from sklearn.model_selection import train_test_split \nX_train, X_test, y_train, y_test = train_test_split(X, X_target, test_size = 0.2, random_state = 0)","7120e04d":"from keras import models\nfrom keras import layers\n\ndef build_model():\n    model = models.Sequential()\n    model.add(layers.Dense(128, activation='relu', input_shape=(X_train.shape[1],)))\n    model.add(layers.Dense(64, activation='relu'))\n    model.add(layers.Dense(64, activation='relu'))\n    model.add(layers.Dense(1))\n\n    model.compile(optimizer='rmsprop',\n              loss='mse',\n              metrics=['mae'])\n    return model","66e15789":"from sklearn.linear_model import LinearRegression \nregressor = LinearRegression() \nregressor.fit(X_train, y_train) ","e3a1aa82":"y_pred = regressor.predict(X_test)","c9f6b7dc":"plt.scatter(y_test, y_pred, color = 'red') \nplt.title('Y actual vs Y predicted') \nplt.xlabel('Y actual') \nplt.ylabel('Y perdicted') \nplt.show()","47cfc721":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\n\ndef performance(ytrue, ypredicted):\n    print(\"MSE: \",np.sqrt(mean_squared_error(ytrue, ypredicted))) \n    print(\"MAE: \", np.sqrt(mean_absolute_error(ytrue, ypredicted))) \n    \nperformance(y_test, y_pred)","d38b9b75":"from sklearn.linear_model import SGDRegressor\n\n# SkLearn SGD classifier\nclf_ = SGDRegressor()\nclf_.fit(X_train, y_train)\nplt.scatter(y_test,clf_.predict(X_test))\nplt.grid()\nplt.xlabel('Actual y')\nplt.ylabel('Predicted y')\nplt.title('scatter plot between actual y and predicted y')\nplt.show()\nperformance(y_test, clf_.predict(X_test))","8e0dca80":"lasso = Lasso(max_iter = 100000, normalize = True)\n\nlassocv = LassoCV(alphas = None, cv = 10, max_iter = 100000, normalize = True)\nlassocv.fit(X_train, y_train)\n\nlasso.set_params(alpha=lassocv.alpha_)\nlasso.fit(X_train, y_train)\n\nprint('The Lasso I:')\nprint(\"Alpha =\", lassocv.alpha_)\nperformance(y_test, lasso.predict(X_test))","90706df2":"alphas = np.geomspace(1e-9, 5, num=100)\n\nridgecv = RidgeCV(alphas = alphas, scoring = 'neg_mean_squared_error', normalize = True)\nridgecv.fit(X_train, y_train)\n\nridge = Ridge(alpha = ridgecv.alpha_, normalize = True)\nridge.fit(X_train, y_train)\n\nprint('Ridge Regression:')\nprint(\"Alpha =\", ridgecv.alpha_)\nperformance(y_test, ridge.predict(X_test))","07cdff8b":"from sklearn.linear_model import ElasticNet\n\nmodel_1 = ElasticNet(alpha=0.1, l1_ratio=0.9, selection='random', random_state=42)\nmodel_1.fit(X_train, y_train)\n\ntest_pred = model_1.predict(X_test)\ntrain_pred = model_1.predict(X_train)\n\nperformance(y_test, model_1.predict(X_test))","6b47b605":"from sklearn.svm import SVR\n\nsvm_reg = SVR(kernel='rbf', C=1000000, epsilon=0.001)\nsvm_reg.fit(X_train, y_train)\n\ntest_pred = svm_reg.predict(X_test)\ntrain_pred = svm_reg.predict(X_train)\n\nperformance(y_test, svm_reg.predict(X_test))","0081bdea":"num_epochs = 100\n\n# Build the Keras model (already compiled)\nmodel = build_model()\n# Train the model (in silent mode, verbose=0)\nmodel.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])# Add the proper loss\n\nhistory = model.fit(X_train, y_train, epochs=num_epochs, batch_size=32, verbose=0)","1c8fcfaa":"performance(y_test, model.predict(X_test))","e823d398":"# Change batch_size\n\nnum_epochs = 100\n\n# Build the Keras model (already compiled)\nmodel_1 = build_model()\n# Train the model (in silent mode, verbose=0)\nmodel_1.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])# Add the proper loss\n\nhistory = model_1.fit(X_train, y_train, epochs=num_epochs, batch_size=16, verbose=0)","b1ecd6af":"performance(y_test, model_1.predict(X_test))","9bb8b46d":"# Change epoch_size\n\nnum_epochs = 500\n\n# Build the Keras model (already compiled)\nmodel_2 = build_model()\n# Train the model (in silent mode, verbose=0)\nmodel_2.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])# Add the proper loss\n\nhistory = model_2.fit(X_train, y_train, epochs=num_epochs, batch_size=32, verbose=0)","b0ac3a84":"performance(y_test, model_2.predict(X_test))","93b7a171":"# Adjusting model\n\nnum_epochs = 500\n\n# Build the Keras model (already compiled)\nmodel_3 = build_model()\n# Train the model (in silent mode, verbose=0)\nmodel_3.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])# Add the proper loss\n\nhistory = model_3.fit(X_train, y_train, epochs=num_epochs, batch_size=16, verbose=0)","29618ec7":"performance(y_test, model_3.predict(X_test))","314bb3af":"# Adjusting model\n\nnum_epochs = 80\n\n# Build the Keras model (already compiled)\nmodel_4 = build_model()\n# Train the model (in silent mode, verbose=0)\nmodel_4.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])# Add the proper loss\n\nhistory = model_4.fit(X_train, y_train, epochs=num_epochs, batch_size=16, verbose=0)","c4e20e93":"performance(y_test, model_4.predict(X_test))","880a3e79":"# Adjusting model\n\nnum_epochs = 80\n\n# Build the Keras model (already compiled)\nmodel_5 = build_model()\n# Train the model (in silent mode, verbose=0)\nmodel_5.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])# Add the proper loss\n\nhistory = model_5.fit(X_train, y_train, epochs=num_epochs, batch_size=8, verbose=0)","72c1eca9":"performance(y_test, model_5.predict(X_test))","a8a8b464":"# Change batch_size\n\nnum_epochs = 100\n\n# Build the Keras model (already compiled)\nmodel_1 = build_model()\n# Train the model (in silent mode, verbose=0)\nmodel_1.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])# Add the proper loss\n\nhistory = model_1.fit(X, X_target, epochs=num_epochs, batch_size=16, verbose=0)","18b22ccd":"performance(df_actual[\"SalePrice\"], model_1.predict(Y))","027dd740":"### In the checking process, central air was found No & Yes values, so I changed them to 0 & 1 respectively\n### Other features can be displayed in numerical forms rather than categorical form like \"HeatingQC\" which had excellent, good,poor, and so on. ","5b6941d9":"## A- Linear Regression","70a291d1":"## D-  SVM","92752b9d":"# 6) Training selected model (model_1) on all data & evaluating the model on test data","a77b33fa":"I splitted the train data to 80% training and 20% validation,to obtain first selected model","68becf90":"# 5) Building our network and obtaining selected model","5fa69787":"The best performance model depending on MAE is model_1 as it has the least value of MAE which is 141.54","646577b9":"## E- Try different batch sizes, lr, ....","dfcd8d78":"## C-  Ridge, Lasso, & Elastic ","ecceafb0":"The smaller batch size the better the perfomance in the given case","40203fcf":"# 2) Replace Null Values with mean","7eec465b":"# 4) Splitting train data ","10b2ed24":"# 3) Normalize data","a8b39aa0":"The bigger the epoch size the better in the given case","03fec9ce":"# 1) Choose numerical data only","2d45468f":"## B- SGDRegressor"}}