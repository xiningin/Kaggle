{"cell_type":{"2401cb34":"code","57837290":"code","977c97d9":"code","13358057":"code","4a48fd17":"code","c1844028":"code","46fe9101":"code","53081494":"code","76500775":"code","d5a6098c":"code","a51753f7":"code","62567ff4":"code","0da5b203":"code","b2cb0993":"code","8a2dc21d":"code","6ff7a417":"code","9691a4e2":"code","30f45dc5":"code","0e9c85c3":"code","6f8f178e":"markdown"},"source":{"2401cb34":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","57837290":"loan=pd.read_csv('..\/input\/predicting-who-pays-back-loans\/loan_data.csv')","977c97d9":"loan.head(2)","13358057":"loan.shape","4a48fd17":"loan.info(verbose=True)","c1844028":"loan.isnull().sum()","46fe9101":"loan.describe()","53081494":"#Here we do exploratry data analysis:-\nplt.figure(figsize=(10,6))\nloan[loan['credit.policy']==1]['fico'].hist(alpha=0.5,color='green',bins=30,label='Credit.Policy=1')\nloan[loan['credit.policy']==1]['fico'].hist(alpha=0.5,color='y',bins=50,label='Credit.Policy=0')\nplt.legend()\nplt.xlabel('FICO')","76500775":"plt.figure(figsize=(10,6))\nloan[loan['not.fully.paid']==1]['fico'].hist(alpha=0.5,color='r',bins=30,label='not.fully.paid=1')\nloan[loan['not.fully.paid']==1]['fico'].hist(alpha=0.5,color='g',bins=50,label='not.fully.paid=0')\nplt.legend()\nplt.xlabel('FICO')","d5a6098c":"plt.figure(figsize=(15,15))\nsns.countplot(x='purpose',hue='not.fully.paid',palette='Set1',data=loan)","a51753f7":"sns.jointplot(data=loan,x='fico',y='int.rate',color='g')","62567ff4":"sns.lmplot(x='fico',y='int.rate',col='not.fully.paid',hue='credit.policy',palette=\"Set1\",data=loan,aspect=1.5)","0da5b203":"loan['purpose'].nunique()","b2cb0993":"feature=['purpose']\n#used duummy varible to convert categorical data to numerical data\nloans=pd.get_dummies(loan,columns=feature,drop_first=True)\nloans.head()","8a2dc21d":"loans.shape","6ff7a417":"loans.info(verbose=True)","9691a4e2":"x=loans.drop(['not.fully.paid'],axis=1)\ny=loans['not.fully.paid']\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=42)","30f45dc5":"from sklearn import svm\nclf=svm.SVC(kernel='rbf',gamma='auto',C=1.0)\nclf.fit(X_train,y_train)\nclf.fit(X_test,y_test)\ntrainscore=clf.score(X_train,y_train)\nprint('trainscore',trainscore)\ntestscore=clf.score(X_test,y_test)\nprint('testscore',testscore)\nsvcpredict=clf.predict(X_test)\nprint('svc predict',svcpredict)","0e9c85c3":"from sklearn.metrics import classification_report,confusion_matrix\nprint(classification_report(y_test,svcpredict))\nprint(confusion_matrix(y_test,svcpredict))","6f8f178e":"# In this notebook I implemented machine learning algorithms on loan data with the purpose of predicting  lenders would pay back or not."}}