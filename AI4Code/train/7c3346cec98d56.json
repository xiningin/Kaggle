{"cell_type":{"60e17765":"code","79954448":"code","b422eeef":"code","8edf133d":"code","4c890d27":"code","55f6a6dd":"code","d833ea68":"code","01bb5e9c":"code","8992fde8":"code","f03fd1ba":"code","f5cc426c":"code","b4bdab68":"code","4bbb04d7":"code","73d7640a":"code","e4b55701":"code","bca4d3e3":"code","37302391":"code","998d2f7d":"code","9cf640e4":"code","a3221d71":"code","84c1e635":"code","28f82aea":"code","6e921f2f":"code","846d7de1":"code","3793e15d":"code","7c17e0e4":"code","248efe49":"code","88968e2d":"code","255e39e1":"code","45238c70":"code","471a2a7e":"code","540fd252":"code","0d2dce8d":"code","b25399a6":"code","aa7e2cf1":"code","d496285f":"code","cd0efdb6":"code","cf340aed":"code","1feeeffe":"code","85dde5ce":"code","2f11f385":"code","ceb2e225":"code","6978c855":"code","6e28a043":"code","f9c0392f":"code","fee6db46":"code","18494c1c":"code","7c04272c":"code","d4b5271d":"code","66de2023":"code","1872de40":"code","4bff436e":"code","3354d201":"code","cf8b7187":"code","5d441bd6":"code","da0090a7":"code","4d05d9ed":"code","eb887d92":"code","6801ff7a":"code","906a098e":"code","764b2bd7":"code","6eddd299":"code","4810360b":"code","cbc2a1d0":"code","69010b84":"code","ac69e4f1":"code","5fe2e36a":"code","1c0eacb0":"code","1ec73761":"code","d7172011":"code","a8ee0506":"code","234fe662":"code","64815b65":"code","9ec7d646":"code","eea65303":"code","a876b6e4":"code","81b421d6":"code","d7208976":"code","0e581da0":"code","813b29b3":"markdown","8be75dad":"markdown","d680869d":"markdown","6927ab12":"markdown","5712d72a":"markdown","6e82db05":"markdown","9917d24f":"markdown","37ed44d9":"markdown","f0e1472c":"markdown"},"source":{"60e17765":"import numpy as np # linear algebra\nimport pandas as pd # data processing\n\n# data vizualization \nimport matplotlib.pyplot as plt\nimport seaborn as sns # used for plot interactive graph.\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom pylab import rcParams\n# figure size in inches\n%matplotlib inline\nplt.style.use('seaborn-white')\n\n# S.A. and w2v ;)\nimport re\nimport collections\nimport gensim\nimport nltk\nfrom nltk.corpus import stopwords\n\n# Input data files are available in the read-only \"..\/input\/\" directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","79954448":"# reading csv files\ndata = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv')\nuser_reviews = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore_user_reviews.csv')","b422eeef":"data.shape","8edf133d":"user_reviews.shape","4c890d27":"user_reviews.head()","55f6a6dd":"data.head()","d833ea68":"data.info()","01bb5e9c":"data.describe()","8992fde8":"data.isna().sum()","f03fd1ba":"user_reviews.isna().sum()","f5cc426c":"#calculating the RATING based on mean value\ndata['Rating'].fillna((data['Rating'].mean()), inplace=True)","b4bdab68":"data.isna().sum()","4bbb04d7":"#droping the rest of na values\ndata = data.dropna()","73d7640a":"data.isna().sum()","e4b55701":"#final data shape\ndata.shape","bca4d3e3":"#check for the duplicated data based on the column APP name\ndata[data.duplicated(['App'])]","37302391":"data[data['App']==\"Quick PDF Scanner + OCR FREE\"]","998d2f7d":"data.shape","9cf640e4":"data.sort_values(by=['Reviews'], inplace=True)","a3221d71":"data.head()","84c1e635":"#Drop the duplicates based on the app names\ndata2 = data.drop_duplicates(keep='last',subset=['App'])","28f82aea":"data2.shape","6e921f2f":"data2.head()","846d7de1":"#Converting the Installs number into float value and copying in a different column\ndata2['Installs_num'] = data2['Installs'].apply(lambda x: float(x.split(\"+\")[0].replace(\",\",\"\")))","3793e15d":"#converting the price into float values\ndata2['Price_USD'] = data2['Price'].apply(lambda x: float(x.replace(\"$\",\"\")))","7c17e0e4":"#Converting reviews count into int\ndata2['Reviews_count']= data['Reviews'].apply(lambda x: int(x))","248efe49":"data2.head()","88968e2d":"len(data2[data2.Size == \"Varies with device\"])","255e39e1":"data2['Size'].replace('Varies with device',np.nan,inplace=True)","45238c70":"data2.head()","471a2a7e":"data2[\"Size\"] = (data2[\"Size\"].replace(r'[kM]+$', '', regex=True).astype(float) * data2[\"Size\"].str.extract(r'[\\d\\.]+([kM]+)', expand=False).fillna(1).replace([\"k\",\"M\"], [10**3, 10**6]).astype(int))","540fd252":"data2.head()","0d2dce8d":"data2[\"Android Ver\"].replace('Varies with device',np.nan,inplace=True)","b25399a6":"#finding out the minimum android version supported for the apps\ndata2['min_android_version'] = data2[\"Android Ver\"].apply(lambda x: re.sub(\"[a-zA-Z]\",\"\", str(x)))","aa7e2cf1":"data2.head()","d496285f":"data2['Rating'].describe()","cd0efdb6":"data2.isna().sum().sort_values(ascending = False)","cf340aed":"data2['Size'].fillna((data2['Size'].mean()), inplace=True)","1feeeffe":"#Our final data frame with all the extra values removed\ndata3 = data2.drop(['Reviews','Installs','Price','Android Ver'],axis='columns')","85dde5ce":"data3.head()","2f11f385":"#Total Number of applications in each categories.\n\nfig = plt.figure(figsize=(20,10)) \ndata3.groupby('Category').count()[\"App\"].sort_values(ascending=True).plot(kind='barh',title='Number of apps\/Category', fontsize=15)\nplt.ylabel('Count') \n\n#how to display %age on secondary axis on bar plot","ceb2e225":"#What is the average rating of the applications in each categories?\nfig = plt.figure(figsize=(16,8)) \ndata3.groupby('Category').mean().sort_values(by='Rating',ascending='False')['Rating'].plot(kind='barh',title='Average app rating', fontsize=10)\nplt.ylabel('Star Rating') \nplt.style.use('seaborn-white')","6978c855":"#What is the average price of applications in each categories?\nfig = plt.figure(figsize=(16,8)) \ndata3.groupby('Category').mean().sort_values(by='Price_USD',ascending='False')['Price_USD'].plot(kind='barh',title='Price in USD', fontsize=10)\nplt.ylabel('App category') \nplt.xlabel('Average price - USD') ","6e28a043":"fig = plt.figure(figsize=(16,8)) \nlabels = data3['Category'].value_counts(sort = True).index\nsizes = data3['Category'].value_counts(sort = True)\nplt.pie(sizes,labels=labels,autopct='%1.1f%%', shadow=True)\nplt.title('Top categories',size = 20)\nplt.legend(labels, loc=\"best\")\nplt.axis('equal')\nplt.tight_layout()\nplt.show()","f9c0392f":"data3.head()","fee6db46":"#What are the applications and categories with, most number of reviews, highest rating, most revenue through installs, most number of installs?\n#data3[\"Reviews_count\"]==data3.Reviews_count.max()\nprint(\"Maximum number of reviews count is of : \"+ data3[data3['Reviews_count']==data3.Reviews_count.max()][\"App\"].iloc[0] + \" with a value of \" + str(data3.Reviews_count.max()))\nprint(\"Maximum Rating is of : \"+ data3[data3['Rating']==data3.Rating.max()][\"App\"].iloc[0] + \" with a value of \" + str(data3.Rating.max()))\nprint(\"Maximum number of installs is of : \"+ data3[data3['Installs_num']==data3.Installs_num.max()][\"App\"].iloc[0] + \" with a value of \" + str(data3.Installs_num.max()))\nprint(\"Maximum price is of : \"+ data3[data3['Price_USD']==data3.Price_USD.max()][\"App\"].iloc[0] + \" with a value of \" + str(data3.Price_USD.max()))","18494c1c":"#What is the average size of the applications?\nprint(\"Mean size \" + str(data3[\"Size\"].mean()\/(1024*1024)) + \" Mb\") #converting in MB\nprint(\"Heaviest app size \" + str(data3[\"Size\"].max()\/(1024*1024)) + \" Mb\") #converting in MB\nprint(\"Smalles app size \" + str(data3[\"Size\"].min()\/(1024*1024)) + \" Mb\") #converting in MB","7c04272c":"#What are the categories with, most number of reviews, highest rating, most revenue through installs, most number of installs?\nfig = plt.figure(figsize=(16,8)) \ndata3.groupby('Category').sum().sort_values(by='Installs_num',ascending='False')['Installs_num'].plot(kind='bar',title='Installs', fontsize=10)\nplt.ylabel('Number of Install') ","d4b5271d":"fig = plt.figure(figsize=(16,8)) \nlabels = data3['Content Rating'].value_counts(sort = True).index\nsizes = data3['Content Rating'].value_counts(sort = True)\nplt.pie(sizes,labels=labels,autopct='%1.1f%%', shadow=True)\nplt.title('Content Rating',size = 20)\nplt.show()","66de2023":"#added in version 16\ndata4= data3.copy()","1872de40":"#added in version 16\ndef is_free(price):\n    if price > 0:\n        return 1\n    else:\n        return 0","4bff436e":"data3.isna().sum()","3354d201":"data4[\"is_free\"] = data4[\"Price_USD\"].apply(lambda x: int(is_free(x)))","cf8b7187":"data4.head()","5d441bd6":"#How many percent of applications are free and how many are paid?\n#to check how many apps are free\nfig = plt.figure(figsize=(16,8)) \nlabels = ['0 = Free','1 = Paid']\nsizes = data4['is_free'].value_counts(sort = True)\nplt.pie(sizes,labels=labels,autopct='%1.1f%%', shadow=True)\nplt.title('Free vs Paid apps',size = 20)\nplt.legend()\nplt.show()","da0090a7":"fig = plt.figure(figsize=(16,8)) \nplt.hist(data3['Rating'],edgecolor = 'black', log=True)\nplt.title(\"Rating distribution\")\nplt.xlabel('Rating')\nplt.tight_layout()\nplt.legend()","4d05d9ed":"fig = plt.figure(figsize=(16,8)) \nplt.hist(data3['Price_USD'],edgecolor = 'black', log=True)\nplt.title(\"Price of apps\")\nplt.xlabel('Price')\nplt.tight_layout()\nplt.legend()","eb887d92":"user_reviews.head(10)","6801ff7a":"user_reviews.info()","906a098e":"user_reviews.describe()","764b2bd7":"user_data = user_reviews.dropna()","6eddd299":"user_data","4810360b":"temp = user_data.groupby('Sentiment').count()['Translated_Review'].reset_index().sort_values(by='Translated_Review',ascending=False)\ntemp.style.background_gradient(cmap='Purples')","cbc2a1d0":"plt.figure(figsize=(12,6))\nsns.countplot(x='Sentiment',data=user_data)","69010b84":"fig = go.Figure(go.Funnelarea(\n    text = temp.Sentiment,\n    values = temp.Translated_Review,\n    title = {\"position\": \"top center\", \"text\": \"Funnel-Chart of Sentiment Distribution\"}\n    ))\nfig.show()","ac69e4f1":"nltk.download('stopwords')\nstop_words = stopwords.words(\"english\")","5fe2e36a":"split_words = []\ntop = []\nfor review in user_data.Translated_Review:\n    top.append(review)","1c0eacb0":"top","1ec73761":"top = str(top)\nreviews = str(user_data.Translated_Review)","d7172011":"wordcount = {}\nfor word in reviews.lower().split():\n    word = word.replace(\".\",\"\")\n    word = word.replace(\",\",\"\")\n    word = word.replace(\":\",\"\")\n    word = word.replace(\"\\\"\",\"\")\n    word = word.replace(\"!\",\"\")\n    word = word.replace(\"\u00e2\u20ac\u0153\",\"\")\n    word = word.replace(\"\u00e2\u20ac\u02dc\",\"\")\n    word = word.replace(\"*\",\"\")\n    if word not in stop_words:\n        if word not in wordcount:\n            wordcount[word] = 1\n        else:\n            wordcount[word] += 1","a8ee0506":"word_counter = collections.Counter(wordcount)\nlst = word_counter.most_common(20)\ntemp = pd.DataFrame(lst, columns = ['Word', 'Count'])\ntemp.plot.bar(x='Word',y='Count')\ntemp.columns = ['Word','Count']\ntemp.style.background_gradient(cmap='Purples')","234fe662":"fig = px.bar(temp, x=\"Word\", y=\"Count\", title='Commmon Words in Selected Text', orientation='v', \n             width=700, height=700,color='Count')\nfig.show()","64815b65":"w2v_model = gensim.models.word2vec.Word2Vec(size=300, \n                                            window=7, \n                                            min_count=10, \n                                            workers=8)","9ec7d646":"%%time\ndocuments = [_text.split() for _text in user_data.Translated_Review] ","eea65303":"w2v_model.build_vocab(documents)","a876b6e4":"words = w2v_model.wv.vocab.keys()\nvocab_size = len(words)\nprint(\"Vocab size\", vocab_size)","81b421d6":"%%time\nw2v_model.train(documents, total_examples=len(documents), epochs=8)","d7208976":"w2v_model.most_similar(\"good\")","0e581da0":"w2v_model.most_similar(\"bad\")","813b29b3":"# 1. Imports ","8be75dad":"# 2. Data Exploration","d680869d":"# Exploratory Data Analysis, S.A. and w2v on Google Play Store App Data!\nIn this kernel we will be doing eda, sentiment analysis and w2v for data from google play store apps.\nLet's start with importing needful modules and libraries.","6927ab12":"### For now, I didn't cleaned the data for w2v but you feel free to copy and edit my kernel and do so.\n\n# Please upvote if found helpful and leave your valuable comment below.\ud83d\ude0a","5712d72a":"# Current knowings :\nData is very positive that means people's mood and actions are good towards the apps. But some of them could be wrong too, who knows? ;)","6e82db05":"# 4. Data analysis","9917d24f":"# 3. Data Cleaning and Preprocessing","37ed44d9":"# Observations\n\n* Finance apps are the costliest one\n* Games are the most installed category of the apps.\n* Average rating is irrelevant to the category\n* Around 19.7% of the apps are related to family\n* 81.8% of the apps belong to everyone category","f0e1472c":"# Now S.A. and w2v \ud83e\udd1e\ud83c\udffb on user-reviews data"}}