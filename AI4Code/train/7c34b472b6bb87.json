{"cell_type":{"bd486073":"code","a6c84fac":"code","f8fdfc38":"code","97581788":"code","0d5169bb":"code","0db47852":"code","b249d858":"code","5fa6013d":"code","0c43a4ea":"code","600ccad9":"code","c5aac784":"code","67395f48":"code","f645609e":"code","1c94c190":"code","f227fa4f":"code","af2d6dfa":"code","becb4dae":"code","3c6c8533":"code","feb68869":"code","ea3d48b9":"code","4e273f0b":"code","e405c547":"code","6fe39f18":"code","c95b4cbc":"code","802b432d":"code","5d3897f7":"code","ef682b9a":"code","ac21e6dc":"markdown","b627571c":"markdown","977a8cba":"markdown","5269cd76":"markdown","af847996":"markdown","9e2504c3":"markdown","5d9125c2":"markdown","ccbe95ce":"markdown","7f8868af":"markdown","18f7c401":"markdown","50b97804":"markdown","cce17e37":"markdown","250e60f5":"markdown","2e377114":"markdown","2584c7e5":"markdown","254c97df":"markdown","f5cd1c2d":"markdown","fe193dcb":"markdown","36dd914c":"markdown","6ed665ff":"markdown","9e34c250":"markdown","c909c966":"markdown","108f4bbc":"markdown","8a33bb54":"markdown","8d617b39":"markdown","c40a7de8":"markdown"},"source":{"bd486073":"import sys #access to system parameters https:\/\/docs.python.org\/3\/library\/sys.html\nprint(\"Python version: {}\". format(sys.version))\nimport numpy as np # linear algebra\nprint(\"NumPy version: {}\". format(np.__version__))\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nprint(\"pandas version: {}\". format(pd.__version__))\nimport matplotlib # collection of functions for scientific and publication-ready visualization\nprint(\"matplotlib version: {}\". format(matplotlib.__version__))\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings # ignore warnings\nwarnings.filterwarnings('ignore')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a6c84fac":"df = pd.read_csv('..\/input\/avocado-prices\/avocado.csv',index_col=0) # df.rename( columns={'Unnamed: 0':'id'}, inplace=True )\ndf.shape","f8fdfc38":"df.head(3)","97581788":"df.tail(3)","0d5169bb":"df.columns","0db47852":"import seaborn as sns\nf, ax = plt.subplots(nrows=1, ncols=3, figsize=(18, 4))\nsns.distplot(df.AveragePrice, ax=ax[0])\nsns.boxplot(df.AveragePrice, ax=ax[1])\nfrom scipy import stats\nstats.probplot(df['AveragePrice'], plot=ax[2])\nplt.show()","b249d858":"df['type'].unique()","5fa6013d":"plt.figure()\nplt.title(\"Avocado Average Price by Type\")\nsns.barplot(x=\"type\",y=\"AveragePrice\",data= df)\nplt.show()","0c43a4ea":"conventional = len(df[df['type'] == 'conventional'])\nconventional","600ccad9":"organic = len(df[df['type']== 'organic'])\norganic","c5aac784":"import matplotlib.pyplot as plt\ny = ('conventional', 'organic')\ny_pos = np.arange(len(y))\nx = (conventional, organic)\nlabels = 'conventional', 'organic'\nsizes = [conventional, organic]\nfig1, ax1 = plt.subplots()\nax1.pie(sizes,  labels=labels, autopct='%1.1f%%', startangle=90) \nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.title('Percentage', size=16)\nplt.show() # Pie chart, where the slices will be ordered and plotted counter-clockwise:","67395f48":"print(\"Skewness: %f\" % df['AveragePrice'].skew())","f645609e":"print(\"Kurtosis: %f\" % df['AveragePrice'].kurt())","1c94c190":"df_conventional = df[df['type'] == 'conventional']\n# df_conventional.shape\ndf_organic = df[df['type'] == 'organic']\n# df_organic.shape\nf, ax = plt.subplots(nrows=1, ncols=1, figsize=(18, 4))\nsns.distplot(df_conventional['AveragePrice']) # histogram\nsns.distplot(df_organic['AveragePrice']) # histogram\nplt.show()","f227fa4f":"df_conventional = df[df['type'] == 'conventional']\n# df_conventional.shape\ndf_organic = df[df['type'] == 'organic']\n# df_organic.shape\nf, ax = plt.subplots(nrows=1, ncols=1, figsize=(18, 4))\nsns.boxplot(df_conventional['AveragePrice']) # histogram\nsns.boxplot(df_organic['AveragePrice'],palette = 'pink') # histogram\nplt.show()","af2d6dfa":"mask = df['type']=='organic'\ng = sns.factorplot('AveragePrice','region',data=df[mask],\n    hue='year',size=13,aspect=0.8,palette='Spectral',join=False,)\n# https:\/\/seaborn.pydata.org\/tutorial\/color_palettes.html","becb4dae":"corrmat = df.corr()\nf, ax = plt.subplots(nrows=1, ncols=1, figsize=(12, 10))\nax.set_title(\"Correlation Matrix\", fontsize=16)\nfilter = df.columns != 'id'\nsns.heatmap(df[df.columns[filter]].corr(), vmin=-1, vmax=1, cmap='coolwarm', annot=True)","3c6c8533":"print('total number of duplicate values : ',sum(df.duplicated()))","feb68869":"df.describe() # outliers?","ea3d48b9":"print(f\"Missing data: {df.isna().sum(axis=0).any()}\")","4e273f0b":"df['type']= df['type'].map({'conventional':0,'organic':1})\n\n# Extracting month from date column.\ndf.Date = df.Date.apply(pd.to_datetime)\ndf['Month'] = df['Date'].apply(lambda x:x.month)\ndf.drop('Date',axis=1,inplace=True)\ndf.Month = df.Month.map({1:'JAN',2:'FEB',3:'MARCH',4:'APRIL',5:'MAY',6:'JUNE',7:'JULY',8:'AUG',9:'SEPT',10:'OCT',11:'NOV',12:'DEC'})","e405c547":"# Creating dummy variables\ndummies = pd.get_dummies(df[['year','region','Month']],drop_first=True)\ndf_dummies = pd.concat([df[['Total Volume', '4046', '4225', '4770', 'Total Bags',\n       'Small Bags', 'Large Bags', 'XLarge Bags', 'type']],dummies],axis=1)\ntarget = df['AveragePrice']\n\n# Splitting data into training and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df_dummies,target,test_size=0.30)\n\n# Standardizing the data\ncols_to_std = ['Total Volume', '4046', '4225', '4770', 'Total Bags', 'Small Bags','Large Bags', 'XLarge Bags']\nfrom sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\nscaler.fit(X_train[cols_to_std])\nX_train[cols_to_std] = scaler.transform(X_train[cols_to_std])\nX_test[cols_to_std] = scaler.transform(X_test[cols_to_std])","6fe39f18":"from xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score\nmodel = XGBRegressor()\nmodel.fit(X_train, y_train)\nY_pred = model.predict(X_test)\nscore = model.score(X_train, y_train)\nprint('Training Score:', score)\nscore = model.score(X_test, y_test)\nprint('Testing Score:', score)\noutput = pd.DataFrame({'Predicted':Y_pred})","c95b4cbc":"print(output.head())\npeople = output.loc[output.Predicted == 1][\"Predicted\"]","802b432d":"mae = np.round(mean_absolute_error(y_test,Y_pred),3)\nprint('Mean Absolute Error:', mae)","5d3897f7":"mse = np.round(mean_squared_error(y_test,Y_pred),3)\nprint('Mean Squared Error:', mse)","ef682b9a":"score = np.round(r2_score(y_test,Y_pred),3)\nprint('R2 Score:', score)","ac21e6dc":"<a id=\"step9\"><\/a>\n# Step 9 Conclusion","b627571c":"I see that there are two types: conventional and organic.","977a8cba":"<a id=\"step1\"><\/a>\n# Step 1 Identify The Problem\nGiven the data set with the [avocado prices](https:\/\/www.kaggle.com\/neuromusic\/avocado-prices) from 2015 to 2018, we will predict the prices using xgboost.","5269cd76":"I will rename the first column to 'id'.","af847996":"Conclusion: The organic avocados are more expensive.","9e2504c3":"<a id=\"step8\"><\/a>\n# Step 8 Evaluate the model","5d9125c2":"But now we need to know what other features are driving up the price? Maybe the region?","ccbe95ce":"<a id=\"step5\"><\/a>\n# Step 5 Outliers","7f8868af":"XGBoost has a score of 89% which is pretty good but could be better.","18f7c401":"<a id=\"step2\"><\/a>\n# Step 2 Exploratory Data Analysis","50b97804":"Conclusion: Total Volume (98) and Total Bags (99) also have a strong correlation.","cce17e37":"Conclusion: The price not only depends on the type, but also on the region. ","250e60f5":"Conclusion: Bimodal distribution but why? Maybe because conventional versus organic.","2e377114":"<a id=\"step4\"><\/a>\n# Step 4 Feature Importance","2584c7e5":">Hello! My name is [Mauricio Ruanova](https:\/\/mruanova.com).","254c97df":"Table of Contents\n1. [Step 1 - Identify The Problem](#step1)\n1. [Step 2 - Exploratory Data Analysis](#step2)\n1. [Step 3 - Distribution](#step3)\n1. [Step 4 - Feature Importance](#step4)\n1. [Step 5 - Outliers](#step5)\n1. [Step 6 - Missing data](#step6)\n1. [Step 7 - Select the model](#step6)\n1. [Step 8 - Evaluate the model](#step7)\n1. [Step 9 - Conclusion](#step8)","f5cd1c2d":"<a id=\"step7\"><\/a>\n# Step 7 Select the model\n","fe193dcb":"Kurtosis is appropriate from a range of \u2212 10 to + 10.","36dd914c":"thanks to [ayushikaushik](https:\/\/www.kaggle.com\/ayushikaushik\/comparison-of-all-regression-models) for your examples.","6ed665ff":"Conclusion: I usually take a look at the min and max values to identify outliers but I didn't find any this time.","9e34c250":"<a id=\"step3\"><\/a>\n# Step 3 Distribution\nFirst let's take a look at the distribution.","c909c966":"![avocado](https:\/\/mruanova.com\/avocado.gif)","108f4bbc":"Acceptable values of skewness fall between \u2212 3 and + 3.","8a33bb54":"Root Mean Square Error (RMSE) is the standard deviation of the residuals (prediction errors). Residuals are a measure of how far from the regression line data points are; RMSE is a measure of how spread out these residuals are. In other words, it tells you how concentrated the data is around the line of best fit.","8d617b39":"<a id=\"step6\"><\/a>\n# Step 6 Missing Data","c40a7de8":"Conclusion: data is 50% conventional and 50% organic."}}