{"cell_type":{"789ab464":"code","563cf4b9":"code","17e881b8":"code","94897d08":"code","38f736aa":"code","c92d180d":"code","0ff7601b":"code","55f2eba6":"code","9f419942":"code","93d04c76":"code","b23c58dd":"code","4a29f5b2":"code","b5740f62":"code","02481521":"code","b0c8cb91":"code","b5e5053e":"code","56296bc4":"code","701e2a1a":"code","e59a8669":"code","6e6fb2fb":"code","01130981":"code","510894bd":"markdown","a5b5fe2d":"markdown","5200dd71":"markdown","2f07c6da":"markdown","cb337227":"markdown","b2c71b7c":"markdown"},"source":{"789ab464":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n'''\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/1056lab-cardiac-arrhythmia-detection\/normal'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n'''\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","563cf4b9":"import lightgbm as lgb\nfrom sklearn.model_selection import cross_validate,StratifiedKFold,cross_val_score,train_test_split\nfrom sklearn.metrics import make_scorer,roc_auc_score\nimport xgboost as xgb\nimport featuretools as ft","17e881b8":"def met_auc(y_test,y_pred):\n    return roc_auc_score(y_test,y_pred)","94897d08":"stratifiedkfold = StratifiedKFold(n_splits = 3)\nscore_func = {'auc':make_scorer(met_auc)}","38f736aa":"from glob import glob\nfrom scipy.io import loadmat\nidx_ = []  # index\nlen_ = []  # length\nmean_ = []  # mean\nstd_ = []  # standard deviation\nste_ = []  # standard error\nmax_ = []  # maximum value\nmin_ = []  # minimum value\nmed_ = []\ny_ = []\nfor d in ['normal', 'af']:\n    for path in sorted(glob('\/kaggle\/input\/1056lab-cardiac-arrhythmia-detection\/' + d +'\/*.mat')):\n        filename = path.split('\/')[-1]  # e.g. B05821.mat\n        i = filename.split('.')[0]  # e.g. B05821\n        idx_.append(i)\n        mat_contents = loadmat(path)\n        x = mat_contents['val'][0]\n        len_.append(len(x))\n        mean_.append(x.mean())\n        std_.append(x.std())\n        ste_.append(x.std()\/np.sqrt(len(x)))\n        max_.append(x.max())\n        min_.append(x.min())\n        med_.append(np.median(x))\n        if d == 'normal':\n            y_.append(0)\n        else:\n            y_.append(1)","c92d180d":"train_df = pd.DataFrame(columns=['id','length', 'mean', 'standard deviation', 'standard error', 'maximum value', 'minimum value', 'y'])\ntrain_df['id']=idx_\ntrain_df['length'] = len_\ntrain_df['mean'] = mean_\ntrain_df['standard deviation'] = std_\ntrain_df['standard error'] = ste_\ntrain_df['maximum value'] = max_\ntrain_df['minimum value'] = min_\ntrain_df['median'] = med_ \ntrain_df['y'] = y_","0ff7601b":"es = ft.EntitySet(id = 'example')\nes = es.entity_from_dataframe(entity_id='locations',dataframe=train_df.drop(['y'],axis = 1),index = 'id')","55f2eba6":"feature_matrix, feature_defs = ft.dfs(entityset=es,\n                                       target_entity='locations',\n                                       trans_primitives=['add_numeric', 'subtract_numeric','divide_numeric','modulo_numeric','multiply_numeric'],\n                                       agg_primitives=[],\n                                       max_depth=1,\n                                       )","9f419942":"X = feature_matrix.to_numpy()\nY = train_df['y'].to_numpy()\nfeature_matrix.shape\n#feature_defs","93d04c76":"model = lgb.LGBMClassifier()\nscores = cross_validate(model, X, Y, cv = stratifiedkfold, scoring=score_func)\nprint('auc:', scores['test_auc'])\nprint('auc:', scores['test_auc'].mean())","b23c58dd":"idx_ = []  # index\nlen_ = []  # length\nmean_ = []  # mean\nstd_ = []  # standard deviation\nste_ = []  # standard error\nmax_ = []  # maximum value\nmin_ = []  # minimum value\nmed_ = []  #median\nfor path in sorted(glob('\/kaggle\/input\/1056lab-cardiac-arrhythmia-detection\/test\/*.mat')):\n    filename = path.split('\/')[-1]  # e.g. B05821.mat\n    i = filename.split('.')[0]  # e.g. B05821\n    idx_.append(i)\n    mat_contents = loadmat(path)\n    x = mat_contents['val'][0]\n    len_.append(len(x))\n    mean_.append(x.mean())\n    std_.append(x.std())\n    ste_.append(x.std()\/np.sqrt(len(x)))\n    max_.append(x.max())\n    min_.append(x.min())\n    med_.append(np.median(x))","4a29f5b2":"test_df = pd.DataFrame( columns=['id','length', 'mean', 'standard deviation', 'standard error', 'maximum value', 'minimum value'])\ntest_df['id'] = idx_ \ntest_df['length'] = len_\ntest_df['mean'] = mean_\ntest_df['standard deviation'] = std_\ntest_df['standard error'] = ste_\ntest_df['maximum value'] = max_\ntest_df['minimum value'] = min_\ntest_df['median'] = med_ \ntest_df","b5740f62":"es_test = ft.EntitySet(id = 'example')\nes_test = es.entity_from_dataframe(entity_id='locations',dataframe=test_df,index = 'id')","02481521":"feature_matrix_test, feature_defs_test = ft.dfs(entityset=es_test,\n                                       target_entity='locations',\n                                       trans_primitives=['add_numeric', 'subtract_numeric','divide_numeric','modulo_numeric','multiply_numeric'],\n                                       agg_primitives=[],\n                                       max_depth=1,\n                                       )","b0c8cb91":"X_test = feature_matrix_test.to_numpy()","b5e5053e":"import optuna\ndef objective(trial):\n    param = {\n        'objective': 'binary',\n        'metric': 'binary_logloss',\n        'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 10.0),\n        'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-8, 10.0),\n        'num_leaves': trial.suggest_int('num_leaves', 2, 256),\n        'feature_fraction': trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n        'bagging_fraction': trial.suggest_uniform('bagging_fraction', 0.4, 1.0),\n        'bagging_freq': trial.suggest_int('bagging_freq', 1, 7),\n        'min_child_samples': trial.suggest_int('min_child_samples', 5, 100),\n    }\n \n    model = lgb.LGBMClassifier()\n    scores = cross_validate(model, X, Y, cv = stratifiedkfold, scoring=score_func)\n    return scores['test_auc'].mean()","56296bc4":"study = optuna.create_study(direction='maximize')\nstudy.optimize(objective, n_trials=100)","701e2a1a":"model = lgb.LGBMClassifier()\nmodel.fit(X,Y)","e59a8669":"p = model.predict_proba(X_test)[:,1]","6e6fb2fb":"sample = pd.read_csv('..\/input\/1056lab-cardiac-arrhythmia-detection\/sampleSubmission.csv',index_col = 0)\nsample['af'] = p","01130981":"sample.to_csv('predict_lgbm_ft.csv',header = True)","510894bd":"train_df['max-mean']=train_df['maximum value']-train_df['mean'] \ntrain_df['mean-min']=train_df['mean']-train_df['minimum value']\ntrain_df['mean+std']=train_df['mean']+train_df['standard deviation']\ntrain_df['mean-std']=train_df['mean']-train_df['standard deviation']\ntrain_df","a5b5fe2d":"train = np.array([])\ntest = np.array([])\nY=[]\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/1056lab-cardiac-arrhythmia-detection\/normal'):\n    for filename in filenames:\n        if (9000 - io.loadmat(os.path.join(dirname, filename), squeeze_me=False)['val'].shape[1]) > 0:\n            #print(9000-io.loadmat(os.path.join(dirname, filename), squeeze_me=False)['val'].shape[1])\n            #print(np.pad(io.loadmat(os.path.join(dirname, filename), squeeze_me=True)['val'],[0,(9000-io.loadmat(os.path.join(dirname, filename), squeeze_me=False)['val'].shape[1])],\"constant\").shape)\n            train = np.append(train,np.pad(io.loadmat(os.path.join(dirname, filename), squeeze_me=True)['val'],[0,(9000-io.loadmat(os.path.join(dirname, filename), squeeze_me=False)['val'].shape[1])],\"constant\"),axis=0)\n        else:\n            train = np.append(train,io.loadmat(os.path.join(dirname, filename), squeeze_me=True)['val'][0:9000],axis=0)\n            #print(9000-io.loadmat(os.path.join(dirname, filename), squeeze_me=False)['val'].shape[1])\n            #print(io.loadmat(os.path.join(dirname, filename), squeeze_me=True)['val'][0:9000].shape)\n        Y.append(0)\n       \nfor dirname, _, filenames in os.walk('\/kaggle\/input\/1056lab-cardiac-arrhythmia-detection\/af'):\n    for filename in filenames:\n        if (9000-io.loadmat(os.path.join(dirname, filename), squeeze_me=False)['val'].shape[1]) > 0:\n            train = np.append(train,np.pad(io.loadmat(os.path.join(dirname, filename), squeeze_me=True)['val'],[0,(9000-io.loadmat(os.path.join(dirname, filename), squeeze_me=False)['val'].shape[1])],\"constant\"),axis=0)\n        else:\n            train = np.append(train,io.loadmat(os.path.join(dirname, filename), squeeze_me=True)['val'][0:9000],axis=0)\n        Y.append(1)\n        \n        \nfor dirname, _, filenames in os.walk('\/kaggle\/input\/1056lab-cardiac-arrhythmia-detection\/test'):\n    flag = 0\n    for filename in filenames:\n        if (9000-io.loadmat(os.path.join(dirname, filename), squeeze_me=False)['val'].shape[1]) > 0:\n            test = np.append(test,np.pad(io.loadmat(os.path.join(dirname, filename), squeeze_me=True)['val'],[0,(9000-io.loadmat(os.path.join(dirname, filename), squeeze_me=False)['val'].shape[1])],\"constant\"),axis=0)\n        else:\n            test = np.append(test,io.loadmat(os.path.join(dirname, filename), squeeze_me=True)['val'][0:9000],axis=0)\n       ","5200dd71":"for dirname, _, filenames in os.walk('\/kaggle\/input\/1056lab-cardiac-arrhythmia-detection\/normal'):\n    flag = 0\n    for filename in filenames:\n        if flag == 0:\n            train = [np.pad(io.loadmat(os.path.join(dirname, filename), squeeze_me=True)['val'],[0,(18286-io.loadmat(os.path.join(dirname, filename), squeeze_me=False)['val'].shape[1])],\"constant\")]\n            flag = 1\n            Y=[0]\n        else:\n            train = np.append(train,[np.pad(io.loadmat(os.path.join(dirname, filename), squeeze_me=True)['val'],[0,(18286-io.loadmat(os.path.join(dirname, filename), squeeze_me=False)['val'].shape[1])],\"constant\")],axis=0)\n            Y.append(0)\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/1056lab-cardiac-arrhythmia-detection\/af'):\n    for filename in filenames:\n        train = np.append(train,[np.pad(io.loadmat(os.path.join(dirname, filename), squeeze_me=True)['val'],[0,(18286-io.loadmat(os.path.join(dirname, filename), squeeze_me=False)['val'].shape[1])],\"constant\")],axis=0)\n        Y.append(1)\n        \nfor dirname, _, filenames in os.walk('\/kaggle\/input\/1056lab-cardiac-arrhythmia-detection\/test'):\n    flag = 0\n    for filename in filenames:\n        if flag == 0:\n            train_test = [np.pad(io.loadmat(os.path.join(dirname, filename), squeeze_me=True)['val'],[0,(18286-io.loadmat(os.path.join(dirname, filename), squeeze_me=False)['val'].shape[1])],\"constant\")]\n            flag = 1\n        else:\n            train_test = np.append(train_test,[np.pad(io.loadmat(os.path.join(dirname, filename), squeeze_me=True)['val'],[0,(18286-io.loadmat(os.path.join(dirname, filename), squeeze_me=False)['val'].shape[1])],\"constant\")],axis=0)","2f07c6da":"for dirname, _, filenames in os.walk('\/kaggle\/input\/1056lab-cardiac-arrhythmia-detection\/normal'):\n    for filename in filenames:\n        print(filename)\n        print(io.loadmat(os.path.join(dirname, filename), squeeze_me=False)['val'].shape[1])","cb337227":"for dirname, _, filenames in os.walk('\/kaggle\/input\/1056lab-cardiac-arrhythmia-detection\/normal'):\n    flag = 0\n    for filename in filenames:\n        if flag == 0:\n            train = [np.pad(io.loadmat(os.path.join(dirname, filename), squeeze_me=True)['val'],[0,(18286-io.loadmat(os.path.join(dirname, filename), squeeze_me=False)['val'].shape[1])],\"constant\")]\n            flag = 1\n            Y=[0]\n        else:\n            train = np.append(train,[np.pad(io.loadmat(os.path.join(dirname, filename), squeeze_me=True)['val'],[0,(18286-io.loadmat(os.path.join(dirname, filename), squeeze_me=False)['val'].shape[1])],\"constant\")],axis=0)\n            Y.append(0)\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/1056lab-cardiac-arrhythmia-detection\/af'):\n    for filename in filenames:\n        train = np.append(train,[np.pad(io.loadmat(os.path.join(dirname, filename), squeeze_me=True)['val'],[0,(18286-io.loadmat(os.path.join(dirname, filename), squeeze_me=False)['val'].shape[1])],\"constant\")],axis=0)\n        Y.append(1)\n        \nfor dirname, _, filenames in os.walk('\/kaggle\/input\/1056lab-cardiac-arrhythmia-detection\/test'):\n    flag = 0\n    for filename in filenames:\n        if flag == 0:\n            train_test = [np.pad(io.loadmat(os.path.join(dirname, filename), squeeze_me=True)['val'],[0,(18286-io.loadmat(os.path.join(dirname, filename), squeeze_me=False)['val'].shape[1])],\"constant\")]\n            flag = 1\n        else:\n            train_test = np.append(train_test,[np.pad(io.loadmat(os.path.join(dirname, filename), squeeze_me=True)['val'],[0,(18286-io.loadmat(os.path.join(dirname, filename), squeeze_me=False)['val'].shape[1])],\"constant\")],axis=0)","b2c71b7c":"from scipy import io\nfrom tslearn.clustering import TimeSeriesKMeans, silhouette_score\nfrom tslearn.preprocessing import TimeSeriesScalerMinMax\nfrom tslearn.utils import to_time_series_dataset"}}