{"cell_type":{"fdcd0858":"code","1aa0c495":"code","11967e72":"code","5caa2b85":"code","200e5073":"code","82e8acd4":"code","aa7fa7a5":"code","414c723e":"code","90570098":"code","92e2baf6":"code","ceefe91d":"code","cb9f5e70":"code","2135de00":"code","6a4475ee":"code","e7398c64":"code","9bab4f06":"code","51c93e7a":"code","0216fab2":"code","a72f87cc":"code","2b69a70f":"code","632a5a6c":"code","1675cd33":"code","9b931ad7":"code","384829ea":"code","c20daa2f":"code","6c3051e9":"code","d0417cc7":"code","786a374d":"code","bb3c5692":"code","276fdcde":"code","1f3a39d5":"code","a45b3b04":"code","e1155718":"code","9b035019":"code","40aa5ed7":"code","5ad92d6f":"code","c80a5315":"code","1bc476fd":"markdown","0111bc8a":"markdown","3dc0f284":"markdown","12d748a1":"markdown","39cb0979":"markdown","f07af4f7":"markdown","e6b8f3fc":"markdown","7e34dbc9":"markdown","91e5b138":"markdown","8580501a":"markdown","93de9193":"markdown","5420ebd7":"markdown","3ec61f1e":"markdown","4ed9e0ce":"markdown","55a5b17f":"markdown","90237866":"markdown","69fd0183":"markdown","16b9d0a5":"markdown","3469482a":"markdown","d37a216c":"markdown","b662b407":"markdown","108b47fb":"markdown","3ad769ff":"markdown","b0854bac":"markdown","beb29207":"markdown","347f2601":"markdown","1b1182a2":"markdown","a9100d08":"markdown","56615257":"markdown"},"source":{"fdcd0858":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1aa0c495":"## import all required libraries\nimport numpy as np ## for linear algebra\nimport pandas as pd ## data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt ## for visualisation\nimport seaborn as sns ## for visualisation\nimport warnings ## for filterout warnings\nwarnings.filterwarnings(\"ignore\")","11967e72":"## load our sales data\n\nsales_train = pd.read_csv('..\/input\/demand-forecasting-kernels-only\/train.csv',parse_dates=['date'],index_col=['date']) ## train data\nsales_test = pd.read_csv('..\/input\/demand-forecasting-kernels-only\/test.csv',parse_dates=['date'],index_col=['date']) ## test data","5caa2b85":"## check train head\n\nsales_train.head()","200e5073":"## check train shape\n\nsales_train.shape","82e8acd4":"## check info of train data\n\nsales_train.info()","aa7fa7a5":"## null check in train\n\nsales_train.isnull().sum()","414c723e":"## null check for test\n\nsales_test.isnull().sum()","90570098":"plt.figure(figsize=(20,10))\nplt.plot(sales_train['sales'].resample('W').sum(),label=\"sales\")\nplt.show()","92e2baf6":"## create dataset for every shop and visualize sales trend\n\nshop1 = sales_train[sales_train.store==1]['sales'].sort_index(ascending=True)\nshop2 = sales_train[sales_train.store==2]['sales'].sort_index(ascending=True)\nshop3 = sales_train[sales_train.store==3]['sales'].sort_index(ascending=True)\nshop4 = sales_train[sales_train.store==4]['sales'].sort_index(ascending=True)\n","ceefe91d":"fig,(ax1,ax2,ax3,ax4) = plt.subplots(4,figsize=(12,13))\nshop1.resample('W').sum().plot(ax=ax1)\nshop2.resample('W').sum().plot(ax=ax2)\nshop3.resample('W').sum().plot(ax=ax3)\nshop4.resample('W').sum().plot(ax=ax4)\nplt.show()","cb9f5e70":"import pylab\nfrom pylab import rcParams\nimport statsmodels.api as sm\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nrcParams['figure.figsize'] = 12, 4\ndecomposition = seasonal_decompose(shop1, model='additive' ,period=365) # additive seasonal index\nfig = decomposition.trend.plot()\nplt.show()","2135de00":"rcParams['figure.figsize'] = 12, 4\ndecomposition2 = seasonal_decompose(shop2, model='additive' ,period=365) # additive seasonal index\nfig = decomposition2.trend.plot()\nplt.show()","6a4475ee":"rcParams['figure.figsize'] = 12, 4\ndecompositio3 = seasonal_decompose(shop3, model='additive' ,period=365) # additive seasonal index\nfig = decompositio3.trend.plot()\nplt.show()","e7398c64":"rcParams['figure.figsize'] = 12, 4\ndecompositio4 = seasonal_decompose(shop4, model='additive' ,period=365) # additive seasonal index\nfig = decompositio4.trend.plot()\nplt.show()","9bab4f06":"## create one copy of dataframe\n\ndf = sales_train.copy()\n\ndf['day'] = df.index.day\ndf['month'] = df.index.month\ndf['year'] = df.index.year\ndf['dayofweek'] = df.index.dayofweek\n","51c93e7a":"## create two pivot tables one for sales of every item per year  \n\nsales_item = pd.pivot_table(df,index=['year'],values='sales',columns=['item'],aggfunc=np.mean).values\n\n## create two pivot tables one for sales of every store per year  \n\nsales_store = pd.pivot_table(df,index=['year'],values='sales',columns=['store'],aggfunc=np.mean).values\n\n## calculate relative sales of items with change in year\n\n## calculate relative sales of shops with change in year\n\n## lets plot relative sales per year with respect to items and store \n\nplt.figure(figsize=(12,5))\nplt.subplot(121)\nplt.plot(sales_item\/sales_item.mean(0)[np.newaxis])\nplt.xlabel('year')\nplt.ylabel('relative sales')\nplt.title(\"Relative sales per item for every year\")\nplt.subplot(122)\nplt.plot(sales_store\/sales_store.mean(0)[np.newaxis])\nplt.xlabel('year')\nplt.ylabel('relative sales')\nplt.title(\"Relative sales per store for every year\")\nplt.show()\n\n","0216fab2":"## create two pivot tables one for sales of every item per month  \n\nsales_item = pd.pivot_table(df,index=['month'],values='sales',columns=['item'],aggfunc=np.mean).values\n\n## create two pivot tables one for sales of every store per month  \n\nsales_store = pd.pivot_table(df,index=['month'],values='sales',columns=['store'],aggfunc=np.mean).values\n\n## calculate relative sales of items with change in month\n\n## calculate relative sales of shops with change in month\n\n## lets plot relative sales per month with respect to items and store \n\nplt.figure(figsize=(12,5))\nplt.subplot(121)\nplt.plot(sales_item\/sales_item.mean(0)[np.newaxis])\nplt.xlabel('months')\nplt.ylabel('relative sales')\nplt.title(\"Relative sales per item for every month\")\nplt.subplot(122)\nplt.plot(sales_store\/sales_store.mean(0)[np.newaxis])\nplt.xlabel('month')\nplt.ylabel('relative sales')\nplt.title(\"Relative sales per store for every month\")\nplt.show()\n\n","a72f87cc":"## create two pivot tables one for sales of every item per day  \n\nsales_item = pd.pivot_table(df,index=['day'],values='sales',columns=['item'],aggfunc=np.mean).values\n\n## create two pivot tables one for sales of every store per month  \n\nsales_store = pd.pivot_table(df,index=['day'],values='sales',columns=['store'],aggfunc=np.mean).values\n\n## calculate relative sales of items with change in day\n\n## calculate relative sales of shops with change in day\n\n## lets plot relative sales per day with respect to items and store \n\nplt.figure(figsize=(12,5))\nplt.subplot(121)\nplt.plot(sales_item\/sales_item.mean(0)[np.newaxis])\nplt.xlabel('day')\nplt.ylabel('relative sales')\nplt.title(\"Relative sales per item for every day\")\nplt.subplot(122)\nplt.plot(sales_store\/sales_store.mean(0)[np.newaxis])\nplt.xlabel('day')\nplt.ylabel('relative sales')\nplt.title(\"Relative sales per store for every day\")\nplt.show()\n\n","2b69a70f":"## create two pivot tables one for sales of every item per dayofweek  \n\nsales_item = pd.pivot_table(df,index=['dayofweek'],values='sales',columns=['item'],aggfunc=np.mean).values\n\n## create two pivot tables one for sales of every store per month  \n\nsales_store = pd.pivot_table(df,index=['dayofweek'],values='sales',columns=['store'],aggfunc=np.mean).values\n\n## calculate relative sales of items with change in dayofweek\n\n## calculate relative sales of shops with change in dayofweek\n\n## lets plot relative sales per dayofweek with respect to items and store \n\nplt.figure(figsize=(12,5))\nplt.subplot(121)\nplt.plot(sales_item\/sales_item.mean(0)[np.newaxis])\nplt.xlabel('day of the week')\nplt.ylabel('relative sales')\nplt.title(\"Relative sales per item for every dayofweek\")\nplt.subplot(122)\nplt.plot(sales_store\/sales_store.mean(0)[np.newaxis])\nplt.xlabel('day of the week')\nplt.ylabel('relative sales')\nplt.title(\"Relative sales per store for every dayofweek\")\nplt.show()\n\n","632a5a6c":"## split our train data to test prediction of our model\n\ntrain = sales_train.iloc[0:730400] ## train \ntest = sales_train.iloc[730400:] ## test","1675cd33":"test_naive = test.copy()\ntest_naive['forecast'] = train['sales'][len(train)-1]","9b931ad7":"import sklearn\nfrom sklearn.metrics import mean_squared_error\n\nscore = mean_squared_error(test['sales'],test_naive['forecast'])\n\nresults = pd.DataFrame({'model':['naive model'],'mean squared error':round(score,2)})","384829ea":"## check result\n\nresults","c20daa2f":"test_simpleavg = test.copy()\ntest_simpleavg['forecast'] = train['sales'].mean()","6c3051e9":"score_simavg = mean_squared_error(test['sales'],test_simpleavg['forecast']) ## calculate score\n\nresults2 = pd.DataFrame({'model':['simple average model'],'mean squared error':round(score_simavg,2)})\nresults = pd.concat([results,results2])\n","d0417cc7":"results ##check results","786a374d":"#simp_mov_avg = test.copy()\nwindow = 12\nsimp_mov_avg = train['sales'].rolling(window).mean()","bb3c5692":"simp_avgmov = test.copy()\nsimp_avgmov['forecast'] = simp_mov_avg[-1]","276fdcde":"score_simp_mov_avg = mean_squared_error(test['sales'],simp_avgmov['forecast']) ## calculate score\n\nresults3 = pd.DataFrame({'model':['simple average model'],'mean squared error':round(score_simp_mov_avg,2)})\nresults = pd.concat([results,results3])\n","1f3a39d5":"results ## check result","a45b3b04":"from statsmodels.tsa.holtwinters import SimpleExpSmoothing\n\nmodel = SimpleExpSmoothing(train['sales'])\nmodel_fit = model.fit(optimized=True)\nparams = model_fit.params\nses_test = test.copy()\nses_test['forecast'] = model_fit.predict( start='2013-01-01', end='2017-12-31')\n","e1155718":"score_ses_avg = mean_squared_error(test['sales'],ses_test['forecast']) ## calculate score\n\nresults4 = pd.DataFrame({'model':['simple exponential smoothing  model'],'mean squared error':round(score_ses_avg,2)})\nresults = pd.concat([results,results4])\n","9b035019":"results","40aa5ed7":"from statsmodels.tsa.holtwinters import ExponentialSmoothing\n\nmodel_exp = ExponentialSmoothing(np.asarray(train['sales']) ,seasonal_periods=12 ,trend='additive', seasonal=None)\nmodel_fit_exp = model_exp.fit(smoothing_level=0.2, smoothing_slope=0.01, optimized=False)\nparams = model_fit_exp.params\nhes_test = test.copy()\nhes_test['forecast'] = model_fit_exp.forecast(182600)\n","5ad92d6f":"score_hes_avg = mean_squared_error(test['sales'],hes_test['forecast']) ## calculate score\n\nresults5 = pd.DataFrame({'model':['Holts exponential smoothing  model'],'mean squared error':round(score_hes_avg,2)})\nresults = pd.concat([results,results5])\n","c80a5315":"results ## check results","1bc476fd":"* Model is slightly improved","0111bc8a":"* There is no clear pattern if we plot sales per store and per items with respect to every month of the year.some of the month's end sales are very low compared to others.","3dc0f284":"* we want to forecast sales and will follow different approch for that.","12d748a1":"# Defination and Components of a Time Series Data\n\nAny data that has a time component involved in it is termed as a time-series data. For example, the number of orders made on a product ordering app per day is an example of time-series data\n\n**Different components of time series data**\n\n**Trend**:- As the name suggests trend depicts the variation in the output as time increases.It is often non-linear. Sometimes we will refer to trend as \u201cchanging direction\u201d when it might go from an increasing trend to a decreasing trend.\n\n**Level**:- It basically depicts baseline value for the time series.\n\n**Seasonal**:- As its name depicts it shows the repeated pattern over time. In layman terms, it shows the seasonal variation of data over time.\n\n**Noise**:- It is basically external noises that vary the data randomly.","39cb0979":"* create one column containing the forecast now let's calculate their rmse and mape check our prediction.","f07af4f7":"# EDA","e6b8f3fc":"* shop2 sales trend","7e34dbc9":"* we can also use optimized set to true to optimize the model for other parameters info check the link : [https:\/\/www.statsmodels.org\/dev\/generated\/statsmodels.tsa.holtwinters.ExponentialSmoothing.html](http:\/\/)","91e5b138":"* From the above plots it's clearly visible that every item's sales and every store's sales follows a same kind of pattern.","8580501a":"* visualise the sales data and try find some pattern on it.","93de9193":"# Import Libraries And Load Data","5420ebd7":"# simple exponential smoothning technique\n\n* **simple exponential smoothning technique** used to forecast the level in the time series data.we start weighting all available observations while exponentially decreasing the weights as we move further back in time to capture the level.\n\nformula = l(t) = a.y(t)+(1-a)l(t-1)\n\nhere , l(t) is the level of time period t and forecast of y(t+1) is a function of l(t)\n\nAbove formula uses recursively to predict the forecast.","3ec61f1e":"* trend of shop1 sales","4ed9e0ce":"# Naive Method\n\n* let's start with the **naive method** where prediction is the last month's sale.","55a5b17f":"From the above plots we ca say that 4 shops's sales are showing same kind of seasonal pattern and trend.next we will go deeper and visualise in aspect of store item and more.","90237866":"* with each day of the week sales are getting increased it shows a pick on the weekends.","69fd0183":"* shop3 sales trend","16b9d0a5":"* create seperate column containing exact date , month year and day of the week.","3469482a":"# simple average method\n\n* **simple average method** where forecast is the average of all the past sales.","d37a216c":"# Holt's exponential smoothing technique\n\n* **Holt's exponential smoothing technique** forecasts the level and trend of the time series data. Now the forecast equation is a function of both level and trend.\n\nThis method also captures the trend with level to predict or forecast future values\n\nhere, y(t+1) = l(t) + b(t)\n\ny(t+1) is the forecast of t+1 time period which is a function of level of 't' time period and trend of 't' time period\n\nl(t) = a*y(t) + (1-a)*(l(t-1)+b(t-1)) we already know that a is the smoothning level parameter\n\nand b(t) = beta*(l(t)-l(t-1)) + (1-beta)*(b(t-1) 'beta' is a smoothning trend parameter also know as smoothning slope in statsmodels package\n\nwe can tune this parameter to make a better prediction.","b662b407":"* It is clearly visible that there is a clear pattern when we plot relative sales per year with respect to items and store also all items and store is following a kind of simillar patterns.sales are increasing with every year.","108b47fb":"* As we can see sales have  seasonal and upword trend.","3ad769ff":"* we will discuss about different types of models and check their predicton our data.\n\n","b0854bac":"* shop4 sales trend.","beb29207":"* There is a clear pattern is visible when we plot sales with respect to items and store for every month of the year there is clear upword and downword pattern.enerally sales are more higher on the month of jun and july.","347f2601":"# Simple Moving Average Method\n\n* **simple moving average method** In this method, the forecasts are generally calculated using the average of the time-series data in the moving window considered. The window of the past observations in the time series data keeps moving, and hence the average values keep changing. This helps in forecasting values at every step in the dataset. older sales values have less impact in case of predicting futures sales and recent sales have more impact on future sales.\n\nLet's considered moving window as 12 and check","1b1182a2":"# Holt-Winters\u2019 smoothing technique\n\n* The **Holt-Winters\u2019 smoothing technique** forecasts the level, trend as well as the seasonality for a time series data.\n\nThis method also captures the seasonality trend and level to predict or forecast future values\n\nhere, y(t+1) = l(t) + b(t) + s(t+1-m)\n\ny(t+1) is the forecast of t+1 time period which is a function of level of 't' time period and trend of 't' time period and seasonality of time period 't'\n\nl(t) = a*(y(t)-s(t-m)) + (1-a)*(l(t-1)+b(t-1)) we already know that a is the smoothning level parameter\n\nand b(t) = beta*(l(t)-l(t-1)) + (1-beta)*(b(t-1) 'beta' is a smoothning trend parameter also know as smoothning slope in statsmodels package\n\nand s(t) = gamma(y(t)-b(t-1)-l(t-1)) + (1-gamma)*s(t-m) where 'm' is the number of times a season repeats\n\n'gamma' is smoothning season parameter.\n\nwe can tune this parameter to make a better prediction.\n\nThere are two types of Holt-winter smoothning technique additive and multiplicative hence we can add season as 'add' for additive model and 'mul' for multiplicative model.\n\nBased upon the forecasting of above models we will chose our final model and test it into our ultimate test data.\n\n","a9100d08":"* check for null values in train and test","56615257":"# Model Building and Evalution."}}