{"cell_type":{"b74780fd":"code","234b5d34":"code","49ef8c22":"code","f3db4daa":"code","53c187ec":"code","3180f6f2":"code","ee254e4f":"code","aa9f5bf3":"code","bbf8f10f":"code","10236ece":"code","87e876f9":"code","c3bbb7d0":"code","7b25fe0e":"code","01dbd3a1":"code","5306b11d":"code","f2f502c2":"code","d30dafb4":"code","c74c26d3":"code","2c8b4c47":"code","8f0edc0f":"code","bddda29d":"code","fd594c20":"code","cef0126b":"code","6cf9318f":"code","cafd4705":"code","21172d28":"code","a9ddd74b":"code","2f464d3e":"code","ed212a3e":"code","eee211bf":"code","0bf0ecfd":"code","b20765c0":"code","2b7d7eab":"code","a90bc0d3":"code","09d67678":"code","9b6f5ace":"code","e014d83e":"code","38ccd308":"code","3cc2ec4e":"code","1a91ed67":"code","1ca1b7fa":"code","5f1d864c":"code","11ecad32":"code","8ba75ac8":"code","086e1418":"code","f6ff0428":"code","03eade06":"markdown","f97ebc3c":"markdown","b801327b":"markdown","159bbddb":"markdown","d452d1f2":"markdown","a3e3a539":"markdown","a3fdce93":"markdown","e7e488f4":"markdown","e4a3fc0a":"markdown","69e4617a":"markdown","f2777edd":"markdown","b9014d82":"markdown"},"source":{"b74780fd":"import pandas as pd\nimport numpy as np\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.impute import SimpleImputer \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import SGDRegressor\n#from imblearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import FeatureUnion\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR","234b5d34":"df = pd.read_csv('..\/input\/life-expectancy-data\/Life_Expectancy_Data.csv')\ndf.head()","49ef8c22":"df.shape","f3db4daa":"df.describe()","53c187ec":"df.describe(include='object')","3180f6f2":"df.info()","ee254e4f":"df.hist(bins=50, figsize=(20,15))\nplt.show()","aa9f5bf3":"sum(df.duplicated())","bbf8f10f":"for column in df.select_dtypes(include='object'):\n    if df[column].nunique() < 10:\n        sns.countplot(y=column, data=df)\n        plt.show()","10236ece":"for column in df.select_dtypes(include='object'):\n    if df[column].nunique() < 10:\n        display(df.groupby(column).mean())","87e876f9":"corrs = df.corr()\ncorrs","c3bbb7d0":"plt.figure(figsize=(30,10))\ndataplot = sns.heatmap(corrs, cmap=\"Blues\", annot=True)\nplt.show()","7b25fe0e":"corr_matrix = df.corr().abs()\n\nthreshold = 0.8\n\nfiltered_corr_df = corr_matrix[(corr_matrix >= threshold)] \n\nplt.figure(figsize=(30,10))\nsns.heatmap(filtered_corr_df, annot=True, cmap=\"Blues\")\nplt.show()","01dbd3a1":"df.isna().sum()","5306b11d":"cols = ['Life_expectancy ','Adult_Mortality','infant_deaths', 'Alcohol','percentage expenditure', \n             'Hepatitis B','Measles ', ' BMI ','under-five deaths ', 'Polio', 'Total expenditure',\n             'Diphtheria ',' HIV\/AIDS', 'GDP', 'Population',\n             ' thinness  1-19 years', ' thinness 5-9 years', 'Income composition of resources', 'Schooling'] \nfor i in cols:\n    q1 = df[i].quantile(0.25)\n    q2 = df[i].quantile(0.75)\n    iqr = q2-q1\n\n    l = q1-1.5*iqr\n    u = q2+1.5*iqr\n    print(i , len(df[df[i] > u]))\n    #print(df[df[i] > u])\n    out1 = df[(df[i] < l)].values\n    out2 = df[(df[i] > u)].values\n\n    #df[i] = np.where(df[i]>u,u,np.where(df[i]<l,l,df[i]))\n            ","f2f502c2":"high = df['Life_expectancy '].idxmax() \nhigh_data = pd.DataFrame(df.loc[high]) #to get the highest country in life expectancy\n\nlow = df['Life_expectancy '].idxmin()\nlow_data = pd.DataFrame(df.loc[low]) #to get the lowest country in life expectancy","d30dafb4":"q1 = pd.concat([high_data, low_data], axis=1)\nq1","c74c26d3":"high_LE_Country = df.loc[high].Country\nhigh_LE_Country","2c8b4c47":"low_LE_Country = df.loc[low].Country\nlow_LE_Country","8f0edc0f":"df_Belgium = df.loc[df['Country'] == high_LE_Country] #here we filtered the dataframe to belgium coutry only\ndf_Belgium.sort_index(inplace=True ,ascending=False) \ndf_Belgium","bddda29d":"immunization = df[['Country','Year','Life_expectancy ', 'Hepatitis B', 'Polio', 'Diphtheria ']]\nimmunization\n","fd594c20":"# make a copy of df_clean dataframe\ndf_t = immunization.copy()\ndf_t.index = df_t['Year']\ndf_t.drop(columns='Year',  inplace=True)\ndf_t.sort_index(inplace=True)\n\n#create a new dataframe with the 4 target columns\ndata_to_plot = df_t.groupby([(df_t.index)])['Life_expectancy ', 'Hepatitis B', 'Polio', 'Diphtheria '].mean()\nidx = data_to_plot.index \nle = data_to_plot['Life_expectancy ']\nhp = data_to_plot['Hepatitis B']\npol = data_to_plot['Polio']\ndi = data_to_plot['Diphtheria ']\n\n\nplt.style.use('ggplot')\nplt.figure(figsize=(15,7))\nplt.plot(idx, le, '-bo', label='Life_expectancy ')\nplt.plot(idx, hp, '-ro', label='Hepatitis B')\nplt.plot(idx, pol, '-go', label='Polio')\nplt.plot(idx, di, '-yo', label='Diphtheria')\n\nplt.title('Immunization Coverage')\nplt.legend()\nplt.xticks(idx,rotation=90)\n\nplt.show()","cef0126b":"plt.style.use('ggplot') # gray background grid\nplt.figure(figsize=(15,7))\nplt.hist(df['Life_expectancy '])\nplt.xlabel('Life Expectancy', fontsize = 15) \nplt.title('Life Expectancy', fontsize=18)\nplt.show()","6cf9318f":"x = df['Country'].unique() # a list of all country names\n#here we loop in every country and find its average life expectancy\nli= []\nfor i in x:\n    li.append(df.loc[df['Country'] == i]['Life_expectancy '].mean())\n              \n              \nAverage_LE = pd.DataFrame(li, x, columns= ['Average_LE'])\nAverage_LE","cafd4705":"#to get the country that have the highest average Life expectancy over the years\nh = li.index(max(li))\n\nhighest_coutry = x[h]\nhighest_coutry","21172d28":"df.loc[df['Country'] == 'Japan']","a9ddd74b":"#to get the country that have the lowest average Life expectancy over the years\nl= li.index(min(li))\n\nlowest_country = x[l]\nlowest_country","2f464d3e":"df.loc[df['Country'] == lowest_country]","ed212a3e":"alcohol = df[['Year','Life_expectancy ', 'Alcohol']]\nalcohol","eee211bf":"developed = df.loc[df['Status'] == 'Developed']['Life_expectancy '].mean()\ndeveloping = df.loc[df['Status'] == 'Developing']['Life_expectancy '].mean()\n\nprint(developed)\nprint(developing)","0bf0ecfd":"df_developed = df.loc[df['Status'] == 'Developed'][['Year','Life_expectancy ']]\n\ndf_developing = df.loc[df['Status'] == 'Developing'][['Year','Life_expectancy ']]\ndf_developed","b20765c0":"df_developing","2b7d7eab":"#removing oitliers\nfor i in cols:\n    q1 = df[i].quantile(0.25)\n    q2 = df[i].quantile(0.75)\n    iqr = q2-q1\n\n    l = q1-1.5*iqr\n    u = q2+1.5*iqr\n    #print(i , len(df[df[i] > u]))\n    #print(df[df[i] > u])\n    out1 = df[(df[i] < l)].values\n    out2 = df[(df[i] > u)].values\n\n    df[i] = np.where(df[i]>u,u,np.where(df[i]<l,l,df[i]))\n    print(i , len(df[df[i] > u]))\n","a90bc0d3":"df_num = df.drop(['Country', 'Year', 'Status'], axis = 1)\n\nnum_pipeline = Pipeline([\n        #('Outlier_removal', FunctionSampler(func=remove_outlier)),\n        ('imputer', SimpleImputer(strategy=\"median\")),\n        ('std_scaler', StandardScaler()),\n        ('normalization', MinMaxScaler()),\n    ])\n\ndf_num_tr = num_pipeline.fit_transform(df_num)","09d67678":"df_cat = df[['Country','Year', 'Status']]\n\ncat_pipeline = Pipeline([\n        ('encoder', OneHotEncoder(sparse=False)),\n    ])\n\ndf_cat_tr = cat_pipeline.fit_transform(df_cat)","9b6f5ace":"n = pd.DataFrame(df_num_tr,columns=['Life_expectancy ','Adult_Mortality','infant_deaths', 'Alcohol','percentage expenditure', \n             'Hepatitis B','Measles ', ' BMI ','under-five deaths ', 'Polio', 'Total expenditure',\n             'Diphtheria ',' HIV\/AIDS', 'GDP', 'Population',\n             ' thinness  1-19 years', ' thinness 5-9 years', 'Income composition of resources', 'Schooling']  ,index=df.index )\n\nc = pd.DataFrame(df_cat_tr)\n\ndf_final = pd.concat([n, c], axis=1)\ndf_final","e014d83e":"x = df_final.drop('Life_expectancy ',axis='columns')\ny = df_final['Life_expectancy ']\n\nX_train, X_test, y_train, y_test = train_test_split(x,y,test_size=0.2)","38ccd308":"pipeline_sgd=Pipeline([('SGD', SGDRegressor(learning_rate = 'adaptive'))])\n\npipeline_svm=Pipeline([('SVM', SVR())])\n\npipeline_forest=Pipeline([('Random_forest', RandomForestRegressor())])","3cc2ec4e":"pipelines = [pipeline_sgd, pipeline_svm, pipeline_forest]\npipe_dict = {0: 'SGD', 1: 'SVM', 2: 'Random_forest'}","1a91ed67":"for pipe in pipelines:\n    pipe.fit(X_train, y_train);\nfor i,model in enumerate(pipelines):\n    print(\"{} Test Accuracy: {}\".format(pipe_dict[i],model.score(X_test,y_test)));","1ca1b7fa":"print(SGDRegressor().get_params().keys())\nprint(SVR().get_params().keys())\nprint(RandomForestRegressor().get_params().keys())","5f1d864c":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import make_pipeline\n\n\nparam_grid = [\n{\n#\"n_estimators\":[10,100,1000],\n\"max_depth\":[5,8,15,25,30,None], \n#\"min_samples_leaf\":[1,2,5,10,15,100],\n\"max_leaf_nodes\": [2, 5,10]\n },\n    \n {\n\"max_depth\":[5,8,15,25,30,None], \n\"min_samples_leaf\":[1,2,5,10,15,100], \n }\n ]\n\nforest_reg = RandomForestRegressor()\n\ngridsearch = GridSearchCV(forest_reg, param_grid, cv=5, verbose=1,n_jobs=-1,  return_train_score=True) \nbest_model = gridsearch.fit(X_train,y_train)\nbest_model.score(X_test,y_test)\n","11ecad32":"print(gridsearch.score(X_test,y_test))\nprint(best_model.best_params_)","8ba75ac8":"cvres = gridsearch.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(mean_score, params)","086e1418":"feature_importances = gridsearch.best_estimator_.feature_importances_","f6ff0428":"from sklearn.ensemble import BaggingRegressor\n\nmodel = RandomForestRegressor(max_depth = 25, min_samples_leaf =  1)\n\n\nbgregressor = BaggingRegressor(base_estimator=model, n_estimators=1200,\n                                 max_features=220,\n                                 max_samples=200,\n                                 random_state=1, n_jobs=-1)\n\n\nbgregressor.fit(X_train, y_train)\n\nprint('Model test Score: %.3f, ' %bgregressor.score(X_test, y_test),\n      'Model training Score: %.3f' %bgregressor.score(X_train, y_train))","03eade06":"#### Life expectancy histogram for all countries","f97ebc3c":"#### Country with highest and lowest life expectancy and in which year","b801327b":"#### Development and developing countries according to life expectancy","159bbddb":"#### Lowest average life expectancy (sierra leone)","d452d1f2":"# 3- Machine Learning Models","a3e3a539":"# 1- EDA","a3fdce93":"# 2- Feature Engineering\n(fill null values, normalization, standardization, removing outliers)","e7e488f4":"#### Highest average life expectancy (Japan)","e4a3fc0a":"#### Average life expectancy in every country","69e4617a":"#### The highest country (Belgium) in life expectancy over the years","f2777edd":"#### The immunization coverage in all the countries","b9014d82":"#### Life Expectancy compared with drinking alcohol"}}