{"cell_type":{"bb98ef2b":"code","ec64c19c":"code","a12aeb1c":"code","3ea73549":"code","42f6f546":"code","1997b214":"code","93a285c8":"code","91d2ca7f":"code","5d9b21ae":"code","4c331e2b":"code","d04bc9e7":"code","2ac2304a":"code","a7072bc6":"code","df0ef02c":"code","13fff302":"code","06aba7de":"code","b0e5ecff":"code","51e8e877":"code","2d23a05b":"code","6da392a6":"code","f586095e":"code","52eb194a":"code","3d54f92e":"code","3ca10436":"code","dfb7e9b4":"code","8b4a7574":"code","b46e4b1a":"code","f0d69018":"code","46832745":"code","457899f0":"code","ae395e35":"code","a0a89287":"code","f69fb2eb":"markdown","1277059f":"markdown","04f34a99":"markdown","a660b732":"markdown","b6801692":"markdown"},"source":{"bb98ef2b":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom tensorflow import keras","ec64c19c":"(X_train, y_train),(X_test,y_test) = keras.datasets.mnist.load_data('\/kaggle\/input\/mnist-numpy\/mnist.npz')","a12aeb1c":"len(X_train)","3ea73549":"len(X_test)","42f6f546":"X_train[0].shape","1997b214":"X_train[0]","93a285c8":"plt.matshow(X_train[0])\nplt.show()","91d2ca7f":"plt.matshow(X_train[1])\nplt.show()","5d9b21ae":"plt.matshow(X_train[2])\nplt.show()","4c331e2b":"y_train[2]","d04bc9e7":"y_train[:5]","2ac2304a":"X_train.shape","a7072bc6":"X_train = X_train\/255\nX_test = X_test\/255","df0ef02c":"X_train_flattend = X_train.reshape(len(X_train),28*28)\nX_test_flattend = X_test.reshape(len(X_test),28*28)","13fff302":"X_test_flattend.shape","06aba7de":"X_train_flattend[0]","b0e5ecff":"model = keras.Sequential([\n    keras.layers.Dense(10, input_shape=(784,),activation = 'sigmoid')\n])\n\nmodel.compile(\n    optimizer='adam',\n    loss = 'sparse_categorical_crossentropy',\n    metrics = ['accuracy']\n    )\n\nmodel.fit(X_train_flattend,y_train,epochs = 5)","51e8e877":"model.evaluate(X_test_flattend,y_test)","2d23a05b":"plt.matshow(X_test[0])","6da392a6":"y_predicted = model.predict(X_test_flattend)\ny_predicted","f586095e":"y_predicted[0]","52eb194a":"# print the maximum value\nnp.argmax(y_predicted[0])","3d54f92e":"plt.matshow(X_test[6])","3ca10436":"y_predicted[6]","dfb7e9b4":"# print the maximum value\nnp.argmax(y_predicted[6])","8b4a7574":"y_predicted_labels =[np.argmax(i) for i in y_predicted]\ny_predicted_labels[:5]","b46e4b1a":"y_test[:5]","f0d69018":"cm = tf.math.confusion_matrix(y_test,y_predicted_labels)\ncm","46832745":"import seaborn as sns\nplt.figure(figsize = (10,7))\nsns.heatmap(cm , annot = True,fmt = 'd')\nplt.xlabel('Preditions')\nplt.ylabel('truth')\nplt.show","457899f0":"model = keras.Sequential([\n    keras.layers.Dense(100, input_shape=(784,),activation = 'relu'),\n    keras.layers.Dense(10, activation = 'sigmoid')\n])\n\nmodel.compile(\n    optimizer='adam',\n    loss = 'sparse_categorical_crossentropy',\n    metrics = ['accuracy']\n    )\n\nmodel.fit(X_train_flattend,y_train,epochs = 5)","ae395e35":"model.evaluate(X_test_flattend,y_test)","a0a89287":"y_predicted = model.predict(X_test_flattend)\ny_predicted_labels =[np.argmax(i) for i in y_predicted]\ncm = tf.math.confusion_matrix(y_test,y_predicted_labels)\n\n\nplt.figure(figsize = (10,7))\nsns.heatmap(cm , annot = True,fmt = 'd')\nplt.xlabel('Preditions')\nplt.ylabel('truth')\nplt.show","f69fb2eb":"### Thank You For Having A Look At This Notebook Please Upvote if this was Helpful.","1277059f":"# Create Simple NN.","04f34a99":"# add hidden layes","a660b732":"# Simple Neural Network with MNIST data set.\n\n#### For Binary Classification","b6801692":"# get predictions"}}