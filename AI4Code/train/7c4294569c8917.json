{"cell_type":{"4747e381":"code","ab8efad9":"code","ccc93d91":"code","7843fb27":"code","b7ab00fb":"code","9588dff8":"code","9b8d306e":"code","c0d169c9":"code","c952d010":"code","932f2682":"code","0f0824c2":"code","8472bb27":"code","a58663a2":"code","63ceeef4":"code","eff95e48":"code","6a293a2b":"code","1612e95a":"code","e470d257":"code","28e46a8b":"code","77bce4de":"code","2b8717c3":"code","da6a4917":"code","24f96f1f":"code","b22583cf":"markdown","fe7b4126":"markdown","a47a51f9":"markdown","e6c0914c":"markdown","8bf79083":"markdown","4e458e81":"markdown","444afe31":"markdown","7de3df72":"markdown","489abcf0":"markdown","61667ae4":"markdown","7f8994a9":"markdown","84ad980e":"markdown","2b40cca3":"markdown","cf2df8f5":"markdown","86b10638":"markdown"},"source":{"4747e381":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ab8efad9":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nlabels = train.Survived\ntest_id = test.PassengerId\ntrain.head()","ccc93d91":"train.describe()","7843fb27":"print('Total on board: {}, Total Survived: {}, Survival Rate: {:4.2}'.format(len(train), \n                                                                         train.Survived.value_counts().loc[1],\n                                                                         train.Survived.mean()))","b7ab00fb":"all_data = pd.concat([train.drop('Survived', axis=1), test])","9588dff8":"all_data.isnull().sum()","9b8d306e":"null_ages = all_data[all_data.Age.isnull()].groupby(['Pclass', 'Sex', 'Parch', 'SibSp']).size()\nnull_ages","c0d169c9":"age_analysis = all_data.groupby(['Pclass', 'Sex', 'Parch', 'SibSp']).Age.agg(['mean','count'])\nage_analysis[age_analysis['count'] < 1] # Unique groups with NaN age","c952d010":"all_data[(all_data.SibSp == 8) | (all_data.Parch == 9)]","932f2682":"all_data['Age'].loc[159] = 14.5\nall_data['Age'].loc[342] = 60\nall_data['Age'].loc[365] = 55","0f0824c2":"all_data.Age.fillna(all_data.groupby(['Pclass', 'Sex', 'Parch', 'SibSp']).Age.transform('mean'), inplace=True)","8472bb27":"all_data[all_data.Age.isnull()]","a58663a2":"all_data.Age.fillna(train.groupby(['Pclass', 'Sex']).Age.transform('mean'), inplace=True)","63ceeef4":"all_data[all_data.Embarked.isnull()]","eff95e48":"all_data[(all_data.Pclass == 1) & (all_data.Sex == 'female')].groupby(['Embarked', 'Sex', 'Pclass']).size()","6a293a2b":"all_data.Embarked.fillna('C', inplace=True)","1612e95a":"all_data[all_data.Fare.isnull()]","e470d257":"all_data.Fare.fillna(all_data.groupby(['Pclass']).Fare.transform('mean'), inplace=True)","28e46a8b":"plt.figure(figsize=(8,4))\nplt.subplot(121)\nsns.barplot(train.SibSp, train.Survived)\nplt.subplot(122)\nsns.barplot(train.Parch, train.Survived)\nplt.subplots_adjust(wspace=0.5)\nplt.show()","77bce4de":"print(train.groupby(['SibSp']).size(), train.groupby(['Parch']).size())","2b8717c3":"all_data['Family'] = all_data.SibSp + all_data.Parch\nall_data['Common_Tickets'] = all_data.groupby(['Ticket']).PassengerId.transform(np.size) - 1\nall_data['Friends'] = all_data.Common_Tickets - all_data.Family \nall_data['Alone'] = ((all_data.Family < 1) & (all_data.Friends < 1)).astype(int)\nall_data['Sex'] = all_data.Sex.apply(lambda x: 0 if x=='female' else 1)\nall_data['Embarked_C'] = all_data.Embarked.apply(lambda x: 1 if x=='C' else 0)\nall_data['Embarked_Q'] = all_data.Embarked.apply(lambda x: 1 if x=='Q' else 0)\nall_data['Embarked_S'] = all_data.Embarked.apply(lambda x: 1 if x=='S' else 0)\n\nall_data.drop(['PassengerId', 'Cabin'], axis=1, inplace=True)\ntrain = all_data.iloc[:len(train)]\ntest = all_data.iloc[len(train):]\n\npd.concat([train, labels], axis=1).corr().style.background_gradient(cmap='coolwarm') # Plot the correlation matrix","da6a4917":"# Scoring..\nfeatures = ['Sex', 'Age', 'Pclass', 'Fare', 'Family', 'Alone', 'Embarked_C', 'Embarked_Q', 'Embarked_S']\nselected_train = train[features]\nx_train, x_test, y_train, y_test = train_test_split(selected_train, labels, train_size=0.8, test_size=0.2)\n\n# Scale the feature data so it has mean = 0 and standard deviation = 1\nscaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)\n\n# Create and train the model\nmodel = LogisticRegression()\nmodel.fit(x_train, y_train)\n\n# Score the model on the train data\nprint(model.score(x_train, y_train))\n\n# Score the model on the test data\nprint(model.score(x_test, y_test))","24f96f1f":"selected_test = test[features]\nscaler = StandardScaler()\ntrain = scaler.fit_transform(selected_train)\ntest = scaler.transform(test[features])\nmodel = LogisticRegression()\nmodel.fit(train, labels)\nsubmission = pd.DataFrame({\"PassengerId\": test_id, \"Survived\": model.predict(test)})\nsubmission.to_csv('submission.csv', index=False)","b22583cf":"A lot of values in Age is missing and most of Cabin values are missing. We can try to predict the age somehow given the Pclass, Sex and Parch values but I think there are too many lost Cabin values that we might drop it all together.\nFor Embarked, they are only two so we can make an educated guess about them.","fe7b4126":"**How many survived?**","a47a51f9":"Seems they are all the same family as they share the same last name 'Sage'. The father and the mother are the ones who has Parch = 9. One boy has a known age however, his title is 'Master' which is given to younger boys.\nWe will assume Thomas to be 14.5 also as his Title is Master as well. Assuming Father and mother to be at least 55 is reasonable as they have 9 children with various ages\/titles.","e6c0914c":"**Fare Estimation:**\nSimilar to what we did with Age, we will use the mean Fare for the given Pclass.","8bf79083":"This appears a little parabolic, either being alone or with too many people wasn't a good thing for your odds. Let's see the counts of those large familes as they probably won't be that much","4e458e81":"I will make an educated guess using 4 features, Pclass, Sex, Parch and SibSp. Using the last two because some Parch and SibSp values could suggest a higher or lower age group. Somone travelling with SibSp = 0 and Parch = 2 as an example could suggest a child travelling with his parents. There are many other possibilites but this would probably dominate.","444afe31":"For the remaining missing values, We will just put the mean but using Pclass and Sex only.","7de3df72":"**Embarked Estimation:**","489abcf0":"Apparently, most of the travellers where either alone or having a small family travelling with them. Those large numbers are pretty rare. We could add both values to figure out solo vs group travellers. After that we would look for common ticket numbers and try to figure out friends too.","61667ae4":"Numbers are very similar indeed but there are only 2 rows so it won't matter much. I will go with C.","7f8994a9":"So we should expect something around 80% for this this simple model.","84ad980e":"So, they are two women having the same Ticket and Cabin number but without Siblings, Spouses, Parents or Children. I do not know what does that mean. The age gap does not suggest they could be friends either. We will just treat them independently. We will try to see where most class 1 women Embarked from.","2b40cca3":"**Age Estimation:**","cf2df8f5":"Looks Good!, but how many features should we select? and which ones? ","86b10638":"**Families, Friends or Alone?**\n\nWe will try to find if solo travellers had lower chances of survival vs travelling with someone.\n"}}