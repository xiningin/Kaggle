{"cell_type":{"b0932c7a":"code","d4c41d5f":"code","90234b92":"code","80af5900":"code","88b3eda1":"code","3586cc52":"code","f1b82ffa":"code","335436fd":"code","0020139f":"code","10e566b5":"code","2cbdda30":"markdown","cbc1dccd":"markdown","4a0a00c1":"markdown","4e93c341":"markdown","5aaae3fe":"markdown","1159be80":"markdown","a41f1444":"markdown"},"source":{"b0932c7a":"# 1. Enable Internet in the Kernel (Settings side pane)\n\n# 2. Curl cache may need purged if v0.1.4 cannot be found (uncomment if needed). \n# !curl -X PURGE https:\/\/pypi.org\/simple\/kaggle-environments\n\n# ConnectX environment was defined in v0.1.4\n!pip install 'kaggle-environments>=0.1.4'","d4c41d5f":"from kaggle_environments import evaluate, make\n\nenv = make(\"connectx\", debug=True)\nenv.render()","90234b92":"# with this comand you can check values of enviroment\nenv.configuration\n","80af5900":"def get_input(user):\n    \"\"\" \n    This funtion sent to our environment the position Select\n       Input: User Name\n       Output: value of select column\n       \n    \"\"\"\n    n=7 # Max number of columns\n    input1 = 'Input from player {}: '.format(user)\n    while True:\n        try:\n            print(\"Enter Value from 1 to 7\")\n            user_input = int(input(input1))\n        except Value_Error:\n            print('Invalid input:', user_input)\n            continue\n        if   user_input <= 0 or user_input > n:\n            print('invalid input:', user_input)\n       \n        else:\n            return user_input -1","88b3eda1":"#https:\/\/stackoverflow.com\/questions\/21641807\/python-connect-4?answertab=active#tab-top\n\ndef check_winner(observation):\n    \"\"\"\n    This function return the value of the winner.\n    \n    INPUT:  observation \n    OOUTPUT: 1 for user Winner or 2 for Computer Winner \n    \"\"\"\n    \n  \n    line1 = observation.board[0:7] # bottom row\n    line2 = observation.board[7:14]\n    line3 = observation.board[14:21]\n    line4 = observation.board[21:28]\n    line5 = observation.board[28:35]\n    line6 = observation.board[35:42]\n\n    board = [line1, line2 , line3, line4, line5, line6] \n\n    # Check rows for winner\n    for row in range(6):\n        for col in range(4):\n            if (board[row][col] == board[row][col + 1] == board[row][col + 2] ==\\\n                board[row][col + 3]) and (board[row][col] != 0):\n                return board[row][col]  #Return Number that match row\n\n    # Check columns for winner\n    for col in range(7):\n        for row in range(3):\n            if (board[row][col] == board[row + 1][col] == board[row + 2][col] ==\\\n                board[row + 3][col]) and (board[row][col] != 0):\n                return board[row][col]  #Return Number that match column\n\n    # Check diagonal (top-left to bottom-right) for winner\n\n    for row in range(3):\n        for col in range(4):\n            if (board[row][col] == board[row + 1][col + 1] == board[row + 2][col + 2] ==\\\n                board[row + 3][col + 3]) and (board[row][col] != 0):\n                return board[row][col] #Return Number that match diagonal\n\n\n    # Check diagonal (bottom-left to top-right) for winner\n\n    for row in range(5, 2, -1):\n        for col in range(4):\n            if (board[row][col] == board[row - 1][col + 1] == board[row - 2][col + 2] ==\\\n                board[row - 3][col + 3]) and (board[row][col] != 0):\n                return board[row][col] #Return Number that match diagonal\n\n    # No winner: return None\n    return None","3586cc52":"from IPython.display import display, Image\ndisplay(Image(filename='\/kaggle\/input\/playimagen\/play.jpg'))","f1b82ffa":"# This agent random chooses a non-empty column.\ndef my_agent(observation, configuration):\n    from random import choice\n    return choice([c for c in range(configuration.columns) if observation.board[c] == 0])","335436fd":"# observation.board this is a list of 42 elements 7X6","0020139f":"play = False # Change this line to Start Play\n\n# Play as first position against random agent.\ntrainer = env.train([None, \"random\"])\nobservation = trainer.reset()\n\nwhile not env.done:\n    if play:\n        my_action = get_input(user = \"marco\")\n        print(\"My Action\", my_action)\n        observation, reward, done, info = trainer.step(my_action)\n        #print(observation, reward, done, info)\n        if (check_winner(observation) == 1):\n            print (\"You Won, Amazing! \\nGAME OVER\")\n            \n        elif (check_winner(observation) == 2):\n            print (\"The Computer Won! \\nGAME OVER\")\n        env.render(mode=\"ipython\", width=300, height=200, header=False, controls=False)\n    else: # Run Ramdom\n        my_action = my_agent(observation, env.configuration)\n        print(\"My Action\", my_action)\n        observation, reward, done, info = trainer.step(my_action)\n        if (check_winner(observation) == 1):\n            print (\"You Won, Amazing! \\nGAME OVER\")\n            \n        elif (check_winner(observation) == 2):\n            print (\"The Computer Won! \\nGAME OVER\")\n        env.render(mode=\"ipython\", width=100, height=90, header=False, controls=False)","10e566b5":"\nenv.render(mode=\"ipython\", width=500, height=450)","2cbdda30":"# Create ConnectX Environment","cbc1dccd":"# Create an User to Play with PC\n","4a0a00c1":"## I hope you enjoy this game ","4e93c341":"# This is the final played Game","5aaae3fe":"<h2 style=\"background-color:Tomato;\">To play with the PC Play = TRUE!<\/h2>\n \n","1159be80":"\n<h1 style=\"text-align:center;\">How to Play with Computer<\/h1>\n<img src=\"https:\/\/images-na.ssl-images-amazon.com\/images\/I\/51GLUj-UZCL.jpg\"  style=\"width:500px;height:500px;\">","a41f1444":"# The Challenge \u201cConnectX\u201d\n\n\"In this game, your objective is to get a certain number of your checkers in a row horizontally, vertically, or diagonally on the game board before your opponent. When it's your turn, you \u201cdrop\u201d one of your checkers into one of the columns at the top of the board. Then, let your opponent take their turn. This means each move may be trying to either win for you, or trying to stop your opponent from winning. The default number is four-in-a-row, but we\u2019ll have other options to come soon.\"<p> <sup>From Competition<\/sup> <\/p>"}}