{"cell_type":{"7bf5f347":"code","cb248db1":"code","3eca4e89":"code","e83b906a":"code","ae30f5e7":"code","7a936a01":"code","6016fbe4":"code","fa0778b4":"code","a96c06f0":"code","54472a7a":"code","90a4e374":"code","590e314d":"code","d8f8ad5a":"code","118d4574":"code","a65b549d":"code","ec7acf20":"code","2a750689":"code","b8b6f8ca":"code","143b6791":"code","27a2f3a6":"code","d046a634":"code","fe3e3359":"code","9f52e9f3":"code","3628823e":"code","e8caeeba":"code","54a797d3":"code","e993c68b":"code","a56b37ed":"code","a116fab7":"code","1a7dc9db":"code","afa0ad24":"code","dd998c24":"code","278f0d3d":"code","340ea33d":"code","0fe12013":"code","addb94e2":"code","51221fcd":"code","83147f11":"code","a14877b5":"code","69fc3572":"code","3aad0d5d":"code","980d6262":"code","f72af175":"code","635da4fb":"code","b72361fb":"code","85f1027b":"code","a9cba057":"code","00f9c640":"code","f7ac6eac":"code","1af86739":"code","cf2a43f2":"code","4c83b34a":"code","96b7f930":"code","9ce440dd":"code","67c9e34e":"code","34e2f24b":"code","a6417f79":"code","49d8c441":"code","28ab8a4f":"code","767c38b2":"code","f64d6f12":"code","2b0755a1":"code","431ac7c3":"code","f0d2bddc":"markdown","47ecac38":"markdown","1bbe330b":"markdown"},"source":{"7bf5f347":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport scipy as sp\nimport sklearn\n\nfrom matplotlib import pyplot as plt\nfrom scipy.stats import norm, skew\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import neighbors\nfrom sklearn.metrics import f1_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import neural_network\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nimport datetime\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.metrics import confusion_matrix\npd.set_option('display.max_columns', 500)\nimport warnings\nwarnings.filterwarnings('ignore')","cb248db1":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\ntrain.head()","3eca4e89":"train.shape","e83b906a":"train.dtypes","ae30f5e7":"train.isna().sum()","7a936a01":"train = train.dropna(thresh=500, axis=1)\ntrain.shape","6016fbe4":"#train.nunique()\n#Ok you may not like it but you might have to retrospect each and every column","fa0778b4":"train = train.drop(['Id'],axis = 1)","a96c06f0":"train['SaleCondition'].value_counts()","54472a7a":"#Deleting some columns\ntrain = train[['MSSubClass','LotFrontage','LotArea','LotShape','Neighborhood','HouseStyle','OverallCond','YearBuilt','YearRemodAdd','Exterior1st','Exterior2nd','MasVnrType','Foundation','BsmtQual','BsmtFinType1','BsmtFinSF1','BsmtUnfSF','TotalBsmtSF','HeatingQC','1stFlrSF','2ndFlrSF','GrLivArea','FullBath','KitchenQual','TotRmsAbvGrd','Fireplaces','GarageYrBlt','GarageFinish','GarageCars','GarageArea','WoodDeckSF','OpenPorchSF','MoSold','YrSold','SalePrice']]","90a4e374":"train.head()","590e314d":"train.shape","d8f8ad5a":"#Individual column analysis\n#sns.distplot(train['MSSubClass'],hist = False)\n#train['OpenPorchSF'].value_counts()","118d4574":"def groups(series):\n    if series <= 50:\n        return \"Low\"\n    elif series > 50 and series <= 100:\n        return \"Medium\"\n    else:\n        return \"High\"\n\ntrain['SubClass'] = train['MSSubClass'].apply(groups)","a65b549d":"def groups(series):\n    if series not in ['1Story','2Story','1.5Fin','SLvl','SFoyer']:\n        return \"Others\"\n    else:\n        return series\n    \ntrain['HouseStyle'] = train['HouseStyle'].apply(groups)","ec7acf20":"train['NormLotArea'] = (train['LotArea'] - min(train['LotArea']))\/(max(train['LotArea'])-min(train['LotArea']))","2a750689":"def groups(series):\n    if series == \"IR1\" or series == \"IR2\" or series == \"IR3\":\n        return \"Irregular\"\n    else:\n        return \"Regular\"\n    \ntrain['NewLotShape'] = train['LotShape'].apply(groups)","b8b6f8ca":"def groups(series):\n    if series == \"IR1\" or series == \"IR2\" or series == \"IR3\":\n        return \"Irregular\"\n    else:\n        return \"Regular\"\n    \ntrain['NewLotShape'] = train['LotShape'].apply(groups)","143b6791":"#Try Year Built also and see results\ntrain['BldgAge'] = train['YrSold']-train['YearRemodAdd']","27a2f3a6":"train.head()","d046a634":"#train['Exterior1st'] .value_counts()\ntrain[['Exterior1st']] = train[['Exterior1st']].replace(['WdShing','Stucco','AsbShng','BrkComm','Stone','CBlock','ImStucc','AsphShn'], 'Others')\ntrain[['Foundation']] = train[['Foundation']].replace(['Slab','Stone','Wood'],'Others')","fe3e3359":"def groups(series):\n    if series > 0:\n        return 1\n    else:\n        return 0\n\ntrain['WoodDeckSF'] = train['WoodDeckSF'].apply(groups)\ntrain['OpenPorchSF'] = train['OpenPorchSF'].apply(groups)","9f52e9f3":"train = train.drop(['YrSold','MSSubClass','LotFrontage','LotArea','LotShape','YearBuilt','YearRemodAdd','Exterior2nd','MasVnrType','TotalBsmtSF','GrLivArea','GarageYrBlt'],axis = 1)","3628823e":"#transofrming all object dtypes to categorical\ndef changeDtypes(df,from_dtype,to_dtype):\n    #changes inplace, affects the passed dataFrame\n#     df[df.select_dtypes(from_dtype).columns] = df.select_dtypes(from_dtype).astype(to_dtype)\n    df[df.select_dtypes(from_dtype).columns] = df.select_dtypes(from_dtype).apply(lambda x: x.astype(to_dtype))\n    \n    \nchangeDtypes(train,'object','category')\ntrain.dtypes","e8caeeba":"train.head()","54a797d3":"train = train.dropna()\ntrain.isna().sum()","e993c68b":"all_dummies = ['Neighborhood','HouseStyle','Exterior1st','Foundation','BsmtQual','BsmtFinType1','HeatingQC','KitchenQual','GarageFinish','MoSold','SubClass','NewLotShape']","a56b37ed":"def dummyvars(dummy_cols):\n    dummy_list = pd.DataFrame()\n    for i in dummy_cols:\n        dummy = pd.get_dummies(train[i], prefix=i).iloc[:, 1:]\n        dummy_list = pd.concat([dummy_list,dummy],axis=1)\n    return dummy_list\n\ndummy_list = dummyvars(all_dummies)","a116fab7":"train = train.drop(['Neighborhood','HouseStyle','Exterior1st','Foundation','BsmtQual','BsmtFinType1','HeatingQC','KitchenQual','GarageFinish','MoSold','SubClass','NewLotShape'],axis=1)","1a7dc9db":"dummy_list.head()","afa0ad24":"train = pd.concat([train,dummy_list],axis = 1)","dd998c24":"#Now the corrplot\n#Using Pearson Correlation\n#X-X correlation\ntrain_x = train.drop(['SalePrice'],axis = 1)\ntrain_y = pd.DataFrame(train['SalePrice'])\ncorr_matrix = train_x.corr().abs()\nupper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\nto_drop = [column for column in upper.columns if any(upper[column] > 0.6)]\nto_drop.append('KitchenQual_Gd')\nto_drop.remove('KitchenQual_TA')","278f0d3d":"#corr_matrix['KitchenQual_TA'].sort_values(ascending = False)","340ea33d":"#X-Y correlation\ncorr_matrix = train.corr().abs()\ncorr_target = corr_matrix['SalePrice']\nrelevant_features = corr_target[corr_target > 0.5]\nrelevant_features","0fe12013":"train = train.drop(to_drop,axis = 1)","addb94e2":"train_x = train.drop(['SalePrice'],axis = 1)\ntrain_y = pd.DataFrame(train['SalePrice'])\nmodel = LinearRegression()\nmodel.fit(train_x,train_y)\nr_square = model.score(train_x,train_y)\n1\/(1-r_square)","51221fcd":"#Grid Search - Linear Regression\n#model = LinearRegression()\n#param_grid = {}\n#grid = GridSearchCV(model, param_grid, cv = 5, scoring = 'r2')\n#grid.fit(train_x,train_y)\n#max(grid.cv_results_['mean_test_score'])","83147f11":"#Grid Search - L1 Regularization (Lasso)\n#model = Lasso()\n#param_grid = {'alpha':[0.001,0.01,0.1,1,10,20,50,100]}\n#grid = GridSearchCV(model, param_grid, cv = 5, scoring = 'r2')\n#grid.fit(train_x,train_y)\n#max(grid.cv_results_['mean_test_score'])","a14877b5":"#Grid Search - L2 Regularization (Ridge)\n#model = Ridge()\n#param_grid = {'alpha':[0.001,0.01,0.1,1,10,20,50,100]}\n#grid = GridSearchCV(model, param_grid, cv = 5, scoring = 'r2')\n#grid.fit(train_x,train_y)\n#max(grid.cv_results_['mean_test_score'])","69fc3572":"#Grid Search - Random Forest Regressor\nfrom sklearn.ensemble import RandomForestRegressor\n#model = RandomForestRegressor()\n#param_grid = {'max_depth':[5,10],\n#              'n_estimators':[50,100,150,200],\n#              'random_state':[42]}\n#grid = GridSearchCV(model, param_grid, cv = 5, scoring = 'r2')\n#grid.fit(train_x,train_y)\n#max(grid.cv_results_['mean_test_score'])","3aad0d5d":"#Grid Search - Gradient Boosting Regressor\nfrom sklearn.ensemble import GradientBoostingRegressor\n#model = GradientBoostingRegressor()\n#param_grid = {'max_depth':[5,10],\n#              'n_estimators':[50,100,150,200],\n#              'learning_rate':[0.1,0.5,1]}\n#grid = GridSearchCV(model, param_grid, cv = 5, scoring = 'r2')\n#grid.fit(train_x,train_y)\n#max(grid.cv_results_['mean_test_score'])","980d6262":"#grid.best_params_","f72af175":"#Grid Search - Adaptive Boost Regression\n#from sklearn.ensemble import AdaBoostRegressor\n#model = AdaBoostRegressor()\n#param_grid = {'learning_rate':[0.1,0.5,1],\n#              'n_estimators':[50,100,150,200],\n#              'loss':['linear','square','exponential']}\n#grid = GridSearchCV(model, param_grid, cv = 5, scoring = 'r2')\n#grid.fit(train_x,train_y)\n#max(grid.cv_results_['mean_test_score'])","635da4fb":"test = test[['Id','MSSubClass','LotFrontage','LotArea','LotShape','Neighborhood','HouseStyle','OverallCond','YearBuilt','YearRemodAdd','Exterior1st','Exterior2nd','MasVnrType','Foundation','BsmtQual','BsmtFinType1','BsmtFinSF1','BsmtUnfSF','TotalBsmtSF','HeatingQC','1stFlrSF','2ndFlrSF','GrLivArea','FullBath','KitchenQual','TotRmsAbvGrd','Fireplaces','GarageYrBlt','GarageFinish','GarageCars','GarageArea','WoodDeckSF','OpenPorchSF','MoSold','YrSold']]","b72361fb":"def groups(series):\n    if series <= 50:\n        return \"Low\"\n    elif series > 50 and series <= 100:\n        return \"Medium\"\n    else:\n        return \"High\"\n\ntest['SubClass'] = test['MSSubClass'].apply(groups)","85f1027b":"temp_train = pd.read_csv('..\/input\/train.csv')\ntest['NormLotArea'] = (test['LotArea'] - min(temp_train['LotArea']))\/(max(temp_train['LotArea'])-min(temp_train['LotArea']))","a9cba057":"def groups(series):\n    if series == \"IR1\" or series == \"IR2\" or series == \"IR3\":\n        return \"Irregular\"\n    else:\n        return \"Regular\"\n    \ntest['NewLotShape'] = test['LotShape'].apply(groups)","00f9c640":"def groups(series):\n    if series not in ['1Story','2Story','1.5Fin','SLvl','SFoyer']:\n        return \"Others\"\n    else:\n        return series\n    \ntest['HouseStyle'] = test['HouseStyle'].apply(groups)","f7ac6eac":"test['BldgAge'] = test['YrSold']-test['YearRemodAdd']","1af86739":"test[['Exterior1st']] = test[['Exterior1st']].replace(['WdShing','Stucco','AsbShng','BrkComm','Stone','CBlock','ImStucc','AsphShn'], 'Others')\ntest[['Foundation']] = test[['Foundation']].replace(['Slab','Stone','Wood'],'Others')","cf2a43f2":"def groups(series):\n    if series > 0:\n        return 1\n    else:\n        return 0\n\ntest['WoodDeckSF'] = test['WoodDeckSF'].apply(groups)\ntest['OpenPorchSF'] = test['OpenPorchSF'].apply(groups)","4c83b34a":"test = test.drop(['YrSold','MSSubClass','LotFrontage','LotArea','LotShape','YearBuilt','YearRemodAdd','Exterior2nd','MasVnrType','TotalBsmtSF','GrLivArea','GarageYrBlt'],axis = 1)","96b7f930":"#transofrming all object dtypes to categorical\ndef changeDtypes(df,from_dtype,to_dtype):\n    #changes inplace, affects the passed dataFrame\n#     df[df.select_dtypes(from_dtype).columns] = df.select_dtypes(from_dtype).astype(to_dtype)\n    df[df.select_dtypes(from_dtype).columns] = df.select_dtypes(from_dtype).apply(lambda x: x.astype(to_dtype))\n    \n    \nchangeDtypes(test,'object','category')\ntest.dtypes","9ce440dd":"test.isna().sum()","67c9e34e":"test[\"Exterior1st\"].fillna(temp_train[\"Exterior1st\"].mode().iloc[0], inplace=True)\ntest[\"BsmtQual\"].fillna(temp_train[\"BsmtQual\"].mode().iloc[0], inplace=True)\ntest[\"BsmtFinType1\"].fillna(temp_train[\"BsmtFinType1\"].mode().iloc[0], inplace=True)\ntest[\"BsmtFinSF1\"].fillna(temp_train[\"BsmtFinSF1\"].median(), inplace=True)\ntest[\"BsmtUnfSF\"].fillna(temp_train[\"BsmtUnfSF\"].median(), inplace=True)\ntest[\"KitchenQual\"].fillna(temp_train[\"KitchenQual\"].mode().iloc[0], inplace=True)\ntest[\"GarageFinish\"].fillna(temp_train[\"GarageFinish\"].mode().iloc[0], inplace=True)\ntest[\"GarageCars\"].fillna(temp_train[\"GarageCars\"].median(), inplace=True)\ntest[\"GarageArea\"].fillna(temp_train[\"GarageArea\"].median(), inplace=True)","34e2f24b":"def dummyvars(dummy_cols):\n    dummy_list = pd.DataFrame()\n    for i in dummy_cols:\n        dummy = pd.get_dummies(test[i], prefix=i).iloc[:, 1:]\n        dummy_list = pd.concat([dummy_list,dummy],axis=1)\n    return dummy_list\n\ndummy_list = dummyvars(all_dummies)","a6417f79":"test = pd.concat([test,dummy_list],axis = 1)","49d8c441":"test = test.drop(to_drop,axis = 1)","28ab8a4f":"test = test.drop(['Neighborhood','HouseStyle','Exterior1st','Foundation','BsmtQual','BsmtFinType1','HeatingQC','KitchenQual','GarageFinish','MoSold','SubClass','NewLotShape'],axis=1)","767c38b2":"test_model = test.drop(['Id'],axis = 1)","f64d6f12":"boost = GradientBoostingRegressor(learning_rate = 0.1, n_estimators = 150, max_depth = 5)\nboost.fit(train_x,train_y)\nforest = RandomForestRegressor(max_depth = 10, n_estimators = 200, random_state = 42)\nforest.fit(train_x,train_y)\nlasso = Lasso(alpha = 50)\nlasso.fit(train_x,train_y)","2b0755a1":"#Stacked Model Sample (Citation: Nithish Kandagadla):\ndef stackModelsAndPredict(listOfWeights,listOfModels,Test):\n    AllModelPreds  = np.zeros(Test.shape[0])\n    for weight,model in zip(listOfWeights,listOfModels):\n      predictions = model.predict(Test)\n      weightedPreds = weight*predictions\n      AllModelPreds = np.column_stack((AllModelPreds,weightedPreds))\n      \n    return np.sum(AllModelPreds,axis = 1)\n\nstackedPreds = stackModelsAndPredict([0.5,0.3,0.2],[boost,forest,lasso],test_model)","431ac7c3":"test['SalePrice'] = stackedPreds\ntest = test[['Id','SalePrice']]","f0d2bddc":"Shape of the Data?","47ecac38":"Standard Import Packages","1bbe330b":"Examining the train dataset"}}