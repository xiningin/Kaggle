{"cell_type":{"90643344":"code","0182060a":"code","b7f5100c":"code","90489750":"code","bea458b9":"code","ec88b499":"code","84556cb9":"code","09834c1e":"code","b72ce80c":"code","997cf7fe":"code","cd3dc217":"code","508b83d9":"code","a307ee3a":"code","53fadc5a":"code","6e4e943d":"code","241d492e":"code","7883d425":"code","925c0a89":"code","59ec0de9":"code","2131b34e":"code","d0f0b571":"code","5497edae":"code","ebb82854":"code","48cf032d":"code","dc50b0f5":"markdown","32b905cc":"markdown","035ddce8":"markdown"},"source":{"90643344":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0182060a":"dir='\/kaggle\/input\/brain-mri-images-for-brain-tumor-detection'\nimport tensorflow as tf\nimport h5py\nimport numpy as np\nimport os\nimport cv2\nfrom sklearn.metrics import precision_score,recall_score,f1_score,roc_auc_score\nfrom imblearn.metrics import sensitivity_specificity_support\nfrom sklearn.preprocessing import StandardScaler\n%config Completer.use_jedi = False","b7f5100c":"x_dataset=[]\ny_dataset=[]\nsrc=os.listdir('\/kaggle\/input\/brain-mri-images-for-brain-tumor-detection\/no')\ni=0\nfor filename in src:\n    full_file_name='\/kaggle\/input\/brain-mri-images-for-brain-tumor-detection\/no\/'+filename\n    x=cv2.imread(full_file_name)\n    x=np.array(x,dtype='float32')\n    y=0\n    y=np.array(y,dtype='float32')\n    x=x\/255.0\n    x=cv2.resize(x,(224,224))\n    x_dataset.append(x)\n    y_dataset.append(y)\n    i=i+1\n    print(i)","90489750":"\nsrc=os.listdir('\/kaggle\/input\/brain-mri-images-for-brain-tumor-detection\/yes')\nfor filename in src:\n    full_file_name='\/kaggle\/input\/brain-mri-images-for-brain-tumor-detection\/yes\/'+filename\n    x=cv2.imread(full_file_name)\n    x=np.array(x,dtype='float32')\n    y=1\n    y=np.array(y,dtype='float32')\n    x=x\/255.0\n    x=cv2.resize(x,(224,224))\n    x_dataset.append(x)\n    y_dataset.append(y)\n    i=i+1\n    print(i)","bea458b9":"X_dataset=np.array(x_dataset)\nY_dataset=np.array(y_dataset)\nY_dataset=Y_dataset.reshape((253,1))","ec88b499":"from sklearn.utils import shuffle\nX_dataset,Y_dataset=shuffle(X_dataset,Y_dataset,random_state=0)","84556cb9":"import matplotlib.pyplot as plt\nplt.imshow(X_dataset[2])\nplt.show()","09834c1e":"yes_len=0\nno_len=0\nfor i in range(253):\n    if Y_dataset[i]==0:\n        no_len+=1\n    else:\n        yes_len+=1\nprint(yes_len)\nprint(no_len)","b72ce80c":"import seaborn as sns\nsns.barplot(x=['Normal','Brain Tumor'],y=[no_len,yes_len])","997cf7fe":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X_dataset,Y_dataset,test_size=0.20)","cd3dc217":"from sklearn.model_selection import StratifiedShuffleSplit\nfolds=list(StratifiedShuffleSplit(n_splits=5,random_state=1).split(x_train,y_train))","508b83d9":"nasnet=tf.keras.applications.inception_v3.InceptionV3(include_top=False,input_shape=(224,224,3))\nx=tf.keras.layers.Flatten()(nasnet.output)\nx=tf.keras.layers.Dense(1)(x)\nout=tf.keras.layers.Activation(activation='sigmoid')(x)\n\nmodel=tf.keras.Model(inputs=nasnet.input,outputs=out)\n\nmodel.compile(optimizer=tf.keras.optimizers.RMSprop(lr=0.0001),loss='binary_crossentropy',metrics=['accuracy'])","a307ee3a":"model.summary()","53fadc5a":"from sklearn.preprocessing import label_binarize\nfrom sklearn.metrics import auc,roc_curve\nfrom matplotlib import pyplot as plt","6e4e943d":"from keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(  rotation_range=8,\n                                     width_shift_range=0.03,\n                                     height_shift_range=0.03,\n                                     shear_range=0.25,\n                                     zoom_range=0.45,\n                                     horizontal_flip=True)\nval_datagen = ImageDataGenerator(zoom_range=0.45)","241d492e":"History=[]\nPrescore=[]\nRecall=[]\nF1=[]\nSensspeci=[]\nRoc_auc=[]\nfor j,(train_idx,val_idx) in enumerate(folds):\n    print(\"Fold \"+str(j+1))\n    \n    x_train=X_dataset[train_idx]\n    y_train=Y_dataset[train_idx]\n    x_val=X_dataset[val_idx]\n    y_val=Y_dataset[val_idx]\n    history=model.fit(train_datagen.flow(x_train,y_train),batch_size=8,epochs=20,validation_data=(x_val,y_val))\n    y_predict=model.predict(x_val)\n    Y_predict=np.float32(y_predict>0.50)\n    l=len(y_val)\n    Y_predict=np.reshape(Y_predict,(l,1))\n    prescore=precision_score(y_val,Y_predict,average='binary')\n    recaller=recall_score(y_val,Y_predict,average='binary')\n    score=f1_score(y_val,Y_predict,average='binary')\n    sensitivity=sensitivity_specificity_support(y_val,Y_predict,average='binary')\n    print(\"Precision: \",prescore)\n    print(\"Recall: \",recaller)\n    print(\"F1-score \",score)\n    print(\"Sensitivity \",sensitivity)\n    History.append(history)\n    Prescore.append(prescore)\n    F1.append(score)\n    Recall.append(recaller)\n    Sensspeci.append(sensitivity)\n    fpr, tpr, thresholds = roc_curve(y_val,y_predict)\n    auc = roc_auc_score(y_val, y_predict)\n    print(\"Precision: \",prescore)\n    print(\"Recall: \",recaller)\n    print(\"F1-score \",score)\n    print(\"Sensitivity \",sensitivity)\n    print(\"AUC: \",auc)\n    plt.plot([0,1],[0,1], linestyle='--', label='No Skill')\n    plt.plot(fpr,tpr, marker='.', label='XceptionNet')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.legend()\n    plt.show()","7883d425":"val_acc=History[0].history['val_accuracy']\nval_acc1=History[1].history['val_accuracy']\nval_acc2=History[2].history['val_accuracy']\nval_acc3=History[3].history['val_accuracy']\nval_acc4=History[4].history['val_accuracy']\nAccuracvalid1=val_acc[19]\nAccuracyvalid2=val_acc1[19]\nAccuracyvalid3=val_acc2[19]\nAccuracyvalid4=val_acc3[19]\nAccuracyvalid5=val_acc4[19]\nMean_valid_Accuracy=(Accuracvalid1+Accuracyvalid2+Accuracyvalid3+Accuracyvalid4+Accuracyvalid5)\/5.00\nprint(\"validation Accuracy for Fold-1 \",Accuracvalid1)\nprint(\"validation Accuracy for Fold-2\",Accuracyvalid2)\nprint(\"Validation Accuracy for Fold-3 \",Accuracyvalid3)\nprint(\"Validation Accuracy for Fold-4  \",Accuracyvalid4)\nprint(\"Validation Accuracy for Fold-5  \",Accuracyvalid5)\nprint(\"Mean Validation Accuracy \",Mean_valid_Accuracy)","925c0a89":"x_test.shape","59ec0de9":"y_predict1=model.predict(x_test)\npredict=np.float32(y_predict1>0.50)\npredict=np.reshape(predict,(51,1))\nprint(predict)","2131b34e":"from sklearn.metrics import confusion_matrix","d0f0b571":"metrics=confusion_matrix(y_test,predict)\nprint(metrics)","5497edae":"from sklearn.metrics import auc,roc_curve\nfpr, tpr, thresholds = roc_curve(y_test,y_predict1)\nauc = roc_auc_score(y_test, y_predict1)","ebb82854":"print(auc)","48cf032d":"import matplotlib.pyplot as plt\nplt.figure()\nplt.plot(fpr, tpr,label='ROC curve (area = %0.2f)' % auc)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([-0.1, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic for Breast Cancer Classification')\nplt.legend(loc=\"lower right\")\nplt.show()","dc50b0f5":"1. # **Importing the data from kaggle repository**","32b905cc":"Breakdown in Train and Test set","035ddce8":"# Now shuffling the whole dataset such that samples get mixed "}}