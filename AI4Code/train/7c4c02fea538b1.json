{"cell_type":{"6a7daa89":"code","e3c26a1d":"code","17e10620":"code","0d3fb33b":"code","45a9cc5a":"code","c1cce3ef":"code","3c8d126a":"code","c9900f38":"code","c0e7bb8e":"code","ab008a6f":"code","8fe1c73e":"code","a8da60a1":"code","93abb47b":"code","45e6132d":"code","61b4ec34":"code","eca623e4":"code","96f9045a":"code","c2bb2ab5":"code","0f39dd77":"code","3f637a89":"code","d7277e81":"code","393d5a25":"code","5495e6a6":"code","dd8e196a":"code","ce1de47c":"code","b3f19d75":"markdown","28df6290":"markdown","f0d01180":"markdown","5237f0db":"markdown","07569965":"markdown","ba1d281e":"markdown"},"source":{"6a7daa89":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nsns.set()","e3c26a1d":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","17e10620":"df = sns.load_dataset(\"tips\")","0d3fb33b":"df.info()","45a9cc5a":"df.describe()","c1cce3ef":"df.head()","3c8d126a":"df['tip'] = df['tip'].map(lambda x: 1 if x>2.99 else 0)","c9900f38":"X = df.drop('tip', axis=1)","c0e7bb8e":"Y = df['tip']","ab008a6f":"X = pd.concat([X,pd.get_dummies(X['sex'], prefix='sex', drop_first=True)], axis=1)\nX.drop(\"sex\", axis=1, inplace=True)\nX = pd.concat([X,pd.get_dummies(X['smoker'], prefix='smoker', drop_first=True)], axis=1)\nX.drop(\"smoker\", axis=1, inplace=True)","8fe1c73e":"X.rename(columns={\"smoker_No\": \"non_smoker\", \"sex_Female\": \"Female\"}, inplace=True)","a8da60a1":"X.head()","93abb47b":"X = pd.concat([X,pd.get_dummies(X['day'], prefix='day')], axis=1)\n\nX.drop(\"day\", axis=1, inplace=True)\n\nX = pd.concat([X,pd.get_dummies(X['time'], prefix='time')], axis=1)\nX.drop(\"time\", axis=1, inplace=True)\n\n","45e6132d":"X.rename(columns={\"Female\": \"sex\", \"non_smoker\": \"smoker\"}, inplace=True)","61b4ec34":"inv = {0 : 1, 1 : 0}","eca623e4":"X[\"sex\"] = X[\"sex\"].map(inv)","96f9045a":"X[\"smoker\"] = X[\"smoker\"].map(inv)","c2bb2ab5":"X.info()","0f39dd77":"X_train, X_test, Y_train, Y_test = train_test_split(X,Y, random_state=1, stratify=Y)","3f637a89":"plt.plot(X_train.T, \".\")\nplt.show()","d7277e81":"class Perceptron:\n    def __init__(self):\n        self.w = None\n        self.b = None\n    \n    def model(self, x):\n        return 1 if (np.dot(x,self.w) >= self.b) else 0\n    \n    def predict(self,X):\n        Y = []\n        for x in X:\n            y_pred = self.model(x)\n            Y.append(y_pred)\n        return np.array(Y)\n    \n    def fit(self, X , Y, lr=1, epochs=10):\n        \n        self.w = np.ones(X.shape[1])\n        self.b = 0\n        \n        max_acc = 0\n        \n        \n        \n        accuracy = {}\n        \n        for i in range(epochs):\n            \n            for (x,y) in zip(X,Y):\n                y_pred = self.model(x)\n                \n                if y == 1 and y_pred == 0:\n                    self.w = self.w + lr * x\n                    self.b = self.b + lr * 1\n                \n                elif y == 0 and y_pred == 1:\n                    self.w = self.w - lr * x\n                    self.b = self.b - lr * 1\n                    \n            accuracy[i] = accuracy_score(self.predict(X), Y)\n                \n            if accuracy[i] > max_acc:\n                max_acc = accuracy[i]\n                max_wt = self.w\n                max_b = self.b\n                \n        \n        self.w = max_wt\n        self.b = max_b\n        \n        plt.plot(*zip(*sorted(accuracy.items())))\n        plt.show()\n                \n        print(max_acc)        \n        ","393d5a25":"perceptron = Perceptron()","5495e6a6":"perceptron.fit(X_train.values, Y_train.values, epochs=100)","dd8e196a":"Y_pred = perceptron.predict(X_test.values)\n\nacc = accuracy_score(Y_pred, Y_test.values)","ce1de47c":"acc","b3f19d75":"# Trying to build a binary-classification model out of tips dataset.","28df6290":"This is the dataset we will be using to classify ","f0d01180":"**These two methods are required to split the dataset and also to calculate the accuracy score.**\n\n\n**Alternatively we can define the method as given below.**\n\n```python\n\ndef acc_score(y_pred,y):\n    \n    return (((y_pred == y) \/ y.size) * 100)\n\"\n```","5237f0db":"**Let's import all needed libraries.**","07569965":"# Oh yeah !!","ba1d281e":"Let's see the information about the various data types in the dataset and if they are null, we need to impute them."}}