{"cell_type":{"015ff0bb":"code","12a93f2d":"code","d1a00511":"code","f4c67563":"code","a4c1b658":"code","a2c12f1c":"code","ab5def32":"code","69f01487":"code","c04545d2":"code","339d0e3d":"code","70d76955":"code","f5c37774":"code","861a055a":"code","9a91f160":"code","1f3775a3":"code","f2083adc":"code","dc8d6292":"code","dd0aaf8e":"code","0dca4ed9":"code","8037310c":"code","477e8a55":"code","df669670":"code","fc90a90c":"code","aa86cb6c":"code","01c89fa1":"code","235d6114":"code","6166bab1":"code","f41626d0":"code","dc27e654":"code","4db94773":"code","311377ae":"code","42a85470":"code","d53dc6b4":"code","75ebf1f9":"code","7f02306e":"code","f9e3a843":"code","830cf215":"code","6c96e09f":"code","ce613991":"code","b42d89e7":"code","5460886a":"code","ee0e80a4":"code","efe02b7d":"code","9be23152":"code","d5d090fb":"code","1aa8c995":"code","267e936f":"code","ca5660e1":"code","71bfd9eb":"code","f09af628":"code","42c70485":"code","9166a678":"code","f7df7b15":"code","49c6e319":"code","ace40313":"code","296b937e":"code","2e90ec08":"code","8d2849a7":"code","ab1d3f82":"code","e24a92e7":"code","c573c284":"code","697f7c4f":"code","39612f95":"code","d6b37432":"code","7481144b":"code","ed3785d9":"code","91b06e26":"code","d36aa9b8":"code","ea900659":"code","61255859":"code","bb5c45e0":"code","f15e1198":"code","9ff9fdee":"markdown","06751c86":"markdown","8a31b97b":"markdown","d181fe2f":"markdown","9fbabd58":"markdown","a835e654":"markdown","14dab836":"markdown","488e9ea0":"markdown","0ed03973":"markdown","6836bf95":"markdown","b180b474":"markdown","c3a75de5":"markdown","f3a62374":"markdown","219b641a":"markdown","ab70d75b":"markdown","7bf2c8b1":"markdown","ecb369b6":"markdown","d07da4f2":"markdown","c31266bf":"markdown","7c483564":"markdown","f53dee89":"markdown","956c3bae":"markdown","20863ee5":"markdown","32ca2bfd":"markdown","a8b2532c":"markdown","ad9b8a3f":"markdown","8c7be83f":"markdown","fffbbc12":"markdown","4c68ad25":"markdown","253f38ca":"markdown","3b504b68":"markdown","04c28abe":"markdown","a0f01152":"markdown","312eb39a":"markdown","e5791f58":"markdown","5b49333a":"markdown","7c7268b5":"markdown","d09a59b5":"markdown","879e8528":"markdown","099e61b7":"markdown","72122ba6":"markdown","e48f1c99":"markdown","acbc5ade":"markdown","cd8efd99":"markdown","90325e38":"markdown","28d0e42e":"markdown","fab26585":"markdown","49223147":"markdown","06e6e9d7":"markdown","c18b3728":"markdown","0d9910c4":"markdown","ba89b22a":"markdown","71b56818":"markdown","a0613510":"markdown","3e3a741e":"markdown","588d60ff":"markdown","535af52f":"markdown","992c685f":"markdown","51157827":"markdown","b72a5667":"markdown","539b1ae5":"markdown","11f84ca9":"markdown","166f51b7":"markdown"},"source":{"015ff0bb":"import numpy as np \nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport os\nimport re","12a93f2d":"files = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        files.append(str(os.path.join(dirname, filename)))\nfiles","d1a00511":"names = [re.findall('\\w*.csv', x)[0].split('.')[0] for x in files]\nnames","f4c67563":"data_dict = {}\n\nfor i, file in enumerate(files):\n    name = names[i]\n    data_dict[name] = pd.read_csv(file, encoding = 'latin-1') # https:\/\/stackoverflow.com\/questions\/5552555\/unicodedecodeerror-invalid-continuation-byte","a4c1b658":"data_dict['circuits'].sample(3)","a2c12f1c":"data_dict['constructorResults'].sample(3)","ab5def32":"data_dict['constructors'].sample(3)","69f01487":"data_dict['constructorStandings'].sample(3)","c04545d2":"data_dict['drivers'].sample(3)","339d0e3d":"data_dict['driverStandings'].sample(3)","70d76955":"data_dict['lapTimes'].sample(3)","f5c37774":"data_dict['pitStops'].sample(3)","861a055a":"data_dict['qualifying'].sample(3)","9a91f160":"data_dict['races'].sample(3)","1f3775a3":"data_dict['races'][data_dict['races']['year'] == 2017]","f2083adc":"data_dict['results'].sample(3)","dc8d6292":"data_dict['seasons'].sample(3)","dd0aaf8e":"data_dict['status'].sample(3)","0dca4ed9":"data_dict['results'][data_dict['results']['raceId'] == 988].head()","8037310c":"data_dict['status'][data_dict['status']['statusId'].isin([1, 11, 36, 9])]","477e8a55":"data_dict['results']['positionText'].value_counts()","df669670":"data_dict['results'][data_dict['results']['positionText'].isin(['R', 'F', 'W', 'N', 'E'])].isna().sum()","fc90a90c":"data_dict['results'].drop(columns = ['rank', 'positionOrder'], inplace = True)\n\ndata_dict['constructors'].drop(columns = ['nationality', 'url', 'Unnamed: 5'], inplace = True)\ndata_dict['constructors'].rename(columns = {'name': 'constructorName'}, inplace = True)\n\ndata_dict['races'].drop(columns = ['time', 'url'], inplace = True)\ndata_dict['races'].rename(columns = {'name': 'raceName', 'date': 'raceDate'}, inplace = True)\n\ndata_dict['circuits'].drop(columns = ['lat', 'lng', 'alt', 'url'], inplace = True)\ndata_dict['circuits'].rename(columns = {'name': 'circuitName'}, inplace = True)\n\ndata_dict['drivers'].drop(columns = ['number', 'code', 'url'], inplace = True)","aa86cb6c":"df = data_dict['results'].copy()\ndf = df.merge(data_dict['constructors'], how = 'left')\ndf = df.merge(data_dict['races'], how = 'left')\ndf = df.merge(data_dict['circuits'], how = 'left')\ndf = df.merge(data_dict['drivers'], how = 'left')\ndf = df.merge(data_dict['status'], how = 'left')","01c89fa1":"len(df), len(data_dict['results'])","235d6114":"df['year'].min(), df['year'].max()","6166bab1":"df['fastestLapTimeSec'] = (df['fastestLapTime'].str.split(':', expand = True)[0].astype('float64') * 60) + df['fastestLapTime'].str.split(':', expand = True)[1].astype('float64')\ndf['fastestLapTimeSec'].tail(5)","f41626d0":"df['fastestLapSpeed'].head(5)","dc27e654":"df['fastestLapSpeed'].astype('float64')","4db94773":"df[df['fastestLapSpeed'] == '01:42.6'][['country', 'year', 'driverRef', 'fastestLapSpeed', 'fastestLapTime']]","311377ae":"df[(df['year'] == 2017) & (df['country'] == 'UAE')][['driverRef', 'fastestLapTime', 'fastestLapTimeSec', 'fastestLapSpeed']]","42a85470":"t = df.loc[23766, ['fastestLapTimeSec']] \ns = df.loc[23766, ['fastestLapSpeed']].astype('float64')\nr = s[0] \/ t[0]\nr","d53dc6b4":"newSpeed = r * df.loc[23764, ['fastestLapTimeSec']][0]\ndf.loc[23764, ['fastestLapSpeed']] = str(newSpeed)\ndf[(df['year'] == 2017) & (df['country'] == 'UAE')][['driverRef', 'fastestLapTime', 'fastestLapTimeSec', 'fastestLapSpeed']]","75ebf1f9":"df['fastestLapSpeed'] = df['fastestLapSpeed'].astype('float64')\ndf['fastestLapSpeedMetersPerSec'] = 1000 * df['fastestLapSpeed'] \/ 3600","7f02306e":"df['fastestLapLength'] = df['fastestLapTimeSec'] * df['fastestLapSpeedMetersPerSec']\ndf['fastestLapLength'].tail(5)","f9e3a843":"df[(df['year'] == 2017) & (df['country'] == 'Italy')][['driverRef', 'circuitName', 'fastestLapLength']]","830cf215":"df[df['year'] == 2017].groupby(['driverRef']).agg({'points': 'sum'}).sort_values(by = 'points', ascending = False).plot.bar()","6c96e09f":"df[(df['year'] == 2017) & (df['surname'] == 'Ricciardo') & (df['country'] == 'Italy')][['fastestLapTime', 'fastestLapSpeed']]","ce613991":"df_speed = df.copy()","b42d89e7":"orig_df_speed_len = len(df_speed)","5460886a":"len(df_speed[df_speed['fastestLapSpeed'].isna()]) \/ len(df_speed)","ee0e80a4":"df_speed[df_speed['fastestLapSpeed'].isna()].groupby(['year']).agg({'resultId': 'count'}).plot()","efe02b7d":"df_speed[df_speed['fastestLapSpeed'].isna()].groupby(['year']).agg({'resultId': 'count'}).loc[2000:]","9be23152":"df_speed = df_speed[df_speed['year'] >= 2004]","d5d090fb":"df_speed.isna().sum()","1aa8c995":"df_speed['fastestLapSpeed'].isna().sum() \/ len(df_speed)","267e936f":"df_speed[df_speed['fastestLapSpeed'].isna()].groupby(['year', 'country'], as_index = False).agg({'resultId': 'count'}).sort_values(by = 'resultId', ascending = False)","ca5660e1":"df_speed[(df_speed['country'] == 'China') & (df_speed['year'] == 2011)]","71bfd9eb":"df_speed = df_speed[df_speed['raceId'] != 843]","f09af628":"df_speed[df_speed['fastestLapSpeed'].isna()]['status'].value_counts()","42c70485":"df_speed[(df_speed['fastestLapSpeed'].isna()) & (df_speed['status'] == 'Finished')]","9166a678":"df_speed.loc[22832]","f7df7b15":"df_kvy = data_dict['lapTimes'][(data_dict['lapTimes']['raceId'] == 941) & (data_dict['lapTimes']['driverId'] == 826)]\ndf_kvy.sort_values(by = 'milliseconds').head(5)","49c6e319":"df_speed[(df_speed['country'] == 'Russia') & (df_speed['year'] == 2015)]['fastestLapLength'].median()","ace40313":"t = df_kvy.loc[106791, ['milliseconds']][0] \/ 1000\nd = df_speed[(df_speed['country'] == 'Russia') & (df_speed['year'] == 2015)]['fastestLapLength'].median()\ns = d \/ t\ns = 3.6 * s\ns","296b937e":"df_speed.loc[22832, ['fastestLapSpeed']] = s\ndf_speed[(df_speed['country'] == 'Russia') & (df_speed['year'] == 2015)][['driverRef', 'position', 'fastestLapSpeed']]","2e90ec08":"df_speed[df_speed['fastestLapSpeed'].isna()]['status'].value_counts()","8d2849a7":"df_speed['fastestLapSpeed'].isna().sum() \/ len(df_speed)","ab1d3f82":"finisher = df_speed[(df_speed['status'].str.startswith('+')) | (df_speed['status'] == 'Finished')]['status'].drop_duplicates()\nfinisher = list(finisher)\nfinisher","e24a92e7":"len(df_speed[(df_speed['status'].isin(finisher))]) \/ len(df_speed)","c573c284":"df_speed = df_speed[(df_speed['status'].isin(finisher))]","697f7c4f":"df_speed.isna().sum()","39612f95":"1 - (len(df_speed) \/ orig_df_speed_len)","d6b37432":"df_speed = df_speed.groupby(['year', 'country'], as_index = False).agg({'fastestLapSpeed': np.median, 'fastestLapLength': np.mean})\ndf_speed.rename(columns = {'fastestLapSpeed': 'medianFastestLapSpeed', 'fastestLapLength': 'approxLapLength'}, inplace = True)\n\ncountries = list(df_speed['country'].drop_duplicates())","7481144b":"fig, ax = plt.subplots(figsize = (5, 5))\n\ncountry = 'Australia'\n\ndf_temp = df_speed[df_speed['country'] == country]\n\nax.scatter(df_temp['year'], df_temp['medianFastestLapSpeed'], color = '#4B878BFF')\nax.set(xlabel = 'year'\n       , ylabel = 'median fasted lap speed (km\/h)'\n       , title = country\n       , ylim = (0, 260)\n       , xlim = (2003, 2018))\n\nax2 = ax.twinx()\nax2.plot(df_temp['year'], df_temp['approxLapLength'] \/ 1000, color = '#D01C1FFF')\nax2.set(xlabel = 'year'\n        , ylabel = 'approx lap lenghth (km)'\n        , ylim = (0, 6)\n        , xlim = (2003, 2018))\n\nax2.spines['left'].set_color('#4B878BFF')\nax2.spines['right'].set_color('#D01C1FFF')\n\nplt.tight_layout()","ed3785d9":"countries = list(df_speed['country'].drop_duplicates())\nlen(countries)","91b06e26":"fig, ax = plt.subplots(nrows = 5, ncols = 5, figsize = (25, 20))\n\ni = 0 \nfor r in range(0, 5):\n    for c in range(0, 5):\n        if i < len(countries):\n            ax1 = ax[r, c]\n            df_temp = df_speed[df_speed['country'] == countries[i]]\n            # primary vertical axis\n            ax1.scatter(df_temp['year'], df_temp['medianFastestLapSpeed'], color = '#4B878BFF')\n            ax1.set(xlabel = 'year'\n                    , ylabel = 'median fasted lap speed (km\/h)'\n                    , title = '{} GP: median fastest lap by season'.format(countries[i])\n                    , ylim = (0, 260)\n                    , xlim = (2003, 2018))\n            # secondary vertical axis\n            ax2 = ax1.twinx()\n            ax2.plot(df_temp['year'], df_temp['approxLapLength'] \/ 1000, color = '#D01C1FFF')\n            ax2.set(xlabel = 'year'\n                    , ylabel = 'approx lap lenghth (km)'\n                    , ylim = (0, 8)\n                    , xlim = (2003, 2018))\n            # colouring the axis\n            ax2.spines['left'].set_color('#4B878BFF')\n            ax2.spines['right'].set_color('#D01C1FFF')\n            # colouring the ticks\n            ax1.tick_params(axis='y', labelcolor = '#4B878BFF')\n            ax2.tick_params(axis='y', labelcolor = '#D01C1FFF')\n            # colouring the axis labels\n            ax1.yaxis.label.set_color('#4B878BFF')\n            ax2.yaxis.label.set_color('#D01C1FFF')\n            # counter\n            i = i + 1\n        else:\n            break\nfig.tight_layout()\nplt.show()","d36aa9b8":"focus_countries = ['Australia', 'Brazil', 'Hungary', 'Malaysia', 'Monaco']\nlen(focus_countries)","ea900659":"for country in focus_countries:\n    fig, ax = plt.subplots(figsize = (7, 7))\n    df_temp = df_speed[df_speed['country'] == country]\n    # scatter plot\n    ax.scatter(df_temp['year'], df_temp['medianFastestLapSpeed'], color = '#4B878BFF')\n    ax.set(xlabel = 'year'\n            , ylabel = 'median fasted lap speed (km\/h)'\n            , title = '{} GP: speed by season (labels for 2004, 2014, 2017)'.format(country)\n            , ylim = (0, 240)\n            , xlim = (2002, 2018))\n    # adding vertical line for 2014\n    ax.axvline(x = 2014, color = '#a3a3a3', linewidth = 1, linestyle = 'dashed')\n    # adding labels for the 3 key years\n    plt.text(x = 2004\n             , y = df_temp.iloc[0, 2] + 5\n             , s = '{} km\/h'.format(round(df_temp.iloc[0, 2], 1))\n             , size = 8\n             , color = '#4B878BFF'\n             , ha = 'center')\n    plt.text(x = 2014\n             , y = df_temp.iloc[10, 2] - 15\n             , s = '{} km\/h'.format(round(df_temp.iloc[10, 2], 1))\n             , size = 8\n             , color = '#4B878BFF'\n             , ha = 'center')\n    plt.text(x = 2017\n             , y = df_temp.iloc[13, 2] - 15\n             , s = '{} km\/h'.format(round(df_temp.iloc[13, 2], 1))\n             , size = 9\n             , color = '#4B878BFF'\n             , ha = 'center')\nplt.show()","61255859":"# data stuff\ndf_fin = df.groupby(['nationality'], as_index = False).agg({'points': 'sum'}).sort_values('points', ascending = False).copy()\ndf_fin['points_pct'] = df_fin['points'] \/ df_fin['points'].sum()\ndf_fin = df_fin.iloc[0:10]\n\n# viz stuff\nimport matplotlib.ticker as mtick\nfig, ax = plt.subplots(figsize = (14, 5))\nax.bar(df_fin['nationality'], 100 * df_fin['points_pct'], color = '#4B878BFF')\nax.set(xlabel = 'nationality'\n       , ylabel = '% of all points earned'\n       , title = 'Top 10 nationalities in terms of percentage of championship points earned')\nax.get_children()[3].set_color('#D01C1FFF') \nplt.text(x = 3 - 0.15\n         , y = 100 * df_fin['points_pct'].iloc[3] + 0.5\n         , s = '{}%'.format(round(100 * df_fin['points_pct'].iloc[3], 2))\n         , size = 10\n         , color = '#D01C1FFF'\n         , weight = 'bold')\nax.yaxis.set_major_formatter(mtick.PercentFormatter())\nplt.show()","bb5c45e0":"# data stuff\ndf_rel = df[['grid', 'position']].copy()\ndf_rel = df_rel.dropna()\n\n# viz stuff\nfig, ax = plt.subplots(figsize = (6, 6))\nax.scatter(df_rel['grid'], df_rel['position'], alpha = 0.05, color = '#4B878BFF')\nax.set(xlabel = 'grid position'\n       , ylabel = 'final position'\n       , title = 'Grid position vs final position')\nplt.show()","f15e1198":"# data stuff\ndf_cns = data_dict['constructorStandings'][['raceId', 'constructorId', 'points', 'position']].copy()\ndf_cns = df_cns.merge(data_dict['constructors'], how = 'left')\ndf_cns = df_cns.merge(data_dict['races'][['raceId', 'year', 'raceName', 'round']], how = 'left')\ndf_cns = df_cns[['constructorName', 'position', 'year', 'round']]\ndf_fnl = df_cns.groupby(['year'], as_index = False).agg({'round': np.max})\ndf_fnl.rename(columns = {'round': 'finalRound'}, inplace = True)\ndf_cns = df_cns.merge(df_fnl, how = 'left')\ndf_cns = df_cns[df_cns['round'] == df_cns['finalRound']]\ndf_cns = df_cns[['constructorName', 'position', 'year']]\nfocus_constructors = ['Mercedes', 'Ferrari', 'Red Bull', 'BRM', 'Tyrrell', 'Force India', 'Jordan']\nfocus_palette = {'Mercedes': '#707070'\n                 , 'Ferrari': '#de0000'\n                 , 'Red Bull': '#001496'\n                 , 'BRM': '#228243'\n                 , 'Tyrrell': '#4dc3eb'\n                 , 'Force India': '#ff85ef'\n                 , 'Jordan': '#fcd700'}\ndf_cns = df_cns[df_cns['constructorName'].isin(focus_constructors)]\n\n# viz stuff\nfig, ax = plt.subplots(figsize = (15, 5))\nax = sns.lineplot(data = df_cns\n                  , x = 'year'\n                  , y = 'position'\n                  , hue = 'constructorName'\n                  , palette = focus_palette\n                  , hue_order = focus_constructors)\nax.set(xlabel = 'round'\n       , ylabel = 'rank'\n       , title = 'Final season ranking for few constructors since 1958')\nax.legend(loc = 'upper left')\nfrom matplotlib.ticker import MaxNLocator\nax.xaxis.set_major_locator(MaxNLocator(integer = True))\nax.yaxis.set_major_locator(MaxNLocator(integer = True))\nplt.show()","9ff9fdee":"Let's look into the 5% of 2004 - 2017 data that has no fastestLapSpeed","06751c86":"Track length as an indicator of whether the track has changed or not\n","8a31b97b":"Join the results data set with the other 5 above + the status dataframe","d181fe2f":"### 2. Loading the data","9fbabd58":"### 3. Getting familiar with the data","a835e654":"#### 6.3. Dealing Kvyat's missing speed values for the Russian GP 2015","14dab836":"### 4. Cleaning and prepping","488e9ea0":"There is were the error is coming from","0ed03973":"### 7. Packaging things nicely for communication","6836bf95":"What time frame are we covering BTW?","b180b474":"#### 5.3. Ricciardo's fastest lap time at Monza in 2017","c3a75de5":"Looks like we have a lot less missing speeds from 2004 onwards","f3a62374":"### 6. So... Are F1 cars faster?","219b641a":"https:\/\/en.wikipedia.org\/wiki\/2017_Formula_One_World_Championship","ab70d75b":"#### 6.5. Aggregating the data by year","7bf2c8b1":"Looks like no speed data is available for any driver in the 2011 Shanghai GP","ecb369b6":"Overall we got rid of 82% of the data in df_speed","d07da4f2":"Let's find Kvyat's speed on his fastest lap in the lapTimes dataframe (raceId 941, driverId 826); first we need to find his fastest lap","c31266bf":"Let's drop this GP","7c483564":"So let's define finishers (i.e. drivers without race issues)","f53dee89":"We can now calculate the speed","956c3bae":"Let's create a data frame for that question","20863ee5":"#### 6.4. Dealing the remaining missing speed values: race issues","32ca2bfd":"Remove and rename columns","a8b2532c":"https:\/\/www.google.com\/search?q=monza+circuit+length&rlz=1C1GCEA_enGB804GB804&oq=monza+circuit+length&aqs=chrome..69i57.5270j1j4&sourceid=chrome&ie=UTF-8","ad9b8a3f":"#### 8.3.  Long term constructor performance","8c7be83f":"Using a loop to display all GPs","fffbbc12":"Let's drop the non finisher records","4c68ad25":"Are Formula 1 cars getting faster? Let's try and answer that question with a step by step python analysis. I want to provide beginners with an example of how you can use a python notebook to analyse data, from start to finish. As it is often the case, a lot of the code below is about cleaning the data. You can jump to section 7 if you are not interested in that.","253f38ca":"That's Daniil Kvyat","3b504b68":"#### 4. 2. Adding new columns and fixing issues","04c28abe":"All the remaining speed nulls seem to belong to drivers with race issues","a0f01152":"Adding new columns and converting some data types - starting with a lap distance column (speed = distance \/ time ==> distance = speed * time)","312eb39a":"### 5. Sense checking","e5791f58":"Are F1 cars getting faster? Looking at the median fastest lap year after year, it seems that they've actually been getting gradually slower up until 2004 and have then gotten faster since.\n\nSource: \"Formula 1 Race Data\" by Chris G available on Kaggle (https:\/\/www.kaggle.com\/cjgdev\/formula-1-race-data-19502017, accessed 20\/04\/2020)\n- 2004-2017 data\n- displaying data for only 5 tracks (the 5 that haven't changed and have been used every year over the period)\n- data from drivers who haven't finished the race is excluded","5b49333a":"#### 2.1. Accessing the files on Kaggle","7c7268b5":"#### 5.2. The number of points of each driver got at the end of the 2017 championship","d09a59b5":"A few speed nulls remain","879e8528":"Let's correct the wrong speed value for Ocon using the Ricciardo observation","099e61b7":"#### 8.2.  How much does the grid position matters?","72122ba6":"#### 5.1. Our circuit length calculation","e48f1c99":"We can now calculte the approx length in meter of the track using the fastest lap","acbc5ade":"#### 6.1. Dealing with missing speed values pre 2004","cd8efd99":"And replace the missing value in df_speed","90325e38":"So let's remove all the data before that season from our speed data frame","28d0e42e":"#### 4.1. Building a single data frame for our use case","fab26585":"#### 8.1. Finland: population 5 million but so many drivers","49223147":"https:\/\/gpracingstats.com\/circuits\/monza\/","06e6e9d7":"### 1. Classic libraries","c18b3728":"We can now build our new speed column in meters per second","0d9910c4":"#### 6.6. Visualising speed vs track length","ba89b22a":"Let's list the GPs for which the track hasn't changed  and all races occured between 2004 and 2017","71b56818":"Only one guy finished despite having no fastest lap speed, who dat?","a0613510":"Let's also record the length of that df","3e3a741e":"#### 2.2. Reading the CSVs in a dictionary of dataframes","588d60ff":"Same length pre and post join, good","535af52f":"No null left in the fastestLapSpeed column","992c685f":"We also need the length of the track","51157827":"77% of our observations are missing the speed info","b72a5667":"#### 6.2. Dealing with missing speed values for the Shanghai GP 2011","539b1ae5":"### 8. Plenty of other things we could have looked into","11f84ca9":"These nulls represent 4.7% of the remaining records","166f51b7":"77% of the remaining records have a status falling under the finisher statuses defined above"}}