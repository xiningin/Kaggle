{"cell_type":{"7bfc38ab":"code","a1fe7a03":"code","d9707567":"code","ccba1abf":"code","ff2e3e5a":"code","12f03d96":"code","876dabb6":"code","cecbc8a4":"code","9048dd7f":"code","6ab5527b":"code","23847e00":"code","5a0aec76":"code","b8add746":"code","1d2aeca1":"code","8927d480":"code","401689f3":"code","a5b0383a":"code","6e4ba5b0":"code","459e710e":"code","9dff9f60":"code","e5d12c1a":"code","f262059e":"code","5c26fd13":"code","a0f7661c":"code","327233c3":"code","665af3ea":"code","0ece8331":"code","4149a46e":"code","ccb8ae36":"code","73b44fd4":"code","004637ea":"code","0ee59551":"code","34c4b54a":"code","8f2d002a":"code","2c294444":"markdown"},"source":{"7bfc38ab":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split","a1fe7a03":"train = pd.read_json(\"..\/input\/stanford-covid-vaccine\/train.json\",lines=True)\ntest = pd.read_json(\"..\/input\/stanford-covid-vaccine\/test.json\",lines=True)\nss = pd.read_csv(\"..\/input\/stanford-covid-vaccine\/sample_submission.csv\")\n\ntrain = train.set_index('index')\ntest = test.set_index('index')","d9707567":"# read npy data file\nbpps_dir = '..\/input\/stanford-covid-vaccine\/bpps\/'\nbpps_list = os.listdir(bpps_dir)\nbpps_npy = np.load(f'..\/input\/stanford-covid-vaccine\/bpps\/{bpps_list[25]}')\nprint('Count of npy files: ', len(bpps_list))\nprint('Size of image: ', bpps_npy.shape)\n#Size of all .npy files are not same","ccba1abf":"targets = ['reactivity','deg_Mg_pH10','deg_Mg_50C','deg_pH10','deg_50C']","ff2e3e5a":"train = train[['id']+targets ]","12f03d96":"train['reactivity'] = train['reactivity'].apply(lambda x: np.mean(x))\ntrain['deg_Mg_pH10'] = train['deg_Mg_pH10'].apply(lambda x: np.mean(x))\ntrain['deg_Mg_50C'] = train['deg_Mg_50C'].apply(lambda x: np.mean(x))\ntrain['deg_pH10'] = train['deg_pH10'].apply(lambda x: np.mean(x))\ntrain['deg_50C'] = train['deg_50C'].apply(lambda x: np.mean(x))","876dabb6":"train","cecbc8a4":"train_data_ids = train['id'].values","9048dd7f":"train_img = []\nfor ID in train_data_ids:\n    img_path = os.path.join(bpps_dir,ID+'.npy')\n    img = np.load(img_path)\n    train_img.append(img)","6ab5527b":"y = train[targets].values","23847e00":"train_img = np.array(train_img).reshape(-1, 107, 107, 1)","5a0aec76":"X_train, X_val, y_train, y_val = train_test_split(train_img, y, test_size=0.1, random_state=32)","b8add746":"from tensorflow.keras.layers import Dense, Input, Dropout,Flatten, Conv2D\nfrom tensorflow.keras.layers import BatchNormalization, Activation, MaxPooling2D\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nfrom tensorflow.keras.utils import plot_model\nimport tensorflow as tf","1d2aeca1":"# Initialising the CNN\nmodel = Sequential()\n\n# 1 - Convolution\nmodel.add(Conv2D(64,(3,3), padding='same', input_shape=(107, 107,1)))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\n# Flattening\nmodel.add(Flatten())\n\n# Fully connected layer\nmodel.add(Dense(128))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.25))\n\nmodel.add(Dense(5, activation='linear'))\n\nopt = Adam(lr=0.005)\nmodel.compile(optimizer=opt, loss='mean_squared_error', metrics=['accuracy'])\nmodel.summary()","8927d480":"reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.1,\n                              patience=2, min_lr=0.00001, mode='auto')\n\ncallbacks = [reduce_lr]\n\nhistory = model.fit(\n    x=X_train,\n    y=y_train,\n    epochs=50,\n    validation_data = (X_val,y_val),\n    callbacks=callbacks\n)","401689f3":"\nplt.figure(figsize=(15,7))\nax1 = plt.subplot(1,2,1)\nax1.plot(history.history['loss'], color='b', label='Training Loss') \nax1.plot(history.history['val_loss'], color='r', label = 'Validation Loss',axes=ax1)\nlegend = ax1.legend(loc='best', shadow=True)\nax2 = plt.subplot(1,2,2)\nax2.plot(history.history['accuracy'], color='b', label='Training Accuracy') \nax2.plot(history.history['val_accuracy'], color='r', label = 'Validation Accuracy')\nlegend = ax2.legend(loc='best', shadow=True)","a5b0383a":"test","6e4ba5b0":"test_public = test[test.seq_length == 107]\ntest_private = test[test.seq_length == 130]","459e710e":"test_public_ids = test_public['id'].values\ntest_private_ids = test_private['id'].values","9dff9f60":"test_public_img = []\nfor ID in test_public_ids:\n    img_path = os.path.join(bpps_dir,ID+'.npy')\n    img = np.load(img_path)\n    test_public_img.append(img)\n\ntest_private_img = []\nfor ID in test_private_ids:\n    img_path = os.path.join(bpps_dir,ID+'.npy')\n    img = np.load(img_path)\n    test_private_img.append(img)\n    ","e5d12c1a":"plt.imshow(test_private_img[0])","f262059e":"test_public_img = np.array(test_public_img).reshape(-1, 107, 107, 1)\ntest_private_img = np.array(test_private_img).reshape(-1, 130, 130, 1)","5c26fd13":"pred_public = model.predict(test_public_img)\n#pred_private = model.predict(test_private_img)","a0f7661c":"len(test_private_img)","327233c3":"pred_private.shape","665af3ea":"pred_public = np.repeat(pred_public,repeats=107,axis=0)","0ece8331":"pred_private = np.repeat(np.array([0,0,0,0,0]),repeats=130*3005,axis=0).reshape(-1,5)","4149a46e":"prediction = np.concatenate((pred_public,pred_private),axis=0)","ccb8ae36":"sub = pd.DataFrame(prediction)","73b44fd4":"seqpos = ss.id_seqpos.values","004637ea":"sub['id_seqpos'] = seqpos","0ee59551":"sub","34c4b54a":"sub = sub.rename(columns={0: \"reactivity\", 1: \"deg_Mg_pH10\",2: \"deg_Mg_50C\", 3: \"deg_pH10\", 4: \"deg_50C\"})","8f2d002a":"sub.to_csv(\"submission.csv\",index=False)","2c294444":"I have used CNN for predicting values mean values using npy files.\nThough accuracy seems to be only ~70%. please let me know I can improve my cnn model.\n\n\n## STILL WORK IN PROGRESS!!"}}