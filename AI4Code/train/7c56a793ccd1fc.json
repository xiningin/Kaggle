{"cell_type":{"aa79c137":"code","72414eec":"code","56cf6ae5":"code","dc2da2d8":"code","9d5b6328":"code","1563de02":"code","b27f4b92":"code","55a46889":"code","52b34f96":"code","9e41d61d":"code","daf8b7fb":"code","c8086870":"code","38cebfae":"code","b99c49a7":"code","3ddb30c9":"code","5d6b5f17":"code","aea9fd32":"code","8bdc42c4":"code","0f076111":"code","a2c0c185":"code","e03d2a3b":"code","1359b290":"code","4564baa7":"code","32a8d872":"code","6a700d4e":"code","097b1e26":"code","4f4c9afe":"code","ab3cabe3":"code","c1846792":"markdown","2d0528c7":"markdown","3011ac9a":"markdown","a61480d7":"markdown","bae53879":"markdown","a267eba7":"markdown","59f4a9f5":"markdown","f3f356c6":"markdown","50166c66":"markdown","e0a813a6":"markdown","1c045164":"markdown","edfcf37b":"markdown","18f281b9":"markdown","586af00c":"markdown","803c3778":"markdown","554384ad":"markdown","c988263b":"markdown","f8cb9932":"markdown","d492e4c0":"markdown","abd33b95":"markdown","e0d39d19":"markdown","c0b0dd56":"markdown","24257c07":"markdown","022fd869":"markdown"},"source":{"aa79c137":"# Import librairies\n%matplotlib inline \nimport matplotlib.pylab\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn')\nplt.rcParams['figure.figsize'] = [20, 9]\nplt.rcParams['lines.linewidth'] = 1","72414eec":"# Load the data\ndf = pd.read_csv(\"..\/input\/visuallizations\/TSLA-updated-dataset.csv\")\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.index = df['Date']\ndf.head(10)\n#df.tail(10)","56cf6ae5":"def plot_with_rolling(data,short_rolling,long_rolling,lbl='Close Price'):\n    # Plot \n    fig, ax = plt.subplots(figsize=(20,9))\n\n    ax.plot(data.index, data, label=lbl)\n    ax.plot(short_rolling.index, short_rolling, label='20 days rolling')\n    ax.plot(long_rolling.index, long_rolling, label='100 days rolling')\n    #ax.axvline(x='2020-04-10',linewidth=0.8, color='r')\n    #ax.axvline(x='2020-06-01',linewidth=0.8, color='g')\n    ax.set_xlabel('Date')\n    ax.set_ylabel(lbl)\n    ax.legend()\n\n    plt.show()\n\nshort = df.Close.rolling(window=20).mean()\nlong = df.Close.rolling(window=100).mean() \nplot_with_rolling(data=df.Close,short_rolling=short,long_rolling=long,lbl='Close Price')    \n    \nshort = df.Close[df.index>'2020-12-21'].rolling(window=20).mean()\nlong = df.Close[df.index>'2020-12-21'].rolling(window=100).mean() \nplot_with_rolling(data=df.Close[df.index>'2020-12-21'],short_rolling=short,long_rolling=long,lbl='Close Price')","dc2da2d8":"short = df.Volume.rolling(window=20).mean()\nlong = df.Volume.rolling(window=100).mean()\nplot_with_rolling(data=df.Volume,short_rolling=short,long_rolling=long,lbl='Volume')    \n    \nshort = df.Volume[df.index>'2020-12-21'].rolling(window=20).mean()\nlong = df.Volume[df.index>'2020-12-21'].rolling(window=100).mean() \nplot_with_rolling(data=df.Volume[df.index>'2020-12-21'],short_rolling=short,long_rolling=long,lbl='Volume')\n","9d5b6328":"# Calculate the daily return and the daily log return\ndaily_rtn = df.Close\/df.Close.shift(1) - 1\ndaily_log_rtn = np.log(df.Close).diff()\n# Calculate the daily return (another way)\n# daily_rtn = close.pct_change(1)\n\ndaily_rtn.plot()\nplt.show()\n# log return\n","1563de02":"daily_rtn.rolling(30).var().plot()\nplt.show()","b27f4b92":"df['Volume'].rolling(50).var().plot()\nplt.show()","55a46889":"# Calculate diff\ndiff=df.Close.diff().dropna()\n# Ups\nplus=diff.map(lambda x: x if x>0 else 0).rename('Plus')\n# Downs\nminus=diff.map(lambda x: -1*x if x<0 else 0).rename('Minus')\n\nrsi14=pd.concat([diff,plus,minus],axis=1)\n# init average up\nrsi14['AvgUP'] = rsi14.Plus[:14].sum()\/14\n# init average down\nrsi14['AvgDOWN'] = rsi14.Minus[:14].sum()\/14\n\n# calculate AvgUP and AvgDown with the recurrent formula\nfor i in range(14,rsi14.Close.size):\n    rsi14['AvgUP'].iloc[i]=(rsi14['Plus'].iloc[i] + 13*rsi14['AvgUP'].iloc[i-1])\/14\n    rsi14['AvgDOWN'].iloc[i]=(rsi14['Minus'].iloc[i] + 13*rsi14['AvgDOWN'].iloc[i-1])\/14\n\nrsi14['RSI']=100 - 100 \/ (1+rsi14['AvgUP']\/rsi14['AvgDOWN'])\nrsi14.tail(10)","52b34f96":"short = rsi14['RSI'].rolling(window=20).mean()\nlong = rsi14['RSI'].rolling(window=100).mean()\nplot_with_rolling(data=rsi14['RSI'],short_rolling=short,long_rolling=long,lbl='Close Price')    ","9e41d61d":"ema_short = df.Close.ewm(span=12, adjust=False).mean()\nema_long = df.Close.ewm(span=26, adjust=False).mean()\nmacd_line = ema_short - ema_long\nmacd_signal = macd_line.ewm(span=9, adjust=False).mean()\n","daf8b7fb":"# Plot \nfig, ax = plt.subplots(figsize=(20,9))\n\nax.plot(macd_line.index, macd_line, label='Moving Average Line')\nax.plot(macd_signal.index, macd_signal, label='Moving Average Signal')\n#ax.axvline(x='2020-12-31',linewidth=0.8, color='r')\nax.set_xlabel('Date')\nax.set_ylabel('Moving Average')\nax.legend()\n\nplt.show()\n","c8086870":"momentum = df.Close.diff(2)\nmomentum.plot()\nplt.show()","38cebfae":"\ndef plot_all(close=df.Close,rsi=rsi14['RSI'],macd=macd_line,momentum=momentum):\n    fig = plt.figure(constrained_layout=True,figsize=(20,16))\n    gs = fig.add_gridspec(10, 1)\n    ax1 = fig.add_subplot(gs[:4, 0])\n    ax1.set_title('Close')\n    ax1.plot(close.index, close, label='Close')\n    #ax1.axvline(x='2021-12-30',linewidth=0.8, color='r')\n    ax2 = fig.add_subplot(gs[4:6,0])\n    ax2.set_title('RSI14')\n    ax2.plot(rsi.index, rsi)\n    ax2.axhline(y=30,linewidth=0.5, color='blue')\n    ax2.axhline(y=70,linewidth=0.5, color='red')\n    #ax2.axvline(x='2021-12-30',linewidth=0.8, color='r')\n    ax3 = fig.add_subplot(gs[6:8,0])\n    ax3.set_title('MACD')    \n    ax3.plot(macd.index, macd)\n    ax3.axhline(y=0,linewidth=0.5, color='black')\n    #ax3.axvline(x='2021-12-30',linewidth=0.8, color='r')\n    ax4 = fig.add_subplot(gs[8:,0])\n    ax4.set_title('Momentum')\n    ax4.plot(momentum.index, momentum)\n    ax4.axhline(y=0,linewidth=0.5, color='black')\n    #ax4.axvline(x='2021-12-30',linewidth=0.8, color='r')\n    plt.show()\nplot_all()\n","b99c49a7":"startd = '2021-12-31'\nplot_all(close=df.Close[df.index>startd],rsi=rsi14['RSI'][rsi14.index>startd],macd=macd_line[macd_line.index>startd],momentum=momentum[momentum.index>startd])","3ddb30c9":"# Calculate the daily return\ndaily_rtn_all = df.loc[df.index>'2020-12-31','Close']\/df.loc[df.index>'2020-12-31','Close'].shift(1) - 1\ndaily_rtn_all.dropna(inplace=True)\ndaily_rtn = daily_rtn_all[daily_rtn_all.index<'2021-12-30']\n# plot the distribution\nimport seaborn as sns\nsns.distplot(daily_rtn)\nplt.show()\n","5d6b5f17":"print( 'Skewness (before)  =', daily_rtn.skew())\nprint( 'Skewness (overall) =', daily_rtn_all.skew())","aea9fd32":"print( 'Kurtosis (before)  =', daily_rtn.kurt())\nprint( 'Kurtosis (overall) =', daily_rtn_all.kurt())","8bdc42c4":"print( 'Before 2021-12-30')\nprint( 'Historical VaR at 1 days at 95%  =', daily_rtn.sort_values().quantile(0.05))\nprint( 'Historical Mirror VaR at 1 days at 5%  =', daily_rtn.sort_values().quantile(0.95))\nprint( 'Overall')\nprint( 'Historical VaR at 1 days at 95%  =', daily_rtn_all.sort_values().quantile(0.05))\nprint( 'Historical Mirror VaR at 1 days at 5%  =', daily_rtn_all.sort_values().quantile(0.95))","0f076111":"horizon = 20\nnbr_simulation = 10000\n\nstd = np.std(daily_rtn)\nmean = np.mean(daily_rtn)\n\ngen=1 + mean + std * np.random.randn(nbr_simulation,horizon) \ngen = np.prod(gen,axis=1)-1\ngen.sort()","a2c0c185":"print('Mean of daily return = {}'.format(mean))\nprint('Standard deviation of daily return = {}'.format(std))\nprint( 'VaR at {} days at 95%  = {}'.format(horizon,np.quantile(gen, 0.05)))\nprint( 'Mirror VaR at {} days at 95%  = {}'.format(horizon,np.quantile(gen, 0.95)))","e03d2a3b":"from sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.layers import Bidirectional, Dropout, Activation, Dense, LSTM\nfrom tensorflow.python.keras.layers import CuDNNLSTM\nfrom tensorflow.keras.models import Sequential\nimport tensorflow as tf\nfrom tensorflow import keras\nimport math\n\n# Window size = number of previous values to predict the next value\nWINDOW_SIZE = 10","1359b290":"close_price = df.Close[(df.index>'2020-12-31')]\nclose_price['2022-01-13']\n","4564baa7":"train_close = df.Close[(df.index>'2020-12-31') & (df.index<'2021-12-30')].values.reshape(-1, 1)\nall_close = df.Close[df.index>'2020-12-31'].values.reshape(-1, 1)\n#  MinMaxScaler\nscaler = MinMaxScaler()\nscaled_all_close = scaler.fit_transform(all_close)\nscaled_train_close = scaler.transform(train_close)                     \n#scaled_close = scaled_close[~np.isnan(scaled_close)]\n#scaled_close = scaled_close.reshape(-1, 1)\nprint(\"Train shape = {}\".format(scaled_train_close.shape))\nprint(\"All shape = {}\".format(scaled_all_close.shape))\nprint(\"nan values ? {}\".format(np.isnan(scaled_train_close).any()))","32a8d872":"# Generate sequences of lenght = WINDOW_SIZE\n\ndef generateSequence(sequence,backward):\n    X, y = list(), list()\n    for i in range(sequence.shape[0]-backward):\n        seq_x, seq_y = sequence[i:i+backward], sequence[i+backward]\n        X.append(seq_x)\n        y.append(seq_y)\n    X=np.array(X)\n    y=np.array(y)\n    X = X.reshape((X.shape[0], X.shape[1], 1))\n    return X,y\n    \nX,y = generateSequence(scaled_train_close,WINDOW_SIZE)\nprint(\"X shape = {}\".format(X.shape))\nprint(\"y shape = {}\".format(y.shape))","6a700d4e":"model = Sequential()\nmodel.add(LSTM(12, activation='relu', input_shape=(WINDOW_SIZE, 1)))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1))","097b1e26":"#  Compile\nmodel.compile(\n    loss='mse', \n    optimizer='adam'\n)\n\nBATCH_SIZE = 64\n\n#  Compile\nhistory = model.fit(\n    X, \n    y, \n    epochs=50, \n    batch_size=BATCH_SIZE, \n    shuffle=False,\n    validation_split=0.1\n)\n","4f4c9afe":"trainScore = model.evaluate(X, y)\nprint('Train Score: %.6f MSE (%.6f RMSE)' % (trainScore, math.sqrt(trainScore)))\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","ab3cabe3":"y_train_predicted = model.predict(X)\ny_inverse = scaler.inverse_transform(y)\ny_train_predicted_inverse = scaler.inverse_transform(y_train_predicted)\n\n\nplt.plot(y_inverse.ravel(), label=\"Price\", color='black')\nplt.plot(y_train_predicted_inverse.ravel(), label=\"Predicted Price\", color='blue')\nplt.legend(loc='upper left')\nplt.title(\"Train data - Prediction at 1 day based on the previous {} days\".format(WINDOW_SIZE))\nplt.show()","c1846792":"> <span>&#171;<\/span>Nothing to say ... <span>&#187;<\/span>","2d0528c7":"# AR Moving Average \n \n\n*EMA stands for \"exponential moving average\"*\n\n* **MACD line = (shorter EMA of close prices) \u2013 (longer EMA of close prices)**\n* **MACD Signal = EMA of MACD line**\n\nWith \n\n* s = period of the shorter EMA\n* l = period of the longer EMA\n* p = period of the EMA of MACD\n\nThese periods can be equal to (s=12, l=26, p=9) or (s=8, l=22, p=11), for instance\n\n \n\n| MA line   | Description |\n| ----------- | ----------- |\n| positive and rising   | Market\u2019s bullish momentum is accelerating        |\n| negative and falling   | Market\u2019s bearish momentum is accelerating        |\n| positive but falling   | The bullish momentum in the market is fading        |\n| negative but increasing   | The bearish momentum in the market is fading        |\n| zero      | Balanced       |","3011ac9a":"# VISUALIZATIONS\n","a61480d7":"> <span>&#171;<\/span>Volume are not exceptionally high before our end point (2021-12-19),<br\/> but volumes are constantly very high over the year 2021<span>&#187;<\/span>","bae53879":"# A risk point of view - Simulating the daily return\n \n\nGeometric Motion $ P_{t+1} = P_{t} \\times (1 + \\mu \\Delta_t + \\sigma \\sqrt{ \\Delta_t } \\epsilon) $ with\n* $P_{t}$ is Price at time t\n* $\\mu$ is mean of daily returns\n* $\\sigma$ is standard deviation of daily returns\n* $\\Delta_t$ is 1 (1 day)\n* $\\epsilon$ follows N(0,1)\n\nby the way $ P_{n} = P_{0} \\times \\prod_{k=1}^n{(1 + \\mu \\Delta_t + \\sigma \\sqrt{ \\Delta_t } \\epsilon_i)}  $\n\nif we speak about return \n\n$ R_{n} = \\frac{P_{n} - P_{0}}{P_{0}}$\n\n$ R_{n} = \\prod_{k=1}^n{(1 - \\mu \\Delta_t + \\sigma \\sqrt{ \\Delta_t } \\epsilon_i)} -1 $\n\n\n## <span>&#171;<\/span>Let's try this<span>&#187;<\/span> Simulating VaR with a horizon of h days \n","a267eba7":"**Skewness** ","59f4a9f5":"###  Training","f3f356c6":"> <span>&#171;<\/span>There is no spike of variance of the volumes before the rise<span>&#187;<\/span>","50166c66":"### Generate sequences","e0a813a6":"# Visualizations on the last year","1c045164":"###  Normalization","edfcf37b":"**Value at risk** ","18f281b9":"### Modelling for visualization","586af00c":"# A risk point of view - Visualization on distribution of the daily return\n> <span>&#171;<\/span>let's look at risk indicators between 2021-01-01 and the pivotal date  (2021-12-30) <span>&#187;<\/span>\n\n**A distribution can be descrided by these moments , mean (order=1) , variance (order=2), skewness(order=3) and kurtosis(order=4)**\n","803c3778":"# TESLA Exchange Momentum visualization\n\n \n\n\nMomentum shows how much the closing price has changed, it indicates how much a trend is strong.\n\nMomentum is the difference between current closing price and the closing price n days before\n\n`Momentum = Close(Today) \u2013 Close(Today - n days)`","554384ad":"**Kurtosis** ","c988263b":" # Big Data and Data Visualisation\n# Visualisation Example Based on Price Prediction for Stocks Using Autoregressive Integrated Moving Average Model\n\n\n\n\n\n","f8cb9932":"> <span>&#171;<\/span>There is no spike of variance of the daily returns before the rise<span>&#187;<\/span>","d492e4c0":"# The variance of the close and of the volume\n","abd33b95":"# Importing the data","e0d39d19":"# Calculate the daily returns","c0b0dd56":"#  Checking classical indicator\n \n\n$$ RSI_{14} = 100 - (\\frac{100}{1 + RS}) $$ \n\n\n$$ RS = Relative Strength = \\frac{\\text{average of all up moves in the last 14 days}}{\\text{average of all down moves in the last 14 days}} = \\frac{\\text{AvgUP}}{\\text{AvgDOWN}} $$\n\nThis leading indicator is limited from 0 to 100, when its value is below 30 it is said that it is overbought and when its value is above 70 it is said that it is overbought.\n\n \n\n* Evaluate average_gain and average_loss for the first 14 days\n* Caculate average_up and average_down with a recurrent formula\n\n$$AvgUP(t) = \\frac{UP(t) + 13 \\times AvgUP(t-1)}{14}$$\n$$AvgDOWN(t) = \\frac{DOWN(t) + 13 \\times AvgDOWN(t-1)}{14}$$","24257c07":"> <span>&#171;<\/span>The trend was really bullish since June, which is remarkable is perhaps the slope of the moving average 20 during the last months before our end point (2019-12-19)<span>&#187;<\/span>\n\n> <span>&#171;<\/span>On the zoom, we see that the rise is very powerful after the beginning of september, the MA100 has absorded the decrease of the past and follow the MA20 <span>&#187;<\/span>","022fd869":"> <span>&#171;<\/span>At 1 days, there  is 5% of probability that the return exceeds 4.46 % before 2019-12-19<span>&#187;<\/span>"}}