{"cell_type":{"5afbb565":"code","61e86796":"code","a745492c":"code","c5d3baf7":"code","50a0803a":"code","451e881b":"code","788db3a4":"code","5719ea2c":"code","434ae389":"code","b1fab903":"code","90328d9c":"code","61574cfb":"code","83879739":"code","e4fd5ffd":"code","f1a109c9":"code","25ee75b3":"code","892cb3c5":"code","506f6c00":"code","f2feffed":"markdown","5764ed08":"markdown","740bc9b8":"markdown","a9abbd3d":"markdown"},"source":{"5afbb565":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","61e86796":"df1=pd.read_csv('..\/input\/android-malware-dataset-for-machine-learning\/dataset-features-categories.csv', encoding='utf8')\npd.set_option('display.max_columns', None)\ndf1.head()","a745492c":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df1.transact)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set2', background_color=\"grey\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","c5d3baf7":"df=pd.read_csv('..\/input\/android-malware-dataset-for-machine-learning\/drebin-215-dataset-5560malware-9476-benign.csv', encoding='utf8')\npd.set_option('display.max_columns', None)\ndf.head()","50a0803a":"df.shape","451e881b":"df.isnull().sum()","788db3a4":"# Lets first handle numerical features with nan value\nnumerical_nan = [feature for feature in df.columns if df[feature].isna().sum()>1 and df[feature].dtypes!='O']\nnumerical_nan","5719ea2c":"# categorical features with missing values\ncategorical_nan = [feature for feature in df.columns if df[feature].isna().sum()>0 and df[feature].dtypes=='O']\nprint(categorical_nan)","434ae389":"df = pd.get_dummies(df)","b1fab903":"import matplotlib.pyplot as plt\nimport datetime\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom keras import models, layers","90328d9c":"X_l = []\ny_l = []\nN = len(df)\nD = 50\nfor i in range(N-D-216):\n    X_l.append(df.iloc[i:i+D])\n    y_l.append(df.iloc[i+D])\n    \nX = np.array(X_l)\ny = np.array(y_l)\n\nprint(X.shape, y.shape)","61574cfb":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state= 100)","83879739":"m_x = layers.Input(shape = X_train.shape[1:])\nm_h = layers.LSTM(10)(m_x)\nm_y = layers.Dense(221)(m_h)\nm = models.Model(m_x,m_y)\nm.compile('adam','mse')\nm.summary()","e4fd5ffd":"history = m.fit(X_train, y_train, epochs=500, validation_data=(X_test, y_test),verbose=0)","f1a109c9":"plt.figure(figsize=(15,5))\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.legend(['Train','Test'])\nplt.title(\"The model's evaluation\", fontsize=14)\nplt.xlabel('Epoch')\nplt.xlim(2,500)\nplt.ylabel('Loss')\nplt.show()","25ee75b3":"pred = []\n\npr = m.predict(np.array(df.iloc[-50:]).reshape(1,50,221))\n\npred.append(pr[0])\n\nfor i in range(1,50):\n    pr = m.predict(np.concatenate((np.array(df[-50+i:]), pred[:]), axis=0).reshape(1,50,221))\n    pred.append(pr[0])\n\nfor i in range(0,250):\n    pr = m.predict(np.concatenate(pred[i:],axis=0).reshape(-1,50,221))\n    pred.append(pr[0])","892cb3c5":"pred","506f6c00":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Be patient. Mar\u00edlia Prata, @mpwolke was Here.' )","f2feffed":"#layers.Dense(221) It's due to (14770, 50, 221)","5764ed08":"#Original LSTM by Jeong https:\/\/www.kaggle.com\/jeongbinpark\/lstm-can-we-predict-the-bitcoin-price\/notebook","740bc9b8":"#I have no clue about what that chart is telling?? What about you? Any hint? Anyone?","a9abbd3d":"#N-D-216  216 are the number of columns."}}