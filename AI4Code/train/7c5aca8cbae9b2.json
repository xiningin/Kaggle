{"cell_type":{"05419663":"code","f0b4ea2a":"code","610325b2":"code","ae27345d":"code","9be69404":"code","5ba46a05":"code","6976d54d":"code","9afb3741":"code","597527f6":"code","dd2daa25":"code","56095ace":"code","a937b7c7":"code","ceaa18ca":"code","3c371ebc":"code","e3465787":"code","152df3e4":"code","499d0ce6":"code","5fe8c805":"code","0c2102b1":"code","c17573d6":"code","aa6a752d":"code","ed278b6d":"code","eaa7c59c":"code","4e26812c":"code","729db0e2":"code","fd9eeccd":"code","530a7333":"code","9d40029c":"code","b3634ceb":"code","c5fd6045":"code","af53af52":"code","117c0315":"code","71456f49":"code","aa7f2b1c":"code","61e0b26c":"code","2ad97c50":"code","39819db6":"code","e943495e":"code","7432079c":"code","0987a677":"code","874fa4b5":"code","1ede2810":"code","44c968c1":"code","221891a7":"code","eba1cf6b":"code","1344cf21":"code","deef458b":"code","be0a085d":"code","cf46176e":"code","cb9da916":"code","c9933353":"code","c0f05013":"code","0bcb38bb":"code","ad589906":"code","699767d0":"code","1af9e861":"code","349ef973":"markdown","ba964476":"markdown","0f3eb337":"markdown","49b6b1a9":"markdown","294c5019":"markdown","cf73858a":"markdown","863b77b4":"markdown","68f40391":"markdown","9c0a2113":"markdown","4db19d9d":"markdown","ce7e4537":"markdown","edcc2e64":"markdown","1d98d3dc":"markdown","5e7246e6":"markdown","787bc7ef":"markdown","97136fcc":"markdown","2721d1f0":"markdown","1e737a38":"markdown","a8e3fa70":"markdown","6d98fd7a":"markdown","0fdefebe":"markdown","525fd4a7":"markdown","1a697119":"markdown"},"source":{"05419663":"import umap\nimport pickle\nimport warnings\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, RepeatedStratifiedKFold, cross_val_score\nfrom sklearn import metrics\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.manifold import TSNE\nfrom sklearn.decomposition import PCA, TruncatedSVD, NMF, KernelPCA\nfrom sklearn.neural_network import BernoulliRBM\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, plot_confusion_matrix\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier","f0b4ea2a":"train = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/test.csv')\ntrain","610325b2":"train.info()","ae27345d":"train.describe()","9be69404":"plt.figure(figsize = (20, 10))\nplt.hist(x = train['Age'], bins = 40)    #, bins = 'fd')\nplt.show()","5ba46a05":"g = sns.FacetGrid(train, hue='Response', height = 7, aspect = 2)\ng.map(sns.kdeplot, 'Age')\nplt.legend()\nplt.show()","6976d54d":"g = sns.FacetGrid(train, hue='Gender', height = 7, aspect = 2)\ng.map(sns.kdeplot, 'Age')\nplt.legend()\nplt.show()","9afb3741":"g = sns.FacetGrid(train, hue='Vehicle_Age', height = 7, aspect = 2)\ng.map(sns.kdeplot, 'Age')\nplt.legend()\nplt.show()","597527f6":"g = sns.FacetGrid(train, hue='Response', height = 7,  aspect = 2, xlim = (0, 125000))\ng.map(sns.kdeplot, 'Annual_Premium')\nplt.legend()\nplt.show()","dd2daa25":"g = sns.FacetGrid(train, hue='Response', height = 5, aspect = 2)\ng.map(sns.kdeplot, 'Vintage')\nplt.legend()\nplt.show()","56095ace":"sns.countplot(train['Response'])","a937b7c7":"sns.countplot(train['Driving_License'])","ceaa18ca":"plt.figure(figsize=(12,8))\nsns.violinplot(x=\"Driving_License\", y=\"Age\", hue=\"Response\",\n                    data=train, palette=\"muted\", split=True)\nplt.show()","3c371ebc":"plt.figure(figsize=(12,8))\nsns.violinplot(x=\"Gender\", y=\"Age\", hue=\"Response\",\n                    data=train, palette=\"muted\", split=True)\nplt.show()","e3465787":"plt.figure(figsize=(12,8))\nsns.scatterplot(x='Age',y='Annual_Premium',data=train,hue='Response')\nplt.show()","152df3e4":"plt.figure(figsize=(12,8))\nsns.scatterplot(y='Vintage',x='Annual_Premium',data=train,hue='Response')\nplt.show()","499d0ce6":"plt.figure(figsize=(12,8))\nsns.boxplot(data=train, x = 'Gender', y = 'Age', orient='v')\nplt.show()","5fe8c805":"plt.figure(figsize=(12,8))\nsns.countplot(data = train, x = 'Vehicle_Age', hue = 'Response')\nplt.show()","0c2102b1":"sns.catplot(x=\"Age\", y=\"Response\", row=\"Vehicle_Damage\",\n                kind=\"box\", orient=\"h\", height=3, aspect=3,\n                data=train)\nplt.show()","c17573d6":"channels_resp = train[['Policy_Sales_Channel', 'Response']].groupby(by = ['Policy_Sales_Channel']).mean()\nprint('10 Channels with the lowest responce rate:')\ndisplay(channels_resp.sort_values(by='Response',ascending=True).head(10))\nprint('10 Channels with the highest responce rate:')\ndisplay(channels_resp.sort_values(by='Response',ascending=False).head(10))","aa6a752d":"plt.figure(figsize=(12,8))\nplt.hist(np.log(train['Annual_Premium']), bins = 40)\nplt.show()","ed278b6d":"allowed_regions = set(train['Region_Code'].value_counts()[train['Region_Code'].value_counts()>5000].index)","eaa7c59c":"allowed_sales_channels = set(train['Policy_Sales_Channel'].value_counts()[train['Policy_Sales_Channel'].value_counts()>5000].index)","4e26812c":"def uni_filter(x, filter_data):\n    if x in filter_data:\n        return x\n    else:\n        return 0\n\ndef region_filter(x):\n    return uni_filter(x=x, filter_data=allowed_regions)\n\ndef sales_channel_filter(x):\n    return uni_filter(x=x, filter_data=allowed_sales_channels)\n\ndef dummification(df):\n    dummy_df = pd.DataFrame()\n    object_cols = {'Gender', 'Region_Code', 'Vehicle_Age', 'Vehicle_Damage', 'Policy_Sales_Channel'}\n    for col in object_cols:\n        dummy_df = pd.concat([dummy_df, create_dummy(col, df)], axis = 1)\n    \n    return pd.concat([df.drop(columns = object_cols), dummy_df], axis = 1)\n        \n\ndef create_dummy(col, df):\n    df_dummy = pd.get_dummies(df[col], drop_first = True)\n    df_dummy.columns = ['dum: ' + str(col) + ': ' + str(name) for name in df_dummy.columns]\n    return df_dummy\n\ndef processing(df):\n    df = df.copy()\n    df.drop(['id'], axis=1, inplace = True)\n    df['Annual_Premium'] = df['Annual_Premium'].apply(np.log)\n    df['Region_Code'] = df['Region_Code'].apply(region_filter)\n    df['Policy_Sales_Channel'] = df['Policy_Sales_Channel'].apply(sales_channel_filter)\n    df = dummification(df)\n    df.columns = [col_name.replace('<', 'less thn').replace('>', 'more thn') for col_name in df.columns]\n    return df.sort_index(ascending=False, axis=1)\n\ndf = processing(train)\ndf","729db0e2":"scaler = MinMaxScaler()\nX_sc = scaler.fit_transform(df.drop('Response', axis = 1))\ny_v = df['Response'].values\n\nprint(f'X_sc shape: {X_sc.shape}')\nprint(f'y_v shape: {y_v.shape}')","fd9eeccd":"pca = PCA(n_components=2, random_state = 1)\ndf_pca = pca.fit_transform(X_sc)","530a7333":"df_vis = pd.DataFrame(df_pca)\ndf_vis['y'] = y_v\n\nplt.figure(figsize = (12, 8))\nsns.scatterplot(data = df_vis, x = 0, y = 1, hue = 'y',  palette = 'magma')\nplt.show()","9d40029c":"pca_variance = pca.explained_variance_\n\nplt.figure(figsize=(6, 6))\nplt.bar(['0', '1'], pca_variance, align='center', label='individual variance')\nplt.legend()\nplt.ylabel('Variance ratio')\nplt.xlabel('Principal components')\nplt.show()","b3634ceb":"pca = PCA(n_components=3, random_state = 1)\ndf_pca = pca.fit_transform(X_sc)","c5fd6045":"df_vis = pd.DataFrame(df_pca)\ndf_vis['y'] = y_v\n\nfig = plt.figure(figsize = (15, 8))\n\nax = fig.add_subplot(1, 2, 1, projection='3d')\nax.scatter3D(df_vis[0], df_vis[1], df_vis[2], c=df_vis['y'])\nax.view_init(10, 10)\n\nax = fig.add_subplot(1, 2, 2, projection='3d')\nax.scatter3D(df_vis[0], df_vis[1], df_vis[2], c=df_vis['y'])\nax.view_init(20, 35)\n\nplt.show()","af53af52":"pca_variance = pca.explained_variance_\n\nplt.figure(figsize=(6, 6))\nplt.bar(['0', '1', '2'], pca_variance, align='center', label='individual variance')\nplt.legend()\nplt.ylabel('Variance ratio')\nplt.xlabel('Principal components')\nplt.show()","117c0315":"svd = TruncatedSVD(n_components=2, random_state = 1)\ndf_svd = svd.fit_transform(X_sc)","71456f49":"df_vis = pd.DataFrame(df_svd)\ndf_vis['y'] = y_v\n\nplt.figure(figsize = (12, 8))\nsns.scatterplot(data = df_vis, x = 0, y = 1, hue = 'y',  palette = 'magma')\nplt.show()","aa7f2b1c":"svd = TruncatedSVD(n_components=3, random_state = 1)\ndf_svd = svd.fit_transform(X_sc)","61e0b26c":"df_vis = pd.DataFrame(df_svd)\ndf_vis['y'] = y_v\n\nfig = plt.figure(figsize = (15, 8))\n\nax = fig.add_subplot(1, 2, 1, projection='3d')\nax.scatter3D(df_vis[0], df_vis[1], df_vis[2], c=df_vis['y'])\nax.view_init(10, 10)\n\nax = fig.add_subplot(1, 2, 2, projection='3d')\nax.scatter3D(df_vis[0], df_vis[1], df_vis[2], c=df_vis['y'])\nax.view_init(20, 35)\n\nplt.show()","2ad97c50":"nmf = NMF(n_components=2, random_state = 1)\ndf_nmf = nmf.fit_transform(X_sc)","39819db6":"df_vis = pd.DataFrame(df_nmf)\ndf_vis['y'] = y_v\n\nplt.figure(figsize = (12, 8))\nsns.scatterplot(data = df_vis, x = 0, y = 1, hue = 'y',  palette = 'magma')\nplt.show()","e943495e":"nmf = NMF(n_components=3, random_state = 1)\ndf_nmf = nmf.fit_transform(X_sc)","7432079c":"df_vis = pd.DataFrame(df_nmf)\ndf_vis['y'] = y_v\n\nfig = plt.figure(figsize = (15, 8))\n\nax = fig.add_subplot(1, 2, 1, projection='3d')\nax.scatter3D(df_vis[0], df_vis[1], df_vis[2], c=df_vis['y'])\nax.view_init(10, 10)\n\nax = fig.add_subplot(1, 2, 2, projection='3d')\nax.scatter3D(df_vis[0], df_vis[1], df_vis[2], c=df_vis['y'])\nax.view_init(20, 35)\n\nplt.show()","0987a677":"rbm = BernoulliRBM(n_components=2, random_state = 1)\ndf_rbm = rbm.fit_transform(X_sc)","874fa4b5":"df_vis = pd.DataFrame(df_rbm)\ndf_vis['y'] = y_v\n\nplt.figure(figsize = (12, 8))\nsns.scatterplot(data = df_vis, x = 0, y = 1, hue = 'y',  palette = 'magma')\nplt.show()","1ede2810":"tsne = TSNE(\n    n_components=2, \n    random_state = 1,\n    n_iter = 1000,\n    n_jobs = -1\n)\ndf_tsne = tsne.fit_transform(X_sc)","44c968c1":"df_vis = pd.DataFrame(df_tsne)\ndf_vis['y'] = y_v\n\nplt.figure(figsize = (12, 8))\nsns.scatterplot(data = df_vis, x = 0, y = 1, hue = 'y',  palette = 'magma')\nplt.show()","221891a7":"umap_m = umap.UMAP(\n    n_components=2, \n    random_state=1, \n    n_neighbors=5\n)\n\ndf_umap = umap_m.fit_transform(X_sc)","eba1cf6b":"df_vis = pd.DataFrame(df_umap)\ndf_vis['y'] = y_v\n\nplt.figure(figsize = (12, 8))\nsns.scatterplot(data = df_vis, x = 0, y = 1, hue = 'y',  palette = 'magma')\nplt.show()","1344cf21":"X_train, X_test, y_train, y_test = train_test_split(df.drop('Response', axis = 1), \n                                                    df['Response'], \n                                                    test_size=0.3,\n                                                   random_state = 101)","deef458b":"def eval_result(model, X_test, y_test):\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"ignore\")\n        pred = model.predict(X_test)\n        print(classification_report(y_test, pred, target_names = ['Not interested', 'Interested']))\n        display(pd.DataFrame(confusion_matrix(y_test, pred), \n                         columns = ['Predicted Not interested', 'Predicted Interested'],\n                         index = ['Not interested', 'Interested']))\n    \n        cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n        scores = cross_val_score(model, X_test, y_test, scoring='roc_auc', cv=cv, n_jobs=-1)\n        print('Mean ROC AUC: %.3f' % np.mean(scores))\n        \n        if hasattr(model, 'feature_importances_'):\n            features = pd.DataFrame({\n                'Variable'  :X_train.columns,\n                'Importance':model.feature_importances_\n            })\n            features.sort_values('Importance', ascending=False, inplace=True)\n            display(features.head(20))","be0a085d":"lgmodel = LogisticRegression(\n    solver='lbfgs', \n    class_weight={0:1.0, 1:2.3},\n    n_jobs = -1,\n    random_state = 101\n)\nlgmodel.fit(X_train, y_train)\neval_result(lgmodel, X_test, y_test)","cf46176e":"dtc = DecisionTreeClassifier(random_state = 101)\ndtc.fit(X_train, y_train)\neval_result(dtc, X_test, y_test)","cb9da916":"rfc = RandomForestClassifier(random_state = 101, n_jobs = -1)\nrfc.fit(X_train, y_train)\neval_result(rfc, X_test, y_test)","c9933353":"xgbr = XGBClassifier(\n    random_state = 1,\n    n_jobs = -1,\n    scale_pos_weight = 2,\n    eval_metric = 'logloss'\n)\nxgbr.fit(X_train, y_train)\neval_result(xgbr, X_test, y_test)","c0f05013":"model = xgbr","0bcb38bb":"df_test = processing(test)\ndf_test","ad589906":"predictions = model.predict(df_test) \npredictions","699767d0":"answer = pd.DataFrame(data = {'id': test['id'], 'Response':predictions})\nanswer.to_csv('insurance sumb.csv', index=False)\nanswer","1af9e861":"answer['Response'].value_counts()","349ef973":"### PCA","ba964476":"### Restricted Boltzmann Machine","0f3eb337":"| Column        | Meaning  | \n| ------------- |:-------------:|\n|   id                   |   Unique ID for the customer   |\n|   Gender               |   Gender of the customer   |\n|   Age                  |   Age of the customer   |\n|   Driving_License      |   0 : Customer does not have DL, 1 : Customer already has DL   |\n|   Region_Code          |   Unique code for the region of the customer   |\n|   Previously_Insured   |  1 : Customer already has Vehicle Insurance, 0 : Customer doesn't have Vehicle Insurance   |\n|   Vehicle_Age          |   Age of the Vehicle   |\n|   Vehicle_Damage       |   1 : Customer got his\/her vehicle damaged in the past. 0 : Customer didn't get his\/her vehicle damaged in the past.   |\n|   Annual_Premium       |   The amount customer needs to pay as premium in the year   |\n|   PolicySalesChannel   |  Anonymized Code for the channel of outreaching to the customer ie. Different Agents, Over Mail, Over Phone, In Person, etc.   |\n|   Vintage              |   Number of Days, Customer has been associated with the company   |\n|   Response             |   1 : Customer is interested, 0 : Customer is not interested   |","49b6b1a9":"### Scaling","294c5019":"2 components:","cf73858a":"2 components:","863b77b4":"\n# EDA","68f40391":"But middle-age client are more interested ","9c0a2113":"# Commit","4db19d9d":"Looks like in this company portfolio a lot of young clients","ce7e4537":"### t-distributed Stochastic Neighbor Embedding","edcc2e64":"3 components:","1d98d3dc":"\n# Modeling","5e7246e6":"3 components:","787bc7ef":"3 components:","97136fcc":"# Dimensionality reduction","2721d1f0":"# Split","1e737a38":"We can see that most part of used dimensionality reduction methods give us zones with high rate of interested clients","a8e3fa70":"### Singular Value Decomposition","6d98fd7a":"2 components:","0fdefebe":"### Non-Negative Matrix Factorization (NMF)","525fd4a7":"# Data preparation","1a697119":"### UMAP (Uniform Manifold Approximation and Projection)"}}