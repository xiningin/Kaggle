{"cell_type":{"8b2a7dab":"code","50eca82b":"code","a31e4483":"code","8f6d7527":"code","4c9c8e7e":"code","3c0bddc0":"code","aeb80acf":"code","219acfb8":"code","669bf132":"code","1e5fa829":"code","df091006":"code","f30f8a25":"code","26fcf75f":"code","de9d98d6":"code","26e3afbc":"code","5fa7fa5d":"code","09ec3204":"code","25b085e0":"code","fa81ec63":"code","2d4b8445":"code","7252071a":"code","858b8bb5":"code","b5d059ab":"code","ce1886c3":"code","5cef0d31":"code","3d737ff6":"code","e98bbac7":"code","fc6cc9a8":"code","779526ff":"code","011acaf5":"code","d4bf936d":"code","45e62f48":"code","f828a80d":"code","d97c2db5":"code","be95bfbd":"code","974394da":"code","ba36759f":"code","cae70344":"code","4f8fbffd":"code","6eb09bf7":"code","2c6e6b24":"code","96f40d37":"code","14170f71":"code","efb9e4b8":"code","d52df515":"code","80e2e6c0":"code","cc950efd":"code","8842605a":"code","a4d1a118":"code","81f96216":"code","83a52748":"code","3d101f88":"code","1f5db37b":"code","c2a9b0e7":"code","b7600b07":"code","46afadab":"code","57d8ca60":"code","2d5a3f52":"code","631222c9":"code","232fbc6f":"code","000586e5":"code","07ebcfca":"code","a21861da":"code","a2b08be2":"code","95d0f09a":"code","7db56897":"code","3066910f":"code","01dfb194":"code","af52c32e":"code","08efce6d":"code","4a4ae39a":"code","14f7ad7e":"code","c87de6b4":"code","49041eca":"code","6e6fac03":"code","e0337cbf":"code","1a4514d1":"code","1f863a13":"code","daca2b37":"code","dd4a530e":"code","b61b7748":"code","20ad3d65":"code","800a1615":"code","6092d758":"code","6be005e8":"code","82e5e934":"code","e3c510e1":"code","436ca7f6":"code","ff12a3ec":"code","b116159d":"code","e7dac5e9":"code","c8e5d413":"code","58952a9a":"code","77318a17":"code","9ff21897":"code","9ba8e169":"code","25cb54b2":"code","361fa82d":"code","61663db2":"code","139ef800":"code","f07323b3":"code","11ef6a51":"code","d4bc3bca":"code","7fdcd080":"code","1c926b9a":"code","9cc3587f":"code","088c6cec":"code","f4ecfa4a":"code","003ad24a":"code","5aed5020":"code","cc612d1d":"code","ec8fe4d2":"code","5f5e2471":"code","820d590e":"code","4eee0086":"code","a162f5fa":"code","8255d39e":"code","0c6281bf":"code","16d0004b":"code","e4e33ba9":"code","4c4c2f90":"code","d41a28da":"code","ea26d3b8":"code","778d565e":"markdown","ac101b3f":"markdown","abfbeb67":"markdown","79c94c0c":"markdown","a96d79e4":"markdown","91728337":"markdown","0c7322e6":"markdown","80277ceb":"markdown","c8ff81f7":"markdown","3ca56c55":"markdown","9c092174":"markdown","34f6192d":"markdown","9ad70032":"markdown","ef75fc32":"markdown","b43101b1":"markdown","4f6affd6":"markdown","31eb4b99":"markdown","2ff93858":"markdown","72e7d2d3":"markdown","c259246c":"markdown","e6707b3f":"markdown","c78292e9":"markdown","d9d39195":"markdown","5fa4d3b4":"markdown","90027da0":"markdown","8183e6dd":"markdown","18bb27b0":"markdown","4d007fce":"markdown","7606e488":"markdown","a1eb0e70":"markdown","17e514ce":"markdown","f48224d4":"markdown","9eaf0516":"markdown","9269af8a":"markdown","d42c227f":"markdown","f7b6433e":"markdown","20d73e39":"markdown","bf8ee1ec":"markdown","e7b5a3e6":"markdown","079e5167":"markdown","e5e393b2":"markdown","06bb8803":"markdown","71063e1d":"markdown","4951ce9b":"markdown","22ed87c8":"markdown"},"source":{"8b2a7dab":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n#supress warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import train_test_split\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","50eca82b":"df_full = pd.read_csv('\/kaggle\/input\/google-playstore-apps\/Google-Playstore-Full.csv')\ndf_full.head()","a31e4483":"df_full.columns","8f6d7527":"print(df_full.shape)\ndf_full.isna().sum()","4c9c8e7e":"# column Unnamed: 11 \n\nun11 = df_full['Unnamed: 11'][df_full['Unnamed: 11'].notna()]\nprint(f'No.of records in Unnamed: 11 ->  {len(un11)} \\n')\nprint(f'% of data present -> {(len(un11) \/ len(df_full) * 100)}\\n')\nprint(un11.head(3))\nprint('\\n')\ndf_full[df_full['Unnamed: 11'].notna()].head(3)","3c0bddc0":"# column Unnamed: 12\n\nun12 = df_full['Unnamed: 12'][df_full['Unnamed: 12'].notna()]\nprint(f'No.of records in Unnamed: 12 ->  {len(un12)} \\n')\nprint(f'% of data present -> {(len(un12) \/ len(df_full) * 100)}\\n')\nprint(un12)","aeb80acf":"# column Unnamed: 13\n\nun13 = df_full['Unnamed: 13'][df_full['Unnamed: 13'].notna()]\nprint(f'No.of records in Unnamed: 13 ->  {len(un13)} \\n')\nprint(f'% of data present -> {(len(un13) \/ len(df_full) * 100)}\\n')\nprint(un13)","219acfb8":"# column Unnamed: 14\n\nun14 = df_full['Unnamed: 14'][df_full['Unnamed: 14'].notna()]\nprint(f'No.of records in Unnamed: 14 ->  {len(un14)} \\n')\nprint(f'% of data present -> {(len(un14) \/ len(df_full) * 100)}\\n')\nprint(un14)","669bf132":"un_11 = df_full[df_full['Unnamed: 11'].notna()].index\nun_12 = df_full[df_full['Unnamed: 12'].notna()].index\nun_13 = df_full[df_full['Unnamed: 13'].notna()].index\nun_14 = df_full[df_full['Unnamed: 14'].notna()].index\n\n#pass them into set to remove duplicates\nun_index = set(list(un_11) + list(un_12) + list(un_13) + list(un_14))","1e5fa829":"# delete undefined columns and NA's\nprint(f'Before Delete : {df_full.shape}')\ndf_full.drop(un_index,inplace=True)\ndf_full.drop(columns=['Unnamed: 11','Unnamed: 12','Unnamed: 13','Unnamed: 14'],axis=1,inplace=True)\nprint(f'After Delete : {df_full.shape}')","df091006":"df_full.head()","f30f8a25":"df_full.info()","26fcf75f":"df_full.describe()","de9d98d6":"df_full.isna().sum()","26e3afbc":"# df_full.columns = df_full.columns.str.replace(' ', '_')","5fa7fa5d":"df_full[df_full['App Name'].isna()]","09ec3204":"df_full.dropna(axis=0,subset=['App Name'],inplace=True)","25b085e0":"df_full['App Name'].value_counts().head(25)","fa81ec63":"df_full[df_full['App Name'].isin(['????'])].head()","2d4b8445":"wrong_df = df_full[df_full['App Name'].str.contains('?',regex = False)]\nwrong_df","7252071a":"print(f'Total {len(wrong_df)} records i.e. ({round((len(wrong_df)\/len(df_full))*100,2)}%) contains \"?\" in them')\n# wrong_df[wrong_df.iloc[:,1:].duplicated(keep=False )]","858b8bb5":"# dropping App Name columns\n# df_full.drop(columns=['App Name'],inplace=True)","b5d059ab":"# ques_index = df_full[df_full['App Name'].str.contains('?',regex = False)].index\n# df_full.drop(index=ques_index,inplace=True)","ce1886c3":"# df_full.head(15)","5cef0d31":"# checking for duplicates\ndf_full[df_full.duplicated(subset='App Name')].sort_values(by=['App Name'])","3d737ff6":"# Lets check with some apps instead of all at once\ndf_full[df_full['App Name'].isin(['#NAME?'])].sort_values(by='App Name')","e98bbac7":"df_full[df_full['App Name'].isin(['??'])].sort_values(by='App Name').head()","fc6cc9a8":"# df_full[df_full.duplicated()]\n# checking for duplicates\ndupli = df_full[df_full.duplicated()].sort_values(by=['Category','Rating','Last Updated'])\nprint(len(dupli))\ndupli","779526ff":"#drop duplicates\ndf_full.drop_duplicates(inplace=True)","011acaf5":"# checking for duplicates\ndf_full[df_full.duplicated()].sort_values(by=['Category','Rating','Last Updated'])","d4bf936d":"df_full.shape","45e62f48":"df_full.Category.unique()","f828a80d":"df_full.Category.value_counts()","d97c2db5":"df_full.Category.value_counts(normalize=True)[:10]","be95bfbd":"plt.figure(figsize=(12,5))\np = sns.set(style=\"darkgrid\")\np = sns.countplot(x='Category',data=df_full)\n_ = plt.setp(p.get_xticklabels(), rotation=90)  # Rotate labels\nplt.title('App Category',size = 20);","974394da":"df_full.Rating.unique()","ba36759f":"df_full.isna().sum()","cae70344":"df_full.Rating.value_counts()","4f8fbffd":"df_full.info()","6eb09bf7":"# Since its a numerical columns, lets convert it to float\ndf_full.Rating = pd.to_numeric(df_full.Rating,errors='coerce')","2c6e6b24":"df_full.Rating.isna().sum()","96f40d37":"df_full.Rating.describe()","14170f71":"df_full.sort_values(by=['Rating'],ascending=False).head()","efb9e4b8":"# Review distibution \ng = sns.kdeplot(df_full.Rating,shade=True,color='blue')\ng.set_xlabel(\"Rating\")\ng.set_ylabel(\"Frequency\")\nplt.title('Distribution of Rating',size = 20);","d52df515":"df_full.info()","80e2e6c0":"# df_full[(df_full.Reviews.astype('str').str.isnumeric())]\n\n# Since its a numerical columns, lets convert it to float\ndf_full.Reviews = pd.to_numeric(df_full.Reviews,errors='coerce',downcast='integer')","cc950efd":"df_full.Reviews.head()","8842605a":"df_full.Reviews.isna().sum()","a4d1a118":"df_full.Reviews.describe()","81f96216":"df_full.sort_values(by='Reviews',ascending=False).head()","83a52748":"# Review distibution \ng = sns.kdeplot(df_full.Reviews,shade=True,color='blue')\ng.set_xlabel(\"Reviews\")\ng.set_ylabel(\"Frequency\")\nplt.title('Distribution of Review',size = 20);","3d101f88":"# df_full.info()","1f5db37b":"df_full.Installs.value_counts(dropna=False)","c2a9b0e7":"# remove \",\" and \"+\"\ndf_full.Installs = df_full.Installs.str.replace(',','').str.replace('+','')","b7600b07":"df_full.Installs.value_counts(dropna=False)","46afadab":"# convert to numerical \ndf_full.Installs = pd.to_numeric(df_full.Installs,errors='coerce')","57d8ca60":"# TODO\n\n# pandas replace can replace list - list\n# df_full['Install_cat'] = df_full.Installs.replace(sorted(df_full.Installs.unique()),range(0,len(sorted(df_full.Installs.unique())),1))","2d5a3f52":"df_full.info()","631222c9":"df_full.sort_values(by='Installs',ascending=False).head()","232fbc6f":"# Review distibution \ng = sns.kdeplot(df_full.Installs,shade=True,color='blue')\ng.set_xlabel(\"Installs\")\ng.set_ylabel(\"Frequency\")\nplt.title('Distribution of Installs',size = 20);","000586e5":"pd.set_option('display.max_rows', 2000)","07ebcfca":"df_full.Size.value_counts()[:15]","a21861da":"df_full.Size[~(df_full.Size.str.contains('M') | df_full.Size.str.contains('k'))]","a2b08be2":"# (11726 \/ len(df_full))*100","95d0f09a":"df_full.Size[(df_full.Size.str.contains(','))].head()","7db56897":"# df_full.Size.unique()","3066910f":"kb_index = df_full.Size[df_full.Size.str.contains('k')].index\nmb_index = df_full.Size[(df_full.Size.str.contains('M'))].index\nprint(f\"No.of App's in KB's : {len(kb_index)} ({round((len(kb_index)\/len(df_full))*100,2)}%)\")\nprint(f\"No.of App's in MB's : {len(mb_index)} ({round((len(mb_index)\/len(df_full))*100,2)}%)\")","01dfb194":"df_full.Size = df_full.Size.str.replace('M','')\ndf_full.Size = df_full.Size.str.replace('k','')\ndf_full.Size = df_full.Size.str.replace(',','')","af52c32e":"df_full.Size.value_counts()[:5]\n# tail charachter has removed","08efce6d":"df_full.Size[(df_full.Size.str.contains(','))].head()\n# comma has removed","4a4ae39a":"# to_numeric() converts to float(default) and non-numeric values will be replaced with NAN \ndf_full.Size = pd.to_numeric(df_full.Size,errors='coerce')","14f7ad7e":"df_full.Size.head()","c87de6b4":"df_full.Size.value_counts(dropna=False).head()\n# df_full.Size.isna().sum()","49041eca":"#holding NA's in a separate DataFrame\ndf_full_NA = df_full.copy()","6e6fac03":"# converting the size MB to KB (1 MB = 1000 KB)\ndf_full.Size.loc[mb_index] = df_full.Size.loc[mb_index] * 1000\ndf_full.Size.head()","e0337cbf":"# Drop NA's w.r.t Size column\ndf_full.dropna(subset=['Size'],inplace=True)","1a4514d1":"df_full.Size.describe()","1f863a13":"df_full.Size.head()","daca2b37":"df_full.Size.isna().sum()","dd4a530e":"# review the shape after removing of NA's\ndf_full.shape","b61b7748":"df_full.sort_values(by='Size',ascending=False).head(2)","20ad3d65":"# Size distibution \ng = sns.kdeplot(df_full.Size,shade=True,color='blue')\ng.set_xlabel(\"Size\")\ng.set_ylabel(\"Frequency\")\nplt.title('Distribution of Size',size = 20);","800a1615":"df_full.Price.value_counts().head()","6092d758":"df_full.Price = df_full.Price.str.replace('$','')","6be005e8":"df_full.Price = pd.to_numeric(df_full.Price,errors='coerce')","82e5e934":"df_full.Price.value_counts().head()","e3c510e1":"df_full.info()","436ca7f6":"df_full.Price.describe()","ff12a3ec":"# df_full.sort_values(by='Price',ascending=False).head(5)\ndf_full[df_full.Price == 399.99]","b116159d":"# df_full[df_full.Price.astype('str').str.contains('scott')]","e7dac5e9":"# Price distibution \ng = sns.kdeplot(df_full.Price,shade=True,color='blue', bw=1.5)\ng.set_xlabel(\"Price\")\ng.set_ylabel(\"Frequency\")\nplt.title('Distribution of Price',size = 20);","c8e5d413":"df_full['Content Rating'].value_counts()","58952a9a":"# 231211\/len(df_full)","77318a17":"# removing numericals and + operator\ndf_full['Content Rating'] = df_full['Content Rating'].str.split(n=1,expand=True)[0]","9ff21897":"df_full['Content Rating'].unique()","9ba8e169":"df_full[df_full['Content Rating'] == 'Unrated'].head()","25cb54b2":"df_full[df_full['Content Rating'] == 'Adults'].head()","361fa82d":"df_full.info()","61663db2":"df_full.drop(columns=['App Name','Last Updated','Minimum Version','Latest Version'],inplace=True)","139ef800":"df_full.head()","f07323b3":"df_full[df_full.duplicated()]","11ef6a51":"df_full.drop_duplicates(inplace=True)","d4bc3bca":"# df_full.Category.value_counts()","7fdcd080":"# method : 1 (One-Hot)\ndf_full_dummy = pd.get_dummies(df_full,columns=['Category','Content Rating'],drop_first=True)\n# df_full_dummy = pd.get_dummies(df_full,columns=['Category'],drop_first=True)","1c926b9a":"df_full_dummy.head()","9cc3587f":"X_dummy = df_full_dummy.drop(columns=['Rating'],axis=1)\ny_dummy = df_full_dummy.loc[:,'Rating']\nX_dummy.shape, y_dummy.shape","088c6cec":"X_dummy.head(2)","f4ecfa4a":"y_dummy.head(2)","003ad24a":"x_train,x_test,y_train,y_test = train_test_split(X_dummy,y_dummy,test_size=0.3,random_state = 14)","5aed5020":"x_test.head()","cc612d1d":"# df_full.head()","ec8fe4d2":"# method : 2 (CatBoostEncoder)\nimport category_encoders as ce\n\ndf_full_cat = df_full.copy()\n\ncbe = ce.CatBoostEncoder(cols=['Category','Content Rating'])\ndf_full_cat.loc[:,['Category','Content Rating']] = cbe.fit_transform(df_full_cat.loc[:,['Category','Content Rating']],df_full_cat['Rating'])\n\n# cbe = ce.CatBoostEncoder(cols=['Category'])\n# df_full_cat.loc[:,['Category']] = cbe.fit_transform(df_full_cat.loc[:,['Category']],df_full_cat['Rating'])","5f5e2471":"df_full_cat.head()","820d590e":"X_cat = df_full_cat.drop(columns = ['Rating'],axis=1)\ny_cat = df_full_cat.loc[:,'Rating']\nX_cat.shape , y_cat.shape","4eee0086":"X_train,X_test,Y_train,Y_test = train_test_split(X_cat,y_cat,test_size=0.3,random_state = 14)","a162f5fa":"# Model traing and predicting\ndef dummy_model_building(model):\n    from sklearn.metrics import mean_squared_error\n    model.fit(x_train,y_train)\n    print('trained')\n    train_score = model.score(x_train , y_train)\n    test_score = model.score(x_test , y_test)\n    predict = model.predict(x_test)\n\n    print('Train Score on Dummy : {}'.format(train_score))\n    print('Test Score on Dummy : {}'.format(test_score))\n    print(f'MSE : {mean_squared_error(y_test, predict)}')\n#     print(classification_report(y_test, predict))\n\n    print('\\n \\n')\n\n    try:\n        features = X_dummy.columns[:10]\n        importances = model.feature_importances_[:10]\n        indices = np.argsort(importances)\n\n        plt.title('Feature Importances')\n        plt.barh(range(len(indices)), importances[indices], color='b', align='center')\n        plt.yticks(range(len(indices)), [features[i] for i in indices])\n        plt.xlabel('Relative Importance')\n        plt.show()\n    except :\n        print('This model does not support Feature Selection')\n\n# cat score function\ndef cat_model_building(model):\n    from sklearn.metrics import mean_squared_error\n    model.fit(X_train,Y_train)\n    train_score_ = model.score(X_train , Y_train)\n    test_score_ = model.score(X_test , Y_test)\n    predict_ = model.predict(X_test)\n\n    print('Train Score on Cat_encode : {}'.format(train_score_))\n    print('Test Score on Cat_encode : {}'.format(test_score_))\n#     print(confusion_matrix(Y_test, predict_))\n    print(f'MSE : {mean_squared_error(Y_test, predict_)}')\n#     print(classification_report(Y_test, predict_))\n\n    print('\\n \\n')\n\n    try:\n        features = X_cat.columns\n        importances = model.feature_importances_\n        indices = np.argsort(importances)\n\n        plt.title('Feature Importances')\n        plt.barh(range(len(indices)), importances[indices], color='b', align='center')\n        plt.yticks(range(len(indices)), [features[i] for i in indices])\n        plt.xlabel('Relative Importance')\n        plt.show()\n    except :\n        print('This model does not support Feature Selection')","8255d39e":"# DecisionTreeRegressor\nfrom sklearn.tree import DecisionTreeRegressor\ndt = DecisionTreeRegressor()\ndummy_model_building(dt)\nprint('\\n')\ncat_model_building(dt)","0c6281bf":"# LinearRegression\nfrom sklearn.linear_model import LinearRegression\nle = LinearRegression()\ndummy_model_building(le)\nprint('\\n')\ncat_model_building(le)","16d0004b":"# RandomForestRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()\ndummy_model_building(rf)\nprint('\\n')\ncat_model_building(rf)","e4e33ba9":"# Bagging Classifier\nfrom sklearn.ensemble import BaggingRegressor\n\nbc = BaggingRegressor()\ndummy_model_building(bc)\nprint('\\n')\ncat_model_building(bc)","4c4c2f90":"# Gradient Boosting\nfrom sklearn.ensemble import GradientBoostingRegressor\n\ngc = GradientBoostingRegressor()\ndummy_model_building(gc)\nprint('\\n')\ncat_model_building(gc)","d41a28da":"# AdaBoosting\nfrom sklearn.ensemble import AdaBoostRegressor\n\nac = AdaBoostRegressor()\ndummy_model_building(ac)\nprint('\\n')\ncat_model_building(ac)","ea26d3b8":"# Stacking\nfrom sklearn.ensemble import StackingRegressor\nestimators = [('decisiontree', dt), ('randomforest', rf), ('bagging', bc), ('gradientboost', gc), ('Ada Boost', ac)]\nsc = StackingRegressor(estimators)\ndummy_model_building(sc)\nprint('\\n')\ncat_model_building(sc)","778d565e":"1. Size of the apps are in either KB's or MB's. Lets convert all apps in KB's (Kilo Bytes).\n2. Almost 4% of the apps size is depends on the handset.\n3. \",\" is present in for values.","ac101b3f":"## **Content Rating**","abfbeb67":"# Analysing 4 undefined columns","79c94c0c":"Some apps does not have a name (i.e ?'s in App Name) , I am not gonna remove those records since only app name is missing but rest of information is still present and it's  valid informationand, this coulmn is not a good predictor.We can drop it.","a96d79e4":"From the above observatios, it's very clear the values in the undefined columns are swifted from the original columns.<br>\nSince the values are very very few (max % is 0.006), we can either delete entire rows or can place the values where they supposed to be.\nIn this case, placing them properly is little tricky, i choose to delete them since deleting them does not the model performance.","91728337":"There are total 15 duplicated records, We should be very careful with them coz they may lead to **Data Leakage**.","0c7322e6":"Most of the apps (90%) are made for everyone to use.","80277ceb":"Most of the apps (93%) have below 10lac installations","c8ff81f7":"Seems most of the apps are free to use, and max price of an app is $400","3ca56c55":"No NA's in Rating Column.","9c092174":"Above 5 apps are high priced in the Play-Store. These Apps are less popular as they have low reviews and installs.","34f6192d":"The values are shifted to another columns, for example\nIndex no:6941,<br> \nRating            ->   Size <br>\nInstalls          ->   Content Rating <br>\nSize              ->   Last Updated <br>\nLast Updated      ->   Unnamed: 11 <br>\nMinimum Version   ->   Unnamed: 12 <br>\nLatest Version    ->   Unnamed: 13 etc.\n\n","9ad70032":"It tells same thing what i commented above.","ef75fc32":"## **Category**","b43101b1":"As i already mentioned the 2 gaming apps have over 330MB of size, which we can see grapically the long right tail at around 340MB. ","4f6affd6":"We see Whatsapp, Facebook, Instagram, messenger and Clash of clans have highest reviews. All these apps are freely available and their category is  social, communication and Game.","31eb4b99":"It's very clear now that duplicated count we saw was false, most of these records does not have app names, deleting them blindly cause lose of information. ","2ff93858":"## **Installs**","72e7d2d3":"## **Encoding Categoricals**\n1. One-Hot\n2. CatBoostEncoder","c259246c":"All TOP 5 installed Apps are Google Products like Google Search, Google Maps, You Tube, Google Play Movies & TV and Googel Photos.","e6707b3f":"There are 22643 (8.5%) Apps seems duplicated, let's confirm if all of them are really duplicated.","c78292e9":"$ is a special charachters in Price column that we should remove.","d9d39195":"The Size of ***Jurassic World Alive*** and ***Agent A: A puzzle in disguise*** apps is over 330MB , and both are GAMING apps.(seems gaming apps are bigger in size)","5fa4d3b4":"There are some special characters to remove like  **,**  and  **+**","90027da0":"1. No NA's present. \n2. Reviews supposed to be an integer, but its an object, lets understand it.","8183e6dd":"1. Almost 13% of the apps in play store are related to Education.\n2. Top 3 Categories in the play store are EDUCATION, TOOLS and BOOKS_AND_REFERENCE.","18bb27b0":"## **Price**","4d007fce":"The rating is on a scale on 1-5, with 1 being minimum and 5 being maximum. The mean rating is 4.27 and the median rating is 4.4, i.e average rating is above 4.4","7606e488":"'Varies with device' is replaced with NA's. We can either delete them or impute them with some advanced techniques like KNNImputer or impyute. In this case, I'll check the accuracy with and without remove them.","a1eb0e70":"All NA's in Size column dropped.","17e514ce":"There are few values in those 4 columns, lets view them","f48224d4":"Only one records has NA.","9eaf0516":"## **Reviews**","9269af8a":"All the modesls failed to learn the patterns, i mean the data itself seems do not have patterns. This could be coz of weak featues. May be adding more features will help to improve the model accuracy.","d42c227f":"Seems excel has created 4 empty columns,lets confirm if they are really empty","f7b6433e":"## **Rating**","20d73e39":"Top rating given in the Play-store is 5.","bf8ee1ec":"No suspicious values in Category columns, everythong looks fine. ","e7b5a3e6":"App Name : Seems of missing(????) values, and duplicate records ( > 20k (count - unique)) <br>\nCategory : most of the apps are EDUCATION realted.<br>\nRating   : Highest rating given to apps is 5 <br>\nReviews  : top review given to apps is 1, this might be either the apps are new or failed to reach\/satify users<br>\nSize : some apps,the size varies with device.<br>\nPrice : ~96% of the apps are free to use <br>\nContent Rating : 90% of the apps are made to use everyone.\n\n","079e5167":"Some of the Apps are rated 5,they are not popular as they have very less reviews.","e5e393b2":"1. MIN size of an App is 3KB and MAX is 347MB, AVG size of an app is ~16MB.","06bb8803":"## **Size**","71063e1d":"## **Data Preparation**","4951ce9b":"First glance at head() tells us some of the fetures are numerical (Rating,Reviews,Installs and price) but may be presence of some text in them turned to object type,which was shown in info().","22ed87c8":"## **App Name**"}}