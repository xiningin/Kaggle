{"cell_type":{"14e49ec7":"code","9bada4ac":"code","84e24a91":"code","ed6152f2":"code","7ece35f8":"code","0193d70a":"code","2f8c899f":"code","f3b237b8":"code","d23a73bd":"code","6298849a":"code","3239660a":"markdown","7bf46c83":"markdown","bfb12497":"markdown","695959cf":"markdown","af58ccd5":"markdown","8f2d1fa1":"markdown","75f3076b":"markdown"},"source":{"14e49ec7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import cross_val_score, KFold\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import SVC\n\nimport warnings","9bada4ac":"PATH_DATA = '..\/input\/titanic\/'\nwarnings.filterwarnings('ignore')","84e24a91":"df = (pd.read_csv(f'{PATH_DATA}train.csv'\n                  , sep = ','\n                  , header = 0)\n      .sample(frac = 1, random_state = 0))\n\ndf.head()","ed6152f2":"def Actualizar_df(df):\n    df['Title'] = df.Name.str.extract('([A-Za-z]+)\\.', expand = False)\n    \n    a = df.Title.value_counts().reset_index().transpose().to_numpy()\n    df.Title = df.Title.map(lambda x: x if x in a[0][a[1] > 10].tolist() else 'Others')\n    \n    df['Familia'] = df['SibSp'] + df['Parch'] + 1\n    df.Familia = df.Familia.map(lambda x: 'Singel' if x == 1 else ('Parejas' if x == 2 else ('Famila Numerosa' if x >= 5 else 'Hasta 2 hijos')))\n\n    medias = df.groupby(['Title'], as_index = True).mean()['Age'].sort_values(ascending = True).to_dict()\n    \n    df.fillna({'Age': df.Title.map(medias)\n               , 'Embarked': df.Embarked.value_counts().index.tolist()[0]}, inplace = True)\n    \n    return df\n\ndf = Actualizar_df(df)\n\ndf.head()","7ece35f8":"def plot(df, col):\n    df_temp = df.groupby([col], as_index = True).mean()['Survived'].sort_values(ascending = True)\n    \n    Grafico = df_temp.plot(kind = 'barh'\n                       , width = 0.5\n                       , color = plt.get_cmap('Blues')(np.linspace(start = 0.15\n                                           , stop = 0.85\n                                           , num = len(df_temp)))\n                       , stacked = True\n                       , legend = False\n                       , fontsize = 10)\n    \n    Grafico.set_xlim([0, 0.85])\n    Grafico.set_ylabel('')\n    Grafico.grid(axis = 'x',alpha = 0.25)\n    Grafico.set_xticklabels(['{:3.0f} %'.format(x * 100) for x in Grafico.get_xticks()])\n    [spine.set_visible(False) for spine in Grafico.spines.values()]\n    Grafico.spines['left'].set_visible(True)\n\n    plt.tick_params(left = False, bottom = False)\n    plt.title(col)\n    df_temp = None \n    \n    \ndf['Edad'] = df.Age.map(lambda x: 'Ni\u00f1os' if x <= 15 else ('Adultos' if x <= 65 else 'Ancianos'))\ndf['Precio'] = df.Fare.map(lambda x: '< 40 $' if x <= 40 else ('< 80 $' if x <= 80 else '> 100 $'))\n\ncolumnsList = ['Pclass', 'Sex', 'Familia', 'Embarked','Edad', 'Precio', 'Title']\n\nGrafico = plt.figure(figsize =(5, 16)) \nGrafico.patch.set_facecolor('white')\n\nplt.subplots_adjust(hspace = .7)\n\nfor i in range(1,len(columnsList) + 1):    \n    plt.subplot(len(columnsList), 1, i)\n    plot(df, columnsList[i -1])\n\nplt.show()\nplt.close()","0193d70a":"df = df.drop(['PassengerId'\n              , 'Name'\n              , 'Cabin'\n              , 'SibSp'\n              , 'Parch'\n              , 'Edad'\n              , 'Precio'\n              , 'Familia']\n             , axis = 'columns')\n\ndf.head()","2f8c899f":"X = df.iloc[:, 1:]\ny = df['Survived']\n\nText = Pipeline(\n    steps = [\n        ('imputer', SimpleImputer(strategy = 'constant', fill_value = 'missing')), \n        ('onehot' , OneHotEncoder(handle_unknown = 'ignore'))])\n\nPipe = ColumnTransformer(\n    transformers = [\n        ('cat', Text, X.select_dtypes(include = ['object']).columns)])\n\nClassifier = SVC(kernel = 'linear'\n                 , gamma = 'scale'\n                 , random_state = 0)\n\nModelo = Pipeline(steps = [('Prepo', Pipe)\n                           , ('Clf', Classifier)])\nModelo.fit(X, y)","f3b237b8":"kf = KFold(n_splits = 10)\n\ncross_val_score(Modelo, X, y, cv = kf, scoring = 'accuracy').mean()","d23a73bd":"df = (pd.read_csv(f'{PATH_DATA}test.csv'\n                  , sep = ','\n                  , header = 0))\n\ndf = Actualizar_df(df)","6298849a":"df['Survived'] = Modelo.predict(df[X.columns.tolist()])\ndf[['PassengerId','Survived']].to_csv('submission.csv', index=False)    ","3239660a":"## Make Pipeline\n* `SimpleImputer` to impute numericals features.\n* `OneHotEncoder` to make dummies in categorical features.\n* `ColumnTransformer` to run previus two steps.","7bf46c83":"## EDA.","bfb12497":"## Make submission","695959cf":"**Preprocesing**\n\n* Obtenemos extraemos el t\u00edtulo del nombre y calculamos las medias de edad para cada t\u00edtulo.\n* Imputamos valores faltantes en base a la media y el puerto de embarque mayoritario.","af58ccd5":"**Import the Libraries**","8f2d1fa1":"**Import df**","75f3076b":"Titanic competition is a very good way to introduce feature engineering and classification models. I'm gonna explore the data and make something with them and also imput missing values. Feature engineering is an important part of machine learning process so I want to spend more time for this part. "}}