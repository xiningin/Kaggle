{"cell_type":{"94f1d453":"code","12cc7dbd":"code","6dc58e2d":"code","27aa5868":"code","3280863f":"code","018fae43":"code","ed0b7813":"code","89b5dd23":"code","01309475":"code","29e9cfe4":"code","27e16c49":"code","f21251d1":"code","0eb118d0":"code","41e655b3":"code","3a165c25":"code","6efb4df5":"code","e24dd4f6":"code","cc7a7078":"code","b989f4cd":"code","174cb7e3":"code","3dbc6be9":"code","78716ce8":"code","2ad6cb8f":"code","aae74777":"code","3455e458":"markdown"},"source":{"94f1d453":"import xgboost as xgb\nimport numpy as np\nimport pandas as pd\nimport random\nimport optuna\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error","12cc7dbd":"train = pd.read_csv(\"..\/input\/tabular-playground-series-feb-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-feb-2021\/test.csv\")","6dc58e2d":"train.head()","27aa5868":"train.info()","3280863f":"from sklearn.preprocessing import LabelEncoder\ndf=train\nfor c in df.columns:\n    if df[c].dtype=='object': \n        lbl = LabelEncoder()\n        df[c]=df[c].fillna('N')\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)\ntrain=df","018fae43":"df=test\nfor c in df.columns:\n    if df[c].dtype=='object': \n        lbl = LabelEncoder()\n        df[c]=df[c].fillna('N')\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)\ntest=df","ed0b7813":"train[0:5]","89b5dd23":"test[0:5]","01309475":"target = train['target']\ndata = train.drop(['target','id'],axis=1)","29e9cfe4":"columns=data.columns.to_list()\nprint(columns)","27e16c49":"def objective(trial,data=data,target=target):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param = {\n        'objective': trial.suggest_categorical('objective',['reg:tweedie']), \n        'tree_method': trial.suggest_categorical('tree_method',['hist']),  # 'gpu_hist','hist'\n        'lambda': trial.suggest_loguniform('lambda',1e-3,10.0),\n        'alpha': trial.suggest_loguniform('alpha',1e-3,10.0),\n        'colsample_bytree': trial.suggest_categorical('colsample_bytree', [0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]),\n        'subsample': trial.suggest_categorical('subsample', [0.4,0.5,0.6,0.7,0.8,1.0]),\n        'learning_rate': trial.suggest_categorical('learning_rate', [0.008,0.01,0.012,0.014,0.016,0.018,0.02]),\n        'n_estimators': trial.suggest_categorical('n_estimators', [1000,2000,4000,8000]),\n        'max_depth': trial.suggest_categorical('max_depth', [5,7,9,11,13,15,17,20]),\n        'random_state': trial.suggest_categorical('random_state', [24,48,2020]),\n        'min_child_weight': trial.suggest_int('min_child_weight', 1,300),\n        'use_label_encoder': trial.suggest_categorical('use_label_encoder',[False])\n    }\n    model = xgb.XGBRegressor(**param)      ###\n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    preds = model.predict(test_x)\n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","f21251d1":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=16)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","0eb118d0":"study.trials_dataframe()","41e655b3":"# shows the scores from all trials\noptuna.visualization.plot_optimization_history(study)","3a165c25":"# interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","6efb4df5":"# shows the evolution of the search\noptuna.visualization.plot_slice(study)","e24dd4f6":"# parameter interactions on an interactive chart.\noptuna.visualization.plot_contour(study, params=['subsample','max_depth'])","cc7a7078":"# Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","b989f4cd":"# Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","174cb7e3":"Best_trial=study.best_trial.params\nprint(Best_trial)","3dbc6be9":"sample = pd.read_csv(\"..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv\")\nprint(sample.shape)","78716ce8":"preds = np.zeros((sample.shape[0]))\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\nfor trn_idx, test_idx in kf.split(train[columns],target):\n    X_tr,X_val=train[columns].iloc[trn_idx],train[columns].iloc[test_idx]\n    y_tr,y_val=target.iloc[trn_idx],target.iloc[test_idx]\n    model = xgb.XGBRegressor(**Best_trial)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    preds+=model.predict(test[columns])\/kf.n_splits   ###### predict_proba\n    rmse=mean_squared_error(y_val, model.predict(X_val),squared=False)\n    print(rmse)","2ad6cb8f":"print(preds.shape)\nprint(preds[0])","aae74777":"subm = sample\nsubm['target'] = preds\nsubm.to_csv('submission.csv',index=False)\nsubm","3455e458":"# XGBoost with Optuna tuning\n* doc: \nhttps:\/\/github.com\/optuna\/optuna"}}