{"cell_type":{"a5f4e654":"code","80b98523":"code","6975efcd":"code","fefbe67b":"code","55123d28":"code","aa894b4b":"code","4038e89e":"code","08b307ae":"code","6a316940":"code","e1ea6564":"code","a327509d":"code","fd4d6a2f":"code","dca89748":"code","6500e1ef":"code","bdd11b62":"code","839c9147":"code","490b29d4":"code","e5ea5259":"code","99158a1f":"code","ef9a57ee":"code","fe587f2d":"code","07c94c4c":"code","0366443d":"code","6e3d9963":"code","e742575e":"code","28ca14bc":"code","512d13c0":"code","55417a34":"code","47871016":"code","8d37c553":"code","fd552579":"code","d5ea4ec4":"code","f1f9f4ce":"code","0d46eff0":"code","9446ced5":"code","231e6c6c":"code","0998d5fd":"code","b393b1bb":"code","d3adb129":"code","0ad23143":"code","5ef36b6d":"code","2fccdfa2":"code","bded1ef1":"code","e685cc12":"code","54b2fa07":"markdown","70edef0f":"markdown","39d449b3":"markdown","51cb926a":"markdown","29477b40":"markdown","861898ad":"markdown","944c5880":"markdown","787a2d6a":"markdown","b26ecd57":"markdown","6db4d7ec":"markdown","9706405d":"markdown","1794e5c7":"markdown","9e3d4d7d":"markdown","a965193c":"markdown","04de14e6":"markdown","095990e7":"markdown","8000ab74":"markdown","0abc756b":"markdown","e0f5df78":"markdown","4fb52219":"markdown","d1d4bb00":"markdown","deee35d7":"markdown","d37f44fd":"markdown","668fab1a":"markdown","d35a7dea":"markdown"},"source":{"a5f4e654":"import pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nfrom matplotlib import colors\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\n\nfrom itertools import cycle\npd.set_option('max_columns', 50)\nplt.style.use('bmh')\ncolor_pal = plt.rcParams['axes.prop_cycle'].by_key()['color']\ncolor_cycle = cycle(plt.rcParams['axes.prop_cycle'].by_key()['color'])\n\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\nimport pywt\nfrom statsmodels.robust import mad\n\nimport warnings\nwarnings.filterwarnings('ignore')","80b98523":"input_dir = '..\/input\/m5-forecasting-accuracy\/'\n\nsales_train_validation = pd.read_csv(input_dir+'sales_train_validation.csv')\ncalendar = pd.read_csv(input_dir+'calendar.csv')\nsales_prices = pd.read_csv(input_dir+'sell_prices.csv')","6975efcd":"sales_train_validation.head()","fefbe67b":"calendar.head()","55123d28":"sales_prices.head()","aa894b4b":"def reduce_mem_usage(df, verbose=True):\n\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n\n    # \u8ba1\u7b97\u5f53\u524d\u5360\u7528\u7684\u5185\u5b58 \n    start_mem = df.memory_usage(deep=True).sum() \/ 1024**2\n\n    # \u5faa\u73af\u6bcf\u4e00\u5217\n    for col in df.columns:\n\n        # \u83b7\u53d6\u6bcf\u4e00\u5217\u7684\u6570\u636e\u7c7b\u578b\n        col_type = df[col].dtypes\n\n        # \u5982\u679c\u6570\u636e\u7c7b\u578b\u5c5e\u4e8e\u4e0a\u9762\u5b9a\u4e49\u7684\u7c7b\u578b\u4e4b\n        if col_type in numerics:\n\n            # \u8ba1\u7b97\u8be5\u5217\u6570\u636e\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c \u7528\u4e8e\u6211\u4eec\u6307\u5b9a\u76f8\u5e94\u7684\u6570\u636e\u7c7b\u578b \n            c_min = df[col].min()\n            c_max = df[col].max()\n\n            # \u5982\u679c \u8be5\u5217\u7684\u6570\u636e\u7c7b\u578b\u5c5e\u4e8e int \u7c7b\u578b\uff0c\u7136\u540e\u8fdb\u884c\u5224\u65ad\n            if str(col_type)[:3] == 'int':\n                # \u5982\u679c \u8be5\u5217\u6700\u5c0f\u7684\u503c \u5927\u4e8eint8\u7c7b\u578b\u7684\u6700\u5c0f\u503c\uff0c\u5e76\u4e14\u6700\u5927\u503c\u5c0f\u4e8eint8\u7c7b\u578b\u7684\u6700\u5927\u503c\uff0c\u5219\u91c7\u7528int8\u7c7b\u578b \n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n\n                # \u540c\u4e0a\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n\n                # \u540c\u4e0a\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n\n                # \u540c\u4e0a\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n\n            # \u5426\u5219 \u5219\u91c7\u7528 float \u7684\u5904\u7406\u65b9\u6cd5       \n            else:\n\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n\n                else:\n                    df[col] = df[col].astype(np.float64)\n\n    end_mem = df.memory_usage(deep=True).sum() \/ 1024**2\n\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","4038e89e":"sales_bd = np.round(sales_train_validation.memory_usage().sum()\/(1024*1024),1)\ncalendar_bd = np.round(calendar.memory_usage().sum()\/(1024*1024),1)\nprices_bd = np.round(sales_prices.memory_usage().sum()\/(1024*1024),1)","08b307ae":"sales_train_validation = reduce_mem_usage(sales_train_validation)\nsales_prices = reduce_mem_usage(sales_prices)\ncalendar = reduce_mem_usage(calendar)","6a316940":"sales_ad = np.round(sales_train_validation.memory_usage().sum()\/(1024*1024),1)\ncalendar_ad = np.round(calendar.memory_usage().sum()\/(1024*1024),1)\nprices_ad = np.round(sales_prices.memory_usage().sum()\/(1024*1024),1)","e1ea6564":"# memory   # no melt","a327509d":"# memory  # melt","fd4d6a2f":"memory = pd.DataFrame({\n    'DataFrame':['sale_train_val','sale_prices','calendar'],\n    'Before memory reducing':[sales_bd,prices_bd,calendar_bd],\n    'After memory reducing':[sales_ad,prices_ad,calendar_ad],\n\n})\n\nmemory = pd.melt(memory,id_vars='DataFrame',var_name='Status',value_name='Memory(MB)')\nmemory.sort_values('Memory(MB)',inplace=True)\nfig = px.bar(memory,x='DataFrame',y='Memory(MB)',color='Status',barmode='group',text='Memory(MB)')\nfig.update_traces(textposition='outside')\nfig.update_layout(template='seaborn',title='Effect of Downcasting')\nfig.show()","dca89748":"ids = sorted(list(sales_train_validation['id']))\n\nd_cols = [c for c in sales_train_validation.columns if 'd_' in c ]","6500e1ef":"x_1 = sales_train_validation.loc[sales_train_validation['id'] == ids[2]].set_index('id')[d_cols].values[0] \nx_2 = sales_train_validation.loc[sales_train_validation['id'] == ids[6]].set_index('id')[d_cols].values[0]\nx_3 = sales_train_validation.loc[sales_train_validation['id'] == ids[7]].set_index('id')[d_cols].values[0]\n\nfig = make_subplots(rows=3,cols=1)\n\nfig.add_traces(go.Scatter(x=np.arange(len(x_1)),y=x_1,showlegend=False,mode='lines',name='First sample',marker=dict(color=next(color_cycle)))\n               ,rows=1,cols=1)\n\nfig.add_traces(go.Scatter(x=np.arange(len(x_2)),y=x_2,showlegend=False,mode='lines',name='Second sample',marker=dict(color=next(color_cycle)))\n                ,rows=2,cols=1)\n\nfig.add_traces(go.Scatter(x=np.arange(len(x_3)),y=x_3,showlegend=False,mode='lines',name='Third sample',marker=dict(color=next(color_cycle)))\n                ,rows=3,cols=1)\n\nfig.update_layout(height =1200,width=800,title_text='Sample sales')\nfig.show()","bdd11b62":"x_1 = sales_train_validation.loc[sales_train_validation['id'] == ids[2]].set_index('id')[d_cols].values[0][0:90] \nx_2 = sales_train_validation.loc[sales_train_validation['id'] == ids[6]].set_index('id')[d_cols].values[0][90:180] \nx_3 = sales_train_validation.loc[sales_train_validation['id'] == ids[7]].set_index('id')[d_cols].values[0][1800:] \n\nfig = make_subplots(rows=3,cols=1)\n\nfig.add_traces(go.Scatter(x=np.arange(len(x_1)),y=x_1,showlegend=False,mode='lines',name='First sample',marker=dict(color=next(color_cycle)))\n               ,rows=1,cols=1) # \u6307\u5b9a\u7ed8\u5236\u7684\u5b50\u56fe\n\nfig.add_traces(go.Scatter(x=np.arange(len(x_2)),y=x_2,showlegend=False,mode='lines',name='Second sample',marker=dict(color=next(color_cycle)))\n                ,rows=2,cols=1)\n\nfig.add_traces(go.Scatter(x=np.arange(len(x_3)),y=x_3,showlegend=False,mode='lines',name='Third sample',marker=dict(color=next(color_cycle)))\n                ,rows=3,cols=1)\n\nfig.update_layout(height =1200,width=800,title_text='Sample sales')\nfig.show()","839c9147":"# from statsmodels.tsa.seasonal import seasonal_decompose","490b29d4":"# new_x1=sales_train_validation.loc[sales_train_validation['id'] == ids[2]].set_index('id')[d_cols][0:90]\n# new_x1.T","e5ea5259":"# decomposition = seasonal_decompose(new_x1,freq=12)\n# trend = decomposition.trend #\u8d8b\u52bf\u6548\u5e94\n# seasonal = decomposition.seasonal #\u5b63\u8282\u6548\u5e94\n# residual = decomposition.resid #\u968f\u673a\u6548\u5e94\n# plt.subplot(411)\n# plt.plot(new_x1, label=u'\u539f\u59cb\u6570\u636e')\n# plt.legend(loc='best')\n# plt.subplot(412)\n# plt.plot(trend, label=u'\u8d8b\u52bf')\n# plt.legend(loc='best')\n# plt.subplot(413)\n# plt.plot(seasonal,label=u'\u5b63\u8282\u6027')\n# plt.legend(loc='best')\n# plt.subplot(414)\n# plt.plot(residual, label=u'\u6b8b\u5dee')\n# plt.legend(loc='best')\n# plt.tight_layout()","99158a1f":"def maddest(d, axis=None):\n    return np.mean(np.absolute(d - np.mean(d, axis)), axis)\n\ndef denoise_signal(x, wavelet='db4', level=1):\n    coeff = pywt.wavedec(x, wavelet, mode=\"per\")\n    sigma = (1\/0.6745) * maddest(coeff[-level])\n\n    uthresh = sigma * np.sqrt(2*np.log(len(x)))\n    coeff[1:] = (pywt.threshold(i, value=uthresh, mode='hard') for i in coeff[1:])\n\n    return pywt.waverec(coeff, wavelet, mode='per')","ef9a57ee":"y_w1 = denoise_signal(x_1)\ny_w2 = denoise_signal(x_2)\ny_w3 = denoise_signal(x_3)","fe587f2d":"fig,ax=plt.subplots(nrows=3,ncols=2,figsize=(30,20))\n\nax[0,0].plot(x_1,color='seagreen',marker='o')\nax[0,0].set_title('Original Sales',fontsize=24)\nax[0,0].plot(y_w1,color='red',marker='.')\nax[0,0].set_title('Original Sales',fontsize=24)\nax[0,1].plot(y_w1,color='red',marker='.')\nax[0,1].set_title('Original Sales',fontsize=24)\n\nax[1,0].plot(x_2,color='seagreen',marker='o')\nax[1,0].set_title('Original Sales',fontsize=24)\nax[1,0].plot(y_w2,color='red',marker='.')\nax[1,0].set_title('Original Sales',fontsize=24)\nax[1,1].plot(y_w2,color='red',marker='.')\nax[1,1].set_title('Original Sales',fontsize=24)\n\nax[2,0].plot(x_3,color='seagreen',marker='o')\nax[2,0].set_title('Original Sales',fontsize=24)\nax[2,0].plot(y_w3,color='red',marker='.')\nax[2,0].set_title('Original Sales',fontsize=24)\nax[2,1].plot(y_w3,color='red',marker='.')\nax[2,1].set_title('Original Sales',fontsize=24)\n\nfig.show()","07c94c4c":"def average_smoothing(signal, kernel_size=3, stride=1):\n    sample = [0]*(kernel_size-stride) # \u901a\u8fc7 len(y_a1) \u53ef\u4ee5\u53d1\u73b0\u4e0e\u539f\u59cb\u6570\u636e\u540c\u957f\u5ea6\n    start = 0\n    end = kernel_size\n    while end <= len(signal):\n        start = start + stride\n        end = end + stride\n        sample.extend([np.mean(signal[start:end])])\n    return np.array(sample)","0366443d":"y_a1 = average_smoothing(x_1)\ny_a2 = average_smoothing(x_2)\ny_a3 = average_smoothing(x_3)\n\nfig = make_subplots(rows=3, cols=1)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(len(x_1)), mode='lines+markers', y=x_1, marker=dict(color=\"lightskyblue\"), showlegend=False,\n               name=\"Original sales\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(len(x_1)), y=y_a1, mode='lines', marker=dict(color=\"navy\"), showlegend=False,\n               name=\"Denoised sales\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(len(x_2)), mode='lines+markers', y=x_2, marker=dict(color=\"thistle\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(len(x_2)), y=y_a2, mode='lines', marker=dict(color=\"indigo\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(len(x_3)), mode='lines+markers', y=x_3, marker=dict(color=\"mediumaquamarine\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(len(x_3)), y=y_a3, mode='lines', marker=dict(color=\"darkgreen\"), showlegend=False),\n    row=3, col=1\n)\n\n\nfig.update_layout(height=1200, width=800, title_text=\"Original (pale) vs. Denoised (dark) signals\")\nfig.show()","6e3d9963":"fig,ax = plt.subplots(nrows=3,ncols=2,figsize=(30,20))\n\nax[0,0].plot(x_1,color='seagreen',marker='o')\nax[0,0].set_title('Original Sales',fontsize=24)\nax[0,1].plot(y_a1,color='red',marker='x')\nax[0,1].set_title('Original Sales',fontsize=24)\n\nax[1,0].plot(x_2,color='seagreen',marker='o')\nax[1,0].set_title('Original Sales',fontsize=24)\nax[1,1].plot(y_a2,color='red',marker='.')\nax[1,1].set_title('Original Sales',fontsize=24)\n\n\nax[2,0].plot(x_3,color='seagreen',marker='o')\nax[2,0].set_title('Original Sales',fontsize=24)\nax[2,1].plot(y_a3,color='red',marker='.')\nax[2,1].set_title('Original Sales',fontsize=24)\n\nfig.show()","e742575e":"sales_train_validation.head()","28ca14bc":"sales_prices.head()","512d13c0":"calendar.head()","55417a34":"past_sales = sales_train_validation.set_index('id')[d_cols] \\\n            .T \\\n            .merge(calendar.set_index('d')['date'],left_index =True,right_index=True,).set_index('date')\n\nstore_list = sales_prices['store_id'].unique()\nmeans = []\n\nfig = go.Figure()\n\nfor s_id in  store_list:\n    store_items = [s for s in past_sales.columns if s_id in s]\n    data = past_sales[store_items].sum(axis=1).rolling(90).mean()\n    means.append(np.mean(past_sales[store_items].sum(axis=1)))\n    fig.add_trace(go.Scatter(x=data.index, y=data, name=s_id))\n                 \nfig.update_layout(yaxis_title='Sales',xaxis_title='Time',title='Rolling average Sales vs Time (per store)')","47871016":"fig = go.Figure()\nfor s_id in  store_list:\n    store_items = [s for s in past_sales.columns if s_id in s]\n    data = past_sales[store_items].sum(axis=1).rolling(90).mean()\n    fig.add_trace(go.Box(x=[s_id]*len(data), y=data, name=s_id))\nfig.update_layout(yaxis_title='Sales',xaxis_title='Store',title='Rolling average Sales vs Store (per store)')","8d37c553":"fig = go.Figure()\n\n# method 1\ndf = pd.DataFrame(np.transpose([means,store_list]))\ndf.columns=['Mean sales','Store name']\npx.bar(df, y=\"Mean sales\", x=\"Store name\", color=\"Store name\", title=\"Mean sales vs. Store name\")\n\n# method 2\n# for i in np.transpose([means, store_list]):\n#     fig.add_trace(go.Bar(y=[i[0]], x=[i[1]], marker = dict(color = next(color_cycle)),name=i[1]))\n# fig.update_layout(yaxis_title=\"Mean Sales\", xaxis_title=\"Store name\", title=\"Mean Sales vs. Store name\")","fd552579":"cat_id_list = sales_train_validation['cat_id'].unique()\n\nfig= go.Figure()\n\nfor cat_id in  cat_id_list:\n    store_items = [s for s in past_sales.columns if cat_id in s]\n    data = past_sales[store_items].sum(axis=1)\n    fig.add_trace(go.Scatter(x=data.index,y=data,name=cat_id))\nfig.update_layout(xaxis_title='time',yaxis_title='cat_id sales',title='cat_id Sales vs Time (per cat_id)')","d5ea4ec4":"past_sales_clipped = past_sales.clip(0, 1)\n\nfig = go.Figure()\nfor cat_id in  cat_id_list:\n    store_items = [s for s in past_sales_clipped.columns if cat_id in s]\n    data = past_sales_clipped[store_items].mean(axis=1) * 100\n    fig.add_trace(go.Scatter(x=data.index,y=data,name=cat_id,mode='markers'))\nfig.update_layout(xaxis_title='time',yaxis_title='% of Inventory with at least 1 sale',title='Inventory Sale Percentage by Date')","f1f9f4ce":"print('The lowest sale date was:', past_sales.sum(axis=1).sort_values().index[0],\n     'with', past_sales.sum(axis=1).sort_values().values[0], 'sales')\nprint('The lowest sale date was:', past_sales.sum(axis=1).sort_values(ascending=False).index[0],\n     'with', past_sales.sum(axis=1).sort_values(ascending=False).values[0], 'sales')","0d46eff0":"import statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport statsmodels.tsa.api as smt\nimport itertools\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nimport statsmodels\n\nfrom tqdm import tqdm","9446ced5":"store_sum = sales_train_validation.groupby(['store_id']).sum().T.reset_index(drop = True)\nstore_sum.head()","231e6c6c":"train_datasets= store_sum.iloc[0:70]\nval_datasets= store_sum.iloc[70:100]","0998d5fd":"from statsmodels.tsa.seasonal import seasonal_decompose","b393b1bb":"weeks_per_year = 365\n\ntime_series = store_sum[\"CA_1\"]\nsj_sc = seasonal_decompose(time_series, freq= weeks_per_year)\nsj_sc.plot()\n\nplt.show()","d3adb129":"fig = make_subplots(3,1)\n\nfig.add_trace(go.Scatter(x=np.arange(70),y=train_datasets.iloc[:,0],marker=dict(color='seagreen'),name='Train'),row=1,col=1)\nfig.add_trace(go.Scatter(x=np.arange(70,100),y=val_datasets.iloc[:,0],marker=dict(color='red'),name='Val'),row=1,col=1)\n\nfig.add_trace(go.Scatter(x=np.arange(70),y=train_datasets.iloc[:,4],marker=dict(color='seagreen'), showlegend=False),row=2,col=1)\nfig.add_trace(go.Scatter(x=np.arange(70,100),y=val_datasets.iloc[:,4],marker=dict(color='red'), showlegend=False),row=2,col=1)\n\nfig.add_trace(go.Scatter(x=np.arange(70),y=train_datasets.iloc[:,7],marker=dict(color='seagreen'), showlegend=False),row=3,col=1)\nfig.add_trace(go.Scatter(x=np.arange(70,100),y=val_datasets.iloc[:,7],marker=dict(color='red'), showlegend=False),row=3,col=1)\n\nfig.update_layout(title='Sales volume of a commodity')","0ad23143":"store_col = [0,4,7]","5ef36b6d":"def sarima_train_test(t_series, p = 2, d = 1, r = 2, NUM_TO_FORECAST = 56, do_plot_results = True):\n    \n    NUM_TO_FORECAST = NUM_TO_FORECAST  # Similar to train test splits.\n    dates = np.arange(t_series.shape[0])\n    \n    model = SARIMAX(t_series, order = (p, d, r), trend = 'c')\n    results = model.fit()\n#     results.plot_diagnostics(figsize=(12, 8))\n#     plt.show()\n\n    forecast = results.get_prediction(start = - NUM_TO_FORECAST)\n    mean_forecast = forecast.predicted_mean\n    conf_int = forecast.conf_int()\n\n    print(mean_forecast.shape)\n\n    # Plot the forecast\n#     plt.figure(figsize=(6,4))\n#     plt.plot(dates[-NUM_TO_FORECAST:],\n#             mean_forecast.values,\n#             color = 'red',\n#             label = 'forecast')\n\n\n#     plt.plot(dates[-NUM_TO_FORECAST:],\n#             t_series.iloc[-NUM_TO_FORECAST:],\n#             color = 'blue',\n#             label = 'actual')\n#     plt.legend()\n#     plt.title('Predicted vs. Actual Values')\n#     plt.show()\n    \n    residuals = results.resid # \u6a21\u578b\u7684\u6b8b\u5dee\n    mae_sarima = np.mean(np.abs(residuals))\n    print('Mean absolute error: ', mae_sarima)\n    print(results.summary())\n    return mean_forecast","2fccdfa2":"predictions = []\n\nfor col in store_col:\n    predictions.append(sarima_train_test(train_datasets.iloc[:,col],NUM_TO_FORECAST=28))\n\npredictions = np.array(predictions).reshape((-1, 28))","bded1ef1":"predictions","e685cc12":"pred_1 = predictions[0]\npred_2 = predictions[1]\npred_3 = predictions[2]\n\nfig = make_subplots(rows=3, cols=1)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_datasets.iloc[:,0].values, marker=dict(color=\"dodgerblue\"),\n               name=\"Train\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_datasets.iloc[:,0].values, mode='lines', marker=dict(color=\"darkorange\"),\n               name=\"Val\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_1, mode='lines', marker=dict(color=\"seagreen\"),\n               name=\"Pred\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_datasets.iloc[:,4].values, marker=dict(color=\"dodgerblue\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_datasets.iloc[:,4].values, mode='lines', marker=dict(color=\"darkorange\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_2, mode='lines', marker=dict(color=\"seagreen\"), showlegend=False,\n               name=\"Denoised signal\"),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70), mode='lines', y=train_datasets.iloc[:,7].values, marker=dict(color=\"dodgerblue\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=val_datasets.iloc[:,7].values, mode='lines', marker=dict(color=\"darkorange\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=np.arange(70, 100), y=pred_3, mode='lines', marker=dict(color=\"seagreen\"), showlegend=False,\n               name=\"Denoised signal\"),\n    row=3, col=1\n)\n\nfig.update_layout(height=1200, width=800, title_text=\"ARIMA\")\nfig.show()","54b2fa07":"###  Downcasting","70edef0f":"\u5f53\u9047\u5230\u9500\u552e\u6570\u636e\u975e\u5e38\u4e0d\u7a33\u5b9a\u65f6\uff0c\u6211\u4eec\u9700\u8981\u67d0\u79cd\u201c\u53bb\u566a\u201d\u6280\u672f\u6765\u53d1\u73b0\u9500\u552e\u6570\u636e\u7684\u6f5c\u5728\u8d8b\u52bf\u5e76\u4f5c\u51fa\u9884\u6d4b\u3002\n\n\n\u73b0\u5728\uff0c\u6211\u5c06\u5c55\u793a\u5982\u4f55\u6d88\u9664\u8fd9\u4e9b\u4e0d\u7a33\u5b9a\u7684\u9500\u552e\u4ef7\u683c\uff0c\u4ee5\u63d0\u53d6\u6f5c\u5728\u7684\u8d8b\u52bf\u3002\u8fd9\u79cd\u65b9\u6cd5\u53ef\u80fd\u4f1a\u4e22\u5931\u539f\u59cb\u65f6\u95f4\u5e8f\u5217\u4e2d\u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u4f46\u5728\u63d0\u53d6\u6709\u5173\u65f6\u95f4\u5e8f\u5217\u8d8b\u52bf\u7684\u67d0\u4e9b\u7279\u5f81\u65f6\uff0c\u5b83\u53ef\u80fd\u662f\u6709\u7528\u7684\u3002\u5c0f\u6ce2\u53bb\u566a\uff08\u901a\u5e38\u7528\u4e8e\u7535\u4fe1\u53f7\uff09\u662f\u4e00\u79cd\u53bb\u9664\u65f6\u95f4\u5e8f\u5217\u4e2d\u4e0d\u5fc5\u8981\u566a\u58f0\u7684\u65b9\u6cd5\u3002\u8fd9\u79cd\u65b9\u6cd5\u8ba1\u7b97\u79f0\u4e3a\u201c\u5c0f\u6ce2\u7cfb\u6570\u201d\u7684\u7cfb\u6570\u3002\u8fd9\u4e9b\u7cfb\u6570\u51b3\u5b9a\u4e86\u4fdd\u7559\u54ea\u4e9b\u4fe1\u606f\uff08\u4fe1\u53f7\uff09\u548c\u4e22\u5f03\u54ea\u4e9b\u4fe1\u606f\uff08\u566a\u58f0\uff09\u3002\n\n\u6211\u4eec\u5229\u7528\u5e73\u5747\u7edd\u5bf9\u504f\u5dee\uff08MAD\uff09\u503c\u6765\u7406\u89e3\u9500\u552e\u4e2d\u7684\u968f\u673a\u6027\uff0c\u4ece\u800c\u786e\u5b9a\u65f6\u95f4\u5e8f\u5217\u4e2d\u5c0f\u6ce2\u7cfb\u6570\u7684\u6700\u5c0f\u9608\u503c\u3002\u6211\u4eec\u4ece\u5c0f\u6ce2\u4e2d\u8fc7\u6ee4\u51fa\u4f4e\u7cfb\u6570\uff0c\u7136\u540e\u4ece\u5269\u4f59\u7684\u7cfb\u6570\u4e2d\u91cd\u5efa\u9500\u552e\u6570\u636e\uff0c\u5c31\u8fd9\u6837\uff0c\u6211\u4eec\u6210\u529f\u5730\u4ece\u9500\u552e\u6570\u636e\u4e2d\u53bb\u9664\u4e86\u566a\u58f0\u3002\n\n\u53c2\u8003\uff1ahttps:\/\/www.kaggle.com\/theoviel\/denoising-with-direct-wavelet-transform","39d449b3":"\u53ef\u4ee5\u770b\u51fa\u8fd9\u51e0\u4e2a\u5546\u54c1\u7684\u9500\u552e\u6570\u636e\u975e\u5e38\u4e0d\u7a33\u5b9a\uff0c\u6709\u7684\u65f6\u5019\u9500\u552e\u91cf\u751a\u81f3\u4e3a0\uff0c\u53ef\u80fd\u610f\u5473\u7740\u8be5\u5546\u54c1\u5728\u67d0\u5929\u4e0d\u53ef\u7528\u3002","51cb926a":"### ARIMA \n\nARIMA \u7684\u82f1\u6587\u5168\u79f0\u662f Auto Regressive Integrated Moving Average \u6a21\u578b\uff0c\u4e2d\u6587\u53eb __\u5dee\u5206\u81ea\u56de\u5f52\u6ed1\u52a8\u5e73\u5747\u6a21\u578b__ \uff0c\u4e5f\u53eb\u6c42\u5408\u81ea\u56de\u5f52\u6ed1\u52a8\u5e73\u5747\u6a21\u578b\u3002\u76f8\u6bd4\u4e8e ARMA\uff0cARIMA \u591a\u4e86\u4e00\u4e2a\u5dee\u5206\u7684\u8fc7\u7a0b\uff0c\u4f5c\u7528\u662f\u5bf9\u4e0d\u5e73\u7a33\u6570\u636e\u8fdb\u884c\u5dee\u5206\u5e73\u7a33\uff0c\u5728\u5dee\u5206\u5e73\u7a33\u540e\u518d\u8fdb\u884c\u5efa\u6a21\u3002ARIMA \u7684\u539f\u7406\u548c ARMA \u6a21\u578b\u4e00\u6837\u3002\u76f8\u6bd4\u4e8e ARMA(p,q) \u7684\u4e24\u4e2a\u9636\u6570\uff0cARIMA \u662f\u4e00\u4e2a\u4e09\u5143\u7ec4\u7684\u9636\u6570 (p,d,q)\uff0c\u79f0\u4e3a ARIMA(p,d,q) \u6a21\u578b\u3002\u5176\u4e2d d \u662f\u5dee\u5206\u9636\u6570\u3002\n","29477b40":"### Sample sales snippets","861898ad":"#### seasonal_decompose\n\n* https:\/\/zhuanlan.zhihu.com\/p\/127032260\n\n* https:\/\/github.com\/statsmodels\/statsmodels\/issues\/3085\n\n\u901a\u8fc7Python\u4e2d\u7684seasonal_decompose\u51fd\u6570\u53ef\u4ee5\u63d0\u53d6\u5e8f\u5217\u7684\u8d8b\u52bf\u3001\u5b63\u8282\u548c\u968f\u673a\u6548\u5e94\u3002\u5bf9\u4e8e\u975e\u5e73\u7a33\u7684\u65f6\u95f4\u5e8f\u5217\uff0c\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8d8b\u52bf\u548c\u5b63\u8282\u6027\u8fdb\u884c\u5efa\u6a21\u5e76\u5c06\u5b83\u4eec\u4ece\u6a21\u578b\u4e2d\u5254\u9664\uff0c\u4ece\u800c\u5c06\u975e\u5e73\u7a33\u7684\u6570\u636e\u8f6c\u6362\u4e3a\u5e73\u7a33\u6570\u636e\uff0c\u5e76\u5bf9\u5176\u6b8b\u5dee\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u5206\u6790\u3002","944c5880":"### Sample sales data","787a2d6a":"#### \u4e0d\u540c\u65f6\u95f4\u4e0b\uff0c\u4e0d\u540c\u4ea7\u54c1\u6570\u91cf\u7684\u53d8\u5316","b26ecd57":"\u5546\u54c1\u5728\u4e0d\u540c\u65f6\u95f4\u4e0b\u51fa\u73b0\u7684\u767e\u5206\u6bd4\u6b21\u6570","6db4d7ec":"#### \u5404\u4e2a\u5546\u5e97\u6240\u5bf9\u5e94\u4ea7\u54c1\u9500\u552e\u5747\u503c\u6bd4\u8f83","9706405d":"\u5f53\u653e\u5927\u5176\u4e2d\u67d0\u4e2a\u7247\u6bb5\u65f6\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u51fa\u6765\u9500\u552e\u6570\u636e\u7684\u4e0d\u7a33\u5b9a\uff0c\u67d0\u4e00\u5929\u7684\u9500\u552e\u91cf\u5f88\u597d\uff0c\u67d0\u4e00\u5929\u751a\u81f3\u51e0\u5929\u7684\u9500\u552e\u91cf\u90fd\u5f88\u4f4e","1794e5c7":"### SARIMAX\n\n\u5177\u6709\u5b63\u8282\u56de\u5f52\u6a21\u578b\u7684\u5b63\u8282\u6027\u81ea\u56de\u5f52\u7efc\u5408\u79fb\u52a8\u5e73\u5747\u7ebf\n\nhttps:\/\/www.statsmodels.org\/dev\/generated\/statsmodels.tsa.statespace.sarimax.SARIMAX.html","9e3d4d7d":"\u4e0b\u56fe\u4e2d\uff1a\u7ea2\u8272\u56fe\u5f62\u8868\u793a\u539f\u59cb\u9500\u552e\u989d\uff0c\u7eff\u8272\u56fe\u5f62\u8868\u793a\u53bb\u566a\u540e\u7684\u9500\u552e\u989d\u3002","a965193c":"### Stores and states\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u5c06\u67e5\u770b\u4e0d\u540c\u5546\u5e97\u548c\u5dde\u7684\u9500\u552e\u6570\u636e\uff0c\u4ee5\u4fbf\u83b7\u5f97\u4e00\u4e9b\u6709\u7528\u7684\u89c1\u89e3\u3002","04de14e6":"### \u5c0f\u6ce2\u53bb\u566a","095990e7":"\u53ef\u4ee5\u770b\u51fa CA_3 \u7684\u5e73\u5747\u9500\u91cf\u6700\u597d\uff0cCA_4 \u5e73\u5747\u9500\u91cf\u6700\u5dee","8000ab74":"\u8fdb\u884c\u53bb\u566a","0abc756b":"\u7ed8\u5236\u5176\u4e2d\u67d0\u4e2a\u5546\u54c1\u5728\u4e0d\u540c\u5730\u533a\u4e0b\u7684\u9500\u552e\u56fe\u50cf","e0f5df78":"### \u5212\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6","4fb52219":"\u53ef\u4ee5\u770b\u51fa\u5728\u4e0d\u540c\u65f6\u95f4\u4e0b\uff0c\u5546\u54c1\u7684\u6570\u91cf\u4e5f\u4e0d\u4e00\u6837\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b58\u5728\u7740\u6709\u7684\u5546\u54c1\u9000\u51fa\u4e86\u5e02\u573a","d1d4bb00":"\u5728\u4e0a\u9762\u7684\u56fe\u8868\u4e2d\uff0c\u6697\u7ebf\u56fe\u8868\u793a\u53bb\u566a\u540e\u7684\u9500\u552e\u989d\uff0c\u6d45\u7ebf\u56fe\u8868\u793a\u539f\u59cb\u9500\u552e\u989d\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5e73\u5747\u5e73\u6ed1\u5728\u53d1\u73b0\u6570\u636e\u4e2d\u7684\u5b8f\u89c2\u8d8b\u52bf\u548c\u6a21\u5f0f\u65b9\u9762\u4e5f\u5f88\u4e0d\u9519\u3002\n\n\u4f46\u662f\u4e00\u822c\u6765\u8bf4\uff0c\u5c0f\u6ce2\u53bb\u566a\u5728\u5bfb\u627e\u9500\u552e\u6570\u636e\u8d8b\u52bf\u65b9\u9762\u663e\u7136\u66f4\u6709\u6548\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u5e73\u5747\u5e73\u6ed1\u6216\u201c\u6eda\u52a8\u5e73\u5747\u201d\u4e5f\u53ef\u4ee5\u7528\u4e8e\u8ba1\u7b97\u5efa\u6a21\u7684\u6709\u7528\u7279\u5f81\u3002","deee35d7":"#### seasonal_decompose\n\n\u5b63\u8282\u5206\u89e3\u663e\u793a\u4e86\u4e00\u4e2a\u65f6\u95f4\u5e8f\u5217\u5728\u591a\u5927\u7a0b\u5ea6\u4e0a\u8868\u73b0\u51fa\u5b63\u8282\u6027\u548c\u8d8b\u52bf\u6027\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u65b9\u5f0f\u6765\u8003\u8651\u6709\u591a\u5c11\u9500\u552e\u662f\u7531\u4e8e\u5b63\u8282\u6027\uff0c\u8d8b\u52bf\uff0c\u6216\u4e00\u6b21\u6027\u4e8b\u4ef6\uff0c\u5982\u5047\u65e5\u3002\n\n\u73b0\u5728\u6211\u4eec\u5c06\u4f7f\u7528\u6bcf\u5e74\u4e00\u6b21\u7684\u9891\u7387\uff0c\u76f4\u5230\u6211\u4eec\u505a\u66f4\u8be6\u7ec6\u7684\u5206\u6790\u3002","d37f44fd":"#### \u67e5\u770b\u4e0d\u540c\u65f6\u95f4\u5546\u54c1\u7684\u9500\u91cf\u60c5\u51b5","668fab1a":"## Modeling \u5f00\u59cb\u5efa\u7acb\u6a21\u578b","d35a7dea":"### Average smoothing \u5747\u503c\u5e73\u6ed1\n\n\u5747\u503c\u5e73\u6ed1\u662f\u4e00\u79cd\u76f8\u5bf9\u7b80\u5355\u7684\u53bb\u566a\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u7684\u65b9\u6cd5\u3002\u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u53d6\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u201c\u7a97\u53e3\u201d\uff08\u598210\uff09\u3002\u6211\u4eec\u9996\u5148\u5c06\u7a97\u53e3\u653e\u5728\u65f6\u95f4\u5e8f\u5217\u7684\u5f00\u59cb\u5904\uff08\u524d\u5341\u4e2a\u5143\u7d20\uff09\uff0c\u7136\u540e\u8ba1\u7b97\u8be5\u90e8\u5206\u7684\u5e73\u5747\u503c\u3002\u6211\u4eec\u73b0\u5728\u5728\u65f6\u95f4\u5e8f\u5217\u4e2d\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u7279\u5b9a\u7684\u201c\u6b65\u5e45\u201d\uff0c\u8ba1\u7b97\u65b0\u7a97\u53e3\u7684\u5e73\u5747\u503c\u5e76\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u5230\u8fbe\u65f6\u95f4\u5e8f\u5217\u7684\u672b\u5c3e\u3002\u7136\u540e\uff0c\u6211\u4eec\u8ba1\u7b97\u51fa\u7684\u6240\u6709\u5e73\u5747\u503c\u88ab\u8fde\u63a5\u5230\u4e00\u4e2a\u65b0\u7684\u65f6\u95f4\u5e8f\u5217\u4e2d\uff0c\u5f62\u6210\u53bb\u566a\u540e\u7684\u9500\u552e\u6570\u636e\u3002"}}