{"cell_type":{"477f35b4":"code","5a966ff0":"code","3226140f":"code","9127a810":"code","158194d6":"code","67ab3227":"code","57723201":"code","7b9f11f5":"code","bb31bb5f":"code","534e8e64":"code","84bb3435":"code","07bce857":"code","db69583f":"code","2a523d86":"code","ff001021":"code","157aaf70":"code","9fa43e85":"code","cb410c30":"code","7440e8a6":"code","fc5d59a8":"code","b2f034f8":"code","b53daba7":"code","f27952bd":"code","02e42870":"code","2bc72239":"code","52300814":"code","fa547817":"code","2f94bbfe":"code","a2ddf400":"code","9d4567a6":"code","4efc5bf3":"code","5a023516":"code","12c50369":"code","c6c7efc9":"code","f471cec7":"code","c968f3a5":"code","b584fe20":"code","59e8df09":"code","2f0a398d":"code","abffc7c9":"code","89fb5802":"code","f20d4f34":"code","778f4439":"code","9c50e595":"code","7293f41a":"code","2d6175ac":"markdown","ae27b8e2":"markdown","90fe8745":"markdown","78bf8577":"markdown","1eef3d66":"markdown","9aa3905b":"markdown","8ac8b886":"markdown","6d868757":"markdown","1527a00f":"markdown","09fda61e":"markdown","51ee1fd9":"markdown","925dd0e2":"markdown"},"source":{"477f35b4":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","5a966ff0":"df=pd.read_csv('..\/input\/car-dekho-data\/car data.csv')","3226140f":"\ndf.head()","9127a810":"\ndf.shape","158194d6":"\nprint(df['Seller_Type'].unique())\nprint(df['Fuel_Type'].unique())\nprint(df['Transmission'].unique())\nprint(df['Owner'].unique())","67ab3227":"## check missing or null value\nprint(df.isnull().sum())\nprint('In this data here is no any missing value' )","57723201":"df.describe()","7b9f11f5":"df.columns","bb31bb5f":"final_dataset=df[[ 'Year', 'Selling_Price', 'Present_Price', 'Kms_Driven',\n       'Fuel_Type', 'Seller_Type', 'Transmission', 'Owner']]","534e8e64":"final_dataset.head()","84bb3435":"final_dataset['Current_Year'] = 2020","07bce857":"final_dataset.head()","db69583f":"final_dataset['no_year']=final_dataset['Current_Year']-final_dataset['Year']","2a523d86":"final_dataset.head()","ff001021":"final_dataset.drop(['Year'],axis=1,inplace=True)\nfinal_dataset.head()","157aaf70":"final_dataset.drop(['Current_Year'],axis=1,inplace=True)\nfinal_dataset.head()","9fa43e85":"final_dataset=pd.get_dummies(final_dataset,drop_first=True)","cb410c30":"final_dataset","7440e8a6":"final_dataset.corr()","fc5d59a8":"sns.pairplot(final_dataset)","b2f034f8":"corrmat=final_dataset.corr() \ntop_corr_features=corrmat.index\nplt.figure(figsize=(20,20)) \n#plot heat map \ng=sns.heatmap(final_dataset[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")\n","b53daba7":"final_dataset.head()","f27952bd":"#dependent aur independent feature\nx=final_dataset.iloc[:,1:]\ny=final_dataset.iloc[:,0]","02e42870":"x.head()\n","2bc72239":"y.head()","52300814":"### feature importance\nfrom sklearn.ensemble import ExtraTreesRegressor\nmodel=ExtraTreesRegressor()\nmodel.fit(x,y)","fa547817":"print(model.feature_importances_)","2f94bbfe":"#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index = x.columns)\nfeat_importances.nlargest(5).plot(kind ='barh')\nplt.show()","a2ddf400":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.2)","9d4567a6":"x_train.shape","4efc5bf3":"from sklearn.ensemble import RandomForestRegressor\nrf_random=RandomForestRegressor()","5a023516":"###Hypeparmeter\nimport numpy as np\nn_estimators=[int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\nprint(n_estimators)","12c50369":"from sklearn.model_selection import RandomizedSearchCV","c6c7efc9":"#Randomized Search CV\n\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(5, 30, num = 6)]\n# max_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10, 15, 100]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 5, 10]","f471cec7":"# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}\n\nprint(random_grid)","c968f3a5":"# Use the random grid to search for best hyperparameters\n# First create the base model to tune\nrf = RandomForestRegressor()","b584fe20":"# Random search of parameters, using 3 fold cross validation, \n# search across 100 different combinations\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)","59e8df09":"rf_random.fit(x_train,y_train)","2f0a398d":"rf_random.best_params_","abffc7c9":"rf_random.best_score_","89fb5802":"predictions=rf_random.predict(x_test)","f20d4f34":"sns.distplot(y_test-predictions)","778f4439":"plt.scatter(y_test,predictions)","9c50e595":"from sklearn import metrics","7293f41a":"print('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))","2d6175ac":"# Two types of feature categerial and numeric here check categegorial type ","ae27b8e2":"# Correlation of Features and Feature Selection","90fe8745":"# No of rows and column in the data set","78bf8577":"# Package Import ","1eef3d66":"# Project Requirement\n- IDE : Google Colab \/ Jupyter Notebook\n- Language : Python","9aa3905b":"# Introduction","8ac8b886":"# content\n1. Introduction\n2. Project Requirement\n3. package import\n4. load and prepare data\n5. Identify Missing Value\n6. Dropping missing values\n","6d868757":"# Identify Missing Value","1527a00f":"# Split data set into feature and lebal","09fda61e":"# add and remove some feature ","51ee1fd9":"# load and prepare data","925dd0e2":"# Here extract top 5 row of entire coloumn**"}}