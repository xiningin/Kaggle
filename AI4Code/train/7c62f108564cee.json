{"cell_type":{"ab70fcf8":"code","1bd6dffc":"code","9d7b1b32":"code","95d2b047":"code","337fb7ec":"code","affbb198":"code","da29425c":"code","4a64bcd2":"code","22920254":"code","67d7a1a6":"code","b1552ae7":"code","331311f5":"code","3bb3dc32":"code","b8865fa4":"code","d53e6875":"code","3332d21b":"code","8f4b749e":"code","93e346f5":"code","bbeba35d":"code","e2b9ed02":"code","e85be827":"code","31063f44":"code","da24c014":"code","8af3cd50":"code","8939ee0d":"markdown","a3f62acc":"markdown","50df5887":"markdown","1dd04d67":"markdown","589086f2":"markdown","8db40c1e":"markdown","0bac32bb":"markdown","c590b473":"markdown","b781a720":"markdown","8e7e4460":"markdown","0b958323":"markdown"},"source":{"ab70fcf8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nfrom statsmodels.stats import weightstats as stests\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1bd6dffc":"StudentsPerformance = pd.read_csv('\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv')","9d7b1b32":"StudentsPerformance.head()","95d2b047":"print(\"The number of training examples(data points) = %i \" % StudentsPerformance.shape[0])\nprint(\"The number of features = %i \" % StudentsPerformance.shape[1])","337fb7ec":"StudentsPerformance.info(); ","affbb198":"StudentsPerformance.isnull().sum()","da29425c":"StudentsPerformance.describe() #why does it show these features only? ans: bec these are the numeric values","4a64bcd2":"duplicate = StudentsPerformance[StudentsPerformance.duplicated()]\nduplicate.size ","22920254":" \nplt.figure(figsize=(15,6))\nplt.subplot(1, 3, 1)\nfig = StudentsPerformance.boxplot(column='math score')\nfig.set_title('')\nfig.set_ylabel('Math Score')\n \nplt.subplot(1, 3, 2)\nfig = StudentsPerformance.boxplot(column='reading score')\nfig.set_title('')\nfig.set_ylabel('Reading Score')\n\nplt.subplot(1, 3, 3)\nfig = StudentsPerformance.boxplot(column='writing score')\nfig.set_title('')\nfig.set_ylabel('writing Score')\n","67d7a1a6":"#g = sns.displot(StudentsPerformance[\"writing score\"], color=\"r\", label=\"Skewness : %.2f\"%(StudentsPerformance[\"math score\"].skew()))\n#g = sns.displot(StudentsPerformance[\"reading score\"], color=\"g\", label=\"Skewness : %.2f\"%(StudentsPerformance[\"reading score\"].skew()))\n#g = sns.displot(StudentsPerformance[\"writing score\"], color=\"b\", label=\"Skewness : %.2f\"%(StudentsPerformance[\"writing score\"].skew()))\n\n#sns.displot(StudentsPerformance[\"math score\"])\n#sns.displot(StudentsPerformance[\"reading score\"])\n#sns.displot(StudentsPerformance[\"writing score\"])","b1552ae7":"f = plt.figure(figsize=(25,20))\nf.add_subplot(331)\nsns.histplot(data= StudentsPerformance, x= 'math score',color=\"r\");\nf.add_subplot(332)\nsns.histplot(data= StudentsPerformance, x= 'reading score',color=\"g\");\nf.add_subplot(333)\nsns.histplot(data= StudentsPerformance, x= 'writing score',color=\"b\");","331311f5":"#math score\nmean = StudentsPerformance.mean()[0]\nstd = StudentsPerformance.std()[0]\nUpper_boundary = mean + 3* std\nLower_boundary = mean - 3* std\nprint('math score outliers are values < {lowerboundary} or > {upperboundary}'.format(lowerboundary=Lower_boundary, upperboundary=Upper_boundary))\n\n#reading score\nmean = StudentsPerformance.mean()[1]\nstd = StudentsPerformance.std()[1]\nUpper_boundary = mean + 3* std\nLower_boundary = mean - 3* std\nprint('reading score outliers are values < {lowerboundary} or > {upperboundary}'.format(lowerboundary=Lower_boundary, upperboundary=Upper_boundary))\n\n#writing score\nmean = StudentsPerformance.mean()[2]\nstd = StudentsPerformance.std()[2]\nUpper_boundary = mean + 3* std\nLower_boundary = mean - 3* std\nprint('writing score outliers are values < {lowerboundary} or > {upperboundary}'.format(lowerboundary=Lower_boundary, upperboundary=Upper_boundary))","3bb3dc32":"#outliers0 = StudentsPerformance[StudentsPerformance['math score']>111]['math score']\n#outliers0","b8865fa4":"StudentsPerformance['Total Score %']=((StudentsPerformance['math score'] + StudentsPerformance['reading score'] + StudentsPerformance['writing score'])\/300) *100\n#StudentsPerformance['Average Score']=(StudentsPerformance['Total Score'])\/3\nStudentsPerformance['status'] = StudentsPerformance.apply(lambda StudentsPerformance : 'failed' if StudentsPerformance['Total Score %']< 50 else 'passed', axis = 1)\n\n\nStudentsPerformance.head()","d53e6875":"StudentsPerformance['status'].value_counts()","3332d21b":"StudentsPerformance.columns[StudentsPerformance.dtypes==object]\n","8f4b749e":"StudentsPerformance['race\/ethnicity'].unique()","93e346f5":"cleanup_nums = { \"race\/ethnicity\": {\"group A\": 0, \"group B\": 1, \"group C\": 2,\"group D\": 3,\"group E\": 4 },\"gender\": {\"male\": 0, \"female\": 1}, \"status\": {\"passed\": 1, \"failed\": 0}}\nStudentsPerformance.replace(cleanup_nums, inplace=True)\n\nStudentsPerformance.head()\n","bbeba35d":"\n#Null Hypothesis( H0 ): There is no difference in the pass\/fail status between students females and males.\n\n\nimport random\nmale = StudentsPerformance[StudentsPerformance['gender'] == 0]\nfemale = StudentsPerformance[StudentsPerformance['gender'] == 1]\n\n## empty list for storing mean sample\nm_mean_samples = []\nf_mean_samples = []\n\nfor i in range(50):\n    m_mean_samples.append(np.mean(random.sample(list(male['status']),50,)))\n    f_mean_samples.append(np.mean(random.sample(list(female['status']),50,)))","e2b9ed02":"ttest,pval = stats.ttest_rel(m_mean_samples, f_mean_samples)\nprint(float(pval))\nif pval<0.05:\n    print(\"reject null hypothesis\")\nelse:\n    print(\"accept null hypothesis\")","e85be827":"ztest ,pval1 = stests.ztest(m_mean_samples,f_mean_samples, value=0,alternative='two-sided')\nif pval1<0.05:\n    print(\"reject null hypothesis\")\nelse:\n    print(\"accept null hypothesis\")","31063f44":"sns.barplot(x=StudentsPerformance['gender'],y=StudentsPerformance['status']);","da24c014":"\n#Null Hypothesis( H0 ): There is no difference in the pass\/fail status among students of different races.\n#Alternative Hypothesis( HA ): There is a difference in the pass\/fail status among students of different races\n\nGroup_A = StudentsPerformance[StudentsPerformance['race\/ethnicity'] == 0]\nGroup_B = StudentsPerformance[StudentsPerformance['race\/ethnicity'] == 1]\nGroup_C = StudentsPerformance[StudentsPerformance['race\/ethnicity'] == 2]\nGroup_D = StudentsPerformance[StudentsPerformance['race\/ethnicity'] == 3]\nGroup_E = StudentsPerformance[StudentsPerformance['race\/ethnicity'] == 4]\n\n\n## empty list for storing mean sample\nG0_mean_samples=[]\nG1_mean_samples=[]\nG2_mean_samples=[]\nG3_mean_samples=[]\nG4_mean_samples=[]\n\nfor i in range(50):\n    G0_mean_samples.append(np.mean(random.sample(list(Group_A['status']),50,)))\n    G1_mean_samples.append(np.mean(random.sample(list(Group_B['status']),50,)))\n    G2_mean_samples.append(np.mean(random.sample(list(Group_C['status']),50,)))\n    G3_mean_samples.append(np.mean(random.sample(list(Group_D['status']),50,)))\n    G4_mean_samples.append(np.mean(random.sample(list(Group_E['status']),50,)))\n\n    \n                         \nF, p = stats.f_oneway(G0_mean_samples, G1_mean_samples, G2_mean_samples,G3_mean_samples,G4_mean_samples)\n\nprint(\"p-value for significance is: \", p)\nif p<0.05:\n    print(\"reject null hypothesis\")\nelse:\n    print(\"accept null hypothesis\")","8af3cd50":"#Plot\nsns.barplot(x=StudentsPerformance['race\/ethnicity'],y=StudentsPerformance['status']);\n","8939ee0d":"*Very few outliers*","a3f62acc":"*About 90% of the students in race Group E passed. whereas about 83% of the students in race Group A passed.*","50df5887":"*looks good (no outliers)*","1dd04d67":"*There's a slight difference*","589086f2":"no null values","8db40c1e":"*Data is clean*","0bac32bb":"# Getting Data Ready #","c590b473":"# Feature Engineering #\nAdding new features from numerical values\n","b781a720":"# Examining Data #","8e7e4460":"# Hypothesis Testing","0b958323":"*no duplicates :)*"}}