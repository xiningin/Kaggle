{"cell_type":{"eba574aa":"code","fdcf644c":"code","bc13ebdd":"code","ba55f3be":"code","b7d4b5dc":"code","4af0c92e":"code","6af5e8c5":"code","7143d52b":"code","9faf3fd9":"code","44c49cf5":"code","15c6d107":"markdown","4c8bc5a1":"markdown","610f030f":"markdown","4dd9f444":"markdown","166de527":"markdown","05f937ed":"markdown"},"source":{"eba574aa":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.svm import LinearSVR, SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","fdcf644c":"data = pd.read_csv('..\/input\/are-your-employees-burning-out\/train.csv')","bc13ebdd":"data","ba55f3be":"data.info()","b7d4b5dc":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Drop Employee ID column\n    df = df.drop('Employee ID', axis=1)\n    \n    # Drop rows with missing target values\n    missing_target_rows = df.loc[df['Burn Rate'].isna(), :].index\n    df = df.drop(missing_target_rows, axis=0).reset_index(drop=True)\n    \n    # Fill remaining missing values with column means\n    for column in ['Resource Allocation', 'Mental Fatigue Score']:\n        df[column] = df[column].fillna(df[column].mean())\n    \n    # Extract date features\n    df['Date of Joining'] = pd.to_datetime(df['Date of Joining'])\n    df['Join Month'] = df['Date of Joining'].apply(lambda x: x.month)\n    df['Join Day'] = df['Date of Joining'].apply(lambda x: x.day)\n    df = df.drop('Date of Joining', axis=1)\n    \n    # Binary encoding\n    df['Gender'] = df['Gender'].replace({'Female': 0, 'Male': 1})\n    df['Company Type'] = df['Company Type'].replace({'Product': 0, 'Service': 1})\n    df['WFH Setup Available'] = df['WFH Setup Available'].replace({'No': 0, 'Yes': 1})\n    \n    # Split df into X and y\n    y = df['Burn Rate']\n    X = df.drop('Burn Rate', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    # Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    X_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)\n    \n    return X_train, X_test, y_train, y_test","4af0c92e":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","6af5e8c5":"X_train","7143d52b":"y_train","9faf3fd9":"models = {\n    \"                     Linear Regression\": LinearRegression(),\n    \" Linear Regression (L2 Regularization)\": Ridge(),\n    \" Linear Regression (L1 Regularization)\": Lasso(),\n    \"                   K-Nearest Neighbors\": KNeighborsRegressor(),\n    \"                        Neural Network\": MLPRegressor(),\n    \"Support Vector Machine (Linear Kernel)\": LinearSVR(),\n    \"   Support Vector Machine (RBF Kernel)\": SVR(),\n    \"                         Decision Tree\": DecisionTreeRegressor(),\n    \"                         Random Forest\": RandomForestRegressor(),\n    \"                     Gradient Boosting\": GradientBoostingRegressor(),\n    \"                               XGBoost\": XGBRegressor(),\n    \"                              LightGBM\": LGBMRegressor(),\n    \"                              CatBoost\": CatBoostRegressor(verbose=0)\n}\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    print(name + \" trained.\")","44c49cf5":"for name, model in models.items():\n    print(name + \" R^2 Score: {:.5f}\".format(model.score(X_test, y_test)))","15c6d107":"# Results","4c8bc5a1":"# Task for Today  \n\n***\n\n## Employee Burnout Prediction  \n\nGiven *data about employees*, let's try to predict the **burnout rate** of a given employee.\n\nWe will use a variety of regression models to make our predictions.","610f030f":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/D3yyRMI_RTA","4dd9f444":"# Getting Started","166de527":"# Preprocessing","05f937ed":"# Training"}}