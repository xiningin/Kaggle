{"cell_type":{"5e4886d4":"code","e2c5f982":"code","b7394b77":"code","1d41d17d":"code","3e9936c5":"code","39d031fc":"code","73544b10":"code","0e7d1cf1":"code","c11b3faf":"code","bc8a71bb":"code","011ca458":"code","bb920c56":"code","0c7777a0":"code","d91a03e9":"markdown"},"source":{"5e4886d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e2c5f982":"import pandas as ps\nimport seaborn as sn\nimport matplotlib.pyplot as plt\nimport plotly.express as plex\n\n# Dataframe to begin with.\nmedals = ps.read_csv('\/kaggle\/input\/summer-olympic-medals-1986-2020\/Country_Medals.csv',sep = ';')\nmedals.head(10)","b7394b77":"# Starting with basic checks\n#medals.describe()\nmedals.shape\n\n# So 1344 records.","1d41d17d":"# Checking if country names are still valid\n# medals['Country_Name'].unique() # Seem legit including the 'Unified Team','Independent Olympic Participants'","3e9936c5":"host_is_home = medals.loc[medals['Country_Name']==medals['Host_country']]\nhost_is_home # Just 28 records","39d031fc":"host_is_home['Medal_tally'] = host_is_home['Gold']+host_is_home['Silver']+host_is_home['Bronze']\nhost_is_home","73544b10":"\nplt.figure(figsize=(28,10))\nsn.barplot(x='Country_Name',y='Medal_tally',data=host_is_home)","0e7d1cf1":"# Scatter plot to understand year counts\nplt.figure(figsize=(28,10))\nsn.scatterplot(x='Country_Name',y='Year',data=host_is_home)","c11b3faf":"host_is_home[host_is_home['Country_Name'] == \"Japan\"]","bc8a71bb":"## Medals total vs Year - Country Wise\n\ndef draw_barplot_for_each_country(countryname,host_is_home):\n    current_df = host_is_home[host_is_home['Country_Name'] == countryname]\n    #fig, ax =plt.subplots(1,current_df.shape[0])\n    \n    plt.figure(figsize=(11,7))\n    sn.barplot(x='Country_Name',y='Medal_tally',data=current_df,hue='Year')\n    \nnames = host_is_home['Country_Name'].unique() \nfor each_country in names:\n    draw_barplot_for_each_country(each_country,host_is_home)","011ca458":"host_is_home","bb920c56":"## Gold - Silver - Bronze vs Year - Country Wise\n\ndef draw_gsb_barplot_for_each_country(countryname,host_is_home):\n    cfilter_df = host_is_home[host_is_home['Country_Name'] == countryname]\n    current_df = cfilter_df.drop(columns=['Country_Code','Host_city','Host_country'])\n\n    df = current_df.reset_index().melt('index', var_name='cols',  value_name='vals')\n    sn.catplot(x=\"index\", y=\"vals\", hue='cols', data=df, kind='point')\n\n#names = host_is_home['Country_Name'].unique() \nfor each_country in names:\n    draw_gsb_barplot_for_each_country(each_country,host_is_home)","0c7777a0":"# A bit of a vague representation ? need some enhancements to hue-line pointers.","d91a03e9":"**Time for some plots**"}}