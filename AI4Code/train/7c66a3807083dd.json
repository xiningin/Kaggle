{"cell_type":{"1ec371de":"code","cf075f55":"code","cf9a5d07":"code","61e7a675":"code","434a49fc":"code","aae7d0ce":"code","704328cf":"code","9cc4af31":"code","5aa7c233":"code","62183a47":"code","eecd928c":"code","b24b4599":"code","6b9dbedc":"code","db6b41d9":"code","f4916f32":"code","33b0a78e":"code","52788e73":"code","dab895a3":"code","44b89243":"code","b8b80a86":"code","810e38db":"code","c6e40876":"code","9848e1e0":"code","7f2bf6cf":"code","34f98bfb":"code","d6830248":"code","e759b50b":"code","7c331cd9":"code","9a8ea2b4":"code","949b3621":"code","e549c135":"code","fff50075":"code","4f8b67da":"markdown","60ebfa12":"markdown","7afdde09":"markdown","1cc1b8e4":"markdown","63fa91e3":"markdown","7e9b2a88":"markdown","f4c8d25a":"markdown","2e4d8d6d":"markdown","428ece31":"markdown"},"source":{"1ec371de":"import numpy as np\nimport pandas as pd\n\nimport os","cf075f55":"from zipfile import ZipFile\n\nwith ZipFile('\/kaggle\/input\/nyc-taxi-trip-duration\/train.zip', 'r') as file:\n    file.extractall()\n    \nwith ZipFile('\/kaggle\/input\/nyc-taxi-trip-duration\/test.zip', 'r') as file:\n    file.extractall()\n    \nwith ZipFile('\/kaggle\/input\/nyc-taxi-trip-duration\/sample_submission.zip', 'r') as file:\n    file.extractall()","cf9a5d07":"train = pd.read_csv(\".\/train.csv\")\n\ntrain['pickup_datetime'] = pd.to_datetime(train['pickup_datetime'])\ntrain['dropoff_datetime'] = pd.to_datetime(train['dropoff_datetime'])\n\ntrain.head()","61e7a675":"test = pd.read_csv(\".\/test.csv\")\n\ntest['pickup_datetime'] = pd.to_datetime(test['pickup_datetime'])\n\ntest.head()","434a49fc":"sample_submission = pd.read_csv(\".\/sample_submission.csv\")\nsample_submission.head()","aae7d0ce":"train.isnull().sum()","704328cf":"test.isnull().sum()","9cc4af31":"train.describe()","5aa7c233":"train.quantile(.9)","62183a47":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(\n    rows=2, \n    cols=2, \n    subplot_titles=['vendor_id', 'passenger_count', 'store_and_fwd_flag', 'trip_duration']\n)\n\nfig.append_trace(go.Histogram(x=train[::500]['vendor_id'], nbinsx=10),1,1)\nfig.append_trace(go.Histogram(x=train[::500]['passenger_count'], nbinsx=10),1,2)\nfig.append_trace(go.Histogram(x=train[::500]['store_and_fwd_flag'], nbinsx=10),2,1)\nfig.append_trace(go.Histogram(x=train[::500]['trip_duration'], nbinsx=20),2,2)\n\nfig.show()","eecd928c":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(\n    rows=2, \n    cols=2, \n    subplot_titles=['vendor_id', 'passenger_count', 'store_and_fwd_flag', 'trip_duration']\n)\n\nfig.append_trace(go.Box(y=train[::500]['vendor_id']),1,1)\nfig.append_trace(go.Box(y=train[::500]['passenger_count']),1,2)\nfig.append_trace(go.Box(y=train[::500]['store_and_fwd_flag']),2,1)\nfig.append_trace(go.Box(y=train[::500]['trip_duration']),2,2)\n\nfig.show()","b24b4599":"# drop outliers\n\ntrain = train[train.trip_duration < 2000]","6b9dbedc":"import plotly.express as px\n\nfig = px.scatter_matrix(\n    train[::1000], \n    dimensions=['vendor_id', 'passenger_count', 'store_and_fwd_flag', 'trip_duration'], \n    color=\"trip_duration\"\n)\n\nfig.show()","db6b41d9":"y = train[\"trip_duration\"].copy().to_numpy().reshape(-1,1)\nX = train.drop([\"id\", \"dropoff_datetime\", \"trip_duration\"], axis=1).copy()","f4916f32":"def distance(df):\n    df = df.copy()\n    lat2 = df['dropoff_latitude']\n    lat1 = df['pickup_latitude']\n    lon2 = df['dropoff_longitude']\n    lon1 = df['pickup_longitude']\n    df['distance'] = np.sqrt(np.power(lat2 - lat1, 2) + np.power(lon2 - lon1, 2)) \n    \n    df = df.drop(['dropoff_latitude', 'pickup_latitude', 'dropoff_longitude', 'pickup_longitude'], axis=1)\n    return df","33b0a78e":"def distance_v2(df):\n    df = df.copy()\n    lat2 = df['dropoff_latitude']\n    lat1 = df['pickup_latitude']\n    lon2 = df['dropoff_longitude']\n    lon1 = df['pickup_longitude']\n    \n    dy = 12430 * (np.abs(lat2 - lat1)\/180)\n    dx = 24901 * (np.abs(lat2 - lat1)\/360) * np.cos(np.abs(lat2 + lat1)\/2)\n    df['distance'] = np.sqrt(np.power(dx, 2) + np.power(dy, 2)) \n    \n    df = df.drop(['dropoff_latitude', 'pickup_latitude', 'dropoff_longitude', 'pickup_longitude'], axis=1)\n    return df","52788e73":"def hour_of_the_day(df):\n    df = df.copy()\n    df['hour_day'] = [x.hour for x in df['pickup_datetime']]\n    \n    df = df.drop(['pickup_datetime'], axis=1)\n    return df","dab895a3":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)","44b89243":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error\n\nX_train = distance_v2(X_train)\nX_train = hour_of_the_day(X_train)\nX_train = X_train[['hour_day', 'passenger_count', 'distance']]\n\nlr_model = LinearRegression()\nlr_model.fit(X_train, y_train)\n","b8b80a86":"X_test = distance_v2(X_test)\nX_test = hour_of_the_day(X_test)\nX_test = X_test[['hour_day', 'passenger_count', 'distance']]","810e38db":"y_train_pred = lr_model.predict(X_train)\n\ny_test_pred = lr_model.predict(X_test)","c6e40876":"mae = mean_absolute_error(y_train, y_train_pred)\n\ntest_mae = mean_absolute_error(y_test, y_test_pred)\n\nprint(f\"mae: {mae}, test_mae: {test_mae}\")","9848e1e0":"pretty_plot = X_test.copy()\npretty_plot['real'] = y_test.reshape(-1,1)\npretty_plot['pred'] = y_test_pred.reshape(-1,1)\n\npretty_plot = pretty_plot.sort_values(by='real')\n\npretty_plot = pretty_plot.reset_index(drop=True)","7f2bf6cf":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(20, 5))\n\nplt.plot(pretty_plot.iloc[:,:3].index, pretty_plot.loc[:,'real'], label = \"real\")\n\nplt.plot(pretty_plot.iloc[:,:3].index, pretty_plot.loc[:,'pred'], label = \"pred\")\n\n#plt.xlabel('x')\n#plt.ylabel('y')\n#plt.title('title')\n\nplt.legend()\n\nplt.show()","34f98bfb":"import plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=pretty_plot.iloc[:,:3].index, y=pretty_plot.loc[:,'real'],mode='lines',name='real'))\nfig.add_trace(go.Scatter(x=pretty_plot.iloc[:,:3].index, y=pretty_plot.loc[:,'pred'],mode='lines',name='pred'))\n\nfig.show()","d6830248":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)","e759b50b":"from sklearn.linear_model import SGDRegressor\n\nsgd_model = SGDRegressor(max_iter=1000, tol=1e-3)","7c331cd9":"last_test_mae = -1\n\npointer = 0\nfor i in range(10):\n    \n    X_train_small = X_train[pointer*16:(pointer+1)*16].copy()\n    y_train_small = y_train[pointer*16:(pointer+1)*16].copy()\n    \n    X_train_small = distance(X_train_small)\n    \n    X_train_small = hour_of_the_day(X_train_small)\n    \n    X_train_small = X_train_small[['hour_day', 'passenger_count', 'distance']]\n    \n    sgd_model.partial_fit(X_train_small, y_train_small.ravel())\n        \n    mae = mean_absolute_error(y_train_small, sgd_model.predict(X_train_small))\n\n    # Test\n    \n    X_test_small = X_test.copy()\n    y_test_small = y_test.copy()\n    \n    X_test_small = distance(X_test_small)\n    X_test_small = hour_of_the_day(X_test_small)\n    X_test_small = X_test_small[['hour_day', 'passenger_count', 'distance']]\n    \n    test_mae = mean_absolute_error(y_test_small, sgd_model.predict(X_test_small))\n\n    print(f\"iteration: {i}, mae: {mae}, test_mae: {test_mae}\")\n    \n    if (pointer+1)*100 > len(X_train):\n        pointer = 0\n    \n    if last_test_mae == test_mae:\n        break\n    else:\n        last_test_mae = test_mae","9a8ea2b4":"X_val = test.drop([\"id\"], axis=1).copy()","949b3621":"X_val = distance_v2(X_val)\nX_val = hour_of_the_day(X_val)\nX_val = X_val[['hour_day', 'passenger_count', 'distance']]\n\nsample_submission['trip_duration'] = lr_model.predict(X_val).astype(int)","e549c135":"sample_submission.head()","fff50075":"sample_submission.to_csv(\"sample_submission.csv\", index=False)","4f8b67da":"# Linear Regression Model (Using SGD)","60ebfa12":"# Predictions","7afdde09":"# Plot","1cc1b8e4":"# Data Analysis","63fa91e3":"# Util Functions","7e9b2a88":"# Load data","f4c8d25a":"# Train \/ Test Split","2e4d8d6d":"# Linear Regression","428ece31":"# Unzip data"}}