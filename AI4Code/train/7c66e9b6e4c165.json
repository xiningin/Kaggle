{"cell_type":{"a653cd1c":"code","16f1c466":"code","06dff0ec":"code","b3b91c18":"code","b987c981":"code","d8e16025":"code","2604d687":"code","d579bc22":"code","02ef98ac":"code","e9144cbf":"code","001a6567":"code","2c1ad5cd":"code","8d965782":"code","3d2315f7":"code","747fa2e0":"code","ad54157d":"code","40005608":"code","a133c948":"code","383aa1b5":"code","3718264b":"code","b898cf2f":"code","4e80b756":"code","4ed53a77":"code","fed8954f":"code","42eef2ca":"code","1018ba88":"code","53b873d4":"code","bd9ff596":"code","ec08bedd":"code","eeaf9fd2":"code","79daf072":"code","ce45bb60":"code","68d6f815":"code","caf70375":"code","905fadc3":"code","55793879":"code","6b729bde":"code","0a55dd6a":"code","3185dae2":"code","41dbd9c5":"code","44e46923":"code","cd10ecb8":"code","64a5998f":"code","ff38a56f":"code","6ae5030e":"code","a10bb713":"code","a4238c86":"code","5624cb3c":"code","cb732f56":"code","190ae42a":"code","240a14ee":"code","70bf5e14":"code","d1c00f1d":"code","aba42ec9":"code","eba495e1":"code","45afef82":"code","9533f495":"code","b5977991":"code","f61abb6d":"code","70431e00":"code","59b91344":"markdown","205512ad":"markdown","54daca46":"markdown","57203fb4":"markdown","7c784d30":"markdown","3276f0b4":"markdown","56c897fc":"markdown","cf318887":"markdown","2047ded9":"markdown","ec6e1173":"markdown","253d5fe7":"markdown","40f32fe9":"markdown","68c15e36":"markdown","c524077d":"markdown","12be18d7":"markdown","3da5fe4b":"markdown","c8ba5914":"markdown","185e8737":"markdown","821f0e06":"markdown","e7b35101":"markdown","16ea9836":"markdown","1ddaffac":"markdown","ed086408":"markdown","f1b3fb49":"markdown","45b0a7dc":"markdown","7feaee95":"markdown","819faf11":"markdown","16332355":"markdown","10a37791":"markdown","4046e164":"markdown","d8c6b51a":"markdown","ebf834f8":"markdown"},"source":{"a653cd1c":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport warnings\nfrom datetime import datetime\nimport calendar\nfrom math import sin, cos, sqrt, atan2, radians\nfrom folium import FeatureGroup, LayerControl, Map, Marker\nfrom folium.plugins import HeatMap\nimport matplotlib.dates as mdates\nimport matplotlib as mpl\nfrom datetime import timedelta\nimport datetime as dt\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_colwidth', -1)\nplt.style.use('fivethirtyeight')\nimport folium\nfrom sklearn.cluster import KMeans\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor\n\nimport pickle\n\n","16f1c466":"train = pd.read_csv('..\/input\/nyc-taxi-trip-duration\/train.zip')\ntest = pd.read_csv('..\/input\/nyc-taxi-trip-duration\/test.zip')\ntest.shape","06dff0ec":"# \ub0a0\uc9dc\ud615 \ubcc0\ud658\ntrain['pickup_datetime']=pd.to_datetime(train['pickup_datetime'],format='%Y-%m-%d %H:%M:%S')\ntrain['dropoff_datetime']=pd.to_datetime(train['dropoff_datetime'],format='%Y-%m-%d %H:%M:%S')\ntrain.head()","b3b91c18":"# \uacb0\uce21\uac12 check > \uc5c6\uc74c\ntrain.isnull().sum()","b987c981":"# \ub370\uc774\ud130\uc14b\uc758 time period check\n# 1\uc6d41\uc77c ~ 6\uc6d4 30\uc77c\uae4c\uc9c0\uc758 taxi trip data\nprint('Min pickup time:', min(train['pickup_datetime']))\nprint('Max pickup time:', max(train['pickup_datetime']))","d8e16025":"# Create new day, month, hour info from Pickup time\n# \uc2dc\uacc4\uc5f4 \uc790\ub8cc > \ub530\ub85c \ubd84\ub9ac\ntrain['pickup_date']= train['pickup_datetime'].dt.date\ntrain['pickup_day']=train['pickup_datetime'].apply(lambda x:x.day)\ntrain['pickup_hour']=train['pickup_datetime'].apply(lambda x:x.hour)\n# \uc624\ub298\uc758 \uc694\uc77c \uc54c\uc544\ub0b4\uae30 calendar.day_name[my_date.weekday()] \ntrain['pickup_day_of_week']=train['pickup_datetime'].apply(lambda x:calendar.day_name[x.weekday()])\n\ntrain['dropoff_date']= train['dropoff_datetime'].dt.date\ntrain['dropoff_day']=train['dropoff_datetime'].apply(lambda x:x.day)\ntrain['dropoff_hour']=train['dropoff_datetime'].apply(lambda x:x.hour)\ntrain['dropoff_day_of_week']=train['dropoff_datetime'].apply(lambda x:calendar.day_name[x.weekday()])\n\ntrain[['pickup_date','pickup_day', 'pickup_hour', 'pickup_day_of_week','dropoff_datetime','dropoff_day', 'dropoff_hour', 'dropoff_day_of_week']].head()","2604d687":"# Round lat lng to 3 decimal places\n# \uc704\ub3c4 \uacbd\ub3c4 \ubc18\uc62c\ub9bc\ntrain['pickup_latitude_round3']=train['pickup_latitude'].apply(lambda x: round(x,3))\ntrain['pickup_longitude_round3']=train['pickup_longitude'].apply(lambda x:round(x,3))\ntrain['dropoff_latitude_round3']=train['dropoff_latitude'].apply(lambda x:round(x,3))\ntrain['dropoff_longitude_round3']=train['dropoff_longitude'].apply(lambda x:round(x,3))\n\ntrain.head()","d579bc22":"# \uc704\ub3c4, \uacbd\ub3c4 \uae30\ubc18 \uc8fc\ud589\uac70\ub9ac(km) \uad6c\ud558\uae30\n# haversine_distances \uc774\uc6a9\ndef calculateDistance(row):\n    R=6373.0 # approximate radius of earth in km\n    pickup_lat=radians(row['pickup_latitude'])\n    pickup_lon=radians(row['pickup_longitude'])\n    dropoff_lat=radians(row['dropoff_latitude'])\n    dropoff_lon=radians(row['dropoff_longitude'])\n    dlon = dropoff_lon - pickup_lon\n    dlat = dropoff_lat - pickup_lat\n    a = sin(dlat \/ 2)**2 + cos(pickup_lat) * cos(dropoff_lat) * sin(dlon \/ 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    distance = R * c\n    return distance\n    ","02ef98ac":"train['trip_distance'] = train.apply(lambda row: calculateDistance(row), axis=1)\ntrain.head()","e9144cbf":"train['trip_duration_in_hour'] = train['trip_duration'].apply(lambda x: x\/3600)\ntrain.head()","001a6567":"# \ud0d0\uc0c9\uc801 \ubd84\uc11d\nplt.figure(figsize=(8,5))\nsns.distplot(train['trip_duration_in_hour']).set_title(\"Distribution of Trip Duration\")\nplt.xlabel('Trip Duration (in hour)')","2c1ad5cd":"# 24\uc2dc\uac04 \uc774\uc0c1\uc758 trip duration \uc874\uc7ac > \uc774\uc0c1\uce58\n\noutlier_trip_duration = train.loc[train['trip_duration_in_hour']>24]\noutlier_trip_duration","8d965782":"plt.figure(figsize=(8,5))\nsns.distplot(np.log(train['trip_duration'].values)).set_title('Distribution of Trip Duration')\nplt.title('Distribution of Trip duration (sec) in Log Scale')","3d2315f7":"pickup=train.groupby(['pickup_latitude_round3','pickup_longitude_round3'])['id'].count().reset_index().rename(columns={'id':'Num_Trips'})","747fa2e0":"# NY \uc704\ub3c4 \uacbd\ub3c4 \npickup_map = folium.Map(location = [40.730610,-73.935242],zoom_start = 10,)\n#print(pickup.shape)\n### For each pickup point add a circlemarker\n'''\nfor index, row in pickup.iterrows():\n    \n    folium.CircleMarker([row['pickup_latitude_round3'], row['pickup_longitude_round3']],\n                        radius=3,\n                        \n                        fill_color=\"#3db7e4\", \n                        fill_opacity=0.9\n                       ).add_to(pickup_map)\n    count=count + 1\n\n\n'''\n\nhm_wide = HeatMap(list(zip(pickup.pickup_latitude_round3.values, pickup.pickup_longitude_round3.values, np.array(pickup.Num_Trips.values).astype('float64'))),\n                     min_opacity=0.2,\n                     radius=5, blur=10,\n                     max_zoom=1  )\npickup_map.add_child(hm_wide)\n\npickup_map","ad54157d":"city_long_border = (-74.03, -73.75)\ncity_lat_border = (40.63, 40.85)\nfig, ax = plt.subplots(ncols=1, sharex = True, sharey=True)\nax.scatter(train['pickup_longitude'], train['pickup_latitude'], color = 'blue', label='train', alpha=0.1)\nfig.suptitle('Lat Lng of Pickups in Train Data as Scatter Plot')\n\nax.set_ylabel('latitude')\nax.set_xlabel('longitude')\nplt.ylim(city_lat_border)\nplt.xlim(city_long_border)","40005608":"drop=train.groupby(['dropoff_latitude_round3','dropoff_longitude_round3'])['id'].count().reset_index().rename(columns={'id':'Num_Trips'})","a133c948":"drop_map = folium.Map(location = [40.730610,-73.935242],zoom_start = 10,)\n\nhm_wide = HeatMap(list(zip(drop.dropoff_latitude_round3.values,\n                           drop.dropoff_longitude_round3.values,\n                           np.array(drop.Num_Trips.values).astype('float64'))),\n                     min_opacity=0.2,\n                     radius=5, blur=10,\n                     max_zoom=1)\n                  \ndrop_map.add_child(hm_wide)\n\n\ndrop_map","383aa1b5":"pickup= train.groupby(['pickup_latitude_round3', 'pickup_longitude_round3'])['trip_duration'].mean().reset_index().rename(columns={'trip_duration' : 'Avg_Trip_duration'})","3718264b":"pickup_map = folium.Map(location = [40.730610,-73.935242],zoom_start = 10,)\n\nhm_wide = HeatMap(list(zip(pickup.pickup_latitude_round3.values, pickup.pickup_longitude_round3.values, pickup.Avg_Trip_duration.values)), \n                 min_opacity=0.2,\n                 radius=7, blur=10, max_zoom=1)\npickup_map.add_child(hm_wide)\npickup_map","b898cf2f":"plt.figure(figsize=(8,5))\nsns.countplot(x=train['pickup_hour']).set_title('Pickup Hours Distribution')","4e80b756":"plt.figure(figsize=(8,5))\nsns.countplot(x=train['dropoff_hour']).set_title(\"Dropoff Hours Distribution\")","4ed53a77":"plt.figure(figsize=(8,5))\nplt.plot(train.groupby('pickup_date').count()[['id']], 'o-',label='train')\n\nplt.title('Distribution of Pickups Over time')","fed8954f":"plt.figure(figsize=(8,5))\nsns.kdeplot(np.log(train['trip_distance'].values)).set_title(\"Trip Distance Distribution\")\nplt.xlabel(\"Trip Distance (log)\")","42eef2ca":"plt.scatter(np.log(train['trip_distance'].values), np.log(train['trip_duration'].values),\n              color='blue', label='train')\nplt.title(\"Distribution of Trip Distance vs Trip Duration\")\nplt.xlabel(\"Trip Distance (log scale)\")\nplt.ylabel(\"Trip Duration (log scale)\")","1018ba88":"avg_duration_hour = train.groupby(['pickup_hour'])['trip_duration'].mean().reset_index().rename(columns={'trip_duration':'avg_trip_duration'})\nplt.figure(figsize=(8,5))\nplt.plot(train.groupby(['pickup_hour'])['trip_duration'].mean(),'o-')","53b873d4":"plt.figure(figsize=(8,5))\nsns.countplot(train['pickup_day_of_week'],order=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday', 'Sunday'])","bd9ff596":"avg_duration_day=train.groupby(['pickup_day_of_week'])['trip_duration'].mean().reset_index().rename(columns={'trip_duration':'avg_trip_duration'})\n","ec08bedd":"plt.figure(figsize=(8,5))\nsns.barplot(x='pickup_day_of_week',y='avg_trip_duration',data=avg_duration_day,order=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday', 'Sunday']).set_title(\"Avg Trip Duration vs Pickup Days of Week\")","eeaf9fd2":"def calculateBearing(lat1, lng1, lat2, lng2):\n    R = 6371\n    lng_delta_rad = np.radians(lng2 - lng1)\n    lat1, lng1, lat2, lng2 = map(np.radians, (lat1, lng1, lat2, lng2))\n    y = np.sin(lng_delta_rad) * np.cos(lat2)\n    x = np.cos(lat1) * np.sin(lat2) - np.sin(lat1) * np.cos(lat2) * np.cos(lng_delta_rad)\n    return np.degrees(np.arctan2(y, x))","79daf072":"train['bearing']=train.apply(lambda row:calculateBearing(row['pickup_latitude_round3'],row['pickup_longitude_round3'],row['dropoff_latitude_round3'],row['dropoff_longitude_round3']),axis=1)","ce45bb60":"# Bearing \ubd84\ud3ec\nsns.kdeplot(train['bearing'])","68d6f815":"# Bearing vs Trip Duration\nplt.figure(figsize=(8,5))\nplt.scatter(train['bearing'].values,y=np.log(train['trip_duration'].values))\nplt.xlabel(\"Bearing\")\nplt.ylabel(\"Trip Duration (log scale)\")","caf70375":"train['store_and_fwd_flag'].value_counts()","905fadc3":"plt.figure(figsize=(8,5))\nsns.kdeplot(np.log(train.loc[train['store_and_fwd_flag']=='Y','trip_duration'].values),label= 'Store and Fwd =Yes')\nsns.kdeplot(np.log(train.loc[train['store_and_fwd_flag']=='N','trip_duration'].values),label= 'Store and Fwd =No')\n   \nplt.title(\"Distribution of  Store and Fwd Flag vs Trip Duration(log scale)\")\nplt.xlabel('Trip Duration (log scale)')\nplt.ylabel('Density')","55793879":"coords = np.vstack((train[['pickup_latitude', 'pickup_longitude']].values,\n                    train[['dropoff_latitude', 'dropoff_longitude']].values,\n                    test[['pickup_latitude', 'pickup_longitude']].values,\n                    test[['dropoff_latitude', 'dropoff_longitude']].values))\nkmeans = KMeans(n_clusters=8, random_state=0).fit(coords)\ntrain.loc[:, 'pickup_neighbourhood'] = kmeans.predict(train[['pickup_latitude', 'pickup_longitude']])\ntrain.loc[:, 'dropoff_neighbourhood'] = kmeans.predict(train[['dropoff_latitude', 'dropoff_longitude']])\ncity_long_border = (-74.03, -73.75)\ncity_lat_border = (40.63, 40.85)\nfig, ax = plt.subplots(ncols=1, sharex=True, sharey=True)\nax.scatter(train['pickup_longitude'], train['pickup_latitude'],\n              c=train['pickup_neighbourhood'], label='train', alpha=0.1)\n\nfig.suptitle('Pickup Neighbourhood')\n\nax.set_ylabel('latitude')\nax.set_xlabel('longitude')\nplt.ylim(city_lat_border)\nplt.xlim(city_long_border)","6b729bde":"plt.figure(figsize=(8,5))\nsns.countplot(train['pickup_neighbourhood']).set_title(\"Distribution of Number of Pickups across Neighbourhoods\")","0a55dd6a":"avg_duration_neighbourhood = train.groupby(['pickup_neighbourhood'])['trip_duration'].mean().reset_index().rename(columns={'trip_duration':'avg_trip_duration'})\n\nplt.figure(figsize=(8,5))\nsns.barplot(x='pickup_neighbourhood',y='avg_trip_duration',data=avg_duration_neighbourhood).set_title(\"Avg Trip Duration vs Neighbourhood\")","3185dae2":"train['avg_speed_kph']=train['trip_distance']\/train['trip_duration_in_hour']\nplt.figure(figsize=(8,5))\nsns.kdeplot(train['avg_speed_kph'].values).set_title(\"Distribution of Average Speed (in kph)\")\n","41dbd9c5":"print(\"Average speed is\",np.mean(train['avg_speed_kph']),\"kph\") #The average speed is 14 kmph","44e46923":"avg_speed_per_day = train.groupby(['pickup_day_of_week'])['avg_speed_kph'].mean().reset_index()\n\nplt.figure(figsize=(8,5))\nsns.barplot(x='pickup_day_of_week',y='avg_speed_kph',data=avg_speed_per_day,order=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday', 'Sunday']).set_title(\"Avg Speed (kph) vs Pickup Days of Week\")","cd10ecb8":"test['pickup_datetime']=pd.to_datetime(test['pickup_datetime'],format='%Y-%m-%d %H:%M:%S')\n#test['dropoff_datetime']=pd.to_datetime(test['dropoff_datetime'],format='%Y-%m-%d %H:%M:%S')\ntest['pickup_date']= test['pickup_datetime'].dt.date\ntest['pickup_day']=test['pickup_datetime'].apply(lambda x:x.day)\ntest['pickup_hour']=test['pickup_datetime'].apply(lambda x:x.hour)\ntest['pickup_day_of_week']=test['pickup_datetime'].apply(lambda x:calendar.day_name[x.weekday()])\n#test['dropoff_date']= test['dropoff_datetime'].dt.date\n#test['dropoff_day']=test['dropoff_datetime'].apply(lambda x:x.day)\n#test['dropoff_hour']=test['dropoff_datetime'].apply(lambda x:x.hour)\n#test['dropoff_day_of_week']=test['dropoff_datetime'].apply(lambda x:calendar.day_name[x.weekday()])\ntest['pickup_latitude_round3']=test['pickup_latitude'].apply(lambda x:round(x,3))\ntest['pickup_longitude_round3']=test['pickup_longitude'].apply(lambda x:round(x,3))\ntest['dropoff_latitude_round3']=test['dropoff_latitude'].apply(lambda x:round(x,3))\ntest['dropoff_longitude_round3']=test['dropoff_longitude'].apply(lambda x:round(x,3))\ntest['trip_distance']=test.apply(lambda row:calculateDistance(row),axis=1)\n#test['trip_duration_in_hour']=test['trip_duration'].apply(lambda x:x\/3600)\ntest['bearing']=test.apply(lambda row:calculateBearing(row['pickup_latitude_round3'],row['pickup_longitude_round3'],row['dropoff_latitude_round3'],row['dropoff_longitude_round3']),axis=1)\ntest.loc[:, 'pickup_neighbourhood'] = kmeans.predict(test[['pickup_latitude', 'pickup_longitude']])\ntest.loc[:, 'dropoff_neighbourhood'] = kmeans.predict(test[['dropoff_latitude', 'dropoff_longitude']])","64a5998f":"# ?\ndrop_cols=['avg_speed_kph','trip_duration_in_hour','dropoff_date','dropoff_day','dropoff_hour','dropoff_day_of_week','dropoff_datetime','pickup_latitude','pickup_longitude','dropoff_latitude','dropoff_longitude']\ntraining=train.drop(drop_cols,axis=1)\ntesting=test.drop(['pickup_latitude','pickup_longitude','dropoff_latitude','dropoff_longitude'],axis=1)","ff38a56f":"training['log_trip_duration']=training['trip_duration'].apply(lambda x:np.log(x))\ntraining.drop(['trip_duration'],axis=1,inplace=True)","6ae5030e":"print(\"Training Data Shape \",training.shape)\nprint(\"Testing Data Shape \",testing.shape)","a10bb713":"def encodeDays(day_of_week):\n    day_dict = {'Sunday':0,'Monday':1,'Tuesday':2,'Wednesday':3,'Thursday':4,'Friday':5,'Saturday':6}\n    return day_dict[day_of_week]","a4238c86":"training['pickup_day_of_week']=training['pickup_day_of_week'].apply(lambda x:encodeDays(x))\ntesting['pickup_day_of_week']=testing['pickup_day_of_week'].apply(lambda x:encodeDays(x))","5624cb3c":"training.to_csv('input_training.csv', index=False)\ntesting.to_csv(\"input_testing.csv\",index=False)\ndel training\ndel testing\ndel train\ndel test","cb732f56":"def LabelEncoding(train_df,test_df,max_levels=2):\n    for col in train_df:\n        if train_df[col].dtype == 'object':\n            if len(list(train_df[col].unique())) <= max_levels:\n                le = preprocessing.LabelEncoder()\n                le.fit(train_df[col])\n                train_df[col]=le.transform(train_df[col])\n                test_df[col]=le.transform(test_df[col])\n    return [train_df,test_df]\n                \n\ndef readInputAndEncode(input_path,train_file,test_file,target_column):\n    training=pd.read_csv(input_path+train_file)\n    testing=pd.read_csv(input_path+test_file)\n   \n    training,testing=LabelEncoding(training,testing)\n    \n    #print(\"Training Data Shape after Encoding \",training.shape)\n    #print(\"Testing Data Shape after Encoding \",testing.shape)\n    #Check if all train columns are there in test data. If not add the column to test data and replace it with zero\n    train_cols=training.columns.tolist()\n    test_cols=testing.columns.tolist()\n    col_in_train_not_test=set(train_cols)-set(test_cols)\n    for col in col_in_train_not_test:\n        if col!=target_column:\n            testing[col]=0\n    col_in_test_not_train=set(test_cols)-set(train_cols)\n    for col in col_in_test_not_train:\n        training[col]=0\n    print(\"Training Data Shape after Processing \",training.shape)\n    print(\"Testing Data Shape after Processing \",testing.shape)\n    return [training,testing]","190ae42a":"train,test=readInputAndEncode(\"\",'input_training.csv','input_testing.csv','log_trip_duration')\ntrain.drop(['pickup_date'],axis=1,inplace=True)\ntest.drop(['pickup_date'],axis=1,inplace=True)\ntrain.drop(['pickup_datetime'],axis=1,inplace=True)\ntest.drop(['pickup_datetime'],axis=1,inplace=True)\ntest_id=test['id']\ntrain.drop(['id'],axis=1,inplace=True)\ntest.drop(['id'],axis=1,inplace=True)","240a14ee":"def GetFeaturesAndSplit(train,test,target,imputing_strategy='median',split=0.25,imputation=True):\n    labels=np.array(train[target])\n    training=train.drop(target, axis = 1)\n    training = np.array(training)\n    testing=np.array(test)\n    if imputation==True:\n        imputer=Imputer(strategy=imputing_strategy,missing_values=np.nan)\n        imputer.fit(training)\n        training=imputer.transform(training)\n        testing=imputer.transform(testing)\n    train_features, validation_features, train_labels, validation_labels = train_test_split(training, labels, test_size = split, random_state = 42)\n    return [train_features,validation_features,train_labels,validation_labels,testing]\n\n# \uacb0\uce21\uac12?","70bf5e14":"train_features,validation_features,train_labels,validation_labels,testing=GetFeaturesAndSplit(train,test,'log_trip_duration',imputation=False)","d1c00f1d":"lm=linear_model.LinearRegression()\nlm.fit(train_features,train_labels)","aba42ec9":"valid_pred=lm.predict(validation_features)","eba495e1":"rmse=mean_squared_error(validation_labels,valid_pred)\nprint(\"Root Mean Squared Error for Linear Regression(log scale) \",rmse)","45afef82":"test_pred=lm.predict(testing)\nsubmit=pd.DataFrame()\nsubmit['id']=test_id\nsubmit['trip_duration']=np.exp(test_pred)\nsubmit.to_csv(\"submission_linear_regression_baseline.csv\",index=False) #0.64221 on Leader board\ndel submit","9533f495":"rf = RandomForestRegressor(n_estimators = 100, random_state = 42)","b5977991":"rf.fit(train_features,train_labels)","f61abb6d":"valid_pred_rf=rf.predict(validation_features)\nrmse=mean_squared_error(validation_labels,valid_pred_rf)\nprint(\"Root Mean Squared Error for Random Forest\",rmse)","70431e00":"test_pred=rf.predict(testing)\nsubmit=pd.DataFrame()\nsubmit['id']=test_id\nsubmit['trip_duration']=np.exp(test_pred)\nsubmit.to_csv(\"submission_random_forest_baseline.csv\",index=False)","59b91344":"#### Which hours are pickup and dropoff higher?\n- \uc5b4\ub290 \uc2dc\uac04\ub300\uac00 \uc2b9\ud558\ucc28\uac00 \ub192\uc744\uae4c?","205512ad":"Log transformation of the trip duration results in a normal distribution. Most trips are between 54 sec (exp(4)) and 2980 sec (exp(8)) . This indicates that most trip are withing one hour. But, there are trips which are less than a minute and need to be explored in detail. There are trips lasting for 100 hours which is weird as the taxi rides are within New York\n\n- \uc815\uaddc\ud654 \ubcc0\ud658\n- \ub300\ubd80\ubd84\uc758 \uc5ec\ud589 54\ucd08 ~ 2980\ucd08(\uc57d 50\ubd84)\n- 1\ubd84 \ubbf8\ub9cc\uc774\ub098 100\uc2dc\uac04 \ucd08\uacfc\ub41c \ub370\uc774\ud130 \uc0b4\ud3b4\uc57c \ud55c\ub2e4.","54daca46":"The outliers in trip duration are all around bearing -50 degrees\n\n#### Distribution of Store and FWD Flag\nstore_and_fwd_flag - \uc774 \ud50c\ub798\uadf8\ub294 \ucc28\ub7c9\uc774 \uc11c\ubc84\uc640 \uc5f0\uacb0\ub418\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc5d0 \uacf5\uae09\uc5c5\uccb4\uc5d0 \uc804\uc1a1\ud558\uae30 \uc804\uc5d0 \ud2b8\ub9bd \ub808\ucf54\ub4dc\ub97c \ucc28\ub7c9 \uba54\ubaa8\ub9ac\uc5d0 \ubcf4\uad00\ud588\ub294\uc9c0 \uc5ec\ubd80\ub97c \ud45c\uc2dc\ud568","57203fb4":"#### Create a caluclated field Bearing\nBearing measures the direction of travel The formula is: \u03b8 = atan2( sin \u0394\u03bb \u22c5 cos \u03c62 , cos \u03c61 \u22c5 sin \u03c62 \u2212 sin \u03c61 \u22c5 cos \u03c62 \u22c5 cos \u0394\u03bb ) \u03bb is the longitude\n- \ubca0\uc5b4\ub9c1 \uacf5\uc2dd\n- \ud1a0\uc9c0 \ud2b9\uc131\uc744 \uc2dd\ubcc4\ud558\uac70\ub098 \uc0ac\uc6a9\uc790\uc758 \uc704\uce58\ub97c \uc815\ud655\ud788 \ud30c\uc545\ud558\ub294 \ub370 \uc0ac\uc6a9(\ubc29\ud5a5)","7c784d30":"The pickups are much lower in the early mornings. Most pickips are around highest between 6 to 8 pm\n- \uc774\ub978 \uc544\uce68\uc5d0 \ub0ae\uace0 \uc800\ub141 6\uc2dc\ubd80\ud130 8\uc2dc\uc5d0 \uc2b9\ucc28\ub97c \ub9ce\uc774 \ud55c\ub2e4.","3276f0b4":"Distribution of dropoff hour very similar to pickup hour\n\n#### Pickups over the entire time period","56c897fc":"### Trip Duration vs Trip Distance\n- \uc57d\ud55c \uc591\uc758 \uc0c1\uad00\uad00\uacc4\n- \uc8fc\ud589\uac70\ub9ac \ub298\uc5b4\ub0a0\uc218\ub85d \uc8fc\ud589 \uc2dc\uac04 \ub298\uc5b4\ub0a8","cf318887":"### Building Models\n\nFrom the training data we need to drop \"dropoff datetime features\". We also only keep lat lng rounded to 3 decimal places\n- dropoff data \uc0ad\uc81c","2047ded9":"- \ud3c9\uade0 \uc8fc\ud589\uc18d\ub3c4\uac00 \uc77c\uc694\uc77c\uacfc \uc6d4\uc694\uc77c\uc5d0 \ub192\ub2e4.\n\n### Feature Engineering on Test Data","ec6e1173":"Trip duration increases between 10 to 15 hours.\n- 10\uc2dc\uc5d0\uc11c 3\uc2dc\uc0ac\uc774 Trip duration \ub298\uc5b4\ub0a8\n\n### \uc694\uc77c\n#### Distribution of Pickups across Days\n","253d5fe7":"\uc9c0\uc5ed 0,3,6 \uc21c\uc73c\ub85c pickup\uc774 \uc824 \ub9ce\uc774 \uc77c\uc5b4\ub09c\ub2e4.","40f32fe9":"#### Heatmap of common locations from where pickup and dropoff occurs","68c15e36":"There is a drop seen in the number of pick ups in end the January 2016\n- 2\uc6d4 \uac10\uc18c\n#### What is the distribution of Trip distance\n- \uc8fc\ud589\uac70\ub9ac \ubd84\ud3ec","c524077d":"There are 4 records which have very high trip duration, but the distance travelled is very low. These are outliers. But is there any particular location to which these trips begin or end? Trip duration is also skewed, so let us take log transformation.\n\nWe will not remove these from the analysis, because they might be a part of test data as well\n\n\n- \uc8fc\ud589 \uae30\uac04\uc774 \ub9e4\uc6b0 \uae38\uc9c0\ub9cc \uc8fc\ud589 \uac70\ub9ac\ub294 \ub9e4\uc6b0 \uc9e7\ub2e4.\n* trip duration : skewed > log transformation \n- \uc704 \uc5ec\ud589\ub4e4\uc774 \uc2dc\uc791\ub418\uac70\ub098 \ub05d\ub098\ub294 \ud2b9\ubcc4\ud55c \uc7a5\uc18c\uac00 \uc788\uc744 \uc218\ub3c4 \uc788\ub2e4.\n* \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc758 \uc77c\ubd80\uc77c \uc218 \uc788\uae30\uc5d0 \uc81c\uac70\ud558\uc9c0 \uc54a\ub294\ub2e4.","12be18d7":"**1. Goal** : build a model that predicts the total ride duration of taxi trips in New York City\n\n\ub274\uc695 \uc2dc\ub0b4\uc758 \ud0dd\uc2dc\ub4e4\uc758 \uc2b9\uac1d \uc774\ub3d9\uc2dc\uac04\uc744 \uc608\uce21\ud558\ub294 \uac83\n\n**2. \ud3c9\uac00 \ubc29\uc2dd** : RMSLE > 0\uc5d0 \uac00\uae4c\uc6b8\uc218\ub85d \uc815\ud655\ub3c4 \ub192\ub2e4.","3da5fe4b":"The average trip duration, when trip originates from JFK is higher. If we zoom in, we can see that after the Manhattan, The pickups from JFK tend to have higher trip duration.\n\n- JFK\uc5d0\uc11c pickup\ud558\ub294 trip duration\uc774 \ub354 \ub192\ub2e4.\n- \ub9e8\ud558\ud2bc \uc774\ud6c4\n- \uc544\ub9c8 \uc5ec\ud589","c8ba5914":"\ucd1d \uc5ec\ud589\uc758 5~7 \uc2dc\uac04 \uc0ac\uc774\uc5d0 No\uac00 \ub354 \ub9ce\uc774 \ubd84\ud3ec\n\n#### Group Locations into cluster\nThis will help creating neighbourhoods. And pickups from certain neightbourhoods may have a longer trip duration\n\n\uc778\uadfc\uc9c0\uc5ed\uc744 \uc0dd\uc131\ud558\ub294 \ub370 \ub3c4\uc6c0\uc744 \uc900\ub2e4.\n\n\ud2b9\uc815 \uc778\uadfc\uc9c0\uc5ed\uc73c\ub85c\ubd80\ud130 \uc628 pickup\ub4e4\uc740 \uc544\ub9c8 \ub354 \uae34 \uc5ec\ud589\uc744 \ud560 \uc218\ub3c4 \uc788\ub2e4.\n\n---------\n\n**0. clustering?**\n\n\ube44\uc2b7\ud55c \ub370\uc774\ud130\ub07c\ub9ac \ubaa8\uc544\uc8fc\ub294 \uba38\uc2e0\ub7ec\ub2dd \uae30\ubc95, \ud328\ud134\uc774 \uc720\uc0ac\ud55c \uc0ac\uc6a9\uc790\ub97c \ubb36\uc5b4\uc8fc\ub294 \uc0ac\uc6a9\uc778\uc9c0\uc5d0 \ub110\ub9ac \uc4f0\uc784.\n\n**1. Algorithm - Kmeans**\n\nKMeans \ud074\ub7ec\uc2a4\ud130\ub9c1 \uc54c\uace0\ub9ac\uc998\uc740 n\uac1c\uc758 \uc911\uc2ec\uc810\uc744 \ucc0d\uc740 \ud6c4\uc5d0, \uc774 \uc911\uc2ec\uc810\uc5d0\uc11c \uac01 \uc810\uac04\uc758 \uac70\ub9ac\uc758 \ud569\uc774 \uac00\uc7a5 \ucd5c\uc18c\ud654\uac00 \ub418\ub294 \uc911\uc2ec\uc810 n\uc758 \uc704\uce58\ub97c \ucc3e\uace0, \uc774 \uc911\uc2ec\uc810\uc5d0\uc11c \uac00\uae4c\uc6b4 \uc810\ub4e4\uc744 \uc911\uc2ec\uc810\uc744 \uae30\uc900\uc73c\ub85c \ubb36\ub294 \ud074\ub7ec\uc2a4\ud130\ub9c1 \uc54c\uace0\ub9ac\uc998\uc774\ub2e4.\n\n\uc544\ub798 \uadf8\ub9bc\uc744 \ubcf4\uba74 3\uac1c\uc758 \uad70\uc9d1\uc774 \uc874\uc7ac\ud558\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\ub2e4. \uac01 \uad70\uc9d1\ubcc4\ub85c \uc911\uc2ec\uc810\uc774 \ucc0d\ud600 \uc788\ub294\ub370, \uc774 \uc911\uc2ec\uc810\uc758 \uc704\uce58\ub97c \uc6c0\uc9c1\uc5ec \uac00\uba74\uc11c \uac01 \uad70\uc9d1\uc758 \ub370\uc774\ud0c0\uc640 \uc911\uc2ec\uc810\uc758 \uac70\ub9ac\uac00 \uac00\uc7a5 \uc791\uc740 \uc911\uc2ec\uc810\uc744 \ucc3e\ub294 \uac83\uc774\ub2e4. \n\n![image.png](attachment:8c941dc9-e7e8-464a-b2e3-c2fc84508aaf.png)","185e8737":"We have to predict trip_duration. We will convert this to log scale and predict","821f0e06":"#### Average Speed across days of week - this is indication of traffic speed.\n- \uad50\ud1b5\uc18d\ub3c4","e7b35101":"#### Number of pickups in each neighbourhood\n- \uac01 \uc9c0\uc5ed \uc548\uc5d0\uc11c pickup \uc218\n","16ea9836":"Neighbourhood 2 has very high average Trip duration, though Neighbourhood 0 has majority of pickups\n\n- 2 \uc9c0\uc5ed\uc740 \uc704\uc640 \ube44\uad50\ud588\uc744 \ub54c, pickup\uc218\uc5d0 \ube44\ud574 \uc8fc\ud589\uc2dc\uac04\uc774 \uae38\ub2e4.\n- 0 \uc9c0\uc5ed\uc740 \uc704\uc640 \ube44\uad50\ud588\uc744 \ub54c, \uc9e7\uc740\uac70\ub9ac pickup\uc774 \ub300\ub2e4\uc218\ub2e4.\n\n### Distribution of Average speed","1ddaffac":"\uc704\ub3c4 \uacbd\ub3c4 \uc0ac\uc774\uc758 \uac70\ub9ac \uad6c\ud558\uae30\n![image.png](attachment:869c11c5-f764-46a8-aad0-15e4124e5614.png)\n","ed086408":"This graph clearly shows heavy density of pickups near JFK\n- JFK \uacf5\ud56d \uadfc\ucc98\uc5d0 \ubc00\ub3c4 \ubd84\ud3ec","f1b3fb49":"![image.png](attachment:a5a0a30b-fa46-4efc-b4be-528264fa37d0.png)","45b0a7dc":"### Apply Linear Regression\n","7feaee95":"### Apply Random Forest Regressor","819faf11":"Let us also encode day of week as numbers\n- \uc694\uc77c > \uc22b\uc790\ub85c \uc778\ucf54\ub529\n","16332355":"Dropoff Heatmap is similar to pickup\n\n#### heatmap of trip duration, when pickup originates from a point","10a37791":"\ucd9c\ucc98 : https:\/\/www.kaggle.com\/aiswaryaramachandran\/eda-baseline-model-0-40-rmse","4046e164":"The number of pickups are very low on Monday.From Tuesday to Friday the number of pickups keep increasing\n- \uc6d4\uc694\uc77c \uac00\uc7a5 \uc801\uace0 \ud654\uc694\uc77c\ubd80\ud130 \uae08\uc694\uc77c\uae4c\uc9c0 \uc0c1\uc2b9\n### \uc694\uc77c\ubcc4 \ud3c9\uade0 \uc8fc\ud589\uc2dc\uac04\n#### Avg Trip Duration over Days of week","d8c6b51a":"The highest average speed is on Thursday","ebf834f8":"### \uc2dc\uac04\n#### Is the trip duration higher at different hours?"}}