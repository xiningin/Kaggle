{"cell_type":{"436dd0af":"code","81ae7690":"code","ddb4f3e6":"code","ccbd28e5":"code","c57b70e5":"code","bb1aebef":"code","c6f7d099":"code","18d8497c":"code","0a85087a":"code","daee800d":"code","8941003c":"code","3db2cfa8":"code","fa624300":"code","f373a431":"code","38b467da":"code","5c1211c9":"code","852c45e6":"code","1246404f":"code","5f41b99d":"code","d18b400a":"code","b7f103c4":"code","58121a27":"markdown","1e642206":"markdown","592770b1":"markdown","cb481ce5":"markdown"},"source":{"436dd0af":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport tensorflow as tf\nimport seaborn as sns","81ae7690":"df = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\ndf","ddb4f3e6":"df.info()","ccbd28e5":"df.describe()","c57b70e5":"df.hist(figsize = (12, 12))\nplt.show()","bb1aebef":"sns.countplot(df['target'])","c6f7d099":"sns.countplot(df['target'],hue='sex',data=df)","18d8497c":"plt.figure(figsize=(12, 8))\nsns.heatmap(df.corr(), annot=True)","0a85087a":"from sklearn.preprocessing import StandardScaler\nx = df.drop(\"target\",axis=1)\ny = df['target']\n\nscaler = StandardScaler()\nscaler.fit(x)\nx_scaled = scaler.transform(x)","daee800d":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x_scaled,y, test_size=0.2, random_state=42)\nlen(x_scaled), len(x_train), len(x_test)","8941003c":"from sklearn.ensemble import RandomForestClassifier\nrf=RandomForestClassifier()","3db2cfa8":"rf.fit(x_train,y_train)","fa624300":"from sklearn.metrics import accuracy_score\npred_rf=rf.predict(x_test)\naccuracy=accuracy_score(pred_rf,y_test)\naccuracy","f373a431":"from sklearn.svm import SVC\nsvc=SVC()\nsvc.fit(x_train,y_train)","38b467da":"y_pred2=svc.predict(x_test)\naccuracy2=accuracy_score(y_pred2,y_test)\naccuracy2","5c1211c9":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier()","852c45e6":"knn.fit(x_train,y_train)\n","1246404f":"y_pred3=knn.predict(x_test)\naccuracy3=accuracy_score(y_pred3,y_test)\naccuracy3","5f41b99d":"tf.random.set_seed(42)\nmodel = tf.keras.Sequential([\n                               \n                               tf.keras.layers.Dense(100,activation='relu'),\n                               tf.keras.layers.Dense(100,activation='relu'),\n                               tf.keras.layers.Dense(1,activation='sigmoid')\n])\n\nmodel.compile(loss=tf.keras.losses.BinaryCrossentropy(),\n                optimizer=tf.keras.optimizers.Adam(),\n                metrics=['accuracy'])\n\nhistory = model.fit(x_train,y_train, epochs=100,verbose=1)","d18b400a":"pd.DataFrame(history.history).plot()\nplt.title('Model loss curve')","b7f103c4":"from sklearn.metrics import  classification_report,plot_confusion_matrix,confusion_matrix\ny_test = y_test\ntarget_names = [\"target_0\",\"target_1\"]\n\ndef class_report(model,y_test,pred,target_names):\n    print(classification_report(y_test,pred, target_names=target_names))\n    disp = plot_confusion_matrix(model, x_test, y_test,labels=[1,0])\n    disp.figure_.suptitle(\"Confusion Matrix\")\n    print(f\"Confusion matrix:\\n{disp.confusion_matrix}\")\n    plt.show()\n\n\nclass_report(knn,y_test,y_pred3,target_names)","58121a27":"# KNN","1e642206":"# TensorFlow","592770b1":"# SVM","cb481ce5":"# Random Forest"}}