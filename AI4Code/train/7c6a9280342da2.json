{"cell_type":{"097cdfc8":"code","8c1889a6":"code","aaf916d7":"code","edfd0579":"code","2855d6a9":"code","d9d92097":"code","786d8bbd":"code","d403bd6c":"code","dbb18326":"code","c7ed91a9":"code","8149679e":"code","27190df6":"markdown"},"source":{"097cdfc8":"import tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mig\n","8c1889a6":"import pathlib\nPATH = '..\/input\/pokemonclassification\/PokemonData\/'\ndata_dir = pathlib.Path(PATH)","aaf916d7":"CLASS_NAMES = np.array([item.name for item in data_dir.glob('*') if item.name != \"LICENSE.txt\"])\nCLASS_NAMES\n","edfd0579":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\nIDG = ImageDataGenerator(rescale = 1.\/255, validation_split=0.2, )\n\ntrain_data = IDG.flow_from_directory(PATH,target_size=(224,224),batch_size=32,classes = list(CLASS_NAMES),subset='training')\nvalidation_data = IDG.flow_from_directory(PATH,target_size=(224,224),batch_size=32,classes = list(CLASS_NAMES),subset='validation')\n","2855d6a9":"def show_batch(image_batch, label_batch):\n  plt.figure(figsize=(10,10))\n  for n in range(25):\n      ax = plt.subplot(5,5,n+1)\n      plt.imshow(image_batch[n])\n      plt.title(CLASS_NAMES[label_batch[n].argmax()])\n      plt.axis('off')\n     ","d9d92097":"image_batch, label_batch = next(train_data)\nshow_batch(image_batch, label_batch)","786d8bbd":"from keras.models import Sequential\nfrom keras import layers\nfrom keras.layers import BatchNormalization\nfrom keras import regularizers\nmodel = Sequential()\n##Convutional Layers\nmodel.add(layers.Conv2D(8, (4, 4),input_shape=(224,224,3)))\nmodel.add(layers.Activation('relu'))\nmodel.add(layers.Dropout(.25))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(layers.Conv2D(16, (4, 4)))\nmodel.add(layers.Activation('relu'))\nmodel.add(layers.Dropout(.25))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(layers.Conv2D(32, (4, 4)))\nmodel.add(layers.Activation('relu'))\nmodel.add(layers.Dropout(.25))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(layers.Conv2D(32, (4, 4)))\nmodel.add(layers.Activation('relu'))\nmodel.add(layers.Dropout(.25))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(layers.Conv2D(32, (4, 4)))\nmodel.add(layers.Activation('relu'))\nmodel.add(layers.Dropout(.25))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2)))\n\n##Fully Conneted Layers\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(256,activation='relu',kernel_regularizer=regularizers.l2(0.0001)))\nmodel.add(layers.Dropout(.5))\nmodel.add(layers.Dense(len(CLASS_NAMES),activation='softmax'))","d403bd6c":"\nmodel.summary()","dbb18326":"model.compile(optimizer='adam', loss=tf.keras.losses.categorical_crossentropy, metrics=['accuracy'])\n\nhist = model.fit_generator(train_data, epochs=37, steps_per_epoch = train_data.samples\/\/32, validation_data=validation_data, validation_steps = validation_data.samples\/\/32)","c7ed91a9":"plt.style.use('fivethirtyeight')\nplt.figure(figsize=(14,14))\nplt.plot(hist.history['accuracy'],label='accuracy',color='green')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.yticks(np.arange(0, 1, step=0.04))\nplt.show()","8149679e":"plt.figure(figsize=(20,20))\n#for _ in range(3):\nsam_x,sam_y = next(validation_data) \npred_ = model.predict(sam_x)\nfor i in range(15):\n    pred,y = pred_[i].argmax(), sam_y[i].argmax()\n    plt.subplot(4,4,i+1)\n    plt.imshow(sam_x[i])\n    title_ = 'Predict:' + str(CLASS_NAMES[pred])+ ';   Label:' + str(CLASS_NAMES[y])\n    plt.title(title_,size=11)\nplt.show()","27190df6":"**DEFINING CLASS**"}}