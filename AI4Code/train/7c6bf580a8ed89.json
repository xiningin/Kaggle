{"cell_type":{"12da1691":"code","f83c2e2d":"code","e3cbdad4":"code","b5c84dd8":"code","0f729eb4":"code","5399f2ec":"code","a2cf3ef4":"code","33b63bd2":"code","c24ecd47":"code","19f1d739":"code","277d5c65":"code","199b4895":"code","40150ea8":"code","003e219a":"code","089b98bf":"code","83364d5a":"code","a7eacd9f":"code","b24ac8fa":"code","e5c628b1":"code","dfbb7d9a":"code","5ca7e768":"code","7704f3fd":"code","f8493e61":"code","04698066":"markdown","ea8bc493":"markdown","7d1ad80d":"markdown","06a2ae67":"markdown","70c4b322":"markdown","83cf9131":"markdown","88565a08":"markdown","0b2192e4":"markdown","9d9fb425":"markdown","d8ad4d29":"markdown","4c918ba2":"markdown","ae687329":"markdown","58e1a939":"markdown","36a3c5d2":"markdown","1266cd37":"markdown","a3ea6d21":"markdown","935c5ec0":"markdown","71fb2ec7":"markdown","69bbc4c1":"markdown","d5040d0e":"markdown","9e090419":"markdown","00c5b2ad":"markdown"},"source":{"12da1691":"from sklearn import preprocessing, ensemble, model_selection\n\nimport numpy as np\nimport pandas as pd\nimport xgboost as xgb\nimport seaborn as sns","f83c2e2d":"%pylab inline","e3cbdad4":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b5c84dd8":"train_data = pd.read_csv('..\/input\/ghouls-goblins-and-ghosts-boo\/train.csv.zip', header=0, sep=',')\ntest_data = pd.read_csv('..\/input\/ghouls-goblins-and-ghosts-boo\/test.csv.zip', header=0, sep=',')","0f729eb4":"print('Shape of train data: ', train_data.shape)\nprint('Shape of test data: ', test_data.shape)","5399f2ec":"train_data.head()","a2cf3ef4":"test_data.head()","33b63bd2":"print('Column names:', list(train_data.columns))","c24ecd47":"train_data = train_data.drop(['id'], axis=1)\n\ntest_id = test_data['id']\ntest_data = test_data.drop(['id'], axis=1)","19f1d739":"sns.pairplot(train_data.drop('color', axis = 1), hue = 'type', palette = 'muted', diag_kind='kde')","277d5c65":"sns.countplot(x='color', hue='type', data=train_data)","199b4895":"sns.countplot(x='type', data=train_data)","40150ea8":"color_le = preprocessing.LabelEncoder()\n\ntrain_data_x = train_data\ncolor_le.fit(train_data_x['color'])\ntrain_data_x['color_int'] = color_le.transform(train_data_x['color'])\ntrain_data_x = train_data_x.drop(['color', 'type'], axis=1)\ntrain_data_x = train_data_x.to_numpy()\n\ntype_le = preprocessing.LabelEncoder()\n\ntrain_data_y = train_data['type']\ntype_le.fit(train_data_y)\ntrain_data_y = type_le.transform(train_data_y)\n\nprint('Unique type values:', train_data.type.unique())\nprint()\nprint('Original train_set_y:', np.array(train_data.type[:5]))\nprint('Encoded train_set_y:', train_data_y[:5])","003e219a":"test_data = test_data\ncolor_le.fit(test_data['color'])\ntest_data['color_int'] = color_le.transform(test_data['color'])\ntest_data = test_data.drop(['color'], axis=1)\ntest_data = test_data.to_numpy()","089b98bf":"print('test_data:')\nprint(test_data[:5])","83364d5a":"print('train_data_x:')\nprint(train_data_x[:5])\nprint('shape:', train_data_x.shape, 'type:', type(train_data_x))\nprint()\nprint('train_data_y:')\nprint(train_data_y[:5])\nprint('shape:', train_data_y.shape, 'type:', type(train_data_y))","a7eacd9f":"n_trees = [1] + list(range(5, 55, 5))\nscoring = []\nfor n_tree in n_trees:\n    estimator = ensemble.RandomForestClassifier(n_estimators = n_tree, min_samples_split=5, random_state=1)\n    score = model_selection.cross_val_score(estimator, train_data_x, train_data_y, \n                                             scoring = 'accuracy', cv = 3)    \n    scoring.append(score)\nscoring = np.asmatrix(scoring)\n\nscoring","b24ac8fa":"pylab.plot(n_trees, scoring.mean(axis = 1), marker='.', label='RandomForest')\npylab.grid(True)\npylab.xlabel('n_trees')\npylab.ylabel('score')\npylab.title('Accuracy score')\npylab.legend(loc='lower right')","e5c628b1":"from sklearn.model_selection import GridSearchCV\n\nparams = {'n_estimators': n_trees}\n\ngrid_search = GridSearchCV(ensemble.RandomForestClassifier(min_samples_split=5, random_state=1), params, cv=3, scoring='accuracy')\n\ngrid_search.fit(train_data_x, train_data_y)\n\nprint('Best n of trees: {}, best accuracy score: {}'.format(grid_search.best_params_['n_estimators'], grid_search.best_score_))","dfbb7d9a":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\ntrain_set_x, test_set_x, train_set_y, test_set_y = train_test_split(train_data_x, train_data_y, test_size=0.33, random_state=42)","5ca7e768":"best_n_tree = grid_search.best_params_['n_estimators']\nmodel = ensemble.RandomForestClassifier(n_estimators = n_tree, min_samples_split=5, random_state=1)\nmodel.fit(train_set_x, train_set_y)\npred_y = model.predict(test_set_x)\n\nscore = accuracy_score(test_set_y, pred_y)\nprint('Accuracy score:', score)","7704f3fd":"test_pred = model.predict(test_data)\nencoded_test_pred = type_le.inverse_transform(test_pred)\nprint('Test predictions:', encoded_test_pred[:5])","f8493e61":"submission = pd.DataFrame({'id': test_id, 'type':encoded_test_pred})\nsubmission.to_csv('submission.csv', index=False)","04698066":"Preprocessing test data for final prediction is the same as for train_data_x.","ea8bc493":"Loading data:","7d1ad80d":"# Ghouls, Goblins, and Ghosts... Boo!","06a2ae67":"Now let's fit our model and predict y for test set. Then calculate accuracy score for test set.","70c4b322":"Dataset contains categorical value column 'color'. Let's visualise it.","83cf9131":"Compare general amount of samples to classify for each value.","88565a08":"Preprocessed test data looks like:","0b2192e4":"Shape of datasets:","9d9fb425":"This is my first Kaggle competition and first try in machine learning. \n\nLink: https:\/\/www.kaggle.com\/c\/ghouls-goblins-and-ghosts-boo\n\nProblem description: create classification algorithm to distinguish type of monsters by given features.","d8ad4d29":"Visualising train dataset as a pairplot. Represents float values of columns 'bone_length', 'rotting_flesh', 'hair_length', 'has_soul'.","4c918ba2":"Alternate way to find best value of hyperparameter is to use GridSearchCV:","ae687329":"## 1 - Packages","58e1a939":"Finally, let's predict the 'type' variable for test_data.","36a3c5d2":"It's clearly seen, that both searches have the same results. So, we will use 20 trees for Random Forest Classifier. Now we will divide train data into train and test sets for our model.","1266cd37":"Final train x and y sets look like:","a3ea6d21":"Next we are splitting data to target and features sets. Let's apply label encoding for target values(replace string values by int) in target set and for 'color' column in feature set.","935c5ec0":"Check column names:","71fb2ec7":"First 5 rows of datasets:","69bbc4c1":"## 2 - Overview of the Dataset","d5040d0e":"Remove id columns from datasets as it won't be used:","9e090419":"In this project I am going to use Random Forest Classifier to classify types of creatures. We need to determine hyperparameter - number of trees in forest. Let's look through range of numbers 1, 5, ... 50. We will use cross validation with 3 foldes to find the best parameter.","00c5b2ad":"## 3 - Model"}}