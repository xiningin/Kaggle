{"cell_type":{"55635a85":"code","eca5db66":"code","2ef4a42d":"code","a273b9d5":"code","4a503556":"code","3010e1a9":"code","329d2391":"code","c4a817ac":"code","32376069":"code","112e89c6":"code","650f633d":"code","c0baac8d":"code","2f31557d":"code","3fda743e":"code","f0f2efd4":"code","a929ecd9":"code","4af14ebd":"code","057771ff":"code","fbba0175":"code","0d529c36":"code","83c0c0dd":"code","2ea71b87":"code","98d7e2db":"code","f385a27c":"code","df9f81bd":"code","523feaa2":"code","8bdb489a":"markdown","db664d93":"markdown","69162d36":"markdown","30970ac3":"markdown","9b201566":"markdown","3772bd99":"markdown","420ffa7d":"markdown","8d24dd99":"markdown","3b94e352":"markdown","2d8bf58c":"markdown","4c277232":"markdown","ced07990":"markdown","3ec281b0":"markdown","feacd43f":"markdown","11b2e040":"markdown","25ef15c8":"markdown","a5d070bf":"markdown","bf0afddf":"markdown","123a9175":"markdown","2b0173d2":"markdown","d3fd3248":"markdown","92d9edcd":"markdown","a2beacf2":"markdown","53c891f7":"markdown","f2fb9075":"markdown","5ea65ea0":"markdown","11fee26e":"markdown","0dd3ec13":"markdown","a5e7d91e":"markdown","d3acef87":"markdown","434c3211":"markdown","acda752e":"markdown","2e96d1c2":"markdown","c5de7e8a":"markdown","820a6e31":"markdown","7f1b47ca":"markdown","318b1d89":"markdown","776b5acc":"markdown","ad1e6936":"markdown","6e99f907":"markdown"},"source":{"55635a85":"# for visualization -------------------\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\n\n# for data pipeline --------------------\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import*\n\n# for prediction (machine learning models) ------------------------\n\nfrom sklearn.linear_model import*\nfrom sklearn.preprocessing import*\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.ensemble import*\nfrom sklearn.neighbors import*\nfrom sklearn import svm\nfrom sklearn.naive_bayes import*\nfrom sklearn import tree","eca5db66":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2ef4a42d":"df=pd.read_csv('\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')\ndf","a273b9d5":"print('shape of the dataframe is :',df.shape)","4a503556":"print('Information over the dataframe \\n')\nprint(df.info())","3010e1a9":"## check what type of values the 'quality' holds\n\ndf['quality'].value_counts()","329d2391":"qual=np.arange(3,9,1)\nqual","c4a817ac":"k=1\nfig,axes=plt.subplots(3,4,figsize=(18, 15))\nfig.suptitle('Quality Variation',fontsize=20)\nfor col in df.columns:\n    if col != 'quality':\n        arr=[]\n        for i in qual:\n            xx=df[df['quality']==i]\n            arr.append(np.mean(xx[col]))   \n        plt.subplot(3,4,k)\n        plt.plot(qual,arr,color='yellowgreen')\n        plt.title('variation from '+col)\n        k+=1\n         \nplt.show()","32376069":"a=np.arange(1,len(df)+1,1)\nplt.scatter(a,(df['volatile acidity']-min(df['volatile acidity']))\/(max(df['volatile acidity'])-min(df['volatile acidity'])),label='volatile acidity',s=5)\nplt.scatter(a,(df['fixed acidity']-min(df['fixed acidity']))\/(max(df['fixed acidity'])-min(df['fixed acidity'])),label='fixed acidity',s=5)\nplt.legend()\nplt.ylabel('scaler')\nplt.title('Dependance of volatile acidity upon fixed acidity')\nplt.show()","112e89c6":"plt.scatter(a,(df['chlorides']-min(df['chlorides']))\/(max(df['chlorides'])-min(df['chlorides'])),label='amount of chlorides',s=5)\nplt.scatter(a,(df['pH']-min(df['pH']))\/(max(df['pH'])-min(df['pH'])),label='pH level',s=5)\nplt.legend()\nplt.title('chlorides and pH')\nplt.ylabel('scaler')\nplt.show()","650f633d":"plt.scatter(a,(df['residual sugar']-min(df['residual sugar']))\/(max(df['residual sugar'])-min(df['residual sugar'])),label='amount of residual sufar',s=5)\nplt.scatter(a,(df['total sulfur dioxide']-min(df['total sulfur dioxide']))\/(max(df['total sulfur dioxide'])-min(df['total sulfur dioxide'])),label='total sulfur dioxide',s=5)\nplt.legend()\nplt.title('residual sugar and total SO2')\nplt.ylabel('scaler')\nplt.show()","c0baac8d":"sugar=(df['residual sugar']-min(df['residual sugar']))\/(max(df['residual sugar'])-min(df['residual sugar']))\nso2=(df['total sulfur dioxide']-min(df['total sulfur dioxide']))\/(max(df['total sulfur dioxide'])-min(df['total sulfur dioxide']))\nnew_att=np.add(sugar,so2)\/2\n\nplt.scatter(a,new_att,color='g')\nplt.title('added scatter plot of res sug. and tot SO2')\nplt.ylabel('scaler')\nplt.show()","2f31557d":"dx=df.sample(frac=1)\ndx.head()","3fda743e":"X_ns=df.drop('quality',1)\ny_ns=df['quality']\nX_s=dx.drop('quality',1)\ny_s=dx['quality']\nprint('shape of X :',X_s.shape)\nprint('shape of Y :',y_s.shape)","f0f2efd4":"X_train_ns,X_test_ns,y_train_ns,y_test_ns=train_test_split(X_ns,y_ns,test_size=0.2)\nX_train_s,X_test_s,y_train_s,y_test_s=train_test_split(X_s,y_s,test_size=0.2)\nprint('shape of train X : ',X_train_ns.shape)\nprint('shape of test X : ',X_test_ns.shape)\nprint('shape of train Y : ',y_train_ns.shape)\nprint('shape of test Y : ',y_test_ns.shape)","a929ecd9":"clf=['RFC','SVM','KNN','DT']\nsh_tr=[]\nsh_ts=[]\nns_tr=[]\nns_ts=[]","4af14ebd":"model=RandomForestClassifier(random_state=0)","057771ff":"# non-shuffled data\n\nmodel.fit(X_train_ns,y_train_ns)\nprint(' accuracy score over non-shuffled train data : ',model.score(X_train_ns,y_train_ns))\nprint(' model accuracy over non-shuffled test data : ',model.score(X_test_ns,y_test_ns))\nns_tr.append(model.score(X_train_ns,y_train_ns))\nns_ts.append(model.score(X_test_ns,y_test_ns))\n\n\n# shuffled data\n\nmodel.fit(X_train_s,y_train_s)\nprint(' accuracy score over shuffled train data : ',model.score(X_train_s,y_train_s))\nprint(' model accuracy over shuffled test data : ',model.score(X_test_s,y_test_s))\nsh_tr.append(model.score(X_train_s,y_train_s))\nsh_ts.append(model.score(X_test_s,y_test_s))","fbba0175":"model=svm.SVC()","0d529c36":"# non-shuffled data\n\nmodel.fit(X_train_ns,y_train_ns)\nprint(' accuracy score over non-shuffled train data : ',model.score(X_train_ns,y_train_ns))\nprint(' model accuracy over non-shuffled test data : ',model.score(X_test_ns,y_test_ns))\nns_tr.append(model.score(X_train_ns,y_train_ns))\nns_ts.append(model.score(X_test_ns,y_test_ns))\n\n\n# shuffled data\n\nmodel.fit(X_train_s,y_train_s)\nprint(' accuracy score over shuffled train data : ',model.score(X_train_s,y_train_s))\nprint(' model accuracy over shuffled test data : ',model.score(X_test_s,y_test_s))\nsh_tr.append(model.score(X_train_s,y_train_s))\nsh_ts.append(model.score(X_test_s,y_test_s))","83c0c0dd":"model=KNeighborsClassifier(n_neighbors=6)     # as we have prediction values from 3 to 8","2ea71b87":"# non-shuffled data\n\nmodel.fit(X_train_ns,y_train_ns)\nprint(' accuracy score over non-shuffled train data : ',model.score(X_train_ns,y_train_ns))\nprint(' model accuracy over non-shuffled test data : ',model.score(X_test_ns,y_test_ns))\nns_tr.append(model.score(X_train_ns,y_train_ns))\nns_ts.append(model.score(X_test_ns,y_test_ns))\n\n\n# shuffled data\n\nmodel.fit(X_train_s,y_train_s)\nprint(' accuracy score over shuffled train data : ',model.score(X_train_s,y_train_s))\nprint(' model accuracy over shuffled test data : ',model.score(X_test_s,y_test_s))\nsh_tr.append(model.score(X_train_s,y_train_s))\nsh_ts.append(model.score(X_test_s,y_test_s))","98d7e2db":"model=tree.DecisionTreeClassifier()","f385a27c":"# non-shuffled data\n\nmodel.fit(X_train_ns,y_train_ns)\nprint(' accuracy score over non-shuffled train data : ',model.score(X_train_ns,y_train_ns))\nprint(' model accuracy over non-shuffled test data : ',model.score(X_test_ns,y_test_ns))\nns_tr.append(model.score(X_train_ns,y_train_ns))\nns_ts.append(model.score(X_test_ns,y_test_ns))\n\n\n# shuffled data\n\nmodel.fit(X_train_s,y_train_s)\nprint(' accuracy score over shuffled train data : ',model.score(X_train_s,y_train_s))\nprint(' model accuracy over shuffled test data : ',model.score(X_test_s,y_test_s))\nsh_tr.append(model.score(X_train_s,y_train_s))\nsh_ts.append(model.score(X_test_s,y_test_s))","df9f81bd":"# let's check what the decision tree is doing\n\ntree.plot_tree(model)","523feaa2":"fig,axes=plt.subplots(2,2,figsize=(8,6))\nfig.suptitle('Accuracy Evaluation',fontsize=20)\nplt.subplot(2,2,1)\nplt.title('non-shuffled vs. shuffled(Train)')\nplt.plot(clf,ns_tr,color='magenta',label='non-shuffled')\nplt.plot(clf,sh_tr,color='darkolivegreen',label='shuffled')\nplt.legend()\nplt.subplot(2,2,2)\nplt.title('non-shuffled vs. shuffled(Test)')\nplt.plot(clf,ns_ts,color='magenta',label='non-shuffled')\nplt.plot(clf,sh_ts,color='darkolivegreen',label='shuffled')\nplt.legend()\nplt.subplot(2,2,3)\nplt.title('train vs. test(non-shuffled)')\nplt.plot(clf,ns_tr,color='magenta',label='train data')\nplt.plot(clf,ns_ts,color='darkolivegreen',label='test data')\nplt.legend()\nplt.subplot(2,2,4)\nplt.title('train vs. test(shuffled)')\nplt.plot(clf,sh_tr,color='magenta',label='train data')\nplt.plot(clf,sh_ts,color='darkolivegreen',label='test data')\nplt.legend()\nplt.show()","8bdb489a":"This is a multiclass classification task.\n\nSo, we can use -  \n#### 1. Random Forest Classifer\n#### 2. Support Vector Machine \n#### 3. K-Neighbour Classifier\n#### 4. Decision Tree Classifier","db664d93":"#### Volatile Acidity --- Fixed acid Level","69162d36":"#### Random Forest Classifier","30970ac3":"As there are some similar fashions feature we are going deeper .","9b201566":"#### Residual sugar --- Total sulfur","3772bd99":"    Conclusion :\n    \n    1. Amount of citric acid, sulphates and alcohol  varies directly with quality with a positive linear gradient.\n    2. Amount of fixed acid is needed in a high level , though extremum can lower the quality.\n    3. Volatile acidity shows the inverse behaviour of fixed acid.\n    4. Amount of chlorides, density of the liquor, pH inversely varies with quality with a negative linear gradient.\n    5. Residual sugar, amount of sulphur-di-oxide,free sulphur-di-oxide does not very with the quality in  aregular manner. \n    6. The pH and chloride graph shows similar fashion.\n    7. The amount of sulphur and amount of sugar shows opposite orientation.","420ffa7d":"The inverse relation was seen in a same scale region. But here as he wave enumerous attributes so it is hard to find any relation .","8d24dd99":"#### pH ---- amount of chloride","3b94e352":"### --------------------------------------THANK YOU------------------------------------","2d8bf58c":"## Preparation of data for model fitting and evaluation","4c277232":"This scatterplot shows that the sum of this 2 features is a constant.","ced07990":"        1. Shuffling the data\n        2. Creating X and Y\n        3. Creating train and test data\n        ","3ec281b0":"The tree has a complex structure but cannot form a good prediction.","feacd43f":"#### K-Neighbours Classifier","11b2e040":"The quality of the dataset should be the predictor column so we are going to treat it a the Y of the data.","25ef15c8":"## Model selection-->Fitting-->Evaluation","a5d070bf":"KNN is also not giving hopeful accuracy : \/","bf0afddf":"# Pipelines","123a9175":"As the dataframe does not include any kind of lekagae or any object type data , so we don't have to try any pre-procession to our data.\n\nWe will move straight to the EDA portion","2b0173d2":"As the data is medium in size we are going to make a 80-20 train-test split","d3fd3248":"It is pretty obvious that both feature varies inversely .\n\n\n    Practically ,   \n        Let X=Volatile Acidity\n            Y=Fixed acidity\n            \n    So ,  X + Y = constant","92d9edcd":"# Model Performances Summary","a2beacf2":"# UPVOTE if you like this EDA :)","53c891f7":"The data is not balanced well. ","f2fb9075":"![322300_1100-1100x628.jpg](attachment:322300_1100-1100x628.jpg)","5ea65ea0":"# Data Gathering and Primary Visualizations","11fee26e":"    So, we came to some conclusions:\n              1. Model accuracy : RFC > DT > KNN > SVM\n              2. data quality : Non-shuffled > Shuffled","0dd3ec13":"![__results___54_1.png](attachment:__results___54_1.png)","a5e7d91e":"![the%20end.jpg](attachment:the%20end.jpg)","d3acef87":"Now we are going to make a subplot which will show how the quality is depended upon attributes","434c3211":"# Libraries","acda752e":"As **all the attributes** surely affects the prediction quite a bit, we **cannot** drop any feature but use all.","2e96d1c2":"Surely we can say SVM does not work well in medium sized datasets. That's why it is giving a bad accuracy.","c5de7e8a":"We are preparing both shuffled and non-shuffled data for prediction as we do not know that the data is pre-shuffled or not.","820a6e31":"This shows us that model accuracies of train and test are changing in a linear manner. \n\nWhereas the shuffled data is not giving good outputs.","7f1b47ca":"As the classifier shuffles the data , so shuffling before it makes it worse . That's why we are getting low accuracy","318b1d89":"# EDA : Exploratory Data Anlaysis","776b5acc":"If we specificly view the distribuition of pH and chloride level they quite show symmetrical behaviour.\n\nand it is chemically proven.","ad1e6936":"If there is any query related or not-related to this kernel, you can comment below.\nYou can see my other works [HERE](https:\/\/www.kaggle.com\/sagnik1511\/notebooks)\n","6e99f907":"#### Support Vector Machine"}}