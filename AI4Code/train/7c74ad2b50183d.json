{"cell_type":{"ab4d462e":"code","34a365a7":"code","e99903c7":"code","d76c54b5":"code","68266aa7":"code","230e741e":"code","184c56cd":"code","b5635d00":"code","e5017fd5":"code","d03e55f5":"code","a5364f4d":"code","9e201479":"code","8ba67b5b":"code","ee2b7a80":"code","14cf908d":"code","df41aae3":"code","acc803b8":"code","ea213d66":"code","878d6748":"code","59d0999e":"code","856047da":"code","40ee1718":"code","7e341929":"code","07266242":"code","1e1e0c74":"code","ed306061":"code","ac5d4102":"code","181d1487":"code","904540b9":"code","efc36d3c":"code","1f0ef83e":"code","ca0e5c2d":"code","64334370":"code","83daf227":"code","85da7484":"code","862d7dac":"code","20222110":"code","afc65740":"markdown","2c21c4f2":"markdown","dc37bf72":"markdown","aa644809":"markdown","1d34fc44":"markdown","38b55d66":"markdown","b764fcfd":"markdown","432853b2":"markdown","6054f4b0":"markdown","3f76284d":"markdown","234b37f8":"markdown","6de8feb2":"markdown","b9d61a25":"markdown","82190290":"markdown","8eaa789e":"markdown","c0666128":"markdown"},"source":{"ab4d462e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom scipy.stats import pearsonr\nimport statsmodels.api as sm\nfrom sklearn.preprocessing import scale\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')","34a365a7":"df=pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv')","e99903c7":"df.head(6)","d76c54b5":"df.tail(6)","68266aa7":"df.info()","230e741e":"df.columns","184c56cd":"df.shape","b5635d00":"df.describe().style.background_gradient(cmap='Blues')","e5017fd5":"df.skew()","d03e55f5":"df.kurt()","a5364f4d":"df.isna().sum().sort_values()","9e201479":"#total no of missing value\ndf.isna().sum().sum()","8ba67b5b":"mis = df.isnull().sum().to_frame()\n\nmis.columns = ['nMissings']\n\n\nmis['perMissing'] = mis['nMissings']\/1460\nmis = mis[mis.nMissings >= 1]\n\nmisor = mis.sort_values(by = ['nMissings'], ascending=False)\nplt.figure(figsize=(30,10))          \nsns.barplot(x = misor.index, y = misor['perMissing']);\nplt.xticks(rotation=90);","ee2b7a80":"print(df['SalePrice'].describe())","14cf908d":"#distribution plot of sales price\nfig, ax=plt.subplots(figsize=(30,10))\nsns.distplot(a=df['SalePrice'], ax=ax);","df41aae3":"sns.boxplot(data=df['SalePrice']);","acc803b8":"sns.scatterplot(df['SalePrice'], df['YrSold']);","ea213d66":"var = ['SalePrice', 'LotArea', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea']","878d6748":"plt.figure(figsize=(30,10))\ncorr = df[var].corr()\nsns.heatmap(data=corr, annot=True);","59d0999e":"print('correlation in betwn saleprice and yearsold:',pearsonr(df.SalePrice, df.YrSold))\nprint(sm.OLS(df.YrSold, df.SalePrice).fit().summary())\nchart =sns.lmplot(y= 'SalePrice', x='YrSold', data=df)","856047da":"print('correlation in betwn saleprice and GarageArea:',pearsonr(df.SalePrice, df.GarageArea))\nprint(sm.OLS(df.GarageArea, df.SalePrice).fit().summary())\nchart =sns.lmplot(y= 'SalePrice', x='GarageArea', data=df)","40ee1718":"print('correlation in betwn saleprice and ScreenProch:',pearsonr(df.SalePrice, df.ScreenPorch))\nprint(sm.OLS(df.ScreenPorch, df.SalePrice).fit().summary())\nchart =sns.lmplot(y= 'SalePrice', x='ScreenPorch', data=df)","7e341929":"#work with categorical features\n# Columns containing text values (dtypes == 'object') are categorical features.","07266242":"catdf = (df.dtypes == 'object')","1e1e0c74":"cat = list(catdf[catdf].index)\nmancat = ['MSSubClass', 'OverallQual', 'OverallCond', ]\nc= cat + mancat","ed306061":"data = {}\nfor i in c:\n    v = i\n    uniq = len(df[i].unique().tolist())\n    data[i] = (v, uniq)","ac5d4102":"dfcat= pd.DataFrame.from_dict(data, orient='index', columns=['v','uniq'])\n\n\nordf = dfcat.sort_values(by = ['uniq'], ascending=True)\n\nplt.figure(figsize=(30,10))\nsns.barplot(ordf.v, ordf.uniq)\nplt.xticks(rotation=90)\nplt.show()\n","181d1487":"#1\ndf.Street.unique()","904540b9":"#break it now and plotting# break data into different parts\nPaver = df[df.Street == 'Pave']\nGravel = df[df.Street == 'Grvl']\nfig, ax=plt.subplots(figsize=(30,10))\nsns.distplot(a = np.log(Paver['SalePrice']), label=\"Paver block\", kde=False);\nsns.distplot(a = np.log(Gravel['SalePrice']), label=\"gravel one\", kde=False);\nplt.legend();","efc36d3c":"df.BldgType.unique()","1f0ef83e":"\nsingleframe = df[df.BldgType == '1Fam']\ndoubleframe = df[df.BldgType == '2fmCon']\nduplex = df[df.BldgType == 'Duplex']\ntownhouseeast = df[df.BldgType == 'TwnhsE']\ntownhousesouth = df[df.BldgType == 'Twnhs']\n\nplt.figure(figsize=(30,10))\n\n\nsns.distplot(a = np.log(singleframe['SalePrice']), label=\"single frame\", kde=False);\nsns.distplot(a = np.log(doubleframe['SalePrice']), label=\"double frame\", kde=False);\nsns.distplot(a = np.log(duplex['SalePrice']), label=\"duplex\", kde=False);\nsns.distplot(a = np.log(townhouseeast['SalePrice']), label=\"town house east\", kde=False);\nsns.distplot(a = np.log(townhousesouth['SalePrice']), label=\"town house south\", kde=False);\n\nplt.legend();","ca0e5c2d":"#for house style\nplt.figure(figsize=(30,10))\ntemp = df.groupby(['HouseStyle'],as_index=False)['SalePrice'].median().sort_values(by='SalePrice',ascending=False)\nplot1 = sns.boxplot(data=df,x='HouseStyle',y=\"SalePrice\",order=temp['HouseStyle'].to_list());\nplot1.set_xticklabels(plot1.get_xticklabels(), rotation=90);","64334370":"#with exterior\nplt.figure(figsize=(30,10))\ntable = df.groupby(['Exterior2nd'],as_index=False)['SalePrice'].median().sort_values(by='SalePrice',ascending=False)\nplot1  = sns.stripplot(data=df,x='Exterior2nd',y=\"SalePrice\",order=table['Exterior2nd'].to_list());\nplot1.set_xticklabels(plot1.get_xticklabels(), rotation=90);","83daf227":"# with neighborhood\nplt.figure(figsize=(30,10))\ntemp = df.groupby(['Neighborhood'],as_index=False)['SalePrice'].median().sort_values(by='SalePrice',ascending=False)\nplot1  = sns.violinplot(data=df,x='Neighborhood',y=\"SalePrice\",order=temp['Neighborhood'].to_list());\nplot1.set_xticklabels(plot1.get_xticklabels(), rotation=90);","85da7484":"#with foundation\nplt.figure(figsize=(30,10))\ntemp = df.groupby(['Foundation'],as_index=False)['SalePrice'].median().sort_values(by='SalePrice',ascending=False)\nplot1  = sns.barplot(data=df,x='Foundation',y=\"SalePrice\",order=temp['Foundation'].to_list());\nplot1 .set_xticklabels(plot1.get_xticklabels(), rotation=90);","862d7dac":"# with lot shape\nplt.figure(figsize=(30,10))\ntemp = df.groupby(['LotShape'],as_index=False)['SalePrice'].median().sort_values(by='SalePrice',ascending=False)\nplot1 = sns.boxenplot(data=df,x='LotShape',y=\"SalePrice\",order=temp['LotShape'].to_list());\nplot1.set_xticklabels(plot1.get_xticklabels(), rotation=90);","20222110":"temp = df.groupby(['Neighborhood'],as_index=False)['SalePrice'].median()\ntemp = temp.sort_values(by='SalePrice',ascending=False)\ntemp.style.background_gradient(cmap='Blues')","afc65740":"from the above lines we can see that median is 163000.000000, 1st quantile is 129975.000000, 3rd quantile is 214000.000000, minimum sale is 34900, maximum is 755000 ","2c21c4f2":"from the above plot we can see that sold price is skewd to left side and peake at in between 100000 to 200000","dc37bf72":"from above two lines we are sneeking the skewness and kurtosis of the data.","aa644809":"DATASET LOAD AND INFO","1d34fc44":"lets take different categorical values from the above plot and do some more plotting for sale price.","38b55d66":"Total numerical values are 38\nAnd categorical values are 43.","b764fcfd":"missing values","432853b2":"highst soldprice is in the year of 2007 the price is more than 700000","6054f4b0":"categories varies from two to 25 different categories. neighbourhood is the unique one.","3f76284d":"the correlation in between year sold and sold price is not that much variate. it is a steady one.","234b37f8":"i am using log values for normalise any outliers, and bring down the scale for sale price","6de8feb2":"from the color code we can see the costliest and cheapest neighborhood","b9d61a25":"numeric values related to SalePrice ","82190290":"SalePrice strong correlations with GrLivArea (0.71), GarageArea (0.62), 1stFlSF (0.61), TotalBsmtSF (0.61). MasVnrArea (0.48) , medium correlation with Saleprice . The remaining weak or very weak (PoolArea, ScreenPorch, 3SsnPorch, EnclosedPorch, BsmtFinSF2) correlations with SalePrice.","8eaa789e":"#now working with saleprice as we are working on housing price so our main point of interest is sales price and how it is change with different parameters ","c0666128":"now randomly i am try to find out the relation with saleprice for different categorical data"}}