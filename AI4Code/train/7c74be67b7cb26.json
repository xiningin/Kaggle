{"cell_type":{"fd13a0e4":"code","3723b257":"code","b2de389d":"code","d96119ad":"code","09231fcc":"code","4b22cb84":"code","47db3762":"code","02a404b2":"code","4302f185":"code","8bcddb62":"code","d9278794":"markdown","b8bd895a":"markdown","d78eee51":"markdown","08d69508":"markdown","5b7481c7":"markdown","4ce6c002":"markdown","0ba9f9ae":"markdown"},"source":{"fd13a0e4":"from sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\nimport datatable\nimport numpy as np\nimport os\nimport networkx as nx\nimport matplotlib.pyplot as plt","3723b257":"#Loading train data\ntrain = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv')\nfeatures = pd.read_csv('..\/input\/jane-street-market-prediction\/features.csv')\ntrain.fillna(train.mean(), inplace = True) #fill empty data with mean\n#Scaling values\nval = train.values #returns a numpy array\nscaler = MinMaxScaler()\nscaled_vals = scaler.fit_transform(val)\ntrain_scaled = pd.DataFrame(scaled_vals, columns = train.columns)","b2de389d":"def features_with_tags(df):\n    features_ds = df[df]\n    cols = features_ds.columns\n    number_cols = len(features_ds.index)\n    list_df = []\n    \n    for idx_col in range(0, number_cols):\n        ds = features_ds.iloc[idx_col]\n        ds = ds[ds == 1].to_frame()\n        ds.reset_index(inplace = True)\n        \n        cols_ds = ds.columns\n        ds[cols_ds[1]] = ds[cols_ds[0]]\n        ds.drop(cols_ds[0], axis = 1, inplace = True)\n        list_df.append(ds)\n    \n    out_df = pd.concat(list_df, axis = 1, sort = False).T\n    out_df.fillna('None', inplace = True)\n    \n    \n    return out_df\n","d96119ad":"features.set_index('feature', inplace = True)\nfeatures_with_tags_df = features_with_tags(features)\nfeatures_with_tags_df.style.applymap(lambda x: 'background-color : yellow' if x == 'None' else '')","09231fcc":"features_with_tags_df['tags'] = features_with_tags_df.values.tolist()\nfeatures_with_tags_df.drop([0, 1, 2, 3], axis = 1, inplace = True)\nfeatures_with_tags_df.reset_index(inplace = True)","4b22cb84":"# Topology function\ndef tag_relationship_graph (tags, show_disconnected = False, print_values = False, return_graph = False, title = \"\"):\n    G = nx.Graph()\n    for i in tags.index:\n        first_tag = tags.loc[i]['tag']\n        first_ft = tags.loc[i]['features']\n        \n        if show_disconnected:\n            G.add_node(first_tag)\n        for _, second_row in tags.loc[i:].iterrows():\n            second_tag = second_row['tag']\n            second_qs = second_row['features']\n            if first_tag != second_tag:\n                ft_in_common = len(first_ft.intersection(second_qs))\n                if ft_in_common > 0:\n                    G.add_edge(first_tag, second_tag, color = 'g' ,weight = ft_in_common)\n                    if print_values:\n                        print(f'{first_tag} <=> {second_tag}:{ft_in_common}')\n                        \n                        \n    pos = nx.spring_layout(G)\n    edges,weights = zip(*nx.get_edge_attributes(G,'weight').items())\n    \n    fig, ax = plt.subplots(figsize = (15,15))\n    nx.draw(G, pos = pos, node_color = 'yellow', with_labels = True, ax = ax, edgelist = edges, edge_color = weights, width = 5.0, edge_cmap = plt.cm.Blues)\n    nx.draw_networkx_edge_labels(G, pos = pos, edge_labels = nx.get_edge_attributes(G, 'weight'))\n    plt.title(title)\n    plt.show()\n    \n    if return_graph:\n        return G","47db3762":"tag_to_features = {}\n\nfor i, row in features_with_tags_df.iterrows():\n    for t in row['tags']:\n        if t not in tag_to_features:\n            tag_to_features[t] = set()\n        tag_to_features[t].add(row['index'])\ntags_df = pd.DataFrame([{'tag': t, 'features': ft} for t, ft in tag_to_features.items()])\n\n\n","02a404b2":"tags_df.head(10)","4302f185":"tag_relationship_graph(tags_df.sample(frac= 0.5, replace = False, random_state = np.random.RandomState()), title = \"Relationship between 12 tags randomly sampled\")","8bcddb62":"tag_relationship_graph(tags_df,  title = \"Relationship between all the tags\")","d9278794":"Will be creating a dataframe with all tags and features which we can then be use for some analysis on how the tags can be connected with the features. Perhaps there are tags which only ever appear with certain features allowing us for further understanding of this relationship.","b8bd895a":"# Jane Street: Problem appreciation\n\nSo, the competition has come to an end and I would like to congratulate everyone who dived deeper into solving the problem statement posed by Jane Street. This was a very challenging problem and coming with a working solution deserves credit, so great job to all participants on the private leader board.\n\nTo show just how complex the relationships are within the problem I made this notebook which was inspired from this [notebook](https:\/\/www.kaggle.com\/yanamal\/questions-tags-and-lectures-riiid-metadata-eda) from a different Kaggle challenge . So be proud for having a crack at such a complex problem.\n","d78eee51":"There is not much to say here other than expressing the wow factor looking at this graph.","08d69508":"# Relationship between tags and features\nIn this section of the problem, I take the tags and ask myself what is the relationship between tags? Are there tags which only appear for some features and not for others? \n\nWhat emerged was an extremely complex graph which showed that some tags were used with others more often, but it was not completely exclusive i.e. one tag maybe common with a set of features but that does not mean they are similar in nature.\n\nThis added another layer of complexity and this problem had not only 12 or 20 features but 130 of them! So removing features as form of feature engineering was not optimal simply due to this observation (which I think some Kagglers tried to do)","5b7481c7":"![hats_off_JS.jpg](attachment:33c25a1e-0ab4-459a-bff8-9a57f493b251.jpg)","4ce6c002":"## Closing comments\nThis was an exceedingly difficult machine learning problem to solve. I hope these graphs can illustrate the complex relationships existing between the feature set and their tag descriptions. I do know that some awesome Kagglers have decomposed a few features! which is mind blowing and that just shows how incredibly fun this problem was to work with. So if you have managed to have a crack at this problem and tried to decipher the complex relationships existing within the features then hats off to you!!","0ba9f9ae":"# Feature vs Tags\nAs we all came to know this relationship baffled many, including me. I spent approxmately 2 months on this alone trying to find some way of understanding, quantifying, heck just anything menaingful from the table. I would like to the feature vs tags table again to show that relationships between features and tag were not simple but extemely complex."}}