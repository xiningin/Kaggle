{"cell_type":{"ead63220":"code","f240fb35":"code","3a5c801c":"code","9e48f236":"code","d84b10a6":"code","77c01276":"code","c917c559":"code","d43b696f":"code","4759b367":"code","9ba45380":"code","1ed1e8ac":"code","ce8ce682":"code","c3629886":"code","512dc6d9":"code","cd4c2d7a":"code","50cf3dfb":"code","87cd84d1":"code","3e439dbc":"code","a4fa953c":"code","1a30d80a":"code","cc1be724":"code","ce7c714a":"code","531c1b9a":"code","37d57105":"code","b72b3294":"code","224f664c":"code","e381153f":"code","b3a4caa2":"code","d8cf3ec8":"code","023193c2":"code","84cdbecf":"code","7dbe3d5f":"code","6b932c7e":"code","2f228be4":"code","f0cad570":"code","fbae52b2":"code","ae7fd681":"code","c29a660a":"code","def2a5fd":"code","432c4cd9":"code","f2b5ac0e":"code","3d769d34":"code","015679a8":"code","47706fbb":"code","91058145":"code","50401c26":"code","b82728be":"code","f2218bc1":"code","4873c330":"code","59a0a689":"code","efea10c5":"code","f8ebd790":"code","f6e540cf":"code","53d501b0":"code","50c9bf56":"code","4aa00c10":"code","30fb4629":"code","ac02f121":"code","793fd487":"code","3fbf8c9e":"code","94ad01d0":"code","2402aa82":"code","488fe0b1":"code","9fb701f5":"code","bd625b8e":"code","6314c8bd":"code","ca9fb21e":"code","a0043170":"code","735faba0":"code","4a030a29":"code","c65a0f80":"code","ebe3948a":"code","03a27a3b":"code","caa2eef0":"code","8a7ec0b5":"markdown","83ed9ecc":"markdown","4bf8faf6":"markdown","3abb4649":"markdown","97366f69":"markdown","9a80c260":"markdown","afab62f1":"markdown","1788e825":"markdown","69629c5b":"markdown","c3328a8e":"markdown","08f0603f":"markdown","166f1cd6":"markdown","f92e0a94":"markdown","c1897fec":"markdown","6e9e43cf":"markdown","daa4ad3b":"markdown","2b760c3c":"markdown","fb394b9a":"markdown","817d36a3":"markdown","ed7a07b8":"markdown","8ada44fb":"markdown","53214adb":"markdown","76ba305e":"markdown","9d84d879":"markdown","c4e21897":"markdown","47fa11d3":"markdown","91b5dd66":"markdown","b89d5796":"markdown","59ff288c":"markdown","373cca73":"markdown","fc8c0b00":"markdown","30bfd926":"markdown","453f08c6":"markdown","16e31ecf":"markdown","1bb8c4cc":"markdown","aaa94a52":"markdown","3d4ad8b8":"markdown","65db68a4":"markdown"},"source":{"ead63220":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nimport warnings\nimport squarify\nwarnings.filterwarnings('ignore')","f240fb35":"dataset = pd.read_csv(\"..\/input\/the-world-of-pokemons\/pokemons dataset.csv\",encoding=\"latin1\")\ndataset.head(10)","3a5c801c":"dataset.info()","9e48f236":"dataset.describe().T  #transpose","d84b10a6":"dataset.describe()","77c01276":"dataset.isnull().sum()","c917c559":"sb.heatmap(dataset.isnull())","d43b696f":"print(\"Unique Number Of Primary Type:{}\".format(dataset['Primary Type'].nunique()))\nprint(\"Unique Number Of Secondary Type:{}\".format(dataset['Secondary type'].nunique()))","4759b367":"plt.figure(figsize=(20,10))\nax = sb.countplot(dataset['Primary Type'])\nax.set_title(\"Total Number Of Primary Type\",fontsize=24)\nax.set(xlabel=\"Primary Type\", ylabel=\"Count\")","9ba45380":"plt.figure(figsize=(20,10))\nax = sb.countplot(dataset['Secondary type'])\nax.set_title(\"Total Number Of Secondary Type\",fontsize=24)\nax.set(xlabel=\"Secondary Type\", ylabel=\"Count\");","1ed1e8ac":"_,(ax, cbar_ax) = plt.subplots(2, gridspec_kw= {\"height_ratios\": (1, .04), \"hspace\":.3}, figsize=(18,9))\nsb.heatmap((dataset.loc[:,['Attack','Defense','HP','Sp.Attack','Sp.Defense','Speed']]).corr(),\n            annot= True,\n            fmt = \"3.3f\",\n            vmin = -1,\n            vmax = 1,\n            ax=ax,\n            cbar_ax=cbar_ax,\n            cbar_kws={\"orientation\": \"horizontal\"},\n            cmap = \"plasma\")\nax.set_title('Correlation Between Powers Of Pokemon', size = 24);","ce8ce682":"df = pd.DataFrame(dataset)","c3629886":"df[df['Total']==df['Total'].max()]","512dc6d9":"print(df[df['Total']==df['Total'].max()]['Primary Type'],'\\n')\nprint(df[df['Total']==df['Total'].max()]['Secondary type'])","cd4c2d7a":"df[df['Total']==df['Total'].min()]","50cf3dfb":"df[df['Attack']==df['Attack'].max()]","87cd84d1":"print(df[df['Total']==df.Total.min()]['Primary Type'],'\\n')\nprint(df[df['Total']==df.Total.min()]['Secondary type'])","3e439dbc":"# Pokemon with Attack more than 150. Let's go\n#method one\nattack = df[df['Attack']>150]","a4fa953c":"attack.head(8)","1a30d80a":"#method 2\nattack_2 = df['Attack'].map(lambda atk:atk>150)","cc1be724":"df[attack_2]['Attack'].min()","ce7c714a":"#method 3\nattack_pokemons = []\nfor atck in df['Attack']:\n    if atck > 150:\n        attack_pokemons.append(True)\n    else:\n        attack_pokemons.append(False)\n\nattack_3 = pd.Series(attack_pokemons)\ndf[attack_3].head(8)","531c1b9a":"defense_more_than_150 = df[df['Defense']>150]","37d57105":"defense_more_than_150['Defense'].min()","b72b3294":"#method 2\ndf[df['Defense'].map(lambda defense_150:defense_150 > 150)]","224f664c":"defense_150_method3 = []\nfor i in df['Defense']:\n    if i>150:\n        defense_150_method3.append(True)\n    else:\n        defense_150_method3.append(False)\n        ","e381153f":"defense = pd.Series(defense_150_method3)","b3a4caa2":"df[defense]","d8cf3ec8":"#approach 1\nattack_defense = df[(df['Attack']>180) & (df['Defense']>160)]\nattack_defense.head(10)","023193c2":"attack_defense = df[(df['Attack']>100) & (df['Defense']>100)]\nattack_defense.head(10)","84cdbecf":"fire_water = df[(df[\"Primary Type\"]==\"FIRE\") & (df['Secondary type']==\"WATER\")]\nfire_water.head(10)","7dbe3d5f":"water_fire = df[(df[\"Primary Type\"]==\"WATER\") & (df['Secondary type']==\"FIRE\")]\nwater_fire.head(10)","6b932c7e":"water_poison = df[(df[\"Primary Type\"]==\"WATER\") & (df['Secondary type']==\"POISON\")]\nwater_poison.head(10)","2f228be4":"poison_w = df[(df[\"Primary Type\"]==\"POISON\") & (df['Secondary type']==\"WATER\")]\npoison_w.head(10)","f0cad570":"check = df[(df['Primary Type']==\"FIRE\") & (df['Secondary type']==\"DRAGON\")]\ncheck","fbae52b2":"df.head(10)","ae7fd681":"print(\"Bug Minimum(Primary):\",df.groupby(\"Primary Type\")[\"Total\"].min()[\"BUG\"])  #min bug total in Primary type\nprint(\"Fire Min(Sec):\",df.groupby(\"Secondary type\")[\"Total\"].min()[\"FIRE\"])\nprint(\"Water Mean(Pri):\",df.groupby(\"Primary Type\")[\"Total\"].mean()[\"WATER\"])\nprint(\"Lightening Count(Sec):\",df.groupby(\"Secondary type\")[\"Total\"].count()[\"ELECTRIC\"])","c29a660a":"df[df['Secondary type']=='ELECTRIC']   #you can verify the the group by count method","def2a5fd":"df.groupby(\"Secondary type\")[\"Total\"].agg([\"count\",\"mean\",\"min\",\"max\"]).plot(kind=\"barh\",figsize=(10,10),title=\"Secondary Type\")","432c4cd9":"df.groupby('Primary Type')['Total'].agg(['count','mean','min','max']).plot(kind=\"barh\",figsize=(10,10),title=\"Primary Type\",grid=True)","f2b5ac0e":"df.groupby('Primary Type')['Attack'].agg(['count','min','max','mean']).plot(kind=\"bar\",stacked=True,figsize=(15,10),title=\"Primary Type Pokemon Attack Analysis\")","3d769d34":"water_pokemons = df[df['Primary Type']=='WATER']","015679a8":"water_pokemons.shape","47706fbb":"water_pokemons[water_pokemons[\"Total\"]==water_pokemons[\"Total\"].max()]","91058145":"water_pokemons_names = df[(df['Primary Type']==\"WATER\") & (df['Total']>500)] [\"Name\"]\nwater_strength = df[(df['Primary Type']==\"WATER\") & (df['Total']>500)].Total","50401c26":"plt.figure(figsize=(20,10))\nplt.title(\"Water Pokemon Overall Strength Above 500\",fontsize=24)\nplt.bar(water_pokemons_names,water_strength)\nplt.xticks(rotation=90)\nplt.xlabel(\"Name\",fontsize=18)\nplt.ylabel(\"Total\",fontsize=18)","b82728be":"plt.scatter(df[df[\"Primary Type\"]==\"WATER\"][\"Speed\"].iloc[0:65],df[df[\"Primary Type\"]==\"FIRE\"][\"Speed\"])\nplt.xlabel(\"Water Pokemons\")\nplt.ylabel(\"Fire Pokemons\")","f2218bc1":"plt.figure(figsize=(8,5))\nplt.pie(water_pokemons[water_pokemons['Speed']>100][\"Speed\"],labels=water_pokemons[water_pokemons[\"Speed\"]>100][\"Name\"],autopct='%1.3f%%')","4873c330":"plt.hist(water_pokemons['HP'],bins=15)","59a0a689":"fire_pokemons = df[df['Primary Type']==\"FIRE\"]","efea10c5":"fire_pokemons.head()","f8ebd790":"print(water_pokemons['Speed'].shape)\nprint(fire_pokemons['Speed'].shape)","f6e540cf":"fire_pokemons.isnull().sum()","53d501b0":"fastest_fire_poke = fire_pokemons['Speed'].sort_values()[::-1].iloc[0:15]","50c9bf56":"fastest_water_poke = water_pokemons['Speed'].sort_values()[::-1].iloc[0:15]\nfastest_fire_poke","4aa00c10":"plt.figure(figsize=(15,8))\nplt.scatter(fastest_water_poke,fastest_fire_poke)\nplt.title(\"Water-Fire Pokemon: Top 15 Pokemon Speed Relationship\",fontsize=18)\nplt.xlabel(\"Top 15 Fastest Water Pokemons Speed\",fontsize=14)\nplt.ylabel(\"Top 15 Fastest Fire Pokemons Speed\",fontsize=14)","30fb4629":"pika = df[df['Name']==\"Pikachu\"]\npika.set_index(\"Name\",inplace=True)","ac02f121":"pika[\"Total\"]","793fd487":"ax = pika.loc[:,[\"Attack\",\"Defense\",\"HP\",\"Speed\"]].plot(kind=\"bar\")\nax.set_title(\"Pikachu Power Break-down\",fontsize=20)\nax.set_xlabel(\"Pikachu name\")\nax.set_ylabel(\"Strength\")","3fbf8c9e":"grass_pokemon = df[df['Primary Type'] == 'GRASS']\ngrass_pokemon.head()","94ad01d0":"#your code from here","2402aa82":"plt.xticks?","488fe0b1":"flying_pokemon = df[df['Primary Type'] == 'FLYING']\nflying_pokemon.head()","9fb701f5":"flying_dragon =  df[(df['Primary Type']==\"FLYING\") & (df['Secondary type']=='DRAGON')]\ndragon_flying = df[(df['Secondary type']==\"FLYING\") & (df['Primary Type']=='DRAGON')]","bd625b8e":"dragon_flying","6314c8bd":"flying_dragon","ca9fb21e":"dragon = pd.concat([flying_dragon,dragon_flying])","a0043170":"dragon","735faba0":"print(\"We have total of {} dragons that can fly\".format(len(dragon)))","4a030a29":"#your code from here","c65a0f80":"top20_pokemon = df.loc[:,[\"Name\",\"Total\",'Primary Type']].sort_values(by=\"Total\", ascending=False)[:20]","ebe3948a":"top20_pokemon.set_index(\"Name\",inplace=True)","03a27a3b":"top20_pokemon.plot(kind=\"bar\",stacked=True,ylabel=\"Total\",title=\"Top 20 Pokemon Total Strength\")","caa2eef0":"plt.figure(figsize=(20,10))\nplt.axis(\"off\")\naxis = squarify.plot(top20_pokemon['Primary Type'].value_counts(), \n              label=top20_pokemon['Primary Type'].value_counts().index,\n              color=sb.color_palette(\"tab20\", len(top20_pokemon['Primary Type'].value_counts())),\n              pad=1,\n              text_kwargs={'fontsize': 12})\naxis.set_title(\"Primary Data Types Of Top 20 Pokemons\",fontsize=18)","8a7ec0b5":"Before we get into plotting graphs let us know how to deal with `groupby` method.","83ed9ecc":"#### Check Out the Speed Relationship between `Water and Fire Pokemon` ","4bf8faf6":"# Pokemon Analysis and Visualization\n\nAnalysis and Visualize `Pokemons` based on its Fighting Style\nA Detailed Analysis on `Water, Fire, Grass Pokemons` \n### By [Tarun Jain](https:\/\/tarunjain.netlify.app) - [Anime Vyuh](https:\/\/animevyuh.org)","3abb4649":"#### `Practice: by seeing above analysis, I hope you can try this. Gunbate.`","97366f69":"### `Flying Pokemon Visualization`","9a80c260":"### Check those `Pokemon` that belongs to two `Type`","afab62f1":"For Single Filtering example let us first take all those `Pokemons` with attack more than 150. Second consider alll those `Pokemons` with Defense more than 150. Also try to play along. ","1788e825":"### Muliple Filtering","69629c5b":"### Create a DataFrame","c3328a8e":"### Read CSV File and Display Starting Data","08f0603f":"Since `Secondary Type` has many empty values, let's create a new column `type` that combines Primary And Secondary Pokemon.","166f1cd6":"## Import Necessary Modules","f92e0a94":"### The `Pokemon` with Highest Total","c1897fec":"### What is the Primary Type and Secondary Type of the Highest Total `Pokemon`?","6e9e43cf":"#### `Practice: by seeing above analysis, I hope you can try this. Gunbate.`","daa4ad3b":"As we know our favourite `Pikachu` belongs to Electric\/Lightening, lets extract a single player data","2b760c3c":"## Filtering \n\n### Single Filter","fb394b9a":"### Ultimate `groupby` use","817d36a3":"### What is the Primary Type and Secondary Type of the Lowest Total `Pokemon`?","ed7a07b8":"### `Grass Pokemon Visualization`","8ada44fb":"**Name 1** as no null items, **Name 2** is another name for the `Pokemon`. This makes sense as well, some `Pokemon` no need another name. Let's Observe another column type. **Primary Type** is the Power Ability of the `Pokemon` which is their major strength. e.g., *Grass, Water, Fire, Lightening, Poison and many more*. **Secondary Type** are those `Pokemon` that as dual Power Ability. The Rest Columns are completely Filled and no null value is noticed. ","53214adb":"#### Let us individually visualize few `Primary Type Pokemons`","76ba305e":"### Merge Two DataFrames","9d84d879":"### Analysis Pikachu","c4e21897":"Check ``groupby`` method of Primary and Seconday Type `Pokemon` and ``Plot a Bar``Graph","47fa11d3":"Let us now consider those `Pokemons` with `Attack` and `Defense` both greater than `180` and `160` respectively ","91b5dd66":"### The `Pokemon` with Lowest Total","b89d5796":"### `Fire Pokemon Visualization`","59ff288c":"Check the `Pokemon` with the highest Total among the ``Water Pokemon``","373cca73":"### Top Pokemon Analysis And Battle","fc8c0b00":"### Try the `Single Filtering` for Defense for practice","30bfd926":"### From the above Correlation Plot we can conclude that Speed and Defense as the worst relation between the, and Defense and Special Defence have a descent relationship","453f08c6":"## Visualization","16e31ecf":"### `Water Pokemon Visualization`","1bb8c4cc":"### `Lightening Pokemon Visualization`","aaa94a52":"Oops! It seems there is no `Pokemon` in data satisfying the condition. Don't get me wrong as we are not considering the special attack and special defence to make the `Pokemon` powerful. For time being let us try `Attack` and `Defense` to be more than 100","3d4ad8b8":"Check Tutorial explanation on [Anime Vyuh](https:\/\/animevyuh.org\/pokemon-eda)","65db68a4":"We have large number of ``Water Pokemon`` and least number of ``Flying Pokemon`` in the Primary Type Dataset "}}