{"cell_type":{"9d91dadb":"code","5e6e861f":"code","e6a78d02":"code","c0142843":"code","a5a3535b":"code","71049f08":"code","040de892":"code","52362a47":"code","c6ba72af":"code","38d02eb2":"code","4a0998f8":"code","429143fd":"code","650e8b33":"code","79229293":"code","96e3eaff":"code","e12e1c5e":"code","dfe5c910":"code","762e7958":"code","456fec4f":"code","e2aa2957":"code","0b836de4":"markdown","79bd8f56":"markdown","d0240ebe":"markdown"},"source":{"9d91dadb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5e6e861f":"df = pd.read_csv(\"..\/input\/nyc-east-river-bicycle-counts.csv\")\ndf","e6a78d02":"#df.isnull().values.any()\ntype(df['Precipitation'])\ndf = df.replace({\n    'T': 0.01,\n    '0.47 (S)': '0.47'\n})\ndf = df.astype({\"Precipitation\": float})\ndf.isnull().values.any()\ndf.drop(columns=['Date', 'Unnamed: 0'])\ndf['Avg_Temp'] = (df[\"High Temp (\u00b0F)\"] + df[\"Low Temp (\u00b0F)\"]) \/ 2\ndf = df.astype({\"Avg_Temp\": float})\ntype(df['Avg_Temp'])\ndf\n","c0142843":"df.describe()","a5a3535b":"df.corr() # looking for correlations","71049f08":"from pandas.plotting import scatter_matrix\nscatter_matrix(df,alpha=0.2,figsize =(20,15))","040de892":"#Visualizations\nimport matplotlib.pyplot as plt\nfrom matplotlib import pylab\nimport numpy as np\n%matplotlib inline\ndf.style.use('ggplot')\n#plt.xlabel('No of crossings')\n#plt.ylabel('High Temperature')\n#plt.title('Clear linear relationship between High temp and crossings')\n#plt.legend(shadow=True, fontsize=\"large\")\n#plt.grid()\ndf.plot.scatter(x='Brooklyn Bridge', y='High Temp (\u00b0F)')\ndf.plot.scatter(x='Manhattan Bridge', y='High Temp (\u00b0F)')\ndf.plot.scatter(x='Williamsburg Bridge', y='High Temp (\u00b0F)')\ndf.plot.scatter(x='Queensboro Bridge', y='High Temp (\u00b0F)')\n#df.plot.pie(x='Precipitation', y='Brooklyn Bridge')\n","52362a47":"import numpy as np\nfrom sklearn import preprocessing, svm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n","c6ba72af":"#Fiting regression model\nX1= np.array(df.drop(['Day','Date','Total','Unnamed: 0','Brooklyn Bridge','Manhattan Bridge','Williamsburg Bridge','Queensboro Bridge','Avg_Temp'],1))\ny1=np.array(df['Brooklyn Bridge'])\nX1_train, X1_test, y1_train, y1_test = train_test_split(X1,y1, test_size = 0.2)\nclf1 = LinearRegression()\nclf1 = clf1.fit(X1_train, y1_train)\naccuracy1 =clf1.score(X1_test,y1_test)\nprint('Accuracy: \\n', accuracy1)\ny1_pred = clf1.predict(X1_test)\nprint('Coefficients: \\n', clf1.coef_)\n# The mean squared error\nprint(\"Mean squared error: %.2f\"\n      % mean_squared_error(y1_test, y1_pred))\n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % r2_score(y1_test, y1_pred))","38d02eb2":"#Fiting regression model\nX2= np.array(df.drop(['Day','Date','Total','Unnamed: 0','Brooklyn Bridge','Manhattan Bridge','Williamsburg Bridge','Queensboro Bridge','Avg_Temp'],1))\ny2=np.array(df['Brooklyn Bridge'])\nX2_train, X2_test, y2_train, y2_test = train_test_split(X2,y2, test_size = 0.2)\nclf2 = LinearRegression()\nclf2 = clf2.fit(X2_train, y2_train)\naccuracy2 =clf2.score(X2_test,y2_test)\nprint('Accuracy: \\n', accuracy2)\ny2_pred = clf2.predict(X2_test)\nprint('Coefficients: \\n', clf2.coef_)\n# The mean squared error\nprint(\"Mean squared error: %.2f\"\n      % mean_squared_error(y2_test, y2_pred))\n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % r2_score(y2_test, y2_pred))","4a0998f8":"#Fiting regression model\nX3= np.array(df.drop(['Day','Date','Total','Unnamed: 0','Brooklyn Bridge','Manhattan Bridge','Williamsburg Bridge','Queensboro Bridge','Avg_Temp'],1))\ny3=np.array(df['Brooklyn Bridge'])\nX3_train, X3_test, y3_train, y3_test = train_test_split(X3,y3, test_size = 0.2)\nclf3 = LinearRegression()\nclf3 = clf3.fit(X3_train, y3_train)\naccuracy3 =clf3.score(X3_test,y3_test)\nprint('Accuracy: \\n', accuracy3)\ny3_pred = clf3.predict(X3_test)\nprint('Coefficients: \\n', clf3.coef_)\n# The mean squared error\nprint(\"Mean squared error: %.2f\"\n      % mean_squared_error(y3_test, y3_pred))\n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % r2_score(y3_test, y3_pred))","429143fd":"#Fiting regression model\nX4= np.array(df.drop(['Day','Date','Total','Unnamed: 0','Brooklyn Bridge','Manhattan Bridge','Williamsburg Bridge','Queensboro Bridge','Avg_Temp'],1))\ny4=np.array(df['Brooklyn Bridge'])\nX4_train, X4_test, y4_train, y4_test = train_test_split(X4,y4, test_size = 0.2)\nclf4 = LinearRegression()\nclf4 = clf4.fit(X4_train, y4_train)\naccuracy4 =clf4.score(X4_test,y4_test)\nprint('Accuracy: \\n', accuracy4)\ny4_pred = clf4.predict(X4_test)\nprint('Coefficients: \\n', clf4.coef_)\n# The mean squared error\nprint(\"Mean squared error: %.2f\"\n      % mean_squared_error(y4_test, y4_pred))\n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % r2_score(y4_test, y4_pred))","650e8b33":"import statsmodels.api as sm\nimport seaborn as sns\nX = df[\"High Temp (\u00b0F)\"]\n#X = df[\"Precipitation\"]\ny = df[\"Manhattan Bridge\"]\nX = sm.add_constant(X)\n# Note the difference in argument order\nmodel = sm.OLS(y, X).fit()\npredictions = model.predict(X) # make the predictions by the model\n# Print out the statistics\nmodel.summary()","79229293":"#Plot the regression line\nsns.regplot(x='High Temp (\u00b0F)', y='Manhattan Bridge', data=df)","96e3eaff":"import statsmodels.api as sm\nimport seaborn as sns\nX = df[\"High Temp (\u00b0F)\"]\ny = df[\"Brooklyn Bridge\"]\nX = sm.add_constant(X)\n# Note the difference in argument order\nmodel = sm.OLS(y, X).fit()\npredictions = model.predict(X) # make the predictions by the model\n# Print out the statistics\nmodel.summary()","e12e1c5e":"#Plot the regression line\nsns.regplot(x='High Temp (\u00b0F)', y='Brooklyn Bridge', data=df)","dfe5c910":"import statsmodels.api as sm\nimport seaborn as sns\nX = df[\"High Temp (\u00b0F)\"]\n#X = df[\"Avg_Temp\"]\ny = df[\"Williamsburg Bridge\"]\nX = sm.add_constant(X)\n# Note the difference in argument order\nmodel = sm.OLS(y, X).fit()\npredictions = model.predict(X) # make the predictions by the model\n# Print out the statistics\nmodel.summary()","762e7958":"#Plot the regression line\nsns.regplot(x='High Temp (\u00b0F)', y='Williamsburg Bridge', data=df)","456fec4f":"import statsmodels.api as sm\nimport seaborn as sns\nX = df[\"High Temp (\u00b0F)\"]\n#X = df[\"Avg_Temp\"]\ny = df[\"Queensboro Bridge\"]\nX = sm.add_constant(X)\n# Note the difference in argument order\nmodel = sm.OLS(y, X).fit()\npredictions = model.predict(X) # make the predictions by the model\n# Print out the statistics\nmodel.summary()","e2aa2957":"#Plot the regression line\nsns.regplot(x='High Temp (\u00b0F)', y='Queensboro Bridge', data=df)","0b836de4":"\nSince the day and date show the same value, their data is redundant. We would ideally like only one of the columns","79bd8f56":"No missing values found.\nIn the precipitaion column, what does T and (S) mean?\n\nT: \"T\" stand for \"Trace\". This is a small amount of precipitation that will wet a raingage but is less than the 0.01 inch measuring limit. Replacing T by 0.01\n(S): Not sure what it stands for. Changing 0.47(S) to 0.47 to create a float datatype for precipiation column. \ndf.describe(): to understand the stats from our data","d0240ebe":"Since we see a high correlation between High Temperatures and Bridge Crossing, Lets look at their individual line plots."}}