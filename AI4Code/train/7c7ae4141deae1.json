{"cell_type":{"1ddee797":"code","a399b03a":"code","cc867b40":"code","a9490a5c":"code","eb388cdf":"code","f3e7a002":"code","d61078cd":"code","0567b9f4":"code","46de51c3":"code","940f0ac4":"code","f0e95529":"code","65b7c763":"code","16e877a2":"code","770e139d":"code","ca0bcde7":"code","b3f0c9a8":"markdown","4e13e67a":"markdown","f36eb179":"markdown","8b36d629":"markdown"},"source":{"1ddee797":"# TensorFlow and tf.keras\nimport tensorflow as tf\n\n# Helper libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nprint(tf.__version__)","a399b03a":"fashion_mnist = tf.keras.datasets.fashion_mnist\n\n(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()","cc867b40":"class_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']","a9490a5c":"plt.figure()\nplt.imshow(train_images[0])\nplt.colorbar()\nplt.grid(False)\nplt.show()","eb388cdf":"train_images = train_images \/ 255.0\ntest_images = test_images \/ 255.0","f3e7a002":"plt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_images[i], cmap=plt.cm.binary)\n    plt.xlabel(class_names[train_labels[i]])\nplt.show()","d61078cd":"model = tf.keras.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10)\n])","0567b9f4":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","46de51c3":"model.fit(train_images, train_labels, epochs=10)","940f0ac4":"test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)\n\nprint('\\nTest accuracy:', test_acc)","f0e95529":"probability_model = tf.keras.Sequential([model, \n                                         tf.keras.layers.Softmax()])","65b7c763":"predictions = probability_model.predict(test_images)","16e877a2":"def plot_image(i, predictions_array, true_label, img):\n    true_label, img = true_label[i], img[i]\n    plt.grid(False)\n    plt.xticks([])\n    plt.yticks([])\n\n    plt.imshow(img, cmap=plt.cm.binary)\n\n    predicted_label = np.argmax(predictions_array)\n    if predicted_label == true_label:\n        color = 'blue'\n    else:\n        color = 'red'\n\n    plt.xlabel(\"{} {:2.0f}% ({})\".format(class_names[predicted_label],\n                                100*np.max(predictions_array),\n                                class_names[true_label]),\n                                color=color)\n\ndef plot_value_array(i, predictions_array, true_label):\n    true_label = true_label[i]\n    plt.grid(False)\n    plt.xticks(range(10))\n    plt.yticks([])\n    thisplot = plt.bar(range(10), predictions_array, color=\"#777777\")\n    plt.ylim([0, 1])\n    predicted_label = np.argmax(predictions_array)\n\n    thisplot[predicted_label].set_color('red')\n    thisplot[true_label].set_color('blue')","770e139d":"i = 0\nplt.figure(figsize=(6,3))\nplt.subplot(1,2,1)\nplot_image(i, predictions[i], test_labels, test_images)\nplt.subplot(1,2,2)\nplot_value_array(i, predictions[i],  test_labels)\nplt.show()","ca0bcde7":"num_rows = 5\nnum_cols = 3\nnum_images = num_rows*num_cols\nplt.figure(figsize=(2*2*num_cols, 2*num_rows))\nfor i in range(num_images):\n    plt.subplot(num_rows, 2*num_cols, 2*i+1)\n    plot_image(i, predictions[i], test_labels, test_images)\n    plt.subplot(num_rows, 2*num_cols, 2*i+2)\n    plot_value_array(i, predictions[i], test_labels)\nplt.tight_layout()\nplt.show()","b3f0c9a8":"# Fashion MNIST","4e13e67a":"# Train","f36eb179":"# Plot and predict","8b36d629":"# Get data"}}