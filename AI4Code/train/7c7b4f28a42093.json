{"cell_type":{"5ef9aabe":"code","baafd12f":"code","3fea1d3a":"code","e9a9fc1c":"code","ca88a733":"code","f4d3776a":"code","f76b15c3":"code","65857733":"code","aab4c95e":"code","4d9d476d":"code","6af9f58e":"code","5a585722":"code","7749bfe2":"code","799765fa":"code","dcbd11e8":"code","05101061":"code","59ad6810":"code","0dceb7d2":"code","01d94ad0":"markdown","004a017e":"markdown","56aafd21":"markdown","6f3e6fb9":"markdown","a8e2c388":"markdown","64dd9f3f":"markdown","ab104b99":"markdown","55509fa7":"markdown","7d93ebc0":"markdown","fa584d2d":"markdown","0abbef0b":"markdown","92df7b73":"markdown","2dd4e135":"markdown","516a6347":"markdown","6996fc1d":"markdown","126ce575":"markdown","6644e6d9":"markdown","6c14e381":"markdown","98698273":"markdown","6aed50a0":"markdown","73e6656d":"markdown","410d7339":"markdown","ae28d304":"markdown"},"source":{"5ef9aabe":"# Required Libraries are imported\nimport warnings  \nimport pandas as pd\nimport numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import preprocessing\nfrom sklearn.linear_model import LinearRegression,LogisticRegression\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nimport seaborn as sns\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.feature_selection import RFECV\nfrom sklearn.feature_selection import RFE\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.decomposition import PCA\nfrom collections import Counter\nfrom sklearn.metrics import confusion_matrix\nimport time\nimport scikitplot as skplt\nimport itertools\nfrom sklearn.model_selection import GridSearchCV\nwarnings.filterwarnings('ignore')","baafd12f":"# Reading the Dataset\ndf_train=pd.read_csv(\"..\/input\/train.csv\")\ndf_test=pd.read_csv(\"..\/input\/test.csv\")\n\n# Check null values\ndf_train.isnull().values.any()\ndf_test.isnull().values.any()\n# No null values in train and test data\n","3fea1d3a":"# Top 5 rows\ndf_train.head()","e9a9fc1c":"# Subject col not usefull hence dropped\nif('subject' in df_train.columns):\n    df_train.drop('subject', axis =1, inplace=True)\nif('subject' in df_test.columns):\n    df_test.drop('subject', axis =1, inplace=True)\n","ca88a733":"# Encoding target - converting non-num to num variable\nle = preprocessing.LabelEncoder()\nfor x in [df_train,df_test]:\n    x['Activity'] = le.fit_transform(x.Activity)\n\n# Split into features and class\ndf_traindata, df_trainlabel = df_train.iloc[:, 0:len(df_train.columns) - 1], df_train.iloc[:, -1]\ndf_testdata, df_testlabel = df_test.iloc[:, 0:len(df_test.columns) -1], df_test.iloc[:, -1]\n","f4d3776a":"warnings.filterwarnings('ignore')\n# Baseline - comparing model accuracy using all features across classifiers \nclassifiers = [\n    DecisionTreeClassifier(),\n    RandomForestClassifier(),\n    KNeighborsClassifier(),\n    SVC(kernel=\"linear\"),\n    GaussianNB(),\n    LogisticRegression()\n    ]\n\n\n# Naive Train Accuracy\nalgo = []\nscores = []\nfor clf in classifiers:\n    algo.append(clf.__class__.__name__)\n    scores.append(cross_val_score(clf,df_traindata,df_trainlabel, cv=5).mean())\nwarnings.filterwarnings('ignore')\nNaivescore_df_Train = pd.DataFrame({'Algorithm': algo, 'Score': scores}).set_index('Algorithm')\n\n\n# Naive Test Accuracy\n\nalgo = []\nscores = []\n\nfor clf in classifiers:\n    clf = clf.fit(df_traindata, df_trainlabel)\n    y_pred = clf.predict(df_testdata)\n    algo.append(clf.__class__.__name__)\n    scores.append(accuracy_score(y_pred, df_testlabel))\nwarnings.filterwarnings('ignore')\nNaivescore_df_Test  = pd.DataFrame({'Algorithm': algo, 'Score': scores}).set_index('Algorithm')\n\n# Bar plot between Train and Test Accuracy\nfig = plt.figure(figsize=(5,5)) # Create matplotlib figure\n\nax = fig.add_subplot(111) # Create matplotlib axes\nax2 = ax.twinx() # Create another axes that shares the same x-axis as a\nwidth = .3\n\nNaivescore_df_Train.Score.plot(kind='bar',color='green',ax=ax,width=width, position=0)\nNaivescore_df_Test.Score.plot(kind='bar',color='red', ax=ax2,width = width,position=1)\n\nax.grid(None, axis=1)\nax2.grid(None)\n\nax.set_ylabel('Train')\nax2.set_ylabel('Test')\n\nax.set_xlim(-1,7)\nplt.show()\n\n\n","f76b15c3":"# Feature selection using Random Forest Classifier\n\n# Bagged decision trees for feature importance- embedded method\nRtree_clf = RandomForestClassifier()\nRtree_clf = Rtree_clf.fit(df_traindata,df_trainlabel)\nmodel = SelectFromModel(Rtree_clf, prefit=True)\nRF_tree_featuresTrain=df_traindata.loc[:, model.get_support()]\nRF_tree_featuresTest = df_testdata.loc[:, model.get_support()]\nwarnings.filterwarnings('ignore')\n\n# Based on Feature Selection only 87 features were selected\n\n# Feature Importance\n\n# Important scores\n# for name, importance in zip(df_traindata, Rtree_clf.feature_importances_):\n#     print(name, \"=\", importance)\n\nimportances = Rtree_clf.feature_importances_\nstd = np.std([tree.feature_importances_ for tree in Rtree_clf.estimators_],axis=0)\nindices = np.argsort(importances)[::-1]\nindices.shape\nindices = indices[:200]\n# Feature Ranking\n#print(\"Feature ranking:\")\n#for f in range(200):\n#    print(\"%d. feature %d (%f)\" % (f + 1, indices[f], importances[indices[f]]))\n\n# Plots feature importances\n\nplt.figure(1, figsize=(14, 13))\nplt.title(\"Feature importances\")\nplt.xlabel(\"# of Features \")\nplt.ylabel(\"Importance Score\")\nplt.bar(range(200), importances[indices],color=\"r\", yerr=std[indices], align=\"center\")\nplt.xlim([0, 200])\nplt.show()\n\n\n","65857733":"\nskplt.estimators.plot_learning_curve(Rtree_clf,RF_tree_featuresTrain,df_trainlabel)\n","aab4c95e":"# Applying RFE Cross validation to find number of features\n# The \"accuracy\" scoring is proportional to the number of correct classifications\n\n# Before we apply RFE we need to know the optimal number of features. Hence RFECV crossvalidation technique is used to find \n# the optimal number of features based on the accuracy score in the training set. \n\n# Applying RFECV with svm classifier\nsvc=SVC(kernel=\"linear\")\nrfecv = RFECV(estimator=svc, step=1, cv=StratifiedKFold(2), # Stratified fold inorder to reduce bias\n              scoring='accuracy')\nrfetrain=rfecv.fit(RF_tree_featuresTrain, df_trainlabel)\nprint('Optimal number of features :', rfecv.n_features_)\n\n\n# Plot showing the Cross Validation score\nplt.figure()\nplt.xlabel(\"Number of features selected\")\nplt.ylabel(\"Cross validation score (nb of correct classifications)\")\nplt.plot(range(1, len(rfecv.grid_scores_) + 1), rfecv.grid_scores_)\nplt.show()\n\n","4d9d476d":"\n# Applying RFE with optimal number of features\nrfe = RFE(estimator=svc, n_features_to_select=rfecv.n_features_, step=1)\nrfe = rfe.fit(RF_tree_featuresTrain, df_trainlabel)\n\nrfe_train=RF_tree_featuresTrain.loc[:, rfe.get_support()]\nrfe_test=RF_tree_featuresTest.loc[:, rfe.get_support()]\n\n\n# Checking the Accuracy after rfe\n# Train Accuracy\nprint(\"Train Accuracy:\",cross_val_score(svc,rfe_train,df_trainlabel, cv=5).mean())\n# Test Accuracy\nscv = svc.fit(rfe_train, df_trainlabel)\ny_pred = scv.predict(rfe_test)\nprint(\"Test Accuracy:\",accuracy_score(y_pred, df_testlabel))\n","6af9f58e":"\n# Variance threshold\nselector = VarianceThreshold(0.95*(1-.95))\nvarsel=selector.fit(rfe_train)\nrfe_train.loc[:, varsel.get_support()].shape\n# 55\nvartrain=rfe_train.loc[:, varsel.get_support()]\nvartest=rfe_test.loc[:, varsel.get_support()]\n\n# Checking the Accuracy after Variance threshold\n# Train Accuracy\nprint(\"Train Accuracy:\",cross_val_score(svc,vartrain,df_trainlabel, cv=5).mean())\n\n# Test Accuracy\nscv = svc.fit(vartrain, df_trainlabel)\ny_pred = scv.predict(vartest)\nprint(\"Test Accuracy:\",accuracy_score(y_pred, df_testlabel))\n\n","5a585722":"# PCA\npca = PCA(n_components = len(vartrain.columns))\npca_traindata = pca.fit(vartrain)\n\npca_traindata.explained_variance_\npca_traindata.n_components_\npcatrain = pca_traindata.transform(vartrain)\npcatest = pca_traindata.transform(vartest)\ncum_ratio = (np.cumsum(pca_traindata.explained_variance_ratio_))\n\n\n# Visualize PCA result\nplt.plot(np.cumsum(pca_traindata.explained_variance_ratio_))\nplt.xlabel('number of components')\nplt.ylabel('cumulative explained variance')\n","7749bfe2":"# 21 features - constant after that\npca = PCA(n_components = 21)\npca_traindata = pca.fit(vartrain)\n\npca_traindata.explained_variance_\npca_traindata.n_components_\npcatrain = pca_traindata.transform(vartrain)\npcatest = pca_traindata.transform(vartest)\n(np.cumsum(pca_traindata.explained_variance_ratio_))\n","799765fa":"# PCA in 2D projection\n \nskplt.decomposition.plot_pca_2d_projection(pca, vartrain, df_trainlabel)\n","dcbd11e8":"# Checking Accuracy after applying PCA\n\n# Train Accuracy\nprint(\"Train Accuracy:\",cross_val_score(svc,pcatrain,df_trainlabel, cv=5).mean())\n\n# Test Accuracy\nscv = svc.fit(pcatrain, df_trainlabel)\ny_pred = scv.predict(pcatest)\nac_score = accuracy_score(y_pred, df_testlabel)\nprint(\"Test Accuracy:\",accuracy_score(y_pred, df_testlabel))","05101061":"# Confusion Matrix\n\ncf_mat = confusion_matrix(df_testlabel, y_pred)\nprint(\"Accuracy: %f\" %ac_score) \nactivities = le.classes_\n\n# Plotting Confusion matrix heatmap\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.tight_layout()\n\nplot_confusion_matrix(cf_mat, classes=activities,title=\"Confusion Matrix for Test data\")\n","59ad6810":"# Parameter Tuning \n\n# Perfromance tuning using GridScore\nparam_grid = [\n  {'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001], 'kernel': ['linear']},\n  {'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001], 'kernel': ['rbf']},\n ]\nsvr = SVC()\nclf = GridSearchCV(svr, param_grid,cv=5)\nclf.fit(pcatrain,df_trainlabel)\nprint(clf.best_params_)\n\n\n","0dceb7d2":"\n# Train Accuracy \nsvr = SVC(kernel=\"rbf\",C=1000,gamma=0.001)\nprint(\"Train Accuracy:\",cross_val_score(svr,pcatrain,df_trainlabel, cv=5).mean())\n# Test Accuracy\nscv = svr.fit(pcatrain, df_trainlabel)\ny_pred = scv.predict(pcatest)\nprint(\"Test Accuracy:\",accuracy_score(y_pred, df_testlabel))\n ","01d94ad0":"## Finding the number of dimensions to transform using PCA\n\n### Running Principal Component analysis, it is found that the model information can be captured with 21 features as they seem to cover the maximum variance. Hence, the 21 new features in an entirely new dimension are chosen as the final set of features removing the other least discriminative ones. The chosen 21 features seem to have an explained variance of 99 % which can be clearly visualized in the graph below.","004a017e":"### With test and train accuracy almost equal to 92%, we are getting a maximum accuracy at this level.","56aafd21":"## Visualizing top 2 principal components in scatter plot with data points segregated based on their activities","6f3e6fb9":"## Applying PCA with number of components=21 ","a8e2c388":"# Libraries Imported","64dd9f3f":"### Using Naive approch we can clearly see that SVM performs better in train\/test across all the other classifiers hence SVM classifier  is selected for further tuning.","ab104b99":"## Accuracy check on Test and Train to see if it has increased","55509fa7":"## Why was cross validation done in Training set??\n\n### Compare learning curve with training set and Cross validation training set","7d93ebc0":"###  Firstly, feature raking is performed with recursive feature elimination and cross validation for automatic tuning selecting the best number of features. With the optimal number of features from RFECV, RFE is performed. SVM is used as an external estimator for assignment of weights to features. The weights obtained are treated as importance of the features. Further, RFE selects features by consideration of smaller sets of features each time. The least importance features are pruned from the current set of features. This procedure is recursively repeated on the pruned set until the given number of optimal features is reached.","fa584d2d":"# Variable Encoding for classes ","0abbef0b":"# Baseline\n\n### Considering all the 563 features, modelling is done with some best classifying algorithms along with comparison of test and train accuracy. ","92df7b73":"### Applying RFE with optimal number of features found in RFECV","2dd4e135":"# Feature Selection \n## Tree Based Feature Selection\n\n### Tree based estimators are used to compute feature importance which is visualized by their ranking. Further, from their obtained importance\u2019s, the irrelevant features are discarded using select from model meta transformer. Random forest is chosen as the estimator with its high-performance post evaluation and comparison with extra tree classifier and SVM. Feature is reduced to 83 most important ones for prediction","516a6347":"# Hyper Parameter Tuning- finding the best parameters and kernel","6996fc1d":"## Checking top 5 rows just to get an idea of data we are dealing with","126ce575":"## Recursive Feature Elmination","6644e6d9":"##  Applying Variance Threshold method to remove low variance variable\n\n### Finally, a simple approach to feature selection is also performed. Variance threshold method is used through which all features whose variance don\u2019t meet threshold of 0.95 are removed giving rise to 51 features.","6c14e381":"### We can clearly see that the accuracy remains to 100% which creates a lot of overfitting hence cross validation is done to training to reduce overfitting","98698273":"# Data Exploration\n### 1.   Read Train and Test Dataset\n### 2. Checked for null values found none ","6aed50a0":"# Subject column removed why?\n###  Based on the Domain knowledge- knowing that subject column does not affect the prediction variable it is removed","73e6656d":"# Feature Extraction using PCA (Principal Component Analysis)","410d7339":"# Confusion Matrix after applying PCA\n\n### Confusion matrix above is presented for test data with the highest scoring feature subset and optimal parameters, where the rows correspond to the actual performed activities, while the columns correspond to the predicated activity labels. We can clearly see the number of false positives and false negatives are very low. It is intrepreted that there seem to be very less number of misclasified data.","ae28d304":"## Train Test Accuracy check with best params and features\n\n### Finally, post tuning of hyper- parameter, the accuracy is checked to see how well the chosen model performed with the selected optimal numer of features"}}