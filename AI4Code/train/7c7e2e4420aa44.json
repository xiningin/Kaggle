{"cell_type":{"505752ac":"code","d1f74d59":"code","c72d35b2":"code","efa6d8a5":"code","1156fff3":"code","988c850f":"code","c6ce043e":"code","78393001":"code","56d099d9":"code","868c02c9":"code","3e1edfe4":"code","262b45b5":"code","4f8715f8":"code","c174acb2":"code","f7e61f01":"code","f914d50c":"code","2fda6bbf":"code","545d54b6":"code","ded3c2c7":"code","fc667c20":"code","40270e93":"code","f321e3d9":"code","d83b9260":"code","eef462b4":"code","27252a7f":"code","16c8f39e":"code","2e1db2cd":"code","20aafaf4":"code","60b6c3af":"code","f0e8eeb8":"code","fbddcfbd":"code","4cf5bab5":"code","6c6724f9":"code","dd6eca9b":"code","c3434f65":"code","c2c10915":"code","9a4c9dab":"code","80017be1":"code","ba09bb76":"code","01c72686":"code","fc8161e6":"code","3f8f9659":"code","ae5f05a1":"code","a3ae23a4":"code","7ca29d9b":"code","ddcd29e4":"code","efdf7080":"code","6de248ab":"code","91e6c3e4":"code","3b025a47":"code","f2b77aca":"code","e838751b":"code","dde9d0ba":"code","bc66b131":"code","570337d8":"code","31d89d3a":"markdown","ab4ea933":"markdown","f50111e2":"markdown","1c3c424f":"markdown","6d3813cf":"markdown","cb97162c":"markdown","b15462d0":"markdown","83233d1d":"markdown","de78b445":"markdown","89475617":"markdown"},"source":{"505752ac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport ast\nimport operator\nfrom matplotlib import cm\nfrom itertools import cycle, islice\n%matplotlib inline\nfrom mpl_toolkits.basemap import Basemap\nfrom matplotlib.patches import Polygon\nfrom matplotlib.collections import PatchCollection\nfrom matplotlib.colors import Normalize\nimport matplotlib.cm\nfrom numpy import meshgrid\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d1f74d59":"zom = pd.read_csv('..\/input\/zomato-bangalore-restaurants\/zomato.csv')","c72d35b2":"# Head of the dataFrame\nzom.head()","efa6d8a5":"# Describe\nzom.describe()","1156fff3":"# Info\nzom.info()","988c850f":"# Columns\nzom.columns","c6ce043e":"# Removing url, phone column\nzom.drop(['url', 'phone', 'address'], axis = 1, inplace = True)","78393001":"# Location\nplt.figure(figsize=(15,7), dpi =100)\nplot = sns.countplot(zom['location'], order=zom['location'].value_counts().index,hue=zom['book_table'])\nplot.set_xticklabels(plot.get_xticklabels(), rotation = 90)\nplt.tight_layout()","56d099d9":"# Location\nplt.figure(figsize=(15,7), dpi =100)\nplot = sns.countplot(zom['location'], order=zom['location'].value_counts().index,hue=zom['online_order'])\nplot.set_xticklabels(plot.get_xticklabels(), rotation = 90)\nplt.tight_layout()\nzom['online_order'].value_counts()","868c02c9":"# Lets get the boundary of Bangalore first\nboundary = pd.read_csv('..\/input\/banglore-locations\/bangalore_loc.csv', usecols = ['Lat', 'Long'])","3e1edfe4":"# Function: plot_map\n# Description: Takes a dataframe - location, lat, long, markersize and make a plot.\n#              Boundary of Bangalore is drawn using boundary data frame thats listed above  \ndef plot_map(dfr,markersize = 5):    \n    plt.figure(figsize=(20,20))\n    map = Basemap(projection='aeqd', lon_0 = 77.5, lat_0 = 12.8, width = 150000, height = 170000, resolution='l') # set res=h\n    map.drawmapboundary(fill_color='cyan')\n    map.etopo()\n    map.drawcoastlines()\n    map.drawcountries()\n    map.fillcontinents(color='#f2f2f2',lake_color='#46bcec')\n    scale = 0.00002\n    for i in range(0,len(boundary)):\n        x, y = map(boundary.ix[i,'Long'], boundary.ix[i,'Lat'])\n        map.plot(x,y,marker='o', color='Red', markersize=3)\n    for i in range(0,len(dfr)):\n        x, y = map(dfr.ix[i,'Long'], dfr.ix[i,'Lat'])\n        map.plot(x,y,marker='o', color='Green', markersize=markersize, alpha = 0.6)\n    plt.show()","262b45b5":"# Location column\nzom['location'].unique()","4f8715f8":"# Getting the rough Latitude and Longitudes of the locations from Google\nplace = {'location': [\n                   'Banashankari', 'Basavanagudi', 'Mysore Road', 'Jayanagar',\n                   'Kumaraswamy Layout', 'Rajarajeshwari Nagar', 'Vijay Nagar',\n                   'Uttarahalli', 'JP Nagar', 'South Bangalore', 'City Market',\n                   'Nagarbhavi', 'Bannerghatta Road', 'BTM', 'Kanakapura Road',\n                   'Bommanahalli', 'CV Raman Nagar', 'Electronic City', 'HSR',\n                   'Marathahalli', 'Sarjapur Road', 'Wilson Garden', 'Shanti Nagar',\n                   'Koramangala 5th Block', 'Koramangala 8th Block', 'Richmond Road',\n                   'Koramangala 7th Block', 'Jalahalli', 'Koramangala 4th Block',\n                   'Bellandur', 'Whitefield', 'East Bangalore', 'Old Airport Road',\n                   'Indiranagar', 'Koramangala 1st Block', 'Frazer Town', 'RT Nagar',\n                   'MG Road', 'Brigade Road', 'Lavelle Road', 'Church Street',\n                   'Ulsoor', 'Residency Road', 'Shivajinagar', 'Infantry Road',\n                   'St. Marks Road', 'Cunningham Road', 'Race Course Road',\n                   'Commercial Street', 'Vasanth Nagar', 'HBR Layout', 'Domlur',\n                   'Ejipura', 'Jeevan Bhima Nagar', 'Old Madras Road', 'Malleshwaram',\n                   'Seshadripuram', 'Kammanahalli', 'Koramangala 6th Block',\n                   'Majestic', 'Langford Town', 'Central Bangalore', 'Sanjay Nagar',\n                   'Brookefield', 'ITPL Main Road, Whitefield',\n                   'Varthur Main Road, Whitefield', 'KR Puram',\n                   'Koramangala 2nd Block', 'Koramangala 3rd Block', 'Koramangala',\n                   'Hosur Road', 'Rajajinagar', 'Banaswadi', 'North Bangalore',\n                   'Nagawara', 'Hennur', 'Kalyan Nagar', 'New BEL Road', 'Jakkur',\n                   'Rammurthy Nagar', 'Thippasandra', 'Kaggadasapura', 'Hebbal',\n                   'Kengeri', 'Sankey Road', 'Sadashiv Nagar', 'Basaveshwara Nagar',\n                   'Yeshwantpur', 'West Bangalore', 'Magadi Road', 'Yelahanka',\n                   'Sahakara Nagar', 'Peenya'\n                ],\n        'Lat':  [\n                    12.9255, 12.9406, 12.9537, 12.9308,\n                    12.9044, 12.9149, 12.9756,\n                    12.9070, 12.9063, 12.9716, 12.9647,\n                    12.9719, 12.8052, 12.9166, 12.5462,\n                    12.9030, 12.9793, 12.8440, 12.9121,\n                    12.9569, 12.8549, 12.9482, 12.9578, \n                    12.9352, 12.9415, 12.9661,\n                    12.9363, 13.0528, 12.9315,\n                    12.9304, 12.9698, 13.0012, 13.1986,\n                    12.9784, 12.9265, 12.9970, 13.0196,\n                    12.9766, 12.5824, 12.9712, 12.9751,\n                    12.9817, 12.5820, 12.9857, 12.9832,\n                    12.9723, 12.9892, 12.9615, \n                    12.9822, 12.9920, 13.0191, 12.9610, \n                    12.9385, 12.9642, 12.9851, 13.0055, \n                    12.9889, 13.0159, 12.9382, \n                    12.9767, 12.9570, 12.9716, 13.0369,\n                    12.9655, 12.9698,\n                    12.9698, 13.0170,\n                    12.9247, 12.9286, 12.9352, \n                    12.9359, 12.9982, 13.0104, 12.9375,\n                    13.0422, 13.0359, 13.0240, 13.0292, 13.0631,\n                    13.0163, 12.9718, 12.9836, 13.0354,\n                    12.8997, 12.9941, 13.0068, 12.9880,\n                    13.0250, 12.9747, 12.9750, 13.1186,\n                    13.0623, 13.0285\n                ],\n        'Long': [\n                    77.5468, 77.5738, 77.5434, 77.5802,\n                    77.5649, 12.9149, 77.5354,\n                    77.5521, 77.5857, 77.5946, 77.5768,\n                    77.5127, 77.5788, 77.6101, 77.4199,\n                    77.6242, 77.6642, 77.6739, 77.6446,\n                    77.7011, 77.7881, 77.5972, 77.5993,\n                    77.6200, 77.6178, 77.5949,\n                    77.6128, 77.5419, 77.6300,\n                    77.6784, 77.7500, 77.6183, 77.7066,\n                    77.6408, 77.6362, 77.6144, 77.5968,\n                    77.5993, 77.3157, 77.5978, 77.3450,\n                    77.6284, 77.3450, 77.6057, 77.6047,\n                    77.6012, 77.5932, 77.6157,\n                    77.6083, 77.5943, 77.6465, 77.6387,\n                    77.6308, 77.6581, 77.6434, 77.5692,\n                    77.5740, 77.6379, 77.6228, \n                    77.5713, 77.6028, 77.5946, 77.5785,\n                    77.7185, 77.7500,\n                    77.7500, 77.7044,\n                    77.6207, 77.6291, 77.6244, \n                    77.6088, 77.5530, 77.6482, 77.4472,\n                    77.6136, 77.6431, 77.6433, 77.5709, 77.6207,\n                    77.6785, 77.6552, 77.6797, 77.5988,\n                    77.4827, 77.5860, 77.5813, 77.5375,\n                    77.5340, 77.5701, 77.2231, 77.5975,\n                    77.5871, 77.5197\n                ]\n       }\n\nloc = pd.DataFrame(place, columns = ['location', 'Lat', 'Long'])","c174acb2":"zom = pd.merge(zom, loc, how='left', on='location')\nzom.head()","f7e61f01":"# Lets plot the locations first\nplot_map(loc,markersize = 5)","f914d50c":"# listed_in(city) is just a subset of locations column, we can use either one depending on the usage during further analysis\nzom['listed_in(city)'].unique()","2fda6bbf":"data = {'location': [\n                   'Banashankari', 'Bannerghatta Road', 'Basavanagudi', 'Bellandur',\n                   'Brigade Road', 'Brookefield', 'BTM', 'Church Street',\n                   'Electronic City', 'Frazer Town', 'HSR', 'Indiranagar',\n                   'Jayanagar', 'JP Nagar', 'Kalyan Nagar', 'Kammanahalli',\n                   'Koramangala 4th Block', 'Koramangala 5th Block',\n                   'Koramangala 6th Block', 'Koramangala 7th Block', 'Lavelle Road',\n                   'Malleshwaram', 'Marathahalli', 'MG Road', 'New BEL Road',\n                   'Old Airport Road', 'Rajajinagar', 'Residency Road',\n                   'Sarjapur Road', 'Whitefield'\n                ],\n        'Lat':  [\n                    12.9255, 12.8070, 12.9406, 12.9304,\n                    12.5824, 12.9698, 12.9166, 12.9751,\n                    12.8440, 12.9970, 12.9121, 12.9784,\n                    12.9308, 12.9063, 13.0240, 13.0159,\n                    12.9315, 12.9352, \n                    12.9382, 12.9363, 12.9711,\n                    13.0055, 12.9569, 12.9766, 13.0292,\n                    12.9600, 12.9982, 12.9661,\n                    12.8600, 12.9698\n                ],\n        'Long': [  \n                    77.5468, 77.5787, 77.5738, 77.6784,\n                    77.3157, 77.7500, 77.6101, 77.6047,\n                    77.6739, 77.6144, 77.6446, 77.6408,\n                    77.5802, 77.5857, 77.6433, 77.6379,\n                    77.6300, 77.6200, \n                    77.6228, 77.6128, 77.5978,\n                    77.5692, 77.7011, 77.5993, 77.5709,\n                    77.6460, 77.5530, 77.5949,\n                    77.7860, 77.7500\n                ]\n       }\nlistedInCity = pd.DataFrame(data, columns = ['location', 'Lat', 'Long'])","545d54b6":"# Lets plot the locations first\nplot_map(listedInCity, markersize = 5)","ded3c2c7":"# Now that we have an rought idea of the locations, we can plot further features\n# Lets look at Ratings columns first\n# Changing Rating column's format\nzom['rate'] = zom['rate'].str.split('\/', n = 1, expand = True)[0]\nzom['rate'] = zom['rate'].str.split(' ', n = 1, expand = True)[0]\nzom['rate'].unique()","fc667c20":"# Lets look at 'NEW' rating\nzom[zom['rate']=='NEW']['votes'].unique()","40270e93":"plt.figure(figsize=(15,7), dpi =100)\nax = zom['rate'].value_counts().sort_index().plot.bar()\nax.set_xlabel('Rating')\nax.set_ylabel('Count')","f321e3d9":"zom.info()","d83b9260":"# Since ratings is granular eg, 2.0, 2.1 ..., lets approximate them to the nearst round number\n# -, New, 1.8 - 2.9 : Poor (0)\n# 3.0 - 3.9 : Average (1)\n# 4.0 - 4.4 : Good (2)\n# 4.5 - 4.9 : Great (3)\n\nd = {\n     '-': 0, 'NEW' : 0, '1.8': 0, \n     '2.0' : 0, '2.1' : 0, '2.2' : 0, '2.3' : 0, '2.4' : 0, '2.5' : 0, '2.6' : 0, '2.7' : 0, '2.8' : 0, '2.9' : 0, \n     '3.0' : 1, '3.1' : 1, '3.2' : 1, '3.3' : 1, '3.4' : 1, '3.5' : 1, '3.6' : 1, '3.7' : 1, '3.8' : 1, '3.9' : 1,   \n     '4.0' : 2, '4.1' : 2, '4.2' : 2, '4.3' : 2, '4.4' : 2, \n     '4.5' : 3, '4.6' : 3, '4.7' : 3, '4.8' : 3, '4.9' : 3   \n    }\nzom['NewRating'] = zom['rate'].map(d)","eef462b4":"plt.figure(figsize=(15,7), dpi =100)\nax = zom['NewRating'].value_counts().sort_index().plot.bar()\nax.set_xlabel('Rating')\nax.set_ylabel('Count')\nax.set_xticklabels(('Poor','Average', 'Good', 'Great'))","27252a7f":"# Lets add ratings column to our listedInCity dataFrame\nlistedInCity = pd.DataFrame(data, columns = ['location', 'Lat', 'Long'])\nfor r in list(zom['NewRating'].unique()):\n    for c in list(zom['listed_in(city)'].unique()):\n        listedInCity.loc[listedInCity['location'] == c, r] = len(zom[(zom['listed_in(city)'] == c) & (zom['NewRating'] == r)])\nlistedInCity.drop(np.nan, axis = 1, inplace = True)\nlistedInCity.head()","16c8f39e":"# Lets plot different ratings on our plot\nfor r in [0.0, 1.0, 2.0, 3.0]:\n    if r in [0.0, 2.0, 3.0]:\n        scale = 0.05\n    elif r == 1.0:\n        scale = 0.02\n    plt.figure(figsize=(20,20))\n    map = Basemap(projection='aeqd', lon_0 = 77.5, lat_0 = 12.8, width = 150000, height = 170000, resolution='l') # set res=h\n    map.drawmapboundary(fill_color='cyan')\n    map.etopo()\n    map.drawcoastlines()\n    map.drawcountries()\n    map.fillcontinents(color='#f2f2f2',lake_color='#46bcec')\n    \n    plt.title(\"{} Star Rating\".format(r))\n    for i in range(0,len(boundary)):\n        x, y = map(boundary.ix[i,'Long'], boundary.ix[i,'Lat'])\n        map.plot(x,y,marker='o', color='Red', markersize=3)\n    for i in range(0,len(listedInCity)):\n        x, y = map(listedInCity.ix[i,'Long'], listedInCity.ix[i,'Lat'])\n        map.plot(x,y,marker='o', color='Green', markersize=int(listedInCity.ix[i,r]*scale), alpha = 0.6)\n    plt.show()","2e1db2cd":"zom.columns","20aafaf4":"# Ratings vs book_table\nplt.figure(figsize=(15,7), dpi =100)\nplot = sns.countplot(zom['NewRating'], order=zom['NewRating'].value_counts().index.sort_values(),hue=zom['book_table'])\nplot.set_xticklabels(plot.get_xticklabels(), rotation = 90)\nplt.tight_layout()","60b6c3af":"# Ratings vs book_table\nplt.figure(figsize=(15,7), dpi =100)\nplot = sns.countplot(zom['rate'], order=zom['rate'].value_counts().index.sort_values(),hue=zom['book_table'])\nplot.set_xticklabels(plot.get_xticklabels(), rotation = 90)\nplt.tight_layout()","f0e8eeb8":"# Ratings vs online_order\nplt.figure(figsize=(15,7), dpi =100)\nplot = sns.countplot(zom['NewRating'], order=zom['NewRating'].value_counts().index.sort_values(),hue=zom['online_order'])\nplot.set_xticklabels(plot.get_xticklabels(), rotation = 90)\nplt.tight_layout()","fbddcfbd":"# Ratings vs online_order\nplt.figure(figsize=(15,7), dpi =100)\nplot = sns.countplot(zom['rate'], order=zom['rate'].value_counts().index.sort_values(),hue=zom['online_order'])\nplot.set_xticklabels(plot.get_xticklabels(), rotation = 90)\nplt.tight_layout()","4cf5bab5":"# book_table, online_order\nfig,axes = plt.subplots(1,2,figsize=(15,5))\nsns.countplot(zom['book_table'], ax = axes[0])\nsns.countplot(zom['online_order'], ax = axes[1])\n#axes[1] = sns.countplot(zom['NewRating'], order=zom['NewRating'].value_counts().index.sort_values(),hue=zom['online_order'])\n#plt.tight_layout()","6c6724f9":"zom.columns","dd6eca9b":"# Votes column\nzom[zom['votes'] == zom['votes'].max()]","c3434f65":"# Restaurant with the most VOTES\nzom.iloc[zom['votes'].idxmax()]","c2c10915":"# Top 5 restaurants based by vote counts\ntop5votes = zom.iloc[zom['votes'].sort_values(ascending = False).index]['name'].head(30).unique()\ntop5votes","9a4c9dab":"# Their total num of votes\nfor re in top5votes:\n    print(re, ' : ', zom[zom['name'] == re]['votes'].sum())","80017be1":"# List of restaurants with highest number of votes in each listed_in(city)\nlc = list(zom['listed_in(city)'].unique())\nprint('City', '             ', 'Name of Restaurant', '            ', 'Number of Votes')\nfor c in lc:\n    temp = zom.loc[zom[zom['listed_in(city)'] == c]['votes'].idxmax()]\n    print(c, \"        \", temp['name'], \"        \", temp['votes'])","ba09bb76":"# List of restaurants with highest number of votes in each listed_in(city)\nlc = list(zom['listed_in(city)'].unique())\nprint('City', '             ', 'Name of Restaurant', '            ', 'Number of Votes')\nfor c in lc:\n    temp = zom.loc[zom[zom['listed_in(city)'] == c]['votes'].idxmin()]\n    print(c, \"        \", temp['name'], \"        \", temp['votes'])    ","01c72686":"zom.columns","fc8161e6":"# Plotting book_table vs votes\nfig, axes = plt.subplots(3, 1, figsize=(15,17), dpi =100)\nzom[zom['book_table'] == 'Yes']['votes'].plot.hist(bins = 500, ax = axes[0])\nzom[zom['book_table'] == 'No']['votes'].plot.hist(bins = 300, ax = axes[1])\nzom.loc[(zom['book_table'] == 'No') & (zom['votes'] > 0)]['votes'].plot.hist(bins = 500, ax = axes[2])","3f8f9659":"# Plotting online_order vs votes\nfig, axes = plt.subplots(2, 1, figsize=(15,17), dpi =100)\nzom[zom['online_order'] == 'Yes']['votes'].plot.hist(bins = 500, ax = axes[0])\nzom[zom['online_order'] == 'No']['votes'].plot.hist(bins = 300, ax = axes[1])","ae5f05a1":"zom.columns","a3ae23a4":"zom.head()","7ca29d9b":"zom['rest_type'].unique()","ddcd29e4":"def rest_count(zom_df):\n    rest_dict = {'Unknown': 0}\n    for j in range(len(zom_df)):\n        if zom_df['rest_type'][j] is not np.nan:\n            rests = zom_df['rest_type'][j].split(', ')\n            for rest in rests:  #iterates over each cuisine style in the list\n                if rest in rest_dict:\n                    rest_dict[rest] += 1\n                else :\n                    rest_dict[rest] = 1\n        else:\n            rest_dict['Unknown'] +=1\n    return (rest_dict)","efdf7080":"restaurants = rest_count(zom)\nrestaurants = pd.Series(restaurants) \nprint('-----------------------------------------')\nprint('      Type of Restaurants split-up')\nprint('-----------------------------------------')\nprint(restaurants.sort_values(ascending = False))","6de248ab":"# Plot the various rest types\nplt.figure(figsize=(15,7), dpi =100)\nrestaurants.sort_values(ascending = False).plot.bar()\nplot.set_xticklabels(plot.get_xticklabels(), rotation = 90)\nplt.tight_layout()","91e6c3e4":"def plot_city_restaurants(city_rest):\n    fig, ax = plt.subplots(1,1, figsize = (7,7))\n    ax = city_rest.sort_values(ascending = False).head().plot.pie(shadow = True)\n    ax.set_title(city)","3b025a47":"print('---------------------TOP 5 restaurant types per location-------------------------------------------')\nfor city in list(zom['listed_in(city)'].unique()):\n    print(city)\n    city_rest = rest_count(zom[zom['listed_in(city)'] == city].reset_index())\n    city_rest = pd.Series(city_rest)\n    print(city_rest.sort_values(ascending = False).head())\n    print('----------------------------------------------------------------')\n    plot_city_restaurants(city_rest)\n    ","f2b77aca":"# Cuisines\ndef cuisine_count(zom_df):\n    cuisine_dict = {'Unknown': 0}\n    for j in range(len(zom_df)):\n        if zom_df['cuisines'][j] is not np.nan:\n            styles = zom_df['cuisines'][j].split(', ')\n            for style in styles:  #iterates over each cuisine style in the list\n                if style in cuisine_dict:\n                    cuisine_dict[style] += 1\n                else :\n                    cuisine_dict[style] = 1\n        else:\n            cuisine_dict['Unknown'] +=1\n    print(\"Total number of different cuisine styles ('unknown' included) :\", len(cuisine_dict))\n    return(cuisine_dict)","e838751b":"cuisines = cuisine_count(zom)\ncuisines = pd.Series(cuisines) \nprint('-----------------------------------------')\nprint('      Type of Cuisines split-up')\nprint('-----------------------------------------')\nprint(cuisines.sort_values(ascending = False))","dde9d0ba":"# Plot the various cuisines\nplt.figure(figsize=(15,7), dpi =100)\ncuisines.sort_values(ascending = False).plot.bar()\nplot.set_xticklabels(plot.get_xticklabels(), rotation = 90)\nplt.tight_layout()","bc66b131":"def plot_city_cuisine(city_cui):\n    fig, ax = plt.subplots(1,1, figsize = (7,7))\n    ax = city_cui.sort_values(ascending = False).head(10).plot.pie(shadow = True)\n    ax.set_title(city)","570337d8":"print('---------------------TOP 5 Cuisines types per location-------------------------------------------')\nfor city in list(zom['listed_in(city)'].unique()):\n    print(city)\n    city_cui = cuisine_count(zom[zom['listed_in(city)'] == city].reset_index())\n    city_cui = pd.Series(city_cui)\n    print(city_cui.sort_values(ascending = False).head())\n    print('----------------------------------------------------------------')\n    plot_city_cuisine(city_cui)","31d89d3a":"### Takeaway: Majority of ppl who don't book a table leave a poor rating.","ab4ea933":"### Takeaway: \"NEW\" rating has \"0\" votes","f50111e2":"### Takeaway: Majority of orders is online irrespective of the rating","1c3c424f":"# MORE TO COME!!!!!","6d3813cf":"### Takeaway: Pretty much half of the orders are online_orders across all the locations.","cb97162c":"## Lets plot some features on a map","b15462d0":"## Lets do some data analysis","83233d1d":"# Mapping Yes, No to binary value\nd = {'Yes': 1, 'No': 0}\nzom['online_order'] = zom['online_order'].map(d)\nzom['book_table'] = zom['book_table'].map(d)\nzom.head()","de78b445":"## Takeaway: Majority of orders are TakeOuts.","89475617":"### Takeaway: Majority of poor\/average ratings don't book a table. However on good and great ratings, the ratio               seems to be better"}}