{"cell_type":{"d4fe4b34":"code","6991a04e":"code","18f7ea07":"code","e8c27faf":"code","6aacef71":"code","a2901dc3":"code","3369fdb2":"code","396a2dbe":"code","220f90f9":"code","b75f57f8":"code","76c49dad":"code","2111203a":"code","48e30bf6":"code","46d0209b":"code","78010b97":"code","36e3d57d":"markdown","35cf8e32":"markdown","bd2447fe":"markdown","dc9a8576":"markdown"},"source":{"d4fe4b34":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6991a04e":"from sklearn.feature_selection import mutual_info_regression\n\n# Set Matplotlib defaults\nplt.style.use(\"seaborn-whitegrid\")\nplt.rc(\"figure\", autolayout=True)\nplt.rc(\n    \"axes\",\n    labelweight=\"bold\",\n    labelsize=\"large\",\n    titleweight=\"bold\",\n    titlesize=14,\n    titlepad=10,\n)","18f7ea07":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/cusersmarildownloadsgermancsv\/german.csv', delimiter=';', encoding = \"ISO-8859-2\", nrows = nRowsRead)\ndf.dataframeName = 'german.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndf.head()","e8c27faf":"# Utility functions from Tutorial\ndef make_mi_scores(X, y):\n    X = X.copy()\n    for colname in X.select_dtypes([\"object\", \"category\"]):\n        X[colname], _ = X[colname].factorize()\n    # All discrete features should now have integer dtypes\n    discrete_features = [pd.api.types.is_integer_dtype(t) for t in X.dtypes]\n    mi_scores = mutual_info_regression(X, y, discrete_features=discrete_features, random_state=0)\n    mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X.columns)\n    mi_scores = mi_scores.sort_values(ascending=False)\n    return mi_scores","6aacef71":"def plot_mi_scores(scores):\n    scores = scores.sort_values(ascending=True)\n    width = np.arange(len(scores))\n    ticks = list(scores.index)\n    color = np.array([\"C0\"] * scores.shape[0])\n    # Color red for probes\n    idx = [i for i, col in enumerate(scores.index)\n           if col.startswith(\"PROBE\")]\n    color[idx] = \"C3\"\n    # Create plot\n    plt.barh(width, scores, color=color)\n    plt.yticks(width, ticks)\n    plt.title(\"Mutual Information Scores\")","a2901dc3":"features = [\"Account_Balance\", \"Credit_Amount\", \"Duration_of_Credit_monthly\"]\nsns.relplot(\n    x=\"value\", y=\"Creditability\", col=\"variable\", data=df.melt(id_vars=\"Creditability\", value_vars=features), facet_kws=dict(sharex=False),\n);","3369fdb2":"X = df.copy()\ny = X.pop('Creditability')\n\nmi_scores = make_mi_scores(X, y)","396a2dbe":"print(mi_scores.head(20))\n# print(mi_scores.tail(20))  # uncomment to see bottom 20","220f90f9":"plt.figure(dpi=100, figsize=(8, 5))\nplot_mi_scores(mi_scores.head(20))\n# plot_mi_scores(mi_scores.tail(20))  # uncomment to see bottom 20","b75f57f8":"sns.catplot(x=\"Creditability\", y=\"Duration_of_Credit_monthly\", data=df, kind=\"boxen\");\n#plt.xticks(rotation=45) It didn't make better\nplt.title(\"Creditability & Duration of Credit Monthly\")\n#plt.xticks(rotation=45)","76c49dad":"sns.catplot(x=\"Creditability\", y=\"Guarantors\", data=df, kind=\"boxen\");\nplt.title(\"Creditability & Guarantors\")","2111203a":"sns.catplot(x=\"Creditability\", y=\"Account_Balance\", data=df, kind=\"boxen\");\nplt.title(\"Creditability & Account Balance\")","48e30bf6":"feature = \"Credit_Amount\"\n\nsns.lmplot(\n    x=feature, y=\"Creditability\", hue=\"Guarantors\", col=\"Account_Balance\",\n    data=df, scatter_kws={\"edgecolor\": 'w'}, col_wrap=3, height=4,\n);","46d0209b":"feature = \"Creditability\"\n\nsns.lmplot(\n    x=feature, y=\"Age_years\", hue=\"Payment_Status_of_Previous_Credit\", col=\"Account_Balance\",\n    data=df, scatter_kws={\"edgecolor\": 'w'}, col_wrap=3, height=4,\n);","78010b97":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Be patient. T\u00f4 na \u00e1rea, @mpwolke war Hier.' )","36e3d57d":"![](https:\/\/i.ytimg.com\/vi\/U9h1xkNELvY\/maxresdefault.jpg)youtube.com","35cf8e32":"#Below, X=Value and col= Variable are Not columns of the Dataset. Therefore, Do Not change them!","bd2447fe":"#Mutual Information by Ryan Holbrook\n\nAll script by Ryan Holbrook https:\/\/www.kaggle.com\/mpwolke\/exercise-mutual-information\/edit\n\nFeature Engineering Kaggle Micro-course by Ryan Holbrook.\n\nhttps:\/\/www.kaggle.com\/learn\/feature-engineering","dc9a8576":"#Spoiler alert No Missing Values "}}