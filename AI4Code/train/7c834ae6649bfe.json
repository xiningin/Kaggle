{"cell_type":{"271dead7":"code","6d89a048":"code","ae5fcfd1":"code","f4b51d8b":"code","ef81b640":"code","cca6603c":"code","a2ca61a7":"code","20a194f9":"code","78c9370b":"code","861753c1":"code","9f4cf123":"code","9b4805c6":"code","e49bbc16":"code","772c185e":"code","48a7f8e5":"code","6bf49bbc":"code","781f32de":"code","baf7f300":"code","b1e4d4a9":"code","b74485d4":"code","075af859":"code","32ee6363":"code","22ac0078":"code","551e15d3":"code","791730a0":"code","c1c1b555":"code","6beb68ef":"code","3510864d":"code","c535a51f":"code","49fec933":"code","2e1c61c0":"code","b925f5f5":"code","770c3e80":"code","afdf64e0":"code","388830fd":"code","7342245c":"code","cbfea182":"code","cf6ace4f":"code","ba507868":"code","96d36cf3":"code","4e959e37":"code","5f063f5e":"code","f97a1b22":"code","7c0eabd3":"code","ea9f223d":"code","33166e2f":"code","fea4e0d3":"code","c652e6bb":"code","667fa139":"code","2f6a4c5a":"code","ce5b3ba5":"code","ddd05cc8":"code","4561bdab":"code","c6614273":"code","75e4524a":"code","12e0dd28":"code","beca553a":"code","c7a2b83d":"code","6aa7eb56":"code","29a7576b":"code","7ba61597":"code","23176e22":"code","f00e4475":"code","f47ffced":"code","da4ceb36":"code","8dd0a17d":"code","56c93411":"code","55810414":"code","c299d5f9":"code","24c772a2":"code","1d423ba5":"code","2cad091b":"code","47944639":"code","58833efc":"code","23fe826d":"code","a3d9b772":"code","0f006113":"code","147a195e":"code","c25608c8":"code","18373c9b":"code","3aa9fe12":"code","35c19a1b":"code","27dbcb05":"code","3d9f826c":"code","13a81514":"code","d149c64a":"code","4e919864":"code","3384be5e":"code","c26c0fa0":"code","f14bd2cd":"code","2db8a456":"code","08b6f933":"code","3f41aebc":"markdown","ea2de423":"markdown","0d24799b":"markdown","7a8ab965":"markdown","ae1b9f09":"markdown","aacdb307":"markdown","82f62d3c":"markdown","d828facb":"markdown","17bf6b9a":"markdown","c05b8b86":"markdown","62fb44a7":"markdown","f457fd81":"markdown","392b07a8":"markdown","690d43bd":"markdown","9fce3ebf":"markdown","a0828c5c":"markdown","bb7e88ed":"markdown","d6d59ef2":"markdown","4e11f649":"markdown","a1b5a672":"markdown","8cc0993e":"markdown","a59659c8":"markdown","fbc884e3":"markdown","aad4bbc7":"markdown","9ff3175c":"markdown","cd2abbaf":"markdown","3af2e044":"markdown","a9ab5186":"markdown","c67822c6":"markdown","c044879f":"markdown","b393b382":"markdown","57427d41":"markdown","538f7057":"markdown","fabe752e":"markdown","3c7b30e2":"markdown","6f6169a0":"markdown","5e1d92d9":"markdown","39102f13":"markdown","26c6351c":"markdown","7344e549":"markdown","af8443fb":"markdown","a38a9874":"markdown","34aa872a":"markdown","7dfe0783":"markdown","b214fc67":"markdown","3832346c":"markdown","dc398f38":"markdown","bdf19e74":"markdown","1b5df3c6":"markdown","658bf32f":"markdown","5751803a":"markdown","f1caaf6a":"markdown","bf9f769a":"markdown","9c03c1d6":"markdown","014268e3":"markdown","05ecee47":"markdown","78f92191":"markdown","0c10bea3":"markdown","c4c0ea31":"markdown","21a824c2":"markdown","20fabda1":"markdown","9be0c354":"markdown","e4e9eba1":"markdown","b4e40b48":"markdown","e237b459":"markdown","966d4cc3":"markdown","70bb527c":"markdown","1075a6ef":"markdown","2002e3cd":"markdown","be3012a5":"markdown","b672702f":"markdown","0c138af2":"markdown","5994a245":"markdown","7e60e9a5":"markdown","4d96f4b1":"markdown","1975ff1f":"markdown","f27eb94c":"markdown","ac2599ad":"markdown","01a022cc":"markdown","2bd12bfa":"markdown","64658789":"markdown"},"source":{"271dead7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\nfrom scipy import stats\nfrom scipy.stats import uniform, truncnorm, randint\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6d89a048":"df = pd.read_csv('..\/input\/churn-modelling\/Churn_Modelling.csv')","ae5fcfd1":"df.head()","f4b51d8b":"df.describe()","ef81b640":"df.dtypes","cca6603c":"df_num = df[['CreditScore','Age','Tenure','Balance','NumOfProducts','EstimatedSalary']]","a2ca61a7":"fig = plt.figure(figsize=(30,10))\ngs = fig.add_gridspec(2, df_num.shape[1], hspace=0)\naxs = gs.subplots()\n\nfor idx,col in enumerate(df_num.columns):\n    axs[0, idx].hist(df_num[col])\n    axs[0, idx].title.set_text(col)\n    axs[1, idx].boxplot(df_num[col], vert=False)\nplt.show()    ","20a194f9":"ax = sns.heatmap(df_num.corr(), annot=True)","78c9370b":"df_cat = df[['Geography','Gender','HasCrCard','IsActiveMember']]","861753c1":"for i in df_cat.columns:\n    sns.barplot(df_cat[i].value_counts().index,df_cat[i].value_counts()).set_title(i)\n    plt.show()","9f4cf123":"sns.countplot(df['Exited']).set_title('Exited')","9b4805c6":"values = df.Exited.value_counts()\nlabels = ['Not Exited', 'Exited']\n\nfig, ax = plt.subplots(figsize = (4, 3), dpi = 100)\nexplode = (0, 0.09)\n\npatches, texts, autotexts = ax.pie(values, labels = labels, autopct = '%1.2f%%', shadow = True,\n                                   startangle = 90, explode = explode)\n\nplt.setp(texts, color = 'grey')\nplt.setp(autotexts, size = 8, color = 'white')\nautotexts[1].set_color('black')\nplt.show()","e49bbc16":"# compare Exit rate across CreditScore, Age, Tenure, Balance, NumOfProducts, EstimatedSalary (numericals)\npd.pivot_table(df, index = 'Exited', values = df_num.columns)","772c185e":"df.columns","48a7f8e5":"df[['Exited','Geography']].groupby('Geography').agg(['mean','count']).sort_values(by=('Exited','mean'), ascending=False)","6bf49bbc":"sns.countplot('Geography', hue = 'Exited', data = df)","781f32de":"df[['Exited','Gender']].groupby('Gender').agg(['mean','count']).sort_values(by=('Exited','mean'), ascending=False)","baf7f300":"sns.countplot('Gender', hue = 'Exited', data = df)","b1e4d4a9":"df[['Exited','HasCrCard']].groupby('HasCrCard').agg(['mean','count']).sort_values(by=('Exited','mean'), ascending=False)","b74485d4":"sns.countplot('HasCrCard', hue = 'Exited', data = df)","075af859":"df[['Exited','IsActiveMember']].groupby('IsActiveMember').agg(['mean','count']).sort_values(by=('Exited','mean'), ascending=False)","32ee6363":"sns.countplot('IsActiveMember', hue = 'Exited', data = df)","22ac0078":"df[['Exited','NumOfProducts']].groupby('NumOfProducts').agg(['mean','count']).sort_values(by=('Exited','mean'), ascending=False)","551e15d3":"sns.countplot('NumOfProducts', hue = 'Exited', data = df)","791730a0":"df[['Exited','Tenure']].groupby('Tenure').agg(['mean','count']).sort_values(by=('Exited','mean'), ascending=False)","c1c1b555":"sns.countplot('Tenure', hue = 'Exited', data = df)","6beb68ef":"df[['Exited','Balance']].groupby('Exited').mean()","3510864d":"sns.boxplot(y='Balance', x='Exited', data=df, orient='v',)","c535a51f":"# There are a lot of Employees with Balance = 0, so let's see the MCR for those\ndf[df['Balance'] == 0].mean()['Exited']","49fec933":"# Divide Age into bins by decade\ndf['Age_bin'] = pd.cut(df['Age'], [0, 20, 30, 40, 50, 60, 70, 80, 90, 100])\ndf.head()","2e1c61c0":"df[['Exited','Age_bin']].groupby('Age_bin').agg(['mean','count'])","b925f5f5":"fig = plt.figure(figsize=(20,10))\nsns.countplot('Age_bin', hue = 'Exited', data = df)","770c3e80":"df['Exited'].mean()","afdf64e0":"df[['Exited','Age_bin']].groupby('Age_bin').agg(['mean','count'])['Exited','mean']","388830fd":"df_exited_agebin = df[['Exited','Age_bin']].groupby('Age_bin').agg(['mean','count'])['Exited','mean']\n\nfig = plt.figure(figsize=(10,5))\nsns.barplot(df_exited_agebin.index,df_exited_agebin.values).set_title('Mean churning rate for Age bins')\nplt.axhline(y=df['Exited'].mean(), color='#ff3300', linestyle='--', linewidth=1, label='Global mean churning rate')\nplt.legend()\n","7342245c":"# Divide Age into 3 further categories\ndf['Age_bin_3cat'] = pd.cut(df['Age'], [0, 40, 70, 100])\ndf.head()","cbfea182":"df[['Exited','Age_bin_3cat']].groupby('Age_bin_3cat').agg(['mean','count'])","cf6ace4f":"df_exited_agebin3cat = df[['Exited','Age_bin_3cat']].groupby('Age_bin_3cat').agg(['mean','count'])['Exited','mean']\n\nfig, (ax1, ax2) = plt.subplots(2, figsize=(15,12))\nfig.suptitle('Vertically stacked subplots')\nsns.countplot('Age_bin', hue = 'Exited', data = df, ax=ax1)\nsns.barplot(df_exited_agebin3cat.index,df_exited_agebin3cat.values, ax=ax2)\nplt.axhline(y=df['Exited'].mean(), color='#ff3300', linestyle='--', linewidth=1, label='Global mean churning rate')\nplt.legend()","ba507868":"#histogram and normal probability plot\nsns.distplot(df['Age'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df['Age'], plot=plt)","96d36cf3":"#histogram and normal probability plot\nsns.distplot(np.log(df['Age']), fit=norm);\nfig = plt.figure()\nres = stats.probplot(np.log(df['Age']), plot=plt)","4e959e37":"#histogram and normal probability plot\nfitted_data, fitted_lambda = stats.boxcox(df['Age'])\nsns.distplot(fitted_data, fit=norm);\nfig = plt.figure()\nres = stats.probplot(fitted_data, plot=plt)","5f063f5e":"df['Age_BoxCox'] = fitted_data","f97a1b22":"df[['Exited','CreditScore','EstimatedSalary']].groupby('Exited').mean()","7c0eabd3":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,5))\n\nsns.boxplot(y='CreditScore', x='Exited', data=df, orient='v', ax=axes[0])\nsns.boxplot(y='EstimatedSalary', x='Exited', data=df, orient='v', ax=axes[1])\nsns.pairplot(df, vars = df[['CreditScore','EstimatedSalary']], hue ='Exited')\n","ea9f223d":"# Divide CreditScore into 6 categories\ndf['CreditScore_bin'] = pd.cut(df['CreditScore'], [0, 400, 579, 669, 739, 799, 850])\ndf.head()","33166e2f":"df[['Exited','CreditScore_bin','EstimatedSalary']].groupby('CreditScore_bin').agg({'Exited': 'mean', 'EstimatedSalary': ['mean','count']})","fea4e0d3":"df[['Exited','Geography','EstimatedSalary']].groupby('Geography').agg({'Exited': 'mean', 'EstimatedSalary': ['mean','count']})","c652e6bb":"df[['Exited','Geography','Gender']].groupby(['Geography','Gender']).agg(['mean','count'])","667fa139":"grid = sns.FacetGrid(df, height=5, aspect=1.6)\ngrid.map(sns.pointplot, 'Geography', 'Exited', 'Gender', palette='deep')\ngrid.add_legend()","2f6a4c5a":"df[['EstimatedSalary','Geography','Gender']].groupby(['Geography','Gender']).mean()","ce5b3ba5":"df_num","ddd05cc8":"colormap = plt.cm.RdBu\nplt.figure(figsize=(14,12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(df.corr(),linewidths=0.1,vmax=1.0, \n            square=True, cmap=colormap, linecolor='white', annot=True)","4561bdab":"sns.pairplot(df, vars = df_num.columns, hue ='Exited')","c6614273":"df.head()","75e4524a":"df = df.iloc[:,3:]\n\ndf.head()","12e0dd28":"# Convert variables using get_dummies\ndf = pd.get_dummies(df, columns=['Geography','Gender'])\n\ndf.head()","beca553a":"df['ratio_CreditScore_Age'] = df['CreditScore']\/df['Age']\ndf['ratio_EstimatedSalary_Age'] = df['EstimatedSalary']\/df['Age']","c7a2b83d":"# cols_todrop_1 = ['Age_bin','Age_bin_3cat','CreditScore_bin','Age_BoxCox']\n# cols_todrop_2 = ['Age','CreditScore','Age_bin_3cat','Age_BoxCox']\n# cols_todrop_3 = ['Age','CreditScore','Age_bin','Age_BoxCox']\n# cols_todrop_4 = ['Age','Age_bin','Age_bin_3cat','CreditScore_bin']\n\n# df_1 = df.drop(cols_todrop_1, axis=1)\n# df_2 = df.drop(cols_todrop_2, axis=1)\n# df_3 = df.drop(cols_todrop_3, axis=1)\n# df_4 = df.drop(cols_todrop_4, axis=1)\n\n# df_2['Age_bin'] = df_2['Age_bin'].cat.codes\n# df_2['CreditScore_bin'] = df_2['CreditScore_bin'].cat.codes\n# df_3['Age_bin_3cat'] = df_3['Age_bin_3cat'].cat.codes\n# df_3['CreditScore_bin'] = df_3['CreditScore_bin'].cat.codes","6aa7eb56":"# from sklearn.preprocessing import StandardScaler\n\n# scaler = StandardScaler()\n","29a7576b":"from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold, RandomizedSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import RocCurveDisplay, roc_curve, auc, recall_score, precision_score, f1_score, accuracy_score, precision_recall_curve, roc_auc_score, classification_report, confusion_matrix\n\nfrom imblearn.over_sampling import RandomOverSampler\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.over_sampling import SMOTE\n\nfrom imblearn.pipeline import Pipeline as imbpipeline\nfrom imblearn.pipeline import make_pipeline\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nimport xgboost as xgb","7ba61597":"X = df.drop('Exited', axis=1)\ny = df['Exited']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=11)","23176e22":"X_train","f00e4475":"cols_todrop_1 = ['Age_bin','Age_bin_3cat','CreditScore_bin','Age_BoxCox']\ncols_todrop_2 = ['Age','CreditScore','Age_bin_3cat','Age_BoxCox']\ncols_todrop_3 = ['Age','CreditScore','Age_bin','Age_BoxCox']\ncols_todrop_4 = ['Age','Age_bin','Age_bin_3cat','CreditScore_bin']\n\nX1_train = X_train.drop(cols_todrop_1, axis=1)\nX1_test = X_test.drop(cols_todrop_1, axis=1)\nX2_train = X_train.drop(cols_todrop_2, axis=1)\nX2_test = X_test.drop(cols_todrop_2, axis=1)\nX3_train = X_train.drop(cols_todrop_3, axis=1)\nX3_test = X_test.drop(cols_todrop_3, axis=1)\nX4_train = X_train.drop(cols_todrop_4, axis=1)\nX4_test = X_test.drop(cols_todrop_4, axis=1)\n\nX2_train['Age_bin'] = X2_train['Age_bin'].cat.codes\nX2_test['Age_bin'] = X2_test['Age_bin'].cat.codes\nX2_train['CreditScore_bin'] = X2_train['CreditScore_bin'].cat.codes\nX2_test['CreditScore_bin'] = X2_test['CreditScore_bin'].cat.codes\nX3_train['Age_bin_3cat'] = X3_train['Age_bin_3cat'].cat.codes\nX3_test['Age_bin_3cat'] = X3_test['Age_bin_3cat'].cat.codes\nX3_train['CreditScore_bin'] = X3_train['CreditScore_bin'].cat.codes\nX3_test['CreditScore_bin'] = X3_test['CreditScore_bin'].cat.codes","f47ffced":"def fit_model(X, y, model, string):\n    \n    pipeline_under = imbpipeline(steps = [['under', RandomUnderSampler(random_state=11)],\n                                        ['scaler', StandardScaler()],\n                                        ['classifier', model()]])\n    \n    pipeline_over = imbpipeline(steps = [['over', RandomOverSampler()],\n                                        ['scaler', StandardScaler()],\n                                        ['classifier', model()]])\n    \n    pipeline_smote = imbpipeline(steps = [['smote', SMOTE(random_state=11)],\n                                        ['scaler', StandardScaler()],\n                                        ['classifier', model()]])\n    \n    stratified_kfold = StratifiedKFold(n_splits=5,\n                                       shuffle=True,\n                                       random_state=11)\n    \n    scores_under = cross_val_score(pipeline_under, X, y, scoring='roc_auc', cv=stratified_kfold, n_jobs=-1)\n    scores_over = cross_val_score(pipeline_over, X, y, scoring='roc_auc', cv=stratified_kfold, n_jobs=-1)\n    scores_smote = cross_val_score(pipeline_smote, X, y, scoring='roc_auc', cv=stratified_kfold, n_jobs=-1)\n    \n#     param_grid = {'classifier__C':[0.001, 0.01, 0.1, 1, 10, 100, 1000]}\n#     grid_search = GridSearchCV(estimator=pipeline,\n#                                param_grid=param_grid,\n#                                scoring='roc_auc',\n#                                cv=stratified_kfold,\n#                                n_jobs=-1)\n    \n    \n#     grid_search.fit(X_train, y_train)\n#     cv_score = grid_search.best_score_\n#     test_score = grid_search.score(X_test, y_test)\n#     return {'cv_score':cv_score, 'test_score':test_score}\n    print('-----------------------------------------------------')\n    print(string)\n    print('UNDERSAMPLING Mean ROC AUC: %.3f' % scores_under.mean())\n    print('OVERSAMPLING Mean ROC AUC: %.3f' % scores_over.mean())\n    print('SMOTE Mean ROC AUC: %.3f' % scores_smote.mean())\n#     print(scores_under)\n#     print(scores_over)\n#     print(scores_smote)","da4ceb36":"fit_model(X1_train, y_train, GaussianNB, 'Feature set 1')\nfit_model(X2_train, y_train, GaussianNB, 'Feature set 2')\nfit_model(X3_train, y_train, GaussianNB, 'Feature set 3')\nfit_model(X4_train, y_train, GaussianNB, 'Feature set 4')","8dd0a17d":"fit_model(X1_train, y_train, LogisticRegression, 'Feature set 1')\nfit_model(X2_train, y_train, LogisticRegression, 'Feature set 2')\nfit_model(X3_train, y_train, LogisticRegression, 'Feature set 3')\nfit_model(X4_train, y_train, LogisticRegression, 'Feature set 4')","56c93411":"fit_model(X1_train, y_train, LinearSVC, 'Feature set 1')\nfit_model(X2_train, y_train, LinearSVC, 'Feature set 2')\nfit_model(X3_train, y_train, LinearSVC, 'Feature set 3')\nfit_model(X4_train, y_train, LinearSVC, 'Feature set 4')","55810414":"fit_model(X1_train, y_train, RandomForestClassifier, 'Feature set 1')\nfit_model(X2_train, y_train, RandomForestClassifier, 'Feature set 2')\nfit_model(X3_train, y_train, RandomForestClassifier, 'Feature set 3')\nfit_model(X4_train, y_train, RandomForestClassifier, 'Feature set 4')","c299d5f9":"fit_model(X1_train, y_train, xgb.XGBClassifier, 'Feature set 1')\nfit_model(X2_train, y_train, xgb.XGBClassifier, 'Feature set 2')\nfit_model(X3_train, y_train, xgb.XGBClassifier, 'Feature set 3')\nfit_model(X4_train, y_train, xgb.XGBClassifier, 'Feature set 4')","24c772a2":"# Initialize Model and Pipeline with all the resampling methods\n\nclassifier = RandomForestClassifier()\n\nscaler = StandardScaler()\n\npipeline = [\n    make_pipeline(RandomUnderSampler(random_state=11), scaler, classifier),\n    make_pipeline(RandomOverSampler(random_state=11), scaler, classifier),\n    make_pipeline(SMOTE(random_state=11), scaler, classifier),\n]","1d423ba5":"cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=11)","2cad091b":"X, y = X4_train, y_train","47944639":"X.reset_index(drop=True, inplace=True)\nX","58833efc":"y.reset_index(drop=True, inplace=True)\ny","23fe826d":"class_distribution = pd.Series(y).value_counts(normalize=True)\nax = class_distribution.plot.barh()\nax.set_title(\"Class distribution\")\npos_label = class_distribution.idxmin()\nprint(f\"The positive label considered as the minority class is {pos_label}\")","a3d9b772":"disp = []\nfor model in pipeline:\n    # compute the mean fpr\/tpr to get the mean ROC curve\n    mean_tpr, mean_fpr = 0.0, np.linspace(0, 1, 100)\n    for train, test in cv.split(X, y):\n        model.fit(X.iloc[train], y.iloc[train])\n        y_proba = model.predict_proba(X.iloc[test])\n\n        pos_label_idx = np.flatnonzero(model.classes_ == pos_label)[0]\n        fpr, tpr, thresholds = roc_curve(\n            y[test], y_proba[:, pos_label_idx], pos_label=pos_label\n        )\n        mean_tpr += np.interp(mean_fpr, fpr, tpr)\n        mean_tpr[0] = 0.0\n\n    mean_tpr \/= cv.get_n_splits(X, y)\n    mean_tpr[-1] = 1.0\n    mean_auc = auc(mean_fpr, mean_tpr)\n\n    # Create a display that we will reuse to make the aggregated plots for\n    # all methods\n    disp.append(\n        RocCurveDisplay(\n            fpr=mean_fpr,\n            tpr=mean_tpr,\n            roc_auc=mean_auc,\n            estimator_name=f\"{model[0].__class__.__name__}\",\n        )\n    )","0f006113":"fig, ax = plt.subplots(figsize=(9, 9))\nfor d in disp:\n    d.plot(ax=ax, linestyle=\"--\")\nax.plot([0, 1], [0, 1], linestyle=\"--\", color=\"k\")\nax.axis(\"square\")\nfig.suptitle(\"Comparison of over-sampling methods with a Random Forest classifier\")\nax.set_xlim([0, 1])\nax.set_ylim([0, 1])\nsns.despine(offset=10, ax=ax)\nplt.show()","147a195e":"classifier = RandomForestClassifier()\n\nscaler = StandardScaler()\n\npipeline_over = [make_pipeline(RandomOverSampler(random_state=11), scaler, classifier)]\n\n# pipeline_over = imbpipeline(steps = [['over', RandomOverSampler(random_state=11)],\n#                                         ['scaler', StandardScaler()],\n#                                         ['classifier', model()]])\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=11)\n\nX, y = X4_train, y_train","c25608c8":"disp = []\nfor model in pipeline_over:\n    # compute the mean fpr\/tpr to get the mean ROC curve\n    mean_tpr, mean_fpr = 0.0, np.linspace(0, 1, 100)\n    for train, test in cv.split(X, y):\n        model.fit(X.iloc[train], y.iloc[train])\n        y_proba = model.predict_proba(X.iloc[test])\n\n        pos_label_idx = np.flatnonzero(model.classes_ == pos_label)[0]\n        fpr, tpr, thresholds = roc_curve(\n            y[test], y_proba[:, pos_label_idx], pos_label=pos_label\n        )\n        mean_tpr += np.interp(mean_fpr, fpr, tpr)\n        mean_tpr[0] = 0.0\n\n    mean_tpr \/= cv.get_n_splits(X, y)\n    mean_tpr[-1] = 1.0\n    mean_auc = auc(mean_fpr, mean_tpr)\n\n    # Create a display that we will reuse to make the aggregated plots for\n    # all methods\n#     disp.append(\n#         RocCurveDisplay(\n#             fpr=mean_fpr,\n#             tpr=mean_tpr,\n#             roc_auc=mean_auc,\n#             estimator_name=f\"{model[0].__class__.__name__}\",\n#         )\n#     )","18373c9b":"mean_auc","3aa9fe12":"sss = StratifiedKFold(n_splits=5, random_state=11, shuffle=False)\n\n# We will oversample during cross validating\noversample_X = X4_train\noversample_y = y_train\noriginal_Xtrain = X4_train\noriginal_ytrain = y_train\n\nfor train_index, test_index in sss.split(oversample_X, oversample_y):\n    print(\"Train:\", train_index, \"Test:\", test_index)\n    oversample_Xtrain, oversample_Xtest = oversample_X.iloc[train_index], oversample_X.iloc[test_index]\n    oversample_ytrain, oversample_ytest = oversample_y.iloc[train_index], oversample_y.iloc[test_index]\n    \noversample_Xtrain = oversample_Xtrain.values\noversample_Xtest = oversample_Xtest.values\noversample_ytrain = oversample_ytrain.values\noversample_ytest = oversample_ytest.values \n\noversample_accuracy = []\noversample_precision = []\noversample_recall = []\noversample_f1 = []\noversample_auc = []\n\n# Implementing NearMiss Technique \n# Distribution of NearMiss (Just to see how it distributes the labels we won't use these variables)\n# X_nearmiss, y_nearmiss = NearMiss().fit_sample(undersample_X.values, undersample_y.values)\n# print('NearMiss Label Distribution: {}'.format(Counter(y_nearmiss)))\n\n# Cross Validating the right way\n\nfor train, test in sss.split(oversample_Xtrain, oversample_ytrain):\n    oversample_pipeline = imbpipeline(steps = [['over', RandomOverSampler(random_state=11)],\n                                        ['scaler', StandardScaler()],\n                                        ['classifier', RandomForestClassifier()]])\n    oversample_model = oversample_pipeline.fit(oversample_Xtrain[train], oversample_ytrain[train])\n    oversample_prediction_proba = oversample_model.predict_proba(oversample_Xtrain[test])\n    oversample_prediction = oversample_model.predict(oversample_Xtrain[test])\n    \n    oversample_accuracy.append(oversample_pipeline.score(original_Xtrain.iloc[test], original_ytrain.iloc[test]))\n    oversample_precision.append(precision_score(original_ytrain.iloc[test], oversample_prediction))\n    oversample_recall.append(recall_score(original_ytrain.iloc[test], oversample_prediction))\n    oversample_f1.append(f1_score(original_ytrain.iloc[test], oversample_prediction))\n    oversample_auc.append(roc_auc_score(original_ytrain.iloc[test], oversample_prediction_proba[:,1]))","35c19a1b":"# How it should look like\nprint('---' * 45)\nprint('How it should be:\\n')\nprint(\"Accuracy Score: {:.2f}\".format(np.mean(oversample_accuracy)))\nprint(\"Precision Score: {:.2f}\".format(np.mean(oversample_precision)))\nprint(\"Recall Score: {:.2f}\".format(np.mean(oversample_recall)))\nprint(\"F1 Score: {:.2f}\".format(np.mean(oversample_f1)))\nprint(\"ROC AUC: {:.2f}\".format(np.mean(oversample_auc)))\nprint('---' * 45)","27dbcb05":"from sklearn.metrics import roc_curve\nfrom sklearn.model_selection import cross_val_predict\n# Create a DataFrame with all the scores and the classifiers names.\n\nX4_train_scaled = scaler.fit_transform(X4_train)\n\nrf = RandomForestClassifier(random_state=11)\n\nrf_pred = cross_val_predict(rf, X4_train_scaled, y_train, cv=5, method=\"predict_proba\")\n\nprint('Random Forest ROC-AUC: ', roc_auc_score(y_train, rf_pred[:,1]))\n\nrf_fpr, rf_tpr, rf_thresold = roc_curve(y_train, rf_pred[:,1])\n\ndef graph_roc_curve(model_fpr, model_tpr):\n    plt.figure(figsize=(16,8))\n    plt.title('ROC Curve \\n Random Forest Classifier', fontsize=18)\n    plt.plot(model_fpr, model_tpr, label='Random Forest Classifier Score: {:.4f}'.format(roc_auc_score(y_train, rf_pred[:,1])))\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.axis([-0.01, 1, 0, 1])\n    plt.xlabel('False Positive Rate', fontsize=16)\n    plt.ylabel('True Positive Rate', fontsize=16)\n    plt.annotate('Minimum ROC Score of 50% \\n (This is the minimum score to get)', xy=(0.5, 0.5), xytext=(0.6, 0.3),\n                arrowprops=dict(facecolor='#6E726D', shrink=0.05),\n                )\n    plt.legend()\n    \ngraph_roc_curve(rf_fpr, rf_tpr)\nplt.show()","3d9f826c":"# Initialize steps of the pipeline\noversampling = RandomOverSampler(random_state=11)\nscaler = StandardScaler()\nmodel = RandomForestClassifier(random_state=11)\n\n# Pipeline\npipeline = make_pipeline(oversampling, scaler, model)\n\n# Parameter grid\ngrid = {\n    \"randomforestclassifier__n_estimators\": [10, 25, 50, 100, 250, 500, 750, 1000, 1250, 1500, 1750, 2000],\n    \"randomforestclassifier__criterion\": [\"gini\", \"entropy\"],\n    \"randomforestclassifier__max_depth\": [10, 20, 30, 40, 50, 75, 100, 150, 200, None],\n    \"randomforestclassifier__min_samples_split\": [1, 2, 3, 4, 5, 8, 10, 15, 20],\n    \"randomforestclassifier__min_samples_leaf\": [1, 2, 3, 4, 5, 8, 10, 15, 20],\n    \"randomforestclassifier__max_features\": [\"auto\", None, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],\n    \"randomforestclassifier__bootstrap\": [True, False],\n    \"randomforestclassifier__max_samples\": [None, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],\n}\n\n# Cross Validation\nkf = StratifiedKFold(n_splits=5)\n\n# RandomizedSearchCV using RFC model, RandomOverSampler & StandardScaler. Scoring is ROC-AUC\nrand_rf = RandomizedSearchCV(pipeline, grid, scoring='roc_auc', n_iter=10, n_jobs=-1, cv=kf, random_state=11)\n\n# Fit the model to the data\ntuned_model = rand_rf.fit(X, y)\n\n# Results\nprint(tuned_model.best_params_)\nprint('Best Score: %s' % tuned_model.best_score_)","13a81514":"# According to the previous results, I will further tune the model to reach the maximum possible performance\n\ngrid_2 = {\n    \"randomforestclassifier__n_estimators\": [50, 75, 100, 120, 150, 200],\n    \"randomforestclassifier__criterion\": [\"entropy\"],\n    \"randomforestclassifier__max_depth\": [5, 7, 10, 12, 15],\n    \"randomforestclassifier__min_samples_split\": [6, 7, 8, 9, 10],\n    \"randomforestclassifier__min_samples_leaf\": [6, 7, 8, 9, 10],\n    \"randomforestclassifier__max_features\": [0.2, 0.3, 0.4],\n    \"randomforestclassifier__bootstrap\": [False],\n    \"randomforestclassifier__max_samples\": [None, 0.1, 0.2],\n}\n\nkf = StratifiedKFold(n_splits=5)\n\nrand_rf_2 = RandomizedSearchCV(pipeline, grid_2, scoring='roc_auc', n_iter=10, n_jobs=-1, cv=kf, random_state=11)\n\ntuned_model_2 = rand_rf_2.fit(X, y)\n\nprint(tuned_model_2.best_params_)\nprint('Best Score: %s' % tuned_model_2.best_score_)","d149c64a":"labels = ['No Churn', 'Churn']\ny_pred = tuned_model_2.predict(X4_test)\nprint(classification_report(y_test, y_pred, target_names=labels))","4e919864":"#Get the confusion matrix\ncm = confusion_matrix(y_test, y_pred)\n\n#Plot the confusion matrix\nxlabels = ['Predicted: NO', 'Predicted: YES']\nylabels = ['Actual: NO', 'Actual: YES']\nsns.heatmap(data=cm, xticklabels=xlabels, yticklabels=ylabels, annot=True, fmt='g')","3384be5e":"roc_auc_score(y_test, y_pred)","c26c0fa0":"accuracy_score(y_test, y_pred)","f14bd2cd":"importance = tuned_model_2.best_estimator_[2].feature_importances_","2db8a456":"def plot_feature_importance(importance, names, model_type):\n\n    #Create arrays from feature importance and feature names\n    feature_importance = np.array(importance)\n    feature_names = np.array(names)\n\n    #Create a DataFrame using a Dictionary\n    data={'feature_names':feature_names,'feature_importance':feature_importance}\n    fi_df = pd.DataFrame(data)\n\n    #Sort the DataFrame in order decreasing feature importance\n    fi_df.sort_values(by=['feature_importance'], ascending=False,inplace=True)\n\n    #Define size of bar plot\n    plt.figure(figsize=(10,8))\n    #Plot Searborn bar chart\n    sns.barplot(x=fi_df['feature_importance'], y=fi_df['feature_names'])\n    #Add chart labels\n    plt.title(model_type + 'FEATURE IMPORTANCE')\n    plt.xlabel('FEATURE IMPORTANCE')\n    plt.ylabel('FEATURE NAMES')","08b6f933":"plot_feature_importance(importance, X.columns, 'RANDOM FOREST')","3f41aebc":"## Combinations","ea2de423":"#### Resampling\n\n* Under-sampling\n* Over-sampling\n* SMOTE\\\nI will test the 3 techniques and see which one yields the best results","0d24799b":"## Shortlist Promising Models","7a8ab965":"#### Features\n\nI will test 4 different datasets, according to what I explained in the previous section:\n* df_1\n* df_2\n* df_3\n* df_4\\\nI will train models in each one to test the Feature Engineering techniques I used.","ae1b9f09":"* **XGBoost:**","aacdb307":"Finally, I will use my final model on the Test dataset (which hasn't been used at all yet, and shouldn't be used for training) and see the scores I get.","82f62d3c":"* Geography\n* Gender","d828facb":"Conclusions:\n* The final model is not very accurate in the test data (AUC=0.79). There seems to be overfitting, as the train score was 0.86. This may be due to the resampling technique I used, which is Oversampling.\n* As suspected, the most important features are 'Age' 'NumOfProducts'. 'NumOfProducts' is a strange feature, and might be another reason for the overfitting. 'Age' is really important.\n* 'Age_BoxCox' and 'ratio_CreditScore_Age', two of the three created features are in the Top-3 most important features. Particularly, 'ratio_CreditScore_Age' is an improvement from the plain 'CreditScore' feature. However, 'ratio_EstimatedSalary_Age' which is the other created feature, was not an improvement over 'EstimatedSalary'.\n* Finally, it is worth mentioning that neither Gender nor Nationality were important.\n\nNext Steps:\n* Try not using the least important features. May be even 'NumOfProducts', because although it is very importante I think it is distorsive. This might help with the over-fitting. Also, I could try PCA or PLS for this.\n* Try other reampling techniques. May be Under-sampling would reduce over-fitting. According to the results, it was not far behind Over-sampling in terms of training performance.\n","17bf6b9a":"* Option 1:","c05b8b86":"* 70% of the employees do have a credit card.\n* The churning rate is the almost exactly the same for the two categories.","62fb44a7":"#### Fine tuning using RandomizedSearchCV","f457fd81":"* **Logistic Regression:**","392b07a8":"* Between 1 and 9 years, the feature is almost equally distributed (high variance). Only the extremes (0 and 10 years) have less density.\n* There is not much insight in the MCR of each category, they are all close to the GMCR and there is not a clear correlation between Tenure and the CR.","690d43bd":"### Numerical Variables","9fce3ebf":"* CreditScore\n* Age\n* Tenure\n* Balance\n* NumOfProducts\n* EstimatedSalary","a0828c5c":"Now I will plot the final results.","bb7e88ed":"### Chosen model: Random Forest","d6d59ef2":"General notes:\n* Age follows a right skewed distribution.\n* 45% of the employees are in the (30, 40] range of age.\n* 87% of the employees are in the (20, 50] range of age.\n\nInsights\n* Global mean churning rate (GMCR): 20.37%\n* (30, 40] mean churning rate: 34% --> CONSIDERABLY HIGHER THAN THE GLOBAL MEAN\n* (40, 50] mean churning rate: 56% --> WAY HIGHER THAN THE GLOBAL MEAN\n* (50, 60] mean churning rate: 31% --> CONSIDERABLY HIGHER THAN THE GLOBAL MEAN\n* All the other bins (very young or very old) have way less mean churning rate than the global mean.\nSummarizing, there are not Age bins with average MCR. There are some with much lower MCR (the extremes) and some with much higher MCR (the center)\n\nI can further divide the age bins into three groups:\n* (0,40]: MCR << GMCR\n* (40,70]: MCR >> GMCR\n* (70,100]: MCR << GMCR","4e11f649":"* 96% of the employees have either 1 or 2 products (almost 50-50 between each)\n* However, for 3 or 4 products the MCR is way higher than the GMCR. More interestingly, 100% of the employees who own 4 products have exited.","a1b5a672":"We pretty much get the same ROC AUC regardless of the resampling method. I will further explore oversampling, as it was the one with the best results in the previous section.","8cc0993e":"#### Plot ROC AUC with different Resampling methods","a59659c8":"### Exited - Age","fbc884e3":"## Results: Test dataset Scores","aad4bbc7":"#### AUC Performance measurement using 2 different codes","9ff3175c":"* Exited","cd2abbaf":"* Raw Age data distribution (right skewed):","3af2e044":"* **Random Forest:**","a9ab5186":"### EstimatedSalary - Geography - Gender","c67822c6":"Age seems to be an important feature, so I will combine it with other 2 continuous numerical features that don't seem to have a clear relation with the outcome: CreditScore and EstimatedSalary.\n\nThis way, I will create 2 ratios:\n* CreditScore\/Age\n* EstimatedSalary\/Age\nThis approach follows a Weak heredity implementation, in which one explores the interaction effect between a feature that is correlated with the outcome (Age) and a feature that is not (CreditScore and EstimatedSalary).\n\nMay be this relations will unveil some hidden relationships with the outcome.\n\nThis interactions were not just random, but have interpretability. One could think that both the Credit Score and the Salary of a given individual can have some sort of relationship with his\/her Age.","c044879f":"First of all, I will see the results in the previous section more in depth to see what is going on.","b393b382":"## Feature Engineering","57427d41":"* **Support Vector Machines:**","538f7057":"### Approach","fabe752e":"* The churning rate for females is considerably higher than that for males.","3c7b30e2":"* Log transformed Age data distribution (resembles normal):","6f6169a0":"The results of both of the methods are consistent, **the ROC AUC is 0,84**","5e1d92d9":"### Exited - Tenure","39102f13":"* Half the customers are from France, and the other half is divided almost equally between Spain and Germany.\n* Interestingly, the churning rate from German employees is much higher than the other two countries.","26c6351c":"#### Age","7344e549":"* Option 2:","af8443fb":"### Exited - IsActiveMember","a38a9874":"* The active \/ not active members are almost 50-50.\n* The churning rate for active members is considerably higher than that for not active members.","34aa872a":"* Box-Cox transformed Age data distribution (resembles normal):","7dfe0783":"### Exited - CreditScore - EstimatedSalary","b214fc67":"### Exited - HasCrCard","3832346c":"## Target","dc398f38":"## Numerical features","bdf19e74":"### Exited - Geography","1b5df3c6":"In order to see if the results are consistent, I will use the same pipeline (Oversampling, Standard Scaler, Random Forest Classifier) with 2 different codes (Option 1 & Option 2) and check the ROC AUC I get from each one.","658bf32f":"* Age_bin\n* Age_bin_3cat\n* CreditScore_bin\n\n\n\nI am going to create the following datasets, following different approaches on the ordinal features. This way, I can afterwards train the same models on every one of this datasets and see which one yields the best performance.\n\n**df_1**: Leave 'Age' and 'CreditScore' as continuous variables.\\\n**df_2**: Drop 'Age' and 'CreditScore', keep 'Age_bin' and 'CreditScore_bin'\\\n**df_3**: Drop 'Age' and 'CreditScore', keep 'Age_bin_3cat' and 'CreditScore_bin'\\\n**df_4**: Transform 'Age' with Box-Cox transformation to normalize it.","5751803a":"* Geography\n* Gender\n* HasCrCard\n* IsActiveMember","f1caaf6a":"* **Final Training ROC-AUC: 0.858**","bf9f769a":"EstimatedSalary feature is uniformly distributed. For now I will keep it like that, but in the future I might do a Box-Muller transformation to the feature, because normally distributed features might help linear models.","9c03c1d6":"# Get the Data","014268e3":"The best performer was:\n* Feature set 4\n* Over-sampling\n* Random Forest Model\n\nIt is a little bit strange because Feature set 4 is the one where I used the Log transformation in the Age variable. This should not matter in a tree based method like Random Forest. In addition, XGBoost which is another tree based had also good performance in this dataset.","05ecee47":"* Not much information given, values are similar without clear trends.","78f92191":"# 2. EDA","0c10bea3":"### Exited - Geography - Gender","c4c0ea31":"First of all, I will get rid of the 'RowNumber', 'CustomerId' & 'Surname' columns as they don't provide useful information.","21a824c2":"## Fine-Tune the System","20fabda1":"### Exited - Gender","9be0c354":"From the numerical category pairplots we can get the following insights:\n* There is very little correlation between the different features, so there is not visible redundance or multicollinearity (with the Pearson matrix only Balance-NumOfProducts show some negative correlation, but it is not so clear in the heatmap.\n* It seems that for high 'NumOfProducts' values, the employee is more likely to leave (Exited=1).\n* It seems like for very low CreditScore values, the employee is more likely to leave (Exited=1). A possible explanation is that maybe someone with poor CreditScore would want to get a job with better payment. However, it doesn't seem that people with lower EstimatedSalary have worse CreditScore (corr: -0.0014).","e4e9eba1":"* **Final Test ROC-AUC: 0.79**","b4e40b48":"* As we've seen before, German Employees have higher MCR. However, it seems they have slightly higher EstimatedSalary than employees from France or Spain, which seems counter-intuitive.\n* The differences in EstimatedSalary for each country are very small, so I don't think this is relevant.","e237b459":"There is not much difference. The only thing I can see is that people with really low CreditScore (<400) have a much higher CR.\n\nIn order to explore this I will divide the Employees into CreditScore bins, according to this page:\nhttps:\/\/www.equifax.com\/personal\/education\/credit\/score\/what-is-a-credit-score\/\n\nI will add an extra category with CreditScore <400 because that is where I see most clear trend.","966d4cc3":"* **Gaussian Naive Bayes:**","70bb527c":"#### Models\n\n* Naive Bayes\n* Logistic Regression\n* SVM\n* Random Forest\n* XGBoost\\\nI will test every model with each of the 4 prepared datasets and the 3 resampling techniques without hyperparameter tuning.\\\nFinally, I will select the model, dataset and resampling technique with the best performance, and perform hyperparameter tuning with that one.","1075a6ef":"## Categorical features","2002e3cd":"### Exited - Numerical features","be3012a5":"By taking the log or Box-Cox transformation of the 'Age' feature, the positive skewed distribution becomes close to a normal one. \\\n\nI will add a Box-Cox transformed Age column in the Feature Engineering section, as a normally distributed feature it might help linear models.","b672702f":"### Exited - Geography - EstimatedSalary","0c138af2":"## Conclusions & Nest Steps","5994a245":"### Categorical variables","7e60e9a5":"### Exited - NumOfProducts","4d96f4b1":"#### Ordinal Variables","1975ff1f":"#### Performance metrics\n\n* Confusion matrix\n* Precision-Recall\n* Sensitivity-Specificity\n* F1-Score\n* ROC-AUC\\\nI will use all of them to get a better sense of what's going on","f27eb94c":"* It is not a very big difference but Employees that have left tend to have higher Balance.\n* For Employees with Balance = 0 the MCR is cosniderably lower than the GMCR.","ac2599ad":"### Exited - Balance","01a022cc":"* Females have higher MCR than males in every country.\n* German employees have higher MCR than the other 2 countries for the same Gender.","2bd12bfa":"### Data preparation","64658789":"We see something really interesting: ALL the 19 Employees that have a CreditScore<400 have left the company. But what is more strange is that the employees in this group have a much higher Mean EstimatedSalary than all the other categories. This is really counter-intuitive, as one might think that people that make more money are less likely to have lower CreditScore.\n\nThis may be an error in the dataset."}}