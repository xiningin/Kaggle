{"cell_type":{"62a3ec2c":"code","50874fd9":"code","262be0f9":"code","74e5845a":"code","c8fa8aeb":"code","3f70f9fe":"code","d244d424":"code","2ce1e8b0":"code","0c390e3b":"code","00790fb5":"markdown","37e31f33":"markdown","01b6aeaf":"markdown","ba6ac8c8":"markdown","60c59ae3":"markdown","dc90323e":"markdown","cbe38a1c":"markdown","57b1c222":"markdown","9ebd326b":"markdown"},"source":{"62a3ec2c":"!pip install -q git+https:\/\/github.com\/\/Kevin-McIsaac\/cmorlet-tensorflow@Performance --no-deps","50874fd9":"import numpy as np\nimport pandas as pd\nimport os\nfrom glob import glob\nimport matplotlib.pyplot as plt\nfrom scipy import signal\nimport tensorflow as tf\nfrom CWT.cwt import ComplexMorletCWT\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n%matplotlib inline","262be0f9":"num_samples = 4 # first N samples to process\nimage_size = [256, 256]","74e5845a":"ROOT_DIR = '..\/input\/g2net-gravitational-wave-detection'\ndf = pd.read_csv(os.path.join(ROOT_DIR, 'training_labels.csv'))\ndf['path'] = df['id'].apply(lambda x: f'{ROOT_DIR}\/train\/{x[0]}\/{x[1]}\/{x[2]}\/{x}.npy')","c8fa8aeb":"train_files = df['path'].values[:num_samples]\nbHP, aHP = signal.butter(8, (20, 500), btype='bandpass', fs=2048)\ncwt_transform = ComplexMorletCWT(wavelet_width=8, fs=2048, lower_freq=20, upper_freq=500, n_scales=image_size[0],\n                    stride=int(np.ceil(4096\/image_size[0])), output='magnitude', data_format='channels_first')\nwaves = []\ncwts = []\nwaves_f = []\ncwts_f = []\nfor i in range(num_samples):\n    wave = np.load(train_files[i])\n    wave = wave[0, :]  # for demonstration we will use only signal from one detector\n    wave \/= tf.math.reduce_max(wave, axis=0, keepdims=True) # normalization\n    waves.append(np.squeeze(wave))\n    \n    # Without a filter\n    wave_t = tf.convert_to_tensor(wave[np.newaxis, np.newaxis, :])\n    cwt = cwt_transform(wave_t)\n    cwts.append(np.squeeze(cwt.numpy()))\n    \n    # With a filter\n    wave_f = wave*signal.tukey(4096, 0.2)\n    wave_f = signal.filtfilt(bHP, aHP, wave_f)\n    waves_f.append(wave_f)\n    wave_t_f = tf.convert_to_tensor(wave_f[np.newaxis, np.newaxis, :])\n    cwt_f = cwt_transform(wave_t_f)\n    cwts_f.append(np.squeeze(cwt_f.numpy()))","3f70f9fe":"fig, axs = plt.subplots(num_samples)\nfig.set_figheight(15)\nfig.set_figwidth(15)\nfor i in range(num_samples):\n    nid = df['id'][i]\n    ntarget = df['target'][i]\n    axs[i].title.set_text(f'{nid}.npy, target: {ntarget}')\n    axs[i].plot(waves[i])","d244d424":"fig, axs = plt.subplots(num_samples)\nfig.set_figheight(20)\nfig.set_figwidth(5)\nfor i in range(num_samples):\n    nid = df['id'][i]\n    ntarget = df['target'][i]\n    axs[i].title.set_text(f'{nid}.npy, target: {ntarget}')\n    axs[i].pcolormesh(cwts[i])","2ce1e8b0":"fig, axs = plt.subplots(num_samples)\nfig.set_figheight(15)\nfig.set_figwidth(15)\nfor i in range(num_samples):\n    nid = df['id'][i]\n    ntarget = df['target'][i]\n    axs[i].title.set_text(f'{nid}.npy, target: {ntarget}')\n    axs[i].plot(waves_f[i])","0c390e3b":"fig, axs = plt.subplots(num_samples)\nfig.set_figheight(20)\nfig.set_figwidth(5)\nfor i in range(num_samples):\n    nid = df['id'][i]\n    ntarget = df['target'][i]\n    axs[i].title.set_text(f'{nid}.npy, target: {ntarget}')\n    axs[i].pcolormesh(cwts_f[i])","00790fb5":"Now we read training labels data, and get npy paths.","37e31f33":"## Demonstrate CWT usage","01b6aeaf":"### Without a filter","ba6ac8c8":"## With a filter","60c59ae3":"## Read training labels","dc90323e":"## Import packages","cbe38a1c":"Let's calculate CWT for 4 first signals with and without usage of a bandpass filter (20-500Hz), and plot results!","57b1c222":"You can use ComplexMorletCWT() as your model block to convert waves to CWT on-the-fly in TensorFlow models.","9ebd326b":"This notebook shows how Constant Wavelet Transform can be performed with usage of cmorlet-tensorflow package fork provided by [Fractal Feelings](https:\/\/www.kaggle.com\/kevinmcisaac) (https:\/\/github.com\/Kevin-McIsaac\/cmorlet-tensorflow\/tree\/Performance).\n\nHave any questions or suggestions? Please comment below.\n\n**<font color='red'>And if you liked this notebook, please upvote it!<\/font>**\n\n**Changelog**\n* v2 - changed normalization\n* v1 - initial version"}}