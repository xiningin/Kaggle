{"cell_type":{"9b1385c2":"code","1babb7a9":"code","7905e193":"code","abeb280b":"code","03606ef1":"code","929f670e":"code","ee534faa":"code","166a6277":"code","927f9bc7":"code","f93a63f3":"code","af757d31":"code","22df2744":"code","b084c19b":"code","cb814c65":"code","c9034895":"code","8057ef0b":"code","96211e6c":"code","0fdec57d":"code","371757bf":"code","b00ffc1c":"code","7beec665":"code","dcca0db9":"code","f5935088":"code","bee6c518":"code","368d9a01":"code","dd1e7526":"code","d4880f06":"code","b40ce4e4":"code","fec89931":"markdown"},"source":{"9b1385c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n'''for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))'''\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1babb7a9":"import numpy as np\nimport matplotlib.pyplot as plt\nimport os","7905e193":"import tensorflow as tf\nfrom tensorflow import keras\nfrom keras.preprocessing.image import ImageDataGenerator","abeb280b":"#model.export(file = Path(\"\/kaggle\/working\/model.h5\"))","03606ef1":"train_datagen = ImageDataGenerator(rescale=1.\/255, shear_range=0.2, \n                                  zoom_range=0.2, width_shift_range=0.2,\n                                  height_shift_range=0.2,\n                                  fill_mode='nearest')\n\nvalid_datagen = ImageDataGenerator(rescale=1.\/255)","929f670e":"base = '..\/input\/new-plant-diseases-dataset\/new plant diseases dataset(augmented)\/New Plant Diseases Dataset(Augmented)'\ntrain_set = train_datagen.flow_from_directory(base+'\/train', target_size=(224, 224),\n                                             batch_size = 32, class_mode='categorical')\n\nvalid_set = valid_datagen.flow_from_directory(base+'\/valid', target_size=(224,224),\n                                             batch_size=32, class_mode='categorical')","ee534faa":"base_model = keras.applications.VGG16(weights='imagenet', input_shape=(224,224,3), include_top=False)\nbase_model.summary()","166a6277":"base_model.trainable = False\ninputs = keras.Input(shape=(224,224,3))\n\nx = base_model(inputs, training=False)\nx = keras.layers.GlobalAveragePooling2D()(x)\nx = keras.layers.Dropout(0.2)(x)\noutputs = keras.layers.Dense(38)(x)\n\nvgg16_model = keras.Model(inputs, outputs, name='pretrained_vgg16')\nvgg16_model.summary()","927f9bc7":"vgg16_model.compile(optimizer=keras.optimizers.Adam(), loss=keras.losses.CategoricalCrossentropy(from_logits=True),\n                   metrics=[keras.metrics.CategoricalAccuracy()])\n\nvgg16_history = vgg16_model.fit(train_set, steps_per_epoch=150, validation_data=valid_set,\n                               epochs=25, validation_steps=100)","f93a63f3":"vgg16_result = vgg16_model.evaluate(valid_set)\nprint('Val loss : ', vgg16_result[0])\nprint('Val accuracy : ', vgg16_result[1])","af757d31":"import seaborn as sns\n\nplt.rc('figure', figsize=(10, 6))\nsns.set(font_scale=1)","22df2744":"train_acc = vgg16_history.history['categorical_accuracy']\nval_acc = vgg16_history.history['val_categorical_accuracy']\n\nepochs_list = list(range(1, 25 + 1))\n\nplt.plot(epochs_list, train_acc, label='train acc')\nplt.plot(epochs_list, val_acc, label='val acc')\nplt.title(\"VGG-16's Accuracy\")\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend(loc='best')","b084c19b":"train_loss = vgg16_history.history['loss']\nval_loss = vgg16_history.history['val_loss']\n\nplt.plot(epochs_list, train_loss, label='train loss')\nplt.plot(epochs_list, val_loss, label='val loss')\nplt.title(\"VGG-16's Loss\")\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend(loc='best')","cb814c65":"vgg16_model.save(\"vgg16_model.h5\")","c9034895":"base_model = keras.applications.MobileNet(weights='imagenet', input_shape=(224,224,3),\n                                         include_top=False)","8057ef0b":"base_model.trainable = False\n\ninputs = keras.Input(shape=(224,224,3))\n\nx = base_model(inputs, training=False)\nx = keras.layers.GlobalAveragePooling2D()(x)\nx = keras.layers.Dropout(0.2)(x)\noutputs = keras.layers.Dense(38)(x)\n\nmobilenet_model = keras.Model(inputs, outputs, name='pretrained_mobilenet')\nmobilenet_model.summary()","96211e6c":"mobilenet_model.compile(optimizer=keras.optimizers.Adam(),\n                       loss=keras.losses.CategoricalCrossentropy(from_logits=True),\n                       metrics=['accuracy'])\nepochs = 15","0fdec57d":"mobilenet_history = mobilenet_model.fit(train_set, steps_per_epoch=150, validation_data=valid_set, epochs=epochs, validation_steps=100)","371757bf":"results = mobilenet_model.evaluate(valid_set)\nprint('val loss:', results[0])\nprint('val acc:', results[1])","b00ffc1c":"train_acc = mobilenet_history.history['accuracy']\nval_acc = mobilenet_history.history['val_accuracy']\n\nepochs_list = list(range(1, epochs + 1))\n\nplt.plot(epochs_list, train_acc, label='train acc')\nplt.plot(epochs_list, val_acc, label='val acc')\nplt.title(\"MobileNet's Accuracy\")\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend(loc='best')","7beec665":"train_loss = mobilenet_history.history['loss']\nval_loss = mobilenet_history.history['val_loss']\n\nplt.plot(epochs_list, train_loss, label='train loss')\nplt.plot(epochs_list, val_loss, label='val loss')\nplt.title(\"MobileNet's Loss\")\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend(loc='best')","dcca0db9":"mobilenet_model.save('mobilenet.h5')","f5935088":"base_model.trainable = True\nmobilenet_model.summary()","bee6c518":"mobilenet_model.compile(optimizer=keras.optimizers.Adam(1e-5),\n                       loss=keras.losses.CategoricalCrossentropy(from_logits=True),\n                       metrics=['accuracy'])\n\nepochs = 5\n\nmobilenet_history_ft = mobilenet_model.fit(train_set, steps_per_epoch=150,\n                                        validation_data=valid_set,\n                                        epochs=epochs,\n                                        validation_steps=100)","368d9a01":"results = mobilenet_model.evaluate(valid_set)\nprint('val loss:', results[0])\nprint('val acc:', results[1])","dd1e7526":"train_acc = mobilenet_history_ft.history['accuracy']\nval_acc = mobilenet_history_ft.history['val_accuracy']\n\nepochs_list = list(range(1, epochs + 1))\n\nplt.plot(epochs_list, train_acc, label='train acc')\nplt.plot(epochs_list, val_acc, label='val acc')\nplt.title(\"Fine-tuned MobileNet's Accuracy\")\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend(loc='best')","d4880f06":"train_loss = mobilenet_history_ft.history['loss']\nval_loss = mobilenet_history_ft.history['val_loss']\n\nplt.plot(epochs_list, train_loss, label='train loss')\nplt.plot(epochs_list, val_loss, label='val loss')\nplt.title(\"MobileNet's Loss\")\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend(loc='best')","b40ce4e4":"mobilenet_model.save('mobilenet-fine-tuned.h5')","fec89931":"**Training using MobileNetV2**"}}