{"cell_type":{"f5ec02c4":"code","59a0fe48":"code","8e992623":"code","71fada01":"code","5ab70075":"code","155a3215":"code","627d3027":"code","97122f6e":"code","44775f11":"code","8f2ce4ee":"code","146353cb":"code","9a03e6ad":"code","d521e9ee":"code","918f06f4":"code","a6f6e33c":"code","f5c48f71":"code","845cbe0b":"code","33d8ec14":"code","16984073":"code","7441d604":"markdown"},"source":{"f5ec02c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59a0fe48":"#https:\/\/www.kaggle.com\/kshitijmohan\/wine-recommendation-system-based-on-bert\/comments\n\nHAPPY_COLORS_PALETTE = [\"#01BEFE\", \"#FFDD00\", \"#FF7D00\", \"#FF006D\", \"#ADFF02\", \"#8F00FF\"]\n\nsns.set_palette(sns.color_palette(HAPPY_COLORS_PALETTE))","8e992623":"df = pd.read_csv('..\/input\/covid19-mexico-clean-order-by-states\/Covid_19_Mexico_Clean_Complete.csv', encoding='ISO-8859-2')\ndf.head()","71fada01":"df.tail(10)","5ab70075":"# For this project we are taking top 7 variety only\nmask = df['Confirmed'].isin(['1', '2', '7', '15', '14', '22', '11', '9', '3'])\ndf1 = df[mask]\ndf1.head()","155a3215":"chart = sns.countplot(df1.Confirmed, palette=HAPPY_COLORS_PALETTE)\nplt.title(\"Number of descriptions per Confirmed Cases\")\nchart.set_xticklabels(chart.get_xticklabels(), rotation=30, horizontalalignment='right');","627d3027":"# Splitting the dataset\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df1.Date, df1.Confirmed, test_size = 0.2, random_state = 42)","97122f6e":"train = { 'text': X_train, 'Deaths': y_train }\ntrain_df = pd.DataFrame(train)\ntest = { 'text': X_test, 'Deaths': y_test }\ntest_df = pd.DataFrame(test)","44775f11":"train_df.head()","8f2ce4ee":"chart = sns.countplot(train_df.Deaths, palette=HAPPY_COLORS_PALETTE)\nplt.title(\"Deaths Cases\")\nchart.set_xticklabels(chart.get_xticklabels(), rotation=30, horizontalalignment='right');","146353cb":"def plot_count(feature, title, df, size=1):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Set3')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()","9a03e6ad":"plot_count(\"Confirmed\", \"Confirmed\", df,4)","d521e9ee":"plot_count(\"Deaths\", \"Deaths\", df,4)","918f06f4":"plot_count(\"Active\", \"Active\", df,4)","a6f6e33c":"import plotly.express as px\nfig = px.line(df, x=\"Date\", y=\"Confirmed\", color_discrete_sequence=['darksalmon'], \n              title=\"Mexico Covid19 Confirmed Cases \")\nfig.show()","f5c48f71":"fig = px.scatter(df, x=\"Date\", y=\"Deaths\",color_discrete_sequence=['crimson'], title=\"Mexico Deaths by Covid19\" )\nfig.show()","845cbe0b":"fig = px.line(df, x=\"Date\", y=\"Confirmed\", color_discrete_sequence=['darksalmon'], template='plotly_dark',\n              title=\"Mexico Covid-19 Confirmed Cases\")\nfig.show()","33d8ec14":"fig = px.scatter(df, x=\"Date\", y=\"Active\",color_discrete_sequence=['#4257f5'],template='plotly_dark', title=\"Mexico Covid19 Active Cases\" )\nfig.show()","16984073":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.State)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","7441d604":"Das War's Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke"}}