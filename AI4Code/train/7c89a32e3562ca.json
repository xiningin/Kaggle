{"cell_type":{"cf6d4a52":"code","343483a7":"code","bfeec52b":"code","65f6dc17":"code","aa7ddfa8":"code","edb407da":"code","d0f0348e":"code","ffe5f9cf":"code","5fe75f64":"code","909dbb42":"code","dce41edb":"code","8939eee5":"code","10f7298f":"code","1950c27e":"code","a67e93a7":"code","e348356f":"code","0fd07e7c":"code","4c4d21c9":"code","ccedb13b":"code","b7d4e5fe":"code","43c9f663":"code","bad276b0":"code","ce4c1a5d":"code","0566dfcc":"code","0626b2fc":"code","0807fa0c":"markdown","beb2dd65":"markdown","e02410db":"markdown","82c8ea1f":"markdown","c30b2034":"markdown","8ea5a679":"markdown","1371421e":"markdown","26b36c58":"markdown"},"source":{"cf6d4a52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","343483a7":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\n%matplotlib inline","bfeec52b":"ad_data = pd.read_csv('..\/input\/advertising\/advertising.csv')\nad_data.head(3)","65f6dc17":"ad_data.info()","aa7ddfa8":"ad_data.describe()","edb407da":"ad_data['Age'].hist(bins=30)\nplt.xlabel('Age')","d0f0348e":"ad_data.Timestamp=pd.to_datetime(ad_data.Timestamp)\nad_data['hour']=ad_data.Timestamp.apply(lambda x: x.hour)\nad_data['clicks_hour']=ad_data.groupby('hour')['Clicked on Ad'].transform('sum')\nsns.lineplot(x='hour', y='clicks_hour', data=ad_data)","ffe5f9cf":"ad_data['day']=ad_data.Timestamp.apply(lambda x: x.day_of_week)\nad_data['clicks_day']=ad_data.groupby('day')['Clicked on Ad'].transform('sum')\nl=ad_data['day'].map({0: 'Sun', 1:'Mon', 2:'Tue', 3:'Wed', 4:'Thu', 5:'Fri', 6:'Sat'})\nsns.lineplot(l, y='clicks_day', data=ad_data)","5fe75f64":"sns.scatterplot(x='Age', y='Area Income', hue='Clicked on Ad', data=ad_data)","909dbb42":"sns.scatterplot(x='Age', y='Daily Time Spent on Site', hue='Clicked on Ad', data=ad_data)","dce41edb":"sns.scatterplot(x='Daily Internet Usage', y='Daily Time Spent on Site', hue='Clicked on Ad', data=ad_data)","8939eee5":"sns.countplot(ad_data['Male'])","10f7298f":"sns.pairplot(ad_data,hue='Clicked on Ad')","1950c27e":"X = ad_data[['Daily Time Spent on Site', 'Age', 'Area Income','Daily Internet Usage', 'Male']]\ny = ad_data['Clicked on Ad']","a67e93a7":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=58)","e348356f":"scale=MinMaxScaler()\nX_train=scale.fit_transform(X_train)\nX_test=scale.transform(X_test)","0fd07e7c":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)\ny_pred = logmodel.predict(X_test)","4c4d21c9":"print(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\nprint(accuracy_score(y_test,y_pred))\nlg=accuracy_score(y_test,y_pred)","ccedb13b":"rf = RandomForestClassifier()\nrf.fit(X_train,y_train)\ny_pred = rf.predict(X_test)","b7d4e5fe":"print(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\nprint(accuracy_score(y_test,y_pred))\nrfs=accuracy_score(y_test,y_pred)","43c9f663":"xgb = XGBClassifier()\nxgb.fit(X_train,y_train)\ny_pred = xgb.predict(X_test)","bad276b0":"print(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\nprint(accuracy_score(y_test,y_pred))\nxgbs=accuracy_score(y_test,y_pred)","ce4c1a5d":"svm = SVC()\nsvm.fit(X_train,y_train)\ny_pred = svm.predict(X_test)","0566dfcc":"print(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\nprint(accuracy_score(y_test,y_pred))\nsvcs=accuracy_score(y_test,y_pred)","0626b2fc":"models = pd.DataFrame({\n    'Model':['Logistic Regression','Random Forest', 'XGBoost', 'SVC'],\n    'Accuracy_score' :[lg,rfs, xgbs, svcs]\n})\nsns.barplot(x='Accuracy_score', y='Model', data=models)\nmodels.sort_values(by='Accuracy_score', ascending=False)","0807fa0c":"# Data Loading","beb2dd65":"# XGBoost","e02410db":"# SVM","82c8ea1f":"# Random Forest","c30b2034":"# Model comparison","8ea5a679":"# Logistic Regression","1371421e":"# Data Preprocessing","26b36c58":"# EDA"}}