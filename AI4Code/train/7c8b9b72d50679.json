{"cell_type":{"0f3977ad":"code","95a1364b":"code","2cea9384":"code","5bdfb645":"code","c40c743c":"code","cac78245":"code","bf26657f":"code","83a1e596":"code","93959b15":"markdown","d511b051":"markdown","2696f4c4":"markdown"},"source":{"0f3977ad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.a","95a1364b":"from clustergrammer2 import net\ndf = {}","2cea9384":"def drop_ribo_mito(df):\n    all_genes = df.index.tolist()\n    print(len(all_genes))\n    keep_genes = [x for x in all_genes if 'RPL' not in x]\n    keep_genes = [x for x in keep_genes if 'RPS' not in x]\n    print(len(keep_genes))\n\n    df = df.loc[keep_genes]\n    df.shape\n\n    # Removing Mitochondrial Genes\n    list_mito_genes = ['MTRNR2L11', 'MTRF1', 'MTRNR2L12', 'MTRNR2L13', 'MTRF1L', 'MTRNR2L6', 'MTRNR2L7',\n                    'MTRNR2L10', 'MTRNR2L8', 'MTRNR2L5', 'MTRNR2L1', 'MTRNR2L3', 'MTRNR2L4']\n\n    all_genes = df.index.tolist()\n    mito_genes = [x for x in all_genes if 'MT-' == x[:3] or \n                 x.split('_')[0] in list_mito_genes]\n    print(mito_genes)\n\n    keep_genes = [x for x in all_genes if x not in mito_genes]\n    df = df.loc[keep_genes]\n    \n    return df","5bdfb645":"def umi_norm(df):\n    # umi norm\n    barcode_umi_sum = df.sum()\n    df_umi = df.div(barcode_umi_sum)\n    return df_umi","c40c743c":"df['ini'] = pd.read_csv('..\/input\/GSE100866_CD8_merged-RNA_umi.csv', index_col=0)\nnew_cols = [(x, 'CD8 Status: ' + x.split('_')[1]) for x in df['ini'].columns.tolist()]\nprint(df['ini'].shape)\ndf['ini'].columns = new_cols\ndf['ini'].head()","cac78245":"df['ash'] = np.arcsinh(df['ini']\/5)\ndf['ash-umi'] = umi_norm(drop_ribo_mito(df['ash']))\ndf['ash-umi'].shape","bf26657f":"ser_var = df['ash-umi'].var(axis=1).sort_values(ascending=False)\nkeep_genes = ser_var.index.tolist()[:1000]\n\ndf['ash-umi-var'] = df['ash-umi'].loc[keep_genes]\ndf['ash-umi-var'].shape","83a1e596":"net.load_df(df['ash-umi-var'])\nnet.normalize(axis='row', norm_type='zscore')\nnet.clip(-5,5)\nnet.load_df(net.export_df().round(2))\nnet.widget()","93959b15":"# Clustergrammer2 Viz Stoeckius 2017","d511b051":"# Visualize Single Cell Data","2696f4c4":"Cells Cluster Based on CD8 Status"}}