{"cell_type":{"b536ebea":"code","56f3f3ad":"code","4d429aa6":"code","bf45ce14":"code","860be3d7":"code","1ffb5c40":"code","a4751382":"code","73d1df9d":"code","397b7e6b":"code","cd23b377":"code","72100888":"code","94d0c51c":"code","0f9b68c3":"code","0c4680da":"markdown","6464bb68":"markdown","2acff30d":"markdown","1ac948d2":"markdown","235173d5":"markdown","15494e04":"markdown"},"source":{"b536ebea":"import os\nimport warnings\nimport optuna\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn import preprocessing\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_columns', 500)","56f3f3ad":"SEED = 2809","4d429aa6":"%%time\ntrain = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv')\nfeatures = pd.read_csv('..\/input\/jane-street-market-prediction\/features.csv')\nexample_test = pd.read_csv('..\/input\/jane-street-market-prediction\/example_test.csv')\nsample_prediction_df = pd.read_csv('..\/input\/jane-street-market-prediction\/example_sample_submission.csv')\nprint (\"Data is loaded!\")","bf45ce14":"train['action'] = ((train['weight'].values * train['resp'].values) > 0).astype('int')\n\n\nX_train = train.loc[:, train.columns.str.contains('feature')]\nX_train = X_train.fillna(-999)\ny_train = train.loc[:, 'action']","860be3d7":"X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.25, random_state=SEED)","1ffb5c40":"class XGBoostCLFCreator:\n    def __init__(self, missing:int, tree_method:str, random_state=None):\n        self.__missing = missing\n        self.__tree_method = tree_method\n        self.__random_state = random_state\n    \n    def __call__(self, n_estimators, max_depth, learning_rate, subsample, colsample_bytree):\n        return xgb.XGBClassifier(\n                    n_estimators=n_estimators,\n                    max_depth=max_depth,\n                    learning_rate=learning_rate,\n                    subsample=subsample,\n                    colsample_bytree=colsample_bytree,\n                    missing=self.__missing,\n                    random_state=self.__random_state,\n                    tree_method=self.__tree_method\n                )\n    \nclass XGBoostTrialCreator:\n    def __init__(self, \n                 n_estimators_range=(100, 1000), \n                 max_depth_range=(3, 17), \n                 learning_rate_range=(1e-3, 1e-1),\n                 subsample_range=(1e-1, 99e-2),\n                 colsample_bytree_range=(1e-1, 99e-2),\n                 clf_creator = None\n                ):\n        self.__n_estimators_range = n_estimators_range\n        self.__max_depth_range = max_depth_range\n        self.__learning_rate_range = learning_rate_range\n        self.__subsample_range = subsample_range\n        self.__colsample_bytree_range = colsample_bytree_range\n        self.__clf_creator = clf_creator or XGBoostCLFCreator(-999, 'gpu_hist', SEED)\n        \n    def __call__(self, trial: optuna.Trial):\n        return self.__clf_creator(\n            n_estimators=trial.suggest_int('n_estimators', self.__n_estimators_range[0], self.__n_estimators_range[1]),\n            max_depth=trial.suggest_int('max_depth', self.__max_depth_range[0], self.__max_depth_range[1]),\n            learning_rate=trial.suggest_uniform('learning_rate', self.__learning_rate_range[0], self.__learning_rate_range[1]),\n            subsample=trial.suggest_uniform('subsample', self.__subsample_range[0], self.__subsample_range[1]),\n            colsample_bytree=trial.suggest_uniform('colsample_bytree', self.__colsample_bytree_range[0], self.__colsample_bytree_range[1])\n        )\n    \n    def create_estimator(self, **kwargs):\n        return self.__clf_creator(**kwargs)\n        \nclass MetricCreator:\n    def __init__(self, \n                 X_train, \n                 X_valid, \n                 y_train, \n                 y_valid, \n                 base_metric = None,\n                 clf_trial_creator = None\n                ):\n        self.__base_metric = base_metric or roc_auc_score\n        self.__X_train = X_train\n        self.__X_valid = X_valid\n        self.__y_train = y_train\n        self.__y_valid = y_valid\n        self.__clf_trial_creator = XGBoostTrialCreator()\n        \n    def __call__(self, trial: optuna.Trial):\n        clf = self.__clf_trial_creator(trial)\n        clf.fit(self.__X_train, self.__y_train)\n        y_pred = clf.predict(self.__X_valid)\n        return self.__base_metric(self.__y_valid, y_pred)\n    \n    def create_estimator(self, **kwargs):\n        return self.__clf_trial_creator.create_estimator(**kwargs)","a4751382":"study = optuna.create_study(direction='maximize')\nmetric = MetricCreator(X_train, X_valid, y_train, y_valid)\nstudy.optimize(metric, n_trials=20)","73d1df9d":"fig = optuna.visualization.plot_optimization_history(study)\nfig.show();","397b7e6b":"fig = optuna.visualization.plot_param_importances(study)\nfig.show();","cd23b377":"fig = optuna.visualization.plot_edf([study])\nfig.show();","72100888":"study.best_params","94d0c51c":"clf = metric.create_estimator(**study.best_params)\nclf.fit(X_train, y_train)","0f9b68c3":"import janestreet\nenv = janestreet.make_env()\niter_test = env.iter_test()\n\nfor (test_df, sample_prediction_df) in iter_test:\n    X_test = test_df.loc[:, test_df.columns.str.contains('feature')]\n    X_test.fillna(-999)\n    y_preds = clf.predict(X_test)\n    sample_prediction_df.action = y_preds\n    env.predict(sample_prediction_df)","0c4680da":"<a id=\"1\"><\/a>\n<h2 style='background:darkviolet; border:0; color:white'><center>4. Optuna visialization<center><h2>","6464bb68":"<a id=\"1\"><\/a>\n<h2 style='background:darkviolet; border:0; color:white'><center>1. Data Loading And Preprocessing<center><h2>","2acff30d":"<center><img src=\"https:\/\/consulting.brown.edu\/images\/jane_str.png\"><\/center>","1ac948d2":"<a id=\"1\"><\/a>\n<h2 style='background:darkviolet; border:0; color:white'><center>5. Predict<center><h2>","235173d5":"<a id=\"1\"><\/a>\n<h2 style='background:darkviolet; border:0; color:white'><center>3. XGBClassifier parameters optimize<center><h2>","15494e04":"<a id=\"1\"><\/a>\n<h2 style='background:darkviolet; border:0; color:white'><center>2. Architecture sugar<center><h2>"}}