{"cell_type":{"b0d8380a":"code","e5b8903b":"code","11ecbc5b":"code","f7e2025f":"code","3aa228a5":"code","f661ecea":"code","126f98b4":"code","1b1e8e24":"code","5a2eec40":"code","bef26a4a":"code","03119086":"code","b77b7bbc":"code","3654fc10":"code","6b4247f7":"code","7948b4e1":"code","130e6b6f":"code","44887a30":"code","fa0c4d9b":"code","2860044d":"code","c47b2179":"code","4a969613":"markdown","8daa3e69":"markdown","2dd1bbbe":"markdown","fc1575a5":"markdown","09e31c2d":"markdown","a4162fce":"markdown","1cb74878":"markdown","35d0b79c":"markdown","028f2e03":"markdown","ebb6dc1d":"markdown"},"source":{"b0d8380a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","e5b8903b":"# Pandas and numpy for data manipulation\nimport pandas as pd\nimport numpy as np\n\n# Matplotlib and seaborn for visualization\nimport matplotlib.pyplot as plt\n%matplotlib inline \n\nimport seaborn as sns\n\n# Linear Regression to verify implementation\nfrom sklearn.linear_model import LinearRegression\n\n# Scipy for statistics\nimport scipy\n\n# PyMC3 for Bayesian Inference\nimport pymc3 as pm","11ecbc5b":"data = '..\/input\/'\nexercise = pd.read_csv(data + 'exercise.csv')\ncalories = pd.read_csv(data + 'calories.csv')\ndf = pd.merge(exercise, calories, on = 'User_ID')\ndf = df[df['Calories'] < 300]\ndf = df.reset_index()\ndf['Intercept'] = 1\ndf.head()\n","f7e2025f":"plt.figure(figsize=(8, 8))\n\nplt.plot(df['Duration'], df['Calories'], 'bo');\nplt.xlabel('Duration (min)', size = 18); plt.ylabel('Calories', size = 18); \nplt.title('Calories burned vs Duration of Exercise', size = 20);","3aa228a5":"# Create the features and response\nX = df.loc[:, ['Intercept', 'Duration']]\ny = df.loc[:, 'Calories']","f661ecea":"X.head()","126f98b4":"y.head()","1b1e8e24":"def linear_regression(X,y):\n    _coeffs = np.matmul(np.matmul(np.linalg.inv(np.matmul(X.T, X)), X.T), y)\n    return _coeffs","5a2eec40":"# Run the by hand implementation\nby_hand_coefs = linear_regression(X, y)\nprint('Intercept calculated by hand:', by_hand_coefs[0])\nprint('Slope calculated by hand: ', by_hand_coefs[1])","bef26a4a":"xs = np.linspace(4, 31, 1000)\nys = by_hand_coefs[0] + by_hand_coefs[1] * xs\n\nplt.figure(figsize=(8, 8))\n\nplt.plot(df['Duration'], df['Calories'], 'bo',label = 'observations', alpha = 0.8);\nplt.xlabel('Duration (min)', size = 18); plt.ylabel('Calories', size = 18); \nplt.plot(xs, ys, 'r--', label = 'OLS Fit', linewidth = 3)\nplt.legend(prop={'size': 16})\nplt.title('Calories burned vs Duration of Exercise', size = 20);","03119086":"print('Exercising for 15.5 minutes will burn an estimated {:.2f} calories.'.format(\n    by_hand_coefs[0] + by_hand_coefs[1] * 15.5))","b77b7bbc":"linear_regression = LinearRegression()\nlinear_regression.fit(np.array(X.Duration).reshape(-1,1),y)\nprint('Intercept from library:', linear_regression.intercept_)\nprint('Slope from library:', linear_regression.coef_[0])","3654fc10":"with pm.Model() as linear_model_500:\n    # Intercept\n    intercept = pm.Normal('Intercept', mu = 0, sd = 10)\n    \n    # Slope \n    slope = pm.Normal('slope', mu = 0, sd = 10)\n    \n    # Standard deviation\n    sigma = pm.HalfNormal('sigma', sd = 10)\n    \n    # Estimate of mean\n    mean = intercept + slope * X.loc[0:499, 'Duration']\n    \n    # Observed values\n    Y_obs = pm.Normal('Y_obs', mu = mean, sd = sigma, observed = y.values[0:500])\n    \n    # Sampler\n    step = pm.NUTS()\n\n    # Posterior distribution\n    linear_trace_500 = pm.sample(1000, step)","6b4247f7":"with pm.Model() as linear_model:\n    # Intercept\n    intercept = pm.Normal('Intercept', mu = 0, sd = 10)\n    \n    # Slope \n    slope = pm.Normal('slope', mu = 0, sd = 10)\n    \n    # Standard deviation\n    sigma = pm.HalfNormal('sigma', sd = 10)\n    \n    # Estimate of mean\n    mean = intercept + slope * X.loc[:, 'Duration']\n    \n    # Observed values\n    Y_obs = pm.Normal('Y_obs', mu = mean, sd = sigma, observed = y.values)\n    \n    # Sampler\n    step = pm.NUTS()\n\n    # Posterior distribution\n    linear_trace = pm.sample(1000, step)","7948b4e1":"pm.traceplot(linear_trace, figsize = (12, 12));","130e6b6f":"pm.plot_posterior(linear_trace, figsize = (12, 10), text_size = 20);","44887a30":"plt.figure(figsize = (8, 8))\npm.plot_posterior_predictive_glm(linear_trace, samples = 100, eval=np.linspace(2, 30, 100), linewidth = 1, \n                                 color = 'red', alpha = 0.8, label = 'Bayesian Posterior Fits',\n                                lm = lambda x, sample: sample['Intercept'] + sample['slope'] * x);\nplt.scatter(X['Duration'], y.values, s = 12, alpha = 0.8, c = 'blue', label = 'Observations')\nplt.plot(X['Duration'], by_hand_coefs[0] + X['Duration'] * by_hand_coefs[1], 'k--', label = 'OLS Fit', linewidth = 1.4)\nplt.title('Posterior Predictions with all Observations', size = 20); plt.xlabel('Duration (min)', size = 18);\nplt.ylabel('Calories', size = 18);\nplt.legend(prop={'size': 16});","fa0c4d9b":"plt.figure(figsize = (8, 8))\npm.plot_posterior_predictive_glm(linear_trace_500, samples = 100, eval=np.linspace(2, 30, 100), linewidth = 1, \n                                 color = 'red', alpha = 0.8, label = 'Bayesian Posterior Fits',\n                                lm = lambda x, sample: sample['Intercept'] + sample['slope'] * x);\nplt.scatter(X['Duration'][:500], y.values[:500], s = 12, alpha = 0.8, c = 'blue', label = 'Observations')\nplt.plot(X['Duration'], by_hand_coefs[0] + X['Duration'] * by_hand_coefs[1], 'k--', label = 'OLS Fit', linewidth = 1.4)\nplt.title('Posterior Predictions with Limited Observations', size = 20); plt.xlabel('Duration (min)', size = 18);\nplt.ylabel('Calories', size = 18);\nplt.legend(prop={'size': 16});","2860044d":"bayes_prediction = linear_trace['Intercept'] + linear_trace['slope'] * 15.5","c47b2179":"plt.figure(figsize = (8, 8))\nplt.style.use('fivethirtyeight')\nsns.kdeplot(bayes_prediction, label = 'Bayes Posterior Prediction')\nplt.vlines(x = by_hand_coefs[0] + by_hand_coefs[1] * 15.5, \n           ymin = 0, ymax = 2.5, \n           label = 'OLS Prediction',\n          colors = 'red', linestyles='--')\nplt.legend();\nplt.xlabel('Calories Burned', size = 18), plt.ylabel('Probability Density', size = 18);\nplt.title('Posterior Prediction for 15.5 Minutes', size = 20);","4a969613":"### All observations","8daa3e69":"### Prediction of Datapoint","2dd1bbbe":"### Limited Observations","fc1575a5":"## Bayesian Linear Regression","09e31c2d":"## Predictions of Response Sampled from the Posterior","a4162fce":"### Model with 500 Observations","1cb74878":"### Verify with Scikit-learn Implementation","35d0b79c":"### Model will all observations","028f2e03":"## Ordinary Least squares linear regression by hand","ebb6dc1d":"## Specific Prediction for One Datapoint"}}