{"cell_type":{"f42daf27":"code","94ae4b33":"code","fcec0c80":"code","5d6a7b32":"code","8ac0c8a3":"code","80c9eee6":"code","489fd65f":"code","bbc994a6":"code","c89d6201":"code","72babdb2":"code","a767a7c9":"code","0e9b0e89":"code","0426a6cb":"code","ec1edffb":"code","d9269fb6":"code","1c438d43":"code","0a54174a":"code","c9800ae3":"code","49ddb943":"code","c5013f6c":"code","6cc05434":"code","2d470ef0":"code","57e8bd53":"code","d0d2667c":"code","1b3ddf00":"code","19f8d748":"code","f0a633be":"code","8fe12765":"code","64f0c094":"code","009b5bff":"code","cd4f563d":"code","be754e09":"code","129541c4":"code","22d0c0b3":"code","cfe96acd":"code","4b036cc0":"code","1b5603c7":"code","c13c6afc":"code","d4e5c317":"code","459798bf":"code","13b7db94":"code","a57f0f52":"code","787a1d33":"code","4775baf6":"code","bf9c5c63":"code","893edc0b":"code","63bec197":"code","291bb7ab":"markdown","eedb63c2":"markdown","6c18d7fe":"markdown","e7151c34":"markdown","e479f9e1":"markdown","21227f31":"markdown","aa019da0":"markdown","decae0fd":"markdown","32565782":"markdown","956ec4a3":"markdown","f25b0434":"markdown","c3c71e5e":"markdown","1884deb2":"markdown","93556d07":"markdown","5939f028":"markdown","55c9ea88":"markdown","65e9372a":"markdown","7bd128eb":"markdown","e56e4a69":"markdown","2e0a4f84":"markdown","4faadda9":"markdown","d8bf37b8":"markdown","3434908a":"markdown","306152fa":"markdown"},"source":{"f42daf27":"import matplotlib\nmatplotlib.__version__","94ae4b33":"# Importing Libraries\nimport matplotlib.pyplot as plt","fcec0c80":"# A Basic Plot -->\nx = [1, 3, 5, 7, 8, 10, 14, 15, 17, 19]\ny = [34929, 35829, 37283, 38739, 39843, 42839, 43974, 46838, 47839, 48392]\n\nplt.plot(x, y)\nplt.show()","5d6a7b32":"# Adding Title to the Plot\n\nx = [1, 3, 5, 7, 8, 10, 14, 15, 17, 19]\ny = [34929, 35829, 37283, 38739, 39843, 42839, 43974, 46838, 47839, 48392]\n\n\nplt.plot(x, y)\n\nplt.title('Mean Income(Rupee) by Cars') #Adding Title to the Plot\nplt.show()\n","8ac0c8a3":"# Adding Labels to the Graph\n\n\n\n\nx = [1, 3, 5, 7, 8, 10, 14, 15, 17, 19]\ny = [34929, 35829, 37283, 38739, 39843, 42839, 43974, 46838, 47839, 48392]\n\nplt.plot(x, y)\nplt.xlabel('Cars') #Adding label on x-axis\nplt.ylabel('Mean Income(Rupee)')# Adding label on y-axis\nplt.title('Mean Income(USD) by Cars') #Adding Title to the Graph\nplt.show()","80c9eee6":"# Generating Multiple plots\n\nimport numpy as np\n\n\n#Generating a random y for x\n\nx = [1, 3, 5, 7, 8, 10, 14, 15, 17, 19]\ny = [34929, 35829, 37283, 38739, 39843, 42839, 43974, 46838, 47839, 48392]\ny_second = [y[i] + np.random.normal(3000, 800) for i in range(len(y))]\n\nplt.plot(x, y)        # First Plot\nplt.plot(x, y_second) # Second Plot\n\nplt.xlabel('Cars')\nplt.ylabel('Mean Income(Rupee)')\nplt.title('Mean Income(USD) by Cars')\nplt.show()","489fd65f":"#As we don't know which plot is which one we'll use Legend (Labels for a particular plot)\n\n\n\nx = [1, 3, 5, 7, 8, 10, 14, 15, 17, 19]\ny = [34929, 35829, 37283, 38739, 39843, 42839, 43974, 46838, 47839, 48392]\ny_second = [y[i] + np.random.normal(3000, 800) for i in range(len(y))]\n\nplt.plot(x, y)                  #First\nplt.plot(x, y_second)           #Second\n\n#We'll use legend to label the line in the order of plotting\nplt.legend(['First', 'Second'])\n\nplt.xlabel('Cars')\nplt.ylabel('Mean Income(Rupee)')\nplt.title('Mean Income(USD) by Cars')\nplt.show()","bbc994a6":"# There's a second way to use legend --- Most Preferable\n\n\nx = [1, 3, 5, 7, 8, 10, 14, 15, 17, 19]\ny = [34929, 35829, 37283, 38739, 39843, 42839, 43974, 46838, 47839, 48392]\ny_second = [y[i] + np.random.normal(3000, 800) for i in range(len(y))]\n\n\nplt.plot(x, y, label='First')                  #First\nplt.plot(x, y_second, label = 'Second')        #Second\n\nplt.legend()\n\nplt.xlabel('Cars')\nplt.ylabel('Mean Income(Rupee)')\nplt.title('Mean Income(USD) by Cars')\nplt.show()","c89d6201":"# Changing formatters of Line\n\n\nplt.plot(x, y, label='First')                         #First\nplt.plot(x, y_second, 'g--', label = 'Second')        #Second\n# g-- is green color and '--' linestyle which is a dashed line style\n\n\nplt.legend()\n\nplt.xlabel('Cars')\nplt.ylabel('Mean Income(Rupee)')\nplt.title('Mean Income(USD) by Cars')\nplt.show()","72babdb2":"# Adding formatters in a different way ( Specifying colors, linestyle and markers specifically)\n\n\n\nplt.plot(x, y, color='b', marker='o', label='First')                                    #First\nplt.plot(x, y_second, color='g', linestyle='--', marker = '.', label = 'Second')        #Second\n\nplt.legend()\n\nplt.xlabel('Cars')\nplt.ylabel('Mean Income(Rupee)')\nplt.title('Mean Income(USD) by Cars')\nplt.show()\n\n\n\n#You can use hex value for the colors also","a767a7c9":"## Adding linewidth in charts\n\nplt.plot(x, y, color='b', marker='o', label='First')                                                    #First\nplt.plot(x, y_second, color='g', linestyle='--', marker = '.', linewidth ='3', label = 'Second')        #Second\n\nplt.legend()\n\nplt.xlabel('Cars')\nplt.ylabel('Mean Income(Rupee)')\nplt.title('Mean Income(USD) by Cars')\nplt.show()","0e9b0e89":"## Adding padding in charts\n\nplt.plot(x, y, color='b', marker='o', label='First')                                    #First\nplt.plot(x, y_second, color='g', linestyle='--', marker = '.', label = 'Second')        #Second\n\nplt.legend()\n\nplt.xlabel('Cars')\nplt.ylabel('Mean Income(Rupee)')\nplt.title('Mean Income(USD) by Cars')\n\n\nplt.tight_layout() # helps in assigning appropriate padding to the all charts\nplt.show()","0426a6cb":"## Adding grid in charts --- It makes graph more readable\n\nplt.plot(x, y, color='b', marker='o', label='First')                  #First\nplt.plot(x, y_second, color='g', linestyle='--', marker = '.', label = 'Second')        #Second\n\nplt.legend()\n\nplt.xlabel('Cars')\nplt.ylabel('Mean Income(Rupee)')\nplt.title('Mean Income(USD) by Cars')\n\n\n\nplt.grid(True)\n\n\n\nplt.tight_layout()\nplt.show()","ec1edffb":"## We can change the style of the graph\n\nplt.style.available","d9269fb6":"# Using Dark Background for the graph\n\n\nplt.style.use('dark_background')\n\nplt.plot(x, y, color='b', marker='o', label='First')                  #First\nplt.plot(x, y_second, color='g', linestyle='--', marker = '.', label = 'Second')        #Second\n\nplt.legend()\n\nplt.xlabel('Cars')\nplt.ylabel('Mean Income(Rupee)')\nplt.title('Mean Income(USD) by Cars')\n\n\n\n# plt.grid(True)\n\n\n\nplt.tight_layout()\nplt.show()","1c438d43":"# Cartoonify\n\nplt.rcdefaults() # To remove black background for the params file\n\n\n\nplt.xkcd() # Cartoonifying agent\n\n\n\n\nplt.plot(x, y, color='b', marker='o', label='First')                  #First\nplt.plot(x, y_second, color='g', linestyle='--', marker = '.', label = 'Second')        #Second\n\nplt.legend()\n\nplt.xlabel('Cars')\nplt.ylabel('Mean Income(Rupee)')\nplt.title('Mean Income(USD) by Cars')\n\n\n\n# plt.grid(True)\n\n\n\nplt.tight_layout()\nplt.show()","0a54174a":"# To save an Image\n\n\nplt.rcdefaults()  #For closing xkcd()\n\nplt.style.use('dark_background')\n\nplt.plot(x, y, color='b', marker='o', label='First')                  #First\nplt.plot(x, y_second, color='g', linestyle='--', marker = '.', label = 'Second')        #Second\n\nplt.legend()\n\nplt.xlabel('Cars')\nplt.ylabel('Mean Income(Rupee)')\nplt.title('Mean Income(USD) by Cars')\n\n\n\nplt.grid(True)\n\n\n\nplt.tight_layout()\nplt.savefig(\"savefig_tutorial.png\")\nplt.show()","c9800ae3":"# As plt.plot is for plotting a line\n# plt.bar is for plotting a bar chart\n\n\nplt.rcdefaults()\n\nplt.bar(x, y, color= 'm', label='First')\n\nplt.xlabel('Cars')\nplt.ylabel('Mean Income(Rupee)')\nplt.title('Mean Income(USD) by Cars')\n\nplt.legend()\n\nplt.show()","49ddb943":"# To show a line parallely in a bar chart\n\nplt.rcdefaults()\n\nplt.bar(x, y, color= 'm', label='First')\nplt.plot(x, y_second, color='g', linestyle='--', marker = '.', label = 'Second')        #Second\n\nplt.xlabel('Cars')\nplt.ylabel('Mean Income(Rupee)')\nplt.title('Mean Income(USD) by Cars')\n\nplt.legend()\n\nplt.show()","c5013f6c":"# Trying to show two bar charts side by side but plt.bar doesn't work like that \n\nplt.rcdefaults()\n\n\nplt.bar(x, y_second, color='g', label = 'Second')        #Second\nplt.bar(x, y, color= 'm', label='First')                 #First\n\nplt.xlabel('Cars')\nplt.ylabel('Mean Income(Rupee)')\nplt.title('Mean Income(USD) by Cars')\n\nplt.legend()\n\nplt.show()","6cc05434":"# When you are desperate to plot bar charts side by side\n\nimport numpy as np\n\nx_indexes = np.arange(len(x))\nwidth = 0.25\n\nplt.bar(x_indexes-0.5*width, y_second, width=width, color='g', label = 'Second')        #Second\nplt.bar(x_indexes+0.5*width, y, width=width, color= 'm', label='First')                 #First\n\nplt.xlabel('Cars')\nplt.ylabel('Mean Income(Rupee)')\nplt.title('Mean Income(USD) by Cars')\n\nplt.legend()\n\nplt.show()\n\n\n# Problem : X-Axis doesn't remain same","2d470ef0":"#  -- Continued :  To plot bar charts side by side\n\n\n# Problem : X-Axis doesn't remain same\n# Solution : Use xticks to map x_indexes and original x\n\n\nimport numpy as np\n\nx_indexes = np.arange(len(x))\nwidth = 0.25\n\nplt.bar(x_indexes-0.5*width, y_second, width=width, color='g', label = 'Second')        #Second\nplt.bar(x_indexes+0.5*width, y, width=width, color= 'm', label='First')                 #First\n\nplt.xlabel('Cars')\nplt.ylabel('Mean Income(Rupee)')\nplt.title('Mean Income(USD) by Cars')\n\nplt.xticks(x_indexes, labels = x)\n\nplt.legend()\n\nplt.show()","57e8bd53":"#For Horizontal bar chart use plt.barh method instead of plt.bar\n\n\nplt.barh(x, y, color= 'm', label='First')                 #First\n\nplt.xlabel('Cars')\nplt.ylabel('Mean Income(Rupee)')\nplt.title('Mean Income(USD) by Cars')\n\nplt.xticks(x_indexes, labels = x) # Used for changing axis again\n\nplt.legend()\n\nplt.show()","d0d2667c":"# Basic Pie Chart with List\n\nplt.style.use('dark_background')\nslices = [35, 65] # Sum not necessary to be 100\n\nplt.pie(slices)\n\nplt.title(\"Slices Chart\")\nplt.tight_layout()\nplt.show()","1b3ddf00":"# Adding labels in Pie Chart\n\n\nplt.rcdefaults()\n\nslices = [35, 65]\nfruit_labels = ['Mangoes', 'Apples']\nplt.pie(slices, labels = fruit_labels)\n\nplt.title(\"Slices Chart\")\nplt.tight_layout()\nplt.show()","19f8d748":"# Adding seperators in the colors boundary of PIE Chart\n\nslices = [35, 65]\nfruit_labels = ['Mangoes', 'Apples']\nplt.pie(slices, labels = fruit_labels, wedgeprops={'edgecolor': 'black'})\n\nplt.title(\"Slices Chart\")\nplt.tight_layout()\nplt.show()","f0a633be":"# Adding colors in PIE Chart\n\nplt.style.use('dark_background')\nslices = [35, 65]\nfruit_labels = ['Mangoes', 'Apples']\ncolors = ['blue', 'magenta']\nplt.pie(slices, labels = fruit_labels, colors=colors, wedgeprops={'edgecolor': 'black'})\n\nplt.title(\"Slices Chart\")\nplt.tight_layout()\nplt.show()","8fe12765":"# Use explode to emphasize one in Pie Chart\n\n\nplt.style.use('dark_background')\nslices = [35, 65, 86]\nfruit_labels = ['Mangoes', 'Apples', 'Oranges']\ncolors = ['#c3bdbb', 'cyan', 'purple']\nexplode = [0, 0.05, 0] # 5 percent of radius\n\nplt.pie(slices, labels = fruit_labels, explode=explode, colors=colors, wedgeprops={'edgecolor': 'black'})\n\nplt.title(\"Slices Chart\")\nplt.tight_layout()\nplt.show()","64f0c094":"# Making 3-d Pie Charts using Shadow\n\n\nplt.style.use('dark_background')\nslices = [35, 65, 86]\nfruit_labels = ['Mangoes', 'Apples', 'Oranges']\ncolors = ['#c3bdbb', 'cyan', 'purple']\nexplode = [0, 0.05, 0] # 5 percent of radius\n\nplt.pie(slices, labels = fruit_labels, shadow=True, explode=explode, colors=colors, wedgeprops={'edgecolor': 'black'})\n\nplt.title(\"Slices Chart\")\nplt.tight_layout()\nplt.show()","009b5bff":"# Altering starting angle of Pie Chart\n\nplt.style.use('dark_background')\nslices = [35, 65, 86]\nfruit_labels = ['Mangoes', 'Apples', 'Oranges']\ncolors = ['#c3bdbb', 'cyan', 'purple']\nexplode = [0, 0.05, 0] # 5 percent of radius\n\nplt.pie(slices, labels = fruit_labels, shadow=True, startangle=290, explode=explode, colors=colors, wedgeprops={'edgecolor': 'black'})\n\nplt.title(\"Slices Chart\")\nplt.tight_layout()\nplt.show()","cd4f563d":"# Show Percentage of entities in Pie chart ---> Use autopct stands for auto percentage\n\nplt.style.use('dark_background')\nslices = [35, 65, 86]\nfruit_labels = ['Mangoes', 'Apples', 'Oranges']\ncolors = ['#c3bdbb', 'cyan', 'purple']\nexplode = [0, 0.05, 0] # 5 percent of radius\n\nplt.pie(slices, labels = fruit_labels, shadow=True, startangle=290, autopct='%1.1f%%', explode=explode, colors=colors, wedgeprops={'edgecolor': 'black'})\n\nplt.title(\"Slices Chart\")\nplt.tight_layout()\nplt.show()","be754e09":"plt.style.use('dark_background')\n\nminutes = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nplayer1 = [1, 2, 3, 3, 4, 4, 4, 4, 5]\nplayer2 = [1, 1, 1, 1, 2, 2, 2, 3, 4]\nplayer3 = [1, 1, 1, 2, 2, 2, 3, 3, 3]\nlabels= ['Player1', 'Player2', 'Player3']\n\n\n\nplt.stackplot(minutes, player1, player2, player3, labels= labels)\nplt.title(\"My Awesome Stack Plot\")\n\nplt.legend(loc='upper left')\nplt.xlabel(\"Minutes\")\nplt.ylabel('Stacks formed by adding player1, player2, player3')\nplt.tight_layout()\nplt.show()","129541c4":"# Filling area from a line to down\n\nplt.style.use('dark_background')\n\nplt.plot(x, y, color='b', marker='o', label='First')                  #First\nplt.fill_between(x, y_second, color='m', linestyle='--', label = 'Second')        #Second\n\nplt.legend()\n\nplt.xlabel('Cars')\nplt.ylabel('Mean Income(Rupee)')\nplt.title('Mean Income(USD) by Cars')\n\n\n\n\nplt.tight_layout()\nplt.savefig(\"savefig_tutorial.png\")\nplt.show()","22d0c0b3":"# Change the intensity of color (by alpha) in fill between\n\n\nplt.style.use('dark_background')\n\nplt.plot(x, y, color='b', marker='o', label='First')                  #First\nplt.fill_between(x, y_second, color='m', alpha=0.25, linestyle='--', label = 'Second')        #Second\n\nplt.legend()\n\nplt.xlabel('Cars')\nplt.ylabel('Mean Income(Rupee)')\nplt.title('Mean Income(USD) by Cars')\n\n\n\n\nplt.tight_layout()\nplt.savefig(\"savefig_tutorial.png\")\nplt.show()","cfe96acd":"# Basic Plot\n\n\nplt.style.use('dark_background')\n\nages = [18, 19, 21, 25, 26, 26, 30, 32, 38, 45, 55]\n\n\n#Divide into random number of bins\n# plt.hist(ages)\n\n# Divide into 5 bins\nplt.hist(ages, bins=5)\n\n# plt.legend()\n\nplt.title('Ages of Respondents')\nplt.xlabel('Ages')\nplt.ylabel('Total Respondents')\n\nplt.tight_layout()\n\nplt.show()","4b036cc0":"#Adding edgecolor in 5 different Bins of Histogram\n\nplt.style.use('dark_background')\n\nages = [18, 19, 21, 25, 26, 26, 30, 32, 38, 45, 55]\n\n\n\n# Divide into 5 bins\nplt.hist(ages, bins=5, edgecolor='black')\n\n# plt.legend()\n\nplt.title('Ages of Respondents')\nplt.xlabel('Ages')\nplt.ylabel('Total Respondents')\n\nplt.tight_layout()\n\nplt.show()","1b5603c7":"# Specifying Bins explicitly\n\n\nplt.style.use('dark_background')\n\nages = [18, 19, 21, 25, 26, 26, 30, 32, 38, 45, 55]\nbins = [10, 20, 30, 40, 50, 60] #6 values give 5 bins\nvalue = 32\n\n# Divide into 5 bins according to list above\nplt.hist(ages, bins=bins, edgecolor='black', label='histogram having 5 bins')\n\nplt.legend()\n\nplt.title('Ages of Respondents')\nplt.xlabel('Ages')\nplt.ylabel('Total Respondents')\n\nplt.tight_layout()\n\nplt.show()","c13c6afc":"# Specifying Bins explicitly\n\n\nplt.style.use('dark_background')\n\nages = [18, 19, 21, 25, 26, 26, 30, 32, 38, 45, 55]\nbins = [10, 20, 30, 40, 50, 60] #6 values give 5 bins\nvalue = 32\n\n# Divide into 5 bins according to list above\nplt.hist(ages, bins=bins, edgecolor='black', label='histogram having 5 bins')\nplt.axvline(value, color='m', label='vertical line at 32') # Draws vertical Line\n\nplt.legend()\n\nplt.title('Ages of Respondents')\nplt.xlabel('Ages')\nplt.ylabel('Total Respondents')\n\nplt.tight_layout()\n\nplt.show()","d4e5c317":"# Taking an example of y = 3x+5 + noise\n\n# Basic ScatterPlot\n\n# plt.rcdefaults()   # Use if you don't like this black background\n\n\nx = np.linspace(1,10,40)\ny = 3*x + 5 + np.random.normal(0, 2, 40)\n\n# c='m' represents colors = 'Magenta'\nplt.scatter(x,y, c='m', marker='o')\nplt.show()","459798bf":"# Addition of cmap in histogram perform change of colors of scatterplot according to magnitude of number\n\n\n# plt.rcdefaults()   # Use if you don't like this black background\n\n\nx = np.linspace(1,10,40)\ny = 3*x + 5 + np.random.normal(0, 2, 40)\n\n# Taking list of intensities in colors variable\ncolors = np.random.randint(0, 10, 40)\n\nplt.scatter(x,y, c=colors, cmap='autumn', marker='o')\nplt.show()","13b7db94":"# Not able to identify colors above ?\n# Solution Adding cbar above\n\n\n# plt.rcdefaults()   # Use if you don't like this black background\n\n\nx = np.linspace(1,10,40)\ny = 3*x + 5 + np.random.normal(0, 2, 40)\n\ncolors = [np.random.randint(0, 10, 40)]\n\nplt.scatter(x,y, c=colors, cmap='autumn', marker='o')\n\ncbar = plt.colorbar()\ncbar.set_label('Peace')\n\n\nplt.tight_layout()\n\nplt.show()","a57f0f52":"# if Even now it is confusing -->\n# Solution make sizes of markers according to intensities of colors using parameter s (stands for size)\n\n\n# plt.rcdefaults()   # Use if you don't like this black background\n\n\nx = np.linspace(1,10,40)\ny = 3*x + 5 + np.random.normal(0, 2, 40)\n\ncolors = np.random.randint(0, 10, 40)\n\n\n#Adding s parameter in plt.scatter\nplt.scatter(x,y, s=colors*4, c=colors, cmap='autumn', marker='o')\n\n\n# if your data is very large\n# plt.xscale('log')\n# plt.yscale('log')\n\n\ncbar = plt.colorbar()\ncbar.set_label('Peace')\n\nplt.tight_layout() # Add necessary padding to the graph\nplt.show()","787a1d33":"# Basic PlOT\n\n\n\nimport pandas as pd\nfrom datetime import datetime, timedelta\nfrom matplotlib import dates as mpl_dates\n\nplt.style.use('seaborn')\n\ndates = [\n    datetime(2019, 5, 24),\n    datetime(2019, 5, 25),\n    datetime(2019, 5, 26),\n    datetime(2019, 5, 27),\n    datetime(2019, 5, 28),\n    datetime(2019, 5, 29),\n    datetime(2019, 5, 30)\n]\n\ny = [0, 1, 3, 4, 6, 5, 7]\n\nplt.plot_date(dates, y)\n\nplt.tight_layout()\n\nplt.show()","4775baf6":"# Connecting dots of time series data (with linestyle)\n\n\nimport pandas as pd\nfrom datetime import datetime, timedelta\nfrom matplotlib import pyplot as plt\nfrom matplotlib import dates as mpl_dates\n\nplt.style.use('seaborn')\n\ndates = [\n    datetime(2019, 5, 24),\n    datetime(2019, 5, 25),\n    datetime(2019, 5, 26),\n    datetime(2019, 5, 27),\n    datetime(2019, 5, 28),\n    datetime(2019, 5, 29),\n    datetime(2019, 5, 30)\n]\n\ny = [0, 1, 3, 4, 6, 5, 7]\nplt.plot_date(dates, y, linestyle='solid')\n\nplt.tight_layout()\n\nplt.show()","bf9c5c63":"# Above Dates are really taking a lot of space in x axis..\n# Solution -> Tilt Dates (Use gcf())\n\n\n\nimport pandas as pd\nfrom datetime import datetime, timedelta\nfrom matplotlib import pyplot as plt\nfrom matplotlib import dates as mpl_dates\n\nplt.style.use('seaborn')\n\ndates = [\n    datetime(2019, 5, 24),\n    datetime(2019, 5, 25),\n    datetime(2019, 5, 26),\n    datetime(2019, 5, 27),\n    datetime(2019, 5, 28),\n    datetime(2019, 5, 29),\n    datetime(2019, 5, 30)\n]\n\ny = [0, 1, 3, 4, 6, 5, 7]\nplt.plot_date(dates, y, linestyle='solid')\nplt.gcf().autofmt_xdate() # gcf --> get current figure\n\nplt.tight_layout()\n\nplt.show()","893edc0b":"# Changing Date Format on x axis\n\nimport pandas as pd\nfrom datetime import datetime, timedelta\nfrom matplotlib import pyplot as plt\nfrom matplotlib import dates as mpl_dates\n\nplt.style.use('seaborn')\n\ndates = [\n    datetime(2019, 5, 24),\n    datetime(2019, 5, 25),\n    datetime(2019, 5, 26),\n    datetime(2019, 5, 27),\n    datetime(2019, 5, 28),\n    datetime(2019, 5, 29),\n    datetime(2019, 5, 30)\n]\n\ny = [0, 1, 3, 4, 6, 5, 7]\nplt.plot_date(dates, y, linestyle='solid')\nplt.gcf().autofmt_xdate() # gcf --> get current figure\n\ndate_format = mpl_dates.DateFormatter('%b, %d, %Y')\n\nplt.gca().xaxis.set_major_formatter(date_format) # gcf --> get current axis\n\nplt.tight_layout()\n\nplt.show()","63bec197":"import pandas as pd\nfrom matplotlib import pyplot as plt\n\nplt.style.use('seaborn')\n\nages = [2*i+1 for i in range(20,31)]\ndev_salaries = [30 + ages[i] for i in range(11)] + np.random.normal(7,4, 11)\npy_salaries = [20 + ages[i] for i in range(11)] + np.random.normal(7,4, 11)\njs_salaries = [10 + ages[i] for i in range(11)] + np.random.normal(7,4, 11)\n\n#sharex = True helps to share x axis in plots\nfig, ax = plt.subplots(nrows=3, ncols=1, sharex=True)\n\nax[0].plot(ages, py_salaries, label='Python')\nax[1].plot(ages, js_salaries, color='#444343', label='JavaScript')\nax[2].plot(ages, dev_salaries, color='#444444',linestyle='--', label='All Devs')\n\nplt.legend()\n\nax[0].set_title('Median Salary in grands by Age')\nax[0].set_ylabel('Median Salary (PY)')\n\nax[1].set_ylabel('Median Salary (JS)')\n\nax[2].set_ylabel('Median Salary (DEV)')\n\nax[2].set_xlabel('Ages')\n\nplt.tight_layout()\n\nplt.show()","291bb7ab":"# **SUBPLOTS**","eedb63c2":"-----","6c18d7fe":"# **HISTOGRAM**","e7151c34":"# **LINE PLOTS**","e479f9e1":"# **INSTALLATION**","21227f31":"# **STACK PLOTS**","aa019da0":"![The Ultimate Matplotlib Cheatsheet](https:\/\/matplotlib.org\/_static\/logo2_compressed.svg)<\/span>.","decae0fd":"-----","32565782":"## Instructions for Installation (Locally) -> \n\n### Steps -------->\n\n#### - To check Python : \n            python --version\n\n#### - To check pip : \n            pip -v\n\n#### - Install Matplotlib :\n            pip install matplotlib\n\n\n#### - Check if the preceding steps worked :\n            \n            - In Interpreter or .py file , try :\n                import matplotlib\n                matplotlib.__version__\n\n\n                                                Credit : Corey Schafer","956ec4a3":"-----","f25b0434":"## **Context** - \n####       I was personally tired of googling matplotlib again and again. \n####       Thought to make one snippet sheet in a sequential and a cachy way \u263a\ufe0f","c3c71e5e":"## Format Strings\n\n### Colors\n\n\n|character  |  color    |\n|-----------|-----------|\n|'b' \t    |  blue     |\n|'g' \t    |  green    |\n|'r' \t    |  red      |\n|'c' \t    |  cyan     | \n|'m' \t    |  magenta  |\n|'y' \t    |  yellow   |\n|'k' \t    |  black    |\n|'w' \t    |  white    |","1884deb2":"-----","93556d07":"# **PIE CHART**","5939f028":"# **PLOTTING TIME SERIES DATA**","55c9ea88":"# **BAR CHART**","65e9372a":"-----","7bd128eb":"#  \ud83d\udd25\ud83d\udd25**THE ULTIMATE MATPLOTLIB SNIPPETS SHEET** \ud83d\udd25\ud83d\udd25","e56e4a69":"-----","2e0a4f84":"# **SCATTERPLOTS**","4faadda9":"\n\n### Line Styles\n|character |\tdescription     |\n|----------|--------------------|\n|'-' \t   | solid line style   |\n|'--' \t   | dashed line style  |\n|'-.' \t   | dash-dot line style|\n|':' \t   | dotted line style  |\n\n\nThe format string consists of a part of color, marker and line:\n\n fmt = '[marker][line][color]'\n\n\n\n\n ### Markers\n\n\n|character \t|  description          |\n|-----------|-----------------------|\n|'.' \t    |  point marker         |\n|',' \t    |  pixel marker         |\n|'o' \t    |  circle marker        |\n|'v' \t    |  triangle_down marker |\n|'^' \t    |  triangle_up marker   |\n|'<' \t    |  triangle_left marker |\n|'>' \t    |  triangle_right marker|    \n|'1' \t    |  tri_down marker      |\n|'2' \t    |  tri_up marker        |\n|'3' \t    |  tri_left marker      |\n|'4' \t    |  tri_right marker     |\n|'8' \t    |  octagon marker       |\n|'s' \t    |  square marker        |\n|'p' \t    |  pentagon marker      |\n|'P' \t    |  plus (filled) marker |\n|'*' \t    |  star marker          |\n|'h' \t    |  hexagon1 marker      |\n|'H' \t    |  hexagon2 marker      |\n|'+' \t    |  plus marker          |\n|'x' \t    |  x marker             |\n|'X' \t    |  x (filled) marker    |\n|'D' \t    |  diamond marker       |\n|'d' \t    |  thin_diamond marker  |\n|'\\|' \t    |  vline marker         |\n|'_' \t    |  hline marker         |","d8bf37b8":"-----","3434908a":"----","306152fa":"----"}}