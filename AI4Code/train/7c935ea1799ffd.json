{"cell_type":{"f1d9bda3":"code","e2057762":"code","4e500bb5":"code","0b4e22e0":"code","4f2a0ab1":"code","31950b1e":"code","c9e3df5f":"code","8d1ef0ed":"code","e05db05b":"code","710ea4e1":"code","b9379b6f":"code","356e359f":"code","202052b5":"code","f429095c":"code","2a2048f7":"code","6d7d2f15":"code","b2912eff":"code","36a16619":"code","16976756":"code","93d2c465":"code","9e5cac91":"code","bad2d101":"code","2e7cfdf8":"code","44d4cb65":"code","08d1a14e":"markdown","9d323f11":"markdown"},"source":{"f1d9bda3":"import os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport cv2\nfrom tqdm import tqdm\nfrom PIL import Image\nimport io\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Dropout, Dense\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, TensorBoard, ModelCheckpoint\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom IPython.display import display, clear_output\nimport ipywidgets as widgets\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D , MaxPool2D , Flatten ,Dropout","e2057762":"#from google.colab import drive\n#drive.mount('\/content\/gdrive')","4e500bb5":"labels = ['glioma_tumor', 'meningioma_tumor', 'no_tumor', 'pituitary_tumor']\nX_train = []\nY_train = []\nX_test  = []\nY_test  = []\nimage_size=150\n\nfor label in labels:\n    trainPath = os.path.join('..\/input\/brain-tumor-classification-mri\/Training',label)\n    for file in tqdm(os.listdir(trainPath)):\n        image = cv2.imread(os.path.join(trainPath, file))\n        image = cv2.resize(image, (image_size, image_size))\n        X_train.append(image)\n        Y_train.append(label)\n        \n    \n    testPath = os.path.join('..\/input\/brain-tumor-classification-mri\/Testing',label)\n    for file in tqdm(os.listdir(testPath)):\n        image = cv2.imread(os.path.join(testPath, file))\n        image = cv2.resize(image, (image_size, image_size))\n        X_test.append(image)\n        Y_test.append(label)\n    \nX_train = np.array(X_train)\nX_test = np.array(X_test)","0b4e22e0":"\nfig, ax = plt.subplots(1,4, figsize=(20,20))\nk = 0\nfor i in range(0,4):\n    if i==0: idx=0\n    elif i==1: idx=827\n    elif i==2: idx=1649\n    else: idx=2045\n    ax[k].imshow(X_train[idx])\n    ax[k].set_title(Y_train[idx])\n    ax[k].axis('off')\n    k+=1","4f2a0ab1":"X_train.shape\n","31950b1e":"from sklearn.preprocessing import LabelEncoder\n ","c9e3df5f":"y_train_ = []\nfor i in Y_train:\n    y_train_.append(labels.index(i))\nY_train = y_train_\nY_train = tf.keras.utils.to_categorical(Y_train)\n\n","8d1ef0ed":"X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=0.2, random_state=28)","e05db05b":"model = Sequential()\n\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (150, 150, 3)))\nmodel.add(MaxPool2D(pool_size=(4,4)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(4,4), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(1024, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(4, activation = \"softmax\"))","710ea4e1":"model.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['accuracy'])","b9379b6f":"from tensorflow.keras.callbacks import  EarlyStopping","356e359f":"early_stop=EarlyStopping(monitor='val_loss',patience=2)","202052b5":"\nhistory = model.fit(X_train,Y_train, \n                              epochs = 15, validation_data = (X_val,Y_val)\n                              ,callbacks=[early_stop]\n                              ) ","f429095c":"  \nmodel.summary()","2a2048f7":"losses=pd.DataFrame(model.history.history)","6d7d2f15":"losses.head()","b2912eff":"losses[['accuracy','val_accuracy']].plot()","36a16619":"losses[['loss','val_loss']].plot()","16976756":"pred=np.argmax(model.predict(X_test),axis=-1)","93d2c465":"pred","9e5cac91":"from sklearn.metrics import confusion_matrix","bad2d101":"Y_test","2e7cfdf8":"label_encoder=LabelEncoder()\nY_test= label_encoder.fit_transform(Y_test)","44d4cb65":"confusion_matrix(Y_test,pred)","08d1a14e":"# One-Hot encoding\u00b6 \n##  LabelEncoder\n","9d323f11":"---\nSplit the data into training and validation subsets\u00b6\n---\n"}}