{"cell_type":{"f8cc1765":"code","36a4c630":"code","0bf42f5b":"code","0a5f7d1e":"code","77943613":"code","76931c28":"code","4e51267d":"code","cabed6f7":"code","d4cc7d7f":"code","dbef867b":"code","052ca3b1":"code","dce7b189":"code","86ba5b45":"code","9a15b6d1":"code","92e59b32":"code","cd6e342c":"code","b09c31dd":"code","7b19575c":"code","5dbd75d6":"code","4a87783d":"code","cc16918c":"code","95d176d8":"code","d18b8e83":"code","52d8fe73":"code","e93e9b32":"code","afd5b94c":"markdown","ac9981bc":"markdown","89f23ceb":"markdown","615c9d2b":"markdown","e224ab15":"markdown","24e072bc":"markdown","97348117":"markdown","4097ea42":"markdown","24856749":"markdown","ebc7b925":"markdown","3809927e":"markdown"},"source":{"f8cc1765":"# importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","36a4c630":"# reading csv file and assigning to dataset variable\ndataset = pd.read_csv('https:\/\/raw.githubusercontent.com\/AdiPersonalWorks\/Random\/master\/student_scores%20-%20student_scores.csv')","0bf42f5b":"# getting the overview of all the columns in the dataset\ndataset.columns","0a5f7d1e":"dataset.rename(columns = {'Hours': 'study_hours', 'Scores': 'percentage_scores'}, inplace = True)","77943613":"# getting brief overview of the dataset - number of columns and rows (shape of dataset), \n# columns names and its dtype, how many non-null values it has and memory usage.\ndataset.info()","76931c28":"dataset['study_hours'] = dataset['study_hours'].astype('float32')\ndataset['percentage_scores'] = dataset['percentage_scores'].astype('float32')","4e51267d":"# rechecking the columns dtype\ndataset.info()","cabed6f7":"# first 5 rows content of the dataset\ndataset.head()","d4cc7d7f":"# shape of dataset\ndataset.shape","dbef867b":"# finding missing values\ndataset.isnull().sum()","052ca3b1":"# finding any duplicates records in the dataset\ndataset.duplicated().sum()","dce7b189":"# plotting the the relationship between percentage_scores and study_hours\nsns.set(style = 'darkgrid')\nsns.scatterplot(x = 'study_hours', y = 'percentage_scores', data = dataset)\nplt.show()","86ba5b45":"# importing the libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score","9a15b6d1":"# initializing the X (independent variables \/ study_hours) and y (dependent variable \/ percentage_scores)\nX = dataset.drop('percentage_scores', axis = 1)\ny = dataset['percentage_scores']","92e59b32":"# splitting X and y into X_train, X_test, y_train, y_test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 42)","cd6e342c":"# finding the shape of X_train, X_test, y_train, y_test\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","b09c31dd":"# creating object of our LinearRegression model and assigning to a variable model\nmodel = LinearRegression()","7b19575c":"# training our LinearRegression model\nmodel.fit(X_train, y_train)","5dbd75d6":"line = model.coef_ * X_train + model.intercept_ # y = mx + b","4a87783d":"fig, ax = plt.subplots(nrows = 2, ncols = 2, figsize = (14, 10)) # 2 rows and 2 columns subplots\nfig.tight_layout(pad = 7.5) # padding\/space between each subplots\n\n\nax[0, 0].set_title('This is how the Linear Regression model got trained \\n' \n                   'the linear regression line represented by the formula y=mx+b \\n'\n                   'whereby x is the single input for prediction of single output y, \\n' \n                   'm is the slope of the line (coefficient), and b is the y intercept')\nax[0, 0].plot(X_train, line)\n\n\nax[0, 1].set_title('The best fitted linear regression line our model has found \\n' \n                   'with respect to X_train and y_train values on which it got trained \\n'\n                   'The line represents the closest relation between the line itself and  \\n'\n                   'any given different points by minimizing the squared distances \\n '\n                   '(error\/vertical distances) from this given different points \\n'\n                   '(X_train, y_train) to the line')\nax[0, 1].scatter(X_train, y_train)            \nax[0, 1].plot(X_train, line)\n\n\nax[1, 0].set_title('The best fitted linear regression line of our model \\n'\n                   'and the X_test and y_test values point \\n'\n                   'depicting what the actual test values are \\n'\n                   'and what our model will be prediciting \\n'\n                   'with the predicted best fitted linear regression line')\nax[1, 0].scatter(X_test, y_test)            \nax[1, 0].plot(X_train, line)\n\n\nax[1, 1].set_title('The best fitted linear regression line of our model and the entire dataset (Xy) \\n'\n                   'X (independent variables \/ study_hours) \\n'\n                   'and y (dependent variable \/ percentage_scores')\nax[1, 1].scatter(X, y)            \nax[1, 1].plot(X_train, line)\n\n\nplt.show()","cc16918c":"# predicting the percentage_scores for X_test\npred = model.predict(X_test)","95d176d8":"# comparing Actual vs Predicted\nprediction_data = pd.DataFrame({'test_studyhours': X_test['study_hours'], 'actual_percentscores': y_test, 'predicted_percentscores': pred})  \nprediction_data","d18b8e83":"r2_score(y_test, pred)","52d8fe73":"# evaluating the performance of the model\n\n# MAE\nprint('MAE:')\nprint(mean_absolute_error(y_test, pred))\n\n#MSE\nprint('MSE:')\nprint(mean_squared_error(y_test, pred))\n\n#RMSE\nprint('RMSE:')\nprint(np.sqrt(mean_squared_error(y_test, pred)))","e93e9b32":"hours = pd.DataFrame({'study_hours': [9.25]})\nunseenpred = model.predict(hours)\nprint(\"No of Hours = {}\".format(hours['study_hours'][0]))\nprint(\"Predicted Score = {}\".format(unseenpred[0]))","afd5b94c":"### Preparing the data for model training and evaluation","ac9981bc":"Let us rename the column names as per the Python Naming Convention, for better readability and understanding.\n\nThough this is not mandatory but it is a good practice to follow.","89f23ceb":"As seen in above scatter plot that student who study for less hours scores less whereas student who study for more hours scores more. Basically the percentage of scores is more or less same as the number of hours input in study. Thus there is a positive linear correlation between the hours of study and percentage of scores.\n","615c9d2b":"# This was my first task as Data Science & Business Analytics Intern in The Sparks Foundation through GRIP  \n","e224ab15":"# My submission can be found [here](<https:\/\/bit.ly\/SimpleLinearRegression>)","24e072bc":"It is a very small dataset. And there are no missing values. And both columns values are numeric.","97348117":"Converting percentage_scores column dtype to float32 as percentage_scores can be in decimal and also chances are there our LinearRegression model may predict percentage_scores in decimal.\n\nBesides also reducing study_hours dtype from float64 to float32 as max study_hours will have only 2 decimals for minutes, say 1.59 - one hour 59 minutes","4097ea42":"# It was a simple linear regression task to predict the percentage of marks a student can score based on the number of hours he dedicates on his studies using Supervised Machine Learning LinearRegression Algorithm while also explaining what is Supervised Machine Learning? And how LinearRegression model gets train and makes prediction?  \n","24856749":"### The regression line produced when the Linear Regression model got trained","ebc7b925":"### r2_score (coefficient of determination) is a regression score function.\n### It is the coefficient of how well the values fit compared to the original values. ","3809927e":"### What will be predicted score if a student studies for 9.25 hrs\/ day?"}}