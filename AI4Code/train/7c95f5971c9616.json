{"cell_type":{"c38c5abb":"code","171e18dc":"code","5c9715d0":"code","a4bba4be":"code","3015848c":"code","5c3a08b1":"code","fe8b378d":"code","cda8fd14":"code","acccf67a":"code","041a3b89":"code","234b0966":"code","79600082":"code","d1837cc8":"code","65cb7b1f":"code","21a48341":"code","db764155":"code","52a2e7ae":"code","040509d2":"code","f05d848e":"code","5efb6170":"code","bf884538":"code","ac6ae746":"code","c3fa5dcb":"code","5f9089b3":"code","566eb836":"code","092bc829":"code","4199c3b3":"code","0f9b8540":"code","da94d8da":"markdown","914a429d":"markdown","f0d01826":"markdown","7578a064":"markdown","4c5c09e8":"markdown","f09a26e3":"markdown","68e5db3b":"markdown","a4c377e6":"markdown"},"source":{"c38c5abb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/new-wordsds\/research_data\/research_data\/\"))\n\n# Any results you write to the current directory are saved as output.","171e18dc":"!pip install python-docx","5c9715d0":"import docx\nimport re\nfrom tqdm import tqdm\nimport jieba\nimport gensim\nfrom collections import defaultdict \nfrom math import log\nimport re\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","a4bba4be":"positive_word = []\nwith open('..\/input\/postive-word\/positive_dict.txt','r') as fr:\n    for line in fr.readlines():\n        positive_word.append(line.replace('\\n',''))\nprint(len(positive_word))\npositive_word[:5]","3015848c":"word_len = [len(word) for word in positive_word]\nsns.countplot(word_len)\nplt.title('char_level length of the special word')\nplt.show()","5c3a08b1":"split_words = []\nfor word in positive_word:\n    word = jieba.cut(word)\n    try_data = ' '.join(word).split()\n    split_words.append(try_data)","fe8b378d":"split_word_length = [len(word) for word in split_words]\nsns.countplot(split_word_length)\nplt.title('word_level length of the special word')\nplt.show()","cda8fd14":"def read_data(file_path):\n    text = []\n    none = 0\n    doc = docx.Document(file_path)\n    #para\n    for para in doc.paragraphs:\n        content = para.text\n        filter_ = re.compile(u'[^\\u4E00-\\u9FA5]')\n        filtered_content = filter_.sub(r'',content)\n        if len(filtered_content) > 0:\n            text.append(filtered_content)\n        else:\n            none += 1\n    #table\n    for table in doc.tables:\n        for row in table.rows:\n            for cell in row.cells:\n                content = cell.text\n                filter_ = re.compile(u'[^\\u4E00-\\u9FA5]')\n                filtered_content = filter_.sub(r'',content)\n                if len(filtered_content) > 0:\n                    text.append(filtered_content)\n                else:\n                    none += 1\n    #print(str(none)+'\u7a7a\u884c')\n    return text","acccf67a":"path = \"..\/input\/new-wordsds\/research_data\/research_data\/\"\ndoc = os.listdir(\"..\/input\/new-wordsds\/research_data\/research_data\/\")\ndoc","041a3b89":"text =[]\nfor doc_ in tqdm(doc):\n    path_ = path + doc_\n    text_ = read_data(path_)\n    text += text_\n    ","234b0966":"text_word = []\nwords = set([])\nfor text_ in tqdm(text):\n    text_word.append(list(jieba.cut(text_)))\n    words = words | set(jieba.cut(text_))\nwords = list(words)","79600082":"class Find_Words:\n    def __init__(self, min_count=5, min_pmi=0):\n        self.min_count = min_count\n        self.min_pmi = min_pmi\n        self.chars, self.pairs = defaultdict(int), defaultdict(int) #\u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c\u90a3\u4e48\u5c31\u7528int\u51fd\u6570\n                                                                  #\u521d\u59cb\u5316\u4e00\u4e2a\u503c\uff0cint()\u7684\u9ed8\u8ba4\u7ed3\u679c\u4e3a0\n        self.total = 0.\n    def count(self, texts): #\u8ba1\u6570\u51fd\u6570\uff0c\u8ba1\u7b97\u5355\u5b57\u51fa\u73b0\u9891\u6570\u3001\u76f8\u90bb\u4e24\u5b57\u51fa\u73b0\u7684\u9891\u6570\n        for text in texts:\n            self.chars[text[0]] += 1\n            for i in range(len(text)-1):\n                self.chars[text[i+1]] += 1\n                self.pairs[text[i:i+2]] += 1\n                self.total += 1\n        self.chars = {i:j for i,j in self.chars.items() if j >= self.min_count} #\u6700\u5c11\u9891\u6570\u8fc7\u6ee4\n        self.pairs = {i:j for i,j in self.pairs.items() if j >= self.min_count} #\u6700\u5c11\u9891\u6570\u8fc7\u6ee4\n        self.strong_segments = set()\n        for i,j in self.pairs.items(): #\u6839\u636e\u4e92\u4fe1\u606f\u627e\u51fa\u6bd4\u8f83\u201c\u5bc6\u5207\u201d\u7684\u90bb\u5b57\n            _ = log(self.total*j\/(self.chars[i[0]]*self.chars[i[1]]))\n            if _ >= self.min_pmi:\n                self.strong_segments.add(i)\n    def find_words(self, texts): #\u6839\u636e\u524d\u8ff0\u7ed3\u679c\u6765\u627e\u8bcd\u8bed\n        self.words = defaultdict(int)\n        for text in texts:\n            s = text[0]\n            for i in range(len(text)-1):\n                if text[i:i+2] in self.strong_segments: #\u5982\u679c\u6bd4\u8f83\u201c\u5bc6\u5207\u201d\u5219\u4e0d\u65ad\u5f00\n                    s += text[i+1]\n                else:\n                    self.words[s] += 1 #\u5426\u5219\u65ad\u5f00\uff0c\u524d\u8ff0\u7247\u6bb5\u4f5c\u4e3a\u4e00\u4e2a\u8bcd\u6765\u7edf\u8ba1\n                    s = text[i+1]\n        self.words = {i:j for i,j in self.words.items() if j >= self.min_count and len(i)>2 and len(i)<7} #\u6700\u540e\u518d\u6b21\u6839\u636e\u9891\u6570\u548c\u5b57\u7684\u6570\u91cf\n","d1837cc8":"fw = Find_Words(5, 1)\nfw.count(text)\nfw.find_words(text)","65cb7b1f":"new_words = set(fw.words)- set(words)\nprint(len(new_words))\nlist(new_words)[:100]","21a48341":"class Find_Words:\n    def __init__(self, min_count=5, min_pmi=0):\n        self.min_count = min_count\n        self.min_pmi = min_pmi\n        self.words, self.pairs, self.thr_pairs = defaultdict(int), defaultdict(int), defaultdict(int) #\u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c\u90a3\u4e48\u5c31\u7528int\u51fd\u6570\n                                                                  #\u521d\u59cb\u5316\u4e00\u4e2a\u503c\uff0cint()\u7684\u9ed8\u8ba4\u7ed3\u679c\u4e3a0\n        self.total = 0.\n        \n    def count_2(self, texts): #\u8ba1\u6570\u51fd\u6570\uff0c\u8ba1\u7b97\u5355\u5b57\u51fa\u73b0\u9891\u6570\u3001\u76f8\u90bb\u4e24\u5b57\u51fa\u73b0\u7684\u9891\u6570\n        for text in texts:\n            self.words[text[0]] += 1\n            for i in range(len(text)-1):\n                self.words[''.join(text[i+1])] += 1\n                self.pairs[' '.join(text[i:i+2])] += 1\n                self.total += 1\n        self.words = {i:j for i,j in self.words.items() if j >= self.min_count} #\u6700\u5c11\u9891\u6570\u8fc7\u6ee4\n        self.pairs = {i:j for i,j in self.pairs.items() if j >= self.min_count} #\u6700\u5c11\u9891\u6570\u8fc7\u6ee4\n        self.strong_segments = set()\n        for i,j in self.pairs.items(): #\u6839\u636e\u4e92\u4fe1\u606f\u627e\u51fa\u6bd4\u8f83\u201c\u5bc6\u5207\u201d\u7684\u90bb\u5b57\n            former,later = i.split()[0],i.split()[1]\n            _ = log(self.total*j\/(self.words[former]*self.words[later]))\n            if _ >= self.min_pmi:\n                self.strong_segments.add(i.replace(' ',''))\n                \n    def count_3(self, texts): #\u8ba1\u6570\u51fd\u6570\uff0c\u8ba1\u7b97\u5355\u5b57\u51fa\u73b0\u9891\u6570\u3001\u76f8\u90bb\u4e24\u5b57\u51fa\u73b0\u7684\u9891\u6570\n        for text in texts:\n            for i in range(len(text)-2):\n                self.thr_pairs[' '.join(text[i:i+3])] += 1\n                self.total += 1\n        self.words = {i:j for i,j in self.words.items() if j >= self.min_count} #\u6700\u5c11\u9891\u6570\u8fc7\u6ee4\n        self.thr_pairs = {i:j for i,j in self.thr_pairs.items() if j >= self.min_count} #\u6700\u5c11\u9891\u6570\u8fc7\u6ee4\n        for i,j in self.thr_pairs.items(): #thr_pairs\u6839\u636e\u4e92\u4fe1\u606f\u627e\u51fa\u6bd4\u8f83\u201c\u5bc6\u5207\u201d\u7684\u90bb\u5b57\n            former,later = ' '.join(i.split()[:2]),' '.join(i.split()[1:])\n            former_word, later_word = i.split()[2], i.split()[0]\n            try:\n                try_former = log(self.total*j\/(self.pairs[former]*self.words[former_word]))\n                try_later = log(self.total*j\/(self.pairs[later]*self.words[later_word]))\n                _ = max([try_former,try_later])\n                if _ >= self.min_pmi:\n                    self.strong_segments.add(i.replace(' ',''))\n            except:\n                continue","db764155":"fw = Find_Words(5, 1)\nfw.count_2(text_word)\nfw.count_3(text_word)","52a2e7ae":"len(fw.strong_segments)","040509d2":"print(len(fw.strong_segments - set(words)))\nnew_words = new_words | set(fw.strong_segments - set(words))","f05d848e":"split_sentence = []\nfor sentence in tqdm(text):\n    split_sentence.append(' '.join(jieba.cut(sentence)).split())","5efb6170":"two_combined_sentence = []\nfor sentence in tqdm(split_sentence):\n    try_sentence = []\n    for i in range(len(sentence)-1):\n         try_sentence.append(''.join(sentence[i:i+2]))\n        \n    two_combined_sentence.append(try_sentence)\n    ","bf884538":"thr_combined_sentence = []\nfor sentence in tqdm(split_sentence):\n    try_sentence = []\n    for i in range(len(sentence)-2):\n        try_sentence.append(''.join(sentence[i:i+3]))\n    thr_combined_sentence.append(try_sentence)","ac6ae746":"four_combined_sentence = []\nfor sentence in tqdm(split_sentence):\n    try_sentence = []\n    for i in range(len(sentence)-3):\n        try_sentence.append(''.join(sentence[i:i+4]))\n    four_combined_sentence.append(try_sentence)","c3fa5dcb":"prepare_word = set([])\nprepare_sentence = two_combined_sentence + thr_combined_sentence + four_combined_sentence\n#prepare_sentence = split_sentence + two_combined_sentence + thr_combined_sentence + four_combined_sentence\nfor sentence in tqdm(prepare_sentence):\n    prepare_word = prepare_word | set(sentence) ","5f9089b3":"i = 0\nfor word in new_words:\n    if word in positive_word:\n        i += 1\ni","566eb836":"len(new_words)","092bc829":"i = 0\nfor word in prepare_word:\n    if word in positive_word:\n        i += 1\nprint(i)","4199c3b3":"len(prepare_word)","0f9b8540":"len(positive_word)","da94d8da":"#\u67e5\u770b","914a429d":"#\u6d4b\u8bd5\u6a21\u578b","f0d01826":"#\u6587\u6863\u4e2d\u6240\u6709\u65b0\u8bcd","7578a064":"#\u57fa\u4e8e\u8bcd","4c5c09e8":"#\u65b0\u8bcd\u8bcd\u5178","f09a26e3":"#\u5b9e\u9a8c\u4e00\uff0c\u4f7f\u7528p(a,b)\/p(a)p(b)\u7684\u65b9\u5f0f\u5224\u522b,\u57fa\u4e8e\u5b57","68e5db3b":"#\u53ef\u77e5\u4e13\u4e1a\u9886\u57df\u8bcd \u4ee5\u5e73\u5e38\u7684\u5212\u5206\uff082\uff0c3\uff0c4\uff09","a4c377e6":"#\u5df2\u53d1\u73b0\u65b0\u8bcd"}}