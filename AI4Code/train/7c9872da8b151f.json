{"cell_type":{"7ad774be":"code","48117598":"code","3b2d7224":"code","5a775caa":"code","477d08c8":"code","bf053899":"code","ce56a26d":"code","44bda22c":"code","d84b4490":"code","e91756e6":"code","d44e0705":"code","ffee73b3":"code","1b3a10a4":"code","3f165217":"code","14928994":"code","a5db007a":"code","a1151c25":"code","4225d5be":"code","be69629b":"code","1133faae":"code","238b8d63":"code","1c67dd14":"code","b1276723":"markdown","8785dae9":"markdown","0c1f9eab":"markdown","48405742":"markdown","2f4ee5ac":"markdown","f9e35ed1":"markdown","02395e07":"markdown","e773e354":"markdown","a009b26b":"markdown","a426ba71":"markdown","5473a384":"markdown","ab7cc8fc":"markdown","f86d190c":"markdown","727f43a3":"markdown","c1f6117f":"markdown","f53a36e8":"markdown"},"source":{"7ad774be":"%matplotlib inline\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport plotly.express as px","48117598":"train_df = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv', low_memory=False, nrows=10**5, index_col=0,\n                       dtype={'row_id': 'int64', 'timestamp': 'int64', 'user_id': 'int32', 'content_id': 'int16', 'content_type_id': 'int8',\n                              'task_container_id': 'int16', 'user_answer': 'int8', 'answered_correctly': 'int8', 'prior_question_elapsed_time': 'float32', \n                             'prior_question_had_explanation': 'boolean',\n                             }\n                      )","3b2d7224":"train_df.head()","5a775caa":"train_df.info()","477d08c8":"train_df['content_type_id'].value_counts().plot(kind='bar', title='Questions vs Lectures')","bf053899":"train_df['content_type_id'].value_counts()\/len(train_df)","ce56a26d":"train_df = train_df[train_df['content_type_id'] == 0]","44bda22c":"train_df.groupby(['user_id', 'answered_correctly'])\\\n        .agg({'prior_question_elapsed_time':np.mean}).head(2000)","d84b4490":"train_df.groupby(['user_id', 'answered_correctly'])\\\n        .agg({'prior_question_elapsed_time':np.mean}).head(2000)\\\n        .groupby('user_id').agg(\n    {'prior_question_elapsed_time':lambda x: x.values[0]-x.values[1] if len(x) == 2 else x.values[0]})","e91756e6":"qdf = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/questions.csv')\nqdf.head()","d44e0705":"qdf.info()","ffee73b3":"(qdf['bundle_id'] == qdf['question_id']).value_counts()","1b3a10a4":"from collections import Counter","3f165217":"tags = []\nfor tag_str in qdf['tags'].values.tolist():\n    if not isinstance(tag_str, float):\n        tags.extend(tag_str.split(' '))\n\ncounts = dict(Counter(tags))\ncounts_df = pd.DataFrame.from_dict(counts, orient='index', columns=['Count']).reset_index()\ncounts_df = counts_df.rename({'index':'tag_id'}, axis='columns')","14928994":"counts_df.head()","a5db007a":"fig = px.bar(counts_df, x='tag_id', y='Count', title='Tag counts')\nfig.show()","a1151c25":"uids = train_df['user_id'].value_counts().index.tolist()[:10]","4225d5be":"random_user = train_df.loc[train_df['user_id'].isin(uids), ['user_id', 'timestamp', 'answered_correctly']]","be69629b":"random_user['timestamp'] = random_user['timestamp']\/1000","1133faae":"random_user.reset_index(drop=True, inplace=True)","238b8d63":"random_user['corr_cs'] = random_user.groupby('user_id').agg({'answered_correctly':np.cumsum})","1c67dd14":"fig = px.line(random_user, x=\"timestamp\", y=\"corr_cs\", color='user_id')\nfig.show()","b1276723":"# Initial exploration","8785dae9":"Let's try to group some `user_id` and generate statistics","0c1f9eab":"We should probably cluster this, but I don't know how","48405742":"Some users have a long gap, it probably must be due to them watching lectures in the middle before moving on to the next bundle of questions","2f4ee5ac":"# Looking at the `answered_correctly` as a time series problem for each user","f9e35ed1":"Let's see the different types of tags for the questions","02395e07":"Let's choose some well represented `user_id`s and try to look at the cumulative number of correctly answered questions for each of them overtime","e773e354":"Let's say that each student maybe weak in some topics and stronger in some topics, identifying this can be helpful, to know if a student can answer a question from those topics correctly.","a009b26b":"Let's check if the `bundle_id` and `question_id` columns are not same","a426ba71":"## Looking at the questions","5473a384":"No they are not, guess this was a bad assumption, since the `bundle_id` may have questions which are similar to one another or of the same topic of the lecture viewed.","ab7cc8fc":"We will try to analyze the questions that were answered, by filtering the records for questions alone","f86d190c":"# Import required Libraries","727f43a3":"Above I have tried to generate a user level difference of time taken between correctly answered questions and incorrectly answered questions, if the students had taken less for answering correct if compared to the incorrect ones, the difference must be **negative** and vice-versa for the other scenario.\n\n_(Assuming 0 to be False and 1 to be True)_\n\nThis maybe helpful to get patterns from time taken for a question, We can see that there are some big differences in time elapsed for some users ","c1f6117f":"The competition description clearly states that we need to trace the knowledge of that particular student overtime to understand if he can answer the incoming question correctly.","f53a36e8":"# Load data"}}