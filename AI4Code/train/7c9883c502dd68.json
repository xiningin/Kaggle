{"cell_type":{"3b3dfe5b":"code","333ae47e":"code","3081397c":"markdown","d92d6225":"markdown"},"source":{"3b3dfe5b":"import tensorflow as tf\nimport keras.backend as K\n\ndef f1(y_true, y_pred):\n    y_pred = K.round(y_pred)\n    tp = K.sum(K.cast(y_true*y_pred, 'float'), axis=0)\n    # tn = K.sum(K.cast((1-y_true)*(1-y_pred), 'float'), axis=0)\n    fp = K.sum(K.cast((1-y_true)*y_pred, 'float'), axis=0)\n    fn = K.sum(K.cast(y_true*(1-y_pred), 'float'), axis=0)\n\n    p = tp \/ (tp + fp + K.epsilon())\n    r = tp \/ (tp + fn + K.epsilon())\n\n    f1 = 2*p*r \/ (p+r+K.epsilon())\n    f1 = tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)\n    return K.mean(f1)","333ae47e":"import numpy as np\nfrom sklearn.metrics import f1_score\n\n# Samples\ny_true = np.array([[1,1,0,0,1], [1,0,1,1,0], [0,1,1,0,0]])\ny_pred = np.array([[0,1,1,1,1], [1,0,0,1,1], [1,0,1,0,0]])\n\nprint('Shape y_true:', y_true.shape)\nprint('Shape y_pred:', y_pred.shape)\n\n# Results\nprint('sklearn Macro-F1-Score:', f1_score(y_true, y_pred, average='macro'))\nprint('Custom Macro-F1-Score:', K.eval(f1(y_true, y_pred)))","3081397c":"### Testing Metric","d92d6225":"# Keras Macro F1-Score Implementation\nHi all!\nHere there is my implementation of the Macro-F1-Score in keras\/tensorflow that gives the same results of the sklearn implementation on 'macro' mode and has very similar values to the LB scores. Both y_true and y_pred are matrices of size (batch_size, 28)."}}