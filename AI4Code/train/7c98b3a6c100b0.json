{"cell_type":{"22941a33":"code","60d65d48":"code","88c754df":"code","eb28c421":"code","7c2e213e":"code","0f72e71e":"code","f5c2ebf2":"code","48247192":"code","0ca1ad84":"code","887a83e1":"code","5597c45b":"code","5742fc42":"code","1b7c62ad":"code","bea3bfd1":"code","9e11f69f":"code","687d2323":"code","48c7ee39":"code","4f0a8fc3":"code","e4023953":"markdown","f47998b9":"markdown","455af8a8":"markdown","76783ae5":"markdown","4a8ca1ac":"markdown","85cb36c0":"markdown","545d48d8":"markdown","d8af66f7":"markdown"},"source":{"22941a33":"import tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator","60d65d48":"tf.__version__","88c754df":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\ntraining_set = train_datagen.flow_from_directory('\/kaggle\/input\/dogs-cats-images\/dataset\/training_set',\n                                                 target_size = (64, 64),\n                                                 batch_size = 32,\n                                                 class_mode = 'binary')","eb28c421":"test_datagen = ImageDataGenerator(rescale = 1.\/255)\ntest_set = test_datagen.flow_from_directory('\/kaggle\/input\/dogs-cats-images\/dataset\/test_set',\n                                            target_size = (64, 64),\n                                            batch_size = 32,\n                                            class_mode = 'binary')","7c2e213e":"#Initialising the CNN\ncnn = tf.keras.models.Sequential()","0f72e71e":"#Step 1 - Convolution\ncnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))","f5c2ebf2":"#Step 2 - Pooling\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))","48247192":"#Adding a second convolutional layer\ncnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))","0ca1ad84":"#Step 3 - Flattening\ncnn.add(tf.keras.layers.Flatten())","887a83e1":"#Step 4 - Full Connection\ncnn.add(tf.keras.layers.Dense(units=128, activation='relu'))","5597c45b":"#Step 5 - Output Layer\ncnn.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))","5742fc42":"#Compiling the CNN\ncnn.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","1b7c62ad":"#Training the CNN on the Training set and evaluating it on the Test set\ncnn.fit(x = training_set, validation_data = test_set, epochs = 25)","bea3bfd1":"import numpy as np\nfrom keras.preprocessing import image\ntest_image = image.load_img('\/kaggle\/input\/single-prediction\/single_prediction\/cat_or_dog_1.jpg', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:\n  prediction = 'dog'\nelse:\n  prediction = 'cat'","9e11f69f":"print(prediction)","687d2323":"test_image = image.load_img('\/kaggle\/input\/single-prediction\/single_prediction\/cat_or_dog_2.jpg', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:\n  prediction = 'dog'\nelse:\n  prediction = 'cat'\n\nprint(prediction)","48c7ee39":"test_image = image.load_img('\/kaggle\/input\/single-prediction\/single_prediction\/cat_or_dog_3.jpg', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:\n  prediction = 'dog'\nelse:\n  prediction = 'cat'\n\nprint(prediction)","4f0a8fc3":"test_image = image.load_img('\/kaggle\/input\/single-prediction\/single_prediction\/cat_or_dog_4.jpg', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:\n  prediction = 'dog'\nelse:\n  prediction = 'cat'\n\nprint(prediction)","e4023953":"Now, we see that all the predictions are correct.We build our cnn model perfectly.","f47998b9":"# Part 1 - Data Preprocessing","455af8a8":" This Python 3 environment comes with many helpful analytics libraries installed\n It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nInput data files are available in the read-only \"..\/input\/\" directory\n#For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n#You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n#You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n#Set your own project id here\nPROJECT_ID = 'your-google-cloud-project'\nfrom google.cloud import storage\nstorage_client = storage.Client(project=PROJECT_ID)","76783ae5":"# Part 4 - Making a single prediction","4a8ca1ac":"# Preprocessing the Test set","85cb36c0":"# Part 3 - Training the CNN","545d48d8":"# Part 2 - Building the CNN","d8af66f7":"# Preprocessing the Training set"}}