{"cell_type":{"1401be38":"code","e9fd2e64":"code","9674e567":"code","6c889092":"code","c0fee6b3":"code","46906844":"code","59b9e347":"code","6fa70022":"code","58a7968c":"code","9698342f":"code","30b2d368":"code","5c4c0313":"code","f7055aa7":"code","e227b064":"markdown","e8eabc71":"markdown","900155f3":"markdown","1171ae50":"markdown","e8ecf1b0":"markdown","7f86e1b3":"markdown"},"source":{"1401be38":"import numpy as np\nimport pandas as pd","e9fd2e64":"df = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv')","9674e567":"df","6c889092":"mean = df['num_sold'].mean()\nstd = df['num_sold'].std()\n\nmean,std","c0fee6b3":"def feat_eng(df):\n    countries = {'Finland': 0, 'Norway': 1, 'Sweden': 2}\n    stores = {'KaggleMart': 0, 'KaggleRama': 1}\n    products = {'Kaggle Mug': 0,'Kaggle Hat': 1, 'Kaggle Sticker': 2}\n    \n    # load holiday info.\n    holiday = pd.read_csv('..\/input\/public-and-unofficial-holidays-nor-fin-swe-201519\/holidays.csv')\n    GDP = pd.read_csv('..\/input\/gdp-20152019-finland-norway-and-sweden\/GDP_data_2015_to_2019_Finland_Norway_Sweden.csv', index_col=\"year\")\n    population = pd.read_csv('..\/input\/population-20152019-finland-norway-sweden\/population_2015-2019_Finland_Norway_Sweden.csv',index_col = 'year')\n    fin_holiday = holiday.loc[holiday.country == 'Finland']\n    swe_holiday = holiday.loc[holiday.country == 'Sweden']\n    nor_holiday = holiday.loc[holiday.country == 'Norway']\n    df['fin holiday'] = df.date.isin(fin_holiday.date).astype(int)\n    df['swe holiday'] = df.date.isin(swe_holiday.date).astype(int)\n    df['nor holiday'] = df.date.isin(nor_holiday.date).astype(int)\n    df['holiday'] = np.zeros(df.shape[0]).astype(int)\n    df.loc[df.country == 'Finland', 'holiday'] = df.loc[df.country == 'Finland', 'fin holiday']\n    df.loc[df.country == 'Sweden', 'holiday'] = df.loc[df.country == 'Sweden', 'swe holiday']\n    df.loc[df.country == 'Norway', 'holiday'] = df.loc[df.country == 'Norway', 'nor holiday']\n    df.drop(['fin holiday', 'swe holiday', 'nor holiday'], axis=1, inplace=True)\n    \n    df['date'] = pd.to_datetime(df['date'])\n    df['year'] = df['date'].dt.year\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df['quarter'] = df['date'].dt.quarter\n    df['month'] = df['date'].dt.month\n    df['dayofmonth'] = df['date'].dt.days_in_month\n    df['day'] = df['date'].dt.day\n    df['week']= df['date'].dt.weekday\n    df['country'] = df['country'].replace(countries)\n    df['store'] = df['store'].replace(stores)\n    df['product'] = df['product'].replace(products)\n    df = df.drop(columns = 'row_id')\n    df = df.drop(columns = 'date')\n    \n    # GDP columns\n    GDP.columns = [0,1,2]\n    GDP_dictionary = GDP.unstack().to_dict()\n    df[\"GDP_value\"] = df.set_index(['country','year']).index.map(GDP_dictionary.get)\n    df[\"GDP_value\"] = df[\"GDP_value\"]\n    \n    population.columns = [0,1,2]\n    population_dictionary = population.unstack().to_dict()\n    df[\"population\"] = df.set_index(['country','year']).index.map(population_dictionary.get)\n\n    \n    return df\n","46906844":"df = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv')","59b9e347":"df_train = feat_eng(df)\ndf_train['num_sold'] = np.log(df_train['num_sold'])\ndf_train['population'].describe()","6fa70022":"train_y = df_train['num_sold']\ntrain_x = df_train[['country',\n                   'store',\n                   'product',\n                   'holiday',\n                   'year',\n                   'dayofyear',\n                   'quarter',\n                   'month',\n                    'dayofmonth',\n                   'day',\n                   'week',\n                    'GDP_value',\n                   'population'\n                   ]\n                  ]","58a7968c":"train_x","9698342f":"def SMAPE(y_true, y_pred):\n    denominator = (y_true + np.abs(y_pred)) \/ 200.0\n    diff = np.abs(y_true - y_pred) \/ denominator\n    diff[denominator == 0] = 0.0\n    return np.mean(diff)","30b2d368":"from sklearn.metrics import log_loss, mean_squared_error\nfrom sklearn.model_selection import KFold,TimeSeriesSplit\nfrom sklearn.linear_model import LinearRegression\nimport xgboost as xgb\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\n\n\n# fold5\nkf = KFold(n_splits = 5, shuffle = True, random_state = 70)\nx = 0.95\n# modeling and training\nfor fold, (tr_idx, va_idx) in enumerate(kf.split(train_x)):\n    print(f'--------fold:{fold}--------')\n    fold+=1\n    tr_x, va_x = train_x.iloc[tr_idx], train_x.iloc[va_idx]\n    tr_y, va_y = train_y.iloc[tr_idx], train_y.iloc[va_idx]\n    \n    params = {'depth': 5,\n                  'learning_rate': 0.001,\n                  'l2_leaf_reg': 5.0,\n                  'random_strength': 3.0,\n                  'min_data_in_leaf': 2}\n                  \n    model = CatBoostRegressor(**params,\n                              iterations=20000,\n                              bootstrap_type='Bayesian',\n                              boosting_type='Plain',\n                              loss_function='MAE',\n                              eval_metric='SMAPE',\n                              random_seed=5)\n    # Training the model\n    \n    va_pred = model.fit(tr_x,\n              tr_y,\n              eval_set=[(va_x, va_y)],\n              early_stopping_rounds = 200,\n              verbose = 1000)\n    val_pred = model.predict(va_x)\n    # Convert the target back to non-logaritmic.\n    print(f' SMAPE: {SMAPE(np.exp(va_y), np.exp(val_pred))}')\n","5c4c0313":"df","f7055aa7":"test = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv')\ntest = feat_eng(test)\ny = model.predict(test)\ndf_submission = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/sample_submission.csv') \ndf_submission['num_sold'] = np.exp(y)\ndf_submission.to_csv('.\/submission.csv', index = False)","e227b064":"## 0-Import Library","e8eabc71":"## 3-Submission","900155f3":"## 1-Feature Engineering\n\nYou can start feature engineering quickly by The function 'feat_eng'(df)'\n\ndf is train.csv or test.csv","1171ae50":"Kfold & Catboost\nLB:5.94134","e8ecf1b0":"### Data\n* country\n* store\n* product\n* (num_sold)\n* holiday (By Country)\n* year\n* dayofyear\n* quarter\n* month\n* day\n* week\n* GDP_value\n\n","7f86e1b3":".descriv## 2-CrossValidation & CatBoost"}}