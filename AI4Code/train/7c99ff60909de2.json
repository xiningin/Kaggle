{"cell_type":{"dfc09e59":"code","ab0894e6":"code","516ad659":"code","bf137a1d":"code","b3f4fb7a":"code","cbd573e5":"code","d8e3fae2":"code","3362836b":"code","4c1a2148":"code","498419af":"code","ba5cae3f":"code","a1a8e44a":"code","35cd5d59":"code","2916c214":"code","853671d1":"code","2ad555f3":"code","a0b05113":"code","cacff7cc":"code","138a9f61":"code","59830d5f":"code","99d18525":"code","eedef5cd":"code","ae602245":"code","86660df7":"code","8c28e238":"code","c4d82eaa":"markdown","b20f7e45":"markdown","b16c5945":"markdown","44f4d9d4":"markdown","15e7eb94":"markdown"},"source":{"dfc09e59":"import catboost\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom catboost import Pool, cv","ab0894e6":"pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 100)","516ad659":"df = pd.read_csv('train.csv')","bf137a1d":"# \u0437\u0430\u043c\u0435\u043d\u0438\u043c NaN\u044b \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445\nfor col in df.select_dtypes('object').columns:\n    df[col] = df[col].fillna('UNKNOWN')","b3f4fb7a":"# \u0437\u0430\u043c\u0435\u043d\u0438\u043c NaN\u044b \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445\nfor col in df.select_dtypes(['int64','float64']).columns:\n    df[col] = df[col].fillna(df[col].median())","cbd573e5":"# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0444\u0438\u0447\u0438 \u0441 \u043d\u0438\u0437\u043a\u043e\u0439 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0435\u0439 \u0441 'churn'\n# \u0414\u0430\u043b\u0435\u0435 \u043e\u0442\u0431\u0440\u043e\u0441\u0438\u043c \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b, \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043b\u0435\u0436\u0438\u0442 \u0432 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0435 [-0.006768, 0.001665]\ndf.corrwith(df['churn'], method='spearman').sort_values(ascending=False)","d8e3fae2":"# \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\nnum_features = df.select_dtypes(['int64','float64']).columns.tolist()","3362836b":"# \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438, \u0447\u0442\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0444\u0438\u0447\u0438 'Customer_ID' \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u0441\u043a\u043e\u0440\n# \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0444\u0438\u0447\u0430 \u043d\u0435 \u043d\u0435\u0441\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439 \u0438\u043d\u0444\u044b\nnum_features = ['rev_Mean',\n 'mou_Mean',\n 'totmrc_Mean',\n 'da_Mean',\n 'ovrmou_Mean',\n 'ovrrev_Mean',\n 'vceovr_Mean',\n 'datovr_Mean',\n 'roam_Mean',\n 'change_mou',\n 'change_rev',\n 'drop_vce_Mean',\n 'drop_dat_Mean',\n 'blck_vce_Mean',\n 'blck_dat_Mean',\n 'unan_vce_Mean',\n 'unan_dat_Mean',\n 'plcd_vce_Mean',\n 'plcd_dat_Mean',\n 'recv_vce_Mean',\n 'recv_sms_Mean',\n 'comp_vce_Mean',\n 'comp_dat_Mean',\n 'custcare_Mean',\n 'ccrndmou_Mean',\n 'cc_mou_Mean',\n 'inonemin_Mean',\n 'threeway_Mean',\n 'mou_cvce_Mean',\n 'mou_cdat_Mean',\n 'mou_rvce_Mean',\n 'owylis_vce_Mean',\n 'mouowylisv_Mean',\n 'iwylis_vce_Mean',\n 'mouiwylisv_Mean',\n 'peak_vce_Mean',\n 'peak_dat_Mean',\n 'mou_peav_Mean',\n 'mou_pead_Mean',\n 'opk_vce_Mean',\n 'opk_dat_Mean',\n 'mou_opkv_Mean',\n 'mou_opkd_Mean',\n 'drop_blk_Mean',\n 'attempt_Mean',\n 'complete_Mean',\n 'callwait_Mean',\n 'months',\n 'uniqsubs',\n 'actvsubs',\n 'totcalls',\n 'totmou',\n 'totrev',\n 'adjrev',\n 'adjmou',\n 'adjqty',\n 'avgmou',\n 'avgqty',\n 'avg3mou',\n 'avg3qty',\n 'avg3rev',\n 'avg6mou',\n 'avg6qty',\n 'avg6rev',\n 'hnd_price',\n 'phones',\n 'models',\n 'lor',\n 'income',\n 'eqpdays']","4c1a2148":"# \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0444\u0438\u0447\u0438 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u044b\u0448\u0435\nX_train, X_valid, y_train, y_valid = train_test_split(\n    df[num_features], df['churn'], test_size=0.33, random_state=42)","498419af":"# \u041e\u0441\u043d\u043e\u0432\u044b\u0432\u0430\u044f\u0441\u044c \u043d\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0438 roc_auc, \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043b\u0438 \"\u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435\" \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f RFC\nclf = RandomForestClassifier(\n    max_depth = 13, \n    min_samples_leaf = 6,\n    n_estimators = 30,\n    random_state = 13,\n    max_features = 20\n)\n#clf.fit(X_train, y_train)\n# \u041f\u043e\u0441\u0442\u043e\u0440\u043e\u0438\u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e \u0432\u0441\u0435\u0439 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\nclf.fit(df[num_features], df['churn'])\n# \u041e\u0446\u0435\u043d\u043a\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044e \u043d\u0430 \u0447\u0430\u0441\u0442\u0438 \u0438\u0437 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n# \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u043f\u043e \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044e X_train\/X_valid, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 roc_auc \u0431\u043b\u0438\u0437\u043e\u043a \u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0443 \u0441 kaggle\npredict_test = clf.predict_proba(X_valid[num_features])[:,1]\nroc_auc_score(y_valid, predict_test)","ba5cae3f":"test_df = pd.read_csv('test.csv')\n\nfor col in test_df.select_dtypes(['int64','float64']).columns:\n    test_df[col] = test_df[col].fillna(test_df[col].median())\n    \ntest_df['pred_proba'] = clf.predict_proba(test_df[num_features])[:,1]\nsubmission_df = test_df[['Customer_ID']]\nsubmission_df['churn'] = test_df['pred_proba']\nsubmission_df.to_csv(\n    'RFC_cut_customer_ID_full_train_cut_num.csv',\n    index = False\n)","a1a8e44a":"# \u0437\u0430\u043c\u0435\u043d\u0438\u043c NaN\u044b \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445\nfor col in df.select_dtypes('object').columns:\n    df[col] = df[col].fillna('UNKNOWN')","35cd5d59":"# \u0437\u0430\u043c\u0435\u043d\u0438\u043c NaN\u044b \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445\n# \u041d\u041e! catboost \u0434\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0435\u0441\u043b\u0438 \u041d\u0415 \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u044c NaN \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\u0430\u0445\nfor col in df.select_dtypes(['int64','float64']).columns:\n    df[col] = df[col].fillna(df[col].median())","2916c214":"# \u0437\u0430\u043c\u0443\u0442\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0444\u0438\u0447, \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u0432\u044b\u043a\u0438\u043d\u0443\u043b\u0438 \u043e\u0442\u0442\u0443\u0434\u0430\nfeatures = df.columns.tolist()","853671d1":"# \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c\u0443, \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0444\u0438\u0447\u0438\nfeatures= ['Customer_ID',\n 'rev_Mean',\n 'mou_Mean',\n 'totmrc_Mean',\n 'da_Mean',\n 'ovrmou_Mean',\n 'ovrrev_Mean',\n 'vceovr_Mean',\n 'datovr_Mean',\n 'roam_Mean',\n 'change_mou',\n 'change_rev',\n 'drop_vce_Mean',\n 'drop_dat_Mean',\n 'blck_vce_Mean',\n 'blck_dat_Mean',\n 'unan_vce_Mean',\n 'unan_dat_Mean',\n 'plcd_vce_Mean',\n 'plcd_dat_Mean',\n 'recv_vce_Mean',\n 'recv_sms_Mean',\n 'comp_vce_Mean',\n 'comp_dat_Mean',\n 'custcare_Mean',\n 'ccrndmou_Mean',\n 'cc_mou_Mean',\n 'inonemin_Mean',\n 'threeway_Mean',\n 'mou_cvce_Mean',\n 'mou_cdat_Mean',\n 'mou_rvce_Mean',\n 'owylis_vce_Mean',\n 'mouowylisv_Mean',\n 'iwylis_vce_Mean',\n 'mouiwylisv_Mean',\n 'peak_vce_Mean',\n 'peak_dat_Mean',\n 'mou_peav_Mean',\n 'mou_pead_Mean',\n 'opk_vce_Mean',\n 'opk_dat_Mean',\n 'mou_opkv_Mean',\n 'mou_opkd_Mean',\n 'drop_blk_Mean',\n 'attempt_Mean',\n 'complete_Mean',\n 'callwait_Mean',\n 'months',\n 'uniqsubs',\n 'actvsubs',\n 'new_cell',\n 'crclscod',\n 'asl_flag',\n 'totcalls',\n 'totmou',\n 'totrev',\n 'adjrev',\n 'adjmou',\n 'adjqty',\n 'avgmou',\n 'avgqty',\n 'avg3mou',\n 'avg3qty',\n 'avg3rev',\n 'avg6mou',\n 'avg6qty',\n 'avg6rev',\n 'prizm_social_one',\n 'area',\n 'dualband',\n 'refurb_new',\n 'hnd_price',\n 'phones',\n 'models',\n 'hnd_webcap',\n 'ownrent',\n 'lor',\n 'dwlltype',\n 'marital',\n 'adults',\n 'infobase',\n 'HHstatin',\n 'dwllsize',\n 'forgntvl',\n 'ethnic',\n 'kid0_2',\n 'kid3_5',\n 'kid6_10',\n 'kid11_15',\n 'kid16_17',\n 'creditcd',\n 'eqpdays']","2ad555f3":"# \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0444\u0438\u0447\ncat_features = df[features].select_dtypes('object').columns.tolist()","a0b05113":"X_train, X_valid, y_train, y_valid = train_test_split(\n    df[features], df['churn'], test_size=0.33, random_state=42)","cacff7cc":"# \u0418\u043d\u0442\u0443\u0438\u0442\u0438\u0432\u043d\u043e \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u044b \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 (\u0438\u0437 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0430)\ncv_dataset = Pool(data=df[features],\n                  label=df['churn'],\n                  cat_features=cat_features)\n\nparams = {\"iterations\": 200,\n          \"depth\": 3,\n          \"loss_function\": \"Logloss\",\n          \"verbose\": False,\n           'learning_rate':0.3,\n         'use_best_model':True}\n\nscores = cv(cv_dataset,\n            params,\n            fold_count=3, \n            plot=\"True\")","138a9f61":"# \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u0447\u0435\u043d\u044b\u0435 \u0433\u043e\u0432\u043e\u0440\u044f\u0442, \u0447\u0442\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 \u043c\u043d\u043e\u0433\u043e\u0432\u0430\u0442\u043e, \u0434\u0430 \u0438 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0441\u043e\u043a\u043e\u0432\u0430\u0442\u0430, \u043d\u043e \u0447\u0442\u043e \u0438\u043c\u0435\u0435\u043c, \u0442\u043e \u0438 \u043f\u0440\u043e\u0434\u0430\u0435\u043c\nmodel = catboost.CatBoostClassifier(iterations = 600, depth=3, verbose= False, learning_rate=0.3)\nmodel.fit(df[features], df['churn'], cat_features=cat_features, plot=True, verbose=False)\n#model.fit(X_train, y_train, cat_features=cat_features, plot=True, verbose=False)\n# \u041e\u0446\u0435\u043d\u043a\u0430 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043f\u043e \u0447\u0430\u0441\u0442\u0438 \u0442\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0431\u0443\u0447\u0430\u043b\u0438\n# \u042f\u0441\u043d\u043e, \u0447\u0442\u043e \u044d\u0442\u043e \u043b\u0438\u0448\u044c \u0441\u043f\u043e\u0441\u043e\u0431 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438\npredict_test = model.predict_proba(X_valid[features])[:,1]\nroc_auc_score(y_valid, predict_test)","59830d5f":"test_df = pd.read_csv('test.csv')\n#test_df = test_df.drop(['numbcars','dwllsize' ,'HHstatin','ownrent'], axis=1)\n\nfor col in test_df.select_dtypes('object').columns:\n    test_df[col] = test_df[col].fillna('UNKNOWN')   \n    \ntest_df['pred_proba'] = model.predict_proba(test_df[features])[:,1]\nsubmission_df = test_df[['Customer_ID']]\nsubmission_df['churn'] = test_df['pred_proba']\nsubmission_df.to_csv(\n    'Catboost_0.69555.csv',\n    index = False\n)","99d18525":"RFC_submission_df = submission_df\nRFC_submission_df","eedef5cd":"CB_submission_df = pd.read_csv('Catboost_0.69555.csv')\nCB_submission_df","ae602245":"Mean = CB_submission_df[['Customer_ID']]\nMean['churn'] = (CB_submission_df['churn']+RFC_submission_df['churn'])\/2","86660df7":"Mean.to_csv(\n    'CB_0.69555_RFC_mean.csv',\n    index = False\n)","8c28e238":"Mean","c4d82eaa":"\u0412\u043e\u0437\u044c\u043c\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0434\u0432\u0443\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","b20f7e45":"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0444\u0430\u0439\u043b\u0430 \u043d\u0430 kaggle.\n\u041e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u044d\u0442\u0438\u043c \u0441\u0430\u0431\u043c\u0438\u0442\u043e\u043c \u0432\u044b\u0431\u0438\u0442\u043e 0.69151 \u043d\u0430 \u043f\u0440\u0438\u0432\u0430\u0442\u0435","b16c5945":"\u041e\u0444\u043e\u0440\u043c\u0438\u043c \u0444\u0430\u0439\u043b \u0434\u043b\u044f \u0437\u0430\u043b\u0438\u0432\u043a\u0438 \u043d\u0430 kaggle, \u0434\u0430\u044e\u0449\u0438\u0439 0.66367 \u0432 public","44f4d9d4":"\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 catboost'a:","15e7eb94":"\u041d\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0432 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u0435\u0433\u043e \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438, \u0430 \u0443\u0441\u0440\u0435\u0434\u043d\u0438\u043b\u0438 \u0435\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0441 catboost'\u043e\u043c (\u0442\u0438\u043f\u0430 \u0441\u0431\u043b\u044d\u043d\u0434\u0438\u043b\u0438)"}}