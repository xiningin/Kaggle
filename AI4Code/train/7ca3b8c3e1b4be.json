{"cell_type":{"91fd5512":"code","2e63b456":"code","1860b9df":"code","a8b1778b":"code","a3273077":"code","d9fddb04":"code","c8825a8a":"code","1790c660":"code","222223ab":"code","c7ca0ee9":"code","5d6c8392":"code","0de65667":"markdown","f5cdc26d":"markdown","e701eff1":"markdown","3399b995":"markdown","8347f0df":"markdown","1272f7e4":"markdown","22afb184":"markdown","d0adcd86":"markdown","18bd8942":"markdown","9b6643cb":"markdown"},"source":{"91fd5512":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\npd.set_option('max_rows', 10)","2e63b456":"df = pd.read_csv(\"..\/input\/ex2data1.txt\",header=None)\ndf.head()","1860b9df":"df.plot.scatter(x=0,y=1,c=df[2].map({0:'b', 1:'r'}))","a8b1778b":"def featureNormalize(X):\n    (m,n) = X.shape\n    X_norm = X\n    mu = np.zeros(n);\n    sigma = np.zeros(n);\n\n    for i in range(n):\n        \n        mu[i] = np.mean(X[:,i])\n        sigma[i] = np.std(X[:,i])\n\n        X_norm[:,i] = (X_norm[:,i]-mu[i])\/sigma[i]\n        \n    return X_norm","a3273077":"X_data = df.iloc[:,0:2].values\ny = df.iloc[:,2].values\n\nX_data = featureNormalize(X_data)\n\nones = np.ones(X_data.shape[0])\nX = np.c_[X_data,ones]","d9fddb04":"def logistic(X,theta):    \n    linear = np.dot(X,theta)\n    return 1\/(1+np.exp(-linear))","c8825a8a":"def computeCost(X, y, theta):\n    J = -np.dot(y.T,np.log(logistic(X,theta))) - np.dot((1-y).T,np.log(1-logistic(X,theta)))\n    return J\/len(y);","1790c660":"def gradientDescent(X, y, theta, alpha, num_iters):\n    m = len(y)\n    J_history = np.zeros(num_iters);\n\n    theta_len = len(theta);\n\n    #\u8fed\u4ee3 num_iters \u6b21\n    for num_iter in range(num_iters):\n        theta = theta - (alpha\/m)*np.dot(X.T,(logistic(X,theta).reshape(-1)-y))\n        J_history[num_iter] = computeCost(X, y, theta)\n        \n    return theta, J_history","222223ab":"alpha = 0.01\nnum_iters = 400\ntheta = np.zeros(3)\n\ntheta, J_history = gradientDescent(X, y, theta, alpha, num_iters)\nplt.plot(J_history)","c7ca0ee9":"y_pred = logistic(X,theta)\ny_pred[y_pred >= 0.5] = 1\ny_pred[y_pred < 0.5] = 0\nplt.scatter(X[y_pred==0][:,0], X[y_pred==0][:,1], alpha=.8, color='navy')\nplt.scatter(X[y_pred==1][:,0], X[y_pred==1][:,1],alpha=.8, color='turquoise')","5d6c8392":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(C=1000.0, random_state=0)\nlr.fit(df.iloc[:,:1].values, df.iloc[:,2].values)","0de65667":"# \u4f7f\u7528sklearn\u5b8c\u6210\u5bf9\u6570\u51e0\u7387\u56de\u5f52","f5cdc26d":"\u5f52\u4e00\u5316\u6570\u636e","e701eff1":"# \u6570\u636e\u9884\u5904\u7406","3399b995":"\u9996\u5148\u5b9e\u73b0logistic\u51fd\u6570","8347f0df":"\u4e3a\u4e86\u628ab\u878d\u5165\u5230theta\u4e2d,\u6240\u4ee5\u7ed9X\u589e\u52a0\u4e00\u52171","1272f7e4":"\u8ba1\u7b97\u4ee3\u4ef7\u51fd\u6570","22afb184":"\u9884\u6d4b,\u5e76\u7ed8\u5236\u9884\u6d4b\u7684\u7ed3\u679c","d0adcd86":"\u68af\u5ea6\u4e0b\u964d","18bd8942":"\u914d\u5957\u6587\u7ae0\u89c1[\u5bf9\u6570\u51e0\u7387\u56de\u5f52](https:\/\/drivingc.com\/p\/5b45b1ab2392ec599b4d3d26)","9b6643cb":"# \u4f7f\u7528\u68af\u5ea6\u4e0b\u964d\u5b9e\u73b0\u5bf9\u6570\u51e0\u7387\u56de\u5f52"}}