{"cell_type":{"185f5fd7":"code","23ba78cc":"code","ecadbada":"code","2e7cd872":"code","92bda641":"code","a35acc6a":"code","eeb3bf09":"code","ca400d8e":"code","a7aab419":"code","db61b2e6":"code","96140ec1":"code","83928ec0":"code","ad91f2dc":"code","e96762bf":"code","416d9cf0":"code","39b135e2":"code","04cf937b":"code","1d713bbb":"code","3743ea72":"code","d58eeaa1":"code","33344f01":"code","e1dc2795":"code","86c34333":"code","fe4a696f":"code","ec71a6ea":"code","95c7b9ac":"code","42d6fd32":"code","03a2e9bd":"code","ac5b1912":"code","f9469c1e":"code","f965af98":"code","ecdc87ee":"code","0e4291ab":"code","86e5b0d7":"code","e11f1082":"code","8ca62a56":"code","6ae937ab":"code","b623be9d":"code","8ae4f004":"code","3daa199a":"code","c4f4558f":"code","2d3f5edd":"code","f59101ba":"code","187658cb":"code","5d43ed4b":"markdown","f860b87b":"markdown","1ef21374":"markdown","8d24db12":"markdown","0a528711":"markdown","61f830f6":"markdown"},"source":{"185f5fd7":"!pip install xfeat","23ba78cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ecadbada":"# \u65e5\u4ed8\u578b\u306f\u8aad\u307f\u8fbc\u3080\u524d\u306bparse_date\u3067datetime\u578b\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n# \u3082\u3061\u308d\u3093\u5f8c\u304b\u3089\u306e\u5909\u63db\u3082\u53ef\u80fd\u3067\u3059\u304c\u3002\ndf_train = pd.read_csv('..\/input\/machine-learning-challenge-osaka-2020\/train.csv', parse_dates=['Original_Release_Date', 'Current_Version_Release_Date'], index_col=0)\ndf_test = pd.read_csv('..\/input\/machine-learning-challenge-osaka-2020\/test.csv', parse_dates=['Original_Release_Date', 'Current_Version_Release_Date'], index_col=0)","2e7cd872":"review_train = pd.read_csv('..\/input\/machine-learning-challenge-osaka-2020\/review_train.csv')\nreview_test = pd.read_csv('..\/input\/machine-learning-challenge-osaka-2020\/review_test.csv')","92bda641":"# \u30ec\u30d3\u30e5\u30fc\u30c7\u30fc\u30bf\u3082head\u3092\u307f\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u304b\nreview_train.head()","a35acc6a":"review_test.head()","eeb3bf09":"# \u8aac\u660e\u5909\u6570\uff08ML\u3067\u306f\u7279\u5fb4\u91cf\u3068\u3088\u3076\u3053\u3068\u304c\u591a\u3044\uff09\u304c13\u500b\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u5909\u6570\u304c1\u500b\u3042\u308a\u307e\u3059\ndf_train.shape ,df_test.shape","ca400d8e":"y_train = df_train.Average_Rating_For_Version\nX_train = df_train.drop(['Average_Rating_For_Version'], axis=1)\nX_test = df_test.copy()","a7aab419":"# \u507d\u88c5\u6b20\u640d\u5024\u306b\u5bfe\u51e6\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u306f\u5834\u5408\u306b\u3088\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u7a7a\u6b04\u3067\u7f6e\u63db\u3057\u3066\u307f\u307e\u3059\u3002\nX_train.replace({-1:np.nan}, inplace=True)\nX_test.replace({-1:np.nan}, inplace=True)","db61b2e6":"# \u5bfe\u8c61\u5e74\u9f62\u306f\u672b\u5c3e\u306e\"+\"\u3068\u9664\u3044\u3066\u6570\u5024\u3068\u3059\u308b\u306e\u304c\u672c\u6765\u306e\u5e8f\u5217\u306b\u57fa\u3065\u3044\u3066\u6271\u3048\u3066\u826f\u3044\u306f\u305a\u306b\u601d\u3048\u307e\u3059\u306d\u3002\nX_train.Age_Rating = X_train.Age_Rating.apply(lambda x: int(x[:-1]))\nX_test.Age_Rating = X_test.Age_Rating.apply(lambda x: int(x[:-1]))","96140ec1":"# \u6570\u5024\u3067\u3082datetime\u3067\u3082\u8aad\u3081\u306a\u304b\u3063\u305f\u7279\u5fb4\u91cf\u306b\u3064\u3044\u3066\u3001\u30e6\u30cb\u30fc\u30af\u6570\u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306f36773\u884c\u3067\u3057\u305f\u304b\u3089\u3001Developer_Name\u3001IOS_Store_Url\u3001Description\u306f\u30e6\u30cb\u30fc\u30af\u306b\u8fd1\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n# \u305d\u306e\u4ed6\u306f\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3068\u3057\u3066\u6271\u3048\u305d\u3046\u3067\u3059\u3002\n\ncol_cat = []\ncol_other = []\n\nfor col in X_train.columns:\n    if X_train[col].dtype=='object':\n        print('%s: %d unique values'%(col, X_train[col].nunique()))\n        \n        if len(X_train)\/X_train[col].nunique()>2:\n            col_cat.append(col)\n        else:\n            col_other.append(col)","83928ec0":"# \u3053\u3053\u3067\u306f\u5927\u96d1\u628a\u3067\u3059\u304c\u3001\u30e6\u30cb\u30fc\u30af\u6570\u304c\u30c7\u30fc\u30bf\u7dcf\u6570\u306e\u534a\u5206\u4ee5\u4e0b\u306e\u5834\u5408\u306b\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3068\u6271\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\ncol_cat","ad91f2dc":"# \u305d\u308c\u4ee5\u5916\u3067\u3059\u3002\ncol_other","e96762bf":"from xfeat import TargetEncoder\nfrom sklearn.model_selection import KFold # out-of-fold\u3068\u3044\u3046\u81ea\u5206\u81ea\u8eab\u306e\u884c\u3092\u898b\u306a\u3044\u3067\u4e92\u3044\u9055\u3044\u306b\u96c6\u8a08\u3059\u308b\u624b\u6cd5\u3092\u7528\u3044\u308b\u306e\u3067KFold\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002","416d9cf0":"# Target Encoding\u3067\u306f\u305d\u306e\u30ab\u30c6\u30b4\u30ea\u5024\u3092\u3068\u3063\u305f\u969b\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5e73\u5747\u5024\u306b\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002\n# \u3053\u308c\u306f\u3064\u307e\u308a\u671f\u5f85\u5024\u3067\u3059\u304b\u3089\u3001\u4f55\u306e\u610f\u5473\u3082\u306a\u3044\u80cc\u756a\u53f7\u3092\u632f\u308bOrdinal Encoding\u3088\u308a\u3082\u5408\u7406\u6027\u304c\u3042\u308b\u3088\u3046\u306b\u601d\u3048\u307e\u3059\u3088\u306d\u3002\n\n# \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u60c5\u5831\u3092\u6271\u3046\u306e\u3067\u3001\u81ea\u5206\u81ea\u8eab\u306e\u884c\u306e\u7b54\u3048\u3092\u898b\u306a\u3044\u3067\u4ed6\u306e\u884c\u3092\u7528\u3044\u3066\u96c6\u8a08\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n# \u3053\u308c\u3092out-of-fold(oof)\u3068\u3088\u3073\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3069\u306e\u3088\u3046\u306boof\u3092\u884c\u3046\u304b\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n# \u3053\u306e\u70b9\u306f\u7cbe\u5ea6\u8a55\u4fa1\u7cfb\u306e\u69cb\u7bc9\u306b\u304a\u3051\u308b\u4ea4\u5dee\u691c\u5b9a\u3068\u6df1\u3044\u95a2\u308f\u308a\u304c\u3042\u308a\u307e\u3059\u3002\nX_train = pd.concat([X_train, y_train], axis=1)\n\nn_fold = 5\nkf = KFold(n_splits=n_fold, shuffle=True, random_state=71)\n\nencoder = TargetEncoder(input_cols=col_cat, \n                        target_col='Average_Rating_For_Version', \n                        fold=kf,\n                        output_suffix='_te')\n\nX_train = encoder.fit_transform(X_train) # \u307e\u305a\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u5404\u30ab\u30c6\u30b4\u30ea\u5024\u306b\u5bfe\u3059\u308b\u5e73\u5747\u30bf\u30fc\u30b2\u30c3\u30c8\u7387\u3092\u8a08\u7b97\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u307e\u305f\u305d\u306e\u7d50\u679c\u3092\u7528\u3044\u3066\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u5909\u63db\u3057\u307e\u3059\u3002\nX_test = encoder.transform(X_test) # \u540c\u69d8\u306b\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3082\u884c\u3044\u307e\u3059\u3002\u3053\u306efit\u3068transform, fit_transform\u306f\u69d8\u3005\u306a\u51e6\u7406\u306b\u304a\u3044\u3066\u5171\u901a\u3057\u3066\u7528\u3044\u308b\u983b\u51fa\u306asklearn\u306e\u66f8\u304d\u65b9\u306b\u306a\u308a\u307e\u3059\u3002\n\nX_train.drop(['Average_Rating_For_Version'], axis=1, inplace=True)","39b135e2":"# \u53f3\u7aef\u306b\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f\u5024\u304c\u8ffd\u8a18\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\nX_train.head()","04cf937b":"X_test.head()","1d713bbb":"# \u3055\u3089\u306b\u69d8\u3005\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u884c\u3063\u3066\u3082\u826f\u3044\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u3053\u3053\u307e\u3067\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n# \u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5143\u306e\u751f\u306e\u30ab\u30c6\u30b4\u30ea\u7279\u5fb4\u91cf\u3092\u9664\u3044\u3066\u304a\u304d\u307e\u3059\u3002\nX_train.drop(col_cat, axis=1, inplace=True)\nX_test.drop(col_cat, axis=1, inplace=True)","3743ea72":"# \u30c6\u30ad\u30b9\u30c8\u7279\u5fb4\u91cf\u3092\u4e00\u65e6\u5206\u96e2\u3057\u307e\u3059\u3002\nTXT_train = X_train[col_other].fillna('#') # \u3068\u540c\u6642\u306b\u6b20\u640d\u5024\u3092\u305d\u308c\u3068\u308f\u304b\u308b\u8a18\u53f7\u3067\u57cb\u3081\u3066\u304a\u304d\u307e\u3059\u3002\nTXT_test = X_test[col_other].fillna('#')\n\nX_train.drop(col_other, axis=1, inplace=True)\nX_test.drop(col_other, axis=1, inplace=True)","d58eeaa1":"# \u3053\u3053\u3067\u306f\u30aa\u30ea\u30b8\u30ca\u30eb\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u30ea\u30ea\u30fc\u30b9\u65e5\u3068\u73fe\u884c\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u30ea\u30ea\u30fc\u30b9\u65e5\u306e\u5dee\u5206\u3092\u3068\u3063\u3066\u307f\u307e\u3057\u3087\u3046\nX_train['date_diff'] = (X_train.Current_Version_Release_Date - X_train.Original_Release_Date)\/pd.Timedelta(days=1)\nX_test['date_diff'] = (X_test.Current_Version_Release_Date - X_test.Original_Release_Date)\/pd.Timedelta(days=1)","33344f01":"# \u3064\u3044\u3067\u306b\u30ea\u30ea\u30fc\u30b9\u65e5\u304b\u3089\u306e\u7d4c\u904e\u65e5\u6570\u3067\u3053\u308c\u307e\u3067\u306e\u7dcf\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u6570\u3092\u5272\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u304b\u3002\n# \uff11\u65e5\u3042\u305f\u308a\u306e\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u6570\u3067\u3059\u304b\u3089\u3001\u3082\u3057\u304b\u3057\u305f\u3089\u6ce8\u76ee\u5ea6\u3068\u304b\u52e2\u3044\u307f\u305f\u3044\u306a\u6307\u6a19\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n# \u3053\u306e\u3088\u3046\u306b\u30c7\u30fc\u30bf\u306b\u8272\u3005\u60f3\u50cf\u3092\u5de1\u3089\u305b\u3066\u3001\u3069\u3093\u306a\u5909\u6570\u3092\u4f5c\u3063\u305f\u3089\u52b9\u304d\u305d\u3046\u304b\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n# \u3053\u306e\u3088\u3046\u306b\u65b0\u3057\u3044\u30ab\u30e9\u30e0\u540d\u3092\u6307\u5b9a\u3057\u3066\u4ee3\u5165\u3059\u308b\u3053\u3068\u3067\u65b0\u3057\u3044\u7279\u5fb4\u91cf\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u7c21\u5358\u3067\u3059\u306d\uff01\nX_train['Total_Number_of_Ratings_per_day'] = X_train['Total_Number_of_Ratings'] \/ (X_train['date_diff']+1) # \u30bc\u30ed\u5272\u9632\u6b62\u3067\uff11\u3092\u8db3\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nX_test['Total_Number_of_Ratings_per_day'] = X_test['Total_Number_of_Ratings'] \/ (X_test['date_diff']+1)","e1dc2795":"# \u4ed6\u306b\u3082\u8272\u3005\u4f7f\u3048\u305d\u3046\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306a\u306e\u3067\u3053\u308c\u304f\u3089\u3044\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n# \u3082\u3046\u4f7f\u308f\u306a\u3044\u306e\u3067\u9664\u3044\u3066\u304a\u304d\u307e\u3059\nX_train.drop(['Current_Version_Release_Date', 'Original_Release_Date'], axis=1, inplace=True)\nX_test.drop(['Current_Version_Release_Date', 'Original_Release_Date'], axis=1, inplace=True)","86c34333":"# \u30c6\u30ad\u30b9\u30c8\u306e\u307e\u307e\u3067\u306f\u96c6\u8a08\u3057\u3065\u3089\u3044\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u307e\u305a\u4f55\u3089\u304b\u306e\u7c21\u5358\u306a\u7279\u5fb4\u91cf\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\nreview_train['review_len'] = review_train.review.fillna('#').apply(lambda x: len(x)) # \u6b20\u640d\u5024\u3092\u9069\u5f53\u306b#\u3067\u7a74\u57cb\u3081\u3057\u305f\u4e0a\u3067\u3001\u6587\u7ae0\u9577\u3055\uff08\u6587\u5b57\u6570\u30ab\u30a6\u30f3\u30c8\uff09\u3092\u3057\u3066\u3044\u307e\u3059\u3002\nreview_test['review_len'] = review_test.review.fillna('#').apply(lambda x: len(x))\n\nreview_train['review_wordcount'] = review_train.review.fillna('#').apply(lambda x: len(x.split(' '))) # \u540c\u69d8\u306b\u7a74\u57cb\u3081\u3057\u3066\u3001\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u30ea\u30b9\u30c8\u306b\u3057\u305f\u4e0a\u3067\u8981\u7d20\u6570\uff08\u5358\u8a9e\u6570\uff09\u3092\u6570\u3048\u3066\u307e\u3059\u3002\nreview_test['review_wordcount'] = review_test.review.fillna('#').apply(lambda x: len(x.split(' ')))","fe4a696f":"cols = ['vote_count', 'review_len', 'review_wordcount'] # \u4eca\u56de\u306fvote_count\u306b\u52a0\u3048\u3066\u3001review\u306e\u6587\u7ae0\u9577\u3055\u3068\u5358\u8a9e\u6570\u3092\u7528\u3044\u3066\u307f\u307e\u3059\u3002\n\nsummary_train = review_train.groupby(['IOS_App_Id'], as_index=False)[cols].agg(['mean', 'min', 'max', 'std']) # ID\u3054\u3068\u306b\u5e73\u5747\u5024\u3001\u6700\u5c0f\u5024\u3001\u6700\u5927\u5024\u3001\u6a19\u6e96\u504f\u5dee\u3092\u96c6\u8a08\u3057\u307e\u3059\nsummary_train.columns = [col0+'_'+col1 for col0, col1 in summary_train.columns.to_flat_index()] # \u30ab\u30e9\u30e0\u540d\u304c\u968e\u5c64\u69cb\u9020\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u5358\u5c64\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nsummary_test = review_test.groupby(['IOS_App_Id'], as_index=False)[cols].agg(['mean', 'min', 'max', 'std'])\nsummary_test.columns = [col0+'_'+col1 for col0, col1 in summary_test.columns.to_flat_index()]","ec71a6ea":"summary_train","95c7b9ac":"summary_test","42d6fd32":"X_train = X_train.merge(summary_train, on='IOS_App_Id', how='left')# \u30e1\u30a4\u30f3\u30c6\u30fc\u30d6\u30eb\u306b\u6a2a\u6301\u3061\u3067\u304f\u3063\u3064\u3051\u307e\u3059\nX_test = X_test.merge(summary_test, on='IOS_App_Id', how='left')","03a2e9bd":"# \u5f8c\u3005\u306e\u3053\u3068\u3092\u8003\u3048\u3066\u3001pandas\u306eDataFrame\u304b\u3089numpy\u306e\u914d\u5217\u306b\u5909\u63db\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nX_train = X_train.values\nX_test = X_test.values","ac5b1912":"# TF-IDF\u3067\u306f\u30c6\u30ad\u30b9\u30c8\u5185\u306e\u5358\u8a9e\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u3001\uff08\u30ab\u30e9\u30e0\u65b9\u5411\u306e\u6b63\u898f\u5316\u3092\u884c\u3063\u305f\u4e0a\u3067\uff09\u7279\u5fb4\u91cf\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\nfrom sklearn.feature_extraction.text import TfidfVectorizer","f9469c1e":"# \u624b\u9806\u304c\u308f\u304b\u308b\u3088\u3046\u306b\u3001\u4eca\u56de\u306f\u4e00\u3064\u305a\u3064\u9806\u756a\u306b\u3084\u3063\u3066\u307f\u307e\u3059\u3002\u307e\u305a\u30bf\u30a4\u30c8\u30eb\u304b\u3089\u3084\u3063\u3066\u307f\u307e\u3059\u3002\ntfidf = TfidfVectorizer(max_features=10000, ngram_range=(1,3))\n\nTFIDF_train = tfidf.fit_transform(TXT_train['Title']) # \u30c6\u30ad\u30b9\u30c8\u304b\u3089\u306e\u7279\u5fb4\u62bd\u51fa\u3082\u3084\u308a\u65b9\u306f\u304a\u99b4\u67d3\u307f\u306efit, fit_transform, transform\u3067\u3059\u306d\u3002\nTFIDF_test = tfidf.transform(TXT_test['Title'])","f965af98":"# \u7d50\u679c\u306f\u758e\u884c\u5217\u3067\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u5358\u8a9e\u306e\u51fa\u73fe\u983b\u5ea6\u30d9\u30af\u30c8\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3068\u975e\u5e38\u306b\u30ef\u30a4\u30c9\u3067\u30b9\u30d1\u30fc\u30b9\uff08\u307b\u3068\u3093\u3069\u30bc\u30ed\u3067\u4e00\u90e8\u3060\u3051\u5024\u306e\u5165\u3063\u3066\u3044\u308b\u3059\u3054\u3044\u6a2a\u9577\u306e\u30d9\u30af\u30c8\u30eb\uff09\n# \u306b\u306a\u308b\u305f\u3081\u3067\u3059\u306d\u3002\n# \u758e\u884c\u5217\u3067\u306f\u5024\u306e\u5165\u3063\u3066\u3044\u308b\u30bb\u30eb\u306e\u4f4d\u7f6e\u3068\u305d\u306e\u5024\u3092\u4fdd\u6301\u3059\u308b\u3053\u3068\u3067\u30e1\u30e2\u30ea\u30d5\u30ec\u30f3\u30c9\u30ea\u30fc\u3067\u3059\u3002\n# \u758e\u884c\u5217\u306e\u6301\u3061\u65b9\u306b\u3082\u8907\u6570\u901a\u308a\u306e\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u8abf\u3079\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nTFIDF_train","ecdc87ee":"# \u5bc6\u884c\u5217\u306b\u5909\u63db\u3057\u3066\u307f\u308b\u3068\u3001\u307b\u3068\u3093\u3069\u30bc\u30ed\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\nTFIDF_train.todense()","0e4291ab":"# Title\u304b\u3089\u62bd\u51fa\u3057\u305fTFIDF\u7279\u5fb4\u91cf\u3092X_train, X_test\u672c\u4f53\u306b\u6a2a\u6301\u3061\u3067\u7d50\u5408\u3055\u305b\u307e\u3057\u3087\u3046\u3002\n\nimport scipy as sp\nX_train = sp.sparse.hstack([X_train, TFIDF_train]) # \u758e\u884c\u5217\u306fscipy\u3067\u6271\u3048\u307e\u3059\u3002hstack\u306fhorizontal stack\u306e\u7565\u3067\u6a2a\u6301\u3061\u7d50\u5408\u3067\u3059\u306d\u3002\nX_test = sp.sparse.hstack([X_test, TFIDF_test])","86e5b0d7":"# \u540c\u69d8\u306b\u4eca\u5ea6\u306fDescription\u3067\u3059\u3002\ntfidf = TfidfVectorizer(max_features=10000, ngram_range=(1,3))\n\nTFIDF_train = tfidf.fit_transform(TXT_train['Description']) # \u30c6\u30ad\u30b9\u30c8\u304b\u3089\u306e\u7279\u5fb4\u62bd\u51fa\u3082\u3084\u308a\u65b9\u306f\u304a\u99b4\u67d3\u307f\u306efit, fit_transform, transform\u3067\u3059\u306d\u3002\nTFIDF_test = tfidf.transform(TXT_test['Description'])\n\nX_train = sp.sparse.hstack([X_train, TFIDF_train]) # \u307e\u305f\u6a2a\u6301\u3061\u3067\u4ed8\u3051\u8db3\u3057\u307e\u3059\nX_test = sp.sparse.hstack([X_test, TFIDF_test])","e11f1082":"# \u4ea4\u5dee\u691c\u5b9a\u3067\u884c\u65b9\u5411\u306e\u30b9\u30e9\u30a4\u30b9\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u758e\u884c\u5217\u306e\u6301\u3061\u65b9\u3092CSR\u306b\u5909\u3048\u3066\u304a\u304d\u307e\u3059\nX_train = X_train.tocsr()\nX_test = X_test.tocsr()\n\ny_train = y_train.values","8ca62a56":"# \u3068\u308a\u3042\u3048\u305a\u306f\u3053\u3053\u307e\u3067\u3067\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u3092\u3057\u3066\u307f\u307e\u3057\u3087\u3046","6ae937ab":"# \u6b63\u898f\u5316\u30b8\u30cb\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n# \u305d\u306e\u4ed6\u3001\u30e1\u30b8\u30e3\u30fc\u306a\u3082\u306e\u3067\u3042\u308c\u3070sklearn\u306b\u6e96\u5099\u3055\u308c\u3066\u3044\u307e\u3059\u3002\ndef gini(actual, pred, cmpcol = 0, sortcol = 1):\n    assert( len(actual) == len(pred) )\n    all = np.asarray(np.c_[ actual, pred, np.arange(len(actual)) ], dtype=np.float)\n    all = all[ np.lexsort((all[:,2], -1*all[:,1])) ]\n    totalLosses = all[:,0].sum()\n    giniSum = all[:,0].cumsum().sum() \/ totalLosses\n    \n    giniSum -= (len(actual) + 1) \/ 2.\n    return giniSum \/ len(actual)\n \ndef gini_normalized(a, p):\n    return gini(a, p) \/ gini(a, a)","b623be9d":"from lightgbm import LGBMRegressor # \u3053\u3053\u3067\u306f\u3001LightGBM\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\nfrom sklearn.model_selection import train_test_split","8ae4f004":"# k\u5206\u5272\u4ea4\u5dee\u691c\u5b9a\u306e\u5206\u5272\u8a2d\u5b9a\u306f\u3001TargetEncoder\u3067\u7528\u3044\u305f\u3082\u306e\u3068\u540c\u3058\u3082\u306e\u3092\u4f7f\u3044\u56de\u3057\u307e\u3059\u3002\nscores = []\ny_pred_train = np.zeros(X_train.shape[0]) # \u5b66\u7fd2\u30c7\u30fc\u30bf\u5168\u4f53\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u7528\u610f\u3057\u3066\u304a\u304d\u307e\u3059\u3002\ny_pred_test = np.zeros(X_test.shape[0]) # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u7528\u610f\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nfor i, (train_ix, val_ix) in enumerate(kf.split(X_train, y_train)):\n    X_train_, y_train_ = X_train[train_ix], y_train[train_ix]\n    X_val, y_val = X_train[val_ix], y_train[val_ix]\n    \n    # \u5b66\u7fd2\u5668\u3092\u521d\u671f\u5316\u3057\u307e\u3059\n    model = LGBMRegressor(learning_rate=0.03, n_estimators=1500, random_state=71)\n    \n    # \u3053\u3053\u3067\u306fRMSE\u3092\u640d\u5931\u95a2\u6570\u304a\u3088\u3073\u8a55\u4fa1\u6307\u6a19\u3068\u3057\u3066\u300130\u56de\u30b9\u30b3\u30a2\u304c\u6539\u5584\u3057\u306a\u304b\u3063\u305f\u3089\u5b66\u7fd2\u3092\u6253\u3061\u5207\u308bearly stopping\u3092\u884c\u3063\u3066\u3044\u307e\u3059\n    model.fit(X_train_, y_train_, eval_set=[(X_val, y_val)], eval_metric='rmse', early_stopping_rounds=30)\n    \n    # \u691c\u5b9a\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\n    y_pred_val = model.predict(X_val)\n    \n    # \u691c\u5b9a\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\u3092\u7528\u610f\u3057\u3066\u304a\u3044\u305f\u914d\u5217\u306e\u5bfe\u5fdc\u3059\u308b\u884c\u306b\u4ee3\u5165\u3057\u307e\u3059\n    y_pred_train[val_ix] = y_pred_val\n    \n    # \u691c\u5b9a\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u6b63\u898f\u5316\u30b8\u30cb\u30b9\u30b3\u30a2\u3092\u7b97\u51fa\u3057\u307e\u3059\n    score = gini_normalized(y_val, y_pred_val)\n    scores.append(score) # \u7528\u610f\u3057\u3066\u304a\u3044\u305f\u30ea\u30b9\u30c8\u306b\u52a0\u3048\u307e\u3059\n    print('Fold%d\u306e\u6b63\u898f\u5316\u30b8\u30cb\u306f%f\u3067\u3059\u3002'%(i, score))\n    \n    # \u3064\u3044\u3067\u306b\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u3092\u884c\u3044\u3001\u7528\u610f\u3057\u3066\u304a\u3044\u305f\u914d\u5217\u306b\u8db3\u3057\u8fbc\u307f\u307e\u3059\n    # \u7d50\u679c\u3068\u3057\u3066\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\u306f\u5404fold\u3067\u69cb\u7bc9\u3057\u305f\u30e2\u30c7\u30eb\u306b\u3088\u308b\u4e88\u6e2c\u5024\u306e\u5e73\u5747\u5024\u306b\u306a\u308a\u307e\u3059\uff08CV Averaging\uff09\n    # \u3053\u308c\u306f\u5168\u30c7\u30fc\u30bf\u3067\u306e\u518d\u5b66\u7fd2\u306e\u624b\u9593\u3092\u7701\u304f\u3068\u3068\u3082\u306b\u3001\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u52b9\u679c\u306b\u3088\u308b\u7cbe\u5ea6\u5411\u4e0a\u3082\u671b\u3081\u307e\u3059\u3002\n    y_pred_test += model.predict(X_test)\/n_fold","3daa199a":"# \u5404fold\u3067\u306e\u6b63\u898f\u5316\u30b8\u30cb\u30b9\u30b3\u30a2\nscores","c4f4558f":"# \u5e73\u5747\u5024\u00b1\u6a19\u6e96\u504f\u5dee\n# \u3061\u3087\u3044\u4e0a\u304c\u308a\u307e\u3057\u305f\u304c\u3001\u307e\u3060\u307e\u3060\u5168\u7136\u8db3\u308a\u306a\u3044\u6c17\u304c\u3057\u307e\u3059\u306d\uff01\n# \u30ec\u30d3\u30e5\u30fc\u30c7\u30fc\u30bf\u306b\u306f\u3082\u3063\u3068\u6709\u7528\u306a\u60c5\u5831\u304c\u5185\u5728\u3057\u3066\u3044\u308b\u306f\u305a\u306a\u306e\u3067\u3059\u304c\u3001\u305d\u3053\u306b\u542b\u307e\u308c\u308b\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u5341\u5206\u4f7f\u3048\u3066\u3044\u306a\u3044\u6c17\u304c\u3057\u307e\u3059\u3057\u3001\n# \u4f55\u3088\u308a\u6700\u3082\u6709\u7528\u305d\u3046\u306arating\u304c\u76f4\u63a5\u52b9\u304d\u305d\u3046\u306a\u306e\u306breview_test\u306b\u542b\u307e\u308c\u306a\u3044\u3068\u3044\u3046\u306e\u304c\u60a9\u307e\u3057\u3044\u3067\u3059\u306d\u3002\u6b21\u56de\u306f\u305d\u306e\u8fba\u308a\u306e\u653b\u7565\u3092\u59cb\u3081\u307e\u3057\u3087\u3046\uff01\nscores = np.array(scores)\ngini_mean = scores.mean()\ngini_std = scores.std()\nprint('\u6b63\u898f\u5316\u30b8\u30cb\u30b9\u30b3\u30a2\uff1a %f \u00b1  %f'%(gini_mean, gini_std))","2d3f5edd":"# \u63d0\u51fa\u7528\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u3057\u307e\u3059\u3002\nsubmission = pd.read_csv('..\/input\/machine-learning-challenge-osaka-2020\/sample_submission.csv', index_col=0)\nsubmission.Average_Rating_For_Version = y_pred_test","f59101ba":"# csv\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059\nsubmission.to_csv('submission.csv')","187658cb":"submission","5d43ed4b":"\u4eca\u56de\u306f\u30b5\u30d6\u30c6\u30fc\u30d6\u30eb\u3092\u96c6\u8a08\uff08groupby&agg\uff09\u3057\u3066\u30e1\u30a4\u30f3\u30c6\u30fc\u30d6\u30eb\u306b\u30de\u30fc\u30b8\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \n\n\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3067\u4fbf\u5229\u306a[xfeat](https:\/\/github.com\/pfnet-research\/xfeat)\u3092pip install\u3057\u3066\u304a\u304d\u307e\u3059\u3002","f860b87b":"## \u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u304b\u3089\u306e\u7279\u5fb4\u62bd\u51fa\n\u3044\u3088\u3044\u3088\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6271\u3063\u3066\u307f\u307e\u3057\u3087\u3046\uff01\n\u4eca\u56de\u306f[TF-IDF](https:\/\/www.kaggle.com\/edchen\/tf-idf)\u3068\u3044\u3046\u624b\u6cd5\u3092\u7528\u3044\u3066\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u304b\u3089\u7279\u5fb4\u91cf\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002","1ef21374":"## \u30ab\u30c6\u30b4\u30ea\u7279\u5fb4\u91cf\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","8d24db12":"## k\u5206\u5272\u4ea4\u5dee\u691c\u5b9a\n\u3055\u3066\u3001\u524d\u3005\u56de\u307e\u3067\u306ftrain_test_split\u3067\u30e9\u30f3\u30c0\u30e0\u306b\u4e00\u5b9a\u5272\u5408\uff08\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u306f\uff13\u5272\uff09\u3092\u5207\u308a\u51fa\u3057\u3066\u7cbe\u5ea6\u8a55\u4fa1\u306b\u7528\u3044\u3066\u304d\u307e\u3057\u305f\u3002\n\u3057\u304b\u3057\u3001\u7686\u3055\u3093\u306e\u666e\u6bb5\u306e\u5b9f\u9a13\u3067\u3082\u305d\u3046\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001n=1\u306e\u8a55\u4fa1\u3068\u3044\u3046\u306e\u306f\u3044\u304b\u306b\u3082\u5fc3\u8a31\u306a\u3044\u3068\u611f\u3058\u3089\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u306en\u6570\u3092\u5897\u3084\u3057\u3066\u7cbe\u5ea6\u8a55\u4fa1\u3092\u3059\u308b\u65b9\u6cd5\u3068\u3044\u3046\u306e\u306f\u3088\u304f\u77e5\u3089\u308c\u3066\u304a\u308a\u3001k\u5206\u5272\u4ea4\u5dee\u691c\u5b9a\u304c\u7528\u3044\u3089\u308c\u307e\u3059\u3001\u8a73\u7d30\u306f[\u3053\u3061\u3089](https:\/\/www.datarobot.com\/jp\/wiki\/cross-validation\/)\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044","0a528711":"\u304a\u75b2\u308c\u69d8\u3067\u3057\u305f\u3002\u6b21\u56de\u306f\u30ec\u30d3\u30e5\u30fc\u30c7\u30fc\u30bf\u306e\u66f4\u306a\u308b\u6d3b\u7528\u306b\u9032\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n1. \u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u304b\u3089\u306e\u7279\u5fb4\u62bd\u51fa\u3092\u884c\u3044\u6709\u52b9\u6d3b\u7528\u3059\u308b\n2. \u8907\u6570\u30c6\u30fc\u30d6\u30eb\u3092\u7d50\u5408\u3057\u3066\u6709\u52b9\u6d3b\u7528\u3059\u308b\uff08\u4eca\u56de\u306e\u5185\u5bb9\uff09\n3. \u6b20\u3051\u3066\u3044\u308b\u30ab\u30e9\u30e0\u306b\u3064\u3044\u3066\u3001\u4e88\u6e2c\u5024\u3092\u7279\u5fb4\u91cf\u3068\u3059\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\uff08meta-feature, \u767a\u5c55\u7de8\uff09","61f830f6":"## [New!] \u30ec\u30d3\u30e5\u30fc\u30c7\u30fc\u30bf\u306e\u96c6\u7d04\u3068\u30de\u30fc\u30b8\n\u3055\u3066\u3001\u4eca\u56de\u304b\u3089\u30ec\u30d3\u30e5\u30fc\u30c7\u30fc\u30bf\u3082\u53d6\u308a\u6271\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u96e3\u3057\u3044\u70b9\u306f\u30e1\u30a4\u30f3\u30c6\u30fc\u30d6\u30eb\u3068\u30ec\u30d3\u30e5\u30fc\u30c7\u30fc\u30bf\u306fIOS_App_Id\u3067\u7d10\u3065\u3051\u3089\u308c\u308b\u3082\u306e\u306e\u3001\uff11\u5bfe\uff11\u3067\u306f\u306a\u304f\u3001\uff11\u5bfe\u591a\u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u5358\u7d14\u306b\u6a2a\u6301\u3061\u3067\u304f\u3063\u3064\u3051\u308c\u3070\u826f\u3044\u3068\u3044\u3046\u308f\u3051\u306b\u306f\u3044\u304b\u306a\u3044\u3068\u3044\u3046\u70b9\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\u4f55\u3089\u304b\u306e\u624b\u6bb5\u3067\u30c7\u30fc\u30bf\u306e\u7c92\u5ea6\u3092\u5408\u308f\u305b\u308b\u5fc5\u8981\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u5404IOS_App_Id\u3054\u3068\u306b\u69d8\u3005\u306a\u7d71\u8a08\u91cf\u3092\u96c6\u8a08\u3057\u3066\u304b\u3089\u30de\u30fc\u30b8\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002"}}