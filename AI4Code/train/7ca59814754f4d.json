{"cell_type":{"df53c285":"code","f131fa5e":"code","a4f7378d":"code","e962db6f":"code","90527c69":"code","30b8dcd1":"code","82a721c2":"code","83cb8ff4":"code","52aef994":"code","91ded39c":"code","9affb0d9":"code","3f8c1626":"code","fa3362bd":"code","3000fe85":"code","0809cec5":"code","9385ab84":"code","c20fe978":"code","b9dd23b1":"code","ce4cb29f":"code","9a49bf23":"code","73f068c9":"code","1f246387":"code","6ebd96b0":"code","6f31ea43":"code","265d6046":"code","634b32e7":"code","1784d0ed":"code","a51a807c":"code","bca8e621":"code","1cc8984f":"markdown","5ae2b947":"markdown","ee6327ef":"markdown","98c443a2":"markdown","97c640f7":"markdown","694d82ca":"markdown","bca0525b":"markdown","85a56f8b":"markdown","c4a3215c":"markdown","30f85444":"markdown","58cb28f4":"markdown"},"source":{"df53c285":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f131fa5e":"path = '\/kaggle\/input\/netflix-original-films-imdb-scores\/NetflixOriginals.csv'\ndf = pd.read_csv(path)\ndf.head()","a4f7378d":"print(df.info())\nprint('-'*40)\nprint(df.isnull().sum())","e962db6f":"f, axes = plt.subplots(1, 2, figsize=(18, 7))\nax = axes.ravel()\n\nsns.distplot(df['IMDB Score'], ax=ax[0])\nax[0].set_title('IMDB Score', fontsize=20)\nsns.boxplot(df['IMDB Score'], ax=ax[1])\n\nprint(df['IMDB Score'].describe())","90527c69":"f, axes = plt.subplots(1, 2, figsize=(18, 7))\nax = axes.ravel()\n\nsns.distplot(df['Runtime'], ax=ax[0])\nax[0].set_title('Runtime', fontsize=20)\nsns.boxplot(df['Runtime'], ax=ax[1])","30b8dcd1":"object_col = df.select_dtypes(['category', 'object', 'bool']).columns.to_list()\n\nfor col in object_col:\n    values = df[col].value_counts().values[:10]\n    index = df[col].value_counts().index[:10]\n    fig = px.pie(values=values,\n                labels=index,\n                names=index,\n                 title=col\n                )\n    fig.show()\n    print(f'Unique Values: {len(df[col].unique())}')\n    print(f'Missing Values: {df[col].isna().sum()}')","82a721c2":"df.rename({'IMDB Score': 'IMDB_score'}, inplace=True)\ndf.describe(include='O')","83cb8ff4":"x = df.pivot_table(index=['Genre'], values=['IMDB Score'], aggfunc=['mean', 'count'])\nx.columns = ['IMDB Score mean', 'IMDB Score count']\nx.sort_values(by='IMDB Score mean', ascending=False).head(10).style.background_gradient(cmap='Blues')","52aef994":"x.sort_values(by='IMDB Score mean', ascending=True).head(10).style.background_gradient(cmap='Blues')","91ded39c":"only_genre = df.Genre.value_counts()\nonly_genre = only_genre[only_genre == 1].index\n\nprint(f'Only 1 Gerne: {len(only_genre)}')\nprint(f'Toatl Gerne: {len(df.Genre.value_counts().index)}')","9affb0d9":"df_only_gerne = df[(df.Genre.isin(only_genre)) & (df['IMDB Score'] > df['IMDB Score'].median())]\nonly_genre_score = df_only_gerne['IMDB Score'].mean()\n\ndf_gerne = df[~df.Genre.isin(only_genre) & (df['IMDB Score'] > df['IMDB Score'].median())]\nnot_only_gerne_score = df_gerne['IMDB Score'].mean()\n\nvalues = [only_genre_score, not_only_gerne_score]\nlabels = ['only_genre_score', 'not_only_gerne_score']\n\nfig = px.bar(x=labels, y=values, title='IMDB Score > medain and Gerne value_counts ==1 or >1')\nfig.show()","3f8c1626":"df_only_gerne = df[(df.Genre.isin(only_genre)) & (df['IMDB Score'] < df['IMDB Score'].median())]\nonly_genre_score = df_only_gerne['IMDB Score'].mean()\n\ndf_gerne = df[~df.Genre.isin(only_genre) & (df['IMDB Score'] > df['IMDB Score'].median())]\nnot_only_gerne_score = df_gerne['IMDB Score'].mean()\n\nvalues = [only_genre_score, not_only_gerne_score]\nlabels = ['only_genre_score', 'not_only_gerne_score']\n\nfig = px.bar(x=labels, y=values, title='IMDB Score < medain and Gerne value_counts ==1 or >1')\nfig.show()","fa3362bd":"top5_counts_genre = list(df.Genre.value_counts().index[:5]) \nx = df[df.Genre.isin(top5_counts_genre)]\nx = x.groupby('Genre').mean().loc[:, ['IMDB Score']]\nvalues = list(x['IMDB Score'])\n\nlabels = list(x.index)\n\ndd = pd.DataFrame({'score': values, 'Genre': labels})\n\nsns.barplot(data=dd, x=dd.Genre, y=dd.score)\nsns.lineplot(x=dd.Genre, y=df['IMDB Score'].median())\nsns.lineplot(x=dd.Genre, y=df['IMDB Score'].max())\nsns.lineplot(x=dd.Genre, y=df['IMDB Score'].min())","3000fe85":"english = df[df.Language.str.contains('English')]\nx = english.Language.value_counts()\n\npx.pie(values=x.values, labels=x.index, names=x.index)","0809cec5":"english = df[df.Language == 'English']\nnot_english = df[df.Language != 'English']\n\nscore = english['IMDB Score'].mean()\nnot_score = not_english['IMDB Score'].mean()\n\nprint(f'English Score: {score}')\nprint(f'Not English Score: {not_score}')\n\neng_ge = english.Genre.unique()\nnot_eng_ge = not_english.Genre.unique()\nall_ge = df.Genre.unique()\n\n\nprint('English Genre counts: ' ,len(eng_ge)\/len(all_ge))\nprint('Not English Genre counts: ' ,len(not_eng_ge)\/len(all_ge))\n# print('All Gerne counts: ' , len(all_ge))","9385ab84":"df.loc[df.Language.str.contains('English'), 'Language']  = 'English'","c20fe978":"x = df.groupby('Language').mean().loc[:, ['IMDB Score']].sort_values(by='IMDB Score', ascending=False)\n\npx.bar(x=x.index, y=x['IMDB Score'], title='Language vs Score')","b9dd23b1":"x = df[df.Language == 'English'].groupby('Genre').mean().loc[:, ['IMDB Score']].sort_values(by='IMDB Score', ascending=False)[:8]\n\npx.pie(values=x['IMDB Score'], labels=x.index, names=x.index, title='English popular Gerne Top 8 Rate:')","ce4cb29f":"x = df[df.Language != 'English'].groupby('Genre').mean().loc[:, ['IMDB Score']].sort_values(by='IMDB Score', ascending=False)[:8]\n\npx.pie(values=x['IMDB Score'], labels=x.index, names=x.index, title='Not English popular Gerne Top 8:')","9a49bf23":"g = df.Genre.value_counts() > 1\ng = g.index\npx.bar(df[(df.Genre.isin(g)) & (df['IMDB Score'] > df['IMDB Score'].median())], x='Genre', y='IMDB Score', color='Language')","73f068c9":"g = df.Genre.value_counts() > 1\ng = g.index\npx.bar(df[(df.Genre.isin(g)) & (df['IMDB Score'] > df['IMDB Score'].median())], x='Language', y='IMDB Score', color='Genre')","1f246387":"g = df.Genre.value_counts() > 1\ng = g.index\npx.bar(df[(df.Genre.isin(g)) & (df['IMDB Score'] < df['IMDB Score'].median())], x='Genre', y='IMDB Score', color='Language')","6ebd96b0":"g = df.Genre.value_counts() > 1\ng = g.index\npx.bar(df[(df.Genre.isin(g)) & (df['IMDB Score'] < df['IMDB Score'].median())], x='Language', y='IMDB Score', color='Genre')","6f31ea43":"bins = [1, 5, 8 ,10]\ndf['score'] = pd.cut(df['IMDB Score'], bins)\nlanguage = df.Language.value_counts().index\n\nf, axes = plt.subplots(1, 2, figsize=(18, 7))\nax = axes.ravel()\nsns.countplot(data=df, x='score', ax=ax[0])\npd.crosstab(df[df.Language.isin(language)].Language, df[df.Language.isin(language)].score).plot(kind='bar', ax=ax[1])","265d6046":"px.scatter(x=df.Runtime,\n           y=df['IMDB Score'],\n           title='Runtime and Score corr by Language',\n           color=df.Language)","634b32e7":"print('CORR: ', np.corrcoef(df.Runtime, df['IMDB Score'])[0, 1])","1784d0ed":"df.groupby('score').mean().loc[:, ['Runtime']].plot(kind='bar')","a51a807c":"x = df.groupby('Genre').mean().loc[:, ['Runtime']].sort_values(by='Runtime', ascending=False)\nlong = list(x[:50].index)\nshort = list(x[-50:].index)\n\ndf_long = df[df.Genre.isin(long)]\npx.bar(df_long, x='Genre', y='Runtime', color='score', title='Long Runtime score:')","bca8e621":"df_short = df[df.Genre.isin(short)]\npx.bar(df_short, x='Genre', y='Runtime', color='score', title='Short Runtime score:')","1cc8984f":"Documentry\u306f`English`\u306e\u5f71\u97ff\u4e0b\u306b\u3042\u308b","5ae2b947":"`Comedy`\u306e\u4e0d\u8a55\u306f`English`\u306e\u5f71\u97ff\u4e0b\u306b\u3042\u308b","ee6327ef":"\u305f\u3060\u3057\u3001\u8a55\u4fa1\u6570\u304c\u591a\u3044\u30b8\u30e3\u30f3\u30eb\u3068\u3044\u3063\u3066\u3082\u8a55\u4fa1\u70b9\u306b\u5dee\u7570\u306f\u898b\u3089\u308c\u306a\u3044","98c443a2":"1. \u8a55\u4fa1\u70b9\u306b\u3064\u3044\u3066\u306f`English`\u3068\u306e\u305d\u308c\u4ee5\u5916\u306e\u76f8\u95a2\u306f\u898b\u3089\u308c\u306a\u3044\n2. \u30b8\u30e3\u30f3\u30eb\u306e\u591a\u6570\u306e\u7a2e\u985e\u306f`English`\u306b\u5c5e\u3057\u3066\u3044\u308b","97c640f7":"# Language","694d82ca":"# Categorical value_counts Top 10","bca0525b":"1. `Documentry`\u304c\u591a\u3044\u50be\u5411\n2. `English`\u304c\u591a\u6570","85a56f8b":"# Genre","c4a3215c":"`English`\u304c\u5727\u5012\u7684\u306a\u5272\u5408\u3092\u5360\u3081\u3066\u3044\u308b","30f85444":"# Runtime","58cb28f4":"Gerne\u306e\u30e6\u30cb\u30fc\u30af\u306a\u30ab\u30a6\u30f3\u30c8\u6570\u304c`1`\u306a\u3089\u3070Score\u304c\u6e1b\u5c11\u50be\u5411\u3002\u4e0a\u4e0b\u6bd4\u8f03\u3057\u3066\u307f\u3066\u3082\u8a55\u4fa1\u6570\u304c\u591a\u3044\u307b\u3069\u305d\u306e\u5e73\u5747\u3067\u3042\u308bScore\u306f\u4e0a\u6607\u50be\u5411\u306b\u3042\u308b\u3002\u3053\u308c\u306fScore\u304c\u4f4e\u3051\u308c\u3070\u3088\u308a\u9855\u8457\u306b\u8868\u308c\u3066\u3044\u308b  \n\u3053\u3053\u3067\u51fa\u73fe\u7387\u306e\u9ad8\u3044\u4e0a\u4f4d\u306e\u8a55\u4fa1\u70b9\u3092\u898b\u3066\u307f\u308b\u3053\u3068\u306b\u3059\u308b\u3002"}}