{"cell_type":{"bdddf4b4":"code","b28a43a7":"code","b7d790b6":"code","af56803a":"code","f1e1435e":"code","a646d7ec":"code","2f8ab3e3":"code","a03d6514":"code","902669ff":"code","4fc694ea":"code","d3c3dd8a":"code","893548a0":"code","d58ad688":"code","ac5eb77e":"code","5c7e5e2b":"code","60baeb74":"code","01f1b636":"code","aa6668aa":"code","1f1c6b14":"code","df7a47ae":"code","1ea999e6":"code","457b6576":"code","f3a5e729":"code","e6bf2fdd":"code","f7b1d885":"code","cea58680":"code","e74fa0dd":"code","71e1eea9":"code","48097231":"code","6e60f257":"code","e4c927ce":"code","f70f4667":"code","b22ed811":"code","34eeaf05":"code","a3880ca6":"code","041c4537":"code","94da5905":"code","0ab2a0b2":"code","354cb5b1":"code","43397b05":"markdown","4416df12":"markdown","26a56f70":"markdown","6d271da9":"markdown","2d8da9f1":"markdown","ce4aae15":"markdown","3968a4bd":"markdown","683fb1a8":"markdown","9efc41d1":"markdown","2d7a4879":"markdown"},"source":{"bdddf4b4":"#*\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nimport plotly.graph_objs as go\n\nimport plotly as py\nfrom plotly import tools\nfrom plotly.offline import iplot\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b28a43a7":"dt = pd.read_csv(\"..\/input\/pakistan-corona-virus-citywise-data\/PK COVID-19-30apr.csv\", encoding = \"ISO-8859-1\", parse_dates=[\"Date\"])\nprint(\"Data Dimensions are: \", dt.shape)\nprint(dt.head)\n\n\n#personal code to learn\nprint(dt.shape) \n\n%matplotlib inline\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nmpl.style.use('ggplot') # optional: for ggplot-like style\n\n# check for latest version of Matplotlib\nprint('Matplotlib version: ', mpl.__version__) # >= 2.0.0\n\n\ndt_Province = dt.groupby('City', axis=0).sum()\n\n# note: the output of the groupby method is a `groupby' object. \n# we can not use it further until we apply a function (eg .sum())\nprint(type(dt.groupby('City', axis=0)))\n\ndt_Province.head()\n\n\n\n\n\n\n","b7d790b6":"dt_city = dt.groupby('City', axis=0).sum()\n\n\n# note: the output of the groupby method is a `groupby' object. \n# we can not use it further until we apply a function (eg .sum())\nprint(type(dt.groupby('City', axis=0)))\n\ndt_city.head(10)\n#dt_top = dt_city.head\n","af56803a":"dt_city.reset_index()","f1e1435e":"dt_city = dt_city.reset_index()\n#dt_cityy.sort_values(by='len')","a646d7ec":"dt_city.sort_values(by='Deaths')","2f8ab3e3":"dt_sorted = dt_city.sort_values(by='Deaths', ascending=False)","a03d6514":"dt_sorted.head()","902669ff":"min (dt)\nmax (dt)","4fc694ea":"# autopct create %, start angle represent starting point\ncolors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'coral', 'pink','purple', 'yellow', 'blue', 'coral' ]\nexplode_list = [0.1, 0.1, 0, 0.1, 0, 0.1, 0.1, 0.1, 0.1, 0.1] # ratio for each continent with which to offset each wedge.\n\ndt_sorted.head(10) ['Deaths'].plot(kind='pie',\n                            figsize=(17, 10),\n                            autopct='%1.1f%%', # add in percentages\n                            startangle=90,     # start angle 90\u00b0 (Africa)\n                           # shadow=True,       # add shadow    \n                            colors=colors_list,  # add custom colors\n                            explode=explode_list # 'explode' lowest 3 continents\n                            )\n\nplt.title('Top-10 Death Cases by City')\nplt.axis('equal') # Sets the pie chart to look like a circle.\n\n# add legend\nplt.legend (labels=dt_Province.index, loc='upper right')\n\nplt.show()\n\n","d3c3dd8a":"dt_city.sort_values(by='Recovered')","893548a0":"dt_sorted_recover = dt_city.sort_values(by='Recovered', ascending=False)","d58ad688":"dt_sorted_recover.head()","ac5eb77e":"# autopct create %, start angle represent starting point\ncolors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'coral', 'pink','purple', 'yellow', 'blue', 'coral' ]\nexplode_list = [0.1, 0.1, 0, 0.1, 0, 0.1, 0.1, 0.1, 0.1, 0.1] # ratio for each continent with which to offset each wedge.\n\ndt_sorted_recover.head(10) ['Recovered'].plot(kind='pie',\n                            figsize=(17, 9),\n                           # autopct='%1.1f%%', # add in percentages\n                            startangle=90,     # start angle 90\u00b0 (Africa)\n                           # shadow=True,       # add shadow    \n                            colors=colors_list,  # add custom colors\n                            explode=explode_list # 'explode' lowest 3 continents\n                            )\n\nplt.title('Top-10 Recovered Cases by City')\nplt.axis('equal') # Sets the pie chart to look like a circle.\n\n# add legend\nplt.legend (labels=dt_Province.index, loc='upper right')\n\nplt.show()","5c7e5e2b":"dt_city.sort_values(by='Cases')","60baeb74":"dt_sorted_cases = dt_city.sort_values(by='Cases', ascending=False)","01f1b636":"dt_sorted_cases.head()","aa6668aa":"# autopct create %, start angle represent starting point\ncolors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'coral', 'pink','purple', 'yellow', 'blue', 'coral' ]\nexplode_list = [0.1, 0.1, 0, 0.1, 0, 0.1, 0.1, 0.1, 0.1, 0.1] # ratio for each continent with which to offset each wedge.\n\ndt_sorted_cases.head(10) ['Cases'].plot(kind='pie',\n                            figsize=(17, 9),\n                           # autopct='%1.1f%%', # add in percentages\n                            startangle=90,     # start angle 90\u00b0 (Africa)\n                           # shadow=True,       # add shadow    \n                            colors=colors_list,  # add custom colors\n                            explode=explode_list # 'explode' lowest 3 continents\n                            )\n\nplt.title('Top-10 Recovered Cases by City')\nplt.axis('equal') # Sets the pie chart to look like a circle.\n\n# add legend\nplt.legend (labels=dt_Province.index, loc='upper right')\n\nplt.show()","1f1c6b14":"#dt_Province.index = dt_Province.index.map(int) # let's change the index values of df_top5 to type integer for plotting\ndt_city.plot(kind='area', \n             stacked=True,\n             figsize=(20, 10), # pass a tuple (x, y) size\n             )\n\nplt.title('Covid19 Cases, Deaths & Recoveries Trend')\n#plt.ylabel('Number of Immigrants')\nplt.xlabel('Pakistan Provinces \/ Areas')\n\nplt.show()","df7a47ae":"# autopct create %, start angle represent starting point\ndt_sorted ['Deaths'].plot(kind='pie',\n                            figsize=(20, 13),\n                            autopct='%1.1f%%', # add in percentages\n                            startangle=102,     # start angle 90\u00b0 (Africa)\n                            #shadow=True,       # add shadow      \n                            )\n\nplt.title('Death by City')\nplt.axis('equal') # Sets the pie chart to look like a circle.\n\n# add legend\n#plt.legend (labels=dt_sorted.index, loc='upper right')\n\nplt.show()","1ea999e6":"# autopct create %, start angle represent starting point\ndt_Province ['Cases'].plot(kind='pie',\n                            figsize=(10, 13),\n                            autopct='%1.1f%%', # add in percentages\n                            startangle=90,     # start angle 90\u00b0 (Africa)\n                            shadow=True,       # add shadow      \n                            )\n\nplt.title('Total Cases by Province')\nplt.axis('equal') # Sets the pie chart to look like a circle.\n\nplt.show()","457b6576":"#colors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'coral', 'pink','purple', 'yellow', 'blue' ]\n#explode_list = [0.1, 0.1, 0, 0.1, 0, 0.1, 0.3, 0.1, 0.3] # ratio for each continent with which to offset each wedge.\n\ndt_Province ['Cases'].plot(kind='pie',\n                            figsize=(17, 10),\n                            autopct='%1.1f%%', \n                            startangle=90,    \n                            shadow=True,       \n                            labels=None,         # turn off labels on pie chart\n                            pctdistance=1.10,    # the ratio between the center of each pie slice and the start of the text generated by autopct \n                            colors=colors_list,  # add custom colors\n                            explode=explode_list # 'explode' lowest 3 continents\n                            )\n\n# scale the title up by 12% to match pctdistance\nplt.title ('Recovered Cases by Province PK') \n\nplt.axis ('equal') \n\n# add legend\nplt.legend (labels=dt_Province.index, loc='upper right') \n\nplt.show()","f3a5e729":"dt.info()","e6bf2fdd":"dt['Travel_history'].unique\ndt['Travel_history'].fillna('Unknown',  inplace=True)","f7b1d885":"dt = dt.sort_values('Date')\ndt['Deaths']=dt['Deaths'].astype(int)\ndt['Cases']=dt['Cases'].astype(int)\ndt['Recovered']=dt['Recovered'].astype(int)\n\ndt.loc[dt.Province == \"khyber Pakhtunkhwa\", \"Province\"] = \"Khyber Pakhtunkhwa\"\ndt.loc[dt.Travel_history == \"Tableegi Jamaat\", \"Travel_history\"] = \"Tableeghi Jamaat\"","cea58680":"pdc = dt.groupby('Date')['Cases'].sum().reset_index()\npdd = dt.groupby('Date')['Deaths'].sum().reset_index()#.drop('Date', axis=1)\npdr = dt.groupby('Date')['Recovered'].sum().reset_index()#.reset_index()#.drop('Date', axis=1)\n\np = pd.DataFrame(pdc) \np['Deaths'] = pdd['Deaths']\np['Recovered'] = pdr['Recovered']\n\n#Cumulative Sum\np['Cum_Cases'] = p['Cases'].cumsum() \np['Cum_Deaths'] = p['Deaths'].cumsum()\np['Cum_Recovered'] = p['Recovered'].cumsum()\n\ndel pdc, pdd, pdr \np.head()\n","e74fa0dd":"p['Dateofmonth'] = p['Date'].dt.day\np['Month'] = p['Date'].dt.month\np['Week'] = p['Date'].dt.week\np['Dayofweek'] = p['Date'].dt.dayofweek # 0 = monday.\np['Weekdayflg'] = (p['Dayofweek'] \/\/ 5 != 1).astype(float)\np['Month'] = p['Date'].dt.month\np['Quarter'] = p['Date'].dt.quarter\np['Dayofyear'] = p['Date'].dt.dayofyear\np.head(10)","71e1eea9":"fig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(x=p['Date'], y=p['Cases'],\n                    mode='lines+markers',\n                    name='Cases'))\nfig.add_trace(go.Scatter(x=p['Date'], y=p['Deaths'],\n                    mode='lines+markers',\n                    name='Deaths'))\nfig.add_trace(go.Scatter(x=p['Date'], y=p['Recovered'],\n                    mode='lines+markers',\n                    name='Recoveries'))\n\nfig.show()","48097231":"fig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(x=p['Date'], y=p['Cum_Cases'],\n                    mode='lines+markers',\n                    name='Cases'))\nfig.add_trace(go.Scatter(x=p['Date'], y=p['Cum_Deaths'],\n                    mode='lines+markers',\n                    name='Deaths'))\nfig.add_trace(go.Scatter(x=p['Date'], y=p['Cum_Recovered'],\n                    mode='lines+markers',\n                    name='Recoveries'))\n\nfig.show()","6e60f257":"px.scatter(p, x= 'Date', y = 'Cases', trendline = \"ols\")","e4c927ce":"from sklearn.ensemble import RandomForestClassifier\n#model = RandomForestClassifier(n_estimators=200)\nmodel = RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n                      max_depth=None, max_features='auto', max_leaf_nodes=None, \n                      n_estimators=250, random_state=None, n_jobs=1, verbose=0)","f70f4667":"input_col = [#'Date',\n# 'Cases',\n# 'Deaths',\n# 'Recovered',\n# 'Cum_Cases',\n# 'Cum_Deaths',\n# 'Cum_Recovered',\n 'Dateofmonth',\n 'Month',\n 'Week',\n 'Dayofweek',\n 'Weekdayflg',\n 'Quarter',\n 'Dayofyear']\n\noutput_cols = ['Cases', 'Deaths', 'Cum_Cases', 'Cum_Deaths'] ","b22ed811":"X = p[input_col]\nY1 = p[output_cols[0]]","34eeaf05":"# Date Range for Prediction\npred_dates = np.arange('2019-05', '2019-06', dtype='datetime64[D]')\npred_range = pred_dates[0:6]\npred = pd.DataFrame(pred_range, columns=['Date'])\npred['Dateofmonth'] = pred['Date'].dt.day\npred['Month'] = pred['Date'].dt.month\npred['Week'] = pred['Date'].dt.week\npred['Dayofweek'] = pred['Date'].dt.dayofweek # 0 = monday.\npred['Weekdayflg'] = (pred['Dayofweek'] \/\/ 5 != 1).astype(float)\npred['Month'] = pred['Date'].dt.month\npred['Quarter'] = pred['Date'].dt.quarter\npred['Dayofyear'] = pred['Date'].dt.dayofyear\n#pred.info()","a3880ca6":"model.fit(X,Y1)","041c4537":"X_test = pred[input_col]\nprd = model.predict(X_test)","94da5905":"pred['Predicted_Cases'] = prd","0ab2a0b2":"df_can.head()","354cb5b1":"pred\n","43397b05":"## Prediction with Random Forest","4416df12":"#### Cumulative Sums of Daily Cases vs Deaths vs Recoveries","26a56f70":"### Few new features extracted","6d271da9":"# Covid Forcaste with Quick Random Forest\n**Hello Everyone, **\n\nHere is our very first kernel on forecast model building. We have setup everything and built one quick and basic model without validation yet.\nWe will follow following steps when times permits. \nFuture Steps: \n* Model validation and Calibration\n* ARIMA | Moving Average Model | Exponential smoothing | Holt linear \n* LightGBM, XGBoost\n* Prediction with Weather Data\n* Prediction with Weather Data + Health Data\n\nIf you have questions or comments, please leave in comments section. If you find this kernel useful, please upvote! \n\n**Thank you**","2d8da9f1":"Let's have a look at scatter plot of cases with OLS trendline.","ce4aae15":"## Exploratory Analysis","3968a4bd":"Travel history has less records, we will fill NAs with Unknown","683fb1a8":"#### Daily Cases vs Deaths vs Recoveries","9efc41d1":"Type casting variables and fixing one Province value","2d7a4879":"## Data Loading & Preparation"}}