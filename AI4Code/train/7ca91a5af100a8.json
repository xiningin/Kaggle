{"cell_type":{"4153d64e":"code","3618c082":"code","dcc36434":"code","1014c487":"code","62053a6b":"code","9c4c2984":"code","48707772":"code","76e8aa47":"code","c0a5b6d6":"code","1a702986":"code","77f2d608":"code","7f0f2a4b":"code","70e4ce8c":"code","7439876f":"code","f5c9858f":"code","e89bf82f":"code","877d7214":"code","158ea9b9":"code","45a1c169":"code","9322f0f9":"code","32048c7d":"code","7fb5bcaa":"code","f157d176":"code","9b3a7138":"code","c94e5d55":"code","1b4f1ee7":"markdown","c8064263":"markdown","967bac4f":"markdown","4d862f85":"markdown","bd991248":"markdown","aedab9fe":"markdown","19d78cd9":"markdown","4af8ac8b":"markdown","abb60698":"markdown","284997aa":"markdown","887d641d":"markdown","d644673e":"markdown","e3d4d088":"markdown"},"source":{"4153d64e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3618c082":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix","dcc36434":"test_df=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain_df=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","1014c487":"train_df.shape, test_df.shape","62053a6b":"train_df.isnull().sum()","9c4c2984":"train_df.describe()","48707772":"train_df.info()","76e8aa47":"train_df['SalePrice'].describe(percentiles=[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.95,1])","c0a5b6d6":"# Generate and visualize the correlation matrix\ncorr = train_df.corr().round(2)\n\n# Mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set figure size\nf, ax = plt.subplots(figsize=(20, 20))\n\n# Define custom colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap\nsns.heatmap(corr, mask=mask, cmap=cmap, vmin=-1, vmax=1, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, annot=True)\n\nplt.tight_layout()","1a702986":"cols=['MSZoning','Street',\n       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n       'HouseStyle','RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n       'MasVnrArea','ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n       'BsmtCond', 'BsmtExposure', 'BsmtFinType1','BsmtFinType2','Heating',\n       'HeatingQC', 'CentralAir', 'Electrical','KitchenQual', 'Functional','FireplaceQu','GarageType',\n     'GarageFinish','GarageQual','GarageCond','PavedDrive','PoolQC','Fence','MiscFeature','SaleType','SaleCondition']\n\ntrain_df=train_df.drop(cols, axis=1)","77f2d608":"# Generate and visualize the correlation matrix\ncorr = train_df.corr().round(2)\n\n# Mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set figure size\nf, ax = plt.subplots(figsize=(20, 20))\n\n# Define custom colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap\nsns.heatmap(corr, mask=mask, cmap=cmap, vmin=-1, vmax=1, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, annot=True)\n\nplt.tight_layout()","7f0f2a4b":"train_df.LotFrontage.fillna(train_df.LotFrontage.mean(), inplace=True)","70e4ce8c":"train_df.fillna(train_df.mean(), inplace=True)","7439876f":"x=train_df.drop('SalePrice', 1)\ny=train_df['SalePrice']\n","f5c9858f":"x.shape, y.shape","e89bf82f":"X_train, x_test, y_train, y_test=train_test_split(x, y, test_size=0.3, random_state=10)\n","877d7214":"model=LogisticRegression()","158ea9b9":"y_train.shape, X_train.shape","45a1c169":"model.fit(X_train, y_train)","9322f0f9":"predict=model.predict(x_test)\npredict[1:6]","32048c7d":"prediction=model.predict_log_proba(x_test)\nprediction[1:6]","7fb5bcaa":"cols=['MSZoning','Street',\n       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n       'HouseStyle','RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n       'MasVnrArea','ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n       'BsmtCond', 'BsmtExposure', 'BsmtFinType1','BsmtFinType2','Heating',\n       'HeatingQC', 'CentralAir', 'Electrical','KitchenQual', 'Functional','FireplaceQu','GarageType',\n     'GarageFinish','GarageQual','GarageCond','PavedDrive','PoolQC','Fence','MiscFeature','SaleType','SaleCondition']\n\ntest_df=test_df.drop(cols, axis=1)","f157d176":"test_df.fillna(test_df.mean(), inplace=True)","9b3a7138":"predictionn=model.predict(test_df)","c94e5d55":"my_submission=pd.DataFrame({'id':test_df.Id,'SalePrice':predictionn})\nmy_submission.to_csv('submissionn.csv', index=False)","1b4f1ee7":"# First Five prediction of model","c8064263":"# Visualization of the data -","967bac4f":"# Fill the 'Nan' , 'Null' value with mean of that feature","4d862f85":"# Get the statistical table of train dataset","bd991248":"# Visualization with Important feature of dataset ","aedab9fe":"# Model training \n>Splitting the dataset into 2 set","19d78cd9":"# Percentile of Target columns","4af8ac8b":"# Dropping the less important columns","abb60698":"# Find the Null value in dataset","284997aa":"# Some loss i.e. log loss","887d641d":"# Splitting the dataset","d644673e":"# Fitting the Logistic Model","e3d4d088":"# Fitting the model"}}