{"cell_type":{"0ec7ad96":"code","fcbb4ee0":"code","c81a444f":"code","9be55da1":"code","489e5f26":"code","244e4130":"code","1d1e7e36":"code","bb8d1eaf":"code","3432f00f":"code","f1362ed6":"code","b896ca52":"code","6fc06244":"code","e2369b7d":"code","cc14955c":"code","cac58885":"code","9206bc03":"code","b346202f":"code","34aea8b2":"code","291e6b8d":"code","00b038e9":"code","ac015d2b":"code","a1412216":"markdown","7a040129":"markdown","10b05d41":"markdown","0d897585":"markdown","955af8ef":"markdown","2192dde7":"markdown","efd1a261":"markdown"},"source":{"0ec7ad96":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fcbb4ee0":"dataset = pd.read_csv(\"\/kaggle\/input\/cardekho\/car data.csv\")\ndataset.head()","c81a444f":"dataset.shape","9be55da1":"dataset.isnull().any()","489e5f26":"dataset.drop(['Car_Name'], inplace=True, axis=1)\ndataset","244e4130":"print(dataset['Fuel_Type'].unique())\nprint(dataset['Seller_Type'].unique())\nprint(dataset['Transmission'].unique())","1d1e7e36":"dataset = pd.get_dummies(dataset, drop_first=True)\ndataset","bb8d1eaf":"# Now we will use datetime to calculate the number of years completed.\n\nfrom datetime import date\ntoday = date.today()\ncurrent_year = today.year\nprint(current_year)","3432f00f":"dataset['Current_Year'] = current_year\ndataset","f1362ed6":"dataset['Number_of_Years'] = dataset['Current_Year'] - dataset['Year']\ndataset","b896ca52":"dataset.drop(['Year', 'Current_Year'], inplace=True, axis=1)\ndataset","6fc06244":"X = dataset.iloc[:, 1:]\ny = dataset.iloc[:, 0]","e2369b7d":"#Dividing the dataset into X and Y\nfrom sklearn.model_selection import train_test_split","cc14955c":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 5)","cac58885":"print(X_train.shape)\nprint(X_test.shape)","9206bc03":"# Making predictions using Random Forest Regressor\nfrom sklearn.ensemble import RandomForestRegressor","b346202f":"RF_regressor = RandomForestRegressor(n_estimators = 125)","34aea8b2":"RF_regressor.fit(X_train, y_train)","291e6b8d":"y_pred = RF_regressor.predict(X_test)\ny_pred","00b038e9":"from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score","ac015d2b":"print(mean_squared_error(y_test, y_pred))\nprint(mean_absolute_error(y_test, y_pred))\nprint(r2_score(y_test, y_pred))","a1412216":"# The above table is our final table and using this table we need to make predictions.","7a040129":"# We will drop the car name field because we don't predict the selling price of the car based on the model of car","10b05d41":"# Now, we will be not calculating based on the year instead we will make predictions based on the number of years completed after buying the car","0d897585":"### As fuel type, seller type and transmission are of categorical type value. So, we will be dividing those categorical values into sub categories","955af8ef":"# Now, we will replace Year with Number of Years","2192dde7":"# Checking the error rate and success rate","efd1a261":"# If you find this useful please, upvote it.\n# Thanks for your valuable time. I hope you find it useful."}}