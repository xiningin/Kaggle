{"cell_type":{"6a10c39b":"code","8f256635":"code","950b4671":"code","34bb50d4":"code","f7ec8875":"code","7c242c4a":"code","8e31f9f1":"code","0c0975e2":"code","f0a4bc06":"code","94387f60":"code","7a5fa0c2":"code","58df6f97":"code","53acb76c":"code","89b013ad":"code","43d9a139":"code","0c978b3e":"code","3db4efe4":"code","9b8c5f7a":"code","c8f8c111":"code","b3073614":"code","d54ff405":"code","f3793d2e":"code","903e691e":"code","2ed31fd5":"code","60a9823c":"code","e59fd6b2":"code","a22b7378":"code","56fdddfe":"code","eec306f4":"code","6dad552f":"code","af24d3da":"code","e780c5fd":"code","006653df":"code","ccb4cef9":"code","1433fddf":"code","5773ccfc":"code","12910d81":"code","e1c22220":"code","01daf0c1":"code","452f7475":"code","60c923f5":"code","fb82d0fb":"code","71aa5ec8":"code","38a9dbde":"code","3d0b31d2":"code","803203f0":"code","e41927f5":"code","ada94473":"code","a89c90af":"code","f62de2d7":"code","02265a74":"code","19631e80":"code","707cab4b":"code","9478bf53":"code","43a5b825":"code","5524c665":"code","a4de7e78":"code","eb964324":"code","727e819f":"code","d5b53dde":"code","39d34300":"code","45b87514":"code","e73f7be6":"code","bba7d97e":"code","6ffc298c":"code","35b0307c":"code","e2588b22":"code","e54b34b2":"code","0d16ceb9":"code","1cdec792":"code","d6b41c41":"code","7b05fd6b":"code","12510071":"code","a654d141":"code","2ecb9bc7":"code","883e0d81":"code","60fcfb34":"code","2565cae7":"code","4eaf1597":"code","e83847cc":"code","3e629c74":"code","6e6046ec":"code","966a9ae8":"code","5d3098df":"code","d64df65f":"code","4ce87fac":"code","97d7c5f8":"code","16d65cf5":"code","07aa1a76":"code","32f629bf":"markdown","dc62abb3":"markdown","5840ac45":"markdown","f6d78d8b":"markdown","9beea7b1":"markdown","b98bfd76":"markdown","a1d5484e":"markdown","1fafe379":"markdown","4a7f5313":"markdown","cce2e6fa":"markdown","5570fb9f":"markdown","588901f9":"markdown","408f8368":"markdown","a79cb5da":"markdown","701f647c":"markdown","f4b6c56c":"markdown","51715129":"markdown","abcc7efd":"markdown","3f4b180a":"markdown","8e03cb16":"markdown","ced10f54":"markdown","edae21b4":"markdown","04b2e113":"markdown","634d7be8":"markdown","b1ba0f13":"markdown","e25e0c81":"markdown","12e718b7":"markdown","aaa79c6b":"markdown","c8aadea0":"markdown","9424b12d":"markdown","86c06059":"markdown","734eb896":"markdown","1cc44440":"markdown","dae0270a":"markdown","e502ef62":"markdown","2abfd02a":"markdown","6b9a162e":"markdown","6da9d2c8":"markdown","59fde3c8":"markdown","3fe3bd58":"markdown","566f0b32":"markdown","3a43a3b4":"markdown","0c97be62":"markdown","9975a7d6":"markdown","97ad3b48":"markdown","747fba19":"markdown","c0228a60":"markdown"},"source":{"6a10c39b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter \n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n#plt.style.available\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8f256635":"train_df= pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df= pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId=test_df[\"PassengerId\"]","950b4671":"train_df.columns","34bb50d4":"train_df.head()","f7ec8875":"train_df.describe()","7c242c4a":"train_df.info()","8e31f9f1":"def bar_plot(variable):\n    \n    \"\"\"\n        input: variable ex:\"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    #get future\n    var= train_df[variable]\n    #count number of categorical variable(value\/sample)\n    varValue=var.value_counts()\n    \n    #visualize\n    \n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    \n    print(\"{}: \\n {}\".format(variable,varValue))","0c0975e2":"category1= [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\n\nfor c in category1:\n    bar_plot(c)","f0a4bc06":"category2=[\"Cabin\",\"Name\",\"Ticket\"]\n\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts))","94387f60":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable],bins=50)\n    \n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","7a5fa0c2":"numericVar =[\"Fare\",\"Age\",\"PassengerId\"]\n\nfor n in numericVar:\n    plot_hist(n)","58df6f97":"# Pclass vs Survived\n\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","53acb76c":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","89b013ad":"# SibSp vs Survived\n\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","43d9a139":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","0c978b3e":"#SibSp vs Pclass \n\ntrain_df[[\"Pclass\",\"SibSp\"]].groupby([\"Pclass\"],as_index=False).mean().sort_values(by=\"SibSp\",ascending=False)","3db4efe4":"#Parch vs Pclass\ntrain_df[[\"Pclass\",\"Parch\"]].groupby([\"Pclass\"],as_index=False).mean().sort_values(by=\"Parch\",ascending=False)","9b8c5f7a":"def detect_outliers(df,features):\n    outlier_indices=[]\n    \n    for c in features:\n        # 1st quartile\n        Q1=np.percentile(df[c],25)\n        \n        # 3rd quartile\n        Q3=np.percentile(df[c],75)\n        \n        # IQR\n        IQR= Q3-Q1\n        \n        # Outlier Step\n        outlier_step= IQR * 1.5\n        \n        # Detect outlier and their indeces \n        outlier_list_col = df[(df[c]< Q1 - outlier_step)|( df[c] > Q3 + outlier_step)].index\n        \n        # Store indices \n        outlier_indices.extend(outlier_list_col)\n    \n    outliers_indices = Counter(outlier_indices)\n    \n    multiple_outliers = list(i for i , v in outliers_indices.items() if v>2 )\n    \n    return multiple_outliers","c8f8c111":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","b3073614":"# drop outliers\n\ntrain_df= train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop= True)","d54ff405":"train_df_len=len(train_df)\ntrain_df=pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","f3793d2e":"train_df.head()","903e691e":"train_df.columns[train_df.isnull().any()]","2ed31fd5":"train_df.isnull().sum()","60a9823c":"train_df[train_df[\"Embarked\"].isnull()]","e59fd6b2":"train_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","a22b7378":"train_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","56fdddfe":"train_df[train_df[\"Fare\"].isnull()]","eec306f4":"train_df[\"Fare\"]=train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3] [\"Fare\"]))","6dad552f":"train_df[train_df[\"Fare\"].isnull()]","af24d3da":"list1=[\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot=True,fmt=\".2f\")\nplt.show()","e780c5fd":"g=sns.factorplot(x=\"SibSp\",y=\"Survived\",data=train_df,kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probabality\")\nplt.show()","006653df":"g=sns.factorplot(x=\"Parch\",y=\"Survived\",kind=\"bar\",data=train_df,size=6)\ng.set_ylabels(\"Survived Probablity\")\nplt.show()","ccb4cef9":"g=sns.factorplot(x=\"Pclass\",y=\"Survived\",data=train_df,kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probality\")\nplt.show()","1433fddf":"g=sns.FacetGrid(train_df,col=\"Survived\")\ng.map(sns.distplot,\"Age\",bins=25)\nplt.show()","5773ccfc":"g= sns.FacetGrid(train_df,col=\"Survived\",row=\"Pclass\",size=2)\ng.map(plt.hist,\"Age\",bins=25)\ng.add_legend()\nplt.show()","12910d81":"g=sns.FacetGrid(train_df,row=\"Embarked\",size=2)\ng.map(sns.pointplot,\"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","e1c22220":"g=sns.FacetGrid(train_df,row=\"Embarked\",col=\"Survived\",size=2.3)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","01daf0c1":"train_df[train_df[\"Age\"].isnull()]","452f7475":"sns.factorplot(x=\"Sex\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","60c923f5":"sns.factorplot(x=\"Sex\",y=\"Age\",hue=\"Pclass\",data=train_df,kind=\"box\")\nplt.show()","fb82d0fb":"sns.factorplot(x=\"Parch\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()\nsns.factorplot(x=\"SibSp\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","71aa5ec8":"train_df[\"Sex\"]=[1 if i ==\"male\" else 0 for i in train_df[\"Sex\"]]","38a9dbde":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(),annot=True)\nplt.show()","3d0b31d2":"index_nan_age=list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred=train_df[\"Age\"][((train_df[\"SibSp\"]==train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"]==train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"]==train_df.iloc[i][\"Pclass\"]))].median()\n    age_med=train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i]=age_pred\n    else:\n        train_df[\"Age\"].iloc[i]=age_med","803203f0":"train_df[\"Name\"].head(10)","e41927f5":"name=train_df[\"Name\"]\ntrain_df[\"title\"]=[i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","ada94473":"train_df[\"title\"].head(10)","a89c90af":"sns.countplot(x=\"title\",data=train_df)\nplt.xticks(rotation=60)\nplt.show()","f62de2d7":"#convert to categorical\ntrain_df[\"title\"]=train_df[\"title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Dr\",\"Don\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"title\"]=[0 if i ==\"Master\" else 1 if i == \"Miss\" or i==\"Ms\" or i==\"Ms\" or i ==\"Mile\" or i==\"Mrs\" else 2 if i==\"Mr\" else 3 for i in train_df[\"title\"]]\ntrain_df[\"title\"].head(10)","02265a74":"sns.countplot(x=\"title\",data=train_df)\nplt.xticks(rotation=60)\nplt.show()","19631e80":"g=sns.factorplot(x=\"title\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","707cab4b":"train_df.drop(labels =[\"Name\"],axis=1,inplace=True)","9478bf53":"train_df.head()","43a5b825":"train_df=pd.get_dummies(train_df,columns=[\"title\"])\ntrain_df.head()","5524c665":"train_df.head()","a4de7e78":"train_df[\"Fsize\"]=train_df[\"SibSp\"]+train_df[\"Parch\"]+1","eb964324":"train_df.head()","727e819f":"g=sns.factorplot(x=\"Fsize\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","d5b53dde":"train_df[\"family_size\"]=[1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","39d34300":"train_df.head(20)","45b87514":"sns.countplot(x=\"family_size\",data=train_df)\nplt.show()","e73f7be6":"g=sns.factorplot(x=\"family_size\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","bba7d97e":"train_df=pd.get_dummies(train_df,columns=[\"family_size\"])","6ffc298c":"train_df.head()","35b0307c":"train_df[\"Embarked\"].head()","e2588b22":"sns.countplot(x=\"Embarked\",data=train_df)\nplt.show()","e54b34b2":"train_df=pd.get_dummies(train_df,columns=[\"Embarked\"])\ntrain_df.head()","0d16ceb9":"train_df[\"Ticket\"].head(20)","1cdec792":"tickets=[]\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\".\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"]=tickets        ","d6b41c41":"train_df[\"Ticket\"].head(20)","7b05fd6b":"train_df.head()","12510071":"train_df=pd.get_dummies(train_df,columns=[\"Ticket\"],prefix=\"T\")\ntrain_df.head()","a654d141":"sns.countplot(x=\"Pclass\",data=train_df)\nplt.show()","2ecb9bc7":"train_df[\"Pclass\"]=train_df[\"Pclass\"].astype(\"category\")\ntrain_df=pd.get_dummies(train_df,columns=[\"Pclass\"])\ntrain_df.head()","883e0d81":"train_df[\"Sex\"]=train_df[\"Sex\"].astype(\"category\")\ntrain_df=pd.get_dummies(train_df,columns=[\"Sex\"])\ntrain_df.head()","60fcfb34":"train_df.drop(labels=[\"PassengerId\",\"Cabin\"],axis=1,inplace=True)","2565cae7":"train_df.columns","4eaf1597":"from sklearn.model_selection import train_test_split,StratifiedKFold,GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","e83847cc":"train_df_len","3e629c74":"test=train_df[train_df_len:]\ntest.drop(labels=[\"Survived\"],axis=1,inplace=True)","6e6046ec":"test.head()","966a9ae8":"train=train_df[:train_df_len]\nX_train=train.drop(labels=[\"Survived\"],axis=1)\ny_train=train[\"Survived\"]\nX_train,X_test ,y_train,y_test=train_test_split(X_train,y_train,test_size=0.33,random_state=42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","5d3098df":"logreg=LogisticRegression()\nlogreg.fit(X_train,y_train)\nacc_log_train=round(logreg.score(X_train,y_train)*100,2)\nacc_log_test=round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuray:% {}\".format(acc_log_train))\nprint(\"Testing Accuray:% {}\".format(acc_log_test))","d64df65f":"random_state=42\nclassifier=[DecisionTreeClassifier(random_state=random_state),\n           SVC(random_state=random_state),\n           RandomForestClassifier(random_state=random_state),\n           LogisticRegression(random_state=random_state),\n           KNeighborsClassifier()]\ndt_param_grid={\"min_samples_split\":range(10,500,20),\n              \"max_depth\":range(1,20,2)}\nsvc_param_grid={\"kernel\":[\"rbf\"],\n               \"gamma\":[0.001,0.01,0.1,1],\n               \"C\":[1,10,50,100,200,300,1000]}\nrf_param_grid={\"max_features\":[1,3,10],\n              \"min_samples_split\":[2,3,10],\n              \"min_samples_leaf\":[1,3,10],\n              \"bootstrap\":[False],\n              \"n_estimators\":[100,300],\n              \"criterion\":[\"gini\"]}\nlogreg_param_grid={\"C\":np.logspace(-3,3,7),\n                  \"penalty\":[\"l1\",\"l2\"]}\nknn_param_grid={\"n_neighbors\":np.linspace(1,19,10,dtype=int).tolist(),\n               \"weights\":[\"uniform\",\"distance\"],\n               \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param=[dt_param_grid,\n                 svc_param_grid,\n                 rf_param_grid,\n                 logreg_param_grid,\n                 knn_param_grid]","4ce87fac":"cv_result=[]\nbest_estimators=[]\nfor i in range(len(classifier)):\n    clf=GridSearchCV(classifier[i],param_grid=classifier_param[i],cv=StratifiedKFold(n_splits=10),scoring=\"accuracy\",n_jobs=-1,verbose=1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","97d7c5f8":"cv_results=pd.DataFrame({\"Cross Validation Means\":cv_result,\"ML Models\":[\"DecisionTreeClassifier\",\"SVM\",\"RandomForestClassifier\",\"LogisticRegression\",\"KNeighborsClassifier\"]})\ng=sns.barplot(\"Cross Validation Means\",\"ML Models\",data=cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Score\")","16d65cf5":"votingC=VotingClassifier(estimators=[(\"dt\",best_estimators[0]),\n                                     (\"rfc\",best_estimators[2]),\n                                     (\"lr\",best_estimators[3])],\n                                      voting=\"soft\",n_jobs=-1)\nvotingC=votingC.fit(X_train,y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))\n","07aa1a76":"test_survived=pd.Series(votingC.predict(test),name=\"Survived\").astype(int)\nresults=pd.concat([test_PassengerId,test_survived],axis=1)\nresults.to_csv(\"titanic.csv\",index=False)","32f629bf":"<a id = \"26\" ><\/a><br>\n## Pclass","dc62abb3":"<a id = \"33\" ><\/a><br>\n## Ensemble Modeling","5840ac45":"<a id = \"9\" ><\/a><br>\n## Find Missing Value","f6d78d8b":"<a id = \"32\" ><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\n* We will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","9beea7b1":"Fare future seens to have corelation with survived feature (0.26).","b98bfd76":"<a id = \"30\" ><\/a><br>\n## Train - Test Split","a1d5484e":"<a id = \"4\" ><\/a><br>\n## Categorical Variable","1fafe379":"<a id = \"18\" ><\/a><br>\n## Embarked --- sex --- Pclass --- Survived","4a7f5313":"1st class older than 2nd, and 2nd is older than 3rd class.","cce2e6fa":"<a id = \"24\" ><\/a><br>\n## Embarked","5570fb9f":"<a id = \"29\" ><\/a><br>\n# Modeling","588901f9":"<a id = \"13\" ><\/a><br>\n## SipSp --- Survived","408f8368":"<a id = \"7\" ><\/a><br>\n# Outlier Detecetion","a79cb5da":"<a id = \"31\" ><\/a><br>\n## Simple Logistic Regression","701f647c":"<a id = \"27\" ><\/a><br>\n## Sex","f4b6c56c":"<a id = \"25\" ><\/a><br>\n## Ticket","51715129":"<a id = \"14\" ><\/a><br>\n## Parch --- Survived","abcc7efd":"<a id = \"22\" ><\/a><br>\n## Name -- Title","3f4b180a":"<a id = \"10\" ><\/a><br>\n## Find Missing Value\n* Embarked has 2 missing value\n* Fare has only 1 ","8e03cb16":"Age is nor correlated with sex but it is correlated with parch, sibsp and pclass.","ced10f54":"Small families have more chance to survive than large families","edae21b4":"* Female passengers have much better survival rate than males.\n* Male have better survival rate in pclass 3 in C. \n* Embarked and sex will be used trainig. ","04b2e113":"# Introduction\n\n  Titanic was olympic class translatic cruise ship owned by the White Star Line company. It is produced in Harland and Wolff (Belfast, Ireland) shipyards. On the night of April 15 1912, he first hit an iceberg and was buried in the ice of the North Atlantic in about two hours and forty minutes. Killing 1502 out of 2224 passenger and crew.\n \n<font color = \"red\">\n    \nContent:\n\n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable ](#4)\n        * [Numerical Variable ](#5)\n3. [Basic Data Analysis](#6) \n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Visualization](#11)\n     * [Correlation Between, Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n     * [SipSp --- Survived](#13)\n     * [Parch --- Survived](#14)\n     * [Pclass --- Survived](#15)\n     * [Age --- Survived](#16)\n     * [Pclass --- Survived --- Age](#17)\n     * [Embarked --- sex --- Pclass --- Survived](#18)\n     * [Embarked --- sex --- Fare --- Survived](#19)\n     * [Fill Missing: Age Feature](#20)\n     \n1. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n1. [Modeling](#29) \n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","634d7be8":"* float64(2): Fare and Age\n* int64(5): PassengerId, Survived, Pclass, SibSp and Parch\n* object(5): Name, Sex, Ticket, Cabin and Embarked","b1ba0f13":"<a id = \"17\" ><\/a><br>\n## Pclass --- Survived --- Age","e25e0c81":"* Passengers who pay higher fare have better survival. Fare can be used as categorical for training.\n","12e718b7":"<a id = \"28\" ><\/a><br>\n## Drop Passenger ID and Cabin","aaa79c6b":"* SibSp and Parch can be used for new feature extraction with th=3\n* small families have more chance to survive.\n* there is a std survival of passenger with parch = 3 ","c8aadea0":"<a id = \"19\" ><\/a><br>\n## Embarked --- sex --- Fare --- Survived","9424b12d":"<a id = \"34\" ><\/a><br>\n## Prediction and Submission","86c06059":"<a id = \"20\" ><\/a><br>\n ## Fill Missing: Age Feature","734eb896":"<a id = \"15\" ><\/a><br>\n## Pclass --- Survived","1cc44440":"<a id = \"6\" ><\/a><br>\n# Basic Data Analysis\n\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived\n* SibSp - Pclass\n* Parch - Pclass","dae0270a":"<a id = \"11\" ><\/a><br>\n # Visualization","e502ef62":"* pclass is important feature to model training","2abfd02a":"<a id = \"5\" ><\/a><br>\n## Numerical Variable \n","6b9a162e":"<a id = \"21\" ><\/a><br>\n# Feature Engineering","6da9d2c8":"<a id = \"8\" ><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","59fde3c8":"* Having a lot of SipSp less chance to survive.\n* If S\u0131pSp == 0 or 1 or 2 passenger has more chance to survive.\n* We can consider a new future describing these categories. ","3fe3bd58":"<a id = \"16\" ><\/a><br>\n## Pclass --- Survived","566f0b32":"<a id = \"12\" ><\/a><br>\n\n## Correlation Between, Sibsp -- Parch -- Age -- Fare -- Survived","3a43a3b4":"* age <= 10 has a high survived rate\n* oldest passenger (80) survived\n* lage number of 20 years old did not survive\n* most passenger are in 15-25 age range\n* use age feature in training\n* use age distribution for missing value of age","0c97be62":"<a id = \"23\" ><\/a><br>\n## Family Size","9975a7d6":"<a id = \"1\" ><\/a><br>\n# Load and Check Data\n","97ad3b48":"<a id = \"2\" ><\/a><br>\n# Variable Description \n1. PassengerId: Unique id number to each passenger \n2. Survived: Passenger survive(1) or died(0)\n4. Pclass: Passenger class\n5. Name: Name \n6. Sex: Gender of passenger \n7. Age: Age of passenger\n8. SibSp: Number of siblings\/spouses\n9. Parch: Number of parents\/children\n10. Ticket: Ticket number\n11. Fare: Amount of money spent on ticket\n12. Cabin: Cabin category\n13. Embarked: Port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)","747fba19":"<a id = \"3\" ><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Fare, Age and PassangerId","c0228a60":"Sex is not informative for age prediction, age distirbution seens to be same. "}}