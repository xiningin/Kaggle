{"cell_type":{"e586f77d":"code","c5b6d178":"code","0664c730":"code","b1a69a65":"code","c06ce8e7":"code","17253558":"code","ade94944":"code","77127746":"code","2d6b86a7":"code","ee7144dd":"code","eda6fafa":"code","7a69368f":"code","f9753aa1":"code","fdd8b06f":"code","bee1105d":"code","38f63599":"code","bdb1d85c":"code","fe4b71f8":"code","d513bf7c":"code","11b0dabe":"code","6afca39a":"code","8391d427":"code","4b3a3fbb":"code","bf1e5f5d":"code","09570120":"code","0deef6f9":"code","9e685298":"code","a36dade1":"code","282e11db":"code","3b648505":"code","2162f23f":"code","7d621426":"code","e5a283ed":"code","e12cf201":"code","4e2ddd82":"code","e9d54291":"code","538dab1f":"code","58767a44":"code","b8679da1":"code","c8b214bd":"code","8d74ad2c":"code","688cb406":"code","5f19a46c":"code","b54210bf":"code","d0971f76":"code","8a8f9b18":"code","c11877e1":"code","25140c05":"markdown","b45a142c":"markdown","59ba10bd":"markdown","f754bf07":"markdown","ce54c879":"markdown","c4c006c3":"markdown","fbbfa5aa":"markdown","360dc317":"markdown","9431dfa0":"markdown","b47709dc":"markdown","cdb09072":"markdown","4399f079":"markdown","57c5b3c9":"markdown","16f7343c":"markdown","7ddf3d1f":"markdown","b1ecf90d":"markdown","fc687801":"markdown","164bd9d9":"markdown","6b3c3859":"markdown","f2e8d79b":"markdown","854bea1d":"markdown","2245e468":"markdown","0b5bd848":"markdown","71ce2e34":"markdown","df763012":"markdown","0eea5811":"markdown","c71e5c0a":"markdown","9d5c2cfa":"markdown","6a5139e9":"markdown","a9b874c3":"markdown","eece41f5":"markdown","cb43c7b1":"markdown","645b81db":"markdown"},"source":{"e586f77d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #visualization\nimport seaborn as sns #visualization\nimport plotly.graph_objs as go #visualization\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport warnings\ninit_notebook_mode(connected=True) \n# filter warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c5b6d178":"#reading data\nimport pandas as pd\n#column_2c_weka = pd.read_csv(\"..\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")\ncolumn_3c_weka = pd.read_csv(\"..\/input\/biomechanical-features-of-orthopedic-patients\/column_3C_weka.csv\")\ndata = pd.read_csv(\"..\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")","0664c730":"data.head()","b1a69a65":"data.info()","c06ce8e7":"plt.style.use(\"ggplot\")\nplt.figure(figsize = (13,8))\nplt.bar(\"Pelvic Incidence\",data.pelvic_incidence.count(),color = \"b\")\nplt.bar(\"Pelvic Tilt Numeric\",data[\"pelvic_tilt numeric\"].count(),color = \"b\")\nplt.bar(\"Lumbar Lordosis Angle\",data.lumbar_lordosis_angle.count(),color = \"b\")\nplt.bar(\"Sacral Slope\",data.sacral_slope.count(),color = \"b\")\nplt.bar(\"Pelvic Radius\",data.pelvic_radius.count(),color = \"b\")\nplt.bar(\"Degree Spondylolisthesis\",data.degree_spondylolisthesis.count(),color = \"b\")\nplt.bar(\"Class\",data[\"class\"].count(),color = \"b\")\nplt.xticks(rotation = 20)\nplt.xlabel(\"Features\")\nplt.ylabel(\"Count\")\nplt.title(\"Missing Value Detection \")\nplt.show()\nprint(data.count())","17253558":"data.describe()","ade94944":"x_data = data.drop([\"class\"],axis = 1)\n#normalization\nx = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values\ny = pd.DataFrame(data[\"class\"])\nx.head()","77127746":"y.head()","2d6b86a7":"data1 = pd.concat([x,y],axis = 1) \ndata1.head()","ee7144dd":"A = data1[data1[\"class\"] == \"Abnormal\"]\nN = data1[data1[\"class\"] == \"Normal\"]","eda6fafa":"plt.style.use(\"default\")\ndata_cnt_plt = data1.iloc[::-1] #reverse data\nsns.countplot(data_cnt_plt[\"class\"],palette = \"icefire\")\nplt.title(\"Number of Normal and Abnormal Patients\")\nplt.show()\nprint(data[\"class\"].value_counts())","7a69368f":"plt.style.use(\"ggplot\")\nsns.pairplot(data, hue =\"class\", markers = \"+\")\nplt.show()\ndesc = data.describe()\nprint(desc[:3])","f9753aa1":"from plotly.subplots import make_subplots\n\nfig = make_subplots(rows=6,cols=1,subplot_titles = (\"Pelvic Incidence\",\"Lumbar Lordosis Angle\",\"Pelvic Tilt Numeric\",\"Sacral Slope\",\"Degree Spondylolisthesis\",\"Pelvic Raidus\"))\n\nfig.append_trace(go.Scatter(\nx = data.index,\ny = data.pelvic_incidence,\nmode = \"lines\",\nname = \"Pelvic Incidence\",\nmarker = dict(color = 'rgba(16, 112, 2, 0.8)')),row = 1, col = 1)\n\nfig.append_trace(go.Scatter(\nx = data.index,\ny = data[\"pelvic_tilt numeric\"],\nmode = \"lines\",\nname = \"Pelvic Tilt Numeric\",\nmarker = dict(color = 'rgba(80, 26, 80, 0.8)')),row = 2, col = 1)\n\nfig.append_trace(go.Scatter(\nx = data.index,\ny = data.lumbar_lordosis_angle,\nmode = \"lines\",\nname = \"Lumbar Lordosis Angle\",\nmarker = dict(color = 'rgba(160, 112, 20, 0.8)')),row = 3, col = 1)\n\nfig.append_trace(go.Scatter(\nx = data.index,\ny = data.sacral_slope,\nmode = \"lines\",\nname = \"Sacral Slope\",\nmarker = dict(color = 'rgba(12, 12, 140, 0.8)')),row = 4, col = 1)\n\nfig.append_trace(go.Scatter(\nx = data.index,\ny = data.pelvic_radius,\nmode = \"lines\",\nname = \"Pelvic Radius\",\nmarker = dict(color = 'rgba(245, 128, 2, 0.8)')),row = 5, col = 1)\n\nfig.append_trace(go.Scatter(\nx = data.index,\ny = data.degree_spondylolisthesis,\nmode = \"lines\",\nname = \"Degree Spondylolisthesis\",\nmarker = dict(color = 'rgba(235, 144, 235, 0.8)')),row = 6, col = 1) #174\n\nfig.update_xaxes(title_text=\"Patient Number\", row=1, col=1)\nfig.update_xaxes(title_text=\"Patient Number\", row=2, col=1)\nfig.update_xaxes(title_text=\"Patient Number\", row=3, col=1)\nfig.update_xaxes(title_text=\"Patient Number\", row=4, col=1)\nfig.update_xaxes(title_text=\"Patient Number\", row=5, col=1)\nfig.update_xaxes(title_text=\"Patient Number\", row=6, col=1)\n\nfig.update_yaxes(title_text=\"Pelvic Incidence\", row=1, col=1)\nfig.update_yaxes(title_text=\"Lumbar Lordosis Angle\", row=2, col=1)\nfig.update_yaxes(title_text=\"Pelvic Tilt Numeric\", row=3, col=1)\nfig.update_yaxes(title_text=\"Sacral Slope\", row=4, col=1)\nfig.update_yaxes(title_text=\"Degree Spondylolisthesis\", row=5, col=1)\nfig.update_yaxes(title_text=\"Pelvic Radius\", row=6, col=1)\n\nfig.update_layout(height = 1800, width = 1000, title = \"Biomechanical Features of Patients\",template = \"plotly_white\")\n\niplot(fig)","fdd8b06f":"from plotly.subplots import make_subplots\n\nfig = make_subplots(rows=3, cols=2,subplot_titles = (\"Pelvic Incidence\",\"Lumbar Lordosis Angle\",\"Pelvic Tilt Numeric\",\"Sacral Slope\",\"Degree Spondylolisthesis\",\"Pelvic Raidus\"))\n\nfig.append_trace(go.Histogram(x = A.pelvic_incidence, name = \"Abnormal\",showlegend = True,marker = dict(color = 'rgb(255, 100, 100)',line = dict(color = \"rgb(0,0,0)\",width = 1.2))),row = 1, col = 1)\nfig.append_trace(go.Histogram(x = N.pelvic_incidence, name = \"Normal\",showlegend = True,marker = dict(color = 'rgb(100, 240, 100)',line = dict(color = \"rgb(0,0,0)\",width = 1.2))),row = 1, col = 1)\n\nfig.append_trace(go.Histogram(x = A.lumbar_lordosis_angle,name = \"Abnormal\",showlegend = True,marker = dict(color = 'rgb(255, 100, 100)',line = dict(color = \"rgb(0,0,0)\",width = 1.2))),row = 1, col = 2)\nfig.append_trace(go.Histogram(x = N.lumbar_lordosis_angle,name = \"Normal\",showlegend = True,marker = dict(color = 'rgb(100, 240, 100)',line = dict(color = \"rgb(0,0,0)\",width = 1.2))),row = 1, col = 2)\n\nfig.append_trace(go.Histogram(x = A[\"pelvic_tilt numeric\"], name = \"Abnormal\",showlegend = True,marker = dict(color = 'rgb(255, 100, 100)',line = dict(color = \"rgb(0,0,0)\",width = 1.2))),row = 2, col = 1)\nfig.append_trace(go.Histogram(x = N[\"pelvic_tilt numeric\"], name = \"Normal\",showlegend = True,marker = dict(color = 'rgb(100, 240, 100)',line = dict(color = \"rgb(0,0,0)\",width = 1.2))),row = 2, col = 1)\n\nfig.append_trace(go.Histogram(x = A.sacral_slope, name = \"Abnormal\",showlegend = True,marker = dict(color = 'rgb(255, 100, 100)',line = dict(color = \"rgb(0,0,0)\",width = 1.2))),row = 2, col = 2)\nfig.append_trace(go.Histogram(x = N.sacral_slope, name = \"Normal\",showlegend = True,marker = dict(color = 'rgb(100, 240, 100)',line = dict(color = \"rgb(0,0,0)\",width = 1.2))),row = 2, col = 2)\n\nfig.append_trace(go.Histogram(x = A.degree_spondylolisthesis, name = \"Abnormal\",showlegend = True,marker = dict(color = 'rgb(255, 100, 100)',line = dict(color = \"rgb(0,0,0)\",width = 1.2))),row = 3, col = 1)\nfig.append_trace(go.Histogram(x = N.degree_spondylolisthesis, name = \"Normal\",showlegend = True,marker = dict(color = 'rgb(100, 240, 100)',line = dict(color = \"rgb(0,0,0)\",width = 1.2))),row = 3, col = 1)\n\nfig.append_trace(go.Histogram(x = A.pelvic_radius, name = \"Abnormal\",showlegend = True,marker = dict(color = 'rgb(255, 100, 100)',line = dict(color = \"rgb(0,0,0)\",width = 1.2))),row = 3, col = 2)\nfig.append_trace(go.Histogram(x = N.pelvic_radius, name = \"Normal\",showlegend = True,marker = dict(color = 'rgb(100, 240, 100)',line = dict(color = \"rgb(0,0,0)\",width = 1.2))),row = 3, col = 2)\n\nfig.update_xaxes(title_text=\"Number of Patients\", row=1, col=1)\nfig.update_xaxes(title_text=\"Number of Patients\", row=1, col=2)\nfig.update_xaxes(title_text=\"Number of Patients\", row=2, col=1)\nfig.update_xaxes(title_text=\"Number of Patients\", row=2, col=2)\nfig.update_xaxes(title_text=\"Number of Patients\", row=3, col=1)\nfig.update_xaxes(title_text=\"Number of Patients\", row=3, col=2)\n\nfig.update_yaxes(title_text=\"Pelvic Incidence\", row=1, col=1)\nfig.update_yaxes(title_text=\"Lumbar Lordosis Angle\", row=1, col=2)\nfig.update_yaxes(title_text=\"Pelvic Tilt Numeric\", row=2, col=1)\nfig.update_yaxes(title_text=\"Sacral Slope\", row=2, col=2)\nfig.update_yaxes(title_text=\"Degree Spondylolisthesis\", row=3, col=1)\nfig.update_yaxes(title_text=\"Pelvic Radius\", row=3, col=2)\n\nfig.update_layout(height=1400, width=850, title_text=\"Biomechanical Features' Frequencies For Each Classes \",template = \"plotly_white\")\n\nfig.show()\n","bee1105d":"data_swrm_plt = data1.iloc[::-1] #reverse data\nplt.style.use(\"default\")\nsns.set(style=\"whitegrid\",palette = \"muted\")\n\ndata_swrm = pd.melt(data_swrm_plt,id_vars=\"class\",\n                    var_name=\"Features\",\n                    value_name='Values')\nplt.figure(figsize = (13,8))\nsns.swarmplot(x=\"Features\", y=\"Values\",hue=\"class\", data=data_swrm)\nplt.title(\"Swarmplot\")\nplt.show()","38f63599":"import plotly.graph_objs as go\n\nclass_list = list(data1['class'].unique())\n\nlist1_max = [np.max(np.array([A.pelvic_incidence])),np.max(np.array([N.pelvic_incidence]))]\nlist2_max = [np.max(np.array([A[\"pelvic_tilt numeric\"]])),np.max(np.array([N[\"pelvic_tilt numeric\"]]))]\nlist3_max = [np.max(np.array([A.lumbar_lordosis_angle])),np.max(np.array([N.lumbar_lordosis_angle]))]\nlist4_max = [np.max(np.array([A.sacral_slope])),np.max(np.array([N.sacral_slope]))]\nlist5_max = [np.max(np.array([A.pelvic_radius])),np.max(np.array([N.pelvic_radius]))]\nlist6_max = [np.max(np.array([A.degree_spondylolisthesis])),np.max(np.array([N.degree_spondylolisthesis]))]\n\npelvic_incidence = []\npelvic_tilt_numeric = []\nlumbar_lordosis_angle = []\nsacral_slope = []\npelvic_radius = []\ndegree_spondylolisthesis = []\n\nfor i in class_list:\n    x = data1[data1[\"class\"] == i]\n    pelvic_incidence.append(sum(x.pelvic_incidence)\/len(x)) \n    pelvic_tilt_numeric.append(sum(x[\"pelvic_tilt numeric\"])\/len(x))   \n    lumbar_lordosis_angle.append(sum(x.lumbar_lordosis_angle)\/len(x)) \n    sacral_slope.append(sum(x.sacral_slope)\/len(x))\n    pelvic_radius.append(sum(x.pelvic_radius)\/len(x))\n    degree_spondylolisthesis.append(sum(x.degree_spondylolisthesis)\/len(x))  \n\n#visualization\n\ntrace1 = go.Bar(\n    x = pelvic_incidence,\n    y = class_list,\n    text = \"Pelvic Incidence Mean\",\n    textposition = \"outside\",\n    textfont = dict(size = 15),\n    orientation='h',\n    name = \"Pelvic Incidence\",\n    marker = dict(color = \"rgba(36,86,104,0.6)\",\n                 line = dict(color = \"rgb(0,0,0)\", width = 1.5))\n\n)\n\ntrace1_m = go.Bar(\n    x = list1_max,\n    y = class_list,\n    xaxis = \"x2\",\n    yaxis = \"y2\",\n    text = \"Max Pelvic Incidence\",\n    textposition = \"auto\",\n    orientation='h',\n    name = \"Max Pelvic Incidence\",\n    textfont = dict(color = \"white\"),\n    marker = dict(color = \"rgba(25,51,80,0.6)\", \n                 line = dict(color = \"rgba(0,0,0,1.0)\", width = 1.5))\n\n)\n\ntrace2 = go.Bar(\n    x = pelvic_tilt_numeric,\n    y = class_list,\n    text = \"Pelvic Tilt Numeric Mean\",\n    textposition = \"outside\",\n    textfont = dict(size = 15),\n    orientation='h',\n    name = \"Pelvic Tilt Numeric\",\n    marker = dict(color = \"rgba(13,143,129,0.6)\",\n                 line = dict(color = \"rgb(0,0,0)\", width = 1.5))\n\n\n)\ntrace2_m = go.Bar(\n    x = list2_max,\n    y = class_list,\n    xaxis = \"x2\",\n    yaxis = \"y2\",\n    text = \"Max Pelvic Tilt Numeric\",\n    textposition = \"auto\",\n    orientation='h',\n    name = \"Max Pelvic Tilt Numeric\",\n    textfont = dict(color = \"white\"),\n    marker = dict(color = \"rgba(25,94,106,0.6)\",\n                 line = dict(color = \"rgba(0,0,0,1.0)\", width = 1.5))\n\n)\n\ntrace3 = go.Bar(\n    x = lumbar_lordosis_angle,\n    y = class_list,\n    text = \"Lumbar Lordosis Angle Mean\",\n    textposition = \"outside\",\n    orientation='h',\n    textfont = dict(size = 15),\n    name = \"Lumbar Lordosis Angle\",\n    marker = dict(color = \"rgba(57,171,126,0.6)\", \n                 line = dict(color = \"rgb(0,0,0)\", width = 1.5))\n\n\n)\ntrace3_m = go.Bar(\n    x = list3_max,\n    y = class_list,\n    xaxis = \"x2\",\n    yaxis = \"y2\",\n    text = \"Max Lumbar Lordosis Angle\",\n    textposition = \"auto\",\n    textfont = dict(color = \"white\"),\n    orientation='h',\n    name = \"Max Lumbar Lordosis Angle\",\n    marker = dict(color = \"rgba(18,116,117,0.6)\", \n                 line = dict(color = \"rgba(0,0,0,1.0)\", width = 1.5))\n\n)\n\ntrace4 = go.Bar(\n    x = sacral_slope,\n    y = class_list,\n    text = \"Sacral Slope Mean\",\n    textposition = \"outside\",\n    orientation='h',\n    textfont = dict(size = 15),\n    name = \"Sacral Slope\",\n    marker = dict(color = \"rgba(110, 196 ,116,0.6)\", \n                 line = dict(color = \"rgb(0,0,0)\", width = 1.5))\n\n\n)\ntrace4_m = go.Bar(\n    x = list4_max,\n    y = class_list,\n    xaxis = \"x2\",\n    yaxis = \"y2\",\n    text = \"Max Sacral Slope\",\n    textposition = \"auto\",\n    orientation='h',\n    textfont = dict(color = \"white\"),\n    name = \"Max Sacral Slope\",\n    marker = dict(color = \"rgba(25,137,125,0.6)\", \n                 line = dict(color = \"rgba(0,0,0,1.0)\", width = 1.5))\n\n)\n\ntrace5 = go.Bar(\n    x = pelvic_radius,\n    y = class_list,\n    text = \"Pelvic Radius Mean\",\n    textposition = \"outside\",\n    textfont = dict(size = 15),\n    orientation='h',\n    name = \"Pelvic Radius\",\n    marker = dict(color = \"rgba(15,114,121,0.6)\", \n                 line = dict(color = \"rgb(0,0,0)\", width = 1.5))\n\n\n)\ntrace5_m = go.Bar(\n    x = list5_max,\n    y = class_list,\n    xaxis = \"x2\",\n    yaxis = \"y2\",\n    text = \"Max Pelvic Radius\",\n    textposition = \"auto\",\n    textfont = dict(color = \"white\"),\n    orientation='h',\n    name = \"Max Pelvic Radius\",\n    marker = dict(color = \"rgba(28,72,93,0.6)\", \n                 line = dict(color = \"rgba(0,0,0,1.0)\", width = 1.5))\n\n)\n\ntrace6 = go.Bar(\n    x = degree_spondylolisthesis,\n    y = class_list,\n    text = \"Deg. Spond. Mean\",\n    textposition = \"outside\",\n    textfont = dict(size = 15),\n    orientation='h',\n    name = \"Degree Spondylolisthesis\",\n    marker = dict(color = \"rgba(169,220,103,0.6)\", \n                 line = dict(color = \"rgb(0,0,0)\", width = 1.5))\n\n)\ntrace6_m = go.Bar(\n    x = list6_max,\n    y = class_list,\n    xaxis = \"x2\",\n    yaxis = \"y2\",\n    text = \"Max Deg. Spond.\",\n    textposition = \"auto\",\n    orientation='h',\n    textfont = dict(color = \"white\"),\n    name = \"Max Degree Spondylolisthesis\",\n    marker = dict(color = \"rgba(65,157,127,0.6)\", \n                 line = dict(color = \"rgba(0,0,0,1.0)\", width = 1.5))\n\n)\n            \ndata_bar = [trace1_m,trace5_m,trace2_m,trace3_m,trace4_m,trace6_m,trace1,trace5,trace2,trace3,trace4,trace6]\nlayout = go.Layout(template = \"plotly_white\",height = 900, width = 1000, barmode = \"group\",xaxis2 = dict(domain=[0.64,0.99],anchor = \"y2\"),yaxis2 = dict(domain=[0.6,0.98],anchor=\"x2\"),title = \"Biomechanical Features For Each Classes\") \n\nfig = go.Figure(data = data_bar, layout = layout)\n\nfig.update_xaxes(title_text = \"Mean Value\")\nfig.update_yaxes(title_text = \"Class\")\nfig.add_annotation(\n            x=1.19,#1,19\n            y=1.8,\n            showarrow = False,\n            text=\"Max Vlues of Biomechanical Features\")\n\niplot(fig)\n","bdb1d85c":"from plotly.subplots import make_subplots\n\nfig = make_subplots(rows=3, cols=2,subplot_titles = (\"Pelvic Incidence\",\"Lumbar Lordosis Angle\",\"Pelvic Tilt Numeric\",\"Sacral Slope\",\"Degree Spondylolisthesis\",\"Pelvic Raidus\"))\n\nfig.append_trace(go.Box(y = A.pelvic_incidence, name = \"Abnormal\",marker_color = 'rgb(255, 100, 100)'),row = 1, col = 1)\nfig.append_trace(go.Box(y = N.pelvic_incidence,name = \"Normal\",marker_color = 'rgb(100, 240, 100)'),row = 1, col = 1)\n\nfig.append_trace(go.Box(y = A.lumbar_lordosis_angle,name = \"Abnormal\",showlegend = True,marker_color = 'rgb(255, 100, 100)'),row = 1, col = 2)\nfig.append_trace(go.Box(y = N.lumbar_lordosis_angle,name = \"Normal\",showlegend = True,marker_color = 'rgb(100, 240, 100)'),row = 1, col = 2)\n\nfig.append_trace(go.Box(y = A[\"pelvic_tilt numeric\"],name = \"Abnormal\",showlegend = True,marker_color = 'rgb(255, 100, 100)'),row = 2, col = 1)\nfig.append_trace(go.Box(y = N[\"pelvic_tilt numeric\"],name = \"Normal\",showlegend = True,marker_color = 'rgb(100, 240, 100)'),row = 2, col = 1)\n\nfig.append_trace(go.Box(y = A.sacral_slope,name = \"Abnormal\",showlegend = True,marker_color = 'rgb(255, 100, 100)'),row = 2,col =2)\nfig.append_trace(go.Box(y = N.sacral_slope,name = \"Normal\",showlegend = True,marker_color = 'rgb(100, 240, 100)'),row = 2,col =2)\n\nfig.append_trace(go.Box(y = A.degree_spondylolisthesis,name = \"Abnormal\",showlegend = True,marker_color = 'rgb(255, 100, 100)'),row = 3,col = 1)\nfig.append_trace(go.Box(y = N.degree_spondylolisthesis,name = \"Normal\",showlegend = True,marker_color = 'rgb(100, 240, 100)'),row = 3,col = 1)\n \nfig.append_trace(go.Box(y = A.pelvic_radius,name = \"Abnormal\",showlegend = True,marker_color = 'rgb(255, 100, 100)'),row = 3 , col = 2)\nfig.append_trace(go.Box(y = N.pelvic_radius,name = \"Normal\",showlegend = True,marker_color = 'rgb(100, 240, 100)'),row = 3, col = 2)\n\nfig.update_xaxes(title_text=\"Class\", row=1, col=1)\nfig.update_xaxes(title_text=\"Class\", row=1, col=2)\nfig.update_xaxes(title_text=\"Class\", row=2, col=1)\nfig.update_xaxes(title_text=\"Class\", row=2, col=2)\nfig.update_xaxes(title_text=\"Class\", row=3, col=1)\nfig.update_xaxes(title_text=\"Class\", row=3, col=2)\n\nfig.update_yaxes(title_text=\"Pelvic Incidence\", row=1, col=1)\nfig.update_yaxes(title_text=\"Lumbar Lordosis Angle\", row=1, col=2)\nfig.update_yaxes(title_text=\"Pelvic Tilt Numeric\", row=2, col=1)\nfig.update_yaxes(title_text=\"Sacral Slope\", row=2, col=2)\nfig.update_yaxes(title_text=\"Degree Spondylolisthesis\", row=3, col=1)\nfig.update_yaxes(title_text=\"Pelvic Radius\", row=3, col=2)\n\nfig.update_layout(height=1000, width=800, title_text=\"Biomechanical Features' Quartiles and Outliers For Each Classes\",template = \"plotly_white\")\n\nfig.show()","fe4b71f8":"from plotly.subplots import make_subplots\n\nfig = make_subplots(rows=3, cols=1,subplot_titles = (\"Pelvic Incidence-Lumbar Lordosis Angle\",\"Pelvic Tilt Numeric-Sacral Slope\",\"Degree Spondylosthesis-Pelvic Radius\"))\n\nfig.append_trace(go.Scatter(\nx = A.pelvic_incidence,\ny = A.lumbar_lordosis_angle,\nmode = \"markers\",\nname = \"Abnormal\",\nmarker = dict(color = 'rgba(255, 100, 200, 0.9)') \n),row = 1, col = 1)\n\nfig.append_trace(go.Scatter(\nx = N.pelvic_incidence,\ny = N.lumbar_lordosis_angle,\nmode = \"markers\",\nname = \"Normal\",\nmarker = dict(color = 'rgba(100, 100, 250, 0.9)') #100,250,100\n),row = 1, col = 1 )\n    \n    \nfig.append_trace(go.Scatter(\nx = A[\"pelvic_tilt numeric\"],\ny = A.sacral_slope,\nshowlegend = True,\nmode = \"markers\",\nname = \"Abnormal\",\nmarker = dict(color = 'rgba(255, 100, 200, 0.9)')\n),row = 2, col = 1)\n\nfig.append_trace(go.Scatter(\nx = N[\"pelvic_tilt numeric\"],\ny = N.sacral_slope,\nshowlegend = True,\nmode = \"markers\",\nname = \"Normal\",\nmarker = dict(color = 'rgba(100, 100, 250, 0.9)')\n),row = 2, col = 1)  \n\n\nfig.append_trace(go.Scatter(\nx = A.degree_spondylolisthesis,\ny = A.pelvic_radius,\nshowlegend = True,\nmode = \"markers\",\nname = \"Abnormal\",\nmarker = dict(color = 'rgba(255, 100, 200, 0.9)')\n),row = 3, col = 1)\n\nfig.append_trace(go.Scatter(\nx = N.degree_spondylolisthesis,\ny = N.pelvic_radius,\nshowlegend = True,\nmode = \"markers\",\nname = \"Normal\",\nmarker = dict(color = 'rgba(100, 100, 250, 0.9)')\n),row = 3, col = 1)\n\nfig.update_xaxes(title_text=\"Pelvic Incidence\", row=1, col=1)\nfig.update_xaxes(title_text=\"Pelvic Tilt Numeric\", row=2, col=1)\nfig.update_xaxes(title_text=\"Degree Spondylolisthesis\", row=3, col=1)\n\nfig.update_yaxes(title_text=\"Lumbar Lordosis Angle\", row=1, col=1)\nfig.update_yaxes(title_text=\"Sacral Slope\", row=2, col=1)\nfig.update_yaxes(title_text=\"Pelvic Radius\", row=3, col=1)\n\nfig.update_layout(height=1200, width=800, title_text=\"Patients' Classes According to Biomechanical Features\",template = \"plotly_white\")\n\niplot(fig)","d513bf7c":"import seaborn as sns\n#data1 = pd.concat([x,y],axis = 1) \n\ndata1.corr() \n\nf,ax = plt.subplots(figsize=(12, 12))\nsns.heatmap(data1.corr(), annot=True,annot_kws = {\"size\": 12}, linewidths=0.5, fmt = '.3f', ax=ax)\nplt.xticks(rotation = 25)\nplt.title(\"Correlation Between Biomechanical Features\", fontsize = 20)\nplt.show()","11b0dabe":"import networkx as nx\ncorr = data1.iloc[:,0:6].corr()\n\nlinks = corr.stack().reset_index()\n\nlinks.columns = ['var1', 'var2','value']\n\n# correlation\nthreshold = 0.59\n\n# Keep only correlation over a threshold and remove self correlation (cor(A,A)=1)\nlinks_filtered=links.loc[ (links['value'] >= threshold ) & (links['var1'] != links['var2']) ]\n \n# Build your graph\nG=nx.from_pandas_edgelist(links_filtered, 'var1', 'var2', edge_attr=True) \n\nplt.figure(figsize = (10,6))\nnx.draw_circular(G, with_labels=True, node_color='orange', node_size=300, edge_color='red', linewidths=1, font_size=10)\nplt.title(\"Correlated Features(Threshold:{})\".format(threshold))\nplt.text(-0.85,-0.88,\"*Pelvic Radius has no correlation with other features\" ,fontsize = 12, color = \"black\")\nplt.show()","6afca39a":"data1_pps = data1.drop([\"lumbar_lordosis_angle\", \"pelvic_radius\", \"degree_spondylolisthesis\",\"class\"], axis = 1)\ndata1_ppl = data1.drop([\"pelvic_radius\",\"sacral_slope\",\"degree_spondylolisthesis\",\"class\"], axis = 1)\ndata1_dlp =  data1.drop([\"sacral_slope\",\"pelvic_tilt numeric\",\"pelvic_incidence\",\"class\"], axis = 1)","8391d427":"# 3D scatterplot1\ntrace1 = go.Scatter3d(\n                      x = A.pelvic_incidence,\n                      y = A[\"pelvic_tilt numeric\"],\n                      z = A.sacral_slope,\n                      mode = \"markers\",\n                      name = \"Abnormal\",\n                      marker = dict(\n                           size = 4,\n                           color = \"rgb(255,100,100)\"\n                      )\n)\n\ntrace2 = go.Scatter3d(\n                      x = N.pelvic_incidence,\n                      y = N[\"pelvic_tilt numeric\"],\n                      z = N.sacral_slope,\n                      mode = \"markers\",\n                      name = \"Normal\",\n                      marker = dict(\n                           size = 4,\n                           color = \"rgb(100,250,100)\"\n                      )\n)\ncombine = [trace1,trace2]\nlayout = go.Layout(template = \"plotly_white\",\n    scene = dict(\n    xaxis =dict(\n        title = \"Pelvic Incidence\"),\n    yaxis =dict(\n        title =\"Pelvic Tilt Numeric\"),\n    zaxis =dict(\n        title = \"Sacral Slope\"),),\n    width = 800,\n    margin = dict(l = 10,r = 10,b = 10,t = 10 )\n    )\nfig = go.Figure(data = combine, layout = layout)\niplot(fig)\n\n#heatmap\nf, ax = plt.subplots(figsize = (6,5))\nsns.heatmap(data1_pps.corr(),annot = True,annot_kws = {\"size\": 15}, linewidths = 0.8,cmap =\"Blues\", linecolor = \"black\", fmt = \".2f\",ax=ax).set(title = \"Pelvic Incidence-Pelvic Tilt Numeric-Sacral Slope\")\nplt.xticks(rotation = 45)\nplt.yticks(rotation = 0)\nplt.show()\n\n# 3D scatterplot1\ntrace1 = go.Scatter3d(\n                      x = A.pelvic_incidence,\n                      y = A[\"pelvic_tilt numeric\"],\n                      z = A.lumbar_lordosis_angle,\n                      mode = \"markers\",\n                      name = \"Abnormal\",\n                      marker = dict(\n                           size = 4,\n                           color = \"rgb(255,100,100)\"\n                      )\n)\n\ntrace2 = go.Scatter3d(\n                      x = N.pelvic_incidence,\n                      y = N[\"pelvic_tilt numeric\"],\n                      z = N.lumbar_lordosis_angle,\n                      mode = \"markers\",\n                      name = \"Normal\",\n                      marker = dict(\n                           size = 4,\n                           color = \"rgb(100,250,100)\"\n                      )\n)\ncombine = [trace1,trace2]\nlayout = go.Layout(template = \"plotly_white\",\n    scene = dict(\n    xaxis =dict(\n        title = \"Pelvic Incidence\"),\n    yaxis =dict(\n        title =\"Pelvic Tilt Numeric\"),\n    zaxis =dict(\n        title = \"Sacral Slope\"),),\n    width = 800,\n    margin = dict(l = 10,r = 10,b = 10,t = 10 )\n    )\nfig = go.Figure(data = combine, layout = layout)\niplot(fig)\n\n#heatmap\nf, ax = plt.subplots(figsize = (6,5))\n\nsns.heatmap(data1_ppl.corr(),annot = True,annot_kws = {\"size\": 15}, linewidths = 0.8,cmap =\"Blues\", linecolor = \"black\", fmt = \".2f\",ax=ax).set(title = \"Pelvic Incidence-Pelvic Tilt Numeric-Sacral Slope\")\nplt.xticks(rotation = 45)\nplt.yticks(rotation = 0)\nplt.show()\n\n# 3D scatterplot1\ntrace1 = go.Scatter3d(\n                      x = A.degree_spondylolisthesis,\n                      y = A.lumbar_lordosis_angle,\n                      z = A.pelvic_radius,\n                      mode = \"markers\",\n                      name = \"Abnormal\",\n                      marker = dict(\n                           size = 4,\n                           color = \"rgb(255,100,100)\"\n                      )\n)\n\ntrace2 = go.Scatter3d(\n                      x = N.degree_spondylolisthesis,\n                      y = N.lumbar_lordosis_angle,\n                      z = N.pelvic_radius,\n                      mode = \"markers\",\n                      name = \"Normal\",\n                      marker = dict(\n                           size = 4,\n                           color = \"rgb(100,250,100)\"\n                      )\n)\ncombine = [trace1,trace2]\nlayout = go.Layout(template = \"plotly_white\",\n    scene = dict(\n    xaxis =dict(\n        title = \"Pelvic Incidence\"),\n    yaxis =dict(\n        title =\"Pelvic Tilt Numeric\"),\n    zaxis =dict(\n        title = \"Sacral Slope\"),),\n    width = 800,\n    margin = dict(l = 10,r = 10,b = 10,t = 10 )\n    )\nfig = go.Figure(data = combine, layout = layout)\niplot(fig)\n\n#heatmap\nf, ax = plt.subplots(figsize = (6,5))\n\nsns.heatmap(data1_dlp.corr(),annot = True,annot_kws = {\"size\": 15}, linewidths = 0.8,cmap =\"Blues\", linecolor = \"black\", fmt = \".2f\",ax=ax).set(title = \"Pelvic Incidence-Pelvic Tilt Numeric-Sacral Slope\")\nplt.xticks(rotation = 45)\nplt.yticks(rotation = 0)\nplt.show()\n","4b3a3fbb":"data1[\"class\"] = [1 if each == \"Abnormal\" else 0 for each in data[\"class\"]]\n\ny_data = data1[\"class\"].values\nx_data = data1.drop([\"class\"],axis = 1)\n\ndata1.head(214) #normal patients starting at 210","bf1e5f5d":"plt.style.use('default')\n\nx = np.array(A.loc[:,'pelvic_incidence']).reshape(-1,1)\ny = np.array(A.loc[:,'sacral_slope']).reshape(-1,1)\n\nfig, axs = plt.subplots(3, 1, figsize=(8, 24), sharey=True)\n# Scatter1\naxs[0].scatter(x=x,y=y)\naxs[0].set_xlabel('Pelvic Incidence')\naxs[0].set_ylabel('Sacral Slope')\n\nx1 = np.array(A.loc[:,'lumbar_lordosis_angle']).reshape(-1,1)\ny1 = np.array(A.loc[:,'sacral_slope']).reshape(-1,1)\n# Scatter2\naxs[1].scatter(x=x1,y=y1)\naxs[1].set_xlabel('Lumbar Lordosis Angle')\naxs[1].set_ylabel('Sacral Slope')\n\nx2 = np.array(A.loc[:,'degree_spondylolisthesis']).reshape(-1,1)\ny2 = np.array(A.loc[:,'pelvic_radius']).reshape(-1,1)\n#scatter3\naxs[2].scatter(x = x2,y=y2)\naxs[2].set_xlabel(\"Degree Spondylolisthesis\")\naxs[2].set_ylabel(\"Pelvic Radius\")\nplt.show()\n","09570120":"from sklearn.linear_model import LinearRegression\n\nx = np.array(A.loc[:,'pelvic_incidence']).reshape(-1,1)\ny = np.array(A.loc[:,'sacral_slope']).reshape(-1,1)\n\nfig, axs = plt.subplots(3, 1, figsize=(10, 18), sharey=True) #10,18\n#model1\nreg = LinearRegression()\n# Predict space\npredict_space = np.linspace(min(x), max(x)).reshape(-1,1)\n# Fit\nreg.fit(x,y)\n# Predict\npredicted = reg.predict(predict_space)\n# R^2 \nprint('R^2 score 1: ',reg.score(x, y))\n# Plot regression line and scatter\naxs[0].plot(predict_space, predicted, color='black', linewidth=3,label = \"LR Prediction\")\naxs[0].scatter(x=x,y=y,label = \"Data\")\naxs[0].legend()\naxs[0].set_xlabel('Pelvic Incidence') \naxs[0].set_ylabel('Sacral Slope')\naxs[0].text(0.79,0.7 ,\"LR Prediction\" ,fontsize = 13, rotation = 19, color = \"red\") #25 rot\naxs[0].grid(True, alpha = 0.5)\naxs[0].set_title(\"A Bit of Suitable\")\n\n#model2\nreg1 = LinearRegression()\n# Predict space\npredict_space1 = np.linspace(min(x1), max(x1)).reshape(-1,1)\n# Fit\nreg1.fit(x1,y1)\n# Predict\npredicted1 = reg1.predict(predict_space)\n# R^2 \nprint('R^2 score 2: ',reg1.score(x1, y1))\n# Plot regression line and scatter\naxs[1].plot(predict_space1, predicted1, color='black', linewidth=3,label = \"LR Prediction\")\naxs[1].scatter(x=x1,y=y1,label = \"Data\")\naxs[1].legend()\naxs[1].text(0.8,0.58 ,\"LR Prediction\" ,fontsize = 13, rotation = 12, color = \"red\")\naxs[1].set_xlabel('Lumbar Lordosis Angle') \naxs[1].set_ylabel('Sacral Slope')\naxs[1].grid(True, alpha = 0.5)\naxs[1].set_title(\"Not That Suitable\")\n\n\n#model3\nreg2 = LinearRegression()\n# Predict space\npredict_space2 = np.linspace(min(x2), max(x2)).reshape(-1,1)\n# Fit\nreg2.fit(x2,y2)\n# Predict\npredicted2 = reg2.predict(predict_space)\n# R^2 \nprint('R^2 score 3: ',reg2.score(x2, y2))\n# Plot regression line and scatter\naxs[2].plot(predict_space2, predicted2, color='black', linewidth=3,label = \"LR Prediction\")\naxs[2].scatter(x=x2,y=y2,label = \"Data\")\naxs[2].legend()\naxs[2].text(0.8,0.72 ,\"LR Prediction\" ,fontsize = 13, rotation = 7.3, color = \"red\")\naxs[2].set_xlabel('Degree Spondylolisthesis') \naxs[2].set_ylabel('Pelvic Radius')\naxs[2].grid(True, alpha = 0.5)\naxs[2].set_title(\"Not Suitable\")\nplt.show()","0deef6f9":"from sklearn.neighbors import KNeighborsClassifier, LocalOutlierFactor\ndata_ml = pd.read_csv(\"..\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")\n\ny = data_ml[\"class\"] #data\nx = data_ml.drop([\"class\"],axis = 1)\n\nclf = LocalOutlierFactor()\ny_pred = clf.fit_predict(x)\nX_score = clf.negative_outlier_factor_\n\noutlier_score = pd.DataFrame()\noutlier_score[\"score\"] = X_score\noutlier_score.head()\n\nthreshold = -2.0 #-2.0\nfilter1 = outlier_score[\"score\"] < threshold\noutlier_index = outlier_score[filter1].index.tolist()\n\nx = x.drop(outlier_index)\ny = y.drop(outlier_index).values\nx.info()\nx_len = len(x)\n\nplt.figure(figsize = (13,8))\nplt.scatter(x.iloc[:,0],x.iloc[:,1],color = \"k\",s = 6,label = \"Data Points\")\nplt.scatter(x.iloc[outlier_index,0],x.iloc[outlier_index,1],color = \"red\",s = 30, label = \"Outlier\")\n\nradius = (X_score.max() - X_score)\/(X_score.max() - X_score.min())\noutlier_score[\"radius\"] = radius\nplt.scatter(x.iloc[:,0], x.iloc[:,1], s = 1000*radius, edgecolor = \"b\", facecolors = \"none\", label = \"Outlier Score\")\nplt.legend()\nplt.xlabel(\"Pelvic Incidence\")\nplt.ylabel(\"Pelvic Tilt Numeric\")\nplt.grid(True,alpha = 0.4)\nplt.text(93,-6 ,\"Number of Outliers:\"+str(len(data_ml) - x_len) ,fontsize = 18,color = \"black\") #92\nplt.title(\"Outlier Dtection Plot\")\nplt.show() \n\n","9e685298":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\n#data_ml = pd.read_csv(\"..\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")\n#x,y = data_ml.loc[:,data_ml.columns != 'class'], data_ml.loc[:,'class']\n\nscore_list_lr = []\ntrain_list = []\nfor i in range(1,10):\n\n    x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = i\/10, random_state = 40)\n\n    lr = LogisticRegression()\n    lr.fit(x_train,y_train) \n    print(\"test accuracy:{}\/Test Size:{}\".format(lr.score(x_test,y_test),i))\n    score_list_lr.append(lr.score(x_test,y_test))\n    train_list.append(lr.score(x_train,y_train))\n\nplt.figure(figsize = (13,8))\nplt.plot(range(1,10),score_list_lr,label = \"Test Accuracy\")\nplt.plot(range(1,10),train_list, label = \"Train Accuracy\")\nplt.legend()\nplt.xlabel(\"Test Sizes\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"Scores For Each Test Sizes\")\nplt.grid(True, alpha = 0.4)\nplt.show()","a36dade1":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = (1+score_list_lr.index(np.max(score_list_lr)))\/10, random_state = 40)\n\ny_pred = lr.predict(x_test)\ny_true = y_test\n\nfrom sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_true,y_pred)\n\nf, ax = plt.subplots(figsize = (6,6))\nsns.heatmap(cm,annot = True, linewidths = 0.5,cmap =\"Greens\",annot_kws = {\"size\": 12}, linecolor = \"gray\", fmt = \".0f\", ax=ax )\nplt.xlabel(\"Y Prediction\")\nplt.title(\"Confusion Matrix Logistic Regression\")\nplt.ylabel(\"Y True\")\nplt.show()\n","282e11db":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3, random_state = 42)\n\n#x_train, x_test, y_train, y_test = train_test_split(x_data,y_data,test_size = 0.3, random_state = 42)","3b648505":"#KNN model\n\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 6)\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\n\nprediction","2162f23f":"#score\nprint(\"{} nn score: {}\".format(6,knn.score(x_test,y_test)))","7d621426":"score_list_knn = []\ntrain_list = []\nfor each in range(1,25):\n    knn2 = KNeighborsClassifier(n_neighbors = each)\n    knn2.fit(x_train,y_train)\n    score_list_knn.append(knn2.score(x_test,y_test))\n    train_list.append(knn2.score(x_train,y_train))\n\nplt.figure(figsize=[12,8])\nplt.plot(range(1,25),score_list_knn, label = \"Test Accuracy\")\nplt.plot(range(1,25),train_list,c = \"orange\", label = \"Train Accuracy\")\nplt.legend()\nplt.xlabel(\"K Values\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"Scores For Each K Values\")\nplt.grid(True , alpha = 0.4)\nplt.show()\n\nprint(\"Best Accuracy(test):{}\/Neighbors:{}\".format(np.max(score_list_knn),1+score_list_knn.index(np.max(score_list_knn))))\n","e5a283ed":"knn3 = KNeighborsClassifier(n_neighbors = 1+score_list_knn.index(np.max(score_list_knn)))\nknn3.fit(x_train,y_train)\ny_pred = knn3.predict(x_test)\ny_true = y_test\n\nfrom sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_true,y_pred)\n\nf, ax = plt.subplots(figsize = (6,6))\nsns.heatmap(cm,annot = True, linewidths = 0.5,cmap =\"Greens\",annot_kws = {\"size\": 12}, linecolor = \"gray\", fmt = \".0f\", ax=ax )\nplt.xlabel(\"Y Prediction\")\nplt.title(\"Confusion Matrix KNN\")\nplt.ylabel(\"Y True\")\nplt.show()","e12cf201":"from sklearn.svm import SVC\ndata_ml = pd.read_csv(\"..\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")\nx,y = data_ml.loc[:,data_ml.columns != 'class'], data_ml.loc[:,'class']\n\nx_train, x_test, y_train, y_test = train_test_split(x_data,y_data,test_size = 0.2 , random_state = 1)\n\nsvm = SVC(random_state = 42)\nsvm.fit(x_train,y_train)\nsvm_score = svm.score(x_test,y_test)\nprint(\"Accuracy of SVM Algorithm: \",svm_score)\n#svm_score = svm.score(x_test,y_test)","4e2ddd82":"y_pred = svm.predict(x_test)\ny_true = y_test\n\nfrom sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_true,y_pred)\n\nf, ax = plt.subplots(figsize = (6,6))\nsns.heatmap(cm,annot = True, linewidths = 0.5,cmap =\"Greens\",annot_kws = {\"size\": 12}, linecolor = \"gray\", fmt = \".0f\", ax=ax )\nplt.xlabel(\"Y Prediction\")\nplt.title(\"Confusion Matrix SVM\")\nplt.ylabel(\"Y True\")\nplt.show()","e9d54291":"from sklearn.naive_bayes import GaussianNB\n\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3 , random_state = 1) #x,y\n\nnb = GaussianNB()\nnb.fit(x_train,y_train)\nnb_score = nb.score(x_test,y_test)\nprint(\"Accuracy of NB Algorithm: \",nb_score)\n","538dab1f":"y_pred = nb.predict(x_test)\ny_true = y_test\n\nfrom sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_true,y_pred)\n\nf, ax = plt.subplots(figsize = (6,6))\nsns.heatmap(cm,annot = True, linewidths = 0.5,cmap =\"Greens\",annot_kws = {\"size\": 12}, linecolor = \"gray\", fmt = \".0f\", ax=ax )\nplt.xlabel(\"Y Prediction\")\nplt.title(\"Confusion Matrix GaussianNB\")\nplt.ylabel(\"Y True\")\nplt.show()","58767a44":"from sklearn.tree import DecisionTreeClassifier\n\nx_train, x_test, y_train, y_test = train_test_split(x_data,y_data,test_size = 0.3 , random_state = 1) #x,y\n\nscore_list_dt = []\ntrain_list = []\nfor d in range(1,10):\n    clf = DecisionTreeClassifier(max_depth = d,random_state = 42)\n    clf = clf.fit(x_train, y_train)\n    score_list_dt.append(clf.score(x_test,y_test))\n    train_list.append(clf.score(x_train,y_train))\n    \nplt.figure(figsize = (13,8))\nplt.plot(range(1,10),score_list_dt,label = \"Test Score Max Depth Accuracy\")\nplt.plot(range(1,10),train_list,label = \"Train Score Max Depth Accuracy\")\nplt.legend()\nplt.xlabel(\"Max Depth\")\nplt.ylabel(\"Accuracy\")\nplt.grid(True, alpha = 0.5)\nplt.title(\"Accuricies for each Max Depth Values\")\nplt.show()\nprint(\"Best Accuracy:{}\/Max Dpeth:{}\".format(np.max(score_list_dt),1+score_list_dt.index(np.max(score_list_dt))))","b8679da1":"clf2 = DecisionTreeClassifier(max_depth = 1+score_list_dt.index(np.max(score_list_dt)),random_state = 42)\nclf2 = clf2.fit(x_train, y_train)\ny_pred = clf2.predict(x_test)\ny_true = y_test\n\nfrom sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_true,y_pred)\n\nf, ax = plt.subplots(figsize = (6,6))\nsns.heatmap(cm,annot = True, linewidths = 0.5,cmap =\"Greens\",annot_kws = {\"size\": 12}, linecolor = \"gray\", fmt = \".0f\", ax=ax )\nplt.xlabel(\"Y Prediction\")\nplt.title(\"Confusion Matrix Decision Tree\")\nplt.ylabel(\"Y True\")\nplt.show()","c8b214bd":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import r2_score\n\nx_train, x_test, y_train, y_test = train_test_split(x_data,y_data,test_size = 0.3 , random_state = 1) #x,y\n\nnum_list = [20,40,60,80,100,120,140,160]\nscore_list_rf = []\ntrain_list_rf = []\nfor i in num_list:\n    rf = RandomForestClassifier(n_estimators = i, random_state = 42) #100\n    rf.fit(x_train,y_train)\n\n    print(\"=====Number of Trees:\"+str(i)+\"=====\")\n    print(\"Random Forest Algorithm Score: \",rf.score(x_test,y_test))\n    print(\"Random Forest Algorithm Train Score: \",rf.score(x_train,y_train))\n    score_list_rf.append(rf.score(x_test,y_test))\n    train_list_rf.append(rf.score(x_train,y_train))\n\nplt.figure(figsize = (13,8))\nplt.plot(num_list,score_list_rf,label = \"Test Accuracy\")\nplt.plot(num_list,train_list_rf,label = \"Train Accuracy\")\nplt.legend()\nplt.xlabel(\"N Estimators\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"N Estimators' Effect to Accuracy\")\nplt.grid(True, alpha=0.4)\nplt.show()    ","8d74ad2c":"rf2 = RandomForestClassifier(n_estimators = 20*(1+score_list_rf.index(np.max(score_list_rf))) , random_state = 42) \nrf2.fit(x_train,y_train)\ny_pred = rf2.predict(x_test)\ny_true = y_test\n\nfrom sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_true,y_pred)\n\nf, ax = plt.subplots(figsize = (6,6))\nsns.heatmap(cm,annot = True, linewidths = 0.5,cmap =\"Greens\",annot_kws = {\"size\": 12}, linecolor = \"gray\", fmt = \".0f\", ax=ax )\nplt.xlabel(\"Y Prediction\")\nplt.title(\"Confusion Matrix\")\nplt.ylabel(\"Y True\")\nplt.show()","688cb406":"lr_s = np.max(score_list_lr).round(3)\nknn_s = np.max(score_list_knn).round(3)\nsvm_s = svm_score.round(3)\nnb_s = nb_score.round(3)\ndt_s = np.max(score_list_dt).round(3)\nrf_s = np.max(score_list_rf).round(3)\n\nlist_scores = [lr_s,knn_s,svm_s,nb_s,dt_s,rf_s]\nlist_scores.sort()\nlist_names = []\n\nfor i in list_scores:\n    if i == lr_s:\n        list_names.append(\"Logistic Regression\")\n    elif i == knn_s:\n        list_names.append(\"KNN\")\n    elif i == svm_s:\n        list_names.append(\"SVM\")\n    elif i == nb_s:\n        list_names.append(\"GaussianNB\")\n    elif i == dt_s:\n        list_names.append(\"Decision Tree\")\n    elif i == rf_s:\n        list_names.append(\"Random Forest\")\n\ntrace1 = go.Bar(\n    x = list_names,\n    y = list_scores,\n    text = list_scores,\n    textposition = \"inside\",\n    marker=dict(color = list_scores,colorbar=dict(\n            title=\"Colorbar\"\n        ),colorscale=\"Viridis\",))\n\ndata = [trace1]\nlayout = go.Layout(title = \"Comparison of Models\",template = \"plotly_white\")\n\nfig = go.Figure(data = data, layout = layout)\nfig.update_xaxes(title_text = \"Names\")\nfig.update_yaxes(title_text = \"Scores\")\nfig.show()","5f19a46c":"data_kmean = pd.read_csv(\"..\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")\nplt.scatter(data_kmean['pelvic_radius'],data_kmean['degree_spondylolisthesis'])\nplt.xlabel('Pelvic Radius')\nplt.ylabel('Degree spondylolisthesis')\nplt.grid(True,alpha = 0.4)\nplt.title(\"Normal Data\")\nplt.show()","b54210bf":"data_kmean2 = data_kmean.loc[:,['degree_spondylolisthesis','pelvic_radius']]\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters = 2)\nkmeans.fit(data_kmean2)\nlabels = kmeans.predict(data_kmean2)\nplt.scatter(data_kmean2['pelvic_radius'],data_kmean2['degree_spondylolisthesis'],c = labels)\nplt.xlabel('Pelvic Radius')\nplt.ylabel('Degree Spondylolisthesis')\nplt.grid(True,alpha = 0.4)\nplt.title(\"K-Means Prediction\")\nplt.show()","d0971f76":"inertia_list = np.empty(8)\nfor i in range(1,8):\n    kmeans = KMeans(n_clusters=i)\n    kmeans.fit(data_kmean2)\n    inertia_list[i] = kmeans.inertia_\nplt.figure(figsize = (6.5,4))\nplt.plot(range(0,8),inertia_list,'-o')\nplt.xlabel('Number of cluster')\nplt.ylabel('Inertia')\nplt.grid(True,alpha = 0.4)\nplt.title(\"Inertia Values for each Cluster Numbers\")\nplt.show()","8a8f9b18":"x_train, x_test, y_train, y_test = train_test_split(x_data,y_data,test_size = 0.2, random_state = 42) ","c11877e1":"from keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom keras.models import Sequential # initialize neural network library\nfrom keras.layers import Dense # build our layers library\n\ndef build_classifier():\n    model = Sequential()\n    model.add(Dense(units = 96, kernel_initializer = \"uniform\",activation = \"relu\", input_dim = x_train.shape[1]))\n    model.add(Dense(units = 48, kernel_initializer = \"uniform\", activation = \"linear\"))\n    model.add(Dense(units = 1, kernel_initializer = \"uniform\", activation = \"sigmoid\"))\n    \n    model.compile(optimizer = \"adam\", loss = \"binary_crossentropy\", metrics = [\"accuracy\"])\n    \n    return model\n\nclassifier = KerasClassifier(build_fn = build_classifier, epochs = 100)\naccuracies = cross_val_score(estimator = classifier, X = x_train, y = y_train, cv = 3)\nmean = accuracies.mean()\nvariance = accuracies.std()\n\nprint(\"Accuracy Mean:\"+ str(mean))\nprint(\"Accuracy Variance:\"+ str(variance))\n","25140c05":"<a id=\"5\"><\/a> <br>\n## Lineplot, Patients' Bimechanical Feature Values\n[Back to introduction](#26)\n* This plot is showing the biomechanical feature values of patients. \n* You can think dataframe index as patient number.\n* fig = It includes data and layout\n* x = X-Axis\n* y = Y-Axis\n* mode = Type of plot\n* name = Name of plot\n* marker = Plot adjectives(color, line, etc.)\n* layout = It is a dictionary that includes attributes of plot(s) like width, height, etc.","b45a142c":"<a id=\"9\"><\/a> <br>\n## Boxplot, Biomechanical Features' Quartiles and Outliers For Each Classes \n[Back to introduction](#26)\n* Boxplot is a chart type that shows quartiles and outliers.\n* fig = It includes data and layout\n* y = Y-Axis\n* name = Name of plot\n* layout = \u0131t is a dictionary that includes attributes of plot(s) like width, height, etc.","59ba10bd":"## Confusion Matrix SVM\n[Back to introduction](#26)","f754bf07":"<a id=\"25\"><\/a> <br>\n##  Artificial Neural Network(ANN)\n[Back to introduction](#26)","ce54c879":"<a id=\"19\"><\/a> <br>\n## SVM Model\n[Back to introduction](#26)","c4c006c3":"<a id=\"11\"><\/a> <br>\n## Correlation Heatmap\n[Back to introduction](#26)\n* Heatmap is a chart type that shows correlation between features.\n* There are different types for calculating correlation but this chart is using **Pearson's r** correlation. \n* Here is how to calculate it: <img src = \"https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/2b9c2079a3ffc1aacd36201ea0a3fb2460dc226f\" height = \"500\" width = \"500\"> \n* r-values: <img src = \"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/d\/d4\/Correlation_examples2.svg\/600px-Correlation_examples2.svg.png\" height = \"500\" width = \"500\"> \n* annot = Show correlation value\n* fmt = Float digits","fbbfa5aa":"<a id=\"21\"><\/a> <br>\n## Decision Tree\n[Back to introduction](#26)","360dc317":"<a id=\"10\"><\/a> <br>\n## Scatterplot\n[Back to introduction](#26)\n* These plots are showing patient feature values for some of the features.\n* fig = It includes data and layout\n* x = X-Axis\n* y = Y-Axis\n* mode = Type of plot\n* name = Name of plot\n* marker = Plot adjectives(color, line, etc.)\n* layout = \u0131t is a dictionary that includes attributes of plot(s) like width, height, etc.","9431dfa0":"<a id=\"13\"><\/a> <br>\n## 3D Scatterplots\n[Back to introduction](#26)\n* fig = It includes data and layout\n* x = X-Axis\n* y = Y-Axis\n* z = Z-Axis\n* mode = Type of plot\n* name = Name of plot\n* marker = Plot adjectives(color, line, etc.)\n* layout = It is a dictionary that includes attributes of plot(s) like width, height, etc.","b47709dc":"<a id=\"1\"><\/a> <br>\n# Data Analysis \n[Back to introduction](#26)","cdb09072":"<a id=\"8\"><\/a> <br>\n## Barplot, Feature Value Means \n[Back to introduction](#26)\n* This plot is showing feature value means for each feature.\n* In the right top of the plot there is a second chart that shows maximum values of features.\n* fig = It includes data and layout\n* x = X-Axis\n* y = Y-Axis\n* mode = Type of plot\n* name = Name of plot\n* marker = Plot adjectives(color, line, etc.)\n* text = Text\n* textposition = Textposition\n* twxtfont = Textfont\n* layout = It is a dictionary that includes attributes of plot(s) like width, height, etc.","4399f079":"<a id=\"20\"><\/a> <br> \n## Navie Bayes\n[Back to introduction](#26)","57c5b3c9":"<a id=\"24\"><\/a> <br>\n## K-Means\n[Back to introduction](#26)","16f7343c":"<a id=\"7\"><\/a> <br>\n## Swarmplot\n[Back to introduction](#26)\n* Swarmplot is a way to draw a categorical scatterplot with non-overlapping points.","7ddf3d1f":"<a id=\"14\"><\/a> <br>\n# Machine Learning(ML)\n[Back to introduction](#26)\n\nThanks to: https:\/\/www.kaggle.com\/vbmokin\/biomechanical-features-20-popular-models","b1ecf90d":"<a id=\"22\"><\/a> <br>\n## Random Forest\n[Back to introduction](#26)","fc687801":"<a id=\"17\"><\/a> <br>\n## Logistic Regression\n[Back to introduction](#26)","164bd9d9":"<a id=\"6\"><\/a> <br>\n## Histogram, Feature Values' Frequencies\n[Back to introduction](#26)\n* Histogram is a chart type that is showing frequencies for each values.\n* Red bars are abnormal, green bars are normal patients. \n* fig = It includes data and layout\n* x = X-Axis\n* name = Name of plot\n* marker = Plot adjectives(color, line, etc.)\n* layout = It is a dictionary that includes attributes of plot(s) like width, height, etc.\n* showlegend = Show label","6b3c3859":"## Confusion Matrix KNN\n[Back to introduction](#26)","f2e8d79b":"<a id=\"3\"><\/a> <br>\n## Countplot\n[Back to introduction](#26)","854bea1d":"# Conclusion\n[Back to introduction](#26)\n* We have seen ML models and statistical analysis examples. \n* We compared ML models' accuricies.\n* You can check my other kernels: https:\/\/www.kaggle.com\/mrhippo\/notebooks\n\n* If there is something wrong with this notebook please let me know in the comments.","2245e468":"<a id=\"15\"><\/a> <br>\n## Linear Regression\n[Back to introduction](#26)\n\nThanks to: https:\/\/www.kaggle.com\/kanncaa1\/machine-learning-tutorial-for-beginners\n","0b5bd848":"<a id=\"2\"><\/a> <br>\n## Features\n[Back to introduction](#26)\n* **Pelvic Incidence:**                \n* **Pelvic Tilt Numeric:**\n* **Sacral Slope:** \n<img src = \"https:\/\/d3i71xaburhd42.cloudfront.net\/5822f98e3c7456629931a805eea914d6b767d030\/2-Figure1-1.png\" height = \"400\" width = \"400\" >\n\n* **Lumbar Lordosis Angle:**\n<img src = \"https:\/\/i1.wp.com\/musculoskeletalkey.com\/wp-content\/uploads\/2017\/08\/A319013_1_En_3_Fig2_HTML.gif?w=960\" height = \"400\" width = \"400\">\n  \n  \n* **Degree Spondylolisthesis:**\n<img src = \"https:\/\/cloud2.spineuniverse.com\/sites\/default\/files\/imagecache\/large-content\/wysiwyg_imageupload\/3998\/2015\/04\/02\/wu_spondylolisthesis_grades600.jpg\" height = \"400\" width = \"400\" >\n\n\n* **Pelvic Radius:**\n<img src = \"https:\/\/www.researchgate.net\/profile\/Siwadol_Wongsak\/publication\/49636125\/figure\/fig2\/AS:340883061919753@1458284263239\/Line-drawing-showing-pelvic-radius-PR-line-and-the-pelvic-radius-measurement-technique.png\" height = \"400\" width = \"400\">\n  \n  \n* **Pelvis:**\n<img src = \"https:\/\/i2.wp.com\/upload.orthobullets.com\/topic\/12768\/images\/human-body-parts-pelvic-bone-pelvis.jpg?w=760&ssl=1\" height = \"600\" width = \"600\">\n ","71ce2e34":"<a id=\"18\"><\/a> <br>\n## Confusion Matrix Random Forest\n[Back to introduction](#26)","df763012":"## Confusion Matrix Logistic Regression\n[Back to introduction](#26)","0eea5811":"## Confusion Matrix Navie Bayes\n[Back to introduction](#26)","c71e5c0a":"## Confusion Matrix Decision Tree\n[Back to introduction](#26)","9d5c2cfa":"# Introduction <a id=\"26\"><\/a> <br>\n* In this notebook we will analyze biomechanical features of orthepedic patients and train machine learning models.\n* You can think that notebook as a mix of tutorial and real analysis. \n* If you do not understand these codes you can check these kernels(I learned from these kernels too):\n    * Plotly: https:\/\/www.kaggle.com\/kanncaa1\/plotly-tutorial-for-beginners\n    * Seaborn: https:\/\/www.kaggle.com\/kanncaa1\/seaborn-tutorial-for-beginners\n    \n## Content:\n1.  [Data Analysis](#1)\n    1.    [Features](#2) \n    1.    [Countplot](#3)\n    1.    [Pairplot](#4)\n    1.    [Lineplot, Patients' Bimechanical Feature Values](#5)   \n    1.    [Histogram, Feature Values' Frequencies](#6)\n    1.    [Swarmplot](#7)\n    1.    [Barplot, Feature Value Means](#8)\n    1.    [Boxplot, Biomechanical Features' Quartiles and Outliers For Each Classes](#9)\n    1.    [Scatterplot](#10)\n    1.    [Correlation Heatmap](#11)\n    1.    [Correlated Features](#12)\n    1.    [3D Scatterplots](#13)\n1.  [Machine Learning(ML)](#14)\n    1.    [Linear Regression](#15)\n    1.    [Outlier Detection](#16)\n    1.    [Logistic Regression](#17)\n    1.    [KNN](#18)\n    1.    [SVM](#19)\n    1.    [Navie Bayes](#20)\n    1.    [Decision Tree](#21)\n    1.    [Random Forest](#22)\n    1.    [Comparison](#23)\n    1.    [K-Means](#24)\n    1.    [Artificial Neural Network(ANN)](#25)","6a5139e9":"<a id=\"18\"><\/a> <br>\n## KNN\n[Back to introduction](#26)","a9b874c3":"<a id=\"12\"><\/a> <br>\n## Correlated Features\n[Back to introduction](#26)\n* This net is showing the correlated features according to a threshold.","eece41f5":"<a id=\"4\"><\/a> <br>\n## Pairplot\n[Back to introduction](#26)","cb43c7b1":"<a id=\"16\"><\/a> <br>\n## Outlier Detection\n[Back to introduction](#26)","645b81db":"<a id=\"23\"><\/a> <br>\n## Comparison\n[Back to introduction](#26)"}}