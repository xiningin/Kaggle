{"cell_type":{"747b3749":"code","5a8808d5":"code","f49db9bc":"code","fd603269":"code","b1f25214":"code","63f8bb4b":"code","668ec98d":"code","e149e7db":"code","02111e2f":"code","7d436644":"code","6b4909ad":"code","fb2885b1":"code","03e1c168":"code","2a9dddcb":"code","73aee0fa":"code","181024c0":"code","b9abd5d6":"code","88ca5237":"code","713f95c6":"code","b56a7989":"code","7301a89d":"code","61eefa8d":"code","7ee89023":"code","e17f3b36":"code","269f1ca5":"code","626a9e0f":"code","ba6a8455":"code","636d27ec":"code","acc4bc8c":"code","91f17973":"code","c893cee8":"code","2b19a078":"code","a91d4e06":"code","3c8836a7":"markdown","1c20d3ea":"markdown","253164e4":"markdown","610d8a25":"markdown","dc9c118a":"markdown","c146fcc1":"markdown","e92d8eed":"markdown","30784b2b":"markdown","32034ab5":"markdown","aefe7a77":"markdown","8c17643c":"markdown","7f01c5d3":"markdown","e4b3c1d0":"markdown","2e68c7cb":"markdown","7e94b7ab":"markdown","8883ac8c":"markdown","201ae999":"markdown","d37a748f":"markdown","ce27223e":"markdown","bca12ed1":"markdown","24fa07de":"markdown","4973d163":"markdown","9dd87803":"markdown","b96c0888":"markdown","a1302170":"markdown"},"source":{"747b3749":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5a8808d5":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport numpy as np \nimport pandas as pd","f49db9bc":"df = pd.read_csv('..\/input\/montcoalert\/911.csv')","fd603269":"print(df.columns.values)\n","b1f25214":"print('Rows :',df.shape[0])\nprint('Columns :',df.shape[1])\n","63f8bb4b":"df.head()","668ec98d":"\ndf = df.drop('e',axis=1)","e149e7db":"\nprint('Missing values:',df.isnull().values.sum())\ndf.isnull().sum()","02111e2f":"df.info()","7d436644":"\ndf['zip'].nunique()","6b4909ad":"\ndf_zip = pd.DataFrame(df['zip'].value_counts().head(5))\ndf_zip.rename(columns = {'zip': 'Top 5'},inplace = True)\ndf_zip.style.background_gradient(cmap='Blues')","fb2885b1":"\ndf_twp = pd.DataFrame(df['twp'].value_counts().head(5))\ndf_twp.rename(columns = {'twp':'Top 5'},inplace = True)\ndf_twp.style.background_gradient(cmap='Greens')","03e1c168":"\ndf['title'].nunique()","2a9dddcb":"df['reason'] = df['title'].apply(lambda title: title.split(':')[0])\n","73aee0fa":"df['title_code'] = df['title'].apply(lambda title: title.split(':')[1])","181024c0":"What is the most common Reason for a 911 call based off of this new column?","b9abd5d6":"\ndf['reason'].value_counts()","88ca5237":"\nfig, axes = plt.subplots(1,2,figsize=(15,5))\nsns.countplot(x='reason',data=df,order=df['reason'].value_counts().index,ax=axes[0])\naxes[0].set_title('Common Reasons for 911 Calls',size=13)\naxes[0].set(xlabel='Reason',ylabel='Count')\ndf['reason'].value_counts().plot.pie(autopct='%1.1f%%',ax=axes[1],shadow=True)\naxes[1].set(xlabel='',ylabel='')\nsns.despine(bottom=False, left=True)","713f95c6":"\n\nfig,axes = plt.subplots(figsize=(10,5))\nsns.countplot(y='title',data=df,order=df['title'].value_counts().index,palette='prism')\nsns.despine(bottom=False,left=True)\naxes.set_ylim([9,0])\naxes.set_title('Overall 911 Emergency Calls',size=15)\naxes.set(xlabel='Number of 911 calls',ylabel='')\nplt.tight_layout()","b56a7989":"\ndf[df['reason']=='Traffic'].groupby('title_code').count()['lat'].sort_values(ascending=True).plot(kind='barh',figsize=(10,5),color='darkblue')\nplt.xlabel('Number of 911 Calls')\nplt.ylabel('')\nplt.title('Traffic 911 Emergency Calls', fontsize=15)","7301a89d":"df[df['reason']=='Fire'].groupby('title_code').count()['lat'].sort_values(ascending=True).tail(10).plot(kind='barh',figsize=(10,5),color='darkred')\n\nplt.xlabel('Number of 911 Calls')\nplt.ylabel('')\nplt.title('Fire 911 Emergency Calls', fontsize=15)","61eefa8d":"df[df['reason']=='EMS'].groupby('title_code').count()['lat'].sort_values(ascending=True).tail(10).plot(kind='barh', figsize=(10, 5), color='darkgreen')\nplt.xlabel('Number of 911 Calls')\nplt.ylabel('')\nplt.title('EMS 911 Emergency Calls', fontsize=15)","7ee89023":"\ndf['timeStamp'] = pd.to_datetime(df['timeStamp'])\ndf['Hour'] = df['timeStamp'].apply(lambda time: time.hour)\ndf['Month'] = df['timeStamp'].apply(lambda time: time.month)\ndf['Day of Week'] = df['timeStamp'].apply(lambda time: time.dayofweek)\n","e17f3b36":"# dictionary string names\n\ndmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\ndf['Day of Week'] = df['Day of Week'].map(dmap)","269f1ca5":"\nfig,axes = plt.subplots(1,2,figsize=(15,5))\nsns.countplot(x='Day of Week',data=df,palette='viridis',ax=axes[0])\naxes[0].set_title('Weekly Calls',size=15)\nsns.countplot(x='Month',data=df,hue='reason',palette='viridis',ax=axes[1])\naxes[1].set_title('Monthly Calls', size=15)\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0)\nsns.despine(bottom=False,left=True)","626a9e0f":"\ndf['Date'] = df['timeStamp'].apply(lambda t: t.date())","ba6a8455":"\ndf[df['reason']=='Traffic'].groupby('Date').count()['lat'].plot(figsize=(15,5),color='darkblue')\nplt.title('Traffic',fontsize=15)\nsns.despine(bottom=False,left=True)\nplt.tight_layout()","636d27ec":"df[df['reason']=='Fire'].groupby('Date').count()['lat'].plot(figsize=(15,5),color='darkred')\nplt.title('Fire',fontsize=15)\nsns.despine(bottom=False,left=True)\nplt.tight_layout()","acc4bc8c":"df[df['reason']=='EMS'].groupby('Date').count()['lat'].plot(figsize=(15,5), color='darkgreen')\nplt.title('EMS', fontsize=15)\nsns.despine(bottom=False, left=True)\nplt.tight_layout()","91f17973":"dayHour = df.groupby(by=['Day of Week', 'Hour']).count()['reason'].unstack()\n","c893cee8":"dayHour","2b19a078":"\nplt.figure(figsize=(12,6))\nsns.heatmap(dayHour,cmap='viridis',linewidths=0.05)","a91d4e06":"plt.figure(figsize=(12,6))\n\nsns.clustermap(dayHour,cmap='viridis',linewidths=0.05)","3c8836a7":"Traffic 911 Emergency Call","1c20d3ea":"Exploratory Data Analysis (EDA)","253164e4":"How many unique title of emergency codes are there?","610d8a25":"Heatmap","dc9c118a":"Fire","c146fcc1":"Feature Engineering","e92d8eed":"What are the data types for various features?","30784b2b":"TimeStamp feature","32034ab5":"EMS 911 Emergency Calls","aefe7a77":"Overall 911 Emregency Calls","8c17643c":"Date feature","7f01c5d3":"Fire 911 Emergency Calls","e4b3c1d0":"reason features","2e68c7cb":"EMS","7e94b7ab":"Which features are available in the dataset?","8883ac8c":"title-code feature","201ae999":"How many rows and columns does the dataset have?","d37a748f":"What are the top 5 zip codes for 911 calls?","ce27223e":"Which features contain blank, null or empty values?","bca12ed1":"Which features are categorical?\nWhich features are numerical?","24fa07de":"Clustermap","4973d163":"create new features","9dd87803":"traffic","b96c0888":"What are the top 5 townships (twp) for 911 calls?","a1302170":"How many zip codes does the dataset have?"}}