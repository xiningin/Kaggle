{"cell_type":{"94448bc9":"code","f249abae":"code","df13dfad":"code","488c2a75":"code","281fd1b2":"code","35758108":"code","93040802":"code","4a3a52f9":"code","1c1e6218":"code","bbef3a62":"code","d57fc0e1":"code","061bb7ed":"code","ebf624a1":"code","9dab9211":"code","d9d7a4e6":"code","01fa81f0":"markdown","d3423708":"markdown","bb510d88":"markdown","958e0923":"markdown","b798a840":"markdown","0d91b04e":"markdown","59d24c6e":"markdown","8e78ad11":"markdown"},"source":{"94448bc9":"import re\nimport nltk\nimport random\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport spacy\nfrom spacy.util import minibatch\nimport matplotlib.pyplot as plt\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.stem import WordNetLemmatizer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline    \nfrom sklearn.model_selection import cross_val_score\nfrom matplotlib.colors import ListedColormap\nfrom sklearn.metrics import precision_score, recall_score, plot_confusion_matrix, classification_report, accuracy_score, f1_score, confusion_matrix\nfrom sklearn import metrics\n%matplotlib inline","f249abae":"sns.set_style('whitegrid')","df13dfad":"data = pd.read_csv('..\/input\/sms-spam-collection-dataset\/spam.csv')","488c2a75":"# removing unused column and renaming columns based on requirements\ndata = data.drop(['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], axis=1).rename(columns={'v1': 'target', 'v2': 'text'})","281fd1b2":"data.head()","35758108":"data.target.value_counts(normalize=True)*100","93040802":"fig, ax = plt.subplots(1, 1, figsize=(10, 6))\nf = sns.countplot(x = data['target'], palette=\"Blues_d\")\nplt.xlabel('Target Variable')\nplt.ylabel('Counts of each class')\nplt.title('Class distribution (%)')\nfor p in f.patches:\n    width = p.get_width()\n    height = p.get_height()\n    x, y = p.get_xy() \n    ax.annotate(f'{round(height\/data.shape[0], 2)*100} %', (x + width\/2, y + height*1.01), ha='center')","4a3a52f9":"# create empty model\nnlp = spacy.blank(\"en\")\n\ntext_cls = nlp.create_pipe(\"textcat\", config={\"exclusive_classes\": True, \"architecture\": \"bow\"})\n\n# add pipeline in model we can add other steps in pipeline also but for now i am not adding tokenization, lemmetization, stop word removation etc. steps\nnlp.add_pipe(text_cls)\n\n# add your customer label in pipeline\ntext_cls.add_label('ham')\ntext_cls.add_label('spam')","1c1e6218":"x_train, x_test, y_train, y_test = train_test_split(data['text'], data['target'], test_size=0.3, random_state = 7)","bbef3a62":"# Create the train and test data for the spacy model\ntrain_lables = [{'cats': {'ham': label == 'ham',\n                          'spam': label == 'spam'}}  for label in y_train]\ntest_lables = [{'cats': {'ham': label == 'ham',\n                      'spam': label == 'spam'}}  for label in y_test]\n\n# Spacy model data\ntrain_data = list(zip(x_train, train_lables))\ntest_data = list(zip(x_test, test_lables))","d57fc0e1":"def train_model(model, train_data, optimizer, batch_size, epochs=10):\n    losses = {}\n    random.seed(1)\n\n    for epoch in range(epochs):\n        random.shuffle(train_data)\n\n        batches = minibatch(train_data, size=batch_size)\n        for batch in batches:\n            # Split batch into texts and labels\n            texts, labels = zip(*batch)\n\n            # Update model with texts and labels\n            model.update(texts, labels, sgd=optimizer, losses=losses)\n        print(\"Loss: {}\".format(losses['textcat']))\n\n    return losses['textcat']","061bb7ed":"optimizer = nlp.begin_training()\nbatch_size = 5\nepochs = 20\n\n# Training the model\ntrain_model(nlp, train_data, optimizer, batch_size, epochs)","ebf624a1":"def get_predictions(model, texts):\n    # Use the model's tokenizer to tokenize each input text\n    docs = [model.tokenizer(text) for text in texts]\n\n    # Use textcat to get the scores for each doc\n    text_cls = model.get_pipe('textcat')\n    scores, _ = text_cls.predict(docs)\n\n    # From the scores, find the label with the highest score\/probability\n    predicted_labels = scores.argmax(axis=1)\n    predicted_class = [text_cls.labels[label] for label in predicted_labels]\n\n    return predicted_class","9dab9211":"train_predictions = get_predictions(nlp, x_train)\ntest_predictions = get_predictions(nlp, x_test)\ntrain_accuracy = accuracy_score(y_train, train_predictions)\ntest_accuracy = accuracy_score(y_test, test_predictions)\n\nprint(\"Train accuracy: {}\".format(train_accuracy))\nprint(\"Test accuracy: {}\".format(test_accuracy))","d9d7a4e6":"cf_train_matrix = confusion_matrix(y_train, train_predictions)\nplt.figure(figsize=(10,8))\nsns.heatmap(cf_train_matrix, annot=True, fmt='d')\n\ncf_test_matrix = confusion_matrix(y_test, test_predictions)\nplt.figure(figsize=(10,8))\nsns.heatmap(cf_test_matrix, annot=True, fmt='d')","01fa81f0":"\n### **There are numbers of way to build email classifier but in this notebook we will focus on how to create simple email classifier using one of the powerful  NLP libray SpaCy**\n\n#### **Why Spacy ?**\n* ##### **SpaCy is an open-source natural language processing library for Python. It is designed particularly for production use, and it can help us to build applications that process massive volumes of text efficiently.**\n* ##### **Another advantage of SpaCy is we can perform the various text manipulation operation very well with optimzed and minimal code**\n* ##### **Also you can create customized pipeline with different steps using SpaCy**","d3423708":"# Class distribution","bb510d88":"#### Want to learn more about SpaCy?\n[Click here to check the document](https:\/\/spacy.io\/)","958e0923":"# Import Libraries","b798a840":"<p style=\"color:#42c5f5;font-size:150%; font-weight:bold; text-align:left;\">If you found this notebook useful, please do upvote.<\/p>\n<p style=\"color:#42c5f5;font-size:150%; font-weight:bold; text-align:left;\">If you have any suggestions or questions, feel free to comment!<\/p>\n<p style=\"color:#42c5f5;font-size:150%; font-weight:bold; text-align:left;\">Thanks Happy Learning !<\/p>","0d91b04e":"### <p style=\"background-color:#34bdeb;font-family:newtimeroman;color:#e3f8ff;font-size:150%; font-syle:bold;text-align:center;border-radius:20px 60px;\">Spam or Ham Classifier<\/p>\n![spam and ham classification using spacy](https:\/\/lionbridge.ai\/wp-content\/uploads\/2020\/08\/2020-08-20_nlp_spam-detection.jpg)","59d24c6e":"# Data Load\n[Click here to download  the dataset](https:\/\/www.kaggle.com\/uciml\/sms-spam-collection-dataset)","8e78ad11":"<p style=\"background-color:#34bdeb;font-family:newtimeroman;color:#e3f8ff;font-size:150%; font-syle:bold;text-align:center;\">Create SpaCy text-categorization pipeline and model<\/p>"}}