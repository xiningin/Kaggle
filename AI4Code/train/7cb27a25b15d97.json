{"cell_type":{"47727a50":"code","f3902e53":"code","07b86f0a":"code","0a22364d":"code","60cf5a3c":"code","11554b9f":"code","a3297430":"code","b88b6ea0":"code","29bd0437":"code","1772aedc":"code","e102944c":"code","7f3fb77f":"code","bed90268":"code","22434c46":"code","8285a347":"code","2dfdd0ae":"code","1b67bb9f":"code","225b6eac":"code","f3dc0b75":"code","3c87d488":"markdown","459a042b":"markdown","c657c698":"markdown","d1487f77":"markdown","2cc965d0":"markdown","76eabeac":"markdown","72149485":"markdown","56a49e71":"markdown"},"source":{"47727a50":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\nimport numpy as np\nfrom sklearn import preprocessing\nfrom pandas.plotting import scatter_matrix, parallel_coordinates","f3902e53":"df = pd.read_csv(\"..\/input\/bc-training-0125csv\/bc_training_0125.csv\")\ndf","07b86f0a":"df_w_dummies = pd.get_dummies(df, prefix_sep='_', drop_first=True)","0a22364d":"print(df.shape)\nprint(df_w_dummies.shape)","60cf5a3c":"df_w_dummies = None","11554b9f":"for c in df.columns:\n    print(c, \":\", df[c].dtype)","a3297430":"naInfo = np.zeros(df.shape)\nnaInfo[df.isna().values] = 1\nnaInfo = pd.DataFrame(naInfo, columns=df.columns)\n\nfig, ax = plt.subplots()\nfig.set_size_inches(20, 9)\nax = sns.heatmap(naInfo, vmin=0, vmax=1, cmap=[\"white\", \"#444444\"], cbar=False, ax=ax)\nax.set_yticks([])\n\nrect = plt.Rectangle((0, 0), naInfo.shape[1], naInfo.shape[0], linewidth=1, \n                     edgecolor='lightgrey',facecolor='none')\nrect = ax.add_patch(rect)\nrect.set_clip_on(False)\n\nplt.xticks(rotation=80)\nplt.tight_layout()\nplt.show()","b88b6ea0":"df['SalePriceHigh'] = df.SalePrice > df.SalePrice.median()\n\ndf_no_cats = df.select_dtypes(['float64','int64', 'bool'])\n\n# Transform the axes, so that they all have the same range\nmin_max_scaler = preprocessing.MinMaxScaler()\ndataToPlot = pd.DataFrame(min_max_scaler.fit_transform(df_no_cats),\n                         columns=df_no_cats.columns)\n\nfig, axes = plt.subplots(nrows=2, ncols=1, figsize=[20, 12])\naxes[0].set_xticklabels(df_no_cats.columns,rotation=90)\naxes[0].tick_params(labelbottom=False, labeltop=True) \naxes[1].set_xticklabels(df_no_cats.columns,rotation=90)\nfor i in (0, 1):\n    parallel_coordinates(dataToPlot.loc[dataToPlot.SalePriceHigh == i], \n                         'SalePriceHigh', ax=axes[i], linewidth=0.5)\n    axes[i].set_title('SalePriceHigh = {}'.format(i))\n    axes[i].set_yticklabels([])\n    axes[i].legend().set_visible(False)\n\nplt.tight_layout()  # Increase the separation between the plots\nplt.show()","29bd0437":"f, ax = plt.subplots(figsize=(12, 10))\nsns.histplot(df['SalePrice'],binrange=(0,1000000))","1772aedc":"df.hist(bins=30, figsize=(20, 20))","e102944c":"corrmat = df.corr()\nf, ax = plt.subplots(figsize=(20, 15))\nsns.heatmap(corrmat, vmax=.8, square=True);","7f3fb77f":"corrmatSP_noNAs = corrmat['SalePrice'].loc[corrmat['SalePrice'].notna()]\ncorrmatSP_noNAs","bed90268":"#saleprice correlation matrix\nk = 10 #number of variables for heatmap\ncols = corrmatSP_noNAs.nlargest(k).index\ncm = df[cols].corr()\nf, ax = plt.subplots(figsize=(8, 8))\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","22434c46":"df_dropped_cols = df\nfor c in df_dropped_cols.loc[:,'ADW':'floor_stone'].columns: \n    if df_dropped_cols[c].notna().sum() < 50:\n        df_dropped_cols.drop(columns=c,inplace=True)\n    \ncorrmat2 = df_dropped_cols.corr()\n\nf, ax = plt.subplots(figsize=(20, 15))\nsns.heatmap(corrmat2, vmax=.8, square=True);","8285a347":"k = 10 #number of variables for heatmap\ncols = corrmat2['SalePrice'].nlargest(k).index\ncm = df[cols].corr()\nf, ax = plt.subplots(figsize=(8, 8))\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","2dfdd0ae":"xlist = []\nylist = []\nfor c in df_no_cats.columns:\n    if c != 'SalePrice' and df_no_cats[c].dtype != 'bool':\n        xlist.append('SalePrice')\n        ylist.append(c)\n        \nfig, ax = plt.subplots(8, 7, figsize=(23,23))\n\nfor i,col in enumerate(df_no_cats.columns[1:]):\n     #random_df.plot(kind='scatter', x=col, y='MEDV', ax=ax[i])\n    sns.regplot(x=df_no_cats[col], y=df_no_cats[\"SalePrice\"], ax=ax[i\/\/7,(i+7)%7]) \n    if i\/\/7 != 0:\n        ax[i\/\/7,(i+7)%7].set_ylabel = []\n\n#ax[1,6].axis('off')                  # HIDES AXES ON LAST ROW AND COL\n\nfig.suptitle('My Scatter Plots')\nfig.tight_layout()\nfig.subplots_adjust(bottom=.70)\n\nplt.show()\nplt.clf()\nplt.close()","1b67bb9f":"ncols = 8\nnrows = 10\n\n# create the plots\nfig = plt.figure(figsize=(23,23))\naxes = [ fig.add_subplot(nrows, ncols, r * ncols + c) for r in range(1, nrows) for c in range(1, ncols) ]\n\n# add some data\nfor i, ax in enumerate(axes):\n    if i < 59:\n        ax.plot(df_no_cats[df_no_cats.columns[i]], df_no_cats['SalePrice'],  '.')\n\n# remove the x and y ticks\nfor ax in axes:\n    ax.set_xticklabels([])\n    ax.set_yticklabels([])","225b6eac":"mystr = '''School District\nis_homestead\nover_65\nOccupancy Type\nStory Height\nConstruction Type\nRoof Type\nheat_ac\nFoundation Type\nFloor Type\nCity\nLand Value'''\n\ncols = mystr.split('\\n')\ncols","f3dc0b75":"pd.set_option('expand_frame_repr', False)\nfor c in cols:\n    print(df[[c, \"SalePrice\"]].groupby(c).describe())","3c87d488":"Let's see what the data types are for each of the columns.","459a042b":"Let's see what data is missing.","c657c698":"Below is the code to drop the variables that have less than 20 values. Let's wait on running it though. \n\n    for c in df.loc[:,'ADW':'floor_stone'].columns: \n        if df[c].notna().sum() < 20:\n        df.drop(columns=c,inplace=True)","d1487f77":"Yep, dummy variables are a no-go... Looks like subdivision has a pretty expansive number of classes, creating an insane number of columns. ","2cc965d0":"Mostly numeric variables, but a few categorical, and even a few boolean.","76eabeac":"It looks like there are some categorical variables, so let's see what happens when we create dummy variables.","72149485":"First let's download the data and put it in a pandas dataframe and take a look.","56a49e71":"The first half of the variables are missing LOTS of values, indicated by the dark lines. We may want to consider dropping some of the columns that don't meet a minimum threshhold of values. "}}