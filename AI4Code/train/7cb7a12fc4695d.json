{"cell_type":{"7666898b":"code","8cce2430":"code","5349b925":"code","3e392070":"code","16c91675":"code","81c42931":"code","d2c87aef":"code","a43bcb67":"code","e0c4a22c":"code","65590c74":"code","16614d6a":"code","87f705b0":"code","28c56730":"code","28390e58":"code","968c8ac3":"code","a89f406a":"code","7187e505":"code","8ca8e8dd":"code","4ef6e38c":"code","c0b2f2db":"code","ed50308f":"code","836b8d18":"code","b26b84f2":"code","4f7da884":"code","87ddaea4":"code","173981c1":"code","3a0a7f14":"code","2281e3c3":"code","449dde81":"code","a4e753e4":"code","042cd22b":"code","39405668":"markdown","d7b696ef":"markdown","4e705953":"markdown"},"source":{"7666898b":"# A detailed explanation of the following code will be added in the future.","8cce2430":"import itertools\nimport numpy as np\nimport pandas as pd\n\nimport os","5349b925":"LETTERS = {\n    1: '\ud83c\udf85',  # father christmas\n    2: '\ud83e\udd36',  # mother christmas\n    3: '\ud83e\udd8c',  # reindeer\n    4: '\ud83e\udddd',  # elf\n    5: '\ud83c\udf84',  # christmas tree\n    6: '\ud83c\udf81',  # gift\n    7: '\ud83c\udf80',  # ribbon\n    8: '\ud83c\udf1f',  # star\n}\nINV_LETTERS = {v: k for k, v in LETTERS.items()}","3e392070":"def find_strings_perms(strings, verbose=False):\n    all_perms = set(itertools.permutations(range(1, 8), 7))\n    perms = []\n    for s in strings:\n        perms.append([])\n        for i in range(len(s)-6):\n            p = tuple(s[i:i+7])\n            if p in all_perms:\n                perms[-1].append(p)\n    if verbose:\n        lens = [len(_) for _ in  perms]\n        print(f'There are {lens} permutations in strings, {sum(lens)} in total.')\n        lens = [len(set(_)) for _ in  perms]\n        print(f'There are {lens} unique permutations in strings, {sum(lens)} in total.')\n    return perms\n\nall_perms = set(itertools.permutations(range(1, 8), 7))\nmandatory_perms = set((1, 2) +  _ for _ in itertools.permutations(range(3, 8), 5))","16c91675":"def routn(x):\n    a = x[0]\n    b = x[1]\n    c = x[2]\n    d = x[3]\n    e = x[4]\n    tmp_st = '\ud83c\udf85\ud83e\udd36'+a+b+c+d+e+'\ud83e\udd36\ud83c\udf85'+a+b+c+d+e+'\ud83e\udd36'+a+'\ud83c\udf85'+b+c+d+e+'\ud83e\udd36'+a+b+'\ud83c\udf85'+c+d+e+'\ud83e\udd36'+a+b+c+'\ud83c\udf85'+d+e+'\ud83e\udd36'+a+b+c+d+'\ud83c\udf85'+e+'\ud83e\udd36'+a+b+c+d\n    return tmp_st","81c42931":"len(routn('\ud83e\udd8c\ud83e\udddd\ud83c\udf84\ud83c\udf81\ud83c\udf80'))","d2c87aef":"def sol_0_1(x):\n    a = x[0]\n    b = x[1]\n    c = x[2]\n    d = x[3]\n    e = x[4]\n    string = '\ud83c\udf85\ud83e\udd36'+a+b+e+c+d + '\ud83c\udf85\ud83e\udd36'+a+b+e+d+c + '\ud83c\udf85\ud83e\udd36'+a+b+d+e+c + '\ud83c\udf85\ud83e\udd36'+a+b+d+c+e\n    string = string +'\ud83c\udf85\ud83e\udd36'+a+b+c+e+d\n    string = string + routn(a+c+b+e+d) + routn(a+c+d+b+e) + routn(a+c+e+d+b)\n    string = string + '\ud83c\udf85\ud83e\udd36'+a+c+b+d+e + routn(x) + '\ud83c\udf85\ud83e\udd36'+a+c+d+e+b + '\ud83c\udf85\ud83e\udd36'+a+c+e+b+d    \n    return string\nlen(sol_0_1('\ud83e\udd8c\ud83e\udddd\ud83c\udf84\ud83c\udf81\ud83c\udf80'))","a43bcb67":"def sol_0_2(x):\n    a = x[0]\n    b = x[1]\n    c = x[2]\n    d = x[3]\n    e = x[4]\n    string = '\ud83c\udf85\ud83e\udd36'+a+d+c+e+b + '\ud83c\udf85\ud83e\udd36'+a+d+c+b+e + '\ud83c\udf85\ud83e\udd36'+a+d+b+c+e + '\ud83c\udf85\ud83e\udd36'+a+d+b+e+c\n    string = string + '\ud83c\udf85\ud83e\udd36'+a+d+e+c+b\n    string = string + routn(a+e+d+c+b)+routn(a+e+b+d+c)+routn(a+e+c+b+d)\n    string = string + '\ud83c\udf85\ud83e\udd36'+a+e+d+b+c + routn(a+d+e+b+c) + '\ud83c\udf85\ud83e\udd36'+a+e+b+c+d + '\ud83c\udf85\ud83e\udd36'+a+e+c+d+b\n    return string","e0c4a22c":"def sol_1_1(x):\n    a = x[0]\n    b = x[1]\n    c = x[2]\n    d = x[3]\n    e = x[4]\n    string = '\ud83c\udf85\ud83e\udd36'+a+c+e+d+b + '\ud83c\udf85\ud83e\udd36'+a+c+d+e+b + '\ud83c\udf85\ud83e\udd36'+a+c+d+b+e + '\ud83c\udf85\ud83e\udd36'+a+c+b+d+e + '\ud83c\udf85\ud83e\udd36'+a+c+b+e+d\n    string = string + routn(a+b+c+e+d)+routn(a+b+d+c+e)+routn(a+b+e+d+c)+routn(a+c+e+b+d)\n    string = string + '\ud83c\udf85\ud83e\udd36'+a+b+c+d+e + '\ud83c\udf85\ud83e\udd36'+a+b+d+e+c + '\ud83c\udf85\ud83e\udd36'+a+b+e+c+d\n    return string","65590c74":"def sol_1_2(x):\n    a = x[0]\n    b = x[1]\n    c = x[2]\n    d = x[3]\n    e = x[4]\n    string = '\ud83c\udf85\ud83e\udd36'+a+e+b+d+c + '\ud83c\udf85\ud83e\udd36'+a+e+c+d+b + '\ud83c\udf85\ud83e\udd36'+a+e+c+b+d \n    string = string + routn(a+e+b+c+d)\n    string = string + '\ud83c\udf85\ud83e\udd36'+a+e+d+b+c + '\ud83c\udf85\ud83e\udd36'+a+e+d+c+b\n    string = string + routn(a+d+e+c+b) + routn(a+d+b+e+c) + routn(a+d+c+b+e)\n    string = string + '\ud83c\udf85\ud83e\udd36'+a+d+b+c+e + '\ud83c\udf85\ud83e\udd36'+a+d+c+e+b + '\ud83c\udf85\ud83e\udd36'+a+d+e+b+c\n    return string","16614d6a":"def sol_2_1(x):\n    a = x[0]\n    b = x[1]\n    c = x[2]\n    d = x[3]\n    e = x[4]\n    string = '\ud83c\udf85\ud83e\udd36'+a+b+c+d+e + '\ud83c\udf85\ud83e\udd36'+a+b+c+e+d + '\ud83c\udf85\ud83e\udd36'+a+b+d+c+e\n    string = string + routn(a+c+b+d+e) + routn(a+b+e+c+d) + routn(a+b+d+e+c)\n    string = string + '\ud83c\udf85\ud83e\udd36'+a+c+e+b+d + '\ud83c\udf85\ud83e\udd36'+a+c+e+d+b\n    string = string + routn(a+c+d+e+b)\n    string = string + '\ud83c\udf85\ud83e\udd36'+a+c+b+e+d + '\ud83c\udf85\ud83e\udd36'+a+c+d+b+e + '\ud83c\udf85\ud83e\udd36'+a+b+e+d+c\n    return string","87f705b0":"def sol_2_2(x):\n    a = x[0]\n    b = x[1]\n    c = x[2]\n    d = x[3]\n    e = x[4]\n    string = '\ud83c\udf85\ud83e\udd36'+a+e+d+c+b\n    string = string + routn(a+e+c+d+b)\n    string = string + '\ud83c\udf85\ud83e\udd36'+a+e+b+c+d + '\ud83c\udf85\ud83e\udd36'+a+e+b+d+c + '\ud83c\udf85\ud83e\udd36'+a+d+e+b+c + '\ud83c\udf85\ud83e\udd36'+a+d+e+c+b\n    string = string + routn(a+d+c+e+b) + routn(a+d+b+c+e) + routn(a+e+d+b+c)\n    string = string + '\ud83c\udf85\ud83e\udd36'+a+d+b+e+c + '\ud83c\udf85\ud83e\udd36'+a+d+c+b+e + '\ud83c\udf85\ud83e\udd36'+a+e+c+b+d\n    return string","28c56730":"# LETTERS = {\n#     1: '\ud83c\udf85',  # father christmas\n#     2: '\ud83e\udd36',  # mother christmas\n#     3: '\ud83e\udd8c',  # reindeer\n#     4: '\ud83e\udddd',  # elf\n#     5: '\ud83c\udf84',  # christmas tree\n#     6: '\ud83c\udf81',  # gift\n#     7: '\ud83c\udf80',  # ribbon\n#     8: '\ud83c\udf1f',  # star\n# }\nsol_0 = ''\nsol_1 = ''\nsol_2 = ''\nfor i in ['\ud83e\udd8c\ud83e\udddd\ud83c\udf84\ud83c\udf81\ud83c\udf80', '\ud83e\udddd\ud83e\udd8c\ud83c\udf84\ud83c\udf81\ud83c\udf80', '\ud83c\udf84\ud83e\udd8c\ud83e\udddd\ud83c\udf81\ud83c\udf80', '\ud83c\udf81\ud83e\udd8c\ud83e\udddd\ud83c\udf84\ud83c\udf80', '\ud83c\udf80\ud83e\udd8c\ud83e\udddd\ud83c\udf84\ud83c\udf81']:\n    sol_0 += sol_0_1(i) + sol_0_2(i)\n    sol_1 += sol_1_1(i) + sol_1_2(i)\n    sol_2 += sol_2_1(i) + sol_2_2(i)\nlen(sol_0)","28390e58":"test = pd.DataFrame([sol_0,sol_1,sol_2], columns = ['schedule'])","968c8ac3":"test_strings = [[INV_LETTERS[c] for c in s] for s in test.schedule]","a89f406a":"test_strings_perms = [set(_) for _ in find_strings_perms(test_strings)]\nfor i, s in enumerate(test_strings_perms):\n    if mandatory_perms - s:\n        print(f'String #{i} is missing {mandatory_perms - s}.')\nif all_perms - set.union(*test_strings_perms):\n    print(f'Strings are missing {all_perms - set.union(*strings_perms)}.')","7187e505":"sub = pd.DataFrame()\nsub['schedule'] = test\nsub.to_csv('submission_2440.csv',index=False)","8ca8e8dd":"def check_if_good(a):\n    # Check if the submission is valid\n    global wildcard\n    global start\n    global other\n\n    # If all the combinations beginning with \ud83c\udf85\ud83e\udd36 are in the three submissions\n    for permu in start['Permutation'].tolist():\n        x=0\n        if permu in a[0]:\n            x+=1\n            if permu in a[1]:\n                x+=1\n                if permu in a[2]:\n                    continue\n        # For wildcards\n        permus_for_wild = wildcard[wildcard['Permutation']==permu].index.values\n        in_string = False\n        for p in permus_for_wild:\n            if wildcard.at[p, 'Factor'] in a[0]: in_string = True\n            if wildcard.at[p, 'Factor'] in a[1]: in_string = True\n            if wildcard.at[p, 'Factor'] in a[2]: in_string = True\n        if in_string: continue\n        print(\"Not all \ud83c\udf85\ud83e\udd36, missing:\", permu, \"; string:\", x)\n        return False\n\n    # If all the combinations are in the submissions\n    for permu in other['Permutation'].tolist():\n        if permu in a[0]: continue\n        if permu in a[1]: continue\n        if permu in a[2]: continue\n\n        # For wildcards\n        permus_for_wild = wildcard[wildcard['Permutation']==permu].index.values\n        in_string = False\n        for p in permus_for_wild:\n            if wildcard.at[p, 'Factor'] in a[0]: in_string = True\n            if wildcard.at[p, 'Factor'] in a[1]: in_string = True\n            if wildcard.at[p, 'Factor'] in a[2]: in_string = True\n        if not in_string:\n            print(\"Not all the combinaison, missing:\", permu)\n            return False\n\n    # If there are 2 stars or less\n    if a[0].count('\ud83c\udf1f') > 2:\n        print(\"Too many stars in string: 0\")\n        return False\n    if a[1].count('\ud83c\udf1f') > 2:\n        print(\"Too many stars in string: 1\")\n        return False\n    if a[2].count('\ud83c\udf1f') > 2:\n        print(\"Too many stars in string: 2\")\n        return False\n    return True","4ef6e38c":"permus = pd.read_csv(\"..\/input\/santa-2021\/permutations.csv\") # Import of permutations\nwildcard = pd.read_csv(\"..\/input\/santa-2021\/wildcards.csv\") # Import of wildcard permutations\n\nstart = permus[permus.Permutation.str[:2] =='\ud83c\udf85\ud83e\udd36'] # DataFrame of permutations starting with \ud83c\udf85\ud83e\udd36\nother = permus[permus.Permutation.str[:2] !='\ud83c\udf85\ud83e\udd36'].reset_index(drop=True) # DataFrame of all other permutations","c0b2f2db":"sol_0_wc2 = sol_0[:244-7]+sol_0[244*3-7:244*3]+sol_0[244-7:244*2-21-47]+sol_0[244*7-7:244*7]\\\n+sol_0[244*2-21-47:244*3-14]+sol_0[244*3:244*4-14-47+2]\\\n+'\ud83c\udf84'+sol_0[244*4-14-47+2:244*4-14-6]+'\ud83c\udf1f'+sol_0[244*4-14-5:244*4-14]+'\ud83c\udf84'\\\n+sol_0[244*4-14:244*5-14]+sol_0[244*6-14:244*6-7]+sol_0[244*5-7:244*6-14-47+2]\\\n+'\ud83e\udddd'+sol_0[244*6-14-47+2:244*6-14-6]+'\ud83c\udf1f'+sol_0[244*6-14-5:244*6-14]+'\ud83e\udddd'\\\n+sol_0[244*6-7:244*7-7]+sol_0[244*7:]\nlen(sol_0_wc2)","ed50308f":"sol_1_wc2 = sol_1[:244-21-47+2]+'\ud83c\udf81'+sol_1[244-21-47+2:244-21-6]+'\ud83c\udf1f'+sol_1[244-21-5:244-21]+'\ud83c\udf81'\\\n+sol_1[244-21:244*2-7]+sol_1[244*2:244*4-7]+sol_1[244*2-7:244*2]+sol_1[244*4-7:244*5-21-47+2]\\\n+'\ud83c\udf81'+sol_1[244*5-21-47+2:244*5-21-6]+'\ud83c\udf1f'+sol_1[244*5-21-5:244*5-21]+'\ud83c\udf81'\\\n+sol_1[244*5-21:244*5-7]+sol_1[244*10-21:244*10-14]\\\n+sol_1[244*5-7:244*6-7]+sol_1[244*8-7:244*8]+sol_1[244*6-7:244*7-14]+sol_1[244*7-7:244*8-14]+\\\nsol_1[244*8:244*10-21]+sol_1[244*10-14:]\nlen(sol_1_wc2)","836b8d18":"sol_2_wc2 = sol_2[:244*2-21-47+2]+'\ud83c\udf84'+sol_2[244*2-21-47+2:244*2-21-6]+'\ud83c\udf1f'+sol_2[244*2-21-5:244*2-21]+'\ud83c\udf84'\\\n+sol_2[244*2-21:244*4+21+47+2]\\\n+'\ud83c\udf81'+sol_2[244*4+21+47+2:244*4+21+47*2-6]+'\ud83c\udf1f'+sol_2[244*4+21+47*2-5:244*4+21+47*2]+'\ud83c\udf81'\\\n+sol_2[244*4+21+47*2:244*5-7]+sol_2[244*5:244*8-21]+sol_2[244*8-14:]\nlen(sol_2_wc2)","b26b84f2":"sample = [sol_0_wc2,sol_1_wc2,sol_2_wc2]\ncheck_if_good(sample)","4f7da884":"sol_2430 = pd.DataFrame(sample, columns = ['schedule'])","87ddaea4":"sub = pd.DataFrame()\nsub['schedule'] = sol_2430\nsub.to_csv('submission_2430.csv',index=False)","173981c1":"sol_0_2428 = sol_0[:28]+sol_0[230-47:230-6]+'\ud83c\udf1f'+sol_0[230-5:230-1]+sol_0[230-6]+sol_0[230-8]+\\\nsol_0[35:230-47]+sol_0[230:2*244-21-47-6]+'\ud83c\udf1f'+sol_0[2*244-21-47-5:2*244-21-47-1]+sol_0[2*244-21-47-6]+sol_0[2*244-21-47-8]+\\\nsol_0[2*244-21-47:2*244-7]+sol_0[244*2:]\nlen(sol_0_2428)","3a0a7f14":"sol_1_2428 = sol_1[:82-6]+'\ud83c\udf1f'+sol_1[82-5:82-1]+sol_1[82-6]+sol_1[82-8]+sol_1[7*244-21:7*244-14]+\\\nsol_1[82:82+47*2-6]+'\ud83c\udf1f'+sol_1[82+47*2-5:82+47*2-1]+sol_1[82+47*2-6]+sol_1[82+47*2-8]+\\\nsol_1[82+47*2:244-21]+sol_1[244-14:244-7]+sol_1[244:7*244-21]+sol_1[7*244-14:]\nlen(sol_1_2428)","2281e3c3":"sol_2_2428=sol_2[:115-6]+'\ud83c\udf1f'+sol_2[115-5:115-1]+sol_2[115-6]+sol_2[115-8]+\\\nsol_2[115:244-7]+sol_2[244:244+54-6]+'\ud83c\udf1f'+sol_2[244+54-5:244+54-1]+sol_2[244+54-6]+sol_2[244+54-8]+\\\nsol_2[244+54:244*2-7]+sol_2[244*2:]\nlen(sol_2_2428)","449dde81":"sample = [sol_0_2428,sol_1_2428,sol_2_2428]\ncheck_if_good(sample)","a4e753e4":"sol_2428 = pd.DataFrame(sample, columns = ['schedule'])","042cd22b":"sub = pd.DataFrame()\nsub['schedule'] = sol_2428\nsub.to_csv('submission_2428.csv',index=False)","39405668":"# 2428","d7b696ef":"# 2430","4e705953":"# w\/ wildcard"}}