{"cell_type":{"084619ec":"code","b869c647":"code","f2109178":"code","56ea4cd4":"code","0db88b1f":"code","beb814c3":"code","a95ac918":"code","986fb60e":"code","420c341f":"code","5723cac6":"code","a521b509":"code","f8f7a2d7":"code","4831fbb5":"code","14ce5a02":"code","95c90ad2":"code","7b187652":"code","ca8bac7b":"code","63c5a7e3":"code","c81f79a2":"code","32e97492":"code","225c8a18":"code","1bb6f382":"code","336a70a0":"code","82d0b749":"code","c2088f27":"code","d6cbfa0a":"code","080754f1":"code","d14291c5":"code","e56e8beb":"code","b28f637b":"code","c0b28a08":"code","52e20383":"code","be869b8f":"markdown","6a657471":"markdown","b005a4ef":"markdown","9dfca015":"markdown","abc174bf":"markdown","0df9c05b":"markdown","3d337945":"markdown","cb2ada6b":"markdown","e635bdce":"markdown","4e6d7073":"markdown","347a6291":"markdown","cce0ae00":"markdown","d38a1b19":"markdown","bc83110e":"markdown","aec75789":"markdown","7b1d7211":"markdown","b0081162":"markdown","9bbf7193":"markdown","514faaef":"markdown","2b6e01cc":"markdown","041e838f":"markdown","01e00f31":"markdown"},"source":{"084619ec":"import numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nfrom sklearn_pandas import CategoricalImputer\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor\nfrom IPython.display import FileLink\n\npd.set_option('float_format', '{:.4f}'.format)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b869c647":"train_df = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","f2109178":"train_df.head()","56ea4cd4":"corr_matrix = train_df.corr()\nfig, ax = plt.subplots(figsize=(15, 12))\nsns.heatmap(corr_matrix, vmax=0.8, square=True)\nplt.show()","0db88b1f":"# Selecting only the numeric columns\ntrain = train_df.select_dtypes(['int64', 'float64'])\ntest = test_df.select_dtypes(['int64', 'float64'])\n\n# Dropping the insignificant features\ntrain = train.drop(['GarageYrBlt', 'TotRmsAbvGrd', '1stFlrSF', 'GarageCars', 'Id'], axis=1)\ntest = test.drop(['GarageYrBlt', 'TotRmsAbvGrd', '1stFlrSF', 'GarageCars', 'Id'], axis=1)","beb814c3":"# Visualizing the unique value count in each feature\ncat_count = train.apply(lambda x: x.value_counts().shape[0]).sort_values()\ngo.Figure(data=go.Bar(x=cat_count.index, y=cat_count))","a95ac918":"# Categorical columns in numerical columns\ncats_in_nums = cat_count.loc[cat_count < 50].index\n\n# Converting the type of filtered numerical columns to categorical\ntrain.loc[:, cats_in_nums] = train.loc[:, cats_in_nums].astype('object')\ntest.loc[:, cats_in_nums] = test.loc[:, cats_in_nums].astype('object')\n\ntrain.info()","986fb60e":"# Code block to view only n top correlated features\n\n# top_features = corr_matrix.nlargest(15, 'SalePrice')['SalePrice'].index\n# cm = np.corrcoef(corr_matrix.loc[top_features].values)\n# sns.set(font_scale=1.25)\n# fig = plt.figure(figsize=(12, 9))\n# sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f',\n#              annot_kws={'size': 10}, yticklabels=top_features.values,\n#              xticklabels=top_features.values)\n# plt.show()","420c341f":"mean_price = train_df.groupby('Neighborhood')['SalePrice'].mean().reset_index()\npx.bar(mean_price, x='Neighborhood', y='SalePrice')","5723cac6":"three_bath_houses = train_df[(train_df['FullBath'] == 3)]\nthree_bath_houses_neigh = three_bath_houses.groupby('Neighborhood')['SalePrice'].mean().reset_index()\npx.bar(three_bath_houses_neigh, x='Neighborhood', y='SalePrice')","a521b509":"large_garage_houses = train_df[(train_df['GarageArea'] >= 800)]\nlarge_garage_houses_neigh = large_garage_houses.groupby('Neighborhood')['SalePrice'].mean().reset_index()\npx.bar(large_garage_houses_neigh, x='Neighborhood', y='SalePrice')","f8f7a2d7":"# Adding Neighborhood feature to the filtered datasets\ntrain['Neighborhood'] = train_df['Neighborhood']\ntest['Neighborhood'] = test_df['Neighborhood']\n\n# Extracting the SalePrice from training data\ny_train = np.log(train['SalePrice'].values)\ntrain = train.drop(['SalePrice'], axis=1)","4831fbb5":"train.info()","14ce5a02":"test.info()","95c90ad2":"px.histogram(train, 'GarageArea')","7b187652":"figure = plt.figure(figsize=(15, 9))\nax = sns.distplot(train['GarageArea'])","ca8bac7b":"px.histogram(train, 'TotalBsmtSF')","63c5a7e3":"figure = plt.figure(figsize=(15, 9))\nax = sns.distplot(train['TotalBsmtSF'])","c81f79a2":"figure = plt.figure(figsize=(15, 9))\nax = sns.distplot(train['MasVnrArea'].fillna(0))","32e97492":"imputer = SimpleImputer(strategy='median')\ntrain_num = imputer.fit_transform(train.select_dtypes(['int64', 'float64']))\ntest_num = imputer.transform(test.select_dtypes(['int64', 'float64']))","225c8a18":"cat_columns = train.select_dtypes(['object']).columns\ncat_imputer = CategoricalImputer()\ntrain_cat = cat_imputer.fit_transform(train.loc[:, cat_columns].values)\ntest_cat = cat_imputer.transform(test.loc[:, cat_columns].values)","1bb6f382":"one_hot_encoder = OneHotEncoder()\ncombined_cat_data = np.vstack([train_cat, test_cat])\ncombined_cat = one_hot_encoder.fit_transform(combined_cat_data).todense()\n\ntrain_cat = combined_cat[:train.shape[0]]\ntest_cat = combined_cat[train.shape[0]:]","336a70a0":"# Creating a scaler for input features\nX_scaler = MinMaxScaler()\n\n# Transforming the input features of both train and test\ntrain_num = X_scaler.fit_transform(train_num)\ntest_num = X_scaler.transform(test_num)","82d0b749":"X_train = np.hstack((train_num, train_cat))\nX_test = np.hstack((test_num, test_cat))","c2088f27":"models = [AdaBoostRegressor(learning_rate=2),\n          SVR(kernel='linear'),\n          RandomForestRegressor(n_estimators=200, random_state=1)]\nerrors = []\nfor model in models:\n    model_name = model.__class__.__name__\n    error = np.sqrt(abs(cross_val_score(model, X_train, y_train, cv=5, scoring='neg_mean_squared_error'))).mean()\n    errors.append([model_name, error])\n    \nresult_df = pd.DataFrame(errors, columns=['Model name', 'Average error'])","d6cbfa0a":"result_df","080754f1":"# Gamma\ngamma = ['auto', 'scale']\n# C\nC = [0.1, 0.5, 1, 50, 100, 1000]\n# epsilon\nepsilon = [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1, 5, 10]\n\n# Creating the random grid\nrandom_grid = {'gamma': gamma,\n               'C': C,\n               'epsilon': epsilon\n              }\n\n# Creating an instance of `SVR`\nestimator = SVR(kernel='linear', gamma='auto')\n# Performing random search of parameters\nrf_random = RandomizedSearchCV(estimator, random_grid,\n                               n_iter=100, cv=5, verbose=2,\n                               random_state=7, n_jobs=-1)\n# Commenting out the below lines as the tuning takes long time to complete\n# rf_random.fit(X_train, y_train)","d14291c5":"# Get the CV results\n# rf_random.cv_results_","e56e8beb":"# Get the best hyperparameters\n# rf_random.best_params_","b28f637b":"estimator = SVR(C=0.1, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',\n                kernel='linear', max_iter=-1, shrinking=True, tol=0.001, verbose=False)\nerror = np.sqrt(abs(cross_val_score(estimator, X_train, y_train, cv=5, scoring='neg_mean_squared_error'))).mean()\nprint(f'Model: {estimator.__class__.__name__}, Average error: {error}')\n\nestimator.fit(X_train, y_train)\npredictions = estimator.predict(X_test)\n# Reversing the log transformation\npredicted_saleprice = np.exp(predictions)","c0b28a08":"submission_df = pd.DataFrame({'Id': test_df['Id'], 'SalePrice': predicted_saleprice.flatten()})\nsubmission_df.to_csv('submission.csv', index=False)\nFileLink('submission.csv')","52e20383":"submission_df.head()","be869b8f":"According to the statement in the zen of Python,\n> **Simple is better than complex.**\n\nIt is always better to start with a simple rather than a complex implementation. That's why I have built a simple model in this kernel based on my assumptions on the data.\n\nKindly let me know if you have any suggestions or feedback to improve so that I can learn from you. Also, please ***upvote*** if you like this kernel and the efforts put on it. ","6a657471":"**Imputing the missing numerical values with the median value as the features are not uniformly distributed**","b005a4ef":"## Modelling","9dfca015":"**Performing cross-validation of different models on 5 folds of training data**","abc174bf":"**Combining the processed numerical and categorical features**","0df9c05b":"**Scaling the numeric columns**","3d337945":"**Creating output CSV file in the required format**","cb2ada6b":"**Imputing the missing categorical value with the most frequent value**","e635bdce":"*The average error has reduced from **0.1439** to **0.1421***","4e6d7073":"**Choosing the regression model ('SVR') with lowest RMSE and performing hyperparameter tuning using RandomizedSearchCV**","347a6291":"## Exploratory Data Analysis","cce0ae00":"> Neighborhood vs mean SalePrice","d38a1b19":"**Based on the hyperparameter tuning using the RandomizedSearchCV the following are the parameters of the best estmator**\n\n(C=0.1, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale', kernel='linear', max_iter=-1, shrinking=True, tol=0.001, verbose=False)","bc83110e":"> Neighborhood vs mean SalePrice on houses with larger garage areas","aec75789":"> Neighborhood vs mean SalePrice on houses with three bathrooms","7b1d7211":"## Feature Engineering","b0081162":"Finding whether **'Neighborhood'** has an impact on other features such as **'FullBath', 'GarageArea'**","9bbf7193":"**Visualizing the distribution of some features with missing values**","514faaef":"**Checking for features with missing values**","2b6e01cc":"**Cross-validating the model with the best hyperparameters on the train data and using it to predict the test data**","041e838f":"**Finding the numerical columns with categories**","01e00f31":"**One-hot encoding the categorical columns**"}}