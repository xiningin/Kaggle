{"cell_type":{"e452d4d3":"code","9184999f":"code","89ef273c":"code","faea64a6":"code","1497d985":"code","c1a5b0ab":"code","e69b9eb6":"code","2e353a59":"code","7a2a7072":"code","546ef1cd":"code","59458414":"code","17ffe32f":"code","f8bf3d9a":"code","299348b3":"code","f51177f1":"code","648ed59f":"code","a0a0c57b":"code","da30b0b9":"code","ddef4315":"code","53bf47e9":"code","1badb092":"code","2e272c5c":"code","aaa61bdb":"code","792f33b7":"code","935d09d2":"code","273a6184":"code","fbd7b43c":"code","9b7e3aa9":"code","4503c3fe":"code","e3958b42":"code","397b817b":"code","187300fb":"code","31c6cb0a":"code","e5826a1e":"code","100015b2":"code","9b293829":"code","90f3feb0":"code","3cae3bd7":"code","d2995c29":"code","d2102e4f":"code","9ddebb1e":"code","51165314":"code","36f836a8":"code","db9e67a4":"code","9b8d3dff":"code","c1f1be9f":"code","a770644c":"code","4f815a04":"code","18b91b90":"code","a810fc6b":"code","59895694":"code","9435311e":"code","d58b316e":"code","cbf6cf63":"code","859d407d":"code","af8b9d83":"code","cb4baa43":"code","9575d36c":"code","f33b1490":"code","cabe3897":"code","c54b7a3a":"code","bb827f64":"code","2421a29e":"code","6fafe192":"code","cafa123a":"code","7c10cdd7":"code","19bfb55d":"code","192d4f93":"code","a4ea89d5":"code","d1121cf1":"code","d5e9d94c":"code","9eaa8166":"code","39303eda":"code","4eaf8342":"markdown","83662d29":"markdown","9a41dc9a":"markdown","7a1805ec":"markdown","9e5d8082":"markdown","2301c10c":"markdown","032509a5":"markdown","dbd31125":"markdown","3b7823c2":"markdown","4227234b":"markdown","141c47d4":"markdown","2418f0cf":"markdown","7f4db8af":"markdown","185c56a5":"markdown","a26d6129":"markdown","793964ac":"markdown","4fce74ff":"markdown","888f7012":"markdown","1111d419":"markdown"},"source":{"e452d4d3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn')\nsns.set(font_scale=2.5)\n\nimport missingno as msno\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","9184999f":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\ndf_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1 # \uc790\uc2e0\uc744 \ud3ec\ud568\ud574\uc57c\ud558\ub2c8 1\uc744 \ub354\ud569\ub2c8\ub2e4\ndf_test['FamilySize'] = df_test['SibSp'] + df_test['Parch'] + 1 # \uc790\uc2e0\uc744 \ud3ec\ud568\ud574\uc57c\ud558\ub2c8 1\uc744 \ub354\ud569\ub2c8\ub2e4\n\ndf_test.loc[df_test.Fare.isnull(), 'Fare'] = df_test['Fare'].mean()\n\ndf_train['Fare'] = df_train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\ndf_test['Fare'] = df_test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)","89ef273c":"df_train.head(10)","faea64a6":"df_train.shape","1497d985":"df_train.describe()","c1a5b0ab":"df_test.describe()","e69b9eb6":"for col in df_train.columns:\n    msg = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_train[col].isnull().sum() \/ df_train[col].shape[0]))\n    print(msg)","2e353a59":"msno.matrix(df=df_train.iloc[:, :], figsize=(8, 8), color=(0.9, 0.5, 0.2))","7a2a7072":"msno.bar(df=df_train.iloc[:, :], figsize=(8, 8), color=(0.9, 0.5, 0.2))","546ef1cd":"f, ax = plt.subplots(1, 2, figsize=(18, 8))\n\ndf_train['Survived'].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.1f%%', ax=ax[0], shadow=True)\nax[0].set_title('Pie plot - Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived', data=df_train, ax=ax[1])\nax[1].set_title('Count plot - Survived')\nplt.show()","59458414":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).count()","17ffe32f":"df_train[['Pclass', 'Survived']].groupby(['Pclass']).sum()","f8bf3d9a":"pd.crosstab(df_train['Pclass'], df_train['Survived'], margins=True).style.background_gradient(cmap='Dark2')","299348b3":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False).plot()","f51177f1":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot()","648ed59f":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar()","a0a0c57b":"y_position = 1.02\nf, ax = plt.subplots(1, 2, figsize=(18, 9))\ndf_train['Pclass'].value_counts().plot.bar(color=['#CD7F32', '#FFDF00', '#D3D3D3'], ax=ax[0])\nax[0].set_title('Number of passengers By Pclass', y=y_position)\nax[0].set_ylabel('Count')\nsns.countplot('Pclass', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Pclass: Survived sv Dead', y=y_position)\nplt.show()","da30b0b9":"f, ax = plt.subplots(1, 2, figsize=(18, 9))\ndf_train[['Sex', 'Survived']].groupby(['Sex'], as_index=True).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\nsns.countplot('Sex', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Sex: Survived vs Dead')\nplt.show()","ddef4315":"df_train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean()","53bf47e9":"pd.crosstab(df_train['Sex'], df_train['Survived'], margins=True).style.background_gradient(cmap='Dark2')","1badb092":"sns.factorplot('Pclass', 'Survived', hue='Sex', data=df_train, size=6, aspect=1.5)","2e272c5c":"sns.factorplot(x='Sex', y='Survived', col='Pclass',\n              data=df_train, satureation=.5,\n               size=9, aspect=1\n              )","aaa61bdb":"sns.factorplot(x='Sex', y='Survived', hue='Pclass',\n              data=df_train, satureation=.5,\n               size=9, aspect=1\n              )","792f33b7":"print('\uc81c\uc77c \ub098\uc774 \ub9ce\uc740 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].max()))\nprint('\uc81c\uc77c \uc5b4\ub9b0 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].min()))\nprint('\ud0d1\uc2b9\uac1d \ud3c9\uade0 \ub098\uc774 : {:.1f} Years'.format(df_train['Age'].mean()))","935d09d2":"fig, ax = plt.subplots(1, 1, figsize=(9, 5))\nsns.kdeplot(df_train[df_train['Survived'] == 1]['Age'], ax=ax)\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Age'], ax=ax)\nplt.legend(['Survived == 1', 'Survived == 0'])\nplt.show()","273a6184":"i = 10\ndf_train[df_train['Age'] < i]['Survived'].sum()","fbd7b43c":"len(df_train[df_train['Age'] < i]['Survived'])","9b7e3aa9":"i = 10\ndf_train[df_train['Age'] < i]['Survived'].sum() \/ len(df_train[df_train['Age'] < i]['Survived'])","4503c3fe":"change_age_range_survival_ratio = []\n\nfor i in range(1, 80):\n    change_age_range_survival_ratio.append(df_train[df_train['Age'] < i]['Survived'].sum() \/ len(df_train[df_train['Age'] < i]['Survived']))\n    \nplt.figure(figsize=(7, 7))\nplt.plot(change_age_range_survival_ratio)\nplt.title('Survival rate change depending on range of Age', y=1.02)\nplt.ylabel('Survival rate')\nplt.xlabel('Range of Age(0~x)')\nplt.show()","e3958b42":"f, ax = plt.subplots(1, 2, figsize=(18, 8))\nsns.violinplot('Pclass', 'Age', hue='Survived', data=df_train, scale='count', split=True, ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0, 110, 10))\n\nsns.violinplot('Sex', 'Age', hue='Survived', data=df_train, scale='count', split=True, ax=ax[1])\nax[1].set_title('Sex and aAge vs Survived')\nax[1].set_yticks(range(0, 110, 10))\nplt.show()","397b817b":"df_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=True).mean()","187300fb":"df_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=True).mean().sort_values(by='Survived')","31c6cb0a":"df_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=True).mean().sort_index()","e5826a1e":"f, ax = plt.subplots(1, 1, figsize=(7, 7))\ndf_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=True).mean().sort_values(by='Survived', ascending=True).plot.bar(ax=ax)","100015b2":"f,ax=plt.subplots(2, 2, figsize=(20,15))\nsns.countplot('Embarked', data=df_train, ax=ax[0,0])\nax[0,0].set_title('(1) No. Of Passengers Boarded')\nsns.countplot('Embarked', hue='Sex', data=df_train, ax=ax[0,1])\nax[0,1].set_title('(2) Male-Female Split for Embarked')\nsns.countplot('Embarked', hue='Survived', data=df_train, ax=ax[1,0])\nax[1,0].set_title('(3) Embarked vs Survived')\nsns.countplot('Embarked', hue='Pclass', data=df_train, ax=ax[1,1])\nax[1,1].set_title('(4) Embarked vs Pclass')\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","9b293829":"df_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1","90f3feb0":"print(\"Maximum size of Family: \", df_train['FamilySize'].max())\nprint(\"Minimum size of Family: \", df_train['FamilySize'].min())","3cae3bd7":"f,ax=plt.subplots(1, 3, figsize=(40,10))\nsns.countplot('FamilySize', data=df_train, ax=ax[0])\nax[0].set_title('(1) No. Of Passengers Boarded', y=1.02)\n\nsns.countplot('FamilySize', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('(2) Survived countplot depending on FamilySize',  y=1.02)\n\ndf_train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax[2])\nax[2].set_title('(3) Survived rate depending on FamilySize',  y=1.02)\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","d2995c29":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","d2102e4f":"# \uc544\ub798 \uc904\uc740 \ub4a4\ub2a6\uac8c \ubc1c\uacac\ud558\uc600\uc2b5\ub2c8\ub2e4. 13\ubc88\uc9f8 \uac15\uc758\uc5d0 \uc5b8\uae09\ub418\ub2c8, \uc77c\ub2e8 \ub530\ub77c\uce58\uc2dc\uace0 \ub118\uc5b4\uac00\uba74 \ub429\ub2c8\ub2e4.\ndf_test.loc[df_test.Fare.isnull(), 'Fare'] = df_test['Fare'].mean() # testset \uc5d0 \uc788\ub294 nan value \ub97c \ud3c9\uade0\uac12\uc73c\ub85c \uce58\ud658\ud569\ub2c8\ub2e4.\n\ndf_train['Fare'] = df_train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\ndf_test['Fare'] = df_test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)","9ddebb1e":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","51165314":"df_train.head()","36f836a8":"df_train['Ticket'].value_counts()","db9e67a4":"df_train['Initial']= df_train.Name.str.extract('([A-Za-z]+)\\.')\n    \ndf_test['Initial']= df_test.Name.str.extract('([A-Za-z]+)\\.')","9b8d3dff":"df_train['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)\n\ndf_test['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)","c1f1be9f":"df_train.groupby('Initial').mean()","a770644c":"df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mr'),'Age'] = 33\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mrs'),'Age'] = 36\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Master'),'Age'] = 5\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Miss'),'Age'] = 22\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Other'),'Age'] = 46\n\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mr'),'Age'] = 33\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mrs'),'Age'] = 36\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Master'),'Age'] = 5\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Miss'),'Age'] = 22\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Other'),'Age'] = 46","4f815a04":"df_train['Embarked'].fillna('S', inplace=True)","18b91b90":"df_train['Age_cat'] = 0\ndf_train.loc[df_train['Age'] < 10, 'Age_cat'] = 0\ndf_train.loc[(10 <= df_train['Age']) & (df_train['Age'] < 20), 'Age_cat'] = 1\ndf_train.loc[(20 <= df_train['Age']) & (df_train['Age'] < 30), 'Age_cat'] = 2\ndf_train.loc[(30 <= df_train['Age']) & (df_train['Age'] < 40), 'Age_cat'] = 3\ndf_train.loc[(40 <= df_train['Age']) & (df_train['Age'] < 50), 'Age_cat'] = 4\ndf_train.loc[(50 <= df_train['Age']) & (df_train['Age'] < 60), 'Age_cat'] = 5\ndf_train.loc[(60 <= df_train['Age']) & (df_train['Age'] < 70), 'Age_cat'] = 6\ndf_train.loc[70 <= df_train['Age'], 'Age_cat'] = 7\n\ndf_test['Age_cat'] = 0\ndf_test.loc[df_test['Age'] < 10, 'Age_cat'] = 0\ndf_test.loc[(10 <= df_test['Age']) & (df_test['Age'] < 20), 'Age_cat'] = 1\ndf_test.loc[(20 <= df_test['Age']) & (df_test['Age'] < 30), 'Age_cat'] = 2\ndf_test.loc[(30 <= df_test['Age']) & (df_test['Age'] < 40), 'Age_cat'] = 3\ndf_test.loc[(40 <= df_test['Age']) & (df_test['Age'] < 50), 'Age_cat'] = 4\ndf_test.loc[(50 <= df_test['Age']) & (df_test['Age'] < 60), 'Age_cat'] = 5\ndf_test.loc[(60 <= df_test['Age']) & (df_test['Age'] < 70), 'Age_cat'] = 6\ndf_test.loc[70 <= df_test['Age'], 'Age_cat'] = 7","a810fc6b":"def category_age(x):\n    if x < 10:\n        return 0\n    elif x < 20:\n        return 1\n    elif x < 30:\n        return 2\n    elif x < 40:\n        return 3\n    elif x < 50:\n        return 4\n    elif x < 60:\n        return 5\n    elif x < 70:\n        return 6\n    else:\n        return 7    \n    \ndf_train['Age_cat_2'] = df_train['Age'].apply(category_age)","59895694":"print('1\ubc88 \ubc29\ubc95, 2\ubc88 \ubc29\ubc95 \ub458\ub2e4 \uac19\uc740 \uacb0\uacfc\ub97c \ub0b4\uba74 True \uc918\uc57c\ud568 -> ', (df_train['Age_cat'] == df_train['Age_cat_2']).all())","9435311e":"df_train.drop(['Age', 'Age_cat_2'], axis=1, inplace=True)\ndf_test.drop(['Age'], axis=1, inplace=True)","d58b316e":"df_train['Initial'] = df_train['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})\ndf_test['Initial'] = df_test['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})","cbf6cf63":"df_train['Embarked'].unique()","859d407d":"df_train['Embarked'] = df_train['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})\ndf_test['Embarked'] = df_test['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})","af8b9d83":"df_train['Sex'] = df_train['Sex'].map({'female': 0, 'male': 1})\ndf_test['Sex'] = df_test['Sex'].map({'female': 0, 'male': 1})","cb4baa43":"heatmap_data = df_train[['Survived', 'Pclass', 'Sex', 'Fare', 'Embarked', 'FamilySize', 'Initial', 'Age_cat']] \n\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(14, 12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(heatmap_data.astype(float).corr(), linewidths=0.1, vmax=1.0,\n           square=True, cmap=colormap, linecolor='white', annot=True, annot_kws={\"size\": 16})\n\ndel heatmap_data","9575d36c":"df_train = pd.get_dummies(df_train, columns=['Initial'], prefix='Initial')\ndf_test = pd.get_dummies(df_test, columns=['Initial'], prefix='Initial')","f33b1490":"df_train = pd.get_dummies(df_train, columns=['Embarked'], prefix='Embarked')\ndf_test = pd.get_dummies(df_test, columns=['Embarked'], prefix='Embarked')","cabe3897":"df_train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)\ndf_test.drop(['PassengerId', 'Name',  'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)","c54b7a3a":"df_train.head()","bb827f64":"df_test.head()","2421a29e":"X_train = df_train.drop('Survived', axis=1).values\ntarget_label = df_train['Survived'].values\nX_test = df_test.values","6fafe192":"X_tr, X_vld, y_tr, y_vld = train_test_split(X_train, target_label, test_size=0.3, random_state=2019)","cafa123a":"from sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import *\nfrom sklearn.tree import *\nfrom sklearn.ensemble import *\nfrom sklearn.neighbors import *\nfrom sklearn.svm import *\nfrom sklearn import metrics","7c10cdd7":"lr_model = LogisticRegression()\nlr_model.fit(X_tr, y_tr)\nprediction = lr_model.predict(X_vld)\n\nacc_lr_model = round(lr_model.score(X_tr, y_tr) * 100, 2)\nprint(round(acc_lr_model,2,), \"%\")","19bfb55d":"random_forest = RandomForestClassifier(criterion='gini', n_estimators=700,\n                                      min_samples_split=10, min_samples_leaf=1,\n                                      max_features='auto', oob_score=True,\n                                      random_state=1, n_jobs=-1)\nrandom_forest.fit(X_tr, y_tr)\nprediction = random_forest.predict(X_vld)\n\nacc_random_forest = round(random_forest.score(X_tr, y_tr) * 100, 2)\nprint(round(acc_random_forest,2,), \"%\")","192d4f93":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_tr, y_tr)\nprediction = decision_tree.predict(X_vld)\n\nacc_decision_tree = round(decision_tree.score(X_tr, y_tr) * 100, 2)\nprint(round(acc_decision_tree,2,), \"%\")","a4ea89d5":"knn_model = KNeighborsClassifier(n_neighbors = 4)\nknn_model.fit(X_tr, y_tr)\nprediction = knn_model.predict(X_vld)\n\nacc_knn_model = round(knn_model.score(X_tr, y_tr) * 100, 2)\nprint(round(acc_knn_model,2,), \"%\")","d1121cf1":"svc_model = SVC()\nsvc_model.fit(X_tr, y_tr)\nprediction = svc_model.predict(X_vld)\n\nacc_svc_model = round(svc_model.score(X_tr, y_tr) * 100, 2)\nprint(round(acc_svc_model,2,), \"%\")","d5e9d94c":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission.head()","9eaa8166":"prediction = random_forest.predict(X_test)\nsubmission['Survived'] = prediction","39303eda":"submission.to_csv('.\/titanic_submission.csv', index=False)","4eaf8342":"# MODEL","83662d29":"# Pclass","9a41dc9a":"# string to numerical","7a1805ec":"## Both Sex and Pclass","9e5d8082":"# Fill Null","2301c10c":"# ONE-HOT Encoding","032509a5":"# Embarked","dbd31125":"## Pclass, Sex, Age","3b7823c2":"# Cabin","4227234b":"### \uce90\uae00\ucf54\ub9ac\uc544 \uc774\uc720\ud55c\ub2d8\uc758 \uac15\uc88c\ub97c \ubcf4\uba70 \uacf5\ubd80\ud558\uba74\uc11c \ud588\uc2b5\ub2c8\ub2e4.","141c47d4":"# Sex","2418f0cf":"# Fare","7f4db8af":"# Ticket","185c56a5":"# Family = SibSp + Parch","a26d6129":"## Prediction on Test set ","793964ac":"# Age","4fce74ff":"## Split dataset into train, valid, test set\u00b6","888f7012":"# Drop Columns ","1111d419":"# Continuous to categorical"}}