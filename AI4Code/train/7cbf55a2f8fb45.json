{"cell_type":{"8c3af83b":"code","21fa8b82":"code","07bfd8a4":"code","41c45b66":"code","c258ab1e":"code","88760e4e":"code","11f1e702":"code","7987ad11":"code","c16f5105":"code","557a57c1":"code","9455c165":"code","a758b5d1":"code","614caa45":"code","11c8181a":"code","c11dd0bc":"code","f45e2d97":"code","4d041cec":"code","568c94eb":"code","782fdf7a":"code","5a51a4db":"code","d6178d85":"code","38886d58":"code","6cbe7b75":"code","795e570e":"code","831f035c":"code","1e3dbb2e":"code","5c754846":"code","ca1515e4":"code","50b30505":"code","833be37b":"code","2609038d":"code","0116552c":"code","adc77e8b":"code","87934505":"code","5c1f3cc3":"code","de3cdf03":"code","f289eb36":"code","9e0404ae":"code","23f1c703":"code","767eabbf":"code","238d432a":"code","f1567c90":"code","a51927db":"code","ebd956ac":"code","75ebbc3f":"code","61109297":"code","87e06ba4":"code","72f0267f":"code","619c447a":"code","96e7b107":"code","432caec4":"code","ff967013":"code","770c69d0":"code","d4852fab":"code","ac5df5ef":"code","b2d21898":"code","0f87f263":"code","bfd3f055":"code","6f5b2ad0":"markdown","51047aec":"markdown","268fc14b":"markdown","f043a2ce":"markdown","011d3133":"markdown","cfc078b0":"markdown","b743be87":"markdown","6f84b8ec":"markdown","e6374f33":"markdown","a091c785":"markdown","fb7e70c8":"markdown","b3df973d":"markdown","50c57d6c":"markdown","a71f5a98":"markdown","538d32e8":"markdown","accaa3e6":"markdown","40218b37":"markdown","509a2ad4":"markdown","cb51451f":"markdown","28c76b01":"markdown","f204f755":"markdown","420e79c3":"markdown","6df34245":"markdown"},"source":{"8c3af83b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport matplotlib","21fa8b82":"heart =pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\nheart.head()","07bfd8a4":"heart.info()","41c45b66":"heart.describe()","c258ab1e":"heart.columns","88760e4e":"heart.isnull().sum()","11f1e702":"heart.corr()","7987ad11":"heart=heart.drop('fbs',axis=1)","c16f5105":"matplotlib.rcParams['figure.figsize'] =[10,7]\nmatplotlib.rcParams.update({'font.size': 12})\nmatplotlib.rcParams['font.family'] = 'sans-serif'","557a57c1":"heart.hist(figsize=(15,15),edgecolor='black');","9455c165":"sns.countplot(x='target',data=heart)\nplt.title('target = 1 or 0');","a758b5d1":"sns.countplot(x='sex',hue='target',data=heart)\nplt.title('1 = positif; 0 = negatif')\nplt.xlabel('sex => 1 = male; 0 = female')","614caa45":"sns.countplot(x='age',data=heart);","11c8181a":"from sklearn.model_selection import train_test_split \nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score","c11dd0bc":"x=heart.drop('target',axis=1)\ny=heart.target","f45e2d97":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.20)","4d041cec":"print(x_train.shape,y_train.shape,x_test.shape,y_test.shape)","568c94eb":"from sklearn import linear_model","782fdf7a":"#Train the model\nmodel = linear_model.LinearRegression()","5a51a4db":"#Fit the model\nmodel.fit(x_train, y_train)","d6178d85":"#Score\/Accuracy\nprint(\"Accuracy --> \", model.score(x_test, y_test)*100)","38886d58":"from sklearn.linear_model import LogisticRegression","6cbe7b75":"model = LogisticRegression()","795e570e":"#Fit the model\nmodel.fit(x_train, y_train)","831f035c":"y_pred = model.predict(x_test)","1e3dbb2e":"#Score\/Accuracy\nprint(\"Accuracy --> \", model.score(x_test, y_test)*100)","5c754846":"from sklearn.ensemble import RandomForestRegressor","ca1515e4":"#Train the model\nmodel = RandomForestRegressor(n_estimators=1000)","50b30505":"#Fit\nmodel.fit(x_train, y_train)","833be37b":"#Score\/Accuracy\nprint(\"Accuracy --> \", model.score(x_test, y_test)*100)","2609038d":"from sklearn.ensemble import GradientBoostingRegressor","0116552c":"#Train the model\nGBR = GradientBoostingRegressor(n_estimators=100, max_depth=4)","adc77e8b":"#Fit\nGBR.fit(x_train, y_train)","87934505":"print(\"Accuracy --> \", GBR.score(x_test, y_test)*100)","5c1f3cc3":"from sklearn.neighbors import KNeighborsClassifier","de3cdf03":"knn = KNeighborsClassifier(n_neighbors=20)","f289eb36":"knn.fit(x_train, y_train)","9e0404ae":"y_pred = knn.predict(x_test)","23f1c703":"#Score\/Accuracy\nprint(\"Accuracy --> \", knn.score(x_test, y_test)*100)","767eabbf":"from sklearn import tree","238d432a":"t = tree.DecisionTreeClassifier()","f1567c90":"t.fit(x_train,y_train)","a51927db":"y_pred = t.predict(x_test)","ebd956ac":"#Score\/Accuracy\nprint(\"Accuracy --> \", t.score(x_test, y_test)*100)","75ebbc3f":"import xgboost as xgb\nfrom sklearn.metrics import mean_squared_error","61109297":"xg_reg = xgb.XGBRegressor(objective ='reg:linear', colsample_bytree = 0.3, learning_rate = 0.1,\n                max_depth = 5, alpha = 10, n_estimators = 10)","87e06ba4":"xg_reg.fit(x_train,y_train)","72f0267f":"preds = xg_reg.predict(x_test)","619c447a":"#Score\/Accuracy\nprint(\"Accuracy --> \", xg_reg.score(x_test, y_test)*100)","96e7b107":"rmse = np.sqrt(mean_squared_error(y_test, preds))\nprint(\"RMSE: %f\" % (rmse))","432caec4":"#Score\/Accuracy\nprint(\"Accuracy --> \", xg_reg.score(x_test, y_test)*100)","ff967013":"xgb.plot_importance(xg_reg)\nplt.rcParams['figure.figsize'] = [5, 5]\nplt.show()","770c69d0":"from sklearn.naive_bayes import GaussianNB","d4852fab":"model = GaussianNB()","ac5df5ef":"model.fit(x_train,y_train)","b2d21898":"#Score\/Accuracy\nprint(\"Accuracy --> \", model.score(x_test, y_test)*100)","0f87f263":"#Import svm model\nfrom sklearn import svm\n\n#Create a svm Classifier\nclf = svm.SVC(kernel='linear') # Linear Kernel\n\n#Train the model using the training sets\nclf.fit(x_train, y_train)\n\n#Predict the response for test dataset\ny_pred = clf.predict(x_test)","bfd3f055":"#Score\/Accuracy\nprint(\"Accuracy --> \", clf.score(x_test, y_test)*100)","6f5b2ad0":"# 9) support vactor machine ","51047aec":"# map coorelation ","268fc14b":"# B ) Age","f043a2ce":"# A) gendre (male female)","011d3133":"# 8) naive-bayes","cfc078b0":" there is no missing value so our data is perfect and clean ","b743be87":"# 1)\tLinear Regression","6f84b8ec":"# 2) logistic regression","e6374f33":"# 3 ) Random Forest Regression","a091c785":"# 4) Gradient Boosting Regresso ","fb7e70c8":"# vizualisation ","b3df973d":"# 7) XGBoost","50c57d6c":"heart disease using 8 machine learning algorithms :\n1. Linear Regression\n2. Logistic Regression\n3. support vactor machine\n4. naive-bayes\n5. XGBoost\n6. Random Forest Regression\n7. Gradient Boosting Regresso\n8. decision tree\n","a71f5a98":"# machine learning algo","538d32e8":"### A) mean_squared_error","accaa3e6":"# A) target","40218b37":"# 5) KNN","509a2ad4":"# finding missing value ","cb51451f":"# 6) decision tree ","28c76b01":"About this file\nage = age in years \/ min = 29 - max = 77\nsex = (1 = male; 0 = female)\ncp= chest pain type\ntrestbps= resting blood pressure (in mm Hg on admission to the hospital)\nchol = serum cholestoral in mg\/dl\nfbs = ( fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\nrestecg = resting electrocardiographic results\nthalach = maximum heart rate achieved\nexang = exercise induced angina (1 = yes; 0 = no)\noldpeak = ST depression induced by exercise relative to rest\nslope = the slope of the peak exercise ST segment\nca = number of major vessels (0-3) colored by flourosopy\nthal3 = normal; 6 = fixed defect; 7 = reversable defect\ntarget = 1 or 0","f204f755":"# data info","420e79c3":"### B) Accuracy score","6df34245":"# import library and split data "}}