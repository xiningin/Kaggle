{"cell_type":{"1abe804a":"code","81ade8b1":"code","15e5e45d":"code","0fd72750":"code","0885962d":"code","03f91e7f":"code","1d09d4bd":"code","759ac2e4":"code","22b321f6":"code","b07a2cdc":"markdown","adb02dcf":"markdown","47a981e6":"markdown","96780579":"markdown"},"source":{"1abe804a":"!pip install autokeras\n!pip install natsort","81ade8b1":"import autokeras as ak\nimport numpy as np \nimport pandas as pd \nfrom glob import glob\nfrom skimage.io import imread\nimport skimage.io as sio\nimport os\nfrom natsort import natsorted\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score, roc_auc_score\nfrom skimage.transform import resize, rotate\nimport warnings; warnings.filterwarnings(\"ignore\")","15e5e45d":"# train test directories\nroot_dir = \"..\/input\"\ntrain_dir = root_dir + \"\/train\/train\/\"\ntest_dir  = root_dir + \"\/test\/test\/\"\ncsv_path  = root_dir + \"\/train.csv\"\nsub_path  = root_dir + \"sample_submission.csv\"\n\n# loading images\ndf   = pd.read_csv(csv_path)\nx    = np.array([ imread(train_dir+p)\/255 for p in df.id.values])\ny    = df.has_cactus.values","0fd72750":"# splitting training dataset into train\/validation\nfrom sklearn.model_selection import train_test_split\nx_train, x_val, y_train, y_val = train_test_split(x, y, test_size=0.20,stratify=y)","0885962d":"# helper functions here\ndef display_images(imgs,y=None, y_pred=None):\n    n_images = imgs.shape[0]\n    n_gridx  = 5\n    n_gridy  = n_images\/\/n_gridx\n#     n_grid   = int(np.sqrt(n_images))\n    k = 1\n    plt.figure(figsize=(10,6),frameon=False)\n    for i in range(n_gridy):\n        for j in range(n_gridx):\n            plt.subplot(n_gridy, n_gridx, k)\n            plt.imshow(imgs[k-1])\n            plt.axis(\"off\")\n            if (y is not None) and (y_pred is not None):\n                plt.title(\"y=%d | pred=%0.1f\"%(y[k-1],y_pred[k-1]))\n            elif y is not None:\n                plt.title(\"y=%d\"%y[k-1])\n            k+=1\n    plt.tight_layout()\n    plt.show()\n\n\ndef getProb(model, x):\n    xprocessed = model.preprocess(x)\n    loader = model.data_transformer.transform_test(xprocessed)\n    probs  = model.cnn.predict(loader)\n    num    = np.exp(probs[:,1])\n    denom  = num + np.exp(probs[:,0])\n    probs  = num \/ denom \n    return probs","03f91e7f":"n_samples  = 20\nidx_sample = np.random.randint(0,len(x_train),n_samples)\ndisplay_images(x_train[idx_sample], y_train[idx_sample])","1d09d4bd":"runFor = 5 # time in hours\nmodel = ak.ImageClassifier(verbose=True, augment=True )\nmodel.fit(x_train, y_train, time_limit=4*60*60)","759ac2e4":"# model.final_fit(x_train, y_train, x_val, y_val, retrain=False)\ny_pred = model.predict(x_train)\ny_prob = getProb(model, x_train)\nprint(\"training   accuracy  = \", accuracy_score(y_train, y_pred))\nprint(\"training   recall    = \", recall_score(y_train, y_pred))\nprint(\"training   precision = \", precision_score(y_train, y_pred))\nprint(\"training   auc score = \", roc_auc_score(y_train, y_prob))\nprint(\"training   f1 score  = \", f1_score(y_train, y_pred))\ny_pred = model.predict(x_val)\ny_prob = getProb(model, x_val)\nprint(\"validation accuracy  = \", accuracy_score(y_val, y_pred))\nprint(\"validation recall    = \", recall_score(y_val, y_pred))\nprint(\"validation precision = \", precision_score(y_val, y_pred))\nprint(\"validation auc score = \",roc_auc_score(y_val, y_prob))\nprint(\"validation f1 score  = \", f1_score(y_val, y_pred))","22b321f6":"df_test = pd.read_csv('..\/input\/sample_submission.csv')\nx_test  = np.array([ imread(test_dir+p)\/255 for p in df_test.id.values])\nx_test  = np.array(x_test)\n\n# test prediction\ny_prob_test = getProb(model, x_test)\n\ndf_test['has_cactus'] = y_prob_test\ndf_test.to_csv('cactus_net_submission.csv', index=False)","b07a2cdc":"# Test Prediction","adb02dcf":"\n# VISUALIZING CACTUS IMAGES","47a981e6":"# AutoKeras ","96780579":"AutoKeras will automatically look for different models via a Neural Architecture search algorithm. The AutoKeras packages provides a very nice interface, much like Keras. Simply calling fit() method on the ImageClassifier object will start architecture search."}}