{"cell_type":{"11fa806f":"code","482ba982":"code","081aad84":"code","d03f9d7d":"code","9320b7b3":"code","9dc63ad5":"code","e8f0bcb1":"code","368f1899":"code","2dfa5fce":"code","b40f3e7d":"code","cb106226":"code","c20d0bfe":"code","73e55a59":"code","5fcead84":"code","e1fa9fd7":"code","02170ab7":"code","61ce742e":"code","a997c184":"code","05558adf":"code","beec3e83":"code","2faaa2b2":"code","08b4d98d":"code","f1796770":"code","caef56ec":"code","93040a36":"code","a4322c2a":"code","f75ea71b":"code","29318a94":"code","ccf38a34":"code","41de745f":"code","e3c041c7":"markdown","6829c90e":"markdown","b0be615e":"markdown","c6973fe7":"markdown","458d5a72":"markdown"},"source":{"11fa806f":"# Import libraries\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.metrics import accuracy_score, roc_curve, roc_auc_score, f1_score\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\n\nfrom matplotlib import pyplot as plt\n%matplotlib inline","482ba982":"# Set options\npd.set_option('display.float_format', lambda x: '%.3f' % x)","081aad84":"def optimize_memory_usage(df, print_size = True):\n    # Function optimizes memory usage in dataframe.\n   \n    # Types for optimization.\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    # Memory usage size before optimize (Mb).\n    before_size = df.memory_usage().sum() \/ 1024**2    \n    for column in df.columns:\n        column_type = df[column].dtypes\n        if column_type in numerics:\n            column_min = df[column].min()\n            column_max = df[column].max()\n            if str(column_type).startswith('int'):\n                if column_min > np.iinfo(np.int8).min and column_max < np.iinfo(np.int8).max:\n                    df[column] = df[column].astype(np.int8)\n                elif column_min > np.iinfo(np.int16).min and column_max < np.iinfo(np.int16).max:\n                    df[column] = df[column].astype(np.int16)\n                elif column_min > np.iinfo(np.int32).min and column_max < np.iinfo(np.int32).max:\n                    df[column] = df[column].astype(np.int32)\n                elif column_min > np.iinfo(np.int64).min and column_max < np.iinfo(np.int64).max:\n                    df[column] = df[column].astype(np.int64)  \n            else:\n                if column_min > np.finfo(np.float32).min and column_max < np.finfo(np.float32).max:\n                    df[column] = df[column].astype(np.float32)\n                else:\n                    df[column] = df[column].astype(np.float64)    \n    # Memory usage size after optimize (Mb).\n    after_size = df.memory_usage().sum() \/ 1024**2\n    if print_size: print('Memory usage size: before {:5.4f} Mb - after {:5.4f} Mb ({:.1f}%).'.format(before_size, after_size, 100 * (before_size - after_size) \/ before_size))\n    return df","d03f9d7d":"def import_data_from_csv(file_path):\n    # Load a dataframe from csv-file and optimize its memory usage.\n    df = pd.read_csv(file_path, parse_dates = True, keep_date_col = True)\n    df = optimize_memory_usage(df)\n    return df","9320b7b3":"# Load train data\ntrain_df = import_data_from_csv('..\/input\/tabular-playground-series-nov-2021\/train.csv')\n#train_df = import_data_from_csv('train.csv')","9dc63ad5":"# Load test data\ntest_df = import_data_from_csv('..\/input\/tabular-playground-series-nov-2021\/test.csv')\n#test_df = import_data_from_csv('test.csv')","e8f0bcb1":"train_df.shape, test_df.shape","368f1899":"train_df.head()","2dfa5fce":"train_df.describe()","b40f3e7d":"_ = train_df.hist(train_df.columns[1:10], figsize=(10, 10), color='skyblue', ec='blue', alpha = 0.5)","cb106226":"_ = train_df.hist(train_df.columns[10:19], figsize=(10, 10), color='skyblue', ec='blue', alpha = 0.5)","c20d0bfe":"_ = train_df.hist(train_df.columns[20:29], figsize=(10, 10), color='skyblue', ec='blue', alpha = 0.5)","73e55a59":"_ = train_df.hist(train_df.columns[30:39], figsize=(10, 10), color='skyblue', ec='blue', alpha = 0.5)","5fcead84":"_ = train_df.hist(train_df.columns[40:49], figsize=(10, 10), color='skyblue', ec='blue', alpha = 0.5)","e1fa9fd7":"_ = train_df.hist(train_df.columns[50:59], figsize=(10, 10), color='skyblue', ec='blue', alpha = 0.5)","02170ab7":"_ = train_df.hist(train_df.columns[60:69], figsize=(10, 10), color='skyblue', ec='blue', alpha = 0.5)","61ce742e":"_ = train_df.hist(train_df.columns[70:79], figsize=(10, 10), color='skyblue', ec='blue', alpha = 0.5)","a997c184":"_ = train_df.hist(train_df.columns[80:89], figsize=(10, 10), color='skyblue', ec='blue', alpha = 0.5)","05558adf":"_ = train_df.hist(train_df.columns[90:101], figsize=(10, 10), color='skyblue', ec='blue', alpha = 0.5)","beec3e83":"# Make features list\nfeatures_black_list = ['id', 'target']\nfeatures_list = [x for x in train_df.columns if x not in features_black_list]","2faaa2b2":"# Make X and y\nX = train_df[features_list].values\ny = train_df['target'].values","08b4d98d":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7)","f1796770":"y_train.shape, y_test.shape","caef56ec":"scaler = StandardScaler()\n\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","93040a36":"model_logistic = LogisticRegression(solver = 'lbfgs', max_iter = 10000)\nmodel_logistic.fit(X_train, y_train)\n\ny_predicted = model_logistic.predict_proba(X_test)[:, 1]","a4322c2a":"grid = np.linspace(0, 1, 50)\nplt.figure(figsize=(10,5))\nplt.title('f1_score by limit', fontsize=14)\nplt.plot(grid, [f1_score(y_test, y_predicted > item) for item in grid])\nplt.grid()\nplt.xlabel('limit', fontsize=12)\nplt.ylabel('f1_score', fontsize=12);","f75ea71b":"print('Test accuracy: ', accuracy_score(y_test, y_predicted > 0.5))\nprint('Test F measure: ', f1_score(y_test, y_predicted > 0.5))\nprint('Test ROC-AUC: ', roc_auc_score(y_test, y_predicted))","29318a94":"X_pred = test_df[features_list].values\nX_pred = scaler.transform(X_pred)","ccf38a34":"test_df['target'] = model_logistic.predict(X_pred)","41de745f":"test_df[['id', 'target']].to_csv('Tabular_Playground_Series_Nov_LogisticRegression.csv', index = False)","e3c041c7":"# Save result","6829c90e":"# Import libraries and load data","b0be615e":"Use [function memory usage optimization dataframe](https:\/\/www.kaggle.com\/ellavs\/function-memory-usage-optimization-dataframe\/):","c6973fe7":"This is try to predict by LogisticRegression model with StandardScaler.","458d5a72":"# Try Logistic Regression"}}