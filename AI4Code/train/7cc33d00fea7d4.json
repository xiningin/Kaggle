{"cell_type":{"29faa6cb":"code","e8704f94":"code","94896b7e":"code","25a1d64d":"code","93bfbf17":"code","7951a43e":"code","c0f4b5f5":"code","806b8da1":"code","b6ba1f24":"code","c5e9637f":"code","2391116d":"code","b340d74e":"code","a99cdc72":"code","d584809d":"code","af6a0501":"code","eee8fc68":"code","ed0a7c53":"code","3682a14d":"code","e29d8e12":"code","096a838a":"code","31aeef76":"code","f5f6a72e":"code","d1b6a0e2":"code","c42df2c9":"code","06afe474":"markdown","05ae12ad":"markdown","0fe04647":"markdown","9899530d":"markdown","74191889":"markdown","5ffdd47a":"markdown"},"source":{"29faa6cb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e8704f94":"# Importando as Bibiotecas necess\u00e1rias: \n\nimport pandas as pd\nimport numpy as np\nimport cv2    \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import f1_score\n\nfrom keras.applications.inception_v3 import InceptionV3, preprocess_input\nfrom keras import optimizers\nfrom keras.models import Sequential, Model \nfrom keras.layers import Dropout, Flatten, Dense, GlobalAveragePooling2D\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\nfrom keras.utils import np_utils\nfrom keras.optimizers import SGD\n\nfrom tensorflow.keras.layers import Input, Dense, Conv2D, Flatten, Dropout\nfrom tensorflow.keras.models import Model\n\nfrom IPython.core.display import display, HTML\nfrom PIL import Image\nfrom io import BytesIO\nimport base64\n\nplt.style.use('ggplot')\n\n%matplotlib inline","94896b7e":"# Verificando a vers\u00e3o do Tensorflow\nimport tensorflow as tf\nprint(tf.__version__)","25a1d64d":"# Definindo vari\u00e1veis: \npasta_principal = '..\/input\/celeba-dataset\/'\npasta_imagens = pasta_principal + 'img_align_celeba\/img_align_celeba\/'\n\nEXEMPLO = pasta_imagens + '001150.jpg'\n\nAMOSTRA_TREINO = 7000\nAMOSTRA_VALIDACAO = 1500\nAMOSTRA_TESTE = 1000\nLARGURA = 178\nALTURA = 218\nBATCH_SIZE = 16\n#EPOCAS = 20","93bfbf17":"# carregando o arquivo com os atributos de cada imagem:\ndf_attr = pd.read_csv('\/kaggle\/input\/celeba-dataset\/list_attr_celeba.csv')\ndf_attr.head()","7951a43e":"# transformando a columa com o nome da imagem em \u00edndice\ndf_attr.set_index('image_id', inplace=True)\n# alterando o valor de -1 (quando a imagem nao apresenta o atributo), para 0\ndf_attr.replace(to_replace=-1, value=0, inplace=True) \n# verificando as dimens\u00f5es do dataser\ndf_attr.shape","c0f4b5f5":"# Listando as colunas com os atributoss\ndf_attr.columns","806b8da1":"# Carregando um exemplo de imagem:\nimg = load_img(EXEMPLO)\nplt.grid(False)\nplt.imshow(img)\ndf_attr.loc[EXEMPLO.split('\/')[-1]][['Smiling','Male',\"Young\"]]","b6ba1f24":"# Carregando o dataset com a parti\u00e7\u00e3o em dados de treino, valida\u00e7\u00e3o e teste:\ndf_partition = pd.read_csv('\/kaggle\/input\/celeba-dataset\/list_eval_partition.csv')\ndf_partition.head()\n","c5e9637f":"# Verificando a quantidade de observa\u00e7\u00f5es em cada tipo de parti\u00e7\u00e3o:\ndf_partition['partition'].value_counts().sort_index()","2391116d":"# Criando um dataset com o tipo de parti\u00e7\u00e3o e a vari\u00e1vel Target 'Male'\ndf_partition.set_index('image_id', inplace=True)\ndf_par_attr = df_partition.join(df_attr['Male'], how='inner')\ndf_par_attr.head()","b340d74e":"# Verificando o balanceamento das classes:\nplt.title('Propor\u00e7\u00e3o de imagens masculinas e femininas no dataset CelebA')\nsns.countplot(y='Male', data=df_attr, color=\"b\")\nplt.show()","a99cdc72":"# Definindo a fun\u00e7\u00e3o que far\u00e1 a transforma\u00e7\u00e3o necess\u00e1ria nas imagens:\n\ndef load_reshape_img(fname):\n    img = load_img(fname)\n    x = img_to_array(img)\/255.\n    x = x.reshape((1,) + x.shape)\n\n    return x\n\n# Definindo a fun\u00e7\u00e3o que far\u00e1 o balanceamento das classes (h\u00e1 mais imagens do sexo feminino)\n\ndef generate_df(partition, attr, num_samples):\n    '''\n    parti\u00e7\u00e3o:\n        0 -> treino\n        1 -> valida\u00e7\u00e3o\n        2 -> teste\n    \n    '''\n    \n    df_ = df_par_attr[(df_par_attr['partition'] == partition) \n                           & (df_par_attr[attr] == 0)].sample(int(num_samples\/2))\n    df_ = pd.concat([df_,\n                      df_par_attr[(df_par_attr['partition'] == partition) \n                                  & (df_par_attr[attr] == 1)].sample(int(num_samples\/2))])\n\n    # for Train and Validation\n    if partition != 2:\n        x_ = np.array([load_reshape_img(pasta_imagens + fname) for fname in df_.index])\n        x_ = x_.reshape(x_.shape[0], 218, 178, 3)\n        y_ = np.array(df_[attr])\n    # for Test\n    else:\n        x_ = []\n        y_ = []\n\n        for index, target in df_.iterrows():\n            im = cv2.imread(pasta_imagens + index)\n            im = cv2.resize(cv2.cvtColor(im, cv2.COLOR_BGR2RGB), (LARGURA, ALTURA)).astype(np.float32) \/ 255.0\n            im = np.expand_dims(im, axis =0)\n            x_.append(im)\n            y_.append(target[attr])\n\n    return x_, y_","d584809d":"# Gerando os dados de Treino com Balanceamento\nx_train, y_train = generate_df(0, 'Male', AMOSTRA_TREINO) \n\n# Pr\u00e9 tratamento dos dados de treino com Data Augmentation\n# Data Augmentation permite gerar imagens diferentes das originais, permitindo que o modelo aprenda\n# com estas varia\u00e7\u00f5es (mudan\u00e7a no \u00e2ngulo, tamanho e posi\u00e7\u00e3o)\n\ntrain_datagen =  ImageDataGenerator(\n  preprocessing_function=preprocess_input,\n  rotation_range=30,\n  width_shift_range=0.2,\n  height_shift_range=0.2,\n  shear_range=0.2,\n  zoom_range=0.2,\n  horizontal_flip=True,\n)\n\ntrain_datagen.fit(x_train)\n\ntrain_generator = train_datagen.flow(\nx_train, y_train,\nbatch_size=BATCH_SIZE,\n)\n","af6a0501":"# Verificando o shape dos dados de treino\nprint(f's_train.shape = {x_train.shape}')","eee8fc68":"print(f's_train.shape = {y_train.shape}')","ed0a7c53":"# Gerando os dados de valida\u00e7\u00e3o com balanceamento\nx_valid, y_valid = generate_df(1, 'Male', AMOSTRA_VALIDACAO)\n","3682a14d":"# Construindo o modelo:\ni = Input(shape=x_train[0].shape)\nx = Conv2D(32, (3, 3), strides = 2, activation='relu')(i)\nx = Conv2D(64, (3, 3), strides = 2, activation='relu')(x)\nx = Conv2D(128, (3, 3), strides = 2, activation='relu')(x)\nx = Flatten()(x)\nx = Dropout(0.2)(x)\nx = Dense(512, activation='relu')(x)\nx = Dropout(0.2)(x)\nx = Dense(2, activation='softmax')(x)\n\nmodel = Model(i, x)","e29d8e12":"# Compilamos o modelo usando o optimzador Adam\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n","096a838a":"# Fazendo o fit do modelo:\nr = model.fit(x_train, y_train, validation_data=(x_valid, y_valid), epochs=5)","31aeef76":"# Gr\u00e1fico do loss do modelo:\nimport matplotlib.pyplot as plt\nplt.plot(r.history['loss'], label='treino')\nplt.plot(r.history['val_loss'], label='valida\u00e7\u00e3o')\nplt.legend()","f5f6a72e":"# Gr\u00e1fico da acur\u00e1cia:\nplt.plot(r.history['accuracy'], label='treino')\nplt.plot(r.history['val_accuracy'], label='valida\u00e7\u00e3o')\nplt.legend()","d1b6a0e2":"# Gerando os dados de Teste com balanceamento\nx_test, y_test = generate_df(2, 'Male', AMOSTRA_TESTE)","c42df2c9":"# Calculando a acur\u00e1cia do modelo nos dados de teste: \nfrom sklearn.metrics import f1_score\n\n# generate prediction\nmodel_predictions = [np.argmax(model.predict(feature)) for feature in x_test ]\n\n# report test accuracy\ntest_accuracy = 100 * np.sum(np.array(model_predictions)==y_test) \/ len(model_predictions)\nprint('Model Evaluation')\nprint('Test accuracy: %.4f%%' % test_accuracy)\nprint('f1_score:', f1_score(y_test, model_predictions))","06afe474":"A Acur\u00e1cia nos dados de teste ficou em 94,50%","05ae12ad":"O Gr\u00e1fico mostra que temos muito mais imagens de pessoas do sexo feminino do que masculino e torna-se importante para a acur\u00e1cia do modelo efetuarmos um tratamento de balanceamento de classes.","0fe04647":"Importando as bibliotecas:","9899530d":"**EXERC\u00cdCIO 2 - Disciplina T\u00f3picos Avan\u00e7ados e Machine Learning e Deep Learning** \n\nUm dataset contido no TensorFlow \u00e9 o CelebA, um conjunto de cerca de 200.000 imagens de rostos de celebridades. Cada imagem contem 40 caracter\u00edsticas bin\u00e1rias, tais como sexo e idade (young, old).\nConstrua uma CNN que seja capaz de classificar o sexo da pesso na imagem. Para servir de refer\u00eancia, um bom classificador consegue perto de 95% no conjunto de testes.\n\n","74191889":"O gr\u00e1fico da acur\u00e1cia demonstra os seguintes resultados obtidos:\n- Acur\u00e1cia nos dados de treino: 98,17%\n- Acur\u00e1cia nos dados de valida\u00e7\u00e3o: 94,33%\n\nResta agora verificarmos a performance do modelo nos dados de teste:","5ffdd47a":"# Conclus\u00e3o:\n\nO exercicio tinha como objetivo a constru\u00e7\u00e3o de uma Rede CNN para predi\u00e7\u00e3o do g\u00eanero, utilizando o dataset CelebA.\n\nO modelo constru\u00eddo utilizou algumas t\u00e9cnicas de pr\u00e9 processamento visando melhorar a acur\u00e1cia: rebalanceamento (visto termo a presen\u00e7a de mais imagens do sexo feminino) e Augmentation.\n\nDevido a recursos computacionais limitados foi utilizado somente 7000 observa\u00e7\u00f5es como dados de treino. \n\nA acur\u00e1cia do modelo nos dados de teste ficou em 94,50%.\n\nJustifico a n\u00e3o obten\u00e7\u00e3o do m\u00ednimo de acur\u00e1cia acordado devido \u00e0 limita\u00e7\u00e3o relatada acima, de capacidade computacional, que impediu que fosse utilizado mais do que 7000 imagens como teste e apenas 5 \u00e9pocas para o modelo.\n"}}