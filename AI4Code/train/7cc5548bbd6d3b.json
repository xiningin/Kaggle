{"cell_type":{"530f5219":"code","159316dd":"code","628789ca":"code","1f742d8e":"code","824a236d":"code","22331b6f":"code","8140bf57":"code","c999bb14":"code","c6757c62":"code","69a2efcc":"code","0ff13592":"code","87033363":"code","0dd13243":"code","41d1f0e7":"code","929e2994":"code","af92ccf9":"code","912b3da3":"code","cbb71dfa":"code","f262bf07":"code","3ef1c3bd":"code","af49d95b":"code","ba3a05c1":"code","0a932a69":"code","0adc5304":"code","70465c91":"code","86f326a8":"code","b93d44bb":"code","daff6271":"code","5dc8cceb":"code","039c0d7f":"code","1a1bfe12":"code","023a4d21":"code","4eedfbc1":"code","77b060d6":"code","3724863b":"code","40b0583c":"code","9d99be22":"code","fc7b704f":"code","122dcf07":"code","ac00d7e7":"code","242c9d1c":"code","ba79ec2f":"code","9c449fef":"code","14f0a2eb":"code","4d8239ae":"code","b02df873":"code","fbc1560e":"code","8cb28080":"code","58277009":"code","1cb6ebae":"code","e19c7930":"code","b2138281":"code","5613921d":"code","14dcef4c":"code","8f9c5fa7":"markdown","df0f3357":"markdown","f781f36a":"markdown","ce116e53":"markdown","5b61e9b2":"markdown","9d7bfbd8":"markdown","71181566":"markdown","b5315348":"markdown","3ec67dd4":"markdown","94ef17b1":"markdown","d20b0727":"markdown","ead8fa81":"markdown","502c4359":"markdown","c7208dce":"markdown","dc16ee1e":"markdown","cda9cd55":"markdown","65c4b70b":"markdown","99b00281":"markdown","984546da":"markdown","5dc96510":"markdown","9ec046c6":"markdown","0533218e":"markdown","40a542ae":"markdown","10e8af1e":"markdown","0dd6eebc":"markdown","d1510e86":"markdown","b2ff88a0":"markdown","018dce99":"markdown","c7c76a5f":"markdown","f003bfbe":"markdown","a2bd3c22":"markdown","54fa11e2":"markdown","50bf088d":"markdown","a8a8ab88":"markdown","aad6715c":"markdown","34818a87":"markdown","8e0b7df8":"markdown","3f256322":"markdown","bb45285f":"markdown","68dfac53":"markdown","0c09a6e7":"markdown","9c36c362":"markdown","821ad2f5":"markdown","e19ef8bf":"markdown","af3a2a92":"markdown","8fb0db96":"markdown","3cb02810":"markdown","438da45d":"markdown"},"source":{"530f5219":"import seaborn as sns\n# PyTorch\nfrom torchvision import transforms, datasets, models\nimport torch\nfrom torch import optim, cuda\nfrom torch.utils.data import DataLoader, sampler\nimport torch.nn as nn\n\nimport warnings\nwarnings.filterwarnings('ignore', category=FutureWarning)\n\n# Data science tools\nimport numpy as np\nimport pandas as pd\nimport os\n\n# Image manipulations\nfrom PIL import Image\n# Useful for examining network\n# Timing utility\nfrom timeit import default_timer as timer\n\n# Visualizations\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.rcParams['font.size'] = 14","159316dd":"# Location of data\ndatadir = '..\/input\/oct2017\/OCT2017 \/'\ntraindir = datadir + 'train\/'\nvaliddir = datadir + 'val\/'\ntestdir = datadir + 'test\/'\n\nsave_file_name = 'vgg16-transfer-4.pt'\ncheckpoint_path = 'vgg16-transfer-4.pth'\n\n# Change to fit hardware\nbatch_size = 128\n\n# Whether to train on a gpu\ntrain_on_gpu = cuda.is_available()\nprint(f'Train on gpu: {train_on_gpu}')\n\n# Number of gpus\nif train_on_gpu:\n    gpu_count = cuda.device_count()\n    print(f'{gpu_count} gpus detected.')","628789ca":"# Empty lists\ncategories = []\nimg_categories = []\nn_train = []\nn_valid = []\nn_test = []\nhs = []\nws = []\n\n# Iterate through each category\nfor d in os.listdir(traindir):\n    categories.append(d)\n\n    # Number of each image\n    train_imgs = os.listdir(traindir + d)\n    valid_imgs = os.listdir(validdir + d)\n    test_imgs = os.listdir(testdir + d)\n    n_train.append(len(train_imgs))\n    n_valid.append(len(valid_imgs))\n    n_test.append(len(test_imgs))\n\n    # Find stats for train images\n    for i in train_imgs:\n        img_categories.append(d)\n        img = Image.open(traindir + d + '\/' + i)\n        img_array = np.array(img)\n        # Shape\n        hs.append(img_array.shape[0])\n        ws.append(img_array.shape[1])\n\n# Dataframe of categories\ncat_df = pd.DataFrame({'category': categories,\n                       'n_train': n_train,\n                       'n_valid': n_valid, 'n_test': n_test}).\\\n    sort_values('category')\n\n# Dataframe of training images\nimage_df = pd.DataFrame({\n    'category': img_categories,\n    'height': hs,\n    'width': ws\n})\n\ncat_df.sort_values('n_train', ascending=False, inplace=True)\ncat_df.head()","1f742d8e":"cat_df.set_index('category')['n_train'].plot.bar(figsize=(20, 6))\nplt.xticks(rotation=80)\nplt.ylabel('Count')\nplt.title('Training Images by Category')\nplt.show()","824a236d":"img_dsc = image_df.groupby('category').describe()\nimg_dsc.head()","22331b6f":"plt.figure(figsize=(10, 6))\nsns.kdeplot(\n    img_dsc['height']['mean'], label='Average Height')\nsns.kdeplot(\n    img_dsc['width']['mean'], label='Average Width')\nplt.xlabel('Pixels')\nplt.ylabel('Density')\nplt.title('Average Size Distribution')","8140bf57":"def imshow(image):\n    \"\"\"Display image\"\"\"\n    plt.figure(figsize=(6, 6))\n    plt.imshow(image)\n    plt.axis('off')\n    plt.show()\n\n\n# Example image\nx = Image.open(traindir + '\/CNV\/CNV-5557306-155.jpeg')\nnp.array(x).shape\nimshow(x)","c999bb14":"x = Image.open(traindir + '\/DME\/DME-4441781-1.jpeg')\nnp.array(x).shape\nimshow(x)","c6757c62":"# Image transformations\nimage_transforms = {\n    # Train uses data augmentation\n    'train':\n    transforms.Compose([\n        transforms.RandomResizedCrop(size=256, scale=(0.8, 1.0)),\n        transforms.RandomRotation(degrees=15),\n        transforms.ColorJitter(),\n        transforms.RandomHorizontalFlip(),\n        transforms.CenterCrop(size=224),  # Image net standards\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406],[0.229, 0.224, 0.225])]),\n    \n    # Validation does not use augmentation\n    'val':\n    transforms.Compose([\n        transforms.Resize(size=256),\n        transforms.CenterCrop(size=224),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])]),\n    # Test does not use augmentation\n    'test':\n    transforms.Compose([\n        transforms.Resize(size=256),\n        transforms.CenterCrop(size=224),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ]),\n}","69a2efcc":"def imshow_tensor(image, ax=None, title=None):\n    \"\"\"Imshow for Tensor.\"\"\"\n\n    if ax is None:\n        fig, ax = plt.subplots()\n\n    # Set the color channel as the third dimension\n    image = image.numpy().transpose((1, 2, 0))\n\n    # Reverse the preprocessing steps\n    mean = np.array([0.485, 0.456, 0.406])\n    std = np.array([0.229, 0.224, 0.225])\n    image = std * image + mean\n\n    # Clip the image pixel values\n    image = np.clip(image, 0, 1)\n\n    ax.imshow(image)\n    plt.axis('off')\n\n    return ax, image","0ff13592":"# Datasets from each folder\ndata = {'train':datasets.ImageFolder(root=traindir, transform=image_transforms['train']),\n        'val':datasets.ImageFolder(root=validdir, transform=image_transforms['val']),\n        'test':datasets.ImageFolder(root=testdir, transform=image_transforms['test'])}\n\n# Dataloader iterators\ndataloaders = {\n    'train': DataLoader(data['train'], batch_size=batch_size, shuffle=True),\n    'val': DataLoader(data['val'], batch_size=batch_size, shuffle=True),\n    'test': DataLoader(data['test'], batch_size=batch_size, shuffle=True)\n}","87033363":"trainiter = iter(dataloaders['train'])\nfeatures, labels = next(trainiter)\nfeatures.shape, labels.shape","0dd13243":"n_classes = len(cat_df)\nprint(f'There are {n_classes} different classes.')\n\nlen(data['train'].classes)","41d1f0e7":"model = models.vgg16(pretrained=True)\nmodel","929e2994":"# Freeze early layers\nfor param in model.parameters():\n    param.requires_grad = False","af92ccf9":"n_inputs = model.classifier[6].in_features\n\n# Add on classifier\nmodel.classifier[6] = nn.Sequential(\n    nn.Linear(n_inputs, 256), nn.ReLU(), nn.Dropout(0.4),\n    nn.Linear(256, n_classes), nn.LogSoftmax(dim=1))\n\nmodel.classifier","912b3da3":"total_params = sum(p.numel() for p in model.parameters())\nprint(f'{total_params:,} total parameters.')\ntotal_trainable_params = sum(\n    p.numel() for p in model.parameters() if p.requires_grad)\nprint(f'{total_trainable_params:,} training parameters.')","cbb71dfa":"if train_on_gpu:\n    model = model.to('cuda')","f262bf07":"def get_pretrained_model(model_name):\n    \"\"\"Retrieve a pre-trained model from torchvision\n\n    Params\n    -------\n        model_name (str): name of the model (currently only accepts vgg16 and resnet50)\n\n    Return\n    --------\n        model (PyTorch model): vgg16\n\n    \"\"\"\n\n    if model_name == 'vgg16':\n        model = models.vgg16(pretrained=True)\n\n        # Freeze early layers\n        for param in model.parameters():\n            param.requires_grad = False\n        n_inputs = model.classifier[6].in_features\n\n        # Add on classifier\n        model.classifier[6] = nn.Sequential(\n            nn.Linear(n_inputs, 256), nn.ReLU(), nn.Dropout(0.2),\n            nn.Linear(256, n_classes), nn.LogSoftmax(dim=1))\n\n    # Move to gpu and parallelize\n    if train_on_gpu:\n        model = model.to('cuda')\n\n    return model","3ef1c3bd":"!pip install torchsummary\nfrom torchsummary import summary","af49d95b":"model = get_pretrained_model('vgg16')\nsummary(model, input_size=(3, 224, 224), batch_size=batch_size, device='cuda')","ba3a05c1":"print(model.classifier[6])","0a932a69":"model.class_to_idx = data['train'].class_to_idx\nmodel.idx_to_class = {\n    idx: class_\n    for class_, idx in model.class_to_idx.items()}\n\nlist(model.idx_to_class.items())","0adc5304":"criterion = nn.NLLLoss()\noptimizer = optim.Adam(model.parameters())","70465c91":"for p in optimizer.param_groups[0]['params']:\n    if p.requires_grad:\n        print(p.shape)","86f326a8":"def train(model,criterion,optimizer,train_loader,\n          valid_loader,save_file_name,max_epochs_stop=3,\n          n_epochs=20,print_every=1):\n    \n    \"\"\"Train a PyTorch Model\n\n    Params\n    --------\n        model (PyTorch model): cnn to train\n        criterion (PyTorch loss): objective to minimize\n        optimizer (PyTorch optimizier): optimizer to compute gradients of model parameters\n        train_loader (PyTorch dataloader): training dataloader to iterate through\n        valid_loader (PyTorch dataloader): validation dataloader used for early stopping\n        save_file_name (str ending in '.pt'): file path to save the model state dict\n        max_epochs_stop (int): maximum number of epochs with no improvement in validation loss for early stopping\n        n_epochs (int): maximum number of training epochs\n        print_every (int): frequency of epochs to print training stats\n\n    Returns\n    --------\n        model (PyTorch model): trained cnn with best weights\n        history (DataFrame): history of train and validation loss and accuracy\n    \"\"\"\n\n    # Early stopping intialization\n    epochs_no_improve = 0\n    valid_loss_min = np.Inf\n\n    valid_max_acc = 0\n    history = []\n\n    # Number of epochs already trained (if using loaded in model weights)\n    try:\n        print(f'Model has been trained for: {model.epochs} epochs.\\n')\n    except:\n        model.epochs = 0\n        print(f'Starting Training from Scratch.\\n')\n\n    overall_start = timer()\n\n    # Main loop\n    for epoch in range(n_epochs):\n\n        # keep track of training and validation loss each epoch\n        train_loss = 0.0\n        valid_loss = 0.0\n\n        train_acc = 0\n        valid_acc = 0\n\n        # Set to training\n        model.train()\n        start = timer()\n\n        # Training loop\n        for ii, (data, target) in enumerate(train_loader):\n            # Tensors to gpu\n            if train_on_gpu:\n                data, target = data.cuda(), target.cuda()\n\n            # Clear gradients\n            optimizer.zero_grad()\n            # Predicted outputs are log probabilities\n            output = model(data)\n\n            # Loss and backpropagation of gradients\n            loss = criterion(output, target)\n            loss.backward()\n\n            # Update the parameters\n            optimizer.step()\n\n            # Track train loss by multiplying average loss by number of examples in batch\n            train_loss += loss.item() * data.size(0)\n\n            # Calculate accuracy by finding max log probability\n            _, pred = torch.max(output, dim=1)\n            correct_tensor = pred.eq(target.data.view_as(pred))\n            # Need to convert correct tensor from int to float to average\n            accuracy = torch.mean(correct_tensor.type(torch.FloatTensor))\n            # Multiply average accuracy times the number of examples in batch\n            train_acc += accuracy.item() * data.size(0)\n\n            # Track training progress\n            print(\n                f'Epoch: {epoch}\\t{100 * (ii + 1) \/ len(train_loader):.2f}% complete. {timer() - start:.2f} seconds elapsed in epoch.',\n                end='\\r')\n\n        # After training loops ends, start validation\n        else:\n            model.epochs += 1\n\n            # Don't need to keep track of gradients\n            with torch.no_grad():\n                # Set to evaluation mode\n                model.eval()\n\n                # Validation loop\n                for data, target in valid_loader:\n                    # Tensors to gpu\n                    if train_on_gpu:\n                        data, target = data.cuda(), target.cuda()\n\n                    # Forward pass\n                    output = model(data)\n\n                    # Validation loss\n                    loss = criterion(output, target)\n                    # Multiply average loss times the number of examples in batch\n                    valid_loss += loss.item() * data.size(0)\n\n                    # Calculate validation accuracy\n                    _, pred = torch.max(output, dim=1)\n                    correct_tensor = pred.eq(target.data.view_as(pred))\n                    accuracy = torch.mean(\n                        correct_tensor.type(torch.FloatTensor))\n                    # Multiply average accuracy times the number of examples\n                    valid_acc += accuracy.item() * data.size(0)\n\n                # Calculate average losses\n                train_loss = train_loss \/ len(train_loader.dataset)\n                valid_loss = valid_loss \/ len(valid_loader.dataset)\n\n                # Calculate average accuracy\n                train_acc = train_acc \/ len(train_loader.dataset)\n                valid_acc = valid_acc \/ len(valid_loader.dataset)\n\n                history.append([train_loss, valid_loss, train_acc, valid_acc])\n\n                # Print training and validation results\n                if (epoch + 1) % print_every == 0:\n                    print(\n                        f'\\nEpoch: {epoch} \\tTraining Loss: {train_loss:.4f} \\tValidation Loss: {valid_loss:.4f}'\n                    )\n                    print(\n                        f'\\t\\tTraining Accuracy: {100 * train_acc:.2f}%\\t Validation Accuracy: {100 * valid_acc:.2f}%'\n                    )\n\n                # Save the model if validation loss decreases\n                if valid_loss < valid_loss_min:\n                    # Save model\n                    torch.save(model.state_dict(), save_file_name)\n                    # Track improvement\n                    epochs_no_improve = 0\n                    valid_loss_min = valid_loss\n                    valid_best_acc = valid_acc\n                    best_epoch = epoch\n\n                # Otherwise increment count of epochs with no improvement\n                else:\n                    epochs_no_improve += 1\n                    # Trigger early stopping\n                    if epochs_no_improve >= max_epochs_stop:\n                        print(\n                            f'\\nEarly Stopping! Total epochs: {epoch}. Best epoch: {best_epoch} with loss: {valid_loss_min:.2f} and acc: {100 * valid_acc:.2f}%'\n                        )\n                        total_time = timer() - overall_start\n                        print(\n                            f'{total_time:.2f} total seconds elapsed. {total_time \/ (epoch+1):.2f} seconds per epoch.'\n                        )\n\n                        # Load the best state dict\n                        model.load_state_dict(torch.load(save_file_name))\n                        # Attach the optimizer\n                        model.optimizer = optimizer\n\n                        # Format history\n                        history = pd.DataFrame(\n                            history,\n                            columns=[\n                                'train_loss', 'valid_loss', 'train_acc',\n                                'valid_acc'\n                            ])\n                        return model, history\n\n    # Attach the optimizer\n    model.optimizer = optimizer\n    # Record overall time and print out stats\n    total_time = timer() - overall_start\n    print(\n        f'\\nBest epoch: {best_epoch} with loss: {valid_loss_min:.2f} and acc: {100 * valid_acc:.2f}%'\n    )\n    print(\n        f'{total_time:.2f} total seconds elapsed. {total_time \/ (epoch):.2f} seconds per epoch.'\n    )\n    # Format history\n    history = pd.DataFrame(\n        history,\n        columns=['train_loss', 'valid_loss', 'train_acc', 'valid_acc'])\n    return model, history","b93d44bb":"model, history = train(model,criterion,optimizer,dataloaders['train'],\n                       dataloaders['val'],save_file_name=save_file_name,\n                       max_epochs_stop=3,n_epochs=20,print_every=1)","daff6271":"plt.figure(figsize=(8, 6))\nfor c in ['train_loss', 'valid_loss']:\n    plt.plot(\n        history[c], label=c)\nplt.legend()\nplt.xlabel('Epoch')\nplt.ylabel('Average Negative Log Likelihood')\nplt.title('Training and Validation Losses')","5dc8cceb":"plt.figure(figsize=(8, 6))\nfor c in ['train_acc', 'valid_acc']:\n    plt.plot(\n        100 * history[c], label=c)\nplt.legend()\nplt.xlabel('Epoch')\nplt.ylabel('Average Accuracy')\nplt.title('Training and Validation Accuracy')","039c0d7f":"def save_checkpoint(model, path):\n    \"\"\"Save a PyTorch model checkpoint\n\n    Params\n    --------\n        model (PyTorch model): model to save\n        path (str): location to save model. Must start with `model_name-` and end in '.pth'\n\n    Returns\n    --------\n        None, save the `model` to `path`\n\n    \"\"\"\n\n    model_name = path.split('-')[0]\n    assert (model_name in ['vgg16', 'resnet50'\n                           ]), \"Path must have the correct model name\"\n\n    # Basic details\n    checkpoint = {'class_to_idx': model.class_to_idx,\n                  'idx_to_class': model.idx_to_class,\n                  'epochs': model.epochs}\n\n    # Extract the final classifier and the state dictionary\n    if model_name == 'vgg16':\n        checkpoint['classifier'] = model.classifier\n        checkpoint['state_dict'] = model.state_dict()\n\n    # Add the optimizer\n    checkpoint['optimizer'] = model.optimizer\n    checkpoint['optimizer_state_dict'] = model.optimizer.state_dict()\n\n    # Save the data to the path\n    torch.save(checkpoint, path)","1a1bfe12":"save_checkpoint(model, path=checkpoint_path)","023a4d21":"def load_checkpoint(path):\n    \"\"\"Load a PyTorch model checkpoint\n\n    Params\n    --------\n        path (str): saved model checkpoint. Must start with `model_name-` and end in '.pth'\n\n    Returns\n    --------\n        None, save the `model` to `path`\n\n    \"\"\"\n\n    # Get the model name\n    model_name = 'vgg16'\n\n    # Load in checkpoint\n    checkpoint = torch.load(path)\n\n    if model_name == 'vgg16':\n        model = models.vgg16(pretrained=True)\n        # Make sure to set parameters as not trainable\n        for param in model.parameters():\n            param.requires_grad = False\n        model.classifier = checkpoint['classifier']\n        \n    # Load in the state dict\n    model.load_state_dict(checkpoint['state_dict'])\n\n    total_params = sum(p.numel() for p in model.parameters())\n    print(f'{total_params:,} total parameters.')\n    total_trainable_params = sum(\n        p.numel() for p in model.parameters() if p.requires_grad)\n    print(f'{total_trainable_params:,} total gradient parameters.')\n\n    # Move to gpu\n    if train_on_gpu:\n        model = model.to('cuda')\n\n    # Model basics\n    model.class_to_idx = checkpoint['class_to_idx']\n    model.idx_to_class = checkpoint['idx_to_class']\n    model.epochs = checkpoint['epochs']\n\n    # Optimizer\n    optimizer = checkpoint['optimizer']\n    optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n\n    return model, optimizer","4eedfbc1":"model, optimizer = load_checkpoint(path=checkpoint_path)\nsummary(model, input_size=(3, 224, 224), batch_size=batch_size)","77b060d6":"model, history = train(model,criterion,optimizer,dataloaders['train'],dataloaders['val'],\n                       save_file_name=save_file_name,max_epochs_stop=3,n_epochs=20,print_every=1)","3724863b":"def process_image(image_path):\n    \"\"\"Process an image path into a PyTorch tensor\"\"\"\n\n    image = Image.open(image_path)\n    # Resize\n    img = image.resize((256, 256))\n\n    # Center crop\n    width = 256\n    height = 256\n    new_width = 224\n    new_height = 224\n\n    left = (width - new_width) \/ 2\n    top = (height - new_height) \/ 2\n    right = (width + new_width) \/ 2\n    bottom = (height + new_height) \/ 2\n    img = img.crop((left, top, right, bottom))\n\n    # Convert to numpy, transpose color dimension and normalize\n    img = np.array(img)\/ 256\n\n    # Standardization\n    means = np.array([0.485, 0.456, 0.406]).reshape((3, 1, 1))\n    stds = np.array([0.229, 0.224, 0.225]).reshape((3, 1, 1))\n\n    img = img - means\n    img = img \/ stds\n\n    img_tensor = torch.Tensor(img)\n\n    return img_tensor","40b0583c":"x = process_image(testdir + '\/DRUSEN\/DRUSEN-8039905-1.jpeg')\nx.shape","9d99be22":"ax, image = imshow_tensor(x)","fc7b704f":"ax, image = imshow_tensor(process_image(testdir + '\/NORMAL\/NORMAL-3077276-1.jpeg'))","122dcf07":"def predict(image_path, model, topk=4):\n    \"\"\"Make a prediction for an image using a trained model\n\n    Params\n    --------\n        image_path (str): filename of the image\n        model (PyTorch model): trained model for inference\n        topk (int): number of top predictions to return\n\n    Returns\n\n    \"\"\"\n    real_class = image_path.split('\/')[-2]\n\n    # Convert to pytorch tensor\n    img_tensor = process_image(image_path)\n\n    # Resize\n    if train_on_gpu:\n        img_tensor = img_tensor.view(1, 3, 224, 224).cuda()\n\n    # Set to evaluation\n    with torch.no_grad():\n        model.eval()\n        # Model outputs log probabilities\n        out = model(img_tensor)\n        ps = torch.exp(out)\n\n        # Find the topk predictions\n        topk, topclass = ps.topk(topk, dim=1)\n\n        # Extract the actual classes and probabilities\n        top_classes = [model.idx_to_class[class_] for class_ in topclass.cpu().numpy()[0]]\n        top_p = topk.cpu().numpy()[0]\n\n        return img_tensor.cpu().squeeze(), top_p, top_classes, real_class","ac00d7e7":"def random_test_image():\n    \"\"\"Pick a random test image from the test directory\"\"\"\n    c = np.random.choice(cat_df['category'])\n    root = testdir + c + '\/'\n    img_path = root + np.random.choice(os.listdir(root))\n    return img_path\n\n_ = imshow_tensor(process_image(random_test_image()))","242c9d1c":"img, top_p, top_classes, real_class = predict(random_test_image(), model)\nimg.shape","ba79ec2f":"top_p, top_classes, real_class","9c449fef":"img, top_p, top_classes, real_class = predict(random_test_image(), model)\ntop_p, top_classes, real_class","14f0a2eb":"def display_prediction(image_path, model, topk):\n    \"\"\"Display image and preditions from model\"\"\"\n\n    # Get predictions\n    img, ps, classes, y_obs = predict(image_path, model, topk)\n    # Convert results to dataframe for plotting\n    result = pd.DataFrame({'p': ps}, index=classes)\n\n    # Show the image\n    plt.figure(figsize=(16, 5))\n    ax = plt.subplot(1, 2, 1)\n    ax, img = imshow_tensor(img, ax=ax)\n\n    # Set title to be the actual class\n    ax.set_title(y_obs, size=20)\n\n    ax = plt.subplot(1, 2, 2)\n    # Plot a bar plot of predictions\n    result.sort_values('p')['p'].plot.barh(color='blue', edgecolor='k', ax=ax)\n    plt.xlabel('Predicted Probability')\n    plt.tight_layout()","4d8239ae":"display_prediction(random_test_image(), model, topk=4)","b02df873":"display_prediction(random_test_image(), model, topk=4)","fbc1560e":"def accuracy(output, target, topk=(1, )):\n    \"\"\"Compute the topk accuracy(s)\"\"\"\n    if train_on_gpu:\n        output = output.to('cuda')\n        target = target.to('cuda')\n\n    with torch.no_grad():\n        maxk = 4\n        batch_size = target.size(0)\n\n        # Find the predicted classes and transpose\n        _, pred = output.topk(k=maxk, dim=1, largest=True, sorted=True)\n        pred = pred.t()\n\n        # Determine predictions equal to the targets\n        correct = pred.eq(target.view(1, -1).expand_as(pred))\n\n        res = []\n\n        # For each k, find the percentage of correct\n        for k in topk:\n            correct_k = correct[:k].view(-1).float().sum(0, keepdim=True)\n            res.append(correct_k.mul_(100.0 \/ batch_size).item())\n        return res","8cb28080":"testiter = iter(dataloaders['test'])\n# Get a batch of testing images and labels\nfeatures, targets = next(testiter)\n\nif train_on_gpu:\n    accuracy(model(features.to('cuda')), targets, topk=(1, 4))","58277009":"def evaluate(model, test_loader, criterion, topk=(1, 4)):\n    \"\"\"Measure the performance of a trained PyTorch model\n\n    Params\n    --------\n        model (PyTorch model): trained cnn for inference\n        test_loader (PyTorch DataLoader): test dataloader\n        topk (tuple of ints): accuracy to measure\n\n    Returns\n    --------\n        results (DataFrame): results for each category\n\n    \"\"\"\n\n    classes = []\n    losses = []\n    # Hold accuracy results\n    acc_results = np.zeros((len(test_loader.dataset), len(topk)))\n    i = 0\n\n    model.eval()\n    with torch.no_grad():\n\n        # Testing loop\n        for data, targets in test_loader:\n\n            # Tensors to gpu\n            if train_on_gpu:\n                data, targets = data.to('cuda'), targets.to('cuda')\n\n            # Raw model output\n            out = model(data)\n            # Iterate through each example\n            for pred, true in zip(out, targets):\n                # Find topk accuracy\n                acc_results[i, :] = accuracy(\n                    pred.unsqueeze(0), true.unsqueeze(0), topk)\n                classes.append(model.idx_to_class[true.item()])\n                # Calculate the loss\n                loss = criterion(pred.view(1, n_classes), true.view(1))\n                losses.append(loss.item())\n                i += 1\n\n    # Send results to a dataframe and calculate average across classes\n    results = pd.DataFrame(acc_results, columns=[f'top{i}' for i in topk])\n    results['class'] = classes\n    results['loss'] = losses\n    results = results.groupby(classes).mean()\n\n    return results.reset_index().rename(columns={'index': 'class'})","1cb6ebae":"criterion = nn.NLLLoss()\n# Evaluate the model on all the training data\nresults = evaluate(model, dataloaders['test'], criterion)\nresults.head()","e19c7930":"results = results.merge(cat_df, left_on='class', right_on='category').\\\n    drop(columns=['category'])\n\n# Plot using seaborn\nsns.lmplot(\n    y='top1', x='n_train', data=results, height=6)\nplt.xlabel('images')\nplt.ylabel('Accuracy (%)')\nplt.title('Top 1 Accuracy vs Number of Training Images')\nplt.ylim(-5, 105)","b2138281":"print('Category with minimum accuracy.')\nresults.loc[results['top1'].idxmin]\n\nprint('Category with minimum images.')\nresults.loc[results['n_train'].idxmin]","5613921d":"sns.lmplot(\n    y='top4', x='n_train', data=results, height=6)\nplt.xlabel('images')\nplt.ylabel('Accuracy (%)')\nplt.title('Top 5 Accuracy vs Number of Training Images')\nplt.ylim(-5, 105)","14dcef4c":"image_data = image_df.to_csv(index=False)\ncategory_data = cat_df.to_csv(index=False)","8f9c5fa7":"#### Distribution of Images\n\nThere are between approximately 36000 training images in each category.","df0f3357":"#### Mapping of Classes to Indexes\n\nTo keep track of the predictions made by the model, we create a mapping of classes to indexes and indexes to classes. This will let us know the actual class for a given prediction.","f781f36a":"The shape of a batch is `(batch_size, color_channels, height, width)`. ","ce116e53":"# Training Results\n\nWe can inspect the training progress by looking at the `history`. ","5b61e9b2":"There should be 4 different classes. We can confirm this as follows.","9d7bfbd8":"### Examples of Augmentation\n\nTo show how augmentation works, we need to write a function that will plot a tensor as an image.","71181566":"The final output will be log probabilities which we can then use in the Negative Log Likelihood Loss. ","b5315348":"We can iterate through the `DataLoaders` when doing training, validation, and testing. This construction avoids the need to load all the data into memory and also will automatically apply the transformations to each batch. On each epoch, the `Random` transformations will be different so the network will essentially see multiple versions of each training image. ","3ec67dd4":"# Testing Accuracy\n\nImage identification models are usually assessed in terms of topk accuracy (for example the vgg16 model gets 28.41% top1 error and 9.62% top4 error on Imagenet). We'll assess out model by the top1 and top4 accuracy, that is, the percentage of predictions it gets exactly correct, and the percentage of predictions where the real class is in the top 4 actual classes.","94ef17b1":"This function can be used to pick a random test image. ","d20b0727":"As expected, the training loss decreases continually with epochs. At a certain point however, the validation loss stops decreasing. There is not a massive amount of overfitting, likely because we were using Dropout. With the divergence in losses, there is likely not much more to gain from further training.","ead8fa81":"# Training\n\nFor training, we iterate through the train `DataLoader`, each time passing one batch through the model. One complete pass through the training data is known as an `epoch`, and we train for a set number of epochs or until early stopping kicks in (more below). After each batch, we calculate the loss (with `criterion(output, targets)`) and then calculate the gradients of the loss with respect to the model parameters with `loss.backward()`. This uses autodifferentiation and backpropagation to calculate the gradients. \n\nAfter calculating the gradients, we call `optimizer.step()` to update the model parameters with the gradients. This is done on every training batch so we are implementing stochastic gradient descent (or rather a version of it with momentum known as Adam). For each batch, we also compute the accuracy for monitoring and after the training loop has completed, we start the validation loop. This will be used to carry out early stopping.\n\n\n## Early Stopping\n\nEarly stopping halts the training when the validation loss has not decreased for a number of epochs. Each time the validation loss does decrease, the model weights are saved so we can later load in the best model. Early stopping is an effective method to prevent overfitting on the training data. If we continue training, the training loss will continue to decrease, but the validation loss will increase because the model is starting to memorize the training data. Early stopping prevents this from happening, and, if we save the model each epoch when the validation loss decreases, we are able to retrieve the model that does best on the validation data.\n\nEarly stopping is implemented by iterating through the validation data at the end of each training epoch and calculating the loss. We use the complete validation data every time and record whether or not the loss has decreased. If it has not for a number of epochs, we stop training, retrieve the best weights, and return them. When in the validation loop, we make sure not to update the model parameters. \n\n### Training Function\n\nThe below function trains the network while monitoring a number of different parameters. We train with early stopping on the validation set. There are a number of parameters that I've tried to explain in the doc string. Hopefully, the comments and background make things somewhat understandable! ","502c4359":"Further training is unlikely to improve the validation results. Let's move to inference.","c7208dce":"## Function to Load in Pretrained Model\n\nWe can refactor all that code into a single function that returns a pretrained model. This only accepts the vgg16 at the moment but can be extended to use other models. ","dc16ee1e":"### Move to GPU \n\nTo use a gpu in PyTorch, we simply move the whole model onto the gpu. Later we'll have to move the data to gpus in our training loop.","cda9cd55":"## Data Exploration","65c4b70b":"# Pre-Trained Models for Image Classification\n\nPyTorch has many pretrained models we can use. All of these models have been trained on Imagenet which consists of millions of images across 1000 categories. What we want to do with pretrained models is freeze the early layers, and replace the classification module with our own. \n\n## Approach\n\nThe approach for using a pre-trained image recognition model is well-established:\n\n1. Load in pre-trained weights from a network trained on a large dataset\n2. Freeze all the weights in the lower (convolutional) layers\n    * Layers to freeze can be adjusted depending on similarity of task to large training dataset\n3. Replace the classifier (fully connected) part of the network with a custom classifier\n    * Number of outputs must be set equal to the number of classes\n4. Train only the custom classifier (fully connected) layers for the task\n    * Optimizer model classifier for smaller dataset\n    \nThe idea behind pre-training is the early convolutional layers of a cnn extract features that are relevant for many image recognition tasks. The later, fully-connected layers, specialize to the specific dataset by learning higher-level features. Therefore, we can use the already trained convolutional layers while training only the fully-connected layers on our own dataset. Pre-trained networks have proven to be reasonably successful for a variety of tasks, and result in a significant reduction in training time and usually increases in performance. ","99b00281":"# Training Loss and Optimizer\n\nThe loss is the negative log likelihood and the optimizer is the Adam optimizer. The negative log likelihood in PyTorch expects log probabilities so we need to pass it the raw output from the log softmax in our model's final layer. The optimizer is told to optimizer the model parameters (only a few of which require a gradient). \n\n* Loss (criterion): keeps track of the loss itself and the gradients of the loss with respect to the model parameters (weights)\n* Optimizer: updates the parameters (weights) with the gradients ","984546da":"## Function to make predictions\n\nThe next function makes predictions on a single image. It will return the top probabilities and classes. ","5dc96510":"As with the losses, the training accuracy increases (nearly to perfect) while the validation accuracy plateaus. The model is able to achieve above 80% accuracy right away, an indication that the convolution weights learned on Imagenet were able to easily transfer to our dataset.","9ec046c6":"## Data Iterators\n\nTo avoid loading all of the data into memory at once, we use training `DataLoaders`. First, we create a dataset object from the image folders, and then we pass these to a `DataLoader`. At training time, the `DataLoader` will load the images from disk, apply the transformations, and yield a batch. To train and validation, we'll iterate through all the batches in the respective `DataLoader`. \n\nOne crucial aspect is to `shuffle` the data before passing it to the network. This means that the ordering of the image categories changes on each pass through the data (one pass through the data is one training epoch). ","0533218e":"# Image Preprocessing\n\nTo prepare the images for our network, we have to resize them to 224 x 224 and normalize each color channel by subtracting a mean value and dividing by a standard deviation. We will also augment our training data in this stage. These operations are done using image `transforms`, which prepare our data for a neural network.\n\n### Data Augmentation\n\nBecause there are a limited number of images, we can use image augmentation to artificially increase the number of images \"seen\" by the network. This means for training, we randomly resize and crop the images and also flip them horizontally. A different random transformation is applied each epoch (while training), so the network effectively sees many different versions of the same image. All of the data is also converted to Torch `Tensor`s before normalization. The validation and testing data is not augmented but is only resized and normalized. The normalization values are standardized for Imagenet. <p>\n    \nThis is not necessary here but can be useful in some other data where training images are less for some categories","40a542ae":" \n**That's all for this kernel and stay tuned for next kernels** ","10e8af1e":"The `classifier` is the part of the model that we'll train. However, for the vgg, we'll only need to train the last few layers in the classifier and not even all of the fully connected layers. ","0dd6eebc":"## Function to Evaluate Model Over All Classes\n\nThe next function iterates through the testing set in order to make predictions for each image. It calculates performance for each category.","d1510e86":"We can now use these two functions to save and load in a complete model. We can use this model to continue training. ","b2ff88a0":"It looks like there is some relationship between the number of training images and the accuracy. However, there are a few classes with limited images in which the model does quite well.","018dce99":"### Freeze Early layers\n\nWe freeze all of the existing layers in the network by setting `requires_grad` to `False`. ","c7c76a5f":"This function processes an image path into a PyTorch tensor for predictions. It applies the same transformations as was done to the validation data: cropping (center) and normalizing with means and standard deviations.","f003bfbe":"## Load in a Checkpoint\n\nNow we need to write the function to load in the checkpoint. This just takes in a `path` and returns a model from a saved checkpoint.","a2bd3c22":"### Function to Display Predictions\n\nThis function displays the picture along with the `topk` predictions from the model. The title over the image displays the true class.","54fa11e2":"# Inference\n\nAfter the model has been trained to the point on no more improvement on the validation data, we need to test it on data it has never seen. Early stopping with a validation set does decrease overfitting to the training set, but at the cost of potentially overfitting to the validation data. For a final estimate of the model's performance, we need to use the hold out testing data. \nHere, we'll look at individual predictions along with loss and accuracy on the entire testing dataset. ","50bf088d":"### Add on Custom Classifier\n\nWe'll train a classifier consisting of the following layers\n\n* Fully connected with ReLU activation (n_inputs, 256)\n* Dropout with 40% chance of dropping\n* Fully connected with log softmax output (256, n_classes)\n\nTo build our custom classifier, we use the `nn.Sequential()` module which allows us to specify each layer one after the other. We assign our custom classifier to the final `classifier` layer in the already trained vgg network. When we add on the extra layers, they are set to `require_grad=True` by default. These will be the only layers that are trained. ","a8a8ab88":"The function below computes accuracy for a prediction and a target in terms of topk.","aad6715c":"#### Distribution of Images Sizes\n\nThe images themselves have vastly different shapes. We can see this by looking at the stats of images sizes by category.","34818a87":"## Process to Use Pre-Trained Model\n\nFirst off, load in the model with pretrained weights. ","8e0b7df8":"Below we take a look at the number of images in each category and the size of the images.","3f256322":"I'm guessing the categories with more examples will be easier to learn. One way we partially get around the small number of images is through data augmentation (which we'll see in a bit).","bb45285f":"Below we can look at the parameters (weights) that will be updated by the optimizer during training.","68dfac53":"# Saving Model\n\nThe `train` function saves the best model `state_dict()` which are the weights of the model. To save more information about the model, we use the below function. ","0c09a6e7":"When we use the images in the pre-trained network, we'll have to reshape them to 224 x 224. This is the size of Imagenet images and is therefore what the model expects. The images that are larger than this will be truncated while the smaller images will be interpolated. ","9c36c362":"We can see that the model is quite large and training all of the layers would take a considerable time. Even with only a few layers to train, this can still take a while to train. You might need to decrease the `batch_size` if this is not fitting on your gpu (hopefully you have one).","821ad2f5":"### Parameters\n\nThe parameters in this cell can be changed as needed.","e19ef8bf":"This should return the same as the pretrained model with the custom classifier. In the case of resnet, we replace the `fc` layers with the same classifier.\n\nThe `torchsummary` library has a helpful function called `summary` which summarizes our model.","af3a2a92":"We'll be using the `vgg16`. The VGG networks had very good performance without taking a long time to train. ","8fb0db96":"We'll work with two example images and apply the train transformations.","3cb02810":"Even with only a few layers set to trainable, there are still over a million parameters (weights) that will be updated during training. In effect, we are _fine-tuning_ the model to work on our problem. We already know it works well on Imagenet, and because our images are relatively similar, we should expect the model to easily _transfer_ its knowledge from Imagenet to our dataset.","438da45d":"## Test Results\n\nWe'd expect the model to do better on those classes for which it had the most training images. We can see if that is the case."}}