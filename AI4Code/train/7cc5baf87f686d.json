{"cell_type":{"f0d7ef0b":"code","6aaeadf3":"code","d5dca055":"code","c74aeb6f":"code","73b02c60":"code","1c5c178d":"code","dbf19057":"code","5c01c4f6":"code","e487e8e6":"code","356b1b4c":"code","c5c6e29f":"code","a7d9461c":"code","df1788ea":"code","ec1225db":"code","0990d317":"code","54c6179d":"code","0ef277e2":"code","773a3a74":"code","3557b404":"code","18cc2fd0":"code","dd40400d":"code","9892768a":"code","af51f714":"code","cb07334b":"code","69519527":"markdown","b3b15fd8":"markdown","4adf1e7a":"markdown","1a36dbc4":"markdown","e9985eba":"markdown","68b859da":"markdown","dfe7c803":"markdown","108aa5e3":"markdown","24cd76cd":"markdown","b3b294a6":"markdown","f314bd88":"markdown","59a7fb90":"markdown","d4c2b4f8":"markdown","f2a20c9a":"markdown","9c576c04":"markdown","dc29d7a0":"markdown","b2c44e47":"markdown","8c915543":"markdown","37620ca6":"markdown"},"source":{"f0d7ef0b":"\n# Libraries to help with reading and manipulating data\nimport numpy as np\nimport pandas as pd\n\n# Libraries to help with data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set()\n\n# split the data into train and test\nfrom sklearn.model_selection import train_test_split\n\n# to build linear regression_model\nfrom sklearn.linear_model import LinearRegression\n\n# to check model performance\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score","6aaeadf3":"df = pd.read_csv(\"..\/input\/d\/gopalchettri\/usa-housing\/USA_Housing.csv\")\n","d5dca055":"df.head()","c74aeb6f":"df.info()","73b02c60":"df.describe()","1c5c178d":"## Creating pairplot\nsns.pairplot(df)","dbf19057":"# function to plot a boxplot and a histogram along the same scale.\n\n\ndef histogram_boxplot(data, feature, figsize=(12, 7), kde=False, bins=None):\n    \"\"\"\n    Boxplot and histogram combined\n\n    data: dataframe\n    feature: dataframe column\n    figsize: size of figure (default (12,7))\n    kde: whether to the show density curve (default False)\n    bins: number of bins for histogram (default None)\n    \"\"\"\n    f2, (ax_box2, ax_hist2) = plt.subplots(\n        nrows=2,  # Number of rows of the subplot grid= 2\n        sharex=True,  # x-axis will be shared among all subplots\n        gridspec_kw={\"height_ratios\": (0.25, 0.75)},\n        figsize=figsize,\n    )  # creating the 2 subplots\n    sns.boxplot(\n        data=data, x=feature, ax=ax_box2, showmeans=True, color=\"violet\"\n    )  # boxplot will be created and a star will indicate the mean value of the column\n    sns.histplot(\n        data=data, x=feature, kde=kde, ax=ax_hist2, bins=bins, palette=\"winter\"\n    ) if bins else sns.histplot(\n        data=data, x=feature, kde=kde, ax=ax_hist2\n    )  # For histogram\n    ax_hist2.axvline(\n        data[feature].mean(), color=\"green\", linestyle=\"--\"\n    )  # Add mean to the histogram\n    ax_hist2.axvline(\n        data[feature].median(), color=\"black\", linestyle=\"-\"\n    )  # Add median to the histogram","5c01c4f6":"histogram_boxplot(df, \"Price\")","e487e8e6":"df.corr()","356b1b4c":"# Chart the heatmap\nplt.figure(figsize=(15, 10))\nsns.heatmap(df.corr(), annot=True, cmap=\"Spectral\")","c5c6e29f":"# defining X and y variables\nX = df.drop([\"Price\", \"Address\"], axis=1)\ny = df[\"Price\"]\n\nprint(X.head())\nprint(y.head())","a7d9461c":"# split the data in 70:30 ratio for train to test data\n\nx_train, x_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.3, random_state=42\n)","df1788ea":"print(\"Number of rows in train data =\", x_train.shape[0])\nprint(\"Number of rows in test data =\", x_test.shape[0])","ec1225db":"## Fitting the linear regression model on the train data\n\nmodel = LinearRegression()\nmodel.fit(x_train, y_train)","0990d317":"## Display the intercept","54c6179d":"print(model.intercept_)","0ef277e2":"coeff_df = pd.DataFrame(model.coef_, X.columns, columns=[\"Coefficient\"])\ncoeff_df","773a3a74":"prediction = model.predict(x_test)\n\npredtest = pd.DataFrame({\"Actual\": y_test, \"Predicted\": prediction})\npredtest.head(10)","3557b404":"### visualise\ndf1 = predtest.sample(25, random_state=1)\ndf1.plot(kind=\"bar\", figsize=(15, 7))\nplt.show()","18cc2fd0":"sns.distplot((y_test - prediction), bins = 50, hist_kws=dict(edgecolor=\"black\", linewidth=1))\n","dd40400d":"from sklearn import metrics","9892768a":"# function to compute adjusted R-squared\ndef adj_r2_score(predictors, targets, predictions):\n    r2 = r2_score(targets, predictions)\n    n = predictors.shape[0]\n    k = predictors.shape[1]\n    return 1 - ((1 - r2) * (n - 1) \/ (n - k - 1))\n\n\n# function to compute MAPE\ndef mape_score(targets, predictions):\n    return np.mean(np.abs(targets - predictions) \/ targets) * 100\n\n\n# function to compute different metrics to check performance of a regression model\ndef model_performance_regression(model, predictors, target):\n    \"\"\"\n    Function to compute different metrics to check regression model performance\n\n    model: regressor\n    predictors: independent variables\n    target: dependent variable\n    \"\"\"\n\n    # predicting using the independent variables\n    pred = model.predict(predictors)\n\n    r2 = r2_score(target, pred)  # to compute R-squared\n    adjr2 = adj_r2_score(predictors, target, pred)  # to compute adjusted R-squared\n    rmse = np.sqrt(mean_squared_error(target, pred))  # to compute RMSE\n    mae = mean_absolute_error(target, pred)  # to compute MAE\n    mape = mape_score(target, pred)  # to compute MAPE\n\n    # creating a dataframe of metrics\n    data1_perf = pd.DataFrame(\n        {\n            \"RMSE\": rmse,\n            \"MAE\": mae,\n            \"R-squared\": r2,\n            \"Adj. R-squared\": adjr2,\n            \"MAPE\": mape,\n        },\n        index=[0],\n    )\n\n    return data1_perf","af51f714":"# checking model performance on train set (seen 70% data)\nprint(\"Training Performance\\n\")\nmodel_train_perf = model_performance_regression(model, x_train, y_train)\nmodel_train_perf","cb07334b":"# checking model performance on test set (seen 30% data)\nprint(\"Test Performance\\n\")\nmodel_test_perf = model_performance_regression(\n    model, x_test, y_test\n)\nmodel_test_perf","69519527":"--- END--","b3b15fd8":"### Predicting Housing Prices for regions in the USA.\nWe will build a model to predict the house prices in the USA\n\n\n### The data contains the following columns:\n\n- Avg. Area Income': Avg. Income of residents of the city house is located in.\n- Avg. Area House Age': Avg Age of Houses in same city\n- Avg. Area Number of Rooms': Avg Number of Rooms for Houses in same city\n- Avg. Area Number of Bedrooms': Avg Number of Bedrooms for Houses in same city\n- Area Population': Population of city house is located in\n- Price': Price that the house sold at\n- Address': Address for the house\n","4adf1e7a":"*Observation: \n- Price has highest positive correlation to average area income (correlation of 0.64)\n- Price also has quite high positive correlation with area population\n- Area average number of room has moderate positive correlation with price (0.34)","1a36dbc4":"### Check the coefficient and intercept of the model\n\n","e9985eba":"## EDA","68b859da":"### Calculate Mean absolute Error, Mean Squared Error, and Root Mean Squared Error\n(the lower the better)\n","dfe7c803":"### Residual histogram\n#### plotting a histogram of the residuals","108aa5e3":"### Evaluation of Model performance","24cd76cd":"### Model Building","b3b294a6":"* Observation: the prices seem to follow normal distribution with the range from 0.9 to 1.4 , mean of house price is 1.23","f314bd88":"### Predictions from the model","59a7fb90":"**Conclusion** \n- The training $R^2$ is 0.91 so the model is not underfitting.\n- The train and test RMSE and MAE are comparable so the model is not overfitting either.\n- MAE suggest that the model can predict the house price within a mean error of 81,135USD\n- Adjusted R square meaning the model can explain 91% of the variation\n","d4c2b4f8":"#### Split the dataset","f2a20c9a":"## Prepare the model","9c576c04":"We'll split the data into train and test to be able to evaluate the model that we build on the train data.\n\nWe will build a Linear Regression model using the train data and then check it's performance.","dc29d7a0":"### Display the correlation among all variables","b2c44e47":"*Observation: the model could predict the prices quite well","8c915543":"*Observation: Average Area house age and number of rooms have strongest impact on the prices","37620ca6":"### Let's look at the distribution of housing price across USA"}}