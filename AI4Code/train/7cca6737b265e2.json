{"cell_type":{"1e6d7e84":"code","ab84153f":"code","8828085e":"code","b9f63a08":"code","38896e0f":"code","afcca966":"code","27dec95d":"code","b456371c":"code","f931243a":"code","5ee8ae28":"code","1855bf72":"markdown","6f7d88cb":"markdown","211c3823":"markdown","a883de56":"markdown","0fcba31e":"markdown","11dfbcd3":"markdown","c65dff38":"markdown","d9eb0b5c":"markdown","c50a637b":"markdown","b7a3c983":"markdown","dc85f97e":"markdown","b725966d":"markdown","5e035e29":"markdown","a5df64e5":"markdown","404fca3c":"markdown","8a160a3f":"markdown"},"source":{"1e6d7e84":"import tensorflow as tf\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()","ab84153f":"import matplotlib.pyplot as plt\n%matplotlib inline \nimage_index = 7777 \nprint(y_train[image_index]) \nplt.imshow(x_train[image_index], cmap='Greys')","8828085e":"x_train.shape","b9f63a08":"x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)\nx_test = x_test.reshape(x_test.shape[0], 28, 28, 1)\ninput_shape = (28, 28, 1)\n\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\n\nx_train \/= 255\nx_test \/= 255\nprint('x_train shape:', x_train.shape)\nprint('Number of images in x_train', x_train.shape[0])\nprint('Number of images in x_test', x_test.shape[0])","38896e0f":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D\n\nmodel = Sequential()\nmodel.add(Conv2D(28, kernel_size=(3,3), input_shape=input_shape))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation=tf.nn.relu))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10,activation=tf.nn.softmax))","afcca966":"model.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy', \n              metrics=['accuracy'])\nmodel.fit(x=x_train,y=y_train, epochs=10)","27dec95d":"model.evaluate(x_test, y_test)","b456371c":"image_index = 2859\nplt.imshow(x_test[image_index].reshape(28, 28),cmap='Greys')\npredict = x_test[image_index].reshape(28,28)\npred = model.predict(x_test[image_index].reshape(1, 28, 28, 1))\nprint(pred.argmax())","f931243a":"test_labels = model.predict(x_test)\ntest_labels[1]","5ee8ae28":"results = np.argmax(test_labels,axis = 1)\nresults = pd.Series(results,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"submission_final.csv\",index=False)","1855bf72":"# Downloading MNIST Dataset\n\nThe MNIST dataset is one of the most common datasets used for image classification and accessible from many different sources. In fact, even Tensorflow and Keras allow us to import and download the MNIST dataset directly from their API. \n\nThe reason why I'm choosing this method is you can run this on any environment and you can have the data set downloaded \n\nThe Below are the first two lines of our code where we download our dataset.","6f7d88cb":"# **Evaluating the Model**\n\nNow we can go forward and evaluate the model by the below code. You will see that it has an accuracy of 98.5% and loss is very low. That means that using 10 epoch was a good fit for this use case. As this is a very basic model and our first model, we can consider that the model and the result is very good.","211c3823":"# **Compiling and Fitting the Model**\n\nWe created an non-optimized empty CNN using the above code.Now we have to set an optimizer with a given loss function which uses a metric. Then, we can fit the model by using our train data. \nYou can play around with the optimizer, loss function, metrics, and epochs.I can say that adam optimizer is usually out-performs the other optimizers, that's why I used that. \nYou might think that Epoch number is a bit less, but in our cases it gives us a pretty amazing accuracy. Since the dataset we have does not require heavy computing power, you can play around with epoch numbers as well.\nPlease follow the below code to have a better understanding.","a883de56":"![image.png](attachment:image.png)","0fcba31e":"I hope you guys enjoyed this. \nPlease let me know if you have any questions. \n\nThis is my first ever notebook and I hope to keep improving with time. \n\nPlease **upvote** is you enjoyed the article, will keep me inspired and motivated.\ud83d\ude0a\ud83d\ude01","11dfbcd3":"Now, we need to know the shape of the dataset so that we can use in for CNN. So we will run the below code. As you can see we will (60000,28,28) as our result which means that we have 60000 images in our dataset and size of each image is 28 * 28 pixel ","c65dff38":"We need to understand that our data set contains 60,000 traning images and 10000 testing images. \n\nThat is why is you look at the above code, you will see that I have seperated the two groups as train and test datasets and also have seperated the labels and image. Take into notice that x_train & x_test basically contains grayscale codes while y_test & y_train contains labels from 0-9 which represents the numbers \n\nTo visualize these numbers we will use matplotlib and once you run the below code you will be able to see gray scale visualization of the RGB codes. \n\nPlease note that you can change the image_index upto 60000. For us it will show 8.","d9eb0b5c":"# **Reshaping and Normalizing the Images**\n\nWe all know that to use Keras API, we will need to have 4-dimension numpy arrays. But we see from the above code result we have 3-dimension numpy array. So, if you take a look at the code below, the first three lines explain how we can convert 3-dims to 4-dims. The next two lines are basically to have floating values after the division. \nNow coming to the normalzing part, we will always we to do this in our neural networks. This can be done by the last two lines of the code(before print statements) and all we need to do is we need to divide it by 255 (which is the maximum RGB code minus the minimum RGB code).\nPlease now follow the below code to understand the whole: ","c50a637b":"# Layers in CNN\n\nThere are mainly 5 different types of layers in CNN \n\n1. Input layer\n2. Convo layer (Convo + ReLU)\n3. Pooling layer\n4. Fully connected(FC) layer\n5. Softmax\/logistic layer\n6. Output layer","b7a3c983":"A CNN is a special case of the neural network described above. A CNN consists of one or more convolutional layers, often with a subsampling layer, which are followed by one or more fully connected layers as in a standard neural network. \nThe design of a CNN is motivated by the discovery of a visual mechanism, the visual cortex, in the brain. The visual cortex contains a lot of cells that are responsible for detecting light in small, overlapping sub-regions of the visual field, which are called receptive fields. These cells act as local filters over the input space, and the more complex cells have larger receptive fields. The convolution layer in a CNN performs the function that is performed by the cells in the visual cortex\n ","dc85f97e":"# Final Submission \n\nWe will now convert it into CSV file and download the results.","b725966d":"![image.png](attachment:image.png)","5e035e29":"# **Building the Convolutional Neural Network**\n\nSo we are creating our model by used Keras API and hence it will either have Tensorflow or Theano in backend. Therefore, I will import the Sequential Model from Keras and add Conv2D, MaxPooling, Flatten, Dropout, and Dense layers. To understand better, Dropout layers fight with the overfitting by disregarding some of the neurons while training while Flatten layers flatten 2D arrays to 1D array before building the fully connected layers. \nPlease follow the below code on how to do it: \nYou can play around with kernel size, pool size, activation functions, dropout rate, and number of neurons in the first Dense layer to get a better result.","a5df64e5":"# What is CNN","404fca3c":"Hello Fellow Enthusiasts, \n\n\nI have been studying Deep Learning for almost 2 years now and this is the first time I have entered Kaggle. I hope you all enjoy the code and hopefully my explanation is clear. I have tried to keep it verysimple. I have not given visualization as I thought it would be better to understand the code implementation for starters. \n\nPlease upvote if you find the notebook useful \ud83d\ude0a . \n\nLet's now jump into the theory and then I will walk you through the code.\ud83e\udd13","8a160a3f":"Now you can check if you model is trained well. Change the image_index and run the code to see if the number predicted is accurate or not. "}}