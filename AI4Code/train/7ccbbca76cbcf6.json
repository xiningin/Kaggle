{"cell_type":{"077f81ff":"code","c99c2da5":"code","238e8f3b":"code","41cf52c2":"code","e90e452a":"code","6d317ae6":"code","11dc17c9":"code","f67b9a4d":"code","ce531cd0":"code","0ebb775e":"code","c37d0db6":"code","3fbe1dce":"code","1527995f":"code","1246c29d":"code","03404d5d":"code","aa6cf141":"code","eb1a28e3":"code","7030a26d":"code","6d94ea1f":"code","5da420c7":"code","0552ea48":"code","8e16a3d8":"code","545f2be9":"code","65651b47":"code","d6b56259":"code","6a0c98a0":"code","1e94506a":"code","58bbb081":"code","83632342":"code","00bf04c3":"code","fddc689d":"code","1a08badb":"code","99a6742c":"code","f1b70421":"code","8353dd8b":"code","a0924ba3":"code","6ac5da4f":"code","d8874aa3":"code","e2734a94":"code","17a43ecb":"code","9577d3ba":"code","d0985d3a":"code","3f8a1b48":"markdown","00c203b4":"markdown","e945a66f":"markdown","f16cbfb4":"markdown","95a29c2e":"markdown","e5bc6b1d":"markdown","48f3152a":"markdown","01fa2644":"markdown","472283ca":"markdown","1d396a3f":"markdown","e7524320":"markdown","c437f9be":"markdown","543b32e2":"markdown","7cdeaca1":"markdown","5dca82ff":"markdown","ce71e312":"markdown","b37d0b5a":"markdown","ca751181":"markdown","a43048cc":"markdown","9c7de2f5":"markdown","a441d3ab":"markdown","3fbdd273":"markdown"},"source":{"077f81ff":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\nimport json\nfrom geopy.geocoders import Nominatim\nimport requests\nfrom bs4 import BeautifulSoup\nfrom pandas.io.json import json_normalize\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\nfrom sklearn.cluster import KMeans\nimport folium\nprint('import successful')","c99c2da5":"data = requests.get('https:\/\/en.wikipedia.org\/wiki\/List_of_postal_codes_of_Canada:_M').text","238e8f3b":"soup = BeautifulSoup(data, 'html.parser')","41cf52c2":"postal_code_list, borough_list, neighborhood_list = [], [], []","e90e452a":"for row in soup.find('table').find_all('tr'):\n    cells = row.find_all('td')\n    if len(cells) > 0:\n        postal_code_list.append(cells[0].text.rstrip('\\n'))\n        borough_list.append(cells[1].text.rstrip('\\n'))\n        neighborhood_list.append(cells[2].text.rstrip('\\n'))","6d317ae6":"df = pd.DataFrame({\n    'postal_code': postal_code_list,\n    'borough': borough_list, \n    'neighborhood': neighborhood_list\n})\n\nprint(df.shape)\ndf.head()","11dc17c9":"toronto_df = df[df.borough!='Not assigned'].reset_index(drop=True)\nprint(toronto_df.shape)\ntoronto_df.sample(5)","f67b9a4d":"toronto_df.isnull().sum()","ce531cd0":"toronto_grouped_df = toronto_df.groupby(['postal_code','borough'], as_index=False).agg(lambda x: ', '.join(x))\nprint(toronto_grouped_df.shape)\ntoronto_grouped_df.head()","0ebb775e":"def geolocate():\n    global lat, long, place \n    lat, long, place = [], [], []\n    n=0\n    for name in toronto_grouped_df.neighborhood:\n        geolocator = Nominatim(user_agent='america explorer')\n        location = geolocator.geocode(name)\n        if location!=None:\n            lat.append(location.latitude)\n            long.append(location.longitude)\n            #print(location.latitude, location.longitude)\n        else:\n            lat.append(np.nan)\n            long.append(np.nan)\n            place.append(name)\n            #print(np.nan, np.nan, '-->', n)\n            n += 1\n    print('there are {} locations geolocator could not recongnize'.format(n))","c37d0db6":"geolocate()","3fbe1dce":"geopy = pd.read_csv('..\/input\/geopycsv\/geopy.csv')","1527995f":"df2 = toronto_grouped_df\ndf2['latitude'] = geopy['Latitude']\ndf2['longitude'] = geopy['Longitude']\ndf2.head(3)","1246c29d":"geolocator = Nominatim(user_agent='my-app')\nlocator = geolocator.geocode('Toronto')\nprint('The Latitude and Longitude of Toronto is {} and {}'.format(locator.latitude, locator.longitude))","03404d5d":"map_toronto = folium.Map(location=[locator.latitude, locator.longitude], zoom_start=10)\nfor lat, long, borough, neighborhood in zip(df2.latitude, df2.longitude, df2.borough, df2.neighborhood):\n    label='{}, {}'.format(neighborhood, borough)\n    label=folium.Popup(label, parse_html=True) \n    folium.CircleMarker(\n        [lat, long],\n        radius=5,\n        popup=label,\n        color='blue',\n        fill=True,\n        fill_color='#3155CC',\n        fill_opacity=0.7,\n        parse_html=False\n    ).add_to(map_toronto)\nmap_toronto","aa6cf141":"borough_names = df2.borough.unique().tolist()\nborough_with_toronto = []\n\nfor x in borough_names:\n    if 'toronto' in x.lower():\n        borough_with_toronto.append(x)\n        \nborough_with_toronto","eb1a28e3":"df_borough = df2[df2.borough.isin(borough_with_toronto)].reset_index(drop=True)\nprint(df_borough.shape)\ndf_borough.head()","7030a26d":"toronto_map = folium.Map(location=[locator.latitude, locator.longitude], zoom_start=10)\n\nfor lat, long, borough, neighborhood in zip(df_borough.latitude, df_borough.longitude, df_borough.borough, df_borough.neighborhood):\n    label = '{}, {}'.format(neighborhood, borough)\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker(\n        [lat, long], \n        radius=5,\n        popup=label,\n        color='red',\n        fill=True, \n        fill_color='#3815CC',\n        fill_opacity=0.5,\n        parse_html=False\n    ).add_to(toronto_map)\n\ntoronto_map","6d94ea1f":"CLIENT_ID = 'XVY0YGK3DX5QGHMN2TGSK2EWA55P3JNPIVC5QVW5SGIGUI2L' \nCLIENT_SECRET = 'T53Z3HT4W5DVALRIPBK2DPD4NFOCISMUTMNBLNW13KEJTAIJ'\nVERSION = '20191101'\n\nprint('Your credentails:')\nprint('CLIENT_ID: ' + CLIENT_ID)\nprint('CLIENT_SECRET:' + CLIENT_SECRET)","5da420c7":"def get_nearby_venues(names, latitude, longitude, radius=500):\n    venues = []\n    for name, lat, long in zip(names, latitude, longitude):\n        print(name)\n                    \n        # create the API request URL\n        url = 'https:\/\/api.foursquare.com\/v2\/venues\/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(\n            CLIENT_ID, \n            CLIENT_SECRET, \n            VERSION, \n            lat, \n            long, \n            radius, \n            100)\n        \n        results = requests.get(url).json()['response']['groups'][0]['items']\n        \n        venues.append([(\n            name, \n            lat, \n            long, \n            v['venue']['name'], \n            v['venue']['location']['lat'], \n            v['venue']['location']['lng'], \n            v['venue']['categories'][0]['name']) for v in results])\n        \n    nearby_venues = pd.DataFrame([item for venue in venues for item in venue])\n        \n    nearby_venues.columns = ['neighborhood', 'neighborhood_lat', 'neighborhood_lng',\n                            'venue', 'venue_lat', 'venue_lng', 'venue_category']\n\n    return nearby_venues\n\n       ","0552ea48":"toronto_venues = get_nearby_venues(names=df2['neighborhood'], \n                                   latitude=df2['latitude'], \n                                   longitude=df2['longitude']\n                                  )\ntoronto_venues.head()","8e16a3d8":"toronto_venues.groupby('neighborhood').count()","545f2be9":"print('there are {} unique venue categories'.format(len(toronto_venues['venue_category'].unique())))","65651b47":"toronto_onehot = pd.get_dummies(toronto_venues[['venue_category']], prefix='', prefix_sep='')\ntoronto_onehot['neighborhood'] = toronto_venues['neighborhood']\ntoronto_onehot.head(3)","d6b56259":"col = [toronto_onehot.columns[-1]] + list(toronto_onehot.columns[:-1])\ntoronto_onehot = toronto_onehot[col]\ntoronto_onehot.head()","6a0c98a0":"toronto_onehot.shape","1e94506a":"toronto_grouped = toronto_onehot.groupby('neighborhood').mean().reset_index()","58bbb081":"toronto_grouped.head()","83632342":"num_of_venues = 5\n\nfor hood in toronto_grouped['neighborhood']:\n    print('----{}----'.format(hood))\n    temp = toronto_grouped[toronto_grouped.neighborhood==hood].T.reset_index()\n    temp.columns = ['venue', 'freq']\n    temp = temp.iloc[1:]\n    temp['freq'] = temp.freq.astype('float')\n    temp = temp.round({'freq':2})\n    print(temp.sort_values('freq', ascending=False).reset_index(drop=True).head(num_of_venues))\n    print('\\n')","00bf04c3":"def return_most_common_venues(row, num_of_top_venues):\n    row_categories = row.iloc[1:]\n    row_categories_sorted = row_categories.sort_values(ascending=False)\n    \n    return row_categories_sorted.index.values[0:num_of_top_venues]","fddc689d":"\nnum_top_venues = 10\n\nindicators = ['st', 'nd', 'rd']\n\n# create columns according to number of top venues\ncolumns = ['neighborhood']\nfor ind in np.arange(num_top_venues):\n    try:\n        columns.append('{}{} Most Common Venue'.format(ind+1, indicators[ind]))\n    except:\n        columns.append('{}th Most Common Venue'.format(ind+1))\n\n# create a new dataframe\nneighborhoods_venues_sorted = pd.DataFrame(columns=columns)\nneighborhoods_venues_sorted['neighborhood'] = toronto_grouped['neighborhood']\n\nfor ind in np.arange(toronto_grouped.shape[0]):\n    neighborhoods_venues_sorted.iloc[ind, 1:] = return_most_common_venues(toronto_grouped.iloc[ind, :], num_top_venues)\n\nneighborhoods_venues_sorted.head()","1a08badb":"kcluster=7\n\ntoronto_grouped_clustering = toronto_grouped.drop('neighborhood', 1)\n\nkmeans = KMeans(n_clusters=kcluster, random_state=0).fit(toronto_grouped_clustering)\n\nkmeans.labels_[0:20]","99a6742c":"neighborhoods_venues_sorted.insert(0, 'Cluster_labels', kmeans.labels_)\n\ntoronto_merged = df2\n\ntoronto_merged = toronto_merged.join(neighborhoods_venues_sorted.set_index('neighborhood'),\n                                     on='neighborhood')\ntoronto_merged.head()","f1b70421":"toronto_merged.dropna(inplace=True)","8353dd8b":"map_clusters = folium.Map(location=[locator.latitude, locator.longitude], zoom_start=11)\n\nx = np.arange(kcluster)\nys = [i + x + (i*x)**2 for i in range(kcluster)]\n\ncolors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\n\nmarkers_colors =  []\n\nfor lat, lng, poi, cluster in zip(toronto_merged.latitude,\n                                  toronto_merged.longitude, \n                                 toronto_merged.neighborhood,\n                                  toronto_merged.Cluster_labels):\n    \n    label = folium.Popup(str(poi) + 'cluster' + str(cluster), parse_html=True)\n    \n    folium.CircleMarker(\n        [lat, lng],\n        radius=5, \n        popup=label,\n        color='#969ba3',\n        fill=True,\n        fill_color=rainbow[int(cluster)-1],\n        fill_opacity=0.9, \n        parse_html=False\n    ).add_to(map_clusters)\nmap_clusters        ","a0924ba3":"toronto_merged.loc[toronto_merged.Cluster_labels==0, \n                   toronto_merged.columns[[1] + list(range(5, toronto_merged.shape[1]))]].head()","6ac5da4f":"toronto_merged.loc[toronto_merged.Cluster_labels==1, \n                   toronto_merged.columns[[1] + list(range(5, toronto_merged.shape[1]))]].head()","d8874aa3":"toronto_merged.loc[toronto_merged.Cluster_labels==2, \n                   toronto_merged.columns[[1] + list(range(5, toronto_merged.shape[1]))]]","e2734a94":"toronto_merged.loc[toronto_merged.Cluster_labels==3, \n                   toronto_merged.columns[[1] + list(range(5, toronto_merged.shape[1]))]]","17a43ecb":"toronto_merged.loc[toronto_merged.Cluster_labels==4, \n                   toronto_merged.columns[[1] + list(range(5, toronto_merged.shape[1]))]]","9577d3ba":"toronto_merged.loc[toronto_merged.Cluster_labels==5, \n                   toronto_merged.columns[[1] + list(range(5, toronto_merged.shape[1]))]]","d0985d3a":"toronto_merged.loc[toronto_merged.Cluster_labels==6, \n                   toronto_merged.columns[[1] + list(range(5, toronto_merged.shape[1]))]]","3f8a1b48":"### **Utilising Four Square API to explore venues and segment the Neighbourhood**","00c203b4":"## so we use already generated csv file which has all the data we required","e945a66f":"### **using geopy we can get the latitude and longitude of the address**","f16cbfb4":"## Cluster Neighborhoods\nRun *k*-means to cluster the neighborhood into 5 clusters.","95a29c2e":"Now let's create the new dataframe and display the top 10 venues for each neighborhood.","e5bc6b1d":"### **Viewing the map of Toronto using Folium map**","48f3152a":"#### Let's print each neighborhood along with the top 5 most common venues","01fa2644":"![image.png](attachment:image.png)","472283ca":"# **Battle of Neighborhoods** (Toronto)","1d396a3f":"### **Considering the 'Not assigned' value for borough as na. so neglecting those columns**","e7524320":"## **lets take only some main Boroughs**","c437f9be":"### Importing The Libraries","543b32e2":"### **Scrapping the data using Beautiful Soup**","7cdeaca1":"### **Analyze Each Neighborhood**","5dca82ff":"### **Finally, let's visualize the resulting clusters**\n","ce71e312":"### Examine Clusters\nNow, you can examine each cluster and determine the discriminating venue categories that distinguish each cluster. Based on the defining categories, you can then assign a name to each cluster. ","b37d0b5a":"### **Let's check how many venues were returned for each neighborhood**","ca751181":"### **Reading The data as a DataFrame using pandas** ","a43048cc":"### **Grouping the data with postal_code and Borough** ","9c7de2f5":"### **get the latitude and longitude of Toronto using geopy**","a441d3ab":"### **requesting the data from the website**","3fbdd273":"Let's create a new dataframe that includes the cluster as well as the top 10 venues for each neighborhood."}}