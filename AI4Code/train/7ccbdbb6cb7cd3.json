{"cell_type":{"3b897a1c":"code","1f006791":"code","22160171":"code","38cb2fed":"code","b6e01cde":"code","1ff2f875":"code","620eba40":"code","e5ea66f8":"code","56e5c5b5":"code","32a9d4a4":"code","1d0bc727":"code","5ef59263":"code","9867f7fe":"markdown","6c16e7d5":"markdown","fd2aa788":"markdown"},"source":{"3b897a1c":"!pip install prettycm","1f006791":"!pip install pretty-confusion-matrix -q","22160171":"import numpy as np\nimport pandas as pd\nfrom pretty_confusion_matrix import pp_matrix\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format='retina'","38cb2fed":"import matplotlib.colors as mcolors\n\ndef hex_to_rgb(value):\n    '''\n    Converts hex to rgb colours\n    value: string of 6 characters representing a hex colour.\n    Returns: list length 3 of RGB values'''\n    value = value.strip(\"#\") # removes hash symbol if present\n    lv = len(value)\n    return tuple(int(value[i:i + lv \/\/ 3], 16) for i in range(0, lv, lv \/\/ 3))\n\n\ndef rgb_to_dec(value):\n    '''\n    Converts rgb to decimal colours (i.e. divides each value by 256)\n    value: list (length 3) of RGB values\n    Returns: list (length 3) of decimal values'''\n    return [v\/256 for v in value]\n\ndef get_continuous_cmap(hex_list, float_list=None):\n    ''' creates and returns a color map that can be used in heat map figures.\n        If float_list is not provided, colour map graduates linearly between each color in hex_list.\n        If float_list is provided, each color in hex_list is mapped to the respective location in float_list. \n        \n        Parameters\n        ----------\n        hex_list: list of hex code strings\n        float_list: list of floats between 0 and 1, same length as hex_list. Must start with 0 and end with 1.\n        \n        Returns\n        ----------\n        colour map'''\n    rgb_list = [rgb_to_dec(hex_to_rgb(i)) for i in hex_list]\n    if float_list:\n        pass\n    else:\n        float_list = list(np.linspace(0,1,len(rgb_list)))\n        \n    cdict = dict()\n    for num, col in enumerate(['red', 'green', 'blue']):\n        col_list = [[float_list[i], rgb_list[i][num], rgb_list[i][num]] for i in range(len(float_list))]\n        cdict[col] = col_list\n    cmp = mcolors.LinearSegmentedColormap('my_cmp', segmentdata=cdict, N=256)\n    return cmp\n\nhex_list = ['#b3e2cd', '#b2df8a', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#ffff99', '#7fc97f']\nhex_list_2 = ['fdf1cb', 'd5e6bf', 'aedbb3', '86d0a7', '5ec59a', '37ba8e' '349486']","b6e01cde":"f0 = np.array([[63,  0,  0,  0,  0,  0],\n        [ 0, 60,  0,  0,  2,  0],\n        [ 0,  1, 61,  1,  0,  0],\n        [ 0,  1,  2, 52,  6,  0],\n        [ 0,  1,  2,  8, 50,  1],\n        [ 0,  0,  0,  0,  1, 39]]) #0.9402\nf1 = np.array([[63,  0,  0,  0,  0,  0],\n        [ 0, 61,  0,  0,  2,  0],\n        [ 0,  0, 60,  1,  0,  1],\n        [ 0,  1,  2, 50,  9,  0],\n        [ 0,  0,  1,  4, 57,  0],\n        [ 0,  0,  0,  0,  0, 39]]) #0.9402\nf2 = np.array([[62,  0,  0,  0,  0,  0],\n        [ 0, 59,  1,  1,  2,  0],\n        [ 0,  0, 61,  0,  1,  0],\n        [ 0,  0,  1, 49, 12,  0],\n        [ 0,  0,  2,  6, 54,  0],\n        [ 0,  0,  2,  0,  0, 37]]) #0.9200\nf3 = np.array([[61,  1,  0,  0,  0,  0],\n        [ 0, 61,  0,  0,  1,  0],\n        [ 0,  0, 61,  0,  1,  0],\n        [ 0,  1,  2, 44, 15,  0],\n        [ 0,  0,  0,  4, 58,  0],\n        [ 0,  0,  0,  1,  0, 39]]) #0.9257\nf4 = np.array([[62,  0,  0,  0,  0,  0],\n        [ 0, 62,  0,  0,  0,  0],\n        [ 0,  0, 57,  1,  4,  0],\n        [ 0,  1,  1, 51,  9,  0],\n        [ 0,  1,  0,  9, 52,  0],\n        [ 0,  0,  0,  0,  1, 39]]) #0.9229\n\noverall = f0 + f1 + f2 + f3 + f4\n\noverall","1ff2f875":"# get pandas dataframe\ndf_cm = pd.DataFrame(overall, index=range(1, 7), columns=range(1, 7))\n# colormap: see this and choose your more dear\ncmap = 'Pastel2' #Set2\npp_matrix(df_cm, cmap = get_continuous_cmap(hex_list), fz=15, lw=3) #get_continuous_cmap(hex_list)","620eba40":"f0 = np.array([[63,  0,  0,  0,  0,  0],\n        [ 0, 62,  0,  0,  0,  0],\n        [ 0,  1, 62,  0,  0,  0],\n        [ 0,  1,  0, 53,  7,  0],\n        [ 0,  0,  0,  5, 56,  1],\n        [ 0,  0,  0,  0,  1, 39]]) #0.9544\nf1 = np.array([[63,  0,  0,  0,  0,  0],\n        [ 0, 60,  0,  0,  3,  0],\n        [ 0,  0, 60,  2,  0,  0],\n        [ 0,  0,  2, 54,  6,  0],\n        [ 0,  0,  1, 10, 51,  0],\n        [ 0,  0,  0,  0,  0, 39]]) #0.9316\nf2 = np.array([[62,  0,  0,  0,  0,  0],\n        [ 0, 58,  0,  2,  3,  0],\n        [ 0,  0, 61,  0,  1,  0],\n        [ 0,  0,  1, 46, 14,  1],\n        [ 0,  0,  1,  6, 55,  0],\n        [ 0,  0,  1,  0,  0, 38]]) #0.9143\nf3 = np.array([[62,  0,  0,  0,  0,  0],\n        [ 0, 58,  0,  1,  3,  0],\n        [ 0,  0, 59,  2,  1,  0],\n        [ 0,  2,  1, 50,  9,  0],\n        [ 0,  0,  2, 10, 50,  0],\n        [ 0,  0,  0,  1,  0, 39]]) #0.9086\nf4 = np.array([[62,  0,  0,  0,  0,  0],\n        [ 0, 62,  0,  0,  0,  0],\n        [ 0,  0, 62,  0,  0,  0],\n        [ 0,  0,  4, 49,  9,  0],\n        [ 0,  0,  2,  2, 58,  0],\n        [ 0,  0,  1,  0,  0, 39]]) #0.9371\n\noverall = f0 + f1 + f2 + f3 + f4\n\noverall","e5ea66f8":"# get pandas dataframe\ndf_cm = pd.DataFrame(overall, index=range(1, 7), columns=range(1, 7))\n# colormap: see this and choose your more dear\ncmap = 'Pastel2' #Set2\npp_matrix(df_cm, cmap = get_continuous_cmap(hex_list), fz=15, lw=3) #get_continuous_cmap(hex_list)","56e5c5b5":"f0 = np.array([[62,  0,  0,  0,  1,  0],\n        [ 0, 61,  0,  1,  0,  0],\n        [ 0,  0, 63,  0,  0,  0],\n        [ 0,  1,  1, 51,  8,  0],\n        [ 1,  0,  0,  6, 55,  0],\n        [ 0,  0,  3,  0,  1, 36]]) #0.9345\nf1 = np.array([[63,  0,  0,  0,  0,  0],\n        [ 0, 58,  0,  2,  3,  0],\n        [ 0,  0, 59,  1,  1,  1],\n        [ 0,  0,  4, 45, 12,  1],\n        [ 0,  0,  1,  4, 57,  0],\n        [ 0,  0,  0,  0,  0, 39]]) #0.9145\nf2 = np.array([[62,  0,  0,  0,  0,  0],\n        [ 0, 60,  1,  0,  2,  0],\n        [ 0,  0, 57,  3,  2,  0],\n        [ 0,  0,  0, 40, 21,  1],\n        [ 0,  2,  0,  9, 51,  0],\n        [ 0,  0,  0,  0,  0, 39]]) #0.8829\nf3 = np.array([[62,  0,  0,  0,  0,  0],\n        [ 0, 60,  0,  1,  1,  0],\n        [ 0,  1, 60,  1,  0,  0],\n        [ 0,  2,  1, 53,  6,  0],\n        [ 0,  1,  2, 11, 48,  0],\n        [ 0,  0,  1,  0,  0, 39]]) #0.9200\nf4 = np.array([[62,  0,  0,  0,  0,  0],\n        [ 0, 61,  0,  0,  1,  0],\n        [ 0,  0, 61,  0,  1,  0],\n        [ 0,  0,  2, 47, 13,  0],\n        [ 0,  0,  1, 12, 49,  0],\n        [ 0,  0,  0,  0,  0, 40]]) #0.9143\n\noverall = f0 + f1 + f2 + f3 + f4\n\noverall","32a9d4a4":"# get pandas dataframe\ndf_cm = pd.DataFrame(overall, index=range(1, 7), columns=range(1, 7))\n# colormap: see this and choose your more dear\ncmap = 'Pastel2' #Set2\npp_matrix(df_cm, cmap = get_continuous_cmap(hex_list), fz=15, lw=3) #get_continuous_cmap(hex_list)","1d0bc727":"epoch_l4 = [1,2,3,4]\nepoch_l5 = [1,2,3,4,5]\nconvit_train_loss = [0.8867, 0.3236, 0.1005, 0.1188]\nconvit_valid_loss = [0.7553, 0.3801, 0.2341, 0.1993]\ncait_train_loss = [0.5479, 0.2118, 0.2907, 0.2658, 0.0039]\ncait_valid_loss = [0.9056, 0.8889, 0.2339, 0.2609, 0.1546]\nvit_train_loss = [1.4917, 0.4579, 0.2500, 0.4379, 0.0206]\nvit_valid_loss = [0.9112, 0.3781, 0.2919, 0.2277, 0.1833]\nswin_train_loss = []\nswin_valid_loss = []","5ef59263":"import plotly.graph_objects as go\n\n# Create traces\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=epoch_l5, y=vit_train_loss,\n                    mode='lines+markers',\n                    name='ViT Train loss',\n                         line={'dash': 'solid', 'color': '#001f3f'}\n                        ))\nfig.add_trace(go.Scatter(x=epoch_l5, y=vit_valid_loss,\n                    mode='lines+markers',\n                    name='ViT Validation loss',\n                        line={'dash': 'dash', 'color': '#001f3f'}))\n\n\nfig.add_trace(go.Scatter(x=epoch_l4, y=convit_train_loss,\n                    mode='lines+markers',\n                    name='ConViT Train loss',\n                         line={'dash': 'solid', 'color': '#FF4136'}\n                        ))\nfig.add_trace(go.Scatter(x=epoch_l4, y=convit_valid_loss,\n                    mode='lines+markers',\n                    name='ConViT Validation loss',\n                        line={'dash': 'dash', 'color': '#FF4136'}))\n\nfig.add_trace(go.Scatter(x=epoch_l5, y=cait_train_loss,\n                    mode='lines+markers',\n                    name='CaiT Train loss',\n                        line={'dash': 'solid', 'color': '#0074D9'}))\nfig.add_trace(go.Scatter(x=epoch_l5, y=cait_valid_loss,\n                    mode='lines+markers',\n                    name='CaiT Validation loss',\n                        line={'dash': 'dash', 'color': '#0074D9'}))\n\n\nfig.update_layout(\n    title='Train & Validation Loss',\n    autosize=False,\n    width=1000,\n    height=700,\n    xaxis=dict(\n        title=\"Epoch\",\n        title_font_size=30,\n        tickfont_size=20,\n        linecolor='#5f6368',\n        gridcolor='#f1f3f4'\n    ),\n    yaxis=dict(\n        title=\"Loss\",\n        title_font_size=30,\n        tickfont_size=20,\n        linecolor='#5f6368',\n        gridcolor='#f1f3f4'\n    ),\n    title_font_size=30,\n    legend_font_size=18,\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)'\n)\n\nfig.show()","9867f7fe":"# Swin","6c16e7d5":"# ConViT","fd2aa788":"# CaiT"}}