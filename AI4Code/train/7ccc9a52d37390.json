{"cell_type":{"2e03b0a7":"code","c3238920":"code","84984df0":"code","fd09736e":"code","b8f2a0bf":"code","037b991b":"code","edbeaaca":"code","2372d771":"code","c83a16e6":"code","3579f4e6":"code","5e993e77":"code","ed607fff":"code","309af5d6":"code","a24dcdc2":"code","ac0bdf03":"code","bcea05a2":"code","6b4fcc5f":"code","75a5438e":"code","ca752691":"code","05b7fce2":"code","c31a841d":"code","162487ad":"code","4b3f89e8":"code","ca18ffa2":"code","ad219145":"code","ba807c38":"code","dea16057":"code","027996ae":"code","db057407":"code","580655a4":"code","b3d5970a":"code","d2b17f14":"code","55bcff64":"code","a21630a9":"code","3459f411":"code","c7ffc86a":"code","bd85f6dc":"markdown","aad2b820":"markdown","5ca614f7":"markdown","aeca188f":"markdown","5ed86f67":"markdown","354f7dc3":"markdown","0492e3a8":"markdown"},"source":{"2e03b0a7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c3238920":"df = pd.read_csv('\/kaggle\/input\/genome-data-of-a-khazar-origin\/snp2graph.csv')\ndf_nodes = pd.read_csv('\/kaggle\/input\/genome-data-of-a-khazar-origin\/khazar_nodes.csv')","84984df0":"df.head()","fd09736e":"ohe = np.load('\/kaggle\/input\/genome-data-of-a-khazar-origin\/khazar_ohe.npz')['arr_0']\nprint('\u0420\u0430\u0437\u043c\u0435\u0440 \u0442\u0435\u043d\u0437\u043e\u0440\u0430:', ohe.shape)","b8f2a0bf":"%%time\ncnt_ohe = ohe.sum(axis=0, dtype = np.int16)\nsample_size = ohe.shape[0]\np = (cnt_ohe \/ ohe.shape[0]).astype(np.float32)\nidx_ohe_flattened_zeros = (cnt_ohe.flatten() == 0).astype(np.bool)\ncnt_ohe_flattened_variating = cnt_ohe.flatten()[~idx_ohe_flattened_zeros]\np_flattened_variating = (cnt_ohe_flattened_variating \/ sample_size).astype(np.float32)","037b991b":"%%time\nstate_dict = {1:'0\/0',2:'0\/1',3:'1\/1',0:'.\/.'}\ndistrib = np.abs(cnt_ohe_flattened_variating - int(ohe.shape[0]\/2)).argsort()\ncorrect = np.arange(cnt_ohe.flatten().shape[0])[~idx_ohe_flattened_zeros] -\\\n        np.arange(cnt_ohe.flatten().shape[0])[:cnt_ohe_flattened_variating.shape[0]]","edbeaaca":"%%time\nnodes_dict = df_nodes.to_dict('index')","2372d771":"added_columns =[\n                'p_source', 'p_target', \n                'locus_id_source', 'variant_source', 'locus_id_target', 'variant_target', \n                'chrom_source', 'pos_source', 'chrom_target', 'pos_target', \n                'FC_source', 'FC_target',\n                'gene_name_source', 'gene_name_target',\n                'gene_description_source', 'gene_description_target',\n                'gene_id_source', 'gene_id_target',\n                'snp_id_source', 'snp_id_target',\n                'alfa_sample_size_source', 'alfa_freq_source',\n                'alfa_sample_size_target', 'alfa_freq_target'\n                ]","c83a16e6":"%%time\ndf[added_columns] = df.apply(lambda r: [\n    nodes_dict[r[0]]['frequency'], nodes_dict[r[1]]['frequency'],\n    nodes_dict[r[0]]['locus'], nodes_dict[r[0]]['variant'], nodes_dict[r[1]]['locus'], nodes_dict[r[1]]['variant'],\n    nodes_dict[r[0]]['chrom'], nodes_dict[r[0]]['position'], nodes_dict[r[1]]['chrom'], nodes_dict[r[1]]['position'],\n    nodes_dict[r[0]]['FC'], nodes_dict[r[1]]['FC'],\n    nodes_dict[r[0]]['gene_name'], nodes_dict[r[1]]['gene_name'],\n    nodes_dict[r[0]]['gene_description'], nodes_dict[r[1]]['gene_description'],\n    nodes_dict[r[0]]['gene_id'], nodes_dict[r[1]]['gene_id'],\n    nodes_dict[r[0]]['snp_id'], nodes_dict[r[1]]['snp_id'],\n    nodes_dict[r[0]]['alfa_sample_size'], nodes_dict[r[0]]['alfa_freq'], nodes_dict[r[1]]['alfa_sample_size'], nodes_dict[r[1]]['alfa_freq']\n                                        ], axis=1, result_type=\"expand\")","3579f4e6":"df.head()","5e993e77":"import math \ndef getAngle(a, b, c): #\u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0443\u0433\u043e\u043b \u043f\u043e \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c\n    ang = math.degrees(math.atan2(c[1]-b[1], c[0]-b[0]) - math.atan2(a[1]-b[1], a[0]-b[0]))\n    return ang + 360 if ang < 0 else ang\n \nprint(getAngle((5, 0), (0, 0), (0, 5)))","ed607fff":"def get_base_locus_coordinate(base_id_list, rmarker = 0.04):\n    pos = {}\n    rmarker = 0.04 #\u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0431\u0430\u0437\u043e\u0432\u044b\u043c\u0438 \u043b\u043e\u043a\u0443\u0441-\u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u043c\u0438\n    for nd in base_id_list:\n        if df_nodes.variant[nd] == '.\/.':\n            pos[nd] = (0.5, 0.5 - rmarker)\n        elif df_nodes.variant[nd] == '0\/0':\n            pos[nd] = (0.5 - rmarker, 0.5)\n        elif df_nodes.variant[nd] == '0\/1':\n            pos[nd] = (0.5, 0.5 + rmarker)\n        elif df_nodes.variant[nd] == '1\/1':  \n            pos[nd] = (0.5 + rmarker, 0.5)\n    return pos","309af5d6":"def get_other_variants(base_id_list, selected):\n    \n    edge_count_dict = {k:0 for k in base_id_list}\n    for nd in zip(selected.source, selected.target):\n        if not (nd[0] in base_id_list) & (nd[1] in base_id_list):\n            edge_count_dict[[n for n in nd if n in base_id_list][0]] =\\\n                                    edge_count_dict[[n for n in nd if n in base_id_list][0]] + 1\n    return edge_count_dict","a24dcdc2":"def get_rest_locus_coordinate(base_id_list, pos, selected, max_zref_abs,\n                              \n                              min_zref_abs,rot_coord = 45, rmin_edge = 0.15, \n                   \n                              rmax_edge = 0.5):\n    pi = 3.1415926535\n    rtc = 180 \/ rot_coord\n    offset = pi\/rtc #\u0441\u0435\u043a\u0442\u043e\u0440\u0430 \u043f\u043e \u0434\u0438\u043e\u0433\u043e\u043d\u0430\u043b\u0438\n    start_rad = 3 * pi #\u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0441 \u043d\u0438\u0436\u043d\u0435\u0433\u043e \u0441\u0435\u043a\u0442\u043e\u0440\u0430\n    lmax = rmax_edge #\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 \u0440\u0435\u0431\u0440\u0430\n    lmin = rmin_edge #\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 \u0440\u0435\u0431\u0440\u0430\n    for base_cnt, base_id in enumerate(base_id_list):\n        x0, y0 = pos[base_id]\n        for cnt, idx in enumerate(selected.loc[((selected.source == base_id) | (selected.target == base_id)) &\\\n                                                (selected.locus_id_source != selected.locus_id_target)].index):\n            radius = lmin + lmax* (max_zref_abs - abs(selected.loc[idx, 'zref'])) \/ (max_zref_abs - min_zref_abs)\n\n            itm = len(selected.loc[((selected.source == base_id) | (selected.target == base_id)) &\\\n                                                (selected.locus_id_source != selected.locus_id_target)].index)\n            #                       (-1,0)      45\u0433\u0440\u0430\u0434    90 \u0433\u0440\u0430\u0434         edges\n            x = x0 + radius * np.cos(start_rad + offset - base_cnt * pi \/ 2 + (cnt + 1)*(pi \/ (2*(itm+1))))\n            y = y0 + radius * np.sin(start_rad + offset - base_cnt * pi \/ 2 + (cnt + 1)*(pi \/ (2*(itm+1))))\n            pos[[n for n in selected.loc[idx,:'target']  if n not in base_id_list][0]] = (x, y)\n    return pos","ac0bdf03":"def get_edges_coordinate_with_annotations(selected, pos, rmarker = 0.04):\n    edge_x = []\n    edge_y = []\n    annotations = []\n    for edge in zip(selected.source, selected.target, selected.locus_id_source, \n                selected.locus_id_target, selected.weight):\n        x0, y0 = pos[edge[0]]\n        x1, y1 = pos[edge[1]]\n        edge_x.append(x0)\n        edge_x.append(x1)\n        edge_x.append(None)\n        edge_y.append(y0)\n        edge_y.append(y1)\n        edge_y.append(None)\n        k_off = 0.015 #\u0441\u0434\u0432\u0438\u0436 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0440\u0435\u0431\u0440\u0430\n        if edge[2] != edge[3]:\n            if np.sqrt(pow(x0-x1, 2) + pow(y0-y1,2)) > rmarker:\n                if (abs(x0) -0.5 + abs(y0)-0.5) > (abs(x1) -0.5 + abs(y1)-0.5):\n                    add_angle = getAngle((x0, y0), (x1, y1), (x0, y1))\n                    annot_coordinate = ((x0 + x1)\/2, (y0 + y1)\/2)\n                    annotations.append(dict(\n                            text='<b>' + str(round(edge[4],4)) + '<\/b>',\n                            showarrow=False,\n                            xref=\"x\", yref=\"y\",\n                            x=k_off + (x0 + x1)\/2, y=k_off + (y0 + y1)\/2,\n                            textangle = add_angle\n                            ))\n                else:\n                    add_angle = getAngle((x1, y1), (x0, y0), (x1, y0))\n                    annot_coordinate = ((y0 + y1)\/2, (x0 + x1)\/2)\n                    annotations.append(dict(\n                            text='<b>' + str(round(edge[4], 4)) + '<\/b>',\n                            showarrow=False,\n                            xref='x', yref=\"y\",\n                            x=k_off + (x0 + x1)\/2, y=k_off + (y0 + y1)\/2,\n                            textangle = add_angle\n                            ))\n    return edge_x, edge_y, annotations","bcea05a2":"def get_nodes_coordinate_with_size(pos, df_nodes, size_node_min, size_node_max,\n                                   node_rad_min = 10,node_rad_max = 40):\n    symbols = [1, 2, 3, 4, 5, 13, 17, 18, 19, 21, 22, 0, 23, 25, 27, \n               29, 31, 200, 201, 202,203, 204, 205, 213, 217, 218, 219, 221]\n    node_x = []\n    node_y = []\n    #size diapason\n    node_rad_min = node_rad_min\n    node_rad_max = node_rad_max\n    node_size =[]\n    node_markers = []\n    for node, coord in pos.items():\n        x, y = coord\n        node_x.append(x)\n        node_y.append(y)\n        kinf = 0\n        if list(df_nodes.frequency.loc[df_nodes.id == node])[0] == 0:\n            kinf = 1 \/ 1774\n        node_size.append(node_rad_min + int(node_rad_max *\\\n                         (np.log(df_nodes.frequency.loc[df_nodes.id == node] + kinf) -\\\n                          np.log(0.5\/1774) - size_node_min)\/\\\n                         (size_node_max - size_node_min)))\n        node_markers.append(symbols[list(df_nodes.chrom.loc[df_nodes.id == node])[0] -1])\n    return node_x, node_y, node_size, node_markers","6b4fcc5f":"def get_hovertext(pos, df_nodes):\n    node_text = []\n    for node in pos:\n        node_text.append(\n        f'<b>    Frequency: <\/b>{round(list(df_nodes.loc[df_nodes.id == node, \"frequency\"])[0], 4)}<br>\\\n        <b>Chromosome: <\/b>{list(df_nodes.loc[df_nodes.id == node, \"chrom\"])[0]}<br>\\\n        <b>Locus: <\/b>{list(df_nodes.loc[df_nodes.id == node, \"locus\"])[0]}<br>\\\n        <b>Variant: <\/b>{list(df_nodes.loc[df_nodes.id == node, \"variant\"])[0]}<br>\\\n        <b>Node id: <\/b>{str(list(df_nodes.loc[df_nodes.id == node, \"id\"])[0])}<br>\\\n        <b>Gene name: <\/b>{list(df_nodes.loc[df_nodes.id == node, \"gene_name\"])[0]}<br>\\\n        <b>Gene description: <\/b>{str(list(df_nodes.loc[df_nodes.id == node, \"gene_description\"])[0]).split(\";\")[0]}<br>\\\n        <b>Intron-Exon: <\/b>{list(df_nodes.loc[df_nodes.id == node, \"FC\"])[0]}'\n                        )\n    return node_text","75a5438e":"def get_graph(base_locus, df, df_nodes, rmarker = 0.04, \n              rmin_edge = 0.15, rmax_edge = 0.5,\n              node_rad_min = 10,node_rad_max = 40,\n              width =800, height =800):\n    \n    selected = df.loc[(df.locus_id_source == base_locus)|(df.locus_id_target == base_locus)]\n    base_id_list = list(df_nodes.id.loc[df_nodes.locus == base_locus])\n    max_zref_abs = selected.zref.loc[~(selected.source.isin(base_id_list) & selected.target.isin(base_id_list))].abs().max()\n    min_zref_abs = selected.zref.loc[~(selected.source.isin(base_id_list) & selected.target.isin(base_id_list))].abs().min()\n    pos = get_base_locus_coordinate(base_id_list, rmarker = rmarker)\n    edge_count_dict = get_other_variants(base_id_list, selected)\n    pos = get_rest_locus_coordinate(base_id_list, pos, selected, max_zref_abs,\n                              min_zref_abs,rot_coord = 45, rmin_edge = rmin_edge, \n                              rmax_edge = rmax_edge)\n    \n    #log(P(A)) - log(0.5\/1774)\n    size_node_max = (np.log(df_nodes.frequency.loc[df_nodes.id.isin(pos)]) - np.log(0.5\/1774)).max()\n    size_node_min = (np.log(df_nodes.frequency.loc[df_nodes.id.isin(pos)]) - np.log(0.5\/1774)).min()\n    if np.isinf(size_node_min):\n        size_node_min = np.log(1\/1750) - np.log(0.5\/1750)\n    edge_x, edge_y, annotations = get_edges_coordinate_with_annotations(selected, pos, rmarker = rmarker)\n    edge_trace = go.Scatter(\n                            x=edge_x, y=edge_y,text = [],\n                            line=dict(width=4, color='#888'),\n                            hoverinfo='none',\n                            mode='lines')\n    node_x, node_y, node_size, node_markers = get_nodes_coordinate_with_size(pos, df_nodes, size_node_min, size_node_max,\n                                   node_rad_min = node_rad_min, node_rad_max = node_rad_max)\n    node_trace = go.Scatter(\n                            x=node_x, y=node_y,\n                            mode='markers',\n                            hoverinfo='text',\n                            marker=dict(\n                                #color=[],\n                                symbol=node_markers,\n                                size = node_size,\n                                color = 'green',\n                                opacity =1,\n                                line_width=2))\n    \n    node_trace.text = get_hovertext(pos, df_nodes)\n    \n    crest_x = [0, 1, 1, 0]\n    crest_y = [0, 1, 0, 1]\n    crest_trace = go.Scatter(\n                            x=crest_x, y=crest_y,\n                            line=dict(width=0.1, color='#888'),\n                            hoverinfo='none',\n                            mode='lines')\n    \n    '''  \n    symbols = [1, 2, 3, 4, 5, 13, 17, 18, 19, 21, 22, 0, 23, 25, 27, \n               29, 31, 200, 201, 202,203, 204, 205, 213, 217, 218, 219, 221]    \n    chrom_trace = go.Scatter(\n                            mode=\"markers\", \n                            x=[x\/40 - 0.005 for x in range(len(symbols_chrom))], \n                            y=[-0.45 for x in range(len(symbols_chrom))], \n                            marker_symbol=symbols_chrom,\n                            marker_line_color=\"midnightblue\", marker_color=\"green\",\n                            #marker_line_width=2, \n                            marker_size=10,\n                          )\n    '''    \n    id_name = base_id_list[0]\n    title_text = '<br><i>Graph for locus: <\/i>' + '<b>' +\\\n                df_nodes.loc[df_nodes.id == base_id_list[0], 'locus'].to_list()[0] + '<\/b>' +\\\n                '<br><i>Chromosome: <\/i>' + '<b>' +\\\n                str(df_nodes.loc[df_nodes.id == base_id_list[0], 'chrom'].to_list()[0]) + '<\/b>' +\\\n                '<br><i>' + str(df_nodes.loc[df_nodes.id == base_id_list[0], 'gene_description'].to_list()[0]).split(';')[0] +\\\n                '<br>' + str(df_nodes.loc[df_nodes.id == base_id_list[0], 'FC'].to_list()[0]) + '<\/i>'\n                            \n    annotations.append(dict(\n                        text=\"Python code: <a href='https:\/\/www.kaggle.com\/ilfiore\/genome-data-of-a-khazar-origin'> https:\/\/www.kaggle.com\/ilfiore\/genome-data-of-a-khazar-origin<\/a>\",\n                        showarrow=False,\n                        xref=\"paper\", yref=\"paper\",\n                        x=0.005, y=-0.002\n                        ))\n\n    fig = go.Figure(data=[edge_trace, node_trace, crest_trace, \n                          #chrom_trace\n                         ],\n                 layout=go.Layout(\n                    width = width,\n                    height = height,\n                    title=dict(\n                                text = title_text,\n                                y = 1,\n                                x = 0.01,\n                                xanchor = 'left',\n                                yanchor = 'top'\n                                    ),\n                                images = [dict(\n                                source = 'https:\/\/pp.userapi.com\/c841429\/v841429117\/1eadc\/PrID-GQelo4.jpg',\n                                xref = \"paper\", yref = \"paper\",\n                                x = 1, y = 1.01,\n                                sizex = 0.2, sizey = 0.1,\n                                xanchor = \"right\", yanchor = \"bottom\"\n                              )],\n                    titlefont_size=14,\n                    showlegend=False,\n                    hovermode='closest',\n                    margin=dict(b=20,l=5,r=5,t=80),\n                    annotations=annotations,\n                    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n                    yaxis=dict(showgrid=False, zeroline=False, showticklabels=False))\n                    )\n    return fig","ca752691":"import plotly.graph_objs as go","05b7fce2":"df_nodes[df_nodes.gene_name == 'MC1R']","c31a841d":"base_locus = 'rs885479'\nbase_id_list = list(df_nodes.id.loc[df_nodes.locus == base_locus])\nfor id in base_id_list:\n    print(id)\n    if id % 4 != 0:\n        #mask_array = np.ones(cnt_ohe_flattened_variating.shape[0], dtype = bool)\n        #corrected_id = id - decorrect[id]\n        #position = distrib[mask_array[distrib]][corrected_id]\n        #position += correct[position]\n        ind1 = id \/\/ 4 #\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043d\u043e\u043c\u0435\u0440 \u043e\u043f\u043e\u0440\u043d\u043e\u0433\u043e \u043b\u043e\u043a\u0443\u0441\u0430\n        state1 = id % 4 #\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043d\u043e\u043c\u0435\u0440 \u043e\u043f\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0434\u043b\u044f \u043b\u043e\u043a\u0443\u0441\u0430\n        ohe_l_A = ohe[ohe[:, ind1,state1]==True,:,:]\n        sample_size_l_A = ohe_l_A.shape[0]\n\n        cnt_ohe_l_A = ohe_l_A.sum(axis=0, dtype=np.int16)\n        p_l_A = (cnt_ohe_l_A) \/ (ohe_l_A.shape[1])\n        cnt_ohe_l_A_flattened_variating = cnt_ohe_l_A.flatten()[~(idx_ohe_flattened_zeros)]\n        tmp_p = (cnt_ohe_flattened_variating + cnt_ohe_l_A_flattened_variating) \/ (sample_size + sample_size_l_A)\n        z =  (cnt_ohe_flattened_variating\/sample_size -\\\n             cnt_ohe_l_A_flattened_variating\/sample_size_l_A) \/ np.sqrt(tmp_p*(1-tmp_p)*(1.0\/sample_size + 1.0\/sample_size_l_A))\n        z_sorted = z.argsort() + correct[z.argsort()]\n\n        z_sorted = z_sorted[z_sorted%4 != 0]\n        print(np.round(z[z.argsort()], 4))\n        print(z_sorted[0],z_sorted[-1])","162487ad":"base_locus = 'rs885479'\nlist(df_nodes.id.loc[df_nodes.locus == base_locus])","4b3f89e8":"base_locus = 'rs885479'\nfig = get_graph(base_locus, df, df_nodes, \n                rmin_edge = 0.15, rmax_edge = 0.5,\n                node_rad_min = 10,node_rad_max = 40,                \n                width =800, height =800\n               )\nfig.show()","ca18ffa2":"df_nodes[df_nodes.locus == 'rs10746589']","ad219145":"base_locus = 'rs10746589'\nfig = get_graph(base_locus, df, df_nodes, \n                rmin_edge = 0.15, rmax_edge = 0.5,\n                node_rad_min = 10,node_rad_max = 40,                \n                width =800, height =800\n               )\nfig.show()","ba807c38":"df[(df.source == 451173)|(df.target == 451173)]","dea16057":"df_nodes[df_nodes.gene_name == 'TMEM106B'].locus.unique()","027996ae":"base_locus = 'rs1435528'\nfig = get_graph(base_locus, df, df_nodes, \n                rmin_edge = 0.15, rmax_edge = 0.5,\n                node_rad_min = 10,node_rad_max = 40,                \n                width =800, height =800\n               )\nfig.show()","db057407":"base_locus = 'rs6460903'\nfig = get_graph(base_locus, df, df_nodes, \n                rmin_edge = 0.15, rmax_edge = 0.5,\n                node_rad_min = 10,node_rad_max = 40,                \n                width =800, height =800\n               )\nfig.show()","580655a4":"base_locus = 'rs6966915'\nfig = get_graph(base_locus, df, df_nodes, \n                rmin_edge = 0.15, rmax_edge = 0.5,\n                node_rad_min = 10,node_rad_max = 20,                \n                width =800, height =800\n               )\nfig.show()","b3d5970a":"base_locus = 'rs1042946'\nfig = get_graph(base_locus, df, df_nodes, \n                rmin_edge = 0.15, rmax_edge = 0.5,\n                node_rad_min = 10,node_rad_max = 40,                \n                width =800, height =800\n               )\nfig.show()","d2b17f14":"base_locus = 'rs10488193'\nfig = get_graph(base_locus, df, df_nodes, \n                rmin_edge = 0.15, rmax_edge = 0.5,\n                node_rad_min = 10,node_rad_max = 40,                \n                width =800, height =800\n               )\nfig.show()","55bcff64":"base_locus = 'rs10488192'\nfig = get_graph(base_locus, df, df_nodes, \n                rmin_edge = 0.15, rmax_edge = 0.5,\n                node_rad_min = 10,node_rad_max = 40,                \n                width =800, height =800\n               )\nfig.show()","a21630a9":"def get_credential(frmwork = 'chart_studio'):\n    with open('..\/input\/credtxt\/cred.txt', 'r') as container:\n        for line in container:\n            if frmwork in line:\n                login, psw = line.split(' ')[1], line.split(' ')[2].split('\\n')[0]\n                return login, psw","3459f411":"!pip install chart_studio\nimport chart_studio\nimport chart_studio.plotly as studio\nusername, api_key = get_credential()\nchart_studio.tools.set_credentials_file(username=username, api_key=api_key)","c7ffc86a":"import plotly.graph_objects as go\nfrom plotly.validators.scatter.marker import SymbolValidator\nsymbols_chrom = [0, 1, 2, 3, 4, 5, 13, 17, 18, 19, 21, 22, 23, 25, 27, \n           29, 31, 200, 201, 202,203, 204, 205, 213, 217, 218, 219, 221]\nraw_symbols = SymbolValidator().values\nnamestems = []\nnamevariants = []\nsymbols = []\nfor i in range(0,len(symbols_chrom)):\n    name = i\n    symbols.append(symbols_chrom[i])\n    #namestems.append(name.replace(\"-open\", \"\").replace(\"-dot\", \"\"))\n    #namevariants.append(name[len(namestems[-1]):])\n\nfig = go.Figure(go.Scatter(mode=\"markers\", x=[x for x in range(len(symbols_chrom))], \n                           y=[0 for x in range(len(symbols_chrom))], marker_symbol=symbols_chrom,\n                           marker_line_color=\"midnightblue\", marker_color=\"green\",\n                           #marker_line_width=2, \n                           marker_size=10,\n                           #hovertemplate=\"name: %{y}%{x}<br>number: %{marker.symbol}<extra><\/extra>\"\n                          ))\nfig.update_layout(title=\"Mouse over symbols for name & number!\",\n                  xaxis_range=[-1,29], yaxis_range=[-1, 1],\n                  margin=dict(b=0,r=0), xaxis_side=\"top\", height=400, width=800)\nfig.show()","bd85f6dc":"<div>\n    <a href=\"https:\/\/plotly.com\/~cappelchi\/130\/?share_key=3N31fPNL7yH9fJNiFRjOLD\" target=\"_blank\" title=\"rs885479\" style=\"display: block; text-align: center;\"><img src=\"https:\/\/plotly.com\/~cappelchi\/130.png?share_key=3N31fPNL7yH9fJNiFRjOLD\" alt=\"rs885479\" style=\"max-width: 100%;width: 800px;\"  width=\"800\" onerror=\"this.onerror=null;this.src='https:\/\/plotly.com\/404.png';\" \/><\/a>\n    <script data-plotly=\"cappelchi:130\" sharekey-plotly=\"3N31fPNL7yH9fJNiFRjOLD\" src=\"https:\/\/plotly.com\/embed.js\" async><\/script>\n<\/div>\n","aad2b820":"<div>\n    <a href=\"https:\/\/plotly.com\/~cappelchi\/143\/?share_key=hf7WBAYQQj57pfhGhkHp8m\" target=\"_blank\" title=\"rs10488193\" style=\"display: block; text-align: center;\"><img src=\"https:\/\/plotly.com\/~cappelchi\/143.png?share_key=hf7WBAYQQj57pfhGhkHp8m\" alt=\"rs10488193\" style=\"max-width: 100%;width: 800px;\"  width=\"800\" onerror=\"this.onerror=null;this.src='https:\/\/plotly.com\/404.png';\" \/><\/a>\n    <script data-plotly=\"cappelchi:143\" sharekey-plotly=\"hf7WBAYQQj57pfhGhkHp8m\" src=\"https:\/\/plotly.com\/embed.js\" async><\/script>\n<\/div>\n","5ca614f7":"<img src=\"https:\/\/i.gifer.com\/Sve2.gif\" width=\"560\" height=\"140\">","aeca188f":"<img src=\"https:\/\/thumbs.gfycat.com\/ClassicDefinitiveAndalusianhorse-small.gif\" width=\"560\" height=\"140\">","5ed86f67":"<font color=\"red\"><ins>MC1R <\/ins><\/font>\n\n<img src=\"https:\/\/monosnap.com\/image\/F2UHUGeSIFrgXfCt7ObfnC57nHoMne\" width=\"560\" height=\"140\">\n\n\"Mathematical models in population genetics \" by Prof. Rasmus Nielsen (UC Berkeley, USA; University of Copenhagen, Denmark)","354f7dc3":"[\u041d\u043e\u0432\u044b\u0435 \u0444\u0430\u043a\u0442\u043e\u0440\u044b, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0435 SARS-CoV-2 \u043f\u0440\u043e\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u0432 \u043a\u043b\u0435\u0442\u043a\u0443](https:\/\/pcr.news\/novosti\/novye-faktory-pozvolyayushchie-sars-cov-2-proniknut-v-kletku\/)\n\n<img src=\"https:\/\/pcr.news\/upload\/iblock\/69d\/69d7b2f2e7390d1fc089be68507ddc5a.jpg\" width=\"560\" height=\"140\">\n\n\u0410\u0432\u0442\u043e\u0440\u044b \u043d\u0430\u0434\u0435\u044e\u0442\u0441\u044f, \u0447\u0442\u043e \u0438\u043d\u0433\u0438\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0435\u043b\u043a\u0430 TMEM106B \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u0440\u043e\u043d\u0430\u0432\u0438\u0440\u0443\u0441\u043d\u043e\u0439 \u0438\u043d\u0444\u0435\u043a\u0446\u0438\u0438.","0492e3a8":"<div>\n    <a href=\"https:\/\/plotly.com\/~cappelchi\/141\/?share_key=67USyLtFsHbg75h8b76m6P\" target=\"_blank\" title=\"rs1042946\" style=\"display: block; text-align: center;\"><img src=\"https:\/\/plotly.com\/~cappelchi\/141.png?share_key=67USyLtFsHbg75h8b76m6P\" alt=\"rs1042946\" style=\"max-width: 100%;width: 800px;\"  width=\"800\" onerror=\"this.onerror=null;this.src='https:\/\/plotly.com\/404.png';\" \/><\/a>\n    <script data-plotly=\"cappelchi:141\" sharekey-plotly=\"67USyLtFsHbg75h8b76m6P\" src=\"https:\/\/plotly.com\/embed.js\" async><\/script>\n<\/div>\n"}}