{"cell_type":{"4d1f8bd7":"code","ae6e7315":"code","04d36c26":"code","4621d587":"code","b119094d":"code","23972ac2":"code","a5b7483c":"code","f2cea7f5":"code","1b19733b":"code","eb534d98":"code","bd2ea57e":"code","41edc4f1":"markdown","458937bf":"markdown","b26cd8c4":"markdown"},"source":{"4d1f8bd7":"# imports\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [15, 7]\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport seaborn as sns","ae6e7315":"# read kaggle dataset: https:\/\/www.kaggle.com\/zohaib30\/streeteasy-dataset?select=manhattan.csv\nstreeteasy = pd.read_csv(\"..\/input\/streeteasy-dataset\/manhattan.csv\")\n\ndf = pd.DataFrame(streeteasy)","04d36c26":"# select columns for regression model\n# 1 label\ny = df[['rent']]\n\n# 14 features\nx = df[[\n  'bedrooms',\n  'bathrooms',\n  'size_sqft',\n  'min_to_subway',\n  'floor',\n  'building_age_yrs',\n  'no_fee',\n  'has_roofdeck',\n  'has_washer_dryer',\n  'has_doorman',\n  'has_elevator',\n  'has_dishwasher',\n  'has_patio',\n  'has_gym'\n]]\n\n# Use scikit-learn\u2019s train_test_split() method to split x into 80% training set and 20% testing set\nx_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.8, test_size=0.2, random_state=6)\n\nprint(x_train.shape)\nprint(x_test.shape)\n \nprint(y_train.shape)\nprint(y_test.shape)","4621d587":"# create linear regression model\nmlr = LinearRegression()\n\n# fit model\nmlr.fit(x_train, y_train)\n\n# predict y-values\ny_predict = mlr.predict(x_test)","b119094d":"# print our apartment features\nprint(x.columns)","23972ac2":"# Set values for our 14 features, stored in 'x'\n\n# for example, my apartment has 3 bedrooms, 1.5 bathrooms, 820 sqft, 3 min to subway... and so on\nshaneys_apartment = [[3, 1.5, 820, 3, 2, 10, 1, 1, 0, 0, 0, 1, 1, 0]]\n \npredict = mlr.predict(shaneys_apartment)\n \nprint(\"Predicted rent: $%.2f\" % predict)","a5b7483c":"# coefficients from mlr, determines which independent variable carries more weight\nprint(mlr.coef_)","f2cea7f5":"# correlation matrix for bedrooms v. rent\nplt.scatter(df[['bedrooms']], df[['rent']], alpha=0.4)\nplt.xlabel(\"Bedrooms\")\nplt.ylabel(\"Rent\")\nplt.title(\"Bedrooms vs Rent\")\nplt.show()","1b19733b":"# Define a nice color map for our heatmap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\nsns.heatmap(\n        data=df.corr(),  # our correlation matrix\n        linewidths=0.2,  # the width of lines separating the matrix squares\n        square=True,   # enforce 1:1 ratios among correlation cells\n        cmap=cmap,  # use the color map we defined above\n        vmax=1,  # define the max of our correlation scale\n        vmin=-1, # define the min of our correlation scale\n        center=0,  # The value at which the color map is centered about (white)\n        cbar_kws={\"shrink\": .75}  # shrink the scale a bit\n    )\n\n# adjust y-axis ticks for legibility\nplt.yticks(rotation=0)  \n\n# show the heatmap\nplt.show()","eb534d98":"# checking our train model's score\nprint(\"Train score:\")\nprint(mlr.score(x_train, y_train))\n\n# checking our test model's score\nprint(\"Test score:\")\nprint(mlr.score(x_test, y_test))","bd2ea57e":"# run a residual analysis to assess the accuracy of our multiple linear regression model\nresiduals = y_predict - y_test\n \nplt.scatter(y_predict, residuals, alpha=0.4)\nplt.title('Residual Analysis')\n \nplt.show()","41edc4f1":"## Let's test the model on the apartment!","458937bf":"We predicted the rent to be $4212.44. Pretty close - not a bad prediction!","b26cd8c4":"# Using Multiple Linear Regression to Predict NYC Rent Prices\n\nThis project is to find out if I am overpaying my East Village apartment..."}}