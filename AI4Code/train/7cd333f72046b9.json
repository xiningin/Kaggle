{"cell_type":{"8ecdd65e":"code","e67ab66b":"code","da6a4c9e":"code","6a7b5270":"code","1b480cf9":"code","304f4afc":"code","e69f45aa":"code","d349d3ff":"code","2eb6c0bb":"code","0fe71d34":"code","16e1436c":"code","ccbd54ae":"code","d55a0db6":"code","d875643c":"code","58752231":"code","7e9e0fb4":"code","f9bfaf4e":"code","69a784fc":"code","f46a27d0":"code","32b844c8":"code","a9ff761b":"code","7383e465":"code","1a38f45d":"code","69f1088c":"code","b65ab1d9":"code","f9d01618":"code","dcbf7137":"code","d52b91d0":"code","09d30f10":"code","f57ef8ce":"code","b53dec28":"code","c2b67713":"markdown"},"source":{"8ecdd65e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e67ab66b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\npd.pandas.set_option('display.max_columns', None)\n","da6a4c9e":"df = pd.read_csv('..\/input\/us-police-shootings\/shootings.csv')\ndf.head()","6a7b5270":"df.shape","1b480cf9":"df.isnull().sum()","304f4afc":"df.info()","e69f45aa":"#Convert col to datetime format\n\ndf['date'] = pd.to_datetime(df['date'])\ndf.info()","d349d3ff":"#To drop undesired cols\n\ndf.drop(['id', 'name'], axis = 1, inplace = True)\ndf.head()","2eb6c0bb":"#To plot pie chart\n\ncounts = df['race'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\ncounts.plot(kind='pie', title='Race',figsize=(10,8))\n\nplt.legend()\nplt.show()\n","0fe71d34":"#To plot pie chart\n\ncounts = df['manner_of_death'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\ncounts.plot(kind='pie', title='manner_of_death',figsize=(10,8))\n\nplt.legend()\nplt.show()\n","16e1436c":"#Top 10 arms based on value_counts\n\nplt.figure(figsize = (10,7))\nchains = df['armed'].value_counts()[:10] #top 10\nsns.barplot(x = chains, y = chains.index)\nplt.title(\"Armed\")\nplt.xlabel(\"Count\")\n","ccbd54ae":"#To plot pie chart\n\ncounts = df['gender'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\ncounts.plot(kind='pie', title='gender',figsize=(10,8))\n\nplt.legend()\nplt.show()\n","d55a0db6":"#Top 20 cities based on value_counts\n\nplt.figure(figsize = (10,7))\nchains = df['city'].value_counts()[:20] #top 20\nsns.barplot(x = chains, y = chains.index)\nplt.title(\"City\")\nplt.xlabel(\"Count\")\n","d875643c":"#Top 20 cities based on value_counts\n\nplt.figure(figsize = (10,7))\nchains = df['state'].value_counts()[:20] #top 20\nsns.barplot(x = chains, y = chains.index)\nplt.title(\"State\")\nplt.xlabel(\"Count\")\n","58752231":"#To plot pie chart\n\ncounts = df['signs_of_mental_illness'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\ncounts.plot(kind='pie', title='signs_of_mental_illness',figsize=(10,8))\n\nplt.legend()\nplt.show()\n","7e9e0fb4":"#To plot pie chart\n\ncounts = df['threat_level'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\ncounts.plot(kind='pie', title='threat_level',figsize=(10,8))\n\nplt.legend()\nplt.show()\n","f9bfaf4e":"#To plot pie chart\n\ncounts = df['flee'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\ncounts.plot(kind='pie', title='flee',figsize=(10,8))\n\nplt.legend()\nplt.show()\n","69a784fc":"#To plot pie chart\n\ncounts = df['body_camera'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\ncounts.plot(kind='pie', title='body_camera',figsize=(10,8))\n\nplt.legend()\nplt.show()\n","f46a27d0":"#Top arms_category based on value_counts\n\nplt.figure(figsize = (10,7))\nchains = df['arms_category'].value_counts()\nsns.barplot(x = chains, y = chains.index)\nplt.title(\"arms_category\")\nplt.xlabel(\"Count\")\n","32b844c8":"dfw = df[df['race']=='White']\ndfw.head()","a9ff761b":"dfb = df[df['race']=='Black']\ndfb.head()","7383e465":"#Top arms_category based on value_counts\n\nplt.figure(figsize = (10,7))\nchains = dfw['armed'].value_counts()[:10]\nsns.barplot(x = chains, y = chains.index)\nplt.title(\"armed(White)\")\nplt.xlabel(\"Count\")\n","1a38f45d":"#Top arms_category based on value_counts\n\nplt.figure(figsize = (10,7))\nchains = dfb['armed'].value_counts()[:10]\nsns.barplot(x = chains, y = chains.index)\nplt.title(\"armed(Black)\")\nplt.xlabel(\"Count\")\n","69f1088c":"#To plot pie chart\n\ncounts = dfw['threat_level'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\ncounts.plot(kind='pie', title='threat_level(White)',figsize=(10,8))\n\nplt.legend()\nplt.show()\n","b65ab1d9":"#To plot pie chart\n\ncounts = dfb['threat_level'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\ncounts.plot(kind='pie', title='threat_level(Black)',figsize=(10,8))\n\nplt.legend()\nplt.show()\n","f9d01618":"#Top city based on value_counts\n\nplt.figure(figsize = (10,7))\nchains = dfw['city'].value_counts()[:10]\nsns.barplot(x = chains, y = chains.index)\nplt.title(\"city(White)\")\nplt.xlabel(\"Count\")\n","dcbf7137":"#Top city based on value_counts\n\nplt.figure(figsize = (10,7))\nchains = dfb['city'].value_counts()[:10]\nsns.barplot(x = chains, y = chains.index)\nplt.title(\"city(Black)\")\nplt.xlabel(\"Count\")\n","d52b91d0":"#Top state based on value_counts\n\nplt.figure(figsize = (10,7))\nchains = dfw['state'].value_counts()[:10]\nsns.barplot(x = chains, y = chains.index)\nplt.title(\"state(White)\")\nplt.xlabel(\"Count\")\n","09d30f10":"#Top state based on value_counts\n\nplt.figure(figsize = (10,7))\nchains = dfb['state'].value_counts()[:10]\nsns.barplot(x = chains, y = chains.index)\nplt.title(\"state(Black)\")\nplt.xlabel(\"Count\")\n","f57ef8ce":"#To plot pie chart\n\ncounts = dfw['flee'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\ncounts.plot(kind='pie', title='flee(White)',figsize=(10,8))\n\nplt.legend()\nplt.show()\n","b53dec28":"#To plot pie chart\n\ncounts = dfb['flee'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\ncounts.plot(kind='pie', title='flee(Black)',figsize=(10,8))\n\nplt.legend()\nplt.show()\n","c2b67713":"# **Black vs White**"}}