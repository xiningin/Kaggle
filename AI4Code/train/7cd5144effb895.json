{"cell_type":{"b5387332":"code","265028dd":"code","3faf14da":"code","482d09cc":"code","92b01a93":"code","1289ed55":"code","e4be74ac":"code","67e88df9":"code","5d6ce43f":"code","563bfa1d":"code","4c6bc0ac":"code","c7499e50":"code","eb330324":"code","c6d342e5":"code","361e13a5":"code","71d63ab1":"code","e3593135":"code","589110c0":"code","dbbf07fe":"code","dfbe5e6c":"markdown","0dede2a9":"markdown","12cfeb86":"markdown","ad5b7cca":"markdown","e6ac449c":"markdown","3d0d5e1a":"markdown","9b9c5b0d":"markdown","0651eb3c":"markdown","591498a8":"markdown","38f0820b":"markdown","0fa0166d":"markdown","e7cd0e01":"markdown","72cf2f9a":"markdown","5888797d":"markdown","dd51c3a6":"markdown","d1eaca53":"markdown","f26d45e8":"markdown","28d818c8":"markdown"},"source":{"b5387332":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping\n","265028dd":"import h5py\nimport numpy as np\n\nh5f = h5py.File('\/kaggle\/input\/street-view-house-nos-h5-file\/SVHN_single_grey1.h5', 'r')\nh5w = h5py.File('\/kaggle\/input\/cnn-mnist-weights-pretrained\/cnn_mnist_weights.h5', 'r')\nh5f","3faf14da":"X_train = h5f['X_train'][:]\ny_train = h5f['y_train'][:]\nX_test = h5f['X_test'][:]\ny_test = h5f['y_test'][:]\n\nh5f.close() #close this file","482d09cc":"print('X_train:', X_train.shape)\nprint('y_train:', y_train.shape)\nprint('X_test:', X_train.shape)\nprint('y_test:', y_train.shape)","92b01a93":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nfig = plt.figure(figsize = (10,10))\n\nrows = 10\ncolumns = 10\nw = 10\nh = 10\n\nfor i in range(1, rows * columns + 1):\n    img = X_test[i]\n    fig.add_subplot(rows, columns,i)\n    plt.imshow(img, cmap = 'gray')\nplt.show()","1289ed55":"print(X_train.shape) #before reshape","e4be74ac":"import cv2\n#Create zero array for X_train, X_test\nX_train_res = np.zeros((X_train.shape[0], 28,28), dtype = np.float32) #create a zero array of size 28*28 same as MNIST\nX_test_res = np.zeros((X_test.shape[0], 28, 28), dtype = np.float32)\n\nfor i in range(X_train.shape[0]):\n    X_train_res[i,:,:] = cv2.resize(X_train[i], dsize = (28,28), interpolation = cv2.INTER_CUBIC)\n    \nfor i in range(X_test.shape[0]):\n    X_test_res[i,:,:] = cv2.resize(X_test[i], dsize = (28,28), interpolation = cv2.INTER_CUBIC)\n    \nprint(X_train_res.shape)\nprint(X_test_res.shape)","67e88df9":"img_rows, img_cols = 28, 28\n\nX_train_CNN = X_train_res.reshape(X_train_res.shape[0], img_rows, img_cols, 1)\nX_train_CNN.shape\nX_test_CNN = X_test_res.reshape(X_test_res.shape[0], img_rows, img_cols, 1)\nprint(X_train_CNN.shape)\n\n#Shape of 1 image would be as given below, this would be useful while creating models\ninput_shape  = (img_rows, img_cols, 1)\nprint(input_shape)","5d6ce43f":"X_train_CNN = X_train_CNN.astype('float32')\nX_test_CNN =  X_test_CNN.astype('float32')\n\n#Normalizing the input\nX_train_CNN = X_train_CNN \/ 255.0\nX_test_CNN = X_test_CNN \/ 255.0\n\nprint(X_train_CNN.shape)","563bfa1d":"y_train","4c6bc0ac":"#convert class vectors to binary class metrics\nnum_classes = 10 # since we will only classify nos between 0-9\ny_train = keras.utils.to_categorical(y_train, num_classes)\ny_test = keras.utils.to_categorical(y_test, num_classes)\ny_train[0]","c7499e50":"#Set model hyperparameters\nnum_classes = 10\n\n#Define the layers of the model\nmodel_CNN = Sequential()\n\n#1. Conv Layer\nmodel_CNN.add(Conv2D(32, kernel_size = (3,3), activation = 'relu', input_shape = input_shape, name = 'Conv1'))\n\n#2. Conv Layer\nmodel_CNN.add(Conv2D(64, kernel_size = (3,3), activation = 'relu', input_shape = input_shape, name = 'Conv2'))\n\n#3. MaxPooling Layer\nmodel_CNN.add(MaxPooling2D(pool_size = (2,2), name = 'Max1'))\n\n#4. Dropout this prevents model from overfitting\nmodel_CNN.add(Dropout(0.25, name = 'Drop1'))\n\n#5. Flatten Layer\nmodel_CNN.add(Flatten())\n\n#6. Fully Connected Layer\nmodel_CNN.add(Dense(128, activation = 'relu', name = 'Dense1'))\n\n#7. Dropout\nmodel_CNN.add(Dropout(0.5, name = 'Drop2'))\n\n#8. Fully Connected Layer\nmodel_CNN.add(Dense(num_classes, activation = 'softmax', name = 'Dense2'))\n\nmodel_CNN.summary()","eb330324":"\nfor layer in model_CNN.layers:\n    if('Dense' not in layer.name):\n        layer.trainable = False\n    else:\n        layer.trainable = True\n        \n#Module to output colorful statements\nfrom termcolor import colored\n\n#Check which layers have been frozen\nfor layer in model_CNN.layers:\n    print(colored(layer.name, 'blue'))\n    print(colored(layer.trainable, 'red'))\n    ","c6d342e5":"model_CNN.load_weights('\/kaggle\/input\/cnn-mnist-weights-pretrained\/cnn_mnist_weights.h5')","361e13a5":"from keras.optimizers import Adam\nfrom keras.losses import categorical_crossentropy\n\noptimizer = Adam(lr = 0.001)\nbatch_size = 128\nnum_classes = 10\nepochs = 12\n\nmodel_CNN.compile(optimizer = optimizer, loss = categorical_crossentropy, metrics = ['accuracy'])","71d63ab1":"model_CNN.fit(X_train_CNN, y_train,\n             batch_size = batch_size,\n             epochs = epochs,\n             verbose = 1,\n             validation_data = (X_test_CNN, y_test))\n             #callbacks = [tensorboard_callback, early_stopping, model_checkpoint])","e3593135":"score = model_CNN.evaluate(X_test_CNN, y_test)\nprint('Test Loss: ', score[0])\nprint('Test Accuracy: ', score[1])","589110c0":"plt.figure(figsize = (2,2))\nplt.imshow(X_test_CNN[30].reshape(28,28), cmap = 'gray') #image, reshape size, cmap\nplt.show()\nprint(np.argmax(model_CNN.predict(X_test_CNN[30].reshape(1,28,28,1))))\n\nplt.figure(figsize = (2,2))\nplt.imshow(X_test_CNN[50].reshape(28,28), cmap = 'gray') #image, reshape size, cmap\nplt.show()\nprint(np.argmax(model_CNN.predict(X_test_CNN[50].reshape(1,28,28,1))))\n\nplt.figure(figsize = (2,2))\nplt.imshow(X_test_CNN[78].reshape(28,28), cmap = 'gray') #image, reshape size, cmap\nplt.show()\nprint(np.argmax(model_CNN.predict(X_test_CNN[78].reshape(1,28,28,1))))\n\nplt.figure(figsize = (2,2))\nplt.imshow(X_test_CNN[130].reshape(28,28), cmap = 'gray') #image, reshape size, cmap\nplt.show()\nprint(np.argmax(model_CNN.predict(X_test_CNN[130].reshape(1,28,28,1))))","dbbf07fe":"model_CNN.save('.\/cnn_svhn.h5')\nmodel_CNN.save_weights('.\/cnn_svhn_weights.h5')","dfbe5e6c":"## Save the trained weights and model","0dede2a9":"**Freeze only the initial Convolutional layer weights and train dense FC layers.**\n\nIn transfer learning, we use some of the bottom layers as it is, while we tweak the top layers as required for a dataset. Here, we won't waste time in finding the best weights and we would only modify Dense layers.","12cfeb86":"## Import train and test sets","ad5b7cca":"Now that we have normalized the input, lets check whether y_train are in the right format to be inserted into the model or not. As we observe below, it needs to be converted into One Hot Encoding vectors. Else it would lead to one of the column dominating the others.","e6ac449c":"We need to preprocess this i.e normalize the input. This ensures none of the columns would dominate the other.","3d0d5e1a":"**Showing the first 100 test images, we have to build a model that would classify these images accurately. **","9b9c5b0d":"**Load pre-trained weights from MNIST CNN model**","0651eb3c":"## Visualize some predictions","591498a8":"## Load the data","38f0820b":"**To understand the breadth and depth of the data, lets check shape of data.**","0fa0166d":"## Model Fitting","e7cd0e01":"## Visualize the dataset","72cf2f9a":"***This kernel is a work in progress...***","5888797d":"**Computer Vision is a field of study that seeks to develop computers to 'see' i.e visualize real world in the form of images, videos.**\n\nIn this notebook, we attempt to teach computers to read house numbers that were captured by Google street view cars. These house numbers come in all shapes and sizes, our model should be intelligent enough to remove the noise from the image that may have crept in and identify numbers accurately.\n\n**Code Structure:**\n* Import packages, Visualize dataset\n* Pre-process the input to be fit into the model\n* Build Convolutional Neural Network\n* Use pre-trained weights for Transfer Learning\n* Check Model accuracy\n* Visualize Model predictions\n\n*Special thanks to: *\n\n*1. https:\/\/machinelearningmastery.com\/what-is-computer-vision\/ This is a treasure trove for everything on Machine Learning*\n\n*2. https:\/\/github.com\/BVLC\/caffe\/wiki\/Model-Zoo List of pre-trained weights*","dd51c3a6":"We will use **Transfer Learning** principles to classify these images. The model we will be using was trained on MNIST datatset, where the image shape were 28,28. While the images we have is 32,32 therefore we have to resize into a shape compatible with the model.\n\nUse **OpenCV** to resize images.","d1eaca53":"## Build a Convolutional Neural Network","f26d45e8":"**CNN accuracy is 86% which is good but can be improved further when using different model structures. **\n\n**Lets also evaluate test set.**","28d818c8":"## Set Optimizer, Loss, Metrics"}}