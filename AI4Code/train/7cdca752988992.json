{"cell_type":{"cfb872e1":"code","bb3717d8":"code","0576262c":"code","e17f1fd3":"code","fa496027":"code","a053c035":"code","3a939ef3":"code","4b84201d":"code","0e12af30":"code","71c12c4e":"code","7f29a50e":"code","ea71e5f5":"code","9423d12b":"code","46e6c943":"code","16d32517":"code","8a5e419f":"code","236c6b3e":"code","274fe3f2":"code","1cc805b0":"code","4ad0861a":"code","c5836296":"code","2b9effc8":"code","1020844e":"code","b811c620":"code","79e26981":"code","407e3c7f":"code","0f4a45dc":"markdown","aa9a81f7":"markdown","084d42ba":"markdown","0f55c675":"markdown","ae03d9c4":"markdown","9a1b40c2":"markdown","dba7766e":"markdown","e2ccc8a5":"markdown","ad52502b":"markdown","aa601eb9":"markdown","32131cda":"markdown","9a004727":"markdown","ea95167d":"markdown","427783e4":"markdown","a4ce2a3d":"markdown","68bc8780":"markdown","6b6a27c0":"markdown","7c4a1fea":"markdown","dca0b013":"markdown","04860e0a":"markdown","3365d492":"markdown","59c1211f":"markdown","7e9a90ab":"markdown","d7c4bf34":"markdown"},"source":{"cfb872e1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bb3717d8":"import numpy as np\np = [[1, 0], [0, 1]]\nq = [[1, 2], [3, 4]]\nprint(\"original matrix:\")\nprint(p)\nprint(q)\nresult1 = np.dot(p, q)\nprint(\"Result of the said matrix multiplication:\")\nprint(result1)\n","0576262c":"import pandas as pd\nimport numpy as np\n\nexam_data  = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n\ndf = pd.DataFrame(exam_data , index=labels)\nprint(df)","e17f1fd3":"import pandas as pd\nimport numpy as np\nexam_data  = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n\ndf = pd.DataFrame(exam_data , index=labels)\nprint(\"Rows where score between 15 and 20 (inclusive):\")\nprint(df[df['score'].between(15, 20)])\n","fa496027":"import pandas as pd\nimport numpy as np\n\nexam_data  = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts' : [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n\ndf = pd.DataFrame(exam_data , index=labels)\nprint(\"Number of attempts in the examination is greater than 2:\")\nprint(df[df['attempts'] > 2])\n","a053c035":"import pandas as pd\nimport numpy as np\nexam_data  = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n\ndf = pd.DataFrame(exam_data , index=labels)\nprint(\"\\nOriginal data frame:\")\nprint(df)\nprint(\"\\nChange the score in row 'd' to 11.5:\")\ndf.loc['d', 'score'] = 11.5\nprint(df)","3a939ef3":"import pandas as pd\nimport numpy as np\nexam_data  = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n\ndf = pd.DataFrame(exam_data , index=labels)\nprint(\"\\nSum of the examination attempts by the students:\")\nprint(df['attempts'].sum())","4b84201d":"import pandas as pd\nimport numpy as np\nexam_data  = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n\ndf = pd.DataFrame(exam_data , index=labels)\nprint(\"\\nMean score for each different student in data frame:\")\nprint(df['score'].mean())","0e12af30":"import pandas as pd\nimport numpy as np\nexam_data  = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\ndf = pd.DataFrame(exam_data , index=labels)\nprint(\"Orginal rows:\")\nprint(df)\nresult_sort=df.sort_values(by=['name', 'score'], ascending=[False, True])\nprint(\"Sort the data frame first by \u2018name\u2019 in descending order, then by \u2018score\u2019 in ascending order:\")","71c12c4e":"import pandas as pd\ndf1 = pd.DataFrame({'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n'city': ['California', 'Los Angeles', 'California', 'California', 'California', 'Los Angeles', 'Los Angeles', 'Georgia', 'Georgia', 'Los Angeles']})\nprint(\"Original Dataframe \\n\")\nprint(df1)\ng1 = df1.groupby([\"city\"]).size().reset_index(name='Number of people')\nprint(\"\\nNew Dataframe \\n\")\nprint(g1)","7f29a50e":"import pandas as pd\nimport numpy as np\nexam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\ndf = pd.DataFrame(exam_data)\nprint(\"Original DataFrame\")\nprint(df)\nprint(\"\\nNumber of NaN values in one or more columns:\")\nprint(df.isnull().values.sum())","ea71e5f5":"import pandas as pd\nimport numpy as np\nexam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\ndf = pd.DataFrame(exam_data)\nprint(\"Original DataFrame\")\nprint(df)\nprint(\"\\nAfter removing first and second rows\")\ndf = df.drop([0, 1])\nprint(df)\nprint(\"\\nReset the Index:\")\ndf = df.reset_index()\nprint(df)","9423d12b":"import pandas as pd\nd = {'col1': [1, 2, 3], 'col2': [4, 5, 6], 'col3': [7, 8, 9]}\ndf = pd.DataFrame(data=d)\nprint(\"Original DataFrame\")\nprint(df)\ndf=df.rename(columns = {'col2':'Column2'})\nprint(\"New DataFrame after renaming second column:\")\nprint(df)","46e6c943":"import pandas as pd\nd = {'col1': [1, 2, 3, 4, 7, 11], 'col2': [4, 5, 6, 9, 5, 0], 'col3': [7, 5, 8, 12, 1,11]}\ndf = pd.DataFrame(data=d)\nprint(\"Original DataFrame\")\nprint(df)\nprint(\"\\ntopmost n records within each group of a DataFrame:\")\ndf1 = df.nlargest(3, 'col1')\nprint(df1)\ndf2 = df.nlargest(3, 'col2')\nprint(df2)\ndf3 = df.nlargest(3, 'col3')\nprint(df3)","16d32517":"import pandas as pd\nd = {'col1': [1, 2, 3, 4, 7], 'col2': [4, 5, 6, 9, 5], 'col3': [7, 8, 12, 1, 11]}\ndf = pd.DataFrame(data=d)\nprint(\"Original DataFrame\")\nprint(df)\nprint(\"\\nAll columns except 'col3':\")\ndf = df.loc[:, df.columns != 'col3']\nprint(df)","8a5e419f":"import numpy as np\nfrom numpy import linalg as LA\na = np.array([[1, 0], [1, 2]])\nprint(\"Original 2-d array\")\nprint(a)\nprint(\"Determinant of the said 2-D array:\")\nprint(np.linalg.det(a))","236c6b3e":"import pandas as pd\n\nipl_data = {'Team': ['Riders', 'Riders', 'Devils', 'Devils', 'Kings',\n   'kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],\n   'Rank': [1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],\n   'Year': [2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],\n   'Points':[876,789,863,673,741,812,756,788,694,701,804,690]}\ndf = pd.DataFrame(ipl_data)\n\nprint(df)","274fe3f2":"import pandas as pd\n\nipl_data = {'Team': ['Riders', 'Riders', 'Devils', 'Devils', 'Kings',\n   'kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],\n   'Rank': [1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],\n   'Year': [2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],\n   'Points':[876,789,863,673,741,812,756,788,694,701,804,690]}\ndf = pd.DataFrame(ipl_data)\n\nprint(df.groupby('Team'))","1cc805b0":"## View Groups\n\ndf.groupby('Team').groups","4ad0861a":"df.groupby(['Team','Year']).groups","c5836296":"grouped = df.groupby('Year')\n\nfor name,group in grouped:\n   print(name)\n   print(group)","2b9effc8":"grouped = df.groupby('Year')\ngrouped.get_group(2014)","1020844e":"grouped = df.groupby('Year')\ngrouped['Points'].agg(np.mean)","b811c620":"grouped = df.groupby('Team')\ngrouped['Points'].agg([np.sum, np.mean, np.std])","79e26981":"grouped = df.groupby('Team')\nscore = lambda x: (x - x.mean()) \/ x.std()*10\ngrouped.transform(score)","407e3c7f":"df.groupby('Team').filter(lambda x: len(x) >= 3)","0f4a45dc":"Write a NumPy program to compute the determinant of a given square array.","aa9a81f7":"Write a Pandas program to count the NaN values in one or more columns in DataFrame.","084d42ba":"## Transformations\n\nTransformation on a group or a column returns an object that is indexed the same size of that is being grouped. Thus, the transform should return a result that is the same size as that of a group chunk.\n\n","0f55c675":"Write a Pandas program to select the rows the score is between 15 and 20 (inclusive).","ae03d9c4":"Write a Pandas program to select all columns, except one given column in a DataFrame.","9a1b40c2":"### Group by with multiple columns","dba7766e":"Write a Pandas program to get topmost n records within each group of a DataFrame.","e2ccc8a5":"Write a Pandas program to reset index in a given DataFrame.\n\nSample data:\n\nOriginal DataFrame\n\nattempts name qualify score\n0 1 Anastasia yes 12.5\n1 3 Dima no 9.0\n2 2 Katherine yes 16.5\n3 3 James no NaN\n4 2 Emily no 9.0\n5 3 Michael yes 20.0\n6 1 Matthew yes 14.5\n7 1 Laura no NaN\n8 2 Kevin no 8.0\n9 1 Jonas yes 19.0\n\nAfter removing first and second rows\n\nattempts name qualify score\n\n2 2 Katherine yes 16.5\n3 3 James no NaN\n4 2 Emily no 9.0\n5 3 Michael yes 20.0\n6 1 Matthew yes 14.5\n7 1 Laura no NaN\n8 2 Kevin no 8.0\n9 1 Jonas yes 19.0\n\nReset the Index:\n\nindex attempts name qualify score\n\n0 2 2 Katherine yes 16.5\n1 3 3 James no NaN\n2 4 2 Emily no 9.0\n3 5 3 Michael yes 20.0\n4 6 1 Matthew yes 14.5\n5 7 1 Laura no NaN\n6 8 2 Kevin no 8.0\n7 9 1 Jonas yes 19.0","ad52502b":"Write a Pandas program to create and display a DataFrame from a specified dictionary data which has the index labels.\n\nSample DataFrame:\nexam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n","aa601eb9":"## Applying Multiple Aggregation Functions at Once\n\nWith grouped Series, you can also pass a list or dict of functions to do aggregation with, and generate DataFrame as output \u2212\n\n","32131cda":"## Select a Group\n\nUsing the get_group() method, we can select a single group.\n","9a004727":"Write a NumPy program to compute the multiplication of two given matrixes.\n\nSample Matrix:\n[[1, 0], [0, 1]]\n[[1, 2], [3, 4]]\n","ea95167d":"Write a Pandas program to change the score in row 'd' to 11.5 ?","427783e4":"### Iterating through Groups\n\nWith the groupby object in hand, we can iterate through the object similar to itertools.obj.","a4ce2a3d":"## List of Python Tutorials for Beginners\n\nhttps:\/\/www.kaggle.com\/getting-started\/133844\n\n## Note\n\nDon't forget to like, share and upvote any tutorial that you may benefit from. Feel free to leave your thoughts\/opinion in comments. \n\n\n","68bc8780":"Write a Pandas program to select the rows where the number of attempts in the examination is greater than 2.","6b6a27c0":"Write a Pandas program to rename a specific column name in a given DataFrame.\n\nSample data:\n\nOriginal DataFrame\n\ncol1 col2 col3\n\n0 1 4 7\n1 2 5 8\n2 3 6 9\n\nNew DataFrame after renaming second column:\n\ncol1 Column2 col3\n\n0 1 4 7\n1 2 5 8\n2 3 6 9","7c4a1fea":"## Aggregations\n\nAn aggregated function returns a single aggregated value for each group. Once the group by object is created, several aggregation operations can be performed on the grouped data","dca0b013":"## Filtration\n\nFiltration filters the data on a defined criteria and returns the subset of data. The filter() function is used to filter the data.","04860e0a":"Write a Pandas program to count city wise number of people from a given of data set (city, name of the person).\n\nSample data:\n\ncity Number of people\n\n0 California 4\n\n1 Georgia 2\n\n2 Los Angeles 4","3365d492":"## Groupby Clause","59c1211f":"Write a Pandas program to calculate the mean score for each different student in data frame.","7e9a90ab":"Write a Pandas program to calculate the sum of the examination attempts by the students.","d7c4bf34":"Write a Pandas program to sort the data frame first by 'name' in descending order, then by 'score' in ascending order."}}