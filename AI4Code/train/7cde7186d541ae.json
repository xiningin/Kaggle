{"cell_type":{"631089d0":"code","b4e92317":"code","6bcd6041":"code","c2909da7":"code","273eb629":"code","e5347d76":"code","2679980e":"code","2f9c2b33":"code","20bf4451":"code","451d0f6e":"code","d94555e5":"code","91ba044c":"code","4c3e4ccc":"code","31732776":"code","329a0040":"code","7e746fac":"code","f04a1d74":"code","35e69a42":"code","5f80d38a":"code","a9cedb4c":"code","43b0653d":"code","ec3ad5fd":"code","630f3912":"code","e02cbc77":"code","da9eeb09":"code","331aec00":"code","d96f9a07":"code","9b993a1f":"code","2f4ad361":"code","42a0fbd3":"code","3942367d":"code","e9dcad56":"markdown"},"source":{"631089d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b4e92317":"print(os.listdir(\"..\/input\/ds2-ds5-competition-1\/\"))","6bcd6041":"train = pd.read_csv(\"..\/input\/ds2-ds5-competition-1\/train.csv\")\ntest = pd.read_csv(\"..\/input\/ds2-ds5-competition-1\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/ds2-ds5-competition-1\/sample_submission.csv\")","c2909da7":"train.info()","273eb629":"import matplotlib.pyplot as plt\nimport seaborn as sns","e5347d76":"sns.set(rc={'figure.figsize':(11.7,8.27)})","2679980e":"sns.distplot(train.label)\nplt.xticks(rotation=45)\nplt.show() ","2f9c2b33":"np.unique(train.label)","20bf4451":"sns.countplot(train.label)\nplt.xticks(rotation=45)\nplt.show() ","451d0f6e":"train[train.label == 0].shape[0] \/ train.shape[0]","d94555e5":"sns.jointplot(x='time', y='label', data=train)\nplt.show()","91ba044c":"sns.jointplot(x='s1', y='label', data=train)\nplt.show()","4c3e4ccc":"from sklearn.linear_model import LinearRegression","31732776":"X = train.copy()\nx_cols = ['s'+ str(i) for i in list(range(1,17,1))]\nX = X[x_cols]\nX.head()","329a0040":"y = train['label']","7e746fac":"lm_model = LinearRegression()\nlm_model.fit(X, y)","f04a1d74":"new_X = test[x_cols]\nnew_y = lm_model.predict(new_X)","35e69a42":"submission_lm = submission.copy()\nsubmission_lm['label'] = new_y","5f80d38a":"submission_lm.shape","a9cedb4c":"submission_lm.head()","43b0653d":"submission_lm.to_csv('submission_lm.csv', index=False)","ec3ad5fd":"from sklearn.ensemble import RandomForestRegressor","630f3912":"corr = train.corr(method='pearson')\nprint(corr.label)","e02cbc77":"plt_cols = ['s'+ str(i) for i in [1, 5, 6, 14]]\nplt_cols = ['label'] + plt_cols\nplt_cols","da9eeb09":"sns.pairplot(train[plt_cols])\nplt.show()","331aec00":"sub_x_cols = ['s1', 's5', 's6', 's14']\nsub_X = train[sub_x_cols]\nsub_X.head()","d96f9a07":"rf_model = RandomForestRegressor()\nrf_model.fit(sub_X, y)","9b993a1f":"new_X = test[sub_x_cols]\nnew_y = rf_model.predict(new_X)","2f4ad361":"submission_rf = submission.copy()\nsubmission_rf['label'] = new_y","42a0fbd3":"submission_rf.head()","3942367d":"submission_rf.to_csv('submission_rf.csv', index=False)","e9dcad56":"### RF, try! "}}