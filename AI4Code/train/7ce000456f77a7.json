{"cell_type":{"f8cb2ec8":"code","1c510370":"code","ba149f09":"code","49d36ffb":"code","48824bf6":"code","b918b69a":"code","06e441fc":"code","11547e4b":"code","0d443b45":"code","7ccfb54c":"code","11faab7c":"code","9ed250d6":"code","8f667d8e":"code","50edc9de":"code","fdea9a8c":"code","2e70b80d":"code","d1935d19":"code","787ef5fc":"code","49de4666":"code","ebff4c36":"code","1d4439fa":"code","3b753aa4":"code","59c4d74b":"code","4e966ce3":"code","cfa20721":"code","3a7b440c":"code","6a620e51":"code","26240f78":"code","25c5facc":"code","682c9333":"code","800e788a":"markdown","a953c1d5":"markdown","74d4ad45":"markdown","3f99a287":"markdown","2e1d0ed5":"markdown","9af9ee19":"markdown","c8fc6e34":"markdown","0624c660":"markdown"},"source":{"f8cb2ec8":"#GENERAL\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport random\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom keras.preprocessing import image\nfrom skimage.feature import hessian_matrix, hessian_matrix_eigvals\nfrom scipy.ndimage.filters import convolve\nfrom skimage import data, io, filters\nimport skimage\nfrom skimage.morphology import convex_hull_image, erosion\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN, LSTM, GlobalAveragePooling2D, SeparableConv2D,\\\nZeroPadding2D, Convolution2D, ZeroPadding2D, Conv2DTranspose,ReLU, UpSampling2D, Concatenate, Conv2DTranspose\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.models import load_model\nfrom keras import backend\n#SKLEARN CLASSIFIER\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom lightgbm import LGBMClassifier, LGBMRegressor\nfrom catboost import CatBoostClassifier, CatBoostRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neural_network import MLPClassifier, MLPRegressor\nfrom sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","1c510370":"MAIN_IMAGE_PATH = Path(\"..\/input\/semantic-segmentation-of-underwater-imagery-suim\/train_val\/images\")\nMAIN_MASK_PATH = Path(\"..\/input\/semantic-segmentation-of-underwater-imagery-suim\/train_val\/masks\")\n\nOBJECT_PATH = list(MAIN_IMAGE_PATH.glob(r\"*.jpg\"))\nMASK_PATH = list(MAIN_MASK_PATH.glob(r\"*.bmp\"))\n\nOBJECT_PATH = sorted(OBJECT_PATH)\nMASK_PATH = sorted(MASK_PATH)\n\nOBJECT_SERIES = pd.Series(OBJECT_PATH,name=\"OBJECTS\").astype(str)\nMASK_SERIES = pd.Series(MASK_PATH,name=\"MASK\").astype(str)\n\nMAIN_DATA = pd.concat([OBJECT_SERIES,MASK_SERIES],axis=1)","ba149f09":"EXAMPLE_OBJECT = cv2.cvtColor(cv2.imread(MAIN_DATA[\"OBJECTS\"][44]),cv2.COLOR_BGR2RGB)\nEXAMPLE_MASK = cv2.cvtColor(cv2.imread(MAIN_DATA[\"MASK\"][44]),cv2.COLOR_BGR2RGB)\n\nADD_IMAGE = cv2.addWeighted(EXAMPLE_OBJECT,0.6,EXAMPLE_MASK,0.4,0.5)\n\nfigure,axis = plt.subplots(1,3,figsize=(15,15))\n\naxis[0].set_xlabel(EXAMPLE_OBJECT.shape)\naxis[0].set_title(\"OBJECT\")\naxis[0].imshow(EXAMPLE_OBJECT)\n\naxis[1].set_xlabel(EXAMPLE_MASK.shape)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(EXAMPLE_MASK)\n\naxis[2].set_xlabel(ADD_IMAGE.shape)\naxis[2].set_title(\"ADD\")\naxis[2].imshow(ADD_IMAGE)\n\nplt.tight_layout()\nplt.show()","49d36ffb":"EXAMPLE_OBJECT = cv2.cvtColor(cv2.imread(MAIN_DATA[\"OBJECTS\"][488]),cv2.COLOR_BGR2RGB)\nEXAMPLE_MASK = cv2.cvtColor(cv2.imread(MAIN_DATA[\"MASK\"][488]),cv2.COLOR_BGR2RGB)\n\nADD_IMAGE = cv2.addWeighted(EXAMPLE_OBJECT,0.6,EXAMPLE_MASK,0.4,0.5)\n\nfigure,axis = plt.subplots(1,3,figsize=(15,15))\n\naxis[0].set_xlabel(EXAMPLE_OBJECT.shape)\naxis[0].set_title(\"OBJECT\")\naxis[0].imshow(EXAMPLE_OBJECT)\n\naxis[1].set_xlabel(EXAMPLE_MASK.shape)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(EXAMPLE_MASK)\n\naxis[2].set_xlabel(ADD_IMAGE.shape)\naxis[2].set_title(\"ADD\")\naxis[2].imshow(ADD_IMAGE)\n\nplt.tight_layout()\nplt.show()","48824bf6":"EXAMPLE_OBJECT = cv2.cvtColor(cv2.imread(MAIN_DATA[\"OBJECTS\"][8]),cv2.COLOR_BGR2RGB)\nEXAMPLE_MASK = cv2.cvtColor(cv2.imread(MAIN_DATA[\"MASK\"][8]),cv2.COLOR_BGR2RGB)\n\nADD_IMAGE = cv2.addWeighted(EXAMPLE_OBJECT,0.6,EXAMPLE_MASK,0.4,0.5)\n\nfigure,axis = plt.subplots(1,3,figsize=(15,15))\n\naxis[0].set_xlabel(EXAMPLE_OBJECT.shape)\naxis[0].set_title(\"OBJECT\")\naxis[0].imshow(EXAMPLE_OBJECT)\n\naxis[1].set_xlabel(EXAMPLE_MASK.shape)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(EXAMPLE_MASK)\n\naxis[2].set_xlabel(ADD_IMAGE.shape)\naxis[2].set_title(\"ADD\")\naxis[2].imshow(ADD_IMAGE)\n\nplt.tight_layout()\nplt.show()","b918b69a":"EXAMPLE_OBJECT = cv2.cvtColor(cv2.imread(MAIN_DATA[\"OBJECTS\"][555]),cv2.COLOR_BGR2RGB)\nEXAMPLE_MASK = cv2.cvtColor(cv2.imread(MAIN_DATA[\"MASK\"][555]),cv2.COLOR_BGR2RGB)\n\nADD_IMAGE = cv2.addWeighted(EXAMPLE_OBJECT,0.6,EXAMPLE_MASK,0.7,0.5)\n\nfigure,axis = plt.subplots(1,3,figsize=(15,15))\n\naxis[0].set_xlabel(EXAMPLE_OBJECT.shape)\naxis[0].set_title(\"OBJECT\")\naxis[0].imshow(EXAMPLE_OBJECT)\n\naxis[1].set_xlabel(EXAMPLE_MASK.shape)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(EXAMPLE_MASK)\n\naxis[2].set_xlabel(ADD_IMAGE.shape)\naxis[2].set_title(\"ADD\")\naxis[2].imshow(ADD_IMAGE)\n\nplt.tight_layout()\nplt.show()","06e441fc":"EXAMPLE_OBJECT = cv2.cvtColor(cv2.imread(MAIN_DATA[\"OBJECTS\"][1002]),cv2.COLOR_BGR2RGB)\nEXAMPLE_MASK = cv2.cvtColor(cv2.imread(MAIN_DATA[\"MASK\"][1002]),cv2.COLOR_BGR2RGB)\n\nADD_IMAGE = cv2.addWeighted(EXAMPLE_OBJECT,0.6,EXAMPLE_MASK,0.6,0.5)\n\nfigure,axis = plt.subplots(1,3,figsize=(15,15))\n\naxis[0].set_xlabel(EXAMPLE_OBJECT.shape)\naxis[0].set_title(\"OBJECT\")\naxis[0].imshow(EXAMPLE_OBJECT)\n\naxis[1].set_xlabel(EXAMPLE_MASK.shape)\naxis[1].set_title(\"MASK\")\naxis[1].imshow(EXAMPLE_MASK)\n\naxis[2].set_xlabel(ADD_IMAGE.shape)\naxis[2].set_title(\"ADD\")\naxis[2].imshow(ADD_IMAGE)\n\nplt.tight_layout()\nplt.show()","11547e4b":"MASK_MAIN_TRANSFORMATION = []\nOBJECT_MAIN_TRANSFORMATION = []\nADD_MAIN_TRANSFORMATION = []","0d443b45":"for x_image,x_mask in zip(MAIN_DATA.OBJECTS,MAIN_DATA.MASK):\n    \n    IMAGE_X = cv2.cvtColor(cv2.imread(x_image),cv2.COLOR_BGR2RGB)\n    MASK_X = cv2.cvtColor(cv2.imread(x_mask),cv2.COLOR_BGR2RGB)\n    \n    RESIZED_X_IMAGE = cv2.resize(IMAGE_X,(256,256))\n    RESIZED_X_MASK = cv2.resize(MASK_X,(256,256))\n    \n    ADD_X = cv2.addWeighted(RESIZED_X_IMAGE,0.6,RESIZED_X_MASK,0.6,0.5)\n    \n    RESIZED_X_ADD = cv2.resize(ADD_X,(256,256))\n    \n    MASK_MAIN_TRANSFORMATION.append(RESIZED_X_MASK)\n    OBJECT_MAIN_TRANSFORMATION.append(RESIZED_X_IMAGE)\n    ADD_MAIN_TRANSFORMATION.append(RESIZED_X_ADD)","7ccfb54c":"print(\"WHEN IT IS ARRAY IMAGE SHAPE: \",np.shape(np.array(OBJECT_MAIN_TRANSFORMATION)))\nprint(\"WHEN IT IS ARRAY MASK SHAPE: \",np.shape(np.array(MASK_MAIN_TRANSFORMATION)))\nprint(\"WHEN IT IS ARRAY ADD SHAPE: \",np.shape(np.array(ADD_MAIN_TRANSFORMATION)))","11faab7c":"figure,axis = plt.subplots(1,3,figsize=(15,15))\n\naxis[0].imshow(OBJECT_MAIN_TRANSFORMATION[210],cmap=\"jet\")\naxis[0].set_xlabel(OBJECT_MAIN_TRANSFORMATION[210].shape)\naxis[0].set_title(\"ORIGINAL\")\n\naxis[1].imshow(MASK_MAIN_TRANSFORMATION[210])\naxis[1].set_xlabel(MASK_MAIN_TRANSFORMATION[210].shape)\naxis[1].set_title(\"MASK\")\n\naxis[2].imshow(ADD_MAIN_TRANSFORMATION[210])\naxis[2].set_xlabel(ADD_MAIN_TRANSFORMATION[210].shape)\naxis[2].set_title(\"ADD\")\n\nplt.tight_layout()\nplt.show()","9ed250d6":"figure,axis = plt.subplots(1,3,figsize=(15,15))\n\naxis[0].imshow(OBJECT_MAIN_TRANSFORMATION[12],cmap=\"jet\")\naxis[0].set_xlabel(OBJECT_MAIN_TRANSFORMATION[12].shape)\naxis[0].set_title(\"ORIGINAL\")\n\naxis[1].imshow(MASK_MAIN_TRANSFORMATION[12])\naxis[1].set_xlabel(MASK_MAIN_TRANSFORMATION[12].shape)\naxis[1].set_title(\"MASK\")\n\naxis[2].imshow(ADD_MAIN_TRANSFORMATION[12])\naxis[2].set_xlabel(ADD_MAIN_TRANSFORMATION[12].shape)\naxis[2].set_title(\"ADD\")\n\nplt.tight_layout()\nplt.show()","8f667d8e":"figure,axis = plt.subplots(1,3,figsize=(15,15))\n\naxis[0].imshow(OBJECT_MAIN_TRANSFORMATION[1234],cmap=\"jet\")\naxis[0].set_xlabel(OBJECT_MAIN_TRANSFORMATION[1234].shape)\naxis[0].set_title(\"ORIGINAL\")\n\naxis[1].imshow(MASK_MAIN_TRANSFORMATION[1234])\naxis[1].set_xlabel(MASK_MAIN_TRANSFORMATION[1234].shape)\naxis[1].set_title(\"MASK\")\n\naxis[2].imshow(ADD_MAIN_TRANSFORMATION[1234])\naxis[2].set_xlabel(ADD_MAIN_TRANSFORMATION[1234].shape)\naxis[2].set_title(\"ADD\")\n\nplt.tight_layout()\nplt.show()","50edc9de":"Transformation_Image = np.array(OBJECT_MAIN_TRANSFORMATION,dtype=\"float32\")\nTransformation_Mask = np.array(MASK_MAIN_TRANSFORMATION,dtype=\"float32\")\nTransformation_Add = np.array(ADD_MAIN_TRANSFORMATION,dtype=\"float32\")\n\nTransformation_Image = Transformation_Image \/ 255.\nTransformation_Mask = Transformation_Mask \/ 255.\nTransformation_Add = Transformation_Add \/ 255.","fdea9a8c":"print(\"TRAIN: \",Transformation_Image.shape)\nprint(\"TRANSFORMATION MASK: \",Transformation_Mask.shape)\nprint(\"TRANSFORMATION ADD: \",Transformation_Add.shape)","2e70b80d":"compile_loss = \"binary_crossentropy\"\ncompile_optimizer = Adam(lr=0.000001)\noutput_class = 1","d1935d19":"Checkpoint_Model = tf.keras.callbacks.ModelCheckpoint(monitor=\"val_accuracy\",\n                                                      save_best_only=True,\n                                                      save_weights_only=True,\n                                                      filepath=\".\/modelcheck\")\nReduce_Model = tf.keras.callbacks.ReduceLROnPlateau(monitor=\"val_accuracy\",factor=0.1,patience=3)","787ef5fc":"E_AE = Sequential()\nE_AE.add(Conv2D(32,(5,5),kernel_initializer = 'he_normal'))\nE_AE.add(BatchNormalization())\nE_AE.add(ReLU())\n#\nE_AE.add(Conv2D(64,(5,5),kernel_initializer = 'he_normal'))\nE_AE.add(BatchNormalization())\nE_AE.add(ReLU())\n#\nE_AE.add(Conv2D(128,(5,5),kernel_initializer = 'he_normal'))\nE_AE.add(BatchNormalization())\nE_AE.add(ReLU())\n#\nE_AE.add(Conv2D(256,(5,5),kernel_initializer = 'he_normal'))\nE_AE.add(BatchNormalization())\nE_AE.add(ReLU())\n\n\nD_AE = Sequential()\nD_AE.add(Conv2DTranspose(128,(5,5)))\nD_AE.add(ReLU())\n#\nD_AE.add(Conv2DTranspose(64,(5,5)))\nD_AE.add(ReLU())\n#\nD_AE.add(Conv2DTranspose(32,(5,5)))\nD_AE.add(ReLU())\n#\nD_AE.add(Conv2DTranspose(output_class,(5,5)))\nD_AE.add(ReLU())","49de4666":"Auto_Encoder = Sequential([E_AE,D_AE])\nAuto_Encoder.compile(loss=compile_loss,optimizer=compile_optimizer,metrics=[\"mse\"])","ebff4c36":"Model_AutoEncoder = Auto_Encoder.fit(Transformation_Image,Transformation_Mask,epochs=20,callbacks=[Checkpoint_Model,Reduce_Model])","1d4439fa":"Prediction_Seen = Auto_Encoder.predict(Transformation_Image[:10])","3b753aa4":"figure,axis = plt.subplots(1,2,figsize=(15,15))\n\nPRE_COUNT = 1\n\naxis[0].imshow(Transformation_Image[PRE_COUNT])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Seen[PRE_COUNT])\naxis[1].set_title(\"PREDICTION\")\n\nplt.tight_layout()\nplt.show()","59c4d74b":"figure,axis = plt.subplots(1,2,figsize=(15,15))\n\nPRE_COUNT = 2\n\naxis[0].imshow(Transformation_Image[PRE_COUNT])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Seen[PRE_COUNT])\naxis[1].set_title(\"PREDICTION\")\n\nplt.tight_layout()\nplt.show()","4e966ce3":"figure,axis = plt.subplots(1,2,figsize=(15,15))\n\nPRE_COUNT = 3\n\naxis[0].imshow(Transformation_Image[PRE_COUNT])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Seen[PRE_COUNT])\naxis[1].set_title(\"PREDICTION\")\n\nplt.tight_layout()\nplt.show()","cfa20721":"figure,axis = plt.subplots(1,2,figsize=(15,15))\n\nPRE_COUNT = 4\n\naxis[0].imshow(Transformation_Image[PRE_COUNT])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Seen[PRE_COUNT])\naxis[1].set_xlabel(Prediction_Seen[PRE_COUNT].shape)\naxis[1].set_title(\"PREDICTION\")\n\nplt.tight_layout()\nplt.show()","3a7b440c":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nPRE_COUNT = 5\n\naxis[0].imshow(Transformation_Image[PRE_COUNT])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Seen[PRE_COUNT],cmap=\"hot\")\naxis[1].set_xlabel(Prediction_Seen[PRE_COUNT].shape)\naxis[1].set_title(\"PREDICTION\")\n\nplt.tight_layout()\nplt.show()","6a620e51":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nPRE_COUNT = 6\n\naxis[0].imshow(Transformation_Image[PRE_COUNT])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Seen[PRE_COUNT],cmap=\"jet\")\naxis[1].set_xlabel(Prediction_Seen[PRE_COUNT].shape)\naxis[1].set_title(\"PREDICTION\")\n\nplt.tight_layout()\nplt.show()","26240f78":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nPRE_COUNT = 7\n\naxis[0].imshow(Transformation_Image[PRE_COUNT])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Seen[PRE_COUNT],cmap=\"gist_earth\")\naxis[1].set_xlabel(Prediction_Seen[PRE_COUNT].shape)\naxis[1].set_title(\"PREDICTION\")\n\nplt.tight_layout()\nplt.show()","25c5facc":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nPRE_COUNT = 8\n\naxis[0].imshow(Transformation_Image[PRE_COUNT])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Seen[PRE_COUNT],cmap=\"hot\")\naxis[1].set_xlabel(Prediction_Seen[PRE_COUNT].shape)\naxis[1].set_title(\"PREDICTION\")\n\nplt.tight_layout()\nplt.show()","682c9333":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nPRE_COUNT = 9\n\naxis[0].imshow(Transformation_Image[PRE_COUNT])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Seen[PRE_COUNT],cmap=\"jet\")\naxis[1].set_xlabel(Prediction_Seen[PRE_COUNT].shape)\naxis[1].set_title(\"PREDICTION\")\n\nplt.tight_layout()\nplt.show()","800e788a":"# TRANSFORMATION FOR SEGMENTATION","a953c1d5":"# PATH \/ LABEL","74d4ad45":"# AUTO-ENCODER PROCESS \/ AE","3f99a287":"### OBJECTS AND MASK","2e1d0ed5":"# PACKAGES AND LIBRARIES","9af9ee19":"### ATTENTION\n* CHECK PART: https:\/\/www.kaggle.com\/brsdincer\/underwater-segmentation-process-i","c8fc6e34":"### DATA TRANSFORMATION","0624c660":"### MODEL 1"}}