{"cell_type":{"50c9bf01":"code","ba693c00":"code","53f7d889":"code","4a8aad63":"code","7d7482db":"code","ccf31666":"code","5af6a986":"code","5f7b164f":"code","39060078":"code","a267183b":"code","813d30fa":"code","9033a7e2":"code","9aabaab5":"code","4eb5b080":"code","d58db10c":"markdown","fa3e9649":"markdown","05d293b4":"markdown","9c3583f0":"markdown","0f470bac":"markdown","cd3aa8cc":"markdown"},"source":{"50c9bf01":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\nimport cv2\nimport pandas as pd\nimport numpy as np\nimport json\n\nfrom tqdm import tqdm, tqdm_notebook\n\nimport keras\nfrom keras.models import Sequential, Model\nfrom keras.layers import Conv2D, Dense, MaxPooling2D, Flatten, Dropout\nfrom keras.preprocessing.image import ImageDataGenerator\n\nfrom sklearn.model_selection import train_test_split\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport os","ba693c00":"\n\n#print(os.listdir(\"..\/input\/densenet-keras\/DenseNet-BC-169-32-no-top.h5\"))\ntrain_dir = \"..\/input\/aerial-cactus-identification\/train\/train\/\"\ntest_dir = \"..\/input\/aerial-cactus-identification\/test\/test\/\"\ntrain_df = pd.read_csv('..\/input\/aerial-cactus-identification\/train.csv')","53f7d889":"X = []\ny = []\nimges = train_df['id'].values\nfor img_id in tqdm_notebook(imges):\n    X.append(cv2.imread(train_dir + img_id))    \n    y.append(train_df[train_df['id'] == img_id]['has_cactus'].values[0])  \nX = np.asarray(X)\nX = X.astype('float32')\nX \/= 255\n#y = np.asarray(y)\nprint('Shape of X tensor: ',X.shape)\nprint('Length of target list: ',len(y))\n\n","4a8aad63":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.1)\ny_train = keras.utils.to_categorical(y_train,2)\ny_val = keras.utils.to_categorical(y_val,2)\n\ndatagen = ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True,\n    vertical_flip=True)\n\nval_datagen = ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True,\n    vertical_flip=True)\n","7d7482db":"datagen.fit(X_train)\nval_datagen.fit(X_val)","ccf31666":"base_model = keras.applications.densenet.DenseNet169(include_top=False, input_shape=(32,32,3), \n                                                     weights = '..\/input\/densenet-keras\/DenseNet-BC-169-32-no-top.h5')\nbase_model.trainable = False","5af6a986":"#To add the final classifier\nadd_model = Sequential()\nadd_model.add(Flatten(input_shape=base_model.output_shape[1:]))\nadd_model.add(Dense(256, activation='relu'))\nadd_model.add(Dropout(0.2))\nadd_model.add(Dense(2, activation='softmax'))\n\nmodel = Model(inputs = base_model.input, outputs = add_model(base_model.output))\nmodel.compile(optimizer='adam',loss='categorical_crossentropy', \n                metrics=['accuracy'])","5f7b164f":"# fits the model on batches with real-time data augmentation:\nmodel.fit_generator(datagen.flow(X_train, y_train, batch_size=16),\n                    steps_per_epoch=len(X_train) \/ 16, epochs=100,\n                    validation_data = val_datagen.flow(X_val,y_val), validation_steps=len(X_val) \/ 16, verbose = 1)","39060078":"X_tst = []\nTest_imgs = []\nfor img_id in tqdm_notebook(os.listdir(test_dir)):\n    X_tst.append(cv2.imread(test_dir + img_id))     \n    Test_imgs.append(img_id)\nX_tst = np.asarray(X_tst)\nX_tst = X_tst.astype('float32')\nX_tst \/= 255\n\n","a267183b":"# Prediction\ntest_predictions = model.predict(X_tst)\n\n","813d30fa":"#print(test_predictions)\ntest_predictions_2 = np.argmax(test_predictions, axis = 1)\nprint(test_predictions_2)\nprint(test_predictions_2.shape)","9033a7e2":"sub_df = pd.DataFrame(test_predictions_2, columns=['has_cactus'])\nsub_df['has_cactus'] = sub_df['has_cactus'].apply(lambda x: 1 if x > 0.75 else 0)\n\nsub_df['id'] = ''\ncols = sub_df.columns.tolist()\ncols = cols[-1:] + cols[:-1]\nsub_df=sub_df[cols]\n\nfor i, img in enumerate(Test_imgs):\n    sub_df.set_value(i,'id',img)\n    ","9aabaab5":"sub_df.head()","4eb5b080":"\n\nsub_df.to_csv('submission.csv',index=False)\n\n","d58db10c":"Test set","fa3e9649":"**Submitting**","05d293b4":"**Loading the DenseNet169 and attaching the final classifier**","9c3583f0":"**Classifier on top of DenseNet**","0f470bac":"Data augmentation","cd3aa8cc":"Loading the dataset"}}