{"cell_type":{"de5e55eb":"code","c1bda6c8":"code","51f213f1":"code","6ce62c1a":"code","3af9781d":"code","f2de9089":"code","944623ab":"code","a61a3c36":"code","c91583df":"code","6eaef51f":"code","49620c30":"code","71c99fef":"code","0b319a27":"code","fce64cb7":"code","d6f45290":"code","a737771f":"code","3b095163":"markdown","c7d504e6":"markdown","dc600ccf":"markdown","ebe5edc2":"markdown","c25898f6":"markdown","07009ca2":"markdown","475ca63d":"markdown","f40d6673":"markdown","f44d3e48":"markdown","96be6ee6":"markdown","3df04c24":"markdown","b86876b2":"markdown","5eb65d25":"markdown","d40759e4":"markdown","27ee943d":"markdown","195807e0":"markdown","4a49eaf8":"markdown","bad6c041":"markdown","642698f4":"markdown"},"source":{"de5e55eb":"planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\nfor planet in planets:\n    print(planet, end=' ') # print all on same line","c1bda6c8":"# Another way using join\n\nprint(\"-\".join(planets))","51f213f1":"# Another way using sep\nprint(1,2,3, sep='-')","6ce62c1a":"multiplicands = (2, 2, 2, 3, 3, 5)\nproduct = 1\nfor mult in multiplicands:\n    product = product * mult\nproduct","3af9781d":"s = 'steganograpHy is the practicE of conceaLing a file, message, image, or video within another fiLe, message, image, Or video.'\nmsg = ''\n# print all the uppercase letters in s, one at a time\nfor char in s:\n    if char.isupper():\n        print(char, end='')        ","f2de9089":"for i in range(5):\n    print(\"Doing important work. i =\", i)","944623ab":"i = 0\nwhile i < 10:\n    print(i, end=' ')\n    i += 1","a61a3c36":"squares = [n**2 for n in range(10)]\nsquares","c91583df":"squares = []\nfor n in range(10):\n    squares.append(n**2)\nsquares","6eaef51f":"short_planets = [planet for planet in planets if len(planet) < 6]\nshort_planets","49620c30":"# str.upper() returns an all-caps version of a string\nloud_short_planets = [planet.upper() + '!' for planet in planets if len(planet) < 6]\nloud_short_planets","71c99fef":"[\n    planet.upper() + '!' \n    for planet in planets \n    if len(planet) < 6\n]","0b319a27":"[32 for planet in planets]","fce64cb7":"def count_negatives(nums):\n    \"\"\"Return the number of negative numbers in the given list.\n    \n    >>> count_negatives([5, -1, -2, 0, 3])\n    2\n    \"\"\"\n    n_negative = 0\n    for num in nums:\n        if num < 0:\n            n_negative = n_negative + 1\n    return n_negative","d6f45290":"def count_negatives(nums):\n    return len([num for num in nums if num < 0])","a737771f":"def count_negatives(nums):\n    # Reminder: in the \"booleans and conditionals\" exercises, we learned about a quirk of \n    # Python where it calculates something like True + True + False + True to be equal to 3.\n    return sum([num < 0 for num in nums])","3b095163":"Which of these solutions is the \"best\" is entirely subjective. Solving a problem with less code is always nice, but it's worth keeping in mind the following lines from [The Zen of Python](https:\/\/en.wikipedia.org\/wiki\/Zen_of_Python):\n\n> Readability counts.  \n> Explicit is better than implicit.\n\nSo, use these tools to make compact readable programs. But when you have to choose, favor code that is easy for others to understand.","c7d504e6":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161283) to chat with other Learners.*","dc600ccf":"## List comprehensions\n\nList comprehensions are one of Python's most beloved and unique features. The easiest way to understand them is probably to just look at a few examples:","ebe5edc2":"You can even loop through each character in a string:","c25898f6":"Much better, right?\n\nWell if all we care about is minimizing the length of our code, this third solution is better still!","07009ca2":"# Loops\n\nLoops are a way to repeatedly execute some code. Here's an example:","475ca63d":"## Extra Notes\n```python\nWHILE LOOP WITH BREAK & CONTINUE\n=====\n# NOTE: MAKE SURE YOU HAVE A CONDITION THAT CAN CEASE THE LOOPING \n# IF STUCK IN A INFINITY LOOPING, PRESS `CTRL + C` TO STOP THE PROGRAM\n\n# Indefinite loop\nwhile True:\n\tline = raw_input(\"> \") # For python 3 change to input()\n\tif(line[0] == '#'):\n\t\tcontinue # Skip the below code and continue the next loop\n\tif line == 'done':\n\t\tbreak\n\tprint(line)\n\nprint('Done!')\n\nExample 2:\ncounter = 5\n\nwhile counter > 0:\n\tprint(counter)\n\tcounter--\n\nprint('Blast off!')\n\n# PRIME FACTOR\ndef print_prime_factors(number):\n  # Start with two, which is the first prime\n  factor = 2\n  # Keep going until the factor is larger than the number\n  while factor <= number:\n    # Check if factor is a divisor of number\n    if number % factor == 0:\n      # If it is, print it and divide the original number\n      print(factor)\n      number = number \/ factor\n    else:\n      # If it's not, increment the factor by one\n      factor += 1\n\n  return \"Done\"\n\nprint_prime_factors(100)\n# Should print 2,2,5,5\n\nFOR LOOPS\n====\n# Definite loop\n\nfor i in [5,4,3,2,1]:\n\tprint(i)\n\nprint('Blast Off')\n\nExample 2:\nfor i in range(10):\n\tprint(i)\n\nExample 3:\n# Print 5 until 11\nfor i in range(5, 12):\n\tprint(i)\n\nfriends = ['John', 'Sarah', 'Albert']\n\nfor friend in friends:\n\tprint('Hello', friend)\n\nExample 4:\nfor i in range(2, 10, 2):\n\tprint(i, end=\" \")\n# Output: 2 4 6 8\n\nExample 5: Looping through each of the letter in a string\nfor letter in \"abc\":\n    print(letter)\n\"\"\"\na\nb\nc\n\"\"\"\n\n# BREAK in FOR LOOP: Stop the for loop immediately\nnum = [1,2,3,4,5]\nfind = 3\nfor i in num:\n    if i == find:\n        print(\"found!\")\n        break;\n    print(i)\n\n\"\"\"\n1\n2\nfound!\n\"\"\"\n\n# CONTINUE in FOR LOOP: Skipping the rest of the code below the continue statement and continue the next loop\nnum = [1,2,3,4,5]\nfind = 3\nfor i in num:\n    if i == find:\n        print(\"found!\")\n        continue;\n    print(i)\n\n\"\"\"\n1\n2\nfound!\n4\n5\n\"\"\"\n\n# Factorial using For Loop\nfactorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n\nprint(factorial(4)) # should return 24\nprint(factorial(5)) # should return 120\n\"\"\"\nOther way #1:\nn = 1\nfib = 1\nfor i in range(2, n+1): # Without looping the 1\n    fib *= i\nprint(fib)\n\nOther way #2:\ndef factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result\n\"\"\"\n\n# Using recursive method\ndef fac(n, total=1):\n    if n == 1: return total\n    else: return fac(n-1, total*n)\nprint(fac(5)) # Output: 120\n```","f40d6673":"(Continuing the SQL analogy, you could think of these three lines as SELECT, FROM, and WHERE)\n\nThe expression on the left doesn't technically have to involve the loop variable (though it'd be pretty unusual for it not to). What do you think the expression below will evaluate to? Press the 'output' button to check. ","f44d3e48":"We can also add an `if` condition:","96be6ee6":"### range()\n\n`range()` is a function that returns a sequence of numbers. It turns out to be very useful for writing loops.\n\nFor example, if we want to repeat some action 5 times:","3df04c24":"Here's a solution using a list comprehension:","b86876b2":"List comprehensions combined with functions like `min`, `max`, and `sum` can lead to impressive one-line solutions for problems that would otherwise require several lines of code. \n\nFor example, compare the following two cells of code that do the same thing.\n","5eb65d25":"People usually write these on a single line, but you might find the structure clearer when it's split up over 3 lines:","d40759e4":"# Your Turn\n\nYou know the deal at this point. We have some **[fun coding challenges](https:\/\/www.kaggle.com\/kernels\/fork\/1275177)** for you. This next set of coding problems is shorter, so try it now.","27ee943d":"Here's how we would do the same thing without a list comprehension:","195807e0":"The ``for`` loop specifies \n- the variable name to use (in this case, `planet`)\n- the set of values to loop over (in this case, `planets`)\n\nYou use the word \"``in``\" to link them together.\n\nThe object to the right of the \"``in``\" can be any object that supports iteration. Basically, if it can be thought of as a group of things, you can probably loop over it. In addition to lists, we can iterate over the elements of a tuple:","4a49eaf8":"## While loops\nThe other type of loop in Python is a ``while`` loop, which iterates until some condition is met:","bad6c041":"(If you're familiar with SQL, you might think of this as being like a \"WHERE\" clause)\n\nHere's an example of filtering with an `if` condition *and* applying some transformation to the loop variable:","642698f4":"The argument of the ``while`` loop is evaluated as a boolean statement, and the loop is executed until the statement evaluates to False."}}