{"cell_type":{"81967593":"code","97951525":"code","dc6e07da":"code","0983aa49":"code","8273c163":"code","f7cff11b":"code","30657646":"code","00b3dc1f":"code","73ba8f43":"code","25f92bea":"code","f08d10d2":"code","62cb0dbf":"code","bbabf835":"code","6b2e401b":"code","ce2482dc":"code","469412d4":"code","42bc0e7f":"code","6cc8ce35":"code","6f903a3c":"code","07a64ca9":"code","d394ebbb":"code","696cc325":"code","28da7541":"code","9f408241":"code","53245749":"code","68ffa8ef":"code","0f86cf98":"code","edc06e57":"code","15e1c0f0":"code","b778d096":"code","8bbb17f9":"code","6d634f7b":"code","00926ddb":"code","ee6958f8":"code","5636afe5":"code","52f26f5b":"code","39226568":"code","5647c59d":"code","b6478710":"code","5c7a58f4":"code","ee3a6c2d":"code","ca65f006":"code","6a0e07b4":"code","1aa8c797":"code","b0f7e1b2":"code","7b4ce383":"code","02ee0f12":"code","6e11350a":"code","f9a6360a":"code","ce20df26":"code","97d79629":"code","85f7c02e":"code","7c62c564":"code","52bc54c7":"code","3645c375":"code","f87fce26":"code","10619967":"code","5e3a6c82":"code","4aaa74e2":"code","0f5cc688":"code","f5986abf":"code","945d2f2e":"markdown","c8773d88":"markdown","dc5db00c":"markdown","8e23be20":"markdown","5c2caafa":"markdown","c33a0da1":"markdown","e3599635":"markdown"},"source":{"81967593":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","97951525":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\nimport warnings\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', None)","dc6e07da":"#loading the customer data, buy scooter and the test data\ncustomer = pd.read_csv('\/kaggle\/input\/dscmeetup3\/CustomerInfo.csv')\nbuyscooter = pd.read_csv('\/kaggle\/input\/dscmeetup3\/buyscooter.csv')\ntestdata = pd.read_csv('\/kaggle\/input\/dscmeetup3\/testdata.csv')\ntest_copy = testdata.copy()","0983aa49":"customer.head()","8273c163":"buyscooter.head()","f7cff11b":"testdata.head()","30657646":"\nprint('we have', customer.shape[0], 'rows and', customer.shape[1], 'columns in Customer Info')\nprint(\"==========================================================\")\nprint('we have', buyscooter.shape[0], 'rows and', buyscooter.shape[1], 'columns in Buy scooter data')\nprint(\"==========================================================\")\nprint('we have', testdata.shape[0], 'rows and', testdata.shape[1], 'columns in test data')","00b3dc1f":"merged_data = customer.merge(buyscooter)","73ba8f43":"merged_data.head()","25f92bea":"#Create checking point\ndf = merged_data.copy()","f08d10d2":"df.columns","62cb0dbf":"df.describe().transpose()","bbabf835":"df['Gender'] = df['Gender'].replace({'M': 'Male', 'F': 'Female'})","6b2e401b":"df.Gender.value_counts()","ce2482dc":"\ndf['MaritalStatus'] = df.MaritalStatus.replace({'M': 'Married', 'S': 'Single'})","469412d4":"df.MaritalStatus.value_counts()","42bc0e7f":"df.Education.value_counts()\n#print('------------------------'),\n#df.Occupation.value_counts()","6cc8ce35":"object_data = df.dtypes[df.dtypes == 'object'].count()\ncategorical_data = df.dtypes[df.dtypes == 'int64'].count()\ncontinuous_data = df.dtypes[df.dtypes == 'float64'].count()","6f903a3c":"print('we have {} object data'.format(object_data))\nprint('we have {} categorical data'.format(categorical_data))\nprint('we have {} continuous data'.format(continuous_data))","07a64ca9":"categorical_features = df.dtypes[df.dtypes == 'object'].index\ncontinuous_features = df.dtypes[df.dtypes == 'int64'].index","d394ebbb":"# Counts on categorical columns\nfor feature in categorical_features:\n    print(feature,':')\n    print(df[feature].value_counts())\n    print('----------------------------')","696cc325":"#Columns list\ndf.columns","28da7541":"# Columns to drop\ntarget = df['BuyScooter']\ntrain_test = [df, testdata]\ndrop_col = ['CustomerID', 'FirstName', 'MiddleName', 'LastName','City',\n       'StateProvinceName','PostalCode', 'PhoneNumber']","9f408241":"for dataset in train_test:\n    dataset.drop(drop_col, axis=1, inplace = True)","53245749":"df.columns","68ffa8ef":"df.dtypes","0f86cf98":"for dataset in train_test:\n    dataset['BirthDate'] =  pd.to_datetime(dataset['BirthDate'])","edc06e57":"df.dtypes","15e1c0f0":"testdata.dtypes","b778d096":"testdata.head()","8bbb17f9":"# Calculating Age","6d634f7b":"for dataset in train_test:\n        dataset['TotalAsset'] = dataset['HomeOwnerFlag']+dataset['NumberCarsOwned']","00926ddb":"for dataset in train_test:\n    if (dataset['TotalChildren']==0).all():\n        dataset['ChildIncomeR2'] = dataset['YearyIncome']\/1.0\n    else:\n        dataset['ChildIncomeR2'] = dataset['YearlyIncome']\/dataset['TotalChildren']","ee6958f8":"df['Education'] = df['Education'].replace({'Partial High School': 1, 'High School':2, 'Partial College':3, 'Bachelors':4, 'Bachelors ':4,'Graduate Degree':5}) \ntestdata['Education'] = testdata['Education'].replace({'Partial High School': 1, 'High School':2, 'Partial College':3, 'Bachelors':4, 'Bachelors ':4, 'Graduate Degree':5})\ntrain = df.copy()\ntest = testdata.copy()","5636afe5":"testdata.head()","52f26f5b":"df.TotalChildren.describe()","39226568":"# from datetime import date\n# def calculate_age(born):\n#     today = datetime.date.today()\n#     return today.year - born - (today.month, today.day) < (born.month, born.day)\n\n# df['Age'] = df['BirthDate'].apply(calculate_age)\n\n# # for dataset in train_test:\n# #     dataset['Age'] = dataset['BirthDate'].apply(calculate_age)","5647c59d":"categorical_features = df.dtypes[df.dtypes == 'object'].index\ncontinuous_features = df.dtypes[df.dtypes == 'int64'].index","b6478710":"# Counts on categorical columns\nfor feature in categorical_features:\n    print(feature,':')\n    print(df[feature].value_counts())\n    print('----------------------------')","5c7a58f4":"df.Education.value_counts()","ee3a6c2d":"for dataset in train_test:\n    dataset.drop(['BirthDate','ChildIncomeR2'], axis=1, inplace = True)","ca65f006":"df.head()","6a0e07b4":"testdata = pd.get_dummies(testdata)\ndf = pd.get_dummies(df)","1aa8c797":"df.head()","b0f7e1b2":"df.shape, testdata.shape","7b4ce383":"test.Education.value_counts()","02ee0f12":"test.columns","6e11350a":"testdata.head()","f9a6360a":"features = df.drop('BuyScooter', axis=1)\ntarget = df.BuyScooter","ce20df26":"features.shape, testdata.shape","97d79629":"from sklearn.model_selection import train_test_split","85f7c02e":"X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=.20, random_state=0)","7c62c564":"# Logistic Regression\nfrom sklearn.linear_model import LogisticRegression","52bc54c7":"reg = LogisticRegression()\nreg.fit(X_train, y_train)\nprint(\"Train score: \", reg.score(X_train, y_train))\nprint(\"Validation Score :\",reg.score(X_test, y_test))","3645c375":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(criterion = \"entropy\", max_depth = 3)\ndt.fit(X_train, y_train)\nprint(\"Train score: \", dt.score(X_train, y_train))\nprint(\"Validation Score :\",dt.score(X_test, y_test))","f87fce26":"merged_data.shape, ","10619967":"prediction = reg.predict(testdata)\n\nsubmission = pd.DataFrame({'CustomerID': test_copy['CustomerID'],\n                          \"BuyScooter\": prediction})","5e3a6c82":"# Decision Tree\nprediction2 = dt.predict(testdata)\n\nsubmission2 = pd.DataFrame({'CustomerID': test_copy['CustomerID'],\n                          \"BuyScooter\": prediction2})\nsubmission2.to_csv('Submission4.csv', index=False)","4aaa74e2":"submission.head()","0f5cc688":"submission.to_csv('Submission.csv', index=False)","f5986abf":"!kaggle competitions submissions -c dscmeetup3 -f submission.csv -m \"Notes\"","945d2f2e":"# Feature Engineering","c8773d88":"## Decision Tree Classifier","dc5db00c":"# Joining buyscooter and customer data","8e23be20":"- Education :\n- Bachelors              4191\n- Partial College        3905\n- High School            2580\n- Graduate Degree        2547\n- Partial High School    1181","5c2caafa":"# Train Test Split","c33a0da1":"# Checking Point`","e3599635":"# solving the scooter challenge"}}