{"cell_type":{"e0a5bfa4":"code","987c6595":"code","2751ddf0":"code","53207a20":"code","c761776f":"code","b788f4df":"code","cbf71425":"code","425f46f4":"code","6aa0e6bb":"code","9952d231":"code","ed239f35":"code","2b9359ce":"code","cc999d07":"code","421c89c3":"code","7d46a91c":"code","b906118e":"code","de260179":"code","883870fd":"code","6e0f374f":"code","deb1c948":"code","91d1485a":"code","b71054d3":"code","bd149aa2":"code","eef8dc44":"code","d5ac9508":"code","76808ca4":"code","c2e4563c":"code","fe0b8c47":"code","ae8a081a":"code","3e4bb7cd":"code","c7f8dfa8":"code","2fe1166e":"code","f902f9ad":"code","22c867ae":"code","d334af43":"code","73747190":"code","821d4190":"code","81512df3":"code","ccece87a":"code","543bc3ee":"markdown","2a90bfb0":"markdown","f707eac9":"markdown","4d709834":"markdown","8336847e":"markdown","9bd54460":"markdown","f8c45072":"markdown","8eaffba4":"markdown","1f920867":"markdown","48180c31":"markdown","9afd5d89":"markdown","c321dddb":"markdown","12ed8c90":"markdown","14430b2e":"markdown","5454274e":"markdown","61010132":"markdown","1167bd1c":"markdown","d61b59ad":"markdown","4aaa8fb4":"markdown","ca2e8ec1":"markdown","25ff723c":"markdown","3600e6a3":"markdown","d8c533f0":"markdown","d00ce7ea":"markdown","49d13bc3":"markdown","bd01e417":"markdown","b683f2f0":"markdown","7fc1ca6b":"markdown","883e3dc8":"markdown","1537d492":"markdown","808c7a3a":"markdown","665de43a":"markdown"},"source":{"e0a5bfa4":"# OS\nimport os\n\n# Data format\nimport datetime\n\n# Tying\nfrom copy import copy\n\n# Data processing\nimport pandas as pd\n\n# Data virtualisation\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport plotly.express as px\n\n# Widgets\nimport ipywidgets as widgets\n\n# Exporter\nfrom inspect import getsource\n\n# Math and model\nimport numpy as np\nimport scipy\nfrom sklearn.model_selection import KFold\nfrom sklearn.linear_model import LinearRegression\n\n# Normaliser\nfrom scipy.special import (\n    boxcox,\n    inv_boxcox\n)","987c6595":"Train_data = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\nTest_data = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')\n\n\n# Copy dataframes to test pipeline\ntemp_Train_data = copy(Train_data)\ntemp_Test_data = copy(Test_data)\n\n# Make pipeline folder\ntry:\n    os.makedirs('pipeline')\nexcept FileExistsError:\n    pass","2751ddf0":"# Set up for tabbed output\n# Initial tab object\nkaggle_data_tabs = widgets.Tab()\nkaggle_data_tabs.children = list([widgets.Output(), widgets.Output()]) # Add 2 tabs in the widget\n\n# Add train\nkaggle_data_tabs.set_title(0, 'Train')\nwith kaggle_data_tabs.children[0]:\n    display(Train_data)\n\n# Add test\nkaggle_data_tabs.set_title(1, 'Test')\nwith kaggle_data_tabs.children[1]:\n    display(Test_data)\ndisplay(kaggle_data_tabs)","53207a20":"sns.pairplot(temp_Train_data)","c761776f":"# set up function\ndef plot_parallel_coordinate(target: str):\n    \"\"\"\n    Plot parallel coordinate according to the specified\n    \"\"\"\n    table=Train_data\n    fig = px.parallel_coordinates(\n        pd.concat(\n            [table.drop(\n                [\n                    'target_benzene',\n                    'target_nitrogen_oxides',\n                    'target_carbon_monoxide'\n                ],\n                axis=1\n            ),\n            table[[target]]], axis=1\n        ),\n        color=target,\n        labels={\n            'target_benzene': 'Benzene',\n            'target_nitrogen_oxides': 'Nitrogen oxides',\n            \"target_carbon_monoxide\": \"Carbon monoxide\"\n        },\n        color_continuous_scale=px.colors.diverging.Tealrose,\n        color_continuous_midpoint=2,\n        width=800,\n        height=500,\n        range_color=[\n            min(table[target]),\n            max(table[target])\n        ]\n    )\n\n    fig.show()\n","b788f4df":"plot_parallel_coordinate('target_benzene')","cbf71425":"plot_parallel_coordinate('target_nitrogen_oxides')","425f46f4":"plot_parallel_coordinate('target_carbon_monoxide')","6aa0e6bb":"def format_date_time(table: pd.DataFrame):\n    \"\"\"\n    :params:\n    table (pd.DataFrame): An input dataframe to reformat\n    :return:\n    \"\"\"\n    table.date_time = table.date_time.apply(\n        lambda date_iso: datetime.datetime.fromisoformat(date_iso)\n    )\n    return table\n\n\ntemp_Train_data = format_date_time(temp_Train_data)\ntemp_Test_data = format_date_time(temp_Test_data)\n\n\n# Save to pipeline\nwith open('pipeline\/01_format_date_time.py', 'a+') as f:\n    f.write(getsource(format_date_time))","9952d231":"null_value_report = pd.DataFrame()\n\n# Train\nfor col in temp_Train_data.columns:\n    Train_null_value = sum(temp_Train_data[col].isnull())\n    null_value_report.loc[col, 'Train'] = Train_null_value\n    \n# Test\nfor col in temp_Test_data.columns:\n    Test_null_value = sum(temp_Test_data[col].isnull())\n    null_value_report.loc[col, 'Test'] = Test_null_value\n\nnull_value_report","ed239f35":"unique_value_report = pd.DataFrame()\n\n# Train\nfor col in temp_Train_data.columns:\n    Train_unique_value = len(set(temp_Train_data[col]))\n    unique_value_report.loc[col, 'Train'] = Train_unique_value\n\n# Test\nfor col in temp_Test_data.columns:\n    Test_unique_value = len(set(temp_Test_data[col]))\n    unique_value_report.loc[col, 'Test'] = Test_unique_value\n\nunique_value_report","2b9359ce":"# Get mean\ngrouped = temp_Train_data.groupby(\n    temp_Train_data.date_time.map(lambda t: t.hour)\n)\ngroup_hour_mean = grouped.mean()\ngroup_hour_mean.index = group_hour_mean.index.rename('hour')\n\n\ngroup_hour_var = grouped.var()\ngroup_hour_var.index = group_hour_var.index.rename('hour')\n\n# Set up for tabbed output\n# Initial tab object\nkaggle_data_tabs = widgets.Tab()\nkaggle_data_tabs.children = [widgets.Output(), widgets.Output()] # Add 2 tabs in the widget\n# Add train\nkaggle_data_tabs.set_title(0, 'Mean')\nwith kaggle_data_tabs.children[0]:\n    display(group_hour_mean.head(5))\n\n# Add test\nkaggle_data_tabs.set_title(1, 'Var')\nwith kaggle_data_tabs.children[1]:\n    display(group_hour_var.head(5))\ndisplay(kaggle_data_tabs)","cc999d07":"plot = grouped.boxplot(rot=45, fontsize=24, figsize=(90,100), layout=(12,2), sharex=True)\n_ = [ax_tmp.set_xlabel('') for ax_tmp in np.asarray(plot).reshape(-1)]\n_ = [\n        ax_tmp.set_title(f'Hour: {hour}', fontsize=36)\n        for hour, ax_tmp\n        in enumerate(np.asarray(plot).reshape(-1))\n]\nfig = np.asarray(plot).reshape(-1)[0].get_figure()\nplt.show()","421c89c3":"%matplotlib inline\n# Take hour from date time\ntemp_Train_data['hour'] = temp_Train_data.date_time.map(lambda t: t.hour)\n_ = temp_Train_data.boxplot(by='hour', fontsize=24, figsize=(90,100), layout=(12,2))","7d46a91c":"%matplotlib inline\nplt.ioff()\n\nplot = temp_Train_data[\n    ['hour'] + ['target_carbon_monoxide', 'target_benzene']].boxplot(\n    by='hour',\n    fontsize=8,\n    figsize=(16, 10),\n    layout=(1, 2),\n    rot=45\n)\nfig = np.asarray(plot).reshape(-1)[0].get_figure()\nfig.suptitle('Scope plot', size=12)\nplt.style.context('dark_background')\nplt.show()","b906118e":"temp_Train_data.drop(['date_time', 'hour'], axis=1).columns","de260179":"for col in temp_Train_data.drop(['date_time', 'hour'], axis=1).columns:\n    col_at = []\n    for hour in range(24):\n        col_at.append(\n            temp_Train_data\\\n            [temp_Train_data['hour'] == hour]\\\n            [col]\n        )\n    print(f\"Columns {col}: \")\n    print(scipy.stats.f_oneway(*col_at))","883870fd":"def take_hour(table: pd.DataFrame):\n    \"\"\"\n    Extract hour\n    \"\"\"\n    table['hour'] = table.date_time.map(lambda t: t.hour)\n    return table\n\n\ndef take_month(table: pd.DataFrame):\n    \"\"\"\n    Extract month\n    \"\"\"\n    table['month'] = table.date_time.map(lambda t: t.month)\n    return table\n\n\ntemp_Train_data = take_hour(temp_Train_data)\ntemp_Test_data = take_hour(temp_Test_data)\n\n\n# Save to pipeline\nwith open('pipeline\/02_take_hour.py', 'a+') as f:\n    f.write(getsource(take_hour))\n","6e0f374f":"temp_Train_data.boxplot(\n    column=[\n        'target_carbon_monoxide',\n        'target_benzene',\n        'target_nitrogen_oxides'\n    ]\n)\nplt.title(\"Observe outlier using box plot\")","deb1c948":"def iqr_filter(table: pd.DataFrame):\n    \"\"\"\n    Filter outlier using IQR\n    Train data only\n    \"\"\"\n    def iqr_filter_target(target: str):\n        Q1 = table[target].quantile(0.25)\n        Q3 = table[target].quantile(0.75)\n        IQR = Q3 - Q1\n\n        filtered = table.query(\n            f'(@Q1 - 1.25 * @IQR) <= {target} <= (@Q3 + 1.25 * @IQR)'\n        )\n        return filtered\n\n    table = iqr_filter_target('target_carbon_monoxide')\n    table = iqr_filter_target('target_benzene')\n    table = iqr_filter_target('target_nitrogen_oxides')\n    \n    return table\n\n\ntemp_Train_data = iqr_filter(temp_Train_data)\nwith open('pipeline\/03_iqr_filter.py', 'a+') as f:\n    f.write(getsource(iqr_filter))","91d1485a":"temp_Train_data.boxplot(\n    column=[\n        'target_carbon_monoxide',\n        'target_benzene',\n        'target_nitrogen_oxides'\n    ]\n)\nplt.title(\"Box plot after filtering\")","b71054d3":"def boxcox_normalise(table: pd.DataFrame):\n    \"\"\"\n    Boxcox normalisation\n    \"\"\"\n    boxcox_table = pd.DataFrame()\n\n    skip_cols = [\n        # I don't want to normalise time, I don't think it's useful\n        'date_time',\n        'hour',\n        'month',\n        # These columns seems normal already\n        'relative_humidity',\n        # Negativable\n        'deg_C'\n    ]\n    for col in table.columns:\n        if col not in skip_cols:\n            boxcox_table[col] = boxcox(table[col], 0.0001)\n        else:\n            boxcox_table[col] = table[col]\n    return boxcox_table\n\n\nboxcox_Train_data = boxcox_normalise(temp_Train_data)\nboxcox_Test_data = boxcox_normalise(temp_Test_data)\n\nwith open('pipeline\/04_boxcox_normalise.py', 'a+') as f:\n    f.write(getsource(boxcox_normalise))","bd149aa2":"boxcox_Train_data.boxplot(\n    column=[\n        'target_carbon_monoxide',\n        'target_benzene',\n        'target_nitrogen_oxides'\n    ]\n)","eef8dc44":"# Sort columns\ndef sort_columns(table: pd.DataFrame):\n    \"\"\"\n    Sort columns; train features only\n    \"\"\"\n    table = pd.concat([\n        table.drop(\n            ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'],\n            axis=1\n        ),\n        table[['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]\n    ], axis=1)\n    \n    return table\n\nboxcox_Train_data = sort_columns(boxcox_Train_data)\n\nwith open('pipeline\/03.1_sort_columns.py', 'a+') as f:\n    f.write(getsource(sort_columns))","d5ac9508":"boxcox_Train_data.boxplot(\n    column=[\n        'target_carbon_monoxide',\n        'target_benzene',\n        'target_nitrogen_oxides'\n    ]\n)","76808ca4":"boxcox_Train_data = iqr_filter(boxcox_Train_data)\nboxcox_Train_data.boxplot(\n    column=[\n        'target_carbon_monoxide',\n        'target_benzene',\n        'target_nitrogen_oxides'\n    ]\n)\n","c2e4563c":"sns.pairplot(boxcox_Train_data)","fe0b8c47":"try:\n    boxcox_Train_data.set_index('date_time')\nexcept KeyError:\n    pass\nnum_fold = 5\nkf = KFold(n_splits=num_fold, shuffle=True, random_state=1234)\nkf.get_n_splits(boxcox_Train_data)\n\nprint(kf)\n\nK_FOLD = []\nfor train_index, test_index in kf.split(boxcox_Train_data):\n    print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n    K_FOLD.append((train_index, test_index))","ae8a081a":"try:\n    boxcox_Train_data.drop('test', inplace=True)\nexcept KeyError:\n    pass","3e4bb7cd":"try:\n    boxcox_Train_data = boxcox_Train_data.set_index('date_time')\nexcept KeyError:\n    pass\n\ndef RMSLE(pred, act):\n    pred = inv_boxcox(pred, 0.0001)\n    act = inv_boxcox(act, 0.0001)\n    return (np.mean(\n        (np.log(pred + 1) - np.log(act + 1))**2\n    )) ** 0.5\n\n\nmodels = []\nfor k, (Train, Test) in enumerate(K_FOLD):\n    print(f\"K: {k}\")\n    y_columns = list(\n        boxcox_Train_data.columns[\n            boxcox_Train_data.columns.str.startswith('target')\n        ]\n    )\n    X_Train = boxcox_Train_data.iloc[Train].drop(y_columns, axis=1)\n    y_Train = boxcox_Train_data.iloc[Train][y_columns]\n\n    X_Test = boxcox_Train_data.iloc[Test].drop(y_columns, axis=1)\n    y_Test = boxcox_Train_data.iloc[Test][y_columns]\n\n    reg_carbon_monoxide = LinearRegression().fit(X_Train, y_Train['target_carbon_monoxide'])\n\n    train_score = reg_carbon_monoxide.score(X_Train, y_Train['target_carbon_monoxide'])\n    test_score = reg_carbon_monoxide.score(X_Test, y_Test['target_carbon_monoxide'])\n    \n    predition = reg_carbon_monoxide.predict(X_Test)\n    RMSLE_score = RMSLE(predition, y_Test['target_carbon_monoxide'])\n\n    print('Target: Carbon Monoxide')\n    print(f'Train score: {train_score}')\n    print(f'Test score: {test_score}')\n    print(f'RMSLE: {RMSLE_score}')\n    print('-' * 36)\n\n    reg_benzene = LinearRegression().fit(X_Train, y_Train['target_benzene'])\n    train_score = reg_benzene.score(X_Train, y_Train['target_benzene'])\n    test_score = reg_benzene.score(X_Test, y_Test['target_benzene'])\n    \n    predition = reg_benzene.predict(X_Test)\n    RMSLE_score = RMSLE(predition, y_Test['target_benzene'])\n\n    print('Target: Benzene')\n    print(f'Train score: {train_score}')\n    print(f'Test score: {test_score}')\n    print(f'RMSLE: {RMSLE_score}')\n    print('-' * 36)\n\n\n    reg_nitrogen_oxides = LinearRegression().fit(X_Train, y_Train['target_nitrogen_oxides'])\n    train_score = reg_nitrogen_oxides.score(X_Train, y_Train['target_nitrogen_oxides'])\n    test_score = reg_nitrogen_oxides.score(X_Test, y_Test['target_nitrogen_oxides'])\n    \n    predition = reg_nitrogen_oxides.predict(X_Test)\n    RMSLE_score = RMSLE(predition, y_Test['target_carbon_monoxide'])\n\n    print('Target: Nitrogen oxides ')\n    print(f'Train score: {train_score}')\n    print(f'Test score: {test_score}')\n    print(f'RMSLE: {RMSLE_score}')\n    print('-' * 36)\n\n    model = {\n        'carbon_monoxide': reg_carbon_monoxide,\n        'benzene': reg_benzene,\n        'nitrogen_oxides': reg_nitrogen_oxides\n    }\n    models.append(model)\n    print('=' * 36)","c7f8dfa8":"submission = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')\nsubmission = submission.set_index('date_time')","2fe1166e":"submission['target_carbon_monoxide'] = 0\nsubmission['target_benzene'] = 0\nsubmission['target_nitrogen_oxides'] = 0","f902f9ad":"try:\n    boxcox_Test_data = boxcox_Test_data.set_index('date_time')\nexcept KeyError:\n    pass\n\nfor k in range(num_fold):\n    submission['target_carbon_monoxide'] += models[k]['carbon_monoxide'].predict(boxcox_Test_data)\/num_fold\n    submission['target_benzene'] += models[k]['benzene'].predict(boxcox_Test_data)\/num_fold\n    submission['target_nitrogen_oxides'] += models[k]['nitrogen_oxides'].predict(boxcox_Test_data)\/num_fold","22c867ae":"submission = inv_boxcox(submission, 0.0001)\nsubmission.to_csv('submission.csv')","d334af43":"def preprocess_train(table: pd.DataFrame):\n    table = format_date_time(table)\n    table = take_hour(table)\n    table = iqr_filter(table)\n    table = boxcox_normalise(table)\n    table = iqr_filter(table)\n    table = sort_columns(table)\n    table = table.set_index('date_time')\n    return table\n\n\nwith open('pipeline\/preprocess_train.py', 'a+') as f:\n    f.write(getsource(preprocess_train))","73747190":"def preprocess_test(table: pd.DataFrame):\n    table = format_date_time(table)\n    table = take_hour(table)\n    table = boxcox_normalise(table)\n    table = table.set_index('date_time')\n    return table\n\n\nwith open('pipeline\/preprocess_test.py', 'a+') as f:\n    f.write(getsource(preprocess_test))","821d4190":"Train_data = preprocess_train(Train_data)\n\nassert all(boxcox_Train_data.columns == Train_data.columns)\nassert (boxcox_Train_data.shape == Train_data.shape)\nassert np.all(boxcox_Train_data.values == Train_data.values)","81512df3":"Test_data = preprocess_test(Test_data)","ccece87a":"assert boxcox_Test_data.shape == Test_data.shape\nassert all(boxcox_Test_data.columns == Test_data.columns)\nassert np.all(Test_data.values == boxcox_Test_data.values)","543bc3ee":"# Modeling","2a90bfb0":"#### Benzene","f707eac9":"### Ono WAY ANOVA\n\nOne WAY ANOVA  (one-way analysis of variance ) is another to check out whether a feature is significantly differently varied by group samples.\n<\/br>\nFirst, we set hypothesis that there no differrent between each hour. If p < 0.05, we reject this hypothesis.\n\nref. \n* https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.stats.f_oneway.html\n* https:\/\/en.wikipedia.org\/wiki\/One-way_analysis_of_variance","4d709834":"<a id=\"linear-regression\"><\/a>\n## Linear regression","8336847e":"With this scale `hour`seems more affect to `target_*`. Also, One Way ANOVA testing suggests different hour significantly varies other features. That leads us data normalisation.\n<\/br>\nBut before we moving next, we add `hour` extracttion columne to the pipeline.\n* Note: I don't use `month` because there are some monthes of which samplings are too low in the table.","9bd54460":"#### nitrogen_oxides","f8c45072":"### Check catagorality","8eaffba4":"<a id=\"parallel-coordinates\"><\/a>\n### Parallel Coordinates\n\n***This is an interectable section. Feel free to play around with following plost i.e. moveing columns or scoping region***","1f920867":"<a id=\"roughly-virtualise-data\"><\/a>\n## Roughly virtualise data\n\nIn this section, we try pairploting train data to see relations.","48180c31":"# Table of Contents\n<a id=\"table-of-contents\"><\/a>\n- [1 Introduction](#Introduction)\n- [2 Import modules](#import-modules)\n    - [2.1 Roughly virsualise data](#roughly-virtualise-data)\n    - [2.2 Preprocessing](#preprocessing)\n    - [2.3 Explore data](#explore-data)\n- [3 Normalisation](#normalisation)\n    - [3.1 Boxcox](#boxcox)\n    - [3.2 Detect outlier using IQR](#detect-outlier-using-iqr)\n- [4 Modeling](#modeling)\n    - [4.1 Initial cross validation](#initiall-cross-validation)\n    - [4.2 Linear regression](#linear-regression)\n    - [4.3 Evaluattion](#evaluation)\n- [5 Final](#final)\n    - [5.1 Export pipeline](#export-pipeline)\n    - [5.2 Make submission](#make-submission)","9afd5d89":"### Check null value","c321dddb":"***Lucky!*** We don't find any  null value here!","12ed8c90":"#### Carbon monoxide","14430b2e":"<a id=\"boxcox\"><\/a>\n## Boxcox\n\nIn this section, we woill use `boxcox` to normalise numerical data where `boxcox` is a transformation which can convert non-normal variable to normal variable\n* You may try any other normalisers which can make better results","5454274e":"<a id=\"normalisation\"><\/a>\n# Normalisation","61010132":"#### Final visualisation","1167bd1c":"<a id=\"final\"><\/a>\n# Final\n<a id=\"make-submission\"><\/a>\n## Make submission","d61b59ad":"<a id=\"preprocessing\"><\/a>\n## Preprocessing\n\n### Format datetime","4aaa8fb4":"### Pairplot","ca2e8ec1":"<a id=\"import-modules\"><\/a>\n# Import modules","25ff723c":"<a id=\"detect-outlier-using-iqr\"><\/a>\n## Detect outlier using IQR","3600e6a3":"Also, they are seem no categorial column in this dataset.","d8c533f0":"Time in each day may affect, and that we will need to observe distribution value of each hour","d00ce7ea":"## Fiter outlier","49d13bc3":"First, we observer outlier using boxplot","bd01e417":"<a id=\"export\"><\/a>\n## Export\n\nFinally, we have preprocessin pipeline for further use. In this section, we try save and load pipeline.","b683f2f0":"<a id=\"initial-cross-validation\"><\/a>\n## Initial cross validation","7fc1ca6b":"<a id=\"roughly-pairplot\"><\/a>\n### Quantile Pairplot","883e3dc8":"<a id=\"explore-data\"><\/a>\n## Explore data","1537d492":"#### Final filter","808c7a3a":"This is sad since you I quite believe that `hour` is related to `target_*`, but plots show that it just slightly affects. So, I will try take more focus on `target_*`","665de43a":"### Seasonality check"}}