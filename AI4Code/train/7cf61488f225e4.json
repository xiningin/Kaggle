{"cell_type":{"be81b582":"code","7a18c49f":"code","81c8b228":"code","3e625b55":"code","bf0d3aae":"code","fd85436e":"code","60bc34c1":"code","9c2690ca":"code","b6e5482f":"code","a8a87220":"code","2a1dba95":"code","b1d2cf55":"code","1be87d2b":"code","fd3779f3":"code","399b19ff":"code","662811d0":"code","3ed3b7f6":"code","9ec05c1b":"code","83136144":"code","7d36c3c4":"code","3c6d46ea":"code","6d3331e7":"code","802abb7b":"code","e104ef82":"code","c8ac4818":"code","de833b00":"markdown","c3e3390b":"markdown","61a600a0":"markdown","528c6295":"markdown","e236a977":"markdown","650b4655":"markdown","74dd0f8d":"markdown","770a6cef":"markdown","eed43329":"markdown"},"source":{"be81b582":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7a18c49f":"url = 'https:\/\/github.com\/LISHarvard\/moa_challenge\/blob\/master\/gene_mapping.csv'\nurl = 'https:\/\/raw.githubusercontent.com\/LISHarvard\/moa_challenge\/master\/gene_mapping.csv'\n# Official link taken from: https:\/\/www.kaggle.com\/c\/lish-moa\/discussion\/207259\n\n# Old - Entrez ID, New - used in competition\n\ndf = pd.read_csv(url, sep = ',')\ndf","81c8b228":"pip install mygene\n","3e625b55":"import mygene","bf0d3aae":"mg = mygene.MyGeneInfo()\n","fd85436e":"i = 0\ng = df.iloc[i,0]\n\ng = mg.getgene(g)#\ng.keys()","60bc34c1":"g[ 'symbol']","9c2690ca":"g['type_of_gene']","b6e5482f":"g['alias']","a8a87220":"import time\nlist_genes_symbols  = []#  df.copy()\nt0 = time.time()\nfor i in range(len(df)):\n    entrez_gene_ID = df['old'].iat[i]\n    kaggle_id = df['new'].iat[i]\n    try:\n        g_inf = mg.getgene(entrez_gene_ID)\n        list_genes_symbols.append(g_inf['symbol'])\n    except:\n        print('Exception', kaggle_id,entrez_gene_ID )\n        \nprint( 'Finished. Seconds passed: ',  np.round(time.time() - t0 ,1))\nprint( list_genes_symbols )        ","2a1dba95":"import time\ngenes = df.copy()\nt0 = time.time()\nfor i in range(len(df)):\n    entrez_gene_ID = df['old'].iat[i]\n    kaggle_id = df['new'].iat[i]\n    \n    try:\n        g = mg.getgene(entrez_gene_ID)\n        #print(i,ens_id)\n        #print(g.keys())\n\n        IX = genes.index[i]\n        list1 = ['symbol',   'type_of_gene', 'map_location' ,   'name', 'entrezgene', 'alias', 'other_names'  ] \n        for k in list1:\n            if k in g.keys():\n                genes.loc[IX,k] = str(g[k])\n        if  ('genomic_pos_hg19' in g.keys()) and ( isinstance(g['genomic_pos_hg19'], dict) ):\n            for k in ['chr','start','end', 'strand' ]:\n                if k in g['genomic_pos_hg19'].keys():\n                    genes.loc[IX,k] = (g['genomic_pos_hg19'][k])\n        if 'generif' in g.keys():\n            genes.loc[IX,'count pubmed'] = len(g['generif'])\n        if 'summary' in g.keys():\n            genes.loc[IX,'summary'] = g['summary']\n    except:\n        print()\n        print('Exception')\n        print('i', i , 'entrez_gene_ID' , entrez_gene_ID, 'kaggle_id', kaggle_id )\n        pass\n    \n    if i%500 == 0:\n        print(i, np.round(time.time() - t0 ,1))\n    if i >= 10e10:\n        break\n\nprint(i, 'Finished. Seconds passed: ',  np.round(time.time() - t0 ,1))\n        \ngenes['len'] = genes['end'] - genes['start']\ngenes","b1d2cf55":"genes.to_csv('genes_info_MOA_kaggle.csv')\n","1be87d2b":"genes.head(10)\n","fd3779f3":"genes['type_of_gene'].value_counts()","399b19ff":"genes['chr' ].value_counts()","662811d0":"genes.describe()","3ed3b7f6":"import matplotlib.pyplot as plt","9ec05c1b":"plt.figure(figsize = (15,4))\nd = genes['count pubmed'].values\nplt.plot(np.sort(d)) # genes['count pubmed'].values))\nplt.title('Count pubmed')\nplt.show()\n\n\nplt.figure(figsize = (15,4))\nd = np.log10( genes['count pubmed'].values )\nplt.plot(np.sort(d)) # genes['count pubmed'].values))\nplt.title('Log10. Count pubmed')\nplt.show()\n","83136144":"\nplt.figure(figsize = (15,4))\nd = ( genes['count pubmed'].values )\nplt.hist(d, bins = 50)\nplt.title('Log10. Count pubmed')\nplt.show()\n\nplt.figure(figsize = (15,4))\nd = np.log10( genes['count pubmed'].values )\nplt.hist(d, bins = 50 )\nplt.title('Log10. Count pubmed')\nplt.show()\n","7d36c3c4":"c = 'len'\nplt.figure(figsize = (15,4))\nd = genes[c].values\nplt.plot(np.sort(d)) # genes['count pubmed'].values))\nplt.title(c)\nplt.show()\n\n\nplt.figure(figsize = (15,4))\nd = np.log10( genes[c].values )\nplt.plot(np.sort(d)) # genes['count pubmed'].values))\nplt.title('Log10. ' + c )\nplt.show()","3c6d46ea":"c = 'len'\nplt.figure(figsize = (15,4))\nd = ( genes[c].values )\nplt.hist(d, bins = 50)\nplt.title(c)\nplt.show()\n\nplt.figure(figsize = (15,4))\nd = np.log10( genes[c].values )\nplt.hist(d, bins = 50 )\nplt.title('Log10. ' + c )\nplt.show()","6d3331e7":"c = 'len'\n\ng = genes[genes[c].notnull()].sort_values(c, ascending = False)\n\nprint('Head of sorted')\nfor i in range(10): # range(len(genes)):\n    try:\n        print(i,g['symbol'].iat[i],g['len'].iat[i], g['summary'].iat[i][:180])\n    except:\n        pass\n    \nprint()\nprint('Tail of sorted')\nfor i in range(10): # range(len(genes)):\n    i2 = len(g)-i\n    try:\n        print(i2,g['symbol'].iat[i2],g['len'].iat[i2], g['summary'].iat[i2][:180])\n    except:\n        pass\n    \n","802abb7b":"c = 'count pubmed' # 'len'\n\ng = genes[genes[c].notnull()].sort_values(c, ascending = False)\n\nprint('Head of sorted')\nfor i in range(10): # range(len(genes)):\n    try:\n        print(i,g['symbol'].iat[i],g['len'].iat[i],g[c].iat[i], str(g['summary'].iat[i])[:180])\n    except:\n        pass\n    \nprint()\nprint('Tail of sorted')\nfor i in range(10): # range(len(genes)):\n    i2 = len(g)-i\n    try:\n        print(i2,g['symbol'].iat[i2],g['len'].iat[i2],g[c].iat[i2], str(g['summary'].iat[i2])[:180])\n    except:\n        pass\n    \n","e104ef82":"for i in range(50): # range(len(genes)):\n    try:\n        print(i,genes['symbol'].iat[i], genes['summary'].iat[i][:120])\n    except:\n        pass","c8ac4818":"for i in range(50): # range(len(genes)):\n    i2 = len(genes)-i\n    try:\n        print(i2,genes['symbol'].iat[i2], genes['summary'].iat[i2][:120])\n    except:\n        pass","de833b00":"# Get info on all genes from the list and save to  csv file","c3e3390b":"# Lengths of genes distribution","61a600a0":"# Print \"summary\" info on selected genes","528c6295":"# Load data with Entrez id provided by competition organizers after the end of the competition","e236a977":"# MYGENE package install and simple use example","650b4655":"# Get names of all genes","74dd0f8d":"# What is about ?\n\nGet info on the genes used in MOA kaggle competition by MYGENE Python package.\nSee https:\/\/www.kaggle.com\/alexandervc\/genes-info-with-mygene-python-package\nfor info on that package.\n\n","770a6cef":"# Show various statistics ","eed43329":"# Distribution on of count publications on genes - \"count pubmed\""}}