{"cell_type":{"30000117":"code","3d8711eb":"code","2c0a00ad":"code","d93a002f":"code","b0645bd0":"code","dde5e1e1":"code","0717052a":"code","e29dc4ed":"code","dd50281b":"code","16663ec7":"code","7eddcbcc":"code","b231414b":"code","6a651db6":"code","567b4b55":"code","d9fdc1f5":"code","903bd71b":"code","a178e45d":"code","288f1af3":"code","c8746d48":"code","f700c034":"code","f700c3a1":"code","982086c6":"code","fe2b3176":"code","5fdbc9a5":"code","d252bb56":"code","b1b5121e":"code","03d05912":"code","2000fbad":"code","007c770e":"code","b2a2674d":"code","bd6ea185":"code","7c93a6fc":"code","30ba602e":"code","177cfc1c":"code","07d5877e":"code","a6ab9e90":"code","79eba4cb":"code","401d557e":"code","d1ece570":"code","e43edc53":"code","ccdb6bf0":"markdown","fe3f94cf":"markdown","bee5fd43":"markdown","434704f1":"markdown","1999aff8":"markdown","c3cddd4a":"markdown","7b8acdd2":"markdown","2cc42f11":"markdown","c6a7b1c6":"markdown","8dc08a3e":"markdown","ac0b35a0":"markdown","cca1750b":"markdown","62b9fbfa":"markdown","35666684":"markdown","2ae16948":"markdown"},"source":{"30000117":"## FinanceDataReader \uc124\uce58\n\n!pip install -q finance-datareader","3d8711eb":"%matplotlib inline\nimport matplotlib.pyplot as plt\n\nplt.rcParams[\"figure.figsize\"] = (14,8)\nplt.rcParams['font.size'] = 16\nplt.rcParams['lines.linewidth'] = 2\nplt.rcParams[\"axes.grid\"] = True\nplt.rcParams['axes.axisbelow'] = True","2c0a00ad":"# S&P500 \uc885\ubaa9 \ub9ac\uc2a4\ud2b8\nimport FinanceDataReader as fdr\n\nsp500 = fdr.StockListing('S&P500')\nsp500.head(10)","d93a002f":"# S&P500 \uc885\ubaa9\uc740 \uc2e4\uc81c 505\uac1c\nlen(sp500)","b0645bd0":"# \uac00\uaca9 \ub370\uc774\ud130 \uac00\uc838\uc624\uae30 \uc608\uc2dc\nimport FinanceDataReader as fdr\n\naapl = fdr.DataReader('AAPL', '2010-01-01', '2018-12-31', country='US')\naapl.head(10)","dde5e1e1":"aapl.tail(10)","0717052a":"# \ub514\ub809\ud1a0\ub9ac\uac00 \uc5c6\uc73c\uba74 \uc0dd\uc131\nimport os\nfolder = \"sp500_price\/\"\nif not os.path.isdir(folder):\n    os.mkdir(folder)","e29dc4ed":"import csv\nimport pandas as pd\n\nfor ix, row in sp500[:10].iterrows():\n    sym, name = row['Symbol'], row['Name']\n    csv_fn = folder + '%s.csv' % (sym)\n    if os.path.exists(csv_fn):\n        print('skip', csv_fn)\n        continue\n\n    try:\n      print(csv_fn, end=' ')\n      df = fdr.DataReader(sym, '2010-01-01', '2018-12-31', country='US')\n      df['Symbol'] = sym\n      print(len(df), 'rows')\n      df.to_csv(csv_fn, quoting=csv.QUOTE_MINIMAL)\n    except ValueError as e:\n      print(e)\n","dd50281b":"# \uc77d\uc5b4\uc11c \ud655\uc778\nsym = 'MMM'\ncsv_fn = folder + '%s.csv' % (sym)\nmmm = pd.read_csv(csv_fn, parse_dates=True, index_col='Date')\nmmm.head()","16663ec7":"mmm.tail()","7eddcbcc":"us500 = fdr.DataReader('US500', '2010-01-01', '2018-12-31')\nus500.head()","b231414b":"df_plot = pd.DataFrame()\n\ndf_plot['S&P500'] = us500['Close']\ndf_plot['AAPL'] = aapl['Close']\n\ndf_plot = df_plot \/ df_plot.iloc[0] - 1.0\ndf_plot.plot()","6a651db6":"changes = us500['Close'].pct_change()\n\n(changes + 1).product() - 1","567b4b55":"changes = aapl['Close'].pct_change()\n\n(changes + 1).product() - 1","d9fdc1f5":"import numpy as np\nimport pandas as pd\n\nimport os\nprint(os.listdir(\"..\/input\"))","903bd71b":"ll  ..\/input\/sp500_price\/sp500_price\/","a178e45d":"df_price = pd.DataFrame() \n\nfolder = \"..\/input\/sp500_price\/sp500_price\/\"\n\nfor ix, row in sp500.iterrows():\n    sym, name = row['Symbol'], row['Name']\n    csv_fn = folder + '%s.csv' % (sym)\n    \n    try:\n        df = pd.read_csv(csv_fn, parse_dates=True, index_col='Date')\n        df_price[sym] = df['Close']\n    except FileNotFoundError as e:\n        print(e)","288f1af3":"df_price.tail(10)","c8746d48":"df_price.columns","f700c034":"len(df_price.columns)","f700c3a1":"returns = (df_price['2018'].pct_change() + 1).product() - 1\nreturns = returns.sort_values(ascending=False)\n\n# Best 20\nbest20 = returns.head(20)\nbest20","982086c6":"# Worst 20\n\nworst20 = returns.tail(20)[::-1]\nworst20","fe2b3176":"# Best 10\nbest10 = returns.head(10)\nbest10","5fdbc9a5":"df_price.loc['2018', best10.keys()].head(20)","d252bb56":"import matplotlib as mpl\nimport numpy as np\n\ndef make_colors(n, colormap=plt.cm.Spectral):\n    return colormap(np.linspace(0.1, 1.0, n))","b1b5121e":"df_plot = pd.DataFrame()\n\ndf_plot['S&P500'] = us500.loc['2018', 'Close'] # S&P500 \uc9c0\uc218\ndf_plot[best10.keys()] = df_price.loc['2018', best10.keys()] # 10\uac1c \uc885\ubaa9\n\ndf_plot = df_plot \/ df_plot.iloc[0] - 1\ndf_plot.plot(color=make_colors(11))","03d05912":"worst10 = returns.tail(10)[::-1]","2000fbad":"df_plot = pd.DataFrame()\n\ndf_plot['S&P500'] = us500.loc['2018', 'Close'] # S&P500 \uc9c0\uc218\ndf_plot[worst10.keys()] = df_price.loc['2018', worst10.keys()] # 10\uac1c \uc885\ubaa9\n\ndf_plot = df_plot \/ df_plot.iloc[0] - 1\ndf_plot.plot(color=make_colors(11))","007c770e":"df = pd.DataFrame()\n\ndf['S&P500'] = us500.loc['2018', 'Close'] # S&P500 \uc9c0\uc218\ndf[best20.keys()] = df_price.loc['2018', best20.keys()]","b2a2674d":"df.head(20)","bd6ea185":"# \uc885\ubaa9\uac04 \uc0c1\uad00\uad00\uacc4\nchanges = df.pct_change()\ncorr = changes.corr()\ncorr.head(10)","7c93a6fc":"# \uc0c1\uad00\uad00\uacc4 \ud788\ud2b8\ub9f5\n\nplt.figure(figsize=(16,8))\nplt.grid(False)\nplt.imshow(corr, cmap='hot', interpolation='none')\nplt.colorbar()\nplt.xticks(range(len(corr)), corr.columns, rotation=90)\nplt.yticks(range(len(corr)), corr.columns)\nplt.show()","30ba602e":"# \uc0c1\uad00\uacc4\uc218 \uc21c\uc704 \ub9cc\ub4e4\uae30 (\uc218\uc775\ub960 \uc0c1\uc704 20\uc885\ubaa9)\nimport pandas as pd\n\nidx, vals = [], []\nfor ix, i in enumerate(corr.columns.values):\n    for j in corr.columns.values[ix + 1:]:\n        idx.append((i, j))\n        vals.append(corr[i][j])\n\nser = pd.Series(data=vals, index=idx)\nser_ord = ser.sort_values(ascending=False)\nser_ord[:20]","177cfc1c":"# \uc9c0\uc218\uc640 \uc0c1\uad00\uad00\uacc4\nchanges = df.pct_change()\ncorr = changes.corr()\ncorr['S&P500'].sort_values(ascending=False)[1:]","07d5877e":"plt.figure(figsize=(16,8))\nplt.scatter(changes.mean(), changes.std())\nplt.xlabel('returns')\nplt.ylabel('risk')\nplt.xlim(-0.001, 0.003)\nfor label, x, y in zip(changes.columns, changes.mean(), changes.std()):\n    plt.annotate( label, xy=(x, y), xytext=(30, -30),\n    textcoords = 'offset points',\n    ha = 'right', va = 'bottom',\n    bbox = dict(boxstyle = 'round,pad=0.5', fc = 'yellow', alpha = 0.5),\n    arrowprops = dict(arrowstyle = '->', connectionstyle = 'arc3,rad=0'))   ","a6ab9e90":"df = pd.DataFrame()\n\ndf['S&P500'] = us500.loc['2018', 'Close'] # S&P500 \uc9c0\uc218\ndf[df_price.columns] = df_price.loc['2018', df_price.columns]\n\n# \uc885\ubaa9\uac04 \uc0c1\uad00\uad00\uacc4\nchanges = df.pct_change()\ncorr = changes.corr()\n\nidx, vals = [], []\nfor ix, i in enumerate(corr.columns.values):\n    for j in corr.columns.values[ix + 1:]:\n        idx.append((i, j))\n        vals.append(corr[i][j])\n\nser = pd.Series(data=vals, index=idx)\nser_ord = ser.sort_values(ascending=False)\nser_ord[:40]","79eba4cb":"df_price[['BAC', 'JPM']].plot()","401d557e":"df_plot = df_price[['BAC', 'JPM']]\ndf_plot = df_plot \/ (df_plot.max() - df_plot.min())\ndf_plot.plot()","d1ece570":"df_price[['MAA', 'UDR']].plot()","e43edc53":"df_plot = df_price[['MAA', 'UDR']]\ndf_plot = df_plot \/ (df_plot.max() - df_plot.min())\ndf_plot.plot()","ccdb6bf0":"# S&P 500 \uac00\uaca9 \ub370\uc774\ud130 \uc218\uc9d1\uacfc \uc218\uc775\ub960 \ubd84\uc11d\n\n<img src=\"https:\/\/i.imgur.com\/tdpkZmM.png\" >\n\n### \uc774\uc2b9\uc900 plusjune@financedata.kr \n\n###  2019 FinanceData.KR ","fe3f94cf":"###  2019 FinanceData.KR","bee5fd43":"## \uc2a4\uce90\ud130 \ucc28\ud2b8, \uc218\uc775\uacfc \uc704\ud5d8 \ubd84\uc11d\n* \uc218\uc775 (returns): \uc218\uc775\ub960 \ud3c9\uade0 (mean)\n* \uc704\ud5d8 (risk): \ud45c\uc900\ud3b8\ucc28 (std)","434704f1":"## \uc804\uccb4 \uc885\ubaa9\uc5d0\uc11c 2018\ub144 \uc218\uc775\ub960 \uc0c1\uad00\uad00\uacc4 \uc0c1\uc704 \uc885\ubaa9","1999aff8":"## S&P500 \uc9c0\uc218\n","c3cddd4a":"## 2018 \uc218\uc775\ub960 \uc0c1\uc704 10\n1. ABMD(\uc544\ube44\uc624\uba54\ub4dc) - \uc2ec\uc7a5 \ubcf4\uc870\uc7a5\uce58 \uae30\uc220\uc744 \uac1c\ubc1c \uae30\uc5c5\n1. AMD(\uc5d0\uc774\uc5e0\ub514) - \uadf8\ub798\ud53d\uce74\ub4dc, \uc9d1\uc801\ud68c\ub85c \uc81c\uc870\uc0ac\n1. FTNT(\ud3ec\ud2f0\ub137) - \ub124\ud2b8\uc6cc\ud06c \ubcf4\uc548 \uc7a5\ube44\n1. TRIP(\ud2b8\ub9bd\uc5b4\ub4dc\ubc14\uc774\uc800) - \ud638\ud154 \ub4f1 \uc5ec\ud589\uc5d0 \uad00\ud55c \uac00\uaca9 \ube44\uad50\n1. AAP(\uc5b4\ub4dc\ubc34\uc2a4 \uc624\ud1a0 \ud30c\uce20) - \uc790\ub3d9\ucc28 \ubd80\ud488, \uc790\ub3d9\ucc28 \uc560\ud504\ud130 \ub9c8\ucf13\n1. RHT(\ub808\ub4dc\ud587) - \ub9ac\ub205\uc2a4 \ubc30\ud3ec\ud310 \uc81c\uc791\ud68c\n1. BHT(\ubcf4\uc2a4\ud134 \uc0ac\uc774\uc5b8\ud2f0\ud53d) - \uc758\ub8cc\uc7a5\ube44\n1. HCA(HCA \ud640\ub529\uc2a4) - \ud5ec\uc2a4\ucf00\uc5b4\n1. ORLY(\uc624\ub9b4\ub9ac \uc624\ud1a0\ubaa8\ud2f0\ube0c) - \uc790\ub3d9\ucc28 \uc804\uc7a5 \ubd80\ud488 \uc560\ud504\ud130 \ub9c8\ucf13\n1. MKC(\ub9e5\ucf54\ubbf9 \uc564 \ucef4\ud37c\ub2c8) - \ud5a5\uc2e0\ub8cc, \uc870\ubbf8\ub8cc \ubbf9\uc2a4","7b8acdd2":"# \ub370\uc774\ud130 \uc218\uc9d1\uacfc \uc800\uc7a5","2cc42f11":"## FinanceDataReader\nhttps:\/\/financedata.github.io\/FinanceDataReader\/","c6a7b1c6":"# S&P500 \uc885\ubaa9 \ub9ac\uc2a4\ud2b8","8dc08a3e":"## \uc218\uc775\ub960","ac0b35a0":"2010-01-01 ~ 2018-12-31 \ub370\uc774\ud130 \uc218\uc9d1\uacfc \uc800\uc7a5\n","cca1750b":"## S&P500 \uc804\uccb4 \uc885\ubaa9\uc758 \uac00\uaca9","62b9fbfa":"## CSV \ud30c\uc77c\ub85c \uc800\uc7a5\ud558\uae30","35666684":"## \uc0c1\uad00\uacc4\uc218\uac00 \ub192\uc740 \ud398\uc5b4 \uc885\ubaa9","2ae16948":"## 2018 \uc218\uc775\ub960 Best, Worst 20\n* df.pct_change()\n* (df_price['2018'].pct_change() + 1).product() - 1"}}