{"cell_type":{"fe6c9c48":"code","75d07463":"code","b69cfa26":"code","d307da67":"code","0fcb3112":"code","189509d7":"code","0c6136ba":"code","3a449fb8":"code","ae431978":"code","2b44d385":"code","19a1d1ca":"code","94f70304":"code","8c3fa739":"code","4c8f7e78":"code","0c0515f7":"code","0898aa03":"code","e0f5b3c9":"code","0c73226c":"code","e1fd45f5":"code","ebe3533a":"code","f9b0b774":"code","d1fa5ab5":"code","23d8a26d":"code","a635cda5":"code","f1162307":"markdown","5b768042":"markdown","e379156d":"markdown","0a61e8e8":"markdown","c706e770":"markdown","605dd220":"markdown","56ed5569":"markdown","89e7823b":"markdown","af3d8898":"markdown","487138c9":"markdown"},"source":{"fe6c9c48":"import numpy as np, pandas as pd\nfrom glob import glob\nimport shutil, os\nimport matplotlib.pyplot as plt\n\nfrom tqdm.notebook import tqdm\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.axes_grid1 import ImageGrid\nimport numpy as np\nimport random\nimport cv2\nfrom glob import glob\nfrom tqdm import tqdm\n","75d07463":"shutil.copytree('\/kaggle\/input\/yolov5-3classes-weights\/yolov5', '\/kaggle\/working\/yolov5')\nos.chdir('\/kaggle\/working\/yolov5') \n","b69cfa26":"import torch\nfrom IPython.display import Image, clear_output  # to display images\n\nclear_output()\nprint('Setup complete. Using torch %s %s' % (torch.__version__, torch.cuda.get_device_properties(0) if torch.cuda.is_available() else 'CPU'))","d307da67":"!ls 'kaggle-siim-covid19\/exp\/weights'","0fcb3112":"#TEST_PATH = '\/kaggle\/input\/siim-covid19-resized-384512-and-640px\/SIIM-COVID19-Resized\/img_sz_512\/test\/' \nTEST_PATH = '\/kaggle\/input\/siim-covid19-resized-1024px\/test'  # orginal size\nweights_dir = 'kaggle-siim-covid19\/exp\/weights\/best.pt'\n\nIMG_SIZE = 1024\nBATCH_SIZE = 16\n\n\n!python detect.py --weights {weights_dir} \\\n                  --source {TEST_PATH} \\\n                  --img {IMG_SIZE} \\\n                  --conf 0.30 \\\n                  --iou-thres 0.30 \\\n                  --max-det 3 \\\n                  --save-txt \\\n                  --save-conf ","189509d7":"files = glob('runs\/detect\/exp2\/*jpg')\nfor _ in range(1):\n    row = 4\n    col = 4\n    grid_files = random.sample(files, row*col)\n    images     = []\n    for image_path in tqdm(grid_files):\n        img          = cv2.cvtColor(cv2.imread(image_path), cv2.COLOR_BGR2RGB)\n        images.append(img)\n\n    fig = plt.figure(figsize=(col*5, row*5))\n    grid = ImageGrid(fig, 111,  # similar to subplot(111)\n                     nrows_ncols=(col, row),  # creates 2x2 grid of axes\n                     axes_pad=0.05,  # pad between axes in inch.\n                     )\n\n    for ax, im in zip(grid, images):\n        # Iterating over the grid returns the Axes.\n        ax.imshow(im)\n        ax.set_xticks([])\n        ax.set_yticks([])\n    plt.show()\n","0c6136ba":"#%cd '.\/yolov5'","3a449fb8":"PRED_PATH = 'runs\/detect\/exp2'\n!ls {PRED_PATH}","ae431978":"%cat runs\/detect\/exp2\/labels\/bf5c7ef3b72a.txt","2b44d385":"prediction_files = os.listdir('runs\/detect\/exp2\/labels')\n\nprint('Number of test images predicted : ', len(prediction_files))","19a1d1ca":"PRED_PATH","94f70304":"# The submisison requires xmin, ymin, xmax, ymax format. \n# YOLOv5 returns x_center, y_center, width, height\ndef correct_bbox_format(bboxes):\n    correct_bboxes = []\n    bboxes=np.array(bboxes,dtype=float)\n    for b in bboxes:\n        xc = b[0]#*IMG_SIZE\n        yc = b[1]#*IMG_SIZE\n        w = b[2]#*IMG_SIZE\n        h =  b[3]#*IMG_SIZE\n        xmin = int(xc- w\/2)\n        xmax = int(xc + w\/2)\n        ymin = int(yc - h\/2)\n        ymax = int(yc + h\/2)\n        correct_bboxes.append([xmin,ymin, xmax,ymax]) \n    return correct_bboxes\n\ndef get_conf_b(file_path):\n    classid=[]\n    confidence = []\n    bboxes = []\n    with open(file_path, 'r') as file:\n        for line in file:\n            preds = line.strip('\\n').split(' ')\n            #preds = list(map(float, preds))\n            classid.append(preds[0])\n            confidence.append(preds[1])\n            bboxes.append(preds[2:6])\n    return classid,confidence, bboxes","8c3fa739":"# --- configs ---\nthing_classes = [\n    \"atypical\",\n    \"indeterminate\",\n    \"typical\"\n]\ndebug=False\n\ncategory_name_to_id = {class_name: index for index, class_name in enumerate(thing_classes)}\ncategory_name_to_id","4c8f7e78":"# Read the submisison file\nsub_df=None\nsub_df = pd.read_csv('\/kaggle\/input\/siim-covid19-detection\/sample_submission.csv')\n","0c0515f7":"test_df=None\nfilepaths = glob('\/kaggle\/input\/siim-covid19-detection\/test\/**\/*dcm',recursive=True)\ndf_test = pd.DataFrame({'filepath':filepaths,})\n\ndf_test['id'] = df_test.filepath.map(lambda x: x.split('\/')[-3].replace('.dcm', '')+'_study')\ndf_test['txt'] = df_test.filepath.map(lambda x: x.split('\/')[-1].replace('.dcm', '')+'.txt')\n\ndf_test.drop(['filepath'], axis=1, inplace=True)","0898aa03":"sub_df=pd.merge(sub_df, df_test, on = 'id', how = 'left')\nsub_df","e0f5b3c9":"sub_df=sub_df.drop_duplicates(subset=['id'])\nsub_df.reset_index(drop=True, inplace=True)","0c73226c":"# Prediction loop for submission\npredictions = []\nfor i in tqdm(range(len(sub_df))):\n    row = sub_df.loc[i]\n    id_name = row.id.split('_')[0]\n    id_level = row.id.split('_')[-1]\n    txtn = row.txt\n\n    if id_level == 'study':\n        if f'{txtn}' in prediction_files:\n            classid,confidence, bboxes = get_conf_b(f'{PRED_PATH}\/labels\/{txtn}')\n            pred_string = ''\n            cls_conf=[0,0,0]\n            for i,idxc in enumerate(classid):\n                cls_conf[int(idxc)] += float(confidence[i])\n            sum_con=0\n            sum_con=sum(cls_conf)\n            for i in range(3):\n                cls_conf[i]=cls_conf[i]\/sum_con\n                pred_string += f'{thing_classes[i]} {cls_conf[i]} 0 0 1 1' + ' '\n            predictions.append(pred_string[:-1])\n        else:\n            predictions.append(\"Negative 1 0 0 1 1\") # dummy prediction\n    elif id_level == 'image':\n        # we can do image-level classification here.\n        # also we can rely on the object detector's classification head.\n        # for this example submisison we will use YOLO's classification head. \n        # since we already ran the inference we know which test images belong to opacity.\n        if f'{id_name}.txt' in prediction_files:\n            # opacity label\n            classid,confidence, bboxes = get_conf_b(f'{PRED_PATH}\/labels\/{id_name}.txt')\n            bboxes = correct_bbox_format(bboxes)\n            pred_string = ''\n            for j, conf in enumerate(confidence):\n                pred_string += f'opacity {conf} '  + ' '.join(map(str, bboxes[j]))+ ' '\n            predictions.append(pred_string[:-1]) \n        else:\n            predictions.append(\"None 1 0 0 1 1\")\n            ","e1fd45f5":"cwd = os.getcwd()\nprint(cwd)","ebe3533a":"%cd '..\/'","f9b0b774":"import shutil\npath = \".\/yolov5\"\nshutil.rmtree(path)","d1fa5ab5":"sub_df.drop(['txt'], axis=1, inplace=True)","23d8a26d":"sub_df['PredictionString'] = predictions\nsub_df.to_csv('submission.csv', index=False)","a635cda5":"sub_df","f1162307":"# References\n1. https:\/\/github.com\/ultralytics\/yolov5\/wiki\/Train-Custom-Data\n1. https:\/\/ultralytics.com\/yolov5\n1. https:\/\/www.kaggle.com\/awsaf49\/vinbigdata-cxr-ad-yolov5-14-class-infer","5b768042":"### Other notebooks in the competition\n- [SIIM COVID-19 Detectron2 Training](https:\/\/www.kaggle.com\/ammarnassanalhajali\/siim-covid-19-detectron2-training)\n- [SIIM COVID-19 Detectron2 Inferance](https:\/\/www.kaggle.com\/ammarnassanalhajali\/siim-covid-19-detectron2-inferance)\n- [SIIM-FISABIO-RSNA COVID-19 Detection-EDA](https:\/\/www.kaggle.com\/ammarnassanalhajali\/siim-fisabio-rsna-covid-19-detection-eda)","e379156d":"# Detecting","0a61e8e8":"![download.jpg](attachment:ea2a5da8-45d1-40d3-b65a-70e2b214ac3a.jpg)","c706e770":"# Submission\n\nIn this section, I will show how you can use YOLOv5 as object detector and prepare `submission.csv` file.","605dd220":"# \u2600\ufe0f Importing Libraries","56ed5569":"### \ud83d\ude85 Moving **YOLOv5** directory to **\/kaggle\/working\/**","89e7823b":"### Please if this kernel is useful, <font color='red'>please upvote !!<\/font>","af3d8898":"# \ud83d\ude80 COVID-19 Detection YOLOv5 3Classes [Inference] ","487138c9":"### Hi kagglers, This is `Inference` notebook using `YOLOv5`.\n\n> \n> [COVID-19 Detection YOLOv5 3Classes [Training] ](https:\/\/www.kaggle.com\/ammarnassanalhajali\/covid-19-detection-yolov5-3classes-training)\n\n\n### Please if this kernel is useful, <font color='red'>please upvote !!<\/font>"}}