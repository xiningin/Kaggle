{"cell_type":{"8f33061d":"code","a10e86b8":"code","2ee00d30":"code","7cf83b84":"code","9109983c":"code","4582d82d":"code","05501c11":"code","3fd3a971":"code","4f0d4586":"code","1f835a95":"code","773a9859":"code","710cd1ae":"code","f9e117d2":"code","675fffdc":"code","d67eb440":"code","1814bc11":"code","9736209f":"code","985f9723":"code","26fc3c91":"code","7298423d":"code","716c074a":"code","2e866923":"code","27b727cb":"code","3d1b0865":"code","5f5f9024":"code","aba0a329":"code","18167bdc":"code","e7e9c2cb":"code","417bc8f6":"code","75f15044":"code","29a739b3":"code","6ba47f90":"code","4797d010":"code","44449249":"code","7c955e43":"code","bbfce1c1":"code","180c0641":"code","61745835":"code","58460962":"code","80a39b95":"code","2d1aa6be":"code","ae289adb":"code","29ab2b98":"code","98fdf7a7":"code","f2f0b034":"code","f780e24c":"code","cce3becb":"markdown"},"source":{"8f33061d":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nprint(os.listdir(\"..\/input\"))","a10e86b8":"data = pd.read_csv(\"..\/input\/data.csv\")\nprint(data.shape)\ndata.sample(5)","2ee00d30":"data.isnull().sum()","7cf83b84":"#describe the data\ndata.describe()","9109983c":"data.info()","4582d82d":"#let's fill the missing values for continuous variables.\ndata['Dribbling'].fillna(data['Dribbling'].mean(), inplace = True)\ndata['ShortPassing'].fillna(data['ShortPassing'].mean(), inplace = True)\ndata['Volleys'].fillna(data['Volleys'].mean(), inplace = True)\ndata['Curve'].fillna(data['Curve'].mean(), inplace = True)\ndata['FKAccuracy'].fillna(data['FKAccuracy'].mean(), inplace = True)\ndata['LongPassing'].fillna(data['LongPassing'].mean(), inplace = True)\ndata['BallControl'].fillna(data['BallControl'].mean(), inplace = True)\ndata['Acceleration'].fillna(data['Acceleration'].mean(), inplace = True)\ndata['SprintSpeed'].fillna(data['SprintSpeed'].mean(), inplace = True)\ndata['Crossing'].fillna(data['Crossing'].mean(), inplace = True)\ndata['Finishing'].fillna(data['Finishing'].mean(), inplace = True)\ndata['HeadingAccuracy'].fillna(data['HeadingAccuracy'].mean(), inplace = True)\n\ndata['Weight'].fillna('200lbs', inplace = True)\ndata['Contract Valid Until'].fillna(2019, inplace = True)\ndata['Height'].fillna(\"5'10\", inplace = True)\ndata['Joined'].fillna('Jul 1, 2018', inplace = True)\ndata['Loaned From'].fillna('None', inplace = True)\ndata['Jersey Number'].fillna(0, inplace = True)\n\n\n\n\n\n","05501c11":"data.info()","3fd3a971":"data['Body Type'].value_counts(dropna=False)","4f0d4586":"data['Body Type'].fillna('Normal', inplace = True)\ndata['Body Type'].replace('Messi', 'Stocky', inplace = True)\ndata['Body Type'].replace('C. Ronaldo', 'Stocky', inplace = True)\ndata['Body Type'].replace('Courtois', 'Stocky', inplace = True)\ndata['Body Type'].replace('PLAYER_BODY_TYPE_25', 'Stocky', inplace = True)\ndata['Body Type'].replace('Shaqiri', 'Stocky', inplace = True)\ndata['Body Type'].replace('Neymar', 'Stocky', inplace = True)\ndata['Body Type'].replace('Akinfenwa', 'Stocky',inplace = True)\n","1f835a95":"data['Body Type'].value_counts()","773a9859":"data['Position'].fillna('CM', inplace = True)\ndata['Club'].fillna('No Club', inplace = True)\ndata['Work Rate'].fillna('Medium\/ Medium', inplace = True)\ndata['Skill Moves'].fillna(data['Skill Moves'].median(), inplace = True)\n","710cd1ae":"data['Weak Foot'].fillna(3, inplace = True)\ndata['Preferred Foot'].fillna('Right', inplace = True)\ndata['International Reputation'].fillna(3, inplace = True)\n","f9e117d2":"data.info()","675fffdc":"data['Preferred Foot'].value_counts().plot.bar()","d67eb440":"data['International Reputation'].value_counts().plot.bar()","1814bc11":"labels = ['5', '4', '3', '2', '1'] \nsize = [229, 2662, 11349, 3761, 158]\ncolors = ['red', 'yellow', 'green', 'black', 'blue']\nexplode = [0.1, 0.1, 0.1, 0.1, 0.1]\n\nplt.pie(size, labels = labels, colors = colors, explode = explode, shadow = True)\nplt.title('Pie Chart for Representing Week Foot of the Players', fontsize = 14)\nplt.legend()\nplt.show()","9736209f":"plt.figure(figsize = (12, 8))\nsns.set(style = 'dark', palette = 'colorblind', color_codes = True)\nax = sns.countplot('Position', data = data, color = 'yellow')\nax.set_xlabel(xlabel = 'Different Positions in Football', fontsize = 16)\nax.set_ylabel(ylabel = 'Count of Players', fontsize = 16)\nax.set_title(label = 'Comparison of Positions and Players', fontsize = 20)\nplt.show()","985f9723":"data['Weight'].head()","26fc3c91":"def extract_value_from(value):\n  out = value.replace('lbs', '')\n  return float(out)\n\n# applying the function to weight column\n#data['value'] = data['value'].apply(lambda x: extract_value_from(x))\ndata['Weight'] = data['Weight'].apply(lambda x : extract_value_from(x))\n\ndata['Weight'].head()","7298423d":"'''\ndata['Wage'].fillna('\u20ac100K', inplace = True)\n\ndata['Weight1'] = 0\n\nfor x in range(len(data['Weight'])):\n    data['Weight1'][x] = data['Weight'][x].replace('lbs', '')\n\ndata['Weight1'].head()\n'''","716c074a":"def extract_value_from(Value):\n    out = Value.replace('\u20ac', '')\n    if 'M' in out:\n        out = float(out.replace('M', ''))*1000000\n    elif 'K' in Value:\n        out = float(out.replace('K', ''))*1000\n    return float(out)\n\ndata['Value'] = data['Value'].apply(lambda x: extract_value_from(x))\ndata['Wage'] = data['Wage'].apply(lambda x: extract_value_from(x))\n\ndata['Wage'].head()","2e866923":"data['Skill Moves'].value_counts().plot.bar()","27b727cb":"data['Height'].value_counts().plot.bar()","3d1b0865":"plt.figure(figsize = (60, 15))\nsns.countplot(x = 'Weight', data = data, palette = 'dark')\nplt.title('Different Weights of the Players Participating in FIFA 2019', fontsize = 20)\nplt.xlabel('Heights associated with the players', fontsize = 16)\nplt.ylabel('count of Players', fontsize = 16)\nplt.show()","5f5f9024":"data['Work Rate'].value_counts().plot.bar()\n","aba0a329":"# To show Different Speciality Score of the players participating in the FIFA 2019\n\nsns.set(style = 'dark', palette = 'colorblind', color_codes = True)\nx = data.Special\nplt.figure(figsize = (12, 8))\nax = sns.distplot(x, bins = 58, kde = False, color = 'm')\nax.set_xlabel(xlabel = 'Special score range', fontsize = 16)\nax.set_ylabel(ylabel = 'Count of the Players',fontsize = 16)\nax.set_title(label = 'Histogram for the Speciality Scores of the Players', fontsize = 20)\nplt.show()","18167bdc":"# To show Different potential scores of the players participating in the FIFA 2019\n\nsns.set(style = \"dark\", palette = \"muted\", color_codes = True)\nx = data.Potential\nplt.figure(figsize=(12,8))\nax = sns.distplot(x, bins = 58, kde = False, color = 'y')\nax.set_xlabel(xlabel = \"Player\\'s Potential Scores\", fontsize = 16)\nax.set_ylabel(ylabel = 'Number of players', fontsize = 16)\nax.set_title(label = 'Histogram of players Potential Scores', fontsize = 20)\nplt.show()","e7e9c2cb":"data['Nationality'].value_counts().plot.bar(color = 'orange', figsize = (55, 15 ))","417bc8f6":"data['Nationality'].value_counts()","75f15044":"data['Age'].value_counts().plot.bar(color = 'blue', figsize = (55, 15 ))","29a739b3":"data['Body Type'].value_counts().plot.bar(color = 'green', figsize = (7, 5))\nplt.title('Different Body Types')\nplt.xlabel('Body Types')\nplt.ylabel('count')\nplt.show()","6ba47f90":"selected_columns = ['Name', 'Age', 'Nationality', 'Overall', 'Potential', 'Club', 'Value',\n                    'Wage', 'Special', 'Preferred Foot', 'International Reputation', 'Weak Foot',\n                    'Skill Moves', 'Work Rate', 'Body Type', 'Position', 'Height', 'Weight',\n                    'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling',\n                    'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n                    'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n                    'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression',\n                    'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n                    'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n                    'GKKicking', 'GKPositioning', 'GKReflexes', 'Release Clause']\n\ndata_selected = pd.DataFrame(data, columns = selected_columns)","4797d010":"data.iloc[data.groupby(data['Position'])['Overall'].idxmax()][['Position', 'Name', 'Age', 'Club', 'Nationality']]","44449249":"# Every Nations' Player and their Weights\n\nsome_countries = ('England', 'Germany', 'Spain', 'Argentina', 'France', 'Brazil', 'Italy', 'Columbia')\ndata_countries = data.loc[data['Nationality'].isin(some_countries) & data['Weight']]\n\nplt.rcParams['figure.figsize'] = (12, 7)\nax = sns.violinplot(x = data_countries['Nationality'], y = data_countries['Weight'], palette = 'colorblind')\nax.set_xlabel(xlabel = 'Countries', fontsize = 9)\nax.set_ylabel(ylabel = 'Weight in lbs', fontsize = 9)\nax.set_title(label = 'Distribution of Weight of players from different countries', fontsize = 20)\nplt.show()","7c955e43":"# Every Nations' Player and their wages\n\nsome_countries = ('England', 'Germany', 'Spain', 'Argentina', 'France', 'Brazil', 'Italy', 'Columbia')\ndata_countries = data.loc[data['Nationality'].isin(some_countries) & data['Wage']]\n\nplt.rcParams['figure.figsize'] = (12, 7)\nax = sns.barplot(x = data_countries['Nationality'], y = data_countries['Wage'],)\nax.set_xlabel(xlabel = 'Countries', fontsize = 9)\nax.set_ylabel(ylabel = 'Wage', fontsize = 9)\nax.set_title(label = 'Distribution of Wages of players from different countries', fontsize = 15)\nplt.show()\n","bbfce1c1":"some_clubs = ('CD Legan\u00e9s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna D\u00fcsseldorf', 'Manchestar City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')\n\ndata_clubs = data.loc[data['Club'].isin(some_clubs) & data['Overall']]\n\nplt.rcParams['figure.figsize'] = (14, 8)\nax = sns.barplot(x = data_clubs['Club'], y = data_clubs['Overall'], palette = 'deep')\nax.set_xlabel(xlabel = 'Some Popular Clubs', fontsize = 9)\nax.set_ylabel(ylabel = 'Overall Score', fontsize = 9)\nax.set_title(label = 'Distribution of Overall Score in Different popular Clubs', fontsize = 20)\nplt.show()","180c0641":"some_clubs = ('CD Legan\u00e9s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna D\u00fcsseldorf', 'Manchestar City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')\n\ndata_clubs = data.loc[data['Club'].isin(some_clubs) & data['Wage']]\n\nplt.rcParams['figure.figsize'] = (14, 8)\nax = sns.barplot(x = data_clubs['Club'], y = data_clubs['Wage'], palette = 'deep')\nax.set_xlabel(xlabel = 'Some Popular Clubs', fontsize = 9)\nax.set_ylabel(ylabel = 'Wage', fontsize = 9)\nax.set_title(label = 'Distribution of Wage in Different popular Clubs', fontsize = 20)\nplt.show()","61745835":"some_clubs = ('CD Legan\u00e9s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna D\u00fcsseldorf', 'Manchestar City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')\n\ndata_clubs = data.loc[data['Club'].isin(some_clubs) & data['Weight']]\n\nplt.rcParams['figure.figsize'] = (14, 8)\nax = sns.violinplot(x = 'Club', y = 'Weight', data = data_clubs, palette = 'dark')\nax.set_xlabel(xlabel = 'Some Popular Clubs', fontsize = 9)\nax.set_ylabel(ylabel = 'Weight in lbs', fontsize = 9)\nax.set_title(label = 'Distribution of Weight in Different popular Clubs', fontsize = 20)\nplt.show()","58460962":"# finding 15 youngest Players from the dataset\n\nyoungest = data.sort_values('Age', ascending = True)[['Name', 'Age', 'Club', 'Nationality']].head(15)\nprint(youngest)\n","80a39b95":"# finding 15 eldest players from the dataset\n\neldest = data.sort_values('Age', ascending = False)[['Name', 'Age', 'Club', 'Nationality']].head(15)\nprint(eldest)","2d1aa6be":"# The longest membership in the club\n\nimport datetime\n\nnow = datetime.datetime.now()\ndata['Join_year'] = data.Joined.dropna().map(lambda x: x.split(',')[1].split(' ')[1])\ndata['Years_of_member'] = (data.Join_year.dropna().map(lambda x: now.year - int(x))).astype('int')\nmembership = data[['Name', 'Club', 'Years_of_member']].sort_values(by = 'Years_of_member', ascending = False).head(10)\nmembership.set_index('Name', inplace=True)\nmembership","ae289adb":"# defining the features of players\n\nplayer_features = ('Acceleration', 'Aggression', 'Agility', \n                   'Balance', 'BallControl', 'Composure', \n                   'Crossing', 'Dribbling', 'FKAccuracy', \n                   'Finishing', 'GKDiving', 'GKHandling', \n                   'GKKicking', 'GKPositioning', 'GKReflexes', \n                   'HeadingAccuracy', 'Interceptions', 'Jumping', \n                   'LongPassing', 'LongShots', 'Marking', 'Penalties')\n\n# Top four features for every position in football\n\nfor i, val in data.groupby(data['Position'])[player_features].mean().iterrows():\n    print('Position {}: {}, {}, {}'.format(i, *tuple(val.nlargest(4).index)))\n","29ab2b98":"# Top 10 left footed footballers\n\ndata[data['Preferred Foot'] == 'Left'][['Name', 'Age', 'Club', 'Nationality']].head(10)\n","98fdf7a7":"# Top 10 Right footed footballers\n\ndata[data['Preferred Foot'] == 'Right'][['Name', 'Age', 'Club', 'Nationality']].head(10)\n","f2f0b034":"# comparing the performance of left-footed and right-footed footballers\n# ballcontrol vs dribbing\n\nsns.lmplot(x = 'BallControl', y = 'Dribbling', data = data, col = 'Preferred Foot')","f780e24c":"# comparing the performance of left-footed and right-footed footballers\n# ballcontrol vs dribbing\n\nsns.lmplot(x = 'ShortPassing', y = 'LongPassing', data = data, col = 'Preferred Foot')","cce3becb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output."}}