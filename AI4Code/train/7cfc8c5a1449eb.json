{"cell_type":{"b58962ef":"code","0a364a0f":"code","20967feb":"code","a12080cc":"code","10b49414":"code","b27b6092":"code","fbf28a9d":"code","1af6a7ec":"code","14f5f4fe":"code","d40eba59":"code","0bd64393":"code","23a203fa":"code","8481f3f2":"code","59fb9a01":"code","f20a0611":"code","7169aea8":"markdown","6b04941b":"markdown","6c3e9390":"markdown","3f9a20df":"markdown","abbb95fb":"markdown","6cda022f":"markdown","1c4bc434":"markdown","5e66a0c5":"markdown","123514a1":"markdown","5065e433":"markdown","5aea1514":"markdown","afde5de9":"markdown","26262c2c":"markdown","a6cf6d24":"markdown","4811fb5d":"markdown","fa293c86":"markdown","45090aef":"markdown","0ade0bb5":"markdown","022567de":"markdown"},"source":{"b58962ef":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing\nimport seaborn as sns # plotting and visualization\nimport pandas_profiling\n# to avoid warnings\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.filterwarnings(\"ignore\")\n","0a364a0f":"# Popular Movies TV shows from Prime Videos Netflix version_3.csv  let's see the data in raw format\ndf1 = pd.read_csv('\/kaggle\/input\/Popular Movies TV shows from Prime Videos Netflix version_3.csv',delimiter = ',')\ndf1.head(10)","20967feb":"df1.describe()","a12080cc":"#separate features \nfeatures = ['ID', 'Title', 'Year', 'Rating', 'IMDb',\n       'Rotten Tomatoes', 'Genre', 'Netflix', 'Amazon Prime Video']\n\n#generate data profile\nprofile = pandas_profiling.ProfileReport(df1[features])\nprofile","10b49414":"#before we move to that we need to clean the data, remove missing values \nfeatures = ['ID', 'Title', 'Year', 'Rating', 'IMDb',\n       'Rotten Tomatoes', 'Genre', 'Netflix', 'Amazon Prime Video']\n\ntrain_data = df1[features].copy()\ntrain_data.isnull().sum()","b27b6092":"train_data = train_data.drop('Rating',axis = 1)","fbf28a9d":"train_data = train_data.dropna()\ntrain_data","1af6a7ec":"#features.remove('Rating')\ntrain_data.isnull().sum()","14f5f4fe":"\n#train_data[\"IMDb\"] = pd.to_numeric(train_data['IMDb'])\ndef convert_to_float(x):\n    imdb = x[0]\n    try:\n        return float(imdb)\n    except:\n        print('the unwanted value is:',imdb)\n        \n    return imdb\ntrain_data[\"IMDb\"] = train_data[['IMDb']].apply(convert_to_float,axis = 1)\ntrain_data","d40eba59":"train_data = train_data[train_data.IMDb != 'd;}']\ntrain_data","0bd64393":"#movies\/shows annual production data\nplt.figure(figsize=(10,6))\nfig = sns.distplot(train_data['Year'],color = 'coral')\nfig.set_xlabel(\"Year\",size=15)\nfig.set_ylabel(\"Movie\/Shows Count\",size=15)\nplt.title('Movies\/TV shows in each Year',size = 20)\nplt.show()","23a203fa":"plt.figure(figsize=(10,6))\nfig = sns.distplot(train_data[train_data['Year'] > 1980][\"Year\"],color = 'coral')\nfig.set_xlabel(\"Year\",size=15)\nfig.set_ylabel(\"Movie\/Shows Frequency\",size=15)\n#fig.set_xticklabels(fig.get_xticklabels(),rotation=45)\nplt.title('Movies\/TV shows in each Year',size = 20)\nplt.show()","8481f3f2":"plt.figure(figsize=(10,6))\nfig = sns.distplot(train_data[\"IMDb\"],color = 'coral')\nfig.set_xlabel(\"IMDb Rating Rounded\",size=15)\nfig.set_ylabel(\"Movie\/Shows Frequency\",size=15)\nplt.title('Movies\/TV shows IMDb Rating',size = 20)\nplt.show()","59fb9a01":"plt.figure(figsize=(10,6))\nfig = sns.countplot(train_data[\"Genre\"],color = 'coral')\nfig.set_xlabel(\"Genre\",size=15)\nfig.set_ylabel(\"Movie\/Shows Count\",size=15)\nfig.set_xticklabels(fig.get_xticklabels(),rotation=30)\nplt.title('Movies\/TV shows in each Genre',size = 20)\nplt.show()","f20a0611":"plt.figure(figsize=(10,6))\nfig = sns.distplot(train_data[\"Rotten Tomatoes\"],color = 'coral')\nfig.set_xlabel(\"Rotten Tomatoes\",size=15)\nfig.set_ylabel(\"Movie\/Shows frequency\",size=15)\nfig.set_xticklabels(fig.get_xticklabels(),rotation=30)\nplt.title('Movies\/TV shows distribution over Rotten tomatoes',size = 20)\nplt.show()","7169aea8":"### Visualizing all the 14 different Genres","6b04941b":"We can see most of the movies\/shows are after 1950s, so we can see a left-skewed plot","6c3e9390":"### Visualizing the distribution of rotten tomatoes","3f9a20df":"## Reading the Data","abbb95fb":"This even looks like a bell-shaped curve but slightly right-skewed","6cda022f":"We can see that there are a lot of values missing in Age rating variable, a few in IMDb.    \nThere are some interesting conclusions we can draw from the statics of this data:\n* The mean year of production is around 2002,with standard deviation 21 so most of the movies in the dataset lie around 2020 and 1980s, which resembles with our general understanding as most of the movies\/TV shows found on Netflix\/Prime Videos lie in these range\n* There are 14 different genres, from which Drama seems to be the largest one having around 6000 entries\n* Around 75% of the movies are found on Amazon Prime Videos and 25% found on Netflix (can be seen from 0,1 ratio)\n* Finally We can see multiple titles on the dataset, which indicates that same movie can be found on netflix and prime videos under multile genre, which is pretty interesting\n* we have also seen that the rating has most of the values missing so we should even try to drop it ","1c4bc434":"*This IMDB visualization appears great it seems to look like an Gaussian Distribution*","5e66a0c5":"## Visualizations\nNow our data is cleaned so we can visualize it with seaborn ","123514a1":"### Let's visualize the IMDb rating data","5065e433":"## Introduction\nThe dataset describes various Movies and TV shows found on Netflix and Amazon Prime Videos.The dataset can be found at [Popular Movies n TV shows dataset](https:\/\/www.kaggle.com\/jyotmakadiya\/popular-movies-and-tv-shows-amazon-prime-netflix)    \n\nIf you find this notebook helpful, please don't forget to share your thoughts and upvote!!!         \nLet's explore the content of the data and see what we can conclude","5aea1514":"## Conclusion\n* The dataset seems pretty interesting as we can that as Rotten Tomatoes increases, the no of movies\/shows decreases. \n* The IMDb rating shows large number movies\/shows lie in mid range, describing average performance. ","afde5de9":"## Now let us do some data cleaning","26262c2c":"## Exploratory Data Analysis\n","a6cf6d24":"***Dropping Null Values***","4811fb5d":"> Now we can clearly see that we have dropped all the null values in the data","fa293c86":"It seems that around 60% of age Rating value and 420 IMdb rating are missing, We will drop IMDb NULL rows and Age rating column doesn't seem to help in further analysis. So, we will drop age rating feature altogether","45090aef":"We can see some string values which are causing error when converting to float, so we need to get rid of this values like d which are causing these errors","0ade0bb5":"**Here we will try to use profile_report inorder to describe the whole data and visualize it dynamically. And This would even be better as we have less features that can be described easily**","022567de":"### Converting the String values of IMDB feature to float "}}