{"cell_type":{"2805cf59":"code","1c16bc21":"code","c1fa0cf5":"code","33e9dd75":"code","c9de4e67":"code","1c25962a":"code","f8740070":"code","9c9f0d7d":"code","a6069e8d":"code","bbc8da19":"code","1f270ebb":"code","e6bad7c3":"code","fe08a2b0":"code","546b61de":"code","8ae09e2e":"markdown","4d292df7":"markdown","85c5dc4f":"markdown","df6e8690":"markdown","86fde5b2":"markdown","e0fe0d5f":"markdown","eb2a63ae":"markdown","5cfd6d9e":"markdown","37775c50":"markdown","4c95f444":"markdown","0744d313":"markdown","b05600d4":"markdown","76f0773f":"markdown","1c55ae03":"markdown","4b2ac577":"markdown","9f5858bb":"markdown","6597672c":"markdown","701994b8":"markdown","92537ea6":"markdown"},"source":{"2805cf59":"import pandas as pd\nimport numpy as np\n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import r2_score, mean_squared_error","1c16bc21":"data = pd.read_csv('..\/input\/fish-market\/Fish.csv')\n\ndata.head()","c1fa0cf5":"data.rename(columns={'Length1':'Vertical length', \n                     'Length2':'Diagonal length', \n                     'Length3':'Cross length'}, \n            inplace=True)\n\ndata.head()","33e9dd75":"data.describe()","c9de4e67":"features_to_plot = {'Weight':[1,1], \n                    'Vertical length':[1,2], \n                    'Diagonal length':[1,3], \n                    'Cross length':[2,1], \n                    'Height':[2,2], \n                    'Width':[2,3]}\n\nbox_violin_plot = make_subplots(rows=2, cols=3)\n\nfor i in features_to_plot.keys():\n    box_violin_plot.add_trace(go.Box(y=data[i], name=i, marker_color='#342ead'), \n                              row=features_to_plot[i][0], col=features_to_plot[i][1])\n    box_violin_plot.add_trace(go.Violin(y=data[i], name=i, marker_color='#ea6227'), \n                              row=features_to_plot[i][0], col=features_to_plot[i][1])\n    \nbox_violin_plot.update_layout(width=850, height=700, showlegend=False)\n\nbox_violin_plot.show()","1c25962a":"features_to_plot = {'Vertical length':[1,1], \n                    'Diagonal length':[1,2], \n                    'Cross length':[1,3], \n                    'Height':[2,1], \n                    'Width':[2,2]}\n\nscatter_fig = make_subplots(rows=2, cols=3,   y_title='Weight', shared_yaxes=True)\n\nfor i in features_to_plot.keys():\n    scatter_fig.add_trace(go.Scatter(x=data[i], y=data['Weight'], mode='markers', \n                                     name=i), \n                          row=features_to_plot[i][0], col=features_to_plot[i][1])\n\nscatter_fig.update_layout(width=1380, height=700)\n\nscatter_fig.show()","f8740070":"for k in data.columns.to_list()[1:]:\n    percentile_25 = np.percentile(data[k], 25)\n    percentile_75 = np.percentile(data[k], 75)\n    iqr = percentile_75 - percentile_25\n    lower = percentile_25 - (iqr*1.5)\n    upper = percentile_75 + (iqr*1.5)\n    for i in data[k]:\n        if ((i > upper) or (i < lower)):\n            data.drop((data.index[data[k] == i].to_list()), axis=0, inplace=True)","9c9f0d7d":"data = pd.get_dummies(data, columns = ['Species'])\n\ndata.drop(['Species_Whitefish'], axis = 1, inplace = True)\n\ndata.head()","a6069e8d":"scaler = StandardScaler()\n\nscaler.fit(data.iloc[:, 1:6])\n\ndata_scaled = scaler.transform(data.iloc[:, 1:6])","bbc8da19":"X  = np.concatenate((data_scaled, data.iloc[:, 6:-1]), axis = 1)\n\ny = data['Weight']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)","1f270ebb":"linear_regression = LinearRegression()\n\nlinear_regression.fit(X_train, y_train)\n\ny_pred_linear = linear_regression.predict(X_test)\n\nrsq_linear = r2_score(y_test, y_pred_linear)\n\nrmse_linear = np.sqrt(mean_squared_error(y_test, y_pred_linear))","e6bad7c3":"polynomial_features = PolynomialFeatures(degree=2)\n\npolynomial_features.fit(X_train)\n\nX_train_poly = polynomial_features.transform(X_train)\nX_test_poly = polynomial_features.transform(X_test)\n\npolynomial_regression = LinearRegression()\n\npolynomial_regression.fit(X_train_poly, y_train)\n\ny_pred_poly = polynomial_regression.predict(X_test_poly)\n\nrsq_poly = r2_score(y_test, y_pred_poly)\n\nrmse_poly = np.sqrt(mean_squared_error(y_test, y_pred_poly))","fe08a2b0":"svr_parameters = {'kernel' : ['linear', 'poly', 'rbf'],\n                  'degree' : [1, 3, 5],\n                  'C' : [1, 10, 100, 1000]\n                 }\n\ngrid_search_svr = GridSearchCV(estimator = SVR(), \n                           param_grid = svr_parameters,\n                           cv = 10,\n                           n_jobs = -1)\n\ngrid_search_svr.fit(X_train, y_train)\n\nsvr = grid_search_svr.best_estimator_\n\ny_pred_svr = svr.predict(X_test)\n\nrsq_svr = r2_score(y_test, y_pred_svr)\n\nrmse_svr = np.sqrt(mean_squared_error(y_test, y_pred_svr))","546b61de":"models = [['Linear Regression', rsq_linear, rmse_linear],\n          ['Polynomial Regression', rsq_poly, rmse_poly],\n          ['Support Vector Regression', rsq_svr, rmse_svr]]\n\ndf_comparasion = pd.DataFrame(models, columns = ['Model', 'R\u00b2', 'RMSE'])\n\ndf_comparasion","8ae09e2e":"# Comparing models","4d292df7":"### Features distribution","85c5dc4f":"### Defining variables","df6e8690":"### Standardzing the data","86fde5b2":"### Support Vector Regression","e0fe0d5f":"### Encoding features","eb2a63ae":"### Renaming features","5cfd6d9e":"### Linear regression","37775c50":"### Removing outliers","4c95f444":"Notes:\n - In general, the features apresents a normal distribution;\n - Existence of some outliers in features. As in weight, vertical length, diagonal length and cross length;\n - The difference between the scale of our features can be a problem.","0744d313":"### Features x Weight","b05600d4":"### Data description","76f0773f":"# Libraries","1c55ae03":"# Data","4b2ac577":"# Data preparation","9f5858bb":"### Importing the data","6597672c":"# Machine learning models","701994b8":"### Polynomial regression","92537ea6":"# Data Analysis"}}