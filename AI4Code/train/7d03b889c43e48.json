{"cell_type":{"1cb6d0d0":"code","7ff1f680":"code","e3a081bb":"code","fd37cc3b":"code","19f83c8c":"code","53448af0":"code","76a0f540":"code","6e993989":"code","5a1196b5":"code","e2cb0f11":"code","a3e05a99":"code","32c0773f":"code","39011244":"code","134e88b0":"code","5920876f":"markdown","44a5ab1f":"markdown","db75b733":"markdown","f0f03746":"markdown","fdcef2c2":"markdown","a2cd9b5f":"markdown","c03dd972":"markdown","cb609b55":"markdown","432d9e38":"markdown","56d878f2":"markdown","e84457f6":"markdown","512312d0":"markdown","94771250":"markdown","b80410ab":"markdown","3992c8f4":"markdown"},"source":{"1cb6d0d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7ff1f680":"train_df = pd.read_csv(\"\/kaggle\/input\/alcohol-consumption\/gapminder_alcohol.csv\")","e3a081bb":"train_df.head(10)","fd37cc3b":"train_df.describe()","19f83c8c":"print(len(train_df))\nsummary = pd.DataFrame(train_df.dtypes)\nsummary[\"Null\"] = train_df.isnull().sum()\nsummary[\"first\"] = train_df.loc[0]\nsummary[\"second\"] = train_df.loc[1]\nsummary[\"third\"] = train_df.loc[2]\nsummary[\"unique\"] = train_df.nunique()\nsummary","53448af0":"def get_row_col_idx(idx):\n    row_idx = idx\/\/2\n    col_idx = [0 if idx%2 == 0 else 1]\n    return row_idx, col_idx[0]","76a0f540":"fig, ax = plt.subplots(3,2,figsize = (20,20))\nfor idx, cols in enumerate(train_df.columns.to_list()[1:]):\n    row_idx, col_idx = get_row_col_idx(idx)\n    ax1 = ax[row_idx][col_idx]\n    sns.distplot(train_df[cols], ax = ax1, color = \"purple\")\n    ","6e993989":"fig, ax = plt.subplots(3,2,figsize = (20,20))\nfor idx, cols in enumerate(train_df.columns.to_list()[1:]):\n    row_idx, col_idx = get_row_col_idx(idx)\n    ax1 = ax[row_idx][col_idx]\n    sns.boxplot(train_df[cols], ax = ax1, color = \"red\")\n    ","5a1196b5":"correlations = train_df.corr(method='pearson')\nsns.heatmap(correlations)","e2cb0f11":"fig, ax = plt.subplots(1,4, figsize = (20,5))\nsns.scatterplot(x=\"suicideper100th\", y = \"incomeperperson\", data = train_df, ax = ax[0])\nsns.scatterplot(x = \"employrate\", y = \"incomeperperson\", data = train_df, ax = ax[1])\nsns.scatterplot(x = \"alcconsumption\", y = \"incomeperperson\", data = train_df, ax = ax[2])\nsns.scatterplot(x = \"urbanrate\", y = \"incomeperperson\", data = train_df, ax = ax[3])","a3e05a99":"train_df.columns","32c0773f":"fig, ax = plt.subplots(1,4, figsize = (20,5))\nsns.scatterplot(x=\"alcconsumption\", y = \"employrate\", data = train_df, ax = ax[0])\nsns.scatterplot(x=\"suicideper100th\", y=\"alcconsumption\", data = train_df, ax= ax[1])\nsns.scatterplot(x=\"suicideper100th\", y=\"urbanrate\", data = train_df, ax = ax[2])\nsns.scatterplot(x=\"employrate\", y=\"urbanrate\", data = train_df, ax = ax[3])\n","39011244":"def write_percentage(train_df, ax):\n    for patches in ax.patches:\n        height = patches.get_height()\n        width = patches.get_width()\n        x_loc = patches.get_x()\n        values = height\n        ax.text(x = x_loc + width\/2, y=height, s = '{:1.1f}'.format(values), fontsize = 12 )","134e88b0":"fig, ax = plt.subplots(5, 2, figsize = (20,25))\nfor idx, cols in enumerate(train_df.columns.to_list()[1:]):\n        get_max_10_coutries = train_df.sort_values(by=cols, ascending=False)[[\"country\", cols]][0:10]\n        sns.barplot(x= \"country\", y = cols, data = get_max_10_coutries, ax = ax[idx][0] )\n        ax[idx][0].set_xticklabels(ax[idx][0].get_xticklabels(), rotation = 45)\n        write_percentage(\"employrate\", ax[idx][0])\n        get_min_10_countries = train_df.sort_values(by=cols, ascending=True)[[\"country\", cols]][0:10]\n        sns.barplot(x= \"country\", y = cols, data = get_min_10_countries, ax = ax[idx][1])\n        ax[idx][1].set_xticklabels(ax[idx][0].get_xticklabels(), rotation = 45)\n        write_percentage(\"employrate\", ax[idx][1])","5920876f":"**Hope this notebook helps you! **\n\n\n**Have a nice day! **","44a5ab1f":"We could see from her the top 10 countries and the bottom 10 coutries with respect to their alcconsumption, incomeperperson, suicideper100th, mplotrate and urbanrate respectively.","db75b733":"From this scatterplot it seems like there is some relaionship in urbanrateand incomeperperson, as the urbanrate is increasing, the incomperperson is also increasing. As the employrate increases the incomeperperson is increasing as well. \nLet's have a look at other plots and see what kind of relation does they have.","f0f03746":"The following obeservations from the above boxplots:\n1. Alcconsumption has a mean around 6 and have few outliers that lies right to the mean.\n2. The mean is arounf 8750 and 50% of the countries are having income per person less than that but the other 50% of the countries are having quite a few outliers which is quite apparent from the chart.\n3. The distribution od suicide per 100th is having mean around 8 and have few outliers to the right.\n4. The data for employment rate is normally distributed and its mean is around 59.\n5. 50% of the countries are having less than 59 urbanrate while other 50% is having 59 and the max is about 100 that is there are few countries having their urban rate of around 100%.","fdcef2c2":"These plots are the ones which were highly correlated, that we figured out in correlation matrix. It does somtime confuse me with positive and negative values, but both the cases are correlated if the value is positive or the value is negative, both the values shows correlation, postive value shows positive correlation and negative value shows negative correlation.","a2cd9b5f":"## ","c03dd972":"We can see that the data is mostly right skewed. The data for employment rate is normally distributed though.\nLet's also have a look at the boxplot.","cb609b55":"We can see here that all the countries are unique. There are few null values in the data. We need to take care of null values.Except country everything is in float.","432d9e38":"From here we could see that incomeper person is quite correlated with suicide100th and employrate. Employrate is correlated with urbanrate. The more the urban popultaion, the more the employment rate. Let's have a look in more detail about these correlations.","56d878f2":"# Bivariate Analysis","e84457f6":"### Correlation between all the columns","512312d0":"#### Analysing Correlations","94771250":"# Summarising Data","b80410ab":"# Analysis wrt Countries","3992c8f4":"# Univariate Analysis"}}