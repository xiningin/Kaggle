{"cell_type":{"c3a3dccc":"code","7357c370":"code","678e156a":"code","d6cfff1c":"code","54b7360d":"code","ea7e2e98":"code","a18b7171":"code","0f355895":"code","0ca2a0e1":"code","9384b354":"code","342d0573":"code","84c19a6a":"code","429865a3":"code","8d37cece":"code","6e4ee33c":"code","19762ad2":"code","6441fa20":"code","e407c813":"code","2f1130c9":"code","5b18b1ef":"code","e86b8e35":"code","785d18db":"code","a995f9a4":"code","9cfc76c7":"code","b31bec96":"code","97e64513":"code","4b8e068b":"markdown","e6a7c78f":"markdown","28c7e7f9":"markdown","1396492b":"markdown","6284e73e":"markdown","9382dcf3":"markdown"},"source":{"c3a3dccc":"import pandas as pd\nimport numpy as np\nimport pickle","7357c370":"df = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')","678e156a":"df.head()","d6cfff1c":"a = df == 0\na","54b7360d":"#remove zero value\ntotalzero = df == 0\nprint(\"Total Zero Values Are\",totalzero.sum().sum())","ea7e2e98":"df_copy = df.copy(deep=True)\n#convert zero to nan\ndf_copy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = df_copy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)","a18b7171":"totalzerodf = df_copy == 0\nprint(\"After Convert Zero values\",totalzerodf.sum().sum())","0f355895":"df_copy.info()","0ca2a0e1":"#total null value\ndf_copy.isnull().sum()","9384b354":"#treat with null values\ndf_copy['Glucose'] = df_copy['Glucose'].fillna(df_copy['Glucose'].mean())\ndf_copy['BloodPressure'] = df_copy['BloodPressure'].fillna(df_copy['BloodPressure'].mean())\ndf_copy['SkinThickness'] = df_copy['SkinThickness'].fillna(df_copy['SkinThickness'].median())\ndf_copy['Insulin']=df_copy['Insulin'].fillna(df_copy['Insulin'].median())\ndf_copy['BMI'] = df_copy['BMI'].fillna(df_copy['BMI'].median())","342d0573":"df_copy.isnull().sum()","84c19a6a":"#Outier\n# import seaborn as sns\n# import matplotlib.pyplot as plt\n\n# plt.subplot(511)\n# sns.boxplot(df_copy['Glucose'])\n\n# plt.subplot(512)\n# sns.boxplot(df_copy['BloodPressure'])\n\n# plt.subplot(513)\n# sns.boxplot(df_copy['SkinThickness'])\n\n# plt.subplot(514)\n# sns.boxplot(df_copy['Insulin'])\n\n# plt.subplot(515)\n# sns.boxplot(df_copy['BMI'])","429865a3":"#split  data\nX = df_copy.drop(columns='Outcome')\ny = df_copy['Outcome']","8d37cece":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.20,random_state = 41)","6e4ee33c":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(X_train,y_train)","19762ad2":"y_pred = lr.predict(X_test)","6441fa20":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test,y_pred)\ncm","e407c813":"lr.score(X_test,y_test)","2f1130c9":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\nrfc.fit(X_train,y_train)","5b18b1ef":"y_pred_rfc = rfc.predict(X_test)","e86b8e35":"cm_rfc = confusion_matrix(y_test,y_pred_rfc)\ncm_rfc","785d18db":"rfc.score(X_test,y_test)","a995f9a4":"df_copy.head()","9cfc76c7":"#result for Logisic Regression\nresult = lr.predict([[0, #Pregnancies\n                  84.0, #Glucose\n                  82.000000, #BloodPressure\n                  31.0, #SkinThickness \n                  125.0, #Insulin\n                  38.2, #BMI\n                  0.233, #DiabetesPedigreeFunction\n                  23 #Age\n                     ]])\nresult\n#logistic regression not give accurate","b31bec96":"#result for Random Forest Classifier\nresult = rfc.predict([[0, #Pregnancies\n                  84.0, #Glucose\n                  82.000000, #BloodPressure\n                  31.0, #SkinThickness \n                  125.0, #Insulin\n                  38.2, #BMI\n                  0.233, #DiabetesPedigreeFunction\n                  23 #Age\n                      ]])\nresult\n#rfc give accurate","97e64513":"# # Creating a pickle file for the classifier use randomforest classifier\n# filename = 'diabetes-prediction-rfc-model.pkl'\n# pickle.dump(rfc, open(filename, 'wb'))","4b8e068b":"## Model Build Logitic Regression","e6a7c78f":"## So in between Logistic and Random forest i am use Random Forest Classifier for this problem","28c7e7f9":"## Data Preprocessing","1396492b":"### Random Forest Score is 0.995","6284e73e":"### Logistic Regression score is 0.825","9382dcf3":"## Random Forest"}}