{"cell_type":{"1e81d53b":"code","35b8f032":"code","9669b807":"code","0953d98b":"code","47e0402f":"code","d50c6123":"code","51faecf5":"code","a1cad61a":"code","0746da07":"code","18e5a883":"code","142ba0eb":"code","64f8a6ba":"code","3aa4f773":"code","7b318ff5":"code","4b9d3a32":"code","5532b1dc":"code","4b9a5cec":"code","d554b56a":"code","fb23e5b0":"code","9ec4da9e":"code","727783a9":"code","c8d7fe85":"code","208eb924":"code","b8c9ded8":"code","3c94c478":"code","02e3e83b":"code","a1888689":"code","3ef9eb55":"code","c720351a":"code","d1395ea5":"code","7233b1e6":"code","b7692a37":"code","c523609e":"code","ed7416fe":"code","7967943a":"code","216a7ee6":"code","38529fa9":"code","edf52c41":"code","816f2f1d":"code","48c35356":"code","7893478f":"code","20ecb8e5":"code","dd4fe50d":"code","1b38245d":"code","0457752c":"code","9355e065":"code","790734c6":"code","f60edeca":"code","80904e92":"code","3d92cbea":"code","926484cd":"code","cbf8af14":"code","03c217e0":"code","7f560bdf":"code","8554543d":"code","b99c1802":"code","31305d9e":"code","1ac82bf3":"markdown","a7ea8b77":"markdown","0602f673":"markdown","982f901a":"markdown","8dbee6ca":"markdown","3d05e6f5":"markdown","b0983e6e":"markdown","7764e2b6":"markdown","06e83214":"markdown","3d63231d":"markdown","dde29fbf":"markdown","7cddde49":"markdown","1661b910":"markdown","5425e20e":"markdown","3da4da89":"markdown","feb339a7":"markdown","8f10b720":"markdown","21b78e65":"markdown","0e822c0d":"markdown","63733e70":"markdown"},"source":{"1e81d53b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","35b8f032":"ls ..\/input","9669b807":"# csv\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\ntrain_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')\nsample_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","0953d98b":"train_data.head()","47e0402f":"test_data.head()","d50c6123":"#\u4e21\u8005\u306e\u9055\u3044\u306f\u3001\u300csurvived\u300d\u5217\u304c\u3042\u308b\u304b\u5426\u304b\u3002 \n#\u30c7\u30fc\u30bf\u3092\u52a0\u5de5\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u4e21\u8005\u3092\u7d50\u5408\u3059\u308b\u3002\u305d\u306e\u305f\u3081\u306b\u3001\u5217\u6570\u3092\u63c3\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u300ctest\u300d\u30c7\u30fc\u30bf\u306b\u300csurvived\u300d\u5217\u3092\u8ffd\u52a0\u3057\u5404\u9805\u76ee\u306f\u300cnan\u300d\u306b\u3059\u308b\u3002\ntest_data['Survived'] = np.nan\ndf = pd.concat([train_data, test_data], ignore_index=True, sort=False)","51faecf5":"#\u300csurvived\u300d\u5217\u306b\u300cNaN\u300d\u304c\u3042\u308b\u306e\u304c\u78ba\u8a8d\u3067\u304d\u308b\ntest_data.head()","a1cad61a":"df.info()","0746da07":"import matplotlib.pyplot as plt\nimport seaborn as sns","18e5a883":"# Sex\u3068\u751f\u5b58\u7387\u306e\u95a2\u4fc2 \nsns.barplot(x='Sex', y='Survived', data=df, palette='Set3') #palette\u306f\u8272\u3092\u8abf\u6574\u3059\u308b\nplt.show()","142ba0eb":"from sklearn.ensemble import RandomForestRegressor","64f8a6ba":"# \u63a8\u5b9a\u306b\u4f7f\u7528\u3059\u308b\u9805\u76ee\u3092\u6307\u5b9a\nage_df = df[['Age', 'Pclass','Sex','Parch','SibSp']]","3aa4f773":"# \u30e9\u30d9\u30eb\u7279\u5fb4\u91cf\u3092\u30ef\u30f3\u30db\u30c3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nage_df=pd.get_dummies(age_df)","7b318ff5":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u96e2\u3057\u3001numpy\u306b\u5909\u63db\n# \u5206\u96e2\u6761\u4ef6\u3068\u3057\u3066\u306f\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u306f\u300cnotnull\u300d\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u300cisnull\u300d\nknown_age = age_df[age_df.Age.notnull()].values  \nunknown_age = age_df[age_df.Age.isnull()].values","4b9d3a32":"known_age","5532b1dc":"# df.inofo()\u3067\u898b\u305f\u901a\u308a\u306e\u884c\u6570\u306b\u306a\u3063\u3066\u3044\u308b\nlen(known_age)","4b9a5cec":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092X,y\u306b\u5206\u96e2\nX = known_age[:,1:] # \u300c1:\u300d\u3088\u308a\uff12\u5217\u76ee\u4ee5\u964d\u3092\u53d6\u5f97\ny = known_age[:,0] #\u300c0\u300d\u3088\u308a\uff11\u5217\u76ee\u306e\u307f\u53d6\u5f97\uff08\u6b63\u89e3\u30e9\u30d9\u30eb\uff09","d554b56a":"# \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067\u63a8\u5b9a\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\nrfr = RandomForestRegressor(random_state=0, n_estimators=100, n_jobs=-1)\nrfr.fit(X, y)","fb23e5b0":"abc = [1,2, 3, 4, 5, 6, 7]\nabc[1::]","9ec4da9e":"unknown_age","727783a9":"df.Age","c8d7fe85":"# \u63a8\u5b9a\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306eAge\u3092\u4e88\u6e2c\u3057\u3001\u88dc\u5b8c\npredictedAges = rfr.predict(unknown_age[:, 1::]) # unknown_age\u306e\uff11\u5217\u76ee\u306f\u300cnan\u300d \u3064\u307e\u308a\u3001\u884c\u5168\u3066\u306e\uff11\u5217\u76ee\u3092\u9664\u3044\u305f\u3084\u3064\u3067\u63a8\u5b9a\u30e2\u30c7\u30eb\u306b\u304b\u3051\u308b\ndf.loc[(df.Age.isnull()), 'Age'] = predictedAges #loc[\"\u884c\",\"\u5217\"]\u3000\u884c\uff1ddf\u306eAge\u306enull\u3002\u5217\uff1ddf\u306eAge\u3000\u305d\u308c\u306bpredictedAges\u3092\u4ee3\u5165","208eb924":"print(predictedAges)\nlen(predictedAges)","b8c9ded8":"df.Age","3c94c478":"# Age\u306enull\u304c\u306a\u304f\u306a\u3063\u305f\u306e\u304c\u308f\u304b\u308b\ndf.info()","02e3e83b":"# \u5e74\u9f62\u5225\u751f\u5b58\u66f2\u7dda\u3068\u6b7b\u4ea1\u66f2\u7dda\nfacet = sns.FacetGrid(df[0:890], hue=\"Survived\",aspect=2)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, df.loc[0:890,'Age'].max()))\nfacet.add_legend()\nplt.show()","a1888689":"# Name\u304b\u3089\u656c\u79f0(Title)\u3092\u62bd\u51fa\u3057\u3001\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\ndf['Title'] = df['Name'].map(lambda x: x.split(', ')[1].split('. ')[0])\n\n# split(', ')[1]\u3000\u3067\u306f\u3001Braund, Mr. Owen Harris\u3092\u300cBraund\u300d\u3068\u300cMr. Owen Harris\u300d\u306b\u5206\u5272\u3057\u3066\u3001\u30ea\u30b9\u30c8\u300c\uff11\u300d\u306e\u300cMr. Owen Harris\u300d\u3092\u8fd4\u3059\n# split('. ')[0]  \u3067\u306f\u3001\u300cMr. Owen Harris\u300d\u3092\u300cMr\u300d\u3068\u300cOwen Harris\u300d\u306b\u5206\u5272\u3057\u3066\u30ea\u30b9\u30c8\u300c0\u300d\u306e\u300cMr\u300d\u3092\u8fd4\u3059","3ef9eb55":"df.head(30)\n# title\u5217\u304c\u3067\u304d\u3001\u656c\u79f0\u304c\u5165\u529b\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308b","c720351a":"#\u656c\u79f0\u306e\u7a2e\u985e\u304c\u591a\u3044\u306e\u3067\u307e\u3068\u3081\u308b\u3002\u305d\u3057\u3066\u30b0\u30e9\u30d5\u306b\u3059\u308b\u3002\ndf['Title'].replace(['Capt', 'Col', 'Major', 'Dr', 'Rev'], 'Officer', inplace=True)\ndf['Title'].replace(['Don', 'Sir',  'the Countess', 'Lady', 'Dona'], 'Royalty', inplace=True)\ndf['Title'].replace(['Mme', 'Ms'], 'Mrs', inplace=True)\ndf['Title'].replace(['Mlle'], 'Miss', inplace=True)\ndf['Title'].replace(['Jonkheer'], 'Master', inplace=True)\nsns.barplot(x='Title', y='Survived', data=df, palette='Set3')","d1395ea5":"# ------------ Surname ------------\n# Name\u304b\u3089Surname(\u82d7\u5b57)\u3092\u62bd\u51fa\ndf['Surname'] = df['Name'].map(lambda name:name.split(',')[0].strip())\n# strip\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u6587\u5b57\u5217\u578b\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u7279\u5b9a\u306e\u6587\u5b57\u5217\u3084\u7a7a\u767d\u6587\u5b57\u3092\u524a\u9664\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\u7279\u5b9a\u306e\u6587\u5b57\u3092\u53d6\u308a\u9664\u304f\u3053\u3068\u304c\u53ef\u80fd\u3002\u4eca\u56de\u306f\u7a7a\u767d\u3092\u53d6\u308a\u9664\u304f\n\n# \u540c\u3058Surname(\u82d7\u5b57)\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u30ab\u30a6\u30f3\u30c8(\u51fa\u73fe\u56de\u6570\u304c2\u4ee5\u4e0a\u306a\u3089\u5bb6\u65cf)\ndf['FamilyGroup'] = df['Surname'].map(df['Surname'].value_counts()) ","7233b1e6":"df.head(30)","b7692a37":"# \u5bb6\u65cf\u306716\u624d\u4ee5\u4e0b\u307e\u305f\u306f\u5973\u6027\u306e\u751f\u5b58\u7387\nFemale_Child_Group=df.loc[(df['FamilyGroup']>=2) & ((df['Age']<=16) | (df['Sex']=='female'))]\nFemale_Child_Group=Female_Child_Group.groupby('Surname')['Survived'].mean()\nprint(Female_Child_Group.value_counts())","c523609e":"# \u5bb6\u65cf\u306716\u624d\u8d85\u3048\u304b\u3064\u7537\u6027\u306e\u751f\u5b58\u7387\nMale_Adult_Group=df.loc[(df['FamilyGroup']>=2) & (df['Age']>16) & (df['Sex']=='male')]\nMale_Adult_List=Male_Adult_Group.groupby('Surname')['Survived'].mean()\nprint(Male_Adult_List.value_counts())","ed7416fe":"Female_Child_Group","7967943a":"Male_Adult_List","216a7ee6":"# \u30c7\u30c3\u30c9\u30ea\u30b9\u30c8\u3068\u30b5\u30d0\u30a4\u30d6\u30ea\u30b9\u30c8\u306e\u4f5c\u6210\nDead_list=set(Female_Child_Group[Female_Child_Group.apply(lambda x:x==0)].index)  # apply\u30e1\u30bd\u30c3\u30c9\u306fSeries\u306e\u5404\u8981\u7d20\u306b\u9069\u7528\nSurvived_list=set(Male_Adult_List[Male_Adult_List.apply(lambda x:x==1)].index)","38529fa9":"# \u30c7\u30c3\u30c9\u30ea\u30b9\u30c8\u3068\u30b5\u30d0\u30a4\u30d6\u30ea\u30b9\u30c8\u306e\u8868\u793a\nprint('Dead_list = ', Dead_list)\nprint('Survived_list = ', Survived_list)","edf52c41":"# \u30c7\u30c3\u30c9\u30ea\u30b9\u30c8\u3068\u30b5\u30d0\u30a4\u30d6\u30ea\u30b9\u30c8\u3092Sex, Age, Title \u306b\u53cd\u6620\u3055\u305b\u308b\ndf.loc[(df['Survived'].isnull()) & (df['Surname'].apply(lambda x:x in Dead_list)),\\\n             ['Sex','Age','Title']] = ['male',28.0,'Mr']\ndf.loc[(df['Survived'].isnull()) & (df['Surname'].apply(lambda x:x in Survived_list)),\\\n             ['Sex','Age','Title']] = ['female',5.0,'Mrs']","816f2f1d":"df.info()","48c35356":"# \u6b20\u640d\u5024\u3092 Embarked='S', Pclass=3 \u306e\u5e73\u5747\u5024\u3067\u88dc\u5b8c\nfare=df.loc[(df['Embarked'] == 'S') & (df['Pclass'] == 3), 'Fare'].median()\ndf['Fare']=df['Fare'].fillna(fare)","7893478f":"# Family = SibSp + Parch + 1 \u3092\u7279\u5fb4\u91cf\u3068\u3057\u3001\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\ndf['Family']=df['SibSp']+df['Parch']+1\ndf.loc[(df['Family']>=2) & (df['Family']<=4), 'Family_label'] = 2\ndf.loc[(df['Family']>=5) & (df['Family']<=7) | (df['Family']==1), 'Family_label'] = 1  # == \u306b\u6ce8\u610f\ndf.loc[(df['Family']>=8), 'Family_label'] = 0","20ecb8e5":"# \u540c\u4e00Ticket\u30ca\u30f3\u30d0\u30fc\u306e\u4eba\u304c\u4f55\u4eba\u3044\u308b\u304b\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u62bd\u51fa\nTicket_Count = dict(df['Ticket'].value_counts())\ndf['TicketGroup'] = df['Ticket'].map(Ticket_Count)\nsns.barplot(x='TicketGroup', y='Survived', data=df, palette='Set3')\nplt.show()","dd4fe50d":"# \u751f\u5b58\u7387\u30673\u3064\u306b\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\ndf.loc[(df['TicketGroup']>=2) & (df['TicketGroup']<=4), 'Ticket_label'] = 2\ndf.loc[(df['TicketGroup']>=5) & (df['TicketGroup']<=8) | (df['TicketGroup']==1), 'Ticket_label'] = 1  \ndf.loc[(df['TicketGroup']>=11), 'Ticket_label'] = 0\nsns.barplot(x='Ticket_label', y='Survived', data=df, palette='Set3')\nplt.show()","1b38245d":"# Cabin\u306e\u5148\u982d\u6587\u5b57\u3092\u7279\u5fb4\u91cf\u3068\u3059\u308b(\u6b20\u640d\u5024\u306f U )\ndf['Cabin'] = df['Cabin'].fillna('Unknown')\ndf['Cabin_label']=df['Cabin'].str.get(0)\nsns.barplot(x='Cabin_label', y='Survived', data=df, palette='Set3')\nplt.show()","0457752c":"# \u6b20\u640d\u5024\u3092S\u3067\u88dc\u5b8c\uff08S\u304c\u4e00\u756a\u591a\u3044\u305f\u3081\uff09\ndf['Embarked'] = df['Embarked'].fillna('S') ","9355e065":"# ------------- \u524d\u51e6\u7406 ---------------\n# \u63a8\u5b9a\u306b\u4f7f\u7528\u3059\u308b\u9805\u76ee\u3092\u6307\u5b9a\ndf = df[['Survived','Pclass','Sex','Age','Fare','Embarked','Title','Family_label','Cabin_label','Ticket_label']]\n\n# \u30e9\u30d9\u30eb\u7279\u5fb4\u91cf\u3092\u30ef\u30f3\u30db\u30c3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\ndf = pd.get_dummies(df)\n\n# \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092 train\u3068test\u306b\u5206\u5272\ntrain = df[df['Survived'].notnull()]\ntest = df[df['Survived'].isnull()].drop('Survived',axis=1)\n\n# \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092numpy\u306b\u5909\u63db\nX = train.values[:,1:]  \ny = train.values[:,0] \ntest_x = test.values","790734c6":"# ----------- \u63a8\u5b9a\u30e2\u30c7\u30eb\u69cb\u7bc9 ---------------\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import cross_validate\n\n# \u63a1\u7528\u3059\u308b\u7279\u5fb4\u91cf\u309225\u500b\u304b\u308920\u500b\u306b\u7d5e\u308a\u8fbc\u3080\nselect = SelectKBest(k = 20)\n\nclf = RandomForestClassifier(random_state = 10, \n                             warm_start = True,  # \u65e2\u306b\u30d5\u30a3\u30c3\u30c8\u3057\u305f\u30e2\u30c7\u30eb\u306b\u5b66\u7fd2\u3092\u8ffd\u52a0 \n                             n_estimators = 26,\n                             max_depth = 6, \n                             max_features = 'sqrt')\npipeline = make_pipeline(select, clf) # \u5404\u30b9\u30c6\u30c3\u30d7\u306b\u660e\u793a\u7684\u306b\u540d\u524d\u3092\u3064\u3051\u306a\u304f\u3066\u3082\u3001\u81ea\u52d5\u3067\u30af\u30e9\u30b9\u540d\u306e\u5c0f\u6587\u5b57\u306b\u3088\u3063\u3066\u540d\u524d\u3092\u4ed8\u3051\u3066\u304f\u308c\u308b\u3002\npipeline.fit(X, y)\n\n# \u30d5\u30a3\u30c3\u30c8\u7d50\u679c\u306e\u8868\u793a\ncv_result = cross_validate(pipeline, X, y, cv= 10) # cv\u306f\u4ea4\u5dee\u691c\u8a3c\u306e\u5206\u5272\u6570\nprint('mean_score = ', np.mean(cv_result['test_score']))\nprint('mean_std = ', np.std(cv_result['test_score']))","f60edeca":"# --------\u3000\u63a1\u7528\u3057\u305f\u7279\u5fb4\u91cf ---------------\n# \u63a1\u7528\u306e\u53ef\u5426\u72b6\u6cc1\nmask= select.get_support()\n\n# \u9805\u76ee\u306e\u30ea\u30b9\u30c8\nlist_col = list(df.columns[1:])\n\n# \u9805\u76ee\u5225\u306e\u63a1\u7528\u53ef\u5426\u306e\u4e00\u89a7\u8868\nfor i, j in enumerate(list_col):\n    print('No'+str(i+1), j,'=',  mask[i])\n\n# \u30b7\u30a7\u30a4\u30d7\u306e\u78ba\u8a8d\nX_selected = select.transform(X)\nprint('X.shape={}, X_selected.shape={}'.format(X.shape, X_selected.shape))","80904e92":"# ----- Submit data\u306e\u4f5c\u6210\u3000------- \nPassengerId=test_data['PassengerId']\npredictions = pipeline.predict(test_x)\nsubmission = pd.DataFrame({\"PassengerId\": PassengerId, \"Survived\": predictions.astype(np.int32)})\nsubmission.to_csv(\"\u5bbf\u984c\u2462\", index=False)","3d92cbea":"import lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# X_train\u3068Y_train\u3092train\u3068valid\u306b\u5206\u5272\ntrain_x, valid_x, train_y, valid_y = train_test_split(X, y, test_size=0.33, random_state=0)\n\n# LightGBM\u306e\u5206\u985e\u5668\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\ngbm = lgb.LGBMClassifier(objective='binary')\n\n# train\u3068valid\u3092\u6307\u5b9a\u3057\u5b66\u7fd2\ngbm.fit(train_x, train_y, eval_set = [(valid_x, valid_y)],\n        early_stopping_rounds=20,  # 20\u56de\u9023\u7d9a\u3067loss\u304c\u4e0b\u304c\u3089\u306a\u304b\u3063\u305f\u3089\u7d42\u4e86\n        verbose=10  # 10round\u6bce\u306b\u3001loss\u3092\u8868\u793a\n) ;","926484cd":"# valid_x\u306b\u3064\u3044\u3066\u63a8\u8ad6\noof = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)  # oof\u306fout of fold\nprint('score', round(accuracy_score(valid_y, oof)*100,2), '%')  # \u6b63\u89e3\u7387\u306e\u8868\u793a\n\n# out of fold\u306f\u5b66\u7fd2\u306b\u4f7f\u3063\u3066\u3044\u308b\u30c7\u30fc\u30bf\u4ee5\u5916\u306e\u4e88\u6e2c","cbf8af14":"# test\u306e\u4e88\u6e2c\ntest_pred = gbm.predict(test, num_iteration=gbm.best_iteration_)  # test\u306e\u4e88\u6e2c\nsample_submission['Survived'] = test_pred  # sample_submission\u306eSurvived\u5217\u3092test_pred\u306b\u7f6e\u304d\u63db\u3048\n","03c217e0":"sample_submission.head()","7f560bdf":"sample_submission.dtypes","8554543d":"# float\u304b\u3089int\u306b\u5909\u63db\u3059\u308b\nsample_submission[\"Survived\"] = sample_submission[\"Survived\"].astype('int')\n","b99c1802":"sample_submission.dtypes","31305d9e":"sample_submission.to_csv('\u5bbf\u984c\u2462_r2', index=False)  # csv\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u51fa\u3057\n\n# \uff17\uff17\uff05\u306e\u6b63\u89e3\u7387\u3067\u7d42\u308f\u308b\u3002\u3002\u3002","1ac82bf3":"\u25c6Age\u306e\u6b20\u640d\u5024\u88dc\u5b8c\n\u6b20\u640d\u5024\u304c\u306a\u3044\u5b8c\u5168\u306a\u30c7\u30fc\u30bf\uff08Pclass, Sex, SibSp, Parch)\u3092\u4f7f\u3063\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067Age\u306e\u6b20\u640d\u5024\u3092\u63a8\u5b9a","a7ea8b77":"\u25c6Cabin\u3000\u6b20\u640d\u5024\u304c\u591a\u3044\u305f\u3081\u88dc\u5b8c\u305b\u305a","0602f673":"\u25c6\u3000Ticket\u304b\u3089\u610f\u5473\u306e\u3042\u308b\u7279\u5fb4\u91cf\u3092\u53d6\u308a\u51fa\u3059","982f901a":"\u25c6Fare\u306e\u6b20\u640d\u5024\u306e\u88dc\u5b8c","8dbee6ca":"\u4eba\u6570\u304c2\u301c4\u4eba\u306e\u751f\u5b58\u7387\u304c\u9ad8\u304f\u30015\u301c8\u4eba\u30681\u4eba\u306e\u751f\u5b58\u7387\u304c\u4e2d\u4f4d\u300111\u4eba\u306e\u751f\u5b58\u7387\u306f\u30bc\u30ed\u3067\u3059\u3002\u5f93\u3063\u3066\u30013\u3064\u306b\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u307e\u3059\u3002","3d05e6f5":"SibSp\u306f\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u306b\u540c\u4e57\u3057\u3066\u3044\u308b\u5144\u5f1f\u3084\u914d\u5076\u8005\u306e\u6570\u3001Parch\u306f\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u306b\u540c\u4e57\u3057\u3066\u3044\u308b\u89aa\u3084\u5b50\u4f9b\u306e\u6570\u3002\u72ec\u7acb\u3067\u7279\u5fb4\u91cf\u3068\u3059\u308b\u3088\u308a\u3001\u5408\u8a08\u3057\u3066Family\u306b\u3057\u305f\u65b9\u304c\u7279\u5fb4\u91cf\u3068\u3057\u3066\u306f\u512a\u308c\u3066\u3044\u307e\u3059\u3002\u751f\u5b58\u7387\u3067\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3082\u7279\u306b\u554f\u984c\u306a\u3044\u3067\u3057\u3087\u3046\u3002","b0983e6e":"16\u624d\u3092\u8d85\u3048\u304b\u3064\u7537\u6027\u306e\u30b0\u30eb\u30fc\u30d7\u306f\u3001115\u30b0\u30eb\u30fc\u30d7\u3068\u591a\u304f\u304c\u751f\u5b58\u73870%\u306a\u4e00\u65b9\u3067\u300121\u30b0\u30eb\u30fc\u30d7\u306b\u9650\u3063\u3066\u306f\u751f\u5b58\u7387100%\u3067\u3059\u3002\u3064\u307e\u308a\u3001\u591a\u304f\u306e\u30b0\u30eb\u30fc\u30d7\u306f\u5168\u6ec5\u306a\u306e\u306b\u3001\u4e00\u90e8\u306e\u30b0\u30eb\u30fc\u30d7\u3060\u3051\u5168\u54e1\u751f\u5b58\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u3002","7764e2b6":"\u25c6\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306b\u3088\u308b\u63a8\u5b9a\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9","06e83214":"Ticket\u30ca\u30f3\u30d0\u30fc\u304c\u540c\u3058\u4eba\u304c\u4f55\u4eba\u3044\u308b\u304b\u3067\u7279\u5fb4\u91cf\u3092\u4f5c\u3063\u3066\u3044\u308b\u4eba\u304c\u3044\u307e\u3057\u305f\u3002\u306a\u308b\u307b\u3069\u3001\u305d\u308c\u306a\u3089\u7406\u5c48\u304c\u5206\u304b\u308a\u307e\u3059\u3002Ticket\u30ca\u30f3\u30d0\u30fc\u304c\u540c\u3058\u4eba\u306f\u3001\u591a\u5206\u540c\u3058\u90e8\u5c4b\u306b\u5c45\u3066\u904b\u547d\u3092\u5171\u306b\u3057\u6613\u3044\u3057\u3001\u4eba\u6570\u306b\u3088\u3063\u3066\u751f\u5b58\u306e\u3057\u3084\u3059\u3055\u3082\u5909\u308f\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3057\u3087\u3046","3d63231d":"surname\u3068familygroup\u304c\u8ffd\u52a0\u3055\u308c\u305f\u306e\u3092\u78ba\u8a8d","dde29fbf":"LightGBM\u306e\u5206\u985e\u5668\u306b\u3066\u5b9f\u88c5","7cddde49":"\u25c6SibSp\u3068Parch\u304b\u3089\u7279\u5fb4\u91cf\u3092\u4f5c\u308b","1661b910":"\u25c6Embarked","5425e20e":"\u25c6Name\u304b\u3089\u65b0\u305f\u306a\u7279\u5fb4\u91cf\u3092\u4f5c\u308a\u51fa\u3059","3da4da89":"Name\u304b\u3089\u82d7\u5b57\u3092\u53d6\u308a\u51fa\u3057\u3001\u540c\u3058\u82d7\u5b57\u304c\u8907\u6570\u4eba\u3044\u308b\u30b0\u30eb\u30fc\u30d7\u306b\u6ce8\u76ee\u3059\u308b\u4eba\u304c\u3044\u307e\u3057\u305f\u3002\n\u3000\n\u3064\u307e\u308a\u3001\u5bb6\u65cf\u304c\u3044\u305f\u5834\u5408\u3001\u904b\u547d\u3092\u5171\u306b\u3059\u308b\u50be\u5411\u304c\u3042\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u8a00\u3046\u8996\u70b9\u3067\u3059\u3002","feb339a7":"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e2d\u3067\u3001\u30c7\u30c3\u30c9\u30ea\u30b9\u30c8\u306b\u8a72\u5f53\u3057\u305f\u884c\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u5fc5\u305a\u6b7b\u4ea1\u3068\u5224\u65ad\u3055\u308c\u308b\u3088\u3046\u306b Sex, Age, Title\u3092\u5178\u578b\u7684\u306a\u6b7b\u4ea1\u30c7\u30fc\u30bf\u306b\u66f8\u304d\u63db\u3048\u3001\u30b5\u30d0\u30a4\u30d6\u30ea\u30b9\u30c8\u306b\u8a72\u5f53\u3057\u305f\u884c\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u5fc5\u305a\u751f\u5b58\u3068\u5224\u65ad\u3055\u308c\u308b\u3088\u3046\u306b Sex, Age, Title\u3092\u5178\u578b\u7684\u306a\u751f\u5b58\u30c7\u30fc\u30bf\u306b\u66f8\u304d\u63db\u3048\u307e\u3059\u3002","8f10b720":"\u25c6\u524d\u51e6\u7406","21b78e65":"\u305d\u3057\u3066\u3001\u305d\u306e\u5bb6\u65cf\u3092\u300116\u624d\u4ee5\u4e0b\u307e\u305f\u306f\u5973\u6027\u3068\u3044\u3046\u30b0\u30eb\u30fc\u30d7\uff08\u4fd7\u306b\u8a00\u3046\u3001\u5973\u5b50\u4f9b\uff09\u3068\u300116\u624d\u3092\u8d85\u3048\u304b\u3064\u7537\u6027\u3068\u3044\u3046\u30b0\u30eb\u30fc\u30d7\u306b\u5206\u3051\u3066\u751f\u5b58\u7387\u3092\u898b\u308b\u3068\u8208\u5473\u6df1\u3044\u4e8b\u5b9f\u304c\u898b\u3048\u3066\u6765\u307e\u3059\u3002","0e822c0d":"16\u624d\u4ee5\u4e0b\u307e\u305f\u306f\u5973\u6027\u306e\u30b0\u30eb\u30fc\u30d7\u306f\u3001113\u30b0\u30eb\u30fc\u30d7\u3068\u591a\u304f\u304c\u751f\u5b58\u7387100%\u306a\u4e00\u65b9\u3067\u300132\u30b0\u30eb\u30fc\u30d7\u306b\u9650\u3063\u3066\u306f\u751f\u5b58\u73870%\u3067\u3059\u3002\u3064\u307e\u308a\u3001\u591a\u304f\u306e\u30b0\u30eb\u30fc\u30d7\u306f\u5168\u54e1\u751f\u5b58\u3057\u3066\u3044\u308b\u306e\u306b\u3001\u4e00\u90e8\u306e\u30b0\u30eb\u30fc\u30d7\u3060\u3051\u5168\u6ec5\u306a\u306e\u3067\u3059\u3002","63733e70":"\u656c\u79f0\u5225\u306e\u751f\u5b58\u7387\u3092\u898b\u308b\u3068\u3001Mr\u306e\u751f\u5b58\u7387\u304c\u6700\u3082\u4f4e\u304f\u3001Mrs\u306e\u751f\u5b58\u7387\u304c\u6700\u3082\u9ad8\u3044\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002"}}