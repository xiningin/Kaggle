{"cell_type":{"b8263951":"code","b34fc751":"code","a7c817c0":"code","1983e779":"code","987403c3":"code","b4d107e6":"code","9cfc7fc9":"code","2725c7bb":"code","24521071":"code","ab49019b":"code","464f646a":"code","fbf901da":"code","4d4c88f1":"code","4f3a642c":"code","961e23ca":"code","d2d5d8e8":"code","606864ed":"markdown","2b5ea795":"markdown","ddfcf102":"markdown","590a19b4":"markdown","c44e3fca":"markdown","67d41776":"markdown"},"source":{"b8263951":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n# bokeh packages\nfrom bokeh.io import output_file,show,output_notebook,push_notebook\nfrom bokeh.plotting import figure\nfrom bokeh.models import ColumnDataSource,HoverTool,CategoricalColorMapper\nfrom bokeh.layouts import row,column,gridplot\nfrom bokeh.models.widgets import Tabs,Panel\noutput_notebook()","b34fc751":"df_ = pd.read_csv(\"..\/input\/vehicle-claim-fraud-detection\/fraud_oracle.csv\")","a7c817c0":"df = df_.copy()","1983e779":"print(\"#####################################################################################\")\nprint(\"Shape of data: \" + str(df.shape) )\nprint(\"#####################################################################################\")\nprint(\"Missing values: \")\nprint((df.isnull().sum()))\nprint(\"#####################################################################################\")\nprint(df.dtypes)\nprint(\"#####################################################################################\")\nprint(df.head(5))\nprint(\"#####################################################################################\")\nprint(df.describe().T)","987403c3":"# Which columns are categoric;\ncat_col = [col for col in df.columns if df[col].dtypes == \"O\"]\ncat_col","b4d107e6":"# The month with the most accidents (consider with all years)\n\ndf_month = df.groupby(\"Month\").agg({\"Month\":\"count\"})\ndf_month.columns = [\"Counts\"]\ndf_month.reset_index(inplace=True)\nprint(df_month)\n\n\nfig = px.bar(df_month, x='Month', y='Counts', title=\"Number of accidents per month\")\nfig.show()","9cfc7fc9":"# How many accidents happened on which days of the month? (consider with all years)\n\ndf_month_weekday = df.groupby([\"Month\", \"DayOfWeek\"]).agg({\"Month\":\"count\"})\ndf_month_weekday.columns = [\"Counts\"]\ndf_month_weekday.reset_index(inplace=True)\nprint(df_month_weekday.head(10))\n\nfig = px.bar(df_month_weekday, x=\"Month\", y=\"Counts\", color=\"DayOfWeek\",\n             pattern_shape=\"DayOfWeek\", pattern_shape_sequence=[\".\", \"x\", \"+\"],\n            title = \"How many accidents happened on which days of the month?\")\nfig.show()","2725c7bb":"# Gender and marital status of the accident victims (consider with all years)\ndf_sex_maritalstatus = df.groupby([\"Sex\", \"MaritalStatus\"]).agg({\"Sex\":\"count\"})\ndf_sex_maritalstatus.columns = [\"Counts\"]\ndf_sex_maritalstatus.reset_index(inplace=True)\nprint(df_sex_maritalstatus.head(10))\n\n\nfig = px.bar(df_sex_maritalstatus, x=\"Sex\", y=\"Counts\",\n             color='MaritalStatus', barmode='group',\n             height=400,\n            title = \"Gender and marital status of the accident victims\")\nfig.show()","24521071":"# Number of accidents by Years and Months\n\ndf_year_month = df.groupby([\"Year\", \"Month\"]).agg({\"Year\":\"count\"})\ndf_year_month.columns = [\"Counts\"]\ndf_year_month.reset_index(inplace=True)\nprint(df_year_month.head(10))\n\nfig = px.bar(df_year_month, x=\"Year\", y=\"Counts\", color=\"Month\", title=\"Number of accidents by Years and Months\")\nfig.show()","ab49019b":"df_make_vehicle_age = df.groupby([\"Make\", \"AgeOfVehicle\"]).agg({\"Make\":\"count\"})\ndf_make_vehicle_age.columns = [\"Counts\"]\ndf_make_vehicle_age.reset_index(inplace=True)\nprint(df_make_vehicle_age.head(10))\nprint(\"------------------------------------------------------------\")\nprint(\"Car Brands: \")\nprint(df_make_vehicle_age[\"Make\"].unique())","464f646a":"# Ages of vehicles involved in the accident by car brands  (consider with all years)\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=3, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=df_make_vehicle_age[\"AgeOfVehicle\"], \n                     values=df_make_vehicle_age.loc[df_make_vehicle_age[\"Make\"] == \"Accura\"][\"Counts\"], \n                     name=\"Accura\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=df_make_vehicle_age[\"AgeOfVehicle\"], \n                     values=df_make_vehicle_age.loc[df_make_vehicle_age[\"Make\"] == \"BMW\"][\"Counts\"], \n                     name=\"BMW\"),\n              1, 2)\nfig.add_trace(go.Pie(labels=df_make_vehicle_age[\"AgeOfVehicle\"], \n                     values=df_make_vehicle_age.loc[df_make_vehicle_age[\"Make\"] == \"Chevrolet\"][\"Counts\"], \n                     name=\"Chevrolet\"),\n              1, 3)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(\n    title_text=\"Ages of vehicles involved in the accident by car brands\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='Accura', x=0.12, y=0.5, font_size=10, showarrow=False),\n                 dict(text='BMW', x=0.50, y=0.5, font_size=10, showarrow=False),\n                dict(text='Chevrolet', x=0.89, y=0.5, font_size=10, showarrow=False)])\nfig.show()","fbf901da":"# Ages of vehicles involved in the accident by car brands  (consider with all years)\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=3, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=df_make_vehicle_age[\"AgeOfVehicle\"], \n                     values=df_make_vehicle_age.loc[df_make_vehicle_age[\"Make\"] == \"Ferrari\"][\"Counts\"], \n                     name=\"Ferrari\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=df_make_vehicle_age[\"AgeOfVehicle\"], \n                     values=df_make_vehicle_age.loc[df_make_vehicle_age[\"Make\"] == \"Ford\"][\"Counts\"], \n                     name=\"Ford\"),\n              1, 2)\nfig.add_trace(go.Pie(labels=df_make_vehicle_age[\"AgeOfVehicle\"], \n                     values=df_make_vehicle_age.loc[df_make_vehicle_age[\"Make\"] == \"Toyota\"][\"Counts\"], \n                     name=\"Toyota\"),\n              1, 3)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(\n    title_text=\"Ages of vehicles involved in the accident by car brands\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='Ferrari', x=0.12, y=0.5, font_size=10, showarrow=False),\n                 dict(text='Ford', x=0.50, y=0.5, font_size=10, showarrow=False),\n                dict(text='Toyota', x=0.88, y=0.5, font_size=10, showarrow=False)])\nfig.show()","4d4c88f1":"df_exp_vehicle_brand = df.groupby([\"Make\", \"VehiclePrice\"]).agg({\"Make\":\"count\"})\ndf_exp_vehicle_brand.columns = [\"Counts\"]\ndf_exp_vehicle_brand.reset_index(inplace=True)\nprint(df_exp_vehicle_brand.head(10))\nprint(\"------------------------------------------------------------\")\nprint(\"Vehicle Prices: \")\nprint(df_exp_vehicle_brand[\"VehiclePrice\"].unique())","4f3a642c":"# Price of vehicles involved in the accident by car brands  (consider with all years)\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=3, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=df_exp_vehicle_brand[\"VehiclePrice\"], \n                     values=df_exp_vehicle_brand.loc[df_make_vehicle_age[\"Make\"] == \"Accura\"][\"Counts\"], \n                     name=\"Accura\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=df_exp_vehicle_brand[\"VehiclePrice\"], \n                     values=df_exp_vehicle_brand.loc[df_make_vehicle_age[\"Make\"] == \"BMW\"][\"Counts\"], \n                     name=\"BMW\"),\n              1, 2)\nfig.add_trace(go.Pie(labels=df_exp_vehicle_brand[\"VehiclePrice\"], \n                     values=df_exp_vehicle_brand.loc[df_make_vehicle_age[\"Make\"] == \"Chevrolet\"][\"Counts\"], \n                     name=\"Chevrolet\"),\n              1, 3)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(\n    title_text=\"Price of vehicles involved in the accident by car brands\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='Accura', x=0.12, y=0.5, font_size=10, showarrow=False),\n                 dict(text='BMW', x=0.50, y=0.5, font_size=10, showarrow=False),\n                dict(text='Chevrolet', x=0.89, y=0.5, font_size=10, showarrow=False)])\nfig.show()","961e23ca":"# Price of vehicles involved in the accident by car brands  (consider with all years)\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=3, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=df_exp_vehicle_brand[\"VehiclePrice\"], \n                     values=df_exp_vehicle_brand.loc[df_make_vehicle_age[\"Make\"] == \"Accura\"][\"Counts\"], \n                     name=\"Ferrari\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=df_exp_vehicle_brand[\"VehiclePrice\"], \n                     values=df_exp_vehicle_brand.loc[df_make_vehicle_age[\"Make\"] == \"BMW\"][\"Counts\"], \n                     name=\"Ford\"),\n              1, 2)\nfig.add_trace(go.Pie(labels=df_exp_vehicle_brand[\"VehiclePrice\"], \n                     values=df_exp_vehicle_brand.loc[df_make_vehicle_age[\"Make\"] == \"Chevrolet\"][\"Counts\"], \n                     name=\"Toyota\"),\n              1, 3)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(\n    title_text=\"Price of vehicles involved in the accident by car brands\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='Ferrari', x=0.12, y=0.5, font_size=10, showarrow=False),\n                 dict(text='Ford', x=0.50, y=0.5, font_size=10, showarrow=False),\n                dict(text='Toyota', x=0.88, y=0.5, font_size=10, showarrow=False)])\nfig.show()","d2d5d8e8":"# Regions where accidents occurred by years\ndf_area_year = df.groupby([\"AccidentArea\", \"Year\"]).agg({\"AccidentArea\":\"count\"})\ndf_area_year.columns = [\"Counts\"]\ndf_area_year.reset_index(inplace=True)\nprint(df_area_year.head(10))\n\n\nfig = px.bar(df_area_year, x=\"Year\", y=\"Counts\",\n             color='AccidentArea', barmode='group',\n             height=400,\n            title = \"Regions where accidents occurred by year\")\nfig.show()","606864ed":"![Continue](https:\/\/image.freepik.com\/free-vector\/be-continued-comic-style-background_10876-739.jpg)","2b5ea795":"#### *Analysis of Categorical Variables;*","ddfcf102":"# FRAUD DATA ANALYSIS WITH PLOTLY","590a19b4":"### 2. Exploratory Data Analysis","c44e3fca":"![Fraud](https:\/\/dentalsleeppractice.com\/wp-content\/uploads\/2016\/04\/Legal_Berley_600x300.jpg)","67d41776":"## Contents;\n\n### 1. Import Libraries"}}