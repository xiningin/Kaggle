{"cell_type":{"e6dcd092":"code","acbc656b":"code","84da741a":"code","de780cef":"code","d4a6e566":"code","3f3d6ca5":"code","4e08c4e3":"code","befe3c49":"code","ed14bcad":"code","1e059162":"code","351f61a8":"code","61744d09":"code","2f3ffc68":"code","13dbe8e8":"code","399405ae":"code","c06966e5":"code","8dd944cd":"code","f1860ba7":"markdown","ad11caab":"markdown","48290f1d":"markdown","848ca47f":"markdown","06009dbe":"markdown","7b8d1fbb":"markdown","36ef047d":"markdown","cbd7ad2c":"markdown"},"source":{"e6dcd092":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom fbprophet import Prophet\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nplt.style.use('fivethirtyeight')","acbc656b":"pjme = pd.read_csv('..\/input\/PJME_hourly.csv', index_col=[0], parse_dates=[0])\n","84da741a":"color_pal = [\"#F8766D\", \"#D39200\", \"#93AA00\", \"#00BA38\", \"#00C19F\", \"#00B9E3\", \"#619CFF\", \"#DB72FB\"]\n_ = pjme.plot(style='.', figsize=(15,5), color=color_pal[0], title='PJM East')","de780cef":"pjme.index","d4a6e566":"split_date = '01-Jan-2015'\npjme_train = pjme.loc[pjme.index <= split_date].copy()\npjme_test = pjme.loc[pjme.index > split_date].copy()","3f3d6ca5":"_ = pjme_test \\\n    .rename(columns={'PJME_MW': 'TEST SET'}) \\\n    .join(pjme_train.rename(columns={'PJME_MW': 'TRAINING SET'}), how='outer') \\\n    .plot(figsize=(15,5), title='PJM East', style='.')","4e08c4e3":"# Format data for prophet model using ds and y\npjme_train.reset_index().rename(columns={'Datetime':'ds', 'PJME_MW':'y'}).head()","befe3c49":"# Setup and train model\nmodel = Prophet()\nmodel.fit(pjme_train.reset_index().rename(columns={'Datetime':'ds', 'PJME_MW':'y'}))","ed14bcad":"# Predict on training set with model\npjme_test_fcst = model.predict(df=pjme_test.reset_index().rename(columns={'Datetime':'ds'}))","1e059162":"# Plot the forecast\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nfig = model.plot(pjme_test_fcst, ax=ax)","351f61a8":"# Plot the components\nfig = model.plot_components(pjme_test_fcst)","61744d09":"# Plot the forecast with the actuals\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nax.scatter(pjme_test.index, pjme_test['PJME_MW'], color='r')\nfig = model.plot(pjme_test_fcst, ax=ax)\n","2f3ffc68":"# Plot the forecast with the actuals\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nax.scatter(pjme_test.index, pjme_test['PJME_MW'], color='r')\nfig = model.plot(pjme_test_fcst, ax=ax)\nax.set_xbound(lower='01-01-2015', upper='02-01-2015')\nax.set_ylim(0, 60000)\nplot = plt.suptitle('January 2015 Forecast vs Actuals')","13dbe8e8":"# Plot the forecast with the actuals\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nax.scatter(pjme_test.index, pjme_test['PJME_MW'], color='r')\nfig = model.plot(pjme_test_fcst, ax=ax)\nax.set_xbound(lower='01-01-2015', upper='01-08-2015')\nax.set_ylim(0, 60000)\nplot = plt.suptitle('First Week of January Forecast vs Actuals')","399405ae":"mean_squared_error(y_true=pjme_test['PJME_MW'],\n                   y_pred=pjme_test_fcst['yhat'])","c06966e5":"mean_absolute_error(y_true=pjme_test['PJME_MW'],\n                   y_pred=pjme_test_fcst['yhat'])","8dd944cd":"def mean_absolute_percentage_error(y_true, y_pred): \n    \"\"\"Calculates MAPE given y_true and y_pred\"\"\"\n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\nmean_absolute_percentage_error(y_true=pjme_test['PJME_MW'],\n                   y_pred=pjme_test_fcst['yhat'])","f1860ba7":"# Train\/Test Split\nCut off the data after 2015 to use as our validation set.","ad11caab":"# Look at first month of predictions","48290f1d":"# Error Metrics\n\nOur RMSE error is 43761675  \nOur MAE error is 5181.78  \nOur MAPE error is 16.5%\n\nby comparison in the XGBoost model our errors were significantly less (8.9% MAPE):\n[Check that out here](https:\/\/www.kaggle.com\/robikscube\/hourly-time-series-forecasting-with-xgboost\/)","848ca47f":"# Hourly Time Series Forecasting using Facebook's Prophet","06009dbe":"# Compare Forecast to Actuals","7b8d1fbb":"# Data\nThe data we will be using is hourly power consumption data from PJM. Energy consumtion has some unique charachteristics. It will be interesting to see how prophet picks them up.\n\nPulling the `PJM East` which has data from 2002-2018 for the entire east region.","36ef047d":"# Simple Prophet Model","cbd7ad2c":"# Single Week of Predictions"}}