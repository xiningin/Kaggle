{"cell_type":{"a45a608a":"code","d7dbd92e":"code","3836f724":"code","3397659c":"code","718000d5":"code","79463f32":"code","4c90d3fb":"code","aee45a1b":"code","83a27323":"code","5269f170":"code","5d0a5d97":"code","eaec76a7":"code","35afa8f1":"code","d26c89a5":"code","f2b3d7d4":"code","896eac90":"code","3e8ee6b0":"code","b14f0905":"code","0e9caa8a":"code","b6fcdd94":"code","4ce387c5":"code","bfc27a7e":"code","89c3d0a3":"code","b400feb1":"code","cc6005bb":"code","7c09c480":"code","93fbb75e":"code","b3b400d4":"code","8a23500e":"code","83848ba4":"code","33c5a9e1":"code","ec364037":"code","a6a25d65":"code","6c34a797":"code","393d85d0":"code","2d169de4":"code","f26fbec1":"code","9b842d41":"code","45a0319f":"code","f7008945":"code","395318cf":"markdown","67bb6554":"markdown","f80f92fd":"markdown","7fd9bb46":"markdown","a856acbc":"markdown","eb008981":"markdown","57987cb5":"markdown"},"source":{"a45a608a":"import numpy as np \nimport pandas as pd\nfrom itertools import repeat","d7dbd92e":"id_var = ['Dothraki_id']\nbinary_vars = ['Dragon_attacks', 'White_walker_attacks']\n\nnominal_vars = ['Council_Heading', 'Fort_to_report']\nordinal_vars = ['Boats']\nnumerical_vars = ['Record_year', 'Readiness_to_battle', 'Wights_defeated', 'Bloodline_start_year']\n\ntarget_var = ['Select_for_battle']\npos_class = 1","3836f724":"dtypes = dict(zip(binary_vars + nominal_vars + ordinal_vars, repeat('category')))\ndtypes_float = dict(zip(id_var + numerical_vars + target_var, repeat(float)))\ndtypes.update(dtypes_float)","3397659c":"train_df = pd.read_csv('\/kaggle\/input\/da-datathon-2021\/Train.csv',#, dtype=dtypes, \n                       usecols=id_var+binary_vars+nominal_vars+ordinal_vars+numerical_vars+target_var)\n\ntest_df  = pd.read_csv('\/kaggle\/input\/da-datathon-2021\/Test.csv',#, dtype=dtypes, \n                       usecols=id_var+binary_vars+nominal_vars+ordinal_vars+numerical_vars)\n\ntrain_df.head(3)","718000d5":"train_df.shape","79463f32":"train_df.info()","4c90d3fb":"test_df.info()","aee45a1b":"def mode(s):\n    try:\n        return float(s.mode()[0])\n    except:\n        return 0.0","83a27323":"train_df['Boats'] = train_df['Boats'].replace({'   .': 0, '>=10': 100}).astype(int)\n\ntrain_df['Fort_to_report'] = train_df['Fort_to_report'].fillna(train_df.groupby(['Council_Heading'])['Fort_to_report'].transform(mode))  \n\ntrain_df['White_walker_attacks'] = train_df['White_walker_attacks'].fillna(train_df.groupby(['Fort_to_report'])['White_walker_attacks'].transform(mode))  \n\ntrain_df['Bloodline_start_year'] = train_df['Bloodline_start_year'].fillna(train_df['Bloodline_start_year'].mode()[0])","5269f170":"test_df['Boats'] = test_df['Boats'].replace({'   .': 0, '>=10': 100}).astype(int)\n\ntest_df['Fort_to_report'] = test_df['Fort_to_report'].fillna(test_df.groupby(['Council_Heading'])['Fort_to_report'].transform(mode))  \n\ntest_df['White_walker_attacks'] = test_df['White_walker_attacks'].fillna(test_df.groupby(['Fort_to_report'])['White_walker_attacks'].transform(mode))  \n\ntest_df['Bloodline_start_year'] = test_df['Bloodline_start_year'].fillna(train_df['Bloodline_start_year'].mode()[0])","5d0a5d97":"train_df.info()","eaec76a7":"## sanity check\n\ntrain_df[binary_vars].apply(pd.Series.unique)","35afa8f1":"test_df[nominal_vars].apply(pd.Series.unique)","d26c89a5":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder, RobustScaler, OrdinalEncoder, StandardScaler, LabelBinarizer, MinMaxScaler","f2b3d7d4":"numerical_vars, nominal_vars, ordinal_vars, binary_vars","896eac90":"train_idx = train_df.shape[0]\n\nfull_df = train_df.append(test_df)","3e8ee6b0":"full_df['Readiness_to_battle'].values.reshape(-1, 1).shape","b14f0905":"full_df['Readiness_to_battle'] = StandardScaler().fit_transform(full_df['Readiness_to_battle'].values.reshape(-1, 1))\n\nfull_df['Boats'] = pd.cut(full_df['Boats'], bins=[0, 1, 4, 7, 10], duplicates='drop', \n                          right=False, include_lowest=True, labels=[0, 1, 2, 3]).astype(float).fillna(4)\n\nfull_df['Fort_Wights_defeated']  = full_df.groupby(['Fort_to_report'])['Wights_defeated'].transform(lambda s: s.median())\nfull_df['Wights_defeated'] = full_df['Wights_defeated'].fillna(full_df['Fort_Wights_defeated']).fillna(-1)\nb = sorted([-1, 0]  + full_df['Wights_defeated'].quantile([0.25, 0.50, 0.9, 0.99]).to_list())\nfull_df['Wights_defeated'] = pd.cut(full_df['Wights_defeated'], bins=b, duplicates='drop', \n                          right=False, include_lowest=True, labels=[0, 1, 2, 3, 4]).astype(float).fillna(5)","0e9caa8a":"full_df = full_df.drop(columns=['Record_year', 'Bloodline_start_year', 'Fort_to_report', 'Fort_Wights_defeated'])\nnominal_vars.remove('Fort_to_report')\nnumerical_vars.remove('Record_year')\nnumerical_vars.remove('Bloodline_start_year')","b6fcdd94":"numerical_vars, nominal_vars, ordinal_vars, binary_vars","4ce387c5":"full_df = pd.get_dummies(data=full_df, drop_first=True, columns=(nominal_vars + binary_vars))","bfc27a7e":"full_df.head(3)","89c3d0a3":"X = full_df[:train_idx].drop(columns=id_var+target_var).values\ny = full_df[:train_idx].filter(items=target_var, axis=1).values\n\nX_test = full_df[train_idx:].drop(columns=id_var+target_var).values\n\nprint(X.shape, y.shape, X_test.shape)","b400feb1":"feature_names = list(set(full_df.columns) - set(id_var + target_var))\nfeature_names","cc6005bb":"print(np.unique(y, return_counts=True))","7c09c480":"from sklearn.linear_model import LogisticRegression, LogisticRegressionCV\nfrom sklearn.metrics import roc_auc_score, accuracy_score\nfrom sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold\nfrom sklearn.feature_selection import RFECV, VarianceThreshold\nfrom sklearn.svm import SVC","93fbb75e":"X_train, X_dev, y_train, y_dev = train_test_split(X, y, test_size=0.10, stratify=y, shuffle=True)","b3b400d4":"weight_class_1 = np.arange(0.1, 0.4, 0.05)\nweight_class_0 = 1 - weight_class_1\n\nweights = zip(weight_class_1, weight_class_0)\nweights = [{1: t[0], 0: t[1],} for t in weights]\nweights.append(None)","8a23500e":"param_grid = {\n    'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000],\n    'class_weight': weights\n}\n\nlr_search = GridSearchCV(LogisticRegression(n_jobs=-1), param_grid=param_grid, refit=True, cv=None)\nlr_search","83848ba4":"selector = VarianceThreshold(threshold=0.1)\nselector.fit(X_train)\n\nX_train_sel = selector.transform(X_train)\nX_dev_sel = selector.transform(X_dev)\nprint(np.array(feature_names)[selector.get_support()], '\\n', selector.n_features_in_)","33c5a9e1":"selector.n_features_in_","ec364037":"model = LogisticRegressionCV(max_iter=1000, class_weight='balanced', cv=10, scoring='roc_auc')\n\nmodel.fit(X_train, np.squeeze(y_train))","a6a25d65":"prob_train = model.predict_proba(X_train)\nprob_dev = model.predict_proba(X_dev)","6c34a797":"print(f\"Training score {roc_auc_score(y_train, prob_train[:, pos_class]):.5f}\")\nprint(f\"Dev score {roc_auc_score(y_dev, prob_dev[:, pos_class]):.5f}\")","393d85d0":"feature_coefs = pd.DataFrame(index=feature_names, data=(np.std(X_train, axis=0)*model.coef_).T, columns=['coef'])","2d169de4":"K = 10\nfeature_coefs.sort_values('coef', ascending=False)[:K][::-1].plot.barh(\n    title=f\"Top {K} features: Source emerging as a prominent feature\",\n    xlabel='Standard Deviation',\n    ylabel='Feature Name');","f26fbec1":"lr_model = model","9b842d41":"prob_test = lr_model.predict_proba(X_test)","45a0319f":"submission = pd.DataFrame(data={id_var[0]: test_df[id_var[0]].to_list(), target_var[0]: prob_test[:, pos_class]})\nsubmission[id_var[0]] = submission[id_var[0]].astype(int)","f7008945":"submission.to_csv('submission.csv', index=False)","395318cf":"# Feature Engineering","67bb6554":"# Data Exploration and Imputation","f80f92fd":"## LogisticRegression","7fd9bb46":"## Strategy 2","a856acbc":"# Model Development\n","eb008981":"## Strategy 1","57987cb5":"# Submission"}}