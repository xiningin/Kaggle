{"cell_type":{"e0cdcfb6":"code","9a71aafb":"code","04794299":"code","390d22b0":"code","ef54c069":"code","bf60374c":"code","e7f008d1":"code","f1649d8e":"code","477e9a2e":"code","87654cf7":"code","d405b219":"code","062c8ede":"code","a64796bd":"code","ad0857d9":"code","56d7b368":"code","b85ae4ca":"markdown"},"source":{"e0cdcfb6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9a71aafb":"import pandas as pd\nimport numpy as np\nimport plotly.graph_objects as go\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os","04794299":"bitcoin_data = pd.read_csv(\"..\/input\/bitcoinset\/bitcoin.csv\")","390d22b0":"bitcoin = bitcoin_data.copy()","ef54c069":"bitcoin","bf60374c":"bitcoin.dtypes","e7f008d1":"bitcoin.isna().sum()","f1649d8e":"bitcoin.dropna(subset = ['Open', 'Close', 'Low','High'],inplace=True)","477e9a2e":"bitcoin.isna().sum()","87654cf7":"bitcoin","d405b219":"bitcoin.describe()","062c8ede":"plt.figure(figsize=(15, 13))\nfor i, col in enumerate(bitcoin.columns):\n    plt.subplot(3,len(bitcoin.columns)\/\/3+1,i+1)\n    sns.boxplot(x=bitcoin[col]) \nsns.despine()","a64796bd":"def outlair(x):\n    if x > upper_lim:\n        return upper_lim\n    elif x < lower_lim:\n        return lower_lim\n    else:\n        return x\nplt.figure(figsize=(15, 13))  \nfor i, col in enumerate(bitcoin.drop(\"Timestamp\", axis=1).columns):\n    q1 = bitcoin[col].quantile(0.25)\n    q3 = bitcoin[col].quantile(0.75)\n    iqr = q3 - q1\n    upper_lim = q3 + 1.5 * iqr\n    lower_lim = q1 - 1.5 * iqr\n    bitcoin[col] = bitcoin[col].apply(outlair)\n    plt.subplot(3,len(bitcoin.columns)\/\/3+1,i+1)\n    sns.boxplot(x=bitcoin[col]) \nsns.despine()","ad0857d9":"bitcoin.hist(bins=10, figsize=(20,15))","56d7b368":"bitcoin.head()","b85ae4ca":"# Performin Outlair Reduction and Visualization"}}