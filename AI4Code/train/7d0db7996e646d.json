{"cell_type":{"59d71649":"code","c6ed4535":"code","2f9f9159":"code","4fcf36e7":"code","afb823a3":"code","4d395114":"code","e426fb68":"code","c5609d15":"code","a86354fc":"code","d0e7be7b":"code","78183e2f":"code","7c3fc6a8":"code","583e27d0":"code","06d0361c":"code","a5adf657":"code","20aa56c8":"code","15cc4d13":"code","4167cb3f":"code","1586516f":"markdown","15c64bc8":"markdown","02be3b3c":"markdown","1aaff337":"markdown","16ea1600":"markdown"},"source":{"59d71649":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c6ed4535":"df = pd.read_csv('\/kaggle\/input\/customer-personality-analysis\/marketing_campaign.csv' , sep = '\\t')\n#the sep = '\\t' argument value in a string literal is an escape sequence for tab character, horizontal whitespace","2f9f9159":"df.head()","4fcf36e7":"df.info()","afb823a3":"df.shape","4d395114":"df.describe()\n","e426fb68":"df.isnull().sum()","c5609d15":"df = df.fillna(0)","a86354fc":"df.isnull().sum()","d0e7be7b":"df['Monetary'] = df['MntWines']+df['MntFruits']+df['MntMeatProducts']+df['MntFishProducts']+df['MntSweetProducts']+df['MntGoldProds']\ndf.info()","78183e2f":"new_df = df[['ID','Recency','Monetary']]\nnew_df.head()","7c3fc6a8":"df[\"Education\"] = df[\"Education\"].astype(str)\ndf[\"Marital_Status\"] = df[\"Marital_Status\"].astype(str)\ndf[\"Dt_Customer\"] = df[\"Dt_Customer\"].astype(str)\n\nfrom sklearn import preprocessing\n\nnumber = preprocessing.LabelEncoder()\n\ndf[\"Education\"] = number.fit_transform(df[\"Education\"])\ndf[\"Marital_Status\"] = number.fit_transform(df[\"Marital_Status\"])\ndf[\"Dt_Customer\"] = number.fit_transform(df[\"Dt_Customer\"])\n\ndf.head()","583e27d0":"X = df[[\"Income\", \"Monetary\"]]\n\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nX_transformed = scaler.fit_transform(X)","06d0361c":"X_transformed","a5adf657":"from sklearn.cluster import KMeans\n\nmodel = KMeans(n_clusters = 6)\n\nmodel.fit(X_transformed)","20aa56c8":"labels = model.labels_\n\nprint(labels)\n","15cc4d13":"centers = model.cluster_centers_\ncenters_transformed = scaler.inverse_transform(centers)\nprint(scaler.inverse_transform(centers))","4167cb3f":"import matplotlib.pyplot as plt\n\nplt.figure(figsize = (16, 16))\nplt.title(\"Clusters created by KMeans (Displayed for Income and Money spent )\", fontsize = 20)\nplt.xlabel(\"Income\", fontsize = 16)\nplt.ylabel(\"Money Spent\", fontsize = 16)\n\nplt.scatter(df[\"Income\"], df[\"Monetary\"], c = labels, s = 10, alpha = 0.5)\nplt.scatter(centers_transformed[:, 0], centers_transformed[:, 1], c = \"red\", marker = \"X\", s = 50)\nplt.show()","1586516f":"**Clustering**","15c64bc8":"**Scaling data**","02be3b3c":"**Data Grouping**","1aaff337":"**Data Visualization**","16ea1600":"**Pre-processing data**"}}