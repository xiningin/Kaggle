{"cell_type":{"51c115f5":"code","b9b6d7e8":"code","7fab25b8":"code","0fbbeb50":"code","1df23574":"code","fba8b9aa":"code","f211bbd2":"code","0eb16912":"code","bf3f633f":"code","1991f270":"code","df1702e7":"code","e1a361c0":"code","cc31ef90":"code","afc6a2db":"code","8c72ad22":"code","ab50611a":"code","ee23add9":"code","2de06aa9":"code","3fa5a73a":"code","18eb0929":"code","433d8379":"code","d24d53d0":"code","559bee4d":"code","9539b02e":"code","660e7a83":"code","e009681d":"code","548a78b1":"code","12834050":"code","81aa98fd":"code","4cdb4139":"markdown","83644fe9":"markdown","5700efc2":"markdown","5e702dd9":"markdown","c6921b07":"markdown","36a445d6":"markdown","b829da06":"markdown","b4f128b2":"markdown","56b2dcb7":"markdown","17b69cd4":"markdown","052d0f3b":"markdown","4d8521ec":"markdown","7251c9ca":"markdown","5aa86743":"markdown","40715858":"markdown","562bd914":"markdown"},"source":{"51c115f5":"import numpy as np\nimport pandas as pd\nimport sklearn\nimport scipy\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b9b6d7e8":"df = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv',sep=',')","7fab25b8":"df","0fbbeb50":"df.shape","1df23574":"df.info()","fba8b9aa":"# \uceec\ub7fc\ubcc4 \ub110\uac12 \uc218\ub97c \ud655\uc778\ud558\uc5ec \uacb0\uce21\uce58 \ud655\uc778\ndf.isnull().sum()","f211bbd2":"# \ud2b9\uc815 \uceec\ub7fc\uc758 \uac12\uc758 \ubd84\ud3ec : unique \uac12\uc758 \uc218\ub97c \ub9c9\ub300 \uadf8\ub798\ud504\ub85c \ud45c\uc2dc bar_unique_value\nplt.figure(figsize=(7, 4))\ncount_classes = pd.value_counts(df['Class'], sort = True)\n\ncount_classes.plot(kind = 'bar', rot=0)\nLABELS = [\"Normal\", \"Fraud\"]\nplt.xticks(range(2), LABELS)\nplt.xlabel(\"Class\")\nplt.ylabel(\"Count\");","0eb16912":"# col_unique(df, col)\ndf['Class'].unique()","bf3f633f":"# selected_df = select(df, 'Class', 1)\nFraud = df[df['Class']==1] # \ud2b9\uc815 \uceec\ub7fc\uc5d0\uc11c \uc9c0\uc815\ud55c \uac12\uc744 \uac16\ub294 \ud589\ub9cc \ubf51\uc544\ub0c4","1991f270":"Fraud.shape","df1702e7":"Fraud.head()","e1a361c0":"Normal = df[df['Class']==0] # Class\uac00 0\uc778 \uac83\ub9cc \ubf51\uc544\ub0c4","cc31ef90":"Normal.shape","afc6a2db":"Normal.head()","8c72ad22":"# \ud2b9\uc815 \uceec\ub7fc \ud1b5\uacc4 col_stat(df, 'Amount')\nFraud['Amount'].describe()","ab50611a":"Normal['Amount'].describe()","ee23add9":"# \ud769\ubfcc\ub9ac\uae30 scatter\n\nf, ax1 = plt.subplots(1, 1, sharex=True)\nf.set_size_inches((16, 4))\n\nax1.scatter(Fraud['Time'], Fraud['Amount'])\n\nplt.xlabel('Time')\nplt.ylabel('Amount')\nplt.show()","2de06aa9":"# \ud769\ubfcc\ub9ac\uae30 scatter\n\nf, ax1 = plt.subplots(1, 1, sharex=True)\nf.set_size_inches((16, 4))\n\nax1.scatter(Normal['Time'], Normal['Amount'])\n\nplt.xlabel('Time')\nplt.ylabel('Amount')\nplt.show()","3fa5a73a":"s_df = df.sample(frac = 0.1,random_state=1) # \ubb34\uc791\uc704\ub85c 10% \ub370\uc774\ud130\ub9cc \ucd94\ucd9c","18eb0929":"s_df.shape","433d8379":"s_df.hist(figsize=(20,20))\nplt.show()","d24d53d0":"# \uc815\uc0c1, \uc0ac\uae30 \ub370\uc774\ud130 \uc218 \uad6c\ud558\uae30\nFraud = s_df[s_df['Class']==1]\nNormal = s_df[s_df['Class']==0]\n\nprint(len(s_df),'=', len(Fraud),'+', len(Normal))","559bee4d":"f_ratio = len(Fraud)\/float(len(s_df))\nprint('Fraud %', f_ratio * 100)\n\nn_ratio = len(Normal)\/float(len(s_df))\nprint('Normal %', n_ratio * 100)","9539b02e":"correlation_matrix = s_df.corr()\nfig = plt.figure(figsize=(20,15))\nsns.heatmap(correlation_matrix,vmax=0.8,square = True)\nplt.show()","660e7a83":"s_df.columns","e009681d":"from sklearn.model_selection import train_test_split # \ub370\uc774\ud130 \ubd84\ud560 \ubaa8\ub4c8\n\ndef split_4_parts(df, li, dap_col):\n    # \ud559\uc2b5\uc6a9(\ubb38\uc81c, \uc815\ub2f5), \ud14c\uc2a4\ud2b8\uc6a9(\ubb38\uc81c, \uc815\ub2f5)\uc73c\ub85c \ub370\uc774\ud130 \ub098\ub204\uae30\n    train, test = train_test_split(df, train_size = 0.8)\n\n    # \ud559\uc2b5\uc6a9 \ubb38\uc81c\uc640 \uc815\ub2f5\n    a = train[li]\n    b = train[dap_col]\n\n    # \uc2dc\ud5d8 \ubb38\uc81c\uc640 \uc815\ub2f5\n    c = test[li]\n    d = test[dap_col]\n\n    return a, b, c, d","548a78b1":"input_cols = ['Time', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10',\n       'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18']\na, b, c, d = split_4_parts (s_df, input_cols, 'Class')","12834050":"from sklearn.linear_model import LogisticRegression  # Logistic Regression \uc54c\uace0\ub9ac\uc998\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier  # for K nearest neighbours\nfrom sklearn import svm  #for Support Vector Machine (SVM) Algorithm\nfrom sklearn import metrics #for checking the model accuracy\nfrom sklearn.tree import DecisionTreeClassifier #for using Decision Tree Algoithm\n\ndef run_4_classifiers(a, b, c, d):\n    gildong = svm.SVC() # \uac1d\uccb4\n    gildong.fit(a,b) # \uac00\ub974\uce5c \ud6c4\n    prediction = gildong.predict(c) # \uc2dc\ud5d8\n    rate1 = metrics.accuracy_score(prediction,d) * 100\n\n    cheolsu = LogisticRegression()\n    cheolsu.fit(a,b)\n    prediction = cheolsu.predict(c)\n    rate2 = metrics.accuracy_score(prediction,d) * 100\n\n    youngja = DecisionTreeClassifier()\n    youngja.fit(a,b)\n    prediction = youngja.predict(c) # \uc2dc\ud5d8\n    rate3 = metrics.accuracy_score(prediction,d) * 100\n\n    minsu = KNeighborsClassifier(n_neighbors=3) #this examines 3 neighbours for putting the new data into a class\n    minsu.fit(a,b)\n    prediction = minsu.predict(c) # \uc2dc\ud5d8\n    rate4 = metrics.accuracy_score(prediction,d) * 100\n\n    plt.plot(['SVM','Logistic','DTree','K-NN'], [rate1, rate2, rate3, rate4])\n    print('\uc778\uc2dd\ub960: {0:.2f}, {1:.2f}, {2:.2f}, {3:.2f}'.format(rate1, rate2, rate3, rate4))\n","81aa98fd":"run_4_classifiers(a, b, c, d)","4cdb4139":"- \ucd1d 284,807 \uac74\uc758 \ub370\uc774\ud130 \n- \ub370\uc774\ud130 \uc138\ud2b8\uc5d0 \ub204\ub77d\ub41c \uac12(\uacb0\uce21\uce58)\uc774 \uc5c6\uc74c.\n- \ub370\uc774\ud130\uc5d0\ub294 PCA \ubcc0\ud658 \uac12(28 \uac00\uc9c0), \uc989 V1\uc5d0\uc11c V28\uae4c\uc9c0\uc758 \uc22b\uc790 \uac12\uc73c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc74c. \uac01 \uac12\uc5d0 \ub300\ud55c \ucd94\uac00 \uc815\ubcf4(\uba54\ud0c0 \ub370\uc774\ud130)\ub294 \uc5c6\uc74c.\n- \uc2dc\uac04\uacfc \uae08\uc561\uc740 \ubcc0\ud658\ub41c \ub370\uc774\ud130\uac00 \uc544\ub2cc \uc2e4\uc81c \ub370\uc774\ud130","83644fe9":"* V1 ~ V28 \uceec\ub7fc\ub4e4\uc740 \uc11c\ub85c \uc0c1\uad00 \uad00\uacc4\uac00 \uc5c6\uc74c\uc744 \ubcf4\uc5ec\uc90c. \n* Class\ub294 V \uceec\ub7fc\uacfc \uc591\uc758 \uc0c1\uad00 \uad00\uacc4, \uc74c\uc758 \uc0c1\uad00 \uad00\uacc4\ub97c \uac00\uc9c0\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc74c.\n* \uadf8\ub7ec\ub098 \ud074\ub798\uc2a4\ub294 \uc2dc\uac04 \ubc0f \uae08\uc561\uacfc \uc0c1\uad00 \uad00\uacc4\uac00 \uc5c6\uc74c\uc744 \uc54c \uc218 \uc788\uc74c.","5700efc2":"\uc2dc\uac04\ubcc4 \uc815\uc0c1\uac70\ub798 \uae08\uc561 \uad00\uacc4(scatter)","5e702dd9":"## \ub370\uc774\ud130 \ub85c\ub4dc","c6921b07":"> Source: https:\/\/www.kaggle.com\/pavansanagapati\/anomaly-detection-credit-card-fraud-analysis <br\/>\n> Data: https:\/\/www.kaggle.com\/mlg-ulb\/creditcardfraud","36a445d6":"## Anomaly Detection\uacfc Credit Card Fraud Detection\n\n* \uc774\uc0c1 \ud0d0\uc9c0(anonaly detection)\ub294 \uc608\uc0c1\ub418\ub294 \ub3d9\uc791\uc744 \ub530\ub974\uc9c0 \uc54a\ub294 \ube44\uc815\uc0c1\uc801\uc778 \ud328\ud134\uc744 \uc2dd\ubcc4\ud558\ub294 \uac83\n* \ub124\ud2b8\uc6cc\ud06c \ud2b8\ub798\ud53d\uc5d0\uc11c \ud574\ud0b9\uc73c\ub85c \ubcfc \uc218 \uc788\ub294 \uc774\uc0c1 \ud328\ud134\uc744 \uc2dd\ubcc4\ud558\ub294 \uce68\uc785 \ud0d0\uc9c0\ubd80\ud130 MRI \uc601\uc0c1\uc5d0\uc11c \uc545\uc131 \uc885\uc591 \ubc1c\uacac\ud558\ub294 \uac74\uac15 \ubaa8\ub2c8\ud130\ub9c1\uae4c\uc9c0\n* \uc2e0\uc6a9 \uce74\ub4dc \uac70\ub798\uc5d0\uc11c\uc758 \uc0ac\uae30 \ud0d0\uc9c0\uc5d0\uc11c \uc6b4\uc601 \ud658\uacbd\uc5d0\uc11c\uc758 \uc624\ub958 \ud0d0\uc9c0\uae4c\uc9c0 \n* \uc774 \ub178\ud2b8\ubd81\uc5d0\uc11c\ub294 \uc774\ub7ec\ud55c \uac1c\ub150\uc744 \uc790\uc138\ud788 \uc774\ud574\ud558\uae30 \uc704\ud55c \uc0ac\ub840 \uc5f0\uad6c\ub85c\uc11c \uc2e0\uc6a9 \uce74\ub4dc \uc0ac\uae30 \uac10\uc9c0\uc5d0 \ub300\ud558\uc5ec \uc0b4\ud3b4\ubd04.\n\n\nAnonaly\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uac83\ub4e4\uc774 \uc788\uc74c.\n\n* ***Point anomalies*** \ub370\uc774\ud130\uc758 \ub2e8\uc77c \uc778\uc2a4\ud134\uc2a4\uac00 \ub098\uba38\uc9c0 \ub370\uc774\ud130\uc640 \ub108\ubb34 \uba40\ub9ac \ub5a8\uc5b4\uc838 \uc788\uc73c\uba74 \ube44\uc815\uc0c1\uc801\uc778 \uac83. \uc608\ub97c \ub4e4\uc5b4, \uc0ac\uc6a9 \ub41c \uae08\uc561\uc744 \ubcf4\uace0 \uc2e0\uc6a9 \uce74\ub4dc \uc0ac\uae30\ub97c \uac10\uc9c0\n\n* ***Contextual anomalies:*** \uc0c1\ud669\uc5d0 \ub530\ub978 \uc774\uc0c1 \uac10\uc9c0\ub85c \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130\uc5d0\uc11c \uc77c\ubc18\uc801\uc73c\ub85c \ubcfc \uc218 \uc788\uc74c. \uc608\ub97c \ub4e4\uc5b4, \uc5f0\ud734 \uae30\uac04 \ub3d9\uc548 \ub9e4\uc77c \uc74c\uc2dd\uc5d0 $ 100\ub97c \uc9c0\ucd9c\ud558\ub294 \uac83\uc740 \uc788\uc744 \uc218 \uc788\uc9c0\ub9cc \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \uc774\uc0c1\uc73c\ub85c \ud310\ubcc4\n\n* ***Collective anomalies:*** \uc77c\ub828\uc758 \ub370\uc774\ud130 \uc778\uc2a4\ud134\uc2a4\ub97c \ud568\uaed8 \ubcf4\uace0 \uc774\uc0c1\uc778\uc9c0\ub97c \ud310\ubcc4. \uc608\ub97c \ub4e4\uc5b4, \ub204\uad70\uac00 \uc608\uae30\uce58 \uc54a\uac8c \uc6d0\uaca9 \uc2dc\uc2a4\ud15c\uc5d0\uc11c \ub85c\uceec \ud638\uc2a4\ud2b8\ub85c \ub370\uc774\ud130\ub97c \ubcf5\uc0ac\ud558\ub824\uace0 \uc2dc\ub3c4\ud558\uba74 \uc774\ub97c \uc7a0\uc7ac\uc801\uc778 \uc0ac\uc774\ubc84 \uacf5\uaca9\uc73c\ub85c \ud310\ubcc4\n\n\uc2e0\uc6a9\uce74\ub4dc \uc0ac\uae30 \ud0d0\uc9c0\ub294 \uacfc\uac70\uc758 \uc815\uc0c1 \ud639\uc740 \uc0ac\uae30 \uac70\ub798\ub85c\ubd80\ud130 \uc2e0\uc6a9 \uce74\ub4dc \uac70\ub798\ub97c \ubaa8\ub378\ub9c1\ud558\uc5ec, \uc774\ub85c\ubd80\ud130 \uc0c8\ub85c\uc6b4 \uac70\ub798\uac00 \uc0ac\uae30\uc778\uc9c0 \uc544\ub2cc\uc9c0\ub97c \uc2dd\ubcc4\ud558\ub294 \uac83.","b829da06":"## \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378 \ud559\uc2b5 \ubc0f \ud14c\uc2a4\ud2b8","b4f128b2":"\uc704\uc758 \uad00\ucc30\uc5d0 \ub530\ub974\uba74 \uac70\ub798 \uc2dc\uac04\uc774 \uc5ec\uae30\uc5d0\uc11c \uc2e4\uc81c\ub85c \uc911\uc694\ud558\uc9c0 \uc54a\uc740 \uac83\uc73c\ub85c \ubcf4\uc784. ","56b2dcb7":"Determine the number of fraud and valid transactions in the entire dataset.","17b69cd4":"## \ub370\uc774\ud130 \ubd84\uc11d, \uc2dc\uac01\ud654, \uc804\ucc98\ub9ac","052d0f3b":"\uc804\uccb4\uac00 \uc544\ub2cc \uc77c\ubd80 \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c \uc2e4\ud5d8 \uc218\ud589\ud574\ubcf4\uc790. ","4d8521ec":"- \ucd1d 284,807 \uac74\uc758 \ub370\uc774\ud130 \uc911 492 \uac74\uc774 \uc0ac\uae30(0.172%)\ub85c \ub370\uc774\ud130 \ud3b8\uc911\uc774 \uc2ec\ud568. 99.8%\uac00 \uc815\uc0c1 \ub370\uc774\ud130\n- \uc2e4\uc81c \ud658\uacbd\uc5d0\uc11c \uc0ac\uae30 \uac70\ub798\uc758 \uc218\uac00 \uc0c1\ub300\uc801\uc73c\ub85c \uc801\uae30 \ub54c\ubb38\uc5d0 \uc774\ub294 \uc815\uc0c1\uc801","7251c9ca":"\ub9c8\uc9c0\ub9c9 Class \uceec\ub7fc\uc774 \uc0ac\uae30\uc778\uc9c0 \uc815\uc0c1\uc778\uc9c0\ub97c \ub9c8\ud0b9\ud55c \uac83","5aa86743":"Now let us print the outlier fraction and no of Fraud and Valid Transaction cases ","40715858":"\uc2dc\uac04\ubcc4 \uc0ac\uae30 \uae08\uc561 \uad00\uacc4(scatter)","562bd914":"\uc0ac\uae30\uc77c \ub54c\uc640 \uc544\ub2d0 \ub54c \uc0ac\uc6a9\ub41c \uae08\uc561\uad00\ub828 \uc815\ubcf4"}}