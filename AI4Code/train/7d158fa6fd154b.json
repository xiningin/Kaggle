{"cell_type":{"3f148e9d":"code","4ce02f55":"code","7d59b367":"code","8dce4a18":"code","3c110f3b":"code","092c9652":"code","f05bc597":"code","afbc4021":"code","76643ffa":"code","cd1180a5":"code","be50f1d9":"code","122069a8":"code","bb920823":"code","05a8eaba":"code","83345607":"code","6d3db5ff":"code","cb3a3ec9":"markdown","65070b0c":"markdown","c234f090":"markdown","c62bd56d":"markdown","f4cda11b":"markdown","6fb9f386":"markdown","cc7d733d":"markdown","cea7eb72":"markdown","04e73855":"markdown"},"source":{"3f148e9d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfrom warnings import simplefilter\nsimplefilter('ignore')\n\nfrom sklearn.metrics import roc_auc_score, SCORERS ,auc, confusion_matrix,accuracy_score,recall_score,precision_score\nfrom sklearn.decomposition import PCA    \nfrom sklearn.model_selection import train_test_split,GridSearchCV,StratifiedKFold\nfrom sklearn.feature_selection import mutual_info_classif\nfrom sklearn import svm\n\n#os.path.join(path, filename)\n\npd.set_option('display.max_columns', 80)\npd.set_option(\"max_r\", 80)\npd.set_option('display.max_rows',50)","4ce02f55":"data = pd.read_csv('..\/input\/older-dataset-for-dont-overfit-ii-challenge\/train.csv')\ntest = pd.read_csv('..\/input\/older-dataset-for-dont-overfit-ii-challenge\/test.csv')\n\ndata.drop(['id'],axis = 1 ,inplace=  True)\nprint('Train data shape:',data.shape)\nprint('Test data shape:',test.shape)\ndisplay(data.head(5))\nprint('Train data statsics:')\ndisplay(data.describe())","7d59b367":"print(\"nans number in train: \",data.isna().sum().sum())\nprint(\"nans number in test: \",test.isna().sum().sum())","8dce4a18":"data.columns[abs( data.skew(axis= 0) ) > 0.5 ]","3c110f3b":"print(f\"unbalanced data ,True class is {(data['target'].sum()\/data.shape[0])*100} % ofthe total data\")","092c9652":"data.columns[abs( data.corr()['target']  ) > 0.5 ] ","f05bc597":"data.columns[abs( data.corr()['target']  ) > 0.3 ] ","afbc4021":"xtrain ,xval,ytrain,yval =train_test_split(data.drop('target',axis=1),data['target'],\n                                           test_size=.25, random_state=0, shuffle=True,stratify=data['target'])\n\nprint(xtrain.shape ,xval.shape,ytrain.shape,yval.shape)","76643ffa":"mi = mutual_info_classif(xtrain, ytrain, random_state=0)\n","cd1180a5":"selectedFeature  =  np.array( mi > 0.02)\nprint('number of selected columns',selectedFeature.sum())\nprint('number of selected columns',data.drop('target',axis =1).columns[selectedFeature])","be50f1d9":"dropFeaturesdrop = data.drop('target',axis =1).columns[~selectedFeature]\nxtrain.drop(dropFeaturesdrop,axis= 1,inplace= True)\nxval.drop(dropFeaturesdrop,axis= 1 ,inplace= True)\ndata.drop(dropFeaturesdrop,axis= 1 ,inplace= True)\ntest.drop(dropFeaturesdrop,axis= 1 ,inplace= True)\n\nprint('xtrain data shape:',xtrain.shape)\nprint('xval data shape:',xval.shape)\nprint('Train data shape:',data.shape)\nprint('Test data shape:',test.shape)","122069a8":"corr = data.drop('target',axis =1).corr()\n\nnp.triu(corr> 0.4,1 ).sum()","bb920823":"xdata = data.drop('target',axis=1).values\n                  \n\nxtest= test.drop('id',axis=1).values\n                 \nprint('xtrain data shape:',xtrain.shape)\nprint('xval data shape:',xval.shape)\nprint('Train data shape:',data.shape)\nprint('Test data shape:',test.shape)","05a8eaba":"sv = svm.SVC(C= 6.6262, random_state=0,  kernel='sigmoid',coef0=0.003,\n             gamma= 0.00192,class_weight={0: 2, 1: 1.0})\n\nsv.fit(xtrain,ytrain)\nperdt = sv.predict(xtrain)\nperdv = sv.predict(xval)\ncmt = confusion_matrix(ytrain, perdt)\ncmv = confusion_matrix(yval, perdv)\n\nprint('\\nTrain Aaccuracy =',accuracy_score(ytrain, perdt) ,\n      ' \\nValidation Aaccuracy =',accuracy_score(yval, perdv))\nprint('Confusion matrix train: \\n',cmt)\nprint('Confusion matrix val: \\n',cmv)\nprint('AUC train: ',roc_auc_score(ytrain,perdt) )\nprint('AUC Val: ',roc_auc_score(yval,perdv) )","83345607":"sv = svm.SVC(C= 1.355, random_state=0,  kernel='rbf',\n             gamma= 0.00075 ,class_weight={0: 1.8, 1: 1.0})\n\nsv.fit(xtrain,ytrain)\nperdt = sv.predict(xtrain)\nperdv = sv.predict(xval)\ncmt = confusion_matrix(ytrain, perdt)\ncmv = confusion_matrix(yval, perdv)\n\nprint('\\nTrain Aaccuracy =',accuracy_score(ytrain, perdt) ,\n      ' \\nValidation Aaccuracy =',accuracy_score(yval, perdv))\nprint('Confusion matrix train: \\n',cmt)\nprint('Confusion matrix val: \\n',cmv)\nprint('AUC train: ',roc_auc_score(ytrain,perdt) )\nprint('AUC Val: ',roc_auc_score(yval,perdv) )","6d3db5ff":"perdtest = sv.predict(xtest)\nsample_submission= pd.DataFrame({'id':test['id'].to_numpy(), 'target':perdtest })\nprint(sample_submission.shape,test.shape)\nsample_submission.to_csv(os.path.join('.\/',\"submission.csv\"), index=False)","cb3a3ec9":"# Features selection useing mutual information","65070b0c":"# Imports","c234f090":"# Load  The Data","c62bd56d":"# Split the Data","f4cda11b":"# correlation","6fb9f386":"## check if still there is highly correlated features","cc7d733d":"## check skwed columnes","cea7eb72":"# Model svm ","04e73855":"## check nans"}}