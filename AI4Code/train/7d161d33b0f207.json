{"cell_type":{"c3b662ea":"code","fc573fd8":"code","e5da1fbe":"code","57cf612b":"markdown"},"source":{"c3b662ea":"import os,time\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom scipy.special import comb\nfrom sklearn import preprocessing\nimport random,copy,pickle\nimport statsmodels.api as sm\nimport pexpect\n\ndir0='\/kaggle\/input\/liverpool-ion-switching\/'\ndir='\/kaggle\/input\/6th-place-ion\/'\ndir1='\/kaggle\/working\/'\ngroups=[[0,1],[2,6],[3,7],[5,8],[4,9]]\nnchannel=[1,1,3,5,10]","fc573fd8":"df_train = pd.read_csv(dir0+\"\/train.csv\")\n\nsignal_clean=df_train['signal'].values\nbatch=[1,6,7,8,9]\nfor i in batch:\n    if i!=1:\n        x=np.arange(500000)\n        signal_clean[500000*i:500000*(i+1)]=df_train['signal'].values[500000*i:500000*(i+1)]-5*np.sin(np.pi*x\/500000)\n    else:\n        x=np.arange(100000)\n        signal_clean[500000:600000]=df_train['signal'].values[500000:600000]-5*np.sin(np.pi*x\/500000)\nplt.figure(figsize=(16,5))\nplt.plot(signal_clean)\nplt.show()\ndf_train['signal']=signal_clean","e5da1fbe":"for mm in range(5):\n    mm=0 # mm=0,1,2,3,or 4\n    n_para=groups[mm][0]\n\n    K=4\n    zopen=np.array([0,0,1,1],dtype='int32')\n    M=nchannel[mm]\n    pi=np.array([0.,0.,0.,1.])\n    if mm==0: pi=np.array([1.,0.,0.,0.])\n    A=np.random.rand(K*K).reshape((K,K))\n    for i in range(K):\n        for k in range(K):\n            if i==k:\n                A[i,i]=1.\n            else:\n                A[i,k]=random.choice([0.5,0.001])\n    A[3,0],A[0,3],A[3,1],A[1,3]=0,0,0,0\n    A[2,0],A[0,2]=0,0\n    A=A\/np.sum(A,axis=0)#.reshape(K,1)\n\n    B=np.zeros((M+1,K**M))\n    for i in range(K**M):\n        cpi=np.zeros(M,dtype='int32')\n        tmpi=i\n        for j in range(M-1,-1,-1):\n            cpi[j]=tmpi\/K**j\n            tmpi=tmpi-cpi[j]*K**j\n        B[np.sum(zopen[cpi]),i]=1\n\n    cha=np.zeros(1,dtype='int64')\n    for n in groups[mm]:\n        tmp=df_train['open_channels'].values[500000*n:500000*(n+1)]\n        cha=np.append(cha,tmp)\n    cha=cha[1:]\n    #A=np.fromfile('A004_lh=1323450.024.bin')\n    cha.tofile(dir1+'cha'+'{0:03d}'.format(n_para)+'.bin')\n    pi.tofile(dir1+'pi'+'{0:03d}'.format(n_para)+'.bin')\n    A.tofile(dir1+'A'+'{0:03d}'.format(n_para)+'.bin')\n    B.tofile(dir1+'B'+'{0:03d}'.format(n_para)+'.bin')\n    #A=np.fromfile(dir1+'A'+'{0:03d}'.format(n_para)+'.bin')\n\n    prc = pexpect.spawn(\"\/bin\/bash\")\n    prc.sendline(\"export OMP_NUM_THREADS=1\")\n    prc.sendline(dir+\".\/a.out 1 \"+str(n_para)+\" \"+str(M)+\" \"+str(K)+\" \"+str(100000)+\" \"+str(10)+\" \"+str(200)+\" \"\n                 +dir1+\">log\"+'{0:03d}'.format(n_para)+\"-\"+str(i)+'.txt')\n    data0=''\n    time.sleep(1)\n    f = open(dir1+'log'+'{0:03d}'.format(n_para)+\"-\"+str(i)+'.txt')\n    while 1==1:\n        time.sleep(1)\n        data1 = f.read()\n        if data1!=data0 and data1!='':\n            data0=copy.copy(data1)\n            print(data1) \n        if 'END' in data1:\n            break","57cf612b":"This notebook is used to caluculate the transition matrix A for each category in the training data. \nSee this page for detais.   \nhttps:\/\/www.kaggle.com\/c\/liverpool-ion-switching\/discussion\/153932\n\nThis notebook does not work on the kaggle kernel, although I tried to work it. \nThe executable file, 'a.out', may work on 64 bit a CeontOS machine with a Intel CPU.\nYou can make 'a.out' in your enviroment using the latest fortran complier, gfortran or Intel fortran compliler. \nIn our enviroment, change 'dir0','dir', and 'dir1' to the apporopriate directory; '.\/' for example. \nWe use two FORTRAN source files to create the executable file. Below line is the example to create it on a linux machine. \n(Install the latest version of gfortran.)\n\n\\>gfortran FHMM_muvar.f90 FHMM_s.f90"}}