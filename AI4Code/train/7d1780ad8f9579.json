{"cell_type":{"7d648af3":"code","a372bcc9":"code","366bf443":"code","d3f5a0f0":"code","29190545":"code","f80a5b37":"code","372746f2":"code","462d56f0":"code","d7f983c5":"code","33537e0a":"code","92ba44c0":"code","9a00cb4a":"code","b62ddd9f":"code","e25d7dde":"code","f2815eb3":"code","addedc75":"code","a0d85466":"code","418ba4fe":"code","0d87039d":"code","83efc72e":"code","b9cc195f":"code","8debe9a3":"code","4b1c31be":"code","bda78370":"code","69fba45d":"code","33a793e0":"code","ac84416d":"code","3cb05648":"code","8c0a18c3":"code","9fe973b0":"code","48b71410":"code","225ccb45":"code","1c7135ef":"code","46813e76":"code","a0f8253c":"code","38e3eaba":"code","eb17183a":"markdown","6d495535":"markdown","378f0a2f":"markdown","40aa4127":"markdown","14eb54fc":"markdown","4781e7c6":"markdown","d4df0535":"markdown","3eb506e3":"markdown","32599a64":"markdown","61bfdc4b":"markdown","11a2f3e4":"markdown","12bebfe5":"markdown","0c3209f4":"markdown","0bf4e267":"markdown","90ed0136":"markdown","8babbad2":"markdown","c3300050":"markdown","97ac80bd":"markdown","8624f9d0":"markdown","bfa58ba1":"markdown","7a2eb68a":"markdown","86573668":"markdown","7110f7e4":"markdown"},"source":{"7d648af3":"\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt \nimport seaborn as sns","a372bcc9":"df=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest=pd.read_csv(\"..\/input\/titanic\/test.csv\")\nprint(df.shape)\ndf.head() ","366bf443":"print(test.shape)\ntest.head()","d3f5a0f0":"\na=df.isnull().sum().sort_values(ascending=False)\npercent=(df.isnull().sum()\/df.isnull().count())*100\na=pd.concat([a,percent],axis=1)\na.head()","29190545":"a=test.isnull().sum().sort_values(ascending=False)\npercent=(test.isnull().sum()\/test.isnull().count())*100\na=pd.concat([a,percent],axis=1)\na.head()","f80a5b37":"main_df=test[\"PassengerId\"] # Na odovzdanie s\u00faboru potrebujeme ID","372746f2":"datasets=[df,test]  \nfor dataset in datasets:\n    dataset.drop([\"Cabin\",\"PassengerId\",\"Ticket\",\"Fare\"],axis=1,inplace=True)\n    dataset[\"Age\"].fillna(dataset[\"Age\"].mode()[0],inplace=True)\n    dataset[\"Embarked\"].fillna(dataset[\"Embarked\"].mode()[0],inplace=True)","462d56f0":"df.head()","d7f983c5":"sns.countplot(x=\"Pclass\",hue=\"Survived\",data=df)\n\n# zdola Countplot vid\u00edme, \u017ee Pclass hr\u00e1 rolu v predpovedi pre\u017e\u00edvania, tak\u017ee t\u00fato funkciu zachov\u00e1me","33537e0a":"ax=sns.barplot(x=\"Pclass\",y=\"Survived\",data=df)\nax.set_ylabel(\"Survival Probability\")","92ba44c0":"sns.countplot(x=\"Sex\",hue=\"Survived\",data=df) \n# Pohlavie tie\u017e hr\u00e1 rolu, to si udr\u017e\u00edme","9a00cb4a":"sns.barplot(x=\"Sex\",y=\"Survived\",data=df)","b62ddd9f":"fig = plt.figure(figsize=(10,8),)\na=sns.kdeplot(df.loc[(df[\"Survived\"]==0),\"Age\"],color=\"g\",shade=True,label=\"Not Survived\")\na=sns.kdeplot(df.loc[(df[\"Survived\"]==1),\"Age\"],color=\"b\",shade=True,label=\"Survived\")\nplt.title('Age Distribution - Surviver V.S. Non Survivors', fontsize = 20)\nplt.xlabel(\"Passenger Age\", fontsize = 12)\nplt.ylabel('Frequency', fontsize = 12);","e25d7dde":"sns.lmplot('Age','Survived',data=df)\n\n# M\u00f4\u017eeme tie\u017e poveda\u0165, \u017ee \u010d\u00edm star\u0161\u00ed cestuj\u00faci, t\u00fdm men\u0161ia je \u0161anca na pre\u017eitie\n","f2815eb3":"ax=sns.countplot(x=\"SibSp\",hue=\"Survived\",data=df)","addedc75":"sns.factorplot(x=\"SibSp\",y=\"Survived\",data=df,kind=\"bar\")","a0d85466":"sns.countplot(x=\"Parch\",hue=\"Survived\",data=df)","418ba4fe":"sns.factorplot(x=\"Parch\",y=\"Survived\",data=df,kind=\"bar\")","0d87039d":"train_test_data = [df, test]\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False) \nfor dataset in train_test_data:\n    dataset[\"Title\"]=dataset[\"Title\"].map({\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 })\ndf.drop(\"Name\",axis=1,inplace=True)\ntest.drop(\"Name\",axis=1,inplace=True)    ","83efc72e":"df[\"FamilySize\"]=df[\"SibSp\"]+df[\"Parch\"]\ntest[\"FamilySize\"]=test[\"SibSp\"]+test[\"Parch\"]\nlabels=['SibSp', 'Parch']\ndf.drop(labels,axis=1,inplace=True)\ntest.drop(labels,axis=1,inplace=True)","b9cc195f":"\ns=pd.get_dummies(df,drop_first=True)\ntarget=s[\"Survived\"]\ntrain_data=s.iloc[:,1:]\nfrom sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\ntrain_data=sc.fit_transform(train_data)","8debe9a3":"# for Test set\ns=pd.get_dummies(test,drop_first=True)\nsc2=StandardScaler()\ntest=sc.fit_transform(s)","4b1c31be":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","bda78370":"from sklearn.neighbors import KNeighborsClassifier\nclf=KNeighborsClassifier()\nscore=cross_val_score(clf,train_data,target,cv=k_fold)\nprint(score)","69fba45d":"round(np.mean(score)*100,2)","33a793e0":"from sklearn.svm import SVC\nclf=SVC(kernel=\"rbf\")\nscore=cross_val_score(clf,train_data,target,cv=k_fold)\nprint(score)\n","ac84416d":"round(np.mean(score)*100,2)","3cb05648":"from sklearn.naive_bayes import GaussianNB\nclf=GaussianNB()\nscore=cross_val_score(clf,train_data,target,cv=k_fold)\nprint(score)","8c0a18c3":"round(np.mean(score)*100,2)","9fe973b0":"from sklearn.tree import DecisionTreeClassifier\nclf=DecisionTreeClassifier(criterion=\"entropy\")\nscore=cross_val_score(clf,train_data,target,cv=k_fold)\nprint(score)","48b71410":"round(np.mean(score)*100,2)","225ccb45":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_estimators=300,criterion=\"entropy\")\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","1c7135ef":"round(np.mean(score)*100,2)","46813e76":"from sklearn.ensemble import GradientBoostingClassifier\nclf=GradientBoostingClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)\nround(np.mean(score)*100,2)","a0f8253c":"model=GradientBoostingClassifier()\nmodel.fit(train_data,target)","38e3eaba":"y_hat=model.predict(test)\nmain_df=pd.DataFrame(main_df)\nmain_df[\"Survived\"]=y_hat\nmain_df.to_csv(\"Final Submission.csv\",index=False)","eb17183a":"Konverzia figur\u00edny premenn\u00fdch a pou\u017eitie \u00fapravy mierky","6d495535":"2.1 Vyp\u00fa\u0161\u0165anie st\u013apcov a pou\u017e\u00edvanie fillny","378f0a2f":"# N\u00e1hodn\u00fd les","40aa4127":"Umo\u017e\u0148uje vykon\u00e1va\u0165 niektor\u00e9 funkcie in\u017einierstva z toho, \u010do sme pozorovali v na\u0161om EDA","14eb54fc":"## 2. Zaobch\u00e1dzanie s ch\u00fdbaj\u00facimi hodnotami\nPo na\u010d\u00edtan\u00ed \u00fadajov do DataFrame bolo prv\u00e9, \u010do som sa nau\u010dil, postara\u0165 sa o ch\u00fdbaj\u00face hodnoty, pre tento krok idem nasleduj\u00facim sp\u00f4sobom","4781e7c6":"# Naive Bayes","d4df0535":"\u010eal\u0161\u00edm krokom je vynechanie t\u00fdch st\u013apcov, ktor\u00e9 maj\u00fa viac ako 50% ch\u00fdbaj\u00facich hodn\u00f4t, preto\u017ee v\u00e4\u010d\u0161ina hodn\u00f4t ch\u00fdba, tak\u017ee nie je potrebn\u00e9 vyplni\u0165 to\u013eko hodn\u00f4t. \u010eal\u0161\u00edm krokom je vynechanie st\u013apcov.\nTu rob\u00edm to, \u017ee m\u00e1m na mysli norm\u00e1lnym sp\u00f4sobom, zatia\u013e \u010do vynech\u00e1vam niektor\u00e9 st\u013apce. Napr\u00edklad teraz idem k poklesu kab\u00edny (percento ch\u00fdbaj\u00facich hodn\u00f4t je viac), spolu s t\u00fdm som sa rozhodol vynecha\u0165 \"Ticket\", \" \u201eCestovn\u00e9\u201c, \u201eOsobn\u00e9\u201c. Len prem\u00fd\u0161\u013eajte, ako n\u00e1klady na l\u00edstok ovplyvnia na\u0161u cie\u013eov\u00fa premenn\u00fa, u\u017e m\u00e1me atrib\u00fat triedy Pclass, ktor\u00fd n\u00e1m pom\u00f4\u017ee pri odhadovan\u00ed stavu l\u00edstka. T\u00fdmto sp\u00f4sobom som sa rozhodol tieto funkcie vynecha\u0165.\nAk chceme, aby sme zru\u0161ili aj meno cestuj\u00faceho, ale potom, \u010do sa dozvieme od niektor\u00fdch jadier, \u017ee toto meno tie\u017e zohr\u00e1va \u00falohu, jednoducho pomyslite tak\u00fdm sp\u00f4sobom, \u017ee tento titul vypoved\u00e1 o stave osoby, ako vieme spolo\u010dn\u00fdm sp\u00f4sobom, tak\u017ee som ponecha\u0165 atrib\u00fat Meno.\nToto je druh\u00fd krok, ktor\u00fd urob\u00edm v ktoromko\u013evek s\u00fabore \u00fadajov, \u0161t\u00fadiom nez\u00e1visl\u00fdch funkci\u00ed a v\u00fdpadkov, ktor\u00e9 bud\u00fa zbyto\u010dn\u00e9. (Poskytnite sp\u00e4tn\u00fa v\u00e4zbu o tomto sp\u00f4sobe preru\u0161enia)","3eb506e3":"### Parch","32599a64":"## z vy\u0161\u0161ie uveden\u00fdch modelov GradientBoostingClassifier je najlep\u0161\u00ed model","61bfdc4b":"3I0203 UI1\n","11a2f3e4":"Rozba\u013eujeme n\u00e1zov z atrib\u00fatu name a pod\u013ea toho uv\u00e1dzame hodnotu.","12bebfe5":"# SVC","0c3209f4":"# V\u00fdber a hodnotenie modelu\n","0bf4e267":"Vek","90ed0136":"\nZ EDA sme zistili, \u017ee SibSp a Parch maj\u00fa tie\u017e rolu, tak\u017ee ich skombinujeme do jedn\u00e9ho prvku (ve\u013ekos\u0165 rodiny) namiesto dvoch.\n","8babbad2":"# KNN","c3300050":"# Prieskumn\u00e1 anal\u00fdza d\u00e1t","97ac80bd":"V EDA sa pozrieme na na\u0161e zost\u00e1vaj\u00face atrib\u00faty a ich distrib\u00faciu a vz\u0165ah k na\u0161ej cie\u013eovej premennej","8624f9d0":"****###Pohlavie","bfa58ba1":"### P Trieda\nPclass je kategorick\u00e1 premenn\u00e1. Pozrime sa na distrib\u00faciu.","7a2eb68a":"### Sibsp","86573668":"# Rozhodovac\u00ed strom","7110f7e4":"# GradientBoostingClassifier"}}