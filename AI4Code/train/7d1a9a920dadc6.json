{"cell_type":{"a9d63a53":"code","6ff60ef6":"code","47232d03":"code","dd2e7c3b":"code","84b093f2":"code","ef42de7f":"code","8d12ef32":"code","6f690413":"code","789541da":"code","1c880af4":"code","2f40a5cf":"code","0108a2ea":"code","58727c5b":"code","a3d1ef3c":"code","d4227994":"code","fec5d512":"code","431ca043":"code","cd2f48c7":"code","05db2c94":"code","ad170f20":"markdown","18a47517":"markdown","ba6e0f72":"markdown","9a4ab1ce":"markdown"},"source":{"a9d63a53":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6ff60ef6":"df = pd.read_csv(\"\/kaggle\/input\/videogamesales\/vgsales.csv\")","47232d03":"df.head()","dd2e7c3b":"df.tail()","84b093f2":"df.info()","ef42de7f":"df.columns","8d12ef32":"df.shape","6f690413":"df.describe().T","789541da":"df.isnull().sum()","1c880af4":"df[\"Year\"].fillna(df[\"Year\"].quantile(0.50),inplace = True)","2f40a5cf":"df[\"Year\"].isnull().all()","0108a2ea":"df[\"Year\"] = df[\"Year\"].astype(\"int64\")","58727c5b":"df[\"Publisher\"].dropna(inplace = True)","a3d1ef3c":"for i,j in zip(df.dtypes.index,df.dtypes):\n    if j == \"object\":\n        \n        print(\"\\n\"*3,i +\":\",\"\\n\",df[i].value_counts())","d4227994":"for i,j in zip(df.dtypes.index,df.dtypes):\n    if j == \"int64\" or j == \"float64\":\n        if i == \"Rank\" or i == \"Year\":\n            pass\n        else:\n            df.boxplot(i)\n            plt.show()","fec5d512":"def lower_outliers(x):\n    \"\"\"\n    x : Please get a variable \n    \n    return: get lower_limit\n    \"\"\"\n    Q1 = x.quantile(0.25)\n    Q3 = x.quantile(0.75)\n    IQR = 1.5 * (Q3 - Q1)\n    \n    lower_limit = Q1 - IQR\n    \n    return lower_limit","431ca043":"def upper_outliers(x):\n    \n    \"\"\"\n    x : Please get a variable \n    \n    return: get upper_limit\n    \"\"\"\n    Q1 = x.quantile(0.25)\n    Q3 = x.quantile(0.75)\n    IQR = 1.5 * (Q3 - Q1)\n    \n    upper_limit = Q3 + IQR\n    \n    return upper_limit","cd2f48c7":"df_NaSales = df[\"NA_Sales\"]\nprint(\"Lower limit : {}\".format(lower_outliers(df_NaSales)))\nprint(\"Upper limit : {}\".format(upper_outliers(df_NaSales)))","05db2c94":"for i,j in zip(df.dtypes.index,df.dtypes):\n    if j == \"int64\" or j == \"float64\":\n        if i == \"Rank\" or i == \"Year\":\n            pass\n        else:\n            print(\"{} Lower limit : {}\".format(i,lower_outliers(df[i])))\n            print(\"{} Upper limit : {}\".format(i,upper_outliers(df[i])))","ad170f20":"<a id = \"1\"><\/a>\n# Look Data","18a47517":"# Introduction\n\nThis data gives us for video games. We are doing exploratory data analysis and cleaning dataset.\n\n1. [Look Data](#1)\n1. [Detection For Missing Value & Fill The Value](#2)\n1. [Detection For Outliers Value & Suppress The Value](#3)","ba6e0f72":"<a id = \"1\"><\/a>\n# Detection For Outliers Value & Suppress The Value","9a4ab1ce":"<a id = \"1\"><\/a>\n# Detection For Missing Value & Fill The Value"}}