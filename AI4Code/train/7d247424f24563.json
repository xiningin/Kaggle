{"cell_type":{"5fd2e595":"code","4292284a":"code","581afa3e":"code","03a97109":"code","aaf8b979":"code","c3b5120a":"code","f05be7a7":"code","83ca6fb3":"code","4c8c01bf":"code","514dad44":"code","a3e687fe":"code","026b8a47":"code","2b3f85c2":"code","b0502ca2":"markdown","137c58b2":"markdown","e1629ed9":"markdown","f82b48b8":"markdown","924bb68b":"markdown","32ebc1e9":"markdown","4892e428":"markdown","4c8fb82d":"markdown","8b964c6a":"markdown","156f667d":"markdown","6c45f802":"markdown","c2d9fdf9":"markdown","000c33e0":"markdown"},"source":{"5fd2e595":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport datetime as dt\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,confusion_matrix\nimport pickle\nimport os\n\nimport lib_accii_53\nimport lib_prepare as prepare\nimport lib_ga","4292284a":"fn1 = '..\/input\/tr-podbor-portf-prost\/model_ga.pkl'\nfn2 = '.\/model_ga.pkl'\n\nif os.path.exists(fn1):\n    os.system(f'cp {fn1} {fn2}')","581afa3e":"d_data = lib_accii_53.get_dOHLCV()\nd_data.shape","03a97109":"X1_train, X1_test, X2_train, X2_test, y_train, y_test, d_train, d_test = None, None, None, None, None, None, None, None","aaf8b979":"hsGetQualityMethod = None\nmodelGetQualityMethod = None\n\ndef getQualityMethod(units,kernel,patienceEarlyStopping,patienceReduceLROnPlateau,window,batch_size,gorizont):\n    \n    output = lib_accii_53.get_pct_change(gorizont).values\n    \n    inpData1 = prepare.data_to_window(d_data,window)\n    \n    inpData2 = prepare.date_to_input(lib_accii_53.get_index())\n    \n    inpData1Learn,inpData2Learn,inpData1Calc,inpData2Calc = prepare.split_learn_calc(inpData1,inpData2,gorizont=gorizont)\n    \n    inpData1Learn,inpData2Learn,output,learnDates = prepare.chistim_pustoty(inpData1Learn,\n                                                                            inpData2Learn,\n                                                                            output,\n                                                                            lib_accii_53.get_index().values[:,np.newaxis])\n    \n    global X1_train, X1_test, X2_train, X2_test, y_train, y_test, d_train, d_test\n    X1_train, X1_test, X2_train, X2_test, y_train, y_test, d_train, d_test = train_test_split(inpData1Learn,\n                                                                                              inpData2Learn,\n                                                                                              output,\n                                                                                              learnDates,\n                                                                                              test_size=0.33,\n                                                                                              shuffle=False)\n    \n    normLayer = keras.layers.experimental.preprocessing.Normalization(axis=-1)\n    normLayer.adapt(X1_train)\n    \n    input1 = keras.layers.Input(shape=X1_train.shape[1:])\n    x1 = normLayer(input1)\n\n    x1 = keras.layers.Conv1D(units,\n                             kernel,\n                             padding='same',\n                             activation='relu')(x1)\n\n    x1 = keras.layers.Flatten()(x1)\n\n    input2 = keras.layers.Input(shape=(X2_train.shape[1],))\n\n    x = keras.layers.Concatenate()([x1,input2])\n\n    outputs = keras.layers.Dense(y_train.shape[1],name='output')(x)\n    \n    model = keras.Model((input1,input2),outputs)\n    \n    def custom_profit_loss(y_true, y_pred):\n        y_pred_parts = keras.backend.softmax(y_pred)\n        loss = -keras.backend.sum(y_true * y_pred_parts,axis=-1)\/gorizont\n        \n        return loss\n    \n    model.compile(optimizer = tf.optimizers.Adam(),\n                  loss = custom_profit_loss)\n    cb = [tf.keras.callbacks.EarlyStopping(monitor='val_loss',\n                                           patience=patienceEarlyStopping,\n                                           restore_best_weights=False,\n                                           verbose=False),\n          tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss',\n                                               patience=patienceReduceLROnPlateau,\n                                               verbose=False)]\n    \n    \n    global hsGetQualityMethod\n    hsGetQualityMethod = model.fit((X1_train,X2_train),list(y_train.T),\n                                    epochs=1000,\n                                    validation_split=0.3,\n                                    verbose=False,\n                                    callbacks = cb,\n                                    batch_size=batch_size)\n    \n    \n    global modelGetQualityMethod\n    modelGetQualityMethod = model\n    \n    hs = pd.DataFrame(hsGetQualityMethod.history)\n    \n    return -modelGetQualityMethod.evaluate([X1_train,X2_train],list(y_train.T),verbose=0)\n\n# getQualityMethod(units=5,\n#                  kernel=3,\n#                  patienceEarlyStopping=30,\n#                  patienceReduceLROnPlateau=3,\n#                  window=5,\n#                  batch_size=32,\n#                  gorizont=5)","c3b5120a":"modelGA = lib_ga.ListGenetic( pop_size = 200,\n                              units=range(3,100),\n                              kernel=range(2,10),\n                              patienceEarlyStopping=range(10,100),\n                              patienceReduceLROnPlateau=range(5,100),\n                              window = range(3,100),\n                              batch_size = range(4,128+1),\n                              gorizont = range(1,14+1),\n                              quality_method=getQualityMethod)","f05be7a7":"fn = fn2\n\nif os.path.exists(fn):\n    with open(fn,'rb') as fp:\n        modelGA = pickle.load(fp)","83ca6fb3":"# while True:\n# modelGA.fit(50,echo_time=60)\n# with open(fn,'wb') as fp:\n#     pickle.dump(modelGA,fp)","4c8c01bf":"modelGA.plot_hist_new(('quality','units','kernel','patienceEarlyStopping','patienceReduceLROnPlateau','window', 'batch_size','gorizont'))","514dad44":"best_par = modelGA.getBestParams()\nbest_par","a3e687fe":"getQualityMethod(**best_par)","026b8a47":"hs = pd.DataFrame(hsGetQualityMethod.history)\nfig = plt.figure(figsize=(10,6))\nax1 = fig.add_subplot(111)\nhs[['loss','val_loss']].plot(ax=ax1)\nax1.grid()\nax1.set_title('loss')\nplt.show()","2b3f85c2":"train_kach = modelGetQualityMethod.evaluate([X1_train,X2_train],list(y_train.T),verbose=1)\ntest_kach = modelGetQualityMethod.evaluate([X1_test,X2_test],list(y_test.T),verbose=1)","b0502ca2":"# \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438","137c58b2":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a","e1629ed9":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430, \u0435\u0441\u043b\u0438 \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442","f82b48b8":"# \u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438","924bb68b":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438","32ebc1e9":"# \u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e \u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438","4892e428":"# \u0426\u0438\u043a\u043b \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438","4c8fb82d":"# \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438","8b964c6a":"# \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","156f667d":"# \u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0432\u0435\u0440\u0441\u0438\u0438","6c45f802":"# \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438","c2d9fdf9":"# \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0442\u0435\u0441\u0442","000c33e0":"# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438"}}