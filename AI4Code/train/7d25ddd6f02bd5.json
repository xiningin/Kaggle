{"cell_type":{"3480313f":"code","67108ad6":"code","48898f05":"code","b62b7fa2":"code","5be61570":"code","7da40399":"code","5103d852":"code","6fa1619e":"code","90f43d68":"markdown","a531a01a":"markdown","3fc5ee50":"markdown","225d6d37":"markdown"},"source":{"3480313f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import preprocessing\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import KFold,GridSearchCV\nfrom sklearn.metrics import log_loss, make_scorer, accuracy_score\n\n\nfrom tqdm.notebook import tqdm\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67108ad6":"data_dir = '..\/input\/lish-moa\/'\n\ntrain_set = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntrain_target = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ntest_set = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\n#train_nonscored = pd.read_csv('..\/input\/lish-moa\/train_targets_nonscored.csv')\n\nss = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')\nss.loc[:, train_target.columns[1:]] = 0\n\ndf1 = pd.DataFrame(train_set)\ndf2=pd.DataFrame(train_target)\ndf3 = pd.DataFrame(test_set)","48898f05":"#preprocessing\n\ndef transform_features(df):\n    one_hot = pd.get_dummies(df['cp_dose'])    #one-hot encoding\n    df = df.join(one_hot)\n    df = df.drop(df[df.cp_type == 'ctl_vehicle'].index)  # drop where cp_type==ctl_vehicle\n    df = df.drop(['sig_id','cp_type', 'cp_dose'], axis=1)\n    return df.values\n\n\ntrain_matrix = transform_features(df1)\ntest_matrix = transform_features(df3)\n\n\n#training labels\ndrop_index = df1[df1.cp_type == 'ctl_vehicle'].index\ndf2 = df2.drop(drop_index, axis = 0)\ntrain_target_matrix = np.delete(df2.values, 0, axis=1).astype(int)","b62b7fa2":"#scaler\ndef scaling(D):\n    min_max_scaler = preprocessing.MinMaxScaler()\n    D = min_max_scaler.fit_transform(D)\n    return D\n\ntrain_matrix = scaling(train_matrix)\ntest_matrix = scaling(test_matrix)","5be61570":"#k-fold CV ~15min\n\nN_folds = 5\nSEED=40\n\nLR=LogisticRegression(penalty = 'l2', C=0.5, random_state=SEED, tol = 0.1, verbose=0, max_iter = 1000)\nkf = KFold(n_splits = N_folds, random_state = SEED, shuffle = True)\n\ntest_pred = np.zeros((test_matrix.shape[0], train_target_matrix.shape[1]))\noof_pred = np.zeros((train_target_matrix.shape[0], train_target_matrix.shape[1]))\n\nfor tar in tqdm(range(train_target_matrix.shape[1])):\n    target = train_target_matrix[:, tar]\n    \n    if target.sum() >= N_folds: \n\n        for fold_idx, (train_idx, validate_idx) in enumerate(kf.split(train_matrix, target)):\n            X_tr, X_val = train_matrix[train_idx], train_matrix[validate_idx]\n            y_tr, y_val = target[train_idx], target[validate_idx]\n            \n            clf = LR.fit(X_tr, y_tr)\n            test_pred[:,tar] += clf.predict_proba(test_matrix)[:,1]\/ N_folds\n            oof_pred[validate_idx,tar] += clf.predict_proba(X_val)[:,1]\n","7da40399":"print(f'LR OOF log loss: {log_loss(np.ravel(train_target_matrix), np.ravel(oof_pred))}')","5103d852":"predictions = test_pred.copy()\nadd_index = df3[df3.cp_type == 'ctl_vehicle'].index\nfor pos in add_index:\n    predictions = np.insert(predictions, pos, values=np.zeros(206), axis=0)","6fa1619e":"#submission\nss = pd.DataFrame(predictions, columns=train_target.columns[1:])\nss.insert(0,'sig_id', df3['sig_id'].values)\nss.to_csv('submission.csv',index = False)\nss.describe()","90f43d68":"N_folds = 5\nSEED=1\noutcomes = []\nfold = 0\ntarget = train_target_matrix[:,0]\n\nkf = KFold(n_splits = N_folds, random_state = SEED, shuffle = True)\nfor fold_idx, (train_idx, validate_idx) in enumerate(kf.split(train_matrix, target)):\n            X_tr, X_val = train_matrix[train_idx], train_matrix[validate_idx]\n            y_tr, y_val = target[train_idx], target[validate_idx]\n            fold += 1\n            clf.fit(X_tr, y_tr)\n            predictions = clf.predict(X_val)\n            accuracy = accuracy_score(y_val, predictions)\n            outcomes.append(accuracy)\n            print(\"Fold {0} accuracy: {1}\".format(fold, accuracy)) \n        \nmean_outcome = np.mean(outcomes)\nprint(\"Mean Accuracy: {0}\".format(mean_outcome)) ","a531a01a":"The baseline is to treat this multi-label classification problem as n=206 binary classification tasks that can be done with 206 classifiers. It is easy to implement but can be slow because of this large number of classes. For improvements, the controls where 'cp_type'='ctl_vehecle' maybe dropped and kernel LR maybe applied in order to increase the number of features.\nOne could also use gridsearch to find better hyperparameters.","3fc5ee50":"#GridSearch(optional) ~15min\nclf = LogisticRegression()\n\nparams = {'solver':['lbfgs'],\n          'max_iter':[10000],\n          'penalty':['l2'],\n          'verbose': [0],\n          'tol':[0.1],\n          'C':[0.1, 0.5, 1, 10]\n         }\n                    \n#acc_scorer = make_scorer(accuracy_score)\n                    \ngrid = GridSearchCV(clf, params, cv=5)\ngrid.fit(train_matrix, train_target_matrix[:,4])\n        \n   \n    \nclf = grid.best_estimator_\n        \nprint(grid.best_params_)\nprint(grid.best_score_)\n","225d6d37":"public scores: LR 0.02029 -> grid search LR"}}