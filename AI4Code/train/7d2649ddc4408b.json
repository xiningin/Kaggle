{"cell_type":{"568c5109":"code","1118e7a2":"code","bb9127f4":"code","f374b3ba":"code","a6bb866a":"code","8ec74cc5":"code","7dca72c7":"code","8ec80aad":"code","0de7c4b3":"code","a9cff97b":"code","35178096":"code","ddfeb165":"code","2d018084":"code","8a6cf39e":"code","61f029fa":"code","14db465d":"code","5a2f0499":"code","aa244d58":"code","fd78d920":"code","3c82d564":"code","7a3053b2":"code","340cb5b2":"code","c5877f04":"code","8d0c7592":"code","53fbc7ef":"code","9d540d27":"code","eecdf4a1":"code","1d0b2718":"code","6ab4c201":"code","b7f95942":"code","523e52d7":"code","3a85a1a3":"code","a540c452":"code","0ab55821":"code","b23e4225":"code","042ba11f":"code","6b70180d":"code","56ea4e5b":"code","2217d4b5":"code","fd4baaaa":"code","4d307eb8":"code","cea65a90":"code","f36edb9b":"code","450093a6":"code","076ec213":"code","64642b96":"code","d9eb73c9":"code","93c38ee3":"code","3185fa9e":"code","73d926be":"code","947a9d93":"code","b6c08986":"code","771edf92":"code","23c36f1f":"code","8b6f76fb":"code","421b825e":"code","35d96b5e":"code","059a4c21":"code","7cafe6df":"code","02648077":"code","0e1fe839":"code","b0d1db64":"code","a29e8bd0":"code","38d939bf":"markdown","d5a2cd00":"markdown","e5e169b8":"markdown","8b0da37f":"markdown","9f0aae65":"markdown","893ef977":"markdown","2fe8a02d":"markdown","94b7cca5":"markdown","e1d3127e":"markdown","e89d219e":"markdown","b60b5fff":"markdown","1713015c":"markdown","840fcc9c":"markdown","a464a7ae":"markdown","a4a4abdd":"markdown","b4eb6dec":"markdown","bb93b9f2":"markdown","2534e4f7":"markdown","287364f7":"markdown","ec3435db":"markdown","59575284":"markdown","71c4d91e":"markdown","3a659f57":"markdown","b9554c48":"markdown","21b6e125":"markdown","ed49a836":"markdown","52d57a5d":"markdown","c11272e4":"markdown","b1ddd6ae":"markdown","eeba699a":"markdown","36aafb90":"markdown","2865150e":"markdown","90d4afdc":"markdown","cad00861":"markdown","24484db0":"markdown","a5f9fec0":"markdown","af8bbb0c":"markdown","1599f5c0":"markdown","b0119961":"markdown","3bc44002":"markdown","050d3b2e":"markdown","a4871354":"markdown","f5308f88":"markdown","0ba56d7a":"markdown","2290c5b0":"markdown","374d6582":"markdown","65ba80b0":"markdown","f75ce531":"markdown","155b2aaa":"markdown","d56c166d":"markdown","0e567019":"markdown","9464897f":"markdown","8166b6f1":"markdown","c199bb99":"markdown","ab59253f":"markdown","ae303aff":"markdown","0e61aab4":"markdown"},"source":{"568c5109":"# Ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Handle table-like data and matrices\nimport numpy as np\nimport pandas as pd\n\n# Visualisation\nimport matplotlib as mpl \nimport matplotlib.pyplot as plt\nimport matplotlib.pylab as pylab\nimport seaborn as sns\n\n\n#Modeling\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.ensemble import RandomForestClassifier,  VotingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\n\nfrom sklearn.model_selection import  cross_val_score, KFold, learning_curve\nfrom sklearn.model_selection import GridSearchCV\n\n%matplotlib inline","1118e7a2":"#get titanic data\ntrain = pd.read_csv(\"..\/input\/train.csv\") #(891,12)\ntest = pd.read_csv(\"..\/input\/test.csv\") #(418, 11)\n\n#combine train & test\ntotal = train.append(test, ignore_index = True)","bb9127f4":"total.info() ","f374b3ba":"total.head()","a6bb866a":"total.describe(include='all')","8ec74cc5":"#unique value\nprint('col_name'.center(15),'count','value'.center(20))\nfor col in total.columns:\n    length=len(total[col].dropna().unique())\n    if length <=10:\n        print('##',col.center(11),':' ,length,' ,',total[col].dropna().unique())\n    else:\n        print('##',col.center(11),':' ,length)","7dca72c7":"total.isnull().sum()","8ec80aad":"a=train.Survived.value_counts()\nplt.pie(a,labels=a.index,autopct='%1.1f%%')","0de7c4b3":"sns.distplot(train.Age.dropna())","a9cff97b":"#Survival(%) by Age Interval\nfig,ax=plt.subplots(3,3)\nfig.subplots_adjust(hspace=0.8,wspace=0.4)\nfor interval in range(2,11):\n    age_dict0={(i,i+interval):0 for i in range(0,int(train.Age.max()+interval),interval)}\n    age_dict1={(i,i+interval):0 for i in range(0,int(train.Age.max()+interval),interval)}\n    \n    def survive_age1(age):\n        global age_dict0; value=age\/\/interval\n        age_dict0[(interval*value,interval*(value+1))]+=1\n                                        \n    def survive_age2(age):\n        global age_dict1; value=age\/\/interval\n        age_dict1[(interval*value,interval*(value+1))]+=1\n                      \n    train[\"Age\"][(train[\"Survived\"] == 0) & (train[\"Age\"].notnull())].apply(survive_age1)\n    train[\"Age\"][(train[\"Survived\"] == 1) & (train[\"Age\"].notnull())].apply(survive_age2)\n    age_list=[round(age_dict1[i]*100\/(age_dict1[i]+age_dict0[i])) for i in age_dict1.keys() if age_dict0[i]+age_dict1[i]!=0]\n    print('###interval=%d###'%(interval))\n    a,b=divmod(interval-2,3)\n    ax[a][b].plot(age_list,marker='.')\n    ax[a][b].set_title(\"interval:{}\".format(interval))\nplt.xlabel(\"Age\",x=-1,y=0)\nplt.show()\n    ","35178096":"a=train['Sex'].value_counts()\nprint(a)","ddfeb165":"plt.pie(a,labels=a.index,autopct='%1.1f%%')","2d018084":"sns.barplot(x=\"Sex\", y=\"Survived\", data=train)","8a6cf39e":"a=train['Embarked'].value_counts()\nprint(a)","61f029fa":"plt.pie(a,labels=a.index,autopct='%1.1f%%')","14db465d":"sns.barplot(x='Embarked', y='Survived', data=train)","5a2f0499":"train[[\"Embarked\",\"Survived\"]].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)","aa244d58":"a=train['Pclass'].value_counts()\nprint(a)\n","fd78d920":"plt.pie(a,labels=a.index,autopct='%1.1f%%')","3c82d564":"sns.catplot(x='Pclass',y='Survived',data=train,kind='bar',size=6)","7a3053b2":"grid = sns.FacetGrid(total, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend()","340cb5b2":"a=train['Parch'].value_counts()\nprint(a)","c5877f04":"plt.pie(a,labels=a.index,autopct='%1.1f%%')","8d0c7592":"sns.catplot(x='Parch',y='Survived',data=train,kind='bar',size=6)","53fbc7ef":"a=train['SibSp'].value_counts()\nprint(a)","9d540d27":"plt.pie(a,labels=a.index,autopct='%1.1f%%')","eecdf4a1":"sns.barplot(x='SibSp',y='Survived',data=train)","1d0b2718":"sns.distplot(train.Fare.dropna()) ","6ab4c201":"sns.catplot(x='Survived',y='Fare',data=train,kind='box',size=6)","b7f95942":"#Fare Distribution according to Survived\ngrid = sns.FacetGrid(total, col='Survived', height=3, aspect=1.6)\ngrid.map(plt.hist, 'Fare', alpha=.5, bins=20)\ngrid.add_legend();","523e52d7":"sns.heatmap(train.corr(),annot=True)","3a85a1a3":"sns.catplot(x='Embarked',y='Age',size=6,kind='box',data=total)\n#Conclusion : no special differenciation","a540c452":"sns.factorplot(x='Sex',y='Fare',size=6,kind='box',data=total)","0ab55821":"#Age Distirbution according to Title\ntotal['Title'] = total.Name.str.extract('([A-Za-z]+)\\.', expand=True)\nprint(list(total.Title.unique()))\nprint(total.Title.value_counts())\n\n","b23e4225":"total['Title'] = total['Title'].replace('Mlle', 'Miss')\ntotal['Title'] = total['Title'].replace(['Capt', 'Col','Countess',\n    'Don','Dona', 'Dr', 'Major','Mme','Ms','Lady','Sir', 'Rev', 'Jonkheer' ],'Rare')\nprint(total.Title.value_counts())","042ba11f":"total['FamilySize'] = total['SibSp'] + total['Parch'] + 1","6b70180d":"f,ax=plt.subplots(1,1,figsize=(15,4))\nsns.barplot('FamilySize','Survived',data=total,ax=ax)\nax.set_title('FamilySize vs Survived')\n","56ea4e5b":"total.loc[total['FamilySize'] == 1, 'FamilySize'] = 0\ntotal.loc[(total['FamilySize'] > 1) & (total['FamilySize'] <= 4), 'FamilySize'] = 1\ntotal.loc[(total['FamilySize'] > 4), 'FamilySize']   = 2","2217d4b5":"total[['FamilySize', 'Survived']].groupby(['FamilySize']).mean().sort_values(by='Survived',ascending=False)","fd4baaaa":"sns.heatmap(total.corr(),annot=True)","4d307eb8":"#Parchm SibSp del\ntotal = total.drop(['Parch','SibSp'], axis=1)","cea65a90":"total[total.Fare.isnull()]","f36edb9b":"sns.distplot(total.Fare[(total.Pclass==3) & (total.Fare.notnull())])","450093a6":"total['Fare'] = total.Fare.fillna(total[total['Pclass']==3]['Fare'].median())","076ec213":"total.Fare.isnull().sum()","64642b96":"total[total.Embarked.isnull()]","d9eb73c9":"sns.catplot(x='Embarked',y='Fare',size=6,kind='box',data=total)","93c38ee3":"total['Embarked'] = total.Embarked.fillna('C')","3185fa9e":"total.Embarked.isnull().sum()","73d926be":"TotalAge = total[total.Age.isnull()==False]\ngrid = sns.FacetGrid(TotalAge, col=\"Title\", hue=\"Title\",col_wrap=4)\ngrid.map(sns.distplot, \"Age\")","947a9d93":"total[['Title', 'Age']].groupby(['Title']).median().sort_values(by='Title',ascending=False)","b6c08986":"total['Age']=total.groupby('Title').transform(lambda x:x.fillna(x.median()))","771edf92":"total = total.drop(['Cabin','Name','Ticket'], axis=1)","23c36f1f":"total.head()","8b6f76fb":"total['Sex'] = total['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\ntotal.head()","421b825e":"total[\"Embarked\"] = total[\"Embarked\"].astype(\"category\")\ntotal = pd.get_dummies(total, columns = [\"Embarked\"],prefix=\"Embarked\")\ntotal.head()","35d96b5e":"total[\"Pclass\"] = total[\"Pclass\"].astype(\"category\")\ntotal = pd.get_dummies(total, columns = [\"Pclass\"],prefix=\"Pclass\")\ntotal.head()","059a4c21":"total[\"Title\"] = total[\"Title\"].astype(\"category\")\ntotal = pd.get_dummies(total, columns = [\"Title\"],prefix=\"Title\")","7cafe6df":"total[ 'Family_Single' ] = total[ 'FamilySize' ].map( lambda s : 1 if s == 0 else 0 )\ntotal[ 'Family_Small' ]  = total[ 'FamilySize' ].map( lambda s : 1 if s == 1 else 0 )\ntotal[ 'Family_Large' ]  = total[ 'FamilySize' ].map( lambda s : 1 if s == 2 else 0 )\n\ntotal = total.drop(['FamilySize'], axis=1)\ntotal.head()","02648077":"del train,test\ntrain=total[:891];test=total[891:];test_id=test['PassengerId'];test=test.drop(['Survived','PassengerId'],1)\ny_train=train['Survived'];x_train=train.drop(['Survived','PassengerId'],1)\n\nx_train1, x_test, y_train1, y_test = train_test_split(x_train, y_train, random_state=0)\ndel total,train","0e1fe839":"random_state = 0\nkfold = KFold(n_splits=5, shuffle=True, random_state=random_state)\n\nclassifiers = []\nclassifiers.append(SVC(random_state=random_state))\nclassifiers.append(DecisionTreeClassifier(random_state=random_state))\nclassifiers.append(RandomForestClassifier(random_state=random_state))\nclassifiers.append(KNeighborsClassifier())\nclassifiers.append(LogisticRegression(random_state = random_state))\n\n\ncv_means = [];cv_stds= []\nfor classifier in classifiers :\n    result=cross_val_score(classifier, x_train, y_train, scoring = \"accuracy\", cv = kfold)\n    cv_means.append(result.mean());cv_stds.append(result.std())\n    \ncv_df= pd.DataFrame({\"Means\":cv_means,\"Stds\": cv_stds,\"Algorithm\":[\"SVC\",\"DecisionTree\",\"RandomForest\",\"KNeighboors\",\"LogisticRegression\"]})\n\ng = sns.barplot(\"Means\",\"Algorithm\",data = cv_df,orient = \"h\",**{'xerr':cv_stds})\ng.set_xlabel(\"Mean Accuracy\")\ng = g.set_title(\"Cross validation scores\")","b0d1db64":"#Logistic Regression\nparam_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100]}\n\ngrid_search = GridSearchCV(LogisticRegression(), param_grid, cv=5,n_jobs=-1,return_train_score=True)\n\ngrid_search.fit(x_train1, y_train1)\nprint(\"Test score: {}\".format(grid_search.score(x_test,y_test)))\nprint(\"Best Parameter : {}\".format(grid_search.best_params_))\nprint(\"Best cross-validation score: {:.2f}\".format(grid_search.best_score_))\n\nprint(\"Best score model: \\n{}\".format(grid_search.best_estimator_))","a29e8bd0":"logi=LogisticRegression(C=0.1)\nlogi.fit(x_train,y_train)\ny_pred=logi.predict(test).astype(int)\ntest_score = round(logi.score(x_train, y_train) * 100, 2)\nprint(test_score)\n\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_id,\n        \"Survived\": y_pred\n    })\n\nsubmission.to_csv('submission.csv', index=False)","38d939bf":"# 4 Data Categorization & Dummy","d5a2cd00":"## Loading Dataset","e5e169b8":"## Info","8b0da37f":"## Import Packages","9f0aae65":"# 4.3 Pclass","893ef977":"We wonder If there is different depending on age interval like 2,3,4..<br>\nWe set interval from 2 to 10, and show y_axis: survival percentage ,x_axis: age.<br>\nFind out some age bands are different such as under 6 age and over 70 age.","2fe8a02d":"# 2. Feature Engineering","94b7cca5":"# 3.1 Fare","e1d3127e":"Pclass '1' have higher survival than others.","e89d219e":"# 5.2 Tunning Parameters","b60b5fff":"# 2.1 Name\n\nThe reason that we extract the title is for filling missing Age and it will be used for value when we process modeling.<br>\nName is consist of Title,first name,second name. We classify title of name into 5 titles like Mr, Mrs, Miss, Master, Rare.<br>\nSince the others are < 10 each of them so that we decide it would be better to combine all to Rare category.<br>","1713015c":"'S'  is most popular Embarking place ,but Survived probability is lowest.","840fcc9c":"# 3.3 Age","a464a7ae":"Fill median without outliers, Because Fare distribution has high kurtosis","a4a4abdd":"# 1.6 SibSp","b4eb6dec":"##Number of Null","bb93b9f2":"Age distribution looks like normal distribution","2534e4f7":"People who have 1,2 Siblings or spouse have high survival","287364f7":"# TITANIC DATA ANALYTICS_Python","ec3435db":"# 4.5 FamilySize","59575284":"# 1.5 Parch","71c4d91e":"# 4.2 Embarked","3a659f57":"Two women has 80 of Fare. So we look Embarked and Fare distribution.<br>\nAmong 3 ports , C port has fare range including 80. SO we decide those women's port is 'C'","b9554c48":"# 6. Prediction","21b6e125":"# 4.4 Title","ed49a836":"# 2.2 Parch+SibSp->FamilySize","52d57a5d":"Male is more than Female,but Survived probability is opposite.","c11272e4":"# 1.7 Fare","b1ddd6ae":"# 1.7 Relations among Variables","eeba699a":"# 1.2 Sex","36aafb90":"We suppose Family size is important for  survival.As a result, 1 ~4 size of family survived more than others.","2865150e":"As you can see, there are missing values.<br>\nThe order based on values having more missing values except Survived(because Survived feature is in test data): <br> (Many) Cabin > Age > Embarked > Fare <br>\n","90d4afdc":"\nAlmost done!  We've just finised feature engineering, now we need to adjust several models.<br>\n<pre>\ntrain: train set\ny_train: only Survived values of train set\nx_train: all values except for Survived\ntest: test set\n<\/pre>\n\nWe split the train set into train and test again for testing","cad00861":"# 1. Data Exploration","24484db0":"#1.0 Survived probability","a5f9fec0":"# 5.1 Cross-Validation","af8bbb0c":"# 4.1 Sex","1599f5c0":"We classify Female to 1 and Male to 0","b0119961":"# 5 Modeling","3bc44002":"We already categorized FamilySize, We renamed them as Family_Single,Small and Large","050d3b2e":"# 1.1 Age ","a4871354":"We use get_dummies in Pandas for processing Embarked","f5308f88":"There is difference of age distribution depending on title.<br>\nSo we fill age missing value according to mean age of title.","0ba56d7a":"There are some correlation between Pclass and Fare, SibSp and Parch .","2290c5b0":"# 0. Preparation","374d6582":"# 3 Filling Missing Values\n\nThese are missing values given below<br>\n\nFare: 1 <br>\nEmbarked: 2 <br>\nAge: 263 <br>\nCabin: 1114 <br>\n","65ba80b0":"# 1.3 Embarked","f75ce531":"We dicide to use Age, Embarked, Fare, Plcass, Sex and FamilySize for feature engineering.<br>\nThe reason of dropping the others:<br>\n<pre>\nCabin: Most of Cabins are missing\nName: We already extracted title\nTicket: We weren't able to find out encrypted meaning inside.\n<\/pre>","155b2aaa":"## Sex + Fare","d56c166d":"<a href=\"https:\/\/colab.research.google.com\/github\/COMETOUNIVERSE\/Kaggle\/blob\/master\/Titanic_python_20190329_semifinal.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>","0e567019":"Fare distribution has high kurtosis","9464897f":"# 1.4 Pclass","8166b6f1":"<ul>\n\t<li>0. Preparation<\/li>\n\t<li>1. Data Exploration<\/li>\n\t\t<ul>\n\t\t\t<li>1.1 Age<\/li>\n\t\t\t<li>1.2 Sex<\/li>\n\t\t\t<li>1.3 Embarked<\/li>\n\t\t\t<li>1.4 Pclass<\/li>\n\t\t\t<li>1.5 Parch<\/li>\n\t\t\t<li>1.6 SibSp<\/li>\n\t\t\t<li>1.7 Fare<\/li>\n\t\t\t<li>1.8 Relations among Variables<\/li>\n\t\t<\/ul>\n\t<li>2. Feature Engineering<\/li>\n\t\t<ul>\n\t\t\t<li>2.1 Name<\/li>\n\t\t\t<li>2.2 Parch+SibSp->FamilySize<\/li>\n\t\t<\/ul>\n    <li>3. Filling Missing Values<\/li>\n        <ul>\n            <li>3.1 Fare<\/li>\n            <li>3.2 Embarked<\/li>\n            <li>3.3 Age<\/li>\n        <\/ul>\n    <li>4. Data Categorization & Dummy<\/li>\n        <ul>\n            <li>4.1 Sex<\/li>\n            <li>4.2 Embarked<\/li>\n            <li>4.3 Pclass<\/li>\n            <li>4.4 Title<\/li>\n            <li>4.5 FamilySize<\/li>\n        <\/ul>\n\t<li>5. Modeling<\/li>\n\t\t<ul>\n\t\t\t<li>5.1 Cross-Validation<\/li>\n\t\t\t<li>5.2 Tunning Parameters<\/li>\n\t\t\t<li>5.3 Learning Curve<\/li>\n\t\t\t<li>5.4 Model Feature Importance<\/li>\n\t\t\t<li>5.5 Ensemble Modeling<\/li>\n\t\t<\/ul>\n\t<li>6. Prediction<\/li>\n<ul>","c199bb99":"## Embark + Age","ab59253f":"# 3.2 Embarked","ae303aff":"People who have 1,2,3 parents or children have high survival","0e61aab4":"Hello,<br>\nWe are beginner in Kaggle. <br> \nSo We refer to yassine ghouzam's Kernel(https:\/\/www.kaggle.com\/yassineghouzam\/titanic-top-4-with-ensemble-modeling) <br>\nWelcome any opinion about our Kernel.<br>\n\nThank you!<br>"}}