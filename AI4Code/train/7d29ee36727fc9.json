{"cell_type":{"b20b31e7":"code","c252757f":"code","a4fef514":"code","e1ae4aab":"code","7c94dd8c":"code","7c452400":"code","2c0e072f":"code","1cd2f37b":"code","bf4340e0":"code","0e44839a":"code","a400767c":"code","1a1dd809":"code","b6f265ec":"code","a2f25967":"code","d6b9b89e":"code","52710f4a":"code","b82912f5":"code","c4d89153":"code","67f89bb1":"code","8ba1493b":"code","1c8ff362":"code","6aed3545":"code","b80a8db5":"code","3cfe9a71":"code","83d0c403":"code","1ac60900":"markdown","778866f7":"markdown","8f442f45":"markdown","15eedbe9":"markdown","e2bee119":"markdown","2f10e7d0":"markdown","96271887":"markdown","02d82b21":"markdown","f57a4718":"markdown","dd6541e0":"markdown","e2fe33a8":"markdown","cf2efd18":"markdown"},"source":{"b20b31e7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","c252757f":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport keras\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Conv2D , MaxPool2D , Flatten , Dropout , MaxPooling2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom keras.applications import VGG19\nimport cv2\nimport os\nimport random\nimport tensorflow as tf","a4fef514":"labels = ['dandelion', 'daisy','tulip','sunflower','rose']\nimg_size = 224\ndef get_data(data_dir):\n    data = [] \n    for label in labels: \n        path = os.path.join(data_dir, label)\n        class_num = labels.index(label)\n        for img in os.listdir(path):\n            try:\n                img_arr = cv2.imread(os.path.join(path, img), cv2.IMREAD_COLOR)\n                resized_arr = cv2.resize(img_arr, (img_size, img_size)) # Reshaping images to preferred size\n                data.append([resized_arr, class_num])\n            except Exception as e:\n                print(e)\n    return np.array(data)","e1ae4aab":"data = get_data(\"\/kaggle\/input\/flowers-recognition\/flowers\")","7c94dd8c":"l = []\nfor i in data:\n    l.append(labels[i[1]])\nsns.set_style('dark')\nsns.countplot(l)","7c452400":"fig,ax=plt.subplots(5,2)\nfig.set_size_inches(15,15)\nfor i in range(5):\n    for j in range (2):\n        l=random.randint(0,len(data))\n        ax[i,j].imshow(data[l][0])\n        ax[i,j].set_title('Flower: '+labels[data[l][1]])\n        \nplt.tight_layout()","2c0e072f":"x = []\ny = []\n\nfor feature, label in data:\n    x.append(feature)\n    y.append(label)","1cd2f37b":"# Normalize the data\nx = np.array(x) \/ 255","bf4340e0":"# Reshaping the data from 1-D to 3-D as required through input by CNN's \nx = x.reshape(-1, img_size, img_size, 3)\ny = np.array(y)","0e44839a":"from sklearn.preprocessing import LabelBinarizer\nlabel_binarizer = LabelBinarizer()\ny = label_binarizer.fit_transform(y)","a400767c":"x_train,x_test,y_train,y_test = train_test_split(x , y , test_size = 0.2 , random_state = 0)","1a1dd809":"pre_trained_model = VGG19(input_shape=(224,224,3), include_top=False, weights=\"imagenet\")\n#pre_trained_model.trainable = False\n\nfor layer in pre_trained_model.layers[:19]:\n    layer.trainable = False\n\nmodel = Sequential([\n    pre_trained_model,\n    MaxPool2D((2,2) , strides = 2),\n    Flatten(),\n    Dense(5 , activation='softmax')])\nmodel.compile(optimizer = \"adam\" , loss = 'categorical_crossentropy' , metrics = ['accuracy'])\nmodel.summary()","b6f265ec":"from keras.callbacks import ReduceLROnPlateau\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', patience = 3, verbose=1,factor=0.6, min_lr=0.000001)","a2f25967":"history = model.fit(x_train,y_train, batch_size = 64 , epochs = 25 , validation_data = (x_test, y_test),callbacks = [learning_rate_reduction])","d6b9b89e":"print(\"Loss of the model is - \" , model.evaluate(x_test,y_test)[0])\nprint(\"Accuracy of the model is - \" , model.evaluate(x_test,y_test)[1]*100 , \"%\")","52710f4a":"epochs = [i for i in range(25)]\nfig , ax = plt.subplots(1,2)\ntrain_acc = history.history['accuracy']\ntrain_loss = history.history['loss']\nval_acc = history.history['val_accuracy']\nval_loss = history.history['val_loss']\nfig.set_size_inches(20,10)\n\nax[0].plot(epochs , train_acc , 'go-' , label = 'Training Accuracy')\nax[0].plot(epochs , val_acc , 'ro-' , label = 'Testing Accuracy')\nax[0].set_title('Training & Testing Accuracy')\nax[0].legend()\nax[0].set_xlabel(\"Epochs\")\nax[0].set_ylabel(\"Accuracy\")\n\nax[1].plot(epochs , train_loss , 'g-o' , label = 'Training Loss')\nax[1].plot(epochs , val_loss , 'r-o' , label = 'Testing Loss')\nax[1].set_title('Training & Testing Loss')\nax[1].legend()\nax[1].set_xlabel(\"Epochs\")\nax[1].set_ylabel(\"Loss\")\nplt.show()","b82912f5":"predictions = model.predict_classes(x_test)\npredictions[:5]","c4d89153":"y_test_inv = label_binarizer.inverse_transform(y_test)","67f89bb1":"print(classification_report(y_test_inv, predictions, target_names = labels))","8ba1493b":"cm = confusion_matrix(y_test_inv,predictions)\ncm","1c8ff362":"cm = pd.DataFrame(cm , index = labels , columns = labels)","6aed3545":"plt.figure(figsize = (10,10))\nsns.heatmap(cm,cmap= \"Blues\", linecolor = 'black' , linewidth = 1 , annot = True, fmt='' , xticklabels = labels , yticklabels = labels)","b80a8db5":"# now storing some properly as well as misclassified indexes'.\ni=0\nprop_class=[]\nmis_class=[]\n\nfor i in range(len(y_test_inv)):\n    if(y_test_inv[i] == predictions[i]):\n        prop_class.append(i)\n    if(len(prop_class)==8):\n        break\n\ni=0\nfor i in range(len(y_test_inv)):\n    if(y_test_inv[i] != predictions[i]):\n        mis_class.append(i)\n    if(len(mis_class)==8):\n        break","3cfe9a71":"count=0\nfig,ax=plt.subplots(4,2)\nfig.set_size_inches(15,15)\nfor i in range (4):\n    for j in range (2):\n        ax[i,j].imshow(x_test[prop_class[count]])\n        ax[i,j].set_title(\"Predicted Flower : \"+ labels[predictions[prop_class[count]]] +\"\\n\"+\"Actual Flower : \"+ labels[y_test_inv[prop_class[count]]])\n        plt.tight_layout()\n        count+=1","83d0c403":"count=0\nfig,ax=plt.subplots(4,2)\nfig.set_size_inches(15,15)\nfor i in range (4):\n    for j in range (2):\n        ax[i,j].imshow(x_test[mis_class[count]])\n        ax[i,j].set_title(\"Predicted Flower : \"+labels[predictions[mis_class[count]]]+\"\\n\"+\"Actual Flower : \"+labels[y_test_inv[mis_class[count]]])\n        plt.tight_layout()\n        count+=1","1ac60900":"**Reference**\n* https:\/\/www.kaggle.com\/madz2000\/flowers-classification-using-vgg19-87-accuracy","778866f7":"# Analysis after Model Training","8f442f45":"**INCORRECTLY CLASSIFIED FLOWER IMAGES**","15eedbe9":"# Overview of Dataset\n**This dataset contains 4242 images of flowers.The data collection is based on the data flicr, google images, yandex images.You can use this datastet to recognize plants from the photo.The pictures are divided into five classes: chamomile, tulip, rose, sunflower, dandelion.\nFor each class there are about 800 photos. Photos are not high resolution, about 320x240 pixels. Photos are not reduced to a single size, they have different proportions!**\n![image.png](attachment:image.png)","e2bee119":"**Randomly Previewing first 10 images**","2f10e7d0":"**CORRECTLY CLASSIFIED FLOWER IMAGES**","96271887":"# Data Visualization and Preprocessing","02d82b21":"# <font color='purple'>CONVOLUTIONAL NEURAL NETWORKS TO THE RESCUE<\/font>\nA Convolutional Neural Network is a special type of an Artificial Intelligence implementation which uses a  special mathematical matrix manipulation called the convolution operation to process data from the images.\n\n* A **convolution** does this by multiplying two matrices and yielding a third, smaller matrix. \n* The Network takes an input image, and uses a filter **(or kernel)**  to create a **feature map** describing the image. \n* In the convolution operation, we take a filter (usually 2x2 or 3x3 matrix ) and **slide** it over the image matrix. The coresponding numbers in both matrices are multiplied and and added to yield a single number describing that input space. This process is repeated all over the image.This can be seen in the following animation\n![https:\/\/cdn-images-1.medium.com\/max\/800\/1*VVvdh-BUKFh2pwDD0kPeRA@2x.gif](https:\/\/cdn-images-1.medium.com\/max\/800\/1*VVvdh-BUKFh2pwDD0kPeRA@2x.gif)                                     \n\n-------> This is a 2-D representation of calculations happening in 3 dimensions. This is what is actually happening \n![Source: https:\/\/cdn-images-1.medium.com\/max\/800\/1*EuSjHyyDRPAQUdKCKLTgIQ.png](https:\/\/cdn-images-1.medium.com\/max\/800\/1*EuSjHyyDRPAQUdKCKLTgIQ.png)      \n\n* We use different filters to pass over our inputs, and take all the feature maps, put them together as the final output of the convolutional layer.\n* We then pass the output of this layer through a non-linear activation function. The most commonly used one is ReLU. \n* The next step of our process involves further reducing the dimensionality of the data which will lower the computation power required for training this model. This is      achieved by using a **Pooling Layer.** The most commonly used one is **max pooling** which takes the maximum value in the window created by a filter. This              significantly reduces the training time and preserves significant information. \n![https:\/\/cdn-images-1.medium.com\/max\/800\/1*vbfPq-HvBCkAcZhiSTZybg.png](https:\/\/cdn-images-1.medium.com\/max\/800\/1*vbfPq-HvBCkAcZhiSTZybg.png)\n\nTwo of the most commonly associated words with CNN are **stride** and **padding **\n\n**STRIDE:** Stride just means the amount a filter moves during a covolution operation. So, a stride of 1 means that the filter will slide 1 pixel after each covolution operation as shown in this animation.\n![https:\/\/cdn-images-1.medium.com\/max\/800\/0*iqNdZWyNeCr5tCkc.](https:\/\/cdn-images-1.medium.com\/max\/800\/0*iqNdZWyNeCr5tCkc.)\n\n**PADDING:** Padding is just zero value pixels that surround the input image. This protects the loss of any valuable information since the feature map is ever shrinking. ","f57a4718":"# Training The Model","dd6541e0":"# Loading the Dataset","e2fe33a8":"**We perform a grayscale normalization to reduce the effect of illumination's differences.Moreover the CNN converges faster on [0..1] data than on [0..255].**","cf2efd18":"**The dataset seems balanced as for each training label , enough training examples exist**"}}