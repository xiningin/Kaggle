{"cell_type":{"8aabc0f0":"code","bb5b431e":"code","9ff3012b":"code","206eb94d":"code","eca5129b":"code","765467e8":"code","6f17bf2c":"code","5e21ec42":"code","f8833ff4":"code","f21ac119":"code","cde1dd53":"code","caa4d7e3":"code","e5732e0a":"code","a8a8a060":"code","8e0f18ba":"code","0dccbc77":"code","ac9d9889":"code","287b1865":"code","7c2058d3":"code","6aa46531":"code","db517f37":"code","651007ff":"code","77630b0f":"code","22d50041":"code","ac91d61d":"code","c09c000e":"code","b5493a28":"code","02aa5677":"code","a48636d9":"code","7b0c952b":"code","2c416702":"code","524f72aa":"code","ac7de861":"code","46119084":"code","10bd2fbc":"code","632a7c87":"code","37856858":"code","81badcdb":"code","06dbc1db":"code","9d170789":"code","56a9be9b":"code","8dd04d73":"code","85702ba3":"code","fe6d86a2":"code","af28d452":"code","3c5a377e":"code","2ec8930a":"code","4f52f06d":"code","1506f5de":"code","55a6cf3b":"code","96e0e9aa":"markdown","718c5e39":"markdown","44f7abbb":"markdown","17e4a53c":"markdown","0f10700d":"markdown","55977808":"markdown","a1bc2fb5":"markdown","f1dddfa5":"markdown","106ed607":"markdown","af151a7f":"markdown","b36bb20e":"markdown","5a335999":"markdown","fefa21c8":"markdown","854f00fb":"markdown","7cb02dfb":"markdown","1453d12d":"markdown","f39ae6f4":"markdown","bbc158ec":"markdown","6eee1e93":"markdown","b2be8e75":"markdown","fbbd9cfd":"markdown","4bea8564":"markdown","ef488a7a":"markdown","6e5880ef":"markdown"},"source":{"8aabc0f0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns #seaborn\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","bb5b431e":"df = pd.read_csv(\"..\/input\/heart.csv\")","9ff3012b":"df.info()","206eb94d":"df.columns","eca5129b":"df.head()","765467e8":"df.describe()","6f17bf2c":"df.dropna(inplace = True)","5e21ec42":"#Correlation Map\nf,ax  = plt.subplots( figsize = (12,10))\nsns.heatmap(df.corr() , annot = True , linewidth = 10 , linecolor = 'black' , fmt = '.1f' , ax = ax)\nplt.show()","f8833ff4":"sns.countplot(df.target)\nplt.title(\"Number of Diseases\")\nplt.xlabel(\"NOT DISEASE                               DISEASE\")\nplt.ylabel(\"Count\")\n\n","f21ac119":"df_disease  = df[df['target'] == 1]\n\nsns.countplot(df_disease.sex,palette=\"Set3\")\nplt.title(\"Hearth disease occurence according to sex\")\nplt.xlabel(\"FEMALE                                      MALE\")","cde1dd53":"#%% Box Plot\n # Classifaction  \n #sex M = 1 F = 0\n #choloesterol\n #hue = Target 1 is disease , 0 is not disease\n #outlayer can be seen \n \nsns.boxplot(x =\"sex\", y = \"chol\" , hue = \"target\" , data  = df , palette = \"PRGn\")\nplt.show()\n\n\n","caa4d7e3":"#%% Swarmn Plot \n#FOR CLASSIFICATION\nsns.swarmplot (x= \"sex\", y =\"cp\" , hue = \"target\" ,data = df )\n","e5732e0a":"#FOR CLASSIFICATION\nsns.swarmplot (x= \"sex\", y =\"chol\" , hue = \"target\" ,data = df )","a8a8a060":"#FOR CLASSIFICATION\nsns.swarmplot (x= \"sex\", y =\"trestbps\" , hue = \"target\" ,data = df )","8e0f18ba":"sns.swarmplot(x = \"sex\" , y =\"fbs\", hue =\"target\", data = df )","0dccbc77":"sns.swarmplot(x = \"sex\" , y =\"thalach\", hue =\"target\", data = df )","ac9d9889":"df_male = df[df[\"sex\"] == 1]\ndf_female =df[df[\"sex\"] == 0]","287b1865":"# Pair Plot\nplt.figure(figsize=(10,8), dpi= 80)\nsns.pairplot(df, kind=\"scatter\", hue=\"target\", plot_kws=dict(s=80, edgecolor=\"white\", linewidth=2.5))\nplt.show()","7c2058d3":"#%% Kde Plot # \n\nsns.kdeplot(df.target ,df.cp , shade =True ,cut = 1)\n","6aa46531":"df.head(5)\ndf_FV = df_disease[[\"trestbps\",\"chol\",\"thalach\"]]","db517f37":"#%% Violin Plot  \n\n#Distribution of trestbps , chol , thalach in patients who HAVE Heart disease\n\n# Show each distribution with both violins and points\npal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data=df_FV, palette=pal, inner=\"points\") \n\nplt.show()\n","651007ff":"data2 = df_disease[[\"restecg\",\"exang\",\"oldpeak\",\"thal\",\"slope\"]]","77630b0f":"ax = sns.violinplot(data=data2, palette=\"Set2\", inner=\"points\",scale=\"width\",split = True) \n\nplt.show()","22d50041":"df_2 = df.drop(['age','sex'],axis =1)","ac91d61d":"color_list = ['red' if i== 1 else 'green' for i in df_2.loc[:,'target']]\npd.plotting.scatter_matrix(df_2.loc[:, df_2.columns != 'target'],\n                                       c=color_list,\n                                       figsize= [15,15],\n                                       diagonal='hist',\n                                       alpha=0.5,\n                                       s = 200,\n                                       marker = '*',\n                                       edgecolor= \"black\")\nplt.show()","c09c000e":"x_data = df.drop(['target'],axis = 1)","b5493a28":"y = df.target.values","02aa5677":"# %% normalization\nx = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values\n","a48636d9":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=42)","7b0c952b":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train,y_train)\nprint(\"test accuracy of LogisticRegression Model is  {}\".format(lr.score(x_test,y_test)))\n\n","2c416702":"# KNN\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3)\n#x,y = df.loc[:,df.columns != 'target'], df.loc[:,'target']\nknn.fit(x,y)\nprediction = knn.predict(x)\nprint('Prediction: {}'.format(prediction))\n","524f72aa":"# train test split\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 42)\n\n#%% KNN Classifier \nknn = KNeighborsClassifier(n_neighbors = 5)\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\n#print('Prediction: {}'.format(prediction))\nprint('With KNN (K=5) accuracy is: ',knn.score(x_test,y_test)) # accuracy","ac7de861":"# Model complexity\nneig = np.arange(1, 25)\ntrain_accuracy = []\ntest_accuracy = []\n# Loop over different values of k\nfor i, k in enumerate(neig):\n    # k from 1 to 25(exclude)\n    knn = KNeighborsClassifier(n_neighbors=k)\n    # Fit with knn\n    knn.fit(x_train,y_train)\n    #train accuracy\n    train_accuracy.append(knn.score(x_train, y_train))\n    # test accuracy\n    test_accuracy.append(knn.score(x_test, y_test))\n\n# Plot\nplt.figure(figsize=[13,8])\nplt.plot(neig, test_accuracy, label = 'Testing Accuracy')\nplt.plot(neig, train_accuracy, label = 'Training Accuracy')\nplt.legend()\nplt.title('-value VS Accuracy')\nplt.xlabel('Number of Neighbors')\nplt.ylabel('Accuracy')\nplt.xticks(neig)\nplt.savefig('graph.png')\nplt.show()\nprint(\"Best accuracy is {} with K = {}\".format(np.max(test_accuracy),1+test_accuracy.index(np.max(test_accuracy))))","46119084":"\n# %% train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test,y_train, y_test = train_test_split(x,y,test_size = 0.20,random_state = 42)\n","10bd2fbc":"#%% decision tree\n\nfrom sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ndt.fit(x_train,y_train)\n\nprint(\"decision tree score: \", dt.score(x_test,y_test))\n\n","632a7c87":"#%%  random forest\n# %%\n# %% train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test,y_train, y_test = train_test_split(x,y,test_size = 0.20,random_state = 42)\n\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(n_estimators = 100,random_state = 1)\nrf.fit(x_train,y_train)\nprint(\"random forest algorithm result: \",rf.score(x_test,y_test))","37856858":"#%%SVC Code and accuracy \n# train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3,random_state=42)\n # %% SVM\n \nfrom sklearn.svm import SVC\nsvm = SVC(random_state = 1)\nsvm.fit(x_train,y_train)\n \n# %% test\nprint(\"print accuracy of svm algo: \",svm.score(x_test,y_test))\n\n","81badcdb":"# %%Naive Bayes Application\n# %% train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test,y_train, y_test = train_test_split(x,y,test_size = 0.20,random_state = 42)\n\nfrom sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train,y_train)\n \n# %% test\nprint(\"print accuracy of naive bayes algo: \",nb.score(x_test,y_test))\n ","06dbc1db":"# %%\n# %% train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test,y_train, y_test = train_test_split(x,y,test_size = 0.20,random_state = 42)\n\n\n#%%  random forest\nfrom sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(n_estimators = 100,random_state = 42)\nrf.fit(x_train,y_train)\nprint(\"random forest algo result: \",rf.score(x_test,y_test))\n","9d170789":"\n##CONFUSION MATRIX FOR RANDOM FOREST MODEL\ny_pred = rf.predict(x_test)\ny_true = y_test\n#%% confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true,y_pred)\n\n\n# %% cm visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","56a9be9b":"from sklearn.model_selection import train_test_split\nx_train, x_test , y_train, y_test = train_test_split(x,y,test_size = 0.3)","8dd04d73":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=3)","85702ba3":"#K fold CV K = 10\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = knn , X = x_train , y = y_train , cv = 10)\nprint(\"avarege accuracy : \" ,np.mean(accuracies))\nprint(\"average std\" ,np.std(accuracies))","fe6d86a2":"knn.fit(x_train,y_train)\nprint(\"test accuracy: \",knn.score(x_test,y_test))","af28d452":"from sklearn.model_selection import GridSearchCV","3c5a377e":"# %% grid search cross validation for knn\n\nfrom sklearn.model_selection import GridSearchCV\n\ngrid = {\"n_neighbors\":np.arange(1,50)}\nknn= KNeighborsClassifier()\n\nknn_cv = GridSearchCV(knn, grid, cv = 10)  # GridSearchCV\nknn_cv.fit(x,y)\n\n#%% print hyperparameter KNN algoritmasindaki K degeri\nprint(\"tuned hyperparameter K: \",knn_cv.best_params_)\nprint(\"tuned best score: \",knn_cv.best_score_)","2ec8930a":"# STARTING FROM BEGINNING\nx_data = df.drop(['target'],axis = 1) # We drop target for train and test data\ny = df.target.values # y is our target where there is disease and not \n\n#NORMALIZATION of x \nx = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values\n\n#We split our data as test and train\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=42)\n\n#We fit our data\nknn.fit(x_train,y_train)\nlr.fit(x_train,y_train)\ndt.fit(x_train,y_train)\nrf.fit(x_train,y_train)\nsvm.fit(x_train,y_train)","4f52f06d":"x_axis  = ['logistic regression', 'knn' , 'decision_tree' , 'random_forest' , 'support_vector_machine', ]\ny_results =[lr.score(x_test,y_test),knn.score(x_test,y_test),dt.score(x_test,y_test),rf.score(x_test,y_test),svm.score(x_test,y_test)]","1506f5de":"plt.figure(figsize=(11,10))\nplt.xlabel(\"Machine Learning Algorithms\")\nplt.ylabel(\"ML SCORES\")\nplt.title(\"ML Algorithms vs Test Scores\")\nplt.plot(x_axis ,y_results)\n","55a6cf3b":"y_results","96e0e9aa":"**It can be concluded from KDE plot that people with heart disease are more likely to have a chest pain in type 2 and \npeople who do not have heart disease are more likely to not have a chest pain**","718c5e39":"# Algorithm Performance \n* For understanding algorithm's performance **CONFUSION MATRIX** can be used .\n* Confusion matrix is a matrix which show how did the algorithm classified the data . \n* For example ,  lets think we are making binary classification . \n* There are 4 possibilities. Firstly , \n* 1) We can classifty actual true data as true (True positvie)\n* 2) We can also classify actual true data as false in other words we can classify 1 as 0 (False Positive)\n* 3)We can classify actual false data as True .(False Negative)\n* 4) We can classify actual false data as False(True Negative )\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1600\/1*Z54JgbS4DUwWSknhDCvNTQ.png\" width=\"500px\">\n","44f7abbb":"* **#Random forest**\n<br>\n<br>\n* **Randomis simple , flexible machine learning algorith which is widely used for both classification and regression **\n* **Basically it consists of many decision trees **\n* **The final results depend upon the results of these decision trees**\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1600\/1*i0o8mjFfCn-uD79-F1Cqkw.png\" width=\"500px\">\n","17e4a53c":"**INTRODUCTION TO MACHINE LEARNING**\n","0f10700d":"# Grid Search Method","55977808":"* **NAIVE BAYES ALGORITHM**\n<br>\n<br>\n<br>\n<br>\n<br>\n* In this Algorithm , Bayes theorem of probability is used to predict the class of unknown data set.her\n* Bayes Theorem assumes , all properties that we used for deciding are independent of each other\n<img src=\"http:\/\/uc-r.github.io\/public\/images\/analytics\/naive_bayes\/naive_bayes_icon.png\" width=\"500px\">\n<br>\n<br>\n<br>\n<br>\n* P(c|x) is the posterior probability of class (c, target) given predictor (x, attributes).\n* P(c) is the prior probability of class.\n* P(x|c) is the likelihood which is the probability of predictor given class.\n* P(x) is the prior probability of predictor.\nFor further Information you can check  the source website<a href = \"https:\/\/www.analyticsvidhya.com\/blog\/2017\/09\/naive-bayes-explained\/\">","a1bc2fb5":"* **#1 is Male 0 is female. Target is 1 means there is disease . Target is 0 means there is no disease .**\n* **Having a higher chololesterol may not lead to having a hearth disease with respect to our data . **\n* **And females  are more likely to have higher cholesterol than male.**","f1dddfa5":"* **By using sklearn liblary , we are dividing our data . 20 percent of the data will be used for testing our model. **\n* **%80 percent of the data will be used for training our model**","106ed607":"**#DECISION TREE**\n* Decision Tree(CART ) is also known as Classification and Regressiion Trees.\n* In this data we are going to use for classification\n* **ADVANTAGES OF USING DECISION TREES**\n* Its easy to use and implement\n* Not needed too much data prepearing\n* It looks like its similar to human thinking form \n* Categorical data can be used \n* **EXAMPLE**\n <img src=\"https:\/\/s3-ap-southeast-1.amazonaws.com\/he-public-data\/Fig%201-18e1a01b.png\" width=\"500px\">","af151a7f":"**Since there are no strongly correlated elements its better not using linear regression for ML.**","b36bb20e":"**We may infer that males are more likely to have an hearth disease than female**","5a335999":"# INTRODUCTION\n* **In this kernel I ' am going to demonstrate application of some Machine Learning on Heart Disease UCI dataset **\n* **This dataset aims to detect whether there is heart attack on patient or not .**\n* **We are going to use some visualization tool from : **\n* **seaborn**\n* **mathplotlib**\n* **plotly **\n* **and some tools from  scikit  for Machine Learning**","fefa21c8":"* **In this violin plot I have select the people who have a heart disease **\n* **Distribution of trestbps , chol and thalach can be seen in this figure**","854f00fb":"    * **LOGISTIC REGRESSION\n* **Logistic regression is a widely known machine learning technique which is mostly used for CLASSIFICATION**\n* **Logistic regression gives best solution ,when our dependent variable is binary in this case its 'target' .**\n* **We may have more than 1 independent variable which will used for predicting our dependent variable **\n* **Independent variables may be in form of binary or interval**\n* **Sometimes we may need normalize and scale our inputs for getting better result in terms of predicting**\n","7cb02dfb":"**KNN ( K Nearest Neighbours)**\n* KNN is a machine learning algorithm which is widely used for classification .\n* Main aims of this algorithm is finding k nearest data to the point which is going to be classified .\n* By looking it's neighbours, algorithm decides to put data into which class .\n![](http:\/\/)<br>\n<br>\n<br>\n<br>\n <img src=\"https:\/\/dslytics.files.wordpress.com\/2017\/11\/knn.png\" width=\"400px\">\n <br>\n <br>\n*  In this picture k is chosen 3 .\n*  Star is the point to be classified\n*  X1, X2 ara properties of data .\n*  Since 2 of the 3 nearest neighbours are class B , star will be classified as class B.","1453d12d":"* **fbs** : (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n* **For female we can say that fasting blood sugar is not a good property to undestand the hearth disease since female may have an heart disease eventough they do not have blood sugar**\n* **For males who have high fasting blood sugar are more likely to have an heart disease**","f39ae6f4":"# CONCLUSION \n<br>\n* The highest score is found by SVM with 0.868\n* The worst score is foundy by Decision Tree with 0.803\n* As we can see some ML learning algorithm gives better results than other algorithms . \n* But we can not say the best ML algorithm is  x algorithm . \n* Because for another dataset, decision_tree may give higher results than SVM .\n<br>\n<br>\n* ** S\u0131nce I am begiiner , I would appreciate if you give feedbacks in comment section. :)**\n* ** THANKS FOR READING TILL HERE**\n <br>\n <br>\n* For more information you can check the links that I used for preparing these kernels. \n* https:\/\/www.kaggle.com\/kanncaa1\/machine-learning-tutorial-for-beginners\n* Confusion Matrix : https:\/\/towardsdatascience.com\/understanding-confusion-matrix-a9ad42dcfd62\n* Naive Bayes  : https:\/\/www.analyticsvidhya.com\/blog\/2017\/09\/naive-bayes-explained\n* SVM : https:\/\/www.analyticsvidhya.com\/blog\/2017\/09\/understaing-support-vector-machine-example-code\/\n* Random Forest : https:\/\/towardsdatascience.com\/the-random-forest-algorithm-d457d499ffcd\n* Decision Tree : https:\/\/medium.com\/deep-math-machine-learning-ai\/chapter-4-decision-trees-algorithms-b93975f7a1f1\n* \n","bbc158ec":"**We normalized our data in order to make all features balanced . In other words , We do not want 1 feauture dominate all other feautures .****","6eee1e93":"* **Males with no chest pain more likely to have no heart disease **\n* **Females may not have  chest pain eventough they have an heart disease**\n* **People with chest pain are more likely to have an heart disease**\n* **Some males may have an chest pain eventough they do not have an heart disease**","b2be8e75":"# Cross Validation\n* Score of the Machine Learning technique also depends on the how did train and test data are split . \n* Since the data split randomly , we can confront with extraordinary good or bad results than the actual data will give.\n* In order to eliminate this inconsistency , the technique called **'K Fold cross validation is used '**\n<br>\nTrain data is split into K part . \nIn each iteration ,1 part of the splitted dat is used as test data and the other parts are used as train data. Then we find test accuracy for this split.\nAt the end we have ,  K many test accuracy result . \nAt the end , we take avarege of these results and get the final test accuracy.\nBy using these techinque , we are eliminating unexpected result of random distribution .\n\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1600\/1*me-aJdjnt3ivwAurYkB7PA.png\" width=\"500px\">","fbbd9cfd":"**** *Dataframe Columns and Their Meanings**\n* **age**  : age in years\n* **sex** : ( 1 = male; 0 = female)\n* **cp**  : chest pain type\n* **trestbps** : resting blood pressure (in mm Hg on admission to the hospital)\n* **chol** :  serum cholestoral in mg\/dl\n* **fbs** : (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n* **restecg** :  resting electrocardiographic results\n* **thalach**  : maximum heart rate achieved\n* **exang** : exercise induced angina (1 = yes; 0 = no)\n* **oldpeak** : ST depression induced by exercise relative to rest\n* **slope**  : the slope of the peak exercise ST segment\n* **ca** : number of major vessels (0-3) colored by flourosopy\n* **thal** : 3 = normal; 6 = fixed defect; 7 = reversable defect\n* **target**  : 1 or 0**","4bea8564":"* **Mostly we can infer that if a woman has an high cholesterol , she more likely to have an heart disease**\n* **For males , its hard to classify whether they have a heart disease or not**","ef488a7a":"**SUPPORT VECTOR MACHINE **\n* SVM is an machine learning algorithm which is used for both classification and regression .\n* Main aim of SVM is finding the hypherplane which is the farthest from support vectors and separates the classes\n* In this picture the middle hyperplane should be chosen \n<img src=\"https:\/\/www.analyticsvidhya.com\/wp-content\/uploads\/2014\/10\/xyplot1.png\" width=\"500px\">","6e5880ef":"**** *Dataframe Columns and Their Meanings**\n* **restecg** :  resting electrocardiographic results\n* **exang** : exercise induced angina (1 = yes; 0 = no)\n* **oldpeak** : ST depression induced by exercise relative to rest\n* **slope**  : the slope of the peak exercise ST segment\n* **ca** : number of major vessels (0-3) colored by flourosopy\n* **thal** : 3 = normal; 6 = fixed defect; 7 = reversable defect\n"}}