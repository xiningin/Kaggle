{"cell_type":{"e3cdb304":"code","a5dc9a24":"code","e94fa331":"code","e959a30f":"code","1a939e18":"code","b7dc762e":"code","6e382203":"code","c560fceb":"code","af8832d9":"code","ee1a918b":"code","4027512b":"code","d1af071b":"code","2d59e609":"code","5b95dafc":"code","dcdeba33":"code","c13059f0":"code","330e3f5c":"code","5ad39e82":"code","b993f3ba":"code","311c38ff":"code","f84b1c62":"code","6d39eecc":"code","8f6b519f":"code","e3cb4409":"code","8d1d284f":"code","f0bdb0f9":"markdown","47502a70":"markdown","ae9da602":"markdown","3b1caf97":"markdown","e3fb25f1":"markdown","137f12fd":"markdown","576eaef1":"markdown"},"source":{"e3cdb304":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a5dc9a24":"import pandas as pd\nimport numpy as np\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier","e94fa331":"#Loading the data\ndata = pd.read_csv('..\/input\/daily-weather-dataset\/Daily_Weather_Dataset.csv')","e959a30f":"data.columns","1a939e18":"#Glimpse at Data\ndata","b7dc762e":"#Let's check out for any null values.\n\ndata[data.isnull().any(axis=1)]","6e382203":"#We don't need the number for each row\ndel data['number']","c560fceb":"#Now dropping the null values using the Pandas dropna function.\nbefore_rows = data.shape[0]\nprint(before_rows)","af8832d9":"data = data.dropna()","ee1a918b":"after_rows = data.shape[0]\nprint(after_rows)","4027512b":"#How many rows are dropped due to cleaning?\nbefore_rows - after_rows","d1af071b":"# First, Binarizing the relative_humidity_3pm to 0 or 1.\nclean_data = data.copy()\nclean_data['high_humidity_label'] = (clean_data['relative_humidity_3pm'] > 24.99)*1\nprint(clean_data['high_humidity_label'])","2d59e609":"y=clean_data[['high_humidity_label']].copy()\n#y","5b95dafc":"clean_data['relative_humidity_3pm'].head()","dcdeba33":"y.head()","c13059f0":"morning_features = ['air_pressure_9am','air_temp_9am','avg_wind_direction_9am','avg_wind_speed_9am',\n        'max_wind_direction_9am','max_wind_speed_9am','rain_accumulation_9am',\n        'rain_duration_9am']","330e3f5c":"X = clean_data[morning_features].copy()","5ad39e82":"X.columns","b993f3ba":"y.columns","311c38ff":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=324)","f84b1c62":"#Fitting on Train Set.\nhumidity_classifier = DecisionTreeClassifier(max_leaf_nodes=10, random_state=0)\nhumidity_classifier.fit(X_train, y_train)","6d39eecc":"type(humidity_classifier)","8f6b519f":"#Predict on Test Set\npredictions = humidity_classifier.predict(X_test)\npredictions[:10]","e3cb4409":"y_test['high_humidity_label'][:10]","8d1d284f":"accuracy_score(y_true = y_test, y_pred = predictions)","f0bdb0f9":"# Converting to a Classification Task","47502a70":"**Target is stored in 'y'.**","ae9da602":"**Use 9am Sensor Signals as Features to Predict Humidity at 3pm**","3b1caf97":"# Accuracy of the Classifier","e3fb25f1":"# Perform Test, Train & Split","137f12fd":"# Data Cleaning","576eaef1":"# Importing the Required Libraries"}}