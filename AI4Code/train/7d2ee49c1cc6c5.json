{"cell_type":{"d0fa6ef8":"code","69eeaa81":"code","81c0a55d":"code","053e58cc":"code","3fe6fd2b":"code","cd9748f2":"code","fd5cae63":"code","808edde8":"code","ac5a59d6":"code","73dd3540":"code","617f2424":"code","67465f1c":"code","28c55ba4":"code","f331248b":"code","0e52c030":"code","bada0b95":"code","74e336a6":"code","6681659f":"code","8a640c10":"code","7e0ad8b8":"code","6002ce90":"code","a58bcc1c":"code","89b1bec0":"code","a93b8e84":"code","7cbfa162":"code","927c73cf":"code","60a32cd2":"code","dce5653b":"code","efcabffe":"code","ae322139":"markdown","6a20451d":"markdown","20166f92":"markdown","13f127ad":"markdown","66f63e59":"markdown","e5817e8a":"markdown","bf2eac82":"markdown","ae8cfa6a":"markdown","1e654d5f":"markdown","c3f86cd3":"markdown","80a824ce":"markdown","58179659":"markdown","eb7a2c92":"markdown","b9ad5f85":"markdown","f62779bb":"markdown","d956c965":"markdown"},"source":{"d0fa6ef8":"MAX_SAMPLE = None # set a small number for experimentation, set None for production.","69eeaa81":"!pip install datasets --no-index --find-links=file:\/\/\/kaggle\/input\/coleridge-packages\/packages\/datasets\n!pip install ..\/input\/coleridge-packages\/seqeval-1.2.2-py3-none-any.whl\n!pip install ..\/input\/coleridge-packages\/tokenizers-0.10.1-cp37-cp37m-manylinux1_x86_64.whl\n!pip install ..\/input\/coleridge-packages\/transformers-4.5.0.dev0-py3-none-any.whl","81c0a55d":"import os\nimport re\nimport json\nimport time\nimport datetime\nimport random\nimport glob\nimport importlib\n\nimport numpy as np\nimport pandas as pd\npd.set_option('display.max_colwidth', None)\n\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nrandom.seed(123)\nnp.random.seed(456)","053e58cc":"train_path = '..\/input\/coleridgeinitiative-show-us-the-data\/train.csv'\ntrain = pd.read_csv(train_path)\ntrain = train[:MAX_SAMPLE]\ntest_sample = train.sample(100)\n\npaper_train_folder = '..\/input\/coleridgeinitiative-show-us-the-data\/train'\npapers_train = {}\nfor paper_id in train['Id'].unique():\n    with open(f'{paper_train_folder}\/{paper_id}.json', 'r') as f:\n        paper = json.load(f)\n        papers_train[paper_id] = paper","3fe6fd2b":"sample_submission_path = '..\/input\/coleridgeinitiative-show-us-the-data\/sample_submission.csv'\nsample_submission = pd.read_csv(sample_submission_path)\n\npapers_test = {}\n\npaper_test_folder = '..\/input\/coleridgeinitiative-show-us-the-data\/test'\nfor paper_id in sample_submission['Id']:\n    with open(f'{paper_test_folder}\/{paper_id}.json', 'r') as f:\n        paper = json.load(f)\n        papers_test[paper_id] = paper","cd9748f2":"def clean_text(txt):\n    return re.sub('[^A-Za-z0-9]+', ' ', str(txt).lower()).strip()\n\ndef totally_clean_text(txt):\n    txt = clean_text(txt)\n    txt = re.sub(' +', ' ', txt)\n    return txt","fd5cae63":"all_labels = {}\n\nfor label_1, label_2, label_3 in train[['dataset_title', 'dataset_label', 'cleaned_label']].itertuples(index=False):\n    all_labels[label_1.lower()] = label_3.lower()\n    all_labels[label_2.lower()] = label_3.lower()\n    all_labels[label_3.lower()] = label_3.lower()\n\nprint(f'No. different labels: {len(all_labels)}')\n\n\nvalidation_labels = ['adni', \"alzheimer's disease neuroimaging initiative (adni)\",\n                     'alzheimers disease neuroimaging initiative', 'alzheimer s disease neuroimaging initiative adni ',\n#                     'rural-urban continuum codes', 'rural urban continuum codes',\n#                     'baccalaureate and beyond', 'baccalaureate and beyond longitudinal study',\n                    ]\nfor val_lab in validation_labels:\n    all_labels.pop(val_lab)\n    \nprint(print(f'No. different labels: {len(all_labels)}'))","808edde8":"papers_valid = {}\ncount_valid = 0\nfor i, id, dataset_label, cleaned_label in train[['Id', 'dataset_label', 'cleaned_label']].itertuples(): #test_sample['Id']: sample_submission['Id']\n    paper = papers_train[id]\n    \n    labels = set()\n    \n    text_1 = '. '.join(section['text'] for section in paper).lower()\n    text_2 = totally_clean_text(text_1)\n    \n    if dataset_label.lower() in validation_labels or cleaned_label.lower() in validation_labels:\n        papers_valid[id] = papers_train[id]\n        count_valid += 1\n    else:\n        for label in validation_labels:\n            if label in text_1 or label in text_2:\n                papers_valid[id] = papers_train[id]\n                count_valid += 1\n                break\n    \n#     if dataset_label.lower() in validation_labels or cleaned_label.lower() in validation_labels:\n#         papers_valid[id] = papers_train[id]\n#         count_valid += 1\n            \nfor paper_id in papers_valid:\n    papers_train.pop(paper_id)\n\nprint(\"Valid label count: \", count_valid)\nprint(len(papers_train))\nprint(len(papers_valid))\n\n","ac5a59d6":"# all_labels = {}\n\n# for label_1, label_2, label_3 in train[['dataset_title', 'dataset_label', 'cleaned_label']].itertuples(index=False):\n#     all_labels[label_1.lower()] = label_3.lower()\n#     all_labels[label_2.lower()] = label_3.lower()\n#     all_labels[label_3.lower()] = label_3.lower()\n# #     all_labels.add(str(label_1).lower())\n# #     all_labels.add(str(label_2).lower())\n# #     all_labels.add(str(label_3).lower())\n# # for la in zip(all_labels.keys(), all_labels.values()):\n# #     print(la)\n# print(f'No. different labels: {len(all_labels)}')","73dd3540":"# def clean_text(txt):\n#     return re.sub('[^A-Za-z0-9]+', ' ', str(txt).lower()).strip()\n\n# def totally_clean_text(txt):\n#     txt = clean_text(txt)\n#     txt = re.sub(' +', ' ', txt)\n#     return txt","617f2424":"# literal_preds = []\n\n# for paper_id in papers_valid.keys(): #test_sample['Id']: sample_submission['Id']\n#     paper = papers_valid[paper_id]\n#     text_1 = '. '.join(section['text'] for section in paper).lower()\n#     text_2 = totally_clean_text(text_1)\n    \n#     labels = set()\n#     for label in all_labels.keys():\n#         if label in text_1 or label in text_2:\n#             labels.add(all_labels[label])\n# #             if label != all_labels[label]:\n# #                 print(f\"{label} -> {all_labels[label]}\")\n# #     print(labels)\n    \n#     labels = sorted(labels, key=len, reverse = True)\n# #     print(labels)\n# #     for idx, lab1 in enumerate(labels):\n# # #         print(lab1)\n# # #         print(\"...\")\n# #         for lab2 in [label for label in labels[idx:] if label != lab1]:\n# # #             print(lab2)\n# #             words1 = set(lab1.split())\n# #             words2 = set(lab2.split())\n# # #             print(f\"{len(words1 & words2)}\/{len(words1)}: {len(words1 & words2)\/len(words1)}\")\n# #             if len(words1 & words2)\/len(words1) > 0.75:\n# #                 labels.remove(lab2)\n        \n# #         print(\"---\")\n#     literal_preds.append('|'.join(labels))\n# #     print(literal_preds[-1])\n# #     print(\"***\")\n    \n# # print(literal_preds)\n","67465f1c":"# random.sample(list(zip(test_sample['cleaned_label'], literal_preds)), 8)","28c55ba4":"MAX_LENGTH = 48 # max no. words for each sentence.\nOVERLAP = 16 # if a sentence exceeds MAX_LENGTH, we split it to multiple sentences with overlapping\n\nPREDICT_BATCH = 64000 \n\nPRETRAINED_PATH = '..\/input\/scibert-validation-set-version\/output'\nTEST_INPUT_SAVE_PATH = '.\/input_data'\nTEST_NER_DATA_FILE = 'test_ner_input.json'\nTRAIN_PATH = '..\/input\/coleridge-bert-models\/train_ner.json'\nVAL_PATH = '..\/input\/coleridge-bert-models\/train_ner.json'\n\nPREDICTION_SAVE_PATH = '.\/pred'\nPREDICTION_FILE = 'test_predictions.txt'","f331248b":"train = train.groupby('Id').agg({\n    'pub_title': 'first',\n    'dataset_title': '|'.join,\n    'dataset_label': '|'.join,\n    'cleaned_label': '|'.join\n}).reset_index()\n\nprint(f'No. grouped training rows: {len(train)}')","0e52c030":"def clean_training_text(txt):\n    \"\"\"\n    similar to the default clean_text function but without lowercasing.\n    \"\"\"\n    return re.sub('[^A-Za-z0-9]+', ' ', str(txt)).strip()\n\ndef shorten_sentences(sentences):\n    short_sentences = []\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > MAX_LENGTH:\n            for p in range(0, len(words), MAX_LENGTH - OVERLAP):\n                short_sentences.append(' '.join(words[p:p+MAX_LENGTH]))\n        else:\n            short_sentences.append(sentence)\n    return short_sentences","bada0b95":"# test_rows = [] # test data in NER format\n# paper_length = [] # store the number of sentences each paper has\n\n# for paper_id in papers_valid.keys():\n#     # load paper\n#     paper = papers_valid[paper_id]\n\n#     # extract sentences\n#     sentences = [clean_training_text(sentence) for section in paper \n#                  for sentence in section['text'].split('.')\n#                 ]\n#     sentences = shorten_sentences(sentences) # make sentences short\n#     sentences = [sentence for sentence in sentences if len(sentence) > 10] # only accept sentences with length > 10 chars\n#     sentences = [sentence for sentence in sentences if any(word in sentence.lower() for word in ['data', 'study'])]\n\n#     # collect all sentences in json\n#     for sentence in sentences:\n#         sentence_words = sentence.split()\n#         dummy_tags = ['O']*len(sentence_words)\n#         test_rows.append({'tokens' : sentence_words, 'tags' : dummy_tags})\n\n#     # track which sentence belongs to which data point\n#     paper_length.append(len(sentences))\n\n# print(f'total number of sentences: {len(test_rows)}')\n\n###################################################################################\n\n#Import preselection model\nfrom joblib import dump, load\nclf = load('..\/input\/preselection-model-validation-set\/preselection_model.joblib') \n\ntest_rows = [] # test data in NER format\npaper_length = [] # store the number of sentences each paper has\n\n\n\nfor paper_id in papers_valid.keys():\n    # load paper\n    paper = papers_valid[paper_id]\n    \n    # extract sentences\n    sentences = [clean_training_text(sentence) for section in paper \n                 for sentence in section['text'].split('.')\n                ]\n    sentences = shorten_sentences(sentences) # make sentences short\n    sentences = [sentence for sentence in sentences if len(sentence) > 10] # only accept sentences with length > 10 chars\n    \n    predictions = clf.predict(sentences)\n#     print(sum(predictions))\n    sentences = [sentence for idx, sentence in enumerate(sentences) if predictions[idx] > 0.0]\n#     sentences = [sentence for sentence in sentences if re.match( r'(.* has been used.*|.* (dataset|survey|database|study) .*|.*obtained from .*|.*data from .*|.*data used in .*)', sentence.lower())]#any(word in sentence.lower() for word in ['national', 'research', 'data', 'survey', 'science', 'technology', 'development', 'department', 'study', 'statistics','international'])]\n        \n    # collect all sentences in json\n    for sentence in sentences:\n        sentence_words = sentence.split()\n        dummy_tags = ['O']*len(sentence_words)\n        test_rows.append({'tokens' : sentence_words, 'tags' : dummy_tags})\n    \n    # track which sentence belongs to which data point\n    paper_length.append(len(sentences))\n    \nprint(f'total number of sentences: {len(test_rows)}')","74e336a6":"os.environ[\"MODEL_PATH\"] = f\"{PRETRAINED_PATH}\"\nos.environ[\"TRAIN_FILE\"] = f\"{TRAIN_PATH}\"\nos.environ[\"VALIDATION_FILE\"] = f\"{VAL_PATH}\"\nos.environ[\"TEST_FILE\"] = f\"{TEST_INPUT_SAVE_PATH}\/{TEST_NER_DATA_FILE}\"\nos.environ[\"OUTPUT_DIR\"] = f\"{PREDICTION_SAVE_PATH}\"","6681659f":"# copy my_seqeval.py to the working directory because the input directory is non-writable\n!cp \/kaggle\/input\/coleridge-packages\/my_seqeval.py .\/\n\n# make necessart directories and files\nos.makedirs(TEST_INPUT_SAVE_PATH, exist_ok=True)","8a640c10":"def bert_predict():\n    !python ..\/input\/kaggle-ner-utils\/kaggle_run_ner.py \\\n    --model_name_or_path \"$MODEL_PATH\" \\\n    --train_file \"$TRAIN_FILE\" \\\n    --validation_file \"$VALIDATION_FILE\" \\\n    --test_file \"$TEST_FILE\" \\\n    --output_dir \"$OUTPUT_DIR\" \\\n    --report_to 'none' \\\n    --seed 123 \\\n    --do_predict","7e0ad8b8":"bert_outputs = []\n\nfor batch_begin in range(0, len(test_rows), PREDICT_BATCH):\n    # write data rows to input file\n    with open(f'{TEST_INPUT_SAVE_PATH}\/{TEST_NER_DATA_FILE}', 'w') as f:\n        for row in test_rows[batch_begin:batch_begin+PREDICT_BATCH]:\n            json.dump(row, f)\n            f.write('\\n')\n    \n    # remove output dir\n    !rm -r \"$OUTPUT_DIR\"\n    \n    # do predict\n    bert_predict()\n    \n    # read predictions\n    with open(f'{PREDICTION_SAVE_PATH}\/{PREDICTION_FILE}') as f:\n        this_preds = f.read().split('\\n')[:-1]\n        bert_outputs += [pred.split() for pred in this_preds]","6002ce90":"# get test sentences\ntest_sentences = [row['tokens'] for row in test_rows]\n\ndel test_rows","a58bcc1c":"bert_dataset_labels = [] # store all dataset labels for each publication\n\nfor length in paper_length:\n    labels = set()\n    for sentence, pred in zip(test_sentences[:length], bert_outputs[:length]):\n        curr_phrase = ''\n        for word, tag in zip(sentence, pred):\n            if tag == 'B': # start a new phrase\n                if curr_phrase:\n                    labels.add(curr_phrase)\n                    curr_phrase = ''\n                curr_phrase = word\n            elif tag == 'I' and curr_phrase: # continue the phrase\n                curr_phrase += ' ' + word\n            else: # end last phrase (if any)\n                if curr_phrase:\n                    labels.add(curr_phrase)\n                    curr_phrase = ''\n        # check if the label is the suffix of the sentence\n        if curr_phrase:\n            labels.add(curr_phrase)\n            curr_phrase = ''\n    \n    # record dataset labels for this publication\n    bert_dataset_labels.append(labels)\n    \n    del test_sentences[:length], bert_outputs[:length]","89b1bec0":"bert_dataset_labels[:100]","a93b8e84":"def jaccard_similarity(s1, s2):\n    l1 = s1.split(\" \")\n    l2 = s2.split(\" \")    \n    intersection = len(list(set(l1).intersection(l2)))\n    union = (len(l1) + len(l2)) - intersection\n    return float(intersection) \/ union\n\nfiltered_bert_labels = []\n\nfor labels in bert_dataset_labels:\n    filtered = []\n    \n    for label in sorted(labels, key=len):\n        label = clean_text(label)\n        if len(filtered) == 0 or all(jaccard_similarity(label, got_label) < 0.75 for got_label in filtered):\n            filtered.append(label)\n    filtered_bert_labels.append('|'.join(filtered))","7cbfa162":"filtered_bert_labels[:20]\nprint([x for x in filtered_bert_labels if x != ''])","927c73cf":"final_predictions = []\nfor bert_pred in filtered_bert_labels:\n    if bert_pred:\n        final_predictions.append(bert_pred)\n    else:\n        final_predictions.append('')","60a32cd2":"# print(final_predictions)\nprint([x for x in final_predictions if x != ''])","dce5653b":"# sample_submission['PredictionString'] = final_predictions\n# sample_submission.head()","efcabffe":"# sample_submission.to_csv(f'submission.csv', index=False)","ae322139":"### Transform data to NER format","6a20451d":"# Import","20166f92":"### Do predict and collect results","13f127ad":"This notebook gives a simple combination of literal matching and Named Entity Recognition using BERT (base model from huggingface).\n\nThe training phase of the BERT model was done in another kernel: Pytorch BERT for Named Entity Recognition.","66f63e59":"### Restore Dataset labels from predictions","e5817e8a":"# Load data","bf2eac82":"# Literal matching","ae8cfa6a":"### Create a knowledge bank","1e654d5f":"# Aggregate final predictions and write submission file","c3f86cd3":"### Matching on test data","80a824ce":"### Filter based on Jaccard score and clean","58179659":"Group by publication, training labels should have the same form as expected output.","eb7a2c92":"# Install packages","b9ad5f85":"### Paths and Hyperparameters","f62779bb":"# Making validation set","d956c965":"# Bert prediction"}}