{"cell_type":{"e2290289":"code","834cc22b":"code","5d2c3e29":"code","0cbaddfc":"code","50936b55":"code","d624abb4":"code","00902f4f":"code","913708e4":"code","8c101bda":"markdown"},"source":{"e2290289":"import json\nimport re\nimport gc\nimport pickle\nimport itertools\nimport pandas as pd\nimport numpy as np\nfrom glob import glob\nfrom datetime import datetime as dt\nfrom pathlib import Path\nfrom tqdm import tqdm\nimport datetime\nts_conv = np.vectorize(datetime.datetime.fromtimestamp) # ut(10 digit) -> date\n\n# pandas settings -----------------------------------------\npd.set_option(\"display.max_colwidth\", 100)\npd.set_option(\"display.max_rows\", None)\npd.set_option(\"display.max_columns\", None)\npd.options.display.float_format = '{:,.5f}'.format\n\n# Graph drawing -------------------------------------------\nimport matplotlib\nfrom matplotlib import font_manager\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfrom matplotlib import rc\nfrom matplotlib_venn import venn2, venn2_circles\nfrom matplotlib import animation as ani\nfrom IPython.display import Image\nfrom pylab import imread\n\nplt.rcParams[\"patch.force_edgecolor\"] = True\nfrom IPython.display import display # Allows the use of display() for DataFrames\nimport seaborn as sns\nsns.set(style=\"whitegrid\", palette=\"muted\", color_codes=True)\nsns.set_style(\"whitegrid\", {'grid.linestyle': '--'})\nred = sns.xkcd_rgb[\"light red\"]\ngreen = sns.xkcd_rgb[\"medium green\"]\nblue = sns.xkcd_rgb[\"denim blue\"]\n\n%matplotlib inline\n%config InlineBackend.figure_format='retina'\n\n# ML -------------------------------------------\nfrom sklearn.preprocessing import LabelEncoder\n\nimport warnings\nwarnings.simplefilter('ignore')","834cc22b":"# set your submission file here\n# This is my private submission.\npred_df = pd.read_csv('..\/input\/indoor-lb-6503\/lb4441-raw.csv') ","5d2c3e29":"pred_df['site'] = [s1 for s1, s2, s3 in pred_df.site_path_timestamp.str.split('_')]\npred_df['path'] = [s2 for s1, s2, s3 in pred_df.site_path_timestamp.str.split('_')]\npred_df['timestamp'] = [s3 for s1, s2, s3 in pred_df.site_path_timestamp.str.split('_')]","0cbaddfc":"#https:\/\/www.kaggle.com\/kenmatsu4\/feature-store-for-indoor-location-navigation\n\nclass SiteInfo():\n    def __init__(self, site_id, floor, input_path=\"..\/input\/indoor-location-navigation\/\"):\n        self.site_id = site_id\n        self.floor = floor\n        self.input_path = input_path\n        assert Path(input_path).exists(), f\"input_path do not exist: {input_path}\"\n        \n    def get_site_info(self, keep_raw=False):\n        floor_info_path = f\"{self.input_path}\/metadata\/{self.site_id}\/{self.floor}\/floor_info.json\"\n        with open(floor_info_path, \"r\") as f:\n            self.floor_info = json.loads(f.read())\n            self.site_height = self.floor_info[\"map_info\"][\"height\"]\n            self.site_width = self.floor_info[\"map_info\"][\"width\"]\n            if not keep_raw:\n                del self.floor_info\n            \n        geojson_map_path = f\"{self.input_path}\/metadata\/{self.site_id}\/{self.floor}\/geojson_map.json\"\n        with open(geojson_map_path, \"r\") as f:\n            self.geojson_map = json.loads(f.read())\n            self.map_type = self.geojson_map[\"type\"]\n            self.features = self.geojson_map[\"features\"]\n            \n            self.floor_coordinates = self.features[0][\"geometry\"][\"coordinates\"]\n            self.store_coordinates = [self.features[i][\"geometry\"][\"coordinates\"] \n                                          for i in range(1, len(self.features))]\n                \n            if not keep_raw:\n                del self.geojson_map\n    \n    def show_site_image(self):\n        path = f\"{self.input_path}\/metadata\/{self.site_id}\/{self.floor}\/floor_image.png\"\n        plt.imshow(imread(path), extent=[0, self.site_width, 0, self.site_height])\n\n    def draw_polygon(self, size=8, only_floor=False):\n\n        fig = plt.figure()\n        ax = plt.subplot(111)\n            \n        xmax, xmin, ymax, ymin = self._draw(self.floor_coordinates, ax, calc_minmax=True)\n        if not only_floor:\n            self._draw(self.store_coordinates, ax, fill=True)\n        plt.legend([])\n        \n        xrange = xmax - xmin\n        yrange = ymax - ymin\n        ratio = yrange \/ xrange\n        \n        self.x_size = size\n        self.y_size = size*ratio\n\n        fig.set_figwidth(size)\n        fig.set_figheight(size*ratio)\n        # plt.show()\n        return ax\n        \n    def _draw(self, coordinates, ax, fill=False, calc_minmax=False):\n        xmax, ymax = -np.inf, -np.inf\n        xmin, ymin = np.inf, np.inf\n        for i in range(len(coordinates)):\n            ndim = np.ndim(coordinates[i])\n            if ndim==2:\n                corrd_df = pd.DataFrame(coordinates[i])\n                if fill:\n                    ax.fill(corrd_df[0], corrd_df[1], alpha=0.7)\n                else:\n                    corrd_df.plot.line(x=0, y=1, style=\"-\", ax=ax)\n                        \n                if calc_minmax:\n                    xmax = max(xmax, corrd_df[0].max())\n                    xmin = min(xmin, corrd_df[0].min())\n\n                    ymax = max(ymax, corrd_df[1].max())\n                    ymin = min(ymin, corrd_df[1].min())\n            elif ndim==3:\n                for j in range(len(coordinates[i])):\n                    corrd_df = pd.DataFrame(coordinates[i][j])\n                    if fill:\n                        ax.fill(corrd_df[0], corrd_df[1], alpha=0.6)\n                    else:\n                        corrd_df.plot.line(x=0, y=1, style=\"-\", ax=ax)\n                        \n                    if calc_minmax:\n                        xmax = max(xmax, corrd_df[0].max())\n                        xmin = min(xmin, corrd_df[0].min())\n\n                        ymax = max(ymax, corrd_df[1].max())\n                        ymin = min(ymin, corrd_df[1].min())\n            else:\n                assert False, f\"ndim of coordinates should be 2 or 3: {ndim}\"\n        if calc_minmax:\n            return xmax, xmin, ymax, ymin\n        else:\n            return None\n        ","50936b55":"floor_convert = {'1F' :  0, '2F' : 1, '3F' : 2, '4F' : 3, '5F' : 4, \n                     '6F' : 5, '7F' : 6, '8F' : 7, '9F' : 8,\n                     'B'  : -1, 'B1' : -1, 'B2' : -2, 'B3' : -3, \n                     'BF' : -1, 'BM' : -1, \n                     'F1' : 0, 'F2' : 1, 'F3' : 2, 'F4' : 3, 'F5' : 4, \n                     'F6' : 5, 'F7' : 6, 'F8' : 7, 'F9' : 8, 'F10': 9,\n                     'L1' : 0, 'L2' : 1, 'L3' : 2, 'L4' : 3, 'L5' : 4, \n                     'L6' : 5, 'L7' : 6, 'L8' : 7, 'L9' : 8, 'L10': 9, \n                     'L11': 10,\n                     'G'  : 0, 'LG1': 0, 'LG2': 1, 'LM' : 0, 'M'  : 0, \n                     'P1' : 0, 'P2' : 1,}","d624abb4":"reconv = {}\n\nfor i in range(20):\n    reconv[i - 5] = []\n    \nfor k, v in floor_convert.items(): \n    reconv[v].append(k) ","00902f4f":"#https:\/\/www.kaggle.com\/hiro5299834\/indoor-navigation-and-location-wifi-features\ntrain_dir='..\/input\/indoor-navigation-and-location-wifi-features\/' # v3","913708e4":"for i, site_id in enumerate(pred_df.site.unique()):\n\n    sample_df = pred_df.query(\"site == @site_id\")\n    train_df = pd.read_csv(f'{train_dir}\/{site_id}_train.csv')\n    \n    for floor_id in sample_df['floor'].unique():\n        floor_df = sample_df[sample_df['floor'] == floor_id].reset_index(drop=True)\n\n        for fstr in reconv[floor_id]:\n            sample_map = SiteInfo(site_id, fstr)\n            try:\n                sample_map.get_site_info()\n            except:\n                pass\n            else:\n                break\n\n        plt.figure(figsize=(8, 8*sample_map.site_height \/ sample_map.site_width))\n        #plt.subplot(121)\n        \n        sample_map.show_site_image()\n\n        for _, g in floor_df.groupby(\"path\"):\n            plt.plot(g.x, g.y, \"-o\", alpha=0.6,  zorder=100, markersize=5 )\n            \n#        plt.title(f'pred {site_id}:{floor_id}')\n        \n        sample_train = train_df.query('f == @floor_id')\n        \n#        plt.subplot(122)\n#        sample_map.show_site_image()\n        \n        #for _, g in sample_train.groupby(\"path\"):\n        #    plt.plot(g.x, g.y, \"-o\", alpha=0.6,  zorder=100, markersize=5)\n        \n        plt.scatter(sample_train.x, sample_train.y, marker='+', s=3)\n        plt.title(f'train {site_id}:{floor_id}')\n        \n        # show all floor in this site\n        break \n    #break","8c101bda":"This kernel shows how to check your prediction with map and train data.\n\nHave Fun !!\n\nI used some nice functions and data from public kernels, thanks @kenmatsu4 and @hiro5299834\n* https:\/\/www.kaggle.com\/kenmatsu4\/feature-store-for-indoor-location-navigation\n* https:\/\/www.kaggle.com\/hiro5299834\/indoor-navigation-and-location-wifi-features\n\nupdated my sample submission to LB4.441 before post processing ;)"}}