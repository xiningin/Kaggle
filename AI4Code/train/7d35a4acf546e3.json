{"cell_type":{"489cbc6e":"code","28e62ea1":"code","f910e11f":"code","81e99000":"code","913c6e8f":"code","077e59ac":"code","27a8d2a9":"code","7803f17b":"code","4a7f0b47":"code","712d32af":"code","41c9ea8f":"code","d3b2e779":"code","2a9030ce":"code","2af7822d":"code","96068da7":"code","49e624c7":"code","a83a8df2":"code","0e56a7c4":"code","15cb3e89":"code","22f4e4df":"code","133f130a":"code","e32c6080":"code","57f5d5c3":"code","e3c6e781":"code","c9bd47dd":"markdown","531404ca":"markdown"},"source":{"489cbc6e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","28e62ea1":"import matplotlib.pyplot as plt\n# no need to write plt.show, code can be directly executed\n%matplotlib inline ","f910e11f":"# arange creates array\nx =  np.arange(0, 10)\ny =  np.arange(11, 21)","81e99000":"a =  np.arange(40, 50)\nb =  np.arange(50, 60)","913c6e8f":"# c is the color, g is green\nplt.scatter(x,y,c='g')\nplt.xlabel('X axis')\nplt.ylabel('Y axis')\nplt.title('Graph in 2D')\n# plt.savefig('2Dgraph.png') can be used to save graph as image in png\/jpeg","077e59ac":"y = x * x","27a8d2a9":"# plot for straight line\nplt.plot(x,y)","7803f17b":"plt.plot(x,y,'r')","4a7f0b47":"plt.plot(x,y,'r*')","712d32af":"plt.plot(x,y,'r*-')","41c9ea8f":"plt.plot(x,y,'r*--')","d3b2e779":"plt.plot(x,y,'ro--')","2a9030ce":"plt.plot(x,y,'r*', linestyle='dashed', linewidth=2, markersize=12)","2af7822d":"# Subplots are multiple plots in the same canvas\n\n# rows=2, columns= 2, so at maximum we can have 4 plots\nplt.subplot(2,2,1)\nplt.plot(x,y,'r')\nplt.subplot(2,2,2)\nplt.plot(x,y,'g')\nplt.subplot(2,2,3)\nplt.plot(x,y,'b')\nplt.subplot(2,2,4)\nplt.plot(x,y,'p')","96068da7":"# Now as there are 2 rows and 3 columns, we can have 6 plots\nplt.subplot(2,3,1)\nplt.plot(x,y,'r')\nplt.subplot(2,3,2)\nplt.plot(x,y,'g')\nplt.subplot(2,3,3)\nplt.plot(x,y,'b')\nplt.subplot(2,3,4)\nplt.plot(x,y,'gp')\nplt.subplot(2,3,5)\nplt.plot(x,y,'rp')\nplt.subplot(2,3,6)\nplt.plot(x,y,'bp')","49e624c7":"np.pi","a83a8df2":"#            start, end, step size     \nx = np.arange(0, 4 * np.pi, 0.1)\ny = np.sin(x)\nplt.title(\"Sin Wave Form\")\nplt.plot(x, y)\nplt.show()","0e56a7c4":"#            start, end, step size     \nx = np.arange(0, 5 * np.pi, 0.1)\ny_sin = np.sin(x)\ny_cos = np.cos(x)\n\n# set the first subplot as active\nplt.subplot(2,1,1)\nplt.plot(x, y_sin, 'r--')\nplt.title(\"Sine\")\n\n# set the second subplot as active\nplt.subplot(2,1,2)\nplt.plot(x, y_cos, 'g--')\nplt.title(\"Cosine\")\nplt.show()","15cb3e89":"x = [2, 8, 10]\ny = [11, 16, 9]\nx2 = [3, 9, 11]\ny2 = [6, 15, 7]\nplt.bar(x,y)\nplt.bar(x2, y2, color='green')\nplt.title('Bar Chart')\nplt.xlabel('X axis')\nplt.ylabel('Y axis')\nplt.show()","22f4e4df":"# These array values are on the x-axis and the count is on y-axis\na = np.array([22,87,5,43,56,73,55,54,11,20,51,5,79,31,27])\n# By default bins=10\nplt.hist(a, bins=20) \nplt.title(\"histogram\") \nplt.show()","133f130a":"# Box plot is used to find out percentiles\n# Selecting normal distribution between lower value 0 and std in range 1 to 4 with\n# step size of 100 for each value in range\ndata = [np.random.normal(0, std, 100) for std in range(1, 4)]\n\n# rectangular box plot\nplt.boxplot(data,vert=True,patch_artist=True);","e32c6080":"data","57f5d5c3":"\n# Data to plot\nlabels = 'Python', 'C++', 'Ruby', 'Java'\nsizes = [15, 35, 20, 30]\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']\n# Explode means how far the slice should be\nexplode = (0.4, 0, 0, 0)  # explode 1st slice\n\n# Plot\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=False)\n\nplt.axis('equal')\nplt.show()","e3c6e781":"# Let's explode 2 slices, 1st and last\n# Data to plot\nlabels = 'Python', 'C++', 'Ruby', 'Java'\nsizes = [15, 35, 20, 30]\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']\n# Explode means how far the slice should be\nexplode = (0.4, 0, 0, 0.2)  # explode 1st slice\n\n# Plot\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1d%%', shadow=True)\n\nplt.axis('equal')\nplt.show()","c9bd47dd":"# Histograms","531404ca":"# Box Plot"}}