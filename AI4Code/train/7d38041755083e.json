{"cell_type":{"ba7c1cbe":"code","aa238bb9":"code","5fcc9412":"code","5a28d8b9":"code","d92b5550":"code","07215578":"code","6916115a":"code","09db0bd3":"code","d456873c":"code","86340f0a":"code","c0397ec3":"code","cf051cc2":"code","750f38ec":"code","ccc056e9":"code","22d3eb2c":"markdown","f48e1451":"markdown","0d291439":"markdown","48c8e34a":"markdown","33c48bf7":"markdown","cac7a879":"markdown","7b0d61a8":"markdown","5967a520":"markdown","40684835":"markdown"},"source":{"ba7c1cbe":"import numpy as np\nimport pandas as pd\nfrom time import time\n\nfrom sklearn.datasets import fetch_lfw_people\nfrom sklearn.manifold import Isomap\nfrom sklearn.utils import check_random_state\nfrom sklearn import manifold\nfrom sklearn import datasets\nfrom sklearn import (manifold, datasets, decomposition, ensemble,\n                     discriminant_analysis, random_projection, neighbors)\n\nfrom collections import OrderedDict\nfrom functools import partial\n\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom matplotlib import offsetbox\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib.ticker import NullFormatter\nimport seaborn as sns; sns.set()\n\nprint(__doc__)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","aa238bb9":"faces = fetch_lfw_people(min_faces_per_person=70)\nfaces.data.shape","5fcc9412":"fig, ax = plt.subplots(3, 7, subplot_kw=dict(xticks=[], yticks=[]))\nfor i, axi in enumerate(ax.flat):\n    axi.imshow(faces.images[i], cmap='bone')","5a28d8b9":"def make_text(N=1000, rseed=42):\n    fig, ax = plt.subplots(figsize=(7, 1))\n    fig.subplots_adjust(left=0, right=1, bottom=0, top=1)\n    ax.axis('off')\n    ax.text(0.5, 0.4, 'ISOMAP', va='center', ha='center', weight='bold', size=85)\n    fig.savefig('text.png')\n    plt.close(fig)\n    \n    # Open this PNG and draw random points from it\n    from matplotlib.image import imread\n    data = imread('text.png')[::-1, :, 0].T\n    rng = np.random.RandomState(rseed)\n    X = rng.rand(3 * N, 2)\n    i, j = (X * data.shape).astype(int).T\n    mask = (data[i, j] < 1)\n    X = X[mask]\n    X[:, 0] *= (data.shape[0] \/ data.shape[1])\n    X = X[:N]\n    return X[np.argsort(X[:, 0])]","d92b5550":"X = make_text(1000)\ncolorize = dict(c=X[:, 0], cmap=plt.cm.get_cmap('rainbow', 40))\ndef rotate(X, angle):\n    theta = np.deg2rad(angle)\n    R = [[np.cos(theta), np.sin(theta)],\n         [-np.sin(theta), np.cos(theta)]]\n    return np.dot(X, R)\n    \nX2 = rotate(X, -20) + 3\nplt.scatter(X2[:, 0], X2[:, 1], **colorize)\nplt.axis('equal');","07215578":"def plot_components(data, model, images=None, ax=None,\n                    thumb_frac=0.05, cmap='gray'):\n    ax = ax or plt.gca()\n    \n    proj = model.fit_transform(data)\n    ax.plot(proj[:, 0], proj[:, 1], '.k')\n    \n    if images is not None:\n        min_dist_2 = (thumb_frac * max(proj.max(0) - proj.min(0))) ** 2\n        shown_images = np.array([2 * proj.max(0)])\n        for i in range(data.shape[0]):\n            dist = np.sum((proj[i] - shown_images) ** 2, 1)\n            if np.min(dist) < min_dist_2:\n                # don't show points that are too close\n                continue\n            shown_images = np.vstack([shown_images, proj[i]])\n            imagebox = offsetbox.AnnotationBbox(\n                offsetbox.OffsetImage(images[i], cmap=cmap),\n                                      proj[i])\n            ax.add_artist(imagebox)","6916115a":"fig, ax = plt.subplots(figsize=(10, 10))\nplot_components(faces.data,\n                model=Isomap(n_components=2),\n                images=faces.images[:, ::2, ::2])","09db0bd3":"digits = datasets.load_digits(n_class=6)\nX = digits.data\ny = digits.target\nn_samples, n_features = X.shape\nn_neighbors = 30","d456873c":"def plot_embedding(X, title=None):\n    x_min, x_max = np.min(X, 0), np.max(X, 0)\n    X = (X - x_min) \/ (x_max - x_min)\n\n    plt.figure()\n    ax = plt.subplot(111)\n    for i in range(X.shape[0]):\n        plt.text(X[i, 0], X[i, 1], str(y[i]),\n                 color=plt.cm.Set1(y[i] \/ 10.),\n                 fontdict={'weight': 'bold', 'size': 9})\n\n    if hasattr(offsetbox, 'AnnotationBbox'):\n        # only print thumbnails with matplotlib > 1.0\n        shown_images = np.array([[1., 1.]])  # just something big\n        for i in range(X.shape[0]):\n            dist = np.sum((X[i] - shown_images) ** 2, 1)\n            if np.min(dist) < 4e-3:\n                # don't show points that are too close\n                continue\n            shown_images = np.r_[shown_images, [X[i]]]\n            imagebox = offsetbox.AnnotationBbox(\n                offsetbox.OffsetImage(digits.images[i], cmap=plt.cm.gray_r),\n                X[i])\n            ax.add_artist(imagebox)\n    plt.xticks([]), plt.yticks([])\n    if title is not None:\n        plt.title(title)","86340f0a":"n_img_per_row = 14\nimg = np.zeros((13 * n_img_per_row, 14 * n_img_per_row))\nfor i in range(n_img_per_row):\n    ix = 11 * i + 2\n    for j in range(n_img_per_row):\n        iy = 10 * j + 4\n        img[ix:ix + 8, iy:iy + 8] = X[i * n_img_per_row + j].reshape((8, 8))\n\nplt.imshow(img, cmap=plt.cm.binary)\nplt.xticks([])\nplt.yticks([])\nplt.title('A selection from the 64-dimensional digits dataset')","c0397ec3":"print(\"Computing random projection\")\nrp = random_projection.SparseRandomProjection(n_components=2, random_state=64)\nX_projected = rp.fit_transform(X)\nplot_embedding(X_projected, \"Random Projection of the digits\")","cf051cc2":"print(\"Computing Isomap projection\")\nt6 = time()\nX_iso = manifold.Isomap(n_neighbors=n_neighbors, n_components=2\n                        ).fit_transform(X)\nprint(\"Done.\")\nplot_embedding(X_iso,\n               \"Isomap projection of the digits (time %.6fs)\" %\n               (time() - t6))","750f38ec":"# Next line to silence pyflakes. This import is needed.\nAxes3D\n\nn_points = 1000\nX, color = datasets.make_s_curve(n_points, random_state=3)\nn_neighbors = 10\nn_components = 2\n\n# Create figure\nfig = plt.figure(figsize=(13,8))\nfig.suptitle(\"Manifold Learning with %i points, %i neighbors\"\n             % (1000, n_neighbors), fontsize=14)\n\n# Add 3d scatter plot\nax = fig.add_subplot(231, projection='3d')\nax.scatter(X[:, 0], X[:, 1], X[:, 2], c=color, cmap=plt.cm.Spectral)\nax.view_init(3, -72)\n\n# Set-up manifold methods\nLLE = partial(manifold.LocallyLinearEmbedding,\n              n_neighbors, n_components, eigen_solver='auto')\n\nmethods = OrderedDict()\nmethods['Isomap'] = manifold.Isomap(n_neighbors, n_components)\nmethods['MDS'] = manifold.MDS(n_components, max_iter=110, n_init=1)\nmethods['LLE'] = LLE(method='standard')\n\n# Plot results\nfor i, (label, method) in enumerate(methods.items()):\n    t0 = time()\n    Y = method.fit_transform(X)\n    t1 = time()\n    print(\"%s: %.2g sec\" % (label, t1 - t0))\n    ax = fig.add_subplot(2, 3, 2 + i + (i > 2))\n    ax.scatter(Y[:, 0], Y[:, 1], c=color, cmap=plt.cm.Spectral)\n    ax.set_title(\"%s (%.2g sec)\" % (label, t1 - t0))\n    ax.xaxis.set_major_formatter(NullFormatter())\n    ax.yaxis.set_major_formatter(NullFormatter())\n    ax.axis('tight')\n\nplt.show()","ccc056e9":"# Next line to silence pyflakes.\nAxes3D\n# Variables for manifold learning.\nn_neighbors = 10\nn_samples = 1000\n\n# Create our sphere.\nrandom_state = check_random_state(2)\np = random_state.rand(n_samples) * (2 * np.pi - 0.85)\nt = random_state.rand(n_samples) * np.pi\n\n# Sever the poles from the sphere.\nindices = ((t < (np.pi - (np.pi \/ 9))) & (t > ((np.pi \/ 7))))\ncolors = p[indices]\nx, y, z = np.sin(t[indices]) * np.cos(p[indices]), \\\n    np.sin(t[indices]) * np.sin(p[indices]), \\\n    np.cos(t[indices])\n\n# Plot our dataset.\nfig = plt.figure(figsize=(21, 8))\nplt.suptitle(\"Manifold Learning with %i points, %i neighbors\"\n             % (1000, n_neighbors), fontsize=14)\n\nax = fig.add_subplot(251, projection='3d')\nax.scatter(x, y, z, c=p[indices], cmap=plt.cm.rainbow)\nax.view_init(40, -10)\n\nsphere_data = np.array([x, y, z]).T\n\n# Perform Locally Linear Embedding Manifold learning\nmethods = ['standard', 'modified']\nlabels = ['LLE', 'Modified LLE']\n\nfor i, method in enumerate(methods):\n    t0 = time()\n    trans_data = manifold\\\n        .LocallyLinearEmbedding(n_neighbors, 2,\n                                method=method).fit_transform(sphere_data).T\n    t1 = time()\n    print(\"%s: %.2g sec\" % (methods[i], t1 - t0))\n\n    ax = fig.add_subplot(252 + i)\n    plt.scatter(trans_data[0], trans_data[1], c=colors, cmap=plt.cm.rainbow)\n    plt.title(\"%s (%.2g sec)\" % (labels[i], t1 - t0))\n    ax.xaxis.set_major_formatter(NullFormatter())\n    ax.yaxis.set_major_formatter(NullFormatter())\n    plt.axis('tight')\n\n# Perform Isomap Manifold learning.\nt0 = time()\ntrans_data = manifold.Isomap(n_neighbors, n_components=3)\\\n    .fit_transform(sphere_data).T\nt1 = time()\nprint(\"%s: %.2g sec\" % ('ISO', t1 - t0))\n\nax = fig.add_subplot(257)\nplt.scatter(trans_data[0], trans_data[1], c=colors, cmap=plt.cm.rainbow)\nplt.title(\"%s (%.2g sec)\" % ('Isomap', t1 - t0))\nax.xaxis.set_major_formatter(NullFormatter())\nax.yaxis.set_major_formatter(NullFormatter())\nplt.axis('tight')\n\n# Perform Multi-dimensional scaling.\nt0 = time()\nmds = manifold.MDS(2, max_iter=100, n_init=1)\ntrans_data = mds.fit_transform(sphere_data).T\nt1 = time()\nprint(\"MDS: %.2g sec\" % (t1 - t0))\n\nax = fig.add_subplot(258)\nplt.scatter(trans_data[0], trans_data[1], c=colors, cmap=plt.cm.rainbow)\nplt.title(\"MDS (%.2g sec)\" % (t1 - t0))\nax.xaxis.set_major_formatter(NullFormatter())\nax.yaxis.set_major_formatter(NullFormatter())\nplt.axis('tight')\n\nplt.show()","22d3eb2c":"# Comparing Manifold learning Isomap with other methods","f48e1451":"# Plot images of the digits","0d291439":"# Random 2D projection using a random unitary matrix","48c8e34a":"Resources: [sklearn.manifold.Isomap](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.manifold.Isomap.html#sklearn.manifold.Isomap)","33c48bf7":"# Isomap projection of the digits dataset","cac7a879":"# Importing Libraries","7b0d61a8":"# Scale and visualize the embedding vectors","5967a520":"# Isomap on Different Faces","40684835":"# If you like this notebook, please give an Upvote! Don't forget to check out my other notebooks too!\n\n* [ConnectX Baseline](https:\/\/www.kaggle.com\/brendan45774\/connectx-baseline)\n* [Countries Life Expectancy Animation](https:\/\/www.kaggle.com\/brendan45774\/countries-life-expectancy-animation)\n* [Data Visuals - Matplotlib](http:\/\/www.kaggle.com\/brendan45774\/data-visuals-matplotlib)\n* [Digit Recognizer Solution](http:\/\/www.kaggle.com\/brendan45774\/digit-recognizer-solution)\n* [Dictionary and Pandas Cheat sheet](https:\/\/www.kaggle.com\/brendan45774\/dictionary-and-pandas-cheat-sheet)\n* [EDA Tutorial Hollywood Movies](https:\/\/www.kaggle.com\/brendan45774\/eda-tutorial-hollywood-movies)\n* [Getting Started with Manifold Learning - Isomap](https:\/\/www.kaggle.com\/brendan45774\/getting-started-with-manifold-learning-isomap)\n* [Getting started with Matplotlib](http:\/\/www.kaggle.com\/brendan45774\/getting-started-with-matplotlib)\n* [Guide to Matplotlib Image](https:\/\/www.kaggle.com\/brendan45774\/guide-to-matplotlib-image)\n* [HOG features - Histogram of Oriented Gradients](https:\/\/www.kaggle.com\/brendan45774\/hog-features-histogram-of-oriented-gradients)\n* [How to get the lowest score](https:\/\/www.kaggle.com\/brendan45774\/how-to-get-the-lowest-score)\n* [House predict solution](http:\/\/www.kaggle.com\/brendan45774\/house-predict-solution)\n* [K-Means Clustering (Image Compression)](https:\/\/www.kaggle.com\/brendan45774\/k-means-clustering-image-compression)\n* [Kuzushiji-MNIST Panda](http:\/\/www.kaggle.com\/brendan45774\/kuzushiji-mnist-panda)\n* [Plotly Coronavirus (Covid-19)](https:\/\/www.kaggle.com\/brendan45774\/plotly-coronavirus-covid-19)\n* [Titanic Top Solution](http:\/\/www.kaggle.com\/brendan45774\/titanic-top-solution)\n* [Titanic Data Solution](http:\/\/www.kaggle.com\/brendan45774\/titanic-data-solution)\n* [Topic Modeling (LDA)](https:\/\/www.kaggle.com\/brendan45774\/topic-modeling-lda)\n* [Word Cloud - Analyzing Names](https:\/\/www.kaggle.com\/brendan45774\/word-cloud-analyzing-names)"}}