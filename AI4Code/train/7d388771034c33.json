{"cell_type":{"5478cd10":"code","997ac695":"code","fe772a05":"code","42296178":"code","ee2bd750":"code","376d21f4":"code","eccec063":"code","b90edae2":"code","8e0d798a":"code","104607d4":"code","751bc3ba":"markdown","6e203809":"markdown","445cb12c":"markdown","f0151c56":"markdown","5d9e3fb4":"markdown","acab9b1a":"markdown","14137d05":"markdown","13d6314f":"markdown","24ec1f1e":"markdown","c67deeb0":"markdown","73a5c528":"markdown","63ef2de0":"markdown","4ff775c7":"markdown","1b603602":"markdown","29d08527":"markdown","736f369e":"markdown"},"source":{"5478cd10":"x <- 10                 # assign x the double 10\ny <- \"R is fun\"         # assign y a character string\nz <- (sqrt(144) == 12)  # assign z the result of a logical operation\n\nx\ny\nz","997ac695":"p<-8  # This works, but it looks messy.\np   \n\np <- 10 # Use spaces instead!\np","fe772a05":"x + p","42296178":"round(23.4567, digits = 2)","ee2bd750":"digits   # The variable digits doesn't exist","376d21f4":"round(23.4567, digits <- 2)\ndigits # The variable digits now exists","eccec063":"\"Your answer\"\nx <- 10\nx <- 5\n# x","b90edae2":"\"Your answer\"\ny <- 10\n# x + y","8e0d798a":"\"Your answer\"\nz <- y\n# (y * z) == (y ^ 2)","104607d4":"# 1 \n\n\"5\"\n\n# 2 \n\n\"15\"\n\n# 3\n\n\"TRUE\"","751bc3ba":"Defining a new variable when calling a function in this way is usually not what you want to do. Therefore it is considered good practice to use <- for variable assignment and reserve = for assigning function arguments (and == for checking equality.). There are other ways to assign variables in R, such as using the assign() function, but for the vast majority of purposes, <- will suffice.","6e203809":"On the other hand, <- always makes a variable assignment. For instance, Passing digits <- 2 to round() causes it to use 2 as the value for the digits argument AND assigns a new variable named digits the value 2.","445cb12c":"## Wrap Up","f0151c56":"# Intro to R Part 4: Variables\n[back to index](https:\/\/www.kaggle.com\/hamelg\/intro-to-r-index)","5d9e3fb4":"## Exercise Solutions","acab9b1a":"It is possible to assign variables in R using the equals symbol = instead of <-. The equal sign is used for variable assignment in many other programming languages (such as Python), which can make it tempting for users of those languages to carry over the habit of using the = sign for variable assignment in R. It is generally considered bad style to use = in R for variable assignment and you should strive to use <- instead.\n\nOne reason for using <- besides adhering conforming to the style preferred by the R community is that the equals sign is used in places other than variable assignment statements. Functions often take named arguments and when calling a function you use the = symbol to assign values to named arguments. For example, recall that the function round() can take an optional argument \"digits\" to round a decimal to a specific number of places:","14137d05":"## Next Lesson: [Intro to R Part 5: Vectors](https:\/\/www.kaggle.com\/hamelg\/intro-to-r-part-5-vectors)\n[back to index](https:\/\/www.kaggle.com\/hamelg\/intro-to-r-index)","13d6314f":"### Exercise #1\nWhat is the value of x? Replace the string below with your answer and then uncomment the final line and run the cell to see if you are correct.","24ec1f1e":"When assigning a variable, it is good practice to put a space between the variable name, the assignment operator and the variable value for clarity.","c67deeb0":"In this short lesson, we'll learn how to define variables in R. A variable is a name you assign a value or object, such as one of the R's atomic data types that we learned about [last time](https:\/\/www.kaggle.com\/hamelg\/intro-to-r-part-3-atomic-data-types). After assigning a variable, you can access its associated value or object using the variable's name. Variables are a convenient way of storing values with names that are meaningful.\n\nIn R, assign variables using <- (the less than sign followed by a hyphen.).","73a5c528":"In this lesson, we learned how to assign variables. Thus far, we've only been working with the atomic data types we covered in the last lesson, but you can assign all sorts of objects to variables beyond the basic data types we're familiar with. To get the most out of our variables and unlock the true power of R, we need to learn about R's data structures--objects that hold multiple values--that we can use to organize data and perform more interesting operations. Next time learn about R's most basic built in data stucture: the vector.","63ef2de0":"## Exercises","4ff775c7":"As seen above, you can assign a new value to a variable after creating it. The variable will take the most recently assigned value.\n\nAfter creating a variable, you can use the variables to perform operations on the objects assigned to them using thier names. For instsance, we can add the \"x\" and \"p\" variables we assigned earlier.","1b603602":"### Exercise #3\nWhat is the value of the commented expression? Replace the string below with your answer and then uncomment the final line and run the cell to see if you are correct.","29d08527":"In this case, the equals sign tells the function round() to use 2 as the value for the digits argument. It does NOT create a new variable called digits and assign it the value 2. We can see this by trying to check the value of the variable digits:","736f369e":"### Exercise #2\nWhat is the value of x + y? Replace the string below with your answer and then uncomment the final line and run the cell to see if you are correct."}}