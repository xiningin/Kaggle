{"cell_type":{"39f9d040":"code","63d2f381":"code","387b3887":"code","c8d353f2":"code","d42ce549":"code","8aabcbc2":"code","c96a0bbf":"code","9281a32e":"code","1f02c19a":"code","ee214217":"code","880e985f":"code","c7a789a1":"code","504b1ef0":"code","5713f5f8":"code","73865689":"code","c7025fea":"code","613d5c3f":"code","52f0853b":"code","88e1de71":"code","c5552ccd":"code","55e8fa83":"code","2af536e7":"code","85db5155":"code","912d5090":"code","7441bb0c":"code","03d5a9d6":"code","fb8b7be7":"code","ab6bb132":"code","4aedea5f":"code","5412d649":"code","7d711cb0":"code","52f5b030":"code","0d1f7cb9":"code","880b9c41":"code","6ff33302":"code","1c191078":"code","4d135f29":"code","bbc3a14c":"code","2c7cbaf9":"code","0a886924":"code","65fb8f22":"code","faf99409":"code","d8f7d92f":"code","6997f99b":"markdown","68bdd04e":"markdown","eca6d955":"markdown","537201f8":"markdown","e334ba75":"markdown","beee0eaf":"markdown","5bb165eb":"markdown","b6e29b73":"markdown","4ac6b729":"markdown","c0864f80":"markdown","12e0a31d":"markdown","db99feb2":"markdown","b9ccdbdd":"markdown","8f8fd150":"markdown","b13ebde5":"markdown","fbe2e9c4":"markdown","5757785a":"markdown","69d81cca":"markdown","07e89d53":"markdown","f92d646a":"markdown"},"source":{"39f9d040":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","63d2f381":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_structure = pd.read_csv('..\/input\/structures.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')\ndf_mst = pd.read_csv('..\/input\/magnetic_shielding_tensors.csv')\ndf_mc = pd.read_csv('..\/input\/mulliken_charges.csv')\ndf_dp = pd.read_csv('..\/input\/dipole_moments.csv')\ndf_pe = pd.read_csv('..\/input\/potential_energy.csv')\ndf_contrib = pd.read_csv('..\/input\/scalar_coupling_contributions.csv')","387b3887":"atoms = sorted(df_structure['atom'].unique())\nmst_elems = sorted([c for c in df_mst.columns if c not in ['atom_index', 'molecule_name']])\ndims = ['x', 'y', 'z']","c8d353f2":"atom_counts = df_structure.pivot_table(index='molecule_name', columns='atom', values='atom_index', aggfunc='count', fill_value=0)\n\nfig, axs = plt.subplots(1, 5, figsize=(15, 3))\nfor c, ax in zip(atom_counts.columns, axs):\n    ax.hist(atom_counts[c], bins=np.arange(atom_counts[c].max()) + 1)\n    ax.set_title(c)","d42ce549":"num_atoms = atom_counts.sum(axis=1)\nplt.figure(figsize=(7,7))\nnum_atoms.hist(bins=np.arange(num_atoms.max()) + 1)\nplt.title('Atom Count Histogram')\nplt.show()","8aabcbc2":"fig, axs = plt.subplots(5, 3, figsize=(15, 15))\nfor i, a in enumerate(atoms):\n    axs[i, 0].set_ylabel(a, rotation=0, size='large')\n    df_atom = df_structure[df_structure['atom'] == a]\n    for j, d in enumerate(['x', 'y', 'z']):\n        axs[i, j].hist(df_atom[d], bins=50)\nfor j, d in enumerate(['x', 'y', 'z']):\n    axs[0, j].set_title(d)\nplt.tight_layout()\nplt.show()","c96a0bbf":"pd.concat([df_structure[d].value_counts().value_counts() for d in dims], axis=1).fillna(0).astype(int)","9281a32e":"df_train.head()","1f02c19a":"plt.figure(figsize=(9,9))\ndf_train['scalar_coupling_constant'].hist(bins=100)\nplt.title('Scalar Coupline Constant Distribution')\nplt.show()","ee214217":"plt.figure(figsize=(9,9))\ndf_train.boxplot('scalar_coupling_constant', by='type', ax=plt.gca())\nplt.show()","880e985f":"contribs = ['fc', 'sd', 'pso', 'dso']","c7a789a1":"df_contrib.head()","504b1ef0":"df_contrib[contribs].hist(bins=100, figsize=(9, 9))\nplt.suptitle('Scalar Coupling Contributions Distribution')\nplt.show()","5713f5f8":"fig, axs = plt.subplots(1, 4, figsize=(16, 4))\nfor i, c in enumerate(contribs):\n    df_contrib.boxplot(c, by='type', ax=axs[i])\nplt.show()","73865689":"fig, axs = plt.subplots(1, 2, figsize=(14, 7))\n\natom_index_dif_train = (df_train['atom_index_0'] - df_train['atom_index_1'])\natom_index_dif_train.hist(bins=np.arange(atom_index_dif_train.min(), atom_index_dif_train.max() + 1), ax=axs[0])\n\natom_index_dif_test = (df_test['atom_index_0'] - df_test['atom_index_1'])\natom_index_dif_test.hist(bins=np.arange(atom_index_dif_test.min(), atom_index_dif_test.max() + 1), ax=axs[1])\n\naxs[0].set_title('Train')\naxs[1].set_title('Test')\nplt.suptitle('atom_index_0 - atom_index_1 distribution')\n\nplt.show()","c7025fea":"fig, axs = plt.subplots(1, 2, figsize=(14,7))\ndf_train.boxplot('scalar_coupling_constant', by='atom_index_0', ax=axs[0])\ndf_train.boxplot('scalar_coupling_constant', by='atom_index_1', ax=axs[1])\nplt.title('Scalar Coupling Constant boxplots by atom_index')\nplt.show()","613d5c3f":"df_train['index_0_gt_1'] = df_train['atom_index_0'] > df_train['atom_index_1']\ndf_test['index_0_gt_1'] = df_test['atom_index_0'] > df_test['atom_index_1']","52f0853b":"df_train.hist('scalar_coupling_constant', by='index_0_gt_1', figsize=(14, 7), bins=100)\nplt.suptitle('Scalar Couplig Constant distribution if atom_index_0 > atom_index_1')\nplt.show()","88e1de71":"df_train.pivot_table(index='type', columns='index_0_gt_1', aggfunc='count', values='id', fill_value=0)","c5552ccd":"df_test.pivot_table(index='type', columns='index_0_gt_1', aggfunc='count', values='id', fill_value=0)","55e8fa83":"fig, axs = plt.subplots(8, 2, figsize=(6, 24), sharex=True)\nfor t_idx, t in enumerate(df_train['type'].unique()):\n    axs[t_idx, 0].set_ylabel(t, rotation=0, size='large')\n    for tf_idx, tf in enumerate([True, False]):\n        df_train[np.logical_and(\n            df_train['type'] == t,\n            df_train['index_0_gt_1'] == tf)]['scalar_coupling_constant'].hist(\n            bins=100, density=True, ax=axs[t_idx, tf_idx])\naxs[0, 0].set_title('atom_index_0 > atom_index_1')\naxs[0, 1].set_title('atom_index_1 > atom_index_0')\nplt.suptitle('Scalar Coupling Constant by Type and Funny Business')\nplt.tight_layout()\nplt.show()","2af536e7":"df_mst.head()","85db5155":"df_mst[mst_elems].hist(bins=100, figsize=(9, 9))\nplt.show()","912d5090":"mst_repeats = pd.concat([df_mst[c].value_counts().value_counts() for c in mst_elems], axis=1).fillna(0).astype(int)\nmst_repeats.T","7441bb0c":"df_mc.head()","03d5a9d6":"plt.figure()\ndf_mc['mulliken_charge'].hist(bins=100)","fb8b7be7":"atom_mc = df_mc.merge(df_structure, how='left', on=['molecule_name', 'atom_index'])","ab6bb132":"fig, axs = plt.subplots(1, 5, figsize=(25, 5))\nfor c, ax in zip(atom_counts.columns, axs):\n    df_atom = atom_mc[atom_mc['atom'] == c]\n    ax.hist(df_atom['mulliken_charge'], bins=100)\n    ax.set_title(c)","4aedea5f":"mc_repeats = atom_mc['mulliken_charge'].value_counts().value_counts()\npd.DataFrame(mc_repeats).T","5412d649":"df_dp.head()","7d711cb0":"df_dp[['X', 'Y', 'Z']].hist(bins=200, figsize=(21, 7), layout=(1,3))\nplt.suptitle('Dipole XYZ Component Distributions')\nplt.show()","52f5b030":"pd.DataFrame((df_dp[['X', 'Y', 'Z']] == 0.0).sum(axis=1).value_counts(), columns=['Zero Components'])","0d1f7cb9":"fig, axs = plt.subplots(1, 3, figsize=(21, 7))\naxs[0].scatter(df_dp['X'], df_dp['Y'], alpha=0.01)\naxs[1].scatter(df_dp['X'], df_dp['Z'], alpha=0.01)\naxs[2].scatter(df_dp['Y'], df_dp['Z'], alpha=0.01)\naxs[0].set_title('XY')\naxs[1].set_title('XZ')\naxs[2].set_title('YZ')\nplt.title('Dipole Moment Components Scattered')\nplt.show()","880b9c41":"df_dp[['X', 'Y', 'Z']].apply(np.linalg.norm, axis='columns').hist(bins=100, figsize=(7,7))\nplt.title('L2 Norm of Dipole Moment Distribution')\nplt.show()","6ff33302":"pd.concat([df_dp[d].value_counts().value_counts() for d in ['X', 'Y', 'Z']], axis=1).fillna(0).astype(int).T","1c191078":"df_pe['potential_energy'].hist(bins=500, figsize=(15,5))\nplt.title('Potential Energy Distribution')\nplt.show()","4d135f29":"pd.DataFrame(df_pe['potential_energy'].value_counts().value_counts()).T","bbc3a14c":"fig, axs = plt.subplots(2, 2, figsize=(12,12))\ndf_train['atom_index_0'].hist(bins=np.arange(df_train['atom_index_0'].max()+1), ax=axs[0, 0])\ndf_train['atom_index_0'].hist(bins=np.arange(df_train['atom_index_1'].max()+1), ax=axs[0, 1])\ndf_test['atom_index_0'].hist(bins=np.arange(df_test['atom_index_0'].max()+1), ax=axs[1, 0])\ndf_test['atom_index_0'].hist(bins=np.arange(df_test['atom_index_1'].max()+1), ax=axs[1, 1])\naxs[0, 0].set_ylabel('Train', rotation=0, size='large')\naxs[1, 0].set_ylabel('Test', rotation=0, size='large')\naxs[0, 0].set_title('atom_index_0')\naxs[0, 1].set_title('atom_index_1')\nplt.suptitle('Atom Index Distribution')\nplt.show()","2c7cbaf9":"num_atoms_test = df_test.merge(pd.DataFrame(num_atoms, columns=['num_atoms']), on='molecule_name', how='left')\nnum_atoms_train = df_train.merge(pd.DataFrame(num_atoms, columns=['num_atoms']), on='molecule_name', how='left')","0a886924":"plt.figure()\nplt.hist(num_atoms_train['num_atoms'], bins=np.arange(30), label='train', density=True, alpha=0.5)\nplt.hist(num_atoms_test['num_atoms'], bins=np.arange(30), label='test', density=True, alpha=0.5)\nplt.legend()\nplt.title('Atoms per Molcule Distribution')\nplt.show()","65fb8f22":"type_distribution = pd.concat([\n    df_train['type'].value_counts() \/ len(df_train),\n    df_test['type'].value_counts() \/ len(df_test)\n], axis=1)\ntype_distribution.columns = ['train_type_distribution', 'test_type_distribution']\ntype_distribution","faf99409":"print('{} rows per molecule in train.'.format(len(df_train) \/ len(df_train['molecule_name'].unique())))\nprint('{} rows per molecule in test.'.format(len(df_test) \/ len(df_test['molecule_name'].unique())))","d8f7d92f":"num_values_train = df_train.groupby('molecule_name')['atom_index_0'].apply(len)\ndf_atoms_values_train = pd.DataFrame(num_values_train)\ndf_atoms_values_train = df_atoms_values_train.merge(pd.DataFrame(num_atoms), left_index=True, right_index=True)\ndf_atoms_values_train.columns = ['num_values', 'num_atoms']\n\nnum_values_test = df_test.groupby('molecule_name')['atom_index_0'].apply(len)\ndf_atoms_values_test = pd.DataFrame(num_values_test)\ndf_atoms_values_test = df_atoms_values_test.merge(pd.DataFrame(num_atoms), left_index=True, right_index=True)\ndf_atoms_values_test.columns = ['num_values', 'num_atoms']\n\nfig, axs = plt.subplots(1, 2, figsize=(12, 6))\n(df_atoms_values_train['num_values'] \/ df_atoms_values_train['num_atoms']).hist(bins=50, ax=axs[0])\n(df_atoms_values_test['num_values'] \/ df_atoms_values_test['num_atoms']).hist(bins=50, ax=axs[1])\naxs[0].set_title('Train')\naxs[1].set_title('Test')\nplt.suptitle('CSV Rows Per Atom per Molecule')\nplt.show()","6997f99b":"Components scattered. No correlation. We can see that X is oddly narrower, they all have strange zero bands ,and Z in particular.","68bdd04e":"Repetition in values of the XYZ components. Why?!","eca6d955":"# Atom Counts <a id=\"atomcounts\"><\/a>","537201f8":"# Worrying Atom Index Funny Business <a id=\"funny\"><\/a>","e334ba75":"## Dipole Moments <a id=\"dipole\"><\/a>","beee0eaf":"# Table of Contents\n\n- [Atom Counts](#atomcounts)\n- [Positions](#positions)\n- [Scalar Coupling Constant](#scalarcouplingconstant)\n    - [Contributions](#contrib)\n- [Worrying Atom Index Funny Business](#funny)\n- [Additional Data](#additional)\n    - [Magnetic Shielding Tensor](#mst)\n    - [Mulliken Charge](#mc)\n    - [Dipole Moment](#dipole)\n    - [Potential Energy](#potential)\n- [Train vs. Test](#traintest)\n","5bb165eb":"# Scalar Coupling Constant <a id=\"scalarcouplingconstant\"><\/a>","b6e29b73":"## Potential Energy <a id=\"potential\"><\/a>","4ac6b729":"Essentially zero repetition in position values.","c0864f80":"## Scalar Coupling Contributions <a id=\"contrib\"><\/a>","12e0a31d":"# Additional Data <a id=\"additional\"><\/a>","db99feb2":"Values in the MST are repeated surprisingly frequently.\nBelow is how often a value is repeated once, twice, three times, etc. for each column.\nNot that a value repeated twice gets counted only once!\n\nA ZY value gets repeated 10,868 times? Wow.","b9ccdbdd":"# Welcome\n**This is not a one time build and publish. I intend to use this kernel as my personal workbook to answer ad-hoc questions that I have about the data.**","8f8fd150":"## Magnetic Sheilding Tensor <a id=\"mst\"><\/a>","b13ebde5":"Some repetitoin of values in the potential energy data","fbe2e9c4":"Lots of exactly repeated values in here for muliken_charge as well!","5757785a":"# Positions <a id=\"positoins\"><\/a>","69d81cca":"Bizzarrely the 2JHH, and 3JHH types have all been selected such that `atom_index_1` > `atom_index_0` and for *nearly* all other types it is the opposite.","07e89d53":"## Mulliken Charge <a id=\"mc\"><\/a>","f92d646a":"# Train vs Test <a id=\"traintest\"><\/a>"}}