{"cell_type":{"a778c021":"code","6e5af61e":"code","99ced026":"code","330b438c":"code","64bd5c39":"code","9e38a6a6":"code","3adbe86f":"code","a1574747":"code","dd4d3898":"code","545e9254":"code","38b9cd24":"code","9c80b329":"code","17e2baf3":"code","5c2fec1c":"code","0c79cbd0":"code","9c543cd3":"code","bb34adcd":"code","40187c5a":"code","42e2dacc":"code","217ccea2":"code","d4885bb1":"code","a50eac7e":"code","a68b0a46":"code","2dec809a":"code","6ce4e6da":"code","b544f661":"code","339986d4":"code","d9399c7f":"code","b690a270":"code","cb63ddd9":"code","e914560a":"code","3c279fb0":"code","a800c397":"code","23e7f516":"code","a26ed207":"code","d5bbeec1":"code","28824ee9":"code","95ca7a0e":"code","767909b7":"code","53219e88":"code","8ddb71ae":"code","32d30c37":"code","55574247":"code","d4f7dbbb":"code","8bfa7356":"code","11951628":"code","00294e5e":"code","20208323":"code","49387827":"code","309c32cc":"code","5a7a59c0":"code","9c40bc97":"code","78b23b05":"code","6a1f66c6":"code","281d5c10":"code","ffa9dcac":"code","62593d5f":"code","4a45acdd":"markdown","fd10efd1":"markdown","32966f99":"markdown","c1f105f5":"markdown","5de686fc":"markdown","57d5c73d":"markdown","4cc23222":"markdown","537c6a0e":"markdown","128c545c":"markdown","a7d88a39":"markdown","23e4b674":"markdown","af22832f":"markdown","8e4cc988":"markdown","13f029cc":"markdown","17d10d50":"markdown","37209c28":"markdown","c0344e51":"markdown","8a5cc15d":"markdown","4319282d":"markdown","30e33745":"markdown","0bc67d8f":"markdown","a3fe4639":"markdown","71a3eec0":"markdown","760187b1":"markdown","e1c566cb":"markdown","50df7a58":"markdown","b1b215e7":"markdown","060ca113":"markdown","42277a17":"markdown","6f7a019a":"markdown","68795c0c":"markdown","13c12559":"markdown","be8a3dca":"markdown","517f462f":"markdown","2feeda49":"markdown","b466b9a6":"markdown","c8f43919":"markdown","092c7b4c":"markdown","e2e41209":"markdown","772acfc5":"markdown","a6468279":"markdown","74f04ff6":"markdown","2250a346":"markdown","c180fdcd":"markdown","47cd5fbd":"markdown"},"source":{"a778c021":"import numpy as np \nimport pandas as pd \nfrom pandas.core.frame import DataFrame\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nfrom sklearn import preprocessing\n\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier, GradientBoostingClassifier\n\nfrom sklearn.model_selection import GridSearchCV,cross_val_score,StratifiedKFold\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\n\n\n\n\n\n\n\n\n\n","6e5af61e":"df_train=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf_test=pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\ndf=pd.concat([df_train, df_test], axis=0,sort=False)\ndf.reset_index(drop=True, inplace=True)\ndf.drop(['Survived'],axis=1,inplace=True)","99ced026":"df_train.head()","330b438c":"print(\"===== Data shape =====\\n\", DataFrame({\"tain\" : df_train.shape, \"test\" : df_test.shape}, index=[\"rows\", \"columns\"]))","64bd5c39":"df_train.info()\ndf_test.info()","9e38a6a6":"def Unique_Values(df_train,df_test):\n    train_list = df_train.apply(lambda x: x.unique().size * 100 \/x.size)\n    test_list = df_test.apply(lambda x: x.unique().size * 100 \/x.size)\n    Unique_list = pd.concat([train_list,test_list], axis=1,sort=False)\n    Unique_list=Unique_list.round(decimals=2)\n    Unique_list.columns=['Percentage_train','Percentage_test']\n    return Unique_list","3adbe86f":"Unique_Values(df_train,df_test)","a1574747":"def Missing_values(df):\n    total = df.isnull().sum().sort_values(ascending=False)   \n    percent =  (df.isnull().sum()*100\/df.isnull().count()).sort_values(ascending=False)\n    percent=percent.round(decimals=2)\n    missing_data = pd.concat([total, percent],axis=1, keys =['Total', 'Percentage'])\n    return \"No missing data\" if (missing_data[percent>0]).empty  else (missing_data[percent>0])","dd4d3898":"def Missing_list(df_train,df_test):\n    train_missing = Missing_values(df_train)\n    test_missing = Missing_values(df_test)\n    Missing_list = pd.concat([train_missing,test_missing], axis=1,sort=False)\n    Missing_list.columns=['Total_train','Percentage_train','Total_test', 'Percentage_test']\n    return Missing_list","545e9254":"Missing_list(df_train,df_test)","38b9cd24":"df_scale=df_train[['Pclass','Age','SibSp','Parch','Fare']].copy()\nscale = preprocessing.StandardScaler().fit(df_scale[['Age','Fare']])\ndf_scale[['Age','Fare']] = scale.transform(df_scale[['Age','Fare']])\n\ndf_scale.boxplot();","9c80b329":"df_train['Source']= list('train' for i in range(df_train.shape[0]))\ndf_test['Source']= list('test' for i in range(df_test.shape[0]))\n\ndf=pd.concat([df_train, df_test], axis=0,sort=False)\ndf.reset_index(drop=True, inplace=True)","17e2baf3":"def plot_catVsTarget(var): \n    plt.figure(figsize=(13,4))\n    plt.subplot(1, 2, 1)\n    sns.countplot(x=var, data=df, hue = 'Source')\n    plt.subplot(1, 2, 2)\n    sns.barplot(x = var, y = 'Survived',data=df[0:891])\n    plt.show()   ","5c2fec1c":"def plot_contVsTarget(var,break_bins=40):\n    plt.figure(figsize=(13,4))\n    plt.subplot(1, 2, 1)\n    bins = np.linspace(min(df[var]), max(df[var]), break_bins)\n    plt.hist(df[0:891][var], bins, alpha=0.5, label='train')\n    plt.hist(df[891:][var], bins, alpha=0.5, label='test')\n    plt.legend(loc='upper right')\n    plt.subplot(1, 2, 2)\n    sns.distplot(df[0:891][var][df[0:891]['Survived']==1])\n    sns.distplot(df[0:891][var][df[0:891]['Survived']==0])\n    plt.legend(labels=['Survived=1','Survived=0'])\n    plt.show()","0c79cbd0":"sns.countplot(x=df_train[\"Survived\"], data=df_train);","9c543cd3":"df.columns","bb34adcd":"plot_catVsTarget('Pclass')","40187c5a":"df['Title'] = df['Name'].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]\n\ntitle_mapDict = {\n                    \"Capt\":       \"Officer\",\n                    \"Col\":        \"Officer\",\n                    \"Major\":      \"Officer\",\n                    \"Jonkheer\":   \"Royalty\",\n                    \"Don\":        \"Royalty\",\n                    \"Sir\" :       \"Royalty\",\n                    \"Dr\":         \"Officer\",\n                    \"Rev\":        \"Officer\",\n                    \"the Countess\":\"Royalty\",\n                    \"Dona\":       \"Royalty\",\n                    \"Mme\":        \"Mrs\",\n                    \"Mlle\":       \"Miss\",\n                    \"Ms\":         \"Mrs\",\n                    \"Mr\" :        \"Mr\",\n                    \"Mrs\" :       \"Mrs\",\n                    \"Miss\" :      \"Miss\",\n                    \"Master\" :    \"Master\",\n                    \"Lady\" :      \"Royalty\"\n                    }\n\ndf['Title'] = df['Title'].map(title_mapDict)\n\nplot_catVsTarget('Title')","42e2dacc":"df['Title'].unique()","217ccea2":"df['NLength'] = df['Name'].apply(len)\n\nplot_contVsTarget('NLength')","d4885bb1":"plot_catVsTarget('Sex')","a50eac7e":"df['Age'].fillna(100, inplace=True)\nplot_contVsTarget('Age')","a68b0a46":"\ndf['Nfamille'] = df['Parch'] + df['SibSp'] + 1\n\nplot_catVsTarget('Nfamille')\nsns.catplot(x=\"Pclass\", hue=\"Nfamille\", col=\"Survived\",data=df[0:891], kind=\"count\");\n","2dec809a":"f_list=[]\nfor f in df['Nfamille']:\n    if f==1:\n        f_list.append(0)\n    elif (f<=4) & (f>=2):\n        f_list.append(1)\n    else:\n        f_list.append(2)\n        \ndf['Fsize']=f_list\n\nplot_catVsTarget('Fsize')\n","6ce4e6da":"TickCountDict={}\nTickCountDict=df['Ticket'].value_counts()\nTickCountDict.head()\ndf['Tshares']=df['Ticket'].map(TickCountDict)\n\nplot_catVsTarget('Tshares')\nsns.catplot(x=\"Pclass\", hue=\"Tshares\", col=\"Survived\",data=df[0:891], kind=\"count\");","b544f661":"t_list=[]\nfor t in df['Tshares']:\n    if t==1:\n        t_list.append(0)\n    elif (t<=4) & (t>=2):\n        t_list.append(1)\n    else:\n        t_list.append(2)\n        \ndf['Tsize']=t_list\n\nplot_catVsTarget('Tsize')","339986d4":"df[df['Fare'].isnull().values==True]\ndf['Fare']=df['Fare']\/df['Tshares']\n\nMissing_Fare = df.Fare[(df['Pclass']==3)&(df['Title']=='Mr')&(df['Embarked']=='S')& (df['Tshares']==1)].describe()\ndf['Fare'].fillna(Missing_Fare['mean'], inplace=True)\n\nplot_contVsTarget('Fare')","d9399c7f":"df['Cabin'].fillna('U', inplace=True)\ndf['Ctype']=df['Cabin'].map(lambda x: x[0])","b690a270":"# Find out all tickets that the cabin type is unknown and the ticket type is shared \ncabin_df=df[df['Tshares']>1]\ncabinDict={}\n\nfor t in cabin_df['Ticket'].unique():\n    if len(cabin_df['Ctype'][cabin_df['Ticket']==t].unique()) >1:\n        cabinDict[t]=list(cabin_df['Ctype'][cabin_df['Ticket']==t].unique())\n        \nprint(cabinDict)\n\nfor key in cabinDict.copy():\n    if 'U' not in cabinDict[key]:\n        cabinDict.pop(key)\n        \nprint(cabinDict)","cb63ddd9":"# Filling some missing data in Cabin with more accurate values.\nfor key in cabinDict.copy():\n    cabinDict[key].remove('U')\n\nprint(cabinDict)\nfor key in cabinDict:\n    df.loc[(df['Ticket']==key),'Ctype']=cabinDict[key]","e914560a":"plot_catVsTarget('Ctype')","3c279fb0":"plot_catVsTarget('Embarked')","a800c397":"sns.catplot(x=\"Pclass\", hue=\"Embarked\", data=df[0:891], kind=\"count\");","23e7f516":"Age_df=df.copy()\n","a26ed207":"Age_df.head()","d5bbeec1":"for var in ['Sex','Embarked','Title','Ctype']:\n    Age_df[var]=Age_df[var].apply(str)\n    var01 = pd.get_dummies(Age_df[var])\n    Age_df = pd.merge(Age_df,var01,left_index=True,right_index=True)\n\nAge_df.drop(['PassengerId','Survived','Name','Sex','Ticket','Cabin', 'Embarked','Title','Ctype','Source'],axis=1,inplace=True)","28824ee9":"Age_df_train=Age_df[Age_df['Age']!=100].copy()\nAge_df_train.drop(['Age'],axis=1,inplace=True)","95ca7a0e":"Age_df_test=Age_df[Age_df['Age']==100].copy()\nAge_df_test.drop(['Age'],axis=1,inplace=True)\n\nAge_y_train=Age_df.Age[Age_df['Age']!=100].copy()\n\n","767909b7":"Age_df_train.info()","53219e88":"alg = RandomForestClassifier(n_estimators=100)\n\nalg.fit(Age_df_train, Age_y_train.astype('int'))\n\nAge_predictions=alg.predict(Age_df_test)\n\ndf.loc[df['Age']==100, ['Age']] = Age_predictions\n\nplot_contVsTarget('Age')","8ddb71ae":"df['Lastname']=df['Name'].map(lambda x:x.split(',')[0].strip())","32d30c37":"df[df['Nfamille']==11]","55574247":"df.loc[df['Nfamille']==11,'Age']= 60\ndf.loc[df['Nfamille']==11,'Sex']='Male'\ndf[df['Lastname']=='Sage']","d4f7dbbb":"df[df['Nfamille']==8]","8bfa7356":"df.loc[df['Nfamille']==8,'Age']=60\ndf.loc[df['Nfamille']==8,'Sex']='Male'\ndf[df['Lastname']=='Goodwin']","11951628":"df[(df['Nfamille']==7)].sort_values(by=['Lastname'])","00294e5e":"df[(df['Nfamille']==7) & (df['Fare']>7)]","20208323":"df.loc[(df['Nfamille']==7) & (df['Fare']<7) & (df['Lastname']=='Andersson'),'Age']=60\ndf.loc[(df['Nfamille']==7) & (df['Fare']<7) & (df['Lastname']=='Andersson'),'Sex']='Male'\ndf[df['Lastname']=='Andersson']","49387827":"def correlation_heatmap(df):\n    _ , ax = plt.subplots(figsize =(14, 12))\n    colormap = sns.diverging_palette(220, 10, as_cmap = True)\n    \n    _ = sns.heatmap(\n        df.corr(), \n        cmap = colormap,\n        square=True, \n        cbar_kws={'shrink':.9 }, \n        ax=ax,\n        annot=True, \n        linewidths=0.1,vmax=1.0, linecolor='white',\n        annot_kws={'fontsize':12 }\n    )\n    \n    plt.title('Pearson Correlation of Features', y=1.05, size=15)\n\ncorrelation_heatmap(df[0:891])\n","309c32cc":"df.info()","5a7a59c0":"for var in ['Sex','Embarked','Title','Ctype']:\n    df[var]=df[var].apply(str)\n    var01 = pd.get_dummies(df[var])\n    df = pd.merge(df,var01,left_index=True,right_index=True)","9c40bc97":"df_train1=df[0:len(df_train)]\ndf_test1=df[len(df_train):]\n\nTarget=df_train['Survived']","78b23b05":"df.columns","6a1f66c6":"train_var= ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'NLength', 'Nfamille', 'Fsize', 'Tshares', 'Tsize', 'Male', 'female', 'male', 'C_x', 'Q', 'S', 'nan', 'Master', 'Miss',\n       'Mr', 'Mrs', 'Officer', 'Royalty', 'A', 'B', 'C_y', 'D', 'E', 'F', 'G',\n       'T', 'U']","281d5c10":"kfold=StratifiedKFold(n_splits=10)\nclassifiers=[]\nclassifiers.append(SVC())\nclassifiers.append(DecisionTreeClassifier())\nclassifiers.append(RandomForestClassifier())\nclassifiers.append(ExtraTreesClassifier())\nclassifiers.append(GradientBoostingClassifier())\nclassifiers.append(KNeighborsClassifier())\nclassifiers.append(LogisticRegression())\nclassifiers.append(LinearDiscriminantAnalysis())","ffa9dcac":"cv_results=[]\nfor classifier in classifiers:\n    cv_results.append(cross_val_score(classifier,df_train1[train_var],Target,\n                                      scoring='accuracy',cv=kfold,n_jobs=-1))\n    \ncv_means=[]\ncv_std=[]\nfor cv_result in cv_results:\n    cv_means.append(cv_result.mean())\n    cv_std.append(cv_result.std())\n    \ncvResDf=pd.DataFrame({'cv_mean':cv_means,\n                     'cv_std':cv_std,\n                     'algorithm':['SVC','DecisionTreeCla','RandomForestCla','ExtraTreesCla',\n                                  'GradientBoostingCla','KNN','LR','LinearDiscrimiAna']})\n\ncvResDf=cvResDf.sort_values('cv_mean', ascending=False)\n\n\nsns.barplot(data=cvResDf,x='cv_mean',y='algorithm',**{'xerr':cv_std})","62593d5f":"\nalg = GradientBoostingClassifier()\nalg.fit(df_train1[train_var], Target)\n\n\nids = df_test1['PassengerId']\n\n\npredictions= alg.predict(df_test1[train_var])\n\noutput = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions.astype(np.int64)})\noutput.to_csv('titanic-predictions.csv', index = False)\n","4a45acdd":"The passenger name data contains information like the length of name, passengers with a name less than 30 letters have a significantly lower survival rate.","fd10efd1":"### 2.2.3 Unique Values","32966f99":"### NLength- Length of name (Name)","c1f105f5":"### Filling missing values in Age","5de686fc":"The variable Tikect has some duplicated data, so it can be speculated that some tickets are shared, and the price of the ticket may be for several passengers.","57d5c73d":"### 2.2.5 Detection of  Outliers","4cc23222":"### 2.2.4 Check Missing values","537c6a0e":"Using 100 to temporarily fill in the missing data, and later these values will be replaced by the predicted results of the regression.\n\nPassengers with ages between 0 and 15 have a different survival rate. These data will be analyzed later.","128c545c":"## 2 Data preveiw","a7d88a39":"### Embarked","23e4b674":"### Fare","af22832f":"## 3 Data Exploration & Data Preprocessing","8e4cc988":"### All survived or died","13f029cc":"### 2.1 Import data","17d10d50":"#### 2.2.2 Type of data","37209c28":"Using 'U' to represent the value of the missing data, and then fill some missing data with more accurate values.\n\nWhen the passenger's cabin type is B\/D\/E, the survival rate is higher; when the cabin type is U the survival rate is lower.","c0344e51":"### 4 One-hot","8a5cc15d":"The passenger name data contains title information, passengers with titles of 'Mr' and 'Officer' have significantly lower survival rates.","4319282d":"Most of the passengers boarding from Port C are in first class and have a high survival rate.","30e33745":"#### Nfamille=11","0bc67d8f":"### Pclass","a3fe4639":"Women\u2019s survival rate is much higher than that of men\n","71a3eec0":"### Correlation matrix","760187b1":"The higher the passenger Tikect class, the higher the survival rate.","e1c566cb":"### All died ","50df7a58":"#### Nfamille=8","b1b215e7":"### Nfamille - Number of family members","060ca113":"### Fsize - Famille size","42277a17":"### Age","6f7a019a":"The number of family members can be obtained through these two variables: Parch and SibSp. One new variables: family size, can be obtained naturally by the number of family members.\n\nThe survival rate of passengers with 8 or 11 family members is 0, And these passengers are in third class. This part of these data will be carefully analyzed later.","68795c0c":" Variable  | Description | Notes on Values\n:-----------|:------------|:---------------\nPassengerId|Passenger ID|Numeric data. Integer between 1 and 1309, 1 to 891 for training set, 892 to 1309 for test data.\nSurvived|The survival of the passengers|Target data to be predicted, binary nomial datatype of 0 for passenger died and 1 for passenger survived.\nPclass|Passenger class|Ordinal data, has 3 categories(1st, 2nd, or 3rd).\nName|Name and title of the passenger|String data, with title before the name. Style: Name, title. First name.\nSex|Passenger gender|Nomial data, has 2 categories('male', 'female').\nAge|Age of the passenger|Continuous quantitative data, decimal if less than 1, estimated if of form xx.5. It has some missing data.\nSibSp|Number of spouses, siblings present on board|Discrete quantitative data, integer between 0 and 8.\nParch|Number of parents, children present on board|Numeric data, integer between 0 and 6.\nTicket|Ticket number|String data, it has a prefix to the number.\nFare|Ticket prices|Numerical data, the price is indicated in \u00a3 and for a single purchase (may correspond to several tickets).\nCabin|Cabin number|Categorical data, alphanumeric of the form 'A123'. It has a lot of missing data.\nEmbarked|Boat harbor|Nominal data,with 3 categories, C = Cherbourg, Q = Queenstown, S = Souththampton, it has two missing data.","13c12559":"### 5 Training","be8a3dca":"###  Tshares - Ticket's number of shares","517f462f":"### Ctype - cabin type","2feeda49":"### Tsize - Tikect shared size","b466b9a6":"### Title","c8f43919":"#### Nfamille=7","092c7b4c":"### 2.2 Data preveiw","e2e41209":"Moderate number (2 to 4) with high survival rates","772acfc5":"The 11 people sharing the ticket from the same family, all in the third class, all died, this data can be modified later to get a better model.","a6468279":"## 1 Import packages","74f04ff6":"#### 2.2.1 Data Shape","2250a346":"### Survived","c180fdcd":"### Sex","47cd5fbd":"Moderate number of family members  (2 to 4 persons)  with high survival rates"}}