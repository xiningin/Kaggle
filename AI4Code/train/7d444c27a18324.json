{"cell_type":{"728e74f6":"code","48dd185b":"code","fe05849f":"code","c11ebe62":"code","2849b41c":"code","c7aa7c49":"code","d9785453":"code","3fb076bc":"code","c000ceda":"code","7cf14661":"code","db59f1f6":"code","6c45dc3d":"code","01c69cd6":"code","fd9b4d14":"code","493e93aa":"code","d5c90c4b":"code","d26cdba8":"code","b8799a78":"code","03ed6e4a":"code","6fd915dc":"code","174147ed":"code","babd08ad":"code","4d162b95":"code","ffdbb8ed":"code","5e4e9498":"code","53e3fb52":"code","13c15413":"code","52605938":"code","5b30ac30":"code","e562a69c":"code","dfce1223":"code","7f6726d6":"code","005ac7a0":"markdown","6c504aeb":"markdown","9c7b8db3":"markdown","dbe1f247":"markdown","03d18c7f":"markdown","04418fca":"markdown","89c6b5cd":"markdown","aedb0917":"markdown","68c90149":"markdown","b0cb440d":"markdown","9697d722":"markdown","230d8d4c":"markdown","104a34b3":"markdown","c0909e4b":"markdown","7793d70e":"markdown","74997b23":"markdown","2563264a":"markdown","99643461":"markdown","4e236eda":"markdown","4c5ac3dd":"markdown","958b46a6":"markdown","ad0aa697":"markdown","32360142":"markdown","4b1ea950":"markdown","4ac1efdf":"markdown","e3aa1930":"markdown","e3018600":"markdown","1351766b":"markdown","4d5447c3":"markdown","5d1c22f5":"markdown","5d3dd193":"markdown"},"source":{"728e74f6":"import os\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom tensorflow.python import keras\nfrom tensorflow.python.keras.models import Sequential, Model\nfrom tensorflow.python.keras.layers import Activation, Dense, Flatten, Conv2D, Dropout, MaxPooling2D, AveragePooling2D, BatchNormalization, Input, ZeroPadding2D, Add\nfrom tensorflow.python.keras.regularizers import l2\nfrom IPython.display import SVG\nfrom keras.utils.vis_utils import model_to_dot\nfrom keras.utils import plot_model\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm_notebook\n%matplotlib inline ","48dd185b":"IMG_ROWS = 28\nIMG_COLS = 28\nNUM_CLASSES = 10\nPATH=\"..\/input\/\"\nprint(os.listdir(PATH))","fe05849f":"train_images = np.load(os.path.join(PATH,'train-imgs.npz'))['arr_0']\ntest_images = np.load(os.path.join(PATH,'test-imgs.npz'))['arr_0']\ntrain_labels = np.load(os.path.join(PATH,'train-labels.npz'))['arr_0']","c11ebe62":"char_df = pd.read_csv(os.path.join(PATH,'classmap.csv'), encoding = 'utf-8')","2849b41c":"print(\"KMNIST train shape:\", train_images.shape)\nprint(\"KMNIST test shape:\", test_images.shape)\nprint(\"KMNIST train shape:\", train_labels.shape)","c7aa7c49":"print(\"KMNIST character map shape:\", char_df.shape)","d9785453":"char_df","3fb076bc":"print('Percent for each category:',np.bincount(train_labels)\/len(train_labels)*100)","c000ceda":"labels = char_df['char']\nf, ax = plt.subplots(1,1, figsize=(8,6))\ng = sns.countplot(train_labels)\ng.set_title(\"Number of labels for each class\")\ng.set_xticklabels(labels)\nplt.show()    ","7cf14661":"def plot_sample_images_data(images, labels):\n    plt.figure(figsize=(12,12))\n    for i in tqdm_notebook(range(10)):\n        imgs = images[np.where(labels == i)]\n        lbls = labels[np.where(labels == i)]\n        for j in range(10):\n            plt.subplot(10,10,i*10+j+1)\n            plt.xticks([])\n            plt.yticks([])\n            plt.grid(False)\n            plt.imshow(imgs[j], cmap=plt.cm.binary)\n            plt.xlabel(lbls[j])","db59f1f6":"plot_sample_images_data(train_images, train_labels)","6c45dc3d":"# data preprocessing\ndef data_preprocessing(images):\n    num_images = images.shape[0]\n    x_shaped_array = images.reshape(num_images, IMG_ROWS, IMG_COLS, 1)\n    out_x = x_shaped_array \/ 255\n    return out_x","01c69cd6":"X = data_preprocessing(train_images)\ny = keras.utils.to_categorical(train_labels, NUM_CLASSES)\nX_test = data_preprocessing(test_images)","fd9b4d14":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)","493e93aa":"print(\"KMNIST train -  rows:\",X_train.shape[0],\" columns:\", X_train.shape[1:4])\nprint(\"KMNIST valid -  rows:\",X_val.shape[0],\" columns:\", X_val.shape[1:4])\nprint(\"KMNIST test -  rows:\",X_test.shape[0],\" columns:\", X_test.shape[1:4])","d5c90c4b":"def plot_count_per_class(yd):\n    ydf = pd.DataFrame(yd)\n    f, ax = plt.subplots(1,1, figsize=(12,4))\n    g = sns.countplot(ydf[0], order = np.arange(0,10))\n    g.set_title(\"Number of items for each class\")\n    g.set_xlabel(\"Category\")\n            \n    plt.show()  \n\ndef get_count_per_class(yd):\n    ydf = pd.DataFrame(yd)\n    # Get the count for each label\n    label_counts = ydf[0].value_counts()\n\n    # Get total number of samples\n    total_samples = len(yd)\n\n\n    # Count the number of items in each class\n    for i in range(len(label_counts)):\n        label = label_counts.index[i]\n        label_char = char_df[char_df['index']==label]['char'].item()\n        count = label_counts.values[i]\n        percent = (count \/ total_samples) * 100\n        print(\"{}({}):   {} or {}%\".format(label, label_char, count, percent))\n    \nplot_count_per_class(np.argmax(y_train,axis=1))\nget_count_per_class(np.argmax(y_train,axis=1))","d26cdba8":"plot_count_per_class(np.argmax(y_val,axis=1))\nget_count_per_class(np.argmax(y_val,axis=1))","b8799a78":"def residual_module(data, K, stride, chanDim, red = False,reg=0.0001, bnEps=2e-5, bnMom=0.9):\n    shortcut = data\n    bn1 = BatchNormalization(axis=chanDim, epsilon=bnEps, momentum=bnMom)(data)\n    act1 = Activation(\"relu\")(bn1)\n    conv1 = Conv2D(int(K * 0.25), (1, 1), use_bias=False, kernel_regularizer=l2(reg))(act1)\n    print(conv1.shape)\n    bn2 = BatchNormalization(axis=chanDim, epsilon=bnEps, momentum=bnMom)(conv1)\n    act2 = Activation(\"relu\")(bn2)\n    conv2 = Conv2D(int(K * 0.25), (3, 3), strides=stride, padding=\"same\", use_bias=False, kernel_regularizer=l2(reg))(act2)\n                   \n    bn3 = BatchNormalization(axis=chanDim, epsilon=bnEps,momentum=bnMom)(conv2)\n    act3 = Activation(\"relu\")(bn3)\n    conv3 = Conv2D(K, (1, 1), use_bias=False, kernel_regularizer=l2(reg))(act3)\n    \n    if red:\n        shortcut = Conv2D(K, (1, 1), strides=stride, use_bias=False, \n        kernel_regularizer=l2(reg))(act1)\n    x = Add()([conv3, shortcut])\n    return x","03ed6e4a":"def build(width, height, depth, classes, stages, filters, reg=0.0001, bnEps=2e-5, bnMom=0.9):\n    inputShape = (height, width, depth)\n    chanDim = -1\n    inputs = Input(shape=inputShape)\n    x = BatchNormalization(axis=chanDim, epsilon=bnEps, momentum=bnMom)(inputs)\n    \n    x = Conv2D(filters[0], (5, 5), use_bias=False, padding=\"same\", kernel_regularizer=l2(reg))(x)\n    x = BatchNormalization(axis=chanDim, epsilon=bnEps, momentum=bnMom)(x)\n    x = Activation(\"relu\")(x)\n    x = ZeroPadding2D((1, 1))(x)\n    x = MaxPooling2D((3, 3), strides=(2, 2))(x)\n    print(x.shape)\n    # loop over the number of layers in the stage\n    for i in range(0, len(stages)):\n        stride = (1, 1) if i <= 3 else (2, 2)\n        x = residual_module(x, filters[i + 1], stride, chanDim, red=True, bnEps=bnEps, bnMom=bnMom)\n        # loop over the number of layers in the stage\n        for j in range(0, stages[i] - 1):\n            # apply a ResNet module\n            x = residual_module(x, filters[i + 1], (1, 1), chanDim, bnEps=bnEps, bnMom=bnMom)\n    x = BatchNormalization(axis=chanDim, epsilon=bnEps, momentum=bnMom)(x)\n    x = Activation(\"relu\")(x)\n    x = AveragePooling2D((4, 4))(x)\n    # softmax classifier\n    x = Flatten()(x)\n    x = Dense(classes, kernel_regularizer=l2(reg))(x)\n    x = Activation(\"softmax\")(x)\n\n    # create the model\n    model = Model(inputs, x, name=\"resnet\")\n    \n    # return the constructed network architecture\n    return model","6fd915dc":"model = build(width = IMG_COLS, height = IMG_ROWS, depth = 1, classes = NUM_CLASSES, stages = [3, 4, 6, 8 ,10, 12], filters = [64, 128, 256, 512, 1024, 1024, 512], reg=0.0006)","174147ed":"# Compile the model\nfrom tensorflow.python.keras.optimizers import Adam, SGD\nfrom tensorflow.python.keras.callbacks import LearningRateScheduler\nimport math\ndef step_decay(epoch):\n    initial_lrate = 0.1\n    drop = 0.5\n    epochs_drop = 10.0\n    lrate = initial_lrate * math.pow(drop,  \n           math.floor((1+epoch)\/epochs_drop))\n    return lrate\nlrate = LearningRateScheduler(step_decay)\n\nmodel.compile(loss = \"categorical_crossentropy\", optimizer=SGD(momentum=0.9, nesterov=True), metrics=[\"accuracy\"])","babd08ad":"from tensorflow.python.keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(featurewise_center=True,\n                             #featurewise_std_normalization=False,\n                             rotation_range=10,\n                             width_shift_range=0.2,\n                             height_shift_range=0.2,\n                             shear_range=0.2,\n                             zoom_range=0.1,\n                             zca_whitening = True,\n                            )\n\ndatagen.fit(X_train)\n\nfor i in range(len(X_val)):\n    X_val[i] = datagen.standardize(X_val[i])\nfor i in range(len(X_test)):\n    X_test[i] = datagen.standardize(X_test[i])","4d162b95":"history = model.fit_generator(datagen.flow(X_train, y_train, batch_size=32),\n                              steps_per_epoch=len(X_train) \/\/ 32,\n                              epochs=80,\n                              verbose = 1,\n                              callbacks = [lrate],\n                              validation_data = (X_val, y_val))","ffdbb8ed":"def plot_accuracy_and_loss(train_model):\n    hist = train_model.history\n    acc = hist['acc']\n    val_acc = hist['val_acc']\n    loss = hist['loss']\n    val_loss = hist['val_loss']\n    epochs = range(len(acc))\n    f, ax = plt.subplots(1,2, figsize=(14,6))\n    ax[0].plot(epochs, acc, 'g', label='Training accuracy')\n    ax[0].plot(epochs, val_acc, 'r', label='Validation accuracy')\n    ax[0].set_title('Training and validation accuracy')\n    ax[0].legend()\n    ax[1].plot(epochs, loss, 'g', label='Training loss')\n    ax[1].plot(epochs, val_loss, 'r', label='Validation loss')\n    ax[1].set_title('Training and validation loss')\n    ax[1].legend()\n    plt.show()\nplot_accuracy_and_loss(history)","5e4e9498":"#get the predictions for the test data\npredicted_classes = model.predict(X_val)\npredicted_classes = np.argmax(predicted_classes, axis = 1)\n#get the indices to be plotted\ny_true = np.argmax(y_val,axis=1)","53e3fb52":"correct = np.nonzero(predicted_classes==y_true)[0]\nincorrect = np.nonzero(predicted_classes!=y_true)[0]","13c15413":"print(\"Correct predicted classes:\",correct.shape[0])\nprint(\"Incorrect predicted classes:\",incorrect.shape[0])","52605938":"target_names = [\"Class {} ({}):\".format(i, char_df[char_df['index']==i]['char'].item()) for i in range(NUM_CLASSES)]\nprint(classification_report(y_true, predicted_classes, target_names=target_names))","5b30ac30":"def plot_images(data_index,cmap=\"Blues\"):\n    # Plot the sample images now\n    f, ax = plt.subplots(5,5, figsize=(12,12))\n\n    for i, indx in enumerate(data_index[:25]):\n        ax[i\/\/5, i%5].imshow(X_val[indx].reshape(IMG_ROWS,IMG_COLS), cmap=cmap)\n        ax[i\/\/5, i%5].axis('off')\n        ax[i\/\/5, i%5].set_title(\"True:{}  Pred:{}\".format(y_true[indx],predicted_classes[indx]))\n    plt.show()    \n\nplot_images(correct, \"Greens\")","e562a69c":"plot_images(incorrect, \"Reds\")","dfce1223":"#get the predictions for the test data\npredicted_classes = model.predict(X_test)\npredicted_classes = np.argmax(predicted_classes, axis = 1)","7f6726d6":"submission = pd.read_csv(os.path.join(PATH,\"sample_submission.csv\"))\nsubmission['Class'] = predicted_classes\nsubmission.to_csv(os.path.join(\".\",\"submission.csv\"), index=False)","005ac7a0":"# <a id=\"2\">Load packages<\/a>","6c504aeb":"The dimmension of the processed train, validation and test set are as following:","9c7b8db3":"# <a id=\"1\">Introduction<\/a>  \n\n\n## Dataset\n\nMNIST (\"Modified National Institute of Standards and Technology\") is the de facto \u201chello world\u201d dataset of computer vision. Since its release in 1999, this classic dataset of handwritten images has served as the basis for benchmarking classification algorithms.   \n\nKMNIST (Kuzushiji-MNIST or Cursive hiragana-MNIST)  was introduced as an alternative to MNIST. It contains images with the first entries from the 10 main Japanese hiragana character groups.\n\n\n## Content\n\nEach image is 28 pixels in height and 28 pixels in width, for a total of 784 pixels in total.   \n\nThe images are storred in numpy arrays of 50,000 x 28 x 28 and 20,000 x 28 x 28, respectively. The labels for training set are also stored in a numpy array.\n","dbe1f247":"Let's check the class imbalance for the resulted training set.","03d18c7f":"The classes are equaly distributed in the train set (being 10% each, or 6000 items).  Let's also plot a graph for these.","04418fca":"Let's visualize the images from the validation set that were incorrecly classified (25 images).","89c6b5cd":"\n## <a id=\"53\">Validation accuracy and  loss <\/a>\n\n\nWe plot accuracy for validation set compared with the accuracy of training set, for each epoch, on the same graph. Then, we plot loss for validation set compared with the loss for training set. \n","aedb0917":"We process both the train_data and the test_data.","68c90149":"# <a id=\"6\">Test prediction<\/a>\n\nLet's use the trained model to predict the labels for the test images.","b0cb440d":"Validation accuracy is above 0.99 for most of the classes. Only two classes have lower accuracy, above 0.98. \n\nLet's visualize few images from the validation set that were correctly classified (25 images).","9697d722":"### Compile the model\nWe then compile the model, with the layers and optimized defined.","230d8d4c":"## <a id=\"54\">Validation accuracy \/ class<\/a>\n\nLet's see in detail how well are the validation set classes predicted.","104a34b3":"### Run the model\n\nWe run the model with the training set. We are also using the validation set (a subset from the orginal training set) for validation.","c0909e4b":"Let's show the character map:","7793d70e":"## <a id=\"51\">Prepare the model<\/a>\n\n## Data preprocessing\n\nFirst we will do a data preprocessing to prepare for the model.\n\nWe reshape the numpy arrays for images to associate to each image a (28 x 28 x 1) array, with values normalized.","74997b23":" <a id=\"8\">References<\/a>\n\n[1] Yan LeCun, MNIST Database, http:\/\/yann.lecun.com\/exdb\/mnist\/  \n[2] DanB, CollinMoris, Deep Learning From Scratch, https:\/\/www.kaggle.com\/dansbecker\/deep-learning-from-scratch  \n[3] DanB, Dropout and Strides for Larger Models, https:\/\/www.kaggle.com\/dansbecker\/dropout-and-strides-for-larger-models  \n[4] BGO, CNN with Keras, https:\/\/www.kaggle.com\/bugraokcu\/cnn-with-keras    \n[5] Gabriel Preda, Simple introduction to CNN for MNIST (99.37%), https:\/\/www.kaggle.com\/gpreda\/simple-introduction-to-cnn-for-mnist-99-37  \n[6] Anokas, KMNIST-MNIST replacement, https:\/\/www.kaggle.com\/aakashnain\/kmnist-mnist-replacement    \n[7] Megan Risdal, Starter: Kuzushiji-MNIST, https:\/\/www.kaggle.com\/mrisdal\/starter-kuzushiji-mnist-ed86cfac-1   \n[8] Kuzushiji-MNIST, project Github repo, https:\/\/github.com\/rois-codh\/kmnist   \n[9] Tarin Clanuwat, Mikel Bober-Irizar, Asanobu Kitamoto, Alex Lamb, Kazuaki Yamamoto, David Ha, Deep Learning for Classical Japanese Literature, https:\/\/arxiv.org\/abs\/1812.01718  \n\n","2563264a":"Let's see also the class distribution of validation set.","99643461":"We can observe that the training is not overfitting, validation accuracy is not decreasing after a certain number of epochs. We obtained final accuracy around 0.987. As well, the validation loss is not increasing after a certain number of epochs, as would have been expected in the case of overfitting. We achieved this by using the 3 Dropout layers inserted in our model. There are other strategies as well, for example by using a variable learning rate or data augmentation images. For the sake of simplicity and in order to keep the calculation very fast (the Kernel complete the training for 50 epochs in less than 10 min), we did not included these techniques for now.","4e236eda":"## Parameters","4c5ac3dd":"![](http:\/\/)The dimmension of the original  train,  test set are as following:","958b46a6":"## Split train in train and validation set\n\nWe further split the train set in train and validation set. The validation set will be 10% from the original train set, therefore the split will be train\/validation of 0.9\/0.1.","ad0aa697":"## <a id=\"41\">Class distribution<\/a>\n\nLet's see how many number of images are in each class. \n\n### Train set images class distribution","32360142":"# <a id=\"7\">Submission<\/a>\n\nLet's prepare the submission.\n","4b1ea950":"## <a id=\"52\">Train the model<\/a>\n\n### Build the model   \n\n\n\n","4ac1efdf":"We identify the predicted class for each image by selecting the column with the highest predicted value.","e3aa1930":"# <a id=\"5\">Model<\/a>\n\nWe start with preparing the model.","e3018600":"<h1><center><font size=\"6\">Cursive Hiragana Images Classification<\/font><\/center><\/h1>\n\n\n<img src=\"http:\/\/su-cultural-history.up.n.seesaa.net\/su-cultural-history\/image\/P1030717.JPG?d=a48\" width=\"200\"><\/img>\n\n\n# <a id='0'>Content<\/a>\n\n- <a href='#1'>Introduction<\/a>  \n- <a href='#2'>Load packages<\/a>  \n- <a href='#3'>Read the data<\/a>  \n- <a href='#4'>Data exploration<\/a>\n    - <a href='#41'>Class distribution<\/a>\n    - <a href='#42'>Images samples<\/a>\n- <a href='#5'>Model<\/a>  \n    - <a href='#51'>Prepare the model<\/a>  \n    - <a href='#52'>Train the model<\/a>  \n    - <a href='#53'>Validation accuracy and loss<\/a>  \n    - <a href='#54'>Validation accuracy per class<\/a>  \n- <a href='#6'>Test prediction<\/a>     \n- <a href='#7'>Conclusions<\/a>\n- <a href='#8'>References<\/a>","1351766b":"# <a id=\"3\">Read the data<\/a>\n\nWe will read the two data files containing the 10-class data, KMNIST, similar to MNIST.\n\nThere are 10 different classes of images, one class for each number between 0 and 9. \n\nImage dimmensions are **28**x**28**.   \n\nThe train set and test set are given in two separate numpy arrays.   \n\nWe are also reading the labels for train set.\n\nAditionally, we will read the character class map for KMNIST, so that we can display the actual characters corresponding to the labels.\n","4d5447c3":"## <a id=\"42\">Sample images<\/a>\n\n### Train dataset images\n\nLet's plot some samples for the images.","5d1c22f5":"# <a id=\"4\">Data exploration<\/a>","5d3dd193":"The dimmension of the character set data file for KMNIST are:"}}