{"cell_type":{"2bcb100c":"code","5bf4274f":"code","614dd43f":"code","7b6da5f7":"code","27b1940c":"code","9d6eefaf":"code","4be35b46":"code","b24cc352":"code","170d6f93":"code","f7513013":"code","f51544f6":"code","d46f975f":"code","6d097978":"code","1ffe52d9":"code","ba6838d7":"code","e0018e7b":"code","b37ca01e":"code","0c94ad4b":"code","92faa784":"code","15a4fbb2":"code","6e597c54":"code","493507b4":"code","4a998156":"code","24c35a14":"code","95c5b8db":"code","56230fef":"code","d58608b4":"code","8d08f094":"code","25b6b173":"code","f32cb912":"code","e05a5e4a":"code","b2a5b9b1":"code","30714ecd":"code","238d4173":"code","eb9328de":"code","f35cce87":"code","7ef434d0":"code","c1d7d45b":"markdown","26891f3e":"markdown","7f66d2d3":"markdown","993c2a65":"markdown","333ad467":"markdown","1ecd83c9":"markdown","45bbee69":"markdown","ca0d0183":"markdown","33138f95":"markdown","c0494817":"markdown","0ae3abf5":"markdown","f8eab9eb":"markdown","6d700f24":"markdown","3030606b":"markdown","e72e6036":"markdown","5da5cbab":"markdown","be663106":"markdown","baf864a1":"markdown","2521fafe":"markdown","facb6338":"markdown","0c7dbece":"markdown","a18efebc":"markdown","1680eb50":"markdown","540cee8e":"markdown"},"source":{"2bcb100c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5bf4274f":"#Importing Necessary Libraries\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go \nimport seaborn as sns\nimport plotly\nimport plotly.express as px\nfrom fbprophet.plot import plot_plotly\nfrom fbprophet import Prophet","614dd43f":"#Setting up plotly\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot, plot_mpl\nimport plotly.offline as py\ninit_notebook_mode(connected=True)","7b6da5f7":"# Reading dataset\ndataset = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")","27b1940c":"dataset","9d6eefaf":"# Checking if there is any null values\ndataset.isnull().any()","4be35b46":"# Seeing the datset with null rows\ndataset[dataset.isnull().any(axis=1)]","b24cc352":"# Affected Countries\nprint(f\"Affected Countries are : {dataset['Country\/Region'].unique()}\")\nprint(f\"Total Affected Countries are : {len(dataset['Country\/Region'].unique())}\")","170d6f93":"# Affected States\/Provinces\nprint(f\"Affected State\/Provinces are : {dataset['Province\/State'].unique()}\")\nprint(f\"Total Affected State\/Provinces are : {len(dataset['Province\/State'].unique())}\")","f7513013":"fig = px.bar(dataset, x='ObservationDate', y='Confirmed', hover_data=['Province\/State', 'Deaths', 'Recovered'], color='Country\/Region')\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Confirmed bar plot for each country',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig.show()","f51544f6":"fig = px.bar(dataset.loc[dataset['Country\/Region'] == 'Mainland China'], x='ObservationDate', y='Confirmed', hover_data=['Province\/State', 'Deaths', 'Recovered'], color='Province\/State')\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Confirmed bar plot for Mainland China',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig.show()","d46f975f":"# Saving the image \npy.plot(fig, filename='Confirmed_plot.html')","6d097978":"fig = px.bar(dataset, x='ObservationDate', y='Deaths', hover_data=['Province\/State', 'Confirmed', 'Recovered'], color='Country\/Region')\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Death bar plot for each country',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig.show()","1ffe52d9":"fig = px.bar(dataset.loc[dataset['Country\/Region'] == 'Mainland China'], x='ObservationDate', y='Deaths', hover_data=['Province\/State', 'Confirmed', 'Recovered'], color='Province\/State')\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Death bar plot for Mainland China',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig.show()","ba6838d7":"fig = px.line(dataset, x=\"ObservationDate\", y=\"Confirmed\", color='Country\/Region', hover_data=['Province\/State', 'Deaths'])\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Confirmed Plot for each Country',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig.show()","e0018e7b":"fig = px.line(dataset, x=\"ObservationDate\", y=\"Deaths\", color='Country\/Region', hover_data=['Province\/State', 'Deaths'])\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Death plot for each country',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig.show()","b37ca01e":"fig = px.line(pd.DataFrame(dataset.groupby('ObservationDate')['Confirmed'].sum().reset_index()), x=\"ObservationDate\", y=\"Confirmed\")\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Showing Deaths of total country',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig.show()","0c94ad4b":"pxdf = px.data.gapminder()\ncountry_isoAlpha = pxdf[['country', 'iso_alpha']].drop_duplicates()\ncountry_isoAlpha.rename(columns = {'country':'Country'}, inplace=True)\ncountry_isoAlpha.set_index('Country', inplace=True)\ncountry_map = country_isoAlpha.to_dict('index')","92faa784":"def getCountryIsoAlpha(country):\n    try:\n        return country_map[country]['iso_alpha']\n    except:\n        return country","15a4fbb2":"dataset.replace({'Country\/Region': 'Mainland China'}, 'China', inplace=True)\ndataset['iso_alpha'] = dataset['Country\/Region'].apply(getCountryIsoAlpha)","6e597c54":"df_plot = dataset.groupby('iso_alpha').max().reset_index()\nfig = px.choropleth(df_plot, locations=\"iso_alpha\",\n                    color=\"Confirmed\",\n                    hover_data=[\"Confirmed\", \"Deaths\", \"Recovered\"],\n                    color_continuous_scale=\"Viridis\")\nfig.update_geos(fitbounds=\"locations\", visible=True)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0}, title_text = 'Deaths Cases in World')\n\nfig.show()","493507b4":"fig = px.scatter_geo(dataset, locations=\"iso_alpha\", \n                     color=\"Confirmed\", size='Confirmed', hover_name=\"Country\/Region\", \n                    hover_data=[\"Confirmed\", \"Deaths\", \"Recovered\"],\n                     projection=\"natural earth\", animation_frame=\"ObservationDate\")\nfig.show()","4a998156":"\nfig = px.choropleth(df_plot, locations=\"iso_alpha\",\n                    color=\"Deaths\",\n                    hover_data=[\"Confirmed\", \"Deaths\", \"Recovered\"],\n                    color_continuous_scale=\"Viridis\")\nfig.update_geos(fitbounds=\"locations\", visible=True)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0}, title_text = 'Deaths Cases in World')\n\nfig.show()","24c35a14":"fig = px.scatter_geo(dataset, locations=\"iso_alpha\", \n                     color=\"Deaths\", size='Deaths', hover_name=\"Country\/Region\",\n                    hover_data=[\"Confirmed\", \"Deaths\", \"Recovered\"] ,\n                     projection=\"natural earth\", animation_frame=\"ObservationDate\")\nfig.show()","95c5b8db":"confirmed_training_dataset = pd.DataFrame(dataset.groupby('ObservationDate')['Confirmed'].sum().reset_index()).rename(columns={'ObservationDate': 'ds', 'Confirmed': 'y'})\nconfirmed_training_dataset","56230fef":"# Making the Model\nprophet = Prophet()\nprophet.fit(confirmed_training_dataset)\nfuture = prophet.make_future_dataframe(periods=20)\nconfirmed_forecast = prophet.predict(future)","d58608b4":"fig = plot_plotly(prophet, confirmed_forecast)  \nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Predictions for Confirmed',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig","8d08f094":"death_training_dataset = pd.DataFrame(dataset.groupby('ObservationDate')['Deaths'].sum().reset_index()).rename(columns={'ObservationDate': 'ds', 'Deaths': 'y'})\ndeath_training_dataset","25b6b173":"# Making the Model\nprophet = Prophet()\nprophet.fit(death_training_dataset)\nfuture = prophet.make_future_dataframe(periods=20)\ndeaths_forecast = prophet.predict(future)","f32cb912":"fig = plot_plotly(prophet, deaths_forecast)  \nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Predictions of Deaths',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig","e05a5e4a":"# Saving Death Forcasting  \npy.plot(fig, filename='death_forcasting.html')","b2a5b9b1":"ontario_data = dataset.loc[dataset['Province\/State'] == 'Ontario']\nfig = px.bar(ontario_data, x='ObservationDate', y='Confirmed', hover_data=['Deaths', 'Recovered'])\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Confirmed bar plot for Ontario',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig.show()","30714ecd":"ontario_data = dataset.loc[dataset['Province\/State'] == 'Ontario']\nfig = px.bar(ontario_data, x='ObservationDate', y='Deaths', hover_data=['Confirmed', 'Recovered'])\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Deaths bar plot for Ontario',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig.show()","238d4173":"ontario_training_dataset = pd.DataFrame(ontario_data.groupby('ObservationDate')['Deaths'].sum().reset_index()).rename(columns={'ObservationDate': 'ds', 'Deaths': 'y'})","eb9328de":"ontario_training_dataset","f35cce87":"# Making the Model\nprophet = Prophet()\nprophet.fit(ontario_training_dataset.iloc[9:, :])\nfuture = prophet.make_future_dataframe(periods=2)\nontario_deaths_forecast = prophet.predict(future)","7ef434d0":"fig = plot_plotly(prophet, ontario_deaths_forecast)  \nfig","c1d7d45b":"## Confirmed Visualisations","26891f3e":"# Ontario status","7f66d2d3":"Different Color shows different Country","993c2a65":"# I will constantly update the notebook with every updates :)","333ad467":"# Line Plots","1ecd83c9":"## Deaths Plots","45bbee69":"The cases are increasing at very high rate !","ca0d0183":"# Here's come Machine Learning\nPrediting Confirmed and Death cases using **Prophet Model**","33138f95":"# Forcasing Death Cases","c0494817":"# Data Exploration and Visualisations","0ae3abf5":"# Confirmed Cases Forcasting Visualisation","f8eab9eb":"# Maps Visualisations","6d700f24":"# Bar Plots","3030606b":"## Death Visualisations","e72e6036":"Here taking Mainland Chine as an example and different color shows different State\/Provinces ","5da5cbab":"# Dataset Visualisations","be663106":"## Confirmed PLots","baf864a1":"## Forcasting Confirmed Cases","2521fafe":"## Deaths Predictions for Ontario","facb6338":"A special thansk for **Ranjith KS** whose [kernel](https:\/\/www.kaggle.com\/ranjithks\/ran-coronavirus-exploratory-data-analysis-eda#Exploratory-Data-Analysis) helped me a lot to complete this map visualisation part, most of the code here is of her","0c7dbece":"# Showing Death's of total countries \n\nGrouping Dataset by Date","a18efebc":"# Data Exploration","1680eb50":"## Confirmed Cases Maps","540cee8e":"## Deaths Cases Maps"}}