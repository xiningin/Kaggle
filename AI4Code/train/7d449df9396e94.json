{"cell_type":{"4a8a5c18":"code","f4f63199":"code","fa2741ae":"code","6ca3e13f":"code","fef31682":"code","80d3c2c8":"code","89b926f5":"code","9f610c18":"code","d711e20a":"code","5c624eb7":"code","9a5b49e7":"code","75127be8":"code","e5d9a34f":"code","68218b87":"code","8da00668":"code","c9172c0f":"code","6d9624c9":"code","0310a5e1":"code","e54e54c8":"code","e45de72e":"code","02ff23c8":"code","05d2b497":"code","4be998b2":"code","00857617":"code","ea2a49b3":"code","b4be2c6a":"code","d0c42e25":"code","322a3226":"code","e632f576":"code","b31bee83":"markdown","263d97b7":"markdown","814c1da0":"markdown","2df92d9a":"markdown","5605c1a0":"markdown","37fa2966":"markdown","e6b715f1":"markdown","af24c519":"markdown","9081ed03":"markdown","dfdee2e6":"markdown","90b88593":"markdown","6ed007c1":"markdown","cd77a222":"markdown","ad0342f7":"markdown","836ded53":"markdown","ece35790":"markdown","43c75b9f":"markdown","567c2efc":"markdown","8a604d87":"markdown","f071603e":"markdown","8f3ccd2a":"markdown","6518f210":"markdown","9ef3ec4f":"markdown","344ecd0e":"markdown","072e5de7":"markdown","bb385c6b":"markdown","019d16b9":"markdown","393ba4e0":"markdown"},"source":{"4a8a5c18":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # Visualize\nimport seaborn as sns # Visualize","f4f63199":"# reading data\ndata = pd.read_csv('..\/input\/hotel-booking-demand\/hotel_bookings.csv')\ndata.head()","fa2741ae":"data.describe()","6ca3e13f":"data.info()","fef31682":"cancel_corr = data.corr()[\"is_canceled\"]\ncancel_corr.abs().sort_values(ascending=False)[1:]","80d3c2c8":"plt.figure(figsize = (24, 12))\n\ncorr = data.corr()\nsns.heatmap(corr, annot = True, linewidths = 1)\nplt.show()","89b926f5":"# checking for null values \nnull = pd.DataFrame({'Null Values' : data.isna().sum(), 'Percentage Null Values' : (data.isna().sum()) \/ (data.shape[0]) * (100)})\nnull.sort_values(by=['Null Values'],ascending=False)","9f610c18":"data['company'] = data['company'].replace(np.nan,0)\ndata['agent'] = data['agent'].replace(np.nan,0)\ndata['country'] = data['country'].replace(np.nan,'UNK')\ndata['children'] = data['children'].replace(np.nan,'0')","d711e20a":"filter = (data.children == 0) & (data.adults == 0) & (data.babies == 0)\ndata = data[~filter]","5c624eb7":"data.head()","9a5b49e7":"data.columns","75127be8":"data = data.drop(['reservation_status_date'],axis=1)","e5d9a34f":"num_features = ['lead_time','arrival_date_year','arrival_date_week_number','stays_in_weekend_nights',\n               'stays_in_week_nights','adults','children','babies','is_repeated_guest','previous_cancellations','previous_bookings_not_canceled','booking_changes','days_in_waiting_list','adr','required_car_parking_spaces','total_of_special_requests']","68218b87":"cat_features = ['hotel', 'arrival_date_month','meal','country','market_segment','distribution_channel','reserved_room_type','assigned_room_type','deposit_type','agent','company','customer_type','reservation_status']","8da00668":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\ncat_data = data[cat_features]\nfor i in cat_data:\n    cat_data[i] = le.fit_transform(cat_data[i])\ncat_data","c9172c0f":"num_data = data[num_features]\nnum_data['children'] = num_data['children'].astype('int')\nnum_data.var()","6d9624c9":"X = pd.concat([cat_data, num_data], axis = 1)\ny = data['is_canceled']\nprint(X.shape,y.shape)","0310a5e1":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25,shuffle=True)","e54e54c8":"print(X_train.shape,y_train.shape)","e45de72e":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import classification_report","02ff23c8":"lr = LogisticRegression(solver='liblinear')\nlr.fit(X_train, y_train)\n\ny_pred_lr = lr.predict(X_test)\nclf_report = classification_report(y_test, y_pred_lr)\nprint(f\"Classification Report : \\n{clf_report}\")","05d2b497":"knn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\n\ny_pred_knn = knn.predict(X_test)\n\nclf_report = classification_report(y_test, y_pred_knn)\nprint(f\"Classification Report : \\n{clf_report}\")","4be998b2":"dtc = DecisionTreeClassifier()\ndtc.fit(X_train, y_train)\n\ny_pred_dtc = dtc.predict(X_test)\nclf_report = classification_report(y_test, y_pred_dtc)\n\nprint(f\"Classification Report : \\n{clf_report}\")","00857617":"rd_clf = RandomForestClassifier()\nrd_clf.fit(X_train, y_train)\n\ny_pred_rd_clf = rd_clf.predict(X_test)\nclf_report = classification_report(y_test, y_pred_rd_clf)\n\nprint(f\"Classification Report : \\n{clf_report}\")","ea2a49b3":"ada = AdaBoostClassifier()\nada.fit(X_train, y_train)\n\ny_pred_ada = ada.predict(X_test)\nclf_report = classification_report(y_test, y_pred_ada)\n\nprint(f\"Classification Report : \\n{clf_report}\")","b4be2c6a":"gb = GradientBoostingClassifier()\ngb.fit(X_train, y_train)\n\ny_pred_gb = gb.predict(X_test)\nclf_report = classification_report(y_test, y_pred_gb)\n\nprint(f\"Classification Report : \\n{clf_report}\")","d0c42e25":"from tensorflow.keras.utils import to_categorical\ny_ = to_categorical(y)\nX_train, X_test, y_train, y_test = train_test_split(X, y_, test_size = 0.25,shuffle=True)","322a3226":"from tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense\nfrom tensorflow.python.keras.callbacks import EarlyStopping\nfrom tensorflow.python.keras.layers import Dropout\n\nmodel = Sequential()\n\nmodel.add(Dense(32, activation='relu', input_shape=(29,),kernel_initializer='random_uniform'))\nmodel.add(Dense(64, activation='relu',kernel_initializer='random_uniform'))\nmodel.add(Dense(128, activation='relu',kernel_initializer='random_uniform'))\nmodel.add(Dense(256, activation='relu',kernel_initializer='random_uniform'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(512, activation='relu',kernel_initializer='random_uniform'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(256, activation='relu',kernel_initializer='random_uniform'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(128, activation='relu',kernel_initializer='random_uniform'))\nmodel.add(Dense(64, activation='relu',kernel_initializer='random_uniform'))\nmodel.add(Dense(2, activation='sigmoid',kernel_initializer='random_uniform'))\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.summary()","e632f576":"model_history = model.fit(X_train, y_train, validation_data = (X_test, y_test),\n                          epochs = 10)","b31bee83":"## Varyasyonu azaltmak i\u00e7in a\u015fa\u011f\u0131daki d\u00f6ng\u00fc kullan\u0131labilir.\n## Fakat yapt\u0131\u011f\u0131m testlerde bu \u00e7al\u0131\u015fma i\u00e7in varyasyonun s\u0131n\u0131fland\u0131rma'ya bir etkisi olmad\u0131\u011f\u0131n\u0131 g\u00f6zlemledim.\n**for i in num_features:\n    num_data[i] = np.log(num_data[i]+1)\nnum_data.var()**","263d97b7":"## Random Forest modeli ile %100 test veriseti ba\u015far\u0131m oran\u0131na ula\u015f\u0131ld\u0131.","814c1da0":"## KNN modeli ile %80 test veriseti ba\u015far\u0131m oran\u0131na ula\u015f\u0131ld\u0131.","2df92d9a":"## Check all features correlations\n## Her bir \u00f6zniteli\u011fin di\u011fer \u00f6zniteliklerle korelasyonuna bakal\u0131m.\n## \u00d6rne\u011fin, y\u0131l ile o y\u0131la ait hafta aras\u0131nda ciddi bir ba\u011f\u0131nt\u0131 g\u00f6r\u00fclm\u00fc\u015ft\u00fcr. Bu insanlar\u0131n belli y\u0131llarda belli zaman aral\u0131klar\u0131nda daha fazla tatil yapabilece\u011fini g\u00f6stermi\u015ftir.\n## Rezervasyon yap\u0131lan acenta ile eski m\u00fc\u015fteri olmas\u0131 aras\u0131nda ba\u011f\u0131nt\u0131 g\u00f6r\u00fc\u015fm\u00fc\u015ft\u00fcr. Bu insanlar\u0131n daha \u00f6nce rezervasyon yapt\u0131\u011f\u0131 acentay\u0131 tekrar kulland\u0131\u011f\u0131n\u0131 g\u00f6stermektedir.","5605c1a0":"## Say\u0131sal verilerde ise children \u00f6zniteli\u011fini integer format\u0131na \u00e7evirdim.\n## Ayr\u0131ca varyasyonuna bakt\u0131m.","37fa2966":"## Yukar\u0131da bir\u00e7ok s\u0131n\u0131fland\u0131r\u0131c\u0131 ile y\u00fcksek ba\u015far\u0131m oran\u0131na ula\u015f\u0131ld\u0131. S\u0131n\u0131fland\u0131r\u0131lmas\u0131 kolay bir veri oldu\u011fu s\u00f6ylenebilir.","e6b715f1":"## Art\u0131k verimizi tekrar birle\u015ftirebilir, veri ve target \u015feklinde ay\u0131rmam\u0131za m\u00fcsaittir.\n## G\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere 119210 sat\u0131rl\u0131k bir veri elimizde bulunmaktad\u0131r. Hepsi say\u0131salla\u015ft\u0131r\u0131lm\u0131\u015ft\u0131r.","af24c519":"## Tekrar verimize bakal\u0131m.","9081ed03":"## Logistic Regression modeli ile %99 test veriseti ba\u015far\u0131m oran\u0131na ula\u015f\u0131ld\u0131.","dfdee2e6":"## Gradient boosting modeli ile de %100 test veriseti ba\u015far\u0131m oran\u0131na ula\u015f\u0131ld\u0131.","90b88593":"## Let's check statistical features of dataset\n## Verinin istatistiksel \u00f6zellikleri kontrol edilir. G\u00f6r\u00fcld\u00fc\u011f\u00fc gibi 119,390 sat\u0131r bulunmaktad\u0131r.","6ed007c1":"## Verimizi e\u011fitim ve test olmak \u00fczere ayr\u0131\u015ft\u0131r\u0131yoruz. (%25 test)","cd77a222":"## Check feature types \n## Veriye ait \u00f6zniteliklerin veri tipleri g\u00f6zlenir. A\u015fa\u011f\u0131da g\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere verideki farkl\u0131 s\u00fctunlar farkl\u0131 objeler olarak alg\u0131lanm\u0131\u015ft\u0131r. Bu objeleri do\u011fru \u015fekilde tan\u0131mlamak laz\u0131md\u0131r. Ayr\u0131ca verideki baz\u0131 s\u00fctunlarda bo\u015fluklar oldu\u011fu g\u00f6zlenmektedir. ","ad0342f7":"## Yapay sinir a\u011flar\u0131 ile kurulan modelimiz de 10 epoch i\u00e7in %100 test seti ba\u015far\u0131m oran\u0131na ula\u015fm\u0131\u015ft\u0131r.","836ded53":"## Let's divide features into categorical & numeric\n## Verimizdeki \u00f6znitelikleri kategorik ve say\u0131sal olmak \u00fczere ayr\u0131\u015ft\u0131ral\u0131m.","ece35790":"## Modelimizi 10 epoch i\u00e7in e\u011fitelim.","43c75b9f":"## Kategorik verileri Label encoder ile say\u0131sal hale d\u00f6n\u00fc\u015ft\u00fcrelim.\n## Bu fonksiyon basit\u00e7e verileri [0,1,2,3,...,n] s\u0131n\u0131f \u00fczerine atama yapar.","567c2efc":"## Let's check which features are related to cancellation\n## Her bir \u00f6zniteli\u011fin, iptal etme(cancellation) \u00f6zniteli\u011fine g\u00f6re korelasyonun bakal\u0131m. \n## G\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere rezervasyon iptali en \u00e7ok, rezervasyon ile check-in aras\u0131ndaki s\u00fcre ile ba\u011f\u0131nt\u0131 kurmaktad\u0131r. \n## Ayr\u0131ca m\u00fc\u015fterilerin \u00f6zel isteklerinin kar\u015f\u0131lanmas\u0131, m\u00fc\u015fterilere ara\u00e7 park sa\u011flanmas\u0131 gibi \u00f6znitelikler rezervasyon iptali ile alakal\u0131 oldu\u011fu g\u00f6zlenmektedir.","8a604d87":"## Adaboost s\u0131n\u0131fland\u0131r\u0131c\u0131 ile %100 test veriseti ba\u015far\u0131m oran\u0131na ula\u015f\u0131ld\u0131.","f071603e":"## Libraries Imported\n## \u0130lk olarak gerekli k\u00fct\u00fcphaneler \u00e7a\u011f\u0131r\u0131l\u0131r","8f3ccd2a":"## Yakla\u015f\u0131k 9-10 layerl\u0131k klasik bir yapay sinir a\u011f\u0131 kural\u0131m.\n## Overfit engellemek i\u00e7in baz\u0131 katmanlara dropout eklenmi\u015ftir.","6518f210":"## S\u0131n\u0131fland\u0131rma i\u00e7in kullanca\u011f\u0131m\u0131z fonksiyonlar ait gerekli k\u00fct\u00fcphaneler \u00e7a\u011f\u0131r\u0131l\u0131r.","9ef3ec4f":"## Let's impute null values\n## Verideki bo\u015fluklar\u0131 doldural\u0131m.\n## \"Company\" ve \"agent\" \u00f6zniteliklerindeki Null de\u011ferler 0 ile doldurulmu\u015ftur.\n## \"Country\" \u00f6zniteli\u011findeki Null de\u011ferler, \"UNK\"(Unknown) ile doldurulmu\u015ftur.\n## \"Children\" \u00f6zniteli\u011findeki Null de\u011ferler 0 ile doldurulmu\u015ftur.","344ecd0e":"## Verisetinde \u00e7e\u015fitli k\u0131s\u0131mlarda yeti\u015fkin, \u00e7ocuk ve bebek say\u0131s\u0131 s\u0131f\u0131r olarak g\u00f6r\u00fclmektedir. Bu m\u00fcmk\u00fcn olmayaca\u011f\u0131ndan dolay\u0131 bu k\u0131s\u0131mlar filtrelenerek veriden uzakla\u015ft\u0131r\u0131lm\u0131\u015ft\u0131r.","072e5de7":"## Decision Tree modeli ile %100 test veriseti ba\u015far\u0131m oran\u0131na ula\u015f\u0131ld\u0131.","bb385c6b":"## Veriye ait i\u015fimize yaramayan \u00f6znitelikler at\u0131labilir.","019d16b9":"## Data reading \n## Veri okunup, ilk sat\u0131rlar g\u00f6rselle\u015ftirilir.","393ba4e0":"## Have a look at Null values\n## Null de\u011ferleri ve verideki bo\u015fluklara g\u00f6z atal\u0131m\n## En \u00e7ok null de\u011feri company \u00f6zniteli\u011findedir. \u00d6zniteli\u011fin %94'\u00fc bo\u015ftur."}}