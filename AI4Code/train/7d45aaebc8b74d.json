{"cell_type":{"6d973ebd":"code","9127b5cf":"code","e42c2d45":"code","ecb5c087":"code","ef99f170":"code","9fbe368d":"code","6629350b":"code","5205c182":"code","10781139":"code","f87ed546":"code","22accf36":"code","abb386c0":"code","a2a5e4de":"code","68170d1f":"code","be8bc584":"code","becf4a8d":"code","ca4a762d":"code","586d4d79":"code","f74783ac":"code","9184e93f":"code","2ee781fd":"code","c45c59fd":"code","82505147":"code","f98b4349":"code","29721be5":"code","024c65af":"code","40f3b3ce":"code","4e0d77af":"code","95241085":"markdown","93c5c9e5":"markdown","e3db265f":"markdown","2a8d38c8":"markdown","9ddab8de":"markdown","a207d8e2":"markdown","530dc1b8":"markdown","bc8fcbd2":"markdown","d661144e":"markdown","1f26df8c":"markdown","e2338e2b":"markdown","d824129e":"markdown","bbfcdbeb":"markdown","b46f5cdc":"markdown","94893441":"markdown","6d18e1f6":"markdown","92d619af":"markdown"},"source":{"6d973ebd":"\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#seaborn\nimport seaborn as sns\n#matplot\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport warnings            \nwarnings.filterwarnings(\"ignore\")\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9127b5cf":"data=pd.read_csv(\"..\/input\/Video_Games_Sales_as_at_22_Dec_2016.csv\")\ndata.head()","e42c2d45":"data.info()","ecb5c087":"data.isnull().any() #look for nan values","ef99f170":"data.isna().sum() # sum of nan values","9fbe368d":"data.dropna(axis=0,inplace=True) #dropping nan values\ndef div(n):\n    return n\/10\ndata.Critic_Score=data.Critic_Score.apply(div) # div 10 to Critic score to make similiar User score\n\ndata[\"Year_of_Release\"]=data[\"Year_of_Release\"].astype(\"int\") # changing data types\ndata[\"User_Count\"]=data[\"User_Count\"].astype(\"int\")\ndata[\"Critic_Count\"]=data[\"Critic_Count\"].astype(\"int\")\ndata[\"User_Score\"]=data[\"User_Score\"].astype(\"float\")","6629350b":"data=data.reset_index(drop=True)\ndata.head(10)","5205c182":"# Plot for games' count on each platform (classic bar plot)\nx=data.Platform.unique()\ny=data.Platform.value_counts()\nplt.figure(figsize=(16,9))\nsns.barplot(x=x,y=y,edgecolor=\"black\")\nplt.xlabel(\"Platforms\")\nplt.ylabel(\"Games count\")\nplt.show()","10781139":"# Sequential bar plot for games' genre count\nx=data.Genre.unique()\ny=data.Genre.value_counts().sort_values(ascending=True)\nplt.figure(figsize=(16,9))\nsns.barplot(x=x,y=y,palette=\"rocket\")\nplt.xlabel(\"Genres\")\nplt.ylabel(\"Games count\")\nplt.show()","f87ed546":"top_publisher=pd.DataFrame(data.Publisher.value_counts()[:10]) # top 10 game publishers\ntop_publisher","22accf36":"top_publisher.index","abb386c0":"# Horizontal bar plot for top 10 game publishers sale\npublisher_list=list(top_publisher.index)\n\nNA_Sales = []\nEU_Sales = []\nJP_Sales = []\nOther_Sales = []\n\n# Groupped sales on 4 type\n\nfor i in publisher_list:\n    x = data[data.Publisher==i]\n    NA_Sales.append(sum(x.NA_Sales))\n    EU_Sales.append(sum(x.EU_Sales))\n    JP_Sales.append(sum(x.JP_Sales))\n    Other_Sales.append(sum(x.Other_Sales))\n\n# visualization\nf,ax = plt.subplots(figsize = (16,9))\nsns.barplot(x=NA_Sales,y=publisher_list,label='NA',color=\"r\" )\nsns.barplot(x=EU_Sales,y=publisher_list,label='EU',color=\"b\")\nsns.barplot(x=JP_Sales,y=publisher_list,label='JP',color=\"g\")\nsns.barplot(x=Other_Sales,y=publisher_list,label='Other',color=\"y\")\n\nax.legend(loc='lower right',frameon = True)     \nax.set(xlabel='Total Sales', ylabel='Publisher',title = \"Total Sales According to Publishers \")\nplt.show()","a2a5e4de":"release_sales=data.groupby(\"Year_of_Release\")[\"Global_Sales\",\"Name\"].max() # max sales in each year\nrelease_sales","68170d1f":"# max gloabal sales in each year\nsns.set(style=\"whitegrid\")\nf,ax=plt.subplots(figsize=(16,9))\nsns.pointplot(x=release_sales.index,y=release_sales.Global_Sales,alpha=0.5,color=\"red\")\nplt.text(21,82,'Sales(millions)',fontsize = 17,style = 'italic')\nplt.xlabel('Year of Release',fontsize = 15)\nplt.ylabel('Max Sales',fontsize = 15)\nplt.title('Max Sales of Each Year',fontsize = 20)\nplt.xticks(rotation= 45)\nplt.show()","be8bc584":"data.corr()","becf4a8d":"# kde jointplot\ng=sns.jointplot(x=\"User_Score\",y=\"Critic_Score\",kind=\"kde\",size=10,space=0,data=data)","ca4a762d":"# grid jointplot\ngrid = sns.jointplot(x=data.User_Score, y=data.Critic_Score, space=0, size=10, ratio=5,color=\"g\")","586d4d79":"ratings=pd.DataFrame(data.Rating.value_counts()) \nratings","f74783ac":"labels=ratings[:4].index # I ignored last 3 value because too small\ncolors = ['grey','blue','red','yellow']\nsizes = ratings[:4].values\n\n# visual\nplt.figure(figsize = (9,9))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.2f%%')\nplt.title(\"Games' Ratings\",color = 'blue',fontsize = 15)\nplt.show()","9184e93f":"sns.lmplot(x=\"User_Count\", y=\"Critic_Count\", data=data,size=10,)\nplt.show()","2ee781fd":"f, ax = plt.subplots(figsize=(10, 10))\nax = sns.kdeplot(data.User_Score, data.Critic_Score,cmap=\"Reds\", shade=True, shade_lowest=False)\nred = sns.color_palette(\"Reds\")[-2]\nax.text(3.8, 4.5, \"Score\", size=16, color=\"b\")\nplt.show()","c45c59fd":"f, ax = plt.subplots(figsize=(20, 10))\npal = sns.hls_palette(2, l=.7, s=.8)\nsns.violinplot(data=data[[\"User_Score\",\"Critic_Score\"]],palette=pal, inner=\"points\")\nplt.show()","82505147":"f, ax = plt.subplots(figsize=(10, 10))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(data.iloc[:,3:].corr(), cmap=cmap, vmax=.3, center=0,square=True,annot=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()","f98b4349":"f, ax = plt.subplots(figsize=(15, 10))\nsns.boxplot(x=data.Platform[data.Platform==\"PSV\"], y=data.Global_Sales,hue=data.Rating)\nplt.show()","29721be5":"f,ax = plt.subplots(figsize=(20, 10))\nsns.swarmplot(x=data.Genre, y=data.Critic_Score,hue=data.Rating)\nplt.show()","024c65af":"sns.pairplot(data.iloc[:,10:14])\nplt.show()","40f3b3ce":"plt.figure(figsize=(15,10))\nsns.countplot(data.Genre)\nplt.title(\"Genres\",color = 'g',fontsize=15)\nplt.show()","4e0d77af":"plt.figure(figsize=(10,8))\nabove_5 =['above_5' if i >= 5 else 'below_5' for i in data.User_Score]\ndf = pd.DataFrame({'score':above_5})\nsns.countplot(x=df.score)\nplt.ylabel('Number of User Scores')\nplt.title('Distribution of Scores',color = 'r',fontsize=15)\nplt.show()","95241085":"<a id=\"6\"><\/a> \n**Kde Plot**","93c5c9e5":"**1. Reading data**","e3db265f":"<a id=\"8\"><\/a> \n**Heatmap**","2a8d38c8":"<a id=\"9\"><\/a> \n**Box Plot**","9ddab8de":"<a id=\"12\"><\/a> \n**Count Plot**","a207d8e2":"<a id=\"3\"><\/a> \n**Joint Plot**","530dc1b8":"**DATAI Seaborn Tutorial for Beginners**\nhttps:\/\/www.kaggle.com\/kanncaa1\/seaborn-tutorial-for-beginners","bc8fcbd2":"**2. Cleaning data**","d661144e":"<a id=\"1\"><\/a> \n**Bar Plot**","1f26df8c":"<a id=\"11\"><\/a> \n**Pair Plot**","e2338e2b":"**INTRODUCTION**\nHello, this is my beginner kernel about seaborn visulisation. I used Video Game Sales with Ratings data for plots. I made couple plots which used mostly.","d824129e":"<a id=\"2\"><\/a>\n**Point Plot**","bbfcdbeb":"<a id=\"7\"><\/a> \n**Violin Plot**","b46f5cdc":"<a id=\"5\"><\/a> \n**Lm Plot**","94893441":"1. Reading data\n2. Cleaning data\n* [Bar Plot](#1)\n* [Point Plot](#2)\n* [Joint Plot](#3)\n* [Pie Chart](#4)\n* [Lm Plot](#5)\n* [Kde Plot](#6)\n* [Violin Plot](#7)\n* [Heatmap](#8)\n* [Box Plot](#9)\n* [Swarm Plot](#10)\n* [Pair Plot](#11)\n* [Count Plot](#12)","6d18e1f6":"<a id=\"10\"><\/a> \n**Swarm Plot**","92d619af":"<a id=\"4\"><\/a> \n**Pie Chart**"}}