{"cell_type":{"965e1aa5":"code","a35e3042":"code","902410f8":"code","8320bc36":"code","30ffceb4":"code","63719b8c":"code","cb1818f6":"code","e5d3a1ad":"code","405892f5":"code","3490682e":"code","87c11914":"code","104b5c3b":"code","73f425bf":"code","2243c5fe":"code","1792c83c":"code","de634466":"code","b3283715":"code","86cccbee":"code","6a9bf2b6":"code","35aa5ca0":"code","96e625b2":"code","df119ea9":"code","029fd2ac":"code","3a6b74da":"markdown"},"source":{"965e1aa5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #visulization\nimport os\nimport seaborn as sns\nfrom sklearn.preprocessing import Imputer\n\ndf_athlete=pd.read_csv(\"..\/input\/athlete_events.csv\")\ndf_Noc=pd.read_csv(\"..\/input\/noc_regions.csv\")\ndf_Noc.head()\ndf_athlete.head()","a35e3042":"#summarize all variables\ndf_athlete.info()","902410f8":"# how many each team share in competeion  and the null in columns\ndf_athlete.set_index(['Team','ID']).count(level='Team')\ndf_athlete.groupby('Team')['Medal']\ndf_athlete['Team'].value_counts()\ndf_athlete['Medal'].value_counts()\ndf_athlete.isnull().sum().sum()\ndf_athlete.isnull().any().any()\ndf_athlete.loc[:,df_athlete.isna().any()]\nnull_columns=df_athlete.columns[df_athlete.isnull().any()]\ndf_athlete[null_columns].isnull().sum()","8320bc36":"#handle null in data set \n#get relation between the hieght and width it is show liner relationship\nplt.plot(df_athlete['Height'],df_athlete['Weight'])\nplt.xlabel='Height'\nplt.ylabel='Weight'\nplt.show()","30ffceb4":"#get the age distribution type\nimport matplotlib.mlab as mlab\nnp.min(df_athlete['Age'])\nnp.max(df_athlete['Age'])\nmu=np.mean(df_athlete['Age'])\nsigma=np.std(df_athlete['Age'])\n\nbins=np.linspace(10,100,10)\nplt.hist(df_athlete['Age'],bins,normed=1,alpha=0.5)\ny = mlab.normpdf(bins, mu, sigma)\nplt.plot(bins, y, 'r--')\nplt.title(\"Age Distribution\")\nplt.show()\n","63719b8c":"#file the missing value in Age with impute \nvalues = df_athlete[['Age']].values\nimputer = Imputer()\ntransformed_values = imputer.fit_transform(values)\n# count the number of NaN values in each column\nprint(np.isnan(transformed_values).sum())\ndf_athlete['AgeImpute']=transformed_values","cb1818f6":"df_athlete.head()\n","e5d3a1ad":"#get the age distribution type again you will find it is almost same as previous before imputing\nimport matplotlib.mlab as mlab\nnp.min(df_athlete['Age'])\nnp.max(df_athlete['Age'])\nmu=np.mean(df_athlete['Age'])\nsigma=np.std(df_athlete['Age'])\n\nbins=np.linspace(10,100,10)\nplt.hist(df_athlete['Age'],bins,normed=1,alpha=0.5)\ny = mlab.normpdf(bins, mu, sigma)\nplt.plot(bins, y, 'r--')\nplt.title(\"Age Distribution\")\nplt.show()","405892f5":"df_athlete['Sport'].value_counts()","3490682e":"#imputing the height and weight but by grouping in sport because each sport have it is attribute of\n#hieght and weight\n\ndf_athlete.groupby('Sport')['Height'].mean()\ndf_athlete.groupby('Sport')['Weight'].mean()\nbySport=df_athlete.groupby('Sport')\n# Write a function that imputes mean\ndef impute_mean(series):\n    return series.fillna(series.mean())\ndf_athlete['Height2'] = bySport.Height.transform(impute_mean)\ndf_athlete['Weight2'] = bySport.Weight.transform(impute_mean)\ndf_athlete.head()","87c11914":"\ndf_athlete['Height'].min()\ndf_athlete['Height'].max()\n\ndf_athlete['Weight'].min()\ndf_athlete['Weight'].max()","104b5c3b":"df_athlete['Year'].describe()","73f425bf":"df_athlete['City'].unique()","2243c5fe":"\nbins=np.linspace(1896,2016,120)\nplt.hist(df_athlete['Year'],bins)\nplt.show()","1792c83c":"#number of athletes participate each years\ndf_athlete['Year'].value_counts\ndf_athlete['Year'].describe()\nYearFreq=pd.crosstab(index=df_athlete['Year'],columns=\"Count\")\nN=35\ncolors = np.random.rand(N)\narea = (30 * np.random.rand(N))**2\nplt.scatter(df_athlete['Year'].unique(),YearFreq['Count'],c=colors,s=area)\nplt.show()\n","de634466":"#Each city and number of particibate\nCityFreq=pd.crosstab(index=df_athlete['City'],columns=\"Count\")\nCityFreq.sort_values\n","b3283715":"# it is show only 66 type of sport .table show Athletics is the most sport played\nSportFreq=pd.crosstab(index=df_athlete['Sport'],columns=df_athlete['Year'], margins=True)\nSportFreq","86cccbee":"#number of athletes by year and sex\ndf_athlete.groupby(['Year','Sex']).count()['Sport'].unstack().plot()","6a9bf2b6":"#number of athletes by year and session\ndf_athlete.groupby(['Year','Season']).count()['Sport'].unstack().plot()\n","35aa5ca0":"#only athletics during all period and we will see that is played only in summer\ndf_athlete['Year'].unique()\ndf_2=df_athlete[df_athlete['Sport']==\"Athletics\"]\ndf_2.groupby('Year').count()['Sport'].plot()\ndf_2.groupby(['Year','Season']).count()['Sport'].unstack().plot()\ndf_2.groupby(['Year','Sex']).count()['Sport'].unstack().plot()","96e625b2":"# Get Teams Plot By Medal\ndf_athlete['Team'].unique()\nTeamFreq=pd.crosstab(index=df_athlete['Medal'],columns=df_athlete['Team'],dropna=True)\nTeamFreq\np1 = sns.heatmap(TeamFreq,linewidths=0,cmap='BuPu',annot=True)\n\nlabels = df_athlete['Team'].unique()\nsizes = df_athlete.groupby('Team')['Medal'].count()\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n","df119ea9":"# plot Atheletic Sport Only to see how much medals owns each team\nplt.plot(df_2['Team'].unique(),df_2.groupby('Team')['Medal'].count())\nplt.show()","029fd2ac":"\ndf_2.groupby(['Team','Medal']).count()['Sport'].unstack().plot()","3a6b74da":"\n# i will go through the dataset and get insights and try to mining the data and visulize it .  \n\n*  # Import packages\n*  # Read The Data\n*  # Explore the Data\n*  # Try with some plotting and tables\n"}}