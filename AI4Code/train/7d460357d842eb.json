{"cell_type":{"aa1a6b52":"code","65202c6f":"code","7f435572":"code","e054c755":"code","f6d1fad5":"code","ca15c17c":"code","4e146f32":"code","340ceba8":"markdown","35082e1c":"markdown","ed72c478":"markdown","15d958d7":"markdown","27460519":"markdown","b0373144":"markdown","af9f5066":"markdown","601d4570":"markdown","6e6798b6":"markdown","b511b571":"markdown"},"source":{"aa1a6b52":"# simple example\nclass ExampleClass:\n#Every function belonging to a class must be indented equally\n    def __init__(self):\n        name = \"example\"\n    def someFunction(self, a):\n        #Notice everything belonging to a function must be indented\n        if a > 5:\n            return True\n        else:\n            return False","65202c6f":"#If a function is not indented to the same level it will not be considers as part of the parent class\ndef separateFunction(b):\n    for i in b:\n    #Loops are also indented and nested conditions start a new indentation\n        if i == 1:\n            return True\n    return False\n\nseparateFunction([2,3,5,6,1])","7f435572":"foo =True\nif foo:\n    if bar:\n        x = 42\nelse:\n    print (foo)","e054c755":"a = 7\nif a > 5:\n    print \"foo\"\nelse:\n    print \"bar\"\n print \"done\"","f6d1fad5":"if True:\nprint \"true\"","ca15c17c":"if True:\n    a = 6\n        b = 5","4e146f32":"def isEven(a):\n    if a%2 ==0:\n        return True\n        #this next line should be even with the if\n        return False\nprint (isEven(7))","340ceba8":"Or if the line following a colon is not indented, an IndentationError will also be raised:","35082e1c":"## Indentation Errors","ed72c478":"If you add indentation where it doesn't belong, an IndentationError will be raised:","15d958d7":"The recommended indentation is 4 spaces but tabs or spaces can be used so long as they are consistent. Do not\nmix tabs and spaces in Python as this will cause an error in Python 3 and can causes errors in Python 2.","27460519":"is analyzed as:","b0373144":"# Chapter 3: Indentation","af9f5066":"<if> <foo> <:> [0]\n<INDENT> <if> <bar> <:> [0, 4]\n<INDENT> <x> <=> <42> [0, 4, 8]\n<DEDENT> <DEDENT> <else> <:> [0]\n<INDENT> <print> <foo> [0, 2]\n<DEDENT>","601d4570":"Whitespace is handled by the lexical analyzer before being parsed.\nThe lexical analyzer uses a stack to store indentation levels. At the beginning, the stack contains just the value 0,\nwhich is the leftmost position. Whenever a nested block begins, the new indentation level is pushed on the stack,\nand an \"INDENT\" token is inserted into the token stream which is passed to the parser. There can never be more\nthan one \"INDENT\" token in a row (IndentationError).\nWhen a line is encountered with a smaller indentation level, values are popped from the stack until a value is on top\nwhich is equal to the new indentation level (if none is found, a syntax error occurs). For each value popped, a\n\"DEDENT\" token is generated. Obviously, there can be multiple \"DEDENT\" tokens in a row.\nThe lexical analyzer skips empty lines (those containing only whitespace and possibly comments), and will never\ngenerate either \"INDENT\" or \"DEDENT\" tokens for them.\nAt the end of the source code, \"DEDENT\" tokens are generated for each indentation level left on the stack, until just\nthe 0 is left.\nFor example:","6e6798b6":"The spacing should be even and uniform throughout. Improper indentation can cause an IndentationError or\ncause the program to do something unexpected. The following example raises an IndentationError","b511b571":"If you forget to un-indent functionality could be lost. In this example None is returned instead of the expected False:If you forget to un-indent functionality could be lost. In this example None is returned instead of the expected False:"}}