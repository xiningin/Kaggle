{"cell_type":{"e1a118b0":"code","3b07f34b":"code","d28921c8":"code","215e8f20":"code","2f5c8105":"code","fdbaf43d":"code","a05489a0":"code","34eb61d3":"code","079febe1":"code","84cd3285":"code","4dc549f7":"code","7bd31032":"code","30b5497d":"code","6142d404":"code","f69d24c8":"code","b73ae570":"code","8803fe5f":"code","f77f5f2c":"code","915f4647":"code","608c9565":"code","af35b8ab":"code","5fd7d2d9":"code","dc36c72b":"code","2d4db478":"code","83796e67":"markdown","a87bac11":"markdown","8aa49229":"markdown","6408b70f":"markdown","785b01c9":"markdown","e04b133b":"markdown"},"source":{"e1a118b0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3b07f34b":"train_data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")","d28921c8":"train_data.head()","215e8f20":"train_data.drop(['Name','Ticket','Cabin'],axis=1,inplace = True)\ntrain_data.set_index('PassengerId',inplace = True)\navg_age = train_data['Age'].astype('float').mean(axis = 0 )\ntrain_data['Age'].replace(np.nan,avg_age,inplace = True)\ntrain_data.dropna(subset = ['Embarked'],axis = 0 ,inplace = True)\ntrain_data.head()","2f5c8105":"sex_dummies = pd.get_dummies(train_data['Sex'])\ntrain_data = pd.concat([train_data,sex_dummies],axis = 1)\ntrain_data.drop(['Sex'],axis=1 ,inplace = True)\nEmbarked_Dummies = pd.get_dummies(train_data[\"Embarked\"])\ntrain_data = pd.concat([train_data,Embarked_Dummies],axis=1)\ntrain_data.drop(['Embarked'],axis=1,inplace=True)\ntrain_data['Age'] = train_data['Age'].astype(int, copy = True)\ntrain_data['Fare'] = train_data['Fare'].astype(int,copy=True)\ntrain_data.head()","fdbaf43d":"%matplotlib inline\nimport matplotlib as plt\nfrom matplotlib import pyplot","a05489a0":"plt.pyplot.hist(train_data[\"Age\"])\n\n# set x\/y labels and plot title\nplt.pyplot.xlabel(\"Age\")\nplt.pyplot.ylabel(\"count\")\nplt.pyplot.title(\"Age bins\")","34eb61d3":"bins = np.linspace(min(train_data[\"Age\"]), max(train_data[\"Age\"]), 9)\ngroup_names = ['0-10', '11-20', '21-30','31-40','41-50','51-60','61-70','71-80']\ntrain_data['Age_binned'] = pd.cut(train_data['Age'], bins, labels=group_names, include_lowest=True )\nAge_dummies = pd.get_dummies(train_data['Age_binned'])\ntrain_data = pd.concat([train_data,Age_dummies],axis = 1)\ntrain_data.drop(['Age','Age_binned'],axis=1 ,inplace = True)\ntrain_data.head()","079febe1":"plt.pyplot.hist(train_data[\"Fare\"])\n\n# set x\/y labels and plot title\nplt.pyplot.xlabel(\"fare\")\nplt.pyplot.ylabel(\"count\")\nplt.pyplot.title(\"fare bins\")","84cd3285":"bins = np.linspace(min(train_data[\"Fare\"]), max(train_data[\"Fare\"]),11)\nFare_names = ['0-50', '51-100', '101-150','151-200','201-250','251-300','300-350','350-400','401-450','450-500']\ntrain_data['Fare_binned'] = pd.cut(train_data['Fare'], bins, labels=Fare_names, include_lowest=True )\nFare_dummies = pd.get_dummies(train_data['Fare_binned'])\ntrain_data = pd.concat([train_data,Fare_dummies],axis = 1)\ntrain_data.drop(['Fare','Fare_binned'],axis=1 ,inplace = True)\ntrain_data.head()\n","4dc549f7":"test_data.head()","7bd31032":"test_data.drop(['Name','Ticket','Cabin'],axis=1,inplace = True)\ntest_data.set_index('PassengerId',inplace = True)\navg_age = test_data['Age'].astype('float').mean(axis = 0 )\ntest_data['Age'].replace(np.nan,avg_age,inplace = True)\ntest_data.dropna(subset = ['Embarked'],axis = 0 ,inplace = True)\nsex_dummies = pd.get_dummies(test_data['Sex'])\ntest_data = pd.concat([test_data,sex_dummies],axis = 1)\ntest_data.drop(['Sex'],axis=1 ,inplace = True)\nEmbarked_Dummies = pd.get_dummies(test_data[\"Embarked\"])\ntest_data = pd.concat([test_data,Embarked_Dummies],axis=1)\ntest_data.drop(['Embarked'],axis=1,inplace=True)\ntest_data.head()\navg_fare = test_data['Fare'].astype('float').mean(axis = 0 )\ntest_data['Fare'].replace(np.nan,avg_fare,inplace = True)\ntest_data['Age'] = test_data['Age'].astype(int, copy = True)\ntest_data['Fare'] = test_data['Fare'].astype(int,copy=True)\ntest_data.head()","30b5497d":"bins = np.linspace(min(test_data[\"Age\"]), max(test_data[\"Age\"]), 9)\ngroup_names = ['0-10', '11-20', '21-30','31-40','41-50','51-60','61-70','71-80']\ntest_data['Age_binned'] = pd.cut(test_data['Age'], bins, labels=group_names, include_lowest=True )\nAge_dummies = pd.get_dummies(test_data['Age_binned'])\ntest_data = pd.concat([test_data,Age_dummies],axis = 1)\ntest_data.drop(['Age','Age_binned'],axis=1 ,inplace = True)\ntest_data.head()","6142d404":"bins = np.linspace(min(test_data[\"Fare\"]), max(test_data[\"Fare\"]),11)\nFare_names = ['0-50', '51-100', '101-150','151-200','201-250','251-300','300-350','350-400','401-450','450-500']\ntest_data['Fare_binned'] = pd.cut(test_data['Fare'], bins, labels=Fare_names, include_lowest=True )\nFare_dummies = pd.get_dummies(test_data['Fare_binned'])\ntest_data = pd.concat([test_data,Fare_dummies],axis = 1)\ntest_data.drop(['Fare','Fare_binned'],axis=1 ,inplace = True)\ntest_data.head()\n","f69d24c8":"train_df = train_data.drop(['Survived'],axis=1)\ntrain_df.head()","b73ae570":"X_train = np.asarray(train_df)\nX_train[0:5]\n\nX_train.shape","8803fe5f":"Y_train =np.asarray(train_data['Survived'])\nY_train[0:5]\nY_train.shape","f77f5f2c":"X_test =np.asarray(test_data)\nX_test[0:5]","915f4647":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nLR = LogisticRegression(C=0.01, solver='liblinear').fit(X_train,Y_train)\nLR","608c9565":"Y_test = LR.predict(X_test)\nY_test[0:5]","af35b8ab":"Y_prob = LR.predict_proba(X_test)\nY_prob[0:5]","5fd7d2d9":"PassengerId = test_data.index","dc36c72b":"df = pd.DataFrame(PassengerId)\ndf['Survived'] = Y_test\ndf","2d4db478":"df.to_csv('csv_to_submit.csv', index = False)","83796e67":"#### logistic regression","a87bac11":"# Predicting Survival\n##### using Logistic Regression","8aa49229":"### Cleaning test data","6408b70f":"# Load Train And Test Dataset","785b01c9":"#### By looking at the table we can see there are many NaN values so the columns like age NaN values are replaced with the average values and columns like cabin,name and ticket are entirely removed which do not impact the survival of passengers","e04b133b":"# Data Cleaning"}}