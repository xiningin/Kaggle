{"cell_type":{"d1883c68":"code","5d8e30a9":"code","29a24282":"code","d9c56ecb":"code","60311e8a":"code","1baf26cf":"code","6916ffea":"code","39e11507":"code","53bd82fe":"code","5105c174":"code","2bd673b1":"code","8837695b":"code","52032b44":"code","c6202ac9":"code","61c8138b":"code","02353feb":"code","c36bab23":"code","d8825d35":"code","45070e68":"markdown","48fe9883":"markdown","3b33d2bd":"markdown","b76d9eb6":"markdown","e0c0879a":"markdown","f846dffa":"markdown","d2d2570e":"markdown","3bd70b4e":"markdown","221daefb":"markdown","0c6f2d9f":"markdown","dccff35f":"markdown"},"source":{"d1883c68":"# Import libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set()","5d8e30a9":"ads = pd.read_csv('..\/input\/social-ads\/social-network-ads.csv')\nads.head()","29a24282":"ads.info()","d9c56ecb":"ads.describe()","60311e8a":"X = ads.iloc[:, :-1].values\ny = ads.iloc[:, -1].values","1baf26cf":"X","6916ffea":"y","39e11507":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)","53bd82fe":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","5105c174":"# import the algorithms\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors=5, metric= 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)","2bd673b1":"# Now i will test the model using random Age & salary from the dataset\nprint(classifier.predict(sc.transform([[37, 41000]])))","8837695b":"#y_pred = classifier.predict(X_test)\n#print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","52032b44":"# easy way\ny_pred = classifier.predict(X_test)\ny_pred","c6202ac9":"y_test","61c8138b":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","02353feb":"test_error_rates = []\n\nfor i in range(1,30):\n    knn_model = KNeighborsClassifier(n_neighbors= i )\n    knn_model.fit(X_train, y_train)\n    \n    y_pred_test = knn_model.predict(X_test)\n    \n    test_error = 1 - accuracy_score(y_test, y_pred_test)\n    test_error_rates.append(test_error)","c36bab23":"test_error_rates","d8825d35":"# now let's plot and see which number is the perfect \nplt.plot(range(1,30), test_error_rates, label= 'Test Error')\nplt.legend()\nplt.xlabel('Error Rate')\nplt.ylabel('K value')","45070e68":"#### Extracting Features & transform the features to numpy array ","48fe9883":"### Model Training & Predicting","3b33d2bd":"### Model Evaluation","b76d9eb6":"#### it's look good now let's compare it with y","e0c0879a":"### Data Splitting & Preprocessing","f846dffa":"### It shows that our number selection 2 was right so we exept the model with accuracy rate 93%","d2d2570e":"#### The model had a good rate with 93% of accuracy with T- = 4 and F- 3 ","3bd70b4e":"#### Explore dataset","221daefb":"#### now let's evaluate the model","0c6f2d9f":"### Importing Dataset & Extracting Features","dccff35f":"### Now let's Choosing Best Value of 'K' neighbors"}}