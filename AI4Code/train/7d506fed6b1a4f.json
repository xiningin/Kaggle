{"cell_type":{"d2dc331a":"code","42612e01":"code","6d292cdd":"code","076ae01c":"code","f3cd5a0f":"code","e2d98441":"code","266c5202":"code","bb038e11":"code","f7f3aa6c":"code","c0a5370f":"code","e7a8aba2":"code","f5be2c86":"code","148dd096":"code","ebb0fcf3":"code","4dfb73be":"code","bef212e4":"code","bda0b892":"code","30131fe6":"code","7aca48a1":"code","da000b38":"code","b8b0dff5":"code","c97dbd2a":"code","1bf8c36c":"code","acafeac5":"code","44698939":"code","e67485c4":"code","1e189d27":"code","2715d45f":"code","7f158fe7":"code","2e579346":"code","b1659626":"markdown","57b64a00":"markdown","4a18d3bd":"markdown","4cae01d8":"markdown","71feeedf":"markdown","f834ae21":"markdown","3603241f":"markdown","fe83724a":"markdown","8b397c31":"markdown","af52fead":"markdown","8f5935da":"markdown","47e4ba8e":"markdown","46079e2f":"markdown","6f08f171":"markdown","18907d3a":"markdown","c1c7792c":"markdown","13bc4542":"markdown"},"source":{"d2dc331a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\nimport plotly.graph_objects as go\nimport plotly\nimport plotly.offline as py\nfrom plotly.offline import iplot\nimport plotly.io as pio\nimport cufflinks as cf\nimport plotly.express as px\ncf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n!pip install jovian --upgrade -q\nimport jovian\nproject_name = \"zerotopandas-course-project-starter\"\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","42612e01":"jovian.commit(project=project_name)","6d292cdd":"df = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')","076ae01c":"df.head()","f3cd5a0f":"questions = df.iloc[0, :].T\ndata = df.iloc[1:, :]","e2d98441":"questions.head()","266c5202":"\ndata.columns","bb038e11":"data.shape","f7f3aa6c":"data.sample()","c0a5370f":"#Extracting the basic information about people\ndf1 = data.iloc[:,1:7]\ndf1.columns = ['Age','Gender','Country','Education','CurrentRole','CodingExperience']","e7a8aba2":"df1.sample()","f5be2c86":"#Creating interactive countplot for age range\nAgeRange = df1['Age'].value_counts()\nAgeRange.iplot(kind=\"bar\",title='Age Group',size=15)","148dd096":"#Checking Gender for Data Scientists\ndf1['Gender'].isnull().values.any()\ngender = df1['Gender'].value_counts()\ngender = pd.DataFrame(gender)\ngender.columns = ['Count']\ngender.index.names = ['Gender']\nfig = px.bar(gender, y='Count', x=gender.index,text='Count',title='G E N D E R')\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig.show()","ebb0fcf3":"#Country WordCloud\ncountry = df1['Country'].value_counts()\nallwords = ' '.join([twts for twts in country.index])\nwordcloud = WordCloud(width=2800, height=600, random_state=21, max_font_size=219,max_words=1100,background_color='black').generate(allwords)\nplt.figure(figsize=(30,30))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","4dfb73be":"country = df1['Country'].value_counts()\ncountry.columns = [['Countries_Count']]\ncountry.index.names = ['Countries']\nfig = px.bar(country, x=country.index, y='Country',\n             hover_data=[country.index, 'Country'], color='Country',\n             labels={'Country':'Count'}, height=800,title='C O U N T R Y')\nfig.show()","bef212e4":"Education = df1['Education'].value_counts()\n\n\n#Country WordCloud\nallwords = ' '.join([twts for twts in Education.index])\nwordcloud = WordCloud(width=1800, height=300, random_state=21, max_font_size=119,max_words=300,background_color='black').generate(allwords)\nplt.figure(figsize=(20,20))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","bda0b892":"#Taking info about current education\ncurrentEducation = df1[['Education']]\ncurrentEducation = currentEducation.value_counts()\ncurrentEducation = pd.DataFrame(currentEducation)\ncurrentEducation.columns = ['Count']\ncurrentEducation.reset_index(level=0, inplace=True)\n#Percentage per country\nfig = px.pie(currentEducation, values='Count', title='E D U C A T I O N',height=700,names='Education')\n\nfig.show()\n","30131fe6":"#'CurrentRole \n#Taking info about current education\ncurrentEducation = df1[['CurrentRole']]\ncurrentEducation = currentEducation.value_counts()\ncurrentEducation = pd.DataFrame(currentEducation)\ncurrentEducation.columns = ['Count']\ncurrentEducation.reset_index(level=0, inplace=True)\n#Percentage per country\nfig = px.pie(currentEducation, values='Count', title='C U R R E N T  R O L E',height=700,names='CurrentRole')\n\nfig.show()","7aca48a1":"#Programming Language use\nprogBasis = data.iloc[:,7:20]\nprogBasis.columns =  ['language1','language2','language3','language4','language5','language6','language7','language8','language9','language10','language11','language12','language13']\npython = progBasis['language1'].value_counts()\nR = progBasis['language2'].value_counts()\nSQL = progBasis['language3'].value_counts()\nC = progBasis['language4'].value_counts()\nCplus = progBasis['language5'].value_counts()\njava = progBasis['language6'].value_counts()\njavascript = progBasis['language7'].value_counts()\njulia = progBasis['language8'].value_counts()\nswift = progBasis['language9'].value_counts()\nbash = progBasis['language10'].value_counts()\nmatlab = progBasis['language11'].value_counts()\nnone = progBasis['language12'].value_counts()\nother = progBasis['language13'].value_counts()\n#concat Dataframes\nprogBasis = pd.concat([python,R,SQL,C,Cplus,java,javascript,julia,swift,bash,matlab])\nprogBasis.index.names = ['Programming_Languages']\n","da000b38":"fig = px.bar(progBasis, x=progBasis, y=progBasis.index, color=progBasis.index, orientation='h',\n             height=500)\nfig.update_layout(title=\"M O S T  U S E D  P R O G R A M M I N G  L A N G U A G E S \",\n                  xaxis_title=\"Count\",\n                  yaxis_title='Programming Languages')\nfig.show()","b8b0dff5":"#programming Language WordCloud\nallwords = ' '.join([programminglanguage for programminglanguage in progBasis.index])\nwordcloud = WordCloud(width=800, height=200, random_state=21, max_font_size=119,max_words=300,background_color='black').generate(allwords)\nplt.figure(figsize=(20,20))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","c97dbd2a":"notebooks = data.iloc[:,33:45]\nnotebooks.columns =  ['notebooks1', 'notebooks2', 'notebooks3', 'notebooks4', 'notebooks5', 'notebooks6', 'notebooks7', 'notebooks8', 'notebooks9', 'notebooks10', 'notebooks11', 'notebooks12']\nkagglenotebook = notebooks['notebooks1'].value_counts()\ncolab = notebooks['notebooks2'].value_counts()\nazure = notebooks['notebooks3'].value_counts()\npaperspace = notebooks['notebooks4'].value_counts()\nbinder = notebooks['notebooks5'].value_counts()\nocean = notebooks['notebooks6'].value_counts()\nibm = notebooks['notebooks7'].value_counts()\nsagemaker = notebooks['notebooks8'].value_counts()\namazonEMR = notebooks['notebooks9'].value_counts()\ngoogleplatform = notebooks['notebooks10'].value_counts()\ngoogledatalab = notebooks['notebooks11'].value_counts()\ndatabricks = notebooks['notebooks12'].value_counts()\n#none = notebooks['notebooks13'].value_counts()\n#other= notebooks['notebooks14'].value_counts()\n#concat Dataframes\nnotebooks = pd.concat([kagglenotebook,colab,azure,paperspace,binder,ocean,ibm,sagemaker,amazonEMR,googleplatform,googledatalab,databricks])\nnotebooks.index.names = ['notebooks']\nfig = px.bar(notebooks, x=notebooks, y=notebooks.index, color=notebooks.index, orientation='h',\n             height=500,)\nfig.update_layout(title=\" E N V I R O N M E N T S  U S E D  \",\n                  xaxis_title=\"Count\",\n                  yaxis_title='Notebook')\nfig.show()\n","1bf8c36c":"dsplatform = data.iloc[:,47]\ndsplatform = dsplatform.value_counts()\ndsplatform = pd.DataFrame(dsplatform)\ndsplatform.columns = ['count']\ndsplatform.index.names = ['platform']\n#Only 5 rows with Na values, let\u00b4s drop it\ndsplatform.dropna(inplace=True)\n\n#Plots\nfig = px.bar(dsplatform , y='count', x=dsplatform.index,text='count',color='count')\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=1, uniformtext_mode='hide',height=900,title=' COMPUTER PLATFORMS ')\nfig.show()\n\n","acafeac5":"#Hardware use\nhardware = data.iloc[:,48:52]\nhardware.columns =  ['hardware1','hardware2','hardware3','hardware4']\ngpu = hardware['hardware1'].value_counts()\ntpu = hardware['hardware2'].value_counts()\ncpu = hardware['hardware3'].value_counts()\nother = hardware['hardware4'].value_counts()\n#concat Dataframes\nhardware = pd.concat([gpu,tpu,cpu,other])\nhardware.index.names = ['hardware']\nfig = px.bar(hardware, x=hardware, y=hardware.index, color=hardware.index, orientation='h',\n             height=500,)\nfig.update_layout(title=\"H A R D W A R E  U S E D  \",\n                  xaxis_title=\"Count\",\n                  yaxis_title='Hardware')\nfig.show()","44698939":"#How many times have you used a TPU\ntpu_use = data.iloc[:,52]\ntpu_use = tpu_use.value_counts()\ntpu_use = pd.DataFrame(tpu_use)\ntpu_use.columns = ['count']\ntpu_use.index.names = ['tpu']\n#Percentage\nfig = px.pie(tpu_use , values='count' , title='HOW MANY TIMES KAGGLERS HAVE USED A TPU?',height=700,names=tpu_use.index,color_discrete_sequence=px.colors.sequential.RdBu,hole=0.3)\nfig.show()","e67485c4":"#libraries use\nlibraries = data.iloc[:,53:65]\nlibraries.columns = ['library1','library2','library3','library4','library5','library6','library7','library8','library9','library10','library11','library12']\nmatplotlib = libraries ['library1'].value_counts()\nseaborn = libraries ['library2'].value_counts()\nplotly = libraries ['library3'].value_counts()\nggplot = libraries ['library4'].value_counts()\nshiny = libraries ['library5'].value_counts()\nd3 = libraries ['library6'].value_counts()\naltair = libraries ['library7'].value_counts()\nbokeh = libraries ['library8'].value_counts()\ngeoplotlib = libraries ['library9'].value_counts()\nfolium = libraries ['library10'].value_counts()\nnone = libraries ['library11'].value_counts()\nother = libraries ['library12'].value_counts()\n\n#Concat Dataframes\nlibraries = pd.concat([matplotlib,seaborn,plotly,ggplot,shiny,d3,altair,bokeh,geoplotlib,folium])\nlibraries.columns = ['libraryCount']\nlibraries.index.names = ['library']\n\n#plot\nfig = px.bar(libraries, x=libraries, y=libraries.index, color=libraries.index, orientation='h',\n             height=500)\nfig.update_layout(title=\"L I B R A R I E S  U S E D  B Y  K A G G L E R S\",\n                  xaxis_title=\"Count\",\n                  yaxis_title='Library')\nfig.show()","1e189d27":"#Which of the following machine learning frameworks do you use on a regular basis? \nml_frameworks = data.iloc[:,66:82]\nml_frameworks.columns = ['frameworks1','frameworks2','frameworks3','frameworks4','frameworks5','frameworks6','frameworks7','frameworks8','frameworks9','frameworks10','frameworks11','frameworks12','frameworks13','frameworks14','frameworks15','frameworks16']\nskn = ml_frameworks['frameworks1'].value_counts()\ntf = ml_frameworks['frameworks2'].value_counts()\nkeras = ml_frameworks['frameworks3'].value_counts()\npytorch = ml_frameworks['frameworks4'].value_counts()\nfast = ml_frameworks['frameworks5'].value_counts()\nmxnet = ml_frameworks['frameworks6'].value_counts()\nxgboost = ml_frameworks['frameworks7'].value_counts()\nlightgbm = ml_frameworks['frameworks8'].value_counts()\ncatboost = ml_frameworks['frameworks9'].value_counts()\nprophet = ml_frameworks['frameworks10'].value_counts()\nh2o = ml_frameworks['frameworks11'].value_counts()\ncaret = ml_frameworks['frameworks12'].value_counts()\ntidymodels = ml_frameworks['frameworks13'].value_counts()\njax = ml_frameworks['frameworks14'].value_counts()\nnone = ml_frameworks['frameworks15'].value_counts()\nother = ml_frameworks['frameworks16'].value_counts()\n\n#dataframe concat\nml_frameworks = pd.concat([skn,tf,keras,pytorch,fast,mxnet,xgboost,catboost,prophet,h2o,caret,tidymodels,jax,none,other])\nml_frameworks.index.names = ['frameworks']\nml_frameworks.columns = ['frameworkcount']\n\n#plot\nfig = px.bar(ml_frameworks , x=ml_frameworks , y=ml_frameworks.index, color=ml_frameworks.index, orientation='h',\n             height=700)\nfig.update_layout(title=\"MACHINE LEARNING FRAMEWORK COUNT BY USERS\",\n                  xaxis_title=\"Count\",\n                  yaxis_title='FRAMEWORKS')\nfig.show()\n","2715d45f":"#Machine learning frameworks WordCloud\nallwords = ' '.join([framework for framework in ml_frameworks.index])\nwordcloud = WordCloud(width=600, height=300, random_state=21, max_font_size=119,max_words=300,background_color='skyblue').generate(allwords)\nplt.figure(figsize=(12,8))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","7f158fe7":"#Which of the following natural language processing (NLP) methods do you use on a regular basis\nnlp = data.iloc[:,101:107]\nnlp.columns = ['nlp1','nlp2','nlp3','nlp4','nlp5','nlp6']\nword_embeddings = nlp['nlp1'].value_counts()\nenconder_decoder = nlp['nlp2'].value_counts()\ncontextualized_embeddings = nlp['nlp3'].value_counts()\ntransformer_language = nlp['nlp4'].value_counts()\nnone = nlp['nlp5'].value_counts()\nother = nlp['nlp6'].value_counts()\n\n#Concat\nnlp = pd.concat([word_embeddings ,enconder_decoder,contextualized_embeddings,transformer_language,none,other])\nnlp.index.names = ['Natural Language Processing']\n\n#Barchart\nfig = px.bar(nlp  , y=nlp , x=nlp.index,text=nlp ,color=nlp.index,orientation='v')\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide',height=1000,title='NATURAL LANGUAGE PROCESSING TECNHIQUES COUNT BY USERS')\nfig.show()\n","2e579346":"jovian.commit(project=project_name)","b1659626":"# Q3 - In which country do have most kaggle user?\n","57b64a00":"# CurrentRole","4a18d3bd":"# Q2 - What is Kaggle User gender?\n","4cae01d8":"# Q12 - Which of the following machine learning frameworks do you use on a regular basis? ","71feeedf":"# Q11 - Most common libraries use","f834ae21":"# Q1 - What is Kaggle User Age-Group's (# years)?\n","3603241f":"Extracting the Information about ","fe83724a":"# Q13 - Which of the following natural language processing (NLP) methods do you use on a regular basis","8b397c31":"# Q8 - Which types of specialized hardware used?","af52fead":"#  Type of computing platform","8f5935da":"# Q6 - hosted notebook products ","47e4ba8e":"# Q4 - Education ?","46079e2f":"## Main Data:\n- kaggle_survey_2020_responses.csv: 39+ questions and 20,036 responses :\n\n   - Responses to multiple choice questions (only a single choice can be selected) were recorded in individual columns. Responses to multiple selection questions (multiple choices can be selected) were split into multiple columns (with one column per answer choice).\n   \n## Supplementary Data:\n- kaggle_survey_2020_answer_choices.pdf: list of answer choices for every question\n    - With footnotes describing which questions were asked to which respondents.\n        kaggle_survey_2020_methodology.pdf: a description of how the survey was conducted\n","6f08f171":"# Q10 - How many times have you used a TPU","18907d3a":"# Q5 - Most used Programming Language?","c1c7792c":"## Extracting the Information about people","13bc4542":"# Survey Methodology\n\n*  The 2020 Kaggle DS & ML Survey received 20,036 usable responses from participants in 171\n    different countries and territories. If a country or territory received less than 50 respondents, we\n    grouped them into a group named \u201cOther\u201d for anonymity.\n*  An invitation to participate in the survey was sent to the entire Kaggle community (anyone\n    opted-in to the Kaggle Email List). The survey was also promoted on the Kaggle website and on\n    the Kaggle Twitter channel.\n*  The survey was live from 10\/07\/2020 to 10\/30\/2020. We allowed respondents to complete the\n    survey at any time during that window.\n*  Responses to multiple choice questions (only a single choice can be selected) were recorded in\n    individual columns. Responses to multiple selection questions (multiple choices can be selected)\n    were split into multiple columns (with one column per answer choice).\n*  To protect the respondents\u2019 privacy, free-form text responses were not included in the public\n    survey dataset, and the order of the rows was shuffled (responses are not displayed in\n    chronological order).\n*  We excluded respondents that were flagged by our survey system as \u201cSpam\u201d.\n*  The survey data was released under a CC 2.0 license:\n"}}