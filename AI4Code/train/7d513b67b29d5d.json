{"cell_type":{"5feaa388":"code","d9e17d87":"code","29ec22d5":"code","59a1bdc0":"code","102c98b3":"code","01854a8e":"code","24fc5280":"code","ca73617e":"code","fc926ceb":"code","941e4c49":"code","f70ed226":"code","6488c120":"code","56e6e088":"code","46f5bd83":"code","ddb75a8b":"code","0db794eb":"code","9b6fe39f":"code","6d50e0d2":"code","2e70529a":"code","868ef99b":"code","8ef8a6c3":"code","6551958a":"code","249d465e":"code","5b0b9a8d":"code","b03b1483":"code","4f198672":"code","56f27376":"code","f27c7eb6":"code","8830da5a":"code","480414b9":"code","7a17c062":"code","9c4040e9":"code","95efe3ac":"code","9c339c60":"code","146414d9":"code","7ff84f17":"code","827f7f33":"code","34f00730":"code","8ebc872c":"code","47fa13fd":"code","11a69b34":"code","b6800c20":"code","a427e940":"code","87f95450":"code","aa8cd76e":"code","cc4121cf":"code","25832f9a":"code","23dee775":"code","684449ca":"code","382a5455":"markdown","432cffa2":"markdown","63bfb9ac":"markdown","e36177e8":"markdown","f86148bb":"markdown","c3a8e6e1":"markdown","2bfd5cb7":"markdown","0fdcad8d":"markdown","35b895b0":"markdown","dbc11e56":"markdown","896b24b7":"markdown","d8734002":"markdown","83ede967":"markdown","1e8e8630":"markdown","2e6b7526":"markdown","84eb1a28":"markdown","d0f54b9c":"markdown","0d3baa30":"markdown","d42c96e7":"markdown","dcf23b48":"markdown","c67b1dbd":"markdown","a367e3f9":"markdown","692cfd51":"markdown","a6b0995c":"markdown","c686b53a":"markdown","6ae17c50":"markdown","10fcbfc3":"markdown","3034e9aa":"markdown","4e550771":"markdown","80e5cd93":"markdown"},"source":{"5feaa388":"import pandas as pd\nimport urllib\nimport json\nimport unidecode\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport datetime\nimport numpy as np\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans","d9e17d87":"customers = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_customers_dataset.csv')\ngeolocation = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_geolocation_dataset.csv')\norders = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_orders_dataset.csv')\norder_items = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_order_items_dataset.csv')","29ec22d5":"customers.sample(5)","59a1bdc0":"customers.isna().mean()","102c98b3":"customers.groupby('customer_unique_id').size().sort_values(ascending=False)","01854a8e":"geolocation.sample(5)","24fc5280":"geolocation.isna().mean()","ca73617e":"geolocation['geolocation_city'].unique()","fc926ceb":"def pretty_string(column):\n    column_space = ' '.join(column.split())\n    return unidecode.unidecode(column_space.lower())","941e4c49":"geolocation['geolocation_city'] = geolocation['geolocation_city'].apply(pretty_string)","f70ed226":"geolocation.groupby('geolocation_zip_code_prefix').size().sort_values(ascending=False)","6488c120":"geolocation[geolocation['geolocation_zip_code_prefix'] == 24220].head()    ","56e6e088":"other_state_geolocation = geolocation.groupby(['geolocation_zip_code_prefix'])['geolocation_state'].nunique().reset_index(name='count')\nother_state_geolocation[other_state_geolocation['count']>= 2].shape\nmax_state = geolocation.groupby(['geolocation_zip_code_prefix','geolocation_state']).size().reset_index(name='count').drop_duplicates(subset = 'geolocation_zip_code_prefix').drop('count',axis=1)","46f5bd83":"geolocation_silver = geolocation.groupby(['geolocation_zip_code_prefix','geolocation_city','geolocation_state'])[['geolocation_lat','geolocation_lng']].median().reset_index()\ngeolocation_silver = geolocation_silver.merge(max_state,on=['geolocation_zip_code_prefix','geolocation_state'],how='inner')","ddb75a8b":"customers_silver = customers.merge(geolocation_silver,left_on='customer_zip_code_prefix',right_on='geolocation_zip_code_prefix',how='inner')","0db794eb":"def plot_brasil_map(data):\n    brazil = mpimg.imread(urllib.request.urlopen('https:\/\/i.pinimg.com\/originals\/3a\/0c\/e1\/3a0ce18b3c842748c255bc0aa445ad41.jpg'),'jpg')\n    ax = data.plot(kind=\"scatter\", x=\"geolocation_lng\", y=\"geolocation_lat\", figsize=(10,10), alpha=0.3,s=0.3,c='blue')\n    plt.axis('off')\n    plt.imshow(brazil, extent=[-73.98283055, -33.8,-33.75116944,5.4])\n    plt.show()","9b6fe39f":"plot_brasil_map(customers_silver.drop_duplicates(subset='customer_unique_id'))","6d50e0d2":"order_items.sample(5)","2e70529a":"order_items.isna().mean()","868ef99b":"order_items.groupby('order_id').size().sort_values(ascending=False)","8ef8a6c3":"order_items_silver = order_items.groupby('order_id').agg({'price':sum,'freight_value':sum,'shipping_limit_date':max }).reset_index()","6551958a":"sns.scatterplot(x='price',y='freight_value',data=order_items_silver)","249d465e":"order_items_silver.describe()","5b0b9a8d":"percentil_freight_value = order_items_silver['freight_value'].quantile(0.99)\norder_items_silver = order_items_silver[(order_items_silver['price'] <= 5000) & (order_items_silver['freight_value'] <= percentil_freight_value)]","b03b1483":"order_items_silver.describe()","4f198672":"order_items_silver","56f27376":"orders.info()","f27c7eb6":"columns_timestamp = ['order_purchase_timestamp','order_approved_at',\n                     'order_delivered_carrier_date', 'order_delivered_customer_date', 'order_estimated_delivery_date']\nfor column in columns_timestamp:\n    orders[column] = pd.to_datetime(orders[column])","8830da5a":"orders['diff_delivery_days'] = (orders['order_estimated_delivery_date'] - orders['order_delivered_customer_date']).dt.days","480414b9":"orders.groupby(orders['diff_delivery_days'] < 0).size()","7a17c062":"print(orders['diff_delivery_days'].describe())\nsns.histplot(x='diff_delivery_days', data=orders, kde=True)","9c4040e9":"orders[(orders['diff_delivery_days'] > min(orders['diff_delivery_days'])) & (orders['diff_delivery_days'] < max(orders['diff_delivery_days'])) ]","95efe3ac":"orders_silver = orders.merge(order_items_silver,on='order_id',how='inner')","9c339c60":"def plot_ts_decompose(decompose,figsize=(12,8)):\n    fig, ax = plt.subplots(4,1,figsize=figsize)\n    sns.lineplot(data=decompose.observed,x=decompose.observed.index,y=decompose.observed,ax=ax[0])\n    sns.lineplot(data=decompose.trend,x=decompose.trend.index,y=decompose.trend,ax=ax[1])\n    sns.lineplot(data=decompose.seasonal,x=decompose.seasonal.index,y=decompose.seasonal,ax=ax[2])\n    sns.lineplot(data=decompose.resid,x=decompose.resid.index,y=decompose.resid,ax=ax[3])\n    plt.tight_layout()","146414d9":"orders_silver['month_year_purchase'] = orders_silver['order_purchase_timestamp'].dt.to_period('M')\norder_purchase_timestamp = orders_silver.groupby('month_year_purchase').size()\norder_purchase_timestamp.index = order_purchase_timestamp.index.astype('datetime64[ns]')\n\ndecompose = seasonal_decompose(order_purchase_timestamp,model='additive',period=12, extrapolate_trend=12)\nplot_ts_decompose(decompose)","7ff84f17":"orders_customers = customers.merge(orders_silver, on='customer_id', how='inner')","827f7f33":"max_date = max(orders_customers['order_purchase_timestamp']) + datetime.timedelta(days=1)","34f00730":"rfm_data = orders_customers.groupby('customer_unique_id').agg({\n    'order_purchase_timestamp': lambda x: (max_date - x.max()).days,\n    'customer_id':'count',\n    'price':'sum'\n}).reset_index()\nrfm_data.columns =['customer_id','recency','frequency','monetary']","8ebc872c":"print(rfm_data[rfm_data['frequency']>1].shape[0] \/ rfm_data.shape[0])\nprint(rfm_data['frequency'].describe())\nsns.histplot(x='frequency', data=rfm_data, kde=True)","47fa13fd":"print(rfm_data['monetary'].describe())\nsns.histplot(x='monetary', data=rfm_data, kde=True)","11a69b34":"print(rfm_data['recency'].describe())\nsns.histplot(x='recency', data=rfm_data, kde=True)","b6800c20":"def k_means_group(data, n_clusters, random_state, asc=False, log_transf=False, standard_tranf=False):\n    \n    data_temp = data.copy()\n    if log_transf:\n        data_temp = np.log(data_temp) + 1\n        \n    if standard_tranf:\n        scaler = StandardScaler()\n        scaler = scaler.fit(data_temp)\n        data_temp = scaler.transform(data_temp)\n        \n    kmeans_sel = KMeans(n_clusters=n_clusters, random_state=random_state).fit(data_temp)\n    \n    cluster_group = data.assign(cluster = kmeans_sel.labels_)\n    \n    mean_group = cluster_group.groupby('cluster').mean().reset_index()\n    mean_group = mean_group.sort_values(by=mean_group.columns[1],ascending=asc)\n    mean_group['cluster_set'] = [i for i in range(n_clusters, 0, -1) ]\n    \n    cluster_map = mean_group.set_index('cluster').to_dict()['cluster_set']\n    \n    return cluster_group['cluster'].map(cluster_map)","a427e940":"r_labels = k_means_group(rfm_data[['recency']],5,1,asc=True)\nf_labels = k_means_group(rfm_data[['frequency']],5,1)\nm_labels = k_means_group(rfm_data[['monetary']],5,1)\n\nrfm_data = rfm_data.assign(R = r_labels, F = f_labels, M = m_labels) ","87f95450":"rfm_data.groupby('R')['recency'].describe()","aa8cd76e":"rfm_data.groupby('F')['frequency'].describe()","cc4121cf":"rfm_data.groupby('M')['monetary'].describe()","25832f9a":"def get_segment(data):\n    mean_fm = (data['F'] + data['M']) \/ 2\n    \n    if (data['R'] >= 4 and data['R'] <= 5) and (mean_fm >= 4 and mean_fm <= 5):\n        return 'Champions'\n    if (data['R'] >= 2 and data['R'] <= 5) and (mean_fm >= 3 and mean_fm <= 5):\n        return 'Loyal Customers'\n    if (data['R'] >= 3 and data['R'] <= 5) and (mean_fm >= 1 and mean_fm <= 3):\n        return 'Potential Loyslist'\n    if (data['R'] >= 4 and data['R'] <= 5) and (mean_fm >= 0 and mean_fm <= 1):\n        return 'New Customers'\n    if (data['R'] >= 3 and data['R'] <= 4) and (mean_fm >= 0 and mean_fm <= 1):\n        return 'Promising'\n    if (data['R'] >= 2 and data['R'] <= 3) and (mean_fm >= 2 and mean_fm <= 3):\n        return 'Customer Needing Attention'\n    if (data['R'] >= 2 and data['R'] <= 3) and (mean_fm >= 0 and mean_fm <= 2):\n        return 'About to Sleep'\n    if (data['R'] >= 0 and data['R'] <= 2) and (mean_fm >= 2 and mean_fm <= 5):\n        return 'At Risk'\n    if (data['R'] >= 0 and data['R'] <= 1) and (mean_fm >= 4 and mean_fm <= 5):\n        return \"Can't Lose Then\"\n    if (data['R'] >= 1 and data['R'] <= 2) and (mean_fm >= 1 and mean_fm <= 2):\n        return 'Hibernating'\n    return 'Lost'","23dee775":"rfm_data['segment'] = rfm_data.apply(get_segment,axis=1)","684449ca":"plt.figure(figsize=(10,5))\npercentage = (rfm_data['segment'].value_counts(normalize=True)* 100).reset_index(name='percentage')\ng = sns.barplot(x=percentage['percentage'],y=percentage['index'], data=percentage,palette=\"GnBu_d\")\nsns.despine(bottom = True, left = True)\nfor i, v in enumerate(percentage['percentage']):\n    g.text(v,i+0.20,\"  {:.2f}\".format(v)+\"%\", color='black', ha=\"left\")\ng.set_ylabel('Segmentation')\ng.set(xticks=[])\nplt.show()","382a5455":"<a id='segmentation_insights'><\/a>\n### Conclusion:\n\n**70.55% - Potential Loyslist:**\n\nThese are recent buyers, spend a good amount and have bought more than once.\n\n<u>CRM Strategy<\/u>:\n\n* Offer a loyalty program;\n* Keep them engaged;\n* Personalized and other product recommendations.\n\n**14.93% - About to Sleep:**\n\nThese are customers who haven't bought in a long time, but may still buy again.\n\n<u>CRM Strategy<\/u>:\n\n* Offer discounts;\n* Recommendation of popular products.\n\n**11.42% - Hibernating:**\n\nThese are customers who have bought a long time ago, only a few times and have spent little\n\n<u>CRM Strategy<\/u>:\n\n* Standard communication for sending offers;\n* Offer relevant products and good deals.\n\n**1.44% - Customer Needing Attetion:**\n\nThese are customers who have recently purchased, however are still in doubt whether they will make their next purchase from the company or a competitor.\n\n<u>CRM Strategy<\/u>:\n\n* Promotional campaigns for a limited time;\n* Product recommendations based on their behavior;\n* Show the importance of buying with the company.\n\n**1.21% - At Risk:**\n\nThese are customers who have spent very little money and buy frequently, but have not bought for a long time\n\n<u>CRM Strategy<\/u>:\n\n* Send personalized communications and other messages to reconnect;\n* Offer good deals.\n\n**0.45% - Loyal Customers:**\n\nThese are customers who spend well and often.\n\n<u>CRM Strategy<\/u>:\n\n* Personalized communication;\n* Avoid mass mailing of offers;\n* Offer few products, but present products that they are likely to be interested in;\n* Ask for product reviews.\n\n**0.01% - Champions:**\n\nThese are customers who have bought recently, buy often, and spend a lot.\n\n<u> CRM Strategy<\/u>:\n\n* Special offers, products and discounts for these customers so they feel valued;\n* Ask for reviews and feedbacks constantly;\n* Avoid sending massive amounts of offers;\n* Personalized communication;\n* Give rewards.\n\n<a id='references'><\/a>\n### References:\n\nMatt Clarke (2021) How to assign RFM scores with quantile-based discretization. Retrieved from: https:\/\/towardsdatascience.com\/customer-segmentation-arvato-bertelsmann-project-44e73210a1b7\n\nPaulo Vasconsellos (2017) O que \u00e9 RFM e como aplica-lo ao seu time de Customer Success. Retrieved from: https:\/\/medium.com\/maxmilhas-tech\/o-que-%C3%A9-rfm-e-como-aplic%C3%A1-lo-ao-seu-time-de-customer-service-b9c35817ed01\n\nLeif Arne Bakker (2020) Know your customers with RFM. Retrieved from: https:\/\/futurice.com\/blog\/know-your-customers-with-rfm\n\nExponea (2020) RFM Segmentation. Retrieved from: https:\/\/docs.exponea.com\/docs\/rfm-segmentation\n\nMatt Clarke(2021) How to assign RFM scores with quantile-based discretization. Retrieved from: https:\/\/practicaldatascience.co.uk\/data-science\/how-to-assign-rfm-scores-with-quantile-based-discretization","432cffa2":"As we can see, there is the same zip code prefix with more than 1 location. This problem may have occurred because only the zip code prefix was kept. To solve this problem we will use the median value of the latitude and longitude of each point","63bfb9ac":"As we can see, there is a seasonality in the series in which in the months of December there is a drop in the purchase of products and in the months of January, March, and May there is an increase. Other fact the series is a trend to incresing.","e36177e8":"As we can see, there are duplicates of the city with accents in the names.","f86148bb":"We decided to remove orders with a price over R$ 5000 and for the freight value we used logic as a value that is far away from [99% percentile](https:\/\/www.analyticsvidhya.com\/blog\/2021\/05\/feature-engineering-how-to-detect-and-remove-outliers-with-python-code\/).","c3a8e6e1":"**Geolocation:**","2bfd5cb7":"As we can see, an order can have more than one product.","0fdcad8d":"We will remove the max and min value of difference.","35b895b0":"There are 8 zip codes with two or more states. To solve this problem, we will count the states by zip code and use the majority state for this zip code.","dbc11e56":"There are no null values for order_items","896b24b7":"<a id='data_insights'><\/a>\n\n**Conclusions:**\n* There are more customers in the southeast and south of the country. Other information, there are more customers in cities that are capitals (S\u00e3o Paulo, Rio de Janeiro, Porto Alegre and otheres);\n* The average order price is R\\\\$ 132 and 50% of orders cost less than R\\\\$85. The average freight value is R\\\\$21.41 and 50% of the orders have a freight value of R\\\\$ 17;\n* The delivery date needs to be revised because the average difference between estimated and actual delivery is 10 days, which is a bit high. Another fact is that only 7.81% of the actual delivery was lower than the estimated delivery;\n* There is a seasonal buying series in which in the months of December there is a drop in the purchase of products and in the months of January, March and May there is an increase;\n* Only 3% of customers made more than one purchase;\n* An average monetary customer is R\\\\$136 and 75% of the customers spend less than R\\\\$150 and the maximum was R\\\\$4690;\n* The 25% of customers have a recency of 3.9 months with an average of 8 months. With a purchase frequency equivalent to 1 and with this recency this indicates that customers make very specific purchases.\n\n<a id='customer_segmentation'><\/a>\n## Customer Segmentation\n\nAs a algorithm the RFM was used, for being an easy-to-understand model.\n\n<a id='rfm'><\/a>\nThe term RFM comes from the junction of three acronyms: Recency, Frequency, and Monetarity, seeking to better understand the customer and verify when was his last purchase, how many times he has bought and how much he has spent with the company.\n\nRecency(R) Days since the customer's last purchase\nFrequency(F) Number of products bought by the customer\nMonetarity(M) Total spent on purchases\n\nCustomer Score:\n\nThe customer score ranges from 1 to 5, where the higher this number, the better. This score is assigned for each acronym independently:\n\n* The more recent the customer's purchase the higher the Recency (R) score.\n* The more purchases the customer makes, the higher the Frequency score (F)\n* The more the customer spends on purchases, the higher the score the customer will have Monetarity(M)\n\nThis definition of each score can be given through inference, i.e. some business definition or by quintile.\n\n\n#### Segmentation calculation:\n\nThe calculation to know which segmentation the customer is in is given by averaging the F and M scores and the separate R value.\n\n| Segment Name               | Range of R values | Range of F and M Average |\n|----------------------------|-------------------|--------------------------|\n| Champions                  |       4 - 5       |           4 - 5          |\n| Loyal Customers            |       2 - 5       |           3 - 5          |\n| Potential Loyalist         |       3 - 5       |           1 - 3          |\n| New Customers              |       4 - 5       |           0 - 1          |\n| Promising                  |       3 - 4       |           0 - 1          |\n| Customers Needing Attetion |       2 - 3       |           2 - 3          |\n| About to Sleep             |       2 - 3       |           0 - 2          |\n| At Risk                    |       0 - 2       |           2 - 5          |\n| Can't Lose Them            |       0 - 1       |           4 - 5          |\n| Hibernating                |       1 - 2       |           1 - 2          |\n| Lost                       |       0 - 2       |           0 - 2          |\n\nsource: [O que \u00e9 RFM e como aplic\u00e1-lo ao seu time de Customer Success](https:\/\/medium.com\/maxmilhas-tech\/o-que-%C3%A9-rfm-e-como-aplic%C3%A1-lo-ao-seu-time-de-customer-service-b9c35817ed01)\n\nWe have only 3% of customers who have made more than one purchase, i.e., we have skewed data. For this problem, we use the k-means algorithm to group the data according to their similar characteristics.","d8734002":"Since we have more than 1 product per order, we need to sum the price and the shipping value and get the maximum value of the shipping_limit_date for analysis.","83ede967":"Only 7,87% is above of estimated delivery","1e8e8630":"As you can see, we have some outliers. how come the shipping is over R\\\\$ 500 and which order costs over R\\\\$4000?","2e6b7526":"An average monetary customer is R\\\\$136 and 75% of the customers spend less than R\\\\$150 and the maximum was R\\\\$4690.","84eb1a28":"<a id='customers'><\/a>\n### Customers","d0f54b9c":"There are no null values for geolocation","0d3baa30":"### Summary:\n* [Problem definition](#problem_definition)\n* [Data Analysis](#data_analysis)\n    * [Customers](#customers)\n    * [Orders](#orders)\n    * [Data insights](#data_insights)\n* [Customer segmentation](#customer_segmentation)\n    * [RFM](#rfm)\n    * [Segmentation insights](#segmentation_insights)\n* [References](#references)","d42c96e7":"<a id='orders'><\/a>\n## Orders","dcf23b48":"As we can see, most customers have a recency between 5 to 8 months.","c67b1dbd":"<a id='problem_definition'><\/a>\n## Problem Definition\nThis is a Brazilian ecommerce public dataset of orders made at Olist Store available at [Kaggle](https:\/\/www.kaggle.com\/olistbr\/brazilian-ecommerce). The dataset has information of 100k orders from 2016 to 2018 made at multiple marketplaces in Brazil.  From the analysis of the information, answer the following questions:\n\n* Who are these customers?\n* How would you classify them?\n* What would be a possible CRM campaign strategy?\n\n**Data Diagram:**\n\n<img src=\"https:\/\/i.imgur.com\/HRhd2Y0.png\" width=760 height=760 \/>\n\n\n<a id='data_analysis'><\/a>\n## Data Analysis","a367e3f9":"As we can see, most customers have an average monetary value of R\\$ 58.29. Which is not very good for business because the bigger the better.","692cfd51":" As we can see, the average order price is R\\\\$ 132 and 50% of orders cost less than R\\\\$85. The average freight value is R\\\\$21.41 and 50% of the orders have a freight value of R\\\\$ 17.","a6b0995c":"There are no null values for customers","c686b53a":"Note that the frequency of customers is the big problem for the classification, because only 3% of customers made more than one purchase but is something that's very common in ecommerce.","6ae17c50":" Because only 3% of customers made more than one purchase but is something that's very common in ecommerce.","10fcbfc3":"As we can see, there are more customers in the southeast and south of the country. Other information, there are more customers in cities that are capitals (S\u00e3o Paulo, Rio de Janeiro, Porto Alegre and otheres).","3034e9aa":"There are duplicate customer_unique_id, because the dataset is per order. Where client_id is the key to the order dataset. Each order has a unique client_id.","4e550771":"As we can see the 25% of customers have a recency of 3.9 months with an average of 8 months. With a purchase frequency equivalent to 1 and with this recency this indicates that customers make very specific purchases.","80e5cd93":"As we can see, the average difference between the estimated delivery and the actual delivery is 10 days, which is a bit high. Another fact is that an order was delivery 6 month later and other order was a high estimated date."}}