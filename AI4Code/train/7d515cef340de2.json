{"cell_type":{"a95d6d66":"code","82d9f537":"code","81a11a0b":"code","70b29006":"code","65cd4221":"code","82f30853":"code","5b369529":"code","d344861c":"code","e1cfdcae":"code","30439b7c":"code","0f77e3e9":"markdown","a3de7239":"markdown","d1467942":"markdown","4dcb0b82":"markdown","bd4c6e63":"markdown","d310cd40":"markdown","1ec347a1":"markdown"},"source":{"a95d6d66":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n\n# TensorFlow and tf.keras\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils import np_utils\n# Helper libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport glob\nfrom sklearn.preprocessing import LabelEncoder\nfrom keras.preprocessing.image import img_to_array\nfrom keras.preprocessing.image import load_img\nfrom keras.applications import imagenet_utils\nprint(tf.__version__)\n\nimport random\nimport os\n\n# Any results you write to the current directory are saved as output.","82d9f537":"! git clone https:\/\/github.com\/tuenv2kProPTIT\/AIF-HOME-WORK-PROTPTIT.git","81a11a0b":"IMG_WIDTH=64\nIMG_HEIGHT=64\nlink_to_data_folder='\/kaggle\/working\/AIF-HOME-WORK-PROTPTIT\/contest-2\/data\/contest-2\/final_train\/final_train'\nlink_to_test_folder='\/kaggle\/working\/AIF-HOME-WORK-PROTPTIT\/contest-2\/data\/contest-2\/final_test'\nmax_data=7169\nmax_test=1000","70b29006":"train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale = 1.\/255)\ntest_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale = 1.\/255)\ntraining_data = train_datagen.flow_from_directory(link_to_data_folder,\n      target_size = (64, 64),\n      batch_size = max_data,\n      class_mode = 'categorical')\ntest_data=test_datagen.flow_from_directory(link_to_test_folder,\n      target_size = (64, 64),\n      batch_size = max_test,\n      shuffle=False)\n(x_train,y_train)=training_data[0]\n(x_test,file_name_test)=test_data[0][0],test_data.filenames","65cd4221":"import pandas as pd\ndata = pd.read_csv(\"\/kaggle\/working\/AIF-HOME-WORK-PROTPTIT\/contest-2\/solve (5).csv\")\ny_test=data['class'].values.reshape(-1,1)\n# print(y_test)\nfor i in range(1000):\n  if y_test[i][0]==33:\n    y_test[i][0]=5\n    continue\n\n  if y_test[i][0]==0:\n    y_test[i][0]=0\n    continue\n  if y_test[i][0]==10:\n      y_test[i][0]=1\n      continue\n\n  if y_test[i][0]==14:\n      y_test[i][0]=2\n      continue\n  if y_test[i][0]==2:\n    y_test[i][0]=3\n    continue\n  if y_test[i][0]==22:\n    y_test[i][0]=4\n    continue\n  if y_test[i][0]==34:\n    y_test[i][0]=6\n    continue\n  y_test[i][0]=7\nnp.random.seed(24+11+2000) # :V\ny_test= np_utils.to_categorical(y_test,num_classes=8,dtype='int')\nlabel=np.random.choice(x_train.shape[0], 10, replace=False)\nX=x_train[label]\nY=y_train[label]\nfig,ax=plt.subplots(5,2,figsize=(12,12))\nfor i in range(5):\n    ax[i,0].imshow(X[i*2])\n    ax[i,0].set_title('label train is : {}'.format(np.argmax(Y[i*2])))\n    ax[i,1].imshow(X[i*2+1])\n    ax[i,1].set_title('label train is : {}'.format(np.argmax(Y[i*2+1])))\nfig.tight_layout(pad=3.0)\n\n","82f30853":"model =tf.keras.Sequential(\n    [\n      tf.keras.layers.Conv2D(filters=32,kernel_size=(3,3),input_shape=(64,64,3),padding='same',activation='relu'),\n      tf.keras.layers.Conv2D(filters=32,kernel_size=(3,3),activation='relu'),\n      tf.keras.layers.MaxPooling2D(pool_size=(2,2)),\n      tf.keras.layers.Dropout(0.3),\n      tf.keras.layers.Conv2D(filters=64,kernel_size=(3,3),activation='relu'),\n      tf.keras.layers.Conv2D(filters=64,kernel_size=(3,3),activation='relu'),\n      tf.keras.layers.MaxPooling2D(pool_size=(2,2)),\n      tf.keras.layers.Conv2D(filters=64,kernel_size=(3,3),activation='relu'),\n      tf.keras.layers.Conv2D(filters=64,kernel_size=(3,3),activation='relu'),\n      tf.keras.layers.MaxPooling2D(pool_size=(2,2)),\n      tf.keras.layers.Flatten(),\n      tf.keras.layers.Dense(512),\n      tf.keras.layers.BatchNormalization(center=True, scale=False),\n      tf.keras.layers.Activation('relu'),\n      tf.keras.layers.Dropout(0.3),\n      tf.keras.layers.Dense(8, activation='softmax')\n    ]\n)","5b369529":"model.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\ncheckpoint_cb = tf.keras.callbacks.ModelCheckpoint(\"\/kaggle\/working\/AIF-HOME-WORK-PROTPTIT\/contest-2\/my_keras_model.h5\",\n        save_best_only=True)\n\nmodel.summary()\n","d344861c":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)\n\ntestgen=ImageDataGenerator()","e1cfdcae":"H = model.fit(datagen.flow(x_train, y_train, batch_size=32), \n                        validation_data=(x_test, y_test),\n                        epochs=15,callbacks=[checkpoint_cb])","30439b7c":"\npath_index_test=[p.split(os.path.sep)[-1] for p in file_name_test]\n\n\n\nXX=[0,10,14,2,22,33,34,6]\nmodel = tf.keras.models.load_model(\"\/kaggle\/working\/AIF-HOME-WORK-PROTPTIT\/contest-2\/my_keras_model.h5\")\ntest_predict=np.argmax(model.predict(x_test),axis=1)\nfor i in range(1000):\n    test_predict[i]=XX[test_predict[i]]\noutput = pd.DataFrame({'class': test_predict, 'path':path_index_test})\noutput.to_csv('my_submission1.csv', index=False)\nprint(\"Your submission was successfully saved!\")","0f77e3e9":"Load data va test","a3de7239":"# <font color='red'>CNN cho b\u00e0i to\u00e1n g\u00e1n nh\u00e3n bi\u1ec3n b\u00e1o giao th\u00f4ng<\/font>\n\n---\n\n[Author:Tu\u1ec7 Nguy\u1ec5n](https:\/\/www.facebook.com\/profile.php?id=100016184949641)\n\nLast Commit : <font color='red'>21\/3\/2020<\/font>\n\n---","d1467942":"# C\u1ea3m \u01a1n c\u00e1c anh v\u00e0 c\u00e1c b\u1ea1n \u0111\u00e3 mentor h\u1ed7 tr\u1ee3 em","4dcb0b82":"# <font color='Orange'>Model<\/font>\n\n---\n\nEm d\u00f9ng type ch\u00ednh c\u1ee7a CNN:\n\n(CONV2D +CONV2D +max_pooling +dropout )x3 + fully_conected +  batchnorm + 1 relu + sofmaxt.\n\nEm tham kh\u1ea3o \u0111\u01b0\u1ee3c dropout sau m\u00f4i m\u1ed9t block conv t\u1eeb Ho\u00e0i :v.\n\nC\u00f2n batchnorm \u0111\u1ec3 tr\u00e1nh data c\u00f3 xu h\u01b0\u1edbng l\u1ec7ch v\u1ec1 ph\u00eda tr\u00e1i ho\u1eb7c ph\u1ea3i tr\u01b0\u1edbc khi \u0111i v\u00e0o h\u00e0m phi tuy\u1ebfn t\u00ednh.\u0110\u00e1ng l\u1ebd em c\u00f2n t\u00e1ch CONV2D : CONV2D(liner)+batchnorm+relu nh\u01b0ng v\u1ec1 sau th\u1ea5y d\u00e0i qu\u00e1 n\u00ean th\u00f4i :v.\n\n![Imgur](https:\/\/i.imgur.com\/C8A7tDF.png) \n\nNhin \u1ea3nh s\u1ebd th\u1ea5y c\u00f3 3 TH:\n\nN\u1ebfu data s\u1eb5n c\u00f3 qu\u00e1 l\u1ec7ch v\u1ec1 ph\u00eda tr\u00e1i th\u00ec output s\u1ebd g\u1ea7n 0, n\u1ebfu qu\u00e1 l\u1ec7ch v\u1ec1 ph\u1ea3i th\u00ec output g\u1ea7n 1, c\u00e1ch t\u1ed1t nh\u1ea5t l\u00e0 \u0111\u01b0a n\u00f3 v\u1ec1 gi\u1eefa.\nTuy nhi\u00ean th\u00ec \u0111\u01b0a v\u1ec1 ntn th\u00ec kh\u00f4ng bi\u1ebft \u0111\u01b0\u1ee3c m\u00e0 ph\u1ea3i th\u00eam 2 parmas \u0111\u1ec3 model t\u1ef1 h\u1ecdc c\u00e1ch \u0111\u01b0a v\u1ec1 chu\u1ea9n.","bd4c6e63":"# <font color='Orange'>Th\u01b0 Vi\u1ec7n<\/font> \n\n---","d310cd40":"COMPARE folder cho kh\u1edbp v\u1edbi kaggle","1ec347a1":"# <font color='Orange'>Data bao g\u1ed3m file ch\u1ee9a model - test_Acc - data_predict<\/font>\n\n---\n\n> Em c\u00f3 file solve(5) l\u00e0 file ch\u00ednh x\u00e1c k\u1ebft qu\u1ea3 1.0.\n\n---"}}