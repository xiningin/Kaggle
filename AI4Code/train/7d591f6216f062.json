{"cell_type":{"be61cf24":"code","442e4e6a":"code","00adf012":"code","c3c477b8":"code","b89f4134":"code","93b5e425":"code","943ce8a7":"code","80e2f057":"code","7fcc83f3":"code","393f74c0":"code","6e3b34b5":"code","b45a229f":"code","c8a0de51":"code","a785e065":"code","a541aa4a":"code","b5e35c7a":"code","b5ab1f4d":"code","b131f907":"code","d30ac933":"code","b2533193":"code","d62127c0":"code","ccbdc859":"code","ba862d6b":"code","4bbc3c0e":"code","4698af7d":"code","16910d59":"code","254050df":"code","9ad2cb55":"markdown","cf6d83ac":"markdown","3b51bbf6":"markdown","42249ef4":"markdown","2b6a1244":"markdown","ad538bf4":"markdown","6a94bf91":"markdown","77d2a1d2":"markdown","da0d14e5":"markdown","1f7be7c6":"markdown","81d5ee77":"markdown","ee5135b9":"markdown","f6c0df71":"markdown","de784883":"markdown","66e58587":"markdown"},"source":{"be61cf24":"import os\nimport random\nimport glob\nimport gc\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import ConfusionMatrixDisplay, confusion_matrix, classification_report\nfrom sklearn.utils.class_weight import compute_class_weight\n\nimport tensorflow as tf\nfrom tensorflow.keras.utils import image_dataset_from_directory\nfrom keras.preprocessing.image import load_img, ImageDataGenerator\nfrom keras.models import *\nfrom keras.layers import *\nfrom keras.callbacks import *\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.applications.densenet import DenseNet121, preprocess_input","442e4e6a":"BATCH_SIZE = 32\n\nSEED = 666\ntf.random.set_seed(SEED)\nnp.random.seed(SEED)\nos.environ[\"PYTHONHASHSEED\"] = str(SEED)                      \nrandom.seed(666)","00adf012":"TRAIN_PATH = \"..\/input\/chest-xray-pneumonia\/chest_xray\/train\"\nVAL_PATH = \"..\/input\/chest-xray-pneumonia\/chest_xray\/val\"\nTEST_PATH = \"..\/input\/chest-xray-pneumonia\/chest_xray\/test\"","c3c477b8":"print(f\"Normal X-Rays From Validation Set: {len(os.listdir(VAL_PATH + '\/NORMAL'))} \")\n\nprint(f\"Pneumonia X-Rays From Validation Set: {len(os.listdir(VAL_PATH + '\/PNEUMONIA'))} \")","b89f4134":"train_normal = pd.DataFrame({\"path\": os.listdir(TRAIN_PATH + \"\/NORMAL\"), \"label\": \"NORMAL\"})\ntrain_normal[\"path\"] = train_normal[\"path\"].apply(lambda x: TRAIN_PATH + \"\/NORMAL\/\" + x)\ntrain_pneumonia = pd.DataFrame({\"path\": os.listdir(TRAIN_PATH + \"\/PNEUMONIA\"), \"label\": \"PNEUMONIA\"})\ntrain_pneumonia[\"path\"] = train_pneumonia[\"path\"].apply(lambda x: TRAIN_PATH + \"\/PNEUMONIA\/\" + x)\n\ntrain_df = pd.concat([train_normal, train_pneumonia])\n\nval_normal = pd.DataFrame({\"path\": os.listdir(VAL_PATH + \"\/NORMAL\"), \"label\": \"NORMAL\"})\nval_normal[\"path\"] = val_normal[\"path\"].apply(lambda x: VAL_PATH + \"\/NORMAL\/\" + x)\nval_pneumonia = pd.DataFrame({\"path\": os.listdir(VAL_PATH + \"\/PNEUMONIA\"), \"label\": \"PNEUMONIA\"})\nval_pneumonia[\"path\"] = val_pneumonia[\"path\"].apply(lambda x: VAL_PATH + \"\/PNEUMONIA\/\" + x)\n\nval_df = pd.concat([val_normal, val_pneumonia])","93b5e425":"train_data, val_data = train_test_split(train_df, \n                                        test_size = 0.1, \n                                        random_state = SEED, \n                                        stratify = train_df[\"label\"], \n                                        shuffle = True)\n\nval_data = pd.concat([val_df, val_data])\n\nprint(f\"Training set size after re-splitting training data: {len(train_data)}\")\nprint(f\"Validation set size after re-splitting training data: {len(val_data)}\")","943ce8a7":"fig, ax = plt.subplots(figsize = (6, 6), facecolor = \"#e5e5e5\")\nax.set_facecolor(\"#e5e5e5\")\n\nsns.countplot(data = train_data, x = \"label\", ax = ax, color = \"#101820\")\n\nax.set_title(\"Countplot for Train Labels\")\n\nsns.despine()\nplt.show()","80e2f057":"fig = plt.figure(1, figsize = (16, 16))\nfig.suptitle(\"NORMAL X-Rays\")\n\nfor i in range(36):\n    \n    ind = random.randint(0, len(train_data.query(\"label == 'NORMAL'\")))\n\n    plt.subplot(6, 6, i + 1)\n    image = load_img(train_data.query(\"label == 'NORMAL'\").reset_index()[\"path\"][ind])\n    plt.imshow(image)\n    plt.title(train_data.query(\"label == 'NORMAL'\").reset_index()[\"label\"][ind])\n    plt.axis(\"off\")\n    \nplt.tight_layout()\nplt.show()","7fcc83f3":"fig = plt.figure(1, figsize = (16, 16))\nfig.suptitle(\"Pneumonia X-Rays\")\n\nfor i in range(36):\n    \n    ind = random.randint(0, len(train_data.query(\"label == 'PNEUMONIA'\")))\n\n    plt.subplot(6, 6, i + 1)\n    image = load_img(train_data.query(\"label == 'PNEUMONIA'\").reset_index()[\"path\"][ind])\n    plt.imshow(image)\n    plt.title(train_data.query(\"label == 'PNEUMONIA'\").reset_index()[\"label\"][ind])\n    plt.axis(\"off\")\n    \nplt.tight_layout()\nplt.show()","393f74c0":"datagen = ImageDataGenerator(\n    brightness_range = (0.2, 1), \n    zoom_range = 0.2,\n    width_shift_range = 0.1,\n    height_shift_range = 0.1,\n    horizontal_flip = True,\n    rescale = 1.\/255\n)\n\nsample_df = train_data.sample(1)\n\nsample_generator = datagen.flow_from_dataframe(\n    dataframe = sample_df,\n    x_col = \"path\",\n    y_col = \"label\",\n    class_mode = \"categorical\",\n    target_size = (150, 150),\n    seed = 666\n)\n\nplt.figure(figsize = (14, 8))\n\nfor i in range(50):\n    \n    plt.subplot(5, 10, i + 1)\n    \n    for X, y in sample_generator:\n\n        plt.imshow(X[0])\n        plt.axis(\"off\")\n        break\n        \nplt.tight_layout()\nplt.show()","6e3b34b5":"train_datagen = ImageDataGenerator(\n    brightness_range = (0.2, 1), \n    zoom_range = 0.2,\n    width_shift_range = 0.1,\n    height_shift_range = 0.1,\n    horizontal_flip = True,\n    preprocessing_function = preprocess_input\n)\n\nval_datagen = ImageDataGenerator(\n    preprocessing_function = preprocess_input\n)\n\ntest_datagen = ImageDataGenerator(\n    preprocessing_function = preprocess_input\n)","b45a229f":"train_generator = train_datagen.flow_from_dataframe(\n    dataframe = train_data,\n    x_col = \"path\",\n    y_col = \"label\",\n    target_size = (150, 150),\n    class_mode = \"categorical\",\n    batch_size = BATCH_SIZE,\n    shuffle = True,\n    seed = SEED\n)\n\nval_generator = val_datagen.flow_from_dataframe(\n    dataframe = val_data,\n    x_col = \"path\",\n    y_col = \"label\",\n    target_size = (150, 150),\n    class_mode = \"categorical\",\n    batch_size = BATCH_SIZE,\n    shuffle = True,\n    seed = SEED\n)\n\ntest_generator = test_datagen.flow_from_directory(\n    directory = TEST_PATH,\n    target_size = (150, 150),\n    class_mode = \"categorical\",\n    batch_size = BATCH_SIZE,\n    shuffle = False,\n    seed = SEED\n)","c8a0de51":"class_weights = compute_class_weight(\"balanced\", classes = np.unique(train_data.label), y = train_data.label)\n\nclass_weights = {0: class_weights[0], 1: class_weights[1]}","a785e065":"base_model = DenseNet121(include_top = False, weights = \"imagenet\", input_shape = (150, 150, 3))\n\n    \ndef dense121_pretrained():\n    \n    model = Sequential(\n        [\n            base_model,\n            Flatten(),\n            Dense(128, activation = \"relu\"),\n            Dropout(0.25),\n            Dense(2, activation = \"softmax\")\n        ]\n    )\n    \n    return model","a541aa4a":"tf.keras.backend.clear_session()\n\nmodel = dense121_pretrained()\n\nmodel.summary()","b5e35c7a":"reduce_lr = ReduceLROnPlateau(\n    monitor = \"val_accuracy\", \n    patience = 2,\n    verbose = 1, \n    factor = 0.3, \n    min_lr = 0.000000001,\n    cooldown = 1\n)\n\nearly_stopping = EarlyStopping(\n    monitor = \"val_accuracy\",\n    patience = 10,\n    verbose = 1,\n    mode = \"max\",\n)\n\ncheckpoint = ModelCheckpoint(\n    monitor = \"val_accuracy\",\n    filepath = \"pneumonia_densenet121_.{epoch:02d}-{val_accuracy:.6f}.hdf5\",\n    verbose = 1,\n    save_best_only = True, \n    save_weights_only = True\n)\n\nmodel.compile(loss = \"categorical_crossentropy\", optimizer = \"adam\", metrics = \"accuracy\")\n\nhistory = model.fit(\n    train_generator,\n    epochs = 50, \n    batch_size = BATCH_SIZE,\n    validation_data = val_generator,\n    validation_steps = val_data.shape[0] \/\/ BATCH_SIZE,\n    steps_per_epoch = train_data.shape[0] \/\/ BATCH_SIZE,\n    callbacks = [reduce_lr, early_stopping, checkpoint],\n    class_weight = class_weights\n)","b5ab1f4d":"tf.keras.backend.clear_session()\n\nmodel = dense121_pretrained()\n\nmodel.load_weights(\".\/pneumonia_densenet121_.14-0.955078.hdf5\")","b131f907":"fig, axes = plt.subplots(1, 2, figsize = (12, 4))\n\nsns.lineplot(x = range(len(history.history[\"loss\"])), y = history.history[\"loss\"], ax = axes[0], label = \"Training Loss\")\nsns.lineplot(x = range(len(history.history[\"loss\"])), y = history.history[\"val_loss\"], ax = axes[0], label = \"Validation Loss\")\n\nsns.lineplot(x = range(len(history.history[\"accuracy\"])), y = history.history[\"accuracy\"], ax = axes[1], label = \"Training Accuracy\")\nsns.lineplot(x = range(len(history.history[\"accuracy\"])), y = history.history[\"val_accuracy\"], ax = axes[1], label = \"Validation Accuracy\")\naxes[0].set_title(\"Loss\"); axes[1].set_title(\"Accuracy\")\n\nsns.despine()\nplt.show()","d30ac933":"val_generator = val_datagen.flow_from_dataframe(\n    dataframe = val_data,\n    x_col = \"path\",\n    y_col = \"label\",\n    target_size = (150, 150),\n    class_mode = \"categorical\",\n    batch_size = BATCH_SIZE,\n    shuffle = False,\n    seed = SEED\n)","b2533193":"val_pred = model.predict(val_generator, steps = np.ceil(val_data.shape[0] \/ BATCH_SIZE))\nval_data.loc[:, \"val_pred\"] = np.argmax(val_pred, axis = 1)\n\nlabels = dict((v, k) for k, v in val_generator.class_indices.items())\n\nval_data.loc[:, \"val_pred\"] = val_data.loc[:, \"val_pred\"].map(labels)","d62127c0":"fig, ax = plt.subplots(figsize = (9, 6))\n\ncm = confusion_matrix(val_data[\"label\"], val_data[\"val_pred\"])\n\ndisp = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [\"Normal\", \"Pneunomia\"])\ndisp.plot(cmap = plt.cm.Blues, ax = ax)\n\nax.set_title(\"Validation Set\")\nplt.show()","ccbdc859":"print(classification_report(val_data[\"label\"], val_data[\"val_pred\"]))","ba862d6b":"test_normal = pd.DataFrame({\"path\": os.listdir(TEST_PATH + \"\/NORMAL\"), \"label\": \"NORMAL\"})\ntest_normal[\"path\"] = test_normal[\"path\"].apply(lambda x: TEST_PATH + \"\/NORMAL\/\" + x)\ntest_pneumonia = pd.DataFrame({\"path\": os.listdir(TEST_PATH + \"\/PNEUMONIA\"), \"label\": \"PNEUMONIA\"})\ntest_pneumonia[\"path\"] = test_pneumonia[\"path\"].apply(lambda x: TEST_PATH + \"\/PNEUMONIA\/\" + x)\n\ntest_df = pd.concat([test_normal, test_pneumonia])","4bbc3c0e":"test_generator = test_datagen.flow_from_dataframe(\n    dataframe = test_df,\n    x_col = \"path\",\n    y_col = \"label\",\n    target_size = (150, 150),\n    class_mode = \"categorical\",\n    batch_size = 1,\n    shuffle = False,\n    seed = SEED\n)","4698af7d":"test_pred = model.predict(test_generator)\ntest_df.loc[:, \"test_pred\"] = np.argmax(test_pred, axis = 1)\n\nlabels = dict((v, k) for k, v in test_generator.class_indices.items())\n\ntest_df.loc[:, \"test_pred\"] = test_df.loc[:, \"test_pred\"].map(labels)","16910d59":"fig, ax = plt.subplots(figsize = (9, 6))\n\ncm = confusion_matrix(test_df[\"label\"], test_df[\"test_pred\"])\n\ndisp = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [\"Normal\", \"Pneunomia\"])\ndisp.plot(cmap = plt.cm.Blues, ax = ax)\n\nax.set_title(\"Test Set\")\nplt.show()","254050df":"print(classification_report(test_df[\"label\"], test_df[\"test_pred\"]))","9ad2cb55":"# Getting Datasets","cf6d83ac":"# Data Augmentation","3b51bbf6":"In \"val\" folder, we only have 8 images. It is not enough for validation, that's why I will re-split training data for increasing validation data.","42249ef4":"# Visualizing Sample X-Rays","2b6a1244":"# Learning Curves","ad538bf4":"# Test Set Performance","6a94bf91":"# Readings & Resources","77d2a1d2":"For medical problems, especially imbalanced ones, accuracy is not best metric. We need to give priority to precision and recall. For this problem, recall is ratio of successfully detected pneumonia observations over all pneumonia observations.\n\nShortly, false negatives have bigger cost.\n\nWe have good score for both precision and recall. Our model for performs well.","da0d14e5":"https:\/\/paperswithcode.com\/method\/densenet\n\nhttps:\/\/www.kaggle.com\/c\/ranzcr-clip-catheter-line-classification\/discussion\/212856\n\nhttps:\/\/www.kaggle.com\/jonaspalucibarbosa\/chest-x-ray-pneumonia-cnn-transfer-learning\n\nhttps:\/\/www.kaggle.com\/madz2000\/pneumonia-detection-using-cnn-92-6-accuracy\n\nhttps:\/\/www.kaggle.com\/rajmehra03\/a-comprehensive-guide-to-transfer-learning\n\n\nMy similar notebooks:\n\nhttps:\/\/www.kaggle.com\/mustafacicek\/mnist-cnn-data-augmentation\n\nhttps:\/\/www.kaggle.com\/mustafacicek\/mnist-lenet-5-implementation-on-keras\n\nhttps:\/\/www.kaggle.com\/mustafacicek\/dogs-cats-vgg16-implementation-transfer-learning\n\nhttps:\/\/www.kaggle.com\/mustafacicek\/alexnet-implementation-on-keras-flowers","1f7be7c6":"# Transfer Learning with DenseNet121 Model","81d5ee77":"# Introduction","ee5135b9":"I chose DenseNet121 with respect to belowe discussion.\n\nhttps:\/\/www.kaggle.com\/c\/ranzcr-clip-catheter-line-classification\/discussion\/212856","f6c0df71":"# Conclusion","de784883":"# Validation Set Performance","66e58587":"In this notebook, I will use a pre-trained model for predicting X-ray results. We have three folders that are contains normal and pneumonia chest X-rays. Let's start it."}}