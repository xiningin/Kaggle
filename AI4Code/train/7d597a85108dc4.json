{"cell_type":{"501078b5":"code","2619cc6c":"code","2cd9acd5":"code","ba8c53a2":"code","8a914c5d":"code","c3f4f9d0":"code","c1012b04":"code","021d45d0":"code","24251481":"code","062d7320":"code","07aae96b":"code","40ab4d6b":"code","22f0e855":"code","9cd757a3":"code","5c574891":"code","9049a2af":"code","97a02c72":"code","f1abd003":"code","45ec0a38":"code","d3eca461":"code","0c29a873":"code","1c8a17fc":"code","b3e8f39e":"code","04fdaaaa":"code","75dabc4e":"code","8515934a":"code","418da487":"code","fad324f0":"code","6eeaa890":"code","d8bc419e":"code","66f699aa":"code","cdc2dc8d":"code","e88c6583":"code","b3acde55":"code","f405f247":"code","7e1cf47b":"code","ba303e09":"code","60783500":"code","a7e7b74d":"code","ba036f18":"code","d3dbe247":"code","2b94084b":"code","6962d1a4":"code","6a42548c":"markdown"},"source":{"501078b5":"import numpy as np\nimport pandas as pd\nimport os\nprint(os.listdir(\"\/kaggle\/input\/\"))\n#os.getcwd()","2619cc6c":"from fastai.conv_learner import *\nfrom fastai.dataset import *\n\nfrom pathlib import Path\nimport json\ntorch.cuda.set_device(0)","2cd9acd5":"PATH = Path('\/kaggle\/input\/train')\nlist(PATH.iterdir())","ba8c53a2":"MASKS_FN = 'train.csv'\nTRAIN_DN = 'images'\nMASKS_DN = 'masks'\n\nPATH1 = Path('\/kaggle\/input\/')\nmasks_csv = pd.read_csv(PATH1\/MASKS_FN)\nmasks_csv.head()","8a914c5d":"#https:\/\/realpython.com\/python-pathlib\/\nimport collections\nPATH1 = Path('\/kaggle\/input\/train\/masks')\ncollections.Counter(p.suffix for p in PATH1.iterdir())","c3f4f9d0":"PATH2 = Path('\/kaggle\/input\/train\/images')\ncollections.Counter(p.suffix for p in PATH2.iterdir())","c1012b04":"PATH3 = Path('\/kaggle\/input\/test\/images')\ncollections.Counter(p.suffix for p in PATH3.iterdir())","021d45d0":"masks_csv.isnull().sum()","24251481":"#masks_csv=masks_csv.dropna()\nmasks_csv['id']=masks_csv['id']+\".png\"","062d7320":"masks_csv.count()","07aae96b":"def show_img(im, figsize=None, ax=None, alpha=None):\n    if not ax: fig,ax = plt.subplots(figsize=figsize)\n    ax.imshow(im, alpha=alpha)\n    ax.set_axis_off()\n    return ax","40ab4d6b":"#Image.open(PATH\/TRAIN_DN\/f'4875705fb0.png')#.size","22f0e855":"!rm -rf \/tmp\/mask_128\n!rm -rf \/tmp\/train_128 \n!rm -rf \/tmp\/test_128 \n!mkdir -p \/tmp\/mask_128\n!mkdir -p \/tmp\/train_128\n!mkdir -p \/tmp\/test_128\nPATH4 = Path('\/kaggle\/input\/train\/masks')\ni=os.listdir(PATH4)\nfor j in range(4000):\n     Image.open(PATH4\/i[j]).resize((128,128)).save('\/tmp\/mask_128\/'+i[j])\n        \nPATH4=Path('\/kaggle\/input\/train\/images')\nfor j in range(4000):\n     Image.open(PATH4\/i[j]).resize((128,128)).save('\/tmp\/train_128\/'+i[j])\n\nPATH4=Path('\/kaggle\/input\/test\/images')\ni=os.listdir(PATH4)\nfor j in range(18000):\n     Image.open(PATH4\/i[j]).resize((128,128)).save('\/tmp\/test_128\/'+i[j])\n\nTRAIN_DN=Path('\/tmp\/train_128')\nMASKS_DN=Path('\/tmp\/mask_128')\nTEST_DN=Path('\/tmp\/test_128')\n","9cd757a3":"ims = [open_image(PATH\/TRAIN_DN\/f'{i}') for i in masks_csv['id'].head(30)]\nim_masks = [open_image(PATH\/MASKS_DN\/f'{i}') for i in masks_csv['id'].head(30)]\nfig, axes = plt.subplots(5, 6, figsize=(18, 12))\n\nfor i,ax in enumerate(axes.flat):\n    ax = show_img(ims[i], ax=ax)\n    show_img(im_masks[i][...,0], ax=ax, alpha=0.5)\nplt.tight_layout(pad=0.1)","5c574891":"x_names = np.array([Path(TRAIN_DN)\/o for o in masks_csv['id']])\ny_names = np.array([Path(MASKS_DN)\/o for o in masks_csv['id']])\nlen(x_names)\/\/5","9049a2af":"a=os.listdir('\/tmp\/test_128')\ntest_names = np.array([Path(TEST_DN)\/o for o in a])\ntest_name = (test_names ,test_names)","97a02c72":"val_idxs = list(range(len(x_names)\/\/5))\n((val_x,trn_x),(val_y,trn_y)) = split_by_idx(val_idxs, x_names, y_names)\nlen(val_x),len(trn_x)","f1abd003":"sz = 128\nbs = 64","45ec0a38":"class MatchedFilesDataset(FilesDataset):\n    def __init__(self, fnames, y, transform, path):\n        self.y=y\n        assert(len(fnames)==len(y))\n        super().__init__(fnames, transform, path)\n    def get_y(self, i): return open_image(os.path.join(self.path, self.y[i]))\n    def get_c(self): return 0\n\n\naug_tfms = [RandomRotate(4, tfm_y=TfmType.CLASS),\n            RandomFlip(tfm_y=TfmType.CLASS),\n            RandomLighting(0.05, 0.05)]\n\ntfms = tfms_from_model(resnet34, sz, crop_type=CropType.NO, tfm_y=TfmType.CLASS, aug_tfms=aug_tfms)\ndatasets = ImageData.get_ds(MatchedFilesDataset, (trn_x,trn_y), (val_x,val_y), tfms,test = test_name, path=PATH)\nmd = ImageData(PATH, datasets, bs, num_workers=8, classes=None)","d3eca461":"denorm = md.trn_ds.denorm\nx,y = next(iter(md.aug_dl))\nx = denorm(x)","0c29a873":"fig, axes = plt.subplots(5, 6, figsize=(12, 10))\nfor i,ax in enumerate(axes.flat):\n    ax=show_img(x[i], ax=ax)\n    show_img(y[i], ax=ax, alpha=0.5)\nplt.tight_layout(pad=0.1)","1c8a17fc":"# Model\nclass StdUpsample(nn.Module):\n    def __init__(self, nin, nout):\n        super().__init__()\n        self.conv = nn.ConvTranspose2d(nin, nout, 2, stride=2)\n        self.bn = nn.BatchNorm2d(nout)\n        \n    def forward(self, x): return self.bn(F.relu(self.conv(x)))\n\nflatten_channel = Lambda(lambda x: x[:,0])\nsimple_up = nn.Sequential(\n    nn.ReLU(),\n    StdUpsample(512,256),\n    StdUpsample(256,256),\n    StdUpsample(256,256),\n    StdUpsample(256,256),\n    nn.ConvTranspose2d(256, 1, 2, stride=2),\n    flatten_channel\n)","b3e8f39e":"# IOU\/Jaccard index - metrics\ndef jacc(pred, targs):\n    pred = (pred>0).float()\n    dice = 2. * (pred*targs).sum() \/ (pred+targs).sum()\n    return dice\/(2-dice)","04fdaaaa":"md.path = Path('\/tmp')\nmodels =  ConvnetBuilder (resnet34, 0, 0, 0, custom_head=simple_up)\nlearn = ConvLearner(md, models)\nlearn.opt_fn=optim.Adam\nlearn.crit=nn.BCEWithLogitsLoss()\nlearn.metrics=[accuracy_thresh(0.5)\n              # ,jacc\n              ]","75dabc4e":"learn.summary()","8515934a":"learn.lr_find()\nlearn.sched.plot()","418da487":"lr=1e-1\nlearn.fit(lr,1,cycle_len=5,use_clr=(10,5))","fad324f0":"learn.save('tmp')\nlearn.load('tmp')\npy,ay = learn.predict_with_targs()\nay.shape","6eeaa890":"show_img(ay[8]);","d8bc419e":"show_img(py[8]>0);","66f699aa":"learn.unfreeze()\n#learn.bn_freeze(True)\nlrs = np.array([lr\/100,lr\/10,lr])\/10\nlearn.fit(lrs,1,cycle_len=10,use_clr=(10,10))","cdc2dc8d":"learn.save('0')\nx,y = next(iter(md.val_dl))\npy = to_np(learn.model(V(x)))","e88c6583":"i=52\nax = show_img(denorm(x)[i])\nshow_img(py[i]>0, ax=ax, alpha=0.5);","b3acde55":"ax = show_img(denorm(x)[i])\nshow_img(y[i], ax=ax, alpha=0.5);","f405f247":"# Predict on Test data\nout=learn.predict(is_test=True)\nout.shape","7e1cf47b":"#j=452\nj=14550\nImage.open(PATH\/TEST_DN\/a[j])","ba303e09":"columns = ['id']\nb= pd.DataFrame(a,columns=columns)\nshow_img(out[j]>0)\n#a[1]","60783500":"# Resize Predictions to 101x101\nresult_array = np.zeros((18000,101,101),dtype=float)\n\nimport cv2\nfor i in range(18000):\n    img = out[i]\n    result_array[i] = cv2.resize(img, dsize=(101, 101), interpolation=cv2.INTER_CUBIC)>0.5\n","a7e7b74d":"# Save Predications to disk\n!rm -rf \/tmp\/output1\/*\n!mkdir -p \/tmp\/output1\n\nfor i in range(18000):\n    plt.imsave('\/tmp\/output1\/'+a[i], result_array[i])\n","ba036f18":"OUT_PATH = Path('\/tmp\/output1')\nims = [open_image(TEST_DN\/f'{i}') for i in b['id'].head(40)]\nim_masks = [open_image(OUT_PATH\/f'{i}')  for i in b['id'].head(40)]\nfig, axes = plt.subplots(5, 8, figsize=(18, 12))\n\nfor i,ax in enumerate(axes.flat):\n    ax = show_img(ims[i], ax=ax)\n    show_img(im_masks[i][...,0], ax=ax, alpha=0.5)\nplt.tight_layout(pad=0.1)","d3dbe247":"def rle_encode(im):\n    '''\n    im: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    '''\n    pixels = im.flatten()\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)","2b94084b":"#Write encoded value to list\ntemp_list = []\nfor i in range(18000):\n    temp_list.append(rle_encode(result_array[i]))","6962d1a4":"# Merge mask with Dataframe and write csv to disk\nb['rle_mask']=pd.Series(temp_list).values\nb['id'] = b['id'].astype(str).str.replace(r\".png\", '')\nb.to_csv('\/kaggle\/working\/submission.csv', index = False, header = True)","6a42548c":"**Plese Up-Vote if you find the kernel to be useful !**"}}