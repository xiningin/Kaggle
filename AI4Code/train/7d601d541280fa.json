{"cell_type":{"88bc4a53":"code","6a4711ac":"code","d6c863b4":"code","3ef2d75b":"code","ad110340":"code","126dbb83":"code","e8a58804":"code","20660e11":"code","8acfd549":"code","157cd3be":"code","c6af7cdb":"code","904c6ba1":"code","291f825f":"code","8b64aec9":"code","262c7013":"code","625d779a":"code","1463a6ba":"code","3fa6dc2c":"code","5f7c3338":"code","af2ae64b":"code","eefad09f":"code","8e073632":"code","06f3ae7a":"code","ce61f413":"markdown","e05d7ea7":"markdown","46e12e38":"markdown","e1495839":"markdown","412ed18a":"markdown","3b133fb6":"markdown","5a4dc3c9":"markdown","a037f501":"markdown","a51f8a0b":"markdown","768c4ef4":"markdown","12b16c30":"markdown","a40e7ba2":"markdown","8de2b85a":"markdown","cef5543c":"markdown","f29fef0d":"markdown","30c8678b":"markdown","55b60ee2":"markdown","cbcba7c4":"markdown","1cd96794":"markdown","0ee9a76b":"markdown","02a17cff":"markdown","e08ff548":"markdown","f772480d":"markdown","5d5d5c87":"markdown","9fa76998":"markdown"},"source":{"88bc4a53":"IS_LOCAL = False\nimport numpy as np\nimport pandas as pd\nfrom skimage.io import imread\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom glob import glob\nif(IS_LOCAL):\n    import pydicom as dicom\nelse:\n    import dicom\nimport os","6a4711ac":"if(IS_LOCAL):\n    PATH=\"..\/input\/siim-medical-image\/\"\nelse:\n    PATH=\"..\/input\/\"\nprint(os.listdir(PATH))","d6c863b4":"data_df = pd.read_csv(os.path.join(PATH,\"overview.csv\"))","3ef2d75b":"print(\"CT Medical images -  rows:\",data_df.shape[0],\" columns:\", data_df.shape[1])","ad110340":"data_df.head()","126dbb83":"print(\"Number of TIFF images:\", len(os.listdir(os.path.join(PATH,\"tiff_images\"))))","e8a58804":"tiff_data = pd.DataFrame([{'path': filepath} for filepath in glob(PATH+'tiff_images\/*.tif')])","20660e11":"def process_data(path):\n    data = pd.DataFrame([{'path': filepath} for filepath in glob(PATH+path)])\n    data['file'] = data['path'].map(os.path.basename)\n    data['ID'] = data['file'].map(lambda x: str(x.split('_')[1]))\n    data['Age'] = data['file'].map(lambda x: int(x.split('_')[3]))\n    data['Contrast'] = data['file'].map(lambda x: bool(int(x.split('_')[5])))\n    data['Modality'] = data['file'].map(lambda x: str(x.split('_')[6].split('.')[-2]))\n    return data","8acfd549":"tiff_data = process_data('tiff_images\/*.tif')","157cd3be":"tiff_data.head(10)","c6af7cdb":"print(\"Number of DICOM files:\", len(os.listdir(PATH+\"dicom_dir\")))","904c6ba1":"dicom_data = process_data('dicom_dir\/*.dcm')","291f825f":"dicom_data.head(10)","8b64aec9":"def countplot_comparison(feature):\n    fig, (ax1, ax2, ax3) = plt.subplots(1,3, figsize = (16, 4))\n    s1 = sns.countplot(data_df[feature], ax=ax1)\n    s1.set_title(\"Overview data\")\n    s2 = sns.countplot(tiff_data[feature], ax=ax2)\n    s2.set_title(\"Tiff files data\")\n    s3 = sns.countplot(dicom_data[feature], ax=ax3)\n    s3.set_title(\"Dicom files data\")\n    plt.show()","262c7013":"countplot_comparison('Contrast')","625d779a":"countplot_comparison('Age')","1463a6ba":"def show_images(data, dim=16, imtype='TIFF'):\n    img_data = list(data[:dim].T.to_dict().values())\n    f, ax = plt.subplots(4,4, figsize=(16,20))\n    for i,data_row in enumerate(img_data):\n        if(imtype=='TIFF'): \n            data_row_img = imread(data_row['path'])\n        elif(imtype=='DICOM'):\n            data_row_img = dicom.read_file(data_row['path'])\n        if(imtype=='TIFF'):\n            ax[i\/\/4, i%4].matshow(data_row_img,cmap='gray')\n        elif(imtype=='DICOM'):\n            ax[i\/\/4, i%4].imshow(data_row_img.pixel_array, cmap=plt.cm.bone) \n        ax[i\/\/4, i%4].axis('off')\n        ax[i\/\/4, i%4].set_title('Modality: {Modality} Age: {Age}\\nSlice: {ID} Contrast: {Contrast}'.format(**data_row))\n    plt.show()\n","3fa6dc2c":"show_images(tiff_data,16,'TIFF')","5f7c3338":"show_images(dicom_data,16,'DICOM')","af2ae64b":"dicom_file_path = list(dicom_data[:1].T.to_dict().values())[0]['path']\ndicom_file_dataset = dicom.read_file(dicom_file_path)\ndicom_file_dataset","eefad09f":"print(\"Modality: {}\\nManufacturer: {}\\nPatient Age: {}\\nPatient Sex: {}\\nPatient Name: {}\\nPatient ID: {}\".format(\n    dicom_file_dataset.Modality, \n    dicom_file_dataset.Manufacturer,\n    dicom_file_dataset.PatientAge,\n    dicom_file_dataset.PatientSex,\n    dicom_file_dataset.PatientName,\n    dicom_file_dataset.PatientID))","8e073632":"def show_dicom_images(data):\n    img_data = list(data[:16].T.to_dict().values())\n    f, ax = plt.subplots(4,4, figsize=(16,20))\n    for i,data_row in enumerate(img_data):\n\n        data_row_img = dicom.read_file(data_row['path'])\n        modality = data_row_img.Modality\n        age = data_row_img.PatientAge\n        \n        ax[i\/\/4, i%4].imshow(data_row_img.pixel_array, cmap=plt.cm.bone) \n        ax[i\/\/4, i%4].axis('off')\n        ax[i\/\/4, i%4].set_title('Modality: {} Age: {}\\nSlice: {} Contrast: {}'.format(\n         modality, age, data_row['ID'], data_row['Contrast']))\n    plt.show()\n","06f3ae7a":"show_dicom_images(dicom_data)","ce61f413":"Some of the information are anonymized (like Name and ID), which is common standard for public medical data.   \n\nWe will modify the visualization function, to show parameters from the DICOM data instead of the parameters extracted from the image name.  \n\n","e05d7ea7":"# <a id=\"2\">Load packages<\/a>\n\nWe will load the packages for showing tiff images and dicom data.   \n\nFor dicom data, we are loading the **dicom** package.   \n","46e12e38":"## <a id=\"41\">Check data consistency<\/a>\n\nLet's verify if the content in overview.csv is consistent with the data in tiff_images folder.","e1495839":"Parameters setting and files list.","412ed18a":"# <a id=\"6\">References<\/a>\n\n[1] <a href=\"https:\/\/www.kaggle.com\/kmader\">Kevin Mader<\/a>,  <a href=\"https:\/\/www.kaggle.com\/kmader\/show-the-data-in-the-zip-file\">Show the data in the Zip File<\/a>    \n[2] <a href=\"https:\/\/www.kaggle.com\/byrachonok\">Vitaly Byrachonok<\/a>,  <a href=\"https:\/\/www.kaggle.com\/byrachonok\/study-ct-medical-images\">Study CT Medical Images<\/a>    \n[3] Python package for processing DICOM data, dicom-numpy, https:\/\/dicom-numpy.readthedocs.io     \n[4] Viewing DICOM images in Python, https:\/\/pydicom.github.io\/pydicom\/stable\/viewing_images.html     \n[5] DICOM format, https:\/\/en.wikipedia.org\/wiki\/DICOM    \n\n\n\n<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>\n\n\n","3b133fb6":"<h1><center><font size=\"6\">Visualize CT DICOM Data<\/font><\/center><\/h1>\n\n<center><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/en\/thumb\/0\/04\/Brain_CT_scan.jpg\/481px-Brain_CT_scan.jpg\" width=400><\/img><\/center>\n<center>Brain CT Scan image<\/center>\n\n# <a id='0'>Content<\/a>\n\n- <a href='#1'>Introduction<\/a>  \n- <a href='#2'>Load packages<\/a>  \n- <a href='#3'>Read the data<\/a> \n    - <a href='#31'>Read overview data<\/a> \n    - <a href='#32'>Read TIFF data<\/a> \n    - <a href='#33'>Read DICOM data<\/a>  \n- <a href='#4'>Data exploration<\/a>\n    - <a href='#41'>Check data consistency<\/a> \n    - <a href='#42'>Show TIFF images<\/a> \n    - <a href='#43'>Show DICOM data<\/a> \n- <a href='#5'>Conclusions<\/a>\n- <a href='#6'>References<\/a>","5a4dc3c9":"### More about DICOM data\n\nA DICOM file containg much more information than the image itself that we represented. Let's glimpse, for one of the DICOM files, this information. We will read the first dicom file only and show this information.  \nWe use **dicom** package.","a037f501":"\n<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>\n\n\n## <a id=\"43\">Show DICOM data<\/a>\n\nWe will show a subsample of 16 images from the total of 100 images.   \nWe will use grayscale.   \nIdeally, if the **DICOM** images would be a set of slices from a single examen, they could be aggregated using a function like the one shown here: extract_voxel_data - which read the **DICOM** slices (each in a separate file) and aggregate the image data in a **3D voxel tensor**. This will not be the case here, because we are storing slices from different patients and exams (one slice \/ exam \/ patient).\n\nThe following code snapshot shows how tipically a DICOM 2D image subset is used to create a 3D scene.","a51f8a0b":">     # extract voxel data  \n>     def extract_voxel_data(list_of_dicom_files):  \n>         datasets = [dicom.read_file(f) for f in list_of_dicom_files]  \n>          try:  \n>              voxel_ndarray, ijk_to_xyz = dicom_numpy.combine_slices(datasets)  \n>          except dicom_numpy.DicomImportException as e:  \n>          # invalid DICOM data  \n>              raise  \n>          return voxel_ndarray  ","768c4ef4":"We apply the function to show TIFF images.","12b16c30":"# <a id=\"1\">Introduction<\/a>\n\n## Overview  \n\nThe dataset is designed to allow for different methods to be tested for examining the trends in CT image data associated with using contrast and patient age. The basic idea is to identify image textures, statistical patterns and features correlating strongly with these traits and possibly build simple tools for automatically classifying these images when they have been misclassified (or finding outliers which could be suspicious cases, bad measurements, or poorly calibrated machines)\n\n## Data\nThe data are a tiny subset of images from the cancer imaging archive. They consist of the middle slice of all CT images taken where valid age, modality, and contrast tags could be found.   TCIA Archive Link - [https:\/\/wiki.cancerimagingarchive.net\/display\/Public\/TCGA-LUAD](https:\/\/wiki.cancerimagingarchive.net\/display\/Public\/TCGA-LUAD)     \nThe images data is provided both in DICOM and TIFF formats. The images data files are named with a naming convention allowing us to identify some meta-data about the images.\n\n\n\n## DICOM format\n\n**Digital Imaging and Communications in Medicine** (**DICOM**) is the accepted standard for the communication and management of medical imaging information.  **DICOM** is used for archiving and transmitting medical images. It enables the integration of medical imaging devices (radiological scanners), servers, network hardware and **Picture Archiving and Communication Systems** (**PACS**). The standard was widely adopted by hospitals and research centers and is steadly advancing as well toward small practice and cliniques.     \n\n\n\n<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>\n","a40e7ba2":"### Check DICOM data","8de2b85a":"## <a id=\"32\">Read TIFF data<\/a>  \n","cef5543c":"<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>","f29fef0d":"## <a id=\"42\">Show TIFF images<\/a>\n\nWe will show a subsample of 16 images from the total of 100 images.     \nWe will select the first 16 images from the data set.   \nWe will use grayscale.   \nWe define here a generic function to represent both TIFF images and DICOM images.\nFor each file format we use a different processing.","30c8678b":"### Process TIFF data   \n\nWe define a function to process data.   \nWe extract file, ID, age, contrast, modality information from path info.","55b60ee2":"We can extract various fields from the DICOM FileDataset. Here are few examples:  \n* Modality  \n* Manufacturer\n* Patient Age  \n* Patient Sex\n* Patient Name  \n* Patient ID\n\n","cbcba7c4":"\n<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>  \n\n\n# <a id=\"4\">Data exploration<\/a>","1cd96794":"# <a id=\"5\">Conclusion<\/a>\n\nWe demonstrated how we can load and show **TIFF** images.   \nAs well, using **dicom** and **dicom-numpy** packages, we demonstrated how to read and visualize **DICOM** data.   \nWe also explored preliminary the content of a **DICOM** data file and modified the visualization function to use (partially) **DICOM** data for the image attributes.  \n\n\n<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>\n","0ee9a76b":"### Process DICOM data","02a17cff":"Here we show a subset of 16 images.","e08ff548":"\n<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>\n\n\n## <a id=\"33\">Read DICOM data<\/a>\n\n\nWe repeat the same processing for the **DICOM** data.","f772480d":"### Check TIFF data\n\nLet's check the TIFF data, after we extracted the meta info from the file name.","5d5d5c87":"\n<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>\n\n\n# <a id=\"3\">Read the data<\/a>\n\n\n## <a id=\"31\">Read overview data<\/a>","9fa76998":"The values in the 3 data sources are consistent.   \n\n\n\n<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>"}}