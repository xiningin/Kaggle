{"cell_type":{"25941379":"code","1061daac":"code","df01a0c5":"code","ef1b57f1":"code","e4ab1955":"code","e9b6080e":"code","f96c174c":"code","c46238d5":"code","49324c19":"code","90bdaf45":"code","8a62f823":"markdown","d7395198":"markdown","e17a8aa7":"markdown","071590e2":"markdown","a420a42e":"markdown","8cf6d397":"markdown","3c6a22db":"markdown"},"source":{"25941379":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxISEhUSEhIVFRUVFxgYFxUWFhYYFRUVGBUWFxgYFRUYHSggGBslGxcVITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGxAQGy0lHyUtLy0tKy0tLS8tListLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAKoBKAMBIgACEQEDEQH\/xAAbAAACAwEBAQAAAAAAAAAAAAAABAEDBQIGB\/\/EAEAQAAIBAwIEBAMFBQYFBQAAAAECEQADIQQSBTFBURMiYYEGMnEjQlKRoRRicrHwM4KiwdHhBxVDkrIkNJOj8f\/EABoBAAMBAQEBAAAAAAAAAAAAAAABAgMEBQb\/xAAnEQACAgICAgICAgMBAAAAAAAAAQIRAyESMQRBIlETcWGBkbHBMv\/aAAwDAQACEQMRAD8A+xgV5\/jvGLll7ypthLFu4CQvlZrroS0sJEKsAdT6ivQipmoGYfFNcV1VqzuUIyhyDtkkXkQDLAkHcYABMgdJB4bizjXeAdvh4G6Bh2tllTdukOSCRKwQrZmAdq6jSCpAIBGQSMx2I7CptXNwn8x1B6g+9P0T7MbQcTNzVXLYu2zbt7l2x52uAgnbn5LakKzH5naBG0g08H4tcuW77kJce2b2xE2gt4d6+iCAxI3KlvJAkkkYwPRzRNIowtFxVmS6VIvvbsq+1FChrjK7bFO48ysbT5l6zIrrhuuuXWKLctuDZV\/EVPLbusSNrDdkciFncIMnINbRomgDzF\/il\/8AYL2pZVS5bTcEZCQLtmPFESCym6rqO4AImRTXHuJ3bLK1tVuWxad7iqs3QoKgXbYB84XdJSJImMgBt6qbGJT8OR\/CZj8oI9hT9E9MyOLcYaz4GFMlGvnHktMy29w8w2+d1ac4tuI6jU4hZZ7Tom3cylRu5ZEZj0JpmaiiyhDTXyG8K5tDAArBw6mRicyCCCPoetORSnGkHhM0CUhlPUFWDYP1Aps1xZ8ai7Xs2i7IIpC3cFlmVwQjEurBWIBbLqxAMeaWz+L0rQFTWePJwY2rONPqEuCUZWHKVIOexjkfSrYpLV6Tcd6HbcHJu\/7rj7y+nuM1A4jA89q6pHOFLgfQpMiuyGRTWjNwoeiiKi24YBgZBAIPcHINTWhARVNwAuuMiSfpEfqSPy9KuqoYuH95RH1UtI\/xD9aaJZbFEUUnxi\/ct2Xayge4I2oSBuJIECSAWiYBIkwJHOkUNmjaKT4LrBespdBJ3buaG2wIZlKshyrCNpHcGq\/iLWvY0129bjei7gGEgwRggEfzFAGhFTFL6C47Kd+GDMCICkAHG4BmEkQeeQQcTFc8WvtbsXbiRuS27LIkSqFhIkSMd6AGoqq+xEAc2MA9sEk+wH8qzPhjib6hLhfbKXNgABVgPDtt50JO0yzRnK7G61p7ZuCPw\/lLCP5H8hTXZLO7aAAAcgAB9BXUV5z4Q47d1IIvBA4tWboCqVlbviAsPMw27rbAZDYMgYJ9HSGEURWX8Oa979p3ubZF\/UWxtBA22dRctLgk5IQE+pNaGpvrbRnYwqgsT6ASaBllRFZXw3xN79tzdUJdt3Ht3EAYbeTphwDm09s571rUARFFTRQACigUUAFUspUllEgxI6yMSO5iBGOXOrqKLE1ZzbuBhIMiuqrewpzGe4w35jNci6Vw4OPvjIPqQPlPfpTr6Fddl1FCkHIyO9FIoKo1ML9pvCQMlvljoGz3PP19qjV6sJAjc7fKg5t6+g7k4FL29KSRcvHcwyF\/6afwL1P7xz9OVTLIodj4WtlWh1N+8gcPaQHoEZyCDBG4sBzB6Zq+zqmV\/DulZOUcDaH7qRmHHacgj1izSGVB7kn82JqnXgzbO1mVX3MFgnCttMYkBiDA9KzjlbyU+g4\/G0N37QuKyNyYEH6EZpfQ3jm2\/wDaJE\/vD7rj0P6EEUX9bKJ4RBa78hIMBYkuRzgDp3IHWotaRt4d7m+FKjyquGKkzHP5R+tGfjxp9l47GyahXB5Efn\/XcfnVOv0vi2ntEwHRlJ5xuBEx71lNwEh4t3WtpuVoBaSQgQqcjHlDTPPpjPGkn2y22autvMqObYDXAjFEn5mCkqPoSI\/OsrhWs3XVVNS2oU22a7uVB4VwNb2r5VXYSGuTbaT5BygyXOB3Pu32llClzJYBGfaInPlcgmRlZ5tjZsIVVVLFiAAWPNiBBJ+tXyUY12TtsW4e3hsbBxBLW\/3rZMwPVSSI7be9P0vqtMtwQZwZBGGVuhU9DVekuvuNu4QWADBwI3qSRlejA84xkERyHViyqa\/kmUfY5VJxcBP3lgHsQSSPcH\/BV1c3FBEESP6\/WtkZtHU1xesq67XUMDBIYAgkEEGD2IB9q4tkhthM4JBPOAQCD35jP+mbqQJ2c2raqAqgKoEAAQAOwA5VzqdOlxSlxFdTzVgGU9cg4NWUUDK7FhEEIqqCZhQAJ7wOtdXbSupVlDKwgqQCCDzBB5iuqKAKbOktoSURFJCqSqgEqohQY6AYHaps5LHudvssj\/y3VbXK2wJjqZ9+sU7E0VaTRWrQi1bS2MYRVUY5YUVfRUTSGVWLCWwRbRUBJJCgKCxMk46nmTXV6wrqVdVZTzVgCDmRIPqBXYFTQBVa0yKzMqKrOQXYKAXIEAsRliBjNW0UUAFFFFAEKKmgVFAE0UUUAFFFFABSnFC4SVJEEFtu0NsE7tpbAPL2mM03Wfe+2cr\/ANO2fN2e5z2nuq4nufoaTkoq2OKtnfD7VvaHQHzgHc0l2HMbi2fzq3VLKEDt\/Q9+VWE0AVwcny5M1krVCSXjuUD5SOUYx0nqZ\/l15h4UnprKsAxHJ2IyRt83KB9BinIp5muWiMKdbM7S6NbBYhSQfvGCVX8M89gAERPWtGiql0yjof8AuYx9JOKmUuW5dlU10dhxMSJHMSJHtXdUtYEADEciI8p9KgXiMPA\/enyk+\/I+n1yaVX0PlXZfRRRUlBSWsJR0uwSAGVgoJO1oIIAyYZRy6E04TQBVwnxdg1ZzYvpcG5GBEwY6HsR0PoatFZ3EF8P7dcFQN\/Z7YOQ3qBJB6fQmtH1\/Wu+E1NWjGUaKmw49QR9Ov5H\/ACFW1xcthufTIgkEeoI96jTkwQTMEie\/9cvar7RmtMsooopFBRRRQAUUE1FAECpAqQKDQAUUUUAFFFU3Lx3FVUEhZywHPcBjJ5rEx16waALiaKpa2zfMQBMwsyYJiWx+4YHYjIop6AuFFAopAEUUUUAFFFFAEis\/hGbSn8Uufq7Fv86fBpDg4iyg\/DK\/9jFf8qw8j\/waYxwCqdTZLDBIPTJA94q+iuSMnF2i5RTVMT0wAdgvywJzMNPc+n8qcpfSLtlD0yPUGYn1kH8qYqsruRGJVEiKKmiszUg0rrWcRAlfvAQSQcEEHpH9d2qKqMqdkTjyVCljUDHm8p6sR5WEeUt15\/ocmmyagKAIAAHYcvyqkWwrLGAZEDkCBIIHIciMdx2pupPRKuK2XgVNFRUGoEUmeHKv9kzWvRD5f\/jaV\/ICnaKqM5R6YqMvUaC5cDNcZTcA+z2yFRhkMAfvFgPoMd5c4feDjeOThX+m5Rj9P50xWQUNm4pQ3Cm7zIAGEFbhECJA3bczAyK68OZytSM5x6o2aKR\/bLgybDbfRkLj6rMfkT9KrezcvSzFrYAOxVYhg343KmCey5HeZxq5xXbJUGaVFL8P1HiW1brEMPwuMMD2IM0xVEkRU0UUAFFFFABRRRQAVRcOxt3RioInkxhQRP8AdEY5Tkmr64u292JIjqDBBgj35zmcgU0CO6KosE7mySo5T+LJMYEiCv8A+zRQBeKKBRSAKKKKAOL95UUs7BR3JgUoOIzytXSv4toE\/RSQ36VDjffHayv+N4iPUKP\/ALBTtY5M3B0kaRhoU\/5h+G1eb+5t\/wDMrPtXPDJi55WUeIxUMIMNDHH8TNTlTWE87kqotRoKKKKwKKrtsyCuCO\/Ijsf5+3qam1cJmRBBgxy5A49iKsqk22BJUjJkg94AwRy5DvVLapmb07RdRVKXs7WEH3Knrho7Tjng\/WraTTRSaZNcbjU11SGRVeoBwQJ2mY6nBGPXNWUU06YmrQhxdLj2SLDQxKEESPLuUnqPuz1FIFNZu2qQB95jJkl7hG0kjGwrJAkHbiARWwLEfKY9DJHsCce3+lBuMvzAEfiWZ91jA9z\/AKaJ+kR+zNNjVsjoXCndb2sDyUXZfKkEjwto5g7t+QIqp7WrWJbcFdADyLDxILMEjGzaTPXf92BW4rAiRkHr0NdVPNlcTIs6rUKLdoqlzUOHY7m8NAiMoJLKHz9ogEDMyYzTPDNT4oL7duTbKkzD2nuI8HqN0gHrFdcU0a3FkhpTzKUZ0cdwroQwkYMHNTo2tqBbtiFAhSPlnmQD1OSSeuczNXpw0tkt7pjdck1NFYmgpf0IJ3qSlz8a9Y5bxyceh9orrTa2SEuKUuHp91iBnw25HvHP0pmqNZY8RCswean8LDKn2NdGLM1p9ClFMaopbRarfIYbXX507HuO6nof8wRTVdhhRFFFFABRRRQAVzdeBPbOASfYDJqvUMcKDBY88SABJInryHvXC2C2LkERG0EkNKwS2BPNhGRyP0dAd6NYRQRBAAP1jPQdfQfQUVcaKQAKKBUGgCZoqAKljAk8qAEbXkvOp\/6kXFPqqrbce0If73pTlJ8UI2LcByjoVPcMwQj1lWP6U5XH5MalZtB2jyWo+LWs8UTQXUTw7qBrd0bgfEYvttvOJIRsjmSuK7+MviptHc0tm0ivc1N5Lfn3bbaMwTe23ruYQOu1u1YfxToU19zX27Lj9psrp7lggjcL1gXWOw95fYexYTWP8QaprljQa3UAJf1Gt0l4oMm3pbIcL0kJ5muEnkb0U4wi6ZLbPrW\/assQIEseQEDJzyHOvMcF45q9eh1GlFmzp9xFpr6XLly+FJBfYroLSyCBJY45CvQa+wL9i4iti9bZQwyIuIQGBHoZrx3wHxq1o9Imi1zppr+m3IVusEW4m8sty0zQLikEZE5rKK+Lfsps2\/hb4jOpe\/p71sWtTpWC3bYbchDCUuW2IBKsM5EjrS\/xv8Q6nRC1cs2FvoxbxEyLqqil3ZDMHyg4jpOeifwfpnva\/W8RKMlm8LdqxuUq1xLagNdKnIUkDaTzH66XxBr7aa3QIzgEvdMHoGsOik9gWO0TzOKqkp9C9HPEPiAXNCur0Zt3FZrcB9w+e4tsiVMo6s2R6EetaHErWoW19gQ1+UUby3hCWAdmXdJUDc0TuwBNeE+IOAXuH3t+kXdotXfsePZHLT3fHtkXUHRTEEdJA5bY+oGiTUUq6ElfZ4rQ8c1z6zWaRfAZ9LbttuKXAt1riblUL4n2ccplp516G5rLq2CX8Jb4thoM+GzbQWgTMTuHMxjn18n8M6tDxziRDAi4mnVD0drdsBwh5MVgyByg9q9rxW+tuzcd2CqEaSTAEiBn1JA96cmrSa+gSdaPNfD3xDrNVo7GsW3pwLrCbX2m4L43httcmC20FgI9K9ZeDQdhAaMbgSs9JAIJHvXyv4H1Ois8M0t29dZb+n3v4PiXd5YPchBpi0Espx5eZBr6ncvhEL3CECiWJIAXGZNLIqekOLPH\/BPxydXcOn1VoafUFRctqCSl+ywkNbJ5kZkf6MBucC4heu3NSl0WwLF4WlKBgW+ytXdx3Exi6oj0Oa8ppPh9OI8K0jWn8PVadFNm8MPavKBKP1AOJB9DHfR\/4favUPZ1dzU2xb1B1RV0ggeIum0tqQOzFQwjHmwSM05RjuhX9jHxDxu\/ptZpdPaW0V1bFZff9m4BYtAOQQDjGfrWzw2\/qDcupeW3tUIUe3MEtu3KysSVYQh+jj28b\/xAeyNdwxbjmFu3GuncVZEKBVZmSDbWZzjr616H4cv6Vb16zpbhu7z49xvEa4qMVtWlXxGJLFghMSY2nkIFEkuKa+hR0T8T\/Eh09yxprFoXtVqSRbQsVRVUS9y64BIUCcASYMV051yNb8TwLqNcVXNlLtu5aDGA67ncOAYBnbgk8prM+J7TWNfpteUdrK23s3iibzaDbilwgebaCxkgGKX4l8Rtc1+js6LWC5avM\/ji2tq6LKoqlTvCnZuO4eafSKFHSob32eo4lqLlq1eZCGa3bLqLg8p2gkjyxziPTnnlXldL8bakW+H6i7ZtG1r7i2ttveLtp3JCnzEh1wZ5RXpvia8tvT3mYgA2biZ6sUO0D1mQB1mvl\/BEbS6fhvEgHv27CmzqbJ3XDpi7H7W1bP8AZMAQDAyCOjE1UYpqyba0fXuJa63YtXL107UtqzsecKokwOp9K89wviPENXYXVWk01lLg3WrN4XHuPbIlDcuowFosIMBXgHrypz4p0X7fw+9bsOD41o+G0+Vjhlz0BIA96zfhn4s0yaS1b1NxdPfs21t3bF3yXQ6KE8ls5cNEjbMzHOs4r46Wy29jvw1xi1xG0ztba1esXGs3re4h7V1fmUXFjcp78j7VqnhiDNubbfiUmT\/GCYf3rzn\/AA74ddX9s1V5GtnWalrqW2EOtrOwuv3WMkkfSvYTTlNxlUWOPWxM6m5bg3dhQmC6grsJ5FlJPl9Zx9JjQqtgCIOQeYrP1Om8FGeySuxS2yZtttExtPy\/VYrbHnT1LsUofRp0uV8QmcqCRtMEE8iWH5wJ5NkVerSAR1qm6pWWXtJXoYgyJMAxP1JE10mZZbsKpJAAJ5nrzJj6STj1ruhTIkdaKQgooooA5BqQKhRXVABS2utTDTG3n9CRP6CqtVrGW5tAkQJxJzI\/Ty9OpqpOItEMkYO4k4JUZUDoTzAPMTVxi1sxnOL0Fq0Dd88nYJtg\/KPxMBA82QJzHfJrRrKe6E2XSNik5HYGVPL7si235mtWuLy0+dnRgdxCiiiuU2oKgipqJoAJoFFY9ziV0brsW\/CS8LJQ7vFJNxbe4NMDzNISDuEGRMVcYuXQm0uzZoooqBgTRRRQASe9AoFeftcZ1HhAtpz4hUnaFfykKsdCHnduOVgArllNUk2JtI9AaytVxMbv7K4baXAj3vL4at8vLdvIDEAsFgH+Ewu3GbxfaLDhQ5WSrEtDWwGGBtENc5yPKM1za0Zebj+Iilw76ffNtrnkZWBKBuYWUBClgZBkk644U\/kRJ6N2aOdAFSDFZXRZVptSlwbrbqw7qQRyB5j0IPuKtFYVr4VsAKCXYKCsMUIIKBMjbHyjpEyZmrG+GrJLklyXZmklZXc1tiEIUFf7NR3gn2fx+xW\/oq4xrirvOpWwbSB7SlVPjsQwzPmdZhNluGk8\/MtbllyQCQQSBI7EjI9qT4bolRQokrbJ2zHzEnc2ABMlhy6Gn6rJJUkvQo72FQe9TXnE+HzZt7F1AVAsZDBZNvYSwDhTJznoFAgyxiKv2Uz0U153ScQY3UH7QWutdZbmk2IBatguN0BfEWAFPiMxV5wPMsSvCLpjZqiUIQKVJIQW0ZPKSx3FpEmQcc5itS+720tWw0sxVN7Z5KSWI6khT7kVrBJOu2yXbHGYDmY+tIcW1Sm29tWl3QhVGT5gVBgch6+lXJw1SZuMbp6bwhC99qhQPeJpmzZRBCKqg5O0ACfWK2h46W2xczgXTELbbHKYXoffp261JtM3zGB+FZzBxLczyGBHUGRV1FdFmYUUUUgCiiigAFFL6TVB5EFWWNyNzE8jjBBg5GMGmKAKtQ5C4mZXkJMbhugfSaTbU35MJgbokETgFQffcJGK0aKpSoiUb9lVpdyguBOZweRkcmyJHMUjprrWQtu4pgEItwQVImE3ZkHkOUT1rTpPiqnYGAnYyuVHMquTHqOfrtionFTVM0g6GqK5RgQCORyPoamvMNwrD1uh1RuXCl0eG8wC7AofsB5YHIhbvXB77jG7RTjKhNWYP7HrOZuAkhQSGIGBcDm2sQpIZSCZggTu2ydP\/l1kuLptIboiLhVd4IETuiZgkT2MU3RTc2w4kVNFRUjJooooGFFFRQIgmqb+fIOZGZyAO8fyH+lXxVLiHUjmZnJ+UA5I5YJA96uPZE+i5RAipooqC0RVGpYyB5tpmSoJPSBjInOfTmKYrkimnTFJWiLUQNsRAiOUdIruk3uFJEc2wenmMn3knHXpVun1G7EEEcwR0qnB1ZEZrovpDQ2BdC3rnmnKKflRehjq0dT3xFP1nXlNgb0P2YI3WzkKpIlkbmoEkxkYxFa+PKKe+ypX6L7uhht9pvDY84Eo\/wDGmM+oIPrS9+zeYoreGPMG3DcTKMrQAR1z171powIkEEHkRyI9K5vW9w5wRkHse\/8AtXZxV20ZOUq0d1Vd1AExkiJUZOSAMD6zUS56Be5ncR9BEe5\/Kp\/Z1gDIiYM+YE5Jn1\/WqVeyG2+irTa1X5YwDn17HrzH5imqRvWlIi4DOYYAmexETnljvyrhmYEBTy5K0gtgzg\/NmIIOI+tPin0QptdmjRVenuFhldp7H+v6irKhqjROwooooGeefXM7o0BGEBWEtkkYcY3ITGOYwRyrUt8TQD7QrbcHayE53fu9WBGQR\/tWFYubWVonaQY7\/wC\/b1im9Rr2tzeUNdLOqIogLDkKEJibZB\/FzLDuNvX5GNQapaOPxMzmmpPZpHiiRO27AyT4N0ADvJUU4CCJGQeR7iqtLq0uCUYHvBnv+YwcjBg0tas3bQ22wjoD5QzMjKCflwrAgdOWIFctI7R+s7VX\/F3WrRwZW5cHyoORVT95\/wCXXsaL2pvXbbxbG070Kq32siVLAmF+YHHUCZ6U9pbRVFBCiAJC\/KDGQB2mscuTgtdlxj9lyjEDkK6oorgNAooooGFFFFABRRRQBEUCgmoIoETRQKmgYVTcUhtwE4gjrAJIicTk8+\/PFXUU06Jas4tvIkf0RggiqNRrNp2KrO8TtWMA8izHCj9cHBrrU3BbVngnlj8TGFAHqTtFdaDTbF8xl2O527secegwB6AVvixKW30S5NIRvad7Sm\/v3OoZrgLMEZdslVGdu2BBjvPM1pIZAPKenauddcVbbM43KAZGMg4jOPzqnhqMtsB5BEwCZIXcdoY9SFge1X5EVSYQbYwyg9P9\/rVAG1gAcNiPoCZE5jERyzTNVG3J3eke3P8AzrmixyiWE0AUCk+L\/wBk3by7v4Ny7\/8ADuoirkkURwZPKbgAVbsMqDkFj5o5BmmTHpz51oUBYwMRiO1YXw9xxtRcuo+xTbe6oABm4tvUXLXiKdxBXyAEcwxPIbS3pmDds3qisLV8buK9wBUi1fsWdhnxLgveFNxDOAPFMCDPgvkfdZ49xJrAtlVBDPDmNxROW\/ZuBYbigJWSN0weiEalDKCIIkdjypDi2ua0bKKBN674ZdpK2\/s7lySARJJQIBIy4+h54frLl6wzqEFwNdRTnw3Nu46K4zOxtoPPE8zzIA1aUKSsQGMrER8okR05E+9X1k8I17X0t3Su0MQFUqQw+z+03Ak8rgdf7vWZqjhXGnvGxISL9u4+wTvsFCo23MmSC204EMIz0pkr6N00UAUUijyQruzdZDuUwfzB9COorgUV7bSapnz6bTtF+nJUhrRKhQu+2AXdrVpLhVLM\/Mu4qNo2nzNJMiNjh2tLytwKLi7Q+0ym8idobqwEEj1FYH8x1HMes1fp7ts3rT3R5kLFX5LJVgS45A+c5ESYkGAR5+bxmtx6PRweWn8Z9jaibSMbvhF787sA7muMAg3AgkyFgil9HpdRsA\/a1YBE2kEGfsiATKzkkGZMwDHMG3XG0iMLxmyd91HU4yGZ0kdcsV7\/AFGU9Dw4K9pL1raGUPaK3t5BtxKXPIskhwebD5hgAT5c4Sts9JyQybGrBVluFlZ1MBgNlvcCSS6gmElY+9hvKZnXTVoX2AyQJxJGI68pyK7tWQqKg+VVCgHOAIz7Vi2bYN1v2e4q7RAUkEt1baDJ2YXMHljFTjhHIny1X+P7M8s5Qa47\/wB\/0b9FY2kv3vGCOx6kqQsbYMEEDImK2ayzYXjaTaf6NMOZZE2lX7Ck\/wDmun2Nc8e1sUwz+ImxT2ZpgH604K8PoPg17Caa6Ct3UWWtl1uPFplS1ftqltlt42eO7KzKSeRPIiYpPtmjbPXNxKwNgN60PEyn2iecd0z5vapfX2luC0btsXGytsuouMOeEJk8j+VeNufCuo8N02aY+Pa1KOGZ\/DsNqNQbv2ai3NwICfwSR92cOJ8P6tLrC3cQWrl1ne6Gi66NYFva6G2dzKVXayuuMEYzf44\/ZPJnol4ppyHbx7RFsw58RItmYhzPlM4zVg19ojcLtvbt37t67dkkb5mNsg55Yrxtz4U1VxLSMLFrwLNqwDadiLgTU6e41whrY2bVsEqp3ea4QTGTU3w1ctgK1zT7kKsFuOQL5TXXdSDeG3y7wwJIBAfkIAFHCH2NOT9HtrOutOEKXbbC5Owq6kXCsk7CD5ogzHKDTINeO4nwfV6q4mpRtPbayFNhAWuA3Bd33JvALsDhEQkI2C1exiolFIab9k0VE1RrtSLaM5zAwJjceij1JxUpNukMX1dzxfskBPmG94OxNrAnzcmbEQOR5xWnS+gsG2gUmTLEkcpZixj0ljV9ejGKiqRjJ2xTiyE2XAE4EjqVkbwPUruA+tXJcDAMDggEHuDkVaay7TNYGxwWtqBsdVJ2qMRcAJMgAeaI+kVnmg5LRUGaFBcTEie05\/KkW1lx\/wCxtSJ+dyFRgJnbBLZOAYjryqyzwu3t+0RLjnLsygkt6TyAkgDoKyh47e5aKckidZdbcltGAZyZJE7VUSSFnJkqM9\/altZwwBQULsQVLjcSbyhgSDOJxiI7cjWhY0dtPktos\/hUCfyq4iunHFQVIhzso02tt3PkcE9V5MPqpyPcVatsDkAPYdedL8Q0guIRjdHkcjKN0IPMZ7VZotR4iBog5BEzDKxUieuQav8ARJaUEzAkcjGQPQ0MgMSAYMiRyPcVNFIRDqCIIBB6ESPyqQI5UTVd54UnqAcdz0H50CZy\/wA6j0Yx+Wf5j3NWqgBJAAJ5kASfqetc2rQUdz1J5k9z\/WK7psSA0UUUijyQoqBQte4fPE0UUUwGLGsCIyXBuQg47N9egP6HNKcL4damCWB2gW4bcIx5Le8kIJ2wqbRj0xYai2YZYx505fxCufLiXGTWmbY8suSi9o6uaksgPiMykAhWw5UqGBKAksIIOc55Ulwu4twmyiW2Y6hLn7QD5lA23RiJLBBsEGNsT1Uu6uyvgztEi00GBj\/0yjHbAH5UzwBBK4GBaj0nTwY9lUewryvz3j4tHqfh4T5Rf\/Tni8G7cYtqAwtAafwA5G87p3bAVLbtuLvkgT+KN6wW2rvjdA3Ry3RmPSa8Hw+83hKdxk6vVyZMkLxBLaz3hPKOwxyqOFXmD6VQzbTsBWTBAsaUgR2BZj\/ePeuSatJfR1LTPdavWW7QBuXEQEwC7KoJgmAScmAasmeVJ2gDrATkiwYPbddG6O07Vn6DtUcEEWVAwAXAA5AC4wAHYAYrN40oKRXLdDyiuqiisyya+X\/8SOAam\/qw9qw1xfCRdwAiQzkjJ9R+dfT6KR0+J5UvGyfkik3\/ACYPwNpHs6KzbuIUdQ0qeYl2I5elb9RRQY5Juc3N+3ZzdcKCzGAAST2AyaU0mnZyt24TiWW3AhJBAnEltpznBJqOMf2YHQ3LQPqDdQEH0rRNdnjxVcjGbCiio610GRNFAooAmooooAKKKKACkM2rsCCt5yY+8ji3JI6FSE9IJ6zT9JN\/7lfS00ekuk\/5U4jQ7RNFcmkIBXGr+Rj2BPuMj+VWCqtZ8h9v50LsmXReaiiihlBRQaKAP\/\/Z',width=400,height=400)","1061daac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","df01a0c5":"ls ..\/input\/hackathon\/task_1-google_search_txt_files_v2\/ME\/","ef1b57f1":"df = pd.read_table(\"\/kaggle\/input\/hackathon\/task_1-google_search_txt_files_v2\/ME\/Montenegro-sr-result-9.txt\",header=None)\ndf.head(10)","e4ab1955":"from sklearn.model_selection import train_test_split\n\nclass Perceptron:\n    def __init__(self):\n        self.weights=[]\n        self.losser= []\n        #activation function\n    def activation(self,data):\n        activation_val=self.weights[0]\n        activation_val+=np.dot(self.weights[1:],data)\n        return 1 if activation_val>=0 else 0\n    \n    def fit(self,X,y,lrate,epochs):\n        #initializing weight vector\n        self.weights=[0.0 for i in range(len(X.columns)+1)]\n        #no.of iterations to train the neural network\n        for epoch in range(epochs):\n            print(str(epoch+1),\"epoch \/\/\")\n            counter = 0\n            for index in range(len(X)):\n                x=X.iloc[index]\n                predicted=self.activation(x)\n                \n                self.losser.append(abs(y.iloc[index]-predicted))\n                #print(\"Error of {}.rd data: {}\".format(index,y.iloc[index-predicted]))\n                #check for misclassification\n                if(y.iloc[index]==predicted):\n                    pass\n                else:\n                    counter += 1\n                    #calculate the error value\n                    error=y.iloc[index]-predicted\n                    #updation of threshold\n                    self.weights[0]=self.weights[0]+lrate*error\n                    #updation of weights with delta rule\n                    for j in range(len(x)):\n                        self.weights[j+1]=self.weights[j+1]+lrate*error*x[j]\n            print(\" Errord Out \", counter)\n        print(\"To see error of each data sample just uncomment 38th row of line\")\n    \n    def predict(self,x_test):\n        predicted=[]\n        for i in range(len(x_test)):\n            #prediction for test set using weights\n            predicted.append(self.activation(x_test.iloc[i]))\n        return predicted\n    \n    def accuracy(self,predicted,original):\n        correct=0\n        lent=len(predicted)\n        for i in range(lent):\n            if(predicted[i]==original.iloc[i]):\n                correct+=1\n        return (correct\/lent)*100\n    \n    def getweights(self):\n        return self.weights","e9b6080e":"#x_train = data_train.loc[:,:1]\n#y_train = data_train.loc[:,2]\n#x_test = data_test.loc[:,:1]\n#y_test = data_test.loc[:,2]","f96c174c":"model = Perceptron()\n#model.fit(x_train,y_train,0.2,6) # learning rate = 0.2 6 epochs","c46238d5":"from matplotlib import pyplot as plt\na = np.arange(0,220)\n#plt.scatter(a, x_train.loc[:,0],c='r',marker='x')\n#plt.scatter(a, x_train.loc[:,1],c='b',marker='o')\n#plt.xlabel('Samples')\n#plt.ylabel('Data Points')\n#plt.title('Veri Dagilimi')\n#plt.grid()\n#plt.show()","49324c19":"montenegro_file = '..\/input\/hackathon\/task_1-google_search_txt_files_v2\/ME\/Montenegro-sr-result-9.txt'\nwith open(montenegro_file) as f: # The with keyword automatically closes the file when you are done\n    print (f.read(2000))","90bdaf45":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcS7_fQsEC1RpPuTsHDA47l0mWD1isXwANEKdA&usqp=CAU',width=400,height=400)","8a62f823":"Since there is no test or train, I couldn't reproduce the codes above.","d7395198":"linkedin.com","e17a8aa7":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke","071590e2":"Direktno. Informativni portal. Website: https:\/\/direktno.rs\/. Industries: Package\/Freight Delivery. Company size: 11-50 employees. Headquarters: Belgrade, Serbia.","a420a42e":"#Codes from dasmehdixtr https:\/\/www.kaggle.com\/dasmehdixtr\/example-1-delta-rule-with-gradient-descent","8cf6d397":"Montenegro (\/\u02ccm\u0252nt\u026a\u02c8ne\u026a\u0261ro\u028a, -\u02c8ni\u02d0\u0261ro\u028a, -\u02c8n\u025b\u0261ro\u028a\/; Montenegrin: Crna Gora \/ \u0426\u0440\u043d\u0430 \u0413\u043e\u0440\u0430, [tsr\u0329\u0302\u02d0na\u02d0 \u0261\u01d2ra] is a country of South and Southeast Europe on the coast of the Balkans. It borders Bosnia-Herzegovina to the northwest, Serbia to the northeast, Kosovo[a] to the east, Albania to the southeast, the Adriatic Sea to the southwest, and Croatia to the west. Montenegro has an area of 13,812 square kilometres and a population of 620,079 (2011 census). Its capital, Podgorica, is one of the twenty-three municipalities in the country. Cetinje is designated as the Old Royal Capital.https:\/\/en.wikipedia.org\/wiki\/Montenegro","3c6a22db":"aa.com.tr"}}