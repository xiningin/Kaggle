{"cell_type":{"0e9629cf":"code","8c6ac73c":"code","2fb1ee3c":"code","f9ddd2e4":"code","eeba0f46":"code","442d1a79":"code","b50e2a21":"code","f00e4591":"code","3dab16ab":"code","5c6f7a4f":"code","ada13c30":"code","cea6cc27":"code","09bda592":"code","b7a192ec":"code","d0653d21":"code","505795f1":"code","c440c8f2":"code","f3294441":"code","8eb0a5f7":"code","a3276f28":"code","572926c5":"code","ce37bdae":"code","2851174b":"code","7610e17d":"code","a248bb3c":"code","4faf14d6":"code","0a32c1ba":"code","c59886cd":"code","69d1d804":"code","f33cd50a":"code","a8db54c3":"code","bae2b672":"code","e1e32984":"code","77fec852":"code","349cd148":"code","48110e98":"code","3aca98fd":"code","f7f6b036":"code","0c7c41b6":"code","a420473a":"code","492de5e0":"code","154ee896":"code","8e0260f0":"code","aaef7a31":"code","013be8ee":"code","3358994c":"code","48de9ee1":"code","aafaee2a":"code","6a77b46e":"code","cdd38643":"code","1943af0a":"code","c02417a6":"code","6e6bd3d4":"code","530e2107":"code","c9ad21a9":"code","66856504":"code","cddaa7fb":"code","49ae5f8e":"code","b2426784":"markdown","43cffbe3":"markdown","b1567d46":"markdown","02fa1d17":"markdown","4580bbf9":"markdown","e3920575":"markdown","36b0aced":"markdown","b422e1ed":"markdown","4cee44fc":"markdown","ac8e881a":"markdown","a1f6835c":"markdown","c5942583":"markdown","ba03745e":"markdown","541704b0":"markdown","f592298f":"markdown","2c444a02":"markdown","4bbfde9c":"markdown","cf40d914":"markdown","2ecaf96c":"markdown","f8e39698":"markdown","263a26df":"markdown","a3793905":"markdown","9f96b62c":"markdown","ef2a02e5":"markdown","6f95832f":"markdown","4b504c26":"markdown","3cf769f7":"markdown","5f7163b3":"markdown","ccffcef0":"markdown","8e8fe9e3":"markdown","23c35394":"markdown","79cca3ea":"markdown","42174a91":"markdown","18ae1dea":"markdown","47d0111b":"markdown","377e4196":"markdown","382da5a1":"markdown","57c76d46":"markdown","e632659d":"markdown","e6a72283":"markdown","306ecc0a":"markdown","33eef76c":"markdown","7ce48030":"markdown","dfa3c6f7":"markdown","5f9e27ae":"markdown","edf637d4":"markdown","5e4d9a7b":"markdown","9f766b64":"markdown","1a1feea1":"markdown","d47d8a52":"markdown","3880f7f5":"markdown","5b98041b":"markdown","f8e3779c":"markdown","e14c15db":"markdown","d6e1f3c3":"markdown","003ac38a":"markdown","3f6e92f6":"markdown","02dbe044":"markdown","92e704bf":"markdown","af9e636d":"markdown","e78aa475":"markdown","bb0f6ed6":"markdown","7aae8caa":"markdown"},"source":{"0e9629cf":"!pip install -U scikit-learn > \/dev\/null","8c6ac73c":"%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\nfrom matplotlib import pyplot as plt\nplt.rcParams['figure.figsize'] = (10, 8)\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nimport collections\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score","2fb1ee3c":"# Create dataframe with dummy variables\ndef create_df(dic, feature_list):\n    out = pd.DataFrame(dic)\n    out = pd.concat([out, pd.get_dummies(out[feature_list])], axis = 1)\n    out.drop(feature_list, axis = 1, inplace = True)\n    return out\n\n# Some feature values are present in train and absent in test and vice-versa.\ndef intersect_features(train, test):\n    common_feat = list( set(train.keys()) & set(test.keys()))\n    return train[common_feat], test[common_feat]","f9ddd2e4":"features = ['Looks', 'Alcoholic_beverage','Eloquence','Money_spent']","eeba0f46":"df_train = {}\ndf_train['Looks'] = ['handsome', 'handsome', 'handsome', 'repulsive',\n                         'repulsive', 'repulsive', 'handsome'] \ndf_train['Alcoholic_beverage'] = ['yes', 'yes', 'no', 'no', 'yes', 'yes', 'yes']\ndf_train['Eloquence'] = ['high', 'low', 'average', 'average', 'low',\n                                   'high', 'average']\ndf_train['Money_spent'] = ['lots', 'little', 'lots', 'little', 'lots',\n                                  'lots', 'lots']\ndf_train['Will_go'] = LabelEncoder().fit_transform(['+', '-', '+', '-', '-', '+', '+'])\n\ndf_train = create_df(df_train, features)\ndf_train","442d1a79":"df_test = {}\ndf_test['Looks'] = ['handsome', 'handsome', 'repulsive'] \ndf_test['Alcoholic_beverage'] = ['no', 'yes', 'yes']\ndf_test['Eloquence'] = ['average', 'high', 'average']\ndf_test['Money_spent'] = ['lots', 'little', 'lots']\ndf_test = create_df(df_test, features)\ndf_test","b50e2a21":"# Some feature values are present in train and absent in test and vice-versa.\ny = df_train['Will_go']\ndf_train, df_test = intersect_features(train=df_train, test=df_test)\ndf_train","f00e4591":"df_test","3dab16ab":"dt = DecisionTreeClassifier(criterion='entropy', random_state=17)\ndt.fit(df_train, y);","5c6f7a4f":"plot_tree(dt, feature_names=df_train.columns, filled=True,\n         class_names=[\"Won't go\", \"Will go\"]);","ada13c30":"balls = [1 for i in range(9)] + [0 for i in range(11)]","cea6cc27":"# two groups\nballs_left  = [1 for i in range(8)] + [0 for i in range(5)] # 8 blue and 5 yellow\nballs_right = [1 for i in range(1)] + [0 for i in range(6)] # 1 blue and 6 yellow","09bda592":"from math import log\n    \ndef entropy(a_list):\n    lst = list(a_list)\n    size = len(lst) \n    entropy = 0\n    set_elements = len(set(lst))\n    if set_elements in [0, 1]:\n        return 0\n    for i in set(lst):\n        occ = lst.count(i)\n        entropy -= occ\/size * log (occ\/size,2)\n    return entropy","b7a192ec":"print(entropy(balls)) # 9 blue and 11 yellow ones\nprint(entropy(balls_left)) # 8 blue and 5 yellow ones\nprint(entropy(balls_right)) # 1 blue and 6 yellow ones\nprint(entropy([1,2,3,4,5,6])) # entropy of a fair 6-sided die","d0653d21":"# information gain calculation\ndef information_gain(root, left, right):\n    ''' root - initial data, left and right - two partitions of initial data'''\n        \n    return entropy(root) - 1.0 * len(left) \/ len(root) * entropy(left) \\\n                         - 1.0 * len(right) \/ len(root) * entropy(right) ","505795f1":"print(information_gain(balls, balls_left, balls_right))","c440c8f2":"def information_gains(X, y):\n    '''Outputs information gain when splitting with each feature'''\n    out = []\n    for i in X.columns:\n        out.append(information_gain(y, y[X[i] == 0], y[X[i] == 1]))\n    return out","f3294441":"information_gains(df_train, y)","8eb0a5f7":"def btree(X, y, feature_names):\n    clf = information_gains(X, y)\n    best_feat_id = clf.index(max(clf))\n    best_feature = feature_names[best_feat_id]\n    print (f'Best feature to split: {best_feature}')\n    \n    x_left = X[X.iloc[:, best_feat_id] == 0]\n    x_right = X[X.iloc[:, best_feat_id] == 1]\n    print (f'Samples: {len(x_left)} (left) and {len(x_right)} (right)')\n    \n    y_left = y[X.iloc[:, best_feat_id] == 0]\n    y_right = y[X.iloc[:, best_feat_id] == 1]\n    entropy_left = entropy(y_left)\n    entropy_right = entropy(y_right)\n    print (f'Entropy: {entropy_left} (left) and {entropy_right} (right)')\n    print('_' * 30 + '\\n')\n    if entropy_left != 0:\n        print(f'Splitting the left group with {len(x_left)} samples:')\n        btree(x_left, y_left, feature_names)\n    if entropy_right != 0:\n        print(f'Splitting the right group with {len(x_right)} samples:')\n        btree(x_right, y_right, feature_names)","a3276f28":"btree (df_train, y, df_train.columns)","572926c5":"data_train = pd.read_csv('..\/input\/adult_train.csv')","ce37bdae":"data_train.tail()","2851174b":"data_test = pd.read_csv('..\/input\/adult_test.csv')","7610e17d":"data_test.tail()","a248bb3c":"# necessary to remove rows with incorrect labels in test dataset\ndata_test = data_test[(data_test['Target'] == ' >50K.') | (data_test['Target']==' <=50K.')]\n\n# encode target variable as integer\ndata_train.loc[data_train['Target']==' <=50K', 'Target'] = 0\ndata_train.loc[data_train['Target']==' >50K', 'Target'] = 1\n\ndata_test.loc[data_test['Target']==' <=50K.', 'Target'] = 0\ndata_test.loc[data_test['Target']==' >50K.', 'Target'] = 1","4faf14d6":"data_test.describe(include='all').T","0a32c1ba":"data_train['Target'].value_counts()","c59886cd":"fig = plt.figure(figsize=(25, 15))\ncols = 5\nrows = np.ceil(float(data_train.shape[1]) \/ cols)\nfor i, column in enumerate(data_train.columns):\n    ax = fig.add_subplot(rows, cols, i + 1)\n    ax.set_title(column)\n    if data_train.dtypes[column] == np.object:\n        data_train[column].value_counts().plot(kind=\"bar\", axes=ax)\n    else:\n        data_train[column].hist(axes=ax)\n        plt.xticks(rotation=\"vertical\")\nplt.subplots_adjust(hspace=0.7, wspace=0.2)","69d1d804":"data_train.dtypes","f33cd50a":"data_test.dtypes","a8db54c3":"data_test['Age'] = data_test['Age'].astype(int)","bae2b672":"data_test['fnlwgt'] = data_test['fnlwgt'].astype(int)\ndata_test['Education_Num'] = data_test['Education_Num'].astype(int)\ndata_test['Capital_Gain'] = data_test['Capital_Gain'].astype(int)\ndata_test['Capital_Loss'] = data_test['Capital_Loss'].astype(int)\ndata_test['Hours_per_week'] = data_test['Hours_per_week'].astype(int)","e1e32984":"# we see some missing values\ndata_train.info()","77fec852":"# choose categorical and continuous features from data\n\ncategorical_columns = [c for c in data_train.columns \n                       if data_train[c].dtype.name == 'object']\nnumerical_columns = [c for c in data_train.columns \n                     if data_train[c].dtype.name != 'object']\n\nprint('categorical_columns:', categorical_columns)\nprint('numerical_columns:', numerical_columns)","349cd148":"# fill missing data\n\nfor c in categorical_columns:\n    data_train[c].fillna(data_train[c].mode()[0], inplace=True)\n    data_test[c].fillna(data_train[c].mode()[0], inplace=True)\n    \nfor c in numerical_columns:\n    data_train[c].fillna(data_train[c].median(), inplace=True)\n    data_test[c].fillna(data_train[c].median(), inplace=True)","48110e98":"# no more missing values\ndata_train.info()","3aca98fd":"data_train = pd.concat([data_train[numerical_columns],\n    pd.get_dummies(data_train[categorical_columns])], axis=1)\n\ndata_test = pd.concat([data_test[numerical_columns],\n    pd.get_dummies(data_test[categorical_columns])], axis=1)","f7f6b036":"set(data_train.columns) - set(data_test.columns)","0c7c41b6":"data_train.shape, data_test.shape","a420473a":"data_test['Country_ Holand-Netherlands'] = 0","492de5e0":"set(data_train.columns) - set(data_test.columns)","154ee896":"data_train.head(2)","8e0260f0":"data_test.head(2)","aaef7a31":"X_train = data_train.drop(['Target'], axis=1)\ny_train = data_train['Target']\n\nX_test = data_test.drop(['Target'], axis=1)\ny_test = data_test['Target']","013be8ee":"tree = DecisionTreeClassifier(max_depth=3, random_state=17)\ntree.fit(X_train, y_train)","3358994c":"tree_predictions = tree.predict(X_test) ","48de9ee1":"accuracy_score(y_test, tree_predictions)","aafaee2a":"%%time\ntree_params = {'max_depth': range(2, 11)}\n\nlocally_best_tree = GridSearchCV(DecisionTreeClassifier(random_state=17),\n                                 tree_params, cv=5)                  \n\nlocally_best_tree.fit(X_train, y_train)","6a77b46e":"print(\"Best params:\", locally_best_tree.best_params_)\nprint(\"Best cross validaton score\", locally_best_tree.best_score_)","cdd38643":"tuned_tree = DecisionTreeClassifier(max_depth=9, random_state=17)\ntuned_tree.fit(X_train, y_train)\ntuned_tree_predictions = tuned_tree.predict(X_test)\naccuracy_score(y_test, tuned_tree_predictions)","1943af0a":"rf = RandomForestClassifier(n_estimators=100, random_state=17)\nrf.fit(X_train, y_train)","c02417a6":"%%time\ncv_scores = cross_val_score(rf, X_train, y_train, cv=3)","6e6bd3d4":"cv_scores, cv_scores.mean()","530e2107":"forest_predictions = rf.predict(X_test) ","c9ad21a9":"accuracy_score(y_test,forest_predictions)","66856504":"forest_params = {'max_depth': range(10, 16),\n                 'max_features': range(5, 105, 20)}\n\nlocally_best_forest = GridSearchCV(\n    RandomForestClassifier(n_estimators=10, random_state=17,\n                           n_jobs=4),\n    forest_params, cv=3, verbose=1, n_jobs=4)\n\nlocally_best_forest.fit(X_train, y_train)","cddaa7fb":"print(\"Best params:\", locally_best_forest.best_params_)\nprint(\"Best cross validaton score\", locally_best_forest.best_score_)","49ae5f8e":"tuned_forest_predictions = locally_best_forest.predict(X_test) \naccuracy_score(y_test,tuned_forest_predictions)","b2426784":"Wow! Looks that with some tuning we made a forest of 10 trees perform better than a forest of 100 trees with default hyperparameter values. ","43cffbe3":"Train a random forest **(RandomForestClassifier)**. Set the number of trees to 100 and use **random_state = 17**.","b1567d46":"Make predictions for the test data.","02fa1d17":"2\\. Let's split the data by the feature \"Looks_handsome\". What is the entropy $S_1$ of the left group - the one with \"Looks_handsome\". What is the entropy $S_2$ in the opposite group? What is the information gain (IG) if we consider such a split?","4580bbf9":"#### Optional:\n- Implement a decision tree building algorithm by calling `information_gains` recursively\n- Plot the resulting tree","e3920575":"#### Reading train and test data","36b0aced":"4\\. What is the entropy of a fair dice? (where we look at a dice as a system with 6 equally probable states)?","b422e1ed":"<font color='red'>Answer: <\/font> $S_1 = -\\frac{1}{4}\\log_2{\\frac{1}{4}}-\\frac{3}{4}\\log_2{\\frac{3}{4}} = 0.811$, $S_2 = -\\frac{2}{3}\\log_2{\\frac{2}{3}}-\\frac{1}{3}\\log_2{\\frac{1}{3}} = 0.918$, $IG = S_0-\\frac{4}{7}S_1-\\frac{3}{7}S_2 = 0.128$.","4cee44fc":"#### Dataset description:","ac8e881a":"<font color='red'>Answer:<\/font> 0.161","a1f6835c":"#### Primary data analysis","c5942583":"Train a random forest **(RandomForestClassifier)** of 10 trees. Tune the maximum depth and maximum number of features for each tree using **GridSearchCV**. ","ba03745e":"**Target** \u2013 earnings level, categorical (binary) feature.","541704b0":"Train a decision tree **(DecisionTreeClassifier)** with a maximum depth of 3, and evaluate the accuracy metric on the test data. Use parameter **random_state = 17** for results reproducibility.","f592298f":"#### Creating the dataset","2c444a02":"Train a decision tree with maximum depth of 9 (it is the best **max_depth** in my case), and compute the test set accuracy. Use parameter **random_state = 17** for reproducibility.","4bbfde9c":"Tests","cf40d914":"Make a prediction with the trained model on the test data.","2ecaf96c":"### 3.4 (Optional) Random forest with parameter tuning","f8e39698":"#### Fill in missing data for continuous features with their median values, for categorical features with their mode.","263a26df":"### 3.3 (Optional) Random forest without parameter tuning","a3793905":"Next split the balls into two groups:","9f96b62c":"<font color='red'>Answer:<\/font> 2.585","ef2a02e5":"Feature descriptions:","6f95832f":"3\\. What is the entropy of the state given by the list **balls_left**?","4b504c26":"### Part 1. Toy dataset \"Will They? Won't They?\"","3cf769f7":"### Part 3. The \"Adult\" dataset","5f7163b3":"5\\. What is the information gain from splitting the initial dataset into **balls_left** and **balls_right** ?","ccffcef0":"#### There is no Holland in the test data. Create new zero-valued feature.","8e8fe9e3":"[Dataset](http:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/adult) UCI Adult (no need to download it, we have a copy in the course repository): classify people using demographical data - whether they earn more than \\$50,000 per year or not.","23c35394":"Consider the following warm-up example: we have 9 blue balls and 11 yellow balls. Let ball have label **1** if it is blue, **0** otherwise.","79cca3ea":"#### Training data","42174a91":"<img src='https:\/\/habrastorage.org\/webt\/mu\/vl\/mt\/muvlmtd2njeqf18trbldenpqvnm.png'>","18ae1dea":"- **Age** \u2013 continuous feature\n- **Workclass** \u2013  continuous feature\n- **fnlwgt** \u2013 final weight of object, continuous feature\n- **Education** \u2013  categorical feature\n- **Education_Num** \u2013 number of years of education, continuous feature\n- **Martial_Status** \u2013  categorical feature\n- **Occupation** \u2013  categorical feature\n- **Relationship** \u2013 categorical feature\n- **Race** \u2013 categorical feature\n- **Sex** \u2013 categorical feature\n- **Capital_Gain** \u2013 continuous feature\n- **Capital_Loss** \u2013 continuous feature\n- **Hours_per_week** \u2013 continuous feature\n- **Country** \u2013 categorical feature","47d0111b":"<font color='red'>Answer:<\/font> 0.961","377e4196":"Your goal is to figure out how decision trees work by walking through a toy problem. While a single decision tree does not yield outstanding results, other performant algorithms like gradient boosting and random forests are based on the same idea. That is why knowing how decision trees work might be useful.","382da5a1":"We'll go through a toy example of binary classification - Person A is deciding whether they will go on a second date with Person B. It will depend on their looks, eloquence, alcohol consumption (only for example), and how much money was spent on the first date.","57c76d46":"<img src='https:\/\/habrastorage.org\/webt\/bd\/aq\/5w\/bdaq5wi3c4feezaexponvin8wmo.png'>","e632659d":"1\\. What is the entropy $S_0$ of the initial system? By system states, we mean values of the binary feature \"Will_go\" - 0 or 1 - two states in total.","e6a72283":"#### Additional: display the resulting tree using graphviz.","306ecc0a":"<center>\n<img src=\"https:\/\/habrastorage.org\/webt\/ia\/m9\/zk\/iam9zkyzqebnf_okxipihkgjwnw.jpeg\">\n    \n## [mlcourse.ai](https:\/\/mlcourse.ai) - Open Machine Learning Course\n\nAuthors: [Maria Sumarokova](https:\/\/www.linkedin.com\/in\/mariya-sumarokova-230b4054\/), and [Yury Kashnitsky](https:\/\/www.linkedin.com\/in\/festline\/). Translated and edited by Gleb Filatov, Aleksey Kiselev, [Anastasia Manokhina](https:\/\/www.linkedin.com\/in\/anastasiamanokhina\/), [Egor Polusmak](https:\/\/www.linkedin.com\/in\/egor-polusmak\/), and [Yuanyuan Pao](https:\/\/www.linkedin.com\/in\/yuanyuanpao\/). All content is distributed under the [Creative Commons CC BY-NC-SA 4.0](https:\/\/creativecommons.org\/licenses\/by-nc-sa\/4.0\/) license.","33eef76c":"#### Train a decision tree using sklearn on the training data. You may choose any depth for the tree.","7ce48030":"# <center> Assignment #3 (demo). Solution\n## <center>  Decision trees with a toy task and the UCI Adult dataset \n\nSame assignment as a [Kaggle Kernel](https:\/\/www.kaggle.com\/kashnitsky\/a3-demo-decision-trees) + [solution](https:\/\/www.kaggle.com\/kashnitsky\/a3-demo-decision-trees-solution). Fill in the answers in the [web-form](https:\/\/docs.google.com\/forms\/d\/1wfWYYoqXTkZNOPy1wpewACXaj2MZjBdLOL58htGWYBA\/edit).","dfa3c6f7":"#### Test data","5f9e27ae":"### 3.1 Decision tree without parameter tuning","edf637d4":"<font color='red'>Answer:<\/font> 0.848","5e4d9a7b":"#### Implement a function to calculate the Shannon Entropy","9f766b64":"Train a decision tree **(DecisionTreeClassifier, random_state = 17).** Find the optimal maximum depth using 5-fold cross-validation **(GridSearchCV)**.","1a1feea1":"#### Draw a decision tree (by hand or in any graphics editor) for this dataset. Optionally you can also implement tree construction and draw it here.","d47d8a52":"We'll dummy code some categorical features: **Workclass**, **Education**, **Martial_Status**, **Occupation**, **Relationship**, **Race**, **Sex**, **Country**. It can be done via pandas method **get_dummies**","3880f7f5":"Let's start by loading all necessary libraries. Also, need to update `sklearn` to the latest version (to have `sklearn.tree.plot_tree`).","5b98041b":"#### Checking data types","f8e3779c":"Make predictions for the test data.","e14c15db":"### Part 2. Functions for calculating entropy and information gain.","d6e1f3c3":"This visualization is far from perfect, but it's easy to grasp if you compare it to the normal tree visualization (by sklearn) done above.","003ac38a":"### 3.2 Decision tree with parameter tuning","3f6e92f6":"6\\. What is the test set accuracy of a decision tree with maximum tree depth of 3 and **random_state = 17**?","02dbe044":"7\\. What is the test set accuracy of a decision tree with maximum depth of 9 and **random_state = 17**?","92e704bf":"Let's take a sneak peek of upcoming lectures and try to use a random forest for our task. For now, you can imagine a random forest as a bunch of decision trees, trained on slightly different subsets of the training data.","af9e636d":"As we see, in the test data, age is treated as type **object**. We need to fix this.","e78aa475":"<font color='red'>Answer: <\/font>  $S_0 = -\\frac{3}{7}\\log_2{\\frac{3}{7}}-\\frac{4}{7}\\log_2{\\frac{4}{7}} = 0.985$.","bb0f6ed6":"Perfrom cross-validation.","7aae8caa":"Also we'll cast all **float** features to **int** type to keep types consistent between our train and test data."}}