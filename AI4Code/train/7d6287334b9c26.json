{"cell_type":{"ff416f3c":"code","1bbba6f2":"code","46e7c140":"code","114a0e5a":"code","8d897a76":"code","01fc9029":"code","90d8b06d":"code","e680f6b9":"code","5c6e91d0":"code","6f01baf8":"code","010a1d95":"code","18e72645":"code","c61844e6":"code","1be77b73":"code","93385345":"code","2274e30b":"code","c4794821":"code","6591deac":"code","cbc66674":"code","e3a7dd54":"code","d09f8e77":"code","0c96c3e3":"code","ef294dda":"code","a77b3596":"code","003b0229":"code","a32ad93e":"code","3c128f86":"code","83d86ffd":"code","1bad3811":"code","1bd6b4c5":"code","7e565c18":"code","72e056ca":"code","b97b0c3e":"code","7454bdb1":"markdown","ddb8a994":"markdown","d8184186":"markdown","92cfcd19":"markdown","19b0327c":"markdown","ed763283":"markdown","f23b3ae2":"markdown","d8668880":"markdown","8bfc78f4":"markdown","742aef89":"markdown"},"source":{"ff416f3c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1bbba6f2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib as mpl\nmpl.rcParams['figure.figsize'] = (8,6)\nmpl.rcParams['axes.grid'] = False","46e7c140":"file_list = []\nlocation = \"\/kaggle\/input\/credit-card-fraud-detection\/simulated-data-raw-main\/data\/\"\nimport os\nfile_list = os.listdir(location)","114a0e5a":"file_path = \"\/kaggle\/input\/credit-card-fraud-detection\/simulated-data-raw-main\/data\/\"\nlist_of_dataframes = []\nfor filename in file_list:\n    new_filename = file_path+filename\n    #print(new_filename)\n    list_of_dataframes.append(pd.read_pickle(new_filename))\n\nmerged_df = pd.concat(list_of_dataframes)","8d897a76":"df = merged_df.copy()","01fc9029":"df.head()","90d8b06d":"df.shape","e680f6b9":"df.info()","5c6e91d0":"df['CUSTOMER_ID']= df['CUSTOMER_ID'].astype(str).astype(int)\ndf['TERMINAL_ID']= df['TERMINAL_ID'].astype(str).astype(int)\ndf['TX_TIME_SECONDS']= df['TX_TIME_SECONDS'].astype(str).astype(int)\ndf['TX_TIME_DAYS']= df['TX_TIME_DAYS'].astype(str).astype(int)","6f01baf8":"df.describe()","010a1d95":"sns.heatmap(df.isnull(),cmap='viridis',cbar=False)","18e72645":"df['TRANSACTION_ID'].value_counts()","c61844e6":"df['TRANSACTION_ID'].value_counts().sum()","1be77b73":"df['TX_DATETIME'].plot()","93385345":"df['CUSTOMER_ID'].value_counts()","2274e30b":"df['CUSTOMER_ID'].value_counts().sum()","c4794821":"sns.histplot(df['TX_AMOUNT'], label='Transaction Amount', color='red', kde=True)\nplt.legend()\nplt.show()","6591deac":"df['TX_TIME_HOUR'] = df['TX_TIME_SECONDS']\/3600","cbc66674":"df['TX_TIME_DAYS'].value_counts()","e3a7dd54":"df['TX_TIME_DAYS'].value_counts().sum()","d09f8e77":"sns.histplot(df['TX_TIME_DAYS'], label='Transaction Days', color='skyblue')\nplt.show()","0c96c3e3":"sns.countplot(x='TX_FRAUD',data=df)","ef294dda":"sns.countplot(x='TX_FRAUD_SCENARIO',data=df)","a77b3596":"df['TX_FRAUD_SCENARIO'].unique()","003b0229":"df[df['TX_FRAUD']==0]['TX_FRAUD_SCENARIO']","a32ad93e":"df_fraud_scenarios = df[df['TX_FRAUD']==1]['TX_FRAUD_SCENARIO']","3c128f86":"sns.countplot(df[df['TX_FRAUD']==1]['TX_FRAUD_SCENARIO'])","83d86ffd":"fraud = df[df['TX_FRAUD']==1]['TX_TIME_HOUR']\nreal =  df[df['TX_FRAUD']==0]['TX_TIME_HOUR']\nsns.histplot(fraud, color='red')\nsns.histplot(real, color='skyblue')\nplt.show()","1bad3811":"df.head(3)","1bd6b4c5":"df['TERMINAL_ID'].value_counts()","7e565c18":"df['TERMINAL_ID'].value_counts().sum()","72e056ca":"sns.histplot(df['TERMINAL_ID'])","b97b0c3e":"sns.heatmap(df.corr(),cmap='coolwarm',cbar=True)","7454bdb1":"*Here we can see diffrent type of fraus scenarios, but from these 3 the secnd scenario is the most common. I have gathered some data regarding diffrent type of Credit Card Scenarios from AXIS bank Official Site.*\n\n**PoS Fraud**\n\nIn this type of fraud, small skimming devices are attached to normal Point-of-Sale (PoS) devices to hack your data. These devices scan and store the card information while the customer completes a swipe transaction. Usually, this involves a merchant or store employee who shares these details with malicious actors. Similar attachments may also be fastened on to ATM card slots to clone card information, while a camera is secretly placed over the keypad to capture your PIN.\n\n**Phishing and vishing**\n\nThese involve impersonating official communication from the bank which in turns acts as a bait for you to click on false links. This will usually take you to websites that look authentic. Once you enter your card details on these fake links, fraudsters can access the details and use them for their benefit. Another version is when fraudsters impersonate bank officials on phone calls, asking you to share an OTP to \u2018verify your card\u2019 or \u2018avail the reward points\u2019 or \u2018extend the validity of your reward points.\u2019\n\n**Keystroke logging**\n\nToday, since most financial transactions are online, hackers have started relying on keystroke logging through malicious software to grab credit card details. This usually begins after you have clicked on a suspicious link and unknowingly installed malware on your system. The software records every key pressed on the system, eventually stealing card details, PIN and more.\n\n**Application fraud**\n\nThis is a type of identity theft where fraudulent actors impersonate a genuine customer by using their stolen or counterfeited documents to obtain a credit card. While this might be detected after thorough background checks, if carried out, this will allow criminals to use a valid credit card with a false paper trail. A similar type of fraud involves taking over a valid credit card account by posing as the customer using a similar fake paper trail.","ddb8a994":"Its Obivious that most of the transactions are between 0 to 250, and the transaction amount is left skewed","d8184186":"*Not much diffrence in time*","92cfcd19":"It semms we have contineous date data","19b0327c":"Here we have a clear picture of imbalance dataset and which is quite obvious since fraud transaction are rarely happen, and our work is to find those transactions\n\nAt last I will try to make our dataset balance before model building","ed763283":"With the help of Corelation heatmap, I can say that the features we have are not much co-related with our result, Only Fraud Transaction Scenarios have a high corelation values, and that is quite ovious because if a transaction is fraud, then only it can be categorized in its types.","f23b3ae2":"*Transaction Id length and Transaction ID Count is equal, it states that all the transaction ID's are unique*","d8668880":"It seems that terminal is shared between the users because total user count is 4990 and we have 10,000 total terminals","8bfc78f4":"Here I can see the total customer count is 4990 and they have done multiple transactions","742aef89":"*No Null Values In datasets*"}}