{"cell_type":{"68262fcc":"code","0ac103c5":"code","fc22d759":"code","4db99f31":"code","44cfddf9":"code","1be91f8a":"code","58c9e7bc":"code","e4e00f3d":"code","b85c54a2":"code","42ecaddc":"code","0a964a52":"code","cae8a596":"code","6921cb4b":"code","5a27138c":"code","07dcfbeb":"code","dfb78169":"code","7830c23c":"code","4c301f50":"code","633c827c":"code","cd30f16a":"code","8759d259":"code","efe60590":"code","5936fed1":"code","34fee058":"code","33f895ea":"code","6053ebe1":"code","2ee263b0":"code","1dff257d":"code","80692943":"code","e4332a07":"code","2f5ac078":"code","f6e064c5":"code","b1d593ef":"code","4c7799ba":"code","0786a625":"code","62b084e9":"code","5357a25f":"code","eda02806":"code","f6e44188":"code","670fdd20":"code","c44322e6":"markdown","33f0c7d5":"markdown","995c1849":"markdown"},"source":{"68262fcc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0ac103c5":"# read the matches dataset\nmatches=pd.read_csv('\/kaggle\/input\/ipl-dataset-2017\/IPL data\/matches.csv')\nmatches.head()","fc22d759":"# lets explore the data a bit\nmatches.describe()","4db99f31":"# we can see NaN values in data \nmatches.isnull().sum()","44cfddf9":"matches.shape","1be91f8a":"# third umpire value is null so remove them\nmatches=matches.drop('umpire3',axis=1)\nmatches.columns","58c9e7bc":"# drop null values\nmatches=matches.dropna()\nmatches.shape","e4e00f3d":"# final check for null values\nmatches.info()","b85c54a2":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport warnings\nwarnings.simplefilter(\"ignore\")","42ecaddc":"# Matches played per season\nfig = px.bar(matches, x=matches['season'].value_counts().keys(), y=matches['season'].value_counts(), color=matches['season'].value_counts().keys(),\n             labels={\n                     'x': \"Year\",\n                     'y': \"Number of matches\"\n                     \n                 })\nfig.update_layout(title = 'Total matches per season')\nfig.show()","0a964a52":"#Show IPL teams\nprint(\"Teams before preprocessing:\",matches.team1.unique())\nmatches=matches.replace('Rising Pune Supergiant','Rising Pune Supergiants')\nmatches=matches.replace('Delhi Daredevils','Delhi Capitals')\nprint()\nprint(\"Teams before preprocessing:\",matches.team1.unique())","cae8a596":"matches_per_team1=matches.groupby('team2')['team2'].count()\nmatches_per_team2=matches.groupby('team1')['team1'].count()\n\nmatches_per_team=matches_per_team1+matches_per_team2\nmatches_per_team","6921cb4b":"# Number of matches played per venue\nfig = px.bar(matches, x=matches['venue'].value_counts().keys()[:5],\n             y=matches['venue'].value_counts()[:5],\n             color=matches['venue'].value_counts().keys()[:5],\n             labels={\n                     'x': \"Venue\",\n                     'y': \"Total number of matches\"\n                     \n                 })\nfig.update_layout(title='Total number of matches played')\nfig.show()","5a27138c":"# Find out valueable player throughout IPL seasons\nfig = px.bar(matches, x=matches['player_of_match'].value_counts().keys()[:10],\n             y=matches['player_of_match'].value_counts()[:10],\n             color=matches['player_of_match'].value_counts().keys()[:10],\n             labels={\n                     'x': \"Player Name\",\n                     'y': \"Total number of player of the match award\"\n                     \n                 })\nfig.update_layout(title='Top ten most valuable players throught the IPL Seasons')\nfig.show()","07dcfbeb":"# find relation with toss\nwin=matches[matches['toss_winner']==matches['winner']].count()\nloose=matches[matches['toss_winner']!=matches['winner']].count()\n\n# matches won when won the toss\nfig = px.bar(matches, x=[win[1],loose[1]],\n             y=['win','loose'],\n             color=['win','loose'],\n             labels={\n                     'x': \"Number of matches won\",\n                     'y': \"Match Result\"\n                     \n                 })\nfig.update_layout(title='Influence of toss on match result')\nfig.show()","dfb78169":"# Toss influence in each venue\n\nchinnaswamy_win=matches[(matches['toss_winner']==matches['winner'])&(matches['venue']=='M Chinnaswamy Stadium')].count()[0]\nchinnaswamy_loose=matches[(matches['toss_winner']!=matches['winner'])&(matches['venue']=='M Chinnaswamy Stadium')].count()[0]\n\nEden_win=matches[(matches['toss_winner']==matches['winner'])&(matches['venue']=='Eden Gardens')].count()[0]\nEden_loose=matches[(matches['toss_winner']!=matches['winner'])&(matches['venue']=='Eden Gardens')].count()[0]\n\n\nFeroz_win=matches[(matches['toss_winner']==matches['winner'])&(matches['venue']=='Feroz Shah Kotla')].count()[0]\nFeroz_loose=matches[(matches['toss_winner']!=matches['winner'])&(matches['venue']=='Feroz Shah Kotla')].count()[0]\n\nWankhede_win=matches[(matches['toss_winner']==matches['winner'])&(matches['venue']=='Wankhede Stadium')].count()[0]\nWankhede_loose=matches[(matches['toss_winner']!=matches['winner'])&(matches['venue']=='Wankhede Stadium')].count()[0]\n\nRG_win=matches[(matches['toss_winner']==matches['winner'])&(matches['venue']=='Rajiv Gandhi International Stadium, Uppal')].count()[0]\nRG_loose=matches[(matches['toss_winner']!=matches['winner'])&(matches['venue']=='Rajiv Gandhi International Stadium, Uppal')].count()[0]\n\nfig = go.Figure(data=[\n    go.Bar(name='Rajiv Gandhi International Stadium, Uppal', \n           x=['win','loose'],\n           y=[RG_win,RG_loose]),\n    go.Bar(name='Wankhede Stadium',\n           x=['win','loose'], \n           y=[Wankhede_win,Wankhede_loose]),\n    go.Bar(name='Feroz Shah Kotla', \n           x=['win','loose'],\n           y=[Feroz_win,Feroz_loose]),\n    go.Bar(name='Eden Gardens',\n           x=['win','loose'], \n           y=[Eden_win,Eden_loose]),\n    go.Bar(name='M Chinnaswamy Stadium', \n           x=['win','loose'],\n           y=[chinnaswamy_win,chinnaswamy_loose]),\n])\n\n# Change the bar mode\nfig.update_layout(title='Match results comparison with toss results in various venues')\nfig.update_layout(\n    xaxis_title=\"Win \/ loose\",\n    yaxis_title=\"Count\",\n    legend_title=\"Venue Name\",\n)\nfig.show()","7830c23c":"# decision influence of toss on result\nwinner_field=matches[(matches['toss_winner']==matches['winner'])& (matches['toss_decision']=='field')].count()[0]\nwinner_bat=matches[(matches['toss_winner']==matches['winner'])& (matches['toss_decision']!='field')].count()[0]\n# matches won when won the toss\nfig = px.bar(matches, x=[winner_field,winner_bat],\n             y=['Field','Bat'],\n             color=['Field','Bat'],\n             labels={\n                     'x': \"Decision\",\n                     'y': \"Count\"\n                     \n                 })\nfig.update_layout(title='Influence of toss Decision on match result')\nfig.show()","4c301f50":"#Wins toss,bats first & wins match by team\nseasons = matches['season'].unique()\nteams = matches['team1'].unique()\ndf_toss_match_winner=matches[matches['toss_winner']==matches['winner']]\ndf_toss_match_winner_season=df_toss_match_winner.groupby('season')['season'].count()\ndf_toss_match_winner_team=df_toss_match_winner.groupby('winner')['winner'].count()\ntoss_batting_first=matches[(matches['toss_winner']==matches['winner']) & (matches['toss_decision']=='bat')]\ntoss_batting_first_team=toss_batting_first.groupby('toss_winner')['toss_winner'].count()\nwin_perc=[]\nfor i in teams:\n    if i in toss_batting_first_team.keys() and i in df_toss_match_winner_team.keys():\n        win_perc.append((toss_batting_first_team[i]\/df_toss_match_winner_team[i])*100)\n    else:\n        win_perc.append(0)\n\nfig, ax = plt.subplots(figsize=(10,5))\nplt.xlim(0,110)\nrects=plt.barh(teams,win_perc)\n\nfor i, v in enumerate(win_perc):\n    ax.text(v+0.5 , i + .25, str(v)[:5]+\"%\", color='black', fontweight='bold',va='top')\n\nfig.suptitle('Percentage of batting first while winning both toss and match',fontsize=20)\nplt.xlabel('Percentage', fontsize=18)\nplt.ylabel('Team', fontsize=18,rotation=0,labelpad=40)\n\nfor i in range(13):\n    teams[i]\n\nplt.show()","633c827c":"#Wins toss,fields first & wins match by team\ntoss_field_first=matches[(matches['toss_winner']==matches['winner']) & (matches['toss_decision']=='field')]\ntoss_field_first_season=toss_field_first.groupby('toss_winner')['toss_winner'].count()\nwin_perc=[]\n\nfor i in teams:\n    if i in toss_field_first_season.keys() and i in df_toss_match_winner_team.keys():\n        win_perc.append((toss_field_first_season[i]\/df_toss_match_winner_team[i])*100)\n    else:\n        win_perc.append(0)\n\nfig, ax = plt.subplots(figsize=(10,5))\nplt.xlim(0,110)\nrects=plt.barh(teams,win_perc)\n\nfor i, v in enumerate(win_perc):\n    ax.text(v+0.5 , i + .25, str(v)[:5]+\"%\", color='black', fontweight='bold',va='top')\n\nfig.suptitle('Percentage of fielding first while winning both toss and match',fontsize=20)\nplt.xlabel('Percentage', fontsize=18)\nplt.ylabel('Team', fontsize=18,rotation=0,labelpad=40)\n\nfor i in range(13):\n    teams[i]\n\n\nplt.show()","cd30f16a":"#Average runs per over\ndeliveries= pd.read_csv('\/kaggle\/input\/ipl-dataset-2017\/IPL data\/deliveries.csv')\n\ndf_deliveries = deliveries\n\ntotal_matches=len(df_deliveries['match_id'].unique())\novers=df_deliveries['over'].unique()\nover_bowled=df_deliveries.groupby('over')['over'].count()\/6\nover_runs=df_deliveries.groupby('over').agg({'total_runs': 'sum'}).total_runs\nrpo=over_runs\/over_bowled\n\nfig=plt.figure(figsize=(10,5))\nplt.ylim(0,12)\nrects=plt.bar(rpo.keys(),rpo.values,width=0)\nplt.xticks(rpo.keys())\n\nfor rect in rects:\n    height = rect.get_height()\n    plt.text(rect.get_x() + rect.get_width()\/2., 1.05*height, str(height)[:4],ha='center', va='bottom',color='black')\n\nover_colors = [\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"orange\",\"orange\",\"orange\",\"orange\",\"orange\",\"orange\",\"orange\",\"orange\",\"orange\",\"green\",\"green\",\"green\",\"green\",\"green\"]\nplt.vlines(rpo.keys(),0,rpo.values,color=over_colors,linestyles='solid')\nplt.scatter(rpo.keys()[:6],rpo.values[:6], marker=\"o\",s=100,color=\"red\")\nplt.scatter(rpo.keys()[6:15],rpo.values[6:15], marker=\"o\",s=100,color=\"orange\")\nplt.scatter(rpo.keys()[15:],rpo.values[15:], marker=\"o\",s=100,color=\"green\")\n    \n    \nfig.suptitle('Average runs per over',fontsize=20)\nplt.xlabel('Over', fontsize=18)\nplt.ylabel('Runs', fontsize=18,rotation=0,labelpad=60)\n\nplt.legend([\"\", \"Powerplay\",\"Middle overs\",\"Death overs\"])\nplt.show()","8759d259":"# Let us look the same for our venues\n\nchinnaswamy_field=matches[(matches['toss_winner']==matches['winner'])&\n                        (matches['venue']=='M Chinnaswamy Stadium')&\n                        (matches['toss_decision']=='field')].count()[0]\nchinnaswamy_bat=matches[(matches['toss_winner']!=matches['winner'])&\n                          (matches['venue']=='M Chinnaswamy Stadium')&\n                          (matches['toss_decision']!='field')].count()[0]\n\nEden_field=matches[(matches['toss_winner']==matches['winner'])&\n                 (matches['venue']=='Eden Gardens')&\n                 (matches['toss_decision']=='field')].count()[0]\nEden_bat=matches[(matches['toss_winner']!=matches['winner'])&\n                   (matches['venue']=='Eden Gardens')&\n                   (matches['toss_decision']!='field')].count()[0]\n\n\nFeroz_field=matches[(matches['toss_winner']==matches['winner'])&\n                  (matches['venue']=='Feroz Shah Kotla')&\n                  (matches['toss_decision']=='field')].count()[0]\nFeroz_bat=matches[(matches['toss_winner']!=matches['winner'])&\n                    (matches['venue']=='Feroz Shah Kotla')&\n                    (matches['toss_decision']!='field')].count()[0]\n\nWankhede_field=matches[(matches['toss_winner']==matches['winner'])&\n                     (matches['venue']=='Wankhede Stadium')& \n                     (matches['toss_decision']=='field')].count()[0]\nWankhede_bat=matches[(matches['toss_winner']!=matches['winner'])\n                       &(matches['venue']=='Wankhede Stadium')\n                       & (matches['toss_decision']!='field')].count()[0]\n\nRG_field=matches[(matches['toss_winner']==matches['winner'])\n               &(matches['venue']=='Rajiv Gandhi International Stadium, Uppal')& \n               (matches['toss_decision']=='field')].count()[0]\nRG_bat=matches[(matches['toss_winner']!=matches['winner'])&\n                 (matches['venue']=='Rajiv Gandhi International Stadium, Uppal')\n                 & (matches['toss_decision']!='field')].count()[0]\n\nfig = go.Figure(data=[\n    go.Bar(name='Rajiv Gandhi International Stadium, Uppal', \n           x=['Field','Bat'],\n           y=[RG_field,RG_bat]),\n    go.Bar(name='Wankhede Stadium',\n           x=['Field','Bat'], \n           y=[Wankhede_field,Wankhede_bat]),\n    go.Bar(name='Feroz Shah Kotla', \n           x=['Field','Bat'],\n           y=[Feroz_field,Feroz_bat]),\n    go.Bar(name='Eden Gardens',\n           x=['Field','Bat'], \n           y=[Eden_field,Eden_bat]),\n    go.Bar(name='M Chinnaswamy Stadium', \n           x=['Field','Bat'],\n           y=[chinnaswamy_field,chinnaswamy_bat]),\n])\n# Change the bar mode\nfig.update_layout(title='Match results comparison with toss Decision results in various venues')\nfig.update_layout(\n    xaxis_title=\"Field \/ Bat\",\n    yaxis_title=\"Count\",\n    legend_title=\"Venue Name\",\n)\nfig.show()","efe60590":"# teams with most wins\nmatches['winner'].value_counts()[:5]\n\n# Number of matches played per venue\nfig = px.bar(matches, x=matches['winner'].value_counts().keys()[:5],\n             y=matches['winner'].value_counts()[:5],\n             color=matches['winner'].value_counts().keys()[:5],\n             labels={\n                     'x': \"Team name\",\n                     'y': \"Total number of Matches Won\"\n                     \n                 })\nfig.update_layout(title='Top five most consistant teams throught the IPL Seasons')\nfig.show()","5936fed1":"Mumbai_field=matches[(matches['winner']=='Mumbai Indians')& \n        (matches['toss_winner']=='Mumbai Indians')&\n       (matches['toss_decision']=='field')].count()[0]\nMumbai_bat=matches[(matches['winner']=='Mumbai Indians')& \n        (matches['toss_winner']=='Mumbai Indians')&\n       (matches['toss_decision']!='field')].count()[0]\n\nKolkata_field=matches[(matches['winner']=='Kolkata Knight Riders')& \n        (matches['toss_winner']=='Kolkata Knight Riders')&\n       (matches['toss_decision']=='field')].count()[0]\nKolkata_bat=matches[(matches['winner']=='Kolkata Knight Riders')& \n        (matches['toss_winner']=='Kolkata Knight Riders')&\n       (matches['toss_decision']!='field')].count()[0]\n\nChennai_field=matches[(matches['winner']=='Chennai Super Kings')& \n        (matches['toss_winner']=='Chennai Super Kings')&\n       (matches['toss_decision']=='field')].count()[0]\nChennai_bat=matches[(matches['winner']=='Chennai Super Kings')& \n        (matches['toss_winner']=='Chennai Super Kings')&\n       (matches['toss_decision']!='field')].count()[0]\n\nBangalore_field=matches[(matches['winner']=='Royal Challengers Bangalore')& \n        (matches['toss_winner']=='Royal Challengers Bangalore')&\n       (matches['toss_decision']=='field')].count()[0]\nBangalore_bat=matches[(matches['winner']=='Royal Challengers Bangalore')& \n        (matches['toss_winner']=='Royal Challengers Bangalore')&\n       (matches['toss_decision']!='field')].count()[0]\n\nPunjab_field=matches[(matches['winner']=='Kings XI Punjab')& \n        (matches['toss_winner']=='Kings XI Punjab')&\n       (matches['toss_decision']=='field')].count()[0]\nPunjab_bat=matches[(matches['winner']=='Kings XI Punjab')& \n        (matches['toss_winner']=='Kings XI Punjab')&\n       (matches['toss_decision']!='field')].count()[0]\n\nfig = go.Figure(data=[\n    go.Bar(name='Mumbai Indians', \n           x=['Field','Bat'],\n           y=[Mumbai_field,Mumbai_bat]),\n    go.Bar(name='Kolkata Knight Riders',\n           x=['Field','Bat'], \n           y=[Kolkata_field,Kolkata_bat]),\n    go.Bar(name='Chennai Super Kings', \n           x=['Field','Bat'],\n           y=[Chennai_field,Feroz_bat]),\n    go.Bar(name='Royal Challengers Bangalore',\n           x=['Field','Bat'], \n           y=[Bangalore_field,Bangalore_bat]),\n    go.Bar(name='Kings XI Punjab', \n           x=['Field','Bat'],\n           y=[Punjab_field,Punjab_bat]),\n])\n\n\n# Change the bar mode\nfig.update_layout(title='Match results comparison with toss Decision results in various Teams')\nfig.update_layout(\n    xaxis_title=\"Field \/ Bat\",\n    yaxis_title=\"Count\",\n    legend_title=\"Team Name\",\n)\nfig.show()","34fee058":"# Number of times 10 wicket victory\nmatches[matches['win_by_wickets']==10]['winner'].value_counts()","33f895ea":"#teams with 10 wicket victory\nfig = px.pie(matches,\n             values=matches[matches['win_by_wickets']==10]['winner'].value_counts(), \n             names=matches[matches['win_by_wickets']==10]['winner'].value_counts().keys(),\n            color_discrete_sequence=px.colors.sequential.RdBu)\nfig.update_layout(\n    title='Teams with 10 wicket victory',\n    legend_title=\"Team Name \"\n)\nfig.show()","6053ebe1":"matches[matches['win_by_runs']>50]['winner'].value_counts()","2ee263b0":"# sub plot piecharts\nfrom plotly.subplots import make_subplots\n\n\nfig = make_subplots(1, 2, specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=['Win By Runs >50', 'Win by 10 wickets'])\n\nfig.add_trace(go.Pie(labels=matches[matches['win_by_runs']>50]['winner'].value_counts().keys(),\n                     values=matches[matches['win_by_runs']>50]['winner'].value_counts(),\n                     scalegroup='one',\n                    ),\n                      1, 1)\n\nfig.add_trace(go.Pie(labels=matches[matches['win_by_wickets']==10]['winner'].value_counts().keys(), \n                     values=matches[matches['win_by_wickets']==10]['winner'].value_counts(), \n                     scalegroup='one'), 1, 2)\n\nfig.update_layout(\n    title='Brilliant performance by various teams',\n    legend_title=\"Team Name\",\n)\nfig.show()","1dff257d":"umpire1=matches['umpire1'].value_counts()\numpire2=matches['umpire2'].value_counts()\nnew_umpire={}\nfor i in umpire1.keys():\n    if i in umpire2:\n        new_umpire[i]=umpire1[i]+umpire2[i]\n    else:\n        new_umpire[i]=umpire1[i]\n\n\nfig = px.bar(matches, x=list(new_umpire.keys())[:5],\n             y=list(new_umpire.values())[:5],\n             color=list(new_umpire.keys())[:5],\n             labels={\n                     'x': \"Umpire Name\",\n                     'y': \"Total number of Matches\"\n                     \n                 })\nfig.update_layout(title='Top five most consistant Umpires throught the IPL Seasons')\nfig.show()","80692943":"#load deliveries dataset\ndeliveries= pd.read_csv('\/kaggle\/input\/ipl-dataset-2017\/IPL data\/deliveries.csv')\ndeliveries.head()","e4332a07":"deliveries.info()","2f5ac078":"deliveries.describe()","f6e064c5":"fig = px.bar(matches, x=deliveries['dismissal_kind'].value_counts().keys(),\n             y=deliveries['dismissal_kind'].value_counts(),\n             color=deliveries['dismissal_kind'].value_counts().keys(),\n             labels={\n                     'x': \"Medium of Dismissal\",\n                     'y': \"Total number of Dismissals\"\n                     \n                 })\nfig.update_layout(title='Number of Dismissials')\nfig.show()","b1d593ef":"print(\"Number of super overs {}\".format(len(deliveries[deliveries['is_super_over']==1]['match_id'].unique())))","4c7799ba":"bowlers=dict.fromkeys(list(deliveries['bowler'].unique()),0)\nwicket_bowls=deliveries[deliveries.player_dismissed.isnull()==False]\nfor i in range(wicket_bowls.shape[0]):\n    bowlers[wicket_bowls.iloc[i]['bowler']]+=1\nbowlers=dict(sorted(bowlers.items(), key=lambda item: item[1],reverse=True))\ny=list(bowlers.values())[:20]\nx=list(bowlers.keys())[:20]\nbw=x\nfig = px.scatter(x=x, y=y ,color=x, size=y , labels={\n                     'x': \"Bowler Name\",\n                     'y': \"Number of wickets\",\n                     'color':'Player Name'\n                     \n                 })\nfig.update_layout(title='Number of dismissal by each bowler (Top 20)')\nfig.show()","0786a625":"deliveries['batsman_runs'].value_counts()\n\nfig = px.bar(matches, x=deliveries['batsman_runs'].value_counts().keys(),\n             y=deliveries['batsman_runs'].value_counts(),\n             color=deliveries['batsman_runs'].value_counts().keys(),\n             labels={\n                     'x': \"Run value\",\n                     'y': \"Total number\"\n                     \n                 })\nfig.update_layout(title='Count for each Run types')\nfig.show()","62b084e9":"cre_runs=deliveries['batsman_runs'].value_counts()\nprint(cre_runs)","5357a25f":"wides=deliveries['wide_runs'].sum()\nbye=deliveries['bye_runs'].sum()\nlegbye=deliveries['legbye_runs'].sum()\nnoball=deliveries['noball_runs'].sum()\npenalty=deliveries['penalty_runs'].sum()\n\ny=[wides,bye,legbye,noball,penalty]\nx=['wide_runs','bye_runs','legbye_runs','noball_runs', 'penalty_runs']\nfig = px.pie(deliveries,\n             values=y, \n             names=x)\nfig.update_layout(\n    title='Extra Runs',\n    legend_title=\"Extra Runs medium \"\n)\nfig.show()","eda02806":"bowlers=dict.fromkeys(deliveries['bowler'].unique(),0)\nfor i in range(deliveries.shape[0]):\n    if deliveries.iloc[i]['wide_runs']>0:\n        bowlers[deliveries.iloc[i]['bowler']]+=1\nbowlers=dict(sorted(bowlers.items(), key=lambda item: item[1],reverse=True))\ny=list(bowlers.values())[:5]\nx=list(bowlers.keys())[:5]\n\nfig = px.scatter(x=x, y=y ,color=x, size=y , labels={\n                     'x': \"Bowler Name\",\n                     'y': \"Number of wide balls\",\n                     'color':'Player Name'\n                     \n                 })\nfig.update_layout(title='Number of wides by each bowler (Top 5)')\nfig.show()","f6e44188":"bowlers=dict.fromkeys(deliveries['bowler'].unique(),0)\nfor i in range(deliveries.shape[0]):\n    if deliveries.iloc[i]['bye_runs']>0:\n        bowlers[deliveries.iloc[i]['bowler']]+=1\nbowlers=dict(sorted(bowlers.items(), key=lambda item: item[1],reverse=True))\ny=list(bowlers.values())[:5]\nx=list(bowlers.keys())[:5]\n\nfig = px.scatter(x=x, y=y ,color=x, size=y , labels={\n                     'x': \"Bowler Name\",\n                     'y': \"Number of byes balls\",\n                     'color':'Player Name'\n                     \n                 })\nfig.update_layout(title='Number of byes by each bowler (Top 5)')\nfig.show()","670fdd20":"bowlers=dict.fromkeys(deliveries['bowler'].unique(),0)\nfor i in range(deliveries.shape[0]):\n    if deliveries.iloc[i]['noball_runs']>0:\n        bowlers[deliveries.iloc[i]['bowler']]+=1\nbowlers=dict(sorted(bowlers.items(), key=lambda item: item[1],reverse=True))\ny=list(bowlers.values())[:5]\nx=list(bowlers.keys())[:5]\n\nfig = px.scatter(x=x, y=y ,color=x, size=y , labels={\n                     'x': \"Bowler Name\",\n                     'y': \"Number of noball balls\",\n                     'color':'Player Name'\n                     \n                 })\nfig.update_layout(title='Number of noball by each bowler (Top 5)')\nfig.show()","c44322e6":"From the data we could see CH Gayle is the most valueable player","33f0c7d5":"# Exploratory Data Analysis","995c1849":"# Data Analysis"}}