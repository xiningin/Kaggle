{"cell_type":{"5ff0ac83":"code","add8ac2e":"code","a336c2ba":"code","75ccc722":"code","df8925ed":"code","00b59556":"code","73bf4331":"code","5840db1c":"code","a18c1a53":"code","3a47146e":"code","937bce3b":"code","a56c2510":"code","b8dff370":"code","39ca19e3":"markdown","7374661b":"markdown","50e7eecd":"markdown","52e950e1":"markdown","98890b76":"markdown","ef6f80a8":"markdown","c51ba74e":"markdown","6522ee6b":"markdown","51cbfc5c":"markdown","fa31891b":"markdown","8949a175":"markdown"},"source":{"5ff0ac83":"# User will input two coordinates of two points and function will calculate whole circle bearing\n# dx = x2 - x1 and dy = y2 - y1\n# wcb = math.atan(dx\/dy), wcb is short for whole circle bearing and helps reduce errors through incorrect spelling","add8ac2e":"# The main and only library required for this project is the 'math' library\n# The math library is imported at the start, and is used for the rest of the project as code is read top-down\n# math.degrees and math.atan functions require the math library\n\nimport math","a336c2ba":"# To allow the user to input the Cartesian Coordinates, an 'input' function is used to enter the x1,y1,x2,y2 values\n# The inputted coordinates are then assigned to the variables x1,y1,x2,y2 as seen below\n# As variables are lables, they are case-sensitive, so the variables are lower case with no spaces\n\n# x1 = input('What is the x-coordinate of the first point')\n# y1 = input('What is the y-coordinate of the first point')\n# x2 = input('What is the x-coordinate of the second point')\n# y2 = input('What is the y-coordinate of the second point')\n\ndef bearing (x1,y1,x2,y2):\n    \n# Above is the new, created function 'bearing', with the inputs being x1,y1,x2,y2\n    \n    x1 = float(x1)\n    y1 = float(y1)\n    x2 = float(x2)\n    y2 = float(y2)\n    \n# The variables have been assigned as the 'float' data type\n# This is because this allows decimal bearings to be inputed into the function\n    \n    dx = (x2) - (x1) \n    dy = (y2) - (y1)\n    \n# With the x1,y1,x2,y2 variables assigned, the first stage of the calculation is executed by this section of code above\n# The change in y, and change in x calculation, uses the - (subtract) operator \n\n    if (dx == 0) and (dy == 0):\n        wcb = 0 \n        \n# If dx and dy both equal 0, it is a math error as division by zero is not mathmatically possible\n# Originally the code above was 'print ('no whole circle bearing')\n# This was changed so not to confuse by changing numerical answers (Integers\/Floats) to text outputs (String Data Type)\n\n    elif (dx == 0) and (dy > 0):\n        wcb = 0\n        \n    elif (dx > 0) and (dy == 0):\n        wcb = 90 \n        \n    elif (dx == 0) and (dy < 0):\n        wcb = 180\n        \n    elif (dx < 0) and (dy == 0):\n        wcb = 270\n        \n# The code above is the if,elif statements to resolve any mathematical errors in the code such as division by 0\n        \n        \n    else:\n        wcb = (math.degrees((math.atan((dx)\/(dy)))))\n        \n# Above is the main mathmatical code for the calculation with the input the change of x \/ change of y\n# The code math.atan (on a calculator this is shift tan), and this algorithm outputs the whole circle bearing \n# The math.degrees fucntion is applied, as the math.atan function gives the answer in radians not degrees\n# As whole circle bearings are measured in degrees, the math.degrees function is needed \n# Due to the fact code is read inside-out and mathmatical rules of presidence apply, () were required in the code\n        \n        if (dx > 0) and (dy > 0):\n            wcb = (wcb + 0)\n            \n        elif (dx < 0) and (dy < 0):\n            wcb = (wcb + 180)\n            \n        elif (dx > 0) and (dy < 0):\n            wcb = (wcb + 180)\n            \n        elif (dx < 0) and (dy > 0):\n            wcb = (wcb + 360)\n            \n# Above is the conversions as mentioned in the introduction, using 'and','if' and 'elif' conditional statements\n# The code goes down each statement until one is true, and then applies that code to the final output\n            \n    return wcb\n    \n# Return wcb is indented level with first if statment to include all the if,elif,else clauses\n# Wrong indentation caused the code to not produce the correct answers, this had to be changed during testing\n# The spaces between each line of code have no impact, as the white-space is ignored when the code is executed","75ccc722":"# General Test to ensure there are no error messages or indentation errors, not counted on later spreadsheet\n\nresult = (bearing(1,2,3,4))\n\nprint('Your Whole Circle Bearing Is {} Degrees'.format(result))\n# The above line of code allows for the whole circle bearing answer in degrees to be displayed to the user\n\n# This works as it should, with no error messages, so it is a pass\n# Now move on to testing the if,elif and else statements code","df8925ed":"# Test One\n# For the main testing, the inputs were removed to speed up the testing process \n# Dx = 0 and Dy = 0\n\nresult = (bearing(2,6,2,6))\n\nprint('Your Whole Circle Bearing Is {} Degrees'.format(result)) \n\n# The answer 0 is correct, so this code is correct and passes testing","00b59556":"# Test Two\n# Dx = 0 and Dy > 0\n\nresult = (bearing(3,1,3,5))\n\nprint('Your Whole Circle Bearing Is {} Degrees'.format(result)) \n\n# The answer of 0 is correct, so this code is correct and passes testing","73bf4331":"# Test Three\n# Dx > 0 and Dy = 0\nresult = (bearing(10,20,30,20))\n\nprint('Your Whole Circle Bearing Is {} Degrees'.format(result))\n\n# The answer is 90 degrees which is correct, so this section of code passes testing ","5840db1c":"# Test Four\n# Dx = 0 and Dy < 0 \nresult = (bearing(43,28,43,19))\n\nprint('Your Whole Circle Bearing Is {} Degrees'.format(result))\n# This answer is correct, so the conditional statement for this passes testing","a18c1a53":"# Test Five\n# Dx < 0 and Dy = 0\nresult = (bearing(102,230,92,230))\n\nprint('Your Whole Circle Bearing Is {} Degrees'.format(result))\n\n# The answer is 270 degrees, which is correct, so this section of code passes testing ","3a47146e":"# Test Six\n# if (dx > 0) and (dy > 0)\nresult = (bearing(12,18,29,27))\n\nprint('Your Whole Circle Bearing Is {} Degrees'.format(result))\n\n# The answer is 62.10272897 from the calculator, which is correct to 8 decimal places\n# The if statement has added 0 onto the wcb which is correct for both positive dx and dy\n# Hence the code is correct and passes testing","937bce3b":"# Test Seven\n# elif (dx < 0) and (dy < 0):, the answer should add 180 onto original bearing calculation\nresult = (bearing(9,8,4,3))\n\nprint('Your Whole Circle Bearing Is {} Degrees'.format(result))\n\n# The answer before the elif statement is 45 and then the statement should at 180 onto this to equal 225\n# The function has done this and the answer is 225.0 degrees, so this section of code passes testing","a56c2510":"# Test Eight\n# elif (dx > 0) and (dy < 0):, the answer should add 180 onto original bearing calculation\nresult = (bearing(170,50,235,30))\n\nprint('Your Whole Circle Bearing Is {} Degrees'.format(result))\n\n# The answer before the function is -72.89727103 degrees and after the function equals 107.102729 which is correct\n# Hence the function is correct and passes testing","b8dff370":"# Test Nine\n# elif (dx < 0) and (dy > 0):, the answer should add 360 onto original bearing calculation\nresult = (bearing(2,5,1,8))\n\nprint('Your Whole Circle Bearing Is {} Degrees'.format(result))\n\n# The answer before the function is -18.43494882 degrees and after the function equals 341.565051 degrees which is correct\n# Hence the function is correct and passes testing","39ca19e3":"**Bibliography**\n\n(Civil Today, 2021) Whole Circle Bearings \u2013 Surveying. Available at: https:\/\/civiltoday.com\/surveying\/97-whole-circle-bearing-definition-example-formula \n(Accessed: 09\/11\/2021)\n\nUren, J. Price, B. (2010) \u2018Angle Measurement\u2019, Surveying for Engineers. 5th edn. Basingstoke: Palgrave Macmillan, pp. 79-89. \n","7374661b":"**Testing Part Two**\n\nAll of the testing for the code controlling mathematical error has passed. The next section of code is the conversion statements dependent on if dx is positive or negative and if dy is positive or negative.","50e7eecd":"**Testing the Code**\n\nTo ensure the code written works correctly and outputs the correct answers with no error statements, testing needs to be carried out on all the aspects of the code.\n\nIn particular, the if,elif and else statements need to be tested, due to the various issues that can arise from conditional statements. For example indentation errors, label errors and to make sure the mathematics in the statements is correct. \n\nThe test data and test results will be displayed in an Excel table, following the code for the testing.","52e950e1":"## Comments very detailed but too long - better as markdown text and keep code comments brief\n\n* We would customarily also include a function description as below\n\n<font size='+1' color='ffffff'>\n<code>\n    def bearing(x1, y1, x2, y2):\n        \"\"\"\n        Summary: calculates whole circle bearings between 0 ansd 360 degrees\n        ------------------\n        arguments:\n        x1: x value of the from coordinate\n        y1: y value of the y coordinate\n        x2: x value to the to coordinate\n        y2: y value of the to coordinate\n        ------------------\n        returns:\n        bearing in decimal degrees\n        ------------------\n        notes:\n        coordinates with matching x and y returns a bearing of 0\n        \"\"\"\n\n        #code here\n    <\/code>","98890b76":"**Introduction to the Mathematics**\n\nA whole circle bearing, is the horizontal angle made by a line with The Magnetic North, in a clockwise direction (Civil Today, 2021). The value of a whole circle bearing will be between 0 degrees and 360 degrees. The image below from Civil Today (2021), introduces the idea of whole circle bearings. \n\n![WCB 1.gif](attachment:047f962d-4507-4d76-8d68-7e28cf707667.gif)\n\nWhen given two Cartesian Coordinates, the whole circle bearing between the coordinates can be calculated. Firstly, by calculating the change between the two x coordinates (x1,x2) and the change between the two y coordinates (y1,y2). This is calculated by the equations:\n\nChange in x (dx)=x2-x1\nChange in y (dy)=y2-y1\n\nFollowing this, using the dx and dy values, the whole circle bearing can be calculated using the trigonometric function \u2018tan\u2019. More specifically, the inverse function of \u2018tan\u2019 called \u2018arctan\u2019 or \u2018tan-1\u2019. The formula for the second part of the calculation is given by:\n\ntan^-1 (dx\/dy)\n\nHowever, this only outputs bearings between -90 degrees and +90 degrees, which as a whole circle bearing is between 0 degrees and 360 degrees, is incorrect and a conversion is needed. \n\nThis is carried out by, depending on if the dx and dy values are positive or negative, simply adding 0,180 or 360 to the calculation answer. Below is an Excel table summarizing the conversion needed for certain dx and dy values.\n\n![Calculation Conversion.png](attachment:3fcdb082-a6e6-402c-80b9-9cabaff73734.png)","ef6f80a8":"## An excellent piece of work and good use of the notebook elements.","c51ba74e":"**Uses of Whole Circle Bearings**\n\nWhole circle bearings are used most frequently in an engineering context, especially in surveying using total stations or theodolites. When measuring horizontal angles in surveying, whole circle bearings are used from a horizontal zero to calculate angles between points (Uren, 2010).","6522ee6b":"**Introduction to the Coursework**\n\nFor this project, the aim was to design a function to output a whole circle bearing value (degrees), with the input of two Cartesian Coordinates in the (x1,y1) and (x2,y2) format. The code is in the language \u2018Python\u2019, with the notebook displayed through the website \u2018Kaggle\u2019. ","51cbfc5c":"**Converting the Mathematics to Python Code**\n\nFor the calculation of the whole circle bearing, the dx and dy values can be calculated by using the subtract (-) operator to subtract the x and y variables. The x and y variables do need to be inputted by the user, so coding input statements for x1,y1,x2,y2 will be needed. \n\nThe second part of the calculation involving \u2018arctan\u2019, will be carried out by the function math.atan(dx\/dy). This will require the use of the library \u2018math\u2019, which because code is read top-down, will be imported at the start of the code block. \n\nThe conversions that are dependent on if the dx and dy values are positive or negative will be controlled using if,elif and else conditional statements. To expand the conditional statements, \u2018and\u2019 will be used. When using this code, indentation and order of code will be key and should be managed well. \n\nFinally, mathematical errors need to be accounted for. If the inputted values lead to divisions by 0, the code will produce an error and this needs to controlled using if,elif and else statements again. For example, in the situation where dx and dy are equal to 0, the whole circle bearing cannot be calculated. Also, the function math.degrees will be required as, the whole circle bearing should be in degrees not radians, which the math.atan function outputs. Math.degrees simply converts from radians to degrees. This also requires the \u2018math\u2019 library. \n\nAll of this will be executed by a created function under the name of 'bearing'. \n","fa31891b":"**Testing Summary**\n\nDisplayed in a Microsoft Excel Spreadsheet below.\n\n![Testing Data.png](attachment:a3c88b31-5148-4dd9-bd53-36e0450bd722.png)\n\nFor all nine parts of the code block, the code passed testing meaning the function works and produces a whole circle bearing in degrees, when inputted two Cartesian Coordinates in the (x1,y1) and (x2,y2) format.","8949a175":"**Conclusion**\n\nIn summary, from testing, it is evident that the code function produced works successfully both in outputting the correct answers, and without producing any errors. \n\nAll the code is displayed in the Kaggle Notebook with markdown and comments explaining all the mathematics, code, and testing, with diagrams as well as tables to aid the explanation. \n\n"}}