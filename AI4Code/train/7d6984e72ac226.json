{"cell_type":{"8be4f0d2":"code","d7ed455a":"code","a08ebe02":"code","08dabc19":"code","317299f7":"code","31b3a3f9":"code","1177a93c":"code","50974e38":"code","eab85f9e":"markdown","07712013":"markdown","7ecc0f25":"markdown","7f274ca7":"markdown"},"source":{"8be4f0d2":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error","d7ed455a":"# \u0427\u0442\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nX = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv', index_col='Id')\nX_test_full = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv', index_col='Id')\n\n# \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0441 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u043c\u0438 \u0446\u0435\u043b\u0435\u0432\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445\nX.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny = X.SalePrice              \nX.drop(['SalePrice'], axis=1, inplace=True)\n\n# \u0412\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n\n# \u0412\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445\u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0441 \u043d\u0438\u0437\u043a\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c\u044e\nlow_cardinality_cols = [cname for cname in X_train_full.columns if X_train_full[cname].nunique() < 10 and \n                        X_train_full[cname].dtype == \"object\"]\n\n# \u0426\u0438\u0444\u0440\u043e\u0432\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\nnumeric_cols = [cname for cname in X_train_full.columns if X_train_full[cname].dtype in ['int64', 'float64']]\n\n# \u0412\u044b\u0434\u0435\u043b\u044f\u0435\u043c \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\nmy_cols = low_cardinality_cols + numeric_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()\nX_full = X[my_cols].copy()\n\n# One-hot encode\nX_train = pd.get_dummies(X_train)\nX_valid = pd.get_dummies(X_valid)\nX_test = pd.get_dummies(X_test)\nX_full = pd.get_dummies(X_full)\nX_full, X_train = X_full.align(X_train, join='left', axis=1)\nX_train, X_valid = X_train.align(X_valid, join='left', axis=1)\nX_train, X_test = X_train.align(X_test, join='left', axis=1)\n","a08ebe02":"X_test.info()","08dabc19":"#\u0424\u0443\u043d\u043a\u0446\u0438\u044f\ndef my_model(n_est, learn_rate):\n    my_model_2 = XGBRegressor(n_estimators=n_est, learning_rate=learn_rate) # Your code here\n    my_model_2.fit(X_train, y_train)\n    predictions_2 = my_model_2.predict(X_valid)\n    mae_2 = mean_absolute_error(predictions_2, y_valid)\n    return mae_2","317299f7":"#\u0420\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c MAE \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\ndf = pd.DataFrame(columns = ['n_estimators','learning_rate','mae'])\ni_list = []\nj_list = []\nmae_list = []\nfor i in range(600,1600,100):\n    for j in range(5, 50, 5):\n        mae = my_model(i, j\/100)\n        i_list.append(i)\n        j_list.append(j\/100)\n        mae_list.append(mae)\ndf['n_estimators'] = i_list\ndf['learning_rate'] = j_list  \ndf['mae'] = mae_list  \ndf.sort_values(by=['mae']).head()","31b3a3f9":"# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\nmy_model_2 = XGBRegressor(n_estimators=1000, learning_rate=0.05) # Your code here\n\n# \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\nmy_model_2.fit(X_train, y_train) # Your code here\n\n# \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\npredictions_2 = my_model_2.predict(X_valid) # Your code here\n\n# \u0420\u0430\u0441\u0441\u0447\u0435\u0442 MAE\nmae_2 = mean_absolute_error(predictions_2, y_valid) # Your code here\n\n# MAE\nprint(\"Mean Absolute Error:\" , mae_2)","1177a93c":"#\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0441\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\nmy_model_2 = XGBRegressor(n_estimators=1000, learning_rate=0.05) \n\nmy_model_2.fit(X_full, y)\n\npreds_test = my_model_2.predict(X_test)","50974e38":"output = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': preds_test})\noutput.to_csv('housing.csv', index=False)","eab85f9e":"## \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432","07712013":"## \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","7ecc0f25":"## \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","7f274ca7":"## \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438"}}