{"cell_type":{"49b55508":"code","922b7caf":"code","f4ca512c":"code","ebe31758":"code","254eb10a":"code","8baa5d71":"code","2eeae002":"code","5b07e58e":"code","ec43af61":"code","957241f1":"code","c697ac54":"markdown"},"source":{"49b55508":"# A system that uses a genetic algorithm to maximize a function of many variables\nimport random\nimport sys\nimport math\nfrom math import *\nfrom decimal import Decimal, localcontext\n\n# Simpler fitness_function of two variables with a maximum at (x=1, y=2)\ndef simple_fitness_function(x, y):\n    return - (x**2) + (2 * x) - (y ** 2) + (4 * y)\n#     return  -x**2-y**2 - 2*x*y","922b7caf":"# Takes a function and list of arguments, applies function to arguments\ndef evaluate_generation(population):\n    scores = []\n    total = 0\n    for individual in population:\n        r = simple_fitness_function(individual[0], individual[1])\n        scores.append(r)\n        total += r\n        \n    avg = total \/ len(scores)\n    return scores, avg","f4ca512c":"# Create child from parent\ndef mutate(individual):\n    new = []\n    for attribute in individual:\n        new.append(attribute + random.normalvariate(0, attribute + .1))  # Random factor of normal distribution\n    return new","ebe31758":"# Given a population, return the best individual and the associated value\ndef find_best(population):\n    best = None\n    val = None\n    for individual in population:\n        if len(individual) == 2:\n            r = simple_fitness_function(individual[0], individual[1])\n            try:\n                if r > val:\n                    best = individual\n                    val = r\n            except:  # On the first run, set the result as best\n                    best = individual\n                    val = r\n    return best, val","254eb10a":"# Create a population of p lists of [0, 0, ..., 0] of length n\ndef initialize(n, p):\n    pop = [[0] * n]\n    for i in range(p):\n        pop.append(mutate(pop[0]))\n    return pop","8baa5d71":"# Handle the output of the genetic algorithm\ndef termination(best, val, total_iterations, population_size, num_attributes):\n    best = [round(x, 3) for x in best]  #  Round for printing\n    print(\"Ran\", total_iterations, \"iterations on a population of\", population_size)\n    print(\"The optimal input is\", best, \"with a value of\", round(val, 3))","2eeae002":"num_attributes = 2  ###  z = f(x,y)\npopulation_size = 1000\ntotal_iterations = 1000\n\npopulation = initialize(num_attributes, population_size)\nfor iteration in range(total_iterations):\n    scores, avg = evaluate_generation(population)\n    \n    deleted = 0\n    ### selection\n    new_population = []\n    for i in range(len(population)):\n        if scores[i] < avg:\n            deleted += 1\n        else:\n            new_population.append(population[i])\n    \n    #mutation\n    for i in range(deleted):\n        new_population.append(mutate(new_population[i % len(new_population)]))\n    \n    population = new_population\nbest, val = find_best(population)\ntermination(best, val, total_iterations, population_size, num_attributes)","5b07e58e":"# plot \nfrom mpl_toolkits import mplot3d\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef f(x, y):\n    return -x**2+2*x-y**2+4*y\n#     return -x**2-y**2 - 2*x*y\n\n# f2 = np.vectorize(f)\n\nx = np.linspace(-100, 100, 100)\ny = np.linspace(-100, 100, 100)\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\nfig = plt.figure()\nax = plt.axes(projection='3d')\nax.contour3D(X, Y, Z, 100, cmap='binary')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nfig","ec43af61":"ax.scatter3D(best[0], best[1], val, c='red', cmap='viridis')\nax.view_init(60, 20)\nfig","957241f1":"ax = plt.axes(projection='3d')\nax.plot_surface(X, Y, Z, rstride=1, cstride=1,\n                cmap='viridis', edgecolor='none')\nax.set_title('surface')\n# ax.scatter3D(best[0], best[1], val, c='red', cmap='viridis');\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')","c697ac54":"# Consider the function: z = f(x,y) -x^2+2x-y^2+4y\n# Find (x*,y*) to z is maximum"}}