{"cell_type":{"0f531083":"code","49729e02":"code","6e38b51c":"code","45ec810a":"code","9f85fe8c":"code","54d9801b":"code","7a492ac7":"code","b70818cc":"code","ff7e9e35":"code","b960b86d":"code","b9077666":"code","dd761711":"code","6ed71f50":"code","31bfc05e":"code","ca733464":"code","be533433":"code","f68fea9c":"code","defcd47e":"code","caee6883":"code","cf5410cb":"code","d1172d02":"code","a8234701":"code","edf3920e":"code","db78960f":"code","e9cc4c76":"code","dbdc872b":"code","728cd792":"code","b37091e0":"code","5426acb0":"code","44ce1653":"code","944b17a9":"code","5d8bd9a6":"code","87e2ece8":"code","02b64c87":"code","cbef2a8c":"code","9b899674":"code","c67f9496":"code","e9d69ad4":"code","85244187":"code","89b6b539":"code","96034892":"code","7dc8fcb2":"code","1e31a67f":"code","ad68957d":"code","6ded02bf":"code","c41a474f":"code","a4b5c871":"code","b708436e":"code","d24fbc63":"code","689f48c6":"code","6c71b325":"code","74483f1d":"code","b7ef5103":"code","ea8d9b05":"code","738b3451":"markdown","db52d08e":"markdown"},"source":{"0f531083":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","49729e02":"df_rows = pd.read_csv(\"..\/input\/train.csv\")","6e38b51c":"df_rows.head()","45ec810a":"df_rows.describe()","9f85fe8c":"survived_sex = df_rows[df_rows['Survived']==1]['Sex'].value_counts()\nprint(survived_sex)\ndead_sex = df_rows[df_rows['Survived']==0]['Sex'].value_counts()\nprint(dead_sex)\ndf = pd.DataFrame([survived_sex,dead_sex],index = ['Survived','Dead'])\ndf.plot(kind='bar',stacked=True, figsize=(15,8))","54d9801b":"import matplotlib.pyplot as plt\nx = np.random.random_integers(1, 100, 5)\nprint(x)\nplt.hist(x, bins=10)\nplt.ylabel('No of times')\nplt.show()","7a492ac7":"#How about survival and age \nfigure = plt.figure(figsize=(15,8))\nplt.hist([df_rows[df_rows['Survived']==1]['Age'],df_rows[df_rows['Survived']==0]['Age']], stacked=True, color = ['g','r'],\n         bins = 30,label = ['Survived','Dead'])\nplt.xlabel('Age')\nplt.ylabel('Number of passengers')\nplt.legend()","b70818cc":"#What do you think about fare?\nfigure = plt.figure(figsize=(15,8))\nplt.hist([df_rows[df_rows['Survived']==1]['Fare'],df_rows[df_rows['Survived']==0]['Fare']], stacked=True, color = ['g','r'],\n         bins = 30,label = ['Survived','Dead'])\nplt.xlabel('Fare')\nplt.ylabel('Number of passengers')\nplt.legend()","ff7e9e35":"plt.figure(figsize=(15,8))\nax = plt.subplot()\nax.scatter(df_rows[df_rows['Survived']==1]['Age'],df_rows[df_rows['Survived']==1]['Fare'],c='green',s=40)\nax.scatter(df_rows[df_rows['Survived']==0]['Age'],df_rows[df_rows['Survived']==0]['Fare'],c='red',s=40)\nax.set_xlabel('Age')\nax.set_ylabel('Fare')\nax.legend(('survived','dead'),scatterpoints=1,loc='upper right',fontsize=15,)","b960b86d":"ax = plt.subplot()\nax.set_ylabel('Average fare')\ndf_rows.groupby('Pclass').mean()['Fare'].plot(kind='bar',figsize=(15,8), ax = ax)","b9077666":"#What are you priors about survival and class of a passenger\nsurvived_embark = df_rows[df_rows['Survived']==1]['Embarked'].value_counts()\ndead_embark = df_rows[df_rows['Survived']==0]['Embarked'].value_counts()\ndf = pd.DataFrame([survived_embark,dead_embark])\ndf.index = ['Survived','Dead']\ndf.plot(kind='bar',stacked=True, figsize=(15,8))","dd761711":"#What are you priors about survival and class of a passenger\nsurvived_embark = df_rows[df_rows['Survived']==1]['Pclass'].value_counts()\ndead_embark = df_rows[df_rows['Survived']==0]['Pclass'].value_counts()\ndf = pd.DataFrame([survived_embark,dead_embark])\ndf.index = ['Survived','Dead']\ndf.plot(kind='bar',stacked=True, figsize=(15,8))","6ed71f50":"#Let us look at both training and test dataset now\ndef get_combined_data():\n    # reading train data\n    train = pd.read_csv('..\/input\/train.csv')\n    \n    # reading test data\n    test = pd.read_csv('..\/input\/test.csv')\n\n    # extracting and then removing the targets from the training data \n    targets = train.Survived\n    train.drop('Survived',1,inplace=True)\n    \n\n    # merging train data and test data for future feature engineering\n    combined = train.append(test)\n    combined.reset_index(inplace=True)\n    combined.drop('index',inplace=True,axis=1)\n    \n    return combined","31bfc05e":"combined = get_combined_data()\ncombined.shape","ca733464":"combined.head()","be533433":"#let us now try and get some more information\ndef get_titles():\n\n    global combined\n    \n    # we extract the title from each name\n    combined['Title'] = combined['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())\n    \n    # a map of more aggregated titles\n    Title_Dictionary = {\n                        \"Capt\":       \"Officer\",\n                        \"Col\":        \"Officer\",\n                        \"Major\":      \"Officer\",\n                        \"Jonkheer\":   \"Royalty\",\n                        \"Don\":        \"Royalty\",\n                        \"Sir\" :       \"Royalty\",\n                        \"Dr\":         \"Officer\",\n                        \"Rev\":        \"Officer\",\n                        \"the Countess\":\"Royalty\",\n                        \"Dona\":       \"Royalty\",\n                        \"Mme\":        \"Mrs\",\n                        \"Mlle\":       \"Miss\",\n                        \"Ms\":         \"Mrs\",\n                        \"Mr\" :        \"Mr\",\n                        \"Mrs\" :       \"Mrs\",\n                        \"Miss\" :      \"Miss\",\n                        \"Master\" :    \"Master\",\n                        \"Lady\" :      \"Royalty\"\n\n                        }\n    \n    # we map each title\n    combined['Title'] = combined.Title.map(Title_Dictionary)","f68fea9c":"get_titles()\ncombined.head()","defcd47e":"#Playing with ages a bit more creatively\ngrouped = combined.groupby(['Sex','Pclass','Title'])\ngrouped.median()","caee6883":"def process_age():\n    \n    global combined\n    \n    # a function that fills the missing values of the Age variable\n    \n    def fillAges(row):\n        if row['Sex']=='female' and row['Pclass'] == 1:\n            if row['Title'] == 'Miss':\n                return 30\n            elif row['Title'] == 'Mrs':\n                return 45\n            elif row['Title'] == 'Officer':\n                return 49\n            elif row['Title'] == 'Royalty':\n                return 39\n\n        elif row['Sex']=='female' and row['Pclass'] == 2:\n            if row['Title'] == 'Miss':\n                return 20\n            elif row['Title'] == 'Mrs':\n                return 30\n\n        elif row['Sex']=='female' and row['Pclass'] == 3:\n            if row['Title'] == 'Miss':\n                return 18\n            elif row['Title'] == 'Mrs':\n                return 31\n\n        elif row['Sex']=='male' and row['Pclass'] == 1:\n            if row['Title'] == 'Master':\n                return 6\n            elif row['Title'] == 'Mr':\n                return 41.5\n            elif row['Title'] == 'Officer':\n                return 52\n            elif row['Title'] == 'Royalty':\n                return 40\n\n        elif row['Sex']=='male' and row['Pclass'] == 2:\n            if row['Title'] == 'Master':\n                return 2\n            elif row['Title'] == 'Mr':\n                return 30\n            elif row['Title'] == 'Officer':\n                return 41.5\n\n        elif row['Sex']=='male' and row['Pclass'] == 3:\n            if row['Title'] == 'Master':\n                return 6\n            elif row['Title'] == 'Mr':\n                return 26\n    \n    combined.Age = combined.apply(lambda r : fillAges(r) if np.isnan(r['Age']) else r['Age'], axis=1)\n    ","cf5410cb":"process_age()","d1172d02":"combined.info()\n","a8234701":"def process_names():\n    \n    global combined\n    # we clean the Name variable\n    combined.drop('Name',axis=1,inplace=True)\n    \n    # encoding in dummy variable\n    titles_dummies = pd.get_dummies(combined['Title'],prefix='Title')\n    combined = pd.concat([combined,titles_dummies],axis=1)\n    \n    # removing the title variable\n    combined.drop('Title',axis=1,inplace=True)","edf3920e":"process_names()\ncombined.head()","db78960f":"def process_fares():\n    \n    global combined\n    # there's one missing fare value - replacing it with the mean.\n    combined.Fare.fillna(combined.Fare.mean(),inplace=True)","e9cc4c76":"process_fares()\ncombined.head()","dbdc872b":"def process_embarked():\n    \n    global combined\n    # two missing embarked values - filling them with the most frequent one (S)\n    combined.Embarked.fillna('S',inplace=True)\n    \n    # dummy encoding \n    embarked_dummies = pd.get_dummies(combined['Embarked'],prefix='Embarked')\n    combined = pd.concat([combined,embarked_dummies],axis=1)\n    combined.drop('Embarked',axis=1,inplace=True)","728cd792":"process_embarked()\ncombined.head()","b37091e0":"def process_cabin():\n    \n    global combined\n    \n    # replacing missing cabins with U (for Uknown)\n    combined.Cabin.fillna('U',inplace=True)\n    \n    # mapping each Cabin value with the cabin letter\n    combined['Cabin'] = combined['Cabin'].map(lambda c : c[0])\n    \n    # dummy encoding ...\n    cabin_dummies = pd.get_dummies(combined['Cabin'],prefix='Cabin')\n    \n    combined = pd.concat([combined,cabin_dummies],axis=1)\n    \n    combined.drop('Cabin',axis=1,inplace=True)","5426acb0":"process_cabin()\ncombined.head()","44ce1653":"combined.info()","944b17a9":"def process_sex():\n    \n    global combined\n    # mapping string values to numerical one \n    combined['Sex'] = combined['Sex'].map({'male':1,'female':0})","5d8bd9a6":"process_sex()\ncombined.head()","87e2ece8":"def process_pclass():\n    \n    global combined\n    # encoding into 3 categories:\n    pclass_dummies = pd.get_dummies(combined['Pclass'],prefix=\"Pclass\")\n    \n    # adding dummy variables\n    combined = pd.concat([combined,pclass_dummies],axis=1)\n    \n    # removing \"Pclass\"\n    \n    combined.drop('Pclass',axis=1,inplace=True)","02b64c87":"process_pclass()","cbef2a8c":"combined.dtypes","9b899674":"def process_ticket():\n    \n    global combined\n    \n    # a function that extracts each prefix of the ticket, returns 'XXX' if no prefix (i.e the ticket is a digit)\n    def cleanTicket(ticket):\n        ticket = ticket.replace('.','')\n        ticket = ticket.replace('\/','')\n        ticket = ticket.split()\n        ticket = map(lambda t : t.strip() , ticket)\n        ticket = list(filter(lambda t : not t.isdigit(), ticket))\n        if len(ticket) > 0:\n            return ticket[0]\n        else: \n            return 'XXX'\n    \n\n    # Extracting dummy variables from tickets:\n\n    combined['Ticket'] = combined['Ticket'].map(cleanTicket)\n    tickets_dummies = pd.get_dummies(combined['Ticket'],prefix='Ticket')\n    combined = pd.concat([combined, tickets_dummies],axis=1)\n    combined.drop('Ticket',inplace=True,axis=1)","c67f9496":"process_ticket()","e9d69ad4":"def process_family():\n    \n    global combined\n    # introducing a new feature : the size of families (including the passenger)\n    combined['FamilySize'] = combined['Parch'] + combined['SibSp'] + 1\n    \n    # introducing other features based on the family size\n    combined['Singleton'] = combined['FamilySize'].map(lambda s : 1 if s == 1 else 0)\n    combined['SmallFamily'] = combined['FamilySize'].map(lambda s : 1 if 2<=s<=4 else 0)\n    combined['LargeFamily'] = combined['FamilySize'].map(lambda s : 1 if 5<=s else 0)","85244187":"process_family()","89b6b539":"combined.head()","96034892":"def scale_all_features():\n    \n    global combined\n    \n    features = list(combined.columns)\n    features.remove('PassengerId')\n    combined[features] = combined[features].apply(lambda x: x\/x.max(), axis=0)\n    \n    print('Features scaled successfully !')","7dc8fcb2":"combined.dtypes","1e31a67f":"scale_all_features()\ncombined.head()","ad68957d":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.cross_validation import StratifiedKFold\nfrom sklearn.grid_search import GridSearchCV\nfrom sklearn.ensemble import ExtraTreesClassifier","6ded02bf":" #Split data to validation and train\ntrain = pd.read_csv('..\/input\/train.csv')\n    \n    # reading test data\ntest = pd.read_csv('..\/input\/test.csv')\nm = len(train)\nn = len(test)\n\nx_train = combined[0:m]\nx_test = combined[m:m + n]\n\ntrain_percent = 0.80\nvalidate_percent = 0.20\n\n\nm = len(x_train)\ny_train = train['Survived']\nx_train = x_train[:int(train_percent * m)]\nx_validation = x_train[int(validate_percent * m):]\ny_train = y_train[:int(train_percent * m)]\ny_validation = y_train[int(validate_percent * m):]","c41a474f":"def get_result(predicted):\n    print(\"F1_Score: \" + str(f1_score(y_validation, predicted, average='macro')))\n    print(\"accuracy: \" + str(accuracy_score(y_validation, predicted)))\n    print(\"AUC: \" + str(roc_auc_score(y_validation, predicted)))\n    print(\"recall: \" + str(recall_score(y_validation, predicted)))\n    return","a4b5c871":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Random forest\nfrom sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\nrfc = rfc.fit(x_train, y_train)\n#y_predicted_validation_rfc = rfc.predict(x_validation)\ny_prediction_test_rfc = rfc.predict(x_test)\n\nprint(\"- Random forest -\")\nget_result(y_predicted_validation_rfc)","b708436e":"y_prediction_test_rfc             ","d24fbc63":"x_test.head()","689f48c6":"raw_data = {'PassengerId' : x_test.PassengerId, 'Survived' : y_prediction_test_rfc}","6c71b325":"df = pd.DataFrame(raw_data, columns = ['PassengerId', 'Survived'])\n","74483f1d":"df.head()","b7ef5103":"df.to_csv('submission.csv', encoding='utf-8', mode = 'w', index=False)","ea8d9b05":"data = pd.read_csv('submission.csv')\ndata.head()","738b3451":"** Things that can be derived based on the data**\n* Lets try to find the relation between gender and survival. In short categorize survived\/ dead based on  male\/females.\n* Age column has missing values, so it means age is missing for some of the passengers.","db52d08e":"**Gender-Survival relation**"}}