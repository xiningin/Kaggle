{"cell_type":{"0146f66b":"code","0ec5388c":"code","f445a4ef":"code","7c1fac04":"code","a01d03af":"code","25959df9":"code","480c85b5":"code","f65c1ed4":"code","7752219b":"code","9aadfb58":"code","b7e3f3cf":"code","2065813b":"code","66365546":"code","03aa29f6":"code","a49624cf":"code","87f08b68":"code","f1bd0ca2":"code","55b813d4":"code","7c175af4":"code","35c5d2a5":"markdown","027d3101":"markdown","4c1a5516":"markdown","64ad1557":"markdown","6b5de9bd":"markdown","408f6df6":"markdown","cb007441":"markdown","2bf72f31":"markdown","3e3cfad6":"markdown","65f14c7e":"markdown","e4143629":"markdown","49db2531":"markdown","a678aef6":"markdown","8ed02ebd":"markdown","0aecc902":"markdown"},"source":{"0146f66b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0ec5388c":"import matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n# classificador\nfrom sklearn.linear_model import SGDClassifier\n\n# selecao de dados de treino e teste\nfrom sklearn.model_selection import train_test_split\n\n# exibir metricas\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\n\n# vetorizador\nfrom sklearn.feature_extraction.text import TfidfVectorizer","f445a4ef":"print('reading dataset')\nbase = pd.read_csv('..\/input\/dataset-lyrics-music-mini\/dataset-lyrics-musics-mini.csv')","7c1fac04":"def eda(dataset, title='EDA'):\n    print(f'=={title}==')\n    print('INFO \\n')\n    print('\\nHEAD \\n', dataset.head())\n    print('\\nTAIL \\n', dataset.tail())\n    print('\\nDESCRIBE \\n', dataset.describe())\n    print('\\n5 SAMPLES \\n', dataset.sample(5))\n    print('\\nNULLS QTY \\n', dataset.isnull().sum().sum())\n    print('\\nSHAPE \\n', dataset.shape)","a01d03af":"eda(base)","25959df9":"print('setup X (feature), y (target) and nomes [singer names] variables')\nX = base['letra']\ny = base['cantorId']\nnomes = base['cantorNome'].unique()","480c85b5":"print(f'Cantores [singers] in this dataset:\\n {nomes}')","f65c1ed4":"print('converting all words to lower case')\npalavras = X.str.lower().str.split()","7752219b":"print('creating a dictionary')\ndicionario = set()\nfor i in palavras:\n    dicionario.update(i)\nminhasPalavras = dict(zip(dicionario, range(len(dicionario))))","9aadfb58":"print(len(minhasPalavras), 'palavras [words]')\nfor i in range(0, 10):\n    print(list(minhasPalavras.items())[i])","b7e3f3cf":"print('splitting train and test data')\nXtreino, Xteste, ytreino, yteste = train_test_split(X, y, test_size=0.3, random_state=42, shuffle=True)","2065813b":"print('vetorizing Train Data')\ntxtvetorizador = TfidfVectorizer()\n\nvetorXtreino = txtvetorizador.fit_transform(Xtreino)","66365546":"# treinando\nprint('training')\nmodelo = SGDClassifier(loss='hinge', penalty='l2', alpha=1e-3, random_state=42, max_iter=5, tol=None)\nmodelo.fit(vetorXtreino, ytreino)","03aa29f6":"print('vetorizing Test Data')\nvetorXteste = txtvetorizador.transform(Xteste)","a49624cf":"print('predicting')\nprevisao = modelo.predict(vetorXteste)","87f08b68":"print(metrics.classification_report(yteste.values, previsao, target_names=nomes))\n\nprint(nomes, modelo.classes_)","f1bd0ca2":"confusion_matrix = confusion_matrix(yteste.values, previsao)\nprint(confusion_matrix)\nplt.matshow(confusion_matrix, cmap='RdBu_r')\nplt.title(\"Matriz de confus\u00e3o\")\nplt.colorbar()\nplt.ylabel(\"Classifica\u00e7\u00f5es corretas\")\nplt.xlabel(\"Classifica\u00e7\u00f5es\")","55b813d4":"print(nomes)\npd.crosstab(yteste.values, previsao, rownames=['Real'], colnames=['Previsto'], margins=True)","7c175af4":"# insert new lyrics snatch \nnovosTrechos = [\n    \"we used to say we live and let live\",\n    \"Proyecto de vida en com\u00fanlLo s\u00e9 todo el abismo que ves\",\n    \"Inch worm, inch worm. Measuring the marigolds\"\n]\n# create a new txt vectorized \nnovoVetor = txtvetorizador.transform(novosTrechos)\n# build a  predict\nprevisao = modelo.predict(novoVetor)\n# display predicts\nprint('Previs\u00f5es [predicts]')\nfor trecho, artista in zip(novosTrechos, previsao):\n    print(f'Trecho [snatch ]: {trecho}')\n    print(f'Artista previsto [artirst predicted]: {nomes[artista]}')","35c5d2a5":"E vamos analisar como performou nosso algorimo SGDClassifier em nossos dados de teste","027d3101":"Configurando as variaveis X (nossa fonte), y(nosso objetivo) e nomes (que sao os nomes dos cantores existentes neste mini dataset)","4c1a5516":"Fun\u00e7\u00e3o para explorar e conhecer melhor os dados","64ad1557":"Vou tambem vetorizar o dados de testes","6b5de9bd":"Agora eu irei criar um dicionario de dados onde eu irei informar ao algoritmo todas as palavras existentes no meu dataset com seu posicionamento neste dicionario.","408f6df6":"**Separando dados de treino e teste**","cb007441":"Pacotes necess\u00e1rios para este exemplo","2bf72f31":"Sabemos que machine learning \u00e9 matem\u00e1tica, ent\u00e3o teremos que dizer que o conjunto de palavras destas letras ser\u00e3o conjuntos num\u00e9ricos.\n\nE \u00e9 importante tamb\u00e9m destacar que diferente \u00e9 Diferente de DIFERENTE, ent\u00e3o iremos converter todas as palavras em min\u00fasculas","3e3cfad6":"Vou utilizar o classificador SGDClassifier, mas poderia ser outros algoritmos. ","65f14c7e":"Agora eu irei vetorizar todos os dados de treino, utilizando a TfidfVectorizes do sklearn","e4143629":"E agora, vou criar a previsao do possivel cantor..","49db2531":"E para finalizar, vamos inserir alguns trechos de m\u00fasicas e vamos ver se o algor\u00edtmo consegue classificar de forma precisa, que \u00e9 o cantor...","a678aef6":"Vou mostrar a mesma matriz de confusao mas com o pandas, talvez fique mais claro de visualizar","8ed02ebd":"Veja, pra ilustrar analisaremos somente David Bowie (0) da lista real e confira como o nosso modelo classificou:\n100 instancias como dbowie e que realmente s\u00e3o dbowie\n33 instancias como paul mas que realmente s\u00e3o dbowie\n0 instancias como pausini \n1 instancia como evanescence mas que realmente \u00e9 dbowie\n6 instancias como AC-DC mas que realmente s\u00e3o dbowie\n\n... e assim por diante","0aecc902":"# Text Classifier - Lyrics and Singers\n\n**Objetivo**: criar um algor\u00edtmo de machine learn para prever o nome do cantor quando informarmos um trecho da letra da m\u00fasica."}}