{"cell_type":{"93a6863b":"code","0a5e8569":"code","1db3dbb7":"code","1a8f0852":"code","2c39ad70":"code","2df039ea":"code","ad3ff3f5":"code","d44235f3":"markdown","91889349":"markdown","4d4c347b":"markdown"},"source":{"93a6863b":"#Load the librarys\nimport plotly\nimport plotly.express as px\nimport pandas as pd #To work with dataset\nimport numpy as np #Math library\nimport seaborn as sns #Graph library that use matplot in background\nimport matplotlib.pyplot as plt #to plot some parameters in seaborn\n# it's a library that we work with plotly\nimport plotly.offline as py \npy.init_notebook_mode(connected=True) # this code, allow us to work with offline plotly version\nimport plotly.graph_objs as go # it's like \"plt\" of matplot\nimport plotly.tools as tls # It's useful to we get some tools of plotly\nimport warnings # This library will be used to ignore some warnings\nfrom collections import Counter # To do counter of some features","0a5e8569":"train = pd.read_json('..\/input\/stanford-covid-vaccine\/train.json',lines=True)\ntest = pd.read_json('..\/input\/stanford-covid-vaccine\/test.json', lines=True)\ntrain","1db3dbb7":"Data_df = pd.DataFrame([['train', len(train)], ['test', len(test)]], columns=['name', 'value'])\ntrace0 = go.Bar(\n        x=[Data_df.name[0]],\n        y=[Data_df.value[0]],\n        name='train number',\n        marker_color='red'\n)\ntrace1 = go.Bar(\n        x=[Data_df.name[1]],\n        y=[Data_df.value[1]],\n        name='test number',\n        marker_color='blue'\n)\ntrace2 = go.Bar(\n        x = [f\"{test['seq_length'].value_counts().index[0]}\"],\n        y = [test['seq_length'].value_counts().values[0]],\n        name='Sequence 130 Number',\n        marker_color='indianred'\n)\ntrace3 = go.Bar(\n        x = [f\"{test['seq_length'].value_counts().index[1]}\"],\n        y = [test['seq_length'].value_counts().values[1]],\n        name='Sequence 107 Number',\n        marker_color='orange'\n)\n\n#Creating the grid\nfig = plotly.subplots.make_subplots(rows=1, cols=2, specs=[[{}, {}]],\n                          subplot_titles=('The amount of Train and Test','Sequence Length in public test set'))\n\n#setting the figs\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 2)\n\nfig['layout'].update(showlegend=True, title='Data Distribution', bargap=0.05)\npy.iplot(fig, filename='custom-sized-subplot-with-subplot-titles')","1a8f0852":"train['mean_reactivity'] = train['reactivity'].apply(lambda x: np.mean(x))\ntrain['mean_deg_Mg_pH10'] = train['deg_Mg_pH10'].apply(lambda x: np.mean(x))\ntrain['mean_deg_Mg_50C'] = train['deg_Mg_50C'].apply(lambda x: np.mean(x))\ntrain['mean_deg_pH10'] = train['deg_pH10'].apply(lambda x: np.mean(x))\ntrain['mean_deg_50C'] = train['deg_50C'].apply(lambda x: np.mean(x))\n#First plot\ntrace0 = go.Histogram(\n    x=train['mean_reactivity'],\n    histnorm='probability',\n    name=\"reactivity\"\n)\n#Second plot\ntrace1 = go.Histogram(\n    x=train['mean_deg_Mg_pH10'],\n    histnorm='probability',\n    name=\"deg_Mg_pH10\"\n)\n#Third plot\ntrace2 = go.Histogram(\n    x=train['mean_deg_Mg_50C'],\n    histnorm='probability',\n    name=\"deg_Mg_50C\"\n)\n#Fourth plot\ntrace3 = go.Histogram(\n    x=train['mean_deg_pH10'],\n    histnorm='probability',\n    name=\"deg_pH10\"\n)\n#Fivth plot\ntrace4 = go.Histogram(\n    x=train['mean_deg_50C'],\n    histnorm='probability',\n    name=\"deg_50C\"\n)\n\n#Creating the grid\nfig = tls.make_subplots(rows=3, cols=2, specs=[[{}, {}], [{}, {}], [{'colspan': 2}, None]],\n                          subplot_titles=('Mean Reactivity',\n                                          'deg_Mg_pH10', \n                                          'Mean deg_Mg_50C',\n                                          'Mean deg_pH10',\n                                          'Distribution of Mean deg_50C in training set'))\n\n#setting the figs\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\nfig.append_trace(trace2, 2, 1)\nfig.append_trace(trace3, 2, 2)\nfig.append_trace(trace4, 3, 1)\nfig['layout'].update(showlegend=True, title='Predictive Values Distribuition', bargap=0.05)\npy.iplot(fig, filename='custom-sized-subplot-with-subplot-titles')","2c39ad70":"trace0 = go.Histogram(\n    x=train['signal_to_noise'],\n    histnorm='probability',\n    name=\"Good Credit\"\n)\n\ndata = [trace0]\n\nlayout = go.Layout(\n    yaxis=dict(\n        title='Count'\n    ),\n    xaxis=dict(\n        title='Signal_to_noise'\n    ),\n    title='Signal_to_noise Distribution'\n)\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='grouped-bar')","2df039ea":"sns.pairplot(data=train,\n             vars=['mean_reactivity',\n                   'mean_deg_Mg_pH10',\n                   'mean_deg_Mg_50C',\n                   'mean_deg_pH10',\n                   'mean_deg_50C'],\n            hue='SN_filter')\nplt.show()","ad3ff3f5":"trace0 = go.Pie(\n            labels=train['SN_filter'].value_counts().index, \n            values=train['SN_filter'].value_counts().values\n)\n\ndata = [trace0]\n\nlayout = go.Layout(\n    title='SN_filter Bar Chart'\n)\n\nfig = go.Figure(data=data, layout=layout)\n\nfig.show()","d44235f3":"# **Signal_to_noise And SN_filter**","91889349":"# **Data**","4d4c347b":"# **Packages**"}}