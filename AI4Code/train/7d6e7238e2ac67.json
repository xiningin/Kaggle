{"cell_type":{"c6ccca44":"code","d44c8de1":"code","a992c6cf":"code","1c99f16e":"code","70b6c615":"code","772c7a99":"code","1f3eaa59":"code","bdc7a551":"code","396b97b4":"code","a0492938":"code","8004ec51":"code","be57f9a3":"code","3e47afcb":"code","fada99de":"code","5a613ed5":"code","80b6525f":"code","1a9207b2":"code","a537afca":"code","f3e809d0":"code","46be6cca":"code","e09ede4a":"code","6043acc9":"code","86005cb7":"code","33d58a15":"code","bb4e47b6":"code","ed1f0c76":"code","dfaaf6b0":"code","f7402075":"code","4176e8e9":"code","5829783e":"code","dfe849db":"code","c7b380db":"code","f1e9c9bf":"markdown","00290270":"markdown","173b2091":"markdown","c4ed5148":"markdown","25385f2a":"markdown","4b794a87":"markdown","be1cf25b":"markdown","84b76164":"markdown","c7c1596a":"markdown","e98d8e61":"markdown","88220804":"markdown","d698f2d4":"markdown","657745b3":"markdown","4bc87b2f":"markdown","e38e3712":"markdown"},"source":{"c6ccca44":"import numpy as np\nimport pandas as pd\n\nimport warnings\nwarnings.simplefilter('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d44c8de1":"train = pd.read_csv(\"..\/input\/google-quest-challenge\/train.csv\", index_col='qa_id')\ntrain.shape","a992c6cf":"test = pd.read_csv(\"..\/input\/google-quest-challenge\/test.csv\", index_col='qa_id')\ntest.shape","1c99f16e":"train.head(3).T","70b6c615":"target_columns = [\n    'question_asker_intent_understanding',\n    'question_body_critical',\n    'question_conversational',\n    'question_expect_short_answer',\n    'question_fact_seeking',\n    'question_has_commonly_accepted_answer',\n    'question_interestingness_others',\n    'question_interestingness_self',\n    'question_multi_intent',\n    'question_not_really_a_question',\n    'question_opinion_seeking',\n    'question_type_choice',\n    'question_type_compare',\n    'question_type_consequence',\n    'question_type_definition',\n    'question_type_entity',\n    'question_type_instructions',\n    'question_type_procedure',\n    'question_type_reason_explanation',\n    'question_type_spelling',\n    'question_well_written',\n    'answer_helpful',\n    'answer_level_of_information',\n    'answer_plausible',\n    'answer_relevance',\n    'answer_satisfaction',\n    'answer_type_instructions',\n    'answer_type_procedure',\n    'answer_type_reason_explanation',\n    'answer_well_written'\n]","772c7a99":"y_train = train[target_columns].copy()\nx_train = train.drop(target_columns, axis=1)\ndel train\n\nx_test = test.copy()\ndel test","1f3eaa59":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer","bdc7a551":"text_encoder = Pipeline([\n    ('Text-TF-IDF', TfidfVectorizer(ngram_range=(1, 3))),\n    ('Text-SVD', TruncatedSVD(n_components = 100))], verbose=True)","396b97b4":"# from https:\/\/www.kaggle.com\/abazdyrev\/use-features-oof\n\nfrom urllib.parse import urlparse\nimport re\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import FunctionTransformer\nfrom category_encoders.one_hot import OneHotEncoder\n\n\n# gives part of string (URL) before '.'\nbefore_dot = re.compile('^[^.]*')\n\ndef transform_url(x):\n    return x.apply(lambda v: re.findall(before_dot, urlparse(v).netloc)[0])\n\nurl_encoder = Pipeline([\n    ('URL-transformer', FunctionTransformer(transform_url, validate=False)),\n    ('URL-OHE', OneHotEncoder(drop_invariant=True))], verbose=True)","a0492938":"# https:\/\/contrib.scikit-learn.org\/categorical-encoding\/\n\nfrom category_encoders.one_hot import OneHotEncoder\n\n\nohe = OneHotEncoder(cols='category', drop_invariant=True)","8004ec51":"from sklearn.preprocessing import StandardScaler\nimport re\n\n\ndef counts(data):\n    out = pd.DataFrame(index=data.index)\n    for column in data.columns:\n        out[column + '_sentences'] = data[column].apply(lambda x: str(x).count('\\n') + 1)\n        out[column + '_words'] = data[column].apply(lambda x: len(str(x).split()))\n        out[column + '_letters'] = data[column].apply(lambda x: len(str(x)))\n        out[column + '_unique_words'] = data[column].apply(lambda x: len(set(str(x).split())))\n    return out\n\ncounters = Pipeline([\n    ('Counters-transformer', FunctionTransformer(counts, validate=False)),\n    ('Counters-std', StandardScaler())], verbose=True)","be57f9a3":"# counts(pd.DataFrame(data={'A': ['abc xyz \\n\\n abc 12345']})).head().T","3e47afcb":"preprocessor = ColumnTransformer([\n    ('Q-T', text_encoder, 'question_title'),\n    ('Q-B', text_encoder, 'question_body'),\n    ('A', text_encoder, 'answer'),\n    ('URL', url_encoder, 'url'),\n    ('Categoty', ohe, 'category'),\n    ('C', counters, ['question_body', 'answer'])], verbose=True)","fada99de":"x_train = preprocessor.fit_transform(x_train)","5a613ed5":"x_test = preprocessor.transform(x_test)","80b6525f":"x_train.shape","1a9207b2":"y_train = y_train.values","a537afca":"# from https:\/\/www.kaggle.com\/c\/google-quest-challenge\/discussion\/126778\n\nfrom scipy.stats import spearmanr\n\n\ndef mean_spearmanr_correlation_score(y, y_pred):\n    spearsum = 0\n    cnt = 0 \n    for col in range(y_pred.shape[1]):\n        v = spearmanr(y_pred[:,col], y[:,col]).correlation\n        if np.isnan(v):\n            continue\n        spearsum += v\n        cnt += 1\n    res = spearsum \/ cnt\n    return res","f3e809d0":"trained_estimators = []\nall_scores = []","46be6cca":"from sklearn.linear_model import RidgeCV\n\n\nridge_grid = RidgeCV(alphas=np.linspace(0.1, 2.0, num=100)).fit(x_train, y_train)\n\nbest_Alpha = ridge_grid.alpha_\nbest_Alpha","e09ede4a":"from sklearn.linear_model import Ridge\nfrom sklearn.model_selection import KFold\nimport math\n\n\nn_splits = 10\n\nscores = []\n\ncv = KFold(n_splits=n_splits, random_state=42)\nfor train_idx, valid_idx in cv.split(x_train, y_train):\n    \n    x_train_train = x_train[train_idx]\n    y_train_train = y_train[train_idx]\n    x_train_valid = x_train[valid_idx]\n    y_train_valid = y_train[valid_idx]\n    \n    estimator = Ridge(alpha=best_Alpha, random_state=42)\n    estimator.fit(x_train_train, y_train_train)\n    trained_estimators.append(estimator)\n    \n    oof_part = estimator.predict(x_train_valid)\n    score = mean_spearmanr_correlation_score(y_train_valid, oof_part)\n    print('Score:', score)\n    scores.append(score)\n\n\nprint('Mean score:', np.mean(scores))\nall_scores.extend(scores)","6043acc9":"import torch\nimport torch.nn as nn\n\nfrom torch.nn import Sequential\nfrom torch.nn import Linear\nfrom torch.nn import ReLU\nfrom torch.nn.utils.weight_norm import weight_norm\n\nfrom torch.nn import MSELoss\nfrom torch.optim import Adam\n\nimport random\n\n\nrandom.seed(42)\nnp.random.seed(42)\ntorch.manual_seed(42)\n\n\nclass PyTorch:\n    \n    def __init__(self, in_features, out_features, n_epochs, patience):\n        self.in_features = in_features\n        self.out_features = out_features\n        self.n_epochs = n_epochs\n        self.patience = patience\n    \n    \n    def init_model(self):\n        \n        # define a model\n        self.model = Sequential(\n            weight_norm(Linear(self.in_features, 128)),\n            ReLU(),\n            weight_norm(Linear(128, 128)),\n            ReLU(),\n            weight_norm(Linear(128, self.out_features)))\n        \n        # initialize model\n        for t in self.model:\n            if isinstance(t, Linear):\n                nn.init.kaiming_normal_(t.weight_v)\n                nn.init.kaiming_normal_(t.weight_g)\n                nn.init.constant_(t.bias, 0)\n        \n        # define loss function\n        self.loss_func = MSELoss()\n        \n        # define optimizer\n        self.optimizer = Adam(self.model.parameters(), lr=1e-3)\n    \n    \n    def fit(self, x_train, y_train, x_valid, y_valid):\n        \n        validate = (x_valid is not None) & (y_valid is not None)\n        \n        self.init_model()\n        \n        x_train_tensor = torch.as_tensor(x_train, dtype=torch.float32)\n        y_train_tensor = torch.as_tensor(y_train, dtype=torch.float32)\n        \n        if validate:\n            x_valid_tensor = torch.as_tensor(x_valid, dtype=torch.float32)\n            y_valid_tensor = torch.as_tensor(y_valid, dtype=torch.float32)\n        \n        min_loss = np.inf\n        counter = 0\n        \n        for epoch in range(self.n_epochs):\n            \n            self.model.train()\n            y_pred = self.model(x_train_tensor)\n            loss = self.loss_func(y_pred, y_train_tensor)\n            \n            loss.backward()\n            self.optimizer.step()\n            self.optimizer.zero_grad()\n            \n            current_loss = loss.item()\n            # print('Epoch %5d \/ %5d. Loss = %.5f' % (epoch + 1, self.n_epochs, current_loss))\n\n            if validate:\n                # calculate loss for validation set\n                self.model.eval()\n                with torch.no_grad():\n                    current_loss = self.loss_func(self.model(x_valid_tensor), y_valid_tensor).item()\n                # print('Epoch %5d \/ %5d. Validation loss = %.5f' % (epoch + 1, self.n_epochs, current_loss))\n            \n            # early stopping\n            if current_loss < min_loss:\n                min_loss = current_loss\n                counter = 0\n            else:\n                counter += 1\n                # print('Early stopping: %i \/ %i' % (counter, self.patience))\n                if counter >= self.patience:\n                    # print('Early stopping at epoch', epoch + 1)\n                    break\n    \n    \n    def predict(self, x):\n        x_tenson = torch.as_tensor(x, dtype=torch.float32)\n        self.model.eval()\n        with torch.no_grad():\n            return self.model(x_tenson).numpy()","86005cb7":"pytorch_params = {\n    'in_features': x_train.shape[1],\n    'out_features': y_train.shape[1],\n    'n_epochs': 2500,\n    'patience': 5\n}","33d58a15":"# estimator = PyTorch(**pytorch_params)\n# estimator.fit(x_train, y_train, None, None)\n# trained_estimators.append(estimator)","bb4e47b6":"from sklearn.model_selection import KFold\nimport math\n\n\nn_splits = 10\n\nscores = []\n\ncv = KFold(n_splits=n_splits, random_state=42)\nfor train_idx, valid_idx in cv.split(x_train, y_train):\n    \n    x_train_train = x_train[train_idx]\n    y_train_train = y_train[train_idx]\n    x_train_valid = x_train[valid_idx]\n    y_train_valid = y_train[valid_idx]\n    \n    estimator = PyTorch(**pytorch_params)\n    estimator.fit(x_train_train, y_train_train, x_train_valid, y_train_valid)\n    trained_estimators.append(estimator)\n    \n    oof_part = estimator.predict(x_train_valid)\n    score = mean_spearmanr_correlation_score(y_train_valid, oof_part)\n    print('Score:', score)\n    scores.append(score)\n\n\nprint('Mean score:', np.mean(scores))\nall_scores.extend(scores)","ed1f0c76":"len(trained_estimators)","dfaaf6b0":"y_pred = []\nfor estimator in trained_estimators:\n    y_pred.append(estimator.predict(x_test))","f7402075":"sum_scores = sum(all_scores)\nweights = [x \/ sum_scores for x in all_scores]","4176e8e9":"from scipy.stats import rankdata\n\n\ndef blend_by_ranking(data, weights):\n    out = np.zeros(data.shape[0])\n    for idx,column in enumerate(data.columns):\n        out += weights[idx] * rankdata(data[column].values)\n    out \/= np.max(out)\n    return out","5829783e":"submission = pd.read_csv(\"..\/input\/google-quest-challenge\/sample_submission.csv\", index_col='qa_id')\n\nout = pd.DataFrame(index=submission.index)\nfor column_idx,column in enumerate(target_columns):\n    \n    # collect all predictions for one column\n    column_data = pd.DataFrame(index=submission.index)\n    for prediction_idx,prediction in enumerate(y_pred):\n        column_data[str(prediction_idx)] = prediction[:, column_idx]\n    \n    out[column] = blend_by_ranking(column_data, weights)","dfe849db":"out.head()","c7b380db":"out.to_csv(\"submission.csv\")","f1e9c9bf":"Train one estimator using full train set","00290270":"## Encode 'url'","173b2091":"## Submit predictions","c4ed5148":"## Blend by ranking","25385f2a":"## PyTorch","4b794a87":"## Count sentences, words, letters, unique words","be1cf25b":"## Fit","84b76164":"## Load data","c7c1596a":"## Encode 'category'","e98d8e61":"Train estimators: one per fold","88220804":"## Transform","d698f2d4":"## Extract target variables","657745b3":"## TF-IDF + SVD for text features","4bc87b2f":"## Predict","e38e3712":"## Ridge"}}