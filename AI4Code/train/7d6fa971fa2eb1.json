{"cell_type":{"9a5e2631":"code","1688e8f5":"code","bde72183":"code","46f40d0a":"code","16bef7a5":"code","70e445ce":"code","2b1a9ae9":"code","4bae4523":"code","5bb7f4ea":"code","fd80b9ed":"code","8743c60f":"code","8ca6cb43":"code","b80c071f":"code","eea8acb4":"code","8c36a137":"code","383fea32":"code","61012926":"code","56fda017":"code","ccccd18b":"code","4cf1c99d":"code","ce303ec5":"code","36ea629d":"code","aea748a8":"code","b9a962fd":"code","7e0cbb25":"code","d831a4d6":"code","dad14a16":"code","9f752ece":"code","91b2f0bb":"code","2f6b6b1b":"code","df49a4fb":"code","c56da071":"code","a88fd281":"code","2b8b8ce3":"code","4a965d3a":"code","f84ad8a7":"code","c66bfc68":"code","fb196111":"code","ca146dc6":"code","acd39add":"code","973c757a":"code","ae4f02a4":"code","88f3576a":"code","23507a5f":"code","aa7b9266":"code","c7013fae":"code","29338a31":"code","02cdf275":"code","a4a3364d":"code","4b75c357":"code","ecb84a5a":"code","b780f42c":"code","96310593":"code","dc86664e":"code","14ec7c07":"code","d912ec6c":"code","fd7ff90b":"code","182e9980":"code","1d27a42d":"code","5fc45629":"code","156f8998":"code","6944f70a":"code","bcb86947":"code","ae05605b":"code","1b3a0769":"code","1ad2f7cc":"code","be035574":"code","9da393e3":"code","2cb244d7":"code","ecb5c490":"code","cc5ffb19":"code","4cad5335":"code","7eb0aae1":"code","0b0199ae":"code","18534998":"code","65fa82a1":"code","5a766316":"code","b1561a80":"code","c04f60a1":"code","33760777":"code","5afb4c2d":"code","f2d6fab7":"code","27350685":"code","2faccba9":"code","f67bc4e6":"code","ebc68562":"code","1eda99bb":"code","3e63cd49":"code","c23e5b68":"code","ad0096d4":"code","f07f2a1e":"code","084e0244":"code","edfbabb0":"code","d98025b4":"code","78dd36db":"code","50cc2c4b":"code","69ea0013":"code","e1a13c1e":"code","6bb9f736":"code","5b2404a8":"code","32e01438":"code","0fb1e908":"code","5063fe2b":"code","acd63189":"code","796e7323":"code","bbf0c5a2":"code","797f3ae7":"code","ee49b923":"code","e0636183":"code","2a80010b":"code","a80abc35":"code","50cd5da5":"code","7e1d5fd1":"code","a80f6244":"code","dabfd29d":"code","b3c226c0":"code","f6bd56f1":"code","7f3d1c55":"code","6e15429c":"code","a9bb5ded":"code","0d6ca26b":"code","2aa1c05d":"code","8e82e0a3":"code","605097cd":"code","74fd6db3":"code","6f10c154":"code","f6af939b":"code","f394f9a2":"code","abe9ff41":"code","be424ca5":"code","27610f0c":"code","6d989c69":"code","930e0afe":"code","3d9b223b":"code","a8fcfe8a":"code","83cad073":"code","431fba03":"code","d820fc65":"code","da03efbe":"code","180b2459":"code","b466caef":"code","542c1494":"code","a87e7e6c":"code","659ffec5":"code","459ecda9":"code","5fc620bf":"code","81ba92e1":"code","66ab701b":"code","9341628c":"code","924f420d":"code","e897f04b":"code","456e628a":"code","ba4efe54":"code","4e8dc54c":"code","a5c35745":"code","69aaf36a":"code","7680e6fa":"code","933ea12c":"code","b41ceabb":"code","fed9789b":"code","0e4f36a5":"code","9b075ba9":"code","d123c91d":"code","a415f5b3":"code","9d6fd3f4":"code","b6e3c12e":"code","4540a0e2":"code","d228c853":"code","850a369f":"code","fcac0a9b":"code","3db15616":"code","6e175040":"code","21e7afa8":"code","416db323":"code","750bc693":"code","1147a7a6":"code","9c3bdedc":"code","bd3201a9":"code","a5e490b3":"code","3193cfc4":"code","cac7cfc7":"code","e005ceaa":"code","581d2ec8":"code","b214675e":"code","27f313a4":"code","429c7ded":"code","8668ca13":"code","736baaac":"code","5bcf4052":"code","b1fc4c6c":"code","c445c240":"code","668ef2ec":"code","ba601a4f":"code","06309c4a":"code","18b6b374":"code","f331c3c0":"code","ff8531a0":"code","d03ccffb":"code","51e8a851":"code","10ec869b":"code","1048842f":"code","d3a43129":"code","4f2a391c":"code","a2ba0168":"code","677a138a":"code","a00f355a":"code","055c3488":"code","b08dd23e":"code","cc1d2f2f":"code","6a73a8ad":"code","071c7019":"code","b800668a":"code","6e6742b9":"code","333ca239":"code","02f817ed":"code","f1148880":"code","ee42ac60":"code","7547bff3":"code","a4939f5c":"code","575d7f67":"code","cb826131":"code","51433b9c":"code","d8e46552":"code","9b4fa108":"code","8274d734":"code","2f5f62c1":"code","d6dd8b69":"code","441bc7e9":"code","0f26968d":"code","fcfdad3d":"code","783369ab":"code","c32ae0f0":"code","93e5d9ef":"code","103dfce8":"code","1d227135":"code","7badc6f0":"code","02f8aafd":"code","ad95e795":"code","3dd84a5d":"code","9ff83ac4":"code","fd73f901":"code","2886a7af":"code","dd0329a1":"code","e2f85218":"code","c4959563":"code","0c5363b1":"code","bbe3b86c":"code","161398b0":"code","aceba486":"code","267cd999":"code","37852bfe":"code","529a3088":"code","1bf31331":"code","7335fc00":"code","21602365":"code","e74526c4":"code","1bc55073":"code","6c88cb31":"code","26afb8d2":"code","535966bc":"code","b1cbaeaf":"code","657f6177":"code","e346e844":"code","9f089ac1":"code","69b61dca":"code","bd335d6c":"code","4b976208":"code","725a0c32":"code","b9d5c7e8":"code","3c4911f3":"code","e2ce63fa":"code","2bf47fb3":"code","1b10de0d":"code","1b8f4abf":"code","23a9b93f":"code","083b4692":"code","f1e9c604":"code","8b83a0dd":"code","2cb9bc66":"code","fb213353":"code","32134aa3":"code","460be4ac":"code","6f100c00":"code","4a9a2490":"code","6ae26718":"code","4d67cf3d":"code","6d7fc360":"code","55e2346d":"code","cbc5ad4d":"code","7c09d848":"code","39e32a13":"code","7e44553d":"code","5cce132d":"code","1298ab94":"code","4705853c":"code","826b2a12":"code","0bc6f32e":"code","541ed7a6":"code","63b3f3a3":"code","a6883907":"code","3a30de13":"code","0dce66d3":"code","cdb7f8a0":"code","2f4ef50d":"code","ef1a8ae8":"code","5e664dd1":"code","54b39dfa":"code","1750fc9f":"code","ecc1de40":"code","474276f6":"code","4016d648":"code","8c925e11":"code","0d097f15":"code","23c3b11b":"code","f997722e":"code","74f7460c":"code","42941c94":"code","0aca8f0a":"code","881900a6":"code","c95b7043":"code","c22b33df":"code","94cb556a":"code","2a881722":"code","7dc491cc":"code","97fce533":"code","ce1b755c":"code","741d76aa":"code","df7fbb5b":"code","be590330":"code","7ccd82e9":"code","19784c98":"code","8f19f503":"code","8d0d0bf6":"code","cb949e12":"code","28b12499":"code","d916e938":"code","895b890a":"code","eab758df":"code","b7b372e5":"code","d240066e":"code","b2b4c376":"code","38f7ca16":"code","07f5713c":"code","abfc3410":"code","d09a4a15":"code","83849395":"code","56309a8f":"code","8ea88ff2":"code","7ff0305d":"code","32501817":"code","34c96d51":"code","141c70ed":"code","b7c5b9c8":"code","35daf696":"code","a87b5212":"code","9ab5e141":"code","e01aefde":"code","ecf6c29a":"code","675d3d43":"code","c929702e":"code","a6baf6c9":"code","5e80027b":"code","bf960d70":"code","df92a4b5":"code","52e65208":"code","a3d0d674":"code","980a5a30":"code","4900bb08":"code","7db539f3":"code","f9714794":"code","bcad4220":"code","eee41e1e":"code","bd712cb3":"code","a59a73dd":"code","e75a15bf":"code","7ac142bd":"code","fd2ed386":"code","c20bcee5":"code","71450259":"code","87815a42":"code","5a694aa7":"code","70c120c1":"code","cbc29450":"code","c165e982":"code","3579a6af":"code","9c4e1001":"code","37414098":"code","a7997fd6":"code","7260ee56":"code","52e0c096":"code","976dd4ba":"code","2a14dcde":"code","82e64540":"code","d37b179e":"code","b6bcb639":"code","ab4ed175":"code","caec7c76":"code","2b6f1b03":"code","8eb4ab22":"code","410c02f8":"code","3af1cdbf":"code","b1e1e86f":"code","de02c293":"code","8b8149e9":"code","7167cbb7":"code","459fc6f3":"code","c8bd4dd7":"code","ecfe71da":"code","74cebdef":"code","50d32ceb":"code","515caf7f":"code","e3c5c7cf":"code","c4a51e06":"code","b46d622a":"code","9c8fa7fc":"code","2ca6a795":"code","9095065e":"code","7a092658":"code","e562e288":"code","1edf9647":"code","151810ce":"code","43f08202":"code","6c7ebf70":"code","7fc5c1b6":"code","5137ae58":"code","0e00fc71":"code","0124b9ad":"code","68365185":"code","68ba03f7":"code","239e7bc0":"code","3860510b":"code","fc01cc7d":"code","dd7837f0":"code","547b470f":"code","4a065235":"code","6ed092f0":"code","fe96a9c4":"code","21db0992":"code","c32ebda6":"code","5b928e08":"code","5a4bc3e3":"code","29edf84f":"code","5237f170":"code","126bfba8":"code","d711cd64":"code","429c8fe6":"code","90dd9807":"code","59d4901f":"code","a677016a":"code","6f259ae8":"code","60972b43":"code","1637a035":"code","b7ea687b":"code","f9ca449f":"code","dc74dc02":"code","1b50eb3e":"code","8b21acbe":"code","d8c5baf2":"markdown","de1ff1e0":"markdown","5d55fe1b":"markdown","07c2dc3d":"markdown","3e672d81":"markdown","ea81c4c2":"markdown","b5c7f989":"markdown","1936ebea":"markdown","153f6f8f":"markdown","a574f83c":"markdown","f9ce3dae":"markdown","5594b9ad":"markdown","03ad913c":"markdown","dce33634":"markdown","47804dbe":"markdown","35914b6b":"markdown","50e28d3c":"markdown","c747d530":"markdown","b12f2939":"markdown","704b05e3":"markdown","b84ebc6a":"markdown","710779f3":"markdown","ed036274":"markdown","061cdc63":"markdown","11bce4e4":"markdown","54972b64":"markdown","7932c92a":"markdown","d0f04d5c":"markdown","1d9b001d":"markdown","358161c1":"markdown","afae748c":"markdown","b0f43642":"markdown","391dcee6":"markdown","481a4408":"markdown","00253d5a":"markdown","904dfae8":"markdown","3f740ee6":"markdown","81bcaf9a":"markdown","9b6ca4e9":"markdown","c1fd7386":"markdown","492b8675":"markdown","3574f301":"markdown","a7ff2854":"markdown","c8424f97":"markdown","15a10b9c":"markdown","ab707e2a":"markdown","c8e8bea9":"markdown","9dce7fb1":"markdown","2e22e313":"markdown","50850347":"markdown","f901eff8":"markdown","0b34e040":"markdown","da381f36":"markdown","356b6988":"markdown","adf84fe8":"markdown","c2d6baf5":"markdown","9e2affae":"markdown","5cdd7cf3":"markdown","ac226917":"markdown","06ad576c":"markdown","baf0eb8b":"markdown","edfd25ae":"markdown","a628f19d":"markdown","6c956ea2":"markdown","6505388b":"markdown","1584b497":"markdown","295d84fd":"markdown","c83b718d":"markdown","e6882da5":"markdown","90c5a7ab":"markdown","f0a3da63":"markdown","577bdea6":"markdown","0ddb2c1e":"markdown","97dc3cf4":"markdown","d330beaf":"markdown","276a8903":"markdown","523055a3":"markdown","8ceeb919":"markdown","a4f0dac8":"markdown","2bbbcd17":"markdown","3f886990":"markdown","71eb49af":"markdown","8a4dcd79":"markdown","092ece88":"markdown","08571286":"markdown","ff74db68":"markdown","e2904154":"markdown","1b6e0c2d":"markdown","c0fd3546":"markdown","c7717c1c":"markdown","bd1e69e3":"markdown","51d92ffd":"markdown","aa757347":"markdown","dbcd3cac":"markdown","e743a922":"markdown","5c8c4c08":"markdown","57147bc2":"markdown","00a07989":"markdown","6e8ab5bf":"markdown","aa5b8de7":"markdown","10d448d8":"markdown","b9257015":"markdown","95349db3":"markdown","1a6bc9ac":"markdown","ddf3eceb":"markdown","4b40fce4":"markdown","b225e2d5":"markdown","f2451016":"markdown","eac1b6c4":"markdown","ec8102a5":"markdown","030cb46c":"markdown","e39496f7":"markdown","ee3c989c":"markdown","d8413a04":"markdown","723b4cb2":"markdown","fc8be84f":"markdown","6b5a3ba5":"markdown","6c11d9a0":"markdown","aeb7fd84":"markdown","47006aa6":"markdown","b682291d":"markdown","57d352d0":"markdown","e8995cbd":"markdown","e46c2332":"markdown","00de7cbb":"markdown","a5ab0d8d":"markdown","5cb61d22":"markdown","f611b1a5":"markdown","0791e369":"markdown","c543dc1a":"markdown","f956fd9f":"markdown","4d360ed7":"markdown","fbe288ea":"markdown","5b0a652b":"markdown","1e90ae1e":"markdown","2918a080":"markdown","428fcd69":"markdown","2fabdab9":"markdown","ce5b2c4d":"markdown","b08ef672":"markdown","ca5b88d3":"markdown","fe70ea0e":"markdown","deb4576f":"markdown","d2eb2bc3":"markdown","75af4f65":"markdown","b2c72c46":"markdown","83d7fdcb":"markdown","25269918":"markdown","32b646d9":"markdown","35df864d":"markdown","99fc2cb5":"markdown","12ad0827":"markdown","b7376b1f":"markdown","2815e0df":"markdown","93e8a845":"markdown","c7317d8b":"markdown","1b9b7b8e":"markdown","d9a404cf":"markdown","59e49871":"markdown","a9e80fa4":"markdown","605f16ea":"markdown","7f71d80b":"markdown","200ac64f":"markdown","abeff049":"markdown","1d01bc74":"markdown","9cc982d4":"markdown","8262d1f6":"markdown","e2c15dd2":"markdown","7aab80f1":"markdown","5bab8b30":"markdown","32820ede":"markdown","cf53681e":"markdown","74d522db":"markdown","37631598":"markdown","3c33b018":"markdown","7e45d5b8":"markdown","3af2c42b":"markdown","34d27605":"markdown","e54de7ae":"markdown","7060a5b1":"markdown","17953c2a":"markdown","3e1d4ce8":"markdown","fa705fb9":"markdown","f46ede0e":"markdown","efbd43de":"markdown","5ca711fd":"markdown","79f1be7c":"markdown","c2e2eb21":"markdown","6965042c":"markdown","a5c36b69":"markdown","b686d145":"markdown","fb471e06":"markdown","f77ebef0":"markdown","951abfc5":"markdown","fa726eec":"markdown","b2f4c269":"markdown","db62d189":"markdown","b0b49625":"markdown","51dd0991":"markdown","9d0e2d55":"markdown","e6462695":"markdown","8e390db7":"markdown","c2ce8aff":"markdown","cf9e2737":"markdown","bf58d340":"markdown","2c509630":"markdown","93b7b4bb":"markdown","91a0526e":"markdown","19bda3d0":"markdown","bd3f71fc":"markdown","fb1313fe":"markdown","4fc80613":"markdown","dd93aff0":"markdown","650e7afc":"markdown","e3b92d39":"markdown","f2b41c40":"markdown","f9b0139e":"markdown","6ef5b192":"markdown","ad082c6e":"markdown","9f514840":"markdown","ab7a04ae":"markdown","3ff9b52a":"markdown","0d05a848":"markdown","60b44a09":"markdown","f914613d":"markdown","d04532ec":"markdown"},"source":{"9a5e2631":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","1688e8f5":"house=pd.read_csv(r'\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\nhouse.head()","bde72183":"house.shape","46f40d0a":"house.info()","16bef7a5":"# Missing values are there","70e445ce":"house.describe()","2b1a9ae9":"house.Id.dtype","4bae4523":"house.Id.nunique()","5bb7f4ea":"house.Id.isnull().sum()","fd80b9ed":"# They are all unique ","8743c60f":"house.MSSubClass.dtype","8ca6cb43":"house.MSSubClass.isnull().sum()","b80c071f":"house.MSSubClass.value_counts(ascending=False)","eea8acb4":"house['MSSubClass']=house['MSSubClass'].astype('str').astype('object')","8c36a137":"house.MSSubClass.dtype","383fea32":"house.MSZoning.dtype","61012926":"house.MSZoning.isnull().sum()","56fda017":"house.MSZoning.value_counts(ascending=False)","ccccd18b":"house.LotFrontage.dtype","4cf1c99d":"house.LotFrontage.isnull().sum()","ce303ec5":"# Missing value treatment will be needed ","36ea629d":"house.LotFrontage.describe()","aea748a8":"house.LotArea.dtype","b9a962fd":"house.LotArea.isnull().sum()","7e0cbb25":"house.LotArea.describe()","d831a4d6":"house.Street.dtype","dad14a16":"house.Street.isnull().sum()","9f752ece":"house.Street.value_counts(ascending=False)","91b2f0bb":"house.Alley.dtype","2f6b6b1b":"house.Alley.value_counts(ascending=False)","df49a4fb":"house.Alley.isnull().sum(),house.Alley.notnull().sum(),len(house)","c56da071":"house['Alley'].fillna('No Alley', inplace=True)","a88fd281":"house.Alley.isnull().sum()","2b8b8ce3":"house.Alley.value_counts(ascending=False)","4a965d3a":"house.LotShape.dtype","f84ad8a7":"house.LotShape.value_counts(ascending=False)","c66bfc68":"house.LotShape.isnull().sum()","fb196111":"house.LandContour.dtype","ca146dc6":"house.LandContour.value_counts(ascending=False)","acd39add":"house.LandContour.isnull().sum()","973c757a":"house.Utilities.dtype","ae4f02a4":"house.Utilities.value_counts(ascending=False)","88f3576a":"house.Utilities.isnull().sum()","23507a5f":"house.LotConfig.dtype","aa7b9266":"house.LotConfig.value_counts(ascending=False)","c7013fae":"house.LotConfig.isnull().sum()","29338a31":"house.LandSlope.dtype","02cdf275":"house.LandSlope.value_counts(ascending=False)","a4a3364d":"house.LandSlope.isnull().sum()","4b75c357":"house.Neighborhood.dtype","ecb84a5a":"house.Neighborhood.value_counts(ascending=False)","b780f42c":"house.Neighborhood.isnull().sum()","96310593":"house.Condition1.dtype","dc86664e":"house.Condition1.value_counts(ascending=False)","14ec7c07":"house.Condition1.isnull().sum()","d912ec6c":"house.Condition2.dtype","fd7ff90b":"house.Condition2.value_counts(ascending=False)","182e9980":"house.Condition2.isnull().sum()","1d27a42d":"house.BldgType.dtype","5fc45629":"house.BldgType.value_counts(ascending=False)","156f8998":"house.BldgType.isnull().sum()","6944f70a":"house.HouseStyle.dtype","bcb86947":"house.HouseStyle.value_counts(ascending=False)","ae05605b":"house.HouseStyle.isnull().sum()","1b3a0769":"house.OverallQual.dtype","1ad2f7cc":"house['OverallQual']=house['OverallQual'].astype('object')","be035574":"house.OverallQual.dtype","9da393e3":"house.OverallQual.value_counts(ascending=False)","2cb244d7":"house.OverallQual.isnull().sum()","ecb5c490":"house.OverallCond.dtype","cc5ffb19":"house['OverallCond']=house['OverallCond'].astype('object')","4cad5335":"house.OverallCond.dtype","7eb0aae1":"house.OverallCond.value_counts(ascending=False)","0b0199ae":"house.OverallCond.isnull().sum()","18534998":"house.YearBuilt.dtype","65fa82a1":"house.YearBuilt.value_counts(ascending=False)","5a766316":"house.YearBuilt.isnull().sum()","b1561a80":"house.YearRemodAdd.dtype","c04f60a1":"house.YearRemodAdd.value_counts(ascending=False)","33760777":"house.YearRemodAdd.isnull().sum()","5afb4c2d":"house.RoofStyle.dtype","f2d6fab7":"house.RoofStyle.value_counts(ascending=False)","27350685":"house.RoofStyle.isnull().sum()","2faccba9":"house.RoofMatl.dtype","f67bc4e6":"house.RoofMatl.value_counts(ascending=False)","ebc68562":"house.RoofMatl.isnull().sum()","1eda99bb":"house.Exterior1st.dtype","3e63cd49":"house.Exterior1st.value_counts(ascending=False)","c23e5b68":"house.Exterior1st.isnull().sum()","ad0096d4":"house.Exterior2nd.dtype","f07f2a1e":"house.Exterior2nd.value_counts(ascending=False)","084e0244":"house.Exterior2nd.isnull().sum()","edfbabb0":"house.MasVnrType.dtype","d98025b4":"house.MasVnrType.value_counts(ascending=False)","78dd36db":"house.MasVnrType.isnull().sum()","50cc2c4b":"# Missing value found","69ea0013":"house.MasVnrArea.dtype","e1a13c1e":"house.MasVnrArea.describe()","6bb9f736":"house.MasVnrArea.isnull().sum()","5b2404a8":"# Missing values are there","32e01438":"house.ExterQual.dtype","0fb1e908":"house.ExterQual.value_counts(ascending=False)","5063fe2b":"house.ExterQual.isnull().sum()","acd63189":"house.ExterCond.dtype","796e7323":"house.ExterCond.value_counts(ascending=False)","bbf0c5a2":"house.ExterCond.isnull().sum()","797f3ae7":"house.Foundation.dtype","ee49b923":"house.Foundation.value_counts(ascending=False)","e0636183":"house.Foundation.isnull().sum()","2a80010b":"house.BsmtQual.dtype","a80abc35":"house.BsmtQual.value_counts(ascending=False)","50cd5da5":"house.BsmtQual.isnull().sum(),house.BsmtQual.notnull().sum(),len(house)","7e1d5fd1":"# Here, NA is No Basement. But dataframe consider it as missing value. So, replace with a new value,'No Basement' instead of NA","a80f6244":"house['BsmtQual'].fillna('No Basement', inplace=True)","dabfd29d":"house.BsmtQual.dtype","b3c226c0":"house.BsmtQual.value_counts(ascending=False)","f6bd56f1":"house.BsmtCond.dtype","7f3d1c55":"house.BsmtCond.value_counts(ascending=False)","6e15429c":"house.BsmtCond.isnull().sum(),house.BsmtCond.notnull().sum(),len(house)","a9bb5ded":"house['BsmtCond'].fillna('No Basement', inplace=True)","0d6ca26b":"house.BsmtCond.value_counts(ascending=False)","2aa1c05d":"house.BsmtCond.isnull().sum()","8e82e0a3":"house.BsmtExposure.dtype","605097cd":"house.BsmtExposure.value_counts(ascending=False)","74fd6db3":"house.BsmtExposure.isnull().sum(),house.BsmtExposure.notnull().sum(),len(house)","6f10c154":"house['BsmtExposure'].fillna('No Basement', inplace=True)","f6af939b":"house.BsmtExposure.value_counts(ascending=False)","f394f9a2":"house.BsmtExposure.isnull().sum()","abe9ff41":"house.BsmtFinType1.dtype","be424ca5":"house.BsmtFinType1.value_counts(ascending=False)","27610f0c":"house.BsmtFinType1.isnull().sum(),house.BsmtFinType1.notnull().sum(),len(house)","6d989c69":"house['BsmtFinType1'].fillna('No Basement', inplace=True)","930e0afe":"house.BsmtFinType1.value_counts(ascending=False)","3d9b223b":"house.BsmtFinType1.isnull().sum()","a8fcfe8a":"house.BsmtFinSF1.dtype","83cad073":"house.BsmtFinSF1.describe()","431fba03":"house.BsmtFinSF1.isnull().sum()","d820fc65":"house.BsmtFinType2.dtype","da03efbe":"house.BsmtFinType2.value_counts(ascending=False)","180b2459":"house.BsmtFinType2.isnull().sum(),house.BsmtFinType2.notnull().sum(),len(house)","b466caef":"house['BsmtFinType2'].fillna('No Basement', inplace=True)","542c1494":"house.BsmtFinType2.value_counts(ascending=False)","a87e7e6c":"house.BsmtFinType2.isnull().sum()","659ffec5":"house.BsmtFinSF2.dtype","459ecda9":"house.BsmtFinSF2.describe()","5fc620bf":"house.BsmtFinSF2.isnull().sum()","81ba92e1":"house.BsmtUnfSF.dtype","66ab701b":"house.BsmtUnfSF.describe()","9341628c":"house.BsmtUnfSF.isnull().sum()","924f420d":"house.TotalBsmtSF.dtype","e897f04b":"house.TotalBsmtSF.describe()","456e628a":"house.TotalBsmtSF.isnull().sum()","ba4efe54":"house.Heating.dtype","4e8dc54c":"house.Heating.value_counts(ascending=False)","a5c35745":"house.Heating.isnull().sum()","69aaf36a":"house.HeatingQC.dtype","7680e6fa":"house.HeatingQC.value_counts(ascending=False)","933ea12c":"house.HeatingQC.isnull().sum()","b41ceabb":"house.CentralAir.dtype","fed9789b":"house.CentralAir.value_counts(ascending=False)","0e4f36a5":"house.CentralAir.isnull().sum()","9b075ba9":"house.Electrical.dtype","d123c91d":"house.Electrical.value_counts(ascending=False)","a415f5b3":"house.Electrical.isnull().sum()","9d6fd3f4":"# Missing value treatment will be needed ","b6e3c12e":"house['1stFlrSF'].dtype","4540a0e2":"house['1stFlrSF'].describe()","d228c853":"house['1stFlrSF'].isnull().sum()","850a369f":"house['2ndFlrSF'].dtype","fcac0a9b":"house['2ndFlrSF'].describe()","3db15616":"house['2ndFlrSF'].isnull().sum()","6e175040":"house['LowQualFinSF'].dtype","21e7afa8":"house['LowQualFinSF'].describe()","416db323":"house['LowQualFinSF'].isnull().sum()","750bc693":"house.GrLivArea.dtype","1147a7a6":"house.GrLivArea.describe()","9c3bdedc":"house.GrLivArea.isnull().sum()","bd3201a9":"house.BsmtFullBath.dtype","a5e490b3":"house.BsmtFullBath.value_counts()","3193cfc4":"house['BsmtFullBath']=house['BsmtFullBath'].astype('object')","cac7cfc7":"house.BsmtFullBath.dtype","e005ceaa":"house.BsmtFullBath.value_counts()","581d2ec8":"house.BsmtFullBath.isnull().sum()","b214675e":"house.BsmtHalfBath.dtype","27f313a4":"house.BsmtHalfBath.value_counts()","429c7ded":"house['BsmtHalfBath']=house['BsmtHalfBath'].astype('object')","8668ca13":"house.BsmtHalfBath.dtype","736baaac":"house.BsmtHalfBath.value_counts()","5bcf4052":"house.BsmtHalfBath.isnull().sum()","b1fc4c6c":"house.FullBath.dtype","c445c240":"house.FullBath.value_counts()","668ef2ec":"house['FullBath']=house['FullBath'].astype('object')","ba601a4f":"house.FullBath.dtype","06309c4a":"house.FullBath.value_counts()","18b6b374":"house.FullBath.isnull().sum()","f331c3c0":"house.HalfBath.dtype","ff8531a0":"house['HalfBath'].value_counts()","d03ccffb":"house['HalfBath']=house['HalfBath'].astype('object')","51e8a851":"house.HalfBath.dtype","10ec869b":"house['HalfBath'].value_counts()","1048842f":"house['HalfBath'].isnull().sum()","d3a43129":"house.BedroomAbvGr.dtype","4f2a391c":"house.BedroomAbvGr.value_counts()","a2ba0168":"house['BedroomAbvGr']=house['BedroomAbvGr'].astype('object')","677a138a":"house.BedroomAbvGr.dtype","a00f355a":"house.BedroomAbvGr.value_counts()","055c3488":"house.BedroomAbvGr.isnull().sum()","b08dd23e":"house.KitchenAbvGr.dtype","cc1d2f2f":"house['KitchenAbvGr'].value_counts()","6a73a8ad":"house['KitchenAbvGr']=house['KitchenAbvGr'].astype('object')","071c7019":"house.KitchenAbvGr.dtype","b800668a":"house['KitchenAbvGr'].value_counts()","6e6742b9":"house.KitchenAbvGr.isnull().sum()","333ca239":"house.KitchenQual.dtype","02f817ed":"house.KitchenQual.value_counts()","f1148880":"house.KitchenQual.isnull().sum()","ee42ac60":"house.TotRmsAbvGrd.dtype","7547bff3":"house.TotRmsAbvGrd.value_counts()","a4939f5c":"house['TotRmsAbvGrd']=house['TotRmsAbvGrd'].astype('object')","575d7f67":"house.TotRmsAbvGrd.dtype","cb826131":"house.TotRmsAbvGrd.value_counts()","51433b9c":"house.TotRmsAbvGrd.isnull().sum()","d8e46552":"house.Functional.dtype","9b4fa108":"house.Functional.value_counts()","8274d734":"house.Functional.isnull().sum()","2f5f62c1":"house.Fireplaces.dtype","d6dd8b69":"house.Fireplaces.describe()","441bc7e9":"house.Fireplaces.isnull().sum()","0f26968d":"house.FireplaceQu.dtype","fcfdad3d":"house.FireplaceQu.value_counts()","783369ab":"house.FireplaceQu.isnull().sum(),house.FireplaceQu.notnull().sum(),len(house)","c32ae0f0":"house.FireplaceQu.fillna('No Fireplace', inplace=True)","93e5d9ef":"house.FireplaceQu.value_counts()","103dfce8":"house.FireplaceQu.isnull().sum()","1d227135":"house.GarageType.dtype","7badc6f0":"house.GarageType.value_counts()","02f8aafd":"house.GarageType.isnull().sum(),house.GarageType.notnull().sum(),len(house)","ad95e795":"house.GarageType.fillna('No Garage', inplace=True)","3dd84a5d":"house.GarageType.value_counts()","9ff83ac4":"house.GarageType.isnull().sum()","fd73f901":"house.GarageYrBlt.dtype","2886a7af":"house.GarageYrBlt.describe()","dd0329a1":"house.GarageYrBlt.isnull().sum()","e2f85218":"# missing value found","c4959563":"house.GarageFinish.dtype","0c5363b1":"house.GarageFinish.value_counts()","bbe3b86c":"house.GarageFinish.isnull().sum(),house.GarageFinish.notnull().sum(),len(house)","161398b0":"house['GarageFinish'].fillna('No Garage', inplace=True)","aceba486":"house.GarageFinish.value_counts()","267cd999":"house.GarageFinish.isnull().sum()","37852bfe":"house.GarageCars.dtype","529a3088":"house.GarageCars.value_counts()","1bf31331":"house['GarageCars']=house['GarageCars'].astype('object')","7335fc00":"house.GarageCars.dtype","21602365":"house.GarageCars.value_counts()","e74526c4":"house.GarageCars.isnull().sum()","1bc55073":"house.GarageArea.dtype","6c88cb31":"house.GarageArea.describe()","26afb8d2":"house.GarageArea.isnull().sum()","535966bc":"house.GarageQual.dtype","b1cbaeaf":"house.GarageQual.value_counts()","657f6177":"house.GarageQual.isnull().sum(),house.GarageQual.notnull().sum(),len(house)","e346e844":"house['GarageQual'].fillna('No Garage', inplace=True)","9f089ac1":"house.GarageQual.value_counts()","69b61dca":"house.GarageQual.isnull().sum()","bd335d6c":"house.GarageCond.dtype","4b976208":"house.GarageCond.value_counts()","725a0c32":"house.GarageCond.isnull().sum(),house.GarageCond.notnull().sum(),len(house)","b9d5c7e8":"house['GarageCond'].fillna('No Garage', inplace=True)","3c4911f3":"house.GarageCond.value_counts()","e2ce63fa":"house.GarageCond.isnull().sum()","2bf47fb3":"house.PavedDrive.dtype","1b10de0d":"house.PavedDrive.value_counts()","1b8f4abf":"house.PavedDrive.isnull().sum()","23a9b93f":"house.WoodDeckSF.dtype","083b4692":"house.GrLivArea.describe()","f1e9c604":"house.WoodDeckSF.isnull().sum()","8b83a0dd":"house.OpenPorchSF.dtype","2cb9bc66":"house.OpenPorchSF.describe()","fb213353":"house.OpenPorchSF.isnull().sum()","32134aa3":"house.EnclosedPorch.dtype","460be4ac":"house.EnclosedPorch.describe()","6f100c00":"house.EnclosedPorch.isnull().sum()","4a9a2490":"house['3SsnPorch'].dtype","6ae26718":"house['3SsnPorch'].describe()","4d67cf3d":"house['3SsnPorch'].isnull().sum()","6d7fc360":"house.ScreenPorch.dtype","55e2346d":"house.ScreenPorch.describe()","cbc5ad4d":"house.ScreenPorch.isnull().sum()","7c09d848":"house.PoolArea.dtype","39e32a13":"house.PoolArea.describe()","7e44553d":"house.PoolArea.isnull().sum()","5cce132d":"house.PoolQC.dtype","1298ab94":"house.PoolQC.value_counts()","4705853c":"house.PoolQC.isnull().sum(),house.PoolQC.notnull().sum(),len(house)","826b2a12":"house['PoolQC'].fillna('No Pool', inplace=True)","0bc6f32e":"house.PoolQC.value_counts()","541ed7a6":"house.PoolQC.isnull().sum()","63b3f3a3":"house.Fence.dtype","a6883907":"house.Fence.value_counts()","3a30de13":"house.Fence.isnull().sum(),house.Fence.notnull().sum(),len(house)","0dce66d3":"house['Fence'].fillna('No Fence', inplace=True)","cdb7f8a0":"house.Fence.value_counts()","2f4ef50d":"house.Fence.isnull().sum()","ef1a8ae8":"house.MiscFeature.dtype","5e664dd1":"house.MiscFeature.value_counts()","54b39dfa":"house.MiscFeature.isnull().sum(),house.MiscFeature.notnull().sum(),len(house)","1750fc9f":"house['MiscFeature'].fillna('None', inplace=True)","ecc1de40":"house.MiscFeature.value_counts()","474276f6":"house.GarageQual.isnull().sum()","4016d648":"house.MiscVal.dtype","8c925e11":"house.MiscVal.describe()","0d097f15":"house.MiscVal.isnull().sum()","23c3b11b":"house.MoSold.dtype","f997722e":"house.MoSold.value_counts()","74f7460c":"house['MoSold']=house['MoSold'].astype('object')","42941c94":"house.MoSold.dtype","0aca8f0a":"house.MoSold.value_counts()","881900a6":"house.MoSold.isnull().sum()","c95b7043":"house.YrSold.dtype","c22b33df":"house.YrSold.describe()","94cb556a":"house.YrSold.isnull().sum()","2a881722":"house.SaleType.dtype","7dc491cc":"house.SaleType.value_counts()","97fce533":"house.SaleType.isnull().sum()","ce1b755c":"house.SaleCondition.dtype","741d76aa":"house.SaleCondition.value_counts()","df7fbb5b":"house.SaleCondition.isnull().sum()","be590330":"house.info()","7ccd82e9":"import datetime\nnow = datetime.datetime.now()\nnow","19784c98":"house['Age of Building'] = now.year - house['YearBuilt']\nhouse['Age of Building'].head()","8f19f503":"house['Age of Building'].dtype","8d0d0bf6":"house['Age of Building'].describe()","cb949e12":"house.drop('YearBuilt',axis=1,inplace=True)\nhouse.columns","28b12499":"house['Last Sold'] = now.year - house['YrSold']\nhouse['Last Sold'].head()","d916e938":"house['Last Sold'].dtype","895b890a":"house['Last Sold'].describe()","eab758df":"house.drop('YrSold',axis=1,inplace=True)\nhouse.columns","b7b372e5":"house['Age of Garage'] = now.year - house['GarageYrBlt']\nhouse['Age of Garage'].head()","d240066e":"house['Age of Garage'].dtype","b2b4c376":"house['Age of Garage'].describe()","38f7ca16":"house.drop('GarageYrBlt',axis=1,inplace=True)\nhouse.columns","07f5713c":"house['Last Remodelled'] = now.year - house['YearRemodAdd']\nhouse['Last Remodelled'].head()","abfc3410":"house['Last Remodelled'].dtype","d09a4a15":"house['Last Remodelled'].describe()","83849395":"house.drop('YearRemodAdd',axis=1,inplace=True)\nhouse.columns","56309a8f":"house.info()","8ea88ff2":"# Duplicate Check ","7ff0305d":"houseo=house.copy()\nhouseo.drop_duplicates(subset=None, inplace=True)\nhouseo.shape","32501817":"house.shape","34c96d51":"house.isnull().sum().sort_values(ascending=False)[:8]","141c70ed":"(house.isnull().sum()*100 \/ len(house)).sort_values(ascending=False)[:8]","b7c5b9c8":"house.columns[house.isnull().any()]","35daf696":"house['LotFrontage'].isnull().sum()","a87b5212":"house['LotFrontage'].fillna(0, inplace=True) ","9ab5e141":"house['LotFrontage'].isnull().sum()","e01aefde":"house['MasVnrType'].isnull().sum()","ecf6c29a":"house['MasVnrType'].fillna('None', inplace=True)","675d3d43":"house['MasVnrType'].isnull().sum()","c929702e":"house['MasVnrArea'].isnull().sum()","a6baf6c9":"house['MasVnrArea'].fillna(0, inplace=True) ","5e80027b":"house['MasVnrArea'].isnull().sum()","bf960d70":"house['Electrical'].isnull().sum()","df92a4b5":"# Since, there is 1 missing value, better to drop NA ","52e65208":"house = house[house['Electrical'].notna()]\nhouse['Electrical'].isnull().sum()","a3d0d674":"house['Age of Garage'].isnull().sum()","980a5a30":"house[house.isnull().any(axis=1)] ","4900bb08":"house['GarageFinish'].nunique()","7db539f3":"house['Age of Garage'].describe()","f9714794":"plt.figure(figsize = (20,10))\nplt.grid()\nax=sns.distplot(house[\"Age of Garage\"],bins=11,kde=False)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","bcad4220":"minage=int(min(house['Age of Garage']))\nmaxage=int(max(house['Age of Garage']))\n","eee41e1e":"list1=list(range(minage,20))\nlist2=list(range(20,30))\nlist3=list(range(30,40))\nlist4=list(range(40,50))\nlist5=list(range(50,60))\nlist6=list(range(60,70))\nlist7=list(range(70,80))\nlist8=list(range(80,90))\nlist9=list(range(90,100))\nlist10=list(range(100,110))\nlist11=list(range(110,120))\n","bd712cb3":"if maxage == 120:\n    list12=[120]\nelse:\n    list12=list(range(120,maxage))\n    ","a59a73dd":"house['Age of Garage']=house['Age of Garage'].replace(list1,'Young < 20')\nhouse['Age of Garage']=house['Age of Garage'].replace(list2,'in20s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list3,'in30s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list4,'in40s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list5,'in50s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list6,'in60s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list7,'in70s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list8,'in80s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list9,'in90s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list10,'in100s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list11,'in110s')\nhouse['Age of Garage']=house['Age of Garage'].replace(list12,'Heritage >120 ')\n","e75a15bf":"house['Age of Garage'].value_counts()","7ac142bd":"house['Age of Garage'].dtype","fd2ed386":"plt.figure(figsize = (20,10))\nax=sns.countplot(data=house, x=\"Age of Garage\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\n\nplt.show()","c20bcee5":"house['Age of Garage'].fillna('N\/A', inplace=True) ","71450259":"plt.figure(figsize = (20,10))\nax=sns.countplot(data=house, x=\"Age of Garage\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\n\nplt.show()","87815a42":"house['Age of Garage']=house['Age of Garage'].astype('str')\nhouse['Age of Garage']=house['Age of Garage'].astype('object')","5a694aa7":"house.isnull().sum().sort_values(ascending=False)[:8]","70c120c1":"(house.isnull().sum()*100 \/ len(house)).sort_values(ascending=False)[:8]","cbc29450":"#No Missing values in columns","c165e982":"house.isnull().sum(axis=1).sort_values(ascending=False)[:5]","3579a6af":"(house.isnull().sum(axis=1)*100 \/ len(house)).sort_values(ascending=False)[:5]","9c4e1001":"#No Missing values in rows ","37414098":"print('Available Rows % after Missing value treatment : ',round(len(house)*100\/len(houseo),2))","a7997fd6":"house.drop('Id',axis=1,inplace=True)\nhouse.head()","7260ee56":"house_mm=house.copy()\nhouse_no=house.copy()","52e0c096":"features=list((house.dtypes[house.dtypes == np.object]).index)\nlen(features)","976dd4ba":"def histograms_plot(features, rows, cols):\n    fig=plt.figure(figsize=(20,80))\n    for i, feature in enumerate(features):\n        ax=fig.add_subplot(rows,cols,i+1)\n        house[feature].hist(bins=20,ax=ax,facecolor='green')\n        plt.xticks(rotation = 90)\n        ax.set_yscale('log')\n        ax.set_title(feature+\" Distribution\",color='red')\n       \n    fig.tight_layout()  \n    plt.show()","2a14dcde":"histograms_plot(features,14, 4)","82e64540":"from sklearn.model_selection import train_test_split\n\n# We should specify 'random_state' so that the train and test data set always have the same rows, respectively\n\nnp.random.seed(0)\ntrain, test = train_test_split(house, train_size = 0.70, random_state = 42)","d37b179e":"train.head()","b6bcb639":"X_train= train.drop(['SalePrice'],axis=1)\nX_test= test.drop(['SalePrice'],axis=1)\ny_train= train['SalePrice']\ny_test=test['SalePrice']","ab4ed175":"final=list(set(list(house.columns))-set(list(features))-{'SalePrice'})\nlen(final)","caec7c76":"house.info()","2b6f1b03":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train[final]= scaler.fit_transform(X_train[final])\nX_train.head()\n","8eb4ab22":"final","410c02f8":"X_test[final]= scaler.transform(X_test[final])\nX_test.head()","3af1cdbf":"from catboost import CatBoostRegressor\nmodel=CatBoostRegressor()","b1e1e86f":"obj=list(np.where(X_train.dtypes == np.object)[0])","de02c293":"model.fit(X_train,y_train,cat_features=obj)","8b8149e9":"import sklearn.metrics\nscore_ss=model.score(X_test,y_test)\nevs_ss=sklearn.metrics.explained_variance_score(y_test,model.predict(X_test))\nme_ss=sklearn.metrics.max_error(y_test,model.predict(X_test))\nmae_ss=sklearn.metrics.mean_absolute_error(y_test,model.predict(X_test))\nmse_ss=sklearn.metrics.mean_squared_error(y_test,model.predict(X_test))\nmsle_ss=sklearn.metrics.mean_squared_log_error(y_test,model.predict(X_test))\nMae_ss=sklearn.metrics.median_absolute_error(y_test,model.predict(X_test))\nr2_ss=sklearn.metrics.r2_score(y_test,model.predict(X_test))\nmpd_ss=sklearn.metrics.mean_poisson_deviance(y_test,model.predict(X_test))\nmgd_ss=sklearn.metrics.mean_gamma_deviance(y_test,model.predict(X_test))\nmtd_ss=sklearn.metrics.mean_tweedie_deviance(y_test,model.predict(X_test))","7167cbb7":"print('Score                   :',score_ss)\nprint('Explained Variance Score:',evs_ss)\nprint('Max Error               :',me_ss)\nprint('Mean Absolute Error     :',mae_ss)\nprint('Mean Square Error       :',mse_ss)\nprint('Mean Squared Log Error  :',msle_ss)\nprint('Median Absolute Error   :',Mae_ss)\nprint('R2 Score                :',r2_ss)\nprint('Mean Poisson Deviance   :',mpd_ss)\nprint('Mean Gamma Deviance     :',mgd_ss)\nprint('Mean Tweedie Deviance   :',mtd_ss)","459fc6f3":"house_mm.head()","c8bd4dd7":"features=list((house_mm.dtypes[house_mm.dtypes == np.object]).index)\nlen(features)","ecfe71da":"def histograms_plot(features, rows, cols):\n    fig=plt.figure(figsize=(20,80))\n    for i, feature in enumerate(features):\n        ax=fig.add_subplot(rows,cols,i+1)\n        house[feature].hist(bins=20,ax=ax,facecolor='green')\n        plt.xticks(rotation = 90)\n        ax.set_yscale('log')\n        ax.set_title(feature+\" Distribution\",color='red')\n       \n    fig.tight_layout()  \n    plt.show()","74cebdef":"histograms_plot(features,14, 4)","50d32ceb":"from sklearn.model_selection import train_test_split\n\n# We should specify 'random_state' so that the train and test data set always have the same rows, respectively\n\nnp.random.seed(0)\ntrain, test = train_test_split(house_mm, train_size = 0.70, random_state = 42)\n\ntrain.head()","515caf7f":"X_train= train.drop(['SalePrice'],axis=1)\nX_test= test.drop(['SalePrice'],axis=1)\ny_train= train['SalePrice']\ny_test=test['SalePrice']","e3c5c7cf":"final=list(set(list(house_mm.columns))-set(list(features))-{'SalePrice'})\nlen(final)","c4a51e06":"house_mm.info()","b46d622a":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_train[final]= scaler.fit_transform(X_train[final])\nX_train.head()","9c8fa7fc":"final","2ca6a795":"X_test[final]= scaler.transform(X_test[final])\nX_test.head()","9095065e":"from catboost import CatBoostRegressor\nmodel1=CatBoostRegressor()","7a092658":"obj=list(np.where(X_train.dtypes == np.object)[0])\n","e562e288":"model1.fit(X_train,y_train,cat_features=obj)","1edf9647":"import sklearn.metrics\nscore_mms=model1.score(X_test,y_test)\nevs_mms=sklearn.metrics.explained_variance_score(y_test,model1.predict(X_test))\nme_mms=sklearn.metrics.max_error(y_test,model1.predict(X_test))\nmae_mms=sklearn.metrics.mean_absolute_error(y_test,model1.predict(X_test))\nmse_mms=sklearn.metrics.mean_squared_error(y_test,model1.predict(X_test))\nmsle_mms=sklearn.metrics.mean_squared_log_error(y_test,model1.predict(X_test))\nMae_mms=sklearn.metrics.median_absolute_error(y_test,model1.predict(X_test))\nr2_mms=sklearn.metrics.r2_score(y_test,model1.predict(X_test))\nmpd_mms=sklearn.metrics.mean_poisson_deviance(y_test,model1.predict(X_test))\nmgd_mms=sklearn.metrics.mean_gamma_deviance(y_test,model1.predict(X_test))\nmtd_mms=sklearn.metrics.mean_tweedie_deviance(y_test,model1.predict(X_test))","151810ce":"print('Score                   :',score_mms)\nprint('Explained Variance Score:',evs_mms)\nprint('Max Error               :',me_mms)\nprint('Mean Absolute Error     :',mae_mms)\nprint('Mean Square Error       :',mse_mms)\nprint('Mean Squared Log Error  :',msle_mms)\nprint('Median Absolute Error   :',Mae_mms)\nprint('R2 Score                :',r2_mms)\nprint('Mean Poisson Deviance   :',mpd_mms)\nprint('Mean Gamma Deviance     :',mgd_mms)\nprint('Mean Tweedie Deviance   :',mtd_mms)","43f08202":"print('Score                   :',score_ss)\nprint('Score                   :',score_mms)","6c7ebf70":"print('Explained Variance Score:',evs_ss)\nprint('Explained Variance Score:',evs_mms)","7fc5c1b6":"print('Max Error               :',me_ss)\nprint('Max Error               :',me_mms)","5137ae58":"print('Mean Absolute Error     :',mae_ss)\nprint('Mean Absolute Error     :',mae_mms)","0e00fc71":"print('Mean Square Error       :',mse_ss)\nprint('Mean Square Error       :',mse_mms)","0124b9ad":"print('Mean Squared Log Error  :',msle_ss)\nprint('Mean Squared Log Error  :',msle_mms)","68365185":"print('Median Absolute Error   :',Mae_ss)\nprint('Median Absolute Error   :',Mae_mms)","68ba03f7":"print('R2 Score                :',r2_ss)\nprint('R2 Score                :',r2_mms)","239e7bc0":"print('Mean Poisson Deviance   :',mpd_ss)\nprint('Mean Poisson Deviance   :',mpd_mms)","3860510b":"print('Mean Gamma Deviance     :',mgd_ss)\nprint('Mean Gamma Deviance     :',mgd_mms)","fc01cc7d":"print('Mean Tweedie Deviance   :',mtd_ss)\nprint('Mean Tweedie Deviance   :',mtd_mms)","dd7837f0":"house_no.head()","547b470f":"features=list((house_no.dtypes[house_mm.dtypes == np.object]).index)\nlen(features)","4a065235":"def histograms_plot(features, rows, cols):\n    fig=plt.figure(figsize=(20,80))\n    for i, feature in enumerate(features):\n        ax=fig.add_subplot(rows,cols,i+1)\n        house[feature].hist(bins=20,ax=ax,facecolor='green')\n        plt.xticks(rotation = 90)\n        ax.set_yscale('log')\n        ax.set_title(feature+\" Distribution\",color='red')\n       \n    fig.tight_layout()  \n    plt.show()","6ed092f0":"histograms_plot(features,14, 4)","fe96a9c4":"from sklearn.model_selection import train_test_split\n\n# We should specify 'random_state' so that the train and test data set always have the same rows, respectively\n\nnp.random.seed(0)\ntrain, test = train_test_split(house_no, train_size = 0.70, random_state = 42)\n\ntrain.head()","21db0992":"X_train= train.drop(['SalePrice'],axis=1)\nX_test= test.drop(['SalePrice'],axis=1)\ny_train= train['SalePrice']\ny_test=test['SalePrice']","c32ebda6":"final=list(set(list(house_no.columns))-set(list(features))-{'SalePrice'})\nlen(final)","5b928e08":"house_no.info()","5a4bc3e3":"final","29edf84f":"from catboost import CatBoostRegressor\nmodel2=CatBoostRegressor()","5237f170":"obj=list(np.where(X_train.dtypes == np.object)[0])\n","126bfba8":"model2.fit(X_train,y_train,cat_features=obj)","d711cd64":"import sklearn.metrics\nscore_no=model2.score(X_test,y_test)\nevs_no=sklearn.metrics.explained_variance_score(y_test,model2.predict(X_test))\nme_no=sklearn.metrics.max_error(y_test,model2.predict(X_test))\nmae_no=sklearn.metrics.mean_absolute_error(y_test,model2.predict(X_test))\nmse_no=sklearn.metrics.mean_squared_error(y_test,model2.predict(X_test))\nmsle_no=sklearn.metrics.mean_squared_log_error(y_test,model2.predict(X_test))\nMae_no=sklearn.metrics.median_absolute_error(y_test,model2.predict(X_test))\nr2_no=sklearn.metrics.r2_score(y_test,model2.predict(X_test))\nmpd_no=sklearn.metrics.mean_poisson_deviance(y_test,model2.predict(X_test))\nmgd_no=sklearn.metrics.mean_gamma_deviance(y_test,model2.predict(X_test))\nmtd_no=sklearn.metrics.mean_tweedie_deviance(y_test,model2.predict(X_test))","429c8fe6":"print('Score                   :',score_no)\nprint('Explained Variance Score:',evs_no)\nprint('Max Error               :',me_no)\nprint('Mean Absolute Error     :',mae_no)\nprint('Mean Square Error       :',mse_no)\nprint('Mean Squared Log Error  :',msle_no)\nprint('Median Absolute Error   :',Mae_no)\nprint('R2 Score                :',r2_no)\nprint('Mean Poisson Deviance   :',mpd_no)\nprint('Mean Gamma Deviance     :',mgd_no)\nprint('Mean Tweedie Deviance   :',mtd_no)","90dd9807":"print('Score                   :',score_ss)\nprint('Score                   :',score_mms)\nprint('Score                   :',score_no)","59d4901f":"print('Explained Variance Score:',evs_ss)\nprint('Explained Variance Score:',evs_mms)\nprint('Explained Variance Score:',evs_no)","a677016a":"print('Max Error               :',me_ss)\nprint('Max Error               :',me_mms)\nprint('Max Error               :',me_no)","6f259ae8":"print('Mean Absolute Error     :',mae_ss)\nprint('Mean Absolute Error     :',mae_mms)\nprint('Mean Absolute Error     :',mae_no)","60972b43":"print('Mean Square Error       :',mse_ss)\nprint('Mean Square Error       :',mse_mms)\nprint('Mean Square Error       :',mse_no)","1637a035":"print('Mean Squared Log Error  :',msle_ss)\nprint('Mean Squared Log Error  :',msle_mms)\nprint('Mean Squared Log Error  :',msle_no)","b7ea687b":"print('Median Absolute Error   :',Mae_ss)\nprint('Median Absolute Error   :',Mae_mms)\nprint('Median Absolute Error   :',Mae_no)","f9ca449f":"print('R2 Score                :',r2_ss)\nprint('R2 Score                :',r2_mms)\nprint('R2 Score                :',r2_no)","dc74dc02":"print('Mean Poisson Deviance   :',mpd_ss)\nprint('Mean Poisson Deviance   :',mpd_mms)\nprint('Mean Poisson Deviance   :',mpd_no)","1b50eb3e":"print('Mean Gamma Deviance     :',mgd_ss)\nprint('Mean Gamma Deviance     :',mgd_mms)\nprint('Mean Gamma Deviance     :',mgd_no)","8b21acbe":"print('Mean Tweedie Deviance   :',mtd_ss)\nprint('Mean Tweedie Deviance   :',mtd_mms)\nprint('Mean Tweedie Deviance   :',mtd_no)","d8c5baf2":"As per data description, BsmtCond: Evaluates the general condition of the basement\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical - slight dampness allowed\n       Fa\tFair - dampness or some cracking or settling\n       Po\tPoor - Severe cracking, settling, or wetness\n       NA\tNo Basement","de1ff1e0":"# Note ","5d55fe1b":"This is a reference field , needs to be used for a derived field ","07c2dc3d":"## MSSubClass","3e672d81":"# LotConfig","ea81c4c2":"As per data description, Neighborhood: Physical locations within Ames city limits\n\n       Blmngtn\tBloomington Heights\n       Blueste\tBluestem\n       BrDale\tBriardale\n       BrkSide\tBrookside\n       ClearCr\tClear Creek\n       CollgCr\tCollege Creek\n       Crawfor\tCrawford\n       Edwards\tEdwards\n       Gilbert\tGilbert\n       IDOTRR\tIowa DOT and Rail Road\n       MeadowV\tMeadow Village\n       Mitchel\tMitchell\n       Names\tNorth Ames\n       NoRidge\tNorthridge\n       NPkVill\tNorthpark Villa\n       NridgHt\tNorthridge Heights\n       NWAmes\tNorthwest Ames\n       OldTown\tOld Town\n       SWISU\tSouth & West of Iowa State University\n       Sawyer\tSawyer\n       SawyerW\tSawyer West\n       Somerst\tSomerset\n       StoneBr\tStone Brook\n       Timber\tTimberland\n       Veenker\tVeenker","b5c7f989":"As per data description, Exterior1st: Exterior covering on house\n\n       AsbShng\tAsbestos Shingles\n       AsphShn\tAsphalt Shingles\n       BrkComm\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       CemntBd\tCement Board\n       HdBoard\tHard Board\n       ImStucc\tImitation Stucco\n       MetalSd\tMetal Siding\n       Other\tOther\n       Plywood\tPlywood\n       PreCast\tPreCast\t\n       Stone\tStone\n       Stucco\tStucco\n       VinylSd\tVinyl Siding\n       Wd Sdng\tWood Siding\n       WdShing\tWood Shingles","1936ebea":"# HalfBath","153f6f8f":"As per data description, LandSlope: Slope of property\n\t\t\n       Gtl\tGentle slope\n       Mod\tModerate Slope\t\n       Sev\tSevere Slope","a574f83c":"Here, NA is No Fence. But dataframe consider it as missing value. So, replace with a new value, 'No Fence' instead of NA","f9ce3dae":"# Exterior1st","5594b9ad":"As per data description, Utilities: Type of utilities available\n\t\t\n       AllPub\tAll public Utilities (E,G,W,& S)\t\n       NoSewr\tElectricity, Gas, and Water (Septic Tank)\n       NoSeWa\tElectricity and Gas Only\n       ELO\tElectricity only","03ad913c":"Here, C (all) means a group where  A,C,FV,RH i.e. Agriculture, Commercial, Floating Village Residential, & Industrial are part of it.","dce33634":"# FullBath","47804dbe":"# PavedDrive","35914b6b":"# OverallQual","50e28d3c":"As per data description, MasVnrType: Masonry veneer type\n\n       BrkCmn\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       None\tNone\n       Stone\tStone","c747d530":"# Conclusion ","b12f2939":" # MinMaxScaler v\/s StandardScaler v\/s No preprocessing ","704b05e3":"# MiscFeature","b84ebc6a":"# LowQualFinSF","710779f3":"This is a reference field , needs to be used for a derived field ","ed036274":"As per data description, TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)","061cdc63":"# YrSold","11bce4e4":"# Electrical","54972b64":"# ScreenPorch","7932c92a":"# GrLivArea","d0f04d5c":"# Business Goal","1d9b001d":"# FireplaceQu","358161c1":"As per data description, TotalBsmtSF: Total square feet of basement area","afae748c":"Here, NA is No Garage. But dataframe consider it as missing value. So, replace with a new value, 'No Garage' instead of NA","b0f43642":"When Linear feet of street connected to property is NA, it's safe to replace with 0","391dcee6":"# BsmtHalfBath","481a4408":"# WoodDeckSF","00253d5a":"# BsmtFinType2","904dfae8":"Here, NA is No Fireplace. But dataframe consider it as missing value. So, replace with a new value, 'No Fireplace' instead of NA","3f740ee6":"# Utilities","81bcaf9a":"# Condition2","9b6ca4e9":"As per data description, LotShape: General shape of property\n\n       Reg\tRegular\t\n       IR1\tSlightly irregular\n       IR2\tModerately Irregular\n       IR3\tIrregular","c1fd7386":"# TotRmsAbvGrd","492b8675":"As per data description, LowQualFinSF: Low quality finished square feet (all floors)","3574f301":"# OpenPorchSF","a7ff2854":"# GarageYrBlt","c8424f97":"As per data description, EnclosedPorch: Enclosed porch area in square feet","15a10b9c":"A US-based housing company named Surprise Housing has decided to enter the Australian market. The company uses data analytics to purchase houses at a price below their actual values and flip them on at a higher price. For the same purpose, the company has collected a data set from the sale of houses in Australia. \n\n \n\nThe company is looking at prospective properties to buy to enter the market. You are required to build a regression model using regularisation in order to predict the actual value of the prospective properties and decide whether to invest in them or not.\n\n \n\nThe company wants to know:\n\n- Which variables are significant in predicting the price of a house, and\n\n- How well those variables describe the price of a house.","ab707e2a":"As per data description, Exterior2nd: Exterior covering on house (if more than one material)\n\n       AsbShng\tAsbestos Shingles\n       AsphShn\tAsphalt Shingles\n       BrkComm\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       CemntBd\tCement Board\n       HdBoard\tHard Board\n       ImStucc\tImitation Stucco\n       MetalSd\tMetal Siding\n       Other\tOther\n       Plywood\tPlywood\n       PreCast\tPreCast\n       Stone\tStone\n       Stucco\tStucco\n       VinylSd\tVinyl Siding\n       Wd Sdng\tWood Siding\n       WdShing\tWood Shingles","c8e8bea9":"Here, NA is No Garage. But dataframe consider it as missing value. So, replace with a new value, 'No Pool' instead of NA","9dce7fb1":"As per data description, BsmtFinType1: Rating of basement finished area\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement","2e22e313":"# Foundation","50850347":"# Note \n","f901eff8":"# GarageCars","0b34e040":"# MoSold","da381f36":"We find initial datatype for BedroomAbvGr is int, but it should be object","356b6988":"# GarageType","adf84fe8":"As per data description, ExterCond: Evaluates the present condition of the material on the exterior\n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor","c2d6baf5":"# HeatingQC","9e2affae":"# RoofMatl","5cdd7cf3":"# Street","ac226917":"# Bedroom","06ad576c":"As per data description, BsmtHalfBath: Basement half bathrooms","baf0eb8b":"As per data description, MoSold: Month Sold (MM)","edfd25ae":"# EnclosedPorch","a628f19d":"# LandSlope","6c956ea2":"# SaleType","6505388b":"Attempt 1 : Missing value Imputed, No Outliers treatment, StandardScaler as preprocessing  & Algorithm used is CatBoostRegressor","1584b497":"## Column Wise","295d84fd":"As per data description, KitchenQual: Kitchen quality","c83b718d":"#  Electrical","e6882da5":"As per data description, 2ndFlrSF: Second floor square feet","90c5a7ab":"As per data description, GarageArea: Size of garage in square feet","f0a3da63":"# BsmtFullBath","577bdea6":"# LotFrontage","0ddb2c1e":"As per data description, OpenPorchSF: Open porch area in square feet","97dc3cf4":"As per data description, YearBuilt: Original construction date","d330beaf":"As per data description, BsmtFinSF2: Type 2 finished square feet","276a8903":"As per data description, GarageCond: Garage condition\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage","523055a3":"As per data description, GarageQual: Garage quality\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage","8ceeb919":"- There are few reference fields, that will needed to used to derive new columns\n- There are few fields where missing values are there, they needs to imputed.\n- There are few fields where outliers are there, Outlier Treatment needs to be done. \n- There are few fields where datatypes were incorrect. Now, they are correctedly mapped.","a4f0dac8":"Lets understand what's inside each column","2bbbcd17":"No Preprocessing Catboost model shares better results than Preprocessed, when Outliers are available","3f886990":"We find initial datatype for GarageCars is int, but it should be object","71eb49af":"As per data description, MiscFeature: Miscellaneous feature not covered in other categories\n\t\t\n       Elev\tElevator\n       Gar2\t2nd Garage (if not described in garage section)\n       Othr\tOther\n       Shed\tShed (over 100 SF)\n       TenC\tTennis Court\n       NA\tNone","8a4dcd79":"As per data description, RoofStyle: Type of roof\n\n       Flat\tFlat\n       Gable\tGable\n       Gambrel\tGabrel (Barn)\n       Hip\tHip\n       Mansard\tMansard\n       Shed\tShed","092ece88":"As per data description, BedroomAbvGr: Bedrooms above grade (does NOT include basement bedrooms)","08571286":"# BsmtFinType1","ff74db68":"We find initial datatype for MoSold is int, but it should be object\n\n","e2904154":"# BsmtFinSF2","1b6e0c2d":"Here, NA is None. But dataframe consider it as missing value. So, replace with a new value, 'None' instead of NA","c0fd3546":"As per data description, MiscVal: $Value of miscellaneous feature","c7717c1c":"Here, NA is No Basement. But dataframe consider it as missing value. So, replace with a new value,'No Basement' instead of NA","bd1e69e3":"We find initial datatype for FullBath is int, but it should be object","51d92ffd":"# Kitchen","aa757347":"# Alley","dbcd3cac":"# OverallCond","e743a922":"# TotalBsmtSF","5c8c4c08":"# MasVnrArea","57147bc2":"# Attempt 3 : Missing value Imputed, No Outliers treatment orpreprocessing  & Algorithm used is CatBoostRegressor","00a07989":"# ExterQual","6e8ab5bf":"As per data description, BsmtExposure: Refers to walkout or garden level walls\n\n       Gd\tGood Exposure\n       Av\tAverage Exposure (split levels or foyers typically score average or above)\t\n       Mn\tMimimum Exposure\n       No\tNo Exposure\n       NA\tNo Basement","aa5b8de7":"We find initial datatype for FullBath is int, but it should be object","10d448d8":"As per data description, BsmtFullBath: Basement full bathrooms","b9257015":"As per data description, PavedDrive: Paved driveway\n\n       Y\tPaved \n       P\tPartial Pavement\n       N\tDirt\/Gravel","95349db3":"As per data description, RoofMatl: Roof material\n\n       ClyTile\tClay or Tile\n       CompShg\tStandard (Composite) Shingle\n       Membran\tMembrane\n       Metal\tMetal\n       Roll\tRoll\n       Tar&Grv\tGravel & Tar\n       WdShake\tWood Shakes\n       WdShngl\tWood Shingles","1a6bc9ac":"# Heating","ddf3eceb":"As per data description, WoodDeckSF: Wood deck area in square feet","4b40fce4":"As per data description, HouseStyle: Style of dwelling\n\t\n       1Story\tOne story\n       1.5Fin\tOne and one-half story: 2nd level finished\n       1.5Unf\tOne and one-half story: 2nd level unfinished\n       2Story\tTwo story\n       2.5Fin\tTwo and one-half story: 2nd level finished\n       2.5Unf\tTwo and one-half story: 2nd level unfinished\n       SFoyer\tSplit Foyer\n       SLvl\tSplit Level","b225e2d5":"# MinMaxScaler v\/s StandardScaler ","f2451016":"# YearBuilt","eac1b6c4":"Here, NA is No Garage. But dataframe consider it as missing value. So, replace with a new value, 'No Garage' instead of NA","ec8102a5":"Here, NA is No Basement. But dataframe consider it as missing value. So, replace with a new value,'No Basement' instead of NA","030cb46c":"As per data description, SaleCondition: Condition of sale\n\n       Normal\tNormal Sale\n       Abnorml\tAbnormal Sale -  trade, foreclosure, short sale\n       AdjLand\tAdjoining Land Purchase\n       Alloca\tAllocation - two linked properties with separate deeds, typically condo with a garage unit\t\n       Family\tSale between family members\n       Partial\tHome was not completed when last assessed (associated with New Homes)","e39496f7":"As per data description, LandContour: Flatness of the property\n\n       Lvl\tNear Flat\/Level\t\n       Bnk\tBanked - Quick and significant rise from street grade to building\n       HLS\tHillside - Significant slope from side to side\n       Low\tDepression","ee3c989c":"# ExterCond","d8413a04":"As per data description, Alley: Type of alley access to property\n\n       Grvl\tGravel\n       Pave\tPaved\n       NA \tNo alley access","723b4cb2":"## MSZoning","fc8be84f":"Here, NA is No Garage. But dataframe consider it as missing value. So, replace with a new value, 'No Garage' instead of NA","6b5a3ba5":"As per data description, GrLivArea: Above grade (ground) living area square feet","6c11d9a0":"# BsmtQual","aeb7fd84":"# Derived Fields ","47006aa6":"# MasVnrType","b682291d":"Here, NA is No alley access. But dataframe consider it as missing value. So, replace with a new value, 'No Alley' instead of NA","57d352d0":"As per data description, Fence: Fence quality\n\t\t\n       GdPrv\tGood Privacy\n       MnPrv\tMinimum Privacy\n       GdWo\tGood Wood\n       MnWw\tMinimum Wood\/Wire\n       NA\tNo Fence","e8995cbd":"As per data description, BsmtFinSF1: Type 1 finished square feet","e46c2332":"# LotArea","00de7cbb":"As per data description,LotArea: Lot size in square feet","a5ab0d8d":"# 2ndFlrSF","5cb61d22":"# SaleCondition","f611b1a5":"As per data description, Fireplaces: Number of fireplaces","0791e369":"As per data description, ExterQual: Evaluates the quality of the material on the exterior \n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor","c543dc1a":"As per data description, KitchenAbvGr: Kitchens above grade","f956fd9f":"# Missing Value Check","4d360ed7":"As per data description, CentralAir: Central air conditioning\n\n       N\tNo\n       Y\tYes","fbe288ea":"# GarageArea","5b0a652b":"We find initial datatype for FullBath is int, but it should be object","1e90ae1e":"As per data description, FullBath: Full bathrooms above grade","2918a080":"As per data description, OverallQual: Rates the overall material and finish of the house\n\n       10\tVery Excellent\n       9\tExcellent\n       8\tVery Good\n       7\tGood\n       6\tAbove Average\n       5\tAverage\n       4\tBelow Average\n       3\tFair\n       2\tPoor\n       1\tVery Poor","428fcd69":"As per data description, HalfBath: Half baths above grade","2fabdab9":"As per data description, MasVnrArea: Masonry veneer area in square feet","ce5b2c4d":"# BsmtCond","b08ef672":"As per data description, BldgType: Type of dwelling\n\t\t\n       1Fam\tSingle-family Detached\t\n       2FmCon\tTwo-family Conversion; originally built as one-family dwelling\n       Duplx\tDuplex\n       TwnhsE\tTownhouse End Unit\n       TwnhsI\tTownhouse Inside Unit","ca5b88d3":"As per data description, Electrical: Electrical system\n\n       SBrkr\tStandard Circuit Breakers & Romex\n       FuseA\tFuse Box over 60 AMP and all Romex wiring (Average)\t\n       FuseF\t60 AMP Fuse Box and mostly Romex wiring (Fair)\n       FuseP\t60 AMP Fuse Box and mostly knob & tube wiring (poor)\n       Mix\tMixed","fe70ea0e":"# Id","deb4576f":"As per data description,\nMSSubClass: Identifies the type of dwelling involved in the sale.\t\n\n        20\t1-STORY 1946 & NEWER ALL STYLES\n        30\t1-STORY 1945 & OLDER\n        40\t1-STORY W\/FINISHED ATTIC ALL AGES\n        45\t1-1\/2 STORY - UNFINISHED ALL AGES\n        50\t1-1\/2 STORY FINISHED ALL AGES\n        60\t2-STORY 1946 & NEWER\n        70\t2-STORY 1945 & OLDER\n        75\t2-1\/2 STORY ALL AGES\n        80\tSPLIT OR MULTI-LEVEL\n        85\tSPLIT FOYER\n        90\tDUPLEX - ALL STYLES AND AGES\n       120\t1-STORY PUD (Planned Unit Development) - 1946 & NEWER\n       150\t1-1\/2 STORY PUD - ALL AGES\n       160\t2-STORY PUD - 1946 & NEWER\n       180\tPUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\n       190\t2 FAMILY CONVERSION - ALL STYLES AND AGES\n","d2eb2bc3":"# Conclusion","75af4f65":"We find initial datatype for OverallQual is int, but it should be object","b2c72c46":"As per data description, 1stFlrSF: First Floor square feet","83d7fdcb":"# MasVnrArea","25269918":"We find initial datatype for OverallCond is int, but it should be object","32b646d9":"We find initial datatype for BsmtHalfBath is int, but it should be object","35df864d":"As per data description, YrSold: Year Sold (YYYY)","99fc2cb5":"# Fireplaces","12ad0827":"# LotShape","b7376b1f":"You are required to model the price of houses with the available independent variables. This model will then be used by the management to understand how exactly the prices vary with the variables. They can accordingly manipulate the strategy of the firm and concentrate on areas that will yield high returns. Further, the model will be a good way for management to understand the pricing dynamics of a new market.\n\n","2815e0df":"# YearRemodAdd","93e8a845":"# Functional","c7317d8b":"As per data description, ScreenPorch: Screen porch area in square feet","1b9b7b8e":"# CentralAir","d9a404cf":"As per data description, 3SsnPorch: Three season porch area in square feet","59e49871":"# YrSold","a9e80fa4":"# PoolQC","605f16ea":"# YearBuilt","7f71d80b":"# MiscVal","200ac64f":"We find initial datatype for BsmtFullBath is int, but it should be object","abeff049":"# KitchenQual","1d01bc74":"Here, NA is No Garage. But dataframe consider it as missing value. So, replace with a new value, 'No Garage' instead of NA","9cc982d4":"# GarageYrBlt","8262d1f6":"When Masonry veneer type is NA,  it's safe to replace with 'None'","e2c15dd2":"# YearRemodAdd","7aab80f1":"As per data description, LotFrontage: Linear feet of street connected to property","5bab8b30":"As per data description, YearRemodAdd: Remodel date (same as construction date if no remodeling or additions)","32820ede":"# Problem Statement ","cf53681e":"# MasVnrType","74d522db":"As per data description, GarageType: Garage location\n\t\t\n       2Types\tMore than one type of garage\n       Attchd\tAttached to home\n       Basment\tBasement Garage\n       BuiltIn\tBuilt-In (Garage part of house - typically has room above garage)\n       CarPort\tCar Port\n       Detchd\tDetached from home\n       NA\tNo Garage","37631598":"# Fence","3c33b018":"# BsmtExposure","7e45d5b8":"As per data description, BsmtFinType2: Rating of basement finished area (if multiple types)\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement","3af2c42b":"No Duplicates Found ","34d27605":"# GarageQual","e54de7ae":"This is a reference field , needs to be used for a derived field ","7060a5b1":"Here, NA is No Basement. But dataframe consider it as missing value. So, replace with a new value,'No Basement' instead of NA","17953c2a":"# BldgType","3e1d4ce8":"We find initial datatype for KitchenAbvGr is int, but it should be object","fa705fb9":"As per data description, HeatingQC: Heating quality and condition\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor","f46ede0e":"We find initial datatype for MSSubClass is int, but it should be object","efbd43de":"# GarageCond","5ca711fd":"As per data description, Heating: Type of heating\n\t\t\n       Floor\tFloor Furnace\n       GasA\tGas forced warm air furnace\n       GasW\tGas hot water or steam heat\n       Grav\tGravity furnace\t\n       OthW\tHot water or steam heat other than gas\n       Wall\tWall furnaceacking, settling, or wetness\n       NA\tNo Basement","79f1be7c":"# Condition1","c2e2eb21":"# 1stFlrSF","6965042c":"# BsmtUnfSF","a5c36b69":"# HouseStyle","b686d145":"As per data description, LotConfig: Lot configuration\n\n       Inside\tInside lot\n       Corner\tCorner lot\n       CulDSac\tCul-de-sac\n       FR2\tFrontage on 2 sides of property\n       FR3\tFrontage on 3 sides of property","fb471e06":"As per data description, BsmtUnfSF: Unfinished square feet of basement area","f77ebef0":"As per data description, GarageFinish: Interior finish of the garage\n\n       Fin\tFinished\n       RFn\tRough Finished\t\n       Unf\tUnfinished\n       NA\tNo Garage","951abfc5":"# PoolArea","fa726eec":"# RoofStyle","b2f4c269":"As per data description, BsmtQual: Evaluates the height of the basement\n\n       Ex\tExcellent (100+ inches)\t\n       Gd\tGood (90-99 inches)\n       TA\tTypical (80-89 inches)\n       Fa\tFair (70-79 inches)\n       Po\tPoor (<70 inches\n       NA\tNo Basement","db62d189":"- 4 Columns are removed from Original dataframe i.e. YrSold,GarageYrBlt,YearRemodAdd & YearBuilt\n- 4 Derived columns are added to Original Dataframe i.e. Age of Building,Last Sold,Age of Garage & Last Remodelled","b0b49625":"As per data description, MSZoning: Identifies the general zoning classification of the sale.\n\t\t\n       A\tAgriculture\n       C\tCommercial\n       FV\tFloating Village Residential\n       I\tIndustrial\n       RH\tResidential High Density\n       RL\tResidential Low Density\n       RP\tResidential Low Density Park \n       RM\tResidential Medium Density","51dd0991":"# BsmtFinSF1","9d0e2d55":"We found YrSold,GarageYrBlt,YearRemodAdd & YearBuilt are reference fields, they need to be used for new Derived Fields ","e6462695":"As per data description, Condition2: Proximity to various conditions (if more than one is present)\n\t\t\n       Artery\tAdjacent to arterial street\n       Feedr\tAdjacent to feeder street\t\n       Norm\tNormal\t\n       RRNn\tWithin 200' of North-South Railroad\n       RRAn\tAdjacent to North-South Railroad\n       PosN\tNear positive off-site feature--park, greenbelt, etc.\n       PosA\tAdjacent to postive off-site feature\n       RRNe\tWithin 200' of East-West Railroad\n       RRAe\tAdjacent to East-West Railroad","8e390db7":"# GarageFinish","c2ce8aff":"Here, NA is No Basement. But dataframe consider it as missing value. So, replace with a new value,'No Basement' instead of NA","cf9e2737":"Attempt 2 : Missing value Imputed, No Outliers treatment, MaxminScaler as preprocessing  & Algorithm used is CatBoostRegressor","bf58d340":"# Age of Garage","2c509630":"# LandContour","93b7b4bb":"As per data description, SaleType: Type of sale\n\t\t\n       WD \tWarranty Deed - Conventional\n       CWD\tWarranty Deed - Cash\n       VWD\tWarranty Deed - VA Loan\n       New\tHome just constructed and sold\n       COD\tCourt Officer Deed\/Estate\n       Con\tContract 15% Down payment regular terms\n       ConLw\tContract Low Down payment and low interest\n       ConLI\tContract Low Interest\n       ConLD\tContract Low Down\n       Oth\tOther","91a0526e":"When Masonry veneer area in square feet is NA, it's safe to replace with 0","19bda3d0":"# 3SsnPorch","bd3f71fc":"As per data description, PoolQC: Pool quality\n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       NA\tNo Pool","fb1313fe":"**This is series of notebooks, where we will keep processes same with Parameter changes, i.e Outliers Treatment, Pre-processing & Algorithm used.** ","4fc80613":"As per data description, Foundation: Type of foundation\n\t\t\n       BrkTil\tBrick & Tile\n       CBlock\tCinder Block\n       PConc\tPoured Contrete\t\n       Slab\tSlab\n       Stone\tStone\n       Wood\tWood","dd93aff0":"As per data description, Functional: Home functionality (Assume typical unless deductions are warranted)\n\n       Typ\tTypical Functionality\n       Min1\tMinor Deductions 1\n       Min2\tMinor Deductions 2\n       Mod\tModerate Deductions\n       Maj1\tMajor Deductions 1\n       Maj2\tMajor Deductions 2\n       Sev\tSeverely Damaged\n       Sal\tSalvage only","650e7afc":"Catboost model with preprocessing with StandardScaler shares better results than Preprocessing with MinMaxScaler, when Outliers are available","e3b92d39":"# LotFrontage","f2b41c40":"# Neighborhood","f9b0139e":"As per data description, Street: Type of road access to property\n\n       Grvl\tGravel\t\n       Pave\tPaved","6ef5b192":"##  Row Check","ad082c6e":"As per data description, PoolArea: Pool area in square feet","9f514840":"As per data description, OverallCond: Rates the overall condition of the house\n\n       10\tVery Excellent\n       9\tExcellent\n       8\tVery Good\n       7\tGood\n       6\tAbove Average\t\n       5\tAverage\n       4\tBelow Average\t\n       3\tFair\n       2\tPoor\n       1\tVery Poor","ab7a04ae":"As per data description, Condition1: Proximity to various conditions\n\t\n       Artery\tAdjacent to arterial street\n       Feedr\tAdjacent to feeder street\t\n       Norm\tNormal\t\n       RRNn\tWithin 200' of North-South Railroad\n       RRAn\tAdjacent to North-South Railroad\n       PosN\tNear positive off-site feature--park, greenbelt, etc.\n       PosA\tAdjacent to postive off-site feature\n       RRNe\tWithin 200' of East-West Railroad\n       RRAe\tAdjacent to East-West Railroad Gas Only\n       ELO\tElectricity only","3ff9b52a":"# Conclusion ","0d05a848":"As per data description, FireplaceQu: Fireplace quality\n\n       Ex\tExcellent - Exceptional Masonry Fireplace\n       Gd\tGood - Masonry Fireplace in main level\n       TA\tAverage - Prefabricated Fireplace in main living area or Masonry Fireplace in basement\n       Fa\tFair - Prefabricated Fireplace in basement\n       Po\tPoor - Ben Franklin Stove\n       NA\tNo Fireplace","60b44a09":"# Exterior2nd","f914613d":"As per data description, GarageCars: Size of garage in car capacity","d04532ec":"As per data description, GarageYrBlt: Year garage was built"}}