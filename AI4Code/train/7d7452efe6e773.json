{"cell_type":{"c966f7a7":"code","b5a0bf26":"code","1e0d6970":"code","7637efb3":"code","dec68837":"code","9487f46e":"code","0e2598c9":"code","4d670be3":"code","33e90ade":"code","98756809":"code","bff7a893":"code","3952e272":"code","87773814":"code","8d89238f":"code","b02ef5f9":"code","558a1574":"code","4a953c82":"code","9859fba1":"code","8f7aca5a":"code","a907fc05":"code","2bea4105":"markdown","c4d079a6":"markdown","7f310d35":"markdown","34bfa7eb":"markdown","1a879798":"markdown","03017bfa":"markdown","38b191e5":"markdown","8cc9c74a":"markdown","aefe456b":"markdown","afc168fa":"markdown","93ae1972":"markdown","afe066fe":"markdown","706ae906":"markdown","5a53bd94":"markdown","3da39d62":"markdown","e66e90b6":"markdown","86d82695":"markdown","b4d7de5b":"markdown","4f3615fd":"markdown","075f491e":"markdown","613f16ee":"markdown","0d7b70fa":"markdown"},"source":{"c966f7a7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b5a0bf26":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","1e0d6970":"#\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\ntrain = pd.read_csv(\"\/kaggle\/input\/uci-wholesale-customers-data\/Wholesale customers data.csv\")","7637efb3":"print(train.shape)","dec68837":"train.head()","9487f46e":"train.info()","0e2598c9":"train.describe()","4d670be3":"# import pandas_profiling as pdp\n# pdp.ProfileReport(train)","33e90ade":"# \u4e0d\u8981\u306a\u30ab\u30e9\u30e0\u3092\u524a\u9664(\u8ca9\u58f2\u30c1\u30e3\u30cd\u30eb\u3001\u5404\u9867\u5ba2\u306e\u5730\u57df)\ndel(train['Channel'])\ndel(train['Region'])\ntrain.head()","98756809":"from sklearn.cluster import KMeans\n\n# k-means\u3092\u4f7f\u7528\u3057\u30014\u5206\u5272\u3059\u308b\npred = KMeans(n_clusters=4).fit_predict(train)\n\n# \u30af\u30e9\u30b9\u30bf\u30fcID\u3092\u5143\u30c7\u30fc\u30bf\u306b\u8a2d\u5b9a\ntrain['cluster_id'] = pred\n","bff7a893":"#\u30af\u30e9\u30b9\u30bf\u30fcID\u3054\u3068\u306e\u4ef6\u6570\u3092\u8868\u793a\ntrain.groupby('cluster_id')['cluster_id'].count()","3952e272":"g=sns.FacetGrid(train,col=\"cluster_id\")\ng=g.map(sns.distplot,\"Fresh\")\ng.add_legend()","87773814":"#\u30af\u30e9\u30b9\u30bf\u30fcID\u3054\u3068\u306b\u96c6\u8a08\u3059\u308b\ntrain_sum = train.groupby('cluster_id').sum()\ntrain_sum.head()","8d89238f":"#\u7a4d\u307f\u4e0a\u3052\u68d2\u30b0\u30e9\u30d5\u3092\u30af\u30e9\u30b9\u30bf\u30fcID\u5225\u306b\u8868\u793a\ntrain_sum.plot.bar(stacked=True)","b02ef5f9":"train_sum_100p = train_sum.apply(lambda x:x\/sum(x),axis=1)\ntrain_sum_100p","558a1574":"#\u7a4d\u307f\u4e0a\u3052\u68d2\u30b0\u30e9\u30d5\u3092\u30af\u30e9\u30b9\u30bf\u30fcID\u5225\u306b\u8868\u793a\ntrain_sum_100p.plot.bar(stacked=True)","4a953c82":"from scipy.cluster.hierarchy import linkage,dendrogram,fcluster\n\n#\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u3068\u30a6\u30a9\u30fc\u30c9\u6cd5\u3092\u4f7f\u7528\u3057\u3066\u968e\u5c64\u578b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3046\nZ = linkage(train, method='ward', metric='euclidean')\npd.DataFrame(Z)\n","9859fba1":"import matplotlib.pyplot as plt\nfig2, ax2 = plt.subplots(figsize=(20,5))\n\n# \u6a39\u5f62\u56f3\u3092\u4f5c\u6210\nax2 = dendrogram(Z)\nfig2.show()\n","8f7aca5a":"from scipy.cluster.hierarchy import fcluster\n\n# \u30af\u30e9\u30b9\u30bf\u6570\u3092\u6307\u5b9a\u3057\u3066\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\nclusters = fcluster(Z, t=3, criterion='maxclust')\nfor i, c in enumerate(clusters):\n    print(i, c)\n","a907fc05":"# \u30a8\u30eb\u30dc\u30fc\u65b9\u306b\u3088\u308b\u63a8\u5b9a\u3002\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u30921\u304b\u308910\u306b\u5897\u3084\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u8ddd\u96e2\u306e\u7dcf\u548c\u3092\u6c42\u3081\u308b\ndist_list =[]\nfor i in range(1,10):\n    kmeans= KMeans(n_clusters=i, init='random', random_state=0)\n    kmeans.fit(train)\n    dist_list.append(kmeans.inertia_)\n    \n# \u30b0\u30e9\u30d5\u3092\u8868\u793a\nplt.plot(range(1,10), dist_list,marker='+')\nplt.xlabel('Number of clusters')\nplt.ylabel('Distortion')\n","2bea4105":"* k-means\u306b\u3066\u30af\u30e9\u30b9\u30bf\u30fc\u5206\u6790\u3092\u5b9f\u884c(4\u5206\u5272)","c4d079a6":"* \u30af\u30e9\u30b9\u30bf\u30fcID\u3054\u3068\u306b\u5404\u5909\u6570\u3092\u96c6\u8a08","7f310d35":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u8868\u793a(\u6700\u521d\u306e5\u884c\u76ee)","34bfa7eb":"* \u6a39\u5f62\u56f3(\u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0)\u3092\u4f5c\u6210","1a879798":"* \u30af\u30e9\u30b9\u30bf\u6570\u306b\uff13\u3092\u6307\u5b9a\u3057\u3066\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0","03017bfa":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u5b9a\u7fa9\u3092\u78ba\u8a8d","38b191e5":"# \u3010\u6f14\u7fd2\u3011k-means\u6cd5(\u975e\u968e\u5c64\u578b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0)","8cc9c74a":"# \u3010\u6f14\u7fd2\u3011\u30a6\u30a9\u30fc\u30c9\u6cd5(\u968e\u5c64\u578b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0)","aefe456b":"* \u30af\u30e9\u30b9\u30bf\u30fcID\u3054\u3068\u306b\u30ec\u30b3\u30fc\u30c9\u4ef6\u6570\u3092\u8868\u793a","afc168fa":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u8aad\u307f\u8fbc\u307f\n","93ae1972":"* \u30af\u30e9\u30b9\u30bf\u30fcID\u3054\u3068\u306b\u5404\u5909\u6570\u3092\u96c6\u8a08(\u767e\u5206\u7387\u8868\u793a)","afe066fe":"* \u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8","706ae906":"* pandas-profiling\u3092\u4f7f\u7528\u3057\u30c7\u30fc\u30bf\u6982\u8981\u3092\u4e00\u62ec\u78ba\u8a8d","5a53bd94":"# \u3010\u6f14\u7fd2\u3011\u30a8\u30eb\u30dc\u30fc\u6cd5","3da39d62":"* \u96c6\u8a08\u3057\u305f\u5909\u6570\u3092\u7a4d\u307f\u4e0a\u3052\u68d2\u30b0\u30e9\u30d5\u8868\u793a","e66e90b6":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u6570\u5024\u9805\u76ee\u306e\u7d71\u8a08\u8981\u7d04\u91cf\u3092\u8868\u793a","86d82695":"* \u30af\u30e9\u30b9\u30bf\u30fcID\u3054\u3068\u306b\u5909\u6570\u3092\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u8868\u793a","b4d7de5b":"* \u4e0d\u8981\u306a\u30ab\u30e9\u30e0\u3092\u524a\u9664(\u8ca9\u58f2\u30c1\u30e3\u30cd\u30eb\u3001\u5404\u5b66\u7fd2\u306e\u5730\u57df)","4f3615fd":"* \u30a8\u30eb\u30dc\u30fc\u6cd5\u304b\u3089\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u7b97\u51fa","075f491e":"* \u96c6\u8a08\u3057\u305f\u5909\u6570(\u767e\u5206\u7387\u8868\u793a)\u3092\u7a4d\u307f\u4e0a\u3052\u68d2\u30b0\u30e9\u30d5\u8868\u793a","613f16ee":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30ec\u30b3\u30fc\u30c9\u6570\u3068\u30ab\u30e9\u30e0\u6570\u3092\u78ba\u8a8d","0d7b70fa":"* \u30ef\u30fc\u30c9\u6cd5\u3092\u4f7f\u7528\u3057\u968e\u5c64\u578b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u5b9f\u884c"}}