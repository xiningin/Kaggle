{"cell_type":{"407b841c":"code","94c54619":"code","74c00078":"code","9fc988ec":"code","ce3e89e7":"code","2955d2dc":"code","e549b3d2":"code","ea116577":"code","df30de90":"code","86a7f48d":"code","65d00ce4":"code","5ff08ded":"code","e3296061":"code","72954365":"code","3924f1eb":"code","9fd5e844":"code","ed2f1067":"code","1724f8c2":"code","50f9792d":"code","4fa8cb4f":"code","3222ff09":"code","3f249d4c":"code","2efd6345":"code","a37e4b0f":"code","7b9c1bea":"markdown","ff37d287":"markdown","825c183a":"markdown","cbc3fb5a":"markdown","c79061ca":"markdown","b7b814da":"markdown","ce77ba75":"markdown","01a0ce83":"markdown","7343ad40":"markdown","ad405d5e":"markdown","d3174c07":"markdown","25151fc2":"markdown","499b09e8":"markdown","5b135b1a":"markdown","dca50ee1":"markdown","5f3902fa":"markdown","8bc5bc2f":"markdown"},"source":{"407b841c":"# processamento de dados, algebra linear\nimport numpy as np \nimport pandas as pd","94c54619":"# imprime os arquvios\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","74c00078":"df = pd.read_csv('\/kaggle\/input\/mushroom-classification\/mushrooms.csv')\ndf.sample(3)","9fc988ec":"# recupera os valores (X), e as classes (Y)\nX = df.drop('class', axis=1)\nY = df['class']","ce3e89e7":"X.info()","2955d2dc":"from sklearn.preprocessing import LabelEncoder","e549b3d2":"for column in X.columns:\n    tranformer = LabelEncoder()\n    X[column] = tranformer.fit_transform(X[column])","ea116577":"X.sample(3)","df30de90":"# acur\u00e1cia\nfrom sklearn.metrics import accuracy_score","86a7f48d":"# vari\u00e1vel de resultado final\n# ser\u00e1 armazenado o resultado de todos experimentos\nexperiment = {}","65d00ce4":"# treinamento, test split\nfrom sklearn.model_selection import train_test_split","5ff08ded":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=26)","e3296061":"print('treinamento:', len(y_train))\nprint('teste      :', len(y_test))","72954365":"from sklearn.linear_model import Perceptron","3924f1eb":"model1 = Perceptron(random_state=26)\nmodel1.fit(X_train, y_train)","9fd5e844":"y_pred = model1.predict(X_test)","ed2f1067":"acc = accuracy_score(y_pred, y_test)\nprint('acur\u00e1cia :', acc)","1724f8c2":"experiment['Perceptron'] = {'acc':acc}","50f9792d":"from sklearn.neural_network import MLPClassifier","4fa8cb4f":"model2 = MLPClassifier(hidden_layer_sizes=(50, 50), max_iter=1_000, random_state=26)\nmodel2.fit(X_train, y_train)","3222ff09":"y_pred = model2.predict(X_test)","3f249d4c":"acc = accuracy_score(y_pred, y_test)\nprint('acur\u00e1cia :', acc)","2efd6345":"experiment['Multilayer Perceptron'] = {'acc':acc}","a37e4b0f":"pd.DataFrame(experiment).T","7b9c1bea":"## Conjunto de Dados\n\nSepara os conjuntos de treinamento e teste.","ff37d287":"### Avalia\u00e7\u00e3o","825c183a":"**Discuss\u00e3o Multilayer Perceptron**\n\nO Multilayer Perceptron alcan\u00e7ou a acur\u00e1cia m\u00e1xima de 100%.\n\n-----","cbc3fb5a":"## Carregamento dos Dados","c79061ca":"### Transforma\u00e7\u00e3o dos Dados","b7b814da":"Executando a transforma\u00e7\u00e3o dos dados para todas as colunas.","ce77ba75":"Observe que todas as colunas de entrada s\u00e3o valores categ\u00f3ricos.","01a0ce83":"### Avalia\u00e7\u00e3o","7343ad40":"Separando os valores de entrada e as classes correspondentes.","ad405d5e":"-----\n\n<a id=\"classification\"><\/a>\n# Classifica\u00e7\u00e3o\n\n- Conjunto de dados.\n- Experimentos.\n\n[Voltar para o Topo](#top)","d3174c07":"<a id=\"multi-perceptron\"><\/a>\n## Multilayer Perceptron","25151fc2":"# Redes Neurais - Classifica\u00e7\u00e3o de Cogumelos\n\nEste notebook realiza um estudo, um conjunto de experimentos, de algoritmos de redes neurais sobre o dataset [Mushroom Classification](https:\/\/www.kaggle.com\/uciml\/mushroom-classification). Um conjunto de dados que re\u00fane dados de mais de 8 mil cogumelos, com 21 caracter\u00edsticas, tais como formato, odor, seu habitat, entre outros. Nosso objetivo \u00e9 classificar se um cogumelo \u00e9 venenoso (classe p) ou comest\u00edvel (classe e).\n\n> Conte\u00fado voltado para iniciantes de Aprendizado de M\u00e1quina e Ci\u00eancia de Dados!\n\n<a id=\"top\"><\/a>\n## Conte\u00fado\n\n> **Nota.** Alguns c\u00f3digos foram ocultados a fim de facilitar a leitura.\n\nO notebook est\u00e1 organizado como segue:\n\n- [Dados](#data) - Carregamento dos dados, pr\u00e9-processamento.\n- [Classifica\u00e7\u00e3o](#classification) - Experimentos de Redes Neurais.\n    - [Perceptron](#perceptron) - Algoritmo Perceptron.\n    - [Multilayer Perceptron](#multi-perceptron) - Algoritmo Multilayer Perceptron.","499b09e8":"## Pr\u00e9-Processamento dos Dados\n\nVamos transformar os dados categ\u00f3ricos em valores num\u00e9ricos, simplesmente substituindo cada valor \u00fanico por um n\u00famero. Para fazer esta tarefa automaticamente utilizaremos o [Label Encoder](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.LabelEncoder.html).\n\n> Este processamento \u00e9 necess\u00e1rio para alguns algoritmos de Redes Neurais.","5b135b1a":"-----\n\n<a id=\"data\"><\/a>\n# Dados\n\n- Carregamento dos dados.\n- Pr\u00e9-processamento dos dados.\n\n[Voltar para o Topo](#top)","dca50ee1":"# Conclus\u00e3o\n\nPor fim, o melhor algoritmo foi o Multilayer Perceptron com acur\u00e1cia de 100%.   \nSua arquitetura possui duas camadas escondidas com 50 neur\u00f4nios cada, _i.e.,_ `(50, 50)`.","5f3902fa":"<a id=\"perceptron\"><\/a>\n## Perceptron","8bc5bc2f":"**Discuss\u00e3o Perceptron**\n\nO Perceptron conseguiu classificar bem o conjunto de dados, alcan\u00e7ando acur\u00e1cia de 89%.\n\n-----"}}