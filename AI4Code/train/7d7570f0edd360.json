{"cell_type":{"2428efd3":"code","f74df220":"code","67ea45b3":"code","bfaf503c":"code","ed629c3a":"code","274eb149":"code","e012d64e":"code","da38757b":"code","683d68c7":"code","b414a3bf":"markdown","9c5f9825":"markdown"},"source":{"2428efd3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.metrics import mean_squared_error","f74df220":"train = pd.read_csv('..\/input\/train.csv')","67ea45b3":"train.head()","bfaf503c":"A = train[train.columns[2:]].values\nb = train.target.values","ed629c3a":"Q,R = np.linalg.qr(A.T)","274eb149":"RTinv = np.linalg.pinv(R.T)","e012d64e":"U = np.dot(RTinv,b)","da38757b":"predictions = np.dot(R.T,U).clip(train.target.min(),train.target.max()) #We have no conditions so just keep the values in the range of min and max for target","683d68c7":"np.sqrt(mean_squared_error(np.log1p(b),np.log1p(predictions)))","b414a3bf":"**If**** it is a linear algebra problem then we can use matrix math to solve it\nAx = b\nUnfortunately we have more unknowns (columns) than equations (rows).  We say A is a fat matrix which as we know in the 21st century that fat is bad\nHowever we can transpose A so that it is nice and thin and then do QR decomposition of Atranspose","9c5f9825":"Now for the 2 norm all we need to solve is\nRTransposeU = b where U is the unknown"}}