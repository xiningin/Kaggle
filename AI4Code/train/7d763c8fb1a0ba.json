{"cell_type":{"54932139":"code","bc4319d5":"code","7c66a930":"code","2836e1a0":"code","2e316db1":"code","01e5e593":"code","b11472f2":"code","d9307b03":"code","30e25e90":"code","e213253c":"code","e8347d57":"code","84454f81":"code","0b2da7f4":"code","e592d120":"code","bc019b78":"code","d1a6349d":"code","e4ab9d23":"code","d5dc0491":"code","4d770334":"code","78bfc89f":"code","c674e9df":"code","4d4dc493":"code","7ca2631b":"code","278baeb1":"code","985fa44b":"code","dff8db44":"code","0cdb1c21":"code","42ad0716":"code","93d993e5":"code","76c41ae0":"code","0086dcef":"code","c3ce9f1e":"markdown","7a2912b9":"markdown","24c3a4b7":"markdown","ef28c2d5":"markdown","83bdbe45":"markdown","f038c223":"markdown","aa06a0ec":"markdown","0a8247a8":"markdown","8cee0712":"markdown"},"source":{"54932139":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom eli5.sklearn import PermutationImportance\nimport eli5\nfrom pdpbox import pdp, get_dataset, info_plots\nimport shap","bc4319d5":"app_data = pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')\napp_data.head()","7c66a930":"app_data.info()","2836e1a0":"app_data.isna().sum()","2e316db1":"app_data.dropna(inplace = True)","01e5e593":"app_data.info()","b11472f2":"def toMB(size):\n    if 'M' in size:\n        x = size[:-1]\n        x = float(x)\n        return(x)\n    elif 'k' == size[-1:]:\n        x = size[:-1]\n        x = float(x)\/1000\n        return(x)\n    else:\n        return None\n\napp_data[\"Size\"] = app_data[\"Size\"].map(toMB)\n\napp_data.Size.fillna(method = 'ffill', inplace = True)","d9307b03":"app_data['Installs'] = [int(i[:-1].replace(',','')) for i in app_data['Installs']]","30e25e90":"def pricetofloat(price):\n    if price == '0':\n        return 0\n    else:\n        price = price[1:]\n        price = float(price)\n        return price\n\napp_data['Price'] = app_data['Price'].map(pricetofloat).astype(float)","e213253c":"app_data['Reviews'] = app_data['Reviews'].astype(int)","e8347d57":"app_data.info()","84454f81":"app_data.head()","0b2da7f4":"plt.figure(figsize=(40,20))\nsns.regplot(x=\"Reviews\", y=\"Installs\", data=app_data)\nsns.set(style=\"white\",font_scale=3)","e592d120":"plt.figure(figsize=(40,20))\nsns.regplot(x=\"Rating\", y=\"Installs\", data=app_data)\nsns.set(style=\"white\",font_scale=6)","bc019b78":"plt.figure(figsize=(40,20))\nsns.regplot(x=\"Size\", y=\"Installs\", data=app_data)\nsns.set(style=\"white\",font_scale=5)","d1a6349d":"plt.figure(figsize=(40,20))\nsns.regplot(x=\"Reviews\", y=\"Rating\", data=app_data)\nsns.set(style=\"white\",font_scale=5)","e4ab9d23":"plt.figure(figsize=(40,20))\nsns.regplot(x=\"Size\", y=\"Rating\", data=app_data)\nsns.set(style=\"white\",font_scale=5)","d5dc0491":"rd=app_data.groupby(['Category']).sum().sort_values(by='Installs', ascending=True).reset_index()\nfig = px.bar(rd,\n             x='Installs', y='Category',\n             title=f'Number of installs in each category', text='Installs', color='Installs' , height=1500, orientation='h')\nfig.show()","4d770334":"kd=app_data.groupby(['Category']).mean().sort_values(by='Rating', ascending=True).reset_index()\nfig = px.bar(kd,\n             x='Rating', y='Category',\n             title=f'Mean of rating each category', text='Rating', color='Rating' , height=1500, orientation='h')\nfig.show()","78bfc89f":"ad=app_data.groupby(['Android Ver']).sum().sort_values(by='Installs', ascending=True).reset_index()\nfig = px.bar(ad,\n             x='Installs', y='Android Ver',\n             title=f'Number of installs for each version of Android', text='Installs', color='Installs' , height=1500, orientation='h')\nfig.show()","c674e9df":"fd=app_data.groupby(['Category']).sum().sort_values(by='Installs', ascending=True)\nfig = make_subplots(rows=1, cols=1, specs=[[{'type':'domain'}]])\nfig.add_trace(go.Pie(labels=fd.index\n                     , values=fd[\"Installs\"]\n                     , name=\"Installs\"),1, 1)\n\nfig.update_traces(hole=0.4, hoverinfo=\"label+percent+name\")\nfig.update_layout(\n    \n    title_text=\"Percentage of installation for each category\",\n    annotations=[dict(text='Installs', x=1, y=2, font_size=10, showarrow=False)])\nfig.show()","4d4dc493":"def get_mae(max_leaf_nodes, X_train, X_valid, y_train, y_valid):\n    my_model = XGBRegressor(n_estimators=max_leaf_nodes, learning_rate=0.01,n_jobs=4)\n    my_model.fit(X_train, y_train)\n    predictions = my_model.predict(X_valid)\n    mae = mean_absolute_error(predictions, y_valid)\n    return(mae)","7ca2631b":"cols_to_use = ['Installs', 'Reviews', 'Size','Category','Price']\nobject_cols=['Category']\nX = app_data[cols_to_use]\ny = app_data.Rating\nmy_app = pd.read_csv('..\/input\/my-app\/pre.csv')\nX_train, X_valid, y_train, y_valid = train_test_split(X, y)\nlabel_encoder = LabelEncoder()\nfor col in object_cols:\n    X_train[col] = label_encoder.fit_transform(X_train[col])\n    X_valid[col] = label_encoder.transform(X_valid[col])\n    my_app[col]=label_encoder.transform(my_app[col])\n\nfor max_leaf_nodes in [5, 50, 500, 5000,10000,20000]:\n    my_mae = get_mae(max_leaf_nodes, X_train, X_valid, y_train, y_valid)\n    print(\"n_estimators: %d  \\t\\t Mean Absolute Error:  %f\" %(max_leaf_nodes, my_mae))","278baeb1":"my_main_model = XGBRegressor(n_estimators=5000, learning_rate=0.01,n_jobs=4)\nmy_main_model.fit(X_train, y_train)\npredictions = my_main_model.predict(X_valid)\nprint(\"Mean Absolute Error: \" + str(mean_absolute_error(predictions, y_valid)))","985fa44b":"my_app","dff8db44":"predictions = my_main_model.predict(my_app)\npredictions","0cdb1c21":"perm = PermutationImportance(my_main_model, random_state=1).fit(X_valid, y_valid)\neli5.show_weights(perm, feature_names = X_valid.columns.tolist())","42ad0716":"pdp_goals = pdp.pdp_isolate(model=my_main_model, dataset=X_valid, model_features=cols_to_use, feature='Reviews')\n\n\npdp.pdp_plot(pdp_goals, 'Reviews')\nplt.show()","93d993e5":"pdp_goals = pdp.pdp_isolate(model=my_main_model, dataset=X_valid, model_features=cols_to_use, feature='Installs')\n\n\npdp.pdp_plot(pdp_goals, 'Installs')\nplt.show()","76c41ae0":"data_for_prediction = X_valid.iloc[5]\ndata_for_prediction_array = data_for_prediction.values.reshape(1, -1)\nexplainer = shap.TreeExplainer(my_main_model)\nshap_values = explainer.shap_values(data_for_prediction)\nshap.initjs()\nshap.force_plot(explainer.expected_value, shap_values,  data_for_prediction)","0086dcef":"explainer = shap.TreeExplainer(my_main_model)\n\nshap_values = explainer.shap_values(X_valid,check_additivity=False)\n\nshap.summary_plot(shap_values, X_valid)","c3ce9f1e":"*We want to predict the rating of a software that in sports category and installation number is 100000 and its size is 17 MB with the reviews number 87510 and that price is 0.*","7a2912b9":"**Demonstrate the strength of the relationship between the features by the regression line**","24c3a4b7":"# Preprocessing","ef28c2d5":"**Based on this model, the rating of this software is 4.57**","83bdbe45":"# Analyze the model and features used","f038c223":"#  **Imports and Datasets**","aa06a0ec":"Change columns with numerical data of \"object\" type to \"int\" or \"float\"","0a8247a8":"# Building a model and its validate with different parameters to prevent overfitting and underfitting","8cee0712":"**Obtaining rows with unknown values and drop them**"}}