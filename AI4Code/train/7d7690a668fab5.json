{"cell_type":{"d27ba027":"code","98bd75a1":"code","eacf2798":"code","69676d9b":"code","c0773611":"code","a2c9ad73":"code","68b785d0":"code","035de2f5":"code","b8128af3":"code","b2393715":"code","ffccaa3b":"code","1fc05b42":"code","b192fd44":"code","42dd0307":"code","a7e3c5d6":"code","e3e24c07":"code","e348e452":"code","e18cd74d":"code","b912f5cb":"markdown","17f69422":"markdown","b45da1b7":"markdown","3de14bf0":"markdown","0bc5d600":"markdown","73e48655":"markdown","f4733d60":"markdown"},"source":{"d27ba027":"import os\n\nimport numpy as np\nimport pandas as pd\nimport pyarrow.parquet as pq\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nprint(os.listdir('..\/input'))\nprint(os.listdir('..\/input\/phase-subs'))\n\ndata_dir = '..\/input'","98bd75a1":"metadata_train = pd.read_csv(data_dir + '\/vsb-power-line-fault-detection\/metadata_train.csv')","eacf2798":"metadata_train['target_phase_sum'] = metadata_train.groupby('id_measurement')['target'].transform(np.sum)\nmetadata_train.head()","69676d9b":"plt.hist(metadata_train['target_phase_sum'].values)\nplt.show()","c0773611":"print(len(metadata_train[metadata_train['target_phase_sum'] == 1]))\nprint(len(metadata_train[metadata_train['target_phase_sum'] == 2]))\nprint(len(metadata_train[metadata_train['target_phase_sum'] == 3]))","a2c9ad73":"metadata_train[metadata_train['target_phase_sum'] == 1].head(10)","68b785d0":"metadata_train[metadata_train['target_phase_sum'] == 2].head(10)","035de2f5":"# Submission from LSTM model trained on each phase seperately\n# Source https:\/\/www.kaggle.com\/braquino\/5-fold-lstm-attention-fully-commented-0-694 with modification to train and predict on each phase\nsub_phase = pd.read_csv(data_dir + '\/phase-subs\/lstm_5fold_phase_564_sub.csv')\nsub_phase_n_faults = sub_phase.target.sum()\nprint(sub_phase_n_faults)","b8128af3":"# Submission from LSTM model trained on concatenated phases\n# Source https:\/\/www.kaggle.com\/braquino\/5-fold-lstm-attention-fully-commented-0-694\nsub_phase_concat = pd.read_csv(data_dir + '\/phase-subs\/lstm_5fold_phase_concat_648_sub.csv')\nsub_phase_concat_n_faults = sub_phase_concat.target.sum()\nprint(sub_phase_concat_n_faults)","b2393715":"diff_faults = sub_phase_n_faults - sub_phase_concat_n_faults\nprint(diff_faults)","ffccaa3b":"meta_test = pd.read_csv(data_dir + '\/vsb-power-line-fault-detection\/metadata_test.csv')","1fc05b42":"# Merge meta test meta data so we can compare predictions from each submission\nsub_merge = sub_phase.copy()\nsub_merge = sub_merge.drop(columns=['target'])\nsub_merge['id_measurement'] = meta_test.id_measurement.values\nsub_merge['phase'] = meta_test.phase.values\nsub_merge['target_sub_phase'] = sub_phase['target'].values\nsub_merge['target_sub_phase_concat'] = sub_phase_concat['target'].values\nsub_merge.head()","b192fd44":"sub_merge[sub_merge['target_sub_phase_concat'] == 1].head(50)","42dd0307":"sub_merge['target_sub_phase_group_sum'] = sub_merge.groupby('id_measurement')['target_sub_phase'].transform(np.sum)\nsub_merge[sub_merge['target_sub_phase_concat'] == 1].head(20)","a7e3c5d6":"sub_merge['target'] = sub_merge.target_sub_phase_concat.values\nsub_merge.loc[(sub_merge['target_sub_phase'] == 0) & (sub_merge['target_sub_phase_concat'] == 1) & (sub_merge['target_sub_phase_group_sum'] == 2), 'target'] = 0","e3e24c07":"sub_merge.head()","e348e452":"final_sub = sub_merge[['signal_id', 'target']]\nfinal_sub.head()","e18cd74d":"final_sub.to_csv('submission.csv', index=False)","b912f5cb":"Let's try improve the phase concat model submission by setting the suspected false positives to zero. ","17f69422":"## Phase Fault Distributions and Concatenating Phases Problem\n\nAs we can see below, 57 of the lines have a fault in only 1 phase, and another 57 of the lines only have a fault in 2 phases. If the test set has a similar distribution of phase faults then a model such as https:\/\/www.kaggle.com\/braquino\/5-fold-lstm-attention-fully-commented-0-694 that concatenates all 3 phases and always predicts a fault for all 3 phases in a measurement then it will inherently predict some false positives. Concatenating the phases does seem to be very effective but maybe we can combine predictions from a model that trains and predicts on each phase individually to further improve the score.","b45da1b7":"The phase only model predicted 239 more faults than the phase concat model, it scores lower on the LB so this might indicate it is predicting more false positives.","3de14bf0":"The phase concat model contains many of the same predictions as the phase model, but notice target_sub_phase=0 for signal_id 9166, 9467 and 10059. I am thinking the phase concat model has predicted a false postive here. If the test set target distribtion is similar to the train set then the phase concat model would certainly predict some false postives since some faults only affect 1 or 2 phases.","0bc5d600":"## Blend Submissions","73e48655":"The new submission scores 0.628 on the LB, so it's not an improvement on the phase concat model which scored 0.648. Maybe with a better scoring submissions from a model trained on each phase this method might help, or maybe every fault in the test set happens on all 3 phases. ","f4733d60":"## Compare Predicted Targets"}}