{"cell_type":{"26b15121":"code","3ac53fae":"code","6335d802":"code","58f0a65e":"code","c2ff5c06":"code","8c3429cc":"code","03dbe75f":"code","da2608fb":"code","7dcde9aa":"code","a1e1aea5":"code","f5e082a5":"code","f2e1eb52":"code","26dd253f":"code","ab72cb69":"code","37096582":"markdown","4fdf8b60":"markdown","9bbc3f83":"markdown","5e3b1724":"markdown","77fdfd83":"markdown","d198f7c1":"markdown"},"source":{"26b15121":"import numpy as np\nimport pandas as pd\nimport os\nimport json\nimport numpy as np\nimport cv2\nfrom matplotlib import image as mpimg\nfrom matplotlib import pyplot as plt\nimport pytesseract\nfrom tqdm import tqdm_notebook\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 16, 12\n%config InlineBackend.figure_format = 'svg'","3ac53fae":"# \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0444\u0430\u0439\u043b \u0441 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u043e\u0439 \u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0435\u0433\u043e \u043a\u0430\u043a \u0441\u043b\u043e\u0432\u0430\u0440\u044c\nwith open('\/kaggle\/input\/chelhack\/train.json', 'r') as f:\n    annotation = json.load(f)","6335d802":"# \u0442\u0430\u043a \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u043e\u0439\n# annotation","58f0a65e":"# \u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0438\u0442\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044e \u0441 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u043e\u0439\ncounter = 0\nimage_folder = '\/kaggle\/input\/chelhack\/train\/'\n\nfor key, value in annotation.items():\n    image_name = value['filename']\n    print('id \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f', image_name)\n    image_path = image_folder + image_name\n    image = mpimg.imread(image_path)\n    counter += 1\n    for region in value['regions']:\n        all_points_x = region['shape_attributes']['all_points_x']\n        all_points_y = region['shape_attributes']['all_points_y']\n        number = region['region_attributes']['description']\n        print('x \u0442\u043e\u0447\u043a\u0438 \u043f\u043e\u043b\u0438\u0433\u043e\u043d\u0430', all_points_x)\n        print('\u0443 \u0442\u043e\u0447\u043a\u0438 \u043f\u043e\u043b\u0438\u0433\u043e\u043d\u0430:', all_points_y)\n        print('\u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043d\u043e\u043c\u0435\u0440\u0430', number)\n    print()\n    if counter >= 3:\n        break","c2ff5c06":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u043a\u0430\u0437\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438\ndef show(image_path, annotation, show_mask=True, show_number=True):\n    rcParams['figure.figsize'] = 16, 12\n    image = mpimg.imread(image_path)\n    image_name = image_path.split('\/')[-1]\n    size = str(os.path.getsize(image_path))\n    for i in range(len(annotation[image_name+size]['regions'])):\n        number = annotation[image_name+size]['regions'][i]['region_attributes']['description']\n        print(number)\n        all_x = annotation[image_name+size]['regions'][i]['shape_attributes']['all_points_x']\n        all_y = annotation[image_name+size]['regions'][i]['shape_attributes']['all_points_y']\n        polygon = []\n        for i in range(len(all_x)):\n            polygon.append([all_x[i], all_y[i]])\n        pts = np.array(polygon, np.int32)\n        pts = pts.reshape((-1,1,2))\n        cv2.polylines(image, [pts], True, (0, 255, 255), 2, cv2.LINE_AA)\n    plt.imshow(image)","8c3429cc":"image_path = '\/kaggle\/input\/chelhack\/train\/61f67589ff4715a3c8fc5248fc999b31201906251002098100-full.jpg'\nshow(image_path, annotation)","03dbe75f":"plate_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + \"haarcascade_russian_plate_number.xml\")\nimg = mpimg.imread(\"\/kaggle\/input\/chelhack\/train\/61f67589ff4715a3c8fc5248fc999b31201906251002098100-full.jpg\")\nplt.imshow(img);","da2608fb":"plates = plate_cascade.detectMultiScale(img)\n\nfor (x,y,w,h) in plates:\n    img = cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2) # \u0440\u0438\u0441\u0443\u0435\u043c \u0431\u043e\u043a\u0441 \u0441 \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0435\u0439\n    cropped = img[y:y+h, x:x+w] # \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u0441 \u043d\u043e\u043c\u0435\u0440\u043e\u043c\nplt.imshow(img);","7dcde9aa":"# \u043f\u0440\u0438\u043c\u0435\u0440 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u043e\u043c\u0435\u0440\u0430\ndef detect(image):\n    plate_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + \"haarcascade_russian_plate_number.xml\")\n    plates = plate_cascade.detectMultiScale(image)\n    return plates","a1e1aea5":"text = pytesseract.image_to_string(cropped) \nprint(text)","f5e082a5":"# \u043f\u0440\u0438\u043c\u0435\u0440 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\ndef recognize(cropped_image):\n    number = pytesseract.image_to_string(cropped_image)\n    return number","f2e1eb52":"sample_submission = pd.read_csv('\/kaggle\/input\/chelhack\/sample_submission_val.csv')","26dd253f":"PATH = '\/kaggle\/input\/chelhack\/val'\nimages_list = os.listdir(PATH)\n\nfor image_name in tqdm_notebook(images_list):\n    image_path = os.path.join(PATH, image_name)\n    image = mpimg.imread(image_path)\n    plates = detect(image)\n    for plate in plates:\n        x, y, w, h = plate\n        cropped_image = image[y:y+h, x:x+w]\n        number = recognize(cropped_image)\n        sample_submission.loc[sample_submission.ImageId == image_name, 'PredictionString'] = number","ab72cb69":"sample_submission.to_csv('test_submission.csv', index=False)","37096582":"## \u041b\u043e\u043a\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u0430","4fdf8b60":"## \u0421\u043e\u0437\u0434\u0430\u0442\u044c .csv \u0444\u0430\u0439\u043b \u0434\u043b\u044f \u0441\u0430\u0431\u043c\u0438\u0442\u0430","9bbc3f83":"## \u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435","5e3b1724":"## \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438","77fdfd83":"\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u043b\u043e\u043a\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 (\u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 openCV \u0438 \u043a\u0430\u0441\u043a\u0430\u0434\u043e\u0432 \u0425\u0430\u0430\u0440\u0430)","d198f7c1":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438 (\u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e tesseract)"}}