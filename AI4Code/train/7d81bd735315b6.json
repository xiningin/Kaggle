{"cell_type":{"f906558a":"code","d08b065e":"code","3f57195f":"code","881a5b23":"code","de3a5aaf":"code","22afeb8e":"code","51b835a4":"code","bec8e669":"code","e2a72882":"code","d4ba515b":"code","34cd917d":"code","3edeef82":"code","77ba6903":"code","6aa50178":"code","ff87425e":"code","ea4bcbc1":"code","93eff9d4":"code","e62370c3":"code","32ad97c4":"code","ea2d9b72":"code","1054e5f4":"code","862101f6":"code","b50cf04d":"code","833e151f":"code","ebb53c49":"code","374f6373":"code","01ea1dfc":"code","6ea344e0":"code","7fae0de4":"code","5fb21114":"code","2ebd93f1":"code","2a573b85":"code","2f4606f3":"code","97dd5665":"code","40aaeaa0":"code","a5daeb35":"code","ff11cf5b":"code","177a6901":"code","b4e995c3":"code","90113173":"code","e44788cf":"code","9b8dfa56":"code","63af79e0":"code","ec626981":"code","886da71d":"code","017616bd":"code","03c60f6b":"code","5ed64c79":"code","9c619d95":"code","b8442f3d":"code","f999e6cb":"code","9fbc35de":"code","7c6eb2b0":"code","329b8b77":"code","db6aac25":"code","70e41497":"code","574b2988":"code","b316f9de":"code","6912b205":"markdown","0c3576c8":"markdown","263bb2a0":"markdown","1929e6b0":"markdown","e215e592":"markdown","53b7702c":"markdown","97ae9ad1":"markdown","833f16ea":"markdown"},"source":{"f906558a":"# Directive pour afficher les graphiques dans Jupyter\n%matplotlib inline","d08b065e":"# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport missingno as msgn\n\nfrom sklearn import metrics\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LogisticRegression\n","3f57195f":"# Lecture des donn\u00e9es\ndf = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","881a5b23":"df.head(15)","de3a5aaf":"df.Outcome.value_counts() #Nombre de positif et n\u00e9gatif par diab\u00e8tes","22afeb8e":"df.columns","51b835a4":"sns.pairplot(df, hue = \"Outcome\")","bec8e669":"for col in df.columns:\n    plt.figure(figsize = [10,5])\n    sns.distplot(df[col])","e2a72882":"# Changement du 0 des r\u00e9sultats du test en NaN\ndf_ = df.replace(0,np.nan)\ndf_.Pregnancies = df.Pregnancies\ndf_.Outcome = df.Outcome","d4ba515b":"df_.head(15)","34cd917d":"# Comptage par colonnes\ndf_.count()      ","3edeef82":"msgn.bar(df_)","77ba6903":"df_.info()","6aa50178":"values={'Glucose':np.random.normal(df_.Glucose.mean(),df_.Glucose.std()), \n        'BloodPressure':np.random.normal(df_.BloodPressure.mean(),df_.BloodPressure.std()), \n        'SkinThickness':np.random.normal(df_.SkinThickness.mean(),df_.SkinThickness.std()), \n        'BMI':np.random.normal(df_.BMI.mean(),df_.BMI.std())}","ff87425e":"values","ea4bcbc1":"df_ = df_.fillna(value = values)","93eff9d4":"df_Insulin_nan = df_[np.isnan(df_.Insulin)]","e62370c3":"df_Insulin = df_.drop(df_Insulin_nan.index)","32ad97c4":"X = df_Insulin.drop(['Insulin'], axis=1)\ny = df_Insulin.Insulin\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 1)","ea2d9b72":"from sklearn import ensemble\nrf = ensemble.RandomForestRegressor()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)\nprint(rf.score(X_test,y_test))","1054e5f4":"plt.figure(figsize=(12,12))\nplt.scatter(y_test, y_rf)\nplt.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()], color='red', linewidth=3)","862101f6":"X_nan = df_Insulin_nan.drop(['Insulin'], axis=1)","b50cf04d":"y_nan = rf.predict(X_nan)","833e151f":"df_Insulin_nan['Insulin'] = y_nan","ebb53c49":"df_ = pd.concat([df_Insulin, df_Insulin_nan], ignore_index = True, sort = False)","374f6373":"df_.head()","01ea1dfc":"df_.describe()","6ea344e0":"scaler = preprocessing.StandardScaler()\ndf_[['Glucose', 'BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction']] = scaler.fit_transform(df_[['Glucose', 'BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction']])","7fae0de4":"df_.describe()","5fb21114":"scaler = preprocessing.MinMaxScaler()\ndf_[['Glucose', 'BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction']] = scaler.fit_transform(df_[['Glucose', 'BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction']])","2ebd93f1":"df_.describe()","2a573b85":"X = df_.drop(['Outcome'], axis=1)\ny = df_.Outcome\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","2f4606f3":"for col in df_.columns :\n    plt.figure(figsize = [10,5])\n    sns.distplot(df_[col])","97dd5665":"lr = LogisticRegression()\nlr.fit(X_train,y_train)\ny_lr = lr.predict(X_test)","40aaeaa0":"lr_score = metrics.accuracy_score(y_test, y_lr)\nprint(lr_score)","a5daeb35":"print(metrics.classification_report(y_test, y_lr))","ff11cf5b":"cm = metrics.confusion_matrix(y_test, y_lr)\nprint(cm)","177a6901":"probas = lr.predict_proba(X_test)\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test,probas[:, 1])\nroc_auc = auc(false_positive_rate, true_positive_rate)\nprint (roc_auc)","b4e995c3":"plt.figure(figsize = (12,12))\nplt.title('Receiver Operating Characteristic')\nplt.plot(false_positive_rate, true_positive_rate, 'b', label='AUC = %0.2f'% roc_auc)\nplt.legend(loc='lower right')\nplt.plot([0,1],[0,1],'r--')        # plus mauvaise courbe\nplt.plot([0,0,1],[0,1,1],'g:')     # meilleure courbe\nplt.xlim([-0.1,1.2])\nplt.ylim([-0.1,1.2])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')","90113173":"from imblearn.under_sampling import RandomUnderSampler\n\nrus = RandomUnderSampler()\n\nX_rus, y_rus = rus.fit_sample(X_train, y_train)","e44788cf":"print(X_rus.shape)\nprint(y_rus.shape)","9b8dfa56":"lr = LogisticRegression()\nlr.fit(X_rus,y_rus)\ny_lr = lr.predict(X_test)","63af79e0":"print(metrics.classification_report(y_test, y_lr))","ec626981":"cm = metrics.confusion_matrix(y_test, y_lr)\nprint(cm)","886da71d":"probas = lr.predict_proba(X_test)\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test,probas[:, 1])\nroc_auc = auc(false_positive_rate, true_positive_rate)\nprint (roc_auc)","017616bd":"plt.figure(figsize=(12,12))\nplt.title('Receiver Operating Characteristic')\nplt.plot(false_positive_rate, true_positive_rate, 'b', label='AUC = %0.2f'% roc_auc)\nplt.legend(loc='lower right')\nplt.plot([0,1],[0,1],'r--')        # plus mauvaise courbe\nplt.plot([0,0,1],[0,1,1],'g:')     # meilleure courbe\nplt.xlim([-0.1,1.2])\nplt.ylim([-0.1,1.2])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')","03c60f6b":"print(metrics.classification_report(y_test,y_lr))","5ed64c79":"from imblearn.under_sampling import TomekLinks\n\ntl = TomekLinks('auto',True,'majority')\nX_tl, y_tl = tl.fit_sample(X_train, y_train)","9c619d95":"lr = LogisticRegression()\nlr.fit(X_tl,y_tl)\ny_lr = lr.predict(X_test)","b8442f3d":"probas = lr.predict_proba(X_test)\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test,probas[:, 1])\nroc_auc = auc(false_positive_rate, true_positive_rate)\nprint (roc_auc)","f999e6cb":"print(metrics.classification_report(y_test,y_lr))","9fbc35de":"from imblearn.over_sampling import SMOTE\n\nsmote = SMOTE('minority')\nX_sm, y_sm = smote.fit_sample(X_train, y_train)","7c6eb2b0":"lr = LogisticRegression()\nlr.fit(X_sm,y_sm)\ny_lr = lr.predict(X_test)","329b8b77":"cm = metrics.confusion_matrix(y_test, y_lr)\nprint(cm)","db6aac25":"probas = lr.predict_proba(X_test)\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test,probas[:, 1])\nroc_auc = auc(false_positive_rate, true_positive_rate)\nprint (roc_auc)","70e41497":"print(metrics.classification_report(y_test,y_lr))","574b2988":"from sklearn.model_selection import learning_curve\ndef plot_learning_curve(est, X_train, y_train) :\n    train_sizes, train_scores, test_scores = learning_curve(estimator=est, X=X_train, y=y_train, train_sizes=np.linspace(0.1, 1.0, 10),\n                                                        cv=5,\n                                                        n_jobs=-1)\n    train_mean = np.mean(train_scores, axis=1)\n    train_std = np.std(train_scores, axis=1)\n    test_mean = np.mean(test_scores, axis=1)\n    test_std = np.std(test_scores, axis=1)\n    plt.figure(figsize=(8,10))\n    plt.plot(train_sizes, train_mean, color='blue', marker='o', markersize=5, label='training accuracy')\n    plt.fill_between(train_sizes, train_mean + train_std, train_mean - train_std, alpha=0.15, color='blue')\n    plt.plot(train_sizes, test_mean,color='green', linestyle='--',marker='s', markersize=5,label='validation accuracy')\n    plt.fill_between(train_sizes,test_mean + test_std,test_mean - test_std,alpha=0.15, color='green')\n    plt.grid(b='on')\n    plt.xlabel('Number of training samples')\n    plt.ylabel('Accuracy')\n    plt.legend(loc='lower right')\n    plt.ylim([0.6, 1.0])\n    plt.show()","b316f9de":"plot_learning_curve(lr, X_train, y_train)","6912b205":"- Pregnancies = No. of times pregnant\n- Glucose = Plasma Glucose Concentration\n- BloodPressure = Diastolic Blood Pressure\n- SkinThickness = \n- Insulin \n- BMI \n- DiabetesPedigreeFunction\n- Age = Age\n- Outcome = Result (1 - Yes \/ 0 - No)","0c3576c8":"# *Sur\u00e9chantillonnage*","263bb2a0":"# *Sous \u00e9chantillonnage*","1929e6b0":"*Utiliser le m\u00e9thode Tomek*","e215e592":"*Utiliser la m\u00e9thode SMOTE*","53b7702c":"# *Interpr\u00e9tation des param\u00e8tres*","97ae9ad1":"# *R\u00e9gression Logistique*","833f16ea":"# *Visualisation*"}}