{"cell_type":{"e3b0b2ae":"code","503d7de7":"code","8ebd715c":"code","efd24ac1":"code","ce2be5c3":"code","b65d7219":"code","2f89932a":"code","acf1faf2":"code","998ee674":"code","b7ba2f85":"code","d121bd4a":"code","17f38ace":"code","a9f4b6e5":"code","2dd8dd64":"code","467ad995":"code","6b456f06":"code","a9c555a8":"code","11dc5f1b":"code","3aae95f9":"code","bd22f40a":"code","3cf48a69":"code","adc1655a":"code","5dac1884":"code","7d3f7813":"code","5db4825c":"code","610f1867":"code","d6af258e":"code","3ed29f65":"code","6a472549":"code","b8d92271":"code","1a54f8cb":"code","eb843191":"code","cbf762fa":"code","62a5be52":"code","7b1705d8":"code","44228f63":"code","bee09ff5":"code","19bea6fb":"code","ae4046f3":"code","819c7a6f":"code","16bb30ee":"code","f7fbac2e":"code","9c281624":"code","10514fb5":"code","3fb1e4a4":"code","008635ec":"markdown","546d2960":"markdown","0bfa6aba":"markdown","66bb34e0":"markdown","bfb6116f":"markdown","b92505a0":"markdown","610ee3da":"markdown","49d7f003":"markdown","69c15059":"markdown","70cfbe03":"markdown","0eae5f0b":"markdown","3d0a2d0c":"markdown","e56babff":"markdown","275d05db":"markdown","ca8cb653":"markdown","8034c572":"markdown","ca027d5b":"markdown","faae3648":"markdown","27d0af66":"markdown","482fff8f":"markdown","996d1abc":"markdown","c16e5f7c":"markdown","b3e2337f":"markdown"},"source":{"e3b0b2ae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","503d7de7":"from matplotlib import pyplot as plt\nimport seaborn as sns \nimport missingno as msno\nimport re\n","8ebd715c":"file_path='..\/input\/car-tyres-dataset\/Car_Tyres_Dataset.csv'\ndf=pd.read_csv(file_path)\n","efd24ac1":"df.head()","ce2be5c3":"df.shape","b65d7219":"df.info()","2f89932a":"df.isna().sum()","acf1faf2":"msno.matrix(df)","998ee674":"df['Original Price']=df['Original Price'].apply(lambda x:x.replace(',','.'))\ndf['Selling Price']=df['Selling Price'].apply(lambda x:x.replace(',','.'))","b7ba2f85":"df['Original Price']=pd.to_numeric(df['Original Price'])\ndf['Selling Price']=pd.to_numeric(df['Selling Price'])","d121bd4a":"Categorical_col=[]\nNumerical_col=[]\nfor x in df.columns:\n    if (df[x].dtype==object):\n        Categorical_col.append(x)\n    else:\n        Numerical_col.append(x)\n","17f38ace":"for x in Categorical_col:\n    print(f'--->In {x} there are :{df[x].nunique()}')\n    print(f'--->In {x}. The categories are {df[x].unique()}')\n    print('-------------------------------------------------')\n    ","a9f4b6e5":"df['Model'].apply(lambda x: x.strip()).nunique()","2dd8dd64":"df['Model']=df['Model'].apply(lambda x: x.strip())","467ad995":"df.Model.unique()","6b456f06":"df['Model']=df['Model'].replace('New Swift (2018)','Swift')\n    ","a9c555a8":"df.Model.unique()","11dc5f1b":"df.Submodel.apply(lambda x:x.strip().lower()).nunique()","3aae95f9":"df.Submodel=df.Submodel.apply(lambda x:x.strip().lower())# cleaning a bit ","bd22f40a":"df.Submodel.unique()","3cf48a69":"df.Submodel=df.Submodel.replace(to_replace=r'vxi\\s\\w+|vxi\\W\\w+|vxi\\s\\W\\w+|^vxi\\W|vxi\\s\\W\\w+\\W',\n                                value='vxi', regex=True) # Uniforming the sub categories","adc1655a":"df.Submodel=df.Submodel.replace(to_replace=r'vdi\\s\\w+|vdi\\W\\w+|vdi\\s\\W\\w+|^vdi\\W|vdi\\s\\W\\w+\\W',\n                                value='vdi', regex=True)","5dac1884":"df.Submodel=df.Submodel.replace(to_replace=r'lxi\\s\\w+|lxi\\W\\w+|lxi\\s\\W\\w+|lxi\\W|lxi\\s\\W\\w+\\W',\n                                value='lxi', regex=True)","7d3f7813":"df.Submodel.nunique()","5db4825c":"df.head()","610f1867":"\nplt.figure(figsize=(7,7))\nsns.countplot(y=df.Model, order=df.Model.value_counts().index)\nplt.title('Cars Models')\nplt.show()","d6af258e":"df.Model.value_counts(normalize=True)","3ed29f65":"plt.figure(figsize=(8,12))\nsns.countplot(y=df.Submodel, order=df.Submodel.value_counts().index[:20])\nplt.title('Car Submodels')\nplt.show()","6a472549":"plt.figure(figsize=(10,10))\nsns.countplot(y=df['Tyre Brand'], order=df['Tyre Brand'].value_counts().index)\nplt.title('Tyre Brand')\nplt.show()","b8d92271":"df['Tyre Brand'].value_counts(normalize=True)[:5]","1a54f8cb":"for x in df['Tyre Brand'].value_counts().index[:4]:\n    sns.countplot(y=df['Serial No.'].loc[df['Tyre Brand']==x], order=df['Serial No.'].loc[df['Tyre Brand']==x].value_counts().index)\n    plt.title(x)\n    plt.show()\n    ","eb843191":"sns.countplot(x=df.Type)\nplt.show()","cbf762fa":"df.Type.value_counts(normalize=True)","62a5be52":"print('Range of tire load index :',df['Load Index'].min(),'---->',df['Load Index'].max())","7b1705d8":"sns.countplot(x=df['Load Index'])\nplt.title('Most load index used ')\nplt.show()","44228f63":"df['Load Index'].value_counts(normalize=True)","bee09ff5":"sns.countplot(y=df['Tyre Brand'].loc[df['Load Index']==88],order=df['Tyre Brand'].loc[df['Load Index']==88].value_counts().index)\nplt.title('Tyre index 88 & Brands')","19bea6fb":"load_index=df['Load Index'].value_counts().index\nbrand_ind=[]\n\nfor i in df['Load Index'].value_counts().index:\n    brand_ind.append(df['Tyre Brand'].loc[df['Load Index']== i ].value_counts().index[0])\n    \ndf1=pd.DataFrame(brand_index,columns=['Brand_index'])\ndf1['load_index']= load_index\n","ae4046f3":"df1","819c7a6f":"sns.countplot(y=df1.Brand_index,order=df1.Brand_index.value_counts().index)\nplt.title('Times that the brand is first seller in a load index')\nplt.show()","16bb30ee":"plt.figure(figsize=(10,10))\nsns.countplot(y=df.Size,order=df.Size.value_counts().index[:20])\n","f7fbac2e":"df.loc[df.Size== '185\/65 R 15']['Tyre Brand'].value_counts()[:3]","9c281624":"df.loc[df.Size== '185\/65 R 15']['Load Index'].unique()# the load index used in the most used size","10514fb5":"df.loc[df.Size== '185\/65 R 15']['Model'].unique() # models that use this size","3fb1e4a4":"sns.barplot(x=df['Original Price'],y=df['Tyre Brand'],)\nplt.axvline(df['Original Price'].mean(),0,1) # is the blue line that indicates the mean of original price.","008635ec":"The mains cars from Suzuki in this data are the models Ciaz, Dzire, Ertiga and Swift.","546d2960":"All missing values com from Rating ","0bfa6aba":"from 178 categoris we end up with 128 categories reordered","66bb34e0":"Most of the cars have Bridgestone(14%)  brand as Tyre folow by Goodyear(11.5%) and CEAT(10.3%).","bfb6116f":"We can observe all the missing values come fome the column rating ","b92505a0":"# Load Index ","610ee3da":"The most common tyre size is 185\/65 R15 , and the models from Sizuki that uses this size are the first 4 models most used. In wich Bridgestone is the higest seller ","49d7f003":"# Cars Models","69c15059":"The data contains only cars from the brand Maruti Suzuki. some of the models are the same but they are written in differents ways, same as submodels.","70cfbe03":"## Tyre Brands and most  products from each brand used.","0eae5f0b":"# Tyres brands","3d0a2d0c":"Here we can oberve why Good year is the most seller in different tyre index, it is a well known brand in the word and the mean prices are the lowest together with CEAT , JKTyre. Bridgestone is the higest price from the first four most bought tyres brands. ","e56babff":"Mos of the users prefer Tubleless 93% to be more precise.","275d05db":"The most submodels used are VXI(Petrol), LXI(Petrol), ZDI(diesel) and VDI.","ca8cb653":"as we can see there are som data that sould be interperted as int or float but insead it's an object.","8034c572":"# Tubeless Vs. Tube","ca027d5b":"# Resuming \n\nThe data has : 4 Principal models of cars: Swift Dzire, Ertiga, Ciaz, Swift.this cars use a determinates Tyre Size 185\/65 R15, Load Index 88 , and this part of the tyres market is dominated by Bdidge Stone. None the less there are others models, brands, Sizes,etc. That represent around 70 % of the data set, this categories are disperse.and in this ones it is mostly dominated by Good year, Yokohama, and Bridge Stone.Generaly the most sold Brands tend to have lower price than the rest of the brands   \n","faae3648":"The range of the load index goes from 69 to 106.This number indicates the maximum weight that each tyre of the vehicle can carry at the maximum speed limit.This index could indicate us which sector each brand specializes.\n    - 33% of the people uses an index of 88 \n    - 14% of the people uses an index of 85 \n","27d0af66":"# Tyre Size","482fff8f":"## Count most Brand Tyre index sold ","996d1abc":"Here Goodyear appears first wich indicates that is the brand that in general sells more in the diferent  Tyre index than the others. Second is Yokohama and Third is BridgeStone .","c16e5f7c":"In this grah there is the first four brands most used in the data. At first view, GoodYear is the brand with most products follow by Bridgestone and JKTyre and with the least types of tyres is CEAT.\nThe types of names that each tyre has it might be an indicative of what the client wants the firt three brands in their models incude tyres with names as ecopia,fuell smart. names that give an indicative of saving money. and the secon most related name used is related with duration and resistance. This strategi of names we can see it mostly in Goodyear and CEAT. Bridgestone has names more standarized like B-series.  ","b3e2337f":"# Cars Submodels"}}