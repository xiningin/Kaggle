{"cell_type":{"323f6d2b":"code","3e6a88fa":"code","4c6c7755":"code","ca70722a":"code","b84b0101":"code","f5461a92":"code","f0da6a55":"code","540d23dc":"code","df034ea2":"code","341deda7":"code","fc70b306":"code","5a330115":"code","b17473fa":"code","df5417dc":"code","c0bc4751":"code","1bde06c5":"code","f5892f3d":"code","c0656b9b":"code","f90aeecc":"code","f3c46b8d":"code","6ba0aa7b":"code","6b467e7f":"code","59bc6689":"code","a5eca18b":"code","cab1cbcf":"code","d64d3e11":"code","b9f81207":"code","17a40bf7":"code","c87be7da":"code","174a91a0":"code","784ab569":"code","804b23a4":"code","14de0b73":"code","10ad0646":"code","ed3ba6d5":"code","c481b78f":"code","b47fa327":"code","90f39a3f":"code","27d542e4":"code","50c85050":"code","d16bb698":"code","c14df974":"code","eea13335":"code","00b067e7":"code","075501f3":"code","b0143b0a":"code","27bcdf4f":"code","4f3f9b3b":"code","75dd4538":"code","38126d55":"code","355d9139":"code","25a76b42":"code","ee2be8a9":"code","472ddfa5":"code","0fc95c49":"code","586c6719":"code","474d2542":"code","d6cf2b95":"code","95ad21fb":"code","19bcfe56":"code","1bcf9137":"code","ad70de1e":"code","4799a677":"code","2c1bece5":"code","92fb333a":"markdown","fbc75806":"markdown","f752b01c":"markdown","3f9f2c91":"markdown","ccc725ab":"markdown","b7cf578d":"markdown","450146f7":"markdown","82a72088":"markdown","3cc78727":"markdown","5a176494":"markdown","fb1becda":"markdown","15eb41a7":"markdown","b7b221e4":"markdown","aecb564e":"markdown","69aa9260":"markdown","462e0639":"markdown","46618840":"markdown","88999111":"markdown"},"source":{"323f6d2b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3e6a88fa":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","4c6c7755":"path = '..\/input\/titanic\/'\ntrain = pd.read_csv(f'{path}train.csv')\ntest = pd.read_csv(f'{path}test.csv')","ca70722a":"train.head(2)","b84b0101":"test.head(2)","f5461a92":"train.shape, test.shape","f0da6a55":"sns.heatmap(train.isnull(), cbar=False, yticklabels=False)","540d23dc":"sns.heatmap(test.isnull(), cbar=False, yticklabels=False)","df034ea2":"sns.countplot('Survived', data = train)","341deda7":"plt.figure(figsize = (8,6))\nsns.distplot(train.Age, bins=40, color='darkred')","fc70b306":"sns.countplot(train.Sex, hue=train.Survived)","5a330115":"sns.countplot(train.Pclass, hue=train.Survived)","b17473fa":"sns.countplot(train.SibSp, hue=train.Survived)","df5417dc":"sns.countplot(train.Parch, hue=train.Survived)","c0bc4751":"sns.countplot(train.Embarked, hue=train.Survived)","1bde06c5":"train.drop('Cabin', axis = 1, inplace =True)\ntest.drop('Cabin', axis = 1, inplace =True)","f5892f3d":"train.Age.median()","c0656b9b":"test.Age.median()","f90aeecc":"train['Age'] = train.Age.fillna(value=28)\ntest['Age'] = test.Age.fillna(value=27)","f3c46b8d":"train.Embarked.mode()","6ba0aa7b":"test.Fare.median()","6b467e7f":"train[\"Embarked\"] = train.Embarked.fillna(value='S')\ntest['Fare'] = test.Fare.fillna(value= 14.4542)","59bc6689":"sns.heatmap(train.isnull(), cbar=False, yticklabels=False)","a5eca18b":"sns.heatmap(test.isnull(), cbar=False, yticklabels=False)","cab1cbcf":"train[\"Parent\"] = train.Parch.apply(lambda x: 'No' if x == 0  else 'Yes')","d64d3e11":"train.head(2)","b9f81207":"test['Parent'] = test.Parch.apply(lambda x: 'No' if x==0 else 'Yes')","17a40bf7":"test.head(2)","c87be7da":"train['Alone'] = train.SibSp.apply(lambda x: 'No' if x == 0 else 'Yes')\ntest['Alone'] = test.SibSp.apply(lambda x: 'No' if  x== 0 else 'Yes')","174a91a0":"train.head(2)","784ab569":"test.head(2)","804b23a4":"train = pd.get_dummies(train, columns=['Sex', 'Embarked','Parent', 'Alone'], drop_first=True)\ntrain.head(2)","14de0b73":"test = pd.get_dummies(test, columns=['Sex', 'Embarked','Parent', 'Alone'], drop_first=True)\ntest.head(2)","10ad0646":"X = train.drop(['PassengerId', 'Name', 'Survived', 'Ticket'], axis = 1)\ny = train.Survived\nX.shape, y.shape","ed3ba6d5":"from sklearn.model_selection import train_test_split","c481b78f":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0, shuffle = False)\nX_train.shape, y_train.shape, X_test.shape, y_test.shape","b47fa327":"from sklearn.linear_model import LogisticRegression","90f39a3f":"loreg = LogisticRegression()\nloreg.fit(X_train, y_train)","27d542e4":"pred_loreg = loreg.predict(X_test)","50c85050":"from sklearn.metrics import accuracy_score","d16bb698":"#evalute model\naccuracy_score(y_test, pred_loreg)","c14df974":"from sklearn.tree import DecisionTreeClassifier","eea13335":"tree = DecisionTreeClassifier(criterion='entropy')\ntree.fit(X_train, y_train)","00b067e7":"tree_pred = tree.predict(X_test)","075501f3":"accuracy_score(y_test, tree_pred)","b0143b0a":"from sklearn.ensemble import RandomForestClassifier","27bcdf4f":"rf = RandomForestClassifier(n_estimators=200, criterion='entropy', random_state=1)\nrf.fit(X_train, y_train)","4f3f9b3b":"rf_pred = rf.predict(X_test)","75dd4538":"accuracy_score(y_test, rf_pred)","38126d55":"pip install xgboost","355d9139":"import xgboost\nfrom xgboost.sklearn import XGBClassifier","25a76b42":"xgb = XGBClassifier(random_state = 0, gamma = 0.01, n_estimators = 200)\nxgb.fit(X_train, y_train)","ee2be8a9":"xgb_pred = xgb.predict(X_test)","472ddfa5":"accuracy_score(y_test, xgb_pred)","0fc95c49":"from sklearn.preprocessing import MinMaxScaler","586c6719":"mmx = MinMaxScaler()\nX_train_mmx = mmx.fit_transform(X_train)\nX_test_mmx = mmx.transform(X_test)","474d2542":"xgb.fit(X_train_mmx, y_train)","d6cf2b95":"y_pred_xgb = xgb.predict(X_test_mmx)","95ad21fb":"accuracy_score(y_test, y_pred_xgb)","19bcfe56":"loreg.fit(X_train_mmx,y_train)","1bcf9137":"y_pred = loreg.predict(X_test_mmx)","ad70de1e":"accuracy_score(y_test, y_pred)","4799a677":"#xgboost importance\n\nimportance_xgb = pd.DataFrame()\nimportance_xgb['Feature'] = X_train.columns\nimportance_xgb['Importance'] = np.round(xgb.feature_importances_,3)\nimportance_xgb.set_index('Feature', inplace = True)\nimportance_xgb.sort_values( by = 'Importance', ascending=False)","2c1bece5":"train.head(2)","92fb333a":"### EDA","fbc75806":"##### drop some columns","f752b01c":"### Perforce score with preprocessing data and increse scores","3f9f2c91":"### Feature and response","ccc725ab":"### Dummies_Feature","b7cf578d":"### Split data train and test sets","450146f7":"### LogisticRegression","82a72088":"### Datasets","3cc78727":"## librerias","5a176494":"### view importance","fb1becda":"### Missing Values","15eb41a7":"### New_Features","b7b221e4":"##### Fill some columns","aecb564e":"### Datacleaning","69aa9260":"### x_gboost","462e0639":"### Select a few features","46618840":"### DescisionTreeClassifier","88999111":"### RandomForest"}}