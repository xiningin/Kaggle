{"cell_type":{"b26a6b84":"code","a3dee50b":"code","550f1d06":"code","d27e5e47":"code","13907c48":"code","339bdde8":"code","6a1a36fe":"code","293af246":"code","7a2915a6":"code","4ec5f189":"code","ffe41e25":"code","d51aae3e":"code","8a765a7e":"code","ca8e15d9":"code","8806169b":"code","44c1578e":"code","962d90eb":"code","2f3559f4":"code","6d647f2c":"code","081070df":"code","a1466ce3":"code","3766efb3":"code","d2718f25":"code","d38f114a":"code","02c72ef4":"code","617fa7e6":"code","9a324dc7":"code","bdf55835":"code","273480d0":"code","bbd6dfad":"code","3b66b723":"code","1720aed2":"code","25033b3b":"code","7e342471":"code","78ba4535":"code","37bb9456":"code","fc40a6f0":"code","d2955a10":"code","8fbc3f05":"code","028a1206":"code","b9184fc7":"code","a3e37a88":"code","159dd60b":"code","ace3bc41":"code","d8e37f3e":"code","f4258b0e":"code","b85644e9":"code","f36eb1e2":"code","b36cc8a2":"code","baeab6c2":"code","5e916d20":"code","e4794882":"code","5decb172":"code","273b7236":"code","4bd9846c":"code","ad0f3058":"code","ce55e5e7":"code","034d2f94":"code","58df18b7":"code","fc0a7460":"code","e032a99e":"code","92a940b4":"code","c10056db":"code","59561a5f":"code","d21e7575":"code","1ebc1f53":"code","7732b8f2":"code","8a6ef94d":"code","f7b0aa7e":"code","6a8f9945":"code","7be00464":"code","c1b28f1d":"code","db147969":"code","872143f3":"code","88d76446":"code","a7510681":"markdown","6b6557ea":"markdown","c2bed559":"markdown","7ce664f1":"markdown","e4c4dd2f":"markdown","925fa7f2":"markdown","eeb6fb02":"markdown","b4784a20":"markdown","5402f3a9":"markdown","1c9a5bd6":"markdown","378f4400":"markdown","979d526a":"markdown","3c4e6092":"markdown","105b1213":"markdown","18b49777":"markdown","f5f70658":"markdown","ca060e3f":"markdown","65a22a83":"markdown","517b1873":"markdown","cf341ea0":"markdown","21e77f80":"markdown","17b21a92":"markdown","27542f2c":"markdown","42ab9c8b":"markdown","40450c43":"markdown","e43b1305":"markdown"},"source":{"b26a6b84":"! pip install easypreprocessing","a3dee50b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport json\nimport os\nfrom datetime import datetime\nimport math\nimport pickle\nfrom easypreprocessing import EasyPreProcessing","550f1d06":"prep = EasyPreProcessing(path='..\/input\/creditcardfraud\/creditcard.csv')","d27e5e47":"prep.df.shape","13907c48":"prep.dataset = prep.df.sample(frac=0.5)\nprep.df.reset_index(drop=True, inplace=True)\nprep.df.shape","339bdde8":"prep.df.head()\n","6a1a36fe":"prep.output = 'Class'","293af246":"prep.df.info()","7a2915a6":"prep.df.describe()","4ec5f189":"sns.countplot(prep.df.Class)","ffe41e25":"prep.correlation()","d51aae3e":"df = prep.df","8a765a7e":"df","ca8e15d9":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler\nct = ColumnTransformer([('std_feat', StandardScaler(), ['Time', 'Amount'])], remainder='passthrough')\ndf[['Time', 'Amount']] = ct.fit_transform(df[['Time', 'Amount']])","8806169b":"df.head()","44c1578e":"X = df.iloc[:,:-1]\ny = df.iloc[:,-1]","962d90eb":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split (X, y, test_size = 0.2, random_state=20)","2f3559f4":"from sklearn.metrics import confusion_matrix\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, classification_report","6d647f2c":"svc = SVC(random_state=20)\nsvc.fit(X_train, y_train)","081070df":"y_pred = svc.predict(X_test)\nprint(classification_report(y_test, y_pred)) ","a1466ce3":"cm = confusion_matrix(y_test, y_pred)\ncm = pd.DataFrame(cm, columns=np.unique(y_test), index = np.unique(y_test))\ncm.index.name = 'Actual'\ncm.columns.name = 'Predicted'\nplt.figure(figsize = (5,3))\nsns.heatmap(cm, fmt='g', annot=True)","3766efb3":"neigh = KNeighborsClassifier(n_neighbors=10)\nneigh.fit(X_train, y_train)","d2718f25":"y_pred = neigh.predict(X_test)\nprint(classification_report(y_test, y_pred))  ","d38f114a":"cm = confusion_matrix(y_test, y_pred)\ncm = pd.DataFrame(cm, columns=np.unique(y_test), index = np.unique(y_test))\ncm.index.name = 'Actual'\ncm.columns.name = 'Predicted'\nplt.figure(figsize = (5,3))\nsns.heatmap(cm, fmt='g', annot=True)","02c72ef4":"rf = RandomForestClassifier(n_estimators=500, random_state=20)\nrf.fit(X_train, y_train)","617fa7e6":"y_pred = rf.predict(X_test)\nprint(classification_report(y_test, y_pred))","9a324dc7":"cm = confusion_matrix(y_test, y_pred)\ncm = pd.DataFrame(cm, columns=np.unique(y_test), index = np.unique(y_test))\ncm.index.name = 'Actual'\ncm.columns.name = 'Predicted'\nplt.figure(figsize = (5,3))\nsns.heatmap(cm, fmt='g', annot=True)","bdf55835":"iso = IsolationForest(n_estimators=1000, random_state=20)\niso.fit(X_train)","273480d0":"y_pred = iso.predict(X_test)\ny_pred[y_pred == 1] = 0\ny_pred[y_pred == -1] = 1","bbd6dfad":"print(classification_report(y_test, y_pred))","3b66b723":"cm = confusion_matrix(y_test, y_pred)\ncm = pd.DataFrame(cm, columns=np.unique(y_test), index = np.unique(y_test))\ncm.index.name = 'Actual'\ncm.columns.name = 'Predicted'\nplt.figure(figsize = (5,3))\nsns.heatmap(cm, fmt='g', annot=True)","1720aed2":"lof = LocalOutlierFactor(n_neighbors=20)\nlof.fit(X_train)","25033b3b":"y_pred = iso.predict(X_test)\ny_pred[y_pred == 1] = 0\ny_pred[y_pred == -1] = 1","7e342471":"print(classification_report(y_test, y_pred))","78ba4535":"cm = confusion_matrix(y_test, y_pred)\ncm = pd.DataFrame(cm, columns=np.unique(y_test), index = np.unique(y_test))\ncm.index.name = 'Actual'\ncm.columns.name = 'Predicted'\nplt.figure(figsize = (5,3))\nsns.heatmap(cm, fmt='g', annot=True)","37bb9456":"from imblearn.over_sampling import RandomOverSampler\nros = RandomOverSampler()\nX_resampled, y_resampled = ros.fit_resample(df.iloc[:,:-1], df.iloc[:, -1])","fc40a6f0":"df = pd.concat([pd.DataFrame(X_resampled), pd.DataFrame(y_resampled)], axis=1)\ndf = df.sample(frac=0.5)","d2955a10":"sns.countplot(df.iloc[:,-1])","8fbc3f05":"X = df.iloc[:,:-1]\ny = df.iloc[:,-1]\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split (X, y, test_size = 0.2, random_state=20)","028a1206":"svc = SVC()\nsvc.fit(X_train, y_train)","b9184fc7":"y_pred = svc.predict(X_test)\nprint('Accuracy', accuracy_score(y_test, y_pred))","a3e37a88":"cm = confusion_matrix(y_test, y_pred)\ncm = pd.DataFrame(cm, columns=np.unique(y_test), index = np.unique(y_test))\ncm.index.name = 'Actual'\ncm.columns.name = 'Predicted'\nplt.figure(figsize = (5,3))\nsns.heatmap(cm, fmt='g', annot=True)","159dd60b":"from sklearn.neighbors import KNeighborsClassifier\nneigh = KNeighborsClassifier(n_neighbors=3)\nneigh.fit(X_train, y_train)\nneigh.score(X_test, y_test)","ace3bc41":"y_pred = neigh.predict(X_test)\nprint('Accuracy', accuracy_score(y_test, y_pred))","d8e37f3e":"cm = confusion_matrix(y_test, y_pred)\ncm = pd.DataFrame(cm, columns=np.unique(y_test), index = np.unique(y_test))\ncm.index.name = 'Actual'\ncm.columns.name = 'Predicted'\nplt.figure(figsize = (5,3))\nsns.heatmap(cm, fmt='g', annot=True)","f4258b0e":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=5)\nrf.fit(X_train, y_train)\nrf.score(X_test, y_test)","b85644e9":"y_pred = rf.predict(X_test)\nprint('Accuracy', accuracy_score(y_test, y_pred))","f36eb1e2":"cm = confusion_matrix(y_test, y_pred)\ncm = pd.DataFrame(cm, columns=np.unique(y_test), index = np.unique(y_test))\ncm.index.name = 'Actual'\ncm.columns.name = 'Predicted'\nplt.figure(figsize = (5,3))\nsns.heatmap(cm, fmt='g', annot=True)","b36cc8a2":"from sklearn.ensemble import IsolationForest\niso = IsolationForest(n_estimators=1000, bootstrap=True)\niso.fit(X_test)","baeab6c2":"y_pred = iso.predict(X_test)\ny_pred[y_pred == 1] = 0\ny_pred[y_pred == -1] = 1\nprint('Accuracy', accuracy_score(y_test, y_pred))","5e916d20":"cm = confusion_matrix(y_test, y_pred)\ncm = pd.DataFrame(cm, columns=np.unique(y_test), index = np.unique(y_test))\ncm.index.name = 'Actual'\ncm.columns.name = 'Predicted'\nplt.figure(figsize = (5,3))\nsns.heatmap(cm, fmt='g', annot=True)","e4794882":"from sklearn.neighbors import LocalOutlierFactor\nlof = LocalOutlierFactor(n_neighbors=100)\ny_pred = lof.fit_predict(X_test)","5decb172":"y_pred[y_pred == 1] = 0\ny_pred[y_pred == -1] = 1\nprint('Accuracy', accuracy_score(y_test, y_pred))  ","273b7236":"cm = confusion_matrix(y_test, y_pred)\ncm = pd.DataFrame(cm, columns=np.unique(y_test), index = np.unique(y_test))\ncm.index.name = 'Actual'\ncm.columns.name = 'Predicted'\nplt.figure(figsize = (5,3))\nsns.heatmap(cm, fmt='g', annot=True)","4bd9846c":"from imblearn.under_sampling import RandomUnderSampler\nrus = RandomUnderSampler()\nX_resampled, y_resampled = rus.fit_resample(df.iloc[:,:-1], df.iloc[:, -1])","ad0f3058":"df = pd.concat([pd.DataFrame(X_resampled), pd.DataFrame(y_resampled)], axis=1)\ndf = df.sample(frac=0.5)","ce55e5e7":"sns.countplot(df.iloc[:,-1])","034d2f94":"X = df.iloc[:,:-1]\ny = df.iloc[:,-1]\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split (X, y, test_size = 0.2, random_state=20)","58df18b7":"svc = SVC()\nsvc.fit(X_train, y_train)","fc0a7460":"y_pred = svc.predict(X_test)\nprint('Accuracy', accuracy_score(y_test, y_pred))","e032a99e":"cm = confusion_matrix(y_test, y_pred)\ncm = pd.DataFrame(cm, columns=np.unique(y_test), index = np.unique(y_test))\ncm.index.name = 'Actual'\ncm.columns.name = 'Predicted'\nplt.figure(figsize = (5,3))\nsns.heatmap(cm, fmt='g', annot=True)","92a940b4":"from sklearn.neighbors import KNeighborsClassifier\nneigh = KNeighborsClassifier(n_neighbors=3)\nneigh.fit(X_train, y_train)\nneigh.score(X_test, y_test)","c10056db":"y_pred = neigh.predict(X_test)\nprint('Accuracy', accuracy_score(y_test, y_pred))","59561a5f":"cm = confusion_matrix(y_test, y_pred)\ncm = pd.DataFrame(cm, columns=np.unique(y_test), index = np.unique(y_test))\ncm.index.name = 'Actual'\ncm.columns.name = 'Predicted'\nplt.figure(figsize = (5,3))\nsns.heatmap(cm, fmt='g', annot=True)","d21e7575":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=5)\nrf.fit(X_train, y_train)\nrf.score(X_test, y_test)","1ebc1f53":"y_pred = rf.predict(X_test)\nprint('Accuracy', accuracy_score(y_test, y_pred))","7732b8f2":"cm = confusion_matrix(y_test, y_pred)\ncm = pd.DataFrame(cm, columns=np.unique(y_test), index = np.unique(y_test))\ncm.index.name = 'Actual'\ncm.columns.name = 'Predicted'\nplt.figure(figsize = (5,3))\nsns.heatmap(cm, fmt='g', annot=True)","8a6ef94d":"from sklearn.ensemble import IsolationForest\niso = IsolationForest(n_estimators=3000, bootstrap=True)\niso.fit(X_test)","f7b0aa7e":"y_pred = iso.predict(X_test)\ny_pred[y_pred == 1] = 0\ny_pred[y_pred == -1] = 1\nprint('Accuracy', accuracy_score(y_test, y_pred))","6a8f9945":"cm = confusion_matrix(y_test, y_pred)\ncm = pd.DataFrame(cm, columns=np.unique(y_test), index = np.unique(y_test))\ncm.index.name = 'Actual'\ncm.columns.name = 'Predicted'\nplt.figure(figsize = (5,3))\nsns.heatmap(cm, fmt='g', annot=True)","7be00464":"from sklearn.neighbors import LocalOutlierFactor\nlof = LocalOutlierFactor(n_neighbors=8000)\ny_pred = lof.fit_predict(X_test)","c1b28f1d":"y_pred[y_pred == 1] = 0\ny_pred[y_pred == -1] = 1\nprint('Accuracy', accuracy_score(y_test, y_pred))","db147969":"cm = confusion_matrix(y_test, y_pred)\ncm = pd.DataFrame(cm, columns=np.unique(y_test), index = np.unique(y_test))\ncm.index.name = 'Actual'\ncm.columns.name = 'Predicted'\nplt.figure(figsize = (5,3))\nsns.heatmap(cm, fmt='g', annot=True)","872143f3":"from sklearn.model_selection import cross_val_score","88d76446":"print('Random Forest Average Score ', np.mean(cross_val_score(RandomForestClassifier(n_estimators=5, random_state=20), X_train, y_train, cv=20)))","a7510681":"# Conclusion","6b6557ea":"## Random Forest","c2bed559":"## LOF","7ce664f1":"# Train Test Split","e4c4dd2f":"## Random Forest","925fa7f2":"## LOF","eeb6fb02":"## SVC","b4784a20":"# Modeling (Under Sampling)","5402f3a9":"# Preprocessing","1c9a5bd6":"## Isolation Forest","378f4400":"Scaling down Time and Amount features","979d526a":"## KNN","3c4e6092":"# Modeling (Imbalanced Dataset)","105b1213":"# Modeling (Over Sampling)","18b49777":"## LOF","f5f70658":"The dataset is imbalance, so we cannot go with Accuracy as a metrics for measuring the performance of the model.\n\nInstead we should go for Precision and Recall.","ca060e3f":"## SVC","65a22a83":"Random Forest + Under sampling is giving us good accuracy.\n\nBut it can also be a case of over-fitting.\n\nTo validate this hypothesis, we applied cross validation and confirmed, there is no over-fitting.","517b1873":"## Cross Validation","cf341ea0":"# Anomaly detection\n\nAnomaly detection is a technique for finding an unusual point or pattern in a given set. \n\nThe term anomaly is also referred to as outlier. Earlier, the data mining researchers were focused on other techniques like classification and clustering. Outlier are found as a part of data cleansing process. \n\nHowever, view underwent a change in 2000 when researchers found detection of abnormal things can help solving the real world problems seen in damage detection, fraud detection, detection of abnormal health condition and intrusion detection.\n\nIn this notebook we'll be using multiple machine learning algorithms to detect and classify suspicious credit card transactions. \n\n## Overview\n- Basic EDA\n- Feature scaling\n- Modeling (Imbalanced Dataset)\n    - SVC\n    - KNearest Neighbours\n    - Random Forest\n    - Isolation Forest\n    - Local Outlier Factor\n- Modeling (Over Sampling)\n    - SVC\n    - KNearest Neighbours\n    - Random Forest\n    - Isolation Forest\n    - Local Outlier Factor\n- Modeling (Under Sampling)\n    - SVC\n    - KNearest Neighbours\n    - Random Forest\n    - Isolation Forest\n    - Local Outlier Factor\n    - Cross Validation\n        - Random Forest\n- Conclusion","21e77f80":"## SVC","17b21a92":"## KNN","27542f2c":"## Isolation Forest","42ab9c8b":"## KNN","40450c43":"## Random Forest","e43b1305":"## Isolation Forest"}}