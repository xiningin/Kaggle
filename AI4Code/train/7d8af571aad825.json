{"cell_type":{"6bf9d4cb":"code","4297ab77":"code","23f22017":"code","b0ef5c3d":"code","748891ae":"code","8196a83a":"code","381b4b6e":"code","4a885f50":"code","012a3238":"code","39e733d9":"code","81f55b8c":"code","c1f17519":"markdown","409bef43":"markdown","d0b60417":"markdown","555454dc":"markdown","6134a428":"markdown","93d2ab57":"markdown","68d8f038":"markdown"},"source":{"6bf9d4cb":"import os\nimport random\nimport time\nfrom contextlib import contextmanager\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import KFold","4297ab77":"def set_seed(seed: int = 42):\n    os.environ[\"PYTHONHASHSEED\"] = str(seed)\n    random.seed(seed)\n    np.random.seed(seed)\n    \n    \n@contextmanager\ndef timer(name: str):\n    t0 = time.time()\n    print(f\"[{name}] start\")\n    yield\n    print(f\"[{name}] done in {time.time() - t0:.2f} s\")","23f22017":"set_seed(1213)","b0ef5c3d":"with timer(\"Load dataset\"):\n    train = pd.read_csv(\"..\/input\/rkcup-1\/train.csv\")\n    test = pd.read_csv(\"..\/input\/rkcup-1\/test.csv\")\ntrain.head()","748891ae":"with timer(\"Vectorize text\"):\n    tv = TfidfVectorizer(ngram_range=(1, 2), max_features=10000)\n    X_train = tv.fit_transform(train[\"separated_text\"])\n    X_test = tv.transform(test[\"separated_text\"])","8196a83a":"X_train, X_test","381b4b6e":"# Out-of-fold\u306a\u4e88\u6e2c\u3092\u5165\u308c\u3066\u3044\u304f\u305f\u3081\u306e\u914d\u5217\noof = np.zeros(len(train), dtype=float)\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u63a8\u8ad6\u7d50\u679c\u3092\u5165\u308c\u3066\u3044\u304f\u305f\u3081\u306e\u914d\u5217\ntest_pred = np.zeros(len(test), dtype=float)\n\nn_splits = 5\n\nkf = KFold(n_splits=n_splits, random_state=42, shuffle=True)\ny = train[\"target\"].values\nfor i, (trn_idx, val_idx) in enumerate(kf.split(train)):\n    with timer(f\"Fold{i + 1} training\"):\n        X_trn = X_train[trn_idx]\n        X_val = X_train[val_idx]\n        y_trn = y[trn_idx]\n        y_val = y[val_idx]\n        \n        clf = LogisticRegression(C=0.1, random_state=42)\n        clf.fit(X_trn, y_trn)\n        \n        y_val_pred = clf.predict_proba(X_val)[:, 1]\n        score = roc_auc_score(y_true=y_val, y_score=y_val_pred)\n        print(f\"Fold{i + 1} AUC score: {score:.4f}\")\n        \n        oof[val_idx] = y_val_pred.reshape(-1)\n        \n        y_test_pred = clf.predict_proba(X_test)[:, 1]\n        test_pred += y_test_pred.reshape(-1) \/ n_splits","4a885f50":"score = roc_auc_score(y_true=y, y_score=oof)\nprint(f\"OOF AUC: {score:.4f}\")","012a3238":"sample = pd.read_csv(\"..\/input\/rkcup-1\/sample_submission.csv\")\nsample.head()","39e733d9":"sample[\"target\"] = test_pred\nsample.to_csv(\"tfidf_logistic_submission.csv\", index=False)\nsample.head()","81f55b8c":"pd.read_csv(\"tfidf_logistic_submission.csv\").tail()","c1f17519":"## OOF(out-of-folds)\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u306e\u30b9\u30b3\u30a2\u78ba\u8a8d","409bef43":"TfidfVectorizer\u306e\u9069\u7528\u7d50\u679c\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f`scipy.sparse.csr_matrix`\u3067\u3059\u3002\u3053\u308c\u306f\u51fa\u529b\u304c\u975e\u5e38\u306b0\u304c\u591a\u3044(\u758e\u306a)\u5de8\u5927\u306a\u884c\u5217\u306b\u306a\u308b\u305f\u3081\u3001\u30e1\u30e2\u30ea\u52b9\u7387\u306e\u89b3\u70b9\u304b\u3089\u671b\u307e\u3057\u3044\u305f\u3081\u3067\u3059\u3002scikit-learn\u306e\u30e2\u30c7\u30eb\u306e\u591a\u304f\u306f`csr_matrix`\u3092\u5165\u529b\u3068\u3057\u3066\u53d7\u3051\u4ed8\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u3053\u306e\u307e\u307e\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u307e\u305f`csr_matrix`\u306f\u884c\u65b9\u5411\u306e\u30b9\u30e9\u30a4\u30b7\u30f3\u30b0\u3082\u666e\u901a\u306enumpy\u306e\u914d\u5217\u540c\u69d8\u306b\u3067\u304d\u308b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u305f\u3081KFold\u5b66\u7fd2\u306a\u3069\u3082\u53ef\u80fd\u3067\u3059()\u3002","d0b60417":"## \u6587\u7ae0\u30d9\u30af\u30c8\u30eb\u306e\u4f5c\u6210\n\n\u3053\u3053\u3067\u306f\u3001`sklearn.feature_extraction.text`\u3092\u7528\u3044\u3066\u6587\u7ae0\u3092\u30d9\u30af\u30c8\u30eb\u5316\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002","555454dc":"## Test\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u306e\u63d0\u51fa","6134a428":"## KFold\u5b66\u7fd2","93d2ab57":"## \u306f\u3058\u3081\u306b\n\n\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306f\u3001Tfidf\u306b\u3088\u308a\u6587\u7ae0\u3092\u30d9\u30af\u30c8\u30eb\u5316\u3057\u3001\u305d\u308c\u3092Logistic\u56de\u5e30\u3067\u5206\u985e\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002","68d8f038":"## \u4fbf\u5229\u95a2\u6570\u306e\u7528\u610f"}}