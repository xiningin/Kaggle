{"cell_type":{"46cbbc35":"code","02f7b77b":"code","879bfa17":"code","c6538b96":"code","0e3eb3ed":"code","b08a322f":"code","2aed973f":"code","b9d0824b":"code","cb158fdd":"code","1882d33b":"code","1fe134a2":"code","826e0b0e":"markdown","d9bba7fd":"markdown","4926251e":"markdown","216e8af1":"markdown","1574a316":"markdown"},"source":{"46cbbc35":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical \nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.layers import Dense\nfrom keras.layers import BatchNormalization\n\nX = np.load('..\/input\/sign-language-digits-dataset\/X.npy')\ny = np.load('..\/input\/sign-language-digits-dataset\/Y.npy')","02f7b77b":"img_size = 64\nplt.subplot(1,2,1)\nplt.imshow(X[100].reshape(img_size,img_size))\nplt.axis('off')\nplt.subplot(1,2,2)\nplt.imshow(X[300].reshape(img_size,img_size))\nplt.axis('off')","879bfa17":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","c6538b96":"#reshape\nx_train = x_train.reshape(-1,64,64,1)\nx_test = x_test.reshape(-1,64,64,1)","0e3eb3ed":"x_train.shape","b08a322f":"input_shape = x_train.shape[1:]","2aed973f":"model = Sequential()\n\nmodel.add(Conv2D(filters = 16, kernel_size = (3,3) ,padding = \"Same\" ,activation = \"relu\",\n                 input_shape =input_shape ))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25) )\n\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3) ,padding = \"Same\" ,activation = \"relu\",\n                 input_shape =input_shape ))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25) )\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3) ,padding = \"Same\" ,activation = \"relu\",\n                 input_shape =input_shape ))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25) )\n\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3) ,padding = \"Same\" ,activation = \"relu\",\n                 input_shape =input_shape ))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25) )\n\nmodel.add(Conv2D(filters = 256, kernel_size = (3,3) ,padding = \"Same\" ,activation = \"relu\",\n                 input_shape =input_shape ))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25) )\n\nmodel.add(Flatten())\n\nmodel.add(Dense(256, activation = 'relu'))\n\nmodel.add(Dense(10, activation = 'softmax'))","b9d0824b":"model.summary()","cb158fdd":"model.compile(optimizer = \"adam\", loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])","1882d33b":"model.fit(x_train,y_train,epochs=100,validation_data=(x_test,y_test))","1fe134a2":"\nimport seaborn as sns\n# Predict the values from the validation dataset\nY_pred = model.predict(x_test)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(y_test,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"BuPu\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","826e0b0e":"### Train-Test Split","d9bba7fd":"### Samples of Data","4926251e":"### Model Building","216e8af1":"## Libraries","1574a316":"# Evaluate"}}