{"cell_type":{"306f929b":"code","c813226e":"code","745f6574":"code","761ca85d":"code","851e7f88":"code","2cfa70a4":"code","b3a0c6a3":"code","adf8b396":"code","7844a4d4":"code","d842c8ac":"code","6663d4bd":"code","09cd028e":"code","3ac317d2":"code","cc6a72f0":"code","88a64fb8":"code","3a68a8ee":"code","ce1e53c3":"code","4233a7e5":"code","173d2c3c":"code","e385811d":"code","7159c503":"code","e6a56fdb":"code","c0ba3035":"code","292d8603":"code","62b20a92":"markdown","819567d2":"markdown","c9e9b8ea":"markdown","7d2521ce":"markdown","6a4710ba":"markdown","e184b388":"markdown","c1ef752a":"markdown","7747d59d":"markdown","ca762037":"markdown","30211118":"markdown","8a5612ee":"markdown","9ceec28c":"markdown","c426ebaf":"markdown","7426c5a5":"markdown","d4f0fc39":"markdown","b91f58de":"markdown","170507ed":"markdown","909e2b1e":"markdown","234de9cc":"markdown","7f5779d2":"markdown","62280e5e":"markdown","e1ab7e07":"markdown","11c615ae":"markdown","0fbd2c87":"markdown","e12dce47":"markdown","0cc53304":"markdown","5efb8591":"markdown"},"source":{"306f929b":"import pandas as pd\nimport numpy as np\nfrom scipy import stats\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","c813226e":"data = pd.read_csv(\"..\/input\/heart-failure-prediction\/heart.csv\")\ndata","745f6574":"data.isnull().sum()","761ca85d":"data.info()","851e7f88":"data.describe()","2cfa70a4":"index_to_drop = list(data.loc[(data.RestingBP == 0) | (data.Cholesterol == 0)].index)\n    \ndata.drop(index_to_drop, inplace=True)\ndata.describe()","b3a0c6a3":"font_dict = {\"fontsize\": 14, \"fontweight\":\"bold\"}\n\nfig = plt.figure(dpi=80, figsize=(16, 16))\ngs = GridSpec(3, 6, figure=fig)\n\nax1 = fig.add_subplot(gs[0, :2])\nsns.countplot(data=data, x=\"Sex\", hue=\"HeartDisease\", ax=ax1)\nax1.set_title(\"Sex Count Plot\", fontdict=font_dict)\n\nax2 = fig.add_subplot(gs[0, 2:4])\nsns.countplot(data=data, x=\"RestingECG\", hue=\"HeartDisease\", ax=ax2)\nax2.set_title(\"RestingECG Count Plot\", fontdict=font_dict)\n\nax3 = fig.add_subplot(gs[0, 4:6])\nsns.countplot(data=data, x=\"ExerciseAngina\", hue=\"HeartDisease\", ax=ax3)\nax3.set_title(\"ExerciseAngina Count Plot\", fontdict=font_dict)\n\nax4 = fig.add_subplot(gs[1, :3])\nsns.countplot(data=data, x=\"ChestPainType\", hue=\"HeartDisease\", ax=ax4)\nax4.set_title(\"ChestPainType Count Plot\", fontdict=font_dict)\n\nax5 = fig.add_subplot(gs[1, 3:])\nsns.countplot(data=data, x=\"ST_Slope\", hue=\"HeartDisease\", ax=ax5)\nax5.set_title(\"ST_Slope Count Plot\", fontdict=font_dict)\n\nax6 = fig.add_subplot(gs[2, :3])\nsns.countplot(data=data, x=\"FastingBS\", hue=\"HeartDisease\", ax=ax6)\nax6.set_title(\"FastingBS Count Plot\", fontdict=font_dict)\n\nax7 = fig.add_subplot(gs[2, 3:])\nsns.countplot(data=data, x=\"HeartDisease\", ax=ax7)\nax7.set_title(\"HeartDisease Count Plot\", fontdict=font_dict)\n\nplt.subplots_adjust(left=0.1,\n                    bottom=0.1, \n                    right=0.9, \n                    top=0.9, \n                    wspace=0.4, \n                    hspace=0.3)","adf8b396":"fig = plt.figure(dpi=80, figsize=(16, 10))\ngs = GridSpec(2, 6, figure=fig)\n\nax1 = fig.add_subplot(gs[0, :2])\nsns.histplot(data=data, x=\"Oldpeak\", hue=\"HeartDisease\", ax=ax1)\nax1.set_title(\"Oldpeak Hist Plot\", fontdict=font_dict)\n\nax2 = fig.add_subplot(gs[0, 2:4])\nsns.histplot(data=data, x=\"MaxHR\", hue=\"HeartDisease\", ax=ax2)\nax2.set_title(\"MaxHR Hist Plot\", fontdict=font_dict)\n\nax3 = fig.add_subplot(gs[0, 4:6])\nsns.histplot(data=data, x=\"Cholesterol\", hue=\"HeartDisease\", ax=ax3)\nax3.set_title(\"Cholesterol Hist Plot\", fontdict=font_dict)\n\nax4 = fig.add_subplot(gs[1, :3])\nsns.histplot(data=data, x=\"Age\", hue=\"HeartDisease\", ax=ax4)\nax4.set_title(\"Age Hist Plot\", fontdict=font_dict)\n\nax5 = fig.add_subplot(gs[1, 3:])\nsns.histplot(data=data, x=\"RestingBP\", hue=\"HeartDisease\", ax=ax5)\nax5.set_title(\"RestingBP Hist Plot\", fontdict=font_dict)\n\nplt.subplots_adjust(left=0.1,\n                    bottom=0.1, \n                    right=0.9, \n                    top=0.9, \n                    wspace=0.4, \n                    hspace=0.3)","7844a4d4":"plt.figure(figsize=(12, 8), dpi=80)\nsns.heatmap(data=data.corr(), annot=True)\nplt.title(\"Correlation Heatmap\", fontdict=font_dict)","d842c8ac":"# Machine Learning\nfrom sklearn.model_selection import StratifiedShuffleSplit, cross_val_score, cross_val_predict\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, precision_recall_curve, roc_curve\nfrom sklearn.preprocessing import StandardScaler","6663d4bd":"sc = StandardScaler()\n\ncols_to_scale = [\"Age\", \"RestingBP\", \"Cholesterol\", \"MaxHR\", \"Oldpeak\"]\n\ndata[cols_to_scale] = sc.fit_transform(data[cols_to_scale])\ndata.head()","09cd028e":"data = pd.get_dummies(data).reset_index()\ndata.head()","3ac317d2":"z = np.abs(stats.zscore(data))\n\nthreshold = 2.5\nprint(np.where(z > 2.5))","cc6a72f0":"data = data[(z < 2.5).all(axis=1)]\ndata.reset_index(inplace=True)\ndata.shape","88a64fb8":"split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\nfor train_index, test_index in split.split(data, data['HeartDisease']):\n    train = data.loc[train_index]\n    test = data.loc[test_index]","3a68a8ee":"X_train = train.drop(\"HeartDisease\", axis=1)\ny_train = train[\"HeartDisease\"]\n\nX_test = test.drop(\"HeartDisease\", axis=1)\ny_test = test[\"HeartDisease\"]","ce1e53c3":"from xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.linear_model import RidgeClassifierCV\nfrom catboost import CatBoostClassifier","4233a7e5":"MLA_compare = pd.DataFrame()\n\nrow_index = 0\n\ndef MLA_testing(MLA, X_train, X_test, y_train, y_test, curves=True):  \n    global row_index\n    \n    # Training The Model\n    MLA.fit(X_train, y_train)\n\n    # KFold Accuracies on Training Data\n    kfold_accuracy = cross_val_score(estimator = MLA, X = X_train, y = y_train, cv = 10, n_jobs=-1)\n    print(\"K-Fold Accuracies:\\n\", kfold_accuracy, \"\\n\")\n    \n    # Prediction on Testing Data\n    y_pred = cross_val_predict(estimator = MLA, X = X_test, y = y_test, cv = 10, n_jobs=-1)\n    \n    # Accuracy for y_test and y_pred\n    classifier_accuracy_score = accuracy_score(y_test, y_pred)\n    print(\"Accuracy Score:\\n\", classifier_accuracy_score, \"\\n\")\n    \n    # Confusion Matrix\n    conf_mtx = confusion_matrix(y_test, y_pred)\n    print(\"Confusion Matrix:\\n\", conf_mtx, \"\\n\")\n    \n    # Classification Report\n    class_rep = classification_report(y_test, y_pred)\n    print(\"Classification Report:\\n\", class_rep, \"\\n\")\n    \n    if curves:\n        # Precision - Recall Curve\n        yhat = MLA.predict_proba(X_test)\n        no_skill = len(data.HeartDisease[data.HeartDisease==1]) \/ len(data.HeartDisease)\n        precision, recall, _ = precision_recall_curve(y_test, yhat[:, 1])\n        \n        plt.figure(dpi=100, figsize=(15, 6))\n        plt.subplot(121)\n        sns.lineplot([0, 1], [no_skill, no_skill], linestyle='--', label='No Skill')\n        sns.lineplot(recall, precision, marker='.', label=MLA.__class__.__name__)\n        plt.title(\"Recall vs Precision Curve\")\n        plt.xlabel('Recall')\n        plt.ylabel('Precision')\n        plt.legend()\n        \n        # ROC Curve - Receiver Operating Characteristic\n        plt.subplot(122)\n        sns.lineplot([0, 1], [0, 1], linestyle='--', label='No Skill')\n        fpr, tpr, _ = roc_curve(y_test, yhat[:, 1])\n        sns.lineplot(fpr, tpr, marker='.', label=MLA.__class__.__name__)\n        plt.title(\"ROC Curve\")\n        plt.xlabel('False Positive Rate')\n        plt.ylabel('True Positive Rate')\n        plt.legend()\n        plt.show()\n\n    # Saving Data in Dataframe\n    MLA_name = MLA.__class__.__name__\n    MLA_compare.loc[row_index, 'MLA Name'] = MLA_name\n    MLA_compare.loc[row_index, 'Accuracy Score'] = classifier_accuracy_score*100\n    MLA_compare.loc[row_index, 'K-Fold Accuracy'] = kfold_accuracy.mean()*100\n\n    print(MLA_name, \"Done\")\n    \n    row_index+=1","173d2c3c":"catboost_clf = CatBoostClassifier(silent=True)\n\nMLA_testing(catboost_clf, X_train, X_test, y_train, y_test)","e385811d":"rf_clf = RandomForestClassifier()\n\nMLA_testing(rf_clf, X_train, X_test, y_train, y_test)","7159c503":"gb_clf = GradientBoostingClassifier()\n\nMLA_testing(gb_clf, X_train, X_test, y_train, y_test)","e6a56fdb":"ridge_clf = RidgeClassifierCV()\n\nMLA_testing(ridge_clf, X_train, X_test, y_train, y_test, curves=False)","c0ba3035":"xgb_clf = XGBClassifier(eval_metric=\"logloss\")\n\nMLA_testing(xgb_clf, X_train, X_test, y_train, y_test)","292d8603":"MLA_compare = MLA_compare.sort_values(by=\"K-Fold Accuracy\", ascending=False).reset_index(drop=True)\nMLA_compare","62b20a92":"## RidgeClassifierCV","819567d2":"### Function to Test Models\nThe code below trains and tests the input classification algorithm along. Also it show ROC Curve and Precision - Recall Curve for the model along with confusion matrix and classification report","c9e9b8ea":"## Scaling the Continious Variables","7d2521ce":"# Data Preparation and Classification Model","6a4710ba":"## Imports for Data Preparation","e184b388":"- In total we have <b>more males than females<\/b> and also more than half of the men in our data have Heart Disease.\n- People with normal restingECG tend to have a higher chance of having a Heart Disease.\n- People with ExerciseAnigna Y have a higher chance of having a Heart Disease.\n- People with ASY type of Chest Pain indicates that the person has Heart Disease.\n- People with Flat type of ST_Slope tend to have a Heart Disease.\n- People without FastingBS are more likey to have a Heart Disease.","c1ef752a":"People with \n- 0 - 2 Oldpeak\n- 100 - 160 MaxHr\n- late 50's - mid 60's\nare likey to have a higher chance to have a Heart Disease","7747d59d":"# Imports","ca762037":"## Count Plots","30211118":"# Preprocessing, Analysis and EDA","8a5612ee":"We see a very good relation between Oldpeak and HeartDisease. As Oldpeak Increases the Chance of Heart Disease Increases.","9ceec28c":"### Checking for Null Values","c426ebaf":"## CatBoostClassifier","7426c5a5":"We can right away see some weird data, with RestingBP and Cholesterol have a minimum value of 0 which is not possible.","d4f0fc39":"## XGBClassifier","b91f58de":"## RandomForestClassifier","170507ed":"## Distribution Plots","909e2b1e":"## Filtering Our Outliers\nUsing Z-Score Method for filtering","234de9cc":"## OneHotEncoding Categorical Variables","7f5779d2":"## Getting Our Data","62280e5e":"## Correlation Heatmap","e1ab7e07":"Now we have a clean dataset","11c615ae":"# Testing Multiple Models","0fbd2c87":"### Checking for Faulty Values","e12dce47":"### Imports for Machine Learning Model","0cc53304":"## GradientBoostingClassifier","5efb8591":"## Evenly Distribution the target variable across dataset"}}