{"cell_type":{"b89b440b":"code","9e7b5915":"code","f695144a":"code","c2e8ea89":"code","5505b469":"code","61539dd9":"code","85cb9fab":"markdown"},"source":{"b89b440b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9e7b5915":"import pandas as pd\nimport numpy as np\nimport random\nimport time\nimport os\n\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport seaborn as sns\n\nfrom tqdm import tqdm\n\nfrom catboost import CatBoostRegressor, CatBoostClassifier\nfrom xgboost import XGBRegressor, XGBClassifier\nfrom lightgbm import LGBMClassifier, LGBMRegressor\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import RobustScaler, StandardScaler, MinMaxScaler, QuantileTransformer\nfrom sklearn.metrics import mean_squared_error, roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn.ensemble import StackingRegressor, StackingClassifier\n\nimport optuna\nfrom optuna.samplers import TPESampler","f695144a":"SEED = 4000\nTARGET = \"target\"\nN_SPLITS = 10\nN_ESTIMATORS=12000\nLOSS = 'CrossEntropy'\nEVAL_METRIC = \"AUC\"\n\ndef seed_everything(seed=4000):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nseed_everything(SEED)","c2e8ea89":"df_train = pd.read_csv(r\"..\/input\/tabular-playground-series-oct-2021\/train.csv\", index_col=0)\ndf_test = pd.read_csv(r\"..\/input\/tabular-playground-series-oct-2021\/test.csv\", index_col=0)\nX = df_train.iloc[:, :-1]\ny = df_train.iloc[:, -1]\nX_test = df_test\n# Basic preprocessing\nX[\"n_na\"] = X.isna().sum(axis=1)\nX_test[\"n_na\"] = X_test.isna().sum(axis=1)","5505b469":"def run_kfold(model, test_data=None):\n    kf = KFold(n_splits=N_SPLITS, random_state=SEED, shuffle=True)\n    \n    scores = []\n    y_pred = dict()\n    n_trees = []\n    \n    for i_fold,(train_idx, test_idx) in enumerate(kf.split(X)):\n        print(25*\"=\" + f\" Fold {i_fold} \" + 25*\"=\")\n        X_train = X.iloc[train_idx,:]\n        y_train = y[train_idx]\n        \n        X_val = X.iloc[test_idx,:]\n        y_val = y[test_idx]\n        model.fit(X_train, y_train, eval_set=[(X_val, y_val)], verbose=1000, early_stopping_rounds = int(10\/model.get_param(\"learning_rate\")))\n\n        y_oof = model.predict_proba(X_val)\n        \n        fold_score = roc_auc_score(y_val, y_oof[:,1])\n        scores.append(fold_score)\n        n_trees.append(model.get_best_iteration())\n        print(f\"*** Fold {i_fold} score :\", fold_score, \" ***\")\n        \n        if test_data is not None :\n            y_pred[i_fold] = model.predict_proba(test_data)[:,1]\n        \n    scores = np.array(scores)\n    n_trees = int(np.mean(n_trees))\n    \n    print('N trees : ', n_trees)\n    print('CV auc scores: ',scores.mean(), \" +\/- \",  scores.std())\n    return scores, y_pred","61539dd9":"cat_param = {'learning_rate': 0.0025,\n 'iterations': 10000,\n 'depth': 5,\n 'l2_leaf_reg': 12.09463399692516,\n 'random_strength': 3.5400249636744014}\n\nmodel = CatBoostClassifier(\n    grow_policy='Depthwise',\n    leaf_estimation_method='Newton', \n    bootstrap_type='Bernoulli',\n    loss_function= LOSS,\n    eval_metric= EVAL_METRIC,\n    task_type='GPU',\n    silent=True,\n    random_seed = SEED,\n    **cat_param\n)\n\nscores, y_pred = run_kfold(model, X_test)\n## save submission\npd.DataFrame(np.vstack(list(y_pred.values())).mean(axis=0), index=X_test.index, columns= [TARGET]).to_csv(\"cat_submission.csv\")","85cb9fab":"**working with this kinda model latelyyy.!**\n**please feel free to share your valuable feedback below.!!\n"}}