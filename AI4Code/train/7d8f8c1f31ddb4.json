{"cell_type":{"c17042a2":"code","c59e0b78":"code","d7267dfa":"code","e57a160e":"markdown","0c7f66ad":"markdown","8dbde7fe":"markdown"},"source":{"c17042a2":"#!\/bin\/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nclass Multiset:\n    def __init__(self):\n        self.items=[]\n    def add(self, val):\n        # adds one occurrence of val from the multiset, if any\n        self.items.append(val)\n    def remove(self, val):\n        # removes one occurrence of val from the multiset, if any\n        if self.items.count(val)!=0:\n            return self.items.remove(val)\n\n    def __contains__(self, val):\n        # returns True when val is in the multiset, else returns False\n        return val in self.items\n    \n    def __len__(self):\n        # returns the number of elements in the multiset\n        return len(self.items)\nif __name__ == '__main__':\n    def performOperations(operations):\n        m = Multiset()\n        result = []\n        for op_str in operations:\n            elems = op_str.split()\n            if elems[0] == 'size':\n                result.append(len(m))\n            else:\n                op, val = elems[0], int(elems[1])\n                if op == 'query':\n                    result.append(val in m)\n                elif op == 'add':\n                    m.add(val)\n                elif op == 'remove':\n                    m.remove(val)\n        return result\n\n    q = int(input())\n    operations = []\n    for _ in range(q):\n        operations.append(input())\n\n    result = performOperations(operations)\n    \n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n    fptr.close()","c59e0b78":"\n#\n# Complete the 'reverse_words_order_and_swap_cases' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts STRING sentence as parameter.\n#\n\ndef reverse_words_order_and_swap_cases(sentence):\n    # Write your code here\n    lst=[sentence]        \n    lst1= lst[0].split()\n    lst1.reverse()\n\n    str2= ' '.join(map(str,lst1)) \n    str3=str2.swapcase()\n    return str3","d7267dfa":"!\/bin\/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n# Complete the 'filledOrders' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY order\n#  2. INTEGER k\ndef filledOrders(order, k):\n    # Write your code here\n    order.sort()\n    total=0\n    for i,j in enumerate(order):\n        if total+j<=k:\n            total+=j\n        else:\n            return i\n    else:\n        return len(order)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    order_count = int(input().strip())\n    order = []\n\n    for _ in range(order_count):\n        order_item = int(input().strip())\n        order.append(order_item)\n\n    k = int(input().strip())\n\n    result = filledOrders(order, k)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","e57a160e":"![image.png](attachment:image.png)","0c7f66ad":"![image.png](attachment:image.png)","8dbde7fe":"* 1. ![image.png](attachment:image.png)"}}