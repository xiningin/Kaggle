{"cell_type":{"5af1c334":"code","c1d753f4":"code","42a36194":"code","8b51f049":"code","de8e0a5a":"code","80cbaa1f":"code","efd414a0":"code","234645fc":"code","1b2a7cc2":"code","891f7ddb":"code","ec33f7a5":"code","76293ca5":"code","29b3ae3e":"code","45944d51":"code","b28be157":"code","0dd14958":"code","b5d4382a":"code","802a6cdb":"code","7c6ec2aa":"code","14753674":"code","fa7ab317":"code","e5322613":"code","84128cbb":"code","41898da2":"code","199a5d57":"code","6078d9b5":"code","8f842d80":"code","5494b26f":"code","9cde799d":"code","598125d0":"code","adcd1809":"code","808574ca":"code","4e4c903e":"code","923c511c":"code","406754e6":"code","6fda90f6":"code","b6214b41":"code","8a512609":"code","1eeed500":"code","e11880d4":"code","013d0616":"code","1d8ab302":"code","c447bb81":"code","61f34b71":"code","140c659a":"code","9a8bcfe7":"code","73aedeea":"code","7576b048":"code","08c37f32":"code","9db062f8":"code","1a31dde2":"code","ff214977":"code","751719fb":"code","589c15cf":"code","843b98b5":"code","7fe7d70e":"code","a0da4751":"code","22af61bf":"code","af62e391":"code","9423ea32":"code","93ced1ec":"markdown","915c11f9":"markdown","fc819572":"markdown","c6c85eab":"markdown"},"source":{"5af1c334":"import pandas as pd","c1d753f4":"df=pd.read_csv('..\/input\/covid-analysis-and-pypi-worldometer\/Covid_Confirmed.csv')\ndf1=pd.read_csv('..\/input\/covid-analysis-and-pypi-worldometer\/Covid_Death.csv')\ndf2=pd.read_csv('..\/input\/covid-analysis-and-pypi-worldometer\/Covid_recovered.csv')","42a36194":"df.head()","8b51f049":"df1.head()","de8e0a5a":"df2.head()","80cbaa1f":"import matplotlib.pyplot as plt","efd414a0":"df=df.drop([\"Province\/State\",\"Lat\",\"Long\"],axis=1)","234645fc":"df.head()","1b2a7cc2":"df=df.groupby(df[\"Country\/Region\"]).aggregate('sum')","891f7ddb":"df2=df2.drop([\"Province\/State\",\"Lat\",\"Long\"],axis=1)\ndf1=df1.drop([\"Province\/State\",\"Lat\",\"Long\"],axis=1)","ec33f7a5":"df1=df1.groupby(df1[\"Country\/Region\"]).aggregate('sum')\ndf2=df2.groupby(df2[\"Country\/Region\"]).aggregate('sum')","76293ca5":"print(df2)","29b3ae3e":"df=df.T\ndf1=df1.T\ndf2=df2.T","45944d51":"new_cases=df.copy()\nfor day in range(1, len(df)):\n    new_cases.iloc[day]=df.iloc[day]-df.iloc[day-1]\n","b28be157":"growth_rate=df.copy()\nfor day in range(1,len(df)):\n    growth_rate.iloc[day]= (new_cases.iloc[day]\/df.iloc[day-1]) * 100\ngrowth_rate.head()","0dd14958":"active_cases=df.copy()\nfor day in range(1,len(df)):\n    active_cases.iloc[day]= df.iloc[day]= df2.iloc[day]\nactive_cases.tail()","b5d4382a":"overall_growth_rate =df.copy()\n\nfor day in range(1,len(df)):\n    overall_growth_rate.iloc[day]=((active_cases.iloc[day] - active_cases.iloc[day-1]) \/active_cases.iloc[day-1])*100","802a6cdb":"overall_growth_rate['US'].tail(10)","7c6ec2aa":"death_rate = df.copy()\nfor day in range(1,len(df)):\n    death_rate.iloc[day]=(df1.iloc[day]\/df.iloc[day])*100\ndeath_rate","14753674":"death_rate[\"US\"].tail(10)","fa7ab317":"hospitalization_rate_estimate = 0.05\nhostpitalization_needed=df.copy()\nfor day in range(1,len(df)):\n    hostpitalization_needed.iloc[day]= active_cases.iloc[day] * hospitalization_rate_estimate\n\nhostpitalization_needed[\"US\"].tail()  \n        ","e5322613":"countries=[\"India\",\"Russia\",\"US\",\"United Kingdom\",\"Brazil\",\"Canada\",\"Italy\"]\nax=plt.subplot()\nax.set_facecolor('black')\nax.figure.set_facecolor('#121212')\nax.tick_params(axis='x',colors='white')\nax.tick_params(axis='y',colors='white')\nax.set_title('Covid-19 Total Confirmed Cases by cases',color='white')\nfor country in countries:\n    df[country][100:].plot(label=country,figsize=(10,8))\nplt.legend(loc='upper left')\nplt.show()","84128cbb":"coun=[\"US\"]\nax=plt.subplot()\nax.set_facecolor('black')\nax.figure.set_facecolor('#121212')\nax.tick_params(axis='x',colors='white')\nax.tick_params(axis='y',colors='white')\nax.set_title('Covid-19 - Confirmed Cases growth rate (Coun)',color='white')\nfor coun2 in coun:\n    growth_rate[country][200:].plot.bar(figsize=(80,60))\nplt.show()\n\n","41898da2":"coun=[\"India\",\"US\",\"Russia\",\"Italy\"]\nfor country in coun:\n    ax=plt.subplot()\n    ax.set_facecolor('black')\n    ax.figure.set_facecolor('#121212')\n    ax.tick_params(axis='x',colors='white')\n    ax.tick_params(axis='y',colors='white')\n    ax.set_title(f'Covid-19 - Confirmed Deaths in {country}',color='white')\n\n    df1[country][200:].plot.bar(label=country,figsize=(15,12))\n    plt.show()\n","199a5d57":"coun=[\"India\",\"US\",\"Russia\",\"Italy\",\"Germany\"]\nfor country in coun:\n    ax=plt.subplot()\n    ax.set_facecolor('black')\n    ax.figure.set_facecolor('#121212')\n    ax.tick_params(axis='x',colors='white')\n    ax.tick_params(axis='y',colors='white')\n    ax.set_title(f'Covid-19 - Death rate in {country}',color='white')\n\n    death_rate[country][200:].plot.bar(label=country,figsize=(15,12))\n    plt.show()","6078d9b5":"simulated_growth_rate=0.02\ndates= pd.date_range(start='10\/29\/2020',periods=25,freq='D')\ndates= pd.Series(dates)\ndates= dates.dt.strftime(\"%m\/%d\/%y\")\nsimulated= df.copy()\nsimulated=simulated.append(pd.DataFrame(index=dates))\n\nfor day in range(len(df), len(df)+25):\n    simulated.iloc[day]= simulated.iloc[day-1]* (1+simulated_growth_rate)\nsimulated[\"US\"]","8f842d80":"ax=plt.subplot()\nax.set_facecolor('white')\nax.figure.set_facecolor('#121212')\nax.tick_params(axis='x',colors='white')\nax.tick_params(axis='y',colors='white')\nax.set_title('Covid-19 - Death rate in US',color='white')\nsimulated[\"US\"].plot(figsize=(10,8))\nplt.show()","5494b26f":"estimated_death_rate=0.0255\nus_death = df1[\"US\"].tail()[4]\nus_death","9cde799d":"print(\"Estimated infected people in USA as of 29-Oct-2020\",int(df1[\"US\"].tail()[4]\/estimated_death_rate))","598125d0":"countries=[\"US\",\"Italy\"]\nax=plt.subplot()\nax.set_facecolor('White')\nax.figure.set_facecolor('#121212')\nax.tick_params(axis='x',colors='white')\nax.tick_params(axis='y',colors='White')\nax.set_title('Covid-19 Total Confirmed Cases in US and Italy',color='white')\nfor country in countries:\n    df[country][75:].plot(label=country,figsize=(25,10))\nplt.legend(loc='upper left')\nplt.show()","adcd1809":"estimated_death_rate=0.015\nprint(df1[\"India\"].tail()[4])","808574ca":"#infected*death_rate = deaths\n#infected=death\/death_rate\nprint(\"Estimated infected people in India as of 27-Oct-2020\",int(df1[\"India\"].tail()[4]\/estimated_death_rate))","4e4c903e":"estimated_death_rate=0.06182664471\nitaly_death = df1[\"Italy\"].tail()[4]\nitaly_death","923c511c":"print(\"Estimated infected people in Italy as of 29-Oct-2020\",int(df1[\"Italy\"].tail()[4]\/estimated_death_rate))","406754e6":"#pip install covid_daily","6fda90f6":"AVAILABLE_COUNTRIES = [\n    'us', 'spain', 'italy', 'france', 'germany', 'uk', 'turkey', 'iran', \n    'russia', 'brazil', 'canada', 'belgium', 'netherlands', 'switzerland', \n    'india', 'peru', 'portugal', 'ecuador', 'ireland', 'sweden', 'saudi-arabia', \n    'israel', 'austria', 'mexico', 'singapore', 'japan', 'chile', 'pakistan', \n    'poland', 'romania', 'belarus', 'qatar', 'south-korea', 'united-arab-emirates', \n    'indonesia', 'ukraine', 'denmark', 'serbia', 'philippines', 'norway', \n    'czech-republic', 'australia', 'dominican-republic', 'bangladesh', 'malaysia', \n    'panama', 'colombia', 'finland', 'south-africa', 'egypt', 'morocco', 'argentina', \n    'luxembourg', 'moldova', 'algeria', 'kuwait', 'thailand', 'kazakhstan', \n    'bahrain', 'hungary', 'greece', 'oman', 'croatia', 'uzbekistan', 'iraq', \n    'armenia', 'iceland', 'afghanistan', 'estonia', 'azerbaijan', 'cameroon', \n    'bosnia-and-herzegovina', 'ghana', 'new-zealand', 'lithuania', 'slovenia', \n    'macedonia', 'slovakia', 'cuba', 'bulgaria', 'nigeria', 'cote-d-ivoire', \n    'china-hong-kong-sar', 'djibouti', 'guinea', 'bolivia', 'tunisia', 'latvia', \n    'cyprus', 'andorra', 'albania', 'lebanon', 'niger', 'kyrgyzstan', 'costa-rica', \n    'senegal', 'honduras', 'burkina-faso', 'uruguay', 'sri-lanka', 'san-marino', \n    'channel-islands', 'guatemala', 'georgia', 'democratic-republic-of-the-congo', \n    'malta', 'jordan', 'somalia', 'taiwan', 'reunion', 'mayotte', 'mali', 'kenya', \n    'jamaica', 'state-of-palestine', 'mauritius', 'venezuela', 'el-salvador', \n    'montenegro', 'isle-of-man', 'tanzania', 'viet-nam', 'equatorial-guinea', \n    'sudan', 'paraguay', 'maldives', 'congo', 'rwanda', 'faeroe-islands', 'gabon', \n    'martinique', 'guadeloupe', 'myanmar', 'gibraltar', 'brunei-darussalam', \n    'liberia', 'ethiopia', 'madagascar', 'cambodia', 'trinidad-and-tobago', \n    'french-guiana', 'bermuda', 'cabo-verde', 'aruba', 'togo', 'monaco', \n    'sierra-leone', 'zambia', 'liechtenstein', 'bahamas', 'barbados', 'uganda', \n    'mozambique', 'sint-maarten', 'guyana', 'haiti', 'cayman-islands', 'benin', \n    'libya', 'swaziland', 'french-polynesia', 'guinea-bissau', 'nepal', 'chad', \n    'china-macao-sar', 'syria', 'eritrea', 'saint-martin', 'mongolia', 'malawi', \n    'zimbabwe', 'angola', 'antigua-and-barbuda', 'timor-leste', 'botswana', \n    'central-african-republic', 'laos', 'belize', 'fiji', 'grenada', 'new-caledonia', \n    'curacao', 'dominica', 'namibia', 'saint-kitts-and-nevis', 'saint-lucia', \n    'saint-vincent-and-the-grenadines', 'nicaragua', 'falkland-islands-malvinas', \n    'burundi', 'montserrat', 'turks-and-caicos-islands', 'greenland', 'seychelles', \n    'gambia', 'suriname', 'holy-see', 'papua-new-guinea', 'mauritania', 'bhutan', \n    'british-virgin-islands', 'saint-barthelemy', 'south-sudan', 'western-sahara', \n    'caribbean-netherlands', 'sao-tome-and-principe', 'anguilla', 'saint-pierre-and-miquelon', \n    'yemen', 'china'\n]\n\nAVAILABLE_CHARTS = [\n    'total-currently-infected-linear',\n    'deaths-cured-outcome-small',\n    'coronavirus-cases-linear',\n    'graph-cases-daily',\n    'graph-active-cases-total',\n    'coronavirus-deaths-linear',\n    'graph-deaths-daily',\n    'cases-cured-daily',\n    'deaths-cured-outcome'\n]","b6214b41":"import covid_daily\n\noverview = covid_daily.overview(as_json=False)\n\nprint(overview.head())","8a512609":"import covid_daily\n\ndata = covid_daily.data(country='spain', chart='coronavirus-cases-linear', as_json=False)\n\nprint(data.head())\n","1eeed500":"from covid import Covid\n\ncovid = Covid()\ncovid.get_data()","e11880d4":"import covid_daily\n\ndata = covid_daily.data(country='France', chart='total-currently-infected-linear', as_json=True)\n\nprint(data.head())","013d0616":"import matplotlib.pyplot as plt\nimport covid_daily\nfrom covid_daily.constants import AVAILABLE_CHARTS","1d8ab302":"fig, axs = plt.subplots(3, 3, figsize=(20,15))\n\nfrom itertools import product\n\npairs = list(product((range(3)), (range(3))))\n\nfor idx, available_chart in enumerate(AVAILABLE_CHARTS):\n    data = covid_daily.data(country='France', chart=available_chart, as_json=False)\n    data.plot(ax=axs[pairs[idx]], title=available_chart)\n\nfig.tight_layout()\nfig.show()","c447bb81":"#pip install covid","61f34b71":"countries = covid.list_countries()\ncountries","140c659a":"#STATUS BY COUNTRY ID\nUSA = covid.get_status_by_country_id(177)\nUSA","9a8bcfe7":"#STATUS BY COUNTRY NAME\nUSA = covid.get_status_by_country_name(\"US\")","73aedeea":"USA","7576b048":"active = covid.get_total_active_cases()\nprint(\"The number of active cases in world are-\",active)\n","08c37f32":"confirmed = covid.get_total_confirmed_cases()\nprint(\"The number of Confirmed cases in world are-\",confirmed)\n","9db062f8":"recovered = covid.get_total_recovered()","1a31dde2":"print(\"The number of recovered cases in world are-\",recovered)","ff214977":"deaths = covid.get_total_deaths()\nprint(\"The number of deaths cases in world are-\",deaths)\n","751719fb":"#WORLDOMETER\ncovid = Covid(source=\"worldometers\")\ncovid1 = pd.DataFrame(covid.get_data())","589c15cf":"covid.get_status_by_country_name(\"USA\")","843b98b5":"countries = covid.list_countries()","7fe7d70e":"countries","a0da4751":"active = covid.get_total_active_cases()\nactive","22af61bf":"confirmed = covid.get_total_confirmed_cases()\nconfirmed","af62e391":"recovered = covid.get_total_recovered()\nrecovered","9423ea32":"deaths = covid.get_total_deaths()\ndeaths","93ced1ec":"## Pypi's covid_daily library for updated covid analysis ","915c11f9":"# Visualization","fc819572":"# COVID 19 Analysis \n## This analysis focus on the United States country\nPypi's worldometer code is referenced from their website which is mentioned below for reference purpose\nhttps:\/\/pypi.org\/project\/covid\/ ","c6c85eab":"### Pypi's Worldometer support and updated status with their scraping tools and functions\n#### Its just another approach "}}