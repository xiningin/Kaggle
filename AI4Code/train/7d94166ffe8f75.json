{"cell_type":{"b2b2b202":"code","5b4872b5":"code","fe2e6b47":"code","b94b9b78":"code","3669c84c":"code","757fc373":"code","349b73b1":"code","04f8ae7d":"code","402a46a9":"code","8bd8c990":"code","7133baa9":"code","d1919e0f":"code","0b36ff95":"code","828b43f1":"code","eee4f2ab":"code","55859795":"code","57a26161":"code","8043e839":"code","d7e37ac2":"markdown"},"source":{"b2b2b202":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5b4872b5":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, mean_squared_error\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_score","fe2e6b47":"data = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndata.head() # Return Top 5 rows","b94b9b78":"data.tail() # Return last 5 rows","3669c84c":"data.isnull().sum() # Check whether the data contains any null values","757fc373":"data.describe()","349b73b1":"data.info()  # Information about the Dataset","04f8ae7d":"sns.heatmap(data.isnull())","402a46a9":"plt.figure(figsize=(10,7))\nsns.heatmap(data.corr(),annot=True)","8bd8c990":"# Create X Data\nX = data.drop(['DEATH_EVENT'], axis=1, inplace=False)\nprint('X shape is ' , X.shape)","7133baa9":"# Create y Data\ny = data['DEATH_EVENT']\nprint('y shape is ' , y.shape)","d1919e0f":"# Splitting train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","0b36ff95":"print(len(X_train))\nprint(len(y_train))\nprint(len(X_test))\nprint(len(y_test))","828b43f1":"# Model : LOGISTIC REGRESSION\n\nmodel = LogisticRegression()\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)\n\nprint(\"Classification Report is:\\n\", classification_report(y_test, y_pred))\nprint(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\nprint(\"Testing Score:\\n\", model.score(X_test, y_test) * 100)\nprint(\"Mean Squared Error:\\n\", mean_squared_error(y_test, y_pred))\n\nprint(model.get_params())","eee4f2ab":"#Model : RANDOM FOREST CLASSIFIER\n    \nRandomForestClassifierModel = RandomForestClassifier(criterion = 'gini', n_estimators=100, max_depth=4, random_state=33)\nRandomForestClassifierModel.fit(X_train, y_train)\n\n\nprint('RandomForestClassifierModel Train Score is : ' , RandomForestClassifierModel.score(X_train, y_train))\nprint('RandomForestClassifierModel Test Score is : ' , RandomForestClassifierModel.score(X_test, y_test))\nprint('RandomForestClassifierModel features importances are : ' , RandomForestClassifierModel.feature_importances_)\nprint('----------------------------------------------------')\n\ny_pred = RandomForestClassifierModel.predict(X_test)\ny_pred_prob = RandomForestClassifierModel.predict_proba(X_test)\nprint('Predicted Value for RandomForestClassifierModel is : ' , y_pred[:10])\nprint('Prediction Probabilities Value for RandomForestClassifierModel is : ' , y_pred_prob[:10])","55859795":"# Model : SVC\n\nmodel = SVC()\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)\n\nprint(\"Classification Report is:\\n\", classification_report(y_test, y_pred))\nprint(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\nprint(\"testing Score:\\n\", model.score(X_test, y_test) * 100)\nprint(\"Mean Squared Error:\\n\", mean_squared_error(y_test, y_pred))\n\nprint(model.get_params())","57a26161":"# Model : DECISION TREE\n\nfrom sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier()\ndtree.fit(X_train,y_train)\ny_pred = dtree.predict(X_test)\n\nprint(\"Classification Report is:\\n\", classification_report(y_test, y_pred))\nprint(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\nprint(\"Testing Score:\\n\", dtree.score(X_test, y_test) * 100)\nprint(\"Mean Squared Error:\\n\", mean_squared_error(y_test, y_pred))","8043e839":"# Random Forest Classifier\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\ny_pred = dtree.predict(X_test)\n\nprint(\"Classification Report is:\\n\", classification_report(y_test, y_pred))\nprint(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\nprint(\"Training Score:\\n\", model.score(X_train, y_train) * 100)\nprint(\"Mean Squared Error:\\n\", mean_squared_error(y_test, y_pred))\n\nprint(model.get_params())\nprint('accuracy score',accuracy_score(y_test, y_pred) * 100)","d7e37ac2":"Accuracy -\n\n* LOGISTIC REGRESSION : 80%\n* SVC : 58%\n* Decision Tree : 65%\n* Random Forest Classifier : 65%"}}