{"cell_type":{"602adbd9":"code","76e37580":"code","29a60b8c":"code","bc77c3fa":"code","d06787ad":"code","55a8d04f":"code","f7dc478d":"code","371395d9":"code","72d5a015":"code","b673cb99":"code","f65d5293":"code","b0cce4f2":"code","bb080e4a":"code","816e1492":"markdown","33646df4":"markdown","712a223d":"markdown","a88fcae8":"markdown"},"source":{"602adbd9":"from keras.models import Model as KerasModel\nfrom keras.layers import Input, Dense,Flatten, Conv2D, MaxPooling2D, BatchNormalization, Dropout, Reshape, Concatenate, LeakyReLU\nfrom keras.optimizers import Adam\n\nIMGWIDTH = 256","76e37580":"class Classifier:\n    def __init__():\n        self.model = 0\n    \n    def predict(self, x):\n        return self.model.predict(x)\n    \n    def fit(self, x, y):\n        return self.model.train_on_batch(x, y)\n    \n    def get_accuracy(self, x, y):\n        return self.model.test_on_batch(x, y)\n    \n    def load(self, path):\n        self.model.load_weights(path)\n\nclass Meso4(Classifier):\n    def __init__(self, learning_rate=0.001):\n        self.model = self.init_model()\n        optimizer = Adam(lr = learning_rate)\n        self.model.compile(optimizer = optimizer, loss='mean_squared_error', metrics=['accuracy'])\n    \n    def init_model(self):\n        x = Input(shape=(IMGWIDTH, IMGWIDTH, 3))\n        \n        x1 = Conv2D(8, (3,3), padding='same', activation='relu')(x)\n        x1 = BatchNormalization()(x1)\n        x1 = MaxPooling2D(pool_size=(2,2), padding='same')(x1)\n        \n        x2 = Conv2D(8,(5,5), padding='same', activation='relu')(x1)\n        x2 = BatchNormalization()(x2)\n        x2 = MaxPooling2D(pool_size=(2,2), padding='same')(x2)\n        \n        x3 = Conv2D(16, (5,5), padding='same', activation='relu')(x2)\n        x3 = BatchNormalization()(x3)\n        x3 = MaxPooling2D(pool_size=(2,2), padding='same')(x3)\n        \n        x4 = Conv2D(16,(5,5), padding='same', activation='relu')(x3)\n        x4 = BatchNormalization()(x4)\n        x4 = MaxPooling2D(pool_size=(4,4), padding='same')(x4)\n        \n        y = Flatten()(x4)\n        y = Dropout(0.5)(y)\n        y = Dense(16)(y)\n        y = LeakyReLU(alpha=0.1)(y)\n        y = Dropout(0.5)(y)\n        y = Dense(1, activation='sigmoid')(y)\n        \n        return KerasModel(input=x, outputs=y)","29a60b8c":"!wget https:\/\/github.com\/PacktPublishing\/Machine-Learning-for-Cybersecurity-Cookbook\/raw\/master\/Chapter04\/Deepfake%20Recognition\/mesonet_weights\/Meso4_DF","bc77c3fa":"!wget -O df1.jpg https:\/\/github.com\/PacktPublishing\/Machine-Learning-for-Cybersecurity-Cookbook\/raw\/master\/Chapter04\/Deepfake%20Recognition\/mesonet_test_images\/df00204.jpg","d06787ad":"!wget -O df2.jpg https:\/\/github.com\/PacktPublishing\/Machine-Learning-for-Cybersecurity-Cookbook\/raw\/master\/Chapter04\/Deepfake%20Recognition\/mesonet_test_images\/df01254.jpg","55a8d04f":"!wget -O real.jpg https:\/\/github.com\/PacktPublishing\/Machine-Learning-for-Cybersecurity-Cookbook\/raw\/master\/Chapter04\/Deepfake%20Recognition\/mesonet_test_images\/real00240.jpg","f7dc478d":"from keras.preprocessing.image import ImageDataGenerator\n\nMesoNet_classifier = Meso4()\nMesoNet_classifier.load(\"Meso4_DF\")","371395d9":"!mkdir test_images\n!mv *.jpg test_images\/","72d5a015":"image_data_generator = ImageDataGenerator(rescale=1.0\/255)\ndata_generator = image_data_generator.flow_from_directory(\".\/\", classes=[\"test_images\"])","b673cb99":"num_to_label = {1:\"real\", 0:\"fake\"}","f65d5293":"X, y = data_generator.next()\nprobabilistic_predictions = MesoNet_classifier.predict(X)\npredictions = [num_to_label[round(x[0])] for x in probabilistic_predictions]\nprint(predictions)","b0cce4f2":"file_names = data_generator.filenames","bb080e4a":"file_names","816e1492":"### Lets get some sample images","33646df4":"### Lets define the mesonet model - mesonet.py","712a223d":"![](test_images\/df1.jpg)\n![](test_images\/df2.jpg)\n![](test_images\/real.jpg)","a88fcae8":"### Getting the trained model weights"}}