{"cell_type":{"65f6cde4":"code","3fa23c09":"code","d6c15094":"code","9cf2e256":"code","443d6218":"code","24127de5":"code","1d6cda5e":"code","eaca4424":"code","0061cbe9":"code","8d6f4a46":"code","d3bfa81a":"code","5aacdf14":"code","bcb51f21":"code","cebce5b5":"code","2daa9c74":"code","22df80ff":"code","68cb7d01":"markdown","ca8bf319":"markdown","bc618b0f":"markdown","d6833244":"markdown","39bccfcf":"markdown","fec630a3":"markdown","b1cf89db":"markdown","46a59f2a":"markdown","406622f4":"markdown"},"source":{"65f6cde4":"# import the needed libraries\nimport pandas as pd \nimport sqlite3\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport seaborn as sns ","3fa23c09":"# First, create a connection object that represents the database\nconn = sqlite3.connect('..\/input\/soccer\/database.sqlite')","d6c15094":"# Second, create a cursor\nc = conn.cursor()","9cf2e256":"#lets try executing the first 10 players from player table\nc.execute('SELECT * FROM player LIMIT 10')","443d6218":"#we will use fetchall\nc.fetchall()","24127de5":"# now lets create a simple function to retrieve the data simplly\ndef sq(q ,connection=conn):\n    c.execute(q)\n    return c.fetchall()","1d6cda5e":"#Now it's more easer\nsq('''SELECT * FROM player LIMIT 10''')","eaca4424":"pd.read_sql_query('''SELECT * FROM player LIMIT 10''',conn)","0061cbe9":"def pdsql(str,con=conn):\n    \n    data = pd.read_sql('''{}'''.format(str), con)\n    return data","8d6f4a46":"# Now it's easer to use\npdsql('''SELECT * FROM player LIMIT 10''')","d3bfa81a":"country = pdsql('SELECT * FROM Country')\ncountry.head() #instead of LIMIT 5 in sqlite","5aacdf14":"players = pdsql('SELECT * FROM player')\nplayers.head()","bcb51f21":"match = pdsql('SELECT * FROM Match')\nmatch.head()","cebce5b5":"league = pdsql('SELECT * FROM League')\nleague.head()","2daa9c74":"teams = pdsql('SELECT * FROM Team')\nteams.head()","22df80ff":"pdsql(\"\"\"\nSELECT Match.id, \nCountry.name AS country_name, \nLeague.name AS league_name, \nseason, \nstage, \ndate,\nHT.team_long_name AS  home_team,\nAT.team_long_name AS away_team,\nhome_team_goal, \naway_team_goal                                        \nFROM Match\nJOIN Country on Country.id = Match.country_id\nJOIN League on League.id = Match.league_id\nLEFT JOIN Team AS HT on HT.team_api_id = Match.home_team_api_id\nLEFT JOIN Team AS AT on AT.team_api_id = Match.away_team_api_id\nLIMIT 10\n\"\"\")","68cb7d01":"<h1 align='center'>sqlite3<\/h1><br>\n<li><b><a href=\"https:\/\/docs.python.org\/3\/library\/sqlite3.html\">SQLite<\/a><\/b> is a C library that provides a lightweight disk-based database that doesn\u2019t require a separate server process and allows accessing the database using a nonstandard variant of the SQL query language. Some applications can use SQLite for internal data storage. \n\nIt\u2019s also possible to prototype an application using SQLite and then port the code to a larger database such as PostgreSQL or Oracle.\n\nThe sqlite3 module was written by Gerhard H\u00e4ring. It provides a SQL interface compliant with the DB-API 2.0 specification described by <b><a href=\"https:\/\/www.python.org\/dev\/peps\/pep-0249\/\">PEP 249<\/a>.<\/b><\/li><br>\n<h2>Chinook sample database<\/h2>\n<p>Chinook is a sample database available for SQL Server, Oracle, MySQL, etc. It can be created by running a single SQL script. Chinook database is an alternative to the Northwind database, being ideal for demos and testing ORM tools targeting single and multiple database servers.<\/p>\n<b>You can also see:<\/b><br>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/superstore-analysis-with-cufflinks-and-pandas'>Superstore Analysis With Cufflinks and pandas<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/superstore-data-analysis-with-plotly'>Superstore Analysis With Plotly\n<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/chinook-sql'>Chinook Sql<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/suicide-rates-visualization-and-geographic-maps\/edit\/run\/53135916'>Suicide Rates visualization and Geographic maps<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/chinook-questions-with-sqlite'>Chinook data questions with sqlite3<\/a>\n<img src=\"https:\/\/docs.yugabyte.com\/images\/sample-data\/chinook\/chinook-er-diagram.png\" alt=\"Chinook sample database\"> \n","ca8bf319":"#### Now lets join our data into one table","bc618b0f":"### Lets Create tables to deal with the data","d6833244":"### Lets Do some sqlite3 analysis with some simple python codes","39bccfcf":"<li><b>NOW<\/b>, you cant deal with your database usin simple sql codes","fec630a3":"<li>Lets read SQL query into a DataFrame using pandas to make it more prettier","b1cf89db":"###### To retrieve data after executing a SELECT statement, you can either treat the cursor as an iterator, call the cursor\u2019s fetchone() method to retrieve a single matching row, or call fetchall() to get a list of the matching rows.","46a59f2a":"<h4>sqlite connect you to a database, if it dowsn't exist it will create a new database with the same name, but here we have <b><a href=\"https:\/\/www.kaggle.com\/hugomathien\/soccer\">European Soccer Database<\/a><\/b><\/h4><br>\nIn European Soccer Database you have:\n<li>+25,000 matches<\/li>\n<li>+10,000 players<\/li>\n<li>11 European Countries with their lead championship<\/li>\n<li>Seasons 2008 to 2016<\/li>\n<li>Players and Teams' attributes* sourced from EA Sports' FIFA video game series, including the weekly updates<\/li>\n<li>Team line up with squad formation (X, Y coordinates)<\/li>\n<li>Betting odds from up to 10 providers<\/li>\n<li>Detailed match events (goal types, possession, corner, cross, fouls, cards etc\u2026) for +10,000 matches<\/li>","406622f4":"<li>You can create a database in RAM using <b>sqlite3.connect(' :memory: ')<\/b>, but it won't be saved, it will be deleted as soon as you close the program<\/li>\n<li>Once you have a Connection, you can create a Cursor object and call its execute() method to perform SQL commands<\/li>"}}