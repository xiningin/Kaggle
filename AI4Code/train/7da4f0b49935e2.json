{"cell_type":{"3635b5b4":"code","870ab0b5":"code","7c1f90a8":"code","1d61e966":"code","c3289ea9":"code","da3cde02":"code","8c97a4c6":"code","05197335":"code","78a6cf0e":"code","1d80ada5":"code","6a837d4e":"code","f82cf2d5":"code","d728180b":"code","ad003a6a":"code","af79b231":"code","88674566":"code","28a0181e":"code","f6c41546":"code","177d145d":"code","f6388fcb":"code","953434cc":"code","e606cec8":"code","28533bbe":"code","0c136cfb":"code","b6921c99":"code","b1aad280":"code","1626b8e8":"code","a4aa6c41":"code","ccc9d0ac":"code","97f4fc1e":"code","fd977348":"code","dbc32b9c":"code","f22ba889":"code","065d0792":"markdown","16d1fce3":"markdown","549c3d69":"markdown","d5f21c2e":"markdown","0fe437c1":"markdown"},"source":{"3635b5b4":"!pip install pylops","870ab0b5":"#GENERAL\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\nimport string\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom keras.preprocessing import image\nimport skimage\nfrom skimage.feature import hessian_matrix, hessian_matrix_eigvals\nfrom scipy.ndimage.filters import convolve\nfrom skimage import data, io, filters\nimport pylops\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN, LSTM, GlobalAveragePooling2D, SeparableConv2D, ZeroPadding2D, \\\nConvolution2D, Reshape, GaussianNoise, ReLU, Conv2DTranspose, LeakyReLU\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nimport keras\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.models import load_model\nfrom keras.regularizers import l1,l2,L1L2\n#SKLEARN CLASSIFIER\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom lightgbm import LGBMClassifier, LGBMRegressor\nfrom catboost import CatBoostClassifier, CatBoostRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neural_network import MLPClassifier, MLPRegressor\nfrom sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","7c1f90a8":"Captcha_Data = Path(\"..\/input\/captcha-data\/data\/train\")","1d61e966":"Captcha_Path = list(Captcha_Data.glob(r\"*.png\"))","c3289ea9":"Captcha_Series = pd.Series(Captcha_Path,name=\"CAPTCHA\").astype(str)","da3cde02":"print(Captcha_Series)","8c97a4c6":"def general_vision(captcha_image_number = int):\n    figure = plt.figure(figsize=(10,10))\n\n    Example_Image = Captcha_Series[captcha_image_number]\n    Reading_Captcha = cv2.imread(Example_Image)\n\n    plt.imshow(Reading_Captcha)\n    plt.xlabel(Reading_Captcha.shape)\n    plt.ylabel(Reading_Captcha.size)\n    \n    \n    \ndef threshold_process(captcha_image_number = int):\n    figure = plt.figure(figsize=(10,10))\n    \n    Example_Image = Captcha_Series[captcha_image_number]\n    Reading_Captcha = cv2.imread(Example_Image)\n    _,threshold_image = cv2.threshold(Reading_Captcha,180,255,cv2.THRESH_TOZERO)\n    \n    plt.imshow(threshold_image)\n    plt.xlabel(threshold_image.shape)\n    plt.ylabel(threshold_image.size)\n    \n    \n    \ndef canny_process(captcha_image_number = int):\n    figure = plt.figure(figsize=(10,10))\n    \n    Example_Image = Captcha_Series[captcha_image_number]\n    Reading_Captcha = cv2.imread(Example_Image)\n    canny_image = cv2.Canny(Reading_Captcha,10,100)\n    \n    plt.imshow(canny_image)\n    plt.xlabel(canny_image.shape)\n    plt.ylabel(canny_image.size)\n    \n    \n    \ndef canny_to_threshold(captcha_image_number = int):\n    figure = plt.figure(figsize=(10,10))\n    \n    Example_Image = Captcha_Series[captcha_image_number]\n    Reading_Captcha = cv2.imread(Example_Image)\n    canny_image = cv2.Canny(Reading_Captcha,10,100)\n    _,threshold_image = cv2.threshold(canny_image,200,255,cv2.THRESH_TOZERO)\n    \n    plt.imshow(threshold_image)\n    plt.xlabel(threshold_image.shape)\n    plt.ylabel(threshold_image.size)\n    \n    \n    \ndef dilate_process(captcha_image_number = int): \n    figure = plt.figure(figsize=(10,10))\n    kernel = np.ones((2,2),np.uint8)\n    \n    Example_Image = Captcha_Series[captcha_image_number]\n    Reading_Captcha = cv2.imread(Example_Image)\n    canny_image = cv2.Canny(Reading_Captcha,10,100)\n    dilate_image = cv2.dilate(canny_image,kernel)\n    _,threshold_image = cv2.threshold(dilate_image,200,255,cv2.THRESH_TOZERO)\n    \n    plt.imshow(threshold_image)\n    plt.xlabel(threshold_image.shape)\n    plt.ylabel(threshold_image.size)\n    \n    \n\ndef erode_process(captcha_image_number = int): \n    figure = plt.figure(figsize=(10,10))\n    kernel = np.ones((2,),np.uint8)\n    \n    Example_Image = Captcha_Series[captcha_image_number]\n    Reading_Captcha = cv2.imread(Example_Image)\n    canny_image = cv2.Canny(Reading_Captcha,10,100)\n    erode_image = cv2.erode(canny_image,kernel)\n    _,threshold_image = cv2.threshold(erode_image,200,255,cv2.THRESH_TOZERO)\n    \n    plt.imshow(threshold_image)\n    plt.xlabel(threshold_image.shape)\n    plt.ylabel(threshold_image.size)\n    \n    \n    \ndef erode_to_dilate(captcha_image_number = int): \n    figure = plt.figure(figsize=(10,10))\n    kernel = np.ones((2,),np.uint8)\n    kernel_dilate = np.ones((4,),np.uint8)\n    \n    Example_Image = Captcha_Series[captcha_image_number]\n    Reading_Captcha = cv2.imread(Example_Image)\n    canny_image = cv2.Canny(Reading_Captcha,10,100)\n    erode_image = cv2.erode(canny_image,kernel)\n    _,threshold_image = cv2.threshold(erode_image,200,255,cv2.THRESH_TOZERO)\n    dilate_image = cv2.dilate(threshold_image,kernel_dilate)\n    \n    plt.imshow(dilate_image)\n    plt.xlabel(dilate_image.shape)\n    plt.ylabel(dilate_image.size)\n    \n    \ndef blur_process(captcha_image_number = int):\n    figure = plt.figure(figsize=(10,10))\n    blur_size = (10,10)\n    \n    Example_Image = Captcha_Series[captcha_image_number]\n    Reading_Captcha = cv2.imread(Example_Image)\n    blur_image = cv2.blur(Reading_Captcha, blur_size)\n    \n    plt.imshow(blur_image)\n    plt.xlabel(blur_image.shape)\n    plt.ylabel(blur_image.size)\n    ","05197335":"general_vision(3)","78a6cf0e":"threshold_process(3)","1d80ada5":"canny_process(3)","6a837d4e":"canny_to_threshold(3)","f82cf2d5":"dilate_process(3)","d728180b":"erode_process(3)","ad003a6a":"erode_to_dilate(3)","af79b231":"blur_process(3)","88674566":"figure,axis = plt.subplots(nrows=10,ncols=10,figsize=(12,12))\nblur_size = (10,10)\n\nfor i,ax in enumerate(axis.flat):\n    Example_IMG = cv2.imread(Captcha_Series[i])\n    Blur_IMG = cv2.blur(Example_IMG,blur_size)\n    Resize_IMG = cv2.resize(Blur_IMG,(50,50))\n    \n    ax.set_xlabel(Resize_IMG.shape)\n    ax.set_ylabel(Resize_IMG.size)\n    \n    ax.imshow(Resize_IMG)\n    \nplt.tight_layout()\nplt.show()","28a0181e":"Blur_Data = []\nblur_size = (8,8)\n\nfor IMG_Example in Captcha_Series:\n    \n    Reading_IMG = cv2.imread(IMG_Example)\n    Blur_IMG = cv2.blur(Reading_IMG,blur_size)\n    \n    Blur_IMG = Blur_IMG \/ 255.\n    \n    Blur_Data.append(Blur_IMG)","f6c41546":"print(Blur_Data[0].shape)\nprint(Blur_Data[0].size)\nprint(Blur_Data[0].ndim)\nprint(Blur_Data[0].dtype)","177d145d":"X_Train = np.asarray(Blur_Data)\nprint(X_Train.shape)\nprint(X_Train.size)\nprint(X_Train.ndim)\nprint(X_Train.dtype)","f6388fcb":"figure,axis = plt.subplots(nrows=10,ncols=10,figsize=(12,12))\n\nfor i,ax in enumerate(axis.flat):\n    Example_IMG = X_Train[i]\n    \n    ax.set_xlabel(Example_IMG.shape)\n    ax.set_ylabel(Example_IMG.size)\n    \n    ax.imshow(Example_IMG)\n    \nplt.tight_layout()\nplt.show()","953434cc":"Encoder_G = Sequential()\nEncoder_G.add(Conv2D(6,(5,5)))\nEncoder_G.add(LeakyReLU())\nEncoder_G.add(Conv2D(12,(5,5)))\nEncoder_G.add(LeakyReLU())\nEncoder_G.add(Conv2D(32, (5,5)))\nEncoder_G.add(LeakyReLU())\n\nDecoder_G = Sequential()\nDecoder_G.add(Conv2DTranspose(12,(5,5)))\nDecoder_G.add(LeakyReLU())\nDecoder_G.add(Conv2DTranspose(6,(5,5)))\nDecoder_G.add(LeakyReLU())\nDecoder_G.add(Conv2DTranspose(3,(5,5)))\nDecoder_G.add(LeakyReLU())","e606cec8":"Auto_Encoder = Sequential([Encoder_G,Decoder_G])","28533bbe":"Auto_Encoder.compile(loss=\"binary_crossentropy\",optimizer=RMSprop(lr=0.0008,clipvalue=1.0,decay=1e-8),metrics=[\"accuracy\"])","0c136cfb":"AE_Model = Auto_Encoder.fit(X_Train,X_Train,epochs=20)","b6921c99":"PRE_Img = Auto_Encoder.predict(X_Train[:10])","b1aad280":"figure = plt.figure(figsize=(10,10))\nprediction_img = 2\nprint(\"NORMAL\")\nplt.imshow(X_Train[prediction_img])","1626b8e8":"figure = plt.figure(figsize=(10,10))\nprint(\"Auto Encoder\")\nplt.imshow(PRE_Img[prediction_img])","a4aa6c41":"figure = plt.figure(figsize=(10,10))\nprediction_img = 8\nprint(\"NORMAL\")\nplt.imshow(X_Train[prediction_img])","ccc9d0ac":"figure = plt.figure(figsize=(10,10))\nprint(\"Auto Encoder\")\nplt.imshow(PRE_Img[prediction_img])","97f4fc1e":"figure = plt.figure(figsize=(10,10))\nprediction_img = 1\nprint(\"NORMAL\")\nplt.imshow(X_Train[prediction_img])","fd977348":"figure = plt.figure(figsize=(10,10))\nprint(\"Auto Encoder\")\nplt.imshow(PRE_Img[prediction_img])","dbc32b9c":"figure = plt.figure(figsize=(10,10))\nprediction_img = 6\nprint(\"NORMAL\")\nplt.imshow(X_Train[prediction_img])","f22ba889":"figure = plt.figure(figsize=(10,10))\nprint(\"Auto Encoder\")\nplt.imshow(PRE_Img[prediction_img])","065d0792":"# PATH & TRANSFORMATION","16d1fce3":"# VISUALIZATION","549c3d69":"# MODEL","d5f21c2e":"# PACKAGES AND LIBRARIES","0fe437c1":"# DATA PROCESS"}}