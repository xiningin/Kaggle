{"cell_type":{"6bae110c":"code","9d9fc1db":"code","4cc2511b":"code","f088d30e":"code","613afae3":"code","6d5ff584":"code","41d80789":"code","c539f126":"code","1f78fc64":"code","43def4f9":"code","aaf139b0":"code","d43da638":"code","5696488b":"code","41b5b8f1":"code","75d72216":"code","81f56e47":"code","99b061df":"code","4bf74358":"code","63fa85dd":"code","66bddd7c":"code","d174a0b7":"code","f41ec49c":"code","3334bd46":"code","31a766b6":"code","efec8248":"code","92ac5ff9":"code","17d0c366":"code","25e13fc3":"code","8e348f99":"code","8a983979":"code","582c7b94":"code","d1bb385d":"code","5a8e1f41":"code","fb2a64b3":"code","d4c333a0":"code","6d39738b":"code","8632438d":"code","66f1e76d":"code","2d66f4db":"code","ccb8e3d1":"code","4e8b7626":"code","f7596325":"markdown","a960db20":"markdown","6468b5da":"markdown","3583ca2e":"markdown","dced735d":"markdown","8041537b":"markdown","0bec5707":"markdown","91e13d35":"markdown","329e4487":"markdown","6577f93d":"markdown","1bee7fa4":"markdown","11ac153e":"markdown","dfa5ddbd":"markdown","d889f63b":"markdown","8e9790a2":"markdown","be7e03a3":"markdown","072616d6":"markdown","c29dd1ca":"markdown","b32ce0dd":"markdown","9a4f47ea":"markdown","203c13ab":"markdown","6d9513c1":"markdown","cbfd34ae":"markdown","2b20f834":"markdown","18873554":"markdown","974b776f":"markdown","6b7a4a8c":"markdown","ed647a05":"markdown","f7acea2b":"markdown","12963740":"markdown","144ed1fc":"markdown","5f0f6e2b":"markdown","c6b9fd9a":"markdown","3ee0b500":"markdown","61888639":"markdown","51bf387b":"markdown"},"source":{"6bae110c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9d9fc1db":"# We are reading our data\ndf = pd.read_csv(\"..\/input\/heart.csv\")","4cc2511b":"# First 5 rows of our data\ndf.head()","f088d30e":"df.target.value_counts()","613afae3":"sns.countplot(x=\"target\", data=df, palette=\"bwr\")\nplt.show()","6d5ff584":"countNoDisease = len(df[df.target == 0])\ncountHaveDisease = len(df[df.target == 1])\nprint(\"Percentage of Patients Haven't Heart Disease: {:.2f}%\".format((countNoDisease \/ (len(df.target))*100)))\nprint(\"Percentage of Patients Have Heart Disease: {:.2f}%\".format((countHaveDisease \/ (len(df.target))*100)))","41d80789":"sns.countplot(x='sex', data=df, palette=\"mako_r\")\nplt.xlabel(\"Sex (0 = female, 1= male)\")\nplt.show()","c539f126":"countFemale = len(df[df.sex == 0])\ncountMale = len(df[df.sex == 1])\nprint(\"Percentage of Female Patients: {:.2f}%\".format((countFemale \/ (len(df.sex))*100)))\nprint(\"Percentage of Male Patients: {:.2f}%\".format((countMale \/ (len(df.sex))*100)))","1f78fc64":"df.groupby('target').mean()","43def4f9":"pd.crosstab(df.age,df.target).plot(kind=\"bar\",figsize=(20,6))\nplt.title('Heart Disease Frequency for Ages')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.savefig('heartDiseaseAndAges.png')\nplt.show()","aaf139b0":"pd.crosstab(df.sex,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#1CA53B','#AA1111' ])\nplt.title('Heart Disease Frequency for Sex')\nplt.xlabel('Sex (0 = Female, 1 = Male)')\nplt.xticks(rotation=0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.ylabel('Frequency')\nplt.show()","d43da638":"plt.scatter(x=df.age[df.target==1], y=df.thalach[(df.target==1)], c=\"red\")\nplt.scatter(x=df.age[df.target==0], y=df.thalach[(df.target==0)])\nplt.legend([\"Disease\", \"Not Disease\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.show()","5696488b":"pd.crosstab(df.slope,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#DAF7A6','#FF5733' ])\nplt.title('Heart Disease Frequency for Slope')\nplt.xlabel('The Slope of The Peak Exercise ST Segment ')\nplt.xticks(rotation = 0)\nplt.ylabel('Frequency')\nplt.show()","41b5b8f1":"pd.crosstab(df.fbs,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#FFC300','#581845' ])\nplt.title('Heart Disease Frequency According To FBS')\nplt.xlabel('FBS - (Fasting Blood Sugar > 120 mg\/dl) (1 = true; 0 = false)')\nplt.xticks(rotation = 0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.ylabel('Frequency of Disease or Not')\nplt.show()","75d72216":"pd.crosstab(df.cp,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#11A5AA','#AA1190' ])\nplt.title('Heart Disease Frequency According To Chest Pain Type')\nplt.xlabel('Chest Pain Type')\nplt.xticks(rotation = 0)\nplt.ylabel('Frequency of Disease or Not')\nplt.show()","81f56e47":"a = pd.get_dummies(df['cp'], prefix = \"cp\")\nb = pd.get_dummies(df['thal'], prefix = \"thal\")\nc = pd.get_dummies(df['slope'], prefix = \"slope\")","99b061df":"frames = [df, a, b, c]\ndf = pd.concat(frames, axis = 1)\ndf.head()","4bf74358":"df = df.drop(columns = ['cp', 'thal', 'slope'])\ndf.head()","63fa85dd":"y = df.target.values\nx_data = df.drop(['target'], axis = 1)","66bddd7c":"# Normalize\nx = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data)).values","d174a0b7":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=0)","f41ec49c":"#transpose matrices\nx_train = x_train.T\ny_train = y_train.T\nx_test = x_test.T\ny_test = y_test.T","3334bd46":"#initialize\ndef initialize(dimension):\n    \n    weight = np.full((dimension,1),0.01)\n    bias = 0.0\n    return weight,bias","31a766b6":"def sigmoid(z):\n    \n    y_head = 1\/(1+ np.exp(-z))\n    return y_head","efec8248":"def forwardBackward(weight,bias,x_train,y_train):\n    # Forward\n    \n    y_head = sigmoid(np.dot(weight.T,x_train) + bias)\n    loss = -(y_train*np.log(y_head) + (1-y_train)*np.log(1-y_head))\n    cost = np.sum(loss) \/ x_train.shape[1]\n    \n    # Backward\n    derivative_weight = np.dot(x_train,((y_head-y_train).T))\/x_train.shape[1]\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients = {\"Derivative Weight\" : derivative_weight, \"Derivative Bias\" : derivative_bias}\n    \n    return cost,gradients","92ac5ff9":"def update(weight,bias,x_train,y_train,learningRate,iteration) :\n    costList = []\n    index = []\n    \n    #for each iteration, update weight and bias values\n    for i in range(iteration):\n        cost,gradients = forwardBackward(weight,bias,x_train,y_train)\n        weight = weight - learningRate * gradients[\"Derivative Weight\"]\n        bias = bias - learningRate * gradients[\"Derivative Bias\"]\n        \n        costList.append(cost)\n        index.append(i)\n\n    parameters = {\"weight\": weight,\"bias\": bias}\n    \n    print(\"iteration:\",iteration)\n    print(\"cost:\",cost)\n\n    plt.plot(index,costList)\n    plt.xlabel(\"Number of Iteration\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n\n    return parameters, gradients","17d0c366":"def predict(weight,bias,x_test):\n    z = np.dot(weight.T,x_test) + bias\n    y_head = sigmoid(z)\n\n    y_prediction = np.zeros((1,x_test.shape[1]))\n    \n    for i in range(y_head.shape[1]):\n        if y_head[0,i] <= 0.5:\n            y_prediction[0,i] = 0\n        else:\n            y_prediction[0,i] = 1\n    return y_prediction","25e13fc3":"def logistic_regression(x_train,y_train,x_test,y_test,learningRate,iteration):\n    dimension = x_train.shape[0]\n    weight,bias = initialize(dimension)\n    \n    parameters, gradients = update(weight,bias,x_train,y_train,learningRate,iteration)\n\n    y_prediction = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    \n    print(\"Manuel Test Accuracy: {:.2f}%\".format((100 - np.mean(np.abs(y_prediction - y_test))*100)))","8e348f99":"logistic_regression(x_train,y_train,x_test,y_test,1,100)","8a983979":"accuracies = {}\n\nlr = LogisticRegression()\nlr.fit(x_train.T,y_train.T)\nacc = lr.score(x_test.T,y_test.T)*100\n\naccuracies['Logistic Regression'] = acc\nprint(\"Test Accuracy {:.2f}%\".format(acc))","582c7b94":"# KNN Model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 2)  # n_neighbors means k\nknn.fit(x_train.T, y_train.T)\nprediction = knn.predict(x_test.T)\n\nprint(\"{} NN Score: {:.2f}%\".format(2, knn.score(x_test.T, y_test.T)*100))","d1bb385d":"# try ro find best k value\nscoreList = []\nfor i in range(1,20):\n    knn2 = KNeighborsClassifier(n_neighbors = i)  # n_neighbors means k\n    knn2.fit(x_train.T, y_train.T)\n    scoreList.append(knn2.score(x_test.T, y_test.T))\n    \nplt.plot(range(1,20), scoreList)\nplt.xticks(np.arange(1,20,1))\nplt.xlabel(\"K value\")\nplt.ylabel(\"Score\")\nplt.show()\n\nacc = max(scoreList)*100\naccuracies['KNN'] = acc\nprint(\"Maximum KNN Score is {:.2f}%\".format(acc))","5a8e1f41":"from sklearn.svm import SVC","fb2a64b3":"svm = SVC(random_state = 1)\nsvm.fit(x_train.T, y_train.T)\n\nacc = svm.score(x_test.T,y_test.T)*100\naccuracies['SVM'] = acc\nprint(\"Test Accuracy of SVM Algorithm: {:.2f}%\".format(acc))","d4c333a0":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train.T, y_train.T)\n\nacc = nb.score(x_test.T,y_test.T)*100\naccuracies['Naive Bayes'] = acc\nprint(\"Accuracy of Naive Bayes: {:.2f}%\".format(acc))","6d39738b":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(x_train.T, y_train.T)\n\nacc = dtc.score(x_test.T, y_test.T)*100\naccuracies['Decision Tree'] = acc\nprint(\"Decision Tree Test Accuracy {:.2f}%\".format(acc))","8632438d":"# Random Forest Classification\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 1000, random_state = 1)\nrf.fit(x_train.T, y_train.T)\n\nacc = rf.score(x_test.T,y_test.T)*100\naccuracies['Random Forest'] = acc\nprint(\"Random Forest Algorithm Accuracy Score : {:.2f}%\".format(acc))","66f1e76d":"colors = [\"purple\", \"green\", \"orange\", \"magenta\",\"#CFC60E\",\"#0FBBAE\"]\n\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(16,5))\nplt.yticks(np.arange(0,100,10))\nplt.ylabel(\"Accuracy %\")\nplt.xlabel(\"Algorithms\")\nsns.barplot(x=list(accuracies.keys()), y=list(accuracies.values()), palette=colors)\nplt.show()","2d66f4db":"# Predicted values\ny_head_lr = lr.predict(x_test.T)\nknn3 = KNeighborsClassifier(n_neighbors = 3)\nknn3.fit(x_train.T, y_train.T)\ny_head_knn = knn3.predict(x_test.T)\ny_head_svm = svm.predict(x_test.T)\ny_head_nb = nb.predict(x_test.T)\ny_head_dtc = dtc.predict(x_test.T)\ny_head_rf = rf.predict(x_test.T)","ccb8e3d1":"from sklearn.metrics import confusion_matrix\n\ncm_lr = confusion_matrix(y_test,y_head_lr)\ncm_knn = confusion_matrix(y_test,y_head_knn)\ncm_svm = confusion_matrix(y_test,y_head_svm)\ncm_nb = confusion_matrix(y_test,y_head_nb)\ncm_dtc = confusion_matrix(y_test,y_head_dtc)\ncm_rf = confusion_matrix(y_test,y_head_rf)\n","4e8b7626":"plt.figure(figsize=(24,12))\n\nplt.suptitle(\"Confusion Matrixes\",fontsize=24)\nplt.subplots_adjust(wspace = 0.4, hspace= 0.4)\n\nplt.subplot(2,3,1)\nplt.title(\"Logistic Regression Confusion Matrix\")\nsns.heatmap(cm_lr,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,2)\nplt.title(\"K Nearest Neighbors Confusion Matrix\")\nsns.heatmap(cm_knn,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,3)\nplt.title(\"Support Vector Machine Confusion Matrix\")\nsns.heatmap(cm_svm,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,4)\nplt.title(\"Naive Bayes Confusion Matrix\")\nsns.heatmap(cm_nb,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,5)\nplt.title(\"Decision Tree Classifier Confusion Matrix\")\nsns.heatmap(cm_dtc,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,6)\nplt.title(\"Random Forest Confusion Matrix\")\nsns.heatmap(cm_rf,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.show()","f7596325":"## Decision Tree Algorithm","a960db20":"### Sklearn Logistic Regression","6468b5da":"By the way in formulas; <br>\n* h0(x^i)= y_head\n* y^i = y_train\n* x^i = x_train","3583ca2e":"## <font color=\"#0FBBAE\">Test Accuracy of Random Forest: <font color=\"red\">88.52%<\/font><\/font>","dced735d":"## Creating Model for Logistic Regression\n<br>\nWe can use sklearn library or we can write functions ourselves. Let's them both. Firstly we will write our functions after that we'll use sklearn library to calculate score.","8041537b":"## Data Exploration","0bec5707":"## Read Data","91e13d35":"**KNN Algorithm**\n<br>\n<img src=\"http:\/\/res.cloudinary.com\/dyd911kmh\/image\/upload\/f_auto,q_auto:best\/v1531424125\/KNN_final_a1mrv9.png\"\/>","329e4487":"## <font color=\"#CFC60E\">Test Accuracy of Decision Tree Algorithm: <font color=\"red\">78.69%<\/font><\/font>","6577f93d":"1. ## <font color = \"purple\">Our model works with <font color=\"red\">**86.89%**<\/font> accuracy.<\/font>","1bee7fa4":"### Normalize Data\n<br>\n<br>\n<img src=\"https:\/\/beyondbacktesting.files.wordpress.com\/2017\/07\/normalization.png?w=863\" width=\"400px\"\/>","11ac153e":"Data contains; <br>\n\n* age - age in years <br>\n* sex - (1 = male; 0 = female) <br>\n* cp - chest pain type <br>\n* trestbps - resting blood pressure (in mm Hg on admission to the hospital) <br>\n* chol - serum cholestoral in mg\/dl <br>\n* fbs - (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false) <br>\n* restecg - resting electrocardiographic results <br>\n* thalach - maximum heart rate achieved <br>\n* exang - exercise induced angina (1 = yes; 0 = no) <br>\n* oldpeak - ST depression induced by exercise relative to rest <br>\n* slope - the slope of the peak exercise ST segment <br>\n* ca - number of major vessels (0-3) colored by flourosopy <br>\n* thal - 3 = normal; 6 = fixed defect; 7 = reversable defect <br>\n* target - have disease or not (1=yes, 0=no)","dfa5ddbd":"As you can see above if we define k as 3-7-8 we will reach maximum score. <br>\n## <font color=\"green\">KNN Model's Accuracy is <font color=\"red\">88.52%<\/font><\/font>","d889f63b":"### Creating Dummy Variables","8e9790a2":"## Support Vector Machine (SVM) Algorithm \nNow we will use SVM algorithm. ","be7e03a3":"## Confusion Matrix","072616d6":"Let's say weight = 0.01 and bias = 0.0","c29dd1ca":"## Naive Bayes Algorithm","b32ce0dd":"## <font color=\"orange\">Test Accuracy of SVM Algorithm is <font color=\"red\"> 86.89%<\/font><\/font>","9a4f47ea":"**Support Vector Machine Algorithm**\n<br>\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1600\/1*TudH6YvvH7-h5ZyF2dJV2w.jpeg\" width=\"500px\"\/><br>\n<img src=\"https:\/\/aitrends.com\/wp-content\/uploads\/2018\/01\/1-19SVM-2.jpg\" width=\"500px\"\/>\n","203c13ab":"## Comparing Models","6d9513c1":"## K-Nearest Neighbour (KNN) Classification\n<br>\nLet's see what will be score if we use KNN algorithm.","cbfd34ae":"## <font color=\"magenta\">Accuracy of Naive Bayes: <font color=\"red\">86.89%<\/font><\/font>","2b20f834":"Our models work fine but best of them are KNN and Random Forest with 88.52% of accuracy. Let's look their confusion matrixes.","18873554":"### Gradient Descent\n<br>\n<img src=\"https:\/\/i.stack.imgur.com\/pYVzl.png\" width=\"500px\"\/>","974b776f":"**Naive Bayes Algorithm**\n<br>\n<img src=\"https:\/\/s3.ap-south-1.amazonaws.com\/techleer\/204.png\" width=\"500px\"\/>","6b7a4a8c":"![](http:\/\/)Since 'cp', 'thal' and 'slope' are categorical variables we'll turn them into dummy variables.","ed647a05":"**Decision Tree Algorithm**\n<br>\n![image.png](attachment:image.png)","f7acea2b":"We will split our data. 80% of our data will be train data and 20% of it will be test data.","12963740":"# INTRODUCTION\n<br>\nWe have a data which classified if patients have heart disease or not according to features in it. We will try to use this data to create a model which tries predict if a patient has this disease or not. We will use logistic regression (classification) algorithm.","144ed1fc":"### Forward and Backward Propagation\n<br>\n<img src=\"https:\/\/image.slidesharecdn.com\/gradientdescentbackpropandautomaticdifferentiation-160829164205\/95\/gradient-descent-back-propagation-and-auto-differentiation-advanced-spark-and-tensorflow-meetup-08042016-62-638.jpg?cb=1472489358\" width=\"500px\"\/>","5f0f6e2b":"## Random Forest Classification","c6b9fd9a":"**I am new with data science. Please comment me your feedbacks to help me improve myself. Thanks for your time.**","3ee0b500":"### Sigmoid Function\n<br>\n<img src=\"https:\/\/qph.fs.quoracdn.net\/main-qimg-05edc1873d0103e36064862a45566dba\" width=\"500px\"\/>","61888639":"## <font color=\"blue\">Manuel Test Accuracy is <font color=\"red\">**86.89%**<\/font><\/font><br>\nLet's find out sklearn's score.","51bf387b":"### Cost Function\n<br>\n<img src=\"https:\/\/i.stack.imgur.com\/XbU4S.png\" width=\"500px\"\/>"}}