{"cell_type":{"529680de":"code","efc3117c":"code","269535c5":"code","55a4b38c":"code","1efa1eb0":"code","cd55dc0f":"code","df805972":"code","09ecac59":"code","5004c1eb":"code","1dd808d2":"code","bef0a193":"code","0aac8335":"code","c0d16aa8":"code","a28be599":"code","b1a256a9":"code","02f93292":"code","58f4b4af":"code","89f340d3":"code","1fb305ea":"code","1ad9d309":"code","d189cb97":"code","c8a4c39b":"code","4ce75780":"code","58b4465a":"code","38d50c34":"code","ff9fbc65":"code","35664d7a":"code","57523387":"code","025d092c":"code","0702029a":"code","381d772c":"code","2578381a":"markdown","ba7067f3":"markdown","c5cf69e8":"markdown","295b5daa":"markdown","a152fbda":"markdown","4ecd59f2":"markdown","880e86f6":"markdown","43db5319":"markdown","b985aa35":"markdown","27c84da2":"markdown","77e80f36":"markdown","54849d6b":"markdown","a45beec4":"markdown","c6275721":"markdown","ea952d85":"markdown","65baea7c":"markdown"},"source":{"529680de":"#Import all the relevant dependencies and libraries\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random as rnd\nfrom scipy import stats\n\n# Import Dependencies\n%matplotlib inline\n\nfrom sklearn.linear_model import TheilSenRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom xgboost import XGBRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\n\n# Import Visualization \nimport matplotlib.pyplot as plt\nimport missingno as msno\nimport seaborn as sns\nimport plotly.express as px\nimport mplcyberpunk\nimport plotly.graph_objects as go\nfrom wordcloud import WordCloud\nfrom collections import Counter\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Suppress warnings\nimport warnings\nwarnings.filterwarnings('ignore')","efc3117c":"#Importing data\n\nfilename='\/kaggle\/input\/top50spotify2019\/top50.csv'\nspotify_df=pd.read_csv(filename,encoding='ISO-8859-1',index_col=0)\nspotify_df.head() ","269535c5":"spotify_df.info() #lets explore data type.","55a4b38c":"spotify_df.describe()","1efa1eb0":"#Lets reduce the number of decimal places to 2\npd.set_option('precision', 2)\nspotify_df.describe()","cd55dc0f":"#Finding the missing values\n# Plot graphic of missing values\nmsno.matrix(spotify_df, figsize = (15,5))","df805972":"spotify_df.describe(include = ['O'])","09ecac59":"#Understanding Correlation between variables\nplt.figure(figsize=(15,8))\nsns.heatmap(spotify_df.corr(), annot=True, square = True, cmap=\"YlGnBu\", linewidths=1, fmt= '.2f')\nplt.title('Pearson Correlation Matrix\\n',fontsize=20);","5004c1eb":"plt.figure(figsize=(15,8))\ncorrel = spotify_df.corr()\nsns.heatmap(correl[((correl >= 0.2) | (correl <= -0.2)) & (correl != 1)], annot=True, linewidths=1, fmt= '.2f', square = True, cmap=\"YlGnBu\")\nplt.title('Configured Correlation coefficients between variables.\\n',fontsize=20);","1dd808d2":"# Plotting a histogram to show the original data distribution \nplt.hist(spotify_df['Popularity'],bins=10)\nplt.title('Popularity Chart.\\n',fontsize=20);\nplt.ylabel('Count', fontsize=15)\nplt.xlabel(\"Popularity\", fontsize=15)","bef0a193":"#Analysing Genre Vs Popularity\n\nsns.FacetGrid(spotify_df, hue=\"Genre\",aspect=2)\\\n.map(sns.kdeplot,'Popularity',shade= True)\\\n.set(xlim=(60, spotify_df['Popularity'].max()))\\\n.add_legend()\n\nplt.xlabel(\"Popularity\", fontsize=15)\nplt.title('Genre distrubution vs Popularity\\n', fontsize=20)\nplt.ylabel('Frequency', fontsize=15)","0aac8335":"#Genre and Number of songs in that Genre.\n#Representing using Pie chart\nfig = px.pie(spotify_df, values = 'Popularity', names='Genre', hole = 0.5)\nfig.update_layout(annotations=[dict(text='Genre',font_size=20, showarrow=False)])\nfig.show()","c0d16aa8":"#Artists and Number of songs by each artists in database.\nsns.set(font_scale = 1.2)\nab = sns.catplot(y = \"Artist.Name\", kind = \"count\", edgecolor = \".1\", data = spotify_df, aspect=1, size=10)\nplt.ylabel('Artist Name', fontsize=15)\nplt.xlabel(\"Number of songs\", fontsize=15)\nplt.title(\"Artists and Number of songs\", fontsize=20);\n#plt.show()\n","a28be599":"#Finding Most Popular aritist using word cloud\n\nallSongs = [trackname for trackname in spotify_df['Artist.Name']]\nwc_dict = Counter(allSongs)\n\nwordcloud = WordCloud(width=1000, height=500, background_color = 'white', collocations=False).generate_from_frequencies(wc_dict)\nplt.figure(figsize = (20, 10))\nplt.imshow(wordcloud)\nplt.axis('off');","b1a256a9":"#Corelation between Beats.Per.Minute and Popularity\n#Ploting data and a linear regression model fit.\n\nplt.figure(figsize=(15,15))\nsns.jointplot(x=spotify_df[\"Beats.Per.Minute\"].values, y=spotify_df['Popularity'].values, size=10, kind=\"reg\",color='Purple')\nplt.ylabel('Popularity', fontsize=15)\nplt.xlabel(\"Beats.Per.Minute\", fontsize=15)","02f93292":"sns.pairplot(spotify_df, hue=\"Popularity\")","58f4b4af":"#Corelation between Loudness and Danceability\nsns.set(font_scale = 1.2)\nplt.figure(figsize=(15,10))\nsns.violinplot(x='Loudness..dB..', y='Danceability', data=spotify_df, palette=\"Set1\")\nplt.xlabel('Loudness in dB', fontsize=15)\nplt.ylabel('Danceability index', fontsize=15)\nplt.title(\"\\n Danceability Vs Loudness\\n\", fontsize=20);","89f340d3":"#Plot top 10 songs based on Popularity using mplcyberpunk\nplt.style.use('cyberpunk')\nplt.figure(figsize = (8, 10))\ntop10 = spotify_df.sort_values(by=['Popularity'],ascending=False).head(10)\nax = sns.barplot(data = top10, y = 'Track.Name', x= 'Popularity');\nmplcyberpunk.add_glow_effects(ax)\n\nplt.xlabel('Popularity', fontsize=15)\nplt.ylabel('Track Name', fontsize=15)\nplt.title(\"\\n Top 10 songs based on Popularity \\n\", fontsize=20);","1fb305ea":"# Analysing Danceability of each track\nplt.style.use('cyberpunk')\nplt.figure(figsize = (25, 5))\nsns.pointplot(data = spotify_df, x = 'Track.Name',y = 'Danceability',hue = 'Popularity', palette = 'inferno');\nplt.xticks(rotation = 90)\nplt.ylabel('Danceability', fontsize=15)\nplt.xlabel('Track Name', fontsize=15)\nplt.title(\"\\n Analysing Danceability of each track \\n\", fontsize=20);\nplt.legend(loc='lower right')\nmplcyberpunk.add_glow_effects()","1ad9d309":"# Finding the correlation between Energy, Acousticness and Loudness of the song\nfig = go.Figure(data = [go.Scatter3d(\n    x = spotify_df['Energy'],\n    y = spotify_df['Loudness..dB..'],\n    z = spotify_df['Acousticness..'],\n    text = spotify_df['Track.Name'], #pointer\n    mode = 'markers',\n    marker = dict(\n    color = spotify_df['Popularity'],\n    colorbar_title = 'Popularity',\n    colorscale = 'aggrnyl'\n    )\n)])\n\n# Set variables and size\nfig.update_layout(width=800, height=800, title = 'Correlation between Energy, Acousticness and Loudness of the song',\n                  scene = dict(xaxis=dict(title='Energy'),\n                               yaxis=dict(title='Loudness'),\n                               zaxis=dict(title='Acousticness')\n                               )\n                 )\n\nfig.show()","d189cb97":"# Finding the correlation between Danceability, Liveness and Valence of the song\nfig = go.Figure(data = [go.Scatter3d(\n    x = spotify_df['Danceability'],\n    y = spotify_df['Liveness'],\n    z = spotify_df['Valence.'],\n    text = spotify_df['Track.Name'], #pointer\n    mode = 'markers',\n    marker = dict(\n    color = spotify_df['Popularity'],\n    colorbar_title = 'Popularity',\n    colorscale = 'agsunset'\n    )\n)])\n\n# Set variables and size\nfig.update_layout(width=800, height=800, title = 'Correlation between Danceability, Liveness and Valence of the song',\n                  scene = dict(xaxis=dict(title='Danceability'),\n                               yaxis=dict(title='Liveness'),\n                               zaxis=dict(title='Valence')\n                               )\n                 )\n\nfig.show()","c8a4c39b":"#Trying to understand if length of the song varies due to Speechiness\nfig = px.histogram(spotify_df,\n                   x=\"Speechiness.\",\n                    y=\"Length.\",\n                  opacity = 1,\n                  title = 'Length of the song Vs Speechiness',\n                  color = 'Artist.Name')\nfig.show()","4ce75780":"# Retaining all numeric columns\nSfy_df_pre = spotify_df.drop(['Track.Name', 'Artist.Name', 'Genre'], axis = 1)\nSfy_df_pre.head()","58b4465a":"#Predictive Modelling with outliers\nX = Sfy_df_pre.iloc[: , :-1] # Asigning all rows and all columns without popularity\ny = Sfy_df_pre.iloc[:, -1] # Asigning Popularity values","38d50c34":"# Spliting the data into test and train datasets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, shuffle = True, random_state = 42)","ff9fbc65":"#Using Theil-Sen Regression model.\nTSReg = TheilSenRegressor() #Define Model\nTSReg.fit(X_train, y_train) #Fit Model\ny_pred = TSReg.predict(X_test) #Get Predictions\nprint('\\nOrginal Value \\t Predicted Value')\nfor (orgVal, predVal) in zip(y_test, y_pred):\n     print(f\"\\t{orgVal}\\t\\t{predVal:.2f}\")\n\n#Checking the accuracy of Theil-Sen Regression model\nprint('\\nMean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","35664d7a":"#Theil-Sen Regression model Error analysis\nplt.style.use('dark_background')\nplt.figure(figsize=(10,10))\nplt.plot(y_pred,y_test,color='Red',linestyle='dashdot',marker='p',markerfacecolor='blue',markersize=15)\nplt.title('Theil-Sen Regression model Error analysis\\n',fontsize=20)\nplt.xlabel('Predicted values',fontsize=15)\nplt.ylabel('Test values',fontsize=15)","57523387":"#Using XGB Regression model.\n        \nXGBReg = XGBRegressor()\nXGBReg.fit(X_train, y_train)\ny_pred = XGBReg.predict(X_test)\nprint('Orginal Value \\t Predicted Value')\nfor (orgVal, predVal) in zip(y_test, y_pred):\n     print(f\"\\t{orgVal}\\t\\t{predVal:.2f}\")\n        \n#Checking the accuracy of XGB Regression model\nprint('\\nMean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","025d092c":"#XGB Regression model Error analysis\n\nplt.figure(figsize=(10,10))\nplt.plot(y_pred,y_test,color='Red',linestyle='dashdot',marker='p',markerfacecolor='blue',markersize=15)\nplt.title('XGB Regression model Error analysis\\n',fontsize=20)\nplt.xlabel('Predicted values',fontsize=15)\nplt.ylabel('Test values',fontsize=15)","0702029a":"#Using Linear Regression model.\n\nLinReg = LinearRegression() #Define Model\nLinReg.fit(X_train, y_train) #Fit Model\ny_pred = LinReg.predict(X_test) #Get Predictions\nprint('Orginal Value \\t Predicted Value')\nfor (orgVal, predVal) in zip(y_test, y_pred):\n     print(f\"\\t{orgVal}\\t\\t{predVal:.2f}\")\n        \n#Checking the accuracy of XGB Regression model\nprint('\\nMean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","381d772c":"#Linear Regression model Error analysis\n\nplt.figure(figsize=(10,10))\nplt.plot(y_pred,y_test,color='Red',linestyle='dashdot',marker='p',markerfacecolor='blue',markersize=15)\nplt.title('Linear Regression model Error analysis\\n',fontsize=20)\nplt.xlabel('Predicted values',fontsize=15)\nplt.ylabel('Test values',fontsize=15)","2578381a":"**Ordinary least squares Linear Regression.**\n\nLinearRegression fits a linear model with coefficients w = (w1, \u2026, wp) to minimize the residual sum of squares between the observed targets in the dataset, and the targets predicted by the linear approximation.","ba7067f3":"**Thanks!**","c5cf69e8":"**Theil-Sen Estimator: robust multivariate regression model.**\n\nThe algorithm calculates least square solutions on subsets with size n_subsamples of the samples in X. Any value of n_subsamples between the number of features and samples leads to an estimator with a compromise between robustness and efficiency. Since the number of least square solutions is \u201cn_samples choose n_subsamples\u201d, it can be extremely large and can therefore be limited with max_subpopulation. If this limit is reached, the subsets are chosen randomly. In a final step, the spatial median (or L1 median) is calculated of all least square solutions.","295b5daa":"![](http:\/\/)","a152fbda":"# Predicting popularity of the songs","4ecd59f2":"***If you like it Please Upvote!***","880e86f6":"**Dance Pop and Pop are two most listed Genre in the top 50**","43db5319":"* All column are complete an no empty cells can be found.","b985aa35":"**Reference**\n\nhttps:\/\/www.kaggle.com\/arpita28\/analysis-of-spotify-trends\n\nhttps:\/\/www.kaggle.com\/duttasd28\/spotify-theil-sen-cyberpunk-plotly\n","27c84da2":"# This notebook goes through some of the exploratory data analysis of the Kaggle Spotify dataset with Python.\n\n## Aim: To Analyze Genre with rest of the data on Top 50 Spotify Songs \u2013 2019","77e80f36":"**Analyzing and visualizing data by pivoting features**","54849d6b":"Slightly positive correlation can be found between Loudness and Energy.","a45beec4":"**Ed Sheeran has more number of songs in the Top 50**","c6275721":"**Bad Guy by Billie Eilish. Gener Electropop is the most Popular track**","ea952d85":"* All track values are unique across the dataset\n* Artist Names have several dupicates which means several artists have more than one track.","65baea7c":"**Top 50 songs listened in 2019 on Spotify dataset contains name of Artists, Genre, and other 11 variables.**\n*     Let us convert the data into pandas\u2019 readable format by encoding to 'ISO-8859-1'"}}