{"cell_type":{"ca514794":"code","40680021":"code","b419122d":"code","f75c9668":"code","1d9f795f":"code","5b1f3122":"code","93f47c18":"code","5d800a69":"code","06c68c9c":"code","7659f239":"code","9dc9daa8":"code","f2a39be3":"code","90c770f8":"code","82b6be51":"code","1610686e":"code","5185cbf2":"markdown","a774f0b5":"markdown","c0160524":"markdown"},"source":{"ca514794":"import numpy as np # linear algebra\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense , Flatten\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn import linear_model\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeRegressor\nimport statsmodels.api as sm\nfrom sklearn.model_selection import train_test_split\nimport os\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","40680021":"train_df = pd.read_csv(\"..\/input\/tabular-playground-series-aug-2021\/train.csv\") #loading datas\ntest_df = pd.read_csv(\"..\/input\/tabular-playground-series-aug-2021\/test.csv\")","b419122d":"train_df.head(3)","f75c9668":"train_df.info()","1d9f795f":"print(f\"train data len : {len(train_df)}\")\nprint(f\"test data len : {len(test_df)}\")","5b1f3122":"y_train = train_df.loc[:,\"loss\"]\nx_train = train_df.drop([\"id\",\"loss\"],axis=1)\n\nx_test_id = test_df.loc[:,\"id\"]\nx_test = test_df.drop([\"id\"],axis=1)\n\ncon_x_data = pd.concat([x_train,x_test],axis = 0).reset_index(drop = True)","93f47c18":"scaler = StandardScaler()\n\ncon_x_data = scaler.fit_transform(con_x_data)","5d800a69":"x_test = con_x_data[250000:]\nx_train = con_x_data[:250000]","06c68c9c":"y_train = y_train.to_numpy()","7659f239":"x_train = pd.DataFrame(x_train)\ny_train = pd.DataFrame(y_train)","9dc9daa8":"def backward_elimination(data, target,significance_level = 0.05):\n    features = data.columns.tolist()\n    while(len(features)>0):\n        features_with_constant = sm.add_constant(data[features])\n        p_values = sm.OLS(target, features_with_constant).fit().pvalues[1:]\n        max_p_value = p_values.max()\n        if(max_p_value >= significance_level):\n            excluded_feature = p_values.idxmax()\n            features.remove(excluded_feature)\n        else:\n            break \n    return features","f2a39be3":"feat=backward_elimination(x_train,y_train)\n\nx_train = x_train.loc[:,feat]","90c770f8":"model = sm.OLS(y_train,x_train).fit()\nmodel.summary()","82b6be51":"X_train, X_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.2)","1610686e":"gb_model = GradientBoostingRegressor(subsample=0.7,learning_rate=0.017, max_depth=4 ,\n                                     random_state=np.random.randint(1000),n_estimators=800).fit(X_train, y_train)\n\nprint(\"Performance on train data:\", gb_model.score(X_train, y_train))","5185cbf2":"<br>\n<h1 style = \"font-size:40px; font-family:Garamond ; font-weight : normal; background-color: #C66363 ; color : #E8D6D8; text-align: center; border-radius: 100px 100px;\">LEAK DATA <\/h1>\n<br>\n","a774f0b5":"# Add Libaries","c0160524":"# Load and Examine Data"}}