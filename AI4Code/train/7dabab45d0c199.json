{"cell_type":{"e744d348":"code","872e0bd7":"code","60833410":"code","9f2ea653":"code","fa1cc7e0":"code","e75a49d4":"code","8f4f96c6":"code","23348399":"code","a25bfd7d":"code","a24ffab2":"code","9cd5d98e":"code","96fde2ee":"code","98f34607":"code","08c7f8f0":"code","6761bfda":"code","69f0ec50":"code","899fbedd":"code","4c953820":"code","74d39183":"code","98084e4d":"code","ef8ed473":"code","90727d6d":"code","36c09750":"code","f02f0e9f":"code","6c4b4cdf":"code","d44c3294":"code","24cab162":"code","23536bae":"code","91728271":"code","1f05b2d1":"code","5ef62169":"code","1da01114":"code","1f30da16":"code","9f5fd164":"code","ad381517":"code","4051e2ed":"code","6dd1036e":"code","23a08f11":"code","14411b8d":"code","d5f87765":"code","7e8d6e8e":"code","47777b8e":"code","997c6bff":"code","45b0ce7e":"code","5f48426a":"code","f07f2725":"code","ffba3ae5":"code","b62475e9":"code","74fa74cc":"code","a1f166cc":"code","5298adb6":"code","408b2fcf":"code","1bc430db":"code","f9bc0870":"code","9a41d7a7":"code","af5af97d":"code","7125e428":"code","2550cdc5":"code","76d56820":"code","de5532dc":"code","0768b10a":"code","bf5a1ae6":"code","a0db73c7":"code","76c4fb9c":"code","a85cb6ab":"code","1c9dfedd":"code","dee69e3d":"code","00e67b6c":"code","5de26bd5":"code","85e7bc84":"code","4ef074ef":"code","d6937169":"code","667b1411":"code","53eb640e":"code","9ad9622d":"code","ae55ab8e":"code","001171ed":"code","7af3dca4":"code","0d7123f2":"code","b8d785c3":"code","a75f1562":"code","6be15a7e":"code","0d928f9b":"code","eb912a5c":"code","94937fe5":"code","8e6f211f":"code","b58280d8":"code","932f9b99":"code","8dc83f3b":"code","75c9df1b":"code","47d8f5b9":"code","3b79bed6":"code","342b0810":"code","9f608a36":"code","6cdbfa94":"code","e86f0dac":"code","2c809ce7":"code","bd0fff1c":"code","1c8f2bdc":"code","c022b270":"code","958e9292":"code","edfbd06e":"code","1fc6d524":"code","f9cc68df":"code","09ee6d03":"code","5f4ad553":"code","eaf41ad6":"code","a4eb645a":"code","84d87525":"code","07cd9b76":"code","d982175c":"code","43558d8f":"code","0902d356":"code","79f75a88":"code","b79f0cbd":"code","c85cd2b4":"code","4fc8c796":"code","0e9dc125":"code","02635963":"code","c46e4ba5":"code","d8adfe11":"code","a3e13fb8":"code","18e37453":"code","cbb52c28":"code","f2f1256b":"code","7b09542f":"code","0d7b3998":"code","1071666b":"code","c571bcf8":"code","dfee446d":"markdown","8eb7d14d":"markdown","0d38a276":"markdown","cc295058":"markdown","bcbb8856":"markdown","066fd56f":"markdown"},"source":{"e744d348":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","872e0bd7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","60833410":"train_data = pd.read_csv('..\/input\/flight-fare\/Data_Train.csv')","9f2ea653":"pd.set_option('display.max_columns' , None)","fa1cc7e0":"train_data.head()","e75a49d4":"train_data.info()","8f4f96c6":"train_data['Duration'].value_counts()","23348399":"train_data.shape","a25bfd7d":"train_data.dropna(inplace = True)","a24ffab2":"train_data.shape","9cd5d98e":"train_data.isnull().sum()","96fde2ee":"train_data[\"Journey_day\"] = pd.to_datetime(train_data.Date_of_Journey, format=\"%d\/%m\/%Y\").dt.day","98f34607":"train_data[\"Journey_month\"] = pd.to_datetime(train_data[\"Date_of_Journey\"], format = \"%d\/%m\/%Y\").dt.month","08c7f8f0":"train_data.head()","6761bfda":"train_data.drop([\"Date_of_Journey\"], axis = 1, inplace = True)","69f0ec50":"train_data[\"Dep_hour\"] = pd.to_datetime(train_data[\"Dep_Time\"]).dt.hour","899fbedd":"train_data[\"Dep_min\"] = pd.to_datetime(train_data[\"Dep_Time\"]).dt.minute","4c953820":"train_data.head()","74d39183":"train_data.drop([\"Dep_Time\"], axis = 1, inplace = True)","98084e4d":"train_data[\"Arrival_hour\"] = pd.to_datetime(train_data.Arrival_Time).dt.hour","ef8ed473":"train_data[\"Arrival_min\"] = pd.to_datetime(train_data.Arrival_Time).dt.minute","90727d6d":"train_data.head()","36c09750":"train_data.drop([\"Arrival_Time\"], axis = 1, inplace = True)","f02f0e9f":"duration = list(train_data[\"Duration\"])","6c4b4cdf":"for i in range(len(duration)):\n    if len(duration[i].split()) != 2:    \n        if \"h\" in duration[i]:\n            duration[i] = duration[i].strip() + \" 0m\"   \n        else:\n            duration[i] = \"0h \" + duration[i]          \n\nduration_hours = []\nduration_mins = []\nfor i in range(len(duration)):\n    duration_hours.append(int(duration[i].split(sep = \"h\")[0])) \n    duration_mins.append(int(duration[i].split(sep = \"m\")[0].split()[-1]))","d44c3294":"train_data[\"Duration_hours\"] = duration_hours","24cab162":"train_data[\"Duration_mins\"] = duration_mins","23536bae":"train_data.head()","91728271":"train_data.drop([\"Duration\"], axis = 1, inplace = True)","1f05b2d1":"train_data[\"Airline\"].value_counts()","5ef62169":"sns.catplot(y = \"Price\", x = \"Airline\", data = train_data.sort_values(\"Price\", ascending = False), kind=\"boxen\",palette='Set3' ,height = 6, aspect = 3)\nplt.show()","1da01114":"Airline = train_data[[\"Airline\"]]\n\nAirline = pd.get_dummies(Airline, drop_first= True)\n\nAirline.head()","1f30da16":"train_data[\"Source\"].value_counts()","9f5fd164":"sns.catplot(y = \"Price\", x = \"Source\", data = train_data.sort_values(\"Price\", ascending = False), kind=\"boxen\",palette='Set3' , height = 4, aspect = 3)\nplt.show()","ad381517":"Source = train_data[[\"Source\"]]","4051e2ed":"Source = pd.get_dummies(Source, drop_first= True)","6dd1036e":"Source.head()","23a08f11":"train_data[\"Destination\"].value_counts()","14411b8d":"Destination = train_data[[\"Destination\"]]","d5f87765":"Destination = pd.get_dummies(Destination, drop_first = True)","7e8d6e8e":"Destination.head()","47777b8e":"train_data[\"Route\"]","997c6bff":"train_data.drop([\"Route\", \"Additional_Info\"], axis = 1, inplace = True)","45b0ce7e":"train_data[\"Total_Stops\"].value_counts()","5f48426a":"train_data.replace({\"non-stop\": 0, \"1 stop\": 1, \"2 stops\": 2, \"3 stops\": 3, \"4 stops\": 4}, inplace = True)","f07f2725":"train_data.head()","ffba3ae5":"data_train = pd.concat([train_data, Airline, Source, Destination], axis = 1)","b62475e9":"data_train.head()","74fa74cc":"data_train.drop([\"Airline\", \"Source\", \"Destination\"], axis = 1, inplace = True)","a1f166cc":"data_train.head()","5298adb6":"data_train.shape","408b2fcf":"test_data = pd.read_csv('..\/input\/flight-fare\/Test_set.csv')","1bc430db":"test_data.head()","f9bc0870":"test_data.info()","9a41d7a7":"test_data.dropna(inplace = True)","af5af97d":"print(test_data.isnull().sum())","7125e428":"test_data[\"Journey_day\"] = pd.to_datetime(test_data.Date_of_Journey, format=\"%d\/%m\/%Y\").dt.day","2550cdc5":"test_data[\"Journey_month\"] = pd.to_datetime(test_data[\"Date_of_Journey\"], format = \"%d\/%m\/%Y\").dt.month","76d56820":"test_data.drop([\"Date_of_Journey\"], axis = 1, inplace = True)","de5532dc":"test_data.head()","0768b10a":"test_data[\"Dep_hour\"] = pd.to_datetime(test_data[\"Dep_Time\"]).dt.hour","bf5a1ae6":"test_data[\"Dep_min\"] = pd.to_datetime(test_data[\"Dep_Time\"]).dt.minute","a0db73c7":"test_data.drop([\"Dep_Time\"], axis = 1, inplace = True)","76c4fb9c":"test_data.head()","a85cb6ab":"test_data[\"Arrival_hour\"] = pd.to_datetime(test_data.Arrival_Time).dt.hour\n","1c9dfedd":"test_data[\"Arrival_min\"] = pd.to_datetime(test_data.Arrival_Time).dt.minute","dee69e3d":"test_data.drop([\"Arrival_Time\"], axis = 1, inplace = True)","00e67b6c":"test_data.head()","5de26bd5":"duration = list(test_data[\"Duration\"])\n\nfor i in range(len(duration)):\n    if len(duration[i].split()) != 2:   \n        if \"h\" in duration[i]:\n            duration[i] = duration[i].strip() + \" 0m\"   \n        else:\n            duration[i] = \"0h \" + duration[i]          \n\nduration_hours = []\nduration_mins = []\nfor i in range(len(duration)):\n    duration_hours.append(int(duration[i].split(sep = \"h\")[0]))    \n    duration_mins.append(int(duration[i].split(sep = \"m\")[0].split()[-1]))   ","85e7bc84":"test_data[\"Duration_hours\"] = duration_hours","4ef074ef":"test_data[\"Duration_mins\"] = duration_mins","d6937169":"test_data.drop([\"Duration\"], axis = 1, inplace = True)","667b1411":"test_data.head()","53eb640e":"test_data[\"Airline\"].value_counts()","9ad9622d":"Airline = pd.get_dummies(test_data[\"Airline\"], drop_first= True)","ae55ab8e":"Airline.head()","001171ed":"test_data[\"Source\"].value_counts()","7af3dca4":"Source = pd.get_dummies(test_data[\"Source\"], drop_first= True)","0d7123f2":"Source","b8d785c3":"test_data[\"Destination\"].value_counts()","a75f1562":"Destination = pd.get_dummies(test_data[\"Destination\"], drop_first = True)","6be15a7e":"Destination.head()","0d928f9b":"test_data.drop([\"Route\", \"Additional_Info\"], axis = 1, inplace = True)","eb912a5c":"test_data.replace({\"non-stop\": 0, \"1 stop\": 1, \"2 stops\": 2, \"3 stops\": 3, \"4 stops\": 4}, inplace = True)","94937fe5":"data_test = pd.concat([test_data, Airline, Source, Destination], axis = 1)","8e6f211f":"data_test.head()","b58280d8":"data_test.shape","932f9b99":"data_test.drop([\"Airline\", \"Source\", \"Destination\"], axis = 1, inplace = True)","8dc83f3b":"data_test.head()","75c9df1b":"data_train.shape","47d8f5b9":"data_train.columns","3b79bed6":"X = data_train.loc[:, ['Total_Stops', 'Journey_day', 'Journey_month', 'Dep_hour',\n       'Dep_min', 'Arrival_hour', 'Arrival_min', 'Duration_hours',\n       'Duration_mins', 'Airline_Air India', 'Airline_GoAir', 'Airline_IndiGo',\n       'Airline_Jet Airways', 'Airline_Jet Airways Business',\n       'Airline_Multiple carriers',\n       'Airline_Multiple carriers Premium economy', 'Airline_SpiceJet',\n       'Airline_Trujet', 'Airline_Vistara', 'Airline_Vistara Premium economy',\n       'Source_Chennai', 'Source_Delhi', 'Source_Kolkata', 'Source_Mumbai',\n       'Destination_Cochin', 'Destination_Delhi', 'Destination_Hyderabad',\n       'Destination_Kolkata', 'Destination_New Delhi']]","342b0810":"X.head()","9f608a36":"y = data_train.iloc[:, 1]","6cdbfa94":"y.head()","e86f0dac":"plt.figure(figsize = (20,10))\nsns.heatmap(train_data.corr(), annot = True)\nplt.show()","2c809ce7":"from sklearn.ensemble import ExtraTreesRegressor","bd0fff1c":"selection = ExtraTreesRegressor()","1c8f2bdc":"selection.fit(X, y)","c022b270":"print(selection.feature_importances_)","958e9292":"plt.figure(figsize = (12,8))\nfeat_importances = pd.Series(selection.feature_importances_, index=X.columns)\nfeat_importances.nlargest(20).plot(kind='barh' , color ='lightblue')\nplt.show()","edfbd06e":"from sklearn.model_selection import train_test_split","1fc6d524":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","f9cc68df":"from sklearn.ensemble import RandomForestRegressor","09ee6d03":"reg_rf = RandomForestRegressor()","5f4ad553":"reg_rf.fit(X_train, y_train)","eaf41ad6":"y_pred = reg_rf.predict(X_test)","a4eb645a":"reg_rf.score(X_train, y_train)","84d87525":"reg_rf.score(X_test, y_test)","07cd9b76":"sns.distplot(y_test - y_pred , color ='red')\nplt.show()","d982175c":"plt.scatter(y_test, y_pred, alpha = 0.5 , color ='lightblue')\nplt.xlabel(\"y_test\")\nplt.ylabel(\"y_pred\")\nplt.show()","43558d8f":"from sklearn import metrics","0902d356":"print('MAE:', metrics.mean_absolute_error(y_test, y_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, y_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","79f75a88":"2090.5509\/(max(y)-min(y))","b79f0cbd":"metrics.r2_score(y_test, y_pred)","c85cd2b4":"n_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]","4fc8c796":"max_features = ['auto', 'sqrt']","0e9dc125":"max_depth = [int(x) for x in np.linspace(5, 30, num = 6)]","02635963":"min_samples_split = [2, 5, 10, 15, 100]","c46e4ba5":"min_samples_leaf = [1, 2, 5, 10]","d8adfe11":"random_grid = {'n_estimators': n_estimators,'max_features': max_features,'max_depth': max_depth,'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}","a3e13fb8":"from sklearn.model_selection import RandomizedSearchCV","18e37453":"rf_random = RandomizedSearchCV(estimator = reg_rf, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)","cbb52c28":"rf_random.fit(X_train,y_train)","f2f1256b":"rf_random.best_params_","7b09542f":"prediction = rf_random.predict(X_test)","0d7b3998":"plt.figure(figsize = (8,8))\nsns.distplot(y_test-prediction , color='red')\nplt.show()","1071666b":"plt.figure(figsize = (8,8))\nplt.scatter(y_test, prediction, alpha = 0.5 , color ='lightblue')\nplt.xlabel(\"y_test\")\nplt.ylabel(\"y_pred\")\nplt.show()","c571bcf8":"print('MAE:', metrics.mean_absolute_error(y_test, prediction))\nprint('MSE:', metrics.mean_squared_error(y_test, prediction))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, prediction)))","dfee446d":"# FEATURE SELECTION:","8eb7d14d":"# HANDLING CATEGORICAL DATA:","0d38a276":"# HYPERPARAMETER TUNING:","cc295058":"# IMPORT DATASET","bcbb8856":"# IMPORT MODULES:","066fd56f":"# TEST DATA:"}}