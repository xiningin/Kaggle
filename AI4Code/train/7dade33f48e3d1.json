{"cell_type":{"e96f3ef5":"code","ebc55d56":"code","28559624":"code","fc111379":"code","5233aec6":"code","0e6f5df9":"code","2b8ecd00":"code","b4fbec12":"code","356a8985":"code","faf08259":"code","45dd902c":"code","6728ad92":"code","f5f1c3db":"code","8544ea84":"code","a5bba152":"code","09b271b5":"code","cd4578d4":"code","f621cfc8":"code","ed8e60ae":"code","2066f51b":"code","695ab8de":"code","142c98a8":"code","e18836eb":"code","201567b4":"code","8144ac6c":"code","16a1ca18":"code","c56cff93":"code","68bcfce4":"code","448b10ce":"code","3ad550fb":"code","c1b6677d":"code","3cb64f4d":"code","a74971c9":"code","99731c78":"code","24574548":"code","8b125caf":"code","5a456f55":"code","bdd4a272":"code","55305b3e":"code","89b0beed":"code","f8b0b9c8":"code","af51237b":"code","dfccb0db":"code","bb5a3882":"code","39cb9e3d":"code","a6806cb2":"code","a8b18905":"code","fcd3a393":"code","801e5a71":"markdown","cff12af3":"markdown","de59e57a":"markdown","56567ad4":"markdown","53bd4e57":"markdown","79f6598b":"markdown","3258ba04":"markdown","5a113dcf":"markdown","b0a00e92":"markdown","f4dadf1f":"markdown","553f04d3":"markdown","6d563963":"markdown","7ae86f1e":"markdown","a28a89a4":"markdown","3e6ffda8":"markdown","f6bf5d16":"markdown","24b5b5e5":"markdown","54c1272d":"markdown","fae6d72d":"markdown","990af64e":"markdown","6cd4042d":"markdown","c15d0d8e":"markdown"},"source":{"e96f3ef5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime as dt\nfrom sklearn import linear_model, svm\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.impute import SimpleImputer\nfrom plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode()\nimport plotly.graph_objs as go\nfrom plotly.graph_objs import Scatter, Figure, Layout\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ebc55d56":"dados_marco = pd.read_csv(\n    \"..\/input\/2290_01032018_31032018.csv\",\n    delimiter=\",\",\n    dtype = {\n        \"numero_de_serie\":int,\n        \"milissegundo\":int,\n        \"faixa\":int,\n        \"velocidade_entrada\":int,\n        \"velocidade_saida\":int,\n        \"classificacao\":int,\n        \"tamanho\": float,\n        \"placa\":str,\n        \"tempo_ocupacao_laco\":int\n    },\n    parse_dates=[\"data_hora\"]\n)","28559624":"dados_abril = pd.read_csv(\n    \"..\/input\/2290_01042018_30042018.csv\",\n    delimiter=\",\",\n    dtype = {\n        \"numero_de_serie\":int,\n        \"milissegundo\":int,\n        \"faixa\":int,\n        \"velocidade_entrada\":int,\n        \"velocidade_saida\":int,\n        \"classificacao\":int,\n        \"tamanho\": float,\n        \"placa\":str,\n        \"tempo_ocupacao_laco\":int\n    },\n    parse_dates=[\"data_hora\"]\n)","fc111379":"dados_geral = pd.DataFrame()\ndados_geral = dados_geral.append(dados_marco)\ndados_geral = dados_geral.append(dados_abril)","5233aec6":"dados_prova = pd.read_csv(\n    \"..\/input\/2290_01052016_31052016.csv\",\n    delimiter=\",\",\n    dtype = {\n        \"numero_de_serie\":int,\n        \"milissegundo\":int,\n        \"faixa\":int,\n        \"velocidade_entrada\":int,\n        \"velocidade_saida\":int,\n        \"classificacao\":int,\n        \"tamanho\": float,\n        \"placa\":str,\n        \"tempo_ocupacao_laco\":int\n    },\n    parse_dates=[\"data_hora\"]\n)","0e6f5df9":"def AvgSpeed(serie):\n    if len(serie) == 0:\n        return 0\n    else:\n        return np.round(len(serie)\/(sum(1\/serie)),2)","2b8ecd00":"def VelocidadeFaixa(base_dados, dia, faixa, intervalo):\n    if dia > -1 and dia < 7 and faixa > 0:\n        base_dados[\"dia_semana\"] = base_dados[\"data_hora\"].dt.dayofweek\n        dados_calc = base_dados[base_dados['faixa'] == faixa].copy()\n        dados_calc = dados_calc[dados_calc['dia_semana'] == dia]\n        dados_calc = dados_calc[np.isfinite(dados_calc['velocidade_entrada'])]\n        dados_calc['velocidade_km'] = np.round(dados_calc['velocidade_entrada'],2)\n        dados_calc = dados_calc.query('velocidade_km > 0 & velocidade_km < 150')\n        tabela = dados_calc.set_index(\"data_hora\", inplace = True, drop = True)\n        tabela = dados_calc.resample(\"%dT\" % intervalo, label = \"left\", closed = \"right\")\n        tabela_agregada = tabela.agg(\n            {\n                \"velocidade_km\" : AvgSpeed\n            }\n        ).rename(\n            columns={\n                \"velocidade_km\" : \"velocidade_media_km\"\n            }\n        )\n        return TabelaDePrevisao(tabela_agregada, intervalo, dia)\n    else:\n        return None","b4fbec12":"def TabelaDePrevisao(dados, intervalo, dia_semana):\n    dados = Filtrar(dados, dia_semana)\n    tabela = pd.DataFrame()\n    tabela['vel_atual'] = dados['velocidade_media_km']\n    tabela['vel+1'] = dados['velocidade_media_km'].shift(-1)\n    tabela['vel+2'] = dados['velocidade_media_km'].shift(-2)\n    tabela['vel+3'] = dados['velocidade_media_km'].shift(-3)\n    tabela['vel-3'] = dados['velocidade_media_km'].shift(3)\n    tabela['vel-4'] = dados['velocidade_media_km'].shift(4)\n    tabela['vel-5'] = dados['velocidade_media_km'].shift(5)\n    tabela['semana_anterior'] = dados['velocidade_media_km'].shift(int((60 \/ intervalo) * 24))\n    tabela['semana_anterior-1'] = dados['velocidade_media_km'].shift(int((60 \/ intervalo) * 24) + 1)\n    tabela_filtrada = Filtrar(tabela, dia_semana)\n    return tabela_filtrada","356a8985":"def Filtrar(dados, dia_semana):\n    dados_filtrado = dados[np.isfinite(dados)]\n    dados_filtrado['dia_semana'] = dados_filtrado.index.get_level_values('data_hora').dayofweek\n    dados_filtrado = dados_filtrado[dados_filtrado.index.dayofweek == dia_semana]\n    dados_filtrado = dados_filtrado.drop('dia_semana', axis=1)\n    return dados_filtrado","faf08259":"def GraficoCompara(tabela, indice) :\n    grafico = []\n    dias = np.unique(tabela.index.get_level_values('dataHoraConsulta').day)\n    tabela_grafico = tabela[tabela.index.get_level_values('dataHoraConsulta').day == dias[indice]]\n    trace = go.Scatter(\n        x = tabela_grafico.index.get_level_values('dataHoraConsulta').time,\n        y = tabela_grafico['ValorAtual'],\n        mode = \"lines\",\n        name = \"Velocidade - dia %s\" % dias[indice]\n    )\n    trace1 = go.Scatter(\n        x = tabela_grafico.index.get_level_values('dataHoraConsulta').time,\n        y = tabela_grafico['PrevisaoDez'],\n        mode = \"lines\",\n        name = \"Previs\u00e3o - 10 min\"\n    )\n    trace2 = go.Scatter(\n        x = tabela_grafico.index.get_level_values('dataHoraConsulta').time,\n        y = tabela_grafico['PrevisaoVinte'],\n        mode = \"lines\",\n        name = \"Previs\u00e3o - 20 min\"\n    )\n    trace3 = go.Scatter(\n        x = tabela_grafico.index.get_level_values('dataHoraConsulta').time,\n        y = tabela_grafico['PrevisaoTrinta'],\n        mode = \"lines\",\n        name = \"Previs\u00e3o - 30 min\"\n    )\n    grafico = [trace, trace1, trace2, trace3]\n    layout = Layout(\n        title = \"Previs\u00e3o de Velocidade M\u00e9dia\",\n        xaxis=dict(title=\"Tempo\"),\n        yaxis=dict(title=\"Velocidade M\u00e9dia [km\/h]\")\n    )\n    graph = Figure(data = grafico, layout = layout)\n    return graph","45dd902c":"def Grafico(predicao,indice) :\n    grafico = []\n    dias = np.unique(predicao.index.get_level_values('data_hora').day)\n    tabela_grafico = predicao[predicao.index.get_level_values('data_hora').day == dias[indice]]\n    trace = go.Scatter(\n        x = tabela_grafico.index.get_level_values('data_hora').time,\n        y = tabela_grafico['velAtual'],\n        mode = \"lines\",\n        name = \"Velocidade - dia %s\" % dias[indice]\n    )\n    grafico.append(trace)\n    predicao_grafico = predicao[predicao.index.get_level_values('data_hora').day == dias[indice]]\n    trace = go.Scatter(\n        x = predicao_grafico.index.get_level_values('data_hora').time,\n        y =predicao_grafico['Vel+1'],\n        mode = \"lines\",\n        name = \"Predi\u00e7\u00e3o - 10min\" % dias[indice]\n    )\n    grafico.append(trace)\n    trace = go.Scatter(\n        x = predicao_grafico.index.get_level_values('data_hora').time,\n        y =predicao_grafico['Vel+2'],\n        mode = \"lines\",\n        name = \"Predi\u00e7\u00e3o - 20min\" % dias[indice]\n    )\n    grafico.append(trace)\n    trace = go.Scatter(\n        x = predicao_grafico.index.get_level_values('data_hora').time,\n        y =predicao_grafico['Vel+3'],\n        mode = \"lines\",\n        name = \"Predi\u00e7\u00e3o - 30min\" % dias[indice]\n    )\n    grafico.append(trace)\n    layout = Layout(\n        title = \"Previs\u00e3o de Velocidade M\u00e9dia\",\n        xaxis=dict(title=\"Tempo\"),\n        yaxis=dict(title=\"Velocidade M\u00e9dia [km\/h]\")\n    )\n    graph = Figure(data = grafico, layout = layout)\n    return graph","6728ad92":"def Impute(tab_treino, tab_teste):\n    imputer = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\n    iTreino = imputer.fit_transform(tab_treino)\n    iTeste = imputer.transform(tab_teste)\n    return iTreino, iTeste","f5f1c3db":"def XYArraySplit(tab_treino, tab_teste):\n    x = pd.DataFrame()\n    X = pd.DataFrame()\n    y = pd.DataFrame()\n    Y = pd.DataFrame()\n    \n    y['velAtual'] = [row[0] for row in tab_treino]\n    y['vel+1'] = [row[1] for row in tab_treino]\n    y['vel+2'] = [row[2] for row in tab_treino]\n    y['vel+3'] = [row[3] for row in tab_treino]\n    Y['velAtual'] = [row[0] for row in tab_teste]\n    Y['vel+1'] = [row[1] for row in tab_teste]\n    Y['vel+2'] = [row[2] for row in tab_teste]\n    Y['vel+3'] = [row[3] for row in tab_teste]\n    x['vel-3'] = [row[4] for row in tab_treino]\n    x['vel-4'] = [row[5] for row in tab_treino]\n    x['vel-5'] = [row[6] for row in tab_treino]\n    x['semana_anterior'] = [row[7] for row in tab_treino]\n    x['semana_anterior-1'] = [row[8] for row in tab_treino]\n    X['vel-3'] = [row[4] for row in tab_teste]\n    X['vel-4'] = [row[5] for row in tab_teste]\n    X['vel-5'] = [row[6] for row in tab_teste]\n    X['semana_anterior'] = [row[7] for row in tab_teste]\n    X['semana_anterior-1'] = [row[8] for row in tab_teste]\n    \n    return x, y, X, Y","8544ea84":"def RegressaoMes(x_treino, x_teste, y_treino, y_teste) :    \n    regr = linear_model.LinearRegression()\n    regr.fit(x_treino, y_treino)\n    y_predissao = pd.DataFrame()\n    y_predissao['valor'] = regr.predict(x_teste)\n    print(r2_score(y_teste, y_predissao['valor']))\n    return y_predissao","a5bba152":"def RegressaoRidge(x_treino, x_teste, y_treino, y_teste) :    \n    regr = linear_model.Ridge(alpha = 0.01, fit_intercept = False)\n    regr.fit(x_treino, y_treino)\n    y_predissao = pd.DataFrame()\n    y_predissao['valor'] = regr.predict(x_teste)\n    print(r2_score(y_teste, y_predissao['valor']))\n    return y_predissao","09b271b5":"def Lasso(x_treino, x_teste, y_treino, y_teste) :    \n    a = 0.1\n    lasso = linear_model.Lasso(alpha = 0.01)\n    lasso.fit(x_treino, y_treino)\n    y_predissao = pd.DataFrame()\n    y_predissao['valor'] = lasso.predict(x_teste)\n    print(r2_score(y_teste, y_predissao['valor']))\n    \n    return y_predissao","cd4578d4":"def ENet(x_treino, x_teste, y_treino, y_teste) :    \n    a = 0.1\n    enet = linear_model.ElasticNet(alpha = 0.01, l1_ratio = 0.01)\n    enet.fit(x_treino, y_treino)\n    y_predissao = pd.DataFrame()\n    y_predissao['valor'] = enet.predict(x_teste)\n    print(r2_score(y_teste, y_predissao['valor']))\n    \n    return y_predissao","f621cfc8":"def LARS(x_treino, x_teste, y_treino, y_teste) :    \n    lars = linear_model.Lars(precompute = 'auto')\n    lars.fit(x_treino, y_treino)\n    y_predissao = pd.DataFrame()\n    y_predissao['valor'] = lars.predict(x_teste)\n    print(r2_score(y_teste, y_predissao['valor']))\n    \n    return y_predissao","ed8e60ae":"def SVR(x_treino, x_teste, y_treino, y_teste) :    \n    svr = svm.SVR(gamma = 'scale')\n    svr.fit(x_treino, y_treino)\n    y_predissao = pd.DataFrame()\n    y_predissao['valor'] = svr.predict(x_teste)\n    print(r2_score(y_teste, y_predissao['valor']))\n    \n    return y_predissao","2066f51b":"def LSVR(x_treino, x_teste, y_treino, y_teste) :    \n    lsvr = svm.LinearSVR(max_iter = 10000)\n    lsvr.fit(x_treino, y_treino)\n    y_predissao = pd.DataFrame()\n    y_predissao['valor'] = lsvr.predict(x_teste)\n    print(r2_score(y_teste, y_predissao['valor']))\n    \n    return y_predissao","695ab8de":"def PRidge(x_treino, x_teste, y_treino, y_teste) :    \n    ridge = make_pipeline(PolynomialFeatures(1), linear_model.Ridge())\n    ridge.fit(x_treino, y_treino)\n    y_predissao = pd.DataFrame()\n    y_predissao['valor'] = ridge.predict(x_teste)\n    print(r2_score(y_teste, y_predissao['valor']))\n    \n    return y_predissao","142c98a8":"def PSVR(x_treino, x_teste, y_treino, y_teste, grau) :  \n    svr = make_pipeline(PolynomialFeatures(grau), svm.SVR(gamma = 'auto'))\n    svr.fit(x_treino, y_treino)\n    y_predissao = pd.DataFrame()\n    y_predissao['valor'] = svr.predict(x_teste)\n    print(r2_score(y_teste, y_predissao['valor']))\n    \n    return y_predissao","e18836eb":"def PRegressao(x_treino, x_teste, y_treino, y_teste, grau):\n    reg = make_pipeline(PolynomialFeatures(grau), linear_model.LinearRegression())\n    reg.fit(x_treino, y_treino)\n    y_predissao = pd.DataFrame()\n    y_predissao['valor'] = reg.predict(x_teste)\n    print(r2_score(y_teste, y_predissao['valor']))\n    return y_predissao","201567b4":"def PreverRegressao(tabela_treino, tabela_teste) :\n    tabela_treino_filtrada, tabela_teste_filtrada = Impute(tabela_treino, tabela_teste)\n    predissao = pd.DataFrame()\n    x_treino, y_treino, x_teste, y_teste = XYArraySplit(tabela_treino_filtrada, tabela_teste_filtrada)\n    predissao['velAtual'] = y_teste['velAtual']\n    predissao[\"Vel+1\"] = np.round(RegressaoMes(x_treino, x_teste, y_treino[\"vel+1\"], y_teste[\"vel+1\"]), 2)\n    predissao[\"Vel+2\"] = np.round(RegressaoMes(x_treino, x_teste, y_treino[\"vel+2\"], y_teste[\"vel+2\"]), 2)\n    predissao[\"Vel+3\"] = np.round(RegressaoMes(x_treino, x_teste, y_treino[\"vel+3\"], y_teste[\"vel+3\"]), 2)\n    predissao.set_index(tabela_teste.index, inplace = True, drop = False)\n    return predissao","8144ac6c":"def PreverRidge(tabela_treino, tabela_teste) :\n    tabela_treino_filtrada, tabela_teste_filtrada = Impute(tabela_treino, tabela_teste)\n    predissao = pd.DataFrame()\n    x_treino, y_treino, x_teste, y_teste = XYArraySplit(tabela_treino_filtrada, tabela_teste_filtrada)\n    predissao['velAtual'] = y_teste['velAtual']\n    predissao[\"Vel+1\"] = np.round(PRidge(x_treino, x_teste, y_treino[\"vel+1\"], y_teste[\"vel+1\"]), 2)\n    predissao[\"Vel+2\"] = np.round(PRidge(x_treino, x_teste, y_treino[\"vel+2\"], y_teste[\"vel+2\"]), 2)\n    predissao[\"Vel+3\"] = np.round(PRidge(x_treino, x_teste, y_treino[\"vel+3\"], y_teste[\"vel+3\"]), 2)\n    predissao.set_index(tabela_teste.index, inplace = True, drop = False)\n    return predissao","16a1ca18":"def PreverLasso(tabela_treino, tabela_teste) :\n    tabela_treino_filtrada, tabela_teste_filtrada = Impute(tabela_treino, tabela_teste)\n    predissao = pd.DataFrame()\n    x_treino, y_treino, x_teste, y_teste = XYArraySplit(tabela_treino_filtrada, tabela_teste_filtrada)\n    predissao['velAtual'] = y_teste['velAtual']\n    predissao[\"Vel+1\"] = np.round(Lasso(x_treino, x_teste, y_treino[\"vel+1\"], y_teste[\"vel+1\"]), 2)\n    predissao[\"Vel+2\"] = np.round(Lasso(x_treino, x_teste, y_treino[\"vel+2\"], y_teste[\"vel+2\"]), 2)\n    predissao[\"Vel+3\"] = np.round(Lasso(x_treino, x_teste, y_treino[\"vel+3\"], y_teste[\"vel+3\"]), 2)\n    predissao.set_index(tabela_teste.index, inplace = True, drop = False)\n    return predissao","c56cff93":"def PreverENet(tabela_treino, tabela_teste) :\n    tabela_treino_filtrada, tabela_teste_filtrada = Impute(tabela_treino, tabela_teste)\n    predissao = pd.DataFrame()\n    x_treino, y_treino, x_teste, y_teste = XYArraySplit(tabela_treino_filtrada, tabela_teste_filtrada)\n    predissao['velAtual'] = y_teste['velAtual']\n    predissao[\"Vel+1\"] = np.round(ENet(x_treino, x_teste, y_treino[\"vel+1\"], y_teste[\"vel+1\"]), 2)\n    predissao[\"Vel+2\"] = np.round(ENet(x_treino, x_teste, y_treino[\"vel+2\"], y_teste[\"vel+2\"]), 2)\n    predissao[\"Vel+3\"] = np.round(ENet(x_treino, x_teste, y_treino[\"vel+3\"], y_teste[\"vel+3\"]), 2)\n    predissao.set_index(tabela_teste.index, inplace = True, drop = False)\n    return predissao","68bcfce4":"def PreverLARS(tabela_treino, tabela_teste) :\n    tabela_treino_filtrada, tabela_teste_filtrada = Impute(tabela_treino, tabela_teste)\n    predissao = pd.DataFrame()\n    x_treino, y_treino, x_teste, y_teste = XYArraySplit(tabela_treino_filtrada, tabela_teste_filtrada)\n    predissao['velAtual'] = y_teste['velAtual']\n    predissao[\"Vel+1\"] = np.round(LARS(x_treino, x_teste, y_treino[\"vel+1\"], y_teste[\"vel+1\"]), 2)\n    predissao[\"Vel+2\"] = np.round(LARS(x_treino, x_teste, y_treino[\"vel+2\"], y_teste[\"vel+2\"]), 2)\n    predissao[\"Vel+3\"] = np.round(LARS(x_treino, x_teste, y_treino[\"vel+3\"], y_teste[\"vel+3\"]), 2)\n    predissao.set_index(tabela_teste.index, inplace = True, drop = False)\n    return predissao","448b10ce":"def PreverSVR(tabela_treino, tabela_teste) :\n    tabela_treino_filtrada, tabela_teste_filtrada = Impute(tabela_treino, tabela_teste)\n    predissao = pd.DataFrame()\n    x_treino, y_treino, x_teste, y_teste = XYArraySplit(tabela_treino_filtrada, tabela_teste_filtrada)\n    predissao['velAtual'] = y_teste['velAtual']\n    predissao[\"Vel+1\"] = np.round(SVR(x_treino, x_teste, y_treino[\"vel+1\"], y_teste[\"vel+1\"]), 2)\n    predissao[\"Vel+2\"] = np.round(SVR(x_treino, x_teste, y_treino[\"vel+2\"], y_teste[\"vel+2\"]), 2)\n    predissao[\"Vel+3\"] = np.round(SVR(x_treino, x_teste, y_treino[\"vel+3\"], y_teste[\"vel+3\"]), 2)\n    predissao.set_index(tabela_teste.index, inplace = True, drop = False)\n    return predissao","3ad550fb":"def PreverLSVR(tabela_treino, tabela_teste) :\n    tabela_treino_filtrada, tabela_teste_filtrada = Impute(tabela_treino, tabela_teste)\n    predissao = pd.DataFrame()\n    x_treino, y_treino, x_teste, y_teste = XYArraySplit(tabela_treino_filtrada, tabela_teste_filtrada)\n    predissao['velAtual'] = y_teste['velAtual']\n    predissao[\"Vel+1\"] = np.round(LSVR(x_treino, x_teste, y_treino[\"vel+1\"], y_teste[\"vel+1\"]), 2)\n    predissao[\"Vel+2\"] = np.round(LSVR(x_treino, x_teste, y_treino[\"vel+2\"], y_teste[\"vel+2\"]), 2)\n    predissao[\"Vel+3\"] = np.round(LSVR(x_treino, x_teste, y_treino[\"vel+3\"], y_teste[\"vel+3\"]), 2)\n    predissao.set_index(tabela_teste.index, inplace = True, drop = False)\n    return predissao","c1b6677d":"def PreverPSVR(tabela_treino, tabela_teste, grau) :\n    tabela_treino_filtrada, tabela_teste_filtrada = Impute(tabela_treino, tabela_teste)\n    predissao = pd.DataFrame()\n    x_treino, y_treino, x_teste, y_teste = XYArraySplit(tabela_treino_filtrada, tabela_teste_filtrada)\n    predissao['velAtual'] = y_teste['velAtual']\n    predissao[\"Vel+1\"] = np.round(PSVR(x_treino, x_teste, y_treino[\"vel+1\"], y_teste[\"vel+1\"], grau), 2)\n    predissao[\"Vel+2\"] = np.round(PSVR(x_treino, x_teste, y_treino[\"vel+2\"], y_teste[\"vel+2\"], grau), 2)\n    predissao[\"Vel+3\"] = np.round(PSVR(x_treino, x_teste, y_treino[\"vel+3\"], y_teste[\"vel+3\"], grau), 2)\n    predissao.set_index(tabela_teste.index, inplace = True, drop = False)\n    return predissao","3cb64f4d":"def PreverPRegressao(tabela_treino, tabela_teste, grau) :\n    tabela_treino_filtrada, tabela_teste_filtrada = Impute(tabela_treino, tabela_teste)\n    predissao = pd.DataFrame()\n    x_treino, y_treino, x_teste, y_teste = XYArraySplit(tabela_treino_filtrada, tabela_teste_filtrada)\n    predissao['velAtual'] = y_teste['velAtual']\n    predissao[\"Vel+1\"] = np.round(PRegressao(x_treino, x_teste, y_treino[\"vel+1\"], y_teste[\"vel+1\"], grau), 2)\n    predissao[\"Vel+2\"] = np.round(PRegressao(x_treino, x_teste, y_treino[\"vel+2\"], y_teste[\"vel+2\"], grau), 2)\n    predissao[\"Vel+3\"] = np.round(PRegressao(x_treino, x_teste, y_treino[\"vel+3\"], y_teste[\"vel+3\"], grau), 2)\n    predissao.set_index(tabela_teste.index, inplace = True, drop = False)\n    return predissao","a74971c9":"faixa = 3\ndia = 6\nintervalo = 10\n\ntabela_treino = VelocidadeFaixa(dados_marco, dia, faixa, intervalo)\ntabela_teste = VelocidadeFaixa(dados_abril, dia, faixa, intervalo)","99731c78":"grau = 1\npredissao_abril = PreverPRegressao(tabela_treino, tabela_teste, grau)\niplot(Grafico(predissao_abril, 4))","24574548":"predissao_abril.head()","8b125caf":"predissao_abril_ridge = PreverRidge(tabela_treino, tabela_teste)\niplot(Grafico(predissao_abril_ridge, 1))","5a456f55":"predissao_abril_ridge.head()","bdd4a272":"predissao_abril_lasso = PreverLasso(tabela_treino, tabela_teste)\niplot(Grafico(predissao_abril_lasso, 1))","55305b3e":"predissao_abril_lasso.head()","89b0beed":"predissao_abril_enet = PreverENet(tabela_treino, tabela_teste)\niplot(Grafico(predissao_abril_enet, 1))","f8b0b9c8":"predissao_abril_enet.head()","af51237b":"predissao_abril_lars = PreverLARS(tabela_treino, tabela_teste)\niplot(Grafico(predissao_abril_lars, 1))","dfccb0db":"predissao_abril_lars.head()","bb5a3882":"grau = 1\npredissao_svr = PreverPSVR(tabela_treino, tabela_teste, grau)\niplot(Grafico(predissao_svr, 1))","39cb9e3d":"predissao_svr.head()","a6806cb2":"predissao_lsvr = PreverLSVR(tabela_treino, tabela_teste)\niplot(Grafico(predissao_lsvr, 1))","a8b18905":"predissao_lsvr.head()","fcd3a393":"dados_compara = pd.read_csv(\n    \"..\/input\/2290_01042018_30042018_SPEED_FORECASTS.csv\",\n    delimiter=\",\",\n        dtype = {\n            \"intervalo\":float,\n            \"ValorHistorico\":float,\n            \"ValorAtual\":float,\n            \"PrevisaoDez\":float,\n            \"PrevisaoVinte\":float,\n            \"PrevisaoTrinta\":float\n        },\n    parse_dates=[\"dataHoraConsulta\"])\ndados_compara.set_index(\"dataHoraConsulta\", inplace=True, drop=True)\ntab_10 = pd.DataFrame()\ntab_10['ValorAtual'] = dados_compara['ValorAtual']\ntab_10['PrevisaoDez'] = dados_compara['PrevisaoDez']\ntab_10['PrevisaoVinte'] = dados_compara['PrevisaoVinte']\ntab_10['PrevisaoTrinta'] = dados_compara['PrevisaoTrinta']\ntab_10 = tab_10[tab_10['PrevisaoDez'] > 0]\ntab_10 = tab_10[tab_10['PrevisaoVinte'] > 0]\ntab_10 = tab_10[tab_10['PrevisaoTrinta'] > 0]\nprint(r2_score(tab_10['ValorAtual'].shift(-1).fillna(np.mean(tab_10[\"ValorAtual\"])), tab_10['PrevisaoDez']))\nprint(r2_score(tab_10['ValorAtual'].shift(-2).fillna(np.mean(tab_10[\"ValorAtual\"])), tab_10['PrevisaoVinte']))\nprint(r2_score(tab_10['ValorAtual'].shift(-3).fillna(np.mean(tab_10[\"ValorAtual\"])), tab_10['PrevisaoTrinta']))\niplot(GraficoCompara(dados_compara, 6))","801e5a71":"* Rede El\u00e1stica","cff12af3":"**Previs\u00e3o com Regress\u00e3o Linear (Treinamento de um m\u00eas)**","de59e57a":"**Previs\u00e3o com Regress\u00e3o Linear (Treinamento de uma semana)**","56567ad4":"* Ridge Regression","53bd4e57":"* LARS","79f6598b":"**Fun\u00e7\u00f5es para Previs\u00e3o**","3258ba04":"**M\u00e9todos Pr\u00e9-previs\u00e3o**","5a113dcf":"**Compara\u00e7\u00e3o de Prediss\u00f5es**","b0a00e92":"**Previs\u00e3o com LARS**","f4dadf1f":"**Previs\u00e3o com SVR**","553f04d3":"**Previs\u00e3o com Ridge**","6d563963":"* Regress\u00e3o Lasso","7ae86f1e":"* LSVR","a28a89a4":"**Previs\u00e3o por Rede El\u00e1stica**","3e6ffda8":"**Previs\u00e3o com SVR Linear**","f6bf5d16":"* Ridge Polinomial","24b5b5e5":"**Previs\u00e3o com Lasso**","54c1272d":"**Montar tabela para Previs\u00e3o**","fae6d72d":"**Fun\u00e7\u00f5es para montagem de Gr\u00e1ficos**","990af64e":"**Calcular Velocidade m\u00e9dia  por faixa**","6cd4042d":"* SVR","c15d0d8e":"**Estrat\u00e9gias para Previs\u00e3o de Dados**\n* Regress\u00e3o Linear"}}