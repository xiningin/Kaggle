{"cell_type":{"858c1af9":"code","6edaa27b":"code","e8f1927f":"code","8bcb7b0a":"code","ce99cf89":"code","f45153db":"code","f2fda7ad":"code","b4cf74aa":"code","4fe82179":"code","79f18dba":"code","431355b7":"code","6c35e361":"code","8e6daca3":"code","1b18f8d3":"code","095eb367":"code","a14c5b64":"code","4b0d5c17":"code","dad0c92a":"code","4dab9b80":"code","6a512f3d":"code","25484e36":"code","c436d4e3":"code","bc634666":"code","11d42e5d":"code","4c5ccd7f":"code","4546b9ab":"markdown","1beff997":"markdown","7149f7fa":"markdown"},"source":{"858c1af9":"import os\nimport warnings\nfrom pathlib import Path\n\nimport tsfresh\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\nfrom sklearn.feature_selection import mutual_info_classif\nfrom tsfresh.utilities.dataframe_functions import impute\nfrom tsfresh import extract_features, extract_relevant_features\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler\nfrom lightgbm import LGBMClassifier\n\nwarnings.simplefilter(action='ignore', category=FutureWarning)","6edaa27b":"ROOT_TRAIN = Path('..\/input\/data-science-spring-osaka-2021')\n\n# \u4e00\u89a7\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\ndf_train = pd.read_csv('..\/input\/data-science-spring-osaka-2021\/train.csv')\ndf_test = pd.read_csv('..\/input\/data-science-spring-osaka-2021\/test.csv')\ndf_action = pd.read_csv('..\/input\/data-science-spring-osaka-2021\/actions.csv')","e8f1927f":"# \u5f8c\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\u3068\u3057\u3066\u30d5\u30a3\u30eb\u540d\u3092\u6e96\u5099\ndf_train['filename'] = df_train['file_path'].apply(lambda x: x.split('\/', -1)[-1])","8bcb7b0a":"# train \u3068 test \u30d5\u30a9\u30eb\u30c0\u4e8c\u3064\u3042\u308a\u307e\u3059\u2190\u7d50\u5408\u5bfe\u8c61\n!ls -l {ROOT_TRAIN}","ce99cf89":"# \u7d50\u5408\u5bfe\u8c61\u306e\u30ea\u30b9\u30c8\u3092\u751f\u6210\n# https:\/\/stackoverflow.com\/a\/56883447\/5990952\nlist_train = sorted((ROOT_TRAIN\/'train').glob('*.csv'))\nlist_test = sorted((ROOT_TRAIN\/'test').glob('*.csv'))","f45153db":"# \u7d50\u5408\u7528\u306e\u30e1\u30bd\u30c3\u30c9\u3001\u4eca\u56de\u30d5\u30a1\u30a4\u30eb\u6570\u5c11\u306a\u3044\uff06\u30b5\u30a4\u30ba\u5c0f\u3055\u3044\u306e\u3067\u3001\u4e26\u5217\u51e6\u7406\u3092\u8003\u3048\u305a\u306b\u3059\u308b\ndef get_data(list_files):\n    dfs = []\n    for file in list_files:\n        df = pd.read_csv(file)\n        df['filename'] = file.name\n        dfs.append(df)\n    return pd.concat(dfs)","f2fda7ad":"%%time\ndf_sensor_train = get_data(list_train)\ndf_sensor_test = get_data(list_test)\n# train \/ test \u3092\u660e\u793a\ndf_sensor_train['type'] = 'train'\ndf_sensor_test['type'] = 'test'\nprint(\"\u5b66\u7fd2\", df_sensor_train.shape, \"\u30c6\u30b9\u30c8\", df_sensor_test.shape)\n# \u4e00\u3064\u306b\u7d50\u5408\u3059\u308b\ndf_sensor = pd.concat([df_sensor_train, df_sensor_test], ignore_index=True)\n# \u30e9\u30d9\u30eb\u3068\u7d50\u5408\ndf_sensor = pd.merge(df_sensor, df_train[['action_seq', 'filename']], on='filename', how='left')\n## \u30c6\u30b9\u30c8\u3092\"test\"\u3068\u3057\u3066\u88dc\u9593\ndf_sensor['action_seq'] = df_sensor['action_seq'].fillna('test')\nprint(\"\u5168\u4f53\", df_sensor.shape)","b4cf74aa":"df_sensor_train.head()","4fe82179":"df_features_train = extract_features(df_sensor_train.iloc[:,:-1], column_id='filename', column_sort='Time', n_jobs=os.cpu_count())","79f18dba":"df_features_train.shape","431355b7":"df_train.head()","6c35e361":"df_features_train.head()","8e6daca3":"_ = impute(df_features_train)","1b18f8d3":"%%time\n# \u95a2\u9023\u3059\u308b\u7279\u5fb4\u91cf\u3092\u62bd\u51fa\nfeature_scores = mutual_info_classif(df_features_train, df_train['action_seq'], random_state=71)","095eb367":"# \u4e0a\u4f4d\u306e\u7279\u5fb4\u91cf\u306e\u307f\u3092\u62bd\u51fa\nlist_features = df_features_train.columns.tolist()\n\ndf_features_mi = pd.DataFrame({'col_name':list_features, 'col_mi':feature_scores})\n\nlist_col = df_features_mi.loc[df_features_mi['col_mi']>0.5, 'col_name'].tolist()\n\ndf_features_train_select = df_features_train[list_col].copy()\n\n# \u8a2d\u5b9a\u3092\u4fdd\u5b58\nkind_to_fc_parameters = tsfresh.feature_extraction.settings.from_columns(df_features_train_select)","a14c5b64":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u91cf\u3092\u62bd\u51fa\ndf_features_test_select = extract_features(df_sensor_test.iloc[:,:-1], column_id='filename', column_sort='Time', n_jobs=os.cpu_count(), kind_to_fc_parameters=kind_to_fc_parameters)","4b0d5c17":"# LGBM\u5165\u308c\u308b\u305f\u3081\u3001\u7279\u5fb4\u91cf\u540d\u3092\u6574\u5f62\nlist_col_ = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in list_col]\nlist_col_[-10:]","dad0c92a":"# \u7279\u5fb4\u91cf\uff08=\u8aac\u660e\u5909\u6570\uff09\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\uff08\u88ab\u8aac\u660e\u5909\u6570\uff09\u306b\u5206\u5272\u3057\u3066\u304a\u304d\u307e\u3059\ny_train = df_train.action_seq\nX_train = df_features_train_select.copy()\nX_train.columns = list_col_\nX_test = df_features_test_select.copy()\nX_test.columns = list_col_","4dab9b80":"X_train.head()","6a512f3d":"# \u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\uff08\u6570\u5024\u306b\u5909\u63db\uff09\u3057\u3066\u304a\u304d\u307e\u3059\nle = LabelEncoder()\ny_train = le.fit_transform(y_train)","25484e36":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u3092\u691c\u5b9a\uff08\u7cbe\u5ea6\u8a55\u4fa1\uff09\u7528\u306b\u5207\u308a\u51fa\u3057\u307e\u3059\nX_train_, X_val, y_train_, y_val = train_test_split(X_train, y_train, test_size=0.33, random_state=71, stratify=y_train)","c436d4e3":"# \u4e0a\u4f4d\u306e\u7279\u5fb4\u91cf\u306e\u307f\u3092\u4f7f\u3063\u3066\u30e2\u30c7\u30ea\u30f3\u30b0\nmodel = LGBMClassifier(learning_rate=0.02, n_estimators=5000)\nmodel.fit(X_train_, y_train_, eval_set=[(X_val, y_val)], eval_metric='logloss', early_stopping_rounds=50, verbose=False)\n\ny_pred = model.predict(X_val)\nprint(accuracy_score(y_val, y_pred))","bc634666":"best_iter = model.best_iteration_\nmodel = LGBMClassifier(learning_rate=0.02, n_estimators=best_iter)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)","11d42e5d":"df_sub = pd.read_csv('..\/input\/data-science-spring-osaka-2021\/sample_submission.csv')\ndf_sub['action_seq'] = le.inverse_transform(y_pred)\ndf_sub","4c5ccd7f":"# \u51fa\u529b\u3057\u3066\u63d0\u51fa\u3057\u307e\u3059\ndf_sub.to_csv('submission.csv', index=False)","4546b9ab":"TSFRESH\u4ee5\u5916\u3001\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u307e\u3060[\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059](https:\/\/neptune.ai\/blog\/feature-engineering-tools)\u3001\u826f\u304b\u3063\u305f\u3089\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002","1beff997":"# \u30c7\u30fc\u30bf\u30ed\u30fc\u30c9","7149f7fa":"# \u7279\u5fb4\u91cf\u62bd\u51fa"}}