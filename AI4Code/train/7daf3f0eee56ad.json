{"cell_type":{"cf4b602e":"code","850082e8":"code","0e96567c":"code","66cb4ed8":"code","724fb0ee":"code","7963a4dc":"code","71fdc8b0":"code","6a3fd171":"code","0f37d06b":"code","c1ba0c71":"code","10c693e8":"code","35cccc78":"code","1feecf6a":"code","1eaeb2c4":"code","06748bcd":"code","79d4f95a":"code","9f9a510d":"code","9d980c54":"markdown"},"source":{"cf4b602e":"import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report","850082e8":"df1 = pd.read_csv(\"..\/input\/sms-spam-collection-dataset\/spam.csv\", encoding=\"latin-1\")","0e96567c":"df1","66cb4ed8":"df1.rename(columns={'v1':'class',\"v2\":\"message\"},inplace=True)\ndf1.head()","724fb0ee":"nedict = {'ham':0, \n        'spam':1}\n\n# apply using map\ndf1['class'] = df1['class'].map(nedict)","7963a4dc":"df1","71fdc8b0":"df1.drop(['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], axis=1, inplace=True)","6a3fd171":"df1","0f37d06b":"X = df1['message']\ny = df1['class']","c1ba0c71":"cv = CountVectorizer()\nX = cv.fit_transform(X) # Fit the Data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n","10c693e8":"from sklearn import svm\nclf1 = svm.SVC()\nclf1.fit(X_train,y_train)\nclf1.score(X_test,y_test)\ny_pred = clf1.predict(X_test)\nprint(classification_report(y_test, y_pred))","35cccc78":"from sklearn.ensemble import RandomForestClassifier\n\nclf2 = RandomForestClassifier()\nclf2.fit(X_train,y_train)\nclf2.score(X_test,y_test)\ny_pred = clf2.predict(X_test)\nprint(classification_report(y_test, y_pred))\n","1feecf6a":"#Naive Bayes Classifier\nclf3 = MultinomialNB()\nclf3.fit(X_train,y_train)\nclf3.score(X_test,y_test)\ny_pred = clf3.predict(X_test)\nprint(classification_report(y_test, y_pred))\n","1eaeb2c4":"from sklearn.neighbors import KNeighborsClassifier\n\nclf4= KNeighborsClassifier(n_neighbors=3)\nclf4.fit(X_train,y_train)\nclf4.score(X_test,y_test)\ny_pred = clf4.predict(X_test)\nprint(classification_report(y_test, y_pred))","06748bcd":"from sklearn import tree\nclf5 = tree.DecisionTreeClassifier()\nclf5.fit(X_train,y_train)\nclf5.score(X_test,y_test)\ny_pred = clf5.predict(X_test)\nprint(classification_report(y_test, y_pred))","79d4f95a":"from sklearn.neural_network import MLPClassifier\nclf5 = MLPClassifier()\nclf5.fit(X_train,y_train)\nclf5.score(X_test,y_test)\ny_pred = clf5.predict(X_test)\nprint(classification_report(y_test, y_pred))","9f9a510d":"from sklearn.ensemble import AdaBoostClassifier\nclf6 = AdaBoostClassifier()\nclf6.fit(X_train,y_train)\nclf6.score(X_test,y_test)\ny_pred = clf6.predict(X_test)\nprint(classification_report(y_test, y_pred))\n\n","9d980c54":"## SMS Spam Collection Dataset\n\n\nThe SMS Spam Collection is a set of SMS tagged messages that have been collected for SMS Spam research. It contains one set of SMS messages in English of 5,574 messages, tagged acording being ham (legitimate) or spam.\n\n\n\n## We uesd 6 algorithms\n* Support Vector Machine \n* Random Forest\n* Naive Bayes\n* K Nearest NeighborT\n* DecisionTree\n* MLPC\n* AdaBoost\n\n\n\n\n## Dataset \n\nhttps:\/\/www.kaggle.com\/uciml\/sms-spam-collection-dataset\n\n"}}