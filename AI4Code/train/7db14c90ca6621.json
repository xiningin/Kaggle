{"cell_type":{"fda2e068":"code","44ecef1a":"code","d0e96e66":"code","f2a9b38e":"code","886b40d0":"code","2b719e4b":"code","4be9ff0e":"markdown","583edc1f":"markdown","5eaa9edb":"markdown","e06fa9fe":"markdown","2a149976":"markdown","6ecd981e":"markdown","dd2bbdd2":"markdown","7a627bce":"markdown","0b263619":"markdown","61b15d1c":"markdown","f2daa12f":"markdown","70dd21f7":"markdown"},"source":{"fda2e068":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","44ecef1a":"# Set mode:\nmode = 'Commissioning mode'\n\nif (mode == 'Test mode 1'):\n    \n    #Test mode 1 | Test external data\n    testModePhase0 = True # External data\n    reportModePhase0 = True # External data\n    \n    testModePhase1 = False\n    reportModePhase1 = False\n    commissioningModePhase1 = False\n    \n    testModePhase2 = False\n    reportModePhase2 = False\n    commissioningModePhase2 = False    \n\n\nif (mode == 'Test mode 2'):\n\n    #Test mode 2 | Test class 1: datasetToProcess(object)\n    testModePhase0 = False # External data\n    reportModePhase0 = False # External data\n    \n    testModePhase1 = True\n    reportModePhase1 = True\n    commissioningModePhase1 = False\n    \n    testModePhase2 = False\n    reportModePhase2 = False\n    commissioningModePhase2 = False\n\n\nif (mode == 'Test mode 3'):\n\n    ##Test mode 3 | Test class processedDataset(object)\n    testModePhase0 = False # External data\n    reportModePhase0 = False # External data\n    \n    testModePhase1 = False\n    reportModePhase1 = False\n    commissioningModePhase1 = True\n    \n    testModePhase2 = True\n    reportModePhase2 = True\n    commissioningModePhase2 = False\n    \n\nif (mode == 'Commissioning mode'):\n\n    ##Test mode 3 | Test class processedDataset(object)\n    testModePhase0 = False # External data\n    reportModePhase0 = False # External data\n    \n    testModePhase1 = False\n    reportModePhase1 = False\n    commissioningModePhase1 = True\n    \n    testModePhase2 = False\n    reportModePhase2 = False\n    commissioningModePhase2 = True","d0e96e66":"# Set value-policy: (1) Technological | (2) Cultural | (3) Socioeconomic |\npolicySelected = 1\n\n# Set features by selecting questions\nfeatureQuestion1 = 6 # Which of the following integrated development environments (IDE's) do you use on a regular basis?  (Select all that apply) | Selected Choice - Spyder  \nfeatureQuestion2 = 27 # What type of computing platform do you use most often for your data science projects? ","f2a9b38e":"def GetInstances(reportMode):\n        \n    import pandas as pd\n    \n    # Get survey data\n    path1 = '..\/input\/kaggle-survey-2020\/'\n    filename1 = 'kaggle_survey_2020_responses.csv'\n    dataset = pd.read_csv(path1+filename1)\n    \n    # Get connections based on Follow-up questions\n    path2 = 'Y:\/Kaggle_Survey\/2-Data\/'\n    filename2 = 'kaggle_survey_2020_responses_FUQ.csv'\n    connections = [] #pd.read_csv(path2+filename2)\n    \n    # Get persona policy\n    path3 = '..\/input\/kaggle-survey-2020\/'\n    filename3 = 'kaggle_survey_2020_responses_Policy.csv'\n    policies = pd.read_csv(path1+filename1, nrows=1)\n    \n    Policy =['Policyn    policiesColumns = list(dataset.columns)\n    PolicySeries = pd.Series(Policy, index=policiesColumns)\n    \n    policies = policies.append(PolicySeries,ignore_index=True)\n    \n    \n    if reportMode == True:\n        \n        # Set Time\n        from datetime import date\n        reportDate = date.today()\n        \n        # Output | Set state of Kaggle dataset\n        if(dataset.size != 0):\n            dataset_report = 'uploaded'\n        else:\n            dataset_report = 'not uploaded'\n        \n        # Output | Set state of Follow-up questions dataset\n\n        if(connections.size != 0):\n            connections_report = 'uploaded'\n        else:\n            connections_report = 'not uploaded'\n            \n        print(\"=========================================\")\n        print(\"OOP Phase 0: Initialization | Get Instances\")\n        print(\"=========================================\")\n        print(\"=========================================\")\n        print(\"OOP Report | Date:\",reportDate.year,'\/',reportDate.month,'\/',reportDate.day)\n        print(\"=========================================\")\n        print(\"Object: GetInstances(reportMode)\")\n        print(\"=========================================\")\n        print(\"(1) Inputs\")\n        print(\"=========================================\")\n        print(\"-File 1: :\", str(filename1))\n        print(\"-File 2: :\", str(filename2))\n        print(\"-File 3: :\", str(filename3))\n        print(\"=========================================\")\n        print(\"(2) Outputs\")\n        print(\"=========================================\")\n        print(\"-Kaggle dataset: \", dataset_report)\n        print(\"-Follow-up questions dataset: \", connections_report) \n        print(\"=========================================\")\n\n    \n    return dataset, connections, policies\n\nif testModePhase0 == True:\n    reportMode = reportModePhase0\n    dataset, connections, policies = GetInstances(reportMode)\n\ndef setPolicy(policies,reportMode):\n    \n    \"\"\"\"\n    Theory to state a value-policy to get a data story:\n    A value-policy can be underpinned on environmental factors affecting\n    products and services (i.e. technological, cultural, or socioeconomic\n    factors) in the view of the Project Management Institute (2013).\n    \"\"\"\n    \n    print(\"=========================================\")\n    print(\"OOP Phase 0: Initialization | Policy Selection\")\n    print(\"=========================================\")\n    #policySelected = input(\"Select a value-policy option for the data story: (1) Technological | (2) Cultural | (3) Socioeconomic | : \")\n    policySelected = 1\n    print(\"\\n=========================================\")\n    \n    policySelected = int(policySelected)\n    \n    # Pivot Features (features common to the policies)\n    pivotFeatures = ['Q24','Q25'] # Features can be input\n    \n    if(policySelected == 1):\n        # Technological Features | Questions selection\n        policySelected = 'TEC'\n    \n    if(policySelected == 2):\n        # Cultural Features | Questions selection\n        policySelected = 'CU'\n    \n    if(policySelected == 3):\n        # Socioeconomic | Questions selection\n        policySelected = 'SE'\n    \n    # Set of policies\n    setOfPolicies = ['TEC', 'CU', 'SE']\n    \n    # Features to drop\n    import pandas as pd\n    featuresToDrop = []\n    \n    policySelectedPlusPi = [policySelected] + ['PI']\n    \n    policiesRange = len(policies.values[1])\n    for i in range(1,policiesRange):\n        if (policies.values[1][i] not in policySelectedPlusPi): \n            \n            featuresToDrop = featuresToDrop + [policies.columns[i]]\n        \n    if reportMode == True:\n       \n       # Set Time\n       from datetime import date\n       reportDate = date.today()\n       \n       # Input | Policies (question-discrimination dataset by policy type)\n       if(policies.size != 0):\n           policies_report = 'get'\n       else:\n           policies_report = 'not get'\n       \n       # Input in process | Policy selection\n       if(policySelected in setOfPolicies):\n           policySelected_report = 'input in process'\n       else:\n           policySelected_report = 'not input in process'\n       \n       # Output | Selected policy\n       if(policySelected in setOfPolicies):\n           policySelected2_report = 'output'\n       else:\n           policySelected2_report = 'not output'\n       \n       # Output | Set of policies\n       if(setOfPolicies != 0):\n           setOfPolicies_report = 'output'\n       else:\n           setOfPolicies_report = 'not output'\n       \n       # Output | features dropped\n       if(len(featuresToDrop) != 0):\n           featuresToDrop_report = 'output'\n       else:\n           featuresToDrop_report = 'not output'\n       \n       print(\"=========================================\")\n       print(\"OOP Phase 0: Initialization | Get Instances\")\n       print(\"=========================================\")\n       print(\"=========================================\")\n       print(\"OOP Report | Date:\",reportDate.year,'\/',reportDate.month,'\/',reportDate.day,'\/' )\n       print(\"=========================================\")\n       print(\"Object: setPolicy(reportMode)\")\n       print(\"=========================================\")\n       print(\"(1) Inputs\")\n       print(\"=========================================\")\n       print(\"-Policies (Question-discrimination dataset): \", policies_report, '|', type(policies))\n       print(\"=========================================\")\n       print(\"(2) Inputs in process\")\n       print(\"=========================================\")\n       print(\"-Selected policy: :\", policySelected_report, '|',str(policySelected))\n       print(\"=========================================\")\n       print(\"(3) Outputs\")\n       print(\"=========================================\")\n       print(\"-Selected policy: \", policySelected2_report, '|',str(policySelected))\n       print(\"-Set of policies: \", setOfPolicies_report,'|',setOfPolicies)\n       print(\"-# of dropped features: \", featuresToDrop_report, '|',len(featuresToDrop)) \n       print(\"=========================================\")\n    \n    return policySelected, setOfPolicies, featuresToDrop, pivotFeatures\n\nif testModePhase0 == True:\n    reportMode = reportModePhase0\n    policySelected, setOfPolicies, featuresToDrop, pivotFeatures = setPolicy(policies,reportMode)","886b40d0":"\n\n\"\"\" Development of Class 1: datasetToProcess(object) \"\"\"\n\nclass datasetToProcess(object):  \n     \"\"\" External data is input in datasetToProcess to output a pivot table. \"\"\"\n     \"\"\" Processes are insertion and pivot-table building\"\"\"\n    \n     def __init__(self):\n        \"\"\"create empty sets of feature labels, pivot features, features to drop, and instance index\"\"\"\n        self.featureLabels = []\n        self.pivotFeatures = []\n        self.featuresToDrop = []\n        self.instanceIndex = []\n       \n        \"\"\"create empty dataframes of dataset, connections, policies, and pivot table\"\"\"\n        import pandas as pd\n        d = {}\n        df = pd.DataFrame(data=d)\n       \n        self.dataset = df\n        self.connections = df\n        self.policies = df\n        self.pivotTable = df\n        self.pivotTableConverted = df\n        self.pivotTable_Description = df\n        \n       \n        \"\"\"create policySelected, policy and setOfPolcies as empty lists\"\"\"\n       \n        self.polcySelected = []\n        self.policy = []\n        self.setOfPolicies = []\n      \n    \n     def insert(self,dataset, connections, policies, policySelected, setOfPolicies, featuresToDrop, pivotFeatures):\n        \"\"\"Insert dataframes: (1) dataset; (2) connections; (3) policies\"\"\"\n        \"\"\" Insert lists; (1) policySelected, setOfPolicies, featuresToDrop, pivotFeatures\"\"\"\n        \"\"\"Set policy as a main-driver of a data story\"\"\"\n        self.dataset = dataset\n        self.connections = connections\n        self.policies = policies\n        self.policy = policySelected\n        self.setOfPolicies = setOfPolicies\n        self.featuresToDrop = featuresToDrop\n        self.pivotFeatures = pivotFeatures\n       \n       \n     def getPivotTable(self, dataset, featuresToDrop):\n        \"\"\"Get and return pivot table given a selected policy\"\"\"\n        import pandas as pd\n        \n        # Droping features and description row (Row 0)\n        self.pivotTable = self.dataset.drop(columns=self.featuresToDrop)\n        self.pivotTable_Description = self.pivotTable\n        self.pivotTable = self.pivotTable.drop([0])\n        \n        \n        self.featureLabels = self.pivotTable.columns[1:]\n        self.instanceIndex = self.pivotTable.index\n        \n        # Features typification: (1) Numbers (just 'Time from Start to Finish (seconds)'); (2) Categories\n        \n        ## Categories\n        self.pivotTableConverted = self.pivotTable.convert_dtypes(convert_string=True, convert_integer=True)\n        \n        ## Number\n        self.pivotTableConverted = self.pivotTableConverted.astype({'Time from Start to Finish (seconds)': 'int32'})\n        \n        return self.pivotTable, self.pivotTableConverted, self.pivotTable_Description, self.policy\n    \n    \n     def __repr__(self):\n        \"\"\"Returns class report\"\"\"\n      \n        import pandas as pd\n      \n        # Set Time\n        from datetime import date\n        reportDate = date.today()\n      \n        # Dataset report\n        if(self.dataset.size != 0):\n          dataset_report = 'inserted'\n        else:\n          dataset_report = 'not inserted'\n      \n        # Connections report\n        if(self.connections.size != 0):\n          connections_report = 'inserted'\n        else:\n          connections_report = 'not inserted'\n          \n        # Policies report\n        if(self.policies.size != 0):\n          policies_report = 'inserted'\n        else:\n          policies_report = 'not inserted'\n    \n        # Pivot Table report\n        if(self.pivotTable.size != 0):\n          pivotTable_report = 'fetched'\n        else:\n          pivotTable_report = 'not fetched'\n    \n        # Policy report\n        if(len(self.setOfPolicies) != 0):\n          setOfPolicies_report = 'inserted'\n        else:\n          setOfPolicies_report = 'not inserted'\n          \n        # Pivot Features report\n        if(len(self.pivotFeatures) != 0):\n          pivotFeatures_report = 'inserted'\n        else:\n          pivotFeatures_report = 'not inserted'\n          \n        # Pivot Features report\n        if(len(self.featureLabels) != 0):\n          featureLabels_report = 'fetched'\n        else:\n          featureLabels_report = 'not fetched'\n          \n        # Instances report\n        if(len(self.instanceIndex) != 0):\n          instanceIndex_report = 'fetched'\n        else:\n          instanceIndex_report = 'not fetched'\n    \n      # Get report statements\n        reportStatementList = []\n        for i in range (0,24):\n            reportStatementItem = i\n            reportStatementList = reportStatementList + [reportStatementItem]\n    \n        reportStatementList[0] = \"\\n\" + \"\\n=========================================\"\n        reportStatementList[1] = \"\\nOOP Phase 1 | Report | Date:\" + str(reportDate.year) + str('\/') + str(reportDate.month) + str('\/') + str(reportDate.day)\n        reportStatementList[2] = \"\\n=========================================\"\n        reportStatementList[3] = \"\\nObject: datasetToProcess(object)\"\n        reportStatementList[4] = \"\\n=========================================\"\n        reportStatementList[5] = \"\\n(1) Inputs\"\n        reportStatementList[6] = \"\\n=========================================\"\n        reportStatementList[7] = \"\\n-Dataset : \" + str(dataset_report) + str('| ') + str(type(self.dataset))\n        reportStatementList[8] = \"\\n-Connections: \" + str(connections_report) + str('| ') + str(type(self.connections))\n        reportStatementList[9] = \"\\n-Policies: \" + str(policies_report) + str('| ') + str(type(self.policies))\n        reportStatementList[10] = \"\\n-Selected Policy: \" + str(self.policy)\n        reportStatementList[11] = \"\\n-Available Policies: \" + str(self.setOfPolicies)\n        reportStatementList[12] = \"\\n-# of features to drop: \" + str(len(self.featuresToDrop))\n        reportStatementList[13] = \"\\n-# Pivot Features: \" + str(self.pivotFeatures)\n        reportStatementList[14] = \"\\n=========================================\"\n        reportStatementList[15] = \"\\n(2) Process\"\n        reportStatementList[16] = \"\\n=========================================\"\n        reportStatementList[17] = \"\\n-Pivot Table: \" + str(pivotTable_report) + str('| ') + str(type(self.pivotTable))\n        reportStatementList[18] = \"\\n=========================================\"\n        reportStatementList[19] = \"\\n(3) Outputs\"\n        reportStatementList[20] = \"\\n=========================================\"\n        reportStatementList[21] = \"\\n-instances selected: \" + str(instanceIndex_report) + str('| ') + str(len(self.instanceIndex))\n        reportStatementList[22] = \"\\n-features selected: \" + str(featureLabels_report) + str('| ') + str(len(self.featureLabels))\n        reportStatementList[23] = \"\\n=========================================\"\n        \n        reportStatement = []\n       \n        for i in range (0,24):\n            if i == 0:\n                reportStatement = reportStatementList[i]\n            else:\n                reportStatement = reportStatement + reportStatementList[i]\n       \n        return super().__repr__() + reportStatement\n        \n    \n\"\"\" Test of Class 1: datasetToProcess(object) \"\"\"\n    \nif testModePhase1 == True:\n\n    # Get external data\n    reportMode = reportModePhase0\n    datasetExternal, connectionsExternal, policiesExternal = GetInstances(reportMode)\n    policySelectedExternal, setOfPoliciesExternal, featuresToDropExternal, pivotFeaturesExternal = setPolicy(policiesExternal,reportMode)\n    \n    # Run class\n    classObject1 = datasetToProcess()\n    \n    # Call method insert\n    classObject1.insert(datasetExternal, connectionsExternal, policiesExternal, policySelectedExternal, setOfPoliciesExternal, featuresToDropExternal, pivotFeaturesExternal)\n    \n    # Call method getPivotTable\n    classObject1.getPivotTable(datasetExternal,featuresToDropExternal)\n\n\nif reportModePhase1 == True:\n    ## Call method __repr__\n    print(classObject1)\n\n\"\"\" Ouput of Class 1: output_datasetToProcess\"\"\"\n\nif commissioningModePhase1 == True:\n\n    # Get external data\n    reportMode = reportModePhase0\n    datasetExternal, connectionsExternal, policiesExternal = GetInstances(reportMode)\n    policySelectedExternal, setOfPoliciesExternal, featuresToDropExternal, pivotFeaturesExternal = setPolicy(policiesExternal,reportMode)\n    \n    # Run class\n    classObject1 = datasetToProcess()\n    \n    # Call method insert\n    classObject1.insert(datasetExternal, connectionsExternal, policiesExternal, policySelectedExternal, setOfPoliciesExternal, featuresToDropExternal, pivotFeaturesExternal)\n    \n    # Call method getPivotTable\n    output_datasetToProcess1, output_datasetToProcess2, output_datasetToProcess3, output_datasetToProcess4 = classObject1.getPivotTable(datasetExternal,featuresToDropExternal)\n    \n    \n    if reportModePhase1 == True:\n        ## Call method __repr__\n        print(classObject1)\n    \n\n","2b719e4b":"\"\"\"Development of Class 2: processedDataset(object)\"\"\"\n\n\"\"\"\nOOP Phase 2: Commissioning\n\"\"\"\n\nclass processedDataset(object):\n    \n    \"\"\" A pivot table is input to output a analytics. \"\"\"\n    \"\"\" Processes are \"\"\"\n    \n    def __init__(self):\n                    \n          # Create blank variables\n          self.featureQuestion1 = 0\n          self.featureQuestion2 = 0\n          \n          self.mostWantedCompensation = 0\n          self.mostWantedExpenditures = 0\n          \n          # Create empty lists\n          self.policySelected = []\n          self.expendituresMeanValues = []\n          self.compensationMeanValues = []\n          \n          self.plot1 = []\n          self.plot2 = []\n          self.plot3 = []\n          \n          self.expendituresFindingsText = []\n          self.compensationFindingsText = []\n          \n          # Create empty dataframes\n          import pandas as pd\n          d = {}\n          df = pd.DataFrame(data=d)\n          \n          self.df = df\n          self.pivotTable_Description = df\n          self.pivotTableConverted = df\n          self.pivotTable = df\n          \n          self.ExpendituresApproachFindings = df\n          self.CompensationApproachFindings = df\n          \n          self.CompensationApproach = df\n          self.ExpendituresApproach = df\n          \n          self.ExpendituresOutput = df\n          self.CompensationOutput = df\n          \n    \n    def insert(self,pivotTable, pivotTableConverted, pivotTable_Description, policySelected):\n        \"\"\" Insert dataframe: Pivot Table \"\"\"\n        self.pivotTable = pivotTable # No typification\n        self.pivotTableConverted = pivotTableConverted # Typification\n        self.pivotTable_Description = pivotTable_Description # No typification with description\n        self.policySelected = policySelected\n                \n    \n    def analyticsCore(self):\n        \"\"\" Counting grouped by pivot features: 'Q24, 'Q25' \"\"\"\n        \n        import pandas as pd\n        import numpy as np\n        import matplotlib.pyplot as plt\n        \n        # Pair option list\n        pairOptions = pivotTable_Description[pivotTable_Description.index==0].T\n        listLenght = len(pivotTable_Description[pivotTable_Description.index==0].columns)\n        \n        pairOptions_indexList = []\n        for i in range(0,listLenght):pairOptions_indexList = pairOptions_indexList + [i]\n\n        pairOptions = pairOptions.set_index([pd.Index(pairOptions_indexList)], append=True)\n        \n        # Input Pair\n        \n        print(\"=========================================\")\n        print(\"OOP Phase 1: Objet building | Data story by feature-pair selection\")\n        print(\"=========================================\")\n        print(pairOptions)\n        print(\"=========================================\")\n        print(\"Number range: 0 - \",listLenght-1)\n        \n        #featureQuestion1 = input(\"Select pair-1: \")\n        featureQuestion1 = 6\n        featureQuestion1 = int(featureQuestion1)\n        featureQuestion1 = pairOptions.index[featureQuestion1][0]\n        \n        #featureQuestion2 = input(\"Select pair-2: \")\n        featureQuestion2 = 27\n        featureQuestion2 = int(featureQuestion2)\n        featureQuestion2 = pairOptions.index[featureQuestion2][0]\n                \n        print(\"\\n=========================================\")\n        \n        # Put self variables\n        self.featureQuestion1 = featureQuestion1\n        self.featureQuestion2 = featureQuestion2\n        \n        # Findings Dataframes \n        self.CompensationApproachFindings = self.pivotTableConverted.groupby(by=['Q24', featureQuestion1, featureQuestion2]).count() # Compensation\n        self.ExpendituresApproachFindings = self.pivotTableConverted.groupby(by=['Q25', featureQuestion1, featureQuestion2]).count() # Expenditures\n        \n        # DataFrames using pivot variables\n        self.CompensationApproach = self.pivotTableConverted.groupby('Q24').count() # Compensation\n        self.ExpendituresApproach = self.pivotTableConverted.groupby('Q25').count() # Expenditures\n        \n        # DataFrames using pivot variables and picked variable\n        self.ExpendituresOutput = self.ExpendituresApproach.loc[:,[self.featureQuestion1,self.featureQuestion2]]\n        self.CompensationOutput = self.CompensationApproach.loc[:,[self.featureQuestion1,self.featureQuestion2]]\n        \n        return self.CompensationApproach, self.ExpendituresApproach, self.CompensationApproachFindings, self.ExpendituresApproachFindings, self.ExpendituresOutput, self.CompensationOutput, self.featureQuestion1, self.featureQuestion2\n        \n    \n    def plottingPandas(self):\n        \"\"\" Numeric plotting: (1) Numeric\"\"\"\n        import pandas as pd\n        \n        # Pivot columns\n        #pivotColumns = ['Q24','Q25']\n        pivotColumns = self.pivotTableConverted.columns[0]\n        \n        # Box plot\n        self.plot1 = self.pivotTableConverted.boxplot(column = pivotColumns)\n        \n        # Bootstrap\n        s = self.pivotTableConverted['Time from Start to Finish (seconds)']\n        self.plot2 = pd.plotting.bootstrap_plot(s)\n        \n        # Andrews Curves\n        self.plot3 = self.pivotTableConverted.plot.hist(bins=12, alpha=0.5)\n        \n        return self.plot1, self.plot2, self.plot3\n    \n    def plottingMatplotlib(self): #Raw state\n        \"\"\" Bar chart on polar axis \"\"\"\n        import pandas as pd\n        import numpy as np\n        import matplotlib.pyplot as plt\n                \n        # Plotting\n        for i in range(0,2):\n        \n            ## Get figure and a set of subplots\n            if i == 0:\n                N = len(self.ExpendituresApproach.values) # Q25: Expenditure\n                approach = 'Expenditures'\n                    \n                featureToPlot1 = list(self.ExpendituresApproach[self.featureQuestion1]) \n                featureToPlot2 = list(self.ExpendituresApproach[self.featureQuestion2])\n\n                tickLabel = list(self.ExpendituresApproach.index)\n                \n                \n            if i == 1:\n                N = len(self.CompensationApproach.values) # Q24: Compensation\n                approach = 'Compensation'\n                featureToPlot1 = list(self.CompensationApproach[self.featureQuestion1]) \n                featureToPlot2 = list(self.CompensationApproach[self.featureQuestion2])\n                tickLabel = list(self.CompensationApproach.index)\n            \n            ## Compute pie slices\n            \n            theta = np.linspace(0.0, 2 * np.pi, N, endpoint=False)\n            radii = np.array(featureToPlot1)\n            width = np.pi \/ 4000 * np.array(featureToPlot2)\n            #width = np.pi \/ 20\n            \n            radiiColors = 10 * np.random.rand(N)\n            colors = plt.cm.viridis(radiiColors \/ 10.)\n    \n            ## Plot\n            plt.figure(figsize = (12,12))\n            axs = plt.subplot(projection='polar')\n            axs.bar(theta, radii, width=width, bottom=0.0, color=colors, alpha=0.5, tick_label=tickLabel)\n            titleToPlot = 'Pair: ' + self.featureQuestion1 + ' - ' + self.featureQuestion2 + ' | ' + approach\n            axs.set_title(titleToPlot)\n    \n            plt.show()\n        \n        return \n    \n    def getMeanValue(self, case, description):\n        \"\"\" Return mean value given the description of a monetary range \"\"\"\n\n        self.compensationMeanValues = [500, 1500, 12500, 112500, 137500, 17500, 175000, 2500, 22500, 225000, 27500, 275000, 3500, 35000, 400000, 4500, 45000, 6250, 55000, 65000, 8250, 75000, 85000, 95000, 500000]\n        compensationDescriptionList = self.CompensationApproach.index        \n\n        self.expendituresMeanValues = [0, 50, 50000, 100000, 500, 5000] \n        expendituresDescriptionList = self.ExpendituresApproach.index\n\n        meanValue = 0\n\n        if (case == 'compensation'):\n            \n            for i in range(0,len(compensationDescriptionList)):\n                itemToEvluate = compensationDescriptionList[i]\n                if(description == itemToEvluate): meanValue = self.compensationMeanValues[i]\n        \n        \n        if (case == 'expenditures'):\n            \n            for i in range(0,len(expendituresDescriptionList)):\n                itemToEvluate = expendituresDescriptionList[i]\n                if(description == itemToEvluate): meanValue = self.expendituresMeanValues[i]\n        \n        return meanValue\n            \n            \n    def getFindings(self):\n        \"\"\" Most wanted | Compensation approach: most significant compensation \"\"\"\n        \"\"\" Most wanted | Expenditure approach: most significant expenditure \"\"\"\n        \n        # Expenditure findings\n        operationsNumber_Expenditure = len(self.ExpendituresApproachFindings)\n        \n        columnLabel = self.ExpendituresApproachFindings.columns[0]\n            \n        expenditureFrequency = list(self.ExpendituresApproachFindings[columnLabel])\n        \n        mostWantedExpenditures = 0\n        \n        for i in range(0,operationsNumber_Expenditure):\n            description = self.ExpendituresApproachFindings.index[i][0]\n            itemToInclude = expenditureFrequency[i] * int(processedDataset.getMeanValue(self,'expenditures', description))\n            \n            if (mostWantedExpenditures <= itemToInclude):\n                mostWantedExpenditures = itemToInclude\n                self.mostWantedExpenditures_Position = i\n                itemToInclude = 0\n            \n        self.mostWantedExpenditures = mostWantedExpenditures\n        \n            \n        # Compensation findings\n        operationsNumber_Compensation = len(self.CompensationApproachFindings)\n        \n        columnLabel = self.CompensationApproachFindings.columns[0]\n            \n        compensationFrequency = list(self.CompensationApproachFindings[columnLabel])\n        \n        mostWantedCompensation = 0\n        \n        for i in range(0,operationsNumber_Compensation):\n            description = self.CompensationApproachFindings.index[i][0]\n            itemToInclude = compensationFrequency[i] * int(processedDataset.getMeanValue(self,'compensation', description))\n            \n            if (mostWantedCompensation <= itemToInclude):\n                mostWantedCompensation = itemToInclude\n                self.mostWantedCompensation_Position = i\n                itemToInclude = 0\n        \n        self.mostWantedCompensation = mostWantedCompensation\n        \n        return self.mostWantedExpenditures_Position, self.mostWantedCompensation_Position, self.mostWantedExpenditures, self.mostWantedCompensation\n    \n    \n    def FindingsInText(self):\n        \n        \"\"\" Returns findings text\"\"\"\n        # Thousands Separator in Python [duplicate]\n        import locale\n        locale.setlocale(locale.LC_NUMERIC, '')\n        \n        # Get policy name from self.policySelected\n        \n        if(self.policySelected == 'TEC'):\n            policySelected = 'Technological'\n    \n        if(self.policySelected == 'CU'):\n            policySelected = \"Cultural\"\n    \n        if(self.policySelected == 'SE'):\n            policySelected = 'Socioeconomic'\n        \n        # Display text from Expenditures Findings\n        \n        findingExpenditureText_Title = 'Data story: Most wanted data scientists featured by significant expenditures'\n        findingExpenditureText_Assumption0 = \"Base Assumption (A0): Most wanted data scientists are supposed to be the collective that spent more monetary resources on machine learning and\/or cloud computing services at home (or at work) in the past 5 years\"\n        findingExpenditureText_Assumption1 = \"Assumption 1 (A1): Given the survey question 25, it is said that data scientists inject significant monetary resources around the world.\"\n        findingExpenditureText_Assumption2 = \"Assumption 2 (A2): It is assumed that the data scientist profile is fetched under the following policy: \" + str(policySelected)\n        findingExpenditureText_Grouping = \"A target collective can be identified grouping expenditures by the following questions: \" + \"(1) \" + str(self.featureQuestion1) + \"; \" + \"(2) \" + str(self.featureQuestion2)\n        \n        featureExpenditures1 = self.ExpendituresApproachFindings.index[self.mostWantedExpenditures_Position]\n        featureExpenditures2 = self.ExpendituresApproachFindings['Time from Start to Finish (seconds)'][self.mostWantedExpenditures_Position]\n        featureExpenditures3 = featureExpenditures2\n        \n        featureExpenditures4 = self.mostWantedExpenditures\n        featureExpenditures4 = locale.format_string(\"%d\",featureExpenditures4,grouping=True)\n        \n        findingExpenditureText_groupResult = \"Most wanted datas cientists (target collective) are featured as follows: \"\n        feature1_ExpendituresText = \"(1) Data scientist persona: \" + str(featureExpenditures1)\n        feature2_ExpendituresText = \"(2) Collective featured by \" + str(self.featureQuestion1) + ' and ' + str(self.featureQuestion2) + \" : \" + str(featureExpenditures2) + ' individuals'\n        feature3_ExpendituresText = \"(3) Collective expenditures: USD \" + str(featureExpenditures4)\n        \n        expendituresFindingsText = [findingExpenditureText_Title] + [findingExpenditureText_Assumption0] + [findingExpenditureText_Assumption1] + [findingExpenditureText_Assumption2] + [findingExpenditureText_Grouping] + [findingExpenditureText_groupResult] + [feature1_ExpendituresText] + [feature2_ExpendituresText] + [feature3_ExpendituresText]\n        \n        self.expendituresFindingsText = expendituresFindingsText\n        \n        # Display text from Compensation Findings\n        \n        findingCompensationText_Title = 'Data story: Most wanted data scientists featured by significant compensation'\n        findingCompensationText_Assumption0 = \"Base Assumption (A0): Most wanted data scientists are supposed to be the collective that is best compensated.\"\n        findingCompensationText_Assumption1 = \"Assumption 1: Given the survey question 24, it is said that data scientists capture significant monetary resources around the world.\"\n        findingCompensationText_Assumption2 = \"Assumption 2: It is assumed that the data scientist profile is fetched under the following policy: \" + str(policySelected)\n        findingCompensationText_Grouping = \"A target collective can be identified grouping compensation by the following questions: \" + \"(1) \" + str(self.featureQuestion1) + \"; \" + \"(2) \" + str(self.featureQuestion2)\n        \n        featureCompensation1 = self.CompensationApproachFindings.index[self.mostWantedCompensation_Position]\n        featureCompensation2 = self.CompensationApproachFindings['Time from Start to Finish (seconds)'][self.mostWantedCompensation_Position]\n        featureCompensation3 = featureCompensation2\n        \n        featureCompensation4 = self.mostWantedCompensation\n        featureCompensation4 = locale.format_string(\"%d\",featureCompensation4,grouping=True)\n        \n        findingCompensationText_groupResult = \"Most wanted data scientists (target collective) are featured as follows: \"\n        feature1_CompensationText = \"(1) Data scientist persona: \" + str(featureCompensation1)\n        feature2_CompensationText = \"(2) Collective featured by \" + str(self.featureQuestion1) + ' and ' + str(self.featureQuestion2) + \" : \" + str(featureCompensation2) + ' individuals'\n        feature3_CompensationText = \"(3) Collective compensation: USD \" + str(featureCompensation4)\n        \n        compensationFindingsText = [findingCompensationText_Title] + [findingCompensationText_Assumption0] + [findingCompensationText_Assumption1] + [findingCompensationText_Assumption2] + [findingCompensationText_Grouping] + [findingCompensationText_groupResult] + [feature1_CompensationText] + [feature2_CompensationText] + [feature3_CompensationText]\n        \n        self.compensationFindingsText = compensationFindingsText\n        \n        return self.expendituresFindingsText, self.compensationFindingsText\n        \n\n    def __repr__(self):\n        \"\"\"Returns findings and class report\"\"\"\n        \n        # Set Time\n        from datetime import date\n        reportDate = date.today()\n      \n        # Input report\n        inputReport = []\n        inputReport_output = []\n        \n        if (self.pivotTable.size != 0):\n            inputReport = inputReport + [True]\n        else:\n            inputReport = inputReport + [False]\n        \n        if (self.pivotTableConverted.size != 0):\n            inputReport = inputReport + [True]\n        else:\n            inputReport = inputReport + [False]\n            \n        if (self.pivotTable_Description.size != 0):\n            inputReport = inputReport + [True]\n        else:\n            inputReport = inputReport + [False]\n            \n        if (self.policySelected != 0):\n            inputReport = inputReport + [True]\n        else:\n            inputReport = inputReport + [False]\n            \n        for i in inputReport:\n            if (i==True):\n                inputReport_output = inputReport_output + ['Fetched']\n            else:\n                inputReport_output = inputReport_output + ['Not Fetched']\n        \n        # Process report\n        processReport = []\n        processReport_output = []\n        \n        if (self.CompensationApproach.size != 0):\n            processReport = processReport + [True]\n        else:\n            processReport = processReport + [False]\n        \n        if (self.ExpendituresApproach.size != 0):\n            processReport = processReport + [True]\n        else:\n            processReport = processReport + [False]\n        \n        if self.plot1 != []:\n            processReport = processReport + [True]\n        else:\n            processReport = processReport + [False]\n        \n        if self.plot2 != []:\n            processReport = processReport + [True]\n        else:\n            processReport = processReport + [False]\n        \n        if self.plot3 != []:\n            processReport = processReport + [True]\n        else:\n            processReport = processReport + [False]\n        \n        for i in processReport:\n            if (i==True):\n                processReport_output = processReport_output + ['Fetched']\n            else:\n                processReport_output = processReport_output + ['Not Fetched']\n\n        # Output report\n        outputReport = []\n        outputReport_output = []\n                \n        if (self.ExpendituresOutput.size != 0):\n            outputReport = outputReport + [True]\n        else:\n            outputReport = outputReport + [False]\n            \n        if (self.CompensationOutput.size != 0):\n            outputReport = outputReport + [True]\n        else:\n            outputReport = outputReport + [False]\n        \n        if (self.mostWantedExpenditures_Position != 0):\n            outputReport = outputReport + [True]\n        else:\n            outputReport = outputReport + [False]    \n        \n        if (self.mostWantedCompensation_Position != 0):\n            outputReport = outputReport + [True]\n        else:\n            outputReport = outputReport + [False]          \n        \n        for i in outputReport:\n            if (i==True):\n                outputReport_output = outputReport_output + ['Fetched']\n            else:\n                outputReport_output = outputReport_output + ['Not Fetched']\n\n      # Get report statements\n        reportStatementList = []\n        for i in range (0,26):\n            reportStatementItem = i\n            reportStatementList = reportStatementList + [reportStatementItem]\n    \n        reportStatementList[0] = \"\\n\" + \"\\n=========================================\"\n        reportStatementList[1] = \"\\nOOP Phase 2 | Report | Date:\" + str(reportDate.year) + str('\/') + str(reportDate.month) + str('\/') + str(reportDate.day)\n        reportStatementList[2] = \"\\n=========================================\"\n        reportStatementList[3] = \"\\nObject: processedDataset(object)\"\n        reportStatementList[4] = \"\\n=========================================\"\n        reportStatementList[5] = \"\\n(1) Inputs\"\n        reportStatementList[6] = \"\\n=========================================\"\n        reportStatementList[7] = \"\\n-Pivot table (raw) : \" + str(inputReport_output[0]) + str('| ') + str(type(self.pivotTable))\n        reportStatementList[8] = \"\\n-Pivot table (converted): \" + str(inputReport_output[1]) + str('| ') + str(type(self.pivotTableConverted))\n        reportStatementList[9] = \"\\n-Pivot table (description): \" + str(inputReport_output[2]) + str('| ') + str(type(self.pivotTable_Description))\n        reportStatementList[10] = \"\\n-Policy Selected: \" + str(inputReport_output[3]) + str('| ') + str(self.policySelected)\n        reportStatementList[11] = \"\\n=========================================\"\n        reportStatementList[12] = \"\\n(2) Process\"\n        reportStatementList[13] = \"\\n=========================================\"\n        reportStatementList[14] = \"\\n-Analytics core | Compensation data: \" + str(processReport_output[0]) + str('| ') + str(type(self.pivotTable))\n        reportStatementList[15] = \"\\n-Analytics core | Expenditure data: \" + str(processReport_output[1]) + str('| ') + str(type(self.pivotTable))\n        reportStatementList[16] = \"\\n-Visualization | Pandas: \" + str(processReport_output[2]) + str('| ') + str(type(self.pivotTable))\n        reportStatementList[17] = \"\\n-Visualization | Matplotlib: \" + str(processReport_output[3]) + str('| ') + str(type(self.pivotTable))\n        reportStatementList[18] = \"\\n=========================================\"\n        reportStatementList[19] = \"\\n(3) Outputs\"\n        reportStatementList[20] = \"\\n=========================================\"\n        reportStatementList[21] = \"\\n-Expenditures instances: \" + str(outputReport_output[0]) + str('| ') + str(len(self.ExpendituresOutput))\n        reportStatementList[22] = \"\\n-Compensation instances: \" + str(outputReport_output[1]) + str('| ') + str(len(self.CompensationOutput))\n        reportStatementList[23] = \"\\n-Expenditures index: \" + str(outputReport_output[2]) + str('| ') + str(self.mostWantedExpenditures_Position)\n        reportStatementList[24] = \"\\n-Compensation index: \" + str(outputReport_output[3]) + str('| ') + str(self.mostWantedCompensation_Position)\n        reportStatementList[25] = \"\\n=========================================\"\n        \n        reportStatement = []\n       \n        for i in range (0,26):\n            if i == 0:\n                reportStatement = reportStatementList[i]\n            else:\n                reportStatement = reportStatement + reportStatementList[i]\n       \n        return super().__repr__() + reportStatement\n        \n        \n\n\"\"\" Test of Class 2: processedDataset(object) \"\"\"\n\nif testModePhase2 == True:\n    \n    # Get output from class 1\n    pivotTable, pivotTableConverted, pivotTable_Description, policySelected = output_datasetToProcess1, output_datasetToProcess2, output_datasetToProcess3, output_datasetToProcess4\n    \n    # Run class\n    classObject2 = processedDataset()\n    \n    # Call method insert\n    classObject2.insert(pivotTable, pivotTableConverted, pivotTable_Description, policySelected)\n    \n    # Call method analyticsCore\n    output_processedDataset1, output_processedDataset2, output_processedDataset3, output_processedDataset4, output_processedDataset5, output_processedDataset6, output_processedDataset7, output_processedDataset8 = classObject2.analyticsCore()\n    \n    # call method plotting\n    plot1, plot2, plot3  = classObject2.plottingPandas()\n    \n    # call method plottingMatplotlib\n    classObject2.plottingMatplotlib()\n    \n    # call method getMeanValue\n    case = 'expenditures'\n    description = '$0 ($USD)'\n    classObject2.getMeanValue(case, description)\n    \n    # Call method getFindings\n    output_processedDataset9, output_processedDataset10, output_processedDataset11, output_processedDataset12 = classObject2.getFindings()\n    \n    # Call method FindingsInText\n    output_processedDataset13, output_processedDataset14 = classObject2.FindingsInText()\n\n    if reportModePhase2 == True:\n        \n        ## Call method __repr__\n        \n        print(classObject2)\n\n\"\"\" Ouput of Class 2: output_processedDataset\"\"\"\n\nif commissioningModePhase2 == True:\n    \n# Get output from class 1\n    pivotTable, pivotTableConverted, pivotTable_Description, policySelected = output_datasetToProcess1, output_datasetToProcess2, output_datasetToProcess3, output_datasetToProcess4\n    \n    # Run class\n    classObject2 = processedDataset()\n    \n    # Call method insert\n    classObject2.insert(pivotTable, pivotTableConverted, pivotTable_Description, policySelected)\n    \n    # Call method analyticsCore\n    output_processedDataset1, output_processedDataset2, output_processedDataset3, output_processedDataset4, output_processedDataset5, output_processedDataset6, output_processedDataset7, output_processedDataset8 = classObject2.analyticsCore()\n    \n    # call method plotting\n    plot1, plot2, plot3  = classObject2.plottingPandas()\n    \n    # call method plottingMatplotlib\n    classObject2.plottingMatplotlib()\n    \n    # Call method getFindings\n    output_processedDataset9, output_processedDataset10, output_processedDataset11, output_processedDataset12 = classObject2.getFindings()\n    \n    # Call method FindingsInText\n    output_processedDataset13, output_processedDataset14 = classObject2.FindingsInText()\n    \n    print(\"=========================================\")\n    print(\"Data story proposals\")\n    print(\"=========================================\")\n    print(output_processedDataset13)\n    print(\"=========================================\")\n    print(output_processedDataset14)\n    print(\"=========================================\")\n\n    if reportModePhase2 == True:\n        \n        ## Call method __repr__\n        \n        print(classObject2)","4be9ff0e":"# Use case diagram","583edc1f":"# Set input variables of the data story","5eaa9edb":"![Design thinking-approach powered by Lucidchart](https:\/\/lucid.app\/publicSegments\/view\/99b51ca0-55d6-4886-8b9b-2cba6b00eed1\/image.png)","e06fa9fe":"# System Modes\n\n**Test mode 1 | Test external data**\ntestModePhase0 = True # External data\nreportModePhase0 = True # External data\n\ntestModePhase1 = False\nreportModePhase1 = False\ncommissioningModePhase1 = False\n\ntestModePhase2 = False\nreportModePhase2 = False\ncommissioningModePhase2 = False\n\n--------------------------------------------------------------------------\n\n**Test mode 2 | Test class 1: datasetToProcess(object)**\ntestModePhase0 = False # External data\nreportModePhase0 = False # External data\n\ntestModePhase1 = True\nreportModePhase1 = True\ncommissioningModePhase1 = False\n\ntestModePhase2 = False\nreportModePhase2 = False\ncommissioningModePhase2 = False\n\n\n--------------------------------------------------------------------------\n\n**Test mode 3 | Test class 2: processedDataset(object)**\ntestModePhase0 = False # External data\nreportModePhase0 = False # External data\n\ntestModePhase1 = False\nreportModePhase1 = False\ncommissioningModePhase1 = True\n\ntestModePhase2 = True\nreportModePhase2 = True\ncommissioningModePhase2 = False\n\n--------------------------------------------------------------------------\n\n**Commisionning mode**[](http:\/\/)\ntestModePhase0 = False # External data\nreportModePhase0 = False # External data\n\ntestModePhase1 = False\nreportModePhase1 = False\ncommissioningModePhase1 = True\n\ntestModePhase2 = False\nreportModePhase2 = False\ncommissioningModePhase2 = True","2a149976":"![Use case diagram powered by Lucidchart](https:\/\/lucid.app\/publicSegments\/view\/ee34c570-92c2-404e-ba59-ba691a74d571\/image.png)","6ecd981e":"# Technical notes\n\n(1)\nIssue:  Spyder returning TypeError after updating to Spyder 4.1.4  \nFixing task: (1) conda uninstall spyder-kernels; (2) conda install spyder-kernels=1.9.3\nReference: https:\/\/stackoverflow.com\/questions\/63739215\/spyder-returning-typeerror-after-updating-to-spyder-4-1-4\n\n(2)\nIssue: TypeError: __str__ returned non-string (type NoneType)\nFixing task: super().__repr__() + statement\nReference: https:\/\/stackoverflow.com\/questions\/49616600\/typeerror-str-returned-non-string-type-nonetype\n\n(3)\nIsuee: DeprecationWarning on  the usage of the code locale.format(\"%d\", 1234567, grouping=True)\nFixing task: Use 'locale.format_string()' instead as recommended.\nReference 1: https:\/\/stackoverflow.com\/questions\/10079210\/thousands-separator-in-python\nReference 2: https:\/\/stackoverflow.com\/questions\/37579712\/format-numbers-as-currency-in-python\/57258421#57258421   \n\n\n# References\n\nProject Management Insitute. (2013). Managing Change in Organizations: A\n    Practice Guide. Pennsylvania, PA: Project Management Institute, Inc.\n\nTransform Pandas DataFrame of categorical variables to MultiIndex with count \n    and proportion. Retrieved from\n    https:\/\/stackoverflow.com\/questions\/48014637\/transform-pandas-dataframe-of-categorical-variables-to-multiindex-with-count-and\n\n\n# Bibliography\n\nGuttag, J. (2013). Introduction to Computation and Programming Using Python.\n    Massachusetts, The United States of America: The MIT Press.\n\nLott, S. (2019). Mastering Object-Oriented Python | Build powerful\n    applications with reusable code using OOP design patterns and Python 3.7\n    (2nd ed.). Birmingham, United Kingdom: Packt Publishing Ltd.","dd2bbdd2":"# Further details\n\n\n*System Scheme (raw level)*\n\n(1) system: get data\n    -> (2) system: get questions connections\n        -> (3) system: get pivot table\n            -> (4) system: patch anlytics\n                -> (5a) system: get visualization\n                -> (5b) system: put findings\n\n\n*Orient Object Programming Approach*\n\n- Object 1: dataset to process\n    Related functions: (3) Function getPivotTable\n\n- Object 2: processed dataset\n    Related functions: (4) Function patchAnalytics;\n    (5a) Function getVisualization; (5b) Function getFindings_MostWanted\n\n- Instances: (1) Function getData; (2) Function getConnections\n\n\n*Functions Approach (raw level)*\n\n- Function getData\n- Function getConnections\n- Function getPivotTable\n- Function patchAnalytics\n- Function getVisualization\n- Function getFindings_MostWanted\n\n\n*Expected and pretended environments*\n\n- pandas\n- scikit-learn\n- tabpy \/ alt-tabpy\n- matplotlib\n\n\n*Prototype remarks*\n\n- User \n- Use case diagram would be powered by Lucidchart\n- analytics depends on the study methodology in business research in the view\n  of Dul and Hak (2008).\n- Connections are deemed chains of follow-up questions.\n- Most wanted niche would be set of data scientists grouped by a common persona\n  that includes the following fetures: (1) high-performance usage of the\n  Kaggle platform; (2) time valuation expressed under unitary nominal salary.\n- Data story (raw level) would be proposed in the basis of data scientist body\n  that are expected to be worldwide benchmark kagglers.\n- visualization would be conducted using tabpy or alt-tabpy\n\n\n*Remarks on coding *\n\n- Coding: utf-8\n- Created on Mon Nov 30 12:26:35 2020\n- @author: Mauricio Az\u00e1lgara\n- Powered by Spyder 4.1.5\n\n\n*Bibliography*\n\nDul, J., & Hak, T. (2008). Case Study Methodology in Business Research\n    (1st ed.). Burlington, The United States of America: Elsevier Ltd.\n\nSoegaard, M. (2018). The Basics of User Experience Design: A UX Design Book by\n    the Interaction Design Foundation (1st ed.). Denmark: Interaction Design\n    Foundation.","7a627bce":"# OOP Phase 2: Object building 2\/2","0b263619":"# OOP Phase 0: Get instances (external data)","61b15d1c":"# Design-thinking approach\n\n","f2daa12f":"# Set running mode","70dd21f7":"# OOP Phase 1: Object building 1\/2"}}