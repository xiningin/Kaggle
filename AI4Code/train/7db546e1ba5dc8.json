{"cell_type":{"e5752de3":"code","d2f67eb6":"code","83fe2c89":"code","204f614d":"code","67b994da":"code","3d010d24":"code","496501f8":"code","61fc1e1c":"code","3c02db09":"code","e3efd4b7":"code","8ef88bb3":"code","07ce5508":"code","61541534":"code","fd49c5e3":"code","52f1981c":"code","29b361f2":"markdown","c5295005":"markdown","7ceaf130":"markdown","be853b10":"markdown","bcc99b50":"markdown","563e2d99":"markdown","386b1ee6":"markdown","86ed5354":"markdown","edb9f322":"markdown","65c9d9a1":"markdown","8e6dca21":"markdown","cef4021b":"markdown","4f0cfea7":"markdown","31da6ad8":"markdown","7027b54a":"markdown"},"source":{"e5752de3":"from IPython.display import Image\nImage(\"..\/input\/face-detector\/header-img.jpg\")","d2f67eb6":"# Import Libraries\n\n!pip install imutils\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import MobileNetV2\nfrom tensorflow.keras.layers import AveragePooling2D\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import img_to_array\nfrom tensorflow.keras.preprocessing.image import load_img\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom imutils import paths\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport argparse\nimport os","83fe2c89":"# Initializing the variables the initial learning rate, number of epochs to train for, and batch size\n\nINIT_LR = 1e-4 # Initial learning rate\nEPOCHS = 20 # Number of epochs\nBS = 32 # Batch size\n\nimagePaths = list(paths.list_images(\"..\/input\/facemaskimages\"))\ndata = []\nlabels = []","204f614d":"# Loading images in the data[] and Labels[] variable\n\n# grab the list of images in our dataset directory, then initialize\n# the list of data (i.e., images) and class images\n\nprint(\"[INFO] loading images...\")\n# print(len(imagePaths));\n\n# loop over the image paths\nfor imagePath in imagePaths:\n    # extract the class label from the filename\n    label = imagePath.split(os.path.sep)[-2]\n    # load the input image (224x224) and preprocess it\n    image = load_img(imagePath, target_size=(224, 224))\n    image = img_to_array(image)\n    image = preprocess_input(image)\n    # update the data and labels lists, respectively\n    data.append(image)\n    labels.append(label)\n# convert the data and labels to NumPy arrays\ndata = np.array(data, dtype=\"float32\")\n# print(data)\nlabels = np.array(labels)\n# print(labels)","67b994da":"# perform one-hot encoding on the labels\nlb = LabelBinarizer()\nlabels = lb.fit_transform(labels)\nlabels = to_categorical(labels)\n# partition the data into training and testing splits using 80% of\n# the data for training and the remaining 20% for testing\n(trainX, testX, trainY, testY) = train_test_split(data, labels,\n    test_size=0.20, stratify=labels, random_state=42)\n# construct the training image generator for data augmentation\naug = ImageDataGenerator(\n    rotation_range=20,\n    zoom_range=0.15,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.15,\n    horizontal_flip=True,\n    fill_mode=\"nearest\")\n\n# print(trainX)\n# print(testX)\n# print(trainY)\n# print(testY)","3d010d24":"# load the MobileNetV2 network, ensuring the head FC layer sets are\n# left off\nbaseModel = MobileNetV2(weights=\"imagenet\", include_top=False,\n    input_tensor=Input(shape=(224, 224, 3)))\n# construct the head of the model that will be placed on top of the\n# the base model\nheadModel = baseModel.output\nheadModel = AveragePooling2D(pool_size=(7, 7))(headModel)\nheadModel = Flatten(name=\"flatten\")(headModel)\nheadModel = Dense(128, activation=\"relu\")(headModel)\nheadModel = Dropout(0.5)(headModel)\nheadModel = Dense(2, activation=\"softmax\")(headModel)\n# place the head FC model on top of the base model (this will become\n# the actual model we will train)\nmodel = Model(inputs=baseModel.input, outputs=headModel)\n# loop over all layers in the base model and freeze them so they will\n# *not* be updated during the first training process\nfor layer in baseModel.layers:\n    layer.trainable = False","496501f8":"# compile our model\nprint(\"[INFO] compiling model...\")\nopt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt,\n    metrics=[\"accuracy\"])\n# train the head of the network\nprint(\"[INFO] training head...\")\nH = model.fit(\n    aug.flow(trainX, trainY, batch_size=BS),\n    steps_per_epoch=len(trainX) \/\/ BS,\n    validation_data=(testX, testY),\n    validation_steps=len(testX) \/\/ BS,\n    epochs=EPOCHS)","61fc1e1c":"# make predictions on the testing set\nprint(\"[INFO] evaluating network...\")\npredIdxs = model.predict(testX, batch_size=BS)\n# print(predIdxs)\n\n\n# for each image in the testing set we need to find the index of the\n# label with corresponding largest predicted probability\npredIdxs = np.argmax(predIdxs, axis=1)\n# show a nicely formatted classification report\nprint(classification_report(testY.argmax(axis=1), predIdxs, target_names=lb.classes_))\n# serialize the model to disk\n# print(\"[INFO] saving mask detector model...\")\n# model.save(\".\/mask_detector.model\", save_format=\"h5\")","3c02db09":"# plot the training loss and accuracy\nN = EPOCHS\nplt.style.use(\"ggplot\")\nplt.figure()\nplt.plot(np.arange(0, N), H.history[\"loss\"], label=\"train_loss\")\nplt.plot(np.arange(0, N), H.history[\"val_loss\"], label=\"val_loss\")\nplt.plot(np.arange(0, N), H.history[\"accuracy\"], label=\"train_acc\")\nplt.plot(np.arange(0, N), H.history[\"val_accuracy\"], label=\"val_acc\")\nplt.title(\"Training Loss and Accuracy\")\nplt.xlabel(\"Epoch #\")\nplt.ylabel(\"Loss\/Accuracy\")\nplt.legend(loc=\"lower left\")\nplt.savefig(\".\/plot.png\")","e3efd4b7":"# import the necessary packages\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import img_to_array\nfrom tensorflow.keras.models import load_model\nimport numpy as np\nimport argparse\nimport cv2\nimport os","8ef88bb3":"# load our serialized face detector model from disk\nprint(\"[INFO] loading face detector model...\")\nprototxtPath = \"..\/input\/face-detector\/deploy.prototxt\"\nweightsPath = \"..\/input\/face-detector\/res10_300x300_ssd_iter_140000.caffemodel\"\n\nprint(prototxtPath)\nprint(weightsPath)\n\nnet = cv2.dnn.readNet(prototxtPath, weightsPath)\n# load the face mask detector model from disk\n# print(\"[INFO] loading face mask detector model...\")\n# model = load_model(r\".\/mask_detector.model\")","07ce5508":"# Function load the input image from disk, clone it, and grab the image spatial\n# dimensions\n\ndef plot_image(imagepath):\n#     print(imagepath)\n    image = cv2.imread(imagepath)\n\n    orig = image.copy()\n    (h, w) = image.shape[:2]\n    # construct a blob from the image\n    blob = cv2.dnn.blobFromImage(image, 1.0, (300, 300),\n        (104.0, 177.0, 123.0))\n    # pass the blob through the network and obtain the face detections\n#     print(\"[INFO] computing face detections...\")\n    net.setInput(blob)\n    detections = net.forward()\n    \n    # loop over the detections\n    for i in range(0, detections.shape[2]):\n        # extract the confidence (i.e., probability) associated with\n        # the detection\n        confidence = detections[0, 0, i, 2]\n        # filter out weak detections by ensuring the confidence is\n        # greater than the minimum confidence\n        if confidence > 0.5:\n            # compute the (x, y)-coordinates of the bounding box for\n            # the object\n            box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])\n            (startX, startY, endX, endY) = box.astype(\"int\")\n            # ensure the bounding boxes fall within the dimensions of\n            # the frame\n            (startX, startY) = (max(0, startX), max(0, startY))\n            (endX, endY) = (min(w - 1, endX), min(h - 1, endY))\n            # extract the face ROI, convert it from BGR to RGB channel\n            # ordering, resize it to 224x224, and preprocess it\n            face = image[startY:endY, startX:endX]\n            face = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)\n            face = cv2.resize(face, (224, 224))\n            face = img_to_array(face)\n            face = preprocess_input(face)\n            face = np.expand_dims(face, axis=0)\n            # pass the face through the model to determine if the face\n            # has a mask or not\n            (mask, withoutMask) = model.predict(face)[0]\n            # determine the class label and color we'll use to draw\n            # the bounding box and text\n            label = \"Mask\" if mask > withoutMask else \"No Mask\"\n            color = (0, 255, 0) if label == \"Mask\" else (0, 0, 255)\n            # include the probability in the label\n#             print(\"{} {:.2f}%\".format(\"\", max(mask, withoutMask) * 100))\n            label = \"{}:{:.2f}%\".format(label, max(mask, withoutMask) * 100)\n#             print(label)\n            # display the label and bounding box rectangle on the output\n            # frame\n            cv2.putText(image, label, (startX, startY - 10),\n                cv2.FONT_HERSHEY_SIMPLEX, 3, color, 10)\n            cv2.rectangle(image, (startX, startY), (endX, endY), color, 20)\n\n            # show the output image\n    image=cv2.cvtColor(image,cv2.COLOR_BGR2RGBA)\n    plt.grid(False)\n    plt.axis('off')\n    plt.imshow(image)","61541534":"# Creating data for test images\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nTestImagePath = []\n\nimport os\nfor dirname, _, filenames in os.walk('..\/input\/testimages'):\n    for filename in filenames:\n        TestImagePath.append(os.path.join(dirname, filename))\n#         print(os.path.join(dirname, filename))","fd49c5e3":"# verification of several images\nimport matplotlib.pyplot as plt\nnum_rows=4\nnum_cols=4\nnum_images=num_rows*num_cols\n\nplt.figure(figsize=(2*2*num_cols,3*num_rows))\ni=1\nfor i in range(num_images):\n    plt.subplot(num_rows, 2*num_cols, 2*i+1)\n    plot_image(TestImagePath[i])\n    \nplt.show()","52f1981c":"print(\"Notebook completd!\")","29b361f2":"# Plot the training loss and accuracy","c5295005":"\n**Technology:** Keras, Tensorflow, MobileNet, and OpenCV\n**Domain:** Image Identification \/ Classification\n\n#Keras, #Tensorflow, #MobileNet, #OpenCV, #FaceMaskDetection #FaceMask, #ViratKothari, #Covid19, #Corona\n\n**About:** In this notebook we are building a Face Mask Detector using Keras, Tensorflow, MobileNet and OpenCV. This can be applied on images as well as live video camera footage. This can be extreamly useful if this can be integrated with the CCTV cameras to detect and identify people without masks.\n\nThe model is quite accurate. We are using MobileNetV2 architecture which is computationally efficient and thus the model can be deployed to embedded systems like Raspberry Pi, Google Coral, etc.\n\n**Problem Statement:** To detect whether the person has wear a mark or not\n\n**We will use GPU for this notebook to speed up process.**","7ceaf130":"# Initializing variables","be853b10":"# Compiling Model","bcc99b50":"# Face Mask Detection Using Keras, Tensorflow, MobileNet, and OpenCV","563e2d99":"# Fuction to show image with Face Mask detection","386b1ee6":"# Displaying image","86ed5354":"# Import Libraries","edb9f322":"# Loading Test Images for testing","65c9d9a1":"# Using Caffemodel for prediction","8e6dca21":"# Make Prediction and Saving Model","cef4021b":"# Building Model using MobileNetV2","4f0cfea7":"# Face Mask Detection on Images","31da6ad8":"# Performing one-hot encoding","7027b54a":"# Loading Images"}}