{"cell_type":{"4ac5d416":"code","fcd91d6a":"code","ccfe4f12":"code","3b063f43":"code","d48e710a":"code","49743b50":"code","e9f3bd2f":"code","e560ccaa":"code","306b101f":"code","e860fd5a":"code","b3819b55":"code","03597a55":"code","0700163f":"code","a4098c48":"code","61db9a9d":"code","4664807c":"code","79a8cdf7":"code","d5b1d3eb":"markdown","6e73de54":"markdown","7f4b96b6":"markdown","6ac377de":"markdown"},"source":{"4ac5d416":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fcd91d6a":"data= pd.read_csv('\/kaggle\/input\/years-of-experience-and-salary-dataset\/Salary_Data.csv')","ccfe4f12":"data.shape","3b063f43":"data.info()","d48e710a":"data.head()","49743b50":"x=data['YearsExperience'].values\ny=data['Salary'].values\nplt.scatter(x, y)\nplt.xlabel(\"Years of Experience\")\nplt.ylabel(\"Salary\")\nplt.show()","e9f3bd2f":"x_mean=np.mean(x)\ny_mean=np.mean(y)","e560ccaa":"## calculation of line's m and b \n\nx_num = x-x_mean\ny_num = y-y_mean\nm=(sum(x_num*y_num))\/(sum(x_num*x_num))","306b101f":"m","e860fd5a":"b=y_mean-(m*x_mean)","b3819b55":"b","03597a55":"y1 = m*x+b\nplt.plot(x, y1, '-r',label='Best Fit Line')\nplt.scatter(x, y)\nplt.xlabel(\"Years of Experience\")\nplt.ylabel(\"Salary\")\nplt.show()","0700163f":"def fit(x,y):\n    x_num = x-x_mean\n    y_num = y-y_mean\n    m=(sum(x_num*y_num))\/(sum(x_num*x_num))\n    b=y_mean-(m*x_mean)\n    return m,b\n    \ndef predict(val):\n    m,b=fit(x,y)\n    return (m*val)+b\n    ","a4098c48":"fit(x,y)","61db9a9d":"predict(7.8)","4664807c":"class LinearRegression:\n    def __init__(self):\n        self.x_mean=0\n        self.y_mean=0\n        self.m=0\n        self.b=0\n    def fit (self,x,y):\n        self.x=x\n        self.y=y\n        self.x_mean=np.mean(self.x)\n        self.y_mean=np.mean(self.y)\n        var1=(self.x-self.x_mean)*(self.y-self.y_mean)\n        var2=(self.x-self.x_mean)**2\n        self.m=(sum(var1)\/sum(var2))\n        self.b=self.y_mean-(self.m*self.x_mean)\n    \n    def predict(self,X):\n        return (self.m*X+self.b)","79a8cdf7":"model=LinearRegression()\nmodel.fit(x,y)\nmodel.predict(7.8)","d5b1d3eb":"##  Linear Regression algorithm from scratch which can handle 2D datasets using the OLS method.\n\n   ### 1.The fit method, which will be used to train your model.\n   ### 2.The predict method, which will do the prediction.","6e73de54":"## Function like linear_model.LinearRegression(), which has fit amd predict method","7f4b96b6":"### according to the above eqution \n\n        x_num = x-x_mean\n        y_num = y-y_mean\n        m=(sum(x_num*y_num))\/(sum(x_num*x_num))\n        b=y_mean-(m*x_mean)\n        ","6ac377de":"# OLS (Ordinary Least Square Method) \n\n- This method reduces the sum of the squared errors between the train data and the test data.This method is an alternative of Gradient Desent.\n- Gredient Desent is used for higher dimension data\n- OLS is used for low dimension data due to high expensive cost.\n- calculation :\n\n- - - -  - - - - - -- - --\n![image.png](attachment:image.png)"}}