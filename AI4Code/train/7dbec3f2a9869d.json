{"cell_type":{"1aee10c7":"code","2b2f5216":"code","be8eeeee":"code","34fd9ddf":"code","dec9d67f":"code","d7d08915":"code","3adc9575":"code","ffcc4c8b":"code","c144e416":"code","d8a58394":"code","7bbdc061":"code","e24862c7":"code","5b430f48":"code","c5504d51":"code","9477dc6d":"code","dfedfd05":"code","e087fd8b":"code","9a31cc75":"code","0adcc703":"code","b1a06181":"code","bf3ce9b6":"code","2c3f48b4":"code","6f42c9e7":"code","84a0feed":"code","33dfdf78":"code","2fed4420":"code","fb6bb3f0":"code","739196e0":"code","6f83a186":"code","6aec0aae":"code","638c802c":"code","ed100926":"code","8b33db7b":"code","f506a896":"code","2c339d7c":"code","58ab8bbb":"code","def4a3ce":"code","ad214f96":"code","9b73f1e1":"code","86400a43":"code","e19df391":"code","f1a97f89":"code","d07e12ea":"code","6ec5d606":"code","2355f235":"code","72128aa6":"code","72e04859":"code","b2f7f6b4":"code","84b67e20":"code","20514d81":"code","38df603b":"code","b992f312":"code","a6d611d7":"code","7564c2c8":"code","e459f44d":"code","9ea00548":"code","e7a81ee5":"code","2e95b9c4":"code","8c5f6fd2":"markdown","07730081":"markdown","c22e859c":"markdown","a805c3e5":"markdown","2422dc37":"markdown","d6e2a084":"markdown","d0fa7fa4":"markdown","5fb23930":"markdown","8368bac3":"markdown","39e7af1b":"markdown","56b3240b":"markdown","9670e860":"markdown","f8bfb9c2":"markdown","af077e23":"markdown","96649218":"markdown","775947fb":"markdown","f7a84ca6":"markdown","4253d553":"markdown","fd36fcbc":"markdown"},"source":{"1aee10c7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\npd.set_option('display.max_columns', None)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","2b2f5216":"df= pd.read_csv('..\/input\/zomato-bangalore-restaurants\/zomato.csv')\ndf.head(2)","be8eeeee":"a,b=df.shape  # Since shape return tuple thus storing value in a and b \nprint('Data Point= ',a*b)\ndf.shape","34fd9ddf":"# Counting NaN in each Columns\n# We can also df.info()\ndf.isnull().sum()","dec9d67f":"# .info helps us check NaN values and data type of each column\ndf.info()","d7d08915":"# Dropping Url and Phone no as they are useless for this project\n\n\ndf.drop(['url','phone','dish_liked'], axis =1, inplace=True)","3adc9575":"# Dropping duplicates.\n\nprint('Number of Dublicate values in Data Frame = ',df.duplicated().sum())\ndf.drop_duplicates(inplace=True)","ffcc4c8b":"# Remove the NaN values from the dataset\ndf.dropna(how='any',inplace=True)","c144e416":"# clean Rating column\n#Removing '\/5' from Rates\n\ndf['rate'].unique()\ndf = df.loc[df.rate !='NEW']\ndf = df.loc[df.rate !='-'].reset_index(drop=True)\nremove_slash = lambda x: x.replace('\/5', '') if type(x) == np.str else x\ndf.rate = df.rate.apply(remove_slash).str.strip().astype('float')\ndf['rate'].head()","d8a58394":"# Cleaning individual columns.\n\n\n# Cost for 2 people is in object data type we need to convert it to int\ndf['approx_cost(for two people)'] = df['approx_cost(for two people)'].astype(str)\ndf['approx_cost(for two people)'] = df['approx_cost(for two people)'].apply(lambda x: x.replace(',','.'))\ndf['approx_cost(for two people)'] = df['approx_cost(for two people)'].astype(float)\ndf.info()","7bbdc061":"# Checking no of resturants listed on Zomato\n# There are 8792 resturants listed on Zomato in Bangalore city\n\n\n# k = df.name.unique()\n# len(k)\n\ndf.name.value_counts()","e24862c7":"df.location.value_counts()\nplt.figure(figsize=(20,7))\nplt.xticks(rotation=90)\nsns.countplot('location', data=df);","5b430f48":"plt.figure(figsize=(20,7))\nplt.xticks(rotation=90)\nsns.countplot('listed_in(city)', data=df);","c5504d51":"# Famous restaurant chains in Bengaluru\nplt.figure(figsize=(15,7))\nchains=df['name'].value_counts()[:25]\nsns.barplot(x=chains,y=chains.index,palette='Set1')\nplt.title(\"25 Most Famous restaurant chains in Bangaluru on Zomato\",size=20,pad=20)\nplt.xlabel(\"Number of outlets\",size=15);","9477dc6d":"# Highest Voted Restaurant\n# df.groupby('name')['votes'].max().nlargest(10).plot.bar()\n\ny = df.groupby('name')['votes'].max().nlargest(20).index \nx = df.groupby('name')['votes'].max().nlargest(20)\n\nplt.figure(figsize=(15,7))\nsns.barplot(x,y,palette='Set1');\nplt.title(\"20 Most voted restaurant in Bangaluru on Zomato\",size=20,pad=20)\nplt.xlabel(\"Number of votes\",size=15);\nplt.ylabel(\"Name of Resturant\",size=15);","dfedfd05":"# Top 20 Most Expensive restaurant with approx cost for 2 people\ndata=df.copy()\ndata.set_index('name',inplace=True)\n\nplt.figure(figsize=(15,20))\nplt.subplot(2,1,1)\nsns.barplot(x = data['approx_cost(for two people)'].nlargest(70),y = data['approx_cost(for two people)'].nlargest(70).index,palette='Set1');\nplt.title(\"15 Most expensive restaurant in Bangaluru on Zomato\",size=20,pad=20)\nplt.xlabel(\"Avg Cost for two\",size=15);\nplt.ylabel(\"Name of Resturant\",size=15);\n\n\nplt.subplot(2,1,2)\nsns.barplot(x = data['approx_cost(for two people)'].nsmallest(30),y = data['approx_cost(for two people)'].nsmallest(30).index,palette='Set1');\nplt.title(\"15 Least expensive restaurant in Bangaluru on Zomato\",size=20,pad=20)\nplt.xlabel(\"Avg Cost for two\",size=15);\nplt.ylabel(\"Name of Resturant\",size=15);\n\n# Location\n\ndf.groupby('location')['name'].unique()\n\nrestaurant=[] \nlocation=[]\nfor key,location_df in df.groupby('location'):\n    location.append(key)\n    restaurant.append(len(location_df['name'].unique()))\n    \ndf_total=pd.DataFrame(zip(location,restaurant)) #creating data frame\ndf_total.columns=['location','restaurant']\ndf_total.set_index('location',inplace=True)\n# df_total.sort_values(by='restaurant').tail(10)\n\n\n\n\ndf_total.sort_values(by='restaurant', ascending=False).head(20).plot.bar(figsize=(11,7));\n# sns.barplot(x = df_total.sort_values(by='restaurant', ascending=False).tail(20) ,y = df_total.sort_values(by='restaurant', ascending=False).tail(20).index ,palette='Set1')\nplt.title(\"20 Most dense location for restaurant in Bangaluru on Zomato\",size=20,pad=20);\nplt.xlabel(\"Location\",size=15);\nplt.ylabel(\"Number of Resturant\",size=15);\n\n\n#data['approx_cost(for two people)'].nlargest(10).plot.bar()","e087fd8b":"# Why sns is not working with this df_total\n\n'''df.groupby('location')['name'].unique()\n\nrestaurant=[] \nlocation=[]\nfor key,location_df in df.groupby('location'):\n    location.append(key)\n    restaurant.append(len(location_df['name'].unique()))\n    \ndf_total=pd.DataFrame(zip(location,restaurant)) #creating data frame\ndf_total.columns=['location','restaurant']\ndf_total.set_index('location',inplace=True)\n# df_total.sort_values(by='restaurant').tail(20)\n\ndf_total.sort_values(by='restaurant').tail(20).plot.bar()\n\n# sns.barplot(x = df_total.sort_values(by='restaurant').tail(20) ,y = df_total.sort_values(by='restaurant').tail(20).index ,palette='Set1')\nplt.title(\"20 Most dense location for restaurant in Bangaluru on Zomato\",size=20,pad=20)\nplt.xlabel(\"Avg Cost for two\",size=15)\nplt.ylabel(\"Name of Resturant\",size=15)\n''';","9a31cc75":"df['listed_in(city)'].value_counts()","0adcc703":"df['listed_in(type)'].value_counts()","b1a06181":"pie, ax = plt.subplots(figsize=[15,10])\nplt.subplot(1,3,1)\nlabels = df['listed_in(type)'].value_counts().keys()\nplt.pie(x=df['listed_in(type)'].value_counts(), autopct=\"%.1f%%\", explode=[0.05]*7, labels=labels, pctdistance=0.5,shadow=True)\nplt.title(\"Resturant listed by\", fontsize=14);\npie.savefig(\"Resturant listed by.png\")\n\nplt.subplot(1,3,2)\nlabels = df['rest_type'].value_counts()[:15].keys()\nplt.pie(x=df['rest_type'].value_counts()[:15], autopct=\"%.1f%%\", explode=[0.05]*15, labels=labels, pctdistance=0.5,shadow=True)\nplt.title(\"Resturant by Food type\", fontsize=14);\npie.savefig(\"Resturant by Food type.png\")\n\nplt.subplot(1,3,3)\nx=df['online_order'].value_counts()\nlabels=['accepted','not accepted']\nplt.title(\"Restuarants do not accept online orders\", fontsize=14);\nplt.pie(x,explode=[0.0,0.1],autopct='%1.1f%%', labels=labels)\n\nplt.tight_layout()","bf3ce9b6":"plt.subplot(1,2,1)\nsns.countplot('book_table', data=df)\n\nplt.subplot(1,2,2)\nsns.countplot('online_order', data=df)\n\n\nplt.tight_layout()\n\n","2c3f48b4":"cu = df['cuisines'].value_counts()[:12] # top 12\nplt.figure(figsize=(8,4))\nplt.grid(True)\nsns.barplot(cu,cu.index)","6f42c9e7":"print('Mean cost for eating for 2 person = ', df['approx_cost(for two people)'].mean())","84a0feed":"plt.figure(figsize=(15,4))\nplt.suptitle(\"Cost of meal for 2\", fontweight='bold', fontsize=15)\n\nplt.subplot(1,3,1)\nsns.distplot(df['approx_cost(for two people)'])\n\nplt.subplot(1,3,2)\nsns.boxplot(x=df['approx_cost(for two people)'])\n\nplt.subplot(1,3,3)\ndf['approx_cost(for two people)'].hist()\n\nplt.tight_layout()","33dfdf78":"plt.figure(figsize=(15,4))\nplt.suptitle(\"Votes\", fontweight='bold', fontsize=15)\n\nplt.subplot(1,3,1)\nsns.distplot(df['votes'])\n\nplt.subplot(1,3,2)\nsns.boxplot(x=df['votes'])\n\nplt.subplot(1,3,3)\ndf.votes.hist()\n\nplt.tight_layout()","2fed4420":"plt.figure(figsize=(15,4))\nplt.suptitle(\"Rating\", fontweight='bold', fontsize=15)\n\nplt.subplot(1,3,1)\nsns.distplot(df['rate'])\n\nplt.subplot(1,3,2)\nsns.boxplot(x=df['rate'])\n\nplt.subplot(1,3,3)\ndf.rate.hist()\n\nplt.tight_layout()","fb6bb3f0":"#Encode the input Variables\ndef Encode(df):\n    for column in df.columns[~df.columns.isin(['rate', 'approx_cost(for two people)', 'votes'])]:\n        df[column] = df[column].factorize()[0]\n    return df\n\nzomato = Encode(df.copy())\nzomato.head(2)","739196e0":"plt.figure(figsize=(13,10))\nsns.heatmap(zomato.corr(), annot=True);","6f83a186":"from sklearn.feature_selection import mutual_info_regression","6aec0aae":"y=zomato['rate']\nx=zomato.drop('rate', axis=1)","638c802c":"mi=mutual_info_regression(x,y)\n\nmi=pd.Series(mi)\nmi.index=x.columns\nmi.sort_values(ascending=False).plot.bar(figsize=(7,4));","ed100926":"from sklearn.ensemble import ExtraTreesRegressor\nmodel=ExtraTreesRegressor()\nmodel.fit(x,y)","8b33db7b":"# Plot on graph\nfi= pd.Series(model.feature_importances_,index=x.columns)\nfi.nlargest(12).plot(kind='barh',figsize=(10,6))\nplt.title(\"Feature Importance\/Extra Trees\")\nplt.show()","f506a896":"plt.figure(figsize=(20,7))\n\nplt.subplot(1,3,1)\nsns.scatterplot(x=\"rate\",y='approx_cost(for two people)',hue='online_order',data=df)\n\nplt.subplot(1,3,2)\nsns.scatterplot(x=\"rate\",y='online_order',hue='votes',data=df)\n\nplt.subplot(1,3,3)\nplt.grid(True)\nsns.barplot(x='votes',y='online_order',data=df)\n#sns.scatterplot(x=\"votes\",y='online_order',data=df)\n\nplt.show()","2c339d7c":"plt.subplot(1,2,1)\nsns.boxplot(x='online_order',y='votes',data=df)\n\n# Analysing the affects of price on the basis of the fact that a restaurant is accepting the orders online or not.\nplt.subplot(1,2,2)\nplt.title(\"Affect of cosr on mode of order\")\nsns.boxplot(x='online_order',y='approx_cost(for two people)',data=df)\n\nplt.tight_layout()","58ab8bbb":"!pip install geopy","def4a3ce":"from geopy.geocoders import Nominatim","ad214f96":"len(df['location'].unique())\nlocations=pd.DataFrame({\"Name\":df['location'].unique()})\nlocations['new_Name']='Bangalore '+locations['Name']","9b73f1e1":"locations.head(3)","86400a43":"# We have found out latitude and longitude of each location listed in the dataset using geopy.\n\nlat_lon=[] # list that will store the lat and lon\ngeolocator=Nominatim(user_agent=\"app\") # to establish connection \nfor location in locations['Name']:\n    location = geolocator.geocode(location)\n    if location is None:\n        lat_lon.append(np.nan) # if no location is there\n    else:    \n        geo=(location.latitude,location.longitude)\n        lat_lon.append(geo)","e19df391":"locations['geo_loc']=lat_lon\nlocations.to_csv('zomato_locations.csv',index=False)","f1a97f89":"locations.head(3)","d07e12ea":"# This is used to plot maps\nRest_locations=pd.DataFrame(df['location'].value_counts().reset_index())\nRest_locations.columns=['Name','count']\nRest_locations.head(3)","6ec5d606":"# now combine both the dataframes\nRestaurant_locations=Rest_locations.merge(locations,on='Name',how=\"left\").dropna()\nRestaurant_locations.head(3)","2355f235":"def generateBaseMap(default_location=[12.97, 77.59], default_zoom_start=12):\n    base_map = folium.Map(location=default_location, zoom_start=default_zoom_start)\n    return base_map\n\nnp.array(Restaurant_locations['geo_loc'])\n\n#################### unzip it  ##################################\nlat,lon=zip(*np.array(Restaurant_locations['geo_loc']))","72128aa6":"# Adding lat and lon\n\nRestaurant_locations['lat']=lat\nRestaurant_locations['lon']=lon\n\nRestaurant_locations.head(3)","72e04859":"!pip install folium","b2f7f6b4":"import folium\nfrom folium.plugins import HeatMap\nbasemap=generateBaseMap()","84b67e20":"HeatMap(Restaurant_locations[['lat','lon','count']].values.tolist(),zoom=20,radius=15).add_to(basemap)","20514d81":"basemap","38df603b":"df_url=pd.read_csv('..\/input\/zomato-bangalore-restaurants\/zomato.csv')","b992f312":"df2= df_url[df_url['cuisines']=='North Indian']\ndf2.head()\nnorth_india=df2.groupby(['location'],as_index=False)['url'].agg('count')\nnorth_india.columns=['Name','count']\nnorth_india.head()","a6d611d7":"north_india=north_india.merge(locations,on=\"Name\",how='left').dropna()\nnorth_india.head(3)","7564c2c8":"north_india['lan'],north_india['lon']=zip(*north_india['geo_loc'].values)\nnorth_india.drop(['geo_loc'],axis=1)","e459f44d":"basemap=generateBaseMap()\nHeatMap(north_india[['lan','lon','count']].values.tolist(),zoom=20,radius=15).add_to(basemap)\nbasemap","9ea00548":"df3= df[df['cuisines']=='South Indian']\nsouth_india=df2.groupby(['location'],as_index=False)['url'].agg('count')\nsouth_india.columns=['Name','count']\nsouth_india=south_india.merge(locations,on=\"Name\",how='left').dropna()\nsouth_india['lan'],south_india['lon']=zip(*south_india['geo_loc'].values)\n\nsouth_india=south_india.drop(['geo_loc'],axis=1)\n# south_india.head()\n\nbasemap=generateBaseMap()\nHeatMap(south_india[['lan','lon','count']].values.tolist(),zoom=20,radius=15).add_to(basemap)\nbasemap","e7a81ee5":"zomato.location.unique()","2e95b9c4":"df.head(3)","8c5f6fd2":"<a id=4>\n    \n# Feature Selection\n    \n ","07730081":"<a id=69>\n\n# Reference\n\n* [For EDA](https:\/\/www.kaggle.com\/chirag9073\/zomato-restaurants-analysis-and-prediction#Regression-Analysis)","c22e859c":"### Resturants serving South Indian Cuisine","a805c3e5":"### Resturants serving North Indian Cuisine","2422dc37":"### Analysing relation between approx_cost(for two people) and rating","d6e2a084":"<a id=5>\n\n## 1. Pearson Correlation\n    \n    \nThe Pearson correlation method is the most common method to use for numerical variables; it assigns a value between \u2212 1 and 1, where 0 is no correlation, 1 is total positive correlation, and \u2212 1 is total negative correlation. This is interpreted as follows: a correlation value of 0.7 between two variables would indicate that a significant and positive relationship exists between the two. A positive correlation signifies that if variable A goes up, then B will also go up, whereas if the value of the correlation is negative, then if A increases, B decreases.\n[Source](https:\/\/www.sciencedirect.com\/topics\/computer-science\/pearson-correlation)","d0fa7fa4":"### North Indian Resturants zone\n","5fb23930":"<a id=1>\n\n# Data Preprocessing\n\n![Data-Preprocessing.png](attachment:7f3d75d8-eedb-4593-8be6-9d81306fba1c.png)\n    \n[Image Source](https:\/\/www.geeksforgeeks.org\/data-preprocessing-in-data-mining\/)","8368bac3":"#### Columns description\n\n1. url contains the url of the restaurant in the zomato website\n\n2. address contains the address of the restaurant in Bengaluru\n\n3. name contains the name of the restaurant\n\n4. online_order whether online ordering is available in the restaurant or not\n\n5. book_table table book option available or not\n\n6. rate contains the overall rating of the restaurant out of 5\n\n7. votes contains total number of rating for the restaurant as of the above mentioned date\n\n8. phone contains the phone number of the restaurant\n\n9. location contains the neighborhood in which the restaurant is located\n\n10. rest_type restaurant type\n\n11. dish_liked dishes people liked in the restaurant\n\n12. cuisines food styles, separated by comma\n\n13. approx_cost(for two people) contains the approximate cost for meal for two people\n\n14. reviews_list list of tuples containing reviews for the restaurant, each tuple\n\n15. menu_item contains list of menus available in the restaurant\n\n16. listed_in(type) type of meal\n\n17. listed_in(city) contains the neighborhood in which the restaurant is listed","39e7af1b":"<a id=7>\n\n## Feature Importance( **ExtraTrees** )\n    \n    \nExtremely Randomized Trees Classifier(Extra Trees Classifier) is a type of ensemble learning technique which aggregates the results of multiple de-correlated decision trees collected in a \u201cforest\u201d to output it\u2019s classification result. In concept, it is very similar to a Random Forest Classifier and only differs from it in the manner of construction of the decision trees in the forest.\n\nEach Decision Tree in the Extra Trees Forest is constructed from the original training sample. Then, at each test node, Each tree is provided with a random sample of k features from the feature-set from which each decision tree must select the best feature to split the data based on some mathematical criteria (typically the Gini Index). This random sample of features leads to the creation of multiple de-correlated decision trees.\n\nTo perform feature selection using the above forest structure, during the construction of the forest, for each feature, the normalized total reduction in the mathematical criteria used in the decision of feature of split (Gini Index if the Gini Index is used in the construction of the forest) is computed. This value is called the Gini Importance of the feature. To perform feature selection, each feature is ordered in descending order according to the Gini Importance of each feature and the user selects the top k features according to his\/her choice.\n    \n[Read More](https:\/\/www.geeksforgeeks.org\/ml-extra-tree-classifier-for-feature-selection\/)","56b3240b":"<a id=2>\n    \n# Visualization","9670e860":"![zomato-infinity-dining-916x516-1-916x516.jpg](attachment:a2a52b4b-660d-46b7-937c-558e11cad4fe.jpg)","f8bfb9c2":"<a id=15>\n    \n    \n## Location","af077e23":"### Analysing the affects of votes on the basis of the fact that a restaurant is accepting the orders online or not.","96649218":"# In next update I will add\n1. Mutual Information\n2. Machine learning to predict rating of newly opened resturant.\n\n### **RECOMMENDATION SYSTEM** (Not sure will add in this notebook or new)","775947fb":"![ai-or-unsupervised-machine-learning--381874.jpg](attachment:b1e53d66-b0a2-4cc4-9d08-ad6de1bd7bd1.jpg)","f7a84ca6":"<a id=6>\n    \n    \n## 2. Mutual Information\n\nThe Mutual Information between two random variables measures non-linear relations between them. Besides, it indicates how much information can be obtained from a random variable by observing another random variable.\n\nIt is closely linked to the concept of entropy. This is because it can also be known as the reduction of uncertainty of a random variable if another is known. Therefore, a high mutual information value indicates a large reduction of uncertainty whereas a low value indicates a small reduction. If the mutual information is zero, that means that the two random variables are independent.\n\n**But, how is mutual information calculated?**\n[Answer](https:\/\/quantdare.com\/what-is-mutual-information\/)","4253d553":"# What I will cover in this notebook\n1. [Data Preprocessing](#1)\n2. [Data Visualization](#2)\n3. [Data Preprocessing for ml model](#3)\n    * [Feature Selection](#4)\n        * [Pearson Correlation](#5)\n        * [Mutual Information](#6)\n        * [Feature Importance](#7)\n        * [Location](#15)\n        \n4. Predict rating of newly opened restaurants\n5. Will create a Recommendation system though not sure weather in this notebook or not\n\n* [Reference](#69)","fd36fcbc":"<a id=3>\n    \n# Pre-procesing for Machine Learning"}}