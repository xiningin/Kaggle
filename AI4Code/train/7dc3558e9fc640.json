{"cell_type":{"096e4883":"code","365ddd60":"code","7b06451d":"code","ebe4eb4f":"code","d2a40a08":"code","4bfae69a":"code","bc034454":"code","40c8392b":"code","7c3c91c6":"code","3c69e943":"code","ae43a8ca":"code","1f625ebd":"code","a8ebeccc":"code","6e9ddb95":"code","9d0d4035":"code","e7eb1b94":"code","5f153da5":"code","b28ca00f":"code","6b729f27":"code","d8a31dc9":"code","40d2f46c":"code","286e822e":"code","6599a4f0":"code","7544c537":"code","f83efc8b":"code","22995f79":"code","cc334a02":"code","1d554687":"code","d071cb24":"code","07239a4a":"code","600dbcf2":"code","dea6df12":"code","7cdda55c":"code","87c47f8a":"code","8e6ba647":"code","eb6d79ec":"code","0181f651":"code","06ae4117":"code","056eae04":"code","a46f3bf8":"code","7eab6dbe":"code","f5587624":"code","2eb1a56c":"code","c9915b24":"code","e714bcac":"code","5d463806":"code","9afb5310":"markdown","f641b0e8":"markdown","2a309ef5":"markdown","726a785d":"markdown","865185a0":"markdown","8e585657":"markdown"},"source":{"096e4883":"def gender(height, weight):\n    if height > 172:\n        ","365ddd60":"def gender(height, weight):\n    if height > 172:\n        if weight > 70:\n            return 'M'\n        else:\n            return 'F'\n    else:\n        if weight > 60:\n            return 'M'\n        else:\n            return 'F'","7b06451d":"def gender(height, weight):\n    if height > 172:\n        return \"M\"\n    else:\n        return 'F'","ebe4eb4f":"def check(height, weight, ground_gender): #test the guess is right or wrong\n    prediction = gender(height, weight)\n    if prediction == ground_gender:\n        return True\n    else:\n        return False","d2a40a08":"print(check(153, 42, 'F')) #153 42 F\nprint(check(180, 75, 'M'))\nprint(check(172, 63, 'M'))\nprint(check(169, 80, 'M'))\nprint(check(192, 62, 'F'))\nprint(check(153, 58, 'F'))","4bfae69a":"def check(height, weight, ground_gender): #test the guess is right or wrong\n    prediction = gender(height, weight)\n    if prediction == ground_gender:\n        return True\n    else:\n        return False\n\nresult = []\nresult.append(check(153, 42, 'F'))\nresult.append(check(180, 75, 'M'))\nresult.append(check(172, 63, 'M'))\nresult.append(check(169, 80, 'M'))\nresult.append(check(160, 56, 'F'))\nresult.append(check(173, 60, 'M'))\nresult.append(check(147, 40, 'F'))\nresult.append(check(189, 90, 'M'))\nresult.append(check(164, 57, 'F'))\nresult.append(check(181, 52, 'F'))\nresult.append(check(187, 82, 'M'))\nresult.append(check(153, 58, 'F'))\nresult.append(check(192, 62, 'F'))\nresult.append(check(172, 72, 'M'))\nresult.append(check(192, 92, 'M'))\nprint(result)\n\ndef accuracy(result):\n    count = 0\n    for oneres in result:\n        if oneres:\n            count = count + 1\n    return count\/len(result)\n\nprint(accuracy(result))","bc034454":"import math\ndef sim(x1, y1, x2, y2):\n    a = x1 - x2\n    b = y1 - y2\n    c = math.sqrt(a*a+b*b)\n    return c\n\nprint(sim(153, 42, 165, 50)) #|Q, P1|\nprint(sim(180, 75, 165, 50)) #|Q, P2|\nprint(sim(172, 63, 165, 50)) #|Q, P3|\nprint(sim(169, 80, 165, 50)) #|Q, P4|\nprint(sim(160, 56, 165, 50)) #|Q, P5|","40c8392b":"\nimport math\ndef sim(P, Q):\n    x1 = P[0]\n    x2 = Q[0]\n    y1 = P[1]\n    y2 = Q[1]\n    a = x1 - x2\n    b = y1 - y2\n    c = math.sqrt(a*a+b*b)\n    return c","7c3c91c6":"P1 = [153, 42]\nP2 = [180, 75]\nP3 = [172, 63]\nP4 = [169, 80]\nP5 = [160, 56]\nP6 = [173, 60]\nQ = [165, 50]\nprint(sim(P1, Q))\nprint(sim(P2, Q))\nprint(sim(P3, Q))\nprint(sim(P4, Q))\nprint(sim(P5, Q))","3c69e943":"Pall = [P1, P2, P3, P4, P5, P6]\ngenderall = [\"F\", \"M\", 'M', 'M', 'F', 'M']\nresult = []\nfor P in Pall:\n    result.append(sim(P, Q))\nprint(result)\n\nmaxval = 1000000.0\nindex = -1\nfor i in range(len(Pall)):\n    if result[i] < maxval:\n        maxval = result[i]\n        index = i\nprint(index)\nprint(genderall[index])\n","ae43a8ca":"import math\n# Q = [160, 50]\nQ = [187, 82]\nP1 = [153, 42]\nP2 = [180, 75]\nP3 = [172, 63]\nP4 = [169, 80]\nP5 = [160, 56]\nP6 = [173, 60]\nP7 = [147, 40]\nP8 = [189, 90]\nP9 = [164, 57]\nP10 = [181, 52]\n\n\ndef sim(A1, A2):\n    x1 = A1[0]\n    y1 = A1[1]\n    x2 = A2[0]\n    y2 = A2[1]\n    a = x1 - x2\n    b = y1 - y2\n    c = math.sqrt(a*a+b*b)\n    return c\n\n# print(sim(Q, P1))\n# print(sim(Q, P2))\n# print(sim(Q, P3))\n# print(sim(Q, P4))\n# print(sim(Q, P5))\n# print(sim(Q, P6))\n# print(sim(Q, P7))\n# print(sim(Q, P8))\n# print(sim(Q, P9))\n# print(sim(Q, P10))\n\nALLP = [P1, P2, P3, P4, P5, P6, P7, P8, P9, P10]\nfor P in ALLP:\n    print(sim(Q, P))\nG = ['F', 'M', 'M', 'M', 'F', 'M', 'F', 'M', 'F', 'F']\n\ndef NN(Q, ALLP, G):\n    index = -1\n    smallval = 100000.0\n    for i in range(len(ALLP)):\n        if sim(Q, ALLP[i]) < smallval:\n            index = i\n            smallval = sim(Q, ALLP[i])\n    return G[index]\n\nprint(NN(Q, ALLP, G))\ndef check(height, weight, ground_gender):\n    Q = [height, weight]\n    prediction = NN(Q, ALLP, G)\n    if prediction == ground_gender:\n        return True\n    else:\n        return False\n    \nresult = []\nresult.append(check(153, 42, 'F'))\nresult.append(check(180, 75, 'M'))\nresult.append(check(172, 63, 'M'))\nresult.append(check(169, 80, 'M'))\nresult.append(check(160, 56, 'F'))\nresult.append(check(173, 60, 'M'))\nresult.append(check(147, 40, 'F'))\nresult.append(check(189, 90, 'M'))\nresult.append(check(164, 57, 'F'))\nresult.append(check(181, 52, 'F'))\nresult.append(check(187, 82, 'M'))\nresult.append(check(153, 58, 'F'))\nresult.append(check(192, 62, 'F'))\nresult.append(check(172, 72, 'M'))\nresult.append(check(192, 92, 'M'))\nprint(result)\n\ndef accuracy(result):\n    count = 0\n    for oneres in result:\n        if oneres:\n            count = count + 1\n    return count\/len(result)\n\nprint(accuracy(result))","1f625ebd":"import numpy as np","a8ebeccc":"a = np.array([1, 2, 3])\nprint(a)","6e9ddb95":"alist = [1, 2, 3]\n\nprint(type(a))\nprint(type(alist))","9d0d4035":"print(len(alist))\nprint(len(a))\nprint(a.shape)","e7eb1b94":"print(a[0])\nprint(a[1])\nprint(a[2])\n\nfor i in range(0, 3):\n    print(a[i])","5f153da5":"blist = [[1, 2, 3], [4, 5, 6]]\nprint(blist[0][0])\nprint(blist)\nb = np.array(blist)\nprint(b)\nprint(b[0, 1])\nprint(b.shape)","b28ca00f":"c = np.array([[1,2], [3,4], [5,6]])\nprint(c)\nprint(c.shape)","6b729f27":"d = np.zeros((2, 2))\nprint(d)","d8a31dc9":"e = np.zeros((3,2))\nprint(e)","40d2f46c":"a = np.ones((2,2))\nprint(a)","286e822e":"import numpy as np\na = np.ones((4, 3))\nprint(a)","6599a4f0":"a = np.eye(2)\nprint(a)","7544c537":"a = np.eye(4)\nprint(a)","f83efc8b":"e = np.random.random((2,2))\nprint(e)","22995f79":"f = np.ones((3,3))\nprint(f)","cc334a02":"f = np.array([['*', '*'], ['*', \"*\"]])\nprint(f)","1d554687":"f = np.ones((3, 3))\ng = f + 1\nh = np.eye(3)\nprint(f)\nprint(g)\nprint(f + h)","d071cb24":"f = np.ones((3,3))*3\nprint(f)\ng = np.eye(3)\nprint(g)\nh = f - g\nprint(h)","07239a4a":"f = np.array([[1, 1], [2, 2]])\ng = np.array([[1, 2], [3, 4]])\nprint(f)\nprint(g)\nh = f * g\ni = np.dot(f, g)\nprint(h)\nprint(i)","600dbcf2":"f = np.array([[5, 5], [5, 5]])\nprint(f)\ng = np.ones((2,2)) * 5\nprint(g)","dea6df12":"P1 = [153, 42]\nP2 = [180, 75]\nP3 = [172, 63]\nP4 = [169, 80]\nP5 = [160, 56]\nP6 = [173, 60]\nP7 = [147, 40]\nP8 = [189, 90]\nP9 = [164, 57]\nP10 = [181, 52]\nALLP = [P1, P2, P3, P4, P5, P6, P7, P8, P9, P10]\n\na = np.array(ALLP)\nprint(a)\nprint(a.shape)","7cdda55c":"print(a)\nb = a[0:3, 1]\nprint(b)\nc = a[0:2, 0]\nprint(c)","87c47f8a":"a[0, 0] = 165\nprint(a)","8e6ba647":"b = a[1:4]\nprint(b)","eb6d79ec":"b = a>170\nprint(b)","0181f651":"print('before', a)\na[b] = 170\nprint('after', a)","06ae4117":"x = np.array([[1, 2], [3, 4]])\ny = np.ones((2,2))\nprint(x)\nprint(y)","056eae04":"print(x + y)\nprint(x - y)","a46f3bf8":"print(x*y)","7eab6dbe":"print(x\/y)","f5587624":"print(y\/x)","2eb1a56c":"print(np.sqrt(x))","c9915b24":"z = np.dot(x, y)\nprint(z)","e714bcac":"print(x)\nprint(np.sum(x))\nprint(np.sum(x, axis=0))\nprint(np.sum(x, axis=1))","5d463806":"import numpy as np\n\nP1 = [153, 42]\nP2 = [180, 75]\nP3 = [172, 63]\nP4 = [169, 80]\nP5 = [160, 56]\nP6 = [173, 60]\nP7 = [147, 40]\nP8 = [189, 90]\nP9 = [164, 57]\nP10 = [181, 52]\nALLP = [P1, P2, P3, P4, P5, P6, P7, P8, P9, P10]\n\na = np.array(ALLP)\n#print(a)\n\nQ = [187, 82]\n\nqa = np.array(Q)\n#print(qa)\nG = ['F', 'M', 'M', 'M', 'F', 'M', 'F', 'M', 'F', 'F']\n#print(G)\n\nminusa = a - qa\n#print(minusa)\nsq = minusa*minusa\n#print(sq)\nres = np.sum(sq, axis=1)\n#print(res)\nress = np.sqrt(res)\n#print(ress)\nindex = np.argmin(ress)\n#print(index)\n#print(G[index])\n\n\ndef NN(qa, a, G):\n    minusa = a - qa\n    sq = minusa*minusa\n    res = np.sum(sq, axis=1)\n    ress = np.sqrt(res)\n    index = np.argmin(ress)\n    return G[index]\n\n#print(NN(qa, a, G))\nprint(NN([170, 50], a, G))","9afb5310":"exercise\n\nprint the information from person1 to person4","f641b0e8":"# array math","2a309ef5":"# Scientific computing","726a785d":"153 42 F\n\n180 75 M\n\n172 63 M\n\n169 80 M\n\n160 56 F\n\n173 60 M\n\n147 40 F\n\n189 90 M \n\n164 57 F\n\n181 52 F\n\n187 82 M\n\n153 58 F\n\n192 62 F\n\n172 72 M\n\n192 92 M\n","865185a0":"# indexing","8e585657":"# record ground truth data"}}