{"cell_type":{"418991fb":"code","a232f9a7":"code","a3ca3aca":"code","74383aff":"code","fd277258":"code","22d6faa5":"code","f6fcbd3e":"code","df8810bb":"code","3315d445":"code","e78f1a1d":"code","758298a9":"code","a5656e93":"code","ca5737de":"code","d3d61160":"code","454b22ac":"code","d51abfee":"markdown","91c028a3":"markdown","92f8ce7d":"markdown","c904990a":"markdown","2ad00328":"markdown","9419e93b":"markdown","e57f9bef":"markdown","cb43f237":"markdown","02704524":"markdown","2f60b27c":"markdown"},"source":{"418991fb":"!pip install lifetimes\n!pip install openpyxl","a232f9a7":"import pandas as pd\nimport datetime as dt\nfrom lifetimes import BetaGeoFitter\nfrom lifetimes import GammaGammaFitter","a3ca3aca":"raw_data = pd.read_excel('..\/input\/uci-online-retail-ii-data-set\/online_retail_II.xlsx',sheet_name='Year 2010-2011')","74383aff":"df = raw_data.copy()","fd277258":"df.dropna(inplace=True)\ndf = df[~df[\"Invoice\"].str.contains(\"C\", na=False)]\ndf = df[df[\"Quantity\"] > 0]\ndf['TotalPrice'] = df['Price'] * df['Quantity']","22d6faa5":"today_date = dt.datetime(2011, 12, 11)\n\ncltv = df.groupby('Customer ID').agg({\n    'InvoiceDate': [\n        lambda x: (x.max() - x.min()).days,  # recency\n        lambda x: (today_date - x.min()).days  # T\n    ],\n    'Invoice': lambda x: x.nunique(),  # frequency\n    'TotalPrice': lambda x: x.sum()  # monetary\n})\n\ncltv.columns = cltv.columns.droplevel(0)\n\ncltv.columns = ['recency', 'T', 'frequency', 'monetary']\n\ncltv = cltv[cltv['monetary'] > 0]\n\n# in this case we will suppose that monetary value is average earning per transaction\ncltv['monetary'] = cltv['monetary'] \/ cltv['frequency']\n\n# transforming days to weeks\ncltv['recency'] = cltv['recency'] \/ 7\ncltv['T'] = cltv['T'] \/ 7\n\ncltv = cltv[(cltv['frequency'] > 1)]\n","f6fcbd3e":"bgf = BetaGeoFitter(penalizer_coef=0.001)\n\nbgf.fit(cltv['frequency'], cltv['recency'], cltv['T'])","df8810bb":"# Top 10 customers expected to make the most purchases in a week\nbgf.conditional_expected_number_of_purchases_up_to_time(1, # week\n                                                        cltv['frequency'],\n                                                        cltv['recency'],\n                                                        cltv['T']).sort_values(ascending=False).head(10)","3315d445":"# Top 10 customers expected to make the most purchases in a month\nbgf.conditional_expected_number_of_purchases_up_to_time(4, # 4 weeks = 1 month\n                                                        cltv['frequency'],\n                                                        cltv['recency'],\n                                                        cltv['T']).sort_values(ascending=False).head(10)","e78f1a1d":"# Top 10 customers expected to make the most purchases in next 6 months\nbgf.conditional_expected_number_of_purchases_up_to_time(4 * 6, # weeks * count = months\n                                                        cltv['frequency'],\n                                                        cltv['recency'],\n                                                        cltv['T']).sort_values(ascending=False).head(10)","758298a9":"# The count of total transactions expected in next 6 months\nbgf.conditional_expected_number_of_purchases_up_to_time(4 * 6,\n                                                        cltv['frequency'],\n                                                        cltv['recency'],\n                                                        cltv['T']).sum()","a5656e93":"ggf = GammaGammaFitter(penalizer_coef=0.01)\n\nggf.fit(cltv['frequency'], cltv['monetary'])","ca5737de":"# The top 10 customers expected to be most valuable\nggf.conditional_expected_average_profit(cltv['frequency'],\n                                        cltv['monetary']).sort_values(ascending=False).head(10)","d3d61160":"# The customers' lifetime values expected to in the next 3 months\ncltv['cltv_pred_3_months'] = ggf.customer_lifetime_value(bgf,\n                                   cltv['frequency'],\n                                   cltv['recency'],\n                                   cltv['T'],\n                                   cltv['monetary'],\n                                   time=3,  # 3 months\n                                   freq=\"W\",  # frequency information of T. In this case we set week by using 'W'\n                                   discount_rate=0.01)\ncltv","454b22ac":"cltv['segment'] = pd.qcut(cltv['cltv_pred_3_months'],4,['D','C','B','A'])\n\ncltv","d51abfee":"## Segmenting Customers by Using Predicted CLTV","91c028a3":"# Preparing Dataset for Calculating CLTV","92f8ce7d":"# Introduction\nI prefer medium.com for writing. You can access the medium story that relevant with this notebook from [here](https:\/\/medium.com\/@mebaysan\/customer-life-time-value-prediction-by-using-bg-nbd-gamma-gamma-models-997a5ee481ad). This notebook will cover just codes.\n\nKind regards.","c904990a":"# Predicting CLTV","2ad00328":"## Asking Questions and Aswering them","9419e93b":"# Creating BG-NBD Model","e57f9bef":"# Loading Data","cb43f237":"# Creating Gamma Gamma Model","02704524":"# Data Preparing","2f60b27c":"## Asking Some Questions and Answering Them"}}