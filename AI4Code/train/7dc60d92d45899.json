{"cell_type":{"b11ebdf3":"code","b3eb1910":"code","ccc926e1":"code","97ee5208":"code","8f25950f":"code","a3a8654a":"code","9a62e735":"code","13eb323d":"code","0cd2b298":"code","5e237dd3":"code","bd0a87d1":"code","09322459":"code","12ed7605":"code","bf3acff8":"code","88c152cc":"code","bc9ba1b7":"code","61501cf7":"code","bd44a621":"code","aeb131d4":"code","3312d80f":"code","62b17ea4":"code","c04d44ed":"code","392b226b":"code","d2116315":"code","144b38eb":"code","1f647542":"code","09fe2f54":"code","4f043dc5":"code","9a67e590":"code","230c0977":"code","ed0538e3":"code","64060516":"code","e01487f0":"code","41e8bdaa":"code","42e77d1b":"code","82868720":"code","c953fe36":"code","558dd019":"code","fe38ece3":"code","6848b8ac":"code","992d262a":"code","51ad8d18":"code","6059c8a6":"code","0a03f379":"code","11120182":"code","16536fea":"code","caf83e23":"code","32f151aa":"code","3d758040":"code","d830b0bd":"code","e7a05355":"code","bf667370":"code","989ecfdb":"code","f58f2339":"code","13aca72a":"code","a7a6bdb2":"code","c8e2d527":"code","325292b1":"code","28c79a76":"code","9f520a44":"code","db28133f":"code","5760f9a5":"code","d2c97511":"code","d83f894f":"code","128850de":"code","6b3fc2d5":"code","9b1b95e8":"code","ad10b84c":"code","5a5b97bd":"code","7b5cad24":"markdown","54fcb0e0":"markdown","11d8ba5c":"markdown","08ca6596":"markdown","c12bbdbe":"markdown","53f14662":"markdown","2c2d4ee0":"markdown","6620bfac":"markdown","989ff709":"markdown","c3f8ce0d":"markdown","946c8c63":"markdown","6cfc33c9":"markdown","c1a368eb":"markdown","d3267d4b":"markdown","367aa4cd":"markdown","04c6eed9":"markdown","abd3a0d6":"markdown","b5862c61":"markdown","067f2a69":"markdown","ff620278":"markdown","1ec03cb2":"markdown","537b8e84":"markdown","631782eb":"markdown","f532157f":"markdown","a7faf1fe":"markdown"},"source":{"b11ebdf3":"import pandas as pd\nimport numpy as np\n%matplotlib inline\nimport matplotlib.pyplot as plt","b3eb1910":"df = pd.read_csv('\/kaggle\/input\/for-simple-exercises-time-series-forecasting\/Alcohol_Sales.csv',index_col='DATE',parse_dates=True)\ndf.index.freq = 'MS'\ndf.head()","ccc926e1":"df.columns = ['Sales']\ndf.plot(figsize=(12,8))","97ee5208":"from statsmodels.tsa.seasonal import seasonal_decompose\n\nresults = seasonal_decompose(df['Sales'])\nresults.observed.plot(figsize=(12,2))","8f25950f":"results.trend.plot(figsize=(12,2))","a3a8654a":"results.seasonal.plot(figsize=(12,2))","9a62e735":"results.resid.plot(figsize=(12,2))","13eb323d":"print(\"len(df)\", len(df))\n\ntrain = df.iloc[:313]\ntest = df.iloc[313:]\n\n\nprint(\"len(train)\", len(train))\nprint(\"len(test)\", len(test))","0cd2b298":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\n\n# IGNORE WARNING ITS JUST CONVERTING TO FLOATS\n# WE ONLY FIT TO TRAININ DATA, OTHERWISE WE ARE CHEATING ASSUMING INFO ABOUT TEST SET\nscaler.fit(train)\n","5e237dd3":"scaled_train = scaler.transform(train)\nscaled_test = scaler.transform(test)","bd0a87d1":"from keras.preprocessing.sequence import TimeseriesGenerator\nscaled_train[0]","09322459":"# define generator\nn_input = 2\nn_features = 1\ngenerator = TimeseriesGenerator(scaled_train, scaled_train, length=n_input, batch_size=1)\n\nprint('len(scaled_train)',len(scaled_train))\nprint('len(generator)',len(generator))  # n_input = 2","12ed7605":"# What does the first batch look like?\nX,y = generator[0]\n\nprint(f'Given the Array: \\n{X.flatten()}')\nprint(f'Predict this y: \\n {y}')","bf3acff8":"# Let's redefine to get 12 months back and then predict the next month out\nn_input = 12\ngenerator = TimeseriesGenerator(scaled_train, scaled_train, length=n_input, batch_size=1)\n\n# What does the first batch look like?\nX,y = generator[0]\n\nprint(f'Given the Array: \\n{X.flatten()}')\nprint(f'Predict this y: \\n {y}')","88c152cc":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\n\n# define model\nmodel = Sequential()\nmodel.add(LSTM(100, activation='relu', input_shape=(n_input, n_features)))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()","bc9ba1b7":"# fit model\nmodel.fit_generator(generator,epochs=50)","61501cf7":"model.history.history.keys()\nloss_per_epoch = model.history.history['loss']\nplt.plot(range(len(loss_per_epoch)),loss_per_epoch)","bd44a621":"first_eval_batch = scaled_train[-12:]\nfirst_eval_batch","aeb131d4":"first_eval_batch = first_eval_batch.reshape((1, n_input, n_features))\nmodel.predict(first_eval_batch)","3312d80f":"scaled_test[0]","62b17ea4":"test_predictions = []\n\nfirst_eval_batch = scaled_train[-n_input:]\ncurrent_batch = first_eval_batch.reshape((1, n_input, n_features))\n\nfor i in range(len(test)):\n    \n    # get prediction 1 time stamp ahead ([0] is for grabbing just the number instead of [array])\n    current_pred = model.predict(current_batch)[0]\n    \n    # store prediction\n    test_predictions.append(current_pred) \n    \n    # update batch to now include prediction and drop first value\n    current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)\n    \ntest_predictions","c04d44ed":"scaled_test","392b226b":"true_predictions = scaler.inverse_transform(test_predictions)\ntrue_predictions","d2116315":"test['Predictions'] = true_predictions\ntest","144b38eb":"test.plot(figsize=(12,8))","1f647542":"model.save('my_rnn_model.h5')\n'''from keras.models import load_model\nnew_model = load_model('my_rnn_model.h5')'''","09fe2f54":"import pandas as pd\nimport numpy as np\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('..\/input\/for-simple-exercises-time-series-forecasting\/energydata_complete.csv',index_col='date', infer_datetime_format=True)\ndf.head()","4f043dc5":"df.info()","9a67e590":"df['Windspeed'].plot(figsize=(12,8))","230c0977":"df['Appliances'].plot(figsize=(12,8))","ed0538e3":"df = df.loc['2016-05-01':]\ndf = df.round(2)\n\nprint('len(df)',len(df))\ntest_days = 2\ntest_ind = test_days*144 # 24*60\/10 = 144\ntest_ind","64060516":"train = df.iloc[:-test_ind]\ntest = df.iloc[-test_ind:]","e01487f0":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\n\n# IGNORE WARNING ITS JUST CONVERTING TO FLOATS\n# WE ONLY FIT TO TRAININ DATA, OTHERWISE WE ARE CHEATING ASSUMING INFO ABOUT TEST SET\nscaler.fit(train)\n\n","41e8bdaa":"scaled_train = scaler.transform(train)\nscaled_test = scaler.transform(test)","42e77d1b":"from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\n\n# define generator\nlength = 144 # Length of the output sequences (in number of timesteps)\nbatch_size = 1 #Number of timeseries samples in each batch\ngenerator = TimeseriesGenerator(scaled_train, scaled_train, length=length, batch_size=batch_size)","82868720":"print('len(scaled_train)',len(scaled_train))\nprint('len(generator) ',len(generator))\n\nX,y = generator[0]\n\nprint(f'Given the Array: \\n{X.flatten()}')\nprint(f'Predict this y: \\n {y}')","c953fe36":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,LSTM\n\nscaled_train.shape","558dd019":"# define model\nmodel = Sequential()\n\n# Simple RNN layer\nmodel.add(LSTM(100,input_shape=(length,scaled_train.shape[1])))\n\n# Final Prediction (one neuron per feature)\nmodel.add(Dense(scaled_train.shape[1]))\n\nmodel.compile(optimizer='adam', loss='mse')\n\nmodel.summary()","fe38ece3":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor='val_loss',patience=1)\nvalidation_generator = TimeseriesGenerator(scaled_test,scaled_test, \n                                           length=length, batch_size=batch_size)\n\nmodel.fit_generator(generator,epochs=10,\n                    validation_data=validation_generator,\n                   callbacks=[early_stop])","6848b8ac":"model.history.history.keys()\n\nlosses = pd.DataFrame(model.history.history)\nlosses.plot()","992d262a":"first_eval_batch = scaled_train[-length:]\nfirst_eval_batch","51ad8d18":"first_eval_batch = first_eval_batch.reshape((1, length, scaled_train.shape[1]))\nmodel.predict(first_eval_batch)","6059c8a6":"scaled_test[0]","0a03f379":"n_features = scaled_train.shape[1]\ntest_predictions = []\n\nfirst_eval_batch = scaled_train[-length:]\ncurrent_batch = first_eval_batch.reshape((1, length, n_features))\n\nfor i in range(len(test)):\n    \n    # get prediction 1 time stamp ahead ([0] is for grabbing just the number instead of [array])\n    current_pred = model.predict(current_batch)[0]\n    \n    # store prediction\n    test_predictions.append(current_pred) \n    \n    # update batch to now include prediction and drop first value\n    current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)\n    ","11120182":"true_predictions = scaler.inverse_transform(test_predictions)\n\ntrue_predictions = pd.DataFrame(data=true_predictions,columns=test.columns)\ntrue_predictions","16536fea":"import pandas as pd\nfrom fbprophet import Prophet","caf83e23":"df = pd.read_csv('..\/input\/for-simple-exercises-time-series-forecasting\/Miles_Traveled.csv')\ndf.head()","32f151aa":"df.columns = ['ds','y']\ndf['ds'] = pd.to_datetime(df['ds'])\ndf.info()","3d758040":"pd.plotting.register_matplotlib_converters()\n\ntry:\n    df.plot(x='ds',y='y',figsize=(18,6))\nexcept TypeError as e:\n    figure_or_exception = str(\"TypeError: \" + str(e))\nelse:\n    figure_or_exception = df.set_index('ds').y.plot().get_figure()\n","d830b0bd":"print('len(df)',len(df))\nprint('len(df) - 12 = ',len(df) - 12)","e7a05355":"train = df.iloc[:576]\ntest = df.iloc[576:]","bf667370":"# This is fitting on all the data (no train test split in this example)\nm = Prophet()\nm.fit(train)","989ecfdb":"future = m.make_future_dataframe(periods=12,freq='MS')\nforecast = m.predict(future)","f58f2339":"forecast.tail()","13aca72a":"test.tail()","a7a6bdb2":"forecast.columns","c8e2d527":"forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(12)","325292b1":"m.plot(forecast);","28c79a76":"import matplotlib.pyplot as plt\n%matplotlib inline\nm.plot(forecast)\nplt.xlim(pd.to_datetime('2003-01-01'),pd.to_datetime('2007-01-01'))","9f520a44":"m.plot_components(forecast);","db28133f":"from statsmodels.tools.eval_measures import rmse\npredictions = forecast.iloc[-12:]['yhat']\npredictions","5760f9a5":"test['y']","d2c97511":"rmse(predictions,test['y'])","d83f894f":"test.mean()","128850de":"from fbprophet.diagnostics import cross_validation,performance_metrics\nfrom fbprophet.plot import plot_cross_validation_metric\n\nlen(df)\nlen(df)\/12\n\n# Initial 5 years training period\ninitial = 5 * 365\ninitial = str(initial) + ' days'\n# Fold every 5 years\nperiod = 5 * 365\nperiod = str(period) + ' days'\n# Forecast 1 year into the future\nhorizon = 365\nhorizon = str(horizon) + ' days'\n\ndf_cv = cross_validation(m, initial=initial, period=period, horizon = horizon)\n\ndf_cv.head()","6b3fc2d5":"df_cv.tail()","9b1b95e8":"performance_metrics(df_cv)","ad10b84c":"plot_cross_validation_metric(df_cv, metric='rmse');","5a5b97bd":"plot_cross_validation_metric(df_cv, metric='mape');","7b5cad24":"## Evaluate on Test Data","54fcb0e0":"<a class=\"anchor\" id=\"1.\"><\/a> \n# 1.Deep Learning for Time Series Forecasting - (RNN)","11d8ba5c":"# **How to use the Python programming Language for Time Series Analysis!**\n\nThis work was prepared together with [Gul Bulut](https:\/\/www.kaggle.com\/gulyvz) and [Bulent Siyah](https:\/\/www.kaggle.com\/bulentsiyah\/). **The whole study consists of two parties**\n* [Time Series Forecasting and Analysis- Part 1](https:\/\/www.kaggle.com\/gulyvz\/time-series-forecasting-and-analysis-part-1)\n* [Time Series Forecasting and Analysis- Part 2](https:\/\/www.kaggle.com\/bulentsiyah\/time-series-forecasting-and-analysis-part-2)\n\nThis kernel will teach you everything you need to know to use Python for forecasting time series data to predict new future data points.\n\n![](https:\/\/iili.io\/JaZxFS.png)\n\nwe'll learn about state of the art Deep Learning techniques with Recurrent Neural Networks that use deep learning to forecast future data points.\n\n![](https:\/\/iili.io\/JaZCMl.png)\n\n\nThis kernel even covers Facebook's Prophet library, a simple to use, yet powerful Python library developed to forecast into the future with time series data.\n\n![](https:\/\/iili.io\/JaZnP2.png)\n\n# **Content Part 1** \n\n1. [How to Work with Time Series Data with Pandas](https:\/\/www.kaggle.com\/gulyvz\/time-series-forecasting-and-analysis-part-1#1.)\n1. [Use Statsmodels to Analyze Time Series Data](https:\/\/www.kaggle.com\/gulyvz\/time-series-forecasting-and-analysis-part-1#2.)\n1. [General Forecasting Models - ARIMA(Autoregressive Integrated Moving Average)](https:\/\/www.kaggle.com\/gulyvz\/time-series-forecasting-and-analysis-part-1#3.)\n1. [General Forecasting Models - SARIMA(Seasonal Autoregressive Integrated Moving Average)](https:\/\/www.kaggle.com\/gulyvz\/time-series-forecasting-and-analysis-part-1#4.)\n1. [General Forecasting Models - SARIMAX](https:\/\/www.kaggle.com\/gulyvz\/time-series-forecasting-and-analysis-part-1#5.)\n\n# **Content Part 2**\n\n1. [Deep Learning for Time Series Forecasting - (RNN)](#1.)\n1. [Multivariate Time Series with RNN](#2.)\n1. [Use Facebook's Prophet Library for forecasting](#3.)\n","08ca6596":"## Scale Data","c12bbdbe":"### Plotting Forecast\n\nWe can use Prophet's own built in plotting tools","53f14662":"## Scale Data","2c2d4ee0":"## Time Series Generator\n\nThis class takes in a sequence of data-points gathered at equal intervals, along with time series parameters such as stride, length of history, etc., to produce batches for training\/validation.","6620bfac":"## Create the Model","989ff709":"## Forecasting\n\n**NOTE: Prophet by default is for daily data. You need to pass a frequency for sub-daily or monthly data. Info: https:\/\/facebook.github.io\/prophet\/docs\/non-daily_data.html**","c3f8ce0d":"## Saving and Loading Models","946c8c63":"<a class=\"anchor\" id=\"2.\"><\/a> \n# 2.Multivariate Time Series with RNN","6cfc33c9":"## Inverse Transformations and Compare","c1a368eb":"## Train Test Split","d3267d4b":"## Data\n\nLet's read in the data set:","367aa4cd":"## Create and Fit Model","04c6eed9":"Experimental data used to create regression models of appliances energy use in a low energy building. Data Set Information: The data set is at 10 min for about 4.5 months. The house temperature and humidity conditions were monitored with a ZigBee wireless sensor network. Each wireless node transmitted the temperature and humidity conditions around 3.3 min. Then, the wireless data was averaged for 10 minutes periods. The energy data was logged every 10 minutes with m-bus energy meters. Weather from the nearest airport weather station (Chievres Airport, Belgium) was downloaded from a public data set from Reliable Prognosis (rp5.ru), and merged together with the experimental data sets using the date and time column. Two random variables have been included in the data set for testing the regression models and to filter out non predictive attributes (parameters). ","abd3a0d6":"## Create the Model","b5862c61":"<a class=\"anchor\" id=\"3.\"><\/a> \n# 3.Use Facebook's Prophet Library for forecasting","067f2a69":"## Inverse Transformations and Compare","ff620278":"## Train Test Split","1ec03cb2":"## EarlyStopping","537b8e84":"## Time Series Generator\n\nThis class takes in a sequence of data-points gathered at\nequal intervals, along with time series parameters such as\nstride, length of history, etc., to produce batches for\ntraining\/validation.","631782eb":"## Prophet Diagnostics\n\nProphet includes functionality for time series cross validation to measure forecast error using historical data. This is done by selecting cutoff points in the history, and for each of them fitting the model using data only up to that cutoff point. We can then compare the forecasted values to the actual values.","f532157f":"## Load Data\n\nThe input to Prophet is always a dataframe with two columns: ds and y. The ds (datestamp) column should be of a format expected by Pandas, ideally YYYY-MM-DD for a date or YYYY-MM-DD HH:MM:SS for a timestamp. The y column must be numeric, and represents the measurement we wish to forecast.","a7faf1fe":"## Evaluate on Test Data"}}