{"cell_type":{"98e0671a":"code","7981bbdf":"code","15282ca7":"code","c6ae074c":"code","3b7cd23c":"code","b94166fe":"code","2c4a1e9b":"code","7546d737":"code","4e3ebc57":"code","d983a3ce":"code","bf63b3ac":"code","3629aa9d":"markdown","ce9109fa":"markdown","fa862258":"markdown","931db5eb":"markdown","a03247f8":"markdown","b320f83d":"markdown","a58a6013":"markdown","eee5d0dc":"markdown","6d37ed93":"markdown"},"source":{"98e0671a":"!pip install pmdarima","7981bbdf":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport pmdarima as pm\nfrom datetime import date\nfrom pmdarima.arima import ndiffs\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","15282ca7":"filename = '\/kaggle\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2020-09-14.csv'\ndf = pd.read_csv(filename)\ndf.head()","c6ae074c":"df.Timestamp = pd.to_datetime(df.Timestamp, unit='s')","3b7cd23c":"df.index = df.Timestamp\ndf.head()","b94166fe":"df_day = df.resample('D').mean()\nmissing_replacement = df['2015-01-05': '2015-01-09'].mean(numeric_only=True)\ndf_day.loc['2015-01-06'] = missing_replacement\ndf_day.loc['2015-01-07'] = missing_replacement\ndf_day.loc['2015-01-08'] = missing_replacement\n\ndf_day.isnull().sum()","2c4a1e9b":"print(df_day.shape)\nprint(df_day.head(), '\\n\\n', df.tail())","7546d737":"df_train = df_day.loc['2011-12-31':'2020-05-10']\ndf_test = df_day.loc['2020-05-11':]\n\nplt.figure(figsize=(22, 10))\nplt.title('Bitcoin Prices')\nplt.xlabel('Dates')\nplt.ylabel('Prices')\nplt.plot(df_train.Weighted_Price, 'blue', label='Training Data')\nplt.plot(df_test.Weighted_Price, 'green', label='Testing Data')\nplt.plot([date(2020, 5, 10), date(2020, 5, 10)], [0, 20000], 'black')\n\nplt.legend()\n\ny_train = df_train.Weighted_Price.values\ny_test = df_test.Weighted_Price.values","4e3ebc57":"kpss_diffs = ndiffs(y_train, alpha=0.05, test='kpss', max_d=6)\nadf_diffs = ndiffs(y_train, alpha=0.05, test='adf', max_d=6)\nn_diffs = max(adf_diffs, kpss_diffs)\n\nprint('Estimated differencing term:', n_diffs)\n\nauto = pm.auto_arima(\n    y_train, d=n_diffs, \n    seasonal=True, stepwise=True,\n    suppress_warnings=True, error_action=\"ignore\", \n    max_p=6, max_order=None, trace=True\n)","d983a3ce":"model = auto\n\ndef forecast_one_step():\n    fc, conf_int = model.predict(n_periods=1, return_conf_int=True)\n    return (\n        fc.tolist()[0],\n        np.asarray(conf_int).tolist()[0])\n\ny_predict = []\ny_confidence = []\n\nfor i, new_ob in enumerate(y_test):\n    fc, conf = forecast_one_step()\n    y_predict.append(fc)\n    y_confidence.append(conf)\n    \n    print(i, fc, new_ob, abs(fc - new_ob))\n\n    model.update(new_ob)\n\nprint('Mean squared error:', mean_squared_error(y_test, y_predict, squared=False))\nprint('Root Mean squared error:', mean_squared_error(y_test, y_predict))\nprint('R-Squared', r2_score(y_test, y_predict))","bf63b3ac":"fig, axes = plt.subplots(3, 1, figsize=(22, 30))\n\naxes[0].plot(df_day.index, df_day.Weighted_Price, color='blue', label='Actual Price')\naxes[0].plot(df_test.index, y_predict, color='green', label='Predicted Price')\naxes[0].plot([date(2020, 5, 10), date(2020, 5, 10)], [0, 20000], 'black')\n\naxes[0].set_title('Bitcoin Prices Prediction')\naxes[0].set_xlabel('Dates')\naxes[0].set_ylabel('Prices')\naxes[0].legend()\n\naxes[1].plot(df_day.index, df_day.Weighted_Price, ls='-', marker='+', color='blue', label='Actual Price')\naxes[1].plot(df_test.index, y_predict, ls='-', marker='+', color='green', label='Predicted Price')\naxes[1].plot([date(2020, 5, 10), date(2020, 5, 10)], [0, 20000], 'black')\n\naxes[1].set_xlabel('Dates')\naxes[1].set_ylabel('Prices')\naxes[1].set_xlim(date(2020, 5, 11), date(2020, 9, 14))\naxes[1].set_ylim(8400, 12500)\naxes[1].legend()\n\naxes[2].plot(df_day.index, df_day.Weighted_Price, ls='-', marker='+', color='blue', label='Actual Price')\naxes[2].plot(df_test.index, y_predict, ls='-', marker='+', color='green', label='Predicted Price')\naxes[2].plot([date(2020, 5, 10), date(2020, 5, 10)], [0, 20000], 'black')\n\naxes[2].set_xlabel('Dates')\naxes[2].set_ylabel('Prices')\naxes[2].set_xlim(date(2020, 8, 15), date(2020, 9, 14))\naxes[2].set_ylim(8400, 12500)\naxes[2].legend()\n\nplt.show()","3629aa9d":"## Set Timestamp as an index of the dataframe ##","ce9109fa":"## Resample to daily period ##\n## Then replacing missing values with average value between them ##","fa862258":"## Find ARIMA's d parameter and let's AUTO ARIMA find suitable model parameters (p, d, q) ##\n(That is minimized AIC)","931db5eb":"## Visualize the prediction values ##","a03247f8":"## Make a prediction day-by-day and then update the model between it's predicting ##\n127 days in total","b320f83d":"# BTC price prediction with AUTO ARIMA - 1 day period #\nby Tanut Apiwong","a58a6013":"## MAE: 173.96661339601658 ##\n## RMSE: 30264.3825764791 ##\n## R2: 0.9712224080205929 ##","eee5d0dc":"## Convert timestamp to Datetime ##","6d37ed93":"## Train \/ Test Split and visualize the data ##"}}