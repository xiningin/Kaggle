{"cell_type":{"658cc786":"code","7a2215ec":"code","40d60b90":"code","91cdcf0b":"code","fa56717b":"code","d699f5c0":"code","f582b647":"code","faa781f2":"code","dd3f4bf9":"code","2d2806e7":"code","1775a543":"code","2aa430fa":"code","8951e804":"code","f335eb30":"code","72239e83":"code","e76a1dba":"code","6124f5f6":"code","3625ecde":"code","0c5b24a4":"code","38d01ded":"markdown"},"source":{"658cc786":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7a2215ec":"! pip install pyspark","40d60b90":"import pyspark\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql import functions as f\nfrom pyspark.ml.recommendation import ALS\nfrom pyspark.ml.evaluation import RegressionEvaluator\nfrom pyspark.sql.functions import mean as _mean, col\n\nspark = SparkSession.builder.getOrCreate()","91cdcf0b":"train = spark.read.format(\"csv\").options(header = True, inferSchema = True).csv(\"..\/input\/it2034ch1502-movie-recommendation-system\/ratings.csv\")\ntrain = train.select([\"userId\",\"movieId\",\"rating\"])","fa56717b":"\nals = ALS(\n    userCol = \"userId\",\n    itemCol = \"movieId\",\n    ratingCol = \"rating\",\n    maxIter = 25,\n    rank = 205,\n    regParam = 0.0477\n)\n\nevaluator = RegressionEvaluator(metricName = \"rmse\",\n                                labelCol = \"rating\",\n                                predictionCol = \"prediction\")\n\nmodel = als.fit(train)","d699f5c0":"test = spark.read.format(\"csv\").options(header = True, inferSchema = True).csv(\"..\/input\/it2034ch1502-movie-recommendation-system\/test.csv\")\ntest_prediction = model.transform(test).withColumnRenamed(\"prediction\",\"rating\")\n","f582b647":"\nmovie = spark.read.format(\"csv\").options(header = True, inferSchema = True).csv(\"..\/input\/it2034ch1502-movie-recommendation-system\/movies.csv\")\ntag = spark.read.format(\"csv\").options(header = True, inferSchema = True).csv(\"..\/input\/it2034ch1502-movie-recommendation-system\/tags.csv\")","faa781f2":"test_prediction_with_genres = test_prediction.join(movie,on = \"movieId\",how = \"left_outer\").select(\"ratingId\",\"userId\",\"movieId\",\"genres\",\"rating\")\ntest_prediction_with_tag = test_prediction.join(tag,on = [\"userId\",\"movieId\"],how = \"left_outer\").select(\"ratingId\",\"userId\",\"movieId\",\"tag\",\"rating\")","dd3f4bf9":"train_with_genres = train.join(movie,on = \"movieId\",how = \"left_outer\").select(\"userId\",\"movieId\",\"genres\",\"rating\")\ntrain_with_tag = train.join(tag,[\"userId\",\"movieId\"],how = \"left_outer\").select(\"userId\",\"movieId\",\"tag\",\"rating\")","2d2806e7":"rating_on_tag = train_with_tag.filter(f.col(\"tag\").isNotNull()).groupby(\"tag\",\"movieId\").agg(f.mean(f.col(\"rating\")).alias(\"rating_on_tag\"))\nrating_on_genres = train_with_genres.withColumn(\"genres\",f.regexp_replace(\"genres\",\"\\[|\\]|\\'\",\"\")).withColumn(\"genres\",f.split(\"genres\",\", \")).withColumn(\"genres\",f.explode(\"genres\")).filter((f.col(\"genres\").isNotNull())&(f.col(\"genres\")!=\"(no genres listed)\")).groupby(\"genres\",\"userId\").agg(f.mean(f.col(\"rating\")).alias(\"rating_on_genres\"))","1775a543":"test_prediction_with_genres = test_prediction_with_genres.na.fill(\"NaN\").withColumn(\"genres\",f.regexp_replace(\"genres\",\"\\[|\\]|\\'\",\"\")).withColumn(\"genres\",f.split(\"genres\",\", \")).withColumn(\"genres\",f.explode(\"genres\"))\ntest_prediction_with_genres_rating = test_prediction_with_genres.join(rating_on_genres,on = [\"genres\",\"userId\"],how = \"left_outer\")\ntest_prediction_with_genres_rating.show(20)","2aa430fa":"test_prediction_with_genres_rating = test_prediction_with_genres_rating.withColumn(\"rating\",\n                      f.when((f.col(\"rating\") == \"NaN\")&(f.col(\"rating_on_genres\").isNotNull()),test_prediction_with_genres_rating.rating_on_genres)\n                      .otherwise(test_prediction_with_genres_rating.rating))\ntest_prediction_with_genres_rating.show(20)","8951e804":"test_prediction_with_tag = test_prediction_with_genres_rating.join(tag,on = [\"userId\",\"movieId\"],how = \"left_outer\").select(\"ratingId\",\"userId\",\"movieId\",\"tag\",\"rating\")\ntest_prediction_with_tag_rating = test_prediction_with_tag.join(rating_on_tag,on = [\"tag\",\"movieId\"],how = \"left_outer\")\n\ntest_prediction_with_tag_rating = test_prediction_with_tag_rating.withColumn(\"rating\",\n                      f.when((f.col(\"rating\") == \"NaN\")&(f.col(\"rating_on_tag\").isNotNull()),test_prediction_with_tag_rating.rating_on_tag)\n                      .otherwise(test_prediction_with_tag_rating.rating))","f335eb30":"user_mean_rating = train.groupby(\"userId\").agg(f.mean(f.col(\"rating\")).alias(\"user_mean_rating\"))\nuser_mean_rating_with_tag_rating = test_prediction_with_tag_rating.join(user_mean_rating,on = \"userId\",how = \"left_outer\")\nuser_mean_rating_with_tag_rating = user_mean_rating_with_tag_rating.withColumn(\"rating\",\n                      f.when((f.col(\"rating\") == \"NaN\")&(f.col(\"user_mean_rating\").isNotNull()),user_mean_rating_with_tag_rating.user_mean_rating)\n                      .otherwise(user_mean_rating_with_tag_rating.rating))","72239e83":"movie_mean_rating = train.groupby(\"movieId\").agg(f.mean(f.col(\"rating\")).alias(\"movie_mean_rating\"))\nmovie_mean_rating_with_movie_rating = user_mean_rating_with_tag_rating.join(movie_mean_rating,on = \"movieId\",how = \"left_outer\")\n\nmovie_mean_rating_with_movie_rating = movie_mean_rating_with_movie_rating.withColumn(\"rating\",\n                      f.when((f.col(\"rating\") == \"NaN\")&(f.col(\"movie_mean_rating\").isNotNull()),movie_mean_rating_with_movie_rating.movie_mean_rating)\n                      .otherwise(movie_mean_rating_with_movie_rating.rating))","e76a1dba":"total_join = movie_mean_rating_with_movie_rating.groupby(\"ratingId\").agg(f.mean(f.col(\"rating\")).alias(\"rating\"))\n","6124f5f6":"mean_rating = train.groupby(\"userId\").agg(f.mean(f.col(\"rating\")).alias(\"rating\")).agg({\"rating\":\"mean\"}).collect()[0][\"avg(rating)\"]","3625ecde":"solution = total_join.withColumn(\"rating\",f.when(total_join[\"rating\"] < 0, 0.0).when(f.col(\"rating\") == \"NaN\",mean_rating).otherwise(total_join[\"rating\"]))\nsolution = solution.withColumn(\"rating\",f.when(solution[\"rating\"] < 0, 0.0).when(f.col(\"rating\") > 5.0,5.0).otherwise(solution[\"rating\"]))","0c5b24a4":"solution = solution.toPandas()\nsolution.to_csv(\"bright_solution.csv\",index = False)","38d01ded":"## Danh s\u00e1ch nh\u00f3m:\nNguy\u1ec5n V\u0103n Vi\u1ebft - CH2002024\nV\u00f5 Minh Qu\u00e2n - CH2002042\nPh\u1ea1m H\u1eefu Hi\u1ebfu - CH2002033\n\u0110\u1ed7 Th\u1ecb Ph\u01b0\u01a1ng Uy\u00ean - CH2020207"}}