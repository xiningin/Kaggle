{"cell_type":{"060ef5d7":"code","0aa7435b":"code","afc8c4d9":"code","87303149":"code","7da7be94":"code","8abf5b23":"code","35f86c5e":"code","298fa335":"code","86629abe":"code","a32b656c":"code","abc118e2":"code","97e27faf":"code","c202dfb2":"code","e44ef1e2":"code","2b2410f3":"code","57beae36":"code","f333c272":"code","c365fe18":"code","f1d51590":"code","8e9473c9":"code","394f105a":"code","a6c4be83":"code","817de9f8":"code","4a541d3e":"code","b6e9b67b":"code","bf5c38d6":"code","e69ad0ad":"code","224bb64d":"code","887c23d3":"code","47627837":"code","4dfda61f":"code","f117e4af":"code","56d2bc61":"code","86d350ca":"code","f0ac2ab8":"code","6201fdac":"code","8c85bc24":"code","83ba8efc":"code","0e9cd8bd":"code","4fcd2f60":"code","42eca1ae":"code","bdf74894":"code","998d0ce9":"code","86614dd7":"code","6902d3e2":"code","ac83e9b3":"code","7c6f5711":"code","00137315":"code","6fe176a3":"code","b3708587":"code","696a8e75":"code","f8fb277c":"code","b855de4a":"code","46e1761c":"code","70a63892":"code","b2b48c14":"code","bbf5c813":"code","35453a1a":"code","550ea2a0":"code","a55dd327":"code","7dad4cf9":"code","7d7b285c":"code","bea27abd":"code","855bd970":"code","071f8c4d":"code","b88878c1":"code","b9674a0f":"code","33d7c7a3":"code","20cfb8cc":"code","30838680":"code","6f3f96b8":"code","b712de2c":"code","ae6c3818":"code","991fd8b7":"code","73f2bcbf":"code","8285a3e8":"code","6ccd45d0":"code","63247a2a":"code","3b511d87":"code","c6c04454":"code","4720fde7":"code","bd211768":"code","3c1b8d9b":"code","5e6e7fa2":"code","f6bd3c91":"markdown","704afad5":"markdown","7e210b9b":"markdown","c5b120bf":"markdown","918f0b9e":"markdown","4f24c394":"markdown","94ff2265":"markdown","c15be9ed":"markdown","94f500b5":"markdown","021e1e10":"markdown","fdf7ad4d":"markdown","73c44847":"markdown","93be52cf":"markdown","e4e3f384":"markdown","1aa5176e":"markdown","8c499846":"markdown","3260e36f":"markdown","f6c7754e":"markdown","e938574b":"markdown","52c73cd8":"markdown","d37c399a":"markdown","fe76e716":"markdown","e2c9c434":"markdown","49f4e2af":"markdown","e0852942":"markdown","cc6a46af":"markdown","79d6e103":"markdown","90b5a591":"markdown","8b06cb2f":"markdown","7e0d4393":"markdown","c1d8b801":"markdown","51b17fb3":"markdown"},"source":{"060ef5d7":"import numpy as np \nimport matplotlib.pyplot as plt \nimport matplotlib.colors as mcolors\nimport pandas as pd \nimport random\nimport math\nimport time\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport datetime\nimport operator \nimport os\nplt.style.use('fivethirtyeight')\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0aa7435b":"input_data = '..\/input\/covid19-data-from-john-hopkins-university\/'\nif os.path.exists(input_data):\n    confirmed_df = pd.read_csv( input_data + 'RAW_global_confirmed_cases.csv')\n    deaths_df = pd.read_csv( input_data + 'RAW_global_deaths.csv')\n    print('Using:' + input_data)\nelse:\n    confirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\n    deaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\n    print('Using: Internet data')\n\nrecoveries_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\nlatest_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/11-14-2020.csv')\nus_medical_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports_us\/11-14-2020.csv')\napple_mobility = pd.read_csv('https:\/\/covid19-static.cdn-apple.com\/covid19-mobility-data\/2021HotfixDev11\/v3\/en-us\/applemobilitytrends-2020-11-14.csv')","afc8c4d9":"latest_data.head()","87303149":"display(confirmed_df.head())\n","7da7be94":"us_medical_data.head()","8abf5b23":"cols = confirmed_df.keys()","35f86c5e":"confirmed = confirmed_df.loc[:, cols[4]:cols[-1]]\ndeaths = deaths_df.loc[:, cols[4]:cols[-1]]\n\n#confirmed.head()\n\nrecoveries = recoveries_df.loc[:, cols[4]:cols[-1]]","298fa335":"dates = confirmed.keys()\nworld_cases = []\ntotal_deaths = [] \nmortality_rate = []\nrecovery_rate = [] \ntotal_recovered = [] \ntotal_active = [] \n\nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n    death_sum = deaths[i].sum()\n    recovered_sum = recoveries[i].sum()\n    \n    # confirmed, deaths, recovered, and active\n    world_cases.append(confirmed_sum)\n    total_deaths.append(death_sum)\n    total_recovered.append(recovered_sum)\n    total_active.append(confirmed_sum-death_sum-recovered_sum)\n    \n    # calculate rates\n    mortality_rate.append(death_sum\/confirmed_sum)\n    recovery_rate.append(recovered_sum\/confirmed_sum)","86629abe":"def daily_increase(data):\n    d = [] \n    for i in range(len(data)):\n        if i == 0:\n            d.append(data[0])\n        else:\n            d.append(data[i]-data[i-1])\n    return d \n\ndef moving_average(data, window_size):\n    moving_average = []\n    for i in range(len(data)):\n        if i + window_size < len(data):\n            moving_average.append(np.mean(data[i:i+window_size]))\n        else:\n            moving_average.append(np.mean(data[i:len(data)]))\n    return moving_average\n\n# window size\nwindow = 7\n\n# confirmed cases\nworld_daily_increase = daily_increase(world_cases)\nworld_confirmed_avg= moving_average(world_cases, window)\nworld_daily_increase_avg = moving_average(world_daily_increase, window)\n\n# deaths\nworld_daily_death = daily_increase(total_deaths)\nworld_death_avg = moving_average(total_deaths, window)\nworld_daily_death_avg = moving_average(world_daily_death, window)\n\n\n# recoveries\nworld_daily_recovery = daily_increase(total_recovered)\nworld_recovery_avg = moving_average(total_recovered, window)\nworld_daily_recovery_avg = moving_average(world_daily_recovery, window)\n\n\n# active \nworld_active_avg = moving_average(total_active, window)","a32b656c":"days_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nworld_cases = np.array(world_cases).reshape(-1, 1)\ntotal_deaths = np.array(total_deaths).reshape(-1, 1)\ntotal_recovered = np.array(total_recovered).reshape(-1, 1)","abc118e2":"days_in_future = 10\nfuture_forcast = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1, 1)\nadjusted_dates = future_forcast[:-10]","97e27faf":"start = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","c202dfb2":"# slightly modify the data to fit the model better (regression models cannot pick the pattern)\nX_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(days_since_1_22[50:], world_cases[50:], test_size=0.05, shuffle=False) ","e44ef1e2":"# # use this to find the optimal parameters for SVR\n# c = [0.01, 0.1, 1]\n# gamma = [0.01, 0.1, 1]\n# epsilon = [0.01, 0.1, 1]\n# shrinking = [True, False]\n\n# svm_grid = {'C': c, 'gamma' : gamma, 'epsilon': epsilon, 'shrinking' : shrinking}\n\n# svm = SVR(kernel='poly', degree=3)\n# svm_search = RandomizedSearchCV(svm, svm_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=30, verbose=1)\n# svm_search.fit(X_train_confirmed, y_train_confirmed)","2b2410f3":"# svm_search.best_params_","57beae36":"# svm_confirmed = svm_search.best_estimator_\nsvm_confirmed = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)\nsvm_confirmed.fit(X_train_confirmed, y_train_confirmed)\nsvm_pred = svm_confirmed.predict(future_forcast)","f333c272":"# check against testing data\nsvm_test_pred = svm_confirmed.predict(X_test_confirmed)\nplt.plot(y_test_confirmed)\nplt.plot(svm_test_pred)\nplt.legend(['Test Data', 'SVM Predictions'])\nprint('MAE:', mean_absolute_error(svm_test_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(svm_test_pred, y_test_confirmed))","c365fe18":"# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=4)\npoly_X_train_confirmed = poly.fit_transform(X_train_confirmed)\npoly_X_test_confirmed = poly.fit_transform(X_test_confirmed)\npoly_future_forcast = poly.fit_transform(future_forcast)\n\nbayesian_poly = PolynomialFeatures(degree=5)\nbayesian_poly_X_train_confirmed = bayesian_poly.fit_transform(X_train_confirmed)\nbayesian_poly_X_test_confirmed = bayesian_poly.fit_transform(X_test_confirmed)\nbayesian_poly_future_forcast = bayesian_poly.fit_transform(future_forcast)","f1d51590":"# polynomial regression\nlinear_model = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model.fit(poly_X_train_confirmed, y_train_confirmed)\ntest_linear_pred = linear_model.predict(poly_X_test_confirmed)\nlinear_pred = linear_model.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test_confirmed))","8e9473c9":"print(linear_model.coef_)","394f105a":"plt.plot(y_test_confirmed)\nplt.plot(test_linear_pred)\nplt.legend(['Test Data', 'Polynomial Regression Predictions'])","a6c4be83":"# bayesian ridge polynomial regression\ntol = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nnormalize = [True, False]\n\nbayesian_grid = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2, \n                 'normalize' : normalize}\n\nbayesian = BayesianRidge(fit_intercept=False)\nbayesian_search = RandomizedSearchCV(bayesian, bayesian_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search.fit(bayesian_poly_X_train_confirmed, y_train_confirmed)","817de9f8":"bayesian_search.best_params_","4a541d3e":"bayesian_confirmed = bayesian_search.best_estimator_\ntest_bayesian_pred = bayesian_confirmed.predict(bayesian_poly_X_test_confirmed)\nbayesian_pred = bayesian_confirmed.predict(bayesian_poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_bayesian_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_bayesian_pred, y_test_confirmed))","b6e9b67b":"plt.plot(y_test_confirmed)\nplt.plot(test_bayesian_pred)\nplt.legend(['Test Data', 'Bayesian Ridge Polynomial Predictions'])","bf5c38d6":"# helper method for flattening the data, so it can be displayed on a bar graph \ndef flatten(arr):\n    a = [] \n    arr = arr.tolist()\n    for i in arr:\n        a.append(i[0])\n    return a","e69ad0ad":"adjusted_dates = adjusted_dates.reshape(1, -1)[0]\nplt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(adjusted_dates, world_confirmed_avg, linestyle='dashed', color='orange')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Worldwide Coronavirus Cases', 'Moving Average {} Days'.format(window)], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n\nplt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, total_deaths)\nplt.plot(adjusted_dates, world_death_avg, linestyle='dashed', color='orange')\nplt.title('# of Coronavirus Deaths Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Worldwide Coronavirus Deaths', 'Moving Average {} Days'.format(window)], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n\nplt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, total_recovered)\nplt.plot(adjusted_dates, world_recovery_avg, linestyle='dashed', color='orange')\nplt.title('# of Coronavirus Recoveries Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Worldwide Coronavirus Recoveries', 'Moving Average {} Days'.format(window)], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n\nplt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, total_active)\nplt.plot(adjusted_dates, world_active_avg, linestyle='dashed', color='orange')\nplt.title('# of Coronavirus Active Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Active Cases', size=30)\nplt.legend(['Worldwide Coronavirus Active Cases', 'Moving Average {} Days'.format(window)], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n","224bb64d":"plt.figure(figsize=(16, 10))\nplt.bar(adjusted_dates, world_daily_increase)\nplt.plot(adjusted_dates, world_daily_increase_avg, color='orange', linestyle='dashed')\nplt.title('World Daily Increases in Confirmed Cases', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Moving Average {} Days'.format(window), 'World Daily Increase in COVID-19 Cases'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n\nplt.figure(figsize=(16, 10))\nplt.bar(adjusted_dates, world_daily_death)\nplt.plot(adjusted_dates, world_daily_death_avg, color='orange', linestyle='dashed')\nplt.title('World Daily Increases in Confirmed Deaths', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Moving Average {} Days'.format(window), 'World Daily Increase in COVID-19 Deaths'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n\nplt.figure(figsize=(16, 10))\nplt.bar(adjusted_dates, world_daily_recovery)\nplt.plot(adjusted_dates, world_daily_recovery_avg, color='orange', linestyle='dashed')\nplt.title('World Daily Increases in Confirmed Recoveries', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Moving Average {} Days'.format(window), 'World Daily Increase in COVID-19 Recoveries'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","887c23d3":"plt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, np.log10(world_cases))\nplt.title('Log of # of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n\nplt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, np.log10(total_deaths))\nplt.title('Log of # of Coronavirus Deaths Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n\nplt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, np.log10(total_recovered))\nplt.title('Log of # of Coronavirus Recoveries Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","47627837":"def country_plot(x, y1, y2, y3, y4, country):\n    # window is set as 14 in in the beginning of the notebook \n    confirmed_avg = moving_average(y1, window)\n    confirmed_increase_avg = moving_average(y2, window)\n    death_increase_avg = moving_average(y3, window)\n    recovery_increase_avg = moving_average(y4, window)\n    \n    plt.figure(figsize=(16, 10))\n    plt.plot(x, y1)\n    plt.plot(x, confirmed_avg, color='red', linestyle='dashed')\n    plt.legend(['{} Confirmed Cases'.format(country), 'Moving Average {} Days'.format(window)], prop={'size': 20})\n    plt.title('{} Confirmed Cases'.format(country), size=30)\n    plt.xlabel('Days Since 1\/22\/2020', size=30)\n    plt.ylabel('# of Cases', size=30)\n    plt.xticks(size=20)\n    plt.yticks(size=20)\n    plt.show()\n\n    plt.figure(figsize=(16, 10))\n    plt.bar(x, y2)\n    plt.plot(x, confirmed_increase_avg, color='red', linestyle='dashed')\n    plt.legend(['Moving Average {} Days'.format(window), '{} Daily Increase in Confirmed Cases'.format(country)], prop={'size': 20})\n    plt.title('{} Daily Increases in Confirmed Cases'.format(country), size=30)\n    plt.xlabel('Days Since 1\/22\/2020', size=30)\n    plt.ylabel('# of Cases', size=30)\n    plt.xticks(size=20)\n    plt.yticks(size=20)\n    plt.show()\n\n    plt.figure(figsize=(16, 10))\n    plt.bar(x, y3)\n    plt.plot(x, death_increase_avg, color='red', linestyle='dashed')\n    plt.legend(['Moving Average {} Days'.format(window), '{} Daily Increase in Confirmed Deaths'.format(country)], prop={'size': 20})\n    plt.title('{} Daily Increases in Deaths'.format(country), size=30)\n    plt.xlabel('Days Since 1\/22\/2020', size=30)\n    plt.ylabel('# of Cases', size=30)\n    plt.xticks(size=20)\n    plt.yticks(size=20)\n    plt.show()\n\n    plt.figure(figsize=(16, 10))\n    plt.bar(x, y4)\n    plt.plot(x, recovery_increase_avg, color='red', linestyle='dashed')\n    plt.legend(['Moving Average {} Days'.format(window), '{} Daily Increase in Confirmed Recoveries'.format(country)], prop={'size': 20})\n    plt.title('{} Daily Increases in Recoveries'.format(country), size=30)\n    plt.xlabel('Days Since 1\/22\/2020', size=30)\n    plt.ylabel('# of Cases', size=30)\n    plt.xticks(size=20)\n    plt.yticks(size=20)\n    plt.show()\n      \n# helper function for getting country's cases, deaths, and recoveries        \ndef get_country_info(country_name):\n    country_cases = []\n    country_deaths = []\n    country_recoveries = []  \n    \n    for i in dates:\n        country_cases.append(confirmed_df[confirmed_df['Country\/Region']==country_name][i].sum())\n        country_deaths.append(deaths_df[deaths_df['Country\/Region']==country_name][i].sum())\n        country_recoveries.append(recoveries_df[recoveries_df['Country\/Region']==country_name][i].sum())\n    return (country_cases, country_deaths, country_recoveries)\n    \n    \ndef country_visualizations(country_name):\n    country_info = get_country_info(country_name)\n    country_cases = country_info[0]\n    country_deaths = country_info[1]\n    country_recoveries = country_info[2]\n    \n    country_daily_increase = daily_increase(country_cases)\n    country_daily_death = daily_increase(country_deaths)\n    country_daily_recovery = daily_increase(country_recoveries)\n    \n    country_plot(adjusted_dates, country_cases, country_daily_increase, country_daily_death, country_daily_recovery, country_name)\n    ","4dfda61f":"countries = ['US', 'Russia', 'India', 'Brazil', 'South Africa', 'China', 'Italy',\n             'Germany', 'Spain', 'France', 'United Kingdom', 'Peru', 'Mexico', 'Colombia', 'Saudi Arabia', 'Iran', 'Bangladesh',\n            'Pakistan', 'Turkey', 'Philippines', 'Iraq', 'Indonesia', 'Israel', 'Ukraine', 'Ecuador', 'Bolivia', 'Netherlands', 'Belgium', 'Poland', 'Czechia', 'Switzerland',\n            'Romania', 'Morocco','Portugal'] \n\nfor country in countries:\n    country_visualizations(country)","f117e4af":"# Country Comparison\n# removed redundant code\n\ncompare_countries = ['US', 'Brazil', 'India', 'Russia', 'South Africa'] \ngraph_name = ['Coronavirus Confirmed Cases', 'Coronavirus Confirmed Deaths', 'Coronavirus Confirmed Recoveries']\n\nfor num in range(3):\n    plt.figure(figsize=(16, 10))\n    for country in compare_countries:\n        plt.plot(get_country_info(country)[num])\n    plt.legend(compare_countries, prop={'size': 20})\n    plt.xlabel('Days since 3\/1', size=30)\n    plt.ylabel('# of Cases', size=30)\n    plt.title(graph_name[num], size=30)\n    plt.xticks(size=20)\n    plt.yticks(size=20)\n    plt.show()","56d2bc61":"def plot_predictions(x, y, pred, algo_name, color):\n    plt.figure(figsize=(16, 10))\n    plt.plot(x, y)\n    plt.plot(future_forcast, pred, linestyle='dashed', color=color)\n    plt.title('Worldwide Coronavirus Cases Over Time', size=30)\n    plt.xlabel('Days Since 1\/22\/2020', size=30)\n    plt.ylabel('# of Cases', size=30)\n    plt.legend(['Confirmed Cases', algo_name], prop={'size': 20})\n    plt.xticks(size=20)\n    plt.yticks(size=20)\n    plt.show()","86d350ca":"plot_predictions(adjusted_dates, world_cases, svm_pred, 'SVM Predictions', 'purple')","f0ac2ab8":"plot_predictions(adjusted_dates, world_cases, linear_pred, 'Polynomial Regression Predictions', 'orange')","6201fdac":"plot_predictions(adjusted_dates, world_cases, bayesian_pred, 'Bayesian Ridge Regression Predictions', 'green')","8c85bc24":"# Future predictions using SVM \nsvm_df = pd.DataFrame({'Date': future_forcast_dates[-10:], 'SVM Predicted # of Confirmed Cases Worldwide': np.round(svm_pred[-10:])})\nsvm_df.style.background_gradient(cmap='Reds')","83ba8efc":"# Future predictions using polynomial regression\nlinear_pred = linear_pred.reshape(1,-1)[0]\nlinear_df = pd.DataFrame({'Date': future_forcast_dates[-10:], 'Polynomial Predicted # of Confirmed Cases Worldwide': np.round(linear_pred[-10:])})\nlinear_df.style.background_gradient(cmap='Reds')","0e9cd8bd":"# Future predictions using Bayesian Ridge \nbayesian_df = pd.DataFrame({'Date': future_forcast_dates[-10:], 'Bayesian Ridge Predicted # of Confirmed Cases Worldwide': np.round(bayesian_pred[-10:])})\nbayesian_df.style.background_gradient(cmap='Reds')","4fcd2f60":"mean_mortality_rate = np.mean(mortality_rate)\nplt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, mortality_rate, color='orange')\nplt.axhline(y = mean_mortality_rate,linestyle='--', color='black')\nplt.title('Worldwide Mortality Rate of Coronavirus Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('Case Mortality Rate', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","42eca1ae":"mean_recovery_rate = np.mean(recovery_rate)\nplt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, recovery_rate, color='blue')\nplt.title('Worldwide Recovery Rate of Coronavirus Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('Case Recovery Rate', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","bdf74894":"plt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, total_deaths, color='r')\nplt.plot(adjusted_dates, total_recovered, color='green')\nplt.legend(['death', 'recoveries'], loc='best', fontsize=25)\nplt.title('Worldwide Coronavirus Cases', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","998d0ce9":"plt.figure(figsize=(16, 10))\nplt.plot(total_recovered, total_deaths)\nplt.title('# of Coronavirus Deaths vs. # of Coronavirus Recoveries', size=30)\nplt.xlabel('# of Coronavirus Recoveries', size=30)\nplt.ylabel('# of Coronavirus Deaths', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","86614dd7":"latest_data","6902d3e2":"unique_countries =  list(latest_data['Country_Region'].unique())","ac83e9b3":"country_confirmed_cases = []\ncountry_death_cases = [] \ncountry_active_cases = []\ncountry_recovery_cases = []\ncountry_incidence_rate = [] \ncountry_mortality_rate = [] \n\nno_cases = []\nfor i in unique_countries:\n    cases = latest_data[latest_data['Country_Region']==i]['Confirmed'].sum()\n    if cases > 0:\n        country_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n        \nfor i in no_cases:\n    unique_countries.remove(i)\n    \n# sort countries by the number of confirmed cases\nunique_countries = [k for k, v in sorted(zip(unique_countries, country_confirmed_cases), key=operator.itemgetter(1), reverse=True)]\nfor i in range(len(unique_countries)):\n    country_confirmed_cases[i] = latest_data[latest_data['Country_Region']==unique_countries[i]]['Confirmed'].sum()\n    country_death_cases.append(latest_data[latest_data['Country_Region']==unique_countries[i]]['Deaths'].sum())\n    country_recovery_cases.append(latest_data[latest_data['Country_Region']==unique_countries[i]]['Recovered'].sum())\n    country_active_cases.append(latest_data[latest_data['Country_Region']==unique_countries[i]]['Active'].sum())\n    country_incidence_rate.append(latest_data[latest_data['Country_Region']==unique_countries[i]]['Incident_Rate'].sum())\n    country_mortality_rate.append(country_death_cases[i]\/country_confirmed_cases[i])","7c6f5711":"country_df = pd.DataFrame({'Country Name': unique_countries, 'Number of Confirmed Cases': country_confirmed_cases,\n                          'Number of Deaths': country_death_cases, 'Number of Recoveries' : country_recovery_cases, \n                          'Number of Active Cases' : country_active_cases, 'Incidence Rate' : country_incidence_rate,\n                          'Mortality Rate': country_mortality_rate})\n# number of cases per country\/region\n\ncountry_df.style.background_gradient(cmap='Oranges')","00137315":"unique_provinces =  list(latest_data['Province_State'].unique())","6fe176a3":"province_confirmed_cases = []\nprovince_country = [] \nprovince_death_cases = [] \n# province_recovery_cases = []\nprovince_active = [] \nprovince_incidence_rate = []\nprovince_mortality_rate = [] \n\nno_cases = [] \nfor i in unique_provinces:\n    cases = latest_data[latest_data['Province_State']==i]['Confirmed'].sum()\n    if cases > 0:\n        province_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n \n# remove areas with no confirmed cases\nfor i in no_cases:\n    unique_provinces.remove(i)\n    \nunique_provinces = [k for k, v in sorted(zip(unique_provinces, province_confirmed_cases), key=operator.itemgetter(1), reverse=True)]\nfor i in range(len(unique_provinces)):\n    province_confirmed_cases[i] = latest_data[latest_data['Province_State']==unique_provinces[i]]['Confirmed'].sum()\n    province_country.append(latest_data[latest_data['Province_State']==unique_provinces[i]]['Country_Region'].unique()[0])\n    province_death_cases.append(latest_data[latest_data['Province_State']==unique_provinces[i]]['Deaths'].sum())\n#     province_recovery_cases.append(latest_data[latest_data['Province_State']==unique_provinces[i]]['Recovered'].sum())\n    province_active.append(latest_data[latest_data['Province_State']==unique_provinces[i]]['Active'].sum())\n    province_incidence_rate.append(latest_data[latest_data['Province_State']==unique_provinces[i]]['Incident_Rate'].sum())\n    province_mortality_rate.append(province_death_cases[i]\/province_confirmed_cases[i])","b3708587":"# nan_indices = [] \n\n# # handle nan if there is any, it is usually a float: float('nan')\n\n# for i in range(len(unique_provinces)):\n#     if type(unique_provinces[i]) == float:\n#         nan_indices.append(i)\n\n# unique_provinces = list(unique_provinces)\n# province_confirmed_cases = list(province_confirmed_cases)\n\n# for i in nan_indices:\n#     unique_provinces.pop(i)\n#     province_confirmed_cases.pop(i)","696a8e75":"# number of cases per province\/state\/city top 100 \nprovince_limit = 100 \nprovince_df = pd.DataFrame({'Province\/State Name': unique_provinces[:province_limit], 'Country': province_country[:province_limit], 'Number of Confirmed Cases': province_confirmed_cases[:province_limit],\n                          'Number of Deaths': province_death_cases[:province_limit],'Number of Active Cases' : province_active[:province_limit], \n                            'Incidence Rate' : province_incidence_rate[:province_limit], 'Mortality Rate': province_mortality_rate[:province_limit]})\n# number of cases per country\/region\n\nprovince_df.style.background_gradient(cmap='Oranges')","f8fb277c":"# return the data table with province\/state info for a given country\ndef country_table(country_name):\n    states = list(latest_data[latest_data['Country_Region']==country_name]['Province_State'].unique())\n    state_confirmed_cases = []\n    state_death_cases = [] \n    # state_recovery_cases = []\n    state_active = [] \n    state_incidence_rate = [] \n    state_mortality_rate = [] \n\n    no_cases = [] \n    for i in states:\n        cases = latest_data[latest_data['Province_State']==i]['Confirmed'].sum()\n        if cases > 0:\n            state_confirmed_cases.append(cases)\n        else:\n            no_cases.append(i)\n\n    # remove areas with no confirmed cases\n    for i in no_cases:\n        states.remove(i)\n\n    states = [k for k, v in sorted(zip(states, state_confirmed_cases), key=operator.itemgetter(1), reverse=True)]\n    for i in range(len(states)):\n        state_confirmed_cases[i] = latest_data[latest_data['Province_State']==states[i]]['Confirmed'].sum()\n        state_death_cases.append(latest_data[latest_data['Province_State']==states[i]]['Deaths'].sum())\n    #     state_recovery_cases.append(latest_data[latest_data['Province_State']==states[i]]['Recovered'].sum())\n        state_active.append(latest_data[latest_data['Province_State']==states[i]]['Active'].sum())\n        state_incidence_rate.append(latest_data[latest_data['Province_State']==states[i]]['Incident_Rate'].sum())\n        state_mortality_rate.append(state_death_cases[i]\/state_confirmed_cases[i])\n        \n      \n    state_df = pd.DataFrame({'State Name': states, 'Number of Confirmed Cases': state_confirmed_cases,\n                              'Number of Deaths': state_death_cases, 'Number of Active Cases' : state_active, \n                             'Incidence Rate' : state_incidence_rate, 'Mortality Rate': state_mortality_rate})\n    # number of cases per country\/region\n    return state_df","b855de4a":"us_table = country_table('US')\nus_table.style.background_gradient(cmap='Oranges')","46e1761c":"brazil_table = country_table('Brazil')\nbrazil_table.style.background_gradient(cmap='Oranges')","70a63892":"india_table = country_table('India')\nindia_table.style.background_gradient(cmap='Oranges')","b2b48c14":"russia_table = country_table('Russia')\nrussia_table.style.background_gradient(cmap='Oranges')","bbf5c813":"china_table = country_table('China')\nchina_table.style.background_gradient(cmap='Oranges')","35453a1a":"uk_table = country_table('United Kingdom')\nuk_table.style.background_gradient(cmap='Oranges')","550ea2a0":"france_table = country_table('France')\nfrance_table.style.background_gradient(cmap='Oranges')","a55dd327":"italy_table = country_table('Italy')\nitaly_table.style.background_gradient(cmap='Oranges')","7dad4cf9":"spain_table = country_table('Spain')\nspain_table.style.background_gradient(cmap='Oranges')","7d7b285c":"germany_table = country_table('Germany')\ngermany_table.style.background_gradient(cmap='Oranges')","bea27abd":"total_world_cases = np.sum(country_confirmed_cases)\nus_confirmed = latest_data[latest_data['Country_Region']=='US']['Confirmed'].sum()\noutside_us_confirmed = total_world_cases - us_confirmed\n\nplt.figure(figsize=(16, 9))\nplt.barh('United States', us_confirmed)\nplt.barh('Outside United States', outside_us_confirmed)\nplt.title('# of Total Coronavirus Confirmed Cases', size=20)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n\n\nplt.figure(figsize=(16, 9))\nplt.barh('United States', us_confirmed\/total_world_cases)\nplt.barh('Outside United States', outside_us_confirmed\/total_world_cases)\nplt.title('# of Coronavirus Confirmed Cases Expressed in Percentage', size=20)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","855bd970":"print('Outside United States {} cases ({}%):'.format(outside_us_confirmed, np.round((outside_us_confirmed\/total_world_cases)*100, 1)))\nprint('United States {} cases ({}%)'.format(us_confirmed, np.round((us_confirmed\/total_world_cases)*100, 1)))\nprint('Total: {} cases'.format(total_world_cases))","071f8c4d":"# Only show 15 countries with the most confirmed cases, the rest are grouped into the other category\nvisual_unique_countries = [] \nvisual_confirmed_cases = []\nothers = np.sum(country_confirmed_cases[10:])\n\nfor i in range(len(country_confirmed_cases[:10])):\n    visual_unique_countries.append(unique_countries[i])\n    visual_confirmed_cases.append(country_confirmed_cases[i])\n    \nvisual_unique_countries.append('Others')\nvisual_confirmed_cases.append(others)","b88878c1":"def plot_bar_graphs(x, y, title):\n    plt.figure(figsize=(16, 12))\n    plt.barh(x, y)\n    plt.title(title, size=20)\n    plt.xticks(size=20)\n    plt.yticks(size=20)\n    plt.show()\n    \n# good for a lot x values \ndef plot_bar_graphs_tall(x, y, title):\n    plt.figure(figsize=(19, 18))\n    plt.barh(x, y)\n    plt.title(title, size=25)\n    plt.xticks(size=25)\n    plt.yticks(size=25)\n    plt.show()","b9674a0f":"plot_bar_graphs(visual_unique_countries, visual_confirmed_cases, '# of Covid-19 Confirmed Cases in Countries\/Regions')","33d7c7a3":"log_country_confirmed_cases = [math.log10(i) for i in visual_confirmed_cases]\nplot_bar_graphs(visual_unique_countries, log_country_confirmed_cases, 'Common Log # of Coronavirus Confirmed Cases in Countries\/Regions')","20cfb8cc":"# Only show 10 provinces with the most confirmed cases, the rest are grouped into the other category\nvisual_unique_provinces = [] \nvisual_confirmed_cases2 = []\nothers = np.sum(province_confirmed_cases[10:])\nfor i in range(len(province_confirmed_cases[:10])):\n    visual_unique_provinces.append(unique_provinces[i])\n    visual_confirmed_cases2.append(province_confirmed_cases[i])\n\nvisual_unique_provinces.append('Others')\nvisual_confirmed_cases2.append(others)","30838680":"plot_bar_graphs(visual_unique_provinces, visual_confirmed_cases2, '# of Coronavirus Confirmed Cases in Provinces\/States')","6f3f96b8":"log_province_confirmed_cases = [math.log10(i) for i in visual_confirmed_cases2]\nplot_bar_graphs(visual_unique_provinces, log_province_confirmed_cases, 'Log of # of Coronavirus Confirmed Cases in Provinces\/States')","b712de2c":"def plot_pie_charts(x, y, title):\n    # more muted color \n    c = ['lightcoral', 'rosybrown', 'sandybrown', 'navajowhite', 'gold',\n        'khaki', 'lightskyblue', 'turquoise', 'lightslategrey', 'thistle', 'pink']\n    plt.figure(figsize=(20,15))\n    plt.title(title, size=20)\n    plt.pie(y, colors=c,shadow=True, labels=y)\n    plt.legend(x, loc='best', fontsize=12)\n    plt.show()","ae6c3818":"plot_pie_charts(visual_unique_countries, visual_confirmed_cases, 'Covid-19 Confirmed Cases per Country')","991fd8b7":"plot_pie_charts(visual_unique_provinces, visual_confirmed_cases2, 'Covid-19 Confirmed Cases per State\/Province\/Region')","73f2bcbf":"# Plotting countries with regional data using a pie chart \n\ndef plot_pie_country_with_regions(country_name, title):\n    regions = list(latest_data[latest_data['Country_Region']==country_name]['Province_State'].unique())\n    confirmed_cases = []\n    no_cases = [] \n    for i in regions:\n        cases = latest_data[latest_data['Province_State']==i]['Confirmed'].sum()\n        if cases > 0:\n            confirmed_cases.append(cases)\n        else:\n            no_cases.append(i)\n\n    # remove areas with no confirmed cases\n    for i in no_cases:\n        regions.remove(i)\n\n    # only show the top 5 states\n    regions = [k for k, v in sorted(zip(regions, confirmed_cases), key=operator.itemgetter(1), reverse=True)]\n\n    for i in range(len(regions)):\n        confirmed_cases[i] = latest_data[latest_data['Province_State']==regions[i]]['Confirmed'].sum()  \n    \n    # additional province\/state will be considered \"others\"\n    \n    if(len(regions)>5):\n        regions_5 = regions[:5]\n        regions_5.append('Others')\n        confirmed_cases_5 = confirmed_cases[:5]\n        confirmed_cases_5.append(np.sum(confirmed_cases[5:]))\n        plot_pie_charts(regions_5,confirmed_cases_5, title)\n    else:\n        plot_pie_charts(regions,confirmed_cases, title)","8285a3e8":"pie_chart_countries = ['US', 'Brazil', 'Russia', 'India', 'Peru', 'Mexico', 'Canada', \n                       'Australia', 'China', 'Italy', 'Germany', 'France', 'United Kingdom', 'Spain', 'Chile', 'Colombia', 'Netherlands']\n\nfor i in pie_chart_countries:\n    plot_pie_country_with_regions(i, 'Covid-19 Confirmed Cases in {}'.format(i))","6ccd45d0":"# Replace nan with 0\nus_medical_data.fillna(value=0, inplace=True)\n\ndef plot_us_medical_data():\n    states = us_medical_data['Province_State'].unique()\n    testing_number = []\n    testing_rate = []\n    \n    for i in states:\n        testing_number.append(us_medical_data[us_medical_data['Province_State']==i]['Total_Test_Results'].sum())\n        testing_rate.append(us_medical_data[us_medical_data['Province_State']==i]['Testing_Rate'].max())\n    \n    # only show the top 15 states\n    testing_states = [k for k, v in sorted(zip(states, testing_number), key=operator.itemgetter(1), reverse=True)]\n    testing_rate_states = [k for k, v in sorted(zip(states, testing_rate), key=operator.itemgetter(1), reverse=True)]\n  \n    for i in range(len(states)):\n        testing_number[i] = us_medical_data[us_medical_data['Province_State']==testing_states[i]]['Total_Test_Results'].sum()\n        testing_rate[i] = us_medical_data[us_medical_data['Province_State']==testing_rate_states[i]]['Testing_Rate'].sum()\n    \n    top_limit = 30 \n    \n    plot_bar_graphs_tall(testing_states[:top_limit], testing_number[:top_limit], 'Total Testing per State (Top 30)')\n    plot_bar_graphs_tall(testing_rate_states[:top_limit], testing_rate[:top_limit], 'Testing Rate per 100,000 People (Top 30)')\n \n\nplot_us_medical_data()","63247a2a":"def get_mobility_by_state(transport_type, state, day):\n    return apple_mobility[apple_mobility['sub-region']==state][apple_mobility['transportation_type']==transport_type].sum()[day]","3b511d87":"apple_mobility.head()","c6c04454":"# sample testing \nget_mobility_by_state('walking', 'Connecticut', '2020-07-30')","4720fde7":"# revising date to fit with the mobility format \nrevised_dates = []\nfor i in range(len(dates)):\n    revised_dates.append(datetime.datetime.strptime(dates[i], '%m\/%d\/%y').strftime('%Y-%m-%d'))","bd211768":"# returns true if it is a weekend, and false if it is a weekday \ndef weekday_or_weekend(date):\n    date_obj = datetime.datetime.strptime(date, '%Y-%m-%d')\n    day_of_the_week =  date_obj.weekday()\n    if (day_of_the_week+1) % 6 == 0 or (day_of_the_week+1) % 7 == 0:\n        return True \n    else:\n        return False ","3c1b8d9b":"revised_day_since_1_22 = [i for i in range(len(revised_dates))]","5e6e7fa2":"import matplotlib.dates as mdates\nstates = ['New York', 'Connecticut', 'Florida', 'California', 'Texas', 'Georgia', 'Arizona', 'Illinois', 'Louisiana', 'Ohio',\n          'Tennessee', 'North Carolina', 'South Carolina', 'Alabama', 'Missouri', 'Kansas', 'Pennsylvania', 'Wisconsin', 'Virginia', 'Massachusetts', 'Utah', 'Minnesota',\n         'Oklahoma', 'Iowa', 'Arkansas', 'Kentucky', 'Puerto Rico', 'Colorado', 'Idaho', 'New Jersey', 'Nevada', 'Maryland', 'Indiana', 'Washington', 'Montana', 'Rhode Island',\n         'New Mexico']\nstates.sort()\n\n# making sure the dates are in sync \nmobility_latest_date = apple_mobility.columns[-1]\nmobility_latest_index = revised_dates.index(mobility_latest_date)\n\nfor state in states:\n    # weekend and weekday mobility are separated \n    weekday_mobility = []\n    weekday_mobility_dates = [] \n    weekend_mobility = [] \n    weekend_mobility_dates = [] \n    \n    for i in range(len(revised_dates)):\n        if i <= mobility_latest_index:\n            if weekday_or_weekend(revised_dates[i]):\n                weekend_mobility.append(get_mobility_by_state('walking', state, revised_dates[i]))\n                weekend_mobility_dates.append(i)\n            else:\n                weekday_mobility.append(get_mobility_by_state('walking', state, revised_dates[i]))\n                weekday_mobility_dates.append(i)\n        else:\n            pass\n        \n    # remove null values (they are counted as 0)\n    for i in range(len(weekend_mobility)):       \n        if weekend_mobility[i] == 0 and i != 0:\n            weekend_mobility[i] = weekend_mobility[i-1]\n        elif weekend_mobility[i] == 0 and i == 0:\n            weekend_mobility[i] = weekend_mobility[i+1]\n        else:\n            pass\n        \n    for i in range(len(weekday_mobility)):       \n        if weekday_mobility[i] == 0 and i != 0:\n            weekday_mobility[i] = weekday_mobility[i-1]\n        elif weekday_mobility[i] == 0 and i == 0:\n            weekday_mobility[i] = weekday_mobility[i+1]\n        else:\n            pass\n    \n    \n    weekday_mobility_average = moving_average(weekday_mobility, 7)\n    weekend_mobility_average = moving_average(weekend_mobility, 7)\n    \n    plt.figure(figsize=(16, 10))\n    plt.bar(weekday_mobility_dates, weekday_mobility, color='cornflowerblue')\n    plt.plot(weekday_mobility_dates, weekday_mobility_average, color='green')\n    \n    plt.bar(weekend_mobility_dates, weekend_mobility, color='salmon')\n    plt.plot(weekend_mobility_dates, weekend_mobility_average, color='black')\n    \n    plt.legend(['Moving average (7 days) weekday mobility', 'Moving Average (7 days) weekend mobility', 'Weekday mobility', 'Weekend mobility'], prop={'size': 25})\n    plt.title('{} Walking Mobility Data'.format(state), size=25)\n    plt.xlabel('Days since 1\/22', size=25)\n    plt.ylabel('Mobility Value', size=25)\n    plt.xticks(size=25)\n    plt.yticks(size=25)\n    plt.show()","f6bd3c91":"\nGet all the dates for the outbreak","704afad5":"Data table for **Germany**","7e210b9b":"Data table for **France**","c5b120bf":"Data table for **Brazil**","918f0b9e":"Data table for the **United States**","4f24c394":"Recovery Rate (worldwide) **susceptible to change **","94ff2265":"# Predictions for confirmed coronavirus cases worldwide\n<a id='prediction'><\/a>","c15be9ed":"# Data table\n<a id='data_table'><\/a>","94f500b5":"Data table for **India**","021e1e10":"<a id='mobility_data'><\/a>\n# Taking a look at Apple's mobility data. It can help us understand hotspot states in the US (states and territories). ","fdf7ad4d":"Plotting the number of deaths against the number of recoveries","73c44847":"Convert integer into datetime for better visualization","93be52cf":"Getting the latest information about **provinces\/states** that have confirmed coronavirus cases","e4e3f384":"Getting information about **countries\/regions** that have confirmed coronavirus cases","1aa5176e":"Model for predicting # of confirmed cases. I am using support vector machine, bayesian ridge , and linear regression in this example. We will show the results in the later section. ","8c499846":"#  Graphing the number of confirmed cases, active cases, deaths, recoveries, mortality rate (CFR), and recovery rate\n <a id='world_wide_graphs'><\/a>","3260e36f":"Graphing deaths against recoveries","f6c7754e":"# Coronavirus (COVID-19) Visualization & Prediction \n\nAcknowledgment: thanks to https:\/\/www.kaggle.com\/therealcyberlord (Xingyu Bian)\n\n* UPDATES: \n* Added functionality to use local data, for faster analysis and modeling while having the flexibility to download over internet\n\n<font face = \"Verdana\" size =\"3\">Coronavirus is a family of viruses that are named after their spiky crown. The novel coronavirus, also known as SARS-CoV-2, is a contagious respiratory virus that first reported in Wuhan, China. On 2\/11\/2020, the World Health Organization designated the name COVID-19 for the disease caused by the novel coronavirus. This notebook aims at exploring COVID-19 through data analysis and projections. \n \n   Coronavirus Case Data is provided by <a href='https:\/\/github.com\/CSSEGISandData\/COVID-19'>Johns Hopkins University<\/a>\n   <br>Mobility data is provided by <a href='https:\/\/www.apple.com\/covid19\/mobility'>Apple<\/a>\n   <br>Learn more from the <a href='https:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019'>World Health Organization<\/a>\n   <br>Learn more from the <a href='https:\/\/www.cdc.gov\/coronavirus\/2019-ncov'>Centers for Disease Control and Prevention<\/a>\n   <br>Check out map visualizations from  <a href='https:\/\/gisanddata.maps.arcgis.com\/apps\/opsdashboard\/index.html#\/bda7594740fd40299423467b48e9ecf6'>JHU CCSE Dashboard<\/a>\n   <br>Source code is on <a href='https:\/\/github.com\/therealcyberlord'>my Github<\/a>\n    <br>*Check out my predction model on US states <a href='https:\/\/www.kaggle.com\/therealcyberlord\/multivariable-coronavirus-prediction-for-states'>here<\/a>\n  \n   \n   <font face = \"Verdana\" size =\"3\">\n   Feel free to provide me with feedbacks. \n       <br> Last update: 11\/15\/2020 3:30 PM ET. Updates to the data table. \n       <br> New Updates: Daily report data update for 11\/15. time series data update for 11\/14, mobility data update for 11\/14. Added a pie chart for the Netherlands. \n   <\/font>\n       <br>\n   <font face = \"Verdana\" size =\"3\"> *Prediction models are trained from a later starting date (3\/13\/2020). Therefore, earlier dates might not be accurate. <\/font>\n   <font face = \"Verdana\" size =\"1\">\n    <center><img src='https:\/\/cdn.mos.cms.futurecdn.net\/WxgePFJHTNAQRBuP3g5hoM-650-80.jpg.webp'>\n     Source: https:\/\/cdn.mos.cms.futurecdn.net\/WxgePFJHTNAQRBuP3g5hoM-650-80.jpg.webp <\/center> \n    <\/font>\n <font face = \"Verdana\" size =\"3\"> Keep strong, world. We can get through this! <\/font>\n   <font face = \"Verdana\" size = \"3\"> Thank you guys for all the support! <\/font>\n<br>\n<font face = \"Verdana\" size =\"3\"> Sections <\/font>\n* <a href='#world_wide_graphs'>Exploring Global Coronavirus Cases<\/a>\n* <a href='#country_graphs'>Exploring Coronavirus Cases From Different Countries<\/a>\n* <a href='#prediction'>Worldwide Confirmed Cases Prediction<\/a>\n* <a href='#data_table'>Data Table<\/a>\n* <a href='#pie_charts'>Pie Charts<\/a>\n* <a href='#bar_charts'>Bar Charts<\/a>\n* <a href='#hospital_testing'>US Testing Data<\/a>\n* <a href='#mobility_data'>Mobility Data for Hotspots<\/a>","e938574b":"Data table for **China**","52c73cd8":"<a id='hospital_testing'><\/a>\n# US Medical Data on Testing ","d37c399a":"Data table for **Italy**","fe76e716":"Data table for **Russia**","e2c9c434":"<a id='pie_charts'><\/a>\n# Pie Chart Visualizations for COVID-19","49f4e2af":"# Country Specific Graphs\n<a id='country_graphs'><\/a>","e0852942":"Import the data (make sure you update this on a daily basis)","cc6a46af":"Mortality Rate (worldwide) **susceptible to change **","79d6e103":"***Visual Representations*** (bar charts and pie charts)","90b5a591":"<a id='bar_charts'><\/a>\n# Bar Chart Visualizations for COVID-19","8b06cb2f":"Getting daily increases and moving averages","7e0d4393":"Data table for **Spain**","c1d8b801":"Data table for **United Kingdom**","51b17fb3":"Future forcasting"}}