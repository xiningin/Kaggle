{"cell_type":{"8f41748b":"code","79d3d377":"code","efb7acb3":"code","a4bac8d1":"code","010d0949":"code","46053b21":"code","b09d2eb5":"markdown","14d44c39":"markdown","e5f3cacd":"markdown","c274fd34":"markdown","c695da48":"markdown","c8a15241":"markdown"},"source":{"8f41748b":"import tensorflow as tf\n\nclass compute_cost_by_gpu:\n    def __init__(self, path_lenght):\n        self.inp_p = tf.placeholder(tf.float32, shape=[None,path_lenght], name='input_p')\n        self.inp_x = tf.placeholder(tf.float32, shape=[None,path_lenght], name='input_x' )\n        self.inp_y = tf.placeholder(tf.float32, shape=[None,path_lenght], name='input_y')\n        penalty10_srouce = np.zeros(path_lenght-1)\n        for i in range(0, path_lenght-1):\n            if (i%10)==9 : \n                penalty10_srouce[i] = 0.1\n        penalty10 = tf.constant(penalty10_srouce,dtype=tf.float32)\n        dx = tf.subtract( self.inp_x[:,:path_lenght-1], self.inp_x[:,1:] )\n        dy = tf.subtract( self.inp_y[:,:path_lenght-1], self.inp_y[:,1:] )\n        distance = tf.sqrt( tf.add( tf.multiply(dx,dx), tf.multiply(dy,dy) ) )\n        weight   = tf.add( tf.multiply( self.inp_p[:,:path_lenght-1], penalty10 ), tf.constant(1.0,dtype=tf.float32) )\n        distance_weighted = tf.multiply( distance, weight  )\n        self.total_score = tf.reduce_sum( distance_weighted, axis=1 )\n        #print( dx.shape )\n        #print( distance.shape )\n        #print( self.total_score.shape )\n        self.sess = tf.Session()\n        \n    def compute_cost(self, is_not_prime, x, y):        \n        return self.sess.run([self.total_score],feed_dict={self.inp_p:is_not_prime,self.inp_x:x,self.inp_y:y})","79d3d377":"import numpy as np\nimport pandas as pd\nimport time\nfrom sympy import isprime, primerange\n\n# \"Initial score (generated by Concorde)\ninitial_path = pd.read_csv('..\/input\/santa2018\/santa2018_initial.csv')\n\ncities = pd.read_csv(\"..\/input\/traveling-santa-2018-prime-paths\/cities.csv\")\npnums = [i for i in primerange(0, 197770)]\npath_df = cities.reindex(initial_path['Path']).reset_index()    \n\ndef score_path():\n    path_df['step'] = np.sqrt((path_df.X - path_df.X.shift())**2 + \n                              (path_df.Y - path_df.Y.shift())**2)\n    path_df['step_adj'] = np.where((path_df.index) % 10 != 0,\n                                   path_df.step,\n                                   path_df.step + \n                                   path_df.step*0.1*(~path_df.CityId.shift().isin(pnums)))\n    return path_df.step_adj.sum()\n\nprint( \"Cost - computed by CPU : \" + str( score_path() ) )","efb7acb3":"tf_cities = pd.read_csv(\"..\/input\/traveling-santa-2018-prime-paths\/cities.csv\")\ntf_cities['isPrime'] = tf_cities.CityId.apply(isprime)\ntf_cities['isNotPrime'] = np.invert(tf_cities['isPrime']).astype(float)\ntf_path_df = tf_cities.reindex(initial_path['Path']).reset_index()       \ntf_input_p = [tf_path_df.isNotPrime]\ntf_input_x = [tf_path_df.X         ]\ntf_input_y = [tf_path_df.Y         ]\ngpu_cost = compute_cost_by_gpu(len(initial_path['Path']))\nprint( \"Cost - computed by GPU \" + str( gpu_cost.compute_cost( tf_input_p, tf_input_x, tf_input_y )[0]) )","a4bac8d1":"!cp ..\/input\/santa2018\/santa2018_initial.csv .","010d0949":"t = time.time()\nfor i in range(1000):\n    score_path()\nprint(time.time() - t)","46053b21":"t = time.time()\ntf_input_p = np.empty( (1000,len(tf_path_df)))\ntf_input_x = np.empty( (1000,len(tf_path_df)))\ntf_input_y = np.empty( (1000,len(tf_path_df)))\nfor i in range(1000):\n    tf_input_p[i] = tf_path_df.isNotPrime\n    tf_input_x[i] = tf_path_df.X         \n    tf_input_y[i] = tf_path_df.Y         \ngpu_cost.compute_cost( tf_input_p, tf_input_x, tf_input_y )\nprint(time.time() - t)","b09d2eb5":"Check the result with the ground truth by summitting","14d44c39":"CPU version\n* using initial path - generated by Concode TSP Solver","e5f3cacd":"**Function verification**","c274fd34":"**Cost calculator using Tensorflow**","c695da48":"GPU version\n* It is just function verification, not for performance evaluation. So... 1 path \/ 1 batch","c8a15241":"**Performance**"}}