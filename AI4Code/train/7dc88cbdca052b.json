{"cell_type":{"0dc376fe":"code","36d5e043":"code","df6cda07":"code","1bf2b0f6":"code","cd4fb8b8":"code","f129eb2f":"code","22570444":"code","804b84fc":"code","fd552554":"code","800f4184":"code","c4fea17c":"code","ae11709d":"code","ceaf63ad":"code","5a9592dd":"code","599143fe":"code","2f79ebc7":"code","cf3fa24f":"code","8626a8d6":"code","693ecf4d":"code","ed96ec6e":"code","ee548e4a":"code","cbd7be81":"code","aa3e6341":"code","cd7c25b6":"code","54487a83":"code","383c979e":"code","2baf0522":"code","6721b43a":"markdown","cd030852":"markdown","d700b884":"markdown","b083bf3d":"markdown","fbdb4b84":"markdown","0332c8e3":"markdown","549d076d":"markdown"},"source":{"0dc376fe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","36d5e043":"import keras \nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.metrics import confusion_matrix\n","df6cda07":"df_train_image = pd.read_csv(\"..\/input\/csvTrainImages 13440x1024.csv\", header = None)\ndf_train_label = pd.read_csv(\"..\/input\/csvTrainLabel 13440x1.csv\", header = None)\ndf_test_image = pd.read_csv(\"..\/input\/csvTestImages 3360x1024.csv\", header = None )\ndf_test_label = pd.read_csv(\"..\/input\/csvTestLabel 3360x1.csv\", header = None )","1bf2b0f6":"df_train_image.head()","cd4fb8b8":"df_train_label.head()","f129eb2f":"#changing the value of above dataset into floating type \n#training images\ntrainImg = df_train_image.values.astype('float32')\n#train label \ntrainLabel = df_train_label.values.astype('int32') -1 \n\n#test images\ntestImg = df_test_image.values.astype('float32')\n\ntestLabel = df_test_label.values.astype('int32') -1 ","22570444":"trainImg","804b84fc":"testImg","fd552554":"from tflearn.data_utils import to_categorical\n\n#One Hot encoding of train labels.\ntrainLabel = to_categorical(trainLabel,28)\n\n#One Hot encoding of test labels.\ntestlabel = to_categorical(testLabel,28)","800f4184":"trainLabel","c4fea17c":"testLabel","ae11709d":"# reshape input images to 28x28x1\n# this is to do create an input for neural network\ntrainImg = trainImg\/255\ntestImg = testImg\/255\ntrainImg= trainImg.reshape([-1, 32, 32, 1])\ntestImg = testImg.reshape([-1, 32, 32, 1])","ceaf63ad":"#featuring mean value for \nimport tflearn.data_utils as du\ntrainImg, mean1 = du.featurewise_zero_center(trainImg)\ntestImg, mean2 = du.featurewise_zero_center(testImg)","5a9592dd":"testImg[0]","599143fe":"# Building convolutional network\nrecognizer = Sequential()\n\n#first layer of cnn\nrecognizer.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (32,32,1)))\nrecognizer.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nrecognizer.add(MaxPool2D(pool_size=(2,2)))\nrecognizer.add(Dropout(0.25))\n\n#second layer of cnn\nrecognizer.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nrecognizer.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nrecognizer.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nrecognizer.add(Dropout(0.25))\n\n#fully connected layer \nrecognizer.add(Flatten())\nrecognizer.add(Dense(units = 512, input_dim = 1024, activation = 'relu'))\nrecognizer.add(Dense(units = 256, activation = \"relu\"))\nrecognizer.add(Dropout(0.5))\nrecognizer.add(Dense(28, activation = \"softmax\"))  ","2f79ebc7":"recognizer.summary()","cf3fa24f":"trainImg.shape\n\n","8626a8d6":"testImg.shape","693ecf4d":"optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","ed96ec6e":"recognizer.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","ee548e4a":"datagen = ImageDataGenerator(\n        featurewise_center=False, \n        samplewise_center=False,  \n        featurewise_std_normalization=False,\n        samplewise_std_normalization=False,\n        zca_whitening=False,\n        rotation_range=10,\n        zoom_range = 0.1,  \n        width_shift_range=0.1, \n        height_shift_range=0.1,\n        horizontal_flip=False,\n        vertical_flip=False)","cbd7be81":"datagen.fit(trainImg)","aa3e6341":"recognizer.fit_generator(datagen.flow(trainImg,trainLabel, batch_size=100),\n                             epochs = 30, verbose = 2, steps_per_epoch=trainImg.shape[0] \/\/ 100)","cd7c25b6":"prediction = recognizer.predict(testImg)\nprediction = np.argmax(prediction, axis =1 )","54487a83":"cm = confusion_matrix(testLabel, prediction)\ncm","383c979e":"accuracy = sum(cm[i][i] for i in range(28)) \/ testLabel.shape[0]\nprint(\"accuracy = \" + str(accuracy))","2baf0522":"#if kernel is useful plese upvote","6721b43a":"****OPTIMIZER****\nI am using RMS prop optimizer for best expecte result\n","cd030852":"Compiling face of cnn","d700b884":"****Creating a model****\nfor creating cnn we have to call keras library\n\"keras \" uses tensorflow backend to train data \nIn our example we are using same padding so that after conv operation our output size  will be same as input size this is used in order to check the lossing information of picture .\nto understand this go to[](http:\/\/medium.com\/@RaghavPrabhu\/understanding-of-convolutional-neural-network-cnn-deep-learning-99760835f148\n)\na very goud research on padding and strided convolution \n","b083bf3d":"|* * **** What is Categorical Data?******\n**Categorical data are variables that contain label values rather than numeric values.\n\nThe number of possible values is often limited to a fixed set.","fbdb4b84":"**PREDICTION PHASE **","0332c8e3":"* * **Now importing the necessary library !!******\nfor making neural nework we are using keras here ","549d076d":"**Image Data Generator**\n\nAn augmented image generator can be easily created using ImageDataGenerator API in Keras. ImageDataGenerator generates batches of image data with real-time data augmentation. The most basic codes to create and configure ImageDataGenerator and train deep neural network with augmented images are as follows"}}