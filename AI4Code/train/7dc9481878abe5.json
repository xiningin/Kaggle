{"cell_type":{"7dc6f18d":"code","517e55af":"code","a2c6240c":"code","dc6f60d6":"code","49cbd336":"code","c9fa9c52":"markdown"},"source":{"7dc6f18d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport keras \nfrom keras.constraints import max_norm\nfrom keras.utils import to_categorical\nfrom keras.models import Model, Sequential\nfrom keras.layers import Input, Conv2D, Dense, MaxPooling2D, AveragePooling2D, Dropout, Flatten, Activation, concatenate, GlobalAveragePooling2D\nfrom keras.initializers import glorot_uniform\n","517e55af":"train_X = np.load(\"\/kaggle\/input\/train_X.npy\")\n\ntrain_y = np.asarray(pd.read_csv(\"\/kaggle\/input\/train.csv\").iloc[:,1])\n\ntrain_y = to_categorical(train_y)\n\n","a2c6240c":"image = Input(shape = [100, 100, 3])\nX = Conv2D(128, kernel_size=(3,3), kernel_initializer='glorot_uniform', padding='same', activation='relu')(image)\nX = MaxPooling2D(pool_size=(2,2))(X)\nX = Dropout(0.2)(X)\nX = Conv2D(256, kernel_size=(3,3), kernel_initializer='glorot_uniform', padding='same', activation='relu')(X)\nX = MaxPooling2D(pool_size=(2,2))(X)\nX = Dropout(0.3)(X)\nX = Conv2D(256, kernel_size=(3,3), kernel_initializer='glorot_uniform', padding='same', activation='relu')(X)\nX = MaxPooling2D(pool_size=(2,2))(X)\nX = Dropout(0.3)(X)\nX = Conv2D(256, kernel_size=(3,3), kernel_initializer='glorot_uniform', padding='same', activation='relu')(X)\nX = MaxPooling2D(pool_size=(2,2))(X)\nX = Dropout(0.3)(X)\nX = Conv2D(512, kernel_size=(3,3), kernel_initializer='glorot_uniform', padding='same', activation='relu')(X)\nX = MaxPooling2D(pool_size=(2,2))(X)\nX = Dropout(0.4)(X)\nX = Flatten()(X)\ntarget = Dense(103, activation='softmax')(X)\n\nmodel = Model(image, target, name='Sequential')\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nprint(model.summary())","dc6f60d6":"model.fit(train_X, train_y, epochs=100, validation_split=0.2, batch_size=64)","49cbd336":"import matplotlib.pyplot as plt \nprint(model.history.history.keys())\nplt.figure(1)\nplt.plot(model.history.history['accuracy'])\nplt.plot(model.history.history['val_accuracy'])\nplt.legend(['training accuracy', 'validation accuracy'])\nplt.ylabel('Accuracy')\nplt.xlabel('Epochs')\n","c9fa9c52":"Custom Network"}}