{"cell_type":{"bac827c8":"code","eadbb08e":"code","399b5bfc":"code","d61ea5cf":"code","411a3567":"code","b834c84e":"code","c23424eb":"code","e7d854f6":"code","9bb2a203":"code","4ef07df5":"code","af361660":"code","17215c91":"code","cf76bd0f":"markdown","aeb9758f":"markdown"},"source":{"bac827c8":"#Import libraries\nimport os\nimport copy\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import f1_score\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import FunctionTransformer, StandardScaler, MinMaxScaler\nimport xgboost as xgb\nfrom xgboost import XGBClassifier","eadbb08e":"# Import data\n# load the dataset from a csv file\ndataset_path = '\/kaggle\/input\/dry-beans-classification-iti-ai-pro-intake01\/'\nrowdata = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\nprint(rowdata.columns)\n#print(rowdata.describe())\ndata = copy.deepcopy(rowdata)\ndata.head()","399b5bfc":"data.info()","d61ea5cf":"data.y.unique()","411a3567":"sns.set_theme(style=\"ticks\")\nsns.pairplot(data, hue=\"y\")","b834c84e":"right_skewed_cols = ['Area', 'Perimeter', 'MajorAxisLength', 'MinorAxisLength','EquivDiameter','ConvexArea']\nsmall_left_skewed_cols = ['Eccentricity','Extent', 'roundness']\nlarge_left_skewed_cols = ['Solidity','ShapeFactor4']\nfor col in data.columns:\n    if col == \"ID\" or col ==\"y\":\n        pass\n    elif col in small_left_skewed_cols :\n        sns.distplot(data[col]**5)\n        plt.show();\n    elif col in large_left_skewed_cols :\n        sns.distplot(data[col]**200)\n        plt.show();\n    elif col in right_skewed_cols :\n        sns.distplot(np.log1p(data[col]))\n        plt.show();\n    else:\n        sns.distplot(data[col])\n        plt.show();","c23424eb":"def right_transform(x):\n    return np.log(x + 1)\n\nright_transformer = FunctionTransformer(right_transform)\n\ndef small_left_transform(x):\n    return x**5\n\nsmall_left_transformer = FunctionTransformer(small_left_transform)\n\ndef large_left_transform(x):\n    return x**200\n\nlarge_left_transformer = FunctionTransformer(large_left_transform)\n\npreprocessing = ColumnTransformer(\n    [('right_skew', right_transformer, right_skewed_cols),\n     ('small_left_skew', small_left_transformer, small_left_skewed_cols),\n     ('large_left_skew', large_left_transformer, large_left_skewed_cols)])","e7d854f6":"A = ['ID',\"y\"]\nX = data.drop(A, axis=1, inplace=False)\ny = data['y']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, shuffle =True, stratify=y)","9bb2a203":"params = {\"n_estimators\":70,\n          \"learning_rate\" :0.20,\n          \"max_depth\":7,\n          \"colsample_bytree\":0.91,\n          \"objective\":'multi:softprob',\n          \"base_score\":0.5,\n          \"eval_metric\":\"auc\"}\n\nbst = XGBClassifier(random_state=42)\nbst.set_params(**params)\n\nscaler = MinMaxScaler()\nmodel = Pipeline([\n    (\"preprocessing\", preprocessing),\n    (\"scaler\", scaler),\n    ('classifier', bst)])\n\nmodel.fit(X_train, y_train)\n    \n#Calculating Details\nprint('xgboost Classifier Model Train Score : ' , model.score(X_train, y_train))\nprint('xgboost Classifier Model Test Score  : ' , model.score(X_test, y_test))\n#Calculating Prediction\ny_pred_train = model.predict(X_train)\ny_pred_test = model.predict(X_test)\n#Calculating F1 Score  : 2 * (precision * recall) \/ (precision + recall)\nprint('xgboost Classifier Model Train F1 Score : ',f1_score(y_train, y_pred_train, average='macro')) #it can be : binary,macro,weighted,samples\nprint('xgboost Classifier Model Test F1 Score : ', f1_score(y_test, y_pred_test, average='macro'))","4ef07df5":"plt.figure(figsize=(16, 6))\n# define the mask to set the values in the upper triangle to True\nmask = np.triu(np.ones_like(rowdata.corr(), dtype=np.bool))\nheatmap = sns.heatmap(rowdata.corr(), mask=mask, vmin=-1, vmax=1, annot=True, cmap='BrBG')\nheatmap.set_title('Triangle Correlation Heatmap', fontdict={'fontsize':18}, pad=16);","af361660":"dataset_path = '\/kaggle\/input\/dry-beans-classification-iti-ai-pro-intake01\/'\ndatatest = pd.read_csv(os.path.join(dataset_path, 'test.csv'))\n\nB = ['ID']\ntestX=datatest.drop(columns=B)\n\nmodel.fit(X, y)\ntesty_pred = model.predict(testX)","17215c91":"datatest['y'] = testy_pred\ndatatest[['ID', 'y']].to_csv('\/kaggle\/working\/submission.csv', index=False)\n#datatest.head()","cf76bd0f":"# Submission File","aeb9758f":"# Test Model"}}