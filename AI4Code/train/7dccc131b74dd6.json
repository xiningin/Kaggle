{"cell_type":{"80795443":"code","4b6a3a54":"code","0568de0c":"code","bf489f40":"code","60574ea9":"code","ef0c443f":"code","ed342ecc":"code","d99861bb":"code","0619a259":"code","57ce05c1":"code","1d92852c":"code","de6f32fa":"code","fca7140a":"markdown","0dfc94ab":"markdown","e040b4ce":"markdown","907a9a0f":"markdown","bba6f23a":"markdown","10888d04":"markdown","5d7aa448":"markdown","e6a105ad":"markdown","2eefedf2":"markdown","81c71f04":"markdown"},"source":{"80795443":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b6a3a54":"from geopy.geocoders import Nominatim\n\ngeolocator = Nominatim(user_agent=\"openstreetmap\")","0568de0c":"location = geolocator.geocode(\"Rua Cam\u00e9lia, Osasco, Sao Paulo\")\nprint((location.latitude, location.longitude))","bf489f40":"def get_lat_lon(x):\n    try:\n        location = geolocator.geocode(x)\n        return (location.longitude, location.latitude)\n    except: return (0, 0)","60574ea9":"data = pd.read_csv(\"\/kaggle\/input\/eleicoes-municipais-2016-sp\/sao_paulo.csv\", index_col=False)","ef0c443f":"data.head()","ed342ecc":"address_data = pd.DataFrame()\naddress_data[\"address\"] = data[\"endere\u00e7o\"].unique()","d99861bb":"address_data.shape","0619a259":"address_data[\"coordinates\"] = address_data[\"address\"].apply(lambda x: get_lat_lon(x))","57ce05c1":"(address_data[\"coordinates\"] == (0, 0)).mean()","1d92852c":"df = data.merge(address_data, left_on=\"endere\u00e7o\", right_on=\"address\")","de6f32fa":"df[\"coordinates\"]","fca7140a":"Cool. Now we just merge the data to the original dataset.","0dfc94ab":"Here comes our data:","e040b4ce":"# Adding coordinates to address data\n\nThough we already have the coordinates in the data, I'd like to show how to get this information when an address column is available. ","907a9a0f":"Let's check the proportion of address without coordinates information.","bba6f23a":"So the address in the `endere\u00e7o` column. We already have coordinates, as said, but this notebook is only to show how to do it in different situations. \n\nLet's create a new dataframe to contain all the unique address - since the coordinate will be equal for them all - and them build a new column with coordinates we can later join to the original data.","10888d04":"Let's test it with a single address:","5d7aa448":"For this, we're going to use geopy! \n\nWe then initialize a geolocator. ","e6a105ad":"Now we apply the function to the address column:","2eefedf2":"And here it is!","81c71f04":"Then we create this function to just return the lat lon if it can find it for the provided address or (0, 0) otherwise."}}