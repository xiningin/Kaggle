{"cell_type":{"35339f22":"code","9277acc3":"code","6c98bbb9":"code","0b6aec09":"code","04391b5e":"code","52290f2c":"code","aac23641":"code","4bd7e32d":"code","a14b9664":"code","f328925d":"code","8a3bb9e6":"code","d71a251d":"code","206f08ca":"code","84233c51":"code","6249b6af":"code","0047d879":"code","2c42b15e":"code","c086c693":"code","e1a721c9":"code","1e5ce1ba":"code","e6895d84":"markdown","2546cd67":"markdown","e2bc323c":"markdown","f5ebb4e2":"markdown","432ecc2f":"markdown","f9880d28":"markdown","add22181":"markdown","cbe97130":"markdown","e6dfd933":"markdown","1aa6a1b5":"markdown","526fced9":"markdown","0661685b":"markdown","452cb500":"markdown","8919fe22":"markdown","bb894525":"markdown","f237e2ae":"markdown","9eff499f":"markdown","fa5f21aa":"markdown","36efda09":"markdown","5d02d3a7":"markdown"},"source":{"35339f22":"# [Your code here]\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cv2\n\nplt.rcParams[\"figure.figsize\"] = (20, 10)","9277acc3":"# [Your code here]\n\na = 15\nb = 7.654\nc = 'Image 1'\nd = np.random.randint(0, 255, (128, 128), dtype = 'uint8')\nprint(type(d[0][0]))\n\ne = [a, b, c, d]\n\nfor i in e:\n    print(i, type(i))\n","6c98bbb9":"d = d.astype('float')\/255\n","0b6aec09":"print(d.min())\nprint(d.max())\nprint(np.var(d))\nprint(d.shape)\nprint(type(d))\n","04391b5e":"# [Your code here]\ndef get_histogram(d):\n    n = (d.max()-d.min())\/100\n    edge = np.arange(d.min()+n\/2, d.max(), n)\n    histogram = np.zeros(100)\n    for i in d:\n        for j in i:\n            histogram[int((j-(d.min()-n\/2))\/n)-1]+=1\n            \n    return((edge, histogram))\n            \n            ","52290f2c":"hist = get_histogram(d)\nprint(hist[0].size)","aac23641":"# [Your code here]\n\ndef plot_histogram(array):\n    \n    plt.bar(array[0], array[1], .7*array[0][1]-array[0][0])\n    plt.show()","4bd7e32d":"plot_histogram(get_histogram(d))","a14b9664":"# [Your code here]\n# Uploaded as a dataset \n","f328925d":"# [Your code here]\nf = \"\/kaggle\/input\/cell-images\/cell_sample.png\"\nimport os\nprint(os.path.isfile(f))\n\nimg = cv2.imread(f)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n","8a3bb9e6":"img = img.astype(float)\/255","d71a251d":"img[:,:,0].shape\n","206f08ca":"print(img.shape)\nprint(type(img))\nprint(type(img[0,0,0]))\nfor i in range(3):\n    print(img[:,:,i].min())\n    print(img[:,:,i].max())","84233c51":"# [Your code here]\nplt.imshow(img)\nfor i in range(3):\n    plt.show()\n    plot_histogram(get_histogram(img[:, :, i]))\n    ","6249b6af":"# [Your code here]\n\ndef plot_RGB(image):\n    plt.subplot(121)\n    plt.imshow(image)\n    plt.subplot(122)\n    color = ['r', 'b', 'g']\n    for i in range(3):\n        \n        array = get_histogram(image[:,:,i])\n        #plt.bar(array[0], array[1], .7*array[0][1]-array[0][0], color = color[i])\n        plt.plot(array[0], array[1], color = color[i])\n\n    plt.show()\n    \n    ","0047d879":"plot_RGB(img)","2c42b15e":"# [Your code here]\n\n\navg_filt = np.ones((5,5))*.07\nprint(avg_filt)\n\navg_img = cv2.filter2D(img, -1, avg_filt)\nprint(avg_img.shape)\nplot_RGB(avg_img)","c086c693":"# [Your code here]\n\nimg = cv2.imread(f)\n\ngray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\/255\n\nthd_cell = cv2.threshold(gray_img, 0.5, 1, cv2.THRESH_BINARY_INV)[1]\n\nthd_cell = thd_cell.astype('uint8')\n\nmask = \"\/kaggle\/input\/cell-images\/cell_sample_mask.png\"\n\ncell_mask = cv2.imread(mask)\ngr_cmask = cv2.cvtColor(cell_mask, cv2.COLOR_BGR2GRAY)\/255\nthd_cmask = cv2.threshold(gr_cmask, 0.5, 1, cv2.THRESH_BINARY_INV)[1]\n\ndef img_subplot(a, b):\n    plt.subplot(121)\n    plt.imshow(a)\n    plt.subplot(122)\n    plt.imshow(b)\n    plt.show()\n\nprint(thd_cell)\nimg_subplot(img, cell_mask)\nimg_subplot(gray_img, gr_cmask)\nimg_subplot(thd_cell, thd_cmask)\n","e1a721c9":"# [Your code here]\ncontours, hierarchy = cv2.findContours(image=thd_cell, mode=cv2.RETR_TREE, method=cv2.CHAIN_APPROX_NONE)\nimg_cont = cv2.drawContours(image=img, contours=contours, contourIdx=-1, color=(0, 255, 0), thickness=0, lineType=cv2.LINE_AA)\nimg_cont = cv2.cvtColor(img_cont, cv2.COLOR_BGR2RGB)\nplt.imshow(img_cont)\n\nprint(len(contours))","1e5ce1ba":"#There are 21 cells, but the program finds 27, four of which are smaller features that are obviously not cells.\n#The program is still inaccurate in counting the number of cells due to the detection of smaller features that are not cells.\n#This can be done by using a tophat filter, which can be used to extract and remove only smaller features while ignoring the larger cells\n","e6895d84":"# Art of Engineering\n## Biomedical Engineering Departmental Project\n\n### <span style=\"color:red\">Assignment 1<\/span> - Python, Image visualization and manipulation\n\n#### Due date\/time: <span style=\"color:red\">October 22, 11:59 pm<\/span>\n\n#### Instructions:\n1. You may use any publicly available resources to answer the questions, but you need to ***cite*** them properly to prevent plagiarism.\n2. Using or copying other students' solutions is considered cheating, and you'll be graded ***\"0\" for the entire assignment***.\n3. You may be asked to write Python code or to explain something in each question. To write your answers, please use code and markdown blocks, respectively. If you need to better organize your answers, you may add more blocks. In this notebook, we placed a code block with a comment as `# [Your code here]` and a markdown block with the text \"<span style=\"color:red\">Your answer here<\/span>\" for each question that needs them. If you wish to answer, please remove the comments first.\n4. Please ***use comments at the beginning of each code blocks*** to explain what you've implemented in that block.\n5. Please ***use LaTex formatting to write equations and formulas*** in markdown blocks wherever is needed.\n6. Please define your variables with ***short and meaningful names***.\n7. Please make sure ***internet access is granted*** on the settings panel.\n8. For this assignment, you ***do not need GPU access***. To save your GPU access quote, make sure the \"Accelerator\" is set on \"None\" option.\n\n#### How to submit:\nKaggle automatically saves the notebook after few seconds, and you may close the notebook and come back later to complete it. However, we need you to do the following steps to ensure your answers are visible to us for grading purposes. Thus, after you finished your answers, please:\n1. Rename the notebook as \"AoE_BME_Assignment1\".\n2. Click on the \"Save Version\" button on the top-right side of the window.\n3. On the save popup, save your notebook with:\n    3.1 If the scripts run fast, the \"Save & Run All (Commit)\" option,\n    3.2 If the scripts run slow, such as training networks, etc., and you are satisfied with the outputs of code blocks, \"Quick Save\" option.\n4. Click on the \"Save\" button and let the Kaggle saves your notebook.\n5. Then click on the \"Share\" button.\n6. On the share popup, change \"Private\" to \"Public\".\n7. Copy the \"Public url\", and click on the \"Save\" button.\n8. Paste the \"Public url\" address on the related assignment on the [CourseWorks](https:\/\/courseworks2.columbia.edu\/) and submit it.\n\n**Note:**\n1. You may save multiple versions of your notebook, but the latest version is considered as your final answer.\n2. If you wish us to grade your answers based on a different version of your notebook other than the latest version, please duplicate this template, copy your answers from your desired version, and follow the same procedure to submit. Again, make sure the name of the notebook remains as the current template.\n3. Do not change or save the notebook after the due date\/time as it will be considered a late submission and causes a decrease in your final grade.","2546cd67":"#### <span style=\"color:red\">(10 pts.) Q3. <\/span> Using the `bar` function of the `plt` package, write a function named `plot_histogram(array)` that takes any numpy array with a shape of `WxH`, and displays the histogram of the input array. You may use your previously defined function or numpy functions to calculate the histogram. Also, make sure to set title, x and y axes' labels, and legend for your plot. Then try your function on converted version of the \"d\" variable.\n\nNote: You can add an arbitrary argument for the function to set the title and color. It will be helpful in the future.","e2bc323c":"#### <span style=\"color:red\">(15 pts.) Q2. <\/span> Using only Python commands, write a function named `get_histogram(array)` that takes any numpy arrays with a shape of `WxH` and returns a tuple of two items (i.e., `tuple(edge, histogram)`). Both items in the returned tuple must be numpy arrays with a shape of `(100,)` and their datatypes must be`float` and `int`, respectively. In the `edge` item, you need to set the value for the center of each histogram bin for 100 bins (For example, if the input array values are between 0 and 100, the edges must be `[0.5, 1.5, 2.5, ..., 99.5]`, representing values between `[0, 1), [1, 2), [2, 3), ..., [99 100]`). For the `histogram` item, the array must contain the total number of cells in the input array that lies in between the mentioned values accordingly. Execute your defined function on the converted version of variable \"d\" and print the output.","f5ebb4e2":"#### <span style=\"color:red\">(8 pts.) Q1. <\/span> \n#### a. Define the following variables and print their value and data type.\n1. variable \"a\" with a value as 15\n2. variable \"b\" with a value as 7.654\n3. variable \"c\" with a value as 'Image 1'\n4. variable \"d\" with a value as a random numpy array between 0 to 255 with a shape of 128x128 and datatype 'uint8'","432ecc2f":"#### b. Convert the datatype of variable \"d\" to 'float' and scale its values to be between 0 to 1. Then print the minimum, maximum, variance, shape, and datatype of the converted version of variable \"d\".","f9880d28":"#### b. Define a new function as `plot_RGB(array)` in which the function will display the RGB image and the RGB histogram side-by-side. Remember that the RGB histogram must be in one plot. You can use `plot` function instead of `bar` function in `matplotlib` package. Then display the image using the `plot_RGB(array)` function.","add22181":"## Your name and UNI\n#### David Zhang - dwz2107","cbe97130":"#### <span style=\"color:red\">(5 pts.) Q8. <\/span> Reload the image from the file (cell_sample.png) using OpenCV functions, but do not scale it (Make sure the datatype remains as `uint8`). Then, convert the BGR image to grayscale and create a binary mask using the OpenCV package's `threshold` function. The threshold value is $127$.\n\n*Note: To make the binary mask, you should consider the following formula:\n$$\n\\forall x, y \\quad mask(x,y) = \\begin{cases}\n1\\quad\\text{if } gray(x,y) \\ge 0.5 \\\\\n0\\quad\\text{if } gray(x,y) < 0.5 \\\\\n\\end{cases}\n$$\n\n#### Then, load the ground-truth image (cell_sample_mask.png) and display all grayscale, thresholded, and the ground truth images side-by-sid.","e6dfd933":"### Image segmentation","1aa6a1b5":"#### <span style=\"color:red\">(15 pts.) Q7. <\/span> Define a moving average filter of size $5\\times5$. Then, using the `filter2d` function from the OpenCV package, filter the image and print the shape, minimum and maximum value per channel. Also, display the filtered image using the `plot_RGB(array)` function.","526fced9":"#### <span style=\"color:red\">(10 pts.) Q6. <\/span>  \n#### a. Display the image using the `matplotlib` package, and then plot the histogram of the image for each channel (RGB) using your `plot_histogram(array)` function. ","0661685b":"#### <span style=\"color:red\">(0 pts.) Q0. <\/span> The following packages need to be imported. In the parenthesis, you are suggested to rename them accordingly.\n1. `numpy` (`np`)\n2. `matplotlib.pyplot` (`plt`)\n3. `cv2`","452cb500":"<span style=\"color:red\">Your answer here<\/span>","8919fe22":"#### <span style=\"color:red\">(10 pts.) Q10. <\/span> Can you count the number of cells in the image? Did the active contour method extract the correct number of cells? Would you suggest any other preprocessing method to improve the results assuming that the segmentation approach remains the active contour?","bb894525":"* Hint: The sum of `histogram` must be exactly equal to `W*H`.","f237e2ae":"### Image visualization and manipulation","9eff499f":"#### <span style=\"color:red\">(20 pts.) Q9. <\/span> \n#### a. Read this example of using the OpenCV package for the active contour algorithm for image segmentation: https:\/\/learnopencv.com\/contour-detection-using-opencv-python-c\/. \n#### b. Apply the algorithm on the binary mask you've created by thresholding the grayscale image from the previous question (Q9), draw the contours on a copy of the original image, and display the result.\n\n*Note: The `matplotlib` cannot display BGR images correctly. After drawing the contours, you need to convert the copy image to RGB to be displayed correctly.","fa5f21aa":"### Python section","36efda09":"#### <span style=\"color:red\">(2 pts.) Q4. <\/span> Download the images from the following address using the `wget` bash command and make sure it is downloaded correctly using the `ls` command.\n\nImage address: https:\/\/raw.githubusercontent.com\/soroush361\/AoE_BME\/main\/cell_sample.png\n\nTrue mask address: https:\/\/raw.githubusercontent.com\/soroush361\/AoE_BME\/main\/cell_sample_mask.png","5d02d3a7":"#### <span style=\"color:red\">(5 pts.) Q5. <\/span> Read the downloaded image (cell_sample.png) as a color image using OpenCV's functions. Then convert the image from BGR to RGB format, scale all pixels' values to be between 0 and 1, and print the shape of the image, datatype, minimum and maximum value per channel (RGB).\n\n*Note: Make sure the datatype is `float32` and not the `float64`."}}