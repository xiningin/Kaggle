{"cell_type":{"241f7fd5":"code","4fdb2cc1":"code","2b814873":"code","23e229fa":"code","c46d736c":"code","1540c802":"code","3eaf7859":"code","60b301d5":"code","e7be2487":"code","df11f23a":"code","a636ade6":"code","bbdc621e":"code","bc0a0552":"code","3c96508a":"code","e7ab8d0e":"code","0a07e991":"code","c31ce3e8":"code","147e5e2f":"code","a2ad1878":"code","e14b08c5":"code","73d46481":"code","1cc14333":"code","b44804d6":"code","be29772c":"code","55f8d444":"code","e7c1e8d0":"code","5260307f":"code","abdc6208":"code","93430ac6":"code","5ac99c2f":"code","9adc89e4":"code","43712b94":"code","e184cbb4":"code","13464a20":"code","d0790bf8":"code","9cb29270":"code","e83b3407":"code","f6b10654":"code","ee48237e":"code","9e72393a":"code","4a64e2cc":"code","91ce924c":"code","f083e048":"code","4b81e8ef":"code","19ced83f":"code","75d43c4a":"code","873514a2":"code","12165392":"code","b6a78bd4":"code","6c820312":"code","a6417d99":"markdown","44f23974":"markdown","0231263a":"markdown","e27bcef1":"markdown","e36e2134":"markdown","1a3c6654":"markdown","9d560a05":"markdown","52be5ab2":"markdown","4c04978a":"markdown","2ea5afc1":"markdown","eb4af97a":"markdown","83b04430":"markdown","d97de7ea":"markdown","e17d14b6":"markdown","897143e9":"markdown","6b532ca4":"markdown","329c2167":"markdown","fc8d863b":"markdown","53928c53":"markdown","3ec5a3fe":"markdown","411a4ea0":"markdown"},"source":{"241f7fd5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime # for datetime processing\n\n# Import for Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\n\n# Import for Map Visualization\nimport folium\nfrom folium import plugins\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4fdb2cc1":"# Data Loading ...\ndf1 = pd.read_csv(\"\/kaggle\/input\/pakistandroneattacks\/PakistanDroneAttacksWithTemp Ver 9 (October 19, 2017).csv\", encoding='latin1')\ndf2 = pd.read_csv(\"\/kaggle\/input\/pakistandroneattacks\/PakistanDroneAttacksWithTemp Ver 10 (October 19, 2017).csv\", encoding='latin1')\ndf3 = pd.read_csv(\"\/kaggle\/input\/pakistandroneattacks\/PakistanDroneAttacksWithTemp Ver 11 (November 30 2017).csv\", encoding='latin1')\n\nprint(\"01-Data Shape: \", df1.shape)\nprint(\"02-Data Shape: \", df2.shape)\nprint(\"03-Data Shape: \", df3.shape)","2b814873":"print(\"Data-01 Columns\\n----------------\\n\", df1.columns)\nprint(\"\\nData-02 Columns\\n----------------\\n\", df2.columns)\nprint(\"\\nData-03 Columns\\n----------------\\n\", df3.columns)","23e229fa":"df1.rename( columns={'Total Died Mix' : 'Total Died Max'}, inplace=True)\ndf2.rename( columns={'Total Died Mix' : 'Total Died Max'}, inplace=True)\nprint(\"Data-01 Columns\\n----------------\\n\", df1.columns)\nprint(\"\\nData-02 Columns\\n----------------\\n\", df2.columns)\nprint(\"\\nData-03 Columns\\n----------------\\n\", df3.columns)","c46d736c":"# Combine 03-Dataframe of same columns\ndata = pd.concat([df1, df2, df3], ignore_index=True)\ndata.shape","1540c802":"data.columns","3eaf7859":"# Remove all whitespaces\/extra spaces from columns Name\ndata = data.rename(columns=lambda x: x.strip())\ndata.columns","60b301d5":"# Drop extra column names like [S#]\ndf = data.drop('S#', axis=1)\ndf.shape","e7be2487":"df.isna().sum()","df11f23a":"for x, xRow in df.iteritems():\n    if (xRow.dtype != 'object'):\n        df[x] = df[x].fillna(0)\n        \ndf.isna().sum()","a636ade6":"fltCols = {'Longitude', 'Latitude', 'Temperature(C)', 'Temperature(F)'}\nstrCols = {'Date', 'Time', 'Location', 'City', 'Province', 'Women\/Children', 'Special Mention (Site)', 'Comments', 'References'}\nnumCols = {'No of Strike', 'Al-Qaeda', 'Taliban', 'Civilians Min', 'Civilians Max', 'Foreigners Min', 'Foreigners Max', \n           'Total Died Min', 'Total Died Max', 'Injured Min', 'Injured Max'}\n\nfor x, xCols in df.iteritems():\n    if x in fltCols:\n        df[x] = df[x].astype('float64')\n    if x in strCols:\n        df[x] = df[x].str.lower()\n        df[x] = df[x].astype('object')\n    if x in numCols:\n        df[x] = df[x].astype('int64')\n    \n#    print(x, df[x].dtype)\ndf.info()","bbdc621e":"df.tail()","bc0a0552":"# Fill Data in Date Column\ndf['Date'] = df['Date'].fillna(0)\ndf[df['Date'].isna()]","3c96508a":"df[df['Date'] == 0 ]","e7ab8d0e":"# Drop Rows where date is Zero [0]\ndf = df.drop(df[df['Date'] == 0].index)\ndf[df['Date'] == 0 ]","0a07e991":"df['Date'] = df['Date'].str.strip()\ndf['Date'] = df['Date'].str.replace(',', '-')\nprint(\"Max Year: \", pd.DatetimeIndex(df['Date']).year.max(),\n      \"\\nMin Year: \", pd.DatetimeIndex(df['Date']).year.min())","c31ce3e8":"# Number of Rows as per City Name\ndf['City'].value_counts()","147e5e2f":"# Rename the Cities name for Consistancy\ndf['City'] = df['City'].str.replace('bajaur  agency', 'bajaur agency')\ndf['City'] = df['City'].str.replace('hungu', 'hangu')\ndf['City'].value_counts()","a2ad1878":"# Create Year Column from Date Column\ndf['year'] = pd.DatetimeIndex(df['Date']).year\ndf.head()","e14b08c5":"df[df['year'] == 2004][['Al-Qaeda', 'Taliban', 'Civilians Min', 'Civilians Max', \n                        'Foreigners Min', 'Foreigners Max', 'Total Died Min', 'Total Died Max', \n                        'Injured Min', 'Injured Max']]","73d46481":"dfKill = pd.DataFrame(df, columns=['year', 'Al-Qaeda', 'Taliban', \n                                   'Civilians Min', 'Civilians Max', \n                                   'Foreigners Min', 'Foreigners Max', \n                                   'Total Died Min', 'Total Died Max', \n                                   'Injured Min', 'Injured Max', 'No of Strike'])\n\ndfKill['Civilians'] = ((dfKill['Civilians Min'] + dfKill['Civilians Max'])\/2).apply(np.ceil).astype('int64')\ndfKill['Foreigners'] = ((dfKill['Foreigners Min'] + dfKill['Foreigners Max'])\/2).apply(np.ceil).astype('int64')\ndfKill['Total-Injured'] = ((dfKill['Injured Min'] + dfKill['Injured Max'])\/2).apply(np.ceil).astype('int64')\ndfKill['Total-Killed'] = ((dfKill['Total Died Min'] + dfKill['Total Died Max'])\/2).apply(np.ceil).astype('int64')\n\ndfKill.rename( columns={'No of Strike' : 'no-of-strike'}, inplace=True)\ndfKill['no-of-strike'] = (dfKill['no-of-strike']).apply(np.ceil).astype('int64')\n\ndfKill = dfKill.drop(['Civilians Min', 'Civilians Max', 'Foreigners Min', 'Foreigners Max', \n                      'Total Died Min', 'Total Died Max', 'Injured Min', 'Injured Max'], axis=1)\n#dfKill\ndfKillbyYear = dfKill.groupby(['year'], as_index=False).sum().sort_values('year', ascending=False)\ndfKillbyYear","1cc14333":"print('People Kill in Last 12-Years: ', dfKillbyYear[dfKillbyYear['year'] > dfKillbyYear['year'].max()-12 ]['Total-Killed'].sum() )\nprint('People Injured in Last 12-Years: ', dfKillbyYear[dfKillbyYear['year'] > dfKillbyYear['year'].max()-12 ]['Total-Injured'].sum() )","b44804d6":"for x, xCols in dfKill.iteritems():\n    if(x != 'year'):\n        print(x, \": \", dfKill[x].sum())","be29772c":"fig = plt.figure(figsize=(16, 10))\nx = dfKillbyYear['year']\nfor y, yCols in dfKillbyYear.iteritems():\n    if(y != 'year'):\n        plt.plot(x, dfKillbyYear[y], label = y)\n\nplt.xticks(range(dfKillbyYear['year'].min(), dfKillbyYear['year'].max()))\nplt.xlabel(\"YEARS\", fontsize=16)\nplt.ylabel(\"Numbers\", fontsize=18)\nplt.title(\"Killed & Injured Per Year\", fontsize=22)\nplt.legend(fontsize = 16)\nplt.show()","55f8d444":"def plotData(df, xColName, yColName):\n    \n    figKill = [go.Bar(y = df[yColName],\n                      x = df[xColName],\n                      text = np.round((df[yColName]), 1),\n                      textposition = 'outside',\n                      width = [0.7, 0.7],\n                      marker = dict(color = 'darkorchid', #'lightblue',\n                                    line_color = 'cadetblue', #'black',\n                                    line_width = 2))]\n    \n    layout = go.Layout(title= yColName +' Killed Per Year',\n                       xaxis = dict(title = xColName),\n                       yaxis = dict(title = yColName),\n                       width = 800,\n                       height = 600,\n                       template = 'plotly_white')\n\n    myfig = go.Figure(data = figKill, layout = layout)\n    \n    return myfig","e7c1e8d0":"for x, xCols in dfKillbyYear.iteritems():\n    if(x != 'year'):\n        plotfig = plotData(dfKillbyYear, 'year', x)\n#        plotfig = plotData(dfKillbyYear, 'year', x)\n        iplot(plotfig)","5260307f":"dfKill.head()","abdc6208":"print('Number of Attacks Involved Killing of Terrorists from Taliban: ', dfKill[dfKill['Taliban'] > 0]['no-of-strike'].sum() )\nprint('Number of Attacks Involved Killing of Terrorists from Al-Qaeda: ', dfKill[dfKill['Al-Qaeda'] > 0]['no-of-strike'].sum() )","93430ac6":"print('Total Taliban Killed: ', dfKill[dfKill['Taliban'] > 0 ]['no-of-strike'].sum() )\nprint('Total Al-Qaeda Killed: ', dfKill[dfKill['Al-Qaeda'] > 0 ]['no-of-strike'].sum() )\nprint('---------------------------------------------------' )\nprint('Total Drone Attacks: ', dfKill['no-of-strike'].sum() )","5ac99c2f":"dfStriker = dfKillbyYear.drop(['Civilians', 'Foreigners', 'Total-Injured', 'Total-Killed'], axis=1)\n\nfig = plt.figure(figsize=(16, 10))\nx = dfStriker['year']#.keys()\n\nplt.plot(x, dfStriker['no-of-strike'], color='red', label = 'No of Strike')\nplt.plot(x, dfStriker['Taliban'], color='green', label = 'Taliban Killed')\nplt.plot(x, dfStriker['Al-Qaeda'], color='magenta', label = 'Al-Qaeda Killed')\n\nplt.xticks(range(df['year'].min(), df['year'].max()))\nplt.xlabel(\"YEARS\", fontsize=16)\nplt.ylabel(\"Numbers\", fontsize=18)\nplt.title(\"Number of Drone Attack, Tabliban & Al-Qaeda Targeted Per Year\", fontsize=22)\nplt.legend(fontsize = 16)\nplt.show()","9adc89e4":"fig = dfStriker.plot(x='year', \n                y=['no-of-strike', 'Taliban', 'Al-Qaeda'], \n                kind=\"bar\", \n                figsize=(18,8), align='center'\n                 )\nfig.set_title(\"Number of Drone Attacks, Al-Qaeda & Taliban Targeted\", pad=20, fontdict={'fontsize':24})\nplt.xticks(rotation=30, horizontalalignment=\"center\")\nplt.xlabel(\"Years\", fontsize=15)\nplt.ylabel(\"Numbers\", fontsize=15)\nfig.legend(loc=1,fontsize=15)","43712b94":"# Fill Empty with 'n' and replace 'y' with 1 and 'n' with 0\n# Where y & 1 = Yes,    n & 0 = No\ndf['Women\/Children'] = df['Women\/Children'].fillna('n')\ndf['Women\/Children'] = df['Women\/Children'].replace('y', 1)\ndf['Women\/Children'] = df['Women\/Children'].replace('n', 0)\ndf['Women\/Children'] = df['Women\/Children'].astype('int64')\nprint('Number of Attacks Involved Women and Children: ', df[df['Women\/Children'] == 1]['No of Strike'].sum() )\nprint('Number of Attacks Not Involved Women and Children: ', df[df['Women\/Children'] == 0]['No of Strike'].sum() )","e184cbb4":"sns.set_style('whitegrid')\nplt.subplots(figsize=(10,6))\nax = sns.countplot(x=\"Women\/Children\", data=df) # [0=No, 1=Yes]\nfor container in ax.containers:\n    ax.bar_label(container)\n    \nplt.title(\"Number of Women\/Children Involved in Drone Attacks\", fontsize=18)\nplt.xlabel(\"Women\/Children [0=No, 1=Yes]\", fontsize=15)\nplt.ylabel(\"Numbers\", fontsize=15)\n","13464a20":"dfWomenChild = pd.DataFrame(df, columns=['year', 'Women\/Children', 'No of Strike']).astype('int64')\ndfWomenChild = dfWomenChild.rename(columns={'No of Strike': 'no-of-strike'})\ndfWomenChild\ndfWomenChildbyYear = dfWomenChild[dfWomenChild['Women\/Children'] != 0 ].groupby(['year', 'Women\/Children'], as_index=False).sum().sort_values('year', ascending=False)\ndfWomenChildbyYear","d0790bf8":"trace = go.Scatter(\n    x = dfKillbyYear['year'],\n    y = dfKillbyYear['no-of-strike'],\n    mode = 'lines+markers'\n)\nfig = go.Figure(data=trace)\nfig.update_xaxes(title='Year')\nfig.update_yaxes(title='Number of Attacks')\nfig.update_layout(title_text='Drone Attacks Timeline', title_x=0.5, title_font_size=25)\n\nfig.show()","9cb29270":"fig = plt.figure(figsize=(16, 10))\nx = dfKillbyYear['year']\n\nplt.plot(x, dfKillbyYear['no-of-strike'], color='red', label = 'No of Attacks')\n\nplt.xticks(range(dfKillbyYear['year'].min(), dfKillbyYear['year'].max()))\nplt.xlabel(\"YEARS\", fontsize=16)\nplt.ylabel(\"Drone Attacks\", fontsize=18)\nplt.title(\"Drone Attacks Per Year\", fontsize=22)\nplt.legend(fontsize = 16)\nplt.show()","e83b3407":"# Tenure Bush: 20-01-2001 to 20-01-2009\n# Tenure Obama: 20-01-2009 to 20-01-2017\n# Tenure Trump: 20-01-2017 to 20-01-2021\n\nprint(\"1. George W. Bush Tenure was: 20-01-2001 to 20-01-2009 \\n\" + \n      \"2. Bark Obama Tenure was: 20-01-2009 to 20-01-2017 \\n\" + \n      \"3. Donald Trump Tenure was: 20-01-2017 to 20-01-2021\")\nprint(\"-------------------------------------------------------\")\nprint(\"Number of Drone Attacks in Bush Tenure: \", df[pd.DatetimeIndex(df['Date']) < '2009-01-20']['No of Strike'].sum())\nprint(\"Number of Drone Attacks in Obama Tenure: \", \n      df[ (pd.DatetimeIndex(df['Date']) >= '2009-01-20') & (pd.DatetimeIndex(df['Date']) < '2017-01-20') ]['No of Strike'].sum() )\nprint(\"Number of Drone Attacks in Donald Trump Tenure: \", df[pd.DatetimeIndex(df['Date']) >= '2017-01-20']['No of Strike'].sum())\n\nprint(\"\\n-------------------------------------------------------\\n\" +\n      \"Total Drone Attacks From Year 2001 to 2021: \", str(df['No of Strike'].sum()) + \n      \"\\n-------------------------------------------------------\" )","f6b10654":"df['customDate'] = pd.to_datetime(df['Date'])\ndf.head()","ee48237e":"dfTenure = pd.DataFrame()\ndfTenure['year'] = df['year'].unique()\ndfTenure['GWBush'] = 0\ndfTenure['BObama'] = 0\ndfTenure['DTrump'] = 0\n\nfor x, xRow in dfTenure.iterrows():\n    \n    if(xRow['year'] <= 2009):\n        getTot = df[(df['customDate'] < '2009-01-20') & (df['year'] == xRow['year'])]['No of Strike'].sum()\n        dfTenure.at[x, 'GWBush'] = getTot\n        dfTenure.at[x, 'BObama'] = dfTenure.at[x, 'BObama'] + 0\n        dfTenure.at[x, 'DTrump'] = dfTenure.at[x, 'DTrump'] + 0\n        \n    if(xRow['year'] >= 2009):\n        getTot = df[(df['customDate'] >= '2009-01-20') & (df['customDate'] < '2017-01-20') & (df['year'] == xRow['year']) ]['No of Strike'].sum()\n        dfTenure.at[x, 'GWBush'] = dfTenure.at[x, 'GWBush'] + 0\n        dfTenure.at[x, 'DTrump'] = dfTenure.at[x, 'DTrump'] + 0\n        dfTenure.at[x, 'BObama'] = getTot\n        \n    if (xRow['year'] >= 2017):\n        getTot = df[(df['customDate'] >= '2017-01-20') & (df['year'] == xRow['year']) ]['No of Strike'].sum()\n        dfTenure.at[x, 'GWBush'] = dfTenure.at[x, 'GWBush'] + 0\n        dfTenure.at[x, 'BObama'] = dfTenure.at[x, 'GWBush'] + 0\n        dfTenure.at[x, 'DTrump'] = getTot\n        \ndfTenure","9e72393a":"fig = dfTenure.plot(x='year', \n                y=['GWBush', 'BObama', 'DTrump'], \n                kind=\"bar\", \n                figsize=(18,8), align='center'\n                 )\nfig.set_title(\"Number of Drone Attacks Comparison in Tenure of US Presidents\", pad=20, fontdict={'fontsize':22})\nplt.xticks(rotation=30, horizontalalignment=\"center\")\nplt.xlabel(\"[<- Bush]        :     Years     :     [Obama & Trump ->]\", fontsize=15)\nplt.ylabel(\"Number of Drone Attacks\", fontsize=15)\nfig.legend(loc=1,fontsize=15)","4a64e2cc":"fig = plt.figure(figsize=(16, 10))\nx = dfTenure['year']\n\nplt.plot(x, dfTenure['GWBush'], color='magenta', label = 'GW Bush')\nplt.plot(x, dfTenure['BObama'], color='red', label = 'Bark Obama')\nplt.plot(x, dfTenure['DTrump'], color='blue', label = 'Donald Trump')\n\nplt.xticks(range(df['year'].min(), df['year'].max()))\nplt.xlabel(\"YEARS\", fontsize=16)\nplt.ylabel(\"Number of Drone Attacks\", fontsize=18)\nplt.title(\"Drone Attacks Comparison in Tenure of US Presidents\", fontsize=22)\nplt.legend(fontsize = 16)\nplt.show()","91ce924c":"from sklearn import preprocessing\n\n# Converting Categorical to Numeric data, it will made easy for selecting features\n\ndf_corr = pd.DataFrame(df, columns=['No of Strike', 'Date', 'Time', 'customDate'])\n\ndf_corr['Time'] = df_corr['Time'].fillna('0')\ndf_corr['customDate'] = df_corr['customDate'].fillna('0')\ndf_corr['Time-cat'] = preprocessing.LabelEncoder().fit_transform(df_corr['Time'].values)\ndf_corr['customDate-cat'] = preprocessing.LabelEncoder().fit_transform(df_corr['customDate'].values)\n\ndf_corr.isna().sum()","f083e048":"feature1 = list(['No of Strike', 'customDate-cat', 'Time-cat'])\ncorr1 = df_corr[feature1].corr()\ncorr1","4b81e8ef":"corr1.style.background_gradient(cmap='coolwarm')","19ced83f":"plt.figure(figsize=(6, 4))\nsns.heatmap(corr1, annot=True)","75d43c4a":"# Number of Drone Attacks Per City\/Location\nattackpercity = pd.DataFrame(columns=['city', 'total_attack'])\nattackpercity['city'] = df['City'].unique().tolist()\nattackpercity['total_attack'] = attackpercity['total_attack'].fillna('0').astype(np.int64)\nattackpercity.info()","873514a2":"for x, xRow in attackpercity.iterrows():\n    tot_attack = df[df['City'] == xRow['city']]['No of Strike'].sum()\n    attackpercity.at[x, 'total_attack'] = tot_attack\nattackpercity","12165392":"figCity = [go.Bar(y = attackpercity['total_attack'],\n                  x = attackpercity['city'],\n                  text = np.round((attackpercity['total_attack']), 1),\n                  textposition = 'outside',\n                  width = [0.7, 0.7],\n                  marker = dict(color = 'lightblue',\n                                line_color = 'black',\n                                line_width = 2))]\n\nlayout = go.Layout(title= 'Drone Attacks Per City',\n                   xaxis = dict(title = 'Cities Name'),\n                   yaxis = dict(title = 'Drone Attacks'),\n                   width = 800,\n                   height = 600,\n                   template = 'plotly_white')\n\nfig_plot = go.Figure(data = figCity, layout = layout)\niplot(fig_plot)","b6a78bd4":"dfCivilians = pd.DataFrame(df, columns=['year', 'Al-Qaeda', 'Taliban', \n                                        'Civilians Min', 'Civilians Max', \n                                        'Foreigners Min', 'Foreigners Max'])\n\ndfCivilians['Civilians'] = (((dfCivilians['Civilians Min'] + dfCivilians['Civilians Max'])\/2) + \n                            ((dfCivilians['Foreigners Min'] + dfCivilians['Foreigners Max'])\/2)).apply(np.ceil).astype('int64')\ndfCivilians = dfCivilians.drop(['Civilians Min', 'Civilians Max', 'Foreigners Min', 'Foreigners Max'], axis=1)\n\ndfCivilians['Terrorist'] = (dfCivilians['Al-Qaeda'] + dfCivilians['Taliban']).apply(np.ceil).astype('int64')\n#dfCivilians\ndfCiviliansbyYear = dfCivilians.groupby(['year'], as_index=False).sum().sort_values('year', ascending=True)\ndfCiviliansbyYear","6c820312":"fig = dfCiviliansbyYear.plot(x='year', \n                             y=['Civilians', 'Terrorist'], \n                             kind=\"bar\", \n                             figsize=(18,8), align='center'\n                            )\nfig.set_title(\"Civilians vs Terrorist\", pad=20, fontdict={'fontsize':24})\nplt.xticks(rotation=30, horizontalalignment=\"center\")\nplt.xlabel(\"Years\", fontsize=15)\nplt.ylabel(\"Numbers\", fontsize=15)\nfig.legend(loc=1,fontsize=15)","a6417d99":"### **More Information and Visualization**","44f23974":"##### Create New Column \"Year\" from Date Column","0231263a":"### **1. People Killed & Injured per Year In Last 12-Years ?**","e27bcef1":"### **7. Drone Attacks in Bush & Obama Tenure**","e36e2134":"##### Number of Rows\/Records as per City Names","1a3c6654":"#### **Exploration Of Data**","9d560a05":"## **Correlations**","52be5ab2":"##### Drop column [S#]","4c04978a":"#### **Concatenation of All 03-Data Sets**","2ea5afc1":"## **GW Bush: 20-01-2001 to 20-01-2009**\n## **Barack Obama: 20-01-2009 to 20-01-2017**\n## **Donald Trump: 20-01-2017 to 20-01-2021**","eb4af97a":"##### Remove all whitespaces\/extra spaces from columns Name like [ 'Women\/Children  ' ]","83b04430":"##### Verify the Data type of Columns","d97de7ea":"#### **Data Loading ...**","e17d14b6":"##### **Spelling of [ Total Dies Max ] column name need to correct by apply the rename function on Data-01 & Data-02 for consistency**","897143e9":"### **2. Attacks Involved Killing of Al-Qaeda and Taliban Terrorists ?**","6b532ca4":"##### Remove spaces from start & end of date and replace comma(,) with hyphen(-), find the Max & Min year from Date","329c2167":"* ***in given data, it can be vsualize:***\n* How many people got killed and injured per year\n* How many actual terrorists from Al-Qaeeda and Taliban get targeted\n* in Attacks how many women and children are involved\n* Number of drone attacks in tenure of GWBush Barack Obama and Donald Trump\n* **and lot more**\n\n\n### **Thanks for your comments and vote**","fc8d863b":"### **4. Drone Attacks on Timeline**","53928c53":"##### Fill by Zero(0) in all nonString Columns","3ec5a3fe":"### **3. Women & Children Involved ?**","411a4ea0":"#### **Visuallization of Per Year Killed & Injured**"}}