{"cell_type":{"b9b99b96":"code","0cd14e3b":"code","a982a99a":"code","e8a1fd33":"code","62ed592c":"code","cb7bb054":"code","bff77c67":"code","661e7a0e":"code","feac1e21":"code","c1f29086":"code","451b39e9":"code","7bf6f9b7":"code","4222a453":"code","4cbb1399":"code","d3cf0581":"code","ef551f29":"code","ce08f593":"code","70b8cea4":"code","1ea512fc":"code","808a50e1":"code","8d05abf3":"code","9b29dd5f":"code","57f55fbf":"code","8b2ab20d":"code","9110a09b":"markdown","af17ac51":"markdown","b897ebb8":"markdown","c4716687":"markdown","0ad91d04":"markdown","42a4201f":"markdown"},"source":{"b9b99b96":"import torch\nimport torchvision\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\nimport torchvision.transforms as T\nimport torchvision.models as models\nfrom torch.utils.data import DataLoader\nfrom torchvision.utils import make_grid\nfrom torch.utils.data import random_split","0cd14e3b":"DATA_DIR = \"..\/input\/food41\/images\"","a982a99a":"transform_ds = T.Compose([\n    T.Resize((128,128)),\n    T.RandomHorizontalFlip(),\n    T.ToTensor()\n])\n\nds = torchvision.datasets.ImageFolder(\n    root=DATA_DIR,\n    transform=transform_ds\n\n)","e8a1fd33":"val_ds_size = int(len(ds) * 0.1)\ntrain_ds_size = len(ds) - val_ds_size\n\ntrain_ds, val_ds = random_split(ds, [train_ds_size, val_ds_size])","62ed592c":"batch_size=128","cb7bb054":"train_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=4, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size, num_workers=4, pin_memory=True)","bff77c67":"def show_images(train_dl):\n    for images, labels in train_dl:\n        fig, ax = plt.subplots(figsize=(12, 12))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images[:32], nrow=8).permute(1,2,0))\n        break","661e7a0e":"show_images(train_dl)","feac1e21":"def get_device():\n    if torch.cuda.is_available():\n        return torch.device(\"cuda\")\n    else:\n        return torch.device(\"cpu\")\n    \ndef to_device(data, device):\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        for x in self.dl:\n            yield to_device(x, self.device)\n            \n    def __len__(self):\n        return len(self.dl)","c1f29086":"device = get_device()\ndevice","451b39e9":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)","7bf6f9b7":"def accuracy(out, labels):\n    _, preds = torch.max(out, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))","4222a453":"class ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch\n        out = self(images)\n        loss = F.cross_entropy(out, labels)\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch\n        out = self(images)\n        loss = F.cross_entropy(out, labels)\n        acc = accuracy(out, labels)\n        return {\"val_loss\": loss.detach(), \"val_acc\": acc}\n    \n    def validation_epoch_end(self, outputs):\n        batch_loss = [x[\"val_loss\"] for x in outputs]\n        epoch_loss = torch.stack(batch_loss).mean()\n        batch_acc = [x[\"val_acc\"] for x in outputs]\n        epoch_acc = torch.stack(batch_acc).mean()\n        return {\"val_loss\": epoch_loss.item(), \"val_acc\": epoch_acc.item()}\n    \n    def epoch_end(self, epoch, epochs, result):\n        print(\"Epoch: [{}\/{}], last_lr: {:.6f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n        epoch, epochs, result[\"lrs\"][-1], result[\"train_loss\"], result[\"val_loss\"], result[\"val_acc\"]))","4cbb1399":"class resnet(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.network = models.vgg13(pretrained=True)\n        number_of_features =  self.network.classifier[6].in_features\n        self.network.classifier[6] = nn.Linear(number_of_features, 101)\n        \n    def forward(self, xb):\n        return self.network(xb)\n        \n    def freeze(self):\n        for param in self.network.parameters():\n            param.requires_grad=False\n        for param in self.network.classifier[6].parameters():\n            param.requires_grad=True\n        \n    def unfreeze(self):\n        for param in self.network.parameters():\n            param.requires_grad=True","d3cf0581":"model = to_device(resnet(), device)","ef551f29":"@torch.no_grad()\ndef evaluate(model, val_dl):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_dl]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group[\"lr\"]\n    \ndef fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, weight_decay=0, grad_clip=None,\n                 opt_func=torch.optim.Adam):\n    \n    torch.cuda.empty_cache()\n    \n    history = []\n    opt = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    sched = torch.optim.lr_scheduler.OneCycleLR(opt, max_lr, epochs=epochs,\n                                                   steps_per_epoch=len(train_dl))\n    \n    for epoch in range(epochs):\n        model.train()\n        train_loss = []\n        lrs = []\n        for batch in tqdm(train_dl):\n            loss = model.training_step(batch)\n            train_loss.append(loss)\n            loss.backward()\n            \n            if grad_clip:\n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n                \n            opt.step()\n            opt.zero_grad()\n            \n            lrs.append(get_lr(opt))\n            sched.step()\n            \n        result = evaluate(model, val_dl)\n        result[\"train_loss\"] = torch.stack(train_loss).mean().item()\n        result[\"lrs\"] = lrs\n        model.epoch_end(epoch, epochs, result)\n        history.append(result)\n    return history\n    ","ce08f593":"history = [evaluate(model, val_dl)]\nhistory","70b8cea4":"model.freeze()","1ea512fc":"epochs = 5\nmax_lr = 10e-5\ngrad_clip = 0.1\nweight_decay = 10e-4\nopt_func=torch.optim.Adam","808a50e1":"%%time\n\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, weight_decay=weight_decay,\n                        grad_clip=grad_clip, opt_func=opt_func)","8d05abf3":"model.unfreeze()","9b29dd5f":"%%time\n\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, weight_decay=weight_decay,\n                        grad_clip=grad_clip, opt_func=opt_func)","57f55fbf":"accuracy = [x[\"val_acc\"] for x in history]\nplt.plot(accuracy, \"-rx\")\nplt.title(\"Accuracy vs number of epochs\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")","8b2ab20d":"val_loss = [x[\"val_loss\"] for x in history]\ntrain_loss = [x.get(\"train_loss\") for x in history]\nplt.plot(val_loss, \"-bx\")\nplt.plot(train_loss, \"-gx\")\nplt.title(\"Losses vs number of epochs\")\nplt.legend([\"Validation loss\", \"Train loss\"])\nplt.xlabel(\"Epochs\")","9110a09b":"## Moving the data to the GPU","af17ac51":"## Defining the Model","b897ebb8":"## Training","c4716687":"## Preparing the data","0ad91d04":"## Importing the modules","42a4201f":"## Performance"}}