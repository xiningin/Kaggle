{"cell_type":{"ec0777c6":"code","4bedd6fc":"code","ad72d65d":"code","842bf1b7":"code","2349a8e4":"code","f5f3a537":"code","33e0842f":"code","b9e05d84":"code","4d0b8726":"code","1ec7cde4":"code","aedc77b1":"code","813b1117":"code","f0b93077":"code","0609f635":"code","605504eb":"code","17ff0e65":"code","eaf800a4":"code","465d70b9":"code","5174f9ef":"code","31acb1c9":"code","aac43eee":"code","0fdb2d0d":"code","d7a1fb95":"code","48263a86":"code","edb06323":"code","63651656":"code","d1fee4a5":"code","e5144a3a":"code","af069a47":"code","b5132723":"code","03a8ab1e":"code","81328099":"code","6c70800c":"code","aaf5aa5c":"code","12188201":"code","1d20a3ea":"code","02cba6c6":"code","2a40d003":"code","59c2b8c4":"code","45c61084":"code","676e5cfd":"code","8de8c12d":"code","45575581":"code","e6e096d8":"code","3e60c30c":"code","e004da93":"code","6d04b736":"code","096b4b9c":"code","63407769":"code","0e7ae201":"code","7dabbc4d":"code","b16d3dc9":"code","4b5843ab":"code","69880bc9":"code","f2c4c93e":"code","92b25d72":"code","c82b04c6":"code","99b13a5a":"code","961b8b63":"code","56fc9e01":"code","055a464b":"code","2e544320":"code","f1991385":"code","c36e4f20":"markdown","17b574cf":"markdown","b902e05e":"markdown","ece6b148":"markdown","b40b13d4":"markdown","b6dbc8a5":"markdown","bb6bcf1d":"markdown","d0c74ae8":"markdown","b8fc3ad2":"markdown","09df3ee9":"markdown","c621eaf7":"markdown","ad7b5a30":"markdown","c3a13625":"markdown","05a46650":"markdown","120a0dfc":"markdown"},"source":{"ec0777c6":"import pandas as pd\nimport numpy as np \nimport numpy\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# import pandas\nimport math\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\n# fix random seed for reproducibility\n\nnumpy.random.seed(7)","4bedd6fc":"df = pd.read_csv('..\/input\/air-passengers\/AirPassengers.csv')","ad72d65d":"plt.figure(figsize=(12,8))\nsns.lineplot(data=df)\nplt.title(\"Number of Passengers accoring to Months\")","842bf1b7":"df.info()","2349a8e4":"df.tail()","f5f3a537":"df.shape","33e0842f":"dataframe = pd.read_csv('..\/input\/air-passengers\/AirPassengers.csv' , usecols=[1], engine='python')\ndataset = dataframe.values\n","b9e05d84":"dataset[:5]","4d0b8726":"dataset.shape","1ec7cde4":"dataset = dataset.astype('float32')\n# normalize the dataset\nscaler = MinMaxScaler(feature_range=(0, 1))\ndataset = scaler.fit_transform(dataset)","aedc77b1":"dataset[:5]","813b1117":"dataset.shape","f0b93077":"train_size=len(dataset)*0.65\nprint(train_size)","0609f635":"train_size = int(len(dataset) * 0.67)\ntest_size = len(dataset) - train_size\ntrain, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]\nprint(len(train), len(test))","605504eb":"train[86:]","17ff0e65":"test[:10]","eaf800a4":"\ndef create_dataset(timeseries_data, n_features):\n    X= []\n    y = []\n    for i in range(len(timeseries_data)):\n        #find the end of this pattern\n        end_ix = i + n_features\n        \n        #check if we are beyond the sequence\n        if end_ix > len(timeseries_data) -1:\n            break\n            \n        #gather input and output of the pattern\n        seq_x, seq_y = timeseries_data[i:end_ix], timeseries_data[end_ix]\n        X.append(seq_x)\n        y.append(seq_y)\n        \n    return np.array(X), np.array(y)    ","465d70b9":"n_steps = 10   \nX, y = create_dataset(train, n_steps)\ntestX, testY = create_dataset(test, n_steps)","5174f9ef":"X[:3]","31acb1c9":"y[:2]","aac43eee":"X.shape","0fdb2d0d":"def create_dataset(dataset, time_step=1):\n    dataX, dataY = [], []\n    for i in range(len(dataset)-time_step-1):\n        a= dataset[i:(i+time_step), 0]\n        dataX.append(a)\n        dataY.append(dataset[i+ time_step, 0])\n    return numpy.array(dataX), numpy.array(dataY)\n    ","d7a1fb95":"time_step =20\nX_train, y_train = create_dataset(train, time_step)\nX_test, y_test = create_dataset(test, time_step)","48263a86":"X_train.shape","edb06323":"from sklearn.linear_model import LinearRegression","63651656":"model_lr = LinearRegression()","d1fee4a5":"model_lr.fit(X_train, y_train)","e5144a3a":"predictions_lr = model_lr.predict(X_test)","af069a47":"predictions_lr","b5132723":"y_test","03a8ab1e":"print(\"Acuurancy on training set\",model_lr.score(X_train, y_train))","81328099":"print(\"Acuraccy on Testing set\",model_lr.score(X_test, y_test))","6c70800c":"predictions_lr.shape, y_test.shape","aaf5aa5c":"pred_df=pd.DataFrame(predictions_lr, y_test).reset_index()","12188201":"pred_df_new = pred_df.rename(columns={'index': 'Predictions', 0: 'True_values'})","1d20a3ea":"pred_df_new.head()","02cba6c6":"import seaborn as sns\nimport matplotlib.pyplot as plt","2a40d003":"plt.figure(figsize=(12,8))\nsns.lineplot(data= pred_df_new)\nplt.title(\"Predictions VS True Values on Testng set\")","59c2b8c4":"n_features = 1\nX= X.reshape((X.shape[0], X.shape[1], n_features))","45c61084":"X.shape","676e5cfd":"model = Sequential()\nmodel.add(LSTM(50, activation = 'relu', return_sequences = True, input_shape = (n_steps, n_features)))\nmodel.add(LSTM(50, activation = 'relu'))\nmodel.add(Dense(1))\nmodel.compile(optimizer= 'adam', loss= 'mse')","8de8c12d":"model.fit(X, y, epochs = 300, verbose = 1)","45575581":"predictions=model.predict(X)","e6e096d8":"predictions.shape","3e60c30c":"y.shape","e004da93":"print(\"Expected Value:\",y[10][0])\nprint('Predicted Value:',predictions[10][0])","6d04b736":"n_features = 1\ntestX= testX.reshape((testX.shape[0], testX.shape[1], n_features))","096b4b9c":"test_predictions=model.predict(testX)","63407769":"test.shape","0e7ae201":"test.shape\nx_input= test[38:]","7dabbc4d":"# x_input=testX[38:]","b16d3dc9":"x_input.shape","4b5843ab":"x_input = x_input.reshape(1, -1)","69880bc9":"x_input.shape","f2c4c93e":"temp_input= list(x_input)\ntemp_input = temp_input[0].tolist()","92b25d72":"len(temp_input)","c82b04c6":"x_input = x_input.reshape((1, n_steps,1))\nmodel.predict(x_input)","99b13a5a":"# demonstrate prediction for next 10 days\nfrom numpy import array\n\nlst_output=[]\nn_steps=10\ni=0\nwhile(i<10):\n    \n    if(len(temp_input)>10):\n        #print(temp_input)\n        x_input=np.array(temp_input[1:])\n        print(\"{} day input {}\".format(i,x_input))\n        x_input=x_input.reshape(1,-1)\n        x_input = x_input.reshape((1, n_steps, 1))\n        #print(x_input)\n        yhat = model.predict(x_input, verbose=0)\n        print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat[0].tolist())\n        temp_input=temp_input[1:]\n        #print(temp_input)\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    else:\n        x_input = x_input.reshape((1, n_steps,1))\n        yhat = model.predict(x_input, verbose=0)\n        print(yhat[0])\n        temp_input.extend(yhat[0].tolist())\n#         print(len(temp_input))\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    \n\nprint(lst_output)","961b8b63":"day_new= np.arange(1,49)\nday_pred = np.arange(50, 60)\n","56fc9e01":"import matplotlib.pyplot as plt\n","055a464b":"plt.plot(day_new,test)\nplt.plot(day_pred,lst_output)","2e544320":"test[35:]","f1991385":"lst_output","c36e4f20":"#### Converting array of matrix into a dataset matrix","17b574cf":"## Linear Regression","b902e05e":"Now before training the data on the LSTM model, we need to prepare the data so that we can fit it on the model, for this task I will define a helper function:","ece6b148":"Time series analysis is a statistical method to analyse the past data within a given duration of time to forecast the future. It comprises of ordered sequence of data at equally spaced interval.To understand the time series data & the analysis let us consider an example. Consider an example of Airline Passenger data. It has the count of passenger over a period of time.","b40b13d4":"we are using last 20 days input for 1 day ","b6dbc8a5":"#### Now spliting data into training and testing set","bb6bcf1d":"## Time Series Forecasting on airline-passengers dataset","d0c74ae8":"Fitting the model ","b8fc3ad2":"#### Predictions for test Data","09df3ee9":"#### Reshape from [samples, timesteps] into [samples, timesteps, features]","c621eaf7":"## 2.LSTM ","ad7b5a30":"### Building LSTM Model","c3a13625":"In this project we are going to use airline-passengers dataset for time forecasting using 1.Linear Regression and 2.LSTM and also we are predicting Passengers for next 10 days ","05a46650":"importing libraries","120a0dfc":"#### Predictions and Model Evaluation"}}