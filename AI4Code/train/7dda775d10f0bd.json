{"cell_type":{"883085a7":"code","494cb252":"code","18ae34ee":"code","5512cf43":"code","8bac5378":"code","dcfd8001":"code","72d670dc":"code","917ff49a":"code","3becc30f":"code","b2bf645b":"code","9b5bc311":"code","69fc5c45":"code","9f4ff16e":"code","f758f2ac":"code","ecf0ecc8":"code","688b073c":"markdown","dc183a23":"markdown","b794f175":"markdown"},"source":{"883085a7":"!pip install --upgrade pip \\\n--user --quiet --no-warn-script-location\n!pip install git+https:\/\/github.com\/tensorflow\/docs \\\n--user --quiet --no-warn-script-location","494cb252":"import warnings; warnings.filterwarnings('ignore')\nimport pandas as pd,numpy as np,tensorflow as tf\nimport h5py,imageio,os,torch\nimport seaborn as sn,pylab as pl\nfrom tensorflow.keras.preprocessing import image as tkimg\nfrom tensorflow_docs.vis import embed\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom skimage import io; from tqdm import tqdm\nfrom ipywidgets import widgets\nfrom PIL import ImageFile,Image\nImageFile.LOAD_TRUNCATED_IMAGES=True\nfrom torch.utils.data import DataLoader as tdl\nfrom torch.utils.data import Dataset as tds\nfrom torchvision import transforms,utils\ndev=torch.device('cuda:0' \\\nif torch.cuda.is_available() else 'cpu')\nfrom IPython.core.magic import register_line_magic","18ae34ee":"def paths2tensor(img_paths,file_path,img_size):\n    tensor=[]\n    for img_path in tqdm(img_paths):\n        img0=tkimg.load_img(\n            file_path+img_path,\n            target_size=(img_size,img_size))\n        img=tkimg.img_to_array(img0)\n        tensor.append(np.expand_dims(img,axis=0))\n    return np.vstack(tensor)\ndef animate(images):\n    converted_images=np.clip(images*255,0,255).astype(np.uint8)\n    imageio.mimsave('animation.gif',converted_images)\n    return embed.embed_file('animation.gif')\ndef interpolate_hypersphere(v1,v2,steps):\n    v1norm=tf.norm(v1)\n    v2norm=tf.norm(v2)\n    v2normalized=v2*(v1norm\/v2norm)\n    vectors=[]\n    for step in range(steps):\n        interpolated=v1+(v2normalized-v1)*step\/(steps-1)\n        interpolated_norm=tf.norm(interpolated)\n        interpolated_normalized=\\\n        interpolated*(v1norm\/interpolated_norm)\n        vectors.append(interpolated_normalized)\n    return tf.stack(vectors)\ndef plcmap(cmap,n):\n    return [pl.cm.get_cmap(cmap)(i\/n)[:3] for i in range(1,n+1)]","5512cf43":"file_path='..\/input\/horse-breeds\/'\nimg_size=160\nnames=['Akhal-Teke','Appaloosa','Orlov Trotter',\n       'Vladimir Heavy Draft','Percheron',\n       'Arabian','Friesian']\nfile_list=sorted(os.listdir(file_path))\nlabels=np.array([int(el[:2]) for el in file_list],\n                dtype=np.int8)-1\nimages=np.array(paths2tensor(\n    file_list,file_path=file_path,img_size=img_size),\n    dtype=np.float32)\/255\nN=labels.shape[0]; n=int(.2*N)\nshuffle_ids=np.arange(N)\nnp.random.RandomState(12).shuffle(shuffle_ids)\nimages,labels=images[shuffle_ids],labels[shuffle_ids]\nx_test,x_train=images[:n],images[n:]\ny_test,y_train=labels[:n],labels[n:]\npd.DataFrame([[x_train.shape,x_test.shape],\n              [x_train.dtype,x_test.dtype],\n              [y_train.shape,y_test.shape],\n              [y_train.dtype,y_test.dtype]],               \n             columns=['train','test'])","8bac5378":"with h5py.File('HorseBreedImages.h5','w') as f:\n    f.create_dataset('train_images',data=x_train)\n    f.create_dataset('train_labels',data=y_train)\n    f.create_dataset('test_images',data=x_test)\n    f.create_dataset('test_labels',data=y_test)\nos.stat('HorseBreedImages.h5')","dcfd8001":"train_csv='train.csv'; test_csv='test.csv'\nimg_path='..\/input'\nfiles=[os.path.relpath(os.path.join(dirpath,fn),img_path) \\\nfor (dirpath,dirnames,filenames) in os.walk(img_path) \\\nfor fn in filenames if fn.endswith('.png')]\nd={'label':[],'breed':[],'file':[],'path':[]}\nfor f in files:\n    _,fn=f.split('\/')\n    label=int(fn[:2])-1\n    breed=names[label]        \n    d['label'].append(label)\n    d['breed'].append(breed)\n    d['file'].append(fn)\n    d['path'].append(f)\ndf=pd.DataFrame.from_dict(d)\nnp.random.seed(123)\nids=np.random.rand(len(df))<.8\ndf_train=df[ids]; df_test=df[~ids]\ndf_train.set_index('file',inplace=True)\ndf_train.to_csv(train_csv)\ndf_test.set_index('file',inplace=True)\ndf_test.to_csv(test_csv)\nnum_classes=np.unique(df['label'].values).shape[0]\nprint([num_classes,len(files)]); df.head()","72d670dc":"class HorseBreedsData(tds):\n    def __init__(self,csv_path,img_dir,transform=None):\n        df=pd.read_csv(csv_path,index_col=0)\n        self.img_dir=img_dir\n        self.csv_path=csv_path\n        self.img_paths=df['path']\n        self.y=df['label'].values\n        self.transform=transform\n    def __getitem__(self,index):\n        img=Image.open(os.path\\\n        .join(self.img_dir,self.img_paths[index]))\n        if self.transform is not None:\n            img=self.transform(img)\n        lbl=self.y[index]\n        return img,lbl\n    def __len__(self):\n        return self.y.shape[0]","917ff49a":"batch_size=12; num_workers=4\ngrayscale=False; img_size=128\ntrans=transforms\\\n.Compose([transforms.Resize((img_size,img_size)),\n          transforms.ToTensor()])\ntrain=HorseBreedsData(\n    csv_path=train_csv,img_dir=img_path,transform=trans)\ntest=HorseBreedsData(\n    csv_path=test_csv,img_dir=img_path,transform=trans)\ndataloaders={'train':tdl(dataset=train,batch_size=batch_size,\n                         shuffle=True,num_workers=num_workers),\n             'test':tdl(dataset=test,batch_size=batch_size,\n                        shuffle=True,num_workers=num_workers)}","3becc30f":"pl.figure(figsize=(10,4))\nsn.countplot(x=[names[l] for l in labels],\n             facecolor=(0,0,0,0),\n             linewidth=5,linestyle='-.',\n             edgecolor=plcmap('tab10',7))\npl.title('Breeds` Distribution',fontsize=20)\nset(labels)","b2bf645b":"img=io.imread(file_path+'01_070.png')[:,:,:3]\nfig=make_subplots(1,2)\nfig.add_trace(go.Image(z=img),1,1)\nti='The Image and the Histogram of Color Values'\nfor channel,color in enumerate(['red','green','blue']):\n    fig.add_trace(\n        go.Histogram(\n            x=img[...,channel].ravel(),\n            opacity=.5,marker_color=color,\n            name='%s channel'%color),1,2)\nfig.update_layout(height=400,width=700,title_text=ti)\nfig.show()","9b5bc311":"def wimg(n,m):\n    display(widgets.Label(\n        value='label #%s => '%(n-1)+names[n-1]))\n    file_name='0%s'%n+'_00%s'%m+'.png'\n    display(widgets.Image(\n        value=open(file_path+file_name,'rb').read(),\n        format='png',width=200,height=200))\nwimg(6,8)","69fc5c45":"fig=make_subplots(1,5); steps=[]\nfor step in np.arange(1,6,1):\n    img=io.imread(file_path+'01_00%s.png'%step)[:,:,:3]\n    fig.add_trace(go.Image(z=img),1,int(step))\n    fig.data[step-1].visible=False\nfig.data[0].visible=True\nti='Akhal-Teke Images'\nfor i in range(len(fig.data)):\n    step=dict(method='update',\n              args=[{'visible':[False]*len(fig.data)}])\n    step['args'][0]['visible'][i]=True\n    steps.append(step)\nsliders=[dict(active=0,pad={'t':5},steps=steps)]\nfig.update_layout(\n    width=650,height=300,sliders=sliders,\n    template='plotly_dark',\n    title_text=ti,title_font=dict(size=15))\nfig.update_xaxes(showticklabels=False)\\\n   .update_yaxes(showticklabels=False)\nfig.show()","9f4ff16e":"@register_line_magic\ndef display_examples(data):\n    for images,labels in dataloaders[data]:  \n        print('Image dimensions: %s'%str(images.shape))\n        print('Label dimensions: %s'%str(labels.shape))\n        n=np.random.randint(1,5)\n        fig=pl.figure(figsize=(10,4))\n        for i in range(n,n+5):\n            ax=fig.add_subplot(1,5,i-n+1,\\\n            xticks=[],yticks=[],title=names[labels[i].item()])\n            ax.imshow(np.transpose(images[i],(1,2,0)))\n        break","f758f2ac":"%display_examples test","ecf0ecc8":"imgs=np.vstack([interpolate_hypersphere(x_test[0],x_test[1],120),\n                interpolate_hypersphere(x_test[1],x_test[0],120)])\nanimate(imgs)","688b073c":"<h1>Ways of Data Processing<\/h1>","dc183a23":"<h1>Code Modules & Functions<\/h1>","b794f175":"<h1>Data Representation<\/h1>"}}