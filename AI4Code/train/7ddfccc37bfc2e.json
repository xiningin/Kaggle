{"cell_type":{"d1810ce2":"code","7003490e":"code","2684542e":"code","bc8021a5":"code","d28e872b":"code","af7dcb2f":"code","a4fe7eb9":"code","71f492c6":"code","9fbb0a27":"code","877c524a":"code","050a999a":"code","410e28df":"code","c5b28023":"code","a1acf5e2":"code","6475765d":"code","2d822f21":"code","a6e91fb6":"code","b916fd0b":"code","2899414b":"code","24c99cb2":"code","c057fd85":"code","fc900a20":"code","b5cf033b":"code","ad2975bf":"code","c6ea27b4":"code","2a7b1f45":"markdown","5767c7a0":"markdown","a75a021c":"markdown","8cd3e62d":"markdown","716d65c1":"markdown","779dbb6d":"markdown"},"source":{"d1810ce2":"import numpy as np\nimport pandas as pd\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    #for filename in filenames:\n    #    print(os.path.join(dirname, filename))","7003490e":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom pathlib import Path\nfrom sklearn.preprocessing import LabelEncoder\nimport PIL\nimport cv2","2684542e":"#checking tensorflow version\ntf.__version__","bc8021a5":"image_dir = Path('..\/input\/braille-character-dataset\/Braille Dataset\/Braille Dataset')","d28e872b":"#how many images\ndir_list = list(image_dir.glob('*.jpg'))","af7dcb2f":"image_count = len(dir_list)\nimage_count","a4fe7eb9":"#generates a list with the filenames\nname_list = []\nfor i in dir_list:\n    name_list.append(os.path.basename(i)[0])","71f492c6":"#opens images and puts into a list\nimages = []\nfor dir in dir_list:\n    I = cv2.imread(str(dir))\n    images.append(I)","9fbb0a27":"#turn both lists in numpy arrays\nimages_list = np.array(images)\nname_list = np.array(name_list).T","877c524a":"#encodes name_list and normalizes image_list\nle = LabelEncoder()\nname_list = le.fit_transform(name_list)\nimages_list = images_list \/ 255.0","050a999a":"images_list.shape","410e28df":"plt.imshow(images_list[0])","c5b28023":"images_list.shape","a1acf5e2":"name_list.shape","6475765d":"from sklearn.model_selection import train_test_split","2d822f21":"X_train, X_test, y_train, y_test = train_test_split(images_list, name_list, test_size=0.2, random_state=42)","a6e91fb6":"model = keras.Sequential([\n    keras.layers.Conv2D(filters=64, kernel_size=(5, 5), padding='same', activation='relu'),\n    keras.layers.Conv2D(filters=64, kernel_size=(3, 3), padding='same', activation='relu'),\n    keras.layers.MaxPooling2D(),\n    keras.layers.Conv2D(filters=64, kernel_size=(3, 3), padding='same', activation='relu'),\n    keras.layers.MaxPooling2D(),\n    keras.layers.Conv2D(filters=64, kernel_size=(3, 3), padding='same', activation='relu'),\n    keras.layers.MaxPooling2D(),\n    keras.layers.Flatten(),\n    keras.layers.Dense(units=576, activation=\"relu\"),\n    keras.layers.Dense(units=288, activation=\"relu\"),\n    keras.layers.Dense(units=26, activation=\"softmax\") #output layer\n])","b916fd0b":"model.compile(optimizer=\"Adam\", loss=\"SparseCategoricalCrossentropy\", metrics=[\"sparse_categorical_accuracy\"])","2899414b":"from keras.callbacks import EarlyStopping","24c99cb2":"es1 = EarlyStopping(patience=20, monitor=\"val_acc\", mode=\"auto\")\nes2 = EarlyStopping(patience=20, monitor=\"val_loss\", mode=\"auto\")\n\n#The neural network will stop fitting if it gets 20 epochs without converge\n\nhistory = model.fit(x=X_train,\n                    y=y_train,\n                    epochs=1000,\n                    validation_split=0.3,\n                    callbacks=[es1, es2])","c057fd85":"model.summary()","fc900a20":"time = np.arange(1, len(history.history['loss'])+1)","b5cf033b":"sns.lineplot(data=history.history, x=time, y='loss')\nsns.lineplot(data=history.history, x=time, y='val_loss')\nplt.title('Loss fitting history')\nplt.legend(labels=['Loss', 'Validation loss'])","ad2975bf":"sns.lineplot(data=history.history, x=time, y='val_sparse_categorical_accuracy')\nsns.lineplot(data=history.history, x=time, y='sparse_categorical_accuracy')\nplt.title('Accuracy fitting history')\nplt.legend(labels=['Accuracy', 'Valuation accuracy'])","c6ea27b4":"model.evaluate(X_test, y_test)","2a7b1f45":"# Creating model:","5767c7a0":"# Evaluating model:","a75a021c":"# Importing Libraries:","8cd3e62d":"# Preprocessing:","716d65c1":"# Getting started:","779dbb6d":"# Splitting in train and test data:"}}