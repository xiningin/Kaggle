{"cell_type":{"de15a740":"code","7bb802b4":"code","a05cb58b":"code","18658299":"code","f372bd25":"code","9cbeeed6":"code","e4758d19":"code","03eb8a63":"code","ce2b29e5":"code","24690948":"code","2a8c6f47":"code","7da78547":"code","5e6d8bab":"code","ee832a05":"code","911799cd":"code","38009496":"code","f7714610":"code","d7e18e55":"markdown"},"source":{"de15a740":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7bb802b4":"train=pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/test.csv')\nsample_submission=pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/sample_submission.csv')","a05cb58b":"import matplotlib.pyplot as plt\n%matplotlib inline","18658299":"plt.figure(figsize=(20,10))\nplt.plot(train[1:100000].time, train[1:100000].signal)\nplt.show()","f372bd25":"train.signal.value_counts()","9cbeeed6":"X_train=train.drop(columns=['open_channels','time'])\ny_train=train[['open_channels']]\ntest=test.drop(columns=['time'])","e4758d19":"import tensorflow as tf\ntf.__version__","03eb8a63":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Activation, MaxPooling2D, Conv2D, Conv1D, MaxPooling1D, Convolution1D, Dropout\nfrom keras.initializers import random_uniform\nfrom tensorflow.keras.optimizers import SGD","ce2b29e5":"X_train=X_train.values\ny_train=y_train.values\ntest=test.values","24690948":"X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)\ntest = test.reshape(test.shape[0], test.shape[1], 1)","2a8c6f47":"X_train.shape\ninput_shape=X_train.shape[1:3]\ninput_shape","7da78547":"#hyperparameters\ninput_dimension = 226\nlearning_rate = 0.0025\nmomentum = 0.85\nSEED = 42\nhidden_initializer = random_uniform(seed=SEED)\ndropout_rate = 0.2\n\nmodel = Sequential()\nmodel.add(Convolution1D(filters=16, kernel_size=1, input_shape=input_shape, activation='relu'))\nmodel.add(Convolution1D(filters=16, kernel_size=1, activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dropout(dropout_rate))\nmodel.add(Dense(128, input_dim=input_dimension, kernel_initializer=hidden_initializer, activation='relu'))\nmodel.add(Dropout(dropout_rate))\nmodel.add(Dense(64, kernel_initializer=hidden_initializer, activation='relu'))\nmodel.add(Dense(11, kernel_initializer=hidden_initializer, activation='softmax'))\n\nsgd = SGD(lr=learning_rate, momentum=momentum)\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer=sgd, metrics=['acc'])\nmodel.fit(X_train, y_train, epochs=5, batch_size=128)","5e6d8bab":"y_pred=model.predict_classes(test)","ee832a05":"y_pred.shape","911799cd":"submission=pd.DataFrame({'time': sample_submission['time'], 'open_channels':y_pred})\nsubmission.to_csv('\/kaggle\/working\/submission.csv', float_format='%0.4f', index=False)\ncheck=pd.read_csv('\/kaggle\/working\/submission.csv')\n","38009496":"check.head(15)","f7714610":"check.info()","d7e18e55":"**1-D Convolutional Neural Network**"}}