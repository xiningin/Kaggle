{"cell_type":{"40d9c2ff":"code","1d407fdc":"code","bc649570":"code","5be8b623":"code","a9f2772a":"code","27dad8eb":"code","49c28684":"code","4eecbddc":"code","7c1fbb93":"code","56fd9bed":"code","02956e8a":"code","e2c80d66":"code","73689b6b":"markdown","8985f6e8":"markdown","e7eabe3e":"markdown","41d7230c":"markdown","95212a4b":"markdown","4f735c82":"markdown","2a230ad5":"markdown","7f26f81e":"markdown","68c05b04":"markdown","e4a9f7a0":"markdown","48124111":"markdown","2f7a9eeb":"markdown"},"source":{"40d9c2ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport gpxpy\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1d407fdc":"gpx_file1 = open('\/kaggle\/input\/criminal-location-tracking\/GPS_Data\/GPS 1.gpx', 'r')\ngpx_file2 = open('\/kaggle\/input\/criminal-location-tracking\/GPS_Data\/GPS 2.gpx', 'r')\ngpx1 = gpxpy.parse(gpx_file1)\ngpx2 = gpxpy.parse(gpx_file2)\nlen(gpx1.waypoints),len(gpx2.waypoints)","bc649570":"df_gps_1=pd.DataFrame(columns=['latitude','longitude','Datetime'])\ndf_gps_2=pd.DataFrame(columns=['latitude','longitude','Datetime'])\nfor waypoint in gpx1.waypoints:\n    df_gps_1=df_gps_1.append(pd.DataFrame([[waypoint.latitude, waypoint.longitude, waypoint.time]],columns=['latitude','longitude','Datetime']),ignore_index=True)\nfor waypoint in gpx2.waypoints:\n    df_gps_2=df_gps_2.append(pd.DataFrame([[waypoint.latitude, waypoint.longitude, waypoint.time]],columns=['latitude','longitude','Datetime']),ignore_index=True)\ndf_gps_1['Datetime'] = pd.to_datetime(df_gps_1['Datetime'])\ndf_gps_1['Date'] = pd.to_datetime(df_gps_1['Datetime']).dt.date\ndf_gps_1['Time'] = pd.to_datetime(df_gps_1['Datetime']).dt.time\ndf_gps_2['Datetime'] = pd.to_datetime(df_gps_2['Datetime'])\ndf_gps_2['Date'] = pd.to_datetime(df_gps_2['Datetime']).dt.date\ndf_gps_2['Time'] = pd.to_datetime(df_gps_2['Datetime']).dt.time\ndf_gps_1.head(),df_gps_2.head()","5be8b623":"df_gps_2['Date'].value_counts(),df_gps_2['Date'].value_counts()","a9f2772a":"df_gps_1['Time'].value_counts().head(),df_gps_2['Time'].value_counts().head()","27dad8eb":"df_gps_1['Datetime'].dt.hour","49c28684":"def get_scatter(x):    \n    plt.figure(figsize=(20,5))\n    plt.scatter(df_gps_1[df_gps_1.Datetime.dt.hour==x]['latitude'],df_gps_1[df_gps_1.Datetime.dt.hour==x]['longitude'],color='yellow',label='GPS 1')\n    plt.scatter(df_gps_2[df_gps_2.Datetime.dt.hour==x]['latitude'],df_gps_2[df_gps_2.Datetime.dt.hour==x]['longitude'],color='black',marker='+',label='GPS 2')\n    plt.grid()\n    plt.legend()\n    plt.show()","4eecbddc":"for x in df_gps_1['Datetime'].dt.hour.value_counts().index:\n    print('Time from : '+str(x)+':00 to '+str(x+1)+':00 ')\n    get_scatter(x)","7c1fbb93":"import folium\nfrom folium.plugins import FastMarkerCluster","56fd9bed":"def get_map(x):\n    locations1 = list(zip(df_gps_1[df_gps_1.Datetime.dt.hour==x]['latitude'].to_list(),df_gps_1[df_gps_1.Datetime.dt.hour==x]['longitude'].to_list()))\n    locations2 = list(zip(df_gps_2[df_gps_2.Datetime.dt.hour==x]['latitude'].to_list(),df_gps_2[df_gps_2.Datetime.dt.hour==x]['longitude'].to_list()))\n    map1 = folium.Map(location=[52.3680, 4.9036], zoom_start=11.5)\n    folium.PolyLine(locations1, color=\"red\", weight=5.5, opacity=1).add_to(map1)\n    for x in locations1:\n        folium.Marker(\n                location=x,\n                popup=\"GPS 1 latitude:\"+str(x[0])+\" longitute:\"+str(x[1]),\n                icon=folium.Icon(color=\"red\", icon=\"info-sign\"),).add_to(map1)\n    folium.PolyLine(locations2, color=\"green\", weight=5.5, opacity=1).add_to(map1)\n    for x in locations2:\n        folium.Marker(\n                location=x,\n                popup=\"GPS 2 latitude:\"+str(x[0])+\" longitute:\"+str(x[1]),\n                icon=folium.Icon(color=\"green\", icon=\"info-sign\"),).add_to(map1)\n    display(map1)","02956e8a":"get_map(15)","e2c80d66":"get_map(16)","73689b6b":"> **firstly we will read the .gpx file**","8985f6e8":"# Their Locations In Time Slot 15:00 to 16:00","e7eabe3e":"> **Now we will see which Date data we have provided , Also we will explore our Time column**","41d7230c":"# Their Locations In Time Slot 16:00 to 17:00","95212a4b":"> **First we analysize and compare their locations on the Hourly basis**","4f735c82":"> **They didn't met there as they are in their way to somewhere on road**","2a230ad5":"# From The Above It Is Clear That They Met At Latitude:52.360 and Longitude: 4.874 , And To Be Exact At The Park.","7f26f81e":"> **From the above we can conclude that Between 15:00-16:00 and 16:00-17:00 time slot they are expected to Met**","68c05b04":"# Lets Import the Dataset into the pandas's Dataframe","e4a9f7a0":"# Now We Will Find Our Answer That Where Exactly Did They Met","48124111":"> **So Now We Will Look At Their Exact Locatoins On Both Time Slot**","2f7a9eeb":"> **Now we will make panda's dataframe**"}}