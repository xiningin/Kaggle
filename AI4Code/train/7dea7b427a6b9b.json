{"cell_type":{"968f5a2e":"code","5c896a8d":"code","1351d6eb":"code","e3552c41":"code","119531e3":"code","d2eb9fff":"code","7b70b318":"code","2cb53d8d":"code","cd60b577":"code","bf63d14c":"code","a6cb0e53":"code","5fb50aab":"code","b80b14f0":"code","89d001b1":"code","21adb3cf":"code","dabef90e":"code","08aa73d1":"markdown","dab5b75d":"markdown","b335582d":"markdown","29ce288e":"markdown","68e27ff7":"markdown","29652c06":"markdown","a8ff1ca6":"markdown","3a558377":"markdown","723f4e01":"markdown","9f1385f7":"markdown","6dbdb3ec":"markdown","c5517e5c":"markdown","6e4d464a":"markdown"},"source":{"968f5a2e":"import random\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.parallel\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader\n\nimport torchvision.datasets as dset\nimport torchvision.transforms as transforms\nimport torchvision.utils as vutils\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nfrom IPython.display import HTML\n\n# set random seed\nmanual_seed = 999\nrandom.seed(manual_seed)\ntorch.manual_seed(manual_seed)\n","5c896a8d":"batch_size = 128\nimage_size = 64\nchannels = 3\nz_dim = 100\nngpu = 1\n\ndevice = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\nprint(device)","1351d6eb":"trans = transforms.Compose([\n    transforms.Resize(image_size),\n    transforms.CenterCrop(image_size),\n    transforms.ToTensor(),\n    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n])","e3552c41":"train_set = dset.ImageFolder(root='..\/input\/img_align_celeba\/', transform=trans)\ntrain_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True, num_workers=4)\n\nprint(len(train_set))\n","119531e3":"batch = next(iter(train_loader))[0]\n\nnrows=4\nncols=4\nfig, axes = plt.subplots(nrows, ncols, sharex=True, sharey=True, squeeze=True)\nfor i in range(nrows):\n    for j in range(ncols):\n        img = batch[nrows * i + j].numpy()\n        img = img.transpose((1, 2, 0))\n        axes[i, j].imshow(img)\n\nplt.show()","d2eb9fff":"def weight_init(m):\n    classname = m.__class__.__name__\n    if classname.find('Conv') != -1:\n        nn.init.normal_(m.weight.data, 0.0, 0.02)\n    elif classname.find('BatchNorm') != -1:\n        nn.init.normal_(m.weight.data, 1.0, 0.02)\n        nn.init.constant_(m.bias.data, 0)\n","7b70b318":"class Generator(nn.Module):\n    def __init__(self):\n        super(Generator, self).__init__()\n        \n        self.network = nn.Sequential(\n            nn.ConvTranspose2d(z_dim, 512, kernel_size=4, stride=1, padding=0, bias=False),\n            nn.BatchNorm2d(512),\n            nn.ReLU(inplace=True),\n            # state size = 512*4*4\n            \n            nn.ConvTranspose2d(512, 256, kernel_size=4, stride=2, padding=1, bias=False),\n            nn.BatchNorm2d(256),\n            nn.ReLU(inplace=True),\n            # state size = 256*8*8\n            \n            nn.ConvTranspose2d(256, 128, kernel_size=4, stride=2, padding=1, bias=False),\n            nn.BatchNorm2d(128),\n            nn.ReLU(inplace=True),\n            # state size = 128*16*16\n            \n            nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1, bias=False),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True),\n            # state size = 64*32*32\n            \n            nn.ConvTranspose2d(64, 3, kernel_size=4, stride=2, padding=1, bias=False),\n            nn.Tanh(),\n            # state size = 3*64*64\n        )\n    \n    def forward(self, x):\n        return self.network(x)\n","2cb53d8d":"# create the generator\nnetG = Generator().to(device)\n\nif device.type == 'cuda':\n    netG.to(device)\n\n# Handle multi-GPU if desired\nif (device.type == 'cuda' and ngpu > 1):\n    netG = nn.DataParallel(netG, list(range(ngpu)))\n\n# apply the weight_init function to randomly initialize all the weights\nnetG.apply(weight_init)\n\n# print the model\nprint(netG)","cd60b577":"class Discriminator(nn.Module):\n    def __init__(self):\n        super(Discriminator, self).__init__()\n        \n        self.network = nn.Sequential(\n            nn.Conv2d(3, 64, kernel_size=4, stride=2, padding=1, bias=False),\n            nn.LeakyReLU(negative_slope=0.2, inplace=True),\n            # state size = 128*32*32\n            \n            nn.Conv2d(64, 128, kernel_size=4, stride=2, padding=1, bias=False),\n            nn.BatchNorm2d(128),\n            nn.LeakyReLU(negative_slope=0.2, inplace=True),\n            # state size = 128*16*16\n            \n            nn.Conv2d(128, 256, kernel_size=4, stride=2, padding=1, bias=False),\n            nn.BatchNorm2d(256),\n            nn.LeakyReLU(negative_slope=0.2, inplace=True),\n            # state size = 256*8*8\n            \n            nn.Conv2d(256, 512, kernel_size=4, stride=2, padding=1, bias=False),\n            nn.BatchNorm2d(512),\n            nn.LeakyReLU(negative_slope=0.2, inplace=True),\n            # state size = 512*4*4\n            \n            nn.Conv2d(512, 1, kernel_size=4, stride=1, padding=0, bias=False),\n            # state size 1*1*1\n            nn.Sigmoid()\n        )\n    \n    def forward(self, x):\n        return self.network(x)\n","bf63d14c":"netD = Discriminator().to(device)\n\nif device.type == 'cuda' and ngpu > 1:\n    netD = nn.DataParallel(netD, list(range(ngpu)))\n\n# initializing the weights\nnetD.apply(weight_init)\n\nprint(netD)","a6cb0e53":"# inititalize the BCELoss function\ncriterion = nn.BCELoss()\n\n# Create batch of latent vectors that we will use to visualize\n# the progression of the generator\nfixed_noise = torch.randn(64, z_dim, 1, 1, device=device)\n\n# Establish convention for real and fake labels during training\nreal_labels = 1\nfake_labels = 0\n\n# Setup Adam optimizers for both G and D\nlr = 0.0002\n\ng_optim = optim.Adam(netG.parameters(), lr=lr, betas=(0.5, 0.999))\nd_optim = optim.Adam(netD.parameters(), lr=lr, betas=(0.5, 0.999))\n","5fb50aab":"# lists to keep track of progress\n\nimg_list = []\ng_losses = []\nd_losses = []\niters = 0\nepochs = 30\nprint_every = 50\nsave_img_every = 500\n","b80b14f0":"# training loop\nprint('starting training...')\n\nfor epoch in range(epochs):\n    for i, data in enumerate(train_loader):\n        \n        ################################################################\n        # (1) Update D network: maximize log(D(x)) + log(1 - D(G(z)))  #\n        ################################################################\n        \n        # train with all-real batch\n        netD.zero_grad()\n        # Format batch\n        real = data[0].to(device)\n        b_size = real.size(0)\n        label = torch.full((b_size,), real_labels, device=device)\n        \n        # forward pass real batch through D\n        output = netD(real).view(-1)\n        \n        # calculate loss on all-real batch\n        d_loss_real = criterion(output, label)\n        \n        # calculate gradients for D in backward pass\n        d_loss_real.backward()\n        d_x = output.mean().item()\n        \n        ## Train with all-fake batch\n        # Generate batch of latent vectors\n        noise = torch.randn(b_size, z_dim, 1, 1, device=device)\n        # generate fake images with G\n        fake = netG(noise)\n        label.fill_(fake_labels)\n        # classify all fake batch with D\n        output = netD(fake.detach()).view(-1)\n        # calculate D's loss on the all-fake batch\n        d_loss_fake = criterion(output, label)\n        # Calculate the gradients for this batch\n        d_loss_fake.backward()\n        d_g_z1 = output.mean().item()\n        # add the gradients from the all-real and all-fake batches\n        d_loss = d_loss_fake + d_loss_real\n        # update D\n        d_optim.step()\n        \n        ################################################\n        # (2) Update G network: maximize log(D(G(z)))  #\n        ################################################\n        \n        netG.zero_grad()\n        label.fill_(real_labels)  # fake labels are real for generator cost\n        \n        # Since we just updated D, perform another forward pass of all-fake batch through D\n        output = netD(fake).view(-1)\n        \n        # Calculate G's loss based on this output\n        g_loss = criterion(output, label)\n        # Calculate gradients for G\n        g_loss.backward()\n        d_g_z2 = g_loss.mean().item()\n        # Update G\n        g_optim.step()\n        \n        if i % print_every == 0:\n            print('[{}\/{}][{}\/{}]\\tLoss_D: {:.4f}\\tLoss_G: {:.4f}\\tD(x): {:.4f}\\tD(G(z)): {:.4f}'.format(\n                epoch, epochs, i, len(train_loader), d_loss.item(), g_loss.item(), d_x, d_g_z1, d_g_z2))\n        \n        # save losses for plotting\n        d_losses.append(d_loss.item())\n        g_losses.append(g_loss.item())\n        \n        # Output training stats\n        if i % save_img_every == 0:\n            with torch.no_grad():\n                fake = netG(fixed_noise).detach().cpu()\n            img_list.append(vutils.make_grid(fake, padding=2, normalize=True))\n            \n        iters += 1\n\nprint('end of training...')\n","89d001b1":"plt.figure(figsize=(10,5))\nplt.title(\"Generator and Discriminator Loss During Training\")\nplt.plot(g_losses,label=\"G\")\nplt.plot(d_losses,label=\"D\")\nplt.xlabel(\"iterations\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","21adb3cf":"#%%capture\nfig = plt.figure(figsize=(8,8))\nplt.axis(\"off\")\nims = [[plt.imshow(np.transpose(i,(1,2,0)), animated=True)] for i in img_list]\nani = animation.ArtistAnimation(fig, ims, interval=1000, repeat_delay=1000, blit=True)\n\nHTML(ani.to_jshtml())","dabef90e":"# Grab a batch of real images from the dataloader\nreal_batch = next(iter(train_loader))\n\n# Plot the real images\nplt.figure(figsize=(15,15))\nplt.subplot(1,2,1)\nplt.axis(\"off\")\nplt.title(\"Real Images\")\nplt.imshow(np.transpose(vutils.make_grid(real_batch[0].to(device)[:64], padding=5, normalize=True).cpu(),(1,2,0)))\n\n# Plot the fake images from the last epoch\nplt.subplot(1,2,2)\nplt.axis(\"off\")\nplt.title(\"Fake Images\")\nplt.imshow(np.transpose(img_list[-1],(1,2,0)))\nplt.show()\n","08aa73d1":"### Initializing weights + GPU setup","dab5b75d":"## Loss Functions and Optimizers\n<br\/><br\/>\nWith D and G setup, we can specify how they learn through the loss functions and optimizers. We will use the Binary Cross Entropy loss ([BCELoss](https:\/\/pytorch.org\/docs\/stable\/nn.html#torch.nn.BCELoss)) function which is defined in PyTorch as:\n\n> \u2113(x,y) = L = $\\{l_1,\u2026,l_N\\}^\u22a4$, $\\ln$ = $\u2212[y_n\u22c5\\log(x_n)+(1\u2212y_n)\u22c5log(1\u2212x_n)]$\n\nNotice how this function provides the calculation of both log components in the objective function (i.e. `log(D(x))` and `log(1\u2212D(G(z))))`. We can specify what part of the BCE equation to use with the y input. This is accomplished in the training loop which is coming up soon, but it is important to understand how we can choose which component we wish to calculate just by changing y (i.e. GT labels).\n<br\/><br\/>\nNext, we define our real label as 1 and the fake label as 0. These labels will be used when calculating the losses of D and G, and this is also the convention used in the original GAN paper. Finally, we set up two separate optimizers, one for D and one for G. As specified in the DCGAN paper, both are Adam optimizers with `learning rate = 0.0002` and `Beta1 = 0.5`. For keeping track of the generator\u2019s learning progression, we will generate a fixed batch of latent vectors that are drawn from a Gaussian distribution (i.e. fixed_noise) . In the training loop, we will periodically input this fixed_noise into G, and over the iterations we will see images form out of the noise.","b335582d":"### Initializing weights + GPU setup\n\nNow, we can instantiate the generator and apply the `weights_init` function. Check out the printed model to see how the generator object is structured.","29ce288e":"## The Discriminator","68e27ff7":"## The Generator","29652c06":"## Training\n<br\/><br\/>\nFinally, now that we have all of the parts of the GAN framework defined, we can train it. Be mindful that training GANs is somewhat of an art form, as incorrect hyperparameter settings lead to mode collapse with little explanation of what went wrong. Here, we will closely follow Algorithm 1 from Goodfellow\u2019s paper, while abiding by some of the best practices shown in [**ganhacks**](https:\/\/github.com\/soumith\/ganhacks). Namely, we will \u201cconstruct different mini-batches for real and fake\u201d images, and also adjust G\u2019s objective function to maximize `logD(G(z))`. Training is split up into two main parts.\n<br\/><br\/>\n<p class='h4'>Part 1 - Train the Discriminator<\/p>\n<br\/>\nRecall, the goal of training the discriminator is to maximize the probability of correctly classifying a given input as real or fake. In terms of Goodfellow, we wish to \u201cupdate the discriminator by ascending its stochastic gradient\u201d. Practically, we want to maximize `log(D(x))+log(1\u2212D(G(z)))`. Due to the separate mini-batch suggestion from ganhacks, we will calculate this in two steps. First, we will construct a batch of real samples from the training set, forward pass through D, calculate the loss `log(D(x))`, then calculate the gradients in a backward pass. Secondly, we will construct a batch of fake samples with the current generator, forward pass this batch through D, calculate the loss `log(1\u2212D(G(z)))`, and accumulate the gradients with a backward pass. Now, with the gradients accumulated from both the all-real and all-fake batches, we call a step of the Discriminator\u2019s optimizer.\n<br\/><br\/>\n\n<p class='h4'>Part 2 - Train the Generator<\/p>\n<br\/>\nAs stated in the original paper, we want to train the Generator by minimizing `log(1\u2212D(G(z)))` in an effort to generate better fakes. As mentioned, this was shown by Goodfellow to not provide sufficient gradients, especially early in the learning process. As a fix, we instead wish to maximize `log(D(G(z)))`. In the code we accomplish this by: classifying the Generator output from Part 1 with the Discriminator, computing G\u2019s loss using real labels as GT, computing G\u2019s gradients in a backward pass, and finally updating G\u2019s parameters with an optimizer step. It may seem counter-intuitive to use the real labels as GT labels for the loss function, but this allows us to use the `log(x)` part of the BCELoss (rather than the `log(1\u2212x)` part) which is exactly what we want.\n<br\/><br\/>\n\n<p class='h4'>Part 3 - Showing some statistics<\/p>\n<br\/>\nFinally, we will do some statistic reporting and at the end of each epoch we will push our fixed_noise batch through the generator to visually track the progress of G\u2019s training. The training statistics reported are:\n\n- **Loss_D** - discriminator loss calculated as the sum of losses for the all real and all fake batches `log(D(x))+log(D(G(z)))`.\n- **Loss_G** - generator loss calculated as `log(D(G(z)))`\n- **D(x)** - the average output (across the batch) of the discriminator for the all real batch. This should start close to 1 then theoretically converge to 0.5 when G gets better. Think about why this is.\n- **D(G(z))** - average discriminator outputs for the all fake batch. The first number is before D is updated and the second number is after D is updated. These numbers should start near 0 and converge to 0.5 as G gets better. Think about why this is.","a8ff1ca6":"## Setting some parameters","3a558377":"## The Data","723f4e01":"## Weight Initialization","9f1385f7":"### Visualization of G\u2019s progression","6dbdb3ec":"## Import packages","c5517e5c":"## Results\n### Loss versus training iteration","6e4d464a":"### Real Images vs. Fake Images"}}