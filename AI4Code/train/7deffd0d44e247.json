{"cell_type":{"e9369dda":"code","21cad936":"code","0f1b25fe":"code","9ffcc033":"code","bd73b1fa":"code","fcb66cf7":"code","4fc85b71":"code","4bea9bf1":"code","8e535f55":"code","9620c9ae":"code","4c83cbf9":"code","72270390":"code","0de38ddd":"code","416c6ef5":"code","24daa4a6":"code","6b4f4734":"code","51d4c47f":"code","a7666afc":"code","e03f7ab2":"code","3e986d72":"code","f5a3f46f":"code","7636cc59":"code","07506578":"code","d4cec9f3":"code","7ad46c49":"code","aa8ea56c":"code","df0fec01":"code","bc2a32a4":"markdown","cc777773":"markdown","d303b7fe":"markdown","5aecdcfd":"markdown","05d1f404":"markdown"},"source":{"e9369dda":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import accuracy_score\n\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","21cad936":"train_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")","0f1b25fe":"train_df.head()","9ffcc033":"print(\"Train Data shape :: \",train_df.shape)\nprint(\"Test Data shape :: \",test_df.shape)","bd73b1fa":"train_df.describe()","fcb66cf7":"train_df.info()","4fc85b71":"test_df.info()","4bea9bf1":"train_df.isna().sum()","8e535f55":"test_df.isna().sum()","9620c9ae":"train_set = train_df.drop(columns=[\"Survived\"])\ntest_set = test_df.copy(deep = True)\nframe = [train_set,test_set]\nfinal_set = pd.concat(frame,axis=0)","4c83cbf9":"plt.figure(figsize = (30,10))\nsns.heatmap(final_set.isnull(),yticklabels = False, cbar = True)","72270390":"def fill_nan_categorical(categorical_features,data):\n    for i in categorical_features:\n        data[i] = data[i].fillna(data[i].mode()[0])\n    \n    return data","0de38ddd":"categorical_features = final_set.select_dtypes(exclude=[\"number\",\"bool_\"]).columns.tolist()\nfinal_set = fill_nan_categorical(categorical_features,final_set)","416c6ef5":"plt.figure(figsize = (30,10))\nsns.heatmap(final_set.isnull(),yticklabels = False, cbar = True)","24daa4a6":"def fill_nan_continuous(continuous_features,data):\n    for i in categorical_features:\n        data[i] =  data[i].fillna(data[i].mean()[0])\n    \n    return data","6b4f4734":"continuous_features = final_set.select_dtypes(include=[\"number\",\"object_\"]).columns.tolist()\nfinal_set = fill_nan_categorical(continuous_features,final_set)","51d4c47f":"plt.figure(figsize = (30,10))\nax = plt.axes()\nsns.heatmap(final_set.isnull(),yticklabels = False, cbar = True)\nax.set_title('Data Post all Nan values Removal',fontsize =20,color = \"red\");","a7666afc":"def one_hot_encoder(final_set):\n    df  = final_set.copy(deep= True)\n    dummies = pd.get_dummies(df,prefix=\"column_\",drop_first=True)\n    return dummies","e03f7ab2":"final_set = final_set.drop(columns = [\"Name\"])\nohe_set = one_hot_encoder(final_set)","3e986d72":"train_data = pd.DataFrame(ohe_set[:891])\ntest_data = pd.DataFrame(ohe_set[891:])\nX = train_data\ny = train_df[\"Survived\"]","f5a3f46f":"train_data.tail()","7636cc59":"test_data.head()","07506578":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.1, random_state = 42)","d4cec9f3":"import xgboost\n\nxgb_classifier = xgboost.XGBRFClassifier(n_estimators=30,\n                                        learning_rate=1,\n                                        reg_lambda=0.15,\n                                        gamma=0.06,\n                                        max_depth=20)\nxgb_classifier.fit(X_train, y_train)\ny_test_pred = xgb_classifier.predict(X_test).tolist()\naccuracy_score(y_test_pred,y_test)","7ad46c49":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\n# actual values\nactual = y_test\n# predicted values\npredicted = y_test_pred\n\n# confusion matrix\nmatrix = confusion_matrix(actual,predicted, labels=[1,0])\nprint('Confusion matrix : \\n',matrix)\n\n# outcome values order in sklearn\ntp, fn, fp, tn = confusion_matrix(actual,predicted,labels=[1,0]).reshape(-1)\nprint('Outcome values : \\n', tp, fn, fp, tn)\n\n# classification report for precision, recall f1-score and accuracy\nmatrix = classification_report(actual,predicted,labels=[1,0])\nprint('Classification report : \\n',matrix)","aa8ea56c":"y_pred = xgb_classifier.predict(test_data).tolist()","df0fec01":"predictions = pd.DataFrame(y_pred)\ndatasets = pd.concat([test_set[\"PassengerId\"],predictions],axis=1)\ndatasets.columns = [\"PassengerId\",\"Survived\"]\ndatasets.to_csv(\"gender_submission.csv\",index=False)","bc2a32a4":"**We just treated categorical variable and filled NaN values with mode of the feature.**<br> **Let's see how does modifcation looks like.**","cc777773":"**Time to treat Age as well, in this time we can fill the Nan with avg age of the dataset.**","d303b7fe":"**Nan Check**","5aecdcfd":"**Features with sliced white on the board are having nan values, if they are categorical\/continuous we have to treat them accordingly before filling.**","05d1f404":"**Let's check if Test data also has some Nan values.**"}}