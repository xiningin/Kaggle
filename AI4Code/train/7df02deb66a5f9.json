{"cell_type":{"d03563f3":"code","0b6607bb":"code","d5c65161":"code","701fe7fb":"code","c46e116f":"code","559b2c76":"code","3ea568cd":"code","b2a15d3e":"code","6be0f1bc":"code","fd66ce83":"code","f4022282":"code","a1a7b559":"code","6605ccc3":"code","76ddc89e":"code","c0f91083":"code","bf4561c9":"code","01387a3b":"markdown","43997aaf":"markdown","f45654eb":"markdown","32d7bd85":"markdown","25563683":"markdown"},"source":{"d03563f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b6607bb":"import pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.tree import DecisionTreeRegressor ","d5c65161":"df = pd.read_csv('\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv', parse_dates=['date'])","701fe7fb":"def weird_division(n, d):\n    return n \/ d if d else 0\n\ndf['CPM'] = df.apply(lambda x: weird_division(((x['total_revenue']*100)),x['measurable_impressions'])*1000 , axis=1)\ndf.nunique()","c46e116f":"df.drop(['integration_type_id' , 'revenue_share_percent', 'total_revenue'], axis = 1, inplace=True)","559b2c76":"df = df[df['CPM'] >= 0]","3ea568cd":"split_date = '2019-06-22'\n\ndf_train = df[df['date'] < split_date]\ndf_test = df[df['date'] >= split_date]\n","b2a15d3e":"train_cpm_cut = df_train['CPM'].quantile(0.95)\ntest_cpm_cut = df_test['CPM'].quantile(0.95)\ndf_train = df_train[df_train['CPM'] < train_cpm_cut]\ndf_test = df_test[df_test['CPM'] < test_cpm_cut]\ndf_train['CPM'].describe()","6be0f1bc":"y_train, X_train  = df_train['CPM'], df_train.drop(columns = ['CPM']) \ny_test, X_test  = df_test['CPM'], df_test.drop(columns = ['CPM'])","fd66ce83":"df_train.nunique()","f4022282":"cat_col = [\n'site_id'\n#,'ad_type_id'\n#,'geo_id'\n,'device_category_id'\n#,'advertiser_id'\n,'os_id'\n#,'monetization_channel_id'\n,    'order_id' \n#, 'line_item_type_id'\n,'ad_unit_id'\n]\n\nnum_col = [\n#'total_impressions'\n#'viewable_impressions'\n'measurable_impressions'\n]","a1a7b559":"num_transform = preprocessing.StandardScaler()\n\nscaled_num_df_train = num_transform.fit_transform(X_train[num_col])\nscaled_num_df_test = num_transform.transform(X_test[num_col])\n\ncat_transform = preprocessing.OneHotEncoder(handle_unknown='ignore')\n\nscaled_cat_df_train = cat_transform.fit_transform(X_train[cat_col]).toarray()\nscaled_cat_df_test = cat_transform.transform(X_test[cat_col]).toarray()","6605ccc3":"X_train = np.concatenate([scaled_num_df_train, scaled_cat_df_train], axis = 1)\nX_test =  np.concatenate([scaled_num_df_test, scaled_cat_df_test], axis = 1)\ny_train = y_train.to_numpy()\ny_test = y_test.to_numpy()","76ddc89e":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","c0f91083":"regressor = DecisionTreeRegressor(random_state = 0) \nbatch_size = int(X_train.shape[0])\nidx = np.random.randint(0, high=X_train.shape[0], size=batch_size, dtype='l')  \nregressor.fit(X_train[idx,:], y_train[idx])","bf4561c9":"y_pred = regressor.predict(X_test)\nprint(\"MSE=\",mean_squared_error(y_pred,y_test ))","01387a3b":"\u0441\u043f\u043b\u0438\u0442 \u043f\u043e \u0434\u0430\u0442\u0435","43997aaf":"\u043d\u0443 \u0438 \u0441\u043a\u043e\u0440\u043c\u0438\u043c \u0432\u0441\u0435 dec tree","f45654eb":"\u0443\u0434\u0430\u043b\u0438\u043c \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 df","32d7bd85":"\u0417\u0430\u043a\u043e\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441\u043d\u0438\u0437\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0438\u0437\u0438\u0440\u0443\u044e\u0442 \u0440\u0443\u0447\u043d\u043e\u0439 \u043f\u043e\u0434\u0431\u043e\u0440, \u0447\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u043a\u043e\u0440 \u0447\u0443\u0442\u044c \u043d\u0438\u0436\u0435","25563683":"\u0443\u0434\u0430\u043b\u0438\u043c \u0442\u043e\u043f 5% \u0438\u0437 \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442"}}