{"cell_type":{"a1a5b0f7":"code","33f901db":"code","1f4bab3c":"code","8f42b102":"code","7fcb4a41":"code","fb3c8e03":"code","1bd6b8cc":"code","b73ace34":"code","2e5729ef":"code","e038a504":"code","5ab63350":"code","da3b542d":"code","00ea9d13":"code","258dc238":"code","1a286694":"code","4147144c":"code","16d17ef9":"code","ff169ead":"markdown"},"source":{"a1a5b0f7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport tensorflow as tf\n\n\n# Any results you write to the current directory are saved as output.","33f901db":"train_df=pd.read_csv(\"..\/input\/Kannada-MNIST\/train.csv\")\ntest_df=pd.read_csv(\"..\/input\/Kannada-MNIST\/test.csv\")\n\nx_train=train_df.drop([\"label\"], axis=1).values.astype('float32')\ny_train=train_df[\"label\"].values.astype(\"int32\")\n\nx_test=test_df.drop([\"id\"],axis=1).values.astype('float32')\n","1f4bab3c":"test_df.columns","8f42b102":"x_train=x_train.reshape(x_train.shape[0], 28, 28)\/255.0\nx_test=x_test.reshape(x_test.shape[0], 28, 28)\/255.0","7fcb4a41":"from sklearn.model_selection import train_test_split\nx_train,x_val,y_train,y_val=train_test_split(x_train, y_train, test_size=0.2)","fb3c8e03":"print(x_train.shape)\nprint(y_train.shape)\nprint(x_val.shape)\nprint(y_val.shape)\nprint(x_test.shape)","1bd6b8cc":"x_train=x_train.reshape(x_train.shape[0], 28,28,1)\nx_test=x_test.reshape(x_test.shape[0],28,28,1)\nx_val=x_val.reshape(x_val.shape[0],28,28,1)","b73ace34":"from keras.layers import Conv2D, MaxPooling2D, Input, Dense, Activation, ReLU, Flatten, Dropout, BatchNormalization\nfrom keras.models import Model\n\nX=Input(shape=[28,28,1])\nx=Conv2D(16, (3,3), strides=1, padding=\"same\", name=\"conv1\")(X)\nx=BatchNormalization(momentum=0.1, epsilon=1e-5, gamma_initializer=\"uniform\", name=\"batch1\")(x)\nx=Activation('relu',name='relu1')(x)\nx=Dropout(0.1)(x)\n\nx=Conv2D(32, (3,3), strides=1, padding=\"same\", name=\"conv2\")(x)\nx=BatchNormalization(momentum=0.15, epsilon=1e-5, gamma_initializer=\"uniform\", name=\"batch2\")(x)\nx=Activation('relu',name='relu2')(x)\nx=Dropout(0.15)(x)\nx=MaxPooling2D(pool_size=2, strides=2, padding=\"same\", name=\"max2\")(x)\n\nx=Conv2D(64, (5,5), strides=1, padding =\"same\", name=\"conv3\")(x)\nx=BatchNormalization(momentum=0.17, epsilon=1e-5, gamma_initializer=\"uniform\", name=\"batch3\")(x)\nx=Activation('relu', name=\"relu3\")(x)\nx=MaxPooling2D(pool_size=2, strides=2, padding=\"same\", name=\"max3\")(x)\n\nx=Conv2D(128, (5,5), strides=1, padding=\"same\", name=\"conv4\")(x)\nx=BatchNormalization(momentum=0.15, epsilon=1e-5, gamma_initializer=\"uniform\", name=\"batch4\")(x)\nx=Activation('relu', name=\"relu4\")(x)\nx=Dropout(0.17)(x)\n\nx=Conv2D(64, (3,3), strides=1, padding=\"same\", name=\"conv5\")(x)\nx=BatchNormalization(momentum=0.15, epsilon=1e-5, gamma_initializer=\"uniform\", name=\"batch5\")(x)\nx=Activation('relu', name='relu5')(x)\n#x=MaxPooling2D(pool_size=2, strides=2, padding=\"same\", name=\"max5\")(x)\nx=Dropout(0.2)(x)\n\nx=Conv2D(32, (3,3), strides=1, padding=\"same\", name=\"conv6\")(x)\nx=BatchNormalization(momentum=0.15, epsilon=1e-5, gamma_initializer=\"uniform\", name=\"batch6\" )(x)\nx=Activation('relu', name=\"relu6\")(x)\nx=Dropout(0.05)(x)\n#x=MaxPooling2D(pool_size=2, strides=2, padding=\"same\", name=\"max6\")(x)\n\nx=Flatten()(x)\nx=Dense(50, name=\"Dense1\")(x)\nx=Activation('relu', name='relu7')(x)\nx=Dropout(0.05)(x)\nx=Dense(25, name=\"Dense2\")(x)\nx=Activation('relu', name='relu8')(x)\nx=Dropout(0.03)(x)\nx=Dense(10, name=\"Dense3\")(x)\nx=Activation('softmax')(x)\n\nmodel=Model(inputs=X, outputs=x)\n","2e5729ef":"print(model.summary())","e038a504":"from keras.preprocessing. image import ImageDataGenerator\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.optimizers import Adam\n\ncheckpoint=ModelCheckpoint('bestweights.hdf5', monitor='val_acc', verbose=1, save_best_only=True, mode=\"max\")\n\nepochs=80\nlr=0.002\noptimizer=Adam(lr=lr, decay=lr\/(epochs*1.5))\n\nmodel.compile(optimizer=optimizer, loss=\"sparse_categorical_crossentropy\",metrics=[\"accuracy\"])\n\ndatagenerator=ImageDataGenerator( rotation_range=9, zoom_range=0.25, width_shift_range=0.25, height_shift_range=0.25)\n\ndatagenerator.fit(x_train)\nbatch_size=64\nhistory=model.fit_generator(datagenerator.flow(x_train, y_train, batch_size=batch_size), epochs=epochs, validation_data=(x_val, y_val), verbose=2,steps_per_epoch=x_train.shape[0]\/\/batch_size, callbacks=[checkpoint])\nmodel.load_weights(\"bestweights.hdf5\")","5ab63350":"results=model.predict(x_test)","da3b542d":"results=np.argmax(results, axis=1)","00ea9d13":"results","258dc238":"dg=pd.DataFrame()\ndg['id']=list(test_df.values[0:,0])","1a286694":"dg['label']=results","4147144c":"dg","16d17ef9":"dg.to_csv(\"submission.csv\", index=False)","ff169ead":"This notebook was inspired by (https:\/\/www.kaggle.com\/shaygu\/kannada-mnist-simple-cnn). "}}