{"cell_type":{"3733f05e":"code","7fbb9ed6":"code","b98ed085":"code","3c3fa9e0":"code","0def0876":"code","abb2159f":"code","e189cb16":"code","b83a031d":"code","2c2de22c":"code","1e1cd0bc":"code","4fd85dbd":"code","2b4fe8d2":"code","d4f8df9b":"code","d3bc4a2d":"code","55a6268b":"code","14f70083":"code","0013562f":"code","94220a6b":"code","52eb14e8":"code","c7518e39":"code","982152f6":"code","6a510dd4":"code","67b84f5c":"code","09de758a":"code","55f6e7a5":"code","5c53de36":"code","0864bf98":"code","e0c3d46c":"code","7b202485":"code","7b5626ed":"markdown","1fe2b7c2":"markdown","230f03bd":"markdown","b958884a":"markdown","059520dc":"markdown","06bb97ed":"markdown","0e144bc8":"markdown","c0feb37e":"markdown","45704128":"markdown","011e57ea":"markdown","8a33f871":"markdown","0d756456":"markdown","99d95f43":"markdown","ce4901ed":"markdown"},"source":{"3733f05e":"import numpy as np           # linear algebra\nimport pandas as pd          # data processing\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly.express as px\nfrom pathlib import Path\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report, r2_score\n\nimport keras\nfrom keras.preprocessing import image\nfrom keras.layers import Dense, Conv2D , MaxPool2D , Flatten , Dropout \nfrom keras.preprocessing.image import ImageDataGenerator\n\nimport tensorflow as tf","7fbb9ed6":"#Get Positive & Negative Directories\npositive_dir = Path('..\/input\/surface-crack-detection\/Positive')\nnegative_dir = Path('..\/input\/surface-crack-detection\/Negative')","b98ed085":"#as directory is path object , we can use glob function to find\n#certain patterns in the data like images having jpg extension\npositive_dir.glob(r'*.jpg')","3c3fa9e0":"#Crack Image Count\ncrack_images = len(list(positive_dir.glob(r'*.jpg')))\nprint(\"Number of Crack Images: \",crack_images)\n","0def0876":"#No Crack Image Count\nno_crack_images =len(list(negative_dir.glob(r'*.jpg')))\nprint(\"Number of No Crack Images: \",no_crack_images)","abb2159f":"train=ImageDataGenerator(rescale=1\/255,validation_split=0.05)          #total or test images=40000,train images=38000,val images=2000","e189cb16":"##Training & Validation Dataset Creation*\"\"\"\nimg_height,img_width=128,128\nbatch_size=32\n","b83a031d":"# Training Dataset\n\ntrain_dataset=train.flow_from_directory('..\/input\/surface-crack-detection',#use your directory location\n                                       target_size=(150,150),\n                                       batch_size=32,\n                                       color_mode='rgb',\n                                       class_mode='binary',\n                                       shuffle=True,\n                                       seed=42,\n                                       subset='training',           \n                                       )","2c2de22c":"#Validation Dataset\n\nval_dataset=train.flow_from_directory('..\/input\/surface-crack-detection',#use your directory location\n                                      target_size=(150,150),\n                                       batch_size=32,\n                                       color_mode='rgb',\n                                       class_mode='binary',\n                                       shuffle=True,\n                                       seed=42,\n                                       subset='validation',           \n                                       )","1e1cd0bc":"#Testing Dataset\n\ntest_dataset=train.flow_from_directory('..\/input\/surface-crack-detection',#use your directory location\n                                      target_size=(150,150),\n                                       batch_size=32,\n                                       color_mode='rgb',\n                                       class_mode='binary',\n                                       shuffle=True,\n                                       seed=42,           \n                                       )","4fd85dbd":"##Classes & Sample Visualization\n\n#Classes Identification\nclass_names = train_dataset.class_indices\nclass_names","2b4fe8d2":"#Now making the CNN Model\n#Feature extraction(2 Conv layers, 2 MaxPooling layers)\n\ninputs = tf.keras.Input(shape=(img_height,img_width, 3))\n\n#Adding the first layer to the CNN\nx = tf.keras.layers.Conv2D(filters=16, kernel_size=(3, 3), activation='relu')(inputs)\nx = tf.keras.layers.MaxPool2D(pool_size=(2, 2))(x)\n\n#Adding the second layer tho the CNN\nx = tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu')(x)\nx = tf.keras.layers.MaxPool2D(pool_size=(2, 2))(x)\n\n#The final layer\nx = tf.keras.layers.GlobalAveragePooling2D()(x)\noutputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n","d4f8df9b":"#Model Create\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)","d3bc4a2d":"#Compiling the model\nmodel.compile(optimizer='adam',\n             loss='binary_crossentropy',\n             metrics=['accuracy'])\n","55a6268b":"# print model summary\nmodel.summary()\n","14f70083":"#Training the model to check it's accuracy\nhistory = model.fit(train_dataset, validation_data=val_dataset, epochs=10, \n                   callbacks=[tf.keras.callbacks.EarlyStopping(monitor='val_loss',\n                                                              patience=3,\n                                                              restore_best_weights=True)\n                             ])","0013562f":"fig = px.line(\n    history.history,\n    y=['accuracy', 'val_accuracy'],\n    labels={'index': \"Epoch\", 'value': \"Accuracy\"},\n    title=\"Training and Validation Accuracy Over Time\")\nfig.show()","94220a6b":"fig = px.line(\n    history.history,\n    y=['loss', 'val_loss'],\n    labels={'index': \"Epoch\", 'value': \"Loss\"},\n    title=\"Training and Validation Loss Over Time\"\n)\n\nfig.show()","52eb14e8":"def evaluate_model(model, test_dataset):\n    \n    results = model.evaluate(test_dataset, verbose=0)\n    loss = results[0]\n    acc = results[1]\n    \n    print(\"    Test Loss: {:.5f}\".format(loss))\n    print(\"Test Accuracy: {:.2f}%\".format(acc * 100))","c7518e39":"evaluate_model(model, test_dataset)","982152f6":"# predicted y values\ny_pred = np.squeeze((model.predict(test_dataset) >= 0.5).astype(np.int))\ncm = confusion_matrix(test_dataset.labels, y_pred)\nclr = classification_report(test_dataset.labels, y_pred, target_names=[\"NEGATIVE\", \"POSITIVE\"])\n    \nplt.figure(figsize=(6, 6))\nsns.heatmap(cm, annot=True, fmt='g', vmin=0, cmap='viridis', cbar='Blues')\nplt.xticks(ticks=np.arange(2) + 0.5, labels=[\"NEGATIVE\", \"POSITIVE\"])\nplt.yticks(ticks=np.arange(2) + 0.5, labels=[\"NEGATIVE\", \"POSITIVE\"])\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.title(\"Confusion Matrix\")\nplt.show()","6a510dd4":"#Classification Report\nprint(\"Classification Report:\\n----------------------\\n\", clr)","67b84f5c":"\n# We have trained our prediction model with almost 98% accuracy on the validiation dataset\n\n#Let us test our model on some randomly selected images","09de758a":"def display_prediction_stats(probability_of_crack):\n  print(\"Probability that the sample has a Crack =\", probability_of_crack)\n  if probability_of_crack >= 0.5:\n    print(\"Crack Detected !\")\n  else:\n    print(\"No Crack Detected !\")","55f6e7a5":"img=image.load_img('..\/input\/data-cheak\/images 3.jpg',target_size=(128,128))","5c53de36":"plt.imshow(img)","0864bf98":"img1=image.img_to_array(img)\nimg1=img1\/255","e0c3d46c":"img1=np.expand_dims(img1,[0])\nprint(img1.shape)","7b202485":"#prediction 1\nprediction = model.predict(img1)\n\nprint(prediction[0][0])\ndisplay_prediction_stats(prediction[0][0])","7b5626ed":"**Summarize History for Accuracy**","1fe2b7c2":"# **Classification Report**","230f03bd":"# **Load Dataset**","b958884a":"\n# **Import required libraries and packages**","059520dc":"**Summarize History for Loss**","06bb97ed":"# **CNN Model**","0e144bc8":"# **Check For Your Own Image**","c0feb37e":"# **Loading Image Data**","45704128":"Test accuracy is 97.91% and Test loss is 0.05720","011e57ea":"\n# **Visualization Plotting in Graphs**","8a33f871":"\nWe got 11749 correct predictions out of 12000 records in test set.","0d756456":"# **Final Results**","99d95f43":"# **Model Training**","ce4901ed":"\n# **Checking Images Data**"}}