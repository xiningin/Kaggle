{"cell_type":{"734d1b5a":"code","028fe32c":"code","58912ee7":"code","b6e0c620":"code","b1a5ad06":"code","bef30620":"code","2b4ad72c":"code","f86afb66":"code","b076f204":"code","816f0d54":"code","259ebe1d":"code","7078bb78":"code","6540ba99":"code","15156cfb":"code","3272a5aa":"code","f7d0ecd5":"code","c99feea1":"code","0d93bbaa":"code","88b79424":"code","a2849638":"code","56705f73":"code","057baa89":"code","eaa34f55":"code","3659e18c":"code","aad3049a":"code","e5a5de88":"code","41983ce5":"code","71fa16b0":"code","5550a642":"code","54b2c9f4":"code","00887c2e":"code","68eb232c":"code","a8829bdd":"code","bb8464a0":"code","4ce11bcb":"code","e6928946":"code","5d115367":"markdown","a26a9b46":"markdown","38470ec8":"markdown","a4d163ff":"markdown","d8c28f2d":"markdown","a0f3b71d":"markdown","e08a480a":"markdown","7744607d":"markdown","5dbbb7e6":"markdown","c69e22c0":"markdown","1872290c":"markdown","754c52f6":"markdown","904ebbb4":"markdown","01dbe7cb":"markdown","5c2da9b0":"markdown","279e8704":"markdown","a90cb12d":"markdown"},"source":{"734d1b5a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns    \n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")   #we ignore warnings in here, we can see errors\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","028fe32c":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","58912ee7":"#here we see which main columns we have\ntrain_df.columns","b6e0c620":"#here we see types of our main columns, 4 int64, 2 float64, 5 object(string)\ntrain_df.info()","b1a5ad06":"#here we see our first 5 datas\ntrain_df.head()","bef30620":"#here we see our test_df datas' statistical table\ntrain_df.describe()","2b4ad72c":"#this is how it looks when we see values with value_counts and for using it in bar plot, first column be index, second column be index.values\ncategory1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\n\nfor c in category1:\n    variable = train_df[c]\n    varValue = variable.value_counts()\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(c)\n    plt.show()\n    print(\"{}: \\n{}\".format(c, varValue))    ","f86afb66":"#we can do this with histogram too but we cant do it for float values, this is how it looks, thats why bar graph better\ncategory1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\n\nfor c in category1:\n    variable = train_df[c]\n    plt.figure(figsize = (9,3))\n    plt.hist(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(c)\n    plt.show()","b076f204":"#we can also do it with function so it be easier\n\ndef bar_plot(variable):\n    \n    \"\"\"\n    #input : variable example : \"Sex\"\n    #output : bar plot & value_count\n    \"\"\"\n    \n    #get variable\n    \n    var = train_df[variable]\n    \n    #count number of categorical variable(value\/sample)\n    \n    varValue = var.value_counts()\n    \n    #visualize\n    \n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable, varValue))\n    ","816f0d54":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\n\nfor c in category1:\n    bar_plot(c)","259ebe1d":"#we see how many datas there are in dataframe, we dont need to show these in graphic\ncategory2 = [\"Cabin\", \"Name\", \"Ticket\", \"PassengerId\"]\n\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","7078bb78":"def hist_plot(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()\n    ","6540ba99":"numericVar = [\"Fare\", \"Age\"]\n\nfor n in numericVar:\n    hist_plot(n)","15156cfb":"#Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]]","3272a5aa":"#Pclass vs Survived       as_index = False means lets see indexes too\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean()","f7d0ecd5":"#Pclass vs Survived        #we will sort result as Survived by decreasing\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","c99feea1":"#Sex vs Survived      \ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","0d93bbaa":"#SibSp vs Survived      \ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","88b79424":"#Parch vs Survived      \ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","a2849638":"def detect_outliers(df, features):\n    \n    outlier_indices = []\n    \n    for c in features:\n    \n        #in here we will find 1st Quartile, %25\n        Q1 = np.percentile(df[c], 25)\n    \n        #in here we will find 3rd Quartile, %75\n        Q3 = np.percentile(df[c], 75)\n    \n        #in here we will find IQR value\n        IQR = Q3 - Q1\n    \n        #in here we will find 1.5*IQR for using it in next step\n        outlier_step = IQR * 1.5\n\n        #in here we will find quartile value indices\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n\n        #in here we will store indices in our list\n        outlier_indices.extend(outlier_list_col)    #in here we have a list\n        \n        \n    outlier_indices = Counter(outlier_list_col)     #in here we have a dictionary, we can see example below\n    \n    #in here we will make a list of if our datas have more than 2 outliers\n    multiple_outliers = list(i for i, v in outlier_indices.items())    #in here we made a list \n    \n    return multiple_outliers\n    \n\n    \n    \n    ","56705f73":"#in here we see if we have an outlier for datas\ntrain_df.loc[detect_outliers(train_df,[\"Age\", \"SibSp\", \"Parch\", \"Fare\"])]","057baa89":"#in here we will drop outliers and when we run it outliers have dropped and our data is now 750 rows\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\", \"SibSp\", \"Parch\", \"Fare\"]), axis = 0).reset_index(drop = True)\ntrain_df","eaa34f55":"#example of filtering data\noutlier_list_col = train_df[(train_df[\"Age\"] < 10) | (train_df[\"Age\"] > 200)]\noutlier_list_col","3659e18c":"#example of filtering data's index how its seen\noutlier_list_col2 = train_df[(train_df[\"Age\"] < 10) | (train_df[\"Age\"] > 200)].index\noutlier_list_col2","aad3049a":"#example of extending an empty list with another list\noutlier_indices = []\noutlier_indices.extend(outlier_list_col2)\noutlier_indices","e5a5de88":"#example of making dictionry of outlier indices with counter and see how many of them we have\noutlier_indices = Counter(outlier_indices)\noutlier_indices","41983ce5":"#example and in here we see that we have to find the same value of v more than 2 times to accept it as outliers\nmultiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\nmultiple_outliers","71fa16b0":"#in here we will combine train and test datas because for machine learning we will need to check both datas' missing values\ntrain_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df], axis = 0).reset_index(drop = True)\ntrain_df.head()","5550a642":"train_df.columns","54b2c9f4":"#we are looking for columns if any of them has missing value with isnull function\ntrain_df.columns[train_df.isnull().any()]","00887c2e":"#in here we are finding total missing values in datas\ntrain_df.isnull().sum()","68eb232c":"#when we run the values we see that this man embarked from S and we will look for who embarked from S with how much fare\ntrain_df[train_df[\"Fare\"].isnull()]","a8829bdd":"#while we boxplot who embarked from S place gives like 10-20\ntrain_df.boxplot(column = \"Fare\", by = \"Embarked\")\nplt.show()\n","bb8464a0":"#now lets look for how much they give from S as mean value\ntrain_df[train_df[\"Embarked\"] == \"S\"][\"Fare\"].mean()","4ce11bcb":"#now we will fill NaN values with mean value\ntrain_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Embarked\"] == \"S\"][\"Fare\"]))","e6928946":"#now lets check if we have any NaN value and as we see its all filled\ntrain_df[train_df[\"Fare\"].isnull()]","5d115367":"<a id=\"6\"><\/a><br>\n## Basic Data Analysis\nin here we will analysis if there is a connection between 2 datas\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived\n","a26a9b46":"<a id = \"7\"><\/a><br>\n## Outlier Detection","38470ec8":"* Fare has only 2 missing values","a4d163ff":"<a id = \"4\"><\/a><br>\n###  Categorical Variables\n","d8c28f2d":"as we can see, if the class is higher, possiblity of surviving is higher","a0f3b71d":"<a id = \"5\"><\/a><br>\n###  Numerical Variables","e08a480a":"# Introduction\nThe sinking of Titanic ship is one of most notorious shipwrecks in history. In 1912, during its voyage, the titanic sank after colliding with an iceberg. 1592 of 2214 people died including crew of the ship. \n\n<font color = \" Blue\">\nContent:\n    \n\n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n3. [Univariate Variable Analysis](#3)\n    * [Categorical Variables](#4)\n    * [Numerical Variable](#5) \n4. [Basic Data Analysis](#6)\n5. [Outlier Detection](#7)\n6. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)  \n    \n    ","7744607d":"* float64(2) : Fare and Age\n* int64(5) : Pclass, Sibsp, Parch, PassengerId and Survived\n* object(5) : Cabin, Embarked, Ticket, Name and Sex","5dbbb7e6":"<a id = \"9\"><\/a><br>\n### Find Missing Value","c69e22c0":"<a id = \"8\"><\/a><br>\n## Missing Value\n    * Find Missing Value\n    * Fill Missing Value","1872290c":"as we can see, people who has siblings as numbers as 1-2 have higher possibility to survive","754c52f6":"as we can see, if someone has parents or children as number as 1-2-3 have higher possibility to surive","904ebbb4":"<a id = \"3\"><\/a><br>\n## Univariate Variable Analysis\n    * Categorical Variables : Survived, PassengerId, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch        #these are datas divdes passengers to categories\n    * Numerical Variable : Fare and age                                                                                 #these are datas we can use with aritmethical calculations","01dbe7cb":"<a id = \"10\"><\/a><br>\n### Fill Missing Value","5c2da9b0":"as we can see, females' surviving possibility is much higher than males'","279e8704":"<a id = \"2\"><\/a><br>\n## Variable Description\n1. PassengerId : unique id number to each passenger\n1. Survived : passenger survived(1) or died(0)\n1. Pclass : passenger class(1,2,3)\n1. Name : name\n1. Sex : gender of passenger\n1. Age : age of passanger\n1. SibSp : number of siblings\/spouses in ship\n1. Parch : number of parents\/children in ship\n1. Ticket : ticket number\n1. Fare : amount of money spent for ticket\n1. Cabin : cabin category where passanger stayed\n1. Embarked : port where passanger embarked(C = Chenbourg, Q = Queenstown, S = Southampton)\n   \n      ","a90cb12d":"<a id = \"1\"><\/a><br>\n## Load and Check Data\n"}}