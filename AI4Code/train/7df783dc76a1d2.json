{"cell_type":{"e2762bc8":"code","aa769778":"code","6e196427":"code","f7b11392":"code","8286b46b":"code","c9389131":"code","b01c942c":"code","16c2fbc9":"code","f4040238":"code","04ea9306":"code","4e56704c":"code","28f00012":"code","945cc928":"code","abaf5de8":"code","99ea273f":"code","c348193c":"code","f444e3d0":"code","f1c2cfca":"code","158bf919":"code","0577a451":"code","44323997":"code","031901a0":"code","a086f6da":"code","1aa82d30":"code","7049b0d9":"code","7897307c":"code","e7e7b870":"code","feec8391":"code","408b7d97":"code","2aebc3e9":"code","7d7700c2":"code","669362c3":"code","b94f79f7":"code","234a842c":"code","c9968543":"markdown","253f40b0":"markdown","712932c8":"markdown","560bea09":"markdown","59e1c509":"markdown","a5086362":"markdown","c059ed0d":"markdown","f471a39e":"markdown","f3db0c66":"markdown","51f150f0":"markdown","4d9b5a4c":"markdown","809f52aa":"markdown","47e79b78":"markdown"},"source":{"e2762bc8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aa769778":"# Library Import\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nimport pandas_profiling as ProfileReport\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport cufflinks as cf\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected = True)\ncf.go_offline();\n\n# Base Model\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.preprocessing import label_binarize\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import SGDClassifier\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import auc\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import roc_curve\nfrom lightgbm import LGBMClassifier","6e196427":"train = pd.read_csv('..\/input\/mobile-price-classification\/train.csv')\ntest = pd.read_csv('..\/input\/mobile-price-classification\/test.csv')\n\nprint('Train Shape:', train.shape)\nprint('*'*25)\nprint('Test Shape:', test.shape)\n\ndf = train.copy()","f7b11392":"df.head()","8286b46b":"df.shape","c9389131":"df.info()","b01c942c":"import missingno as msno\nmsno.bar(df)\nplt.show()","16c2fbc9":"# df.profile_report()","f4040238":"desc = df.describe().T\ndf1 = pd.DataFrame(index=['battery_power', 'blue', 'clock_speed', 'dual_sim',\n                          'fc', 'four_g', 'int_memory', 'm_dep', 'mobile_wt', \n                          'n_cores', 'pc', 'px_height', 'px_width', 'ram', \n                          'sc_h', 'sc_w', 'talk_time', 'three_g','touch_screen',\n                          'wifi', 'price_range'], \n                   columns= [\"count\",\"mean\",\"std\",\"min\",\n                             \"25%\",\"50%\",\"75%\",\"max\"], data= desc )\n\nf,ax = plt.subplots(figsize=(12,12))\n\nsns.heatmap(df1, annot=True,cmap = \"Blues\", fmt= '.0f',\n            ax=ax,linewidths = 5, cbar = False,\n            annot_kws={\"size\": 16})\n\nplt.xticks(size = 18)\nplt.yticks(size = 12, rotation = 0)\nplt.ylabel(\"Variables\")\nplt.title(\"Descriptive Statistics\", size = 16)\nplt.show()","04ea9306":"# Correlations\n\ncorr=df.corr()\nfig = plt.figure(figsize=(15,12))\nr = sns.heatmap(corr, cmap='Purples')\nr.set_title('Correlations')","4e56704c":"# price range correlations\n\ncorr.sort_values(by=['price_range'],ascending=False).iloc[0].sort_values(ascending=False)","28f00012":"#Ram vs Price Range\nsns.pointplot(y='ram',x='price_range',data=df);","945cc928":"#Battery Power vs Price Range\nsns.pointplot(y='battery_power',x='price_range',data=df);","abaf5de8":"sns.boxplot(x='price_range', y='battery_power',data=df)","99ea273f":"#Int Memory vs Price Range\nsns.pointplot(y='int_memory',x='price_range',data=df);","c348193c":"X = df.drop('price_range',axis=1)\ny = df['price_range']","f444e3d0":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.33,random_state=42)","f1c2cfca":"lrm = LinearRegression()\nlrm.fit(X_train,y_train)\nlrm.score(X_test,y_test)","158bf919":"knnm = KNeighborsClassifier(n_neighbors=10)\nknnm.fit(X_train,y_train)\nknnm.score(X_test,y_test)\ny_knn_pred = knnm.predict(X_test)\nprint(classification_report(y_test,y_knn_pred))","0577a451":"dtc = DecisionTreeClassifier()\ndtc.fit(X_train,y_train)\ndtc.score(X_test,y_test)","44323997":"rf = RandomForestClassifier()\nrf.fit(X_train,y_train)\nrf.score(X_test,y_test)","031901a0":"lgbmc = LGBMClassifier(random_state = 42)\nlgbmc.fit(X_train,y_train)\nlgbmc.score(X_test,y_test)","a086f6da":"svmcm = SVC(C=0.1, kernel='rbf')\nsvmcm.fit(X_train,y_train)\nsvmcm.score(X_test,y_test)\ny_svmcm_pred = svmcm.predict(X_test)\nprint(classification_report(y_test,y_svmcm_pred))","1aa82d30":"plt.scatter(y_test,y_svmcm_pred)","7049b0d9":"val=confusion_matrix(y_test,y_svmcm_pred)\nprint(val)","7897307c":"plt.figure(figsize = (10,7))\nsns.heatmap(val,annot=True)","e7e7b870":"df_test = pd.read_csv('..\/input\/mobile-price-classification\/test.csv')\ndf_test.head()","feec8391":"df_test.drop('id',axis=1,inplace=True)\ndf_test.head()","408b7d97":"pred_svmcm = svmcm.predict(df_test)\npred_svmcm","2aebc3e9":"df_test['price_range'] = pred_svmcm","7d7700c2":"df_test","669362c3":"X = df_test.drop('price_range',axis=1)\ny = df_test['price_range']\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.33,random_state=42)\n\nsvmcm_t = SVC(C=0.1)\nsvmcm_t.fit(X_train,y_train)\nsvmcm_t.score(X_test,y_test)","b94f79f7":"y_svmcm_t_pred = svmcm_t.predict(X_test)\nprint(classification_report(y_test,y_svmcm_t_pred))\nplt.plot(y_test,y_svmcm_t_pred)\nplt.scatter(y_test,y_svmcm_t_pred)","234a842c":"df_test['price_range'].to_csv('submission.csv')","c9968543":"## 2) KNN","253f40b0":"## Data Load","712932c8":"## Missing Value Analysis","560bea09":"## 4) Decision Tree","59e1c509":"## Data Analysis","a5086362":"## Data Visualization","c059ed0d":"## 7) SVM Classifier","f471a39e":"## 5) Random Forest Classifier","f3db0c66":"**X and Y**","51f150f0":"## Classification of test.csv","4d9b5a4c":"## Splitting of Test and Train Data","809f52aa":"## 6) LGBM Classifier","47e79b78":"# Creating and Training Model\n\n## 1) Linear Regression"}}