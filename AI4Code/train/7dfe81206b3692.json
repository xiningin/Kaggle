{"cell_type":{"421777ca":"code","6b5d9d1a":"code","4577d28b":"code","3dc871bc":"code","be30c75e":"code","a944ddf9":"code","a5d2aed7":"code","9148b64a":"code","feaf5efc":"code","5cce443b":"code","7505d6ba":"code","8cb6bdb8":"code","aabe739a":"code","1a005328":"code","adeea08b":"markdown","c9d69f05":"markdown","f5613e16":"markdown","9740b7e6":"markdown","a4d54824":"markdown","d547194b":"markdown","212e305b":"markdown","028e9070":"markdown","b4002ab8":"markdown","5bfb7af5":"markdown","41f06f43":"markdown","7b1da510":"markdown","e83a3539":"markdown","66b46e16":"markdown","beef2fd5":"markdown"},"source":{"421777ca":"#import the various libraries we require for the analysis \nimport numpy as np\nimport pandas as pd\nfrom numpy import array\nimport matplotlib as mpl\n\n#import the tools we need to plot maps\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nfrom matplotlib import cm #cm is a tool that allows us to gain access to a predefined set of colours in matplotlib","6b5d9d1a":"cities = pd.read_csv(\"..\/input\/top-500-indian-cities\/cities_r2.csv\")\n#print the data for the first five cities in the data set\ncities.head()","4577d28b":"#prints an overview of each columns with the number of entries in each column and the data type\ncities.info()","3dc871bc":"#gives an even more detailed view into each column\ncities.describe()","be30c75e":"# Create a bar graph of the the number of cities taken for analysis per state \n\n\n# Create a bar graph of the the number of cities taken for analysis per state \n\nfig = plt.figure(figsize=(20,20))\n\n#count the number of states, sort in ascending order\nstates = cities.groupby('state_name')['name_of_city'].count().sort_values(ascending=True)\n\nstates.plot(kind='barh', fontsize=18)\nplt.grid(b=True, which='both', color='black', linestyle='-')\nplt.xlabel('No. of cities taken for analysis', fontsize=20)\n\n","a944ddf9":"#We split the data in location using the delimiter ',' and since the first index i.e., [0] is the latitude coordinate,\n#we store and we did the same for longitude\ncities['latitude']=cities['location'].apply(lambda x:x.split(',')[0])\ncities['longitude']=cities['location'].apply(lambda x:x.split(',')[1])","a5d2aed7":"#sort the cities according to population\ntop_pop_cities=cities.sort_values(by='population_total',ascending=False)\n\n#store the top 10 cities under a separate name\ntop10_pop_cities=top_pop_cities.head(10)\ntop10_pop_cities","9148b64a":"#setting up Basemap for our first map! \n\n\nfig = plt.figure(figsize=(20, 15))\n\n#                                                                         L (lowercase)\nthemap = Basemap(width=1200000, height=900000, projection='lcc', resolution='l', llcrnrlon=67, llcrnrlat=5, \n              urcrnrlon=99, urcrnrlat=37, lat_0=22, lon_0=78)\n\n#themap.bluemarble() \n\nthemap.drawmapboundary()\nthemap.drawcountries()\nthemap.drawcoastlines()\n\nlg = array(top10_pop_cities['longitude'])\nlt = array(top10_pop_cities['latitude'])\n\npt = array(top10_pop_cities['population_total'])\nnc = array(top10_pop_cities['name_of_city'])\n\n#Python's map function\nx,y = themap(lg, lt)\n\n#                                                            makes population 1:5000\npopulation_size = top10_pop_cities['population_total'].apply(lambda x:int(x\/5000))\n\nthemap.scatter(x, y, s=population_size, c=population_size, marker='o', cmap=cm.Dark2, alpha=0.7)\n\nfor ncs, xpt, ypt in zip(nc, x, y):\n    plt.text(xpt+60000, ypt+30000, ncs, fontsize=12, fontweight='bold')\nplt.title('Top 10 most populous cities in India', fontsize=18)","feaf5efc":"#since it is tedious to write the code for drawing a map every single time, let us go ahead and write a function that draws a map\n#we can then call this function every single time we require a map\n\ndef plot_map(sizes, colorbarValue):\n    plt.figure(figsize=(19, 20))\n    f, ax = plt.subplots(figsize=(19, 20))\n    \n    themap = Basemap(width=1200000, height=900000, projection='lcc', resolution='l', llcrnrlon=67, \n                     llcrnrlat=5, urcrnrlon=99, urcrnrlat=37, lat_0=22, lon_0=78, ax=ax)\n    \n    themap.drawmapboundary()\n    themap.drawcountries()\n    themap.drawcoastlines()\n    \n    x, y = themap(array(cities['longitude']), array(cities['latitude']))\n    \n    cs = themap.scatter(x, y, s=sizes, c=sizes, marker='o', cmap=cm.get_cmap('Dark2'), alpha=0.8)\n    \n    cbar = themap.colorbar(cs, location='right', pad=\"2%\")\n    cbar.ax.set_yticklabels(colorbarValue)\n","5cce443b":"population_sizes=cities[\"population_total\"].apply(lambda x:int(x\/5000))\n\n#setting the lowest and highest value on the colorbar\ncolorbarValue=np.linspace(cities['population_total'].min(),cities['population_total'].max())\n\n#converting the value on the legend from float to int\ncolorbarValue=colorbarValue.astype(int)\n\nplot_map(population_sizes,colorbarValue)","7505d6ba":"#specifying the size of the figure\nfig=plt.figure(figsize=(20,20))\n\n#grouping states according to the total number of total graduates in that state\nstates=cities.groupby('state_name')['total_graduates'].sum().sort_values(ascending=True)\n\n#specifying the type of graph\nstates.plot(kind=\"barh\", fontsize = 20)\n\n#b = to show the grid lines\nplt.grid(b=True, which='both', color='Black',linestyle='-')\n\n#label the x-axis\nplt.xlabel('Total graduates per state', fontsize = 20)","8cb6bdb8":"#ranking the cities according to the total graduates in the city\ntop_total_graduates_cities = cities.sort_values(by='total_graduates',ascending=False)\n\n#separating the top 10 cities with the highest number of total graduates\ntop10_total_graduates_cities=top_total_graduates_cities.head(10)\ntop10_total_graduates_cities","aabe739a":"plt.subplots(figsize=(20, 15))\nmap = Basemap(width=1200000,height=900000,projection='lcc',resolution='l',\n                    llcrnrlon=67,llcrnrlat=5,urcrnrlon=99,urcrnrlat=37,lat_0=28,lon_0=77)\n\n#map.bluemarble()\n\nmap.drawmapboundary ()\nmap.drawcountries()\nmap.drawcoastlines ()\n\n\n\nlg=array(top10_total_graduates_cities['longitude'])\nlt=array(top10_total_graduates_cities['latitude'])\npt=array(top10_total_graduates_cities['total_graduates'])\nnc=array(top10_total_graduates_cities['name_of_city'])\n\n\n# START coding here \n\n\nx, y = map(lg, lt)\n\n#                                                                                       # ratio 1:5000\npopulation_size_total_graduates = top10_total_graduates_cities['total_graduates'].apply(lambda x:int(x\/5000))\n\nplt.scatter(x, y, s=population_size_total_graduates, marker=\"o\", c=population_size_total_graduates, \n            cmap=cm.get_cmap('Dark2'), alpha=0.7)\n\n\n\nfor ncs, xpt, ypt in zip(nc, x, y):\n    plt.text(xpt+60000, ypt+30000, ncs, fontsize=10, fontweight='bold')\n    \nplt.title('Top 10 cities in India with total graduates', fontsize=20)\n\n\n\n\n","1a005328":"population_sizes = cities[\"total_graduates\"].apply(lambda x: int(x \/ 5000))\ncolorbarValue = np.linspace(cities[\"total_graduates\"].min(), cities[\"total_graduates\"].max())\ncolorbarValue = colorbarValue.astype(int)\n\nplot_map(population_sizes, colorbarValue)","adeea08b":"Reading all the data into the notebook and storing it as well as displaying the first 5 rows ","c9d69f05":"We see Maharashtra, UP, and Andhra Pradesh have the highest total graduate, but Andaman & Nicobar Islands, on the other hand, has quite a low total graduates. ","f5613e16":"Let us now find and plot the top 10 cities with the total graduates.","9740b7e6":"Let us now plot a bar graph to get an idea as to how many cities have been taken for analysis from the various states","a4d54824":"Let us plot the data for total graduates across the country","d547194b":"Now let us find the top 10 most populated cities in India from the data set","212e305b":"Since we want to plot the data on an Indian map, we need the latitude and longitude of each city. If we go back and view the data set, we notice that the latitude and longitude is stored together under location. So to make our job much easier, we can split that into latitude and longitude","028e9070":"\n\n\n\nLet us now plot the top 10 cities with the highest number of graduates","b4002ab8":"As we can see, most of the cities in the data set have been taken from the states of Uttar Pradesh and West Bengal (each over 60), which is a little surprising because even though Uttar Pradesh is the most populous state in India, Maharashtra comes next","5bfb7af5":"To understand and to put this into context, India is the second most populated country in the world, hence we expect the population density of India to be quite an interesting visual. \nSo let us go ahead and plot the entire population of India on the map","41f06f43":"Let us now use the created function to plot the population density of India","7b1da510":"**Carleton AI Workshop - Visual Mapping of Data**","e83a3539":"Now on to the fun part.\nIt is useful to have the data but it would be quite tedious to explain it to someone using just the data set. A visual representation would be much more appropriate and helpful.\nSo let us plot this data on a map of India","66b46e16":"Let us now analyze the total graduates of various states","beef2fd5":"Our aim is to explore the dataset we have and use it for visual representation on the Indian map to help us have a visual aid in order to understand and analyze the data. The three main tools we will be using for this notebook are numpy, pandas, matplotlib, and a toolkit within matplotlib called basemap (which lets us do the fun stuff)"}}