{"cell_type":{"f2c374d0":"code","df93f531":"code","2baede85":"code","a7e62d1f":"code","002c8fbc":"code","facf1947":"code","54c53b0f":"code","09f1f1b2":"code","84019d25":"code","a2179d62":"code","258b0e0d":"code","20393c7f":"code","2a776d31":"code","9e77f27a":"code","7b8b031b":"code","5aa0a91a":"code","27eeeacf":"code","ad4915e8":"code","a98d2c3d":"code","d0bbe091":"code","ad2f6d2c":"code","4664eb02":"code","da1c622a":"code","73c5a764":"code","8cf4d4d1":"code","c08d60d0":"code","6620b729":"code","1659c62c":"code","1eb7a7bf":"code","a242612e":"code","64867360":"code","4d487fcb":"code","ce3fe737":"code","72234285":"code","8a289a88":"code","e05ac248":"code","e9c177ac":"code","2c0193d4":"markdown","6a01aeb6":"markdown","ccf3e358":"markdown","81dd048c":"markdown","903dc8e9":"markdown","b7988ea9":"markdown","689b6ebe":"markdown","b88af61e":"markdown","e27c9c07":"markdown","28fe7da9":"markdown","cdf98052":"markdown","a1e01790":"markdown","87f65eb6":"markdown","7f60e8a3":"markdown","4af94195":"markdown"},"source":{"f2c374d0":"import pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport numpy as np","df93f531":"df = pd.read_csv('..\/input\/insurance\/insurance.csv')\ndf.head(10),df.shape","2baede85":"# Check some general information:\ndf.info() ","a7e62d1f":"# Decribe the data set\ndf.describe()","002c8fbc":"List_input = ['age','bmi','children','charges']","facf1947":"bmi = df['bmi']\nage = df['age']\ncharges  = df['charges']\nchildren = df['children']","54c53b0f":"fig, ((ax1,ax2),(ax3,ax4))  = plt.subplots(nrows= 2, ncols=2, figsize =(15,10))\n\n#Plot data to each axis:\nax1.scatter(age,charges, color = 'b');\nax2.scatter(bmi,charges, color = 'g');\nax3.scatter(children,charges, color = 'pink');\nax4.scatter(age,bmi, color = 'red');\n            \nax1.set(title = 'Relationship between age vs charge', xlabel= 'age', ylabel='charges');\nax2.set(title = 'Relationship between bmi vs charge', xlabel= 'bmi', ylabel='charges');\nax3.set(title = 'Relationship between children vs charge', xlabel= 'children', ylabel='charges');\nax4.set(title = 'Relationship between bmi vs age', xlabel= 'age', ylabel='bmi');\n","09f1f1b2":"age_group1 = df.loc[(df['charges'] > 0) & (df['charges'] < 13000)]\nage_group2 = df.loc[(df['charges'] > 13000) & (df['charges'] < 28000)]\nage_group3 = df.loc[(df['charges'] > 28000)]","84019d25":"def Exploxring_the_data(dataframe): \n    #Prepare the data\n    bmi = dataframe['bmi']\n    age = dataframe['age']\n    charges  = dataframe['charges']\n    children = dataframe['children']\n    region = dataframe['region']\n    smoking = dataframe['smoker']\n    #Some looks\n    a = dataframe.info()\n    list_infor = [bmi.value_counts(),age.value_counts(),charges.value_counts(),children.value_counts(),region.value_counts(),smoking.value_counts()]\n\n    fig, (ax1,ax2,ax3)  = plt.subplots(nrows= 1, ncols=3, figsize =(15,5))\n\n    #Plot data to each axis:\n    ax1.scatter(bmi,charges, color = 'g');\n    ax2.scatter(children,charges, color = 'pink');\n    ax3.scatter(age,bmi, color = 'red');\n\n    ax1.set(title = 'Relationship between bmi vs charge', xlabel= 'bmi', ylabel='charges');\n    ax2.set(title = 'Relationship between children vs charge', xlabel= 'children', ylabel='charges');\n    ax3.set(title = 'Relationship between bmi vs age', xlabel= 'age', ylabel='bmi');\n    \n    return a,list_infor","a2179d62":"Exploxring_the_data(age_group1)","258b0e0d":"Exploxring_the_data(age_group2)","20393c7f":"Exploxring_the_data(age_group3)","2a776d31":"pattern_group2_no_smoke = age_group2.loc[(age_group2['smoker']=='no')]\npattern_group2_smoke = age_group2.loc[(age_group2['smoker']=='yes')]\n\nbmi_no_smoke = pattern_group2_no_smoke['bmi']\nbmi_smoke = pattern_group2_smoke['bmi']\ncharges_no_smoke = pattern_group2_no_smoke['charges']\ncharges_smoke = pattern_group2_smoke['charges']\n\n\npattern_group2_no_smoke['bmi'].value_counts(),pattern_group2_smoke['bmi'].value_counts()","9e77f27a":"fig, (ax1,ax2)  = plt.subplots(nrows= 1, ncols=2, figsize =(15,5))\n\n#Plot data to each axis:\nax1.scatter(bmi_no_smoke,charges_no_smoke, color = 'g');\nax2.scatter(bmi_smoke,charges_smoke, color = 'pink');\n\n\nax1.set(title = 'Relationship between bmi vs charge of no smoke', xlabel= 'bmi', ylabel='charges');\nax2.set(title = 'Relationship between bmi vs charge of smoke', xlabel= 'bmi', ylabel='charges');\n    ","7b8b031b":"X = df.drop (['charges'],axis = 1)\ny = df['charges']\n\nX","5aa0a91a":"list_name = ['sex','smoker','region']\nX = pd.get_dummies(X, prefix = list_name)\nX","27eeeacf":"X_new = X.drop(['sex_male','smoker_yes','region_southwest'],axis = 1)\nX_new,y","ad4915e8":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_new, y, test_size = 0.2, random_state = 0)","a98d2c3d":"X_train.shape,X_test.shape","d0bbe091":"X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size = 0.2, random_state = 0)","ad2f6d2c":"X_train.shape,X_val.shape","4664eb02":"X_train.iloc[:,:3]","da1c622a":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train.iloc[:,0:3] = sc.fit_transform(X_train.iloc[:,0:3])\nX_test.iloc[:,0:3] = sc.transform(X_test.iloc[:,0:3])\nX_val.iloc[:,0:3] = sc.transform(X_val.iloc[:,0:3])","73c5a764":"y_train = tf.expand_dims(y_train,1, name=None)\ny_test = tf.expand_dims(y_test,1, name=None)\ny_val = tf.expand_dims(y_val,1, name=None)\n\ny_train.shape","8cf4d4d1":"sc_y = StandardScaler()\ny_train = sc_y.fit_transform(y_train)\ny_test = sc_y.transform(y_test)\ny_val = sc_y.transform(y_val)","c08d60d0":"X_train.shape","6620b729":"#1. Create the model:\nmodel = tf.keras.Sequential([\n      tf.keras.layers.Dense(856, activation='relu'),\n      #tf.keras.layers.Dense(700, activation='relu'),\n      tf.keras.layers.Dense(400, activation='relu'),\n      #tf.keras.layers.Dense(300, activation='relu'),\n      #tf.keras.layers.Dense(200,activation='relu'),\n      tf.keras.layers.Dropout(0.3),\n      #tf.keras.layers.Dense(150,activation='relu'),\n      #tf.keras.layers.Dropout(0.2),\n      tf.keras.layers.Dense(100,activation='relu'),\n      #tf.keras.layers.Dense(10,activation='relu'),\n      tf.keras.layers.Dense(1)\n], name='Excersice_1')\n\n#2. Compile the model \nmodel.compile(loss=tf.keras.losses.mae, \n              optimizer = tf.keras.optimizers.Adam(learning_rate=0.0001),\n              metrics =['mse'])\n\n# 3. Fit the model\nmodel.fit(X_train,y_train,validation_data = (X_val, y_val),epochs = 200, batch_size = 60)","1659c62c":"model.summary()","1eb7a7bf":"y_pred = model.predict(X_test)\ny_pred.shape","a242612e":"y_pred_1 = tf.squeeze(y_pred)\ny_test = tf.squeeze(y_test)\ny_pred_1.shape,y_test.shape","64867360":"mae = tf.metrics.mean_absolute_error(y_true=y_test, \n                                     y_pred=y_pred_1)\na = mae\na","4d487fcb":"# Calculate the MSE\nmse = tf.metrics.mean_squared_error(y_true=y_test,\n                                    y_pred=y_pred_1)\nmse","ce3fe737":"# R_score\nfrom sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","72234285":"#model.save('Model_ex1_1')","8a289a88":"from sklearn.svm import SVR\nregressor = SVR(kernel = 'rbf')\nregressor.fit(X_train, y_train)","e05ac248":"y_pred = regressor.predict(X_test)\ny_pred.shape","e9c177ac":"# R_score\nfrom sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","2c0193d4":"# Try SVR model","6a01aeb6":"# Evaluate the model","ccf3e358":"# PLot the dataset","81dd048c":"### We can slightly conclude that: the people who have higher  medical charges tend to be the ones who smoke and overweight ( the bmi > 25)","903dc8e9":"### Build the neural network","b7988ea9":"y_train = tf.expand_dims(y_train,1, name=None)\ny_test = tf.expand_dims(y_test,1, name=None)\ny_val = tf.expand_dims(y_val,1, name=None)\n\ny_train.shape","689b6ebe":"## Standard Scaler","b88af61e":"## Min_Max_scaler","e27c9c07":"##### there are three group in the age","28fe7da9":"from sklearn.preprocessing import MinMaxScaler\nmn = MinMaxScaler()\nX_train.iloc[:,0:3] = mn.fit_transform(X_train.iloc[:,0:3])\nX_test.iloc[:,0:3] = mn.transform(X_test.iloc[:,0:3])\nX_val.iloc[:,0:3] = mn.transform(X_val.iloc[:,0:3])","cdf98052":"## Data overview","a1e01790":"### Preprocess the data","87f65eb6":"## Data visuallization","7f60e8a3":"## Save the model","4af94195":"mn_y = MinMaxScaler()\ny_train = mn_y.fit_transform(y_train)\ny_test = mn_y.transform(y_test)\ny_val = mn_y.transform(y_val)"}}