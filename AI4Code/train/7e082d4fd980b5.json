{"cell_type":{"1580d763":"code","c75624e5":"code","8ab27880":"code","58eaf52d":"code","5e22e2b1":"code","d07ab485":"code","2c01b383":"code","5022a287":"code","e4a9daa1":"code","eb96a837":"code","8ac13c7e":"code","548175e8":"code","ff29ffa4":"code","7654993f":"code","d655b312":"code","039eb208":"code","f15f9d13":"code","adb345a0":"code","a9a144c6":"code","a5907746":"code","202aadda":"code","9d0cbc6e":"code","1f78021f":"code","0248d5f4":"code","b71f6dc3":"code","9fd50379":"markdown","933d50f7":"markdown","22c24c24":"markdown","d2753a4a":"markdown","2de90624":"markdown","772514ff":"markdown","732b538f":"markdown","7da68344":"markdown","49a10c76":"markdown","b8753cb6":"markdown","585cde05":"markdown","ce20c6ac":"markdown"},"source":{"1580d763":"#from matplotlib_scalebar.scalebar import ScaleBar\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\nimport numpy as np\nimport pandas as pd \nimport geopandas as gpd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport os\nimport csv\nfrom tqdm import tqdm","c75624e5":"df = pd.read_csv('..\/input\/citibike-2019\/2019_citibike.csv', \n                 parse_dates=['Start Time', 'Stop Time'],\n                usecols = ['Bike ID', 'Start Time', 'Start Station ID', 'End Station ID', 'Stop Time'])","8ab27880":"df = df[~df['End Station ID'].isna()]\ndf['End Station ID'] = df['End Station ID'].astype(int)","58eaf52d":"bike_ids = df['Bike ID'].value_counts()\nbike_ids = bike_ids[bike_ids > 1]\nbike_ids = list(bike_ids.index)","5e22e2b1":"with open('relocations.csv', 'w', newline='') as csvfile:\n    writer = csv.writer(csvfile)\n    writer.writerow(['From', 'To', 'Start', 'End'])\n    \n    for bike in tqdm(bike_ids):\n        bike_df = df[df['Bike ID'] == bike]\n        bike_df.sort_values('Start Time', inplace=True)\n        for i, ride in enumerate(bike_df.iterrows()):\n            if i != 0:\n                prev_arrival_station = bike_df.iloc[i-1]['End Station ID']\n                departure_station = ride[1]['Start Station ID']\n                if departure_station != prev_arrival_station:\n                    between_start = bike_df.iloc[i-1]['Stop Time']\n                    between_end = ride[1]['Start Time']\n                    writer.writerow([prev_arrival_station, departure_station,\n                                   between_start, between_end])","d07ab485":"counts = [0] * 366\n    \nfor bike in tqdm(bike_ids):\n    bike_df = df[df['Bike ID'] == bike]\n    bike_df.sort_values('Start Time', inplace=True)\n    prev_use = None\n    for i, ride in enumerate(bike_df.iterrows()):\n        doy = ride[1]['Start Time'].day_of_year - 1\n        if prev_use is None:\n            counts[doy] += 1\n        else:\n            if doy - prev_use > 10:\n                counts[prev_use + 5 + 1] -= 1\n                counts[doy] += 1\n        if i == len(bike_df) - 1: # Last ride\n            if 365 - doy > 10:\n                counts[prev_use + 5 + 1] -= 1\n        prev_use = doy ","2c01b383":"aggs = [0] * 365\n\naggs[0] = counts[0]\nfor i, val in enumerate(counts[1:]):\n    aggs[i] = aggs[i-1] + counts[i]","5022a287":"textfile = open(\"bike_counts.txt\", \"w\")\nfor element in aggs:\n    textfile.write(str(element) + \"\\n\")\ntextfile.close()","e4a9daa1":"df_r = pd.read_csv('..\/input\/relocationsbike\/relocations.csv',\n                parse_dates=['Start', 'End'])\n\ndf_r['avg_time'] = df_r.Start + (df_r.End - df_r.Start) \/ 2\ndf_r['doy'] = df_r.avg_time.dt.dayofyear\ndf_r['date'] = df_r.avg_time.dt.normalize()","eb96a837":"counts = pd.read_csv('..\/input\/2019-bike-count\/bike_counts.txt', sep=\" \", header=None)\ncounts.index = counts.index + 1\ncounts.loc[[1,2,3,4]] = counts.loc[5].values","8ac13c7e":"summary = df_r.groupby(['doy', 'date']).size()\nsummary = summary.rename('relocations')\nsummary = summary.reset_index().set_index('doy')","548175e8":"df_m = counts.join(summary)\ndf_m = df_m.rename(columns={0: 'bikes'})","ff29ffa4":"df_m['percentage'] = df_m.relocations\/df_m.bikes * 100","7654993f":"df_m = df_m[5:360].copy()","d655b312":"df_m.date = pd.to_datetime(df_m.date)\nplt.rcParams[\"figure.figsize\"] = (8,4)\nplt.plot_date(df_m.date, df_m.percentage,fmt='-')\nplt.title('Citibike Relocations in 2019')\nplt.xlabel('Date')\nplt.ylabel('Relocations per Bike (%)')\nplt.savefig('relocation_percentage.png', dpi=300)","039eb208":"nyc_shp = gpd.read_file(r'..\/input\/borough-boundaries-nyc\/geo_export_43b35747-351a-4fbf-944b-eaee1f68385e.shp')","f15f9d13":"df","adb345a0":"leaving = df.groupby('Start Station ID').size()\nleaving = leaving.rename('Leaving')\n\narriving = df.groupby('End Station ID').size()\narriving = arriving.rename('Arriving')","a9a144c6":"summ = pd.concat([arriving, leaving], axis=1).fillna(0)","a5907746":"summ","202aadda":"stations = pd.read_csv('..\/input\/stations\/stations.csv')\nstations = stations.set_index('Unnamed: 0')\nstations = stations[~stations.index.isna()]\nstations.index = stations.index.astype(int)\nstations = stations[stations['lon'] != 0]","9d0cbc6e":"summ = summ.join(stations, how='inner')","1f78021f":"gdf = gpd.GeoDataFrame(\n    summ, geometry=gpd.points_from_xy(summ.lon, summ.lat))\ngdf","0248d5f4":"cnst = 0.01\nlat_min = min(gdf['lat']) - cnst\nlat_max = max(gdf['lat']) + cnst\nlng_min = min(gdf['lon']) - cnst\nlng_max = max(gdf['lon']) + cnst","b71f6dc3":"fig, ax = plt.subplots(nrows=1, ncols=2,figsize=(10,7))\n#plt.axis('off')\ncbar_ax = fig.add_axes([0.88, 0.15, 0.04, 0.7])\nminmin = np.min([np.min(gdf.Arriving), np.min(gdf.Leaving)])\nmaxmax = np.max([np.max(gdf.Arriving), np.max(gdf.Leaving)])\n\nnyc_shp.plot(ax=ax[0], edgecolor='k',alpha=1,linewidth=1, color='white')\nnyc_shp.plot(ax=ax[1], edgecolor='k',alpha=1,linewidth=1, color='white')\n\nim1 = gdf.plot(column='Arriving', ax=ax[0], markersize=5, vmin=minmin, vmax=maxmax, legend=True,cax=cbar_ax,\n         legend_kwds={'label': \"Number of Rides\",})\nim2 = gdf.plot(column='Leaving', ax=ax[1], markersize=5,  vmin=minmin, vmax=maxmax,legend=True, cax=cbar_ax,\n         legend_kwds={'label': \"Number of Rides\",})\n\nfig.suptitle('NYC Citibike Station Usage', fontsize=22)\n\nax[0].set_title('Arrivals')\nax[1].set_title('Departures')\n\nax[0].set_xlabel('Longitude', fontsize=10)\nax[0].set_ylabel('Latitude', fontsize='medium')\n\nax[0].set_xlim([lng_min, lng_max])\nax[1].set_xlim([lng_min, lng_max])\nax[0].set_ylim([lat_min, lat_max])\nax[1].set_ylim([lat_min, lat_max])\n\nax[0].axis('off')\nax[1].axis('off')\n\nfig.subplots_adjust(right=0.85)\nplt.savefig('departure_arrival_map.png')\n","9fd50379":"## Finding Relocations\n","933d50f7":"The list of values was saved as a textfile for future use.","22c24c24":"## Departures per Station","d2753a4a":"Compute the number of relocations per day.","2de90624":"Given the changes in bike supply, the number of bikes in circulation can be easily derived as the sum of all previous changes.","772514ff":"## Computing Number of Bikes in Circulation\nWe try to compute the number of bikes in circulation at once. Multiple approaches were tried:\n\n1. Counting the number of unique bike IDs: This method failed as bikes enter and exit circulation\n2. Counting the first and last ride of each unique bike: This method did show the overall trends in bike changes, but apparently ~10-15% of bikes are removed from circulation in winter. This method did not account for it.\n3. As an adaptation of Method #2, bikes were considered out of circulation if they had not been used in 10 days. This was the final method used.\n\nThe results were compared to Citibike Monthly Reports and seemed to be reasonable.\n","732b538f":"By iterating through all the bikes in the ride history, we can detect a bike relocation by checking if the departing station of a ride is different than the arriving station of the previous ride. We can then record the time at which the previous ride ended and the time at which the new ride started at to obtain an estimate range on when the relocation could have occured.\n\nThe relocations are saved as a CSV file.","7da68344":"# Data Source\nCitibike ride data was obtained from the official Citibike data portal (https:\/\/ride.citibikenyc.com\/system-data) and combined using a script (https:\/\/github.com\/jpFenley\/citibike).\n\nShapefiles of New York City were obtained from the NYC Open Data Portal (https:\/\/data.cityofnewyork.us\/City-Government\/Borough-Boundaries\/tqmj-j8zm).","49a10c76":"We find all bikes that have been used for a ride.","b8753cb6":"#### Imports","585cde05":"We filter those rides that do not have a valid end station id. This is possibly from stolen bikes, bikes that were permanently taken out of circulation, and other rare exceptions.","ce20c6ac":"## Relocations per Day\n\nAs we have a range of values for when the relocation occured and not the precise time, we use the midpoint of the two timestamps as the relocation time. Given this estimated time, we also compute the day of the year at which it took place."}}