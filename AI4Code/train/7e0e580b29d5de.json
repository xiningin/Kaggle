{"cell_type":{"6c147864":"code","3ca7de3f":"code","0dc8f47b":"code","0a075193":"code","6dc705cf":"code","6e88dd6c":"code","17668a8e":"code","9bb7c5f2":"code","7740663e":"code","16c1e1b6":"code","d546dc6e":"code","fc114ec1":"code","f42d9bc4":"code","654cd0cd":"code","6cebb5cf":"code","474a88a5":"code","7e4cc619":"code","5deeb4e6":"code","a2da4fd9":"markdown"},"source":{"6c147864":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import tree\n\nfrom sklearn.datasets import load_iris","3ca7de3f":"df = pd.read_csv(\"..\/input\/iris\/Iris.csv\")\n#df =  load_iris()\ndf","0dc8f47b":"df.shape","0a075193":"df.drop('Id',axis = 1)","6dc705cf":"ax = df[df.Species=='Iris-setosa'].plot.scatter(x='SepalLengthCm', y='SepalWidthCm', \n                                                    color='red', label='setosa')\ndf[df.Species=='Iris-versicolor'].plot.scatter(x='SepalLengthCm', y='SepalWidthCm', \n                                                color='green', label='versicolor', ax=ax)\ndf[df.Species=='Iris-virginica'].plot.scatter(x='SepalLengthCm', y='SepalWidthCm', \n                                                color='blue', label='virginica', ax=ax)\nax.set_title(\"scatter\")","6e88dd6c":"feature_cols=['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']\nX= df[feature_cols]\ny= df.Species\n\nX,y","17668a8e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,random_state = 50,test_size = 0.25 )","9bb7c5f2":"decision_tree_clf = DecisionTreeClassifier()\ndecision_tree_clf.fit(X_train, y_train)","7740663e":"y_pred = decision_tree_clf.predict(X_test)","16c1e1b6":"y_pred_entropy = decision_tree_clf.predict(X_test)","d546dc6e":"#accuracy score on train and testing data\n\nprint(\"Accuracy score on train data:\",accuracy_score(y_true = y_train,y_pred = decision_tree_clf.predict(X_train)))\nprint(\"Accuracy score on test data:\",accuracy_score(y_true = y_test,y_pred = y_pred_entropy))","fc114ec1":"#after tune the parameters of the decision tree to increase its accuracy\n\ndecision_tree_clf2 = DecisionTreeClassifier(criterion = \"entropy\", min_samples_split = 50)\ndecision_tree_clf2.fit(X_train,y_train)","f42d9bc4":"print(\"Accuracy score on train data:\",accuracy_score(y_true = y_train,y_pred = decision_tree_clf2.predict(X_train)))\nprint(\"Accuracy score on test data:\",accuracy_score(y_true = y_test,y_pred = y_pred_entropy))","654cd0cd":"from sklearn.ensemble import RandomForestClassifier\nimport sklearn.metrics as metrics","6cebb5cf":"clfr= RandomForestClassifier(random_state = 100)","474a88a5":"clfr.fit(X_train, y_train)","7e4cc619":"Y_pred=clfr.predict(X_test)\n\nY_pred","5deeb4e6":"#accuracy for the model\n\nacc = clfr.score(X_test,y_test)*100\nprint(\"Accuracy on test data:\",acc)","a2da4fd9":"# Random Forest Classifier"}}