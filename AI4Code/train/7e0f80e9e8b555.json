{"cell_type":{"dd25d087":"code","7b9e558d":"code","22050865":"code","4ceb99b0":"code","c4ced963":"code","13f8f92d":"code","90d912a7":"code","5ac39f4e":"code","7021f4ac":"code","61140a4c":"code","729676ed":"code","0fb968e9":"code","ff5e66a6":"code","796dd7f2":"code","19164937":"code","488745a1":"code","9564bf84":"code","596b4aa8":"code","8aab7ecb":"code","6fc2ed9f":"code","073c2f99":"code","9e329d13":"code","4fefd1ba":"code","443ad9fb":"code","21183b5f":"code","afddd43d":"code","16cf12e4":"code","1981c2d8":"code","aee0a840":"code","1edbbbcf":"code","0230f3bd":"code","b74d3de6":"code","e59a54a3":"code","bfd55b25":"code","a90c1c0a":"code","079933b5":"code","b27679aa":"code","cc72afab":"code","80c92cfb":"code","215c5a6d":"code","4d5b961b":"code","254a0c5a":"code","92b4cf58":"code","661434c0":"code","7ed1b00d":"code","4c4f4291":"markdown","f2d18297":"markdown","433bc5af":"markdown","2cdb6265":"markdown","f1d54a11":"markdown","eaaaf0a3":"markdown","cea4ac5f":"markdown","1d1178d2":"markdown","4cd768ed":"markdown","2804a93f":"markdown","8c177b6a":"markdown","45f3e52b":"markdown","090a90aa":"markdown","8b2755f9":"markdown","a5d97d32":"markdown","170fe632":"markdown","512ae674":"markdown","98ed6417":"markdown","20bbc1af":"markdown","89a816b0":"markdown","3e6fa3db":"markdown","53613b3a":"markdown","161ffac6":"markdown","0d2fcbca":"markdown"},"source":{"dd25d087":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7b9e558d":"data = pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","22050865":"data.head()","4ceb99b0":"# Add index column\ndata = data.reset_index()","c4ced963":"plt.figure(figsize=(12, 6))\ndata.groupby('age')['index'].count().plot()","13f8f92d":"# Decrease of red blood cells or hemoglobin ?\n\ndata.anaemia.value_counts()","90d912a7":"# Level of the CPK enzyme in the blood (mcg\/L)\n\nplt.figure(figsize=(12, 6))\nsns.distplot(data.creatinine_phosphokinase, hist=False)","5ac39f4e":"# If the patient has diabetes\n\ndata.diabetes.value_counts()","7021f4ac":"# Percentage of blood leaving the heart at each contraction\n\nplt.figure(figsize=(12, 6))\nsns.distplot(data.ejection_fraction, hist=False)","61140a4c":"# If the patient has hypertension\n\ndata.high_blood_pressure.value_counts()","729676ed":"# Platelets in the blood (kiloplatelets\/mL)\n\nplt.figure(figsize=(12, 6))\nsns.distplot(data.platelets, hist=False)","0fb968e9":"# Level of serum creatinine in the blood (mg\/dL)\n\nplt.figure(figsize=(12, 6))\nsns.distplot(data.serum_creatinine, hist=False)","ff5e66a6":"# Level of serum sodium in the blood (mEq\/L)\n\nplt.figure(figsize=(12, 6))\nsns.distplot(data.serum_sodium, hist=False)","796dd7f2":"# Woman or man\n\ndata.sex.value_counts()","19164937":"# If the patient smokes or not\n\ndata.smoking.value_counts()","488745a1":"# Follow-up period \n\nplt.figure(figsize=(12, 6))\nsns.distplot(data.time, hist=False)","9564bf84":"# If the patient deceased during the follow-up period\n\ndata.DEATH_EVENT.value_counts()","596b4aa8":"data.isnull().sum()","8aab7ecb":"# No missing values","6fc2ed9f":"sns.catplot(x=\"sex\", y=\"DEATH_EVENT\", kind=\"bar\", data=data)","073c2f99":"# Sex is not impactful","9e329d13":"sns.catplot(x=\"smoking\", y=\"DEATH_EVENT\", kind=\"bar\", data=data)","4fefd1ba":"# Same as sex","443ad9fb":"sns.catplot(x=\"anaemia\", y=\"DEATH_EVENT\", kind=\"bar\", data=data)","21183b5f":"# having anaemia has more impact in death event","afddd43d":"sns.catplot(x=\"diabetes\", y=\"DEATH_EVENT\", kind=\"bar\", data=data)","16cf12e4":"# Diabetes has no impact","1981c2d8":"sns.catplot(x=\"high_blood_pressure\", y=\"DEATH_EVENT\", kind=\"bar\", data=data)","aee0a840":"# Hypertension seems to have an impact","1edbbbcf":"grid = sns.FacetGrid(data, row='DEATH_EVENT', size=3, aspect=1.6)\ngrid.map(sns.distplot, 'age', 'DEATH_EVENT')\ngrid.add_legend()","0230f3bd":"data.groupby('DEATH_EVENT')['age'].mean()","b74d3de6":"grid = sns.FacetGrid(data, row='DEATH_EVENT', size=3, aspect=1.6)\ngrid.map(sns.distplot, 'time', 'DEATH_EVENT')\ngrid.add_legend()","e59a54a3":"# less time : more probability to die","bfd55b25":"# check age bins\n\nsns.distplot(data.age, bins=5)","a90c1c0a":"data['ageBin'] = pd.cut(data['age'], 5)\ndata[['ageBin', 'DEATH_EVENT']].groupby(['ageBin'], as_index=False).mean().sort_values(by='ageBin', ascending=True)","079933b5":"# More than 50% of death after 70","b27679aa":"data.loc[ data['age'] <= 50, 'age'] = 0\ndata.loc[(data['age'] > 50) & (data['age'] <= 60), 'age'] = 1\ndata.loc[(data['age'] > 60) & (data['age'] <= 70), 'age'] = 2\ndata.loc[(data['age'] > 70) & (data['age'] <= 80), 'age'] = 3\ndata.loc[(data['age'] > 80) & (data['age'] <= 90), 'age'] = 4\ndata.loc[ data['age'] > 90, 'age'] = 5","cc72afab":"data = data[['age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets',\n       'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time', 'DEATH_EVENT']]","80c92cfb":"data.head()","215c5a6d":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import tree\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV","4d5b961b":"X = data.drop(\"DEATH_EVENT\", axis=1)\nY = data[\"DEATH_EVENT\"]","254a0c5a":"# Split 20% test, 80% train\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state=0)","92b4cf58":"# Logistic Regression\n\nlog = LogisticRegression(max_iter=100)\nlog.fit(X_train, Y_train)\nY_pred_log = log.predict(X_test)\nacc_log = accuracy_score(Y_pred_log, Y_test)\nacc_log","661434c0":"rf = RandomForestClassifier()\n\n# search the best params\ngrid = {'n_estimators':[100,200], 'max_depth': [2,5,10]}\n\nclf_rf = GridSearchCV(rf, grid, cv=10)\nclf_rf.fit(X_train, Y_train)\n\nY_pred_rf = clf_rf.predict(X_test)\n# get the accuracy score\nacc_rf = accuracy_score(Y_pred_rf, Y_test)\nprint(acc_rf)","7ed1b00d":"# Best model is with random forest","4c4f4291":"# Data Featuring","f2d18297":"# Data Prediction","433bc5af":"### Time","2cdb6265":"### Diabetes","f1d54a11":"### Diabetes x Death","eaaaf0a3":"# Data Exploration","cea4ac5f":"### Sex","1d1178d2":"### Sex x Death","4cd768ed":"### Platelets","2804a93f":"### Time x Death","8c177b6a":"### Serum Creatinine","45f3e52b":"# Creating the model","090a90aa":"### Smoking","8b2755f9":"### High Blood Pressure","a5d97d32":"### Ejection Fraction","170fe632":"### High blood pressure x Death","512ae674":"### Anaemia x Death","98ed6417":"### Creatinine Phosphokinase","20bbc1af":"### Age x Death","89a816b0":"### Age","3e6fa3db":"### Serum Sodium","53613b3a":"### Smoking","161ffac6":"### Anaemia","0d2fcbca":"# Conclusion"}}