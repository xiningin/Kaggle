{"cell_type":{"9bfcbf88":"code","39ed865d":"code","8113e390":"code","e6b7fe36":"code","276647c2":"code","6d46508e":"code","3e293aa8":"code","2de1035e":"code","1e0685e9":"code","6f1701fc":"code","63aac477":"code","4867695c":"code","88c19ae6":"code","c37824d8":"code","0136c6d0":"code","5437ffa9":"code","24d1aa12":"code","548f4c3b":"code","cb44d0bf":"code","e6df069e":"code","1b3ad023":"code","902bb3d1":"code","3b225b45":"code","753006b1":"code","3781a064":"code","9cbe478b":"code","b9e18d3e":"code","58b4eb1b":"code","b55e07fd":"markdown","03c84d1a":"markdown","7893a652":"markdown","34ca3de5":"markdown","008efdf0":"markdown","f7c3f023":"markdown","c43d4fd2":"markdown","16cc765c":"markdown","58e38b72":"markdown","ffd555f3":"markdown"},"source":{"9bfcbf88":"import tensorflow as tf\nimport os,cv2\nfrom tqdm import tqdm\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D,MaxPool2D,Dense,Flatten,Dropout\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder","39ed865d":"f = []\nfor dits,_,filenames in os.walk('\/kaggle\/input\/stanford-dogs-dataset\/images\/Images'):\n    f.append(dits)","8113e390":"def load_data(label,data_dir,imgsize):\n    for img in tqdm(os.listdir(data_dir)):\n        path = os.path.join(data_dir,img)\n        img = cv2.imread(path,cv2.IMREAD_COLOR)\n        img = cv2.resize(img,(imgsize,imgsize))\n        \n        X.append(np.array(img))\n        y.append(str(label))","e6b7fe36":"X = []\ny = []\nimgsize = 150\nfor a in f[1:21]:\n    load_data(a[37:].replace('-','_'),a,imgsize)","276647c2":"pd.Series(y).unique()","6d46508e":"len(pd.Series(y).unique())","3e293aa8":"le= LabelEncoder()\ny = le.fit_transform(y)","2de1035e":"from keras.utils.np_utils import to_categorical\ny = to_categorical(y,20)","1e0685e9":"X = np.array(X)\nX = X\/255","6f1701fc":"\nx_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=1,stratify=y)","63aac477":"X.shape","4867695c":"def load_model():\n  model = Sequential()\n  model.add(Conv2D(32,3,padding='same',activation='relu',input_shape=[150, 150, 3]))\n  model.add(MaxPool2D(pool_size=2, strides=2, padding='valid'))\n  model.add(Dropout(0.5))\n  model.add(Conv2D(32,3,padding='same',activation='relu'))\n  model.add(MaxPool2D(pool_size=2, strides=2, padding='valid'))\n  model.add(Dropout(0.5))\n  model.add(Conv2D(64,3,padding='same',activation='relu'))\n  model.add(MaxPool2D(pool_size=2, strides=2, padding='valid'))\n  model.add(Conv2D(64,3,padding='same',activation='relu'))\n  model.add(Dropout(0.3))\n  model.add(MaxPool2D(pool_size=2, strides=2, padding='valid'))\n  model.add(Conv2D(64,3,padding='same',activation='relu'))\n  model.add(MaxPool2D(pool_size=2, strides=2, padding='valid'))\n  model.add(Dropout(0.3))\n\n  model.add(Flatten())\n  model.add(Dense(units=128,activation='relu'))\n  model.add(Dropout(0.1))\n  model.add(Dense(units=64,activation='relu'))\n  model.add(Dense(units=20,activation='softmax'))\n\n  print(model.summary())\n  return model","88c19ae6":" def plot_accuracy(history):\n  plt.plot(history.history['accuracy'])\n  plt.plot(history.history['val_accuracy'])\n  plt.title('model accuracy')\n  plt.ylabel('accuracy')\n  plt.xlabel('epoch')\n  plt.legend(['train', 'test'], loc='upper left')\n  plt.show()\ndef plot_losses(history):\n  plt.plot(history.history['loss'])\n  plt.plot(history.history['val_loss'])\n  plt.title('model loss')\n  plt.ylabel('loss')\n  plt.xlabel('epoch')\n  plt.legend(['train', 'test'], loc='upper left')\n  plt.show()","c37824d8":"model = load_model()\noptimizer = tf.keras.optimizers.Adam(learning_rate=0.0001)\nmodel.compile(loss=\"categorical_crossentropy\",\n              optimizer=optimizer, metrics=[\"accuracy\"])\nhistory = model.fit(x_train,y_train,validation_split=0.2,epochs=150)","0136c6d0":"model.evaluate(x_test,y_test)","5437ffa9":"plot_accuracy(history)","24d1aa12":"plot_losses(history)","548f4c3b":"model = load_model()\noptimizer = tf.keras.optimizers.SGD(learning_rate=0.0001,momentum=0.9,nesterov=True)\nmodel.compile(loss=\"categorical_crossentropy\",\n              optimizer=optimizer, metrics=[\"accuracy\"])\n\nhistory = model.fit(x_train,y_train,validation_split=0.2,epochs=200)","cb44d0bf":"model.evaluate(x_test,y_test)","e6df069e":"plot_accuracy(history)","1b3ad023":"plot_losses(history)","902bb3d1":"tf_model = tf.keras.applications.ResNet50(include_top = False,input_shape=(150,150,3),weights='imagenet')\ntf_model.trainable = True","3b225b45":"tf_model.output","753006b1":"global_average_layer = tf.keras.layers.GlobalAveragePooling2D()(tf_model.output)\nprediction_layer = Dense(units=20, activation='softmax')(global_average_layer)\nmodel_tf = tf.keras.models.Model(inputs=tf_model.input, outputs=prediction_layer)\nmodel_tf.compile(optimizer=tf.keras.optimizers.Adam(lr=0.0001), loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","3781a064":"history = model_tf.fit(x_train,y_train, epochs=50, validation_split=0.2)","9cbe478b":"plot_accuracy(history)","b9e18d3e":"plot_losses(history)","58b4eb1b":"model_tf.evaluate(x_test,y_test)","b55e07fd":"# Loading data","03c84d1a":"Any Suggestions are welcome.. \n\nThank you.","7893a652":"# Loading images of first 20 dog breeds","34ca3de5":"# One hot encoding target variables","008efdf0":"# Train test splitting the data","f7c3f023":"# Importing required libraries","c43d4fd2":"# Adam","16cc765c":"# Normalizing the data","58e38b72":"# SGD","ffd555f3":"# Trainsfer Learning"}}