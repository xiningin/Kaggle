{"cell_type":{"05af1de0":"code","eb809817":"code","769bb31a":"code","6bde03f2":"code","22977f8a":"code","9ec72c73":"code","8cbd4d91":"code","5c6bc6a7":"code","30692bb1":"code","a9698575":"code","9ae9de48":"code","a5a5ea78":"code","49701dc2":"code","32fc1e32":"code","5edc3a5b":"code","7a6c11d6":"code","0bcf698f":"code","78ef12b8":"code","30d35ff3":"code","7be5d3ca":"code","a8c0fcff":"code","62482c78":"code","ac8636d5":"code","1e299bb3":"code","b9f142b7":"code","5b1e5414":"code","6db06557":"code","361a51c7":"code","cebdbfef":"code","2b1ea1dd":"code","9ad83c75":"code","0cf9a529":"markdown","f69c5c6e":"markdown","da637f53":"markdown","658b0208":"markdown","406a8fbf":"markdown","cf276e7d":"markdown","5ef06c8b":"markdown","6e847f89":"markdown","6294ec6e":"markdown","4509ccff":"markdown","9fa826bf":"markdown","9de58193":"markdown","8e4494d3":"markdown","c03425c7":"markdown"},"source":{"05af1de0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eb809817":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Lambda, Flatten, Dense\nfrom keras.utils.np_utils import to_categorical \nfrom keras.optimizers import Adam, RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","769bb31a":"# Loading Train and Test Data\ntrain = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","6bde03f2":"pd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)","22977f8a":"train.head()","9ec72c73":"X = train.drop('label', axis=1)\ny = train['label']","8cbd4d91":"print('Shape of independent features: ', X.shape)\nprint('Shape of target label: ', y.shape)","5c6bc6a7":"sns.countplot(y)\ny.value_counts()","30692bb1":"X.isnull().any().describe()","a9698575":"test.isnull().any().describe()","9ae9de48":"X = X\/255.0\ntest = test\/255.0","a5a5ea78":"X = X.values.reshape(X.shape[0], 28,28,1)\ntest = test.values.reshape(test.shape[0], 28,28,1)","49701dc2":"X.shape, test.shape","32fc1e32":"# Encode labels to one-hot-vectors (For ex '3' is represented as: [0,0,0,1,0,0,0,0,0,0])\ny = to_categorical(y, num_classes=10)","5edc3a5b":"# Let's look the output\ny","7a6c11d6":"# Train-test-split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)","0bcf698f":"# Let's check one of the training image\nplt.imshow(X_train[15][:,:,0], cmap='gray')","78ef12b8":"model = Sequential()\n\nmodel.add(Conv2D(32, (5,5), padding='Same', activation='relu', input_shape=(28,28,1)))\nmodel.add(Conv2D(32, (5,5),padding = 'Same', activation ='relu'))\n\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3,3), padding='Same', activation='relu'))\nmodel.add(Conv2D(64, (3,3), padding='Same',activation='relu'))\n\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25)),\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = 'relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(10, activation='softmax'))","30d35ff3":"model.summary()","7be5d3ca":"# Define Optimizer\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-8, decay=0.001)","a8c0fcff":"# Compile the model\nmodel.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])","62482c78":"# Set learning rate reduction\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy',\n                                           factor=0.5,\n                                           verbose=2,\n                                           min_lr=0.00001)","ac8636d5":"datagen = ImageDataGenerator(rotation_range=20,\n                            zoom_range=0.2,\n                            height_shift_range=0.2,\n                            width_shift_range=0.2,\n                            horizontal_flip=False,\n                            vertical_flip=False)\ndatagen.fit(X_train)","1e299bb3":"num_epoch =35\nbatch_size=86","b9f142b7":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train, y_train,batch_size=batch_size),\n                             epochs=num_epoch, steps_per_epoch=X_train.shape[0] \/\/ batch_size,\n                             validation_data=(X_test, y_test))","5b1e5414":"# Plot the loss and accuracy curves for training and validation \nplt.figure(figsize=(14,6))\nax1 = plt.subplot(1,2,1)\nax1.plot(history.history['loss'], color='b', label='Training Loss') \nax1.plot(history.history['val_loss'], color='r', label = 'Validation Loss',axes=ax1)\nlegend = ax1.legend(loc='best', shadow=True)\nax2 = plt.subplot(1,2,2)\nax2.plot(history.history['accuracy'], color='b', label='Training Accuracy') \nax2.plot(history.history['val_accuracy'], color='r', label = 'Validation Accuracy')\nlegend = ax2.legend(loc='best', shadow=True)","6db06557":"y_prediction = model.predict(X_test)\ny_prediction = np.argmax(y_prediction, axis=1)\ny_true = np.argmax(y_test, axis=1)\n\nimport scikitplot as skplt\nskplt.metrics.plot_confusion_matrix(y_true, y_prediction, title='Confusion Matrix for Validation Data')","361a51c7":"pred = model.predict(test)\npred","cebdbfef":"# select the index with the maximum probability\nprediction = np.argmax(pred, axis = 1)\nprediction","2b1ea1dd":"prediction = pd.Series(data=prediction, name='Label')","9ad83c75":"# Save predictions\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),prediction],axis = 1)\n\nsubmission.to_csv(\"Digit_Recognizer_submission09.csv\",index=False)","0cf9a529":"### Give it a try:)\n### Upvote if you like this notebook","f69c5c6e":"### Reshape image into 3-dimensions (height=28px, width=28px, channels=1)","da637f53":"### Define the model","658b0208":"### Normalizing the data","406a8fbf":"### One-hot-encoding","cf276e7d":"## Predict the result","5ef06c8b":"### Data Augmentation\nTo generate more images for training the model ","6e847f89":"### Check Missing Values(if any)","6294ec6e":"### Confusion Matrix","4509ccff":"# How to build an Image Classification Model ?\nIn this notebook you will learn to build and train an image classificationmodel with Convolutional Neural Network using Keras api.\n### Steps:\n1. Data Preparation\n2. Define CNN model\n3. Evaluate the model\n4. Prediction","9fa826bf":"### Note:\nBe carefull with some unbalanced dataset, a simple random split could cause inaccurate evaluation during the validation. To avoid that, you could use stratify = True option in train_test_split function.","9de58193":"### Importing Libraries","8e4494d3":"## Data Preparation","c03425c7":"Hence, there is no missing value present in the data"}}