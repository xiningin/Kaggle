{"cell_type":{"c0e7dd89":"code","2067ece9":"code","b5e2eade":"code","951e5e19":"code","216a7d4f":"code","1294cc49":"code","55fd2006":"code","8623182d":"code","c1e83850":"code","fa2d9212":"code","11de3c9e":"code","9ea8038a":"code","eb7bc4ac":"code","f3408592":"code","240d4ec4":"code","a677e670":"code","b68d5e75":"code","561f0101":"code","b2c89b11":"code","7b55f6d1":"code","eee7d5b6":"code","90795636":"code","900f88f9":"code","39674781":"code","24051a85":"code","5d622f76":"code","656d0ef4":"code","af082a1a":"code","1c9bf0fb":"code","be0382b2":"code","6b30e4ad":"code","99c57ffb":"code","ff6789e2":"markdown","c22a8909":"markdown"},"source":{"c0e7dd89":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2067ece9":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b5e2eade":"data_dir = '..\/input\/graduate-admissions\/Admission_Predict.csv'","951e5e19":"raw_data = pd.read_csv('..\/input\/graduate-admissions\/Admission_Predict.csv')\nraw_data","216a7d4f":"raw_data.columns= [phrase.strip().replace(' ', '_') for phrase in raw_data.columns]\nraw_data.head(5)","1294cc49":"raw_data.describe()","55fd2006":"sns.distplot(raw_data[\"CGPA\"])","8623182d":"q = raw_data[\"CGPA\"].quantile(0.01)\ndata_1 = raw_data[raw_data[\"CGPA\"]>q]\ndata_1.describe()","c1e83850":"ax = sns.boxplot(x=raw_data[\"Chance_of_Admit\"])","fa2d9212":"sns.distplot(raw_data[\"Chance_of_Admit\"])","11de3c9e":"q=data_1[\"Chance_of_Admit\"].quantile(0.01)\ndata_2 = data_1[data_1[\"Chance_of_Admit\"]>q]\ndata_2.describe()","9ea8038a":"sns.distplot(data_2[\"Chance_of_Admit\"])","eb7bc4ac":"targets = data_2[ \"Chance_of_Admit\"]\ninputs = data_2.drop([\"Chance_of_Admit\"],axis = 1 )","f3408592":"inputs['GRE_Score'] = inputs['GRE_Score']\/340\ninputs['TOEFL_Score'] = inputs['TOEFL_Score']\/120\ninputs['University_Rating'] = inputs['University_Rating']\/5\ninputs['SOP'] = inputs['SOP']\/5\ninputs['LOR'] = inputs['LOR']\/5\ninputs['CGPA'] = inputs['CGPA']\/10\n\n\ninputs","240d4ec4":"from sklearn.model_selection import train_test_split\nx_train , x_test,y_train,y_test = train_test_split(inputs, targets , test_size = 0.2,random_state = 365) \n","a677e670":"from sklearn.linear_model import LinearRegression\n##Importing","b68d5e75":"reg = LinearRegression()\nreg.fit(x_train,y_train)","561f0101":"from sklearn.model_selection import cross_val_score\ndef get_cv_scores(reg):\n    scores = cross_val_score(reg,\n                             x_train,\n                             y_train,\n                             cv=5,\n                             scoring='r2')\n    \n    print('CV Mean: ', np.mean(scores))\n    print('STD: ', np.std(scores))\n    print('\\n')\n\n# get cross val scores\nget_cv_scores(reg)","b2c89b11":"y_hat = reg.predict(x_train)","7b55f6d1":"plt.scatter(y_train,y_hat)\nplt.xlabel(\"Targets(y_train)\")\nplt.ylabel(\"Predictions(y_hat)\")\nplt.show()","eee7d5b6":"sns.distplot(y_train-y_hat)","90795636":"reg.score(x_train,y_train)","900f88f9":"y_hat_test = reg.predict(x_test)","39674781":"plt.scatter(y_test,y_hat_test)\nplt.xlabel(\"Targets(y_test)\")\nplt.ylabel(\"Predictions(y_hat_test)\")\nplt.show()","24051a85":"df_pf = pd.DataFrame(y_hat_test , columns = [\"Prediction\"])\ndf_pf.head()","5d622f76":"y_test = y_test.reset_index(drop= True)\ny_test","656d0ef4":"df_pf[\"Target\"]= y_test\ndf_pf","af082a1a":"df_pf['Residual'] = df_pf['Target'] - df_pf['Prediction']","1c9bf0fb":"df_pf['Difference%'] = np.absolute(df_pf['Residual']\/df_pf['Target']*100)\ndf_pf\n","be0382b2":"df_pf.describe()","6b30e4ad":"pd.options.display.max_rows = 999\npd.set_option('display.float_format',lambda x :  \"%.2f\"%x)\ndf_pf.sort_values(by = [\"Difference%\"])","99c57ffb":"rss=((y_test-y_hat_test)**2).sum()\nmse=np.mean((y_test-y_hat_test)**2)\nprint(\"Final rmse value is =\",np.sqrt(np.mean((y_test-y_hat_test)**2)))","ff6789e2":"**Creating a Regression**","c22a8909":"**Testing**"}}