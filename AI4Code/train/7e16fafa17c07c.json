{"cell_type":{"7721e870":"code","4703c657":"code","f3319b70":"code","37e37431":"code","6a4e4d1f":"code","b611b2d6":"code","ee1e5e81":"code","5c56c8ad":"code","e756f34a":"code","bccab5d4":"code","fb282a82":"code","c64525aa":"code","5a40a292":"code","6555303e":"code","077c20a9":"code","f79cb75a":"code","c86f8e74":"code","630ec913":"code","5905fe88":"code","2554c6d4":"code","c33a6e62":"code","baa8f3e5":"code","57cb8dd6":"code","f0729f52":"code","02cd2047":"code","7bf30ead":"code","76afb8bc":"code","f57ee801":"code","b4caf0f1":"code","670aad7e":"code","918132b9":"code","f3a153df":"code","7812484b":"code","32e124ef":"code","1301d31f":"code","cc173bd4":"code","d3f6ffcb":"code","29d76d5f":"code","b039620c":"code","8827f99b":"code","181615b0":"code","6f19dd41":"code","ad90e78f":"code","8aaf30b1":"code","9ceb54fb":"code","d776d746":"code","a01e1f67":"code","9e297b1c":"code","1e3959da":"code","90074bd5":"code","a6d88439":"markdown","cded3e4a":"markdown","19e55f32":"markdown","808ef9aa":"markdown","81180758":"markdown","8a1430c2":"markdown","045c9c3e":"markdown","fbd3c592":"markdown","76b20e25":"markdown","03f3e400":"markdown"},"source":{"7721e870":"#GENERAL\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN,\\\nLSTM, GlobalAveragePooling2D, SeparableConv2D, ZeroPadding2D, Convolution2D, ZeroPadding2D,Reshape, Conv2DTranspose, LeakyReLU, GaussianNoise\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.datasets import mnist\nimport keras\n#SKLEARN CLASSIFIER\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom lightgbm import LGBMClassifier, LGBMRegressor\nfrom catboost import CatBoostClassifier, CatBoostRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neural_network import MLPClassifier, MLPRegressor\nfrom sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","4703c657":"Main_JPG_Path = Path(\"..\/input\/mars-orbital\/MarsOrbital\/MarsOrbital\")","f3319b70":"JPG_Path = list(Main_JPG_Path.glob(r\"**\/*.jpg\"))","37e37431":"X_JPG_Path = JPG_Path[0:1500]\nY_JPG_Path = JPG_Path[1500:3000]","6a4e4d1f":"X_JPG_Path_Series = pd.Series(X_JPG_Path,name=\"JPG\").astype(str)","b611b2d6":"Y_JPG_Path_Series = pd.Series(Y_JPG_Path,name=\"JPG\").astype(str)","ee1e5e81":"print(X_JPG_Path_Series.head(-1))","5c56c8ad":"print(Y_JPG_Path_Series.head(-1))","e756f34a":"plt.style.use(\"classic\")","bccab5d4":"example_IMG = cv2.imread(X_JPG_Path_Series[3])\nplt.xlabel(example_IMG.shape)\nplt.ylabel(example_IMG.size)\nplt.imshow(example_IMG)","fb282a82":"example_IMG = cv2.imread(X_JPG_Path_Series[44])\nplt.xlabel(example_IMG.shape)\nplt.ylabel(example_IMG.size)\nplt.imshow(example_IMG)","c64525aa":"example_IMG = cv2.imread(X_JPG_Path_Series[44])\nplt.xlabel(example_IMG.shape)\nplt.xlabel(example_IMG.size)\nplt.imshow(example_IMG)","5a40a292":"example_IMG = cv2.imread(X_JPG_Path_Series[1300])\nplt.xlabel(example_IMG.shape)\nplt.xlabel(example_IMG.size)\nplt.imshow(example_IMG)","6555303e":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(10,10))\n\nfor i,ax in enumerate(axis.flat):\n    IMG_X = plt.imread(X_JPG_Path_Series[i])\n    ax.set_xlabel(IMG_X.shape)\n    ax.set_ylabel(IMG_X.size)\n    ax.imshow(IMG_X,cmap=\"Greys_r\")\nplt.tight_layout()\nplt.show()","077c20a9":"figure = plt.figure(figsize=(10,10))\nIMG_X = cv2.imread(X_JPG_Path_Series[344])\nCanny_X = cv2.Canny(IMG_X,10,100)\nplt.imshow(Canny_X)\nplt.xlabel(Canny_X.shape)\nplt.ylabel(Canny_X.size)","f79cb75a":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(10,10))\n\nfor i,ax in enumerate(axis.flat):\n    IMG_X = cv2.imread(X_JPG_Path_Series[i])\n    Canny_IMG = cv2.Canny(IMG_X,10,100)\n    ax.set_xlabel(Canny_IMG.shape)\n    ax.set_ylabel(Canny_IMG.size)\n    ax.imshow(Canny_IMG)\nplt.tight_layout()\nplt.show()","c86f8e74":"figure = plt.figure(figsize=(10,10))\nIMG_X = cv2.imread(X_JPG_Path_Series[344])\n_,Threshold_X = cv2.threshold(IMG_X,90,255,cv2.THRESH_TOZERO_INV)\nplt.imshow(Threshold_X)\nplt.xlabel(Threshold_X.shape)\nplt.ylabel(Threshold_X.size)","630ec913":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(10,10))\n\nfor i,ax in enumerate(axis.flat):\n    IMG_X = cv2.imread(X_JPG_Path_Series[i])\n    _,Threshold_X = cv2.threshold(IMG_X,90,255,cv2.THRESH_TOZERO_INV)\n    ax.set_xlabel(Threshold_X.shape)\n    ax.set_ylabel(Threshold_X.size)\n    ax.imshow(Threshold_X)\nplt.tight_layout()\nplt.show()","5905fe88":"figure = plt.figure(figsize=(10,10))\nIMG_X = cv2.imread(X_JPG_Path_Series[422],0)\nAdaptive_X = cv2.adaptiveThreshold(IMG_X,200,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,11,2)\nplt.xlabel(Adaptive_X.shape)\nplt.ylabel(Adaptive_X.size)\nplt.imshow(Adaptive_X)","2554c6d4":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(10,10))\n\nfor i,ax in enumerate(axis.flat):\n    IMG_X = cv2.imread(X_JPG_Path_Series[i],0)\n    Adaptive_X = cv2.adaptiveThreshold(IMG_X,200,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,11,2)\n    ax.set_xlabel(Adaptive_X.shape)\n    ax.set_ylabel(Adaptive_X.size)\n    ax.imshow(Adaptive_X)\nplt.tight_layout()\nplt.show()","c33a6e62":"figure = plt.figure(figsize=(10,10))\n\nIMG_X = cv2.imread(X_JPG_Path_Series[25])\nIMG_X = cv2.resize(IMG_X,(180,180))\n_,Thresh_X = cv2.threshold(IMG_X,90,200,cv2.THRESH_TOZERO)\nThresh_X = cv2.resize(Thresh_X,(180,180))\n\nmask = cv2.inRange(IMG_X,IMG_X,Thresh_X)\nSub_Mask = cv2.bitwise_and(IMG_X,IMG_X,mask=mask)\n\nplt.xlabel(Sub_Mask.shape)\nplt.ylabel(Sub_Mask.size)\nplt.imshow(Sub_Mask)","baa8f3e5":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(10,10))\n\nfor i,ax in enumerate(axis.flat):\n    IMG_X = cv2.imread(X_JPG_Path_Series[i])\n    IMG_X = cv2.resize(IMG_X,(180,180))\n    _,Threshold_X = cv2.threshold(IMG_X,90,200,cv2.THRESH_TOZERO)\n    Threshold_X = cv2.resize(Threshold_X,(180,180))\n    mask = cv2.inRange(IMG_X,IMG_X,Threshold_X)\n    Sub_Mask = cv2.bitwise_and(IMG_X,IMG_X,mask=mask)\n    ax.set_xlabel(Sub_Mask.shape)\n    ax.set_ylabel(Sub_Mask.size)\n    ax.imshow(Sub_Mask)\nplt.tight_layout()\nplt.show()","57cb8dd6":"figure = plt.figure(figsize=(10,10))\n\nIMG_X = cv2.imread(X_JPG_Path_Series[25])\nIMG_X = cv2.resize(IMG_X,(180,180))\n_,Thresh_X = cv2.threshold(IMG_X,90,200,cv2.THRESH_TOZERO)\nThresh_X = cv2.resize(Thresh_X,(180,180))\n\nmask = cv2.inRange(IMG_X,IMG_X,Thresh_X)\nSub_Mask = cv2.bitwise_and(IMG_X,IMG_X,mask=mask)\nCanny_IMG = cv2.Canny(Sub_Mask,10,100)\ncontour,_ = cv2.findContours(Canny_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)\nDrawing_Contour = cv2.drawContours(IMG_X,contour,-1,(255,0,0),2)\nplt.xlabel(Drawing_Contour.shape)\nplt.ylabel(Drawing_Contour.size)\nplt.imshow(Drawing_Contour)","f0729f52":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(10,10))\n\nfor i,ax in enumerate(axis.flat):\n    IMG_X = cv2.imread(X_JPG_Path_Series[i])\n    IMG_X = cv2.resize(IMG_X,(180,180))\n    _,Threshold_X = cv2.threshold(IMG_X,90,200,cv2.THRESH_BINARY_INV)\n    Threshold_X = cv2.resize(Threshold_X,(180,180))\n    mask = cv2.inRange(IMG_X,IMG_X,Threshold_X)\n    Sub_Mask = cv2.bitwise_and(IMG_X,IMG_X,mask=mask)\n    Canny_IMG = cv2.Canny(Sub_Mask,10,100)\n    contour,_ = cv2.findContours(Canny_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)\n    Drawing_Contour = cv2.drawContours(IMG_X,contour,-1,(255,0,0),2)\n    ax.set_xlabel(Drawing_Contour.shape)\n    ax.set_ylabel(Drawing_Contour.size)\n    ax.imshow(Drawing_Contour)\nplt.tight_layout()\nplt.show()","02cd2047":"figure = plt.figure(figsize=(10,10))\n\nIMG_X = cv2.imread(X_JPG_Path_Series[225])\nIMG_X = cv2.resize(IMG_X,(180,180))\n_,Thresh_X = cv2.threshold(IMG_X,90,200,cv2.THRESH_TOZERO)\nThresh_X = cv2.resize(Thresh_X,(180,180))\n\nmask = cv2.inRange(IMG_X,IMG_X,Thresh_X)\nSub_Mask = cv2.bitwise_and(IMG_X,IMG_X,mask=mask)\nCanny_IMG = cv2.Canny(Sub_Mask,90,500)\ncontour,_ = cv2.findContours(Canny_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)\nfor cnt in contour:\n    x,y,w,h = cv2.boundingRect(cnt)\n    cv2.rectangle(IMG_X,(x,y),(x+w,y+h),(255,0,0),1)\n\nplt.xlabel(IMG_X.shape)\nplt.ylabel(IMG_X.size)\nplt.imshow(IMG_X)","7bf30ead":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(10,10))\n\nfor i,ax in enumerate(axis.flat):\n    IMG_X = cv2.imread(X_JPG_Path_Series[i])\n    IMG_X = cv2.resize(IMG_X,(180,180))\n    _,Threshold_X = cv2.threshold(IMG_X,90,200,cv2.THRESH_BINARY_INV)\n    Threshold_X = cv2.resize(Threshold_X,(180,180))\n    mask = cv2.inRange(IMG_X,IMG_X,Threshold_X)\n    Sub_Mask = cv2.bitwise_and(IMG_X,IMG_X,mask=mask)\n    Canny_IMG = cv2.Canny(Sub_Mask,10,100)\n    contour,_ = cv2.findContours(Canny_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)\n    \n    for cnt in contour:\n        x,y,w,h = cv2.boundingRect(cnt)\n        cv2.rectangle(IMG_X,(x,y),(x+w,y+h),(255,0,0),1)\n        \n    ax.set_xlabel(IMG_X.shape)\n    ax.set_ylabel(IMG_X.size)\n    ax.imshow(IMG_X)\nplt.tight_layout()\nplt.show()","76afb8bc":"print(X_JPG_Path_Series.shape)","f57ee801":"print(Y_JPG_Path_Series.shape)","b4caf0f1":"Transformated_X = []\n\nfor IMG in X_JPG_Path_Series:\n    X_IMG = cv2.imread(IMG,0)\n    X_IMG = X_IMG \/ 255.\n    X_IMG = cv2.resize(X_IMG,(180,180))\n    Transformated_X.append(X_IMG)","670aad7e":"Transformated_Y = []\n\nfor IMG in Y_JPG_Path_Series:\n    Y_IMG = cv2.imread(IMG,0)\n    Y_IMG = Y_IMG \/ 255.\n    Y_IMG = cv2.resize(Y_IMG,(180,180))\n    Transformated_Y.append(X_IMG)","918132b9":"X_Train = np.asarray(Transformated_X)\nY_Train = np.asarray(Transformated_Y)","f3a153df":"print(X_Train.shape)","7812484b":"print(Y_Train.shape)","32e124ef":"X_Train = X_Train.reshape(-1,180,180,1)","1301d31f":"Y_Train = Y_Train.reshape(-1,180,180,1)","cc173bd4":"print(X_Train.shape)","d3f6ffcb":"print(Y_Train.shape)","29d76d5f":"ex_IMG = X_Train[2]\nplt.xlabel(ex_IMG.shape)\nplt.ylabel(ex_IMG.size)\nplt.imshow(ex_IMG,cmap=\"Greys_r\")","b039620c":"ex_IMG = Y_Train[20]\nplt.xlabel(ex_IMG.shape)\nplt.ylabel(ex_IMG.size)\nplt.imshow(ex_IMG,cmap=\"Greys_r\")","8827f99b":"encoder = Sequential()\nencoder.add(Flatten(input_shape=(180,180,1)))\nencoder.add(Dense(2500,activation=\"relu\"))\nencoder.add(Dense(1400,activation=\"relu\"))\nencoder.add(Dense(500,activation=\"relu\"))\nencoder.add(Dense(400,activation=\"relu\"))\nencoder.add(Dense(300,activation=\"relu\"))\nencoder.add(Dense(250,activation=\"relu\"))\nencoder.add(Dense(200,activation=\"relu\"))\nencoder.add(Dense(150,activation=\"relu\"))\nencoder.add(Dense(100,activation=\"relu\"))\nencoder.add(Dense(50,activation=\"relu\"))\nencoder.add(Dense(25,activation=\"relu\"))\nencoder.add(Dense(15,activation=\"relu\"))","181615b0":"print(encoder.summary())","6f19dd41":"decoder = Sequential()\ndecoder.add(Dense(25,input_shape=[15],activation=\"relu\"))\ndecoder.add(Dense(50,activation=\"relu\"))\ndecoder.add(Dense(100,activation=\"relu\"))\ndecoder.add(Dense(150,activation=\"relu\"))\ndecoder.add(Dense(200,activation=\"relu\"))\ndecoder.add(Dense(250,activation=\"relu\"))\ndecoder.add(Dense(300,activation=\"relu\"))\ndecoder.add(Dense(400,activation=\"relu\"))\ndecoder.add(Dense(500,activation=\"relu\"))\ndecoder.add(Dense(1400,activation=\"relu\"))\ndecoder.add(Dense(2500,activation=\"relu\"))\ndecoder.add(Dense(32400,activation=\"sigmoid\"))\ndecoder.add(Reshape([180,180,1]))","ad90e78f":"print(decoder.summary())","8aaf30b1":"Auto_Encoder = Sequential([encoder,decoder])","9ceb54fb":"print(Auto_Encoder.summary())","d776d746":"Auto_Encoder.compile(loss=\"binary_crossentropy\",optimizer=\"adam\",metrics=[\"accuracy\"])","a01e1f67":"AE_Model = Auto_Encoder.fit(X_Train,X_Train,epochs=20)","9e297b1c":"Predict_Y = Auto_Encoder.predict(Y_Train[0:10])","1e3959da":"Single_P = Predict_Y[0]","90074bd5":"print(\"NORMAL\")\nplt.imshow(Y_Train[0])\nplt.show()\nprint(\"Auto Encoder\")\nplt.imshow(Single_P)","a6d88439":"# DATA PROCESS","cded3e4a":"# PATH & LABEL PROCESS","19e55f32":"#### GENERAL","808ef9aa":"#### VISION METHOD","81180758":"#### TO SERIES","8a1430c2":"# AUTO ENCODER PROCESS","045c9c3e":"# PACKAGES AND LIBRARIES","fbd3c592":"#### MAIN PATH","76b20e25":"# VISUALIZATION","03f3e400":"#### JPG PATH"}}