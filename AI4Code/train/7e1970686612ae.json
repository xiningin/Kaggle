{"cell_type":{"cd0d8078":"code","9a776e36":"code","2b50795b":"code","857a6a59":"code","9d7ae38e":"code","6231a26e":"code","c970742f":"code","a711d2d6":"code","0b17684e":"code","882349f3":"code","36edf1ca":"code","2f3f7035":"code","073cba49":"code","e621e1d0":"code","ae9ee16e":"code","de383ee3":"code","0cf94bc7":"code","0a90c68d":"code","77fdac38":"markdown"},"source":{"cd0d8078":"import os\nprint(os.listdir(\"..\/input\"))","9a776e36":"!pip3 install git+https:\/\/github.com\/fastai\/fastai.git","2b50795b":"!pip3 install git+https:\/\/github.com\/pytorch\/pytorch","857a6a59":"from fastai import *\nfrom fastai.tabular import * \n","9d7ae38e":"import fastai; \nfastai.show_install(1)","6231a26e":"from sklearn.metrics import accuracy_score \nfrom sklearn.utils import shuffle\nnp.random.seed(114)","c970742f":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\ntrain_df.sample(3)","a711d2d6":"def class_age(age):\n    if age <= 15: return 'child'  # was 10\n    #elif age <= 21: return 'adult'\n    elif age <= 60: return 'young'\n    else: return 'old'\n    \n# can also code ticket\ndef class_fare(fare):\n    if fare <= 15.0: return 'third'\n    elif fare <= 100.0: return 'second'\n    else: return 'first'","0b17684e":"# dealing with nulls \n# 1 Fare in test_df (all_df[all_df['Fare'].isnull()]), use media = 14.55 from all_df.describe()\nmask = test_df['Fare'].isnull()\ntest_df.loc[mask, 'Fare'] = 14.55\n# 2 embarked in train_df (all_df[all_df['Embarked'].isnull()]) survived is not null, so train \nmask2 = train_df['Embarked'].isnull()\ntrain_df.loc[mask2, 'Embarked'] = 'S'\n# 263 ages, use median per sex: all_df.groupby('Sex').median()['Age'] => F 27, M: 28 \nmask3 = (train_df['Age'].isnull()) & (train_df['Sex'] == 'female')\ntrain_df.loc[mask3, 'Age'] = 27.0\nmask4 = (train_df['Age'].isnull()) & (train_df['Sex'] == 'male')\ntrain_df.loc[mask4, 'Age'] = 28.0\nmask5 = (test_df['Age'].isnull()) & (test_df['Sex'] == 'female')\ntest_df.loc[mask5, 'Age'] = 27.0\nmask6 = (test_df['Age'].isnull()) & (test_df['Sex'] == 'male')\ntest_df.loc[mask6, 'Age'] = 28.0","882349f3":"for df in [train_df, test_df]:\n    df['AgeGroup'] = df['Age'].apply(lambda x: class_age(x))\n    df['FareGroup'] = df['Fare'].apply(lambda x: class_fare(x))\n    df['Alone'] = df['SibSp'] + df['Parch'] == 0\n    df['SibCh'] = df['SibSp'] * df['Parch'] > 0\n    df['Relatives'] = df['SibSp'] + df['Parch']\n    \ntrain_df.corr()","36edf1ca":"train_df = shuffle(train_df)\ndep_var = 'Survived'\ncat_names = ['Pclass', 'Sex', 'Alone', 'SibCh', 'Embarked'] # 'AgeGroup', 'FareGroup',\ncont_names = ['Age', 'Fare', 'Relatives' ] # 'Parch', 'SibSp'\nprocs = [FillMissing, Categorify, Normalize]","2f3f7035":"test = TabularList.from_df(test_df, cat_names=cat_names, cont_names=cont_names, procs=procs)\ndata = (TabularList.from_df(train_df, path='.', cat_names=cat_names, cont_names=cont_names, procs=procs)\n                           #.split_by_idx(list(range(len(train_df)-225,len(train_df))))\n                            .split_by_idx(valid_idx=range(len(train_df)-175,len(train_df)))\n                           .label_from_df(cols=dep_var)\n                           .add_test(test, label=0)\n                           .databunch())","073cba49":"data.show_batch(3)","e621e1d0":"emb_szs={'Pclass':6,  'Alone': 4, 'Sex': 4, 'Embarked':6, 'SibCh':4}\nlearn = tabular_learner(data, layers=[60,40], emb_szs= emb_szs,  metrics=accuracy) \nlearn.lr_find()\nlearn.recorder.plot()","ae9ee16e":"lr = 5e-2\nlearn.fit_one_cycle(4, lr)","de383ee3":"learn.validate()","0cf94bc7":"predictions, *_ = learn.get_preds(DatasetType.Test)\nlabels = np.argmax(predictions, 1)","0a90c68d":"res_df = pd.DataFrame({'PassengerId': test_df['PassengerId'], 'Survived': labels})\nres_df.to_csv('titanic-83.csv', index=False)","77fdac38":"Note: this is a very basic kernel usong FastAI version 1.x (latest) - apparently only installs on cpu on Kaggle.  \nTorch installation seems to take long time. \nSome features were derived and parameters are not fully optimized.  \nSome code uses 'poor practices' :-)"}}