{"cell_type":{"eccf6f58":"code","0e41d0b9":"code","b8b95650":"code","4134be4c":"code","38999eb9":"code","cd6e1b89":"code","e19c5259":"code","c318e38d":"code","ba6c2763":"code","6d865a97":"code","1edbd8fd":"code","7481536b":"code","a7e7e249":"code","059fcb07":"code","4d0e6103":"code","94336336":"code","4c61fecc":"code","68914538":"code","fa4166b9":"code","6384e033":"markdown","3bde8bc8":"markdown","d98ea828":"markdown"},"source":{"eccf6f58":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0e41d0b9":"import pandas as pd\nimport numpy as np\ndata = pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\nfeatures=data.columns[:-1]\ndata.head()","b8b95650":"data.shape","4134be4c":"data.info()\nimport seaborn as sns\nsns.histplot(data,x=\"output\")","38999eb9":"nulls = data.isna().sum()\nnulls","cd6e1b89":"# output variable dataframe\ny = data.iloc[:,-1].values\ny","e19c5259":"\ntrain = data.iloc[:,:-1].values\ntrain","c318e38d":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train, y, test_size=0.2, random_state=42)\nprint(X_test.shape)","ba6c2763":"# from sklearn.ensemble import RandomForestClassifier\n# random = RandomForestClassifier(n_estimators=100)\n# random.fit(X_train,y_train)\nfrom xgboost import XGBClassifier\nxgb = XGBClassifier()\nxgb.fit(X_train, y_train)","6d865a97":"y_pred = xgb.predict(X_test)\ny_pred","1edbd8fd":"from sklearn.metrics import accuracy_score, classification_report\nprint(classification_report(y_test, y_pred))","7481536b":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, y_pred)","a7e7e249":"# from sklearn.feature_extraction import DictVectorizer\n# vec = DictVectorizer()\n# booster = xgb.get_booster()\n# # original_feature_names = booster.feature_names\n# features = vec.get_feature_names()\n# # print(booster.get_dump()[0])\n# # recover original feature names\n# # booster.feature_names = original_feature_names\n# # original_feature_names\n# features","059fcb07":"import eli5\nfrom eli5 import formatters\nfrom IPython.display import display\n# eli5.show_weights(xgb)\ndisplay(eli5.explain_weights(xgb,feature_names = list(features),importance_type='gain')) #Once can replace gain with cover, weight; default is gain","4d0e6103":"feature_importance = formatters.as_dataframe.explain_weights_df(xgb,feature_names = list(features),importance_type='gain')\nfeature_importance","94336336":"features = list(features)\nfeatures","4c61fecc":"for i in range(len(X_test)):\n    display(eli5.show_prediction(xgb,X_test[i],show_feature_values=True,feature_names=features))","68914538":"import matplotlib.pyplot as plt\n%matplotlib inline\nfor i in range(len(X_test)):\n    display(eli5.formatters.as_dataframe.explain_prediction_df(xgb,X_test[i],feature_names=features,target_names=['0','1']))","fa4166b9":"# import lime\n# from lime import lime_tabular\n# exp = lime_tabular.LimeTabularExplainer(X_train,mode='classification',training_labels=features,)\n# e = exp.explain_instance(X_test[60],xgb.predict_proba,num_features=13)\n# e.as_list()","6384e033":"# **Train XGBoost Model**","3bde8bc8":"# **Model Explainability\/Interpretation with Eli5","d98ea828":"# Predictions"}}