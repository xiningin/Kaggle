{"cell_type":{"aacc87b8":"code","233fd363":"code","e145e013":"code","75e1a80e":"code","125b1775":"code","daf9f2cd":"code","fe27130a":"code","fd7dfee1":"markdown"},"source":{"aacc87b8":"import numpy as np \nimport pandas as pd\nimport os\n\nfrom keras.preprocessing import image\nfrom keras.applications.imagenet_utils import preprocess_input\n#from keras.applications.vgg19 import preprocess_input\n#from keras.applications.mobilenet import preprocess_input\n\n# time measuring\nimport time","233fd363":"print(os.listdir(\"..\/input\"))","e145e013":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntrain_df.head()","75e1a80e":"from joblib import Parallel, delayed\nimport multiprocessing\n\ndef preprocess_image(index, data, dataset):\n    fig = data.iloc[index]['Image']\n    #load images into images of size 100x100x3\n    img = image.load_img(\"..\/input\/\"+dataset+\"\/\"+fig, target_size=(100, 100, 3))\n    x = image.img_to_array(img)\n    x = preprocess_input(x)\n    \n    return x\n    \n\ndef prepareImages_parallel(data, m, dataset):\n    print(\"Preparing images\")\n    X_train = np.zeros((m, 100, 100, 3))  \n    X_train = Parallel(n_jobs=-1, prefer=\"threads\") (delayed(preprocess_image) \n                                        (i, data, dataset) for i in range(len(data)))\n    \n    return X_train","125b1775":"start = time.time()\nX = prepareImages_parallel(train_df, train_df.shape[0], \"train\")\nX = np.array(X, dtype='float64')\nX \/= 255\nprint('multithreaded:', time.time() - start)","daf9f2cd":"def prepareImages(data, m, dataset):\n    print(\"Preparing images\")\n    X_train = np.zeros((m, 100, 100, 3))\n    count = 0\n    \n    for fig in data['Image']:\n        #load images into images of size 100x100x3\n        img = image.load_img(\"..\/input\/\"+dataset+\"\/\"+fig, target_size=(100, 100, 3))\n        x = image.img_to_array(img)\n        x = preprocess_input(x)\n\n        X_train[count] = x\n        if (count%500 == 0):\n            print(\"Processing image: \", count+1, \", \", fig)\n        count += 1\n    \n    return X_train","fe27130a":"start = time.time()\nX = prepareImages(train_df, train_df.shape[0], \"train\")\nX \/= 255\nprint('single-threaded:', time.time() - start)","fd7dfee1":"This snippet is a multithreaded drop-in replacement for the prepareImages() method used in several kernels. Runs a lot quicker on my threadripper. I compard the results and they match perfectly."}}