{"cell_type":{"3377b9e1":"code","fa231f79":"code","9374d881":"code","4875dec4":"code","92883788":"code","d1a42747":"code","74dd4429":"code","adafdad1":"code","6fcaa345":"code","4a56d3cf":"code","032333f9":"code","cfdbd161":"code","0e8fab4b":"code","2964b6f6":"code","098f1004":"code","2a8974c8":"code","759f34af":"code","fad7e17b":"code","ad3282b8":"code","61f10a53":"code","1c80b950":"code","c7efa80a":"code","dd0a4811":"code","b5a18aed":"code","9d4c0578":"code","10f350d8":"code","e00e9240":"markdown","e05c7684":"markdown","ecf913d9":"markdown","861172ea":"markdown","8c5f3a7b":"markdown","51eae742":"markdown","a43a1603":"markdown","643be083":"markdown","fe5e032f":"markdown","f77cbe10":"markdown","e7125166":"markdown","3a32c8f4":"markdown","bd633f22":"markdown","234510bc":"markdown","6fca7c9e":"markdown","88bb34e1":"markdown","6d6d11b7":"markdown","649d2ade":"markdown","d691ef43":"markdown","9a1efaa9":"markdown","aa3c0177":"markdown","38430b85":"markdown","7d6b15ae":"markdown","7fc0609e":"markdown","e869282e":"markdown","fbce36af":"markdown","ef940e16":"markdown","e1aaa848":"markdown","57ee012b":"markdown","3e6c0837":"markdown","ad60d2b9":"markdown","15413213":"markdown","7424dfe2":"markdown","df401efe":"markdown","cc22d528":"markdown","96ad83ef":"markdown","3b7e8739":"markdown","806d8e05":"markdown"},"source":{"3377b9e1":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom IPython.display import display\n\ndf = pd.read_csv('..\/input\/survey.csv')\n\n############################## \n# \u6b20\u6e2c\u5024\u306e\u51e6\u7406\n############################## \ndef replace_nan(df, c, replace):\n    df.loc[df[c].isnull(), c] = replace\n    return df\n\n# \u5404\u5909\u6570\u306b\u3064\u3044\u3066\u6b20\u6e2c\u5024\u51e6\u7406\u3002\ndf = replace_nan(df, 'state', 'None')\ndf = replace_nan(df, 'self_employed', 'No')\ndf = replace_nan(df, 'work_interfere', 'Never')\n\n# \u5909\u6570comments\u306b\u3064\u3044\u3066\u306e\u6b20\u6e2c\u5024\u51e6\u7406\u3002\u30b3\u30e1\u30f3\u30c8\u306e\u5185\u5bb9\u306b\u95a2\u4fc2\u306a\u304f\u3001\u6b20\u6e2c\u5024\u306f\u4e00\u5f8b0\uff08\u30b3\u30e1\u30f3\u30c8\u7121\u3057\uff09\u3068\u3057\u305f\u3002\ndf = replace_nan(df, 'comments', 0)","fa231f79":"############################## \n# \u7570\u5e38\u5024\u306e\u51e6\u7406\n############################## \n# Age:\u8ca0\u306e\u5024\u3001100\u3092\u8d85\u904e\u3059\u308b\u5024\u306f\u7570\u5e38\u5024\u3068\u3057\u3001\u30c7\u30fc\u30bf\u884c\u524a\u9664\u3002\nc = 'Age'\ndf.drop(df.index[(df[c] < 0) | (100 < df[c])], inplace=True)\n\n# Gender:\u7537\u6027\u3092M\u3001\u5973\u6027\u3092F\u3001\u4e21\u6027\u3092H\u306b\u540d\u5bc4\u305b\u3002\u89e3\u91c8\u4e0d\u660e\u306a\u5165\u529b\u5024\u306fNaN\u306b\u3057\u3066\u30c7\u30fc\u30bf\u884c\u524a\u9664\u3002\nc = 'Gender'\nreplace_map = {'Female':'F','M':'M','Male':'M','male':'M','female':'F','m':'M','Male-ish':'M','maile':'M','Trans-female':'F','Cis Female':'F','F':'F','something kinda male?':np.nan,'Cis Male':'M','Woman':'F','f':'F','Mal':'M','Male (CIS)':'M','queer\/she\/they':'H','non-binary':'H','Femake':'F','woman':'F','Make':'M','Nah':np.nan,'All':'H','Enby':'H','fluid':'H','Genderqueer':'H','Female ':'F','Androgyne':'H','Agender':'H','cis-female\/femme':'F','Guy (-ish) ^_^':'M','male leaning androgynous':'H','Male ':'M','Man':'M','Trans woman':'F','msle':'M','Neuter':'H','Female (trans)':'F','queer':'H','Female (cis)':'F','Mail':'M','cis male':'M','A little about you':np.nan,'Malr':'M','p':np.nan,'femail':'F','Cis Man':'M','ostensibly male, unsure what that really means':np.nan}\ndf[c].replace(replace_map, inplace=True)\ndf.drop(df.index[df[c].isnull()], inplace=True)","9374d881":"############################## \n# \u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\n############################## \n# \u30b3\u30e1\u30f3\u30c8\u6b04\uff1a\u7a7a\u3067\u306a\u3051\u308c\u30701\uff08\u30b3\u30e1\u30f3\u30c8\u3042\u308a\uff09\u3001\u7a7a\u306a\u3089\u30700\u306b\u7f6e\u63db\u3002\n# \u306a\u304a\u3001Notebook\u306e\u30bb\u30eb\u3092\u9023\u7d9a\u3057\u3066\u5b9f\u884c\u3057\u3066\u3082\u30a8\u30e9\u30fc\u306a\u3089\u306a\u3044\u3088\u3046\u306b\uff12\u91cd\u5b9f\u884c\u3092\u9632\u6b62\u3057\u3066\u304a\u304f\u3002\n# \u203b\u4e00\u5ea6\u5b9f\u884c\u3059\u308b\u3068\u5909\u6570\u306e\u578b\u304c\u81ea\u52d5\u7684\u306bbool\u578b\u306b\u5909\u308f\u308b\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001\u5143\u306eobject\u578b\u3067\u3042\u308b\u3068\u304d\u3060\u3051\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u5236\u5fa1\u3002\nc = 'comments'\ndf.loc[(df[c]!=0)&(df[c].str.strip()!=''), c] = 1\n\n# 01\u5909\u63db\uff08\u5bfe\u8c61\u306f2\u5024\u5909\u6570\uff09\nreplace_map = {'Yes':1, 'No':0}\n# \u306a\u304a\u3001Notebook\u306e\u30bb\u30eb\u3092\u9023\u7d9a\u3057\u3066\u5b9f\u884c\u3057\u3066\u3082\u30a8\u30e9\u30fc\u306a\u3089\u306a\u3044\u3088\u3046\u306b\uff12\u91cd\u5b9f\u884c\u3092\u9632\u6b62\u3057\u3066\u304a\u304f\u3002\n# \u203b\u4e00\u5ea6\u5b9f\u884c\u3059\u308b\u3068\u5909\u6570\u306e\u578b\u304c\u81ea\u52d5\u7684\u306bint64\u578b\u306b\u5909\u308f\u308b\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001\u5143\u306eobject\u578b\u3067\u3042\u308b\u3068\u304d\u3060\u3051\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u5236\u5fa1\u3002\n# print(df.dtypes['treatment'])\nif (df.dtypes['treatment'] == 'object'):\n    df['treatment'].replace(replace_map, inplace=True)\n    df['family_history'].replace(replace_map, inplace=True)\n    df['obs_consequence'].replace(replace_map, inplace=True)\n\n# \u8aac\u660e\u5909\u6570\u3068\u3057\u306a\u304b\u3063\u305f\u5909\u6570\u306f\u524a\u9664\u3002\ndf.drop(['Timestamp','Age','Country','self_employed','no_employees','remote_work','tech_company','wellness_program','seek_help','mental_health_consequence','phys_health_consequence','coworkers','supervisor','mental_health_interview','phys_health_interview','mental_vs_physical'], axis=1, inplace=True)\n\n# onehot-encoding\u306e\u6e96\u5099\n# \u305f\u3060\u3057\u3001onehot-encoding\u306e\u524d\u306b\u3001\u65b0\u898f\u5909\u6570\u540d\u3092\"\uff1c\u5143\u306e\u5909\u6570\u540d\uff1e_\uff1c\u30ab\u30c6\u30b4\u30ea\u5024\uff1e\"\u3068\u3059\u308b\u305f\u3081\u306b\u30b9\u30da\u30fc\u30b9\u3084\u30b7\u30f3\u30b0\u30eb\u30b3\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u542b\u3080\u30ab\u30c6\u30b4\u30ea\u5024\u3092\u9069\u5207\u306b\u5909\u63db\u3057\u3066\u304a\u304f\u3002\n# \u5909\u6570benefits\u3001anonymity\nreplace_map={\"Don't know\":'DontKnow'}\ndf['benefits'].replace(replace_map, inplace=True)\ndf['anonymity'].replace(replace_map, inplace=True)\n\n# \u5909\u6570care_options\nreplace_map={\"Not sure\":'NotSure'}\ndf['care_options'].replace(replace_map, inplace=True)\n\n# \u5909\u6570leave\nreplace_map={'Very easy':'VeryEasy', 'Somewhat easy':'SomewhatEasy', 'Somewhat difficult':'SomewhatDifficult', 'Very difficult':'VeryDifficult', \"Don't know\":'DontKnow'}\ndf['leave'].replace(replace_map, inplace=True)\n\n# onehot-encoding\ndef create_dummy_var(orgdf, orgcol):\n    tempcol = orgcol + '_str'\n    # \u4e00\u6642\u5217\u3092\u4f5c\u308b\u3002\u5024\u306f\uff1c\u5143\u306e\u5217\u540d\uff1e_\uff1c\u30ab\u30c6\u30b4\u30ea\u5024\uff1e\n    orgdf[tempcol] = orgdf[orgcol].astype(str).map(lambda x : orgcol + '_' + x)\n    # \u4e00\u6642\u5217\u306e\u5024\u3092\u30c0\u30df\u30fc\u5909\u6570\u3068\u3057\u3066\u8ffd\u52a0\u3059\u308b\u3002\n    newdf = pd.concat([orgdf, pd.get_dummies(orgdf[tempcol])], axis=1)\n    # \u4e00\u6642\u5217\u3068\u5143\u306e\u5217\u306f\u524a\u9664\u3059\u308b\u3002\n    newdf.drop([tempcol, orgcol], axis=1, inplace=True)\n    return newdf\n\n# onehot-encoding\u5b9f\u884c\u3002\ndf_fin = df # \u6700\u521d\u306f\u5143\u306edf\u3092\u5f15\u6570\u3068\u3057\u3066\u3044\u308b\u306e\u3067\u6ce8\u610f\u3002\ndf_fin = create_dummy_var(df_fin, 'Gender')\ndf_fin = create_dummy_var(df_fin, 'state')\ndf_fin = create_dummy_var(df_fin, 'work_interfere')\ndf_fin = create_dummy_var(df_fin, 'benefits')\ndf_fin = create_dummy_var(df_fin, 'care_options')\ndf_fin = create_dummy_var(df_fin, 'anonymity')\ndf_fin = create_dummy_var(df_fin, 'leave')\n\n# \u5f8c\u3005\u306e\u898b\u6613\u3055\u306e\u305f\u3081\u306b\u76ee\u7684\u5909\u6570treatment\u3092\u4e00\u756a\u5de6\u306b\u79fb\u52d5\u3057\u3066\u304a\u304f\u3002\ncols = df_fin.columns.tolist()\ncols.remove('treatment')\ncols.insert(0, 'treatment')\ndf_fin = df_fin[cols]\n#df_fin.head()","4875dec4":"df_fin.corr().style.background_gradient().format('{:.2f}')","92883788":"df_fin.drop(['Gender_F','work_interfere_Never','benefits_DontKnow','care_options_No','anonymity_DontKnow'], axis=1, inplace=True)\n#display(df_fin)","d1a42747":"# \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u884c\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u3066\u304a\u304f\u3002\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\n\n##############################\n# \u30e2\u30c7\u30eb\u751f\u6210\u30fb\u3042\u3066\u306f\u3081\u5b9f\u884c\u30e1\u30bd\u30c3\u30c9\n# \u4e0e\u3048\u3089\u308c\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u30c7\u30fc\u30bf\u3067\u5b66\u7fd2\uff08\u30e2\u30c7\u30eb\u4f5c\u6210\uff09\u3068\u4e88\u6e2c\uff08\u3042\u3066\u306f\u3081\uff09\u3092\u884c\u3044\u3001\u6df7\u540c\u884c\u5217\u3092\u8868\u793a\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u884c\u3046\u3002\n##############################\ndef go_fit_pred(algo, df):\n    # \u8aac\u660e\u5909\u6570\u3092X\u3001\u76ee\u7684\u5909\u6570\u3092y\u3068\u3057\u3066\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u5b9f\u884c\u3002\n    X = df.drop(['treatment'], axis=1)\n    y = df['treatment']\n    algo.fit(X, y)\n    # print(algo.coef_)\n    # print(algo.intercept_)\n\n    # \u6df7\u540c\u884c\u5217\n    # \u771f\u306e\u5024\u306e\u62bd\u51fa\n    y_true = df['treatment'].values\n    # \u4e88\u6e2c\u5024\u306e\u7b97\u51fa\u3002\u305f\u3060\u3057\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u306f\u306a\u304f\u5143\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u3063\u305f\u7b97\u51fa\u3002\n    y_pred = algo.predict(X)\n    # \u306a\u304a\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6df7\u540c\u884c\u5217\u3067\u306f\u884c\u3001\u5217\u3068\u3082\u8868\u793a\u9806\u304c[0(\u9670\u6027), 1(\u967d\u6027)]\u3068\u306a\u3063\u3066\u7406\u89e3\u3057\u3065\u3089\u3044\u306e\u3067\u3001\u884c\u3001\u5217\u3068\u3082[1(\u967d\u6027),0(\u9670\u6027)]\u306e\u9806\u306b\u5909\u66f4\u3002\n    confmat = confusion_matrix(y_true=y_true, y_pred=y_pred, labels=[1, 0])\n    print('\u884c\u3001\u5217\u3068\u3082\u306b[1(\u967d\u6027),0(\u9670\u6027)]\u306e\u9806\u306b\u76f4\u3057\u305f\u6df7\u540c\u884c\u5217:\\r\\n{}'.format(confmat))\n\n    # \u5206\u985e\u30ec\u30dd\u30fc\u30c8\n    print('')\n    print('\u5206\u985e\u30ec\u30dd\u30fc\u30c8:')\n    report = classification_report(y_true, y_pred, digits=3) # \u5c0f\u6570\u70b9\u4ee5\u4e0b3\u6841\u307e\u3067\u8868\u793a\n    print(report)\n    \n    # \u30c7\u30fc\u30bf\u304c\u53cd\u6620\u3055\u308c\u305f\u30e2\u30c7\u30eb\u3092\u8fd4\u3059\n    return algo","74dd4429":"from sklearn.tree import DecisionTreeClassifier, export_graphviz\nclf = DecisionTreeClassifier(criterion=\"gini\", max_depth=None, min_samples_split=3, min_samples_leaf=3, random_state=1234)\nclf = go_fit_pred(clf, df_fin)","adafdad1":"# \u91cd\u8981\u5ea6\u306e\u8868\u793a\n# scikit-learn\u3067\u7b97\u51fa\u3055\u308c\u308b\u91cd\u8981\u5ea6\u306f\u3001\u3042\u308b\u8aac\u660e\u5909\u6570\u306b\u3088\u308b\u4e0d\u7d14\u5ea6\u306e\u6e1b\u5c11\u91cf\u5408\u8a08\u3067\u3042\u308b\u3002\nprint(clf.feature_importances_)\ncolumns=df_fin.drop('treatment', axis=1).columns\npd.DataFrame(clf.feature_importances_, index=columns).plot.bar(figsize=(14,2))\nplt.ylabel(\"Importance\")\nplt.xlabel(\"Features\")\nplt.show()","6fcaa345":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=10, max_depth=2, criterion=\"gini\", min_samples_leaf=2, min_samples_split=2, random_state=1234)\ngo_fit_pred(rf, df_fin)","4a56d3cf":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=5) # n_neighbors\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u304c5\ngo_fit_pred(knn, df_fin)","032333f9":"from sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\n\n############################## \n# \u30c7\u30fc\u30bf\u5206\u5272\n############################## \nX, y = df_fin.drop(['treatment'], axis=1), df_fin['treatment']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1234)\n#display(X_train)","cfdbd161":"############################## \n# \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u5b9f\u884c\u30e1\u30bd\u30c3\u30c9\n############################## \nfrom sklearn.metrics import classification_report\ndef go_grid(estimator, param_grid, cv, X_train, X_test, y_train, y_test):\n    gs = GridSearchCV(estimator=estimator, param_grid=param_grid, cv=cv, n_jobs=4) # \u51e6\u7406\u6642\u9593\u77ed\u7e2e\u306e\u305f\u3081\u4e26\u5217\u5ea6\u3082\u6307\u5b9a\u3002\n    gs.fit(X_train, y_train)\n    print('Best Params  : {0}'.format(gs.best_params_)) # \u6700\u826f\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n    print('Best Score   : %.3f' % gs.best_score_) # \u6700\u826f\u30e2\u30c7\u30eb\u306e\u5e73\u5747\u30b9\u30b3\u30a2\n    print('Test Accuracy: %.3f' % gs.best_estimator_.score(X_test, y_test)) # \u6700\u826f\u30e2\u30c7\u30eb\u306b\u3088\u308b\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6b63\u89e3\u7387=(TP+TN)\/(TP+TN+FP+FN)\n    print('Classification Report:') # \u6700\u826f\u30e2\u30c7\u30eb\u306b\u3088\u308b\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5206\u985e\u30ec\u30dd\u30fc\u30c8\n    y_pred = gs.best_estimator_.predict(X_test)\n    report = classification_report(y_test, y_pred, digits=3) # \u5c0f\u6570\u70b9\u4ee5\u4e0b3\u6841\u307e\u3067\u8868\u793a\n    print(report)","0e8fab4b":"%%time\n# Kaggle\u4e0a\u3067\u306e\u51e6\u7406\u6642\u9593\u77ed\u7e2e\u306e\u305f\u3081\u3001\u30ed\u30fc\u30ab\u30eb\u3067\u3044\u308d\u3044\u308d\u8a66\u3057\u305f\u7d50\u679c\u3067\u7bc4\u56f2\u3092\u7d5e\u3063\u305f\u3002\nparam_grid={\n    'penalty':['l1', 'l2'],\n    'C':np.arange(1.0, 2.1, 0.1)\n}\ngo_grid(LogisticRegression(), param_grid, 5, X_train, X_test, y_train, y_test)","2964b6f6":"%%time\n# Kaggle\u4e0a\u3067\u306e\u51e6\u7406\u6642\u9593\u77ed\u7e2e\u306e\u305f\u3081\u3001\u30ed\u30fc\u30ab\u30eb\u3067\u3044\u308d\u3044\u308d\u8a66\u3057\u305f\u7d50\u679c\u3067\u7bc4\u56f2\u3092\u7d5e\u3063\u305f\u3002\nparam_grid={\n    'criterion':['gini', 'entropy'], \n    'max_depth':np.arange(5,11), \n    'min_samples_split':np.arange(2,6), \n    'min_samples_leaf':np.arange(11,21),\n    'random_state':[1234]\n}\ngo_grid(DecisionTreeClassifier(), param_grid, 5, X_train, X_test, y_train, y_test)","098f1004":"%%time\n# Kaggle\u4e0a\u3067\u306e\u51e6\u7406\u6642\u9593\u77ed\u7e2e\u306e\u305f\u3081\u3001\u30ed\u30fc\u30ab\u30eb\u3067\u3044\u308d\u3044\u308d\u8a66\u3057\u305f\u7d50\u679c\u3067\u7bc4\u56f2\u3092\u7d5e\u3063\u305f\u3002 \nparam_grid={\n    'n_estimators':np.arange(16,21),\n    'criterion':['entropy'],\n    'max_depth':np.arange(16,21),\n    'min_samples_split':np.arange(11,16),\n    'min_samples_leaf':[1], \n    'random_state':[1234]\n}\ngo_grid(RandomForestClassifier(), param_grid, 5, X_train, X_test, y_train, y_test)\n","2a8974c8":"%%time\nparam_grid={\n    'n_neighbors':np.arange(1,11), \n}\ngo_grid(KNeighborsClassifier(), param_grid, 5, X_train, X_test, y_train, y_test)","759f34af":"def go_grid_with_precision(estimator, param_grid, cv, X_train, X_test, y_train, y_test):\n    gs = GridSearchCV(estimator=estimator, param_grid=param_grid, cv=cv, scoring='precision', n_jobs=4) # \u51e6\u7406\u6642\u9593\u77ed\u7e2e\u306e\u305f\u3081\u4e26\u5217\u5ea6\u3082\u6307\u5b9a\u3002\n    gs.fit(X_train, y_train)\n    print('Best Params  : {0}'.format(gs.best_params_))\n    print('Best Score   : %.3f' % gs.best_score_)\n    print('Test Accuracy: %.3f' % gs.best_estimator_.score(X_test, y_test))\n    print('Classification Report:')\n    y_pred = gs.best_estimator_.predict(X_test)\n    report = classification_report(y_test, y_pred, digits=3) # \u5c0f\u6570\u70b9\u4ee5\u4e0b3\u6841\u307e\u3067\u8868\u793a\n    print(report)","fad7e17b":"%%time\n# Kaggle\u4e0a\u3067\u306e\u51e6\u7406\u6642\u9593\u77ed\u7e2e\u306e\u305f\u3081\u3001\u30ed\u30fc\u30ab\u30eb\u3067\u3044\u308d\u3044\u308d\u8a66\u3057\u305f\u7d50\u679c\u3067\u7bc4\u56f2\u3092\u7d5e\u3063\u305f\u3002\nparam_grid={\n    'penalty':['l1', 'l2'],\n    'C':np.arange(1.0, 2.1, 0.1)\n}\ngo_grid_with_precision(LogisticRegression(), param_grid, 5, X_train, X_test, y_train, y_test)","ad3282b8":"%%time\n# Kaggle\u4e0a\u3067\u306e\u51e6\u7406\u6642\u9593\u77ed\u7e2e\u306e\u305f\u3081\u3001\u30ed\u30fc\u30ab\u30eb\u3067\u3044\u308d\u3044\u308d\u8a66\u3057\u305f\u7d50\u679c\u3067\u7bc4\u56f2\u3092\u7d5e\u3063\u305f\u3002\nparam_grid={\n    'criterion':['gini', 'entropy'], \n    'max_depth':np.arange(5,11), \n    'min_samples_split':np.arange(2,6), \n    'min_samples_leaf':np.arange(1,6),\n    'random_state':[1234]\n}\ngo_grid_with_precision(DecisionTreeClassifier(), param_grid, 5, X_train, X_test, y_train, y_test)","61f10a53":"%%time\n# Kaggle\u4e0a\u3067\u306e\u51e6\u7406\u6642\u9593\u77ed\u7e2e\u306e\u305f\u3081\u3001\u30ed\u30fc\u30ab\u30eb\u3067\u3044\u308d\u3044\u308d\u8a66\u3057\u305f\u7d50\u679c\u3067\u7bc4\u56f2\u3092\u7d5e\u3063\u305f\u3002 \nparam_grid={\n    'n_estimators':np.arange(11,15), \n    'criterion':['entropy'], \n    'max_depth':np.arange(11,15),\n    'min_samples_split':np.arange(11,15), # min_samples_split\u306f2\u4ee5\u4e0a\u3002\n    'min_samples_leaf':[1,6],\n    'random_state':[1234]\n}\ngo_grid_with_precision(RandomForestClassifier(), param_grid, 5, X_train, X_test, y_train, y_test)","1c80b950":"%%time\nparam_grid={\n    'n_neighbors':np.arange(1,21), \n}\ngo_grid_with_precision(KNeighborsClassifier(), param_grid, 5, X_train, X_test, y_train, y_test)","c7efa80a":"from sklearn.ensemble import AdaBoostClassifier\ndef go_adab(estimator, X_train, X_test, y_train, y_test):\n    adab = AdaBoostClassifier(base_estimator=estimator, n_estimators=50, random_state=1234)\n    adab.fit(X_train, y_train)\n    print('Test Accuracy: %.3f' % adab.score(X_test, y_test))\n    print('Classification Report:')\n    y_pred = adab.predict(X_test)\n    report = classification_report(y_test, y_pred, digits=3) # \u5c0f\u6570\u70b9\u4ee5\u4e0b3\u6841\u307e\u3067\u8868\u793a\n    print(report)","dd0a4811":"estimator = LogisticRegression()\ngo_adab(estimator, X_train, X_test, y_train, y_test)","b5a18aed":"estimator=DecisionTreeClassifier(criterion=\"gini\", max_depth=None, min_samples_split=3, min_samples_leaf=3, random_state=1234)\ngo_adab(estimator, X_train, X_test, y_train, y_test)","9d4c0578":"estimator=RandomForestClassifier(n_estimators=10, max_depth=2, criterion=\"gini\", min_samples_leaf=2, min_samples_split=2, random_state=1234)\ngo_adab(estimator, X_train, X_test, y_train, y_test)","10f350d8":"# estimator = KNeighborsClassifier(n_neighbors=5)\n# go_adab(estimator, X_train, X_test, y_train, y_test)\n# \u21d2\u30a8\u30e9\u30fc\"ValueError: KNeighborsClassifier doesn't support sample_weight.\"\u304c\u767a\u751f\u3059\u308b\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u3044\u308b\u3002","e00e9240":"### \u6c7a\u5b9a\u6728\u3092\u4f7f\u7528\u3057\u305f\u30a2\u30c0\u30d6\u30fc\u30b9\u30c8\u5b9f\u884c","e05c7684":"### \u6c7a\u5b9a\u6728\u306escoring\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a\u7248\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u5b9f\u884c","ecf913d9":"### <span id=\"Task2_1_2\">\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306e\u5b9f\u884c<\/span>","861172ea":"### <span id=\"Task2_2_2\">\u6c7a\u5b9a\u6728\u306e\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1<\/span>\n\u53c2\u8003\uff09http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.tree.DecisionTreeClassifier.html","8c5f3a7b":"### \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306escoring\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a\u7248\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u5b9f\u884c","51eae742":"### \u7d50\u679c\u30b5\u30de\u30ea\uff08scoring\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a\u7248\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u5b9f\u884c\u7d50\u679c\uff09\n* \u4ee5\u4e0b\u306b\u3001scoring\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a\u7248\u3067\u306e\u7b97\u51fa\u7d50\u679c\u3092\u6574\u7406\u3057\u305f\u3002\n\nAlgorithm|Best Parameters|Precision|Recall|F1|\u3000\u3000|Best Parameters<br>(scoring\u6307\u5b9a)|Precision<br>(scoring\u6307\u5b9a)|Recall<br>(scoring\u6307\u5b9a)|F1<br>(scoring\u6307\u5b9a)|\u8a55\u4fa1\n---|---|---|---|---|---\n\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30|penalty='l2', <br>C=1.9|**0.837**|0.893|0.864|\u3000\u3000|penalty='l2', <br>C=1.9|**0.837**|0.893|0.864|scoring\u6307\u5b9a\u306b\u3088\u308b\u5909\u5316\u306a\u3057\u3002\n\u6c7a\u5b9a\u6728|criterion='entropy', <br>max_depth=6, <br>min_samples_leaf=11, <br>min_samples_split=2|**0.827**|0.852|0.839|\u3000\u3000|criterion='entropy', <br>max_depth=7, <br>min_samples_leaf=2, <br>min_samples_split=5|**0.834**|0.796|0.815|scoring\u6307\u5b9a\u306b\u3088\u3063\u3066Precision\u5411\u4e0a\u3002<br>\u305f\u3060\u3057Recall\u306f\u4f4e\u4e0b\u3002\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8|n_estimators=19, <br>criterion='entropy', <br>max_depth=17, <br>min_samples_leaf=1, <br>min_samples_split=15|**0.804**|0.857|0.830|\u3000\u3000|n_estimators=11, <br>criterion='entropy', <br>max_depth=14, <br>min_samples_leaf=6, <br>min_samples_split=13|**0.772**|0.847|0.808|scoring\u6307\u5b9a\u306b\u3088\u3063\u3066Precision\u4f4e\u4e0b\u3002<br>Recall\u3082\u4f4e\u4e0b\u3002\nk\u8fd1\u508d\u6cd5|n_neighbors=3|**0.769**|0.679|0.721|\u3000\u3000|n_neighbors=20|**0.864**|0.582|0.695|scoring\u6307\u5b9a\u306b\u3088\u3063\u3066Precision\u5411\u4e0a\u3002<br>\u305f\u3060\u3057Recall\u306f\u5927\u5e45\u306b\u4f4e\u4e0b\u3002\n\n### \u8003\u5bdf\uff08scoring\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a\u7248\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306b\u3064\u3044\u3066\uff09\n* \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306fscoring\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u3066\u3082\u7cbe\u5ea6\u306b\u5909\u5316\u306f\u306a\u304f\u5b89\u5b9a\u3057\u3066\u3044\u308b\u3002\n* \u6c7a\u5b9a\u6728\u3068k\u8fd1\u508d\u6cd5\u306b\u3064\u3044\u3066\u306f\u3001scoring\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u3068Precision(\u9069\u5408\u7387)\u304c\u5411\u4e0a\u3057\u3066\u3044\u308b\u3002\n* \u7279\u306b\u6c7a\u5b9a\u6728\u306f\u3001\uff08\u5f53\u521d\u306e\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3067\u6700\u826f\u3060\u3063\u305f\uff09\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306e\u7cbe\u5ea6\u306b\u8fd1\u3065\u3044\u3066\u304a\u308a\u3001\u305d\u306e\u610f\u5473\u3067\u306fscoring\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u6709\u671b\u3067\u3042\u308b\u3002\n* \u305f\u3060\u3001\u305d\u306e\u4ee3\u511f\u3068\u3057\u3066Recall(\u518d\u73fe\u7387)\u304c\u4f4e\u4e0b\u3057\u3001Precision(\u9069\u5408\u7387)\u3068\u306e\u30d0\u30e9\u30f3\u30b9\u304c\u60aa\u304f\u306a\u308b\u50be\u5411\u304c\u898b\u3066\u53d6\u308c\u308b\u3002","a43a1603":"### \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306escoring\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a\u7248\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u5b9f\u884c","643be083":"## <span id=\"Task2_3\">\uff083\uff09CV\u6e08\u306e\u30e2\u30c7\u30eb\u306b\u3088\u3063\u3066\u3001\u7cbe\u5ea6\u304a\u3088\u3073\u7d50\u679c\u306e\u8a55\u4fa1\u3092\u884c\u3046<\/span>\n### \u7d50\u679c\u30b5\u30de\u30ea\uff08\u30c7\u30fc\u30bf\u5206\u5272\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u5f8c\uff09\n* \u4ee5\u4e0b\u306b\u3001\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3054\u3068\u306b\u64cd\u4f5c\u3057\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u30d9\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3001\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u306e\u7b97\u51fa\u7d50\u679c\u3092\u6574\u7406\u3057\u305f\u3002\n\nAlgorithm|Class Name|Parameters|Best Parameters|Precision|Recall|F1|\u8a55\u4fa1\n---|---|---|---|---|---\n\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30|LogisticRegression|penalty,<br>C|penalty='l2', <br>C=1.9|**0.837**|0.893|0.864|Recall(\u518d\u73fe\u7387)\u91cd\u8996\u306e\u30e2\u30c7\u30eb\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\u6c7a\u5b9a\u6728|DecisionTreeClassifier|criterion, <br>max_depth, <br>min_samples_split, <br>min_samples_leaf, <br>random_state=1234(\u56fa\u5b9a)|criterion='entropy', <br>max_depth=6, <br>min_samples_leaf=11, <br>min_samples_split=2|**0.827**|0.852|0.839|Precision(\u9069\u5408\u7387)\u3068Recall(\u518d\u73fe\u7387)\u304c\u540c\u3058\u7a0b\u5ea6\u3002<br>\u305f\u3060\u3057\u3001\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3068\u6bd4\u3079\u308b\u3068\u4f4e\u3044\u3002\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8|RandomForestClassifier|n_estimators, <br>criterion, <br>max_depth, <br>min_samples_leaf, <br>min_samples_split, <br>random_state=1234(\u56fa\u5b9a)|n_estimators=19, <br>criterion='entropy', <br>max_depth=17, <br>min_samples_leaf=1, <br>min_samples_split=15|**0.804**|0.857|0.830|Recall(\u518d\u73fe\u7387)\u91cd\u8996\u306e\u30e2\u30c7\u30eb\u3068\u306a\u3063\u3066\u3044\u308b\u3002\nk\u8fd1\u508d\u6cd5|KNeighborsClassifier|n_neighbors|n_neighbors=3|**0.769**|0.679|0.721|\u5168\u4f53\u7684\u306b\u7cbe\u5ea6\u304c\u4f4e\u3044\u3068\u601d\u308f\u308c\u308b\u3002\n\n### \u3000\n### \u8003\u5bdf\uff08\u30c7\u30fc\u30bf\u5206\u5272\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u5f8c\uff09\n* \u4e0a\u8a18\u7d50\u679c\u3088\u308a\u3001\u672c\u8ab2\u984c\u3067\u9069\u5207\u3068\u601d\u308f\u308c\u308bPrecision(\u9069\u5408\u7387)\u91cd\u8996\u306e\u30e2\u30c7\u30eb\u3068\u3057\u3066\u306f\u3001\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3001\u6c7a\u5b9a\u6728\u3001\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u304c\u6709\u671b\u3067\u3042\u308b\u3068\u601d\u308f\u308c\u308b\u3002\n* \u7279\u306b\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306f\u3001Day1\u8ab2\u984c\u3067\u306e\u7d50\u679c\u3068\u6bd4\u8f03\u3059\u308b\u3068\u3001Precision(\u9069\u5408\u7387)\u304c81.1%\u304b\u308983.7%\u306b\u5411\u4e0a\u3057\u3066\u304a\u308a\u3001Recall(\u518d\u73fe\u7387)\u3068\u306e\u30d0\u30e9\u30f3\u30b9\u3082\u826f\u3044\u3002\n* \u307e\u305f\u3001\u6b21\u306b\u6c7a\u5b9a\u6728\u304c\u6709\u671b\u3067\u3001Precision(\u9069\u5408\u7387)\u304c81.1%\u304b\u308982.7%\u306b\u5411\u4e0a\u3057\u3066\u3044\u308b\u3002","fe5e032f":"## <span id=\"Task2_5_2\">Day2\u8ab2\u984c\u5168\u4f53\u306e\u8003\u5bdf<\/span>\n* Day2\u3067\u5b66\u3093\u3060\u3053\u3068\u3092\u8a66\u884c\u3057\u305f\u7d50\u679c\u3001\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u306f\u304a\u304a\u3080\u306dDay1\u8ab2\u984c\u306e\u3082\u306e\u3088\u308a\u5411\u4e0a\u3057\u305f\u3002\n* \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306b\u3088\u3063\u3066\u3001\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3001\u6c7a\u5b9a\u6728\u306f\u7cbe\u5ea6\u304c\u5411\u4e0a\u3057\u305f\u304c\u3001\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3001k\u8fd1\u508d\u6cd5\u3067\u306f\u4f4e\u4e0b\u3057\u305f\u3002\n* Precision(\u9069\u5408\u7387)\u306e\u307f\u5411\u4e0a\u3055\u305b\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001\u4e0a\u8a18(4-1)\u300cscoring\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u300d\u306e\u624b\u6cd5\u306f\u6709\u529b\u3067\u3042\u308b\u3002\n* Recall(\u518d\u73fe\u7387)\u3068\u306e\u30d0\u30e9\u30f3\u30b9\u3092\u3042\u307e\u308a\u91cd\u8996\u3057\u306a\u304f\u3066\u3082\u3088\u3044\u306e\u3067\u3042\u308c\u3070\u3001\u6b21\u306e\u30e2\u30c7\u30eb\u304c\u826f\u3044\u3002\n    - \u4e0a\u8a18(4-1)\u306ek\u8fd1\u508d\u6cd5\uff08Precision=86.4%\uff09\n* Precision(\u9069\u5408\u7387)\u3082Recall(\u518d\u73fe\u7387)\u3082\u91cd\u8996\u3059\u308b\u306e\u3067\u3042\u308c\u3070\u3001\u6b21\u306e2\u3064\u306e\u30e2\u30c7\u30eb\u304c\u826f\u3044\u3002\n    - \u4e0a\u8a18(4-1)\u306e\u6c7a\u5b9a\u6728\uff08Precision=83.4%, Recall=79.6%\uff09\n    - \u4e0a\u8a18(4-2)\u306e\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\uff08Precision=82.4%, Recall=81.1%\uff09\n* \u5168\u4f53\u7684\u306b\u3001Precision(\u9069\u5408\u7387)\u304c90%\u3092\u8d85\u3048\u308b\u3088\u3046\u306a\u30e2\u30c7\u30eb\u306f\u751f\u6210\u3055\u308c\u306a\u304b\u3063\u305f\u3002\u3055\u3089\u306a\u308b\u691c\u8a0e\u304c\u5fc5\u8981\u3067\u3042\u308b\u3002","f77cbe10":"### <span id=\"Task2_1_3\">k\u8fd1\u508d\u6cd5\u306e\u5b9f\u884c<\/span>","e7125166":"### <span id=\"Task2_2_1\">\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306e\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1<\/span>\n* \u63a1\u7528\u3059\u308b\u64cd\u4f5c\u5bfe\u8c61\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3064\u3044\u3066\uff1ahttp:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LogisticRegression.html\n* \u88dc\u8db3\uff09\n    - \u9006\u6b63\u5247\u5316\u30d1\u30e9\u30e1\u30fc\u30bfC\u306f\u03bb\u306e\u9006\u6570\u3002\n        - C\u3092\u5c0f\u3055\u304f\u3059\u308b\u307b\u3069\u03bb\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u6b63\u5247\u5316\u304c\u5f37\u304f\u306a\u308a\u3001\u30e2\u30c7\u30eb\u304c\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308b\u3002\uff08\u4e0b\u8a18\u203b1\u53c2\u7167\uff09\n        - \u9006\u306b\u3001C\u3092\u5927\u304d\u304f\u3059\u308b\u307b\u3069\u03bb\u304c\u5c0f\u3055\u304f\u306a\u3063\u3066\u6b63\u5247\u5316\u304c\u5f31\u304f\u306a\u308a\u3001\u30e2\u30c7\u30eb\u304c\u8907\u96d1\u306b\u306a\u308b\u3002\uff08\u4e0b\u8a18\u203b2\u53c2\u7167\uff09\n        - \u203b1\uff1aC\u5c0f\u21d2\u03bb\u5927\u21d2\u6b63\u5247\u5316\u9805\u304c\u5927\u21d2\u7279\u5fb4\u91cf\uff08\u8aac\u660e\u5909\u6570\uff09\u306e\u91cd\u307f\u304c0\u306b\u8fd1\u3065\u304f\u21d2\u30e2\u30c7\u30eb\u304c\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308b\n        - \u203b2\uff1aC\u5927\u21d2\u03bb\u5c0f\u21d2\u6b63\u5247\u5316\u9805\u304c\u5c0f\u21d2\u7279\u5fb4\u91cf\uff08\u8aac\u660e\u5909\u6570\uff09\u306e\u91cd\u307f\u304c0\u304b\u3089\u9060\u3056\u304b\u308b\uff08\u91cd\u307f\u304c\u5897\u3059\uff09\u21d2\u30e2\u30c7\u30eb\u304c\u8907\u96d1\u306b\u306a\u308b\n","3a32c8f4":"# Day2\u8ab2\u984c\u3067\u5b9f\u65bd\u3057\u305f\u3053\u3068\uff1a\n* [Task1:\u307e\u305a\u306fDay1\u8ab2\u984c\u3067\u306e\u6307\u6458\u4e8b\u9805\u3092\u53cd\u6620\u3002](#Task1_0)\n\n\n* [Task2:Day2\u3067\u5b66\u3093\u3060\u3053\u3068\u3092\u8a66\u884c\u3057\u3001\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u5411\u4e0a\u3092\u76ee\u6307\u3059\u3002](#Task2_0)\n    - [\uff081\uff09DAY2\u3067\u5b66\u3093\u3060\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5229\u7528\u3057\u3066\u30e2\u30c7\u30eb\u3092\u3064\u304f\u308a\u3001DAY1\u5bbf\u984c\u63d0\u51fa\u6642\u306e\u7cbe\u5ea6\u3092\u6bd4\u8f03\u3059\u308b\u3002](#Task2_1)\n        - [\u6c7a\u5b9a\u6728\u306e\u5b9f\u884c](#Task2_1_1)\n        - [\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306e\u5b9f\u884c](#Task2_1_2)\n        - [k\u8fd1\u508d\u6cd5\u306e\u5b9f\u884c](#Task2_1_3)\n    - [\uff082\uff09\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u884c\u3046](#Task2_2)\n        - [\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306e\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1](#Task2_2_1)\n        - [\u6c7a\u5b9a\u6728\u306e\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1](#Task2_2_2)\n        - [\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306e\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1](#Task2_2_3)\n        - [k\u8fd1\u508d\u6cd5\u306e\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1](#Task2_2_4)\n    - [\uff083\uff09CV\u6e08\u306e\u30e2\u30c7\u30eb\u306b\u3088\u3063\u3066\u3001\u7cbe\u5ea6\u304a\u3088\u3073\u7d50\u679c\u306e\u8a55\u4fa1\u3092\u884c\u3046](#Task2_3)\n    - [\uff084\uff09\u305d\u306e\u4ed6\u3001\u7cbe\u5ea6\u306e\u5411\u4e0a\u304c\u3067\u304d\u308b\u3088\u3046\u306a\u51e6\u7406\u306b\u53d6\u308a\u7d44\u307f\u3001\u7cbe\u5ea6\u3092\u4e0a\u3052\u308b](#Task2_4)\n        - [\uff084-1\uff09GridSearchCV\u306escoring\u30d1\u30e9\u30e1\u30fc\u30bf\uff08\u30b9\u30b3\u30a2\u7b97\u51fa\u30dd\u30ea\u30b7\u30fc\uff09\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001Precision\u306e\u5411\u4e0a\u306f\u898b\u3089\u308c\u308b\u304b\uff1f](#Task2_4_1)\n        - [\uff084-2\uff09\u30a2\u30c0\u30d6\u30fc\u30b9\u30c8\u306b\u3088\u3063\u3066\u3001Precision\u306e\u5411\u4e0a\u306f\u898b\u3089\u308c\u308b\u304b\uff1f](#Task2_4_2)\n    - [\uff085\uff09\u3067\u304d\u305f\u3068\u3053\u308d\u307e\u3067\u3092notebook\u3067\u307e\u3068\u3081\u3001\u5bbf\u984c\u3068\u3057\u3066\u63d0\u51fa\u3059\u308b\u3002\u524d\u56de\u304b\u3089\u53d6\u308a\u7d44\u3093\u3060\u5185\u5bb9\u30fb\u5de5\u592b\u3001\u7cbe\u5ea6\u304c\u3069\u306e\u3088\u3046\u306b\u5909\u5316\u3057\u305f\u304b\u306e\u30b3\u30e1\u30f3\u30c8\u306e\u3092\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306b\u542b\u3081\u308b\u3053\u3068](#Task2_5)\n        - [Day2\u8ab2\u984c\u5168\u4f53\u306e\u7d50\u679c\u30b5\u30de\u30ea](#Task2_5_1)\n        - [Day2\u8ab2\u984c\u5168\u4f53\u306e\u8003\u5bdf](#Task2_5_2)\n","bd633f22":"## \u30de\u30eb\u30c1\u30b3\u306e\u691c\u51fa","234510bc":"### <span id=\"Task2_1_1\">\u6c7a\u5b9a\u6728\u306e\u5b9f\u884c<\/span>","6fca7c9e":"# ML Workshop Homework2\n* Create Date:2018\/07\/06(WED)\n* Language: Japanese\n* Dataset: Mental Health in Tech Survey","88bb34e1":"### k\u8fd1\u508d\u6cd5\u3092\u4f7f\u7528\u3057\u305f\u30a2\u30c0\u30d6\u30fc\u30b9\u30c8\u5b9f\u884c\u306f\u4e0d\u53ef\u3002\uff08KNeighborsClassifier\u30af\u30e9\u30b9\u306bsample_weight\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\uff09","6d6d11b7":"### <span id=\"Task2_2_4\">k\u8fd1\u508d\u6cd5\u306e\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1<\/span>\n\u53c2\u8003\uff09http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.neighbors.KNeighborsClassifier.html","649d2ade":"### <span id=\"Task2_4_2\">\uff084-2\uff09\u30a2\u30c0\u30d6\u30fc\u30b9\u30c8\u306b\u3088\u3063\u3066\u3001Precision\u306e\u5411\u4e0a\u306f\u898b\u3089\u308c\u308b\u304b\uff1f<\/span>","d691ef43":"# <span id=\"Task2_5\">\uff085\uff09\u3067\u304d\u305f\u3068\u3053\u308d\u307e\u3067\u3092notebook\u3067\u307e\u3068\u3081\u3001\u5bbf\u984c\u3068\u3057\u3066\u63d0\u51fa\u3059\u308b\u3002\u524d\u56de\u304b\u3089\u53d6\u308a\u7d44\u3093\u3060\u5185\u5bb9\u30fb\u5de5\u592b\u3001\u7cbe\u5ea6\u304c\u3069\u306e\u3088\u3046\u306b\u5909\u5316\u3057\u305f\u304b\u306e\u30b3\u30e1\u30f3\u30c8\u306e\u3092\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306b\u542b\u3081\u308b\u3053\u3068<\/span>\n\n## <span id=\"Task2_5_1\">Day2\u8ab2\u984c\u5168\u4f53\u306e\u7d50\u679c\u30b5\u30de\u30ea<\/span>\n* \u4ee5\u4e0b\u306e\u5404\u8a66\u884c\u7d50\u679c\u306b\u3064\u3044\u3066\u3001Precision(\u9069\u5408\u7387)\u3001Recall(\u518d\u73fe\u7387)\u3092\u6574\u7406\u3002\n    - (0)\u7d50\u679c\u30b5\u30de\u30ea\uff08Day1\u8ab2\u984c\u3067\u306e\u7d50\u679c\uff09\n    - (1)\u7d50\u679c\u30b5\u30de\u30ea\uff08\u30c7\u30fc\u30bf\u5206\u5272\u306a\u3057\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306a\u3057\uff09\n    - (2)\u7d50\u679c\u30b5\u30de\u30ea\uff08\u30c7\u30fc\u30bf\u5206\u5272\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u5f8c\uff09\n    - (4-1)\u7d50\u679c\u30b5\u30de\u30ea\uff08\u305d\u306e\u4ed6\u624b\u6cd5\u305d\u306e1\uff1ascoring\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a\u7248\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u5b9f\u884c\u7d50\u679c\uff09\n    - (4-2)\u7d50\u679c\u30b5\u30de\u30ea\uff08\u305d\u306e\u4ed6\u624b\u6cd5\u305d\u306e2\uff1a\u30a2\u30c0\u30d6\u30fc\u30b9\u30c8\u5b9f\u884c\u7d50\u679c\uff09\n\n\n* \u306a\u304a\u3001(1)\u306e\u7d50\u679c\u30b5\u30de\u30ea\u306f\u30c7\u30fc\u30bf\u5206\u5272\u306a\u3057\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306a\u3057\u3067\u306e\u5b9f\u884c\u7d50\u679c\u3067\u3042\u308b\u305f\u3081\u6bd4\u8f03\u5bfe\u8c61\u5916\u3068\u3057\u3001\u62ec\u5f27\u4ed8\u304d\u3068\u3057\u305f\u3002\n* \u8868\u4e2d\u300c(UP)\u300d\u3068\u3042\u308b\u306e\u306f\u3001\u4e0a\u8a18(0)\u306eDay1\u8ab2\u984c\u3067\u306e\u7d50\u679c\u3068\u6bd4\u8f03\u3057\u3066\u7cbe\u5ea6\u304c\u5411\u4e0a\u3057\u3066\u3044\u308b\u3082\u306e\u3092\u793a\u3059\u3002\n\nAlgorithm|(0)<br>Precision|<br>Recall|\u3000|(1)<br>Precision|<br>Recall|\u3000|(2)<br>Precision|<br>Recall|\u3000|(4-1)<br>Precision|<br>Recall|\u3000|(4-2)<br>Precision|<br>Recall\n---|---|---|---|---|---\n\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30|**0.811**|0.924|\u3000|-|-|\u3000|**0.837 (UP)**|0.893|\u3000|**0.837 (UP)**|0.893|\u3000|**0.824 (UP)**|0.811\n\u6c7a\u5b9a\u6728|-|-|\u3000|(**0.895**)|(0.867)|\u3000|**0.827 (UP)**|0.852|\u3000|**0.834 (UP)**|0.796|\u3000|**0.817 (UP)**|0.750\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8|-|-|\u3000|(**0.729**)|(0.710)|\u3000|**0.804**|0.857|\u3000|**0.772**|0.847|\u3000|**0.833 (UP)**|0.842\nk\u8fd1\u508d\u6cd5|-|-|\u3000|(**0.867**)|(0.805)|\u3000|**0.769**|0.679|\u3000|**0.864 (UP)**|0.582|\u3000|-|-","9a1efaa9":"### \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3092\u4f7f\u7528\u3057\u305f\u30a2\u30c0\u30d6\u30fc\u30b9\u30c8\u5b9f\u884c","aa3c0177":"### <span id=\"Task2_2_3\">\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306e\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1<\/span>\n\u53c2\u8003\uff09http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.tree.DecisionTreeClassifier.html","38430b85":"### \u7d50\u679c\u30b5\u30de\u30ea\uff08\u30c7\u30fc\u30bf\u5206\u5272\u306a\u3057\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306a\u3057\uff09\n* \u4e00\u65e6\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u524d\u306b\u3001\u4e0a\u8a18\u3067\u8a66\u3057\u305f\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3088\u308b\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u306b\u3064\u3044\u3066\u3001Day1\u8ab2\u984c\u3067\u306e\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3068\u306e\u6bd4\u8f03\u3092\u6574\u7406\u3057\u305f\u3002\n* \u305f\u3060\u3057\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u5206\u5272\u306a\u3057\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306a\u3057\u3067\u306e\u7d50\u679c\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3002\uff08\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u5024\u306f\u5143\u306e\u30c7\u30fc\u30bf\u3067\u3042\u3066\u306f\u3081\u305f\u3068\u304d\u306e\u6027\u80fd\u6307\u6a19\u3067\u3042\u308b\u306e\u3067\u3084\u3084\u9ad8\u76ee\u306b\u51fa\u3066\u3044\u308b\u306f\u305a\u3002\uff09\n\nAlgorithm Name|Class Name|Parameters|Precision|Recall|F1|\u8a55\u4fa1|\n---|---|---|---|---|---\n\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30(Day1\u518d\u63b2)|LogisticRegression|\u30c7\u30d5\u30a9\u30eb\u30c8|0.811|0.924|0.864|Day1\u8ab2\u984c\u3067\u306e\u7d50\u679c\u306e\u518d\u63b2\u3002Recall(\u518d\u73fe\u7387)\u91cd\u8996\u306e\u30e2\u30c7\u30eb\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\u6c7a\u5b9a\u6728|DecisionTreeClassifier|criterion=\"gini\", <br>max_depth=None, <br>min_samples_split=3, <br>min_samples_leaf=3, <br>random_state=1234|0.895|0.867|0.881|\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3068\u6bd4\u8f03\u3057\u3066\u3001Precision(\u9069\u5408\u7387)\u91cd\u8996\u306e\u30e2\u30c7\u30eb\u3068\u306a\u308a\u3001\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u3082\u826f\u304f\u306a\u3063\u305f\u3002\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8|RandomForestClassifier|n_estimators=10, <br>max_depth=2, <br>criterion=\"gini\", <br>min_samples_leaf=2, <br>min_samples_split=2, <br>random_state=1234|0.729|0.710|0.719|\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3068\u6bd4\u8f03\u3057\u3066\u3001Precision(\u9069\u5408\u7387)\u91cd\u8996\u306e\u30e2\u30c7\u30eb\u3068\u306a\u3063\u305f\u3002\u3057\u304b\u3057\u3001\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3088\u308a\u3082\u7cbe\u5ea6\u304c\u4f4e\u3044\u3002\nk\u8fd1\u508d\u6cd5|KNeighborsClassifier|n_neighbors=5|0.867|0.805|0.835|\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3068\u6bd4\u8f03\u3057\u3066\u3001Precision(\u9069\u5408\u7387)\u91cd\u8996\u306e\u30e2\u30c7\u30eb\u3068\u306a\u308a\u3001\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u3082\u826f\u304f\u306a\u3063\u305f\u3002<br>\u305f\u3060\u3057\u3001\u6c7a\u5b9a\u6728\u3068\u6bd4\u8f03\u3059\u308b\u3068F1\u5024\u304c\u60aa\u3044\u3002","7d6b15ae":"### k\u8fd1\u508d\u6cd5\u306escoring\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a\u7248\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u5b9f\u884c","7fc0609e":"### \u76f8\u95a2\u304c\u9ad8\u3044\u8aac\u660e\u5909\u6570\uff08\u76f8\u95a2\u4fc2\u6570\u304c0.5\u4ee5\u4e0a\u307e\u305f\u306f-0.5\u4ee5\u4e0b\uff09\n\u5909\u65701|\u5909\u65702|\u76f8\u95a2\u4fc2\u6570\n---|---|---\nGender_F|Gender_M|-0.98\nwork_interfere_Never|work_interfere_Sometimes|-0.60\nbenefits_DontKnow|benefits_Yes|-0.54\ncare_options_No|care_options_Yes|-0.60\nanonymity_DontKnow|anonymity_Yes|-0.89","e869282e":"## <span id=\"Task2_2\">\uff082\uff09\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u884c\u3046<\/span>\n* \u5143\u306e\u30c7\u30fc\u30bf\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\u3059\u308b\u3002\n* \u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3092\u5b9f\u884c\u3057\u3001\u30d9\u30b9\u30c8\u306a\u7cbe\u5ea6\u306b\u306a\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a2\u3059\u3002","fbce36af":"### \u8003\u5bdf\uff08\u30c7\u30fc\u30bf\u5206\u5272\u306a\u3057\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306a\u3057\uff09\n* \u6c7a\u5b9a\u6728\u3001\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3001k\u8fd1\u508d\u6cd5\u3068\u3082\u3001Precision(\u9069\u5408\u7387)\u91cd\u8996\u306e\u30e2\u30c7\u30eb\u3068\u306a\u3063\u305f\u3002\n* \u4e0a\u8a18\u3067\u8a66\u3057\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u306f\u6c7a\u5b9a\u6728\u304c\u6700\u3082\u7cbe\u5ea6\u304c\u3088\u3044\u3002","ef940e16":"DAY2\u306f\u4ee5\u4e0a","e1aaa848":"# Day1\u8ab2\u984c\u306b\u3064\u3044\u3066\u6574\u7406\uff1a\n* \u516c\u958bURL\uff1ahttps:\/\/www.kaggle.com\/tshimamoto\/ml-workshop-homework\n* \u9078\u629e\u8ab2\u984c\uff1aMental Health in Tech Survey (\u7cbe\u795e\u75be\u60a3\u306e\u6cbb\u7642\u53d7\u8a3a\u8005\u3092\u4e88\u6e2c\u3059\u308b)\n* \u76ee\u7684\u5909\u6570\uff1atreatment(\u6cbb\u7642\u53d7\u8a3a\u6709\u7121)\n* \u8aac\u660e\u5909\u6570\uff1aGender, state, family_history, work_interfere, benefits, care_options, anonymity, leave, obs_consequence\n* \u5206\u6790\u30e2\u30c7\u30eb\uff1a\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\n* \u7d50\u679c\uff1a\u4ee5\u4e0b\u5206\u985e\u30ec\u30dd\u30fc\u30c8\u3002\u203b\u306a\u304a\u3001\u4e0b\u8a18\u306eDay2\u8ab2\u984c\u3067\u306e\u7d50\u679c\u3068\u8a73\u7d30\u306b\u6bd4\u8f03\u3059\u308b\u305f\u3081\u306b\u5c0f\u6570\u70b9\u4ee5\u4e0b3\u6841\u3067\u7b97\u51fa\u3057\u306a\u304a\u3057\u305f\u3002\n                     precision    recall  f1-score   support\n                  0      0.910     0.781     0.840       620\n                  1      0.811     0.924     0.864       630  \u2190 1:\u6cbb\u7642\u53d7\u8a3a\u6709\u308a\u306e\u4e88\u6e2c\u5024\u306b\u95a2\u3059\u308b\u8a55\u4fa1\n        avg \/ total      0.860     0.853     0.852      1250\n\n* \u8003\u5bdf\uff1a\n- Precision(\u9069\u5408\u7387)\u304c81%\u3001Recall(\u518d\u73fe\u7387)\u304c92%\u3067\u3001\u307b\u3069\u307b\u3069\u306b\u826f\u3044\u3068\u601d\u308f\u308c\u308b\u3002\n- \u305f\u3060\u3057\u3001Precision(\u9069\u5408\u7387)\u304cRecall(\u518d\u73fe\u7387)\u3088\u308a\u3082\u304b\u306a\u308a\u4f4e\u304f\u51fa\u3066\u304a\u308a\u3001Recall(\u518d\u73fe\u7387)\u91cd\u8996\u306e\u30e2\u30c7\u30eb\u3068\u306a\u3063\u305f\u3002\n- \u3064\u307e\u308a ~~\u300c\u898b\u9003\u3057\u300d~~ \u8aa4\u5224\u5b9a\u304c\u767a\u751f\u3059\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u305f\u3081\u3001\u6cbb\u7642\u53d7\u8a3a\u6709\u7121\u3092\u5224\u65ad\u3059\u308b\u30e2\u30c7\u30eb\u3068\u3057\u3066\u306f\u3084\u3084\u4e0d\u9069\u5207\u3067\u3042\u308b\u3002   ","57ee012b":"### <span id=\"Task2_4_1\">\uff084-1\uff09GridSearchCV\u306escoring\u30d1\u30e9\u30e1\u30fc\u30bf\uff08\u30b9\u30b3\u30a2\u7b97\u51fa\u30dd\u30ea\u30b7\u30fc\uff09\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001Precision\u306e\u5411\u4e0a\u306f\u898b\u3089\u308c\u308b\u304b\uff1f<\/span>","3e6c0837":"\u4e0a\u8a18\u306e\u6c7a\u5b9a\u6728\u306b\u3088\u3063\u3066\u751f\u6210\u3057\u305f\u30e2\u30c7\u30eb\u306f\u3001Precision(\u9069\u5408\u7387)\u304c90%\u3001Recall(\u518d\u73fe\u7387)\u304c87%\u3001F1\u5024\u304c88%\u3068\u306a\u308a\u3001\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3068\u6bd4\u8f03\u3057\u3066Recall(\u9069\u5408\u7387)\u91cd\u8996\u306e\u30e2\u30c7\u30eb\u3068\u306a\u308a\u3001\u672c\u8ab2\u984c\u306e\u30e2\u30c7\u30eb\u3068\u3057\u3066\u306f\u3088\u308a\u9069\u5207\u306b\u306a\u3063\u305f\u3068\u8a00\u3048\u308b\u3002","ad60d2b9":"## \u524d\u51e6\u7406\uff08\u8aac\u660e\u5909\u6570\u306e\u5909\u66f4\u4ee5\u5916\u306fDay1\u8ab2\u984c\u3068\u540c\u3058\uff09","15413213":"### \u76f8\u95a2\u304c\u9ad8\u3044\u8aac\u660e\u5909\u6570\u3092\u524a\u9664\uff082\u3064\u306e\u3046\u3061\u4e00\u65b9\uff09","7424dfe2":"# <span id=\"Task1_0\">Task1:\u307e\u305a\u306fDay1\u8ab2\u984c\u3067\u306e\u6307\u6458\u4e8b\u9805\u3092\u53cd\u6620\u3002<\/span>\n* \u30b3\u30e1\u30f3\u30c8\u6b04\uff08\u5909\u6570\u540dcomments\uff09\u306e\u8a18\u5165\u6709\u7121\u3092\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u8ffd\u52a0\u3002\n* \u30de\u30eb\u30c1\u30b3\u306e\u691c\u51fa\u3092\u884c\u3044\u3001\u76f8\u95a2\u4fc2\u6570\u306e\u7d76\u5bfe\u5024\u304c0.5\u4ee5\u4e0a\u306e\u8aac\u660e\u5909\u6570\uff082\u3064\u306e\u3046\u3061\u4e00\u65b9\uff09\u3092\u524a\u9664\u3002\n* \u7d50\u679c\uff1aDay1\u8ab2\u984c\u63d0\u51fa\u6642\u3068\u5909\u5316\u306a\u3057\u3002\n                     precision    recall  f1-score   support\n                  0       0.91      0.78      0.84       620\n                  1       0.81      0.92      0.86       630  \u2190 1:\u6cbb\u7642\u53d7\u8a3a\u6709\u308a\u306e\u4e88\u6e2c\u5024\u306b\u95a2\u3059\u308b\u8a55\u4fa1\u5024\n        avg \/ total       0.86      0.85      0.85      1250","df401efe":"\u4e0a\u8a18\u306e\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306b\u3088\u3063\u3066\u751f\u6210\u3057\u305f\u30e2\u30c7\u30eb\u306f\u3001Precision(\u9069\u5408\u7387)\u304c90%\u3001Recall(\u518d\u73fe\u7387)\u304c87%\u3001F1\u5024\u304c88%\u3068\u306a\u308a\u3001Recall(\u9069\u5408\u7387)\u91cd\u8996\u306e\u30e2\u30c7\u30eb\u3068\u306a\u3063\u305f\u3002\u3057\u304b\u3057\u3001\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3088\u308a\u3082\u7cbe\u5ea6\u304c\u4f4e\u3044\u3002\n\u21d2\u6df1\u3055\u304c\u5c0f\u3055\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002","cc22d528":"## <span id=\"Task2_4\">\uff084\uff09\u305d\u306e\u4ed6\u3001\u7cbe\u5ea6\u306e\u5411\u4e0a\u304c\u3067\u304d\u308b\u3088\u3046\u306a\u51e6\u7406\u306b\u53d6\u308a\u7d44\u307f\u3001\u7cbe\u5ea6\u3092\u4e0a\u3052\u308b<\/span>","96ad83ef":"# <span id=\"Task2_0\">Task2:Day2\u3067\u5b66\u3093\u3060\u3053\u3068\u3092\u8a66\u884c\u3057\u3001\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u5411\u4e0a\u3092\u76ee\u6307\u3059\u3002<\/span>","3b7e8739":"### \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u4f7f\u7528\u3057\u305f\u30a2\u30c0\u30d6\u30fc\u30b9\u30c8\u5b9f\u884c","806d8e05":"## <span id=\"Task2_1\">\uff081\uff09DAY2\u3067\u5b66\u3093\u3060\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5229\u7528\u3057\u3066\u30e2\u30c7\u30eb\u3092\u3064\u304f\u308a\u3001DAY1\u5bbf\u984c\u63d0\u51fa\u6642\u306e\u7cbe\u5ea6\u3092\u6bd4\u8f03\u3059\u308b\u3002<\/span>"}}