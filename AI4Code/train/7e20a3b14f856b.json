{"cell_type":{"e594bbcf":"code","9e2403da":"code","61655ee4":"code","7ed66de7":"code","1edc3ece":"code","8af5d246":"code","8d3ce5e0":"code","c3644ed3":"code","3c0b4f2b":"markdown","40a26b1a":"markdown","bfbac656":"markdown","94a357ef":"markdown","fa028888":"markdown","045d56ae":"markdown","b1489f6f":"markdown","b05fa3a1":"markdown"},"source":{"e594bbcf":"batch_size = 1\nimage_size = 512\nenet_type = ['tf_efficientnet_b4_ns'] * 5\nmodel_path = ['..\/input\/moa-b4-baseline\/baseline_cld_fold0_epoch8_tf_efficientnet_b4_ns_512.pth', \n              '..\/input\/moa-b4-baseline\/baseline_cld_fold1_epoch9_tf_efficientnet_b4_ns_512.pth', \n              '..\/input\/moa-b4-baseline\/baseline_cld_fold2_epoch9_tf_efficientnet_b4_ns_512.pth',\n              '..\/input\/moa-b4-baseline\/baseline_cld_fold3_epoch5_tf_efficientnet_b4_ns_512.pth',\n              '..\/input\/moa-b4-baseline\/baseline_cld_fold4_epoch11_tf_efficientnet_b4_ns_512.pth']","9e2403da":"import os\nimport sys\nsys.path.append('..\/input\/pytorch-image-models\/pytorch-image-models-master')\nimport pandas as pd\nimport numpy as np\nDEBUG = False\nimport time\nimport cv2\nimport PIL.Image\nfrom sklearn.metrics import accuracy_score\nfrom tqdm.notebook import tqdm\nimport torch\nfrom torch.utils.data import DataLoader, Dataset\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torchvision\nimport torchvision.transforms as transforms\nimport torch.optim as optim\nfrom torch.optim.lr_scheduler import CosineAnnealingLR\nimport albumentations\nfrom tqdm.notebook import tqdm\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom pylab import rcParams\nimport timm\ndevice = torch.device('cuda') if not DEBUG else torch.device('cpu')","61655ee4":"transforms_valid = albumentations.Compose([\n    albumentations.CenterCrop(image_size, image_size, p=1),\n    albumentations.Resize(image_size, image_size),\n    albumentations.Normalize()\n])","7ed66de7":"class CLDDataset(Dataset):\n    def __init__(self, df, mode, transform=None):\n        self.df = df.reset_index(drop=True)\n        self.mode = mode\n        self.transform = transform\n        \n    def __len__(self):\n        return len(self.df)\n    \n    def __getitem__(self, index):\n        row = self.df.loc[index]\n        image = cv2.imread(row.filepath)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        \n        if self.transform is not None:\n            res = self.transform(image=image)\n            image = res['image']\n        \n        image = image.astype(np.float32)\n        image = image.transpose(2,0,1)\n        if self.mode == 'test':\n            return torch.tensor(image).float()\n        else:\n            return torch.tensor(image).float(), torch.tensor(row.label).float()\n\ntest = pd.read_csv('..\/input\/cassava-leaf-disease-classification\/sample_submission.csv')\ntest['filepath'] = test.image_id.apply(lambda x: os.path.join('..\/input\/cassava-leaf-disease-classification\/test_images', f'{x}'))\ntest_dataset = CLDDataset(test, 'test', transform=transforms_valid)\ntest_loader = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size, shuffle=False,  num_workers=4)","1edc3ece":"class enet_v2(nn.Module):\n\n    def __init__(self, backbone, out_dim, pretrained=False):\n        super(enet_v2, self).__init__()\n        self.enet = timm.create_model(backbone, pretrained=pretrained)\n        in_ch = self.enet.classifier.in_features\n        self.myfc = nn.Linear(in_ch, out_dim)\n        self.enet.classifier = nn.Identity()\n\n    def forward(self, x):\n        x = self.enet(x)\n        x = self.myfc(x)\n        return x\n","8af5d246":"def inference_func(test_loader):\n    model.eval()\n    bar = tqdm(test_loader)\n\n    LOGITS = []\n    PREDS = []\n    \n    with torch.no_grad():\n        for batch_idx, images in enumerate(bar):\n            x = images.to(device)\n            logits = model(x)\n            LOGITS.append(logits.cpu())\n            PREDS += [torch.softmax(logits, 1).detach().cpu()]\n        PREDS = torch.cat(PREDS).cpu().numpy()\n        LOGITS = torch.cat(LOGITS).cpu().numpy()\n    return PREDS\n\ndef tta_inference_func(test_loader):\n    model.eval()\n    bar = tqdm(test_loader)\n    PREDS = []\n    LOGITS = []\n\n    with torch.no_grad():\n        for batch_idx, images in enumerate(bar):\n            x = images.to(device)\n            x = torch.stack([x,x.flip(-1),x.flip(-2),x.flip(-1,-2),\n            x.transpose(-1,-2),x.transpose(-1,-2).flip(-1),\n            x.transpose(-1,-2).flip(-2),x.transpose(-1,-2).flip(-1,-2)],0)\n            x = x.view(-1, 3, image_size, image_size)\n            logits = model(x)\n            logits = logits.view(batch_size, 8, -1).mean(1)\n            PREDS += [torch.softmax(logits, 1).detach().cpu()]\n            LOGITS.append(logits.cpu())\n\n        PREDS = torch.cat(PREDS).cpu().numpy()\n        \n    return PREDS","8d3ce5e0":"test_preds = []\nfor i in range(len(enet_type)):\n    model = enet_v2(enet_type[i], out_dim=5)\n    model = model.to(device)\n    model.load_state_dict(torch.load(model_path[i]))\n    test_preds += [tta_inference_func(test_loader)]","c3644ed3":"submission = pd.read_csv('..\/input\/cassava-leaf-disease-classification\/sample_submission.csv')\nsubmission.label = np.argmax(np.mean(test_preds, axis=0), axis=1)\nsubmission.to_csv('submission.csv', index=False)","3c0b4f2b":"## Imports","40a26b1a":"## Aug","bfbac656":"weights are available at: https:\/\/www.kaggle.com\/underwearfitting\/moa-b4-baseline","94a357ef":"## Inference(with 8xTTA)","fa028888":"## Config","045d56ae":"## Submit","b1489f6f":"## Dataset","b05fa3a1":"## Model"}}