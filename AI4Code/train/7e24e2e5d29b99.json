{"cell_type":{"ebf3a179":"code","bc7ea4d5":"code","bbbf6749":"code","bbf6ee81":"code","22e6fd59":"code","5448054f":"code","c19abb91":"code","cdd56188":"code","0eadd82b":"code","69a657af":"code","f9ddbbf4":"code","e9175ae8":"code","6fc62ef4":"code","43ff8808":"code","ddc7cd77":"code","fed9dca0":"code","0c2d6bfd":"code","46611d51":"code","a1d40852":"code","0cffa508":"code","50266a74":"code","1b853eda":"markdown","c5c543f4":"markdown","a85225da":"markdown","b8e14553":"markdown","895818ec":"markdown","99940202":"markdown","1f4cb297":"markdown","aa477149":"markdown","9fd92e3c":"markdown"},"source":{"ebf3a179":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X, \uc2dc\ud5d8\ud658\uacbd\uacfc \uc720\uc0ac\ud558\uac8c \ud30c\uc77c\uc77d\uae30 \uad6c\ud604)\nimport pandas as pd\ndf = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\ny_train = X_train['Outcome']\nX_train = X_train.drop(columns=['Outcome'])\ny_test = X_test['Outcome']\nX_test = X_test.drop(columns=['Outcome'])\n\nX_train.shape, y_train.shape, X_test.shape, y_test.shape","bc7ea4d5":"import pandas as pd\nimport numpy as np","bbbf6749":"X_train.head()","bbf6ee81":"y_train.head()","22e6fd59":"# \uacb0\uce21\uac12 \ud655\uc778\n\nX_train.isnull().sum()","5448054f":"X_test.isnull().sum()","c19abb91":"# \ub370\uc774\ud130 \ud0c0\uc785 \ud655\uc778\n\nX_train.info()","cdd56188":"X_test.info()","0eadd82b":"X_train.describe()","69a657af":"X_test.describe()","f9ddbbf4":"# \uc774\uc0c1\uce58 \ucc98\ub9ac\n\ncols = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age'] \n\n\nfor col in cols:\n    Q1 = X_train[col].quantile(0.25)\n    Q3 = X_train[col].quantile(0.75)\n    IQR = Q3 - Q1\n\n    condition = (Q1 - 1.5 * IQR <= X_train[col] ) & (X_train[col] <= Q3 + 1.5 * IQR)\n    print(col, \"\uc774\uc0c1\uce58 \ube44\uc911: \",round((len(X_train[~condition])\/ len(X_train)), 2)) \n    X_train.loc[:, col] = X_train.loc[condition, col]\n\n","e9175ae8":"X_train.info()","6fc62ef4":"# \uc774\uc0c1\uce58\uc758 \ube44\uc911\uc774 10% \ubbf8\ub9cc\uc774\ubbc0\ub85c \uc0ad\uc81c\n\nX_train.dropna(axis = 0, inplace = True)","43ff8808":"# y\uc758 \ub370\uc774\ud130\ub3c4 \uc774\uc0c1\uce58 \ud589 \uc81c\uac70\uc5d0 \ub9de\uac8c \uac00\uacf5\n\ny_train = y_train.loc[X_train.index]","ddc7cd77":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier","fed9dca0":"X_tr, X_val, y_tr, y_val = train_test_split(X_train, y_train, test_size = 0.2, shuffle = True, random_state = 2021)\n\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","0c2d6bfd":"model = RandomForestClassifier()\nmodel.fit(X_tr, y_tr)\nprint(model.score(X_val, y_val))","46611d51":"model = XGBClassifier()\nmodel.fit(X_tr, y_tr)\nprint(model.score(X_val, y_val))","a1d40852":"final_model = RandomForestClassifier()\nfinal_model.fit(X_train, y_train)\n\nprediction = final_model.predict(X_test)\n\nsubmission = pd.DataFrame({\n    'Outcome' : prediction\n})\n","0cffa508":"# \uc218\ud5d8\ubc88\ud638.csv\ub85c \ucd9c\ub825\nsubmission.to_csv('1234567.csv', index=False)","50266a74":"round(final_model.score(X_test, y_test) * 100, 2) ","1b853eda":"## \ub2f9\ub1e8\ubcd1 \uc5ec\ubd80 \ud310\ub2e8\n- \uc774\uc0c1\uce58 \ucc98\ub9ac (Glucose, BloodPressure, SkinThickness, Insulin, BMI\uac00 0\uc778 \uac12)","c5c543f4":"## \uacb0\uacfc \uccb4\uc810 (\uc218\ud5d8\uc790\ub294 \uc54c \uc218 \uc5c6\ub294 \ubd80\ubd84\uc784)","a85225da":"## [\ucc38\uace0]\uc791\uc5c5\ud6152 \ubb38\uad6c\n- \ucd9c\ub825\uc744 \uc6d0\ud558\uc2e4 \uacbd\uc6b0 print() \ud568\uc218 \ud65c\uc6a9\n- \uc608\uc2dc) print(df.head())\n- getcwd(), chdir() \ub4f1 \uc791\uc5c5 \ud3f4\ub354 \uc124\uc815 \ubd88\ud544\uc694\n- \ud30c\uc77c \uacbd\ub85c \uc0c1 \ub0b4\ubd80 \ub4dc\ub77c\uc774\ube0c \uacbd\ub85c(C: \ub4f1) \uc811\uadfc \ubd88\uac00\n\n### \ub370\uc774\ud130 \ud30c\uc77c \uc77d\uae30 \uc608\uc81c\n- import pandas as pd\n- X_test = pd.read_csv(\"data\/X_test.csv\")\n- X_train = pd.read_csv(\"data\/X_train.csv\")\n- y_train = pd.read_csv(\"data\/y_train.csv\")\n\n### \uc0ac\uc6a9\uc790 \ucf54\ub529\n\n### \ub2f5\uc548 \uc81c\ucd9c \ucc38\uace0\n- \uc544\ub798 \ucf54\ub4dc \uc608\uce21\ubcc0\uc218\uc640 \uc218\ud5d8\ubc88\ud638\ub97c \uac1c\uc778\ubcc4\ub85c \ubcc0\uacbd\ud558\uc5ec \ud65c\uc6a9\n- pd.DataFrame({'cust_id': X_test.cust_id, 'gender': pred}).to_csv('003000000.csv', index=False)","b8e14553":"## EDA","895818ec":"## Start","99940202":"## \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","1f4cb297":"# \ubaa8\ub378\ub9c1 \ubc0f \ud3c9\uac00","aa477149":"- \ucd5c\uc885 \ubaa8\ub378 \uc120\ud0dd","9fd92e3c":"## \ub370\uc774\ud130 \uc804\ucc98\ub9ac"}}