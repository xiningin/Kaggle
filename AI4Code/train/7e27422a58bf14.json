{"cell_type":{"b2f7bf3e":"code","8a5c23d0":"code","ae7f8d5f":"code","64dadd10":"code","b5cab3c8":"code","b20ced59":"code","89f25923":"code","5b57d9e0":"code","4129a1a3":"code","81b5b31d":"code","f0336a12":"code","02196d35":"code","eb8f831f":"code","d9301c0a":"code","5ddaf7db":"code","ccbd2e0c":"code","8062464e":"code","3e1a3536":"code","12bbd493":"code","c933d13b":"code","a0c97854":"code","0ea7920a":"code","398d9eb9":"code","c8846bb6":"code","77e3764b":"code","3bbc2e68":"code","dbeb921a":"code","c53dfef6":"code","1b08221b":"code","082266f2":"code","68236761":"code","f88b5c76":"code","536e7543":"code","712ffc77":"code","f2a29fad":"code","f7e4f35d":"code","79de229d":"code","c26fd93c":"code","0fdc9c40":"code","951578b3":"code","4825f775":"code","1688f6dc":"code","c47d1c45":"code","098b665a":"code","666edb18":"code","42badf25":"code","5bcb0cb5":"code","07ff4456":"code","c213eead":"code","d5bd8521":"code","46e848e5":"code","6f90c39f":"code","453ca3b2":"code","cad7ddfc":"code","516d2295":"code","292beca4":"code","192bbeec":"code","d4f85b34":"code","bf7cf091":"code","954b570c":"code","1869c376":"code","3ac80d48":"code","24f17aaf":"markdown","ee4ae1fa":"markdown","bb81c24f":"markdown","e84791ba":"markdown","549f39bf":"markdown","c2629d02":"markdown","1f06be0f":"markdown","d6f24050":"markdown","6495fe3d":"markdown","8f3f3185":"markdown","2c81c937":"markdown","a0be66f6":"markdown","6269d644":"markdown","e3f9d387":"markdown","bd52162c":"markdown","0045edd1":"markdown","d1cec455":"markdown","af516118":"markdown","127079da":"markdown","78df99a9":"markdown","b0cf2693":"markdown","99d807ef":"markdown","89671fb2":"markdown","ed8bae8b":"markdown","18a25956":"markdown","a7a1ea0c":"markdown","d192c4cb":"markdown","da0f1f30":"markdown"},"source":{"b2f7bf3e":"# Filtering out the warnings\n\nimport warnings\n\nwarnings.filterwarnings('ignore')","8a5c23d0":"# Importing the required libraries\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","ae7f8d5f":"\nmovies=pd.read_csv('..\/input\/imdb-project\/MovieAssignment.csv',header=0)\nmovies.head()","64dadd10":"# Check the number of rows and columns in the dataframe\n\nmovies.shape","b5cab3c8":"# Check the column-wise info of the dataframe\nmovies.info()","b20ced59":"# Check the summary for the numeric columns \nmovies.describe(include='all')","89f25923":"# Divide the 'gross' and 'budget' columns by 1000000 to convert '$' to 'million $'\nmovies['Gross']=movies['Gross'].floordiv(1000000)\n\n","5b57d9e0":"movies['budget']=movies['budget'].floordiv(1000000)\nmovies.head()","4129a1a3":"# Create the new column named 'profit' by subtracting the 'budget' column from the 'gross' column\nmovies['Profit']=movies['Gross']-movies['budget']\nmovies.head()","81b5b31d":"# Sort the dataframe with the 'profit' column as reference using the 'sort_values' function. Make sure to set the argument\n#'ascending' to 'False'\nmovies.sort_values(by=['Profit'],ascending=False,inplace=True,ignore_index=True)\nmovies.head()\n\n","f0336a12":"# Get the top 10 profitable movies by using position based indexing. Specify the rows till 10 (0-9)\ntop_10=movies.loc[0:9,'Title']\ntop_10","02196d35":"#Plot profit vs budget\nplt.figure(figsize=[6,6])\nplt.scatter(data=movies,x='budget',y='Profit')\nplt.xlabel('budget',fontsize=12)\nplt.ylabel('Profit',fontsize=12)\nplt.title('Scatterplot budget vs Profit',fontsize=14)\nplt.show()","eb8f831f":"#Find the movies with negative profit\n\nneg_profit=movies[movies['Profit']<0]\nneg_profit","d9301c0a":"# Change the scale of MetaCritic\nmovies['MetaCritic']=movies['MetaCritic']\/10","5ddaf7db":"movies.MetaCritic.value_counts().head()","ccbd2e0c":"# Find the average ratings\nmovies.insert(63,column='Avg_rating',value=movies.loc[:,['MetaCritic','IMDb_rating']].mean(axis=1))\nmovies.head()","8062464e":"#Sort in descending order of average rating\n\nmovies.sort_values(by=['Avg_rating'],ascending=False,inplace=True)\nmovies.head()","3e1a3536":"# Find the movies with metacritic-rating < 0.5 and also with the average rating of >8\nUniversalAcclaim=movies[abs(movies['MetaCritic']-movies['IMDb_rating'])<0.5]","12bbd493":"UniversalAcclaim[(abs(movies['MetaCritic']-movies['IMDb_rating'])<0.5)&(movies['Avg_rating']>=8)].sort_index()","c933d13b":"UniversalAcclaim.sort_values(by='Avg_rating',ascending=False,inplace=True)\nUniversalAcclaim.reset_index(drop=True,inplace=True)\nUniversalAcclaim","a0c97854":"# Write your code here\nmovies.insert(64,column='Popularity',value=movies.loc[:,['actor_1_facebook_likes','actor_2_facebook_likes','actor_3_facebook_likes']].sum(axis=1))\nmovies.head()\n\n","0ea7920a":"top_popular_actor=movies.sort_values(by='Popularity',ascending=False)\ntop_popular_actor.reset_index(drop=True,inplace=True)\ntop_popular_actor.head()","398d9eb9":"top_popular_trios=movies.sort_values(by='Popularity',ascending=False,ignore_index=True).loc[0:4,['actor_1_name','actor_2_name','actor_3_name']].values.tolist()\ntop_popular_trios","c8846bb6":"Individual_popularity=movies[~((((movies['actor_1_facebook_likes']< movies['actor_2_facebook_likes']\/2) |\n                           (movies['actor_1_facebook_likes']< movies['actor_3_facebook_likes']\/2))== True)|\n                            (((movies['actor_2_facebook_likes']< movies['actor_1_facebook_likes']\/2)|\n                            (movies['actor_2_facebook_likes']< movies['actor_3_facebook_likes']\/2))== True)|\n                            (((movies['actor_3_facebook_likes']< movies['actor_1_facebook_likes']\/2)|\n                            (movies['actor_2_facebook_likes']<movies['actor_3_facebook_likes']\/2))==True))]\n\n","77e3764b":"Individual_popularity.shape","3bbc2e68":"common_actors=top_popular_actor[top_popular_actor['Title'].isin(Individual_popularity['Title'])]","dbeb921a":"common_actors.loc[:,['actor_1_name','actor_2_name','actor_3_name']].values.tolist()","c53dfef6":"Top_Individual_popularity=Individual_popularity.sort_values(by='Popularity',ascending=False)[0:5].reset_index(drop=True)","1b08221b":"Top_Individual_popularity.loc[0:5,['actor_1_name','actor_2_name','actor_3_name']].values.tolist()","082266f2":"movies.Runtime.describe()","68236761":"# Runtime histogram\/density plot\nplt.figure(figsize=[9,4])\nsns.distplot(movies['Runtime'],color='g')\nplt.title('Movie Runtime',fontsize=20)\nplt.xlabel(\"Runtime\",fontsize=14)\nplt.show()","f88b5c76":"movies.content_rating","536e7543":"R_rated=movies[movies['content_rating']=='R']","712ffc77":"PopularR=R_rated.sort_values(by='CVotesU18',ascending=False)\nPopularR.reset_index(drop=True,inplace=True)\nPopularR.head(10)","f2a29fad":"movies.info()","f7e4f35d":"# Create the dataframe df_by_genre\ncolumn=[]\nfor i in movies.columns:\n    if i.startswith('genre')|i.startswith('Votes')|i.startswith('CVotes'):\n        column.append(i)\ndf_by_genre=movies.loc[:,column]\n\n","79de229d":"df_by_genre.shape","c26fd93c":"# Create a column cnt and initialize it to 1\ndf_by_genre['cnt']=1\ndf_by_genre.head()","0fdc9c40":"# Group the movies by individual genres\ndf_by_g1=df_by_genre.groupby('genre_1')\ndf_by_g2=df_by_genre.groupby('genre_2')\ndf_by_g3=df_by_genre.groupby('genre_3')\n","951578b3":"df_by_g1=pd.DataFrame(df_by_g1.sum())\ndf_by_g2=pd.DataFrame(df_by_g2.sum())\ndf_by_g3=pd.DataFrame(df_by_g3.sum())","4825f775":"# Add the grouped data frames and store it in a new data frame\ndf1_and_df2=df_by_g1.add(df_by_g2,fill_value=0)\ndf_add=df1_and_df2.add(df_by_g3,fill_value=0)","1688f6dc":"df_add.head()","c47d1c45":"# Extract genres with atleast 10 occurences\n\ngenre_top10=df_add[df_add['cnt']>=10]","098b665a":"genre_top10.head()","666edb18":"#column value cnt for further analysis:\ncolumn_cnt=genre_top10['cnt']\ncolumn_cnt","42badf25":"# Take the mean for every column by dividing with cnt\ngenre_top10=genre_top10.div(genre_top10['cnt'],axis='index')\ngenre_top10.head()","5bcb0cb5":"# Rounding off the columns of Votes to two decimals\n\ngenre_top10=genre_top10.apply(lambda x:round(x,2),axis=0)\ngenre_top10.head()","07ff4456":"# Converting CVotes to int type\ncvotes=[]\nfor i in genre_top10.columns:\n    if i.startswith('CVotes'):\n        cvotes.append(i)","c213eead":"genre_top10[cvotes]=genre_top10[cvotes].astype('int')\ngenre_top10.head()","d5bd8521":"#ploted the graph but found all the bars in equal level,\n#so binding has been done by on 'column_cnt'\ncount=column_cnt.tolist()\ngenre_top10['cnt']=count","46e848e5":"# Countplot for genres\nplt.figure(figsize=[8,5])\nsns.barplot(x=genre_top10.index,y=genre_top10.cnt,color='g')\nplt.title('Different Genres vs Count',fontsize=20)\nplt.xlabel('Genres',fontsize=14)\nplt.ylabel('Count',fontsize=14)\nplt.show()","6f90c39f":"# 1st set of heat maps for CVotes-related columns\nMale_Cvote=genre_top10.groupby(genre_top10.index)['CVotesU18M','CVotes1829M','CVotes3044M','CVotes45AM'].mean()\nFemale_Cvotes=genre_top10.groupby(genre_top10.index)['CVotesU18F','CVotes1829F','CVotes3044F','CVotes45AF'].mean()\n\n\n","453ca3b2":"f,(ax1,ax2)=plt.subplots(1,2)\ngraph_1=sns.heatmap(Male_Cvote,cmap=\"Greens\",annot=True,cbar=False,ax=ax1,fmt='d',)\ngraph_1.set_ylabel('Genres',fontsize=12)\ngraph_1.set_xlabel('Male Age Group',fontsize=12)\ngraph_2=sns.heatmap(Female_Cvotes,cmap=\"Greens\",annot=True,cbar=True,ax=ax2,fmt='d')\ngraph_2.set_xlabel('Female Age Group',fontsize=12)\ngraph_2.set_yticks([])\nplt.show()","cad7ddfc":"# 2nd set of heat maps for Votes-related columns\nMale_vote=genre_top10.groupby(genre_top10.index)['VotesU18M','Votes1829M','Votes3044M','Votes45AM'].mean()\nFemale_votes=genre_top10.groupby(genre_top10.index)['VotesU18F','Votes1829F','Votes3044F','Votes45AF'].mean()\n\n\n","516d2295":"f,(ax1,ax2)=plt.subplots(1,2)\ngraph_1=sns.heatmap(Male_vote,cmap=\"rainbow\",annot=True,cbar=False,ax=ax1)\ngraph_1.set_ylabel('Genres',fontsize=12)\ngraph_1.set_xlabel('Male Age Group',fontsize=12)\ngraph_2=sns.heatmap(Female_votes,cmap=\"rainbow\",annot=True,ax=ax2)\ngraph_2.set_xlabel('Female Age Group',fontsize=12)\ngraph_2.set_yticks([])\nplt.show()","292beca4":"movies.Country","192bbeec":"movies.info()","d4f85b34":"# Creating IFUS column\nmovies['IFUS']=movies['Country'].apply(lambda x:'USA' if x=='USA'else 'non-USA')","bf7cf091":"# Box plot - 1: CVotesUS(y) vs IFUS(x)\nplt.figure(figsize=[12,12])\nfig,axes=plt.subplots(nrows=1,ncols=2)\nplot_1=sns.boxplot(data=movies,x='IFUS',y='CVotesUS',ax=axes[0])\nplot_1.set_title('Votes From USA People',fontsize=14)\nplot_1.set_xlabel('IFUS',fontsize=14)\nplot_1.set_ylabel('CVotesUS',fontsize=14)\n\nplot_2=sns.boxplot(data=movies,x='IFUS',y='CVotesnUS',ax=axes[1])\nplot_2.axes.set_title('Votes From non-USA People',fontsize=14)\nplot_2.set_xlabel('IFUS',fontsize=14)\nplot_2.set_ylabel('CVotesnUS',fontsize=14)\nplt.tight_layout()\nplt.show()","954b570c":"# Box plot - 2: VotesUS(y) vs IFUS(x)\nplt.figure(figsize=[12,12])\nfig,axes=plt.subplots(nrows=1,ncols=2)\nplot_1=sns.boxplot(data=movies,x='IFUS',y='VotesUS',ax=axes[0])\nplot_1.set_title('Rating From USA People',fontsize=14)\nplot_1.set_xlabel('IFUS',fontsize=14)\nplot_1.set_ylabel('VotesUS',fontsize=14)\n\n\n\nplot_2=sns.boxplot(data=movies,x='IFUS',y='VotesnUS',ax=axes[1])\nplot_2.axes.set_title('Rating From non-USA People',fontsize=14)\nplot_2.set_xlabel('IFUS',fontsize=14)\nplot_2.set_ylabel('VotesnUS',fontsize=14)\nplt.tight_layout()\nplt.show()\n\n","1869c376":"# Sorting by CVotes1000\ngenre_top10_Cvotes=genre_top10.sort_values(by='CVotes1000',ascending=False)","3ac80d48":"# Bar plot\nplt.figure(figsize=[8,4])\nsns.barplot(x=genre_top10_Cvotes.index,y=genre_top10_Cvotes.CVotes1000,color='Gray')\nplt.title('Top 1000 Voters VS Genres',fontsize=18)\nplt.xlabel('Genres',fontsize=16)\nplt.ylabel('CVotes1000',fontsize=16)\nplt.show()\n\n","24f17aaf":"Sci-Fi is the highest votes in Genres by top 1000 Voters and least voted Genres is Romance","ee4ae1fa":"Most of the movies appear to be sharply 2 hour-long.","bb81c24f":"**Task 2: Data Analysis**\nNow that we have loaded the dataset and inspected it, we see that most of the data is in place. As of now, no data cleaning is required, so let's start with some data manipulation, analysis, and visualisation to get various insights about the data.\n\n**Subtask 2.1: Reduce those Digits!**\nThese numbers in the budget and gross are too big, compromising its readability. Let's convert the unit of the budget and gross columns from $ to million $ first.","e84791ba":"Subtask 3.4: US vs non-US Cross Analysis\n    \nThe dataset contains both the US and non-US movies. Let's analyse how both the US and the non-US voters have responded to the US and the non-US movies.","549f39bf":"**Subtask 2.2: Let's Talk Profit!**\n\nCreate a new column called profit which contains the difference of the two columns: gross and budget.\nSort the dataframe using the profit column as reference.\nExtract the top ten profiting movies in descending order and store them in a new dataframe - top10.\nPlot a scatter or a joint plot between the columns budget and profit and write a few words on what you observed.\nExtract the movies with a negative profit and store them in a new dataframe - neg_profit","c2629d02":"IMDb Movie Assignment \nYou have the data for the 100 top-rated movies from the past decade along with various pieces of information about the movie, its actors, and the voters who have rated these movies online. In this assignment, you will try to find some interesting insights into these movies and their voters, using Python.\n","1f06be0f":"**Subtask 1.2: Inspect the Dataframe\nInspect the dataframe for dimensions, null-values, and summary of different numeric columns.**","d6f24050":"\nInference 1: There are some outliers for USA movies in both Box plot\n\nInference 2:USA movies got higher numbers of votes by USA and non USA people","6495fe3d":"Task 1: Reading the data\nSubtask 1.1: Read the Movies Data.\nRead the movies data file provided and store it in a dataframe movies.****","8f3f3185":"Inference 1: Non USA movies got lower rating by both USA ans Non USA prople\n\nInference 2:ava rating is in between approx 7.8 to 8 and for non-USA ava rating is 7.7 to 7.8 it means in terms of ava mean rating is higher for USA movies.","2c81c937":"Task 3 : Demographic analysis\nIf you take a look at the last columns in the dataframe, most of these are related to demographics of the voters (in the last subtask, i.e., 2.8, you made use one of these columns - CVotesU18). We also have three genre columns indicating the genres of a particular movie. We will extensively use these columns for the third and the final stage of our assignment wherein we will analyse the voters across all demographics and also see how these vary across various genres. So without further ado, let's get started with demographic analysis.\nSubtask 3.1 Combine the Dataframe by Genres\n\nThere are 3 columns in the dataframe - genre_1, genre_2, and genre_3. As a part of this subtask, you need to aggregate a few values over these 3 columns.\n\n1) First create a new dataframe df_by_genre that contains genre_1, genre_2, and genre_3 and all the columns related to CVotes\/Votes from the movies data frame. There are 47 columns to be extracted in total.\n\n2) Now, Add a column called cnt to the dataframe df_by_genre and initialize it to one. You will realise the use of this column by the end of this subtask.\n3) First group the dataframe df_by_genre by genre_1 and find the sum of all the numeric columns such as cnt, columns related to CVotes and Votes columns and store it in a dataframe df_by_g1.\n4) Perform the same operation for genre_2 and genre_3 and store it dataframes df_by_g2 and df_by_g3 respectively.\n\n5) The column cnt on aggregation has basically kept the track of the number of occurences of each genre.Subset the genres that have atleast 10 movies into a new dataframe genre_top10 based on the cnt column value.\n\n6) Now, take the mean of all the numeric columns by dividing them with the column value cnt and store it back to the same dataframe. We will be using this dataframe for further analysis in this task unless it is explicitly mentioned to use the dataframe movies.\n\n7) Since the number of votes can't be a fraction, type cast all the CVotes related columns to integers. Also, round off all the Votes related columns upto two digits after the decimal point.","a0be66f6":"Inferences: A few inferences that can be seen from the heatmap above is that males have voted more than females, and Sci-Fi appears to be most popular among the 18-29 age group irrespective of their gender. What more can you infer from the two heatmaps that you have plotted? Write your three inferences\/observations below:\n\nInference 1: 'U18M'voted more than 'U18F'\n\nInference 2:In bar chart 'Sci-FI'has lower count but number of votes is higher than other genres.\n\nInference 3:In all age groups 'U18' and '45AM\/45AF' have voted less ,reson could be they watch less movies or they might not vote.","6269d644":"1) There are a couple of movies that have very high budgets but still having negative profits.\n\n2) I can see a mild postive trend between (budget and profit) as budget increases,profit also increases.\n\nThe dataset contains the 100 best performing movies from the year 2010 to 2016. However scatter plot tells a different story. You can notice that there are some movies with negative profit. Although good movies do incur losses, but there appear to be quite a few movie with losses. What can be the reason behind this? Lets have a closer look at this by finding the movies with negative profit.\n\n","e3f9d387":"**Subtask 2.6: Runtime Analysis**\n\nThere is a column named Runtime in the dataframe which primarily shows the length of the movie. It might be intersting to see how this variable this distributed. Plot a histogram or distplot of seaborn to find the Runtime range most of the movies fall into.","bd52162c":"If you take a look at the final dataframe that you have gotten, you will see that you now have the complete information about all the demographic (Votes- and CVotes-related) columns across the top 10 genres. We can use this dataset to extract exciting insights about the voters!\n","0045edd1":"**Subtask 2.4: Find the Most Popular Trios - I**\n\n\nYou're a producer looking to make a blockbuster movie. There will primarily be three lead roles in your movie and you wish to cast the most popular actors for it. Now, since you don't want to take a risk, you will cast a trio which has already acted in together in a movie before. The metric that you've chosen to check the popularity is the Facebook likes of each of these actors.\nThe dataframe has three columns to help you out for the same, viz. actor_1_facebook_likes, actor_2_facebook_likes, and actor_3_facebook_likes. Your objective is to find the trios which has the most number of Facebook likes combined. That is, the sum of actor_1_facebook_likes, actor_2_facebook_likes and actor_3_facebook_likes should be maximum. Find out the top 5 popular trios, and output their names in a list.","d1cec455":"Subtask 3.5: Top 1000 Voters Vs Genres\n\nYou might have also observed the column CVotes1000. This column represents the top 1000 voters on IMDb and gives the count for the number of these voters who have voted for a particular movie. Let's see how these top 1000 voters have voted across the genres.\n\nSort the dataframe genre_top10 based on the value of CVotes1000in a descending order.\n\nMake a seaborn barplot for genre vs CVotes1000.\n\n","af516118":"1) Create a column IFUS in the dataframe movies. The column IFUS should contain the value \"USA\" if the Country of the movie is \"USA\". For all other countries other than the USA, IFUS should contain the value non-USA.\n\n2) Now make a boxplot that shows how the number of votes from the US people i.e. CVotesUS is varying for the US and non-US movies. Make use of the column IFUS to make this plot. Similarly, make another subplot that shows how non US voters have voted for the US and non-US movies by plotting CVotesnUS for both the US and non-US movies. Write any of your two inferences\/observations from these plots.\n\n3) Again do a similar analysis but with the ratings. Make a boxplot that shows how the ratings from the US people i.e. VotesUS is varying for the US and non-US movies. Similarly, make another subplot that shows how VotesnUS is varying for the US and non-US movies. Write any of your two inferences\/observations from these plots.","127079da":" Drama bar is the tallest","78df99a9":"**Subtask 3.2: Genre Counts!**\n\nNow let's derive some insights from this data frame. Make a bar chart plotting different genres vs cnt using seaborn.","b0cf2693":"The genre Romance seems to be most unpopular among the top 1000 voters.","99d807ef":"Subtask 2.3: The General Audience and the Critics\nYou might have noticed the column MetaCritic in this dataset. This is a very popular website where an average score is determined through the scores given by the top-rated critics. Second, you also have another column IMDb_rating which tells you the IMDb rating of a movie. This rating is determined by taking the average of hundred-thousands of ratings from the general audience.\nAs a part of this subtask, you are required to find out the highest rated movies which have been liked by critics and audiences alike.\nFirstly you will notice that the MetaCritic score is on a scale of 100 whereas the IMDb_rating is on a scale of 10. First convert the MetaCritic column to a scale of 10.\nNow, to find out the movies which have been liked by both critics and audiences alike and also have a high rating overall, you need to -\nCreate a new column Avg_rating which will have the average of the MetaCritic and Rating columns\n\nSort these values in a descending order of Avg_rating and retain only the movies with a rating equal to higher than 8 and store these movies in a new dataframe UniversalAcclaim.","89671fb2":"**Subtask 2.5: Find the Most Popular Trios - II**\n\nIn the previous subtask you found the popular trio based on the total number of facebook likes. Let's add a small condition to it and make sure that all three actors are popular. The condition is none of the three actors' Facebook likes should be less than half of the other two. For example, the following is a valid combo:\nactor_1_facebook_likes: 70000\nactor_2_facebook_likes: 40000\nactor_3_facebook_likes: 50000\nBut the below one is not:\nactor_1_facebook_likes: 70000\nactor_2_facebook_likes: 40000\nactor_3_facebook_likes: 30000\nsince in this case, actor_3_facebook_likes is 30000, which is less than half of actor_1_facebook_likes.\nHaving this condition ensures that you aren't getting any unpopular actor in your trio (since the total likes calculated in the previous question doesn't tell anything about the individual popularities of each actor in the trio.).\nYou can do a manual inspection of the top 5 popular trios you have found in the previous subtask and check how many of those trios satisfy this condition. Also, which is the most popular trio after applying the condition above?\n","ed8bae8b":"Deadpool has a highest numbers of votes.","18a25956":"Inferences: Sci-Fi appears to be the highest rated genre in the age group of U18 for both males and females. Also, females in this age group have rated it a bit higher than the males in the same age group. What more can you infer from the two heatmaps that you have plotted? Write your three inferences\/observations below:\n\nInference 1:Animation Genres continuously voted by Female but in Male Votes is less,as female of all age group like this Genres\n\nInference 2:number of votes for romance is less by male as well as by female but rated well by 'U18' Group\n\nInference 3:'30 to 45' age group people has given ava rating for all Genres\n","a7a1ea0c":"Subtask 3.3: Gender and Genre\nIf you have closely looked at the Votes- and CVotes-related columns, you might have noticed the suffixes F and M indicating Female and Male. Since we have the vote counts for both males and females, across various age groups, let's now see how the popularity of genres vary between the two genders in the dataframe.","d192c4cb":"1) Make the first heatmap to see how the average number of votes of males is varying across the genres. Use seaborn heatmap for this analysis. The X-axis should contain the four age-groups for males, i.e., CVotesU18M,CVotes1829M, CVotes3044M, and CVotes45AM. The Y-axis will have the genres and the annotation in the heatmap tell the average number of votes for that age-male group.\n\n2) Make the second heatmap to see how the average number of votes of females is varying across the genres. Use seaborn heatmap for this analysis. The X-axis should contain the four age-groups for females, i.e., CVotesU18F,CVotes1829F, CVotes3044F, and CVotes45AF. The Y-axis will have the genres and the annotation in the heatmap tell the average number of votes for that age-female group.\n\n3) Make sure that you plot these heatmaps side by side using subplots so that you can easily compare the two genders and derive insights.\n\n4) Repeat subtasks 1 to 4, but now instead of taking the CVotes-related columns, you need to do the same process for the Votes-related columns. These heatmaps will show you how the two genders have rated movies across various genres.\n","da0f1f30":"Subtask 2.7: R-Rated Movies\nAlthough R rated movies are restricted movies for the under 18 age group, still there are vote counts from that age group. Among all the R rated movies that have been voted by the under-18 age group, find the top 10 movies that have the highest number of votes i.e.CVotesU18 from the movies dataframe. Store these in a dataframe named PopularR.****"}}