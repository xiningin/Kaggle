{"cell_type":{"52e42182":"code","a5c53bbc":"code","52d27a4a":"code","213fda9f":"code","47c43da4":"code","d371fb43":"code","d15f0ce0":"code","2bd141ed":"code","60a91891":"code","6b2828c0":"code","01b954aa":"markdown","83ab6168":"markdown","525a7837":"markdown"},"source":{"52e42182":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport pydicom\nimport glob, pylab\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-white')\nimport seaborn as sns\nsns.set_style(\"white\")\n\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n","a5c53bbc":"# number of images in datasets\nprint(len(os.listdir(\"..\/input\/stage_1_test_images\")), 'imgs in a test set')\nprint(len(os.listdir(\"..\/input\/stage_1_train_images\")), 'imgs in a train set')","52d27a4a":"class_info = pd.read_csv('..\/input\/stage_1_detailed_class_info.csv', index_col='patientId')\ntrain_labeles = pd.read_csv('..\/input\/stage_1_train_labels.csv', index_col='patientId')","213fda9f":"#some patients have more than one bounding box\ntrain_labeles[train_labeles.index.values == '00436515-870c-4b36-a041-de91049b9ab4']","47c43da4":"#a vast majority of images though have 1 bounding box, rarely 2, and almost never 3 or 4\nnum_of_boxes_per_patient = train_labeles.index.value_counts().values\nsns.distplot(num_of_boxes_per_patient, kde=False)","d371fb43":"classes = class_info['class'].value_counts()\nsns.barplot(y=classes.index, x=classes.values, alpha=0.5)","d15f0ce0":"train_labeles['BoundBoxArea'] = train_labeles.width*train_labeles.height\ntrain_labeles.BoundBoxArea.fillna(0, inplace=True)\nboxes = train_labeles[train_labeles.BoundBoxArea > 0]\n\nfig, axs = plt.subplots(1, 2, figsize=(13, 7))\nsns.scatterplot(x='x', y='y', hue='BoundBoxArea', data=boxes, ax=axs[0])\nsns.distplot(boxes.BoundBoxArea.values, ax=axs[1], label='BoundBoxArea')\nplt.legend()\nplt.show()","2bd141ed":"#https:\/\/www.kaggle.com\/peterchang77\/exploratory-data-analysis\n\ndef parse_data(df):\n    \"\"\"\n    Method to read a CSV file (Pandas dataframe) and parse the \n    data into the following nested dictionary:\n\n      parsed = {\n        \n        'patientId-00': {\n            'dicom': path\/to\/dicom\/file,\n            'label': either 0 or 1 for normal or pnuemonia, \n            'boxes': list of box(es)\n        },\n        'patientId-01': {\n            'dicom': path\/to\/dicom\/file,\n            'label': either 0 or 1 for normal or pnuemonia, \n            'boxes': list of box(es)\n        }, ...\n\n      }\n\n    \"\"\"\n    # --- Define lambda to extract coords in list [y, x, height, width]\n    extract_box = lambda row: [row['y'], row['x'], row['height'], row['width']]\n\n    parsed = {}\n    for n, row in df.iterrows():\n        # --- Initialize patient entry into parsed \n        pid = row['patientId']\n        if pid not in parsed:\n            parsed[pid] = {\n                'dicom': '..\/input\/stage_1_train_images\/%s.dcm' % pid,\n                'label': row['Target'],\n                'boxes': []}\n\n        # --- Add box if opacity is present\n        if parsed[pid]['label'] == 1:\n            parsed[pid]['boxes'].append(extract_box(row))\n\n    return parsed\n\ndef draw(data):\n    \"\"\"\n    Method to draw single patient with bounding box(es) if present \n\n    \"\"\"\n    # --- Open DICOM file\n    d = pydicom.read_file(data['dicom'])\n    im = d.pixel_array\n\n    # --- Convert from single-channel grayscale to 3-channel RGB\n    im = np.stack([im] * 3, axis=2)\n\n    # --- Add boxes with random color if present\n    for box in data['boxes']:\n        rgb = np.floor(np.random.rand(3) * 256).astype('int')\n        im = overlay_box(im=im, box=box, rgb=rgb, stroke=6)\n\n    pylab.imshow(im, cmap=pylab.cm.gist_gray)\n    pylab.axis('off')\n\ndef overlay_box(im, box, rgb, stroke=1):\n    \"\"\"\n    Method to overlay single box on image\n\n    \"\"\"\n    # --- Convert coordinates to integers\n    box = [int(b) for b in box]\n    \n    # --- Extract coordinates\n    y1, x1, height, width = box\n    y2 = y1 + height\n    x2 = x1 + width\n\n    im[y1:y1 + stroke, x1:x2] = rgb\n    im[y2:y2 + stroke, x1:x2] = rgb\n    im[y1:y2, x1:x1 + stroke] = rgb\n    im[y1:y2, x2:x2 + stroke] = rgb\n\n    return im","60a91891":"df = pd.read_csv('..\/input\/stage_1_train_labels.csv')\nparsed = parse_data(df)","6b2828c0":"for i in range(5,10):\n    fig, axes = plt.subplots(1, 2, figsize=(10,10))\n    patientId = train_labeles.index.unique()[i]\n    draw(parsed[patientId])\n    dcm_file = '..\/input\/stage_1_train_images\/%s.dcm' % patientId\n    dcm_data = pydicom.read_file(dcm_file)\n    im = dcm_data.pixel_array\n    axes[0].imshow(im, cmap=pylab.cm.gist_gray)\n    axes[0].set_yticklabels([])\n    axes[0].set_xticklabels([])\n","01b954aa":"# Some images with and without bounding boxes","83ab6168":"# Distribution of bounding boxes","525a7837":"# Different types of classes"}}