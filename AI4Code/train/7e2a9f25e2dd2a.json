{"cell_type":{"628faeb0":"code","55a205fb":"code","4938c1ea":"code","d069c850":"code","aa8b20ee":"code","b751d20b":"code","bc758efd":"code","1ccc5a54":"code","7a470de2":"code","0d1027e8":"markdown","75e9938b":"markdown"},"source":{"628faeb0":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\nrandom_seed = 91\nnp.random.seed(random_seed)","55a205fb":"train = pd.read_csv(\"train.csv\")\ntest = pd.read_csv(\"test.csv\")\n\nX = train.sample(frac=1).copy()\ny = X.pop(\"eyeDetection\")","4938c1ea":"from sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score\n\ntrain_X, val_X, train_y, val_y = train_test_split(X,y,test_size=.2, random_state=random_seed)\n\ncls_gb = GradientBoostingClassifier(random_state=random_seed)\ncls_gb.fit(train_X,train_y)\n\npredictions_train = cls_gb.predict(train_X)\npredictions_val = cls_gb.predict(val_X)\nprint(\"%f %f\"%(accuracy_score(predictions_train, train_y),accuracy_score(predictions_val, val_y)))","d069c850":"help(GradientBoostingClassifier)","aa8b20ee":"#Note: the ranges used to be bigger, but I narrowed them down eventually\nfor maxdepth in range(10,14,1):\n    for nestimators in range(100,300,50):\n        for sub_sample in [0.75]:\n            cls_gb = GradientBoostingClassifier(n_estimators=nestimators,max_depth=maxdepth,max_features=0.5,subsample=sub_sample,random_state=random_seed)\n            cls_gb.fit(train_X,train_y)\n            predictions_train = cls_gb.predict(train_X)\n            predictions_val = cls_gb.predict(val_X)\n            print(\"%i %i %f %f %f\"%(maxdepth,nestimators,sub_sample,accuracy_score(predictions_train, train_y),accuracy_score(predictions_val, val_y)))","b751d20b":"cls_gb = GradientBoostingClassifier(n_estimators=250,max_depth=10,max_features=0.5,subsample=0.75,random_state=random_seed)\n\ncls_gb.fit(X,y)\n\n#code for submission\nindex_col = test.pop(\"index\")\npredictions_test = cls_gb.predict_proba(test)\nout_tmp = pd.DataFrame()\nout_tmp[\"index\"] = index_col\nout_tmp[\"eyeDetection\"] = predictions_test[:,1]\nprint(out_tmp.head())\nout_tmp.to_csv(\"submission.csv\",index=False)","bc758efd":"from sklearn.model_selection import cross_val_predict\n\npredictions_val = cross_val_predict(cls, X, y, cv=3)\nprint(\"%f\"%(accuracy_score(predictions_val, y)))","1ccc5a54":"from sklearn.model_selection import GridSearchCV\n\nparameters = {'criterion': [\"gini\", \"entropy\"], 'max_depth':range(2,20,2)}\ncls_G = GridSearchCV(cls, parameters,cv=3)\ncls_G.fit(X,y)\nprint(cls_G.best_estimator_)\nprint(cls_G.best_score_)","7a470de2":"predictions = cls_G.best_estimator_.predict(X)\nprint(\"%f\"%(accuracy_score(predictions, y)))","0d1027e8":"!!! Before, we chose the ideal hyperparameter based on the train set. But for submission and predicting the labels for everything, we now need to fit the entire data (X and y instead of train_X and train_y).","75e9938b":"# Eye state detection Template"}}