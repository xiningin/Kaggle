{"cell_type":{"0dddcfef":"code","c8a70f68":"code","91098688":"code","c835e9b2":"code","3eedfd00":"code","50158df0":"code","8630f848":"code","023be698":"markdown","39d41cfa":"markdown","9cab56c2":"markdown","54a09b1c":"markdown","fd633666":"markdown","7eba4380":"markdown","c8c500a1":"markdown","9d8a2f9f":"markdown","8e7f182a":"markdown","dc35fe12":"markdown","c148b543":"markdown"},"source":{"0dddcfef":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\n%matplotlib inline","c8a70f68":"df_original = pd.read_csv('..\/input\/USArrests.csv',index_col=0)\ndf = (df_original-df_original.mean())\/df_original.std()\ndf.head()","91098688":"SSE = []  # \u5b58\u653e\u6bcf\u6b21\u7ed3\u679c\u7684\u8bef\u5dee\u5e73\u65b9\u548c\nfor k in range(1,11):\n    estimator = KMeans(n_clusters=k)  # \u6784\u9020\u805a\u7c7b\u5668\n    estimator.fit(df)\n    SSE.append(estimator.inertia_)\nX = range(1,11)\nplt.xlabel('k')\nplt.ylabel('SSE')\nplt.plot(X,SSE,'o-')\nplt.show()","c835e9b2":"from sklearn.metrics import silhouette_score\nScores = [0]  # \u5b58\u653e\u8f6e\u5ed3\u7cfb\u6570,\u6839\u636e\u8f6e\u5ed3\u7cfb\u6570\u7684\u8ba1\u7b97\u516c\u5f0f\uff0c\u53ea\u6709\u4e00\u4e2a\u7c7b\u7c07\u65f6\uff0c\u8f6e\u5ed3\u7cfb\u6570\u4e3a0\nfor k in range(2,11):\n    estimator = KMeans(n_clusters=k)  # \u6784\u9020\u805a\u7c7b\u5668\n    estimator.fit(df)\n    Scores.append(silhouette_score(df,estimator.labels_,metric='euclidean'))\nX = range(1,11)\nplt.xlabel('k')\nplt.ylabel('silhouette')\nplt.plot(X,Scores,'o-')\nplt.show()","3eedfd00":"def calculate_Wk(data, centroids, cluster):\n    K = centroids.shape[0]\n    wk = 0.0\n    for k in range(K):\n        data_in_cluster = data[cluster == k, :]\n        center = centroids[k, :]\n        num_points = data_in_cluster.shape[0]\n        for i in range(num_points):\n            wk = wk + np.linalg.norm(data_in_cluster[i, :]-center, ord=2) ** 2\n    return wk\ndef bounding_box(data):\n    dim = data.shape[1]\n    boxes = []\n    for i in range(dim):\n        data_min = np.amin(data[:, i])\n        data_max = np.amax(data[:, i])\n        boxes.append((data_min, data_max))\n    return boxes\ndef gap_statistic(data, max_K, B, cluster_algorithm):\n    num_points, dim = data.shape\n    K_range = np.arange(1, max_K, dtype=int)\n    num_K = len(K_range)\n    boxes = bounding_box(data)\n    data_generate = np.zeros((num_points, dim))\n    log_Wks = np.zeros(num_K)\n    gaps = np.zeros(num_K)\n    sks = np.zeros(num_K)\n    for ind_K, K in enumerate(K_range):\n        km = cluster_algorithm(K)\n        km.fit(data)\n        cluster_centers, labels= km.cluster_centers_, km.labels_\n        log_Wks[ind_K] = np.log(calculate_Wk(data, cluster_centers, labels))\n        # generate B reference data sets\n        log_Wkbs = np.zeros(B)\n        for b in range(B):\n            for i in range(num_points):\n                for j in range(dim):\n                    data_generate[i][j] = \\\n                        np.random.uniform(boxes[j][0], boxes[j][1])\n            km = cluster_algorithm(K)\n            km.fit(data_generate)\n            cluster_centers, labels= km.cluster_centers_, km.labels_\n            log_Wkbs[b] = \\\n                np.log(calculate_Wk(data_generate, cluster_centers, labels))\n        gaps[ind_K] = np.mean(log_Wkbs) - log_Wks[ind_K]\n        sks[ind_K] = np.std(log_Wkbs) * np.sqrt(1 + 1.0 \/ B)\n        \n    return gaps, sks, log_Wks","50158df0":"gaps = gap_statistic(df.to_numpy(), 11,50,KMeans)[0]\nX = range(1,11)\nplt.xlabel('k')\nplt.ylabel('Gap Statistic')\nplt.plot(X,gaps,'o-')\nplt.show()","8630f848":"from sklearn.metrics import davies_bouldin_score\nCH = []\nfor k in range(2,11):\n    estimator = KMeans(n_clusters=k)  # \u6784\u9020\u805a\u7c7b\u5668\n    estimator.fit(df)\n    CH.append(davies_bouldin_score(df,estimator.labels_))\nX = range(2,11)\nplt.xlabel('k')\nplt.ylabel('davies_bouldin_score')\nplt.plot(X,CH,'o-')\nplt.show()","023be698":"## \u8f6e\u5ed3\u7cfb\u6570","39d41cfa":"## Gap Statistic\n\u6839\u636eGap Statistic\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff0cPython\u4ee3\u7801\u5982\u4e0b\u3002","9cab56c2":"## \u5bfc\u5165\u5305","54a09b1c":"\u53ef\u4ee5\u89c2\u5bdf\u5230\u5f53k=4\u65f6\u6709\u660e\u663e\u7684\u201c\u8098\u90e8\u201d\u5f62\u72b6\uff0c\u8bef\u5dee\u5e73\u65b9\u548c\u51cf\u5c11\u7684\u8d8b\u52bf\u4e0d\u518d\u660e\u663e\u3002\u6240\u4ee5\u624b\u8098\u6cd5\u7684\u6700\u4f73\u7c7b\u7c07\u6570\u91cf\u662f4\u3002","fd633666":"\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c\u5f53k\u53d64\u65f6gap\u503c\u6700\u5927\uff0c\u6240\u4ee54\u662f\u6700\u4f18\u7c7b\u7c07\u6570\u91cf\u3002","7eba4380":"## \u624b\u8098\u6cd5","c8c500a1":"# \u4f7f\u7528Python\u8ba1\u7b97\u805a\u7c7b\u6700\u4f18\u7c7b\u7c07\u6570\u91cf","9d8a2f9f":"\u5f53k=2\u65f6\uff0c\u8f6e\u5ed3\u7cfb\u6570\u53d6\u6700\u5927\u503c\uff0c\u6240\u4ee5\u9009\u62e92\u4f5c\u4e3a\u6700\u4f18\u7c7b\u7c07\u6570\u91cf","8e7f182a":"## \u51c6\u5907\u6570\u636e\n\u6211\u4eec\u4f7f\u7528USArrests(\u7f8e\u56fd\u62d8\u6355\u6570\u636e)\u4f5c\u4e3a\u6f14\u793a\u6570\u636e\u96c6\u3002\u8bfb\u5165\u6570\u636e\uff0c\u5e76\u5c06\u6570\u636e\u6807\u51c6\u5316\u4ee5\u65b9\u4fbf\u6bd4\u8f83\u4e0d\u540c\u53d8\u91cf\u3002","dc35fe12":"\u51fd\u6570`gap_statistic`\u5c06\u6574\u4e2a\u8fc7\u7a0b\u5c01\u88c5\uff0c\u9700\u8981\u4f20\u5165\u89c2\u6d4b\u6570\u636e\u3001\u7c7b\u7c07\u6570\u91cf\u7684\u4e0a\u754c\u3001\u63a8\u65ad\u6570\u636e\u7684\u7b14\u6570\u4ee5\u53ca\u805a\u7c7b\u7b97\u6cd5\u3002","c148b543":"## \u5176\u4ed6\u6307\u6807\n\u9664\u4e86\u4e0a\u9762\u4e09\u79cd\u65b9\u6cd5\u5916\uff0cscikit-learn\u63d0\u4f9b\u4e86\u8bb8\u591a\u805a\u7c7b\u7ed3\u679c\u8bc4\u4ef7\u6307\u6807\uff1a[scikit-learn\u805a\u7c7b\u6307\u6807](https:\/\/scikit-learn.org\/stable\/modules\/classes.html#clustering-metrics)\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6709\u4e9b\u6307\u6807\u5728\u6570\u636e\u7f3a\u5931\u771f\u5b9e\u6807\u7b7e\u7684\u60c5\u51b5\u4e0b\u662f\u65e0\u6cd5\u4f7f\u7528\u7684\u3002\u4ee5\u4e0b\u662f\u4f7f\u7528`davies_bouldin_score`\u6307\u6807\u7684\u4f8b\u5b50,\u5b83\u8ba1\u7b97\u7684\u662fDavies-Bouldin\u5f97\u5206\uff0c\u5f97\u5206\u8d8a\u4f4e\u805a\u7c7b\u6548\u679c\u8d8a\u597d\u3002"}}