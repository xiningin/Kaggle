{"cell_type":{"6fd3d90c":"code","779f92ce":"code","78d995f6":"code","d1902f6e":"markdown","94d31a90":"markdown","72edb96c":"markdown","fa91eb93":"markdown","fd6a696a":"markdown","cdf9d3e0":"markdown","7c1c42a4":"markdown","7203d5bb":"markdown","da9fef53":"markdown","000225ab":"markdown","b40da227":"markdown","7ddd0978":"markdown","364c6bce":"markdown","ade0a4f3":"markdown","8bb0e78a":"markdown","36359a39":"markdown","fef4908b":"markdown","d0a6ea53":"markdown","824cc9c1":"markdown"},"source":{"6fd3d90c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","779f92ce":"!python -m pip install snap-stanford","78d995f6":"import snap","d1902f6e":"## The number of nodes with more than 10 outgoing edges (out-degree > 10).","94d31a90":"## IDs of the top 3 most central nodes in the network by PagePank scores. PageRank scores are calculated in Snap.py with function GetPageRank.","72edb96c":"## The number of edges and the number of nodes in the largest weakly connected component. The largest weakly connected component is calculated in Snap.py with function GetMxWcc.","fa91eb93":"## The number of nodes in the network. (G small has 3 nodes.)","fd6a696a":"## (18 points) Plot the distribution of out-degrees of nodes in the network on a log-log scale. Each data point is a pair (x, y) where x is a positive integer and y is the number of nodes in the network with out-degree equal to x. Restrict the range of x between the minimum and maximum out-degrees. You may filter out data points with a 0 entry. For the log-log scale, use base 10 for both x and y axes.\n","cdf9d3e0":"# 2 Further Analyzing the Wikipedia voters network [33 points]\nFor this problem, we use the Wikipedia voters network. If you are using Python, you might\nwant to use NumPy, SciPy, and\/or Matplotlib libraries.\n\n","7c1c42a4":"## The number of nodes with a self-edge (self-loop), i.e., the number of nodes a \u2208 V where (a, a) \u2208 E. (G small has 1 self-edge.)","7203d5bb":"## The number of nodes with fewer than 10 incoming edges (in-degree < 10).","da9fef53":"## The number of undirected edges in the network, i.e., the number of unique unordered pairs (a, b), a 6 = b, for which (a, b) \u2208 E or (b, a) \u2208 E (or both). If both (a, b) and (b, a) are edges, this counts a single undirected edge. (G small has 2 undirected edges.)\n","000225ab":"You can find more details about this exercise on the Snap.py tutorial page: http:\/\/snap.stanford.edu\/proj\/snap-icwsm\/. As an extra exercise, extend the tutorial to find experts in other programming languages or topics.","b40da227":"## The number of reciprocated edges in the network, i.e., the number of unique unordered pairs of nodes (a, b), a 6 = b, for which (a, b) \u2208 E and (b, a) \u2208 E. (G small has 1 reciprocated edge.)","7ddd0978":"## The number of nodes of zero out-degree. (G small has 1 node with zero out-degree.)","364c6bce":"## The number of nodes of zero in-degree. (G small has 0 nodes with zero in-degree.)","ade0a4f3":"## IDs of the top 3 hubs and top 3 authorities in the network by HITS scores. HITS scores are calculated in Snap.py with function GetHits.","8bb0e78a":"# Analyzing the Wikipedia voters network [27 points]\nDownload the Wikipedia voting network wiki-Vote.txt.gz: http:\/\/snap.stanford.edu\/data\/wiki-Vote.html.\nUsing one of the network analysis tools above, load the Wikipedia voting network. Note that\nWikipedia is a directed network. Formally, we consider the Wikipedia network as a directed\ngraph G = (V, E), with node set V and edge set E \u2282 V \u00d7 V where (edges are ordered pairs\nof nodes). An edge (a, b) \u2208 E means that user a voted on user b.  \nTo make our questions clearer, we will use the following small graph as a running example:  \nG small = (V small , E small ), where V small = {1, 2, 3} and  \nE small = {(1, 2), (2, 1), (1, 3), (1, 1)}.  \nCompute and print out the following statistics for the wiki-Vote network:\n","36359a39":"## (15 points) Compute and plot the least-square regression line for the out-degree distribution in the log-log scale plot. Note we want to find coefficients a and b such that the function log 10 y = a \u00b7 log 10 x + b, equivalently, y = 10 b \u00b7 x a , best fits the out-degree distribution. What are the coefficients a and b? For this part, you might want to use the method called polyfit in NumPy with deg parameter equal to 1.","fef4908b":"## The number of weakly connected components in the network. This value can be calculated in Snap.py via function GetWccs.","d0a6ea53":"## The number of directed edges in the network, i.e., the number of ordered pairs (a, b) \u2208 E for which a 6 = b. (G small has 3 directed edges.)","824cc9c1":"# 3 Finding Experts on the Java Programming Language on StackOverflow [40 points]\nDownload the StackOverflow network stackoverflow-Java.txt.gz: http:\/\/snap.stanford.edu\/class\/cs224w-data\/hw0\/stackoverflow-Java.txt.gz. An edge (a, b) in the network means that person a endorsed an answer from person b on a Java-related question. Using one of the network analysis tools above, load the StackOverflow network. Note that StackOverflow is a directed network. Compute and print out the following statistics for the stackoverflow-Java network:\n\n"}}