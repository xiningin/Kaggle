{"cell_type":{"c83b11d7":"code","625ac170":"code","6d8ff3f0":"code","a145c569":"code","b833b998":"code","22a87f84":"code","7f2a8baa":"code","caf311d4":"code","fc51e91a":"code","67c65e07":"code","1b3dfb17":"code","283e7a1f":"code","9eae5c94":"code","32d27050":"code","2733f09b":"code","e2d02a3a":"code","d15905ae":"code","7ef6fb1f":"code","d5bc3311":"code","df465967":"code","eef27a40":"code","c9f007a5":"code","a86a521d":"code","f3b0ac7a":"code","75652d97":"code","3b9d4e13":"code","4366f615":"code","e8ba2004":"code","149ca771":"code","90edc61f":"code","7cd0483d":"code","0a22a55f":"code","60845400":"code","4c856140":"code","5c636617":"code","93d075f4":"code","6d7b7f7c":"code","ed236ac2":"code","426f0ce8":"code","6f87f1b4":"code","f1c9ffa1":"code","7694eac3":"code","482c553f":"code","065abcb4":"code","cb63d739":"code","0a7d911d":"code","401063ad":"code","5c38075f":"code","35cc14fc":"code","13803dff":"code","6c9d57e6":"code","05f59a3e":"code","dce4b674":"code","cd80f276":"code","c0d2e1a1":"code","eccc0e73":"code","38607d7a":"code","f14dff8c":"code","38b678e6":"code","110fc290":"code","611b5af8":"code","79574a1e":"code","323e954a":"code","b76a65ba":"code","ba1a47e8":"code","f7e97f46":"code","e5e5875c":"code","c352ddb8":"code","d5181b1e":"code","5e07ac22":"code","ffb4c7bb":"code","fcae19de":"code","914acb60":"code","9e14615c":"code","7557f065":"code","3f54d0d7":"code","dc7adde1":"code","7afeb9b7":"code","c30b4cbc":"code","95142839":"code","24ef76c4":"code","07998a91":"code","fd68ec76":"code","d61399de":"code","0ba6c2bf":"code","7e31777b":"code","319e827f":"code","71769973":"code","3affeffd":"code","f31c98bb":"code","a78c5109":"markdown","a8e775b3":"markdown","28ee2e22":"markdown","b6a8bcd8":"markdown","e6b6bf89":"markdown","8609b7f2":"markdown","c0759972":"markdown","0a0507d3":"markdown","ca6911a2":"markdown","45b592de":"markdown","98d4efc1":"markdown","e922bf7e":"markdown","58e13c8b":"markdown","c4b63136":"markdown"},"source":{"c83b11d7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","625ac170":"df=pd.read_csv('..\/input\/diabetes-data-set\/diabetes.csv')","6d8ff3f0":"df.head(10)","a145c569":"df.tail(5)","b833b998":"df.describe","22a87f84":"df.isnull().values.any()","7f2a8baa":"df.isnull().sum()","caf311d4":"top_age = df.Age.value_counts().head(15)\ntop_age","fc51e91a":"plt.figure(figsize=(12,6))\nplt.xticks(rotation=75)\nplt.title('Top ages in diabates diagonised people')\nsns.barplot(x=top_age.index, y=top_age)","67c65e07":"plt.figure(figsize=(12, 6))\nplt.title(\"BloodPressure Ratio\")\nplt.xlabel('BloodPressure')\nplt.ylabel('Number of respondents')\n\nplt.hist(df.BloodPressure, bins=np.arange(10,100,10), color='purple')","1b3dfb17":"outcome_counts = df.Outcome.value_counts()\noutcome_counts","283e7a1f":"plt.figure(figsize=(12,6))\nplt.title('Outcome pie chart')\nplt.pie(outcome_counts, labels=outcome_counts.index, autopct='%1.1f%%', startangle=180)","9eae5c94":"y=df.drop(df.iloc[:,0:-1],axis=1)","32d27050":"y","2733f09b":"x=df.iloc[:,:-1]","e2d02a3a":"from sklearn.model_selection import train_test_split","d15905ae":"xtrain,xtest,ytrain,ytest=train_test_split(x,y, test_size=0.25,random_state=7)","7ef6fb1f":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import average_precision_score, precision_recall_curve\nfrom sklearn.metrics import auc, plot_precision_recall_curve\nfrom sklearn import metrics","d5bc3311":"dtc=DecisionTreeClassifier()","df465967":"dtc=dtc.fit(xtrain,ytrain)","eef27a40":"pred1=dtc.predict(xtest)","c9f007a5":"pred1","a86a521d":"print(\"Accuracy:\",metrics.accuracy_score(ytest, pred1))\nprint(\"Precision:\",metrics.precision_score(ytest, pred1))\nprint(\"Recall:\",metrics.recall_score(ytest, pred1))","f3b0ac7a":"cnf_matrix = metrics.confusion_matrix(ytest, pred1)\ncnf_matrix\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","75652d97":"y_pred_proba = dtc.predict_proba(xtest)[::,1]\nfpr, tpr, _ = metrics.roc_curve(ytest,  y_pred_proba)\nauc = metrics.roc_auc_score(ytest, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.title('Receiver Operating Characteristic Curve(ROC AUC)', y=1.1)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=4)\nplt.show()","3b9d4e13":"average_precision =average_precision_score(ytest, pred1)\ndisp = plot_precision_recall_curve(dtc, xtest, ytest)\ndisp.ax_.set_title('Binary class Precision-Recall curve: '\n                   'AP={0:0.2f}'.format(average_precision))","4366f615":"from sklearn.linear_model import LogisticRegression","e8ba2004":"logreg=LogisticRegression()","149ca771":"logreg.fit(xtrain,ytrain)","90edc61f":"pred2=logreg.predict(xtest)","7cd0483d":"pred2","0a22a55f":"print(\"Accuracy:\",metrics.accuracy_score(ytest, pred2))\nprint(\"Precision:\",metrics.precision_score(ytest, pred2))\nprint(\"Recall:\",metrics.recall_score(ytest, pred2))","60845400":"cnf_matrix = metrics.confusion_matrix(ytest, pred2)\ncnf_matrix\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","4c856140":"y_pred_proba = logreg.predict_proba(xtest)[::,1]\nfpr, tpr, _ = metrics.roc_curve(ytest,  y_pred_proba)\nauc = metrics.roc_auc_score(ytest, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.title('Receiver Operating Characteristic Curve(ROC AUC)', y=1.1)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=4)\nplt.show()","5c636617":"average_precision = average_precision_score(ytest, pred2)\nprint(average_precision)\ndisp = plot_precision_recall_curve(logreg, xtest, ytest)\ndisp.ax_.set_title('Binary class Precision-Recall curve: '\n                   'AP={0:0.2f}'.format(average_precision))","93d075f4":"from sklearn.ensemble import RandomForestClassifier","6d7b7f7c":"ran=RandomForestClassifier(n_estimators=100)","ed236ac2":"ran.fit(xtrain,ytrain)","426f0ce8":"pred3=ran.predict(xtest)","6f87f1b4":"pred3","f1c9ffa1":"print(\"Accuracy:\",metrics.accuracy_score(ytest, pred3))\nprint(\"Precision:\",metrics.precision_score(ytest, pred3))\nprint(\"Recall:\",metrics.recall_score(ytest, pred3))","7694eac3":"cnf_matrix = metrics.confusion_matrix(ytest, pred3)\ncnf_matrix\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","482c553f":"y_pred_proba = ran.predict_proba(xtest)[::,1]\nfpr, tpr, _ = metrics.roc_curve(ytest,  y_pred_proba)\nauc = metrics.roc_auc_score(ytest, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.title('Receiver Operating Characteristic Curve(ROC AUC)', y=1.1)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=4)\nplt.show()","065abcb4":"average_precision = average_precision_score(ytest, pred2)\nprint(average_precision)\ndisp = plot_precision_recall_curve(ran, xtest, ytest)\ndisp.ax_.set_title('Binary class Precision-Recall curve: '\n                   'AP={0:0.2f}'.format(average_precision))","cb63d739":"from sklearn.svm import SVC","0a7d911d":"sv=SVC(probability=True)","401063ad":"sv.fit(xtrain,ytrain)","5c38075f":"pred4=sv.predict(xtest)","35cc14fc":"pred4","13803dff":"print(\"Accuracy:\",metrics.accuracy_score(ytest, pred4))\nprint(\"Precision:\",metrics.precision_score(ytest, pred4))\nprint(\"Recall:\",metrics.recall_score(ytest, pred4))","6c9d57e6":"cnf_matrix = metrics.confusion_matrix(ytest, pred4)\ncnf_matrix\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","05f59a3e":"y_pred_proba = sv.predict_proba(xtest)[::,1]\nfpr, tpr, _ = metrics.roc_curve(ytest,  y_pred_proba)\nauc = metrics.roc_auc_score(ytest, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.title('Receiver Operating Characteristic Curve(ROC AUC)', y=1.1)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=4)\nplt.show()","dce4b674":"average_precision = average_precision_score(ytest, pred4)\nprint(average_precision)\ndisp = plot_precision_recall_curve(sv, xtest, ytest)\ndisp.ax_.set_title('Binary class Precision-Recall curve: '\n                   'AP={0:0.2f}'.format(average_precision))","cd80f276":"from sklearn.neighbors import KNeighborsClassifier","c0d2e1a1":"knn=KNeighborsClassifier(n_neighbors=23)","eccc0e73":"knn.fit(xtrain,ytrain)","38607d7a":"pred5=knn.predict(xtest)","f14dff8c":"print(\"Accuracy:\",metrics.accuracy_score(ytest, pred5))\nprint(\"Precision:\",metrics.precision_score(ytest, pred5))\nprint(\"Recall:\",metrics.recall_score(ytest, pred5))","38b678e6":"cnf_matrix = metrics.confusion_matrix(ytest, pred5)\ncnf_matrix\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","110fc290":"y_pred_proba = knn.predict_proba(xtest)[::,1]\nfpr, tpr, _ = metrics.roc_curve(ytest,  y_pred_proba)\nauc = metrics.roc_auc_score(ytest, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.title('Receiver Operating Characteristic Curve(ROC AUC)', y=1.1)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=4)\nplt.show()","611b5af8":"average_precision = average_precision_score(ytest, pred5)\nprint(average_precision)\ndisp = plot_precision_recall_curve(knn, xtest, ytest)\ndisp.ax_.set_title('Binary class Precision-Recall curve: '\n                   'AP={0:0.2f}'.format(average_precision))","79574a1e":"from sklearn.naive_bayes import GaussianNB\n#from sklearn.naive_bayes import BernoulliNB\n#from sklearn.naive_bayes import MultinomialNB","323e954a":"nbg=GaussianNB()","b76a65ba":"nbg.fit(xtrain,ytrain)","ba1a47e8":"pred6=nbg.predict(xtest)","f7e97f46":"pred6","e5e5875c":"print(\"Accuracy:\",metrics.accuracy_score(ytest, pred6))\nprint(\"Precision:\",metrics.precision_score(ytest, pred6))\nprint(\"Recall:\",metrics.recall_score(ytest, pred6))","c352ddb8":"cnf_matrix = metrics.confusion_matrix(ytest, pred6)\ncnf_matrix\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","d5181b1e":"y_pred_proba = nbg.predict_proba(xtest)[::,1]\nfpr, tpr, _ = metrics.roc_curve(ytest,  y_pred_proba)\nauc = metrics.roc_auc_score(ytest, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.title('Receiver Operating Characteristic Curve(ROC AUC)', y=1.1)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=4)\nplt.show()","5e07ac22":"average_precision = average_precision_score(ytest, pred6)\nprint(average_precision)\ndisp = plot_precision_recall_curve(nbg, xtest, ytest)\ndisp.ax_.set_title('Binary class Precision-Recall curve: '\n                   'AP={0:0.2f}'.format(average_precision))","ffb4c7bb":"from sklearn.ensemble import AdaBoostClassifier","fcae19de":"abc = AdaBoostClassifier(n_estimators=50,learning_rate=1)\n\nmodel = abc.fit(xtrain, ytrain)\n\npred7 = model.predict(xtest)","914acb60":"pred7","9e14615c":"print(\"Accuracy:\",metrics.accuracy_score(ytest, pred7))\nprint(\"Precision:\",metrics.precision_score(ytest, pred7))\nprint(\"Recall:\",metrics.recall_score(ytest, pred7))","7557f065":"cnf_matrix = metrics.confusion_matrix(ytest, pred7)\ncnf_matrix\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","3f54d0d7":"y_pred_proba = nbg.predict_proba(xtest)[::,1]\nfpr, tpr, _ = metrics.roc_curve(ytest,  y_pred_proba)\nauc = metrics.roc_auc_score(ytest, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.title('Receiver Operating Characteristic Curve(ROC AUC)', y=1.1)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=4)\nplt.show()","dc7adde1":"average_precision = average_precision_score(ytest, pred7)\nprint(average_precision)\ndisp = plot_precision_recall_curve(nbg, xtest, ytest)\ndisp.ax_.set_title('Binary class Precision-Recall curve: '\n                   'AP={0:0.2f}'.format(average_precision))","7afeb9b7":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.svm import SVC","c30b4cbc":"svc=SVC(probability=True, kernel='linear')\nabc =AdaBoostClassifier(n_estimators=50, base_estimator=svc,learning_rate=1)","95142839":"model = abc.fit(xtrain, ytrain)","24ef76c4":"pred8 = model.predict(xtest)","07998a91":"pred8","fd68ec76":"print(\"Accuracy:\",metrics.accuracy_score(ytest, pred8))\nprint(\"Precision:\",metrics.precision_score(ytest, pred8))\nprint(\"Recall:\",metrics.recall_score(ytest, pred8))","d61399de":"cnf_matrix = metrics.confusion_matrix(ytest, pred8)\ncnf_matrix\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","0ba6c2bf":"y_pred_proba = nbg.predict_proba(xtest)[::,1]\nfpr, tpr, _ = metrics.roc_curve(ytest,  y_pred_proba)\nauc = metrics.roc_auc_score(ytest, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.title('Receiver Operating Characteristic Curve(ROC AUC)', y=1.1)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend(loc=4)\nplt.show()","7e31777b":"average_precision = average_precision_score(ytest, pred8)\nprint(average_precision)\ndisp = plot_precision_recall_curve(nbg, xtest, ytest)\ndisp.ax_.set_title('Binary class Precision-Recall curve: '\n                   'AP={0:0.2f}'.format(average_precision))","319e827f":"from lightgbm import LGBMClassifier","71769973":"model_lgb= LGBMClassifier()\nmodel_lgb.fit(xtrain,ytrain)","3affeffd":"pred9=model_lgb.predict(xtest)","f31c98bb":"print(\"Accuracy:\",metrics.accuracy_score(ytest, pred9))\nprint(\"Precision:\",metrics.precision_score(ytest, pred9))\nprint(\"Recall:\",metrics.recall_score(ytest, pred9))","a78c5109":"# Random Forest Classifier","a8e775b3":"# Adaboost and SVM classifier usingn ensemble","28ee2e22":"# KNN classifier","b6a8bcd8":"# Read CSV file","e6b6bf89":"# Split X and Y data for training","8609b7f2":"# AdaBoost Classifier","c0759972":"# Data Visualization","0a0507d3":"# Logistic Regression Classifier","ca6911a2":"# Data Analysis","45b592de":"# Split data for training and testing","98d4efc1":"# Naive Bayes Classifier","e922bf7e":"# Support vector classifier","58e13c8b":"# Decision Tree Classifier","c4b63136":"# Import important libraries"}}