{"cell_type":{"185ec712":"code","f4a80d48":"code","40d78f58":"code","7549f7a5":"code","efb8eef8":"code","09fe13c8":"code","46abbf61":"code","e452c055":"code","02cb347f":"code","f593184c":"code","5d759ba1":"code","48c3f065":"code","6c3ac48f":"code","6f894553":"code","ca6a2feb":"code","67fdc334":"code","ccd2f1c8":"code","5265ee52":"code","b433428f":"code","2b208372":"code","da12ac79":"code","a1f38a75":"code","1d14589d":"code","dd882226":"code","45c8c847":"code","d1bc12eb":"code","3c84eb4f":"code","a4c42eae":"code","d4d25277":"code","c54f4703":"code","744214e9":"code","32129a54":"markdown","bb122fe3":"markdown","eb026b95":"markdown","8551218a":"markdown","efeec86d":"markdown","83617f8f":"markdown","11c13dad":"markdown","f68bbd86":"markdown","3158d6df":"markdown","86db00ac":"markdown","44c5efb4":"markdown","fd1bfe3d":"markdown","5c8c6b44":"markdown","26fb236c":"markdown","5d868de1":"markdown","263e185c":"markdown","4f5e9c33":"markdown","8d387b1a":"markdown","3ad93249":"markdown","96c08e1d":"markdown","e92e93de":"markdown","8145bcbb":"markdown","1c26e9e9":"markdown","31b9c2e7":"markdown","2d9207fd":"markdown"},"source":{"185ec712":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f4a80d48":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n%matplotlib inline","40d78f58":"df = pd.read_csv('\/kaggle\/input\/montcoalert\/911.csv')","7549f7a5":"df.info()","efb8eef8":"df.head()","09fe13c8":"df['zip'].value_counts().head(5)","46abbf61":"df['twp'].value_counts().head(5)","e452c055":"df['title'].nunique()","02cb347f":"df['Reason'] = df['title'].apply(lambda title: title.split(':')[0])","f593184c":"df['Reason'].value_counts()","5d759ba1":"sns.countplot(x='Reason',data=df,palette='viridis')","48c3f065":"type(df['timeStamp'].iloc[0])","6c3ac48f":"df['timeStamp'] = pd.to_datetime(df['timeStamp'])","6f894553":"df['Hour'] = df['timeStamp'].apply(lambda time: time.hour)\ndf['Month'] = df['timeStamp'].apply(lambda time: time.month)\ndf['Day of Week'] = df['timeStamp'].apply(lambda time: time.dayofweek)","ca6a2feb":"dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\ndf['Day of Week'] = df['Day of Week'].map(dmap)","67fdc334":"sns.countplot(x='Day of Week',data=df,hue='Reason',palette='viridis')\n\n# To relocate the legend\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","ccd2f1c8":"sns.countplot(x='Month',data=df,hue='Reason',palette='viridis')\n\n# To relocate the legend\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","5265ee52":"byMonth = df.groupby('Month').count()\nbyMonth.head()","b433428f":"byMonth['twp'].plot()","2b208372":"sns.lmplot(x='Month',y='twp',data=byMonth.reset_index())","da12ac79":"df['Date']=df['timeStamp'].apply(lambda t: t.date())","a1f38a75":"df.groupby('Date').count()['twp'].plot()\nplt.tight_layout()","1d14589d":"df[df['Reason']=='Traffic'].groupby('Date').count()['twp'].plot()\nplt.title('Traffic')\nplt.tight_layout()","dd882226":"df[df['Reason']=='Fire'].groupby('Date').count()['twp'].plot()\nplt.title('Fire')\nplt.tight_layout()","45c8c847":"df[df['Reason']=='EMS'].groupby('Date').count()['twp'].plot()\nplt.title('EMS')\nplt.tight_layout()","d1bc12eb":"dayHour = df.groupby(by=['Day of Week','Hour']).count()['Reason'].unstack()\ndayHour.head()","3c84eb4f":"plt.figure(figsize=(12,6))\nsns.heatmap(dayHour,cmap='viridis')","a4c42eae":"sns.clustermap(dayHour,cmap='viridis')","d4d25277":"dayMonth = df.groupby(by=['Day of Week','Month']).count()['Reason'].unstack()\ndayMonth.head()","c54f4703":"plt.figure(figsize=(12,6))\nsns.heatmap(dayMonth,cmap='viridis')","744214e9":"sns.clustermap(dayMonth,cmap='viridis')","32129a54":"In the titles column there are \"Reasons\/Departments\" specified before the title code. These are EMS, Fire, and Traffic. Use .apply() with a custom lambda expression to create a new column called \"Reason\" that contains this string value.\n\n**For example, if the title column value is EMS: BACK PAINS\/INJURY , the Reason column value would be EMS. **","bb122fe3":"**Create a new column called 'Date' that contains the date from the timeStamp column. Need to use apply along with the .date() method. ** ","eb026b95":"** Now create a clustermap using this DataFrame. **","8551218a":"## Creating new features\n","efeec86d":"** I can now grab specific attributes from a Datetime object by calling them. For example:**\n\n    time = df['timeStamp'].iloc[0]\n    time.hour\n\n** Now that the timestamp column are actually DateTime objects, use .apply() to create 3 new columns called Hour, Month, and Day of Week. **","83617f8f":"** Looking at the 'title' column, how many unique title codes are there? **","11c13dad":"**  Use seaborn's lmplot() to create a linear fit on the number of calls per month. Keep in mind you may need to reset the index to a column. **","f68bbd86":"## Data and setup\n___\n** Importing libraries **","3158d6df":"** These timestamps are still strings. Use [pd.to_datetime](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.to_datetime.html) to convert the column from strings to DateTime objects. **","86db00ac":"** What are the top 5 townships (twp) for 911 calls? **","44c5efb4":"___\n** Now let us begin to focus on time information. What is the data type of the objects in the timeStamp column? **","fd1bfe3d":"** Now do the same for Month:**","5c8c6b44":"** Now groupby this Date column with the count() aggregate and create a plot of counts of 911 calls.**","26fb236c":"** What are the top 5 zipcodes for 911 calls? **","5d868de1":"** Now create a HeatMap using this new DataFrame. **","263e185c":"** Checking the head of df **","4f5e9c33":"** Now recreate this plot but create 3 separate plots with each plot representing a Reason for the 911 call**","8d387b1a":"** Now repeat these same plots and operations, for a DataFrame that shows the Month as the column. **","3ad93249":"** What is the most common Reason for a 911 call based off of this new column? **","96c08e1d":"** Now use seaborn to create a countplot of 911 calls by Reason. **","e92e93de":"** Now create a simple plot off of the dataframe indicating the count of calls per month. **","8145bcbb":"____\n** Now let's move on to creating  heatmaps with seaborn and our data. We'll first need to restructure the dataframe so that the columns become the Hours and the Index becomes the Day of the Week. There are lots of ways to do this, but I would recommend trying to combine groupby with an [unstack](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.unstack.html) method. **","1c26e9e9":"** Now use seaborn to create a countplot of the Day of Week column with the hue based off of the Reason column. **","31b9c2e7":"** Check the info() of the df **","2d9207fd":"** Read in the csv file as a dataframe called df **"}}