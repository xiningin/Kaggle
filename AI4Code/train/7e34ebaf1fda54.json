{"cell_type":{"def07141":"code","293edd43":"code","f69d219e":"code","f5d41073":"code","b3deb00a":"code","b1bab42d":"code","e4b3d4c0":"code","9a7de5ae":"code","57ae8959":"code","ad89b240":"code","ff926dc0":"code","2d59de0c":"code","9354c296":"code","43f3e6b2":"code","4f502944":"code","7e9516fb":"code","5cd99081":"code","9f7d10d5":"code","84c9a128":"code","6c9795a4":"code","96bf1967":"code","653625a8":"code","70999891":"code","575ac010":"code","02d6e86c":"code","4c16b594":"code","40b5a981":"code","2a19295f":"code","34d192b1":"code","a2462c44":"code","97851e01":"code","c7e803f4":"code","698e2906":"markdown","d463e32b":"markdown","80a276ad":"markdown","73671c8b":"markdown","0d51fb4d":"markdown","d6758312":"markdown","2a4fcc4a":"markdown"},"source":{"def07141":"# importazione delle librerie\nimport pandas as pd\nimport pandas_profiling\nimport numpy as np\n\nfrom statsmodels.formula.api import ols\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"ticks\")\n\nfrom ml_metrics import rmse\n\nfrom catboost import CatBoostRegressor ","293edd43":"df = pd.read_csv('..\/input\/price-of-flats-in-moscow\/flats_moscow.csv')","f69d219e":"df.head()","f5d41073":"df = df.drop(['Unnamed: 0'], axis=1)  # rimuovo la colonna 'Unnamed: 0'","b3deb00a":"# trasformazione delle variabili categoriche in 'category' \ndf[\"walk\"] = df[\"walk\"].astype('category')\ndf[\"brick\"] = df[\"brick\"].astype('category')\ndf[\"floor\"] = df[\"floor\"].astype('category')\ndf[\"code\"] = df[\"code\"].astype('category')","b1bab42d":"# classi delle diverse colonne che compongono il dataset\nprint(df.dtypes)","e4b3d4c0":"print(df['price'].describe())\nplt.figure()\nsns.distplot(df['price'], color='g', bins=100, hist_kws={'alpha': 0.4})\nplt.title('Distribuzione della variabile price - variabile risposta; Prezzo in dollari.');","9a7de5ae":"print(df['totsp'].describe())\nplt.figure()\nsns.distplot(df['totsp'], color='g', bins=100, hist_kws={'alpha': 0.4})\nplt.title('Distribuzione della variabile totsp - predittore; metri quadrati.');","57ae8959":"print(df['livesp'].describe())\nplt.figure()\nsns.distplot(df['livesp'], color='g', bins=100, hist_kws={'alpha': 0.4})\nplt.title('Distribuzione della variabile livesp - predittore; metri quadrati calpestabili.');","ad89b240":"print(df['kitsp'].describe())\nplt.figure()\nsns.distplot(df['kitsp'], color='g', bins=100, hist_kws={'alpha': 0.4})\nplt.title('Distribuzione della variabile kitsp - predittore; metri quadrati cucina.');","ff926dc0":"print(df['dist'].describe())\nplt.figure()\nsns.distplot(df['dist'], color='g', bins=100, hist_kws={'alpha': 0.4})\nplt.title('Distribuzione della variabile dist - predittore; distanza dal centro in km.');","2d59de0c":"print(df['metrdist'].describe())\nplt.figure()\nsns.distplot(df['metrdist'], color='g', bins=100, hist_kws={'alpha': 0.4})\nplt.title('Distribuzione della variabile metrdist - predittore; distanza dalla pi\u00f9 vicina stazione della metropolitana in minuti.');","9354c296":"corr = df.select_dtypes(exclude=['category']).corr() \n\n\nplt.figure(figsize=(12, 10))\nsns.heatmap(corr, \n            cmap='viridis', vmax=1.0, vmin=-1.0, linewidths=0.1,\n            annot=True, annot_kws={\"size\": 8}, square=True)\nplt.title('Matrice di correlazione fra le vraiabili numeriche del dataframe.');","43f3e6b2":"# matrice di scatter plot con il dataframe da cui vengono escluse le variabili categoriche 'category'.\nsns.pairplot( # matrice di scatter plot con seaborn importato come sns\n    df.select_dtypes(exclude=['category']) # df da cui sono state escluse le colonne 'category'; annidare il \n                                           # comando consente di non creare un nuovo dataframe\n)","4f502944":"# barplot della variabile Walk (category)\nplt.figure()\nsns.barplot(x=df.walk.value_counts().index, y=df.walk.value_counts())\nplt.title('Conteggio delle case vicine e lontane rispetto alle stazioni della metropolitana - WALK.')\nplt.ylabel('Frequenza', fontsize=12)\nplt.xlabel('Brick', fontsize=12)\nplt.show()","7e9516fb":"# barplot della variabile Brick (category)\nplt.figure()\nsns.barplot(x=df.brick.value_counts().index, y=df.brick.value_counts())\nplt.title('Frequenze delle case in mattoni o in materiali diversi - BRICK.')\nplt.ylabel('Frequenza', fontsize=12)\nplt.xlabel('Brick', fontsize=12)\nplt.show()","5cd99081":"# barplot della variabile Floor (category)\nplt.figure()\nsns.barplot(x=df.floor.value_counts().index, y=df.floor.value_counts())\nplt.title('Conteggio delle case al piano terra o a piani superiori - FLOOR.')\nplt.ylabel('Frequenza', fontsize=12)\nplt.xlabel('Floor', fontsize=12)\nplt.show()","9f7d10d5":"# barplot della variabile Code (category)\nplt.figure()\nsns.barplot(x=df.code.value_counts().index, y=df.code.value_counts())\nplt.title('Conteggio delle diverse zone - CODE.')\nplt.ylabel('Frequenza', fontsize=12)\nplt.xlabel('Code', fontsize=12)\nplt.show()","84c9a128":"# modello da stimare - regressione lineare OLS\nRegressioneLineare = ols(\"price ~ totsp + livesp + kitsp + dist + metrdist + walk + brick + floor + code\", data=df)","6c9795a4":"# stima del modello\nRisultati = RegressioneLineare.fit()","96bf1967":"# stampo i risultati della stima del modello. NB: omettendo il print() i risultati vengono visualizzati lo stesso ma senza formattazione\nprint(RegressioneLineare.fit().summary())","653625a8":"PuntiTeoriciRegLin = Risultati.predict(df.drop(['price'], axis=1)) # calcolo i punti teorici","70999891":"RmseRegressione = rmse(actual = df.price, predicted = PuntiTeoriciRegLin) # calcolo dell'indice di Errore RMSE ","575ac010":"# stampo il valore RMSE della regressione lineare # 28.12\nprint(round(RmseRegressione, 2))","02d6e86c":"train_data = df.drop(['price'], axis=1)\ntrain_labels = df.price\ncat_dims = df.select_dtypes(include=['category'])","4c16b594":"mod_cat01 = CatBoostRegressor(loss_function = 'RMSE',\n                              iterations = 1450,\n                              depth = 16,\n                              random_seed = 5,\n                              task_type = \"GPU\",\n                              devices = '0:1')","40b5a981":"mod_cat01.fit(train_data,\n          train_labels,\n          cat_features=cat_dims,\n          verbose = False)","2a19295f":"fea_imp = pd.DataFrame({'imp': mod_cat01.feature_importances_, 'col': train_data.columns})\nfea_imp = fea_imp.sort_values(['imp', 'col'], ascending=[True, False]).iloc[-30:]\nfea_imp.plot(kind='barh', x='col', y='imp', figsize=(10, 7), legend=None)\nplt.title('Modello CatBoost 01 - Feature Importance')\nplt.ylabel('Variabile')\nplt.xlabel('Importance');","34d192b1":"PuntiTeoriciCatboost01 = mod_cat01.predict(train_data)","a2462c44":"RmseCatboost01 = rmse(actual = df.price, predicted = PuntiTeoriciCatboost01)","97851e01":"print(round(RmseCatboost01, 2))","c7e803f4":"fig, (ax1, ax2) = plt.subplots(1,2, figsize=(10,4), sharey=True, dpi=120)\n\nax1.scatter(df.price, PuntiTeoriciRegLin)  # greendots\nax2.scatter(df.price, PuntiTeoriciCatboost01)  # bluestart\n\nax1.set_title('Modello Regressione OLS - Previsti e osservati'); ax2.set_title('Modello CatBoost 01 - Previsti e osservati')\nax1.set_xlabel('Osservati');  ax2.set_xlabel('Osservati')  # x label\nax1.set_ylabel('Previsiti - OLS');  ax2.set_ylabel('Previsiti - Catboost')  # y label\n\nax1.plot([df.price.min(), df.price.max()], [df.price.min(), df.price.max()], 'k--', lw=4)\nax2.plot([df.price.min(), df.price.max()], [df.price.min(), df.price.max()], 'k--', lw=4)\n\nax1.annotate(f\"RMSE:  {round(RmseRegressione, 2)}\", xy=(100, 700),  xytext=(100, 700))\nax2.annotate(f\"RMSE:  {round(RmseCatboost01, 2)}\", xy=(100, 700),  xytext=(100, 700))\n\nplt.tight_layout()\nplt.show()","698e2906":"### Variabili numeriche.","d463e32b":"# Analisi del costo degli appartamenti a Mosca.","80a276ad":"# Confronto modelli.","73671c8b":"# Catboost.","0d51fb4d":"# Exploratory Data Analysis.","d6758312":"# Modello di Regressione.","2a4fcc4a":"### Variabili categoriche."}}