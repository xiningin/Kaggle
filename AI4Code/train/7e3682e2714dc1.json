{"cell_type":{"53edce99":"code","1dc67702":"code","4d42811f":"code","e3d8dd6f":"code","9d041faa":"code","6439cb13":"code","83f79b8a":"code","9d9e5bc7":"code","1878b863":"code","b3c4609b":"code","f4aa7b24":"code","d084bcfd":"code","d80dc503":"code","842ac9a8":"code","fde8f2d9":"code","e0c02843":"code","0f711b6e":"code","a5c20184":"code","b1d5985c":"code","8693dea8":"code","883f4514":"code","fd8e332e":"code","7c76b3b0":"code","4f1fa174":"code","b2087797":"code","047e9343":"code","16dbadf0":"code","26aedac9":"code","69890b66":"markdown","ef01bf5b":"markdown","c57cc53d":"markdown","c3aa53cf":"markdown","d9c5dc83":"markdown","e14fe62b":"markdown","203fd2d3":"markdown","9839e570":"markdown","c745ff21":"markdown","ead9cd03":"markdown","c4aee75e":"markdown","a932ce6a":"markdown","2cfb7df0":"markdown","d028f69f":"markdown","d6836ec5":"markdown"},"source":{"53edce99":"%pylab inline","1dc67702":"import base64\nimport pandas as pd\nfrom itertools import cycle","4d42811f":"class DotDict(dict):\n    \"\"\"\n    a dictionary that supports dot notation \n    as well as dictionary access notation \n    usage: d = DotDict() or d = DotDict({'val1':'first'})\n    set attributes: d.val2 = 'second' or d['val2'] = 'second'\n    get attributes: d.val2 or d['val2']\n    https:\/\/stackoverflow.com\/a\/13520518\/1924403\n    \"\"\"\n    __getattr__ = dict.__getitem__\n    __setattr__ = dict.__setitem__\n    __delattr__ = dict.__delitem__\n\n    def __init__(self, dct):\n        for key, value in dct.items():\n            if hasattr(value, 'keys'):\n                value = DotDict(value)\n            self[key] = value","e3d8dd6f":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nsample = pd.read_csv('..\/input\/sample_submission.csv')","9d041faa":"test3 = test[test.difficulty==3].reset_index(drop=True)\ntest4 = test[test.difficulty==4].reset_index(drop=True)","6439cb13":"test3.head(1)","83f79b8a":"test4.head(1)","9d9e5bc7":"longuest = test4.iloc[25054].ciphertext\nalphabet = ''.join(set(longuest))\nprint('Number of different chars :', len(alphabet))\nprint('Alphabet (sorted) :', ''.join(sorted(alphabet)))","1878b863":"def get_dictionnary(df, col):\n    \"\"\" Builds a dictionnary of letters \"\"\"\n    dc = DotDict({})\n    for ind, row in df.iterrows():\n        text = row[col]\n        for letter in text:\n            if letter not in dc:\n                dc[letter] = 0\n            dc[letter] += 1\n    dic = (pd.DataFrame\n        .from_dict(dc, orient='index')\n        .reset_index()\n        .rename({'index': 'letter', 0: 'frequency'}, axis=1)\n        .sort_values(by='frequency', ascending=False)\n        .reset_index(drop=True))\n    return dic","b3c4609b":"%time test3_dic = get_dictionnary(test3, 'ciphertext')\n%time test4_dic = get_dictionnary(test4, 'ciphertext')","f4aa7b24":"test3_dic.head()","d084bcfd":"test4_dic.head()","d80dc503":"test3_dic.plot.bar(x='letter', y='frequency', figsize=(16, 6))","842ac9a8":"test4_dic.plot.bar(x='letter', y='frequency', figsize=(16, 6))","fde8f2d9":"test3['ciphertext_b64'] = test3['ciphertext'].apply(lambda x: base64.b64encode(x.encode('ascii')).decode())\ntest3.head()","e0c02843":"%time test3b_dic = get_dictionnary(test3, 'ciphertext_b64')","0f711b6e":"test3b_dic.plot.bar(x='letter', y='frequency', figsize=(16, 6))","a5c20184":"dic_txt = ''\nfor ind, row in test3b_dic.iterrows():\n    dic_txt += row['letter']\n\nalphabet = ''.join(set(dic_txt))\nprint('Number of different chars :', len(dic_txt))\nprint('Alphabet (sorted) :', ''.join(sorted(dic_txt)))","b1d5985c":"def xor_crypt_string(data, key='myprivatekey', encode=False, decode=False):\n    if decode:\n        data = base64.decodebytes(data).decode()\n    xored = ''.join([chr(ord(x) ^ ord(y)) for (x, y) in zip(data, cycle(key))])\n    if encode:\n        return base64.encodebytes(xored.encode('ascii')).strip()\n    return xored\n\n\nsecret_data = \"hello\"\nprint(xor_crypt_string(secret_data, encode=True))\nprint(xor_crypt_string(xor_crypt_string(secret_data, encode=True), decode=True))","8693dea8":"test3['ciphertext_xor'] = test3['ciphertext_b64'].apply(lambda x: xor_crypt_string(x, encode=True).decode())\ntest3[['ciphertext_id', 'ciphertext_xor']].head()","883f4514":"%time test3x_dic = get_dictionnary(test3, 'ciphertext_xor')\ntest3x_dic.plot.bar(x='letter', y='frequency', figsize=(16, 6))","fd8e332e":"dic_txt = ''\nfor ind, row in test3x_dic.iterrows():\n    dic_txt += row['letter']\n\nalphabet = ''.join(set(dic_txt))\nprint('Number of different chars :', len(dic_txt))\nprint('Alphabet (sorted) :', ''.join(sorted(dic_txt)))","7c76b3b0":"keys = ['P2o3SAgu7Evfn1baYW8m', 'rd7F5yGS8MWqxiYBnr8z', 'na5uivXZ0Wka9WKYo0Nd', 'cUbjnWc1lxFHjZ9GI9Qb', 'sLebhvqrVM7OkioVIkIa', 'wSTFqa9hAIqo2EB8leu1', 'xZ5CDvSDWW95XkiG4uqL', 'VuZcp798bOOSzu29d8ct', 'ZUboM2SxwiBkpgSZCcRQ', 'fQ2SlcNxMPtXK7atzS0F']","4f1fa174":"def get_metrics(key):\n    print('Key : ', key)\n    work = test3.copy()\n    work['ciphertext_xor'] = test3['ciphertext_b64'].apply(lambda x: xor_crypt_string(x, encode=True).decode())\n    work_dic = get_dictionnary(work, 'ciphertext_xor')\n    dic_txt = ''\n    for ind, row in work_dic.iterrows():\n        dic_txt += row['letter']\n\n    alphabet = ''.join(set(dic_txt))\n    print('Number of different chars :', len(dic_txt))\n    print('Alphabet (sorted) :', ''.join(sorted(dic_txt)))\n    print('')","b2087797":"for key in keys:\n    get_metrics(key)","047e9343":"test3['ciphertext_transformed'] = test3['ciphertext'].apply(lambda x: xor_crypt_string(x, encode=True).decode())\ntest3['ciphertext_transformed'] = test3['ciphertext_transformed'].apply(lambda x: base64.b64encode(x.encode('ascii')).decode())\ntest3[['ciphertext_id', 'ciphertext_transformed']].head()","16dbadf0":"%time test3u_dic = get_dictionnary(test3, 'ciphertext_transformed')\ntest3u_dic.plot.bar(x='letter', y='frequency', figsize=(16, 6))","26aedac9":"dic_txt = ''\nfor ind, row in test3u_dic.iterrows():\n    dic_txt += row['letter']\n\nalphabet = ''.join(set(dic_txt))\nprint('Number of different chars :', len(dic_txt))\nprint('Alphabet (sorted) :', ''.join(sorted(dic_txt)))\nprint('')","69890b66":"# Utils","ef01bf5b":"# Libraries","c57cc53d":"\"i\" and \"l\" seems slightly more frequents than others, whereas E is the rarest. (\"=\" is not to be used since it's just here for completion)\n\nin base64 :\n* i = 100010\n* l = 100101\n* E = 000100","c3aa53cf":"It Really looks like base64 !","d9c5dc83":"## Checking alphabet size\nThe longuest difficulty 4 string is on index 25054 (found in another notebook)","e14fe62b":"Still not matching distributions, still incomplete alphabet !\nFeel free to comment ! I'm running out of ideas","203fd2d3":"### A last try - inverting orders between base64 and XOR","9839e570":"Difficulty 4 really looks lika base64, especially since it oftens finishes with a few \"=\"\nHowever, after trying inside an online decoder, the letters looks shuffled (or replaced by some kind of XOR algorithm ?)","c745ff21":"## What a \"normal\" base64 on numbers distribution may actually look like\n#### No padding between 3 and 4 hypothesis","ead9cd03":"# Does the choice of the key changes the distribution ?\nI tried with a few random base64 strings as keys","c4aee75e":"### Conclusions\n* whatever the key, the alphabet is always the same at the end (and it seems logical, afterwards)\n* looks like XOR algorithm might be a wrong here track, or maybe in combination with anything else ?","a932ce6a":"## First look\n\n#### First, we assume that we can't generate custom difficulty 3 ciphered texts from unencrypted texts, because of the nature of difficulty 3 encryption algorithm","2cfb7df0":"# Frequency analysis","d028f69f":"We should have a much lighter alphaber.\n\nIt can mean two things :\n* either diff 3 texts are transformed before being base64-encoded\n* or base64 are altered after diff 3 texts are base64-encoded","d6836ec5":"# Can it be a XOR algorithm on base64-encoded diff 3 ?\n* A few resources about XOR : https:\/\/en.wikipedia.org\/wiki\/XOR_cipher\n* A XOR algorithm could seem legit since it applies very well on base64\/binary data"}}