{"cell_type":{"35e52ae4":"code","ffc55701":"code","9290fc2d":"code","5313dd35":"code","26c0a307":"code","d19880c6":"code","6589d2d5":"code","c915300c":"code","d6b07d98":"code","763aba28":"code","37b65c11":"code","12db0ea7":"code","4d474583":"code","5884aa66":"code","aa63120d":"markdown","43eac5f2":"markdown","1375ca28":"markdown","70095b44":"markdown","f3e3b6f6":"markdown","77e69ff5":"markdown","daa9f35e":"markdown","43fedcbe":"markdown","c8de99fd":"markdown","6ee4f95e":"markdown"},"source":{"35e52ae4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #for plots\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ffc55701":"data = pd.read_csv('\/kaggle\/input\/position-salaries\/Position_Salaries.csv')\ndata.head()","9290fc2d":"data.shape","5313dd35":"data.info()","26c0a307":"import matplotlib.pyplot as plt\nplt.scatter(data.Level,data.Salary)\nplt.title(\"Level Vs Salary plot\")","d19880c6":"X=data.iloc[:,1:2].values\ny=data.iloc[:,-1].values","6589d2d5":"from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score","c915300c":"def polynomialRegressionScore(X,y,k):\n\n    poly = PolynomialFeatures(degree=k)\n    X_poly = poly.fit_transform(X)\n    lr = LinearRegression()\n    lr.fit(X_poly,y)\n  \n    X_test_poly =poly.fit_transform(X)\n    y_pred=lr.predict(X_test_poly)\n\n    test_score = r2_score(y,y_pred)\n    \n  \n    return test_score","d6b07d98":"#process to get the appropriate degree to get a good accuracy for the model\ntrain=[]\ntest=[]\nfor i in range(1,10):\n    r2test=polynomialRegressionScore(X,y,k=i)\n    test.append(r2test)\nx=np.arange(9)+1\nplt.plot(x,test,label=\"Test\")\nplt.legend()\nplt.xlabel(\"Degree for my model\")\nplt.ylabel(\"r2-Score\")\nplt.title(\"R2-Score\");\nplt.show()","763aba28":"def polynomialRegression(X,y,k):\n\n    poly = PolynomialFeatures(degree=k)\n    X_poly = poly.fit_transform(X)\n    lr = LinearRegression()\n    lr.fit(X_poly,y)\n  \n    X_test_poly =poly.fit_transform(X)\n    y_pred=lr.predict(X_test_poly)\n    \n    plt.plot(X,y_pred, label=\"Model\",color='red')\n    plt.scatter(X, y, label=\"data\",color='green')\n    plt.legend()\n    plt.show()\n    \n    print(\"The accuracy of the model is \" ,r2_score(y,y_pred)*100,\"%\")   ","37b65c11":"plt.title(\"Curve when Level = 5. Over-fitted graph\")\npolynomialRegression(X,y,5)\n\nplt.title(\"Curve when Level = 4.Over-fitted graph\")\npolynomialRegression(X,y,4)","12db0ea7":"plt.title(\"Curve when Level = 1. Under-fitted graph\")\npolynomialRegression(X,y,1)","4d474583":"plt.title(\"Curve when Level = 3\")\npolynomialRegression(X,y,3)","5884aa66":"plt.title(\"Curve when Level = 2\")\npolynomialRegression(X,y,2)","aa63120d":"**I personally prefer degree 3 for my model.**","43eac5f2":"# Over-fitted graph","1375ca28":"**Here, we see levels 2 and 3 will give a good accuracy to my model.Levels below 2 will make my model under-fitted and levels above 3 will make my model over-fitted.**","70095b44":"**Function to get the R2 score for my testing data **","f3e3b6f6":"# The graph is non-linear in nature. Thus instead of using simple linear regression algorithm, we need to use polynomial features.","77e69ff5":"# Under-fitted graph","daa9f35e":"# Appropriate curve","43fedcbe":"**Importing necessary packages**","c8de99fd":"**Getting the data**","6ee4f95e":"**Getting to know my data**"}}