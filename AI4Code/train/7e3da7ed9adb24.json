{"cell_type":{"aa0d692f":"code","d5a46111":"code","4fa10023":"code","90668c74":"code","609ce1a0":"code","ffda5235":"code","11a8d035":"code","c768d169":"code","785a06b8":"code","38364e14":"code","92f54194":"code","2abb2c66":"code","917f64b4":"code","a1fdf90b":"code","657264c5":"code","1b2e3cfd":"code","05ba478b":"code","c1edd9ff":"code","aa28275d":"code","52b13a58":"code","9c791dc2":"code","a5cbb337":"code","f6f00928":"code","857e6903":"markdown","e7ed2103":"markdown","2bcc6a6e":"markdown","98d4cf6b":"markdown","34f0b6be":"markdown","1c7c8cb2":"markdown","1cb20a7a":"markdown","2387dfdb":"markdown","435e312c":"markdown","dd1ab7e8":"markdown","b09928b5":"markdown","f492f05a":"markdown","3edd1a21":"markdown","1e8a9580":"markdown","4d81e8c7":"markdown","bd2378e8":"markdown","feab5168":"markdown","1e3de5f8":"markdown","f98253e6":"markdown"},"source":{"aa0d692f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d5a46111":"data=pd.read_csv(\"\/kaggle\/input\/world-university-rankings\/timesData.csv\")\ndf=data.copy()\ndf.tail()","4fa10023":"df.isnull().sum()","90668c74":"df.info() # we have 2603 observations","609ce1a0":"df.describe()","ffda5235":"df[\"year\"].unique()","11a8d035":"# import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n","c768d169":"# prepare data frame.First 100 worldrank for values of citations\ndf = df.iloc[:100,:]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.citations,\n                    mode = \"lines\",\n                    name = \"citations\",                               \n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),   #mode = type of plot like marker, line or line + markers\n                    text= df.university_name)                         #color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n# Creating trace2                                                     #text = The hover text (hover is curser)\ntrace2 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.teaching,\n                    mode = \"lines+markers\",\n                    name = \"teaching\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df.university_name)\ndata = [trace1, trace2]   #data = is a list that we add traces into it\nlayout = dict(title = 'Citation and Teaching vs World Rank of Top 100 Universities',  #layout = it is dictionary.\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False)    #title = label of x axis,ticklen = length of x axis ticks, zeroline = showing zero line or not\n             )\nfig = dict(data = data, layout = layout) #fig = it includes data and layout\niplot(fig)   #iplot() = plots the figure(fig) that is created by data and layout","785a06b8":"# prepare data frames\ndf=data.copy()\n\ndf2014 = df[df.year == 2014].iloc[:100,:]\ndf2015 = df[df.year == 2015].iloc[:100,:]\ndf2016 = df[df.year == 2016].iloc[:100,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df2014.world_rank,\n                    y = df2014.citations,\n                    mode = \"markers\",   #mode = type of plot like marker, line or line + markers\n                    name = \"2014\",  #name = name of the plots\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'), #marker = marker is used with dictionary,color = color of lines. It takes RGB (red, green, blue) and opacity (alpha) \n                    text= df2014.university_name)#text = The hover text (hover is curser)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df2015.world_rank,\n                    y = df2015.citations,\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df2015.university_name)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = df2016.world_rank,\n                    y = df2016.citations,\n                    mode = \"markers\",\n                    name = \"2016\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= df2016.university_name)\ndata = [trace1, trace2, trace3]  #data = is a list that we add traces into it\nlayout = dict(title = 'Citation vs world rank of top 100 universities with 2014, 2015 and 2016 years', #layout = it is dictionary,title = title of layout,\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False), #ticklen = length of x axis ticks,zeroline = showing zero line or not\n              yaxis= dict(title= 'Citation',ticklen= 5,zeroline= False) #y axis = it is dictionary and same with x axis\n             )\nfig = dict(data = data, layout = layout)#fig = it includes data and layout\niplot(fig) #","38364e14":"data=pd.read_csv(\"\/kaggle\/input\/world-university-rankings\/timesData.csv\")\ndf=data.copy()\n\n# prepare data frames\ndf2014 = df[df.year == 2014].iloc[:3,:]\ndf2014","92f54194":"# prepare data frames\ndf2014 = df[df.year == 2014].iloc[:3,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.citations,\n                name = \"citations\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2014.country)  #text = The hover text (hover is curser)\n# create trace2 \ntrace2 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.teaching,\n                name = \"teaching\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2014.country)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")  #barmode = bar mode of bars like grouped\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","2abb2c66":"data=pd.read_csv(\"\/kaggle\/input\/world-university-rankings\/timesData.csv\")\ndf=data.copy()\n\ndf2014 = df[df.year == 2014].iloc[:3,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\nx = df2014.university_name\n\ntrace1 = {\n  'x': x,\n  'y': df2014.citations,\n  'name': 'citation',\n  'type': 'bar'       #type = type of plot like bar plot\n};\ntrace2 = {\n  'x': x,\n  'y': df2014.teaching,\n  'name': 'teaching',\n  'type': 'bar'\n};\ndata = [trace1, trace2];\nlayout = {\n  'xaxis': {'title': 'Top 3 universities'},\n  'barmode': 'relative', #barmode = bar mode of bars like grouped( previous example) or relative\n  'title': 'citations and teaching of top 3 universities in 2014'\n};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","917f64b4":"\nimport plotly.graph_objs as go\nfrom plotly import tools #Tools: used for subplots\nimport matplotlib.pyplot as plt\n# prepare data frames\ndf2016 = df[df.year == 2016].iloc[:7,:]\n\ny_saving = [each for each in df2016.research]\ny_net_worth  = [float(each) for each in df2016.income]\nx_saving = [each for each in df2016.university_name]\nx_net_worth  = [each for each in df2016.university_name]\ntrace0 = go.Bar(            #bar: bar plot\n                x=y_saving,\n                y=x_saving,\n                marker=dict(color='rgba(171, 50, 96, 0.6)',line=dict(color='rgba(171, 50, 96, 1.0)',width=1)),#color of bar,bar line color and with\n                name='research',  #name: name of bar\n                orientation='h', #orientation: orientation like horizontal\n)\ntrace1 = go.Scatter(\n                x=y_net_worth,\n                y=x_net_worth,\n                mode='lines+markers', #mode: scatter type line line + markers or only markers\n                line=dict(color='rgb(63, 72, 204)'),#line: properties of line,color: color of line\n                name='income',  #name: name of scatter plot\n)\nlayout = dict(      #layout: axis, legend, margin, paper and plot properties *\n                title='Citations and income',\n                yaxis=dict(showticklabels=True,domain=[0, 0.85]),\n                yaxis2=dict(showline=True,showticklabels=False,linecolor='rgba(102, 102, 102, 0.8)',linewidth=2,domain=[0, 0.85]),\n                xaxis=dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0, 0.42]),\n                xaxis2=dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0.47, 1],side='top',dtick=25),\n                legend=dict(x=0.029,y=1.038,font=dict(size=10) ),\n                margin=dict(l=200, r=20,t=70,b=70),\n                paper_bgcolor='rgb(248, 248, 255)',\n                plot_bgcolor='rgb(248, 248, 255)',\n)\nannotations = []\ny_s = np.round(y_saving, decimals=2)\ny_nw = np.rint(y_net_worth)\n# Adding labels\nfor ydn, yd, xd in zip(y_nw, y_s, x_saving):\n    # labeling the scatter savings\n    annotations.append(dict(xref='x2', yref='y2', y=xd, x=ydn - 4,text='{:,}'.format(ydn),font=dict(family='Arial', size=12,color='rgb(63, 72, 204)'),showarrow=False))\n    # labeling the bar net worth\n    annotations.append(dict(xref='x1', yref='y1', y=xd, x=yd + 3,text=str(yd),font=dict(family='Arial', size=12,color='rgb(171, 50, 96)'),showarrow=False))\n\nlayout['annotations'] = annotations\n\n# Creating two subplots\nfig = tools.make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_xaxes=True,\n                          shared_yaxes=False, vertical_spacing=0.001)\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\nfig['layout'].update(layout)\niplot(fig)","a1fdf90b":"# data preparation\ndf2016 = df[df.year == 2016].iloc[:7,:]\npie1 = df2016.num_students\npie1_list = [float(each.replace(',', '.')) for each in df2016.num_students]  # str(2,4) => str(2.4) = > float(2.4) = 2.4\nlabels = df2016.university_name\n# create figure\nfig = {\n  \"data\": [    #data: plot type\n    {\n      \"values\": pie1_list, #values: values of plot\n      \"labels\": labels, #labels: labels of plot\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Number Of Students Rates\",\n      \"hoverinfo\":\"label+percent+name\", #hoverinfo: information in hover\n      \"hole\": .3, #hole: hole width\n      \"type\": \"pie\" #type: plot type like pie****\n    },],\n  \"layout\": {   #layout: layout of plot\n        \"title\":\"Universities Number of Students rates\",#title: title of layout\n        \"annotations\": [                            #annotations: font, showarrow, text, x, y\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Number of Students\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)","657264c5":"df2016.info()","1b2e3cfd":"# data preparation\ndf2016 = df[df.year == 2016].iloc[:20,:]\nnum_students_size  = [float(each.replace(',', '.')) for each in df2016.num_students]\ninternational_color = [float(each) for each in df2016.international]\ndata = [\n    {\n        'y': df2016.teaching,\n        'x': df2016.world_rank,\n        'mode': 'markers',  #mode = markers(scatter)\n        'marker': {    #marker = marker properties;color = third dimension of plot. Internaltional score,size = fourth dimension of plot. Number of students\n            'color': international_color,\n            'size': num_students_size,\n            'showscale': True\n        },\n        \"text\" :  df2016.university_name #text: university names   \n    }\n]\niplot(data)","05ba478b":"# prepare data\nx2011 = df.student_staff_ratio[df.year == 2011]\nx2012 = df.student_staff_ratio[df.year == 2012]\n\ntrace1 = go.Histogram(  #trace1 = first histogram\n    x=x2011,\n    opacity=0.75,  #opacity = opacity of histogram\n    name = \"2011\", #name = name of legend\n    marker=dict(color='rgba(171, 50, 96, 0.6)')) #marker = color of histogram\ntrace2 = go.Histogram(\n    x=x2012,\n    opacity=0.75,\n    name = \"2012\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',  #barmode = mode of histogram like overlay. Also you can change it with stack\n                   title=' students-staff ratio in 2011 and 2012',\n                   xaxis=dict(title='students-staff ratio'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","c1edd9ff":"# word cloud library\nfrom wordcloud import WordCloud\n# data prepararion\nx2011 = df.country[df.year == 2011]\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(         #WordCloud = word cloud library that I import at the beginning of kernel\n                          background_color='white', #background_color = color of back ground\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(x2011)) #generate = generates the country name list(x2011) a word cloud\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","aa28275d":"# data preparation\nx2015 = df[df.year == 2015]\n\ntrace0 = go.Box(\n    y=x2015.total_score,\n    name = 'total score of universities in 2015',\n    marker = dict(                          #marker = color\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=x2015.research,\n    name = 'research of universities in 2015',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\niplot(data)","52b13a58":"# import figure factory\nimport plotly.figure_factory as ff\n# prepare data\ndataframe =df[df.year == 2015]\ndata2015 = dataframe.loc[:,[\"research\",\"international\", \"total_score\"]]#data2015 = prepared data. It includes research, international and total scores with index from 1 to 401\ndata2015[\"index\"] = np.arange(1,len(data2015)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data2015, diag='box', index='index',colormap='Portland',  #colormap = color map of scatter plot\n                                  colormap_type='cat',    #colormap_type = color type of scatter plot\n                                  height=700, width=700)\niplot(fig)","9c791dc2":"# first line plot\ntrace1 = go.Scatter(\n    x=df.world_rank,\n    y=df.teaching,\n    name = \"teaching\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=df.world_rank,\n    y=df.income,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"income\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)'),\n)\ndat = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Income and Teaching vs World Rank of Universities'\n\n)\n\nfig = go.Figure(data=dat, layout=layout)\niplot(fig)","a5cbb337":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(    #go.Scatter3d: create 3d scatter plot\n    x=df.world_rank,    #x,y,z: axis of plots\n    y=df.research,\n    z=df.citations,\n    mode='markers',     #mode: market that is scatter\n    marker=dict(\n        size=10,        #size: marker size, color: axis of colorscale, colorscale: actually it is 4th dimension\n        color='rgb(255,0,0)',    # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","f6f00928":"trace1 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.research,\n    name = \"research\"\n)\ntrace2 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.citations,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"citations\"\n)\ntrace3 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.income,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"income\"\n)\ntrace4 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.total_score,\n    xaxis='x4',\n    yaxis='y4',\n    name = \"total_score\"\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Research, citation, income and total score VS World Rank of Universities'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","857e6903":"## 1 ) Line Charts","e7ed2103":"\n## 4) Pie Charts\n\nPie Charts Example: Students rate of top 7 universities in 2016","2bcc6a6e":"\n## 7 ) Word Cloud\nNot a pyplot but learning it is good for visualization. Lets look at which country is mentioned most in 2011.","98d4cf6b":"## IN THIS KERNEL, I WILL USE PLOTLY LIBRARY:\n\n* Line Charts\n* Scatter Charts\n* Bar Charts\n* Pie Charts\n* Bubble Charts\n* Histogram\n* Word Cloud\n* Box Plot\n* Scatter Plot Matrix","34f0b6be":"\n### Third Bar Charts Example: Horizontal bar charts.  (style3) Citation vs income for universities","1c7c8cb2":"## 2 )  Scatter Charts\nScatter Example: Citation vs world rank of top 100 universities with 2014, 2015 and 2016 years.","1cb20a7a":"\n## 11) 3D Scatter Plot with Colorscaling\n\n3D Scatter: Sometimes 2D is not enough to understand data. Therefore adding one more dimension increase the intelligibility of the data. Even we will add color that is actually 4th dimension.","2387dfdb":"## 3)Bar Charts\n\nFirst Bar Charts Example: citations and teaching of top 3 universities in 2014 (style1).","435e312c":"\n## 9 ) Scatter Matrix Plots\n\nScatter Matrix = it helps us to see covariance and relation between more than 2 features","dd1ab7e8":"\n## 12 ) Multiple Subplots\nMultiple Subplots: While comparing more than one features, multiple subplots can be useful.","b09928b5":"\n## 10) Inset Plots\nInset Matrix = 2 plots are in one frame","f492f05a":"# If you find this kernel helpful, Please UPVOTES !!!\n","3edd1a21":"* We have Nan values","1e8a9580":"\n## 5 ) Bubble Charts\n\nBubble Charts Example: University world rank (first 20) vs teaching score with number of students(size) and international score (color) in 2016","4d81e8c7":"\n## 8 ) Box Plots\n\n    * Median (50th percentile) = middle value of the data set. Sort and take the data in the middle. It is also called 50% percentile that is 50% of data are less that median(50th quartile)(quartile)\n        * 25th percentile = quartile 1 (Q1) that is lower quartile\n        * 75th percentile = quartile 3 (Q3) that is higher quartile\n        * height of box = IQR = interquartile range = Q3-Q1\n        * Whiskers = 1.5 * IQR from the Q1 and Q3\n        * Outliers = being more than 1.5*IQR away from median commonly.","bd2378e8":"# PLOTLY","feab5168":"\n## 6 ) Histogram\n\nLets look at histogram of students-staff ratio in 2011 and 2012 years. ","1e3de5f8":"# DATA READING AND EXPLORING","f98253e6":"\n### Second Bar Charts Example: citations and teaching of top 3 universities in 2014 (style2)\n Actually, if you change only the barmode from *group* to *relative* in previous example, you achieve what we did here. However, for diversity I use different syntaxes. \n"}}