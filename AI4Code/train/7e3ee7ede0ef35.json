{"cell_type":{"55907e7c":"code","69fb87eb":"code","91622b5a":"code","65863abc":"code","b98db407":"code","1d21fe2e":"code","822db912":"code","228c74fc":"code","a9a006d1":"code","a3fce926":"code","8b65da8c":"code","f39932ac":"code","5c1e38ef":"code","e4934426":"code","32b211bd":"code","8c2fd19e":"code","6d43cee2":"code","bdbbd9cc":"code","6820325c":"code","7b9a886b":"code","bc4ffd93":"code","a5c67fac":"code","721279a1":"code","3a2fac82":"code","d69df6cf":"code","1c7e16fd":"code","67af3366":"code","e5621c41":"code","d00ebf7e":"code","d73d4f48":"code","56657c24":"code","5b5abed7":"code","382a3c52":"code","186e259e":"code","d6c98068":"code","fbfb37b8":"code","287eb315":"code","4c4f89cc":"code","9316b17f":"code","1d499b25":"code","0d175e6c":"code","c57536b3":"code","26d50796":"code","f56faba7":"code","8c30cd86":"code","83d9c6da":"code","7f2ad218":"code","69dfd816":"code","485866ba":"code","a77297e4":"code","3be19581":"code","10ed7329":"code","2c88f5a2":"code","bf573b7e":"code","f2d85b21":"code","566b497a":"code","7d0fab4d":"code","3d972c23":"code","2594c4e8":"code","c89ec220":"code","825793a1":"code","8160fb89":"code","4cccdeca":"code","9fac65a1":"code","b93cbbf7":"code","594710a8":"code","02963441":"code","d66225aa":"code","8f6f3a92":"code","e5613cd8":"code","b9667e7c":"code","7e7a724b":"markdown","9424eb29":"markdown","266132ae":"markdown","1e0e7507":"markdown","7a53d2db":"markdown","f0b1b39a":"markdown","ecd57d2b":"markdown","70a43f5f":"markdown","367bee28":"markdown","c0fae0dc":"markdown","1c3796d8":"markdown","a9064f45":"markdown","1d6dc396":"markdown","59b17b79":"markdown","6e45435d":"markdown","34a624a7":"markdown","28ec26ff":"markdown","70200e98":"markdown","ef83baab":"markdown","d6c67b5b":"markdown","2ddab8db":"markdown","cad2f174":"markdown","862622f2":"markdown","77861f7d":"markdown","47b48ff3":"markdown","fac8da7d":"markdown","5a3f4a72":"markdown","990a5ed8":"markdown","513faf99":"markdown","b18aab2f":"markdown","416fa247":"markdown","4f6d6f06":"markdown","0e32add3":"markdown","08de5451":"markdown","e726a1b0":"markdown","7ca29051":"markdown","6efc307f":"markdown","4c3e8f52":"markdown","61a115ee":"markdown","ce5699eb":"markdown","5423c31d":"markdown","e0d0b7eb":"markdown","534fc2b1":"markdown","0344218a":"markdown","cf498388":"markdown","aa3565ba":"markdown","d3b00afb":"markdown","3b99f156":"markdown","d08cb837":"markdown","8eb99d11":"markdown","78975626":"markdown","32a26178":"markdown","92d3cd40":"markdown","9325c7d3":"markdown","4c1472fb":"markdown","508a2da3":"markdown","dcdeb912":"markdown","d83f6345":"markdown","ad26728a":"markdown","872d0f7d":"markdown","5192e034":"markdown","aeafc166":"markdown"},"source":{"55907e7c":"!pip install yfinance","69fb87eb":"!pip install pmdarima","91622b5a":"import calendar\nimport datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport pylab\nimport scipy.stats\nimport seaborn as sns\nimport statsmodels.graphics.tsaplots as sgt\nimport statsmodels.tsa.stattools as sts\nimport yfinance as yf\nimport warnings\n\nfrom datetime import date, timedelta\nfrom pandas_datareader import data as pdr\nfrom pandas.plotting import autocorrelation_plot, scatter_matrix\nfrom pandas.tseries.offsets import BMonthEnd, DateOffset\nfrom pmdarima.arima import auto_arima\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\nwarnings.filterwarnings('ignore')\nsns.set()\n\nclass Time_Series:\n\n    data = pd.DataFrame()\n    \n    data_daily_returns_summary = pd.DataFrame()\n    \n    data_monthly = pd.DataFrame()\n    data_monthly_summary = pd.DataFrame()\n    data_monthly_returns_summary = pd.DataFrame()\n    \n    data_weekly = pd.DataFrame()\n    data_weekly_summary = pd.DataFrame()\n    data_weekly_returns_summary = pd.DataFrame()\n    \n    def date_found(self, end_date, symbol):\n    \n        is_found = False\n\n        if len(self.data.loc[((self.data['Dates'] == end_date) & \\\n                              (self.data['Symbol'] == symbol)), 'Dates']) == 1: is_found = True\n\n        return is_found\n\n    def add_record(self, end_date, symbol, frequency):\n\n        if frequency == 'M':\n            self.data_monthly = self.data_monthly.append(self.data.loc[((self.data['Dates'] == end_date) & \\\n                                                     (self.data['Symbol'] == symbol)), :], ignore_index = True)\n        elif frequency == 'W':\n            self.data_weekly = self.data_weekly.append(self.data.loc[((self.data['Dates'] == end_date) & \\\n                                                     (self.data['Symbol'] == symbol)), :], ignore_index = True)\n    \n    def get_daily(self, symbol):\n        \n        daily = self.data.loc[(self.data['Symbol'] == symbol),:].copy()\n        daily = daily.pivot_table(index='Dates', columns='Symbol', values='Adj Close')\n        daily = daily.asfreq('b')\n        daily = daily.fillna(method = 'ffill')\n        daily = daily.rename(columns = {symbol: 'symbol'})\n        \n        return daily\n    \n    def get_daily_returns(self, symbol):\n        \n        daily_returns = self.data.loc[(self.data['Symbol'] == symbol),:].copy()\n        daily_returns['Returns'] = daily_returns['Adj Close'].pct_change(1)\n        daily_returns = daily_returns.pivot_table(index='Dates', columns='Symbol', values='Returns')\n        daily_returns = daily_returns.asfreq('b')\n        daily_returns = daily_returns.fillna(method = 'bfill')\n        daily_returns = daily_returns.rename(columns = {symbol: 'symbol'})\n        \n        return daily_returns\n    \n    def get_end_dates(self, start_date, frequency):\n    \n        end_dates = []\n        \n        if frequency == 'M':\n            offset = BMonthEnd()\n\n            for date_count in range(1, 61):\n\n                start_date = start_date + timedelta(days = calendar.monthrange(start_date.year, start_date.month)[1])        \n                end_dates.append(offset.rollforward(start_date))\n        elif frequency == 'W':\n            \n            for day in self.data.Dates:\n    \n                if day.weekday() == 4:\n                    end_dates.append(day)\n                \n        return end_dates\n    \n    def get_monthly(self, symbol):\n        \n        monthly = self.data_monthly.loc[(self.data_monthly['Symbol'] == symbol),:].copy()\n        monthly = monthly.pivot_table(index='Dates', columns='Symbol', values='Adj Close')\n        monthly = monthly.asfreq('m')\n        monthly = monthly.fillna(method = 'ffill')\n        monthly = monthly.rename(columns = {symbol: 'symbol'})\n        \n        return monthly\n    \n    def get_monthly_returns(self, symbol):\n        \n        monthly_returns = self.data_monthly.loc[(self.data_monthly['Symbol'] == symbol),:].copy()\n        monthly_returns['Returns'] = monthly_returns['Adj Close'].pct_change(1)\n        monthly_returns = monthly_returns.pivot_table(index='Dates', columns='Symbol', values='Returns')\n        monthly_returns = monthly_returns.asfreq('m')\n        monthly_returns = monthly_returns.fillna(method = 'bfill')\n        monthly_returns = monthly_returns.rename(columns = {symbol: 'symbol'})\n        \n        return monthly_returns\n    \n    def get_weekly(self, symbol):\n        \n        weekly = self.data_weekly.loc[(self.data_weekly['Symbol'] == symbol),:].copy()\n        weekly = weekly.pivot_table(index='Dates', columns='Symbol', values='Adj Close')\n        weekly = weekly.asfreq(freq = '7d')\n        weekly = weekly.fillna(method = 'ffill')\n        weekly = weekly.rename(columns = {symbol: 'symbol'})\n        \n        return weekly\n    \n    def get_weekly_returns(self, symbol):\n        \n        weekly_returns = self.data_weekly.loc[(self.data_weekly['Symbol'] == symbol),:].copy()\n        weekly_returns['Returns'] = weekly_returns['Adj Close'].pct_change(1)\n        weekly_returns = weekly_returns.pivot_table(index='Dates', columns='Symbol', values='Returns')\n        weekly_returns = weekly_returns.asfreq(freq = '7d')\n        weekly_returns = weekly_returns.fillna(method = 'bfill')\n        weekly_returns = weekly_returns.rename(columns = {symbol: 'symbol'})\n        \n        return weekly_returns\n    \n    def download_data(self):\n\n        yf.pdr_override()\n        \n        start_date = date.today() + DateOffset(months = -61)\n        start_date = datetime.datetime(start_date.year, start_date.month, 1)\n        \n        for symbol in ['AMZN', 'FB', 'IBM', 'MMM']:\n        \n            symbol_df = pdr.get_data_yahoo(symbol, start = start_date)\n\n            symbol_df['Dates'] = symbol_df.index\n            symbol_df['Symbol'] = symbol\n            symbol_df = symbol_df.drop(['Open', 'High', 'Low', 'Close', 'Volume'], axis = 1)\n\n            self.data = self.data.append(symbol_df, ignore_index = True)\n        \n        for end_date in self.get_end_dates(start_date, 'M'):\n       \n            for symbol in ['AMZN', 'FB', 'IBM', 'MMM']:\n\n                if self.date_found(end_date, symbol):\n                    self.add_record(end_date, symbol, 'M')\n                else:\n\n                    date_not_found = True\n                    date_offset = 0\n\n                    while date_not_found:\n\n                        date_offset = date_offset - 1\n\n                        adjusted_end_date = end_date + timedelta(days = date_offset)\n\n                        if self.date_found(adjusted_end_date, symbol):\n                            date_not_found = False\n\n                    self.add_record(adjusted_end_date, symbol, 'M') \n        \n        for end_date in self.get_end_dates(start_date, 'W'):\n       \n            for symbol in ['AMZN', 'FB', 'IBM', 'MMM']:\n\n                if self.date_found(end_date, symbol):\n                    self.add_record(end_date, symbol, 'W')\n                else:\n\n                    date_not_found = True\n                    date_offset = 0\n\n                    while date_not_found:\n\n                        date_offset = date_offset - 1\n\n                        adjusted_end_date = end_date + timedelta(days = date_offset)\n\n                        if self.date_found(adjusted_end_date, symbol):\n                            date_not_found = False\n\n                    self.add_record(adjusted_end_date, symbol, 'W')\n        \n        self.data = self.data.reindex(columns= ['Symbol', 'Dates', 'Adj Close'])\n        \n        self.data_monthly = self.data_monthly.reindex(columns= ['Symbol', 'Dates', 'Adj Close'])\n        self.data_monthly_summary = self.data_monthly.pivot_table(index='Dates', columns='Symbol', values='Adj Close')\n        \n        self.data_weekly = self.data_weekly.reindex(columns= ['Symbol', 'Dates', 'Adj Close'])\n        self.data_weekly_summary = self.data_weekly.pivot_table(index=['Dates'], columns='Symbol', values='Adj Close')\n        \n        for symbol in ['AMZN', 'FB', 'IBM', 'MMM']:\n        \n            self.data_daily_returns_summary[symbol] = self.get_daily_returns(symbol)['symbol']\n            self.data_weekly_returns_summary[symbol] = self.get_weekly_returns(symbol)['symbol']\n            self.data_monthly_returns_summary[symbol] = self.get_monthly_returns(symbol)['symbol']\n        \n    def __init__(self):        \n        \n        self.download_data()\n        \n_time_series = Time_Series()\n\nsymbols = ['AMZN', 'FB', 'IBM', 'MMM']\n\nfor symbol in symbols:\n    print(symbol, 'Daily', _time_series.get_daily(symbol).isna().sum())\n    print(symbol, 'Weekly', _time_series.get_weekly(symbol).isna().sum())\n    print(symbol, 'Monthly', _time_series.get_monthly(symbol).isna().sum())\n","65863abc":"_time_series.data","b98db407":"_time_series.data_monthly_summary","1d21fe2e":"for symbol in symbols:\n\n    monthly = _time_series.get_monthly(symbol)\n\n    print(symbol)\n    autocorrelation_plot(monthly)\n    plt.show()","822db912":"for symbol in symbols:\n\n    weekly = _time_series.get_weekly(symbol)\n\n    print(symbol)\n    autocorrelation_plot(weekly)\n    plt.show()","228c74fc":"for symbol in symbols:\n\n    daily = _time_series.get_daily(symbol)\n\n    print(symbol)\n    autocorrelation_plot(daily)\n    plt.show()","a9a006d1":"for symbol in symbols:\n\n    monthly_returns = _time_series.get_monthly_returns(symbol)\n    print(symbol)\n    print(monthly_returns)","a3fce926":"for symbol in symbols:\n\n    monthly_returns = _time_series.get_monthly_returns(symbol)\n\n    print(symbol)\n    autocorrelation_plot(monthly_returns)\n    plt.show()","8b65da8c":"_time_series.data_monthly_returns_summary","f39932ac":"pd.plotting.scatter_matrix(_time_series.data_monthly_returns_summary)\nplt.show()","5c1e38ef":"sns.heatmap(_time_series.data_monthly_returns_summary.corr(), annot = True)\nplt.show()","e4934426":"pd.plotting.scatter_matrix(_time_series.data_weekly_returns_summary)\nplt.show()","32b211bd":"sns.heatmap(_time_series.data_weekly_returns_summary.corr(), annot = True)\nplt.show()","8c2fd19e":"pd.plotting.scatter_matrix(_time_series.data_daily_returns_summary)\nplt.show()","6d43cee2":"sns.heatmap(_time_series.data_daily_returns_summary.corr(), annot = True)\nplt.show()","bdbbd9cc":"for symbol in symbols:\n\n    monthly = _time_series.get_monthly(symbol)\n\n    print(symbol)\n    monthly.symbol.plot(figsize = (20, 4))\n    plt.show()","6820325c":"for symbol in symbols:\n\n    weekly = _time_series.get_weekly(symbol)\n\n    print(symbol)\n    weekly.symbol.plot(figsize = (20, 4))\n    plt.show()","7b9a886b":"for symbol in symbols:\n\n    daily = _time_series.get_daily(symbol)\n\n    print(symbol)\n    daily.symbol.plot(figsize = (20, 4))\n    plt.show()","bc4ffd93":"for symbol in symbols:\n\n    monthly = _time_series.get_monthly(symbol)\n\n    print(symbol)\n    \n    seasonal_additive = seasonal_decompose(monthly.symbol, model = 'additive')\n    seasonal_additive.trend.plot(figsize = (20, 4))\n    plt.show()","a5c67fac":"for symbol in symbols:\n\n    monthly = _time_series.get_monthly(symbol)\n\n    print(symbol)\n    \n    seasonal_additive = seasonal_decompose(monthly.symbol, model = 'multiplicative')\n    seasonal_additive.trend.plot(figsize = (20, 4))\n    plt.show()","721279a1":"for symbol in symbols:\n\n    weekly = _time_series.get_weekly(symbol)\n\n    print(symbol)\n    \n    seasonal_additive = seasonal_decompose(weekly.symbol, model = 'additive')\n    seasonal_additive.trend.plot(figsize = (20, 4))\n    plt.show()","3a2fac82":"for symbol in symbols:\n\n    weekly = _time_series.get_weekly(symbol)\n\n    print(symbol)\n    \n    seasonal_additive = seasonal_decompose(weekly.symbol, model = 'multiplicative')\n    seasonal_additive.trend.plot(figsize = (20, 4))\n    plt.show()","d69df6cf":"for symbol in symbols:\n\n    monthly = _time_series.get_monthly(symbol)\n\n    print(symbol)\n    \n    seasonal_additive = seasonal_decompose(monthly.symbol, model = 'additive')\n    seasonal_additive.seasonal.plot(figsize = (20, 4))\n    plt.show()","1c7e16fd":"for symbol in symbols:\n\n    monthly = _time_series.get_monthly(symbol)\n\n    print(symbol)\n    \n    seasonal_multiplicative = seasonal_decompose(monthly.symbol, model = 'multiplicative')\n    seasonal_multiplicative.seasonal.plot(figsize = (20, 4))\n    plt.show()","67af3366":"for symbol in symbols:\n\n    weekly = _time_series.get_weekly(symbol)\n\n    print(symbol)\n    \n    seasonal_additive = seasonal_decompose(weekly.symbol, model = 'additive')\n    seasonal_additive.seasonal.plot(figsize = (20, 4))\n    plt.show()","e5621c41":"for symbol in symbols:\n\n    weekly = _time_series.get_weekly(symbol)\n\n    print(symbol)\n    \n    seasonal_multiplicative = seasonal_decompose(weekly.symbol, model = 'multiplicative')\n    seasonal_multiplicative.seasonal.plot(figsize = (20, 4))\n    plt.show()","d00ebf7e":"for symbol in symbols:\n\n    monthly = _time_series.get_monthly(symbol)\n\n    print(symbol)\n    \n    seasonal_additive = seasonal_decompose(monthly.symbol, model = 'additive')\n    print(seasonal_additive.seasonal.idxmax(), seasonal_additive.seasonal.max())\n    print(seasonal_additive.seasonal.idxmin(), seasonal_additive.seasonal.min())","d73d4f48":"for symbol in symbols:\n\n    monthly = _time_series.get_monthly(symbol)\n\n    print(symbol)\n    \n    seasonal_multiplicative = seasonal_decompose(monthly.symbol, model = 'multiplicative')\n    print(seasonal_multiplicative.seasonal.idxmax(), seasonal_multiplicative.seasonal.max())\n    print(seasonal_multiplicative.seasonal.idxmin(), seasonal_multiplicative.seasonal.min())","56657c24":"for symbol in symbols:\n\n    weekly = _time_series.get_weekly(symbol)\n\n    print(symbol)\n    \n    seasonal_additive = seasonal_decompose(weekly.symbol, model = 'additive')\n    print(seasonal_additive.seasonal.idxmax(), seasonal_additive.seasonal.max())\n    print(seasonal_additive.seasonal.idxmin(), seasonal_additive.seasonal.min())","5b5abed7":"for symbol in symbols:\n\n    weekly = _time_series.get_weekly(symbol)\n\n    print(symbol)\n    \n    seasonal_multiplicative = seasonal_decompose(weekly.symbol, model = 'multiplicative')\n    print(seasonal_multiplicative.seasonal.idxmax(), seasonal_multiplicative.seasonal.max())\n    print(seasonal_multiplicative.seasonal.idxmin(), seasonal_multiplicative.seasonal.min())","382a3c52":"for symbol in symbols:\n\n    monthly = _time_series.get_monthly(symbol)\n\n    residual_additive = seasonal_decompose(monthly.symbol, model = 'additive')\n    \n    print(symbol, 'Residual Mean:', residual_additive.resid.mean())\n        \n    residual_additive.resid.plot(figsize = (20, 4))\n    plt.show()","186e259e":"for symbol in symbols:\n\n    monthly = _time_series.get_monthly(symbol)\n\n    residual_multiplicative = seasonal_decompose(monthly.symbol, model = 'additive')\n    \n    print(symbol, 'Residual Mean:', residual_multiplicative.resid.mean())\n    \n    residual_multiplicative.resid.plot(figsize = (20, 4))\n    plt.show()","d6c98068":"for symbol in symbols:\n\n    weekly = _time_series.get_weekly(symbol)\n\n    residual_additive = seasonal_decompose(weekly.symbol, model = 'additive')\n    \n    print(symbol, 'Residual Mean:', residual_additive.resid.mean())\n        \n    residual_additive.resid.plot(figsize = (20, 4))\n    plt.show()","fbfb37b8":"for symbol in symbols:\n\n    weekly = _time_series.get_weekly(symbol)\n\n    residual_multiplicative = seasonal_decompose(weekly.symbol, model = 'additive')\n    \n    print(symbol, 'Residual Mean:', residual_multiplicative.resid.mean())\n    \n    residual_multiplicative.resid.plot(figsize = (20, 4))\n    plt.show()","287eb315":"for symbol in symbols:\n\n    monthly = _time_series.get_monthly(symbol)\n\n    print(symbol)\n    print(sts.adfuller(monthly))","4c4f89cc":"for symbol in symbols:\n\n    weekly = _time_series.get_weekly(symbol)\n\n    print(symbol)\n    print(sts.adfuller(weekly))","9316b17f":"for symbol in symbols:\n\n    daily = _time_series.get_daily(symbol)\n\n    print(symbol)\n    print(sts.adfuller(daily))","1d499b25":"for symbol in symbols:\n\n    monthly = _time_series.get_monthly(symbol)\n\n    print(symbol)\n    sgt.plot_acf(monthly.symbol, zero = False)\n    plt.show()","0d175e6c":"for symbol in symbols:\n\n    weekly = _time_series.get_weekly(symbol)\n\n    print(symbol)\n    sgt.plot_acf(weekly.symbol, zero = False)\n    plt.show()","c57536b3":"for symbol in symbols:\n\n    daily = _time_series.get_daily(symbol)\n\n    print(symbol)\n    sgt.plot_acf(daily.symbol, zero = False)\n    plt.show()","26d50796":"for symbol in symbols:\n\n    monthly = _time_series.get_monthly(symbol)\n\n    print(symbol)\n    sgt.plot_pacf(monthly.symbol, zero = False, method = ('ols'), lags = 5)\n    plt.show()","f56faba7":"for symbol in symbols:\n\n    weekly = _time_series.get_weekly(symbol)\n\n    print(symbol)\n    sgt.plot_pacf(weekly.symbol, zero = False, method = ('ols'), lags = 5)\n    plt.show()","8c30cd86":"for symbol in symbols:\n\n    daily = _time_series.get_weekly(symbol)\n\n    print(symbol)\n    sgt.plot_pacf(daily.symbol, zero = False, method = ('ols'), lags = 5)\n    plt.show()","83d9c6da":"for symbol in symbols:\n\n    monthly = _time_series.get_monthly(symbol)\n\n    print(symbol)\n    scipy.stats.probplot(monthly.symbol, plot = pylab)\n    pylab.show()","7f2ad218":"for symbol in symbols:\n\n    weekly = _time_series.get_weekly(symbol)\n\n    print(symbol)\n    scipy.stats.probplot(weekly.symbol, plot = pylab)\n    pylab.show()","69dfd816":"for symbol in symbols:\n\n    daily = _time_series.get_daily(symbol)\n\n    print(symbol)\n    scipy.stats.probplot(daily.symbol, plot = pylab)\n    pylab.show()","485866ba":"for symbol in symbols:\n\n    monthly_returns = _time_series.get_monthly_returns(symbol)\n\n    print(symbol)\n    monthly_returns.symbol.plot(figsize = (20, 4))\n    plt.show()","a77297e4":"for symbol in symbols:\n\n    weekly_returns = _time_series.get_weekly_returns(symbol)\n\n    print(symbol)\n    weekly_returns.symbol.plot(figsize = (20, 4))\n    plt.show()","3be19581":"for symbol in symbols:\n\n    daily_returns = _time_series.get_daily_returns(symbol)\n\n    print(symbol)\n    daily_returns.symbol.plot(figsize = (20, 4))\n    plt.show()","10ed7329":"for symbol in symbols:\n\n    monthly_returns = _time_series.get_monthly_returns(symbol)\n\n    print(symbol)\n    \n    seasonal_additive = seasonal_decompose(monthly_returns.symbol, model = 'additive')\n    seasonal_additive.trend.plot(figsize = (20, 4))\n    plt.show()","2c88f5a2":"for symbol in symbols:\n\n    monthly_returns = _time_series.get_monthly_returns(symbol)\n\n    print(symbol)\n    \n    seasonal_additive = seasonal_decompose(monthly_returns.symbol, model = 'additive')\n    seasonal_additive.seasonal.plot(figsize = (20, 4))\n    plt.show()","bf573b7e":"for symbol in symbols:\n\n    monthly_returns = _time_series.get_monthly_returns(symbol)\n\n    print(symbol)\n    \n    seasonal_additive = seasonal_decompose(monthly_returns.symbol, model = 'additive')\n    print(seasonal_additive.seasonal.idxmax(), seasonal_additive.seasonal.max())\n    print(seasonal_additive.seasonal.idxmin(), seasonal_additive.seasonal.min())","f2d85b21":"for symbol in symbols:\n\n    monthly_returns = _time_series.get_monthly_returns(symbol)\n\n    residual_additive = seasonal_decompose(monthly_returns.symbol, model = 'additive')\n    \n    print(symbol, 'Residual Mean:', residual_additive.resid.mean())\n        \n    residual_additive.resid.plot(figsize = (20, 4))\n    plt.show()","566b497a":"for symbol in symbols:\n\n    weekly_returns = _time_series.get_weekly_returns(symbol)\n\n    residual_additive = seasonal_decompose(weekly_returns.symbol, model = 'additive')\n    \n    print(symbol, 'Residual Mean:', residual_additive.resid.mean())\n        \n    residual_additive.resid.plot(figsize = (20, 4))\n    plt.show()","7d0fab4d":"for symbol in symbols:\n\n    monthly_returns = _time_series.get_monthly_returns(symbol)\n\n    print(symbol)\n    print(sts.adfuller(monthly_returns))","3d972c23":"for symbol in symbols:\n\n    weekly_returns = _time_series.get_weekly_returns(symbol)\n\n    print(symbol)\n    print(sts.adfuller(weekly_returns))","2594c4e8":"for symbol in symbols:\n\n    daily_returns = _time_series.get_daily_returns(symbol)\n\n    print(symbol)\n    print(sts.adfuller(daily_returns.symbol))","c89ec220":"for symbol in symbols:\n\n    monthly_returns = _time_series.get_monthly_returns(symbol)\n\n    print(symbol)\n    sgt.plot_acf(monthly_returns, zero = False)\n    plt.show()","825793a1":"for symbol in symbols:\n\n    weekly_returns = _time_series.get_weekly_returns(symbol)\n\n    print(symbol)\n    sgt.plot_acf(weekly_returns, zero = False)\n    plt.show()","8160fb89":"for symbol in symbols:\n\n    daily_returns = _time_series.get_daily_returns(symbol)\n\n    print(symbol)\n    sgt.plot_acf(daily_returns, zero = False)\n    plt.show()","4cccdeca":"for symbol in symbols:\n\n    monthly_returns = _time_series.get_monthly_returns(symbol)\n\n    print(symbol)\n    sgt.plot_pacf(monthly_returns, lags = 5, zero = False, method = ('ols'))\n    plt.show()","9fac65a1":"for symbol in symbols:\n\n    weekly_returns = _time_series.get_weekly_returns(symbol)\n\n    print(symbol)\n    \n    sgt.plot_pacf(weekly_returns.symbol, lags = 5, zero = False, method = ('ols'))\n    plt.show()","b93cbbf7":"for symbol in symbols:\n\n    daily_returns = _time_series.get_daily_returns(symbol)\n\n    print(symbol)\n    \n    sgt.plot_pacf(daily_returns.symbol, lags = 5, zero = False, method = ('ols'))\n    plt.show()","594710a8":"for symbol in symbols:\n\n    monthly_returns = _time_series.get_monthly_returns(symbol)\n\n    print(symbol)\n    scipy.stats.probplot(monthly_returns.symbol, plot = pylab)\n    pylab.show()","02963441":"for symbol in symbols:\n\n    weekly_returns = _time_series.get_weekly_returns(symbol)\n\n    print(symbol)\n    scipy.stats.probplot(weekly_returns.symbol, plot = pylab)\n    pylab.show()","d66225aa":"for symbol in symbols:\n\n    daily_returns = _time_series.get_daily_returns(symbol)\n\n    print(symbol)\n    scipy.stats.probplot(daily_returns.symbol, plot = pylab)\n    pylab.show()","8f6f3a92":"for symbol in symbols:\n    \n    daily = _time_series.get_daily_returns(symbol)\n\n    size = int(len(daily) * 0.8)\n    train, test = daily.iloc[:size], daily.iloc[size:]\n\n    model = auto_arima(train.symbol)\n    print(symbol, model)","e5613cd8":"for symbol in symbols:\n    \n    weekly = _time_series.get_weekly_returns(symbol)\n\n    size = int(len(weekly) * 0.8)\n    train, test = weekly.iloc[:size], weekly.iloc[size:]\n\n    model = auto_arima(train.symbol)\n    print(symbol, model)","b9667e7c":"for symbol in symbols:\n    \n    monthly = _time_series.get_monthly_returns(symbol)\n\n    size = int(len(monthly) * 0.8)\n    train, test = monthly.iloc[:size], monthly.iloc[size:]\n\n    model = auto_arima(train.symbol)\n    print(symbol, model)","7e7a724b":"#### Monthly Data","9424eb29":"# Appendix\n\n<a id='Appendix'><\/a>","266132ae":"# Executive Summary\n\n<a id='Executive_Summary'><\/a>\n\n## Correlation of Returns\n\nHighest correlations of returns can be seen between respective equity types. Growth stocks trade like growth stocks and mature blue chips trade like mature blue chips. Therefore, the strongest correlations can be found between Amazon and Facebook representing growth stocks. Mature blue chips represented by IBM and 3M. [Link](#Correlation_Returns)\n\n## Trend\n\nAmazon and Facebook appear to show an upward trend in their share prices across monthly and weekly graphs. This would make sense given that both are growth stocks. IBM and 3M exhibit trend lines consistent with mature blue chip equities. [Link Prices](#Trend)\n\nAll equities exhibit no trend in terms of returns. [Link Returns](#Trend_Returns) Supported by stationarity below.\n\n## Seasonality\n\nAll equities appear to exhibit seasonality in terms of equity prices and returns. [Link Prices](#Seasonality) [Link Returns](#Seasonality_Returns)\n\n## Stationarity\n\nAll equities prices exhibit non-stationarity at the 1% level. [Link Prices](#Stationarity) \n\nReturns exhibit stationarity and were therefore used in determining ARIMA models. [Link Returns](#Stationarity_Returns)\n\n## Autocorrelation\n\nAll equities exhibit some degree of autocorrelation at; monthly, weekly, and daily intervals. However, this doesn't necessarily mean that prior periods are a good predictor of future periods. The bid and ask for an equity will always be in close proximity of the current price absent some catastrophic event that would produce a no bid. This means that an equity's price will not swing from say a hundred dollars to five dollars and then back to a hundred dollars within a few ticks simply because the market forces required to do so would be enormous. The price would need to ride each tick upwards or downwards based on whatever market forces were prevalent at the time. Therefore, the last few ticks will always be more correlated to the current price than previous ticks. \n\nAn equity price can be within a statistically significant range of another equity price regardless of whether the price has moved up or down. In order to provide benefit from a trading standpoint, it's not simply about knowing that the price will be in a certain range in some future period, It's about knowing whether the future period will be specifically up or down. [Link Prices](#Autocorrelation) [Link Returns](#Autocorrelation_Returns)\n\nNo statistically significant autocorrelation can be seen for any equity when examining returns. This makes intuitive sense since even though two prices can be very close in dollar value, their relative differences on a percentage basis can be vastly different when accounting for negative swings.\n\nThis becomes more apparent when examining partial autocorrelation. Here we can see that really only the prior interval is significant for both price and return. [Link Prices](#Partial_Autocorrelation) [Link Returns](#Partial_Autocorrelation_Returns)\n\nThis is also supported by ARIMA models. Amazon and 3M appear to be the best candidates for first order models. Although, I would be skeptical about the true predictive power even at first order. Time series modelling doesn't appear to be very effective in predicting equity prices or returns. [Link](#ARIMA_Models)\n\n\n","1e0e7507":"#### Daily","7a53d2db":"#### Weekly Data","f0b1b39a":"#### Monthly","ecd57d2b":"### Seasonality Range\n\n<a id='Seasonality_Range_Returns'><\/a>","70a43f5f":"#### Monthly Data","367bee28":"#### Daily","c0fae0dc":"#### Daily","1c3796d8":"#### Weekly","a9064f45":"#### Weekly Data","1d6dc396":"#### Monthly Data","59b17b79":"#### Weekly","6e45435d":"## Returns Data\n\n<a id='Returns_Data'><\/a>","34a624a7":"### Partial Autocorrelation\n\n<a id='Partial_Autocorrelation_Returns'><\/a>","28ec26ff":"#### Monthly Data","70200e98":"#### Monthly","ef83baab":"#### Monthly Data","d6c67b5b":"#### Weekly","2ddab8db":"#### Monthly","cad2f174":"### Stationarity\n\n<a id='Stationarity'><\/a>\n\nAll equities exhibit non-stationarity at the 1% level when considering prices.","862622f2":"### Monthly","77861f7d":"#### Daily","47b48ff3":"### Autocorrelation\n\n<a id='Autocorrelation_Returns'><\/a>","fac8da7d":"#### Daily","5a3f4a72":"### Trend Plots\n\n<a id='Trend_Plots'><\/a>\n\nAmazon and Facebook appear to show an upward trend in their share prices across monthly and weekly graphs. This would make sense given that both are growth stocks. IBM and 3M exhibit trend lines consistent with mature blue chip equities.","990a5ed8":"#### Weekly Data","513faf99":"### Probability Plots\n\n<a id='Probability_Plots_Returns'><\/a>","b18aab2f":"### Monthly","416fa247":"#### Monthly Data","4f6d6f06":"### Weekly","0e32add3":"#### Weekly","08de5451":"### Time Series Plots\n\n<a id='Returns_Plots'><\/a>","e726a1b0":"### Trend Plots\n\n<a id='Trend_Plots_Returns'><\/a>\n\nNo significant trends are present for any equity when examining returns.","7ca29051":"#### Monthly","6efc307f":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\">\n<ul class=\"toc-item\">\n<li>\n<span>\n<a href=\"#Executive_Summary\" data-toc-modified-id=\"Executive_Summary\">\n<span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Executive Summary<\/a>\n<\/span>\n<\/li>\n<li>\n<span>\n<a href=\"#Appendix\" data-toc-modified-id=\"Appendix\">\n<span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Appendix<\/a>\n<\/span>\n<ul class=\"toc-item\">\n<li>\n<span>\n<a href=\"#Price_Data\" data-toc-modified-id=\"Price_Data\">\n<span class=\"toc-item-num\">2.1&nbsp;&nbsp;<\/span>Price Data<\/a>\n<\/span>\n<ul class=\"toc-item\">\n<li>\n<span>\n<a href=\"#Price_Plots\" data-toc-modified-id=\"Price_Plots\">\n<span class=\"toc-item-num\">2.1.1&nbsp;&nbsp;<\/span>Price Plots<\/a>\n<\/span>\n<\/li>\n<li>\n<span>\n<a href=\"#Trend_Plots\" data-toc-modified-id=\"Trend_Plots\">\n<span class=\"toc-item-num\">2.1.2&nbsp;&nbsp;<\/span>Trend Plots<\/a>\n<\/span>\n<\/li>\n<li>\n<span>\n<a href=\"#Seasonality_Plots\" data-toc-modified-id=\"Seasonality_Plots\">\n<span class=\"toc-item-num\">2.1.3&nbsp;&nbsp;<\/span>Seasonality Plots<\/a>\n<\/span>\n<\/li>\n<li>\n<span>\n<a href=\"#Seasonality_Range\" data-toc-modified-id=\"Seasonality_Range\">\n<span class=\"toc-item-num\">2.1.4&nbsp;&nbsp;<\/span>Seasonality Range<\/a>\n<\/span>\n<\/li>\n<li>\n<span>\n<a href=\"#Residual_Plots\" data-toc-modified-id=\"Residual_Plots\">\n<span class=\"toc-item-num\">2.1.5&nbsp;&nbsp;<\/span>Residual Plots<\/a>\n<\/span>\n<\/li>\n<li>\n<span>\n<a href=\"#Stationarity\" data-toc-modified-id=\"Stationarity\">\n<span class=\"toc-item-num\">2.1.6&nbsp;&nbsp;<\/span>Stationarity<\/a>\n<\/span>\n<\/li>\n<li>\n<span>\n<a href=\"#Autocorrelation\" data-toc-modified-id=\"Autocorrelation\">\n<span class=\"toc-item-num\">2.1.7&nbsp;&nbsp;<\/span>Autocorrelation<\/a>\n<\/span>\n<\/li>\n<li>\n<span>\n<a href=\"#Partial_Autocorrelation\" data-toc-modified-id=\"Partial_Autocorrelation\">\n<span class=\"toc-item-num\">2.1.8&nbsp;&nbsp;<\/span>Partial Autocorrelation<\/a>\n<\/span>\n<\/li>\n<li>\n<span>\n<a href=\"#Probability_Plots\" data-toc-modified-id=\"Probability_Plots\">\n<span class=\"toc-item-num\">2.1.9&nbsp;&nbsp;<\/span>Probability Plots<\/a>\n<\/span>\n<\/li>\n<\/ul>\n<\/li>\n<li>\n<span>\n<a href=\"#Returns_Data\" data-toc-modified-id=\"Returns_Data\">\n<span class=\"toc-item-num\">2.2&nbsp;&nbsp;<\/span>Returns Data<\/a>\n<\/span>\n<ul class=\"toc-item\">\n<li>\n<span>\n<a href=\"#Returns_Plots\" data-toc-modified-id=\"Returns_Plots\">\n<span class=\"toc-item-num\">2.2.1&nbsp;&nbsp;<\/span>Returns Plots<\/a>\n<\/span>\n<\/li>\n<li>\n<span>\n<a href=\"#Trend_Plots_Returns\" data-toc-modified-id=\"Trend_Plots_Returns\">\n<span class=\"toc-item-num\">2.2.2&nbsp;&nbsp;<\/span>Trend Plots<\/a>\n<\/span>\n<\/li>\n<li>\n<span>\n<a href=\"#Seasonality_Plots_Returns\" data-toc-modified-id=\"Seasonality_Plots_Returns\">\n<span class=\"toc-item-num\">2.2.3&nbsp;&nbsp;<\/span>Seasonality Plots<\/a>\n<\/span>\n<\/li>\n<li>\n<span>\n<a href=\"#Seasonality_Range_Returns\" data-toc-modified-id=\"Seasonality_Range_Returns\">\n<span class=\"toc-item-num\">2.2.4&nbsp;&nbsp;<\/span>Seasonality Range<\/a>\n<\/span>\n<\/li>\n<li>\n<span>\n<a href=\"#Residual_Plots_Returns\" data-toc-modified-id=\"Residual_Plots_Returns\">\n<span class=\"toc-item-num\">2.2.5&nbsp;&nbsp;<\/span>Residual Plots<\/a>\n<\/span>\n<\/li>\n<li>\n<span>\n<a href=\"#Stationarity_Returns\" data-toc-modified-id=\"Stationarity_Returns\">\n<span class=\"toc-item-num\">2.2.6&nbsp;&nbsp;<\/span>Stationarity<\/a>\n<\/span>\n<\/li>\n<li>\n<span>\n<a href=\"#Autocorrelation_Returns\" data-toc-modified-id=\"Autocorrelation_Returns\">\n<span class=\"toc-item-num\">2.2.7&nbsp;&nbsp;<\/span>Autocorrelation<\/a>\n<\/span>\n<\/li>\n<li>\n<span>\n<a href=\"#Partial_Autocorrelation_Returns\" data-toc-modified-id=\"Partial_Autocorrelation_Returns\">\n<span class=\"toc-item-num\">2.2.8&nbsp;&nbsp;<\/span>Partial Autocorrelation<\/a>\n<\/span>\n<\/li>\n<li>\n<span>\n<a href=\"#Probability_Plots_Returns\" data-toc-modified-id=\"Probability_Plots_Returns\">\n<span class=\"toc-item-num\">2.2.9&nbsp;&nbsp;<\/span>Probability Plots<\/a>\n<\/span>\n<\/li>\n<li>\n<span>\n<a href=\"#ARIMA_Models\" data-toc-modified-id=\"ARIMA_Models\">\n<span class=\"toc-item-num\">2.2.10&nbsp;&nbsp;<\/span>ARIMA Models<\/a>\n<\/span>\n<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<\/li>\n<\/ul> \n<\/div>\n","4c3e8f52":"### Weekly","61a115ee":"### Residual Plots\n\n<a id='Residual_Plots'><\/a>","ce5699eb":"#### Weekly","5423c31d":"### ARIMA Models\n\n<a id='ARIMA_Models'><\/a>\n\nAmazon and 3M appear to be the best candidates for first order models. Although, I would be skeptical about the true predictive power even at first order. Time series modelling doesn't appear to be very effective in predicting equity prices or returns.","e0d0b7eb":"### Residual Plots\n\n<a id='Residual_Plots_Returns'><\/a>\n\nResidual mean at monthly and weekly intervals are very close to zero for all equities.","534fc2b1":"### Daily","0344218a":"#### Daily Data","cf498388":"### Seasonality Plots\n\n<a id='Seasonality_Plots_Returns'><\/a>","aa3565ba":"#### Monthly","d3b00afb":"#### Monthly","3b99f156":"#### Weekly Data","d08cb837":"### Stationarity\n\n<a id='Stationarity_Returns'><\/a>","8eb99d11":"#### Monthly","78975626":"### Partial Autocorrelation\n\n<a id='Partial_Autocorrelation'><\/a>\n\nIt would appear that only the prior interval is signficant and that the impact of prior periods have already been accounted for in this prior interval.","32a26178":"## Price Data\n\n<a id='Price_Data'><\/a>","92d3cd40":"### Seasonality Plots\n\n<a id='Seasonality_Plots'><\/a>\n\nAll equities appear to exhibit seasonality of returns.","9325c7d3":"#### Monthly","4c1472fb":"#### Weekly Data","508a2da3":"### Daily","dcdeb912":"#### Weekly","d83f6345":"#### Weekly Data","ad26728a":"### Autocorrelation\n\n<a id='Autocorrelation'><\/a>\n\nAll equities exhibit some degree of autocorrelation at; monthly, weekly, and daily intervals. However, this doesn't necessarily mean that prior periods are a good predictor of future periods. An equity price can be within a statistically significant range of another equity price regardless of whether the price has moved up or down.","872d0f7d":"### Probability Plots \n\n<a id='Probability_Plots'><\/a>","5192e034":"#### Daily","aeafc166":"### Seasonality Range\n\n<a id='Seasonality_Range'><\/a>"}}