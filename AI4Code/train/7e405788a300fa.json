{"cell_type":{"2bbbf606":"code","efcccb97":"code","abc4d241":"code","1b3e2a20":"code","c5fc5081":"code","4e5354af":"code","d3f480e6":"code","4b5d8193":"code","6b2cff27":"code","5287867a":"code","75630707":"code","ade30df3":"code","91a66bfe":"markdown","bcfcc5b6":"markdown","20396026":"markdown","0208807c":"markdown","9e9aaaef":"markdown","9417c683":"markdown","2d4df70d":"markdown"},"source":{"2bbbf606":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib_venn as venn\nfrom math import pi\nfrom pandas.plotting import parallel_coordinates\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly as py\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","efcccb97":"dictionary = {\"column1\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\n              \"column2\":[1,2,3,4,np.nan,6,7,8,np.nan,10,np.nan,12,13,14,15,16,np.nan,18,np.nan,20],\n              \"column3\":[1,2,3,4,np.nan,6,7,8,9,10,11,12,13,np.nan,15,16,17,18,np.nan,20]}\n\ndata_missingno = pd.DataFrame(dictionary)\n\nimport missingno as msno\nmsno.matrix(data_missingno)\nplt.show()","abc4d241":"msno.bar(data_missingno)\nplt.show()","1b3e2a20":"data = pd.read_csv('..\/input\/iris\/Iris.csv')\ndata= data.drop(['Id'], axis=1)\n\nplt.figure(figsize=(15,10))\nparallel_coordinates(data, 'Species', colormap=plt.get_cmap(\"Set1\"))\nplt.title(\"Iris data class visualization according to features(setosa, versicolor, virginica)\")\nplt.xlabel(\"Features of data set\")\nplt.ylabel(\"cm\")\nplt.savefig(\"graph.png\")\nplt.show()","c5fc5081":"corr = data.iloc[:,0:4].corr()\ncorr","4e5354af":"import networkx as nx\n\nlinks = corr.stack().reset_index()\nlinks.columns = ['var1', 'var2', 'value']\n\nthreshold =-1\n\nlinks_filtered = links.loc[ (links['value'] >= threshold) & (links['var1'] != links['var2'])]\n\nG = nx.from_pandas_edgelist(links_filtered,'var1','var2')\n\nnx.draw_circular(G, with_labels=True, node_color='orange', node_size=300, edge_color='red', linewidths=1, font_size=10)","d3f480e6":"data.head()","4b5d8193":"from matplotlib_venn import venn2\nsepal_length = data.iloc[:,0]\nsepal_width = data.iloc[:,1]\npetal_length = data.iloc[:,2]\npetal_width = data.iloc[:,3]\nvenn2(subsets = (len(sepal_length)-15, len(sepal_width)-15,15), set_labels = ('sepal_length', 'sepal_width'))\nplt.show()","6b2cff27":"feature_names = \"sepal_length\",\"sepal_width\",\"petal_length\",\"petal_width\"\nfeature_size = [len(sepal_length),len(sepal_width),len(petal_length),len(petal_width)]\n\ncircle = plt.Circle((0,0),0.2,color=\"purple\")\nplt.pie(feature_size,labels=feature_names,colors=[\"red\",\"green\",\"blue\",\"cyan\"])\np=plt.gcf()\np.gca().add_artist(circle)\nplt.title(\"Number of Each Features\")\nplt.show()","5287867a":"df = data.loc[:,[\"SepalLengthCm\",\"SepalWidthCm\",\"PetalLengthCm\",\"PetalWidthCm\"]]\ndf1=data.Species\nx= dict(zip(df1.unique(),\"rgb\"))\nrow_colors=df1.map(x)\ncg =sns.clustermap(df,row_colors=row_colors,figsize=(12,12),metric=\"correlation\")\nplt.setp(cg.ax_heatmap.yaxis.get_majorticklabels(),rotation=0,size=8)\nplt.show()","75630707":"trace1 =go.Scatter(\n    x=df.index,\n    y=df.SepalLengthCm,\n    mode=\"markers\",\n    xaxis='x2',\n    yaxis='y2',\n    name=\"SepalLengthCm\",\n    marker=dict(color='rgba(0,112,20,0.8)'))\ntrace2= go.Histogram(\n    x=df.SepalLengthCm,\n    opacity=0.75,\n    name=\"Sepal Length(Cm)\",\n    marker=dict(color='rgba(10,200,250,0.6)'))\n\ndata =[trace1,trace2]\nlayout = go.Layout(xaxis2=dict(domain=[0.7,1],anchor='y2',), \n                   yaxis2=dict(domain=[0.6, 0.95], anchor ='x2'),\n                   title = 'Sepal length(Cm) Histogram and Scatter Plot')\n\nfig=go.Figure(data=data, layout=layout)\niplot(fig)","ade30df3":"# import data again\ndata = pd.read_csv('..\/input\/iris\/Iris.csv')\n# data of iris setosa\niris_setosa = data[data.Species == \"Iris-setosa\"]\n# # data of iris virginica\niris_virginica = data[data.Species == \"Iris-virginica\"]\n\n# trace1 =  iris setosa\ntrace1 = go.Scatter3d(\n    x=iris_setosa.SepalLengthCm,\n    y=iris_setosa.SepalWidthCm,\n    z=iris_setosa.PetalLengthCm,\n    mode='markers',\n    name = \"iris_setosa\",\n    marker=dict(\n        color='rgb(217, 100, 100)',\n        size=12,\n        line=dict(\n            color='rgb(255, 255, 255)',\n            width=0.1\n        )\n    )\n)\n# trace2 =  iris virginica\ntrace2 = go.Scatter3d(\n    x=iris_virginica.SepalLengthCm,\n    y=iris_virginica.SepalWidthCm,\n    z=iris_virginica.PetalLengthCm,\n    mode='markers',\n    name = \"iris_virginica\",\n    marker=dict(\n        color='rgb(54, 170, 127)',\n        size=12,\n        line=dict(\n            color='rgb(204, 204, 204)',\n            width=0.1\n        )\n    )\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = ' 3D iris_setosa and iris_virginica',\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0\n    )\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","91a66bfe":"# Donut(Matplotlib)","bcfcc5b6":"# Inset Plots(Plotly)","20396026":"# Parallel Plots(Pandas)","0208807c":"# Network Charts(Networkx)","9e9aaaef":"# Basic 3D Scatter Plot(Plotly)","9417c683":"# Venn (Matplotlib)","2d4df70d":"# Cluster Map(Seaborn)"}}