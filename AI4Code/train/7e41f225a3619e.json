{"cell_type":{"e98ba2c6":"code","f0d57b0e":"code","6e255ea3":"code","8a9a6f8d":"code","f9e00091":"code","b76db1cb":"code","b698657d":"code","9bba17fd":"code","4d6698cf":"code","1e4e966c":"code","8087dc2a":"code","c403f248":"code","9bdd3eca":"code","70cf16a8":"code","5460f385":"code","6bad3a86":"code","fcbef173":"code","2a311b51":"code","b2af459d":"code","d0c5b260":"code","6797ff49":"code","bf067e64":"code","9cc55848":"code","0aebe297":"code","43ff7610":"code","0291648c":"code","ad87f800":"code","16ceab8c":"code","f9423a86":"code","10109ca9":"code","5988130d":"code","0f759134":"code","b0346cba":"code","02b71f40":"code","96cfc016":"code","94123a7d":"code","d8698d06":"code","92803ead":"code","8c51eb74":"code","51891d9d":"code","cc0d6c10":"code","5a7e87af":"code","b9e0e4df":"code","381054de":"code","e0cf25b0":"code","761c665e":"code","4dca02b4":"code","8af7018e":"code","98d53ab9":"code","19d42c97":"code","a023f00c":"code","6318b524":"code","6528cbed":"code","29f2de58":"code","59dfcc01":"code","cdf2e350":"code","0d879003":"code","e04f7d3f":"code","a423c75f":"code","a0899b59":"code","b1905733":"code","f8cfec89":"code","7b690840":"code","18d3f584":"code","18d4fb25":"code","d7c1b81c":"code","349c59c6":"code","7d834a8e":"code","5b694489":"code","b9fce313":"code","9588a916":"code","d36d113a":"code","bbe9f2cd":"code","741024bd":"code","60d59b12":"code","a059ae91":"code","429eb1d1":"code","34505175":"code","d6d404c0":"code","1c6637ad":"code","f2317ef9":"code","594c59e3":"code","fc93bf69":"code","32dfdc19":"code","09f57823":"code","7ebd37ee":"code","d06bd60c":"code","4b80e7c7":"code","7325ddde":"code","731579c9":"code","80b5ab4e":"code","34c2743a":"code","666823c3":"code","e306bb3f":"code","91266007":"code","feddce1a":"code","03931f38":"code","e8138c5d":"code","4b01fa13":"code","d4fd6731":"code","ae441d08":"code","61c38182":"code","97153fed":"code","4414b1d3":"markdown","0e0e4011":"markdown","7c0bb414":"markdown","b82c059f":"markdown","781f6046":"markdown","0bd589b3":"markdown","8942ff1c":"markdown","97b1aa7b":"markdown","adb198a8":"markdown","827f6ed6":"markdown","c1d8053b":"markdown","cb7d3b6b":"markdown","e634384c":"markdown","8122f651":"markdown","9b6e1b43":"markdown","bd70acc1":"markdown","34de9b60":"markdown","ec3eba36":"markdown","a954f046":"markdown","d6d44565":"markdown","3288d0d2":"markdown","890a6ad9":"markdown","db49412d":"markdown","a1ec229e":"markdown","2007008d":"markdown","eaa99878":"markdown","befb6093":"markdown","5ebe68a7":"markdown","d27696b0":"markdown"},"source":{"e98ba2c6":"# get latest version of pip\n# !pip install --upgrade pip\n\n# for calender map\n# ! pip install calmap\n\n# to convert us statenames to state codes\n# ! pip install us\n\n# to get continent name from country name\n# ! pip install pycountry_convert","f0d57b0e":"# math opeations\n# import math\n# produce random numbers\n# import random\n# to load json files\nimport json\n# datetime oprations\nfrom datetime import timedelta\n# to get web contents\nfrom urllib.request import urlopen\n\n# for numerical analyiss\nimport numpy as np\n# to store and process data in dataframe\nimport pandas as pd","6e255ea3":"# basic visualization package\nimport matplotlib.pyplot as plt\n# advanced ploting\nimport seaborn as sns\n\n# interactive visualization\nimport plotly.express as px\nimport plotly.graph_objs as go\n# import plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots","8a9a6f8d":"# for offline ploting\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)","f9e00091":"# converter\n# from pandas.plotting import register_matplotlib_converters\n# register_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# to USA states details\n# import us","b76db1cb":"# color pallette\ncnf, dth, rec, act = '#393e46', '#ff2e63', '#21bf73', '#fe9801' \n\n# seaborn plot style\n# sns.set_style('darkgrid')","b698657d":"# list files\n# ==========\n\n# !ls ..\/input\/corona-virus-report","9bba17fd":"# Full data\n# =========\n\nfull_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv')\n# full_table.head()","4d6698cf":"# Grouped by day, country\n# =======================\n\nfull_grouped = pd.read_csv('..\/input\/corona-virus-report\/full_grouped.csv')\nfull_grouped['Date'] = pd.to_datetime(full_grouped['Date'])\n# full_grouped.head()","1e4e966c":"# Day wise\n# ========\n\nday_wise = pd.read_csv('..\/input\/corona-virus-report\/day_wise.csv')\nday_wise['Date'] = pd.to_datetime(day_wise['Date'])\n# day_wise.head()","8087dc2a":"# Country wise\n# ============\n\ncountry_wise = pd.read_csv('..\/input\/corona-virus-report\/country_wise_latest.csv')\ncountry_wise = country_wise.replace('', np.nan).fillna(0)\n# country_wise.head()","c403f248":"# Worldometer data\n# ================\n\nworldometer_data = pd.read_csv('..\/input\/corona-virus-report\/worldometer_data.csv')\nworldometer_data = worldometer_data.replace('', np.nan).fillna(0)\n# worldometer_data.head()","9bdd3eca":"temp = day_wise[['Date','Deaths', 'Recovered', 'Active']].tail(1)\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Recovered'])\nfig = px.treemap(temp, path=[\"variable\"], values=\"value\", height=225, \n                 color_discrete_sequence=[act, rec, dth])\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","70cf16a8":"def plot_map(df, col, pal):\n    df = df[df[col]>0]\n    fig = px.choropleth(df, locations=\"Country\/Region\", locationmode='country names', \n                  color=col, hover_name=\"Country\/Region\", \n                  title=col, hover_data=[col], color_continuous_scale=pal)\n#     fig.update_layout(coloraxis_showscale=False)\n    fig.show()","5460f385":"plot_map(country_wise, 'Confirmed', 'matter')","6bad3a86":"plot_map(country_wise, 'Deaths', 'matter')","fcbef173":"plot_map(country_wise, 'Deaths \/ 100 Cases', 'matter')","2a311b51":"# Over the time\n\nfig = px.choropleth(full_grouped, locations=\"Country\/Region\", \n                    color=np.log(full_grouped[\"Confirmed\"]),\n                    locationmode='country names', hover_name=\"Country\/Region\", \n                    animation_frame=full_grouped[\"Date\"].dt.strftime('%Y-%m-%d'),\n                    title='Cases over time', color_continuous_scale=px.colors.sequential.matter)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","b2af459d":"def plot_daywise(col, hue):\n    fig = px.bar(day_wise, x=\"Date\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","d0c5b260":"def plot_daywise_line(col, hue):\n    fig = px.line(day_wise, x=\"Date\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","6797ff49":"temp = full_grouped.groupby('Date')['Recovered', 'Deaths', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case', height=600, width=700,\n             title='Cases over time', color_discrete_sequence = [rec, dth, act])\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","bf067e64":"plot_daywise('Confirmed', '#333333')","9cc55848":"plot_daywise('Active', '#333333')","0aebe297":"plot_daywise('New cases', '#333333')","43ff7610":"plot_daywise('Deaths', dth)","0291648c":"plot_daywise('New deaths', dth)","ad87f800":"plot_daywise('Recovered', rec)","16ceab8c":"plot_daywise('New recovered', rec)","f9423a86":"plot_daywise_line('Deaths \/ 100 Cases', dth)","10109ca9":"plot_daywise_line('Deaths \/ 100 Recovered', dth)","5988130d":"plot_daywise_line('Recovered \/ 100 Cases', rec)","0f759134":"plot_daywise('No. of countries', '#035aa6')","b0346cba":"temp = day_wise[['Date', 'Recovered', 'Active']]\ntemp = temp.melt(id_vars='Date', value_vars=['Recovered', 'Active'], \n                 var_name='Variable', value_name='Count')\npx.line(temp, x='Date', y='Count', color='Variable')","02b71f40":"def plot_hbar(df, col, n, hover_data=[]):\n    fig = px.bar(df.sort_values(col).tail(n), \n                 x=col, y=\"Country\/Region\", color='WHO Region',  \n                 text=col, orientation='h', width=700, hover_data=hover_data,\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide')\n    fig.show()","96cfc016":"def plot_hbar_wm(col, n, min_pop=1000000, sort='descending'):\n    df = worldometer_data[worldometer_data['Population']>min_pop]\n    df = df.sort_values(col, ascending=True).tail(n)\n    fig = px.bar(df,\n                 x=col, y=\"Country\/Region\", color='WHO Region',  \n                 text=col, orientation='h', width=700, \n                 color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.update_layout(title=col+' (Only countries with > 1M Pop)', \n                      xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide')\n    fig.show()","94123a7d":"plot_hbar(country_wise, 'Confirmed', 15)","d8698d06":"plot_hbar(country_wise, 'Active', 15)","92803ead":"plot_hbar(country_wise, 'New cases', 15)","8c51eb74":"plot_hbar(country_wise, 'Deaths', 15)","51891d9d":"plot_hbar(country_wise, 'New deaths', 15)","cc0d6c10":"plot_hbar(country_wise, 'Deaths \/ 100 Cases', 15)","5a7e87af":"plot_hbar(country_wise, 'Recovered', 15)","b9e0e4df":"plot_hbar(country_wise, 'New recovered', 15)","381054de":"plot_hbar(country_wise, 'Recovered \/ 100 Cases', 15)","e0cf25b0":"plot_hbar(country_wise, '1 week change', 15)","761c665e":"plot_hbar(country_wise, '1 week % increase', 15)","4dca02b4":"plot_hbar_wm('Tot Cases\/1M pop', 15, 1000000)","8af7018e":"plot_hbar_wm('Deaths\/1M pop', 15, 1000000)","98d53ab9":"plot_hbar_wm('TotalTests', 15, 1000000)","19d42c97":"plot_hbar_wm('Tests\/1M pop', 15)","a023f00c":"def plot_stacked(col):\n    fig = px.bar(full_grouped, x=\"Date\", y=col, color='Country\/Region', \n                 height=600, title=col, \n                 color_discrete_sequence = px.colors.cyclical.mygbm)\n    fig.update_layout(showlegend=True)\n    fig.show()","6318b524":"def plot_line(col):\n    fig = px.line(full_grouped, x=\"Date\", y=col, color='Country\/Region', \n                  height=600, title=col, \n                  color_discrete_sequence = px.colors.cyclical.mygbm)\n    fig.update_layout(showlegend=True)\n    fig.show()","6528cbed":"plot_stacked('Confirmed')","29f2de58":"plot_stacked('Deaths')","59dfcc01":"plot_stacked('New cases')","cdf2e350":"plot_stacked('Active')","0d879003":"plot_line('Confirmed')","e04f7d3f":"plot_line('Deaths')","a423c75f":"plot_line('New cases')","a0899b59":"plot_line('Active')","b1905733":"temp = pd.merge(full_grouped[['Date', 'Country\/Region', 'Confirmed', 'Deaths']], \n                day_wise[['Date', 'Confirmed', 'Deaths']], on='Date')\ntemp['% Confirmed'] = round(temp['Confirmed_x']\/temp['Confirmed_y'], 3)*100\ntemp['% Deaths'] = round(temp['Deaths_x']\/temp['Deaths_y'], 3)*100\ntemp.head()","f8cfec89":"fig = px.bar(temp, x='Date', y='% Confirmed', color='Country\/Region', \n             range_y=(0, 100), title='% of Cases from each country', \n             color_discrete_sequence=px.colors.qualitative.Prism)\nfig.show()","7b690840":"fig = px.bar(temp, x='Date', y='% Deaths', color='Country\/Region', \n             range_y=(0, 100), title='% of Cases from each country', \n             color_discrete_sequence=px.colors.qualitative.Prism)\nfig.show()","18d3f584":"def gt_n(n):\n    countries = full_grouped[full_grouped['Confirmed']>n]['Country\/Region'].unique()\n    temp = full_table[full_table['Country\/Region'].isin(countries)]\n    temp = temp.groupby(['Country\/Region', 'Date'])['Confirmed'].sum().reset_index()\n    temp = temp[temp['Confirmed']>n]\n    # print(temp.head())\n\n    min_date = temp.groupby('Country\/Region')['Date'].min().reset_index()\n    min_date.columns = ['Country\/Region', 'Min Date']\n    # print(min_date.head())\n\n    from_nth_case = pd.merge(temp, min_date, on='Country\/Region')\n    from_nth_case['Date'] = pd.to_datetime(from_nth_case['Date'])\n    from_nth_case['Min Date'] = pd.to_datetime(from_nth_case['Min Date'])\n    from_nth_case['N days'] = (from_nth_case['Date'] - from_nth_case['Min Date']).dt.days\n    # print(from_nth_case.head())\n\n    fig = px.line(from_nth_case, x='N days', y='Confirmed', color='Country\/Region', \n                  title='N days from '+str(n)+' case', height=600)\n    fig.show()","18d4fb25":"gt_n(100000)","d7c1b81c":"fig = px.scatter(country_wise.sort_values('Deaths', ascending=False).iloc[:20, :], \n                 x='Confirmed', y='Deaths', color='Country\/Region', size='Confirmed', \n                 height=700, text='Country\/Region', log_x=True, log_y=True, \n                 title='Deaths vs Confirmed (Scale is in log10)')\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","349c59c6":"def plot_treemap(col):\n    fig = px.treemap(country_wise, path=[\"Country\/Region\"], values=col, height=700,\n                 title=col, color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.data[0].textinfo = 'label+text+value'\n    fig.show()","7d834a8e":"plot_treemap('Confirmed')","5b694489":"plot_treemap('Deaths')","b9fce313":"def plot_bubble(col, pal):\n    temp = full_grouped[full_grouped[col]>0].sort_values('Country\/Region', ascending=False)\n    fig = px.scatter(temp, x='Date', y='Country\/Region', size=col, color=col, height=3000,\n                    color_continuous_scale=pal)\n    fig.update_layout(yaxis = dict(dtick = 1))\n    fig.update(layout_coloraxis_showscale=False)\n    fig.show()","9588a916":"plot_bubble('New cases', 'Viridis')","d36d113a":"plot_bubble('Active', 'Viridis')","bbe9f2cd":"temp = full_grouped[['Date', 'Country\/Region', 'New cases']]\ntemp['New cases reported ?'] = temp['New cases']!=0\ntemp['New cases reported ?'] = temp['New cases reported ?'].astype(int)\n# temp.head()","741024bd":"fig = go.Figure(data=go.Heatmap(\n        z=temp['New cases reported ?'],\n        x=temp['Date'],\n        y=temp['Country\/Region'],\n        colorscale='Emrld',\n        showlegend=False,\n        text=temp['New cases reported ?']))\n\nfig.update_layout(yaxis = dict(dtick = 1))\nfig.update_layout(height=3000)\nfig.show()","60d59b12":"# HTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1571387\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","a059ae91":"# temp = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths']\n# temp = temp.sum().diff().reset_index()\n\n# mask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\n# temp.loc[mask, 'Confirmed'] = np.nan\n# temp.loc[mask, 'Deaths'] = np.nan\n\n# countries = full_table[full_table['Confirmed']>100000]['Country\/Region'].unique()\n\n# temp = temp[temp['Country\/Region'].isin(countries)]\n\n\n# n_cols = 3\n# n_rows = math.ceil(len(countries)\/n_cols)\n\n# fig = make_subplots(rows=n_rows, cols=n_cols, shared_xaxes=False, subplot_titles=countries)\n\n# for ind, country in enumerate(countries):\n#     row = int((ind\/n_cols)+1)\n#     col = int((ind%n_cols)+1)\n#     fig.add_trace(go.Bar(x=temp['Date'], y=temp.loc[temp['Country\/Region']==country, 'Confirmed'], name=country), row=row, col=col)\n    \n# fig.update_layout(height=4000, title_text=\"No. of new cases in each Country\")\n# fig.update_layout(showlegend=False)\n# fig.show()","429eb1d1":"usa_df = pd.read_csv('..\/input\/corona-virus-report\/usa_county_wise.csv')\nusa_latest = usa_df[usa_df['Date'] == max(usa_df['Date'])]\nusa_grouped = usa_latest.groupby('Province_State')['Confirmed', 'Deaths'].sum().reset_index()","34505175":"us_code = {'Alabama': 'AL', 'Alaska': 'AK', 'American Samoa': 'AS', 'Arizona': 'AZ', 'Arkansas': 'AR', \n    'California': 'CA','Colorado': 'CO','Connecticut': 'CT','Delaware': 'DE', 'District of Columbia': 'DC', \n    'Florida': 'FL', 'Georgia': 'GA', 'Guam': 'GU', 'Hawaii': 'HI', 'Idaho': 'ID', 'Illinois': 'IL',\n    'Indiana': 'IN','Iowa': 'IA','Kansas': 'KS','Kentucky': 'KY','Louisiana': 'LA','Maine': 'ME',\n    'Maryland': 'MD','Massachusetts': 'MA','Michigan': 'MI','Minnesota': 'MN','Mississippi': 'MS',\n    'Missouri': 'MO','Montana': 'MT','Nebraska': 'NE','Nevada': 'NV','New Hampshire': 'NH', 'New Jersey': 'NJ',\n    'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC', 'North Dakota': 'ND', 'Northern Mariana Islands':'MP',\n    'Ohio': 'OH', 'Oklahoma': 'OK', 'Oregon': 'OR', 'Pennsylvania': 'PA', 'Puerto Rico': 'PR',\n    'Rhode Island': 'RI', 'South Carolina': 'SC', 'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX',\n    'Utah': 'UT', 'Vermont': 'VT', 'Virgin Islands': 'VI', 'Virginia': 'VA', 'Washington': 'WA',\n    'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY'}\n\nusa_grouped['Code'] = usa_grouped['Province_State'].map(us_code)","d6d404c0":"fig = px.choropleth(usa_grouped, color='Confirmed', locations='Code', locationmode=\"USA-states\", \n                    scope=\"usa\", color_continuous_scale=\"RdGy\", title='No. of cases in USA')\nfig","1c6637ad":"# with urlopen('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/geojson-counties-fips.json') as response:\n#     counties = json.load(response)\n\n# fig = px.choropleth(usa_latest, geojson=counties, locations='FIPS', color='Confirmed',\n#                            color_continuous_scale=\"Peach\",\n#                            scope=\"usa\",\n#                            labels={'Confirmed':'Confirmed'})\n# fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n# fig.show()","f2317ef9":"who = country_wise.groupby('WHO Region')['Confirmed', 'Deaths', 'Recovered', 'Active',\n                                         'New cases', 'Confirmed last week'].sum().reset_index()\nwho['Fatality Rate'] = round((who['Deaths'] \/ who['Confirmed']) * 100, 2)\nwho['Recovery Rate'] = (who['Recovered'] \/ who['Confirmed']) * 100\n\nwho_g = full_grouped.groupby(['WHO Region', 'Date'])['Confirmed', 'Deaths', 'Recovered', \n                                                     'Active','New cases', 'New deaths'].sum().reset_index()","594c59e3":"def plot_hbar(col, hover_data=[]):\n    fig = px.bar(who.sort_values(col), \n                 x=col, y=\"WHO Region\", color='WHO Region',  \n                 text=col, orientation='h', width=700, hover_data=hover_data,\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide')\n    fig.show()","fc93bf69":"plot_hbar('Confirmed')","32dfdc19":"plot_hbar('Deaths')","09f57823":"plot_hbar('Fatality Rate')","7ebd37ee":"temp = worldometer_data[worldometer_data['WHO Region']!=0]","d06bd60c":"fig = px.scatter(temp, x='TotalCases', y='TotalDeaths', color='WHO Region', \n                 height=700, hover_name='Country\/Region', log_x=True, log_y=True, \n                 title='Confirmed vs Deaths',\n                 color_discrete_sequence=px.colors.qualitative.Vivid)\nfig.update_traces(textposition='top center')\n# fig.update_layout(showlegend=False)\n# fig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","4b80e7c7":"fig = px.scatter(temp, x='Population', y='TotalCases', color='WHO Region', \n                 height=700, hover_name='Country\/Region', log_x=True, log_y=True, \n                 title='Population vs Confirmed',\n                 color_discrete_sequence=px.colors.qualitative.Vivid)\nfig.update_traces(textposition='top center')\n# fig.update_layout(showlegend=False)\n# fig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","7325ddde":"px.bar(who_g, x=\"Date\", y=\"Confirmed\", color='WHO Region', \n       height=600, title='Confirmed', \n       color_discrete_sequence=px.colors.qualitative.Vivid)","731579c9":"px.bar(who_g, x=\"Date\", y=\"New cases\", color='WHO Region', \n       height=600, title='New cases', \n       color_discrete_sequence=px.colors.qualitative.Vivid)","80b5ab4e":"px.box(worldometer_data, x='WHO Region', y='TotalCases', color='WHO Region',\n       title='Distribution of country wise no. of cases in different WHO Region')","34c2743a":"full_grouped['Week No.'] = full_grouped['Date'].dt.strftime('%U')\nweek_wise = full_grouped.groupby('Week No.')['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases', 'New deaths', 'New recovered'].sum().reset_index()","666823c3":"def plot_weekwise(col, hue):\n    fig = px.bar(week_wise, x=\"Week No.\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","e306bb3f":"plot_weekwise('Confirmed', '#000000')","91266007":"plot_weekwise('Deaths', dth)","feddce1a":"plot_weekwise('New cases', '#cd6684')","03931f38":"full_grouped['Month'] = pd.DatetimeIndex(full_grouped['Date']).month\nmonth_wise = full_grouped.groupby('Month')['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases', 'New deaths', 'New recovered'].sum().reset_index()","e8138c5d":"def plot_monthwise(col, hue):\n    fig = px.bar(month_wise, x=\"Month\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","4b01fa13":"plot_monthwise('Confirmed', '#000000')","d4fd6731":"plot_monthwise('Deaths', dth)","ae441d08":"plot_monthwise('New cases', '#cd6684')","61c38182":"temp = country_wise[country_wise['Active']==0]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp.reset_index(drop=True)","97153fed":"happiness_report = pd.read_csv('..\/input\/world-happiness\/2019.csv')\nhappiness_report = happiness_report[['Country or region', 'Healthy life expectancy']]\n\ntemp = country_wise.merge(happiness_report, left_on='Country\/Region', right_on='Country or region')\npx.scatter(temp, y='Deaths \/ 100 Cases', x='Healthy life expectancy', color='WHO Region', hover_data=['Country\/Region'])","4414b1d3":"# USA","0e0e4011":"# Maps","7c0bb414":"# Analysis on similar pandemic\/epidemic\/outbreak","b82c059f":"# Latest","781f6046":"### Color, theme, color palettes","0bd589b3":"## Weekly Statistics","8942ff1c":"# Composition of Cases","97b1aa7b":"# Graph after 1M cases","adb198a8":"# Healthy life expectancy vs Deaths \/ 100 Cases","827f6ed6":"https:\/\/www.kaggle.com\/imdevskp\/mers-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/sars-2003-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/western-africa-ebola-outbreak-analysis\n","c1d8053b":"### Install libraries","cb7d3b6b":"https:\/\/www.kaggle.com\/imdevskp\/covid19-vs-sars-vs-mers-vs-ebola-vs-h1n1\n\n","e634384c":"# Running Bar Chart","8122f651":"# WHO Region Wise","9b6e1b43":"# Comparison with similar epidemics","bd70acc1":"### Load libraries","34de9b60":"# Dataset","ec3eba36":"# Top 20 Countries","a954f046":"# Date vs","d6d44565":"# Confirmed vs Deaths","3288d0d2":"# Epidemic Span","890a6ad9":"## Monthly statistics","db49412d":"# Libraries","a1ec229e":"https:\/\/app.flourish.studio\/visualisation\/1571387\/edit\n\n","2007008d":"# Country Wise","eaa99878":"# Cases over the time","befb6093":"# Countries with no more active cases","5ebe68a7":"> *https:\/\/en.wikipedia.org\/wiki\/WHO_regions*","d27696b0":"# Bubble Plot"}}