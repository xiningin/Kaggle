{"cell_type":{"abe17ee6":"code","0a558f44":"code","7e62e2e6":"code","803f7dbe":"code","7185db33":"code","f829f3e3":"code","c244bc21":"code","b6ee5bff":"code","c255a8d8":"code","6a46642a":"code","938e6d83":"code","a19a3db2":"code","4be30416":"code","dff5d4f7":"code","e4a6d98d":"code","0d691ffa":"code","1d886a5e":"code","87205f36":"code","0a652975":"code","50f4d0be":"code","977eaf53":"code","b6da07f9":"code","f48f6245":"code","42c9ce2f":"code","21fb017b":"code","c3e10cc0":"code","2cf88deb":"code","942a5ddd":"code","8dec8a75":"code","905593f5":"code","f283a485":"code","6d1c5829":"code","5d42a990":"code","79240a6f":"code","5682b779":"code","3d2fc989":"code","437799f5":"code","b15a44c4":"code","42f083d7":"code","b931f88b":"code","7c75cf3a":"code","6271c2a9":"code","85d4128d":"code","9e8f3ca9":"code","94ab6f9f":"code","813688fa":"code","8d031fe0":"code","22f93423":"code","998da020":"code","818beabc":"code","64a0a7e6":"code","dd50e5f3":"code","e8b20b96":"markdown","5ed92af1":"markdown","3b2c0095":"markdown","5bb8d369":"markdown","56c886b9":"markdown","d350f36f":"markdown","2a4c0f47":"markdown","16626c2e":"markdown","a9933198":"markdown","8254a7fd":"markdown","320983ac":"markdown","e4d19161":"markdown","5e20a5be":"markdown","050acff9":"markdown","f6617148":"markdown","f36af35f":"markdown","348bd337":"markdown","7ec43d08":"markdown","86669430":"markdown","eecd795f":"markdown","ec49ea7f":"markdown","281fd964":"markdown","3e219386":"markdown","69796bfc":"markdown","36cda466":"markdown","51eb71f1":"markdown","dc9619d5":"markdown","2e91ba25":"markdown","0dc1c327":"markdown","4cdc192a":"markdown","2f9472cd":"markdown","142a2bdd":"markdown","18fbd46e":"markdown","8dd74f04":"markdown","30efaa4e":"markdown","11c1e3e8":"markdown","df1224be":"markdown","4108e7c5":"markdown","9344d438":"markdown","841dffec":"markdown","0d402923":"markdown","e145e72f":"markdown","262826a9":"markdown"},"source":{"abe17ee6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nplt.style.use('fivethirtyeight')","0a558f44":"train_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","7e62e2e6":"train_df.columns","803f7dbe":"train_df.head()","7185db33":"train_df.describe()","f829f3e3":"train_df.info()","c244bc21":"train_df.isnull().sum()","b6ee5bff":"fig = plt.figure(figsize=(12,6))\nsns.heatmap(train_df.isnull(), cbar=False)\nplt.show()","c255a8d8":"features = ['Survived', 'Pclass', 'SibSp', 'Parch','Age', 'Fare']\nmask = np.triu(np.ones_like(train_df[features].corr(), dtype=np.bool))\nfig, ax = plt.subplots(1,1,figsize=(8,6))\nax = sns.heatmap(train_df[features].corr() , mask = mask , annot = True, fmt='.2f', vmin=-1.0, vmax=1.0, cbar_kws=dict(ticks=[-1.0, -0.5, 0.00, 0.50, 1.0]))\ncbar = ax.collections[0].colorbar\ncbar.ax.tick_params(labelsize=12.5)\nplt.show()","6a46642a":"sizes = train_df['Sex'].value_counts()\ndef make_autopct(values):\n    def my_autopct(pct):\n        total = sum(values)\n        val = int(round(pct*total\/100.0))\n        return '{p:.2f}%\\n{v:d}'.format(p=pct, v=val)\n    return my_autopct\n\nfig ,ax = plt.subplots(nrows=1, ncols=1, figsize=(6,6))\nax.pie(sizes, labels=sizes.index, autopct=make_autopct(sizes), explode=[0.03,0.03])\nax.set_title('Gender Distribution')\nplt.show()","938e6d83":"size_male  = train_df[train_df['Sex']== 'male']['Survived'].value_counts()\nsize_female =train_df[train_df['Sex']== 'female']['Survived'].value_counts()[::-1]\nfig, ax = plt.subplots(nrows=1, ncols=3, figsize=(18,8))\nax[0].pie(size_male, labels=size_male.index, autopct=make_autopct(size_male), explode=[0.03,0.03], startangle=90)\nsns.countplot('Sex',hue='Survived',data=train_df,ax=ax[1])\nax[2].pie(size_female, labels=size_female.index, autopct=make_autopct(size_female), explode=[0.03,0.03], startangle=90)\nax[0].set_title('Males vs Survived')\nax[1].set_title('Survived vs Dead')\nax[2].set_title('Females vs Survived')\nplt.show()","a19a3db2":"train_df.groupby('Pclass').mean()","4be30416":"fig ,ax =plt.subplots(nrows=1, ncols=2, figsize=(18,8))\n\nsns.countplot(x='Pclass', data=train_df, ax=ax[0], color='#30A2DA')\nsns.countplot(x='Pclass', hue='Survived', data=train_df, ax=ax[1])\n\nax[0].set_title('Number Of Passengers By Class')\nax[1].set_title('Survived vs Dead')\nplt.show()","dff5d4f7":"fig ,ax =plt.subplots(nrows=1, ncols=1, figsize=(8,6))\nsns.barplot(x='Pclass', y='Survived', hue='Sex', data=train_df, ax=ax)\nplt.show()","e4a6d98d":"fig, ax = plt.subplots(1, 3, figsize=(18,8))\n\nsns.countplot(x='SibSp', data=train_df, ax=ax[0])\nsns.barplot(x='SibSp', y='Survived', data=train_df, ax=ax[1], errwidth=3)\nsns.barplot(x='SibSp', y='Survived', hue='Sex',data=train_df, ax=ax[2], errwidth=3)\nax[0].set_title('Number of Passengers By SibSp')\nax[1].set_title('SibSp vs Survived Ratio')\nax[2].set_title('SibSp and Sex vs Survived Ratio')\nplt.show()","0d691ffa":"fig, ax = plt.subplots(1, 3, figsize=(18,8))\n\nsns.countplot(x='Parch', data=train_df, ax=ax[0])\nsns.barplot(x='Parch', y='Survived', data=train_df, ax=ax[1], errwidth=3)\nsns.barplot(x='Parch', y='Survived', hue='Sex',data=train_df, ax=ax[2], errwidth=3, )\nax[2].legend(loc='upper right', title='Sex')\nax[0].set_title('Number of Passengers By Parch')\nax[1].set_title('Parch vs Survived Ratio')\nax[2].set_title('Parch and Sex vs Survived Ratio')\nplt.show()","1d886a5e":"fig ,ax =plt.subplots(nrows=3, ncols=2, figsize=(18,25))\n\nsns.countplot(x='Embarked', data=train_df, ax=ax[0,0], color='#30A2DA')\nsns.countplot(x='Embarked', hue='Sex', data=train_df, ax=ax[0,1])\nsns.countplot(x='Embarked', hue='Survived', data=train_df, ax=ax[1,0])\nsns.barplot(x='Embarked', y='Survived', data=train_df, ax=ax[1,1], errwidth=3)\nsns.barplot(x='Embarked', y='Survived', hue='Sex', data=train_df, ax=ax[2,0], errwidth=3)\nsns.pointplot(data=train_df, x=\"Embarked\",y=\"Survived\",hue=\"Pclass\", ax=ax[2,1], ci=0)\n\n\nax[0,0].set_title('Number Of Passengers By Embarked')\nax[0,1].set_title('Embarked and Sex')\nax[1,0].set_title('Embarked and Survived')\nax[1,1].set_title('Embarked vs Survived Ratio')\nax[2,0].set_title('Embarked and Sex vs Survived Ratio')\nax[2,1].set_title('Embarked and Pclass vs Survived Ratio')\nplt.show()","87205f36":"sns.factorplot('Pclass','Survived',hue='Sex',col='Embarked',data=train_df, errwidth=3)\nplt.show()","0a652975":"female = train_df[train_df['Sex']=='female']\nmale = train_df[train_df['Sex']=='male']\n\nfig, ax = plt.subplots(nrows=1, ncols=2,figsize=(16, 6))\n\nsns.distplot(female[female['Survived']==1].Age.dropna(), bins=18, label='survived: 1', ax=ax[0], kde=False, color=\"green\")\nsns.distplot(female[female['Survived']==0].Age.dropna(), bins=40, label='survived: 0', ax=ax[0], kde=False, color=\"red\")\n\nsns.distplot(male[male['Survived']==1].Age.dropna(), bins=18, label ='survived: 1', ax=ax[1], kde=False, color=\"green\")\nsns.distplot(male[male['Survived']==0].Age.dropna(), bins=40, label ='survived: 0', ax=ax[1], kde=False, color=\"red\")\nax[0].legend()\nax[1].legend()\nax[0].set_title('Female')\nax[1].set_title('Male')\nplt.show()","50f4d0be":"female = train_df[train_df['Sex']=='female']\nmale = train_df[train_df['Sex']=='male']\n\ndef draw_plot(df1, df2, i):\n    sns.distplot(df1[(df1['Survived']==1) & (df1['Pclass']==i+1)].Age.dropna(), bins=18, label='survived: 1', ax=ax[0,i], kde=False, color=\"green\")\n    sns.distplot(df1[(df1['Survived']==0) & (df1['Pclass']==i+1)].Age.dropna(), bins=40, label='survived: 0', ax=ax[0,i], kde=False, color=\"red\")  \n    sns.distplot(df2[(df2['Survived']==1) & (df2['Pclass']==i+1)].Age.dropna(), bins=18, label='survived: 1', ax=ax[1,i], kde=False, color=\"green\")\n    sns.distplot(df2[(df2['Survived']==0) & (df2['Pclass']==i+1)].Age.dropna(), bins=40, label='survived: 0', ax=ax[1,i], kde=False, color=\"red\")\n    \nfig, ax = plt.subplots(nrows=2, ncols=3,figsize=(18, 15))\nfor i in range(3):\n    draw_plot(female, male, i)\n    ax[0,i].legend(loc='upper right')\n    ax[1,i].legend(loc='upper right')\n    ax[0,i].set_title('Pclass {} vs Survived - Female'.format(i+1))\n    ax[1,i].set_title('Pclass {} vs Survived - Male'.format(i+1))\nplt.show()","977eaf53":"fig, ax= plt.subplots(nrows=1, ncols=3, figsize=(20,8))\nsns.distplot(train_df[train_df['Pclass']==1].Fare,ax=ax[0])\nax[0].set_title('Fares in Pclass 1')\nsns.distplot(train_df[train_df['Pclass']==2].Fare,ax=ax[1])\nax[1].set_title('Fares in Pclass 2')\nsns.distplot(train_df[train_df['Pclass']==3].Fare,ax=ax[2])\nax[2].set_title('Fares in Pclass 3')\nplt.show()","b6da07f9":"train_df","f48f6245":"train_df_len = len(train_df)\ndf = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)\ndf.sample(10)","42c9ce2f":"df.isnull().sum()","21fb017b":"df['Appellation']=0\nfor i in df:\n    df['Appellation']=df.Name.str.extract('([A-Za-z]+)\\.')\ndf['Appellation'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Other'],inplace=True)\ndf['Appellation'].value_counts()","c3e10cc0":"df[df['Age'].isnull()]","2cf88deb":"df.groupby('Appellation')['Age'].mean()","942a5ddd":"df.loc[(df.Age.isnull())&(df.Appellation=='Master'),'Age']=5\ndf.loc[(df.Age.isnull())&(df.Appellation=='Miss'),'Age']=22\ndf.loc[(df.Age.isnull())&(df.Appellation=='Mr'),'Age']=33\ndf.loc[(df.Age.isnull())&(df.Appellation=='Mrs'),'Age']=37\ndf.loc[(df.Age.isnull())&(df.Appellation=='Other'),'Age']=45","8dec8a75":"df['Age'].isnull().any()","905593f5":"df[df['Embarked'].isnull()]","f283a485":"fig = plt.figure(figsize=(5, 6))\nsns.boxplot(y=\"Fare\",x = \"Embarked\", data=df)\nplt.show()","6d1c5829":"df[\"Embarked\"] = df[\"Embarked\"].fillna(\"C\")\ndf[\"Embarked\"].isnull().any()","5d42a990":"df[df[\"Fare\"].isnull()]","79240a6f":"df[\"Fare\"] = df[\"Fare\"].fillna(np.mean(df[df[\"Pclass\"] == 3][\"Fare\"]))\ndf[\"Fare\"].isnull().any()","5682b779":"df.isnull().any()","3d2fc989":"df.head(5)","437799f5":"df = df.drop(['Name', \"PassengerId\", \"Ticket\", \"Cabin\"], axis=1)\ndf.head()","b15a44c4":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ndf['Sex'] = le.fit_transform(df[\"Sex\"])\ndf['Embarked'] = le.fit_transform(df['Embarked'])\ndf['Appellation'] = le.fit_transform(df[\"Appellation\"])\ndf.head()","42f083d7":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score","b931f88b":"train_df_len","7c75cf3a":"test = df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","6271c2a9":"test.head()","85d4128d":"train = df[:train_df_len]\nx = train.drop(labels = \"Survived\", axis = 1)\ny = train[\"Survived\"]\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.15, random_state = 42)\nprint(\"x_train\",len(x_train))\nprint(\"x_test\",len(x_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","9e8f3ca9":"result_dict = {}","94ab6f9f":"logreg = LogisticRegression(C=0.04)\nlogreg.fit(x_train, y_train)\n\nresult_dict[\"Logistic Regression\"] = logreg.score(x_test, y_test)\n\nlogreg.score(x_test, y_test)","813688fa":"knn = KNeighborsClassifier(n_neighbors=23)\nknn.fit(x_train, y_train)\n\nresult_dict[\"KNN Classification\"] = knn.score(x_test, y_test)\n\nknn.score(x_test, y_test)","8d031fe0":"svm = SVC(random_state=1, gamma=0.006, C=11, kernel=\"rbf\")\nsvm.fit(x_train, y_train)\n\nresult_dict[\"SVM Classification\"] = svm.score(x_test, y_test)\n\nsvm.score(x_test, y_test)","22f93423":"d_tree = DecisionTreeClassifier(random_state=6, max_depth=10, min_samples_split=2)\nd_tree.fit(x_train, y_train)\n\nresult_dict[\"Decision Tree Classification\"] = d_tree.score(x_test, y_test)\n\nd_tree.score(x_test, y_test)","998da020":"rf = RandomForestClassifier(\n    max_features= 5, \n    min_samples_split= 6,\n    min_samples_leaf=1,\n    n_estimators= 700,\n    random_state=42\n    )\n\nrf.fit(x_train, y_train)\n\nresult_dict[\"Random Forest Classification\"] = rf.score(x_test, y_test)\n\nrf.score(x_test, y_test)","818beabc":"results_df = pd.DataFrame(data=result_dict.values(), index=result_dict.keys(), columns= [\"accuracy score\"])\nresults_df.sort_values(by=\"accuracy score\", ascending=False)","64a0a7e6":"votingC = VotingClassifier(estimators = [(\"dt\",d_tree),\n                                        (\"rfc\",rf),\n                                        (\"lr\",logreg)],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(x_train, y_train)\nprint(accuracy_score(votingC.predict(x_test),y_test))","dd50e5f3":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","e8b20b96":"### SVM Classification","5ed92af1":"* We filtered the appellations. I think we can take advantage of this to fill the Age section.","3b2c0095":"Feature Name   | Description\n---------------|-------------\nPassengerId    | Specific passenger number\nSurvived       | Survived (1) or died (0)\nPclass         | Passenger's class\nName           | Passenger's name\nSex            | Passenger's gender\nAge            | Passenger's age\nSibSp          | Number of siblings\/spouses on board\nParch          | Number of parents\/children on board\nTicket         | Ticket number\nFare           | Fare\nCabin          | Passenger's Cabin\nEmbarked       | Embarkation port","5bb8d369":"<a id='3'><\/a><br>\n# Checking Missing Values","56c886b9":"<a id='8'><\/a><br>\n### SibSp","d350f36f":"> * As you can see, there are NaN values in the Age and Embarked properties.\n> * Let's examine the features in the data set one by one. And let's try to fill in these NaN values at the end of the review.","2a4c0f47":"<a id='12'><\/a><br>\n### Age","16626c2e":"<a id='14'><\/a><br>\n# Filling Missing Values","a9933198":"<a id='5'><\/a><br>\n## Categorical Variable Analysis","8254a7fd":"<a id='2'><\/a><br>\n# Veriable Description","320983ac":"> * It seems that the survival rate at young ages is really high.","e4d19161":"<a id='7'><\/a><br>\n### 2. Pclass","5e20a5be":"1. [Load and Check Data](#1)\n1. [Veriable Description](#2)\n1. [Checking Missing Values](#3)\n1. [Analysing The Features](#4)\n    * [Categorical Variable Analysis](#5)\n        * [Sex](#6)\n        * [Pclass](#7)\n        * [SibSp](#8)\n        * [Parch](#9)\n        * [Embarked](#10)\n    * [Numerical Variable Analysis](#11)\n        * [Age](#12)\n        * [Fare](#13)\n1. [Filling Missing Values](#14)\n    * [Filling Age Feature](#15)\n    * [Filling Embarked Feature](#16)\n    * [Filling Fare Feature](#17)\n1. [Label Encoding](#18)\n1. [Modeling](#19)","050acff9":"> * As can be seen, the number of 3rd class passengers is quite higher than the others. However, it is not possible to say the same for the number of surviving passengers.\n> * The survival rate of 1st class passengers is around 63%, 2nd class passengers 48% and 3rd class passengers 25%.\n> * Let's add the gender factor to these graphs.","f6617148":"### KNN Classification","f36af35f":"### Logistic Regression","348bd337":"> * Among 1st and 2nd class passengers, the survival rate of women is really high.\n> * But regardless of class, the survival rate of men is much lower than that of women.","7ec43d08":"### Prediction and Submission","86669430":"<a id='4'><\/a><br>\n# Analysing The Features","eecd795f":"> * As you can see, the number of men on the ship is much more than women.","ec49ea7f":"<a id='13'><\/a><br>\n### Fare","281fd964":"* As can be seen, option C looks very suitable for us.","3e219386":"<a id='18'><\/a><br>\n# Label Encoding","69796bfc":"<a id='1'><\/a><br>\n# Load and Check Data","36cda466":"### Random Forest Classification","51eb71f1":"> * Let's look at the correlation map before starting to examine our features. Then we will examine them one by one.","dc9619d5":"### Ensemble Modeling","2e91ba25":"### train_test_split","0dc1c327":"<a id='16'><\/a><br>\n### Filling Embarked Feature","4cdc192a":"<a id='19'><\/a><br>\n# Modeling","2f9472cd":"<a id='11'><\/a><br>\n## Numerical Variable Analysis","142a2bdd":"<a id='6'><\/a><br>\n### 1. Sex","18fbd46e":"<a id='9'><\/a><br>\n### Parch","8dd74f04":"<a id='15'><\/a><br>\n### Filling Age Feature","30efaa4e":"<a id='10'><\/a><br>\n### Embarked","11c1e3e8":"> * First of all, let's have a look how many passengers survived.","df1224be":"# Content","4108e7c5":"> * We've seen a lot more men on the ship.\n> * Despite this, the number of women saved is almost twice the number of males saved.\n> * The survival rates for a women on the ship is around **74-75%** while that for men in around **18-19%**.","9344d438":"* Categorical Variables : Survived, Pclass, Name, Sex, SibSp, Parch ,Ticket, Embarked\n* Numerical Variables   : PassengerId, Age, Fare","841dffec":"* The first thing that strikes me with these people is that the fare part is quite high. Let's go over this point.","0d402923":"<a id='17'><\/a><br>\n### Filling Fare Feature","e145e72f":"* Now that we have examined our properties, let's try to fill in the NaN values.\n* Let's take a look again","262826a9":"### Decision Tree Classification"}}