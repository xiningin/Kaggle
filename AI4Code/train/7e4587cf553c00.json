{"cell_type":{"decf36f3":"code","8912b885":"code","74f7cdbc":"code","0a51e0be":"code","2223da1c":"code","48450cbe":"code","c2fcd5f4":"markdown","7a1165fe":"markdown","ab301175":"markdown","5d9d680b":"markdown","3da4a36a":"markdown","f439fa06":"markdown"},"source":{"decf36f3":"import numpy as np, pandas as pd\nfrom sklearn.neighbors import KNeighborsClassifier \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.svm import SVC,NuSVC\nfrom sklearn.feature_selection import VarianceThreshold\nfrom random import sample\n","8912b885":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","74f7cdbc":"oof = np.zeros(len(train))\npreds = np.zeros(len(test))\n\noof_lr = np.zeros(len(train))\npreds_lr = np.zeros(len(test))\n\noof_nusvc = np.zeros(len(train))\npreds_nusvc = np.zeros(len(test))\n\noof_knn = np.zeros(len(train))\npreds_knn = np.zeros(len(test))\ncols = [c for c in train.columns if c not in ['id', 'target', 'wheezy-copper-turtle-magic']]\n\n\n","0a51e0be":"for i in range(512):\n    \n    \n    train2 = train[train['wheezy-copper-turtle-magic']==i]\n    test2 = test[test['wheezy-copper-turtle-magic']==i]\n    idx1 = train2.index; idx2 = test2.index\n    train2.reset_index(drop=True,inplace=True)\n    \n    \n    sel = VarianceThreshold(threshold=1).fit(train2[cols])\n    train3 = sel.transform(train2[cols])\n    test3 = sel.transform(test2[cols])\n        \n    \n    skf = StratifiedKFold(n_splits=11, random_state=42)\n    \n    for train_index, test_index in skf.split(train3, train2['target']):\n        \n        u=NuSVC(.6,'poly',4,'auto',.1,1,1)\n        u.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        \n        oof_nusvc[idx1[test_index]] = u.predict_proba(train3[test_index,:])[:,1]\n        preds_nusvc[idx2] += u.predict_proba(test3)[:,1] \/ skf.n_splits\n        \n        k=KNeighborsClassifier(17,p=2.9)\n        k.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        \n        oof_knn[idx1[test_index]] = k.predict_proba(train3[test_index,:])[:,1]\n        preds_knn[idx2] += k.predict_proba(test3)[:,1] \/ skf.n_splits\n        \n        \n        logi = LogisticRegression('l2',1,.01,.05,1,solver='liblinear',max_iter=500)\n        logi.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        \n        oof_lr[idx1[test_index]] = logi.predict_proba(train3[test_index,:])[:,1]\n        preds_lr[idx2] += logi.predict_proba(test3)[:,1] \/ skf.n_splits\n        \n        clf = SVC(probability=True,kernel='poly',degree=4,gamma='auto')\n        clf.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        oof[idx1[test_index]] = clf.predict_proba(train3[test_index,:])[:,1]\n        preds[idx2] += clf.predict_proba(test3)[:,1] \/ skf.n_splits\n        ","2223da1c":"data_tr=pd.DataFrame({'svm':oof,'svm_mod':oof_nusvc,'knn':oof_knn,'mlp':oof_lr})\ndata_ts=pd.DataFrame({'svm':preds,'svm_mod':preds_nusvc,'knn':preds_knn,'mlp':preds_lr})\n\nindex_trn=sample(list(data_tr.index),round(len(data_tr)*0.8))\n\nlogi1 = LogisticRegression('l2',1,.01,.05,1,solver='liblinear',max_iter=500)\nlogi1.fit(data_tr.loc[index_trn,:].values,train.loc[index_trn,'target'])\nest_train=logi1.predict_proba(data_tr.drop(labels=index_trn,axis=0).values)[:,1]\nest_tst=logi1.predict_proba(data_ts.values)[:,1]\n\n\nauc = roc_auc_score(train['target'],oof_nusvc)\nprint('CV score =',round(auc,5))\n\nauc = roc_auc_score(train.drop(labels=index_trn,axis=0)['target'],est_train)\nprint('CV score =',round(auc,5))\n","48450cbe":"sub = pd.read_csv('..\/input\/sample_submission.csv')\nsub['target'] = est_tst\nsub.to_csv('submission.csv',index=False)","c2fcd5f4":"Generating vector to store scores of models NuSVM, Logistic, SVM and KNN. ","7a1165fe":"Loading libraries ...","ab301175":"Loading train and test datasets.","5d9d680b":"Save result submission.","3da4a36a":"In this step is applyed regression logistic with the scores of each models as input features to perform the final result.","f439fa06":"Looping to generate models for each class of variable 'wheezy-copper-turtle-magic' and select features with techinique VarianceThreshold for each parameter equals 1 and with appling of Kfold of size 11."}}