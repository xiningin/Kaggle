{"cell_type":{"9ab2a59f":"code","90d7fafd":"code","fc7299fe":"code","bc6a9b04":"code","a06a5635":"code","5bf1b6dc":"code","74584d98":"code","f927b81b":"code","9b761e34":"code","2a3db1a9":"code","5ec89bca":"code","702ccadd":"code","1a4c5195":"code","6e0bd12e":"code","4a55e014":"code","da3196d0":"code","1f5c7f0c":"code","7a268272":"code","6f702d08":"code","4c1dbe8d":"code","34b276ab":"code","ee0d9881":"code","c5d23aa7":"code","c72f64f4":"code","29daf56a":"code","583df879":"code","dc2ee612":"code","8037ab78":"code","a6e90816":"code","45465bf9":"code","b8e57382":"code","8669698e":"code","8d879ef2":"code","044d54c5":"code","87017162":"code","9ab85efa":"code","11b49f2e":"code","9616115e":"code","92f253de":"code","f6ca104c":"code","17ab20bc":"code","8ed07329":"code","cd7d85b4":"code","9538ae88":"code","29101e02":"code","4437679e":"code","2d9d1dfe":"code","a4169401":"code","11c88603":"code","5e16df2e":"code","992e7483":"code","3a4d1f89":"code","573e7249":"code","42739c53":"code","0cfe5ecd":"code","ef90b338":"code","1fa99805":"code","862452d4":"code","3f09248e":"code","f898f6ec":"code","d10c1108":"code","931ea7be":"code","b793cb00":"code","81031664":"code","a06932cb":"code","bbf48c1d":"code","a203781b":"code","8716f653":"code","b277b20a":"code","dd7e47b4":"code","ddf58fb8":"code","e55914b4":"code","85b71d45":"code","6ea752f8":"code","98376f4d":"code","1fac366c":"code","3932ec69":"code","34131c7c":"code","20bee1e0":"code","fdff1871":"code","bfb534b6":"code","f2bc2842":"code","ac2a3263":"code","0e9c722b":"code","660eeb0a":"markdown","83311cd5":"markdown","45c6beb2":"markdown","a427cdce":"markdown","114b4bba":"markdown","99494159":"markdown","f3cdf851":"markdown","6c837642":"markdown","2dd9cb31":"markdown"},"source":{"9ab2a59f":"import plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly import subplots\nimport plotly.figure_factory as ff\nimport matplotlib.pyplot as plt\n\nfrom pandas_profiling import ProfileReport\nimport seaborn as sns\nfrom sklearn import metrics\nfrom scipy import stats\n\nfrom copy import deepcopy","90d7fafd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc7299fe":"# Defining all our palette colours.\nprimary_blue = \"#496595\"\nprimary_blue2 = \"#85a1c1\"\nprimary_blue3 = \"#3f4d63\"\nprimary_grey = \"#c6ccd8\"\nprimary_grey2 = \"#696969\"\nprimary_black = \"#202022\"\nprimary_bgcolor = \"#f4f0ea\"\n\nprimary_green = px.colors.qualitative.Plotly[2]","bc6a9b04":"df = pd.read_csv('..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')\ndf.head()","a06a5635":"#Unique dates\nprint(df.date.unique())\nprint(df.date.nunique())","5bf1b6dc":"print(df.country.unique())\nprint(df.country.nunique())","74584d98":"np.around(df.describe())","f927b81b":"df.dtypes","9b761e34":"df.isna().sum()","2a3db1a9":"df.shape","5ec89bca":"report = ProfileReport(df)","702ccadd":"report","1a4c5195":"df[df['iso_code'].isnull()]","6e0bd12e":"df.columns","4a55e014":"#As we already have daily_vaccinations, with less missing values\ndf = df.drop('daily_vaccinations_raw', axis=1)","da3196d0":"df.date","1f5c7f0c":"df['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values('date', ascending=True)","7a268272":"df.dtypes","6f702d08":"df['date'] = df['date'].dt.strftime('%Y-%m-%d')","4c1dbe8d":"df['date']","34b276ab":"uniques = df['date'].unique()\nuniques","ee0d9881":"#df.loc - Access a group of rows and columns by label(s) or a boolean array.\n#Use df.loc[len(df)] - to add a new row at the end of the dataframe","c5d23aa7":"for iso_code in df['iso_code'].unique():\n    for inc_date in uniques:\n        if df.loc[df['iso_code'] == iso_code, 'date'].str.contains(inc_date).any():\n            continue\n        else:\n            df.loc[len(df)] = [None, iso_code, inc_date] + 11 * [None]","c72f64f4":"df['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values('date', ascending=True)\n\ndf['date'] = df['date'].dt.strftime('%m-%d-%Y')\n\ndf.head()","29daf56a":"[None, iso_code, inc_date] + 11 * [None]","583df879":"plt.rcParams['figure.dpi'] = 300\nfig = plt.figure(figsize=(5, 0.8), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0, hspace=0)\n\nbackground_color = \"#f6f5f5\"\n\nax0 = fig.add_subplot(gs[0, 0])\nax0.set_facecolor(primary_bgcolor)\nfor s in [\"top\",\"right\", 'left', 'bottom']:\n    ax0.spines[s].set_visible(False)\nax0.set_xticks([])\nax0.set_yticks([])\n\nax0.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax0.text(-0.12, 0.8, 'General Overview', color=primary_black, fontsize=8, ha='left', weight='bold', va='bottom')\nax0.text(-0.12, 0.79, 'A quick glance of world vaccination progress', color='#292929', fontsize=6, ha='left', va='top')\n\nax0.text(0, 0, '150', color=primary_blue, fontsize=20, ha='center', weight='bold', va='bottom')\nax0.text(0, 0, 'country with\\nVaccination Program', color=primary_grey2, fontsize=6, ha='center', va='top', weight='bold')\n\nax0.text(0.2, 0, '10', color=primary_blue, fontsize=20, ha='center', weight='bold', va='bottom')\nax0.text(0.2, 0, 'vaccines\\nused', color=primary_grey2, fontsize=6, ha='center', va='top', weight='bold')\n\nax0.text(0.4, 0, '475', color=primary_blue, fontsize=20, ha='center', weight='bold', va='bottom')\nax0.text(0.4, 0, 'million of\\ntotal vaccinations', color=primary_grey2, fontsize=6, ha='center', va='top', weight='bold')\n\nax0.text(0.65, 0, '269', color=primary_blue, fontsize=20, ha='center', weight='bold', va='bottom')\nax0.text(0.65, 0, 'million of\\npeople vaccinated', color=primary_grey2, fontsize=6, ha='center', va='top', weight='bold')\n\nax0.text(0.9, 0, '103', color=primary_blue, fontsize=20, ha='center', weight='bold', va='bottom')\nax0.text(0.9, 0, 'million of people\\nfully vaccinated', color=primary_grey2, fontsize=6, ha='center', va='top', weight='bold')\n\nplt.show()","dc2ee612":"df_copy = df.copy()","8037ab78":"df_copy.isna().sum()","a6e90816":"for iso_code in df_copy['iso_code'].unique():\n    df_copy.loc[df_copy['iso_code'] == iso_code, :] = df_copy.loc[df_copy['iso_code'] == iso_code, :].fillna(method='ffill').fillna(0)","45465bf9":"df_copy.isna().sum()","b8e57382":"df_copy.head()","8669698e":"fig = px.choropleth(\n    df_copy,                         \n    locations=\"iso_code\",         \n    color=\"total_vaccinations\",              \n    hover_name=\"country\",           \n    animation_frame=\"date\",\n    color_continuous_scale= 'viridis',\n    projection=\"natural earth\",      \n    range_color=[0,5000000],\n    title='<span style=\"font-size:36px; font-family:Times New Roman\">Number of vaccinations per country<\/span>',\n)      \nfig.show() ","8d879ef2":"fig = px.choropleth(\n    df_copy,                   \n    locations=\"iso_code\",         \n    color=\"daily_vaccinations\",    \n    hover_name=\"country\",          \n    animation_frame=\"date\",\n    color_continuous_scale= 'viridis',\n    projection=\"natural earth\",   \n    range_color=[0,5000000],\n    title='<span style=\"font-size:36px; font-family:Times New Roman\">Daily vaccinations per country<\/span>',\n) \nfig.show() ","044d54c5":"dff = df.copy()\ndff.columns","87017162":"dff.head()","9ab85efa":"dff = dff.dropna(subset=['vaccines'])\ndff = dff.groupby(['iso_code', 'vaccines']).max()\ndff","11b49f2e":"dff = dff.reset_index()\ndff['vaccine_split'] = dff['vaccines'].apply(lambda x: [w.strip() for w in x.split(',')])\ndff.head()","9616115e":"#Use pd.dummies if we have one categorical value in a cell of a column","92f253de":"dff.shape","f6ca104c":"from sklearn.preprocessing import MultiLabelBinarizer\none_hot = MultiLabelBinarizer()\ndata = one_hot.fit_transform(dff['vaccine_split'])\nvac_names = one_hot.classes_\nvac_countries=dff['country']\n\nfinal_vac_df = pd.DataFrame(data=data, columns=vac_names, index=vac_countries)\nfinal_vac_df = final_vac_df.reset_index()\nfinal_vac_df.head()","17ab20bc":"final_vac_df.shape","8ed07329":"vac_names","cd7d85b4":"df_country = final_vac_df[vac_names].sum(axis=0).sort_values()\ndf_country","9538ae88":"colors =  [primary_grey]*4 + [primary_blue2]*4 + [primary_blue]*2 \nfig = go.Figure(go.Bar(\n                x = df_country.values,\n                y = df_country.index,\n                orientation = 'h'))\nfig.update_traces(\n                marker_color = colors,\n                marker_line_color = primary_black,\n                marker_line_width = 1.5,\n                opacity = 0.6)\nfig.update_layout(\n    title='Top vaccines distributed')","29101e02":"df_regions = pd.read_csv('\/kaggle\/input\/countries-iso-codes-continent-flags-url\/countries_continents_codes_flags_url.csv')\ndf_regions.head()","4437679e":"df_merge = df.merge(df_regions[['alpha-3', 'region', 'image_url']], left_on='iso_code', right_on='alpha-3')\nworld_summary_df = pd.read_csv('\/kaggle\/input\/covid19-global-dataset\/worldometer_coronavirus_summary_data.csv')\nfull_df = df_merge.merge(world_summary_df, on='country', how='left')\nfull_df.head()","2d9d1dfe":"full_df.columns","a4169401":"full_df['total_deaths_ratio'] = full_df['total_deaths'] \/ full_df['population']\nfull_df['total_confirmed_ratio'] = full_df['total_confirmed'] \/ full_df['population']\nfull_df['total_recovered_ratio'] = full_df['total_recovered'] \/ full_df['population']\n\nworld_summary_df['total_deaths_ratio'] = world_summary_df['total_deaths'] \/ world_summary_df['population']\nworld_summary_df['total_confirmed_ratio'] = world_summary_df['total_confirmed'] \/ world_summary_df['population']\nworld_summary_df['total_recovered_ratio'] = world_summary_df['total_recovered'] \/ world_summary_df['population']","11c88603":"def get_multi_line_title(title:str, subtitle:str):\n    return f'<span style=\"font-size:32px; font-family:Times New Roman\">{title}<br><sub>{subtitle}<\/sub><\/span>'","5e16df2e":"def bar_plot(data, xcolumn, ycolumn, title, colors, ylabel=\"Count\", n=None):\n        hovertemplate ='<br><b>%{x}<\/b>'+f'<br><b>{ylabel}: <\/b>'+'%{y}<br><extra><\/extra>'    \n        #Sort according to y and drop any missing y-values\n        data = data.sort_values(ycolumn, ascending=False).dropna(subset=[ycolumn])\n        if n is not None:\n            data = data.iloc[:n] #first n values\n        else:\n            n = \"\"\n        fig = go.Figure(go.Bar(\n        hoverinfo = 'skip',\n        x = data[xcolumn],\n        y = data[ycolumn],\n        hovertemplate = hovertemplate,\n        marker = dict(\n            color = data[ycolumn],\n            colorscale=colors)))\n        \n        max_y_val = data[ycolumn].max()\n        for country, flag_url, ppl_vac in zip(data[xcolumn], data['image_url'], data[ycolumn]):\n            if not flag_url or not isinstance(flag_url, str):\n                continue\n            fig.add_layout_image(\n            dict(\n                source=flag_url,\n                x=country,\n                y = ppl_vac + 0.05 * max_y_val,\n                sizex=0.5,\n                sizey=0.08*max_y_val,\n                xanchor = \"center\",\n                yanchor=\"bottom\",\n                sizing=\"stretch\",\n                xref='x',\n                yref='y'))\n            \n        fig.update_yaxes(range=[0, max_y_val + 0.15*max_y_val])\n        \n        fig.update_layout(\n        title=title,\n        xaxis_title=f\"Top {n} {xcolumn.title()}\",\n        yaxis_title=ylabel,\n        plot_bgcolor='rgba(0,0,0,0)',\n        hovermode=\"x\",\n        )\n\n        fig.show()","992e7483":"d_ff = full_df.sort_values('people_vaccinated', ascending=False).drop_duplicates(subset=['country'], keep='first', ignore_index=True)\nd_ff.head()","3a4d1f89":"title = get_multi_line_title(\"People Vaccinated\", \"Individuals who received the first dose of the vaccine\")\nbar_plot(d_ff, 'country', \"people_vaccinated\", title, \"Blugrn\", n=5)","573e7249":"tdf = full_df.copy()\ntdf = tdf.sort_values('people_vaccinated_per_hundred', ascending=False).\\\n    drop_duplicates(subset=['country'], keep='first', ignore_index=True)","42739c53":"title = get_multi_line_title(\"People Vaccinated per Hundred\", \"Percent of individuals who received the first dose of the vaccine\")\nbar_plot(tdf, 'country', \"people_vaccinated_per_hundred\", title, \"Blugrn\", n=10, ylabel='Percent')","0cfe5ecd":"tdf = full_df.copy()\ntdf = tdf.sort_values('total_vaccinations', ascending=False).\\\n    drop_duplicates(subset=['country'], keep='first', ignore_index=True)\ntitle = get_multi_line_title(\"Total Vaccinations\", \"Total number of vaccinations by country\")\nbar_plot(tdf, 'country', \"total_vaccinations\", title, \"Purp\", n=10)","ef90b338":"tdf = full_df.copy()\ntdf = tdf.sort_values('total_vaccinations_per_hundred', ascending=False).\\\n    drop_duplicates(subset=['country'], keep='first', ignore_index=True)\ntitle = get_multi_line_title(\"Total Vaccinations per Hundred\", \"Ratio between vaccination number and total population up to the date in the country;\")\nbar_plot(tdf, 'country', \"total_vaccinations_per_hundred\", title, \"Purp\", n=10)","1fa99805":"df_regions = pd.read_csv('\/kaggle\/input\/countries-iso-codes-continent-flags-url\/countries_continents_codes_flags_url.csv')\ndf_regions.head()","862452d4":"tdf = df.merge(df_regions[['alpha-3', 'region', 'image_url']], left_on='iso_code', right_on='alpha-3')\ncontinents_tdf = tdf.sort_values('people_vaccinated_per_hundred', ascending=False).\\\n    drop_duplicates(subset=['country'], keep='first', ignore_index=True)\n\ncontinents_tdf.head()","3f09248e":"continents_tdf.region.unique()","f898f6ec":"continents = ['Europe', 'Oceania', 'Americas', 'Africa', 'Asia']\nfig = go.Figure()\n\nfor continent in continents:\n    temp_df = continents_tdf.query(f'region==\"{continent}\"')\n    temp_df = temp_df.sort_values('people_vaccinated_per_hundred', ascending=False).iloc[:5]\n    \n    fig.add_trace(\n        go.Bar(\n                y=temp_df['people_vaccinated_per_hundred'],\n                x=temp_df['country'],\n                name=continent,\n                marker={'color':temp_df['people_vaccinated_per_hundred'],'colorscale':'tealgrn'},\n                visible=True if continent=='Europe' else False))\nbuttons=[]\nfor i, continent in enumerate(continents):\n    buttons.append(dict(\n    label=continent,\n    method=\"update\",\n    args=[{\"visible\":[False]*i+[True]+[False]*(2-i+1)},\n         {'title':f'Top 5 countries for {continent}'}]))\n        \nfig.update_layout(\n    updatemenus=[\n        dict(\n        type=\"buttons\",\n        direction=\"right\",\n        active=0,\n        x=1.57,\n        y=1.2,\n        buttons=buttons)\n    ])\n\nfig.update_layout(\ntitle_text=\"Top 5 publishers per region\",\nxaxis_domain=[0.05, 1.0])\n\nfig.show()","d10c1108":"world_summary_df.head()","931ea7be":"df_1 = world_summary_df.sort_values('total_deaths_ratio', ascending=False).drop_duplicates(subset=['country'], keep='first', ignore_index=True)\ndf_1.head()","b793cb00":"df_1 = df_1.dropna(subset=['total_deaths_ratio'])","81031664":"fig = px.scatter_geo(\n    df_1,\n    locations='country',\n    color='continent',\n    locationmode='country names', #What to determine on map\n    hover_name='country',\n    size='total_deaths_ratio'\n)\n\nfig.update_layout(\ntitle_text='Deaths ratio by country',\nlegend_orientation='h',\ngeo=dict(\nshowframe=False,\nshowcoastlines=False,\nprojection_type='equirectangular'),\nfont=dict(\nfamily='TimesNewRoman',\nsize=18,\ncolor='Black'\n)\n)","a06932cb":"df_2 = world_summary_df.sort_values('total_confirmed_ratio', ascending=False).drop_duplicates(subset=['country'], keep='first', ignore_index=True)\ndf_2.head()","bbf48c1d":"df_2 = df_2.dropna(subset=['total_confirmed_ratio'])","a203781b":"fig = px.scatter_geo(\n    df_1,\n    locations='country',\n    color='continent',\n    locationmode='country names', \n    hover_name='country',\n    size='total_confirmed_ratio'\n)\n\nfig.update_layout(\ntitle_text='Total confirmed ratio by country<br><sub>Total confirmed cases divided by population<\/sub>',\nlegend_orientation='h',\ngeo=dict(\nshowframe=False,\nshowcoastlines=False,\nprojection_type='equirectangular'),\nfont=dict(\nfamily='TimesNewRoman',\nsize=18,\ncolor='Black'\n)\n)","8716f653":"world_summary_df.head()","b277b20a":"world_summary_df.describe()","dd7e47b4":"corrl = world_summary_df.drop(columns=['country', 'continent'])\n\ncorrl = corrl.corr()\nmask = np.triu(np.ones_like(corrl, dtype=np.bool))\ncorr1 = corrl.mask(mask)","ddf58fb8":"corrl","e55914b4":"mask","85b71d45":"fig = ff.create_annotated_heatmap(\n    z = corr1.to_numpy().round(2),\n    x = list(corr1.index.values),\n    y = list(corr1.columns.values),\n    xgap=3,\n    ygap=3,\n    colorscale='blugrn',\n    colorbar_thickness=30,\n    colorbar_ticklen=3\n)\n\nfig.update_layout(\n    title_text='<span style=\"font-size:32px; font-family:Times New Roman\">Features Correlation Matrix<\/span>', \n    font_family=\"Serif\",\n    titlefont={'size': 24},\n    width=800, height=700,\n    xaxis={'side': 'bottom'},\n    xaxis_showgrid=False,\n    yaxis_showgrid=False,\n    yaxis_autorange='reversed', \n    paper_bgcolor=primary_bgcolor,\n    plot_bgcolor=primary_bgcolor,\n    margin=dict(l=70, r=70, t=70, b=70, pad=1),\n)\nfig.update_xaxes(\n    ticklabelposition=\"outside bottom\",\n)\n\nfig.show()","6ea752f8":"regions_df = pd.read_csv('\/kaggle\/input\/countries-iso-codes-continent-flags-url\/countries_continents_codes_flags_url.csv')\nfull_df = df.merge(regions_df[['alpha-3', 'region', 'image_url']], left_on='iso_code', right_on='alpha-3')\n\nfull_df.head()","98376f4d":"vac_df1 = full_df.groupby(\n    ['region', 'date']).agg(\n    {'people_vaccinated': 'sum', 'daily_vaccinations': 'sum', 'people_vaccinated_per_hundred': 'sum'})","1fac366c":"vac_df1","3932ec69":"vac_df1 = vac_df1.reset_index().sort_values('date')","34131c7c":"vac_df1 = vac_df1.query('date> \"01-03-2021\" and date<\"04-27-2021\"')\nvac_df1.head()","20bee1e0":"fig = go.Figure()\nfor region in vac_df1['region'].unique():\n    fig.add_traces(go.Scatter(\n    x=vac_df1.query(f'region==\"{region}\"')['date'],\n    y=vac_df1.query(f'region==\"{region}\"')['people_vaccinated'],\n    fill='tozeroy',\n    mode='lines',\n    name=region, #for legend\n    ))\n    \nfig.update_layout(\n    # Set the name of the map\n    title_text='People vaccinated over time <br><sub>Total number of persons vaccinated between 03\/01 and 27\/04<\/sub>',\n    font=dict(\n       family='Serif',\n       size=18, \n       color='black'\n    )\n)\nfig.show()","fdff1871":"fig = px.area(vac_df1, x='date', y='people_vaccinated_per_hundred', color='region')\nfig.update_layout(\n    # Set the name of the map\n    title_text='People vaccinated per hundred over time',\n    font=dict(\n       family='Serif',\n       size=18, \n       color='black'\n    )\n)\nfig.show()","bfb534b6":"covid_cum = pd.read_csv('..\/input\/covid19-global-dataset\/worldometer_coronavirus_summary_data.csv')\ncovid_cum.head()","f2bc2842":"covid_cum.country.unique()","ac2a3263":"countries= ['Spain', 'France', 'Germany', 'Turkey', 'UK', 'Italy']\neurope_df = covid_cum[covid_cum['country'].isin(countries)].sort_values('total_deaths_per_1m_population')\n\nfig = go.Figure(go.Bar(\nx=europe_df['total_deaths_per_1m_population'],\ny=europe_df['country'],\norientation='h',\nmarker={'color': europe_df['total_deaths_per_1m_population'], 'colorscale': 'tealgrn'})\n               , layout=go.Layout(height=400, width=700))\n\nfig.update_traces(\nmarker_line_color='rgb(76,12,123)',\nmarker_line_width=1,\nopacity=0.8)\n\nfig.update_layout(\n    title_text=\"<span style='font-size:30px; font-family:Serif'>Mortality rate - Some European countries<\/span>\",\n    xaxis_title='Total deaths per 1m population',\n)\nfig.show()","0e9c722b":"countries= ['Spain', 'France', 'Germany', 'Turkey', 'UK', 'Italy']\neurope_df = covid_cum[covid_cum['country'].isin(countries)].sort_values('total_cases_per_1m_population')\n\nfig = go.Figure(go.Bar(\nx=europe_df['total_cases_per_1m_population'],\ny=europe_df['country'],\norientation='h',\nmarker={'color': europe_df['total_cases_per_1m_population'], 'colorscale': 'tealgrn'})\n               , layout=go.Layout(height=400, width=700))\n\nfig.update_traces(\nmarker_line_color='rgb(76,12,123)',\nmarker_line_width=1,\nopacity=0.8)\n\nfig.update_layout(\n    title_text=\"<span style='font-size:30px; font-family:Serif'>Mortality rate - Some European countries<\/span>\",\n    xaxis_title='Total cases per 1m population',\n)\nfig.show()","660eeb0a":"<h2>Top vaccine laboratories","83311cd5":"<h2>Data visualizations - Country","45c6beb2":"<h2>Mortality rates\n   ","a427cdce":"<h2>World summaries\n    ","114b4bba":"By default, text annotations have xref and yref set to \"x\" and \"y\", respectively, meaning that their x\/y coordinates are with respect to the axes of the plot. This means that panning the plot will cause the annotations to move. Setting xref and\/or yref to \"paper\" will cause the x and y attributes to be interpreted in paper coordinates.","99494159":"<h2>Data cleaning","f3cdf851":"<h2>Confirmed cases","6c837642":"So xanchor and yanchor can be thought of as the place on an image where x and y refer to. In your annotations you have the options x, y, xanchor, yanchor, and so on. For example, let\u2019s say you set your variables to\n\nxanchor='left'\nx=2\nThis means that the left side of your image will be positioned at x=2.If xnachor was set to middle, then the middle of the image would be at x=2.","2dd9cb31":"<h2>Country wise"}}