{"cell_type":{"aa518987":"code","f8dd771c":"code","5d30e587":"code","579cd905":"code","48449b6d":"code","1eab650a":"code","411e9bad":"code","e10773d1":"code","37a1f3ae":"code","b4eadb03":"code","e3d3f114":"code","9a42a6ec":"code","a702f70c":"code","1a527e73":"code","3b4d56a2":"code","d2915ec1":"code","82f92814":"code","662b2312":"code","f4a1784e":"code","ddcee007":"code","bf495d66":"code","8d81ffca":"code","2ee1457b":"code","7b909512":"code","021372f4":"code","32e3c98d":"code","7e842c6d":"code","01555372":"code","26e6ef82":"code","6168b638":"code","ff6bd402":"code","6cf05d2d":"code","0c7c64a8":"code","965a6dc1":"code","192fd715":"code","e65b93a2":"code","89a8f909":"code","f88a74fc":"markdown","a4a64ce0":"markdown","42366a1f":"markdown","eb688b67":"markdown","1b1a1a50":"markdown","d578d58c":"markdown"},"source":{"aa518987":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebracode;\n\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f8dd771c":"# Read the restaurants csv file\nrestaurants = pd.read_csv(\"\/kaggle\/input\/restaurants-casvp.csv\", sep=\";\")\n# Inspect the first rows of restaurants\nprint(restaurants.head())\n","5d30e587":"restaurants.info()","579cd905":"restaurants.shape","48449b6d":"restaurants.head(15)","1eab650a":"# Is there any null values? \nrestaurants.isnull().sum()","411e9bad":"# There are missing totally 4 values, for only one name of restaurant.\n# We can release that restaurant name from the matrix: restaurants.shape (43, 6).","e10773d1":"restaurants = restaurants.dropna()","37a1f3ae":"# More readable address\nrestaurants['Address'] = restaurants['adresse']+ ', ' + restaurants['ville']# + ', '\nrestaurants.head()","b4eadb03":"del(restaurants['ville'])","e3d3f114":"del(restaurants['adresse'])","9a42a6ec":"restaurants.Address[:5]","a702f70c":"restaurants.head()","1a527e73":"#restaurants[\"Nom restaurant\"]#.head(20)","3b4d56a2":"### Now almost each data are ready for Geo manipulation:","d2915ec1":"# This example uses the geopy module to produce latitude and longitudes.\n\nfrom geopy.geocoders import Nominatim\nfrom geopy.geocoders import ArcGIS\n#from geopy.geocoders import ArcGIS\nnom = ArcGIS()","82f92814":"restaurants['Coordinates'] = restaurants['Address'].apply(nom.geocode)\nrestaurants.head()","662b2312":"# I really don\u00b4t understand why the outcome is like that one above. In my local jupyter notebook is everything OK.\n# Too other maps with the location\/Coordinates will not be functional in this kernel (only locally!).","f4a1784e":"### Coordinates are ready and we can try this: \nrestaurants.Coordinates[0]","ddcee007":"restaurants.Coordinates[0].latitude","bf495d66":"restaurants.Coordinates[0].longitude","8d81ffca":"restaurants.Coordinates[0:10]","2ee1457b":"# Below are all values written for an address.\nrestaurants.Coordinates.value_counts()[0:10]","7b909512":"restaurants[\"Latitude\"] = restaurants[\"Coordinates\"].apply(lambda x: x.latitude if x !=None else None)\nrestaurants[\"Longitude\"] = restaurants[\"Coordinates\"].apply(lambda x: x.longitude if x !=None else None)\nrestaurants.head()","021372f4":"# The last esthetic modification in the dataset.\ndel restaurants['tt']","32e3c98d":"restaurants.head()","7e842c6d":"import folium\n#import branca\n%matplotlib inline","01555372":"# Example1:\n# Map of Paris\nmap_r = folium.Map(location=[48.8647, 2.3490],\n                        tiles = \"Stamen Terrain\",\n                        zoom_start = 10)\nmap_r","26e6ef82":"# Example2:\n#location = lat and long point to centre the map.\nlocation = restaurants['Latitude'].mean(), restaurants['Longitude'].mean()\n\n# Creating a basemap and the starting zoom.\nmap_r = folium.Map(location=[48.8647, 2.3490],zoom_start=12)\n\n#Each location in the DataFrame is added as a marker.\nfor i in range(0,len(restaurants)):\n        folium.Marker([restaurants['Latitude'].iloc[i],restaurants['Longitude'].iloc[i]]).add_to(map_r)\n        \nmap_r","6168b638":"### Another Example with a pop_up when you click on the icon.\nlocation = restaurants['Latitude'].mean(), restaurants['Longitude'].mean()\nmap_r = folium.Map(location=[48.8647, 2.3490],zoom_start=13)\n\nfor i in range(0,len(restaurants)):\n       \n    popup = folium.Popup('Nom restaurant', parse_html=True) \n    folium.Marker([restaurants['Latitude'].iloc[i],restaurants['Longitude'].iloc[i]],popup=popup).add_to(map_r)\nmap_r","ff6bd402":"# Restaurants types( only two)\nrestaurants.TYPE.value_counts()","6cf05d2d":"location = restaurants['Latitude'].mean(), restaurants['Longitude'].mean()\nmap_r = folium.Map(location=[48.8647, 2.3490],zoom_start=13)\n\n#The type for each restaurant  and the colour assigned to the basemap.\nfor i in range(0,len(restaurants)):\n    type_of_rest = restaurants['TYPE'].iloc[i]\n    if type_of_rest == 'E':\n        color = 'blue'\n    elif type_of_rest == 'S':\n        color = 'red'\n    \n    popup = folium.Popup('Nom restaurant', parse_html=True) \n    folium.Marker([restaurants['Latitude'].iloc[i],restaurants['Longitude'].iloc[i]],popup=popup,icon=folium.Icon(color=color, icon='info-sign')).add_to(map_r)\n\nmap_r","0c7c64a8":"# A setting for the last showcase of the map with the name and address of the restaurants in Paris.\n\ndef res_html(row):\n    i = row\n    \n    Name_of_Restaurant = restaurants['Nom restaurant'].iloc[i]       \n    Address = restaurants['Address'].iloc[i]\n    \n    left_color = \"#2A799C\"\n    right_color = \"#C5DCE7\"\n    \n    html = \"\"\"<!DOCTYPE html>\n<html>\n\n<head>\n<h4 style=\"margin-bottom:0\"; width=\"300px\">{}<\/h4>\"\"\".format(Name_of_Restaurant) + \"\"\"\n\n<\/head>\n    <table style=\"height: 126px; width: 300px;\">\n<tbody>\n<tr>\n<td style=\"background-color: \"\"\"+ left_color +\"\"\";\"><span style=\"color: #ffffff;\">Address<\/span><\/td>\n<td style=\"width: 200px;background-color: \"\"\"+ right_color +\"\"\";\">{}<\/td>\"\"\".format(Address) + \"\"\"\n<\/tr>\n\n<\/tbody>\n<\/table>\n<\/html>\n\"\"\"\n    return html","965a6dc1":"location = restaurants['Latitude'].mean(), restaurants['Longitude'].mean()\nmap_r = folium.Map(location=[48.8647, 2.3490],zoom_start=14,min_zoom=5)\n\nfor i in range(0,len(restaurants)):\n    html = res_html(i)\n \n    iframe = branca.element.IFrame(html=html,width=320,height=150)\n    popup = folium.Popup(iframe,parse_html=True)\n    \n    folium.Marker([restaurants['Latitude'].iloc[i],restaurants['Longitude'].iloc[i]],\n                  popup=popup,icon=folium.Icon(color=color, icon='info-sign')).add_to(map_r)\n\nmap_r","192fd715":"# For the viz Using GeoPandas you need to download the files with all shp, shx,...files. \n# Everything what you need is to search these files simply on Google.","e65b93a2":"# Visualisation Using GeoPandas & MatPlotLib\nimport matplotlib.pyplot as plt\nimport descartes\nimport geopandas as gpd\nfrom shapely.geometry import Point, Polygon\n\n%matplotlib inline","89a8f909":"### In GeoPandas again, you need to import a .shp file to plot on. ... Use search on Google.\nstate_map = gpd.read_file('..\/france-places-shape\/places.shp')\nfig,ax = plt.subplots(figsize = (15,15))\nstate_map.plot(ax = ax)","f88a74fc":"Thank you for your attention. Every comment is vital. And think it will be educational for me.\n\nSince I am new in python, may not all is well adjusted now. This is my first own Kaggle notebook. And too I found some inspiration from the Kaggle notebooks.\n\nLater I will update this kernel.","a4a64ce0":"### Short example of GeoPandas","42366a1f":"## A Simple visualization about Paris Restaurants in Folium:","eb688b67":"### Restaurants types:","1b1a1a50":"### Importing libraries, I like folium","d578d58c":"The Data Source is:\n\nhttps:\/\/opendata.paris.fr\/explore\/dataset\/restaurants-casvp\/export\/?disjunctive.code&disjunctive.nom_restaurant&disjunctive.type\n"}}