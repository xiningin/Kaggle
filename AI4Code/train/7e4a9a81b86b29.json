{"cell_type":{"c894318f":"code","7afca0c6":"code","c289d141":"code","997de41e":"code","2416a146":"code","c7dbdf57":"code","c7bef635":"code","908d69f0":"code","7b605d59":"code","3a5ef590":"code","e678cf04":"code","b888f281":"code","df2a9a12":"code","ac5804dc":"code","0582eac4":"code","ac570b64":"code","c94e74c1":"code","aa83d96a":"code","ca43336f":"code","39544d96":"markdown","470f1673":"markdown","10ea6583":"markdown","78fa6c3c":"markdown","af1270cd":"markdown","1332bb28":"markdown","467d87c0":"markdown","cdcc594d":"markdown","94cb3fb9":"markdown","6fcbabb0":"markdown","5b655ba6":"markdown","97001072":"markdown","488dbe7b":"markdown","392cdf97":"markdown","b9d50acf":"markdown","db8e116f":"markdown","b9fd405c":"markdown","de4fd9df":"markdown","7e4955b0":"markdown","7e51d061":"markdown","648b3c55":"markdown","2183c096":"markdown","5adfd1c3":"markdown","96fa5813":"markdown","a85c6317":"markdown","24ff9178":"markdown","6647b314":"markdown","82853f3f":"markdown"},"source":{"c894318f":"# Import torch and other required modules\nimport torch","7afca0c6":"# Example 1 - Initializing a random tensor using randn()\nx = torch.randn(3,2)\nx\ntorch.transpose(x,0,1)","c289d141":"# Example 2 \ny = torch.rand(4,5)\ny\ntorch.transpose(y,1,1)","997de41e":"# Example 3 - breaking (to illustrate when it breaks)\nz= torch.randn(3,2)\nz\ntorch.transpose(z,0)","2416a146":"# Example 1 \nx = [1,2,3]\ny = [4,5,6]\ntensor_x = torch.tensor(x)\ntensor_y = torch.tensor(y)\ntorch.cartesian_prod(tensor_x,tensor_y)","c7dbdf57":"# Example 2 - \na = [8,9]\nb = [6,7]\ntnsr_a = torch.tensor(a)\ntnsr_b = torch.tensor(b)\nc = torch.cartesian_prod(tnsr_a,tnsr_b)\nc","c7bef635":"# Example 3 - breaking (to illustrate when it breaks)\na = [1,2,3]\nb = [1,2.3,3]\ntensor_a = torch.tensor(a)\ntensor_b = torch.tensor(b)\nc = torch.cartesian_prod(tensor_a,tensor_b)\nc","908d69f0":"# Example 1 - \na = torch.arange(4.)\ntorch.reshape(a, (2, 2))","7b605d59":"# Example 2 - working\nx = torch.randn((1,14))\nprint(x)\ntorch.reshape(x,(7,2))","3a5ef590":"# Example 3 - breaking (to illustrate when it breaks)\nx = torch.randn((1,11))\nprint(x)\ntorch.reshape(x,(3,4))","e678cf04":"# Example 1 - working\ntensor_a = torch.tensor([1.,2,1])\ntorch.histc(tensor_a, bins=4, min=0, max=3)","b888f281":"# Example 2 - working\n#tensor_x = torch.tensor([1,2,3])\ntorch.histc(torch.tensor([1,2.,3]), bins= 4, min=0, max=3)","df2a9a12":"# Example 3 - breaking (to illustrate when it breaks)\ntorch.histc(torch.tensor([1,2.,3]), bins= 4, min=4, max=3)","ac5804dc":"# Example 1 -working\na = torch.rand(1,10)\ntensor_a = torch.tensor(a)\ntorch.trace(a)","0582eac4":"# Example 2 - working\n\nx = torch.arange(1., 10.).view(3, 3)\nprint(x)\ntorch.trace(x)","ac570b64":"# Example 3 - breaking (to illustrate when it breaks)\nx = torch.arange(1., 10.).view(3, 5)\nprint(x)\ntorch.trace(x)","c94e74c1":"!pip install jovian --upgrade --quiet","aa83d96a":"import jovian","ca43336f":"jovian.commit()","39544d96":"The input tensor should always have the same data type. ","470f1673":"The input tensor is being shown as a histogram of a tensor with 4 bars with the minimum as zero and the max range.","10ea6583":"first we have a matrix of 3 rows and 2 columns and after we use the transpose functions, it just transposes to 2 rows and 3 columns.","78fa6c3c":"Always make sure the histogram arguments should be the min and the maximum. ","af1270cd":"in the above example, my input random numbers is 11 elements and the reshaping arguments is bigger than that which is why we get an error","1332bb28":"So, be careful with the dimensions of the input tensor matrix. ","467d87c0":"Explanation about example","cdcc594d":"The tensor c is the paired tensor of a and b. verifying all the elements of a and b are present in c. ","94cb3fb9":"the input tensor elements are 10 and the display matrix is more than the dimensions, so, its throwing an error","6fcbabb0":"So, to properly transpose a matrix using torch.transpose(), the arguments which is the matrix to be transposed and its dimensions should be given properly.","5b655ba6":"## Reference Links\nProvide links to your references and other interesting articles about tensors\n* Official documentation for `torch.Tensor`: https:\/\/pytorch.org\/docs\/stable\/tensors.html\n* ...","97001072":"In this example, we reshape our tensor x which has 14 elements into a (7,2) matrix.","488dbe7b":"The result tensor is a product of x and y where all the elements of x are paired with all the elements of y. ","392cdf97":"The argument min should be the lower end of the range. ","b9d50acf":"Conclusion\n\nIn this notebook, we discussed few tensor functions that are in PyTorch. To learn more, you can visit\nhttps:\/\/pytorch.org\/docs\/master\/torch.html","db8e116f":"the input tensor is from elements 1 through 10. and the resulting value is the sum of the diagonal elements. ","b9fd405c":"While reshaping a matrix, we have to make sure the size of the input matrix and the shape of the resulting matrix should be the same.","de4fd9df":"The above example throws an error since the data type of the second list is not integer.","7e4955b0":"In this example, we reshape our tensor a which has 4 elements into a (2,2) matrix.","7e51d061":"Function 5 - torch.trace\n\nReturns the sum of the elements of the diagonal of the input 2-D matrix.","648b3c55":"Function 3 - torch.reshape()\n\nThis function reshapes your tensor into another shape ,and returns with the same data and number of elements.\n\n\n","2183c096":"Funtion 4- torch.histc()\n\nComputes the historgram of a tensor","5adfd1c3":"to transpose a given matrix , we need to give a proper dimensions, here I didn't give the dimensions of the matrix z.","96fa5813":" Function 1 - torch.transpose \n \n This functions returns the transposed version of the tensor. ","a85c6317":"Explanation about example","24ff9178":"The input tensor is being shown as a histogram of a tensor with 4 bars with the minimum as zero and the max range.","6647b314":"<b>Function 2- torch.cartesian_prod()<\/b>\n\n\nIt is the product of two tensors. The result will be a tensor where all the ordered pairs of both input tensors are present. The input tensors can be a sequence of lists. ","82853f3f":"Exploring PyTorch Functions\n\nGetting to know about few PyTorch Tensor Functions \n\nAn short introduction about PyTorch and about the chosen functions. \n\n- torch.transpose\n- torch.cartesian_product\n- torch.reshape\n- torch.histc\n- torch.trace"}}