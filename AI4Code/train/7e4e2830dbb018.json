{"cell_type":{"07e22f3f":"code","19465f63":"code","cf464059":"code","25f3ec5a":"code","f6d085ab":"code","4feba009":"code","9419b076":"code","1a68d336":"code","798056da":"code","a4a432e2":"code","41aec785":"code","8231298c":"code","0ed03341":"code","9172da5a":"code","c57b28cc":"code","79ef4769":"code","c1731a59":"code","7b0fd654":"code","e9205a0e":"code","5d58c16c":"code","4aaeeabf":"code","faa731a2":"code","320fde34":"code","a9fed129":"code","ee95642c":"code","9275eb4f":"code","46b9ec55":"code","2958b7a0":"code","43004546":"code","6eb828d4":"code","b26e1ecc":"code","10c6e294":"code","fd64adf7":"code","e66082ef":"code","5606325b":"code","d85a954b":"code","dece549e":"code","3266ce81":"code","18e99bc2":"code","bffb44fd":"code","dff42002":"code","dbcbddd5":"code","73065d65":"code","b901b2a5":"code","9138b6ac":"code","651c4586":"code","e838a6c5":"code","032d6d81":"code","421b4ce0":"code","22aaf16b":"code","3942fb8f":"code","258a1d47":"code","c5b45508":"code","4efdeb13":"code","4ca3caa7":"code","3a7a4a81":"code","0d438ccf":"code","869b90fa":"code","80154262":"code","67f54f78":"code","e7d08c6e":"code","9aaa3e5c":"code","670ced99":"code","5b3952c7":"code","644247ff":"code","6f61e870":"code","cbf7e989":"code","4ed606ec":"code","036b8bf5":"code","751b4f6b":"code","64f30a77":"code","9a1747bb":"code","e4e26553":"markdown","9ee74063":"markdown","89b267c7":"markdown","2c99176a":"markdown","5ec4102b":"markdown","302d72c8":"markdown","abda7953":"markdown","9e88a162":"markdown","41fde301":"markdown","79bed84b":"markdown","bc97e3ca":"markdown","f51bac8a":"markdown","328f8efc":"markdown","bc7ab79b":"markdown","319d8467":"markdown","6e1a82c1":"markdown","4fc908c4":"markdown","ae2f665c":"markdown","ee902031":"markdown","657d96d7":"markdown","a51b6093":"markdown","1b5a32c2":"markdown","ecaf72a9":"markdown","c0f1c808":"markdown","33fbc938":"markdown","efaa8e01":"markdown","a7b34f8c":"markdown","06022dc7":"markdown","c7b01ed4":"markdown","d2c8f769":"markdown","1ef5d84e":"markdown","70381f61":"markdown","9edd0eb1":"markdown","4be31bff":"markdown","36bcd3e9":"markdown","96dc3575":"markdown","c0035204":"markdown","95236c37":"markdown","1cc18d21":"markdown","e83743c8":"markdown","39b94bb7":"markdown","e4b7646e":"markdown","18c9d7c9":"markdown","b78fd34a":"markdown","ccca0ee5":"markdown","2c847fb0":"markdown","50493ff7":"markdown","cf5d7b4d":"markdown","1eadff94":"markdown","6aa3035c":"markdown","1a56d914":"markdown","01b6e771":"markdown","2a80fa11":"markdown","103fab14":"markdown","75cf3afc":"markdown","822d3d11":"markdown","e7aea603":"markdown","baa39e28":"markdown","7c84be80":"markdown","2f35c297":"markdown","547b85f0":"markdown","e3860bca":"markdown","db256064":"markdown","a308c2d2":"markdown","307b732e":"markdown","5fd5a08d":"markdown","0882f115":"markdown","1f006d77":"markdown","e48d212e":"markdown","61babe01":"markdown","245a2644":"markdown","6131574f":"markdown","56b36f32":"markdown","52989dcf":"markdown","fd912eee":"markdown","a38b3557":"markdown","b0cc5036":"markdown","dcc28383":"markdown","9538f157":"markdown","5c1bb76e":"markdown","cef0b8da":"markdown","c771750f":"markdown","9035823e":"markdown","a8cb0f9a":"markdown","9d34397e":"markdown","f6428b79":"markdown","1d042881":"markdown","13ce6083":"markdown","89d77bd5":"markdown","e08bf2c8":"markdown","3b419885":"markdown","be2ae83b":"markdown","707f23a5":"markdown","b695eec8":"markdown","7a49856c":"markdown","418795cd":"markdown","cb578647":"markdown","7431cabd":"markdown","efefae2e":"markdown","d243b7e2":"markdown","291eefc6":"markdown","0c983640":"markdown","4e48cd86":"markdown","38798e06":"markdown","1105aa98":"markdown","81821360":"markdown"},"source":{"07e22f3f":"import math\nimport tensorflow as tf","19465f63":"digits = tf.ragged.constant([[3, 1, 4, 1], [], [5, 9, 2], [6], []])\nwords = tf.ragged.constant([[\"So\", \"long\"], [\"thanks\", \"for\", \"all\", \"the\", \"fish\"]])\nprint(tf.add(digits, 3))\nprint(tf.reduce_mean(digits, axis=1))\nprint(tf.concat([digits, [[5, 3]]], axis=0))\nprint(tf.tile(digits, [1, 2]))\nprint(tf.strings.substr(words, 0, 2))\nprint(tf.map_fn(tf.math.square, digits))","cf464059":"print(digits[0]) # \uccab\ubc88\uc9f8 \ud589","25f3ec5a":"print(digits[:, :2]) # \uac01 \ud589\uc5d0\uc11c \uccab \ub450\uac1c\uc758 \uac12","f6d085ab":"print(digits + 3)","4feba009":"print(digits + tf.ragged.constant([[1, 2, 3, 4], [], [5, 6, 7], [8], []]))","9419b076":"times_two_plus_one = lambda x: x * 2 + 1\nprint(tf.ragged.map_flat_values(times_two_plus_one, digits))","1a68d336":"digits.to_list()","798056da":"digits.numpy()","a4a432e2":"sentences = tf.ragged.constant([\n    [\"Let's\", \"build\", \"some\", \"ragged\", \"tensors\", \"!\"],\n    [\"We\", \"can\", \"use\", \"tf.ragged.constant\", \".\"]])\nprint(sentences)","41aec785":"paragraphs = tf.ragged.constant([\n    [['I', 'have', 'a', 'cat'], ['His', 'name', 'is', 'Mat']],\n    [['Do', 'you', 'want', 'to', 'come', 'visit'], [\"I'm\", 'free', 'tomorrow']],\n])\nprint(paragraphs)","8231298c":"print(tf.RaggedTensor.from_value_rowids(\n    values=[3, 1, 4, 1, 5, 9, 2],\n    value_rowids=[0, 0, 0, 0, 2, 2, 3]))","0ed03341":"print(tf.RaggedTensor.from_row_lengths(\n    values=[3, 1, 4, 1, 5, 9, 2],\n    row_lengths=[4, 0, 2, 1]))","9172da5a":"print(tf.ragged.constant([[\"Hi\"], [\"How\", \"are\", \"you\"]])) # \uc88b\uc2b5\ub2c8\ub2e4: \uc790\ub8cc\ud615=string, \uae09=2","c57b28cc":"print(tf.ragged.constant([[[1, 2], [3]], [[4, 5]]])) # \uc88b\uc2b5\ub2c8\ub2e4: \uc790\ub8cc\ud615=int32, \uae09=3","79ef4769":"try:\n    tf.ragged.constant([[\"one\", \"two\"], [3, 4]]) # \ub098\uc069\ub2c8\ub2e4: \uc5ec\ub7ec \uc790\ub8cc\ud615\nexcept ValueError as exception:\n    print(exception)","c1731a59":"try:\n    tf.ragged.constant([\"A\", [\"B\", \"C\"]]) # \ub098\uc069\ub2c8\ub2e4: \uc5ec\ub7ec \uc911\ucca9 \uae4a\uc774\nexcept ValueError as exception:\n    print(exception)","7b0fd654":"queries = tf.ragged.constant([['Who', 'is', 'Dan', 'Smith'],\n                             ['Pause'],\n                             ['Will', 'it', 'rain', 'later', 'today']])\n\n# \uc784\ubca0\ub529 \ud45c\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\nnum_buckets = 1024\nembedding_size = 4\nembedding_table = tf.Variable(\n    tf.random.truncated_normal([num_buckets, embedding_size],\n                              stddev=1.0 \/ math.sqrt(embedding_size)))\n\n# \uac01 \ub2e8\uc5b4\uc758 \uc784\ubca0\ub529\uc744 \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.\nword_buckets = tf.strings.to_hash_bucket_fast(queries, num_buckets)\nword_embeddings = tf.nn.embedding_lookup(embedding_table, word_buckets) # \u2460\n\n# \uac01 \ubb38\uc7a5\uc758 \uc2dc\uc791\uacfc \ub05d\uc744 \uc704\ud55c \ud45c\uc2dc\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4.\nmarker = tf.fill([queries.nrows(), 1], '#')\npadded = tf.concat([marker, queries, marker], axis=1) # \u2461\n\n# \ub2e8\uc5b4 bigram\uc744 \uc0dd\uc131\ud558\uace0 \uc784\ubca0\ub529\uc744 \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.\nbigrams = tf.strings.join([padded[:, :-1], padded[:, 1:]], separator='+') # \u2462\n\nbigram_buckets = tf.strings.to_hash_bucket_fast(bigrams, num_buckets)\nbigram_embeddings = tf.nn.embedding_lookup(embedding_table, bigram_buckets) # \u2463\n\n# \uac01 \ubb38\uc7a5\uc758 \ud3c9\uade0 \uc784\ubca0\ub529\uc744 \ucc3e\uc2b5\ub2c8\ub2e4.\nall_embeddings = tf.concat([word_embeddings, bigram_embeddings], axis=1) # \u2464\navg_embedding = tf.reduce_mean(all_embeddings, axis=1) # \u2465\nprint(avg_embedding)","e9205a0e":"tf.ragged.constant([[\"Hi\"], [\"How\", \"are\", \"you\"]]).shape","5d58c16c":"print(tf.ragged.constant([[\"Hi\"], [\"How\", \"are\", \"you\"]]).bounding_shape())","4aaeeabf":"ragged_x = tf.ragged.constant([[\"John\"], [\"a\", \"big\", \"dog\"], [\"my\", \"cat\"]])\nragged_y = tf.ragged.constant([[\"fell\", \"asleep\"], [\"barked\"], [\"is\", \"fuzzy\"]])\nprint(tf.concat([ragged_x, ragged_y], axis=1))","faa731a2":"sparse_x = ragged_x.to_sparse()\nsparse_y = ragged_y.to_sparse()\nsparse_result = tf.sparse.concat(sp_inputs=[sparse_x, sparse_y], axis=1)\nprint(tf.sparse.to_dense(sparse_result, ''))","320fde34":"# \uacfc\uc81c: \uc5b4\ub5a4 \ubb38\uc7a5\uc774 \uc9c8\ubb38\uc778\uc9c0 \uc544\ub2cc\uc9c0 \uc608\uce21\ud558\ub77c.\nsentences = tf.constant(\n    ['What makes you think she is a witch?',\n     'She turned me into a newt.',\n     'A newt?',\n     'Well, I got better.'])\nis_question = tf.constant([True, False, True, False])\n\n# \uc785\ub825 \ubb38\uc790\uc5f4\uc744 \uc804\ucc98\ub9ac\ud569\ub2c8\ub2e4.\nhash_buckets = 1000\nwords = tf.strings.split(sentences, ' ')\nhashed_words = tf.strings.to_hash_bucket_fast(words, hash_buckets)\n\n# Keras \ubaa8\ub378\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\nkeras_model = tf.keras.Sequential([\n    tf.keras.layers.Input(shape=[None], dtype=tf.int64, ragged=True),\n    tf.keras.layers.Embedding(hash_buckets, 16),\n    tf.keras.layers.LSTM(32, use_bias=False),\n    tf.keras.layers.Dense(32),\n    tf.keras.layers.Activation(tf.nn.relu),\n    tf.keras.layers.Dense(1)\n])\n\nkeras_model.compile(loss='binary_crossentropy', optimizer='rmsprop')\nkeras_model.fit(hashed_words, is_question, epochs=5)\nprint(keras_model.predict(hashed_words))","a9fed129":"import google.protobuf.text_format as pbtext\n\ndef build_tf_example(s):\n    return pbtext.Merge(s, tf.train.Example()).SerializeToString()\n\nexample_batch = [\n    build_tf_example(r'''\n        features {\n            feature {key: \"colors\" value {bytes_list {value: [\"red\", \"blue\"]} } }\n            feature {key: \"lengths\" value {int64_list {value: [7]} } } }'''),\n    build_tf_example(r'''\n        features {\n            feature {key: \"colors\" value {bytes_list {value: [\"orange\"]} } }\n            feature {key: \"lengths\" value {int64_list {value: []} } } }'''),\n    build_tf_example(r'''\n        features {\n            feature {key: \"colors\" value {bytes_list {value: [\"black\", \"yellow\"]} } }\n            feature {key: \"lengths\" value {int64_list {value: [1, 3]} } } }'''),\n    build_tf_example(r'''\n        features {\n            feature {key: \"colors\" value {bytes_list {value: [\"green\"]} } }\n            feature {key: \"lengths\" value {int64_list {value: [3, 5, 2]} } } }''')]","ee95642c":"feature_specification = {\n    'colors': tf.io.RaggedFeature(tf.string),\n    'lengths': tf.io.RaggedFeature(tf.int64),\n}\nfeature_tensors = tf.io.parse_example(example_batch, feature_specification)\nfor name, value in feature_tensors.items():\n    print(\"{}={}\".format(name, value))","9275eb4f":"# \uc544\ub798\uc758 \uc608\uc81c\uc5d0\uc11c \ub3c4\uc6b0\ubbf8 \ud568\uc218\ub294 \ub370\uc774\ud130 \uc138\ud2b8\ub97c \ucd9c\ub825\ud558\ub294\ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.\ndef print_dictionary_dataset(dataset):\n    for i, element in enumerate(dataset):\n        print(\"Element {}:\".format(i))\n        for (feature_name, feature_value) in element.items():\n            print('{:>14} = {}'.format(feature_name, feature_value))","46b9ec55":"dataset = tf.data.Dataset.from_tensor_slices(feature_tensors)\nprint_dictionary_dataset(dataset)","2958b7a0":"batched_dataset = dataset.batch(2)\nprint_dictionary_dataset(batched_dataset)","43004546":"unbatched_dataset = batched_dataset.unbatch()\nprint_dictionary_dataset(unbatched_dataset)","6eb828d4":"non_ragged_dataset = tf.data.Dataset.from_tensor_slices([1, 5, 3, 2, 8])\nnon_ragged_dataset = non_ragged_dataset.map(tf.range)\nbatched_non_ragged_dataset = non_ragged_dataset.apply(\n    tf.data.experimental.dense_to_ragged_batch(2))\nfor element in batched_non_ragged_dataset:\n    print(element)","b26e1ecc":"def transform_lengths(features):\n    return {\n        'mean_length': tf.math.reduce_mean(features['lengths']),\n        'length_ranges': tf.ragged.range(features['lengths'])}\ntransformed_dataset = dataset.map(transform_lengths)\nprint_dictionary_dataset(transformed_dataset)","10c6e294":"@tf.function\ndef make_palindrome(x, axis):\n    return tf.concat([x, tf.reverse(x, [axis])], axis)","fd64adf7":"make_palindrome(tf.constant([[1, 2], [3, 4], [5, 6]]), axis=1)","e66082ef":"make_palindrome(tf.ragged.constant([[1, 2], [3], [4, 5, 6]]), axis=1)","5606325b":"@tf.function(\n    input_signature=[tf.RaggedTensorSpec(shape=[None, None], dtype=tf.int32)])\ndef max_and_min(rt):\n    return (tf.math.reduce_max(rt, axis=-1), tf.math.reduce_min(rt, axis=-1))\n\nmax_and_min(tf.ragged.constant([[1, 2], [3], [4, 5, 6]]))","d85a954b":"@tf.function\ndef increment(x):\n    return x + 1\n\nrt = tf.ragged.constant([[1, 2], [3], [4, 5, 6]])\ncf = increment.get_concrete_function(rt)\nprint(cf(rt))","dece549e":"import tempfile\n\nkeras_module_path = tempfile.mkdtemp()\ntf.saved_model.save(keras_model, keras_module_path)\nimported_model = tf.saved_model.load(keras_module_path)\nimported_model(hashed_words)","3266ce81":"class CustomModule(tf.Module):\n    def __init__(self, variable_value):\n        super(CustomModule, self).__init__()\n        self.v = tf.Variable(variable_value)\n    \n    @tf.function\n    def grow(self, x):\n        return x * self.v\n\nmodule = CustomModule(100.0)\n\n# \uac1c\uc778\ud654\ub41c \ubaa8\ub378\uc744 \uc800\uc7a5\ud558\uae30 \uc804\uc5d0,\n# \ud544\uc694\ud55c \uac01 input signature\uc5d0 \ub300\ud574 \uace0\uccb4 \ud568\uc218\ub4e4\uc774 \ub9cc\ub4e4\uc5b4\uc84c\ub294\uc9c0 \ubcf4\uc7a5\ud574\uc57c \ud569\ub2c8\ub2e4.\nmodule.grow.get_concrete_function(tf.RaggedTensorSpec(shape=[None, None],\n                                                     dtype=tf.float32))\n\ncustom_module_path = tempfile.mkdtemp()\ntf.saved_model.save(module, custom_module_path)\nimported_model = tf.saved_model.load(custom_module_path)\nimported_model.grow(tf.ragged.constant([[1.0, 4.0, 3.0], [2.0]]))","18e99bc2":"x = tf.ragged.constant([[1, 2], [3], [4, 5, 6]])\ny = tf.ragged.constant([[1, 1], [2], [3, 3, 3]])\nprint(x + y)","bffb44fd":"x = tf.ragged.constant([[1, 2], [3], [4, 5, 6]])\nprint(x + 3)","dff42002":"queries = tf.ragged.constant(\n    [['Who', 'is', 'George', 'Washington'],\n     ['What', 'is', 'the', 'weather', 'tomorrow'],\n     ['Goodnight']])","dbcbddd5":"print(queries[1]) # \ub2e8\uc77c \uc9c8\uc758","73065d65":"print(queries[1, 2]) # \ub2e8\uc77c \ub2e8\uc5b4","b901b2a5":"print(queries[1:]) # \uccab \ud589\uc744 \uc81c\uc678\ud55c \ubaa8\ub450","9138b6ac":"print(queries[:, :3]) # \uac01 \uc9c8\uc758\uc758 \uccab 3 \ub2e8\uc5b4","651c4586":"print(queries[:, -2:]) # \uac01 \uc9c8\uc758\uc758 \ub9c8\uc9c0\ub9c9 2 \ub2e8\uc5b4","e838a6c5":"rt = tf.ragged.constant([[[1, 2, 3], [4]],\n                        [[5], [], [6]],\n                        [[7]],\n                        [[8, 9], [10]]])","032d6d81":"print(rt[1]) # \ub450\ubc88\uc9f8 \ud589 (2\ucc28\uc6d0 RaggedTensor)","421b4ce0":"print(rt[3, 0]) # \ub124\ubc88\uc9f8 \ud589\uc758 \uccab\ubc88\uc9f8 \uc6d0\uc18c (1\ucc28\uc6d0 Tensor)","22aaf16b":"print(rt[:, 1:3]) # \uac01 \ud589\uc758 1-3\ubc88\uc9f8 \uc6d0\uc18c (3\ucc28\uc6d0 RaggedTensor)","3942fb8f":"print(rt[:, -1:]) # \uac01 \ud589\uc758 \ub9c8\uc9c0\ub9c9 \uc6d0\uc18c (3\ucc28\uc6d0 RaggedTensor)","258a1d47":"ragged_sentences = tf.ragged.constant([\n    ['Hi'], ['Welcome', 'to', 'the', 'fair'], ['Have', 'fun']])","c5b45508":"# RaggedTensor -> Tensor\nprint(ragged_sentences.to_tensor(default_value='', shape=[None, 10]))","4efdeb13":"# Tensor -> RaggedTensor\nx = [[1, 3, -1, -1], [2, -1, -1, -1], [4, 5, 8, 9]]\nprint(tf.RaggedTensor.from_tensor(x, padding=-1))","4ca3caa7":"# RaggedTensor -> SparseTensor\nprint(ragged_sentences.to_sparse())","3a7a4a81":"# SparseTensor -> RaggedTensor\nst = tf.SparseTensor(indices=[[0, 0], [2, 0], [2, 1]],\n                    values=['a', 'b', 'c'],\n                    dense_shape=[3, 3])\nprint(tf.RaggedTensor.from_sparse(st))","0d438ccf":"rt = tf.ragged.constant([[1, 2], [3, 4, 5], [6], [], [7]])\nprint(\"python list:\", rt.to_list())\nprint(\"numpy array:\", rt.numpy())\nprint(\"values:\", rt.values.numpy())\nprint(\"splits:\", rt.row_splits.numpy())\nprint(\"indexed value:\", rt[1].numpy())","869b90fa":"# x      (2\ucc28\uc6d0 \ube44\uc815\ud615): 2 x (\ud589 \uac1c\uc218)\n# y      (\uc2a4\uce7c\ub77c)\n# result (2\ucc28\uc6d0 \ube44\uc815\ud615): 2 x (\ud589 \uac1c\uc218)\nx = tf.ragged.constant([[1, 2], [3]])\ny = 3\nprint(x + y)      ","80154262":"# x      (2\ucc28\uc6d0 \ube44\uc815\ud615): 3 x (\ud589 \uac1c\uc218)\n# y      (2\ucc28\uc6d0 \ud150\uc11c)  : 3 x        1\n# Result (2\ucc28\uc6d0 \ube44\uc815\ud615): 3 x (\ud589 \uac1c\uc218)\nx = tf.ragged.constant(\n    [[10, 87, 12],\n     [19, 53],\n     [12, 32]])\ny = [[1000], [2000], [3000]]\nprint(x + y)","67f54f78":"# x      (3\ucc28\uc6d0 \ube44\uc815\ud615): 2 x (r1) x 2\n# y      (2\ucc28\uc6d0 \ube44\uc815\ud615):        1 x 1\n# Result (3\ucc28\uc6d0 \ube44\uc815\ud615): 2 x (r1) x 2\nx = tf.ragged.constant(\n    [[[1, 2], [3, 4], [5, 6]],\n     [[7, 8]]],\n    ragged_rank=1)\ny = tf.constant([[10]])\nprint(x + y)","e7d08c6e":"# x      (3\ucc28\uc6d0 \ube44\uc815\ud615): 2 x (r1) x (r2) x 1\n# y      (1\ucc28\uc6d0 \ud150\uc11c)  :                   3\n# Result (3\ucc28\uc6d0 \ube44\uc815\ud615): 2 x (r1) x (r2) x 3\nx = tf.ragged.constant(\n    [\n        [\n            [[1], [2]],\n            [],\n            [[3]],\n            [[4]],\n        ],\n        [\n            [[5], [6]],\n            [[7]]\n        ]\n    ],\n    ragged_rank=2)\ny = tf.constant([10, 20, 30])\nprint(x + y)","9aaa3e5c":"# x      (2\ucc28\uc6d0 \ube44\uc815\ud615): 3 x (r1)\n# y      (2\ucc28\uc6d0 \ud150\uc11c)  : 3 x    4 # \ub9c8\uc9c0\ub9c9 \ucc28\uc6d0\uc774 \ub9de\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\nx = tf.ragged.constant([[1, 2], [3, 4, 5, 6], [7]])\ny = tf.constant([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\ntry:\n    x + y\nexcept tf.errors.InvalidArgumentError as exception:\n    print(exception)","670ced99":"# x      (2\ucc28\uc6d0 \ube44\uc815\ud615): 3 x (r1)\n# y      (2\ucc28\uc6d0 \ube44\uc815\ud615): 3 x (r2) # \ube44\uc815\ud615 \ucc28\uc6d0\uc774 \ub9de\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\nx = tf.ragged.constant([[1, 2, 3], [4], [5, 6]])\ny = tf.ragged.constant([[10, 20], [30, 40], [50]])\ntry:\n    x + y\nexcept tf.errors.InvalidArgumentError as exception:\n    print(exception)","5b3952c7":"# x      (3\ucc28\uc6d0 \ube44\uc815\ud615): 3 x (r1) x 2\n# y      (3\ucc28\uc6d0 \ube44\uc815\ud615): 3 x (r1) x 3 # \ub9c8\uc9c0\ub9c9 \ucc28\uc6d0\uc774 \ub9de\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\nx = tf.ragged.constant([[[1, 2], [3, 4], [5, 6]],\n                        [[7, 8], [9, 10]]])\ny = tf.ragged.constant([[[1, 2, 0], [3, 4, 0], [5, 6, 0]],\n                        [[7, 8, 0], [9, 10, 0]]])\ntry:\n    x + y\nexcept tf.errors.InvalidArgumentError as exception:\n    print(exception)","644247ff":"rt = tf.RaggedTensor.from_row_splits(\n    values=[3, 1, 4, 1, 5, 9, 2],\n    row_splits=[0, 4, 4, 6, 7])\nprint(rt)","6f61e870":"rt = tf.RaggedTensor.from_row_splits(\n    values=tf.RaggedTensor.from_row_splits(\n        values=[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n        row_splits=[0, 3, 3, 5, 9, 10]),\n    row_splits=[0, 1, 1, 5])\nprint(rt)\nprint(\"Shape: {}\".format(rt.shape))\nprint(\"Number of partitioned dimensions: {}\".format(rt.ragged_rank))","cbf7e989":"rt = tf.RaggedTensor.from_nested_row_splits(\n    flat_values=[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n    nested_row_splits=([0, 1, 1, 5], [0, 3, 3, 5, 9, 10]))\nprint(rt)","4ed606ec":"# \ubaa8\uc591 = [\ubb36\uc74c, (\ubb38\ub2e8), (\ubb38\uc7a5), (\ub2e8\uc5b4)]\nconversations = tf.ragged.constant(\n    [[[[\"I\", \"like\", \"ragged\", \"tensors.\"]],\n      [[\"Oh\", \"yeah?\"], [\"What\", \"can\", \"you\", \"use\", \"them\", \"for?\"]],\n      [[\"Processing\", \"variable\", \"length\", \"data!\"]]],\n     [[[\"I\", \"like\", \"cheese.\"], [\"Do\", \"you?\"]],\n      [[\"Yes.\"], [\"I\", \"do.\"]]]])\nconversations.shape","036b8bf5":"assert conversations.ragged_rank == len(conversations.nested_row_splits)\nconversations.ragged_rank # \ubd84\ud560\ub41c \ucc28\uc6d0\uc758 \uac1c\uc218","751b4f6b":"conversations.flat_values.numpy()","64f30a77":"rt = tf.RaggedTensor.from_row_splits(\n    values=[[1, 3], [0, 0], [1, 3], [5, 3], [3, 3], [1, 2]],\n    row_splits=[0, 3, 4, 6])\nprint(rt)\nprint(\"Shape: {}\".format(rt.shape))\nprint(\"Number of partitioned dimensions: {}\".format(rt.ragged_rank))\nprint(\"Flat values shape: {}\".format(rt.flat_values.shape))\nprint(\"Flat values:\\n{}\".format(rt.flat_values))","9a1747bb":"rt = tf.RaggedTensor.from_uniform_row_length(\n    values=tf.RaggedTensor.from_row_splits(\n        values=[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n        row_splits=[0, 3, 5, 9, 10]),\n    uniform_row_length=2)\nprint(rt)\nprint(\"Shape: {}\".format(rt.shape))\nprint(\"Number of partitioned dimensions: {}\".format(rt.ragged_rank))","e4e26553":"\ube44\uc815\ud615 \ud150\uc11c\uc5d0 \ud2b9\uc815\ud558\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uba54\uc18c\ub4dc\uc640 \uc5f0\uc0b0\ub4e4\ub3c4 \ub9ce\uc2b5\ub2c8\ub2e4. \uc0dd\uc131 \uba54\uc18c\ub4dc, \ubcc0\ud658 \uba54\uc18c\ub4dc, \uac12 \ub9e4\ud551 \uc5f0\uc0b0 \ub4f1\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4. \uc9c0\uc6d0\ub418\ub294 \uc5f0\uc0b0\ub4e4\uc758 \ubaa9\ub85d\uc744 \uc704\ud574\uc11c\ub294, [tf.ragged](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/ragged) **\ud328\ud0a4\uc9c0 \ubb38\uc11c**\ub97c \ubcf4\uc138\uc694.","9ee74063":"\ud589 \ubd84\ud560\uc5d0 \uc5b4\ub5a4 \uc778\ucf54\ub529\uc744 \uc0ac\uc6a9\ud560\uc9c0\uc5d0 \ub300\ud55c \uc120\ud0dd\uc740 \uba87\uac00\uc9c0 \uc0c1\ud669 \uc548\uc5d0\uc11c \ud6a8\uc728\uc131\uc744 \uac1c\uc120\ud558\uae30 \uc704\ud574 \ube44\uc815\ud615 \ud150\uc11c\uc5d0 \uc758\ud574 \ub0b4\ubd80\uc801\uc73c\ub85c \uad00\ub9ac\ub429\ub2c8\ub2e4. \ud2b9\ud788, \ub2e4\ub978 \ud589 \ubd84\ud560 \uc804\ub7b5\uc758 \uba87\uac00\uc9c0 \uc7a5\uc810\uacfc \ub2e8\uc810\uc740:\n* **\ud6a8\uc728\uc801 \uc0c9\uc778**: `row_splits` \uc778\ucf54\ub529\uc740 \ube44\uc815\ud615 \ud150\uc11c\ub85c\uc758 \uc0c1\uc218 \uc2dc\uac04 \uc0c9\uc778\uacfc \uc798\ub77c\ub0b4\uae30\ub97c \uac00\ub2a5\ud558\uac8c \ud574\uc90d\ub2c8\ub2e4.\n* **\ud6a8\uc728\uc801 \uc5f0\uacb0**: `row_lengths` \uc778\ucf54\ub529\uc740 \ub450 \ud150\uc11c\ub4e4\uc774 \uc5f0\uacb0\ub420 \ub54c\uc5d0\ub294 \ud589 \uae38\uc774\uac00 \ubcc0\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \ube44\uc815\ud615 \ud150\uc11c\ub97c \uc5f0\uacb0\ud560 \ub54c\uc5d0 \ub354 \ud6a8\uc728\uc801\uc785\ub2c8\ub2e4.\n* **\uc791\uc740 \uc778\ucf54\ub529 \ud06c\uae30**: `value_rowids` \uc778\ucf54\ub529\uc740 \ud150\uc11c\uc758 \ud06c\uae30\uac00 \uac12\uc758 \uc804\uccb4 \uac1c\uc218\uc5d0\ub9cc \uc758\uc874\ub418\uae30 \ub54c\ubb38\uc5d0 \ub9ce\uc740 \uac1c\uc218\uc758 \ube48 \ud589\ub4e4\uc744 \uac00\uc9c0\ub294 \ube44\uc815\ud615 \ud150\uc11c\ub4e4\uc744 \uc800\uc7a5\ud560 \ub54c \ud6a8\uc728\uc801\uc785\ub2c8\ub2e4. \ud55c\ud3b8, `row_splits`\uc640 `row_lengths` \uc778\ucf54\ub529\uc740 \uac01 \ud589\uc5d0 \ub300\ud574 \uc624\uc9c1 \ud558\ub098\uc758 \uc2a4\uce7c\ub77c \uac12\ub9cc\uc744 \uc694\uad6c\ud558\ubbc0\ub85c \uae34 \ud589\uc744 \uac00\uc9c0\ub294 \ube44\uc815\ud615 \ud150\uc11c\ub97c \uc800\uc7a5\ud560 \ub54c\uc5d0 \ub354 \ud6a8\uc728\uc801\uc785\ub2c8\ub2e4.\n* **\ud638\ud658\uc131**: `value_rowids` \uc804\ub7b5\uc740 `tf.segment_sum`\uacfc \uac19\uc740 \uc5f0\uc0b0\ub4e4\uc5d0 \uc758\ud574 \uc0ac\uc6a9\ub418\ub294 [\ubd84\ud560](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/math#about_segmentation) \ud615\uc2dd\uacfc \ub9de\uc2b5\ub2c8\ub2e4. `row_limits` \uc804\ub7b5\uc740 [tf.sequence_mask](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/sequence_mask)\uc640 \uac19\uc740 \uc5f0\uc0b0\ub4e4\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud615\uc2dd\uacfc \ub9de\uc2b5\ub2c8\ub2e4.\n* **\uade0\uc77c \ucc28\uc6d0**: \uc544\ub798\uc5d0\uc11c \uc5b8\uae09\ub418\ub4ef\uc774, `uniform_row_length` \uc778\ucf54\ub529\uc740 \uade0\uc77c \ucc28\uc6d0\uc744 \uac00\uc9c0\ub294 \ube44\uc815\ud615 \ud150\uc11c\ub97c \ub529\ucf54\ub529\ud558\ub294\ub370\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.","89b267c7":"\ube44\uc815\ud615 \ud150\uc11c\ub294 \ubc31\uac1c\uac00 \ub118\ub294 TensorFlow \uc5f0\uc0b0\uc774 \uc9c0\uc6d0\ub429\ub2c8\ub2e4. \uc218\ud559 \uc5f0\uc0b0(\uc608\ub85c, [tf.add](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/math\/add)\uc640 [tf.reduce_mean](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/math\/reduce_mean)), \ubc30\uc5f4 \uc5f0\uc0b0(\uc608\ub85c, [tf.concat](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/concat)\uacfc [tf.tile](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/tile)), \ubb38\uc790\uc5f4 \uc870\uc791 \uc5f0\uc0b0(\uc608\ub85c, `tf.substr`), \uc81c\uc5b4 \ud750\ub984 \uc5f0\uc0b0(\uc608\ub85c, [tf.while_loop](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/while_loop)\uc640 [tf.map_fn](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/map_fn)), \uadf8\ub9ac\uace0 \ub2e4\ub978 \ub9ce\uc740 \uac83\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4:","2c99176a":"#### \uc608\uc81c: Keras \ubaa8\ub378 \uc800\uc7a5","5ec4102b":"## \ube44\uc815\ud615\uacfc \uade0\uc77c \ucc28\uc6d0","302d72c8":"`RaggedTensor` \ud074\ub798\uc2a4\ub294 \uae30\ubcf8\uc801\uc778 \uc6d0\uc18c \ubcc4 \uc218\ud559\uc744 \uc27d\uac8c \ub9cc\ub4e4\uae30 \uc704\ud574 \ud45c\uc900 Python \uc0b0\uc220\uacfc \ube44\uad50 \uc5f0\uc0b0\uc790\ub4e4\uc744 \uc624\ubc84\ub85c\ub529\ud569\ub2c8\ub2e4:","abda7953":"\uac01 \uac12\uc774 \uc5b4\ub290 \ud589\uc5d0 \uc18d\ud558\ub294\uc9c0 \uc548\ub2e4\uba74, `value_rowids` \ud589 \uad6c\ubd84 \ud150\uc11c\ub97c \uc0ac\uc6a9\ud574\uc11c `RaggedTensor`\ub97c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4:\n![](https:\/\/www.tensorflow.org\/images\/ragged_tensors\/value_rowids.png)","9e88a162":"### tf.function","41fde301":"### \uc5ec\ub7ec \uac1c\uc758 \ube44\uc815\ud615 \ucc28\uc6d0","79bed84b":"![](https:\/\/www.tensorflow.org\/images\/ragged_tensors\/ragged_example.png)","bc97e3ca":"\uc2e4\ub840\ub97c \ubcf4\uc5ec\uc8fc\ub294 \uc608\uc81c\ub85c\uc11c, `concat`, `stack`, \uadf8\ub9ac\uace0 `tile` \uac19\uc740 \ubc30\uc5f4 \uc5f0\uc0b0\uc774 \ube44\uc815\ud615 \ub300 \ud76c\uc18c \ud150\uc11c\uc5d0 \ub300\ud574 \uc5b4\ub5bb\uac8c \uc815\uc758\ub418\ub294\uc9c0 \uace0\ub824\ud558\uc138\uc694. \ube44\uc815\ud615 \ud150\uc11c\ub97c \uc5f0\uacb0\uc2dc\ud0a4\ub294 \uac83\uc740 \uacb0\ud569\ub41c \uae38\uc774\ub97c \uac00\uc9c0\ub294 \ub2e8\uc77c \ud589\uc744 \ub9cc\ub4e4\uae30 \uc704\ud574 \uac01 \ud589\uc744 \ubd99\uc785\ub2c8\ub2e4:\n![](https:\/\/www.tensorflow.org\/images\/ragged_tensors\/ragged_concat.png)","f51bac8a":"\ud37c\ub728\ub9ac\uae30\ub294 \ub2e4\ub978 \ubaa8\uc591\uc758 \ud150\uc11c\ub4e4\uc744 \uc6d0\uc18c \ubcc4 \uc5f0\uc0b0\uc744 \uc704\ud574 \ud638\ud658\uc774 \ub418\ub294 \ubaa8\uc591\uc744 \uac00\uc9c0\ub3c4\ub85d \ub9cc\ub4dc\ub294 \uacfc\uc815\uc785\ub2c8\ub2e4. \ud37c\ub728\ub9ac\uae30\uc5d0 \ub300\ud55c \ub354 \ub9ce\uc740 \ubc30\uacbd\uc9c0\uc2dd\uc744 \uc704\ud574\uc11c\ub294, \uc544\ub798\ub97c \ubcf4\uc138\uc694:\n* [Numpy: \ud37c\ub728\ub9ac\uae30](https:\/\/docs.scipy.org\/doc\/numpy\/user\/basics.broadcasting.html)\n* [tf.broadcast_dynamic_shape](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/broadcast_dynamic_shape)\n* [tf.broadcast_to](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/broadcast_to)","328f8efc":"\uc5ec\ub7ec \uac1c\uc758 \ube44\uc815\ud615 \ucc28\uc6d0\ub4e4\uc744 \uac00\uc9c0\ub294 \ube44\uc815\ud615 \ud150\uc11c\ub294 `values` \ud150\uc11c\uc5d0 \ub300\ud574 \uc911\ucca9\ub41c `RaggedTensor`\ub97c \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \uc778\ucf54\ub529\ub429\ub2c8\ub2e4. \uac01\uac01\uc758 \uc911\ucca9\ub41c `RaggedTensor`\ub294 \ud558\ub098\uc758 \ube44\uc815\ud615 \ucc28\uc6d0\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4.\n![](https:\/\/www.tensorflow.org\/images\/ragged_tensors\/ragged_rank_2.png)","bc7ab79b":"\ube44\uc815\ud615 \ud150\uc11c\ub294 \ud3c9\ud3c9\ud55c _\uac12_ \ub4e4\uc758 \ud150\uc11c\uc640 \uadf8 \uac12\uc774 \ud589\uc73c\ub85c \uc5b4\ub5bb\uac8c \ud589\uc73c\ub85c \ub098\ub204\uc5b4\uc9c0\ub294\uc9c0 \ub098\ud0c0\ub0b4\uc8fc\ub294 _\ud589 \uad6c\ubd84_ \ud150\uc11c\ub97c \uc9dd\uc9c0\uc5b4\uc11c \uc0dd\uc131\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. [tf.RaggedTensor.from_value_rowids](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/RaggedTensor#from_value_rowids), [tf.RaggedTensor.from_row_lengths](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/RaggedTensor#from_row_lengths), \uadf8\ub9ac\uace0 [tf.RaggedTensor.from_row_splits](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/RaggedTensor#from_row_splits)\uc640 \uac19\uc740 \uc0dd\uc131 \ud074\ub798\uc2a4\uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","319d8467":"\ub450 \uc785\ub825 `x`\uc640 `y`\uac00 \ud638\ud658\uc774 \ub418\ub294 \ubaa8\uc591\uc744 \uac00\uc9c0\ub3c4\ub85d \ud37c\ub728\ub9ac\ub294 \uae30\ubcf8\uc801\uc778 \ub2e8\uacc4\ub294:\n1. `x`\uc640 `y`\uac00 \uac19\uc740 \uac1c\uc218\uc758 \ucc28\uc6d0\uc744 \uac00\uc9c0\uace0 \uc788\uc9c0 \uc54a\ub2e4\uba74, \uac00\uc9c0\uac8c \ub420 \ub54c\uae4c\uc9c0 \uc678\ubd80 \ucc28\uc6d0(\ud06c\uae30 1)\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4.\n2. `x`\uc640 `y`\uac00 \ub2e4\ub978 \ud06c\uae30\ub97c \uac00\uc9c0\ub294 \ucc28\uc6d0 \ub9c8\ub2e4:\n * `x`\ub098 `y`\uac00 \ucc28\uc6d0 `d`\uc5d0\uc11c \ud06c\uae30 `1`\uc744 \uac00\uc9c4\ub2e4\uba74, \uadf8 \uac12\uc744 \ucc28\uc6d0 `d`\ub97c \ub530\ub77c \ub2e4\ub978 \uc785\ub825\uc758 \ud06c\uae30\uc5d0 \ub9de\ucdb0\uc9c0\uac8c \ubc18\ubcf5\ud569\ub2c8\ub2e4.\n * \uc544\ub2c8\ub77c\uba74, \uc608\uc678(`x`\uc640 `y`\ub294 \ud37c\ub728\ub9ac\uae30\uc5d0 \ud638\ud658\uc774 \ub418\uc9c0 \uc54a\ub294\ub2e4)\ub97c \uc81c\uae30\ud569\ub2c8\ub2e4.","6e1a82c1":"`row_partition`\uc740 \ub124\uac00\uc9c0 \ub2e4\ub978 \uc778\ucf54\ub529\uc744 \uc0ac\uc6a9\ud574 \uc800\uc7a5\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4:\n* `row_splits`\ub294 \ud589 \uac04\uc758 \ubd84\uae30\uc810\uc744 \ud2b9\uc815\ud558\ub294 \uc815\uc218 \ubca1\ud130\uc785\ub2c8\ub2e4.\n* `value_rowids`\ub294 \uac01 \uac12\uc5d0 \ub300\ud55c \ud589 \ubc88\ud638\ub97c \ud2b9\uc815\ud558\ub294 \uc815\uc218 \ubca1\ud130\uc785\ub2c8\ub2e4.\n* `row_lengths`\ub294 \uac01 \ud589\uc758 \uae38\uc774\ub97c \ud2b9\uc815\ud558\ub294 \uc815\uc218 \ubca1\ud130\uc785\ub2c8\ub2e4.\n* `uniform_row_length`\ub294 \ubaa8\ub4e0 \ud589\uc5d0 \ub300\ud55c \ud558\ub098\uc758 \uae38\uc774\ub97c \ud2b9\uc815\ud558\ub294 \uc815\uc218 \uc2a4\uce7c\ub77c\uc785\ub2c8\ub2e4.\n\n![](https:\/\/www.tensorflow.org\/images\/ragged_tensors\/partition_encodings.png)","4fc908c4":"\uc5ed\uc73c\ub85c, \ubb36\uc5b4\uc9c4 \ub370\uc774\ud130 \uc138\ud2b8\ub294 [Dataset.unbatch](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/data\/Dataset#unbatch)\ub97c \uc0ac\uc6a9\ud574\uc11c \ud3bc\uccd0\uc9c4 \ub370\uc774\ud130 \uc138\ud2b8\ub85c \ubcc0\ud658\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","ae2f665c":"## \ube44\uc815\ud615 \ub300 \ud76c\uc18c","ee902031":"![](https:\/\/www.tensorflow.org\/images\/ragged_tensors\/sent_word_embed.png)","657d96d7":"\uc815\uc218 \uc2a4\uce7c\ub77c `nrows` \ub610\ud55c `value_rowids`\uc5d0\uc11c \ub9c8\uc9c0\ub9c9 \ube48 \ud589\ub4e4\uc774\ub098 `uniform_row_length`\uc5d0\uc11c \ube48 \ud589\ub4e4\uc744 \uc124\uba85\ud558\uae30 \uc704\ud574 `row_partition` \uc778\ucf54\ub529 \uc548\uc5d0 \ud3ec\ud568\ub420 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.","a51b6093":"### \ube44\uc815\ud615 \ud150\uc11c \uc0dd\uc131","1b5a32c2":"\ube44\uc815\ud615 \ud150\uc11c\ub4e4\uc740 `RaggedTensor` \ud074\ub798\uc2a4\ub97c \uc774\uc6a9\ud574 \uc778\ucf54\ub529\ub429\ub2c8\ub2e4. \ub0b4\ubd80\uc801\uc73c\ub85c, \uac01 `RaggedTensor`\ub294 \ub2e4\uc74c\uc73c\ub85c \uad6c\uc131\ub429\ub2c8\ub2e4:\n* `values` \ud150\uc11c, \uac00\ubcc0 \uae38\uc774\uc758 \ud589\ub4e4\uc744 \ud3bc\uccd0\uc9c4 \ubc30\uc5f4\ub85c \ubd99\uc785\ub2c8\ub2e4.\n* `row_partition`, \ud3bc\uccd0\uc9c4 \uac12\ub4e4\uc774 \uc5b4\ub5bb\uac8c \ud589\ub4e4\ub85c \ub098\ub258\uc5b4\uc9c0\ub294\uc9c0 \ub098\ud0c0\ub0c5\ub2c8\ub2e4.\n\n![](https:\/\/www.tensorflow.org\/images\/ragged_tensors\/ragged_encoding_2.png)","ecaf72a9":"## \uc0c9\uc778","c0f1c808":"\uc774 \uad6c\ubd84\uc774 \uc65c \uc911\uc694\ud55c\uc9c0\uc5d0 \ub300\ud55c \ub2e4\ub978 \uc608\uc81c\ub97c \uc704\ud574\uc11c\ub294, [tf.reduce_mean](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/math\/reduce_mean)\uacfc \uac19\uc740 \uc5f0\uc0b0\uc5d0\uc11c \"\uac01 \ud589\uc758 \ud3c9\uade0\uac12\"\uc758 \uc815\uc758\ub97c \uace0\ub824\ud574\ubcf4\uc138\uc694. \ube44\uc815\ud615 \ud150\uc11c\uc5d0\uc11c\ub294, \ud589\uc758 \ud3c9\uade0\uac12\uc740 \ud589\uc758 \ub108\ube44\ub85c \ub098\ub204\uc5b4\uc9c4 \ud589\uc758 \uac12\ub4e4\uc758 \ud569\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ud76c\uc18c \ud150\uc11c\uc5d0\uc11c\ub294, \ud589\uc758 \ud3c9\uade0\uac12\uc740 \ud76c\uc18c \ud150\uc11c\uc758 \uc804\uccb4 \ub108\ube44(\uac00\uc7a5 \uae34 \ud589\uc758 \ub108\ube44 \uc774\uc0c1)\ub85c \ub098\ub204\uc5b4\uc9c4 \ud589\uc758 \uac12\ub4e4\uc758 \ud569\uc785\ub2c8\ub2e4.","33fbc938":"\ube44\uc815\ud615 \ud150\uc11c\uc758 \uac00\uc7a5 \uc678\ubd80\uc5d0 \uc788\ub294 \ucc28\uc6d0\uc740 \ub2e8\uc77c \uc870\uac01\uc73c\ub85c\ub9cc \uc774\ub8e8\uc5b4\uc838 \uc788\uae30 \ub54c\ubb38\uc5d0 (\uadf8\ub9ac\uace0 \uadf8\ub807\uae30\uc5d0 \uc870\uac01\uc758 \uae38\uc774\uac00 \ub2ec\ub77c\uc9c8 \uc218 \uc788\ub294 \ubc29\ubc95\uc774 \uc5c6\uae30 \ub54c\ubb38\uc5d0) \ud56d\uc0c1 \uade0\uc77c\ud569\ub2c8\ub2e4. \ub098\uba38\uc9c0 \ucc28\uc6d0\uc740 \ube44\uc815\ud615\uc774\ub098 \uade0\uc77c \ubaa8\ub450 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, `[num_sentences, (num_words), embedding_size]`\uc758 \ubaa8\uc591\uc758 \ube44\uc815\ud615 \ud150\uc11c\ub97c \uc0ac\uc6a9\ud574\uc11c \ubb38\uc7a5\uc758 \ubb36\uc74c \uc548\uc5d0 \uac01 \ub2e8\uc5b4\ub97c \uc704\ud55c \ub2e8\uc5b4 \uc784\ubca0\ub529\uc744 \uc800\uc7a5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. `(num_words)`\ub97c \ub458\ub7ec\uc2f8\ub294 \uad04\ud638\ub294 \uadf8 \ucc28\uc6d0\uc774 \ube44\uc815\ud615\uc774\ub77c\ub294 \uac83\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4.","efaa8e01":"## \ud37c\ub728\ub9ac\uae30","a7b34f8c":"## TensorFlow API\ub4e4","06022dc7":"\uc77c\ubc18 \ud150\uc11c\uc640 \uac19\uc774, \ube44\uc815\ud615 \ud150\uc11c\uc758 \ud2b9\uc815\ud55c \uc870\uac01\uc744 \uc811\uadfc\ud558\uae30 \uc704\ud574 Python\uc2a4\ub7ec\uc6b4 \uc0c9\uc778\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c \uc704\ud574\uc11c\ub294, \uc544\ub798\uc758 **\uc0c9\uc778** \uc808\uc744 \ubcf4\uc138\uc694.","c7b01ed4":"`RaggedTensor`\ub294 \ud558\ub098\uc758 \uc81c\ud55c \uc0ac\ud56d\uc744 \uac00\uc9c0\uace0 \ub2e4\ucc28\uc6d0 \uc0c9\uc778\uacfc \uc798\ub77c\ub0b4\uae30\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4: \ube44\uc815\ud615 \ucc28\uc6d0\uc5d0\uc11c\uc758 \uc0c9\uc778\uc740 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774 \uacbd\uc6b0\ub294 \ub098\ud0c0\ub0b4\uc9c4 \uac12\uc774 \uba87\uac1c\uc758 \ud589\uc5d0\uc11c\ub294 \uc874\uc7ac\ud558\uc9c0\ub9cc \uc544\ub2cc \ud589\ub3c4 \uc788\uc744 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \ubb38\uc81c\uac00 \ub429\ub2c8\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\uc5d0\ub294, (1) `IndexError`\ub97c \uc62c\ub824\uc57c \ud560\uc9c0; (2) \uae30\ubcf8\uac12\uc744 \uc0ac\uc6a9\ud574\uc57c \ud560\uc9c0; \ub610\ub294 (3) \uac12\uc744 \uac70\ub974\uace0 \uc2dc\uc791\ubcf4\ub2e4 \uc801\uc740 \ud589\uc744 \uac00\uc9c0\ub294 \ud150\uc11c\ub97c \ubc18\ud658\ud574\uc57c \ud560\uc9c0 \uba85\ud655\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. [Python\uc758 \uc6d0\uce59 \uac00\uc774\ub4dc](https:\/\/www.python.org\/dev\/peps\/pep-0020\/)(\"\ubaa8\ud638\ud55c \uacbd\uc6b0\ub97c \ub9cc\ub0ac\uc744 \ub54c\uc5d0\ub294, \ucd94\uce21\uc758 \uc720\ud639\uc744 \uac70\ubd80\ud558\ub77c\")\uc5d0 \ub530\ub77c, \ud604\uc7ac\ub294 \uc774 \uc5f0\uc0b0\uc744 \ubd88\ud5c8\ud588\uc2b5\ub2c8\ub2e4.","d2c8f769":"### SavedModel\ub4e4","1ef5d84e":"# \ube44\uc815\ud615 \ud150\uc11c","70381f61":"\ube44\uc815\ud615 \ud150\uc11c\ub294 \ud76c\uc18c \ud150\uc11c\uc758 \uc885\ub958\ub85c \uc0dd\uac01\ub418\uc5b4\uc11c\ub294 _\uc548\ub429\ub2c8\ub2e4_. \ud2b9\ud788, \ud76c\uc18c \ud150\uc11c\ub294 \uac19\uc740 \ub370\uc774\ud130\ub97c \uc791\uc740 \ud615\uc2dd\uc73c\ub85c \ubaa8\ud615\ud654\ud558\ub294 _tf.Tensor\ub97c \uc704\ud55c \ud6a8\uc728\uc801\uc778 \uc778\ucf54\ub529_ \uc774\uc9c0\ub9cc, \ube44\uc815\ud615 \ud150\uc11c\ub294 \ub370\uc774\ud130\uc758 \ud655\uc7a5\ub41c \ud615\uc2dd\uc744 \ubaa8\ud615\ud654\ud558\ub294 _tf.Tensor\uc758 \ud655\uc7a5_ \uc785\ub2c8\ub2e4. \uc774 \ucc28\uc774\uc810\uc740 \uc5f0\uc0b0\ub4e4\uc744 \uc815\uc758\ud560 \ub54c \uce58\uba85\uc801\uc785\ub2c8\ub2e4:\n* \ud76c\uc18c \ud150\uc11c\ub098 \uc870\ubc00\ud55c \ud150\uc11c\uc5d0 \uc5f0\uc0b0\uc744 \uc801\uc6a9\ud558\ub294 \uac83\uc740 \ud56d\uc0c1 \uac19\uc740 \uacb0\uacfc\ub97c \uc8fc\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n* \ube44\uc815\ud615 \ud150\uc11c\ub098 \ud76c\uc18c \ud150\uc11c\uc5d0 \uc5f0\uc0b0\uc744 \uc801\uc6a9\ud558\ub294 \uac83\uc740 \ub2e4\ub978 \uacb0\uacfc\ub97c \uc904 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.","9edd0eb1":"\uac01 \ud589\uc774 \uc5b4\ub290 \uacf3\uc5d0\uc11c \uc2dc\uc791\ud558\uace0 \ub05d\ub098\ub294\uc9c0 \uc548\ub2e4\uba74, `row_splits` \ud589 \uad6c\ubd84 \ud150\uc11c\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:\n![](https:\/\/www.tensorflow.org\/images\/ragged_tensors\/row_splits.png)","4be31bff":"\ube44\uc815\ud615 \ud150\uc11c\ub294 \ub2e4\ucc28\uc6d0 \uc0c9\uc778\uacfc \uc798\ub77c\ub0b4\uae30\ub97c \ud3ec\ud568\ud558\ub294 Python\uc2a4\ub7ec\uc6b4 \uc0c9\uc778\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uc544\ub798\uc758 \uc608\uc81c\ub294 2\ucc28\uc6d0\uacfc 3\ucc28\uc6d0 \ube44\uc815\ud615 \ud150\uc11c\ub85c \ube44\uc815\ud615 \ud150\uc11c \uc0c9\uc778\uc744 \uc124\uba85\ud569\ub2c8\ub2e4.","36bcd3e9":"RaggedTensor\uc758 \ubaa8\uc591\uc744 \ubb18\uc0ac\ud560 \ub54c, \ube44\uc815\ud615 \ucc28\uc6d0\uc740 \uad00\ub840\uc801\uc73c\ub85c \uad04\ud638\ub85c \ub458\ub7ec\uc308\uc73c\ub85c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc704\uc5d0\uc11c \ubd24\ub4ef\uc774, \ubb38\uc7a5\uc758 \ubb36\uc74c\uc5d0\uc11c \uac01 \ub2e8\uc5b4\ub97c \uc704\ud55c \ub2e8\uc5b4 \uc784\ubca0\ub529\uc744 \uc800\uc7a5\ud558\ub294 3\ucc28\uc6d0 RaggedTensor\uc758 \ubaa8\uc591\uc740 `[num_sentences, (num_words), embedding_size]`\ub85c \uc4f0\uc5ec\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","96dc3575":"\ud558\uc9c0\ub9cc \ud76c\uc18c \ud150\uc11c\ub97c \uc5f0\uacb0\ud558\ub294 \uac83\uc740 \uc544\ub798\uc758 \uc608\uc81c\uc5d0\uc11c \uadf8\ub9bc\uc73c\ub85c \ubcf4\uc5ec\uc9c0\ub4ef\uc774 (\u00d8\ub294 \uc5c6\ub294 \uac12\uc744 \ub098\ud0c0\ub0c4) \ub300\uc751\ud558\ub294 \uc870\ubc00\ud55c \ud150\uc11c\ub97c \uc5f0\uacb0\uc2dc\ud0a4\ub294 \uac83\uacfc \ub3d9\uc77c\ud569\ub2c8\ub2e4:\n![](https:\/\/www.tensorflow.org\/images\/ragged_tensors\/sparse_concat.png)","c0035204":"#### [tf.RaggedTensor.from_value_rowids](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/RaggedTensor#from_value_rowids)","95236c37":"## RaggedTensor \uc778\ucf54\ub529","1cc18d21":"[tf.data](https:\/\/www.tensorflow.org\/guide\/data)\ub294 \uac04\ub2e8\ud558\uace0 \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \uc870\uac01\ub4e4\ub85c \ubcf5\uc7a1\ud55c \uc785\ub825 \uacbd\ub85c\ub97c \ub9cc\ub4e4\uc218 \uc788\uac8c \ud574\uc8fc\ub294 API\uc785\ub2c8\ub2e4. \uc774\uac83\uc758 \ud575\uc2ec \uc790\ub8cc\uad6c\uc870\ub294 \uc6d0\uc18c\ub4e4\uc758 \ubc30\uc5f4\uc744 \ub098\ud0c0\ub0b4\ub294 [tf.data.Dataset](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/data\/Dataset)\uc785\ub2c8\ub2e4. \uac01 \uc6d0\uc18c\ub4e4\uc740 \ud558\ub098 \uc774\uc0c1\uc758 \uc694\uc18c\ub85c \uad6c\uc131\ub429\ub2c8\ub2e4.","e83743c8":"\ube44\uc815\ud615 \ud150\uc11c\uac00 \uc788\ub294 \ub370\uc774\ud130 \uc138\ud2b8\ub294 [Dataset.batch](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/data\/Dataset#batch) \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud574 \ubb36\uc5b4\uc9c8 (_n_ \uac1c\uc758 \uc5f0\uc18d\ub41c \uc6d0\uc18c\ub4e4\uc744 \ud558\ub098\uc758 \uc6d0\uc18c\ub85c \uacb0\ud569\ub420) \uc218 \uc788\uc2b5\ub2c8\ub2e4.","39b94bb7":"### Keras","e4b7646e":"#### \ube44\uc815\ud615 \ud150\uc11c\uac00 \ud3ec\ud568\ub41c \ub370\uc774\ud130 \uc138\ud2b8 \ubb36\uae30\uc640 \ud480\uae30","18c9d7c9":"### \ube44\uc815\ud615 \ud150\uc11c\ub85c \ud560 \uc218 \uc788\ub294 \uac83","b78fd34a":"[SavedModel](https:\/\/www.tensorflow.org\/guide\/saved_model)\uc740 \uac00\uc911\uce58\ub4e4\uacfc \uacc4\uc0b0\uc744 \ubaa8\ub450 \ud3ec\ud568\ud558\ub294 \uc9c1\ub82c\ud654\ub41c TensorFlow \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 Keras \ubaa8\ub378\uc5d0\uc11c\ub098 \uac1c\uc778\ud654\ub41c \ubaa8\ub378\uc5d0\uc11c \ub9cc\ub4e4\uc5b4\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5b4\ub290 \uacbd\uc6b0\uc5d0\uac74, \ube44\uc815\ud615 \ud150\uc11c\ub4e4\uc740 SavedModel\uc5d0\uc11c \uc815\uc758\ub41c \ud568\uc218\uc640 \uba54\uc18c\ub4dc\ub4e4\uc5d0\uc11c \ud22c\uba85\ud558\uac8c \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","ccca0ee5":"\uade0\uc77c \ub0b4\ubd80 \ucc28\uc6d0\ub4e4\uc744 \uac00\uc9c0\ub294 \ube44\uc815\ud615 \ud150\uc11c\ub4e4\uc740 flat_values(\ub2e4\ub978 \ub9d0\ub85c, \uac00\uc7a5 \ub0b4\ubd80\uc758 `values`)\uc5d0 \ub300\ud574 \ub2e4\ucc28\uc6d0 [tf.Tensor](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Tensor)\ub97c \uc0ac\uc6a9\ud574 \uc778\ucf54\ub529\ub429\ub2c8\ub2e4.\n![](https:\/\/www.tensorflow.org\/images\/ragged_tensors\/uniform_inner.png)","2c847fb0":"### \uade0\uc77c \ube44\ub0b4\ubd80 \ucc28\uc6d0","50493ff7":"\uac01 \ud589\uc774 \uc5bc\ub9c8\ub098 \uae34\uc9c0 \uc548\ub2e4\uba74, `row_lengths` \ud589 \uad6c\ubd84 \ud150\uc11c\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:\n![](https:\/\/www.tensorflow.org\/images\/ragged_tensors\/row_lengths.png)","cf5d7b4d":"[tf.io.RaggedFeature](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/io\/RaggedFeature)\ub294 \uc5ec\ub7ec\uac1c\uc758 \ube44\uc815\ud615 \ucc28\uc6d0\uc774 \uc788\ub294 \ud2b9\uc9d5\ub4e4\uc744 \uc77d\ub294 \ub370\uc5d0\ub3c4 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc790\uc138\ud55c \uc0ac\ud56d\uc740 [API \ubb38\uc11c](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/io\/RaggedFeature)\ub97c \ubcf4\uc138\uc694.","1eadff94":"## \ud150\uc11c \uc720\ud615 \ubcc0\ud658","6aa3035c":"\uc624\ubc84\ub85c\ub529\ub41c \uc5f0\uc0b0\uc790\ub4e4\uc740 \uc6d0\uc18c \ubcc4 \uacc4\uc0b0\uc744 \uc218\ud589\ud558\uae30 \ub54c\ubb38\uc5d0, \ubaa8\ub4e0 \uc774\ud56d \uc5f0\uc0b0\uc5d0 \ub300\ud55c \uc785\ub825\uc740 \uac19\uc740 \ubaa8\uc591\uc744 \uac00\uc9c0\uac70\ub098 \uac19\uc740 \ubaa8\uc591\uc73c\ub85c \ud37c\ub728\ub824\uc9c8 \uc218 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uac00\uc7a5 \uac04\ub2e8\ud55c \ud37c\ub728\ub824\uc9c0\ub294 \uacbd\uc6b0\uc5d0\uc11c\ub294, \ub2e8\uc77c \uc2a4\uce7c\ub77c\uac00 \ube44\uc815\ud615 \ud150\uc11c \uc548\uc758 \uac01 \uac12\uc5d0 \uc6d0\uc18c \ubcc4\ub85c \uacb0\ud569\ub429\ub2c8\ub2e4:","1a56d914":"_**\ube44\uc815\ud615 \ucc28\uc6d0**_ \uc740 \uc870\uac01\uc774 \ub2e4\ub978 \uae38\uc774\ub97c \uac00\uc9c8 \uc218 \uc788\ub294 \ucc28\uc6d0\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, `rt=[[3, 1, 4, 1], [], [5, 9, 2], [6], []]`\uc758 \ub0b4\ubd80 (\uc5f4) \ucc28\uc6d0\uc740 \uc5f4 \uc870\uac01(`rt[0, :], ..., rt[4, :]`)\uc774 \ub2e4\ub978 \uae38\uc774\ub97c \uac00\uc9c0\ubbc0\ub85c \ube44\uc815\ud615\uc785\ub2c8\ub2e4. \ubaa8\ub450 \uac19\uc740 \uae38\uc774\ub97c \uac00\uc9c0\ub294 \uc870\uac01\uc758 \ucc28\uc6d0\uc740 _\uade0\uc77c \ucc28\uc6d0_ \uc774\ub77c\uace0 \ubd80\ub985\ub2c8\ub2e4.","01b6e771":"\ub354 \uc2ec\ud654\ub41c \uacbd\uc6b0\uc5d0 \ub300\ud55c \uc774\uc57c\uae30\ub97c \uc704\ud574\uc11c\ub294, **\ud37c\ub728\ub9ac\uae30** \uc808\uc744 \ubcf4\uc138\uc694.","2a80fa11":"## \uac1c\uc694","103fab14":"[tf.function](https:\/\/www.tensorflow.org\/guide\/function)\uc740 Python \ud568\uc218\ub4e4\uc744 \uc704\ud55c TensorFlow \uadf8\ub798\ud504\ub97c \uc0ac\uc804 \uacc4\uc0b0\ud558\ub294 \ub370\ucf54\ub808\uc774\ud130\uc774\uba70, TensorFlow \ucf54\ub4dc\uc758 \uc131\ub2a5\uc744 \uc0c1\ub2f9\ud788 \uac1c\uc120\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ube44\uc815\ud615 \ud150\uc11c\ub4e4\uc740 `@tf.function`\uc73c\ub85c \uafb8\uba70\uc9c4 \ud568\uc218\ub4e4\uc5d0\uc11c \ud22c\uba85\ud558\uac8c \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc544\ub798\uc758 \ud568\uc218\ub294 \ube44\uc815\ud615\uacfc \ube44\uc815\ud615\uc774 \uc544\ub2cc \ud150\uc11c\ub4e4 \ubaa8\ub450\uc5d0\uc11c \uc791\ub3d9\ud569\ub2c8\ub2e4:","75cf3afc":"\uc9c1\ub82c\ud654\ub41c \ubb38\uc790\uc5f4\ub4e4\uc758 \ud150\uc11c\uc640 \ud2b9\uc9d5 \uc124\uba85 \uc0ac\uc804\uc744 \ubc1b\uc544 \ud2b9\uc9d5 \uc774\ub984\uc5d0\uc11c \ud150\uc11c\ub85c \ub300\uc751\uc2dc\ud0a4\ub294 \uc0ac\uc804\uc744 \ubc18\ud658\ud558\ub294 [tf.io.parse_example](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/io\/parse_example)\uc744 \uc0ac\uc6a9\ud574\uc11c \uc774 \uc778\ucf54\ub529\ub41c \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac00\ubcc0 \uae38\uc774\uc758 \ud2b9\uc9d5\uc744 \ube44\uc815\ud615 \ud150\uc11c\ub85c \uc77d\uae30 \uc704\ud574\uc11c\ub294 \uac04\ub2e8\ud558\uac8c \ud2b9\uc9d5 \uc124\uba85 \uc0ac\uc804\uc548\uc5d0\uc11c [tf.io.RaggedFeature](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/io\/RaggedFeature)\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4:","822d3d11":"### \ube44\uc815\ud615 \ud150\uc11c\uc5d0 \uc800\uc7a5\ud560 \uc218 \uc788\ub294 \uac83","e7aea603":"\ube44\uc815\ud615 \ud150\uc11c\ub294 \uc911\ucca9\ub41c Python `list`\uc640 numpy `array`\ub85c \ubcc0\ud658\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","baa39e28":"[\uace0\uccb4 \ud568\uc218](https:\/\/www.tensorflow.org\/guide\/function#obtaining_concrete_functions)\ub294 [tf.function](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/function)\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 \ub3c5\ub9bd\uc801\uc778 \ucd94\uc801\ub41c \uadf8\ub798\ud504\ub4e4\uc744 \ucea1\uc290\ud654\ud569\ub2c8\ub2e4. \ube44\uc815\ud615 \ud150\uc11c\ub4e4\uc740 \uace0\uccb4 \ud568\uc218\uc5d0\uc11c \ud22c\uba85\ud558\uac8c \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","7c84be80":"[tf.Example](https:\/\/www.tensorflow.org\/tutorials\/load_data\/tfrecord)\uc740 TensorFlow \ub370\uc774\ud130\ub97c \uc704\ud55c \ud45c\uc900 [\ud504\ub85c\ud1a0\ucf5c \ubc84\ud37c](https:\/\/developers.google.com\/protocol-buffers\/) \uc778\ucf54\ub529\uc785\ub2c8\ub2e4. `tf.Example`\ub85c \uc778\ucf54\ub529\ub41c \ub370\uc774\ud130\ub4e4\uc740 \uc885\uc885 \uac00\ubcc0 \uae38\uc774\uc758 \ud2b9\uc9d5\ub4e4\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc544\ub798\uc758 \ucf54\ub4dc\ub294 \uc11c\ub85c \ub2e4\ub978 \ud2b9\uc9d5 \uae38\uc774\ub97c \uac00\uc9c0\ub294 \ub124\uac1c\uc758 `tf.Example` \uba54\uc138\uc9c0\uc758 \ubb36\uc74c\uc744 \uc815\uc758\ud569\ub2c8\ub2e4:","2f35c297":"[RaggedTensor.shape](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/RaggedTensor#shape) \uc18d\uc131\uc740 \ube44\uc815\ud615 \ud150\uc11c\ub97c \uc704\ud55c [tf.TensorShape](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/TensorShape)\uc744 \ubc18\ud658\ud558\uba70, \ube44\uc815\ud615 \ucc28\uc6d0\uc740 `None` \ud06c\uae30\ub97c \uac00\uc9d1\ub2c8\ub2e4:","547b85f0":"**API \ubb38\uc11c**: [tf.RaggedTensor](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/RaggedTensor) [tf.ragged](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/ragged)","e3860bca":"> **\ucc38\uace0**: \uae30\ubcf8\uc801\uc73c\ub85c, \uc774\ub7f0 \uc0dd\uc131 \uba54\uc18c\ub4dc\ub4e4\uc740 \ud589 \uad6c\ubd84 \ud150\uc11c\ub4e4\uc774 \uc798 \ub9cc\ub4e4\uc5b4\uc838 \uc788\uace0 \uac12\uc758 \uac1c\uc218\uc640 \uc77c\uce58\ud558\ub294\uc9c0 \ud655\uc778\ud558\ub294 \uac83\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4. \uc785\ub825\uc774 \uc798 \ub9cc\ub4e4\uc5b4\uc838 \uc788\uace0 \uc77c\uce58\ud558\ub294 \uac83\uc744 \ubcf4\uc7a5\ud560 \uc218 \uc788\ub2e4\uba74 `validate=False` \ub9e4\uac1c \ubcc0\uc218\ub294 \uc774\ub7f0 \uac80\uc0ac\ub97c \uac74\ub108\ub6f0\uae30 \uc704\ud574 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","db256064":"[tf.keras](https:\/\/www.tensorflow.org\/guide\/keras)\ub294 \ub525\ub7ec\ub2dd \ubaa8\ub378\uc744 \ub9cc\ub4e4\uace0 \ud559\uc2b5\uc2dc\ud0a4\uae30 \uc704\ud55c TensorFlow\uc758 \uace0\uc218\uc900 API\uc785\ub2c8\ub2e4. \ube44\uc815\ud615 \ud150\uc11c\ub294 [tf.keras.Input](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/Input)\uc774\ub098 [tf.keras.layers.InputLayer](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/layers\/InputLayer)\uc5d0\uc11c `ragged=True`\ub97c \uc124\uc815\ud568\uc73c\ub85c\uc368 Keras \ubaa8\ub378\uc5d0 \uc785\ub825\uc73c\ub85c \ub118\uaca8\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ube44\uc815\ud615 \ud150\uc11c\ub294 Keras \uce35 \uc0ac\uc774\uc5d0\uc11c\ub3c4 \ub118\uaca8\uc9c8 \uc218 \uc788\uace0, Keras \ubaa8\ub378\uc5d0 \uc758\ud574 \ubc18\ud658\ub420 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc758 \uc608\uc81c\ub294 \ube44\uc815\ud615 \ud150\uc11c\ub97c \uc0ac\uc6a9\ud574\uc11c \ud559\uc2b5\ub41c \ubaa8\ud615 LSTM \ubaa8\ub378\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.","a308c2d2":"## \ube44\uc815\ud615 \ud150\uc11c \ud3c9\uac00","307b732e":"### \uc0c9\uc778 \uc608\uc81c: 2\ucc28\uc6d0 \ube44\uc815\ud615 \ud150\uc11c","5fd5a08d":"[tf.function](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/function)\uc5d0 \ub300\ud55c `input_signature`\uc744 \ubd84\uba85\ud558\uac8c \ud2b9\uc815\ud558\uace0 \uc2f6\ub2e4\uba74, [tf.RaggedTensorSpec](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/RaggedTensorSpec)\uc744 \uc0ac\uc6a9\ud574\uc11c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","0882f115":"\ub370\uc774\ud130 \uc138\ud2b8 \uc548\uc758 \ube44\uc815\ud615 \ud150\uc11c\ub4e4\uc740 [Dataset.map](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/data\/Dataset#map)\uc744 \uc0ac\uc6a9\ud574 \uc0dd\uc131\ub418\uac70\ub098 \ubcc0\ud658\ub420 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.","1f006d77":"\ud37c\ub728\ub824\uc9c0\uc9c0 \uc54a\ub294 \ubaa8\uc591\ub4e4\uc758 \uba87\uac00\uc9c0 \uc608\uc81c\uc785\ub2c8\ub2e4:","e48d212e":"### tf.Example","61babe01":"\ube44\uc815\ud615 \ud150\uc11c\ub97c \uc0dd\uc131\ud558\ub294 \uac00\uc7a5 \uac04\ub2e8\ud55c \ubc29\ubc95\uc740 \uc8fc\uc5b4\uc9c4 \uc911\ucca9\ub41c Python `list`\ub098 numpy `array`\uc5d0 \ub300\uc751\ud558\ub294 `RaggedTensor`\ub97c \ub9cc\ub4e4\uc5b4\ub0b4\ub294 [tf.ragged.constant](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/ragged\/constant)\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4:","245a2644":"### \uade0\uc77c \ub0b4\ubd80 \ucc28\uc6d0","6131574f":"#### \uc608\uc81c: \uac1c\uc778\ud654\ub41c \ubaa8\ub378 \uc800\uc7a5","56b36f32":"#### \ube44\uc815\ud615 \ud150\uc11c\ub85c \ub370\uc774\ud130 \uc138\ud2b8 \ub9cc\ub4e4\uae30","52989dcf":"`RaggedTensor` \ud074\ub798\uc2a4\ub294 `RaggedTensor`\uc640 [tf.Tensor](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Tensor)\ub098 `tf.SparseTensor` \uc0ac\uc774\uc758 \ubcc0\ud658\uc5d0 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub294 \uba54\uc18c\ub4dc\ub4e4\uc744 \uc815\uc758\ud569\ub2c8\ub2e4:","fd912eee":"[tf.Tensor](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Tensor)\uc5d0\uc11c\ucc98\ub7fc, \ube44\uc815\ud615 \ud150\uc11c\uc758 _**\uae09**_ \uc740 \ucc28\uc6d0\uc758 \uc804\uccb4 \uac1c\uc218(\ube44\uc815\ud615\uacfc \uade0\uc77c \ucc28\uc6d0\uc744 \ubaa8\ub450 \ud3ec\ud568)\uc785\ub2c8\ub2e4. _**\uc7a0\uc7ac\uc801 \ube44\uc815\ud615 \ud150\uc11c**_ \ub294 [tf.Tensor](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Tensor)\ub098 [tf.RaggedTensor](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/RaggedTensor) \ubaa8\ub450 \ub420 \uc218 \uc788\ub294 \uac12\uc785\ub2c8\ub2e4.","a38b3557":"> **\ucc38\uace0**: SavedModel\uc758 [signature](https:\/\/www.tensorflow.org\/guide\/saved_model#specifying_signatures_during_export)\ub4e4\uc740 \uace0\uccb4 \ud568\uc218\uc785\ub2c8\ub2e4. \uc704\uc758 \uace0\uccb4 \ud568\uc218\ub4e4\uc5d0 \ub300\ud55c \uc808\uc5d0\uc11c \uc5b8\uae09\ub418\uc5c8\ub4ef\uc774, \ube44\uc815\ud615 \ud150\uc11c\ub4e4\uc740 TensorFlow 2.3\uc5d0\uc11c\ubd80\ud130\ub9cc \uace0\uccb4 \ud568\uc218\uc5d0\uc11c \uc54c\ub9de\uac8c \ub2e4\ub904\uc9d1\ub2c8\ub2e4. \uc774\uc804 \ubc84\uc804\uc758 TensorFlow\uc5d0\uc11c SavedModel signature\ub4e4\uc744 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4\uba74, \ube44\uc815\ud615 \ud150\uc11c\ub97c \ubd80\ubd84 \ud150\uc11c\ub85c \ubd84\ud574\ud558\ub294 \uac83\uc744 \ucd94\ucc9c\ud569\ub2c8\ub2e4.","b0cc5036":"\ub370\uc774\ud130 \uc138\ud2b8\ub294 [tf.Tensor](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/Tensor)\ub4e4\uc5d0\uc11c\ub098 numpy `array`\ub4e4\uc5d0\uc11c \ub9cc\ub4e4 \ub54c \uc0ac\uc6a9\ub418\ub294 [Dataset.from_tensor_slices](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/data\/Dataset#from_tensor_slices) \uac19\uc740 \ub3d9\uc77c\ud55c \uba54\uc18c\ub4dc\ub4e4\uc744 \uc0ac\uc6a9\ud574\uc11c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","dcc28383":"\uc0dd\uc131 \ud568\uc218 [tf.RaggedTensor.from_nested_row_splits](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/RaggedTensor#from_nested_row_splits)\ub294 `row_splits` \ud150\uc11c\ub4e4\uc758 \ubc30\uc5f4\uc744 \uc81c\uacf5\ud568\uc73c\ub85c\uc368, \uc5ec\ub7ec \uac1c\uc758 \ube44\uc815\ud615 \ucc28\uc6d0\uc744 \uac00\uc9c0\ub294 RaggedTensor\ub97c \uc9c1\uc811\uc801\uc73c\ub85c \ub9cc\ub4dc\ub294 \ub370\uc5d0 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","9538f157":"### \ub370\uc774\ud130 \uc138\ud2b8","5c1bb76e":"`RaggedTensor`\uc758 \uac12\uc5d0 \ub300\ud574 \uc6d0\uc18c \ubcc4 \ubcc0\ud658\uc744 \uc218\ud589\ud574\uc57c \ud55c\ub2e4\uba74, \ud568\uc218\uc640 \ud558\ub098 \uc774\uc0c1\uc758 \uc778\uc790\ub97c \ubc1b\uc544 `RaggedTensor`\uc758 \uac12\uc744 \ubcc0\ud658\ud558\ub294 \ud568\uc218\ub97c \uc801\uc6a9\ud558\ub294 [tf.ragged.map_flat_values](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/ragged\/map_flat_values)\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","cef0b8da":"### ragged_rank\uc640 flat_values","c771750f":"#### \ube44\uc815\ud615 \ud150\uc11c\ub97c \uac00\uc9c0\ub294 \ub370\uc774\ud130 \uc138\ud2b8 \ubcc0\ud658","9035823e":"\ube44\uc815\ud615 \ud150\uc11c\ub294 [Keras](https:\/\/www.tensorflow.org\/guide\/keras), [Datasets](https:\/\/www.tensorflow.org\/guide\/data), [tf.function](https:\/\/www.tensorflow.org\/guide\/function), [SavedModels](https:\/\/www.tensorflow.org\/guide\/saved_model), \uadf8\ub9ac\uace0 [tf.Example](https:\/\/www.tensorflow.org\/tutorials\/load_data\/tfrecord)\uc744 \ud3ec\ud568\ud558\ub294 \ub9ce\uc740 TensorFlow API\uc5d0\uc11c \uc9c0\uc6d0\ub429\ub2c8\ub2e4. \ub354 \uc790\uc138\ud55c \uc815\ubcf4\ub97c \uc704\ud574\uc11c\ub294, \uc544\ub798\uc758 **TensorFlow API\ub4e4** \uc808\uc744 \ubcf4\uc138\uc694.","a8cb0f9a":"\ub2e4\uc74c\uc758 \uc608\uc81c\ub294 `RaggedTensor`\ub4e4\uc774 \uac01 \ubb38\uc7a5\uc758 \uc2dc\uc791\uacfc \ub05d\uc5d0 \ud2b9\uc218 \ubb38\uc790\ub97c \uc0ac\uc6a9\ud574\uc11c \uac00\ubcc0 \uae38\uc774\uc758 \ubb38\uc758\uc758 \ubb36\uc74c\uc744 \uc704\ud55c unigram\uacfc bigram \uc784\ubca0\ub529\uc744 \uc0dd\uc131\ud558\uace0 \uacb0\ud569\ud558\ub294 \ub370\uc5d0 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub294 \ubc29\ubc95\uc744 \uc124\uba85\ud569\ub2c8\ub2e4. \uc774 \uc608\uc81c \uc548\uc5d0\uc11c \uc0ac\uc6a9\ub41c \uc5f0\uc0b0\ub4e4\uc5d0 \ub300\ud55c \ub354 \uc790\uc138\ud55c \uc0ac\ud56d\uc740 [tf.ragged](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/ragged) \ud328\ud0a4\uc9c0 \ubb38\uc11c\ub97c \ubcf4\uc138\uc694.","9d34397e":"## \uc0ac\uc6a9 \uc608\uc81c","f6428b79":"\ube44\uc815\ud615 \ud150\uc18c\ub4e4\uc740 \uc77c\ubc18\uc801\uc778 `Tensor`\ub4e4\uacfc \uac19\uc740 \uc5f0\uc0b0\uc790\ub4e4\uc758 \uc9d1\ud569\uc744 \uc624\ubc84\ub85c\ub529\ud569\ub2c8\ub2e4: \ub2e8\ud56d \uc5f0\uc0b0\uc790 `-`, `~`, \uadf8\ub9ac\uace0 `abs()`; \uadf8\ub9ac\uace0 \uc774\ud56d \uc5f0\uc0b0\uc790 `+`, `-`, `*`, `\/`, `\/\/`, `%`, `**`, `&`, `|`, `^`, `==`, `<`, `<=`, `>`, \uadf8\ub9ac\uace0 `>=`.","1d042881":"#### \uac00\ubcc0 \uae38\uc774\uc758 \ube44\uc815\ud615\uc774 \uc544\ub2cc \ud150\uc11c\ub97c \uac00\uc9c0\ub294 \ub370\uc774\ud130 \uc138\ud2b8 \ubb36\uae30","13ce6083":"\ube44\uc815\ud615 \ud150\uc11c\ub294 \uc5ec\ub7ec\uac1c\uc758 \ube44\uc815\ud615 \ucc28\uc6d0\uc744 \uac00\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, `[num_documents, (num_paragraphs), (num_sentences), (num_words)]`\uc758 \ubaa8\uc591\uc758 \ud150\uc11c\ub97c \uc0ac\uc6a9\ud574\uc11c \uad6c\uc870\ud654\ub41c \uae00 \ubb38\uc11c\uc758 \ubb36\uc74c\uc744 \uc800\uc7a5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\uc5ec\uae30\uc5d0\uc11c\ub3c4 \uad04\ud638\ub294 \ube44\uc815\ud615 \ucc28\uc6d0\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud574 \uc0ac\uc6a9\ub418\uc5c8\uc2b5\ub2c8\ub2e4)","89d77bd5":"## \uc624\ubc84\ub85c\ub529\ub41c \uc5f0\uc0b0\uc790","e08bf2c8":"#### [tf.RaggedTensor.from_row_splits](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/RaggedTensor#from_row_splits)","3b419885":"\ube44\uc815\ud615 \ud150\uc11c \uc548\uc5d0 \uc788\ub294 \uac12\uc5d0 \uc811\uadfc\ud558\uae30 \uc704\ud574\uc11c\ub294, \ub2e4\uc74c\uacfc \uac19\uc774 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:\n1. \ube44\uc815\ud615 \ud150\uc11c\ub97c \uc911\ucca9\ub41c python \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uae30 \uc704\ud574 [tf.RaggedTensor.to_list()](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/RaggedTensor#to_list)\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n2. \ube44\uc815\ud615 \ud150\uc11c\ub97c \uac12\uc774 \uc911\ucca9\ub41c numpy \ubc30\uc5f4\ub4e4\uc778 numpy \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uae30 \uc704\ud574 [tf.RaggedTensor.numpy()](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/RaggedTensor#numpy)\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n3. [tf.RaggedTensor.values](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/RaggedTensor#values)\uc640 [tf.RaggedTensor.row_splits](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/RaggedTensor#row_splits) \uc18d\uc131\uc774\ub098, [tf.RaggedTensor.row_lengths()](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/RaggedTensor#row_lengths)\uc640 [tf.RaggedTensor.value_rowids()](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/RaggedTensor#value_rowids)\uc640 \uac19\uc740 \ud589 \ubd84\ud560 \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud574 \ube44\uc815\ud615 \ud150\uc11c\ub97c \ubd80\ubd84\ubcc4\ub85c \ubd84\ud574\ud569\ub2c8\ub2e4.\n4. \ube44\uc815\ud615 \ud150\uc11c\uc5d0\uc11c \uac12\uc744 \uc120\ud0dd\ud558\uae30 \uc704\ud574 Python \uc0c9\uc778\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.","be2ae83b":"#### \uace0\uccb4 \ud568\uc218","707f23a5":"\uadf8\ub9ac\uace0 \uc77c\ubc18 \ud150\uc11c\ucc98\ub7fc, \uc6d0\uc18c \ubcc4 \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\uae30 \uc704\ud574 Python \uc0b0\uc220\uacfc \ube44\uad50 \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c \uc704\ud574\uc11c\ub294, \uc544\ub798\uc758 **\uc624\ubc84\ub85c\ub529\ub41c \uc5f0\uc0b0\ub4e4** \uc808\uc744 \ubcf4\uc138\uc694.","b695eec8":"\ube44\uc815\ud615\uc774 \uc544\ub2cc \ud150\uc11c\ub4e4\uc744 \ud3ec\ud568\ud558\ub294 \ub370\uc774\ud130 \uc138\ud2b8\ub97c \uac00\uc9c0\uace0 \uc788\uace0, \ud150\uc11c\uc758 \uae38\uc774\uac00 \uc6d0\uc18c\uc5d0 \ub530\ub77c \ub2e4\uc591\ud558\ub2e4\uba74, `dense_to_ragged_batch` \ubcc0\ud658\uc744 \uc801\uc6a9\ud574\uc11c \uc774\ub7f0 \ube44\uc815\ud615\uc774 \uc544\ub2cc \ud150\uc11c\ub4e4\uc744 \ube44\uc815\ud615 \ud150\uc11c\ub85c \ubb36\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","7a49856c":"## \uc124\uc815","418795cd":"\ube44\uc815\ud615 \ud150\uc11c\uc758 _**ragged rank**_ \uc740 \ubc11\uc5d0 \uc788\ub294 `values` Tensor\uac00 \uba87 \ubc88 \ubd84\ud560\ub418\uc5c8\ub294\uc9c0(\ub2e4\ub978 \ub9d0\ub85c, `RaggedTensor` \uac1d\uccb4\ub4e4\uc758 \uc911\ucca9\ub41c \uae4a\uc774)\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uac00\uc7a5 \uc548\ucabd\uc758 `values` \ud150\uc11c\ub294 \uc774\uac83\uc758 _**flat_values**_ \ub85c \uc54c\ub824\uc838 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc758 \uc608\uc81c\uc5d0\uc11c\ub294, `conversations`\ub294 `ragged_rank=3`\ub97c \uac00\uc9c0\uace0, `flat_values`\ub294 24\uac1c\uc758 \ubb38\uc790\uc5f4\ub85c \uc774\ub8e8\uc5b4\uc9c4 1\ucc28\uc6d0 `Tensor`\uc785\ub2c8\ub2e4:","cb578647":"\uc0dd\uc131 \uba54\uc18c\ub4dc\uc758 \uc804\uccb4 \ubaa9\ub85d\uc744 \uc704\ud574\uc11c\ub294 [tf.RaggedTensor](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/RaggedTensor) \ud074\ub798\uc2a4 \ubb38\uc11c\ub97c \ubcf4\uc138\uc694.","7431cabd":"\ub370\uc774\ud130\ub294 \ub2e4\uc591\ud55c \ubaa8\uc591\uc73c\ub85c \uc8fc\uc5b4\uc9d1\ub2c8\ub2e4; \ud150\uc11c \ub610\ud55c \uadf8\ub798\uc57c \ud569\ub2c8\ub2e4. _\ube44\uc815\ud615 \ud150\uc11c_ \ub294 \uc911\ucca9\ub41c \uac00\ubcc0 \uae38\uc774 \ub9ac\uc2a4\ud2b8\uc640 \ub3d9\uc77c\ud55c \uc5ed\ud560\uc758 TensorFlow \uc790\ub8cc\ud615\uc785\ub2c8\ub2e4. \uc774\uac83\ub4e4\uc740 \ub2e4\uc74c\uc744 \ud3ec\ud568\ud558\ub294 \uade0\uc77c\ud558\uc9c0 \uc54a\uc740 \ubaa8\uc591\uc758 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uace0 \ucc98\ub9ac\ud558\uae30 \uc27d\uac8c \ub9cc\ub4e4\uc5b4\uc90d\ub2c8\ub2e4:\n* \uac00\ubcc0 \uae38\uc774 \ud2b9\uc9d5\ub4e4, \uc608\ub97c \ub4e4\uba74 \uc601\ud654 \uc548\uc758 \ubc30\uc6b0\ub4e4\uc758 \uc9d1\ud569.\n* \uac00\ubcc0 \uae38\uc774 \uc21c\ucc28\uc801 \uc785\ub825\uc758 \ubb36\uc74c, \uc608\ub97c \ub4e4\uba74 \ubb38\uc7a5\uc774\ub098 \uc601\uc0c1 \uc870\uac01.\n* \uacc4\uce35\ud615 \uc785\ub825, \uc608\ub97c \ub4e4\uba74 \uc808, \ubb38\ub2e8, \ubb38\uc7a5, \ub2e8\uc5b4\ub85c \ub098\ub204\uc5b4\uc9c0\ub294 \uae00 \ubb38\uc11c.\n* \uad6c\uc870\ud654\ub41c \uc785\ub825 \uc548\uc758 \ub3c5\ub9bd\uc801\uc778 \ubd80\ubd84, \uc608\ub97c \ub4e4\uba74 \ud504\ub85c\ud1a0\ucf5c \ubc84\ud37c.","efefae2e":"\uade0\uc77c \ucc28\uc6d0\uc5d0\uc11c\uc758 \ud150\uc11c\uc758 \ud06c\uae30\uac00 \ud558\ub098\uc758 \uc22b\uc790\uc774\uba70(\uadf8 \ucc28\uc6d0\uc744 \ub530\ub77c\uac04 \uc870\uac01\uc758 \ud06c\uae30); \ube44\uc815\ud615 \ucc28\uc6d0\uc5d0\uc11c\uc758 \ud150\uc11c\uc758 \ud06c\uae30\ub294 \uc870\uac01\uc758 \uae38\uc774\uc758 \ubc30\uc5f4\uc778 \uacbd\uc6b0(\uadf8 \ucc28\uc6d0\uc744 \ub530\ub77c\uac04 \ubaa8\ub4e0 \uc870\uac01\uc5d0 \ub300\ud574).","d243b7e2":"### \uc0c9\uc778 \uc608\uc81c: 3\ucc28\uc6d0 \ube44\uc815\ud615 \ud150\uc11c","291eefc6":"> **\ucc38\uace0**: [Dataset.from_generator](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/data\/Dataset#from_generator)\ub294 \uc544\uc9c1 \ube44\uc815\ud615 \ud150\uc11c\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc9c0\ub9cc, \uc870\ub9cc\uac04 \ucd94\uac00\ub420 \uac83\uc785\ub2c8\ub2e4.","0c983640":"[tf.RaggedTensor.bounding_shape](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/RaggedTensor#bounding_shape) \uba54\uc18c\ub4dc\ub294 \uc8fc\uc5b4\uc9c4 `RaggedTensor`\uc5d0 \ub531 \ub9de\ub294 \ubc94\uc704 \ubaa8\uc591\uc744 \ucc3e\ub294 \ub370\uc5d0 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","4e48cd86":"\uade0\uc77c \ube44\ub0b4\ubd80 \ucc28\uc6d0\ub4e4\uc744 \uac00\uc9c0\ub294 \ube44\uc815\ud615 \ud150\uc11c\ub4e4\uc740 `uniform_row_length`\ub97c \uc774\uc6a9\ud55c \ud589 \ubd84\ud560\ub85c \uc778\ucf54\ub529\ub429\ub2c8\ub2e4.\n![](https:\/\/www.tensorflow.org\/images\/ragged_tensors\/uniform_outer.png)","38798e06":"#### [tf.RaggedTensor.from_row_lengths](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/RaggedTensor#from_row_lengths)","1105aa98":"\uc77c\ubc18 `Tensor`\ub4e4\ucc98\ub7fc, `RaggedTensor` \uc548\uc758 \uac12\ub4e4\uc740 \ubaa8\ub4dc \uac19\uc740 \uc790\ub8cc\ud615\uc744 \uac00\uc838\uc57c \ud569\ub2c8\ub2e4; \uadf8\ub9ac\uace0 \uac12\ub4e4\uc740 \ubaa8\ub450 \uac19\uc740 \uc911\ucca9 \uae4a\uc774(\ud150\uc11c\uc758 _\uae09_)\ub97c \uac00\uc838\uc57c \ud569\ub2c8\ub2e4:","81821360":"### \ud37c\ub728\ub9ac\uae30 \uc608\uc81c"}}