{"cell_type":{"57ca5f5a":"code","b30790f8":"code","1a5a0279":"code","c8f78e83":"code","9552bf32":"code","56909190":"code","3c021707":"code","66d484e2":"code","f9f7be3d":"code","915c8085":"code","21cd8532":"code","222c5ec1":"code","4ac602f7":"code","8b64ebf7":"code","9ead743e":"code","ac215e6d":"code","0e85c3bc":"code","27d5f68f":"code","666fcfe5":"code","85232726":"code","e7005e3c":"code","bd280826":"code","2e698bba":"code","50545f07":"code","625f6f9a":"code","a1cd56b4":"code","f3c0a4ca":"code","fdcca59c":"code","e97c0af4":"code","1516bd74":"code","05a91e97":"code","29370123":"code","1ea2b4ec":"code","cddfa0b3":"code","14dada1a":"code","70025920":"code","b9bb989d":"code","05d8344d":"code","35e70ede":"code","8f847d42":"code","f843af6b":"code","4907b308":"code","8d7ea00c":"code","52383c5c":"code","4f57e7d4":"code","7ab85c5f":"code","8182bde1":"code","56e6e07e":"code","81980628":"code","689d85cf":"code","236fbbf0":"code","803e4199":"code","d85227f5":"code","6989a089":"code","7871c9aa":"code","0e05d2db":"code","573816d5":"code","5dde7e99":"code","79bcb884":"markdown","d694b56b":"markdown","dac758fd":"markdown","6a0c8e51":"markdown","6a0197f9":"markdown","703c6080":"markdown","9586d2c2":"markdown","034a53d6":"markdown","1faf02dc":"markdown","44a99dfb":"markdown","04f4cad9":"markdown","9446cc15":"markdown","e4ff3705":"markdown","d14251fc":"markdown","b0fcca9c":"markdown","829c659d":"markdown","4fc56b5f":"markdown","548bb909":"markdown","64a70a8f":"markdown","9dd2906d":"markdown","157509da":"markdown","0c623fdd":"markdown","d730949e":"markdown","6af4315c":"markdown","f39cedf1":"markdown","e344fef2":"markdown","3801d006":"markdown","74a2b391":"markdown","84676aa6":"markdown","7f69ac2a":"markdown","8ed2a05f":"markdown","965464f5":"markdown","b67274d7":"markdown","ca313c9d":"markdown","c00b357c":"markdown","f6feaff5":"markdown","57198680":"markdown","85854e74":"markdown","bc2df970":"markdown","771384a4":"markdown","2e69250b":"markdown"},"source":{"57ca5f5a":"!pip install pydotplus","b30790f8":"import pandas as pd","1a5a0279":"path = \"..\/input\/craigslist-carstrucks-data\/vehicles.csv\"\ndf = pd.read_csv(path)","c8f78e83":"df.head()","9552bf32":"df.shape","56909190":"df.dtypes","3c021707":"df.describe()","66d484e2":"from pandas_profiling import ProfileReport\nprofile = ProfileReport(df, minimal=True, title='Used Cars Profiling Report', html={'style':{'full_width':True}})\nprofile","f9f7be3d":"columns_to_skip = ['id','url','region','region_url','title_status','vin','image_url','description', 'county', 'state', 'lat', 'long']\ndf = df.drop(columns=columns_to_skip)\ndf.dtypes","915c8085":"df.shape","21cd8532":"df.isna().sum().plot.bar()","222c5ec1":"columns_to_skip_because_of_null_quantity = ['size']","4ac602f7":"df = df.drop(columns=columns_to_skip_because_of_null_quantity)","8b64ebf7":"df.shape","9ead743e":"df = df.dropna()","ac215e6d":"df.shape","0e85c3bc":"df.head()","27d5f68f":"df.nunique()","666fcfe5":"df = df.drop(columns='model')","85232726":"df['odometer'].hist()","e7005e3c":"df.sort_values('odometer', ascending=False).head(500)","bd280826":"df[df.odometer < 300000]['odometer'].hist()","2e698bba":"categories = [\n    ('0_light', 60000),\n    ('1_medium', 120000),\n    ('2_heavy', 9999999999)\n]\n\ndef odocategories(distance):\n    for name,value in categories:\n        if distance < value:\n            return name\n    return categories[-1][0]\ndf['distance'] = df['odometer'].apply(odocategories)\ndf.head()","50545f07":"df['price'].hist()","625f6f9a":"df.sort_values('price', ascending=False).head(100)","a1cd56b4":"df[df.price < 100000]['price'].hist(bins=100)","f3c0a4ca":"df.sort_values('price').head()","fdcca59c":"df = df[df.price > 0]","e97c0af4":"expensiveness_trigger = 20000\n\ndf['expensive'] = df.price.map(lambda price: 0 if (price < expensiveness_trigger) else 1)","1516bd74":"df.head()","05a91e97":"df[df.price > expensiveness_trigger].head()","29370123":"df.expensive.value_counts()","1ea2b4ec":"def cylinder_text_to_number(txt):\n    first_letter = txt[0]\n    if first_letter.isdigit():\n        return int(first_letter)\n    else:\n        return None\ndf['cylinder_number'] = df.cylinders.apply(cylinder_text_to_number)\n# df.isna()['cylinder_number'].sum()\ndf = df.dropna()\ndf.head()","cddfa0b3":"df.condition.value_counts()","14dada1a":"conditions = {\n    'salvage' : 0,\n    'fair': 1,\n    'good': 2,\n    'excellent': 3,\n    'like new': 4,\n    'new': 5\n}\ndf['cat_condition'] = df.condition.apply(lambda v:conditions[v])","70025920":"from sklearn.preprocessing import LabelEncoder\nle_manufacturer = LabelEncoder()\ndf['cat_manufacturer'] = le_manufacturer.fit_transform(df['manufacturer'])\nle_fuel = LabelEncoder()\ndf['cat_fuel'] = le_fuel.fit_transform(df['fuel'])\nle_transmission = LabelEncoder()\ndf['cat_transmission'] = le_transmission.fit_transform(df['transmission'])\nle_type = LabelEncoder()\ndf['cat_type'] = le_type.fit_transform(df['type'])\nle_paint_color = LabelEncoder()\ndf['cat_paint_color'] = le_paint_color.fit_transform(df['paint_color'])\nle_distance = LabelEncoder()\ndf['cat_distance'] = le_distance.fit_transform(df['distance'])\ndf.head()","b9bb989d":"df.dtypes","05d8344d":"from sklearn.model_selection import train_test_split\n\ny = df['expensive']\nX = df.select_dtypes('number').drop(columns=['price', 'expensive', 'odometer'])\n\nX","35e70ede":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\n\nfeature_names = list(X.columns)\nfeature_names","8f847d42":"X_train.shape","f843af6b":"y_test.shape","4907b308":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier(max_depth=5, random_state=0)","8d7ea00c":"dtc.fit(X_train, y_train)","52383c5c":"dtc.score(X_test, y_test)","4f57e7d4":"from sklearn.metrics import classification_report\ny_true = y_test\ny_pred = dtc.predict(X_test)\nprint(classification_report(y_true, y_pred))","7ab85c5f":"dtc.classes_","8182bde1":"labelencoder_classes = lambda le: list(zip(le.classes_, range(len(le.classes_))))\nprint(\"type\")\nprint(labelencoder_classes(le_type))\nprint(\"fuel\")\nprint(labelencoder_classes(le_fuel))","56e6e07e":"import sklearn.tree as tree\nimport pydotplus\nfrom sklearn.externals.six import StringIO \nfrom IPython.display import Image\ndot_data = StringIO()\ntree.export_graphviz(dtc, \n out_file=dot_data, \n class_names=['cheap','expensive'],\n feature_names=feature_names,\n filled=True, # Whether to fill in the boxes with colours.\n rounded=True, # Whether to round the corners of the boxes.\n special_characters=True,\n                     proportion=True\n                    )\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue()) \nImage(graph.create_png())","81980628":"graph.write_png(\"used_cars.png\")","689d85cf":"from sklearn.feature_selection import chi2","236fbbf0":"y.value_counts()","803e4199":"chi2_results = chi2(X, y)\ndf_chi2 = pd.DataFrame(chi2_results)\ndf_chi2.columns = X.columns\ndf_chi2.index = ['cheap', 'expensive']\ndf_chi2 = df_chi2.T\ndf_chi2.cheap.plot.bar()","d85227f5":"import cufflinks as cf\ncf.go_offline()","6989a089":"df = df[df.year > 1980]","7871c9aa":"df.groupby('year').count()['price'].iplot()","0e05d2db":"df_count_yearly = pd.DataFrame(df.groupby(['year', 'type']).count()['price'])\ndf_count_yearly.columns = ['count']\ndf_count_yearly.head()","573816d5":"df_pivot = pd.pivot_table(df_count_yearly, columns='type', index='year')['count']\ndf_pivot.head()","5dde7e99":"df_pivot.iplot()","79bcb884":"Our goal is to make classification. We are not wishing to play with regression of real values, we need categories.\n\nThere are some columns we may adapt, we can take a range of it and split it into chunks.\n\nOther columns can make it impossible, so we need to remove them too. Such a column is `model`. Sorry, we `drop` you man.","d694b56b":"With pandas you can easily select some columns, also using their type.","dac758fd":"## Feature engineering","6a0c8e51":"## Visualize tree","6a0197f9":"Now it is time to generalize some values. `odometer` is an example of that. First, what kind of values do we have there? We can easily print a *histogram* using `hist` function of a series.","703c6080":"# Train ML model\nOur matrix is ready, we have numerical values for each feature. Time to do some Machine Learning.","9586d2c2":"You may be interested what are features we have available together with types","034a53d6":"And let us count the unique number of elements","1faf02dc":"We got rid of some columns so now it seems we are free to deal with missing values","44a99dfb":"## Data\nWe need some data, true...\nData for analysis will be the dataset you can find at Kaggle, containing prices of some used cars (Janusze motoryzacji of USA). You can notice relationships there, f.e. draw conclusions what factors make a car expensive \n\nExample used here you may find at Kaggle https:\/\/www.kaggle.com\/austinreese\/craigslist-carstrucks-data","04f4cad9":"Total distribution of classes in a column can be easily retrieved by `value_counts`","9446cc15":"`pandas` offers lots of `read_...` functions, here we're using one of them, to read a CSV file `read_csv`","e4ff3705":"## EDA\nEDA stands for Exploratory Data Analysis. This is an important part of data analysis process. You want to learn what are the characteristics of your data, what is its nature. First a sample of data with `head`","d14251fc":"We ended up with a data set containing 12 features.\n\nNow it is time to take our strategy against null values, we will remove all rows which have some null values, with a simple yet powerful `dropna` function. What is cool, this function has plenty of parametrization options that help you to adjust its strategy according to your needs.","b0fcca9c":"Variance of each variable explained","829c659d":"From the scikit-learn library we will use `LabelEncoders` to change our categories into number. Only one column I iwll treat in some special manner.  `condition` will be transformed using the dictionary\/map I will provide","4fc56b5f":"It is clear there is one column containing a lot of null values (`size`) so I will just remove it.","548bb909":"One more column we will treat indepe","64a70a8f":"# Pretty charting","9dd2906d":"## Test model quality","157509da":"With pandas you may easily create a new columns as a result of lambda expression","0c623fdd":"## Missing values\n`pandas` is an excellent tool to clean and process your data. We will get rid of some features that seem to be not needed for this calculation.\n\nOne of the things you have to decide about your data is how to deal with missing data. Sometimes we decide to **remove** missing values. On other occasions we could say we **aproximate** them. It is up to the task we have. Here I do not care so much about loosing some information so I will get rid off null values.","d730949e":"Now we make some arbitrary decision, we divide mileage into 3 groups","6af4315c":"Let us take a look on how numbers are distributed","f39cedf1":"After this *destruction* shape has changed, we lost some of the observations.","e344fef2":"Matrices ready","3801d006":"If a car was **sold** there was some **price** so it is an error, thus I will remove such cars","74a2b391":"We can see big disproportions, skewness od this data. What are extreme values? \n\nWe can learn when we sort values, with the *descending* order.","84676aa6":"A quick look into the top part of the dataset","7f69ac2a":"Hmm.. it seems we do have some zero-valued cars.","8ed2a05f":"`shape` is telling you dimensions of data, what is the number of observations (rows) and features (columns)","965464f5":"One can also create a column as a result of function execution","b67274d7":"# E for Extract","ca313c9d":"Basing on myy **domain knowledge** I can judge, mileage of 10M miles is too much. Let us look again at histogram now, checking mileage of 300k and less.\n\nWe may easily filter pandas dataframe using square brackets and putting a condition inside. It works like SQL `where` clause.","c00b357c":"It is effective to look only at cars, which cost less then 100k","f6feaff5":"Distribution is skewed, too. So to make our visualization clear, we need to take a look into dataset exluding extremely high values","57198680":"Here checking sample of only expensive cars","85854e74":"monochromatic only\nhttps:\/\/stackoverflow.com\/questions\/42891148\/changing-colors-for-decision-tree-plot-created-using-export-graphviz","bc2df970":"... but sometimes more intense look into data is needed, and then one may decide to use an external library like `pandas_profiling`","771384a4":"# T is for Transform\nWith `pandas` it is so easy to transform your data. Cleaning and munging is so important, because only then we may draw valuable conclusions","2e69250b":"With machine learning classification tasks, we need to have features and labels, input and output. The algorithm will try to find patterns in input affecting the output changes. \n\nIn our case we want to make things simpler, so we will use a simple output type - binary one. We will just say whether the car is cheap or expensive. We will introduce then a new column `expensiveness` telling you only `True` if the car is **expensive**, and `False` otherwise.\n\nOnce again we need to make our continuous values to be spread into some categories. So we have to find the expensiveness trigger."}}