{"cell_type":{"98ba98d9":"code","6e7becfa":"code","14011ace":"code","5ce5cdb3":"code","c7a223ff":"code","909c8971":"code","e854cc2a":"code","cf02a644":"code","47124c7f":"code","b4aec4ee":"code","ccae9b1a":"code","3e02ad53":"code","338311f9":"code","19aca197":"markdown"},"source":{"98ba98d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6e7becfa":"import matplotlib.pyplot as plt","14011ace":"nCov_data_org = pd.read_csv(\"\/kaggle\/input\/covid19-coronavirus\/2019_nCoV_data.csv\", index_col=\"Sno\")\nnCov_data_org[\"Date\"] = pd.to_datetime(nCov_data_org[\"Date\"])\nnCov_data_org[\"Last Update\"] = pd.to_datetime(nCov_data_org[\"Last Update\"])\nnCov_data_org.head()","5ce5cdb3":"nCov_data_org[\"Date\"].value_counts()","c7a223ff":"nCov_data = nCov_data_org[[\"Date\", \"Confirmed\", \"Deaths\", \"Recovered\"]]\nnCov_data.head()","909c8971":"nCov_Date = nCov_data.groupby([\"Date\"]).sum()\nnCov_Date.head()","e854cc2a":"plt.figure(figsize=(12,6), dpi=80)\nplt.plot(nCov_Date, marker='o')\nplt.legend(nCov_Date.columns)\nplt.xticks(rotation=60)\nplt.show()","cf02a644":"nCov_Date[\"Mortality\"] = nCov_Date[\"Deaths\"]\/nCov_Date[\"Confirmed\"]\nplt.figure(figsize=(12,6), dpi=80)\nplt.plot(nCov_Date[\"Mortality\"]*100, marker='o')\nplt.ylabel(\"Mortality [%]\")\nplt.xticks(rotation=60)\nplt.show()","47124c7f":"nCov_motarity = nCov_data_org","b4aec4ee":"plt.figure(figsize=(12,6), dpi=80)\nnCov_Date[\"Mortality\"] = nCov_Date[\"Deaths\"]\/nCov_Date[\"Confirmed\"]\nplt.figure(figsize=(12,6), dpi=80)\nplt.plot(nCov_Date[\"Mortality\"]*100, marker='o', label=\"World\")\n\nnCov_motarity = nCov_data_org\n_data_china = nCov_motarity[nCov_motarity[\"Country\"] == \"Mainland China\"].groupby(\"Date\").sum()\n_data_others = nCov_motarity[nCov_motarity[\"Country\"] != \"Mainland China\"].groupby(\"Date\").sum()\n_data_china[\"Motarity\"] = _data_china[\"Deaths\"]\/_data_china[\"Confirmed\"]\n_data_others[\"Motarity\"] = _data_others[\"Deaths\"]\/_data_others[\"Confirmed\"]\nplt.plot(_data_china[\"Motarity\"]*100, marker='o', label=\"Mainland China\")\nplt.plot(_data_others[\"Motarity\"]*100, marker='o', label=\"Others\")\n\nplt.xticks(rotation=60)\nplt.legend()\nplt.ylabel(\"Motarity [%]\")\nplt.show()","ccae9b1a":"nCov_Latest = nCov_data_org[:-1]\nnCov_Latest = nCov_Latest[[\"Country\", \"Confirmed\", \"Deaths\", \"Recovered\"]]\nnCov_Country = nCov_Latest.groupby([\"Country\"]).sum()\nnCov_Country.head()","3e02ad53":"def plot_stacked_bar_chart(data):\n    fig = plt.figure(figsize=(8, 8), dpi=80)\n    ax = fig.add_axes((0, 0, 1, 1),\n                      ylabel=data.index.name,\n                      xlabel=\"\")\n    bottom = 0\n    for i in range(0, 2):\n        ax.barh(data.index, data.iloc[:, i], label=data.columns[i],\n                color=\"C\"+str(i), \n                #zorder=10-0.1*i,\n                left=bottom)\n        #bottom += data.iloc[:, i]\n    ax.legend(title=data.columns.name,\n              bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n    ax.grid(True, axis=\"x\", color=\"gainsboro\", alpha=0.8, zorder=7)\n    #ax.set_xticks(rotation=60)\n    [ax.spines[side].set_visible(False) for side in [\"right\", \"top\"]]\n    ","338311f9":"plot_stacked_bar_chart(nCov_Country[nCov_Country.index!=\"Mainland China\"].sort_values(\"Confirmed\"))","19aca197":"Read Data"}}