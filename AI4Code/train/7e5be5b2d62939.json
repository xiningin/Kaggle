{"cell_type":{"038a889c":"code","6d5ead83":"code","a2c57182":"code","caec000e":"code","5d15d78b":"code","44e5aed0":"code","ab902988":"code","0a63181c":"code","14a5924d":"code","cea11ca8":"code","c179b22d":"code","051a8b40":"code","60764f8d":"code","b019fa5e":"code","bc4a3148":"code","e11ce5ae":"code","4abdd548":"code","b181b6a9":"code","1d9e3bba":"code","cc59b747":"code","18da870d":"code","fc1bdeff":"code","581eac3b":"code","bf8c5b56":"code","cbbceb06":"code","b09fe524":"code","4e8c6c93":"code","6b7c7cb0":"code","dfb6f07a":"code","f8172a6f":"code","a0070d2e":"code","070b3127":"code","f47ee790":"code","09e84a5d":"code","cf218bf4":"code","d7a0e894":"code","79c61008":"code","c60982ca":"code","f4d533c4":"code","52f73ff9":"code","3b4bb4ad":"code","f1073677":"code","ceaf0cbd":"code","f8365cfa":"code","3d8982bc":"code","57b5debb":"code","56c7954c":"code","11cf620b":"code","19b49648":"code","a2d5c9a7":"code","697c6771":"code","d478455a":"code","798f2491":"code","434d0602":"markdown","77aa4d19":"markdown","39a9242a":"markdown","10c46531":"markdown","aed6fbef":"markdown","b0d77029":"markdown","048f4cfc":"markdown","4589cc16":"markdown","7e09ba8e":"markdown","e8b3fcb1":"markdown","6100c230":"markdown","a1f94610":"markdown","633ac6fa":"markdown","34f2d54d":"markdown","aa29f752":"markdown"},"source":{"038a889c":"# Importing Pandas As pd\nimport pandas as pd\n# importing numpy as np\nimport numpy as np\n\n# Reading Data Frame\ndf =  pd.read_csv(\"..\/input\/bike-buyers\/bike_buyers.csv\")\ndf.head(6)","6d5ead83":"# Replacing Marital Status null values With \"No Data\"\ndf['Marital Status'].fillna(\"No Data\", inplace=True)\n\n# Replacing Gender null values  With \"No Data\"\ndf['Gender'].fillna(\"No Data\", inplace=True)\n\n# Replacing Home Owner null values  With \"No Data\"\ndf['Home Owner'].fillna(\"No Data\", inplace=True)","a2c57182":"# Importing Matplotlib\nimport matplotlib.pyplot as plt\n# Import Seaborn as sns\nimport seaborn as sns\n\n# Sizing The Plot Size\nsns.set(rc={'figure.figsize':(20,15)})\n\n# Using Matplotlib for Subploting\nfig, axes = plt.subplots(3,1)\n\n# Subploting Data Showing Income According to Region and Professin \nsns.kdeplot(data = df[df['Region'] == 'Europe'], x = 'Income', hue = 'Occupation', ax = axes[0])\nsns.kdeplot(data = df[df['Region']=='North America'],x='Income', hue='Occupation', ax=axes[1])\nsns.kdeplot(data = df[df['Region']=='Pacific'],x='Income', hue='Occupation', ax=axes[2])","caec000e":"# Finding Income Null in Europe\ndf[pd.isnull(df['Income']) & (df['Region'] == 'Europe')]","5d15d78b":"# Finding The Median Value Of Manual Occupation in Europe(ei=Europe income).\nei = df[(df['Region'] == 'Europe') & (df['Occupation'] == 'Manual')]['Income'].median()\n\n# Making The Income Null in Europe a list(einl=europe income null value list).\neinl = df[pd.isnull(df['Income']) & (df['Region'] == 'Europe')].index\n\n# Repalcing The Europe Income Null Value with median\nfor item in einl:\n    df.iloc[item, df.columns.get_loc('Income')] = ei","44e5aed0":"# Finding Income Null in North America\ndf[(pd.isnull(df['Income'])) & (df['Region']=='North America')]","ab902988":"# Finding The Mode Value Of Income Accourding to Bachelor Occupation in North America\n# (nai=north america income).\nnai = df[(df['Region'] == 'North America') & (df['Occupation'] == 'Professional')]['Income'].mode()\n\n#  Repalcing The North America Income Null Value with mode\ndf.iloc[509, df.columns.get_loc('Income')] = nai","0a63181c":"# Finding Income Null in Pacific\ndf[(pd.isnull(df['Income'])) & (df['Region']=='Pacific')]\n\n# Finding The Mode Value Of Income Accourding to Clerical & Skilled Manual Occupation in Pacific\n# (pi=Pacific income).\npi = df[(df['Region'] == 'Pacific') & (df['Occupation'] == 'Clerical')]['Income'].mode()\npi2 = df[(df['Region'] == 'Pacific') & (df['Occupation'] == 'Skilled Manual')]['Income'].mode()\n\n#  Repalcing The Pacific Income Null Value with mode\ndf.iloc[301, df.columns.get_loc('Income')] = pi\ndf.iloc[441, df.columns.get_loc('Income')] = pi2","14a5924d":"# Finding Children Null in Data\ndf[pd.isnull(df['Children'])]","cea11ca8":"# Finding Effect On children Data by Region and Home Owner Ship.\nsns.lineplot(data=df, y='Children', x='Region', hue = 'Home Owner')","c179b22d":"# Finding The Mode Value Of Having Children Accourding to Region and Homer Owner in North America\n# (cna= Children north america).\ncna = df[(df['Region'] == 'North America') & (df['Home Owner'] == 'Yes')]['Children'].mode()\ncna2 = df[(df['Region'] == 'North America') & (df['Home Owner'] == 'No')]['Children'].mode()\n\n# Making The Children Null in North America a list(cnnal=Children North America value list).\ncnnal = df[pd.isnull(df['Children']) & (df['Region'] == 'North America') & (df['Home Owner'] == 'Yes')].index\n\n#  Repalcing The Children Null Value in North America with mode with home.\nfor item in cnnal:\n    df.iloc[item, df.columns.get_loc('Children')] = cna\n# Repalcing The Children Null Value in North America with mode with out home.\ndf.iloc[688, df.columns.get_loc('Children')] = cna2\ndf.iloc[960, df.columns.get_loc('Children')] = cna2\n\n# Finding The Mode Value Of Having Children Accourding to Region and Homer Owner in europe.\n# (ce= Children Europe).\nce = df[df['Region'] == 'Europe'] ['Children'].mode()\n\n#  Repalcing The Having Children Null Value with mode.\ndf.iloc[117, df.columns.get_loc('Children')] = ce\ndf.iloc[217, df.columns.get_loc('Children')] = ce\n\n# Finding The Mode Value Of Having Children Accourding to in Pacific\n# (cp= Children Pacific).\ncp = df[(df['Region'] == 'Pacific') & (df['Age'] == 34)]['Children'].mode()\n\n# Replaceing data \ndf.iloc[386, df.columns.get_loc('Children')] = cp","051a8b40":"# Finding Effect On Age Data by Region and Home Owner Ship.\nsns.lineplot(data=df, y='Cars', x='Region', hue = 'Home Owner')","60764f8d":"# Finding The Mode Value Of Car Accourding to Region and Homer Owner in Europe\n# (care= Car In Europe).\ncare = df[(df['Region'] == 'Europe') & (df['Home Owner'] == 'Yes')]['Cars'].mode()\n\n# Making The Car Null in Europe a list(carenl=Cars europe null list).\ncarenl = df[pd.isnull(df['Cars']) & (df['Region'] == 'Europe') & (df['Home Owner'] == 'Yes')].index\n\n#  Repalcing The Car Null in Europe with mode with home.\nfor item in carenl:\n    df.iloc[item, df.columns.get_loc('Cars')] = care\n\n## Finding The Mode Value Of Car Accourding to Region and Homer Owner in North America.\n# (carna= Car In North America).\ncarna = df[(df['Region'] == 'North America') & (df['Home Owner'] == 'Yes')]['Cars'].mode()\n\n# Repalcing The Car Null in North America with mode with home.\ndf.iloc[511, df.columns.get_loc('Cars')] = carna\ndf.iloc[933, df.columns.get_loc('Cars')] = carna\n\n## Finding The Mode Value Of Car Accourding to Region and Homer Owner in North America.\n# (carna2 = Car In North America).\ncarna2 = df[(df['Region'] == 'North America') & (df['Home Owner'] == 'No')]['Cars'].mode()\n\n# Repalcing The Car Null in North America with mode with home.\ndf.iloc[561, df.columns.get_loc('Cars')] = carna2\ndf.iloc[615, df.columns.get_loc('Cars')] = carna2","b019fa5e":"#  Finding Age Null in Data\ndf[pd.isnull(df['Age'])]","bc4a3148":"# Finding Effect On Age Data by Region and Home Owner Ship and Purchased Bike.\nsns.lineplot(data=df, y='Age', x='Region', hue = 'Home Owner')","e11ce5ae":"# Finding The Mode Value Of Age Accourding to Region,Purchased Bike and Homer Owner in Europe\n# (ae= age In Europe).\nae = df[(df['Region'] == 'Europe') & (df['Home Owner'] == 'Yes') & (df['Purchased Bike'] == 'Yes')]['Age'].mode()\nae2 = df[(df['Region'] == 'Europe') & (df['Home Owner'] == 'Yes') & (df['Purchased Bike'] == 'No')]['Age'].mode()\n\n# Repalcing The Age Null in Europe with mode.\ndf.iloc[9, df.columns.get_loc('Age')] = ae\ndf.iloc[98, df.columns.get_loc('Age')] = ae\ndf.iloc[225, df.columns.get_loc('Age')] = ae2\n\n## Finding The Mode Value Of Age Accourding to Region and Homer Owner in Pacific.\n# (ap= Age In Pacific).\nap = df[(df['Region'] == 'Pacific') & (df['Home Owner'] == 'Yes') & (df['Purchased Bike'] == 'No')]['Age'].mode()\n\n# Repalcing The Age Null in Pacificwith mode.\ndf.iloc[371, df.columns.get_loc('Age')] = ap\n\n# Finding The Mode Value Of Age Accourding to Region,Purchased Bike and Homer Owner in Europe\n# (ana= age In North America).\nana = df[(df['Region'] == 'North America') & (df['Home Owner'] == 'Yes') & (df['Purchased Bike'] == 'Yes')]['Age'].mode()\nana2 = df[(df['Region'] == 'North America') & (df['Home Owner'] == 'No') & (df['Purchased Bike'] == 'No')]['Age'].mode()\n\n# Repalcing The Age Null in North America with mode.\ndf.iloc[554, df.columns.get_loc('Age')] = ana\ndf.iloc[986, df.columns.get_loc('Age')] = ana\ndf.iloc[688, df.columns.get_loc('Age')] = ana2\ndf.iloc[770, df.columns.get_loc('Age')] = ana2","4abdd548":"# Reading The Info About The DataSet\ndf.info()","b181b6a9":"# Showing The Income And Purchased Bike Relation In Histplot.\nsns.histplot(data=df , x=\"Income\", hue=\"Purchased Bike\")","1d9e3bba":"# Showing The Income And Purchased Bike Relation In Boxplot\nsns.boxplot(data=df, x='Income', y='Purchased Bike')","cc59b747":"# Showing The Income And Purchased Bike Relation In Lineplot\nsns.lineplot(data=df, x=\"Income\", y=\"Purchased Bike\")","18da870d":"# Making a Dataset Of Bike Purchased People\nxx = df[(df['Purchased Bike'] == 'Yes')]\n# Making a Dataset Of Bike Purchased People's Income\nxxx = xx['Income']\n# Showing Bike Purchased People's Income\nsns.displot(data=df, x= xxx, kind='kde', fill=True, height=8, color='r')","fc1bdeff":"# Showing The Age And Purchased Bike Relation.\nsns.histplot(data=df , x=\"Age\", hue=\"Purchased Bike\")","581eac3b":"# Showing The Age And Purchased Bike Relation In Boxplot\nsns.boxplot(data=df, x='Age', y='Purchased Bike')","bf8c5b56":"# Making a Dataset Of Bike Purchased People's Age\naaa = xx['Age']\n# Showing Bike Purchased People's Age\nsns.displot(data=df, x=aaa, kind='kde', fill=True, height=8, color='g')","cbbceb06":"# Showing The Children And Purchased Bike Relation.\nsns.histplot(data=df , x=\"Children\", hue=\"Purchased Bike\")","b09fe524":"# Showing The Children And Purchased Bike Relation In Boxplot\nsns.boxplot(data=df, x='Children', y='Purchased Bike')","4e8c6c93":"# Making a Dataset Of Bike Purchased People's Children\nccc = xx['Children']\n# Showing Bike Purchased People's Age\nsns.displot(data=df, x=ccc, kind='kde', fill=True, height=8, color='b')","6b7c7cb0":"# Showing The Marital Status And Purchased Bike Relation.\nsns.histplot(data=df , x=\"Marital Status\", hue=\"Purchased Bike\")","dfb6f07a":"# Showing The Gender And Purchased Bike Relation.\nsns.histplot(data=df , x=\"Gender\", hue=\"Purchased Bike\")","f8172a6f":"# Showing The Education And Purchased Bike Relation.\nsns.histplot(data=df , x=\"Education\", hue=\"Purchased Bike\")","a0070d2e":"# Showing The Occupation And Purchased Bike Relation.\nsns.histplot(data=df , x=\"Occupation\", hue=\"Purchased Bike\")","070b3127":"# Showing The Home Owner And Purchased Bike Relation.\nsns.histplot(data=df , x=\"Home Owner\", hue=\"Purchased Bike\")","f47ee790":"# Showing The Commute Distance And Purchased Bike Relation.\nsns.histplot(data=df , x=\"Commute Distance\", hue=\"Purchased Bike\")","09e84a5d":"# Showing The Region And Purchased Bike Relation.\nsns.histplot(data=df , x=\"Region\", hue=\"Purchased Bike\")","cf218bf4":"# Making categorical dats Details\ncategorical = [var for var in df.columns if df[var].dtype=='O']\nprint('There are {} categorical variables'.format(len(categorical)))\nprint('The categorical variables are :', categorical)\n\n# Viewing Frequency Counts of Values in Categorical Variables\nfor var in categorical: \n    print(df[var].value_counts())\n    print()\n\n# Check for cardinality in categorical variables\nfor var in categorical:\n    print(var, ' contains ', len(df[var].unique()), ' labels')","d7a0e894":"# Dropin The ID column Cause it's Have No Use.\n# Using Drop Function To Drope Column axis 1 for column.\ndf = df.drop(columns=[\"ID\"], axis=1, inplace=False)\ndf","79c61008":"# replacing Gender With 1 and 0 data.\n# Taking a variables.\na = {\"Married\" :0, \"Single\" :1, \"No Data\" :2}\nb = {\"Male\" :1, \"Female\" :0, \"No Data\" :2}\nc = {\"Bachelors\" :0, \"Partial College\" :1,\"High School\" :2, \"Graduate Degree\" :3, \"Partial High School\" :4}\nd = {\"Professional\" :0, \"Skilled Manual\" :1,\"Clerical\" :2, \"Management\" :3, \"Manual\" :4}\ne = {\"Yes\" :1, \"No\" :0, \"No Data\" :2}\nf = {\"0-1 Miles\" :0, \"5-10 Miles\" :1,\"1-2 Miles\" :2, \"2-5 Miles\" :3, \"10+ Miles\" :4}\ng = {\"North America\" :0, \"Europe\" :1, \"Pacific\" :2}\nh = {\"Yes\" :1, \"No\" :0}\n# Replacing the the values In Dataframe.\ndf = df.replace({'Marital Status': a})\ndf = df.replace({'Gender': b})\ndf = df.replace({'Education': c})\ndf = df.replace({'Occupation': d})\ndf = df.replace({'Home Owner': e})\ndf = df.replace({'Commute Distance': f})\ndf = df.replace({'Region': g})\ndf = df.replace({'Purchased Bike': h})\n# Printing Dataframe\ndf","c60982ca":"# Sizing thr heatmap by using matplotlib.pyplot.\nplt.figure(figsize=(12,10))\n# Calculating Co-relation of the dataframe by corr function.\ncor = df.corr()\n# Ploting heatmap.\nsns.heatmap(cor, annot=True, cmap=plt.cm.CMRmap_r)\nplt.show()","f4d533c4":"# Taking All the features that effects Purchased are taken into new variable.\nfeature_cols=['Marital Status', 'Gender', 'Income', 'Children','Education','Occupation','Home Owner', 'Cars', 'Commute Distance', 'Region', 'Age']\n# X Variable is the features that effects Purchased.\nX = df[feature_cols]\n# Y Variable is the Purchased.\ny = df['Purchased Bike']","52f73ff9":"# From sklearn.model_selection Importing train_test_split\nfrom sklearn.model_selection import train_test_split\n# Running The train_test_split function on (X,y and taking 0.1[10%] data as test data)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1)\n# Printing testing dataframe\nX_test","3b4bb4ad":"# From Sklearn Importing Tree Classifier.\nfrom sklearn import tree\n# taking tr Variable.\ntr = tree.DecisionTreeClassifier()\n# Fitting Tree Classifier in The Train Dataset.\ntr.fit(X_train, y_train)\n# Predicting Test Dataset.\ny_pred = tr.predict(X_test)\ny_pred","f1073677":"# From sklearn importing metrics.\nfrom sklearn import metrics\n# Calculating Accuracy Of the Model and Printing The Accuracy.\nprint(\"Accuracy: \", metrics.accuracy_score(y_test, y_pred))\n\n# From sklearn.metrics importing confusion_matrix To Calculate Matrik and Printing It.\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, y_pred))","ceaf0cbd":"#from sklearn.metrics import classification_report\nfrom sklearn.metrics import classification_report\n# Printing classification_report\nprint(classification_report(y_test, y_pred))","f8365cfa":"# From Sklearn Importing RandomForestClassifier.\nfrom sklearn.ensemble import RandomForestClassifier\n# taking tr Variable.\nrf = RandomForestClassifier(n_estimators = 100)\n# Fitting RandomForestClassifier in The Train Dataset.\nrf.fit(X_train, y_train)\n# Predicting Test Dataset.\ny_pred = rf.predict(X_test)\ny_pred","3d8982bc":"# From sklearn importing metrics.\nfrom sklearn import metrics\n# Calculating Accuracy Of the Model and Printing The Accuracy.\nprint(\"Accuracy: \", metrics.accuracy_score(y_test, y_pred))\n\n# From sklearn.metrics importing confusion_matrix To Calculate Matrik and Printing It.\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, y_pred))","57b5debb":"#from sklearn.metrics import classification_report\nfrom sklearn.metrics import classification_report\n# Printing classification_report\nprint(classification_report(y_test, y_pred))","56c7954c":"# From Sklearn Importing GaussianNB\nfrom sklearn.naive_bayes import GaussianNB\n# taking tr Variable.\ngnb = GaussianNB()\n# Fitting RandomForestClassifier in The Train Dataset.\ngnb.fit(X_train, y_train)\n\n# making predictions on the testing set\ny_pred = gnb.predict(X_test)\ny_pred\n","11cf620b":"# From sklearn importing metrics.\nfrom sklearn import metrics\n# Calculating Accuracy Of the Model and Printing The Accuracy.\nprint(\"Accuracy: \", metrics.accuracy_score(y_test, y_pred))\n\n# From sklearn.metrics importing confusion_matrix To Calculate Matrik and Printing It.\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, y_pred))","19b49648":"#from sklearn.metrics import classification_report\nfrom sklearn.metrics import classification_report\n# Printing classification_report\nprint(classification_report(y_test, y_pred))","a2d5c9a7":"# Normalizing Data\n# Importing reprocessing from sklaern \nfrom sklearn import preprocessing\n# Preprocessing X_train\nX_train = preprocessing.scale(X_train)\n# Preprocessing X_test\nX_test = preprocessing.scale(X_test)","697c6771":"# From Sklearn Importing SVC.\nfrom sklearn.svm import SVC\n# taking tr Variable.\nsvm = SVC(kernel='linear')\n# Fitting RandomForestClassifier in The Train Dataset.\nsvm.fit(X_train, y_train)\n# Predicting Test Dataset.\ny_pred = svm.predict(X_test)\ny_pred","d478455a":"# From sklearn importing metrics.\nfrom sklearn import metrics\n# Calculating Accuracy Of the Model and Printing The Accuracy.\nprint(\"Accuracy: \", metrics.accuracy_score(y_test, y_pred))\n\n# From sklearn.metrics importing confusion_matrix To Calculate Matrik and Printing It.\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, y_pred))","798f2491":"#from sklearn.metrics import classification_report\nfrom sklearn.metrics import classification_report\n# Printing classification_report\nprint(classification_report(y_test, y_pred))","434d0602":"**Using Tree Classifier.**","77aa4d19":"# ****Occupation And Purchased Bike Relation","39a9242a":"# ****Education And Purchased Bike Relation.","10c46531":"**Using Naive Bayes.**","aed6fbef":"#  ****Marital Status And Purchased Bike Relation.","b0d77029":"# ****Income And Purchased Bike Relation","048f4cfc":"**Various Types Of Machine Learning Models Building.**","4589cc16":"# ****Region And Purchased Bike Relation","7e09ba8e":"# ****Children And Purchased Bike Relation.","e8b3fcb1":"# ****Home Owner And Purchased Bike Relation","6100c230":"**Using RandomForestClassifier.**","a1f94610":"**Using Support Vector Machine(SVM).**","633ac6fa":"# ****Gender And Purchased Bike Relation.","34f2d54d":"# ****Age And Purchased Bike Relation.","aa29f752":"# ****Commute Distance And Purchased Bike Relation"}}