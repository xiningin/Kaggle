{"cell_type":{"507e4648":"code","347cf660":"code","31521c29":"code","c173262c":"code","5589a5ca":"code","8a76f7d5":"code","1c8fa6fc":"code","bd74fab3":"code","bbe7991c":"code","11228cd0":"code","d69bd5d2":"code","321ecb5e":"code","d3947b8d":"code","99835735":"code","9c070870":"code","caca52f2":"code","0a9b5939":"code","8b145abb":"code","6c2f5834":"markdown","87a4e26e":"markdown"},"source":{"507e4648":"import pandas as pd\nHeart_failure_data = pd.read_csv('..\/input\/heart-failure-clinical-records-dataset\/Heart_failure_clinical_records_dataset.csv')\nHeart_failure_data.keys()\n","347cf660":"Heart_failure_data","31521c29":"X, y = Heart_failure_data.loc[:, Heart_failure_data.columns!= 'DEATH_EVENT'],Heart_failure_data.DEATH_EVENT\nX.shape, y.shape\n","c173262c":"from sklearn.model_selection import train_test_split\nXtrain,Xtest,ytrain,ytest = train_test_split(X, y ,test_size = 0.25,shuffle= True)\nXtrain.shape, Xtest.shape\n","5589a5ca":"from sklearn.linear_model import LogisticRegression\nmodel_log = LogisticRegression(solver='liblinear')\nmodel_log.fit(Xtrain,ytrain)\nmodel_log.score(Xtest,ytest)\n\n","8a76f7d5":"from sklearn.linear_model import LogisticRegression\nimport numpy as np\nimport matplotlib.pyplot as plt\narr = 5*(np.arange(10))\ntest_score = []\ntrain_score = []\nfor i in arr:\n model_log = LogisticRegression(solver='liblinear',max_iter=i)\n model_log.fit(Xtrain,ytrain)\n test_score.append(model_log.score(Xtest,ytest))\n train_score.append(model_log.score(Xtrain,ytrain))\n\nplt.xlabel('Iterations')\nplt.ylabel('Accuracy')\nplt.title('Logistic Regression Accuracy Graph')\nplt.plot(arr,train_score,label= 'Training Accuracy')\nplt.plot(arr,test_score,label= 'Testing Accuracy')\nplt.legend(loc='upper left')","1c8fa6fc":"Heart_failure_data.keys()\n","bd74fab3":"from sklearn.preprocessing import MinMaxScaler\nmin_max = MinMaxScaler()\nXtrain['age'] = min_max.fit_transform(Xtrain[['age']])\nXtrain['creatinine_phosphokinase'] = min_max.fit_transform(Xtrain[['creatinine_phosphokinase']])\nXtrain['ejection_fraction'] = min_max.fit_transform(Xtrain[['ejection_fraction']])\nXtrain['platelets'] = min_max.fit_transform(Xtrain[['platelets']])\nXtrain['serum_creatinine'] = min_max.fit_transform(Xtrain[['serum_creatinine']])\nXtrain['serum_sodium'] = min_max.fit_transform(Xtrain[['serum_sodium']])\nXtrain['time'] = min_max.fit_transform(Xtrain[['time']])\nXtest['age'] = min_max.fit_transform(Xtest[['age']])\nXtest['creatinine_phosphokinase'] = min_max.fit_transform(Xtest[['creatinine_phosphokinase']])\nXtest['ejection_fraction'] = min_max.fit_transform(Xtest[['ejection_fraction']])\nXtest['platelets'] = min_max.fit_transform(Xtest[['platelets']])\nXtest['serum_creatinine'] = min_max.fit_transform(Xtest[['serum_creatinine']])\nXtest['serum_sodium'] = min_max.fit_transform(Xtest[['serum_sodium']])\nXtest['time'] = min_max.fit_transform(Xtest[['time']])","bbe7991c":"Xtrain.head()","11228cd0":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\nytrain= encoder.fit_transform(ytrain)\nytest= encoder.fit_transform(ytest)\nytrain,ytest\n","d69bd5d2":"from sklearn.linear_model import LogisticRegression\nmodel_log = LogisticRegression(solver='liblinear')\nmodel_log.fit(Xtrain,ytrain)\nmodel_log.score(Xtest,ytest)","321ecb5e":"from sklearn.metrics import plot_confusion_matrix\nplot_confusion_matrix(model_log,Xtest,ytest)","d3947b8d":"result1 = model_log.predict(Xtest)\nresult1","99835735":"from sklearn.metrics import classification_report\nprint(classification_report(ytest,result1))\n","9c070870":"from sklearn.naive_bayes import GaussianNB\nmodel_NB = GaussianNB()\nmodel_NB.fit(Xtrain,ytrain)\nmodel_NB.score(Xtest,ytest)\n","caca52f2":"from sklearn.metrics import plot_confusion_matrix\nplot_confusion_matrix(model_NB,Xtest,ytest)\n","0a9b5939":"result2 = model_NB.predict(Xtest)\nresult2\n","8b145abb":"from sklearn.metrics import classification_report\nprint(classification_report(ytest,result2))","6c2f5834":"**LAB 07**\n**Choose any dataset from Kaggle or any other source and apply following tasks on them**","87a4e26e":"**Separate data and labels and split them into train and test data (If data is not split)**"}}