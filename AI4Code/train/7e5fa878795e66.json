{"cell_type":{"25228ca0":"code","9247f555":"code","871a0c3a":"code","073e7dbe":"code","34f6b4f7":"code","4649afb2":"code","27a1a1de":"code","19d3d74b":"code","57cdc587":"code","52e78d47":"code","2cf3c05f":"code","42794c68":"code","aa27a883":"code","64640d16":"code","5b072a69":"code","1cd4f3f3":"code","1f70a6ff":"code","de71054f":"code","c463ae83":"code","2d9455ad":"code","4c237a14":"code","bcd5cda0":"code","55a5bcd2":"code","03368349":"code","a0ee9c8b":"code","1009d891":"code","9d1e2c83":"code","331b649f":"code","e59420d3":"code","559ef74a":"code","2a3723c8":"code","26d5ec17":"code","675e8f8d":"code","937f0764":"code","a6b88ded":"code","ee59d40a":"code","c41b4d59":"code","e6f938db":"code","a5c1e072":"code","b3e094b9":"code","1a0ee2ea":"code","a327edcf":"code","135f153d":"code","faab38a8":"code","ee092592":"code","20011224":"code","9939faee":"code","ccdd2485":"code","e6b3b403":"code","1f036f90":"code","21b81d08":"markdown","03bf2f5f":"markdown","1cd39c8b":"markdown","ba95c3d4":"markdown","f85fa829":"markdown","5a3e885e":"markdown","38d7c27d":"markdown","7f195d3e":"markdown","b3333d46":"markdown","38b3cc24":"markdown","c10cc26b":"markdown","2d56cae0":"markdown","e466f3e2":"markdown","88eff51a":"markdown","1dfddd72":"markdown","90be31d4":"markdown","1c4e1e49":"markdown","cdc3e1ca":"markdown","a8f07a27":"markdown","6c6ff9ea":"markdown","5bbf6173":"markdown"},"source":{"25228ca0":"from IPython.core.display import HTML\nHTML(\"\"\"\n<style>\n.output_png {\n    display: table-cell;\n    text-align: center;\n    vertical-align: middle;\n}\n<\/style>\n\"\"\")","9247f555":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","871a0c3a":"data= pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndata.head()","073e7dbe":"%matplotlib inline\nimport matplotlib.pyplot as plt\ndata.hist(bins=50,figsize=(12,12))\nplt.show()\n","34f6b4f7":"data.describe()","4649afb2":"import seaborn as sns\nf, ax = plt.subplots(figsize=(12,12))\nsns.heatmap(data.corr(),annot=True, linewidths=.5, ax=ax)\nplt.show()","27a1a1de":"import matplotlib.pyplot as plt\n\nlabels = 'Alive', 'Died'\nsizes = [len(data[data['DEATH_EVENT']==0]),len(data[data['DEATH_EVENT']==1])]\nexplode = (0, 0.04) \n\nfig1, ax1 = plt.subplots(figsize=(8,8))\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, colors=('c','r'), startangle=90)\nax1.set_title(\"All Death Events\")\nax1.axis('equal') \n\nplt.show()","19d3d74b":"ef_normal= data[data['ejection_fraction']>=55]\nef_mild= data[data['ejection_fraction']>=35][data['ejection_fraction']<55]\nef_midS=data[data['ejection_fraction']<35][data['ejection_fraction']>20]\nef_severe= data[data['ejection_fraction']<=20]","57cdc587":"\nexplode = (0, 0.05)\nlabels = 'Alive', 'Died'\n\ntypes= [ef_normal,ef_mild,ef_midS,ef_severe]\nfig, (ax1, ax2,ax3,ax4) = plt.subplots(1, 4,figsize=(15,7))\nax= (ax1, ax2,ax3,ax4)\nfig.suptitle('Visualize Ejection Fraction virsus Death Events',fontsize=20)\ntitles= ['Normal Ejection Fraction', 'Mild Ejection Fraction', 'Mid Severe Ejection Fraction','Severe Ejection Fraction']\n\n\n\nfor ax, typ,title in zip(ax,types,titles ):\n    \n    sizes = [len(typ[typ['DEATH_EVENT']==0]),len(typ[typ['DEATH_EVENT']==1])]\n    wedges, texts,autopct = ax.pie(sizes, autopct='%1.1f%%', explode=explode,colors=['c','r'], labels=labels)\n    ax.set_title(title)\n    \n    ax.axis('equal') \nplt.show()","52e78d47":"data['ejection_fraction_c'] = pd.cut(data['ejection_fraction'], bins=[0,20,30,55,np.inf], labels=[3,2,1,0])","2cf3c05f":"plt.figure(figsize=(10,8))\nplt.bar([0,1,2,3], [len(ef_normal),len(ef_mild),len(ef_midS),len(ef_severe)], color='g')\nplt.xticks([0,1,2,3], ['ef_normal','ef_mild','ef_midS','ef_severe'])\nplt.title(\"Data Distribution\")\nplt.grid()","42794c68":"normal_cpk= data[data['creatinine_phosphokinase']<120]\nabnormal_cpk= data[data['creatinine_phosphokinase']>120]","aa27a883":"plt.figure(figsize=(8,6))\nplt.bar([0,1], [len(normal_cpk),len(abnormal_cpk)], color='g')\nplt.xticks([0,1], ['normal_cpk','abnormal_cpk'])\nplt.title(\"CPK Data Distribution\")\nplt.grid()","64640d16":"import matplotlib.pyplot as plt\n\nlabels = 'normal-alive', 'normal-died', 'abnormal-alive', 'abnormal-died'\nsizes = [len(normal_cpk[normal_cpk['DEATH_EVENT']==0]),len(normal_cpk[normal_cpk['DEATH_EVENT']==1]),\n         len(abnormal_cpk[abnormal_cpk['DEATH_EVENT']==0]),len(abnormal_cpk[abnormal_cpk['DEATH_EVENT']==1])]\nexplode = (0.05, 0.05,0.05,0.05) \n\nfig1, ax1 = plt.subplots(figsize=(8,8))\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.set_title(\"\")\nax1.axis('equal') \n\nplt.show()","5b072a69":"ideal= data[data['platelets']>=150000 ][data['platelets']<=400000 ]\nthrombocytopenia= data[data['platelets']<150000 ]\nthrombocytosis= data[data['platelets']>400000]","1cd4f3f3":"plt.figure(figsize=(8,6))\nplt.bar([0,1,2], [len(ideal),len(thrombocytopenia), len(thrombocytosis)], color=('c','r','y'))\nplt.xticks([0,1,2], ['ideal','thrombocytopenia', 'thrombocytosis'])\nplt.title(\"Platelets Data Distribution\")\nplt.grid()","1f70a6ff":"\nlabels = [['ideal-alive', 'ideal-died'],['cytopenia-alive', 'cytopenia-died'],['cytosis-alive', 'cytosis-died']]\nexplode = (0, 0.05)\ntypes= [ideal,thrombocytopenia,thrombocytosis]\nax= (ax1, ax2,ax3)\nfig, ax = plt.subplots(1, 3,figsize=(15,7))\nfig.suptitle('Visualize Counts virsus Death Events',fontsize=20)\ntitles= ['Ideal platelets count', 'Low platelets count', 'High platelets count']\n\n\n\nfor ax, label, typ,title in zip(ax, labels,types,titles ):\n    \n    sizes = [len(typ[typ['DEATH_EVENT']==0]),len(typ[typ['DEATH_EVENT']==1])]\n    wedges, texts,autopct = ax.pie(sizes, autopct='%1.1f%%', explode=explode,colors=['c','r'])\n    ax.set_title(title)\n\n    ax.legend(wedges, label,\n          title=\"Death events\",\n          loc=\"lower center\",\n          bbox_to_anchor=(0.75, 0, 0, 0.75))\n    \n    \n    ax.axis('equal') \nplt.show()","de71054f":"normal_sc_men= data[data['serum_creatinine']<=1.3][data['sex']==1]\nabnormal_sc_men= data[data['serum_creatinine']>1.3][data['sex']==1]\n\nnormal_sc_women= data[data['serum_creatinine']<=1.1][data['sex']==0]\nabnormal_sc_women= data[data['serum_creatinine']>1.1][data['sex']==0]","c463ae83":"plt.figure(figsize=(8,6))\nplt.bar([0,0.3,1,1.3], [len(normal_sc_men),len(abnormal_sc_men),len(normal_sc_women),len(abnormal_sc_women)],width=0.1,\n        color=('b','b','hotpink','hotpink'))\nplt.xticks([0,0.3,1,1.3], ['normal_sc_men','abnormal_sc_men', 'normal_sc_women','abnormal_sc_women'])\nplt.title(\"SC levels in Men vs Women\")\nplt.grid()","2d9455ad":"\nlabels = [['normal-men-alive', 'normal-men-died'],['abnormal-men-alive', 'abnormal-men-died'],\n          ['normal-women-alive', 'normal-women-died'],['abnormal-women-alive', 'abnormal-women-died']]\nexplode = (0, 0.05)\ntypes= [normal_sc_men,abnormal_sc_men,normal_sc_women, abnormal_sc_women]\n\nfig, (ax1, ax2,ax3,ax4) = plt.subplots(1, 4,figsize=(15,7))\nax= (ax1, ax2,ax3,ax4)\nfig.suptitle('Visualize SC Levels versus Death Events in Men and Women',fontsize=20)\ntitles= ['Men Normal Level', 'Men Abnormal Level', 'Women Normal Level', 'Women Abnormal Level']\n\n\n\nfor ax, label, typ,title in zip(ax, labels,types,titles ):\n    \n    sizes = [len(typ[typ['DEATH_EVENT']==0]),len(typ[typ['DEATH_EVENT']==1])]\n    wedges, texts,autopct = ax.pie(sizes, autopct='%1.1f%%', explode=explode,colors=['c','r'])\n    ax.set_title(title)\n\n    ax.legend(wedges, label,\n          title=\"Death events\",\n          loc=\"lower center\",\n          bbox_to_anchor=(0.6, 0, 0, 0.6))\n    \n    \n    ax.axis('equal') \nplt.show()","4c237a14":"print('serum_sodium mean:', round(data['serum_sodium'].mean()))\nprint('serum_sodium std:', round(data['serum_sodium'].std()))\nprint('serum_sodium min:', round(data['serum_sodium'].min()))\nprint('serum_sodium max:', round(data['serum_sodium'].max()))\n","bcd5cda0":"ss_normal = data[data['serum_sodium']>=135][data['serum_sodium']<=145]\nss_hypo= data[data['serum_sodium']<135]\nss_hyper= data[data['serum_sodium']>145]","55a5bcd2":"plt.figure(figsize=(8,6))\nplt.bar([0,1,2], [len(ss_normal),len(ss_hypo),len(ss_hyper)],\n        color='g')\nplt.xticks([0,1,2], ['normal','hypo', 'hyper','abnormal_sc_women'])\nplt.title(\"serum_sodium levels\")\nplt.grid()","03368349":"explode = (0, 0.05)\nlabels = 'Alive', 'Died'\n\ntypes= [ss_normal,ss_hypo,ss_hyper]\nfig, (ax1, ax2,ax3) = plt.subplots(1, 3,figsize=(15,7))\nax= (ax1, ax2,ax3,ax4)\nfig.suptitle('Serum Sodium Level virsus Death Events',fontsize=20)\ntitles= ['Normal', 'Hyponatremia', 'Hypernatremia']\n\n\nfor ax, typ,title in zip(ax,types,titles ):\n    \n    sizes = [len(typ[typ['DEATH_EVENT']==0]),len(typ[typ['DEATH_EVENT']==1])]\n    wedges, texts,autopct = ax.pie(sizes, autopct='%1.1f%%', explode=explode,colors=['c','r'], labels=labels)\n    ax.set_title(title)\n    \n    ax.axis('equal') \nplt.show()","a0ee9c8b":"age= data['age']","1009d891":"print('Ages mean:', round(age.mean()))\nprint('Ages std:', round(age.std()))\nprint('Ages min:', round(age.min()))\nprint('Ages max:', round(age.max()))","9d1e2c83":"import numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\n\n\nmu, std = norm.fit(age)\nplt.figure(figsize=(12,7))\nplt.hist(age, bins=25, density=True, alpha=0.6, color='g')\n\nxmin, xmax = plt.xlim()\nx = np.linspace(xmin, xmax, 100)\np = norm.pdf(x, mu, std)\nplt.plot(x, p, 'k', linewidth=2)\ntitle = \"Age distribution with: mu = %.2f,  std = %.2f\" % (mu, std)\nplt.title(title)\nplt.grid()\nplt.show()                ","331b649f":"death_age= data[data['DEATH_EVENT']==1]['age']\nmu, std = norm.fit(death_age)\nplt.figure(figsize=(12,7))\nplt.hist(death_age, bins=25, density=True, alpha=0.6, color='r')\n\nxmin, xmax = plt.xlim()\nx = np.linspace(xmin, xmax, 100)\np = norm.pdf(x, mu, std)\nplt.plot(x, p, 'k', linewidth=2)\ntitle = \"age-based distribution of death cases with: mu = %.2f,  std = %.2f\" % (mu, std)\nplt.title(title)\nplt.grid()\nplt.show()   ","e59420d3":"age_1= data[data['age']>30][data['age']<=50]\nage_2= data[data['age']>50][data['age']<=60]\nage_3= data[data['age']>60][data['age']<=70]\nage_4= data[data['age']>70]","559ef74a":"plt.figure(figsize=(8,6))\nplt.bar([0,1,2,3], [len(age_1),len(age_2),len(age_3),len(age_4)], color='g')\nplt.xticks([0,1,2,3], ['Group1','Group2', 'Group3','Group4'])\nplt.title(\"Age Groups Data Distribution\")\nplt.grid()","2a3723c8":"\nexplode = (0, 0.05)\nlabels = 'Alive', 'Died'\n\ntypes= [age_1,age_2,age_3,age_4]\nfig, (ax1, ax2,ax3,ax4) = plt.subplots(1, 4,figsize=(14,7))\nax= (ax1, ax2,ax3,ax4)\nfig.suptitle('Visualize Age virsus Death Events',fontsize=20)\ntitles= ['Group1 (40-50)', 'Group2 (50-60)', 'Group3 (60-70)','Group4 (>70)']\n\n\n\nfor ax, typ,title in zip(ax,types,titles ):\n    \n    sizes = [len(typ[typ['DEATH_EVENT']==0]),len(typ[typ['DEATH_EVENT']==1])]\n    wedges, texts,autopct = ax.pie(sizes, autopct='%1.1f%%', explode=explode,colors=['c','r'], labels=labels)\n    ax.set_title(title)\n    \n    ax.axis('equal') \nplt.show()","26d5ec17":"data['age_c'] = pd.cut(data['age'], bins=[30,50,60,70,np.inf], labels=[0,1,2,3])","675e8f8d":"time = data['time']\nprint('Follow-up time mean:', round(time.mean()))\nprint('Follow-up time std:', round(time.std()))\nprint('Follow-up time min:', round(time.min()))\nprint('Follow-up time max:', round(time.max()))","937f0764":"import numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\ndeath_time= data[data['DEATH_EVENT']==0]['time']\n\nmu, std = norm.fit(death_time)\nplt.figure(figsize=(12,7))\nplt.hist(death_time, bins=25, density=True, alpha=1, color='orange')\n\nxmin, xmax = plt.xlim()\nx = np.linspace(xmin, xmax, 100)\np = norm.pdf(x, mu, std)\ntitle = \"Following-up distribution with: mu = %.2f,  std = %.2f\" % (mu, std)\nplt.title(title)\nplt.grid()\nplt.show()                ","a6b88ded":"time_1= data[data['time']>0][data['time']<=100]\ntime_2= data[data['time']>100][data['time']<=200]\ntime_3= data[data['time']>200]\n\nexplode = (0, 0.05)\nlabels = 'Alive', 'Died'\n\ntypes= [time_1,time_2,time_3,]\nfig, (ax1, ax2,ax3) = plt.subplots(1, 3,figsize=(15,7))\nax= (ax1, ax2,ax3,ax4)\nfig.suptitle('Follow-up times virsus Death Events',fontsize=20)\ntitles= ['Group1 (0-100 time\/year)', 'Group2 (100-200 time\/year)', 'Group3 (>200 time\/year)']\n\n\n\nfor ax, typ,title in zip(ax,types,titles ):\n    \n    sizes = [len(typ[typ['DEATH_EVENT']==0]),len(typ[typ['DEATH_EVENT']==1])]\n    wedges, texts,autopct = ax.pie(sizes, autopct='%1.1f%%', explode=explode,colors=['c','r'], labels=labels)\n    ax.set_title(title)\n    \n    ax.axis('equal') \nplt.show()","ee59d40a":"data['time_c'] = pd.cut(data['time'], bins=[0,100,200,np.inf], labels=[0,1,2])","c41b4d59":"x= data['age']\ny =data['time']\nc= data['DEATH_EVENT']\ngroups = data.groupby('DEATH_EVENT')\nname= 'alive','died'\n\nfig, ax = plt.subplots(figsize=(12,8))\nax.margins(0.05)\nfor name, group in groups:\n    ax.plot(group.age, group.time, marker='x', linestyle='', ms=8, label=name)\nax.grid()\nax.set_xlabel('Age', fontsize=16)\nax.set_ylabel('Time (days\/year)', fontsize=16) \nax.legend(numpoints=1, loc='upper left')\n\nplt.show()","e6f938db":"cat= ['high_blood_pressure','anaemia','diabetes','sex','smoking']\ntypes=[['normal BP','High BP'],['no anaemia','anaemia'],['no diabetes','diabetes'],['Women', 'Men'], ['smoking', 'non-smoking']]\nfor i,c in enumerate(cat):\n    alive = data[data['DEATH_EVENT']==0]\n    died= data[data['DEATH_EVENT']==1]\n    plt.figure(figsize=(8,5))\n    bar1=plt.bar([0,1], alive.groupby(c).count()['age'], width=0.1, color='b', align='center', label=\"alive\")\n    bar2= plt.bar([0+0.1,1+0.1], died.groupby(c).count()['age'], width=0.1, color='r', align='center', label=\"died\")\n    plt.title(c)\n    plt.ylim(0,160)\n    plt.xticks([0,1], types[i])\n    plt.grid()\n    plt.legend()\n\n    hights_odd=[]\n    hights_even=[]\n    for i,rect in enumerate (bar1 + bar2):\n        height = rect.get_height()\n        if (i+1)%2==0:\n            hights_even.append(height)\n        if (i+1)%2!=0:\n            hights_odd.append(height)\n\n    for i,rect in enumerate (bar1 + bar2):\n        height = rect.get_height()\n        if (i+1)%2==0:\n            plt.text(rect.get_x() + rect.get_width()\/2.0, height, '%s' % str(round((height\/sum(hights_even)*100),2))+\"%\", ha='center', va='bottom')\n        if (i+1)%2!=0:\n            plt.text(rect.get_x() + rect.get_width()\/2.0, height, '%s' % str(round((height\/sum(hights_odd))*100,2))+\"%\", ha='center', va='bottom')\n","a5c1e072":"data.count()","b3e094b9":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\n\n\ncat_attribs= ['ejection_fraction_c', 'age_c', 'time_c']\nnum_attribs= ['serum_creatinine','serum_sodium']\n\n\npreprocessing_pipeline = ColumnTransformer([\n        ('std_scaler', StandardScaler(), num_attribs),\n        (\"cat\", OneHotEncoder(), cat_attribs),\n    ])","1a0ee2ea":"from sklearn.model_selection import StratifiedShuffleSplit \nsplit = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\nfor train_index, test_index in split.split(data, data[\"DEATH_EVENT\"]):\n    train = data.loc[train_index]\n    test = data.loc[test_index]\n    \nfeatures= ['ejection_fraction_c', 'age_c', 'time_c','serum_creatinine','serum_sodium']\n","a327edcf":"y_train= train['DEATH_EVENT']\ny_test= test['DEATH_EVENT']\n\nX_train= train[features]\nX_test= test[features]\n\nX_train.index = np.arange(len(X_train))\nX_test.index = np.arange(len(X_test))\n\ny_train.index = np.arange(len(y_train))\ny_test.index = np.arange(len(y_test))","135f153d":"X_train= preprocessing_pipeline.fit_transform(X_train)\nX_test=  preprocessing_pipeline.fit_transform(X_test)","faab38a8":"X_train.shape","ee092592":"from sklearn import svm\n\n#Create a svm Classifier\nclf = svm.SVC(kernel='linear') # Linear Kernel\n\n#Train the model using the training sets\nclf.fit(X_train, y_train)\n\n#Predict the response for test dataset\nsvm_pred = clf.predict(X_test)","20011224":"from sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_score, recall_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.metrics import roc_auc_score\n\nprint(\"Acc:\",accuracy_score(y_test, svm_pred))\nprint(\"Precision:\",precision_score(y_test, svm_pred))\nprint(\"Recall:\",recall_score(y_test, svm_pred))\nprint('f1-score', f1_score(y_test, svm_pred))\nprint('ROC score', roc_auc_score(y_test, svm_pred))","9939faee":"from sklearn.linear_model import LogisticRegression\n\nlogistic_reg = LogisticRegression()\nlogistic_reg.fit(X_train, y_train)\nlogistic_reg_pred = logistic_reg.predict(X_test)\n\nprint(\"Acc:\",accuracy_score(y_test, logistic_reg_pred))\n\nprint(\"Precision:\",precision_score(y_test, logistic_reg_pred))\nprint(\"Recall:\",recall_score(y_test, logistic_reg_pred))\n\nprint('f1-score', f1_score(y_test, logistic_reg_pred))\n\nprint('ROC score', roc_auc_score(y_test, logistic_reg_pred))","ccdd2485":"from lightgbm import LGBMClassifier\n\nmodel = LGBMClassifier(random_state=0)\nmodel.fit(X_train, y_train)\nlgbm_preds = model.predict(X_test)\n\nprint(\"Acc:\",accuracy_score(y_test, lgbm_preds))\n\nprint(\"Precision:\",precision_score(y_test, lgbm_preds))\n\n# Model Recall: what percentage of positive tuples are labelled as such?\nprint(\"Recall:\",recall_score(y_test, lgbm_preds))\n\nprint('f1-score', f1_score(y_test, lgbm_preds))\n\nprint('ROC score', roc_auc_score(y_test, lgbm_preds))","e6b3b403":"import xgboost\nxgb_clf = xgboost.XGBRFClassifier(max_depth=3, random_state=0)\nxgb_clf.fit(X_train,y_train)\nxgb_pred = xgb_clf.predict(X_test)\n\nprint(\"Acc:\",accuracy_score(y_test, xgb_pred))\n\nprint(\"Precision:\",precision_score(y_test, xgb_pred))\n\n# Model Recall: what percentage of positive tuples are labelled as such?\nprint(\"Recall:\",recall_score(y_test, xgb_pred))\n\nprint('f1-score', f1_score(y_test, xgb_pred))\n\nprint('ROC score', roc_auc_score(y_test, xgb_pred))\n","1f036f90":"from sklearn.metrics import roc_curve\npreds= [svm_pred, logistic_reg_pred,lgbm_preds,xgb_pred]\nlabels= ['SVM', 'Logistic Regression',\"LGBM\",'XGBRF']\nplt.figure(figsize=(10,8))\n\nfor pred, label in zip(preds,labels):\n    fpr, tpr, thresholds = roc_curve(y_test, pred)\n    plt.plot(fpr, tpr, linewidth=2, label=label)\nplt.plot([0, 1], [0, 1], 'k--') # dashed diagonal\nplt.axis([0, 1, 0, 1])                                    # Not shown in the book\nplt.xlabel('False Positive Rate (Fall-Out)', fontsize=16) # Not shown\nplt.ylabel('True Positive Rate (Recall)', fontsize=16)    # Not shown\nplt.grid(True)  \nplt.legend()","21b81d08":"# [Age](#7)\n\n","03bf2f5f":"As we can see, the death events in the three cases are pretty close to the general death events. However, based on the above graphs, people who have low platelets counts are most likely to pass away. But for the moment, let's consider platelets as a low impact feature.","1cd39c8b":"# [Study The Effect of Numerical Data](#1)","ba95c3d4":"As we can see, the abnormal cases are much higher than the normal ones. In my opinion, this is happening because the enzymes in our bodies change a lot during the day and based on the circumstances. For example, if one patient had a long walk to a hospital to make the CPK's test, this would definitely affect the result.","f85fa829":"For now, we can conclude that most death events occur for patients who have ejection fraction < 20.\n\nNow, rather than having numerical data, let's convert them to classes --> (Normal, Mild, Mid Severe, Severe)","5a3e885e":" # [Split The Data and Select The Most Effective Features](#10)","38d7c27d":"# [Time](#8)\n\nThe time here means how often patients follow up their cases per year. This should be a very important factor since as we following up to doctors, we most likely discover any health condition and treat it before it gets worst.","7f195d3e":"![](https:\/\/ac-cdn.azureedge.net\/infusionnewssiteimages\/agingcare\/21e637ea-aa74-4ae2-b278-181d2cded7a3.jpg)","b3333d46":"## [Platelets](#4)\n![](https:\/\/plateletsociety.co.uk\/wp-content\/uploads\/2018\/03\/32152048_s-Blood-Labeled-Diagram.jpg)\nPlatelets are tiny blood cells that help human's body form clots to stop bleeding. If one of blood vessels gets damaged, it sends out signals to the platelets. The platelets then rush to the site of damage. they form a plug (clot) to fix the damage.\n\n**Ideal platelet range**: 150,000 to 400,000 per mcL in most healthy people.\n\nLow platelet count is known as thrombocytopenia. High platelet count is known as thrombocytosis.","38b3cc24":"# [Study The Effect of Categorical Data](#9)","c10cc26b":"The above graphs say a lot about how this feature correlates with death events in both men and women.","2d56cae0":"Cardiovascular diseases are serious health problems that could lead to death. [World Health Organization](https:\/\/www.who.int\/en\/news-room\/fact-sheets\/detail\/cardiovascular-diseases-(cvds)) announces that 17.9 million people die every year affected by heart diseases, which consider a 31% of the overall deaths around the world and the number 1 cause of death globally. \n\naving the tools that boost the capability of knowing the most effective causes and being able to predict the disaster before it happens could help to limit death accidents.\n\n\n In this notebook, I'll analyze the given clinical data, select the most effective causes, and do a quick prediction using basic machine learning algorithms.\n \n### Content:\n<a id='1'>1. Study The Effect of Numerical Data <\/a>  \n\n<a id='2'>a. Ejection Fraction<\/a>  \n<a id='3'>b. Creatine Phosphokinase<\/a>  \n<a id='4'>c. Platelets<\/a>  \n<a id='5'>d. Serum Creatinine<\/a>  \n<a id='6'>e. Serum Sodium  <\/a>  \n<a id='7'>f. Age <\/a>  \n<a id='8'>g. Time <\/a>  \n\n<a id='9'>2. Study The Effect of Categorical Data<\/a>  \n\n<a id='10'>3.Split The Data and Select The Most Effective Features<\/a>  \n\n<a id='11'>4. Modeling and Comparisions.<\/a>\n\nBefero we start, let's descover the data.","e466f3e2":"# [Serum Sodium](#6)\n\nA serum sodium test is a routine test that allows doctor to see how much sodium is in blood.  If sodium blood levels are too high or too low, it may mean that one have a problem with kidneys, dehydration, or another medical condition.\n\nA normal blood sodium level is between **135 and 145** milliequivalents per liter (mEq\/L). Below that is Hyponatremia and above that is Hypernatremia","88eff51a":"No comments needed, it's very obvious how important this feature is","1dfddd72":"## [Creatine Phosphokinase](#3)\nCreatine phosphokinase (CPK) is an enzyme (a protein that helps to elicit chemical changes in your body) found in heart, brain, and skeletal muscles. When muscle tissue is damaged, CPK leaks into blood. Therefore, high levels of CPK usually indicate some sort of stress or injury to heart or other muscles.\n\n**Normal**: 10 to 120 micrograms per liter (mcg\/L) \n\n> **Note**:\n> The pattern and timing of a rise or fall in CPK levels can be significant in making a diagnosis. For example, if someone has an intensive workout, this could affect the CPK level but in an acceptable way. If that person has the same high level without exercising, this wouldn't be normal. ","90be31d4":"## [Ejection Fraction](#2)\n**Ejection fraction (EF)** is a measurement, expressed as a percentage, of heart squeezing ability, or in other word its ability to contract well and push blood out of body.\n\n* Normal: 55-65%  \n* Mild: 40-55  \n* Mid-severe: 20-30%  \n* Severe: <20%  \n\n![image.png](attachment:image.png)","1c4e1e49":"## [ Serum Creatinine](#5)\nA creatinine blood test measures the level of creatinine in the blood. Creatinine is a waste product that forms when creatine, which is found in muscle, breaks down. Creatinine levels in the blood can provide doctors with information about how well kidneys are working, which is not related to our problem. But let's explore the relations:\n\nNormal creatinine levels range **from 0.9 to 1.3** mg\/dL in men and **0.6 to 1.1** mg\/dL in women","cdc3e1ca":"Now, as we have a general insight about the percentages' meaning, let's do some analysis:\n\nWe'll split the data into two categories: **ejection fraction< 30** and **ejection fraction>30** to observe where the death events occur most","a8f07a27":"# [Modeling](#11)","6c6ff9ea":"### Age vs Time\n\nI'm just curious about knowing how both age and time relates to death events, let's see:","5bbf6173":"**Conclusion**: There's no obvious pattern in the relation between CPK enzime and death event, thus, not consedring this feature might help get better result."}}