{"cell_type":{"b81d4f2f":"code","12541697":"code","58a6b78e":"code","f8949ef0":"code","e355e07a":"code","b887c6c7":"code","42059ede":"code","4adb553d":"code","70efac8c":"code","882102de":"code","9fd27250":"code","d7f7cbd1":"markdown","5c6dba54":"markdown","4444693b":"markdown","fdb8d4c6":"markdown","87ab0883":"markdown","2986b8cf":"markdown","ec857f91":"markdown"},"source":{"b81d4f2f":"import numpy as np\nimport pandas as pd\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold","12541697":"train = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')\nsubmission = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')","58a6b78e":"train","f8949ef0":"test","e355e07a":"submission","b887c6c7":"for column in train.columns:\n    print(column)","42059ede":"train_columns = [\n    'id',\n    'f1',\n    'f2',\n    'f3',\n    'f4',\n    'f5',\n    'f6',\n    'f7',\n    'f8',\n    'f9',\n    'f10',\n    'f11',\n    'f12',\n    'f13',\n    'f14',\n    'f15',\n    'f16',\n    'f17',\n    'f18',\n    'f19',\n    'f20',\n    'f21',\n    'f22',\n    'f23',\n    'f24',\n    'f25',\n    'f26',\n    'f27',\n    'f28',\n    'f29',\n    'f30',\n    'f31',\n    'f32',\n    'f33',\n    'f34',\n    'f35',\n    'f36',\n    'f37',\n    'f38',\n    'f39',\n    'f40',\n    'f41',\n    'f42',\n    'f43',\n    'f44',\n    'f45',\n    'f46',\n    'f47',\n    'f48',\n    'f49',\n    'f50',\n    'f51',\n    'f52',\n    'f53',\n    'f54',\n    'f55',\n    'f56',\n    'f57',\n    'f58',\n    'f59',\n    'f60',\n    'f61',\n    'f62',\n    'f63',\n    'f64',\n    'f65',\n    'f66',\n    'f67',\n    'f68',\n    'f69',\n    'f70',\n    'f71',\n    'f72',\n    'f73',\n    'f74',\n    'f75',\n    'f76',\n    'f77',\n    'f78',\n    'f79',\n    'f80',\n    'f81',\n    'f82',\n    'f83',\n    'f84',\n    'f85',\n    'f86',\n    'f87',\n    'f88',\n    'f89',\n    'f90',\n    'f91',\n    'f92',\n    'f93',\n    'f94',\n    'f95',\n    'f96',\n    'f97',\n    'f98',\n    'f99',\n    'f100',\n    'f101',\n    'f102',\n    'f103',\n    'f104',\n    'f105',\n    'f106',\n    'f107',\n    'f108',\n    'f109',\n    'f110',\n    'f111',\n    'f112',\n    'f113',\n    'f114',\n    'f115',\n    'f116',\n    'f117',\n    'f118',\n]\ntarget_column = 'claim'","4adb553d":"# NaN\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u3068\u7cbe\u5ea6\u304c\u4e0a\u304c\u308b\nX = pd.concat([train, test])\nX['n_missing'] = X[train_columns].isna().sum(axis=1).astype('int')\nX['n_missing_std'] = X[train_columns].isna().std(axis=1).astype('float')\nX['mean_orig'] = X[train_columns].mean(axis=1)\n\nX['med'] = X[train_columns].median(axis=1)\nX['max'] = X[train_columns].max(axis=1)\nX['abs_max'] = X[train_columns].abs().max(axis=1)\nX['min'] = X[train_columns].min(axis=1)\nX['skew'] = X[train_columns].skew(axis=1)\n\nX[train_columns] = X[train_columns].fillna(X[train_columns].mean())\n\ntrain_columns.extend(['n_missing', 'n_missing_std', 'mean_orig', 'med', 'max', 'abs_max', 'min', 'skew'])\n\nfor column in train_columns:\n    print(column)\n\ntrain = X.iloc[:train.shape[0]]\ntest = X.iloc[train.shape[0]:]","70efac8c":"def lgb_train(x, y, test, categorical_features=None, params={'objective': 'rmse'}, split_size=5):\n    # \u8a55\u4fa1\u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u5909\u6570\n    test_predictions = np.zeros(test.shape[0])\n    kfold = KFold(n_splits = split_size, random_state = 1, shuffle = True)\n\n    for fold, (train_index, value_index) in enumerate(kfold.split(train)):\n        # \u5206\u5272\u3059\u308b\n        x_train, x_val = x.iloc[train_index], x.iloc[value_index]\n        y_train, y_val = y.iloc[train_index], y.iloc[value_index]\n\n        # \u5b66\u7fd2\n        lgb_train = lgb.Dataset(x_train, y_train, categorical_feature=categorical_features)\n        lgb_eval = lgb.Dataset(x_val, y_val, reference=lgb_train, categorical_feature=categorical_features)\n        model = lgb.train(params = params,\n                          num_boost_round=1000,\n                          train_set = lgb_train, \n                          valid_sets = [lgb_train, lgb_eval], \n                          verbose_eval = 250,\n                          early_stopping_rounds=50)\n\n        # split_size\u3067\u5206\u5272\u3057\u3066\u3001\u6bce\u56de\u8a55\u4fa1\u3059\u308b\n        test_predictions += model.predict(test)\n        \n        print(f'fold{fold}\u306e\u30b9\u30b3\u30a2\uff1a{1 - abs(y - model.predict(x)).sum() \/ x.shape[0]}')\n    \n    # 11\u56de\u8a55\u4fa1\u3057\u3066\u30015\u56de\u672a\u6e80\u306a\u30890\u30016\u56de\u4ee5\u4e0a1\u304c\u51fa\u305f\u30891\u306b\u3057\u3066\u8fd4\u3059\n    test_predictions[test_predictions <= split_size \/ 2] = 0\n    test_predictions[test_predictions >= 1] = 1\n    return test_predictions\n\n\nsubmission[target_column] = lgb_train(train[train_columns], train[target_column], test[train_columns], params={'objective': 'binary'}, split_size=11)","882102de":"submission","9fd27250":"submission[['id',target_column]].to_csv('submission.csv', index=False)","d7f7cbd1":"## 5. \u5b66\u7fd2\u30fb\u8a55\u4fa1","5c6dba54":"## 1.\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u3080","4444693b":"## 4. \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30ab\u30e9\u30e0\u3092\u6c7a\u3081\u308b\n\u3068\u308a\u3042\u3048\u305a\u5168\u90e8\u7a81\u3063\u8fbc\u3080","fdb8d4c6":"## 3.\u3072\u3068\u307e\u305a\u69d8\u5b50\u3092\u307f\u308b","87ab0883":"# LightBGM\u3067\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u4f5c\u308b\n- \u3068\u308a\u3042\u3048\u305a\u3067\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u4f5c\u308a\u307e\u3059\n- \u521d\u624bLightBGM\n- \u524d\u51e6\u7406\u306f\u7279\u306b\u3057\u306a\u3044\n- KFold\u3067\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3059\u308b","2986b8cf":"## 2.\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9","ec857f91":"## 6. submission\u306b\u51fa\u529b\u3059\u308b"}}