{"cell_type":{"70243963":"code","bec7a515":"code","7b3f6470":"code","f332046f":"code","0a48616b":"code","2358c238":"code","1ede3a23":"code","12f6132a":"code","098c78c3":"code","b950ab17":"code","fb5c1fcf":"code","00a9a359":"code","6c86ca00":"code","430f59bf":"code","d1bc51ff":"code","c9c52c3e":"code","7ef96d23":"code","c1e1aefc":"code","5859e8d5":"code","b94a7bb0":"code","f857d5a6":"code","56b2540c":"code","78a2d3f9":"code","aad4e2a1":"code","df890468":"code","886171d1":"code","70b10b45":"code","3c1908d9":"code","3d5650d2":"code","c7f350d1":"code","c23241ee":"markdown","88751232":"markdown","8e758788":"markdown","384c1772":"markdown","c2559176":"markdown","5a235178":"markdown","520dbec3":"markdown","d32efbf9":"markdown","a5497fe9":"markdown","bb3c9418":"markdown","9a6be49d":"markdown","003aa749":"markdown","eeaefb43":"markdown"},"source":{"70243963":"#Libs\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nimport warnings\nwarnings.filterwarnings('ignore')","bec7a515":"data = pd.read_csv(\"..\/input\/drug-classification\/drug200.csv\")\ndata.head()","7b3f6470":"data.duplicated().any()","f332046f":"data.isnull().any()","0a48616b":"data.describe()","2358c238":"data.info()","1ede3a23":"plt.figure(figsize=(12,7))\nplt.title(\"No. of Gender of the patients\", fontsize=20)\nax = sns.countplot(data=data, x=\"Sex\", palette=\"hls\")\nfor bar in ax.patches:\n    bar_value = bar.get_height()\n    text = f'{bar_value:,}'\n    text_x = bar.get_x() + bar.get_width() \/ 2\n    text_y = bar.get_y() + bar_value\n    bar_color = bar.get_facecolor()\n    ax.text(text_x, text_y, text, ha='center', va='bottom', color=bar_color,size=12)","12f6132a":"plt.figure(figsize=(12,7))\nax = sns.countplot(data=data, x=\"BP\", palette=\"hls\")\nplt.title(\"No. of Blood Pressure Levels\", fontsize=20)\nfor bar in ax.patches:\n    bar_value = bar.get_height()\n    text = f'{bar_value:,}'\n    text_x = bar.get_x() + bar.get_width() \/ 2\n    text_y = bar.get_y() + bar_value\n    bar_color = bar.get_facecolor()\n    ax.text(text_x, text_y, text, ha='center', va='bottom', color=bar_color,size=12)","098c78c3":"plt.figure(figsize=(12,7))\nax = sns.countplot(data=data, x=\"Cholesterol\", palette=\"hls\")\nplt.title(\"No. of Cholesterol Levels\", fontsize=20)\nfor bar in ax.patches:\n    bar_value = bar.get_height()\n    text = f'{bar_value:,}'\n    text_x = bar.get_x() + bar.get_width() \/ 2\n    text_y = bar.get_y() + bar_value\n    bar_color = bar.get_facecolor()\n    ax.text(text_x, text_y, text, ha='center', va='bottom', color=bar_color,size=12)","b950ab17":"plt.figure(figsize=(12,7))\nax = sns.countplot(data=data, x=\"Drug\", palette=\"hls\")\nplt.title(\"No. of Drug Type\", fontsize=20)\nfor bar in ax.patches:\n    bar_value = bar.get_height()\n    text = f'{bar_value:,}'\n    text_x = bar.get_x() + bar.get_width() \/ 2\n    text_y = bar.get_y() + bar_value\n    bar_color = bar.get_facecolor()\n    ax.text(text_x, text_y, text, ha='center', va='bottom', color=bar_color,size=12)","fb5c1fcf":"plt.figure(figsize=(12,6))\nplt.title(\"Distribution of Sodium to potassium Ration in Blood\", fontsize=20)\nsns.distplot(data['Na_to_K'])\nplt.show()","00a9a359":"plt.figure(figsize=(12,6))\nplt.title(\"Distribution of Ages\", fontsize=20)\nsns.distplot(data['Age'])\nplt.show()","6c86ca00":"plt.figure(figsize=(12,6))\nplt.title(\"Distribution of Gender Ages\", fontsize=20)\nsns.boxplot(data=data, x='Age', y='Sex', palette=\"hls\")\nplt.show()","430f59bf":"plt.figure(figsize=(12,7))\nplt.title(\"No. of Gender of the patients per. Drug type\", fontsize=20)\nax = sns.countplot(data=data, x=\"Drug\", hue='Sex', palette=\"hls\")\nfor bar in ax.patches:\n    bar_value = bar.get_height()\n    text = f'{bar_value:,}'\n    text_x = bar.get_x() + bar.get_width() \/ 2\n    text_y = bar.get_y() + bar_value\n    bar_color = bar.get_facecolor()\n    ax.text(text_x, text_y, text, ha='center', va='bottom', color=bar_color,size=12)","d1bc51ff":"plt.figure(figsize=(12,7))\nplt.title(\"No. of Gender of the patients per. Blood Pressure Levels\", fontsize=20)\nax = sns.countplot(data=data, x=\"BP\", hue='Sex', palette=\"hls\")\nfor bar in ax.patches:\n    bar_value = bar.get_height()\n    text = f'{bar_value:,}'\n    text_x = bar.get_x() + bar.get_width() \/ 2\n    text_y = bar.get_y() + bar_value\n    bar_color = bar.get_facecolor()\n    ax.text(text_x, text_y, text, ha='center', va='bottom', color=bar_color,size=12)","c9c52c3e":"plt.figure(figsize=(12,7))\nplt.title(\"No. of Gender of the patients per. Cholesterol Levels\", fontsize=20)\nax = sns.countplot(data=data, x=\"Cholesterol\", hue='Sex', palette=\"hls\")\nfor bar in ax.patches:\n    bar_value = bar.get_height()\n    text = f'{bar_value:,}'\n    text_x = bar.get_x() + bar.get_width() \/ 2\n    text_y = bar.get_y() + bar_value\n    bar_color = bar.get_facecolor()\n    ax.text(text_x, text_y, text, ha='center', va='bottom', color=bar_color,size=12)","7ef96d23":"data = pd.get_dummies(data, columns=[\"Sex\", \"BP\", \"Cholesterol\"])\ndata.Drug = data.Drug.replace([\"DrugY\", \"drugC\", \"drugX\", \"drugA\", \"drugB\"], [0, 1, 2, 3,4])\ndata.head()","c1e1aefc":"corr = data.corr()\nplt.figure(figsize=(12,7))\nmatrix = np.triu(corr)\nsns.heatmap(corr, annot= True, fmt=\".1g\", cmap= 'jet', linewidths=1, linecolor='black', mask=matrix)","5859e8d5":"data = data.drop([\"Sex_F\", \"Cholesterol_NORMAL\", \"BP_NORMAL\"], axis=1)","b94a7bb0":"features = data.drop([\"Drug\"],axis=1)\ntarget = data.Drug\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\ny_train = y_train.values.reshape(-1,1)\ny_test = y_test.values.reshape(-1,1)","f857d5a6":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","56b2540c":"#Models Libs\n\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier","78a2d3f9":"#Result Dict\nres_dfTrain = {}\nres_dfTest = {}","aad4e2a1":"GS = {\n    \"n_neighbors\": np.arange(1,20),\n    'weights': ['distance', 'uniform'],\n    'p':np.arange(1,5),\n    \"algorithm\": ['ball_tree', 'kd_tree', 'auto']\n}\n\nknn = KNeighborsClassifier()\nknn_GS = GridSearchCV(knn, GS, cv=5)\nknn_GS.fit(X_train, y_train)\n\nres_dfTrain[\"KNN Train Score\"] = knn_GS.best_score_\nres_dfTest[\"KNN Test Score\"] = knn_GS.score(X_test, y_test)\n\nprint(\"HP: \" + str(knn_GS.best_params_))\nprint(\"Train Score: \" + str(knn_GS.best_score_))\nprint(\"Test Score: \" + str(knn_GS.score(X_test, y_test)))","df890468":"GS = {\n    \"criterion\": [\"gini\", \"entropy\"],\n    \"n_estimators\": np.arange(0,50)\n}\n\nrf = RandomForestClassifier()\nrf_GS = GridSearchCV(rf, GS, cv=5)\nrf_GS.fit(X_train, y_train)\n\nres_dfTrain[\"RF Train Score\"] = rf_GS.best_score_\nres_dfTest[\"RF Test Score\"] = rf_GS.score(X_test, y_test)\n\nprint(\"HP: \" + str(rf_GS.best_params_))\nprint(\"Train Score: \" + str(rf_GS.best_score_))\nprint(\"Test Score: \" + str(rf_GS.score(X_test, y_test)))","886171d1":"GS = {\n    \"C\": [.001, .01, 0.1, 1, 10],\n    \"kernel\": [\"linear\", \"poly\", \"rbf\", \"sigmoid\"],\n    \"degree\": [1, 3, 5],\n    \"gamma\": [\"scale\", \"auto\"]\n}\n\nsvm = SVC()\nsvm_GS = GridSearchCV(svm, GS, cv=5)\nsvm_GS.fit(X_train, y_train)\n\nres_dfTrain[\"SVM Train Score\"] = svm_GS.best_score_\nres_dfTest[\"SVM Test Score\"] = svm_GS.score(X_test, y_test)\n\nprint(\"HP: \" + str(svm_GS.best_params_))\nprint(\"Train Score: \" + str(svm_GS.best_score_))\nprint(\"Test Score: \" + str(svm_GS.score(X_test, y_test)))","70b10b45":"df_res_train = pd.DataFrame.from_dict(res_dfTrain, orient=\"index\", columns=[\"Score\"])\ndf_res_train.sort_values(by=[\"Score\"], ascending=False)","3c1908d9":"plt.figure(figsize=(12,7))\nplt.title(\"Train Score Result\", fontsize=20)\nax = sns.barplot(x = df_res_train.index, y = df_res_train.Score)\nfor bar in ax.patches:\n    bar_value = bar.get_height()\n    text = f'{bar_value:,}'\n    text_x = bar.get_x() + bar.get_width() \/ 2\n    text_y = bar.get_y() + bar_value\n    bar_color = bar.get_facecolor()\n    ax.text(text_x, text_y, text, ha='center', va='bottom', color=bar_color,size=12)","3d5650d2":"df_res_test = pd.DataFrame.from_dict(res_dfTest, orient=\"index\", columns=[\"Score\"])\ndf_res_test.sort_values(by=[\"Score\"], ascending=False)","c7f350d1":"plt.figure(figsize=(12,7))\nplt.title(\"Test Score Result\", fontsize=20)\nax = sns.barplot(x = df_res_test.index, y = df_res_test.Score)\nfor bar in ax.patches:\n    bar_value = bar.get_height()\n    text = f'{bar_value:,}'\n    text_x = bar.get_x() + bar.get_width() \/ 2\n    text_y = bar.get_y() + bar_value\n    bar_color = bar.get_facecolor()\n    ax.text(text_x, text_y, text, ha='center', va='bottom', color=bar_color,size=12)","c23241ee":"# **Data Visualization**","88751232":"# **SVM Model With GridSearch**","8e758788":"# **Data Processing**","384c1772":"# **RF Model With GridSearch**","c2559176":"# **Training Data**\n","5a235178":"> No Null Values","520dbec3":"**The Best Models for This problem are Random Forest (RF) & Support Vector Machine (SVM)**","d32efbf9":"# **Models Visualization**","a5497fe9":"# **Splitting Data**","bb3c9418":"# **KNN Model With GridSearch**","9a6be49d":"> No duplicate data","003aa749":"> **Data was splitted to 20% Test Set and 80% Train Set**","eeaefb43":"***Inference***\n\n> Here we find that we have 2 col **Num** and 4 col **Cate** (obj)\n\n Numerical Cols\n\n1. Age\n2. Sodium to potassium Ration in Blood (Na_to_K)\n\nCategorical Cols\n\n1. Sex\n2. Blood Pressure Levels (Bp)\n3. Cholesterol Levels (Cholesterol)\n4. Drug Type (Drug)"}}