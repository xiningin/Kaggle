{"cell_type":{"ca8be66e":"code","8e217e3e":"code","e8ec01df":"code","8201d4b1":"code","a7633d1c":"code","e5887d44":"code","bc2d5915":"code","3b4deb55":"code","a7c5f56b":"code","37493ac2":"code","5c2dbc2f":"code","abc6c412":"code","d45f1f98":"markdown","552ec2a3":"markdown","3bd8fcb0":"markdown","51ef7907":"markdown","a09b6d5d":"markdown","235f4964":"markdown"},"source":{"ca8be66e":"import sys","8e217e3e":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nimport matplotlib.image as immg\nfrom pathlib import Path\nimport os\nimport seaborn as sns\nimport gc\nimport torchvision\nimport cv2\nfrom fastai.data.all import *\nfrom fastai.vision.core import *\nfrom fastai.vision.data import *\nfrom tqdm.notebook import tqdm\nimport zipfile\nimport io\nfrom sklearn.decomposition import PCA\nfrom fastai.vision.all import *","e8ec01df":"path = Path('..\/input\/cassava-leaf-disease-classification')","8201d4b1":"trn_df = pd.read_csv('..\/input\/cassav-cleaned-df\/cleaned_df.csv')\ntrn_df.head()","a7633d1c":"trn_df[trn_df.kfold==2].label.value_counts()","e5887d44":"trn_idx,val_idx = trn_df[trn_df.kfold!=2].index, trn_df[trn_df.kfold==2].index","bc2d5915":"item_tfms = RandomResizedCrop(256, min_scale=0.75, ratio=(1.,1.))\nbatch_tfms = [*aug_transforms(size=256, max_warp=0), Normalize.from_stats(*imagenet_stats)]\nbs=64","3b4deb55":"def get_data(FOLD):\n    trn_idx,val_idx = trn_df[trn_df.kfold!=FOLD].index, trn_df[trn_df.kfold==FOLD].index\n    dls = ImageDataLoaders.from_df(trn_df, path, fn_col = 'image_id', folder='train_images',label_col='label',\n                                  bs=32,y_block=CategoryBlock,item_tfms=item_tfms,batch_tfms=batch_tfms,val_idxs=val_idx)\n    return dls","a7c5f56b":"!pip install -q efficientnet_pytorch","37493ac2":"from efficientnet_pytorch import EfficientNet","5c2dbc2f":"class MyModel(Module):\n    def __init__(self, num_classes):\n\n        self.effnet = EfficientNet.from_pretrained(\"efficientnet-b4\")\n        self.dropout = nn.Dropout(0.1)\n        self.out = nn.Linear(1792, num_classes)\n\n    def forward(self, image):\n        batch_size, _, _, _ = image.shape\n\n        x = self.effnet.extract_features(image)\n        x = F.adaptive_avg_pool2d(x, 1).reshape(batch_size, -1)\n        outputs = self.out(self.dropout(x))\n        return outputs","abc6c412":"for fold in range(2):\n    \n    dls = get_data(fold)\n    effnet = MyModel(dls.c)\n    \n    learn = Learner(dls, \n                effnet,\n                loss_func = LabelSmoothingCrossEntropyFlat(), \n                metrics = [accuracy], \n                cbs=[MixUp()],\n                model_dir='\/kaggle\/working\/').to_native_fp16()\n    \n    nm = 'best_model_fold_'+str(fold)\n    cb1 = SaveModelCallback(monitor='accuracy',fname=nm,comp=np.greater) # Callbacks\n    cb2 = ReduceLROnPlateau(monitor='valid_loss', min_delta=0.1, patience=2,factor=0.2)\n    learn.fit_one_cycle(10, 0.0007556, cbs = [cb1,cb2])\n    learn.load(nm);\n    learn = learn.to_fp32()\n    name = 'best_model_fp32_'+'fold_'+str(fold)\n    learn.save(name,with_opt=True);\n    learn,dls=None,None\n    gc.collect()","d45f1f98":"## Transforms","552ec2a3":"## Function to Create Stratified K_fold for both Regression as well as Classification","3bd8fcb0":"## DataLoader","51ef7907":"## Model","a09b6d5d":"## Learner","235f4964":"## Train and Valid idxs"}}