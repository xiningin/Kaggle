{"cell_type":{"cde00e90":"code","74d777c5":"code","58ed3296":"code","551bc1e3":"code","9866a390":"code","0d4222bc":"code","d70bc945":"code","65e72cee":"code","67de4e14":"code","767479bc":"code","602a563a":"code","3f8162d5":"code","b767d0a4":"code","902bede6":"code","f2ee6442":"code","50a462cd":"code","5430ff01":"code","9a33efbc":"code","1272b098":"code","8681dcea":"code","b7c0603e":"code","e0b23a50":"code","39ed1001":"markdown","c20774ce":"markdown","d7342aad":"markdown","0014cd1c":"markdown","91fec48e":"markdown","02b040d3":"markdown","7824bb97":"markdown","de9a3422":"markdown","c0006d68":"markdown","6ce870c1":"markdown","764a4bb3":"markdown"},"source":{"cde00e90":"import sys #access to system parameters https:\/\/docs.python.org\/3\/library\/sys.html\nprint(\"Python version: {}\". format(sys.version))\nimport numpy as np # linear algebra\nprint(\"NumPy version: {}\". format(np.__version__))\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nprint(\"pandas version: {}\". format(pd.__version__))\nimport matplotlib # collection of functions for scientific and publication-ready visualization\nprint(\"matplotlib version: {}\". format(matplotlib.__version__))\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings # ignore warnings\nwarnings.filterwarnings('ignore')\n# machine learning\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","74d777c5":"df = pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')\ndf.shape","58ed3296":"df.head(3)","551bc1e3":"df.drop('Unnamed: 32', axis =1, inplace = True)","9866a390":"df['diagnosis'].value_counts()","0d4222bc":"sns.countplot(df.diagnosis)\nplt.title(\"diagnosis benign or malign?\",color = 'black',fontsize=15)","d70bc945":"benign = len(df[df['diagnosis'] == 'B'])\nmalign = len(df[df['diagnosis'] == 'M'])\nimport matplotlib.pyplot as plt\ny = ('B', 'M')\ny_pos = np.arange(len(y))\nx = (benign, malign)\nlabels = 'B', 'M'\nsizes = [benign, malign]\nfig1, ax1 = plt.subplots()\nax1.pie(sizes,  labels=labels, autopct='%1.1f%%', startangle=90) \nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.title('Percentage', size=16)\nplt.show() # Pie chart, where the slices will be ordered and plotted counter-clockwise:","65e72cee":"sns.scatterplot(x= 'area_mean', y= 'perimeter_mean', hue= 'diagnosis', data=df) # smoothness_mean ","67de4e14":"#df['cancer'] = 0 # Benign\n#df['cancer'].loc[df['diagnosis'] == 'M'] = 1 # Malign\n#df.drop('diagnosis', axis =1, inplace = True)\ndf['cancer'] = df['diagnosis'].map({'B':0,'M':1})\ndf.drop('diagnosis', axis =1, inplace = True)","767479bc":"corrmat = df.corr()\nf, ax = plt.subplots(nrows=1, ncols=1, figsize=(15, 15))\nax.set_title(\"Correlation Matrix\", fontsize=12)\nfilter = df.columns != 'id'\nsns.heatmap(df[df.columns[filter]].corr(), vmin=-1, vmax=1, cmap='coolwarm', annot=True)","602a563a":"ax = sns.distplot(df['perimeter_mean']) # histogram distribution","3f8162d5":"data_mean = df[['radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean']]\nsns.heatmap(data_mean.corr(), vmin=-1, vmax=1, cmap='coolwarm', annot=True)","b767d0a4":"X = df[['id','radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',\n       'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',\n       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n       'fractal_dimension_se', 'radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst']] # 'id',\ny = df['cancer'] # diagnosis","902bede6":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=100)","f2ee6442":"ids = X_test.id","50a462cd":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression(max_iter=1000)\nmodel.fit(X_train.drop('id',axis=1), y_train)\nscore = model.score(X_train.drop('id',axis=1), y_train)\nprint('Logistic Regression score (train):', score)\nscore = model.score(X_test.drop('id',axis=1), y_test)\nprint('Logistic Regression score (test):', score)\n\nY_pred = model.predict(X_test.drop('id',axis=1))\noutput = pd.DataFrame({'id':ids,'cancer':Y_pred})\nprint(output.head())\npeople = output.loc[output.cancer == 1][\"cancer\"]\nrate_people = 0\nif len(people) > 0 :\n    rate_people = len(people)\/len(output)\nprint(\"Logistic Regression % of people with cancer:\", rate_people)\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test,Y_pred))","5430ff01":"# Confusion matrix\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(y_test,Y_pred)\nclass_names = [0,1]\nfig,ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks,class_names)\nplt.yticks(tick_marks,class_names)\nsns.heatmap(pd.DataFrame(confusion_matrix), annot = True, cmap = 'Greens', fmt = 'g')\nax.xaxis.set_label_position('top')\nplt.tight_layout()\nplt.title('Confusion matrix for logistic regression')\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\nplt.show()","9a33efbc":"# ROC Curve\nfrom sklearn.metrics import roc_auc_score,roc_curve\ny_probabilities = model.predict_proba(X_test.drop('id',axis=1))[:,1]\nfalse_positive_rate_knn, true_positive_rate_knn, threshold_knn = roc_curve(y_test,y_probabilities)\nplt.figure(figsize=(10,6))\nplt.title('ROC for logistic regression')\nplt.plot(false_positive_rate_knn, true_positive_rate_knn, linewidth=5, color='green')\nplt.plot([0,1],ls='--',linewidth=5)\nplt.plot([0,0],[1,0],c='.5')\nplt.plot([1,1],c='.5')\nplt.text(0.2,0.6,'AUC: {:.2f}'.format(roc_auc_score(y_test,y_probabilities)),size= 16)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.show()","1272b098":"output.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","8681dcea":"output.shape","b7c0603e":"output.head()","e0b23a50":"output.tail()","39ed1001":"## Distribution","c20774ce":"Conclusion: The feature with the most correlation is perimeter mean 0.99","d7342aad":"## Model Selection","0014cd1c":"## Feature Importances","91fec48e":"## Identify the problem\n\nFeatures are computed from a digitized image of a fine needle aspirate (FNA) of a breast mass. \n[database](https:\/\/www.kaggle.com\/uciml\/breast-cancer-wisconsin-data) \n\nAttribute Information:\n\n1) ID number \n\n2) Diagnosis (M = malignant, B = benign) \n\n3-32)\n\nTen real-valued features are computed for each cell nucleus:\n- radius (mean of distances from center to points on the perimeter) \n- texture (standard deviation of gray-scale values) \n- perimeter \n- area \n- smoothness (local variation in radius lengths) \n- compactness (perimeter^2 \/ area - 1.0) \n- concavity (severity of concave portions of the contour) \n- concave points (number of concave portions of the contour) \n- symmetry \n- fractal dimension (\"coastline approximation\" - 1)\n\nThe mean, standard error and \"worst\" or largest (mean of the three largest values) of these features were computed for each image, resulting in 30 features. For instance, field 3 is Mean Radius, field 13 is Radius SE, field 23 is Worst Radius. All feature values are recoded with four significant digits. Missing attribute values: none. Class distribution: 357 benign, 212 malignant.","02b040d3":"## Exploratory Data Analysis","7824bb97":"Conclusion: The bigger the area_mean and perimeter_mean the more malign.","de9a3422":"Conclusion: Benign is more common than Malign","c0006d68":"## Conclusion\n\nScore 95 % confidence and accuracy.","6ce870c1":"## Logistic Regression","764a4bb3":"## Feature Engineering"}}