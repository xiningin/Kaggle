{"cell_type":{"d44b59db":"code","f04bf2a5":"code","07de3a50":"code","73f3c7d5":"code","eb397dbf":"code","e6922f68":"code","094a34a6":"code","076fc98a":"code","87aa8ef9":"code","68ad5d65":"code","5c8b3c54":"code","43169199":"code","3393a36e":"code","6dba48df":"code","e7097d42":"code","44d891bd":"code","795f1be7":"code","29d2c764":"code","f4147857":"code","3995f8fc":"code","fcb0fece":"code","9dfc58eb":"code","e1c37f60":"markdown","b06444d6":"markdown","22ccafbb":"markdown"},"source":{"d44b59db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f04bf2a5":"sld_df = pd.read_csv('\/kaggle\/input\/covid19-corona-virus-india-dataset\/complete.csv')\nsld_df.head()","07de3a50":"wbd_df = sld_df[sld_df['Name of State \/ UT']=='West Bengal']\nwbd_df.head()","73f3c7d5":"y = np.array(wbd_df['Total Confirmed cases'])\nx = np.array(wbd_df['Date'])","eb397dbf":"import matplotlib.pyplot as plt\nplt.rcParams.update(plt.rcParamsDefault)\nplt.style.use('ggplot')\n##x = np.arange(y.shape[0])\nx1 = [x[i] for i in range(0,x.shape[0],20)]\nprint(x1)\nplt.xticks(np.arange(len(x1))*20,x1)\nplt.bar(x,y)\nplt.show()","e6922f68":"def poly_feat(d1,d2):\n    d = np.arange(d1,d2)+1\n    ps = [.1,.25,.33,.5,.75,.8,.9,2,3,4,5]\n    x_data = np.zeros((d2-d1,len(ps)+1))\n    x_data[:,0] = d\n    for i,p in enumerate(ps):\n        x_data[:,i+1] = d**p\n    return x_data","094a34a6":"X_data = poly_feat(0,y.shape[0])\nX_data[:5]","076fc98a":"from sklearn.svm import SVR\nimport xgboost as xgb\nfrom sklearn.linear_model import LinearRegression,Ridge\nfrom keras.models import Model\nfrom keras.layers import LSTM,GRU,SimpleRNN,Input,Dense,Reshape,Multiply,Lambda\nimport keras.backend as K\nfrom keras.optimizers import Adam\nfrom keras.losses import Huber\nimport tensorflow as tf\ntf.random.set_seed(42)","87aa8ef9":"lr = LinearRegression()\nlr.fit(X_data,y)","68ad5d65":"y_pred = lr.predict(X_data)","5c8b3c54":"x_ax = np.arange(y_pred.shape[0])\nplt.plot(x_ax,y_pred,color='blue',label='Prediction')\nplt.bar(x_ax,y,color='red',label='Actual')\nplt.legend()\nplt.show()","43169199":"y.shape","3393a36e":"def clip(y_pred):\n    maxv = max(y_pred)\n    maxi = y_pred.index(max(y_pred))\n    for i,v in enumerate(y_pred):\n        if i>maxi:\n            y_pred[i] = maxv\n    return y_pred","6dba48df":"def testing(model,y_part,Ts,T):\n    y_pred = list(y_part)\n    X_test = poly_feat(Ts,T)\n    y_test = model.predict(X_test)\n    y_pred = y_pred+list(y_test)\n    return y_pred","e7097d42":"Ts = 0\nT = 80\ny_part = y[:Ts]\ny_pred = testing(lr,y_part,Ts,T)","44d891bd":"y_pred = clip(y_pred)\nx_ax1 = np.arange(len(y_pred))\nplt.plot(x_ax1,np.array(y_pred),color='blue',label='Prediction')\nx_ax2 = np.arange(y.shape[0])\nplt.bar(x_ax2,y,color='red',label='Actual')\nplt.axvline(x=x_ax2[-1],color='orange')\nplt.legend()\nplt.show()","795f1be7":"lr.coef_","29d2c764":"rd = Ridge()\nrd.fit(X_data,y)\ny_pred = testing(rd,y_part,Ts,T)\ny_pred = clip(y_pred)\nx_ax1 = np.arange(len(y_pred))\nplt.plot(x_ax1,np.array(y_pred),color='blue',label='Prediction')\nx_ax2 = np.arange(y.shape[0])\nplt.bar(x_ax2,y,color='red',label='Actual')\nplt.axvline(x=x_ax2[-1],color='orange')\nplt.legend()\nplt.show()","f4147857":"rd.coef_","3995f8fc":"def sigmoid(x,a,b,c,d):\n    return a\/(1+np.exp(-c*x+d))","fcb0fece":"from scipy.optimize import curve_fit\nX_cf = X_data[:,0]\npopt,_ = curve_fit(f=sigmoid,xdata=X_cf,ydata=y)","9dfc58eb":"a,b,c,d = popt\ny_pred = []\nT = 120\nfor x in range(1,T):\n    y_pred.append(sigmoid(x,a,b,c,d))\nx_ax1 = np.arange(len(y_pred))\nplt.plot(x_ax1,np.array(y_pred),color='blue',label='Prediction')\nx_ax2 = np.arange(y.shape[0])\nplt.bar(x_ax2,y,color='red',label='Actual')\nplt.axvline(x=x_ax2[-1],color='orange')\nplt.legend()\nplt.show()","e1c37f60":"# **Ridge Regressor** #","b06444d6":"# ** Curve Fitting **","22ccafbb":"# ** Linear Regressor** #"}}