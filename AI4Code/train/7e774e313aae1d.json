{"cell_type":{"f08395d6":"code","88e4b390":"code","761461a1":"code","760440ed":"code","4b8b3170":"code","ae3b2151":"code","1b0d0b6e":"code","3bf99498":"code","b7116f7c":"code","33b221c7":"code","168cd262":"code","79bc4e1b":"code","9bdb7acf":"code","b422b211":"code","cdf4cc3a":"code","7476b970":"code","beb90e41":"code","0686fe0c":"code","e05b05a7":"code","9d24edd2":"code","a106b830":"code","465c20ef":"code","ce0ac8eb":"code","52d188de":"code","60841706":"code","6db06816":"code","1875787d":"code","2ed59a37":"code","182504c6":"code","514ea590":"code","306dabd7":"code","957e07c7":"code","bc58bee3":"code","732779c9":"code","ba5329c1":"markdown","cb913e90":"markdown","3d122065":"markdown","b461f160":"markdown","8e64bf52":"markdown","041e5340":"markdown","165d8d2a":"markdown","546c7817":"markdown","4644055e":"markdown","13e2df46":"markdown","b01f2711":"markdown","1e7a2357":"markdown","0b84c94b":"markdown","266d3724":"markdown","b76b8fee":"markdown","fcec585f":"markdown","a3295012":"markdown","eaa2a006":"markdown"},"source":{"f08395d6":"#pip install folium\n#pip install squarify","88e4b390":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport squarify\nimport folium","761461a1":"df1 = pd.read_csv('..\/input\/q32020crimelon\/2020-07-metropolitan-street.csv')\ndf2 = pd.read_csv('..\/input\/q32020crimelon\/2020-08-metropolitan-street.csv')\ndf3 = pd.read_csv('..\/input\/q32020crimelon\/2020-09-metropolitan-street.csv')\ndata = pd.concat([df1, df2, df3])","760440ed":"print('There are '+ str(data.shape[0])+ ' rows and '+ str(data.shape[1]) +' columns')","4b8b3170":"print(data.dtypes)","ae3b2151":"#data.info()\ndata1 = {'unique_values' : data.nunique(),\n        'na_values' : data.isnull().sum(),\n        'data_types' : data.dtypes}\npd.DataFrame(data1)","1b0d0b6e":"data['Month'] = pd.to_datetime(data['Month'])\n\n#Get year, month, day\ndata['Year'] = data['Month'].dt.year\ndata['Month'] = data['Month'].dt.month\ndata.head()","3bf99498":"# lines below fill null cells with some data\ndata['Crime ID'] = data['Crime ID'].fillna('No_Crime_ID_Assigned')\ndata['LSOA code'] = data['LSOA code'].fillna('No_Data_Available')\ndata['LSOA name'] = data['LSOA name'].fillna('No_Data_Available')\ndata['Last outcome category'] = data['Last outcome category'].fillna('No_Outcome_Available')","b7116f7c":"# this line drops ['Context'] column.\ndata.drop(['Context'], axis=1, inplace=True)","33b221c7":"# the following lines remove the code added after the Borough name.\ndata.loc[data['LSOA name'].str.contains('Barking and Dagenham'), 'LSOA name'] = 'Barking and Dagenham'\ndata.loc[data['LSOA name'].str.contains('Barnet'), 'LSOA name'] = 'Barnet'\ndata.loc[data['LSOA name'].str.contains('Bexley'), 'LSOA name'] = 'Bexley'\ndata.loc[data['LSOA name'].str.contains('Brent'), 'LSOA name'] = 'Brent'\ndata.loc[data['LSOA name'].str.contains('Bromley'), 'LSOA name'] = 'Bromley'\ndata.loc[data['LSOA name'].str.contains('Camden'), 'LSOA name'] = 'Camden'\ndata.loc[data['LSOA name'].str.contains('City of London'), 'LSOA name'] = 'City of London'\ndata.loc[data['LSOA name'].str.contains('Croydon'), 'LSOA name'] = 'Croydon'\ndata.loc[data['LSOA name'].str.contains('Ealing'), 'LSOA name'] = 'Ealing'\ndata.loc[data['LSOA name'].str.contains('Enfield'), 'LSOA name'] = 'Enfield'\ndata.loc[data['LSOA name'].str.contains('Greenwich'), 'LSOA name'] = 'Greenwich'\ndata.loc[data['LSOA name'].str.contains('Hackney'), 'LSOA name'] = 'Hackney'\ndata.loc[data['LSOA name'].str.contains('Hammersmith and Fulham'), 'LSOA name'] = 'Hammersmith and Fulham'\ndata.loc[data['LSOA name'].str.contains('Haringey'), 'LSOA name'] = 'Haringey'\ndata.loc[data['LSOA name'].str.contains('Harrow'), 'LSOA name'] = 'Harrow'\ndata.loc[data['LSOA name'].str.contains('Havering'), 'LSOA name'] = 'Havering'\ndata.loc[data['LSOA name'].str.contains('Hillingdon'), 'LSOA name'] = 'Hillingdon'\ndata.loc[data['LSOA name'].str.contains('Hounslow'), 'LSOA name'] = 'Hounslow'\ndata.loc[data['LSOA name'].str.contains('Islington'), 'LSOA name'] = 'Islington'\ndata.loc[data['LSOA name'].str.contains('Kensington and Chelsea'), 'LSOA name'] = 'Kensington and Chelsea'\ndata.loc[data['LSOA name'].str.contains('Kingston upon Thames'), 'LSOA name'] = 'Kingston upon Thames'\ndata.loc[data['LSOA name'].str.contains('Lambeth'), 'LSOA name'] = 'Lambeth'\ndata.loc[data['LSOA name'].str.contains('Lewisham'), 'LSOA name'] = 'Lewisham'\ndata.loc[data['LSOA name'].str.contains('Merton'), 'LSOA name'] = 'Merton'\ndata.loc[data['LSOA name'].str.contains('Newham'), 'LSOA name'] = 'Newham'\ndata.loc[data['LSOA name'].str.contains('Redbridge'), 'LSOA name'] = 'Redbridge'\ndata.loc[data['LSOA name'].str.contains('Richmond upon Thames'), 'LSOA name'] = 'Richmond upon Thames'\ndata.loc[data['LSOA name'].str.contains('Southwark'), 'LSOA name'] = 'Southwark'\ndata.loc[data['LSOA name'].str.contains('Sutton'), 'LSOA name'] = 'Sutton'\ndata.loc[data['LSOA name'].str.contains('Tower Hamlets'), 'LSOA name'] = 'Tower Hamlets'\ndata.loc[data['LSOA name'].str.contains('Waltham Forest'), 'LSOA name'] = 'Waltham Forest'\ndata.loc[data['LSOA name'].str.contains('Wandsworth'), 'LSOA name'] = 'Wandsworth'\ndata.loc[data['LSOA name'].str.contains('Westminster'), 'LSOA name'] = 'Westminster'","168cd262":"# this is a diccionary of the 32 Boroughs of London and the City of London.\nboroughs = {'Barking and Dagenham':25, 'Barnet':31, 'Bexley':23, 'Brent':12, 'Bromley':20, 'Camden':11,\n            'City of London':1, 'Croydon':19, 'Ealing':13, 'Enfield':30, 'Greenwich':22, 'Hackney':9,\n            'Hammersmith and Fulham':4, 'Haringey':29, 'Harrow':32, 'Havering':24, 'Hillingdon':33,\n            'Hounslow':14, 'Islington':10, 'Kensington and Chelsea':3, 'Kingston upon Thames':16,\n            'Lambeth':6, 'Lewisham':21, 'Merton':17, 'Newham':27, 'Redbridge':26, 'Richmond upon Thames':15,\n            'Southwark':7, 'Sutton':18, 'Tower Hamlets':8, 'Waltham Forest':28, 'Wandsworth':5,\n            'Westminster':2}","79bc4e1b":"# this line adds a column (\"Boroughs\") and adds a number of the borogh accordingl to the boroughs diccionary.\ndata['Boroughs'] = data['LSOA name'].map(boroughs)","9bdb7acf":"data.dropna(how='any',axis=0, subset=['Longitude', 'Latitude', 'Boroughs'], inplace=True) # this line drops the null rows (Where no location is available) so they can be excluded from the analysis.","b422b211":"data.isnull().sum()","cdf4cc3a":"print('There are '+ str(data.shape[0])+ ' rows and '+ str(data.shape[1]) +' columns')","7476b970":"#Major Crimes in London Boroughs Jul-Sep 2020.\nplt.figure(figsize = (20, 10))\nsns.countplot(y= 'Crime type', data = data, order = data['Crime type'].value_counts().iloc[:14].index, palette = 'icefire')\nplt.title('Major Crimes in London, Jul-Sep 2020', fontweight = 30, fontsize = 20)\nplt.show()","beb90e41":"# plotting a tree map\n\ny = data['Crime type'].value_counts()\n\nplt.rcParams['figure.figsize'] = (15, 15)\nplt.style.use('fivethirtyeight')\n\ncolor = plt.cm.inferno(np.linspace(0, 1, 15))\nsquarify.plot(sizes = y.values, label = y.index, alpha=.8, color = color)\nplt.title('Tree Map for London Boroughs Crimes, Jul-Sep 2020', fontsize = 20, color=\"black\")\n\nplt.axis('off')\nplt.show()","0686fe0c":"# Areas with count of crimes\nplt.figure(figsize = (20, 10))\nsns.countplot(y= 'LSOA name', data = data, order = data['LSOA name'].value_counts().iloc[:33].index, palette = 'autumn')\nplt.title('Boroughs with Most Crime', fontweight = 30, fontsize = 30)\nplt.show()","e05b05a7":"wm = data[data[\"Boroughs\"] == 2]\nwm['Crime type'].value_counts(normalize=True)","9d24edd2":"cri_wm = wm['Crime type'].value_counts()\n\nplt.rcParams['figure.figsize'] = (15, 15)\nplt.style.use('fivethirtyeight')\n\ncolor = plt.cm.magma(np.linspace(0, 1, 15))\nsquarify.plot(sizes = cri_wm.values, label = cri_wm.index, alpha=.8, color = color)\nplt.title('Tree Map of Crimes in Westminster, Jul-Sep 2020', fontsize = 20, color=\"black\")\n\nplt.axis('off')\nplt.show()","a106b830":"# this cell creates a new data frame that shows the different crime outcomes as a percentage.\nrsjul = data[data[\"Month\"] == 7]\nrsago = data[data[\"Month\"] == 8]\nrssep = data[data[\"Month\"] == 9]\n#data.info()\nresdata = {'jul' : rsjul['Last outcome category'].value_counts(normalize = True),\n        'ago' : rsago['Last outcome category'].value_counts(normalize = True),\n        'sep' : rssep['Last outcome category'].value_counts(normalize = True),\n        'jul-sep' : data['Last outcome category'].value_counts(normalize = True)}\npd.DataFrame(resdata)","465c20ef":"# Resolution of crimes\nplt.figure(figsize = (20, 10))\nsns.countplot(y= 'Last outcome category', data = data, order = data['Last outcome category'].value_counts().iloc[:8].index, palette = 'summer')\nplt.title('Resolutions for Crime', fontweight = 30, fontsize = 30)\nplt.show()","ce0ac8eb":"london_map = folium.Map(location=[51.4977568,-0.1522502], zoom_start=10, tiles=\"CartoDB dark_matter\")","52d188de":"locations = data.groupby('LSOA name').first()#head()","60841706":"new_locations = locations.loc[:, ['Latitude', 'Longitude', 'Crime type', 'Location']]","6db06816":"new_locations.head()","1875787d":"popup_text = \"\"\"Borough : {}<br>\n                Location : {}<br>\n                Crime type : {}<br>\"\"\"","2ed59a37":"for i in range(len(new_locations)):\n    lat = new_locations.iloc[i][0]\n    long = new_locations.iloc[i][1]\n    popup_text = \"\"\"Borough : {}<br>\n                    Location : {}<br>\n                    Crime type : {}<br>\"\"\"\n    popup_text = popup_text.format(new_locations.index[i],\n                               new_locations.iloc[i][-1],\n                               new_locations.iloc[i][-2]\n                               )\n    folium.CircleMarker(location = [lat, long], popup= popup_text, fill = True).add_to(london_map)","182504c6":"london_map","514ea590":"# lines below create lists of 'Latitude', 'Longitude', 'Crime Type' and 'Boroughs'\nlat = list(data[\"Latitude\"])\nlon = list(data[\"Longitude\"])\ncrime = list(data[\"Crime type\"])\nborough = list(data[\"LSOA name\"])","306dabd7":"map = folium.Map(location=[51.5097992, -0.1524637], zoom_start=14)","957e07c7":"fgc1 = folium.FeatureGroup(name=\"Bicycle theft\") # these are feature groups for crime.\nfgc2 = folium.FeatureGroup(name=\"Burglary\")\nfgc3 = folium.FeatureGroup(name=\"Criminal damage and arson\")\nfgc4 = folium.FeatureGroup(name=\"Drugs\")\nfgc5 = folium.FeatureGroup(name=\"Possession of weapons\")\nfgc6 = folium.FeatureGroup(name=\"Public order\")\nfgc7 = folium.FeatureGroup(name=\"Robbery\")\nfgc8 = folium.FeatureGroup(name=\"Shoplifting\")\nfgc9 = folium.FeatureGroup(name=\"Theft from the person\")\nfgc10 = folium.FeatureGroup(name=\"Vehicle crime\")\nfgc11 = folium.FeatureGroup(name=\"Violence and sexual offences\")\nfgc12 = folium.FeatureGroup(name=\"Other theft\")\nfgc13 = folium.FeatureGroup(name=\"Other crime\")\nfgc14 = folium.FeatureGroup(name=\"Anti-social behaviour\")","bc58bee3":"for lt, ln, cri, bor in zip(lat, lon, crime, borough): #zip grabs the first item from lat, 1st item from lon, 1st crime type, and borough and put them together...\n    if bor == \"Westminster\":\n        if cri == \"Bicycle theft\":\n            fgc1.add_child(folium.CircleMarker(location = [lt, ln], radius = 6, popup = \"Bicycle theft\", fill_color = 'cadetblue', color = 'cadetblue', fill_opacity = 0.7)) #this works but shows the same marker\n        elif cri == \"Burglary\":\n            fgc2.add_child(folium.CircleMarker(location = [lt, ln], radius = 6, popup = \"Burglary\", fill_color = 'orange', color = 'orange', fill_opacity = 0.7))\n        elif cri == \"Criminal damage and arson\":\n            fgc3.add_child(folium.CircleMarker(location = [lt, ln], radius = 6, popup = \"Criminal damage and arson\", fill_color = 'yellow', color = 'yellow', fill_opacity = 0.7))\n        elif cri == \"Drugs\":\n            fgc4.add_child(folium.CircleMarker(location = [lt, ln], radius = 6, popup = \"Drugs\", fill_color = 'red', color = 'red', fill_opacity = 0.7))\n        elif cri == \"Possession of weapons\":\n            fgc5.add_child(folium.CircleMarker(location = [lt, ln], radius = 6, popup = \"Possession of weapons\", fill_color = 'lightred', color = 'lightred', fill_opacity = 0.7))\n        elif cri == \"Public order\":\n            fgc6.add_child(folium.CircleMarker(location = [lt, ln], radius = 6, popup = \"Public order\", fill_color = 'darkgreen', color = 'darkgreen', fill_opacity = 0.7))\n        elif cri == \"Robbery\":\n            fgc7.add_child(folium.CircleMarker(location = [lt, ln], radius = 6, popup = \"Robbery\", fill_color = 'cyan', color = 'cyan', fill_opacity = 0.7))\n        elif cri == \"Shoplifting\":\n            fgc8.add_child(folium.CircleMarker(location = [lt, ln], radius = 6, popup = \"Shoplifting\", fill_color = 'black', color ='black', fill_opacity = 0.7))\n        elif cri == \"Theft from the person\":\n            fgc9.add_child(folium.CircleMarker(location = [lt, ln], radius = 6, popup = \"Theft from the person\", fill_color = 'lightgray', color = 'blue', fill_opacity = 0.7))\n        elif cri == \"Vehicle crime\":\n            fgc10.add_child(folium.CircleMarker(location = [lt, ln], radius = 6, popup = \"Vehicle crime\", fill_color = 'purple', color = 'purple', fill_opacity = 0.7))\n        elif cri == \"Violence and sexual offences\":\n            fgc11.add_child(folium.CircleMarker(location = [lt, ln], radius = 6, popup = \"Violence and sexual offences\", fill_color = 'orange', color = 'red', fill_opacity = 0.7))\n        elif cri == \"Other theft\":\n            fgc12.add_child(folium.CircleMarker(location = [lt, ln], radius = 6, popup = \"Other theft\", fill_color = 'purple', color = 'black', fill_opacity = 0.7))\n        elif cri == \"Other crime\":\n            fgc13.add_child(folium.CircleMarker(location = [lt, ln], radius = 6, popup = \"Other crime\", fill_color = 'green', color = 'green', fill_opacity = 0.7))\n        else:\n            fgc14.add_child(folium.CircleMarker(location = [lt, ln], radius = 6, popup = \"Anti-social behaviour\", fill_color = 'darkred', color = 'darkred', fill_opacity = 0.7))\n    else:\n        continue","732779c9":"map.add_child(fgc1)\nmap.add_child(fgc2)\nmap.add_child(fgc3)\nmap.add_child(fgc4)\nmap.add_child(fgc5)\nmap.add_child(fgc6)\nmap.add_child(fgc7)\nmap.add_child(fgc8)\nmap.add_child(fgc9)\nmap.add_child(fgc10)\nmap.add_child(fgc11)\nmap.add_child(fgc12)\nmap.add_child(fgc13)\nmap.add_child(fgc14)\nmap.add_child(folium.LayerControl())","ba5329c1":"Also, a basic check is performed below for missing values and data type in the data set.\n\nAs it is shown in the output, there are missing values in the 'Crime ID', 'Longitude', 'Latitude', 'LSOA code', 'LSOA name', 'Last outcome category' and 'Context' columns.","cb913e90":"The column 'Month' is converted from object type to datatime below.","3d122065":"## **Importing libraries and reading data set**\n<hr>\nIt is important to understand the data, and to ensure that data is correctly formatted and of good quality.\n\nFirst step is importing dependencies and reading the data from the '.csv' file to a data frame.","b461f160":"### **Crime map of Westminster**\n<hr>\nSimilarly, to the crime map above, the map below shows crimes in Westminster. This time the map has a layer control where the individual crime type markes can turn on\/off. This map can be customised to the desired Borough.","8e64bf52":"The summary and tree map below show the crimes in Westminster (Borough with most reported crimes). It is interesting to note that about a third of the reported crimes in the Borough are related to Burglary, Theft or Robbery in different forms. The area is a very touristic zone where tourists are targeted for robbery. Despite that, Anti-social behaviour is still the main offence.","041e5340":"# **Crime Analysis of London Boroughs**","165d8d2a":"The figure below shows again crimes reported to the police in the third quarter of 2020 but in a tree map form. This plot helps to understand that Anti-social behaviour counts for a bit more than a quarter of the offences reported to the police.","546c7817":"## **Data analysis**\n<hr>\nThis section shows plots obtained from the data analysis.","4644055e":"## **Data check and pre-processing**\n<hr>\nThe data set is then checked for the data set shape and data types.","13e2df46":"The dictionary above numbers the Boroughs (32 Boroughs + the City of London), crimes outside these 33 locations are excluded in this analysis and removed below with crimes where no location was provided.","b01f2711":"## **Data overview**\n<hr>\nThe data set was downloaded as a single .csv file, containing street-level crime, outcome, and stop and search information, broken down by police force and 2011 lower layer super output area (LSOA).\nThe data set was customised to range of the last 3 available months at the time of the analysis (July to September 2020) and for the Metropolitan Police service only.","1e7a2357":"## **Further work**\n<hr>\nExtend the analysis to a larger period.\n\nMake an interactive map with all the Boroughs.","0b84c94b":"### **Crime map of London Boroughs**\n<hr>\nThe map below shows the location of the first crime committed in each Borough. In other words, there are 33 markers on the map, each one represents the first crime found in the dataset for each Borough. It was decided this way because otherwise the number of markers are rather large.\n\nEach marker shows the 'Borough' where the crime was committed, the location of the crime and the crime type.","266d3724":"The data set is completed by filling the missing values and dropping unnecessary data below.","b76b8fee":"### **Boroughs with more offences reported**\n<hr>\nPlot below illustrates the number of offences reported to the police in the third quarter of 2020. Westminster leads the list with more crimes reported and the City of London is the area with less crime reported.","fcec585f":"### **Resolutions for crime**\n<hr>\nCrimes resolution are summarised and plotted below. The important points to detail here are that in general terms, one third of the crimes have 'No outcome available', nearly another third of the crimes are 'Under investigation' and lastly, nearly another third of the crimes have 'Investigation complete; no suspect identified'. The rest of the outcomes (about 4%) are 'Awaiting outcome', 'Local resolution' or warning\/caution given to the offender.","a3295012":"### **Major crimes in the different London Boroughs**\n<hr>\nThe plot below shows the number of crimes reported to the police in the third quarter of 2020. Anti-social behaviour leads the offences with about 100000 reports for this period. Violence and sexual offences come second with about 60000 reports.","eaa2a006":"## **Introduction**\n<hr>\nI created this project because I need to relocate. I wanted to check the crimes in the different London Boroughs to decide where to move to.\n\nThere are different sources of information for crime data but, I chose to use a data set from https:\/\/data.police.uk which includes open data about crime and policing in England, Wales and Northern Ireland.\n\nIn this notebook, I use data for the third quarter of 2020, which was the latest information available at the time of the analysis. Note that this can be customised to include more data but a larger period results in a very large data set. Since the purpose of the project is to analyse crime in the different London Boroughs only information from the Metropolitan Police Service is included in the data set."}}