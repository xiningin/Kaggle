{"cell_type":{"ebeff792":"code","7ce50e24":"code","5ca14c3e":"code","ebd1f82a":"code","1f542ccf":"code","710339b3":"code","0e72bd91":"code","3fa0250d":"code","32a5ea18":"code","392956c2":"code","50a6fd16":"code","e13bb2ac":"code","bc2213c0":"code","1693f26e":"code","77037bef":"markdown","6c7a6d1f":"markdown","0733f4a9":"markdown","4c45126a":"markdown","5054fa29":"markdown","119ffc32":"markdown","798088d1":"markdown","478e6e5b":"markdown","52e82c34":"markdown","844e3dd2":"markdown","3b25cd21":"markdown"},"source":{"ebeff792":"# Setup feedback system\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.time_series.ex1 import *\n\n# Setup notebook\nfrom pathlib import Path\nfrom learntools.time_series.style import *  # plot style settings\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\n\n\ndata_dir = Path('..\/input\/ts-course-data\/')\ncomp_dir = Path('..\/input\/store-sales-time-series-forecasting')\n\nbook_sales = pd.read_csv(\n    data_dir \/ 'book_sales.csv',\n    index_col='Date',\n    parse_dates=['Date'],\n).drop('Paperback', axis=1)\nbook_sales['Time'] = np.arange(len(book_sales.index))\nbook_sales['Lag_1'] = book_sales['Hardcover'].shift(1)\nbook_sales = book_sales.reindex(columns=['Hardcover', 'Time', 'Lag_1'])\n\nar = pd.read_csv(data_dir \/ 'ar.csv')\n\ndtype = {\n    'store_nbr': 'category',\n    'family': 'category',\n    'sales': 'float32',\n    'onpromotion': 'uint64',\n}\nstore_sales = pd.read_csv(\n    comp_dir \/ 'train.csv',\n    dtype=dtype,\n    parse_dates=['date'],\n    infer_datetime_format=True,\n)\nstore_sales = store_sales.set_index('date').to_period('D')\nstore_sales = store_sales.set_index(['store_nbr', 'family'], append=True)\naverage_sales = store_sales.groupby('date').mean()['sales']","7ce50e24":"book_sales.head()","5ca14c3e":"ar.head()","ebd1f82a":"store_sales.head()","1f542ccf":"fig, ax = plt.subplots()\nax.plot('Time', 'Hardcover', data=book_sales, color='0.75')\nax = sns.regplot(x='Time', y='Hardcover', data=book_sales, ci=None, scatter_kws=dict(color='0.25'))\nax.set_title('Time Plot of Hardcover Sales');","710339b3":"ar.head()","0e72bd91":"fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(11, 5.5), sharex=True)\nax1.plot(ar['ar1'])\nax1.set_title('AR 1')\nax2.plot(ar['ar2'])\nax2.set_title('AR 2');","3fa0250d":"average_sales.head()","32a5ea18":"from sklearn.linear_model import LinearRegression\n\ndf = average_sales.to_frame()\ntime = np.arange(len(df.index))\n\ndf['time'] = time ","392956c2":"df.head()","50a6fd16":"X = df.loc[:,[\"time\"]]  # features\ny = df.loc[:,\"sales\"]  # target\n\n# Train the model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Store the fitted values as a time series with the same time index asthe training data\ny_pred = pd.Series(model.predict(X), index=X.index)","e13bb2ac":"ax = y.plot(**plot_params, alpha=0.5)\nax = y_pred.plot(ax=ax, linewidth=3)\nax.set_title('Time Plot of Total Store Sales');","bc2213c0":"df = average_sales.to_frame()\n\n# We will Create a lag feature from the target 'sales'\nlag_1 = df['sales'].shift(1)\n\ndf['lag_1'] = lag_1  # add to dataframe\n\nX = df.loc[:, ['lag_1']].dropna()  # features\ny = df.loc[:, 'sales']  # target\ny, X = y.align(X, join='inner')  # drop corresponding values in target\n\n# a LinearRegression instance and fit it to X and y.\nmodel = LinearRegression().fit(X,y)\n\n# Store the fitted values as a time series with the same time index as the training data\ny_pred = pd.Series(model.predict(X), index=X.index)","1693f26e":"fig, ax = plt.subplots()\nax.plot(X['lag_1'], y, '.', color='0.25')\nax.plot(X['lag_1'], y_pred)\nax.set(aspect='equal', ylabel='sales', xlabel='lag_1', title='Lag Plot of Average Sales');","77037bef":"-------------------------------------------------------------------------------\n\n# 4) Fit a lag feature to Store Sales\n\nNow we will create a linear regression model with a lag feature on the series of average product sales. The target is in a column of `df` called `'sales'`.","6c7a6d1f":"# Introduction #","0733f4a9":"**This notebook is an exercise in the [Time Series](https:\/\/www.kaggle.com\/learn\/time-series) course.  You can reference the tutorial at [this link](https:\/\/www.kaggle.com\/ryanholbrook\/linear-regression-with-time-series).**\n\n---\n","4c45126a":"--------------------------------------------------------------------------------\n\nOne advantage linear regression has over more complicated algorithms is that the models it creates are *explainable* -- it's easy to interpret what contribution each feature makes to the predictions. In the model `target = weight * feature + bias`, the `weight` tells you by how much the `target` changes on average for each unit of change in the `feature`.","5054fa29":"-------------------------------------------------------------------------------\n\nNow we'll get started with the *Store Sales - Time Series Forecasting* competition data. The entire dataset comprises almost 1800 series recording store sales across a variety of product families from 2013 into 2017. We'll just work with a single series (`average_sales`) of the average sales each day.\n\n# 3) Fit a time-step feature\n\nWe will create a linear regression model with a time-step feature on the series of average product sales. The target is in a column called `'sales'`.","119ffc32":"A change of 6 steps in Time corresponds to an average change of **6 * 3.33 = 19.98** in Hardcover sales.","798088d1":"One of these series has the equation `target = 0.95 * lag_1 + error` and the other has the equation `target = -0.95 * lag_1 + error`, differing only by the sign on the lag feature.\n\n\nAR 1 was generated by **target = 0.95 * lag_1 + error** and AR 2 was generated by **target = -0.95 * lag_1 + error.**","478e6e5b":"-------------------------------------------------------------------------------\n\nInterpreting the regression coefficients can help us recognize serial dependence in a time plot. Consider the model `target = weight * lag_1 + error`, where `error` is random noise and `weight` is a number between -1 and 1. The `weight` in this case tells you how likely the next time step will have the same sign as the previous time step: a `weight` close to 1 means `target` will likely have the same sign as the previous step, while a `weight` close to -1 means `target` will likely have the opposite sign.\n\n# 2) Interpret linear regression with a lag feature\n\nNow we will see two series generated according to the model just described.","52e82c34":"# Keep Going #\n\nIf you want to learn more about Linear Regression, you can check [**Linear Models - Regression - A Complete Guide Notebook**](https:\/\/www.kaggle.com\/berkayalan\/linear-models-regression-a-complete-guide) .","844e3dd2":"# 1) Interpret linear regression with the time dummy\n\nThe linear regression line has an equation of (approximately) `Hardcover = 3.33 * Time + 150.5`. Over 6 days how much on average would you expect hardcover sales to change?","3b25cd21":"Run the next cell if you'd like to see the result."}}