{"cell_type":{"9e92f93d":"code","d016cd2b":"code","fe4f619a":"code","49d486e0":"code","609d20d5":"code","0d126780":"code","e4d5a82b":"code","f66e0ff8":"code","a5beae15":"code","caf121d1":"code","749caa97":"code","36d33415":"code","1e2cc89f":"code","7cd6899a":"code","c4e2ee1e":"code","854f009c":"code","96b3e0b8":"code","214f1ba4":"code","6b7ac61e":"code","b8187470":"code","9f4fff15":"code","76ac914c":"code","c7658bc5":"code","d99204d5":"code","ec48b265":"code","ce8bf5ef":"code","bce2c518":"code","97c30a2b":"code","a1c0f6d8":"code","389eaf24":"code","55683102":"code","a3e9d968":"code","fc64b290":"code","5c9be58e":"code","9d354166":"code","1a0fce30":"code","30a9a39d":"code","d47889d7":"code","14485cc5":"code","55e9a4d1":"code","e9766c9a":"code","314cd73d":"markdown","3187211b":"markdown","c25c2174":"markdown","98888dfd":"markdown","acb56340":"markdown","0868d7fd":"markdown","d109e238":"markdown","a1afce4d":"markdown","5a1b9fc6":"markdown"},"source":{"9e92f93d":"KYOTO_LEXICON_PATH = '\/kaggle\/input\/japaneseenglish-bilingual-corpus\/kyoto_lexicon.csv'\n\nBATCH_SIZE = 20\nEPOCHS = 10\n\nD_MODEL = 512\nHEADS = 8\nN = 6","d016cd2b":"!pip install mecab-python3","fe4f619a":"import torch\nfrom torch import nn\nfrom torch.nn import functional as F\nimport numpy as np\nimport pandas as pd\nimport spacy\nimport torchtext\nfrom torchtext import data\nfrom torchtext.data import Field, BucketIterator, TabularDataset\nfrom sklearn.model_selection import train_test_split\nimport math\nimport copy\nfrom datetime import datetime\n# from janome.tokenizer import Tokenizer\n\nif torch.cuda.is_available():\n    device = 'cuda:0'\n    torch.set_default_tensor_type('torch.cuda.FloatTensor')\nelse:\n    device = 'cpu'\nprint(f'Running on device: {device}')","49d486e0":"kyoto_lexicon_df = pd.read_csv(KYOTO_LEXICON_PATH, error_bad_lines=False)","609d20d5":"kyoto_lexicon_df.columns","0d126780":"kyoto_lexicon_df.head(10)","e4d5a82b":"len(kyoto_lexicon_df['\u65e5\u672c\u8a9e'])","f66e0ff8":"len(kyoto_lexicon_df['\u82f1\u8a9e'])","a5beae15":"kyoto_lexicon_df = kyoto_lexicon_df[['\u65e5\u672c\u8a9e', '\u82f1\u8a9e']]\nkyoto_lexicon_df.columns = ['Japanese', 'English']","caf121d1":"kyoto_lexicon_df.dropna(inplace=True)","749caa97":"kyoto_lexicon_df['Japanese'].iloc[123]","36d33415":"# jap_sentences = kyoto_lexicon_df['\u65e5\u672c\u8a9e']\n# tokenizer = Tokenizer()\n# [x.surface for x in tokenizer.tokenize(jap_sentences.iloc[0])]","1e2cc89f":"kyoto_lexicon_df.head()","7cd6899a":"JA = spacy.blank('ja')\nEN = spacy.load('en')","c4e2ee1e":"def tokenize_ja(sentence):\n    return [tok.text for tok in JA.tokenizer(sentence)]\n\ndef tokenize_en(sentence):\n    return [tok.text for tok in EN.tokenizer(sentence)]","854f009c":"JA_TEXT = Field(tokenize=tokenize_ja)\nEN_TEXT = Field(tokenize=tokenize_en, init_token='<sos>', eos_token='<eos>')","96b3e0b8":"train, val = train_test_split(kyoto_lexicon_df, test_size=0.3)\ntrain.to_csv('train.csv', index=False)\nval.to_csv('val.csv', index=False)","214f1ba4":"data_fields = [('Japanese', JA_TEXT), ('English', EN_TEXT)]\n\ntrain, val = TabularDataset.splits(\n    path='.\/',\n    train='train.csv',\n    validation='val.csv',\n    format='csv',\n    fields=data_fields\n)","6b7ac61e":"JA_TEXT.build_vocab(train, val)\nEN_TEXT.build_vocab(train, val)","b8187470":"train_iter = BucketIterator(\n    train,\n    batch_size=BATCH_SIZE,\n    sort_key=lambda x: len(x.English),\n    shuffle=True\n)","9f4fff15":"batch = next(iter(train_iter))\nprint(batch.English)","76ac914c":"# code from http:\/\/nlp.seas.harvard.edu\/2018\/04\/03\/attention.html \n# read text after for description of what it does\n\nglobal max_src_in_batch, max_tgt_in_batch\n\ndef batch_size_fn(new, count, sofar):\n    \"Keep augmenting batch and calculate total number of tokens + padding.\"\n    global max_src_in_batch, max_tgt_in_batch\n    if count == 1:\n        max_src_in_batch = 0\n        max_tgt_in_batch = 0\n    max_src_in_batch = max(max_src_in_batch,  len(new.Japanese))\n    max_tgt_in_batch = max(max_tgt_in_batch,  len(new.English) + 2)\n    src_elements = count * max_src_in_batch\n    tgt_elements = count * max_tgt_in_batch\n    return max(src_elements, tgt_elements)\n\nclass MyIterator(data.Iterator):\n    def create_batches(self):\n        if self.train:\n            def pool(d, random_shuffler):\n                for p in data.batch(d, self.batch_size * 100):\n                    p_batch = data.batch(\n                        sorted(p, key=self.sort_key),\n                        self.batch_size, self.batch_size_fn)\n                    for b in random_shuffler(list(p_batch)):\n                        yield b\n            self.batches = pool(self.data(), self.random_shuffler)\n            \n        else:\n            self.batches = []\n            for b in data.batch(self.data(), self.batch_size,\n                                          self.batch_size_fn):\n                self.batches.append(sorted(b, key=self.sort_key))","c7658bc5":"train_iter = MyIterator(\n    train,\n    batch_size=1300,\n    device=0,\n    repeat=False,\n    sort_key=lambda x: (len(x.Japanese), len(x.English)),\n    batch_size_fn=batch_size_fn,\n    train=True,\n    shuffle=True\n)","d99204d5":"class Embedder(nn.Module):\n    def __init__(self, vocab_size, d_model):\n        super(Embedder, self).__init__()\n        self.embed = nn.Embedding(vocab_size, d_model)\n        \n    def forward(self, x):\n        return self.embed(x)","ec48b265":"class PositionalEncoder(nn.Module):\n    def __init__(self, d_model, max_seq_len = 80):\n        super().__init__()\n        self.d_model = d_model\n        \n        # create constant 'pe' matrix with values dependant on \n        # pos and i\n        pe = torch.zeros(max_seq_len, d_model)\n        for pos in range(max_seq_len):\n            for i in range(0, d_model, 2):\n                pe[pos, i] = \\\n                math.sin(pos \/ (10000 ** ((2 * i)\/d_model)))\n                pe[pos, i + 1] = \\\n                math.cos(pos \/ (10000 ** ((2 * (i + 1))\/d_model)))\n                \n        pe = pe.unsqueeze(0)\n        self.register_buffer('pe', pe)\n    \n    def forward(self, x):\n        # make embeddings relatively larger\n        x = x * math.sqrt(self.d_model)\n        #add constant to embedding\n        seq_len = x.size(1)\n        x = x + torch.autograd.Variable(self.pe[:,:seq_len], \\\n        requires_grad=False).to(device)\n        return x","ce8bf5ef":"# batch = next(iter(train_iter))\n# input_seq = batch.Japanese.transpose(0, 1)\n# input_pad = JA_TEXT.vocab.stoi['<pad>']\n# # creates mask with 0s wherever there is padding in the input\n# input_msk = (input_seq != input_pad).unsqueeze(1)","bce2c518":"# # create mask as before\n# target_seq = batch.English.transpose(0, 1)\n# target_pad = EN_TEXT.vocab.stoi['<pad>']\n# target_msk = (target_seq != target_pad).unsqueeze(1)\n# size = target_seq.size(1) # get seq_len for matrix\n# nopeak_mask = np.triu(np.ones((1, size, size)), k=1).astype(np.uint8)\n# nopeak_mask = torch.autograd.Variable(torch.from_numpy(nopeak_mask) == 0)\n# target_msk = target_msk & nopeak_mask","97c30a2b":"def create_masks(input_seq, target_seq):\n    input_pad = JA_TEXT.vocab.stoi['<pad>']\n    # creates mask with 0s wherever there is padding in the input\n    input_msk = (input_seq != input_pad).unsqueeze(1)\n    \n    target_pad = EN_TEXT.vocab.stoi['<pad>']\n    target_msk = (target_seq != target_pad).unsqueeze(1)\n    size = target_seq.size(1) # get seq_len for matrix\n    nopeak_mask = np.triu(np.ones((1, size, size)), k=1).astype(np.uint8)\n    nopeak_mask = torch.autograd.Variable(torch.from_numpy(nopeak_mask) == 0).to(device)\n    target_msk = target_msk & nopeak_mask\n    \n    return input_msk, target_msk","a1c0f6d8":"class MultiHeadAttention(nn.Module):\n    def __init__(self, heads, d_model, dropout = 0.1):\n        super().__init__()\n        \n        self.d_model = d_model\n        self.d_k = d_model \/\/ heads\n        self.h = heads\n        \n        self.q_linear = nn.Linear(d_model, d_model)\n        self.v_linear = nn.Linear(d_model, d_model)\n        self.k_linear = nn.Linear(d_model, d_model)\n        self.dropout = nn.Dropout(dropout)\n        self.out = nn.Linear(d_model, d_model)\n    \n    def forward(self, q, k, v, mask=None):\n        \n        bs = q.size(0)\n        \n        # perform linear operation and split into h heads\n        \n        k = self.k_linear(k).view(bs, -1, self.h, self.d_k)\n        q = self.q_linear(q).view(bs, -1, self.h, self.d_k)\n        v = self.v_linear(v).view(bs, -1, self.h, self.d_k)\n        \n        # transpose to get dimensions bs * h * sl * d_model\n       \n        k = k.transpose(1,2)\n        q = q.transpose(1,2)\n        v = v.transpose(1,2)\n# calculate attention using function we will define next\n        scores = attention(q, k, v, self.d_k, mask, self.dropout)\n        \n        # concatenate heads and put through final linear layer\n        concat = scores.transpose(1,2).contiguous()\\\n        .view(bs, -1, self.d_model)\n        \n        output = self.out(concat)\n    \n        return output","389eaf24":"def attention(q, k, v, d_k, mask=None, dropout=None):\n    scores = torch.matmul(q, k.transpose(-2, -1)) \/  math.sqrt(d_k)\n    if mask is not None:\n        mask = mask.unsqueeze(1)\n        scores = scores.masked_fill(mask == 0, -1e9)\n    scores = F.softmax(scores, dim=-1)\n\n    if dropout is not None:\n        scores = dropout(scores)\n\n    output = torch.matmul(scores, v)\n    return output","55683102":"class FeedForward(nn.Module):\n    def __init__(self, d_model, d_ff=2048, dropout = 0.1):\n        super().__init__() \n        # We set d_ff as a default to 2048\n        self.linear_1 = nn.Linear(d_model, d_ff)\n        self.dropout = nn.Dropout(dropout)\n        self.linear_2 = nn.Linear(d_ff, d_model)\n    def forward(self, x):\n        x = self.dropout(F.relu(self.linear_1(x)))\n        x = self.linear_2(x)\n        return x","a3e9d968":"class Norm(nn.Module):\n    def __init__(self, d_model, eps = 1e-6):\n        super().__init__()\n    \n        self.size = d_model\n        # create two learnable parameters to calibrate normalisation\n        self.alpha = nn.Parameter(torch.ones(self.size))\n        self.bias = nn.Parameter(torch.zeros(self.size))\n        self.eps = eps\n    def forward(self, x):\n        norm = self.alpha * (x - x.mean(dim=-1, keepdim=True)) \\\n        \/ (x.std(dim=-1, keepdim=True) + self.eps) + self.bias\n        return norm","fc64b290":"# build an encoder layer with one multi-head attention layer and one # feed-forward layer\nclass EncoderLayer(nn.Module):\n    def __init__(self, d_model, heads, dropout = 0.1):\n        super().__init__()\n        self.norm_1 = Norm(d_model)\n        self.norm_2 = Norm(d_model)\n        self.attn = MultiHeadAttention(heads, d_model)\n        self.ff = FeedForward(d_model)\n        self.dropout_1 = nn.Dropout(dropout)\n        self.dropout_2 = nn.Dropout(dropout)\n        \n    def forward(self, x, mask):\n        x2 = self.norm_1(x)\n        x = x + self.dropout_1(self.attn(x2,x2,x2,mask))\n        x2 = self.norm_2(x)\n        x = x + self.dropout_2(self.ff(x2))\n        return x\n    \n# build a decoder layer with two multi-head attention layers and\n# one feed-forward layer\nclass DecoderLayer(nn.Module):\n    def __init__(self, d_model, heads, dropout=0.1):\n        super().__init__()\n        self.norm_1 = Norm(d_model)\n        self.norm_2 = Norm(d_model)\n        self.norm_3 = Norm(d_model)\n        \n        self.dropout_1 = nn.Dropout(dropout)\n        self.dropout_2 = nn.Dropout(dropout)\n        self.dropout_3 = nn.Dropout(dropout)\n        \n        self.attn_1 = MultiHeadAttention(heads, d_model)\n        self.attn_2 = MultiHeadAttention(heads, d_model)\n        self.ff = FeedForward(d_model).to(device)\n\n    def forward(self, x, e_outputs, src_mask, trg_mask):\n            x2 = self.norm_1(x)\n            x = x + self.dropout_1(self.attn_1(x2, x2, x2, trg_mask))\n            x2 = self.norm_2(x)\n            x = x + self.dropout_2(self.attn_2(x2, e_outputs, e_outputs,\n            src_mask))\n            x2 = self.norm_3(x)\n            x = x + self.dropout_3(self.ff(x2))\n            return x\n\n# We can then build a convenient cloning function that can generate multiple layers:\ndef get_clones(module, N):\n    return nn.ModuleList([copy.deepcopy(module) for i in range(N)])","5c9be58e":"class Encoder(nn.Module):\n    def __init__(self, vocab_size, d_model, N, heads):\n        super().__init__()\n        self.N = N\n        self.embed = Embedder(vocab_size, d_model)\n        self.pe = PositionalEncoder(d_model)\n        self.layers = get_clones(EncoderLayer(d_model, heads), N)\n        self.norm = Norm(d_model)\n    def forward(self, src, mask):\n        x = self.embed(src)\n        x = self.pe(x)\n        for i in range(N):\n            x = self.layers[i](x, mask)\n        return self.norm(x)\n    \nclass Decoder(nn.Module):\n    def __init__(self, vocab_size, d_model, N, heads):\n        super().__init__()\n        self.N = N\n        self.embed = Embedder(vocab_size, d_model)\n        self.pe = PositionalEncoder(d_model)\n        self.layers = get_clones(DecoderLayer(d_model, heads), N)\n        self.norm = Norm(d_model)\n    def forward(self, trg, e_outputs, src_mask, trg_mask):\n        x = self.embed(trg)\n        x = self.pe(x)\n        for i in range(self.N):\n            x = self.layers[i](x, e_outputs, src_mask, trg_mask)\n        return self.norm(x)","9d354166":"class Transformer(nn.Module):\n    def __init__(self, src_vocab, trg_vocab, d_model, N, heads):\n        super().__init__()\n        self.encoder = Encoder(src_vocab, d_model, N, heads)\n        self.decoder = Decoder(trg_vocab, d_model, N, heads)\n        self.out = nn.Linear(d_model, trg_vocab)\n    def forward(self, src, trg, src_mask, trg_mask):\n        e_outputs = self.encoder(src, src_mask)\n        d_output = self.decoder(trg, e_outputs, src_mask, trg_mask)\n        output = self.out(d_output)\n        return output\n# we don't perform softmax on the output as this will be handled \n# automatically by our loss function","1a0fce30":"src_vocab = len(JA_TEXT.vocab)\ntrg_vocab = len(EN_TEXT.vocab)\nmodel = Transformer(src_vocab, trg_vocab, D_MODEL, N, HEADS)\n\nfor p in model.parameters():\n    if p.dim() > 1:\n        nn.init.xavier_uniform_(p)\n\noptim = torch.optim.Adam(model.parameters(), lr=0.0001, betas=(0.9, 0.98), eps=1e-9)","30a9a39d":"input_pad = JA_TEXT.vocab.stoi['<pad>']\ntarget_pad = EN_TEXT.vocab.stoi['<pad>']","d47889d7":"def train_model(model, epochs, print_every=50):\n    \n    model.train()\n    \n    start = datetime.now()\n    temp = start\n    \n    total_loss = 0\n    \n    for epoch in range(epochs):\n       \n        for i, batch in enumerate(train_iter):\n            src = batch.Japanese.transpose(0, 1)\n            trg = batch.English.transpose(0, 1)\n            # the French sentence we input has all words except\n            # the last, as it is using each word to predict the next\n            \n            trg_input = trg[:, :-1]\n            \n            # the words we are trying to predict\n            \n            targets = trg[:, 1:].contiguous().view(-1)\n            \n            # create function to make masks using mask code above\n            \n            src_mask, trg_mask = create_masks(src, trg_input)\n            \n            preds = model(src, trg_input, src_mask, trg_mask)\n            \n            optim.zero_grad()\n            \n            loss = F.cross_entropy(\n                preds.view(-1, preds.size(-1)),\n                targets,\n                ignore_index=target_pad\n            )\n            loss.backward()\n            optim.step()\n            \n            total_loss += loss.item()\n            if (i + 1) % print_every == 0:\n                loss_avg = total_loss \/ print_every\n                print(\"time = {}, epoch {}, iter = {}, loss = {}, {} per {} iters\".format(\n                    (datetime.now() - start) \/\/ 60,\n                    epoch + 1,\n                    i + 1,\n                    loss_avg,\n                    datetime.now() - temp,\n                    print_every\n                ))\n                total_loss = 0\n                temp = datetime.now()\n    \n        print()","14485cc5":"model.to(device)\ntrain_model(model, EPOCHS)","55e9a4d1":"def translate(model, src, max_len=80, custom_sentence=False):\n    \n    model.eval()\n    \n    if custom_sentence == True:\n        src = tokenize_ja(src)\n        src = torch.autograd.Variable(torch.LongTensor([[JA_TEXT.vocab.stoi[tok] for tok in src]])).to(device)\n    \n    src_mask = (src != input_pad).unsqueeze(-2)\n    e_outputs = model.encoder(src, src_mask)\n\n    outputs = torch.zeros(max_len).type_as(src.data)\n    outputs[0] = torch.LongTensor([EN_TEXT.vocab.stoi['<sos>']])\n    \n    for i in range(1, max_len):    \n        trg_mask = np.triu(np.ones((1, i, i)), k=1).astype('uint8')\n        trg_mask = torch.autograd.Variable(torch.from_numpy(trg_mask) == 0).to(device)\n\n        out = model.out(\n            model.decoder(\n                outputs[:i].unsqueeze(0),\n                e_outputs,\n                src_mask,\n                trg_mask\n            )\n        )\n        out = F.softmax(out, dim=-1)\n        val, ix = out[:, -1].data.topk(1)\n\n        outputs[i] = ix[0][0]\n        if ix[0][0] == EN_TEXT.vocab.stoi['<eos>']:\n            break\n\n    return ' '.join([EN_TEXT.vocab.itos[ix] for ix in outputs[:i]])","e9766c9a":"translate(model, '\u4eac\u90fd\u306f\u6771\u4eac\u306e\u8857\u3067\u3059', custom_sentence=True)","314cd73d":"# Construct the Transformer model","3187211b":"Creating Masks","c25c2174":"Let's have a look at the iterator","98888dfd":"# Create training and validation sets","acb56340":"# Hack TorchText to make it hugely more efficient","0868d7fd":"The positional encoding","d109e238":"Embedding","a1afce4d":"Build Transformer class","5a1b9fc6":"# Build tokenizers for Japanese and English"}}