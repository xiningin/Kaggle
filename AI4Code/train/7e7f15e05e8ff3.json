{"cell_type":{"3bbfbd7e":"code","48023030":"code","2f608468":"code","ed19e424":"code","6339934f":"code","803915c6":"code","a00ff6fe":"code","089e0ed0":"code","acbdf232":"code","5a30b0f5":"code","27056041":"code","320837af":"code","e26f3a68":"code","848722b4":"code","f0ac1421":"code","4e4b69cc":"code","8fd56dad":"markdown","bc5cbbb2":"markdown","64c0cf28":"markdown","e1fc750e":"markdown","6bcbe5f4":"markdown"},"source":{"3bbfbd7e":"# gensim.models.wrappers.fasttext revised to gensim.models.fasttext\n!git clone https:\/\/github.com\/rkuo2000\/mindreading-coling\n%cd mindreading-coling","48023030":"!pip install ktrain","2f608468":"!pip install openpyxl ## to substitute xlrd","ed19e424":"import pandas as pd\nimport numpy as np\nimport scipy\nimport nltk\nimport spacy\nimport gensim\nimport glob\nimport csv\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport sklearn\nfrom sklearn.model_selection import cross_val_score\nimport sklearn.model_selection\nimport sklearn.pipeline\nimport re\nfrom sklearn import svm\nfrom sklearn import *\nfrom sklearn.feature_selection import SelectKBest, VarianceThreshold\nfrom sklearn.feature_selection import chi2\nfrom sklearn.base import BaseEstimator, TransformerMixin\nimport gensim.models.fasttext\nfrom scipy import sparse\nimport tensorflow_datasets as tfds\nimport tensorflow as tf\nimport collections\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom sklearn.model_selection import LeaveOneOut,KFold,train_test_split\nimport ktrain\nfrom ktrain import text\nfrom sklearn.metrics import accuracy_score\n\n# Custom imports\nfrom mr_generic_scripts import *\nfrom mr_cls_Transformer import *","6339934f":"# Path to xlsx files folder\npath_to_raw_files = 'Data\/raw\/'","803915c6":"# Get the datasets in dataframes\na_dataset = mr_get_data(path_to_raw_files)\nqa_dataset = mr_get_qa_data(path_to_raw_files)","a00ff6fe":"# Sanity check\nprint(a_dataset[0][1][:5])\nprint(qa_dataset[0][1][:5])\nprint(len(a_dataset[0][1]))","089e0ed0":"tr_cls = MR_transformer(text_cols,[7,8,9,10,11,12,13,14],[0,1,2],20)\ntr_cls.mr_set_eval_vars(True,True,False)","acbdf232":"def mr_proc_results(raw_results):\n    # Process the results from the 10 runs\n    # result format: [acc, acc per q, acc per age], [f1, f1 per q, f1 per age]\n    # Ignore ages as they seem to be mostly consistent with global average\n    # Ignore accs per question and age as averaging them seems to be consistent with global average\n    # Report global acc, global macro f1, average of macro f1 per question\n    pr_results = [[acc_score, f1_score,round(sum(qa_s)\/11,2),round(sum(qf_s)\/11,2)] \n                for ([acc_score, qa_s, aa_s], [f1_score, qf_s, af_s]) in raw_results]\n    \n    # Throw the list in an np array\n    pr_arr = np.array(pr_results)\n\n    # Print the results\n    pp = pprint.PrettyPrinter(indent=4)\n\n    print(\"Acc, F1, Avg-F1-Per-Q\")\n    pp.pprint(pr_results)\n    pp.pprint(np.mean(pr_arr,axis=0))\n    \n    \n    print(\"\\nAcc per question (avg over 10 runs)\")\n    # Get the result per question\n    pr_qa_results = [[qa_s] for ([acc_score, qa_s, aa_s], [f1_score, qf_s, af_s]) in raw_results]\n    pr_qa_arr = np.array(pr_qa_results)\n    avg_qa = np.mean(pr_qa_arr,axis=0).tolist()\n    print(' & '.join([str(round(res,2)) for res in avg_qa[0]]))\n    #pp.pprint(np.mean(pr_qa_arr,axis=0))\n    \n    print(\"\\nF1 per question (avg over 10 runs)\")\n    pr_qf_results = [[qf_s] for ([acc_score, qa_s, aa_s], [f1_score, qf_s, af_s]) in raw_results]\n    pr_qf_arr = np.array(pr_qf_results)\n    avg_qf = np.mean(pr_qf_arr,axis=0).tolist()\n    print(' & '.join([str(round(res,2)) for res in avg_qf[0]]))\n    #pp.pprint(np.mean(pr_qf_arr,axis=0))","5a30b0f5":"# 10 fold cross validation, original dataset, without the question\n# 25% split for validation (each run is 67.5 \/ 22.5 \/ 10 for train \/ val \/ test)\nresults_1 = tr_cls.mr_kfold_train_test(a_dataset[-1][1],0.25,10)","27056041":"import pprint\npp = pprint.PrettyPrinter(indent=4)\npp.pprint(results_1)","320837af":"mr_proc_results(results_1)","e26f3a68":"# change the model parameters to set max sent len to 35\ntr_cls.mr_set_model_vars(text_cols,[7,8,9,10,11,12,13,14],[0,1,2],35)","848722b4":"results_2 = tr_cls.mr_kfold_train_test(qa_dataset[-1][1],0.25,10)","f0ac1421":"pp.pprint(results_2)","4e4b69cc":"mr_proc_results(results_2)","8fd56dad":"### MIND-CA examples\n![image.png](attachment:f1ece80b-67ea-43bb-a422-2bf401cbed81.png)","bc5cbbb2":"## Transformer_Class.ipynb","64c0cf28":"## Repro [Github](https:\/\/github.com\/venelink\/mindreading-coling)","e1fc750e":"## Paper: [\"What is on your mind?\" Automated Scoring of Mindreading in Childhood and Early Adolescence](https:\/\/arxiv.org\/abs\/2011.08035)","6bcbe5f4":"# Mindreading Coling w Transformer "}}