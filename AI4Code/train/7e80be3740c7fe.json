{"cell_type":{"798c98bf":"code","b650c613":"code","ffd62c45":"code","dae25795":"code","6d992248":"code","e1a94ffd":"code","c5d280e6":"code","97a6ebad":"code","9466780b":"code","d4b7a7ab":"code","1986037f":"code","3b38e34b":"code","8c6a7143":"code","ee8239f2":"code","e7c03153":"code","b7da6652":"code","9fb9c17f":"code","7eea06c3":"code","a86ef988":"code","a795bcfd":"code","0fc7c794":"code","3d6eb408":"code","e10733a1":"code","d2ecfcf2":"code","7ee044c1":"code","f147389c":"code","29a8882f":"code","68330e67":"code","6914cdb6":"code","aa81a1d0":"code","8ba3641a":"code","2273d821":"code","41547e68":"code","598b9a76":"code","524dc97c":"code","55f74f5d":"code","a0b95392":"code","1cc9b4e3":"code","b2ea005d":"code","30b5d4c1":"code","98e68290":"code","de5d5693":"code","1260912a":"code","a80b70d0":"markdown","8f88a814":"markdown","ead4c5c5":"markdown","1e6be0b0":"markdown","364a964d":"markdown","2242a7a8":"markdown","2d6fc7f5":"markdown","d064b352":"markdown","a09d28b2":"markdown","36573480":"markdown","0d74a3e8":"markdown","e7cff4d3":"markdown","763c9b38":"markdown","8b21a0a2":"markdown","0ab7e20c":"markdown","dc95f143":"markdown","182bafbc":"markdown","05281a7d":"markdown","529cb5e7":"markdown","5d0d49ae":"markdown","bbc83834":"markdown","e06513f2":"markdown","acc183b7":"markdown"},"source":{"798c98bf":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestRegressor","b650c613":"#test = pd.read_csv('https:\/\/raw.githubusercontent.com\/yuanic\/msba\/master\/hw1_titanic_test.csv')\n#train = pd.read_csv('https:\/\/raw.githubusercontent.com\/yuanic\/msba\/master\/hw1_titanic_train.csv')\n\ntest = pd.read_csv(\"..\/input\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/train.csv\")","ffd62c45":"train.head()","dae25795":"train.describe()","6d992248":"train.isnull().sum()","e1a94ffd":"plt.figure(figsize=(8,4))\nsns.distplot(train[train['Sex']=='male']['Age'].dropna(),color=\"b\")\nsns.distplot(train[train['Sex']=='female']['Age'].dropna(),color=\"r\")\nplt.title('Distribution of Age by Gender',fontsize=16,fontweight='bold')","c5d280e6":"import numpy as np\nimport matplotlib.pyplot as plt\n\nsurvival_color=['grey','red']\nsns.set_context(\"paper\", font_scale=1.5)\nfig = plt.figure(figsize=(20,5))\nplt.subplot(1, 3, 1)\ntotal = float(len(train)) \nax = sns.countplot(x=\"Sex\", hue=\"Survived\", data=train,palette=survival_color) # for Seaborn version 0.7 and more\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 5,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\") \nplt.title('Survivors by Sex',fontsize=14,fontweight='bold')\n\nplt.subplot(1, 3, 2)\ntotal = float(len(train)) \nax = sns.countplot(x=\"Pclass\", hue=\"Survived\", data=train,palette=survival_color) # for Seaborn version 0.7 and more                                                  \n\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 5,\n            '{:1.2f}'.format(height),\n            ha=\"center\") \nplt.title('Survivors by Pclass',fontsize=14,fontweight='bold')\n\nplt.subplot(1, 3, 3)\ntotal = float(len(train)) \nax = sns.countplot(x=\"Embarked\", hue=\"Survived\", data=train,palette=survival_color) # for Seaborn version 0.7 and more\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 5,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\") \nplt.title('Survivors by Embarked',fontsize=14, fontweight='bold')","97a6ebad":"def survival_rate(column):\n    categories = train[column].dropna().unique()\n    cat = []\n    survival_rate = []\n    for i in categories:\n        survived = len(train[(train[column] == i) & (train['Survived'] == 1)])\n        total = len(train[(train[column] == i)])\n        cat.append(i)\n        survival_rate.append(survived\/total)\n    output =  pd.DataFrame(\n    {'Category': cat,\n     'Survival Rate': survival_rate\n    })\n    return output","9466780b":"sr_sex = survival_rate('Sex')\nsr_pclass = survival_rate('Pclass')\nsr_embarked = survival_rate('Embarked')","d4b7a7ab":"survival_color=['grey','red']\nsns.set_context(\"paper\", font_scale=1.5)\nfig = plt.figure(figsize=(20,5))\n\nplt.subplot(1, 3, 1)\nax = sns.barplot(x=\"Category\", y=\"Survival Rate\", data=sr_sex , palette=['red']) # for Seaborn version 0.7 and more\nplt.title('Survival Rate by Sex',fontsize=14,fontweight='bold')\nplt.ylabel('Survival Rate')\nplt.xlabel('')\n\n    \nplt.subplot(1, 3, 2)\nax = sns.barplot(x=\"Category\", y=\"Survival Rate\", data=sr_pclass , palette=['red']) # for Seaborn version 0.7 and more\nplt.title('Survival Rate by PClass',fontsize=14,fontweight='bold')\nplt.ylabel('Survival Rate')\nplt.xlabel('')\n\nplt.subplot(1, 3, 3)\nax = sns.barplot(x=\"Category\", y=\"Survival Rate\", data=sr_embarked , palette=['red']) # for Seaborn version 0.7 and more\nplt.title('Survival Rate by Embarked',fontsize=14,fontweight='bold')\nplt.ylabel('Survival Rate')\nplt.xlabel('')\n","1986037f":"sr_sex","3b38e34b":"sr_pclass","8c6a7143":"sr_embarked","ee8239f2":"plt.figure(figsize=(10,6))\nsns.distplot(train[train['Survived']==1]['Age'].dropna(),color='red')\nsns.distplot(train[train['Survived']==0]['Age'].dropna(),color='grey')\nplt.title('Distribution of Age by Survival',fontsize=14,fontweight='bold')","e7c03153":"import math\ndef custom_round(x, base=5):\n    if math.isnan(x):\n      return float('nan')\n    else:\n      return round(x\/base)*base\n    \ntrain['modified_age'] = train['Age'] .apply(lambda x: custom_round(x, base=5))","b7da6652":"sr_age = survival_rate('modified_age')\nfig = plt.figure(figsize=(20,6))\n\nplt.subplot(1, 1, 1)\nax = sns.barplot(x=\"Category\", y=\"Survival Rate\", data=sr_age , palette=['red']) # for Seaborn version 0.7 and more\nplt.title('Survival Rate by Age Buckets',fontsize=22,fontweight='bold')\nplt.ylabel('Survival Rate')\nplt.xlabel('')\n","9fb9c17f":"plt.figure(figsize=(10,6))\nsns.distplot(train[train['Survived']==1]['Fare'],color=\"red\")\nsns.distplot(train[train['Survived']==0]['Fare'],color=\"grey\").set(xlim=(0,200))\nplt.title('Distribution of Survival by Fare',fontsize=16,fontweight='bold')","7eea06c3":"train['modified_fare'] = train['Fare'] .apply(lambda x: custom_round(x, base=50))\nsr_fare = survival_rate('modified_fare')\nfig = plt.figure(figsize=(5,6))\n\nplt.subplot(1, 1, 1)\nax = sns.regplot(x=\"Category\", y=\"Survival Rate\", data=sr_fare)\n#ax = sns.barplot(x=\"Category\", y=\"Survival Rate\", data=sr_fare , palette=['red']) # for Seaborn version 0.7 and more\nplt.title('Survival Rate by Fare Buckets',fontsize=22,fontweight='bold')\nplt.ylabel('Survival Rate')\nplt.xlabel('')","a86ef988":"sr_fare.sort_values(\"Category\")","a795bcfd":"survived = len(train[(train['Fare'] > 75) & (train['Survived'] == 1)])\ntotal = len(train[(train['Fare'] > 75)])\nsurvived\/total","0fc7c794":"survived = len(train[(train['Fare'] < 75) & (train['Survived'] == 1)])\ntotal = len(train[(train['Fare'] < 75)])\nsurvived\/total","3d6eb408":"dummies_pclass = pd.get_dummies(train['Pclass'], prefix=\"pclass\")\ndummies_gender = pd.get_dummies(train['Sex'], prefix=\"gender\")\ndummies_embarked = pd.get_dummies(train['Embarked'], prefix=\"embarked\")\n\ntrain_w_dummies = pd.concat([train['PassengerId'],train['Survived'],train['Age'],train['SibSp'],train['Parch'],train['Fare'], dummies_pclass,dummies_gender,dummies_embarked], axis=1)","e10733a1":"train_w_dummies['total_travel_size']=train_w_dummies['SibSp'] + train_w_dummies['Parch'] + 1\ntrain_w_dummies[['total_travel_size','SibSp','Parch','Survived']].corr()","d2ecfcf2":"title = train['Name'].str.split(',',expand=True)\ntrain['Title']=title[1].str.split('.',expand=True)[0]\ntrain.groupby('Title').size()","7ee044c1":"\nallowed_titles = [' Mr',' Miss',' Mrs', ' Master']\ntrain.loc[~train[\"Title\"].isin(allowed_titles), \"Title\"] = \"Others\"\ndummies_title = pd.get_dummies(train['Title'], prefix=\"title\")\npd.concat([train['Survived'],dummies_title], axis=1).corr()['Survived'].sort_values()","f147389c":"train_w_dummies_v2 = pd.concat([train_w_dummies, dummies_title], axis=1)","29a8882f":"survival_rate('Title')","68330e67":"age_lookup = train.groupby(['Title','Pclass','Sex'])['Age'].median().reset_index(name='median')\ntrain_v2 = pd.merge(train, age_lookup, on=['Title','Pclass','Sex'], how='left', suffixes=('','_'))\ntrain_v2['Age_edit'] = np.where(train_v2['Age'].isnull(), train_v2['median'], train_v2['Age'])\ntrain_v2[train_v2['Age'].isnull()].head()","6914cdb6":"train_w_dummies_v3 = pd.concat([train_w_dummies_v2,train_v2['Age_edit']], axis=1)","aa81a1d0":"train_dataset = train_w_dummies_v3\ntrain_dataset.columns","8ba3641a":"\nX=train_dataset[['SibSp', 'Parch', 'total_travel_size',\n       'Fare', 'pclass_1', 'pclass_2', 'pclass_3', 'gender_female',\n       'gender_male', 'embarked_C', 'embarked_Q', 'embarked_S',\n       'title_ Master', 'title_ Miss', 'title_ Mr', 'title_ Mrs',\n       'title_Others', 'Age_edit']]\ny=train_dataset['Survived']","2273d821":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.datasets import make_regression\nmodel_1 = LogisticRegression()\nmodel_1.fit(X, y)","41547e68":"passenger = train_v2['PassengerId']\nsurvived = train_v2['Survived']\nprediction = model_1.predict(X)\nresults=pd.DataFrame(np.column_stack((passenger,survived,prediction)))\nresults.columns=['PassengerID', 'Survived','Prediction']","598b9a76":"results['IsCorrect'] = np.where(results['Prediction'] == results['Survived'], 'Yes', 'No')\nlen(results[results['IsCorrect']=='Yes'])\/len(results)","524dc97c":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\n\nt_ntrees = []\nt_depth =[]\nt_auc=[]\nX=train_dataset[['SibSp', 'Parch', 'total_travel_size',\n       'Fare', 'pclass_1', 'pclass_2', 'pclass_3', 'gender_female',\n       'gender_male', 'embarked_C', 'embarked_Q', 'embarked_S',\n       'title_ Master', 'title_ Miss', 'title_ Mr', 'title_ Mrs',\n       'title_Others', 'Age_edit']]\ny=train_dataset['Survived']\n\nfor n_trees in range(1, 50, 1):\n    for depth in range(1, 10, 1):\n        model = RandomForestClassifier(n_estimators = n_trees, max_depth = depth, random_state=50)\n        scores = cross_val_score(model, X, y, scoring='roc_auc',cv=5)\n        t_ntrees.append(n_trees)\n        t_depth.append(depth)\n        t_auc.append(scores.mean())\n\noutput1 = pd.DataFrame.from_dict(t_ntrees)\noutput2 = pd.DataFrame.from_dict(t_depth)\noutput3 = pd.DataFrame.from_dict(t_auc)\noutput1.columns=['ntrees']\noutput2.columns=['depth']\noutput3.columns=['auc']\noutput = output1.join(output2).join(output3)\noutput.sort_values(['auc'],ascending=False).head()","55f74f5d":"model_2 = RandomForestClassifier(n_estimators = 3, max_depth=5, random_state=50)\nmodel_2.fit(X, y)\nscores = cross_val_score(model_2, X, y, scoring='roc_auc',cv=5)\nprint('CV AUC {}, Average AUC {}'.format(scores, scores.mean()))","a0b95392":"features = X.columns\nfeature_importances = model_2.feature_importances_\n\nfeatures_df = pd.DataFrame({'Features': features, 'Importance Score': feature_importances})\nfeatures_df.sort_values('Importance Score', inplace=True, ascending=False)\n\nfeatures_df.head()","1cc9b4e3":"test['total_travel_size']=test['SibSp'] + test['Parch']+1\ntest_title = test['Name'].str.split(',',expand=True)\ntest['Title']=test_title[1].str.split('.',expand=True)[0]\ntest.loc[~test[\"Title\"].isin(allowed_titles), \"Title\"] = \"Others\"\ntest_dummies_title = pd.get_dummies(test['Title'], prefix=\"title\")\ntest_dummies_pclass = pd.get_dummies(test['Pclass'], prefix=\"pclass\")\ntest_dummies_gender = pd.get_dummies(test['Sex'], prefix=\"gender\")\ntest_dummies_embarked = pd.get_dummies(test['Embarked'], prefix=\"embarked\")","b2ea005d":"test_v2 = pd.merge(test, age_lookup, on=['Title','Pclass','Sex'], how='left', suffixes=('','_'))\ntest_v2['Age_edit'] = np.where(test_v2['Age'].isnull(), test_v2['median'], test_v2['Age'])\ntest_v2[test_v2['Age'].isnull()].head()\n\ntest_dataset = pd.concat([test['PassengerId'],test_v2['Age_edit'],test['SibSp'],test['Parch'],test['total_travel_size'],test['Fare'],test_dummies_title, test_dummies_pclass,test_dummies_gender,test_dummies_embarked], axis=1)","30b5d4c1":"test_dataset = test_dataset.fillna(test_dataset.mean())\ntest_dataset.isnull().sum()","98e68290":"test_passenger = test_v2['PassengerId']\ntest_X = test_dataset[['SibSp', 'Parch', 'total_travel_size',\n       'Fare', 'pclass_1', 'pclass_2', 'pclass_3', 'gender_female',\n       'gender_male', 'embarked_C', 'embarked_Q', 'embarked_S',\n       'title_ Master', 'title_ Miss', 'title_ Mr', 'title_ Mrs',\n       'title_Others', 'Age_edit']]\n","de5d5693":"test_prediction = model_1.predict(test_X)\ntest_results=np.column_stack((test_passenger,test_prediction))\ntest_results = pd.DataFrame(test_results)\ntest_results.columns=['PassengerId', 'Survived']\ntest_results.to_csv('submission_1.csv',index=False)\n#test_results.to_csv('\/content\/gdrive\/My Drive\/BAX 452 - Machine Learning\/test_result.csv',index=False)","1260912a":"test_prediction = model_2.predict(test_X)\ntest_results=np.column_stack((test_passenger,test_prediction))\ntest_results = pd.DataFrame(test_results)\ntest_results.columns=['PassengerId', 'Survived']\ntest_results.to_csv('submission_2.csv',index=False)","a80b70d0":"# **5. Predicting on Test Dataset**","8f88a814":"### **2.5.2 Survival by Age**\nThe youngest passengers are most likley to survive.\nThere is also a section of passengers aged about 22-35 who also have a higher likelihood of survival.","ead4c5c5":"### **2.5.3 Survival by Fare**\nPassengers in paying a lower fare are less likely to survive.","1e6be0b0":"### **2.3 Check for incomplete data**\n\n*   177 unreported age\n*   697 unreported cabin\n*   2 unreported port of embarkment.\n","364a964d":"### ** 3.2 Creating New Features (Family Size)**\n- Family Size : Number of siblings, spouses, parents and child including traveller on board. ","2242a7a8":"### **3.3 Creating New Features (Title)**\n- From the name of each passenger, we can extract the title of the passenger. It is possible that the status of the passenger affects their survival rate.","2d6fc7f5":"### **2.2. Describe Data**\n\n\n*   891 Passengers\n*   38% survived\n*  29.7 average age","d064b352":"### **2.4 Profile of Passegers**","a09d28b2":"### ** Model 2: Random Forest**","36573480":"### **5.2 Predicting with Model 1**","0d74a3e8":"# **1. Getting Data**","e7cff4d3":"### **2.1 Preview Top 5 Rows of the Dataset**","763c9b38":"### **2.5.1 Survival by Sex, Pclass & Embarked**\nFemales were more likely to survive then Male. \\\n \\\nPassengers in class 3 were most unlikely to survive. \\\nPassengers in class 1 were more likley to survive.\n \\\n\nPaseenegers embarked from S were most unlikely to survive. \\\nPassengers embared from C were most likely to survive.","8b21a0a2":"# **3. Creating New Features & Dummie Variables**","0ab7e20c":"### **4.1 Logistitc Regression 1**\n","dc95f143":"### **2.5 Graphical View of Survival Stats by a Single Factor**","182bafbc":"### **5.3 Predicting with Model 2**","05281a7d":"First, start by setting up access to data uploaded in github. Original data was downloaded from Kaggle. [Kaggle Link to Titanic](https:\/\/www.kaggle.com\/c\/titanic)","529cb5e7":"### **3.1 Creating Dummy Variables**\n","5d0d49ae":"# **4. Modeling**","bbc83834":"### **5.1 Prepping the Test Data Set**","e06513f2":"#**2. Preliminary Exploration of Data Set**","acc183b7":"### **3.4 Replacing Null Values**\n"}}