{"cell_type":{"81a06bbb":"code","7cc821fe":"code","22d24eec":"code","dbd8cd51":"code","a854f9eb":"code","37cfc1ab":"code","5463326b":"code","8fee3e60":"code","e62ee6fc":"code","6bc0bfc7":"code","70cf60cb":"code","7f05a63e":"code","d5aacff7":"code","dac64faf":"code","cfe9d490":"code","fcca7da6":"code","088432b0":"code","0d394e47":"code","966f6180":"code","96c5dbe6":"code","2ab0a619":"code","30e54d9a":"code","4a6f17e5":"code","157adb3c":"code","235d51cd":"code","5447b36f":"code","5481f1aa":"code","20c60091":"code","94b52fad":"code","63f119c8":"code","fa7b11ad":"markdown","21f216fe":"markdown","ffbf20bd":"markdown","b523a7ac":"markdown","29b987c7":"markdown"},"source":{"81a06bbb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n# Any results you write to the current directory are saved as output.","7cc821fe":"structures = pd.read_csv('..\/input\/structures.csv')\ntrain = pd.read_csv('..\/input\/train.csv')\ntest= pd.read_csv('..\/input\/test.csv')","22d24eec":"def map_atom_info(df, atom_idx):\n    df = pd.merge(df, structures, how = 'left',\n                  left_on  = ['molecule_name', f'atom_index_{atom_idx}'],\n                  right_on = ['molecule_name',  'atom_index'])\n    \n    df = df.drop('atom_index', axis=1)\n    df = df.rename(columns={'atom': f'atom_{atom_idx}',\n                            'x': f'x_{atom_idx}',\n                            'y': f'y_{atom_idx}',\n                            'z': f'z_{atom_idx}'})\n    return df\n\ntrain = map_atom_info(train, 0)\ntrain = map_atom_info(train, 1)\n\ntest = map_atom_info(test, 0)\ntest = map_atom_info(test, 1)","dbd8cd51":"train_p_0 = train[['x_0', 'y_0', 'z_0']].values\ntrain_p_1 = train[['x_1', 'y_1', 'z_1']].values\ntest_p_0 = test[['x_0', 'y_0', 'z_0']].values\ntest_p_1 = test[['x_1', 'y_1', 'z_1']].values\n\ntrain['dist'] = np.linalg.norm(train_p_0 - train_p_1, axis=1)\ntest['dist'] = np.linalg.norm(test_p_0 - test_p_1, axis=1)","a854f9eb":"GroupedBy = structures.groupby(by='molecule_name')\n\nmolecule_count = GroupedBy.count().drop(['atom_index','x','y','z'],axis=1)\nmolecule_count = molecule_count.rename(columns={'atom':'molecule_size'})\n\nmolecule_mean = GroupedBy.mean().drop(['atom_index'],axis=1)\nmolecule_mean = molecule_mean.rename(columns={'x':'x_mean','y':'y_mean','z':'z_mean'})\n\nmolecule_max = GroupedBy.max().drop(['atom_index','atom'],axis=1)\nmolecule_max = molecule_max.rename(columns={'x':'x_max','y':'y_max','z':'z_max'})\n\nmolecule_min = GroupedBy.min().drop(['atom_index','atom'],axis=1)\nmolecule_min = molecule_min.rename(columns={'x':'x_min','y':'y_min','z':'z_min'})\n\nmolecule_std = GroupedBy.std().drop(['atom_index'],axis=1)\nmolecule_std = molecule_std.rename(columns={'x':'x_std','y':'y_std','z':'z_std'})\n\natom_count=pd.get_dummies(structures.rename(columns={'atom':'atom_count'}),columns=['atom_count']).drop(['atom_index','x','y','z'],axis=1)\natom_count=atom_count.groupby('molecule_name').sum()","37cfc1ab":"def add_features_1(df):\n    df2 = df[['molecule_name','type']].rename(columns={'type':'type_count'})\n    type_count=pd.get_dummies(df2,columns=['type_count']).groupby('molecule_name').sum()\n    \n    df = pd.merge(df, molecule_count, how = 'left',left_on  = ['molecule_name'],right_on = ['molecule_name'])\n    df = pd.merge(df,molecule_mean,how='left',left_on  = ['molecule_name'],right_on = ['molecule_name'])\n    df = pd.merge(df,molecule_min,how='left',left_on  = ['molecule_name'],right_on = ['molecule_name'])\n    df = pd.merge(df,molecule_max,how='left',left_on  = ['molecule_name'],right_on = ['molecule_name'])\n    df = pd.merge(df,molecule_std,how='left',left_on  = ['molecule_name'],right_on = ['molecule_name'])\n    df = pd.merge(df,atom_count,how='left',left_on  = ['molecule_name'],right_on = ['molecule_name'])\n    df = pd.merge(df,type_count,how='left',left_on = ['molecule_name'],right_on = ['molecule_name'])\n    return(df)","5463326b":"train=add_features_1(train)\ntest=add_features_1(test)","8fee3e60":"#print(test['atom_0'].value_counts())\n#train = train.drop(['atom_0'],axis=1)\n#test = test.drop(['atom_0'],axis=1)","e62ee6fc":"#condition = ((train.type=='2JHH') | (train.type=='3JHH'))\n#train[condition].head()","6bc0bfc7":"def add_features_2(df):\n    df['couples_number'] = df.groupby(['molecule_name'])['id'].transform('count')\n    df['avg_dist']=df.groupby(['molecule_name'])['dist'].transform('mean')\n    df['min_dist']=df.groupby(['molecule_name'])['dist'].transform('min')\n    df['max_dist']=df.groupby(['molecule_name'])['dist'].transform('max')\n    df['dist_std']=df.groupby(['molecule_name'])['dist'].transform('std')\n    \n    \n    df_p_0 = df[['x_0', 'y_0', 'z_0']].values\n    df_p_1 = df[['x_1', 'y_1', 'z_1']].values\n    df_p_mean = df[['x_mean','y_mean','z_mean']].values\n\n    df['dist_0_to_mean'] = np.linalg.norm(df_p_0 - df_p_mean, axis=1)\n    df['dist_1_to_mean'] = np.linalg.norm(df_p_1 - df_p_mean, axis=1)\n    return(df)","70cf60cb":"train=add_features_2(train)\ntest= add_features_2(test)","7f05a63e":"#sns.distplot(train.scalar_coupling_constant)","d5aacff7":"#sns.countplot(molecule_count.molecule_size)","dac64faf":"#sns.countplot(train.type)","cfe9d490":"#sns.countplot(train['atom_1'])","fcca7da6":"#sns.boxplot(x=train.atom_1,y=train.scalar_coupling_constant,palette='rainbow')","088432b0":"#sns.boxplot(x=train.type,y=train.scalar_coupling_constant,palette='rainbow')","0d394e47":"#sns.distplot(train.dist)","966f6180":"#plt.scatter(train.dist,train.scalar_coupling_constant)","96c5dbe6":"#plt.scatter(train.molecule_size,train.scalar_coupling_constant)","2ab0a619":"X = train.drop(['molecule_name','scalar_coupling_constant','id'],axis=1)\nX= pd.get_dummies(X)\n\nY= train['scalar_coupling_constant']\n\nid_test = test['id']\nX_test = test.drop(['molecule_name','id'],axis=1)\nX_test = pd.get_dummies(X_test)","30e54d9a":"# Get missing columns in the training test\nmissing_cols = set( X.columns ) - set( X_test.columns )\n# Add a missing column in test set with default value equal to 0\nfor c in missing_cols:\n    X_test[c] = 0\n# Ensure the order of column in the test set is in the same order than in train set\nX_test = X_test[X.columns]","4a6f17e5":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.metrics import mean_absolute_error\n\ngroups = train['type']\n\ndef group_mean_log_mae(y_true, y_pred, groups, floor=1e-9):\n    maes = (y_true-y_pred).abs().groupby(groups).mean()\n    return np.log(maes.map(lambda x: max(x, floor))).mean()","157adb3c":"#model=GradientBoostingRegressor()\n#scores = cross_val_score(model,X,Y,cv=5)","235d51cd":"#X_train, X_val, Y_train, Y_val = train_test_split(X[:1000000],Y[:1000000],test_size=0.2)","5447b36f":"#model=RandomForestRegressor(n_estimators=10,max_features = 0.3,max_depth=20, verbose=1)\n#model.fit(X_train,Y_train)\n#pred= model.predict(X_val)\n#group_mean_log_mae(Y_val,pred,groups)","5481f1aa":"#importances = model.feature_importances_\n#indices = np.argsort(importances)[::-1]\n\n#plt.figure(figsize=(10,5))\n#plt.title(\"Feature importances\")\n#plt.bar(range(X.shape[1]), importances[indices],color=\"r\", align=\"center\")\n#plt.xticks(range(X.shape[1]), X.columns[indices],rotation='vertical')\n#plt.xlim([-1, X.shape[1]])\n#plt.show()","20c60091":"#importances","94b52fad":"model=RandomForestRegressor(n_estimators=10,max_features =0.3,max_depth=15, verbose=1)\n#model=AdaBoostRegressor(n_estimators=60,verbose=1)\nmodel.fit(X,Y)\npred=model.predict(X_test)","63f119c8":"test_output = pd.DataFrame({\"id\" : id_test,\"scalar_coupling_constant\": pred})\ntest_output.set_index(\"id\", inplace=True)\ntest_output.to_csv(\"prediction2.csv\")","fa7b11ad":"## Data Import","21f216fe":"## Output","ffbf20bd":"## Data Exploration","b523a7ac":"## Predicting","29b987c7":"## Data Engineering"}}