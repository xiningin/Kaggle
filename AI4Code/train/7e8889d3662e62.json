{"cell_type":{"0479e324":"code","c6938846":"code","d0acd7a2":"code","570d8514":"code","e5b43ea9":"code","41b56834":"code","436534e2":"code","1e91d321":"code","a06b1230":"code","dbbfb8cb":"code","5e305de7":"code","c759741f":"code","36b184ba":"code","8bd8498d":"code","06ebc0e6":"code","3d2cf49c":"code","7c4fa682":"markdown","ecfd4472":"markdown","1d680291":"markdown","27ecbb49":"markdown","bde55fc6":"markdown","a8c14a4e":"markdown","ef3e4b33":"markdown","721632ec":"markdown","fc37a86f":"markdown","8bb21f0b":"markdown","34ea2512":"markdown"},"source":{"0479e324":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c6938846":"# The full data set. Not very complete and not sure anything can be predicted from this. But it is a worthwhile exercise sanitising it ...\ndf = pd.read_csv('..\/input\/predicting-dublin-rental-daftie\/daft_v_2.csv')\ndf.head()","d0acd7a2":"# remove unecessary information that doesn't add to a fair assesment\nsmall = df.drop(['address','description', 'longitude', 'latitude','ID'], axis=1)\nsmall","570d8514":"#difficult to chart or analyse a string, as the dtypes reveals the price to be ...\nsmall.dtypes","e5b43ea9":"small['freq'] = small['price'].str.contains('Per week')\nsmall","41b56834":"# Change those booleans to string either 'weekly' or 'monthly'\n\nsmall['freq'].replace({True:'weekly',False:'monthly'}, inplace=True)\nsmall","436534e2":"# Now it's time to clean up the strings to leave only numbers behind, \n#and replacing the original column with a cleaned version of itself\nsmall['price'] = small['price'].apply(lambda x: x.replace('\u20ac', '').replace('Per month', '').replace('Per week','').strip())\nsmall","1e91d321":"# removing commas and changing type of values under 'price'\nsmall['price'] = small['price'].apply(lambda x: x.replace(',','')).astype(int)\nsmall","a06b1230":"import seaborn as sns\n%matplotlib inline","dbbfb8cb":"sns.boxplot(x='freq', y='price', data=small)","5e305de7":"count_w = sum(small['price'][small['freq']== 'weekly'].value_counts())\nmax_w = small['price'][small['freq']== 'weekly'].max()\ncount_m = sum(small['price'][small['freq']== 'monthly'].value_counts())\nmax_m = small['price'][small['freq']== 'monthly'].max()\n\nprint(f'There are {count_w} entries for weekly rents. The highest price is {max_w} (which would be equivalent to {round(max_w*52\/12)} monthly)')\nprint(f'There are {count_m} monthly prices. The highest price is {max_m}')","c759741f":"wk_mean = round(small['price'][small['freq']== 'weekly'].mean())\nmt_mean = round(small['price'][small['freq']== 'monthly'].mean())\n\nprint(f'Weekly average price including outliers = {wk_mean}\\nMonthly average price including outliers = {mt_mean}')","36b184ba":"import matplotlib.pyplot as plt","8bd8498d":"sns.displot(small['price'][small['freq']== 'weekly'])\nplt.title(\"Weekly Prices Distribution\")","06ebc0e6":"    sns.displot(small['price'][small['freq']== 'monthly'], bins=30)\n    plt.title(\"Monthly Prices Distribution\")","3d2cf49c":"# This is copied from another website. I don't know this function yet.\n# this works with a series, so I create one similarly to the way I found a mean above:\nw = small['price'][small['freq']== 'weekly']\nm = small['price'][small['freq']== 'monthly']\n\n#now find the range to work with:\nw = round(w[w.between(w.quantile(.15), w.quantile(.85))].mean()) # without outliers\nm = round(m[m.between(m.quantile(.15), m.quantile(.85))].mean()) # without outliers\n\nprint(f'Weekly mean average without outliers = {w}\\nMonthly average without outliers = {m}')","7c4fa682":"Monthly rates have the most extreme variance in outliying prices.\n","ecfd4472":"A couple of columns are contain information that is not helpful in the context of a broad view of the information. Street \"Address\" is perhaps not as usefull as 'Eircode' or even the more traditonal postal code like '6', '4', '7', etc.\n\nLongitude and latitude may come in handy for geo location, but postal code would be sufficient for me.\n\nDescription does not contain information that add qualitive value to results, as well as ID.","1d680291":"# My first data set in Kaggle\nAlthough the intention of the orginal poster of this dataset hoped to glean some price prediction in the rental market in Dublin, I believe this data will not support this.\n\nHowever, I will be using it to practice some basic cleaning up processes.\n\n## This is what is in this data set:\n","27ecbb49":"### What does the charts look like when the outliers are removed?","bde55fc6":"## A smaller data frame ...","a8c14a4e":"## Outliers\nIt is obvious from the first entry in this data set that there are outliers. Where are they?","ef3e4b33":"The 'price' column is in a format that is readable to consumers, but not in a format for computing. The column needs to contain only intergers.","721632ec":"Then I was able to safely remove the sub-strings 'Per week', 'Per month', and the '\u20ac' symbol, leaving behind only numbers.\n\nHowever,these are still a <class: Object> type so they will need to be converted to intergers.","fc37a86f":"now prices are intergers:","8bb21f0b":"To maintain the distinction between the two frequencies in price of rent, I added a new column with boolean values for the presence of 'Per week' in the price column.\n","34ea2512":"Then I changed those boolean values and labeled them either 'weekly' or 'monthly'."}}