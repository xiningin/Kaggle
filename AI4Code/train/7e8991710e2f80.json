{"cell_type":{"406da25e":"code","75af1885":"code","fe7352bf":"code","6fb387ed":"code","df3e7630":"code","f857480e":"code","217de84a":"code","a266573e":"code","09ceaf52":"code","7e45c771":"code","284a018c":"code","a053c2c5":"code","9ab95495":"code","025a689e":"code","9e19a6c7":"markdown"},"source":{"406da25e":"import numpy as np\nimport matplotlib.pyplot as plt","75af1885":"class AssemblyLine(object):\n    \n    def __init__(self, LCR=True):\n        self.LCR = LCR\n    \n    def fit(self, Task, Pred, C):\n        \n        self.Task = Task\n        self.Pred = Pred\n        self.C    = C\n        \n    def sort_job(self,Task):\n        \n        dummy = self.Task.copy()\n        sorted_task = {}\n        val_list = list(self.Task.values())\n        sorted_time = sorted(val_list, reverse=True)\n        \n        for p in sorted_time:\n            key_list = list(dummy.keys())\n            val_list = list(dummy.values())\n            sorted_task[key_list[val_list.index(p)]] = p\n            dummy.pop(key_list[val_list.index(p)])\n\n        return sorted_task \n    \n    def is_sub_list(self, l1, l2):\n\n        result = True\n        for i in l1:\n            if (i in l2)==False:\n                result=False\n                \n        return result \n    \n    def job_to_assign(self, Assigned, Task_name):\n        \n        result = False\n\n        if self.is_sub_list(self.Pred[Task_name], Assigned)==True:\n            result = True\n\n        return result\n    \n    def balancing(self,last_iter = False):\n        \n        if self.LCR == True:\n            self.Task     = self.sort_job(self.Task)\n            \n        Station       = {}\n        Assigned      = []\n        Waiting       = list(self.Task.keys()).copy()\n        Task_name     = list(self.Task.keys()).copy()\n        Task_time     = list(self.Task.values()).copy()\n        index         = 0\n        station       = 1\n        station_time  = 0\n        station_tasks = []\n        Result        = {}\n        efficiency    = None\n        feasible      = True\n        iter_num      = 0\n        while len(Waiting) != 0:\n            if max(list(self.Task.values())) > self.C:\n                efficiency = 0\n                break\n            \n            if feasible == False:\n                efficiency = 0\n                break\n            while True:\n                condition = False\n                if self.is_sub_list([Task_name[index]], Waiting)==True:\n                    if self.job_to_assign(Assigned, Task_name[index])==True:\n                        if station_time + Task_time[index] <= self.C:\n\n                            Assigned.append(Task_name[index])\n                            station_tasks.append(Task_name[index])\n                            Waiting.pop(Waiting.index(Task_name[index]))\n                            station_time += Task_time[index]\n                            condition = True\n                            index += 1\n\n                        else:\n                            index += 1\n                    else:\n                        index += 1\n                else:\n                    index += 1\n\n\n                if index == len(Task_name):\n                    index = 0\n                    if condition==False:\n                        break\n                \n                iter_num += 1\n                if iter_num == len(self.Task) * len(self.Task):\n                    feasible = False\n                    break\n                \n                    \n            Result[\"Station:{}\".format(station)] = station_tasks\n            Station[\"Station:{}\".format(station)] = station_time\n            index         = 0\n            station      += 1\n            station_time  = 0\n            station_tasks = []\n        \n        if feasible == True:\n            station = station - 1\n            spt = sum(list(Station.values()))\n            efficiency = (100 * spt) \/ (station * self.C)       \n        \n        if last_iter==True:\n            print(\"Line efficiency: %\",round(efficiency,2))\n            print(\"Assignment :\")\n            print(Result)\n            print(\"Station Time :\")\n            print(Station)\n\n        return efficiency","fe7352bf":"def cost(Task, last_iter=False):\n    global Pred, C\n    if last_iter == False:\n        optimization = AssemblyLine(LCR=False)\n        optimization.fit(Task, Pred, C)\n        LE = optimization.balancing()\n    else:\n        optimization = AssemblyLine(LCR=False)\n        optimization.fit(Task, Pred, C)\n        LE = optimization.balancing(last_iter=True)\n    return -LE","6fb387ed":"def swap(Task):\n    new_task = {}\n    name = list(Task.keys())\n    value = list(Task.values())\n    i1, i2 = np.random.permutation(len(Task))[:2]\n    name[i1], name[i2] = name[i2], name[i1]\n    value[i1], value[i2] = value[i2], value[i1]\n    for i in range(len(Task)):\n        new_task[name[i]] = value[i]\n    return new_task","df3e7630":"def SA(T,T0,Task):\n    objit = np.array([])\n    \n    sol_tour = Task\n    sol_cost = cost(Task)\n        \n    bestsol_tour = sol_tour \n    bestsol_cost = sol_cost\n        \n    max_iter = 10\n    it = 1\n    while T > T0:\n        for ix in range(max_iter):\n            newsol_tour = swap(sol_tour)\n            newsol_cost = cost(newsol_tour)\n\n            if newsol_cost < sol_cost:\n                sol_cost = newsol_cost\n                sol_tour = newsol_tour\n\n            else:\n                delta = (newsol_cost - sol_cost)\n                p = np.exp(-delta\/T)\n                if np.random.rand() < p:\n                    sol_cost = newsol_cost\n                    sol_tour = newsol_tour\n\n            if sol_cost < bestsol_cost:\n                bestsol_cost = sol_cost\n                bestsol_tour = sol_tour\n                \n        objit = np.append(objit,sol_cost)   \n        T = T*0.99\n    \n    cost(bestsol_tour,last_iter=True)\n    \n    print(\"Line Efficiency: \", bestsol_cost)\n    plt.figure(figsize=(15, 5))\n    plt.plot(objit)\n    plt.ylim([-100,-50])\n    plt.yticks(np.arange(-100,-50,5))\n    plt.grid(True)\n    plt.title(\"Objective Function Value\",fontsize=20)\n    plt.show()\n    return ","f857480e":"Task = {\n    \"A\":0.70,\n    \"B\":0.33,\n    \"C\":0.25,\n    \"D\":0.75,\n    \"E\":0.15,\n    \"F\":0.42,\n    \"G\":0.52,\n    \"H\":0.40,\n    \"I\":0.88\n}\n\nPred = {\n    \"A\":[],\n    \"B\":[\"A\"],\n    \"C\":[\"A\"],\n    \"D\":[\"A\", \"B\", \"C\"],\n    \"E\":[\"B\"],\n    \"F\":[\"C\"],\n    \"G\":[\"D\", \"E\", \"F\"],\n    \"H\":[\"F\", \"G\"],\n    \"I\":[\"E\", \"G\", \"H\"]\n}\n\nC = 0.95","217de84a":"%%time\n\noptimization = AssemblyLine(LCR=True)\noptimization.fit(Task, Pred, C)\nLE = optimization.balancing(last_iter=True)","a266573e":"%%time\n\nSA(T=900,T0=10**-10,Task=Task)","09ceaf52":"Task = {\n    \"1\":1,\n    \"2\":2,\n    \"3\":3,\n    \"4\":4,\n    \"5\":2,\n    \"6\":4,\n    \"7\":6,\n    \"8\":8,\n    \"9\":2,\n    \"10\":3,\n    \"11\":4,\n    \"12\":5,\n    \"13\":6,\n    \"14\":7\n}\n\nPred = {\n    \"1\":[],\n    \"2\":[\"1\"],\n    \"3\":[\"2\"],\n    \"4\":[\"2\"],\n    \"5\":[\"1\"],\n    \"6\":[\"3\", \"4\", \"5\"],\n    \"7\":[\"6\"],\n    \"8\":[\"5\"],\n    \"9\":[\"7\", \"8\"],\n    \"10\":[\"9\"],\n    \"11\":[\"10\"],\n    \"12\":[\"10\"],\n    \"13\":[\"11\"],\n    \"14\":[\"12\", \"13\"]\n}\n\nC = 8","7e45c771":"%%time\n\noptimization = AssemblyLine(LCR=True)\noptimization.fit(Task, Pred, C)\nLE = optimization.balancing(last_iter=True)","284a018c":"%%time\n\nSA(T=900,T0=10**-10,Task=Task)","a053c2c5":"Task = {\n    \"A1\":1.20,\n    \"A2\":1.20,\n    \"B\":3.10,\n    \"C\":0.60,\n    \"D\":0.40,\n    \"E\":0.60,\n    \"F\":1.80,\n    \"G\":1.10,\n    \"H\":0.80,\n    \"I\":0.30,\n    \"J\":0.40,\n    \"K\":6.10,\n    \"L\":2.30,\n    \"M\":1.40,\n    \"N\":1.40,\n    \"O\":1.80,\n    \"P\":2.20,\n    \"Q\":4.60\n}\n\nPred = {\n    \"A1\":[\"G\"],\n    \"A2\":[\"K\"],\n    \"B\":[\"A1\"],\n    \"C\":[],\n    \"D\":[\"C\"],\n    \"E\":[\"N\"],\n    \"F\":[],\n    \"G\":[],\n    \"H\":[\"D\", \"J\", \"B\"],\n    \"I\":[],\n    \"J\":[\"I\"],\n    \"K\":[],\n    \"L\":[\"F\"],\n    \"M\":[],\n    \"N\":[\"M\", \"P\", \"L\"],\n    \"O\":[\"A2\"],\n    \"P\":[\"H\"],\n    \"Q\":[\"E\"]\n}\n\nC = 6.67","9ab95495":"%%time\n\noptimization = AssemblyLine(LCR=True)\noptimization.fit(Task, Pred, C)\nLE = optimization.balancing(last_iter=True)","025a689e":"%%time\n\nSA(T=900,T0=10**-10,Task=Task)","9e19a6c7":"<center><img src=\"https:\/\/onlinelibrary.wiley.com\/cms\/asset\/1c5c5569-25e6-4060-88ed-a1d9a6117247\/itl235-fig-0001-m.jpg\"><\/center>"}}