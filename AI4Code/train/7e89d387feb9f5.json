{"cell_type":{"6dee4fa9":"code","e8d506b8":"code","173b5dc5":"code","29cb345e":"code","0d81f4d5":"code","7454014a":"code","d46fc952":"code","02942d70":"code","382cf1ce":"code","98d48f4c":"code","ef6bf22f":"code","e2296c00":"code","1ec77829":"code","0a3b7d59":"code","54500f69":"code","0248e812":"code","a0d5806c":"code","f2ae0b6b":"code","fba2cdd3":"code","a8384155":"code","169736d0":"code","6a5d213e":"code","da1bb3ea":"code","9c712185":"code","05fd36d8":"code","21bcec26":"code","f05e0ec7":"code","bc0a12fb":"code","5917f0eb":"code","791468ed":"code","683d99fe":"code","7ccb18dd":"code","4c24153d":"code","d813ebef":"code","add4f8e1":"code","9dda92a5":"code","0d02464e":"code","6da8c91f":"code","60804b85":"code","59807f4c":"code","3c6dda39":"code","168c55c6":"code","6022ac31":"code","c46c9a64":"code","537bccd5":"code","3fb72569":"code","bbe6557e":"code","86bd6d5e":"code","06c074d5":"code","d2d07a3c":"code","a938ada3":"code","2ea49874":"code","1e9e0e4c":"code","bdd3aa22":"code","43c8cfd4":"code","89d126a4":"code","a7d33dcb":"code","3efc4ae3":"code","b2a175c6":"code","f6aab9f6":"code","a283e5c2":"code","34a40894":"code","ab39c2fa":"code","47ae7f6d":"code","defd07d0":"code","0b1086a0":"code","439204cb":"code","2c616880":"code","442a6d28":"code","82398491":"code","1bb85911":"code","08e9e3a1":"code","c4443701":"code","d20276f0":"code","a920246b":"code","e33d430e":"code","08e65272":"code","4f60fd36":"code","e7445071":"code","201df47c":"code","64536ecf":"code","66b29e79":"code","39596921":"code","6a0777d4":"code","38ca1649":"code","53dd4d1c":"code","1a1b5791":"code","03c9add3":"code","235fe22b":"code","b593f3ca":"code","631fac50":"code","51d8abaa":"code","e340a6e0":"code","ef8cc792":"code","b5e8f6b8":"code","2b8fc5c8":"code","c795d00e":"code","014ea149":"code","14eed872":"code","848095c2":"code","1e6c2fe4":"code","345daaf5":"code","358a8897":"code","25410a6c":"markdown","a85ce424":"markdown","3e4edfab":"markdown","51e31b65":"markdown","53b46ccf":"markdown","9f2c5728":"markdown","d8360a25":"markdown","2af46116":"markdown","fd2a4a97":"markdown","a8593ed4":"markdown","ec01b425":"markdown","952f26fd":"markdown","3eaf23a4":"markdown","b7586bec":"markdown","12444f13":"markdown","7c2afb47":"markdown","b1e12831":"markdown","50033fef":"markdown","49f4ea62":"markdown","e5fc2fe2":"markdown","7f990a35":"markdown","45da5a82":"markdown","b6914d5e":"markdown","6af2fef7":"markdown","8cd10f0b":"markdown","da802ac7":"markdown","b281ec14":"markdown","cc2119d3":"markdown","5e96ac3d":"markdown","d5dd09cb":"markdown","10ceb93c":"markdown","b15cb64f":"markdown","ef8d2009":"markdown","a5a45d94":"markdown","420ec0f4":"markdown"},"source":{"6dee4fa9":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0435\nimport ast\nimport matplotlib.pyplot as plt\nfrom os.path import join\nimport pandas as pd\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import LabelEncoder, MultiLabelBinarizer\nfrom sklearn.model_selection import train_test_split","e8d506b8":"# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","173b5dc5":"# \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b matplotlib \u0440\u0438\u0441\u043e\u0432\u0430\u043b \u0432\u0441\u0435 \u0441\u0440\u0430\u0437\u0443 \u0431\u0435\u0437 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439\n%matplotlib inline","29cb345e":"# \u0414\u043b\u044f \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0437\u0430\u0434\u0430\u0434\u0438\u043c:\n# - \u043e\u0431\u0449\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b\nRANDOM_SEED = 42\n# - \u043e\u0431\u0449\u0443\u044e \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0430\u0442\u0443\nCURRENT_DATE = pd.to_datetime('22\/02\/2020')","0d81f4d5":"# \u0414\u043b\u044f \u0442\u0435\u0445, \u043a\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043c\u043e\u0439 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u043d\u0430 \u0441\u0432\u043e\u0435\u0439 \u043c\u0430\u0448\u0438\u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u043c requirements.txt\n!pip freeze > requirements.txt","7454014a":"# \u0417\u0430\u0434\u0430\u0434\u0438\u043c \u043f\u0443\u0442\u044c \u043a \u043f\u0430\u043f\u043a\u0435 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\nds_folder = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\n\n# \u0417\u0430\u0434\u0430\u0434\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432\nmt_ds = 'main_task.csv'\nkt_ds = 'kaggle_task.csv'\n\n# \u0421\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0443\u0442\u0438 \u043a \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\u043c\nmt_path = join(ds_folder, mt_ds)\nkt_path = join(ds_folder, kt_ds)\n\n# \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0438\u043c\u0435\u044e\u0449\u0438\u0435\u0441\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b\nmt_df = pd.read_csv(mt_path)\nkt_df = pd.read_csv(kt_path)","d46fc952":"# \u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 main_task.csv\nmt_df.head(1)","02942d70":"mt_df.info()","382cf1ce":"mt_df.nunique()","98d48f4c":"# \u0421\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445\u0441\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 TripAdvisor\nduplicated_ids = set(mt_df.groupby('ID_TA')['ID_TA'].count().sort_values(ascending=False)[:20].index)\n\n# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435, \u043e\u0442\u043d\u043e\u0441\u044f\u0449\u0438\u0435\u0441\u044f \u043a \u044d\u0442\u0438\u043c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u0430\u043c\nmt_df[mt_df['ID_TA'].apply(lambda x: x in duplicated_ids)].sort_values(by='ID_TA')","ef6bf22f":"# mt_df.drop_duplicates('ID_TA', inplace=True) # \u041f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0438\u0437 \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u0442\u0440\u043e\u043a","e2296c00":"# \u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 kaggle_task.csv\nkt_df.head(1)","1ec77829":"kt_df.info()","0a3b7d59":"# \u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 kaggle_task.csv \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a Rating,\n# \u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 'Name'","54500f69":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Main' \u0434\u043b\u044f \u043e\u0442\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043e\u0442 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439\nmt_df['Main'] = True\nkt_df['Main'] = False\n\n# \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u0432\u0438\u0434\u0430 Name-id, \u0433\u0434\u0435 id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\nmt_df['Name'] = mt_df['Restaurant_id'].apply(lambda x: 'Name-'+x)\n\n# \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0443\u043b\u044f\u043c\u0438\nkt_df['Rating'] = 0\n\n# \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b \u0432 \u043e\u0434\u0438\u043d \u0434\u043b\u044f \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u043c\ndf = pd.concat([mt_df, kt_df])","0248e812":"df.info()","a0d5806c":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430, \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\nres_count = {\n    'Paris': 17593,\n    'Stockholm': 3131,\n    'London': 22366,\n    'Berlin': 8110, \n    'Munich': 3367,\n    'Oporto': 2060, \n    'Milan': 7940,\n    'Bratislava': 1331,\n    'Vienna': 4387, \n    'Rome': 12086,\n    'Barcelona': 10086,\n    'Madrid': 11562,\n    'Dublin': 2706,\n    'Brussels': 3703,\n    'Zurich': 1901,\n    'Warsaw': 3210,\n    'Budapest': 3445, \n    'Copenhagen': 2637,\n    'Amsterdam': 4189,\n    'Lyon': 2833,\n    'Hamburg': 3501, \n    'Lisbon': 4985,\n    'Prague': 5850,\n    'Oslo': 1441, \n    'Helsinki': 1661,\n    'Edinburgh': 2248,\n    'Geneva': 1753,\n    'Ljubljana': 647,\n    'Athens': 2814,\n    'Luxembourg': 759,\n    'Krakow': 1832       \n}","f2ae0b6b":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Restaurants Count', \u043e\u0442\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u0439 \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d \u0434\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\ndf['Restaurants Count'] = df['City'].map(res_count)","fba2cdd3":"df.info()","a8384155":"df.head()","169736d0":"# \u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Relative Ranking' = 'Ranking' \/ 'Restaurants Count'\ndf['Relative Ranking'] = df['Ranking'] \/ df['Restaurants Count']","6a5d213e":"df.info()","da1bb3ea":"df.head()","9c712185":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 'Price Range'\ndf['Price Range'].unique()","05fd36d8":"# \u0421\u043b\u0435\u0434\u0443\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f\u043c \u0431\u043e\u043b\u0435\u0435 \u043e\u043f\u044b\u0442\u043d\u044b\u0445 \u043a\u043e\u043b\u043b\u0435\u0433, \u0434\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 'Price Range Was NAN'\ndf['Price Range Was NAN'] = df['Price Range'].isna()","21bcec26":"df.info()","f05e0ec7":"df.head()","bc0a12fb":"df['Number of Reviews'].value_counts()","5917f0eb":"# \u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e, \u043a\u0440\u043e\u043c\u0435 \u043d\u0435\u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0435\u0441\u0442\u044c \u0442\u0440\u0438 \u0442\u0438\u043f\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u043e\u0432 \u0446\u0435\u043d '$', '$$-$$$' \u0438 '$$$$'.\n# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0434\u043b\u044f \u0442\u0435\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442\n# \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0446\u0435\u043d.\nplt.xlabel('Number of Reviews')\nplt.ylabel('Count')\nplt.title('Number of Reviews distribution for restaurants that have no Price Range data.')\ndf[df['Price Range'].isna()]['Number of Reviews'].hist(bins=100, range=(0, 99))","791468ed":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0433\u0438\u0441\u0442\u0430\u0433\u0440\u0430\u043c\u043c\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \n# \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u043e\u0432 \u0446\u0435\u043d.\nplt.xlabel('Number of Reviews')\nplt.ylabel('Count')\nplt.title('$')\ndf[df['Price Range'] == '$']['Number of Reviews'].hist(bins=100, range=(0, 300))","683d99fe":"plt.xlabel('Number of Reviews')\nplt.ylabel('Count')\nplt.title('\\$\\$ - \\$\\$\\$')\ndf[df['Price Range'] == '$$ - $$$']['Number of Reviews'].hist(bins=100, range=(0, 300))","7ccb18dd":"plt.xlabel('Number of Reviews')\nplt.ylabel('Count')\nplt.title('\\$\\$\\$\\$')\ndf[df['Price Range'] == '$$$$']['Number of Reviews'].hist(bins=100, range=(0, 300))","4c24153d":"# \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043e \u0442\u043e\u043c, \u0431\u044b\u043b\u043e \u043b\u0438 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043f\u043e\u043b\u0435 'Number of Reviews\ndf['Number of Reviews Was NAN'] = df['Number of Reviews'].isna()\n# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0435\u0434\u0438\u043d\u0438\u0446\u0430\u043c\u0438\ndf['Number of Reviews'].fillna(1, inplace=True)","d813ebef":"# \u0417\u0430\u0434\u0430\u0434\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0443\u044e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0446\u0435\u043d \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n# def get_price_range(reviews_count):\n    \n#     if reviews_count <= 5:\n#         return '$'\n\n#     return '$$ - $$$'","add4f8e1":"# \u041f\u0435\u0440\u0435\u0434 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0440\u0430\u043d\u044c\u0448\u0435 \u0437\u0434\u0435\u0441\u044c \u0431\u044b\u043b NAN\ndf['Price Range Was NAN'] = df['Price Range'].isna()\n# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 get_price_range\n# df['Price Range'].fillna(df['Number of Reviews'].apply(get_price_range), inplace=True)\n# \u041d\u0443 \u0443\u0436 \u043d\u0435\u0442. \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0442\u0443\u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c '$$ - $$$' \u0447\u0435\u0440\u0435\u0437 fillna()\ndf['Price Range'].fillna('$$ - $$$', inplace=True)","9dda92a5":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0441\u0430\u043c\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a Price Range \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442.\n# \u0422\u0430\u043a \u043a\u0430\u043a \u0447\u0438\u0441\u043b\u043e \u0432\u0430\u0440\u0438\u0430\u0446\u0438\u0439 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u043e\u0432 \u0446\u0435\u043d \u043d\u0435 \u0432\u0435\u043b\u0438\u043a\u043e \u0441\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043c \u043f\u0430\u043c\u044f\u0442\u044c \u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f\n# \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u044f \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u0430 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0438 \u043c\u0435\u0442\u043e\u0434\u0430 map \u0432\u043c\u0435\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n# sklearn.preprocessing.LabelEcnoder\n\nprice_range_dict = {\n    '$': 1,\n    '$$ - $$$': 100,\n    '$$$$': 1000\n}\n\ndf['Price Range'] = df['Price Range'].map(price_range_dict)","0d02464e":"# \u0415\u0449\u0435 \u0440\u0430\u0437 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 df\ndf.info()","6da8c91f":"# \u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432\n# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432 \u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0440\u0430\u0437\u043d\u044b\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b, \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\ndf['City'].nunique()","60804b85":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\ndf.groupby('City')['City'].count().sort_values(ascending=False)","59807f4c":"# \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442\n# \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c sklearn.preprocessign.LabelEncoder\ncities_le = LabelEncoder()\ncities_le.fit(df['City'])\ndf['City Code'] = cities_le.transform(df['City'])","3c6dda39":"df.head()","168c55c6":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a\u043b\u044e\u0447\u0430\u043c\u0438 \u0431\u0443\u0434\u0443 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0433\u043e\u0440\u043e\u0434\u043e\u0432, \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 True, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e\u0442 \u0433\u043e\u0440\u043e\u0434 \u0441\u0442\u043e\u043b\u0438\u0446\u0430, \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 False\nis_capital = {\n    'London': True,\n    'Paris': True,\n    'Madrid': True,\n    'Barcelona': False,\n    'Berlin': True,\n    'Milan': False,\n    'Rome': True,\n    'Prague': True,\n    'Lisbon': True,\n    'Vienna': True,\n    'Amsterdam': True,\n    'Brussels': True,\n    'Hamburg': False,\n    'Munich': False,\n    'Lyon': False,\n    'Stockholm': True,\n    'Budapest': True,\n    'Warsaw': True,\n    'Dublin': True,\n    'Copenhagen': True,\n    'Athens': True,\n    'Edinburgh': True,\n    'Zurich': True,\n    'Oporto': False,\n    'Geneva': True,\n    'Krakow': True,\n    'Oslo': True,\n    'Helsinki': True,\n    'Bratislava': True,\n    'Luxembourg': True,\n    'Ljubljana': True\n}","6022ac31":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0433\u043e\u0440\u043e\u0434 \u0441\u0442\u043e\u043b\u0438\u0446\u0435\u0439\ndf['Is Capital'] = df['City'].map(is_capital)","c46c9a64":"city_population = {\n    'London': 8173900,\n    'Paris': 2240621,\n    'Madrid': 3155360,\n    'Barcelona': 1593075,\n    'Berlin': 3326002,\n    'Milan': 1331586,\n    'Rome': 2870493,\n    'Prague': 1272690,\n    'Lisbon': 547733,\n    'Vienna': 1765649,\n    'Amsterdam': 825080,\n    'Brussels': 144784,\n    'Hamburg': 1718187,\n    'Munich': 1364920,\n    'Lyon': 496343,\n    'Stockholm': 1981263,\n    'Budapest': 1744665,\n    'Warsaw': 1720398,\n    'Dublin': 506211 ,\n    'Copenhagen': 1246611,\n    'Athens': 3168846,\n    'Edinburgh': 476100,\n    'Zurich': 402275,\n    'Oporto': 221800,\n    'Geneva': 196150,\n    'Krakow': 756183,\n    'Oslo': 673469,\n    'Helsinki': 574579,\n    'Bratislava': 413192,\n    'Luxembourg': 576249,\n    'Ljubljana': 277554\n}\n\ncity_country = {\n    'London': 'UK',\n    'Paris': 'France',\n    'Madrid': 'Spain',\n    'Barcelona': 'Spain',\n    'Berlin': 'Germany',\n    'Milan': 'Italy',\n    'Rome': 'Italy',\n    'Prague': 'Czech',\n    'Lisbon': 'Portugalia',\n    'Vienna': 'Austria',\n    'Amsterdam': 'Nederlands',\n    'Brussels': '144784 ',\n    'Hamburg': 'Germany',\n    'Munich': 'Germany',\n    'Lyon': 'France',\n    'Stockholm': 'Sweden',\n    'Budapest': 'Hungary',\n    'Warsaw': 'Poland',\n    'Dublin': 'Ireland' ,\n    'Copenhagen': 'Denmark',\n    'Athens': 'Greece',\n    'Edinburgh': 'Schotland',\n    'Zurich': 'Switzerland',\n    'Oporto': 'Portugalia',\n    'Geneva': 'Switzerland',\n    'Krakow': 'Poland',\n    'Oslo': 'Norway',\n    'Helsinki': 'Finland',\n    'Bratislava': 'Slovakia',\n    'Luxembourg': 'Luxembourg',\n    'Ljubljana': 'Slovenija'\n}","537bccd5":"# \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u044d\u0442\u0438 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438 \u043a \u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 'City' \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 df \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 map\ndf['Population'] = df['City'].map(city_population)\ndf['Country'] = df['City'].map(city_country)","3fb72569":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c\ndf.info()","bbe6557e":"df.head()","86bd6d5e":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0435\u0449\u0435 \u0440\u0430\u0437\ndf.info()","06c074d5":"# \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442\n# \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c sklearn.preprocessign.LabelEncoder\ncountries_le = LabelEncoder()\ncountries_le.fit(df['Country'])\ndf['Country Code'] = countries_le.transform(df['Country'])","d2d07a3c":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'People Per Restaurant' = 'Population' \/ 'Restaurants Count'\ndf['People Per Restaurant'] = df['Population'] \/ df['Restaurants Count']","a938ada3":"df.info()","2ea49874":"df.head()","1e9e0e4c":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ndf.info()","bdd3aa22":"# \u041f\u043e\u043b\u0443\u0447\u0438\u043c Series \u0441\u0442\u043e\u043b\u0431\u0446\u0430 'Cuisine Style' \u0431\u0435\u0437 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445\ncuisines = df['Cuisine Style'].dropna()\ncuisines","43c8cfd4":"type(cuisines.iloc[0])","89d126a4":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Cusine Style Was NAN', \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439, \u0447\u0442\u043e \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 'Cuisine Style' \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u043b\u0438\ndf['Cuisine Style Was NAN'] = df['Cuisine Style'].isna()\n# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c ['Usual']\ndf['Cuisine Style'].fillna(\"['Usual']\", inplace=True)","a7d33dcb":"df.info()","3efc4ae3":"# \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 ast \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0441\u0438\u0442\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u043e\u043c \u044f\u0437\u044b\u043a\u0430 Python \u0432 \u0441\u043f\u0438\u0441\u043a\u0438 Python\ndef get_list(list_string):\n    result_list = ast.literal_eval(list_string)\n    return result_list\n\n# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 'Cuisine Style' \u043a \u0441\u043f\u0438\u0441\u043a\u0443\ncuisines = cuisines.apply(get_list)\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043a\u0443\u0445\u043e\u043d\u044c\ncuisines_dict = dict()\n\nfor cuisines_list in cuisines:\n    for cuisine in cuisines_list:\n        try:\n            cuisines_dict[cuisine] += 1\n        except:\n            cuisines_dict[cuisine] = 1\n\n# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c\n\nprint(f'\u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c: {len(cuisines_dict)}')","b2a175c6":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'cuisines_count'\ndef get_cuisines_count(cuisines):\n    if type(cuisines) == str:\n        return len(get_list(cuisines))\n    return 1\n\ndf['Cuisines Count'] = df['Cuisine Style'].apply(get_cuisines_count)\ndf.info()","f6aab9f6":"df.head()","a283e5c2":"uno_cuisine_count = 0\nunique_cuisines = set()\nfor cuisine, count in cuisines_dict.items():\n    if count == 1:\n        unique_cuisines.add(cuisine)\n        uno_cuisine_count += 1\nprint(f'\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0438\u043f\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c, \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0445 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043e\u0434\u043d\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435: {uno_cuisine_count}')\nprint(f'\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u0443\u0445\u043d\u0438:')\nunique_cuisines","34a40894":"# \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u044d\u0442\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 is_unique_cuisine, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u043c\u0438 \u043d\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u0443\u044e \u043a\u0443\u0445\u043d\u044e \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\ndef is_unique_cuisine(cuisine):\n    cuisines_list = get_list(cuisine)\n    cuisines_set = set(cuisines_list)\n    return not cuisines_set.isdisjoint(unique_cuisines)\n\ndf['Unique Cuisine'] = df['Cuisine Style'].apply(is_unique_cuisine)","ab39c2fa":"df.info()","47ae7f6d":"df.head()","defd07d0":"# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c sklearn.preprocessing.MultiLabelBinarizer \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Cuisine Style\nmlb = MultiLabelBinarizer()\nencoded = pd.DataFrame(mlb.fit_transform(df['Cuisine Style'].apply(get_list)),\n                       columns=mlb.classes_, index=df.index)","0b1086a0":"#  \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c\nencoded.info()","439204cb":"encoded.head()","2c616880":"# \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u043c\u0435\u043d\u0438\u043c nan \u0432 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u0438\u0445 \u0434\u0430\u0442 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u0434\u0430\u0442\u043e\u0439 \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n# \u0430 \u0442\u0430\u043a\u0436\u0435 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0438\u0434\u0430 [] \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u043d\u0435\u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u0432\u0438\u0434\u0430 ['01\/01\/2000', '01\/01\/2000']\ndef nan_to_default_date(list_string):\n    try:\n        list_string = list_string.replace('[nan', \"['01\/01\/2000'\")\n        list_string = list_string.replace('nan]', \"'01\/01\/2000']\")\n        list_string = list_string.replace('[]', \"['01\/01\/2000', '01\/01\/2000']\")\n    except:\n        list_string = \"[['None Review', 'None Review'], ['01\/01\/2000', '01\/01\/2000']]\"\n    return list_string\n\ndf['Reviews'] = df['Reviews'].apply(nan_to_default_date)","442a6d28":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 'Reviews' \u043a \u0442\u0438\u043f\u0443 list\nlast_review = []\nlast_review_date = []\nprelast_review = []\nprelast_review_date = []\nfor reviews in df['Reviews']:\n    reviews_list = get_list(reviews)\n    if len(reviews_list) == 2:\n        if (len(reviews_list[0]) == 2 and len(reviews_list[1]) == 2):\n            last_review.append(reviews_list[0][0])\n            last_review_date.append(reviews_list[1][0])\n            prelast_review.append(reviews_list[0][1])\n            prelast_review_date.append(reviews_list[1][1])\n        elif (len(reviews_list[0]) == 1 and len(reviews_list[1]) == 1):\n            last_review.append(reviews_list[0][0])\n            last_review_date.append(reviews_list[1][0])\n            prelast_review.append('None review')\n            prelast_review_date.append('01\/01\/2000')\n        else:\n            print(reviews_list)","82398491":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\n# - \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043e\u0442\u0437\u044b\u0432\ndf['Last Review'] = last_review\n# - \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430\ndf['Last Review Date'] = last_review_date\n# - \u043f\u0440\u0435\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043e\u0442\u0437\u044b\u0432\ndf['Prelast Review'] = prelast_review\n# - \u0434\u0430\u0442\u0430 \u043f\u0440\u0435\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430\ndf['Prelast Review Date'] = prelast_review_date","1bb85911":"# \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0434\u0430\u0442\u044b \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 datetime\ndf['Last Review Date'] = pd.to_datetime(df['Last Review Date'])\ndf['Prelast Review Date'] = pd.to_datetime(df['Prelast Review Date'])","08e9e3a1":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435\ndf.info()","c4443701":"df.head()","d20276f0":"df['Days Between Reviews'] = (df['Last Review Date'] - df['Prelast Review Date'])\ndef get_days(timedelta):\n    return timedelta.days\ndf['Days Between Reviews'] = df['Days Between Reviews'].apply(get_days)","a920246b":"df.info()","e33d430e":"df.head()","08e65272":"df['Days Since Last Review'] = df['Last Review Date'].apply(lambda date: CURRENT_DATE - date)\ndf['Days Since Last Review'] = df['Days Since Last Review'].apply(get_days)","4f60fd36":"df.info()","e7445071":"df.head()","201df47c":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'ID_TA Numeric' \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 'ID_TA'\ndf['ID_TA Numeric'] = df['ID_TA'].apply(lambda id_ta: int(id_ta[1:]))","64536ecf":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Relative Price Range' \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 'Price Range' \u0438 'Relative Ranking'\n# df['Relative Price Range'] = df['Price Range'] \/ df['Relative Ranking']\ndf['Relative Price Range'] = df['Price Range'] \/ df['Relative Ranking']","66b29e79":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'People Per Review' \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 'Population' \u0438 'Number of Reviews'\ndf['People Per Review'] = df['Population'] \/ df['Number of Reviews']","39596921":"df.info()","6a0777d4":"# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n# \u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c:\ntrain_features_set = {\n    'Ranking',\n    'Price Range',\n    'Number of Reviews',\n    'Restaurants Count',\n    'Relative Ranking',\n    'City Code',\n    'Is Capital',\n    'Population',\n    'Country Code',\n    'People Per Restaurant',\n    'Cuisines Count',\n    'Unique Cuisine',\n    'Days Between Reviews',\n    'Days Since Last Review',\n    'ID_TA Numeric',\n    'Relative Price Range',\n#     'People Per Review',\n    'Price Range Was NAN',\n    'Number of Reviews Was NAN',\n    'Cuisine Style Was NAN',\n}\n\n# \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u043c \u044d\u0442\u043e\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u0442\u043e\u0439 \u0438\u043b\u0438 \u0438\u043d\u043e\u0439 \u043a\u0443\u0445\u043d\u0438 \u0432 \u043c\u0435\u043d\u044e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\ntrain_features_set = train_features_set.union(set(encoded.columns))\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0434\u043b\u044f \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438, \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0432 \u0438\u0437 \u043d\u0435\u0433\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 kaggle_task.csv\ntrain_df = pd.concat([df, encoded], axis=1)\ntrain_df = train_df[train_df['Main']]\ntrain_df = train_df[train_features_set]","38ca1649":"# \u0413\u043e\u0442\u043e\u0432\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435\nX = train_df\ny = df[df['Main']]['Rating']\n\n# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","53dd4d1c":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c\nrfm = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","1a1b5791":"# \u0418 \u043d\u0430\u043a\u043e\u043d\u0435\u0446 \u0442\u0440\u0435\u043d\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0448\u0443 \u043c\u043e\u0434\u0435\u043b\u044c\nrfm.fit(X_train, y_train)","03c9add3":"# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = rfm.predict(X_test)","235fe22b":"# \u041f\u043ec\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\ny_pred","b593f3ca":"# \u0418 \u0441\u0440\u0430\u0437\u0443 \u0432\u0438\u0434\u0438\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438.\n# \u0421\u0440\u0430\u0432\u043d\u0438\u043c \u0441 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438:\ndf['Rating'].unique()","631fac50":"# \u0412\u0438\u0434\u0438\u043c \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u043a\u0440\u0430\u0442\u043d\u044b 0.5\n# \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432\ndef fine_rating_pred(rating_pred):\n    if rating_pred <= 0.5:\n        return 0.0\n    if rating_pred <= 1.5:\n        return 1.0\n    if rating_pred <= 1.75:\n        return 1.5\n    if rating_pred <= 2.25:\n        return 2.0\n    if rating_pred <= 2.75:\n        return 2.5\n    if rating_pred <= 3.25:\n        return 3.0\n    if rating_pred <= 3.75:\n        return 3.5\n    if rating_pred <= 4.25:\n        return 4.0\n    if rating_pred <= 4.75:\n        return 4.5\n    return 5.0","51d8abaa":"# \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0442\u0430\u043a\u043e\u0435 \u043e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u0435\nfor i in range(len(y_pred)):\n    y_pred[i] = fine_rating_pred(y_pred[i])","e340a6e0":"y_pred","ef8cc792":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nmae = metrics.mean_absolute_error(y_test, y_pred)\nprint(f'\u0414\u043e\u0441\u0442\u0438\u0433\u043d\u0443\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 MAE: {mae}')","b5e8f6b8":"# Best MAE: 0.1643125\n# Previews MAE: 0.1649375","2b8fc5c8":"plt.figure(figsize=(10,10))\nfeat_importances = pd.Series(rfm.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","c795d00e":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0432 \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432, \u0432\u043a\u043b\u044e\u0447\u0438\u0432 \u0432 \u043d\u0435\u0433\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 kaggle_task.csv\nvalid_df = pd.concat([df, encoded], axis=1)\nvalid_df = valid_df[~valid_df['Main']]\nvalid_df = valid_df[train_features_set]","014ea149":"# \u041f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\nvalid_y_pred = rfm.predict(valid_df)","14eed872":"# \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u0435\nfor i in range(len(valid_y_pred)):\n    valid_y_pred[i] = fine_rating_pred(valid_y_pred[i])","848095c2":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 submission_df\nsubmission_df = pd.DataFrame()","1e6c2fe4":"# \u0417\u0430\u043f\u0438\u0448\u0435\u043c \u0432 \u043d\u0435\u0433\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nsubmission_df['Restaurant_id'] = df[~df['Main']]['Restaurant_id']\nsubmission_df['Rating'] = valid_y_pred","345daaf5":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c\nsubmission_df","358a8897":"# \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0444\u0430\u0439\u043b\nsubmission_df.to_csv('submission.csv', index=False)","25410a6c":"## \u041e\u0431\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f","a85ce424":"## 4. \u041e\u0442\u0437\u044b\u0432\u044b","3e4edfab":"### \u0422\u0440\u0435\u043d\u0438\u0440\u0443\u0435\u043c \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c","51e31b65":"## \u0418\u043d\u0441\u0430\u0439\u0442!!!\n\u0418\u0437 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u044b:\n- \u041f\u043e\u043b\u0435 Restaurant_id \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0435\u043c \u0443\u0433\u043e\u0434\u043d\u043e, \u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430. \u041e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u0441\u0442\u043e\u0438\u0442. \n- \u041d\u0430 \u0440\u043e\u043b\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432 \u0441\u043a\u043e\u0440\u0435\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0435\u0442\u0435\u043d\u0434\u043e\u0432\u0430\u0442\u044c \u0432 \u0440\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u043a\u0430\u043a URL_TA, \u0442\u0430\u043a \u0438 ID_TA. \u041d\u043e \u0438 \u0442\u0443\u0442 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043d\u0438\u0445 \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u0435\u0439: ","53b46ccf":"### \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u211612. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435","9f2c5728":"### \u0418\u043d\u0441\u0430\u0439\u0442!!!\n\u041d\u0430 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0443 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0443 \u0446\u0435\u043d \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043c\u0435\u043d\u044c\u0448\u0435 40.\n\u0418\u0437 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u0442\u0430\u043a\u0438\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u043f\u043e\u044f\u0432\u0438\u043b\u0438\u0441\u044c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0435\u0434\u0430\u0432\u043d\u043e \u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u043d\u0438\u043c \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e.\n\u0411\u0443\u0434\u0435\u043c \u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0438\u0437 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0447\u0442\u043e \u0432 \u043d\u043e\u0432\u044b\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0446\u0435\u043d \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439, \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0440\u0438\u043e\u0431\u0440\u0435\u0441\u0442\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0443\u0440\u0443.\n\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0443\u0440\u043e\u0432\u043d\u044e \u0446\u0435\u043d \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\n- \u041f\u0440\u0438 0-5 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0446\u0435\u043d \u0431\u0443\u0434\u0435\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c '\\\\$'\n- \u041f\u0440\u0438 5+ \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0446\u0435\u043d \u0431\u0443\u0434\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0438\u043c '\\\\$\\\\$ - \\\\$\\\\$\\\\$'\n\n# \u0417\u0430\u0431\u0435\u0433\u0430\u044f \u0432\u043f\u0435\u0440\u0435\u0434... \u041a\u0430\u043a \u043d\u0438 \u0441\u0442\u0440\u0430\u043d\u043d\u043e, \u044d\u0442\u043e \u043d\u0435 \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u043e. \u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043b\u0443\u0447\u0448\u0435, \u0435\u0441\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c '\\\\$\\\\$ - \\\\$\\\\$\\\\$'. \u0414\u0440\u0443\u0436\u043d\u043e \u043a\u0435\u043a\u0430\u0435\u043c!!!","d8360a25":"### \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u21164. \u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 'Price Range'","2af46116":"### \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u0433\u0440\u0443\u043f\u043f\u0430 \u0431\u0438\u043d\u0430\u0440\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u2116\u211614 (126 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435). \u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0438\u043b\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u043a\u0443\u0445\u043d\u0438 \u0432 \u043c\u0435\u043d\u044e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430.","fd2a4a97":"### \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u21167. \u042f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0433\u043e\u0440\u043e\u0434 \u0441\u0442\u043e\u043b\u0438\u0446\u0435\u0439","a8593ed4":"### \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u2116 2. \u041e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u043d\u0433","ec01b425":"### \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u21168. \u041d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435","952f26fd":"### \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u21163. \u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 'Number of Reviews'","3eaf23a4":"#### \u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u044d\u0442\u043e\u043c Series \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u043e\u0431\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u043e\u043c \u044f\u0437\u044b\u043a\u0430 Python.","b7586bec":"### \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u211616. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0430\u0442\u043e\u0439 \u0438 \u0434\u0430\u0442\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435.","12444f13":"### \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u2116 1. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435","7c2afb47":"#### \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0438 \u0433\u043e\u0440\u043e\u0434\u0430 \u0438 \u0441\u0442\u0440\u0430\u043d\u0435\n#### \u0413\u043e\u0440\u043e\u0434\u043e\u0432 \u043d\u0435 \u0442\u0430\u043a \u043c\u043d\u043e\u0433\u043e, \u0442\u0430\u043a \u0447\u0442\u043e \u0433\u0443\u0433\u043b\u0438\u043c \u0438 \u0432\u043d\u043e\u0441\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0432\u0440\u0443\u0447\u043d\u0443\u044e...","b1e12831":"#### \u042d\u0442\u0438 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u043d\u043e\u0441\u044f\u0442 \u0448\u0443\u043c, \u0442\u0430\u043a \u0447\u0442\u043e \u043e\u0442 \u043d\u0438\u0445 \u043b\u0443\u0447\u0448\u0435 \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f.\n## \u041e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442!!! \u041d\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u044d\u0442\u0438 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e\u0432\u044b\u0448\u0430\u0435\u0442\u0441\u044f!!! \u0414\u0440\u0443\u0436\u043d\u043e \u043a\u0435\u043a\u0430\u0435\u043c!!!","50033fef":"## 1. \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445","49f4ea62":"### \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u211617. \u0427\u0438\u0441\u043b\u043e\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u044c ID_TA.","e5fc2fe2":"## 2. \u0413\u0435\u043e\u0433\u0440\u0430\u0444\u0438\u044f","7f990a35":"### \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u211611. \u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 'Cuisine Style'","45da5a82":"# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430","b6914d5e":"### \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u21166. \u041a\u043e\u0434 \u0433\u043e\u0440\u043e\u0434\u0430","6af2fef7":"### \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u211615. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439, \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c\u0438 \u0434\u0432\u0443\u043c\u044f \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438","8cd10f0b":"### \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u211618. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u044e\u0434\u0435\u0439 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435, \u043f\u0440\u0438\u0445\u043e\u0434\u044f\u0449\u0438\u0445\u0441\u044f \u043d\u0430 1 \u043e\u0442\u0437\u044b\u0432 \u043c\u043e\u0436\u0435\u0442 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430.\n## \u041f\u043e\u0447\u0435\u043c\u0443-\u0442\u043e \u043d\u0435 \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u043e. \u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0443\u0445\u0443\u0434\u0448\u0438\u043b\u0430\u0441\u044c. \u0414\u0440\u0443\u0436\u043d\u043e \u043a\u0435\u043a\u0430\u0435\u043c!!!","da802ac7":"#### \u041e\u0431\u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435: \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0435\u0442\u044c \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442 \u0442\u043e\u0433\u043e, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u043e\u0448\u043b\u043e \u043c\u0435\u0436\u0434\u0443 \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0434\u0432\u0443\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432, \u043d\u043e \u0438 \u043e\u0442 \u0442\u043e\u0433\u043e \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0448\u043b\u043e \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430 \u0434\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0430\u0442\u044b.","b281ec14":"### \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u21165. \u0427\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043a\u043e\u0434 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0446\u0435\u043d","cc2119d3":"## 3. \u0412\u0438\u0434\u044b \u043a\u0443\u0445\u043d\u0438","5e96ac3d":"### \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u211618. \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0446\u0435\u043d \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0441\u0440\u0435\u0434\u0438 \u0432\u0441\u0435\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0433\u043e\u0440\u043e\u0434\u0430. \u0418\u0434\u0435\u044f: \u0432\u0440\u044f\u0434 \u043b\u0438 \u0445\u043e\u0440\u043e\u0448\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u044b \u0431\u0443\u0434\u0443\u0442 \u0443 \u043d\u0435 \u0441\u0430\u043c\u044b\u0445 \u043a\u0440\u0443\u0442\u044b\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 \u0441\u0430\u043c\u044b\u043c\u0438 \u043a\u0440\u0443\u0442\u044b\u043c\u0438 \u0446\u0435\u043d\u0430\u043c\u0438 \u0438 \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442.","d5dd09cb":"### \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u211610. \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u043e\u0434\u0438\u043d \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d","10ceb93c":"### \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u211613. \u041f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0441\u0440\u0435\u0434\u0438 \u043a\u0443\u0445\u043e\u043d\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043a\u0443\u0445\u043d\u044f \u043f\u0440\u0438\u0441\u0443\u0449\u0430\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u043c\u0443.","b15cb64f":"\u041f\u043e\u043a\u0430 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0435 encoded,\n\u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e\u0441\u043b\u0435 \u043a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0430\u0446\u0438\u0438 126 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\n\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0447\u0435\u0440\u0435\u0437 df.info() \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0437\u0430\u0442\u0440\u0443\u0434\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c.\n\u041a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0430\u0446\u0438\u044e \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0431\u0443\u0434\u0435\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u044c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u0434\u0430:\n``` python\npd.concat([df, encoded], axis=1)\n```","ef8d2009":"#### \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0438\u043f\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043e\u0434\u043d\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435.","a5a45d94":"## 2. \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0446\u0435\u043d\u0430\u0445","420ec0f4":"### \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u21169. \u041a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u044b"}}