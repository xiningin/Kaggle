{"cell_type":{"ba42e869":"code","1cea7950":"code","92f3cc51":"code","15678a96":"code","e312524a":"code","eb21676d":"code","e72888d0":"code","b8680582":"code","2dbe03cd":"code","31c279ae":"code","15a91a46":"code","ba78654d":"code","3bbcd31b":"code","95a08af1":"code","4f5f5669":"code","ad2189b0":"code","618fb6b7":"code","b0a2e85a":"code","bb444fa0":"code","e772837f":"code","9d37281f":"code","64048c4d":"code","2b90bf15":"code","a1ae95cd":"code","0ccd1153":"code","087b2d0b":"code","9005e9c3":"code","fc54e908":"code","bbe100e9":"code","5fbcc209":"code","580008c4":"code","c56a16c7":"code","ccb4c61c":"code","96b69bd4":"code","c0b3397d":"code","49edc119":"code","5d4ea8f1":"code","cd7ba927":"code","a57ab75d":"code","2fcb6b7b":"code","fa782426":"code","a29fc9a4":"markdown","75675f2d":"markdown","11bbe0ce":"markdown","39e3a8aa":"markdown","5b52febd":"markdown"},"source":{"ba42e869":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nfrom subprocess import check_output\nprint(os.listdir(\"..\/input\"))\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n\n\n\n# Any results you write to the current directory are saved as output.","1cea7950":"import pandas as pd\nimport numpy as np\nimport random as rnd\n\n# imports for visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbours import KNeighborsclassifier\nfrom sklearn.tree import DecisionTreeClassifier","92f3cc51":"#Reading input data\ntrain_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')","15678a96":"train_df.head()","e312524a":"train_df.tail()","eb21676d":"train_df.info()\nprint('-'*40)\ntest_df.info()","e72888d0":"train_df.isnull().sum()","b8680582":"classmeans=train_df.pivot_table('Fare',index=['Sex','Pclass'],aggfunc=np.mean)\nprint(classmeans)","2dbe03cd":"import warnings\nwarnings.filterwarnings('ignore')\nsns.set_style('darkgrid')\ng=sns.FacetGrid(train_df,row='Pclass',height=3,aspect=1.8,palette='muted')\ng.map(sns.pointplot,'Embarked','Survived','Sex')\ng.add_legend()\nplt.show()","31c279ae":"grid=sns.FacetGrid(train_df,row=\"Sex\",col=\"Survived\",height=3,aspect=1.5)\ngrid.map(plt.hist,'Age',stacked=True,bins=20,linewidth=0.5)","15a91a46":"\nplt.figure(figsize=(12,10))\nplt.subplot(2,2,1)\nsns.barplot('SibSp','Survived',data=train_df)\nplt.subplot(2,2,2)\nsns.barplot('Parch','Survived',data=train_df)\nplt.subplot(2,2,3)\nsns.barplot('Ticket','Survived',data=train_df)\nplt.subplot(2,2,4)\nsns.barplot('Cabin','Survived',data=train_df)\n\n","ba78654d":"df=pd.concat([train_df,test_df],ignore_index=True,sort=False)\n","3bbcd31b":"df.tail(10)","95a08af1":"df.isnull().sum()[df.isnull().sum()>0]\n\n","4f5f5669":"df['Title']=df['Name'].str.split(',').str[1].str.split('.').str[0]\ndf['Title']=df['Title'].str.strip()","ad2189b0":"df['Title'].unique()\nTitle_list=df['Title'].unique().tolist()\nprint(Title_list)","618fb6b7":"df.head()","b0a2e85a":"pd.crosstab(df['Title'],df['Sex'])","bb444fa0":"# Finding mean Fare with respect to title and sex\ndf.pivot_table('Age',index=['Title','Sex'],aggfunc=np.mean,margins=False)\n","e772837f":"map_title={\n    'Capt':        'Officer',\n    'Col':         'Officer',\n    'Dr':          'Officer',\n    'Major':       'Officer',\n    'Rev':         'Officer',\n    'Don':         'Royalty',\n    'Dona':        'Royalty',\n    'Jonkheer':    'Royalty',\n    'Lady':        'Royalty',\n    'Sir':         'Royalty',\n    'the Countess':'Royalty',\n    'Mlle':        'Miss',\n    'Mme':         'Miss',\n    'Ms':          'Mrs',\n    'Mr':          'Mr',\n    'Master':      'Master',\n    'Miss':        'Miss',\n    'Mrs':         'Mrs'}\n","9d37281f":"df['Title']=df['Title'].map(map_title)","64048c4d":"df.pivot_table('Age',index=['Title','Sex'],aggfunc=np.mean,margins=False)","2b90bf15":"def new_age (cols):\n    title=cols[0]\n    Sex=cols[1]\n    Age=cols[2]\n    if pd.isnull(Age):\n        if title=='Master' and Sex==\"male\":\n            return 5.48\n        elif title=='Miss' and Sex=='female':\n            return 21.77\n        elif title=='Mr' and Sex=='male': \n            return 32.25\n        elif title=='Mrs' and Sex=='female':\n            return 36.99\n        elif title=='Officer' and Sex=='female':\n            return 49\n        elif title=='Officer' and Sex=='male':\n            return 46.14\n        elif title=='Royalty' and Sex=='female':\n            return 40.00\n        else:\n            return 42.33\n    else:\n        return Age \n","a1ae95cd":"df.Age=df[['Title','Sex','Age']].apply(new_age,axis='columns')","0ccd1153":"df['HasCabin']= ~df['Cabin'].isnull()\ndf['Fare']=df['Fare'].fillna(df['Fare'].median())\ndf['Embarked']=df['Embarked'].fillna(df['Embarked'].mode()[0])","087b2d0b":"df.isnull().sum()","9005e9c3":"plt.figure(figsize=(12,4))\nplt.subplot(1,2,1)\nsns.distplot(df[df.Survived==1].Age, color='green', kde=False)\nsns.distplot(df[df.Survived==0].Age, color='orange', kde=False)\nplt.subplot(1,2,2)\nplt.xlim(0,100)\nsns.distplot(df[df.Survived==1].Fare, color='green', kde=False)\nsns.distplot(df[df.Survived==0].Fare, color='orange', kde=False)\nplt.show()\n","fc54e908":"df['family']=df['SibSp']+df['Parch']\ndf['family'].head()","bbe100e9":"df.head()","5fbcc209":"df.drop(['Cabin','Ticket','PassengerId','Name','SibSp','Parch'],axis=1,inplace=True)","580008c4":"df.head()","c56a16c7":"df.isnull().sum()","ccb4c61c":"train_data=df.iloc[:891,:]\ntest_data=df.iloc[891:,:]\n","96b69bd4":"train_data=pd.get_dummies(train_data,columns=['Pclass','Sex','Embarked'],prefix=['Pclass','Sex','Embarked'])\ntest_data=pd.get_dummies(test_data,columns=['Pclass','Sex','Embarked'],prefix=['Pclass','Sex','Embarked'])","c0b3397d":"xtrain=train_data.drop(['Survived'],axis=1)\nytrain=train_data['Survived']\nxtest=test_data.drop(['Survived'],axis=1)\n\n","49edc119":"xtrain.drop(['Title'],axis=1,inplace=True)\nxtest.drop(['Title'],axis=1,inplace=True)","5d4ea8f1":"logreg = LogisticRegression()\nlogreg.fit(xtrain, ytrain)\nY_pred = logreg.predict(xtest)\nacc_log = round(logreg.score(xtrain, ytrain) * 100, 2)\nacc_log\n\n","cd7ba927":"svc = SVC()\nsvc.fit(xtrain, ytrain)\nY_pred = svc.predict(xtest)\nacc_svc = round(svc.score(xtrain, ytrain) * 100, 2)\nacc_svc\n\n","a57ab75d":"random_forest = RandomForestClassifier(n_estimators=10)\nrandom_forest.fit(xtrain, ytrain)\nY_pred = random_forest.predict(xtest)\nrandom_forest.score(xtrain, ytrain)\nacc_random_forest = round(random_forest.score(xtrain, ytrain) * 100, 2)\nacc_random_forest\n","2fcb6b7b":"linear_svc = LinearSVC()\nlinear_svc.fit(xtrain, ytrain)\nY_pred = linear_svc.predict(xtest)\nacc_linear_svc = round(linear_svc.score(xtrain, ytrain) * 100, 2)\nacc_linear_svc","fa782426":"decision_tree = DecisionTreeClassifier(max_depth=10)\ndecision_tree.fit(xtrain, ytrain)\nY_pred = decision_tree.predict(xtest)\nacc_decision_tree = round(decision_tree.score(xtrain, ytrain) * 100, 2)\nacc_decision_tree","a29fc9a4":"Applying machine-learnning models","75675f2d":"spliting data into train and test","11bbe0ce":"Visualization","39e3a8aa":"plotting Age and Fare Column after cleaning","5b52febd":"Import different modules"}}