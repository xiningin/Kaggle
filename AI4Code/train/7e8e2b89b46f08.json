{"cell_type":{"6d148974":"code","020b0037":"code","0516b9c9":"code","6cc68ce9":"code","a760253e":"code","27ec5af9":"code","0afa5bdd":"code","10d1409f":"code","4f6a2746":"code","bd02173f":"code","f5949d0a":"code","e9c9fcc8":"code","044984b5":"code","b9858212":"markdown","88a76ded":"markdown","a1838b72":"markdown","9062da6b":"markdown","e3fbee6f":"markdown","5dda89d2":"markdown"},"source":{"6d148974":"import pandas as pd\n\ndata = pd.read_csv('..\/input\/boston-housing-price-dataset\/housing.csv', header=None, sep='\\s+')\ncolumn_list = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']\ndata.columns = column_list\ndata.head()","020b0037":"data.isnull().sum()","0516b9c9":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np","6cc68ce9":"x_vars = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT']\ny_vars = ['MEDV']\ng = sns.PairGrid(data, x_vars=x_vars, y_vars=y_vars)\ng.fig.set_size_inches(25, 3)\ng.map(sns.scatterplot)\ng.add_legend()","a760253e":"plt.figure(figsize=(20, 10))\nsns.heatmap(data.corr(),  annot=True)","27ec5af9":"from sklearn.model_selection import train_test_split\n\nboston = data[['INDUS', 'NOX', 'RM', 'AGE', 'DIS', 'LSTAT', 'PTRATIO', 'MEDV']]\n# boston = data[['RM', 'LSTAT', 'PTRATIO', 'MEDV']]\nfeatures = boston.drop('MEDV', axis=1)\nlabels = boston['MEDV']\n\nX_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=43)\n\nX_train.shape, X_test.shape, y_train.shape","0afa5bdd":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\ny_pred_linear = model.predict(X_test)\n\nprint('MAE:', mean_absolute_error(y_pred_linear, y_test))\nprint('MSE:', mean_squared_error(y_pred_linear, y_test))\nprint('R2_score:', r2_score(y_pred_linear, y_test))","10d1409f":"sns.regplot(x=y_pred_linear, y=y_test)\nplt.xlabel('predict MEDV')\nplt.ylabel('MEDV')","4f6a2746":"from sklearn.ensemble import RandomForestRegressor\n\nregr = RandomForestRegressor(n_estimators=100, random_state=54, max_depth=10)\nregr.fit(X_train, y_train)\n\ny_pred_rnd = regr.predict(X_test)\nprint('MAE:', mean_absolute_error(y_pred_rnd, y_test))\nprint('MSE:', mean_squared_error(y_pred_rnd, y_test))\nprint('R2_score:', r2_score(y_pred_rnd, y_test))","bd02173f":"feat_importances = pd.DataFrame(regr.feature_importances_, index=X_train.columns, columns=[\"Importance\"])\nfeat_importances.sort_values(by='Importance', ascending=False, inplace=True)\nfeat_importances.plot(kind='bar', figsize=(8,6))","f5949d0a":"sns.regplot(x=y_pred_rnd, y=y_test)\nplt.xlabel('predict MEDV')\nplt.ylabel('MEDV')\nplt.xlim(5, 50)","e9c9fcc8":"df = pd.DataFrame({'prediction': y_pred_rnd, 'test data': y_test, 'error': y_pred_rnd - y_test})\ndf.head()","044984b5":"df[df['error'].abs() >= 5]","b9858212":"# The Boston Housing Dataset\n\n### The Boston Housing Dataset is a derived from information collected by the U.S. Census Service concerning housing in the area of Boston MA. The following describes the dataset columns:\n**CRIM**- per capita crime rate by town<br>\n**ZN**- proportion of residential land zoned for lots over 25,000 sq.ft.<br>\n**INDUS**- proportion of non-retail business acres per town.<br>\n**CHAS**- Charles River dummy variable (1 if tract bounds river; 0 otherwise)<br>\n**NOX**- nitric oxides concentration (parts per 10 million)<br>\n**RM**- average number of rooms per dwelling<br>\n**AGE**- proportion of owner-occupied units built prior to 1940<br>\n**DIS**- weighted distances to five Boston employment centres<br>\n**RAD**- index of accessibility to radial highways<br>\n**TAX**- full-value property-tax rate per \\$10,000<br>\n**PTRATIO**- pupil-teacher ratio by town<br>\n**B**- 1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town<br>\n**LSTAT**- % lower status of the population<br>\n**MED**- Median value of owner-occupied homes in \\**1000's","88a76ded":"## Random Forest Regressor","a1838b72":"# Train, Validation, Test split","9062da6b":"## \u7dda\u6027\u8ff4\u6b78","e3fbee6f":"# \u6578\u64da\u53ef\u8996\u5316","5dda89d2":"# \u6a21\u578b"}}