{"cell_type":{"ef303e72":"code","63545d94":"code","c4e70268":"code","b7e037d7":"code","0c485d43":"code","04b7248e":"code","6f02032c":"code","6fe27612":"code","d4f2ac27":"code","a8a05030":"code","24ce0717":"code","34d5a4a0":"code","3b787ea3":"code","0df29621":"code","706bd6b5":"code","be675cf7":"code","c5f1dcc1":"code","4b0c6ee9":"code","d45c080b":"code","99a1eaf5":"code","3775af5a":"code","682f9934":"code","ae551957":"code","79fa1445":"code","1c8ad228":"code","50b7f313":"code","483c8dd3":"code","c3bafbce":"code","a5dea22e":"code","4fb83258":"markdown","eb27f892":"markdown","015d0cb6":"markdown","d66924a5":"markdown","4cc26407":"markdown","0844cc42":"markdown","297f4eb8":"markdown","d62f73d9":"markdown","7376aaa6":"markdown"},"source":{"ef303e72":"#essentials\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.tools as tls\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly.graph_objs as go\nimport plotly.express as px\ninit_notebook_mode(connected=True)\n\n#machine learning\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\n\n#show input file directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","63545d94":"#read data\ninsurance_data = pd.read_csv('\/kaggle\/input\/insurance\/insurance.csv')","c4e70268":"#basic info\ninsurance_data.info()","b7e037d7":"#basic stats\ninsurance_data.describe()","0c485d43":"#check head of data\ninsurance_data.head()","04b7248e":"#check distribution of age\ninsurance_data['age'].hist(bins=20)","6f02032c":"#explore relationship across dataset\nsns.pairplot(insurance_data)","6fe27612":"#compare charges between male and female\nsns.stripplot(x='sex',y='charges',data=insurance_data)","d4f2ac27":"#compare charges between smokers and non smokers\nsns.stripplot(x='smoker',y='charges',data=insurance_data)","a8a05030":"g = sns.FacetGrid(data=insurance_data,col='smoker')\ng.map(sns.distplot,'charges',bins=30,kde=False)","24ce0717":"#plot bmi vs. charges in relationship with smoker y\/n\npx.scatter(insurance_data,x='bmi',y='charges',color='smoker',color_discrete_sequence=['red','blue'])","34d5a4a0":"#plot bmi vs. charges in relationship with smoker y\/n\nsns.lmplot(x='bmi',y='charges',data= insurance_data, col = 'smoker')","3b787ea3":"#plot number of children vs. charges\nsns.barplot(x='children',y='charges',data = insurance_data)","0df29621":"#plot region vs. charges\nsns.barplot(x='region',y='charges',data = insurance_data)","706bd6b5":"#plot bmi vs. region\nsns.stripplot(x='region',y='bmi',data=insurance_data)","be675cf7":"insurance_data.info()","c5f1dcc1":"#assign dummy variable to categorical features\n\ninsurance_data=pd.get_dummies(insurance_data, columns=['sex'])\ninsurance_data=pd.get_dummies(insurance_data, columns=['smoker'])\ninsurance_data=pd.get_dummies(insurance_data, columns=['children'])\n\ninsurance_data.drop('sex_female', axis=1, inplace=True)\ninsurance_data.drop('smoker_no', axis=1, inplace=True)\ninsurance_data.drop('children_5', axis=1, inplace=True)","4b0c6ee9":"#create dummy variables for region\ninsurance_data=pd.get_dummies(insurance_data, columns=['region'])\n\ninsurance_data.drop('region_northeast', axis=1, inplace=True)","d45c080b":"#scale normalize numerical variables\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nnum_vars = ['age', 'bmi', 'charges']\ninsurance_data[num_vars] = scaler.fit_transform(insurance_data[num_vars])","99a1eaf5":"insurance_data.head()","3775af5a":"insurance_data.info()","682f9934":"#Correlation using heatmap\nplt.figure(figsize = (10, 10))\nsns.heatmap(insurance_data.corr(), annot = True, cmap=\"YlGnBu\")\nplt.show()","ae551957":"#assign features and labels\nX = insurance_data.drop(['charges'],axis=1)\ny = insurance_data['charges']","79fa1445":"#split train and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","1c8ad228":"#assign linear model object\nlm = LinearRegression(fit_intercept=False, normalize=True)","50b7f313":"#fit, train, test, and show results\ndef fit_show_results(X_train, y_train, X_test, y_test):\n    \n    #fit linear model\n    lm.fit(X_train,y_train)\n    \n    #call predictions\n    predictions = lm.predict(X_test)\n    \n    #regression plot of the real test values versus the predicted values\n    plt.figure(figsize=(16,8))\n    sns.regplot(y_test,predictions)\n    plt.xlabel('Predictions')\n    plt.ylabel('Actual')\n    plt.title(\"Linear Model Predictions\")\n    plt.grid(False)\n    plt.show()\n    \n    #show dataframe of coefficients\n    coeffecients = pd.DataFrame(lm.coef_,X_train.columns)\n    coeffecients.columns = ['Coeffecient']\n    print(coeffecients)\n    \n    #calculate metrics\n    print('\\n')\n    print('MAE:', metrics.mean_absolute_error(y_test, predictions))\n    print('MSE:', metrics.mean_squared_error(y_test, predictions))\n    print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))\n    \n    #calculate r squared\n    SS_Residual = sum((y_test-predictions)**2)\n    SS_Total = sum((y_test-np.mean(y_test))**2)\n    r_squared = 1 - (float(SS_Residual))\/SS_Total\n    print('R Squared:', r_squared)","483c8dd3":"#fit and check p-values\nimport statsmodels.api as sm\n\nXt = sm.add_constant(X_train)\nlin_model = sm.OLS(y_train, Xt).fit()\nprint(lin_model.summary())","c3bafbce":"#only select features with p-values lower than significance value of 0.05\nX_train2 = X_train[['age','bmi','smoker_yes']]\nX_test2 = X_test[['age','bmi','smoker_yes']]","a5dea22e":"#fit and run model\nfit_show_results(X_train2, y_train, X_test2, y_test)","4fb83258":"## Machine Learning","eb27f892":"## Exploratory Data Analysis","015d0cb6":"**Columns:**\n* age: age of primary beneficiary\n* sex: insurance contractor gender, female, male\n* bmi: Body mass index, providing an understanding of body, weights that are relatively high or low relative to height, objective index of body weight (kg \/ m ^ 2) using the ratio of height to weight, ideally 18.5 to 24.\n* children: Number of children covered by health insurance \/ Number of dependents\n* smoker: Smoking (Yes\/No)\n* region: the beneficiary's residential area in the US, northeast, southeast, southwest, northwest.\n* charges: Individual medical costs billed by health insurance","d66924a5":"props to the uploader of this dataset Miri Choi; \n\nthis data orinated from Machine Learning with R by Brett Lantz, a book that provides an introduction to machine learning using R","4cc26407":"Goal: Explore dataset to find relationships and predict medical cost with multiple linear regression","0844cc42":"## Introduction","297f4eb8":"it seems smoking has the highest correlation to charges","d62f73d9":"**Linear Regression**","7376aaa6":"there are no missing values"}}