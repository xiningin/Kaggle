{"cell_type":{"22463268":"code","4ed8d05d":"code","d127ae2f":"code","3cca0d25":"code","51a710b4":"code","b16e3532":"code","6cfec67a":"code","465e73ae":"code","1b919223":"code","8af9859d":"code","f9f8c0fe":"code","a0d8bfc2":"code","b633d901":"code","bdc1cbf6":"code","55946e31":"code","70e37fc7":"code","3baa394f":"code","002f9751":"code","3b7b2d57":"code","20a0191c":"code","b5b22df7":"code","8988c5e5":"code","47cebf99":"code","7102c63b":"code","d2807d17":"code","3e4c27d1":"code","c10f249e":"code","2d1ca505":"markdown","12a78d1d":"markdown","267d0aff":"markdown","6a842ed0":"markdown","bcbf941f":"markdown"},"source":{"22463268":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4ed8d05d":"df = pd.read_csv('\/kaggle\/input\/enron-email-dataset\/emails.csv')","d127ae2f":"df.info()","3cca0d25":"df.head()","51a710b4":"def message_id(x):\n    message_id = x.split('\\n')[0]\n    return message_id.split(':')[1]\ndf['Message-ID']=df['message'].apply(message_id)","b16e3532":"def date(x):\n    date=x.split('\\n')[1]\n    date = date.split(':')[1].split(',')[1]\n    date=date[:-3]\n    return date\ndf['Date']=df['message'].apply(date)\n    ","6cfec67a":"df.head(2)","465e73ae":"def month(x):\n    date=x.split('\\n')[1]\n    return date.split(':')[1].split(',')[1].split(' ')[2]\ndf['Month']=df['message'].apply(month)","1b919223":"def year(x):\n    date=x.split('\\n')[1]\n    return date.split(':')[1].split(',')[1].split(' ')[3]\ndf['Year']=df['message'].apply(year)\n\ndf.head(2)","8af9859d":"def day(x):\n    date=x.split('\\n')[1]\n    return date.split(':')[1].split(',')[0]\ndf['Day']=df['message'].apply(day)","f9f8c0fe":"def sender(x):\n    sender=x.split('\\n')[2]\n    return sender.split(':')[1]\ndf['Sender_Email']=df['message'].apply(sender)","a0d8bfc2":"def receiver(x):\n    receiver = x.split('\\n')[3]\n    return receiver.split(':')[1]\ndf['Receiver_Email']=df['message'].apply(receiver)","b633d901":"def subject(x):\n    subject = x.split('\\n')[4]\n    return subject.split(':')[-1]\ndf['Subject']=df['message'].apply(subject)","bdc1cbf6":"def mime_version(x):\n    mime_version=x.split('\\n')[5]\n    return mime_version.split(':')[-1]\ndf['Mime_Version']=df['message'].apply(mime_version)","55946e31":"df['Mime_Version'].isnull().count()","70e37fc7":"def content_type(x):\n    content_type=x.split('\\n')[6]\n    return content_type.split(':')[-1].split(';')[0]\ndf['Content-Type']=df['message'].apply(content_type)\n\ndef ascii_set(x):\n    content_type=x.split('\\n')[6]\n    return content_type.split(':')[-1].split(';')[-1]\ndf['Char_Set']=df['message'].apply(ascii_set)","3baa394f":"def content_encoding(x):\n    content_encoding =x.split('\\n')[7]\n    return content_encoding.split(':')[-1]\ndf['Content-Transfer-Encoding']=df['message'].apply(content_encoding)","002f9751":"def x_from(x):\n    x_from=x.split('\\n')[8]\n    return x_from.split(':')[-1]\ndf['Sender']=df['message'].apply(x_from)","3b7b2d57":"def x_to(x):\n    x_to=x.split('\\n')[9]\n    return x_to.split(':')[-1]\ndf['Receiver']=df['message'].apply(x_to)","20a0191c":"def x_cc(x):\n    x_cc=x.split('\\n')[10]\n    return x_cc.split(':')[-1]\ndf['CC']=df['message'].apply(x_cc)","b5b22df7":"def x_bcc(x):\n    x_bcc=x.split('\\n')[11]\n    return x_bcc.split(':')[-1]\ndf['BCC']=df['message'].apply(x_bcc)","8988c5e5":"def x_folder(x):\n    x_folder = x.split('\\n')[12]\n    return x_folder.split(':')[-1]\ndf['Folder']=df['message'].apply(x_folder)","47cebf99":"def x_origin(x):\n    x_origin=x.split('\\n')[13]\n    return x_origin.split(':')[-1]\ndf['Origin']=df['message'].apply(x_origin)\n","7102c63b":"def x_filename(x):\n    x_filename=x.split('\\n')[14]\n    return x_filename.split(':')[-1]\ndf['File Name']=df['message'].apply(x_filename)","d2807d17":"df.head(10)","3e4c27d1":"df['File Name'].str.split('.').str[1].str.lower().value_counts().drop_duplicates().head(5)\n","c10f249e":"df1 = pd.DataFrame(df['Receiver_Email'].str.split('@').str[1])\ndf1 = df1[df1.Receiver_Email != 'enron.com']\ndf1['Receiver_Email'].value_counts().head(1)","2d1ca505":" To display the five most used file extensions","12a78d1d":"Use .head() to show the first two row entries.","267d0aff":"Now, we would be building a separate dataframe with distinct columns for message, date, time etc","6a842ed0":"To display the most used internal(not including enron.com that is) e-mail service","bcbf941f":"Using and implementing the above code, we have successfully generated the table shown below "}}