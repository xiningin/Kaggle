{"cell_type":{"4ccbc665":"code","f870f5de":"code","a12bb89c":"code","419d7a61":"code","b3bb25dc":"code","87b63833":"code","08af5918":"code","e92e4b68":"code","0fe14060":"code","6daa33a6":"code","02ee5df3":"code","bbdaf5e9":"code","ea35dfcd":"code","4d5e57f2":"code","af23c8f7":"code","4e303e12":"code","35e87b81":"markdown","63a69bee":"markdown","e024d058":"markdown","c62ca69f":"markdown"},"source":{"4ccbc665":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import GridSearchCV\n#!pip install category_encoders\nimport category_encoders\nfrom category_encoders import TargetEncoder, CatBoostEncoder, GLMMEncoder, WOEEncoder","f870f5de":"train = pd.read_csv(\"..\/input\/ef-msu-autumn-1\/train.csv\")\ntest = pd.read_csv(\"..\/input\/ef-msu-autumn-1\/test.csv\")\n\ntest_ids = test[\"CustomerID\"]","a12bb89c":"!pip install sweetviz\nimport sweetviz\nsweetviz.analyze(train).show_notebook();","419d7a61":"rounded_duration = round(train[\"DurationOfPitch\"].mean())\nrounded_monthly_income = round(train[\"MonthlyIncome\"].mean())\n\ntrain[\"Age\"] = train[\"Age\"].fillna(train[\"Age\"].mode().values[0])\ntrain[\"TypeofContact\"] = train[\"TypeofContact\"].fillna(\n    train[\"TypeofContact\"].mode().values[0]\n)\ntrain[\"DurationOfPitch\"] = train[\"DurationOfPitch\"].fillna(rounded_duration)\ntrain[\"NumberOfFollowups\"] = train[\"NumberOfFollowups\"].fillna(\n    train[\"NumberOfFollowups\"].mode().values[0]\n)\ntrain[\"PreferredPropertyStar\"] = train[\"PreferredPropertyStar\"].fillna(\n    train[\"PreferredPropertyStar\"].mode().values[0]\n)\ntrain[\"NumberOfTrips\"] = train[\"NumberOfTrips\"].fillna(\n    train[\"NumberOfTrips\"].mode().values[0]\n)\ntrain[\"NumberOfChildrenVisiting\"] = train[\"NumberOfChildrenVisiting\"].fillna(\n    train[\"NumberOfChildrenVisiting\"].mode().values[0]\n)\ntrain[\"MonthlyIncome\"] = train[\"MonthlyIncome\"].fillna(rounded_monthly_income)\n\ntest[\"Age\"] = test[\"Age\"].fillna(test[\"Age\"].mode().values[0])\ntest[\"TypeofContact\"] = test[\"TypeofContact\"].fillna(\n    test[\"TypeofContact\"].mode().values[0]\n)\ntest[\"DurationOfPitch\"] = test[\"DurationOfPitch\"].fillna(rounded_duration)\ntest[\"NumberOfFollowups\"] = test[\"NumberOfFollowups\"].fillna(\n    test[\"NumberOfFollowups\"].mode().values[0]\n)\ntest[\"PreferredPropertyStar\"] = test[\"PreferredPropertyStar\"].fillna(\n    test[\"PreferredPropertyStar\"].mode().values[0]\n)\ntest[\"NumberOfTrips\"] = test[\"NumberOfTrips\"].fillna(\n    test[\"NumberOfTrips\"].mode().values[0]\n)\ntest[\"NumberOfChildrenVisiting\"] = test[\"NumberOfChildrenVisiting\"].fillna(\n    test[\"NumberOfChildrenVisiting\"].mode().values[0]\n)\ntest[\"MonthlyIncome\"] = test[\"MonthlyIncome\"].fillna(rounded_monthly_income)","b3bb25dc":"train.loc[train.Gender != 'Male', 'Gender'] = 'Female'\ntrain.loc[train.Gender == 'Male', 'Gender'] = 'Male'\n\ntest.loc[train.Gender != 'Male', 'Gender'] = 'Female'\ntest.loc[train.Gender == 'Male', 'Gender'] = 'Male'","87b63833":"cat_features = [\n    \"TypeofContact\",\n    \"Occupation\",\n    \"Gender\",\n    \"ProductPitched\",\n    \"MaritalStatus\",\n    \"Designation\",\n    \"NumberOfChildrenVisiting\",\n    \"OwnCar\",\n    \"PitchSatisfactionScore\",\n    \"Passport\",\n    \"NumberOfTrips\",\n    \"PreferredPropertyStar\",\n    \"NumberOfFollowups\",\n    \"NumberOfPersonVisiting\",\n    \"CityTier\",\n]\n\nnum_features = [ \n    \"Age\",\n    \"DurationOfPitch\",\n    \"MonthlyIncome\"\n]","08af5918":"y = train[\"ProdTaken\"]\ntrain = train.drop([\"ProdTaken\"], axis=1)\n\ntrain, test = train.drop([\"CustomerID\"], axis=1), test.drop([\"CustomerID\"], axis=1)","e92e4b68":"#encoder = GLMMEncoder(cols=cat_features)\n#encoder = WOEEncoder(cols=cat_features)\nencoder = CatBoostEncoder(cols=cat_features)\n\nencoder.fit(train, y)\ntrain = pd.DataFrame(encoder.transform(train), columns=train.columns)\ntest = pd.DataFrame(encoder.transform(test), columns=test.columns)","0fe14060":"scaler = StandardScaler()\nscaler.fit(train, y)\n\ntrain = pd.DataFrame(scaler.transform(train), columns=train.columns)\ntest = pd.DataFrame(scaler.transform(test), columns=test.columns)","6daa33a6":"X_train, X_test, y_train, y_test = train_test_split(train, y, \n                                train_size=0.7, stratify=y, random_state=1)","02ee5df3":"model = ExtraTreesClassifier(n_estimators=1000, random_state=2)\nparams = {\n    'max_depth': [17, 19],\n    #'criterion': ['gini', 'entropy'],\n    'max_features': [5, 7],\n    #'bootstrap': [True, False],\n}\nclf = GridSearchCV(model, params, cv=3, scoring=\"roc_auc\", refit=True, verbose=0)\nclf.fit(X_train, y_train);","bbdaf5e9":"print('Best parameters: ', clf.best_params_)\nprint('test ROC AUC =', roc_auc_score(y_test, clf.predict(X_test)))","ea35dfcd":"best_params = {\"max_features\": 7 , \"n_estimators\": 1000, 'max_depth': 19}\nextra_trees = ExtraTreesClassifier(**best_params, random_state=4)","4d5e57f2":"print(cross_val_score(extra_trees, train, y, cv=5, scoring='roc_auc'))","af23c8f7":"extra_trees.fit(train, y)\npredicted = extra_trees.predict_proba(test)","4e303e12":"submission = pd.DataFrame()\nsubmission[\"CustomerID\"] = test_ids\nsubmission[\"ProdTaken\"] = predicted[:, 1]\n\nsubmission.to_csv(\"extra_random_forest.csv\", index=False)","35e87b81":"\u0414\u0430\u043b\u0435\u0435 \u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0430 sweetviz \u0434\u043b\u044f \u043f\u043e\u0432\u0435\u0440\u0445\u043d\u043e\u0441\u0442\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. Kaggle \u0443\u043f\u043e\u0440\u043d\u043e \u043d\u0435 \u0445\u043e\u0447\u0435\u0442 \u0433\u0440\u0443\u0437\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u044f\u0447\u0435\u0439\u043a\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0435 \u0431\u0443\u0434\u0443, \u043d\u043e \u043a\u043e\u0434 \u043f\u0440\u0438\u0432\u0435\u0434\u0443.","63a69bee":"\u041c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u044d\u043d\u043a\u043e\u0434\u0435\u0440\u044b, \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0434\u0430\u043b CatBoost.","e024d058":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u043e\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438:","c62ca69f":"\u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430"}}