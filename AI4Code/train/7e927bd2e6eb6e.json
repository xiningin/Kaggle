{"cell_type":{"7c218beb":"code","f75cfcff":"code","76b91543":"code","b52bfb3b":"code","bb315074":"code","b78b77cb":"code","47f9d373":"code","d79f8cc8":"code","42b247c9":"code","1152f88e":"code","864ef2d9":"markdown"},"source":{"7c218beb":"import pandas as pd\nfrom PIL import Image\nimport numpy as np\nimport tqdm \nimport os\nimport glob\nimport openslide\nimport matplotlib.pyplot as plt\nfrom joblib import Parallel, delayed\nimport cv2\nimport skimage.io\nimport PIL\nfrom skimage.transform import resize, rescale","f75cfcff":"input_path = \"..\/input\/prostate-cancer-grade-assessment\"","76b91543":"listi = []\ntrain_images_path = os.path.join(input_path,\"train_images\")\nimages = glob.glob(os.path.join(train_images_path, \"*tiff\"))\nimage_label = pd.read_csv(input_path + \"\/train.csv\")[\"image_id\"]\nfor i in tqdm.tqdm(range(len(images))):\n    image = openslide.OpenSlide(images[i])   \n    listi.append((image_label[i],image.dimensions))","b52bfb3b":"width = [i[1][0] for i in listi]\nplt.hist(width)","bb315074":"height = [i[1][1] for i in listi]\nplt.hist(height)","b78b77cb":"mask_images_path = os.path.join(input_path,\"train_label_masks\")\nmasked_images = os.listdir(mask_images_path)","47f9d373":"def overlay_mask_on_slide(image_id, center='radboud', alpha=0.8, max_size=(800, 800)):\n    \"\"\"Show a mask overlayed on a slide.\"\"\"\n    slide = openslide.OpenSlide(os.path.join(train_images_path, f'{image_id}.tiff'))\n    mask = openslide.OpenSlide(os.path.join(mask_images_path, f'{image_id}_mask.tiff'))\n    slide_data = slide.read_region((0,0), slide.level_count - 1, slide.level_dimensions[-1])\n    mask_data = mask.read_region((0,0), mask.level_count - 1, mask.level_dimensions[-1])\n    mask_data = mask_data.split()[0]\n      \n        \n    # Create alpha mask\n    alpha_int = int(round(255*alpha))\n    if center == 'radboud':\n        alpha_content = np.less(mask_data.split()[0], 2).astype('uint8') * alpha_int + (255 - alpha_int)\n    elif center == 'karolinska':\n        alpha_content = np.less(mask_data.split()[0], 1).astype('uint8') * alpha_int + (255 - alpha_int)\n\n    alpha_content = Image.fromarray(alpha_content)\n    preview_palette = np.zeros(shape=768, dtype=int)\n\n    if center == 'radboud':\n        # Mapping: {0: background, 1: stroma, 2: benign epithelium, 3: Gleason 3, 4: Gleason 4, 5: Gleason 5}\n        preview_palette[0:18] = (np.array([0, 0, 0, 0.5, 0.5, 0.5, 0, 1, 0, 1, 1, 0.7, 1, 0.5, 0, 1, 0, 0]) * 255).astype(int)\n    elif center == 'karolinska':\n        # Mapping: {0: background, 1: benign, 2: cancer}\n        preview_palette[0:9] = (np.array([0, 0, 0, 0, 1, 0, 1, 0, 0]) * 255).astype(int)\n\n    mask_data.putpalette(data=preview_palette.tolist())\n    mask_rgb = mask_data.convert(mode='RGB')\n    overlayed_image = Image.composite(image1=slide_data, image2=mask_rgb, mask=alpha_content)\n    overlayed_image.thumbnail(size=max_size, resample=0)\n    \n    slide.close()\n    mask.close()   \n          \n    return overlayed_image","d79f8cc8":"!mkdir train_overlay_images","42b247c9":"train = pd.read_csv('\/kaggle\/input\/prostate-cancer-grade-assessment\/train.csv')\n\ndef image_masking_fix(img_id):\n    img_id = img_id.replace('_mask.tiff', '')\n    save_path = save_dir + img_id + '.png'\n    provider = train[train.image_id == img_id]['data_provider'].values[0]\n    overlay = overlay_mask_on_slide(img_id, center = provider)\n    img = cv2.cvtColor(np.array(overlay), cv2.COLOR_RGB2BGR)\n    img = cv2.resize(img, (512, 512))\n    cv2.imwrite(save_path, img)","1152f88e":"save_dir = \"train_overlay_images\/\" \nos.makedirs(save_dir, exist_ok=True)\n\nParallel(n_jobs=32, verbose=10)(delayed(image_masking_fix)(f) for f in tqdm.tqdm(masked_images))","864ef2d9":"Referace\n\n<https:\/\/www.youtube.com\/watch?v=WaCFd-vL4HA>\n\n<https:\/\/www.kaggle.com\/rohitsingh9990\/panda-resize-and-save-image-mask-overlay>"}}