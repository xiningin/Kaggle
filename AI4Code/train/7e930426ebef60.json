{"cell_type":{"421d0716":"code","95e2755d":"code","b8c1d6fa":"code","34e3128a":"code","73170b87":"code","23266b08":"code","4b9a1db9":"code","eb1ff479":"code","a5a9153b":"code","98dbefa1":"code","5306d974":"code","61125c05":"code","49614bf7":"code","0c6808d9":"code","732c58ab":"code","e85325a9":"code","1c5cb747":"code","ae04a50a":"code","bcf8b425":"code","b9f86ea5":"code","82cec15b":"code","b0be6cf7":"code","3128c886":"code","730b865f":"code","b04ce85e":"code","aed45731":"code","dd94a028":"code","78c2d1c3":"code","2cc9664d":"code","82f0155f":"code","18aa80f4":"code","1f630b00":"code","3a7794ec":"code","49966b56":"code","22321f5f":"code","076d1ecf":"code","23ad76ab":"code","9a93a538":"code","2585c8b8":"code","aadb789a":"code","f30d6301":"code","d2a1b4ba":"code","eee0b0d0":"markdown","cd22d00c":"markdown","e90c44b2":"markdown","4d55261c":"markdown","b7a5a24d":"markdown","d65134ed":"markdown","6b8f02d6":"markdown","fc5b1abc":"markdown","779929ec":"markdown","467850dd":"markdown","e0b01d7d":"markdown","036ff59b":"markdown","5fb51c4d":"markdown","10505aa9":"markdown","2ba48fab":"markdown","2da970b0":"markdown","9f015628":"markdown","8093edef":"markdown","431a12c8":"markdown","2e24d6f9":"markdown","dc6ffbee":"markdown"},"source":{"421d0716":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","95e2755d":"from matplotlib import pyplot as plt\nimport scipy as sc\nfrom scipy import sparse\n\nfrom catboost import CatBoostRegressor\n\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer","b8c1d6fa":"df = pd.read_json('\/kaggle\/input\/om-ml2-21-timeseries\/time_series_train.json')","34e3128a":"df.head()","73170b87":"submit = pd.read_csv('\/kaggle\/input\/om-ml2-21-timeseries\/sample_submission.csv', index_col=0)\nsubmit_for_corretion = pd.read_csv('\/kaggle\/input\/om-ml2-21-timeseries\/sample_submission.csv', index_col=0)","23266b08":"add_features = pd.read_json('\/kaggle\/input\/om-ml2-21-timeseries\/additional_features.json')","4b9a1db9":"add_features.set_index(keys='index', inplace=True)\nadd_features.sort_index(inplace=True)","eb1ff479":"def fill_zero_rows(data, full_shape, non_filled_index):\n    features = np.zeros(shape=(full_shape, data.shape[1]))\n    for i, j in enumerate(non_filled_index):\n        features[j] = data[i]\n    return features","a5a9153b":"bow_columns = ['categories', 'characteristics']\nbow = {col_name : CountVectorizer(tokenizer=lambda l: l, lowercase=False) \n       for col_name in bow_columns}\n\nbow_features = []\nfor col_name in bow:\n    bow_features.append(bow[col_name].fit_transform(add_features[col_name]))\n\nbow_features = sparse.hstack(bow_features).toarray()\n    \nvec_classes = CountVectorizer(tokenizer=lambda l: l, lowercase=False, min_df=3)\n\nvec_classes.fit(add_features.classes)\n\nsvd_classes = TruncatedSVD(n_components=5)\n\nclasses_features = fill_zero_rows(vec_classes.transform(add_features.classes).toarray(), df.shape[0], add_features.index)\nbow_features = fill_zero_rows(bow_features, df.shape[0], add_features.index)\n","98dbefa1":"classes_features = svd_classes.fit_transform(classes_features)","5306d974":"new_features = np.hstack([bow_features, classes_features])","61125c05":"table = np.full(df.shape, 0)\n\n\nfor i, row in enumerate(df.values):\n    for j in row[::-1]:\n        if str(j) == 'None':\n            continue\n        time, measure = tuple(j)\n        table[i, time] = measure","49614bf7":"table","0c6808d9":"last_non_empty_time = np.zeros(table.shape[0])","732c58ab":"r, t = np.where(table != 0)\nfor row, time in zip(r, t):\n    last_non_empty_time[row] = time","e85325a9":"first_non_empty_time = np.zeros(table.shape[0])","1c5cb747":"for row, time in zip(r[::-1], t[::-1]):\n    first_non_empty_time[row] = time","ae04a50a":"def extract_features(m, empty_value=0):\n    diff = np.diff(np.log1p(m))\n    if m[m != empty_value].shape[0] != 0:\n        f = [\n            min(m[m != empty_value]), \n            max(m), \n            np.std(m[m != empty_value]), \n            np.mean(m[m != empty_value]),\n            np.median(m),\n            np.median(m[m != empty_value]),\n            len(m[m != empty_value]),\n            sum(diff < 0),\n            sum(diff > 0),\n            sum(diff < 0) + sum(diff > 0),\n            np.mean(diff),\n            np.std(diff),\n            np.median(diff),\n            np.percentile(m[m != empty_value], 25),\n            np.percentile(m[m != empty_value], 75),\n            np.percentile(m, 25),\n            np.percentile(m, 75),\n        ]\n    else:\n        f = np.full(17, empty_value)\n    return f","bcf8b425":"def get_z(first_non_empty_time, last_non_empty_time, table, shift):\n    z = []\n    for i, (begin, end) in enumerate(zip(first_non_empty_time, last_non_empty_time - shift)):\n        z.append(1 + np.sum(np.abs(np.diff(table[i, int(begin): int(end)]))) \/ (end - begin))\n    return np.array(z)\n\ndef metric(y_true, y_pred, z):\n    return np.mean(np.abs(y_true - y_pred) \/ z)","b9f86ea5":"n_component_mapper = {75 : 5, 79 : 5, 82 : 4, 85 : 4, 88 : 4, 90 : 4, 92 : 3, 94 : 3, 96 : 2}","82cec15b":"def get_X_y_short(table, start_point, shift):\n    features = []\n    for i, measures in enumerate(table[:, start_point - shift : -(shift + 1)]):\n        f = extract_features(measures, empty_value=0)\n        features.append(f)\n    \n    \n    svd = TruncatedSVD(n_components=n_component_mapper[start_point])\n    print(svd)\n        \n    states = svd.fit_transform(table[:, start_point - shift: -(shift + 1)])\n\n    print(table[:, start_point - shift: -(shift + 1)].shape)\n    \n    print(\"features OK\")\n    \n    X = pd.DataFrame(states)\n    y = pd.Series(table[:, -1])\n    \n    feat = pd.DataFrame(features, columns=[\n        'minimum', 'maximum', 'std_value', \n        'mean_value', 'median_short', 'median_value', 'length', \n        'down', 'up', 'down_up', 'max_diff', 'min_diff', 'median_diff', \n        'low_pers', 'high_pers', 'low_pers_', 'high_pers_'\n    ])\n\n    train = pd.concat([X, feat], axis=1)\n    train.fillna(0, inplace=True)\n    \n    return train, y, svd","b0be6cf7":"def get_test(table, start_point, svd):\n    features = []\n    for i, measures in enumerate(table[:, start_point:]):\n        f = extract_features(measures, empty_value=0)\n        features.append(f)\n\n    states = svd.transform(table[:, start_point:])\n    X = pd.DataFrame(states)\n\n    feat = pd.DataFrame(features, columns=[\n        'minimum', 'maximum', 'std_value', \n        'mean_value', 'median_short', 'median_value', 'length', \n        'down', 'up', 'down_up', 'max_diff', 'min_diff', 'median_diff', \n        'low_pers', 'high_pers', 'low_pers_', 'high_pers_'\n    ])\n\n    test = pd.concat([X, feat], axis=1)\n    test.fillna(0, inplace=True)\n    \n    return test","3128c886":"p = {\n    'loss_function' : 'MAE',\n    'eta' : 0.05,\n    'n_estimators' : 2700, \n    'verbose' : False,\n    'rsm' : 0.95,\n}\n\ndef inf(table, add_features, last_non_empty_time, first_non_empty_time, start_point, valid=True):\n    pred = []\n    mean = []\n    for shift in range(3):\n        sl = (last_non_empty_time - first_non_empty_time + 1) > 2 + shift\n        \n        X, y, svd = get_X_y_short(table[sl], start_point, shift)\n\n        X = np.hstack([X.values, add_features[sl]])\n\n        X = pd.DataFrame(X)\n        \n        xgb = CatBoostRegressor(**p)\n        \n        index = X.drop_duplicates().index\n        X, y = X.loc[index], y.loc[index]\n        \n        if valid:\n            z = get_z(first_non_empty_time, last_non_empty_time, table, shift)\n            z = z[sl][np.array(index)]\n\n            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=111)\n            z_train, z_test = train_test_split(z, test_size=0.15, random_state=111)\n\n            xgb.fit(X_train, np.log1p(y_train), eval_set=(X_test, y_test))\n            \n            pr = np.exp(xgb.predict(X_test)) - 1\n\n            print(\n                shift, \n                metric(y_test, pr, z_test), \n                mean_absolute_error(y_test, pr, 1\/z_test), \n                mean_absolute_error(y_test, pr), \n                xgb.best_iteration_\n            )\n            mean.append(metric(y_test, pr, z_test))\n        else:\n            \n            xgb.fit(X, np.log1p(y))\n            \n            test = get_test(table, start_point + 1, svd)\n            \n            test = np.hstack([test.values, add_features])\n            \n            pred.append(np.exp(xgb.predict(test)) - 1)\n    \n    if valid:\n        return mean, xgb\n    else:\n        pred = np.vstack(pred).T.flatten()\n        pred[pred < 0] = 0\n        return pred","730b865f":"#model = inf(table, new_features, last_non_empty_time, first_non_empty_time,start_point=82)","b04ce85e":"#np.mean(model[0])","aed45731":"med_preds = []\nfor start_point in n_component_mapper:\n    med_preds.append(inf(table, new_features, \n                    last_non_empty_time, first_non_empty_time, \n                    valid=False, start_point=start_point))","dd94a028":"submit_for_corretion['Predicted'] = np.median(np.vstack(med_preds), axis=0)","78c2d1c3":"(np.vstack(med_preds).flatten() == np.inf).sum()","2cc9664d":"submit_for_corretion.reset_index(inplace=True)","82f0155f":"plt.figure(figsize=(20,14))\n\nn = 8\n\nplt.plot(pd.Series(table[:,-1]).value_counts(normalize=True).head(n).sort_index(), label='t[-1]')\nplt.plot(pd.Series(table[:,-2]).value_counts(normalize=True).head(n).sort_index(), label='t[-2]')\nplt.plot(pd.Series(table[:,-3]).value_counts(normalize=True).head(n).sort_index(), label='t[-3]')\n\nsubmit_for_corretion[submit_for_corretion.Id.apply(lambda l: l.split('_')[1]) == '0'].Predicted.apply(lambda l: int(round(l))).value_counts(normalize=True).head(n).sort_index().plot(label='predicted 0')\nsubmit_for_corretion[submit_for_corretion.Id.apply(lambda l: l.split('_')[1]) == '1'].Predicted.apply(lambda l: int(round(l))).value_counts(normalize=True).head(n).sort_index().plot(label='predicted 1')\nsubmit_for_corretion[submit_for_corretion.Id.apply(lambda l: l.split('_')[1]) == '2'].Predicted.apply(lambda l: int(round(l))).value_counts(normalize=True).head(n).sort_index().plot(label='predicted 2')\n\nplt.legend();","18aa80f4":"dist_1 = pd.Series(table[:,-1]).value_counts(normalize=True).head(10).sort_index()\ndist_2 = pd.Series(table[:,-2]).value_counts(normalize=True).head(10).sort_index()\ndist_3 = pd.Series(table[:,-3]).value_counts(normalize=True).head(10).sort_index()","1f630b00":"diff = (dist_1 - dist_3) \/ 2","3a7794ec":"dolya = dist_1","49966b56":"expected_dolya = dolya + diff\npreds = np.copy(submit_for_corretion.Predicted.values)","22321f5f":"pred_values = pd.Series(table[:,-1]).unique()\npred_values = sorted(pred_values)","076d1ecf":"l = pred_values[0]\nnum_of_corrected_values = 4\nboards = [0]\nfor k in pred_values[:num_of_corrected_values]:\n    best_board = 1\n    nevyazka = 2\n    \n    for i in np.linspace(0, 1., 5000):\n        \n        dolya = preds[(l <= preds) & (preds < (l + i))].shape[0] \/ preds.shape[0]\n        \n        if np.abs(dolya - expected_dolya.loc[k]) < nevyazka:\n            best_board = i\n            nevyazka = np.abs(dolya - expected_dolya.loc[k])\n\n    print(f\"{k} OK\")\n    \n    boards.append(l + best_board)\n    l = l + best_board","23ad76ab":"global_mask = np.full(preds.shape, False)\nfor i in pred_values[:num_of_corrected_values]:\n    mask = (boards[i] <= preds) & (preds < (boards[i + 1])) \n    preds[mask] = i","9a93a538":"submit['Predicted'] = preds","2585c8b8":"submit['Predicted'] = submit.Predicted.apply(lambda l: int(round(l)))","aadb789a":"plt.figure(figsize=(20,14))\n\nn = 6\n\nplt.plot(pd.Series(table[:,-3]).value_counts(normalize=True).head(n).sort_index(), label='t[-3]')\nplt.plot(pd.Series(table[:,-2]).value_counts(normalize=True).head(n).sort_index(), label='t[-2]')\nplt.plot(pd.Series(table[:,-1]).value_counts(normalize=True).head(n).sort_index(), label='t[-1]')\n\n\nsubmit.reset_index()[submit.reset_index().Id.apply(lambda l: l.split('_')[1]) == '0'].Predicted.apply(lambda l: int(round(l))).value_counts(normalize=True).head(n).sort_index().plot(label='predicted 0')\nsubmit.reset_index()[submit.reset_index().Id.apply(lambda l: l.split('_')[1]) == '1'].Predicted.apply(lambda l: int(round(l))).value_counts(normalize=True).head(n).sort_index().plot(label='predicted 1')\nsubmit.reset_index()[submit.reset_index().Id.apply(lambda l: l.split('_')[1]) == '2'].Predicted.apply(lambda l: int(round(l))).value_counts(normalize=True).head(n).sort_index().plot(label='predicted 2')\n\nplt.grid()\nplt.legend();","f30d6301":"submit.describe()","d2a1b4ba":"submit.to_csv('\/kaggle\/working\/submission.csv')","eee0b0d0":"# \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","cd22d00c":"# \u0412 \u0434\u043e\u043f.\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u043d\u0435 \u0432\u0441\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0437 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0443\u043b\u044f\u043c\u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0435","e90c44b2":"# \u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u0430\u043c\u044b\u0445 \u0447\u0430\u0441\u0442\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0440\u044f\u0434\u0430 \u0438 \u0438\u0445 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0438","4d55261c":"# \u0414\u0430\u043b\u0435\u0435 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0434\u043b\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0440\u044f\u0434\u0430, \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438, \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0440\u044f\u0434\u043e\u0432 \u043a \u043e\u0431\u0449\u0435\u043c\u0443 \u043a\u043e\u043d\u0446\u0443","b7a5a24d":"# \u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u043c\u0435\u0448\u043a\u0430 \u0441\u043b\u043e\u0432 \u0434\u043b\u044f \u0434\u043e\u043f.\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 'categories', 'characteristics' \u0438 'classes'\n## \u041d\u043e \u0443 \u0444\u0430\u043a\u0442\u043e\u0440\u0430 'classes' \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0441\u044f \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043a \u043c\u0430\u0442\u0440\u0438\u0446\u0435 \u043f\u043e\u0441\u043b\u0435 CountVectorizer TruncatedSVD","d65134ed":"# \u0418 \u043a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b","6b8f02d6":"# \u0427\u0442\u0435\u043d\u0438\u0435 \u0434\u043e\u043f. \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","fc5b1abc":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043e\u0432 \u0432\u043d\u0443\u0442\u0440\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u044f\u0434\u0430","779929ec":"# \u0423\u0447\u0438\u043c \u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c","467850dd":"# \u0414\u043b\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0440\u044f\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c TruncatedSVD\n\u041c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u0448\u0438\u0440\u0438\u043d\u0443 \u043e\u043a\u043d\u0430 \u0438 \u0441\u0434\u0432\u0438\u0433.\n\n\u041f\u0440\u0438\u0435\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 TruncatedSVD\n\n-\u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0440\u044f\u0434\u0430\u043c\u0438 \u0440\u0430\u0437\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b \u0432\u043d\u0443\u0442\u0440\u0438 \u043e\u0434\u043d\u043e\u0439 ML \u043c\u043e\u0434\u0435\u043b\u0438 \n\n-\u043d\u0435 \u0442\u0430\u043a\u043e\u0435 \u043d\u0430\u0438\u0432\u043d\u043e\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0440\u044f\u0434\u0430\u0445, \u043a\u0430\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 0\n\n-\u0432\u0430\u0440\u044c\u0438\u0440\u0443\u044f \u0448\u0438\u0440\u0438\u043d\u0443 \u043e\u043a\u043d\u0430, \u043c\u043e\u0436\u043d\u043e \u0430\u043a\u0446\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0434\u043b\u0438\u043d\u044b \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u0440\u044f\u0434\u043e\u0432","e0b01d7d":"# \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0432\u0435\u0441\u043e\u0432 \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f MASE","036ff59b":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \"\u0432\u044b\u0440\u043e\u0432\u043d\u0435\u043d\u043d\u043e\u0435\" \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435","5fb51c4d":"# \u0412\u0438\u0434\u0438\u043c \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0440\u0435\u0437\u043a\u0438\u0439 \u0441\u043a\u0430\u0447\u043e\u043a \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0438 1, \u0430 \u043e\u043d\u043e \u0441\u0430\u043c\u043e\u0435 \u0447\u0430\u0441\u0442\u043e\u0435!","10505aa9":"# \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043b\u0438 \u0438 \u043d\u0430 \u0440\u0430\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0440\u044f\u0434\u0430","2ba48fab":"# \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u043e\u0442 \u0432\u0441\u0435\u0445 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u044f","2da970b0":"# \u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u0441\u0430\u0431\u043c\u0438\u0442\u0430","9f015628":"# \u041d\u0435 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u0430, \u043f\u043e\u0434\u0431\u0440\u0430\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u043c\u0435\u043d\u0435\u0435 \u043f\u0440\u0438\u0435\u043c\u043b\u0438\u043c\u044b\u0439 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430 \u0440\u044f\u0434\u043e\u0432 \u043d\u0430 \u0433\u043b\u0430\u0437, \u0442\u0430\u043a \u043a\u0430\u043a \u0431\u0443\u0434\u0435\u043c \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u044c \u0438\u0437 \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0448\u0438\u0440\u0438\u043d\u044b \u043e\u043a\u043d\u0430, \u0442\u043e \u044d\u0442\u043e \u043d\u0435 \u043a\u0440\u0438\u0442\u0438\u0447\u043d\u043e","8093edef":"# \u0427\u0442\u0435\u043d\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","431a12c8":"# \u0414\u0430\u043b\u0435\u0435 \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u043f\u043e\u0440\u043e\u0433 \u0434\u043b\u044f \u043e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u044f \u0438\u0437 \u0443\u0447\u0435\u0442\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u043e\u043a\u0440\u0443\u0433\u043b\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0430\u043c\u044b\u0435 \u0447\u0430\u0441\u0442\u044b\u0435 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0430\u0432\u0438\u043b\u0443, \u043f\u0443\u0441\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0435 4 ","2e24d6f9":"# \u0413\u043e\u0440\u0430\u0437\u0434\u043e \u043f\u043b\u0430\u0432\u043d\u0435\u0435 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442 \u043e\u0434\u043d\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u0434\u0440\u0443\u0433\u043e\u0435, \u0447\u0442\u043e \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0435\u0435, \u043d\u043e \u0435\u0441\u0442\u044c \u043e\u0434\u0438\u043d \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u043a, \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f 3, \u043d\u043e \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u0440\u043e\u0432\u043d\u044f\u0442\u044c \u0434\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u044b\u0445","dc6ffbee":"# \u0414\u043b\u044f \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u043a\u0440\u0443\u0433\u043b\u0438\u043c"}}