{"cell_type":{"3c59becd":"code","e54aa0fe":"code","cf6ba9d8":"code","8b95b609":"code","54edf403":"code","f3f01efe":"code","06621f1e":"code","ec71e263":"code","5b3dd53e":"code","5641cc58":"code","53646843":"code","a6da5b41":"code","774a5054":"code","1decc7e9":"code","90fb130c":"code","3120ee30":"code","8b1310f1":"code","0d9dfdc7":"code","49d74f8f":"code","980dc7d4":"code","e22e0e8b":"code","81cda1de":"code","81d21d8b":"code","b4261436":"code","d185a0f1":"code","2f94e530":"code","9cd3fbc8":"code","b2324159":"code","45ed4c93":"code","50c380fc":"code","ff78436f":"code","0ea03da1":"code","910c41c7":"code","49f9754c":"code","779749d8":"code","02c6926a":"code","a1a67198":"code","8e9d485f":"code","f9bf0430":"code","d6624d5d":"code","8e36221e":"code","8c94016f":"code","33a2cf33":"code","38816250":"code","6cd3a04d":"code","27d9547f":"code","7469f963":"code","a8ddba97":"code","c8a03506":"code","2a3ccd1c":"code","9a3d3188":"code","3fd8c6c7":"code","3c7d77a2":"code","6d084d29":"code","c97a87a7":"code","cb120357":"code","429eb8e2":"code","66d9d45a":"code","ee3e299c":"code","fc95514f":"code","319a2751":"code","8532d606":"markdown","3b088542":"markdown","0d1c449a":"markdown","1d5754ac":"markdown","766d536f":"markdown","51f20cff":"markdown","5e1d871b":"markdown","a1a190b6":"markdown","14038576":"markdown","16537830":"markdown","21a9d05c":"markdown","5397aef8":"markdown","a26664d9":"markdown","09daafb8":"markdown","2c854ef0":"markdown","48c325be":"markdown","35e64ab6":"markdown","a9d88a33":"markdown","a8c16de6":"markdown","e2d36b2d":"markdown","6fe9edd8":"markdown","a3570db4":"markdown","8b481bb0":"markdown","136f0a84":"markdown","b02c64af":"markdown","d9b2be6f":"markdown","3e15f4eb":"markdown","dafedc00":"markdown"},"source":{"3c59becd":"%matplotlib inline\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [8, 5]\nimport xgboost as xgb\nimport seaborn as sns\nfrom datetime import timedelta\nimport datetime as dt\nfrom sklearn.model_selection import train_test_split\nimport warnings","e54aa0fe":"df_train = pd.read_csv('..\/input\/nyc-taxi-trip-duration\/train.zip')\ndf_test = pd.read_csv(\"..\/input\/nyc-taxi-trip-duration\/test.zip\")\ndf_sample_submission = pd.read_csv('..\/input\/nyc-taxi-trip-duration\/sample_submission.zip')","cf6ba9d8":"df_train.shape","8b95b609":"df_test.shape","54edf403":"#Check columns in train columns that are not included in test columns\nprint([column for column in df_train.columns if column not in df_test.columns])","f3f01efe":"len(df_train['id'].value_counts()) == len(df_train)","06621f1e":"df_train.head()","ec71e263":"def check_missing_value(df):\n    len0 = len(df)\n    len1 = len(df.dropna())\n    if len0 == len1:\n        print(\"no missing values\")\n    else:\n        miss = (len0-len1) \n        print(\"%f of the data is missing\" %(miss))","5b3dd53e":"check_missing_value(df_train)","5641cc58":"check_missing_value(df_test)","53646843":"df_train['vendor_id'].value_counts()","a6da5b41":"df_train['store_and_fwd_flag'].value_counts()","774a5054":"def convert_binary_variable(df):\n    df['store_and_fwd_flag'] = 1 * (df.store_and_fwd_flag.values == 'Y')\n    return df\ndf_train = convert_binary_variable(df_train)\ndf_test = convert_binary_variable(df_test)","1decc7e9":"sns.set()\ndf_train['log_trip_duration'] = np.log(df_train['trip_duration'].values + 1)\nplt.hist(df_train['log_trip_duration'].values, bins=100)\nplt.xlabel('log(trip_duration)')\nplt.ylabel('number of train records')\nplt.show()","90fb130c":"\nupper_limit = np.percentile(df_train['log_trip_duration'],99.99)\nlower_limit = np.percentile(df_train['log_trip_duration'],0.01)\ndf_train_filter = df_train[(df_train['log_trip_duration'] <= upper_limit) & (df_train['log_trip_duration'] >= lower_limit) ]\nprint(len(df_train_filter))","3120ee30":"df_train.dtypes","8b1310f1":"def convert_datetime(df):\n    '''\n    convert datetime in string format to datetime object\n    '''\n    df['pickup_datetime'] = pd.to_datetime(df.pickup_datetime)\n    df.loc[:, 'pickup_date'] = df['pickup_datetime'].dt.date\n    df.loc[:, 'pickup_month'] = df['pickup_datetime'].dt.month\n    df.loc[:, 'pickup_weekday'] = df['pickup_datetime'].dt.weekday\n    df.loc[:, 'pickup_weekofyear'] = df['pickup_datetime'].dt.isocalendar().week\n    df.loc[:, 'pickup_hour'] = df['pickup_datetime'].dt.hour\n\n    return df","0d9dfdc7":"df_train = convert_datetime(df_train )\ndf_test = convert_datetime(df_test)","49d74f8f":"def get_stats_describe(df,feature1,feature2):\n    biv_columns = df.groupby([feature1])[[feature2]].agg(['size','mean','median','var','std']).reset_index()\n    biv_columns = biv_columns.round(3)\n    biv_columns.columns = [feature1,'size','mean','median','var','std']\n    biv_columns = biv_columns.set_index(feature1)\n    return biv_columns","980dc7d4":"df_train_date = get_stats_describe(df_train,'pickup_date','log_trip_duration')\ndf_train_weekday = get_stats_describe(df_train,'pickup_weekday','log_trip_duration')\ndf_train_hour = get_stats_describe(df_train,'pickup_hour','log_trip_duration')","e22e0e8b":"df_train_date.describe()","81cda1de":"fig, ax = plt.subplots(nrows=2, sharex=True, sharey=False)\nax[0].plot(df_train_date[[\"size\"]],\".-\")\nfig.suptitle(\"Number of Samples and Average Log Trip Duration by Date\")\nax[0].set_ylabel('Number of Samples')\n\nax[1].plot(df_train_date[[\"mean\"]],\".-\")\nax[1].set_ylabel('Average Log Trip Duration')\nax[1].set_xlabel('Date')","81d21d8b":"fig, ax = plt.subplots(nrows=2, sharex=True, sharey=False)\nax[0].plot(df_train_weekday[[\"size\"]],\"o-\")\nfig.suptitle(\"Number of Samples and Average Log Trip Duration by Day\")\nax[0].set_ylabel('Number of Samples')\n\nax[1].plot(df_train_weekday[[\"mean\"]],\"o-\")\nax[1].set_ylabel('Average Log Trip Duration')\nax[1].set_xticklabels([\"\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\",\"Sun\"])\nax[1].set_xlabel('Day of the Week')","b4261436":"fig, ax = plt.subplots(nrows=2, sharex=True, sharey=False)\nax[0].plot(df_train_hour[[\"size\"]],\"o-\")\nfig.suptitle(\"Number of Samples and Average Log Trip Duration by Hour\")\nax[0].set_ylabel('Number of Samples')\n\nax[1].plot(df_train_hour[[\"mean\"]],\"o-\")\nax[1].set_ylabel('Average Log Trip Duration')\nax[1].set_xlabel('Hour of the Day')","d185a0f1":"pclt = df_train[[\"passenger_count\",\"log_trip_duration\"]].boxplot( by=\"passenger_count\", figsize = (10,6))\npclt.set_xlabel(\"Number of Passengers\")\npclt.set_ylabel(\"Log Time Duration\")\npclt.set_title(\"distribution of time duration by number of passengers\")","2f94e530":"df_train.columns","9cd3fbc8":"vilt = df_train[[\"vendor_id\",\"log_trip_duration\"]].boxplot( by=\"vendor_id\", figsize = (10,6))\nvilt.set_xlabel(\"Vendor\")\nvilt.set_ylabel(\"Log Time Duration\")\nvilt.set_title(\"distribution of time duration by vendor id\")","b2324159":"def haversine_distance(lat1, long1, lat2, long2):\n    # the unit is in km\n    #r = Average of earth radius\n    lat1, long1, lat2, long2 = map(np.radians, (lat1, long1, lat2, long2))\n    r = 6371 \n    lat = lat2 - lat1\n    long = long2 - long1\n    d = np.sin(lat * 0.5) ** 2 + np.cos(lat1) * np.cos(lat2) * np.sin(long * 0.5) ** 2\n    h = 2 * r * np.arcsin(np.sqrt(d))\n    return h","45ed4c93":"def get_distance(df):\n    df.loc[:, 'distance_haversine'] = haversine_distance(df['pickup_latitude'].values, \\\n                                                      df['pickup_longitude'].values, \\\n                                                      df['dropoff_latitude'].values, \\\n                                                      df['dropoff_longitude'].values)\n    \n    return df\n\ndf_train = get_distance(df_train)\ndf_test = get_distance(df_test)","50c380fc":"df_train_filter = df_train[df_train.trip_duration < 100000]","ff78436f":"df_train_filter.head()","0ea03da1":"fig, ax = plt.subplots(ncols=1, nrows=1)\nax.scatter(df_train_filter.distance_haversine, df_train_filter.trip_duration, s=1, alpha=0.5)\nax.set_xlabel(\"Distance Haversine\")\nax.set_ylabel(\"Trip Duration\")","910c41c7":"df_train.loc[:, 'avg_speed_h'] = 1000 * df_train['distance_haversine'] \/ df_train['trip_duration']","49f9754c":"fig, ax = plt.subplots(ncols=2, sharey=True)\nax[0].plot(df_train.groupby('pickup_hour').mean()['avg_speed_h'], 'o-', lw=2, alpha=0.7)\nax[1].plot(df_train.groupby('pickup_weekday').mean()['avg_speed_h'], 'o-', lw=2, alpha=0.7)\nax[0].set_xlabel('hour')\nax[0].set_ylabel('average speed')\n\nax[1].set_xlabel('weekday')\nax[1].set_xticklabels([\"\",\"Mon\",\"Wed\",\"Fri\",\"Sun\"])\nfig.suptitle('Average Traffic Speed Over Time')\nplt.show()","779749d8":"# add 3 more features\nfr1 = pd.read_csv('..\/input\/new-york-city-taxi-with-osrm\/fastest_routes_train_part_1.csv', usecols=['id', 'total_distance', 'total_travel_time',  'number_of_steps'])\nfr2 = pd.read_csv('..\/input\/new-york-city-taxi-with-osrm\/fastest_routes_train_part_2.csv', usecols=['id', 'total_distance', 'total_travel_time', 'number_of_steps'])\ndf_test_street_info = pd.read_csv('..\/input\/new-york-city-taxi-with-osrm\/fastest_routes_test.csv',\n                               usecols=['id', 'total_distance', 'total_travel_time', 'number_of_steps'])\ndf_train_street_info = pd.concat((fr1, fr2))\ndf_train = df_train.merge(df_train_street_info, how='left', on='id')\ndf_test = df_test.merge(df_test_street_info, how='left', on='id')\ndf_train_street_info.head()","02c6926a":"fig, ax = plt.subplots(ncols=1, nrows=1)\nax.scatter(df_train.total_distance, df_train.trip_duration, s=1, alpha=0.5)\nax.set_xlabel(\"Total Distance\")\nax.set_ylabel(\"Trip Duration\")","a1a67198":"df_train.head()","8e9d485f":"fig, ax = plt.subplots(ncols=1, nrows=1)\nax.scatter(df_train.total_distance, df_train.total_travel_time, s=1, alpha=0.5)\nax.set_xlabel(\"Total Distance\")\nax.set_ylabel(\"Total Travel Time\")","f9bf0430":"plt.plot(df_train.groupby('pickup_date')[['id']].count(), label='train')\nplt.plot(df_test.groupby('pickup_date')[['id']].count(), label='test')\nplt.title('Number of Samples in Train and Test')\nplt.legend(loc=0)\nplt.xlabel('Time')\nplt.ylabel('Number of Samples')\nplt.show()","d6624d5d":"fig, ax = plt.subplots(ncols=2, sharex=True, sharey=True)\nax[0].scatter(df_train['pickup_longitude'].values, df_train['pickup_latitude'].values,\n              s=1, label='train', alpha=0.1)\nax[1].scatter(df_test['pickup_longitude'].values, df_test['pickup_latitude'].values,\n              s=1, label='test', alpha=0.1)\nfig.suptitle('Trip Location Distribution of Train and Test Data')\nax[0].legend(loc=0)\nax[0].set_ylabel('latitude')\nax[0].set_xlabel('longitude')\nax[1].set_xlabel('longitude')\nax[1].legend(loc=0)\nplt.show()","8e36221e":"long_lim = (-74.03, -73.75)\nlat_lim = (40.63, 40.85)\nfig, ax = plt.subplots(ncols=2, sharex=True, sharey=True)\nax[0].scatter(df_train['pickup_longitude'].values, df_train['pickup_latitude'].values,\n              s=1, label='train', alpha=0.1)\nax[1].scatter(df_test['pickup_longitude'].values, df_test['pickup_latitude'].values,\n              s=1, label='test', alpha=0.1)\nfig.suptitle('Trip Location Distribution of Train and Test Data')\nax[0].legend(loc=0)\nax[0].set_ylabel('latitude')\nax[0].set_xlabel('longitude')\nax[1].set_xlabel('longitude')\nax[1].legend(loc=0)\nplt.xlim(long_lim)\nplt.ylim(lat_lim)\nplt.show()","8c94016f":"df_train.columns","33a2cf33":"np.setdiff1d(df_train.columns, df_test.columns)","38816250":"features = [column for column in df_train.columns if column not in ['avg_speed_h', 'dropoff_datetime', 'log_trip_duration',\\\n                                                  'trip_duration', 'id', 'pickup_datetime', 'dropoff_datetime',\\\n                                                  'distance_haversine',\\\n                                                 'trip_duration', 'log_trip_duration', 'trip_duration','pickup_date']]","6cd3a04d":"features","27d9547f":"len(features)","7469f963":"df_train_filter.head()","a8ddba97":"df_train_filter.isnull().sum()","c8a03506":"df_train_filter = df_train.dropna()\nX = df_train_filter[features].values\ny = np.log(df_train_filter['trip_duration'].values + 1)\nXtr, Xv, ytr, yv = train_test_split(X, y, test_size=0.2, random_state=7)\nXtst = df_test[features].values","2a3ccd1c":"df_train_filter.head()","9a3d3188":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import GridSearchCV","3fd8c6c7":"param_grid = {'max_depth': np.arange(3, 10)}\ntree = GridSearchCV(DecisionTreeRegressor(), param_grid)\ntree.fit(Xtr, ytr)","3c7d77a2":"tree.best_params_","6d084d29":"y_pred = tree.predict(Xv)\nrmsle = np.sqrt(sum(np.square(y_pred - yv)) \/ len(y_pred))\nprint(\"rmsle of decision tree is: %.3f\"%rmsle)","c97a87a7":"# submission\nytest = tree.predict(Xtst)\ndf_test['trip_duration'] = np.exp(ytest) - 1\ndf_test[['id', 'trip_duration']].to_csv('dt_submission.csv.gz', index=False, compression='gzip')","cb120357":"dtrain = xgb.DMatrix(Xtr, label=ytr)\ndvalid = xgb.DMatrix(Xv, label=yv)\ndtest = xgb.DMatrix(Xtst)\nwatchlist = [(dtrain, 'train'), (dvalid, 'valid')]\n\nxgb_pars = {'min_child_weight': 50, 'eta': 0.3, 'colsample_bytree': 0.3, 'max_depth': 9,\n            'subsample': 0.8, 'lambda': 1., 'nthread': -1, 'booster' : 'gbtree', 'silent': 1,\n            'eval_metric': 'rmse', 'objective': 'reg:linear'}","429eb8e2":"model = xgb.train(xgb_pars, dtrain, 60, watchlist, early_stopping_rounds=50,\n                  maximize=False, verbose_eval=10)","66d9d45a":"y_pred = model.predict(dvalid)\nrmsle = np.sqrt(sum(np.square(y_pred - yv)) \/ len(y_pred))\nprint(\"rmsle of gbt is: %.3f\"%rmsle)","ee3e299c":"# for submission\nytest = model.predict(dtest)\ndf_test['trip_duration'] = np.exp(ytest) - 1\ndf_test[['id', 'trip_duration']].to_csv('xgb_submission.csv.gz', index=False, compression='gzip')","fc95514f":"fs = ['f%i' % i for i in range(len(features))]\nname = dict(zip(fs, features))\n\nfeature_importance_dict = model.get_fscore()\nf_i = pd.DataFrame({'feature': list(feature_importance_dict.keys()), \\\n                    'importance': list(feature_importance_dict.values())})\nf_i[\"feature\"] = f_i[\"feature\"].apply(lambda x: name[x])","319a2751":"f_i = f_i.sort_values(\"importance\")\nf_i.set_index(\"feature\").plot(kind='barh')","8532d606":" ## Vendors vs Tri Duration","3b088542":"### distance from external dataset","0d1c449a":"## Introduction\nThis is a comprehensive Exploratory Data Analysis for the [New York City Taxi Trip Duration](https:\/\/www.kaggle.com\/c\/nyc-taxi-trip-duration) competition with Python and Data Visualization libraries such as matplotlib and seaborn. I also use [New York City Taxi with OSRM](https:\/\/www.kaggle.com\/oscarleo\/new-york-city-taxi-with-osrm) to support the primary dataset.\n\nThe goal of this playground challenge is to predict the duration of taxi rides in NYC based on features like trip coordinates or pickup date and time. We start the exploratory data analysis by loading the dataset using pandas, checking missing values, doing feature engineering,checking outliers and comparing between univariate and bivariate features,improving the model using ML Algorithms(Decision Tree and Gradient Boosting) as regression model.\nWe also implement Haversine Formula using for calculating the duration between two points(longitude and latitude) as follows \n\n$$ s = r \\theta $$\nwhere $r$ is the Earth's radius, and $\\theta$ is the central angle calculated as\n\n$$ \\theta = 2 \\arcsin\\left( \\sqrt{\\sin^2 \\left(\\frac{\\phi_2-\\phi_1}{2}\\right) + \\cos(\\phi_1)\\cos(\\phi_2)\\sin^2 \\left( \\frac{\\lambda_2-\\lambda_1}{2} \\right) } \\right) $$\nwith:\n\n$$ \\begin{align} \\phi &= \\text{latitude}\\\\ \\lambda &= \\text{longitude}\\\\ \\end{align} $$\n\n# File descriptions\n- train.csv - the training set (contains 1458644 trip records)\n- test.csv - the testing set (contains 625134 trip records)\n- sample_submission.csv - a sample submission file in the correct format\n\n# Data fields\n- id - a unique identifier for each trip\n- vendor_id - a code indicating the provider associated with the trip record\n- pickup_datetime - date and time when the meter was engaged\n- dropoff_datetime - date and time when the meter was disengaged\n- passenger_count - the number of passengers in the vehicle (driver entered value)\n- pickup_longitude - the longitude where the meter was engaged\n- pickup_latitude - the latitude where the meter was engaged\n- dropoff_longitude - the longitude where the meter was disengaged\n- dropoff_latitude - the latitude where the meter was disengaged\n- store_and_fwd_flag - This flag indicates whether the trip record was held in vehicle memory before sending to the vendor because the vehicle did not have a connection to the server - Y=store and forward; N=not a store and forward trip\n- trip_duration - duration of the trip in seconds","1d5754ac":"It looks like train and test data are completely overlapped based off time and geolocation distribution.","766d536f":"## Comparison between Test and Train data","51f20cff":"## LOAD DATA","5e1d871b":"There is no duplicate id in the train data","a1a190b6":"## Distance Vs Trip Duration(Haversine Distance)","14038576":"# MODELING","16537830":"Based off exploratory data analysis on kaggle, the distance (km) between pickup and dropoff points is a significant feature impacting trip duration. Let's calculate the distance and investigate its patterns by using [haversine](https:\/\/en.wikipedia.org\/wiki\/Haversine_formula) formula.\n\n\n$$ s = r \\theta $$\nwhere $r$ is the Earth's radius, and $\\theta$ is the central angle calculated as\n\n$$ \\theta = 2 \\arcsin\\left( \\sqrt{\\sin^2 \\left(\\frac{\\phi_2-\\phi_1}{2}\\right) + \\cos(\\phi_1)\\cos(\\phi_2)\\sin^2 \\left( \\frac{\\lambda_2-\\lambda_1}{2} \\right) } \\right) $$\nwith:\n\n$$ \\begin{align} \\phi &= \\text{latitude}\\\\ \\lambda &= \\text{longitude}\\\\ \\end{align} $$","21a9d05c":"## Bivariate Analysis","5397aef8":"Neither 'dropoff_datetime' nor 'trip_duration' should in test data.","a26664d9":"Morning rush hour is around 7:00 am. Trip volume largely increased after 4 pm and peaked around 6pm. ","09daafb8":"## Univariate Feature","2c854ef0":"since the datatype of the pickup_datetime, dropoff_datetime are object, we change them into datetime.","48c325be":"### Gradient Boosting tree","35e64ab6":"## Geolocaton ","a9d88a33":"### Time","a8c16de6":"both 'vendor_id' and 'store_and_fwd_flag' are binary variable","e2d36b2d":"## Average Speed in hour","6fe9edd8":"### Conversion Of Datatype","a3570db4":"## Number of passengers vs Trip Durationtion","8b481bb0":"dropoff_latitude as the most important feature impacting the trip duration ","136f0a84":"### decision tree","b02c64af":"Let's zoom in to the city and see the difference.","d9b2be6f":"### check missing value","3e15f4eb":"## FEATURE ANALYSIS","dafedc00":"change the target label into logaritmic transformation as the evaluation metric is RMSLE and plot the distribution either it is normal distribution or not"}}