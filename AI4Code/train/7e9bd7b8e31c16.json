{"cell_type":{"debe0c94":"code","8029e421":"code","75af6502":"code","64f36c4b":"code","904f84ab":"code","f0efb3e0":"code","a3dc4958":"code","0f43dc08":"code","c7d78e6e":"code","24d44cc9":"code","f7a93e6c":"code","141a2704":"code","3e614617":"code","a7f45259":"code","f95d99f2":"code","d5ef7924":"code","806cced2":"code","a046561b":"code","b04817a7":"code","06a73282":"code","a4818de7":"code","71a4cdb7":"code","b65d0e5f":"code","7b870a52":"code","f47fd13a":"code","c7cb666c":"code","fe3dd70c":"code","6f90e823":"code","2630fa55":"code","07d30079":"code","8d6b4217":"code","46149dcc":"code","9ad59238":"code","4d072862":"code","53fc571c":"code","a52439f8":"code","4d1f791f":"code","1c07dcd8":"code","80ced046":"code","2f2caabe":"code","8e9ed57a":"markdown","1a29711b":"markdown","56da9839":"markdown","bfd7f98e":"markdown","a9b07dfa":"markdown","2b0a89ab":"markdown","b26a8118":"markdown","10d5fd98":"markdown","6a2c40d9":"markdown","c3a95283":"markdown","ac7380f3":"markdown","f5a5ab67":"markdown","71327faf":"markdown","5292f130":"markdown","516f9d5c":"markdown","d8aa8ac0":"markdown"},"source":{"debe0c94":"# Importing all required packages\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport re\nimport string\nfrom wordcloud import WordCloud\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import accuracy_score,recall_score,precision_score,f1_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nimport keras.backend as K\nfrom keras.utils.np_utils import to_categorical\nfrom keras.layers import Dropout\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline ","8029e421":"# Let's load Year 2019 Dataset\ndf = pd.read_csv(\"..\/input\/fifa-dataset\/players_19.csv\")","75af6502":"# Sofifa Id, URL, Wage, Salary, Name, Real face, URL variables cannot be used during the prediction or learning sor dropping unnecessary variables\ndf = df.drop([\"sofifa_id\", \"player_url\",\"overall\",\"short_name\", \"potential\", \"real_face\"], axis=1)\n#Lets have a look at our dataset\ndf.head()","64f36c4b":"# Let's put our dataset and put it in a new variable \ndf_new = df\n# Now, we will look at all player positions\ndf_new['player_positions']","904f84ab":"# Let's have a look at all columns that exist in dataset to understand what we might need and hat sould we discard further for our objective\nprint(sorted(df_new.columns))","f0efb3e0":"attr_columns = ['attacking_crossing', 'attacking_finishing', 'attacking_heading_accuracy', 'attacking_short_passing', 'attacking_volleys', 'shooting',  'skill_moves','dribbling','skill_ball_control', 'skill_curve', 'skill_dribbling', 'skill_fk_accuracy','movement_acceleration', 'movement_agility', 'movement_balance', 'movement_reactions', 'movement_sprint_speed','pace', 'defending', 'defending_marking', 'defending_sliding_tackle', 'defending_standing_tackle','passing','mentality_aggression', 'mentality_composure', 'mentality_interceptions', 'mentality_penalties', 'mentality_positioning', 'mentality_vision','physic', 'power_jumping', 'power_long_shots', 'power_shot_power', 'power_stamina', 'power_strength',  'skill_long_passing', 'weight_kg','age','player_positions']\ndf_new = df[attr_columns]\n# let's have a look at our data\ndf_new.head()","a3dc4958":"# Let's have a look at a Heat map to identfy and positive and negative correlations\nf,ax = plt.subplots(figsize=(20,20))\nsns.heatmap(data = df_new[attr_columns].corr(),annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)","0f43dc08":"# Checking for All possible positions except Goal Keeping\ndf_new['player_positions'] = df_new['player_positions'].str.strip().replace(',','', regex=True)\ndf_new['player_positions'] = df_new.player_positions.str.split().str.get(0)\n\n#Removing goal Keeper positions\ndf_new = df_new[df_new['player_positions'] != 'GK']\n\n#Also let's sustitute all empty value with zero\ndf_new=df_new.fillna(0)\n\n#making sure that no Null Value Exists\ndf_new.isnull().values.any()","c7d78e6e":"# let's have a look at our data\ndf_new.head()","24d44cc9":"# Doing requied mathematical operation\ncols = [col for col in df_new.columns if col not in ['player_positions']]\nfor i in cols:\n    df_new[i] = df_new[i].apply(lambda x: eval(x) if isinstance(x,str) else x)","f7a93e6c":"# Let's look at all player positions\n\nplt.figure(figsize = (10, 8))\nplt.style.use('fivethirtyeight')\nax = sns.countplot('player_positions', data = df_new, palette = 'bone')\nax.set_xlabel(xlabel = 'Different Positions in Football', fontsize = 16)\nax.set_ylabel(ylabel = 'Count of Players', fontsize = 16)\nax.set_title(label = 'Comparison of Positions and Players', fontsize = 20)\nplt.show()","141a2704":"# We will plot a Striker's Skills Distribution (Attacking position)\nfig, ax = plt.subplots()\ndf_new_ST = df_new[df_new['player_positions'] == 'ST'].iloc[::200,:-1]\ndf_new_ST.T.plot.line(color = 'black', figsize = (15,10), legend = False, ylim = (0, 110), title = \"Strikers Skill Distribution.\", ax=ax)\n\nax.set_xlabel('Skills')\nax.set_ylabel('Rating')\n\nax.set_xticks(np.arange(len(cols)))\nax.set_xticklabels(labels = cols, rotation=90)\n\nfor ln in ax.lines:\n    ln.set_linewidth(1)\n\nax.axvline(0, color='red', linestyle='--')   \nax.axvline(11.8, color='red', linestyle='--')\n\nax.axvline(12, color='orange', linestyle='--')   \nax.axvline(17.8, color='orange', linestyle='--')\n\nax.axvline(18, color='blue', linestyle='--')\nax.axvline(22.8, color='blue', linestyle='--')\n\nax.axvline(23, color='green', linestyle='--')\nax.axvline(37, color='green', linestyle='--')\n\nax.text(2, 100, 'Attacking Skills', color = 'red', weight = 'bold')\nax.text(12.2, 100, 'Movement skills', color = 'orange', weight = 'bold')\nax.text(18.2, 100, 'Defend skills', color = 'blue', weight = 'bold')\nax.text(25, 100, 'Miscellaneous skills', color = 'green', weight = 'bold')","3e614617":"# We will plot a Center Midfield's Skills Distribution (Midfield's)\nfig, ax = plt.subplots()\ndf_new_CM = df_new[df_new['player_positions'] == 'CM'].iloc[::200,:-1]\ndf_new_CM.T.plot.line(color = 'black', figsize = (15,10), legend = False, ylim = (0, 110), title = \"Center Midfield's Skill's Distribution\", ax=ax)\n\nax.set_xlabel('Skills')\nax.set_ylabel('Rating')\n\nax.set_xticks(np.arange(len(cols)))\nax.set_xticklabels(labels = cols, rotation=90)\n\nfor ln in ax.lines:\n    ln.set_linewidth(1)\n\nax.axvline(0, color='red', linestyle='--')   \nax.axvline(11.8, color='red', linestyle='--')\n\nax.axvline(12, color='orange', linestyle='--')   \nax.axvline(17.8, color='orange', linestyle='--')\n\nax.axvline(18, color='blue', linestyle='--')\nax.axvline(22.8, color='blue', linestyle='--')\n\nax.axvline(23, color='green', linestyle='--')\nax.axvline(37, color='green', linestyle='--')\n\nax.text(2, 100, 'Attacking Skills', color = 'red', weight = 'bold')\nax.text(12.2, 100, 'Movement skills', color = 'orange', weight = 'bold')\nax.text(18.2, 100, 'Defend skills', color = 'blue', weight = 'bold')\nax.text(25, 100, 'Miscellaneous skills', color = 'green', weight = 'bold')","a7f45259":"# We will plot a Center Back's Skills Distribution (Defense position)\nfig, ax = plt.subplots()\ndf_new_CB = df_new[df_new['player_positions'] == 'CB'].iloc[::200,:-1]\ndf_new_CB.T.plot.line(color = 'black', figsize = (15,10), legend = False, ylim = (0, 110), title = \"Cener Back's Skill Distribution\", ax=ax)\n\nax.set_xlabel('Skills')\nax.set_ylabel('Rating')\n\nax.set_xticks(np.arange(len(cols)))\nax.set_xticklabels(labels = cols, rotation=90)\n\nfor ln in ax.lines:\n    ln.set_linewidth(1)\n\nax.axvline(0, color='red', linestyle='--')   \nax.axvline(11.8, color='red', linestyle='--')\n\nax.axvline(12, color='orange', linestyle='--')   \nax.axvline(17.8, color='orange', linestyle='--')\n\nax.axvline(18, color='blue', linestyle='--')\nax.axvline(22.8, color='blue', linestyle='--')\n\nax.axvline(23, color='green', linestyle='--')\nax.axvline(37, color='green', linestyle='--')\n\nax.text(2, 100, 'Attacking Skills', color = 'red', weight = 'bold')\nax.text(12.2, 100, 'Movement skills', color = 'orange', weight = 'bold')\nax.text(18.2, 100, 'Defend skills', color = 'blue', weight = 'bold')\nax.text(25, 100, 'Miscellaneous skills', color = 'green', weight = 'bold')","f95d99f2":"# First we will seperate out attributes and clasificaton values in X and y respectively\nX = df_new.drop(\"player_positions\", axis=1)\ny = df_new[\"player_positions\"].values\ndf_new_norm=(X-X.mean())\/X.std()\n# Let's Look at how our new data looks like now\ndf_new_norm","d5ef7924":"df_new_norm_Y = df_new_norm\ndf_new_norm_Y['player_positions']= y\n# We will plot a Striker's Skills Distribution (Attacking position)\nfig, ax = plt.subplots()\ndf_new_norm_Y_ST = df_new_norm_Y[df_new_norm_Y['player_positions'] == 'ST'].iloc[::200,:-1]\ndf_new_norm_Y_ST.T.plot.line(color = 'black', figsize = (15,5), legend = False, ylim = (-10, 12), title = \"Striker's Skill Distribution\", ax=ax)\n\nax.set_xlabel('Skills')\nax.set_ylabel('Rating')\n\nax.set_xticks(np.arange(len(cols)))\nax.set_xticklabels(labels = cols, rotation=90)\n\nfor ln in ax.lines:\n    ln.set_linewidth(1)\n\nax.axvline(0, color='red', linestyle='--')   \nax.axvline(11.8, color='red', linestyle='--')\n\nax.axvline(12, color='orange', linestyle='--')   \nax.axvline(17.8, color='orange', linestyle='--')\n\nax.axvline(18, color='blue', linestyle='--')\nax.axvline(22.8, color='blue', linestyle='--')\n\nax.axvline(23, color='green', linestyle='--')\nax.axvline(37, color='green', linestyle='--')\n\nax.text(2, 10, 'Attacking Skills', color = 'red', weight = 'bold')\nax.text(12.2, 10, 'Movement skills', color = 'orange', weight = 'bold')\nax.text(18.2, 10, 'Defend skills', color = 'blue', weight = 'bold')\nax.text(25, 10, 'Miscellaneous skills', color = 'green', weight = 'bold')\n\n","806cced2":"# We will plot a Center Midfield's Skills Distribution (Midfield's)\nfig, ax = plt.subplots()\ndf_new_norm_Y_CM = df_new_norm_Y[df_new_norm_Y['player_positions'] == 'CM'].iloc[::200,:-1]\ndf_new_norm_Y_CM.T.plot.line(color = 'black', figsize = (15,5), legend = False, ylim = (-5, 12), title = \"Center Midfield's Skill's Distribution\", ax=ax)\nax.set_xlabel('Skills')\nax.set_ylabel('Rating')\n\nax.set_xticks(np.arange(len(cols)))\nax.set_xticklabels(labels = cols, rotation=90)\n\nfor ln in ax.lines:\n    ln.set_linewidth(1)\n\nax.axvline(0, color='red', linestyle='--')   \nax.axvline(11.8, color='red', linestyle='--')\n\nax.axvline(12, color='orange', linestyle='--')   \nax.axvline(17.8, color='orange', linestyle='--')\n\nax.axvline(18, color='blue', linestyle='--')\nax.axvline(22.8, color='blue', linestyle='--')\n\nax.axvline(23, color='green', linestyle='--')\nax.axvline(37, color='green', linestyle='--')\n\nax.text(2, 10, 'Attacking Skills', color = 'red', weight = 'bold')\nax.text(12.2, 10, 'Movement skills', color = 'orange', weight = 'bold')\nax.text(18.2, 10, 'Defend skills', color = 'blue', weight = 'bold')\nax.text(25, 10, 'Miscellaneous skills', color = 'green', weight = 'bold')\n","a046561b":"\n# We will plot a Center Back's Skills Distribution (Defense position)\nfig, ax = plt.subplots()\ndf_new_norm_Y_CB = df_new_norm_Y[df_new_norm_Y['player_positions'] == 'CB'].iloc[::200,:-1]\ndf_new_norm_Y_CB.T.plot.line(color = 'black', figsize = (15,5), legend = False, ylim = (-5, 12), title = \"Cener Back's Skill Distribution\", ax=ax)\n\nax.set_xlabel('Skills')\nax.set_ylabel('Rating')\n\nax.set_xticks(np.arange(len(cols)))\nax.set_xticklabels(labels = cols, rotation=90)\n\nfor ln in ax.lines:\n    ln.set_linewidth(1)\n\nax.axvline(0, color='red', linestyle='--')   \nax.axvline(11.8, color='red', linestyle='--')\n\nax.axvline(12, color='orange', linestyle='--')   \nax.axvline(17.8, color='orange', linestyle='--')\n\nax.axvline(18, color='blue', linestyle='--')\nax.axvline(22.8, color='blue', linestyle='--')\n\nax.axvline(23, color='green', linestyle='--')\nax.axvline(37, color='green', linestyle='--')\n\nax.text(2, 10, 'Attacking Skills', color = 'red', weight = 'bold')\nax.text(12.2, 10, 'Movement skills', color = 'orange', weight = 'bold')\nax.text(18.2, 10, 'Defend skills', color = 'blue', weight = 'bold')\nax.text(25, 10, 'Miscellaneous skills', color = 'green', weight = 'bold')","b04817a7":"# Now we can split our processed data set for training our model\nX_train_19, X_test_19, y_train_19, y_test_19 = train_test_split(X,y,test_size=0.2)\nprint('X train shape: {}'.format(X_train_19.shape))\nprint('X test shape: {}'.format(X_test_19.shape))\nprint('y train shape: {}'.format(y_train_19.shape))\nprint('y test shape: {}'.format(y_test_19.shape))","06a73282":"model = LogisticRegression(max_iter=10000,solver = 'lbfgs',C=1000000)\nmodel = model.fit(X_train_19, y_train_19)\nLog_Score = model.score(X_test_19,y_test_19)\ny_train_pred = model.predict(X_train_19)\ny_test_pred = model.predict(X_test_19)\ntrain_accuracy = accuracy_score(y_train_19,y_train_pred)\ntest_accuracy = accuracy_score(y_test_19,y_test_pred)\nprint(\"Train Accuracy\", train_accuracy)\nprint(\"Validation Accuracy\", test_accuracy)\nprint('Confusion Matrix : \\n' + str(confusion_matrix(y_test_19,y_test_pred)))","a4818de7":"attr_columns = ['attacking_crossing', 'attacking_finishing', 'attacking_heading_accuracy', 'attacking_short_passing', 'attacking_volleys','dribbling','pace', 'passing',  'movement_acceleration', 'movement_agility', 'movement_balance', 'movement_reactions', 'movement_sprint_speed','defending', 'defending_marking', 'defending_sliding_tackle', 'defending_standing_tackle','mentality_aggression', 'mentality_composure', 'mentality_interceptions', 'mentality_penalties', 'mentality_positioning', 'mentality_vision','physic', 'power_jumping', 'power_long_shots', 'power_shot_power', 'power_stamina', 'power_strength', 'shooting', 'skill_ball_control', 'skill_curve', 'skill_dribbling', 'skill_fk_accuracy', 'skill_long_passing', 'skill_moves', 'weight_kg','age','player_positions']\ndf_new = df[attr_columns]\ndf_new=df_new.fillna(0)\ncols = [col for col in df_new.columns if col not in ['player_positions']]\nfor i in cols:\n    df_new[i] = df_new[i].apply(lambda x: eval(x) if isinstance(x,str) else x)\ndf_new['player_positions'] = df_new['player_positions'].str.strip().replace(',','', regex=True)\ndf_new['player_positions'] = df_new.player_positions.str.split().str.get(0)","71a4cdb7":"# Let's group all positions that are available in dataset in above discussed categories\nforward_player = [\"ST\", \"LW\", \"RW\", \"LF\", \"RF\", \"RS\",\"LS\", \"CF\"]\nmidfielder_player = [\"CM\",\"RCM\",\"LCM\", \"CDM\",\"RDM\",\"LDM\", \"CAM\", \"LAM\", \"RAM\", \"RM\", \"LM\"]\ndefender_player = [\"CB\", \"RCB\", \"LCB\", \"LWB\", \"RWB\", \"LB\", \"RB\"]\n\ndf_new.loc[df_new[\"player_positions\"] == \"GK\", \"player_positions\"] = 0\n\ndf_new.loc[df_new[\"player_positions\"].isin(defender_player), \"player_positions\"] = 1\n\ndf_new.loc[df_new[\"player_positions\"].isin(midfielder_player), \"player_positions\"] = 2\n\ndf_new.loc[df_new[\"player_positions\"].isin(forward_player), \"player_positions\"] = 3","b65d0e5f":"df_new","7b870a52":"#  let's use StandardScaler for transforming the data in such a manner\n# that, mean = 0 and standard deviation = 1\nx = df_new.drop(\"player_positions\", axis = 1)\nsc = StandardScaler()\nx = pd.DataFrame(sc.fit_transform(x))\ny = df_new[\"player_positions\"]\ny_cat = to_categorical(y)","f47fd13a":"#Splitting our dataset with test size of 20%\nx_train, x_test, y_train, y_test = train_test_split(x.values, y_cat, test_size=0.2)\nx_train.shape","c7cb666c":"# building a Sequential model wth activation function : Relu and Softmax\n# Softmax seems to be working best for multi-class classification problems\n# where class membership is required for multi class labels.\nmodel = Sequential()\nmodel.add(Dense(64, input_shape = (38,), activation = \"relu\"))\nmodel.add(Dropout(0.2, input_shape=(38,)))\nmodel.add(Dense(32, activation = \"relu\"))\nmodel.add(Dropout(0.2, input_shape=(38,)))\nmodel.add(Dense(16, activation = \"relu\"))\nmodel.add(Dense(4, activation = \"softmax\"))\nmodel.compile(optimizer='adam',loss=\"categorical_crossentropy\", metrics = [\"accuracy\"])\nmodel.summary()","fe3dd70c":"# Let's see how our model looks like\nkeras.utils.plot_model(model, \"my_first_model.png\", show_shapes = True)","6f90e823":"history=model.fit(x_train, y_train, verbose=1,validation_split=0.2, epochs=100)","2630fa55":"# Here we plot the training and validation loss and accuracy\n\nfig, ax = plt.subplots(1,2,figsize = (16,4))\nax[0].plot(history.history['loss'],color='#EFAEA4',label = 'Training Loss')\nax[0].plot(history.history['val_loss'],color='#B2D7D0',label = 'Validation Loss')\nax[1].plot(history.history['accuracy'],color='#EFAEA4',label = 'Training Accuracy')\nax[1].plot(history.history['val_accuracy'],color='#B2D7D0',label = 'Validation Accuracy')\nax[0].legend()\nax[1].legend()\nax[0].set_xlabel('Epochs')\nax[1].set_xlabel('Epochs');\nax[0].set_ylabel('Loss')\nax[1].set_ylabel('Accuracy %');\nfig.suptitle('Sequential Model Training', fontsize = 24)","07d30079":"\ntrain_accuracy = model.evaluate(x_train,y_train)[1]\ntest_accuracy = model.evaluate(x_test,y_test)[1]\nprint(f'The training set accuracy for the model is {train_accuracy}\\\n    \\n The test set accuracy for the model is {test_accuracy}')","8d6b4217":"df = pd.read_csv(\"..\/input\/fifa-dataset\/players_20.csv\")\ndf = df.drop([\"sofifa_id\", \"player_url\",\"overall\",\"short_name\", \"potential\", \"real_face\"], axis=1)\nattr_columns = ['attacking_crossing', 'attacking_finishing', 'attacking_heading_accuracy', 'attacking_short_passing', 'attacking_volleys','dribbling','pace', 'passing',  'movement_acceleration', 'movement_agility', 'movement_balance', 'movement_reactions', 'movement_sprint_speed','defending', 'defending_marking', 'defending_sliding_tackle', 'defending_standing_tackle','mentality_aggression', 'mentality_composure', 'mentality_interceptions', 'mentality_penalties', 'mentality_positioning', 'mentality_vision','physic', 'power_jumping', 'power_long_shots', 'power_shot_power', 'power_stamina', 'power_strength', 'shooting', 'skill_ball_control', 'skill_curve', 'skill_dribbling', 'skill_fk_accuracy', 'skill_long_passing', 'skill_moves', 'weight_kg','age','player_positions']\ndf_20 = df[attr_columns]\ndf_20=df_20.fillna(0)","46149dcc":"cols = [col for col in df_20.columns if col not in ['player_positions']]\nfor i in cols:\n    df_20[i] = df_20[i].apply(lambda x: eval(x) if isinstance(x,str) else x)\ndf_20['player_positions'] = df_20['player_positions'].str.strip().replace(',','', regex=True)\ndf_20['player_positions'] = df_20.player_positions.str.split().str.get(0)","9ad59238":"forward_player = [\"ST\", \"LW\", \"RW\", \"LF\", \"RF\", \"RS\",\"LS\", \"CF\"]\nmidfielder_player = [\"CM\",\"RCM\",\"LCM\", \"CDM\",\"RDM\",\"LDM\", \"CAM\", \"LAM\", \"RAM\", \"RM\", \"LM\"]\ndefender_player = [\"CB\", \"RCB\", \"LCB\", \"LWB\", \"RWB\", \"LB\", \"RB\"]\ndf_20.loc[df_20[\"player_positions\"] == \"GK\", \"player_positions\"] = 0\n\ndf_20.loc[df_20[\"player_positions\"].isin(defender_player), \"player_positions\"] = 1\n\ndf_20.loc[df_20[\"player_positions\"].isin(midfielder_player), \"player_positions\"] = 2\n\ndf_20.loc[df_20[\"player_positions\"].isin(forward_player), \"player_positions\"] = 3","4d072862":"X_20= df_20.drop(\"player_positions\", axis = 1)\nsc = StandardScaler()\nX_20 = pd.DataFrame(sc.fit_transform(X_20))\ny_20 = df_20[\"player_positions\"]\ny_20 = to_categorical(y_20)\n","53fc571c":"test_accuracy = model.evaluate(X_20,y_20)[1]\nprint(f'\\n The Accuracy for Year 2020 dataset is {test_accuracy*100} % ')","a52439f8":"# Let's look at year 2020 dataset\ndf.head()","4d1f791f":"# let's first put all asked clubs in a a list to filter our data\nTest_clubs = [\"FC Barcelona\",\"FC Bayern M\u00fcnchen\",\"Real Madrid\",\"Paris Saint-Germain\",\"Juventus\",\"Atl\u00e9tico Madrid\",\"Manchester City\",\"Liverpool\",\"Manchester United\"]\n# filter the dataset for only given clubs\ndf_new_club = df.loc[df['club'].isin(Test_clubs)]","1c07dcd8":"# process the test data for only required variables\nattr_columns = ['attacking_crossing', 'attacking_finishing', 'attacking_heading_accuracy', 'attacking_short_passing', 'attacking_volleys','dribbling','pace', 'passing',  'movement_acceleration', 'movement_agility', 'movement_balance', 'movement_reactions', 'movement_sprint_speed','defending', 'defending_marking', 'defending_sliding_tackle', 'defending_standing_tackle','mentality_aggression', 'mentality_composure', 'mentality_interceptions', 'mentality_penalties', 'mentality_positioning', 'mentality_vision','physic', 'power_jumping', 'power_long_shots', 'power_shot_power', 'power_stamina', 'power_strength', 'shooting', 'skill_ball_control', 'skill_curve', 'skill_dribbling', 'skill_fk_accuracy', 'skill_long_passing', 'skill_moves', 'weight_kg','age','player_positions']\ndf_new_club  = df_new_club[attr_columns]\ndf_new_club = df_new_club.fillna(0)\ncols = [col for col in df_new_club.columns if col not in ['player_positions']]\nfor i in cols:\n    df_new_club[i] = df_new_club[i].apply(lambda x: eval(x) if isinstance(x,str) else x)\ndf_new_club['player_positions'] = df_new_club['player_positions'].str.strip().replace(',','', regex=True)\ndf_new_club['player_positions'] = df_new_club.player_positions.str.split().str.get(0)\nforward_player = [\"ST\", \"LW\", \"RW\", \"LF\", \"RF\", \"RS\",\"LS\", \"CF\"]\nmidfielder_player = [\"CM\",\"RCM\",\"LCM\", \"CDM\",\"RDM\",\"LDM\", \"CAM\", \"LAM\", \"RAM\", \"RM\", \"LM\"]\ndefender_player = [\"CB\", \"RCB\", \"LCB\", \"LWB\", \"RWB\", \"LB\", \"RB\"]\ndf_new_club.loc[df_new_club [\"player_positions\"] == \"GK\", \"player_positions\"] = 0\ndf_new_club.loc[df_new_club [\"player_positions\"].isin(defender_player), \"player_positions\"] = 1\ndf_new_club.loc[df_new_club [\"player_positions\"].isin(midfielder_player), \"player_positions\"] = 2\ndf_new_club.loc[df_new_club [\"player_positions\"].isin(forward_player), \"player_positions\"] = 3\n","80ced046":"\nX_20= df_new_club .drop(\"player_positions\", axis = 1)\nsc = StandardScaler()\nX_20 = pd.DataFrame(sc.fit_transform(X_20))\ny_20 = df_new_club[\"player_positions\"]\ny_20 = to_categorical(y_20)\ntest_accuracy = model.evaluate(X_20,y_20)[1]\nprint(f'\\n The Accuracy for given clubs for Year 2020 dataset is {test_accuracy*100} % ')","2f2caabe":"X_C_20= df_new_club.drop(\"player_positions\", axis = 1)\ny_C_20 = df_new_club[\"player_positions\"]\ny_C_20 = to_categorical(y_C_20)\ntest_accuracy = model.evaluate(X_C_20,y_C_20)[1]\nprint(f'\\n The Accuracy for given clubs for Year 2020 dataset is {test_accuracy*100} % ')","8e9ed57a":"![Position.PNG](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAoYAAAEECAYAAAC1GvU3AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAFMuSURBVHhe7b3fSxvbF\/\/9\/CteCBEOnYtDhAeUXijCN3gREY7SC6UgngulILTwNB4qFgYKLSgEAkcIBAK5OGIo\/RaUikguDAGRwAcDRQVBQRgoRAj0dj177\/m1Z2bPZBITrfV98QKd2ZPsmay113uv\/WP+n58\/fxIAAAAAAAAQhgAAAAAAQABhCAAAAAAABBCGAAAAAABAAGEIAAAAAAAEEIYAAAAAAEAAYQgAAAAAAAQQhgAAAAAAQABhCAAAAAAABG2EYY3WB4doQEYbodTfa5Q\/uI5X3mK+ZJfvR5kUbdTtOlhclmhenNOp6hzv\/n7Wj9zjV6UF5\/rEq69keK75SVXdPOfWVeKyRkV9iVIjmvUZGiUn52j5Y5lODF9ZCfk7bZ5NsOtyFbpqKcoflWj97zQlNat8MkWzK1t0eBks+7Nl0ElpjWYnhq3PHqaxuRXK7Z5T0ypj39OAXjOvOdKtsuGYz0z9DG06qadTB8ZYtu47f03Fl+Hf83Tx2nzm222wzHGWRp0yC1R0nn17+7cRthhiw6ryJq5vBuyL4\/hwEKc+Thm53n469fsgsu2ZcL9dovWdhuMjDsyfTne3aHkuRc+s8omRNC3qIT5+WaENyQfMsiWqXtllgr9DsD5+rGcb9Xw6qqf8DOO2t0+UmzItOs9K8dzjtJ3\/N9z2bQLxpd33Shj1sqfdFb\/7aoH2vtvtg9r3f\/5gxyfM46PvK8L2Hf9+WaIru9xd7EVhlzwu2P4a8DcH+TsthJ\/rtP0\/RbvXdz91Y1Io9jOL8lOjQXu5FSk+221PnYxA7L\/Dc5foXBhKPFsq05mnYuHl+ysMGR6jZCgfQPf3Ex4Yx9k5r9HZjbbfca++rdGYc52P51k6UQg8m\/DgykQSC6aus9xS9WOaEopyJilffXn5lKIcY7pAZ1a5QOC+szDstJ7+YOh3IAhDNV6bT8jCy+IkO+6c9z7XOPbvQ0vTB9\/v9ksKQ4mg3wcJF2Ia8\/Nzt2zrnLaX7AZcgcbqeSF99mWZ5u1OkQeNMgf2cwz+DuH1sbGebdjz6bSe\/mcYq719mhg7S+5zYgQEXJ+EYdvvtThj\/qhud6NtjrfZh++ttmKC\/c4\/zOPthaH\/HCPMXn40KL9gJ02CLO4YbtkAEX7ut+d78dMeCMMLJvaTvmskEgulaA3WpZ\/GFoaOcXCVveMKHG\/mRlE+QO\/LmLAfSM6GKB9Ab+4nEOiYgDqVfhy70fY45oXr6IlJ1oNpWAbeuiXje422j9RObBNwPlbvk3\/teizQttVrabJGx87+jL3bpzPLeZsXFfrwl+Vw2hrtWcd\/tirOPc4XrADXNOjsqETFI9cJlYHbJsyoBepn2HE9Gf5gmFjdlwQxhKEa+\/lrlOANW6ADUqeN5\/z4uPV7yL9hG\/uXGp3mRY027AZdW6EvN9Hl\/SjtK9KuLOKU6djvgwTq17qmL6tWkNQ+OW2M2zYwwZiv01XTPG4cl+i1lWmR24uz4px57LlOh1aWonnZoL3CV6lNUf8ONpHPN+T5dFpPuQ72de3b26eIwQSH9Xw+Wm1chN13bb8BYn5vo0BT1meJdtf63ZssBhV5xj\/C5lxByeoqiSa1\/XVjL5LwHBymxVzNqd\/PH9d0urtPJ\/b\/ShTP6fIrZXj7xo4lPrpty0P4aecxVBKWTKjmj6+pyb+Lx\/7SW6ftmso3pM\/q5rkH6VwYWpzmZ6wvZsHb+bGiH0x\/yqzRum73YqSgp3wAvbkf26jmdd36Do2WPwdFlCwMq7pa7MRF6XzOPdr1u6W9VfN\/ZQbyu9soOPV1PmOcNo595SU6N2ob1TPsop4Muw4Z9txNESOnyiEM1bh+knnHbZD9zvLwAgsUKXY+wZ6pWU7+DaPtPxB4fuxTxupVp6TGKrS8hNK+Iu3KIk6Zjv0+iLJ+TubH\/u4G5dNWuaVyYIpJ82DNCqzub+B8rqK8S3j9OZHPV\/l8Oq+nbEfx29sniDOcy9t59syEP\/TPfh1ifq8Th9qMUAW+0xGUvgw5Q21\/XdiLc8wvduKifk6Ojzn1exg\/VbYhNio7sNpmfk0wU8pEtGjP2Xn+WzrHu3juCroWhm6lNfpQs49HP5j+lGE3ePOVlq2A5Igx5QPozf3YjsAd5CRrDcOynkTVCiy2AbjC0MrKsGOjm9GZiTCUzndRoll+zKlzjT5Yz2FUmQE5p+IL8\/zA+4p1zK3bwMRbyodkLjs2agfVM+ymnm4d1o8M+vLKcgrneUAYqnH9ZO\/bmng+smg7zafZMY09MztzLP+G0fYfFCKS4F8oO+cihYuF0r4i7coiTpmQ+xAo\/T6Isn4VVxiKjP1V2aqLt0PjIGXnZ4tmcDU+r1ifodHUx306Vc1tiqo\/I\/L5qp5PF\/WU7Sh+e\/v0cIZzxdxz1x+m7NEYP3e1X4t43+u29XIboEb6zm+svfbNK5TLqu2vc3txfWGJtqURh\/ion9Phe\/OY0yY9kJ92GkOv\/rOe6+AKfVF9n9P+zEkZ3M6fu4ruhaHzBfKEdre8F9noe11Gp0Omhp2ev52RUz6A7u9HLm87gjAaKUti93JsA3CFofs5wR\/IRWVMNgHna57T3jt7bqCd7VB8jwcpcEtO3Dz6RCnrHjjPpteoWPc6TKdG7aJ6ht3V067DeoX9L\/Vgzd8LwlCN\/ayZePkfayg8z\/Sc8tPsf+Yzhw3Vb6j67aKFiGMn6QKdWsec8n4kW1Lal8JHTCSfjrQ9G\/V9CJR+HyRQv5u6OxfKvlfps9Q2KGUq7M\/xz3XSRmh+07+gLKL+jKjfQ\/l8uqmnU4dO2tunhj2c67ZrTaszJs\/X9qD6fQJE\/\/7xv9f9HHW7K+OWHZuw40yKcvJog4Xa\/jq3F7edcI85fmejsnGH4HMyjgvO3EBHDHdj\/z3wU2UbZ6OwA9Xz8CBlFN3v6\/y5q+iJMBSB2lfeizrY9KaMdazJ\/rd6Q2K+UJMJNnFefgDu53Z6P3J55wezfmDnf2tulZmFkZ3P\/RznmPR9NipjsnGNxI+c2ld8jwe14BLwFVcLI9Kk5GFa\/M\/tbXZq1C6qZ9hdPe06mNfcsv\/lVLl7TdRzfHrYz5r\/NrZ4tn4n+3fjczWVv6Hqt5NsUdFIO3byouQEpFDblWxJaV8KHzGRfDrS9mzU9yGQvsP1+yBO\/QJIi6Tkz1LaoEpwMcScoTWakiaZJyY\/OZP7I+vPiPo9lM+nq3rKdsT+j9XePjFUz9qwOmODM5T\/LpWNuiZA9O8f\/3vdz1G3uzJuWZmENBJgo7a\/zu3FbSfcYwG\/U9m4g7rOAmmxTHf2z7ijnyrbOBvFb6h6Hh4ihWH8566ie2FYt7e4UM1DCXvgnF6XcR8kT\/cKYSMEmn1efgARn9vB\/Tg\/mP0Dt+q0YaXa+cPnk3T5367zuUOnwRR+nHuVjcRGo+RfK5TzbLchDVlzI5CuN1EP0coYjTKtT1qZEJ5J8g2PxzVqF9X9dVdPuw7Oc3VS5eYcT\/t81HN8etjP3\/xtzgpmD5I\/L9umRKZM+Ru2sf9AI82H+M3y5pBWu\/IuSvuKtCuLOGWifEzp90Gc+jkM0xjfBkPOrDvBuJMhWvn8NVVzS87WGe4wYHQbEfl8Vc+nq3p67Ygfa9\/ePi2CbbQX5XDyXe2XEf97o+KQH\/c7pzZrZBxnrcUO3vn0HLX9dW4v7tCpPQLmEqcNkevskEwFt595ID\/tNIa6w9fdDCXfzU+7FoYnm1a2RhIP7R5Mf8pIDtViSp8PjbHjo7reUcawk\/txjFT6gXnq3sy2LdC6bp53haGUAfOs9OPEude4juGbkOr5HkbIoo4ATk\/EfbadGrWL6v66q6ddB7m366TKn+u0joyhAp+f2L\/taomKYvjJanSUv2Eb+\/fborSPmhwE49juQwlDtd8HibR\/B2tonpeLvajDj9RWON8V3UZEPl\/l8+mmnj474sfatrdPCWkFaRiq4eQ72m9n3+uNQ8qhbQf\/d0orhvnKXCdLFmZ\/XdiLE3d8K2kZ8eJftJ+4PIyfdhxDpTjY+eKTu\/lp58Kwee5Ry\/MeRR3nh+l1Ga9DuQLNpo0w7OJ+HCOVf2Dp4dvIAiZsexYxR9E6Hn6vcR2DUbd7dt7v8W8D4wTBWpbm+Sad3w1zKTw7dla0tyVwe269FYaMTuvJUAlDeY6nTdRzfHr4\/cTK1mqa+RvbmT3lb9jG\/iVb9GSaYwUOL\/cuDCP9Pkg8YSj1zvkUj4htMMygfE3bq3wj+QZd2c\/LqDgbCLtZnRAfsoh8viHPp7N6cvx2ZBLd3j4hnOesEBNOVloxnNyt\/dp0+L2u6OGLKCre7WAO9qXMmuI7pcUMYlhSlAuzv27sRRK5nu1Zbuk0b20XExn\/ov1E5iH8tPMYKi2yjNquxpOJ7ua5B4ktDINolHq\/Hzr50o8bzOP8eJ18jt+h\/D0otTAMEn0\/cl0dR\/D9wLL443gEDFP40Rs6RxtznOBqcksn2ZmI7\/FtHO1suRFk7KO7cXbPhWGn9WQohSHDeTYWUc\/x6RH0E2fLCobTE1X+hm3sX0VyifK+twzEsd1oYRjEqU9EGff7OvX7IHGFIZ+k\/uVNyIbxHM\/GuRHZHlZuu83vYBP5fMN8s6N6coJ2ZBLV3j4dnN9AY\/fvt6UWe3aWoAoMJ0e2nTbhv3\/n38vnZof97nId1N\/p+j4Tmw3fMY\/9dWkvbTZ0jo5\/4c8pwAP4aVcx9OKrK1QVhG9w3eFz99G5MBSvLPtE28eqoUhFeYv7E4YMKRvVVhjGvB+lcwR+YEnhM\/wChnN14HvVjzZCqfQSZQplOo1Yoq92vnCuaqV4r5q7qVPxo+p1Ow3PtgS9F4YmsevJCBOG8hzPsO95ugT9xM0aSL+X8jdsY\/8Ops1kClIGQiKO7d67MIz0+yCxhaHgls5ivWqLlftWoIzK\/p3XbHHa+FDU8430zbj15ATtyCG0vX0qSEHXs+m+TcQQbuTvYxP2+3f7vfx3z9LipLvY0HwlHvvdHf8N+U65rbXsTW1\/d7AXo07bntfG8ldupoW\/Fivua1qDRPtJkPv1065j6I\/zLl6Jdzc\/bSMMAQAAAADAUwHCEAAAAAAACCAMAQAAAACAAMIQAAAAAAAIIAwBAAAAAIAAwhAAAAAAAAggDAEAAAAAgADCEAAAAAAACCAMAQAAAACAAMIQAAAAAAAIIAwBAAAAAIDAEYbm+\/MAAAAAAMBTBRlDAAAAAAAggDAEAAAAAAACCEMAAAAAACCAMAQAAAAAAAIIQwAAAAAAIIAwBAAAAAAAAghDAAAAAAAggDAEAAAAAAACCEMAAAAAACCAMAQAAAAAAAIIQwAAAAAAIPjFhWGN1geHaP1Idc7kqrQQeM\/fs4k5Ws7t09kP9TX9J6re17S9MESpfCNwrqprNKDpVG15j\/+8KtP84Dht1O1y3vsdGNQoOblE66UaXfmvBeBBie\/DiXcVairOC46zNMpt\/WWJrlTn+05\/fRqAuyL8KMw\/hL2lKd\/wHW8xu9aY7+k173HG1X\/s855n6cR3vP+0bzOCMdDiwdqH34vfQxi+KNDJjUGGxVWjTJkJZuyvvpKhuKb\/RNf7NJ9WGHCdNp5z4w4Gi+a3NU9wEU7xbt+5X87ZUZbmmYOPZeueawF4WGL68PQMTQ2u0V5TVeaWDt9pNMXK\/JrC8O4+DcBdiRSGPxuUTw\/RfOnae7xudbgCAvCW9lbVgrH\/xBSGvhgoMG6V5UFn\/B7CUOUMFZ01yGGBhlHbouVchc7CznMuy7Sul5noVJyLpE29a58o4a9bo0Ap7RNtfNQCmYeT7DgNrO472RThFAqHPSvO0UC6QKe+4wA8HDF9+FWWNl4O0eKOESzTrFBGW6KNzajAx3jEPg3AXYkWhixuMDv02xzv0CQ+ZumD5s8mmp2azLcQofWQvsYIi4GgN\/zewpA1ylX\/cZvWNR2yQJNMpoWBK4dgWwadlNZoKjlMs9zADUUZJW3q3dynzKBGH2ruMTM4fqUrnknw3E+wpxcpDBfK4YETgHsnvg+f7CzRwFI5kOUX2TV2\/KRN4HvMPg3AXWknDM0stRwTr6nIOmPLn69FdtBjj7xTM7hAxUu7rI+H9DUGhGF\/6ZswzPzzjv7Q\/hTwv1Vl2hMzqCiHkodp8b9z5TUemud0mFuhFDPw14WQOXrcwHd0muUGvrlPp20NvF29DfrySp6TZP4vHNP4SsuDK\/TF\/g7xv7c3p0qji6Fkdg8fjpBKB3enN\/7LiS8Mr27KtBgIRgZtL\/Hgxfy6nTC0eYQ+DZ4uvfK1tv7htzvxv+lvxucV0YmxO2Xi\/zijTw\/iaxCG\/aYvwpAbt39SaHcGHzOo+L5rYHCElgt1MlRGGgbvAXVo4OGLW9rXW8xJsh1RZBtsh7V7cdaQmiLzKZwicM8ztP7tnJqd3DMACnrnv5wOhKElpqYKUoeOi0VtjQ6bMQKfn0fk0+Bp0ktfa+8fZqbatkORQbTF32WJ5qXOy+H7IUp87EB43bOvqZIjgqihbRCbvghD3vPxGzs\/piobTSdBRTp+U6fimxQl\/mJG34FQMhr7lPubXTep02FYr+ayRsX3M5RIzlHxu+K8oH29zUm\/1pykI50S0uRfEWCsuSCquUiq3lLzokIf\/tJojJV9mAU34Hehd\/7L6cyHRbCaLtCZde6swHzNWq3csTBkPBafBk+TXvpaHP+QbY+vmB91FiuaotGcU9hmfmEI9+lr6uQIpmf0it9TGHJEj51dW\/Ed99O6pbODLVqeHqZnczptHysmvzOM4zKtL4zQs8kVyh20y8zFCCKifuZqRe6sntVfPMCIFYvnVHwhZRosQtPoYl4Ic7gL33EAOqCXwapjHxYLTexVvOeUn2Z\/HyvKRfEIfRo8TXrpa3H8Q3S8RIeFiz\/NY8+OzV6UaFae+hDFA\/laaAwEPeH3GEpWOoN5bWgPonVN1ZKZ1p5a2aLDC0XvqGXQ6S4z+slhSi6EG32QGEHEGjabLVbEMJOndyb2lmIB5kgejnIJdQoxHNDuewGIppfDW934sMhkbNZNMcWDmBVE2ga+R+zT4GnSS1+L1XES8wrnqFjhscK3it7KclflIeYwHtjXIAz7y++x+ETlDGIiu7dH5KGWpXk+ETZqKf1lmTKrBaqqjD6SOEHEWkX8bo0FCn\/vzNxDav7NWzMwStdwQp1CbAIcsZIMgJj0xn85Xfgwt+Pnnyj3cVwa6ooR+B6xT4OnS698LZYw\/GlmrDPMRuXFJgKR8V6g12+8fqfkgX0NwrC\/9E0Y9gbTQDK7vgmm0iRT4QyBVcn7Yr4dn6vUyRzD3tG+3gIxJ4kZuMKZ+aqwhBbcd4ojnCKwKrlAr\/mm3pi7BH4pYvqw7AMte2PoGcpL85DiBb5+0V+fBuCuqGKhiVeYiXmGzEaDo2k8460xG2V23uH8wt7S3tcgDPvLoxCG\/lS7bNTCGfznkyla1Mt0+sCvxAvUi+FxxlZFlFO9SsseFlbNRRJOIX0mJzEyE76fFAAPRkwf9gkpEbykRShh5e6P\/vo0AHdFGQsFuncFvHj5g3o6g\/kZMecX9o32vgZh2F9+cWEIAAAAAADuCwhDAAAAAAAggDAEAAAAAAACCEMAAAAAACCAMAQAAAAAAAIIQwAAAAAAIIAwBAAAAAAAAghDAAAAAAAggDAEAAAAAAACCEMAAAAAACCAMAQAAAAAAAIIQwAAAAAAIPjFhaH5Mu31I9W5n1T9qNHA6j41fcfNF4EvUPHSe5x\/3gfNfYm9eBG35yXdGiUnl2i9VKOrlv\/ae0K8aF9Vd5dfst4AKOmvD98nbV\/cL3yXldHW6LCpOM9p1WnjOffZaB8HoFOEz7ws0ZXinInpi97YYTJfulaU7y+R9a19osTgGu35\/cjyMVV9RVvy6isZvuOgcx61MGx+W2ONsE5Vjxgy6Msr09gDwaNRoJTUIIuG\/t0+GTeGw9lRluZZ4BnL1r3X3hdxheGvVm8AlPTXh++TeMJwhqamhyjz7VZZpnmwRolpVgbCEPSYuMIws+vGDYewjkwfiaxvc58yg1qg3TA+r5hiNiAAG5RPP4zA\/R151MLw51WZNcRpyjekY8KgFmhjkxmdLxMhjCpdoFPr\/7CG\/qw45ynnp\/rvCuUOzqkZlZ2rbdFyrkJnnTpcXGHYRb0BuH\/668MeLsu0rpfp5EZxzuGatnWdto87zzjGE4YrtJFl9V4qKzIXt3T4TqPFTdaJgzAEPSauMAz1xQDxfCVWPFQQXV\/23QtDlMo3pGO3tLfKxJ\/wH1820fhKy\/52BHTN4xaGdi\/hP6mXcKRT4nmWTnhmwZOJMI0qITXskQJroRzuYJcV2lgYoWeT3CFCeiitazpkgS2ZTAuBGHuI967CMKreANw7\/fVhDy2DTkprNJUcplkuEA1FGYZRL1FmepiezbGgV48vEOMJQ+a7x2VaHFyibb9AFYKXHT9u7+MAdErvhWFMX4kTDxW0q+9pPu2NZy1Wf22cNuq8zfBmE9UjD6Bb+iYMM\/+8oz+0PwX8b1WZ9rQ35JPsuCerwP83Awefy8ONyC5rzu2Rh3hEQ68akmVi7sOReihIpnlRodyrNHOIt5Q\/CnGI5jkd5lYoxT7zdSHGHMC4wvAO9QagHb3xX05\/fVgJF4g7Os1ygbi5T6dhApEJuPU5HvSytNdoLxBjC8NLg7aXgsNaxs6SOQQWw8fB06FXvtYPYWgTx1dixUOJtvWtZ2lUzgzy\/y3xx9uIUWnalL8NAXejL8KQG7c9qdWmO4Nvb8iip8CzC+J\/M\/tgB46qrrnGc1GiWdYYb1+514qG3lfPgcEZWv\/WYVqc9Zgch6iFOATPIMYRiHGFYS\/qDYCC3vkvp78+HIlPIJ79UJRhGHUp6H0PF53xhSH7TD7kPV2gM+c8F4saZQ7Y50MYAote+lpcYaiaYxg3bsTylTjxkNG2viLD7nYMRQbRFn\/2qIIoe07FF75RB3An+iIMec\/Hb+z8mKpsNDF6OPLcAtHgrtAXK0MgAo41H0k1N0nV0PNez4e\/NBpjBhh7dRMLQKe7W7Q4oVFKr4ReZzT2Kfd3ihKTOh2GZDFiC8Ne1BsABb3zX05\/fbgtlzUqvp+hRHKOit8V5zms01Yt6TSlMQFZOleXYXQiDM2gNkN5+zu\/F9jnW6uVIQyBRS99La4w9H9fRyvk4\/hKzHjYvr7mIjRznuE1FV9Ki9GEf1ltBuYX9pzHLwytDAM3GBE4ZEMTBmMa\/eH7IU\/qmRPa0IuVjyyQXPiO+7GGiZ05TapJ761bOjvYomV7nka7Se9dCkNB3HoDEEEvg1W\/fTgMMfTlzHsKyaTf1Glbd+cBt1so1pEwtBaa2PU9K8zQ6KZVdwhDYNFLX4srDKN9MYQ4vhInHkq0r6+VJeTTL6R2wDxnikYxXaOiSyMOoBc8+qFkjphf8L5ChzrroXhWMdm9jJpneMomtKEXDXfE9\/IshD5Hz5Iz4U5i9az4MNbUyhYdXoQPUXm4izBsV28AYtDL4a1++7AHK1OxPDlMyYXwTpjI3POhrpEFWt+pkxFzGK0zYciwh7vE3oXjtHEcUg48WXrpa\/0QhrF8JU48VBBHGJrzDHU6ZOIv4RstENcz0ViVh5hBT3j0i08EvMfwYo0yL+SJ6ia8x5F485b1NtzhKZvQhv6YG2N4w13NLtDGbiM6oNSyNM8nvrfpNQW4izBsU28A4tIb\/+X014c9XJYps1qgamQn7Jq2V9cof9T5fNyOhaElCD\/kPtGonNGAMAQSvfK13gvDeL4SKx4qiCUMWxVW5znKvJsLjhaIXQve0utX0hAz6Al9E4a9wTTkthtyijQza7RVy9XFSiYt0NvgiIY+sLq3QK8nhijxUD0QETTmKF+X7tXCds5fst4AKOmvD98nKr8TGJYQVQi+k81xkQWaKkjzsSAMQR8QQutFgU789nljd5Q6FYb9pX19OfZm98HNrs1dCli7oGF+Ya95FMLQn2rneLeCMFclKdPJYu8j9dwk0dD7PjcxYqbDH\/aVeMF6cWzH+CXrDYCS\/vrwfaLyO4Gd9VAJPjEUJi1CCSsHwB0RQktln4OssyXK\/ILCMFBXub4mYn9e1evxGHzXAswv7D2\/uDAEAAAAAAD3BYQhAAAAAAAQQBgCAAAAAAABhCEAAAAAABBAGAIAAAAAAAGEIQAAAAAAEEAYAgAAAAAAAYQhAAAAAAAQQBgCAAAAAAABhCEAAAAAABBAGAIAAAAAAAGEIQAAAAAAEPziwjD4Av7ESJoW9TKd\/oguN6CNUOpvnYo1+UX990vwJeHDNDa3QrmKW6fqR40GVvepKV3nXqt60X6NPmhDtPzZEP8HX+yvUXJyidZLNbpq+a8F4IFoGXSyo9Pi5AglHDudo+VcjQxRJtyHt+umrXu4LNG8KLNGh4qX6wtaddp4zj9L5Uf3i1Ev0\/rfaUoy3+X3xtux2ZUtqt6Y5+22IvGuEmgLHI6zNMrv+WWJrlTnAeBcVii3MkdjSdPWBpIp4UdfGreBss2DNeaPM5T\/7j1uYvtk2HmOQdtL5vesH6nO3yPt7ttuMxQ8eN1\/MR6FMMzsGmTcmFw19unDXxolFspS4xgsZ9ycUzW7wIw+RRt1+TPvD9HYvyjQiVynwlsaY3X6UDONtfltjQU3naoeEWfQl1emwdoC0KFRoJQU6IQwfLcv3bdBZ0dZmmcBaCxb914LwEPwgwk07rOTrFO026ArYafXdHpQovV\/bSGk8OHLBu3lViilaTTFbNkjmEQjP0NT0+yab8GAxxFBb5qVeVBheEsn2RlKaGkmgvfp9NK8t6tGhYr6liNqRVsh6rpGe0qhe0uH79hzYGUgDEEYZ595fBmmWb1E1e+WH32v03aOdbAC4s6MM6PPx2mqcO47x+E+mWY2p1Eq31CcZ3wv0JTG7Db9sOIq1n2LNmOO8qyj6bQxFk0kUTw8CmEYMDghjtKUb9jHQsr9PKfii6Fwo\/55Tds6M5xjRUZCovovC2gH5x0bj2jsA434Le2tMjFnZwmvysxY5XthNPcpw4LZxia73pdNND6v0EC6QKfW\/0IY6jX3Wouz4pynHAAPwy2z0XEamGCdH0+W30+YDzNY8Jkf1ChzIAlA0civ0Abr\/A0sla2so4wppBY3WScpShhelmldL7POm+KcQ7x2QkXzSKdR1hFcP1KLVxvRVrzK0sbLIVrcUXxPs0IZbclsEyAMgQrhExrNl1QiT8FNmRaZD23vZpk4zNJJoAz3yXHmYzol+HlF\/DsrzNAo87FQ3xX0N87Gvm9R7uFHDx4Dj1MY\/tin157j0cJw\/r\/w4WSjXqLM9DA9m2OGqxqy4lxWaGNhhJ7xjMdB\/KFptTD8Saf\/pqTjDcqz3panjiyYCEfkAtiTTTRFZUISgpHC0JNVBeABEMHHJ+qURAhDRlXXvALQbuSP+ecv0bZf2InOFTt+3CYY8CHu0hpNJXm2gQlEQ1GGEaudCGAOs0UOD1vYbcXJzpJS6IqRBXb8JKRNAeBkk3XApgt0pjinwuyMfCVDTLlgAvDYX8byyUrYeR67+PFKG2HY3zgb+74hDGPTN2GY+ecd\/aH9KeB\/q8q0JyRY\/G9LDKduX9nHzHKqoeRnk5\/aZCpMDBZg1ue44WZpr6E23OZFhXKv0uwz31L+qL3hhmYM37Bg8dEVcydZZthSZpD\/b4o\/yyGdoXBzzpQ8dBY6lJxM04c2WQoAwuiN\/1qCZlCnw7ZZgGhhGPgcp5E3xdd8yeuPBhdYPOjFDQbWHMhZLhA39+k0TCDGaCcchDjlgVVxzofTVggh7a+veY98WklYZxM8Xnrja2aCYbYYM1v485zy026HzY05chnXJ7n4Cpznc15FpjHad2V6H2c7uG8Iw9j0RRhy4\/ZP7uzO4IOC76pRpszEEI0xYeX2ws1y\/u8c+Eunve+diSMxSdw23LBr+SRX23AjFreIRtw\/x5DPe9SYqJWMUwQ9J5VvGrot\/nimZNSeK3hRolmPILaEYeDeZ2j9WxcpeQAYvfNf2wdKMbIYbYLLkc7qITXqUiMvpld4MgZcSFlBr9Ng4BOIZyGdynjtBP\/uOSpeKM75cAWfOe\/LM+eLi0VrkQ2E4e9Fr2NlnE6IwD8aJeYK+hdyST5ZZyLQd56LRdNO2\/iugt7F2Q7u2\/LH4BzDkO9\/wvRFGPKej9\/Y+TFV2WjMH937WWkmevxGojDM1i2dHXxixp5iIivu0A+jdU3Vks6uY4EhbM4CCx6nu1u0OKFRSq8o5jeZiEbcV\/\/kEhOK\/myE8ZWW7XmGwnhX6ItVRohGa66gf34hRzWUzHtcfIHO2Op+aN0ACKN3\/ns\/wtDMzEkrJ+Ug16kw5FzWqPh+hhJJJurCVmPGaSe6EoaWz0tCl8\/jsoejIQx\/L3odK+MKQy7qku\/3rYVgnBpt\/B83IWEi+yRPWEhTQsScV9vn2viuip7F2Q7uW\/ij91mbMIGsKv+EeRTC0DE4PhdiIjhsFGWYp\/l0vMB0U6dtfYGSSb56sEJnqpWBzXM6zK2485EiJ6wHG3Eu7BLPmREGPtvMEvKhIiH+5IZfiEYzsB2+H3KzhxZhcwzNBTrxghIAMr3zX0vk9HAo2WnAPYLPXGhi+4Y5Id7ykw6EoRjmcuY4hWTc47QTNt0MJfP\/RdC1p5DwIT93fheE4e9F73ytgyFVZxsnBZ75rV6f5H4lpmewv8WKf6dstO966HmcxVByP3gUQ8mywfEAkdDWaE+xj6HKMEVDGtEjMBr7Zrp6ZIHWd+pkqIIBzyDoc\/QsOdM+GEgEGvEWM+LpIZpSrJIW8wzfV+hQ928NcE3Fl1w01jxDzDahwtDqHcVyVgAkeue\/DGGHqonrfqKCC190pTlBSRzzN\/L2gi3\/RPp2wcDKSixPDlNyIXzlZKx2IoDpu45IjcDfVogpJPw6PoQnrQiFMPy96KWvBRZohSBEnWrHCuEr8kIun086583pDu7q+fbCsJ9xNu59t20LgMMjXHxiNbZMDPnnGKoMU6xYCm1Ir2l7dY3yR9Hz8fi8wI3dRsxg4KJqxM3tKxTGWdFp4MUaZV7Ii01MeNYz8eYtLUtDzDahwlBshgsnAN3RG\/\/l8CDCGm7mB2eR\/hPuw9xn5L0\/Bf5G3hKEH3KfvFtvtAsGl2XKrBaoehE1zyheO6FCjBLw72+TuQ+0FWJi\/yfKfRz3jBJAGP5+9MzXWCdijHXC1itRtmzubKHet9Bc5OSe8\/ukeX4xtyW2uXFjUTth2N84G+++GRCGsembMOwNIQYnDGEmsI9hYFWy2ExaC2TZ7gt1I24GyoT\/bSdiyJiJvMBm1wwx8Zddo+jlCWEYWJVcoNcTQ8HvAOAhuPhq2iOfRH5gb3DN7PR4n4rfvEHIu9CMbwI9R88Gh2nxP18gUzTyohPIPsMT9B46GLTO6cubFPPrNL0uVJwNrvnmu3ulfWeKS6CtcIb7vG+dgDAE4VibqfONnjfLdGJv9HzZoOrOV6pyISdWvYe\/yUSs5nfmtwbjrzjPjnm3YGonDPtNjPvm5SAMY\/M4haE9tOQ0kGY5OR0vXrn114rn9XP3TWgj3ijQFO\/heLaTMfdcVL0e72eL3Z8WnF\/IEcLQd++JETMVj1figV8Go0F7m0uUGmF+a\/snfyXejlcYeu3YfG2cclsLVSPPO1D+oPcrBAMxXJ2VXgdo31s5XBgyxPQS3\/5sEIagHVdHBcrMpViHyvIl8Wq4rBBIXuGnQCQo7FErRfwV5\/37kobF6fsl6r5FGQjD2PziwhAAAAAAANwXEIYAAAAAAEAAYQgAAAAAAAQQhgAAAAAAQABhCAAAAAAABBCGAAAAAABAAGEIAAAAAAAEEIYAAAAAAEAAYQgAAAAAAAQQhgAAAAAAQABhCAAAAAAABBCGAAAAAABA8IsLQ\/WL9Rf1Mp3+sMpclWl+ME35hnwdo8Wu1Vh5veY9zrj6b4EGnmfphP8vXqzt\/Q7+8m3x8v7v8ovC75eq7quTNkKpv3Xa\/p+3ToFygxolJ5dovVSjq5b3MwF4MFoGnezotDg5QgnHTudoOVcjQ5SxfX2G8t991zoYtL1k2vlDv7D\/52WFcitzNJa0\/E68sF+nLw3LPyPalUPFS\/yvSqxNYmUS7yrU9J1zOM7SKP+clyW6Up0HgNONbVo8mF+1bR9kzik\/He4r8KW78yiEYWbXIOPG5KqxTx\/+0iixULZ+0Abl00M0X7r2Xlu3fnhbADrc0t6qJBiFk8xRvu5+h3HZoO13KSbGVujLjXzt\/SEE37t9T532Ps5QQlugbSmwBMoxzo6yNM9E8Vi27vlMAB6EH3Xa4D47uUK53QZdCTu9ptODEq3\/azfe3NfTNDWtUSrfCH4G53uBprQZmmL+\/pDC8OzzWxobHKZZvUTV75bffa\/Tdo513GxRq2pXvteoqM\/Rs8EUvf587vlMEcym2b0NrtFe0z3uckuH7zT2fGYQzEAoXdumRfMhkgmx2gcJHtufj9OotkaHCl+BL92dRyEMA0GgUaCUlCWsftRoYHXfY0Cn+TQlPmbpg+bPJjIjfM7E5je597RARX8vvlUxRaldzs9lmdb1Mp1ECsdr2taZQx4binPRCMEXyHaaIlgOnOpyrIEoztFAukCnvuMA3C+3zEbHaWBCp6qd5VfCfX2cNrI6JXhnThGgzgozNLqZVbcJDvF8rvovC0IH550HQtFeaKwj6hV2AcLaFYZxoLNOqzczKoLZqyxtvByixR1F3ZsVymhLtLHJyiGYARU9sE0ltS1azlXoTCmyLGLFQxVx2weXk00mCrP7YvRg+XPQV+BLd+dxCsMf+\/RaOt78tkYD2ieqOmWuqciMYvnztcgOerKJQlRKThEpDDX6UPMdd84bdFJao6kk750xhzAUZRhGvUSZ6WF6NseCFeuhqcqoUAu+W9p74z0eKQydrCoAD8RNmRaZH2UOQjpYDpavV3jHjQnEY\/953inix80OW1TGMJbPXVZoY2GEnvEsxYFvtCECHpQGpgt0pjjnITL4mu3T6Kab0RfBjAWpk50lGlgqB4bPRBvHjp9Y5eDXwE9vbFNB65oOmYhKJtNCICqnKMWMhwFitw8WYooYawfqzM9DfAW+dHf6Jgwz\/7yjP7Q\/BfxvVZn2hAjD\/20Jcbd9Zf1vfKVleZ6h+N80fOPzCus9fHWMQ\/wvZ9KEk6iHkp8x4zlrl1Gw5kbMcofY3KfTMIF4zHpUczxYZWmv0V4gKgVfq0E5Pmz+nxvIRDnVUDJz4g9HMZ0NAB+98V+rER7U6bBtZs71dR7gAnOD+ZwgMS0kpE1QEMfnmhcVyr1KM4H4lvJH7QSimbGfLbbJyHDaBF8+ojHwouQEcTuYXYlA6b\/OnFvJsyNOOecceOz0xtd6Z5uhNM\/pMLdCKRZbXhdC5rDHjIc28dsHk+bBGiVs8SvFebkMfOnu9EUYcuP2T2rtzuDNIOCdY1imzMQQjX2sSUPHplPYaWVhbLb4E06wQl8sAz18P0QJdq3zHeK8t66c5KtCZ2lxn0OchaTFjboUrCIWtwQEnz3vceITVaWUvigXqP8MrX\/rYpgMAEbv\/NdqpCUBFI4k+PgcIt\/8IS4Wpwo86MUXhjaxfI5P2LcFYi1MIFrfXVGd89Em+IrnwgKiPcrhBimDvrwasu7VKs8DnPU8EMx+L3odK+PbpmqOYdys3XXHAjEsHsZvHzjm+gB3BNCaKyj7CgO+dHf6Igx5z8dv7PyYqmw0prF7PyvNRE+w4T7JjjvzDKu6RqPOwgtTNJpzBX3zCzmqBlykxd\/SmDYTXO0cxWWNiu9nKJGco2LYykrmVNWSTlMac5iIuSAqwZd6vx9wQlVmkWdB+AKdMfY8giu6AIimd\/7bScMvCz7us9LwkpgTZM\/J61wYxvI55vOnu1u0OKFRSq+E+M19CEOrYysNCfK5lfYKSwSz34tex8r4tun9ThPXHtthNPYp93eKEpM6HYZlBWPEw\/jtA8PKAOYbrpg92\/GNADLgS3fnUQhDJwi0mLCbUKxAZggDEENNXPxpnsDBRaMYmroo0ayUPRSENuBm72TgfcV3PIgYsnLmK4Vk6m7qtK278zQiJ\/Iy\/ILvJJtSGrFKGArEXErmkBe+4wC0oXf+a\/llh0PJ\/H\/egNtTQMTwkTNXqANhGMfnrOExZ25U5ChBj4eSJX\/2BCkhhM15VObWHO6cSwSz34ve+do9DCW3bunsYIuW7fm7IQu8YsVDi\/jtA\/tcPmfQ96xMvHOS4Ut351EMJctBgBtSQlujPX9qWsw3YEKowo3et0z9yFzpWOVG6F+pG+EkQnSFGY6VYVieHKbkQoST8J4VH6IaWaD1nToZMRyAExB8P\/aZgWuBVdKhwtDqFcYKoABI9M5\/GcIOvQ23Gp+vi+uWaPvGHA5yVxe2F4axfI5nM\/jWMcmZWB01Gz4aoZrQHiAq+LZYEJ8ekkY1gkFKjHrwxSliaw53lTaC2e9FL32tJ7apwsq482HhKb4P54ViyDlmPAwQu30w9y5U7RLi+Ir1P3zp7jzCxSfWij4mhuTtabjhFF8ww3nHxJ+02ETQZKKKOcLrN3yZu2tAglAnMSepqjbIFlyWKbNaoKrKSRyuaXt1jfJHnc\/3Uwk+YcjP9eAcQ1UdxQaeXfQKAWD0xn85XNixgMUa4OiFXH5fN\/1vMbdFi54sfzthGM\/nqtkF2thtxO6oObDgMsYC2Xolyu8ZEcH3jPmxfz\/SQJASi20+Ue6jt81CMPv96Jmv9cA2ldSyNM8XkkRl02PFQxUx2wc+Ahayb6HwFekcfOnu9E0Y9oaQICAcIDj\/T8wzZOWDQ82m8SU0RY9DOElwVbLYTFrxHfeFUvBZQ+lT\/n0MA6uSC\/SalUv49nYE4EG4+GraI1\/YcWBvYMvs9Hifit\/soa+gr9tDR943GLQThv3mlrUzvG3gk+rLdGJvIszajOrOV6raAlbRrpwdl0UmM6EFdwwIBCnu6895Bkmx3yGCGVDSiW3+QkmDGO2D2Kkg7E0mwlfcOcnwpbvzOIWhmP9n9jI8P2pFZz++4vV4DGEE\/vmFHOEk3Ghkhmnsbz3w+rn7JCwTKIbSJacW5Xz1T4yYw2N4JR74ZTBYZ2tziVIjzG+FnVqvvNoJF4bm9BD\/HmcPLQxNrljnKzOXomeWz5mvHcv6gq\/rk5xnE\/x1niWqKgKyKkiJjq5vXzoEM9COeLb5i40mRbUPPuGnQviKNVIIX7o7v7gwBAAAAAAA9wWEIQAAAAAAEEAYAgAAAAAAAYQhAAAAAAAQQBgCAAAAAAABhCEAAAAAABBAGAIAAAAAAAGEIQAAAAAAEEAYAgAAAAAAAYQhAAAAAAAQQBgCAAAAAAABhCEAAAAAABBAGAIA+k\/LoJMdnRYnRyghvyQ\/VxMvvv\/5s0br4vgM5b\/7rnUwaHuJlxmi9SPV+XvkskK5lTkaS5r1GUimKPW3Tl8awRf9Nw\/W2D2H3dcju2\/w69PONi9LNM+Pa2t02PRda9Oq08Zzfv0CFS8V5+8Ro16m9b\/TlNTM+0mMpGl2ZYuqN\/6yt3T4TqOB6QKdeY5bPLL7fkggDAEA\/eUHa2z\/0igxuUK53QZd3Rhk3FzT6UGJ1v+tUFOU4wIpTVPTGqXyjeBncL4XaEqboan0wwqks89vaWxwmGb1ElW\/83thfK\/Tdk6n7YC4M+jLqyEafT5OU4Vz3znO47lv8OsTyzaFQGL2ND1EmW\/BjgxHdGamWZkHFUi3dJKdoYSWZh3IfTq9NO\/nqlGhor4VFHfGV1oeHGe+FtLJejT3\/fBAGAIA+sgtVfVxGpjQqfpDdd6GC6Rx2sjqlHiepZNWsMxZYYZGN7MiwxYukK5pW2dB8NhQnHOp\/stE6sE5NRXfE4kILhrNl1QiT8FNmRYHV2h7N8sCFruvQJle3Td48sS1TVFuhdncAg0sla2MvYyZeVtkNjcfJZAuy7Sul+kkkLmTieePKppHOo0OppjNq0WcH2NniQZelWlvk4nDbD1Yplf3\/QSAMAQA9A8hjDTKHLRr3M0h1fUKH8phQunYf75B+TQ\/XmkrkIx6iTLTw\/RsjgWkekhAuqzQxsIIPeNZzINrdRkFJyzohA5VKbgqsSD06isZYohKdV+9u2\/wtIltm0IgMeFzzH1zibb9wq65Txl+\/NgqFyaQ+PSQ0hpNJXmGkglEQ1GGEcsfA5jTJxLv7BGFdlxT8eUQLX9mn39sdcL8naxe3fcTAMIQABAg8887+kP7U8D\/VpWJQ\/PbGg0M6nTYNjNnCSQmfHiAS+g173m7sZfKec4rMFgAWJ\/jASlLew11QGpeVCj3Ks0E4lvKH7UTiFykDdFsMWa28Oc55addUXySVdxXH+4bPC5642sd2KYtkC5N8TVf8tq9mXljnRmnnHStCmv+8CwXiJv7dBomEGP4o4MQaczeK4pzKsR0C3vuIO9kaUFf6fV9\/8ZAGAIAPPDgJCatS3QbsETG7EUpRoZNEj51JoZ8E8S5aDLn6HUukMTkdTsgfQ\/JXPIJ+7ZArIUJROu74warRoFSmk5VWxR7gpdN\/+4b\/Pr0ztc6sE1J+BifV3xZRi6arM5MpwLJJxDPQqaOxPNH\/t1zVLxQnFNwmk97OlV8+kUg29iv+\/4NgTAEAHjgmQt\/sOLHVGXb0ZUwFNkPafi5WaGMZk8o70Igta6pWtKZKGMBK2z+FQtqp7tbtDihUUqvKOYfcToIvgwu6pLv963FNpwabfwf\/8T3Pt43+OXpna91YJuy8BGZOWmxhtx56UYgXdao+J6JsiQTdaoFIJw4\/tiJMBTTNEZo\/du15WeMoyyNDa7RntwJ6+d9\/2ZAGAIAPPRSGHYzlMz\/5z1+MazD\/hYrBZ3J4h0IpJs6besLlEzyVY0VOvNk6iya53SYW3HnSUVOpO9guM7Z9kKBZ+J7H+4bPBp652vdDCXz\/80FF\/ZiDXOhk7VwowOBJIaJnTm7IYu64vijTSdDyXy6he8Z2izuSEPWfbjv3xUIQwCAh14OJZuNrGpRhR+f8BHX8Qni5nYvbgPfXiAZjX1zWHhkgdZ36mSoghTPbOhz9Cw50z5ISVR1LWRFoxch6tIFOvWfc+7LPta7+waPj176WlzbDAifI3tFvG8BlL+cHyvLvjw5TMmF8JXHsfwxgLmYxBFroZgCT7XVkxitkJ9Hr+77CQBhCAAIwIMTz1xwuhaFAi5wWMB6WaKzyIDgFz7mBPHF3JbY7uWLM6G9nUC6pu3VNcofRW9FU80u0MZuI2aQkqjzIapxWq+EzI0S3NLe6lDIvoXmfbnnenXf4LHSM1+LZZsMv\/CxhNGH3CfvlkrtBNJlmTKrBapeRH1fPH9UwecBJvj3Rw0n+4eEZcSOCNK5Xt33EwDCEADQXy6+0uuJIUrwhR0H9gbXBp0d71PxW5hAYoGBrxJkx7yTyB9aIFmb7vJNhDfLdGJvInzZoOrOV6pyIecPSD7EfTkT3x\/LfYNfnxi2ycsphA+fD8ttztOZeWiB1DqnL29SNKCl6XWh4mxwzTfs3ivtC\/\/x+pIfXyfssdz3LwCEIQCg\/xgN2ttcotSIJhpi55V4O+HC0HyTgbQYI6zcA3B1VKDMXIqeiXthiNeOZUXwjQ5WDOsNDRt1\/v\/jum\/w6xNlm6KMSvjwFfH+zsyvIJDEcHVWepWm\/Uq8MvMvf\/Y9iFh9bGcDH9N9PzAQhgAAAAAAQABhCAAAAAAABBCGAAAAAABAAGEIAAAAAAAEEIYAAAAAAEAAYQgAAAAAAAQQhgAAAAAAQABhCAAAAAAABBCGAAAAAABAAGEIAAAAAAAEEIYAAAAAAEAAYQgAAAAAAAQQhgCA\/tMy6GRHl16Gr1Fyco6WczUy\/GW\/F2iKnc8c3HqPW1R182X6kS\/P31kSZQb0mvL8vdG6psPcCs1ODJv1GRymsfQSrX9uUFOUqdG6OO57kb8Hg7aXzHteP1KdB0DiskK5lTkaS5o2M5BMUepvnb40LH+6LNG8sLkgD2JfrL4bf6fomVWHxEiaFlfLdNJk5470QB29LFDx0vd54M5AGAIA+suPOm38pVFicoVyuw26ujHIuLmm04MSrf9bsQSSy0l2nEafj1PiXfAchwvD1PQMJdIFOlWc\/\/nznPLTGk1Npx9WGF58pdcTQ\/RsTqfi0Tm7Z37f50wgb9H6ji1quTBMs7pqlMo3vNfbcKGszdBUGsIQRHP2+S2Nsc7HrF6i6ndub4zvddrO6bRtdzyEMJyjfN06L9FseT+v71yWaV5jvvpxn04vzTqcHZcp\/75s+nbrVqpfnfIvhmg2X5eOPUCdnwAQhgCAPnLLhNw4DUzoVP2hOu+jxUQkE4Ubu2VaHFyhL0awDBeGo5tZWtdYuePgeSGknmdp4\/1QpDCs\/suE6sF5dGCpbdFyrkJnPHuhOh\/KNRVfDlFioURnkYGLC0N2H1mdEqzOJ4qyZ4UZ834HIQxBBELwaTRfCs+kC0S5DjJtcXyACbx1vUwnN4pzEVz9t0ADoR08P6ZPzZeuFedAL4EwBAD0jxsu8MKHhQMcWQLJGj5d3DECZcRQsl6hk81xJpjqgfOn+bQ4fijKRWQM+RDWwgg945nMg5Bgw4eCNxcomUyL4HgVNztxnKXRyOFhG3Moeb1iCeKA0G1QPs2PVyAMQSTcHwamC3SmOOehU2EYxwf4VJHSGk0lebaSCURFh07FVQnC8FcEwhAAECDzzzv6Q\/tTwP9WlYlD89saDQzqdBhLUN3S4TvNmTtofF6hgZcluvKVM4UhE3xcfGk6VeXPtjOOdamcdK2K5kWFcq\/STCC+pfxRSNBpnou5gikWHF8Xam0FIhenAy9K7YO0LQyZ4OOBPeGvL79HIZTdcp7z4NHTG1\/jHYghmi22yRZyOhWGNnF8wJpLPMsF4uY+nbYTiNZ84nk+PNy2jYAwvC8gDAEAHnhw8k\/y7jZgiYxALIHEaO5TRg5YzQpltGDWzRV8XAT6spFcSFlZk7jC0IFP2rcFYi0igxhDIIrvfl9RnvMiCb46F7prdCgN2XGxaAplCMPfkd75mp15Vp3zETrHMGZWP44P+ATiWcQ0EqO2xcqxe0\/O0HIuSkxCGN4XEIYAAA88c+EPVvyYqmw7OhGGYiXxywKdOoHqnLZXhgKLMmTBxzNz7iIVb8axY2HIgtnp7hYtTmiU0ivB1dIWRmOfcn+nKDGp02FIEOtKGIqsjyR0PcIYwvB3pHe+1qkw9H6niU5VVXkFcXzg52WNiu9nKJGco2K7KRWW7y1P89X7w7SonCcJYXhfQBgCADz0UhjGH0p2t2QJ4FuU4RF8YijKWqQihNQSbVsT4GMLQ2uIzJkfpZpA37qlswMzcPFVxtvHwbmPMt0MJfP\/+UKTgVdfhShtHqxRYqlsCVQIw9+R3vnaPQwlx\/QB47hM687c3TaLuxRc7a7R2GBKTAfxnoMwvC8gDAEAHno5lGwGoZDVwzJC4K3Rnn\/lY4sJIt\/qY6\/gM4MFX6Qi5iQ6QiqGMOQZDX2OnokhrJBVl61rqpbMIbGplS06vOhgEc2gK1LD8Qk+8bz4dQZ9eSUvvoEw\/B3ppa9Vdc1j\/6F0Kgzj+ICd8ZscpuRC+45TNOdUfKESgBCG9wWEIQAgAA9OPHPB6VoUCrjAYQHrZfS2Ld4hYS9iUYZ0zi\/4xBD00hblloZo+bMbkNoJw2p2gTZ2G9GT3mtZmueT6DvchkMsgpkYotH36nty8Qs+azV2bsu3XQ+E4e9Kz3ytnqUx1glbr7TpvHQqDOP4wGWZMqsFqsbtOEXRalAu7fVlEwjD+wLCEADQX6yNnhN8UceBvcE138h2n4rfzk0R5V9EIiNWH7uLMgKCT2yJw475Fm60zRj2mSar95TGN7jO0vaxvcH1NZ0elenLUXgm0H5ri1coQxiCdtzSSXaGEnyD680yndgbXF82qLrzlap2J6PboeQ+wDORxd06nVltgvG9Rvk3KRqY+ETVQAYfwvC+gDAEAPQfo0F7m0uUGtGsITPrlXj8DSA+4ReEC0c3gxAUfOawqz\/j+NDCUHDJAt2q9Hoy65V4GxHC8KfxlZYDez9CGIJ4XB0VKDPnvmLOfCVe9pcUhmdf12gx7a3rYug+iBCG9wWEIQAAAAAAEEAYAgAAAAAAAYQhAAAAAAAQQBgCAAAAAAABhCEAAAAAABBAGAIAAAAAAAGEIQAAAAAAEEAYAgAAAAAAAYQhAAAAAAAQQBgCAAAAAAABhCEAAAAAABBAGAIAAAAAAAGEIQCgj9Ro3X5BvkViJC1elH\/6Q1VuhvLf5eMyBm0vmZ+xfqQ633+uSgueexkYHKaxuRXKVdwX+1c\/ajSwuk9N6Tr32gUqXnqP83v\/oA3R8mfDdxyADmgZdFJao6kRZn+SbX74xm3zmoovZbtVoNeCn3lPGPUyrf+dpiTzA14X3kbMrmxR9cY8H\/Q7G52qvs8CdwfCEADQR0zBl9k1yLgxuWrs04e\/NEoslOnKUy5NU9MapfIN6XqJ7wWa0mZoKv3AwvBFgU6sezFuzqlaeEtjgyn6ULsVZZrf1mhAYwGrJV9r0JdXZjALCMBGgVJKwQhAXG5ZhyRFAxNvKX90btrmZYMOS58od2DaW9NwfdDYZTY6uEZ7jh0zPB21++KWTrIzlNDStJzbp9NLsy5XjQoV9S06bJrlgn5nY\/oc6C0QhgCAPmIKw4CQE2IoTfmGfYyXG6eNrE6J51k68Ygqk7PCDI1uZtWf53BN27pO28fR2bfqvyssYJ5TU\/E9UYgA9bIkCVrOLe2tMtFnZwmvyjTvuTdGc58yTPxtbLLrfdlE4\/MKDaQLdCodA6AzzKxz5ltMoXSkx8u2XZZpXS8zQaY45xDP51Q0WT1GWadq\/Si63mq\/A\/0CwhAA0EdChOGPfXrtOW6Vq9Rp4zkTiMdSWUGD8ml+vNJGGPJhqRJlpofp2RwLVvWQYHVZoY2FEXo2yQWiOwzcjrAAdfpvSjrO6zpE8\/9Jn8sCoBC8XBB7sommqEw84DAe+B0w\/afnwtAenk4O0ywXiIaiDCOWzwUwp4Yk3lUC0y78QBjeLxCGAIAAmX\/e0R\/anwL+t6pMPEKE4f+2xPDp9pV9zC13sjkeFErHWRrlwirs8xQYx2Van+PBKkt7DXWwal5UKPcqzQQiH4JrLxBDM4ZvWID76Nb5JDvuyQzy\/817soRv3b6W\/99BQAe\/Hb3xtVs6fKfRwMQa7cWZkhBXGNpwgbij0ywXiJv7dBomEGP4nIPIovPOoOKcDwjD+wXCEADggQcn\/yTv7gOWlcnwzDEsU2ZiiMaYkHIzBZLgqzMRqK0584s4XCxOFc695ZxroxET2+1g9T1EgF1KArEWLhBFgPLPMcwuUEJjIlcKyGKeoRCy\/H8zg2iLv6qu0Wi2bpa9KNGsRyCDp0RPfa11Ttv\/X5oSgxolF3QqRnV0OhWGNj6BeBYyLzGez5VofnCOiheKcz6CfmfxIPMif38gDAEAHnjmwh+s+DFV2faYQs77eWlaFyslg+VMwceFlEaZAyugNCuU0ezVyp0Lw5+ta6qWdJrSWDArcXGpKmPQ6e4WLU5olNIrZKjKMESA8tzLECWXWMDyZ1CMr7RszzMUAXCFvlhlhGi05hRifuHTpre+ZtK8qFFRXxArfBOTn+hQld3rVhhyLtnnv5+hRJKJurAdBOL4XKfC0PecBJiC0RcgDAEAHvohDB0h16rTxsQQzZeihKG50GTg1Vch0JoHa5RYKltirQNheFOnbR4gk3zFY4XOpAykQ\/OcDnMr7hyqyEn2wSEtLuwSz1mADXy2mSXkK5CF+JOHwYRoNFchH74fcrOH4MnRD2HoYNQpv6BRwvIjz7kuhKEYJnbm5YYs3IrjczYYSv5lgTAEAHjox1CyLOR4xiyhrdGeYh9Dp5zIJizR9o25zcvijj1fqb0wNBr75rDwyAKt79TJUAUwnvXQ5+hZcqZ9AJMIBKgWE4DTQzSl2GJHzDN8X6FD3b8Fj7mn3PLnmmeIGTw9eutrCiohArCDxSc8k748OSyGp8NWHsfyuQCmH4xutu8YQRjeLxCGAIAAPDjxzAXnboFKJeSsgKCHzDEU\/5srFhdzW7QoDcO2F4bXtL26JvZyi9qKhs8L3NhtxAxgLqoAZW65odiHkAflF2uUeSEvNjE5zacp8eYtLXvuDTxFeudrQZq7b6W5rhJxheFlmTKrBapeRHVe4vmcCpFx577TZjgZwvB+gTAEAPSRECFXz9IYf8uJZx9DbzljZ0lkULzbWbQThv1FHaB4VlOjhP9tJ2LIeEix2TVDLLBh12B+IegFV\/u0kStTtXFtLcy4ptPdTzTFbMyzbZLNXeYY9pLWOX15k2I+kqbXhYqzwbXxvU57pX06s8pBGN4vEIYAgD4SJuT4\/n2a1NgryglhJS1CCSt3j4QGqEaBpgbHWb3kup5T8QUThorX4\/1ssfvQML8Q9AijRrmVOUo5r8PTKPlXxB6dv4ow5Ijh6iwtTo5QQtSddQbFK\/HKEIYPBIQhAAAAAAAQQBgCAAAAAAABhCEAAAAAABBAGAIAAAAAAAGEIQAAAAAAEEAYAgAAAAAAAYQhAAAAAAAQQBgCAAAAAAABhCEAAAAAABBAGAIAAAAAAAGEIQAAAAAAEEAYAgAAAAAAAYQhAKCP1GjdejG+DX9B\/qJeptMfVpmrMs0PpinfkK9jtNi1Giuv17zHGVf\/LdDA8yyd+I73ncsSq6v3fp5NzNFyrkJXLUU5bY0Om9JxmVadNp7zz1ig4qXiPAAdcFViPuGxzWEam1uhXOXaKVP9qNHA6j41pevca1V2WKMPzAeXPxu+4\/0nzv2oy9noVJXKgfhAGAIA+ogpDDO7Bhk3JleNffrwl0aJhTJdiTINyqeHaL7kbfB\/1rM0yhv4gAC8pb1VtWDsO0LwzVG+7t7P2VGBXk8M0djHmhtwRbkZmppm9\/7tNvg5jObBGiWmWRkIQ9ADhEB6UaATyy6Nm3OqFt7S2GCKPtRMG2x+W2OdFSaY5E7MT4O+vDLFVEAANgqUeiD7jHM\/6nI2ar8D7YEwBAD0EVMYrh\/5jouA42YJVZmM03yaEh+z9EHzZxPNTFuY4Kr+u0K5g3NqeoKfj9qWyPKdhWXzwhCCLxgoRcAdXKM9+\/NEuRXayLKgtVQmQyprckuH7zRa3MwqPw+AThEC6WXJ6mzZmJ0ox7dU2fnmPmWYDW5ssut9Pmh8XqGBdIFOpWMu17St67R9HJ1NjOWPCmLdT2g5cBcgDAEAfSREGP7Yp9fScTOT8Uka+rmm4kuewbgWgcCTTWyXxbis0MbCCD2b5AHJl4W0aV3TIQuEyWQ6OAwcRYgw\/Pm\/LRqTj9vljsu0OLhE2zdSWY4Ixuz4ccjnAdAhYQLp9N+UdNzKzv8n+cWRTgmeled+5ckmts\/MG\/USZaaH6dkcE4j1EIEYxx8VxLsfCMN+AGEIAAiQ+ecd\/aH9KeB\/q8rEI0QYMiHFxd32lfW\/8ZWW5UyG+N8UTCJr8eqrk3WLzmK4NC8qlHuVZgHpLeWPQgJS85wOcyuUYgLxdaHWXiCGZQx333qFrVPOoO2l4DC5sbNk3lOY0ARPhl75WmiG7Q0Tdx9dcXeSHfdk3Pj\/pvjjmfhx2qjb10Zn5mUM1gFan+MCMUt7DbVAjOWPEnHvB8Kw90AYAgA88ODkn8jdfcBSzTEsU8Y\/J8\/KZNhznEQG0RZ\/Qjyt0BfDLHv43hsY2nIpBaRaSEDiGcQ4AlHUxT\/HMEvzmubNwkiCTwjZ6QKdOZ\/DxaJGmQMWcCEMnzS99DUhkPxz8rILlNBYB0yyL+Fbzrxd0+9s8VfVNRrN1s2yFyWaZbbpdN5iYNQlgfg9RFDG8UdG3PsJlrOwF7eBjoEwBAB44JkLf7Dix1Rl22MKQ+\/npWn9WzAgyJkMT4DyBK\/4WQyHlkGnu1u0OKFRSq8o5vuZGI19yv2dosSkToeWCA0ghJzvfv7fJSEUg+UswSeGjWco\/906971AU\/ZqZQjDJ00vfU0IJN9nJZeYYPLbspydF\/bndrrkDlnczLwH1sGqlnRm38M0WzoPKRPPH+Pej6qc4CEWp\/0mQBgCADz0Qxg6Q8l8i5YJxQpkhpvJ4OJP8ww\/O8NdIovhBrJIrGHiqSQLUnqZTvzz\/DitWzo72KJle55Um4n0ASF3w4KsNs7q6hOqnnLmQhNb6J4VZmh00xK9EIZPmp4LQ2lIlQu7xHOdqoEFVm52Xog\/eRhWmsLBM\/Nu56wNN3Xa1t05u8pFXXH8USLu\/fjLgbsDYQgA8NCPoWRZ5HEBmNDWaM8\/1COC0hwVK1wsSSt8OdYE+ao8xBzGZY2K+hw9S86EBykrszHLgtTUyhYdXsTMQCqE3Gl+RgwVn8rDz\/5y9gR\/sXfhOG0ch5QDT4qeDyXLAqnFBOD0EE3lG4GyIjv\/vkKHukYpz3l70VfNM8Qchsiy82HhkQVa36mToZqCEccfFcS9HwjD3gNhCAAIwIMTz1xwuheFHNXiEzP4jOryHEPOORVfsGD0jok\/abGJwNpS4\/Wb8bZZDD4PaWO3oQ5SNrUszW\/u02mbrEUAlZBrsnt87suC+stZgvBD7hONOvO7FOXAk6NXvqYSSE3WIRlV2VdFp4EXa5R5IS82MRHbRL15yzpp7TLz17S9ukb5o+itaGL5o4K49wNh2HsgDAEAfUQlDBn1LI3xeXee\/QmtTAYrHxxq5pvwapTQOpxf2GtChJwY5pKzoIpyJ5vmvU0VpLlXEIagR6gFkuU3vv0Jzez8kGKzawbfWF5j13Q6v7DHxL0fCMPeA2EIAOgjIcJQ7JGmBRt0nsnwb8BrIQJA3PmF\/SJMyFnDXE4WVFVOvMlFWoQSVg6ALggVSI0CTQ3658Ga2Xn\/htYC61WUsecX9om49wNh2HsgDAEAAAAAgADCEAAAAAAACCAMAQAAAACAAMIQAAAAAAAIIAwBAAAAAIAAwhAAAAAAAAggDAEAAAAAgADCEAAAAAAACCAMAQAAAACAAMIQAAAAAAAIIAwBAAAAAIAAwhAAAAAAAAggDAEAAIBHzlVpgQYGhySGaWxuhXKV6zblbHSqSuXuhxqt++qRGEnTol6m0x9WmasyzQ+mKd+Qr2O02LUaK6\/XvMcZV\/+xe3yepRPfcRAPCEMAAADgkSME34sCndwYZAjOqVp4S2ODKfpQu40oZ+OWuT9MYZjZdetx1dinD39plFgo05Uo06B8eojmS16B+7OepVEuJgMC8Jb2VtWCEcQDwhAAAAB45AjB97JkiSkbUyQNrO5TM7JcBLUtWs5V6KypOGdzWaZ1vczEpuJcJKYwXD\/yHW8UKCVlCasfNc89cE7zaUp8zNIHzZ9NrNPGcyY2vz2E0P09gDAEAAAAHjlhgu\/035TneMfCsHVNh5sLlEymhUC8aqnKGHRSWqOp5DDNcoFoKMooCRGGP\/bptXS8+W2NBrRP0lD3NRVfDtHy52shfD3ZRCEqF6h4aZcFnQJhCAAAADwQmX\/e0R\/anwL+t6pMHEIzhm+GKPHRHVbtWBjaNM\/pMLdCKSYQXxdq4QJxR6dZLhA39+m0rUAMEYb\/2xLibvvK+t\/4SsvyPEPxvyn+jM8rNPDqKxnWteL\/dIFOrf9B50AYAgAAAA8AF4LywgtOt+JQCD7\/HMPsAiU0JrCk7FmwnIW92KMdPIPYoUA8C\/1s1RzDMmUmhmiMiVl36NicZ7j82RD\/iwyiLf4uSzQ\/uEJfLBF6+N4rhEHnQBgCAAAADwDPEvqFIT+mKtsOIfh8n5VcYgLQl7VTlRN0sFjDaOxT7u8UJSZ1OgzLCl7WqPh+hhLJOSp+V5wXmMLQW5c0rX\/zLTRhnGTHnXmGVV2j0WzdOmeKRnNOIeYX9gIIQwAAAOAB6LkwlIaI+ZBq4rlOVd+iEX+52LRu6exgi5anh+nZnE7bx2b2zo9xXKb1hRF6NrlCuYNzaqoyig6+oeQWE3YTihXIDJElFCuQufjTPMPPXDSKVcgXJZqVsoegOyAMAQAAgAeg50PJsuBrNSg\/PURT+UZ0uXa0rqlaMoeFp1a26PBCkY1rGXS6y0Tj5DAlF8JFY5DgHEMuABPaGu35h5\/FvMI5Klb40DE7LwveI52J4CxV5SFm0DUQhgAAAMADwYUgzxJyuhWFHJXgazLBNOpboduxMKxlaZ4vJInaiuayTJnVAlVVojES1eITc8XxqC7PMeScU\/EFE87vmPiTFpsImvuUYff5+s24NMQMugXCEAAAAHjkqAWfQV9eaZS4yz6GfUUlDBn1LI0NzgTediLmGbLywaFm6z41zC\/sBRCGAAAAwCMnVPA1CjQ1OM7ElymYHoUwFBtza8F6VnQmDBWvx2OI+8L8wp4AYQgAAAAAAAQQhgAAAAAAQABhCAAAAAAABBCGAAAAAABAAGEIAAAAAAAEEIYAAAAAAEAAYQgAAAAAAAQQhgAAAAAAQABhCAAAAAAABBCGAAAAAABAAGEIAAAAAAAEEIYAAAAAAIDxk\/5\/lPyKC2DzfGgAAAAASUVORK5CYII=)","1a29711b":"Logistic models without any Regularization or hyperparameter tuning is givings us :\n\n1.   Train Accuracy 0.6685673556664291\n2.   Validation Accuracy 0.6366803927779537\n\nWe did perform Cross-validation and Lasso Regularization on a Multi polynomial Logistic regression of various degrees added with GridSearch for best resuts as well, however, we only saw a difference of about 5%. However, it took nearly 5-6 hours for training. Thus we decided to choose a Sequential model instead.\n","56da9839":"# **FIFA 20 Player Position Predictor**","bfd7f98e":"We can see that in our dataset ***CB*** is the most occuring position followed by ***ST, and CM*** and so on.\n\n\n\nWe did some digging that how player positions are divided into groups of:\n\n\n1.   Defending Positions\n2.   Midfield Positions\n3.   Attacking Positions\n4.   Goalkeeper Position\n\nLet's also look at how these positions relate with all skills.\nFor eg. Midfield Positions like (CM, CDM) should have a balanced over all stat, while Attacking Positions like of a strkier(ST) should have high Attacking stats.","a9b07dfa":"Before, regularization we would first check our model on whole 2020 dataset to see how it performs.","2b0a89ab":"As we can see even though our test accuracy increase, our Validation Accuracy starts decreasing. There is a possibility that we might be over fitting our data.","b26a8118":"This correlation matrix gives us an idea about various attributes of a player are related. We can that attributes like dribbling, passing, skill_moves and positivey correlated. However, skills like shooting and defending are negatively correlated","10d5fd98":"As it is evident, strikers have strong attacking attributes while low defence. Center players have an overall balanced stats while defensive players have strong defence compare to others.\nWe can also use these implications to possibly do even more fine tuning to improve model.","6a2c40d9":"When we look at these three plots, for 3 positions, Defending Positions, Midfield Positions and Attacking Positions we can clealy see how player skills are mapped with Field's position. We also notice:\n\n*   Ratings given are not on a unique scale. Some rating stats are on a scale of  0-100 while some are on a scale of 0-5 on basis\n*   A Forward player will have lower Defese ratings and vice versa also hold equally true.\n* There are some outliers present in our data.\n\nTo resolve above issues we will perform Normalization.\n\n","c3a95283":"# Testing on Year 2020 Data","ac7380f3":"**Now let's test our model on specified clubs**\n\n***Test Set:*** Players from the following Clubs :\n\nFC Barcelona\n\nFC Bayern M\u00fcnchen\n\nReal Madrid \n\nParis Saint-Germain\n\nJuventus\n\nAtl\u00e9tico Madrid\n\nManchester City\n\nLiverpool \n\nManchester United","f5a5ab67":"Let's test our model on entire 2020 dataset first and then we will test it on the given clubs specifically.","71327faf":"We can see that there are so many variables that might be important but does not play a significant role in predicting positions.\nWe will consider only the attributes that have stats needed to predict the position.\nWe are prioritizing Attacking followed by movement followed by Defense followed by mental capacity while considering their accuracy, effectiveness and range in  that group.\nThen we are considering players mental and innate abilities. And At end we keep Player positions. \nWhile looking at the data we  can clearly see that the goalkeepers have different stats in constrast with the rest of the players. Either we discard them or we can create a seperate model just for goalkeepers.\nFor now, we will be removing Goal Keeper position for obvious reasons.","5292f130":"We can see that some of the stats have are in form of mathematical exression.\nWe will perform the mathematical operation for all such instances and consider the value we obtained.","516f9d5c":"We can also see that a player might have multiple preffered positions. It will generate un-necessary noise while training. We looked in the dataset to see which position might be the best choice based on stats of each position. Turns out generally they have same stats.\nFor simplicity, let us take the first value from given choices.\nWe, fully understand that this will give us a result that does not have multiple choices. We will try to figure a way to include that in our model as well.","d8aa8ac0":"# Can a professional defender become a forward?\n\nNo, as we saw earlier attributes are mapped with player position, forward players have weak defense while defense payers have weaker attacking skills. So, No professional defender cannot become a forward.\n"}}