{"cell_type":{"1852f2ad":"code","7799ce4a":"code","89026038":"code","700c5093":"code","f0b7edfa":"code","0b0ac413":"code","f025b879":"code","737139ef":"code","5cad161f":"code","7a20267c":"code","3181e019":"code","afcc80cf":"code","85a688ed":"code","668dd4d1":"code","2d75e417":"code","5a0d1c51":"code","64e87ea9":"code","8bf7d794":"code","ab102597":"code","81b4ba2c":"code","83bf438f":"code","d0ffad2a":"code","568c6c32":"code","0c08ef30":"code","327eb430":"code","d2644d52":"code","d9b68584":"code","528733c3":"code","f2808031":"code","224f2c8e":"code","e3010450":"code","30f3b051":"code","fcd790cc":"code","ca2e2858":"markdown","45707c52":"markdown","89a4bbf9":"markdown","c24d6856":"markdown","9e40673a":"markdown","69d466aa":"markdown","0c1640cf":"markdown","70da0101":"markdown","115ea1e4":"markdown","b264e874":"markdown","00fb357d":"markdown","8baa33a5":"markdown","1f53e195":"markdown","b48972e0":"markdown","c4877f7f":"markdown"},"source":{"1852f2ad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# !conda install -c conda-forge basemap-data-hires --yes \"You should install <-> !conda install -c conda-forge basemap --yes\"\n# and !conda install -c conda-forge folium --yes\n\nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# !conda install -c conda-forge basemap-data-hires --yes\n# !conda install -c conda-forge folium --yes\n\n# !conda update scikit-learn --yes\n\nimport folium\nfrom folium.plugins import HeatMap\nimport webbrowser\nimport matplotlib\nfrom pandas.tools.plotting import scatter_matrix\nmatplotlib.style.use('ggplot')\n%matplotlib inline \n\n\nimport seaborn as sns\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler,PolynomialFeatures\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n# Any results will write to the current directory are saved as output.","7799ce4a":"df = pd.read_csv('..\/input\/kc_house_data.csv')","89026038":"# Observing Data","700c5093":"# Creating the dataframe for the 1000 most expensive homes\nmost_exp_df = df.filter(['price','lat','long', 'grade'], axis=1)\nmost_exp_df = most_exp_df.nlargest(1000, \"price\")\nmost_exp_df[400:600]","f0b7edfa":"df.head()","0b0ac413":"df.dtypes","f025b879":"df.describe()","737139ef":"print(\"number of NaN values for the column bedrooms :\", df['bedrooms'].isnull().sum())\nprint(\"number of NaN values for the column bathrooms :\", df['bathrooms'].isnull().sum())","5cad161f":"mean=df['bedrooms'].mean()\ndf['bedrooms'].replace(np.nan,mean, inplace=True)","7a20267c":"mean=df['bathrooms'].mean()\ndf['bathrooms'].replace(np.nan,mean, inplace=True)","3181e019":"print(\"number of NaN values for the column bedrooms :\", df['bedrooms'].isnull().sum())\nprint(\"number of NaN values for the column bathrooms :\", df['bathrooms'].isnull().sum())","afcc80cf":"\nsns.boxplot(df[\"waterfront\"],df[\"price\"])","85a688ed":"sns.regplot(df[[\"sqft_above\"]],df[\"price\"],data=df,ci=None)\nplt.ylim(0,)","668dd4d1":"df.corr()['price'].sort_values()","2d75e417":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\n%matplotlib inline","5a0d1c51":"lat = most_exp_df['lat'].values\nlon = most_exp_df['long'].values\nprice = most_exp_df['price'].values","64e87ea9":"# Draw the map background\nfig = plt.figure(figsize=(8, 8))\nm = Basemap(projection='lcc', resolution='h', \n            lat_0=47.56009, lon_0=-122.21398,\n            width=100000, height=100000)\n\nm.shadedrelief()\nm.drawcoastlines(color='gray')\nm.drawcountries(color='gray')\nm.drawstates(color='gray')\n\n# Scatter price data\nm.scatter(lon, lat, latlon=True,\n          alpha=0.5)\n\nplt.show()","8bf7d794":"df.corr()['price'].sort_values(ascending=False)","ab102597":"\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression","81b4ba2c":"X = df[['long']]\nY = df['price']\nlm = LinearRegression()\nlm\nlm.fit(X,Y)\nlm.score(X, Y)","83bf438f":"lm1=LinearRegression()\nlm1.fit(df[[\"sqft_living\"]],df[\"price\"])\nlm1.score(df[[\"sqft_living\"]],df[\"price\"])","d0ffad2a":"features =df[[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"]]","568c6c32":"lm2=LinearRegression()\nlm2.fit(features,df[\"price\"])\nlm2.score(features,df[\"price\"])","0c08ef30":"from sklearn.model_selection import train_test_split\nprint(\"done\")","327eb430":"features =[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"]    \nX = df[features ]\nY = df['price']\n\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.15, random_state=1)\n\n\nprint(\"number of test samples :\", x_test.shape[0])\nprint(\"number of training samples:\",x_train.shape[0])","d2644d52":"from sklearn.linear_model import Ridge","d9b68584":"Rige=Ridge(alpha=.1)\nRige.fit(x_train,y_train)\nRige.score(x_test,y_test)","528733c3":"pk=PolynomialFeatures(degree=2)\nx_train_pk=pk.fit_transform(x_train)\nx_test_pk=pk.fit_transform(x_test)\nrig=Ridge(alpha=.1)\nrig.fit(x_train_pk,y_train)\nrig.score(x_test_pk,y_test)","f2808031":"# Level 1: My initial, basic map in Folium!\n\n# Creating the map, focused on the average of the lat\/long values in the data\nm1 = folium.Map(location=[47.56009, -122.21398],\n                zoom_start=9.25, prefer_canvas=True)\n\n# Changing the background map type\nfolium.TileLayer(\"Mapbox Bright\").add_to(m1)\n\n# Adding each home as a marker to the map\nfor index, row in most_exp_df.iterrows():\n    folium.CircleMarker([row['lat'], row['long']],\n                        radius=1,\n                        fill=True).add_to(m1)\n\nm1","224f2c8e":"# Level 2: The same map, but now with popover text\n\n# Creating the map\nm2 = folium.Map(location=[47.56009, -122.21398],\n                zoom_start=9.25, prefer_canvas=True)\n\n# Setting the background map type\nfolium.TileLayer(\"Mapbox Bright\").add_to(m2)\n\n# Adding each home as a marker to the map\nfor index, row in most_exp_df.iterrows():\n\n    # Adding popup text, so clicking each point shows details about each home\n    popup_text = \"Price: {}<br> Latitude: {}<br> Longitude: {}\"\n    popup_text = popup_text.format(row[\"price\"],\n                                   row[\"lat\"],\n                                   row[\"long\"])\n\n    # Adding each home to the map\n    folium.CircleMarker([row['lat'], row['long']],\n                        radius=1,\n                        fill=True,\n                        popup=popup_text).add_to(m2)\n\nm2","e3010450":"# Level 3: The same map, but now each dot corresponds with the price at which\n# each home was sold (bigger dot = more expensive)\n\n# Creating the map\nm3 = folium.Map(location=[47.56009, -122.21398],\n                zoom_start=9.25, prefer_canvas=True)\n\n# Setting the background map type\nfolium.TileLayer(\"Mapbox Bright\").add_to(m3)\n\n# Adding each home as a marker to the map\nfor index, row in most_exp_df.iterrows():\n\n    # Adding popup text, so clicking each point shows details about each home\n    popup_text = \"Price: {}<br> Latitude: {}<br> Longitude: {}\"\n    popup_text = popup_text.format(row[\"price\"],\n                                   row[\"lat\"],\n                                   row[\"long\"])\n\n    # Adding each home to the map, but this time the radius of the dot will\n    # be proportional to the price (divided by 1 million)\n    folium.CircleMarker([row['lat'], row['long']],\n                        radius=(row[\"price\"]\/1000000),\n                        fill=True,\n                        popup=popup_text).add_to(m3)\n\nm3","30f3b051":"# Level 4: Changing the color of each dot to reflect price buckets\n\n# Creating the map\nm4 = folium.Map(location=[47.56009, -122.21398],\n                zoom_start=9.25, prefer_canvas=True)\n\n# Setting the background map type\nfolium.TileLayer(\"Mapbox Bright\").add_to(m4)\n\n# Adding each home as a marker to the map\nfor index, row in most_exp_df.iterrows():\n\n    # Adding popup text, so clicking each point shows details about each home\n    popup_text = \"Price: {}<br> Latitude: {}<br> Longitude: {}\"\n    popup_text = popup_text.format(row[\"price\"],\n                                   row[\"lat\"],\n                                   row[\"long\"])\n\n    # Changing the color based on buckets of cost\n    if row[\"price\"] < 1300000:\n        color = \"#85CB33\" #green\n    elif row[\"price\"] >= 1300000 and row[\"price\"] < 2000000:\n        color = \"#F9B700\" #yellow\n    else:\n        color = \"#E01A4F\" #hot pink\n    \n    # Adding each home to the map\n    folium.CircleMarker([row['lat'], row['long']],\n                        radius=(row[\"price\"]\/1000000),\n                        fill=True,\n                        color=color,\n                        popup=popup_text).add_to(m4)\n\nm4","fcd790cc":"# Side quest! Adding a heat map based on price\n\n# Creating the map\nm5 = folium.Map(location=[47.56009, -122.21398],\n                zoom_start=9.25, prefer_canvas=True)\n\n# Setting the background map type\nfolium.TileLayer(\"Mapbox Bright\").add_to(m5)\n\n# Plotting the heatmap\nheat_data = [[row['lat'],row['long']] for index, row in most_exp_df.iterrows()]\n\n# Adding the heatmap to the map\nHeatMap(heat_data).add_to(m5)\n\nm5","ca2e2858":"| Name | Description | Date\n| :- |-------------: | :-:\n|Reza Hashemi| IBM Data Analysis with Python.  | On 3rd of August 2019","45707c52":"# Importing method for Splitting data into Training and Testing dataset","89a4bbf9":"# ** Preparing Data as we dont need colums such as \"id\",\"Unnamed\" so we will Drop unwanted columns **","c24d6856":"# ** Clunky Map **","9e40673a":"# ** Map Time! **","69d466aa":"# **Now Let's do The Mapping .. -=^.^=-**","0c1640cf":"# Checking Data Types","70da0101":"# Training Linear Regression with df[\"sqft_living\"] and df[\"price\"]\nCalculating R^2","115ea1e4":"# Observing diffrent Columns Data","b264e874":"# Checking R^2 Value for Multiple Linear Regression","00fb357d":"> This Prerequisite on **Folium data science**, programming in Python, and *data visualization*.The result is a map of housing data, which displays popup details and which gives further details through the size and color of each dot.\n\nI've **Anaconda** to manage my platforms, and do most of my coding in a **Jupyter Notebook**. \n\nThe point of using **Folium to visualize data is to improve upon matplotlib's basemap, to present an interactive (and much more visually appealing) map of current data**","8baa33a5":"# Performing Ridge Regression","1f53e195":"# Training Linear Regression model between df[\"long\"] and df[\"price\"] \nCalculating R^2 value","b48972e0":"# importing LinearRegression from sklearn","c4877f7f":"# Just incase you didn't like my work .. > FUCK YOU :D"}}