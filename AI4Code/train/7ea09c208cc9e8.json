{"cell_type":{"a9bdc3b8":"code","ca98c8d7":"code","c0fb7469":"code","b2b9940f":"code","bdd67987":"code","65054bbf":"code","8213d388":"code","b7d598cf":"code","e40bc580":"code","3658b7c4":"code","59e6ca97":"code","7c882b50":"code","28d5952d":"code","5dcf0f83":"code","31ae8202":"code","88b403dd":"code","7c174376":"code","da27c66d":"code","762cd7af":"code","219d7e07":"code","0f977f8f":"code","b00d6207":"code","6b9fa671":"code","454676ec":"code","488dd515":"code","251143ba":"code","676b816c":"code","4462317e":"code","d0fde4fb":"code","002c2860":"code","073034de":"markdown","b861eaee":"markdown","4781a188":"markdown","b3187e26":"markdown","db4933a8":"markdown","4c93fcf2":"markdown","59a0376b":"markdown","8e39374a":"markdown","3d08f1b2":"markdown","063ae4c7":"markdown","0d789416":"markdown","739b61cc":"markdown","12d96863":"markdown","596b9dbe":"markdown","fd6646db":"markdown","b7b5333f":"markdown","4604fdc1":"markdown","b963f641":"markdown","e4231ff2":"markdown","8211f33c":"markdown","69890cf5":"markdown","ec952058":"markdown","a016e2ab":"markdown","fc83ff56":"markdown","63d9939f":"markdown","145a30c8":"markdown","a1256814":"markdown","66e789f2":"markdown"},"source":{"a9bdc3b8":"# <hide-input>\n\nimport pandas as pd\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nimport numpy as np\nwarnings.filterwarnings('ignore')\n\nNOT_KAGGLE = os.getenv('KAGGLE_URL_BASE') is None\npath = '.\/wash_data\/' if NOT_KAGGLE else '..\/input\/credit-card-approval-prediction\/'","ca98c8d7":"application_df = pd.read_csv(path+\"application_record.csv\")\napplication_df.head(5)","c0fb7469":"application_df.loc[application_df.DAYS_EMPLOYED==-1194].loc[application_df.DAYS_BIRTH== -10554]","b2b9940f":"application_df = application_df.drop_duplicates(subset=application_df.columns[1:], keep='first', inplace=False)\napplication_df.loc[application_df.DAYS_BIRTH== -10554]","bdd67987":"credit_status = pd.read_csv(path+\"credit_record.csv\")\n\n# replace X, and C by 0\ncredit_status.STATUS.replace('X', 0, inplace=True)\ncredit_status.STATUS.replace('C', 0, inplace=True)\ncredit_status.STATUS = credit_status.STATUS.astype('int')\n\n# record the worst credit record.\ncredit_record = credit_status.groupby('ID').STATUS.max()\ncredit_record.head(10)\n\n# combine two table\ndf = pd.merge(application_df, credit_record, how='inner', on=['ID'])","65054bbf":"df.STATUS = df.STATUS.apply(lambda x: 1 if x >= 2 else 0)\ndf.head(5)","8213d388":"df = df.sort_values('AMT_INCOME_TOTAL')\ndf = df.reset_index(drop=True)\ndf.ID=df.index\ndf.columns = ('User_id',\n              'Gender',\n              'Car',\n              'Realty',\n              'children_count',\n              'income_amount',\n              'income_type',\n              'education_type',\n              'Family_status',\n              'Housing_type',\n              'Days_birth',\n              'Days_employed',\n              'Mobile',\n              'Work_phone',\n              'Phone',\n              'Email',\n              'Occupation_type',\n              'Count_family_members',\n              'Reject'\n              )","b7d598cf":"df","e40bc580":"print('There are '+str(df.Reject.sum()) +' rejected applicants\\n', str(round(df.Reject.sum()\/len(df)*100,2)) +'% in 9710 applicants')\n","3658b7c4":"binary_features = ['Gender', 'Car', 'Realty', 'Work_phone', 'Phone', 'Email']\nbinary_df = df[binary_features+['Reject']].replace('M', 1).replace('F', 0).replace('Y', 1).replace('N', 0)\ndict_list = []\nfor feature in binary_features:\n    for one_type in [0, 1]:\n        dict_list.append({'feature': feature,\n                          'type': one_type,\n                          'reject_rate in type': len(binary_df[binary_df[feature]==one_type][binary_df.Reject==1])\/len(binary_df[binary_df[feature]==one_type]),\n                          'count': len(binary_df[binary_df[feature]==one_type]),\n                          'Reject_count': len(binary_df[binary_df[feature]==one_type][binary_df.Reject==1])\n                         })\n\ngroup_binary = pd.DataFrame.from_dict(dict_list)\nsns.barplot(x=\"feature\", y=\"reject_rate in type\", hue=\"type\", data=group_binary)\nplt.show()\ngroup_binary","59e6ca97":"sns.countplot(x=\"children_count\", data=df, palette=\"Greens_d\")\nchildren_count = df.children_count.value_counts()\nfor a,b in zip(range(len(children_count)), children_count):\n    plt.text(a, b+50, '%.0f' % b, ha='center', va= 'bottom',fontsize=14)\nplt.show()","7c882b50":"children_count_4 = [children_count[0], children_count[1], children_count[2], children_count[3:].sum()]\nchildren_count_4_reject = [len(df[df.children_count==0][df.Reject==1]),\n                           len(df[df.children_count==1][df.Reject==1]),\n                           len(df[df.children_count==2][df.Reject==1]),\n                           len(df[df.children_count>=3][df.Reject==1])]\n\nchildren_count_df = pd.DataFrame.from_dict({'children_count':children_count_4, 'reject_count':children_count_4_reject})\nchildren_count_df['approved_count'] = children_count_df.children_count - children_count_df.reject_count\nchildren_count_df['reject_rate'] = children_count_df.reject_count\/children_count_df.children_count\nchildren_count_df","28d5952d":"sns.countplot(x=\"Count_family_members\", data=df, palette=\"Greens_d\")\nfamily_members_count = df.Count_family_members.apply(int).value_counts().sort_index()\nfor a,b in zip(range(len(family_members_count)), family_members_count):\n    plt.text(a, b+50, '%.0f' % b, ha='center', va= 'bottom',fontsize=14)\nplt.show()","5dcf0f83":"family_members_4 = [family_members_count[1], family_members_count[2], family_members_count[3], family_members_count[4:].sum()]\nfamily_members_4_reject = [len(df[df.Count_family_members==1.0][df.Reject==1]),\n                           len(df[df.Count_family_members==2.0][df.Reject==1]),\n                           len(df[df.Count_family_members==3.0][df.Reject==1]),\n                           len(df[df.Count_family_members>=4.0][df.Reject==1])]\n\nfamily_members_count_df = pd.DataFrame.from_dict({'family_members_count':family_members_4, 'reject_count':family_members_4_reject})\nfamily_members_count_df['approved_count'] = family_members_count_df.family_members_count - family_members_count_df.reject_count\nfamily_members_count_df['reject_rate'] = family_members_count_df.reject_count\/family_members_count_df.family_members_count\nfamily_members_count_df","31ae8202":"fig = plt.figure()\nax = fig.add_subplot(111)\ngp=df.groupby(by=['children_count','Count_family_members'])\ngp_df = gp.size().reset_index(name='times').sort_values('times', ascending=False)[:6]\ngp_df['times_10'] = gp_df['times'].apply(lambda x: x\/10)\nax.scatter(gp_df['children_count'], gp_df['Count_family_members'], s=gp_df['times_10'])\nplt.xticks(range(4))\nplt.yticks(range(6))\nplt.xlabel('children_count')\nplt.ylabel('Count_family_members')\nplt.show()","88b403dd":"gp=df.groupby(by=['children_count','Count_family_members'])\ngp_df = gp.size().reset_index(name='times').sort_values('times', ascending=False)[:6]\n\ngp_df","7c174376":"income_plot = pd.Series(df.income_amount, name=\"income\")\nplt.ylabel('Reject_rate')\nsns.distplot(income_plot)\nplt.show()","da27c66d":"sns.boxplot(x=\"Reject\", y=\"income_amount\", data=df[df.income_amount<=400000])\nplt.show()","762cd7af":"age_series = df.Days_birth.apply(lambda x: int(-x \/ 365.25))\nplt.ylabel('Reject_rate')\nage_plot = pd.Series(age_series, name=\"age\")\nsns.distplot(age_plot)\nplt.show()","219d7e07":"sns.boxplot(x=\"Reject\", y=\"Days_birth\", data=df)\nplt.show()","0f977f8f":"employed_year_series = df[df.Days_employed<0].Days_employed.apply(lambda x: int(-x \/\/ 365.25))\nplt.ylabel('Reject_rate')\nemployed_year_plot = pd.Series(employed_year_series, name=\"employed_year\")\nsns.distplot(employed_year_plot)\nplt.show()","b00d6207":"sns.boxplot(x=\"Reject\", y=\"Days_employed\", data=df[df.Days_employed<0])\nplt.show()","6b9fa671":"new_df= df\nnew_df['income_5000'] = df.Days_birth.apply(lambda x: int(-x \/ 365.25 \/5) *5)\nnew_df['age_5'] = df.Days_birth.apply(lambda x: int(-x \/ 365.25 \/5) *5)\nnew_df['employed_year_5'] = df.Days_employed.apply(lambda x: int(-x \/ 365.25 \/5) *5)\nplot_fig = plt.figure()\naei_plot = sns.boxplot(x=\"age_5\", y=\"income_amount\", hue='Reject', data=df[df.income_amount<=400000])\nplt.show()\naei_plot = sns.boxplot(x=\"employed_year_5\", y=\"income_amount\", hue='Reject', data=df[df.income_amount<=400000])\nplt.show()","454676ec":"# remove outliers and error rows \nnew_df = df[df.income_amount<=400000][df.Days_employed<0]\n\n# transform days to month\nnew_df['age_month'] = df.Days_birth.apply(lambda x: int(-x \/ 30.417))\nnew_df['employed_month'] = df.Days_employed.apply(lambda x: int(-x \/ 30.417))\n\n# seperate age_month, employed_month, and income\nquantile_new_df = new_df[['age_month', 'employed_month', 'income_amount']].quantile([0, 0.25, 0.5, 0.75, 1])\nnew_df['cut_age'] = pd.cut(new_df['age_month'],bins=quantile_new_df.age_month, right=False, labels=[1, 2, 3, 4])\nnew_df['cut_employed_month'] = pd.cut(new_df['employed_month'],bins=quantile_new_df.employed_month, right=False, labels=[1, 2, 3, 4])\nnew_df['cut_income_amount'] = pd.cut(new_df['income_amount'],bins=quantile_new_df.income_amount, right=False, labels=[1, 2, 3, 4])\n\n# group the new_df by age and income\ngp_age_income_reject = new_df[new_df.Reject==1].groupby(by=['cut_age','cut_income_amount']).size().reset_index(name='reject_times')\ngp_age_income_total = new_df.groupby(by=['cut_age','cut_income_amount']).size().reset_index(name='times')\ngp_age_income_reject_rate = pd.merge(gp_age_income_total, gp_age_income_reject, how='outer', on=['cut_age','cut_income_amount'])\ngp_age_income_reject_rate['reject_rate'] = gp_age_income_reject_rate.reject_times\/gp_age_income_reject_rate.times\nsns.barplot(x=\"cut_age\", y=\"reject_rate\", hue=\"cut_income_amount\", data=gp_age_income_reject_rate)\nplt.show()","488dd515":"# group the dataset through cut_employed_year and income.\ngp_employed_income_reject = new_df[new_df.Reject==1].groupby(by=['cut_employed_month','cut_income_amount']).size().reset_index(name='reject_times')\ngp_employed_income_total = new_df.groupby(by=['cut_employed_month','cut_income_amount']).size().reset_index(name='times')\ngp_employed_income_reject_rate = pd.merge(gp_employed_income_total, gp_employed_income_reject, how='outer', on=['cut_employed_month','cut_income_amount'])\ngp_employed_income_reject_rate['reject_rate'] = gp_employed_income_reject_rate.reject_times\/gp_employed_income_reject_rate.times\nsns.barplot(x=\"cut_employed_month\", y=\"reject_rate\", hue=\"cut_income_amount\", data=gp_employed_income_reject_rate)\nplt.show()","251143ba":"gp_total=df.groupby(by=['income_type']).size().reset_index(name='times')\ngp_reject = df[df.Reject==1].groupby(by=['income_type']).size().reset_index(name='reject_times')\ngp_reject_rate = pd.merge(gp_total, gp_reject, how='outer', on=['income_type']).fillna(0)\ngp_reject_rate['reject_rate'] = gp_reject_rate.reject_times \/ gp_reject_rate.times\nsns.barplot(x=\"income_type\", y=\"reject_rate\", data=gp_reject_rate)\nplt.show()\ngp_reject_rate","676b816c":"gp_total=df.groupby(by=['education_type']).size().reset_index(name='times')\ngp_reject = df[df.Reject==1].groupby(by=['education_type']).size().reset_index(name='reject_times')\ngp_reject_rate = pd.merge(gp_total, gp_reject, how='outer', on=['education_type']).fillna(0)\ngp_reject_rate['reject_rate'] = gp_reject_rate.reject_times \/ gp_reject_rate.times\nsns.barplot(x=\"education_type\", y=\"reject_rate\", data=gp_reject_rate)\nplt.show()\ngp_reject_rate","4462317e":"gp_total=df.groupby(by=['Family_status']).size().reset_index(name='times')\ngp_reject = df[df.Reject==1].groupby(by=['Family_status']).size().reset_index(name='reject_times')\ngp_reject_rate = pd.merge(gp_total, gp_reject, how='outer', on=['Family_status']).fillna(0)\ngp_reject_rate['reject_rate'] = gp_reject_rate.reject_times \/ gp_reject_rate.times\nsns.barplot(x=\"Family_status\", y=\"reject_rate\", data=gp_reject_rate)\nplt.show()\ngp_reject_rate","d0fde4fb":"gp_total=df.groupby(by=['Housing_type']).size().reset_index(name='times')\ngp_reject = df[df.Reject==1].groupby(by=['Housing_type']).size().reset_index(name='reject_times')\ngp_reject_rate = pd.merge(gp_total, gp_reject, how='outer', on=['Housing_type']).fillna(0)\ngp_reject_rate['reject_rate'] = gp_reject_rate.reject_times \/ gp_reject_rate.times\nsns.barplot(x=\"Housing_type\", y=\"reject_rate\", data=gp_reject_rate)\nplt.show()\ngp_reject_rate","002c2860":"gp_total=df.groupby(by=['Occupation_type']).size().reset_index(name='times')\ngp_reject = df[df.Reject==1].groupby(by=['Occupation_type']).size().reset_index(name='reject_times')\ngp_reject_rate = pd.merge(gp_total, gp_reject, how='outer', on=['Occupation_type']).fillna(0)\ngp_reject_rate['reject_rate'] = gp_reject_rate.reject_times \/ gp_reject_rate.times\nsns.barplot(x=\"Occupation_type\", y=\"reject_rate\", data=gp_reject_rate)\nplt.show()\ngp_reject_rate.sort_values('reject_rate')","073034de":"#### 2.3.3 Family_status","b861eaee":"### 1.2 Credit record\nThis is a csv file with credit record for a part of ID in application record. We can treat it a file to generate labels for modeling. For the applicants who have a record more than 59 past due, they should be rejected.\n\nAfter reading the data, we have the following columns.\n\n* `ID`: Unique Id of the row in application record.\n* `MONTHS_BALANCE`: The number of months from record time.\n* `STATUS`: Credit status for this month.\n        X: No loan for the month\n        C: paid off that month \n        0: 1-29 days past due \n        1: 30-59 days past due \n        2: 60-89 days overdue\n        3: 90-119 days overdue \n        4: 120-149 days overdue \n        5: Overdue or bad debts, write-offs for more than 150 days \n","4781a188":"From the chart above, Reject rate of applicants with 1, 2 or 3 family members are similar. More children usually means more family members, so the conclusion seems similar.","b3187e26":"#### 2.2.5 Days_employed\n\nThere are error values in this column. We will drop them first and get the employed year of each applicants","db4933a8":"#### 2.2.1 children_count","4c93fcf2":"#### 2.2.4 Days_birth\nWe firstly transform the days from birth into years, and get the **histogram** and **Box diagram**.","59a0376b":"#### 2.2.3 income_amount\nThe following figures are a **histogram** and **Box diagram**","8e39374a":"### 1.1 Application record\nUse `pandas.read_csv` to read application_record.csv in memory. There will be a `pandas DataFrame` having the following columns:\n\n* `ID`: Unique Id of the row\n* `CODE_GENDER`: Gender of the applicant. M is male and F is female.\n* `FLAG_OWN_CAR`: Is an applicant with a car. Y is Yes and N is NO.\n* `FLAG_OWN_REALTY`: Is an applicant with realty. Y is Yes and N is No.\n* `CNT_CHILDREN`: Count of children.\n* `AMT_INCOME_TOTAL`: the amount of the income.\n* `NAME_INCOME_TYPE`: The type of income (5 types in total).\n* `NAME_EDUCATION_TYPE`: The type of education (5 types in total).\n* `NAME_FAMILY_STATUS`: The type of family status (6 types in total).\n* `DAYS_BIRTH`: The number of the days from birth (Negative values).\n* `DAYS_EMPLOYED`: The number of the days from employed (Negative values). This column has **error values**.\n* ` FLAG_MOBIL`: Is an applicant with a mobile. 1 is True and 0 is False.\n* ` FLAG_WORK_PHONE`: Is an applicant with a work phone. 1 is True and 0 is False.\n* `FLAG_PHONE`: Is an applicant with a phone. 1 is True and 0 is False.\n* `FLAG_EMAIL`: Is an applicant with a email. 1 is True and 0 is False.\n* ` OCCUPATION_TYPE`: The type of occupation (19 types in total). This column has **missing values**.\n* ` CNT_FAM_MEMBERS`: The count of family members.","3d08f1b2":"#### 2.2.2 Count_family_members","063ae4c7":"From the figure above, we can find that few of applicants have more than 2 child, so we seperate the applicants into four parts.\n\nThe reject rate of applicants with 0, 1 or 2 children are not quite different.","0d789416":"Then I am going to generate a barplot to show the relation between reject rate and age_income or employed_year_income.","739b61cc":"We can notice that most applicants' income is lower than 40000. So we select these applicants to get box plot.","12d96863":"#### 2.3.5 Occupation_type","596b9dbe":"#### 2.3.4 Housing_type","fd6646db":"In the figure above, we can notice that Gender and Realty are high value columns for credit approval, but Phone and Car are not.","b7b5333f":"### 2.1 binary features\nThere are 7 binary features in the dataset `Gender`, `Car`, `Realty`, `Mobile`, `Work_phone`, `Phone` and `Email`. We find every applicant has a mobile. So we drop column `Mobile`.\n","4604fdc1":"## Imports\n\n","b963f641":"#### 2.3.2 education_type","e4231ff2":"## 2. Exploratory data analysis","8211f33c":"## 1. Data combination and de-duplication\n\nThis dataset's objective is predicting whether an applicant's credit card approval will be approved or not. The dataset contains applicants' basic information and applicants'credit history. There are **433887** rows in application.csv. ID is from **5008804** to **7999952**. In credit_record.csv, there are **1048575** rows of **45985** ID's credit record. ID is from **5001711** to **5150487**.","69890cf5":"### 2.3 EDA for digital features\nWe are going to develop the relation between `Reject` with `age` and `income` or `employed years` and `income`.","ec952058":"From the figure above, we can know that the applicants with a lower income and higher employed years is more likely not to be rejected.","a016e2ab":"There are many duplicate rows in application_record.csv. They have the same values in rows except `ID`. Some of them have adjacent `ID`, but others are not. By using `df.drop_duplicates`, we can drop the duplicate rows to grantee that any applicant corresponds to only one applications.","fc83ff56":"As figures above, we can know that in terms of age and income rejected applicants are not quite different from approved applicants through the combination of five-number summary in boxplot. However, in terms of age and employed year, applicants with more than 20 years of service are more likely not to be rejected.","63d9939f":"### 2.2 Digital features\nThere are 5 digital features in the dataset `children_count`, `income_amount`, `Days_birth`, `Days_employed` and `Count_family_members`. `children_count` and `Count_family_members` are features with a small scale.\n\n","145a30c8":"### 2.3 class features\n\nThere are five type of class features: `income_type`, `education_type`,`Family_status`,`Housing_type`,`Occupation_type`.","a1256814":"From the figure above, we can know that the older applicants with a lower income is more likely to be rejected during credit card approval. In contrast, the older applicants with a higher income will be approved.","66e789f2":"#### 2.3.1 income_type"}}