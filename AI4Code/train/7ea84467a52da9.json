{"cell_type":{"5af7ee83":"code","47243054":"code","17b041e9":"code","1d85bf04":"code","d296604e":"code","e290e51a":"code","be70cea0":"code","0778a0b1":"code","1f389f66":"code","c033238f":"code","b49979b3":"code","208e3b0e":"code","0eecbb53":"code","fe8bcdf4":"code","88ba543c":"code","a84749c7":"code","5c494f3f":"code","403c9b6a":"code","327ba230":"code","c523478f":"code","d8118087":"code","f89c98ec":"code","2fcabe8f":"markdown","6e0a3e04":"markdown","711fc43c":"markdown","74ecfe60":"markdown","2dfdc41d":"markdown","61f36c1a":"markdown","c00206b7":"markdown","7dbcc47f":"markdown","fe086066":"markdown","ac272117":"markdown"},"source":{"5af7ee83":"import os, sys, subprocess\nimport numpy as np\nimport pandas as pd\nimport gc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.core.display import HTML, Image\nfrom scipy.stats import skew, kurtosis\n\n# import chart_studio.plotly as py\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n\nfrom html.parser import HTMLParser\n\npd.set_option('display.max_rows', 150)\n\nprint(os.listdir(\"..\/input\/\"))\nprint(os.listdir(\"..\/input\/siimisicpublicpvtlb\"))","47243054":"# see: https:\/\/www.kaggle.com\/pednoi\/visualize-the-shakeups-of-10-recent-competitions\/data?select=Elo+Merchant+Category+Recommendation+_+Kaggle.html\n\nclass RankParser(HTMLParser):\n\n    def __init__(self):\n        self.entered = False\n        self.sign = ''\n        self.data = []\n        \n        super().__init__()\n    \n    def handle_starttag(self, tag, attrs):\n        if tag == 'td' and ('data-th', 'Change') in attrs:\n            self.entered = True\n            \n        if self.entered and tag == 'span':\n            if len(attrs) > 0 and len(attrs[0]) > 1 and attrs[0][1].startswith('position-change'):\n                direction = attrs[0][1][len('position-change__'):]\n                if direction == 'fallen':\n                    self.sign = '-'                    \n\n    def handle_endtag(self, tag):\n        if self.entered and tag == 'td':\n            self.entered = False\n            self.sign = ''\n\n    def handle_data(self, data):\n        if self.entered:\n            data = '0' if data == '\u2014' else data\n            self.data.append(int(self.sign+data.strip()))\n    \n    def get_data(self):\n        return self.data\n\ndef read_html(file_path):\n    content = open(file_path, encoding='utf-8').read()    \n    parser = RankParser()\n    parser.feed(content)\n    return parser.get_data()","17b041e9":"def color_negative_red(val):\n    \"\"\"\n    Takes a scalar and returns a string with\n    the css property `'color: red'` for negative\n    strings, black otherwise.\n    \"\"\"\n    try:\n        color = 'red' if val < 0 else 'black'\n    except:\n        color = 'black'\n    return 'color: %s' % color","1d85bf04":"CSV_DIR = \"..\/input\/siimisicpublicpvtlb\"\nHTML_DIR = \"..\/input\/siimisicpublicpvtlb\"\nMETA_DIR = \"..\/input\/meta-kaggle\"\n\n\ndef do_read_csv(name):\n    df = pd.read_csv(name, low_memory=False)\n    print (df.shape, name)\n    return df","d296604e":"# read csv - PUBLIC LB\n\npublic_lb1 = do_read_csv(f'{CSV_DIR}\/siim-isic-melanoma-classification-PublicLB_18082020.csv')\n\nprint('Public LB (@18\/08\/2020) shape before cleaning:', len(public_lb1))\n\n# create df for future use\npublic_scores1 = public_lb1.groupby(['TeamId'])['Score'].agg('max').sort_values(ascending=False)\n\npublic_Scores1 = pd.DataFrame(public_scores1)\npublic_Scores1 = public_Scores1.reset_index()\n\npublic_Scores1 = public_Scores1.merge(public_lb1[['TeamId', 'TeamName']], on='TeamId', how='right').drop_duplicates()\n\nprint('Public LB (@18\/08\/2020) shape after cleaning:', len(public_Scores1))","e290e51a":"# read csv - PUBLIC LB \n\n# public_lb2 = do_read_csv(f'{CSV_DIR}\/siim-isic-melanoma-classification-publicLB_19082020.csv')   # 19\/08\/2020 22:00\n\npublic_lb2 = do_read_csv(f'{CSV_DIR}\/siim-isic-melanoma-classification-publicLB_final.csv')  \nprint('Public LB (@19\/08\/2020) shape before cleaning:', len(public_lb2))\n\n# create df for future use\npublic_scores2 = public_lb2.groupby(['TeamId'])['Score'].agg('max').sort_values(ascending=False)\n\npublic_Scores2 = pd.DataFrame(public_scores2)\npublic_Scores2 = public_Scores2.reset_index()\n\npublic_Scores2 = public_Scores2.merge(public_lb2[['TeamId', 'TeamName']], on='TeamId', how='right').drop_duplicates()\n\nprint('Public LB (@19\/08\/2020) shape after cleaning:', len(public_Scores2))","be70cea0":"public_Scores1.TeamId.nunique(), public_Scores2.TeamId.nunique()","0778a0b1":"# removed accounts \nremoved_teams = [x for x in set(public_Scores1.TeamId) if x not in set(public_Scores2.TeamId)]\n\nprint('no. of removed teams:', len(removed_teams))","1f389f66":"public_Scores1.loc[public_Scores1.TeamId.isin(removed_teams)][['TeamName', 'Score']].style.hide_index()","c033238f":"print('no. of deleted accounts:', public_Scores1[public_Scores1.TeamName=='[Deleted]'].shape[0])\npublic_Scores1[public_Scores1.TeamName=='[Deleted]'].style.hide_index()","b49979b3":"# read html - PVT LB \n\npvt_lb = pd.read_csv(f'{CSV_DIR}\/LB2.csv', header=[0], delimiter=';')\n\n# modify shake-up column\npvt_lb.pos_change = pvt_lb.pos_change.replace(to_replace='\u2014', value=0)\npvt_lb.pos_change = pvt_lb.pos_change.astype(int)\npvt_lb['TeamName'] = pvt_lb['Team_name']\n\ndel pvt_lb['Team_name']\ngc.collect()\n\n# file = 'SIIM-ISIC Melanoma Classification _ Pvt_18082020.htm'\n# shake_up = read_html(f'{HTML_DIR}\/{file}')\n# print('Shape of PVT LB @18\/08\/2020:', len(shake_up))\n\nfile = 'SIIM-ISIC Melanoma Classification _ Pvt_final.htm'\nshake_up = read_html(f'{HTML_DIR}\/{file}')\n\nprint('No. of Teams in PVT LB (Final):', len(pvt_lb))","208e3b0e":"pvt_lb['shake'] = np.array(shake_up)","0eecbb53":"assert len(public_Scores2)==len(pvt_lb), 'Not valid shapes!'","fe8bcdf4":"def plot_hist(title, diff):\n    stats = \"\"\n    stats += \"count = %d\\n\" % len(diff)\n    stats += \"mean = %.2f\\n\" % np.mean(diff) # always zero because the data are zero-sum\n    stats += \"std = %.4f\\n\" % np.std(diff)\n    stats += \"skew = %.4f\\n\" % skew(diff)\n    stats += \"kurtosis = %.4f\\n\" % kurtosis(diff)\n    \n    print(\"Mean shake-up       \" ,np.mean(diff))\n    print(\"\\nMedian shake-up     \" ,np.median(diff))\n    print(\"\\nMax shake-up        \" ,np.max(diff))\n    print(\"\\nMin shake-down ;)   \" ,np.min(diff))\n    print(\"\\nStd shake-up        \" ,np.std(diff))\n    \n    fig = plt.figure(figsize=(16, 6))\n    #     sns.distplot(diff, bins=100)\n    plt.hist(diff, bins = 50, edgecolor = 'black', color = 'green')\n    plt.text(0.05, 0.5, stats, transform=plt.gca().transAxes)\n    plt.xlabel(\"Places Shake-up\")\n    plt.ylabel(\"Frequency\")\n    plt.title(title)\n    plt.show()\n","88ba543c":"plot_hist('Melanoma Shake-Up', shake_up)","a84749c7":"def plot_candle(title, diff):\n    closes = np.array(range(len(diff)))+1\n    opens = closes + np.array(diff)\n    highs = np.where(np.array(diff)<0, closes, opens)\n    lows =  np.where(np.array(diff)>=0, closes, opens)\n    \n    hovertext = ['private lb: '+str(c)+'<br>public lb: '+ str(o) +'<br>TeamName: '+str(pvt_lb.iloc[c-1]['TeamName'])  for o, c in zip(opens, closes)]\n\n    trace = go.Ohlc(x=list(range(1, len(diff)+1)), open=opens, high=highs, low=lows, close=closes,\n                    increasing=dict(line=dict(color='#800000')), # '#FF6699'\n                    decreasing=dict(line=dict(color='#228B22')),          # '#66DD99'\n                    text=hovertext, \n                    hoverinfo='text')\n    \n    layout = go.Layout(\n        title = \"<b>%s<\/b>\" % title,\n        xaxis = dict(\n            title='Final ranks (Pvt LB)',\n            rangeslider = dict(visible=False)\n        ), \n        yaxis=dict(\n            title='shakeups',\n            autorange='reversed'\n        ),\n        width=800,\n        height=600,\n    )\n    \n    fig = go.Figure(data=[trace], layout=layout)    \n    iplot(fig, filename='shakeup_candlestick')","5c494f3f":"plot_candle('Melanoma LB Shake-up',  pvt_lb['shake'])","403c9b6a":"# modified from: https:\/\/www.kaggle.com\/robikscube\/ashrae-leaderboard-and-shake\n\ndf = pvt_lb[['Pvt_rank','shake','TeamName','Pvt_score','no_submissions']].copy()\n\ndf['medal'] = ''\ndf.loc[df['Pvt_rank'] <= 331, 'medal'] = '\ud83e\udd49'\ndf.loc[df['Pvt_rank'] <= 165, 'medal'] = '\ud83e\udd48'\ndf.loc[df['Pvt_rank'] <= 16, 'medal'] = '\ud83e\udd47'\ndf = df[['Pvt_rank','medal','shake', 'TeamName', 'Pvt_score']]   # 'public_rank''Score', 'no_submissions'\n\ndf.head(335).style.applymap(color_negative_red).hide_index()","327ba230":"# select 20 most recent competitions\n\nteams = do_read_csv(f'{META_DIR}\/Teams.csv')\ncomps = do_read_csv(f'{META_DIR}\/Competitions.csv').set_index('Id')\ncomps['DeadlineText'] = comps.DeadlineDate.str.split().str[0]\ncomps['DeadlineDate'] = pd.to_datetime(comps.DeadlineDate)\n\nselected_comps = comps[(comps.HostSegmentTitle=='Featured') | (comps.HostSegmentTitle=='Research')].copy()\nselected_comps = selected_comps.sort_values('DeadlineDate')[-20:]\n\n# select teams for those competitions\nteams = teams.loc[teams.CompetitionId.isin(selected_comps.index)]\nteams = teams.assign(Medal=teams.Medal.fillna(0).astype(int))\nprint(teams.shape)","c523478f":"def make_scatter_competitions(comps, teams):\n\n    shakes = {}\n    COLOR_DICT = {0: 'deepskyblue', 1: 'gold', 2: 'silver', 3: 'chocolate'}\n    plt.rc('font', size=14)\n    for i, df in teams.groupby('CompetitionId', sort=False):\n        fname = comps.Slug[i]\n        row = comps.loc[i]\n        shakeup = df.eval('abs(PrivateLeaderboardRank-PublicLeaderboardRank)').mean() \/ df.shape[0]\n        title = (f'{row.Title} \u2014 {row.TotalTeams} teams \u2014 '\n                 f'{shakeup:.3f} shake-up \u2014 {row.DeadlineText}')\n        shakes[i] = shakeup\n        df = df.sort_values('PrivateLeaderboardRank', ascending=False)  # plot gold last\n        ax = df.plot.scatter('PublicLeaderboardRank', 'PrivateLeaderboardRank', c=df.Medal.map(COLOR_DICT), figsize=(15, 15))\n        plt.title(title, fontsize=16)\n        l = np.arange(df.PrivateLeaderboardRank.max())\n        ax.plot(l, l, linestyle='--', linewidth=1, color='Black', alpha=0.5)\n        ax.set_xlabel('Public Leaderboard Rank')\n        ax.set_ylabel('Private Leaderboard Rank')\n        plt.tight_layout()\n        plt.show()\n    return shakes","d8118087":"shakes = make_scatter_competitions(selected_comps, teams)","f89c98ec":"def fmt_link(row):\n    return f'<a target=_blank href=\"https:\/\/www.kaggle.com\/c\/{row.Slug}\">{row.Title}<\/a>'\n\n\nshow_cols = ['Title', 'HostSegmentTitle', 'TotalTeams','DeadlineText', 'Shakeup']\nbars = ['TotalTeams', 'Shakeup']\n\nselected_comps['Shakeup'] = np.array([shakes[key] for key in shakes.keys()])\n\ntmp = selected_comps.assign(Title=selected_comps.apply(fmt_link, 1))\ntmp[show_cols].set_index('Title').head(20).style.bar(subset=bars)","2fcabe8f":"# Display Final Rankings & Medals ","6e0a3e04":"# Shake-up Report (Quick and dirty)\n\nThis notebook generates a plot of public LB rank vs private LB rank for all teams in the recent Melanoma competition. - It is a quick and dirty approach using code from the following sources: \n\n- https:\/\/www.kaggle.com\/pednoi\/visualize-the-shakeups-of-10-recent-competitions\n- https:\/\/www.kaggle.com\/robikscube\/ashrae-leaderboard-and-shake\n- https:\/\/www.kaggle.com\/jtrotman\/meta-kaggle-competition-shake-up\n- https:\/\/www.kaggle.com\/jtrotman\/meta-kaggle-scatter-plot-competition-shake-up\n\n\n#### I'll try to update it soon by comparing the shake-up with other vision competitions.","711fc43c":"# Teams removed by now..","74ecfe60":"# Read LB data","2dfdc41d":"# Compare with 20 most recent Competitions","61f36c1a":"### no. of deleted accounts","c00206b7":"#### Final LB after clearing (before clearing)\n- Max jump-up (shake-up): +1316 (+1367)\n- Max jump-down (shake-down): -2344 (-2960)","7dbcc47f":"### Final LB\n\n- Max shake-up: +1316 (+1367) places\n\n| Public # | Pvt # | Shake_up | Team Name          | Public Score | Private Score |\n|----------|-------|----------|--------------------|--------------|---------------|\n| 1616     | 300  | +1316     | Quan               |  0.9389      |  \t0.9376    |\n| 1716     | 349  | +1367     | shadowy            | 0.9648       |   0.9128      |\n\n\n- Max shake-down: -2344 (-2960) places\n\n| Public # | Pvt # | Shake_up | Team Name          | Public Score | Private Score |\n|----------|-------|----------|--------------------|--------------|---------------|\n| 8        | 2352  | -2344    | sunlight           | 0.9737       | 0.8744        |\n| 19       | 2979  | -2960    | siim_2020_stacking | 0.9725       | 0.7677        |","fe086066":"## Distribution of Number of Places Shake Up","ac272117":"## Note 18\/08\/2020 : This reports shows the current status of the LB (before clearing)\n\n## UPDATE 19\/08\/2020: added the removed + deleted teams (by now) \n\n## UPDATE 22\/08\/2020: Final LB"}}