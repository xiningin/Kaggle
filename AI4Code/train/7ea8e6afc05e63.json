{"cell_type":{"e80f7034":"code","2bf7c1b0":"code","5ff7ebf7":"code","000de2ad":"code","37979deb":"code","827fe670":"code","53fe847d":"code","859f0457":"code","c80fdb1a":"code","d308d3c0":"code","d20c103d":"code","8e27606b":"code","71990651":"code","080ad7b3":"code","b449bd7b":"code","a139db46":"code","d4ce15b2":"code","cde11f0a":"code","ccef5b8b":"code","16d173fb":"code","61752c05":"code","db1e0bfb":"code","8cfe320c":"code","ee9e8e40":"code","c1256d66":"code","dc8698e9":"code","cc7ad8b5":"code","427eb263":"markdown","5b6cc1b2":"markdown","5e45953f":"markdown","989b3b63":"markdown","93ef294f":"markdown","7454f890":"markdown","ac577411":"markdown","4d3aade8":"markdown","9f32b1c7":"markdown","d5c78a0b":"markdown","9f6095a2":"markdown","eacf3266":"markdown","efa766b0":"markdown","26c41ef9":"markdown","69fdc73c":"markdown","d9138f35":"markdown","e008ee91":"markdown","bbc8a743":"markdown","e4d73535":"markdown","576e98e0":"markdown","e6c5238d":"markdown","78198713":"markdown","61e6a5b8":"markdown"},"source":{"e80f7034":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport json\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n# import os\n# print(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\nimport altair as alt # Plotting\nfrom  altair.vega import v3\nfrom IPython.display import display_html, HTML\n\n\n# alt.renderers.enable('notebook')\n# Workaround Source: https:\/\/www.kaggle.com\/notslush\/altair-visualization-2018-stackoverflow-survey\/notebook\n##-----------------------------------------------------------\n# This whole section \nvega_url = 'https:\/\/cdn.jsdelivr.net\/npm\/vega@' + v3.SCHEMA_VERSION\nvega_lib_url = 'https:\/\/cdn.jsdelivr.net\/npm\/vega-lib'\nvega_lite_url = 'https:\/\/cdn.jsdelivr.net\/npm\/vega-lite@' + alt.SCHEMA_VERSION\nvega_embed_url = 'https:\/\/cdn.jsdelivr.net\/npm\/vega-embed@3'\nnoext = \"?noext\"\n\npaths = {\n    'vega': vega_url + noext,\n    'vega-lib': vega_lib_url + noext,\n    'vega-lite': vega_lite_url + noext,\n    'vega-embed': vega_embed_url + noext\n}\n\nworkaround = \"\"\"\nrequirejs.config({{\n    baseUrl: 'https:\/\/cdn.jsdelivr.net\/npm\/',\n    paths: {}\n}});\n\"\"\"\n\n#------------------------------------------------ Defs for future rendering\ndef add_autoincrement(render_func):\n    # Keep track of unique <div\/> IDs\n    cache = {}\n    def wrapped(chart, id=\"vega-chart\", autoincrement=True):\n        if autoincrement:\n            if id in cache:\n                counter = 1 + cache[id]\n                cache[id] = counter\n            else:\n                cache[id] = 0\n            actual_id = id if cache[id] == 0 else id + '-' + str(cache[id])\n        else:\n            if id not in cache:\n                cache[id] = 0\n            actual_id = id\n        return render_func(chart, id=actual_id)\n    # Cache will stay outside and \n    return wrapped\n            \n@add_autoincrement\ndef render(chart, id=\"vega-chart\"):\n    chart_str = \"\"\"\n    <div id=\"{id}\"><\/div><script>\n    require([\"vega-embed\"], function(vg_embed) {{\n        const spec = {chart};     \n        vg_embed(\"#{id}\", spec, {{defaultStyle: true}}).catch(console.warn);\n        console.log(\"anything?\");\n    }});\n    console.log(\"really...anything?\");\n    <\/script>\n    \"\"\"\n    return HTML(\n        chart_str.format(\n            id=id,\n            chart=json.dumps(chart) if isinstance(chart, dict) else chart.to_json(indent=None)\n        )\n    )\n\nHTML(\"\".join((\n    \"<script>\",\n    workaround.format(json.dumps(paths)),\n    \"<\/script>\",\n    \"This code block sets up embedded rendering in HTML output and<br\/>\",\n    \"provides the function `render(chart, id='vega-chart')` for use below.\"\n)))\n\n","2bf7c1b0":"survey_2018 = pd.read_csv('..\/input\/multipleChoiceResponses.csv', encoding='iso-8859-1', skiprows=[1])\n# How many columns do we have\nprint('There are {} columns and {} rows'.format(len(survey_2018.columns), len(survey_2018)))\nsurvey_2018.head()","5ff7ebf7":"%%html\n<style>\n    .nb-pan-container {\n        display: flex;\n        flex-direction: row;\n    }  \n    \n.nb-page-title {\n    margin-top: 0;\n    margin-bottom: 10;\n    font-size: 2.0rem;\n    font-weight: 500;\n    line-height: 2.5rem;\n}\n\n.nb-card {\n    position: relative;\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    min-width: 0;\n    word-wrap: break-word;\n    background-color: #fff;\n    background-clip: border-box;\n    border: 1px solid rgba(0, 40, 100, 0.12);\n    border-radius: 3px;\n    width: 200px;\n    margin-right: 10px;\n}    \n\n.nb-card-body {\n    -ms-flex: 1 1 auto;\n    flex: 1 1 auto;\n    margin: 0;\n    padding: 1.5rem 1.5rem;\n    position: relative;\n}    \n\n.pan-text-center {\n    position: relative;\n    text-align: center !important;\n}\n\n.nb-keep-down {\n#     position: absolute;\n#     bottom: 0;\n#     left: 0;\n#     right: 0;\n}\n<\/style>","000de2ad":"# helper method\ndef html_card(category, value, pct):\n    card = \"\"\"\n    <div class='nb-pan-container'>\n        <div class='nb-card'>\n        <div class='nb-card-body pan-text-center'>\n    \"\"\"\n    card += \"<div class='h2 nb-page-title pane-text-center'>{}<\/div>\".format(category)\n    card += \"<div class='text-muted mb-4'>{}<\/div>\".format(value) \n    card += \"<div class='h3 pane-text-center'><div>{:.2f}%<\/div><\/div>\".format(pct)    \n    card += \"<\/div><\/div>\"\n    return card","37979deb":"panel1 = html_card('Female', len(survey_2018[survey_2018['Q1'] == 'Female']), 100 * len(survey_2018[survey_2018['Q1'] == 'Female'])\/len(survey_2018))\npanel2 = html_card('Male', len(survey_2018[survey_2018['Q1'] == 'Male']), 100 * len(survey_2018[survey_2018['Q1'] == 'Male'])\/len(survey_2018))\nothers_filter = (survey_2018['Q1'] == 'Prefer not to say') | (survey_2018['Q1'] == 'Prefer to self-describe')\npanel3 = html_card('Others', len(survey_2018[others_filter]), 100 * len(survey_2018[others_filter])\/len(survey_2018))\n\npanel = \"<div class='nb-pan-container'>{}{}{}<\/div>\".format(panel2, panel1, panel3)\ndisplay_html(panel, raw=True)","827fe670":"temp_df = survey_2018[survey_2018['Q1'] == 'Female'].groupby(['Q26','Q2'])['Q2'].agg('count').to_frame()\ntemp_df.columns = ['participants']\ntemp_df.reset_index().head()\n\nchart_female=alt.Chart(temp_df.reset_index()).mark_bar().encode(\n    alt.X(\"Q2\", title=\"Age\"),\n    alt.Y(\"participants\", title=\"Number of participants\"),\n    tooltip=['Q2', 'participants']\n    \n).properties(\n    title=\"Female participants\",    \n    width=250\n)\n\ntemp_df = survey_2018[survey_2018['Q1'] == 'Male'].groupby(['Q26','Q2'])['Q2'].agg('count').to_frame()\ntemp_df.columns = ['participants']\ntemp_df.reset_index().head()\n\nchart_male=alt.Chart(temp_df.reset_index()).mark_bar().encode(\n    alt.X(\"Q2\", title=\"Age\"),\n    alt.Y(\"participants\", title=\"Number of participants\"),\n    tooltip=['Q2', 'participants']\n    \n).properties(\n    title=\"Male participants\",\n    width=250\n)\n\nchart = chart_female | chart_male \nrender(chart, 'participants-by-gender')","53fe847d":"gender_df = survey_2018.groupby(['Q3'])['Q3'].agg('count').to_frame()\ngender_df.columns = ['participants']\ngender_df = gender_df.reset_index()\ngender_df['pct'] = gender_df.participants.apply(lambda x: 100 * x\/float(gender_df.participants.sum()))\n\nchart = alt.Chart(gender_df).mark_bar().encode(\n    alt.Y('sum(pct):Q', scale=alt.Scale(domain=[0,20]), title='Participants (%)'),\n    alt.X('Q3:N', sort=alt.EncodingSortField(field='pct', op='sum',  order='descending'), title=\"\"),    \n    tooltip=['sum(pct):Q']\n).properties(\n    title=\"Survey Participants\",\n    width=600\n)\nrender(chart, 'participants-country')","859f0457":"temp_df = survey_2018[survey_2018['Q2'] != '80+'].groupby(['Q3', 'Q1'])['Q1'].agg('count').to_frame()\ntemp_df = temp_df.groupby(level=0).apply(lambda x: 100 * (x\/x.sum()))\ntemp_df.columns = ['pct']\ntemp_df = temp_df.reset_index()\n\nchart = alt.Chart(temp_df.reset_index()).mark_bar().encode(\n    alt.X(\"Q3\", title=\"\"),\n    alt.Y(\"pct\", title=\"Participants(%)\", scale=alt.Scale(domain=[0,100])),\n    alt.Color(\"Q1:N\", title=\"Gender\"),\n    tooltip=['Q1', 'pct', 'Q3']\n    \n).properties(\n    width=600\n)\nrender(chart, 'country-gender')","c80fdb1a":"education_order = {\n    'I prefer not to answer': 0,\n    'No formal education past high school':1,\n    'Some college\/university study without earning a bachelor\u00e2\\x80\\x99s degree':2,\n    'Professional degree':3,\n    'Bachelor\u00e2\\x80\\x99s degree':4,\n    'Master\u00e2\\x80\\x99s degree':5,\n    'Doctoral degree':6\n}\n\ntemp_df = survey_2018[survey_2018['Q2'] != '80+'].groupby(['Q3', 'Q4'])['Q4'].agg('count').to_frame()\ntemp_df = temp_df.groupby(level=0).apply(lambda x: 100 * (x\/x.sum()))\ntemp_df.columns = ['pct']\ntemp_df = temp_df.reset_index()\ntemp_df['edu_order'] = temp_df.Q4.apply(lambda x: education_order[x])\n\n# sort on Y-axis does not work or I am doing it properly\nchart = alt.Chart(temp_df.reset_index()).mark_bar().encode(\n    alt.X(\"Q3\", title=\"\"),\n    alt.Y(\"pct\", title=\"Participants (%)\", sort=alt.EncodingSortField(field='edu_order', op='min',  order='descending'), scale=alt.Scale(domain=[0,100])),\n    alt.Color(\"Q4:N\", title=\"Formal Education\", sort=alt.EncodingSortField(field='edu_order', op='min',  order='descending')),\n    tooltip=[ 'Q4', 'pct', 'Q3']\n    \n).properties(\n    width=600,\n)\nrender(chart, 'country-education')","d308d3c0":"# Data for Doctoral degree\ntemp_df[temp_df['edu_order'] == 6].sort_values(by=['pct'], ascending=False).head(5)","d20c103d":"# Data for Masters degree\ntemp_df[temp_df['edu_order'] == 5].sort_values(by=['pct'], ascending=False).head(5)","8e27606b":"# Data for Bachelors degree\ntemp_df[temp_df['edu_order'] == 4].sort_values(by=['pct'], ascending=False).head(5)","71990651":"temp_df = survey_2018[survey_2018['Q2'] != '80+'].groupby(['Q4', 'Q3'])['Q3'].agg('count').to_frame()\ntemp_df = temp_df.groupby(level=0).apply(lambda x: 100 * (x\/x.sum()))\ntemp_df.columns = ['Participants']\ntemp_df = temp_df.reset_index()\ntemp_df\n\ndef plot_top_5_countries_by_degree(degree):\n    df = temp_df[temp_df['Q4'] == degree].nlargest(5, 'Participants')\n    chart = alt.Chart(df).mark_bar().encode(\n        alt.X('Participants:Q', title=\"\"),\n        alt.Y('Q3:N', sort=alt.EncodingSortField(field='Participants', op='sum',  order='descending'), title=\"\"),    \n        tooltip = ['Participants']\n    ).properties(\n        width=300,\n        title=\"{}\".format(degree)\n    )\n    return chart\n\nchart_row1 = (plot_top_5_countries_by_degree('Doctoral degree') | plot_top_5_countries_by_degree('Master\u00e2\\x80\\x99s degree'))\nchart_row2 = (plot_top_5_countries_by_degree('Bachelor\u00e2\\x80\\x99s degree') | plot_top_5_countries_by_degree('Professional degree'))\nchart_row3 = (plot_top_5_countries_by_degree('Some college\/university study without earning a bachelor\u00e2\\x80\\x99s degree') | plot_top_5_countries_by_degree('No formal education past high school'))\nchart_row4 = plot_top_5_countries_by_degree('I prefer not to answer') \n\nchart = chart_row1 & chart_row2 & chart_row3 & chart_row4\nrender(chart, 'top_5_countries_edu')","080ad7b3":"ds_resp = ['Definitely yes', 'Probably yes', 'Maybe', 'Probably not', 'Definitely not']\ntemp_df = survey_2018.groupby(['Q26'])['Q26'].agg('count').to_frame()\ntemp_df.columns = ['participants']\ntemp_df = temp_df.reset_index()\ntemp_df['pct'] = temp_df.participants.apply(lambda x: 100 * x\/float(temp_df.participants.sum()))\n\n# panels = []\n# for resp in ds_resp:\n#     num = temp_df[temp_df['Q26'] == resp]['participants'].iloc[0]\n#     pct = temp_df[temp_df['Q26'] == resp]['pct'].iloc[0]\n#     panels.append(html_card(resp, num, pct))\n    \n# panel = \"<div class='nb-pan-container'>{}{}{}{}{}<\/div>\".format(*panels)\n# display_html(panel, raw=True)\nchart = alt.Chart(temp_df).mark_bar().encode(\n    alt.X('pct:Q', title='Participants (%)'),\n    alt.Y('Q26', sort=alt.EncodingSortField(field='pct', op='min',  order='descending'), title=''),\n    tooltip = ['pct:Q']\n).properties(\n    width=500,\n    title='Do you consider yourself to be a Data Scientist ?'\n)\nrender(chart, 'are-you-ds')","b449bd7b":"temp_df = survey_2018.groupby(['Q2', 'Q26'])['Q2'].agg('count').to_frame()\ntemp_df.columns = ['participants']\ntemp_df['pct'] = temp_df.groupby(level=0).apply(lambda x: 100 * x\/float(x.sum()))\ntemp_df = temp_df.reset_index()\n\nchart = alt.Chart(temp_df).mark_bar().encode(\n    alt.X(\"Q2:N\", title=\"Age\"),\n    alt.Y(\"pct:Q\", title=\"Participants (%)\", scale=alt.Scale(domain=[0, 100])),\n    alt.Color(\"Q26:N\", title=\"Data Scientist ?\"),\n    tooltip=['Q2:N', 'pct:Q', 'Q26:N']\n    \n).properties(\n    width=600,\n    title='Do you consider yourself to be a Data Scientist ?'\n    \n)\n\nrender(chart, 'ds-by-age')","a139db46":"ds_group = {\n    'Definitely not': 'No',\n    'Probably not': 'No',\n    'Maybe': 'Maybe',\n    'Probably yes': 'Yes',\n    'Definitely yes': 'Yes'\n}\n\n\ntemp_df = survey_2018.loc[:, ['Q2', 'Q26']]\ntemp_df = temp_df[pd.isna(temp_df['Q26']) == False]\ntemp_df['ds_group'] = temp_df.Q26.apply(lambda x: ds_group[x])\ntemp_df = temp_df.groupby(['Q2', 'ds_group'])['Q2'].agg('count').to_frame()\ntemp_df.columns = ['participants']\ntemp_df['pct'] = temp_df.groupby(level=0).apply(lambda x: 100 * x\/float(x.sum()))\ntemp_df = temp_df.reset_index()\n\nchart = alt.Chart(temp_df).mark_bar().encode(\n    alt.X(\"Q2:N\", title=\"Age\"),\n    alt.Y(\"pct:Q\", title=\"Participants (%)\", scale=alt.Scale(domain=[0, 100])),\n    alt.Color(\"ds_group:N\", title=\"Data Scientist ?\"),\n    tooltip=['Q2:N', 'pct:Q', 'ds_group:N']    \n).properties(\n    width=600,\n    title='Do you consider yourself to be a Data Scientist ?'   \n)\n\ndata2 = pd.DataFrame([{\"ThresholdValue\": 50}])\nrule = alt.Chart(data2).mark_rule(color='purple').encode(\n    y='ThresholdValue',\n    size=alt.value(2)\n)\n\nnewchart = chart + rule\nrender(newchart, 'ds-by-age')","d4ce15b2":"def get_data(gender):\n    temp_df = survey_2018[survey_2018['Q1'] == gender].loc[:, ['Q2', 'Q26']]\n    temp_df = temp_df[pd.isna(temp_df['Q26']) == False]\n    temp_df['ds_group'] = temp_df.Q26.apply(lambda x: ds_group[x])\n    temp_df = temp_df.groupby(['Q2', 'ds_group'])['Q2'].agg('count').to_frame()\n    temp_df.columns = ['participants']\n    temp_df['pct'] = temp_df.groupby(level=0).apply(lambda x: 100 * x\/float(x.sum()))\n    return temp_df.reset_index()\n\ntemp_df = get_data('Female')\nchart_female = alt.Chart(temp_df.reset_index()).mark_bar().encode(\n    alt.X(\"Q2:N\", title=\"Age\"),\n    alt.Y(\"pct:Q\", title=\"Participants (%)\", scale=alt.Scale(domain=[0, 100])),\n    alt.Color(\"ds_group:N\", title=\"Data Scientist ?\"),\n    tooltip=['Q2:N', 'pct:Q', 'ds_group:N']    \n).properties(\n    title='Female',\n    width=300\n)\n\ntemp_df = get_data('Male')\nchart_male=alt.Chart(temp_df.reset_index()).mark_bar().encode(\n    alt.X(\"Q2:N\", title=\"Age\"),\n    alt.Y(\"pct:Q\", title=\"Participants (%)\", scale=alt.Scale(domain=[0, 100])),\n    alt.Color(\"ds_group:N\", title=\"Data Scientist ?\"),\n    tooltip=['Q2:N', 'pct:Q', 'ds_group:N']    \n).properties(\n    title='Male',\n    width=300\n)\n\ndata2 = pd.DataFrame([{\"ThresholdValue\": 50}])\nrule = alt.Chart(data2).mark_rule(color='purple').encode(\n    y='ThresholdValue',\n    size=alt.value(2)\n)\n\nchart = chart_female+rule | chart_male+rule\n\nrender(chart, 'gender_age_ds')","cde11f0a":"salary_order = {\n    '0-10,000': 0,\n    '10-20,000': 1, \n    '20-30,000': 2,\n    '30-40,000': 3, \n    '40-50,000': 4, \n    '50-60,000': 5,\n    '60-70,000': 6,\n    '70-80,000': 7, \n    '80-90,000': 8, \n    '90-100,000': 9,\n    '100-125,000': 10, \n    '125-150,000': 11,\n    '150-200,000': 12,\n    '200-250,000': 13, \n    '250-300,000': 14,\n    '300-400,000': 15, \n    '400-500,000': 16,\n    '500,000+': 17,\n    'I do not wish to disclose my approximate yearly compensation': -1,       \n}\n\nsalary_unbin = {\n    '0-10,000': 10000,\n    '10-20,000': 20000, \n    '20-30,000': 30000,\n    '30-40,000': 40000, \n    '40-50,000': 50000, \n    '50-60,000': 60000,\n    '60-70,000': 70000,\n    '70-80,000': 80000, \n    '80-90,000': 90000, \n    '90-100,000': 100000,\n    '100-125,000': 125000, \n    '125-150,000': 150000,\n    '150-200,000': 200000,\n    '200-250,000': 250000, \n    '250-300,000': 300000,\n    '300-400,000': 400000, \n    '400-500,000': 500000,\n    '500,000+': 600000,\n}\n\ntemp_df = survey_2018.groupby(['Q2', 'Q9'])['Q9'].agg('count').to_frame()\ntemp_df.columns = ['participants']\ntemp_df['pct'] = temp_df.groupby(level=0).apply(lambda x: 100 * x\/float(x.sum()))\ntemp_df = temp_df.reset_index()\ntemp_df['salary_order'] = temp_df.Q9.apply(lambda x: salary_order[x])\n\nchart = alt.Chart(temp_df.reset_index()).mark_area().encode(\n    alt.X(\"Q2:N\", title=\"Age\"),\n    alt.Y(\"pct:Q\", title=\"Participants (%)\", scale=alt.Scale(domain=[0, 100])),\n    alt.Color(\"Q9:N\", title=\"Salary\", sort=alt.EncodingSortField(field='salary_order', op='min',  order='ascending'), scale=alt.Scale(scheme=\"category20\")),\n    tooltip=['Q2:N', 'pct:Q', 'Q9:N']\n).properties(\n    width=500\n)\nrender(chart, 'salary-age')","ccef5b8b":"salary_grouped_order = {\n    '0-20,000': 0,\n    '20-50,000': 1, \n    '50-100,000': 2,\n    '100-150,000': 3, \n    '150-300,000': 4, \n    '300-500,000': 5,\n    '500,000+': 6,\n    'Undisclosed': -1,       \n}\n\nsalary_group = {\n    '0-10,000': '0-20,000',\n    '10-20,000': '0-20,000', \n    '20-30,000': '20-50,000',\n    '30-40,000': '20-50,000',\n    '40-50,000': '20-50,000',\n    '50-60,000': '50-100,000',\n    '60-70,000': '50-100,000',\n    '70-80,000': '50-100,000',\n    '80-90,000': '50-100,000',\n    '90-100,000': '50-100,000',\n    '100-125,000': '100-150,000',\n    '125-150,000': '100-150,000',\n    '150-200,000': '150-300,000',\n    '200-250,000': '150-300,000',\n    '250-300,000': '150-300,000',\n    '300-400,000': '300-500,000',\n    '400-500,000': '300-500,000',\n    '500,000+': '500,000+',\n    'I do not wish to disclose my approximate yearly compensation' : 'Undisclosed',\n}\n\ntemp_df = survey_2018.loc[:, ['Q2', 'Q9']]\ntemp_df = temp_df[pd.isna(temp_df['Q9']) == False]\ntemp_df['salary_group'] = temp_df.Q9.apply(lambda x: salary_group[x])\ntemp_df = temp_df.groupby(['Q2', 'salary_group'])['salary_group'].agg('count').to_frame()\ntemp_df.columns = ['participants']\ntemp_df['pct'] = temp_df.groupby(level=0).apply(lambda x: 100 * x\/float(x.sum()))\ntemp_df = temp_df.reset_index()\ntemp_df['salary_order'] = temp_df.salary_group.apply(lambda x: salary_grouped_order[x])\n\nchart = alt.Chart(temp_df.reset_index()).mark_area().encode(\n    alt.X(\"Q2:N\", title=\"Age\"),\n    alt.Y(\"pct:Q\", title=\"Participants (%)\", scale=alt.Scale(domain=[0, 100])),\n    alt.Color(\"salary_group:N\", title=\"Salary\", sort=alt.EncodingSortField(field='salary_order', op='min',  order='ascending')),\n    tooltip=['Q2:N', 'pct:Q', 'salary_group:N']\n).properties(\n    width=500\n)\nrender(chart, 'salary-age-2')","16d173fb":"alt.data_transformers.enable('default', max_rows=None)\ndef _salary_data():\n    filter_criteria = (survey_2018['Q2'] != '80+') \\\n        & (survey_2018['Q9'] != 'I do not wish to disclose my approximate yearly compensation') \\\n        & (survey_2018['Q1'].isin(['Male', 'Female']))         \n    temp_df = survey_2018[filter_criteria].loc[:, ['Q1', 'Q2', 'Q9', 'Q3']]\n    temp_df.dropna(inplace=True)\n    temp_df['salary_upper'] = temp_df.Q9.apply(lambda x: salary_unbin[x])\n    return temp_df\n\n\ntemp_df = _salary_data()\n\nchart = alt.Chart(temp_df).mark_bar(stroke='transparent').encode(\n    alt.X('Q1:N', scale=alt.Scale(rangeStep=12), axis=alt.Axis(title='')),\n    alt.Y('median(salary_upper):Q', axis=alt.Axis(title='Salary (USD)', grid=False)),\n    color=alt.Color('Q1:N', scale=alt.Scale(range=[\"#EA98D2\", \"#659CCA\"]), title='Gender'),\n    column=alt.Column('Q2:O', title='Age'),\n    tooltip=['Q1', 'median(salary_upper):Q']\n).configure_view(\n    stroke='transparent'\n).configure_axis(\n    domainWidth=0.8\n).properties(\n    title=''\n)\n\nrender(chart, 'salary-gender-age')","61752c05":"filter_criteria = (survey_2018['Q2'] != '80+') & (survey_2018['Q9'] != 'I do not wish to disclose my approximate yearly compensation')\ntemp_df = survey_2018[filter_criteria].loc[:, ['Q1', 'Q7', 'Q9']]\ntemp_df.dropna(inplace=True)\ntemp_df['salary_upper'] = temp_df.Q9.apply(lambda x: salary_unbin[x])\n\ntitle = alt.Axis(title='Median Salary(USD)')\ncolor_scale = alt.Scale(domain=['Male', 'Female'],\n                        range=['#1f77b4', '#e377c2'])\n\n\nleft = alt.Chart(temp_df).transform_filter(\n     alt.FieldEqualPredicate(field='Q1', equal='Female')\n).encode(\n    y=alt.X('Q7:O', axis=None),\n    x=alt.X('median(salary_upper):Q', axis=title, sort=alt.SortOrder('descending'), scale=alt.Scale(domain=[0,90000])),\n    color=alt.Color('Q1:N', scale=color_scale, legend=None),\n    tooltip=['median(salary_upper)']\n).mark_bar().properties(title='Female')\n\nmiddle = alt.Chart(temp_df).encode(\n    y=alt.X('Q7', axis=None),\n    text=alt.Text('Q7'),\n).mark_text().properties(width=200)\n\nright = alt.Chart(temp_df).transform_filter(\n#     datum.Q1 == 'Male'\n     alt.FieldEqualPredicate(field='Q1', equal='Male')    \n).encode(\n    y=alt.X('Q7:O', axis=None),\n    x=alt.X('median(salary_upper):Q', axis=title, scale=alt.Scale(domain=[0,90000])),\n    color=alt.Color('Q1:N', scale=color_scale, legend=None),\n    tooltip=['median(salary_upper)']\n).mark_bar().properties(title='Male')\n\nchart = left | middle | right\nchart.properties(\nwidth=600\n)\nrender(chart, 'salary-gender-industry')","db1e0bfb":"# By gender\nfilter_criteria = (survey_2018['Q1'].isin(['Male', 'Female']))     \ntemp_df = survey_2018[filter_criteria].loc[:, ['Q1', 'Q2', 'Q41_Part_1']]\ntemp_df = temp_df.groupby(['Q1', 'Q41_Part_1'])['Q41_Part_1'].agg('count').to_frame()\ntemp_df.columns = ['Participants']\ntemp_df = temp_df.groupby(level=0).apply(lambda x: 100 * x\/float(x.sum()))\ntemp_df = temp_df.reset_index()\n\nchart = alt.Chart(temp_df).mark_bar(stroke='transparent').encode(\n    alt.X('Q1:N', scale=alt.Scale(rangeStep=12), axis=alt.Axis(title='')),\n    alt.Y('Participants:Q', axis=alt.Axis(title='Participants (%)', grid=False)),\n    color=alt.Color('Q1:N', scale=alt.Scale(range=[\"#EA98D2\", \"#659CCA\"])),\n    column=alt.Column('Q41_Part_1:N', title=''),\n    tooltip=['Q1', 'Participants:Q']\n).configure_view(\n    stroke='transparent'\n).configure_axis(\n    domainWidth=0.8\n).properties(\n    width=100,\n    title='Importance of fairness and bias in ML algorithms'\n)\nrender(chart, 'fairness-importance-gender')","8cfe320c":"temp_df = survey_2018.groupby(['Q2', 'Q41_Part_1'])['Q2'].agg('count').to_frame()\ntemp_df.columns = ['participants']\ntemp_df['pct'] = temp_df.groupby(level=0).apply(lambda x: 100 * x\/float(x.sum()))\ntemp_df.reset_index().head()\n# tmp = temp_df.reset_index()\n# print(tmp[tmp['Q2'] == '80+'])\n\n\nchart = alt.Chart(temp_df.reset_index()).mark_bar().encode(\n    alt.X(\"Q2\", title=\"Age\"),\n    alt.Y(\"pct\", title=\"Participants (%)\", scale=alt.Scale(domain=[0, 100])),\n    alt.Color(\"Q41_Part_1:N\", title=\"Fairness & Bias\"),\n    tooltip=['Q2', 'pct', 'Q41_Part_1']\n    \n).properties(\n    title='Importance of fairness and bias in ML algorithms',\n    width=400\n)\nrender(chart, 'fairness-importance-age')","ee9e8e40":"temp_df = survey_2018.groupby(['Q7', 'Q41_Part_1'])['Q7'].agg('count').to_frame()\ntemp_df.columns = ['participants']\ntemp_df['pct'] = temp_df.groupby(level=0).apply(lambda x: 100 * x\/float(x.sum()))\ntemp_df.reset_index().head()\n# tmp = temp_df.reset_index()\n# print(tmp[tmp['Q2'] == '80+'])\n\n\nchart = alt.Chart(temp_df.reset_index()).mark_bar().encode(\n    alt.X(\"Q7\", title=\"Industry\"),\n    alt.Y(\"pct\", title=\"Participants (%)\", scale=alt.Scale(domain=[0, 100])),\n    alt.Color(\"Q41_Part_1:N\", title=\"Fairness & Bias\"),\n    tooltip=['Q7', 'pct', 'Q41_Part_1']\n    \n).properties(\n    title='Importance of fairness and bias in ML algorithms',\n    width=400\n)\nrender(chart, 'fairness-importance-industry')","c1256d66":"temp_df = survey_2018.groupby(['Q43'])['Q43'].agg('count').to_frame()\ntemp_df = temp_df.groupby(level=0).apply(lambda x: 100 * (x\/len(survey_2018)))\ntemp_df.columns = ['Participants']\ntemp_df = temp_df.reset_index()\n\nchart = alt.Chart(temp_df).mark_bar().encode(\n    alt.X('Participants:Q', title=\"Participants(%)\"),\n    alt.Y('Q43:N', sort=alt.EncodingSortField(field='Participants', op='sum',  order='descending'), title=\"\"),      \n    tooltip = 'Participants'\n).properties(\n    title='Percent of data projects involved exploring unfair bias in the dataset\/algorithm',    \n)\nrender(chart, 'unfair-bias-pct')","dc8698e9":"# how about using industry\nindus_group = {\n    \"0\": \"0\",\n    \"0-10\": \"0-10\",\n    \"10-20\": \"10-30\",\n    \"20-30\": \"10-30\",    \n    \"30-40\": \"30-60\",\n    \"40-50\": \"30-60\",\n    \"50-60\": \"30-60\",    \n    \"60-70\": \"60-90\",\n    \"70-80\": \"60-90\",\n    \"80-90\": \"60-90\",\n    \"90-100\": \"90-100\"\n}\ntemp_df = survey_2018.loc[:, ['Q7', 'Q43']].dropna(inplace=False)\ntemp_df['indus_group'] = temp_df['Q43'].apply(lambda x: indus_group[x])\ntemp_df = temp_df.groupby(['Q7', 'indus_group'])['Q7'].agg('count').to_frame()\ntemp_df.columns = ['participants']\ntemp_df['pct'] = temp_df.groupby(level=0).apply(lambda x: 100 * x\/float(x.sum()))\ntemp_df = temp_df.reset_index()\n# temp_df\n\nchart = alt.Chart(temp_df).mark_rect().encode(\n    alt.X('Q7:N', axis=alt.Axis(title='')),\n    alt.Y('indus_group', axis=alt.Axis(title='(%) Projects with bias consideration', grid=False)),\n    color=alt.Color('pct',scale=alt.Scale(scheme=\"greenblue\")),\n    tooltip=['Q7', 'indus_group', 'pct']\n).properties (\n    width=600,\n    height=300\n)\n\nrender(chart, 'unfair-bias-indus')","cc7ad8b5":"label_dict = {\n    'Lack of communication between individuals who collect the data and individuals who analyze the data': 'Lack of communication',\n    'Difficulty in collecting enough data about groups that may be unfairly targeted': 'Difficult data collection',\n    'Difficulty in identifying and selecting the appropriate evaluation metrics': 'Difficult evaluation metrics',\n    'I have never found any difficulty in this task': 'Not found difficult',\n    'I have never performed this task': 'Never performed',\n    'Difficulty in identifying groups that are unfairly targeted': 'Difficult identifying unfair groups'}\n\n\ntemp_df = survey_2018.loc[:, ['Q1', 'Q2', 'Q44_Part_1', 'Q44_Part_2', 'Q44_Part_3', 'Q44_Part_4', 'Q44_Part_5', 'Q44_Part_6']]\ntemp_df = temp_df.melt(\n    id_vars=['Q1', 'Q2'], \n    value_vars=['Q44_Part_1', 'Q44_Part_2', 'Q44_Part_3', 'Q44_Part_4', 'Q44_Part_5', 'Q44_Part_6'],\n    var_name='question',value_name='answer'\n            ).dropna()\n\ntemp_df = temp_df.groupby(['answer'])['answer'].agg('count').to_frame()\ntemp_df.columns = ['Participants']\ntemp_df['pct'] = temp_df.groupby(level=0).apply(lambda x: 100 * x\/float(temp_df.Participants.sum()))\ntemp_df = temp_df.reset_index()\ntemp_df['answer_code'] = temp_df.answer.apply(lambda x: label_dict[x])\n\nchart = alt.Chart(temp_df).mark_bar().encode(\n    alt.X('pct:Q', title='Participants (%)'),\n    alt.Y('answer_code', sort=alt.EncodingSortField(field='pct', op='min',  order='descending'), title=''),\n    tooltip = ['pct:Q']\n).properties(\n    width=500,\n    title='Most difficult about ensuring that algorithms are fair and unbiased'\n)\nrender(chart, 'difficult-algo-fair')","427eb263":"We find that most participants find data collection and coming up with evaluation metrics to be difficult in order to ensure algorithms are fair and unbiased. This perhaps provide some information on why large number of participants (44%) said that less than 30% of their data projects explore unfair bias.","5b6cc1b2":"Government\/Public Service and Non-profit\/Service has the highest percentage (65%)  of participants who consider it to be very important topic but other industries aren't far behind at 50%-60%.","5e45953f":"Next, we compare the median salaries by age group and gender. We see that, at certain age groups there are differences in the male and female salaries, but we should note that this observation along with others in this notebook is limited to 2018 Kaggle survey and that females participants make up only 18% (under-represented) of overall participation. We could explore the salary comparison at gender and country level but that is perhaps for another notebook.","989b3b63":"There were 23,859 participants in  the 2018 Kaggle ML & DS Survey","93ef294f":"Moving on to the question of who considers themselves to be a Data Scientist, this is what the respondents think","7454f890":"At Country level, we see that United States of America has the most number participants, followed by India and China.","ac577411":"Next, we compare the annual compensation by industry and observe that\n* The highest median salary (80,000) for Female participants is more than the highest median salary (70,000) for Male participants\n* Female participants report higher median salary in Shipping\/Transporation (90,000), Broadcasting\/Communication (80,000), Hospitality\/Entertainment\/Sport (80,000) and Military\/Security\/Defense (80,000)\n* Male participants report higher median salary in Insurance\/Risk Assessment (70,000)","4d3aade8":"In this notebook, I explore the survey response through the lens of gender and age. Given the large amout of survey questions, I have limited my exploration to \n* Country level representation\n* Who considers themselves to be a Data Scientist\n* Salary \n* Fairness and Bias ","9f32b1c7":"Zooming out on the salaries, by merging them together, we see that salaries tend to increase with age. ","d5c78a0b":"## Fairness and Bias\n\n65% of female participants and 56% of male participants consider fairness and bias to be very important in machine learning algorithms. And, less than 10% of participants do not know or have no opinion.","9f6095a2":"However, If we zoom out a bit, by merging 'Definitely' and 'Probably' categories into one, we see that approximately 50% of the participants from most age-groups consider themselves to be a Data Scientist. The group 18-21 at 41% has the lowest number of participants that consider themselves to be a Data Scientist.","eacf3266":"And, across all age groups more than 50% of participants consider it to be very important.","efa766b0":"We find that a large number of data projects spend no to very few percent exploring unfair bias in the dataset and\/or algorithm.\n* 16% participants said their data projects do not explore unfair bias \n* 30% participants said less than 10% of their data projects explore unfair bias \n* 44% participants said less than 30% of their data projects explore unfair bias ","26c41ef9":"## Salary\n\nMoving on to Salary, we observe : \n* Most percentage of participants do not wish to disclose their annual compensation are from the groups 18-24 and 70+. Could this be because they are either studying, newly employed or retired ?\n* The salary range 0-20,000 goes down as the age increases\n* Higher salaries show up and move along the age","69fdc73c":"Adding age group to the question, we see that it gets difficult to understand the response","d9138f35":"Despite highly imbalanced gender representation, we see that age distribution is very similar for both Male and Female participants. The majority of participants are between 22 and 34 years old. ","e008ee91":"Next, we group all survey participants by their formal education and plot the Top 5 countries with in category. This is different from the plot above, where we looked at all participants with in a country. For example, of all the participants with Doctoral degree, 25% (maximum) are from the United States of America.","bbc8a743":"Adding gender, we see that 100% of Male participants from 80+ age consider themselves to be a Data Scientist. And, 100% of female participants from 70-79 age group consider themselves to be a Data Scientist.","e4d73535":"Zooming in a bit, at gender level representation in each Country, we observe:\n* The group of people who chose not to disclose their location, has the highest percentage (13%) who prefer not to provide gender information\n* Tunisia has the highest female participation (31%) among its overall participants, followed by Malaysia (27%) and Egypt (23%)","576e98e0":"In terms of formal education, we see that large number of participants from each country have either Master or Bachelor degree.\n* Morrocco has the highest number of participants with Doctoral degree (30%) among its overall participants, followed by Switzerland (29%) and Germany (27%)\n* France has the highest number of participants with Master's degree (70%), followed by Iran (67%) and Belgium (65%)\n* Nigeria has the highest number of participants with Bachelor's degree (59%), followed by Kenya (53%) and Egypt (52%)\n\n<small>(You can hover over the bars to see the details) <\/small>","e6c5238d":"Let us begin","78198713":"Drilling down by industry does not seem to provide any more insights than uncovered above.","61e6a5b8":"And, that brings it to the end of this notebook. Hope you found it useful. Thank you for reading."}}