{"cell_type":{"4cd0b3cc":"code","e5fe794d":"code","a379b28a":"code","aa72bb6d":"code","92979c70":"code","d5660289":"code","adae7abe":"code","f6572d7c":"code","2611461f":"code","49fcf8cc":"code","a4cc5ff9":"code","9d5a40f4":"code","42c05b64":"code","53d1e403":"code","7415c457":"code","ba0a8a17":"code","44d8e9c4":"code","6af036e6":"code","9fe04f71":"code","62000115":"code","45ceb5c0":"code","8cb4629f":"code","a1631eaa":"code","65a98801":"code","b5886621":"code","0279fca9":"code","1c39a169":"code","ad69a383":"code","eb0ddabf":"markdown"},"source":{"4cd0b3cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e5fe794d":"import pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a379b28a":"case_data=pd.read_csv(\"..\/input\/coronaviruscovid19-canada\/cases.csv\")\nmort_data=pd.read_csv(\"..\/input\/coronaviruscovid19-canada\/mortality.csv\")\nrecov_data=pd.read_csv(\"..\/input\/coronaviruscovid19-canada\/recovered.csv\")\ntest_data=pd.read_csv(\"..\/input\/coronaviruscovid19-canada\/testing.csv\")","aa72bb6d":"pro_data=case_data['province'].value_counts(ascending=False).to_frame()\npro_data=pro_data.reset_index()\npro_data.columns=['province', 'Cases']\n","92979c70":"sns.set(style=\"whitegrid\")\nax = sns.barplot(x=pro_data.province, y=pro_data.Cases)\nax.set_xticklabels(ax.get_xticklabels(), rotation=45)","d5660289":"case_data.replace('Not Reported', np.nan, inplace=True)\nage_data=case_data['age'].value_counts(dropna=True, ascending=False).to_frame()\nage_data=age_data.reset_index()\nage_data.columns=['Age_Range', 'Cases']\nage_data=age_data.drop(age_data.index[9:16])\nage_data['Age_Range'].replace({\"<20\" :\"0-20\"}, inplace=True)\nage_data=age_data.sort_values('Age_Range')\nage_data['Percentage']=((age_data.Cases\/age_data.Cases.sum())*100).round(1).astype(str)+\"%\"","adae7abe":"labels=age_data.Age_Range\nexplode=[0,0,0,0.1,0.1,0,0,0,0,0,0,0,0,0,0]\ncolor_list=['gold', 'yellowgreen', 'lightskyblue', 'lightgreen', 'pink', 'red', 'lightcoral', 'purple', 'cyan']\nfig,ax1=plt.subplots(figsize=(24,12))\nax1.pie(age_data['Cases'],labels=labels, autopct='%.1f%%',\n        explode=explode, shadow=True, colors=color_list)\nplt.title('Percentage of Cases by Group Age')\nax1.legend(labels, loc=\"upper right\")","f6572d7c":"pro_recov=recov_data.loc[(recov_data['date_recovered']=='2020-04-03')]\npro_recov=pro_recov.drop(['province_source', 'source','date_recovered'], axis=1).reset_index(drop=True)\npro_recov.dropna(inplace=True)\npro_recov=pro_recov.rename(columns={'cumulative_recovered':'recovered'})","2611461f":"death_data=mort_data['province'].value_counts(ascending=False).to_frame()\ndeath_data.reset_index(inplace=True)\ndeath_data=death_data.rename(columns={'index':'province', 'province':'death'})\n#pro_recov['death']=pro_recov.merge(death_data, on=\"province\")['death']","49fcf8cc":"result=pd.merge(death_data, pro_recov, on='province')\nFinal_data=pro_data.merge(death_data.merge(pro_recov, on='province'), on='province')","a4cc5ff9":"pro_data.plot(kind=\"barh\", figsize=(10,6), x='province', y='Cases')\nplt.title('Number of Confirmed Cases in Provinces')\nplt.xlabel('Number of Cases')\nplt.ylabel('Provinces')","9d5a40f4":"pro_test=test_data.loc[(test_data['date_testing']=='2020-04-03')]\npro_test=pro_test.drop(['date_testing', 'province_source', 'source'], axis=1)\npro_test=pro_test.rename(columns={'cumulative_testing':'tested'})","42c05b64":"#Final_data.loc['Canada']=Final_data.sum()\n#Final_data.reset_index(inplace=True, drop=True)\nFinal_data.loc['Canada']=Final_data.select_dtypes(pd.np.number).sum()\nFinal_data.reset_index(inplace=True, drop=True)\nFinal_data.fillna('Canada', inplace=True)","53d1e403":"Final_data.set_index('province', inplace=True)","7415c457":"#pie_data=Final_data.loc[['BC', 'Quebec','Ontario', 'Alberta']]\n#color=['lightblue','r','lightgreen']\n#label=['Active', 'Death', 'Cured']\n#pie_data.T.plot.pie(subplots=True, figsize=(24,12),\n                  #  colors=color, layout=(2,2),\n                  #    legend=False, labels=label, autopct='%.1f%%',\n                 #  title='Number of Active, Cured & Death Cases in Selected Provinces')","ba0a8a17":"####Trend of Covid 19\ntrend_data=case_data['date_report'].value_counts(ascending=True).to_frame().reset_index()\ntrend_data=trend_data.rename(columns={'index':'Date_reported', 'date_report':'Number_of_Cases'})\n\n\ntrend_data.plot(kind=\"line\", figsize=(10,6), x='Date_reported', y='Number_of_Cases', linewidth=2.5, color='maroon')\nplt.title('Number of Coronvirus Positive Cases Over Time')\nplt.xlabel('Day')\nplt.ylabel('Number of Cases')\n\ndeath_trend=mort_data['date_death_report'].value_counts(ascending=True).to_frame().reset_index()\ndeath_trend=death_trend.rename(columns={'index':'Date_reported', 'date_death_report':'Number_of_death'})\ndeath_trend.plot(kind='line', figsize=(10,6), x='Date_reported', y='Number_of_death', linewidth=2.5, color='coral')\nplt.title('Number of Death Over Time')\nplt.xlabel('Day')\nplt.ylabel('Number of Death')\n","44d8e9c4":"case_data.head()","6af036e6":"case_map=case_data.drop(['age', 'sex', 'health_region', 'country', 'travel_yn', 'travel_history_country','locally_acquired','case_source', 'additional_info', 'additional_source','method_note','case_id', 'provincial_case_id','report_week'], axis=1)\ncase_map=case_map.rename(columns={'province':'Provinces'})","9fe04f71":"case_map.head(20)","62000115":"map_final=case_map.groupby(['date_report'])['Provinces'].value_counts().to_frame()\n","45ceb5c0":"map_final=map_final.rename(columns={'Provinces':'Confirmed'})\nmap_final.head()","8cb4629f":"map_final1=map_final.reset_index()","a1631eaa":"map_final1.head()","65a98801":"Lon_data={'Ontario':-85.000000, 'BC':-127.647621,'Quebec':-70.000000,'Alberta':-115.000000,'Saskatchewan': -106.000000,\n         'Nova Scotia':63.000000,'NL':-60.000000, 'Manitoba':-98.813873, 'New Brunswick':-66.159668, 'PEI':-63.000000,\n         'Yukon':-135.000000, 'NWT':-114.371788}\n\nLat_data={'Ontario':50.000000, 'BC':53.726669,'Quebec':53.000000,'Alberta':55.000000,'Saskatchewan':55.000000,\n         'Nova Scotia':45.000000,'NL':53.000000, 'Manitoba':53.760860, 'New Brunswick':46.498390, 'PEI':46.250000,\n         'Yukon':64.000000, 'NWT':69.445358}","b5886621":"map_final1['Lon']=map_final1['Provinces'].map(Lon_data)\nmap_final1['Lat']=map_final1['Provinces'].map(Lat_data)\n\nmap_final1.head()","0279fca9":"import plotly.express as px\nfrom plotly.offline import init_notebook_mode\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)\n#map_final1['date_report'] = map_final1['date_report'].dt.strftime('%Y\/%m\/%d')\nfig = px.scatter_geo(map_final1,lat=\"Lat\", lon=\"Lon\", color='Confirmed', size='Confirmed', \n                     projection=\"natural earth\",\n                     hover_name=\"Provinces\", scope='north america', animation_frame=\"date_report\", \n                     range_color=[0, max(map_final1['Confirmed'])], title='Tend of Covid 19 through the time')\n#fig.update_layout(plot_bgcolor='rgb(275, 270, 273)')\n\nfig.show()\nmap_final1.to_csv('covid_19_canada.csv')\n","1c39a169":"pro_data['Lon']=pro_data['province'].map(Lon_data)\npro_data['Lat']=pro_data['province'].map(Lat_data)\npro_data.dropna(inplace=True)\npro_data=pro_data.reset_index(drop=True)\npro_data.head(20)","ad69a383":"import folium\nmap=folium.Map(location=[55.585901, -105.750596], zoom_start=6,max_zoom=4,min_zoom=3, \n                   tiles = \"CartoDB dark_matter\",height = 800,width = '100%')\nfor i in range (0, len(pro_data)):\n    folium.Circle(\n        location=[pro_data.iloc[i]['Lat'], pro_data.iloc[i]['Lon']],\n        popup=pro_data.iloc[i]['province'],\n        radius=pro_data.iloc[i]['Cases']*10,\n         tooltip= \"<h5 style='text-align:center;font-weight: bold'>\"+pro_data.iloc[i].province+\"<\/h5>\"+\n                    \"<hr style='margin:10px;'>\"+\n                   \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n       \"<li>Cases: \"+str(pro_data.iloc[i]['Cases'])+\"<\/li>\",\n        color='crimson',\n        fill=True,\n        fill_color='green').add_to(map)\npro_data['Cases']=pro_data.Cases.astype(float)    \nmap.save('mymap.html')\nmap\n","eb0ddabf":"****Demographic Visulazition****\n"}}