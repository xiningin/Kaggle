{"cell_type":{"3c3a2030":"code","e79401ba":"code","ebc1979d":"code","f48a0b23":"code","24d0e4fa":"code","65d594e7":"code","e068455e":"code","9a104b78":"code","d00003c5":"code","2335f9d5":"code","df781595":"code","6c99cf1d":"code","a6ae1a56":"code","c575ad3a":"code","4f2a9e76":"code","0f95af86":"code","50b82636":"code","9c881541":"code","80a7f102":"code","15915273":"code","7a907d42":"markdown","fafd2e6b":"markdown","2315d4e1":"markdown","4f6642c0":"markdown","fe832d0a":"markdown","0c58c75b":"markdown","2767f29a":"markdown","eabea422":"markdown","bf976471":"markdown","b1c07827":"markdown","58ee7a67":"markdown","8bcab7e0":"markdown","cc17cec4":"markdown","2d64c5ee":"markdown","c1dd7d4b":"markdown","866d998c":"markdown","527bf9d2":"markdown","8de09963":"markdown","486e7c5d":"markdown","1a78d2a2":"markdown","81dbf0b0":"markdown","a2cb996c":"markdown","272edad1":"markdown","90ed61db":"markdown","0bc085b2":"markdown","53025e1d":"markdown","197f4fbc":"markdown","2d15f9d5":"markdown","84033e4c":"markdown","9c5ffdba":"markdown","914074f4":"markdown","b853312a":"markdown","2afd6d60":"markdown","ff34088e":"markdown","0d4528bf":"markdown","9ddd8a9f":"markdown","3018c7f9":"markdown","52797480":"markdown","4c0ab5ce":"markdown","0c51b89b":"markdown","fccbf8d8":"markdown","8df48675":"markdown"},"source":{"3c3a2030":"!pip install venn -q\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nfrom scipy.stats import chi2_contingency, chisquare\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error as mse\nimport lightgbm as lgb\nfrom sklearn.preprocessing import LabelEncoder\nfrom venn import venn\nimport plotly.express as px\nfrom pandas.plotting import parallel_coordinates as pc\nfrom ipywidgets import interact, interactive\nimport ipywidgets as widgets\nfrom IPython.display import display\nimport plotly.graph_objects as go\nfrom plotly.graph_objects import Layout\nimport re\nimport warnings\nwarnings.simplefilter('ignore')\n\ndef cleant(string):\n    string = string.replace('$',\"\")\n    string = string.replace(',',\"\")\n    string = string.replace('>',\"\")\n    string = string.split(\"-\")[0]\n    return string\n\ndef restring(x):\n    x = re.sub(\"[\\(\\[].*?[\\)\\]]\", \"\", x)\n    return x.strip()\n\nplt.rcParams.update({'font.size': 18})","e79401ba":"responses = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv').iloc[1:]\npythonall = responses[(responses.Q7_Part_1 == 'Python')]\npythonusa = responses[(responses.Q7_Part_1 == 'Python') & (responses.Q3 == \"United States of America\")]\nresponses['proglangsno'] = responses[[c for c in responses.columns if 'Q7' in c]].count(axis=1)\npythonly = responses[(responses.Q7_Part_1 == 'Python') & (responses.proglangsno == 1)]\npythonusa['salary'] = pythonusa.Q25.fillna(\"0\").apply(lambda x: int(cleant(x)))\npythonall['salary'] = pythonall.Q25.fillna(\"0\").apply(lambda x: int(cleant(x)))\npythonall.to_csv('resp.csv', index=False)","ebc1979d":"py = responses[(responses.Q7_Part_1 == 'Python')].Q1.value_counts().sort_index()\nr = responses[~(responses.Q7_Part_2.isna())].Q1.value_counts().sort_index()\nsql = responses[~(responses.Q7_Part_3.isna())].Q1.value_counts().sort_index()\nc = responses[~(responses.Q7_Part_4.isna())].Q1.value_counts().sort_index()\ncpp = responses[~(responses.Q7_Part_5.isna())].Q1.value_counts().sort_index()\njava = responses[~(responses.Q7_Part_6.isna())].Q1.value_counts().sort_index()\njs = responses[~(responses.Q7_Part_7.isna())].Q1.value_counts().sort_index()\njulia = responses[~(responses.Q7_Part_8.isna())].Q1.value_counts().sort_index()\nswift = responses[~(responses.Q7_Part_9.isna())].Q1.value_counts().sort_index()\nbash = responses[~(responses.Q7_Part_10.isna())].Q1.value_counts().sort_index()\nmatlab = responses[~(responses.Q7_Part_11.isna())].Q1.value_counts().sort_index()\nother = responses[~(responses.Q7_Part_12.isna())].Q1.value_counts().sort_index()\nq7s = [c for c in responses.columns if 'Q7' in c]\nq7s.remove('Q7_Part_1')\nq7s.remove('Q7_Part_2')\nq7s.remove('Q7_Part_3')\nothers = responses[responses[q7s].count(axis=1)>0]\nsums = np.zeros((11,))\ncolors = ['midnightblue','blue','slateblue','thistle', 'plum', 'fuchsia','mediumvioletred','violet', 'orchid','deeppink','palevioletred','pink']\nfor each in [py, r, sql, c, cpp, java, js, julia, swift, bash, matlab, other]:\n    sums += each.values\npreeach = np.zeros((11,))\npreeachs = np.zeros((11,))\nfig, ax = plt.subplots(1,2, figsize=(30,10))\ncolori = 0\nfor each in [py, r, sql, c, cpp, java, js, julia, swift, bash, matlab, other]:\n    ax[1].bar(each.index, each.values, bottom = preeach, width=0.5, color=colors[colori])\n    preeach += each.values\n    each = each\/sums * 100\n    ax[0].bar(each.index, each.values, bottom = preeachs, width=0.5, color=colors[colori])\n    preeachs += each.values\n    colori += 1\nax[0].legend(['Python', 'R', 'SQL', 'C', 'C++', 'Java', 'JS', 'Julia', 'Swift', 'Bash', 'Matlab', 'Other'], bbox_to_anchor=(1.1, 1.05), prop={'size': 12})\nax[0].set_title('Distribution of Language Usage by Age')\nax[1].set_title('Absolute Number of Language Users by Age')\nfor item in ([ax[0].title, ax[0].xaxis.label, ax[0].yaxis.label] + ax[0].get_xticklabels() + ax[0].get_yticklabels()):\n    item.set_fontsize(15)\nfor item in ([ax[1].title, ax[1].xaxis.label, ax[1].yaxis.label] + ax[1].get_xticklabels() + ax[1].get_yticklabels()):\n    item.set_fontsize(15)\nplt.show()","f48a0b23":"ccppall = responses[~(responses.Q7_Part_4.isna() & responses.Q7_Part_5.isna())]\nsqlall = responses[~(responses.Q7_Part_3.isna())]\nfig, ax3 = plt.subplots(1,2, figsize = (25,8))\nresponses['proglangsno'].value_counts().sort_index().plot(kind='bar', ax = ax3[0], rot=0, title = 'Number of Languages used by Respondents', cmap='coolwarm')\nresponsesdf = responses.groupby('Q1')['proglangsno'].mean().sort_index()\nresponsedf.index.name = 'Age'\nresponsesdf.plot(kind='bar', ax=ax3[1], title = 'Number of Languages used by Age Groups', colormap=cm.get_cmap('coolwarm'))\notherlang = responses[responses['proglangsno']>0]\nplt.show()","24d0e4fa":"datasetdict = {'Python': set(pythonall.index), 'C\/C++': set(ccppall.index), 'SQL': set(sqlall.index), 'Other':set(others.index)}\nvenn(datasetdict, cmap=\"coolwarm\", fmt=\"{percentage: 0.1f}%\", fontsize=12, legend_loc=\"upper left\")\nplt.show()","65d594e7":"salage = pd.crosstab(index=pythonusa['Q1'], columns=pythonusa['Q25'], normalize='index')\nsaldict = dict(zip(salage.columns, [int(cleant(x)) for x in salage.columns]))\nsaldict = dict(sorted(saldict.items(), key=lambda x: x[1]))\nsalage = salage[list(saldict)]\nsalage.index.name = 'Age'\nfig, ax = plt.subplots(1,2, figsize=(25, 10))\nsalage.plot(kind='bar', stacked=True, colormap=cm.get_cmap('coolwarm'), ax = ax[0], title = \"Salary Distribution by Age for All Python Users\", edgecolor='none').legend(loc='lower left', bbox_to_anchor=(0, -.5), ncol=5)\nsalage = pd.crosstab(index=pythonusa['Q1'], columns=pythonusa['Q25'])\nsalage = salage[list(saldict)]\ndf = np.multiply(salage.values , np.array([list(saldict.values())]*11)).sum(axis=1)\/salage.sum(axis=1)\ndf.index.name = 'Age'\ndf.plot(kind='bar', stacked=True, ax = ax[1], title = \"Average Salary by Age for All Python Users\", colormap=cm.get_cmap('coolwarm'))\nfor item in ([ax[0].title, ax[0].xaxis.label, ax[0].yaxis.label] + ax[0].get_xticklabels() + ax[0].get_yticklabels()):\n    item.set_fontsize(20)\nfor item in ([ax[1].title, ax[1].xaxis.label, ax[1].yaxis.label] + ax[1].get_xticklabels() + ax[1].get_yticklabels()):\n    item.set_fontsize(20)\nplt.show()","e068455e":"datapythonusa = pythonusa[pythonusa.Q5.str.startswith('Data')]\nsalage = pd.crosstab(index=datapythonusa['Q1'], columns=datapythonusa['Q25'], normalize='index')\nsaldict = dict(zip(salage.columns, [int(cleant(x)) for x in salage.columns]))\nsaldict = dict(sorted(saldict.items(), key=lambda x: x[1]))\nsalage = salage[list(saldict)]\nsalage.index.name = 'Ages'\nfig, ax = plt.subplots(1,2, figsize=(25, 6))\nsalage.plot(kind='bar', stacked=True, colormap=cm.get_cmap('coolwarm'), ax = ax[0], title='Salary Distribution by Age for Data Scientists', edgecolor=\"none\").legend(loc='lower left', bbox_to_anchor=(0, -.8), ncol=5)\nsalage = pd.crosstab(index=datapythonusa['Q1'], columns=datapythonusa['Q25'])\nsalage = salage[list(saldict)]\nsalage.index.name = 'Ages'\ndf = np.multiply(salage.values , np.array([list(saldict.values())]*11)).sum(axis=1)\/salage.sum(axis=1)\ndf.plot(kind='bar', stacked=True,   ax = ax[1], title='Average Salary by Age for Data Scientists',colormap=cm.get_cmap('coolwarm'))\nfor item in ([ax[0].title, ax[0].xaxis.label, ax[0].yaxis.label] + ax[0].get_xticklabels() + ax[0].get_yticklabels()):\n    item.set_fontsize(20)\nfor item in ([ax[1].title, ax[1].xaxis.label, ax[1].yaxis.label] + ax[1].get_xticklabels() + ax[1].get_yticklabels()):\n    item.set_fontsize(20)\nplt.show()","9a104b78":"degrees = ['I prefer not to answer','No formal education past high school', 'Some college\/university study without earning a bachelor\u2019s degree', 'Bachelor\u2019s degree', 'Master\u2019s degree',\n           'Professional doctorate', 'Doctoral degree']\ndegreedf = pd.crosstab(index=pythonall['Q1'], columns=pythonall['Q4'], normalize='index')\ndegreedf = degreedf[degrees]\ndegreedf.index.name = \"Age\"\ndegreedf.plot(kind='bar', stacked = True, figsize=(15,10), colormap=cm.get_cmap('coolwarm')).legend(loc='lower center', bbox_to_anchor=(0.4,-.4), ncol=3)\nplt.show()","d00003c5":"q20cols = [c for c in responses.columns if 'Q20' in c]\nindustry = pd.melt(pythonall, id_vars = 'Q1',value_vars = q20cols)\nindustry = industry.groupby(['Q1','value']).count().reset_index()\nindustry = pd.pivot(industry, index='Q1', columns='value', values='variable')\nindustry = industry.div(industry.sum(axis=1), axis=0)\nindustry.index.name = 'Age'\nindustry.plot(kind='bar', stacked=True, mark_right=True, cmap='tab20b', figsize=(15,10), edgecolor='none', title='Breakdown of Respondents by Industry').legend(loc='right', bbox_to_anchor=(1.5, .5))\nplt.show()","2335f9d5":"salindustry = pythonusa.groupby(['Q1','Q20'])['salary'].mean().reset_index()\nsalindustry.index.name = 'Age'\nsns.set(rc={'figure.figsize':(25,15)})\nsns.set_style(\"whitegrid\", {\"grid.color\": \".8\", \"grid.linestyle\": \":\", 'axes.edgecolor': 'blue'})\nsalindustry.index.name = 'Age'\nplts = sns.scatterplot(data = salindustry, x='Q1', y='Q20', size='salary', sizes=(1,800))\nplts.set_title('Salary by Industry and Age')\nplts.set_xlabel(\"Age\",fontsize=30)\nplts.set_ylabel(\"Industry\",fontsize=20)\nplts.tick_params(labelsize=15)\nplt.show()","df781595":"mluse = pythonall.groupby(['Q20','Q23'])['Q1'].count().reset_index()\nmluse['Q23'] = mluse.Q23.apply(lambda x: restring(x))\nmluse['Q23'] = pd.Categorical(mluse.Q23, categories =['I do not know','No','We are exploring ML methods', 'We use ML methods for generating insights',\n                                                                                       'We recently started using ML methods','We have well established ML methods' ], ordered=True)\nsns.set(rc={'figure.figsize':(30,15)})\nsn = sns.scatterplot(data = mluse, x='Q20', y='Q23', size='Q1', sizes=(10,800))\nsn.set_xlabel(\"Industry\",fontsize=15)\nsn.tick_params(labelsize=35)\nsn.set_xticklabels(mluse.Q20.unique(), rotation=90)\nsn.set_title(\"ML Usage by Industry\")\nplt.show()","6c99cf1d":"workstation = pd.crosstab(index=pythonall['Q1'], columns=pythonall['Q11'], normalize='index')\nworkstation.columns = [restring(c) for c in workstation.columns]\nworkstation.index.name = 'Age'\nworkstation.plot(kind='bar', stacked=True, colormap='Set3', figsize=(10, 6), title='Computing Platform for DS', edgecolor='none').legend(loc='right', bbox_to_anchor=(2, .5), title='Hardware')\nplt.show()","a6ae1a56":"fig, ax = plt.subplots(1,2, figsize=(25,5))\nq12cols = [c for c in responses.columns if 'Q12' in c]\nhw = pd.melt(pythonall, id_vars = 'Q1',value_vars = q12cols)\nhw = hw.groupby(['Q1','value']).count().reset_index()\nhw = pd.pivot(hw, index='Q1', columns='value', values='variable')\nhw = hw.div(hw.sum(axis=1), axis=0)\nhw.index.name = \"Age\"\nhw.plot(kind='bar', stacked=True, mark_right=True, ax = ax[0], title = \"Computing Hardware\", colormap=cm.get_cmap('Set3'), edgecolor='none').legend(loc='lower left',bbox_to_anchor=(0, -.4), ncol = 5, prop={'size': 12})\nq13cols = [c for c in responses.columns if 'Q13' in c]\ntpuse = pd.melt(pythonall, id_vars = 'Q1',value_vars = q13cols)\ntpuse = tpuse.groupby(['Q1','value']).count().reset_index()\ntpuse = pd.pivot(tpuse, index='Q1', columns='value', values='variable')\ntpuse = tpuse.div(tpuse.sum(axis=1), axis=0)\ntpuse = tpuse[['Never', 'Once', '2-5 times', '6-25 times', 'More than 25 times']]\ntpuse.index.name = \"Age\"\ntpuse.plot(kind='bar', stacked=True, mark_right=True, ax = ax[1], title=\"TPU Usage\", colormap=cm.get_cmap('coolwarm'), edgecolor='none').legend(loc='upper left', bbox_to_anchor=(0, -.2), ncol=5, prop={'size': 12})\nplt.show()","c575ad3a":"q9cols = [c for c in pythonly.columns if 'Q9' in c]\nides = pd.melt(pythonall, id_vars = 'Q1',value_vars = q9cols)\nides['value'] = ides['value'].fillna(\"\").apply(lambda x: restring(x))\nides['value'] = ides.value.replace('Jupyter Notebook', 'Jupyter')\nides = ides.groupby(['Q1','value']).count().reset_index()\nides = pd.pivot(ides, index='Q1', columns='value', values='variable')\nides = ides.div(ides.sum(axis=1), axis=0)\nides.index.name = \"Age\"\nides.plot(kind='bar', stacked=True, mark_right=True, title = \"IDE Preferences\", colormap=cm.get_cmap('tab20c'), figsize=(15,5), edgecolor='none').legend(loc='lower left',bbox_to_anchor=(0, -.5), ncol = 6)\nplt.show()","4f2a9e76":"q17cols = [c for c in responses.columns if 'Q17' in c]\nalgos = pd.melt(pythonall, id_vars = 'Q1',value_vars = q17cols)\nalgos = algos.groupby(['Q1','value']).count().reset_index()\nalgos = pd.pivot(algos, index='Q1', columns='value', values='variable')\nalgos.index.name = 'Ages'\nalgos = algos.div(algos.sum(axis=1), axis=0)\nalgos.plot(kind='bar', stacked=True, mark_right=True, figsize=(15,5), colormap=cm.get_cmap('coolwarm'), edgecolor='none').legend(loc='right', bbox_to_anchor=(1.4, .5), prop={'size': 10})\nplt.show()","0f95af86":"fig, ax = plt.subplots(1,2, figsize=(20,5))\nq18cols = [c for c in responses.columns if 'Q18' in c]\nalgos = pd.melt(pythonall, id_vars = 'Q1',value_vars = q18cols)\nalgos = algos.groupby(['Q1','value']).count().reset_index()\nalgos = pd.pivot(algos, index='Q1', columns='value', values='variable')\nalgos = algos.div(algos.sum(axis=1), axis=0)\nalgos.columns = ['General Purpose Img\/Vid Tools', 'Generative Networks', 'Img Classif Networks', 'Img Segmentation Methods', 'None', 'Oject Detection Methods', 'Other']\nalgos.plot(kind='bar', stacked=True, mark_right=True, ax = ax[0], title = 'Computer Vision Methods', colormap=cm.get_cmap('Set3'), edgecolor='none').legend(loc='lower center', bbox_to_anchor=(0.5, -.5), ncol=3)\nq19cols = [c for c in responses.columns if 'Q19' in c]\nalgos = pd.melt(pythonall, id_vars = 'Q1',value_vars = q19cols)\nalgos = algos.groupby(['Q1','value']).count().reset_index()\nalgos = pd.pivot(algos, index='Q1', columns='value', values='variable')\nalgos = algos.div(algos.sum(axis=1), axis=0)\nalgos.columns = [restring(c) for c in algos.columns]\nalgos.plot(kind='bar', stacked=True, mark_right=True, ax = ax[1], title='Natural Language Processing Methods', colormap=cm.get_cmap('coolwarm'), edgecolor='none').legend(loc='lower center', bbox_to_anchor=(.5, -.45), ncol=3)\nplt.show()","50b82636":"fig, ax = plt.subplots(1,2, figsize=(20,5))\nq31acols = [c for c in responses.columns if 'Q31_A' in c]\nmltools = pd.melt(pythonall, id_vars = 'Q1',value_vars = q31acols)\nmltools = mltools.groupby(['Q1','value']).count().reset_index()\nmltools = pd.pivot(mltools, index='Q1', columns='value', values='variable')\nmltools = mltools.div(mltools.sum(axis=1), axis=0)\nmltools.plot(kind='bar', stacked=True, mark_right=True, ax = ax[0], title = 'Managed ML Products', edgecolor='none', colormap=cm.get_cmap('Set3')).legend(loc='lower center', bbox_to_anchor=(0.5, -.5), ncol=3)\nq37acols = [c for c in responses.columns if 'Q37_A' in c]\nmltools = pd.melt(pythonall, id_vars = 'Q1',value_vars = q37acols)\nmltools = mltools.groupby(['Q1','value']).count().reset_index()\nmltools = pd.pivot(mltools, index='Q1', columns='value', values='variable')\nmltools = mltools.div(mltools.sum(axis=1), axis=0)\nmltools.plot(kind='bar', stacked=True, mark_right=True, ax = ax[1], title='Auto ML Tools', edgecolor='none', colormap=cm.get_cmap('coolwarm')).legend(loc='lower center', bbox_to_anchor=(.5, -.45), ncol=3)\nplt.show()","9c881541":"agedict = dict(zip(['18-21', '22-24','25-29','30-34','35-39','40-44','45-49','50-54','55-59','60-69','70+'],range(11)))\nq36acols = [c for c in pythonall.columns if 'Q36_A' in c]\nq37acols = [c for c in pythonall.columns if 'Q37_A' in c]\nq36melt = pd.melt(pythonall, id_vars = q36acols+['Q1'],value_vars = q37acols)\nq36melt = q36melt.rename(columns={'value':'value1'})\nq37melt = pd.melt(q36melt, id_vars = ['value1','Q1'], value_vars = q36acols)\nq37melt = q37melt.dropna()\nq37melt['value'] = q37melt.value.apply(lambda x: restring(x))\nq37melt[(q37melt.value1!=\"\") & (q37melt.value!=\"\")]\nq37melt['agemap'] = q37melt.Q1.map(agedict)\ncolorscale =px.colors.diverging.RdYlGn\nfiga1 = go.Figure(go.Parcats(dimensions=[{'label':'Age', 'values':q37melt.Q1, 'categoryorder': 'array', 'categoryarray':['18-21', '22-24','25-29','30-34','35-39','40-44','45-49','50-54','55-59','60-69','70+']}\n                                         ,{'label':'ML Tools', 'values':q37melt.value}, {'label':'ML Tools Products', 'values': q37melt.value1}],\n                            line={'color' : q37melt.agemap, 'colorscale': colorscale}, bundlecolors=True))\nfiga1 = go.FigureWidget(figa1)\nfiga1.update_layout()\nwidgets.HBox([figa1])\nfiga1.show()","80a7f102":"q27acols = [c for c in responses.columns if 'Q27_A' in c]\ncloudplatforms = pd.melt(pythonall, id_vars = 'Q1',value_vars = q27acols)\ncloudplatforms = cloudplatforms.groupby(['Q1','value']).count().reset_index()\ncloudplatforms = pd.pivot(cloudplatforms, index='Q1', columns='value', values='variable')\ncloudplatforms = cloudplatforms.div(cloudplatforms.sum(axis=1), axis=0)\ncloudplatforms.index.name='Age'\ncloudplatforms.plot(kind='bar', stacked=True, mark_right=True, edgecolor='none' , colormap=cm.get_cmap('coolwarm'), figsize=(15,5)).legend(loc='right', bbox_to_anchor=(1.5, .5))\nplt.show()","15915273":"q34acols = [c for c in responses.columns if 'Q34_A' in c]\nbitools = pd.melt(pythonall, id_vars = 'Q1',value_vars = q34acols)\nbitools = bitools.groupby(['Q1','value']).count().reset_index()\nbitools = pd.pivot(bitools, index='Q1', columns='value', values='variable')\nbitools = bitools.div(bitools.sum(axis=1), axis=0)\nbitools.index.name='Age'\nbitools.plot(kind='bar', stacked=True, mark_right=True, colormap=cm.get_cmap('tab20'), edgecolor='none', figsize = (15,5), title='BI Tools Usage').legend(loc='right', bbox_to_anchor=(1.5, .5))\nplt.show()","7a907d42":"**<p style=\"font-size:20px\">BI Tools<\/p>**","fafd2e6b":"<p style='font-size: 18px;'>Python is the most popular language in the Machine Learning community owing to its ease of use, and richly developed open source ecosystem with NumPy, SciPy and other computing packages. It offers the ability to speed up programs via C++ interoperability and interfacing with GPU\/ TPU.<\/p>","2315d4e1":"# Hardware and Technology Stacks","4f6642c0":"<p style=\"font-size:18px\"><\/p>","fe832d0a":"<p style=\"font-size:18px;\">Among the respondents, the older age groups have a significantly higher proportion of people with advanced degrees. Taking this into consideration, we would have expected salaries to increase monotonically with age. But that is not the case, so we will look further.<\/p>","0c58c75b":"**<p style=\"font-size:20px;\">Workstations<\/p>**","2767f29a":"<p style=\"font-size:18px;\">Usage of deep learning methods is similar among all the age groups.<\/p>","eabea422":"<p style=\"font-size:18px;\">Also to note here is that respondents on an average program in 2+ different languages, and this remains true for all age groups. Among Python users with multiple language skills, SQL is the other language that is preferred as the choice for data management.<\/p>","bf976471":"**<p style=\"font-size:18px;\">ML Usage by Industry<\/p>**","b1c07827":"<p style=\"font-size:18px\">There is a decrease in usage of newer BI tools such as Tableau among the older respondents.<\/p>","58ee7a67":"<p style=\"font-size:18px;\">Jupyter remains the platform of choice among all age groups.<\/p>","8bcab7e0":"# Data Exploration","cc17cec4":"<p style=\"font-size:18px;\"><\/p>","2d64c5ee":"<p style=\"font-size:18px;\">Looking at the distribution of data by age, we can see that while there are several similarities across the age-groups, some of the differences stand out. When it comes to industry bias, data scientists do not really face much discrimination in terms of salary as they get older, but the rate of growth in salary can be impacted. When it comes to application of core data science skills such as Computer Vision and Natural Language Processing, respondents across all age groups show similar usage and preferences for algorithms and tools. This is indicative of older respondents building on their foundational knowledge and upskilling in line with the industry. When it comes to managed ML products and Cloud computing preferences, there is a difference between the different age groups with younger people showing greater affinity for these tools.<\/p>","c1dd7d4b":"# Salary Distribution","866d998c":"**<p style=\"font-size:20px;\">Hardware<\/p>**","527bf9d2":"**<p style=\"font-size:20px;\">IDE<\/p>**","8de09963":"<p style=\"font-size:18px;\">Linear\/ Logistic Regression and Decision Trees are the most popular approaches across all groups.<\/p>","486e7c5d":"**<p style=\"font-size:20px;\">Algorithms<\/p>**","1a78d2a2":"**<p style=\"font-size:20px\">ML Tools<\/p>**","81dbf0b0":"# Introduction","a2cb996c":"<p style=\"font-size:18px\">There is a decrease in Cloud usage with age.<\/p>","272edad1":"# Conclusion","90ed61db":"<p style=\"font-size:18px;\">When it comes to managed ML products, there is a slight trends towards lesser usage with higher age.<\/p>","0bc085b2":"<p style=\"font-size:18px;\">When we take a look at the distribution of salaries by age, we see that earnings peak in the 40s and remain stagnant or fall off slightly thereafter. When we filter specifically for Data Analyst\/ Data Engineer\/ Data Scientist roles, we do find a peak in the early 40s, followed by a higher peak in the late 50s before retirement.<\/p>\n<p style=\"font-size:18px;\">When considering all respondents, the stagnation in average salary may be due to people continuing in IC roles without making a shift to management, different educational qualifications, outmoded skills, or because a majority of respondents from different age-groups belong to different industries.<\/p>\n<p style=\"font-size:18px;\">","53025e1d":"**<p style=\"font-size:20px\">Deep Learning Methods<\/p>**","197f4fbc":"<p style=\"font-size:18px;\">When it comes to accelerated computing on GPUs and TPUs, there is no marked difference between the various age groups, with the proportion of people using these systems remaining the same <\/p>","2d15f9d5":"**<p style=\"font-size:20px\">Advanced Machine Learning Products<\/p>**","84033e4c":"# Python Users","9c5ffdba":"<p style=\"font-size:18px\">When it comes to a dynamic and fast-evolving field like machine learning where new architectures crop up every month, it can become difficult for experienced people with multiple responsibilites to keep up with the latest developments. In the technology sector, this can lead to older people losing out on employment opportunities as they may not be able to jump on the bandwagon of the latest framework or technology stack.\nThis notebook explores if this is true in the ML community, and how preferences change with age.<\/p>","914074f4":"**<p style=\"font-size:20px\">Cloud Usage<\/p>**","b853312a":"<p style=\"font-size:18px;\">We look at the subset of Python users and explore if the different age groups vary in the tools and methods used by them.<\/p>","2afd6d60":"<p style=\"font-size:18px\">As the choice of programming language could change various factors, we would like to focus on Python programmers specifically, so that we get a good sample size which is representative of the ML community.<\/p>","ff34088e":"<p style=\"font-size:18px;\">Older respondents have a marked preference for PCs\/ Desktops which are usually set up ergonomically, while a laptop is the workstation of choice for younger respondents who probably prefer the flexibility of working from different locations. <\/p>","0d4528bf":"**<p style=\"font-size:18px\">Salary Distribution for Data Scientists in the USA<\/p>**","9ddd8a9f":"<p style=\"font-size:18px;\">Let us take a look at the stack used and see if we can find any differences in technology skills and preferences.<\/p>","3018c7f9":"**<p style=\"font-size:20px\">Industry<\/p>**","52797480":"<p style=\"font-size:18px\">Salary is one of the top indicators which would indicate if there is any age-based preference shown by employers. For the purpose of salary comparison across different age groups, we only consider respondents from the USA, as the salary would vary a lot when compared across geographies, owing to different costs of living and Purchasing Power Parity. <\/p>","4c0ab5ce":"**<p style=\"font-size:20px\">Educational Qualifications<\/p>**","0c51b89b":"<p style=\"font-size:18px;\">When it comes to Online Business\/ Internet-based Sales, there is a great disparity in salaries with a peak at 40-44 years of age, and a sharp drop thereafter. The situation in other industries is better, with average salaries stabilizing or increasing with age.<\/p>","fccbf8d8":"<p style=\"font-size:18px;\">The proportion of respondents from the Computers\/ Technology industry decreases slightly with age, as the tech industry has boomed in the recent past with massive hiring sprees.<\/p>","8df48675":"<p style=\"font-size:18px;\">While the Online Business sector showed disparity in salary between different age-groups, we can see that respondents from the industry do not use Machine Learning methods at work. Industries such as Computers\/Technology, and Academia, which use heavy ML and hire Data Scientists, have more equitable salary profiles.<\/p>"}}