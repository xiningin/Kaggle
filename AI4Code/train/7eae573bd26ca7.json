{"cell_type":{"f6b6695f":"code","6917774e":"code","81b250d0":"code","850b35ff":"code","5b754e7d":"code","b9a59bcb":"code","900abeea":"code","bb279ca9":"code","7284c926":"code","51b81f91":"code","a964541f":"code","1c2c06a5":"code","ada82c82":"code","ff6176be":"code","063fb6dc":"code","83576a7f":"code","bca98a02":"code","5ee96803":"code","8d33a500":"code","a25ca4ae":"code","b0f571a9":"code","0914be5b":"code","f16debcd":"code","25c221ce":"code","86bcf90c":"code","f6fd357f":"code","1f7c8486":"code","43c8d380":"code","6ab47af7":"code","f3df71d7":"code","1053f7c4":"code","9f7f9ed9":"markdown","437c35ee":"markdown","6606b18c":"markdown","18810f25":"markdown","87cd70a4":"markdown","1927c1b9":"markdown","03cd9ea6":"markdown","7de55f66":"markdown","944c5f0d":"markdown"},"source":{"f6b6695f":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nprint(os.listdir(\"..\/input\"))","6917774e":"train = pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","81b250d0":"test = pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","850b35ff":"train.info()","5b754e7d":"test.info()","b9a59bcb":"all = pd.concat([train, test], sort = False)\nall.info()","900abeea":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","bb279ca9":"all.info()","7284c926":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","51b81f91":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","a964541f":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","1c2c06a5":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","ada82c82":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","ff6176be":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","063fb6dc":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","83576a7f":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","bca98a02":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","5ee96803":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","8d33a500":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","a25ca4ae":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","b0f571a9":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101, stratify = all_train['Survived'])","0914be5b":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier","f16debcd":"ada = AdaBoostClassifier(DecisionTreeClassifier(),n_estimators=100, random_state=0)\nada.fit(X_train,y_train)","25c221ce":"predictions = ada.predict(X_test)","86bcf90c":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","f6fd357f":"print (f'Train Accuracy - : {ada.score(X_train,y_train):.3f}')\nprint (f'Test Accuracy - : {ada.score(X_test,y_test):.3f}')","1f7c8486":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","43c8d380":"t_pred = ada.predict(TestForPred).astype(int)","6ab47af7":"PassengerId = all_test['PassengerId']","f3df71d7":"adaSub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nadaSub.head()","1053f7c4":"adaSub.to_csv(\"1_Ada_Submission.csv\", index = False)","9f7f9ed9":"****Extra Features:","437c35ee":"****Train\/Test Split","6606b18c":"****Check Accuracy","18810f25":"## Combine train and test","87cd70a4":"# Import Libraries","1927c1b9":"# Import Data","03cd9ea6":"****Build AdaBoost","7de55f66":"****Check Accuracy","944c5f0d":"****Final Predictions"}}