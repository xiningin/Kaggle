{"cell_type":{"f611692e":"code","881e1069":"code","047cd727":"code","07cf4472":"code","d9098667":"code","0c1afe40":"code","e108ecaf":"code","bdb70ac1":"code","b741f77f":"code","bdce8462":"code","0ca4312b":"code","3053cf7a":"code","bc8d2878":"code","061a3ba3":"code","4cfe0957":"code","d2b6d4a2":"code","96714f8c":"code","f3dbc441":"code","d23f0454":"code","dd3bb526":"code","000b0131":"code","a5a7becd":"code","7b61b6c5":"code","28b34e07":"code","0b1c755a":"code","dfe11028":"code","3de43aa1":"code","0451678d":"code","1ce54421":"code","640dd0ad":"code","59c8783f":"code","ab0c3d3d":"code","445d4131":"code","a4080401":"code","1c4212d8":"code","0ea715bf":"code","c8f3d036":"code","2ba66192":"code","ba53a41a":"code","91769149":"code","c21a7ef1":"code","fd86109a":"code","ebfc77f1":"code","fd401736":"code","8ecc8bcc":"code","c82382c7":"code","7b332205":"code","7d8113fc":"code","7d2cabbf":"code","1964cd52":"code","a26ca4e1":"code","17676428":"code","9a7fea94":"code","2d8bf061":"code","fa7601d6":"code","29e66e06":"code","d0b44433":"code","861f8935":"code","f2bcbc9a":"code","871fe5b0":"code","32ff2bca":"code","9ea2953c":"code","f7b81e64":"code","b701fb0c":"code","b433fa68":"code","ad561d47":"code","115e1d5c":"code","4ce80847":"code","0bbc59d0":"code","21158233":"code","f1412c96":"code","6aa7f7cc":"code","60a2200f":"code","e030965b":"code","f4fc08de":"code","937ac98a":"code","89b2f8ed":"code","72a6bbd9":"code","511b5d86":"code","aaaabece":"code","492be0d6":"code","b4a89570":"code","2929550c":"code","8db62d38":"code","ee4c0e84":"code","fbce5db7":"code","c32c35d2":"code","94516be6":"code","42825d78":"code","58d5b07e":"code","f0f18853":"markdown","b99ea50f":"markdown","7a95e9bf":"markdown","ca86f0c7":"markdown","0882bc1a":"markdown","95ffabce":"markdown","2a5573d8":"markdown","5be5bf52":"markdown","7692f617":"markdown","b9f81e62":"markdown","fa31558d":"markdown","e77fc7f7":"markdown","8c3e819a":"markdown","9c749dd1":"markdown","4fa5c342":"markdown","74225e92":"markdown","9a21f80f":"markdown","faa8bcf0":"markdown","4dc21288":"markdown","1de4dc0f":"markdown","28694718":"markdown","137b0a37":"markdown","dc4dba34":"markdown","b24a8cfd":"markdown","ed7b308c":"markdown","bf6902b3":"markdown","830b3422":"markdown","a85c7a46":"markdown","0f7305b4":"markdown","5cbe4043":"markdown","cfba3dac":"markdown","3f8a44f9":"markdown","5a7d331a":"markdown"},"source":{"f611692e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nprint('Priyatama is ready!')","881e1069":"banglore = pd.read_csv(\"..\/input\/car-resell-price\/bangalore_cardekho.csv\")\njaipur = pd.read_csv(\"..\/input\/car-resell-price\/jaipur_cardekho.csv\")","047cd727":"banglore.head(2)","07cf4472":"jaipur.head(2)","d9098667":"banglore.dtypes","0c1afe40":"banglore.drop(banglore.columns[[0,-1,-2,-3]], axis=1, inplace=True)","e108ecaf":"jaipur.dtypes","bdb70ac1":"jaipur.drop(jaipur.columns[[0,-1]], axis=1, inplace=True)","b741f77f":"jaipur.dtypes","bdce8462":"jaipur['City']='Jaipur'\nbanglore['City']='Banglore'","0ca4312b":"print(banglore.shape)\nprint(jaipur.shape)","3053cf7a":"data = pd.concat([banglore, jaipur])\ndata.shape","bc8d2878":"data.head()","061a3ba3":"a = (data.isnull().sum())\nprint(a[a>0])","4cfe0957":"data.dropna(axis=0, inplace=True)\ndata.shape","d2b6d4a2":"data['Make_Year'] = data['model'].astype(str).str[0:4]\ndata.head(2)","96714f8c":"data['model'] = data['model'].str[4:]\ndata.head(2)","f3dbc441":"def get_model(mod):\n  return mod.split(' ')[1]\n\ndata['Mod'] = data['model'].apply(lambda x: f\"{get_model(x)}\")\ndata.head()","d23f0454":"data = data.drop('model', axis = 1)\ndata.head(5)","dd3bb526":"data.head(5)","000b0131":"column_to_move0 = data.pop(\"Make_Year\")\ndata.insert(1, \"Make_year\", column_to_move0)\ncolumn_to_move1 = data.pop(\"Mod\")\ndata.insert(1, \"Model\", column_to_move1)\ndata.head(2)","a5a7becd":"data = data[data['price'].str.contains(' Lakh*')]\ndata.price.unique()","7b61b6c5":"data['Price_in_Lakh'] = data['price'].astype(str).str[:-5]\ndata.pop(\"price\")\ndata[[\"Price_in_Lakh\"]] = data[[\"Price_in_Lakh\"]].apply(pd.to_numeric)\ndata[\"Price\"] = 100000 * data[\"Price_in_Lakh\"]\ndata.drop('Price_in_Lakh', axis = 1, inplace = True)","28b34e07":"data.head()","0b1c755a":"data.shape","dfe11028":"data.seller.value_counts()","3de43aa1":"no_km = data[~data[\"km_driven\"].str.contains('kms')]\nno_km","0451678d":"data2 = data.copy()","1ce54421":"data2['km_driven'] = data2['km_driven'].astype(str).str[:-4]","640dd0ad":"data2.head()","59c8783f":"data2 = data2.replace(',','', regex=True)","ab0c3d3d":"data2[[\"Make_year\"]] = data2[[\"Make_year\"]].apply(pd.to_numeric)\ndata2[[\"sold_year\"]] = data2[[\"sold_year\"]].apply(pd.to_numeric)\ndata2[[\"km_driven\"]] = data2[[\"km_driven\"]].apply(pd.to_numeric)","445d4131":"data2.head()","a4080401":"data2.owner_type.value_counts().plot(kind='barh')","1c4212d8":"data2['owner_type']=data2['owner_type'].str.replace('Owner','')\ndata2.owner_type.unique()","0ea715bf":"data2.fuel.value_counts().plot(kind='bar')","c8f3d036":"data2.mileage.unique()","2ba66192":"no_mil = data2[~data2[\"mileage\"].str.contains('Mileage')]\nno_mil.head(2)","ba53a41a":"data3 = data2[data2[\"mileage\"].str.contains('Mileage')]\ndata3.shape","91769149":"data3['mileage']=data3['mileage'].str.replace('Mileage','')\ndata3['mileage']=data3['mileage'].str.replace(' kmpl','')\ndata3['mileage']=data3['mileage'].str.replace(' km\/kg','')\ndata3.mileage.unique()","c21a7ef1":"data3[data3[\"mileage\"].str.contains('km\/hr')]","fd86109a":"data3[data3[\"mileage\"] =='0.0']","ebfc77f1":"def filter_rows_by_values(df, col, values):\n    return df[df[col].isin(values) == False]","fd401736":"data4 = filter_rows_by_values(data3,\"mileage\", [\"120.0 km\/hr\",\"0.0\"])","8ecc8bcc":"data4.mileage.unique()","c82382c7":"data4[[\"mileage\"]] = data4[[\"mileage\"]].apply(pd.to_numeric)","7b332205":"data4.head(3)","7d8113fc":"data4['engine']=data4['engine'].str.replace('Engine','')\ndata4['engine']=data4['engine'].str.replace('CC','')\ndata4.rename(columns = {'engine':'Engine_CC'}, inplace = True)\ndata4.head(3)","7d2cabbf":"data4[[\"Engine_CC\"]] = data4[[\"Engine_CC\"]].apply(pd.to_numeric)","1964cd52":"data5 = data4.copy()","a26ca4e1":"data5['power']=data5['power'].str.replace('Max Power','')\ndata5['power']=data5['power'].str.replace('bhp','')\ndata5['power']=data5['power'].str.replace(' ','')\ndata5['power']=data5['power'].str.replace('null ','')\ndata5['power']=data5['power'].str.replace('null','')\ndata5.rename(columns = {'power':'Power_bhp'}, inplace = True)\ndata5.head(3)","17676428":"data5[[\"Power_bhp\"]] = data5[[\"Power_bhp\"]].apply(pd.to_numeric)","9a7fea94":"data6 = data5.copy()","2d8bf061":"data6 = data6.replace('@','at', regex=True)","fa7601d6":"def get_nm(col):\n  return col.split('at')[0]\n\ndata6['Torque_NM'] = data6['torque'].apply(lambda x: f\"{get_nm(x)}\")\ndata6['Torque_NM']=data6['Torque_NM'].str.replace('Torque','')\ndata6['Torque_NM']=data6['Torque_NM'].str.replace('Nm','')\ndata6.head()","29e66e06":"data6.Torque_NM.unique()","d0b44433":"data6['Torque_NM']=data6['Torque_NM'].str.replace('nm','')\ndata6['Torque_NM']=data6['Torque_NM'].str.replace(' \/ ','')\ndata6['Torque_NM']=data6['Torque_NM'].str.replace('NM','')\ndata6['Torque_NM']=data6['Torque_NM'].str.replace('kgm','')\ndata6['Torque_NM']=data6['Torque_NM'].str.replace(' kgm','')\ndata6['Torque_NM']=data6['Torque_NM'].str.replace(' KGM','')\ndata6['Torque_NM']=data6['Torque_NM'].str.replace('N\/A','')","861f8935":"data6[['Torque_NM']]=data6[['Torque_NM']].apply(pd.to_numeric)","f2bcbc9a":"data6.drop({'torque', 'wheel_size'}, axis = 1, inplace = True)","871fe5b0":"data6.head(2)","32ff2bca":"data7 = data6.copy()\ndata7.seats.unique()","9ea2953c":"data7['seats'] = data7['seats'].replace({'Seats': ''}, regex=True)","f7b81e64":"data7[['seats']]=data7[['seats']].apply(pd.to_numeric)","b701fb0c":"data7.dtypes","b433fa68":"data7['Year_Old'] =data7.apply(lambda x: x['sold_year'] - x['Make_year'], axis=1)\ndata7.head(3)","ad561d47":"data7.Year_Old.value_counts().plot(kind='bar')","115e1d5c":"data7.Make_year.value_counts().plot(kind='bar')","4ce80847":"data7.drop({'Make_year', 'Year_Old'}, axis = 1, inplace = True)","0bbc59d0":"data7.head()","21158233":"fig, ax = plt.subplots(figsize=(15,5))\nsns.set(style='darkgrid')\nsplot0 = sns.countplot(x ='brand', hue = \"City\", data = data7, palette='viridis', order = data7['brand'].value_counts().index)\nplt.xlabel('Brand', fontsize=10, fontweight='bold')\nplt.xticks(rotation = 90)\nplt.ylabel('Sold Cars', fontsize=10, fontweight='bold')\nfor p in splot0.patches:\n    splot0.annotate(format(round(p.get_height()), '.0f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   size=10,\n                   xytext = (0, -12), \n                   textcoords = 'offset points')\nplt.title('Cars Sold by Brands', fontsize = 15, fontweight='bold')\nplt.show()","f1412c96":"table0 = pd.pivot_table(data7, values='Price', columns='City', index='brand', aggfunc='sum').reset_index()\ntable0.set_index(['brand'], drop=True, append=True, inplace=True, verify_integrity=False)\ntable0","6aa7f7cc":"table1 = pd.pivot_table(data7, values='Price', columns='City', index='brand', aggfunc='count').reset_index()\ntable1.set_index(['brand'], drop=True, append=True, inplace=True, verify_integrity=False)\ntable1","60a2200f":"keys = [pair for pair, df in table0.groupby(['brand'])]\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15,5))\n\nfig.suptitle('Qty & Sales by Brands', fontweight = 'bold', fontsize=15)\n\nax1.plot(keys, table0.groupby(['brand']).sum(), 'o-')\nax1.set_xticks([])\nplt.xticks(rotation =90)\nax1.set_ylabel('Sales', fontweight = 'bold', fontsize=10)\nax1.set_xlabel('Brand', fontweight = 'bold', fontsize=10)\nax2.plot(keys, table1.groupby(['brand']).sum(), '.-')\nax2.set_ylabel('Cars', fontweight = 'bold', fontsize=10)\nleg= (data7.City.unique())\nplt.legend(leg, loc='best')\nplt.show()","e030965b":"fig, ax = plt.subplots(figsize=(15,5))\nsns.set(style='darkgrid')\nsplot1 = sns.countplot(x ='sold_year', hue = \"City\", data = data7, palette='viridis', order = data7['sold_year'].value_counts().index)\nplt.xlabel('Year', fontsize=10, fontweight='bold')\nplt.xticks(rotation = 90)\nplt.ylabel('Sold Cars', fontsize=10, fontweight='bold')\nplt.title('Cars Sold over the Years', fontsize = 15, fontweight='bold')\nplt.show()","f4fc08de":"fig, ax = plt.subplots(figsize=(15,5))\nsns.set(style='darkgrid')\nsplot2 = sns.countplot(x ='sold_year', hue = \"fuel\", data = data7, palette='viridis')\nplt.xlabel('Year', fontsize=10, fontweight='bold')\nplt.xticks(rotation = 90)\nplt.ylabel('Sold Cars', fontsize=10, fontweight='bold')\nplt.title('Cars Sold over the Years', fontsize = 15, fontweight='bold')\nplt.legend(loc=1)\nplt.show()","937ac98a":"data8 = data7.copy()","89b2f8ed":"data8.head(2)","72a6bbd9":"a = (data8.isnull().sum())\nprint(a[a>0])","511b5d86":"data8.dropna(axis=0, inplace = True)","aaaabece":"X = data8.drop(['Price'], axis=1)\ny=data8['Price']","492be0d6":"#Filter columns with less than 10 unique categorical values for Ordinal Encoder.\nless_var = [cname for cname in X.columns if X[cname].nunique() < 10 and X[cname].dtype == \"object\"]\nless_var","b4a89570":"from sklearn.preprocessing import OrdinalEncoder","2929550c":"#Apply Ordinal Encoder.\nordinal_encoder = OrdinalEncoder()\nX[less_var] = ordinal_encoder.fit_transform(X[less_var])","8db62d38":"X.head()","ee4c0e84":"#Filter columns with more than 10 unique categorical values for One Hot Encoder.\nmore_var = [cname for cname in X.columns if X[cname].nunique() > 10 and X[cname].dtype == \"object\"]\nmore_var","fbce5db7":"#Apply One Hot Encoder.\nfrom sklearn.preprocessing import OneHotEncoder\n\nOHE = OneHotEncoder(handle_unknown='ignore', sparse=False)\nOHE_cols_train = pd.DataFrame(OHE.fit_transform(X[more_var]))\n\n\nOHE_cols_train.index = X.index\n\nX0 = X.drop(more_var, axis=1)\n\nX1 = pd.concat([X0, OHE_cols_train], axis=1)\nX1.head()","c32c35d2":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X1, y,test_size=0.2,random_state=0)","94516be6":"from sklearn.model_selection import cross_val_score\nfrom xgboost import XGBRegressor\nxgbr = XGBRegressor(n_estimators=240)\nXGB_accuracies = cross_val_score(estimator = xgbr, X =X1, y = y, cv = 7)\nprint(\"Mean_XGB_Acc : \", (100*(XGB_accuracies.mean())),\"%\")","42825d78":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators=400, random_state=1)\nrf.fit(X_train, y_train)\n\nRF_accuracies = cross_val_score(estimator = rf, X = X1, y = y, cv = 7)\nprint(\"Mean_RF_Acc : \",(100*(RF_accuracies.mean())),\"%\")","58d5b07e":"from sklearn.ensemble import GradientBoostingRegressor\ngbr=GradientBoostingRegressor( loss = 'huber',learning_rate=0.07,n_estimators=350, max_depth=6,subsample=1,verbose=False)\ngbr.fit(X_train, y_train)\n\nGB_accuracies = cross_val_score(estimator = gbr, X =X1, y = y, cv = 5)\nprint(\"Mean_GB_Acc : \",(100*(GB_accuracies.mean())),\"%\")","f0f18853":"## 2.12 Process the fuel column.","b99ea50f":"## 2.14 Process the Engine column and change it to numeric.","7a95e9bf":"## 2.15 Process the Torque column, make new columns with RPMs and change it to numeric.","ca86f0c7":"# 5. Model Designing.\n## 5.1 Split dataset into train & valid dataset.","0882bc1a":"## 2.2 Add a column with City name before stacking the dataset.","95ffabce":"## 5.3 Train & Test Random Forest Regressor.","2a5573d8":"## 4.2 Split dataset into X & y.","5be5bf52":"## 2.8 Re order the columns.","7692f617":"## 2.14 Process the power column and change it to numeric.","b9f81e62":"## 5.2 Train & Test XGBRegressor.","fa31558d":"    This model performed very good, with almost 75% accuracy.","e77fc7f7":"## 2.9 Process the Price column and change it type to numeric.","8c3e819a":"# Conclusion:\n## Random Forest Regressor performed best with 7 cross fold validation, at an accuracy of 75%.","9c749dd1":"# 2. Data Cleaning.\n## 2.1 Clean both dataset to stack them.","4fa5c342":"## 2.5 Make a column with year by stripping the model column.","74225e92":"## 2.10 Process the km_driven column and change it to numeric type.","9a21f80f":"## 2.6 Remove the year from Model column by stripping it.","faa8bcf0":"## 2.11 Process the Owner_type column and change it to numeric type.","4dc21288":"# 3. Explore the data.\n\n##3.1 Brand of Car sold in both the cities.","1de4dc0f":"## 5.4 Train & Test GradientBoostingRegressor.","28694718":"##3.4 How cars of different fuel sold over the time.","137b0a37":"##3.3 How both the cities performed over the time.","dc4dba34":"# 1. Read the data.","b24a8cfd":"    This model performed slighlty better, with almost 75% accuracy.","ed7b308c":"## 2.13 Process the mileage column and change it to numeric.","bf6902b3":"##3.2 Examine the number of cars of each brand sold in both cities, and the sales bvalue they generated.","830b3422":"##2.4 Drop null values.","a85c7a46":"#4. Feature Engineering.\n## 4.1 Drop if any null values.","0f7305b4":"    This model performed slighlty off, with almost 71% accuracy.","5cbe4043":"## 2.16 Process the wheel size and seats column and change it to numeric.","cfba3dac":"## 2.17 Examine the year of make and year of it being sold.","3f8a44f9":"## 2.7 Strip model of vehicle from the string in column model & then drop the initial column.","5a7d331a":"##2.3 Concat both the datasets vertically."}}