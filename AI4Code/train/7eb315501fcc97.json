{"cell_type":{"0b3c31a2":"code","d4a9742b":"code","5f6c06ad":"code","e5807a7c":"code","d3718e4c":"code","2f8ef849":"code","f3a59495":"code","de602ada":"code","035a7d62":"code","cbcf35da":"code","cadc2a25":"code","bac15018":"code","882b565e":"code","b985bb02":"code","cd2ff210":"code","8d57a58d":"code","90b76c53":"code","1e5f8d8c":"code","cca7e92a":"code","b4fefe90":"code","81896549":"code","7a7b6099":"code","1bc5f3c8":"code","c2b69fc6":"code","1d2372ad":"code","c276f919":"code","a6de54e9":"code","168eda22":"code","3c6c2e7c":"code","e6ef781b":"code","50d7ee37":"code","11868fef":"code","79ef5b40":"code","52d0e850":"markdown","073b79f0":"markdown","b9711086":"markdown","4b244c88":"markdown","cbedfa9d":"markdown","ec79beb4":"markdown","1588f291":"markdown"},"source":{"0b3c31a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d4a9742b":"data = pd.read_csv(\"..\/input\/cheapest-electric-cars\/Cheapestelectriccars-EVDatabase.csv\")\ndata.head()","5f6c06ad":"data.isnull().sum()","e5807a7c":"data.shape","d3718e4c":"data.info()","2f8ef849":"data[\"PriceinGermany\"] = data.PriceinGermany.str.strip('\u20ac')\ndata['PriceinGermany'] = data.PriceinGermany.str.replace(',','')\n","f3a59495":"data[\"PriceinGermany\"] = data.PriceinGermany.astype(float)\ndata[\"PriceinGermany\"]","de602ada":"data[\"PriceinGermany\"] = round(data[\"PriceinGermany\"].fillna(data[\"PriceinGermany\"].mean()))","035a7d62":"data[\"PriceinGermany\"]","cbcf35da":"data[\"PriceinUK\"] = data.PriceinUK.str.strip('\u00a3')\ndata['PriceinUK'] = data.PriceinUK.str.replace(',','')\n","cadc2a25":"data[\"PriceinUK\"] = data.PriceinUK.astype(float)\ndata[\"PriceinUK\"] = round(data[\"PriceinUK\"].fillna(data[\"PriceinUK\"].mean()))","bac15018":"data[\"Acceleration\"] = data.Acceleration.str.strip(' sec')\ndata[\"Acceleration\"] = data.Acceleration.astype(float)\ndata[\"TopSpeed\"] = data.TopSpeed.str.strip(' km\/h')\ndata[\"TopSpeed\"] = data.TopSpeed.astype(float)\ndata[\"Range\"] = data.Range.str.strip(' km')\ndata[\"Range\"] = data.Range.astype(float)\ndata[\"Efficiency\"] = data.Efficiency.str.strip(' Wh\/km')\ndata[\"Efficiency\"] = data.Efficiency.astype(float)\n","882b565e":"import seaborn as sns","b985bb02":"\nimport matplotlib.pyplot as plt\nplt.figure(figsize = (12,7))\nsns.set_theme(style = \"darkgrid\")\nsns.distplot(data[\"PriceinGermany\"],color = \"g\")\nplt.xlabel(\"Price in Euros\")\nplt.title(\"Price Distribution\")","cd2ff210":"plt.figure(figsize = (12,7))\nsns.set_theme(style = \"darkgrid\")\nsns.distplot(data[\"PriceinUK\"],color = \"g\")\nplt.xlabel(\"Price in Pound\")\nplt.title(\"Price Distribution\")","8d57a58d":"sns.countplot(data[\"Drive\"])\nplt.xlabel(\"Drive Type\")","90b76c53":"data_acc = data.sort_values(by = [\"Acceleration\"],ascending = False)","1e5f8d8c":"plt.figure(figsize = (12,7))\ny1 = data_acc[\"Acceleration\"][:20]\ny2 = data_acc[\"TopSpeed\"][:20]\nx = data_acc[\"Name\"][:20]\nsns.lineplot(x = x,y = y1,color = \"r\")\nsns.scatterplot(x = x,y = y1,color = \"r\")\n\nplt.xticks(rotation = \"vertical\")\n\nplt.title(\"Acceleration vs Car\")\nplt.xlabel(\"Car Name\")","cca7e92a":"plt.figure(figsize = (12,7))\ndata_ts =  data.sort_values(by = [\"TopSpeed\"],ascending = False)\ny2 = data_ts[\"TopSpeed\"][:20]\nx = data_ts[\"Name\"][:20]\nsns.lineplot(x = x,y = y2,color = \"g\")\nsns.scatterplot(x = x,y = y2,color = \"g\")\n\nplt.xticks(rotation = \"vertical\")\nplt.title(\"Top Speed vs Car\")\nplt.xlabel(\"Car Name\")\n","b4fefe90":"data_eff = data.sort_values(by = [\"Efficiency\"],ascending = False)[:20]\nplt.figure(figsize = (12,7))\nsns.barplot(x= data_eff[\"Name\"],y = data_eff[\"Efficiency\"],palette = \"mako\")\nplt.xticks(rotation = \"vertical\")\nplt.xlabel(\"Car Name\")\nplt.title(\"Efficiency vs Car\")","81896549":"data[\"FastChargeSpeed\"] = data.FastChargeSpeed.str.strip(\"km\/h\")","7a7b6099":"data[\"FastChargeSpeed\"] = data[\"FastChargeSpeed\"].replace(\"-\",\"0\")","1bc5f3c8":"data[\"FastChargeSpeed\"] = data.FastChargeSpeed.astype(float)","c2b69fc6":"data[\"FastChargeSpeed\"] = round(data.FastChargeSpeed.replace(0,data[\"FastChargeSpeed\"].mean()))","1d2372ad":"a = 5 \n# for efficiency\nb = 4\n# for FastChargeSpeed\nc = 3\n# for TopSpeed\nd = 2\n# for Acceleration\ne = 1\n# for Range\n","c276f919":"rating = data[\"Efficiency\"]*a +data[\"FastChargeSpeed\"]*b + data[\"TopSpeed\"]*c + data[\"Acceleration\"]*d + data[\"Range\"]*e\ndata[\"Rating\"] = rating\n ","a6de54e9":"plt.figure(figsize = (12,7))\ndata_rat = data[[\"Name\",\"Rating\",\"PriceinGermany\"]].sort_values(by = [\"Rating\"],ascending = False)\ndata_rat_20 = data_rat[:20]\nsns.barplot(x = data_rat_20[\"Name\"],y = data_rat_20[\"Rating\"],palette = \"viridis\" )\n\nplt.xticks(rotation = \"vertical\")\nplt.xlabel(\"Car Name\")","168eda22":"plt.figure(figsize = (12,7))\nsns.barplot(x = data_rat_20[\"Name\"],y = data_rat_20[\"PriceinGermany\"],palette = \"viridis\" )\nplt.xticks(rotation = \"vertical\")","3c6c2e7c":"rating_w_price = data[\"Rating\"]**2\/data[\"PriceinGermany\"]\ndata[\"Rating_w_price\"] = rating_w_price","e6ef781b":"data_rp = data[[\"Name\",\"Rating_w_price\"]].sort_values(by = [\"Rating_w_price\"],ascending = False)\ndata_rp_20 = data_rp[:20]\nplt.figure(figsize = (12,7))\nsns.barplot(x = data_rp_20[\"Name\"],y = data_rp_20[\"Rating_w_price\"],palette = \"cubehelix\")\nplt.xticks(rotation = \"vertical\")","50d7ee37":"namelis = []\nfor i in data[\"Name\"]:\n    x= i.split()\n    namelis.append(x[0])\n    \ndata[\"New_Name\"] = namelis\ndata[\"New_Name\"]\n    ","11868fef":"data_comp = data[[\"New_Name\",\"Rating\"]].sort_values(by = [\"Rating\"],ascending = False)","79ef5b40":"data_comp = data_comp[:100]\nplt.figure(figsize = (12,7))\nsns.countplot(data_comp[\"New_Name\"],order = data_comp['New_Name'].value_counts().index)\nplt.title(\"Company vs Number of cars in Top 100\")\nplt.xlabel(\"Companies\")\nplt.xticks(rotation = \"vertical\")","52d0e850":"# Leading Electric-Car Manufacturers","073b79f0":"# Lucid Air Pure seems to be the best choice, price and performance wise.\nIf you wish to buy, here is the link https:\/\/ev-database.org\/car\/1318\/Lucid-Air-Pure#:~:text=Battery%20Electric%20Vehicle,157%20Wh%2Fkm%20*Efficiency\n\n","b9711086":"I'll be taking PriceinGermany amount only  as it seems to be better distributed and euro covers all of the Europe too.","4b244c88":"# Giving different parameters weightages to create an overall rating of the cars\nI have given the weightages as per my needs that I would have wanted in my brand new electric car.","cbedfa9d":"Please feel free to give an sort of advise or feedback. \nStill Learning.\nIf you find this work useful, please don't forget upvoting \ud83d\udc4d","ec79beb4":"Cleaning the rest of data\n","1588f291":"# Comparing the Ratings with the Prices, to find the  best choice for Electric Car"}}