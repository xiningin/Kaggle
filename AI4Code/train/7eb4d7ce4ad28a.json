{"cell_type":{"7e6a4966":"code","edc12426":"code","5cd233ad":"code","e529e4f8":"code","a14c7e7e":"code","dfb6a64d":"code","b3484c37":"code","ac40fb8a":"code","d481ef18":"code","b1169d21":"code","2d999840":"markdown","853d52b9":"markdown","074f5348":"markdown","546f8123":"markdown","220d45fb":"markdown","190559c5":"markdown","7dbe4265":"markdown","32da52a8":"markdown","a1b925aa":"markdown"},"source":{"7e6a4966":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom mpl_toolkits import mplot3d\n#plt.style.use(['dark_background'])\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","edc12426":"data = pd.read_csv(\"\/kaggle\/input\/smallethdata\/smallerData.csv\")\n\n\n# Import Labelled data\nlabels = pd.read_csv('\/kaggle\/input\/labels1\/Ethereum_labels.csv')\nlabels.columns = ['address', 'category']\nlabels.head()\n\ndf = data.join(labels.set_index('address'), on='address')\ny = pd.DataFrame()\ny['category'] = df['category']\n\n\ndrop_list = [\"address\"]\ndata = data.drop(drop_list,axis=1)\ndata.head()","5cd233ad":"from sklearn.preprocessing import QuantileTransformer\n#Initialize our scaler\nscaler = QuantileTransformer(output_distribution='uniform')\n#Scale each column in numer\nX = pd.DataFrame(scaler.fit_transform(data))\nX.columns = [\"eth_balance_Scaled\",\"usd_balance_Scaled\",\"total_incoming_Scaled\",\"total_outgoing_Scaled\",\"num_incoming_tx_Scaled\",\"num_outgoing_tx_Scaled\",\"smart_contract_transaction_counts_Scaled\",\"distinct_smart_contract_interacted_Scaled\"]","e529e4f8":"from sklearn.decomposition import PCA\n#PCA with two principal components\nPCA_2d = PCA(n_components=2).fit(X)\n#PCA_2d.head()\nprint(PCA_2d.explained_variance_)\nPCA_2d = PCA(n_components=2).fit_transform(X)\nplt.scatter(PCA_2d[:, 0], PCA_2d[:, 1], marker='.', s=30, lw=0, alpha=0.7, edgecolor='k')","a14c7e7e":"from sklearn.metrics import silhouette_samples, silhouette_score\nfrom sklearn.cluster import AgglomerativeClustering\nimport matplotlib.cm as cm\n\nfor n_clusters in range(2,11):\n    # Create a subplot with 1 row and 2 columns\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n    fig.set_size_inches(18, 7)\n \n    # The 1st subplot is the silhouette plot\n    # The silhouette coefficient can range from -1, 1 but in this example all\n    # lie within [-0.1, 1]\n    ax1.set_xlim([-0.1, 1])\n    # The (n_clusters+1)*10 is for inserting blank space between silhouette\n    # plots of individual clusters, to demarcate them clearly.\n    ax1.set_ylim([0, len(X) + (n_clusters) * 10])\n\n    # Initialize the clusterer with n_clusters value and a random generator\n    # seed of 10 for reproducibility.\n    \n    clusterer = AgglomerativeClustering(n_clusters=n_clusters, affinity='euclidean', linkage='ward')\n    cluster_labels = clusterer.fit_predict(X)\n\n    # The silhouette_score gives the average value for all the samples.\n    # This gives a perspective into the density and separation of the formed\n    # clusters\n    silhouette_avg = silhouette_score(X, cluster_labels)\n    print(\"For n_clusters =\", n_clusters,\n          \"The average silhouette_score is :\", silhouette_avg)\n\n    # Compute the silhouette scores for each sample\n    sample_silhouette_values = silhouette_samples(X, cluster_labels)\n\n    y_lower = 10\n    for i in range(n_clusters):\n        # Aggregate the silhouette scores for samples belonging to\n        # cluster i, and sort them\n        ith_cluster_silhouette_values = \\\n            sample_silhouette_values[cluster_labels == i]\n\n        ith_cluster_silhouette_values.sort()\n\n        size_cluster_i = ith_cluster_silhouette_values.shape[0]\n        y_upper = y_lower + size_cluster_i\n\n        color = cm.nipy_spectral(float(i+1) \/ n_clusters)\n        ax1.fill_betweenx(np.arange(y_lower, y_upper),\n                          0, ith_cluster_silhouette_values,\n                          facecolor=color, edgecolor=color, alpha=0.7)\n\n        # Label the silhouette plots with their cluster numbers at the middle\n        ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n\n        # Compute the new y_lower for next plot\n        y_lower = y_upper + 10  # 10 for the 0 samples\n\n    ax1.set_title(\"The silhouette plot for the various clusters.\")\n    ax1.set_xlabel(\"The silhouette coefficient values\")\n    ax1.set_ylabel(\"Cluster label\")\n\n    # The vertical line for average silhouette score of all the values\n    ax1.axvline(x=silhouette_avg, color=\"red\", linestyle=\"--\")\n\n    ax1.set_yticks([])  # Clear the yaxis labels \/ ticks\n    ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])\n\n    # 2nd Plot showing the actual clusters formed\n    colors = cm.nipy_spectral((cluster_labels.astype(float)) \/ n_clusters)\n    ax2.scatter(PCA_2d[:, 0], PCA_2d[:, 1], marker='.', s=30, lw=0, alpha=0.7,\n                c=colors, edgecolor='k')\n\n   \n\n    ax2.set_title(\"The visualization of the clustered data.\")\n    ax2.set_xlabel(\"Feature space for the 1st feature\")\n    ax2.set_ylabel(\"Feature space for the 2nd feature\")\n\n    plt.suptitle((\"Silhouette analysis for clustering on  data \"\n                  \"with n_clusters = %d\" % n_clusters),\n                 fontsize=14, fontweight='bold')\n\nplt.show()","dfb6a64d":"import scipy.cluster.hierarchy as shc\nplt.figure(figsize=(10,7))  \nplt.title(\"Dendrograms\")  \ndend = shc.dendrogram(shc.linkage(X, method='ward'))","b3484c37":"from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.graph_objs as go\ndata = []\n# 8 colors\nmarkers = [dict(color = 'rgba(255, 255, 0, 0.8)'), \n           dict(color = 'rgba(172, 255, 255, 0.8)'),\n           dict(color = 'rgba(204,255,0,1)'),\n           dict(color = 'rgba(255,172,220, 0.8)'),\n           dict(color = 'rgba(150, 128, 2, 0.8)'),\n           dict(color = 'rgba(153,0,102,0.8)'),\n           dict(color = 'rgba(51,102,255,0.8)'),\n           dict(color = 'rgba(65,151,59,0.8)'),\n           dict(color = 'rgba(255,0,0,0.8)'),\n           dict(color = 'rgba(0,0,0,0.8)')]\n\ndf_plot = X.copy()\ndf_plot['category'] = y['category'].tolist()\ndf_plot['PCA 1'] = PCA_2d[:,0]\ndf_plot['PCA 2'] = PCA_2d[:,1]\n\ncategory_type = ['Exchange' ,  'Gambling', 'ICO Wallets', 'Blockchain','Fake \/ Hack']\nlabeled_data =  df_plot[~df_plot[\"category\"].isin(category_type)]\ndata.append(go.Scatter(\n                    x = labeled_data[\"PCA 1\"],\n                    y = labeled_data[\"PCA 2\"],\n                    mode = \"markers\",\n                    name = \"Unlabeled Data\",\n                    marker = markers[0],\n                    text = None))\n\nfor i in range(len(category_type)):\n    labeled_data =  df_plot[df_plot[\"category\"] == category_type[i]]\n    data.append(go.Scatter(\n                        x = labeled_data[\"PCA 1\"],\n                        y = labeled_data[\"PCA 2\"],\n                        mode = \"markers\",\n                        name = category_type[i], \n                        marker = markers[4 + i], # plus 4 because the colors after index 4 is darker\n                        text = None))\n\n    \ntitle = \"Visualizing Categories in two Dimension Using PCA\"\n\nlayout = dict(title = title,\n              xaxis= dict(title= 'PC1',ticklen= 5,zeroline= False),\n              yaxis= dict(title= '',ticklen= 5,zeroline= False)\n             )\n\nfig = dict(data = data, layout = layout)\n\niplot(fig)","ac40fb8a":"from sklearn.cluster import AgglomerativeClustering\nnum_clusters = 4\ncluster = AgglomerativeClustering(n_clusters=num_clusters, affinity='euclidean', linkage='ward')  \ncluster.fit_predict(X)\n\nX[\"Cluster\"] = cluster.labels_\nX[\"Cluster\"].value_counts()","d481ef18":"from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.graph_objs as go\ndata = []\n# 8 colors\nmarkers = [dict(color = 'rgba(255, 255, 0, 0.8)'), \n           dict(color = 'rgba(172, 255, 255, 0.8)'),\n           dict(color = 'rgba(204,255,0,1)'),\n           dict(color = 'rgba(255,172,220, 0.8)'),\n           dict(color = 'rgba(150, 128, 2, 0.8)'),\n           dict(color = 'rgba(153,0,102,0.8)'),\n           dict(color = 'rgba(51,102,255,0.8)'),\n           dict(color = 'rgba(65,151,59,0.8)'),\n           dict(color = 'rgba(255,0,0,0.8)'),\n           dict(color = 'rgba(0,0,0,0.8)')]\n\ndf_plot = X.copy()\ndf_plot['category'] = y['category'].tolist()\ndf_plot['PCA 1'] = PCA_2d[:,0]\ndf_plot['PCA 2'] = PCA_2d[:,1]\n\n\nfor i in range(num_clusters):\n    cluster =  df_plot[df_plot[\"Cluster\"] ==i]\n    data.append(go.Scatter(\n                        x = cluster[\"PCA 1\"],\n                        y = cluster[\"PCA 2\"],\n                        mode = \"markers\",\n                        name = \"Cluster \" + str(i),\n                        marker = markers[i],\n                        text = None))\n\nfor i in range(len(category_type)):\n    cluster =  df_plot[df_plot[\"category\"] == category_type[i]]\n    data.append(go.Scatter(\n                        x = cluster[\"PCA 1\"],\n                        y = cluster[\"PCA 2\"],\n                        mode = \"markers\",\n                        name = category_type[i],\n                        marker = markers[num_clusters + i],\n                        text = None))\n\n    \ntitle = \"Visualizing Categories in two Dimension Using PCA\"\n\nlayout = dict(title = title,\n              xaxis= dict(title= 'PC1',ticklen= 5,zeroline= False),\n              yaxis= dict(title= '',ticklen= 5,zeroline= False)\n             )\n\nfig = dict(data = data, layout = layout)\n\niplot(fig)","b1169d21":"label=np.array([\"eth_balance_Scaled\",\"usd_balance_Scaled\",\"total_incoming_Scaled\",\"total_outgoing_Scaled\",\"num_incoming_tx_Scaled\",\"num_outgoing_tx_Scaled\",\"smart_contract_transaction_counts_Scaled\",\"distinct_smart_contract_interacted_Scaled\"])\nimport seaborn as sns\n\n# Change Category label to numbers\nfor i, c in enumerate(category_type):\n  y = pd.DataFrame(y['category'].replace(c,i))\ny = y.fillna(-1)\n\ndf_plot = X.copy()\ndf_plot['category'] = y['category']\ncolumns = df_plot.columns.to_list()\ncolumns.remove('category')\ncolumns.remove('Cluster')\ndf_plot = df_plot.drop('Cluster',axis=1)\ndf_mean = df_plot.groupby('category').mean().to_numpy()\n\n\n\nfor i in range(len(category_type)):\n    fig=plt.figure()\n    ax = fig.add_subplot(111, polar=True)\n    angles=np.linspace(0, 2*np.pi, len(columns), endpoint=False)\n    stats=np.concatenate((df_mean[i],[df_mean[i][0]]))\n    angles=np.concatenate((angles,[angles[0]]))\n\n    fig.suptitle(category_type[i])\n    ax.plot(angles, stats, 'o-', linewidth=2)\n    ax.fill(angles, stats, alpha=0.25)\n    ax.set_thetagrids(angles * 180\/np.pi, columns)\nax.grid(True)","2d999840":"## Silhouette Analysis \nFrom cluster size 2 to 10","853d52b9":"## Unlabelled Data Scatter Plot","074f5348":"## Normalise\nNormalise data with Quantile Transform to be reduce outliers and be more robust","546f8123":"## Read and Clean data\nDrop columns that are not important for the clustering","220d45fb":"## Cluster plot of Hierarchical Result","190559c5":"## Dendrogram\nPlot a Dendrogram to show the relationship between each clusters\/points","7dbe4265":"## Dimensionality reduction with PCA","32da52a8":"## Hierarchical Clustering\nUsing Agglomerative clustering which is a top down approach.\nuse the best cluster size as found above with the silhoutte method.","a1b925aa":"## Radar Chart plot of the result\nHelps to visualize the characterisctics of every account types clustered"}}