{"cell_type":{"e5a126c3":"code","e76ca628":"code","66a856d6":"code","4695a026":"code","888f2352":"code","3e6bd412":"code","17b3cc46":"code","a76dc5a4":"code","dd164cc2":"code","e4d70c04":"code","94b676d0":"code","6ea6bfb3":"code","ca067cde":"code","01801063":"code","42e8ca45":"code","3db80ca8":"code","386ea35f":"code","542ff23d":"code","74c8b3ea":"code","f9d713f2":"code","84601800":"code","9a7b2e22":"code","f347094b":"code","0470568e":"code","67c81cc2":"code","02d34384":"code","15e02297":"code","679115af":"code","8491f935":"code","b0c9bf95":"code","d444ebec":"code","03164ee1":"code","73d4bdc2":"code","3498d41b":"code","735fb071":"code","1727b4fd":"code","a5fc0f42":"code","5cc2360b":"code","bd5bbd8a":"code","40f0d14f":"code","0f2358af":"code","25f1bdd4":"code","b5f68aad":"code","6c2cf26d":"code","7bc3dae7":"code","472d0d31":"markdown","dba3cdaf":"markdown","46102b70":"markdown","063dbf6f":"markdown","dac449aa":"markdown","f428b542":"markdown","38c03bef":"markdown","af352910":"markdown"},"source":{"e5a126c3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","e76ca628":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","66a856d6":"from fastai import *\nfrom fastai.vision import *","4695a026":"# batch size\nbs = 64","888f2352":"# data path\nPATH = \"..\/input\/\"\n\n# path to save model, as input path is read-only\nMODEL_PATH = \"\/tmp\/model\/\"","3e6bd412":"# GPU required\ntorch.cuda.is_available()","17b3cc46":"torch.backends.cudnn.enabled","a76dc5a4":"!head ..\/input\/labels.csv","dd164cc2":"# transforms applied to the images\ntfms = get_transforms(do_flip=True)\n\n# create ImageDataBunch object (images are resized to 'size')\ndata = ImageDataBunch.from_csv(PATH, folder='train', test='test', suffix='.jpg', ds_tfms=tfms,\n                               csv_labels='labels.csv', fn_col=0, label_col=1, size=128, bs=bs)\n\n# normalize\ndata.normalize(imagenet_stats)","e4d70c04":"data.show_batch(rows=4, figsize=(12,12))","94b676d0":"learn = create_cnn(data, models.resnet34, metrics=accuracy, model_dir=MODEL_PATH)","6ea6bfb3":"learn.model","ca067cde":"learn.fit_one_cycle(4)","01801063":"# save the weights\nlearn.save('\/tmp\/model\/stage-1')","42e8ca45":"interp = ClassificationInterpretation.from_learner(learn)\n\nlosses, idxs = interp.top_losses()\n\nlen(data.valid_ds)==len(losses)==len(idxs)","3db80ca8":"interp.plot_top_losses(9, figsize=(15,11))","386ea35f":"interp.plot_confusion_matrix(figsize=(24,24), dpi=60)","542ff23d":"# combinations of predicted and actual that got wrong the most often\ninterp.most_confused(min_val=3)","74c8b3ea":"learn.unfreeze()","f9d713f2":"learn.fit_one_cycle(1)","84601800":"learn.load('\/tmp\/model\/stage-1')","9a7b2e22":"learn.lr_find()","f347094b":"learn.recorder.plot()","0470568e":"learn.unfreeze()\nlearn.fit_one_cycle(4, max_lr=slice(1e-6,1e-4))","67c81cc2":"learn.recorder.plot_lr(show_moms=True)","02d34384":"learn.recorder.plot_losses()","15e02297":"learn.recorder.plot_losses()","679115af":"learn.load('\/tmp\/model\/stage-1')","8491f935":"learn.unfreeze()\nlearn.fit(4, lr=slice(1e-6))","b0c9bf95":"learn.fit(4, lr=slice(1e-6))","d444ebec":"# transforms applied to the images\ntfms = get_transforms(do_flip=True)\n\n# create ImageDataBunch object (images are resized to 'size')\ndata = ImageDataBunch.from_csv(PATH, folder='train', test='test', suffix='.jpg', ds_tfms=tfms,\n                               csv_labels='labels.csv', fn_col=0, label_col=1, size=128, bs=bs\/\/2)\n\n# normalize\ndata.normalize(imagenet_stats)","03164ee1":"learn = create_cnn(data, models.resnet50, metrics=accuracy, model_dir=MODEL_PATH)","73d4bdc2":"learn.model","3498d41b":"learn.lr_find()\nlearn.recorder.plot()","735fb071":"learn.fit_one_cycle(5, max_lr=slice(1e-3,1e-2))","1727b4fd":"learn.recorder.plot_losses()","a5fc0f42":"learn = create_cnn(data, models.resnet101, metrics=accuracy, model_dir=MODEL_PATH)","5cc2360b":"learn.model","bd5bbd8a":"learn.lr_find()\nlearn.recorder.plot()","40f0d14f":"learn.fit_one_cycle(6, max_lr=slice(1e-3,1e-2))","0f2358af":"learn.recorder.plot_losses()","25f1bdd4":"predictions = learn.get_preds(ds_type=DatasetType.Test)","b5f68aad":"sample_submission_df = pd.read_csv('..\/input\/sample_submission.csv')\nsample_submission_df.head()","6c2cf26d":"submission_df = sample_submission_df.copy()\nfor i in range(len(submission_df)):\n    submission_df.iloc[i, 1:] = predictions[0][i].tolist()\nsubmission_df.head()","7bc3dae7":"# Submission\nsubmission_df.to_csv(\"submission.csv\", index=False)","472d0d31":"# Training: resnet101","dba3cdaf":"# Load the data","46102b70":"# Training: resnet34","063dbf6f":"# Comparing with normal fit","dac449aa":"## Fine-tuning the model","f428b542":"# Training: resnet50","38c03bef":"## Interpreting the results","af352910":"# Get predictions"}}