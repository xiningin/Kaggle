{"cell_type":{"dbc1972e":"code","72cced0b":"code","7a858be8":"code","24043ec5":"code","7b867a67":"code","a14e84ef":"code","2f522e70":"code","e40a77e4":"code","455ccd2b":"code","b58e9632":"code","4dc946d3":"code","23b714da":"code","44b3e6a3":"code","c1d3b70b":"code","44c7f40f":"code","92b01bd9":"code","77e3f98c":"code","a5b8cd11":"code","27d4aa59":"code","b290ed88":"markdown","522ff0f9":"markdown","97ac0606":"markdown","6742f4ef":"markdown","daf9d17a":"markdown","a5df7c8e":"markdown","69d39371":"markdown"},"source":{"dbc1972e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","72cced0b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error     \nimport matplotlib.dates as dates\nimport datetime as dt","7a858be8":"test=pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/test.csv')\ntrain=pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/train.csv')","24043ec5":"train.head()","7b867a67":"train.info()","a14e84ef":"train.describe()","2f522e70":"test.head()\n","e40a77e4":"test.info()","455ccd2b":"test.describe()","b58e9632":"confirmed_total_date_India = train[(train['Country_Region']=='India') & train['ConfirmedCases']!=0].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_India = train[(train['Country_Region']=='India') & train['ConfirmedCases']!=0].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_India = confirmed_total_date_India.join(fatalities_total_date_India)\n\nconfirmed_total_date_US = train[(train['Country_Region']=='US') & train['ConfirmedCases']!=0].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_US = train[(train['Country_Region']=='US') & train['ConfirmedCases']!=0].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_US = confirmed_total_date_US.join(fatalities_total_date_US)\n\nconfirmed_total_date_Italy = train[(train['Country_Region']=='Italy') & train['ConfirmedCases']!=0].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Italy = train[(train['Country_Region']=='Italy') & train['ConfirmedCases']!=0].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Italy = confirmed_total_date_Italy.join(fatalities_total_date_Italy)\n\nIndia = [i for i in total_date_India.ConfirmedCases['sum'].values]\nIndia_30 = India[0:70]\nUS = [i for i in total_date_US.ConfirmedCases['sum'].values]\nUS_30 = US[0:70]\nitaly = [i for i in total_date_Italy.ConfirmedCases['sum'].values]\nitaly_30 = italy[0:70] \n\n# Plots\nplt.figure(figsize=(12,6))\nplt.plot(India_30)\nplt.plot(US_30)\nplt.plot(italy_30)\nplt.legend([\"India\",\"US\", \"Italy\"], loc='upper left')\nplt.title(\"COVID-19 infections from the first| confirmed case\", size=15)\nplt.xlabel(\"Days\", size=13)\nplt.ylabel(\"Infected cases\", size=13)\nplt.ylim(0, 300000)\nplt.show()","4dc946d3":"confirmed_total_date_India = train[train['Country_Region']=='India'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_India = train[train['Country_Region']=='India'].groupby(['Date']).agg({'Fatalities':['sum']})\n\nplt.figure(figsize=(17,10))\nplt.subplot(2, 2, 1)\nconfirmed_total_date_India.plot(ax=plt.gca(), title='India Confirmed')\nplt.ylabel(\"Confirmed infection cases\", size=13)\n\nplt.subplot(2, 2, 2)\nfatalities_total_date_India.plot(ax=plt.gca(), title='India Fatalities')\nplt.ylabel(\"Fatalities cases\", size=13)\n","23b714da":"confirmed_total_date_Italy = train[train['Country_Region']=='Italy'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Italy = train[train['Country_Region']=='Italy'].groupby(['Date']).agg({'Fatalities':['sum']})\n\nplt.figure(figsize=(17,10))\nplt.subplot(2, 2, 1)\nconfirmed_total_date_Italy.plot(ax=plt.gca(), title='Italy Confirmed')\nplt.ylabel(\"Confirmed infection cases\", size=13)\n\nplt.subplot(2, 2, 2)\nfatalities_total_date_Italy.plot(ax=plt.gca(), title='Italy Fatalities')\nplt.ylabel(\"Fatalities cases\", size=13)\n","44b3e6a3":"confirmed_total_date_US = train[train['Country_Region']=='US'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_US = train[train['Country_Region']=='US'].groupby(['Date']).agg({'Fatalities':['sum']})\n\nplt.figure(figsize=(17,10))\nplt.subplot(2, 2, 1)\nconfirmed_total_date_US.plot(ax=plt.gca(), title='US Confirmed')\nplt.ylabel(\"Confirmed infection cases\", size=13)\n\nplt.subplot(2, 2, 2)\nfatalities_total_date_US.plot(ax=plt.gca(), title='US Fatalities')\nplt.ylabel(\"Fatalities cases\", size=13)\n","c1d3b70b":"train_data_by_country = train.groupby(['Date','Country_Region'],as_index=False).agg({'ConfirmedCases': 'sum', 'Fatalities': 'sum' })\nmax_train_date = train['Date'].max()\ntrain_data_by_country_confirm = train_data_by_country.query('(Date == @max_train_date) & (ConfirmedCases > 100)').sort_values('ConfirmedCases', ascending=False)\ntrain_data_by_country_confirm.set_index('Country_Region', inplace=True)\ndisplay(train_data_by_country_confirm.head())\n\nfrom itertools import cycle, islice\ndiscrete_col = list(islice(cycle(['blue', 'r', 'g', 'k', 'b', 'c', 'm']), None, len(train_data_by_country_confirm.head(30))))\nplt.rcParams.update({'font.size': 22})\ntrain_data_by_country_confirm.head(20).plot(figsize=(20,15), kind='barh', color=discrete_col)\nplt.legend([\"Confirmed Cases\", \"Fatalities\"]);\nplt.xlabel(\"Covid-19 Affected\")\nplt.title(\"First 30 Countries with Highest Confirmed Cases\")\nylocs, ylabs = plt.yticks()\nfor i, v in enumerate(train_data_by_country_confirm.head(20)[\"ConfirmedCases\"][:]):\n    plt.text(v+0.01, ylocs[i]-0.25, str(int(v)), fontsize=12)\nfor i, v in enumerate(train_data_by_country_confirm.head(20)[\"Fatalities\"][:]):\n    if v > 0: #disply for only >300 fatalities\n        plt.text(v+0.01,ylocs[i]+0.1,str(int(v)),fontsize=12)","44c7f40f":"def getColumnInfo(df):\n    n_province =  df['Province_State'].nunique()\n    n_country  =  df['Country_Region'].nunique()\n    n_days     =  df['Date'].nunique()\n    start_date =  df['Date'].unique()[0]\n    end_date   =  df['Date'].unique()[-1]\n    return n_province, n_country, n_days, start_date, end_date\n\ndef reformat_time(reformat, ax):\n    ax.xaxis.set_major_locator(dates.WeekdayLocator())\n    ax.xaxis.set_major_formatter(dates.DateFormatter('%b %d'))    \n    if reformat: #reformat again if you wish\n        date_list = train_data_by_date.reset_index()[\"Date\"].tolist()\n        x_ticks = [dt.datetime.strftime(t,'%Y-%m-%d') for t in date_list]\n        x_ticks = [tick for i,tick in enumerate(x_ticks) if i%8==0 ]# split labels into same number of ticks as by pandas\n        ax.set_xticklabels(x_ticks, rotation=90)\n    # cosmetics\n    ax.yaxis.grid(linestyle='dotted')\n    ax.spines['right'].set_color('none')\n    ax.spines['top'].set_color('none')\n    ax.spines['left'].set_color('none')\n    ax.spines['bottom'].set_color('none')\n\ntrain['Date'] = pd.to_datetime(train['Date'])\ntrain_data_by_date = train.groupby(['Date'],as_index=True).agg({'ConfirmedCases': 'sum','Fatalities': 'sum'})\n                                                                     \nnum0 = train_data_by_date._get_numeric_data() \nnum0[num0 < 0.0] = 0.0\n\n\n## ======= Sort by countries with fatalities > 500 ========\n\ntrain_data_by_country_max = train.groupby(['Country_Region'],as_index=True).agg({'ConfirmedCases': 'max', 'Fatalities': 'max'})\ntrain_data_by_country_fatal = train_data_by_country_max[train_data_by_country_max['Fatalities']>500]\ntrain_data_by_country_fatal = train_data_by_country_fatal.sort_values(by=['Fatalities'],ascending=False).reset_index()\ndisplay(train_data_by_country_fatal.head(20))\n\ndf_merge_by_country = pd.merge(train,train_data_by_country_fatal['Country_Region'],on=['Country_Region'],how='inner')\ndf_max_fatality_country = df_merge_by_country.groupby(['Date','Country_Region'],as_index=False).agg({'ConfirmedCases': 'sum',\n                                                                                                     'Fatalities': 'sum'})\n\n                                                                                                                                                                                                       \n                                                                                                    \nnum1 = df_max_fatality_country._get_numeric_data() \nnum1[num1 < 0.0] = 0.0\ndf_max_fatality_country.set_index('Date',inplace=True)\n#display(df_max_fatality_country.head(20))\n\ncountries = train_data_by_country_fatal['Country_Region'].unique()\n\nplt.rcParams.update({'font.size': 16})\n\nfig,(ax0,ax1) = plt.subplots(1,2,figsize=(15, 8))\nfig,(ax2,ax3) = plt.subplots(1,2,figsize=(15, 8))#,sharey=True)\n\ntrain_data_by_date.ConfirmedCases.plot(ax=ax0, x_compat=True, title='Confirmed Cases Globally', legend='Confirmed Cases',\n                                       color=discrete_col)#, logy=True)\nreformat_time(0,ax0)\n\ntrain_data_by_date.Fatalities.plot(ax=ax2, x_compat=True, title='Fatalities Globally', legend='Fatalities', color='r')\nreformat_time(0,ax2)\n\nfor country in countries:\n    match = df_max_fatality_country.Country_Region==country\n    df_fatality_by_country = df_max_fatality_country[match] \n    df_fatality_by_country.ConfirmedCases.plot(ax=ax1, x_compat=True, title='Cumulative Confirmed Cases Nationally')\n    reformat_time(0,ax1)\n    df_fatality_by_country.Fatalities.plot(ax=ax3, x_compat=True, title='Cumulative Fatalities Nationally')\n    reformat_time(0,ax3)\n    \nax1.legend(countries)\nax3.legend(countries)\n","92b01bd9":"def fillState(state, country):\n    if state == EMPTY_VAL: return country\n    return state\n","77e3f98c":"train.rename(columns={'Country_Region':'Country'}, inplace=True)\ntest.rename(columns={'Country_Region':'Country'}, inplace=True)\n\nEMPTY_VAL = \"EMPTY_VAL\"\n\ntrain.rename(columns={'Province_State':'State'}, inplace=True)\ntrain['State'].fillna(EMPTY_VAL, inplace=True)\ntrain['State'] = train.loc[:, ['State', 'Country']].apply(lambda x : fillState(x['State'], x['Country']), axis=1)\n\ntest.rename(columns={'Province_State':'State'}, inplace=True)\ntest['State'].fillna(EMPTY_VAL, inplace=True)\ntest['State'] = test.loc[:, ['State', 'Country']].apply(lambda x : fillState(x['State'], x['Country']), axis=1)\n","a5b8cd11":"submission = train.loc[:, ['Country', 'State', 'ConfirmedCases', 'Fatalities']].groupby(['Country', 'State']).max().reset_index().groupby('Country').sum().sort_values(by='ConfirmedCases', ascending=False).reset_index()\nsubmission[:35].style.background_gradient(cmap='PuBu')\n","27d4aa59":"submission.to_csv('submission.csv',index=False)","b290ed88":"## INDIA","522ff0f9":"## COVID-19 Evolution - India,US,Italy","97ac0606":"#### DATEWISE MAXIMUM CASES","6742f4ef":"## ITALY","daf9d17a":"## COUNTRY WISE MAXIMUM CASES","a5df7c8e":"## USA","69d39371":"## Confirmed Cases and Fatalities Plots"}}