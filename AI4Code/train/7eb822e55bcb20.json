{"cell_type":{"76851446":"code","bb2adca8":"code","6b1f420f":"code","09724616":"code","143c4a18":"code","1eb5b5a9":"code","0da299b8":"code","5a16c57f":"code","6b0cd39c":"code","f9629092":"code","042a12df":"code","6f130ea2":"code","2d5f89f0":"code","8549093d":"code","2615ddc8":"code","fdaf91a8":"code","be83bb3f":"code","ad192f4b":"code","6bbd4385":"code","129b2b90":"code","3682462a":"code","7237db71":"code","c7bdd634":"code","52113a2b":"code","4384dc6f":"code","6ea5bfcb":"code","ca0777c2":"markdown","ef12f125":"markdown","9db4f778":"markdown","88362b37":"markdown","4f2feacb":"markdown"},"source":{"76851446":"!pip install jcopml\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport collections\n\nfrom sklearn.model_selection import GridSearchCV,RandomizedSearchCV,train_test_split\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler,RobustScaler,PolynomialFeatures,OneHotEncoder,OrdinalEncoder,PowerTransformer\nfrom sklearn.linear_model import LinearRegression,ElasticNet\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import mean_squared_error\n\nfrom jcopml.tuning import grid_search_params as gsp, random_search_params as rsp, bayes_search_params as bsp\nfrom jcopml.feature_importance import mean_score_decrease\nfrom jcopml.plot import plot_actual_vs_prediction,plot_classification_report,plot_confusion_matrix,plot_correlation_matrix,plot_residual\n\nwarnings.filterwarnings(\"ignore\")","bb2adca8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6b1f420f":"df = pd.read_csv(\"\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/audi.csv\")\ndf.head()","09724616":"df.isna().sum()","143c4a18":"df.info()","1eb5b5a9":"df.describe()","0da299b8":"df.describe(include='O')","5a16c57f":"for i in df[['model','transmission','fuelType']]:\n    print(\"Unique Values Colums : \", i)\n    print(df[i].unique())","6b0cd39c":"cat_mask = (df.dtypes == np.object)\nnum_mask = (df.dtypes == np.int64) | (df.dtypes == np.float64)\n\ncols_cat = df.columns[cat_mask].to_list()\ncols_num = df.columns[num_mask].to_list()\n\nprint(cols_cat)\nprint(cols_num)","f9629092":"fig,axs = plt.subplots(ncols=3,figsize=(12,8))\n\nfor ax,i in zip(axs.flat, df[cols_cat]):\n    df[i].value_counts().plot(kind='bar',ax=ax)\n    ax.set_title(f'{df[i].name}')\n    ax.tick_params(axis='x')\n    ax.tick_params(axis='y')\nplt.tight_layout()\nplt.show()","042a12df":"fig,axs = plt.subplots(nrows=2,ncols=3,figsize=(15,8))\n\nfor ax,i in zip(axs.flat, df[cols_num]):\n    df[i].plot(kind='hist',ax=ax, bins=10)\n    ax.set_title(f'{df[i].name}')\n    ax.tick_params(axis='x')\n    ax.tick_params(axis='y')\nplt.tight_layout()\nplt.show()","6f130ea2":"plt.bar(df['fuelType'],df['price'])\nplt.xlabel(\"Fuel Type\")\nplt.ylabel(\"Price\");","2d5f89f0":"plt.bar(df['transmission'],df['price'])\nplt.xlabel(\"Transmission\")\nplt.ylabel(\"Price\");","8549093d":"plt.figure(figsize=(15,8))\nplt.bar(df['model'],df['price'])\nplt.xlabel(\"Transmission\")\nplt.ylabel(\"Price\")\nplt.tight_layout();","2615ddc8":"plt.figure(figsize=(10,8))\nsns.boxplot(data=df);","fdaf91a8":"pearson_corr = df.corr()\n\nfigure = plt.figure(figsize=(15,10))\nsns.heatmap(pearson_corr,annot=True, vmin=-1, vmax=+1)\nplt.title(\"PEARSON CORRELATION\")\nplt.show()","be83bb3f":"pd.DataFrame({\"skew\":df[cols_num].skew(axis=0)})","ad192f4b":"X = df.drop(columns='price')\ny = df['price']\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)\nX_train.shape,X_test.shape,y_train.shape,y_test.shape","6bbd4385":"num_pipe = Pipeline([(\"scaler\",RobustScaler()),\n                    ])\n\ncat_pipe = Pipeline([(\"encoder\",OneHotEncoder())\n                    ])\n\nordinal_pipe = Pipeline([(\"encoder\",OrdinalEncoder())])\n\npreprosesor = ColumnTransformer([(\"numeric\",num_pipe,['mileage','tax','mpg','engineSize']),\n                                 (\"categorical\",cat_pipe,['transmission','fuelType']),])","129b2b90":"pipeline = Pipeline([(\"prep\",preprosesor),\n                    (\"algo\",RandomForestRegressor(random_state=42))])\n\nlr = GridSearchCV(pipeline,gsp.rf_params,cv=3,n_jobs=-1,verbose=1)\nlr.fit(X_train,y_train)\n\n# Evaluation\nprint(lr.best_params_)\nprint(lr.score(X_train,y_train),lr.best_score_,lr.score(X_test,y_test))","3682462a":"df_imp = mean_score_decrease(X_train, y_train, lr, plot=True, topk=10)","7237db71":"plot_residual(X_train, y_train, X_test, y_test, lr, lowess=False)","c7bdd634":"num_pipe = Pipeline([(\"scaler\",RobustScaler()),\n                    (\"transform\",PowerTransformer()),\n                    (\"poly\",PolynomialFeatures(degree=2))])\n\ncat_pipe = Pipeline([(\"encoder\",OneHotEncoder())\n                    ])\n\nordinal_pipe = Pipeline([(\"encoder\",OrdinalEncoder())])\n\npreprosesor = ColumnTransformer([(\"numeric\",num_pipe,['mileage','mpg','engineSize'])])\n\npipeline = Pipeline([(\"prep\",preprosesor),\n                    (\"algo\",RandomForestRegressor(random_state=42))])\n\nparameter = {'prep__numeric__poly__degree': [1, 2, 3],\n             'prep__numeric__poly__interaction_only': [True, False],\n             'algo__n_estimators': [100, 103, 105],\n             'algo__max_depth': [10, 11, 12],\n             'algo__max_features': [0.1, 0.11, 0.12],\n             'algo__min_samples_leaf': [1, 3, 5]}\n\n\nlr1 = GridSearchCV(pipeline,parameter,cv=3,n_jobs=-1,verbose=1)\nlr1.fit(X_train,y_train)\n\n# Evaluation\nprint(lr1.best_params_)\nprint(lr1.score(X_train,y_train),lr1.best_score_,lr1.score(X_test,y_test))","52113a2b":"plot_residual(X_train, y_train, X_test, y_test, lr1, lowess=False)","4384dc6f":"plot_actual_vs_prediction(X_train, y_train, X_test, y_test, lr1)","6ea5bfcb":"y_pred = lr1.predict(X_test)\nprint(\"Mean Squared Error : \", mean_squared_error(y_test,y_pred))","ca0777c2":"# Splitting Data","ef12f125":"# Training","9db4f778":"# Tuning Parameter and Poly","88362b37":"# Pipeline","4f2feacb":"# EDA"}}