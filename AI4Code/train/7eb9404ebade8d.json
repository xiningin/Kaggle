{"cell_type":{"22fd3676":"code","5713dcc8":"code","35297f76":"code","2938c594":"code","9dd61fd8":"code","e3a914ce":"code","0b8b9224":"code","8b7b39e0":"code","479734f1":"code","c9f6781f":"markdown","c7d9fa3e":"markdown","90a22146":"markdown","7bb75cb2":"markdown","7b05589f":"markdown","925a9795":"markdown","44c59f5a":"markdown","20477034":"markdown","64e7dfe6":"markdown","fdc58be8":"markdown","b87c7ec9":"markdown","dee5030e":"markdown"},"source":{"22fd3676":"import numpy as np\r\nimport pandas as pd\r\nimport plotly.express as px\r\nimport matplotlib.pyplot as plt\r\nimport plotly.graph_objects as go\r\nimport plotly.figure_factory as ff\r\nfrom sklearn.datasets import make_blobs","5713dcc8":"X,Y=make_blobs(n_samples=800,centers=4,random_state=42)","35297f76":"## For Contributing, refer to expectedoutput1.html in the expected outputs folder.\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=X[Y==0][:,0],\n    y=X[Y==0][:,1],\n    name=\"Class A\",\n    mode=\"markers\",\n    marker_color='rgba(84, 138, 252, 0.65)',\n    marker_line_color='rgba(26, 9, 243, 0.8)',\n    marker_size = 10,\n    marker_line_width = 1,\n    marker_symbol='hexagram',\n    hovertemplate = 'Feature_1: %{x:.5f} <br \/>Feature_2: %{y:.5f}<extra><\/extra>, Class A<extra><\/extra>',\n))\n\nfig.add_trace(go.Scatter(\n    x=X[Y==1][:,0],\n    y=X[Y==1][:,1],\n    name=\"Class B\",\n    mode=\"markers\",\n    marker_color='rgba(255, 117, 0, 0.65)',\n    marker_line_color='rgba(255, 73, 0, 1)',\n    marker_size = 10,\n    marker_line_width = 1,\n    marker_symbol='star-triangle-up',\n    hovertemplate = 'Feature_1: %{x:.5f} <br \/>Feature_2: %{y:.5f}<extra><\/extra>, Class B<extra><\/extra>'\n))\n\nfig.add_trace(go.Scatter(\n    x=X[Y==2][:,0],\n    y=X[Y==2][:,1],\n    name=\"Class C\",\n    mode=\"markers\",\n    marker_color='rgba(23, 156, 2, 0.65)',\n    marker_line_color='rgba(23, 156, 2, 1)',\n    marker_size = 10,\n    marker_line_width = 1,\n    marker_symbol='star-diamond',\n    hovertemplate = 'Feature_1: %{x:.5f} <br \/>Feature_2: %{y:.5f}<extra><\/extra>, Class C<extra><\/extra>'\n))\n\nfig.add_trace(go.Scatter(\n    x=X[Y==3][:,0],\n    y=X[Y==3][:,1],\n    name=\"Class D\",\n    mode=\"markers\",\n    marker_color='rgba(255,116,107,0.65)',\n    marker_line_color='rgba(178, 59, 61, 1)',\n    marker_size = 10,\n    marker_line_width = 1,\n    marker_symbol='x',\n    hovertemplate = 'Feature_1: %{x:.5f} <br \/>Feature_2: %{y:.5f}<extra><\/extra>, Class D<extra><\/extra>'\n))\n\nfig.update_layout(\n    title=\"Visualization of the dataset\",\n    xaxis_title=\"Feature_2\",\n    yaxis_title=\"Feature_1\",\n    legend_title=\"\",\n    width=800,\n    height=800,\n)\n\nfig.show()","2938c594":"class KMeans:\r\n    def __init__(self,X,Y,k):\r\n        self.X=X\r\n        self.Y=Y\r\n        self.k=k\r\n        self.loss = None\r\n        self.clusters={}\r\n        self.loss_list = []\r\n        self.clusters_list = []\r\n        for i in range(self.k):\r\n            np.random.seed(42)\r\n            center=10*(2*np.random.random((self.X.shape[1],))-1)\r\n            points=[]\r\n            self.clusters[i]={'center':center,'points':points}\r\n            \r\n    def distance(self,x1,x2):\r\n        return(np.sqrt(np.sum((x1-x2)**2)))\r\n    \r\n    def Appending_Points(self):\r\n        for point in self.X:\r\n            dist=[]\r\n            for i in range(self.k):\r\n                dist.append(self.distance(point,self.clusters[i]['center']))\r\n            self.clusters[np.argmin(dist)]['points'].append(point)\r\n            self.loss += np.min(dist)\r\n        return(self.clusters)\r\n        \r\n    def updating_clusters(self):\r\n        for i in range(self.k):\r\n            pts=np.array(self.clusters[i]['points'])\r\n            if pts.shape[0]>0:\r\n                self.clusters[i]['center']=pts.mean(axis=0)\r\n                self.clusters[i]['points']=[]\r\n        return(self.clusters)\r\n        \r\n    def n_centers(self):\r\n        for _ in range(30):\r\n            self.loss = 0\r\n            self.clusters=self.Appending_Points()\r\n            self.clusters=self.updating_clusters()\r\n            self.clusters_list.append([self.clusters[i][\"center\"]for i in self.clusters.keys()])\r\n            self.loss_list.append(self.loss)\r\n            if len(self.loss_list) > 2 and self.loss == self.loss_list[-2]:\r\n                break\r\n        return(self.clusters_list, self.loss_list)","9dd61fd8":"Kmeans=KMeans(X,Y,4)\r\nclusters_list, loss_list = Kmeans.n_centers()","e3a914ce":"## Contributed!, refer to expectedoutput2.html in the expected outputs folder.\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \n    y=loss_list, \n    hovertemplate = 'Iteration: %{x} <br \/>Loss: %{y}<extra><\/extra>',\n    mode='lines+markers',\n    marker_color='rgba(84, 138, 252, 0.65)',\n    marker_line_color='rgba(26, 9, 243, 2)',\n    marker_size = 10,\n    marker_line_width = 1.5,\n))\n\n\nfig.update_layout(\n    title=\"Visualising the Loss\",\n    xaxis_title = \"Iteration\",\n    yaxis_title = \"Loss (sum of distances of all points from its closest cluster centre)\",\n    legend_title=\"\",\n    width=800,\n    height=800,\n)\nfig.show()","0b8b9224":"## For Contributing, refer to expectedoutput3.html in the expected outputs folder.","8b7b39e0":"iterations = np.arange(1,11) \n\nsliders_dict = {\n    \"active\": 0,\n    \"yanchor\": \"top\",\n    \"xanchor\": \"left\",\n    \"currentvalue\": {\n        \"font\": {\"size\": 20},\n        \"prefix\": \"No. of Iterations:\",\n        \"visible\": True,\n        \"xanchor\": \"right\"\n    },\n    \"transition\": {\"duration\": 300, \"easing\": \"cubic-in-out\"},\n    \"pad\": {\"b\": 10, \"t\": 50},\n    \"len\": 0.9,\n    \"x\": 0.1,\n    \"y\": 0,\n    \"steps\": []\n}\n\nfor i in range(len(iterations)):\n    slider_step = {'args': [\n        [iterations[i]],{\n            'frame': {'duration': 300, 'redraw': True},\n            'mode': 'immediate',\n            'transition': {'duration': 300}\n        }],\n    'label': str(iterations[i]),\n    'method': 'animate'}\n    sliders_dict['steps'].append(slider_step)\n    \n\n    # make figure\nfig_dict = {\n#     make data\n    \"data\": [go.Scatter(x=X[Y==0][:,0],\n                        y=X[Y==0][:,1],\n                        name=\"Class A\",\n                        mode=\"markers\",\n                        marker_color='rgba(84, 138, 252, 0.25)',\n                        marker_line_color='rgba(26, 9, 243, 0.6)',\n                        marker_size = 10,\n                        marker_line_width = 1,\n                        marker_symbol='hexagram',\n                        hovertemplate = 'Feature_1: %{x:.5f} <br \/>Feature_2: %{y:.5f}<extra><\/extra> Class A<extra><\/extra>',\n                       ),\n             go.Scatter(x=X[Y==1][:,0],\n                        y=X[Y==1][:,1],\n                        name=\"Class B\",\n                        mode=\"markers\",\n                        marker_color='rgba(255, 117, 0, 0.65)',\n                        marker_line_color='rgba(255, 73, 0, 1)',\n                        marker_size = 10,\n                        marker_line_width = 1,\n                        marker_symbol='star-triangle-up',\n                        hovertemplate = 'Feature_1: %{x:.5f} <br \/>Feature_2: %{y:.5f}<extra><\/extra> Class B<extra><\/extra>'\n                       ), \n             go.Scatter(x=X[Y==2][:,0],\n                        y=X[Y==2][:,1],\n                        name=\"Class C\",\n                        mode=\"markers\",\n                        marker_color='rgba(23, 156, 2, 0.25)',\n                        marker_line_color='rgba(23, 156, 2, 0.5)',\n                        marker_size = 10,\n                        marker_line_width = 1,\n                        marker_symbol='star-diamond',\n                        hovertemplate = 'Feature_1: %{x:.5f} <br \/>Feature_2: %{y:.5f}<extra><\/extra> Class C<extra><\/extra>'\n                    ),\n             go.Scatter(x=X[Y==3][:,0],\n                        y=X[Y==3][:,1],\n                        name=\"Class D\",\n                        mode=\"markers\",\n                        marker_color='rgba(255,116,107,0.65)',\n                        marker_line_color='rgba(178, 59, 61, 1)',\n                        marker_size = 10,\n                        marker_line_width = 1,\n                        marker_symbol='x',\n                        hovertemplate = 'Feature_1: %{x:.5f} <br \/>Feature_2: %{y:.5f}<extra><\/extra> Class D<extra><\/extra>'\n                       ),\n             go.Scatter(x=[i[0] for i in clusters_list[0]],\n                        y=[i[1] for i in clusters_list[0]],\n                        name=\"Cluster center\",\n                        mode=\"markers\",\n                        marker_color='black',\n                        hoverinfo='skip')\n            ],\n    \n    \"layout\": {},\n    \"frames\": [go.Frame(data = [go.Scatter(x=X[Y==0][:,0],\n                        y=X[Y==0][:,1],\n                        name=\"Class A\",\n                        mode=\"markers\",\n                        marker_color='rgba(84, 138, 252, 0.25)',\n                        marker_line_color='rgba(26, 9, 243, 0.6)',\n                        marker_size = 10,\n                        marker_line_width = 1,\n                        marker_symbol='hexagram',\n                        hovertemplate = 'Feature_1: %{x:.5f} <br \/>Feature_2: %{y:.5f}<extra><\/extra> Class A<extra><\/extra>',\n                       ),\n             go.Scatter(x=X[Y==1][:,0],\n                        y=X[Y==1][:,1],\n                        name=\"Class B\",\n                        mode=\"markers\",\n                        marker_color='rgba(255, 117, 0, 0.65)',\n                        marker_line_color='rgba(255, 73, 0, 1)',\n                        marker_size = 10,\n                        marker_line_width = 1,\n                        marker_symbol='star-triangle-up',\n                        hovertemplate = 'Feature_1: %{x:.5f} <br \/>Feature_2: %{y:.5f}<extra><\/extra> Class B<extra><\/extra>'\n                       ), \n             go.Scatter(x=X[Y==2][:,0],\n                        y=X[Y==2][:,1],\n                        name=\"Class C\",\n                        mode=\"markers\",\n                        marker_color='rgba(138, 242, 139, 0.25)',\n                        marker_line_color='rgba(23, 156, 2, 0.5)',\n                        marker_size = 10,\n                        marker_line_width = 1,\n                        marker_symbol='star-diamond',\n                        hovertemplate = 'Feature_1: %{x:.5f} <br \/>Feature_2: %{y:.5f}<extra><\/extra> Class C<extra><\/extra>'\n                    ),\n             go.Scatter(x=X[Y==3][:,0],\n                        y=X[Y==3][:,1],\n                        name=\"Class D\",\n                        mode=\"markers\",\n                        marker_color='rgba(255,116,107,0.65)',\n                        marker_line_color='rgba(178, 59, 61, 1)',\n                        marker_size = 10,\n                        marker_line_width = 1,\n                        marker_symbol='x',\n                        hovertemplate = 'Feature_1: %{x:.5f} <br \/>Feature_2: %{y:.5f}<extra><\/extra> Class D<extra><\/extra>'\n                       ),\n             go.Scatter(x=[j[0] for j in clusters_list[i]],\n                        y=[j[1] for j in clusters_list[i]],\n                        name=\"Cluster center\",\n                        mode=\"markers\",\n                        marker_color='black',\n                        hoverinfo='skip')\n                        ], name = str(iterations[i])) for i in range(1,len(iterations))    \n              ]\n}\n\n# make layout\nfig_dict[\"layout\"][\"updatemenus\"] = [\n    {\n        \"buttons\": [\n            {\n                \"args\": [None, {\"frame\": {\"duration\": 500, \"redraw\": False},\n                                \"fromcurrent\": True, \"transition\": {\"duration\": 300,\n                                                                    \"easing\": \"quadratic-in-out\"}}],\n                 \"label\": \"Play\",\n                \"method\": \"animate\"\n            },\n            {\n                \"args\": [[None], {\"frame\": {\"duration\": 0, \"redraw\": False},\n                                  \"mode\": \"immediate\",\n                                  \"transition\": {\"duration\": 0}}],\n                \"label\": \"Pause\",\n                \"method\": \"animate\"\n            }\n        ],\n        \"direction\": \"left\",\n        \"pad\": {\"r\": 10, \"t\": 87},\n        \"showactive\": False,\n        \"type\": \"buttons\",\n        \"x\": 0.1,\n        \"xanchor\": \"right\",\n        \"y\": 0,\n        \"yanchor\": \"top\"\n    }\n]\n\n\nfig_dict[\"layout\"][\"sliders\"] = [sliders_dict]\nfig = go.Figure(fig_dict)\n\nfig.update_layout( width=800, height=800, \n                 xaxis_title=\"Feature_1\", yaxis_title=\"Feature_2\", \n                 xaxis_range = [-13,9],\n                  yaxis_range = [-12, 14.7],\n                 title = \"Visualising the convergence of cluster centres\")\nfig.show()","479734f1":"# Contributed!, refer to expectedoutput4.html in the expected outputs folder.\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=X[Y==0][:,0],\n    y=X[Y==0][:,1],\n    name=\"Class A\",\n    mode=\"markers\",\n    marker_color='rgba(84, 138, 252, 0.65)',\n    marker_line_color='rgba(26, 9, 243, 0.8)',\n    marker_size = 10,\n    marker_line_width = 1,\n    marker_symbol='hexagram',\n    hovertemplate = 'Feature_1: %{x:.5f} <br \/>Feature_2: %{y:.5f}<extra><\/extra>, Class A<extra><\/extra>',\n))\n\nfig.add_trace(go.Scatter(\n    x=X[Y==1][:,0],\n    y=X[Y==1][:,1],\n    name=\"Class B\",\n    mode=\"markers\",\n    marker_color='rgba(255, 117, 0, 0.65)',\n    marker_line_color='rgba(255, 73, 0, 1)',\n    marker_size = 10,\n    marker_line_width = 1,\n    marker_symbol='star-triangle-up',\n    hovertemplate = 'Feature_1: %{x:.5f} <br \/>Feature_2: %{y:.5f}<extra><\/extra>, Class B<extra><\/extra>'\n))\n\nfig.add_trace(go.Scatter(\n    x=X[Y==2][:,0],\n    y=X[Y==2][:,1],\n    name=\"Class C\",\n    mode=\"markers\",\n    marker_color='rgba(23, 156, 2, 0.65)',\n    marker_line_color='rgba(23, 156, 2, 1)',\n    marker_size = 10,\n    marker_line_width = 1,\n    marker_symbol='star-diamond',\n    hovertemplate = 'Feature_1: %{x:.5f} <br \/>Feature_2: %{y:.5f}<extra><\/extra>, Class C<extra><\/extra>'\n))\n\nfig.add_trace(go.Scatter(\n    x=X[Y==3][:,0],\n    y=X[Y==3][:,1],\n    name=\"Class D\",\n    mode=\"markers\",\n    marker_color='rgba(255,116,107,0.65)',\n    marker_line_color='rgba(178, 59, 61, 1)',\n    marker_size = 10,\n    marker_line_width = 1,\n    marker_symbol='x',\n    hovertemplate = 'Feature_1: %{x:.5f} <br \/>Feature_2: %{y:.5f}<extra><\/extra>, Class D<extra><\/extra>'\n))\n\nfig.add_trace(go.Scatter(\n    x=[i[0] for i in clusters_list[-1]],\n    y=[i[1] for i in clusters_list[-1]],\n    name=\"Cluster center\",\n    mode=\"markers\",\n    marker_color='black',\n    hoverinfo='skip'\n))\n\nfig.update_layout(\n    title=\"Visualization of the final cluster centers\",\n    xaxis_title=\"Feature_2\",\n    yaxis_title=\"Feature_1\",\n    legend_title=\"\",\n    width=800,\n    height=800,\n)\n\nfig.show()","c9f6781f":"This notebook is a part of the OneML_ContriHub the link to which can be found [here](https:\/\/github.com\/ContriHUB\/OneML_ContriHub)","c7d9fa3e":"# Visualising the dataset","90a22146":"## Plotting the final cluster centers","7bb75cb2":"## Visualising the cluster centres over iterations","7b05589f":"For demonstration purposes, let us take a 2 dimensional dataset with two features (Feature_1 and Feature_2) and consisting of four clusters (Cluster A, Cluster B, Cluster C and Cluster D).","925a9795":"# Machine Learning Model","44c59f5a":"## Training the model","20477034":"### The loss here represents the sum of distances of all points from its closest cluster centre","64e7dfe6":"# Importing important libraries","fdc58be8":"## Visualising the loss","b87c7ec9":"## Defining the model","dee5030e":"# Loading the training dataset"}}