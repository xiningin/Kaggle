{"cell_type":{"0426e715":"code","2c0f6a53":"code","803194c5":"code","a96d14d8":"code","ff1dd413":"code","d7d0ece7":"code","de412a7b":"code","2203329c":"code","191dcec1":"code","b9fb3ec9":"code","5f87463e":"code","8c2c5740":"code","52b1abfb":"code","0f37ae07":"code","64d70f3e":"code","33df07b3":"code","9cd0f96b":"code","92f340e0":"code","327d2d0a":"code","fa2fcece":"code","603321b9":"code","d944af76":"code","774f4985":"code","994fa078":"code","37f5406a":"code","7ab445bf":"code","ebf1a6c7":"code","ef29e41b":"code","dceb5658":"code","997ac959":"code","b8333267":"code","3b41938a":"code","d2c557f6":"code","f5ba46d3":"code","4fac2eae":"code","215fd24b":"code","b316e651":"code","2d778448":"code","4ee444f4":"code","51861e7b":"code","753e12e5":"code","68a53df8":"code","58123dfd":"code","a4f11c9d":"code","17271ea1":"code","c9a98ef8":"code","de88bb83":"code","59cc4eec":"code","bb73c489":"code","64d2da28":"code","a34da03b":"code","07b84fb2":"code","937353c3":"code","c9c26199":"code","745f3b6a":"code","ee2c260b":"code","748358a9":"code","80e29eb8":"code","a5981434":"code","88e012a0":"code","b6498e42":"code","b23cfebe":"code","33e1a574":"code","89b80b9e":"code","c0560e1a":"code","bb026866":"code","646515ec":"markdown"},"source":{"0426e715":"### Keras and Tensorflow >2.0","2c0f6a53":"nop=0","803194c5":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport requests\nimport requests\n#url = 'https:\/\/min-api.cryptocompare.com\/data\/histominute'+'?fsym=BTC'+'&tsym=USD'+'&limit=2000'+'&aggregate=1'          \ndef csvm(url,coun,nop):\n    response = requests.get(url)\n    data = response.json()['Data']\n   # print(data)\n    import pandas as pd\n    df = pd.DataFrame(data)\n    if coun==0:\n        d=df.iloc[0,0]\n    else:\n        d=10\n    print(d)\n    #df[\"time\"] = pd.to_datetime(df['time'], unit='s')\n    \n    df=df.rename(columns={\"time\": \"timestamp\"})\n    print(df)\n    aj=['volumefrom', 'volumeto','conversionType', 'conversionSymbol']\n    df=df.drop(aj,axis=1)\n        \n    #print(df)\n    #df.to_csv(\"Prices\"+str(nop)+\".csv\")\n    return d,df","a96d14d8":"url = 'https:\/\/min-api.cryptocompare.com\/data\/histominute'+'?fsym=BTC'+'&tsym=USD'+'&limit=2000'+'&aggregate=5'","ff1dd413":"def fx(url,nop):\n    #  \n    for i in range(5):\n        if i==0:\n            n,a=csvm(url,0,nop)\n            print(a)\n        elif i==1:\n            url=url+\"&toTs=\"+str(n)\n            print(url)\n            n-=120000\n            m,ab=csvm(url,1,nop)\n            print(ab)\n           # print(n)\n            a=pd.concat([ab,a],ignore_index=True)\n        else:\n            url=url[:-16]+\"&toTs=\"+str(n)\n            print(url)\n            n-=120000\n            m,ab=csvm(url,1,nop)\n            print(ab)\n           # print(n)\n            a=pd.concat([ab,a],ignore_index=True)\n        a.to_csv(\"Prices\"+str(nop)+\".csv\")","d7d0ece7":"testt=fx(url,nop)\ntestt=pd.read_csv(\"Prices\"+str(nop)+\".csv\")\n\ntestt","de412a7b":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go","2203329c":"#csvm(url,0,0)\ndf=pd.read_csv(\"Prices\"+str(nop)+\".csv\")\n#df=df[::-1#].reset_index().drop(columns=[\"index\"])\ndf[\"timestamp\"]=pd.to_datetime(df[\"timestamp\"],unit=\"s\")\ndf","191dcec1":"df.head()","b9fb3ec9":"df.info()","5f87463e":"df1=df.reset_index()['close']\ndf11=pd.to_datetime(df[\"timestamp\"])","8c2c5740":"df11","52b1abfb":"dgp=df1\n\ndgp","0f37ae07":"import plotly.graph_objects as go\n\nfig=go.Figure(data=go.Scatter(x=df11,y=df1,mode=\"lines\",marker_color=\"seagreen\"))\nfig.update_xaxes(rangeslider_visible=True)\nfig.update_layout(title=\"Stock\")\nfig.show()","64d70f3e":"### LSTM are sensitive to the scale of the data. so we apply MinMax scaler ","33df07b3":"import numpy as np","9cd0f96b":"df1","92f340e0":"from sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler(feature_range=(0,1))\ndf1=scaler.fit_transform(np.array(df1).reshape(-1,1))","327d2d0a":"print(df1)","fa2fcece":"##splitting dataset into train and test split\ntraining_size=int(len(df1)*0.85)\ntest_size=len(df1)-training_size\ntrain_data,test_data=df1[0:training_size,:],df1[training_size:len(df1),:1]","603321b9":"training_size,test_size","d944af76":"train_data","774f4985":"import numpy\n# convert an array of values into a dataset matrix\ndef create_dataset(dataset, time_step=1):\n\tdataX, dataY = [], []\n\tfor i in range(len(dataset)-time_step-1):\n\t\ta = dataset[i:(i+time_step), 0]   ###i=0, 0,1,2,3-----99   100 \n\t\tdataX.append(a)\n\t\tdataY.append(dataset[i + time_step, 0])\n\treturn numpy.array(dataX), numpy.array(dataY)","994fa078":"# reshape into X=t,t+1,t+2,t+3 and Y=t+4\ntime_step = 100\nX_train, y_train = create_dataset(train_data, time_step)\nX_test, ytest = create_dataset(test_data, time_step)","37f5406a":"print(X_train.shape), print(y_train.shape)","7ab445bf":"print(X_test.shape), print(ytest.shape)","ebf1a6c7":"# reshape input to be [samples, time steps, features] which is required for LSTM\nX_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)\nX_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)","ef29e41b":"### Create the Stacked LSTM model\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import GRU","dceb5658":"model=Sequential()\nmodel.add(LSTM(50,return_sequences=True,input_shape=(100,1)))\nmodel.add(LSTM(50,return_sequences=True))\n#model.add(LSTM(50,return_sequences=True))\nmodel.add(GRU(50,return_sequences=True))\nmodel.add(LSTM(50))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error',optimizer='adam')\n","997ac959":"model.summary()","b8333267":"model.summary()","3b41938a":"model.fit(X_train,y_train,validation_data=(X_test,ytest),epochs=200,batch_size=64,verbose=1)","d2c557f6":"import tensorflow as tf","f5ba46d3":"import os \naa=os.listdir()\naa","4fac2eae":"tf.__version__","215fd24b":"### Lets Do the prediction and check performance metrics\ntrain_predict=model.predict(X_train)\ntest_predict=model.predict(X_test)","b316e651":"##Transformback to original form\ntrain_predict=scaler.inverse_transform(train_predict)\ntest_predict=scaler.inverse_transform(test_predict)","2d778448":"### Calculate RMSE performance metrics\nimport math\nfrom sklearn.metrics import mean_squared_error\nmath.sqrt(mean_squared_error(y_train,train_predict))","4ee444f4":"### Test Data RMSE\nmath.sqrt(mean_squared_error(ytest,test_predict))","51861e7b":"#### Plotting \n# shift train predictions for plotting\nlook_back=100\ntrainPredictPlot = numpy.empty_like(df1)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\n# shift test predictions for plotting\ntestPredictPlot = numpy.empty_like(df1)\ntestPredictPlot[:, :] = numpy.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(df1)-1, :] = test_predict\n# plot baseline and predictions\n","753e12e5":"\ntrPP=trainPredictPlot.ravel()\ntePP=testPredictPlot.ravel()\nbc={\"Date\":df11.ravel(),\"Main\":dgp.ravel(),\"Train\":trPP,\"Test\":tePP}\nbc=pd.DataFrame(data=bc)\n#bc=pd.DataFrame(trainPredictPlot,testPredictPlot#,columns=[\"Train\",\"Test\"])\nbc","68a53df8":"bc.to_csv(\"TestingData.csv\")","58123dfd":"!pip install plotly","a4f11c9d":"bc[\"Date\"]=pd.to_datetime(bc[\"Date\"])","17271ea1":"len(trainPredictPlot)","c9a98ef8":"len(test_data)","de88bb83":"x_input=test_data[-100:].reshape(1,-1)\nx_input.shape\n","59cc4eec":"df11","bb73c489":"temp_input=list(x_input)\ntemp_input=temp_input[0].tolist()","64d2da28":"temp_input","a34da03b":"# demonstrate prediction for next 10 days\nfrom numpy import array\n\nlst_output=[]\nn_steps=100\ni=0\nwhile(i<30):\n    \n    if(len(temp_input)>100):\n        #print(temp_input)\n        x_input=np.array(temp_input[1:])\n        print(\"{} day input {}\".format(i,x_input))\n        x_input=x_input.reshape(1,-1)\n        x_input = x_input.reshape((1, n_steps, 1))\n        #print(x_input)\n        yhat = model.predict(x_input, verbose=0)\n        print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat[0].tolist())\n        temp_input=temp_input[1:]\n        #print(temp_input)\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    else:\n        x_input = x_input.reshape((1, n_steps,1))\n        yhat = model.predict(x_input, verbose=0)\n        print(yhat[0])\n        temp_input.extend(yhat[0].tolist())\n        print(len(temp_input))\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    \n\nprint(lst_output)","07b84fb2":"day_new=np.arange(1,101)\nday_pred=np.arange(101,131)","937353c3":"import matplotlib.pyplot as plt","c9c26199":"len(df1)","745f3b6a":"#plt.plot(day_new,scaler.inverse_transform(df1[1158:]))\n#plt.plot(day_pred,scaler.inverse_transform(lst_output))\npllt=scaler.inverse_transform(df1[-100:]).tolist()\npllt.extend(scaler.inverse_transform(lst_output).tolist())\njlk=[]\nfor i in pllt:\n  jlk.append(i[0])\n\njlk","ee2c260b":"pllt=pd.Series(jlk)\npllt.to_csv(\"Extended.csv\")","748358a9":"df3=df1.tolist()\ndf3.extend(lst_output)\nplt.plot(df3[1200:])","80e29eb8":"df3=scaler.inverse_transform(df3).tolist()","a5981434":"plt.plot(df3)","88e012a0":"testt[\"timestamp\"] = pd.to_datetime(testt['timestamp'], unit='s')\ntestt1=testt[\"close\"][-100:]\ndf12=testt[\"timestamp\"]\ndf2=testt1\niop=[]\ndef turn(testt1):\n    testt1=scaler.fit_transform(np.array(testt1).reshape(-1,1))\n    x_input=testt1.reshape(1,-1)\n    x_input = x_input.reshape((1, 100, 1))\n    #print(x_input)\n    yhat = model.predict(x_input, verbose=0)\n    yhat=(scaler.inverse_transform(yhat))\n    print(\"{} minute output\".format(yhat))\n    return yhat\nyo=turn(testt1)\niop.append(yo)\nyo=pd.Series(yo[0][0])\ntestt1=testt1.append(yo, ignore_index=True)\ntestt1=testt1.iloc[1:]\nyo=turn(testt1)\niop.append(yo)","b6498e42":"yhat=pd.Series(np.ravel(iop))","b23cfebe":"df2=df2.append(yhat,ignore_index=True)","33e1a574":"df2","89b80b9e":"import plotly.graph_objects as go\nann=df12.iloc[-100]\nann=pd.date_range(start=ann,periods=102 ,freq='5T')\nann","c0560e1a":"import plotly.graph_objects as go\n\nfig=go.Figure(data=go.Scatter(x=ann,y=df2,mode=\"lines\",marker_color=\"seagreen\"))\nfig.update_xaxes(rangeslider_visible=True)\nfig.update_layout(title=\"Stock\")\nfig.show()","bb026866":"nop=int(input(\"Enter the Number in csv :\"))","646515ec":"### Stock Market Prediction And Forecasting Using Stacked LSTM"}}