{"cell_type":{"2645a7f6":"code","e000d353":"code","9233ddb4":"code","153033db":"code","1297a1fc":"code","15b0478e":"code","0b8f9065":"code","4338f273":"code","da1cd419":"code","6940e204":"code","26e983c3":"code","4d2ba00a":"code","ea3fc378":"code","57a3e93b":"code","e42680b5":"code","da48733a":"code","09579959":"code","53e8391e":"markdown","410b84c8":"markdown","eabeaa31":"markdown","a74980c3":"markdown","ab22363d":"markdown","fb684763":"markdown","1afdfa1d":"markdown"},"source":{"2645a7f6":"import pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing\nfrom sklearn.metrics import mean_squared_error\nfrom xgboost import XGBRegressor\nimport optuna # \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \ub77c\uc774\ube0c\ub7ec\ub9ac\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold","e000d353":"df = pd.read_csv(\"..\/input\/30days-folds\/train_folds.csv\")\ndf_test = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/30-days-of-ml\/sample_submission.csv\")\n\nuseful_features = [c for c in df.columns if c not in (\"id\", \"target\", \"kfold\")]\nobject_cols = [col for col in useful_features if col.startswith(\"cat\")]\ndf_test = df_test[useful_features]\n\nfor col in object_cols:\n    temp_df = []\n    temp_test_feat = None\n    for fold in range(5):\n        xtrain =  df[df.kfold != fold].reset_index(drop=True)\n        xvalid = df[df.kfold == fold].reset_index(drop=True)\n        \n        # \uba85\ubaa9\ud615 \ubcc0\uc218\ub97c \uadf8\ub0e5 \ub77c\ubca8 \ucc98\ub9ac\ud558\uae30\uc5d0\ub294 \ud55c\uacc4\uac00 \uc788\uc73c\ubbc0\ub85c \uac01 \uac12 \ubcc4\ub85c \ud0c0\uac9f\uac12\uc758 \ud3c9\uade0\uc744 \ub300\uc785\ud574\uc8fc\uace0\uc790 \ud55c\ub2e4.\n        # \uc774\ub54c \uacfc\uc801\ud569\uc744 \ub9c9\uae30\uc704\ud574 5-foldCV\ub97c \ud65c\uc6a9\ud558\uc5ec \uac01 \ud3f4\ub4dc\ubcc4 \uac12\uc758 \ud3c9\uade0\uc744 \ub300\uc785\ud574\uc900\ub2e4.\n        feat = xtrain.groupby(col)[\"target\"].agg(\"mean\")\n        feat = feat.to_dict()\n        xvalid.loc[:, f\"tar_enc_{col}\"] = xvalid[col].map(feat)\n        temp_df.append(xvalid)\n        if temp_test_feat is None:\n            temp_test_feat = df_test[col].map(feat)\n        else:\n            temp_test_feat += df_test[col].map(feat)\n    \n    temp_test_feat \/= 5\n    df_test.loc[:, f\"tar_enc_{col}\"] = temp_test_feat\n    df = pd.concat(temp_df)\n    \n\nuseful_features = [c for c in df.columns if c not in (\"id\", \"target\", \"kfold\")]\nobject_cols = [col for col in useful_features if col.startswith(\"cat\")]\ndf_test = df_test[useful_features]","9233ddb4":"def run(trial):\n    # \uad6c\ud558\uace0\uc790\ud558\ub294 \ubcc0\uc218\ub4e4\uc758 \ubc94\uc704 \uc124\uc815\n    fold = 0\n    learning_rate = trial.suggest_float(\"learning_rate\", 1e-2, 0.25, log=True)\n    reg_lambda = trial.suggest_loguniform(\"reg_lambda\", 1e-8, 100.0)\n    reg_alpha = trial.suggest_loguniform(\"reg_alpha\", 1e-8, 100.0)\n    subsample = trial.suggest_float(\"subsample\", 0.1, 1.0)\n    colsample_bytree = trial.suggest_float(\"colsample_bytree\", 0.1, 1.0)\n    max_depth = trial.suggest_int(\"max_depth\", 1, 10)\n\n    xtrain = df[df.kfold != fold].reset_index(drop=True)\n    xvalid = df[df.kfold == fold].reset_index(drop=True)\n\n    ytrain = xtrain.target\n    yvalid = xvalid.target\n\n    xtrain = xtrain[useful_features]\n    xvalid = xvalid[useful_features]\n    \n    # \uc55e\uc5d0\uc11c \uba85\ubaa9\ud615 \ubcc0\uc218\ub4e4\uc5d0 \ub300\ud558\uc5ec \uc0c8\ub85c\uc6b4 \ubcc0\uc218\ub97c \ub9cc\ub4e4\uc5c8\uc73c\ubbc0\ub85c \uae30\uc874 \ubcc0\uc218\ub294 \ub77c\ubca8\uc778\ucf54\ub529\ud558\uc5ec \uc801\uc6a9\n    ordinal_encoder = preprocessing.OrdinalEncoder()\n    xtrain[object_cols] = ordinal_encoder.fit_transform(xtrain[object_cols])\n    xvalid[object_cols] = ordinal_encoder.transform(xvalid[object_cols])\n\n    model = XGBRegressor(\n        random_state=42,\n        # XGB GPU\ud65c\uc6a9 \ud30c\ub77c\ubbf8\ud130\n        tree_method=\"gpu_hist\",\n        gpu_id=1,\n        predictor=\"gpu_predictor\",\n        n_estimators=7000,\n        learning_rate=learning_rate,\n        reg_lambda=reg_lambda,\n        reg_alpha=reg_alpha,\n        subsample=subsample,\n        colsample_bytree=colsample_bytree,\n        max_depth=max_depth,\n    )\n    model.fit(xtrain, ytrain, early_stopping_rounds=300, eval_set=[(xvalid, yvalid)], verbose=1000)\n    preds_valid = model.predict(xvalid)\n    rmse = mean_squared_error(yvalid, preds_valid, squared=False) # \ud3c9\uac00\uc9c0\ud45c \uc124\uc815\n    return rmse","153033db":"study = optuna.create_study(direction=\"minimize\")\nstudy.optimize(run, n_trials=20)","1297a1fc":"# \ucd5c\uc885 \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130\nstudy.best_params","15b0478e":"X = df.drop(['target', 'kfold', 'id'], axis=1)\ny = df.target","0b8f9065":"ordinal_encoder = preprocessing.OrdinalEncoder()\nX[object_cols] = ordinal_encoder.fit_transform(X[object_cols])","4338f273":"para = study.best_params\n\nmodel = XGBRegressor(\n        random_state=42,\n        tree_method=\"gpu_hist\",\n        gpu_id=1,\n        predictor=\"gpu_predictor\",\n        n_jobs=-1,\n        n_estimators=7000,\n        ** para\n    )\n\n\ncross_val_score(model, X, y, cv=5, scoring = 'neg_root_mean_squared_error', n_jobs=-1).mean()","da1cd419":"from optuna import Trial\nfrom optuna.samplers import *\n\nstudy = optuna.create_study(direction=\"minimize\", sampler=TPESampler())\nstudy.optimize(run, n_trials=20)","6940e204":"# \ucd5c\uc885 \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130\nstudy.best_params","26e983c3":"para = study.best_params\n\nmodel = XGBRegressor(\n        random_state=42,\n        tree_method=\"gpu_hist\",\n        gpu_id=1,\n        predictor=\"gpu_predictor\",\n        n_jobs=-1,\n        n_estimators=7000,\n        ** para\n    )\n\ncross_val_score(model, X, y, cv=5, scoring = 'neg_root_mean_squared_error', n_jobs=-1).mean()","4d2ba00a":"from optuna.integration import SkoptSampler\n\nstudy = optuna.create_study(direction=\"minimize\", sampler=SkoptSampler())\nstudy.optimize(run, n_trials=20)","ea3fc378":"study.best_params","57a3e93b":"para = study.best_params\n\nmodel = XGBRegressor(\n        random_state=42,\n        tree_method=\"gpu_hist\",\n        gpu_id=1,\n        predictor=\"gpu_predictor\",\n        n_jobs=-1,\n        n_estimators=7000,\n        ** para\n    )\n\ncross_val_score(model, X, y, cv=5, scoring = 'neg_root_mean_squared_error', n_jobs=-1).mean()","e42680b5":"from optuna.integration import SkoptSampler\n\nsampler=SkoptSampler(skopt_kwargs={'base_estimator':'RF', 'base_estimator':'ET', 'n_random_starts': 0, 'acq_func':'EI', 'acq_func_kwargs': {'xi':0.01}})\n\nstudy = optuna.create_study(direction=\"minimize\", sampler=sampler)\nstudy.optimize(run, n_trials=20)","da48733a":"study.best_params","09579959":"para = study.best_params\n\nmodel = XGBRegressor(\n        random_state=42,\n        tree_method=\"gpu_hist\",\n        gpu_id=1,\n        predictor=\"gpu_predictor\",\n        n_jobs=-1,\n        n_estimators=7000,\n        ** para\n    )\n\ncross_val_score(model, X, y, cv=5, scoring = 'neg_root_mean_squared_error', n_jobs=-1).mean()","53e8391e":"\uc870\uae08\uc758 \ucc28\uc774\uae34 \ud558\uc9c0\ub9cc \uac19\uc740 \ud69f\uc218 \ub0b4 SkoptSampler\uc758 \uacbd\uc6b0\uc5d0 \uac00\uc7a5 \uc88b\uc740 \ud30c\ub77c\ubbf8\ud130\ub97c \ucc3e\uc544\ub0c8\ub2e4.\n\n    \nSkoptSampler\uc758 \ud30c\ub77c\ubbf8\ud130\ub97c \uc870\uc815\ud558\uc5ec \ub2e4\uc2dc \ubaa8\ub378\uc758 \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130\ub97c \ucc3e\uc544\ubcf8\ub2e4\n\n","410b84c8":"optuna\ub97c \uadf8\ub0e5 \uc4f0\uba74 \uc5ec\ub7ec \ubaa8\ub378\uc744 \ubcd1\ub82c\uc801\uc73c\ub85c \uc4f0\ub294 \uae30\ub2a5\ubc16\uc5d0 \uc81c\uc2dc\ub97c \uc548 \ud55c\ub2e4.\n\ub530\ub77c\uc11c \uc5ec\ub7ec\uac00\uc9c0 \uc635\uc158\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud30c\ub77c\ubbf8\ud130\ub97c \ucc3e\uc544\ubcf4\uc790","eabeaa31":"## SkoptSampler\nScikit-Optimize\ub97c \ubc31\uc5d4\ub4dc\ub85c \uc0ac\uc6a9\ud558\ub294 \uc0d8\ud50c\ub7ec.\nhttps:\/\/optuna.readthedocs.io\/en\/stable\/reference\/integration.html","a74980c3":"\uc704\uc758 \ud30c\ub77c\ubbf8\ud130\ub97c \uc124\uc815\ud55c \uacbd\uc6b0 \uac19\uc740 \ud69f\uc218 \ub0b4 \uc88b\uc740 \ud30c\ub77c\ubbf8\ud130\ub97c \ucc3e\uc9c0\ub294 \ubabb\ud588\ub2e4. \ud558\uc9c0\ub9cc \ud69f\uc218\ub97c \ub192\uc778\ub2e4\uba74 \ub2e4\ub978 \ubc29\ubc95\ub4e4 \ubcf4\ub2e4 \ub354 \ube68\ub9ac \uc88b\uc740 \uc131\ub2a5\uc758 \ubaa8\ub378\uc744 \ucc3e\uc744 \uc218 \uc788\uc744 \uac83\uc774\ub2e4.","ab22363d":"# Optuna\n\ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \ucd5c\uc801\ud654 \ud0dc\uc2a4\ud06c\ub97c \ub3c4\uc640\uc8fc\ub294 \ud504\ub808\uc784\uc6cc\ud06c\ub85c \ud30c\ub77c\ubbf8\ud130 \ubc94\uc704\ub098 \ubaa9\ub85d\uc744 \uc124\uc815\ud558\uba74 \ub9e4 trial\ub9c8\ub2e4 \ud30c\ub77c\ubbf8\ud130\ub97c \ubcc0\uacbd\ud558\uba70 \ucd5c\uc801 \ud30c\ub77c\ubbf8\ud130\ub97c \ucc3e\uc2b5\ub2c8\ub2e4.","fb684763":"## TPESampler\nTPE(Tree-structured Parzen Estimator) \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\ub294 \uc0d8\ud50c\ub7ec.\nhttps:\/\/optuna.readthedocs.io\/en\/stable\/reference\/samplers.html","1afdfa1d":"Gaussian Process\uc5d0\uc11c \ub2e4\uc74c \ud30c\ub77c\ubbf8\ud130\ub97c \ucd94\ucc9c\ud558\ub294 \ud568\uc218\ub97c Acquisition Function\uc774\ub77c\uace0 \ud558\ub294\ub370, \uc5ec\uae30\uc120 Expected Improvement(EI)\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud30c\ub77c\ubbf8\ud130\ub97c \ucc3e\ub294\ub2e4. EI\ub294 exploration \uc804\ub7b5 \ubc0f exploitation \uc804\ub7b5 \ubaa8\ub450\ub97c \ub0b4\uc7ac\uc801\uc73c\ub85c \uc77c\uc815 \uc218\uc900 \ud3ec\ud568\ud558\ub3c4\ub85d \uc124\uacc4\ub41c \uac83\uc73c\ub85c, Acquisition Function\uc73c\ub85c \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub41c\ub2e4.\n\n![image.png](attachment:31e1f9e5-aa24-4bcb-aee2-1311947dd47d.png)\n\n- Acquisiton Function : surrogate model\uc774 \ubaa9\uc801\ud568\uc218 (\uc6b0\ub9ac\uac00 \ucc3e\uace0\uc790 \ud558\ub294 \ud568\uc218)\uc5d0 \ub300\ud558\uc5ec \uc2e4\uc81c \ub370\uc774\ud130\ub97c \uae30\ubc18\uc73c\ub85c \ub2e4\uc74c \ubc88 \uc870\uc0ac\ud560 x \uac12\uc744 \ud655\ub960\uc801\uc73c\ub85c \uacc4\uc0b0\ud558\uc5ec \ucd94\ucc9c\ud574\uc8fc\ub294 \ud568\uc218\uc774\ub2e4.\n- Exploitation : \ud604\uc7ac\uae4c\uc9c0 \uc870\uc0ac\ub41c \uac12\ub4e4\uc758 \uadfc\ubc29\uc73c\ub85c \ub2e4\uc2dc \uc870\uc0ac\ub97c \ud558\ub294 \uac83\uc774\ub2e4. \ucc29\ucde8\ub97c \ub9d0\ud55c\ub2e4.\n- Exploration : \ud604\uc7ac\uae4c\uc9c0 \uc870\uc0ac\ub41c \uac12\ub4e4\uc758 \uadfc\ubc29\uc73c\ub85c \uc870\uc0ac\ub97c \ud558\uc9c0 \uc54a\uace0, \ubd88\ud655\uc2e4\uc131\uc774 \uc81c\uc77c \ub192\uc740 \uad6c\uac04\uc744 \uc870\uc0ac\ud55c\ub2e4. \ud0d0\ud5d8\uc744 \ub9d0\ud55c\ub2e4. "}}