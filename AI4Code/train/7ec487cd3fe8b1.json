{"cell_type":{"c0e60a95":"code","afa63551":"code","0168943e":"code","4214d602":"code","ce62a019":"code","bb1b637a":"code","d7bce348":"code","badc6e36":"code","ec7a2255":"code","7d2e4729":"code","0807ce16":"code","e5485604":"markdown","bc2b4c4a":"markdown","f39806c6":"markdown","87883bfb":"markdown"},"source":{"c0e60a95":"# install youtube-dl\n!pip install youtube-dl","afa63551":"import os\nfrom IPython.display import Audio\nimport librosa\nimport librosa.display\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","0168943e":"# download youtube url using ffmpeg\n# adapted from: https:\/\/github.com\/ytdl-org\/youtube-dl\/issues\/622#issuecomment-162337869\ndef download_from_url_ffmpeg(url, output, starting_sec=\"00:00:25\", end_secs=\"60\"):\n\n  try:\n    os.remove(output)\n  except:\n    pass\n\n  cmd = 'ffmpeg -loglevel warning -ss 0 -i $(youtube-dl -f bestaudio --get-url '+str(url)+') -ss ' + str(starting_sec) + ' -t '+str(60)+' '+str(output) \n  os.system(cmd)\n\n  return os.getcwd()+'\/'+output","4214d602":"url = 'https:\/\/www.youtube.com\/watch?v=mCgBQFhQGf0&t=22s'\ncontent_audio_name = download_from_url_ffmpeg(url, 'shashi1.wav', \"00:00:24\")","ce62a019":"# listening the sample downloaded video\nAudio(content_audio_name)","bb1b637a":"# loading the audio file into np array\nsashi_audio, sashi_sr = librosa.load(content_audio_name)","d7bce348":"# creating mel spectrogram from the audio np array\nspec = librosa.feature.melspectrogram(y=sashi_audio,\n                                        sr=sashi_sr, \n                                            n_fft=2048, \n                                            hop_length=512, \n                                            win_length=None, \n                                            window='hann', \n                                            center=True, \n                                            pad_mode='reflect', \n                                            power=2.0,\n                                     n_mels=128)\nspec.shape","badc6e36":"fig, ax = plt.subplots()\nmax_db = np.max\n# max_db = 80 \n\nS_dB = librosa.power_to_db(spec, ref=max_db)\nimg = librosa.display.specshow(S_dB, x_axis='time',\n                         y_axis='mel', sr=sashi_sr,\n                         fmax=8000, ax=ax)\n\n\nfig.colorbar(img, ax=ax, format='%+2.0f dB')\nax.set(title='Mel-frequency spectrogram')","ec7a2255":"# creating the audio back from the mel-spectrogram\nres = librosa.feature.inverse.mel_to_audio(spec, \n                                           sr=sashi_sr, \n                                           n_fft=2048, \n                                           hop_length=512, \n                                           win_length=None, \n                                           window='hann', \n                                           center=True, \n                                           pad_mode='reflect', \n                                           power=2.0, \n                                           n_iter=32)\nres","7d2e4729":"import soundfile as sf\nsf.write(\"test1.wav\", res, sashi_sr)","0807ce16":"Audio(\".\/test1.wav\")","e5485604":"# Download and install dependencies","bc2b4c4a":"# This step is crucial to create AUDIOs\n**Because it is not documented anywhere, at least I did not find a solution yet.\nBelow is a code, how to generate audio file from mel-spectrogram.**","f39806c6":"# Downloading youtube videos as WAV file\n* Youtube URL\n* Starting point\n* Length of Audio","87883bfb":"# AUDIO -> MEL-SPECTROGRAM -> AUDIO\n\n**Please read before moving forward.**\n\nThis Notebook explores an example of downloading an audio file from YOUTUBE, converting it to MEL-SPECTROGRAM and then converting it back to AUDIO file\nBelow are the steps to generate new synthetic music\/audio\n* Read an audio file as a np array\n* Convert the audio to image (mel-spectrogram)\n* Run style tansfer algorithm on your input audio to produce new image\n* Use new generated image to create new audio (reverse mel-spectrogram)"}}