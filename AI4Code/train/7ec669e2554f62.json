{"cell_type":{"2ef05341":"code","1f76fd20":"code","4557d257":"code","622917d0":"code","a08c3c30":"code","b9744f86":"code","c35adc16":"code","b7ca50f1":"code","b4b688f5":"code","edf5cdd9":"code","917c1223":"code","17278d59":"code","a2bfac46":"code","1bcbbc1f":"code","4bbc108a":"code","d987eda7":"code","a8244477":"code","84163789":"code","c1955ea0":"code","c20b9108":"code","fd8c9fa2":"code","49aca690":"code","45046b4a":"code","cf638789":"code","0bcdfebc":"code","564bca5e":"code","5fe05ae6":"code","ff121ea3":"code","51900cfc":"code","67e587e2":"code","e7a88f69":"code","2c6d195b":"code","94f57795":"markdown","8efb86af":"markdown","6ab7860a":"markdown","8ddd128f":"markdown","35792e0a":"markdown","c6c98349":"markdown","8b5e7eaa":"markdown","fee8fdb4":"markdown","272e2bbb":"markdown","ad701905":"markdown","4981c2c0":"markdown","6676c285":"markdown","4566a6d6":"markdown","dabc602c":"markdown","be495e22":"markdown","070d4a4a":"markdown","2f789581":"markdown","4d0517f3":"markdown","5352dd31":"markdown"},"source":{"2ef05341":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1f76fd20":"#step 0\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RepeatedKFold\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.pylab as plb\n\n#Step0.1\nacesso_um = \"\/kaggle\/input\/titanic\/train.csv\"\nacesso_dois = \"\/kaggle\/input\/titanic\/test.csv\"\ntrain = pd.read_csv(acesso_um, sep= \",\", encoding=\"UTF-8\")\ntest = pd.read_csv(acesso_dois, sep= \",\", encoding=\"UTF-8\")\n","4557d257":"#Step0.1\ntrain.head(10)","622917d0":"#Step0.1\ntest.head(10)\n","a08c3c30":"#step1\ntrain.corr()","b9744f86":"#step1.1 (1)\n# we used isnull() to find null values and sum() to sum them\ntrain.Sex.isnull().sum()\n","c35adc16":"#step1.1 (2)\n# this is an errorbar grafic and here we can see the data standard deviation or the error length\nsns.barplot(x=\"Sex\",y=\"Survived\", data= train)\nplt.show();\n","b7ca50f1":"#step1.1 (3)\nplb.hist(train.Sex);\n","b4b688f5":"#step1.2 (1)\ntrain.Age.isnull().sum()\n","edf5cdd9":"#step1.2 (2)\n# create another variable into train and test dataset named \"NewOrderAge\" with the role to make the analisis easier\n\ndef catage(vage):\n\tif ((vage >= 0) and (vage <= 6)):\n\t\treturn \"Baby\"\n\telif ((vage > 6) and (vage <= 13)):\n\t\t\treturn \"Child\"\n\telif ((vage > 13) and (vage <= 19)):\n\t\treturn \"Teen\"\n\telif ((vage > 19) and (vage <= 61)):\n\t\treturn \"Adult\"\n\telif vage > 61:\n\t\treturn \"Older\"\n\telse:\n\t\treturn \"NV\"\n#step1.2.1 (2)\n\ntrain[\"NewOrderAge\"] = train[\"Age\"].map(catage)\ntest[\"NewOrderAge\"] = test[\"Age\"]. map(catage)\n","917c1223":"#step1.2.2 (2)\n#just to verify if it's work's\ntrain.head()\n","17278d59":"#step1.2.3 (2)\n#just to verify if it's work's\ntest.head()\n","a2bfac46":"#step1.2 (3)\nsns.barplot(x=\"NewOrderAge\",y=\"Survived\", data= train)\nplt.show();\n","1bcbbc1f":"#step1.2 (4)\nplb.hist(train.NewOrderAge);\n","4bbc108a":"#step1.3 (1)\n#\ntrain[\"Name_Contem_Miss\"] = train[\"Name\"].str.contains(\"Miss\").astype(int)\ntrain[\"Name_Contem_Mrs\"] = train[\"Name\"].str.contains(\"Mrs\").astype(int)\ntrain[\"Name_Contem_Master\"] = train[\"Name\"].str.contains(\"Master\").astype(int)\ntrain[\"Name_Contem_Col\"] = train[\"Name\"].str.contains(\"Col\").astype(int)\ntrain[\"Name_Contem_Mr\"] = train[\"Name\"].str.contains(\"Mr\").astype(int)\n\ntest[\"Name_Contem_Miss\"] = test[\"Name\"].str.contains(\"Miss\").astype(int)\ntest[\"Name_Contem_Mrs\"] = test[\"Name\"].str.contains(\"Mrs\").astype(int)\ntest[\"Name_Contem_Master\"] = test[\"Name\"].str.contains(\"Master\").astype(int)\ntest[\"Name_Contem_Col\"] = test[\"Name\"].str.contains(\"Col\").astype(int)\ntest[\"Name_Contem_Mr\"] = test[\"Name\"].str.contains(\"Mr\").astype(int)\n","d987eda7":"#step1.3 (2)\n#just verify\n\ntrain.head()\n","a8244477":"#step1.3 (2)\n#just verify\n\ntest.head()","84163789":"#step1.4 (1)\ntrain.Pclass.isnull().sum()","c1955ea0":"#step1.4 (2)\nsns.barplot(x=\"Pclass\",y=\"Survived\", data= train)\nplt.show();","c20b9108":"#step1.4 (3)\nplb.hist(train.Pclass);\n","fd8c9fa2":"plb.hist(train.Fare)\n","49aca690":"sns.barplot(x=\"Pclass\",y=\"Embarked\", data= train)\nplt.show();\n","45046b4a":"#step1.4 (1)\ndef Embarque_S(sl):\n    if sl == \"S\":\n        return 1\n    else:\n        return 0\n    \ndef Embarque_C(cl):\n    if cl == \"C\":\n        return 1\n    else:\n        return 0\n\ntrain[\"Embarked_S\"] = train[\"Embarked\"].map(Embarque_S)\ntrain[\"Embarked_C\"] = train[\"Embarked\"].map(Embarque_C)\n\ntest[\"Embarked_S\"] = test[\"Embarked\"].map(Embarque_S)\ntest[\"Embarked_C\"] = test[\"Embarked\"].map(Embarque_C)\n","cf638789":"#step1.4 (2)\ntrain.head()","0bcdfebc":"#step1.4 (2)\ntest.head()","564bca5e":"#Step2::: Prepare the data\n\ndef fsexqual(squal):\n    if squal == \"female\":\n        return 8\n    else:\n        return 2\n\ndef fembarkedqual(embqual):\n    if embqual == \"C\":\n        return 3\n    elif embqual == \"Q\":\n        return 2\n    else:\n        return 1\n    \ndef fpclass(vpclass):\n    if vpclass == 1:\n        return 3\n    elif vpclass == 2:\n        return 2\n    else:\n        return 1\n\ndef fagequal(fagq):\n\tif fagq == \"Baby\":\n\t\treturn 8\n\telif fagq == \"Teen\":\n\t\treturn 5\n\telif fagq == \"Adult\":\n\t\treturn 4\n\telif fagq == \"Child\":\n\t\treturn 6\n\telif fagq == \"NV\":\n\t\treturn 4\n\telse:\n\t\treturn 4\n\n\nmodelo = LogisticRegression(random_state=0)  \n\nvariaveis = [\"SexQual\", \"Age\", \"Pclass\", \"Fare\", \"Embarked_S\",\n             \"Embarked_C\", \"Name_Contem_Miss\", \"Name_Contem_Mrs\",\n             \"Name_Contem_Master\", \"Name_Contem_Col\", \"Name_Contem_Mr\",\n             \"PclassQually\", \"EmbarkedQuall\", \"AgeQuall\"]\n\ntrain[\"SexQual\"] = train[\"Sex\"].map(fsexqual)\ntrain[\"PclassQually\"] = train[\"Pclass\"].map(fpclass)\ntrain[\"EmbarkedQuall\"] = train[\"Embarked\"].map(fembarkedqual)\ntrain[\"AgeQuall\"] = train[\"NewOrderAge\"].map(fagequal)\n\ntest[\"SexQual\"] = test[\"Sex\"].map(fsexqual)\ntest[\"PclassQually\"] = test[\"Pclass\"].map(fpclass)\ntest[\"EmbarkedQuall\"] = test[\"Embarked\"].map(fembarkedqual)\ntest[\"AgeQuall\"] = test[\"NewOrderAge\"].map(fagequal)\n\nx = train[variaveis].fillna(-1)\ny = train[\"Survived\"]\nmodelo.fit(x,y)\n\nx_prev = test[variaveis]\nx_prev = x_prev.fillna(-1)\np = modelo.predict(test[variaveis].fillna(-1))","5fe05ae6":"#step2.1\n#verify our dataset\nx.head()\n","ff121ea3":"#step3 training data\nnp.random.seed(0)\nx_treino, x_valid, y_treino, y_valid = train_test_split(x, y, test_size = 0.5)\nmodelo.fit(x_treino, y_treino)\nq = modelo.predict(x_valid)\n\nAcuracia = np.mean(y_valid == q)\n\n#step3 Valid\nvalues = []\nkf = RepeatedKFold(n_splits=2, n_repeats=40, random_state=10)\nfor linhas_treino, linhas_valid in kf.split(x):\n    print(\"Treino:\", linhas_treino.shape[0])\n    print(\"Valid:\", linhas_valid.shape[0])\n    x_treino, x_valid = x.iloc[linhas_treino], x.iloc[linhas_valid]\n    y_treino, y_valid = y.iloc[linhas_treino], y.iloc[linhas_valid]\n    modelo = LogisticRegression(random_state=0)\n    modelo.fit(x_treino, y_treino)\n    s = modelo.predict(x_valid)\n    acc = np.mean(y_valid == s)\n    values.append(acc)\n        \nmedia_r = np.mean(values)\n\nmodelo = LogisticRegression(random_state=0)\nmodelo.fit(x,y)\nr = modelo.predict(test[variaveis].fillna(-1))","51900cfc":"print(\"Media dos Valores: \", media_r)\nprint()\nprint(\"Acc: \", Acuracia)\nprint()","67e587e2":"plb.hist(values);\n","e7a88f69":"#step Final: create a .csv File and submit to kaggle\nsub = pd.Series(r, index=test[\"PassengerId\"], name=\"Survived\")\n#sub.to_csv(\"SubNtebookOne.csv\", header=True)\n","2c6d195b":"sub.head(20)\n","94f57795":"When a data analyst looks at a data table, he probably sees entities and attributes, maybe a manager sees opportunities and threats but a programmer in general sees objects and variables. For each row an object and for each column a variable. It is precisely at this step that the programmer's eye begins to separate the variable whose response we are looking for and to select the most relevant variables for obtaining that response.","8efb86af":"So far we have only considered passengers' assignments such as age, name, social class and sex, but once these actors boarded the ship a ticket had to be purchased. If there is a ticket purchase, there is also a shopping cost that varies according to the type of services and comfort purchased for the trip, which makes it relevant to take a look at the \"Fare\" variable. In the same way it occurs with the categorical variable \"Embarked\" since the tickets signal the gate for each type of social class shipped. There are three types of embark gates: gate S, gate C and gate Q. Let's take a closer look at this. ","6ab7860a":"Now we have:\n* Numerical {PassengerID, Survived, Pclass, Age, SibSp, Fare}\n* Categorical {Name, Sex, Ticket, Cabin, Embarked} \nSeparated the variables, it's time to find our objective variable that will be assigned to y in our mathematical model and the candidates to predictors that will be assigned to x.\n\nAt first we will have something like that:\ny= \"Survived\"\nx= \"PassengerID, Pclass, Age, SibSp, Fare,Name, Sex, Ticket, Cabin, Embarked\"\n\nIn a simple analisis \"PassengerId\" is out, so now x= \"Pclass, Age, SibSp, Fare,Name, Sex, Ticket, Cabin, Embarked\".\nNow let's take a better look one by one of that candidates. let's started with Pclass.\nPclass: this variable represents the three differents social class kind. Think about it! We have three different social class kind on aboard: (1)- First Class, (2)- Second Class, (3)- Third Class composed by three different people kind, Wealthy people, Rich people and Poor people, here called passengers and passangers have a sex, an age and a name. Considered the gender submission file who imput the value(1) to female passangers and (0) to male passangers getting a 76.555 score value we could say \"Sex\" is our first elected variable and gender submission file is our baseline submission.  \n\"Sex\" is a categoric variable so we have to change then to a numeric type variable and for this we have to more closely take a look.\n\nstep 1.1:\n1. Verify if we have null values for this variable;\n2. Verify how many people survived for each sex;\n3. Verify how much people exists for each sex;\n","8ddd128f":"Hello everyone! Before we start, I want to thank Alexis Cook and Raenish David for their publications on this platform, without which I would not have achieved the understanding necessary to improve my results.","35792e0a":"Let's create a list named variavel to put our elected variables:\n\nvariaveis = [\"SexQual\", \"Age\", \"Pclass\", \"Fare\", \"Embarked_S\",\n       \"Embarked_C\", \"Name_Contem_Miss\", \"Name_Contem_Mrs\",\n       \"Name_Contem_Master\", \"Name_Contem_Col\", \"Name_Contem_Mr\",\n       \"PclassQually\", \"EmbarkedQuall\", \"AgeQuall\"]\nIf you observ with attention our list you'll see what beyond \"Embarked_S\" and \"Embarked_C\" there are a newest variable called \"EmbarkedQuall\". This variable has a function to fix any error lenght in weights of \"Pclass\" assigned.\n\n* step 2 -> prepare the data \n             \n","c6c98349":"# **My First Titanic NoteBook**","8b5e7eaa":"Step 1: separate the numeric variables from the categorical variables.\n\n* For this step, the .corr () function will be used. This function is usually used to find the correlation between the columns in the dataframe using the method 'Pearson'. But we will use it at first to find the numeric variables of our data set","fee8fdb4":"following the same principle that says that only people can survive and having the understanding that people belong to a type of social class, have a gender, have an age and have a name let's take a closer look at the \"Age\" variable. Step 1.2:\n1. Verify if we have null values for this variable;\n2. Created a collumn in train dataset named NewOrderAge;\n3. Verify how many people survived for each NewOrderAge;\n4. Verify how much people exists for each NewOrderAge;","272e2bbb":"Now that we have seen the \"Sex\" and \"Age\" variables, let's take a closer look at the \"Name\" variable of our passenger object. In all kinda social class everyone has a name it's seems obviously but thats not the point, the point is in this case the name reveal beyond the titles an another class of people on aboard: the crew. Let's consider miss, mrs and mr the most common names titles and then we'll have found the intersection between our social classes. On the Titanic, the other titles on board in a certain way are: miss, mrs and mr too, the exception here goes to Master and Col that in this case are part of the crew. After separating the most relevant titles it's time to work them: Step 1.3\n","ad701905":"It's time to construct a way to training the datas and help us to see if our model is useful or not. For that we gonna work to the Repeated K Fold and train_test_split, for treining data and verify accuracy, both of SKLearning.\n* Step 3 Traning and validate data","4981c2c0":"Therefore, our first request returns 0 for null values. The second request shows that the first class is 70% more likely to survive against 50% of the second class and 30% of the third class. in this way, we will take a different approach to the allocation of weights. Consider that 70% of the first class survived the accident and 30% died while only 30% of the third class survived the accident and 70% died, from then on we will start to consider that the first class has three times more chances of survival than the other classes whereas second class passengers were twice more likely to survive than third class passengers. Remaining for the  third class a single chance of survival. Now we can assign to the \"Pclass\" variable three differents weights for each social class kind: if value == \"1\" then weight = 3(or ~= 75% of(3+1)), if value == \"2\" then weight = 2(or 50% of(2+2)), if value == \"3\" then weight = 1. \n\n* in python:\ndef fpclass(vpclass):\n    if vpclass == 1:\n        return 3\n    elif vpclass == 2:\n        return 2\n    else:\n        return 1\n","6676c285":"Let's take a look in ours elected variables until now x={Sex, Age, Name, Pclass} before analisis we had two categorical variables (Sex, Name) and two numerical variable (Age, Pclass), after that we have only one sort of variable or nine newest numerical variables (SexQual, Age, Pclass, Name_Contem_Miss, Name_Contem_Mrs, Name_Contem_Master, Name_Contem_Col, Name_Contem_Mr, AgeQuall). Well, next step: \"Pclass\" analisis.\n\n* Step 1.4:\n\n1. Verify if we have null values for this variable;\n2. Verify how many people survived for each Social class;\n3. Verify how much people on aboard for each Social class;","4566a6d6":"Score on Kaggle(Titanic Competition): 0.79425\nThanks for all who was spend your time reading this notebook, i really hope with this being helpful.\nBest regards,\nAntonio Jorge Marques Pereira Marcher\n","dabc602c":"Well, our first request returns 0 for null values; the second request show us, considered the standart deviation, 80% women survived and 20% men survived; the third just confirm the second. In another words in Titanic females have 80% more chances to survived against 20% those males. Now we can assigned to a variable \"Sex\" two differents weights for each value: if value == \"female\" then weight = 8 and if value == \"male\" then weight = 2. In python it's seems like this:","be495e22":"Look the graph Pclass x Embarked and you'll see that  passengers from first and second class basicly embarked on gates \"S\" and \"C\", so in that first moment we'll don't consider the gate \"Q\" in our study becouse third class embarked there and practically all those passengers dies. I Know it's seems a litle bit stranger but once time our goal is to predict who is gonna survivals this begin to make more sense.\n* step 1.4:\n\n1. create two columns for each S and C embarked  assigning to them a integer value\n2. verify if it works","070d4a4a":"1. create a collumn wich most relevant name titles from name collumn then imput for each them a integer value\n2. verify if it works","2f789581":"def fsexqual(squal):\n    if squal == \"female\":\n        return 8\n    else:\n        return 2","4d0517f3":"* Step 0:\nimport the libraries responsible for the study, statistical analysis of the data and predictive model to be used.\n* Step 0.1:\nload study data and verify that it was loaded successfully.","5352dd31":"Our first request returns 177 null values.\nOur second request creates a new column in a training and test data set called \"NewOrderAge\", in addition to transforming all existing null values into a book value.\nOur third request shows us, considering the standard deviation, 80% babies, 60% children, 50% adolescents, 40% adults, 39% NV (undeclared values) and 44% elderly people survived. The Fourth only confirms this. Thus, babies are 80% more likely to survive than other ages on board. Now we can assign to the \"NewOrderAge\" variable six different weights for each value: if value == \"Baby\" then weight = 8, value == \"Teen\" then weight = 5, value == \"Adult\" then weight = 4, value == \"Child\" then weight = 6, value == \"NV\" then weight = 4, value == \"Older\" then weight = 4 (NV and older values \u200b\u200bwere rounded using the rule that lowers values \u200b\u200bbelow 5 and increases those of higher value). Here is the code:\ndef fagequal(fagq):\n\tif fagq == \"Baby\":\n\t\treturn 8\n\telif fagq == \"Teen\":\n\t\treturn 5\n\telif fagq == \"Adult\":\n\t\treturn 4\n\telif fagq == \"Child\":\n\t\treturn 6\n\telif fagq == \"NV\":\n\t\treturn 4\n\telse:\n\t\treturn 4\n"}}