{"cell_type":{"8a51c2f3":"code","331c37ef":"code","6d7e61df":"code","b30beb50":"code","9f689011":"code","8943aa92":"code","c690e112":"code","facc5dbc":"code","04d17094":"code","e18748f2":"code","e08a74cd":"code","f47b422c":"code","6a2dc53a":"code","fdd4f3c5":"code","f8c66558":"code","91ca52cf":"markdown","072994a4":"markdown","31a66689":"markdown","1e4a20c5":"markdown","08ecfcdb":"markdown","ac0d0c70":"markdown","c407d620":"markdown","87622cee":"markdown","bff98612":"markdown","3f337f46":"markdown","09ccda3a":"markdown","689a1d41":"markdown","8ac9d9eb":"markdown"},"source":{"8a51c2f3":"# Code you have previously used to load data\nimport pandas as pd\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\n\n\n# Path of the file to read\niowa_file_path = '..\/input\/home-data-for-ml-course\/train.csv'\n\nhome_data = pd.read_csv(iowa_file_path)\n# Create target object and call it y\ny = home_data.SalePrice\n# Create X\nfeatures = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\nX = home_data[features]\n\n# Split into validation and training data\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)\n\n# Specify Model\niowa_model = DecisionTreeRegressor(max_depth=3, random_state=1) \n# Fit Model\niowa_model.fit(train_X, train_y)\n\n# Make validation predictions and calculate mean absolute error\nval_predictions = iowa_model.predict(val_X)\nval_mae = mean_absolute_error(val_predictions, val_y)\nprint(\"Validation MAE: {:,.0f}\".format(val_mae))\nprint(\"Tree Model Depth: {}\".format(iowa_model.get_depth()))\n\n# Set up code checking\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.machine_learning.ex5 import *\nprint(\"\\nSetup complete\")","331c37ef":"iowa_model.get_depth()","6d7e61df":"from sklearn import tree\n\ntext_representation = tree.export_text(iowa_model)\n\n#The text representation of this tree is pretty long so let's just show a few nodes instead\nprint(text_representation[:5000])","b30beb50":"from matplotlib import pyplot as plt\n\n#This will take a couple of minutes and use all your CPU\nfig = plt.figure(figsize=(25,20))\n_ = tree.plot_tree(iowa_model, feature_names=features, filled=True)","9f689011":"#Very important step and package used in Step 4\n!pip install graphviz --upgrade","8943aa92":"import graphviz\nprint(graphviz.__version__)\n\n#Scroll up and down, left and right to navigate this good looking tree :) \ngraphviz_tree = tree.export_graphviz(iowa_model, out_file=None, \n                                feature_names=features,\n                                filled=True)\ngraphviz.Source(graphviz_tree, format=\"png\") ","c690e112":"!pip install dtreeviz #--use-feature=2020-resolver","facc5dbc":"from dtreeviz.trees import dtreeviz # remember to load the package\n\nviz = dtreeviz(iowa_model, X, y,\n                target_name=\"Price\",\n                feature_names=features)\nviz","04d17094":"def get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\n    model.fit(train_X, train_y)\n    preds_val = model.predict(val_X)\n    mae = mean_absolute_error(val_y, preds_val)\n    print('max_leaf_nodes: {:>3}, mae:{:<10}'.format(max_leaf_nodes, mae) )\n    return(mae)","e18748f2":"candidate_max_leaf_nodes = [5, 25, 50, 100, 250, 500]\n# Write loop to find the ideal tree size from candidate_max_leaf_nodes\nmae_max_leaf_nodes = [get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y) for max_leaf_nodes in candidate_max_leaf_nodes]\n\n# Store the best value of max_leaf_nodes (it will be either 5, 25, 50, 100, 250 or 500)\nbest_tree_size = candidate_max_leaf_nodes[mae_max_leaf_nodes.index(min(mae_max_leaf_nodes))]\n\n# Check your answer\nstep_1.check()","e08a74cd":"# The lines below will show you a hint or the solution.\n# step_1.hint() \n# step_1.solution()","f47b422c":"plt.figure(figsize=(12,7))\n#plt.style.available[:5]\nplt.style.use('fivethirtyeight')\nplt.xlabel('Tree Depth')\nplt.ylabel('MAE')\n#plt.ylim([0, max(mae_max_leaf_nodes)])\nplt.plot(candidate_max_leaf_nodes, mae_max_leaf_nodes);\nplt.annotate(\"Min MAE:{:,.0f}, depth:{}\".format(min(mae_max_leaf_nodes), best_tree_size), (best_tree_size, min(mae_max_leaf_nodes)+1000))\nplt.show()","6a2dc53a":"# Split into validation and training data\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)\n\n# Specify Model\niowa_model = DecisionTreeRegressor(random_state=1)\n# Fit Model\niowa_model.fit(train_X, train_y)\n\n# Make validation predictions and calculate mean absolute error\nval_predictions = iowa_model.predict(val_X)\nval_mae = mean_absolute_error(val_predictions, val_y)\nprint(\"Validation MAE: {:,.0f}\".format(val_mae))","fdd4f3c5":"# Fill in argument to make optimal size and uncomment\nfinal_model = DecisionTreeRegressor(max_leaf_nodes=best_tree_size, random_state=1)\n\n# fit the final model and uncomment the next two lines\nfinal_model.fit(X, y)\n\n# Check your answer\nstep_2.check()","f8c66558":"#step_2.hint()\n#step_2.solution()","91ca52cf":"# Visualize a Decision Tree in 4 Ways with Scikit-Learn and Python by Piotr P\u0142o\u0144ski\n# https:\/\/mljar.com\/blog\/visualize-decision-tree\/","072994a4":"# 4\/4 Plot Decision Tree with dtreeviz Package\n# Allow internet connection on Kaggle before installing external libraries\n# See github issue I opened at: https:\/\/github.com\/parrt\/dtreeviz\/issues\/108\n# Solution: !pip install graphviz --upgrade before import graphviz","31a66689":"## Recap\nYou've built your first model, and now it's time to optimize the size of the tree to make better predictions. Run this cell to set up your coding environment where the previous step left off.","1e4a20c5":"You've tuned this model and improved your results. But we are still using Decision Tree models, which are not very sophisticated by modern machine learning standards. In the next step you will learn to use Random Forests to improve your models even more.\n\n# Keep Going\n\nYou are ready for **[Random Forests](https:\/\/www.kaggle.com\/dansbecker\/random-forests).**\n","08ecfcdb":"# 2\/4 Plot Tree with plot_tree","ac0d0c70":"# Plot MAE for different models","c407d620":"**This notebook is an exercise in the [Introduction to Machine Learning](https:\/\/www.kaggle.com\/learn\/intro-to-machine-learning) course.  You can reference the tutorial at [this link](https:\/\/www.kaggle.com\/dansbecker\/underfitting-and-overfitting).**\n\n---\n","87622cee":"## Step 2: Fit Model Using All Data\nYou know the best tree size. If you were going to deploy this model in practice, you would make it even more accurate by using all of the data and keeping that tree size.  That is, you don't need to hold out the validation data now that you've made all your modeling decisions.","bff98612":"# 3\/4 Visualize Decision Tree with graphviz","3f337f46":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161285) to chat with other Learners.*","09ccda3a":"# Exercises\nYou could write the function `get_mae` yourself. For now, we'll supply it. This is the same function you read about in the previous lesson. Just run the cell below.","689a1d41":"## Step 1: Compare Different Tree Sizes\nWrite a loop that tries the following values for *max_leaf_nodes* from a set of possible values.\n\nCall the *get_mae* function on each value of max_leaf_nodes. Store the output in some way that allows you to select the value of `max_leaf_nodes` that gives the most accurate model on your data.","8ac9d9eb":"# 1\/4 Print Text Representation"}}