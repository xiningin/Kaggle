{"cell_type":{"51d747d6":"code","25814586":"code","87872b6e":"code","0285e677":"code","81d62f89":"code","2dd6a3d0":"code","ff16f5ff":"code","401345ac":"code","3c1b67ba":"markdown","0192ed59":"markdown","9b4d4399":"markdown","0509a372":"markdown","16257985":"markdown","27330429":"markdown","d723aa65":"markdown","3f1be8ff":"markdown","1b4b63de":"markdown","383e71f9":"markdown","74fbb82c":"markdown","56046ace":"markdown"},"source":{"51d747d6":"import matplotlib.pyplot as plt\nimport statsmodels.tsa.seasonal as smt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random\nimport datetime as dt\nfrom sklearn import linear_model \nfrom sklearn.metrics import mean_absolute_error\nimport plotly\n\nfrom keras.models import Sequential\nfrom keras.layers import Activation, Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\nimport os\nos.chdir('..\/input\/Data\/Stocks\/')","25814586":"# \u30c7\u30fc\u30bf\u3092\u8aad\u3093\u3067\u307f\u3088\u3046\u3002\n# \u30ab\u30fc\u30cd\u30eb\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001zip\u30d5\u30a1\u30a4\u30eb\u3092\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u3088\u3046\u306b\u79fb\u52d5\u3067\u304d\u307e\u3059\n\n# \u30b5\u30a4\u30ba0\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u53d6\u308d\u3046\u3068\u3059\u308b\u3068\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u305f\u3081\u3001\u305d\u308c\u3089\u3092\u30b9\u30ad\u30c3\u30d7\u3057\u307e\u3059\n# filenames = [x for x in os.listdir() if x.endswith('.txt') and os.path.getsize(x) > 0]\n# filenames = random.sample(filenames,1)\nfilenames = ['prk.us.txt', 'bgr.us.txt', 'jci.us.txt', 'aa.us.txt', 'fr.us.txt', 'star.us.txt', 'sons.us.txt', 'ipl_d.us.txt', 'sna.us.txt', 'utg.us.txt']\nfilenames = [filenames[1]]\nprint(filenames)\n\ndata = []\nfor filename in filenames:\n    df = pd.read_csv(filename, sep=',')\n\n    label, _, _ = filename.split(sep='.')\n    df['Label'] = filename\n    df['Date'] = pd.to_datetime(df['Date'])\n    data.append(df)","87872b6e":"r = lambda: random.randint(0,255)\ntraces = []\n\nfor df in data:\n    clr = str(r()) + str(r()) + str(r())\n#     df = df.sample(n=100, replace=True)\n    df = df.sort_values('Date')\n#     print(df['Label'])\n    label = df['Label'].iloc[0]\n\n    trace = plotly.graph_objs.Scattergl(\n        x=df['Date'],\n        y=df['Close'],\n        mode='line',\n        line=dict(\n            color = clr\n        )\n    )\n    traces.append(trace)\n    \nlayout = plotly.graph_objs.Layout(\n    title='Plot',\n)\nfig = plotly.graph_objs.Figure(data=traces, layout=layout)\n\nplotly.offline.init_notebook_mode(connected=True)\nplotly.offline.iplot(fig, filename='dataplot')","0285e677":"df = data[0]\nwindow_len = 10\n\n#\u30c7\u30fc\u30bf\u30dd\u30a4\u30f3\u30c8\uff08\u65e5\u4ed8\u3068\u304b\uff09\u3092\u4f5c\u308a\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3057\u307e\u3059\u3002\nsplit_date = list(data[0][\"Date\"][-(2*window_len+1):])[0]\n\n#\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3057\u307e\u3059\u3002\ntraining_set, test_set = df[df['Date'] < split_date], df[df['Date'] >= split_date]\ntraining_set = training_set.drop(['Date','Label', 'OpenInt'], 1)\ntest_set = test_set.drop(['Date','Label','OpenInt'], 1)\n\n#\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u308a\u307e\u3059\u3002\nLSTM_training_inputs = []\nfor i in range(len(training_set)-window_len):\n    temp_set = training_set[i:(i+window_len)].copy()\n    \n    for col in list(temp_set):\n        temp_set[col] = temp_set[col]\/temp_set[col].iloc[0] - 1\n    \n    LSTM_training_inputs.append(temp_set)\nLSTM_training_outputs = (training_set['Close'][window_len:].values\/training_set['Close'][:-window_len].values)-1\n\nLSTM_training_inputs = [np.array(LSTM_training_input) for LSTM_training_input in LSTM_training_inputs]\nLSTM_training_inputs = np.array(LSTM_training_inputs)\n\n#\u30c6\u30b9\u30c8\u306e\u305f\u3081\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u308a\u307e\u3059\u3002\nLSTM_test_inputs = []\nfor i in range(len(test_set)-window_len):\n    temp_set = test_set[i:(i+window_len)].copy()\n    \n    for col in list(temp_set):\n        temp_set[col] = temp_set[col]\/temp_set[col].iloc[0] - 1\n    \n    LSTM_test_inputs.append(temp_set)\nLSTM_test_outputs = (test_set['Close'][window_len:].values\/test_set['Close'][:-window_len].values)-1\n\nLSTM_test_inputs = [np.array(LSTM_test_inputs) for LSTM_test_inputs in LSTM_test_inputs]\nLSTM_test_inputs = np.array(LSTM_test_inputs)","81d62f89":"def build_model(inputs, output_size, neurons, activ_func=\"linear\",\n                dropout=0.10, loss=\"mae\", optimizer=\"adam\"):\n    \n    model = Sequential()\n\n    model.add(LSTM(neurons, input_shape=(inputs.shape[1], inputs.shape[2])))\n    model.add(Dropout(dropout))\n    model.add(Dense(units=output_size))\n    model.add(Activation(activ_func))\n\n    model.compile(loss=loss, optimizer=optimizer)\n    return model","2dd6a3d0":"# \u30e2\u30c7\u30eb\u69cb\u9020\u306e\u521d\u671f\u5316\nnn_model = build_model(LSTM_training_inputs, output_size=1, neurons = 32)\n# \u30e2\u30c7\u30eb\u51fa\u529b\u306f\u300110\u756a\u524d\u306e\u7d42\u5024\u306b\u6b63\u898f\u5316\u3055\u308c\u305f\u6b21\u306e\u4fa1\u683c\u3067\u3059\n# \u30c7\u30fc\u30bf\u306e\u4e2d\u306e\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3059\u308b\n# \u30ce\u30fc\u30c8\uff1aeth_history\u306f\u5404\u30a8\u30dd\u30c3\u30af\u306e\u8a13\u7df4\u30a8\u30e9\u30fc\u306e\u60c5\u5831\u3092\u542b\u3080\nnn_history = nn_model.fit(LSTM_training_inputs, LSTM_training_outputs, \n                            epochs=5, batch_size=1, verbose=2, shuffle=True)","ff16f5ff":"plt.plot(LSTM_test_outputs, label = \"actual\")\nplt.plot(nn_model.predict(LSTM_test_inputs), label = \"predicted\")\nplt.legend()\nplt.show()\nMAE = mean_absolute_error(LSTM_test_outputs, nn_model.predict(LSTM_test_inputs))\nprint('The Mean Absolute Error is: {}'.format(MAE))","401345ac":"#https:\/\/github.com\/llSourcell\/How-to-Predict-Stock-Prices-Easily-Demo\/blob\/master\/lstm.py\ndef predict_sequence_full(model, data, window_size):\n    #\u30a6\u30a3\u30f3\u30c9\u30a6\u30921\u500b\u306e\u65b0\u3057\u3044\u4e88\u6e2c\u304c\u51fa\u308b\u305f\u3073\u306b\u79fb\u52d5\u3055\u305b\u3001\u518d\u5ea6\u4e88\u6e2c\u3092\u8d70\u3089\u305b\u307e\u3059\n    curr_frame = data[0]\n    predicted = []\n    for i in range(len(data)):\n        predicted.append(model.predict(curr_frame[np.newaxis,:,:])[0,0])\n        curr_frame = curr_frame[1:]\n        curr_frame = np.insert(curr_frame, [window_size-1], predicted[-1], axis=0)\n    return predicted\n\npredictions = predict_sequence_full(nn_model, LSTM_test_inputs, 10)\n\nplt.plot(LSTM_test_outputs, label=\"actual\")\nplt.plot(predictions, label=\"predicted\")\nplt.legend()\nplt.show()\nMAE = mean_absolute_error(LSTM_test_outputs, predictions)\nprint('The Mean Absolute Error is: {}'.format(MAE))","3c1b67ba":"## LSTM\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9","0192ed59":"### \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","9b4d4399":"### \u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","0509a372":"### \u30c7\u30fc\u30bf\u306e\u30d7\u30ed\u30c3\u30c8","16257985":"### \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u4f5c\u6210\u3068\u30c7\u30fc\u30bf\u306e\u6b63\u898f\u5316","27330429":"\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306f\u3001\u4ee5\u4e0b\u306e\u300cLSTM model of StockData\u300d\u3092\u65e5\u672c\u8a9e\u7ffb\u8a33\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u4f5c\u8005\u306e\u300cJohanvandenHeuvel\u300d\u3055\u3093\u306b\u306f\u5fc3\u304b\u3089\u306e\u656c\u610f\u3068\u611f\u8b1d\u3092\u3057\u307e\u3059\u3002\nhttps:\/\/www.kaggle.com\/johanvandenheuvel\/lstm-model-of-stockdata\n","d723aa65":"### 1\u30c7\u30fc\u30bf\u30dd\u30a4\u30f3\u30c8\u5148\u306e\u4e88\u6e2c\u306e\u30d7\u30ed\u30c3\u30c8\n\u30d7\u30ed\u30c3\u30c8\u304b\u3089\u308f\u304b\u308b\u3088\u3046\u306b\u30011\u30b9\u30c6\u30c3\u30d7\u306e\u4e88\u6e2c\u306f\u60aa\u304f\u3042\u308a\u307e\u305b\u3093\u3002\u30c7\u30fc\u30bf\u304c\u6b63\u898f\u5316\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u30b9\u30b1\u30fc\u30eb\u306f\u5c11\u3057\u3067\u3059\u3002","3f1be8ff":"# \u682a\u5f0f\u5e02\u5834\u30c7\u30fc\u30bf\u306b\u304a\u3051\u308bLSTM model\n\n\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u306f\u3001LSTM\u306b\u3064\u3044\u3066\u8abf\u67fb\u3057\u3066\u3044\u3053\u3046\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3053\u3068\u3092\u3084\u3063\u3066\u3044\u304d\u307e\u3059:\n* \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u306b\u3064\u3044\u3066\u3002\u524d\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u6b63\u898f\u5316\u3068\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u4f5c\u6210\u306e\u307f\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002\n* LSTM\u30e2\u30c7\u30eb\u306e\u4f5c\u308a\u65b9\u3002\n* LSTM\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u3002\n* 1\u3064\u306e\u30b9\u30c6\u30c3\u30d7\u30681\u3064\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u3088\u308bLSTM\u30e2\u30c7\u30eb\u306e\u30c6\u30b9\u30c8","1b4b63de":"## LSTM model\u306e\u8a13\u7df4","383e71f9":"## \u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u3001\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","74fbb82c":"## \u7d50\u8ad6\nLSTM\u306f\u6642\u7cfb\u5217\u4e88\u6e2c\u3092\u89e3\u6c7a\u3057\u307e\u305b\u3093\u3002 1\u3064\u306e\u30bf\u30a4\u30e0\u30b9\u30c6\u30c3\u30d7\u3067\u306e\u4e88\u6e2c\u306f\u3001\u30e9\u30b0\u30e2\u30c7\u30eb\u3088\u308a\u3082\u306f\u308b\u304b\u306b\u512a\u308c\u305f\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u4e88\u6e2c\u3055\u308c\u308b\u30bf\u30a4\u30e0\u30b9\u30c6\u30c3\u30d7\u306e\u6570\u3092\u5897\u3084\u3059\u3068\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306f\u4ed6\u306e\u5f93\u6765\u306e\u65b9\u6cd5\u307b\u3069\u901f\u304f\u4f4e\u4e0b\u3057\u307e\u305b\u3093\u3002\u305f\u3060\u3057\u3001\u3053\u306e\u5834\u5408\u3001\u8aa4\u5dee\u304c\u7d044.5\u500d\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u4e88\u6e2c\u3057\u3088\u3046\u3068\u3059\u308b\u30bf\u30a4\u30e0\u30b9\u30c6\u30c3\u30d7\u306e\u6570\u3068\u3068\u3082\u306b\u8d85\u7dda\u5f62\u306b\u306a\u308a\u307e\u3059\u3002","56046ace":"### 1\u30a6\u30a3\u30f3\u30c9\u30a6\uff0810\u30bf\u30a4\u30e0\u30b9\u30c6\u30c3\u30d7\uff09\u5148\u306e\u4e88\u6e2c\n\u4ee5\u4e0b\u306e\u30d7\u30ed\u30c3\u30c8\u306b\u898b\u3089\u308c\u308b\u3088\u3046\u306b\u3001\u5148\u306e\u8907\u6570\u306e\u6642\u70b9\u3092\u4e88\u6e2c\u3059\u308b\u3068\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u6025\u901f\u306b\u4f4e\u4e0b\u3057\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u7dda\u5f62\u56de\u5e30\u306e\u3088\u3046\u306a\u3082\u306e\u306b\u5c48\u3057\u305f\u5834\u5408\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306f\u5411\u4e0a\u3057\u307e\u3059\u3002"}}