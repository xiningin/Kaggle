{"cell_type":{"9688258b":"code","79402966":"code","ecfb7bbf":"code","7d85c71e":"code","f9c40f42":"code","2f3b2141":"code","fa7803d6":"code","2f057d65":"code","43c768cc":"code","d680477f":"code","d00af88b":"code","68010940":"code","ff9e4770":"code","dcbcd172":"code","dddfbdfc":"code","f174df3d":"code","7ba3e319":"code","f64e102e":"code","77a8de3c":"code","eb64a23d":"code","71898f10":"code","1ffdf43c":"code","42ad89e0":"code","c242edd3":"code","cad68ff0":"code","3b054389":"code","bb49ec95":"code","d60ba0c0":"code","3af85537":"markdown"},"source":{"9688258b":"import pandas as pd\nimport numpy as np\nimport matplotlib as plt\n%matplotlib inline\nimport seaborn as sns","79402966":"#Fetch the csv file\ndf = pd.read_csv(\"..\/input\/google-analytics\/Google Analytics.csv\")","ecfb7bbf":"#To Display the rows and columns\npd.set_option('display.max_rows',5000, 'display.max_columns',100)","7d85c71e":"df.head()","f9c40f42":"#Check the size of the dataframe\ndf.shape","2f3b2141":"#To Check the Null Values\ndf.isnull().sum()","fa7803d6":"#Removing the Null Column with maximum Nan Values \ndf.drop(['sessionQualityDim','referralPath'],axis=1,inplace=True)","2f057d65":"#Checking the dataframe\ndf.head()","43c768cc":"#Droping single Nan value in page view column\ndf = df.dropna(how='any',axis=0)","d680477f":"df.shape","d00af88b":"#checking the percentage of Nan values\n(df.isnull().sum() * 100\/ len(df))","68010940":"#Information about the columns\ndf.info()","ff9e4770":"#Checking Unique value in column with their count.\nprint(df['medium'].nunique(),df['medium'].unique())\nprint('=========================================================')\nprint(df['browser'].nunique(),df['browser'].unique())\nprint('=========================================================')\nprint(df['operatingSystem'].nunique(),df['operatingSystem'].unique())\nprint('=========================================================')\nprint(df['isMobile'].nunique(),df['isMobile'].unique())","dcbcd172":"#Repacing '(none)' value of column medium with 'Unknown'\ndf['medium']=df['medium'].replace(to_replace =\"(none)\", \n                 value =\"Unknown\")","dddfbdfc":"#Checking The Numberof Transaction with respect to browser\nsns.countplot(y =\"browser\",data=df,hue=\"NumberOfTransactions\")","f174df3d":"#Checking if the user are using Mobile Browser or not\nsns.countplot(y =\"browser\",data=df,hue=\"isMobile\")","7ba3e319":"#Customer LastvisitedDays from which Medium\nsns.countplot(x =\"LastVisitedDays\",data=df,hue=\"medium\")","f64e102e":"#Continent with highest Number of Transaction \nsns.barplot(x='continent',y='NumberOfTransactions',data=df)","77a8de3c":"df.head()","eb64a23d":"#Creating a new column 'Chances' of customer buying a product or not based on RFMScore\nChances = []\nfor i in df['RFMScore']:\n    if i >= 11 and i<=15:\n        Chances.append('Good Chance')\n    elif i >= 9 and i<11:\n        Chances.append('Possible Chance')\n    else:\n        Chances.append('Impossible Chance')\ndf['Chances'] = Chances","71898f10":"#Checking People with Chances of buying wrt their RFM Score\nsns.barplot(x='Chances',y='RFMScore',data=df)","1ffdf43c":"#Label Encoder for converting values in Numeric Form\nfrom sklearn.preprocessing import LabelEncoder\nlabelEncoder_X = LabelEncoder()\ndf['fullVisitorId'] = labelEncoder_X.fit_transform(df['fullVisitorId'])\ndf['medium'] = labelEncoder_X.fit_transform(df['medium'])\ndf['browser'] = labelEncoder_X.fit_transform(df['browser'])\ndf['operatingSystem'] = labelEncoder_X.fit_transform(df['operatingSystem'])\ndf['isMobile'] = labelEncoder_X.fit_transform(df['isMobile'])\ndf['continent'] = labelEncoder_X.fit_transform(df['continent'])\ndf['Chances'] = labelEncoder_X.fit_transform(df['Chances'])","42ad89e0":"df.head()","c242edd3":"#Preparing for Training and Testing\nX=df.drop('Chances',axis=1)\ny=df['Chances']","cad68ff0":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)","3b054389":"# Standardization of the data\nfrom sklearn.preprocessing import StandardScaler\nScaler_X = StandardScaler()\nX_train = Scaler_X.fit_transform(X_train)\nX_test = Scaler_X.transform(X_test)","bb49ec95":"#Applying Random Forest Algorithm\nfrom sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=200)\nrfc.fit(X_train,y_train)\nrfc__pred = rfc.predict(X_test)","d60ba0c0":"#Checking the correctness of data\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nprint(accuracy_score(y_test,rfc__pred))\nprint(confusion_matrix(y_test,rfc__pred))","3af85537":"__ANALYSIS__"}}