{"cell_type":{"430e40b8":"code","015754a7":"code","2739557d":"code","1d52763a":"code","6212e169":"code","69c49750":"code","15044d16":"code","fad57fc6":"code","a0a195af":"code","010e466a":"code","0755bf15":"code","59fdac8e":"code","184438d9":"code","dd40b295":"code","3f33e2f3":"code","27592a49":"code","a150711f":"code","18db61b1":"code","231390d9":"code","967fccbd":"code","8eac1c07":"code","8c89a634":"markdown","dfd25b11":"markdown"},"source":{"430e40b8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","015754a7":"# Reading files from directory\nimport os\nimport pickle\n \n# Data manipulation & analysis\nimport pandas as pd\npd.set_option('display.max_columns',100)\npd.set_option('display.max_rows', 500)\nimport datetime as dt\n \nimport numpy as np\nimport scipy\n\n# Visualisation\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n \n # \u5b9f\u884c\u306b\u95a2\u4fc2\u306a\u3044\u8b66\u544a\u3092\u7121\u8996\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom tqdm import tqdm\nimport gc\nimport json\nimport math\n\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn.metrics import accuracy_score,roc_auc_score,log_loss\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error\n\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nimport category_encoders as ce\n\nfrom lightgbm import LGBMClassifier\nimport lightgbm\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom colorama import Fore","2739557d":"#\u5b9f\u884c\u74b0\u5883\u304c\u3069\u3053\u306e\u968e\u5c64\u306b\u3042\u308b\u304b\u3001\u30d1\u30b9\u3092\u691c\u7d22\nimport os\nprint(os.getcwd())","1d52763a":"train = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/sample_submission.csv\")","6212e169":"display(train.head())\ndisplay(train.describe())\ndisplay(train.info())","69c49750":"display(test.head())\ndisplay(test.describe())\ndisplay(test.info())","15044d16":"train.columns","fad57fc6":"#--------------------------------\n#\u6570\u5024\u306e\u7279\u5fb4\u91cf\u3000\u203b\u4e0a\u7d1a\u8005\u306f\u3001\u7279\u5fb4\u91cf\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u3066\u3044\u308b\u3002\n#------------------------------\nfeatures_num = ['feature_0', 'feature_1', 'feature_2', 'feature_3', 'feature_4',\n       'feature_5', 'feature_6', 'feature_7', 'feature_8', 'feature_9',\n       'feature_10', 'feature_11', 'feature_12', 'feature_13', 'feature_14',\n       'feature_15', 'feature_16', 'feature_17', 'feature_18', 'feature_19',\n       'feature_20', 'feature_21', 'feature_22', 'feature_23', 'feature_24',\n       'feature_25', 'feature_26', 'feature_27', 'feature_28', 'feature_29',\n       'feature_30', 'feature_31', 'feature_32', 'feature_33', 'feature_34',\n       'feature_35', 'feature_36', 'feature_37', 'feature_38', 'feature_39',\n       'feature_40', 'feature_41', 'feature_42', 'feature_43', 'feature_44',\n       'feature_45', 'feature_46', 'feature_47', 'feature_48', 'feature_49', ]\nfeatures_cat = ['target'] ","a0a195af":"##--------------------------------------------\n#\u30ab\u30c6\u30b4\u30eafeature  \u3000\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\n#---------------------------------------------\nfor feature in features_cat :\n    le = LabelEncoder()\n    le.fit(train[feature])\n    train[feature] = le.transform(train[feature])","010e466a":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u7279\u5fb4\u91cf\u3068\u76ee\u7684\u5909\u6570\u306b\u5206\u3051\u308b  \u6b63\u89e3\u30e9\u3079\u30eb\u3092\u8a18\u5165\ntrain_x = train.drop(['target'], axis=1)\ntrain_y = train['target']\n\n# \u5909\u6570Id\u3092\u9664\u5916\u3059\u308b\ntrain_x = train_x.drop(['id'], axis=1)\ntest_x = test.drop(['id'], axis=1)","0755bf15":"##--------------------------------------------\n#\u30ab\u30c6\u30b4\u30eafeature  \u6a19\u6e96\u30b9\u30b1\u30fc\u30e9\u30fc\n#---------------------------------------------\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nsc = StandardScaler()\ntrain_x = sc.fit_transform(train_x)\ntest_x = sc.transform(test_x)","59fdac8e":"##--------------------------------------------\n#\u30ab\u30c6\u30b4\u30eafeature  \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3000Kmeans\n#---------------------------------------------\nfrom sklearn.cluster import MiniBatchKMeans\n\nkmeans = MiniBatchKMeans(n_clusters=4 , random_state = 71)\nkmeans.fit(train_x)\n\ntrain_clusters = kmeans.predict(train_x)\ntest_clusters = kmeans.predict(test_x)\n\ntrain_distance = kmeans.transform(train_x)\ntest_distance = kmeans.transform(test_x)\n\ntrain_distance","184438d9":"################################################\n#  \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0 \u306e\u4e2d\u5fc3\u8ddd\u96e2\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u3001\u5143\u306e\u7279\u5fb4\u91cf\u306b\u8ffd\u52a0\n#######################\ntrain_x= pd.DataFrame(train_x) \ntrain_1d = pd.DataFrame(train_distance) \ntrain_1d = train_1d.rename(columns={0: 'Col_1', 1: 'Col_2', 2: 'Col_3', 3: 'Col_4'})\n\ntest_x= pd.DataFrame(test_x) \ntest_1d = pd.DataFrame(test_distance)\ntest_1d = test_1d.rename(columns={0: 'Col_1', 1: 'Col_2', 2: 'Col_3', 3: 'Col_4'})\n\ntrain_1d","dd40b295":"from umap import UMAP\numap_2d = UMAP(n_components=2, random_state=2021)\ntrain_2d = umap_2d.fit_transform(train_x)\ntest_2d = umap_2d.fit_transform(test_x)","3f33e2f3":"################################################\n#UMAP \u306e\u6b21\u5143\u524a\u6e1b\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u3001\u5143\u306e\u7279\u5fb4\u91cf\u306b\u8ffd\u52a0\n#######################\ntrain_x= pd.DataFrame(train_x) \ntrain_2d = pd.DataFrame(train_2d) \ntrain_2d = train_2d.rename(columns={0: 'Col_5', 1: 'Col_6'})\n\ntrain_x2d = pd.concat([train_x,train_1d ,train_2d],axis=1)\n\ntest_x= pd.DataFrame(test_x) \ntest_2d = pd.DataFrame(test_2d)\ntest_2d = test_2d.rename(columns={0: 'Col_5', 1: 'Col_6'})\n\ntest_x2d = pd.concat([test_x, test_1d , test_2d],axis=1)","27592a49":"import plotly.express as px\n\n# Take a subsample to reduce computational cost\ntrain_sub = train_2d.sample(1000, random_state=1995)\ntarget_column = 'target'\n\nfig_2d = px.scatter(\n    train_sub , x='Col_5', y='Col_6', \n    labels={'color': 'target'},\n    #color=train_sub.target,\n    color_discrete_sequence = px.colors.qualitative.G10,\n)\nfig_2d.update_layout(\n    title='<span style=\"font-size:24px; font-family:Serif\">UMAP<\/span>',\n)\n\nfig_2d.show()","a150711f":"## Trial \u95a2\u6570\u3067\u6700\u9069\u5316\u3092\u63a2\u7d22\n##\u8a08\u7b97\u91cf\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u3001Hold-out\u6cd5\u30672:8\u306b\u5206\u5272\n##\u30d1\u30e9\u30e1\u30fc\u30bf\u63a2\u7d22\u306f\u91cd\u8981\u30d1\u30e9\u30e1\u30fc\u30bf\u3092suggest_int(\u6574\u6570\u3067\u5168\u90e8\u63a2\u7d22) , \u305d\u306e\u4ed6\u3092suggest_categorical\uff08\u30ea\u30b9\u30c8\u5185\u3092\u9078\u629e\uff09\n\ndef objective(trial,data=train_x2d,target=train_y):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=71)\n    params = {\n        'reg_alpha' : trial.suggest_loguniform('reg_alpha' , 1e-2 , 1000),\n        'reg_lambda' : trial.suggest_loguniform('reg_lambda' , 1e-2 , 1000),\n        'num_leaves' : trial.suggest_int('num_leaves' , 11 , 900),\n        'learning_rate' : trial.suggest_float('learning_rate' , 0.0005 , 0.2),\n        'max_depth' : trial.suggest_int('max_depth' , 50 , 300),\n        'n_estimators' : trial.suggest_int('n_estimators' , 1 ,100000),\n        'min_child_samples' : trial.suggest_int('min_child_samples' , 30 , 150),\n        'min_child_weight' : trial.suggest_loguniform('min_child_weight' , 1e-5 , 1),\n        'subsample' : trial.suggest_float('subsample' , 0.01 , 1.0),\n        'colsample_bytree' : trial.suggest_float('colsample_bytree' , 0.01 , 0.8),\n    }\n    model = LGBMClassifier(**params)  \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],eval_metric='multi_logloss',early_stopping_rounds=100,verbose=False)\n        \n    preds_opt = model.predict_proba(test_x)\n \n\n    log_loss_multi = log_loss(test_y, preds_opt)\n    return log_loss_multi","18db61b1":"import optuna\nfrom sklearn.model_selection import train_test_split\n\nfrom lightgbm import LGBMClassifier\nOPTUNA_OPTIMIZATION = True\n\nstudy = optuna.create_study(direction='minimize') # or maximize \/ \"minimize\"\nstudy.optimize(objective, n_trials=35)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","231390d9":"if OPTUNA_OPTIMIZATION:\n    display(optuna.visualization.plot_optimization_history(study))\n    display(optuna.visualization.plot_slice(study))","967fccbd":"##############################\n#######     LGBMClassifier by tunner\n################################\n\ntrain_oof_lgbm_2d = np.zeros((len(train_x2d), 4))\ntemp_test = np.zeros((len(test_x2d), 4))\n\n\nlgbm_params = study.best_trial.params\n\nNUM_FOLDS = 5\nkf =  StratifiedKFold(n_splits=NUM_FOLDS, shuffle=True, random_state=137)\n\nfor f, (train_ind, val_ind) in tqdm(enumerate(kf.split(train_x2d, train_y))):\n        print(f'Fold {f+1}')\n        train_df = train_x2d.iloc[train_ind].reset_index(drop=True)\n        val_df = train_x2d.iloc[val_ind].reset_index(drop=True)\n        train_target = train_y.iloc[train_ind].reset_index(drop=True)\n        val_target = train_y.iloc[val_ind].reset_index(drop=True)\n\n        model = LGBMClassifier(**lgbm_params)\n        model =  model.fit(train_df, train_target,eval_set=[(val_df,val_target)],early_stopping_rounds=100,verbose=False)\n        \n        temp_oof = model.predict_proba(val_df)\n        print(log_loss(val_target, temp_oof))\n        train_oof_lgbm_2d[val_ind] = temp_oof\n\n        temp_test += model.predict_proba(test_x2d)\n        test_preds_lgbm_2d = temp_test\/NUM_FOLDS\n\n        \nprint('All_logloss',log_loss(train_y, train_oof_lgbm_2d))\n#np.save('train_oof_lgbm_umap', train_oof_lgbm_umap ) #for validation\n#np.save('test_preds_lgbm_umap',test_preds_lgbm_umap ) #for submission","8eac1c07":"##### \u63d0\u51fa\u7528\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210 \u30d8\u30c3\u30c0\u30fc\u7121\u8a2d\u306e\u8a2d\u5b9a\nsubmission = pd.DataFrame( test_preds_lgbm_2d )\nsubmission.columns = ['Class_1', 'Class_2', 'Class_3', 'Class_4']\nsubmission['id'] = test['id']\nsubmission = submission[['id', 'Class_1', 'Class_2', 'Class_3', 'Class_4']]\n\nsubmission.to_csv(\"submission_lgbm_2d.csv\", index=False)\ndisplay(submission.head(), submission.tail())","8c89a634":"![\u30ad\u30e3\u30d7\u30c1\u30e32.PNG](attachment:06fb4018-4467-40b8-8d04-f02ae5bb51d5.PNG)","dfd25b11":"\u3053\u306e\u65b9\u6cd5\u306fkaggle \u30b3\u30f3\u30da\u3067\u738b\u9053\u7684\u306a\u65b9\u6cd5\u3067\u3059\u3002\nThis book is royal road\u3000for kaggle competion.\n\nSTEP\nLGBM + UMAP: Dimension Reduction  + Clustering: Dimension Reduction and Distance  + optuna (all of optimaze)"}}