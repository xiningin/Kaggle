{"cell_type":{"2a715b47":"code","42d52092":"code","4ee6f64e":"code","c8f9016a":"code","50c22329":"code","8c02d228":"code","d41ec1e8":"code","5450cd59":"code","e19d05af":"code","ecc11b3c":"code","e554629b":"code","584235cb":"code","bcaad045":"code","e21750dd":"code","8f20b111":"code","f9071dca":"code","1ffc46a9":"code","b8c52a5a":"code","5aa1a400":"code","1c76dffe":"code","174f5c2c":"markdown","77e418cd":"markdown"},"source":{"2a715b47":"# Importing  Library \nimport os\nimport glob\nimport shutil\nimport random\nimport pandas as pd\nfrom PIL import Image\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","42d52092":"# parameters to modify\nims1 = 224\ntts = 0.25\nhu = 500\nrel = 0","4ee6f64e":"\ndef importing_data(path):\n    sample = []\n    for filename in glob.glob(path):\n        img = Image.open(filename,'r')\n        img = img.resize((ims1,ims1))\n        img = np.array(img)\n        IMG = img.ravel()\n        sample.append(IMG)\n    return sample\n\n\npath1 = '\/\/kaggle\/input\/skin-cancer-malignant-vs-benign\/train\/benign\/*.jpg'\npath2 = '\/\/kaggle\/input\/skin-cancer-malignant-vs-benign\/train\/malignant\/*.jpg'\npath3 = '\/\/kaggle\/input\/skin-cancer-malignant-vs-benign\/test\/benign\/*.jpg'\npath4 = '\/\/kaggle\/input\/skin-cancer-malignant-vs-benign\/test\/malignant\/*.jpg'\n\nprint(\"importing training benign\")\ntrain_b = importing_data(path1)\nprint(\"importing training malignant\")\ntrain_m = importing_data(path2)\nprint(\"importing testing benign\")\ntest_b = importing_data(path3)\nprint(\"importing testing malignant\")\ntest_m = importing_data(path4)\n\ndf_train_b = pd.DataFrame({'image':train_b, 'label': 'benign'})\ndf_train_m = pd.DataFrame({'image':train_m, 'label': 'malignant'})\ndf_test_b = pd.DataFrame({'image':test_b, 'label': 'benign'})\ndf_test_m = pd.DataFrame({'image':test_m, 'label': 'malignant'})","c8f9016a":"train_data = df_train_m.append(df_train_b,ignore_index=True)\n\ntest_data = df_test_m.append(df_test_b,ignore_index=True)\n\nc = 1\nigs = []\nfor i in range(len(train_data)):\n    if(len(train_data.image[i])!=(3*ims1*ims1)):\n#         print(c,i)\n        c = c + 1\n        igs.append(i)\nprint(igs)\nprint(len(igs))","50c22329":"train_data=train_data.drop(igs,axis=0)\nx_train = []\nfor tdim in train_data.image:\n    x_train.append(tdim)\ny_train = np.array(train_data.label)\ny_traind = []\nfor i in range(len(y_train)):\n    if(y_train[i]==\"benign\"):\n        y_traind.append(0)\n    else:\n        y_traind.append(1)\nprint(len(y_traind))","8c02d228":"x_test = []\nfor tdim in test_data.image:\n    x_test.append(tdim)\ny_test = np.array(train_data.label)\ny_testd = []\nfor i in range(len(y_train)):\n    if(y_test[i]==\"benign\"):\n        y_testd.append(0)\n    else:\n        y_testd.append(1)\nprint(len(y_testd))","d41ec1e8":"x_traind = np.array(x_train)\nx_testd = np.array(x_test)\nCLASSES = 2\ny_train = np.zeros([len(y_traind), CLASSES])\nfor i in range(len(y_traind)):\n        y_train[i][y_traind[i]] = 1\nfrom sklearn.model_selection import train_test_split\n\n# x_train, x_test, y_train, y_test = train_test_split(x_traind, y_train, test_size=tts)\n# print('Train size: {train}, Test size: {test}'.format(train=len(x_train), test=len(x_test)))\nx_train = x_traind\nx_test = x_testd\ny_train = y_traind\ny_test = y_testd","5450cd59":"x_train=np.matrix(x_train)\nx_test=np.matrix(x_test)\ny_train=np.matrix(y_train)\ny_train = np.transpose(y_train)\ny_test=np.matrix(y_test)\ny_test = np.transpose(y_test)\nINPUT_LENGHT = x_train.shape[1]\nHIDDEN_UNITS = hu\n\nWin = np.random.normal(size=[INPUT_LENGHT, HIDDEN_UNITS])\nWin = np.matrix(Win)\nprint('Input Weight shape: {shape}'.format(shape=Win.shape))","e19d05af":"def input_to_hidden(x):\n    print(x.shape)\n    print(Win.shape)\n    a = np.dot(x, Win)\n    a = np.maximum(a, rel, a) # ReLU\n    return a\nX = input_to_hidden(x_train)\nXt = np.transpose(X)","ecc11b3c":"www1 = np.dot(Xt, X)\n\nb = np.identity(len(np.array(www1)))\nb = np.dot(b,3)\n\nwww1 = www1 + b\nww1 = np.linalg.inv(www1)\nww2 = np.dot(Xt, y_train)\n\nWout = np.dot(ww1, ww2)\nprint('Output weights shape: {shape}'.format(shape=Wout.shape))","e554629b":"def predict(x):\n    x = input_to_hidden(x)\n    y = np.dot(x, Wout)\n    return y\ny = predict(x_test)\ncorrect = 0\ntotal = y.shape[0]\nfor i in range(total):\n    predicted = np.argmax(y[i])\n    test = np.argmax(y_test[i])\n    correct = correct + (1 if predicted == test else 0)\nprint('Accuracy: {:f}'.format(correct*100\/total))","584235cb":"pathcheck_b = '\/\/kaggle\/input\/skin-cancer-malignant-vs-benign\/test\/benign\/1034.jpg'\npathcheck_m = '\/\/kaggle\/input\/skin-cancer-malignant-vs-benign\/test\/malignant\/1019.jpg'","bcaad045":"%pylab inline\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg","e21750dd":"def showimagefile(path):\n    for filename in glob.glob(path):\n        img = mpimg.imread(filename)\n        imgplot = plt.imshow(img)\n        plt.show()","8f20b111":"sb = np.array(importing_data(pathcheck_b))\nsm = np.array(importing_data(pathcheck_m))","f9071dca":"print(sb)\nprint(sm)","1ffc46a9":"print(sb.shape)","b8c52a5a":"print(sm.shape)","5aa1a400":"showimagefile(pathcheck_b)\nans = predict(sb)\nif ans >0.5:\n    print(\"benign\")\nelse:\n    print(\"malignant\")\nprint(ans)","1c76dffe":"showimagefile(pathcheck_m)\nans = predict(sm)\nif ans >0.5:\n    print(\"benign\")\nelse:\n    print(\"malignant\")\nprint(ans)","174f5c2c":"# Testing Single Image ","77e418cd":"# Skin Cancer Detection classifying Between Malignant and Benign"}}