{"cell_type":{"c47b2021":"code","ecc076f5":"code","0774251c":"code","4ffc7f62":"code","61a7daa5":"code","53c08442":"code","bd1713f7":"code","46ebb490":"code","32546401":"code","b0fad3bd":"code","af00c3f3":"markdown","20ee7fa9":"markdown","20fdc683":"markdown","6e8fd771":"markdown","93f29d9a":"markdown","f24f629e":"markdown","a2acd4e1":"markdown","51136790":"markdown","eb0e3baa":"markdown","2941a9e8":"markdown"},"source":{"c47b2021":"# General Data Science\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Machine Learning\nfrom fastai.vision.data import SegmentationItemList, imagenet_stats\nfrom fastai.vision.transform import get_transforms\nfrom fastai.vision.learner import unet_learner\nfrom fastai.vision.models import resnet34\n\n# Miscellaneous\nimport os\nfrom pathlib import Path\nfrom shutil import copyfile, rmtree","ecc076f5":"img_path = Path(\"\/kaggle\/working\/img\")\nlabels_path = Path(\"\/kaggle\/working\/labels\")\nos.mkdir(img_path)\nos.mkdir(labels_path)\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    if dirname.endswith(\"CameraRGB\") and any(dataset in dirname for dataset in [\"dataa\", \"datab\", \"datac\", \"datad\", \"datae\"]):\n        for filename in filenames:\n            copyfile(os.path.join(dirname, filename), img_path\/filename)\n    elif dirname.endswith(\"CameraSeg\") and any(dataset in dirname for dataset in [\"dataa\", \"datab\", \"datac\", \"datad\", \"datae\"]):\n        for filename in filenames:\n            copyfile(os.path.join(dirname, filename), labels_path\/filename)","0774251c":"codes = np.array([\"Unlabeled\",\n                  \"Building\",\n                  \"Fence\",\n                  \"Other\",\n                  \"Pedestrian\",\n                  \"Pole\",\n                  \"Road line\",\n                  \"Road\",\n                  \"Sidewalk\",\n                  \"Vegetation\",\n                  \"Car\",\n                  \"Wall\",\n                  \"Traffic sign\",])","4ffc7f62":"data = (SegmentationItemList.from_folder(img_path)\n        .split_by_rand_pct(seed=0)\n        .label_from_func(lambda x: labels_path\/f\"{x.stem}{x.suffix}\", classes=codes)\n        .transform(get_transforms(), tfm_y=True)\n        .databunch(bs=4)\n        .normalize(imagenet_stats))\ndata","61a7daa5":"data.show_batch(2)","53c08442":"learn = unet_learner(data, resnet34, model_dir=\"\/kaggle\/working\")","bd1713f7":"learn.lr_find()\nlearn.recorder.plot()","46ebb490":"learn.fit_one_cycle(3, slice(7e-4))","32546401":"learn.show_results(3)","b0fad3bd":"rmtree(img_path)\nrmtree(labels_path)","af00c3f3":"Let's perform an 'lr_find' operation in order to get a rough idea of what max learning rate we should use for the 1cycle policy we will use to train our model.","20ee7fa9":"Let's take a look at a couple samples of our data.","20fdc683":"**Note**: It seems moving all the image and label files into the working directory led to issues commiting this notebook. Let's therefore remove the created directories and all their associated files.","6e8fd771":"With this preliminary work completed, let's coalesce our data using fast.ai's data block API. Collecting all the images together using the identifed image path, we will randomly split 20% of this data for validation, label it, and apply some data augmentation techniques and normalize the data with ImageNet statistics. To prevent GPU memory issues, let's also set the batch size to 4.","93f29d9a":"# CARLA Semantic Segmentation","f24f629e":"Let's perform semantic segmentation on this CARLA dataset using transfer learning. For ease of use, we'll begin by moving all the provided data into two directories, one containing the images and one containing their semantic labels.","a2acd4e1":"Let's end by taking a look at some of the model's predictions in comparison with the actual labels.","51136790":"Based on the above graph, it seems that a maximum learning rate of 7e-4 should be fine. Let's now train our model for 3 epochs.","eb0e3baa":"We will try using a ResNet34 with a fast.ai Unet learner for this task.","2941a9e8":"Thanks to [Michael Li's](https:\/\/www.kaggle.com\/minghaoli) helpful discussion [post](https:\/\/www.kaggle.com\/kumaresanmanickavelu\/lyft-udacity-challenge\/discussion\/101832), we can see that the codes used in this semantic segmentation correspond to the following:"}}