{"cell_type":{"11424327":"code","9080212e":"code","2b6c654f":"code","5fed60e2":"code","74f8ccab":"code","d18e709c":"code","2d7be006":"code","6c0733a7":"code","a956d70b":"code","fc439a2d":"code","3e71fb1b":"code","b9b22545":"code","1cd2b40c":"code","e0cfae1e":"code","815854e0":"code","a635fdef":"code","d3e80e82":"code","8d1bc20c":"code","08799658":"code","de719669":"code","599d20dd":"code","14beefa7":"code","40904cf7":"code","7ace9095":"code","6e4766e2":"code","36ad3902":"code","dba12968":"code","46860ee5":"code","ded8860c":"code","2101b005":"code","27ea440c":"code","12ba16eb":"code","17405c0c":"code","b16e5455":"code","1d31b7b7":"code","db1a7ba1":"code","a113fc45":"code","dcaaa908":"code","7333b300":"code","1d473594":"code","0f0e2cca":"code","86e488e6":"code","286a6f07":"code","8b37f7a8":"code","09bd31d7":"code","16ed813d":"code","4a203907":"code","18f46fea":"code","bbf9b90d":"code","5e04e586":"code","aa84814b":"code","826b9bee":"code","27cd85ff":"code","8bd7a123":"code","45ccddd8":"markdown","c32d6110":"markdown","fdda31d6":"markdown","82b494df":"markdown","34aa8f79":"markdown","961a6450":"markdown","c30ba811":"markdown","453f889c":"markdown","09a70553":"markdown","8c112688":"markdown","a203fd49":"markdown","528fcbd7":"markdown","d7d0af51":"markdown","3c92e1a4":"markdown","62f970af":"markdown","7182c391":"markdown","1bb4249f":"markdown","2534e5f1":"markdown","229d8eac":"markdown","cfe6e256":"markdown","20887e17":"markdown","607fdf34":"markdown","ce4d568e":"markdown","3cf45531":"markdown","1283abb4":"markdown","6a9a38bc":"markdown","11d07c2b":"markdown","9d626157":"markdown","7993192a":"markdown","8202342a":"markdown","8c96da48":"markdown","e6a5948e":"markdown","9d5d8afb":"markdown","89a98806":"markdown"},"source":{"11424327":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.pyplot import figure\nsns.set_style(\"darkgrid\"); # To show the graphs with white background and gridded\nimport plotly.express as px;\nplt.style.use(\"seaborn-notebook\");","9080212e":"data = pd.read_csv(\"..\/input\/world-happiness-report-2021\/world-happiness-report-2021.csv\")","2b6c654f":"data","5fed60e2":"# Info about data\ndata.info()","74f8ccab":"plt.figure(figsize = (15, 8));\nsns.kdeplot(data[\"Ladder score\"], hue = data[\"Regional indicator\"], fill = True, linewidth = 2, palette = \"coolwarm\");\nplt.axvline(data[\"Ladder score\"].mean(), c = \"black\"); # Mean value of Ladder score\nplt.title(\"Ladder score vs Regional indicators\");","d18e709c":"fig = px.choropleth(data,\n                    locations = \"Country name\",\n                    color = \"Ladder score\",\n                    locationmode = \"country names\"\n                   );\nfig.update_layout(title = \"Happiness score Comparison by Countries\");\nfig.show();","2d7be006":"#make the countries as indexes, drop the regional indicator column since it's not numerical and drop ladder score since its the score of happiness that we are searching \ndf = data.copy()\ndf.set_index('Country name', inplace=True)\ndf=df.drop([\"Regional indicator\",\"Ladder score\",\"Standard error of ladder score\",\"upperwhisker\",\"lowerwhisker\",\"Ladder score in Dystopia\",\"Explained by: Log GDP per capita\",\"Explained by: Social support\",\"Explained by: Healthy life expectancy\",\"Explained by: Freedom to make life choices\",\"Explained by: Generosity\",\"Explained by: Perceptions of corruption\",\"Dystopia + residual\",\"Generosity\"], axis =1)\ndf","6c0733a7":"# Distribution of feature set 2: Logged GDP per capita\nfigure(figsize=(8, 6), dpi=80)\nlistFeatures = [\"Logged GDP per capita\"]\nsns.boxplot(data = data.loc[:, listFeatures], orient = \"v\", palette = \"Set2\")\nplt.xticks(rotation = 60)","a956d70b":"# Distribution of feature set 1: Social support, Freedom to make life choices, Perceptions of corruption\nfigure(figsize=(8, 6), dpi=80)\nlistFeatures = [\"Social support\", \"Freedom to make life choices\", \"Perceptions of corruption\"]\nsns.boxplot(data = data.loc[:, listFeatures], orient = \"v\", palette = \"Set1\")\nplt.xticks(rotation = 60)","fc439a2d":"# Distribution of feature set 3: Healthy life expectancy\nfigure(figsize=(8, 6), dpi=80)\nlistFeatures = [\"Healthy life expectancy\"]\nsns.boxplot(data = data.loc[:, listFeatures], orient = \"v\", palette = \"Set3\")\nplt.xticks(rotation = 60)","3e71fb1b":"Sum = df.sum(axis = 0)\nSum = Sum.rename(\"Sum\") \ndf0 = df.append(Sum,ignore_index=False)\ndf0","b9b22545":"#n the number of criteria\nn = df.shape[1]\nn","1cd2b40c":"# m the number of alternatives \nm = df.shape[0]\nm","e0cfae1e":"# k which is 1\/ln(m)\nk = 1\/ np.log(m)\nk","815854e0":"# p_ij = x_ij\/sum{j}(x_ij)\ndf1 = df.copy()\ndf1 = df1 \/ Sum\ndf1","a635fdef":"# p_ij*ln(p_ij)\ndf2 = df1.copy()\ndf2 = df2 * np.log(df2)\ndf2 = df2.fillna(0) \ndf2","d3e80e82":"Sum2 = df2.sum(axis = 0)\nSum2 = Sum2.rename(\"Sum2\") \nSum2","8d1bc20c":"# e_j = -k*p_ij*ln(p_ij)\ndf3 = -k * Sum2\ndf3 =df3.rename(\"Entropy\") \ndf3","08799658":"# 1-e_j\ndf3 = 1 - df3\ndf3 = pd.DataFrame(df3)\ndf3","de719669":"Sum3 = df3.sum(axis=0)\nSum3","599d20dd":"# 3- w_j = 1-e_j\/sum(1-e_j)\ndf4 = df3['Entropy'] \/ Sum3[0]\ndf4 =df4.rename(\"Weights\")\ndf4 = pd.DataFrame(df4)\ndf4.loc[\"Perceptions of corruption\"]= -df4.loc[\"Perceptions of corruption\"]\ndf4","14beefa7":"df5 = df1.copy()\ndf5 = df4[\"Weights\"] * df5\ndf5 = df5.sum(axis = 1)\ndf5 =df5.rename(\"Score\")\ndf5 = pd.DataFrame(df5)\ndf5['Rank'] = df5.rank(axis= 0,ascending= False)\ndf5 = df5.sort_values(by=['Rank'])\ndf5","40904cf7":"print(\"The Happiest Country: \", df5.index.values[0]);\nprint(\"The Most Unhappy Country: \", df5.index.values[-1]);","7ace9095":"happinessFilter = (df5.loc[:,\"Rank\"] > 145) ;\ny = df5.index.values[-4:]\nax = sns.barplot(x = \"Score\", y = y, data = df5[happinessFilter], palette = \"coolwarm\");\nax.set_title('The unhappiest countries')","6e4766e2":"happinessFilter = (df5.loc[:,\"Rank\"] < 5) ;\ny = df5.index.values[0:4]\nax = sns.barplot(x = \"Score\", y = y, data = df5[happinessFilter], palette = \"coolwarm\");\nax.set_title('The happiest countries')","36ad3902":"fig = px.choropleth(df5, locations = df5.index.values, color = \"Score\", locationmode='country names')\nfig.update_layout(title_text = 'World Happiness Index according to entropy', title_x = 0.5)\nfig.show()","dba12968":"#Add max for each column\ndf6 =df.copy()\nMax = df6.max(numeric_only=True)\nMax = Max.rename('Max')\n#Add min for each column\nMin = df6.min(numeric_only=True)\nMin = Min.rename('Min')\n#Add weigths\ncriteria = len(df6.columns)\nWeight = 1\/criteria\nWeigths = []\nfor i in range(len(df6.columns)):\n     Weigths.append(Weight)\nW = pd.Series(Weigths, index = df6.columns)\nW = W.rename(\"Weights\")\ndf6 = df6.append([Max,Min,W], ignore_index=False)\ndf6","46860ee5":"#If the criterion is minimized then the value in the Min row should be considered otherwise it's the opposite\n#Normalization: [MAX] p_ij = x_ij\/max{j}(x_ij) # [MIN] min{j}{x_ij}\/x_ij\ndf7 =pd.DataFrame()\ndf7[\"Logged GDP per capita\"] = df6[\"Logged GDP per capita\"] \/ df6.loc[\"Min\"][\"Logged GDP per capita\"]\ndf7[\"Social support\"] = df6[\"Social support\"] \/ df6.loc[\"Min\"][\"Social support\"]\ndf7[\"Healthy life expectancy\"] = df6[\"Healthy life expectancy\"] \/ df6.loc[\"Min\"][\"Healthy life expectancy\"]\ndf7[\"Freedom to make life choices\"] = df6[\"Freedom to make life choices\"] \/ df6.loc[\"Min\"][\"Freedom to make life choices\"]\ndf7[\"Perceptions of corruption\"] = df6[\"Perceptions of corruption\"] \/ df6.loc[\"Max\"][\"Perceptions of corruption\"]\ndf7 = df7.drop([\"Max\",\"Min\",\"Weights\"], axis =0)\ndf7","ded8860c":"df8 = df6.loc[\"Weights\"] * df7\ndf8 = df8.sum(axis= 1)\ndf8 =df8.rename(\"Sum\")\ndf8 = pd.DataFrame(df8)\ndf8['Rank'] = df8.rank(axis= 0,ascending= False)\ndf8 = df8.sort_values(by=['Rank'])\ndf8","2101b005":"print(\"The Happiest Country: \", df8.index.values[0]);\nprint(\"The Most Unhappy Country: \", df8.index.values[-1]);","27ea440c":"happinessFilter = (df8.loc[:,\"Rank\"] > 145) ;\ny = df8.index.values[-4:]\nax = sns.barplot(x = \"Sum\", y = y, data = df8[happinessFilter], palette = \"coolwarm\");\nax.set_title('The unhappiest countries')","12ba16eb":"happinessFilter = (df8.loc[:,\"Rank\"] < 5) ;\ny = df8.index.values[0:4]\nax = sns.barplot(x = \"Sum\", y = y, data = df8[happinessFilter], palette = \"coolwarm\");\nax.set_title('The happiest countries')","17405c0c":"fig = px.choropleth(df8, locations = df8.index.values, color = \"Sum\", locationmode='country names')\nfig.update_layout(title_text = 'World Happiness Index according to WSM', title_x = 0.5)\nfig.show()","b16e5455":"df9 = df7 ** df6.loc[\"Weights\"]\ndf9 = df9.product(axis= 1)\ndf9 =df9.rename(\"Product\")\ndf9 = pd.DataFrame(df9)\ndf9['Rank'] = df9.rank(axis= 0,ascending= False)\ndf9 = df9.sort_values(by=['Rank'])\ndf9","1d31b7b7":"print(\"The Happiest Country: \", df9.index.values[0]);\nprint(\"The Most Unhappy Country: \", df9.index.values[-1]);","db1a7ba1":"happinessFilter = (df9.loc[:,\"Rank\"] > 145) ;\ny = df9.index.values[-4:]\nax = sns.barplot(x = \"Product\", y = y, data = df9[happinessFilter], palette = \"coolwarm\");\nax.set_title('The unhappiest countries')","a113fc45":"happinessFilter = (df9.loc[:,\"Rank\"] < 5) ;\ny = df9.index.values[0:4]\nax = sns.barplot(x = \"Product\", y = y, data = df9[happinessFilter], palette = \"coolwarm\");\nax.set_title('The happiest countries')","dcaaa908":"fig = px.choropleth(df9, locations = df9.index.values, color = \"Product\", locationmode='country names')\nfig.update_layout(title_text = 'World Happiness Index according to WPM', title_x = 0.5)\nfig.show()","7333b300":"Lambda = 0.5\ndf10 = pd.DataFrame()\ndf10[\"WSM\"] = df8[\"Sum\"]\ndf10[\"WPM\"] = df9[\"Product\"]\ndf10[\"Score\"] = df10[\"WSM\"] + (1-Lambda) * df10[\"WPM\"]\ndf10['Rank'] = df10[\"Score\"].rank(axis= 0,ascending= False)\ndf10 = df10.sort_values(by=['Rank'])\ndf10","1d473594":"print(\"The Happiest Country: \", df10.index.values[0])\nprint(\"The Most Unhappy Country: \", df10.index.values[-1])","0f0e2cca":"happinessFilter = (df10.loc[:,\"Rank\"] > 145 )\ny = df10.index.values[-4:]\nax= sns.barplot(x = \"Score\", y = y, data = df10[happinessFilter], palette = \"coolwarm\")\nax.set_title('The unhappiest countries')","86e488e6":"happinessFilter = (df10.loc[:,\"Rank\"] < 5) ;\ny = df10.index.values[0:4]\nax = sns.barplot(x = \"Score\", y = y, data = df10[happinessFilter], palette = \"coolwarm\");\nax.set_title('The happiest countries')","286a6f07":"fig = px.choropleth(df10, locations = df10.index.values, color = \"Score\", locationmode='country names')\nfig.update_layout(title_text = 'World Happiness Index according WASPASS', title_x = 0.5)\nfig.show()","8b37f7a8":"df11= df.copy() \n# nb criteria\nn = df11.shape[1]\n#nb alternatives\nm = df11.shape[0]\n#Add weigths\ncriteria = len(df11.columns)\nWeight = 1\/criteria\nWeigths = []\nfor i in range(len(df11.columns)):\n     Weigths.append(Weight)\nW = pd.Series(Weigths, index = df11.columns)\nW = W.rename(\"Weights\")\nSum = df.sum(axis = 0)\nSum = Sum.rename(\"Sum\")\nSQT = np.sqrt((np.power(df, 2)).sum(axis=0))\nSQT = SQT.rename(\"SQRT(Sum(x_ij^2))\")\ndf11 = df11.append([W,Sum,SQT], ignore_index=False)\ndf11","09bd31d7":"#Normalization: r_ij\ndf12 = df11 \/ df11.loc[\"SQRT(Sum(x_ij^2))\"]\ndf12 = df12.drop([\"Weights\",\"Sum\",\"SQRT(Sum(x_ij^2))\"],axis=0)\ndf12","16ed813d":"#2- v_ij = r_ij*w_ij\ndf13 = df12 * df11.loc[\"Weights\"]\ndf13 ","4a203907":"#3- V_j+ and V_j-\ndf14 = pd.DataFrame()\nMax = df13.max()\nMax = Max.rename('Max')\n#Add min for each column\nMin = df13.min()\nMin = Min.rename('Min')\ndf14 = df14.append([Max,Min], ignore_index=False)\n#Chose the v_j+ row\nv_jPlus = df14.loc[\"Max\"][0:4]\nv_jPlus= v_jPlus.append(df14.loc[\"Min\"][4:5])\nv_jPlus = v_jPlus.rename(\"v_j+\")\n#Chose the v_j- row\nv_jMoins = df14.loc[\"Min\"][0:4]\nv_jMoins= v_jMoins.append(df14.loc[\"Max\"][4:5])\nv_jMoins = v_jMoins.rename(\"v_j-\")\ndf14 = df14.append([v_jPlus,v_jMoins], ignore_index=False)\ndf14","18f46fea":"#4.1- SQR(v_ij - v_j+)\ndf15 = np.power((df13 - df14.loc[\"v_j+\"]),2)\ndf15[\"Sum\"] = df15.sum(axis=1)\ndf15[\"S_i+\"] = np.sqrt(df15[\"Sum\"])\ndf15","bbf9b90d":"#4.2- SQR(v_ij - v_j+)\ndf16 = np.power((df13 - df14.loc[\"v_j-\"]),2)\ndf16[\"Sum\"] = df16.sum(axis=1)\ndf16[\"S_i-\"] = np.sqrt(df16[\"Sum\"])\ndf16","5e04e586":"df17 = pd.DataFrame()\ndf17[\"S_i+\"] = df15[\"S_i+\"]\ndf17[\"S_i-\"] = df16[\"S_i-\"]\ndf17[\"Sum\"] = df17.sum(axis=1)\ndf17[\"Pi\"] = df17[\"S_i-\"] \/ df17[\"Sum\"]\ndf17['Rank'] = df17[\"Pi\"].rank(axis= 0,ascending= False)\ndf17 = df17.sort_values(by=['Rank'])\ndf17","aa84814b":"print(\"The Happiest Country: \", df17.index.values[0]);\nprint(\"The Most Unhappy Country: \", df17.index.values[-1]);\n","826b9bee":"happinessFilter = (df17.loc[:,\"Rank\"] > 145) ;\ny = df17.index.values[-4:]\nax = sns.barplot(x = \"Pi\", y = y, data = df17[happinessFilter], palette = \"coolwarm\");\nax.set_title('The unhappiest countries')","27cd85ff":"happinessFilter = (df17.loc[:,\"Rank\"] < 5) ;\ny = df17.index.values[0:4]\nax = sns.barplot(x = \"Pi\", y = y, data = df17[happinessFilter], palette = \"coolwarm\");\nax.set_title('The happiest countries')","8bd7a123":"fig = px.choropleth(df17, locations = df17.index.values, color = \"Pi\", locationmode='country names')\nfig.update_layout(title_text = 'World Happiness Index according to topsis', title_x = 0.5)\nfig.show()","45ccddd8":"### Step 1 : Normalization","c32d6110":"### Step 0:","fdda31d6":"## Data understanding ","82b494df":"### Step 3: Compute the weight vector. These are the objectives of each weight","34aa8f79":"## Data Content\n#### The happiness scores and rankings use data from Gallup World Poll.\n    Gallup World Poll: In 2005, Gallup began its World Poll, which continually surveys citizens in 160 countries, representing more than 98% of the world's adult population. The Gallup World Poll consists of more than 100 global questions as well as region-specific items.\n#### The columns following:\n    the happiness score estimate the extent to which each of six factors \u2013 economic production, social support, life expectancy, freedom, absence of corruption, and generosity \u2013 contribute to making life evaluations higher in each country than they are in Dystopia, a hypothetical country that has values equal to the world\u2019s lowest national averages for each of the six factors. They have no impact on the total score reported for each country, but they do explain why some countries rank higher than others.\n\n#### Ladder score:\n    Happiness score or subjective well-being. This is the national average response to the question of life evaluations.\n\n#### Logged GDP per capita:\n    The GDP-per-capita time series from 2019 to 2020 using countryspecific forecasts of real GDP growth in 2020.\n#### Social support: \n    Social support refers to assistance or support provided by members of social networks to an individual.\n#### Healthy life expectancy:\n    Healthy life expectancy is the average life in good health - that is to say without irreversible limitation of activity in daily life or incapacities - of a fictitious generation subject to the conditions of mortality and morbidity prevailing that year.\n#### Freedom to make life choices: \n    Freedom to make life choices is the national average of binary responses to the GWP question \u201cAre you satisfied or dissatisfied with your freedom to choose what you do with your life?\u201d ... It is defined as the average of laughter and enjoyment for other waves where the happiness question was not asked\n#### Generosity:\n    Generosity is the residual of regressing national average of response to the GWP question \u201cHave you donated money to a charity in the past month?\u201d on GDP per capita. This column has negative values that won't be accepted in the algorithms of this DSS.\n#### Perceptions of corruption:\n    The measure is the national average of the survey responses to two questions in the GWP: \u201cIs corruption widespread throughout the government or not\u201d and \u201cIs corruption widespread within businesses or not?\u201d\n#### Ladder score in Dystopia:\n    It has values equal to the world\u2019s lowest national averages. Dystopia as a benchmark against which to compare contributions from each of the six factors. Dystopia is an imaginary country that has the world's least-happy people. ... Since life would be very unpleasant in a country with the world's lowest incomes, lowest life expectancy, lowest generosity, most corruption, least freedom, and least social support, it is referred to as \u201cDystopia,\u201d in contrast to Utopia\nWorld Happiness Report Official Website: https:\/\/worldhappiness.report\/","961a6450":"## Data Distribution ","c30ba811":"### The Hapiest and Most Unhappy Countries according to WSM","453f889c":"### Step 0","09a70553":"### The Hapiest and Most Unhappy Countries according to WASPASS","8c112688":"### Step 3: Calculate the ideal best","a203fd49":"### The Hapiest and Most Unhappy Countries according to WPM","528fcbd7":"### Step 1: Normalize the decision matrix ","d7d0af51":"## Entropy","3c92e1a4":"## Data preperation","62f970af":"#### We want to maximize: logged GDP per capita, social support, healthy life expectancy and freedom to make life choices, therefore their weights, will be positives\n#### We want to minimize: the perception of corruption, therefore its weight will be negative","7182c391":"### Ranking :","1bb4249f":"## WSM + WPM:","2534e5f1":"### Happiness score in the world by countries","229d8eac":"### Step 4: Euclidean distance from ideal best and worst","cfe6e256":"### Step 2: Compute entropy where m is the number of alternatives","20887e17":"## Data processing","607fdf34":"### The columns that will are kept: \n    Logged GDP per capita\tSocial support\tHealthy life expectancy\tFreedom to make life choices\tPerceptions of corruption","ce4d568e":"#### Step 4: combine the two methods","3cf45531":"### Step 2: WSM","1283abb4":"### The Hapiest and Most Unhappy Countries according to entropy","6a9a38bc":"### Step 2 : Weighted normalized decision matrix","11d07c2b":"### Step 3: WPM","9d626157":"### Happiness score in the world by regions","7993192a":"## WASPASS:\n     We redo the same steps as the previous methods for the 3 first steps","8202342a":"### The Hapiest and Most Unhappy Countries according to Topsis","8c96da48":"### Step 1: Normalize the decision matrix","e6a5948e":"### WSM or Simple Additive Weighting(SAW) method","9d5d8afb":"### Step 5: Calculate the performance score","89a98806":"## Topsis"}}