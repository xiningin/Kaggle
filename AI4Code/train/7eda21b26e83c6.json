{"cell_type":{"caa01f24":"code","6340f1f7":"code","7e600744":"code","9e650af2":"code","bd11d5f9":"code","a2bdb8c6":"code","19b7f63f":"code","88b5ac5c":"code","05be7124":"code","debb7845":"code","b3627457":"code","27c1c76b":"code","87870deb":"code","b1e26742":"code","6526feb5":"code","39f09513":"code","2c277135":"code","189bb44e":"code","9c4aaa3c":"code","a6f7dc10":"code","41b85399":"markdown","ae12ea74":"markdown","1329b80e":"markdown","06777c13":"markdown","b8c395a2":"markdown","e250d635":"markdown"},"source":{"caa01f24":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport scikitplot as skplt\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.layers import Embedding, LSTM, GlobalAveragePooling2D\nfrom tensorflow.keras.layers import Dense, Dropout, Conv1D, MaxPool1D, BatchNormalization\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nplt.style.use('ggplot')\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6340f1f7":"data = pd.read_csv('\/kaggle\/input\/malware-analysis-datasets-api-call-sequences\/dynamic_api_call_sequence_per_malware_100_0_306.csv')","7e600744":"data.head()","9e650af2":"used_data = data.drop(['hash', 'malware'], axis=1)","bd11d5f9":"used_data.head()","a2bdb8c6":"sns.countplot(data['malware'])","19b7f63f":"X_train, X_test, y_train, y_test = train_test_split(used_data, data['malware'], test_size=0.25, \n                                                    shuffle=True, random_state=42)","88b5ac5c":"X_train.shape","05be7124":"unique_api_calls = 307","debb7845":"model = Sequential(name=\"Cnn-Lstm_model\")\nmodel.add(Embedding(input_dim=unique_api_calls, output_dim=8,\n                    input_length=X_train.shape[1], name='layer_embedding'))\nmodel.add(BatchNormalization())\nmodel.add(Conv1D(filters = 32, kernel_size = 9, padding = 'same', activation = 'relu'))\nmodel.add(MaxPool1D(pool_size = 2))\nmodel.add(LSTM(units=512, return_sequences=False, dropout=0.2))\nmodel.add(Dense(units=1, activation='sigmoid'))","b3627457":"model.summary()","27c1c76b":"optimizer = Adam(lr=.0001)\nmodel.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])","87870deb":"history = model.fit(X_train, y_train, validation_split=0.2, epochs=150, batch_size=512)","b1e26742":"model.save('behavioral-malware-detection-based-on-api-calls_model.h5')","6526feb5":"fig, ax = plt.subplots(1,2, figsize=[12,6])\nax[0].plot(history.history[\"loss\"])\nax[0].plot(history.history[\"val_loss\"])\nax[0].set_title(\" Loss\")\nax[0].legend((\"Training\", \"validation\"), loc=\"upper right\")\nax[0].set_xlabel(\"Epochs\")\nax[1].plot(history.history[\"accuracy\"])\nax[1].plot(history.history[\"val_accuracy\"])\nax[1].legend((\"Training\", \"validation\"), loc=\"lower right\")\nax[1].set_title(\"Accuracy\")\nax[1].set_xlabel(\"Epochs\")","39f09513":"y_pred = model.predict_classes(X_test)","2c277135":"print(\"CNN_LSTM model classification report: \\n\\n {}\".format(classification_report(np.array(y_test), y_pred.flatten())))","189bb44e":"probas = model.predict_proba(X_test, batch_size=64)\nprobas=np.array([[1-probas[i][0], probas[i][0]] for i in range(len(probas))]).reshape(probas.shape[0], 2)\nskplt.metrics.plot_roc(np.array(y_test), probas, figsize=(8, 6))","9c4aaa3c":"skplt.metrics.plot_precision_recall(np.array(y_test), probas, figsize=(8, 6))","a6f7dc10":"ax=skplt.metrics.plot_confusion_matrix(y_test, y_pred, figsize=(8, 7))\ntickx=ax.set_xticklabels(['Benign', 'Malware'])\nticky=ax.set_yticklabels(['Benign', 'Malware'])","41b85399":"### Building the model","ae12ea74":"### Classes distribution","1329b80e":"### Imports","06777c13":"### Evaluating model","b8c395a2":"### Training model","e250d635":"### splitting the data"}}