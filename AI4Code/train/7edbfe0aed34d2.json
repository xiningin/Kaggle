{"cell_type":{"4553d467":"code","d6181550":"code","fd0fb8c3":"code","1c8d9304":"code","2129cd24":"code","1c1cead2":"code","2d0085d3":"code","d96f4195":"code","0ac2c9cb":"code","f98d9fb1":"code","1eaea453":"code","b6ebdb73":"code","cddaf9e5":"code","117cb0e8":"markdown","67d289bc":"markdown","01c0c1c8":"markdown","9ed23323":"markdown","6f7b339b":"markdown"},"source":{"4553d467":"# let's first check where are our files. Don't forget to include the dataset.\nimport os\nprint(os.listdir(\"..\/input\"))","d6181550":"# as you can see, we have 4 different sets of data that we can train our model upon, let's do a quick check to see the overall structure of these sets\n\ndef tree(rootpath, skip_file_type):\n    \"\"\"Takes a rootpath to draw a directory structure\n    \n    Args:\n        rootpath: path of the directory to start drawing tree from\n        skip_file_type: the type of file to skip\n    Return:\n        A tree that shows the directory structure\n        \n    NOTE: This skips the file types based on if the filename ends with the passed value in skip_file_type\n    \"\"\"\n    for root, dirs, files in os.walk(rootpath):\n        level = root.replace(rootpath, '').count(os.sep)\n        indent = ' ' * 4 * (level)\n        print('{}{}\/'.format(indent, os.path.basename(root)))\n        subindent = ' ' * 4 * (level + 1)\n        number_of_skipped_files = 0\n        for f in files:\n            if not f.endswith(skip_file_type):\n                print('{}{}'.format(subindent, f))\n            else:\n                number_of_skipped_files += 1\n        if number_of_skipped_files > 0:\n            print('{} {} files'.format(subindent, number_of_skipped_files))","fd0fb8c3":"# note that we are skipping .jpg files to keep the structure clean and legible. you can try it without `.jpg` as well\ntree('..\/input\/', '.jpg')","1c8d9304":"# let's see a single image\nimport imageio\nimport matplotlib.pyplot as plt\n\ndef show_raw_images(file_path):\n    \"\"\"Shows a raw image\n    \n    Args:\n        file_path: Path of the file\n    Returns:\n        The image file\n    \"\"\"\n    img = imageio.imread(file_path)\n    plt.imshow(img)","2129cd24":"show_raw_images('..\/input\/facades\/facades\/train\/1.jpg')","1c1cead2":"# let's load images in numpy arrays and prepare training and validation data\n\ndef load_data(dataset):\n    \"\"\"load the data from a specific dataset\n    \n    Args:\n        dataset: which dataset should be loaded\n    Returns:\n        If proper dataset, it returns a list of numpy arrays of training and validation data\n    \"\"\"\n    possible_datasets = ['maps', 'cityscapes', 'facades']\n    if dataset not in possible_datasets:\n        print('Dataset not found! Please make sure that you are using either of these datasets:', possible_datasets)\n        return\n    else:\n        print('Loading', dataset)\n        train_data_path = '..\/input\/' + dataset + '\/' + dataset + '\/train'\n        validation_data_path = '..\/input\/' + dataset + '\/' + dataset + '\/val'\n        \n        train_data = []\n        validation_data = []\n        for dataset_path in [train_data_path, validation_data_path]:\n            for file in os.listdir(dataset_path):\n                file_path = dataset_path + '\/' + file\n                img = imageio.imread(file_path)\n                train_data.append(img)\n        \n        return train_data, validation_data\n","2d0085d3":"train_data, validation_data = load_data('facades')","d96f4195":"# load data into an image\nplt.imshow(train_data[0])","0ac2c9cb":"# check the raw data\ntrain_data[0]","f98d9fb1":"# maps\nshow_raw_images('..\/input\/maps\/maps\/train\/100.jpg')","1eaea453":"# cityscapes\nshow_raw_images('..\/input\/cityscapes\/cityscapes\/train\/100.jpg')","b6ebdb73":"# facades\nshow_raw_images('..\/input\/facades\/facades\/train\/100.jpg')","cddaf9e5":"# edges2shoes\nshow_raw_images('..\/input\/edges2shoes\/edges2shoes\/train\/10000_AB.jpg')","117cb0e8":"Each image is of size `512x256` divided into two part where first `256x256` part is the actual image and remaining `256x256` part is the trace of the original image.","67d289bc":"**NOTE**: The filename syntax for `edges2shoes` set is `<file_number>_AB.jpg` while all other sets have files with syntax `<file_number>.jpg`.\n\nThis concludes basic introduction to this dataset. Be sure to checkout other kernels for more inspiration!","01c0c1c8":"**Loading Pix-2-Pix dataset**\n\nThis kernel aims to be a quick introduction to the data in the dataset and how to load it for your exploration and modeling tasks.","9ed23323":"NOTE: Original data is in `.tar.gz` format but kaggle extracts the files for us to use. Due to that we see that the folder structure is a bit messy, `maps` inside `maps` and so on.\n\nWe also see that only `facades` dataset has `test` data available. It's the recommended dataset to use for getting started with the model. It's also comparitively smaller in size (check details on the dataset page).","6f7b339b":"We also see that each pixel value is in the range of 0-255 color scale and the datatype value is `uint8`. Here are some more samples from other sets in the dataset."}}