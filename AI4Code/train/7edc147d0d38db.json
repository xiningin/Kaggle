{"cell_type":{"eea18a3c":"code","0bddae36":"code","c3fc66e8":"code","e5a8afc3":"code","209e8974":"code","25b2bfd3":"code","588e824d":"code","f436fff8":"code","402546cd":"code","37d6a796":"code","4ac626d8":"code","7b16ef62":"code","b4af473e":"code","6972f18b":"code","619ef3fa":"code","ad8a605b":"code","b44b21ce":"code","94797c34":"code","e67b2b8c":"code","cf074e5f":"code","5446d859":"code","e50b990f":"code","a1f2b649":"code","fb7ba025":"code","aac73456":"code","0eb72e35":"code","b5f85fdb":"code","88d0ba35":"code","79ef6282":"code","1777ee79":"code","665494ca":"code","154b032e":"code","965dc418":"code","061794b5":"code","a9b8a8bd":"code","48031359":"code","cc57766c":"code","54d2016e":"code","2b1304f6":"code","0dcf3731":"code","ecc08d28":"code","c6bc21b7":"code","fc0658ac":"code","7e8b6728":"code","af323fd5":"markdown","7bf43cf9":"markdown","276591f4":"markdown","07e5460a":"markdown","8db46f51":"markdown","dd42667a":"markdown","504bf832":"markdown","3878d694":"markdown","d9a6e1e4":"markdown","4f63355a":"markdown","e265384d":"markdown","2f76a1af":"markdown","e5172a73":"markdown","a252d7d2":"markdown","a11c4aed":"markdown","a76bde40":"markdown","eef33c46":"markdown"},"source":{"eea18a3c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","0bddae36":"\n\napple = pd.read_csv('..\/input\/apple_market_2.csv')\napple","c3fc66e8":"for name in list(apple):\n    print('statistic for column '+ name)\n    print(apple[name].describe())\n    print()","e5a8afc3":"print(apple.isnull().sum())","209e8974":"import plotly.offline as py\nimport statsmodels.api as sm\nimport plotly as py\nimport plotly.graph_objs as go\n\ninit_notebook_mode(connected=True)\n%matplotlib inline\n\napple_data = apple\napple_data = apple_data.reset_index()\napple_data['date'] = pd.to_datetime(apple_data['Date'])\napple_data = apple_data.set_index('Date')\n\ns = sm.tsa.seasonal_decompose(apple_data['WIKI\/AAPL - Close'].values, freq=60)\n\n\ntrace1 = go.Scatter(x = np.arange(0, len(s.trend), 1),y = s.trend,mode = 'lines',name = 'Trend',\n    line = dict(color = ('rgb(244, 146, 65)'), width = 4))\n\ntrace2 = go.Scatter(x = np.arange(0, len(s.seasonal), 1),y = s.seasonal,mode = 'lines',name = 'Seasonal',\n    line = dict(color = ('rgb(66, 244, 155)'), width = 2))\n\ntrace3 = go.Scatter(x = np.arange(0, len(s.resid), 1),y = s.resid,mode = 'lines',name = 'Residual',\n    line = dict(color = ('rgb(209, 244, 66)'), width = 2))\n\ntrace4 = go.Scatter(x = np.arange(0, len(s.observed), 1),y = s.observed,mode = 'lines',name = 'Observed',\n    line = dict(color = ('rgb(66, 134, 244)'), width = 2))\n\ndata = [trace1, trace2, trace3, trace4]\nlayout = dict(title = 'Seasonal decomposition', xaxis = dict(title = 'Time'), yaxis = dict(title = 'Price, USD'))\nfig = dict(data=data, layout=layout)\npy.offline.iplot(fig, filename='seasonal_decomposition')\n\n","25b2bfd3":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nfor column in [column for column in list(apple) if column != 'Date']:\n    apple[column].hist(bins=20)\n    plt.xlabel(column)\n    plt.ylabel('frequency')\n    plt.show()","588e824d":"apple.skew(axis=0, skipna=True)","f436fff8":"import seaborn as sns\nfor column in [column for column in list(apple) if column != 'Date']:\n    apple_feature = apple[column]\n    sns.boxplot(apple_feature)\n    plt.xlabel(column)\n    plt.show()","402546cd":"apple.corr(method='spearman').style.format(\"{:.2}\").background_gradient(cmap=plt.get_cmap('coolwarm'), axis=1)","37d6a796":"group = apple.groupby('Date')\nReal_Price = group['WIKI\/AAPL - Close'].mean()\nReal_Price","4ac626d8":"N_STEPS_IN = 30\nN_STEPS_OUT = 7\nN_FEATURES = 1","7b16ef62":"apple_train= Real_Price[:-(N_STEPS_IN+N_STEPS_OUT)]\napple_test= Real_Price[-(N_STEPS_IN+N_STEPS_OUT):]\nprint(apple_train)\nprint(apple_test)","b4af473e":"from sklearn.preprocessing import MinMaxScaler\n\nsc = MinMaxScaler()\n\ntrain_set = apple_train.values\ntrain_set = np.reshape(train_set, (len(train_set), 1))\ntrain_set = sc.fit_transform(train_set)\ntrain_set = np.reshape(train_set, (len(train_set),))\n\ntest_set = apple_test.values\ntest_set = np.reshape(test_set, (len(test_set), 1))\ntest_set = sc.transform(test_set)\ntest_set = np.reshape(test_set, (len(test_set),))","6972f18b":"# split a univariate sequence into samples\ndef split_sequence(sequence, n_steps_in, n_steps_out):\n    X, y = list(), list()\n    for i in range(len(sequence)):\n        # find the end of this pattern\n        end_ix = i + n_steps_in\n        out_end_ix = end_ix + n_steps_out\n        # check if we are beyond the sequence\n        if out_end_ix > len(sequence):\n            break\n        # gather input and output parts of the pattern\n        seq_x, seq_y = sequence[i:end_ix], sequence[end_ix:out_end_ix]\n        X.append(seq_x)\n        y.append(seq_y)\n    return np.array(X), np.array(y)\n\nX_train, y_train = split_sequence(train_set, N_STEPS_IN, N_STEPS_OUT)\nX_test, y_test = split_sequence(test_set, N_STEPS_IN, N_STEPS_OUT)","619ef3fa":"X_train.shape","ad8a605b":"# reshaping X_train and X_test\nX_train = X_train.reshape((X_train.shape[0], X_train.shape[1], N_FEATURES))\nX_test = X_test.reshape((X_test.shape[0], X_test.shape[1], N_FEATURES))","b44b21ce":"# univariate multi-step vector-output stacked lstm example\nfrom keras.models import Sequential\nfrom keras.layers import LSTM\nfrom keras.layers import Dense\n\nmodel = Sequential()\nmodel.add(LSTM(100, activation='relu', return_sequences=True, input_shape=(N_STEPS_IN, N_FEATURES)))\nmodel.add(LSTM(100, activation='relu'))\nmodel.add(Dense(N_STEPS_OUT))\nmodel.compile(optimizer='adam', loss='mse')\n\nfit = model.fit(X_train, y_train, epochs=50)\n","94797c34":"\n# predict\npredicted_price = model.predict(X_test)\npredicted_price = sc.inverse_transform(predicted_price)[0]\npredicted_price","e67b2b8c":"y_test_ = sc.inverse_transform(y_test)[0]\napple_test[-N_STEPS_OUT:].values","cf074e5f":"from matplotlib import pyplot as plt\n\nplt.figure(figsize=(25,15), dpi=80, facecolor='w', edgecolor='k')\nax = plt.gca()\nax.set_ylim([50,400])\nplt.plot(y_test_, color = 'red', label = 'Real  Price')\nplt.plot(predicted_price, color = 'blue', label = 'Predicted Apple Price')\nplt.title('Apple Price Prediction', fontsize=40)\napple_test_reset = apple_test[-N_STEPS_OUT:].reset_index()\nx=apple_test_reset.index\nlabels = apple_test_reset['Date']\nplt.xticks(x, labels, rotation = 'vertical')\nfor tick in ax.xaxis.get_major_ticks():\n    tick.label1.set_fontsize(18)\nfor tick in ax.yaxis.get_major_ticks():\n    tick.label1.set_fontsize(18)\nplt.xlabel('Time', fontsize=40)\nplt.ylabel('Apple Price(USD)', fontsize=40)\nplt.legend(loc=2, prop={'size': 25})\nplt.show()\n\n\ntrace1 = go.Scatter(x=labels, y=y_test_, name= 'Actual Price',\n                   line = dict(color = ('rgb(66, 244, 155)'),width = 2))\ntrace2 = go.Scatter(x=labels, y=predicted_price, name= 'Predicted Price',\n                   line = dict(color = ('rgb(244, 146, 65)'),width = 2))\ndata = [trace1, trace2]\nlayout = dict(title = 'Comparison of true prices (on the test dataset) with prices our model predicted, by dates',\n             xaxis = dict(title = 'Date'), yaxis = dict(title = 'Price, USD'))\nfig = dict(data=data, layout=layout)\npy.offline.iplot(fig, filename='results_demonstrating2')\n\n\n","5446d859":"trace1 = go.Scatter(\n    x = np.arange(0, len(fit.history['loss']), 1),\n    y = fit.history['loss'],\n    mode = 'lines',\n    name = 'Train loss',\n    line = dict(color=('rgb(66, 244, 155)'), width=2, dash='dash')\n)\n\n\ndata = [trace1]\nlayout = dict(title = 'Train loss during training',\n              xaxis = dict(title = 'Epoch number'), yaxis = dict(title = 'Loss'))\nfig = dict(data=data, layout=layout)\npy.offline.iplot(fig, filename='training_process')","e50b990f":"from sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import accuracy_score\nprint(mean_squared_error(y_test_,predicted_price))","a1f2b649":"score = model.evaluate(X_test, y_test, verbose=1)\nprint(\"%s: %.2f%%\" % (model.metrics_names[0], score*100))","fb7ba025":"from keras.layers import Bidirectional\n\nmodel = Sequential()\nmodel.add(Bidirectional(LSTM(100, activation='relu'), input_shape=(N_STEPS_IN, N_FEATURES)))\nmodel.add(Dense(N_STEPS_OUT))\nmodel.compile(optimizer='adam', loss='mse')\n\nfit = model.fit(X_train, y_train, epochs=50)","aac73456":"# predict\npredicted_price = model.predict(X_test)\npredicted_price = sc.inverse_transform(predicted_price)[0]\npredicted_price","0eb72e35":"y_test_ = sc.inverse_transform(y_test)[0]\napple_test[-N_STEPS_OUT:].values","b5f85fdb":"from matplotlib import pyplot as plt\n\nplt.figure(figsize=(25,15), dpi=80, facecolor='w', edgecolor='k')\nax = plt.gca()\nax.set_ylim([50,400])\nplt.plot(y_test_, color = 'red', label = 'Real  Price')\nplt.plot(predicted_price, color = 'blue', label = 'Predicted Apple Price')\nplt.title('Apple Price Prediction', fontsize=40)\napple_test_reset = apple_test[-N_STEPS_OUT:].reset_index()\nx=apple_test_reset.index\nlabels = apple_test_reset['Date']\nplt.xticks(x, labels, rotation = 'vertical')\nfor tick in ax.xaxis.get_major_ticks():\n    tick.label1.set_fontsize(18)\nfor tick in ax.yaxis.get_major_ticks():\n    tick.label1.set_fontsize(18)\nplt.xlabel('Time', fontsize=40)\nplt.ylabel('Apple Price(USD)', fontsize=40)\nplt.legend(loc=2, prop={'size': 25})\nplt.show()\n\n\ntrace1 = go.Scatter(x=labels, y=y_test_, name= 'Actual Price',\n                   line = dict(color = ('rgb(66, 244, 155)'),width = 2))\ntrace2 = go.Scatter(x=labels, y=predicted_price, name= 'Predicted Price',\n                   line = dict(color = ('rgb(244, 146, 65)'),width = 2))\ndata = [trace1, trace2]\nlayout = dict(title = 'Comparison of true prices (on the test dataset) with prices our model predicted, by dates',\n             xaxis = dict(title = 'Date'), yaxis = dict(title = 'Price, USD'))\nfig = dict(data=data, layout=layout)\npy.offline.iplot(fig, filename='results_demonstrating2')","88d0ba35":"trace1 = go.Scatter(\n    x = np.arange(0, len(fit.history['loss']), 1),\n    y = fit.history['loss'],\n    mode = 'lines',\n    name = 'Train loss',\n    line = dict(color=('rgb(66, 244, 155)'), width=2, dash='dash')\n)\n\n\ndata = [trace1]\nlayout = dict(title = 'Train loss during training',\n              xaxis = dict(title = 'Epoch number'), yaxis = dict(title = 'Loss'))\nfig = dict(data=data, layout=layout)\npy.offline.iplot(fig, filename='training_process')","79ef6282":"score = model.evaluate(X_test, y_test, verbose=1)\nprint(\"%s: %.2f%%\" % (model.metrics_names[0], score*100))\nprint(mean_squared_error(y_test_,predicted_price))\n","1777ee79":"# define model \nmodel = Sequential()\nmodel.add(LSTM(100, activation='relu'))\nmodel.add(Dense(N_STEPS_OUT))\nmodel.compile(optimizer='adam', loss='mse')\n\nfit = model.fit(X_train, y_train, epochs=50)\n\n","665494ca":"# predict\npredicted_price = model.predict(X_test)\npredicted_price = sc.inverse_transform(predicted_price)[0]\npredicted_price","154b032e":"from matplotlib import pyplot as plt\n\nplt.figure(figsize=(25,15), dpi=80, facecolor='w', edgecolor='k')\nax = plt.gca()\nax.set_ylim([50,400])\nplt.plot(y_test_, color = 'red', label = 'Real  Price')\nplt.plot(predicted_price, color = 'blue', label = 'Predicted Apple Price')\nplt.title('Apple Price Prediction', fontsize=40)\napple_test_reset = apple_test[-N_STEPS_OUT:].reset_index()\nx=apple_test_reset.index\nlabels = apple_test_reset['Date']\nplt.xticks(x, labels, rotation = 'vertical')\nfor tick in ax.xaxis.get_major_ticks():\n    tick.label1.set_fontsize(18)\nfor tick in ax.yaxis.get_major_ticks():\n    tick.label1.set_fontsize(18)\nplt.xlabel('Time', fontsize=40)\nplt.ylabel('Apple Price(USD)', fontsize=40)\nplt.legend(loc=2, prop={'size': 25})\nplt.show()\n\n\ntrace1 = go.Scatter(x=labels, y=y_test_, name= 'Actual Price',\n                   line = dict(color = ('rgb(66, 244, 155)'),width = 2))\ntrace2 = go.Scatter(x=labels, y=predicted_price, name= 'Predicted Price',\n                   line = dict(color = ('rgb(244, 146, 65)'),width = 2))\ndata = [trace1, trace2]\nlayout = dict(title = 'Comparison of true prices (on the test dataset) with prices our model predicted, by dates',\n             xaxis = dict(title = 'Date'), yaxis = dict(title = 'Price, USD'))\nfig = dict(data=data, layout=layout)\npy.offline.iplot(fig, filename='results_demonstrating2')","965dc418":"trace1 = go.Scatter(\n    x = np.arange(0, len(fit.history['loss']), 1),\n    y = fit.history['loss'],\n    mode = 'lines',\n    name = 'Train loss',\n    line = dict(color=('rgb(66, 244, 155)'), width=2, dash='dash')\n)\n\n\ndata = [trace1]\nlayout = dict(title = 'Train loss during training',\n              xaxis = dict(title = 'Epoch number'), yaxis = dict(title = 'Loss'))\nfig = dict(data=data, layout=layout)\npy.offline.iplot(fig, filename='training_process')","061794b5":"score = model.evaluate(X_test, y_test, verbose=1)\nprint(\"%s: %.2f%%\" % (model.metrics_names[0], score*100))\nprint(mean_squared_error(y_test_,predicted_price))\n","a9b8a8bd":"from keras.layers import Flatten\nfrom keras.layers import TimeDistributed\nfrom keras.layers.convolutional import Conv1D\nfrom keras.layers.convolutional import MaxPooling1D\n\nn_features = 1\nn_seq = 15\nn_steps = 2\n\nmodel = Sequential()\nmodel.add(TimeDistributed(Conv1D(filters=64, kernel_size=1, activation='relu'), input_shape=(None, n_steps,n_features)))\nmodel.add(TimeDistributed(MaxPooling1D(pool_size=2)))\nmodel.add(TimeDistributed(Flatten()))\nmodel.add(LSTM(100, activation='relu'))\nmodel.add(Dense(N_STEPS_OUT))\nmodel.compile(optimizer='adam', loss='mse')\n\n\nX_train_2 = X_train.reshape((X_train.shape[0], n_seq, n_steps, n_features))\nfit = model.fit(X_train_2, y_train, epochs=50)","48031359":"# predict\nn_features = 1\nn_seq = 15\nn_steps = 2\nX_test_2 = X_test.reshape((X_test.shape[0], n_seq, n_steps, n_features))\npredicted_price = model.predict(X_test_2)\npredicted_price = sc.inverse_transform(predicted_price)[0]\npredicted_price","cc57766c":"from matplotlib import pyplot as plt\n\nplt.figure(figsize=(25,15), dpi=80, facecolor='w', edgecolor='k')\nax = plt.gca()\nax.set_ylim([50,400])\nplt.plot(y_test_, color = 'red', label = 'Real  Price')\nplt.plot(predicted_price, color = 'blue', label = 'Predicted Apple Price')\nplt.title('Apple Price Prediction', fontsize=40)\napple_test_reset = apple_test[-N_STEPS_OUT:].reset_index()\nx=apple_test_reset.index\nlabels = apple_test_reset['Date']\nplt.xticks(x, labels, rotation = 'vertical')\nfor tick in ax.xaxis.get_major_ticks():\n    tick.label1.set_fontsize(18)\nfor tick in ax.yaxis.get_major_ticks():\n    tick.label1.set_fontsize(18)\nplt.xlabel('Time', fontsize=40)\nplt.ylabel('Apple Price(USD)', fontsize=40)\nplt.legend(loc=2, prop={'size': 25})\nplt.show()\n\n\ntrace1 = go.Scatter(x=labels, y=y_test_, name= 'Actual Price',\n                   line = dict(color = ('rgb(66, 244, 155)'),width = 2))\ntrace2 = go.Scatter(x=labels, y=predicted_price, name= 'Predicted Price',\n                   line = dict(color = ('rgb(244, 146, 65)'),width = 2))\ndata = [trace1, trace2]\nlayout = dict(title = 'Comparison of true prices (on the test dataset) with prices our model predicted, by dates',\n             xaxis = dict(title = 'Date'), yaxis = dict(title = 'Price, USD'))\nfig = dict(data=data, layout=layout)\npy.offline.iplot(fig, filename='results_demonstrating2')","54d2016e":"trace1 = go.Scatter(\n    x = np.arange(0, len(fit.history['loss']), 1),\n    y = fit.history['loss'],\n    mode = 'lines',\n    name = 'Train loss',\n    line = dict(color=('rgb(66, 244, 155)'), width=2, dash='dash')\n)\n\n\ndata = [trace1]\nlayout = dict(title = 'Train loss during training',\n              xaxis = dict(title = 'Epoch number'), yaxis = dict(title = 'Loss'))\nfig = dict(data=data, layout=layout)\npy.offline.iplot(fig, filename='training_process')","2b1304f6":"score = model.evaluate(X_test_2, y_test, verbose=1)\nprint(\"%s: %.2f%%\" % (model.metrics_names[0], score*100))\nprint(mean_squared_error(y_test_,predicted_price))\n","0dcf3731":"from keras.layers import ConvLSTM2D\n\n# define model\nmodel = Sequential()\nmodel.add(ConvLSTM2D(filters=64, kernel_size=(1,2), activation='relu', input_shape=(n_seq, 1, n_steps, n_features)))\nmodel.add(Flatten())\nmodel.add(Dense(N_STEPS_OUT))\nmodel.compile(optimizer='adam', loss='mse')\n\nX_train_2 = X_train.reshape((X_train.shape[0], n_seq, 1, n_steps, n_features))\nfit = model.fit(X_train_2, y_train, epochs=50)","ecc08d28":"X_test_2 = X_test.reshape((X_test.shape[0], n_seq, 1, n_steps, n_features))\npredicted_price = model.predict(X_test_2)\npredicted_price = sc.inverse_transform(predicted_price)[0]\npredicted_price","c6bc21b7":"from matplotlib import pyplot as plt\n\nplt.figure(figsize=(25,15), dpi=80, facecolor='w', edgecolor='k')\nax = plt.gca()\nax.set_ylim([50,400])\nplt.plot(y_test_, color = 'red', label = 'Real  Price')\nplt.plot(predicted_price, color = 'blue', label = 'Predicted Apple Price')\nplt.title('Apple Price Prediction', fontsize=40)\napple_test_reset = apple_test[-N_STEPS_OUT:].reset_index()\nx=apple_test_reset.index\nlabels = apple_test_reset['Date']\nplt.xticks(x, labels, rotation = 'vertical')\nfor tick in ax.xaxis.get_major_ticks():\n    tick.label1.set_fontsize(18)\nfor tick in ax.yaxis.get_major_ticks():\n    tick.label1.set_fontsize(18)\nplt.xlabel('Time', fontsize=40)\nplt.ylabel('Apple Price(USD)', fontsize=40)\nplt.legend(loc=2, prop={'size': 25})\nplt.show()\n\n\ntrace1 = go.Scatter(x=labels, y=y_test_, name= 'Actual Price',\n                   line = dict(color = ('rgb(66, 244, 155)'),width = 2))\ntrace2 = go.Scatter(x=labels, y=predicted_price, name= 'Predicted Price',\n                   line = dict(color = ('rgb(244, 146, 65)'),width = 2))\ndata = [trace1, trace2]\nlayout = dict(title = 'Comparison of true prices (on the test dataset) with prices our model predicted, by dates',\n             xaxis = dict(title = 'Date'), yaxis = dict(title = 'Price, USD'))\nfig = dict(data=data, layout=layout)\npy.offline.iplot(fig, filename='results_demonstrating2')","fc0658ac":"trace1 = go.Scatter(\n    x = np.arange(0, len(fit.history['loss']), 1),\n    y = fit.history['loss'],\n    mode = 'lines',\n    name = 'Train loss',\n    line = dict(color=('rgb(66, 244, 155)'), width=2, dash='dash')\n)\n\n\ndata = [trace1]\nlayout = dict(title = 'Train loss during training',\n              xaxis = dict(title = 'Epoch number'), yaxis = dict(title = 'Loss'))\nfig = dict(data=data, layout=layout)\npy.offline.iplot(fig, filename='training_process')","7e8b6728":"score = model.evaluate(X_test_2, y_test, verbose=1)\nprint(\"%s: %.2f%%\" % (model.metrics_names[0], score*100))\nprint(mean_squared_error(y_test_,predicted_price))\n","af323fd5":"**Evaluation Function ConvLSTM**","7bf43cf9":"**Evaluasi metode LSTM (MSE)**","276591f4":"**Showing outliers in each column of data**","07e5460a":"**Showing Characteristic of Stock Price (Observed, Residual, Trend, Seasonal)**","8db46f51":"**Model Vanila LSTM**","dd42667a":"**Model Stacked LSTM**\nMenggunakan 2 layer LSTM dengan activation function relu","504bf832":"**Model ConvLSTM**","3878d694":"**Evalution Function Biderectional LSTM**","d9a6e1e4":"**Evaluation Vanila LSTM**","4f63355a":"**Model CNN LSTM**","e265384d":"**Show the corelation each attribute**","2f76a1af":"**Evaluation Function CNNLSTM**","e5172a73":"**Model LSTM Biderectional**","a252d7d2":"**Normalize the data**","a11c4aed":"**Split the Training and test set**","a76bde40":"**Set the step in and step out**","eef33c46":"**Showing Distribucy each attribute of data**"}}