{"cell_type":{"a42cc23d":"code","1c4a88ad":"code","cd952b39":"code","8550151a":"code","ea38eae8":"code","59c4f403":"code","85949e17":"code","90ca2acb":"code","9ec12961":"code","5fb70d73":"code","0075a6f0":"code","142391fc":"code","507b8045":"code","c460c2f9":"code","72769b9d":"code","32d2c20d":"code","11de94ac":"code","d92d73bf":"code","c19cae6c":"markdown","26299489":"markdown","97918a7c":"markdown","5825ccb1":"markdown","af775493":"markdown","accca78e":"markdown","53240606":"markdown","07db0fa6":"markdown","28723334":"markdown"},"source":{"a42cc23d":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport skimage.io as sk\nimport pathlib\nimport matplotlib.pyplot as plt\n\nimport os\nimport time","1c4a88ad":"DATA_FOLDER=pathlib.Path(\"\/kaggle\/input\/flower-color-images\/flower_images\/flower_images\")\ndata_set = pd.read_csv(\"\/kaggle\/input\/flower-color-images\/flower_images\/flower_images\/flower_labels.csv\")","cd952b39":"EPOCHS = 30\nBS = 15\nINIT_LR = 1e-3\nTOT_IMG = data_set.count()[0]\nTOT_BATCH = int(TOT_IMG\/BS)\nCLASSES = {0:'phlox',1:'rose',2:'calendula',3:'iris',4:'leucanthemum maximum', 5:'bellflower',6:'viola',7:'rudbeckia laciniata (Goldquelle)',\n          8:'peony',9:'aquilegia'}\nCLASS_ARR = [0,1,2,3,4,5,6,7,8,9]","8550151a":"print(sk.imread('\/kaggle\/input\/flower-color-images\/flower_images\/flower_images\/0172.png').shape)\nsk.imshow('\/kaggle\/input\/flower-color-images\/flower_images\/flower_images\/0172.png')","ea38eae8":"#decoding Image using TF helper functions.\ndef decode_img(img):\n    # convert the compressed string to a 3D uint8 tensor\n    img = tf.image.decode_png(img, channels=3)\n    img = tf.image.convert_image_dtype(img, tf.float32)\n    img = tf.image.resize(img,[224,224])\n    return img","59c4f403":"# Extract Label from the image and dataset\ndef get_label(img_name):\n    lab = (data_set.loc[data_set['file']==img_name]['label']).to_string(index=False)\n    ilab= np.array([lab]).astype(np.int32)\n    ret =np.equal(ilab,CLASS_ARR)\n    return ret","85949e17":"#https:\/\/www.tensorflow.org\/tutorials\/load_data\/images\n# \ndef process_image(image_path):\n    parts = tf.strings.split(image_path, os.path.sep)    \n    image_name = parts[-1]\n    label = tf.py_function(func=get_label,inp=[image_name], Tout=tf.bool)\n    img = tf.io.read_file(image_path)\n    img = decode_img(img)\n    return img, label","90ca2acb":"# Using tf.Data to process dataset for this experiment.\nlist_ds= tf.data.Dataset.list_files(str(DATA_FOLDER\/'*.png'))\nlabeled_ds = list_ds.map(process_image,num_parallel_calls=tf.data.experimental.AUTOTUNE)\nds = labeled_ds.shuffle(buffer_size=TOT_IMG)\nds = ds.batch(BS)\nds = ds.repeat()\n#image_batch, label_batch = next(iter(ds))\n\n#for img,label in labeled_ds.take(1):\n#    tf.print(\"IMAGE:\", img.numpy().shape)\n#    tf.print(\"LABEL:\",label.numpy())\n    ","9ec12961":"def show_image_batch(image_batch, image_label):\n    plt.figure(figsize=(10,10))\n    for n in range(BS):\n        ax = plt.subplot(3,5,n+1)\n        plt.imshow(image_batch[n])\n        #print(CLASSES[(np.where(image_label[n])[0][0])])\n        plt.title(CLASSES[(np.where(image_label[n])[0][0])])\n        plt.axis('off')","5fb70d73":"image_batch, label_batch = next(iter(ds))\nshow_image_batch(image_batch.numpy(), label_batch.numpy())","0075a6f0":"from tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras.layers import Input, AveragePooling2D, Flatten, Dense, Dropout\nfrom tensorflow.keras.models import Model\nrsntBase = ResNet50(weights='imagenet', include_top=False, input_tensor=Input(shape=(224, 224, 3)))\n#rsntBase.summary()\n\n# define a custom model based on ResNet50\nmodel = rsntBase.output\nmodel = AveragePooling2D(pool_size=(7,7))(model)\nmodel = Flatten(name=\"flatten\")(model)\nmodel = Dense(1024,activation='relu')(model)\nmodel = Dropout(0.5)(model)\nmodel = Dense(1024,activation='relu')(model)\nmodel = Dropout(0.5)(model)\nmodel = Dense(len(CLASS_ARR), activation='softmax')(model)\n\nclfModel = Model(inputs=rsntBase.input, outputs=model)\n\n# freezing all layers except for last Conv block (Conv5)\nfor _ in rsntBase.layers:\n    if not _.name.startswith('conv5_'):\n        _.trainable=False\n    \nclfModel.summary()","142391fc":"# Define Optimizer\noptimizer = tf.keras.optimizers.Adam(lr=INIT_LR)","507b8045":"#define training Loss\nfrom tensorflow.keras.losses import categorical_crossentropy","c460c2f9":"\ndef step_function(X,y):\n    with tf.GradientTape() as tape:\n        pred = clfModel(X)\n        loss = categorical_crossentropy(y, pred,from_logits=True)\n        \n    grads = tape.gradient(loss, clfModel.trainable_variables)\n    optimizer.apply_gradients(zip(grads,clfModel.trainable_variables))\n    return loss    ","72769b9d":"all_loss = []\ntrain_accuracy = []\ndef train(datasetx, epochs):\n    for epoch in range(0, epochs):\n        start = time.time()\n        epoch_avg_loss = tf.keras.metrics.Mean()\n        epoch_accuracy = tf.keras.metrics.CategoricalCrossentropy()\n        tds = iter(datasetx)\n        for i in range(TOT_BATCH):\n            image_batch, label_batch = next(tds)\n            loss = step_function(image_batch,label_batch)\n            epoch_avg_loss.update_state(loss)\n            epoch_accuracy.update_state(label_batch,clfModel(image_batch, training=True))\n        all_loss.append(epoch_avg_loss.result().numpy())\n        train_accuracy.append(epoch_accuracy.result().numpy())\n        if epoch % 2 == 0:\n            print ('Time for epoch {} is {} sec'.format(epoch + 1, time.time()-start), epoch_avg_loss.result().numpy(),epoch_accuracy.result().numpy())            ","32d2c20d":"train(ds, EPOCHS)","11de94ac":"fig, axes = plt.subplots(2, sharex=True, figsize=(12, 8))\nfig.suptitle('Training Metrics')\n\naxes[0].set_ylabel(\"Loss\", fontsize=14)\naxes[0].plot(all_loss)\n\naxes[1].set_ylabel(\"Accuracy\", fontsize=14)\naxes[1].set_xlabel(\"Epoch\", fontsize=14)\naxes[1].plot(train_accuracy)\nplt.show()","d92d73bf":"for img,label in ds.take(1):\n    plt.figure(figsize=(20,20))\n    pred_logits = clfModel(img.numpy(), training=False)\n    pred = tf.argmax(pred_logits, axis=1, output_type=tf.int32).numpy()\n    print(pred)\n    for n in range(BS):\n        ax = plt.subplot(3,5,n+1)\n        plt.imshow(img[n].numpy())\n        plt.title(\"Actual: {}\\nPredicted: {}\".format(CLASSES[(np.where(label[n])[0][0])],CLASSES[pred[n]]))\n        plt.axis('off')\n        \n    #tf.print(\"IMAGE:\", img.numpy().shape)\n    #tf.print(\"LABEL:\",label.numpy())\n    #clfModel(img.numpy(), training=False)\n    ","c19cae6c":"### Load Data\nusing dataset - https:\/\/www.kaggle.com\/olgabelitskaya\/flower-color-images\n> The content is very simple: 210 images (128x128x3) with 10 species of flowering plants and the file with labels flower-labels.csv. Photo files are in the .png format and the labels are the integers.\n>\n> Label => Name\n0 => phlox; 1 => rose; 2 => calendula; 3 => iris; 4 => leucanthemum maximum;\n5 => bellflower; 6 => viola; 7 => rudbeckia laciniata (Goldquelle); 8 => peony; 9 => aquilegia.","26299489":"### Training using step_function() - Gradient Tape","97918a7c":"### Implementing TensorFlow Gradient Tape for custom training.","5825ccb1":"### Model Hyperparameters","af775493":"### Accuracy Plot - \n**Issue is that the resnet is Only able to predict one class - **\nHence the Accuracy is only ~14%\n\n# Question - How to solve this ResNet50 training problem??","accca78e":"# TensorFlow ResNet50 - Transfer Learning\n### Experiment with - \n* #### Transfer Learning\n* #### TF.Data\n* #### TF.GradientTape - Custom training loop","53240606":"### Data preprocessing\nFirst defining below helper functions","07db0fa6":"## ResNet Implementation","28723334":"### Image Pre-Processing with tf.Dataset\nUsing process_image() function defined above"}}