{"cell_type":{"003c15d8":"code","9e2a2c8d":"code","d222ff13":"code","eef8dbc3":"code","f17c6d47":"code","c0cd05d7":"code","7e634ccb":"code","c62ce500":"code","f0b2d15d":"code","8fe755de":"code","d7d2ef57":"code","1223d5d8":"code","8b8e46c2":"code","6f34e10c":"code","3463943e":"code","eee78fc0":"code","2ea6bca1":"code","7077e6a2":"code","5e506a15":"code","5454b1d9":"code","11c25fdb":"code","eda5dc71":"code","03b85679":"code","2243667b":"code","e8102c17":"code","3303e1a1":"code","7fbf70e4":"code","179713a7":"code","14351f70":"code","0e90ba36":"code","6f64c9be":"code","78d599e1":"code","39dcc403":"code","6664a54f":"markdown","6c6572d3":"markdown","4087deec":"markdown","e29a6da8":"markdown","460c4eeb":"markdown","3f3aac90":"markdown","265e39bc":"markdown","8fda3c67":"markdown","cf98a276":"markdown","00c048a4":"markdown","43a9f0f6":"markdown","67f3db32":"markdown","a6593141":"markdown","f6db2470":"markdown","d2e243fb":"markdown","771e2fdd":"markdown","78365e79":"markdown","21ab253a":"markdown","df231b5c":"markdown","32606bdf":"markdown","7ac0fd3f":"markdown","cb7b3dff":"markdown","92f194a4":"markdown"},"source":{"003c15d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9e2a2c8d":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split \nfrom keras.layers import Dense\nfrom keras.models import Sequential\n%matplotlib inline","d222ff13":"data=pd.read_csv('\/kaggle\/input\/ipl-complete-dataset-20082020\/IPL Matches 2008-2020.csv')\ndata1=pd.read_csv('\/kaggle\/input\/ipl-complete-dataset-20082020\/IPL Ball-by-Ball 2008-2020.csv')\n","eef8dbc3":"data.head()","f17c6d47":"data1.head()","c0cd05d7":"data.describe()","7e634ccb":"data1.describe()","c62ce500":"data.isnull().sum()","f0b2d15d":"data1.isnull().sum()","8fe755de":"team1=data['team1']\nteam2=data['team2']\nfor x in range(len(data)):\n    if team1[x]==\"Rising Pune Supergiants\":\n        team1[x]=\"Rising Pune Supergiant\"\n    if team2[x]==\"Rising Pune Supergiants\":\n        team2[x]=\"Rising Pune Supergiant\"\ndata['team1']=team1\ndata['team2']=team2\n\ncity=data['city']\nfor x in range(len(data)):\n    if city[x]==\"Bangalore\":\n        city[x]=\"Bengaluru\"\ndata['city']=city\n\ndata.venue.replace({'Feroz Shah Kotla Ground':'Feroz Shah Kotla',\n                    'M Chinnaswamy Stadium':'M. Chinnaswamy Stadium',\n                    'MA Chidambaram Stadium, Chepauk':'M.A. Chidambaram Stadium',\n                     'M. A. Chidambaram Stadium':'M.A. Chidambaram Stadium',\n                     'Punjab Cricket Association IS Bindra Stadium, Mohali':'Punjab Cricket Association Stadium',\n                     'Punjab Cricket Association Stadium, Mohali':'Punjab Cricket Association Stadium',\n                     'IS Bindra Stadium':'Punjab Cricket Association Stadium',\n                    'Rajiv Gandhi International Stadium, Uppal':'Rajiv Gandhi International Stadium',\n                    'Rajiv Gandhi Intl. Cricket Stadium':'Rajiv Gandhi International Stadium'},regex=True,inplace=True)","d7d2ef57":"df=data['city'].fillna('')\ntop_ten_cities=df.value_counts()[:10]\ntop_ten_labels=top_ten_cities.index\nfig, ax = plt.subplots(figsize=(10,8))\ng=sns.barplot(x=top_ten_labels,y=top_ten_cities)\ng.set_ylabel(\"No. of Matches\")\ng.set_xlabel(\"City\")\ng.set_title(\"Top Ten Cities Used for IPL match\")","1223d5d8":"df=data['winner'].fillna('No Result')\nmost_matches_won=df.value_counts()[:15]\nmost_matches_won_team=most_matches_won.index\nfig, ax = plt.subplots(figsize=(10,8))\ng=sns.barplot(x=most_matches_won,y=most_matches_won_team)\ng.set_ylabel(\"Team\")\ng.set_xlabel(\"No. of Matches\")\ng.set_title(\"Team who has won most of the matches\")","8b8e46c2":"neutral=data[data['neutral_venue']==1][['winner','player_of_match']]\nfig, ax = plt.subplots(figsize=(10,5))\ng=sns.barplot(x=neutral['winner'].value_counts(),y=neutral['winner'].value_counts().index)\ng.set_ylabel(\"Teams\")\ng.set_xlabel(\"No. of Matches\")\ng.set_title(\"Most Matches won on a neutral venue\")","6f34e10c":"plt.figure(figsize=(12,8))\nax=sns.countplot(y=\"toss_winner\", data=data, orient=\"h\", hue=\"toss_decision\")\nplt.xlabel(\"Toss decision\")","3463943e":"toss_winner=data['toss_winner']\nwinner=data['winner']\nwon={'Toss Winner Wins Match':0,'Toss Winner Loses Match':0}\nfor x in range(len(data)):\n    if toss_winner[x]==winner[x]:\n        won['Toss Winner Wins Match']+=1\n    else:\n        won['Toss Winner Loses Match']+=1\nli,li1=[],[]\nfor x,y in won.items():\n    li.append(x)\n    li1.append(y)\nfig,(ax1,ax2)=plt.subplots(2,figsize=(7,8))\ng=sns.barplot(x=li1,y=li,ax=ax1)\ng.set_xlabel(\"No. of Matches\")\ng.set_title(\"No. of times Toss and Match won\")\n\nteam_name=data['team1'].unique()\nteamdic=dict.fromkeys(team_name,0)\nfor x in range(len(data)):\n    if toss_winner[x]==winner[x]:\n        for y in team_name:\n            if y==toss_winner[x]:\n                teamdic[y]+=1\nli=[]\nli1=[]\nfor x,y in teamdic.items():\n    li.append(x)\n    li1.append(y)\nprint(li,li1)\ng1=sns.barplot(x=li1,y=li,ax=ax2)\ng1.set_ylabel(\"Teams\")\ng1.set_xlabel(\"No. of Matches\")\ng1.set_title(\"No. of times Toss and Match won Teamwise\")\nplt.tight_layout()","eee78fc0":"fig,ax=plt.subplots(figsize=(10,5))\ng=sns.barplot(x=data1['batsman_runs'].value_counts().index,y=data1['batsman_runs'].value_counts())\ng.set_xlabel('Run per ball')\ng.set_ylabel('Total scored in all the seasons')\ng.set_title('Runs per ball for all seasons')\n","2ea6bca1":"df=data1['dismissal_kind'].fillna('')\ndismissals=df.value_counts()[1:6]\nfig, ax = plt.subplots(figsize=(10,5))\ng=sns.barplot(x=dismissals.values,y=dismissals.index)\ng.set_ylabel(\"Type of Dismissals\")\ng.set_xlabel(\"Number of Dismissals\")\ng.set_title(\"Most type of Dismissals done\")\n","7077e6a2":"top_ten_wicket_takers=data1[data1['is_wicket']==1]['bowler'].value_counts()[:10]\ntop_ten_dotball_bowled=data1[data1['batsman_runs']==0]['bowler'].value_counts()[:10]\nfig,(ax1,ax2)=plt.subplots(2,figsize=(8,8))\ng1=sns.barplot(x=top_ten_wicket_takers.values,y=top_ten_wicket_takers.index,ax=ax1)\ng1.set_xlabel('Wickets taken')\ng1.set_ylabel('Bowlers')\ng1.set_title('Most wickets taken by bowlers')\ng2=sns.barplot(x=top_ten_dotball_bowled.values,y=top_ten_dotball_bowled.index,ax=ax2)\ng2.set_xlabel('Total dot balls bowled')\ng2.set_ylabel('Bowled')\ng2.set_title('Most dot balls bowled by a bowler')\nplt.tight_layout()","5e506a15":"most_noballs_bowled=data1[data1['extras_type']=='noballs']['bowler'].value_counts()[:10]\nmost_wides_bowled=data1[data1['extras_type']=='wides']['bowler'].value_counts()[:10]\nfig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))\ng1=sns.barplot(x=most_noballs_bowled.values,y=most_noballs_bowled.index,ax=ax1)\ng1.set_ylabel('Bowlers')\ng1.set_xlabel('Noballs Bowled')\ng1.set_title('Most Noballs bowled by bowlers')\ng2=sns.barplot(x=most_wides_bowled.values,y=most_wides_bowled.index,ax=ax2)\ng2.set_ylabel('Bowlers')\ng2.set_xlabel('Wides Bowled')\ng2.set_title('Most Wides bowled by bowlers')\nplt.tight_layout()","5454b1d9":"top_ten_runs_scored=data1[data1['batsman_runs']!=0]['batsman'].value_counts()[:10]\ntop_ten_six_scored=data1[data1['batsman_runs']==6]['batsman'].value_counts()[:10]\ntop_ten_four_scored=data1[data1['batsman_runs']==4]['batsman'].value_counts()[:10]\nfig,(ax1,ax2,ax3)=plt.subplots(1,3,figsize=(10,5))\ng1=sns.barplot(x=top_ten_runs_scored.values,y=top_ten_runs_scored.index,ax=ax1)\ng1.set_xlabel('Runs scored')\ng1.set_ylabel('Batsmans')\ng1.set_title('Most runs scored by a Batsman')\n\ng2=sns.barplot(x=top_ten_six_scored.values,y=top_ten_six_scored.index,ax=ax2)\ng2.set_xlabel('Number of Sixes')\ng2.set_ylabel('Batsman')\ng2.set_title('Most Sixes scored by a batsman')\n\ng3=sns.barplot(x=top_ten_four_scored.values,y=top_ten_four_scored.index,ax=ax3)\ng3.set_xlabel('Number of Fours')\ng3.set_ylabel('Batsman')\ng3.set_title('Most Fours scored by a batsman')\nplt.tight_layout()","11c25fdb":"most_runouts=data1[data1['dismissal_kind']=='run out']['fielder'].value_counts()[:10]\nmost_catches=data1[data1['dismissal_kind']=='caught']['fielder'].value_counts()[:10]\nfig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))\ng1=sns.barplot(x=most_runouts.values,y=most_runouts.index,ax=ax1)\ng1.set_ylabel('Fielders')\ng1.set_xlabel('No of Runouts')\ng1.set_title('Most Runouts done by a fielder')\ng2=sns.barplot(x=most_catches.values,y=most_catches.index,ax=ax2)\ng2.set_ylabel('Fielders')\ng2.set_xlabel('No of Catches')\ng2.set_title('Most Catches done by a fielder')\nplt.tight_layout()","eda5dc71":"df=data['player_of_match'].fillna('')\ntop_ten_players=df.value_counts()[:10]\ntop_ten_labels=top_ten_players.index\nfig, ax = plt.subplots(figsize=(10,5))\ng=sns.barplot(x=top_ten_players,y=top_ten_labels)\ng.set_ylabel(\"Players\")\ng.set_xlabel(\"No. of Matches\")\ng.set_title(\"Most won Player of the Match\")","03b85679":"cities_venues=['city','venue']\nfor feature in cities_venues:\n    temp=data[feature].value_counts()\/len(data)\n    temp_df=temp[temp>0.01].index\n    data[feature]=np.where(data[feature].isin(temp_df),data[feature],'Rare Category')","2243667b":"#Abu Dhabi dropped\nlocation=pd.get_dummies(data['city'],drop_first=True)\ndata=pd.concat([data,location],axis=1)\n#Fielding=1\ndata['toss_decision']=pd.get_dummies(data['toss_decision'],drop_first=True)\n#Chennai Super Kings dropped\nteam1=pd.get_dummies(data['team1'],prefix='team1',drop_first=True)\nteam2=pd.get_dummies(data['team2'],prefix='team2',drop_first=True)\ndata=pd.concat([data,team1,team2],axis=1)","e8102c17":"toss_winner=data['toss_winner']\nteam1=data['team1']\nli=[]\nfor x in range(len(data)):\n    if toss_winner[x]==team1[x]:\n        li.append(1)\n    else:\n        li.append(0)\ndata['toss_winner']=li\n\nwinner=data['winner']\nli=[]\nfor x in range(len(data)):\n    if winner[x]==team1[x]:\n        li.append(1)\n    else:\n        li.append(0)\ndata['winner']=li","3303e1a1":"X=data[['neutral_venue',\n        'Ahmedabad', 'Bengaluru', 'Centurion', 'Chandigarh', 'Chennai', 'Delhi',\n       'Dharamsala', 'Dubai', 'Durban', 'Hyderabad', 'Indore', 'Jaipur',\n       'Kolkata', 'Mumbai', 'Pune', 'Rajkot', 'Rare Category', 'Sharjah',\n       'Visakhapatnam','toss_winner', \n        'team1_Deccan Chargers',\n       'team1_Delhi Capitals', 'team1_Delhi Daredevils', 'team1_Gujarat Lions',\n       'team1_Kings XI Punjab', 'team1_Kochi Tuskers Kerala',\n       'team1_Kolkata Knight Riders', 'team1_Mumbai Indians',\n       'team1_Pune Warriors', 'team1_Rajasthan Royals',\n       'team1_Rising Pune Supergiant', 'team1_Royal Challengers Bangalore',\n       'team1_Sunrisers Hyderabad', 'team2_Deccan Chargers',\n       'team2_Delhi Capitals', 'team2_Delhi Daredevils', 'team2_Gujarat Lions',\n       'team2_Kings XI Punjab', 'team2_Kochi Tuskers Kerala',\n       'team2_Kolkata Knight Riders', 'team2_Mumbai Indians',\n       'team2_Pune Warriors', 'team2_Rajasthan Royals',\n       'team2_Rising Pune Supergiant', 'team2_Royal Challengers Bangalore',\n       'team2_Sunrisers Hyderabad', 'winner']]\ny=data['toss_decision']","7fbf70e4":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)","179713a7":"ann=Sequential()\nann.add(Dense(50,input_dim=48,activation='relu'))\nann.add(Dense(50,activation='relu'))\nann.add(Dense(1,activation='sigmoid'))\nann.compile(loss='binary_crossentropy',metrics=['accuracy'],optimizer='adam')\n","14351f70":"ann.fit(X_train,y_train,epochs=100)","0e90ba36":"team1lis=['team1_Deccan Chargers', 'team1_Delhi Capitals',\n       'team1_Delhi Daredevils', 'team1_Gujarat Lions',\n       'team1_Kings XI Punjab', 'team1_Kochi Tuskers Kerala',\n       'team1_Kolkata Knight Riders', 'team1_Mumbai Indians',\n       'team1_Pune Warriors', 'team1_Rajasthan Royals',\n       'team1_Rising Pune Supergiant', 'team1_Royal Challengers Bangalore',\n       'team1_Sunrisers Hyderabad',]\nteam2lis=['team2_Deccan Chargers',\n       'team2_Delhi Capitals', 'team2_Delhi Daredevils', 'team2_Gujarat Lions',\n       'team2_Kings XI Punjab', 'team2_Kochi Tuskers Kerala',\n       'team2_Kolkata Knight Riders', 'team2_Mumbai Indians',\n       'team2_Pune Warriors', 'team2_Rajasthan Royals',\n       'team2_Rising Pune Supergiant', 'team2_Royal Challengers Bangalore',\n       'team2_Sunrisers Hyderabad']\ncitylis=['Ahmedabad', 'Bengaluru', 'Centurion', 'Chandigarh',\n       'Chennai', 'Delhi', 'Dharamsala', 'Dubai', 'Durban', 'Hyderabad',\n       'Indore', 'Jaipur', 'Kolkata', 'Mumbai', 'Pune', 'Rajkot',\n       'Rare Category', 'Sharjah', 'Visakhapatnam']\n\ndef predict_toss_decision(neutral_venue,city,team1,team2,toss_winner):\n    citydic=dict.fromkeys(citylis,0)\n    team1dic=dict.fromkeys(team1lis,0)\n    team2dic=dict.fromkeys(team2lis,0)\n    result=[]\n    result.append(neutral_venue)\n    team1='team1_'+team1\n    team2='team2_'+team2\n#City\n    for x in citylis:\n        if x==city:\n            citydic[city]=1\n    if city not in citylis:\n        citydic['Rare Category']=1\n    result.extend(citydic.values())\n#Teams\n    for x in team1lis:\n        if x==team1:\n            team1dic[team1]=1\n    for x in team2lis:\n        if x==team2:\n            team2dic[team2]=1\n    result.append(toss_winner)\n    result.extend(team1dic.values())\n    result.extend(team2dic.values())\n    \n    result.append(0)\n    bat=result\n    predict_bat=ann.predict([[bat]])\n    if predict_bat>=0.6:\n        return \"Field\"\n    else:\n        return \"Bat\"","6f64c9be":"predict_toss_decision(0,'Chennai','Chennai Super Kings','Delhi Capitals',1)","78d599e1":"predict_toss_decision(1,'Bengaluru','Royal Challengers Bangalore','Chennai Super Kings',0)","39dcc403":"X.shape","6664a54f":"# 11. Best Fielder Stats","6c6572d3":"# Cleaning the data","4087deec":"# 8. Best Bowler Stats","e29a6da8":"#      IPL Data Analysis and Decision For Toss IPL","460c4eeb":"# 12. Most Man of the Match award winners","3f3aac90":"# Predicting Toss Decision To Win","265e39bc":"# 9. Wides and NoBalls stats","8fda3c67":"#  2.Team who has won most of the matches","cf98a276":"# Feature Engineering","00c048a4":"# 4.Toss decisions team wise","43a9f0f6":"# 1.Top Ten Cities Used for IPL match ","67f3db32":"# 7. Type of Dismissals done","a6593141":"# 10.Best Batsman Stats","f6db2470":"# 6. Runs per ball stats","d2e243fb":"# 5.Toss Win Match Win Stats","771e2fdd":"# Importing dataset","78365e79":"![image.png](attachment:image.png)","21ab253a":"Indian Premier League is a cricket tournament held every year starting 2008. This kernel will be showing different analysis based on the records in the IPL History.","df231b5c":"# Please **Upvote** this kernel and if you find it helpful please keep it in your Favourite Section.","32606bdf":"# **OBJECTIVE**\n1. Exploratory Data Analysis     \n2. Toss Decision Prediction","7ac0fd3f":"# 3. Most Matches won on a neutral venue","cb7b3dff":"# Model Creation","92f194a4":"# Importing libraries"}}