{"cell_type":{"d027053e":"code","bb0dd17b":"code","706548b7":"code","db45a42f":"code","5c97a7e7":"code","9d31f9c9":"code","b4b48498":"code","3b333a72":"code","1a963b09":"code","14d1ab4f":"code","0e04fdb2":"code","b8fe662f":"code","4c70257b":"code","ac329ebd":"code","d126e220":"code","42acd736":"code","76f13fe3":"code","6f5a4994":"code","009d3ed5":"markdown","add2ba38":"markdown","bb76e1b6":"markdown","045adf3f":"markdown","4b2ff204":"markdown","b25eedc4":"markdown","0235f285":"markdown","0e50a677":"markdown","697f2ac7":"markdown","6b071550":"markdown","b74b1b7d":"markdown","84c33d39":"markdown","2892e62e":"markdown","82eabf53":"markdown","da49dd52":"markdown","cb0f9aea":"markdown","67a2f867":"markdown","af6c7a59":"markdown","f2ad5362":"markdown","78362442":"markdown","0b3f441c":"markdown","ae078810":"markdown","aae35aa2":"markdown","ada18fb7":"markdown","9af92bad":"markdown","5fc816f0":"markdown","f1a077c0":"markdown","c615ab74":"markdown","acc6cd64":"markdown","6c7637ef":"markdown","5f42c551":"markdown","65d2c8cc":"markdown","9005f40c":"markdown","e8273c84":"markdown","3cbe3b43":"markdown"},"source":{"d027053e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \n%matplotlib inline \nimport seaborn as sns\n#importing required libraries","bb0dd17b":"df = pd.read_csv(\"..\/input\/pokemon\/Pokemon.csv\") #getting the desired dataset file\ndf.head()","706548b7":"df.set_index(\"Name\",inplace = True) #creating \"name\" column as index\ndf.drop([\"#\"], axis = 1, inplace = True)# removing column \"#\" from dataset\ndf\n","db45a42f":"print(df.isnull().sum()) #checking missing values in each column\ndf[\"Type 2\"].fillna(df[\"Type 1\"], inplace = True) #filling missing values in \"type2\" column with values of \"type1\" column.\nprint(df.shape) #getting the number of rows & column of matrix ","5c97a7e7":"print(df[\"Type 1\"].unique()) #getting all the unique values in \"type1\" column\nplt.hist(df[\"Type 1\"],bins = 18, rwidth = 0.9, linewidth = 2,edgecolor = \"black\", color = \"skyblue\")\nplt.gcf().set_size_inches(15,8) #getting current figure and then setting the size we wanted\nplt.xlabel(\"Pokemons\", fontweight = \"bold\", fontsize = 20)\nplt.ylabel(\"Counts\", fontweight = \"bold\",fontsize = 20)\nplt.title(\"TYPE 1\",fontweight = \"bold\",fontsize = 15)","9d31f9c9":"print(df[\"Type 2\"].unique())\nplt.hist(df[\"Type 2\"],bins = 18, rwidth = 0.9,linewidth = 2,edgecolor = \"black\", color = \"skyblue\")\nplt.gcf().set_size_inches(15,8)\nplt.xlabel(\"Pokemons\", fontweight = \"bold\", fontsize = 20)\nplt.ylabel(\"Counts\", fontweight = \"bold\",fontsize = 20)\nplt.title(\"TYPE 2\",fontweight = \"bold\",fontsize = 15)","b4b48498":"df1 = df.sort_values(by = \"Speed\",ascending = False) #sorting values of \"speed\" column in ascending order\ndf1 = df1.drop_duplicates(subset = [\"Speed\"],keep = \"first\") #removing all duplicate values of speed.\ndf1.head(10)\n","3b333a72":"sns.violinplot(x = df.Generation , y = df.Speed, linewidth = 4)\nplt.gcf().set_size_inches(12,8)\nplt.xlabel(\"Generation\", fontweight = \"bold\", fontsize = 20)\nplt.ylabel(\"Speed\", fontweight = \"bold\",fontsize = 20)","1a963b09":"sns.boxplot(x = df[\"Type 1\"], y = df.HP, linewidth = 3.5,whis = 1, palette = \"rocket_r\")\nplt.gcf().set_size_inches(15,8)\nplt.xlabel(\" Type 1\", fontweight = \"bold\", fontsize = 20)\nplt.ylabel(\"HP\", fontweight = \"bold\",fontsize = 20)","14d1ab4f":"sns.boxplot(x = df[\"Type 2\"], y = df.HP, linewidth = 3.5,whis = 1, palette = \"crest\")\nplt.gcf().set_size_inches(15,8)\nplt.xlabel(\"Type 2\", fontweight = \"bold\", fontsize = 20)\nplt.ylabel(\"HP\", fontweight = \"bold\",fontsize = 20)","0e04fdb2":"Fire = df[(df[\"Type 1\"]==\"Fire\") | (df[\"Type 2\"]==\"Fire\") ] #getting dataset of fire pokemon either in \"type1\" or \"type2\" column\nWater = df[(df[\"Type 1\"]==\"Water\") | (df[\"Type 2\"]==\"Water\") ] #water pokemons\nsns.scatterplot(x = Water.Attack.head(50), y = Water.Defense.head(50), label = \"Water\",marker = \"o\" , s= 70)\nsns.scatterplot(x =Fire.Attack.head(50), y = Fire.Defense.head(50), label = \"Fire\", marker = \"*\" , s= 250)\nplt.legend() #for printing out the label setted up\nplt.gcf().set_size_inches(15,8)\nplt.xlabel(\"ATTACK\", fontweight = \"bold\", fontsize = 20)\nplt.ylabel(\"DEFENSE\", fontweight = \"bold\",fontsize = 20)\nplt.grid() #getting the grid design.","b8fe662f":"df2 = df.sort_values(by = \"Total\", ascending = False)\ndf2 = df2.drop_duplicates(subset = [\"Total\"])\ndf2.head(5)","4c70257b":"sns.violinplot(y = df.Total , x = df[\"Type 1\"],palette = \"magma\",linewidth = 3)\nplt.gcf().set_size_inches(20,8)\nplt.xlabel(\"TOTAL\", fontweight = \"bold\", fontsize = 20)\nplt.ylabel(\"TYPE1\", fontweight = \"bold\",fontsize = 20)\nplt.grid()","ac329ebd":"sns.violinplot(y = df.Total , x = df[\"Type 2\"],palette = \"crest\",linewidth = 3)\nplt.gcf().set_size_inches(20,8)\nplt.xlabel(\"TOTAL\", fontweight = \"bold\", fontsize = 20)\nplt.ylabel(\"TYPE2\", fontweight = \"bold\",fontsize = 20)\nplt.grid()","d126e220":"sns.stripplot(x = \"Generation\" , y = \"Total\" , data = df , hue = \"Legendary\",palette = \"husl\", size = 7)\nplt.gcf().set_size_inches(15,8)\nplt.ylabel(\"TOTAL\", fontweight = \"bold\", fontsize = 20)\nplt.xlabel(\"GENERATION\", fontweight = \"bold\",fontsize = 20)\nplt.grid()","42acd736":"df4 = df.pivot_table(index = \"Generation\" , values=[ \"Sp. Atk\",\"Sp. Def\",\"Speed\",\"HP\"],aggfunc = np.mean)\ndf4\n#creating the table showing avg values of diff charcterstics acquired by the pokemons across all generation.","76f13fe3":"plt.plot( np.arange(1,7) ,  df4[\"Sp. Atk\"],\"-ro\", markerfacecolor='black',markersize = 10, label = \"Special Attack\")\nplt.plot( np.arange(1,7) ,  df4[\"Sp. Def\"],\"-bo\", markerfacecolor='black',markersize = 10, label = \"Special Defense\")\nplt.plot( np.arange(1,7) ,  df4[\"Speed\"],\"-go\", markerfacecolor='black',markersize = 10, label = \"Speed\")\nplt.plot( np.arange(1,7) ,  df4[\"HP\"],\"-mo\", markerfacecolor='black',markersize = 10, label = \"HP\")\n\nplt.ylabel(\"AVERAGE VALUES\", fontweight = \"bold\", fontsize = 20)\nplt.xlabel(\"GENERATION\", fontweight = \"bold\",fontsize = 20)\n\nplt.grid()\nplt.gcf().set_size_inches(15,8)\nplt.legend()","6f5a4994":"sns.jointplot(data = df , x= \"Attack\", y = \"Defense\", kind = \"hex\" )\nplt.grid()\nplt.gcf().set_size_inches(10,8)\nplt.ylim(0,150)\nplt.xlim(0,150)\n\nplt.ylabel(\"DEFENSE\", fontweight = \"bold\", fontsize = 20)\nplt.xlabel(\"ATTACK\", fontweight = \"bold\",fontsize = 20)\n","009d3ed5":"# 2.2 SPEED \u26a1\u26a1","add2ba38":"## PYTHON LIBRARIES USED:\n**ANALYSIS** = *NUMPY* & *PANDAS*\n\n**VISUALIZATION** = *MATPLOTLIB* & *SEABORN*","bb76e1b6":">>> ***ICE Pokemon has highest HP & BUG Pokemon has lowest in TYPE2** ","045adf3f":"### 2.4.1 ATTACK VS DEFENSE :","4b2ff204":">>> **WE CAN CLEARLY SEE THAT ALL THE STRONGEST POKEMON ACROSS ALL GENERATIONS ARE LEGENDARY.**","b25eedc4":"## 1. DATA CLEANING AND GETTING INSIGHTS.","0235f285":"### 2.5.2  STRONGEST  & WEAKEST POKEMONS AMONG TYPE1 CATEGORY:","0e50a677":"### 2.2.2 SPEED OF DIFFERENT POKEMONS ACROSS GENERATIONS:","697f2ac7":"## 2.1 CATEGORY\n\n### 2.1.1 NUMBER OF POKEMONS IN *TYPE 1* CATEGORY :","6b071550":"# 2.4 FIRE POKEMONS\ud83d\udca5   vs   WATER POKEMONS \ud83d\udca7","b74b1b7d":"### 2.2.1  TOP 10 FASTEST POKEMONS :","84c33d39":">>> **Flying Pokemon are highest in number in TYPE2 category**","2892e62e":">>> **FIRE pokemon believe in Attacking more rather Defensing & WATER pokemon does vice-versa.**","82eabf53":">>> **DRAGON pokemon is strongest & BUG pokemon is weakest among TYPE2 category.**","da49dd52":"# 2.3 HP","cb0f9aea":">>> **OUR POKEMONS IN THE DATASET ARE BIT MORE ATTACKING THAN DOING DEFENSE.**","67a2f867":"#   \ud83d\udd25POKEMON STATS COMPARISON \ud83d\udd25  \ud83d\udc09\ud83c\udd9a\ud83d\udc32\n\n\n\n\n\n","af6c7a59":">>> **DRAGON Pokemon has highest HP & GHOST Pokemon has lowest in TYPE1**","f2ad5362":">>> **Clearly Generation 4 pokemons are having brilliant stats among all**","78362442":">>> **Water Pokemon are highest in number in TYPE1 category**","0b3f441c":"### 2.3.1 HP OF POKEMONS ACROSS TYPE1 CATEGORY:","ae078810":"### 2.3.2 HP OF POKEMONS ACROSS TYPE2 CATEGORY:","aae35aa2":"#### Here is the notebook contaning data of different pokemons having various characterstics.\n#### We will do the Exploratory Data Analysis on the below dataset and find out some meaningfull insight out of it.:\n\n\n","ada18fb7":"### 2.5.4  TOTAL OF POKEMONS IN ALL GENERATION ACROSS LEGENDS :","9af92bad":"### 2.1.2 NUMBER OF POKEMONS IN *TYPE 2* CATEGORY :","5fc816f0":"### 2.6 GENERAL STATS COMPARISON ACROSS ALL GENERATIONS :","f1a077c0":"### 2.5.3  STRONGEST & WEAKEST POKEMONS AMONG TYPE2 CATEGORY:","c615ab74":"### The above Data contains varoius attributes of different pokemons , having parameters :\n##### 1. NAME\n##### 2. TYPES \n##### 3. TOTAL\n##### 4. HP\n##### 5. ATTACK\n##### 6. DEFENSE\n##### 7. SPECIAL ATTACK\n##### 8. SPECIAL DEFENSE \n##### 9. GENERATION\n##### 10. LEGENDARY","acc6cd64":">>> **DRAGON pokemon is strongest & BUG pokemon is weakest among TYPE1 category.**","6c7637ef":"#### So,this was the analysis on the pokemons data set among all there characterstics.I have tried to made this notebook as simple as possible and beginners friendly.\n#### Hope you guys liked it.\u270c","5f42c551":"### 2.5.1 TOP 5 STRONGEST POKEMONS AMONG ALL.","65d2c8cc":"# 2. DATA VISUALIZATION\n\n","9005f40c":">>> **Generation 4 Pokemons are Fastest among all.**","e8273c84":"### 2.7 DEFENSE VS ATTACK ","3cbe3b43":"# 2.5 TOTAL"}}