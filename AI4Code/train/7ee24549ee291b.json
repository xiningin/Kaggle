{"cell_type":{"1344e8aa":"code","68742560":"code","92fa59bb":"code","ef0f3039":"code","4aa6f760":"code","fa19a72a":"code","ac69cf3c":"code","b66a50d4":"code","745e0c3f":"code","6b9e184a":"code","8a9dfa4a":"code","d38af15c":"code","b5935079":"code","0b3d4b2c":"code","289780c4":"code","ed85098d":"code","c2077830":"code","2ef7639e":"code","9439e0d5":"code","80983261":"code","6ece66af":"code","0e1ee39a":"markdown","1d9a6d1d":"markdown","9549e8e3":"markdown","dcf26b77":"markdown","c6a73a7d":"markdown","d5085293":"markdown","b4c610ee":"markdown","a826caa3":"markdown"},"source":{"1344e8aa":"!pip install darts","68742560":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom darts import TimeSeries\nfrom darts.models import Prophet\nfrom darts.metrics import smape\n\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","92fa59bb":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv', parse_dates=['date'])\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv', parse_dates=['date'])","ef0f3039":"train_len = train.shape[0]\ntest_len = test.shape[0]\n\ntrain_len, test_len","4aa6f760":"test.date.plot();","fa19a72a":"train.date.plot();","ac69cf3c":"dev = train.query('date < \"2018-01-01\"')\nval = train.query('date >= \"2018-01-01\"')","b66a50d4":"dev.date.plot(label='Dev set');\nval.date.plot(label='Val set');\nplt.legend();","745e0c3f":"plt.figure(figsize=(20, 10))\ndev.groupby(['country', 'store', 'product']).num_sold.plot();\nplt.legend();","6b9e184a":"dev_groups = dev.groupby(['country', 'store', 'product'])\nval_groups = val.groupby(['country', 'store', 'product'])\nmodels = {}\n\nprint('Training')\nfor group, df in dev_groups:\n    dev_series = TimeSeries.from_dataframe(df, time_col='date', value_cols='num_sold')    \n    prophet = Prophet()\n    prophet.fit(dev_series)\n    models[group] = prophet\n    \n\nprint('Evaluation')\nfor group, df in val_groups:\n    val_series = TimeSeries.from_dataframe(df, time_col='date', value_cols='num_sold')\n    prophet = models[group]\n    forecast = prophet.predict(len(val_series))\n    print(group, 'SMAPE:', smape(forecast, val_series))","8a9dfa4a":"import holidays\nimport dateutil.easter as easter\n\nholiday_list = []\n\nfor date in holidays.Finland(years=[2014, 2015, 2016, 2017, 2018, 2019, 2020], observed=True).items():\n    holiday_list.append([date[0], date[1], \"Finland\"])\n    \nfor date in holidays.Norway(years=[2014, 2015, 2016, 2017, 2018, 2019, 2020], observed=True).items():\n    holiday_list.append([date[0], date[1], \"Norway\"])\n    \nfor date in holidays.Sweden(years=[2014, 2015, 2016, 2017, 2018, 2019, 2020], observed=True).items():\n    if date[1]!='S\u00f6ndag':\n        holiday_list.append([date[0], date[1].replace(\", S\u00f6ndag\", \"\"), \"Sweden\"])\n    \n    \n# Last week of the year\nfor year in [2014, 2015, 2016, 2017, 2018, 2019, 2020]:\n    for i, day in enumerate(range(24, 32)):\n        for country in ['Finland', 'Sweden', 'Norway']:\n             holiday_list.append([pd.to_datetime(f\"{year}-{12}-{day}\").date(), \n                                  f\"Last week of the year (day {i+1})\", \n                                  country])\n# Swedish Rock Concert\nfor start, end, year in [[4,7,2014],[3,6,2015],[8,11,2016],[7,10,2017],[6,10,2018],[5,8,2019]]:\n    for i, day in enumerate(range(start, end+1)):\n        holiday_list.append([pd.to_datetime(f\"{year}-{6}-{day}\").date(), \n                                  f\"Swedish Rock Concert (day {i+1})\", \n                                  \"Sweden\"])\n        \n# Last Wednesday of June\nfor date in ['2014-06-25', '2015-06-24', '2016-06-29', '2017-06-28', '2018-06-27', '2019-06-26', '2020-06-24']:\n    for country in ['Finland', 'Sweden', 'Norway']:\n         holiday_list.append([pd.to_datetime(date).date(), \n                                  f\"Last Wednesday of June\", \n                                  country])\n            \n# First Sunday of November\nfor date in ['2014-11-02', '2015-11-1', '2016-11-6', '2017-11-5', '2018-11-4', '2019-11-3', '2020-11-01']:\n    for country in ['Finland', 'Sweden', 'Norway']:\n         holiday_list.append([pd.to_datetime(date).date(), \n                                  f\"First Sunday of November\", \n                                  country])\n            \n# Independence Day of Finland\nfor year in [2014, 2015, 2016, 2017, 2018, 2019, 2020]:\n    holiday_list.append([pd.to_datetime(f\"{year}-{12}-{6}\").date(), \n                                      f\"Independence Day of Finland\", \n                                      'Finland'])\n\n# Easter\neaster_date = [easter.easter(y) for y in [2014, 2015, 2016, 2017, 2018, 2019, 2020]]\nfor date in easter_date:\n    for country in ['Finland', 'Sweden', 'Norway']:\n         holiday_list.append([pd.to_datetime(date).date(), \n                                  f\"Easter\", \n                                  country])\n            \n\n\nholidays = pd.DataFrame(holiday_list, columns=['ds', 'holiday', 'country'])\nholidays = holidays.drop_duplicates(['ds', 'country'], keep='first')\nholidays = holidays.sort_values(['ds', 'country'])\nholidays['ds'] = pd.to_datetime(holidays['ds'])","d38af15c":"dev_groups = dev.groupby(['country', 'store', 'product'])\nval_groups = val.groupby(['country', 'store', 'product'])\nmodels = {}\n\nprint('Training')\nfor group, df in dev_groups:\n    country = group[0]\n    country_holidays = holidays.query('country == @country').drop('country', axis=1)\n    dev_series = TimeSeries.from_dataframe(df, time_col='date', value_cols='num_sold')    \n    prophet = Prophet(holidays=country_holidays)\n    prophet.fit(dev_series)\n    models[group] = prophet\n    \n\nprint('Evaluation')\nfor group, df in val_groups:\n    val_series = TimeSeries.from_dataframe(df, time_col='date', value_cols='num_sold')\n    prophet = models[group]\n    forecast = prophet.predict(len(val_series))\n    print(group, 'SMAPE:', smape(forecast, val_series))","b5935079":"val_groups = val.groupby(['country', 'store', 'product'])\nval_pred = pd.DataFrame()\n\nfor group, df in val_groups:\n    val_series = TimeSeries.from_dataframe(df, time_col='date', value_cols='num_sold')\n    prophet = models[group]\n    forecast = prophet.predict(len(val_series))\n    df['pred'] = forecast.values().reshape(-1,)\n    val_pred = pd.concat([val_pred, df], axis=0)","0b3d4b2c":"val_pred.plot(x='num_sold', y='pred', kind='scatter', figsize=(10, 4));","289780c4":"def training(df):\n    df_groups = df.groupby(['country', 'store', 'product'])\n    models = {}\n    print('Training')\n    for group, df in df_groups:\n        country = group[0]\n        country_holidays = holidays.query('country == @country').drop('country', axis=1)\n        series = TimeSeries.from_dataframe(df, time_col='date', value_cols='num_sold')    \n        prophet = Prophet(holidays=country_holidays)\n        prophet.fit(series)\n        models[group] = prophet\n    return models\n\ndef inference(models, df):\n    df_groups = df.groupby(['country', 'store', 'product'])\n    df_pred = pd.DataFrame()\n\n    for group, df in df_groups:\n        prophet = models[group]\n        forecast = prophet.predict(len(df))\n        df['pred'] = forecast.values().reshape(-1,)\n        df_pred = pd.concat([df_pred, df], axis=0)\n        \n    return df_pred","ed85098d":"models = training(train)","c2077830":"test_pred = inference(models, test)","2ef7639e":"test_pred.head()","9439e0d5":"plt.figure(figsize=(20, 10))\ntest_pred.groupby(['country', 'store', 'product']).pred.plot();\nplt.legend();","80983261":"submission = test_pred[['row_id', 'pred']].rename({'pred': 'num_sold'}, axis=1).sort_values('row_id')\nsubmission.head()","6ece66af":"submission.to_csv('submission.csv', index=False)","0e1ee39a":"This notebook will use Prophet model. Please note that I have no idea what I'm doing, and I'm just fooling around, so if I'm doing anything that seems dumb, please notify me in the comments.","1d9a6d1d":"It's working, so let's add holidays.","9549e8e3":"Now submit the results.","dcf26b77":"Now I'll group the dev set by country, store and product and fit the model for each group.","c6a73a7d":"Now let's train with full training set and predict test set.","d5085293":"Now let's make put these into predictions into a dataframe.","b4c610ee":"I'll concatenate the train and test data in order to dissect them into different groups based on country, store and product for time series prediction, then I'll extract the test prediction later and concatenate them for submission.","a826caa3":"The test set is one year, so I'll make a validation set that is also one year starting from 2018.\n\nI'll make a pipeline for prediciton using the validation set, then I'll apply the same pipeline on the test after training using the entire training set."}}