{"cell_type":{"4568ed29":"code","36d2e011":"code","02ee8087":"code","0c3302f0":"code","031e7193":"code","5643b9ea":"code","a8963ca3":"code","8a69c101":"code","54fa43e1":"code","3f391463":"code","e618ddba":"code","2246cff8":"code","e2723401":"code","2b1ac541":"code","c8db9e20":"code","67d11889":"code","9406a800":"code","fae77b83":"code","d997b43c":"code","ac8fa0a5":"code","a358c4ca":"code","dbdd6b49":"markdown","eab6bd85":"markdown","98f59932":"markdown","688145d7":"markdown","e73b06f2":"markdown","1d88bb4a":"markdown","f9ca58d6":"markdown","b62ef8c2":"markdown","2b65c740":"markdown","a5c20e89":"markdown","71523921":"markdown","19c8fcd4":"markdown","19c00088":"markdown","9adf18d8":"markdown","9d81f599":"markdown","a07ffc44":"markdown","2ca3a617":"markdown","5b22f5b0":"markdown","3b2d6022":"markdown","7c91e356":"markdown"},"source":{"4568ed29":"import matplotlib.pyplot as plt\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport os\n\nfrom sklearn.model_selection import train_test_split\n\nprint(os.listdir(\"..\/input\"))","36d2e011":"np.random.seed(42)","02ee8087":"# load the train and test csv files\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","0c3302f0":"print('TRAIN CSV FILES DATA: \\n', train.head(10))","031e7193":"# for labels \ntrain_y = train['label']\nprint(train_y.head(10))","5643b9ea":"# for pixel values\ntrain_x = train.drop(labels=['label'], axis=1)\nprint(train_x.head(10))","a8963ca3":"# total train instances\nprint(len(train_x))","8a69c101":"# total instances for each digit\nprint(train_y.value_counts())","54fa43e1":"# normalize the data\ntrain_x = train_x \/ 255.0\ntest = test \/ 255.0","3f391463":"print(train_x.head(10))","e618ddba":"train_x = train_x.values.reshape(-1, 28, 28, 1)\ntest = test.values.reshape(-1, 28, 28, 1)","2246cff8":"plt.figure(figsize=(8, 4))\nplt.imshow(train_x[9][:, :, 0], cmap='gray')","e2723401":"train_y = tf.keras.utils.to_categorical(train_y, num_classes=10)\nprint(train_y)","2b1ac541":"train_X, val_X, train_Y, val_Y = train_test_split(train_x, train_y, test_size = 0.2, random_state=42)","c8db9e20":"input_shape = (28, 28, 1)","67d11889":"model = tf.keras.Sequential()\n\nmodel.add(tf.keras.layers.Conv2D(32, (3, 3), padding='same', \n            activation='relu', input_shape=input_shape))    \nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(tf.keras.layers.Dropout(0.2))\n        \nmodel.add(tf.keras.layers.Conv2D(64, (3, 3), padding='same', \n                                 activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(tf.keras.layers.Dropout(0.2))\n \nmodel.add(tf.keras.layers.Conv2D(128, (3, 3), padding='same', \n                                 activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(tf.keras.layers.Dropout(0.2))\n \nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(256, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(512, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(1024, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(1024, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.4))\n \nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))","9406a800":"model.compile(\n    optimizer = tf.keras.optimizers.RMSprop(),\n    loss = tf.keras.backend.categorical_crossentropy, \n    metrics = ['accuracy']\n)","fae77b83":"history = model.fit(train_X, train_Y, \n          batch_size=32,\n          validation_data=(val_X, val_Y),\n          epochs=30)","d997b43c":"num_epochs = np.arange(0, 30)\nplt.figure(dpi=300)\nplt.plot(num_epochs, history.history['loss'], label='train_loss', c='red')\nplt.plot(num_epochs, history.history['val_loss'], \n    label='val_loss', c='orange')\nplt.plot(num_epochs, history.history['acc'], label='train_acc', c='green')\nplt.plot(num_epochs, history.history['val_acc'], \n    label='val_acc', c='blue')\nplt.title('Training Loss and Accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Loss\/Accuracy')\nplt.legend()\nplt.savefig('plot.png')\n","ac8fa0a5":"# predict results\nresults = model.predict(test)\n\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","a358c4ca":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"), results], axis = 1)\n\nsubmission.to_csv(\"submission.csv\",index=False)","dbdd6b49":"After normlization, all the pixel values will range between 0.0 and 1.0.","eab6bd85":"## Visualize the Loss and Accuracy","98f59932":"**We can now visualize some of the digit images.**","688145d7":"**Split the Data into Train and Validation Set**\n\n","e73b06f2":"So, our model is architectue is as follwoing:  \n**Conv2D(32, relu) => MaxPooling2D() => Dropout()**  \n**Conv2D(64, relu) => MaxPooling2D() => Dropout()**  \n**Conv2D(128, relu) => MaxPooling2D() => Dropout()**  \n**Conv2D(256, relu) => MaxPooling2D() => Dropout()**\n**Conv2D(512, relu) => MaxPooling2D() => Dropout()**  \n**Conv2D(1024, relu) => MaxPooling2D() => Dropout()**\n**Flatten => Dense(512) => Dropout**  \n**Dense(10, softmax)**","1d88bb4a":"## The Model\nHere, we will define our CNN model. We will be using the `Sequential()` API with `Conv2D()`. Let's first define the input shape and model, then I will explain the architecture.","f9ca58d6":"Now, we are ready to train the model. We will run the model for 30 epochs.","b62ef8c2":"## Loading and Preparing the Data","2b65c740":"Now the labels are one-hot encoded. For example, if the digit is 5, then the list would be, `[0, 0, 0, 0, 1, 0, 0, 0, 0, 0]`. Only the fifth index will be 1 and the rest will be zero.","a5c20e89":"If you found this notebook useful, then upvote and comment. You can also visit my website **[DebuggerCafe](https:\/\/debuggercafe.com\/)** for more amazing machine learning and deep learning stuff. ","71523921":"Ok, we are all set with the train and test data. But how many train instances are there and how many for each of the digit. Answering this question will make our next steps easier.","19c8fcd4":"**Compile the Model**\n\nWe will be `RMSProp` as the optimizer, `categorical_crossentropy` as the loss and metrics will be accuracy.","19c00088":"Now, let's separate the labels and the pixel values into `train_x` and `train_y`.","9adf18d8":"So, we have divided the data into 80% training data and 20% test data. If you want, you can also test on 10% of the data as we have only 42000 instances in the train set.","9d81f599":"First, let's call a random seed generator and we will be good to proceed.","a07ffc44":"Looks like we have hit our target of 99%. Now, we are ready to commit and submit our predictions.","2ca3a617":"**One-Hot Encode the Labels**\n\nThe train labels are all the original numbers that correspond to the pixel values (e.g. 1, 2, 3, ...). We need to one-hot encode the labels so that the labels will be 1 for the corresponding digit and 0 for all others. So, each of the rows will contain 9 zeros and 1 one.","5b22f5b0":"**Normalizing the Data**  \n\nWe should always normalize the data before feeding it to any neural network. Normalized floating point values will always give better results when working with neural network.","3b2d6022":"**Reshape the Data**\n\nThe pixels values for any of the digits are all in one row. We nedd to reshape them as 28x28x1. That will be 28 rows, 28 columns and 1 (channel) for the grey scale of the images. It the images would have been colored, then the channel would have been 3 for each of the 3 colors (RGB).","7c91e356":"## Introduction\nModeling the MNIST data with CNNs is a very common starting point for beginners. In this notebook we will use CNN from `tf.keras` and try to achieve above 99% accuracy. I hope that beginners in the computer vision and deep learning field find it useful."}}