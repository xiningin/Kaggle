{"cell_type":{"fada7a43":"code","d4028cf7":"code","baf4b9d2":"code","ab33e713":"code","ee7c3c0f":"code","f61ab5df":"code","9a92395c":"code","40a0d111":"code","251ae7c6":"code","7c0de384":"code","1ad0bbc2":"code","1e09ad49":"code","999869f9":"code","89b903c3":"code","f96773d3":"code","c30eeabe":"code","f6e7d5bf":"code","596267e2":"code","a1a71322":"code","381eda5b":"code","1d31c333":"code","54b2251a":"code","131cb4f1":"code","d1135b1a":"code","a56e24de":"code","61e3bee7":"code","c48b851e":"code","c9afb9ea":"code","1eda7053":"code","1b17adaf":"code","98d509e6":"code","8363b3c5":"code","06b4c545":"code","657aefc2":"code","1a15fd46":"code","d1bbc1d2":"code","050ef77b":"code","51ab6cbb":"code","21fd0005":"code","5077e579":"code","1f329893":"markdown","3dde7cfd":"markdown","8323f975":"markdown","77c43403":"markdown","e629d8d8":"markdown","8be8784c":"markdown","0a8362b2":"markdown","9403f1de":"markdown","fd0e3b21":"markdown","e4398bce":"markdown","a1fad2e9":"markdown","cfb64088":"markdown","29165266":"markdown","430bf4de":"markdown","e1fd1731":"markdown","59a73eda":"markdown","a4270540":"markdown","085e9d61":"markdown","465ce47e":"markdown","d1f37bf9":"markdown","f7ce6fd9":"markdown","57e08510":"markdown","1b730aec":"markdown","1f639cca":"markdown","4a03b365":"markdown"},"source":{"fada7a43":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","d4028cf7":"train = pd.read_csv(\"..\/input\/sf-crime\/train.csv.zip\", parse_dates=['Dates'])\ntest = pd.read_csv(\"..\/input\/sf-crime\/test.csv.zip\", parse_dates=['Dates'], index_col='Id')\nsampleSubmission = pd.read_csv(\"..\/input\/sf-crime\/sampleSubmission.csv.zip\")","baf4b9d2":"train.head(3)","ab33e713":"test.head(3)","ee7c3c0f":"train.info()","f61ab5df":"fe_name = list(test)\ndf_train = train[fe_name]\ndf = pd.concat((df_train,test))","9a92395c":"target = train['Category']","40a0d111":"target.value_counts()","251ae7c6":"from sklearn.preprocessing import LabelEncoder\n\nLB = LabelEncoder() \ntarget = LB.fit_transform(target)\nprint(LB.classes_)","7c0de384":"target","1ad0bbc2":"date = pd.to_datetime(df['Dates'])\ndf['Date'] = date.dt.date\ndf['Year'] = date.dt.year\ndf['Month'] = date.dt.month\ndf['Day'] = date.dt.day\ndf['Hour'] = date.dt.hour","1e09ad49":"df.drop(\"Dates\", axis = 1, inplace = True)","999869f9":"year = df.groupby('Year').count().iloc[:,0]\nmonth = df.groupby('Month').count().iloc[:,0]\nhour = df.groupby('Hour').count().iloc[:,0]\ndayofweek = df.groupby('DayOfWeek').count().iloc[:, 0]\n\nfigure, axs = plt.subplots(2,2, figsize = (15,10))\n\nsns.barplot(x=year.index, y= year,ax = axs[0][0])\nsns.barplot(x=month.index, y= month,ax = axs[0][1])\nsns.barplot(x=hour.index, y= hour,ax = axs[1][0])\nsns.barplot(x=dayofweek.index, y= dayofweek,ax = axs[1][1])","89b903c3":"date = df.groupby('Date').count().iloc[:, 0]","f96773d3":"sns.kdeplot(data=date, shade=True)\nplt.axvline(x=date.median(), ymax=0.95, linestyle='--')\nplt.annotate('Median ' + str(date.median()),xy =(date.median(), 0.005))","c30eeabe":"lb = LabelEncoder()\ndf['PdDistrict'] = lb.fit_transform(df[\"PdDistrict\"])","f6e7d5bf":"df[\"PdDistrict\"].value_counts()","596267e2":"sns.countplot(df[\"PdDistrict\"])","a1a71322":"lb = LabelEncoder()\ndf['PdDistrict'] = lb.fit_transform(df[\"PdDistrict\"])","381eda5b":"df['DayOfWeek'] = lb.fit_transform(df[\"DayOfWeek\"])","1d31c333":"df[\"Address\"].value_counts().head(20)","54b2251a":"df['block'] = df['Address'].str.contains('block', case=False)\ndf['ST'] = df['Address'].str.contains('ST', case=False)","131cb4f1":"df['block'] = lb.fit_transform(df[\"block\"])\ndf['ST'] = lb.fit_transform(df[\"ST\"])","d1135b1a":"df.drop(\"Address\", axis = 1, inplace = True)","a56e24de":"print(df[\"X\"].min(), df[\"X\"].max())\nprint(df[\"Y\"].min(), df[\"Y\"].max())","61e3bee7":"print(len(df.loc[df[\"X\"] >= -120.5, \"X\"]))\nprint(len(df.loc[df[\"Y\"] >= 90, \"Y\"]))","c48b851e":"X_median = df[df[\"X\"] < -120.5][\"X\"].median()\nY_median = df[df[\"Y\"] < 90][\"Y\"].median()\ndf.loc[df[\"X\"] >= -120.5, \"X\"] = X_median\ndf.loc[df[\"Y\"] >= 90, \"Y\"] = Y_median","c9afb9ea":"df[\"X+Y\"] = df[\"X\"] + df[\"Y\"]\ndf[\"X-Y\"] = df[\"X\"] - df[\"Y\"]","1eda7053":"df.drop(\"Date\", axis = 1, inplace = True)","1b17adaf":"new_train = df[:train.shape[0]]\nnew_test = df[train.shape[0]:]","98d509e6":"new_train.head()","8363b3c5":"import lightgbm as lgb\n\ntrain_data = lgb.Dataset(new_train, label=target, categorical_feature=[\"PdDistrict\", \"DayOfWeek\"])\nparams = {'boosting':'gbdt',\n          'objective':'multiclass',\n          'num_class':39,\n          'max_delta_step':0.9,\n          'min_data_in_leaf': 21,\n          'learning_rate': 0.4,\n          'max_bin': 465,\n          'num_leaves': 41,\n          'verbose' : 1}\nbst = lgb.train(params, train_data, 120)","06b4c545":"predictions = bst.predict(new_test)","657aefc2":"submission = pd.DataFrame(predictions,columns=LB.inverse_transform(np.linspace(0, 38, 39, dtype='int16')),index=new_test.index)\n#submission.to_csv('LGB.csv', index_label='Id')","1a15fd46":"import xgboost as xgb\ntrain_xgb = xgb.DMatrix(new_train, label=target)\ntest_xgb  = xgb.DMatrix(new_test)","d1bbc1d2":"params = {\n    'max_depth': 4,  \n    'eta': 0.3,  \n    'silent': 1, \n    'objective': 'multi:softprob', \n    'num_class': 39,\n}\n\nxg = xgb.cv(params, train_xgb, nfold=3, early_stopping_rounds=10, metrics='mlogloss', verbose_eval=True) ","050ef77b":"train_xgb = xgb.train(params, train_xgb, 10)\npred_xgb = train_xgb.predict(test_xgb)","51ab6cbb":"submission1 = pd.DataFrame(pred_xgb,columns=LB.inverse_transform(np.linspace(0, 38, 39, dtype='int16')),index=new_test.index)\n#submission1.to_csv('XGB.csv', index_label='Id')","21fd0005":"ensemble = 0.9*predictions + 0.1*pred_xgb","5077e579":"sub = pd.DataFrame(ensemble,columns=LB.inverse_transform(np.linspace(0, 38, 39, dtype='int16')),index=new_test.index)\nsub.to_csv('submission.csv', index_label='Id')","1f329893":"## San Francisco Crime Classification ","3dde7cfd":">143\uac1c\uc758 X\uc640 Y\uc758 \uac12\uc774 \uc798\ubabb \ud45c\uae30\ub418\uc5b4 \uc788\ub294 \uac83\uc73c\ub85c \ubcf4\uc544 \uc911\uc559\uac12\uc73c\ub85c \ub300\uccb4\ud574 \uc90d\ub2c8\ub2e4.","8323f975":"### a.concat <a id=\"two-a\"><\/a>","77c43403":"> \uc704\ub3c4\uc640 \uacbd\ub3c4\uc758 \ud569\uacfc \ucc28\uc774\ub97c \uad6c\ud558\ub294 \uc0c8\ub85c\uc6b4 \ud30c\uc0dd \ubcc0\uc218\ub97c \ub9cc\ub4e4\uc5b4 \uc90d\ub2c8\ub2e4","e629d8d8":"> PdDistrict \ud53c\ucc98\uc5d0 \ub300\ud574\uc11c \ub77c\ubca8 \uc778\ucf54\ub354 \ud574\uc90d\ub2c8\ub2e4","8be8784c":"> \ud558\ub8e8 \ub3d9\uc548 \ubc1c\uc0dd\ud558\ub294 \ubc94\uc8c4\uc218\ub294 \uc815\uaddc\ubd84\ud3ec\ub97c \ubcf4\uc774\uace0 \uc788\uc73c\uba70 \uadf8 \uc911\uc559\uac12\uc740 389\uc785\ub2c8\ub2e4.","0a8362b2":"1. \ubcc0\uc218 | \uc124\uba85\n------- | -------\n**Dates ** | \ubc94\uc8c4\uac00 \uc77c\uc5b4\ub09c \ub0a0\n**Category ** | \ubc94\uc8c4 \uc720\ud615 \n**Descript ** | \ubc94\uc8c4\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uc124\uba85 \n**DayOfWeek ** | \uc694\uc77c  \n**PdDistrict ** | \uacbd\ucc30 \uad00\ud560 \uc9c0\uc5ed \uba85\uce6d \n**Resolution ** | \ubc94\uc8c4 \ud574\uacb0 \uc5ec\ubd80 \n**Address ** | \ubc94\uc8c4 \ubc1c\uc0dd \uc8fc\uc18c \n**X ** | \uacbd\ub3c4(Longitude) \n**Y** | \uc704\ub3c4(Latitude)","9403f1de":"\ubaa9\ucc28:\n\n**[I. \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 \ubc0f \ud655\uc778](#one)**\n\n\n**[II. EDA & FE](#two)**\n\n- [a. concat](#two-a)\n- [b. \ud0c0\uac9f\ubcc0\uc218 \ud655\uc778](#two-b)\n- [c. Dates](#two-c)\n- [d. PdDistrict](#two-d)\n- [e. DayOfWeek](#two-e)\n- [f. Address](#two-f)\n- [g. X,Y](#two-g)\n    \n**[III. \ubaa8\ub378\ub9c1](#three)**\n\n- [a. lightgbm](#three-a)\n- [b. xgboost](#three-b)\n- [c. \uc559\uc0c1\ube14](#three-c)","fd0e3b21":"## I. \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 \ubc0f \ud655\uc778 <a id=\"one\"><\/a>","e4398bce":"### g.X,Y <a id=\"two-g\"><\/a>","a1fad2e9":"> DayOfWeek \ud53c\ucc98\uc5d0 \ub300\ud574\uc11c \ub77c\ubca8 \uc778\ucf54\ub354 \ud574\uc90d\ub2c8\ub2e4","cfb64088":"> Yannis Pappas\uc758 \ucee4\ub110\uc5d0\uc11c LGBM \ubaa8\ub378\uc758 \ud30c\ub77c\ubbf8\ud130\ub97c \ucc38\uace0\ud558\uc600\uc2b5\ub2c8\ub2e4. Bayesian Optimization\uc744 \ud1b5\ud574\uc11c \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\uc744 \ud574\uc918\uc57c \ud558\uc9c0\ub9cc \ucd94\ud6c4\uc5d0 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\uc744 \ud574\uc918\uc57c\uaca0\uc2b5\ub2c8\ub2e4.","29165266":"> \uacb0\uce21\uce58\ub294 \uc5c6\ub294\uac83\uc73c\ub85c \ud655\uc778 \ub418\uc5c8\uc2b5\ub2c8\ub2e4","430bf4de":"## III. \ubaa8\ub378\ub9c1 <a id=\"three\"><\/a>","e1fd1731":"> \ub370\uc774\ud130 \ubaa8\ub378\ub9c1\uc744 \uc704\ud574\uc11c \ud0c0\uac9f\ubcc0\uc218\ub97c \ub77c\ubca8\uc778\ucf54\ub354 \ud574\uc90d\ub2c8\ub2e4","59a73eda":"> Address \ud53c\ucc98\uc5d0\uc11c block\uacfc ST \uc989 \uad6c\uc5ed\uacfc \uac70\ub9ac\ub97c \ud3ec\ud568\ud558\uace0 \uc788\ub294\uc9c0 \uc5c6\ub294\uc9c0\ub97c \uad6c\ubd84\ud574\uc8fc\ub294 \uc0c8\ub85c\uc6b4 \ud30c\uc0dd\ubcc0\uc218\ub97c \ub9cc\ub4e4\uc5b4 \uc90d\ub2c8\ub2e4","a4270540":"### c.Dates <a id=\"two-c\"><\/a>","085e9d61":"### a. lightgbm <a id=\"three-a\"><\/a>","465ce47e":"### d.PdDistrict <a id=\"two-d\"><\/a>","d1f37bf9":"### c. \uc559\uc0c1\ube14 <a id=\"three-c\"><\/a>","f7ce6fd9":">\uc5f0\ub3c4\uc5d0 \ub530\ub978 \ubc94\uc8c4\uc218 \ud655\uc778 \uacb0\uacfc  2015\ub144\uc5d0\ub294 \uae09\uaca9\ud788 \ub5a8\uc5b4\uc9c4\uac83\uc744 \ud655\uc778\ud574\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n>\n>\uc2dc\uac04\uc5d0 \ub530\ub978 \ubc94\uc8c4\uc218 \ud655\uc778 \uacb0\uacfc \uc0c8\ubcbd\uc2dc\uac04\uc5d0 \uc81c\uc77c \uc801\uc5c8\uc73c\uba70 12,18\uc2dc\uac00 \uac00\uc7a5 \ub9ce\uc740 \uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4.","57e08510":"### b.\ud0c0\uac9f\ubcc0\uc218 \ud655\uc778 <a id=\"two-b\"><\/a>","1b730aec":"### f.Address <a id=\"two-f\"><\/a>","1f639cca":"### e.DayOfWeek <a id=\"two-e\"><\/a>","4a03b365":"### b. xgboost <a id=\"three-b\"><\/a>"}}