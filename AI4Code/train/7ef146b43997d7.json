{"cell_type":{"a16b9339":"code","93177c7b":"code","214eccfd":"code","5eb55556":"code","fcb89ffe":"code","1a0861cb":"code","e28979e7":"code","7fadc7fa":"code","a556062a":"code","6e082987":"code","d6252efd":"code","2d51e7a7":"code","a5292dd8":"code","b35f6660":"code","b77dfc36":"code","13afdfc0":"code","dc4641cd":"code","12d7087e":"code","505c6357":"code","4817cc61":"code","87b08b18":"code","eb271447":"code","9f226545":"code","754ae32b":"code","3427a2a4":"code","bf6d54c3":"code","d0ae3f9c":"code","0bab1918":"code","bfdbe3f7":"code","805c2735":"code","021a7ab4":"code","86eb3421":"code","ddbb1311":"code","15ed4a40":"code","6ca266f1":"code","fe9f91ba":"code","6000efc3":"code","7f993e5e":"code","0edb45bf":"code","187a11da":"code","9d92fedf":"code","fd0b89aa":"code","2a4aee3d":"code","d56d361b":"code","a8d8de2c":"code","2bb90765":"code","116f3e01":"code","c330b62d":"code","5fbfe20c":"code","52e0531e":"code","288b5b9d":"code","c16af548":"code","47674c68":"code","c2f701c8":"code","5c633848":"code","57c54f0b":"code","f6dea016":"code","90d2e3b3":"code","8b20d434":"markdown","5d863c85":"markdown","0242cfcc":"markdown","3ae407f2":"markdown","310a84e3":"markdown","6b9d7ee7":"markdown","70029e53":"markdown","340ae5ce":"markdown","45983613":"markdown","07b288d5":"markdown"},"source":{"a16b9339":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","93177c7b":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.rcParams['figure.figsize']=12,10","214eccfd":"df=pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndf.head()","5eb55556":"df.shape","fcb89ffe":"df.info()","1a0861cb":"df.describe()","e28979e7":"df['DEATH_EVENT'].value_counts()","7fadc7fa":"df['anaemia'].value_counts()","a556062a":"df['anaemia'].plot(kind='box')","6e082987":"sns.distplot(df['age'],kde=False)","d6252efd":"df['age'].plot(kind='box')","2d51e7a7":"sns.set_style('whitegrid')\nsns.countplot(x=df['DEATH_EVENT'],hue=df['diabetes'])","a5292dd8":"df['diabetes'].plot(kind='box')","b35f6660":"df.groupby('diabetes')['DEATH_EVENT'].value_counts()","b77dfc36":"df['ejection_fraction'].plot(kind='hist')","13afdfc0":"df['ejection_fraction'].plot(kind='box')","dc4641cd":"df[df['ejection_fraction']>=70]","12d7087e":"df=df[df['ejection_fraction']<70]","505c6357":"plt.figure(figsize=(10,8))\nsns.set_style('whitegrid')\nsns.countplot(x=df['DEATH_EVENT'],hue=df['high_blood_pressure'])","4817cc61":"df['high_blood_pressure'].plot(kind='box')","87b08b18":"df.groupby('high_blood_pressure')['DEATH_EVENT'].value_counts()","eb271447":"plt.figure(figsize=(10,8))\ndf['platelets'].plot(kind='hist',alpha=0.6,bins=20)","9f226545":"plt.figure(figsize=(10,8))\ndf['serum_creatinine'].plot(kind='hist',alpha=0.6,bins=20)","754ae32b":"plt.figure(figsize=(10,8))\ndf['serum_sodium'].plot(kind='hist',alpha=0.6,bins=20)","3427a2a4":"sns.set_style('whitegrid')\nsns.countplot(x=df['DEATH_EVENT'],hue=df['sex'])","bf6d54c3":"df['sex'].plot(kind='box')","d0ae3f9c":"sns.set_style('whitegrid')\nsns.countplot(x=df['DEATH_EVENT'],hue=df['smoking'])","0bab1918":"df['smoking'].plot(kind='box')","bfdbe3f7":"sns.distplot(df['time'],kde=False)","805c2735":"df['time'].plot(kind='box')","021a7ab4":"plt.figure(figsize=(12,12))\nsns.heatmap(df.corr(),cmap='coolwarm',annot=True)","86eb3421":"X=df.drop('DEATH_EVENT',axis=1)\ny=df['DEATH_EVENT']","ddbb1311":"X.head()","15ed4a40":"from sklearn.preprocessing import StandardScaler","6ca266f1":"X_norm=StandardScaler().fit_transform(X)","fe9f91ba":"X_norm[0:5]","6000efc3":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,confusion_matrix,log_loss","7f993e5e":"x_train,x_test,y_train,y_test=train_test_split(X_norm,y,test_size=0.2,random_state=0)","0edb45bf":"print(x_train.shape)\nprint(y_train.shape)","187a11da":"from sklearn.neighbors import KNeighborsClassifier","9d92fedf":"neighbors=range(1,10)\naccuracy=[]\nfor i in neighbors:\n    kn=KNeighborsClassifier(n_neighbors=i)\n    kn.fit(x_train,y_train)\n    yhat=kn.predict(x_test)\n    accuracy.append(accuracy_score(y_test,yhat))","fd0b89aa":"print(accuracy)","2a4aee3d":"print('The maximum accuracy is {} and the neighbor number is {}'.format(max(accuracy),accuracy.index(max(accuracy))+1) )","d56d361b":"plt.plot(neighbors,accuracy)\nplt.xlabel('Number of neighbors')\nplt.ylabel('Accuracy score')\nplt.text(7.2,0.783333333,'Maximum accuracy')\nplt.show()","a8d8de2c":"kn=KNeighborsClassifier(n_neighbors=7)\nkn.fit(x_train,y_train)\nyhat=kn.predict(x_test)\nprint('Accuracy for K Neighbors Algorithm is {}'.format(accuracy_score(y_test,yhat)))","2bb90765":"plt.figure(figsize=(5,4))\nmatrix=confusion_matrix(y_test,yhat)\nsns.heatmap(matrix,annot=True)\nplt.xlabel('Predicted Values')\nplt.ylabel('Actual Values')","116f3e01":"from sklearn.tree import DecisionTreeClassifier","c330b62d":"depth=range(2,10)\naccuracy=[]\nfor i in depth:\n    print(i)\n    dst=DecisionTreeClassifier(criterion='entropy',max_depth=i)\n    dst.fit(x_train,y_train)\n    yhat=dst.predict(x_test)\n    accuracy.append(accuracy_score(y_test,yhat))","5fbfe20c":"accuracy","52e0531e":"print('The maximum accuracy is {} and the neighbor number is {}'.format(max(accuracy),accuracy.index(max(accuracy))+2) )","288b5b9d":"plt.plot(depth,accuracy)\nplt.xlabel('Depth')\nplt.ylabel('Accuracy')\nplt.show()","c16af548":"dst=DecisionTreeClassifier(criterion='entropy',max_depth=3)\ndst.fit(x_train,y_train)\nyhat=dst.predict(x_test)\nprint('Accuracy for Decision Tree Algorithm is {}'.format(accuracy_score(y_test,yhat)))","47674c68":"plt.figure(figsize=(5,4))\nsns.heatmap(confusion_matrix(y_test,yhat),annot=True)\nplt.xlabel('Predicted Value')\nplt.ylabel('Actual Value')\nplt.show()","c2f701c8":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression(C=0.01,solver='sag')\nlr.fit(x_train,y_train)\nyhat=lr.predict(x_test)\nprint('Accuracy for Logistic Regression Model {}'.format(accuracy_score(y_test,yhat)))","5c633848":"yhat_prob=lr.predict_proba(x_test)\nprint('Log loss for Logistic Regression {}'.format(log_loss(y_test,yhat)))","57c54f0b":"plt.figure(figsize=(5,4))\nsns.heatmap(confusion_matrix(y_test,yhat),annot=True)\nplt.xlabel('Predicted Value')\nplt.ylabel('Actual Value')","f6dea016":"from sklearn.svm import SVC\nsv=SVC(kernel='rbf')\nsv.fit(x_train,y_train)\nyhat=sv.predict(x_test)\nprint('Accuracy for Support Vector Classifier {}'.format(accuracy_score(y_test,yhat)))","90d2e3b3":"plt.figure(figsize=(5,4))\nsns.heatmap(confusion_matrix(y_test,yhat),annot=True)\nplt.xlabel('Predict Value')\nplt.ylabel('Actual Value')","8b20d434":"**Logistic Regression**","5d863c85":"**Checking all the co relation values**","0242cfcc":"**removing the outliers**","3ae407f2":"**Splitting the DataSet into training and testing set to overcome Overfitting problem**","310a84e3":"**Support Vector Classifier**","6b9d7ee7":"**Decision Tree Classifier**","70029e53":"**K Nearest Neighbors**","340ae5ce":"**Normalizing the dataset**","45983613":"**Found two outliers**","07b288d5":"**Checking all the Features of the dataset**"}}