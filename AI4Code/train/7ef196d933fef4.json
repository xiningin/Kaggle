{"cell_type":{"b2def565":"code","26de6cd2":"code","05cbeabf":"code","862c9e7c":"code","66308250":"code","8cb536a4":"code","74802f3f":"code","cd0bf2d0":"code","3449dd3e":"code","4251b0b1":"code","e068b16d":"code","9a02422e":"code","8428e01d":"code","83b2c165":"code","51c7de57":"code","7b681258":"code","0963c1e3":"code","ac3d7b1f":"markdown","f3282586":"markdown","61ffe96f":"markdown","5b3e40e0":"markdown","c43e070b":"markdown","962b1607":"markdown","629146e6":"markdown","236144ed":"markdown","ee2f0513":"markdown","62f354e9":"markdown","89884324":"markdown","03254d3b":"markdown","84272db5":"markdown","1c9349e1":"markdown","c1c14593":"markdown","55dc1d46":"markdown","2bb2244a":"markdown","1441289f":"markdown","f509044a":"markdown","021ce8ab":"markdown","e1ea0166":"markdown","28525675":"markdown","c862896c":"markdown","3bb06f16":"markdown","9f3fab1e":"markdown","82c83b8a":"markdown","8d1ae796":"markdown","02ef80e7":"markdown"},"source":{"b2def565":"import pandas as pd \n\ndf = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/train.csv')\ndf.head()","26de6cd2":"df.info()","05cbeabf":"X = pd.get_dummies(df)\nX.info()","862c9e7c":"X.Response.value_counts()","66308250":"from sklearn.utils import resample\n# Separate majority and minority classes\ndf_majority = X[X.Response==0]\ndf_minority = X[X.Response==1]\n \n# Upsample minority class\ndf_minority_upsampled = resample(df_minority, \n                                 replace=True,     # sample with replacement\n                                 n_samples=334399,    # to match majority class\n                                 random_state=123) # reproducible results\n \n# Combine majority class with upsampled minority class\ndf_upsampled = pd.concat([df_majority, df_minority_upsampled])\n \n# Display new class counts\ndf_upsampled.Response.value_counts()","8cb536a4":"y = df_upsampled.Response\n\ndf_upsampled.drop(columns=['Response','id'],inplace=True,axis=1)\n\ndf_upsampled.rename({'Vehicle_Age_< 1 Year': 'Vehicle_Age_less_than 1 Year' , 'Vehicle_Age_> 2 Years': 'Vehicle_Age_greater_than 2 Years'},axis=1, inplace=True)\n\ndf_upsampled.info()","74802f3f":"df_upsampled.head()","cd0bf2d0":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\n\ndf_upsampled[df_upsampled.columns] = scaler.fit_transform(df_upsampled[df_upsampled.columns])\n\ndf_upsampled.head()","3449dd3e":"from sklearn.model_selection import train_test_split\n\nX_train , X_test , y_train , y_test = train_test_split(df_upsampled , y , test_size = 0.33 , random_state =123)","4251b0b1":"X_train.shape, X_test.shape","e068b16d":"from xgboost import *\n\nxgb = XGBClassifier(max_depth = 6, \n                            n_estimators = 30000, \n                            objective = 'binary:logistic',colsample_bytree = 0.5, gamma = 0.3 , reg_lambda = 1.2, reg_alpha = 1.2, min_child_weight = 1, \n               learning_rate = 0.1,eval_metric = 'auc' ,tree_method='gpu_hist', gpu_id=0).fit(X_train,y_train)\n\n","9a02422e":"from sklearn.metrics import roc_auc_score \nCat_preds1 = xgb.predict_proba(X_train)\nCat_class1 = xgb.predict(X_train)\nCat_score1 = roc_auc_score(y_train, Cat_preds1[:,1])\nprint(Cat_score1)","8428e01d":"Cat_preds1 = xgb.predict_proba(X_test)\nCat_class1 = xgb.predict(X_test)\nCat_score1 = roc_auc_score(y_test, Cat_preds1[:,1])\nprint(Cat_score1)","83b2c165":"from catboost import CatBoostClassifier\n\ncat = CatBoostClassifier(iterations = 30000, \n                                random_seed = 69, \n                                 task_type = 'GPU',\n                                learning_rate=0.25,\n                                depth=8,\n                                loss_function='Logloss',\n                                bootstrap_type='Poisson',\n                                subsample = 0.8,\n                                custom_loss = ['AUC'] ).fit(X_train, y_train)\n","51c7de57":"from sklearn.metrics import roc_auc_score\nCat_preds1 = cat.predict_proba(X_train)\nCat_class1 = cat.predict(X_train)\nCat_score1 = roc_auc_score(y_train, Cat_preds1[:,1])\nprint(Cat_score1)","7b681258":"Cat_preds1 = cat.predict_proba(X_test)\nCat_class1 = cat.predict(X_test)\nCat_score1 = roc_auc_score(y_test, Cat_preds1[:,1])\nprint(Cat_score1)","0963c1e3":"feat_importances = pd.Series(cat.feature_importances_, index=X_train.columns)\nfeat_importances.nlargest(20).plot(kind='barh')","ac3d7b1f":"# Training","f3282586":"# **Thanks for reading through it , any questions, comments, suggestions are highly appreciated!**","61ffe96f":"**That is a huge train and test data, perfect for training and evaluation**","5b3e40e0":"![image.png](attachment:image.png)","c43e070b":"**Reminder - If you like my work don't forget to upvote and provide your feedback for any improvement!!**","962b1607":"**I haven't trained any models on kaggle due to large size of data, instead I have trained it on my local pc and pasted the results!!**","629146e6":"**Now we are talking - CatBoost gives almost a perfect score while training and reaches 97% accuracy on test set!**","236144ed":"**OHH NO!! - The dataset is highly imbalanced! Let's upsample the minority class!**","ee2f0513":"# **CatBoost**","62f354e9":"**It was taking almost 10-12 min on my RTX2060 so it didn't make any sense to train on Kaggle!!**","89884324":"![image.png](attachment:image.png)","03254d3b":"# So we can conclude by saying - Vintage (i.e. Number of Days, Customer has been associated with the company) is the most important factor followed by annual premium and age!","84272db5":"**Now, let's scale down the data to be in range of 0-1. Most of the columns are already in that range so just a few needs to be scaled!**","1c9349e1":"# **XGBoost**","c1c14593":"![image.png](attachment:image.png)","55dc1d46":"**Perfect! Now, let's split the train data and labels as well as rename few columns becuase XGBoost doesn't allow '>' or '<' signs!**","2bb2244a":"**I also found out that without Scaling the data, the same model was able to achieve 99.4% accuracy on test set!!**","1441289f":"**We get a very decent accuracy by XGBoost although I didn't extensively fine tune the model!**","f509044a":"![image.png](attachment:image.png)","021ce8ab":"**Now let's plot the feature importance!!**","e1ea0166":"# Hello there, today we will be selling some health insurance!\ud83d\ude91","28525675":"**Disclaimer: I have not done any EDA and just focused on building models for this dataset!**","c862896c":"**Let's first read the dataset**","3bb06f16":"![image.png](attachment:image.png)","9f3fab1e":"**Let's split the data into train and test!**","82c83b8a":"**NO Null Values - Great!!**","8d1ae796":"**Now, let's jump into it!!**","02ef80e7":"**Let's one-hot encode the categorical columns!**"}}