{"cell_type":{"0c261e3d":"code","6a741c39":"code","abb693d9":"code","5171c876":"code","ca020097":"code","8a9d3a48":"code","026965fb":"code","f706414f":"code","d7a32dd6":"code","30790d84":"code","83b30600":"code","cda08493":"code","847faeee":"code","4858fc2a":"code","c578db26":"code","66f52a24":"code","ef51fb28":"code","a92fdfe0":"code","dfa76e77":"code","8c2a2d12":"code","34c12049":"code","77f99c5a":"code","04216b28":"markdown","a7f647a2":"markdown","13af6e13":"markdown","27513847":"markdown","a9f2e490":"markdown","66eb1995":"markdown","f1603b2f":"markdown","4d52a465":"markdown","456e7bf2":"markdown","082ba603":"markdown","997d093f":"markdown","5a1f120b":"markdown","60a2a3cb":"markdown","e6b11cdf":"markdown","4fc75c93":"markdown","d4d2c8d0":"markdown","33568a24":"markdown","5f54ef67":"markdown","aa8d87f3":"markdown","4e288b7b":"markdown"},"source":{"0c261e3d":"# Import libraries\n\nimport pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Write the csv files to dataframes\nitems=pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/items.csv')\nitem_categories=pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\nshops=pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/shops.csv')\ntest=pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv')\nsales_train=pd.read_csv('..\/\/input\/competitive-data-science-predict-future-sales\/sales_train.csv', parse_dates=['date'])","6a741c39":"#print first 5 rows from each file\nprint(items.head())\nprint(item_categories.head())\nprint(shops.head())\nprint(test.head())\nprint(sales_train.head())","abb693d9":"#print the total number of rows\nprint(items.count())\nprint(item_categories.count())\nprint(shops.count())\n","5171c876":"#Compare values hot id and item id for sin train and test data\nprint(test.head())\nprint(sales_train.head())\nprint(sales_train.count(axis=0))\n\nsales_train.describe()","ca020097":"\nprint('Test shop ids unique: ',test.shop_id.nunique())\n\nprint('Train shop ids unique: ',sales_train.shop_id.nunique())\n\nprint('Test unique item_ids: ',test.item_id.nunique())\nprint('Train unique item_ids: ',sales_train.item_id.nunique())\n","8a9d3a48":"#Check for any null values\n\nprint(sales_train.isnull().sum())\n\n#Check for duplicates \n\ndf_items_dup=items[items.duplicated(subset='item_name')]\ndf_shops_dup=shops[shops.duplicated(subset='shop_name')]\nprint(df_items_dup)\nprint(df_shops_dup)\n\n","026965fb":"sales_monthly=pd.DataFrame()\n\n# Monthly Sales grouped by item_cnt\n\n\nsales_monthly=sales_train.groupby([\"date_block_num\"])[\"item_cnt_day\"].sum()\nsales_monthly.index = pd.date_range('1\/1\/2013', periods=34, freq='M')\nsales_monthly\n","f706414f":"sales_monthly.describe()","d7a32dd6":"# line plot for the time series\nfrom  matplotlib import pyplot\nsales_monthly.plot()\npyplot.show()\n","30790d84":"#Density plot for the time series\npyplot.subplot(211)\nsales_monthly.hist()\npyplot.subplot(212)\nsales_monthly.plot(kind='kde')\npyplot.show()","83b30600":"#ADF test \nfrom statsmodels.tsa.stattools import adfuller\nX = sales_monthly.values\nresult = adfuller(X)\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])\nprint('Critical Values:')\nfor key, value in result[4].items():\n    print('\\t%s: %.3f' % (key, value))","cda08493":"#ADF test for stationarity after one differential\n\nfrom statsmodels.tsa.stattools import adfuller\nfrom pandas import Series\n# create a differenced time series\ndef difference(dataset):\n    diff = list()\n    for i in range(1, len(dataset)):\n        value = dataset[i] - dataset[i - 1]\n        diff.append(value)\n    return Series(diff)\n\nX = sales_monthly.values\n# difference data\nstationary = difference(X)\nstationary.index = sales_monthly.index[1:]\n# check if stationary\nresult = adfuller(stationary)\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])\nprint('Critical Values:')\nfor key, value in result[4].items():\n    print('\\t%s: %.3f' % (key, value))","847faeee":"#ACF and PACF plots\nfrom pandas import read_csv\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.graphics.tsaplots import plot_pacf\nfrom matplotlib import pyplot\npyplot.figure()\npyplot.subplot(211)\nplot_acf(sales_monthly, lags=20, ax=pyplot.gca())\npyplot.subplot(212)\nplot_pacf(sales_monthly, lags=20, ax=pyplot.gca())\npyplot.show()","4858fc2a":"def evaluate_arima_model(X, arima_order):\n# prepare training dataset\n    X = X.astype('float32')\n    train_size = int(len(X) * 0.80)\n    train, test = X[0:train_size], X[train_size:]\n    history = [x for x in train]\n# make predictions\n    predictions = list()\n    for t in range(len(test)):\n        model = ARIMA(history, order=arima_order)\n        model_fit = model.fit(disp=0)\n        yhat = model_fit.forecast()[0]\n        predictions.append(yhat)\n        history.append(test[t])\n# calculate out of sample error\n    rmse = sqrt(mean_squared_error(test, predictions))\n    return rmse","c578db26":"\ndef evaluate_models(dataset, p_values, d_values, q_values):\n    dataset = dataset.astype('float32')\n    best_score, best_cfg = float(\"inf\"), None\n    for p in p_values:\n        for d in d_values:\n            for q in q_values:\n                order = (p,d,q)\n                try:\n                    rmse = evaluate_arima_model(dataset, order)\n                    if rmse < best_score:\n                        best_score, best_cfg = rmse, order\n                    print('ARIMA%s RMSE=%.3f' % (order,rmse))\n                except:\n                    continue\n    print('Best ARIMA%s RMSE=%.3f' % (best_cfg, best_score))","66f52a24":"import warnings\nfrom pandas import read_csv\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\n# evaluate parameters\np_values = range(0,5)\nd_values = range(0, 2)\nq_values = range(0, 5)\nwarnings.filterwarnings(\"ignore\")\nevaluate_models(sales_monthly.values, p_values, d_values, q_values)\n\n\n","ef51fb28":"model = ARIMA(sales_monthly, order=(0,1,0))\nmodel_fit = model.fit(disp=0)\nyhat = model_fit.forecast()[0]\nprint(yhat)","a92fdfe0":"model = ARIMA(sales_monthly, order=(1,1,0))\nmodel_fit = model.fit(disp=0)\nyhat = model_fit.forecast()[0]\nprint(yhat)","dfa76e77":"#install auto arima packages\n! pip install pmdarima","8c2a2d12":"#Run auto Arima with seasonal = True\nfrom pmdarima import auto_arima\nmodel = auto_arima(sales_monthly, seasonal = True, trace=True, error_action='ignore', suppress_warnings=True)\nmodel.fit(sales_monthly)\nforecast = model.predict(n_periods=1)\nprint(forecast)","34c12049":"#For the test file, add a new column to write the projected value for item_count\ntest['item_cnt_month'] = test.apply(lambda _: '', axis=1)\n\n#for i in range(0,214200):\nfor i in range(0,5000):\n    shop_id=test.iloc[i,1]\n    item_id=test.iloc[i,2]\n    sales_shop=sales_train[sales_train['shop_id']==shop_id]\n    sales_shop_item=sales_shop[sales_shop['item_id']==item_id]\n    if sales_shop_item.empty:\n        test.iloc[i,3]=0\n        continue\n    sales_shop_item.date = [pd.datetime(x.year, x.month,1) for x in sales_shop_item.date.tolist()]\n    sales_by_shop_item = sales_shop_item.resample('M', on='date').sum()\n    sales_monthly_shop_item=sales_by_shop_item.groupby([\"date\"])[\"item_cnt_day\"].sum()\n    sales_monthly_shop_item.index=sales_monthly_shop_item.index.strftime(\"%Y-%m\")\n    date_list= pd.date_range('2013-01', periods=34, freq='M')\n    for date in date_list:\n        if date.strftime(\"%Y-%m\") not in sales_monthly_shop_item.index:\n            sales_monthly_shop_item[date.strftime(\"%Y-%m\")]=0\n    sales_monthly_shop_item.sort_index(inplace=True)\n    \n    from pmdarima import auto_arima\n    model = auto_arima(sales_monthly_shop_item, trace=True, error_action='ignore', suppress_warnings=True)\n    model.fit(sales_monthly_shop_item)\n    forecast = model.predict(n_periods=1)\n    test.iloc[i,3]=forecast\n\n","77f99c5a":"\ntest.to_csv('test_pred.csv')\ntest.head()","04216b28":"When we plot the monthly sales wrt date, we see that there is a decreasing trend . We can also see there is seasonality","a7f647a2":"##### Running for the first 5000 records in the file as 240000 records are taking a lot of time.","13af6e13":"Not all the shop id\/item id combinations that exist in the sales file exist in the test file. We can use only the shop id\/item ids that exist in test file to forecast our results. First lets get an over all trend and understanding for all the stores and then we can model for individual stores and item ids.","27513847":"# Hyper Parameter Tuning","a9f2e490":"# Auto ARIMA implemented for each shop_id\/item_id combination","66eb1995":"The distribution is not guassian but close. The distribution has a long tail. We need to explore data transformations","f1603b2f":"Auto arima predicted the next month sales to be 71,056 across all stores","4d52a465":"Both the orders give pretty close prediction. Let us see what the Auto Arima gives","456e7bf2":"# Auto ARIMA implmentation","082ba603":"There are 22170 items and they fall into 84 categories. There are 60 shops in total\nThe shops file gives us the mapping between shop name and shop id.\nWe are items file is mapping between item name and item_id. It will not be of much value to us as we can refer to the item by its id. Same with the shops file which has a mapping between the shop name and shop id.\nThe item_categories have a mapping between the item and its category. This could be useful to us but ignoring for now for our prediciton. We need to find out the next months shop->item->Item count number\n","997d093f":"# ARIMA Forecasting for Total Monthly Sales \n","5a1f120b":"We can see data is resampled with monthly. we will have 34 records. The date block number is 0 to 33 covering 34 months( Jan 2013 to Oct 2015)","60a2a3cb":"We can see the best ARIMA order is (0,1,0). So its only a AR and MA seems to be not applicable. Lets check with two orders (0,1,0) and (1,1,0)- the next best","e6b11cdf":"From ACF plot, p value seems to be close to 1 and from PACF plot, q value also seem to be close to one","4fc75c93":"Checking for overall storewide trend","d4d2c8d0":"Understanding the Data\n","33568a24":"ADF is greater than critical value 5%. so the data is not stationary . Lets make the data stationary and check the ADF value","5f54ef67":"Limitations of the model:\n1) We ignore some features like item cateogries and item price. We need to check if they impact the model\n\n2) The model is very process intensive as we are looping across shop id and item id  to implement the model at shop id vs item id\n\n3) Need to check if daily resampling gives better results than monthly resampling\n\nTo implement in my next notebook\n\n1) XGBoost to see if regression can be applied and improve the model\n\n2) Prophet and hierarchical time series implmentation since this is a 4 level hierarchy (corp->shops->item categories->items\n\n3) Implement LSTM deep learning model\n\n\n\n","aa8d87f3":"Citation: https:\/\/machinelearningmastery.com\/introduction-to-time-series-forecasting-with-python\/\n\nI used the above book by Jason Brownlee , Ph.D. as a reference for building the below model. Some of the code snippets used are from the book.","4e288b7b":"ADF value is less than 5% critical value. So the data is not stationary any more. Null hypothesis can be rejected. In the ARIMA model, the d value could be 1"}}