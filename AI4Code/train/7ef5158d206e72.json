{"cell_type":{"53eb7e65":"code","aad35c6a":"code","72690e90":"code","d42dc8e9":"code","3b739203":"code","44476edc":"code","276e522e":"code","b0bbc10c":"code","6e2e6fb8":"code","65c9099e":"code","f4067f1d":"code","620923a9":"code","7e761d19":"code","ef282b6f":"code","a036dcc6":"code","1114e1ad":"code","02cbcfbd":"code","8c533806":"code","62c337f0":"markdown","98d52cab":"markdown","aed0aae8":"markdown","3ac2ffe9":"markdown","31ef2871":"markdown","9603162b":"markdown","f6bb07f1":"markdown","65622bfe":"markdown","ac5400a6":"markdown","3035c800":"markdown"},"source":{"53eb7e65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aad35c6a":"sample_sub = '..\/input\/digit-recognizer\/sample_submission.csv'\ntest = '..\/input\/digit-recognizer\/test.csv'\ntrain = '..\/input\/digit-recognizer\/train.csv'","72690e90":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.models import Sequential\nfrom keras.utils.np_utils import to_categorical\nfrom keras.callbacks import LearningRateScheduler\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, AvgPool2D, BatchNormalization, Reshape","d42dc8e9":"train_data = pd.read_csv (train)\ntest_data = pd.read_csv (test)","3b739203":"print (train_data.shape)\nprint (test_data.shape)","44476edc":"y_train = train_data ['label']\n\nX_train = train_data.drop(labels = [\"label\"], axis = 1)\n\nX_test = test_data","276e522e":"X_train.max ().max()","b0bbc10c":"X_train = X_train\/255\nX_test  = X_test\/255","6e2e6fb8":"X_train = X_train.values.reshape (-1, 28,28,1)\nX_test = X_test.values.reshape (-1, 28,28,1)","65c9099e":"y_train = to_categorical (y_train, num_classes = 10)","f4067f1d":"y_train.shape","620923a9":"datagen = ImageDataGenerator(\n        rotation_range = 10,  \n        zoom_range = 0.1,  \n        width_shift_range = 0.1, \n        height_shift_range = 0.1)","7e761d19":"model = Sequential ()\n\n# 2D convolutional layer\nmodel.add(Conv2D(32,kernel_size=3, activation='relu', input_shape=(28,28,1)))\n# batch normalization layer\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32,kernel_size=3, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32,kernel_size=5, strides=2, padding='same', activation='relu'))\nmodel.add(BatchNormalization())\n# dropout layer\nmodel.add(Dropout(0.5))\n\n\nmodel.add(Conv2D(64, kernel_size=3, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64, kernel_size=3, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64, kernel_size=5, strides=2, padding='same' ,activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\n# Flattens input\nmodel.add(Flatten())\n# fully connected layer\nmodel.add(Dense(128, activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))","ef282b6f":"model.compile(optimizer = \"adam\", loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])","a036dcc6":"X_train, X_val, Y_train, Y_val = train_test_split(X_train, y_train, test_size = 0.2, random_state = 64)","1114e1ad":"history = model.fit_generator(datagen.flow(X_train, Y_train, batch_size = 64), \n    epochs = 50, steps_per_epoch = X_train.shape[0]\/\/64, validation_data = (X_val, Y_val), verbose=1)","02cbcfbd":"# initial predictions\npredictions = model.predict(X_test)\n\n# returns indices of maximum values along axis\npredictions = np.argmax(predictions, axis = 1)\n\n# convert to pandas series format\npredictions = pd.Series(predictions, name = \"Label\")","8c533806":"submission = pd.concat([pd.Series(range(1, 28001), name = \"ImageId\"), predictions], axis = 1)\n\nsubmission.to_csv(\"MNIST_top_CNN_submission.csv\", index = False)","62c337f0":"### Conveting target to binary","98d52cab":"### Data Augmentation","aed0aae8":"### Predict","3ac2ffe9":"### Model","31ef2871":"### Reshape","9603162b":"### Submit","f6bb07f1":"### train\/Validation Split","65622bfe":"### Run Model","ac5400a6":"### Normalization","3035c800":"### Complie Model"}}