{"cell_type":{"9adbb823":"code","bd4dc822":"code","058cb506":"code","8031ee08":"code","d0512603":"code","56117fb9":"code","bbe8c629":"code","df6ad4e9":"code","eadf6765":"code","b69e00b2":"code","851aced3":"code","fe4efddc":"code","5b5d2bfe":"code","bb5e6e0f":"code","c0cd7094":"code","e7c319ae":"code","ba1b756b":"code","a63c156b":"code","d5c49b76":"code","2ffd89ee":"code","51304714":"code","3a9fa617":"code","317a6e65":"code","1b133032":"code","48dfc4d8":"code","dd679f4c":"code","f7af4d44":"code","612649c5":"code","a30cdc0c":"code","ff1595a1":"code","61cd8d8f":"code","49663a56":"code","a528f640":"code","e7eae3a7":"code","ff09e7bf":"markdown","4ed88c72":"markdown","96280405":"markdown","b2f42f9c":"markdown","0eb7b1ae":"markdown","fd74b793":"markdown","bc5dc461":"markdown"},"source":{"9adbb823":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bd4dc822":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt","058cb506":"!unzip ..\/input\/platesv2\/plates.zip","8031ee08":"!ls","d0512603":"!ls plates","56117fb9":"!ls plates\/train\/","bbe8c629":"!ls plates\/train\/cleaned\/","df6ad4e9":"PATH =  'plates'\ntrain_dir = os.path.join(PATH, 'train')\ntrain_dir","eadf6765":"# directory with our training dirty pictures\ntrain_dirty_dir = os.path.join(train_dir, 'dirty')  \n# directory with our training cleaned pictures\ntrain_cleaned_dir = os.path.join(train_dir, 'cleaned')  \ntrain_dirty_dir, train_cleaned_dir","b69e00b2":"num_dirty = len(os.listdir(train_dirty_dir))\nnum_cleaned = len(os.listdir(train_cleaned_dir))","851aced3":"num_dirty,num_cleaned","fe4efddc":"batch_size = 20\nepochs = 300\nIMG_HEIGHT = 160\nIMG_WIDTH = 160","5b5d2bfe":"train_image_generator =ImageDataGenerator(\n                    rescale=1.\/255,\n                    rotation_range=15,\n                    width_shift_range=.1,\n                    height_shift_range=.1,\n                    horizontal_flip=True,\n                    zoom_range=0.1, \n                    brightness_range=[0.8,1.0]\n                    )\n","bb5e6e0f":"train_data_gen = train_image_generator.flow_from_directory(batch_size=batch_size,\n                                                     directory=train_dir,\n                                                     shuffle=True,\n                                                     target_size=(IMG_HEIGHT, IMG_WIDTH),\n                                                     class_mode='binary', \n)","c0cd7094":"# This function will plot images in the form of a grid with 1 row and 7 columns where images are placed in each column.\ndef plotImages(images_arr):\n    fig, axes = plt.subplots(1, 7, figsize=(15,15))\n    axes = axes.flatten()\n    for img, ax in zip( images_arr, axes):\n        ax.imshow(img)\n        ax.axis('off')\n    plt.tight_layout()\n    plt.show()","e7c319ae":"sample_training_images, _ = next(train_data_gen)\nplotImages(sample_training_images[:7])","ba1b756b":"augmented_images = [train_data_gen[0][0][0] for i in range(7)]\nplotImages(augmented_images)","a63c156b":"IMG_SHAPE=(IMG_HEIGHT, IMG_WIDTH, 3)\n# Create the base model from the pre-trained model MobileNet V2\nbase_model = tf.keras.applications.MobileNetV2(input_shape=IMG_SHAPE,\n                                               include_top=False,\n                                               weights='imagenet')","d5c49b76":"base_model.trainable = False","2ffd89ee":"image_batch = sample_training_images[:batch_size]\nimage_batch.shape","51304714":"# Let's take a look at the base model architecture\nbase_model.summary()","3a9fa617":"feature_batch = base_model(image_batch)\nprint(feature_batch.shape)","317a6e65":"global_average_layer = tf.keras.layers.GlobalAveragePooling2D()\nfeature_batch_average = global_average_layer(feature_batch)\nprint(feature_batch_average.shape)","1b133032":"prediction_layer = tf.keras.layers.Dense(1)\nprediction_batch = prediction_layer(feature_batch_average)\nprint(prediction_batch.shape)","48dfc4d8":"model = tf.keras.Sequential([\n  base_model,\n  global_average_layer,\n  prediction_layer\n])\n\nbase_learning_rate = 0.0001\nmodel.compile(optimizer=tf.keras.optimizers.RMSprop(lr=base_learning_rate),\n              loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\nmodel.summary()","dd679f4c":"len(model.trainable_variables)","f7af4d44":"# es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=10)\nes = tf.keras.callbacks.EarlyStopping(monitor='loss', mode='min', verbose=1, patience=10)\n# mc = ModelCheckpoint('best_model.h5', monitor='val_accuracy', mode='max', verbose=1, save_best_only=True)\nmc = tf.keras.callbacks.ModelCheckpoint('best_model.h5', monitor='accuracy', mode='max', verbose=1, save_best_only=True)\n\n# fit model\nhistory = model.fit(train_data_gen,\n                    epochs=400, \n                    callbacks=[es, mc]\n                    )","612649c5":"saved_model = tf.keras.models.load_model('best_model.h5')","a30cdc0c":"test_datagen = ImageDataGenerator()\ntest_generator = test_datagen.flow_from_directory(  \n        'plates',\n        classes=['test'],\n        target_size = (IMG_HEIGHT, IMG_WIDTH),\n        batch_size = 1,\n        shuffle = False,        \n        class_mode = None)  ","ff1595a1":"test_generator.reset()\npredict = saved_model.predict_generator(test_generator, steps = len(test_generator.filenames))\nlen(predict)","61cd8d8f":"sub_df = pd.read_csv('..\/input\/platesv2\/sample_submission.csv')\nsub_df.head()","49663a56":"sub_df['label'] = predict\nsub_df['label'] = sub_df['label'].apply(lambda x: 'dirty' if x > 0.5 else 'cleaned')\nsub_df.head()","a528f640":"sub_df['label'].value_counts()","e7eae3a7":"sub_df.to_csv('sub.csv', index=False)","ff09e7bf":"# import packages","4ed88c72":"# Data preparation","96280405":"# Compile the mode","b2f42f9c":"# Visualize training images","0eb7b1ae":"# Add a classification head","fd74b793":"# Freeze the convolutional base","bc5dc461":"# Create the model"}}