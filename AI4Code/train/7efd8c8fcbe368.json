{"cell_type":{"76afcacd":"code","8a5a7cb0":"code","97fb94c0":"code","e4a6e452":"code","2ea8de11":"code","1d452f7d":"code","cfdbdfd8":"code","b01873a4":"code","9e196af8":"code","60b02ac7":"code","6d816e88":"code","93b5b630":"code","a8d88655":"code","c11bc162":"code","1e1c1b21":"code","4a00a850":"code","dd36500e":"code","00c390cc":"code","5cb7a5d5":"code","c90a5b0c":"code","2569b6ab":"code","b9dfc55d":"code","5f7ea95e":"code","df8cb853":"code","7475c306":"code","3eaca30c":"code","9d88b8bd":"code","0412a24f":"code","5519a43b":"code","e35f69a7":"code","58330312":"code","ed23fa35":"code","39dd52ca":"code","c1d77acc":"code","22715c68":"code","3af2f89a":"code","53aef3f0":"code","4a3c9b77":"code","48f96a73":"code","838f7d8a":"code","4bd597cb":"code","ba82b743":"code","81481667":"code","c16bc690":"code","5f7d97f3":"markdown","54b91a4f":"markdown","60cd4dd7":"markdown","42a3ed7c":"markdown","238dafa9":"markdown","7b9ae42a":"markdown","d68291a9":"markdown","9ae8f8ea":"markdown","2b0536e8":"markdown","2b490e88":"markdown","829898af":"markdown"},"source":{"76afcacd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8a5a7cb0":"df_train = pd.read_csv('\/kaggle\/input\/mobile-price-classification\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/mobile-price-classification\/test.csv')","97fb94c0":"df_train.head()","e4a6e452":"df_test.head()","2ea8de11":"df_train.describe()","1d452f7d":"df_train.info()","cfdbdfd8":"sns.heatmap(df_train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","b01873a4":"df_train.corr()","9e196af8":"fig = plt.figure(figsize=(15,12))\nsns.heatmap(df_train.corr())","60b02ac7":"df_train['price_range'].unique()","6d816e88":"sns.pairplot(df_train,hue='price_range')","93b5b630":"plt.hist(df_train['battery_power'])\nplt.show()","a8d88655":"plt.hist(df_train['ram'])\nplt.show()","c11bc162":"sns.countplot(df_train['price_range'])\nplt.show()","1e1c1b21":"sns.boxplot(df_train['price_range'],df_train['talk_time'])","4a00a850":"sns.countplot(df_train['dual_sim'])\nplt.show()","dd36500e":"sns.boxplot(df_train['dual_sim'],df_train['price_range'])","00c390cc":"plt.hist(df_train['clock_speed'])","5cb7a5d5":"sns.boxplot(df_train['price_range'],df_train['clock_speed'])","c90a5b0c":"sns.boxplot(df_train['fc'],df_train['price_range'])\nplt.show()","2569b6ab":"df_train['n_cores'].unique()","b9dfc55d":"sns.boxplot(df_train['wifi'],df_train['price_range'])\nplt.show()","5f7ea95e":"labels = [\"3G-supported\",'Not supported']\nvalues = df_train['three_g'].value_counts().values","df8cb853":"fig1, ax1 = plt.subplots()\ncolors = ['gold', 'lightskyblue']\nax1.pie(values, labels=labels, autopct='%1.1f%%',shadow=True,startangle=90,colors=colors)\nplt.show()","7475c306":"labels = [\"4G-supported\",'Not supported']\nvalues = df_train['four_g'].value_counts().values\nfig1, ax1 = plt.subplots()\ncolors = ['gold', 'lightskyblue']\nax1.pie(values, labels=labels, autopct='%1.1f%%',shadow=True,startangle=90,colors=colors)\nplt.show()","3eaca30c":"plt.figure(figsize=(10,6))\ndf_train['fc'].hist(alpha=0.5,color='blue',label='Front camera')\ndf_train['pc'].hist(alpha=0.5,color='red',label='Primary camera')\nplt.legend()\nplt.xlabel('MegaPixels')","9d88b8bd":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nscaler = StandardScaler()\nx = df_train.drop('price_range',axis=1)\ny = df_train['price_range']\n\nscaler.fit(x)\nx_transformed = scaler.transform(x)\n\nx_train,x_test,y_train,y_test = train_test_split(x_transformed,y,test_size=0.3)","0412a24f":"#Linear Regression\nfrom sklearn.linear_model import LinearRegression\nlm = LinearRegression()","5519a43b":"lm.fit(x_train,y_train)","e35f69a7":"lm.score(x_train,y_train)","58330312":"#Logistic Regression\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix,classification_report\n\n\nmodel = LogisticRegression()\nmodel.fit(x_train,y_train)\ny_train_pred = model.predict(x_train)\ny_test_pred = model.predict(x_test)\n\n\nprint(\"Train Set Accuracy:\"+str(accuracy_score(y_train_pred,y_train)*100))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test_pred,y_test)*100))\nprint(\"\\nConfusion Matrix:\\n%s\"%confusion_matrix(y_test_pred,y_test))\nprint(\"\\nClassification Report:\\n%s\"%classification_report(y_test_pred,y_test))\n","ed23fa35":"#KNN\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=15)\nknn.fit(x_train,y_train)\n","39dd52ca":"knn.score(x_test,y_test)","c1d77acc":"pred = knn.predict(x_test)","22715c68":"error_rate = []\nfor i in range(1,20):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(x_train,y_train)\n    pred_i = knn.predict(x_test)\n    error_rate.append(np.mean(pred_i != y_test))","3af2f89a":"plt.figure(figsize=(10,6))\nplt.plot(range(1,20),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=5)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","53aef3f0":"print(classification_report(y_test,pred))","4a3c9b77":"matrix=confusion_matrix(y_test,pred)\nprint(matrix)","48f96a73":"#Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier()\ndtree.fit(x_train,y_train)","838f7d8a":"dtree.score(x_test,y_test)","4bd597cb":"#Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(x_train, y_train)","ba82b743":"rfc.score(x_test,y_test)","81481667":"#SVM\nfrom sklearn.svm import SVC\nmodel = SVC()\nmodel.fit(x_train,y_train)\ny_train_pred = model.predict(x_train)\ny_test_pred = model.predict(x_test)\n\n\nprint(\"Train Set Accuracy:\"+str(accuracy_score(y_train_pred,y_train)*100))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test_pred,y_test)*100))\nprint(\"\\nConfusion Matrix:\\n%s\"%confusion_matrix(y_test_pred,y_test))\nprint(\"\\nClassificationReport:\\n%s\"%classification_report(y_test_pred,y_test))","c16bc690":"#Gradient Boosting\nfrom sklearn.ensemble import GradientBoostingClassifier\nmodel = GradientBoostingClassifier()\nmodel.fit(x_train,y_train)\ny_train_pred = model.predict(x_train)\ny_test_pred = model.predict(x_test)\n\n\nprint(\"Train Set Accuracy:\"+str(accuracy_score(y_train_pred,y_train)*100))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test_pred,y_test)*100))\nprint(\"\\nConfusion Matrix:\\n%s\"%confusion_matrix(y_test_pred,y_test))\nprint(\"\\nClassificationReport:\\n%s\"%classification_report(y_test_pred,y_test))","5f7d97f3":"Phones with 4G supported","54b91a4f":"## Logistic Regression","60cd4dd7":"## SVM","42a3ed7c":"## KNN","238dafa9":"## Gradient Boosting","7b9ae42a":"## Decision Tree","d68291a9":"## Input","9ae8f8ea":"Phones with 3G supported","2b0536e8":"## Linear Regression","2b490e88":"## Visualization","829898af":"## Random Forest"}}