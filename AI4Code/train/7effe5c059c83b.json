{"cell_type":{"de4e0c5d":"code","5e25295e":"code","c08c1002":"code","c8ce16c9":"code","1aac12aa":"code","581a7449":"code","6793c49c":"code","f71d8655":"code","34efa860":"code","1645721c":"code","5df1cfdd":"code","0b13a4d2":"code","aeab5275":"code","9c53761f":"code","eb67d79d":"code","d6c0c06e":"code","692a1d6c":"code","3c889ab7":"markdown","61e45a69":"markdown","bd7a4c4e":"markdown","946ec107":"markdown","99f274f8":"markdown","830e66ec":"markdown","40a856fe":"markdown"},"source":{"de4e0c5d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5e25295e":"# Importing the dataset\ndataset = pd.read_csv(\"..\/input\/heart.csv\")","c08c1002":"import missingno as msno\nmsno.matrix(dataset)\n","c8ce16c9":"dataset.head()","1aac12aa":"dataset.describe()","581a7449":"dataset.shape","6793c49c":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfig, ax = plt.subplots(4,2, figsize = (16,16))\nsns.distplot(dataset.age, ax = ax[0, 0])\nsns.distplot(dataset.cp, ax = ax[0, 1])\nsns.distplot(dataset.trestbps, ax = ax[1, 0])\nsns.distplot(dataset.chol, ax = ax[1, 1])\nsns.distplot(dataset.thalach, ax = ax[2, 0])\nsns.distplot(dataset.oldpeak, ax = ax[2, 1])\nsns.distplot(dataset.thal, ax = ax[3, 0])\nsns.distplot(dataset.age, ax = ax[3, 1])\n","f71d8655":"# sns.set(style=\"darkgrid\")\n# sns.countplot(dataset.sex, palette=\"Set3\")\n\ng = sns.FacetGrid(dataset, col=\"sex\", row=\"target\", margin_titles=True)\ng.map(plt.hist, \"age\")","34efa860":"sufferer_sex = dataset[dataset['target']==1]['sex'].value_counts()\nhealthy_sex = dataset[dataset['target']==0]['sex'].value_counts()\ndf = pd.DataFrame([sufferer_sex, healthy_sex])\ndf.index = ['Sufferer','Healthy']\ndf.plot(kind='bar',stacked=True, figsize=(9,6), color = ['g', 'c'])","1645721c":"fig = plt.gcf()\nfig.set_size_inches(15, 8)\nsns.heatmap(dataset.corr(), annot = True, cmap = 'YlGnBu')","5df1cfdd":"# Splitting the dataset into testing set and training set\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","0b13a4d2":"# Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\nclassifier_1 = LogisticRegression()\nclassifier_1.fit(X_train, y_train)\n\n# Predicting\ny_pred = classifier_1.predict(X_test)\n\n# Accuracy\nprint(classifier_1.score(X_test, y_test))\n\n# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\n# Visualizing\nsns.heatmap(cm, annot = True, cmap = 'Greens')","aeab5275":"# # K-nearest neighbour\n# from sklearn.neighbors import KNeighborsClassifier\n# classifier_2 = KNeighborsClassifier(n_neighbors = 10, metric = 'minkowski', p = 2)\n# classifier_2.fit(X_train, y_train)\n\n# # predicting\n# y_pred = classifier_2.predict(X_test)\n\n# # Accuracy\n# print(classifier_2.score(X_test, y_test))\n\n# # Confusion Matrix\n# from sklearn.metrics import confusion_matrix\n# cm = confusion_matrix(y_test, y_pred)\n# # Visualizing\n# sns.heatmap(cm, annot = True, cmap = 'Greens')","9c53761f":"# SVM\nfrom sklearn.svm import SVC\nclassifier_3 = SVC(kernel = 'linear')\nclassifier_3.fit(X_train, y_train)\n\n# predicting\ny_pred = classifier_3.predict(X_test)\n\n# Accuracy\nprint(classifier_3.score(X_test, y_test))\n\n# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\n# Visualizing\nsns.heatmap(cm, annot = True, cmap = 'Greens')","eb67d79d":"# Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\nclassifier_4 = GaussianNB()\nclassifier_4.fit(X_train, y_train)\n\n# predicting\ny_pred = classifier_4.predict(X_test)\n\n# Accuracy\nprint(classifier_4.score(X_test, y_test))\n\n# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\n# Visualizing\nsns.heatmap(cm, annot = True, cmap = 'Greens')","d6c0c06e":"# Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\nclassifier_5 = DecisionTreeClassifier(criterion = \"entropy\", random_state = 0)\nclassifier_5.fit(X_train, y_train)\n\n# predicting\ny_pred = classifier_5.predict(X_test)\n\n# Accuracy\nprint(classifier_5.score(X_test, y_test))\n\n# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\n# Visualizing\nsns.heatmap(cm, annot = True, cmap = 'Greens')","692a1d6c":"# Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier_6 = RandomForestClassifier(n_estimators = 200, criterion = \"entropy\", random_state = 0)\nclassifier_6.fit(X_train, y_train)\n\n# predicting\ny_pred = classifier_6.predict(X_test)\n\n# Accuracy\nprint(classifier_6.score(X_test, y_test))\n\n# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\n# Visualizing\nsns.heatmap(cm, annot = True, cmap = 'Greens')\n","3c889ab7":"Gender graph","61e45a69":"Apply Machine learning models","bd7a4c4e":"No missing data. :)","946ec107":" There are 14 columns out of which first 13 are the features of a heart paitent. These 13 features will be analysed for predicting the disease.","99f274f8":"Correlation Heat Map","830e66ec":"Visualizing the data","40a856fe":"Check the missing data."}}