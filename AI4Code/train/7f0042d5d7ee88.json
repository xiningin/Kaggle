{"cell_type":{"ba8fc586":"code","24cf4017":"code","35544d4b":"code","a2e61350":"code","7380fb14":"code","7700705a":"code","ddef5007":"code","a516b137":"code","57ee0d36":"code","9c563c3f":"code","d8000401":"code","64913749":"code","824ee9ec":"code","2e2aa523":"code","f79bcdfd":"code","667d82bf":"code","ce6e5f85":"code","e456beb6":"code","86dc4c90":"code","302c26e3":"code","0c022e0c":"code","a0c2eb2a":"code","5ff02e69":"code","e265d60a":"code","447783c1":"code","8eea7c26":"code","05ed16f2":"code","3669a8af":"code","00cdfdce":"code","cd7327b6":"code","2be997b1":"code","968f8a53":"code","e8dc02a1":"code","70c31a87":"code","2fbfcb6e":"code","9fe48caf":"code","9d1186e8":"code","a8bb5967":"code","14f39372":"code","0d14c768":"code","8dd349d7":"markdown","9ede729b":"markdown","1ea61324":"markdown","f5622bb4":"markdown","06b2ecc8":"markdown","e24d19d2":"markdown","72d208ff":"markdown","d6ffe306":"markdown","c1dc2bc3":"markdown","4d325ab8":"markdown","04d4d8a4":"markdown","481e8fc0":"markdown","a5dfadec":"markdown","c005d33b":"markdown","845fc8ca":"markdown","f2ae854d":"markdown","54e7b5e1":"markdown","cd5b3fe6":"markdown","ee7e61b0":"markdown","565392fc":"markdown","601a14d1":"markdown","e0c3e61d":"markdown","02a1f001":"markdown","19d13927":"markdown","37b24290":"markdown","681ff780":"markdown","348f72f0":"markdown","987fe3c8":"markdown","8743736a":"markdown","281e640b":"markdown","78498b77":"markdown","b392e5fd":"markdown","7cbc3775":"markdown","85a0b7fa":"markdown","bac48c8c":"markdown","faecb838":"markdown","308c88d5":"markdown","f0684256":"markdown","c710b476":"markdown","16dcf82b":"markdown","650568d6":"markdown","4804f1e8":"markdown","799b3309":"markdown","22b301d9":"markdown","1e22afb7":"markdown","1c20a4d4":"markdown","a307acd4":"markdown","65b599e2":"markdown","380e7783":"markdown","bc3be89d":"markdown","9935cbab":"markdown","279567e1":"markdown","3b2dc857":"markdown","46c668d0":"markdown","d21d93bb":"markdown","e65aa057":"markdown","60fb43ce":"markdown","6c1bca5e":"markdown","489ed36b":"markdown","a9d6ec9a":"markdown","c499a335":"markdown","e139f9d1":"markdown","8eb33197":"markdown"},"source":{"ba8fc586":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pandas_profiling import ProfileReport\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","24cf4017":"def plot_bar_vertical(df,figsize=(10,15),xlabel='Count Number',color='tab:blue'):\n    ax = df.plot.barh(figsize=figsize,color=color)\n    plt.xlabel(xlabel)\n    for p in ax.patches:\n        ax.text(p.get_x() + p.get_width(),p.get_y() + p.get_height()\/2,f'{int(p.get_width())}')\n\n        \ndef plot_donut_chart(df,figsize=(10,15),subplots=True,radius=0.7,pctdistance=0.8):\n    df.plot.pie(figsize=figsize,subplots=subplots,pctdistance=pctdistance,explode=[0.1 for x in df.index])\n    centre_circle = plt.Circle((0,0),radius,fc='white')\n    fig = plt.gcf()\n    fig.gca().add_artist(centre_circle)","35544d4b":"car_us_df = pd.read_csv(\"\/kaggle\/input\/usa-cers-dataset\/USA_cars_datasets.csv\",index_col=0)\ncar_us_df.head()","a2e61350":"car_us_df.info()","7380fb14":"car_us_df.describe()","7700705a":"ProfileReport(car_us_df)","ddef5007":"ax = car_us_df.price.plot.hist(figsize=(12,10))\nplt.xlabel('Price')\nplt.xticks(np.arange(0,100000,10000))\nfor p in ax.patches:\n        ax.text(p.get_x() + p.get_width()\/4,p.get_y() + p.get_height(),f'{int(p.get_height())}')","a516b137":"car_us_df.price.describe()","57ee0d36":"special_cases_price_zero = car_us_df[(car_us_df.price == 0)]\ndisplay(special_cases_price_zero.head(10))\nspecial_cases_price_zero.shape","9c563c3f":"plot_bar_vertical(special_cases_price_zero.groupby(['brand','model']).brand.count().sort_values())","d8000401":"ax = plot_donut_chart(special_cases_price_zero.groupby(['brand','model']).brand.count(),radius=0.8)","64913749":"special_cases_price_zero[special_cases_price_zero.title_status == 'clean vehicle']","824ee9ec":"special_cases_price_great = car_us_df[car_us_df.price >= 30000]\nspecial_cases_price_great.head()","2e2aa523":"plot_bar_vertical(special_cases_price_great.groupby(['brand','model']).brand.count().sort_values().tail(10))","f79bcdfd":"car_us_df[car_us_df.price == car_us_df.price.max()]","667d82bf":"plot_bar_vertical(car_us_df.groupby(['brand','model']).brand.count().sort_values().tail(10),color='tab:green')","ce6e5f85":"plot_bar_vertical(car_us_df.groupby(['brand','model']).price.mean().sort_values().tail(10),(12,15),'price',color='tab:green')","e456beb6":"section_color = 'tab:brown'","86dc4c90":"plot_bar_vertical(car_us_df.title_status.value_counts(),(10,6),color=section_color)","302c26e3":"print(f'Salvage insuranced rate: {round((car_us_df.title_status.value_counts()[1] \/ car_us_df.title_status.value_counts()[0]) * 100,2)}%')","0c022e0c":"plot_bar_vertical(car_us_df.groupby('title_status').price.mean(),(12,6),'Price',color=section_color)","a0c2eb2a":"car_us_df","5ff02e69":"section_color ='tab:cyan'","e265d60a":"ax = car_us_df.plot(kind='scatter',x='mileage',y='price',figsize=(10,8),color=section_color)","447783c1":"print(f'{int(car_us_df.mileage.max())} miles')\ncar_us_df[car_us_df.mileage == car_us_df.mileage.max()]","8eea7c26":"section_color = 'tab:orange'","05ed16f2":"top_colors = [color if color != 'no_color' else '#FFFFFF' for color in car_us_df.color.value_counts().sort_values().tail(10).index]\nax = car_us_df.color.value_counts().sort_values().tail(10).plot.barh(color=top_colors,figsize=(12,10))\nax.set_facecolor('purple')\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width(),p.get_y() + p.get_height()\/2,f'{int(p.get_width())}')","3669a8af":"section_color ='tab:purple'","00cdfdce":"plt.ylabel('US State')\nplot_bar_vertical(car_us_df.state.value_counts().sort_values().tail(10),color=section_color)","cd7327b6":"price_estimator_df = car_us_df.copy()\nfeatures_to_drop = ['vin','lot','country','condition']\nprice_estimator_df.drop(features_to_drop,axis=1,inplace=True)\nprice_estimator_df","2be997b1":"cat_features = [col for col in price_estimator_df.select_dtypes('object')]\ncat_features","968f8a53":"train = price_estimator_df.drop('price',axis=1)\ntarget = price_estimator_df.price","e8dc02a1":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import LabelEncoder,StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split,cross_val_score,KFold,cross_val_predict,GridSearchCV\nfrom sklearn.metrics import r2_score\nfrom xgboost import XGBRegressor","70c31a87":"[(col,train[col].nunique()) for col in cat_features]","2fbfcb6e":"cat_transformer = LabelEncoder()\n\nfor col in cat_features:\n    train[col] = cat_transformer.fit_transform(train[col])\ntrain","9fe48caf":"X_train,X_val,y_train,y_val = train_test_split(train,target,test_size=0.2,shuffle=True,random_state=20)","9d1186e8":"model = XGBRegressor()\nmodel.fit(X_train,y_train)\nr2_score(y_pred=model.predict(X_val),y_true=y_val)","a8bb5967":"params_set1 = {'max_depth':[3,4,5],'gamma':[0,1,5]}\n\nmodel = XGBRegressor()\n\nclf = GridSearchCV(model,params_set1,cv=KFold(n_splits=5),scoring='r2',refit=True)\nclf.fit(X_train,y_train)\n\n\ndisplay(clf.best_score_,clf.best_params_)","14f39372":"params_set2 = {'n_estimators':[50,100,500,1000],'learning_rate':[0.01,0.03,0.05]}\n\nmodel = XGBRegressor(max_depth=4,gamma=0)\n\nclf = GridSearchCV(model,params_set2,cv=KFold(n_splits=5),scoring='r2',refit=True)\nclf.fit(X_train,y_train)\n\n\ndisplay(clf.best_score_,clf.best_params_)","0d14c768":"model = XGBRegressor(gamma=0, max_depth= 4,learning_rate=0.03,n_estimators=1000)\nmodel.fit(X_train,y_train)\nr2_score(y_pred=model.predict(X_val),y_true=y_val)","8dd349d7":"- `ford`,`f-150` was the most common car type among cars over \\$30000","9ede729b":"### What colors were most common?","1ea61324":"### Make a copy of original dataframe and dropped features that had no correlation with the target feature `price`","f5622bb4":"### Using grid search to find parameters that had best performance (valuation metric R-squared `r2`)","06b2ecc8":"### I use Label Encoder here instead of One-Hot Encoder due to some features had large cardinality numbers which could generate too many features to the dataset if using One-Hot Encoding","e24d19d2":"## Feature -> `color`","72d208ff":"- Second parameter set on `n_estimators` and `learning_rate`\n- Score was improved to 0.68","d6ffe306":"---","c1dc2bc3":"## Cars with tag more than \\$ 30000","4d325ab8":"- 363 cars from `ford`,`door` \n- Most common manufacturers were `ford`,`dodge`,`nissan`,`chevrolet`\n- Most common models were `door`,`f-150`,`caravan`","04d4d8a4":"- 299 cars were located in pennsylvania, following by 246 cars in florida","481e8fc0":"### Found all catgorical features","a5dfadec":"- `mercedes-benz`,`sl-class` was the most expensive car type with a price of \\$84900 , \\$29300 more than second place `lexus`,`gx`\n- Luxury brands like `mercedes-benz`,`lexus`,`bmw`,`harley-davidson` occupied the top of the chart","c005d33b":"# Price Estimator","845fc8ca":"## What was the average price for each `ford`,`model`?","f2ae854d":"## Feature -> `state`","54e7b5e1":"### The most expensive one?","cd5b3fe6":"---","ee7e61b0":"- Cardinality for each categorical feature where basically every feature except title_status had more than 10 unique elements","565392fc":"# Thanks for reading","601a14d1":"- Most expensive one was the `mercedes-benz`,`sl-class` sold for \\$84900 in `florida`","e0c3e61d":"## Feature -> `price`","02a1f001":"# EDA Phase","19d13927":"### Cardinality for each categorical feature","37b24290":"## What's the distribution of the selling price?","681ff780":"- Two cars sold for \\$0 while had no damage records.\n- first case had a mileage of 76858 mi which was considerably old\n- second case was a 2009 white heartland sundance, no mileage on it at all, sitting in a place in pennsylvania covered in dirt for 11 years since it was manufactured, yet it was tagged for \\$0","348f72f0":"# Load Dataset","987fe3c8":"## What were most common manufacturer and thier models?","8743736a":"### I chose XGBRegressor since it was a regression task, you could try other regression models like Lasso,ElasticNet etc.","281e640b":"### What was the maximum mileage? and the car with that number?","78498b77":"### Import libraries","b392e5fd":"- With default settings, model had an r2 score of 0.66","7cbc3775":"- In average, salvage insuranced cars were much cheaper than clean with a gap amount of \\$17581\n- Clean vehicles' average price was close to the mean value we seen in the beginning as expected","85a0b7fa":"---","bac48c8c":"# Dataset Report","faecb838":"### A lot of them had damaged records, which made sense that the prices were extremely low, how about those 'clean' vehicles but yet still for \\$0?","308c88d5":"### Baseline Model","f0684256":"## Which state they were mostly located?","c710b476":"- the maximum mileage was 1,017,936 miles and that was a pretty large one\n- It was a `2010`,`peterbilt`,`truck` with unknown color located in georgia which was under salvage insurance for a price of \\$1025","16dcf82b":"### Split the dataset into training set and validation set","650568d6":"---","4804f1e8":"### Clean vs Salvage, How many cars were under salvage insurance?","799b3309":"## Feature -> `mileage`","22b301d9":"## Feature -> `title_status`","1e22afb7":"### Separate target feature `price` and other training features","1c20a4d4":"## Cars with price tag \\$0","a307acd4":"- `White` color was the most common color\n- `no_color` at 7th place was filled with white color but actually it would be transparent instead\n- Common colors were `white`,`black`,`gray`,`silver`","65b599e2":"- Most selling price fell in the range from \\$0 to \\$30000\n- The average price was \\$18767\n- Let's take a closer look at special cases, cars worth \\$0 and greater than \\$30000","380e7783":"## Feature -> `brand`,`model`","bc3be89d":"- Grid search for `max_depth` and `gamma`\n- Best one had a r2 score of 0.676\n- Optimal parameters shown above","9935cbab":"### What car types were the most common among them?","279567e1":"### What was the relation between `price` and `mileage`?","3b2dc857":"### What was the price for clean vehicles? and for salvage insuranced?","46c668d0":"- Finally, I apply those optimal parameters to the model and retrain on the dataset\n- r2 score was `0.69`, an increase of 0.03 comparing to the baseline score `0.66`","d21d93bb":"# This notebook contains exploratory data analysis and price prediction on US cars","e65aa057":"- 13 cars from `ford`,`door`, next was 9 cars from `chevrolet`,`door`","60fb43ce":"- An exponentially decrase relationship could be obtained\n- As `mileage` increased, its `price` dropped exponentially","6c1bca5e":"---","489ed36b":"- 43 cars had price tags \\$0","a9d6ec9a":"## A price estimator could give a reasonable price for a new coming car according to the market based on given conditions","c499a335":"### What were their brands and models?","e139f9d1":"### Obersrving from dataframe.info(), no missing entries here.","8eb33197":"- Most cars were in clean condition while only 163 were damaged in the past\n- Close to 7% of all cars were salvage insuranced"}}